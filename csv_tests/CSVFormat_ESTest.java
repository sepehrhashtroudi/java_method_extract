/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 02 00:15:51 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import org.apache.commons.csv.CSVFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\uFFFF');
      boolean boolean0 = cSVFormat1.isCommentingEnabled();
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\uFFFE', cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isEmptyLinesIgnored());
      assertEquals('\"', cSVFormat1.getEncapsulator());
      assertTrue(boolean0);
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\uFFFF', cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withDelimiter('\t');
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\"', cSVFormat1.getEncapsulator());
      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());
      assertTrue(cSVFormat1.isEmptyLinesIgnored());
      assertEquals('\uFFFE', cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.validate();
      assertEquals(',', cSVFormat0.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(true);
      CSVFormat cSVFormat2 = cSVFormat1.withLineSeparator("");
      assertEquals('\uFFFE', cSVFormat1.getEscape());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat1.isSurroundingSpacesIgnored());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', cSVFormat2.getEncapsulator());
      assertEquals('\"', cSVFormat1.getEncapsulator());
      assertTrue(cSVFormat1.isEmptyLinesIgnored());
      assertEquals('\uFFFE', cSVFormat1.getCommentStart());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(']');
      CSVFormat cSVFormat2 = cSVFormat1.withLineSeparator("=>I^Jz");
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals(']', cSVFormat2.getCommentStart());
      assertEquals(']', cSVFormat1.getCommentStart());
      assertEquals('\"', cSVFormat1.getEncapsulator());
      assertEquals('\uFFFE', cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isEmptyLinesIgnored());
      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', cSVFormat2.getEncapsulator());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\'');
      assertEquals('\'', cSVFormat1.getEscape());
      assertEquals('\"', cSVFormat1.getEncapsulator());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isSurroundingSpacesIgnored());
      assertTrue(cSVFormat1.isEmptyLinesIgnored());
      assertFalse(cSVFormat1.isCommentingEnabled());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('e');
      assertEquals('e', cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());
      assertEquals('\"', cSVFormat1.getEncapsulator());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isEmptyLinesIgnored());
      assertEquals(',', cSVFormat1.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withCommentStart('F');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('v');
      assertEquals('\"', cSVFormat2.getEncapsulator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals('F', cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());
      assertEquals('\"', cSVFormat1.getEncapsulator());
      assertFalse(cSVFormat1.isEmptyLinesIgnored());
      assertEquals('v', cSVFormat2.getEscape());
      assertEquals('F', cSVFormat2.getCommentStart());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(true);
      CSVFormat cSVFormat2 = cSVFormat1.withEncapsulator(';');
      CSVFormat cSVFormat3 = cSVFormat2.withEmptyLinesIgnored(true);
      assertEquals('\\', cSVFormat3.getEscape());
      assertEquals(';', cSVFormat3.getEncapsulator());
      assertEquals('\uFFFE', cSVFormat1.getEncapsulator());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat1.isSurroundingSpacesIgnored());
      assertEquals('\uFFFE', cSVFormat3.getCommentStart());
      assertFalse(cSVFormat1.isEmptyLinesIgnored());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEmptyLinesIgnored(true);
      assertEquals('\uFFFE', cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isEmptyLinesIgnored());
      assertEquals('\uFFFE', cSVFormat1.getCommentStart());
      assertEquals('\"', cSVFormat1.getEncapsulator());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEmptyLinesIgnored(false);
      assertFalse(cSVFormat1.isEmptyLinesIgnored());
      assertEquals('\"', cSVFormat1.getEncapsulator());
      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());
      assertEquals('\uFFFE', cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals(',', cSVFormat1.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\"');
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isEmptyLinesIgnored());
      assertEquals('\uFFFE', cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isSurroundingSpacesIgnored());
      assertEquals('\"', cSVFormat1.getCommentStart());
      assertEquals('\"', cSVFormat1.getEncapsulator());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\uFFFE');
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());
      assertFalse(cSVFormat1.isEmptyLinesIgnored());
      assertEquals('\\', cSVFormat1.getEscape());
      assertEquals('\uFFFE', cSVFormat1.getCommentStart());
      assertEquals('\uFFFE', cSVFormat1.getEncapsulator());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      boolean boolean0 = cSVFormat0.isSurroundingSpacesIgnored();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('C');
      boolean boolean0 = cSVFormat1.isEscaping();
      assertEquals('C', cSVFormat1.getEscape());
      assertTrue(boolean0);
      assertEquals('\"', cSVFormat1.getEncapsulator());
      assertFalse(cSVFormat1.isEmptyLinesIgnored());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      boolean boolean0 = cSVFormat0.isEscaping();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      boolean boolean0 = cSVFormat0.isEncapsulating();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      boolean boolean0 = cSVFormat0.isEncapsulating();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      boolean boolean0 = cSVFormat0.isEmptyLinesIgnored();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withLineSeparator((String) null);
      cSVFormat1.getLineSeparator();
      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());
      assertEquals('\"', cSVFormat1.getEncapsulator());
      assertEquals('\uFFFE', cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isEmptyLinesIgnored());
      assertEquals(',', cSVFormat1.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('n', 'n', 'N', 'J', false, false, "", stringArray0);
      cSVFormat0.getLineSeparator();
      assertEquals('N', cSVFormat0.getCommentStart());
      assertEquals('n', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isSurroundingSpacesIgnored());
      assertEquals('n', cSVFormat0.getEncapsulator());
      assertFalse(cSVFormat0.isEmptyLinesIgnored());
      assertEquals('J', cSVFormat0.getEscape());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = cSVFormat0.getHeader();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[4];
      CSVFormat cSVFormat0 = new CSVFormat('F', 'F', 'E', 'F', true, true, "rhbtg3{m/[", stringArray0);
      cSVFormat0.getHeader();
      assertEquals('F', cSVFormat0.getEncapsulator());
      assertEquals('F', cSVFormat0.getEscape());
      assertEquals('F', cSVFormat0.getDelimiter());
      assertEquals('E', cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.isEmptyLinesIgnored());
      assertTrue(cSVFormat0.isSurroundingSpacesIgnored());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.getHeader();
      assertFalse(cSVFormat1.isEmptyLinesIgnored());
      assertEquals('\"', cSVFormat1.getEncapsulator());
      assertEquals('\uFFFE', cSVFormat1.getEscape());
      assertEquals('\uFFFE', cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());
      assertEquals(',', cSVFormat1.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('d', 'a', 'S', '8', false, false, "<^pgx,", stringArray0);
      char char0 = cSVFormat0.getEscape();
      assertEquals('a', cSVFormat0.getEncapsulator());
      assertEquals('d', cSVFormat0.getDelimiter());
      assertEquals('S', cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEmptyLinesIgnored());
      assertEquals('8', char0);
      assertFalse(cSVFormat0.isSurroundingSpacesIgnored());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[7];
      CSVFormat cSVFormat0 = new CSVFormat('C', 'W', 'C', 'W', true, false, "", stringArray0);
      char char0 = cSVFormat0.getEscape();
      assertEquals('W', cSVFormat0.getEncapsulator());
      assertEquals('W', char0);
      assertTrue(cSVFormat0.isSurroundingSpacesIgnored());
      assertEquals('C', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEmptyLinesIgnored());
      assertEquals('C', cSVFormat0.getCommentStart());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('d', 'a', 'S', '8', false, false, "<^pgx,", stringArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withEncapsulator('8');
      char char0 = cSVFormat1.getEncapsulator();
      assertFalse(cSVFormat0.isEmptyLinesIgnored());
      assertEquals('a', cSVFormat0.getEncapsulator());
      assertEquals('8', char0);
      assertEquals('d', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isSurroundingSpacesIgnored());
      assertEquals('8', cSVFormat1.getEscape());
      assertEquals('8', cSVFormat0.getEscape());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals('S', cSVFormat0.getCommentStart());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withEncapsulator('K');
      char char0 = cSVFormat1.getEncapsulator();
      assertEquals('K', char0);
      assertEquals('\uFFFE', cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isSurroundingSpacesIgnored());
      assertEquals('\uFFFE', cSVFormat1.getCommentStart());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isEmptyLinesIgnored());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[2];
      CSVFormat cSVFormat0 = new CSVFormat('<', 'M', 'h', 'M', false, false, "*<yK", stringArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('2');
      char char0 = cSVFormat1.getDelimiter();
      assertEquals('2', char0);
      assertFalse(cSVFormat0.isEmptyLinesIgnored());
      assertEquals('h', cSVFormat0.getCommentStart());
      assertEquals('M', cSVFormat1.getEncapsulator());
      assertEquals('h', cSVFormat1.getCommentStart());
      assertFalse(cSVFormat0.isSurroundingSpacesIgnored());
      assertEquals('M', cSVFormat0.getEscape());
      assertEquals('M', cSVFormat1.getEscape());
      assertEquals('M', cSVFormat0.getEncapsulator());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[7];
      CSVFormat cSVFormat0 = new CSVFormat('C', 'W', 'C', 'W', true, false, "", stringArray0);
      char char0 = cSVFormat0.getDelimiter();
      assertTrue(cSVFormat0.isSurroundingSpacesIgnored());
      assertEquals('C', cSVFormat0.getCommentStart());
      assertEquals('W', cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEmptyLinesIgnored());
      assertEquals('W', cSVFormat0.getEncapsulator());
      assertEquals('C', char0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      char char0 = cSVFormat0.getCommentStart();
      assertEquals('\uFFFE', char0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = new CSVFormat('M', 'Y', '9', '9', true, true, "S8s(dq", (String[]) null);
      char char0 = cSVFormat0.getCommentStart();
      assertEquals('9', char0);
      assertTrue(cSVFormat0.isSurroundingSpacesIgnored());
      assertEquals('M', cSVFormat0.getDelimiter());
      assertEquals('9', cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isEmptyLinesIgnored());
      assertEquals('Y', cSVFormat0.getEncapsulator());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[1];
      String string0 = cSVFormat0.RFC4180.format(stringArray0);
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[0];
      String string0 = cSVFormat0.EXCEL.format(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        cSVFormat0.MYSQL.parse((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      boolean boolean0 = cSVFormat0.isCommentingEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      boolean boolean0 = cSVFormat0.isSurroundingSpacesIgnored();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char char0 = cSVFormat0.getEscape();
      assertEquals('\\', char0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      char char0 = cSVFormat0.getEncapsulator();
      assertEquals('\"', char0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      boolean boolean0 = cSVFormat0.isEmptyLinesIgnored();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[2];
      CSVFormat cSVFormat0 = new CSVFormat('<', 'M', 'h', 'M', false, false, "*<yK", stringArray0);
      char char0 = cSVFormat0.getCommentStart();
      assertEquals('M', cSVFormat0.getEncapsulator());
      assertEquals('M', cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEmptyLinesIgnored());
      assertEquals('h', char0);
      assertEquals('<', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isSurroundingSpacesIgnored());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      char char0 = cSVFormat0.getDelimiter();
      assertEquals(',', char0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[15];
      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<\u0002> Escape=<\u0002> Encapsulator=<\u0002> CommentStart=<\u0002>", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String string0 = cSVFormat0.TDF.toString();
      assertEquals("Delimiter=<\t> Encapsulator=<\"> EmptyLines:ignored SurroundingSpaces:ignored", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringReader stringReader0 = new StringReader("9l9mc%wGF#**|w");
      cSVFormat0.parse(stringReader0);
      assertEquals('\"', cSVFormat0.getEncapsulator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentingEnabled());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        cSVFormat0.withEscape('\n');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEncapsulator('\uFFFF');
      StringReader stringReader0 = new StringReader("ru-.");
      cSVFormat1.parse(stringReader0);
      assertFalse(cSVFormat1.isEmptyLinesIgnored());
      assertEquals('\uFFFF', cSVFormat1.getEncapsulator());
      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('\\', cSVFormat1.getEscape());
      assertEquals('\t', cSVFormat1.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        cSVFormat0.withDelimiter('\n');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The delimiter cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[6];
      CSVFormat cSVFormat0 = new CSVFormat('w', 'w', 'w', 'w', true, true, "(", stringArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
      assertEquals('w', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat0.isSurroundingSpacesIgnored());
      assertEquals('w', cSVFormat0.getEscape());
      assertEquals('w', cSVFormat1.getEncapsulator());
      assertEquals('w', cSVFormat0.getEncapsulator());
      assertEquals('w', cSVFormat1.getEscape());
      assertTrue(cSVFormat0.isEmptyLinesIgnored());
      assertEquals('w', cSVFormat0.getCommentStart());
      assertEquals('w', cSVFormat1.getCommentStart());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = new CSVFormat('h', 'M', '0', '0', false, false, "OW;[;:=edc", (String[]) null);
      try { 
        cSVFormat0.validate();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same (\"0\")
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[25];
      CSVFormat cSVFormat0 = new CSVFormat('\u0011', '7', '7', '7', false, false, "3", stringArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.format(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the encapsulator cannot be the same (\"7\")
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(',');
      try { 
        cSVFormat1.validate();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same (\",\")
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[15];
      CSVFormat cSVFormat0 = new CSVFormat('\u001B', ')', '\u001B', '\u001B', false, false, "^_?~%}7@J~3", stringArray0);
      StringReader stringReader0 = new StringReader("^_?~%}7@J~3");
      // Undeclared exception!
      try { 
        cSVFormat0.parse(stringReader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same (\"\u001B\")
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String[] stringArray0 = new String[15];
      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);
      StringReader stringReader0 = new StringReader("oSG4>o_P >`mg z{<5");
      // Undeclared exception!
      try { 
        cSVFormat0.parse(stringReader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The encapsulator character and the delimiter cannot be the same (\"\u0002\")
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      // Undeclared exception!
      try { 
        cSVFormat0.withEncapsulator('\r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The encapsulator cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String[] stringArray0 = new String[2];
      CSVFormat cSVFormat0 = new CSVFormat('\n', '\n', '\n', '\n', false, false, "2oG4>eo_PD >`mz{<5", stringArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentStart('\n');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String[] stringArray0 = new String[6];
      CSVFormat cSVFormat0 = new CSVFormat('w', 'w', 'w', 'w', true, true, "(", stringArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      assertEquals('w', cSVFormat1.getEscape());
      assertEquals('w', cSVFormat0.getEscape());
      assertEquals('w', cSVFormat1.getEncapsulator());
      assertTrue(cSVFormat0.isEmptyLinesIgnored());
      assertEquals('w', cSVFormat1.getCommentStart());
      assertEquals('w', cSVFormat0.getDelimiter());
      assertEquals('w', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat0.isSurroundingSpacesIgnored());
      assertEquals('w', cSVFormat0.getCommentStart());
      assertEquals('w', cSVFormat0.getEncapsulator());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String[] stringArray0 = new String[15];
      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withLineSeparator(stringArray0[0]);
      String string0 = cSVFormat1.toString();
      assertTrue(cSVFormat0.isCommentingEnabled());
      assertEquals("Delimiter=<\t> Escape=<\\>", string0);
      assertEquals('\u0002', cSVFormat0.getEncapsulator());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = new CSVFormat('/', '/', '>', '>', false, false, "Escape=<", (String[]) null);
      // Undeclared exception!
      try { 
        cSVFormat0.TDF.format((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String[] stringArray0 = new String[15];
      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withEmptyLinesIgnored(false);
      assertFalse(cSVFormat0.isSurroundingSpacesIgnored());
      assertEquals('\u0002', cSVFormat0.getEncapsulator());
      assertEquals('\u0002', cSVFormat1.getEncapsulator());
      assertEquals('\u0002', cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEmptyLinesIgnored());
      assertEquals('\u0002', cSVFormat0.getDelimiter());
      assertEquals('\u0002', cSVFormat0.getCommentStart());
      assertEquals('\u0002', cSVFormat1.getDelimiter());
      assertEquals('\u0002', cSVFormat1.getEscape());
      assertEquals('\u0002', cSVFormat0.getEscape());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[15];
      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(false);
      assertEquals('\u0002', cSVFormat0.getDelimiter());
      assertEquals('\u0002', cSVFormat1.getDelimiter());
      assertEquals('\u0002', cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEmptyLinesIgnored());
      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());
      assertEquals('\u0002', cSVFormat0.getEncapsulator());
      assertEquals('\u0002', cSVFormat1.getEncapsulator());
      assertEquals('\u0002', cSVFormat1.getEscape());
      assertTrue(cSVFormat0.isCommentingEnabled());
      assertEquals('\u0002', cSVFormat1.getCommentStart());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String string0 = cSVFormat0.getLineSeparator();
      assertEquals("\r\n", string0);
  }
}
