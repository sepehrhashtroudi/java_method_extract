 InlineVariables(AbstractCompiler compiler, Mode mode, boolean inlineAllStrings)
 AliasCandidate(Var alias, ReferenceCollection refInfo)
public void process(Node externs, Node root)
private Predicate<Var> getFilterForMode()
public boolean apply(Var var)
public boolean apply(Var var)
public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap)
private void collectAliasCandidates(NodeTraversal t, ReferenceMap referenceMap)
private void doInlinesForScope(NodeTraversal t, ReferenceMap referenceMap)
private boolean maybeEscapedOrModifiedArguments(Scope scope, ReferenceMap referenceMap)
private boolean isLValue(Node n)
private void inlineNonConstants(Var v, ReferenceCollection referenceInfo, boolean maybeModifiedArguments)
private void blacklistVarReferencesInTree(Node root, Scope scope)
private boolean isVarInlineForbidden(Var var)
private void inline(Var v, Reference declaration, Reference init, Reference reference)
private void inlineWellDefinedVariable(Var v, Node value, List<Reference> refSet)
private void inlineDeclaredConstant(Var v, Node value, List<Reference> refSet)
private void removeDeclaration(Reference declaration)
private void inlineValue(Var v, Reference ref, Node value)
private boolean isInlineableDeclaredConstant(Var var, ReferenceCollection refInfo)
private boolean isStringWorthInlining(Var var, List<Reference> refs)
private boolean canInline(Reference declaration, Reference initialization, Reference reference)
private boolean canMoveAggressively(Node value)
private boolean canMoveModerately(Reference initialization, Reference reference)
private boolean isValidDeclaration(Reference declaration)
private boolean isValidInitialization(Reference initialization)
private boolean isValidReference(Reference reference)
private boolean isImmutableAndWellDefinedVariable(Var v, ReferenceCollection refInfo)
