 ProcessDefines(AbstractCompiler compiler, Map<String, Node> replacements)
 CollectDefines(AbstractCompiler compiler, List<Name> listOfDefines)
 RefInfo(Ref ref, Name name)
public DefineInfo(Node initialValue, Node initialValueParent)
 ProcessDefines injectNamespace(GlobalNamespace namespace)
public void process(Node externs, Node root)
private void overrideDefines(Map<String, DefineInfo> allDefines)
private static String format(MessageFormat format, Object... params)
private boolean isValidDefineType(JSTypeExpression expression)
private Map<String, DefineInfo> collectDefines(Node root, GlobalNamespace namespace)
 Map<String, DefineInfo> getAllDefines()
public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent)
public void visit(NodeTraversal t, Node n, Node parent)
private void updateAssignAllowedStack(Node n, boolean entering)
private boolean isAssignAllowed()
private boolean processDefineAssignment(NodeTraversal t, String name, Node value, Node valueParent)
private static Node getValueParent(Ref ref)
private void setDefineInfoNotAssignable(DefineInfo info, NodeTraversal t)
public void setNotAssignable(String reason)
public String getReasonWhyNotAssignable()
public boolean recordAssignment(Node value)
public Node getLastValue()
