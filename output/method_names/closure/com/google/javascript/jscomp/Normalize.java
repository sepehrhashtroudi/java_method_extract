 Normalize(AbstractCompiler compiler, boolean assertOnChange)
 RewriteExposedProperties(Set<String> exposedProperties)
 PropagateConstantAnnotationsOverVars(AbstractCompiler compiler, boolean forbidChanges)
 VerifyConstants(AbstractCompiler compiler, boolean checkUserDeclarations)
 NormalizeStatements(AbstractCompiler compiler, boolean assertOnChange)
 static Node parseAndNormalizeSyntheticCode(AbstractCompiler compiler, String code, String prefix)
 static Node parseAndNormalizeTestCode(AbstractCompiler compiler, String code, String prefix)
private void reportCodeChange(String changeDescription)
public void process(Node externs, Node root)
public void visit(NodeTraversal t, Node n, Node parent)
private boolean isMarkedExpose(Node n)
public void visit(NodeTraversal t, Node n, Node parent)
public void process(Node externs, Node root)
public void visit(NodeTraversal t, Node n, Node parent)
public void process(Node externs, Node root)
public void visit(NodeTraversal t, Node n, Node parent)
private void reportCodeChange(String changeDescription)
public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)
public void visit(NodeTraversal t, Node n, Node parent)
private void annotateConstantsByConvention(Node n, Node parent)
private void normalizeFunctionDeclaration(Node n)
private void rewriteFunctionDeclaration(Node n)
private void doStatementNormalizations(NodeTraversal t, Node n, Node parent)
private void normalizeLabels(Node n)
private void extractForInitializer(Node n, Node before, Node beforeParent)
private void splitVarDeclarations(Node n)
private void moveNamedFunctions(Node functionBody)
private Node addToFront(Node parent, Node newChild, Node after)
private void removeDuplicateDeclarations(Node externs, Node root)
public void onRedeclaration(Scope s, String name, Node n, CompilerInput input)
private void replaceVarWithAssignment(Node n, Node parent, Node gramps)
public void enterScope(NodeTraversal t)
public void exitScope(NodeTraversal t)
public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent)
public void visit(NodeTraversal t, Node n, Node parent)
