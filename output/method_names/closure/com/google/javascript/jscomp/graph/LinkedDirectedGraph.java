protected LinkedDirectedGraph(boolean useNodeAnnotations, boolean useEdgeAnnotations)
 LinkedDirectedGraphNode(N nodeValue)
 AnnotatedLinkedDirectedGraphNode(N nodeValue)
 LinkedDirectedGraphEdge(DiGraphNode<N, E> sourceNode, E edgeValue, DiGraphNode<N, E> destNode)
 AnnotatedLinkedDirectedGraphEdge(DiGraphNode<N, E> sourceNode, E edgeValue, DiGraphNode<N, E> destNode)
public SubGraph<N, E> newSubGraph()
public static LinkedDirectedGraph<N, E> createWithoutAnnotations()
public static LinkedDirectedGraph<N, E> createWithNodeAnnotations()
public static LinkedDirectedGraph<N, E> createWithEdgeAnnotations()
public static LinkedDirectedGraph<N, E> create()
public void connect(N srcValue, E edgeValue, N destValue)
public void disconnect(N n1, N n2)
public void disconnectInDirection(N srcValue, N destValue)
public Iterable<DiGraphNode<N, E>> getDirectedGraphNodes()
public DiGraphNode<N, E> getDirectedGraphNode(N nodeValue)
public GraphNode<N, E> getNode(N nodeValue)
public List<DiGraphEdge<N, E>> getInEdges(N nodeValue)
public List<DiGraphEdge<N, E>> getOutEdges(N nodeValue)
public DiGraphNode<N, E> createDirectedGraphNode(N nodeValue)
public List<GraphEdge<N, E>> getEdges(N n1, N n2)
public GraphEdge<N, E> getFirstEdge(N n1, N n2)
public GraphNode<N, E> createNode(N value)
public List<DiGraphEdge<N, E>> getDirectedGraphEdges(N n1, N n2)
public boolean isConnectedInDirection(N n1, N n2)
public boolean isConnectedInDirection(N n1, E edgeValue, N n2)
private boolean isConnectedInDirection(N n1, Predicate<E> edgeMatcher, N n2)
public List<DiGraphNode<N, E>> getDirectedPredNodes(N nodeValue)
public List<DiGraphNode<N, E>> getDirectedSuccNodes(N nodeValue)
public List<DiGraphNode<N, E>> getDirectedPredNodes(DiGraphNode<N, E> dNode)
public List<DiGraphNode<N, E>> getDirectedSuccNodes(DiGraphNode<N, E> dNode)
public List<GraphvizEdge> getGraphvizEdges()
public List<GraphvizNode> getGraphvizNodes()
public String getName()
public boolean isDirected()
public Collection<GraphNode<N, E>> getNodes()
public List<GraphNode<N, E>> getNeighborNodes(N value)
public List<GraphNode<N, E>> getNeighborNodes(DiGraphNode<N, E> node)
public Iterator<GraphNode<N, E>> getNeighborNodesIterator(N value)
public List<GraphEdge<N, E>> getEdges()
public int getNodeDegree(N value)
public N getValue()
public A getAnnotation()
public void setAnnotation(Annotation data)
public String getColor()
public String getId()
public String getLabel()
public String toString()
public List<DiGraphEdge<N, E>> getInEdges()
public List<DiGraphEdge<N, E>> getOutEdges()
private Iterator<GraphNode<N, E>> neighborIterator()
public boolean hasNext()
public GraphNode<N, E> next()
public void remove()
public A getAnnotation()
public void setAnnotation(Annotation data)
public DiGraphNode<N, E> getSource()
public DiGraphNode<N, E> getDestination()
public void setDestination(DiGraphNode<N, E> node)
public void setSource(DiGraphNode<N, E> node)
public E getValue()
public A getAnnotation()
public void setAnnotation(Annotation data)
public String getColor()
public String getLabel()
public String getNode1Id()
public String getNode2Id()
public String toString()
public GraphNode<N, E> getNodeA()
public GraphNode<N, E> getNodeB()
public A getAnnotation()
public void setAnnotation(Annotation data)
