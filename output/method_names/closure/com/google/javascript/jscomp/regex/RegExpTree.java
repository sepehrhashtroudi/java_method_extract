 Anchor(char type)
 WordBoundary(char type)
 BackReference(int groupIndex)
 Text(String text)
 Repetition(RegExpTree body, int min, int max, boolean greedy)
 Alternation(List<? extends RegExpTree> alternatives)
 LookaheadAssertion(RegExpTree body, boolean positive)
 CapturingGroup(RegExpTree body)
 Charset(CharRanges ranges, CharRanges ieExplicits)
 DecomposedCharset(boolean inverted, CharRanges ranges, String namedGroups)
 Concatenation(RegExpTree a, RegExpTree b)
 Concatenation(List<? extends RegExpTree> elements)
public abstract RegExpTree simplify(String flags)
public abstract boolean isCaseSensitive()
public abstract boolean containsAnchor()
public final boolean hasCapturingGroup()
public abstract int numCapturingGroups()
public abstract List<? extends RegExpTree> children()
protected abstract void appendSourceCode(StringBuilder sb)
protected abstract void appendDebugInfo(StringBuilder sb)
public final String toString()
public final String toDebugString()
private void appendDebugString(StringBuilder sb)
public abstract boolean equals(Object o)
public abstract int hashCode()
 RegExpTree parseTopLevel()
 RegExpTree parse()
private RegExpTree parseParenthetical()
private RegExpTree parseCharset()
private char parseEscapeChar()
private RegExpTree parseEscape()
private char parseHex(int n)
private boolean isRepetitionStart(char ch)
private RegExpTree parseRepetition(RegExpTree body)
public static RegExpTree parseRegExp(final String pattern, final String flags)
public static boolean matchesWholeInput(RegExpTree t, String flags)
public boolean isCaseSensitive()
public boolean containsAnchor()
public final int numCapturingGroups()
public final List<? extends RegExpTree> children()
public RegExpTree simplify(String flags)
protected void appendSourceCode(StringBuilder sb)
protected void appendDebugInfo(StringBuilder sb)
public boolean equals(Object o)
public int hashCode()
public RegExpTree simplify(String flags)
public boolean containsAnchor()
protected void appendSourceCode(StringBuilder sb)
protected void appendDebugInfo(StringBuilder sb)
public boolean equals(Object o)
public int hashCode()
public RegExpTree simplify(String flags)
protected void appendSourceCode(StringBuilder sb)
protected void appendDebugInfo(StringBuilder sb)
public boolean equals(Object o)
public int hashCode()
public RegExpTree simplify(String flags)
protected void appendSourceCode(StringBuilder sb)
protected void appendDebugInfo(StringBuilder sb)
public boolean equals(Object o)
public int hashCode()
private static void escapeRegularCharOnto(char ch, int next, StringBuilder sb)
public RegExpTree simplify(String flags)
public boolean isCaseSensitive()
protected void appendSourceCode(StringBuilder sb)
protected void appendDebugInfo(StringBuilder sb)
public boolean equals(Object o)
public int hashCode()
public RegExpTree simplify(String flags)
public boolean isCaseSensitive()
public boolean containsAnchor()
public int numCapturingGroups()
public List<? extends RegExpTree> children()
private void appendBodySourceCode(StringBuilder sb)
private static int suffixLen(int min, int max)
private static int numDecimalDigits(int n)
protected void appendSourceCode(StringBuilder sb)
protected void appendDebugInfo(StringBuilder sb)
public boolean equals(Object o)
public int hashCode()
public RegExpTree simplify(String flags)
public boolean isCaseSensitive()
public boolean containsAnchor()
public int numCapturingGroups()
public List<? extends RegExpTree> children()
protected void appendSourceCode(StringBuilder sb)
protected void appendDebugInfo(StringBuilder sb)
public boolean equals(Object o)
public int hashCode()
public RegExpTree simplify(String flags)
public boolean isCaseSensitive()
public boolean containsAnchor()
public int numCapturingGroups()
public List<? extends RegExpTree> children()
protected void appendSourceCode(StringBuilder sb)
protected void appendDebugInfo(StringBuilder sb)
public boolean equals(Object o)
public int hashCode()
public RegExpTree simplify(String flags)
public boolean isCaseSensitive()
public boolean containsAnchor()
public int numCapturingGroups()
public List<? extends RegExpTree> children()
protected void appendSourceCode(StringBuilder sb)
protected void appendDebugInfo(StringBuilder sb)
public boolean equals(Object o)
public int hashCode()
private static int complexityWordFolded(CharRanges ranges)
private static int complexityWordFoldedHelper(CharRanges ranges)
public RegExpTree simplify(String flags)
public boolean isCaseSensitive()
private DecomposedCharset decompose(CharRanges ranges, boolean inverted)
protected void appendSourceCode(StringBuilder sb)
 DecomposedCharset decompose()
protected void appendDebugInfo(StringBuilder sb)
public boolean equals(Object o)
public int hashCode()
 int complexity()
 void appendSourceCode(StringBuilder sb)
 static void escapeRangeCharOnto(char ch, boolean startIsFlush, boolean atStart, boolean atEnd, StringBuilder sb)
 static int complexity(CharRanges ranges)
public boolean equals(Object o)
public int hashCode()
 void simplify(RegExpTree t)
 RegExpTree simplifyPairwise(RegExpTree before, RegExpTree after)
public RegExpTree simplify(final String flags)
public boolean isCaseSensitive()
public boolean containsAnchor()
public int numCapturingGroups()
public List<? extends RegExpTree> children()
protected void appendSourceCode(StringBuilder sb)
protected void appendDebugInfo(StringBuilder sb)
public boolean equals(Object o)
public int hashCode()
 static void escapeCharOnto(char ch, StringBuilder sb)
