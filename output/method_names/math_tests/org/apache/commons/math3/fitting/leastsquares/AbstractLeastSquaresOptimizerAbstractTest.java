public LinearProblem(double[][] factors, double[] target)
public abstract T createOptimizer()
public abstract int getMaxIterations()
public double[] value(double[] point)
public double[][] value(double[] point)
public double[] value(double[] point)
public double[][] value(double[] point)
public void testShallowCopy()
public double[] value(double[] point)
public double[][] value(double[] point)
public void testGetIterations()
public void testTrivial()
public void testQRColumnsPermutation()
public void testNoDependency()
public void testOneSet()
public void testTwoSets()
public void testNonInvertible() throws Exception
public void testIllConditioned()
public void testMoreEstimatedParametersSimple()
public void testMoreEstimatedParametersUnsorted()
public void testRedundantEquations()
public void testInconsistentEquations()
public void testInconsistentSizes1()
public void testInconsistentSizes2()
public void testCircleFitting()
public void testCircleFittingBadInit()
public void testCircleFittingGoodInit()
public void doTestStRD(final StatisticalReferenceDataset dataset, final double errParams, final double errParamsSd)
public void testKirby2() throws IOException
public void testHahn1() throws IOException
public double[] getTarget()
public double[] value(double[] params)
public MultivariateVectorFunction getModelFunction()
public double[][] value(double[] params)
public MultivariateMatrixFunction getModelFunctionJacobian()
