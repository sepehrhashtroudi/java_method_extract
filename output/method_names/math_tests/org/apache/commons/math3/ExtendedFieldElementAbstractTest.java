protected abstract T build(double x)
public void testAddField()
public void testAddDouble()
public void testSubtractField()
public void testSubtractDouble()
public void testMultiplyField()
public void testMultiplyDouble()
public void testMultiplyInt()
public void testDivideField()
public void testDivideDouble()
public void testRemainderField()
public void testRemainderDouble()
public void testCos()
public void testAcos()
public void testSin()
public void testAsin()
public void testTan()
public void testAtan()
public void testAtan2()
public void testCosh()
public void testAcosh()
public void testSinh()
public void testAsinh()
public void testTanh()
public void testAtanh()
public void testSqrt()
public void testCbrt()
public void testHypot()
public void testRootN()
public void testPowField()
public void testPowDouble()
public void testPowInt()
public void testExp()
public void testExpm1()
public void testLog()
public void testLog1p()
public void testAbs()
public void testCeil()
public void testFloor()
public void testRint()
public void testRound()
public void testSignum()
public void testCopySignField()
public void testCopySignDouble()
public void testScalb()
public void testLinearCombinationFaFa()
public void testLinearCombinationDaFa()
public void testLinearCombinationFF2()
public void testLinearCombinationDF2()
public void testLinearCombinationFF3()
public void testLinearCombinationDF3()
public void testLinearCombinationFF4()
public void testLinearCombinationDF4()
public void testGetField()
private void checkRelative(double expected, T obtained)
public void testEquals()
public void testHash()
private double[] generateDouble(final RandomGenerator r, int n)
private T[] toFieldArray(double[] a)
