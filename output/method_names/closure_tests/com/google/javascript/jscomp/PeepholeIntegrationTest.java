private PeepholeIntegrationTest(boolean compareAsTree)
public PeepholeIntegrationTest()
public void setUp() throws Exception
public CompilerPass getProcessor(final Compiler compiler)
protected int getNumRepetitions()
private void foldSame(String js)
private void fold(String js, String expected)
private void assertResultString(String js, String expected)
public void testTrueFalse()
public void testFoldOneChildBlocksIntegration()
public void testFoldOneChildBlocksStringCompare()
public void testNecessaryDanglingElse()
public void testFoldReturnsIntegration()
public void testBug1059649()
public void testHookIfIntegration()
public void testRemoveDuplicateStatementsIntegration()
public void testFoldLogicalOpIntegration()
public void testFoldBitwiseOpStringCompareIntegration()
public void testVarLiftingIntegration()
public void testBug1438784() throws Exception
public void testFoldUselessWhileIntegration()
public void testFoldUselessForIntegration()
public void testFoldUselessDoIntegration()
public void testMinimizeWhileConstantConditionIntegration()
public void testMinimizeExpr()
protected int getNumRepetitions()
public void testBug1509085()
public void testBugIssue3()
public void testBugIssue43()
public void testFoldNegativeBug()
public void testNoNormalizeLabeledExpr()
public void testShortCircuit1()
public void testShortCircuit2()
public void testShortCircuit3()
public void testShortCircuit4()
public void testMinimizeExprCondition()
public void testTrueFalseFolding()
public void testCommaSplitingConstantCondition()
public void testAvoidCommaSplitting()
public void testObjectLiteral()
public void testArrayLiteral()
public void testFoldIfs1()
public void testFoldIfs2()
public void testFoldHook2()
public void disable_testFoldHook1()
