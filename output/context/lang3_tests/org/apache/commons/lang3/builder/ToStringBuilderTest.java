public SimpleReflectionTestFixture()
public SimpleReflectionTestFixture(final Object o)
public SelfInstanceVarReflectionTestFixture()
public SelfInstanceTwoVarsReflectionTestFixture()
public void after()
public void testConstructorEx1()
public void testConstructorEx2()
public void testConstructorEx3()
public void testGetSetDefault()
public void testSetDefaultEx()
public void testBlank()
public void testReflectionInteger()
public void testReflectionCharacter()
public void testReflectionBoolean()
private String toBaseString(final Object o)
public void assertReflectionArray(final String expected, final Object actual)
public void testReflectionObjectArray()
public void testReflectionLongArray()
public void testReflectionIntArray()
public void testReflectionShortArray()
public void testReflectionyteArray()
public void testReflectionCharArray()
public void testReflectionDoubleArray()
public void testReflectionFloatArray()
public void testReflectionBooleanArray()
public void testReflectionFloatArrayArray()
public void testReflectionLongArrayArray()
public void testReflectionIntArrayArray()
public void testReflectionhortArrayArray()
public void testReflectionByteArrayArray()
public void testReflectionCharArrayArray()
public void testReflectionDoubleArrayArray()
public void testReflectionBooleanArrayArray()
public void testReflectionHierarchyArrayList()
public void testReflectionHierarchy()
public void testInnerClassReflection()
public String toString()
public String toString()
public void testReflectionArrayCycle() throws Exception
public void testReflectionArrayCycleLevel2() throws Exception
public void testReflectionArrayArrayCycle() throws Exception
public String toString()
public String toString()
public String toString()
public String toString()
public String getOtherType()
public String toString()
public void testSimpleReflectionObjectCycle() throws Exception
public void testSelfInstanceVarReflectionObjectCycle() throws Exception
public void testSelfInstanceTwoVarsReflectionObjectCycle() throws Exception
public void testReflectionObjectCycle() throws Exception
public void testReflectionArrayAndObjectCycle() throws Exception
 void validateNullToStringStyleRegistry()
public void testAppendSuper()
public void testAppendToString()
public void testObject()
public void testObjectBuild()
public void testLong()
public void testInt()
public void testShort()
public void testChar()
public void testByte()
public void testDouble()
public void testFloat()
public void testBoolean()
public void testObjectArray()
public void testLongArray()
public void testIntArray()
public void testShortArray()
public void testByteArray()
public void testCharArray()
public void testDoubleArray()
public void testFloatArray()
public void testBooleanArray()
public void testLongArrayArray()
public void testIntArrayArray()
public void testShortArrayArray()
public void testByteArrayArray()
public void testCharArrayArray()
public void testDoubleArrayArray()
public void testFloatArrayArray()
public void testBooleanArrayArray()
public void testObjectCycle()
public String toString()
public void testSimpleReflectionStatics()
public void testReflectionStatics()
public void testInheritedReflectionStatics()
public String toStringWithStatics(final T object, final ToStringStyle style, final Class<? super T> reflectUpToClass)
public void test_setUpToClass_valid()
public void test_setUpToClass_invalid()
public void testReflectionNull()
public String toString()
public void testAppendToStringUsingMultiLineStyle()
Integer base=Optional[Integer.valueOf(5)]
String baseStr=Optional[base.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(base))]
