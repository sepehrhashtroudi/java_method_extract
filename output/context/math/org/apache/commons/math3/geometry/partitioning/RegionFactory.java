public RegionFactory()
public Region<S> buildConvex(final Hyperplane<S>... hyperplanes)
public Region<S> union(final Region<S> region1, final Region<S> region2)
public Region<S> intersection(final Region<S> region1, final Region<S> region2)
public Region<S> xor(final Region<S> region1, final Region<S> region2)
public Region<S> difference(final Region<S> region1, final Region<S> region2)
public Region<S> getComplement(final Region<S> region)
private BSPTree<S> recurseComplement(final BSPTree<S> node)
public BSPTree<S> merge(final BSPTree<S> leaf, final BSPTree<S> tree, final BSPTree<S> parentTree, final boolean isPlusChild, final boolean leafFromInstance)
public BSPTree<S> merge(final BSPTree<S> leaf, final BSPTree<S> tree, final BSPTree<S> parentTree, final boolean isPlusChild, final boolean leafFromInstance)
public BSPTree<S> merge(final BSPTree<S> leaf, final BSPTree<S> tree, final BSPTree<S> parentTree, final boolean isPlusChild, final boolean leafFromInstance)
public BSPTree<S> merge(final BSPTree<S> leaf, final BSPTree<S> tree, final BSPTree<S> parentTree, final boolean isPlusChild, final boolean leafFromInstance)
public Order visitOrder(final BSPTree<S> node)
public void visitInternalNode(final BSPTree<S> node)
public void visitLeafNode(final BSPTree<S> node)
NodesCleaner nodeCleaner
