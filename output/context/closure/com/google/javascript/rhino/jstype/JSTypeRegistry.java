public JSTypeRegistry(ErrorReporter reporter)
public JSTypeRegistry(ErrorReporter reporter, boolean tolerateUndefinedValues)
public void setResolveMode(ResolveMode mode)
 ResolveMode getResolveMode()
public ErrorReporter getErrorReporter()
public boolean shouldTolerateUndefinedValues()
public void resetForTypeCheck()
public FunctionType getConstructor()
private void initializeBuiltInTypes()
private void initializeRegistry()
private void register(JSType type)
private void register(JSType type, String name)
private void registerNativeType(JSTypeNative typeId, JSType type)
public void registerPropertyOnType(String propertyName, JSType type)
private void addReferenceTypeIndexedByProperty(String propertyName, JSType type)
public void unregisterPropertyOnType(String propertyName, JSType type)
public JSType getGreatestSubtypeWithProperty(JSType type, String propertyName)
public boolean canPropertyBeDefined(JSType type, String propertyName)
public Iterable<JSType> getTypesWithProperty(String propertyName)
public Iterable<ObjectType> getEachReferenceTypeWithProperty(String propertyName)
 ObjectType findCommonSuperObject(ObjectType a, ObjectType b)
private static List<ObjectType> getSuperStack(ObjectType a)
public void incrementGeneration()
 boolean isLastGeneration()
public void setLastGeneration(boolean lastGeneration)
 void registerTypeImplementingInterface(FunctionType type, ObjectType interfaceInstance)
public Collection<FunctionType> getDirectImplementors(ObjectType interfaceInstance)
public boolean declareType(String name, JSType t)
public void overwriteDeclaredType(String name, JSType t)
public void forwardDeclareType(String name)
public boolean isForwardDeclaredType(String name)
public boolean hasNamespace(String name)
public JSType getType(String jsTypeName)
public JSType getNativeType(JSTypeNative typeId)
public ObjectType getNativeObjectType(JSTypeNative typeId)
public FunctionType getNativeFunctionType(JSTypeNative typeId)
public JSType getType(StaticScope<JSType> scope, String jsTypeName, String sourceName, int lineno, int charno)
public void clearNamedTypes()
public void resolveTypesInScope(StaticScope<JSType> scope)
public JSType createOptionalType(JSType type)
public JSType createDefaultObjectUnion(JSType type)
public JSType createNullableType(JSType type)
public JSType createOptionalNullableType(JSType type)
public JSType createUnionType(JSType... variants)
public JSType createUnionType(JSTypeNative... variants)
public EnumType createEnumType(String name, Node source, JSType elementsType)
 ArrowType createArrowType(Node parametersNode, JSType returnType)
 ArrowType createArrowType(Node parametersNode)
public FunctionType createFunctionType(JSType returnType, JSType... parameterTypes)
public FunctionType createFunctionTypeWithVarArgs(JSType returnType, List<JSType> parameterTypes)
public FunctionType createFunctionType(JSType returnType, List<JSType> parameterTypes)
public FunctionType createFunctionTypeWithVarArgs(JSType returnType, JSType... parameterTypes)
private FunctionType createNativeFunctionTypeWithVarArgs(JSType returnType, JSType... parameterTypes)
public FunctionType createConstructorType(JSType returnType, JSType... parameterTypes)
private FunctionType createConstructorTypeWithVarArgs(JSType returnType, JSType... parameterTypes)
public JSType createFunctionType(ObjectType instanceType, JSType returnType, List<JSType> parameterTypes)
public JSType createFunctionTypeWithVarArgs(ObjectType instanceType, JSType returnType, List<JSType> parameterTypes)
public Node createParameters(List<JSType> parameterTypes)
public Node createParametersWithVarArgs(List<JSType> parameterTypes)
public Node createParameters(JSType... parameterTypes)
public Node createParametersWithVarArgs(JSType... parameterTypes)
public Node createOptionalParameters(JSType... parameterTypes)
private Node createParameters(boolean lastVarArgs, JSType... parameterTypes)
public FunctionType createFunctionType(JSType returnType, boolean lastVarArgs, JSType... parameterTypes)
public FunctionType createFunctionTypeWithNewReturnType(FunctionType existingFunctionType, JSType returnType)
public FunctionType createFunctionTypeWithNewThisType(FunctionType existingFunctionType, ObjectType thisType)
public FunctionType createFunctionType(JSType returnType, Node parameters)
private FunctionType createNativeFunctionType(JSType returnType, Node parameters)
public FunctionType createConstructorType(JSType returnType, boolean lastVarArgs, JSType... parameterTypes)
public ObjectType createObjectType(ObjectType implicitPrototype)
public RecordType createRecordType(Map<String, RecordProperty> properties)
public ObjectType createObjectType(String name, Node n, ObjectType implicitPrototype)
public ObjectType createAnonymousObjectType(JSDocInfo info)
public boolean resetImplicitPrototype(JSType type, ObjectType newImplicitProto)
 ObjectType createNativeAnonymousObjectType()
public FunctionType createConstructorType(String name, Node source, Node parameters, JSType returnType, ImmutableList<String> templateKeys)
public FunctionType createInterfaceType(String name, Node source)
public ParameterizedType createParameterizedType(ObjectType objectType, JSType parameterType)
public JSType createTemplatizedType(JSType baseType, ImmutableList<JSType> templatizedTypes)
public JSType createNamedType(String reference, String sourceName, int lineno, int charno)
public void identifyNonNullableName(String name)
public JSType createFromTypeNodes(Node n, String sourceName, StaticScope<JSType> scope)
private boolean hasTypeName(Node n)
private JSType createFromTypeNodesInternal(Node n, String sourceName, StaticScope<JSType> scope)
private JSType createRecordTypeFromNodes(Node n, String sourceName, StaticScope<JSType> scope)
public void setTemplateTypeNames(List<String> names)
public void clearTemplateTypeNames()
long serialVersionUID=Optional[1L]
int PROPERTY_CHECKING_UNION_SIZE=Optional[3000]
ErrorReporter reporter
JSType[] nativeTypes
Map<String, JSType> namesToTypes
Set<String> namespaces=Optional[new HashSet<String>()]
Set<String> nonNullableTypeNames=Optional[new HashSet<String>()]
Set<String> forwardDeclaredTypes=Optional[new HashSet<String>()]
Map<String, UnionTypeBuilder> typesIndexedByProperty=Optional[Maps.newHashMap()]
Map<String, Map<String, ObjectType>> eachRefTypeIndexedByProperty=Optional[Maps.newHashMap()]
Map<String, JSType> greatestSubtypeByProperty=Optional[Maps.newHashMap()]
Multimap<String, FunctionType> interfaceToImplementors=Optional[LinkedHashMultimap.create()]
Multimap<StaticScope<JSType>, NamedType> unresolvedNamedTypes=Optional[ArrayListMultimap.create()]
Multimap<StaticScope<JSType>, NamedType> resolvedNamedTypes=Optional[ArrayListMultimap.create()]
boolean lastGeneration=Optional[true]
Map<String, TemplateType> templateTypes=Optional[Maps.newHashMap()]
boolean tolerateUndefinedValues
ResolveMode resolveMode=Optional[ResolveMode.LAZY_NAMES]
