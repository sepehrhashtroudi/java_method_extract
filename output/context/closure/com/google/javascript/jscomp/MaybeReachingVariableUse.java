 MaybeReachingVariableUse(ControlFlowGraph<Node> cfg, Scope jsScope, AbstractCompiler compiler)
public ReachingUses()
public ReachingUses(ReachingUses other)
public boolean equals(Object other)
public int hashCode()
public ReachingUses apply(List<ReachingUses> from)
 boolean isForward()
 ReachingUses createEntryLattice()
 ReachingUses createInitialEstimateLattice()
 ReachingUses flowThrough(Node n, ReachingUses input)
private boolean hasExceptionHandler(Node cfgNode)
private void computeMayUse(Node n, Node cfgNode, ReachingUses output, boolean conditional)
private void addToUseIfLocal(String name, Node node, ReachingUses use)
private void removeFromUseIfLocal(String name, ReachingUses use)
 Collection<Node> getUses(String name, Node defNode)
Scope jsScope
Set<Var> escaped
