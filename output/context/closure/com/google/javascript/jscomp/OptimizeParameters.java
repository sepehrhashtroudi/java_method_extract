 OptimizeParameters(AbstractCompiler compiler)
public Parameter(Node arg, boolean shouldRemove)
public void process(Node externs, Node root)
public void process(Node externs, Node root, SimpleDefinitionFinder definitions)
private boolean canChangeSignature(DefinitionSite definitionSite, SimpleDefinitionFinder defFinder)
private void tryEliminateOptionalArgs(DefinitionSite defSite, SimpleDefinitionFinder defFinder)
private void tryEliminateConstantArgs(DefinitionSite defSite, SimpleDefinitionFinder defFinder)
private boolean adjustForSideEffects(List<Parameter> parameters)
private boolean findFixedParameters(List<Parameter> parameters, Node cur)
private boolean buildParameterList(List<Parameter> parameters, Node cur, Scope s)
private void setParameterSideEffectInfo(Parameter p, Node value)
private boolean isMovableValue(Node n, Scope s)
private void optimizeFunctionDefinition(List<Parameter> parameters, Node function)
private void optimizeCallSite(SimpleDefinitionFinder defFinder, List<Parameter> parameters, Node call)
public Node getArg()
public boolean shouldRemove()
public void setShouldRemove(boolean value)
public void setHasSideEffects(boolean hasSideEffects)
public boolean hasSideEffects()
public void setCanBeSideEffected(boolean canBeSideEffected)
public boolean canBeSideEffected()
private void addVariableToFunction(Node function, Node varName, Node value)
private boolean eliminateParamsAfter(Node function, int argIndex)
private boolean eliminateParamsAfter(Node fnNode, Node argNode)
private Node eliminateFunctionParamAt(Node function, int argIndex)
private Node eliminateCallParamAt(SimpleDefinitionFinder defFinder, Parameter p, Node call, int argIndex)
AbstractCompiler compiler
List<Node> removedNodes=Optional[Lists.newArrayList()]
