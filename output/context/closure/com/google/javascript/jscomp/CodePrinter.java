 MappedCodePrinter(int lineLengthThreshold, boolean createSrcMap, SourceMap.DetailLevel sourceMapDetailLevel)
private PrettyCodePrinter(int lineLengthThreshold, boolean createSourceMap, SourceMap.DetailLevel sourceMapDetailLevel)
private CompactCodePrinter(boolean lineBreak, boolean preferLineBreakAtEndOfFile, int lineLengthThreshold, boolean createSrcMap, SourceMap.DetailLevel sourceMapDetailLevel)
 Builder(Node node)
 void startSourceMapping(Node node)
 void endSourceMapping(Node node)
 void generateSourceMap(SourceMap map)
 void reportLineCut(int lineIndex, int charIndex, boolean insertion)
private FilePosition convertPosition(FilePosition position, int lineIndex, int characterPosition, boolean insertion)
public String getCode()
 char getLastChar()
protected final int getCurrentCharIndex()
protected final int getCurrentLineIndex()
 void append(String str)
 void startNewLine()
 void maybeLineBreak()
 void maybeCutLine()
 void endLine()
 void appendBlockStart()
 void appendBlockEnd()
 void listSeparator()
 void endFunction(boolean statementContext)
 void beginCaseBody()
 void endCaseBody()
 void appendOp(String op, boolean binOp)
 boolean shouldPreserveExtraBlocks()
private Node getTryForCatch(Node n)
 boolean breakAfterBlockFor(Node n, boolean isStatementContext)
 void endFile()
 void append(String str)
 void startNewLine()
 void maybeLineBreak()
 void maybeCutLine()
 void notePreferredLineBreak()
 void endFile()
 Builder setCompilerOptions(CompilerOptions options)
 Builder setPrettyPrint(boolean prettyPrint)
 Builder setLineBreak(boolean lineBreak)
 Builder setOutputTypes(boolean outputTypes)
 Builder setSourceMap(SourceMap sourceMap)
 Builder setTagAsStrict(boolean tagAsStrict)
 String build()
private static String toSource(Node root, Format outputFormat, CompilerOptions options, SourceMap sourceMap, boolean tagAsStrict)
int DEFAULT_LINE_LENGTH_THRESHOLD=Optional[500]
