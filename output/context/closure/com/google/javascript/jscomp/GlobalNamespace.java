 GlobalNamespace(AbstractCompiler compiler, Node root)
 GlobalNamespace(AbstractCompiler compiler, Node externsRoot, Node root)
 NodeFilter(Set<Node> newNodes)
 BuildGlobalNamespace()
 BuildGlobalNamespace(Predicate<Node> nodeFilter)
 Name(String name, Name parent, boolean inExterns)
 Ref(NodeTraversal t, Node node, Name name, Type type, int index)
private Ref(Ref original, Type type, int index)
private Ref(Type type, int index)
 Tracker(AbstractCompiler compiler, PrintStream stream, Predicate<String> isInterestingSymbol)
 boolean hasExternsRoot()
public Node getRootNode()
public StaticScope<JSType> getParentScope()
public Name getSlot(String name)
public Name getOwnSlot(String name)
public JSType getTypeOfThis()
public Iterable<Ref> getReferences(Name slot)
public StaticScope<JSType> getScope(Name slot)
public Iterable<Name> getAllSymbols()
private void ensureGenerated()
 List<Name> getNameForest()
 Map<String, Name> getNameIndex()
 void scanNewNodes(Scope scope, Set<Node> newNodes)
public boolean apply(Node n)
private void process()
private boolean isGlobalNameReference(String name, Scope s)
private String getTopVarName(String name)
private boolean isGlobalVarReference(String name, Scope s)
private boolean isGlobalScope(Scope s)
public void visit(NodeTraversal t, Node n, Node parent)
public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)
public void collect(NodeTraversal t, Node n, Node parent)
 String getNameForObjLitKey(Node n)
 Name.Type getValueType(Node n)
 void handleSetFromGlobal(NodeTraversal t, Node n, Node parent, String name, boolean isPropAssign, Name.Type type)
private boolean isTypeDeclaration(Node n, Node parent)
 void handleSetFromLocal(NodeTraversal t, Node n, Node parent, String name)
 void handleGet(NodeTraversal t, Node n, Node parent, String name)
 Ref.Type determineGetTypeForHookOrBooleanExpr(NodeTraversal t, Node parent, String name)
 void handleGet(NodeTraversal t, Node n, Node parent, String name, Ref.Type type)
 boolean maybeHandlePrototypePrefix(NodeTraversal t, Node n, Node parent, String name)
 boolean isNestedAssign(Node parent)
 Name getOrCreateName(String name)
 Name addProperty(String name, boolean inExterns)
 String getBaseName()
public String getName()
 String getFullName()
public Ref getDeclaration()
public boolean isTypeInferred()
public JSType getType()
 void addRef(Ref ref)
 void removeRef(Ref ref)
 List<Ref> getRefs()
 void addRefInternal(Ref ref)
 boolean canEliminate()
 boolean isSimpleStubDeclaration()
 boolean canCollapse()
 boolean isGetOrSetDefinition()
 boolean canCollapseUnannotatedChildNames()
 boolean shouldKeepKeys()
 boolean needsToBeStubbed()
 void setDeclaredType()
 boolean isDeclaredType()
 boolean isNamespace()
 boolean isSimpleName()
public String toString()
public JSDocInfo getJSDocInfo()
private static JSDocInfo getDocInfoForDeclaration(Ref ref)
public Node getNode()
public StaticSourceFile getSourceFile()
public StaticSlot<JSType> getSymbol()
 JSModule getModule()
 String getSourceName()
 Ref getTwin()
 boolean isSet()
 static void markTwins(Ref a, Ref b)
 Ref cloneAndReclassify(Type type)
 static Ref createRefForTesting(Type type)
public void process(Node externs, Node root)
AbstractCompiler compiler
Node root
Node externsRoot
boolean inExterns
Scope externsScope
boolean generated=Optional[false]
int currentPreOrderIndex=Optional[0]
List<Name> globalNames=Optional[new ArrayList<Name>()]
Map<String, Name> nameMap=Optional[new HashMap<String, Name>()]
