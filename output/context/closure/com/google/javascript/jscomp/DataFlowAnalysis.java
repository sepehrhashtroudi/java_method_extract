 DataFlowAnalysis(ControlFlowGraph<N> targetCfg, JoinOp<L> joinOp)
private FlowState(L inState, L outState)
 MaxIterationsExceededException(String msg)
 BranchedForwardDataFlowAnalysis(ControlFlowGraph<N> targetCfg, JoinOp<L> joinOp)
private BranchedFlowState(L inState, List<L> outState)
 final ControlFlowGraph<N> getCfg()
 L getExitLatticeElement()
protected L join(L latticeA, L latticeB)
 abstract boolean isForward()
 abstract L flowThrough(N node, L input)
 final void analyze()
 final void analyze(int maxSteps)
 abstract L createInitialEstimateLattice()
 abstract L createEntryLattice()
protected void initialize()
protected boolean flow(DiGraphNode<N, Branch> node)
protected void joinInputs(DiGraphNode<N, Branch> node)
 L getIn()
 void setIn(L in)
 L getOut()
 void setOut(L out)
public String toString()
public int hashCode()
protected void initialize()
 L getExitLatticeElement()
 final boolean isForward()
 abstract List<L> branchedFlowThrough(N node, L input)
protected final boolean flow(DiGraphNode<N, Branch> node)
protected void joinInputs(DiGraphNode<N, Branch> node)
 L getIn()
 void setIn(L in)
 List<L> getOut()
 void setOut(List<L> out)
public String toString()
public int hashCode()
public void visit(NodeTraversal t, Node n, Node parent)
 static void computeEscaped(final Scope jsScope, final Set<Var> escaped, AbstractCompiler compiler)
ControlFlowGraph<N> cfg
JoinOp<L> joinOp
Set<DiGraphNode<N, Branch>> orderedWorkSet
int MAX_STEPS=Optional[200000]
