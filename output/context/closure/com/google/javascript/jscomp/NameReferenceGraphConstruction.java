 NameReferenceGraphConstruction(AbstractCompiler compiler)
private Traversal(boolean isExtern)
private NameUse(Name name, Reference reference)
 NameReferenceGraph getNameReferenceGraph()
public void process(Node externs, Node root)
public void enterScope(NodeTraversal t)
public void exitScope(NodeTraversal t)
public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)
public void visit(NodeTraversal t, Node n, Node parent)
private boolean containsName(Node n)
private void safeAlias(Node n)
private void maybeAliasNamesOnAssign(Node lhs, Node rhs)
private void defineAndAlias(String name)
private void maybeRecordExport(Node call)
private boolean isLocalNameReference(NodeTraversal t, Node n)
private boolean isStaticNameReference(Node n, Scope scope)
private boolean isPrototypeNameReference(Node n)
private Name recordStaticNameDefinition(NodeTraversal t, String name, JSType type, Node n, Node parent, Node gParent, Node rValue)
private Name recordPrototypePropDefinition(NodeTraversal t, Node qName, JSType type, @Nullable Node assign, @Nullable Node parent, @Nullable Node gParent)
private Reference recordStaticNameUse(NodeTraversal t, Node n, Node parent)
private void recordPrototypePropUse(NodeTraversal t, Node n, Node parent)
private void recordSuperClassPrototypePropUse(FunctionType classType, String prop, Reference ref)
private void recordSubclassPrototypePropUse(FunctionType classType, String prop, Reference ref)
private void recordUnknownUse(NodeTraversal t, Node n, Node parent)
private Name recordClassConstructorOrInterface(String name, FunctionType type, @Nullable Node n, @Nullable Node parent, @Nullable Node gParent, @Nullable Node rhs)
private void connectUnknowns()
private JSType getType(Node n)
private void pushContainingFunction(Name functionNode)
private void popContainingFunction()
private Name getNamedContainingFunction()
AbstractCompiler compiler
NameReferenceGraph graph
Multimap<String, NameUse> unknownNameUse=Optional[HashMultimap.create()]
boolean CONSERVATIVE=Optional[false]
ArrayList<Name> currentFunctionStack=Optional[new ArrayList<Name>()]
