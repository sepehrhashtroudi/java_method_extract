private Var(boolean inferred, String name, Node nameNode, JSType type, Scope scope, int index, CompilerInput input)
 Arguments(Scope scope)
 Scope(Scope parent, Node rootNode)
private Scope(Node rootNode, boolean isBottom)
public boolean apply(Var var)
public String getName()
public Node getNode()
 CompilerInput getInput()
public StaticSourceFile getSourceFile()
public Var getSymbol()
public Var getDeclaration()
public Node getParentNode()
public boolean isBleedingFunction()
 Scope getScope()
public boolean isGlobal()
public boolean isLocal()
 boolean isExtern()
public boolean isConst()
public boolean isDefine()
public Node getInitialValue()
public JSType getType()
public Node getNameNode()
public JSDocInfo getJSDocInfo()
 void setType(JSType type)
 void resolveType(ErrorReporter errorReporter)
public boolean isTypeInferred()
public String getInputName()
public boolean isNoShadow()
public boolean equals(Object other)
public int hashCode()
public String toString()
 void markEscaped()
 boolean isMarkedEscaped()
 void markAssignedExactlyOnce()
 boolean isMarkedAssignedExactlyOnce()
public boolean equals(Object other)
public int hashCode()
 static Scope createGlobalScope(Node rootNode)
 static Scope createLatticeBottom(Node rootNode)
 int getDepth()
 boolean isBottom()
public Node getRootNode()
public Scope getParent()
 Scope getGlobalScope()
public StaticScope<JSType> getParentScope()
public JSType getTypeOfThis()
 Var declare(String name, Node nameNode, JSType type, CompilerInput input)
 Var declare(String name, Node nameNode, JSType type, CompilerInput input, boolean inferred)
 void undeclare(Var var)
public Var getSlot(String name)
public Var getOwnSlot(String name)
public Var getVar(String name)
public Var getArgumentsVar()
public boolean isDeclared(String name, boolean recurse)
public Iterator<Var> getVars()
 Iterable<Var> getVarIterable()
public Iterable<Var> getReferences(Var var)
public StaticScope<JSType> getScope(Var var)
public Iterable<Var> getAllSymbols()
public int getVarCount()
public boolean isGlobal()
public boolean isLocal()
public Iterator<Var> getDeclarativelyUnboundVarsWithoutTypes()
Map<String, Var> vars=Optional[new LinkedHashMap<String, Var>()]
Scope parent
int depth
Node rootNode
boolean isBottom
Var arguments
Predicate<Var> DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES=Optional[new Predicate<Var>() {

    @Override
    public boolean apply(Var var) {
        return var.getParentNode() != null && // no declared type
        var.getType() == null && var.getParentNode().isVar() && !var.isExtern();
    }
}]
