public void testSimplyConnected()
public void testStair()
public void testHole()
public void testDisjointPolygons()
public void testOppositeHyperplanes()
public void testSingularPoint()
public void testLineIntersection()
public void testUnlimitedSubHyperplane()
public void testUnion()
public void testIntersection()
public void testXor()
public void testDifference()
public void testEmptyDifference()
public void testChoppedHexagon()
public void testConcentric()
public void testBug20040520()
public void testBug20041003()
public void testSqueezedHexa()
public void testIssue880Simplified()
public void testIssue880Complete()
private PolygonsSet buildSet(Vector2D[][] vertices)
private SubHyperplane<Euclidean2D> buildLine(Vector2D start, Vector2D end)
private double intersectionAbscissa(Line l0, Line l1)
private SubHyperplane<Euclidean2D> buildHalfLine(Vector2D start, Vector2D end, boolean startIsVirtual)
private SubHyperplane<Euclidean2D> buildSegment(Vector2D start, Vector2D end)
private void checkPoints(Region.Location expected, PolygonsSet set, Vector2D[] points)
private boolean checkInSegment(Vector2D p, Vector2D p1, Vector2D p2, double tolerance)
private void checkVertices(Vector2D[][] rebuiltVertices, Vector2D[][] vertices)
