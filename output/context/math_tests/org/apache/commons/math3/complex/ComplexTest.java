public TestComplex(double real, double imaginary)
public TestComplex(Complex other)
public void testConstructor()
public void testConstructorNaN()
public void testAbs()
public void testAbsNaN()
public void testAbsInfinite()
public void testAdd()
public void testAddNaN()
public void testAddInf()
public void testScalarAdd()
public void testScalarAddNaN()
public void testScalarAddInf()
public void testConjugate()
public void testConjugateNaN()
public void testConjugateInfiinite()
public void testDivide()
public void testDivideReal()
public void testDivideImaginary()
public void testDivideInf()
public void testDivideZero()
public void testDivideZeroZero()
public void testDivideNaN()
public void testDivideNaNInf()
public void testScalarDivide()
public void testScalarDivideNaN()
public void testScalarDivideInf()
public void testScalarDivideZero()
public void testReciprocal()
public void testReciprocalReal()
public void testReciprocalImaginary()
public void testReciprocalInf()
public void testReciprocalZero()
public void testReciprocalNaN()
public void testMultiply()
public void testMultiplyNaN()
public void testMultiplyInfInf()
public void testMultiplyNaNInf()
public void testScalarMultiply()
public void testScalarMultiplyNaN()
public void testScalarMultiplyInf()
public void testNegate()
public void testNegateNaN()
public void testSubtract()
public void testSubtractNaN()
public void testSubtractInf()
public void testScalarSubtract()
public void testScalarSubtractNaN()
public void testScalarSubtractInf()
public void testEqualsNull()
public void testEqualsClass()
public void testEqualsSame()
public void testEqualsTrue()
public void testEqualsRealDifference()
public void testEqualsImaginaryDifference()
public void testEqualsNaN()
public void testHashCode()
public void testAcos()
public void testAcosInf()
public void testAcosNaN()
public void testAsin()
public void testAsinNaN()
public void testAsinInf()
public void testAtan()
public void testAtanInf()
public void testAtanI()
public void testAtanNaN()
public void testCos()
public void testCosNaN()
public void testCosInf()
public void testCosh()
public void testCoshNaN()
public void testCoshInf()
public void testExp()
public void testExpNaN()
public void testExpInf()
public void testLog()
public void testLogNaN()
public void testLogInf()
public void testLogZero()
public void testPow()
public void testPowNaNBase()
public void testPowNaNExponent()
public void testPowInf()
public void testPowZero()
public void testScalarPow()
public void testScalarPowNaNBase()
public void testScalarPowNaNExponent()
public void testScalarPowInf()
public void testScalarPowZero()
public void testpowNull()
public void testSin()
public void testSinInf()
public void testSinNaN()
public void testSinh()
public void testSinhNaN()
public void testSinhInf()
public void testSqrtRealPositive()
public void testSqrtRealZero()
public void testSqrtRealNegative()
public void testSqrtImaginaryZero()
public void testSqrtImaginaryNegative()
public void testSqrtPolar()
public void testSqrtNaN()
public void testSqrtInf()
public void testSqrt1z()
public void testSqrt1zNaN()
public void testTan()
public void testTanNaN()
public void testTanInf()
public void testTanCritical()
public void testTanh()
public void testTanhNaN()
public void testTanhInf()
public void testTanhCritical()
public void testMath221()
public void testNthRoot_normal_thirdRoot()
public void testNthRoot_normal_fourthRoot()
public void testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty()
public void testNthRoot_cornercase_thirdRoot_realPartZero()
public void testNthRoot_cornercase_NAN_Inf()
public void testGetArgument()
public void testGetArgumentInf()
public void testGetArgumentNaN()
public void testSerial()
protected TestComplex createComplex(double real, double imaginary)
double inf=Optional[Double.POSITIVE_INFINITY]
double neginf=Optional[Double.NEGATIVE_INFINITY]
double nan=Optional[Double.NaN]
double pi=Optional[FastMath.PI]
Complex oneInf=Optional[new Complex(1, inf)]
Complex oneNegInf=Optional[new Complex(1, neginf)]
Complex infOne=Optional[new Complex(inf, 1)]
Complex infZero=Optional[new Complex(inf, 0)]
Complex infNaN=Optional[new Complex(inf, nan)]
Complex infNegInf=Optional[new Complex(inf, neginf)]
Complex infInf=Optional[new Complex(inf, inf)]
Complex negInfInf=Optional[new Complex(neginf, inf)]
Complex negInfZero=Optional[new Complex(neginf, 0)]
Complex negInfOne=Optional[new Complex(neginf, 1)]
Complex negInfNaN=Optional[new Complex(neginf, nan)]
Complex negInfNegInf=Optional[new Complex(neginf, neginf)]
Complex oneNaN=Optional[new Complex(1, nan)]
Complex zeroInf=Optional[new Complex(0, inf)]
Complex zeroNaN=Optional[new Complex(0, nan)]
Complex nanInf=Optional[new Complex(nan, inf)]
Complex nanNegInf=Optional[new Complex(nan, neginf)]
Complex nanZero=Optional[new Complex(nan, 0)]
