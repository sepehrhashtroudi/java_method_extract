protected CompilerOptions getOptions()
protected CodingConvention getCodingConvention()
protected void setUp() throws Exception
String ACTIVE_X_OBJECT_DEF=Optional["/**\n" + " * @param {string} progId\n" + " * @param {string=} opt_location\n" + " * @constructor\n" + " * @see http://msdn.microsoft.com/en-us/library/7sw4ddf8.aspx\n" + " */\n" + "function ActiveXObject(progId, opt_location) {}\n"]
String CLOSURE_DEFS=Optional["var goog = {};" + "goog.inherits = function(x, y) {};" + "/** @type {!Function} */ goog.abstractMethod = function() {};" + "goog.isArray = function(x) {};" + "goog.isDef = function(x) {};" + "goog.isFunction = function(x) {};" + "goog.isNull = function(x) {};" + "goog.isString = function(x) {};" + "goog.isObject = function(x) {};" + "goog.isDefAndNotNull = function(x) {};" + "goog.array = {};" + // simplified ArrayLike definition
"/**\n" + " * @typedef {Array|{length: number}}\n" + " */\n" + "goog.array.ArrayLike;" + "/**\n" + " * @param {Array.<T>|{length:number}} arr\n" + " * @param {function(this:S, T, number, goog.array.ArrayLike):boolean} f\n" + " * @param {S=} opt_obj\n" + " * @return {!Array.<T>}\n" + " * @template T,S\n" + " */" + "goog.array.filter = function(arr, f, opt_obj){};" + "goog.asserts = {};" + "/** @return {*} */ goog.asserts.assert = function(x) { return x; };"]
String DEFAULT_EXTERNS=Optional["/** @constructor \n * @param {*=} opt_value */ " + "function Object(opt_value) {}" + "/** @constructor \n * @param {*} var_args */ " + "function Function(var_args) {}" + "/** @type {!Function} */ Function.prototype.apply;" + "/** @type {!Function} */ Function.prototype.bind;" + "/** @type {!Function} */ Function.prototype.call;" + "/** @constructor \n * @param {*=} arg \n @return {string} */" + "function String(arg) {}" + "/** @param {number} sliceArg */\n" + "String.prototype.slice = function(sliceArg) {};" + "/** @type {number} */ String.prototype.length;" + "/** @constructor \n * @param {*} var_args \n @return {!Array} */" + "function Array(var_args) {}\n" + "/** @type {number} */ Array.prototype.length;\n" + "/** @constructor */\n" + "function Arguments() {}\n" + "/** @type {number} */\n" + "Arguments.prototype.length;\n" + "/** @type {!Arguments} */\n" + "var arguments;" + "" + ACTIVE_X_OBJECT_DEF]
Compiler compiler
