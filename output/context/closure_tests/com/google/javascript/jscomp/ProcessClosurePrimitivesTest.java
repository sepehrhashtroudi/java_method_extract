public ProcessClosurePrimitivesTest()
protected void setUp()
public void process(Node externs, Node root)
public CompilerPass getProcessor(final Compiler compiler)
public int getNumRepetitions()
public void testSimpleProvides()
public void testMultipleProvides()
public void testRemovalOfProvidedObjLit()
public void testProvidedDeclaredFunctionError()
public void testRemovalMultipleAssignment1()
public void testRemovalMultipleAssignment2()
public void testRemovalMultipleAssignment3()
public void testRemovalMultipleAssignment4()
public void testNoRemovalFunction1()
public void testNoRemovalFunction2()
public void testRemovalMultipleAssignmentInIf1()
public void testRemovalMultipleAssignmentInIf2()
public void testRemovalMultipleAssignmentInIf3()
public void testRemovalMultipleAssignmentInIf4()
public void testMultipleDeclarationError1()
public void testMultipleDeclarationError2()
public void testMultipleDeclarationError3()
public void testProvideAfterDeclarationError()
public void testProvideErrorCases()
public void testRemovalOfRequires()
public void testRequireErrorCases()
public void testLateProvides()
public void testMissingProvides()
public void testAddDependency()
public void testValidSetCssNameMapping()
public void testValidSetCssNameMappingWithType()
public void testSetCssNameMappingNonStringValueReturnsError()
public void testSetCssNameMappingValidity()
public void testBadCrossModuleRequire()
public void testGoodCrossModuleRequire1()
public void testGoodCrossModuleRequire2()
public void testSimpleAdditionalProvide()
public void testSimpleAdditionalProvideAtEnd()
public void testSimpleDottedAdditionalProvide()
public void testOverlappingAdditionalProvide()
public void testOverlappingAdditionalProvideAtEnd()
public void testOverlappingDottedAdditionalProvide()
public void testRequireOfAdditionalProvide()
public void testMissingRequireWithAdditionalProvide()
public void testLateRequire()
public void testReorderedProvides()
public void testReorderedProvides2()
public void testProvideOrder1()
public void testProvideOrder2()
public void testProvideOrder3a()
public void testProvideOrder3b()
public void testProvideOrder4a()
public void testProvideOrder4b()
public void testInvalidProvide()
public void testInvalidBase1()
public void testInvalidBase2()
public void testInvalidBase3()
public void testInvalidBase4()
public void testInvalidBase5()
public void testInvalidBase6()
public void testInvalidBase7()
public void testInvalidBase8()
public void testInvalidBase9()
public void testValidBase1()
public void testValidBase2()
public void testValidBase3()
public void testValidBase4()
public void testValidBase5()
public void testValidBase6()
public void testImplicitAndExplicitProvide()
public void testImplicitProvideInIndependentModules()
public void testImplicitProvideInIndependentModules2()
public void testImplicitProvideInIndependentModules3()
public void testProvideInIndependentModules1()
public void testProvideInIndependentModules2()
public void testProvideInIndependentModules2b()
public void testProvideInIndependentModules3()
public void testProvideInIndependentModules3b()
public void testProvideInIndependentModules4()
public void testRequireOfBaseGoog()
public void testSourcePositionPreservation()
public void testNoStubForProvidedTypedef()
public void testNoStubForProvidedTypedef2()
public void testNoStubForProvidedTypedef4()
public void testProvideRequireSameFile()
String additionalCode
String additionalEndCode
boolean addAdditionalNamespace
String METHOD_FORMAT=Optional["function Foo() {} Foo.prototype.method = function() { %s };"]
String FOO_INHERITS=Optional["goog.inherits(Foo, BaseFoo);"]
