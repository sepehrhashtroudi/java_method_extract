 PrefixPredicate(String prefix)
private CountingPredicate(Predicate<T> delegate)
public boolean apply(String input)
public void testSimple()
public void testSomeValidPaths()
public void testManyValidPaths()
public void testCycles1()
public void testCycles2()
public void testCycles3()
public void testSomePath1()
public void testSomePath2()
public void testSomePathRevisiting()
public void testNonInclusive()
private static void assertGood(CheckPathsBetweenNodes<N, E> test)
private static void assertBad(CheckPathsBetweenNodes<N, E> test)
private static CheckPathsBetweenNodes<String, String> createTest(DiGraph<String, String> graph, String entry, String exit, Predicate<String> nodePredicate, Predicate<DiGraphEdge<String, String>> edgePredicate)
private static CheckPathsBetweenNodes<String, String> createNonInclusiveTest(DiGraph<String, String> graph, String entry, String exit, Predicate<String> nodePredicate, Predicate<DiGraphEdge<String, String>> edgePredicate)
public boolean apply(DiGraphEdge<String, String> input)
private static Predicate<DiGraphEdge<String, String>> edgeIs(final Object val)
public boolean apply(T input)
Predicate<String> FALSE=Optional[Predicates.alwaysFalse()]
Predicate<DiGraphEdge<String, String>> ALL_EDGE=Optional[Predicates.alwaysTrue()]
Predicate<DiGraphEdge<String, String>> NO_EDGE=Optional[Predicates.alwaysFalse()]
