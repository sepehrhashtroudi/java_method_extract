 TestCallback(String callname, Method method)
protected void setUp() throws Exception
private FunctionInjector getInjector()
public void testIsSimpleFunction1()
public void testIsSimpleFunction2()
public void testIsSimpleFunction3()
public void testIsSimpleFunction4()
public void testIsSimpleFunction5()
public void testIsSimpleFunction6()
public void testIsSimpleFunction7()
public void testCanInlineReferenceToFunction1()
public void testCanInlineReferenceToFunction2()
public void testCanInlineReferenceToFunction3()
public void testCanInlineReferenceToFunction4()
public void testCanInlineReferenceToFunction5()
public void testCanInlineReferenceToFunction6()
public void testCanInlineReferenceToFunction7()
public void testCanInlineReferenceToFunction8()
public void testCanInlineReferenceToFunction9()
public void testCanInlineReferenceToFunction10()
public void testCanInlineReferenceToFunction11()
public void testCanInlineReferenceToFunction12()
public void testCanInlineReferenceToFunction12b()
public void testCanInlineReferenceToFunction14()
public void testCanInlineReferenceToFunction15()
public void testCanInlineReferenceToFunction16()
public void testCanInlineReferenceToFunction17()
public void testCanInlineReferenceToFunction18()
public void testCanInlineReferenceToFunction19()
public void testCanInlineReferenceToFunction20()
public void testCanInlineReferenceToFunction21()
public void testCanInlineReferenceToFunction22()
public void testCanInlineReferenceToFunction23()
public void testCanInlineReferenceToFunction24()
public void testCanInlineReferenceToFunction25()
public void testCanInlineReferenceToFunction26()
public void testCanInlineReferenceToFunction27()
public void testCanInlineReferenceToFunction28()
public void testCanInlineReferenceToFunction29()
public void testCanInlineReferenceToFunction30()
public void testCanInlineReferenceToFunction31()
public void testCanInlineReferenceToFunction32()
public void testCanInlineReferenceToFunction33()
public void testCanInlineReferenceToFunction34()
public void testCanInlineReferenceToFunction35()
public void testCanInlineReferenceToFunction36()
public void testCanInlineReferenceToFunction37()
public void testCanInlineReferenceToFunction38()
public void testCanInlineReferenceToFunction39()
public void testCanInlineReferenceToFunction40()
public void testCanInlineReferenceToFunction41()
public void testCanInlineReferenceToFunction42()
public void testCanInlineReferenceToFunction43()
public void testCanInlineReferenceToFunction44()
public void testCanInlineReferenceToFunction45()
public void testCanInlineReferenceToFunction46()
public void testCanInlineReferenceToFunction47()
public void testCanInlineReferenceToFunction48()
public void testCanInlineReferenceToFunction49()
public void testCanInlineReferenceToFunction50()
public void testCanInlineReferenceToFunction51()
public void testCanInlineReferenceToFunctionInExpression1()
public void testCanInlineReferenceToFunctionInExpression2()
public void testCanInlineReferenceToFunctionInExpression3()
public void testCanInlineReferenceToFunctionInExpression4()
public void testCanInlineReferenceToFunctionInExpression5()
public void testCanInlineReferenceToFunctionInExpression5a()
public void testCanInlineReferenceToFunctionInExpression6()
public void testCanInlineReferenceToFunctionInExpression7()
public void testCanInlineReferenceToFunctionInExpression7a()
public void testCanInlineReferenceToFunctionInExpression8()
public void testCanInlineReferenceToFunctionInExpression9()
public void testCanInlineReferenceToFunctionInExpression10()
public void testCanInlineReferenceToFunctionInExpression10a()
public void testCanInlineReferenceToFunctionInExpression12()
public void testCanInlineReferenceToFunctionInExpression13()
public void testCanInlineReferenceToFunctionInExpression14()
public void testCanInlineReferenceToFunctionInExpression14a()
public void testCanInlineReferenceToFunctionInExpression18()
public void testCanInlineReferenceToFunctionInExpression19()
public void testCanInlineReferenceToFunctionInExpression19a()
public void testCanInlineReferenceToFunctionInExpression21()
public void testCanInlineReferenceToFunctionInExpression21a()
public void testCanInlineReferenceToFunctionInExpression22()
public void testCanInlineReferenceToFunctionInExpression22a()
public void testCanInlineReferenceToFunctionInExpression23()
public void testCanInlineReferenceToFunctionInExpression23a()
public void testCanInlineReferenceToFunctionInLoop1()
public void testCanInlineReferenceToFunctionInLoop2()
public void testInline1()
public void testInline2()
public void testInline3()
public void testInline4()
public void testInline5()
public void testInline6()
public void testInline7()
public void testInline8()
public void testInline9()
public void testInline10()
public void testInline11()
public void testInline12()
public void testInline13()
public void testInline14()
public void testInline15()
public void testInline16()
public void testInline17()
public void testInline18()
public void testInline19()
public void testInline19b()
public void testInlineIntoLoop()
public void testInlineFunctionWithInnerFunction1()
public void testInlineFunctionWithInnerFunction2()
public void testInlineFunctionWithInnerFunction3()
public void testInlineFunctionWithInnerFunction4()
public void testInlineFunctionWithInnerFunction5()
public void testInlineReferenceInExpression1()
public void testInlineReferenceInExpression2()
public void testInlineReferenceInExpression3()
public void testInlineReferenceInExpression4()
public void testInlineReferenceInExpression5()
public void testInlineReferenceInExpression6()
public void testInlineReferenceInExpression7()
public void testInlineReferenceInExpression8()
public void testInlineReferenceInExpression9()
public void testInlineReferenceInExpression11()
public void testInlineReferenceInExpression12()
public void testInlineReferenceInExpression13()
public void testInlineReferenceInExpression14()
public void testInlineReferenceInExpression15()
public void testInlineReferenceInExpression16()
public void testInlineReferenceInExpression17()
public void testInlineWithinCalls1()
public void testInlineAssignmentToConstant()
public void testBug1897706()
public void helperCanInlineReferenceToFunction(final CanInlineResult expectedResult, final String code, final String fnName, final InliningMode mode)
public boolean call(NodeTraversal t, Node n, Node parent)
public void helperCanInlineReferenceToFunction(final CanInlineResult expectedResult, final String code, final String fnName, final InliningMode mode, boolean allowDecomposition)
public void helperInlineReferenceToFunction(String code, final String expectedResult, final String fnName, final InliningMode mode)
private void validateSourceInfo(Compiler compiler, Node subtree)
public boolean call(NodeTraversal t, Node n, Node parent)
public void helperInlineReferenceToFunction(String code, final String expectedResult, final String fnName, final InliningMode mode, final boolean decompose)
 boolean call(NodeTraversal t, Node n, Node parent)
public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent)
public void visit(NodeTraversal t, Node n, Node parent)
private static Node findFunction(Node n, String name)
private static Node prep(String js)
private static Node parse(Compiler compiler, String js)
private static Node parseExpected(Compiler compiler, String js)
private static String toSource(Node n)
InliningMode INLINE_DIRECT=Optional[InliningMode.DIRECT]
InliningMode INLINE_BLOCK=Optional[InliningMode.BLOCK]
boolean assumeStrictThis=Optional[false]
boolean assumeMinimumCapture=Optional[false]
CanInlineResult NEW_VARS_IN_GLOBAL_SCOPE=Optional[CanInlineResult.YES]
