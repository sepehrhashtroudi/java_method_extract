private ClosurePassAndRenameVars(Compiler compiler)
protected CodingConvention getCodingConvention()
protected CompilerPass getProcessor(Compiler compiler)
protected int getNumRepetitions()
protected void setUp() throws Exception
public void testRenameSimple()
public void testRenameGlobals()
public void testRenameLocals()
public void testRenameRedeclaredGlobals()
public void testRecursiveFunctions1()
public void testRecursiveFunctions2()
public void testRenameLocalsClashingWithGlobals()
public void testRenameNested()
public void testBleedingRecursiveFunctions1()
public void testBleedingRecursiveFunctions2()
public void testBleedingRecursiveFunctions3()
public void testRenameWithExterns1()
public void testRenameWithExterns2()
public void testDoNotRenameExportedName()
public void testRenameWithNameOverlap()
public void testRenameWithPrefix1()
public void testRenameWithPrefix2()
public void testRenameWithPrefix3()
public void testNamingBasedOnOrderOfOccurrence()
public void testStableRenameSimple()
public void testStableRenameGlobals()
public void testStableRenameWithPointlesslyAnonymousFunctions()
public void testStableRenameLocalsClashingWithGlobals()
public void testStableRenameNested()
public void testStableRenameWithExterns1()
public void testStableRenameWithExterns2()
public void testStableRenameWithNameOverlap()
public void testStableRenameWithAnonymousFunctions()
public void testStableRenameSimpleExternsChanges()
public void testStableRenameSimpleLocalNameExterned()
public void testStableRenameSimpleGlobalNameExterned()
public void testStableRenameWithPrefix1AndUnstableLocalNames()
public void testStableRenameWithPrefix2()
public void testContrivedExampleWhereConsistentRenamingIsWorse()
public void testExportSimpleSymbolReservesName()
public void testExportComplexSymbolReservesName()
public void testExportToNonStringDoesntExplode()
public void testDollarSignSuperExport1()
public void testDollarSignSuperExport2()
public void testPseudoNames()
private void testRenameMapUsingOldMap(String input, String expected, VariableMap expectedMap)
private void testRenameMapUsingOldMap(String externs, String input, String expected, VariableMap expectedMap)
private void testRenameMap(String input, String expected, VariableMap expectedRenameMap)
private void testRenameMap(String externs, String input, String expected, VariableMap expectedRenameMap)
private VariableMap makeVariableMap(String... keyValPairs)
private static void assertVariableMapsEqual(VariableMap a, VariableMap b)
public void process(Node externs, Node root)
String DEFAULT_PREFIX=Optional[""]
String prefix=Optional[DEFAULT_PREFIX]
VariableMap previouslyUsedMap=Optional[new VariableMap(ImmutableMap.<String, String>of())]
RenameVars renameVars
boolean withClosurePass=Optional[false]
boolean localRenamingOnly=Optional[false]
boolean preserveFunctionExpressionNames=Optional[false]
boolean useGoogleCodingConvention=Optional[true]
boolean generatePseudoNames=Optional[false]
boolean shouldShadow=Optional[false]
