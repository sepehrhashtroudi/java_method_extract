private void testCfg(String input, String expected)
private static List<DiGraphEdge<Node, Branch>> getAllEdges(ControlFlowGraph<Node> cfg)
private static List<DiGraphEdge<Node, Branch>> getAllEdges(ControlFlowGraph<Node> cfg, int startToken, int endToken)
private static List<DiGraphEdge<Node, Branch>> getAllEdges(ControlFlowGraph<Node> cfg, int startToken, int endToken, Branch type)
private static boolean isAncestor(Node n, Node maybeDescendent)
private static List<DiGraphEdge<Node, Branch>> getAllDownEdges(ControlFlowGraph<Node> cfg, int startToken, int endToken, Branch type)
private static void assertNoEdge(ControlFlowGraph<Node> cfg, int startToken, int endToken)
private static void assertDownEdge(ControlFlowGraph<Node> cfg, int startToken, int endToken, Branch type)
private static void assertUpEdge(ControlFlowGraph<Node> cfg, int startToken, int endToken, Branch type)
private static void assertCrossEdge(ControlFlowGraph<Node> cfg, int startToken, int endToken, Branch type)
private static void assertReturnEdge(ControlFlowGraph<Node> cfg, int startToken)
private static void assertNoReturnEdge(ControlFlowGraph<Node> cfg, int startToken)
private ControlFlowGraph<Node> createCfg(String input, boolean runSynBlockPass)
private ControlFlowGraph<Node> createCfg(String input)
private void testCfg(String input, String expected, boolean shouldTraverseFunctions)
public void testSimpleStatements()
public void testSimpleIf()
public void testBreakingBlock()
public void testBreakingTryBlock()
public void testWithStatement()
public void testSimpleWhile()
public void testSimpleSwitch()
public void testSimpleNoDefault()
public void testSwitchDefaultFirst()
public void testSwitchDefaultInMiddle()
public void testSwitchEmpty()
public void testReturnThrowingException()
public void testSimpleFor()
public void testSimpleForWithContinue()
public void testNestedFor()
public void testNestedDoWithBreak()
public void testForIn()
public void testThrow()
public void testSimpleFunction()
public void testSimpleCatch()
public void testFunctionWithinTry()
public void testNestedCatch()
public void testSimpleFinally()
public void testSimpleCatchFinally()
public void testComplicatedFinally2()
public void testDeepNestedBreakwithFinally()
public void testDeepNestedFinally()
public void testReturn()
public void testReturnInFinally()
public void testReturnInFinally2()
public void testReturnInTry()
public void testOptionNotToTraverseFunctions()
public void testInstanceOf()
public void testSynBlock()
public void testPartialTraversalOfScope()
public void testForLoopOrder()
public void testLabelledForInLoopOrder()
public void testLocalFunctionOrder()
public void testDoWhileOrder()
public void testBreakInFinally1()
public void testBreakInFinally2()
private void assertNodeOrder(ControlFlowGraph<Node> cfg, List<Integer> nodeTypes)
