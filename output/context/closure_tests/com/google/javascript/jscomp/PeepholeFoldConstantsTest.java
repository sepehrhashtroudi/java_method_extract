private PeepholeFoldConstantsTest(boolean compareAsTree)
public PeepholeFoldConstantsTest()
public void setUp()
public CompilerPass getProcessor(final Compiler compiler)
protected int getNumRepetitions()
private void foldSame(String js)
private void fold(String js, String expected)
private void fold(String js, String expected, DiagnosticType warning)
private void assertResultString(String js, String expected)
public void testUndefinedComparison1()
public void testUndefinedComparison2()
public void testUndefinedComparison3()
public void testUndefinedComparison4()
public void testNullComparison1()
public void testUnaryOps()
public void testUnaryOpsStringCompare()
public void testFoldLogicalOp()
public void testFoldBitwiseOp()
public void testFoldBitwiseOp2()
public void testFoldingMixTypesLate()
public void testFoldingMixTypesEarly()
public void testFoldingAdd()
public void testFoldBitwiseOpStringCompare()
public void testFoldBitShifts()
public void testFoldBitShiftsStringCompare()
public void testStringAdd()
public void testIssue821()
public void testFoldConstructor()
public void testFoldArithmetic()
public void testFoldArithmetic2()
public void testFoldArithmetic3()
public void testFoldArithmeticInfinity()
public void testFoldArithmeticStringComp()
public void testFoldComparison()
public void testFoldComparison2()
public void testFoldComparison3()
public void testFoldGetElem()
public void testFoldComplex()
public void testFoldLeft()
public void testFoldArrayLength()
public void testFoldStringLength()
public void testFoldTypeof()
public void testFoldInstanceOf()
public void testDivision()
public void testAssignOpsLate()
public void testAssignOpsEarly()
public void testFoldAdd1()
public void testFoldLiteralNames()
public void testFoldLiteralsTypeMismatches()
public void testFoldLeftChildConcat()
public void testFoldLeftChildOp()
public void testFoldSimpleArithmeticOp()
public void testFoldLiteralsAsNumbers()
public void testNotFoldBackToTrueFalse()
public void testFoldBangConstants()
public void testFoldMixed()
public void testFoldVoid()
public void testObjectLiteral()
public void testArrayLiteral()
public void testIssue601()
public void testFoldObjectLiteralRef1()
public void testFoldObjectLiteralRef2()
public void testIEString()
public void testIssue522()
public void testInvertibleOperators()
public void testCommutativeOperators()
public void testConvertToNumberNegativeInf()
private String join(String operandA, String op, String operandB)
private void assertSameResultsOrUncollapsed(String exprA, String exprB)
private void assertSameResults(String exprA, String exprB)
private void assertNotSameResults(String exprA, String exprB)
private String process(String js)
private String print(String js)
private String printHelper(String js, boolean runProcessor)
boolean late
List<String> LITERAL_OPERANDS=Optional[ImmutableList.of("null", "undefined", "void 0", "true", "false", "!0", "!1", "0", "1", "''", "'123'", "'abc'", "'def'", "NaN", "Infinity", // TODO(nicksantos): Add more literals
"-Infinity")]
