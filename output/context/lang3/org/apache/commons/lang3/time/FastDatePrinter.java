protected FastDatePrinter(final String pattern, final TimeZone timeZone, final Locale locale)
 CharacterLiteral(final char value)
 StringLiteral(final String value)
 TextField(final int field, final String[] values)
 UnpaddedNumberField(final int field)
 UnpaddedMonthField()
 PaddedNumberField(final int field, final int size)
 TwoDigitNumberField(final int field)
 TwoDigitYearField()
 TwoDigitMonthField()
 TwelveHourField(final NumberRule rule)
 TwentyFourHourField(final NumberRule rule)
 TimeZoneNameRule(final TimeZone timeZone, final Locale locale, final int style)
 TimeZoneNumberRule(final boolean colon)
 TimeZoneDisplayKey(final TimeZone timeZone, final boolean daylight, int style, final Locale locale)
private void init()
protected List<Rule> parsePattern()
protected String parseToken(final String pattern, final int[] indexRef)
protected NumberRule selectNumberRule(final int field, final int padding)
public StringBuffer format(final Object obj, final StringBuffer toAppendTo, final FieldPosition pos)
public String format(final long millis)
private String applyRulesToString(final Calendar c)
private GregorianCalendar newCalendar()
public String format(final Date date)
public String format(final Calendar calendar)
public StringBuffer format(final long millis, final StringBuffer buf)
public StringBuffer format(final Date date, final StringBuffer buf)
public StringBuffer format(final Calendar calendar, final StringBuffer buf)
protected StringBuffer applyRules(final Calendar calendar, final StringBuffer buf)
public String getPattern()
public TimeZone getTimeZone()
public Locale getLocale()
public int getMaxLengthEstimate()
public boolean equals(final Object obj)
public int hashCode()
public String toString()
private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException
 int estimateLength()
 void appendTo(StringBuffer buffer, Calendar calendar)
 void appendTo(StringBuffer buffer, int value)
public int estimateLength()
public void appendTo(final StringBuffer buffer, final Calendar calendar)
public int estimateLength()
public void appendTo(final StringBuffer buffer, final Calendar calendar)
public int estimateLength()
public void appendTo(final StringBuffer buffer, final Calendar calendar)
public int estimateLength()
public void appendTo(final StringBuffer buffer, final Calendar calendar)
public final void appendTo(final StringBuffer buffer, final int value)
public int estimateLength()
public void appendTo(final StringBuffer buffer, final Calendar calendar)
public final void appendTo(final StringBuffer buffer, final int value)
public int estimateLength()
public void appendTo(final StringBuffer buffer, final Calendar calendar)
public final void appendTo(final StringBuffer buffer, final int value)
public int estimateLength()
public void appendTo(final StringBuffer buffer, final Calendar calendar)
public final void appendTo(final StringBuffer buffer, final int value)
public int estimateLength()
public void appendTo(final StringBuffer buffer, final Calendar calendar)
public final void appendTo(final StringBuffer buffer, final int value)
public int estimateLength()
public void appendTo(final StringBuffer buffer, final Calendar calendar)
public final void appendTo(final StringBuffer buffer, final int value)
public int estimateLength()
public void appendTo(final StringBuffer buffer, final Calendar calendar)
public void appendTo(final StringBuffer buffer, final int value)
public int estimateLength()
public void appendTo(final StringBuffer buffer, final Calendar calendar)
public void appendTo(final StringBuffer buffer, final int value)
 static String getTimeZoneDisplay(final TimeZone tz, final boolean daylight, final int style, final Locale locale)
public int estimateLength()
public void appendTo(final StringBuffer buffer, final Calendar calendar)
public int estimateLength()
public void appendTo(final StringBuffer buffer, final Calendar calendar)
public int hashCode()
public boolean equals(final Object obj)
long serialVersionUID=Optional[1L]
int FULL=Optional[DateFormat.FULL]
int LONG=Optional[DateFormat.LONG]
int MEDIUM=Optional[DateFormat.MEDIUM]
int SHORT=Optional[DateFormat.SHORT]
String mPattern
TimeZone mTimeZone
Locale mLocale
Rule[] mRules
int mMaxLengthEstimate
ConcurrentMap<TimeZoneDisplayKey, String> cTimeZoneDisplayCache=Optional[new ConcurrentHashMap<TimeZoneDisplayKey, String>(7)]
