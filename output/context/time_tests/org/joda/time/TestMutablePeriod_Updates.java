public TestMutablePeriod_Updates(String name)
public static void main(String[] args)
public static TestSuite suite()
protected void setUp() throws Exception
protected void tearDown() throws Exception
public void testTest()
public void testClear()
public void testAddYears()
public void testAddMonths()
public void testAddWeeks()
public void testAddDays()
public void testAddHours()
public void testAddMinutes()
public void testAddSeconds()
public void testAddMillis()
public void testSetYears()
public void testSetMonths()
public void testSetWeeks()
public void testSetDays()
public void testSetHours()
public void testSetMinutes()
public void testSetSeconds()
public void testSetMillis()
public void testSet_Field()
public void testAdd_Field()
public void testSetPeriod_8ints1()
public void testSetPeriod_8ints2()
public void testSetPeriod_8ints3()
public void testSetPeriod_8ints4()
public void testSetPeriod_RP1()
public void testSetPeriod_RP2()
public void testSetPeriod_RP3()
public void testSetPeriod_RP4()
public void testSetPeriod_RP5()
public void testSetPeriod_long_long1()
public void testSetPeriod_long_long2()
public void testSetPeriod_long_long3()
public void testSetPeriod_long_long_NoYears()
public void testSetPeriod_long_long_NoMonths()
public void testSetPeriod_long_long_NoWeeks()
public void testSetPeriod_long_long_NoDays()
public void testSetPeriod_long_long_NoHours()
public void testSetPeriod_long_long_NoMinutes()
public void testSetPeriod_long_long_NoSeconds()
public void testSetPeriod_long_long_NoMillis()
public void testSetPeriod_RI_RI1()
public void testSetPeriod_RI_RI2()
public void testSetPeriod_RI_RI3()
public void testSetPeriod_RInterval1()
public void testSetPeriod_RInterval2()
public void testSetPeriod_long1()
public void testSetPeriod_long2()
public void testSetPeriod_RD1()
public void testSetPeriod_RD2()
public void testSetPeriod_RD3()
public void testAdd_8ints1()
public void testAdd_8ints2()
public void testAdd_long1()
public void testAdd_long2()
public void testAdd_long3()
public void testAdd_long_Chronology1()
public void testAdd_long_Chronology2()
public void testAdd_long_Chronology3()
public void testAdd_RD1()
public void testAdd_RD2()
public void testAdd_RD3()
public void testAdd_RP1()
public void testAdd_RP2()
public void testAdd_RP3()
public void testAdd_RP4()
public void testAdd_RP5()
public void testAdd_RP6()
public void testAdd_RInterval1()
public void testAdd_RInterval2()
public void testAdd_RInterval3()
public void testAdd_RInterval4()
public void testAdd_RInterval5()
public void testMergePeriod_RP1()
public void testMergePeriod_RP2()
public void testMergePeriod_RP3()
public void testMergePeriod_RP4()
public void testMergePeriod_RP5()
DateTimeZone PARIS=Optional[DateTimeZone.forID("Europe/Paris")]
DateTimeZone LONDON=Optional[DateTimeZone.forID("Europe/London")]
long y2002days=Optional[365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365]
long y2003days=Optional[365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365]
long TEST_TIME_NOW=Optional[(y2002days + 31L + 28L + 31L + 30L + 31L + 9L - 1L) * DateTimeConstants.MILLIS_PER_DAY]
long TEST_TIME1=Optional[(y2002days + 31L + 28L + 31L + 5L - 1L) * DateTimeConstants.MILLIS_PER_DAY + 12L * DateTimeConstants.MILLIS_PER_HOUR + 24L * DateTimeConstants.MILLIS_PER_MINUTE]
long TEST_TIME2=Optional[(y2003days + 31L + 28L + 31L + 30L + 6L - 1L) * DateTimeConstants.MILLIS_PER_DAY + 14L * DateTimeConstants.MILLIS_PER_HOUR + 28L * DateTimeConstants.MILLIS_PER_MINUTE]
DateTimeZone originalDateTimeZone=Optional[null]
TimeZone originalTimeZone=Optional[null]
Locale originalLocale=Optional[null]
