public TestDuration_Basics(String name)
public MockDuration(long value)
public MockMutableDuration(long duration)
public static void main(String[] args)
public static TestSuite suite()
protected void setUp() throws Exception
protected void tearDown() throws Exception
public void testTest()
public void testGetMillis()
public void testEqualsHashCode()
public long getMillis()
public void testCompareTo()
public void testIsEqual()
public void testIsBefore()
public void testIsAfter()
public void testSerialization() throws Exception
public void testGetStandardSeconds()
public void testToString()
public void testToDuration1()
public void testToDuration2()
public void testToStandardDays()
public void testToStandardDays_overflow()
public void testToStandardHours()
public void testToStandardHours_overflow()
public void testToStandardMinutes()
public void testToStandardMinutes_overflow()
public void testToStandardSeconds()
public void testToStandardSeconds_overflow()
public void testToPeriod()
public void testToPeriod_fixedZone() throws Throwable
public void testToPeriod_PeriodType()
public void testToPeriod_Chronology()
public void testToPeriod_PeriodType_Chronology()
public void testToPeriodFrom()
public void testToPeriodFrom_PeriodType()
public void testToPeriodTo()
public void testToPeriodTo_PeriodType()
public void testToIntervalFrom()
public void testToIntervalTo()
public void testWithMillis1()
public void testWithMillis2()
public void testWithDurationAdded_long_int1()
public void testWithDurationAdded_long_int2()
public void testWithDurationAdded_long_int3()
public void testWithDurationAdded_long_int4()
public void testWithDurationAdded_long_int5()
public void testPlus_long1()
public void testPlus_long2()
public void testMinus_long1()
public void testMinus_long2()
public void testMultipliedBy_long1()
public void testMultipliedBy_long2()
public void testDividedBy_long1()
public void testDividedBy_long2()
public void testNegated_long1()
public void testNegated_long2()
public void testNegated_long3()
public void testWithDurationAdded_RD_int1()
public void testWithDurationAdded_RD_int2()
public void testWithDurationAdded_RD_int3()
public void testWithDurationAdded_RD_int4()
public void testWithDurationAdded_RD_int5()
public void testWithDurationAdded_RD_int6()
public void testPlus_RD1()
public void testPlus_RD2()
public void testPlus_RD3()
public void testMinus_RD1()
public void testMinus_RD2()
public void testMinus_RD3()
public void testMutableDuration()
public void setMillis(long duration)
DateTimeZone LONDON=Optional[DateTimeZone.forID("Europe/London")]
long y2002days=Optional[365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365]
long y2003days=Optional[365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365]
long TEST_TIME_NOW=Optional[(y2002days + 31L + 28L + 31L + 30L + 31L + 9L - 1L) * DateTimeConstants.MILLIS_PER_DAY]
long TEST_TIME1=Optional[(y2002days + 31L + 28L + 31L + 5L - 1L) * DateTimeConstants.MILLIS_PER_DAY + 12L * DateTimeConstants.MILLIS_PER_HOUR + 24L * DateTimeConstants.MILLIS_PER_MINUTE]
long TEST_TIME2=Optional[(y2003days + 31L + 28L + 31L + 30L + 6L - 1L) * DateTimeConstants.MILLIS_PER_DAY + 14L * DateTimeConstants.MILLIS_PER_HOUR + 28L * DateTimeConstants.MILLIS_PER_MINUTE]
DateTimeZone originalDateTimeZone=Optional[null]
TimeZone originalTimeZone=Optional[null]
Locale originalLocale=Optional[null]
