public TestDateTime_Properties(String name)
public static void main(String[] args)
public static TestSuite suite()
protected void setUp() throws Exception
protected void tearDown() throws Exception
public void testTest()
public void testPropertyGetEra()
public void testPropertyGetYearOfEra()
public void testPropertyGetCenturyOfEra()
public void testPropertyGetYearOfCentury()
public void testPropertyGetWeekyear()
public void testPropertyGetYear()
public void testPropertyLeapYear()
public void testPropertyAddYear()
public void testPropertyAddWrapFieldYear()
public void testPropertySetYear()
public void testPropertySetTextYear()
public void testPropertyCompareToYear()
public void testPropertyCompareToYear2()
public void testPropertyEqualsHashCodeYear()
public void testPropertyGetMonthOfYear()
public void testPropertyLeapMonthOfYear()
public void testPropertyAddMonthOfYear()
public void testPropertyAddWrapFieldMonthOfYear()
public void testPropertySetMonthOfYear()
public void testPropertySetTextMonthOfYear()
public void testPropertyCompareToMonthOfYear()
public void testPropertyGetDayOfMonth()
public void testPropertyGetMaxMinValuesDayOfMonth()
public void testPropertyAddDayOfMonth()
public void testPropertyAddWrapFieldDayOfMonth()
public void testPropertySetDayOfMonth()
public void testPropertySetTextDayOfMonth()
public void testPropertyWithMaximumValueDayOfMonth()
public void testPropertyWithMaximumValueMillisOfDayDSTGap()
public void testPropertyWithMinimumValueDayOfMonth()
public void testPropertyWithMinimumValueMillisOfDayDSTGap()
public void testPropertyCompareToDayOfMonth()
public void testPropertyGetDayOfYear()
public void testPropertyGetMaxMinValuesDayOfYear()
public void testPropertyAddDayOfYear()
public void testPropertyAddWrapFieldDayOfYear()
public void testPropertySetDayOfYear()
public void testPropertySetTextDayOfYear()
public void testPropertyCompareToDayOfYear()
public void testPropertyGetWeekOfWeekyear()
public void testPropertyGetMaxMinValuesWeekOfWeekyear()
public void testPropertyAddWeekOfWeekyear()
public void testPropertyAddWrapFieldWeekOfWeekyear()
public void testPropertySetWeekOfWeekyear()
public void testPropertySetTextWeekOfWeekyear()
public void testPropertyCompareToWeekOfWeekyear()
public void testPropertyGetDayOfWeek()
public void testPropertyAddDayOfWeek()
public void testPropertyAddLongDayOfWeek()
public void testPropertyAddWrapFieldDayOfWeek()
public void testPropertySetDayOfWeek()
public void testPropertySetTextDayOfWeek()
public void testPropertyCompareToDayOfWeek()
public void testPropertyGetHourOfDay()
public void testPropertyGetDifferenceHourOfDay()
public void testPropertyRoundFloorHourOfDay()
public void testPropertyRoundCeilingHourOfDay()
public void testPropertyRoundHalfFloorHourOfDay()
public void testPropertyRoundHalfCeilingHourOfDay()
public void testPropertyRoundHalfEvenHourOfDay()
public void testPropertyRemainderHourOfDay()
public void testPropertyGetMinuteOfHour()
public void testPropertyGetMinuteOfDay()
public void testPropertyGetSecondOfMinute()
public void testPropertyGetSecondOfDay()
public void testPropertyGetMillisOfSecond()
public void testPropertyGetMillisOfDay()
public void testPropertyToIntervalYearOfEra()
public void testPropertyToIntervalYearOfCentury()
public void testPropertyToIntervalYear()
public void testPropertyToIntervalMonthOfYear()
public void testPropertyToIntervalDayOfMonth()
public void testPropertyToIntervalHourOfDay()
public void testPropertyToIntervalMinuteOfHour()
public void testPropertyToIntervalSecondOfMinute()
public void testPropertyToIntervalMillisOfSecond()
public void testPropertyEqualsHashCodeLenient()
public void testPropertyEqualsHashCodeStrict()
DateTimeZone PARIS=Optional[DateTimeZone.forID("Europe/Paris")]
Chronology COPTIC_PARIS=Optional[CopticChronology.getInstance(PARIS)]
DateTimeZone LONDON=Optional[DateTimeZone.forID("Europe/London")]
long y2002days=Optional[365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365]
long y2003days=Optional[365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365]
long TEST_TIME_NOW=Optional[(y2002days + 31L + 28L + 31L + 30L + 31L + 9L - 1L) * DateTimeConstants.MILLIS_PER_DAY]
long TEST_TIME1=Optional[(y2002days + 31L + 28L + 31L + 5L - 1L) * DateTimeConstants.MILLIS_PER_DAY + 12L * DateTimeConstants.MILLIS_PER_HOUR + 24L * DateTimeConstants.MILLIS_PER_MINUTE]
long TEST_TIME2=Optional[(y2003days + 31L + 28L + 31L + 30L + 6L - 1L) * DateTimeConstants.MILLIS_PER_DAY + 14L * DateTimeConstants.MILLIS_PER_HOUR + 28L * DateTimeConstants.MILLIS_PER_MINUTE]
DateTimeZone zone=Optional[null]
Locale locale=Optional[null]
