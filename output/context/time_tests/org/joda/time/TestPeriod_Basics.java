public TestPeriod_Basics(String name)
public MockPeriod(long value)
public static void main(String[] args)
public static TestSuite suite()
protected void setUp() throws Exception
protected void tearDown() throws Exception
public void testTest()
public void testGetPeriodType()
public void testGetMethods()
public void testValueIndexMethods()
public void testTypeIndexMethods()
public void testIsSupported()
public void testIndexOf()
public void testGet()
public void testEqualsHashCode()
public void testSerialization() throws Exception
public void testToString()
public void testToString_PeriodFormatter()
public void testToString_nullPeriodFormatter()
public void testToPeriod()
public void testToMutablePeriod()
public void testToDurationFrom()
public void testToDurationTo()
public void testWithPeriodType1()
public void testWithPeriodType2()
public void testWithPeriodType3()
public void testWithPeriodType4()
public void testWithPeriodType5()
public void testWithFields1()
public void testWithFields2()
public void testWithFields3()
public void testWithField1()
public void testWithField2()
public void testWithField3()
public void testWithField4()
public void testWithFieldAdded1()
public void testWithFieldAdded2()
public void testWithFieldAdded3()
public void testWithFieldAdded4()
public void testPeriodStatics()
public void testWith()
public void testPlus()
public void testMinus()
public void testPlusFields()
public void testPlusFieldsZero()
public void testMinusFields()
public void testMultipliedBy()
public void testNegated()
public void testToStandardWeeks()
public void testToStandardWeeks_years()
public void testToStandardWeeks_months()
public void testToStandardDays()
public void testToStandardDays_years()
public void testToStandardDays_months()
public void testToStandardHours()
public void testToStandardHours_years()
public void testToStandardHours_months()
public void testToStandardMinutes()
public void testToStandardMinutes_years()
public void testToStandardMinutes_months()
public void testToStandardSeconds()
public void testToStandardSeconds_years()
public void testToStandardSeconds_months()
public void testToStandardDuration()
public void testToStandardDuration_years()
public void testToStandardDuration_months()
public void testNormalizedStandard_yearMonth1()
public void testNormalizedStandard_yearMonth2()
public void testNormalizedStandard_weekDay1()
public void testNormalizedStandard_weekDay2()
public void testNormalizedStandard_yearMonthWeekDay()
public void testNormalizedStandard_yearMonthDay()
public void testNormalizedStandard_negative()
public void testNormalizedStandard_fullNegative()
public void testNormalizedStandard_periodType_yearMonth1()
public void testNormalizedStandard_periodType_yearMonth2()
public void testNormalizedStandard_periodType_yearMonth3()
public void testNormalizedStandard_periodType_weekDay1()
public void testNormalizedStandard_periodType_weekDay2()
public void testNormalizedStandard_periodType_weekDay3()
public void testNormalizedStandard_periodType_yearMonthWeekDay()
public void testNormalizedStandard_periodType_yearMonthDay()
public void testNormalizedStandard_periodType_months1()
public void testNormalizedStandard_periodType_months2()
public void testNormalizedStandard_periodType_months3()
public void testNormalizedStandard_periodType_years()
public void testNormalizedStandard_periodType_monthsWeeks()
DateTimeZone LONDON=Optional[DateTimeZone.forID("Europe/London")]
long y2002days=Optional[365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365]
long y2003days=Optional[365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365]
long TEST_TIME_NOW=Optional[(y2002days + 31L + 28L + 31L + 30L + 31L + 9L - 1L) * DateTimeConstants.MILLIS_PER_DAY]
long TEST_TIME1=Optional[(y2002days + 31L + 28L + 31L + 5L - 1L) * DateTimeConstants.MILLIS_PER_DAY + 12L * DateTimeConstants.MILLIS_PER_HOUR + 24L * DateTimeConstants.MILLIS_PER_MINUTE]
long TEST_TIME2=Optional[(y2003days + 31L + 28L + 31L + 30L + 6L - 1L) * DateTimeConstants.MILLIS_PER_DAY + 14L * DateTimeConstants.MILLIS_PER_HOUR + 28L * DateTimeConstants.MILLIS_PER_MINUTE]
DateTimeZone originalDateTimeZone=Optional[null]
TimeZone originalTimeZone=Optional[null]
Locale originalLocale=Optional[null]
