public StatisticsTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 74,76
public static Test suite() { [EOL]     return new TestSuite(StatisticsTests.class); [EOL] } <line_num>: 65,67
public void testCalculateMean_Array() { [EOL]     boolean pass = false; [EOL]     try { [EOL]         Statistics.calculateMean((Number[]) null); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         Statistics.calculateMean((Number[]) null, false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     assertTrue(Double.isNaN(Statistics.calculateMean(new Number[0]))); [EOL]     assertTrue(Double.isNaN(Statistics.calculateMean(new Number[0], false))); [EOL]     Number[] values = new Number[] { new Double(1.0) }; [EOL]     assertEquals(1.0, Statistics.calculateMean(values), EPSILON); [EOL]     assertEquals(1.0, Statistics.calculateMean(values, true), EPSILON); [EOL]     assertEquals(1.0, Statistics.calculateMean(values, false), EPSILON); [EOL]     values = new Number[] { new Double(1.0), null }; [EOL]     assertTrue(Double.isNaN(Statistics.calculateMean(values))); [EOL]     assertTrue(Double.isNaN(Statistics.calculateMean(values, true))); [EOL]     assertEquals(1.0, Statistics.calculateMean(values, false), EPSILON); [EOL]     values = new Number[] { new Double(1.0), new Double(Double.NaN) }; [EOL]     assertTrue(Double.isNaN(Statistics.calculateMean(values))); [EOL]     assertTrue(Double.isNaN(Statistics.calculateMean(values, true))); [EOL]     assertEquals(1.0, Statistics.calculateMean(values, false), EPSILON); [EOL] } <line_num>: 82,125
public void testCalculateMean_Collection() { [EOL]     boolean pass = false; [EOL]     try { [EOL]         Statistics.calculateMean((Collection) null); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         Statistics.calculateMean((Collection) null, false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     List values = new ArrayList(); [EOL]     assertTrue(Double.isNaN(Statistics.calculateMean(values))); [EOL]     assertTrue(Double.isNaN(Statistics.calculateMean(values, true))); [EOL]     assertTrue(Double.isNaN(Statistics.calculateMean(values, false))); [EOL]     values.add(new Double(9.0)); [EOL]     assertEquals(9.0, Statistics.calculateMean(values), EPSILON); [EOL]     assertEquals(9.0, Statistics.calculateMean(values, true), EPSILON); [EOL]     assertEquals(9.0, Statistics.calculateMean(values, false), EPSILON); [EOL]     values.add(null); [EOL]     assertTrue(Double.isNaN(Statistics.calculateMean(values))); [EOL]     assertTrue(Double.isNaN(Statistics.calculateMean(values, true))); [EOL]     assertEquals(9.0, Statistics.calculateMean(values, false), EPSILON); [EOL]     values.clear(); [EOL]     values.add(new Double(9.0)); [EOL]     values.add(new Double(Double.NaN)); [EOL]     assertTrue(Double.isNaN(Statistics.calculateMean(values))); [EOL]     assertTrue(Double.isNaN(Statistics.calculateMean(values, true))); [EOL]     assertEquals(9.0, Statistics.calculateMean(values, false), EPSILON); [EOL]     values = new ArrayList(); [EOL]     values.add(new Double(9.0)); [EOL]     values.add(new Double(3.0)); [EOL]     values.add(new Double(2.0)); [EOL]     values.add(new Double(2.0)); [EOL]     double mean = Statistics.calculateMean(values); [EOL]     assertEquals(4.0, mean, EPSILON); [EOL]     values.add(new Double(Double.NaN)); [EOL]     assertTrue(Double.isNaN(Statistics.calculateMean(values))); [EOL] } <line_num>: 131,190
public void testCalculateMedian() { [EOL]     assertTrue(Double.isNaN(Statistics.calculateMedian(null, false))); [EOL]     assertTrue(Double.isNaN(Statistics.calculateMedian(null, true))); [EOL]     List list = new ArrayList(); [EOL]     assertTrue(Double.isNaN(Statistics.calculateMedian(list, false))); [EOL]     assertTrue(Double.isNaN(Statistics.calculateMedian(list, true))); [EOL]     list.add(null); [EOL]     boolean pass = false; [EOL]     try { [EOL]         Statistics.calculateMedian(list, false); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         Statistics.calculateMedian(list, true); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     list.clear(); [EOL]     list.add("Not a number"); [EOL]     pass = false; [EOL]     try { [EOL]         Statistics.calculateMedian(list, false); [EOL]     } catch (ClassCastException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         Statistics.calculateMedian(list, true); [EOL]     } catch (ClassCastException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 197,249
public void testCalculateMedian1() { [EOL]     List values = new ArrayList(); [EOL]     values.add(new Double(1.0)); [EOL]     double median = Statistics.calculateMedian(values); [EOL]     assertEquals(1.0, median, 0.0000001); [EOL] } <line_num>: 254,259
public void testCalculateMedian2() { [EOL]     List values = new ArrayList(); [EOL]     values.add(new Double(2.0)); [EOL]     values.add(new Double(1.0)); [EOL]     double median = Statistics.calculateMedian(values); [EOL]     assertEquals(1.5, median, 0.0000001); [EOL] } <line_num>: 264,270
public void testCalculateMedian3() { [EOL]     List values = new ArrayList(); [EOL]     values.add(new Double(1.0)); [EOL]     values.add(new Double(2.0)); [EOL]     values.add(new Double(3.0)); [EOL]     values.add(new Double(6.0)); [EOL]     values.add(new Double(5.0)); [EOL]     values.add(new Double(4.0)); [EOL]     double median = Statistics.calculateMedian(values); [EOL]     assertEquals(3.5, median, 0.0000001); [EOL] } <line_num>: 275,285
public void testCalculateMedian4() { [EOL]     List values = new ArrayList(); [EOL]     values.add(new Double(7.0)); [EOL]     values.add(new Double(2.0)); [EOL]     values.add(new Double(3.0)); [EOL]     values.add(new Double(5.0)); [EOL]     values.add(new Double(4.0)); [EOL]     values.add(new Double(6.0)); [EOL]     values.add(new Double(1.0)); [EOL]     double median = Statistics.calculateMedian(values); [EOL]     assertEquals(4.0, median, 0.0000001); [EOL] } <line_num>: 290,301
public void testCalculateMedian5() { [EOL]     List values = new ArrayList(); [EOL]     values.add(new Double(11.228692993861783)); [EOL]     values.add(new Double(11.30823353859889)); [EOL]     values.add(new Double(11.75312904769314)); [EOL]     values.add(new Double(11.825102897465314)); [EOL]     values.add(new Double(10.184252778401783)); [EOL]     values.add(new Double(12.207951828057766)); [EOL]     values.add(new Double(10.68841994040566)); [EOL]     values.add(new Double(12.099522004479438)); [EOL]     values.add(new Double(11.508874945056881)); [EOL]     values.add(new Double(12.052517729558513)); [EOL]     values.add(new Double(12.401481645578734)); [EOL]     values.add(new Double(12.185377793028543)); [EOL]     values.add(new Double(10.666372951930315)); [EOL]     values.add(new Double(11.680978041499548)); [EOL]     values.add(new Double(11.06528277406718)); [EOL]     values.add(new Double(11.36876492904596)); [EOL]     values.add(new Double(11.927565516175939)); [EOL]     values.add(new Double(11.39307785978655)); [EOL]     values.add(new Double(11.989603679523857)); [EOL]     values.add(new Double(12.009834360354864)); [EOL]     values.add(new Double(10.653351822461559)); [EOL]     values.add(new Double(11.851776254376754)); [EOL]     values.add(new Double(11.045441544755946)); [EOL]     values.add(new Double(11.993674040560624)); [EOL]     values.add(new Double(12.898219965238944)); [EOL]     values.add(new Double(11.97095782819647)); [EOL]     values.add(new Double(11.73234406745488)); [EOL]     values.add(new Double(11.649006017243991)); [EOL]     values.add(new Double(12.20549704915365)); [EOL]     values.add(new Double(11.799723639384919)); [EOL]     values.add(new Double(11.896208658005628)); [EOL]     values.add(new Double(12.164149111823424)); [EOL]     values.add(new Double(12.042795103513766)); [EOL]     values.add(new Double(12.114839532596426)); [EOL]     values.add(new Double(12.166609097075824)); [EOL]     values.add(new Double(12.183017546225935)); [EOL]     values.add(new Double(11.622009125845342)); [EOL]     values.add(new Double(11.289365786738633)); [EOL]     values.add(new Double(12.462984323671568)); [EOL]     values.add(new Double(11.573494921030598)); [EOL]     values.add(new Double(10.862867940485804)); [EOL]     values.add(new Double(12.018186939664872)); [EOL]     values.add(new Double(10.418046849313018)); [EOL]     values.add(new Double(11.326344465881341)); [EOL]     double median = Statistics.calculateMedian(values, true); [EOL]     assertEquals(11.812413268425116, median, 0.000001); [EOL]     Collections.sort(values); [EOL]     double median2 = Statistics.calculateMedian(values, false); [EOL]     assertEquals(11.812413268425116, median2, 0.000001); [EOL] } <line_num>: 306,357
public void testCalculateMedian6() { [EOL]     List values = new ArrayList(); [EOL]     values.add(new Double(7.0)); [EOL]     values.add(new Double(2.0)); [EOL]     values.add(new Double(3.0)); [EOL]     values.add(new Double(5.0)); [EOL]     values.add(new Double(4.0)); [EOL]     values.add(new Double(6.0)); [EOL]     values.add(new Double(1.0)); [EOL]     double median = Statistics.calculateMedian(values, 0, 2); [EOL]     assertEquals(3.0, median, 0.0000001); [EOL] } <line_num>: 362,373
public void testCorrelation1() { [EOL]     Number[] data1 = new Number[3]; [EOL]     data1[0] = new Double(1); [EOL]     data1[1] = new Double(2); [EOL]     data1[2] = new Double(3); [EOL]     Number[] data2 = new Number[3]; [EOL]     data2[0] = new Double(1); [EOL]     data2[1] = new Double(2); [EOL]     data2[2] = new Double(3); [EOL]     double r = Statistics.getCorrelation(data1, data2); [EOL]     assertEquals(1.0, r, 0.00000001); [EOL] } <line_num>: 378,389
public void testCorrelation2() { [EOL]     Number[] data1 = new Number[20]; [EOL]     data1[0] = new Double(68); [EOL]     data1[1] = new Double(71); [EOL]     data1[2] = new Double(62); [EOL]     data1[3] = new Double(75); [EOL]     data1[4] = new Double(58); [EOL]     data1[5] = new Double(60); [EOL]     data1[6] = new Double(67); [EOL]     data1[7] = new Double(68); [EOL]     data1[8] = new Double(71); [EOL]     data1[9] = new Double(69); [EOL]     data1[10] = new Double(68); [EOL]     data1[11] = new Double(67); [EOL]     data1[12] = new Double(63); [EOL]     data1[13] = new Double(62); [EOL]     data1[14] = new Double(60); [EOL]     data1[15] = new Double(63); [EOL]     data1[16] = new Double(65); [EOL]     data1[17] = new Double(67); [EOL]     data1[18] = new Double(63); [EOL]     data1[19] = new Double(61); [EOL]     Number[] data2 = new Number[20]; [EOL]     data2[0] = new Double(4.1); [EOL]     data2[1] = new Double(4.6); [EOL]     data2[2] = new Double(3.8); [EOL]     data2[3] = new Double(4.4); [EOL]     data2[4] = new Double(3.2); [EOL]     data2[5] = new Double(3.1); [EOL]     data2[6] = new Double(3.8); [EOL]     data2[7] = new Double(4.1); [EOL]     data2[8] = new Double(4.3); [EOL]     data2[9] = new Double(3.7); [EOL]     data2[10] = new Double(3.5); [EOL]     data2[11] = new Double(3.2); [EOL]     data2[12] = new Double(3.7); [EOL]     data2[13] = new Double(3.3); [EOL]     data2[14] = new Double(3.4); [EOL]     data2[15] = new Double(4.0); [EOL]     data2[16] = new Double(4.1); [EOL]     data2[17] = new Double(3.8); [EOL]     data2[18] = new Double(3.4); [EOL]     data2[19] = new Double(3.6); [EOL]     double r = Statistics.getCorrelation(data1, data2); [EOL]     assertEquals(0.7306356862792885, r, 0.000000000001); [EOL] } <line_num>: 396,441
public void testGetStdDev() { [EOL]     boolean pass = false; [EOL]     try { [EOL]         Statistics.getStdDev(null); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         Statistics.getStdDev(new Double[0]); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     assertTrue(Double.isNaN(Statistics.getStdDev(new Double[] { new Double(1.0) }))); [EOL] } <line_num>: 446,471
