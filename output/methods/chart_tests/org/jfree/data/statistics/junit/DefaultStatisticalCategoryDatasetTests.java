public DefaultStatisticalCategoryDatasetTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 81,83
public static Test suite() { [EOL]     return new TestSuite(DefaultStatisticalCategoryDatasetTests.class); [EOL] } <line_num>: 72,74
public void testGetRangeBounds() { [EOL]     DefaultStatisticalCategoryDataset d = new DefaultStatisticalCategoryDataset(); [EOL]     assertNull(d.getRangeBounds(true)); [EOL]     d.add(4.5, 1.0, "R1", "C1"); [EOL]     assertEquals(new Range(4.5, 4.5), d.getRangeBounds(false)); [EOL]     assertEquals(new Range(3.5, 5.5), d.getRangeBounds(true)); [EOL]     d.add(0.5, 2.0, "R1", "C2"); [EOL]     assertEquals(new Range(0.5, 4.5), d.getRangeBounds(false)); [EOL]     assertEquals(new Range(-1.5, 5.5), d.getRangeBounds(true)); [EOL]     d.add(Double.NaN, 0.0, "R1", "C3"); [EOL]     assertEquals(new Range(0.5, 4.5), d.getRangeBounds(false)); [EOL]     assertEquals(new Range(-1.5, 5.5), d.getRangeBounds(true)); [EOL]     d.add(Double.NEGATIVE_INFINITY, 0.0, "R1", "C3"); [EOL]     assertEquals(new Range(Double.NEGATIVE_INFINITY, 4.5), d.getRangeBounds(false)); [EOL]     assertEquals(new Range(Double.NEGATIVE_INFINITY, 5.5), d.getRangeBounds(true)); [EOL]     d.add(Double.POSITIVE_INFINITY, 0.0, "R1", "C3"); [EOL]     assertEquals(new Range(0.5, Double.POSITIVE_INFINITY), d.getRangeBounds(false)); [EOL]     assertEquals(new Range(-1.5, Double.POSITIVE_INFINITY), d.getRangeBounds(true)); [EOL] } <line_num>: 88,123
public void testEquals() { [EOL]     DefaultStatisticalCategoryDataset d1 = new DefaultStatisticalCategoryDataset(); [EOL]     DefaultStatisticalCategoryDataset d2 = new DefaultStatisticalCategoryDataset(); [EOL]     assertTrue(d1.equals(d2)); [EOL]     assertTrue(d2.equals(d1)); [EOL] } <line_num>: 128,136
public void testCloning() { [EOL]     DefaultStatisticalCategoryDataset d1 = new DefaultStatisticalCategoryDataset(); [EOL]     d1.add(1.1, 2.2, "R1", "C1"); [EOL]     d1.add(3.3, 4.4, "R1", "C2"); [EOL]     d1.add(null, new Double(5.5), "R1", "C3"); [EOL]     d1.add(new Double(6.6), null, "R2", "C3"); [EOL]     DefaultStatisticalCategoryDataset d2 = null; [EOL]     try { [EOL]         d2 = (DefaultStatisticalCategoryDataset) d1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         fail(e.toString()); [EOL]     } [EOL]     assertTrue(d1 != d2); [EOL]     assertTrue(d1.getClass() == d2.getClass()); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1.add(1.1, 2.2, "R3", "C1"); [EOL]     assertFalse(d1.equals(d2)); [EOL] } <line_num>: 141,162
public void testSerialization1() { [EOL]     DefaultStatisticalCategoryDataset d1 = new DefaultStatisticalCategoryDataset(); [EOL]     d1.add(1.1, 2.2, "R1", "C1"); [EOL]     d1.add(3.3, 4.4, "R1", "C2"); [EOL]     d1.add(null, new Double(5.5), "R1", "C3"); [EOL]     d1.add(new Double(6.6), null, "R2", "C3"); [EOL]     DefaultStatisticalCategoryDataset d2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(d1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         d2 = (DefaultStatisticalCategoryDataset) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         fail(e.toString()); [EOL]     } [EOL]     assertEquals(d1, d2); [EOL] } <line_num>: 167,190
public void testSerialization2() { [EOL]     DefaultStatisticalCategoryDataset d1 = new DefaultStatisticalCategoryDataset(); [EOL]     d1.add(1.2, 3.4, "Row 1", "Column 1"); [EOL]     DefaultStatisticalCategoryDataset d2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(d1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         d2 = (DefaultStatisticalCategoryDataset) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         fail(e.toString()); [EOL]     } [EOL]     assertEquals(d1, d2); [EOL] } <line_num>: 195,215
public void testAdd() { [EOL]     DefaultStatisticalCategoryDataset d1 = new DefaultStatisticalCategoryDataset(); [EOL]     d1.add(1.0, 2.0, "R1", "C1"); [EOL]     assertEquals(1.0, d1.getValue("R1", "C1").doubleValue(), EPSILON); [EOL]     assertEquals(2.0, d1.getStdDevValue("R1", "C1").doubleValue(), EPSILON); [EOL]     d1.add(10.0, 20.0, "R1", "C1"); [EOL]     assertEquals(10.0, d1.getValue("R1", "C1").doubleValue(), EPSILON); [EOL]     assertEquals(20.0, d1.getStdDevValue("R1", "C1").doubleValue(), EPSILON); [EOL] } <line_num>: 222,233
public void testGetRangeLowerBound() { [EOL]     DefaultStatisticalCategoryDataset d1 = new DefaultStatisticalCategoryDataset(); [EOL]     d1.add(1.0, 2.0, "R1", "C1"); [EOL]     assertEquals(1.0, d1.getRangeLowerBound(false), EPSILON); [EOL]     assertEquals(-1.0, d1.getRangeLowerBound(true), EPSILON); [EOL] } <line_num>: 238,244
public void testGetRangeUpperBound() { [EOL]     DefaultStatisticalCategoryDataset d1 = new DefaultStatisticalCategoryDataset(); [EOL]     d1.add(1.0, 2.0, "R1", "C1"); [EOL]     assertEquals(1.0, d1.getRangeUpperBound(false), EPSILON); [EOL]     assertEquals(3.0, d1.getRangeUpperBound(true), EPSILON); [EOL] } <line_num>: 249,255
public void testGetRangeBounds2() { [EOL]     DefaultStatisticalCategoryDataset d1 = new DefaultStatisticalCategoryDataset(); [EOL]     d1.add(1.0, 2.0, "R1", "C1"); [EOL]     assertEquals(new Range(1.0, 1.0), d1.getRangeBounds(false)); [EOL]     assertEquals(new Range(-1.0, 3.0), d1.getRangeBounds(true)); [EOL]     d1.add(10.0, 20.0, "R1", "C1"); [EOL]     assertEquals(new Range(10.0, 10.0), d1.getRangeBounds(false)); [EOL]     assertEquals(new Range(-10.0, 30.0), d1.getRangeBounds(true)); [EOL] } <line_num>: 260,270
public void testRemove() { [EOL]     DefaultStatisticalCategoryDataset data = new DefaultStatisticalCategoryDataset(); [EOL]     boolean pass = false; [EOL]     try { [EOL]         data.remove("R1", "R2"); [EOL]     } catch (UnknownKeyException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     data.add(1.0, 0.5, "R1", "C1"); [EOL]     assertEquals(new Range(1.0, 1.0), data.getRangeBounds(false)); [EOL]     assertEquals(new Range(0.5, 1.5), data.getRangeBounds(true)); [EOL]     data.add(1.4, 0.2, "R2", "C1"); [EOL]     assertEquals(1.0, data.getRangeLowerBound(false), EPSILON); [EOL]     assertEquals(1.4, data.getRangeUpperBound(false), EPSILON); [EOL]     assertEquals(0.5, data.getRangeLowerBound(true), EPSILON); [EOL]     assertEquals(1.6, data.getRangeUpperBound(true), EPSILON); [EOL]     data.remove("R1", "C1"); [EOL]     assertEquals(1.4, data.getRangeLowerBound(false), EPSILON); [EOL]     assertEquals(1.4, data.getRangeUpperBound(false), EPSILON); [EOL]     assertEquals(1.2, data.getRangeLowerBound(true), EPSILON); [EOL]     assertEquals(1.6, data.getRangeUpperBound(true), EPSILON); [EOL] } <line_num>: 275,304
