public BoxAndWhiskerCalculatorTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 72,74
public static Test suite() { [EOL]     return new TestSuite(BoxAndWhiskerCalculatorTests.class); [EOL] } <line_num>: 63,65
public void testCalculateBoxAndWhiskerStatistics() { [EOL]     boolean pass = false; [EOL]     try { [EOL]         BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics(null); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     List values = new ArrayList(); [EOL]     values.add(new Double(1.1)); [EOL]     BoxAndWhiskerItem item = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics(values); [EOL]     assertEquals(1.1, item.getMean().doubleValue(), EPSILON); [EOL]     assertEquals(1.1, item.getMedian().doubleValue(), EPSILON); [EOL]     assertEquals(1.1, item.getQ1().doubleValue(), EPSILON); [EOL]     assertEquals(1.1, item.getQ3().doubleValue(), EPSILON); [EOL] } <line_num>: 79,100
public void testCalculateQ1() { [EOL]     boolean pass = false; [EOL]     try { [EOL]         BoxAndWhiskerCalculator.calculateQ1(null); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     List values = new ArrayList(); [EOL]     double q1 = BoxAndWhiskerCalculator.calculateQ1(values); [EOL]     assertTrue(Double.isNaN(q1)); [EOL]     values.add(new Double(1.0)); [EOL]     q1 = BoxAndWhiskerCalculator.calculateQ1(values); [EOL]     assertEquals(q1, 1.0, EPSILON); [EOL]     values.add(new Double(2.0)); [EOL]     q1 = BoxAndWhiskerCalculator.calculateQ1(values); [EOL]     assertEquals(q1, 1.0, EPSILON); [EOL]     values.add(new Double(3.0)); [EOL]     q1 = BoxAndWhiskerCalculator.calculateQ1(values); [EOL]     assertEquals(q1, 1.5, EPSILON); [EOL]     values.add(new Double(4.0)); [EOL]     q1 = BoxAndWhiskerCalculator.calculateQ1(values); [EOL]     assertEquals(q1, 1.5, EPSILON); [EOL] } <line_num>: 107,134
public void testCalculateQ3() { [EOL]     boolean pass = false; [EOL]     try { [EOL]         BoxAndWhiskerCalculator.calculateQ3(null); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     List values = new ArrayList(); [EOL]     double q3 = BoxAndWhiskerCalculator.calculateQ3(values); [EOL]     assertTrue(Double.isNaN(q3)); [EOL]     values.add(new Double(1.0)); [EOL]     q3 = BoxAndWhiskerCalculator.calculateQ3(values); [EOL]     assertEquals(q3, 1.0, EPSILON); [EOL]     values.add(new Double(2.0)); [EOL]     q3 = BoxAndWhiskerCalculator.calculateQ3(values); [EOL]     assertEquals(q3, 2.0, EPSILON); [EOL]     values.add(new Double(3.0)); [EOL]     q3 = BoxAndWhiskerCalculator.calculateQ3(values); [EOL]     assertEquals(q3, 2.5, EPSILON); [EOL]     values.add(new Double(4.0)); [EOL]     q3 = BoxAndWhiskerCalculator.calculateQ3(values); [EOL]     assertEquals(q3, 3.5, EPSILON); [EOL] } <line_num>: 139,165
public void test1593149() { [EOL]     ArrayList theList = new ArrayList(5); [EOL]     theList.add(0, new Double(1.0)); [EOL]     theList.add(1, new Double(2.0)); [EOL]     theList.add(2, new Double(Double.NaN)); [EOL]     theList.add(3, new Double(3.0)); [EOL]     theList.add(4, new Double(4.0)); [EOL]     BoxAndWhiskerItem theItem = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics(theList); [EOL]     assertEquals(1.0, theItem.getMinRegularValue().doubleValue(), EPSILON); [EOL]     assertEquals(4.0, theItem.getMaxRegularValue().doubleValue(), EPSILON); [EOL] } <line_num>: 170,181
