public HistogramDatasetTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 78,80
public static Test suite() { [EOL]     return new TestSuite(HistogramDatasetTests.class); [EOL] } <line_num>: 69,71
public void testBins() { [EOL]     double[] values = { 1.0, 2.0, 3.0, 4.0, 6.0, 12.0, 5.0, 6.3, 4.5 }; [EOL]     HistogramDataset hd = new HistogramDataset(); [EOL]     hd.addSeries("Series 1", values, 5); [EOL]     assertEquals(hd.getYValue(0, 0), 3.0, EPSILON); [EOL]     assertEquals(hd.getYValue(0, 1), 3.0, EPSILON); [EOL]     assertEquals(hd.getYValue(0, 2), 2.0, EPSILON); [EOL]     assertEquals(hd.getYValue(0, 3), 0.0, EPSILON); [EOL]     assertEquals(hd.getYValue(0, 4), 1.0, EPSILON); [EOL] } <line_num>: 87,96
public void testEquals() { [EOL]     double[] values = { 1.0, 2.0, 3.0, 4.0, 6.0, 12.0, 5.0, 6.3, 4.5 }; [EOL]     HistogramDataset d1 = new HistogramDataset(); [EOL]     d1.addSeries("Series 1", values, 5); [EOL]     HistogramDataset d2 = new HistogramDataset(); [EOL]     d2.addSeries("Series 1", values, 5); [EOL]     assertTrue(d1.equals(d2)); [EOL]     assertTrue(d2.equals(d1)); [EOL]     d1.addSeries("Series 2", new double[] { 1.0, 2.0, 3.0 }, 2); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.addSeries("Series 2", new double[] { 1.0, 2.0, 3.0 }, 2); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 101,115
public void testCloning() { [EOL]     double[] values = { 1.0, 2.0, 3.0, 4.0, 6.0, 12.0, 5.0, 6.3, 4.5 }; [EOL]     HistogramDataset d1 = new HistogramDataset(); [EOL]     d1.addSeries("Series 1", values, 5); [EOL]     HistogramDataset d2 = null; [EOL]     try { [EOL]         d2 = (HistogramDataset) d1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(d1 != d2); [EOL]     assertTrue(d1.getClass() == d2.getClass()); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1.addSeries("Series 2", new double[] { 1.0, 2.0, 3.0 }, 2); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.addSeries("Series 2", new double[] { 1.0, 2.0, 3.0 }, 2); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 120,140
public void testSerialization() { [EOL]     double[] values = { 1.0, 2.0, 3.0, 4.0, 6.0, 12.0, 5.0, 6.3, 4.5 }; [EOL]     HistogramDataset d1 = new HistogramDataset(); [EOL]     d1.addSeries("Series 1", values, 5); [EOL]     HistogramDataset d2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(d1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         d2 = (HistogramDataset) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(d1, d2); [EOL]     d1.addSeries("Series 2", new double[] { 1.0, 2.0, 3.0 }, 2); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.addSeries("Series 2", new double[] { 1.0, 2.0, 3.0 }, 2); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 145,172
public void testGetSeriesKey() { [EOL]     double[] values = { 1.0, 2.0, 3.0, 4.0, 6.0, 12.0, 5.0, 6.3, 4.5 }; [EOL]     HistogramDataset d1 = new HistogramDataset(); [EOL]     d1.addSeries("Series 1", values, 5); [EOL]     assertEquals("Series 1", d1.getSeriesKey(0)); [EOL] } <line_num>: 178,183
public void testAddSeries() { [EOL]     double[] values = { -1.0, 0.0, 0.1, 0.9, 1.0, 1.1, 1.9, 2.0, 3.0 }; [EOL]     HistogramDataset d = new HistogramDataset(); [EOL]     d.addSeries("S1", values, 2, 0.0, 2.0); [EOL]     assertEquals(0.0, d.getStartXValue(0, 0), EPSILON); [EOL]     assertEquals(1.0, d.getEndXValue(0, 0), EPSILON); [EOL]     assertEquals(4.0, d.getYValue(0, 0), EPSILON); [EOL]     assertEquals(1.0, d.getStartXValue(0, 1), EPSILON); [EOL]     assertEquals(2.0, d.getEndXValue(0, 1), EPSILON); [EOL]     assertEquals(5.0, d.getYValue(0, 1), EPSILON); [EOL] } <line_num>: 188,199
public void testAddSeries2() { [EOL]     double[] values = { 0.0, 1.0, 2.0, 3.0, 4.0, 5.0 }; [EOL]     HistogramDataset hd = new HistogramDataset(); [EOL]     hd.addSeries("S1", values, 5); [EOL]     assertEquals(0.0, hd.getStartXValue(0, 0), EPSILON); [EOL]     assertEquals(1.0, hd.getEndXValue(0, 0), EPSILON); [EOL]     assertEquals(1.0, hd.getYValue(0, 0), EPSILON); [EOL]     assertEquals(1.0, hd.getStartXValue(0, 1), EPSILON); [EOL]     assertEquals(2.0, hd.getEndXValue(0, 1), EPSILON); [EOL]     assertEquals(1.0, hd.getYValue(0, 1), EPSILON); [EOL]     assertEquals(2.0, hd.getStartXValue(0, 2), EPSILON); [EOL]     assertEquals(3.0, hd.getEndXValue(0, 2), EPSILON); [EOL]     assertEquals(1.0, hd.getYValue(0, 2), EPSILON); [EOL]     assertEquals(3.0, hd.getStartXValue(0, 3), EPSILON); [EOL]     assertEquals(4.0, hd.getEndXValue(0, 3), EPSILON); [EOL]     assertEquals(1.0, hd.getYValue(0, 3), EPSILON); [EOL]     assertEquals(4.0, hd.getStartXValue(0, 4), EPSILON); [EOL]     assertEquals(5.0, hd.getEndXValue(0, 4), EPSILON); [EOL]     assertEquals(2.0, hd.getYValue(0, 4), EPSILON); [EOL] } <line_num>: 204,223
public void testBinBoundaries() { [EOL]     double[] values = { -5.000000000000286E-5 }; [EOL]     int bins = 1260; [EOL]     double minimum = -0.06307522528160199; [EOL]     double maximum = 0.06297522528160199; [EOL]     HistogramDataset d = new HistogramDataset(); [EOL]     d.addSeries("S1", values, bins, minimum, maximum); [EOL]     assertEquals(0.0, d.getYValue(0, 629), EPSILON); [EOL]     assertEquals(1.0, d.getYValue(0, 630), EPSILON); [EOL]     assertEquals(0.0, d.getYValue(0, 631), EPSILON); [EOL]     assertTrue(values[0] > d.getStartXValue(0, 630)); [EOL]     assertTrue(values[0] < d.getEndXValue(0, 630)); [EOL] } <line_num>: 228,240
public void test1553088() { [EOL]     double[] values = { -1.0, 0.0, -Double.MIN_VALUE, 3.0 }; [EOL]     HistogramDataset d = new HistogramDataset(); [EOL]     d.addSeries("S1", values, 2, -1.0, 0.0); [EOL]     assertEquals(-1.0, d.getStartXValue(0, 0), EPSILON); [EOL]     assertEquals(-0.5, d.getEndXValue(0, 0), EPSILON); [EOL]     assertEquals(1.0, d.getYValue(0, 0), EPSILON); [EOL]     assertEquals(-0.5, d.getStartXValue(0, 1), EPSILON); [EOL]     assertEquals(0.0, d.getEndXValue(0, 1), EPSILON); [EOL]     assertEquals(3.0, d.getYValue(0, 1), EPSILON); [EOL] } <line_num>: 246,257
