public DefaultMultiValueCategoryDatasetTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 78,80
public static Test suite() { [EOL]     return new TestSuite(DefaultMultiValueCategoryDatasetTests.class); [EOL] } <line_num>: 69,71
public void testGetValue() { [EOL]     DefaultMultiValueCategoryDataset d = new DefaultMultiValueCategoryDataset(); [EOL]     List values = new ArrayList(); [EOL]     values.add(new Integer(1)); [EOL]     values.add(new Integer(2)); [EOL]     d.add(values, "R1", "C1"); [EOL]     assertEquals(new Double(1.5), d.getValue("R1", "C1")); [EOL]     boolean pass = false; [EOL]     try { [EOL]         d.getValue("XX", "C1"); [EOL]     } catch (UnknownKeyException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         d.getValue("R1", "XX"); [EOL]     } catch (UnknownKeyException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 85,110
public void testGetValue2() { [EOL]     DefaultMultiValueCategoryDataset d = new DefaultMultiValueCategoryDataset(); [EOL]     boolean pass = false; [EOL]     try { [EOL]         d.getValue(0, 0); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 115,126
public void testGetRowCount() { [EOL]     DefaultMultiValueCategoryDataset d = new DefaultMultiValueCategoryDataset(); [EOL]     assertTrue(d.getRowCount() == 0); [EOL]     List values = new ArrayList(); [EOL]     d.add(values, "R1", "C1"); [EOL]     assertTrue(d.getRowCount() == 1); [EOL]     d.add(values, "R2", "C1"); [EOL]     assertTrue(d.getRowCount() == 2); [EOL]     d.add(values, "R2", "C1"); [EOL]     assertTrue(d.getRowCount() == 2); [EOL] } <line_num>: 131,144
public void testGetColumnCount() { [EOL]     DefaultMultiValueCategoryDataset d = new DefaultMultiValueCategoryDataset(); [EOL]     assertTrue(d.getColumnCount() == 0); [EOL]     List values = new ArrayList(); [EOL]     d.add(values, "R1", "C1"); [EOL]     assertTrue(d.getColumnCount() == 1); [EOL]     d.add(values, "R1", "C2"); [EOL]     assertTrue(d.getColumnCount() == 2); [EOL]     d.add(values, "R1", "C2"); [EOL]     assertTrue(d.getColumnCount() == 2); [EOL] } <line_num>: 149,164
public void testEquals() { [EOL]     DefaultMultiValueCategoryDataset d1 = new DefaultMultiValueCategoryDataset(); [EOL]     DefaultMultiValueCategoryDataset d2 = new DefaultMultiValueCategoryDataset(); [EOL]     assertTrue(d1.equals(d2)); [EOL]     assertTrue(d2.equals(d1)); [EOL]     List values = new ArrayList(); [EOL]     d1.add(values, "R1", "C1"); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.add(values, "R1", "C1"); [EOL]     assertTrue(d1.equals(d2)); [EOL]     values.add(new Integer(99)); [EOL]     d1.add(values, "R1", "C1"); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.add(values, "R1", "C1"); [EOL]     assertTrue(d1.equals(d2)); [EOL]     values.add(new Integer(99)); [EOL]     d1.add(values, "R1", "C2"); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.add(values, "R1", "C2"); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 169,194
public void testSerialization() { [EOL]     DefaultMultiValueCategoryDataset d1 = new DefaultMultiValueCategoryDataset(); [EOL]     DefaultMultiValueCategoryDataset d2 = new DefaultMultiValueCategoryDataset(); [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(d1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         d2 = (DefaultMultiValueCategoryDataset) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(d1, d2); [EOL] } <line_num>: 199,222
public void testAddValue() { [EOL]     DefaultMultiValueCategoryDataset d1 = new DefaultMultiValueCategoryDataset(); [EOL]     boolean pass = false; [EOL]     try { [EOL]         d1.add(null, "R1", "C1"); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     List values = new ArrayList(); [EOL]     d1.add(values, "R2", "C1"); [EOL]     assertEquals(values, d1.getValues("R2", "C1")); [EOL]     pass = false; [EOL]     try { [EOL]         d1.add(values, null, "C2"); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 227,252
public void testCloning() { [EOL]     DefaultMultiValueCategoryDataset d1 = new DefaultMultiValueCategoryDataset(); [EOL]     DefaultMultiValueCategoryDataset d2 = null; [EOL]     try { [EOL]         d2 = (DefaultMultiValueCategoryDataset) d1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(d1 != d2); [EOL]     assertTrue(d1.getClass() == d2.getClass()); [EOL]     assertTrue(d1.equals(d2)); [EOL]     List values = new ArrayList(); [EOL]     values.add(new Integer(99)); [EOL]     d1.add(values, "R1", "C1"); [EOL]     try { [EOL]         d2 = (DefaultMultiValueCategoryDataset) d1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(d1 != d2); [EOL]     assertTrue(d1.getClass() == d2.getClass()); [EOL]     assertTrue(d1.equals(d2)); [EOL]     List values2 = new ArrayList(); [EOL]     values2.add(new Integer(111)); [EOL]     d1.add(values2, "R2", "C2"); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.add(values2, "R2", "C2"); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 257,292
