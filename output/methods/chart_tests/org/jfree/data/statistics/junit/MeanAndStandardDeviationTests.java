public MeanAndStandardDeviationTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 75,77
public static Test suite() { [EOL]     return new TestSuite(MeanAndStandardDeviationTests.class); [EOL] } <line_num>: 66,68
public void testEquals() { [EOL]     MeanAndStandardDeviation m1 = new MeanAndStandardDeviation(1.2, 3.4); [EOL]     MeanAndStandardDeviation m2 = new MeanAndStandardDeviation(1.2, 3.4); [EOL]     assertTrue(m1.equals(m2)); [EOL]     assertTrue(m2.equals(m1)); [EOL]     m1 = new MeanAndStandardDeviation(1.0, 3.4); [EOL]     assertFalse(m1.equals(m2)); [EOL]     m2 = new MeanAndStandardDeviation(1.0, 3.4); [EOL]     assertTrue(m1.equals(m2)); [EOL]     m1 = new MeanAndStandardDeviation(1.0, 3.0); [EOL]     assertFalse(m1.equals(m2)); [EOL]     m2 = new MeanAndStandardDeviation(1.0, 3.0); [EOL]     assertTrue(m1.equals(m2)); [EOL] } <line_num>: 82,97
public void testCloning() { [EOL]     MeanAndStandardDeviation m1 = new MeanAndStandardDeviation(1.2, 3.4); [EOL]     assertFalse(m1 instanceof Cloneable); [EOL] } <line_num>: 102,105
public void testSerialization() { [EOL]     MeanAndStandardDeviation m1 = new MeanAndStandardDeviation(1.2, 3.4); [EOL]     MeanAndStandardDeviation m2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(m1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         m2 = (MeanAndStandardDeviation) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         System.out.println(e.toString()); [EOL]     } [EOL]     assertEquals(m1, m2); [EOL] } <line_num>: 110,131
