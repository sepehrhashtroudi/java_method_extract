public DefaultBoxAndWhiskerCategoryDatasetTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 83,85
public static Test suite() { [EOL]     return new TestSuite(DefaultBoxAndWhiskerCategoryDatasetTests.class); [EOL] } <line_num>: 74,76
public void testEquals() { [EOL]     DefaultBoxAndWhiskerCategoryDataset d1 = new DefaultBoxAndWhiskerCategoryDataset(); [EOL]     d1.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0), new Double(3.0), new Double(4.0), new Double(5.0), new Double(6.0), new Double(7.0), new Double(8.0), new ArrayList()), "ROW1", "COLUMN1"); [EOL]     DefaultBoxAndWhiskerCategoryDataset d2 = new DefaultBoxAndWhiskerCategoryDataset(); [EOL]     d2.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0), new Double(3.0), new Double(4.0), new Double(5.0), new Double(6.0), new Double(7.0), new Double(8.0), new ArrayList()), "ROW1", "COLUMN1"); [EOL]     assertTrue(d1.equals(d2)); [EOL]     assertTrue(d2.equals(d1)); [EOL] } <line_num>: 90,105
public void testSerialization() { [EOL]     DefaultBoxAndWhiskerCategoryDataset d1 = new DefaultBoxAndWhiskerCategoryDataset(); [EOL]     d1.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0), new Double(3.0), new Double(4.0), new Double(5.0), new Double(6.0), new Double(7.0), new Double(8.0), new ArrayList()), "ROW1", "COLUMN1"); [EOL]     DefaultBoxAndWhiskerCategoryDataset d2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(d1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         d2 = (DefaultBoxAndWhiskerCategoryDataset) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(d1, d2); [EOL] } <line_num>: 110,136
public void testCloning() { [EOL]     DefaultBoxAndWhiskerCategoryDataset d1 = new DefaultBoxAndWhiskerCategoryDataset(); [EOL]     d1.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0), new Double(3.0), new Double(4.0), new Double(5.0), new Double(6.0), new Double(7.0), new Double(8.0), new ArrayList()), "ROW1", "COLUMN1"); [EOL]     DefaultBoxAndWhiskerCategoryDataset d2 = null; [EOL]     try { [EOL]         d2 = (DefaultBoxAndWhiskerCategoryDataset) d1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(d1 != d2); [EOL]     assertTrue(d1.getClass() == d2.getClass()); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0), new Double(3.0), new Double(4.0), new Double(5.0), new Double(6.0), new Double(7.0), new Double(8.0), new ArrayList()), "ROW2", "COLUMN1"); [EOL]     assertFalse(d1.equals(d2)); [EOL] } <line_num>: 141,165
public void test1701822() { [EOL]     DefaultBoxAndWhiskerCategoryDataset dataset = new DefaultBoxAndWhiskerCategoryDataset(); [EOL]     try { [EOL]         dataset.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0), new Double(3.0), new Double(4.0), new Double(5.0), new Double(6.0), null, new Double(8.0), new ArrayList()), "ROW1", "COLUMN1"); [EOL]         dataset.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0), new Double(3.0), new Double(4.0), new Double(5.0), new Double(6.0), new Double(7.0), null, new ArrayList()), "ROW1", "COLUMN2"); [EOL]     } catch (NullPointerException e) { [EOL]         assertTrue(false); [EOL]     } [EOL] } <line_num>: 170,187
public void testAdd() { [EOL]     DefaultBoxAndWhiskerCategoryDataset dataset = new DefaultBoxAndWhiskerCategoryDataset(); [EOL]     BoxAndWhiskerItem item1 = new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, new ArrayList()); [EOL]     dataset.add(item1, "R1", "C1"); [EOL]     assertEquals(2.0, dataset.getValue("R1", "C1").doubleValue(), EPSILON); [EOL]     assertEquals(1.0, dataset.getMeanValue("R1", "C1").doubleValue(), EPSILON); [EOL]     assertEquals(2.0, dataset.getMedianValue("R1", "C1").doubleValue(), EPSILON); [EOL]     assertEquals(3.0, dataset.getQ1Value("R1", "C1").doubleValue(), EPSILON); [EOL]     assertEquals(4.0, dataset.getQ3Value("R1", "C1").doubleValue(), EPSILON); [EOL]     assertEquals(5.0, dataset.getMinRegularValue("R1", "C1").doubleValue(), EPSILON); [EOL]     assertEquals(6.0, dataset.getMaxRegularValue("R1", "C1").doubleValue(), EPSILON); [EOL]     assertEquals(7.0, dataset.getMinOutlier("R1", "C1").doubleValue(), EPSILON); [EOL]     assertEquals(8.0, dataset.getMaxOutlier("R1", "C1").doubleValue(), EPSILON); [EOL]     assertEquals(new Range(7.0, 8.0), dataset.getRangeBounds(false)); [EOL] } <line_num>: 194,219
public void testAddUpdatesCachedRange() { [EOL]     DefaultBoxAndWhiskerCategoryDataset dataset = new DefaultBoxAndWhiskerCategoryDataset(); [EOL]     BoxAndWhiskerItem item1 = new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, new ArrayList()); [EOL]     dataset.add(item1, "R1", "C1"); [EOL]     BoxAndWhiskerItem item2 = new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, new ArrayList()); [EOL]     dataset.add(item2, "R1", "C1"); [EOL]     assertEquals(2.5, dataset.getValue("R1", "C1").doubleValue(), EPSILON); [EOL]     assertEquals(1.5, dataset.getMeanValue("R1", "C1").doubleValue(), EPSILON); [EOL]     assertEquals(2.5, dataset.getMedianValue("R1", "C1").doubleValue(), EPSILON); [EOL]     assertEquals(3.5, dataset.getQ1Value("R1", "C1").doubleValue(), EPSILON); [EOL]     assertEquals(4.5, dataset.getQ3Value("R1", "C1").doubleValue(), EPSILON); [EOL]     assertEquals(5.5, dataset.getMinRegularValue("R1", "C1").doubleValue(), EPSILON); [EOL]     assertEquals(6.5, dataset.getMaxRegularValue("R1", "C1").doubleValue(), EPSILON); [EOL]     assertEquals(7.5, dataset.getMinOutlier("R1", "C1").doubleValue(), EPSILON); [EOL]     assertEquals(8.5, dataset.getMaxOutlier("R1", "C1").doubleValue(), EPSILON); [EOL]     assertEquals(new Range(7.5, 8.5), dataset.getRangeBounds(false)); [EOL] } <line_num>: 224,254
public void testConstructor() { [EOL]     DefaultBoxAndWhiskerCategoryDataset dataset = new DefaultBoxAndWhiskerCategoryDataset(); [EOL]     assertEquals(0, dataset.getColumnCount()); [EOL]     assertEquals(0, dataset.getRowCount()); [EOL]     assertTrue(Double.isNaN(dataset.getRangeLowerBound(false))); [EOL]     assertTrue(Double.isNaN(dataset.getRangeUpperBound(false))); [EOL] } <line_num>: 259,266
public void testGetRangeBounds() { [EOL]     DefaultBoxAndWhiskerCategoryDataset d1 = new DefaultBoxAndWhiskerCategoryDataset(); [EOL]     d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, new ArrayList()), "R1", "C1"); [EOL]     assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false)); [EOL]     assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true)); [EOL]     d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, new ArrayList()), "R1", "C1"); [EOL]     assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false)); [EOL]     assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true)); [EOL]     d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, new ArrayList()), "R2", "C1"); [EOL]     assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false)); [EOL]     assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true)); [EOL]     d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, new ArrayList()), "R1", "C1"); [EOL]     assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false)); [EOL]     assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true)); [EOL] } <line_num>: 271,295
public void testRemove() { [EOL]     DefaultBoxAndWhiskerCategoryDataset data = new DefaultBoxAndWhiskerCategoryDataset(); [EOL]     boolean pass = false; [EOL]     try { [EOL]         data.remove("R1", "R2"); [EOL]     } catch (UnknownKeyException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     data.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, new ArrayList()), "R1", "C1"); [EOL]     assertEquals(new Range(7.0, 8.0), data.getRangeBounds(false)); [EOL]     assertEquals(new Range(7.0, 8.0), data.getRangeBounds(true)); [EOL]     data.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, new ArrayList()), "R2", "C1"); [EOL]     assertEquals(new Range(7.0, 9.5), data.getRangeBounds(false)); [EOL]     assertEquals(new Range(7.0, 9.5), data.getRangeBounds(true)); [EOL]     data.remove("R1", "C1"); [EOL]     assertEquals(new Range(8.5, 9.5), data.getRangeBounds(false)); [EOL]     assertEquals(new Range(8.5, 9.5), data.getRangeBounds(true)); [EOL] } <line_num>: 300,325
