public DefaultCategoryDatasetTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 80,82
public static Test suite() { [EOL]     return new TestSuite(DefaultCategoryDatasetTests.class); [EOL] } <line_num>: 71,73
public void testGetValue() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     d.addValue(1.0, "R1", "C1"); [EOL]     assertEquals(new Double(1.0), d.getValue("R1", "C1")); [EOL]     boolean pass = false; [EOL]     try { [EOL]         d.getValue("XX", "C1"); [EOL]     } catch (UnknownKeyException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         d.getValue("R1", "XX"); [EOL]     } catch (UnknownKeyException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 87,108
public void testGetValue2() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     boolean pass = false; [EOL]     try { [EOL]         d.getValue(0, 0); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 113,123
public void testIncrementValue() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     d.addValue(1.0, "R1", "C1"); [EOL]     d.incrementValue(2.0, "R1", "C1"); [EOL]     assertEquals(new Double(3.0), d.getValue("R1", "C1")); [EOL]     d.addValue(null, "R2", "C1"); [EOL]     d.incrementValue(2.0, "R2", "C1"); [EOL]     assertEquals(new Double(2.0), d.getValue("R2", "C1")); [EOL]     boolean pass = false; [EOL]     try { [EOL]         d.incrementValue(1.0, "XX", "C1"); [EOL]     } catch (UnknownKeyException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         d.incrementValue(1.0, "R1", "XX"); [EOL]     } catch (UnknownKeyException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 128,158
public void testGetRowCount() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     assertTrue(d.getRowCount() == 0); [EOL]     d.addValue(1.0, "R1", "C1"); [EOL]     assertTrue(d.getRowCount() == 1); [EOL]     d.addValue(1.0, "R2", "C1"); [EOL]     assertTrue(d.getRowCount() == 2); [EOL]     d.addValue(2.0, "R2", "C1"); [EOL]     assertTrue(d.getRowCount() == 2); [EOL]     d.setValue(null, "R2", "C1"); [EOL]     assertTrue(d.getRowCount() == 2); [EOL] } <line_num>: 163,179
public void testGetColumnCount() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     assertTrue(d.getColumnCount() == 0); [EOL]     d.addValue(1.0, "R1", "C1"); [EOL]     assertTrue(d.getColumnCount() == 1); [EOL]     d.addValue(1.0, "R1", "C2"); [EOL]     assertTrue(d.getColumnCount() == 2); [EOL]     d.addValue(2.0, "R1", "C2"); [EOL]     assertTrue(d.getColumnCount() == 2); [EOL]     d.setValue(null, "R1", "C2"); [EOL]     assertTrue(d.getColumnCount() == 2); [EOL] } <line_num>: 184,200
public void testEquals() { [EOL]     DefaultCategoryDataset d1 = new DefaultCategoryDataset(); [EOL]     d1.setValue(23.4, "R1", "C1"); [EOL]     DefaultCategoryDataset d2 = new DefaultCategoryDataset(); [EOL]     d2.setValue(23.4, "R1", "C1"); [EOL]     assertTrue(d1.equals(d2)); [EOL]     assertTrue(d2.equals(d1)); [EOL]     d1.setValue(36.5, "R1", "C2"); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.setValue(36.5, "R1", "C2"); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1.setValue(null, "R1", "C1"); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.setValue(null, "R1", "C1"); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 205,222
public void testSerialization() { [EOL]     DefaultCategoryDataset d1 = new DefaultCategoryDataset(); [EOL]     d1.setValue(23.4, "R1", "C1"); [EOL]     DefaultCategoryDataset d2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(d1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         d2 = (DefaultCategoryDataset) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(d1, d2); [EOL] } <line_num>: 227,249
public void testAddValue() { [EOL]     DefaultCategoryDataset d1 = new DefaultCategoryDataset(); [EOL]     d1.addValue(null, "R1", "C1"); [EOL]     assertNull(d1.getValue("R1", "C1")); [EOL]     d1.addValue(new Double(1.0), "R2", "C1"); [EOL]     assertEquals(new Double(1.0), d1.getValue("R2", "C1")); [EOL]     boolean pass = false; [EOL]     try { [EOL]         d1.addValue(new Double(1.1), null, "C2"); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 254,269
public void testRemoveValue() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     boolean pass = false; [EOL]     try { [EOL]         d.removeValue("R1", "C1"); [EOL]     } catch (UnknownKeyException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     d.addValue(new Double(1.0), "R1", "C1"); [EOL]     d.removeValue("R1", "C1"); [EOL]     assertEquals(0, d.getRowCount()); [EOL]     assertEquals(0, d.getColumnCount()); [EOL]     d.addValue(new Double(1.0), "R1", "C1"); [EOL]     d.addValue(new Double(2.0), "R2", "C1"); [EOL]     d.removeValue("R1", "C1"); [EOL]     assertEquals(new Double(2.0), d.getValue(0, 0)); [EOL]     pass = false; [EOL]     try { [EOL]         d.removeValue(null, "C1"); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         d.removeValue("R1", null); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 274,314
public void testCloning() { [EOL]     DefaultCategoryDataset d1 = new DefaultCategoryDataset(); [EOL]     DefaultCategoryDataset d2 = null; [EOL]     try { [EOL]         d2 = (DefaultCategoryDataset) d1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(d1 != d2); [EOL]     assertTrue(d1.getClass() == d2.getClass()); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1.addValue(1.0, "R1", "C1"); [EOL]     d1.addValue(2.0, "R1", "C2"); [EOL]     try { [EOL]         d2 = (DefaultCategoryDataset) d1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(d1 != d2); [EOL]     assertTrue(d1.getClass() == d2.getClass()); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1.addValue(3.0, "R1", "C1"); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.addValue(3.0, "R1", "C1"); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 319,350
public void testPublicCloneable() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     assertTrue(d instanceof PublicCloneable); [EOL] } <line_num>: 355,358
public void testBug1835955() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     d.addValue(1.0, "R1", "C1"); [EOL]     d.addValue(2.0, "R2", "C2"); [EOL]     d.removeColumn("C2"); [EOL]     d.addValue(3.0, "R2", "C2"); [EOL]     assertEquals(3.0, d.getValue("R2", "C2").doubleValue(), EPSILON); [EOL] } <line_num>: 365,372
public void testRemoveColumn() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     d.addValue(1.0, "R1", "C1"); [EOL]     d.addValue(2.0, "R2", "C2"); [EOL]     assertEquals(2, d.getColumnCount()); [EOL]     d.removeColumn("C2"); [EOL]     assertEquals(1, d.getColumnCount()); [EOL]     boolean pass = false; [EOL]     try { [EOL]         d.removeColumn("XXX"); [EOL]     } catch (UnknownKeyException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         d.removeColumn(null); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 377,402
public void testRemoveRow() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     d.addValue(1.0, "R1", "C1"); [EOL]     d.addValue(2.0, "R2", "C2"); [EOL]     assertEquals(2, d.getRowCount()); [EOL]     d.removeRow("R2"); [EOL]     assertEquals(1, d.getRowCount()); [EOL]     boolean pass = false; [EOL]     try { [EOL]         d.removeRow("XXX"); [EOL]     } catch (UnknownKeyException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         d.removeRow(null); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 407,432
