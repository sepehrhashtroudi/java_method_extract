public CategoryToPieDatasetTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 80,82
public static Test suite() { [EOL]     return new TestSuite(CategoryToPieDatasetTests.class); [EOL] } <line_num>: 71,73
public void testConstructor() { [EOL]     CategoryToPieDataset p1 = new CategoryToPieDataset(null, TableOrder.BY_COLUMN, 0); [EOL]     assertNull(p1.getUnderlyingDataset()); [EOL]     assertEquals(p1.getItemCount(), 0); [EOL]     assertTrue(p1.getKeys().isEmpty()); [EOL]     assertNull(p1.getValue("R1")); [EOL] } <line_num>: 87,95
public void testGetValue() { [EOL]     DefaultCategoryDataset underlying = new DefaultCategoryDataset(); [EOL]     underlying.addValue(1.1, "R1", "C1"); [EOL]     underlying.addValue(2.2, "R1", "C2"); [EOL]     CategoryToPieDataset d1 = new CategoryToPieDataset(underlying, TableOrder.BY_ROW, 0); [EOL]     assertEquals(d1.getValue("C1"), new Double(1.1)); [EOL]     assertEquals(d1.getValue("C2"), new Double(2.2)); [EOL]     try { [EOL]         d1.getValue(-1); [EOL]         fail("Expected IndexOutOfBoundsException."); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         d1.getValue(d1.getItemCount()); [EOL]         fail("Expected IndexOutOfBoundsException."); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]     } [EOL]     CategoryToPieDataset p1 = new CategoryToPieDataset(null, TableOrder.BY_COLUMN, 0); [EOL]     try { [EOL]         p1.getValue(0); [EOL]         fail("Expected IndexOutOfBoundsException."); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 100,137
public void testGetKey() { [EOL]     DefaultCategoryDataset underlying = new DefaultCategoryDataset(); [EOL]     underlying.addValue(1.1, "R1", "C1"); [EOL]     underlying.addValue(2.2, "R1", "C2"); [EOL]     CategoryToPieDataset d1 = new CategoryToPieDataset(underlying, TableOrder.BY_ROW, 0); [EOL]     assertEquals(d1.getKey(0), "C1"); [EOL]     assertEquals(d1.getKey(1), "C2"); [EOL]     try { [EOL]         d1.getKey(-1); [EOL]         fail("Expected IndexOutOfBoundsException."); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         d1.getKey(d1.getItemCount()); [EOL]         fail("Expected IndexOutOfBoundsException."); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]     } [EOL]     CategoryToPieDataset p1 = new CategoryToPieDataset(null, TableOrder.BY_COLUMN, 0); [EOL]     try { [EOL]         p1.getKey(0); [EOL]         fail("Expected IndexOutOfBoundsException."); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 142,179
public void testGetIndex() { [EOL]     DefaultCategoryDataset underlying = new DefaultCategoryDataset(); [EOL]     underlying.addValue(1.1, "R1", "C1"); [EOL]     underlying.addValue(2.2, "R1", "C2"); [EOL]     CategoryToPieDataset d1 = new CategoryToPieDataset(underlying, TableOrder.BY_ROW, 0); [EOL]     assertEquals(0, d1.getIndex("C1")); [EOL]     assertEquals(1, d1.getIndex("C2")); [EOL]     assertEquals(-1, d1.getIndex("XX")); [EOL]     boolean pass = false; [EOL]     try { [EOL]         d1.getIndex(null); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 184,203
public void testEquals() { [EOL]     DefaultCategoryDataset underlying = new DefaultCategoryDataset(); [EOL]     underlying.addValue(1.1, "R1", "C1"); [EOL]     underlying.addValue(2.2, "R1", "C2"); [EOL]     CategoryToPieDataset d1 = new CategoryToPieDataset(underlying, TableOrder.BY_COLUMN, 1); [EOL]     DefaultPieDataset d2 = new DefaultPieDataset(); [EOL]     d2.setValue("R1", 2.2); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 208,217
public void testSerialization() { [EOL]     DefaultCategoryDataset underlying = new DefaultCategoryDataset(); [EOL]     underlying.addValue(1.1, "R1", "C1"); [EOL]     underlying.addValue(2.2, "R1", "C2"); [EOL]     CategoryToPieDataset d1 = new CategoryToPieDataset(underlying, TableOrder.BY_COLUMN, 1); [EOL]     CategoryToPieDataset d2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(d1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         d2 = (CategoryToPieDataset) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(d1, d2); [EOL]     assertEquals(d1.getUnderlyingDataset(), d2.getUnderlyingDataset()); [EOL]     assertEquals(d1.getExtractType(), d2.getExtractType()); [EOL]     assertEquals(d1.getExtractIndex(), d2.getExtractIndex()); [EOL] } <line_num>: 222,252
