public SlidingCategoryDatasetTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 79,81
public static Test suite() { [EOL]     return new TestSuite(SlidingCategoryDatasetTests.class); [EOL] } <line_num>: 70,72
public void testEquals() { [EOL]     DefaultCategoryDataset u1 = new DefaultCategoryDataset(); [EOL]     u1.addValue(1.0, "R1", "C1"); [EOL]     u1.addValue(2.0, "R1", "C2"); [EOL]     SlidingCategoryDataset d1 = new SlidingCategoryDataset(u1, 0, 5); [EOL]     DefaultCategoryDataset u2 = new DefaultCategoryDataset(); [EOL]     u2.addValue(1.0, "R1", "C1"); [EOL]     u2.addValue(2.0, "R1", "C2"); [EOL]     SlidingCategoryDataset d2 = new SlidingCategoryDataset(u2, 0, 5); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1.setFirstCategoryIndex(1); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.setFirstCategoryIndex(1); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1.setMaximumCategoryCount(99); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.setMaximumCategoryCount(99); [EOL]     assertTrue(d1.equals(d2)); [EOL]     u1.addValue(3.0, "R1", "C3"); [EOL]     assertFalse(d1.equals(d2)); [EOL]     u2.addValue(3.0, "R1", "C3"); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 86,111
public void testCloning() { [EOL]     DefaultCategoryDataset u1 = new DefaultCategoryDataset(); [EOL]     u1.addValue(1.0, "R1", "C1"); [EOL]     u1.addValue(2.0, "R1", "C2"); [EOL]     SlidingCategoryDataset d1 = new SlidingCategoryDataset(u1, 0, 5); [EOL]     SlidingCategoryDataset d2 = null; [EOL]     try { [EOL]         d2 = (SlidingCategoryDataset) d1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(d1 != d2); [EOL]     assertTrue(d1.getClass() == d2.getClass()); [EOL]     assertTrue(d1.equals(d2)); [EOL]     u1.addValue(3.0, "R1", "C3"); [EOL]     assertFalse(d1.equals(d2)); [EOL]     DefaultCategoryDataset u2 = (DefaultCategoryDataset) d2.getUnderlyingDataset(); [EOL]     u2.addValue(3.0, "R1", "C3"); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 116,139
public void testSerialization() { [EOL]     DefaultCategoryDataset u1 = new DefaultCategoryDataset(); [EOL]     u1.addValue(1.0, "R1", "C1"); [EOL]     u1.addValue(2.0, "R1", "C2"); [EOL]     SlidingCategoryDataset d1 = new SlidingCategoryDataset(u1, 0, 5); [EOL]     SlidingCategoryDataset d2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(d1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         d2 = (SlidingCategoryDataset) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(d1, d2); [EOL]     u1.addValue(3.0, "R1", "C3"); [EOL]     assertFalse(d1.equals(d2)); [EOL]     DefaultCategoryDataset u2 = (DefaultCategoryDataset) d2.getUnderlyingDataset(); [EOL]     u2.addValue(3.0, "R1", "C3"); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 144,173
public void testGetColumnCount() { [EOL]     DefaultCategoryDataset underlying = new DefaultCategoryDataset(); [EOL]     SlidingCategoryDataset dataset = new SlidingCategoryDataset(underlying, 10, 2); [EOL]     assertEquals(0, dataset.getColumnCount()); [EOL]     underlying.addValue(1.0, "R1", "C1"); [EOL]     assertEquals(0, dataset.getColumnCount()); [EOL]     underlying.addValue(1.0, "R1", "C2"); [EOL]     assertEquals(0, dataset.getColumnCount()); [EOL]     dataset.setFirstCategoryIndex(0); [EOL]     assertEquals(2, dataset.getColumnCount()); [EOL]     underlying.addValue(1.0, "R1", "C3"); [EOL]     assertEquals(2, dataset.getColumnCount()); [EOL]     dataset.setFirstCategoryIndex(2); [EOL]     assertEquals(1, dataset.getColumnCount()); [EOL]     underlying.clear(); [EOL]     assertEquals(0, dataset.getColumnCount()); [EOL] } <line_num>: 178,195
public void testGetRowCount() { [EOL]     DefaultCategoryDataset underlying = new DefaultCategoryDataset(); [EOL]     SlidingCategoryDataset dataset = new SlidingCategoryDataset(underlying, 10, 5); [EOL]     assertEquals(0, dataset.getRowCount()); [EOL]     underlying.addValue(1.0, "R1", "C1"); [EOL]     assertEquals(1, dataset.getRowCount()); [EOL]     underlying.clear(); [EOL]     assertEquals(0, dataset.getRowCount()); [EOL] } <line_num>: 200,210
public void testGetColumnIndex() { [EOL]     DefaultCategoryDataset underlying = new DefaultCategoryDataset(); [EOL]     underlying.addValue(1.0, "R1", "C1"); [EOL]     underlying.addValue(2.0, "R1", "C2"); [EOL]     underlying.addValue(3.0, "R1", "C3"); [EOL]     underlying.addValue(4.0, "R1", "C4"); [EOL]     SlidingCategoryDataset dataset = new SlidingCategoryDataset(underlying, 1, 2); [EOL]     assertEquals(-1, dataset.getColumnIndex("C1")); [EOL]     assertEquals(0, dataset.getColumnIndex("C2")); [EOL]     assertEquals(1, dataset.getColumnIndex("C3")); [EOL]     assertEquals(-1, dataset.getColumnIndex("C4")); [EOL] } <line_num>: 215,227
public void testGetRowIndex() { [EOL]     DefaultCategoryDataset underlying = new DefaultCategoryDataset(); [EOL]     underlying.addValue(1.0, "R1", "C1"); [EOL]     underlying.addValue(2.0, "R2", "C1"); [EOL]     underlying.addValue(3.0, "R3", "C1"); [EOL]     underlying.addValue(4.0, "R4", "C1"); [EOL]     SlidingCategoryDataset dataset = new SlidingCategoryDataset(underlying, 1, 2); [EOL]     assertEquals(0, dataset.getRowIndex("R1")); [EOL]     assertEquals(1, dataset.getRowIndex("R2")); [EOL]     assertEquals(2, dataset.getRowIndex("R3")); [EOL]     assertEquals(3, dataset.getRowIndex("R4")); [EOL] } <line_num>: 232,244
public void testGetValue() { [EOL]     DefaultCategoryDataset underlying = new DefaultCategoryDataset(); [EOL]     underlying.addValue(1.0, "R1", "C1"); [EOL]     underlying.addValue(2.0, "R1", "C2"); [EOL]     underlying.addValue(3.0, "R1", "C3"); [EOL]     underlying.addValue(4.0, "R1", "C4"); [EOL]     SlidingCategoryDataset dataset = new SlidingCategoryDataset(underlying, 1, 2); [EOL]     assertEquals(new Double(2.0), dataset.getValue("R1", "C2")); [EOL]     assertEquals(new Double(3.0), dataset.getValue("R1", "C3")); [EOL]     boolean pass = false; [EOL]     try { [EOL]         dataset.getValue("R1", "C1"); [EOL]     } catch (UnknownKeyException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         dataset.getValue("R1", "C4"); [EOL]     } catch (UnknownKeyException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 249,276
public void testGetColumnKeys() { [EOL]     DefaultCategoryDataset underlying = new DefaultCategoryDataset(); [EOL]     underlying.addValue(1.0, "R1", "C1"); [EOL]     underlying.addValue(2.0, "R1", "C2"); [EOL]     underlying.addValue(3.0, "R1", "C3"); [EOL]     underlying.addValue(4.0, "R1", "C4"); [EOL]     SlidingCategoryDataset dataset = new SlidingCategoryDataset(underlying, 1, 2); [EOL]     List keys = dataset.getColumnKeys(); [EOL]     assertTrue(keys.contains("C2")); [EOL]     assertTrue(keys.contains("C3")); [EOL]     assertEquals(2, keys.size()); [EOL]     dataset.setFirstCategoryIndex(3); [EOL]     keys = dataset.getColumnKeys(); [EOL]     assertTrue(keys.contains("C4")); [EOL]     assertEquals(1, keys.size()); [EOL] } <line_num>: 281,298
