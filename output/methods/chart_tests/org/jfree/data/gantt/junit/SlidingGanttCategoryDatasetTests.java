public SlidingGanttCategoryDatasetTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 79,81
public static Test suite() { [EOL]     return new TestSuite(SlidingGanttCategoryDatasetTests.class); [EOL] } <line_num>: 70,72
public void testEquals() { [EOL]     TaskSeries s1 = new TaskSeries("Series"); [EOL]     s1.add(new Task("Task 1", new Date(0L), new Date(1L))); [EOL]     s1.add(new Task("Task 2", new Date(10L), new Date(11L))); [EOL]     s1.add(new Task("Task 3", new Date(20L), new Date(21L))); [EOL]     TaskSeriesCollection u1 = new TaskSeriesCollection(); [EOL]     u1.add(s1); [EOL]     SlidingGanttCategoryDataset d1 = new SlidingGanttCategoryDataset(u1, 0, 5); [EOL]     TaskSeries s2 = new TaskSeries("Series"); [EOL]     s2.add(new Task("Task 1", new Date(0L), new Date(1L))); [EOL]     s2.add(new Task("Task 2", new Date(10L), new Date(11L))); [EOL]     s2.add(new Task("Task 3", new Date(20L), new Date(21L))); [EOL]     TaskSeriesCollection u2 = new TaskSeriesCollection(); [EOL]     u2.add(s2); [EOL]     SlidingGanttCategoryDataset d2 = new SlidingGanttCategoryDataset(u2, 0, 5); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1.setFirstCategoryIndex(1); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.setFirstCategoryIndex(1); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1.setMaximumCategoryCount(99); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.setMaximumCategoryCount(99); [EOL]     assertTrue(d1.equals(d2)); [EOL]     s1.add(new Task("Task 2", new Date(10L), new Date(11L))); [EOL]     assertFalse(d1.equals(d2)); [EOL]     s2.add(new Task("Task 2", new Date(10L), new Date(11L))); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 86,119
public void testCloning() { [EOL]     TaskSeries s1 = new TaskSeries("Series"); [EOL]     s1.add(new Task("Task 1", new Date(0L), new Date(1L))); [EOL]     TaskSeriesCollection u1 = new TaskSeriesCollection(); [EOL]     u1.add(s1); [EOL]     SlidingGanttCategoryDataset d1 = new SlidingGanttCategoryDataset(u1, 0, 5); [EOL]     SlidingGanttCategoryDataset d2 = null; [EOL]     try { [EOL]         d2 = (SlidingGanttCategoryDataset) d1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(d1 != d2); [EOL]     assertTrue(d1.getClass() == d2.getClass()); [EOL]     assertTrue(d1.equals(d2)); [EOL]     s1.add(new Task("Task 2", new Date(10L), new Date(11L))); [EOL]     assertFalse(d1.equals(d2)); [EOL]     TaskSeriesCollection u2 = (TaskSeriesCollection) d2.getUnderlyingDataset(); [EOL]     TaskSeries s2 = u2.getSeries("Series"); [EOL]     s2.add(new Task("Task 2", new Date(10L), new Date(11L))); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 124,150
public void testSerialization() { [EOL]     TaskSeries s1 = new TaskSeries("Series"); [EOL]     s1.add(new Task("Task 1", new Date(0L), new Date(1L))); [EOL]     TaskSeriesCollection u1 = new TaskSeriesCollection(); [EOL]     u1.add(s1); [EOL]     SlidingGanttCategoryDataset d1 = new SlidingGanttCategoryDataset(u1, 0, 5); [EOL]     SlidingGanttCategoryDataset d2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(d1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         d2 = (SlidingGanttCategoryDataset) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(d1, d2); [EOL]     s1.add(new Task("Task 2", new Date(10L), new Date(11L))); [EOL]     assertFalse(d1.equals(d2)); [EOL]     TaskSeriesCollection u2 = (TaskSeriesCollection) d2.getUnderlyingDataset(); [EOL]     TaskSeries s2 = u2.getSeries("Series"); [EOL]     s2.add(new Task("Task 2", new Date(10L), new Date(11L))); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 155,187
