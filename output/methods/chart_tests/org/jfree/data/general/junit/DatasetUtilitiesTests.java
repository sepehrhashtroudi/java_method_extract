public DatasetUtilitiesTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 112,114
public static Test suite() { [EOL]     return new TestSuite(DatasetUtilitiesTests.class); [EOL] } <line_num>: 103,105
public void testJava() { [EOL]     assertTrue(Double.isNaN(Math.min(1.0, Double.NaN))); [EOL]     assertTrue(Double.isNaN(Math.max(1.0, Double.NaN))); [EOL] } <line_num>: 119,122
public void testCalculatePieDatasetTotal() { [EOL]     DefaultPieDataset d = new DefaultPieDataset(); [EOL]     assertEquals(0.0, DatasetUtilities.calculatePieDatasetTotal(d), EPSILON); [EOL]     d.setValue("A", 1.0); [EOL]     assertEquals(1.0, DatasetUtilities.calculatePieDatasetTotal(d), EPSILON); [EOL]     d.setValue("B", 3.0); [EOL]     assertEquals(4.0, DatasetUtilities.calculatePieDatasetTotal(d), EPSILON); [EOL] } <line_num>: 127,137
public void testFindDomainBounds() { [EOL]     XYDataset dataset = createXYDataset1(); [EOL]     Range r = DatasetUtilities.findDomainBounds(dataset); [EOL]     assertEquals(1.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(3.0, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 142,147
public void testFindDomainBounds2() { [EOL]     DefaultIntervalXYDataset dataset = new DefaultIntervalXYDataset(); [EOL]     double[] x1 = new double[] { 1.0, 2.0, 3.0 }; [EOL]     double[] x1Start = new double[] { 0.9, 1.9, 2.9 }; [EOL]     double[] x1End = new double[] { 1.1, 2.1, 3.1 }; [EOL]     double[] y1 = new double[] { 4.0, 5.0, 6.0 }; [EOL]     double[] y1Start = new double[] { 1.09, 2.09, 3.09 }; [EOL]     double[] y1End = new double[] { 1.11, 2.11, 3.11 }; [EOL]     double[][] data1 = new double[][] { x1, x1Start, x1End, y1, y1Start, y1End }; [EOL]     dataset.addSeries("S1", data1); [EOL]     Range r = DatasetUtilities.findDomainBounds(dataset); [EOL]     assertEquals(0.9, r.getLowerBound(), EPSILON); [EOL]     assertEquals(3.1, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 153,167
public void testFindDomainBounds3() { [EOL]     DefaultIntervalXYDataset dataset = new DefaultIntervalXYDataset(); [EOL]     double[] x1 = new double[] { 1.0, 2.0, 3.0 }; [EOL]     double[] x1Start = new double[] { 0.9, 1.9, 2.9 }; [EOL]     double[] x1End = new double[] { 1.1, 2.1, 3.1 }; [EOL]     double[] y1 = new double[] { 4.0, 5.0, 6.0 }; [EOL]     double[] y1Start = new double[] { 1.09, 2.09, 3.09 }; [EOL]     double[] y1End = new double[] { 1.11, 2.11, 3.11 }; [EOL]     double[][] data1 = new double[][] { x1, x1Start, x1End, y1, y1Start, y1End }; [EOL]     dataset.addSeries("S1", data1); [EOL]     Range r = DatasetUtilities.findDomainBounds(dataset, false); [EOL]     assertEquals(1.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(3.0, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 173,187
public void testFindDomainBounds_NaN() { [EOL]     DefaultIntervalXYDataset dataset = new DefaultIntervalXYDataset(); [EOL]     double[] x1 = new double[] { 1.0, 2.0, Double.NaN }; [EOL]     double[] x1Start = new double[] { 0.9, 1.9, Double.NaN }; [EOL]     double[] x1End = new double[] { 1.1, 2.1, Double.NaN }; [EOL]     double[] y1 = new double[] { 4.0, 5.0, 6.0 }; [EOL]     double[] y1Start = new double[] { 1.09, 2.09, 3.09 }; [EOL]     double[] y1End = new double[] { 1.11, 2.11, 3.11 }; [EOL]     double[][] data1 = new double[][] { x1, x1Start, x1End, y1, y1Start, y1End }; [EOL]     dataset.addSeries("S1", data1); [EOL]     Range r = DatasetUtilities.findDomainBounds(dataset); [EOL]     assertEquals(0.9, r.getLowerBound(), EPSILON); [EOL]     assertEquals(2.1, r.getUpperBound(), EPSILON); [EOL]     r = DatasetUtilities.findDomainBounds(dataset, false); [EOL]     assertEquals(1.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(2.0, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 192,210
public void testIterateDomainBounds() { [EOL]     XYDataset dataset = createXYDataset1(); [EOL]     Range r = DatasetUtilities.iterateDomainBounds(dataset); [EOL]     assertEquals(1.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(3.0, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 215,220
public void testIterateDomainBounds_NaN() { [EOL]     DefaultXYDataset dataset = new DefaultXYDataset(); [EOL]     double[] x = new double[] { 1.0, 2.0, Double.NaN, 3.0 }; [EOL]     double[] y = new double[] { 9.0, 8.0, 7.0, 6.0 }; [EOL]     dataset.addSeries("S1", new double[][] { x, y }); [EOL]     Range r = DatasetUtilities.iterateDomainBounds(dataset); [EOL]     assertEquals(1.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(3.0, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 225,233
public void testIterateDomainBounds_NaN2() { [EOL]     DefaultIntervalXYDataset dataset = new DefaultIntervalXYDataset(); [EOL]     double[] x1 = new double[] { Double.NaN, 2.0, 3.0 }; [EOL]     double[] x1Start = new double[] { 0.9, Double.NaN, 2.9 }; [EOL]     double[] x1End = new double[] { 1.1, Double.NaN, 3.1 }; [EOL]     double[] y1 = new double[] { 4.0, 5.0, 6.0 }; [EOL]     double[] y1Start = new double[] { 1.09, 2.09, 3.09 }; [EOL]     double[] y1End = new double[] { 1.11, 2.11, 3.11 }; [EOL]     double[][] data1 = new double[][] { x1, x1Start, x1End, y1, y1Start, y1End }; [EOL]     dataset.addSeries("S1", data1); [EOL]     Range r = DatasetUtilities.iterateDomainBounds(dataset, false); [EOL]     assertEquals(2.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(3.0, r.getUpperBound(), EPSILON); [EOL]     r = DatasetUtilities.iterateDomainBounds(dataset, true); [EOL]     assertEquals(0.9, r.getLowerBound(), EPSILON); [EOL]     assertEquals(3.1, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 238,255
public void testFindRangeBounds_CategoryDataset() { [EOL]     CategoryDataset dataset = createCategoryDataset1(); [EOL]     Range r = DatasetUtilities.findRangeBounds(dataset); [EOL]     assertEquals(1.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(6.0, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 260,265
public void testFindRangeBounds() { [EOL]     XYDataset dataset = createXYDataset1(); [EOL]     Range r = DatasetUtilities.findRangeBounds(dataset); [EOL]     assertEquals(100.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(105.0, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 270,275
public void testFindRangeBounds2() { [EOL]     YIntervalSeriesCollection dataset = new YIntervalSeriesCollection(); [EOL]     Range r = DatasetUtilities.findRangeBounds(dataset); [EOL]     assertNull(r); [EOL]     YIntervalSeries s1 = new YIntervalSeries("S1"); [EOL]     dataset.addSeries(s1); [EOL]     r = DatasetUtilities.findRangeBounds(dataset); [EOL]     assertNull(r); [EOL]     s1.add(1.0, 2.0, 1.5, 2.5); [EOL]     r = DatasetUtilities.findRangeBounds(dataset); [EOL]     assertEquals(1.5, r.getLowerBound(), EPSILON); [EOL]     assertEquals(2.5, r.getUpperBound(), EPSILON); [EOL]     r = DatasetUtilities.findRangeBounds(dataset, false); [EOL]     assertEquals(2.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(2.0, r.getUpperBound(), EPSILON); [EOL]     s1.add(2.0, 2.0, 1.4, 2.1); [EOL]     r = DatasetUtilities.findRangeBounds(dataset); [EOL]     assertEquals(1.4, r.getLowerBound(), EPSILON); [EOL]     assertEquals(2.5, r.getUpperBound(), EPSILON); [EOL]     YIntervalSeries s2 = new YIntervalSeries("S2"); [EOL]     dataset.addSeries(s2); [EOL]     r = DatasetUtilities.findRangeBounds(dataset); [EOL]     assertEquals(1.4, r.getLowerBound(), EPSILON); [EOL]     assertEquals(2.5, r.getUpperBound(), EPSILON); [EOL]     s2.add(1.0, 2.0, 1.9, 2.6); [EOL]     r = DatasetUtilities.findRangeBounds(dataset); [EOL]     assertEquals(1.4, r.getLowerBound(), EPSILON); [EOL]     assertEquals(2.6, r.getUpperBound(), EPSILON); [EOL]     r = DatasetUtilities.findRangeBounds(dataset, false); [EOL]     assertEquals(2.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(2.0, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 281,323
public void testIterateRangeBounds_CategoryDataset() { [EOL]     CategoryDataset dataset = createCategoryDataset1(); [EOL]     Range r = DatasetUtilities.iterateRangeBounds(dataset, false); [EOL]     assertEquals(1.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(6.0, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 328,333
public void testIterateRangeBounds2_CategoryDataset() { [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     Range r = DatasetUtilities.iterateRangeBounds(dataset, false); [EOL]     assertNull(r); [EOL]     dataset.addValue(1.23, "R1", "C1"); [EOL]     r = DatasetUtilities.iterateRangeBounds(dataset, false); [EOL]     assertEquals(1.23, r.getLowerBound(), EPSILON); [EOL]     assertEquals(1.23, r.getUpperBound(), EPSILON); [EOL]     dataset.addValue(null, "R2", "C1"); [EOL]     r = DatasetUtilities.iterateRangeBounds(dataset, false); [EOL]     assertEquals(1.23, r.getLowerBound(), EPSILON); [EOL]     assertEquals(1.23, r.getUpperBound(), EPSILON); [EOL]     dataset.addValue(Double.NaN, "R2", "C1"); [EOL]     r = DatasetUtilities.iterateRangeBounds(dataset, false); [EOL]     assertEquals(1.23, r.getLowerBound(), EPSILON); [EOL]     assertEquals(1.23, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 338,361
public void testIterateRangeBounds3_CategoryDataset() { [EOL]     Number[][] starts = new Double[2][3]; [EOL]     Number[][] ends = new Double[2][3]; [EOL]     starts[0][0] = new Double(1.0); [EOL]     starts[0][1] = new Double(2.0); [EOL]     starts[0][2] = new Double(3.0); [EOL]     starts[1][0] = new Double(11.0); [EOL]     starts[1][1] = new Double(12.0); [EOL]     starts[1][2] = new Double(13.0); [EOL]     ends[0][0] = new Double(4.0); [EOL]     ends[0][1] = new Double(5.0); [EOL]     ends[0][2] = new Double(6.0); [EOL]     ends[1][0] = new Double(16.0); [EOL]     ends[1][1] = new Double(15.0); [EOL]     ends[1][2] = new Double(14.0); [EOL]     DefaultIntervalCategoryDataset d = new DefaultIntervalCategoryDataset(starts, ends); [EOL]     Range r = DatasetUtilities.iterateRangeBounds(d, false); [EOL]     assertEquals(4.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(16.0, r.getUpperBound(), EPSILON); [EOL]     r = DatasetUtilities.iterateRangeBounds(d, true); [EOL]     assertEquals(1.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(16.0, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 367,391
public void testIterateRangeBounds() { [EOL]     XYDataset dataset = createXYDataset1(); [EOL]     Range r = DatasetUtilities.iterateRangeBounds(dataset); [EOL]     assertEquals(100.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(105.0, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 396,401
public void testIterateRangeBounds2() { [EOL]     XYSeries s1 = new XYSeries("S1"); [EOL]     s1.add(1.0, 1.1); [EOL]     s1.add(2.0, null); [EOL]     s1.add(3.0, 3.3); [EOL]     XYSeriesCollection dataset = new XYSeriesCollection(s1); [EOL]     Range r = DatasetUtilities.iterateRangeBounds(dataset); [EOL]     assertEquals(1.1, r.getLowerBound(), EPSILON); [EOL]     assertEquals(3.3, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 406,415
public void testIterateRangeBounds3() { [EOL]     XYSeriesCollection dataset = new XYSeriesCollection(); [EOL]     Range r = DatasetUtilities.iterateRangeBounds(dataset); [EOL]     assertNull(r); [EOL]     XYSeries s1 = new XYSeries("S1"); [EOL]     dataset.addSeries(s1); [EOL]     r = DatasetUtilities.iterateRangeBounds(dataset); [EOL]     assertNull(r); [EOL]     s1.add(1.0, 1.23); [EOL]     r = DatasetUtilities.iterateRangeBounds(dataset); [EOL]     assertEquals(1.23, r.getLowerBound(), EPSILON); [EOL]     assertEquals(1.23, r.getUpperBound(), EPSILON); [EOL]     s1.add(2.0, null); [EOL]     r = DatasetUtilities.iterateRangeBounds(dataset); [EOL]     assertEquals(1.23, r.getLowerBound(), EPSILON); [EOL]     assertEquals(1.23, r.getUpperBound(), EPSILON); [EOL]     s1.add(3.0, Double.NaN); [EOL]     r = DatasetUtilities.iterateRangeBounds(dataset); [EOL]     assertEquals(1.23, r.getLowerBound(), EPSILON); [EOL]     assertEquals(1.23, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 420,447
public void testIterateRangeBounds4() { [EOL]     YIntervalSeriesCollection dataset = new YIntervalSeriesCollection(); [EOL]     Range r = DatasetUtilities.iterateRangeBounds(dataset); [EOL]     assertNull(r); [EOL]     YIntervalSeries s1 = new YIntervalSeries("S1"); [EOL]     dataset.addSeries(s1); [EOL]     r = DatasetUtilities.iterateRangeBounds(dataset); [EOL]     assertNull(r); [EOL]     s1.add(1.0, 2.0, 1.5, 2.5); [EOL]     r = DatasetUtilities.iterateRangeBounds(dataset); [EOL]     assertEquals(1.5, r.getLowerBound(), EPSILON); [EOL]     assertEquals(2.5, r.getUpperBound(), EPSILON); [EOL]     s1.add(2.0, 2.0, 1.4, 2.1); [EOL]     r = DatasetUtilities.iterateRangeBounds(dataset); [EOL]     assertEquals(1.4, r.getLowerBound(), EPSILON); [EOL]     assertEquals(2.5, r.getUpperBound(), EPSILON); [EOL]     YIntervalSeries s2 = new YIntervalSeries("S2"); [EOL]     dataset.addSeries(s2); [EOL]     r = DatasetUtilities.iterateRangeBounds(dataset); [EOL]     assertEquals(1.4, r.getLowerBound(), EPSILON); [EOL]     assertEquals(2.5, r.getUpperBound(), EPSILON); [EOL]     s2.add(1.0, 2.0, 1.9, 2.6); [EOL]     r = DatasetUtilities.iterateRangeBounds(dataset); [EOL]     assertEquals(1.4, r.getLowerBound(), EPSILON); [EOL]     assertEquals(2.6, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 453,486
public void testFindMinimumDomainValue() { [EOL]     XYDataset dataset = createXYDataset1(); [EOL]     Number minimum = DatasetUtilities.findMinimumDomainValue(dataset); [EOL]     assertEquals(new Double(1.0), minimum); [EOL] } <line_num>: 491,495
public void testFindMaximumDomainValue() { [EOL]     XYDataset dataset = createXYDataset1(); [EOL]     Number maximum = DatasetUtilities.findMaximumDomainValue(dataset); [EOL]     assertEquals(new Double(3.0), maximum); [EOL] } <line_num>: 500,504
public void testFindMinimumRangeValue() { [EOL]     CategoryDataset d1 = createCategoryDataset1(); [EOL]     Number min1 = DatasetUtilities.findMinimumRangeValue(d1); [EOL]     assertEquals(new Double(1.0), min1); [EOL]     XYDataset d2 = createXYDataset1(); [EOL]     Number min2 = DatasetUtilities.findMinimumRangeValue(d2); [EOL]     assertEquals(new Double(100.0), min2); [EOL] } <line_num>: 509,517
public void testFindMaximumRangeValue() { [EOL]     CategoryDataset d1 = createCategoryDataset1(); [EOL]     Number max1 = DatasetUtilities.findMaximumRangeValue(d1); [EOL]     assertEquals(new Double(6.0), max1); [EOL]     XYDataset dataset = createXYDataset1(); [EOL]     Number maximum = DatasetUtilities.findMaximumRangeValue(dataset); [EOL]     assertEquals(new Double(105.0), maximum); [EOL] } <line_num>: 522,530
public void testMinMaxRange() { [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     dataset.addValue(100.0, "Series 1", "Type 1"); [EOL]     dataset.addValue(101.1, "Series 1", "Type 2"); [EOL]     Number min = DatasetUtilities.findMinimumRangeValue(dataset); [EOL]     assertTrue(min.doubleValue() < 100.1); [EOL]     Number max = DatasetUtilities.findMaximumRangeValue(dataset); [EOL]     assertTrue(max.doubleValue() > 101.0); [EOL] } <line_num>: 535,543
public void test803660() { [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     dataset.addValue(100.0, "Series 1", "Type 1"); [EOL]     dataset.addValue(101.1, "Series 1", "Type 2"); [EOL]     Number n = DatasetUtilities.findMaximumRangeValue(dataset); [EOL]     assertTrue(n.doubleValue() > 101.0); [EOL] } <line_num>: 548,554
public void testCumulativeRange1() { [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     dataset.addValue(10.0, "Series 1", "Start"); [EOL]     dataset.addValue(15.0, "Series 1", "Delta 1"); [EOL]     dataset.addValue(-7.0, "Series 1", "Delta 2"); [EOL]     Range range = DatasetUtilities.findCumulativeRangeBounds(dataset); [EOL]     assertEquals(0.0, range.getLowerBound(), 0.00000001); [EOL]     assertEquals(25.0, range.getUpperBound(), 0.00000001); [EOL] } <line_num>: 561,569
public void testCumulativeRange2() { [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     dataset.addValue(-21.4, "Series 1", "Start Value"); [EOL]     dataset.addValue(11.57, "Series 1", "Delta 1"); [EOL]     dataset.addValue(3.51, "Series 1", "Delta 2"); [EOL]     dataset.addValue(-12.36, "Series 1", "Delta 3"); [EOL]     dataset.addValue(3.39, "Series 1", "Delta 4"); [EOL]     dataset.addValue(38.68, "Series 1", "Delta 5"); [EOL]     dataset.addValue(-43.31, "Series 1", "Delta 6"); [EOL]     dataset.addValue(-29.59, "Series 1", "Delta 7"); [EOL]     dataset.addValue(35.30, "Series 1", "Delta 8"); [EOL]     dataset.addValue(5.0, "Series 1", "Delta 9"); [EOL]     Range range = DatasetUtilities.findCumulativeRangeBounds(dataset); [EOL]     assertEquals(-49.51, range.getLowerBound(), 0.00000001); [EOL]     assertEquals(23.39, range.getUpperBound(), 0.00000001); [EOL] } <line_num>: 574,589
public void testCumulativeRange3() { [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     dataset.addValue(15.76, "Product 1", "Labour"); [EOL]     dataset.addValue(8.66, "Product 1", "Administration"); [EOL]     dataset.addValue(4.71, "Product 1", "Marketing"); [EOL]     dataset.addValue(3.51, "Product 1", "Distribution"); [EOL]     dataset.addValue(32.64, "Product 1", "Total Expense"); [EOL]     Range range = DatasetUtilities.findCumulativeRangeBounds(dataset); [EOL]     assertEquals(0.0, range.getLowerBound(), EPSILON); [EOL]     assertEquals(65.28, range.getUpperBound(), EPSILON); [EOL] } <line_num>: 594,604
public void testCumulativeRange_NaN() { [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     dataset.addValue(10.0, "Series 1", "Start"); [EOL]     dataset.addValue(15.0, "Series 1", "Delta 1"); [EOL]     dataset.addValue(Double.NaN, "Series 1", "Delta 2"); [EOL]     Range range = DatasetUtilities.findCumulativeRangeBounds(dataset); [EOL]     assertEquals(0.0, range.getLowerBound(), EPSILON); [EOL]     assertEquals(25.0, range.getUpperBound(), EPSILON); [EOL] } <line_num>: 610,618
public void testCreateCategoryDataset1() { [EOL]     String[] rowKeys = { "R1", "R2", "R3" }; [EOL]     String[] columnKeys = { "C1", "C2" }; [EOL]     double[][] data = new double[3][]; [EOL]     data[0] = new double[] { 1.1, 1.2 }; [EOL]     data[1] = new double[] { 2.1, 2.2 }; [EOL]     data[2] = new double[] { 3.1, 3.2 }; [EOL]     CategoryDataset dataset = DatasetUtilities.createCategoryDataset(rowKeys, columnKeys, data); [EOL]     assertTrue(dataset.getRowCount() == 3); [EOL]     assertTrue(dataset.getColumnCount() == 2); [EOL] } <line_num>: 623,634
public void testCreateCategoryDataset2() { [EOL]     boolean pass = false; [EOL]     String[] rowKeys = { "R1", "R2", "R3" }; [EOL]     String[] columnKeys = { "C1", "C2" }; [EOL]     double[][] data = new double[2][]; [EOL]     data[0] = new double[] { 1.1, 1.2, 1.3 }; [EOL]     data[1] = new double[] { 2.1, 2.2, 2.3 }; [EOL]     CategoryDataset dataset = null; [EOL]     try { [EOL]         dataset = DatasetUtilities.createCategoryDataset(rowKeys, columnKeys, data); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     assertTrue(dataset == null); [EOL] } <line_num>: 640,657
public void testMaximumStackedRangeValue() { [EOL]     double v1 = 24.3; [EOL]     double v2 = 14.2; [EOL]     double v3 = 33.2; [EOL]     double v4 = 32.4; [EOL]     double v5 = 26.3; [EOL]     double v6 = 22.6; [EOL]     Number answer = new Double(Math.max(v1 + v2 + v3, v4 + v5 + v6)); [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     d.addValue(v1, "Row 0", "Column 0"); [EOL]     d.addValue(v2, "Row 1", "Column 0"); [EOL]     d.addValue(v3, "Row 2", "Column 0"); [EOL]     d.addValue(v4, "Row 0", "Column 1"); [EOL]     d.addValue(v5, "Row 1", "Column 1"); [EOL]     d.addValue(v6, "Row 2", "Column 1"); [EOL]     Number max = DatasetUtilities.findMaximumStackedRangeValue(d); [EOL]     assertTrue(max.equals(answer)); [EOL] } <line_num>: 664,681
public void testFindStackedRangeBounds_CategoryDataset1() { [EOL]     CategoryDataset d1 = createCategoryDataset1(); [EOL]     Range r = DatasetUtilities.findStackedRangeBounds(d1); [EOL]     assertEquals(0.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(15.0, r.getUpperBound(), EPSILON); [EOL]     d1 = createCategoryDataset2(); [EOL]     r = DatasetUtilities.findStackedRangeBounds(d1); [EOL]     assertEquals(-2.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(2.0, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 686,696
public void testFindStackedRangeBounds_CategoryDataset2() { [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     Range r = DatasetUtilities.findStackedRangeBounds(dataset); [EOL]     assertTrue(r == null); [EOL]     dataset.addValue(5.0, "R1", "C1"); [EOL]     r = DatasetUtilities.findStackedRangeBounds(dataset, 3.0); [EOL]     assertEquals(3.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(8.0, r.getUpperBound(), EPSILON); [EOL]     dataset.addValue(-1.0, "R2", "C1"); [EOL]     r = DatasetUtilities.findStackedRangeBounds(dataset, 3.0); [EOL]     assertEquals(2.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(8.0, r.getUpperBound(), EPSILON); [EOL]     dataset.addValue(null, "R3", "C1"); [EOL]     r = DatasetUtilities.findStackedRangeBounds(dataset, 3.0); [EOL]     assertEquals(2.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(8.0, r.getUpperBound(), EPSILON); [EOL]     dataset.addValue(Double.NaN, "R4", "C1"); [EOL]     r = DatasetUtilities.findStackedRangeBounds(dataset, 3.0); [EOL]     assertEquals(2.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(8.0, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 701,725
public void testFindStackedRangeBounds_CategoryDataset3() { [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     KeyToGroupMap map = new KeyToGroupMap("Group A"); [EOL]     Range r = DatasetUtilities.findStackedRangeBounds(dataset, map); [EOL]     assertTrue(r == null); [EOL]     dataset.addValue(1.0, "R1", "C1"); [EOL]     dataset.addValue(2.0, "R2", "C1"); [EOL]     dataset.addValue(3.0, "R3", "C1"); [EOL]     dataset.addValue(4.0, "R4", "C1"); [EOL]     map.mapKeyToGroup("R1", "Group A"); [EOL]     map.mapKeyToGroup("R2", "Group A"); [EOL]     map.mapKeyToGroup("R3", "Group B"); [EOL]     map.mapKeyToGroup("R4", "Group B"); [EOL]     r = DatasetUtilities.findStackedRangeBounds(dataset, map); [EOL]     assertEquals(0.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(7.0, r.getUpperBound(), EPSILON); [EOL]     dataset.addValue(null, "R5", "C1"); [EOL]     r = DatasetUtilities.findStackedRangeBounds(dataset, map); [EOL]     assertEquals(0.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(7.0, r.getUpperBound(), EPSILON); [EOL]     dataset.addValue(Double.NaN, "R6", "C1"); [EOL]     r = DatasetUtilities.findStackedRangeBounds(dataset, map); [EOL]     assertEquals(0.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(7.0, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 731,760
public void testFindStackedRangeBoundsForTableXYDataset1() { [EOL]     TableXYDataset d2 = createTableXYDataset1(); [EOL]     Range r = DatasetUtilities.findStackedRangeBounds(d2); [EOL]     assertEquals(-2.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(2.0, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 765,770
public void testFindStackedRangeBoundsForTableXYDataset2() { [EOL]     DefaultTableXYDataset d = new DefaultTableXYDataset(); [EOL]     Range r = DatasetUtilities.findStackedRangeBounds(d); [EOL]     assertEquals(r, new Range(0.0, 0.0)); [EOL] } <line_num>: 775,779
public void testStackedRangeWithMap() { [EOL]     CategoryDataset d = createCategoryDataset1(); [EOL]     KeyToGroupMap map = new KeyToGroupMap("G0"); [EOL]     map.mapKeyToGroup("R2", "G1"); [EOL]     Range r = DatasetUtilities.findStackedRangeBounds(d, map); [EOL]     assertEquals(0.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(9.0, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 784,791
public void testIsEmptyOrNullXYDataset() { [EOL]     XYSeriesCollection dataset = null; [EOL]     assertTrue(DatasetUtilities.isEmptyOrNull(dataset)); [EOL]     dataset = new XYSeriesCollection(); [EOL]     assertTrue(DatasetUtilities.isEmptyOrNull(dataset)); [EOL]     XYSeries s1 = new XYSeries("S1"); [EOL]     dataset.addSeries(s1); [EOL]     assertTrue(DatasetUtilities.isEmptyOrNull(dataset)); [EOL]     s1.add(1.0, 2.0); [EOL]     assertFalse(DatasetUtilities.isEmptyOrNull(dataset)); [EOL]     s1.clear(); [EOL]     assertTrue(DatasetUtilities.isEmptyOrNull(dataset)); [EOL] } <line_num>: 796,808
public void testLimitPieDataset() { [EOL]     DefaultPieDataset d1 = new DefaultPieDataset(); [EOL]     PieDataset d2 = DatasetUtilities.createConsolidatedPieDataset(d1, "Other", 0.05); [EOL]     assertEquals(0, d2.getItemCount()); [EOL]     d1.setValue("Item 1", 1.0); [EOL]     d1.setValue("Item 2", 49.50); [EOL]     d1.setValue("Item 3", 49.50); [EOL]     d2 = DatasetUtilities.createConsolidatedPieDataset(d1, "Other", 0.05); [EOL]     assertEquals(3, d2.getItemCount()); [EOL]     assertEquals("Item 1", d2.getKey(0)); [EOL]     assertEquals("Item 2", d2.getKey(1)); [EOL]     assertEquals("Item 3", d2.getKey(2)); [EOL]     d1.setValue("Item 4", 1.0); [EOL]     d2 = DatasetUtilities.createConsolidatedPieDataset(d1, "Other", 0.05, 2); [EOL]     assertEquals(3, d2.getItemCount()); [EOL]     assertEquals("Item 2", d2.getKey(0)); [EOL]     assertEquals("Item 3", d2.getKey(1)); [EOL]     assertEquals("Other", d2.getKey(2)); [EOL]     assertEquals(new Double(2.0), d2.getValue("Other")); [EOL] } <line_num>: 813,843
public void testSampleFunction2D() { [EOL]     Function2D f = new LineFunction2D(0, 1); [EOL]     XYDataset dataset = DatasetUtilities.sampleFunction2D(f, 0.0, 1.0, 2, "S1"); [EOL]     assertEquals(1, dataset.getSeriesCount()); [EOL]     assertEquals("S1", dataset.getSeriesKey(0)); [EOL]     assertEquals(2, dataset.getItemCount(0)); [EOL]     assertEquals(0.0, dataset.getXValue(0, 0), EPSILON); [EOL]     assertEquals(0.0, dataset.getYValue(0, 0), EPSILON); [EOL]     assertEquals(1.0, dataset.getXValue(0, 1), EPSILON); [EOL]     assertEquals(1.0, dataset.getYValue(0, 1), EPSILON); [EOL] } <line_num>: 848,859
public void testFindMinimumStackedRangeValue() { [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     Number min = DatasetUtilities.findMinimumStackedRangeValue(dataset); [EOL]     assertNull(min); [EOL]     dataset.addValue(1.0, "R1", "C1"); [EOL]     min = DatasetUtilities.findMinimumStackedRangeValue(dataset); [EOL]     assertEquals(0.0, min.doubleValue(), EPSILON); [EOL]     dataset.addValue(2.0, "R2", "C1"); [EOL]     min = DatasetUtilities.findMinimumStackedRangeValue(dataset); [EOL]     assertEquals(0.0, min.doubleValue(), EPSILON); [EOL]     dataset.addValue(-3.0, "R3", "C1"); [EOL]     min = DatasetUtilities.findMinimumStackedRangeValue(dataset); [EOL]     assertEquals(-3.0, min.doubleValue(), EPSILON); [EOL]     dataset.addValue(Double.NaN, "R4", "C1"); [EOL]     min = DatasetUtilities.findMinimumStackedRangeValue(dataset); [EOL]     assertEquals(-3.0, min.doubleValue(), EPSILON); [EOL] } <line_num>: 864,886
public void testFindMinimumStackedRangeValue2() { [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     dataset.addValue(-1.0, "R1", "C1"); [EOL]     Number min = DatasetUtilities.findMinimumStackedRangeValue(dataset); [EOL]     assertEquals(-1.0, min.doubleValue(), EPSILON); [EOL]     dataset.addValue(-2.0, "R2", "C1"); [EOL]     min = DatasetUtilities.findMinimumStackedRangeValue(dataset); [EOL]     assertEquals(-3.0, min.doubleValue(), EPSILON); [EOL] } <line_num>: 891,900
public void testFindMaximumStackedRangeValue() { [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     Number max = DatasetUtilities.findMaximumStackedRangeValue(dataset); [EOL]     assertNull(max); [EOL]     dataset.addValue(1.0, "R1", "C1"); [EOL]     max = DatasetUtilities.findMaximumStackedRangeValue(dataset); [EOL]     assertEquals(1.0, max.doubleValue(), EPSILON); [EOL]     dataset.addValue(2.0, "R2", "C1"); [EOL]     max = DatasetUtilities.findMaximumStackedRangeValue(dataset); [EOL]     assertEquals(3.0, max.doubleValue(), EPSILON); [EOL]     dataset.addValue(-3.0, "R3", "C1"); [EOL]     max = DatasetUtilities.findMaximumStackedRangeValue(dataset); [EOL]     assertEquals(3.0, max.doubleValue(), EPSILON); [EOL]     dataset.addValue(Double.NaN, "R4", "C1"); [EOL]     max = DatasetUtilities.findMaximumStackedRangeValue(dataset); [EOL]     assertEquals(3.0, max.doubleValue(), EPSILON); [EOL] } <line_num>: 905,927
public void testFindMaximumStackedRangeValue2() { [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     dataset.addValue(-1.0, "R1", "C1"); [EOL]     Number max = DatasetUtilities.findMaximumStackedRangeValue(dataset); [EOL]     assertEquals(0.0, max.doubleValue(), EPSILON); [EOL]     dataset.addValue(-2.0, "R2", "C1"); [EOL]     max = DatasetUtilities.findMaximumStackedRangeValue(dataset); [EOL]     assertEquals(0.0, max.doubleValue(), EPSILON); [EOL] } <line_num>: 932,941
private CategoryDataset createCategoryDataset1() { [EOL]     DefaultCategoryDataset result = new DefaultCategoryDataset(); [EOL]     result.addValue(1.0, "R0", "C0"); [EOL]     result.addValue(1.0, "R1", "C0"); [EOL]     result.addValue(1.0, "R2", "C0"); [EOL]     result.addValue(4.0, "R0", "C1"); [EOL]     result.addValue(5.0, "R1", "C1"); [EOL]     result.addValue(6.0, "R2", "C1"); [EOL]     return result; [EOL] } <line_num>: 948,957
private CategoryDataset createCategoryDataset2() { [EOL]     DefaultCategoryDataset result = new DefaultCategoryDataset(); [EOL]     result.addValue(1.0, "R0", "C0"); [EOL]     result.addValue(-2.0, "R1", "C0"); [EOL]     result.addValue(2.0, "R0", "C1"); [EOL]     result.addValue(-1.0, "R1", "C1"); [EOL]     return result; [EOL] } <line_num>: 964,971
private XYDataset createXYDataset1() { [EOL]     XYSeries series1 = new XYSeries("S1"); [EOL]     series1.add(1.0, 100.0); [EOL]     series1.add(2.0, 101.0); [EOL]     series1.add(3.0, 102.0); [EOL]     XYSeries series2 = new XYSeries("S2"); [EOL]     series2.add(1.0, 103.0); [EOL]     series2.add(2.0, null); [EOL]     series2.add(3.0, 105.0); [EOL]     XYSeriesCollection result = new XYSeriesCollection(); [EOL]     result.addSeries(series1); [EOL]     result.addSeries(series2); [EOL]     result.setIntervalWidth(0.0); [EOL]     return result; [EOL] } <line_num>: 979,993
private TableXYDataset createTableXYDataset1() { [EOL]     DefaultTableXYDataset dataset = new DefaultTableXYDataset(); [EOL]     XYSeries s1 = new XYSeries("Series 1", true, false); [EOL]     s1.add(1.0, 1.0); [EOL]     s1.add(2.0, 2.0); [EOL]     dataset.addSeries(s1); [EOL]     XYSeries s2 = new XYSeries("Series 2", true, false); [EOL]     s2.add(1.0, -2.0); [EOL]     s2.add(2.0, -1.0); [EOL]     dataset.addSeries(s2); [EOL]     return dataset; [EOL] } <line_num>: 1000,1014
public void testIterateToFindRangeBounds1_XYDataset() { [EOL]     boolean pass = false; [EOL]     try { [EOL]         DatasetUtilities.iterateToFindRangeBounds(null, new ArrayList(), new Range(0.0, 1.0), true); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         DatasetUtilities.iterateToFindRangeBounds(new XYSeriesCollection(), null, new Range(0.0, 1.0), true); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         DatasetUtilities.iterateToFindRangeBounds(new XYSeriesCollection(), new ArrayList(), null, true); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 1019,1052
public void testIterateToFindRangeBounds2_XYDataset() { [EOL]     List visibleSeriesKeys = new ArrayList(); [EOL]     Range xRange = new Range(0.0, 10.0); [EOL]     XYSeriesCollection dataset = new XYSeriesCollection(); [EOL]     Range r = DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, xRange, false); [EOL]     assertNull(r); [EOL]     XYSeries s1 = new XYSeries("A"); [EOL]     dataset.addSeries(s1); [EOL]     visibleSeriesKeys.add("A"); [EOL]     r = DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, xRange, false); [EOL]     assertNull(r); [EOL]     s1.add(1.0, null); [EOL]     r = DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, xRange, false); [EOL]     assertNull(r); [EOL]     s1.add(2.0, Double.NaN); [EOL]     r = DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, xRange, false); [EOL]     assertNull(r); [EOL]     s1.add(3.0, 5.0); [EOL]     r = DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, xRange, false); [EOL]     assertEquals(new Range(5.0, 5.0), r); [EOL]     s1.add(4.0, 6.0); [EOL]     r = DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, xRange, false); [EOL]     assertEquals(new Range(5.0, 6.0), r); [EOL]     XYSeries s2 = new XYSeries("B"); [EOL]     dataset.addSeries(s2); [EOL]     r = DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, xRange, false); [EOL]     assertEquals(new Range(5.0, 6.0), r); [EOL]     visibleSeriesKeys.add("B"); [EOL]     r = DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, xRange, false); [EOL]     assertEquals(new Range(5.0, 6.0), r); [EOL]     s2.add(5.0, 15.0); [EOL]     r = DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, xRange, false); [EOL]     assertEquals(new Range(5.0, 15.0), r); [EOL]     s2.add(15.0, 150.0); [EOL]     r = DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, xRange, false); [EOL]     assertEquals(new Range(5.0, 15.0), r); [EOL]     r = DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, new Range(0.0, 20.0), false); [EOL]     assertEquals(new Range(5.0, 150.0), r); [EOL] } <line_num>: 1057,1125
public void testIterateToFindRangeBounds_BoxAndWhiskerXYDataset() { [EOL]     DefaultBoxAndWhiskerXYDataset dataset = new DefaultBoxAndWhiskerXYDataset("Series 1"); [EOL]     List visibleSeriesKeys = new ArrayList(); [EOL]     visibleSeriesKeys.add("Series 1"); [EOL]     Range xRange = new Range(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY); [EOL]     assertNull(DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, xRange, false)); [EOL]     dataset.add(new Date(50L), new BoxAndWhiskerItem(5.0, 4.9, 2.0, 8.0, 1.0, 9.0, 0.0, 10.0, new ArrayList())); [EOL]     assertEquals(new Range(5.0, 5.0), DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, xRange, false)); [EOL]     assertEquals(new Range(1.0, 9.0), DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, xRange, true)); [EOL] } <line_num>: 1131,1149
public void testIterateToFindRangeBounds_StatisticalCategoryDataset() { [EOL]     DefaultStatisticalCategoryDataset dataset = new DefaultStatisticalCategoryDataset(); [EOL]     List visibleSeriesKeys = new ArrayList(); [EOL]     assertNull(DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, false)); [EOL]     dataset.add(1.0, 0.5, "R1", "C1"); [EOL]     visibleSeriesKeys.add("R1"); [EOL]     assertEquals(new Range(1.0, 1.0), DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, false)); [EOL]     assertEquals(new Range(0.5, 1.5), DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, true)); [EOL] } <line_num>: 1155,1169
public void testIterateToFindRangeBounds_MultiValueCategoryDataset() { [EOL]     DefaultMultiValueCategoryDataset dataset = new DefaultMultiValueCategoryDataset(); [EOL]     List visibleSeriesKeys = new ArrayList(); [EOL]     assertNull(DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, true)); [EOL]     List values = Arrays.asList(new Double[] { new Double(1.0) }); [EOL]     dataset.add(values, "R1", "C1"); [EOL]     visibleSeriesKeys.add("R1"); [EOL]     assertEquals(new Range(1.0, 1.0), DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, true)); [EOL]     values = Arrays.asList(new Double[] { new Double(2.0), new Double(3.0) }); [EOL]     dataset.add(values, "R1", "C2"); [EOL]     assertEquals(new Range(1.0, 3.0), DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, true)); [EOL]     values = Arrays.asList(new Double[] { new Double(-1.0), new Double(-2.0) }); [EOL]     dataset.add(values, "R2", "C1"); [EOL]     assertEquals(new Range(1.0, 3.0), DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, true)); [EOL]     visibleSeriesKeys.add("R2"); [EOL]     assertEquals(new Range(-2.0, 3.0), DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, true)); [EOL] } <line_num>: 1175,1204
public void testIterateRangeBounds_IntervalCategoryDataset() { [EOL] } <line_num>: 1210,1210
public void testBug2849731() { [EOL] } <line_num>: 1257,1257
public void testBug2849731_2() { [EOL]     XYIntervalSeriesCollection d = new XYIntervalSeriesCollection(); [EOL]     XYIntervalSeries s = new XYIntervalSeries("S1"); [EOL]     s.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN); [EOL]     d.addSeries(s); [EOL]     Range r = DatasetUtilities.iterateDomainBounds(d); [EOL]     assertEquals(1.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(1.0, r.getUpperBound(), EPSILON); [EOL]     s.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN); [EOL]     r = DatasetUtilities.iterateDomainBounds(d); [EOL]     assertEquals(1.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(1.5, r.getUpperBound(), EPSILON); [EOL]     s.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN); [EOL]     r = DatasetUtilities.iterateDomainBounds(d); [EOL]     assertEquals(0.5, r.getLowerBound(), EPSILON); [EOL]     assertEquals(1.5, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 1270,1288
public void testBug2849731_3() { [EOL]     XYIntervalSeriesCollection d = new XYIntervalSeriesCollection(); [EOL]     XYIntervalSeries s = new XYIntervalSeries("S1"); [EOL]     s.add(1.0, Double.NaN, Double.NaN, 1.5, Double.NaN, Double.NaN); [EOL]     d.addSeries(s); [EOL]     Range r = DatasetUtilities.iterateRangeBounds(d); [EOL]     assertEquals(1.5, r.getLowerBound(), EPSILON); [EOL]     assertEquals(1.5, r.getUpperBound(), EPSILON); [EOL]     s.add(1.0, 1.5, Double.NaN, Double.NaN, Double.NaN, 2.5); [EOL]     r = DatasetUtilities.iterateRangeBounds(d); [EOL]     assertEquals(1.5, r.getLowerBound(), EPSILON); [EOL]     assertEquals(2.5, r.getUpperBound(), EPSILON); [EOL]     s.add(1.0, Double.NaN, 0.5, Double.NaN, 3.5, Double.NaN); [EOL]     r = DatasetUtilities.iterateRangeBounds(d); [EOL]     assertEquals(1.5, r.getLowerBound(), EPSILON); [EOL]     assertEquals(3.5, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 1293,1311
