public DefaultHeatMapDatasetTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 92,94
public void datasetChanged(DatasetChangeEvent event) { [EOL]     this.lastEvent = event; [EOL] } <line_num>: 72,74
public static Test suite() { [EOL]     return new TestSuite(DefaultHeatMapDatasetTests.class); [EOL] } <line_num>: 81,83
public void testGeneral() { [EOL]     DefaultHeatMapDataset d = new DefaultHeatMapDataset(10, 5, 0.0, 9.0, 0.0, 5.0); [EOL]     assertEquals(10, d.getXSampleCount()); [EOL]     assertEquals(5, d.getYSampleCount()); [EOL]     assertEquals(0.0, d.getMinimumXValue(), EPSILON); [EOL]     assertEquals(9.0, d.getMaximumXValue(), EPSILON); [EOL]     assertEquals(0.0, d.getMinimumYValue(), EPSILON); [EOL]     assertEquals(5.0, d.getMaximumYValue(), EPSILON); [EOL]     assertEquals(0.0, d.getZValue(0, 0), EPSILON); [EOL]     d.addChangeListener(this); [EOL]     d.setZValue(0, 0, 1.0, false); [EOL]     assertEquals(1.0, d.getZValue(0, 0), EPSILON); [EOL]     assertNull(this.lastEvent); [EOL]     d.setZValue(1, 2, 2.0); [EOL]     assertEquals(2.0, d.getZValue(1, 2), EPSILON); [EOL]     assertNotNull(this.lastEvent); [EOL] } <line_num>: 99,116
public void testEquals() { [EOL]     DefaultHeatMapDataset d1 = new DefaultHeatMapDataset(5, 10, 1.0, 2.0, 3.0, 4.0); [EOL]     DefaultHeatMapDataset d2 = new DefaultHeatMapDataset(5, 10, 1.0, 2.0, 3.0, 4.0); [EOL]     assertEquals(d1, d2); [EOL]     d1 = new DefaultHeatMapDataset(6, 10, 1.0, 2.0, 3.0, 4.0); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2 = new DefaultHeatMapDataset(6, 10, 1.0, 2.0, 3.0, 4.0); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1 = new DefaultHeatMapDataset(6, 11, 1.0, 2.0, 3.0, 4.0); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2 = new DefaultHeatMapDataset(6, 11, 1.0, 2.0, 3.0, 4.0); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1 = new DefaultHeatMapDataset(6, 11, 2.0, 2.0, 3.0, 4.0); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2 = new DefaultHeatMapDataset(6, 11, 2.0, 2.0, 3.0, 4.0); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1 = new DefaultHeatMapDataset(6, 11, 2.0, 3.0, 3.0, 4.0); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2 = new DefaultHeatMapDataset(6, 11, 2.0, 3.0, 3.0, 4.0); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1 = new DefaultHeatMapDataset(6, 11, 2.0, 3.0, 4.0, 4.0); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2 = new DefaultHeatMapDataset(6, 11, 2.0, 3.0, 4.0, 4.0); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1 = new DefaultHeatMapDataset(6, 11, 2.0, 3.0, 4.0, 5.0); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2 = new DefaultHeatMapDataset(6, 11, 2.0, 3.0, 4.0, 5.0); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1.setZValue(1, 2, 3.0); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.setZValue(1, 2, 3.0); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1.setZValue(0, 0, Double.NEGATIVE_INFINITY); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.setZValue(0, 0, Double.NEGATIVE_INFINITY); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1.setZValue(0, 1, Double.POSITIVE_INFINITY); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.setZValue(0, 1, Double.POSITIVE_INFINITY); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1.setZValue(0, 2, Double.NaN); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.setZValue(0, 2, Double.NaN); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 121,177
public void testCloning() { [EOL]     DefaultHeatMapDataset d1 = new DefaultHeatMapDataset(2, 3, -1.0, 4.0, -2.0, 5.0); [EOL]     d1.setZValue(0, 0, 10.0); [EOL]     d1.setZValue(0, 1, Double.NEGATIVE_INFINITY); [EOL]     d1.setZValue(0, 2, Double.POSITIVE_INFINITY); [EOL]     d1.setZValue(1, 0, Double.NaN); [EOL]     DefaultHeatMapDataset d2 = null; [EOL]     try { [EOL]         d2 = (DefaultHeatMapDataset) d1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(d1 != d2); [EOL]     assertTrue(d1.getClass() == d2.getClass()); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1.setZValue(0, 0, 11.0); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.setZValue(0, 0, 11.0); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 182,205
public void testSerialization() { [EOL]     DefaultHeatMapDataset d1 = new DefaultHeatMapDataset(2, 3, -1.0, 4.0, -2.0, 5.0); [EOL]     d1.setZValue(0, 0, 10.0); [EOL]     d1.setZValue(0, 1, Double.NEGATIVE_INFINITY); [EOL]     d1.setZValue(0, 2, Double.POSITIVE_INFINITY); [EOL]     d1.setZValue(1, 0, Double.NaN); [EOL]     DefaultHeatMapDataset d2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(d1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         d2 = (DefaultHeatMapDataset) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(d1, d2); [EOL] } <line_num>: 210,235
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 242,244
