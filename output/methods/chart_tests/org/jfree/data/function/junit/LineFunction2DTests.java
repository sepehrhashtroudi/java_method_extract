public LineFunction2DTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 75,77
public static Test suite() { [EOL]     return new TestSuite(LineFunction2DTests.class); [EOL] } <line_num>: 66,68
public void testConstructor() { [EOL]     LineFunction2D f = new LineFunction2D(1.0, 2.0); [EOL]     assertEquals(1.0, f.getIntercept(), EPSILON); [EOL]     assertEquals(2.0, f.getSlope(), EPSILON); [EOL] } <line_num>: 84,88
public void testEquals() { [EOL]     LineFunction2D f1 = new LineFunction2D(1.0, 2.0); [EOL]     LineFunction2D f2 = new LineFunction2D(1.0, 2.0); [EOL]     assertTrue(f1.equals(f2)); [EOL]     f1 = new LineFunction2D(2.0, 3.0); [EOL]     assertFalse(f1.equals(f2)); [EOL]     f2 = new LineFunction2D(2.0, 3.0); [EOL]     assertTrue(f1.equals(f2)); [EOL] } <line_num>: 95,103
public void testSerialization() { [EOL]     LineFunction2D f1 = new LineFunction2D(1.0, 2.0); [EOL]     LineFunction2D f2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(f1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         f2 = (LineFunction2D) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(f1, f2); [EOL] } <line_num>: 108,127
public void testHashCode() { [EOL]     LineFunction2D f1 = new LineFunction2D(1.0, 2.0); [EOL]     LineFunction2D f2 = new LineFunction2D(1.0, 2.0); [EOL]     assertEquals(f1.hashCode(), f2.hashCode()); [EOL] } <line_num>: 133,137
