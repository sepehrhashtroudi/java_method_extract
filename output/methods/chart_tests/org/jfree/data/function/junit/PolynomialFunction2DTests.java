public PolynomialFunction2DTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 76,78
public static Test suite() { [EOL]     return new TestSuite(PolynomialFunction2DTests.class); [EOL] } <line_num>: 67,69
public void testConstructor() { [EOL]     PolynomialFunction2D f = new PolynomialFunction2D(new double[] { 1.0, 2.0 }); [EOL]     assertTrue(Arrays.equals(new double[] { 1.0, 2.0 }, f.getCoefficients())); [EOL]     boolean pass = false; [EOL]     try { [EOL]         f = new PolynomialFunction2D(null); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 83,96
public void testGetCoefficients() { [EOL]     PolynomialFunction2D f = new PolynomialFunction2D(new double[] { 1.0, 2.0 }); [EOL]     double[] c = f.getCoefficients(); [EOL]     assertTrue(Arrays.equals(new double[] { 1.0, 2.0 }, c)); [EOL]     c[0] = 99.9; [EOL]     assertTrue(Arrays.equals(new double[] { 1.0, 2.0 }, f.getCoefficients())); [EOL] } <line_num>: 101,111
public void testGetOrder() { [EOL]     PolynomialFunction2D f = new PolynomialFunction2D(new double[] { 1.0, 2.0 }); [EOL]     assertEquals(1, f.getOrder()); [EOL] } <line_num>: 116,120
public void testEquals() { [EOL]     PolynomialFunction2D f1 = new PolynomialFunction2D(new double[] { 1.0, 2.0 }); [EOL]     PolynomialFunction2D f2 = new PolynomialFunction2D(new double[] { 1.0, 2.0 }); [EOL]     assertTrue(f1.equals(f2)); [EOL]     f1 = new PolynomialFunction2D(new double[] { 2.0, 3.0 }); [EOL]     assertFalse(f1.equals(f2)); [EOL]     f2 = new PolynomialFunction2D(new double[] { 2.0, 3.0 }); [EOL]     assertTrue(f1.equals(f2)); [EOL] } <line_num>: 125,135
public void testSerialization() { [EOL]     PolynomialFunction2D f1 = new PolynomialFunction2D(new double[] { 1.0, 2.0 }); [EOL]     PolynomialFunction2D f2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(f1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         f2 = (PolynomialFunction2D) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(f1, f2); [EOL] } <line_num>: 140,160
public void testHashCode() { [EOL]     PolynomialFunction2D f1 = new PolynomialFunction2D(new double[] { 1.0, 2.0 }); [EOL]     PolynomialFunction2D f2 = new PolynomialFunction2D(new double[] { 1.0, 2.0 }); [EOL]     assertEquals(f1.hashCode(), f2.hashCode()); [EOL] } <line_num>: 166,173
