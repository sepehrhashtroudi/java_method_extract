public static Test suite() { [EOL]     return new TestSuite(DataUtilitiesTests.class); [EOL] } <line_num>: 63,65
public void testCreateNumberArray2D() { [EOL]     double[][] d = new double[2][]; [EOL]     d[0] = new double[] { 1.1, 2.2, 3.3, 4.4 }; [EOL]     d[1] = new double[] { 1.1, 2.2, 3.3, 4.4, 5.5 }; [EOL]     Number[][] n = DataUtilities.createNumberArray2D(d); [EOL]     assertEquals(2, n.length); [EOL]     assertEquals(4, n[0].length); [EOL]     assertEquals(5, n[1].length); [EOL] } <line_num>: 70,78
public void testCalculateColumnTotal() { [EOL]     DefaultKeyedValues2D table = new DefaultKeyedValues2D(); [EOL]     table.addValue(new Double(1.0), "R0", "C0"); [EOL]     table.addValue(new Double(2.0), "R0", "C1"); [EOL]     table.addValue(new Double(3.0), "R1", "C0"); [EOL]     table.addValue(new Double(4.0), "R1", "C1"); [EOL]     assertEquals(4.0, DataUtilities.calculateColumnTotal(table, 0), EPSILON); [EOL]     assertEquals(6.0, DataUtilities.calculateColumnTotal(table, 1), EPSILON); [EOL]     table.setValue(null, "R1", "C1"); [EOL]     assertEquals(2.0, DataUtilities.calculateColumnTotal(table, 1), EPSILON); [EOL] } <line_num>: 85,95
public void testCalculateColumnTotal2() { [EOL]     DefaultKeyedValues2D table = new DefaultKeyedValues2D(); [EOL]     table.addValue(new Double(1.0), "R0", "C0"); [EOL]     table.addValue(new Double(2.0), "R0", "C1"); [EOL]     table.addValue(new Double(3.0), "R1", "C0"); [EOL]     table.addValue(new Double(4.0), "R1", "C1"); [EOL]     assertEquals(4.0, DataUtilities.calculateColumnTotal(table, 0, new int[] { 0, 1 }), EPSILON); [EOL]     assertEquals(1.0, DataUtilities.calculateColumnTotal(table, 0, new int[] { 0 }), EPSILON); [EOL]     assertEquals(3.0, DataUtilities.calculateColumnTotal(table, 0, new int[] { 1 }), EPSILON); [EOL]     assertEquals(0.0, DataUtilities.calculateColumnTotal(table, 0, new int[] {}), EPSILON); [EOL]     assertEquals(6.0, DataUtilities.calculateColumnTotal(table, 1, new int[] { 0, 1 }), EPSILON); [EOL]     assertEquals(2.0, DataUtilities.calculateColumnTotal(table, 1, new int[] { 0 }), EPSILON); [EOL]     assertEquals(4.0, DataUtilities.calculateColumnTotal(table, 1, new int[] { 1 }), EPSILON); [EOL]     table.setValue(null, "R1", "C1"); [EOL]     assertEquals(2.0, DataUtilities.calculateColumnTotal(table, 1, new int[] { 0, 1 }), EPSILON); [EOL]     assertEquals(0.0, DataUtilities.calculateColumnTotal(table, 1, new int[] { 1 }), EPSILON); [EOL] } <line_num>: 100,127
public void testCalculateRowTotal() { [EOL]     DefaultKeyedValues2D table = new DefaultKeyedValues2D(); [EOL]     table.addValue(new Double(1.0), "R0", "C0"); [EOL]     table.addValue(new Double(2.0), "R0", "C1"); [EOL]     table.addValue(new Double(3.0), "R1", "C0"); [EOL]     table.addValue(new Double(4.0), "R1", "C1"); [EOL]     assertEquals(3.0, DataUtilities.calculateRowTotal(table, 0), EPSILON); [EOL]     assertEquals(7.0, DataUtilities.calculateRowTotal(table, 1), EPSILON); [EOL]     table.setValue(null, "R1", "C1"); [EOL]     assertEquals(3.0, DataUtilities.calculateRowTotal(table, 1), EPSILON); [EOL] } <line_num>: 132,142
public void testCalculateRowTotal2() { [EOL]     DefaultKeyedValues2D table = new DefaultKeyedValues2D(); [EOL]     table.addValue(new Double(1.0), "R0", "C0"); [EOL]     table.addValue(new Double(2.0), "R0", "C1"); [EOL]     table.addValue(new Double(3.0), "R1", "C0"); [EOL]     table.addValue(new Double(4.0), "R1", "C1"); [EOL]     assertEquals(3.0, DataUtilities.calculateRowTotal(table, 0, new int[] { 0, 1 }), EPSILON); [EOL]     assertEquals(1.0, DataUtilities.calculateRowTotal(table, 0, new int[] { 0 }), EPSILON); [EOL]     assertEquals(2.0, DataUtilities.calculateRowTotal(table, 0, new int[] { 1 }), EPSILON); [EOL]     assertEquals(0.0, DataUtilities.calculateRowTotal(table, 0, new int[] {}), EPSILON); [EOL]     assertEquals(7.0, DataUtilities.calculateRowTotal(table, 1, new int[] { 0, 1 }), EPSILON); [EOL]     assertEquals(3.0, DataUtilities.calculateRowTotal(table, 1, new int[] { 0 }), EPSILON); [EOL]     assertEquals(4.0, DataUtilities.calculateRowTotal(table, 1, new int[] { 1 }), EPSILON); [EOL]     assertEquals(0.0, DataUtilities.calculateRowTotal(table, 1, new int[] {}), EPSILON); [EOL]     table.setValue(null, "R1", "C1"); [EOL]     assertEquals(3.0, DataUtilities.calculateRowTotal(table, 1, new int[] { 0, 1 }), EPSILON); [EOL]     assertEquals(0.0, DataUtilities.calculateRowTotal(table, 1, new int[] { 1 }), EPSILON); [EOL] } <line_num>: 147,175
public void testEqual() { [EOL]     assertTrue(DataUtilities.equal(null, null)); [EOL]     double[][] a = new double[5][]; [EOL]     double[][] b = new double[5][]; [EOL]     assertTrue(DataUtilities.equal(a, b)); [EOL]     a = new double[4][]; [EOL]     assertFalse(DataUtilities.equal(a, b)); [EOL]     b = new double[4][]; [EOL]     assertTrue(DataUtilities.equal(a, b)); [EOL]     a[0] = new double[6]; [EOL]     assertFalse(DataUtilities.equal(a, b)); [EOL]     b[0] = new double[6]; [EOL]     assertTrue(DataUtilities.equal(a, b)); [EOL]     a[0][0] = 1.0; [EOL]     assertFalse(DataUtilities.equal(a, b)); [EOL]     b[0][0] = 1.0; [EOL]     assertTrue(DataUtilities.equal(a, b)); [EOL]     a[0][1] = Double.NaN; [EOL]     assertFalse(DataUtilities.equal(a, b)); [EOL]     b[0][1] = Double.NaN; [EOL]     assertTrue(DataUtilities.equal(a, b)); [EOL]     a[0][2] = Double.NEGATIVE_INFINITY; [EOL]     assertFalse(DataUtilities.equal(a, b)); [EOL]     b[0][2] = Double.NEGATIVE_INFINITY; [EOL]     assertTrue(DataUtilities.equal(a, b)); [EOL]     a[0][3] = Double.POSITIVE_INFINITY; [EOL]     assertFalse(DataUtilities.equal(a, b)); [EOL]     b[0][3] = Double.POSITIVE_INFINITY; [EOL]     assertTrue(DataUtilities.equal(a, b)); [EOL]     a[0][4] = Double.POSITIVE_INFINITY; [EOL]     assertFalse(DataUtilities.equal(a, b)); [EOL]     b[0][4] = Double.NEGATIVE_INFINITY; [EOL]     assertFalse(DataUtilities.equal(a, b)); [EOL]     b[0][4] = Double.POSITIVE_INFINITY; [EOL]     assertTrue(DataUtilities.equal(a, b)); [EOL] } <line_num>: 180,223
public void testClone() { [EOL]     double[][] a = new double[1][]; [EOL]     double[][] b = DataUtilities.clone(a); [EOL]     assertTrue(DataUtilities.equal(a, b)); [EOL]     a[0] = new double[] { 3.0, 4.0 }; [EOL]     assertFalse(DataUtilities.equal(a, b)); [EOL]     b[0] = new double[] { 3.0, 4.0 }; [EOL]     assertTrue(DataUtilities.equal(a, b)); [EOL]     a = new double[2][3]; [EOL]     a[0][0] = 1.23; [EOL]     a[1][1] = Double.NaN; [EOL]     b = DataUtilities.clone(a); [EOL]     assertTrue(DataUtilities.equal(a, b)); [EOL]     a[0][0] = 99.9; [EOL]     assertFalse(DataUtilities.equal(a, b)); [EOL]     b[0][0] = 99.9; [EOL]     assertTrue(DataUtilities.equal(a, b)); [EOL] } <line_num>: 228,247
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 254,256
