public KeyedObjects2DTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 78,80
public static Test suite() { [EOL]     return new TestSuite(KeyedObjects2DTests.class); [EOL] } <line_num>: 69,71
public void testEquals() { [EOL]     KeyedObjects2D k1 = new KeyedObjects2D(); [EOL]     KeyedObjects2D k2 = new KeyedObjects2D(); [EOL]     assertTrue(k1.equals(k2)); [EOL]     assertTrue(k2.equals(k1)); [EOL]     k1.addObject(new Integer(99), "R1", "C1"); [EOL]     assertFalse(k1.equals(k2)); [EOL]     k2.addObject(new Integer(99), "R1", "C1"); [EOL]     assertTrue(k1.equals(k2)); [EOL] } <line_num>: 85,95
public void testCloning() { [EOL]     KeyedObjects2D o1 = new KeyedObjects2D(); [EOL]     o1.setObject(new Integer(1), "V1", "C1"); [EOL]     o1.setObject(null, "V2", "C1"); [EOL]     o1.setObject(new Integer(3), "V3", "C2"); [EOL]     KeyedObjects2D o2 = null; [EOL]     try { [EOL]         o2 = (KeyedObjects2D) o1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(o1 != o2); [EOL]     assertTrue(o1.getClass() == o2.getClass()); [EOL]     assertTrue(o1.equals(o2)); [EOL]     o1.addObject("XX", "R1", "C1"); [EOL]     assertFalse(o1.equals(o2)); [EOL] } <line_num>: 100,119
public void testSerialization() { [EOL]     KeyedObjects2D ko2D1 = new KeyedObjects2D(); [EOL]     ko2D1.addObject(new Double(234.2), "Row1", "Col1"); [EOL]     ko2D1.addObject(null, "Row1", "Col2"); [EOL]     ko2D1.addObject(new Double(345.9), "Row2", "Col1"); [EOL]     ko2D1.addObject(new Double(452.7), "Row2", "Col2"); [EOL]     KeyedObjects2D ko2D2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(ko2D1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         ko2D2 = (KeyedObjects2D) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(ko2D1, ko2D2); [EOL] } <line_num>: 124,150
public void testGetValueByIndex() { [EOL]     KeyedObjects2D data = new KeyedObjects2D(); [EOL]     data.addObject("Obj1", "R1", "C1"); [EOL]     data.addObject("Obj2", "R2", "C2"); [EOL]     assertEquals("Obj1", data.getObject(0, 0)); [EOL]     assertEquals("Obj2", data.getObject(1, 1)); [EOL]     assertNull(data.getObject(0, 1)); [EOL]     assertNull(data.getObject(1, 0)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         data.getObject(-1, 0); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         data.getObject(0, -1); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         data.getObject(2, 0); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         data.getObject(0, 2); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 155,200
public void testGetValueByKey() { [EOL]     KeyedObjects2D data = new KeyedObjects2D(); [EOL]     data.addObject("Obj1", "R1", "C1"); [EOL]     data.addObject("Obj2", "R2", "C2"); [EOL]     assertEquals("Obj1", data.getObject("R1", "C1")); [EOL]     assertEquals("Obj2", data.getObject("R2", "C2")); [EOL]     assertNull(data.getObject("R1", "C2")); [EOL]     assertNull(data.getObject("R2", "C1")); [EOL]     boolean pass = false; [EOL]     try { [EOL]         data.getObject("XX", "C1"); [EOL]     } catch (UnknownKeyException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         data.getObject("R1", "XX"); [EOL]     } catch (UnknownKeyException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         data.getObject("XX", "C1"); [EOL]     } catch (UnknownKeyException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         data.getObject("R1", "XX"); [EOL]     } catch (UnknownKeyException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 205,250
public void testSetObject() { [EOL]     KeyedObjects2D data = new KeyedObjects2D(); [EOL]     data.setObject("Obj1", "R1", "C1"); [EOL]     data.setObject("Obj2", "R2", "C2"); [EOL]     assertEquals("Obj1", data.getObject("R1", "C1")); [EOL]     assertEquals("Obj2", data.getObject("R2", "C2")); [EOL]     assertNull(data.getObject("R1", "C2")); [EOL]     assertNull(data.getObject("R2", "C1")); [EOL]     data.setObject("ABC", "R2", "C2"); [EOL]     assertEquals("ABC", data.getObject("R2", "C2")); [EOL]     boolean pass = false; [EOL]     try { [EOL]         data.setObject("X", null, "C1"); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         data.setObject("X", "R1", null); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 255,286
public void testRemoveRowByIndex() { [EOL]     KeyedObjects2D data = new KeyedObjects2D(); [EOL]     data.setObject("Obj1", "R1", "C1"); [EOL]     data.setObject("Obj2", "R2", "C2"); [EOL]     data.removeRow(0); [EOL]     assertEquals(1, data.getRowCount()); [EOL]     assertEquals("Obj2", data.getObject(0, 1)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         data.removeRow(-1); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         data.removeRow(data.getRowCount()); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 291,318
public void testRemoveColumnByIndex() { [EOL]     KeyedObjects2D data = new KeyedObjects2D(); [EOL]     data.setObject("Obj1", "R1", "C1"); [EOL]     data.setObject("Obj2", "R2", "C2"); [EOL]     data.removeColumn(0); [EOL]     assertEquals(1, data.getColumnCount()); [EOL]     assertEquals("Obj2", data.getObject(1, 0)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         data.removeColumn(-1); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         data.removeColumn(data.getColumnCount()); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 323,350
public void testRemoveRowByKey() { [EOL]     KeyedObjects2D data = new KeyedObjects2D(); [EOL]     data.setObject("Obj1", "R1", "C1"); [EOL]     data.setObject("Obj2", "R2", "C2"); [EOL]     data.removeRow("R2"); [EOL]     assertEquals(1, data.getRowCount()); [EOL]     assertEquals("Obj1", data.getObject(0, 0)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         data.removeRow("XXX"); [EOL]     } catch (UnknownKeyException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         data.removeRow(null); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 355,382
public void testRemoveColumnByKey() { [EOL]     KeyedObjects2D data = new KeyedObjects2D(); [EOL]     data.setObject("Obj1", "R1", "C1"); [EOL]     data.setObject("Obj2", "R2", "C2"); [EOL]     data.removeColumn("C2"); [EOL]     assertEquals(1, data.getColumnCount()); [EOL]     assertEquals("Obj1", data.getObject(0, 0)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         data.removeColumn("XXX"); [EOL]     } catch (UnknownKeyException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         data.removeColumn(null); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 387,414
public void testRemoveValue() { [EOL]     KeyedObjects2D data = new KeyedObjects2D(); [EOL]     data.setObject("Obj1", "R1", "C1"); [EOL]     data.setObject("Obj2", "R2", "C2"); [EOL]     data.removeObject("R2", "C2"); [EOL]     assertEquals(1, data.getRowCount()); [EOL]     assertEquals(1, data.getColumnCount()); [EOL]     assertEquals("Obj1", data.getObject(0, 0)); [EOL] } <line_num>: 419,427
