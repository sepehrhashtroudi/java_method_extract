public KeyedObjectsTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 83,85
public static Test suite() { [EOL]     return new TestSuite(KeyedObjectsTests.class); [EOL] } <line_num>: 74,76
protected void setUp() { [EOL] } <line_num>: 90,92
public void testCloning() { [EOL]     KeyedObjects ko1 = new KeyedObjects(); [EOL]     ko1.addObject("V1", new Integer(1)); [EOL]     ko1.addObject("V2", null); [EOL]     ko1.addObject("V3", new Integer(3)); [EOL]     KeyedObjects ko2 = null; [EOL]     try { [EOL]         ko2 = (KeyedObjects) ko1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(ko1 != ko2); [EOL]     assertTrue(ko1.getClass() == ko2.getClass()); [EOL]     assertTrue(ko1.equals(ko2)); [EOL] } <line_num>: 97,112
public void testCloning2() { [EOL]     Object obj1 = new ArrayList(); [EOL]     KeyedObjects ko1 = new KeyedObjects(); [EOL]     ko1.addObject("K1", obj1); [EOL]     KeyedObjects ko2 = null; [EOL]     try { [EOL]         ko2 = (KeyedObjects) ko1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(ko1 != ko2); [EOL]     assertTrue(ko1.getClass() == ko2.getClass()); [EOL]     assertTrue(ko1.equals(ko2)); [EOL]     assertTrue(ko2.getObject("K1") == obj1); [EOL]     obj1 = new DefaultPieDataset(); [EOL]     ko1 = new KeyedObjects(); [EOL]     ko1.addObject("K1", obj1); [EOL]     ko2 = null; [EOL]     try { [EOL]         ko2 = (KeyedObjects) ko1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(ko1 != ko2); [EOL]     assertTrue(ko1.getClass() == ko2.getClass()); [EOL]     assertTrue(ko1.equals(ko2)); [EOL]     assertTrue(ko2.getObject("K1") != obj1); [EOL] } <line_num>: 117,153
public void testInsertAndRetrieve() { [EOL]     KeyedObjects data = new KeyedObjects(); [EOL]     data.addObject("A", new Double(1.0)); [EOL]     data.addObject("B", new Double(2.0)); [EOL]     data.addObject("C", new Double(3.0)); [EOL]     data.addObject("D", null); [EOL]     assertEquals(data.getKey(0), "A"); [EOL]     assertEquals(data.getKey(1), "B"); [EOL]     assertEquals(data.getKey(2), "C"); [EOL]     assertEquals(data.getKey(3), "D"); [EOL]     assertEquals(data.getObject("A"), new Double(1.0)); [EOL]     assertEquals(data.getObject("B"), new Double(2.0)); [EOL]     assertEquals(data.getObject("C"), new Double(3.0)); [EOL]     assertEquals(data.getObject("D"), null); [EOL]     boolean pass = false; [EOL]     try { [EOL]         data.getObject("Not a key"); [EOL]     } catch (UnknownKeyException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     assertEquals(data.getObject(0), new Double(1.0)); [EOL]     assertEquals(data.getObject(1), new Double(2.0)); [EOL]     assertEquals(data.getObject(2), new Double(3.0)); [EOL]     assertEquals(data.getObject(3), null); [EOL] } <line_num>: 158,193
public void testSerialization() { [EOL]     KeyedObjects ko1 = new KeyedObjects(); [EOL]     ko1.addObject("Key 1", "Object 1"); [EOL]     ko1.addObject("Key 2", null); [EOL]     ko1.addObject("Key 3", "Object 2"); [EOL]     KeyedObjects ko2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(ko1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         ko2 = (KeyedObjects) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(ko1, ko2); [EOL] } <line_num>: 198,223
public void testGetObject() { [EOL]     KeyedObjects ko1 = new KeyedObjects(); [EOL]     ko1.addObject("Key 1", "Object 1"); [EOL]     ko1.addObject("Key 2", null); [EOL]     ko1.addObject("Key 3", "Object 2"); [EOL]     assertEquals("Object 1", ko1.getObject(0)); [EOL]     assertNull(ko1.getObject(1)); [EOL]     assertEquals("Object 2", ko1.getObject(2)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         ko1.getObject(-1); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         ko1.getObject(3); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 228,257
public void testGetKey() { [EOL]     KeyedObjects ko1 = new KeyedObjects(); [EOL]     ko1.addObject("Key 1", "Object 1"); [EOL]     ko1.addObject("Key 2", null); [EOL]     ko1.addObject("Key 3", "Object 2"); [EOL]     assertEquals("Key 1", ko1.getKey(0)); [EOL]     assertEquals("Key 2", ko1.getKey(1)); [EOL]     assertEquals("Key 3", ko1.getKey(2)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         ko1.getKey(-1); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         ko1.getKey(3); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 262,291
public void testGetIndex() { [EOL]     KeyedObjects ko1 = new KeyedObjects(); [EOL]     ko1.addObject("Key 1", "Object 1"); [EOL]     ko1.addObject("Key 2", null); [EOL]     ko1.addObject("Key 3", "Object 2"); [EOL]     assertEquals(0, ko1.getIndex("Key 1")); [EOL]     assertEquals(1, ko1.getIndex("Key 2")); [EOL]     assertEquals(2, ko1.getIndex("Key 3")); [EOL]     boolean pass = false; [EOL]     try { [EOL]         ko1.getIndex(null); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 296,314
public void testSetObject() { [EOL]     KeyedObjects ko1 = new KeyedObjects(); [EOL]     ko1.setObject("Key 1", "Object 1"); [EOL]     ko1.setObject("Key 2", null); [EOL]     ko1.setObject("Key 3", "Object 2"); [EOL]     assertEquals("Object 1", ko1.getObject("Key 1")); [EOL]     assertEquals(null, ko1.getObject("Key 2")); [EOL]     assertEquals("Object 2", ko1.getObject("Key 3")); [EOL]     ko1.setObject("Key 2", "AAA"); [EOL]     ko1.setObject("Key 3", "BBB"); [EOL]     assertEquals("AAA", ko1.getObject("Key 2")); [EOL]     assertEquals("BBB", ko1.getObject("Key 3")); [EOL]     boolean pass = false; [EOL]     try { [EOL]         ko1.setObject(null, "XX"); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 319,344
public void testRemoveValue() { [EOL]     KeyedObjects ko1 = new KeyedObjects(); [EOL]     ko1.setObject("Key 1", "Object 1"); [EOL]     ko1.setObject("Key 2", null); [EOL]     ko1.setObject("Key 3", "Object 2"); [EOL]     ko1.removeValue(1); [EOL]     assertEquals(2, ko1.getItemCount()); [EOL]     assertEquals(1, ko1.getIndex("Key 3")); [EOL]     ko1.removeValue("Key 1"); [EOL]     assertEquals(1, ko1.getItemCount()); [EOL]     assertEquals(0, ko1.getIndex("Key 3")); [EOL]     boolean pass = false; [EOL]     try { [EOL]         ko1.removeValue("UNKNOWN"); [EOL]     } catch (UnknownKeyException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         ko1.removeValue(null); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 349,382
public void testRemoveValueInt() { [EOL]     KeyedObjects ko1 = new KeyedObjects(); [EOL]     ko1.setObject("Key 1", "Object 1"); [EOL]     ko1.setObject("Key 2", null); [EOL]     ko1.setObject("Key 3", "Object 2"); [EOL]     ko1.removeValue(1); [EOL]     assertEquals(2, ko1.getItemCount()); [EOL]     assertEquals(1, ko1.getIndex("Key 3")); [EOL]     boolean pass = false; [EOL]     try { [EOL]         ko1.removeValue(-1); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         ko1.removeValue(2); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 387,417
public void testSortByKeyAscending() { [EOL]     KeyedObjects data = new KeyedObjects(); [EOL]     data.addObject("C", new Double(1.0)); [EOL]     data.addObject("B", null); [EOL]     data.addObject("D", new Double(3.0)); [EOL]     data.addObject("A", new Double(2.0)); [EOL]     data.sortByKeys(SortOrder.ASCENDING); [EOL]     assertEquals("A", data.getKey(0)); [EOL]     assertEquals("B", data.getKey(1)); [EOL]     assertEquals("C", data.getKey(2)); [EOL]     assertEquals("D", data.getKey(3)); [EOL]     assertEquals(data.getObject("A"), new Double(2.0)); [EOL]     assertEquals(data.getObject("B"), null); [EOL]     assertEquals(data.getObject("C"), new Double(1.0)); [EOL]     assertEquals(data.getObject("D"), new Double(3.0)); [EOL]     assertEquals(data.getObject(0), new Double(2.0)); [EOL]     assertEquals(data.getObject(1), null); [EOL]     assertEquals(data.getObject(2), new Double(1.0)); [EOL]     assertEquals(data.getObject(3), new Double(3.0)); [EOL] } <line_num>: 422,448
public void testSortByKeyDescending() { [EOL]     KeyedObjects data = new KeyedObjects(); [EOL]     data.addObject("C", new Double(1.0)); [EOL]     data.addObject("B", null); [EOL]     data.addObject("D", new Double(3.0)); [EOL]     data.addObject("A", new Double(2.0)); [EOL]     data.sortByKeys(SortOrder.DESCENDING); [EOL]     assertEquals(data.getKey(0), "D"); [EOL]     assertEquals(data.getKey(1), "C"); [EOL]     assertEquals(data.getKey(2), "B"); [EOL]     assertEquals(data.getKey(3), "A"); [EOL]     assertEquals(data.getObject("A"), new Double(2.0)); [EOL]     assertEquals(data.getObject("B"), null); [EOL]     assertEquals(data.getObject("C"), new Double(1.0)); [EOL]     assertEquals(data.getObject("D"), new Double(3.0)); [EOL]     assertEquals(data.getObject(0), new Double(3.0)); [EOL]     assertEquals(data.getObject(1), new Double(1.0)); [EOL]     assertEquals(data.getObject(2), null); [EOL]     assertEquals(data.getObject(3), new Double(2.0)); [EOL] } <line_num>: 453,479
public void testSortByValueAscending() { [EOL]     KeyedObjects data = new KeyedObjects(); [EOL]     data.addObject("C", new Double(1.0)); [EOL]     data.addObject("B", null); [EOL]     data.addObject("D", new Double(3.0)); [EOL]     data.addObject("A", new Double(2.0)); [EOL]     data.sortByObjects(SortOrder.ASCENDING); [EOL]     assertEquals(data.getKey(0), "C"); [EOL]     assertEquals(data.getKey(1), "A"); [EOL]     assertEquals(data.getKey(2), "D"); [EOL]     assertEquals(data.getKey(3), "B"); [EOL]     assertEquals(data.getObject("A"), new Double(2.0)); [EOL]     assertEquals(data.getObject("B"), null); [EOL]     assertEquals(data.getObject("C"), new Double(1.0)); [EOL]     assertEquals(data.getObject("D"), new Double(3.0)); [EOL]     assertEquals(data.getObject(0), new Double(1.0)); [EOL]     assertEquals(data.getObject(1), new Double(2.0)); [EOL]     assertEquals(data.getObject(2), new Double(3.0)); [EOL]     assertEquals(data.getObject(3), null); [EOL] } <line_num>: 484,510
public void testSortByValueDescending() { [EOL]     KeyedObjects data = new KeyedObjects(); [EOL]     data.addObject("C", new Double(1.0)); [EOL]     data.addObject("B", null); [EOL]     data.addObject("D", new Double(3.0)); [EOL]     data.addObject("A", new Double(2.0)); [EOL]     data.sortByObjects(SortOrder.DESCENDING); [EOL]     assertEquals(data.getKey(0), "D"); [EOL]     assertEquals(data.getKey(1), "A"); [EOL]     assertEquals(data.getKey(2), "C"); [EOL]     assertEquals(data.getKey(3), "B"); [EOL]     assertEquals(data.getObject("A"), new Double(2.0)); [EOL]     assertEquals(data.getObject("B"), null); [EOL]     assertEquals(data.getObject("C"), new Double(1.0)); [EOL]     assertEquals(data.getObject("D"), new Double(3.0)); [EOL]     assertEquals(data.getObject(0), new Double(3.0)); [EOL]     assertEquals(data.getObject(1), new Double(2.0)); [EOL]     assertEquals(data.getObject(2), new Double(1.0)); [EOL]     assertEquals(data.getObject(3), null); [EOL] } <line_num>: 515,541
