public MyComparableObjectSeries(Comparable key) { [EOL]     super(key); [EOL] } <line_num>: 69,71
public MyComparableObjectSeries(Comparable key, boolean autoSort, boolean allowDuplicateXValues) { [EOL]     super(key, autoSort, allowDuplicateXValues); [EOL] } <line_num>: 79,82
public ComparableObjectSeriesTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 106,108
public void add(Comparable x, Object y) { [EOL]     super.add(x, y); [EOL] } <line_num>: 83,85
public ComparableObjectItem remove(Comparable x) { [EOL]     return super.remove(x); [EOL] } <line_num>: 87,89
public static Test suite() { [EOL]     return new TestSuite(ComparableObjectSeriesTests.class); [EOL] } <line_num>: 97,99
public void testConstructor1() { [EOL]     ComparableObjectSeries s1 = new ComparableObjectSeries("s1"); [EOL]     assertEquals("s1", s1.getKey()); [EOL]     assertNull(s1.getDescription()); [EOL]     assertTrue(s1.getAllowDuplicateXValues()); [EOL]     assertTrue(s1.getAutoSort()); [EOL]     assertEquals(0, s1.getItemCount()); [EOL]     assertEquals(Integer.MAX_VALUE, s1.getMaximumItemCount()); [EOL]     boolean pass = false; [EOL]     try { [EOL]         s1 = new ComparableObjectSeries(null); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 113,131
public void testEquals() { [EOL]     MyComparableObjectSeries s1 = new MyComparableObjectSeries("A"); [EOL]     MyComparableObjectSeries s2 = new MyComparableObjectSeries("A"); [EOL]     assertTrue(s1.equals(s2)); [EOL]     assertTrue(s2.equals(s1)); [EOL]     s1 = new MyComparableObjectSeries("B"); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2 = new MyComparableObjectSeries("B"); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1 = new MyComparableObjectSeries("B", false, true); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2 = new MyComparableObjectSeries("B", false, true); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1 = new MyComparableObjectSeries("B", false, false); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2 = new MyComparableObjectSeries("B", false, false); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1.add(new Integer(1), "ABC"); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.add(new Integer(1), "ABC"); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1.add(new Integer(0), "DEF"); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.add(new Integer(0), "DEF"); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1.remove(new Integer(1)); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.remove(new Integer(1)); [EOL]     assertTrue(s1.equals(s2)); [EOL] } <line_num>: 136,177
public void testCloning() { [EOL]     MyComparableObjectSeries s1 = new MyComparableObjectSeries("A"); [EOL]     s1.add(new Integer(1), "ABC"); [EOL]     MyComparableObjectSeries s2 = null; [EOL]     try { [EOL]         s2 = (MyComparableObjectSeries) s1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(s1 != s2); [EOL]     assertTrue(s1.getClass() == s2.getClass()); [EOL]     assertTrue(s1.equals(s2)); [EOL] } <line_num>: 182,195
public void testSerialization() { [EOL]     MyComparableObjectSeries s1 = new MyComparableObjectSeries("A"); [EOL]     s1.add(new Integer(1), "ABC"); [EOL]     MyComparableObjectSeries s2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(s1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         s2 = (MyComparableObjectSeries) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(s1, s2); [EOL] } <line_num>: 200,219
public void testHashCode() { [EOL]     MyComparableObjectSeries s1 = new MyComparableObjectSeries("Test"); [EOL]     MyComparableObjectSeries s2 = new MyComparableObjectSeries("Test"); [EOL]     assertEquals(s1, s2); [EOL]     assertEquals(s1.hashCode(), s2.hashCode()); [EOL]     s1.add("A", "1"); [EOL]     s2.add("A", "1"); [EOL]     assertEquals(s1, s2); [EOL]     assertEquals(s1.hashCode(), s2.hashCode()); [EOL]     s1.add("B", null); [EOL]     s2.add("B", null); [EOL]     assertEquals(s1, s2); [EOL]     assertEquals(s1.hashCode(), s2.hashCode()); [EOL]     s1.add("C", "3"); [EOL]     s2.add("C", "3"); [EOL]     assertEquals(s1, s2); [EOL]     assertEquals(s1.hashCode(), s2.hashCode()); [EOL]     s1.add("D", "4"); [EOL]     s2.add("D", "4"); [EOL]     assertEquals(s1, s2); [EOL]     assertEquals(s1.hashCode(), s2.hashCode()); [EOL] } <line_num>: 224,249
