public DefaultKeyedValues2DTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 82,84
public static Test suite() { [EOL]     return new TestSuite(DefaultKeyedValues2DTests.class); [EOL] } <line_num>: 73,75
public void testGetValue() { [EOL]     DefaultKeyedValues2D d = new DefaultKeyedValues2D(); [EOL]     d.addValue(new Double(1.0), "R1", "C1"); [EOL]     assertEquals(new Double(1.0), d.getValue("R1", "C1")); [EOL]     boolean pass = false; [EOL]     try { [EOL]         d.getValue("XX", "C1"); [EOL]     } catch (UnknownKeyException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         d.getValue("R1", "XX"); [EOL]     } catch (UnknownKeyException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 89,110
public void testCloning() { [EOL]     DefaultKeyedValues2D v1 = new DefaultKeyedValues2D(); [EOL]     v1.setValue(new Integer(1), "V1", "C1"); [EOL]     v1.setValue(null, "V2", "C1"); [EOL]     v1.setValue(new Integer(3), "V3", "C2"); [EOL]     DefaultKeyedValues2D v2 = null; [EOL]     try { [EOL]         v2 = (DefaultKeyedValues2D) v1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(v1 != v2); [EOL]     assertTrue(v1.getClass() == v2.getClass()); [EOL]     assertTrue(v1.equals(v2)); [EOL]     v2.setValue(new Integer(2), "V2", "C1"); [EOL]     assertFalse(v1.equals(v2)); [EOL] } <line_num>: 115,134
public void testSerialization() { [EOL]     DefaultKeyedValues2D kv2D1 = new DefaultKeyedValues2D(); [EOL]     kv2D1.addValue(new Double(234.2), "Row1", "Col1"); [EOL]     kv2D1.addValue(null, "Row1", "Col2"); [EOL]     kv2D1.addValue(new Double(345.9), "Row2", "Col1"); [EOL]     kv2D1.addValue(new Double(452.7), "Row2", "Col2"); [EOL]     DefaultKeyedValues2D kv2D2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(kv2D1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         kv2D2 = (DefaultKeyedValues2D) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(kv2D1, kv2D2); [EOL] } <line_num>: 139,165
public void testEquals() { [EOL]     DefaultKeyedValues2D d1 = new DefaultKeyedValues2D(); [EOL]     DefaultKeyedValues2D d2 = new DefaultKeyedValues2D(); [EOL]     assertTrue(d1.equals(d2)); [EOL]     assertTrue(d2.equals(d1)); [EOL]     d1.addValue(new Double(1.0), new Double(2.0), "S1"); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.addValue(new Double(1.0), new Double(2.0), "S1"); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 170,180
public void testSparsePopulation() { [EOL]     DefaultKeyedValues2D d = new DefaultKeyedValues2D(); [EOL]     d.addValue(new Integer(11), "R1", "C1"); [EOL]     d.addValue(new Integer(22), "R2", "C2"); [EOL]     assertEquals(new Integer(11), d.getValue("R1", "C1")); [EOL]     assertNull(d.getValue("R1", "C2")); [EOL]     assertEquals(new Integer(22), d.getValue("R2", "C2")); [EOL]     assertNull(d.getValue("R2", "C1")); [EOL] } <line_num>: 186,195
public void testRowCount() { [EOL]     DefaultKeyedValues2D d = new DefaultKeyedValues2D(); [EOL]     assertEquals(0, d.getRowCount()); [EOL]     d.addValue(new Double(1.0), "R1", "C1"); [EOL]     assertEquals(1, d.getRowCount()); [EOL]     d.addValue(new Double(2.0), "R2", "C1"); [EOL]     assertEquals(2, d.getRowCount()); [EOL] } <line_num>: 200,207
public void testColumnCount() { [EOL]     DefaultKeyedValues2D d = new DefaultKeyedValues2D(); [EOL]     assertEquals(0, d.getColumnCount()); [EOL]     d.addValue(new Double(1.0), "R1", "C1"); [EOL]     assertEquals(1, d.getColumnCount()); [EOL]     d.addValue(new Double(2.0), "R1", "C2"); [EOL]     assertEquals(2, d.getColumnCount()); [EOL] } <line_num>: 212,219
public void testGetValue2() { [EOL]     DefaultKeyedValues2D d = new DefaultKeyedValues2D(); [EOL]     boolean pass = false; [EOL]     try { [EOL]         d.getValue(0, 0); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     d.addValue(new Double(1.0), "R1", "C1"); [EOL]     assertEquals(1.0, d.getValue(0, 0).doubleValue(), EPSILON); [EOL]     d.addValue(new Double(2.0), "R2", "C2"); [EOL]     assertEquals(2.0, d.getValue(1, 1).doubleValue(), EPSILON); [EOL]     assertNull(d.getValue(1, 0)); [EOL]     assertNull(d.getValue(0, 1)); [EOL]     pass = false; [EOL]     try { [EOL]         d.getValue(2, 0); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 226,251
public void testGetRowKey() { [EOL]     DefaultKeyedValues2D d = new DefaultKeyedValues2D(); [EOL]     boolean pass = false; [EOL]     try { [EOL]         d.getRowKey(0); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     d.addValue(new Double(1.0), "R1", "C1"); [EOL]     d.addValue(new Double(1.0), "R2", "C1"); [EOL]     assertEquals("R1", d.getRowKey(0)); [EOL]     assertEquals("R2", d.getRowKey(1)); [EOL]     d = new DefaultKeyedValues2D(true); [EOL]     d.addValue(new Double(1.0), "R1", "C1"); [EOL]     assertEquals("R1", d.getRowKey(0)); [EOL]     d.addValue(new Double(0.0), "R0", "C1"); [EOL]     assertEquals("R0", d.getRowKey(0)); [EOL]     assertEquals("R1", d.getRowKey(1)); [EOL] } <line_num>: 256,278
public void testGetColumnKey() { [EOL]     DefaultKeyedValues2D d = new DefaultKeyedValues2D(); [EOL]     boolean pass = false; [EOL]     try { [EOL]         d.getColumnKey(0); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     d.addValue(new Double(1.0), "R1", "C1"); [EOL]     d.addValue(new Double(1.0), "R1", "C2"); [EOL]     assertEquals("C1", d.getColumnKey(0)); [EOL]     assertEquals("C2", d.getColumnKey(1)); [EOL] } <line_num>: 283,297
public void testRemoveValue() { [EOL]     DefaultKeyedValues2D d = new DefaultKeyedValues2D(); [EOL]     d.removeValue("R1", "C1"); [EOL]     d.addValue(new Double(1.0), "R1", "C1"); [EOL]     d.removeValue("R1", "C1"); [EOL]     assertEquals(0, d.getRowCount()); [EOL]     assertEquals(0, d.getColumnCount()); [EOL]     d.addValue(new Double(1.0), "R1", "C1"); [EOL]     d.addValue(new Double(2.0), "R2", "C1"); [EOL]     d.removeValue("R1", "C1"); [EOL]     assertEquals(new Double(2.0), d.getValue(0, 0)); [EOL] } <line_num>: 302,314
public void testRemoveValueBug1690654() { [EOL]     DefaultKeyedValues2D d = new DefaultKeyedValues2D(); [EOL]     d.addValue(new Double(1.0), "R1", "C1"); [EOL]     d.addValue(new Double(2.0), "R2", "C2"); [EOL]     assertEquals(2, d.getColumnCount()); [EOL]     assertEquals(2, d.getRowCount()); [EOL]     d.removeValue("R2", "C2"); [EOL]     assertEquals(1, d.getColumnCount()); [EOL]     assertEquals(1, d.getRowCount()); [EOL]     assertEquals(new Double(1.0), d.getValue(0, 0)); [EOL] } <line_num>: 319,329
public void testRemoveRow() { [EOL]     DefaultKeyedValues2D d = new DefaultKeyedValues2D(); [EOL]     boolean pass = false; [EOL]     try { [EOL]         d.removeRow(0); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 334,344
public void testRemoveColumnByKey() { [EOL]     DefaultKeyedValues2D d = new DefaultKeyedValues2D(); [EOL]     d.addValue(new Double(1.0), "R1", "C1"); [EOL]     d.addValue(new Double(2.0), "R2", "C2"); [EOL]     d.removeColumn("C2"); [EOL]     d.addValue(new Double(3.0), "R2", "C2"); [EOL]     assertEquals(3.0, d.getValue("R2", "C2").doubleValue(), EPSILON); [EOL]     boolean pass = false; [EOL]     try { [EOL]         d.removeColumn("XXX"); [EOL]     } catch (UnknownKeyException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 349,366
