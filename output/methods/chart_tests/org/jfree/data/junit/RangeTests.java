public RangeTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 76,78
public static Test suite() { [EOL]     return new TestSuite(RangeTests.class); [EOL] } <line_num>: 67,69
public void testConstructor() { [EOL]     Range r1 = new Range(0.1, 1000.0); [EOL]     assertEquals(r1.getLowerBound(), 0.1, 0.0d); [EOL]     assertEquals(r1.getUpperBound(), 1000.0, 0.0d); [EOL]     try { [EOL]         new Range(10.0, 0.0); [EOL]         fail("Lower bound cannot be greater than the upper"); [EOL]     } catch (Exception e) { [EOL]     } [EOL] } <line_num>: 83,95
public void testEquals() { [EOL]     Range r1 = new Range(0.0, 1.0); [EOL]     Range r2 = new Range(0.0, 1.0); [EOL]     assertEquals(r1, r2); [EOL]     assertEquals(r2, r1); [EOL]     r1 = new Range(0.0, 1.0); [EOL]     r2 = new Range(0.5, 1.0); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r1 = new Range(0.0, 1.0); [EOL]     r2 = new Range(0.0, 2.0); [EOL]     assertFalse(r1.equals(r2)); [EOL]     assertFalse(r1.equals(new Double(0.0))); [EOL] } <line_num>: 100,116
public void testHashCode() { [EOL]     Range a1 = new Range(1.0, 100.0); [EOL]     Range a2 = new Range(1.0, 100.0); [EOL]     assertEquals(a1.hashCode(), a2.hashCode()); [EOL]     a1 = new Range(-100.0, 2.0); [EOL]     a2 = new Range(-100.0, 2.0); [EOL]     assertEquals(a1.hashCode(), a2.hashCode()); [EOL] } <line_num>: 121,129
public void testContains() { [EOL]     Range r1 = new Range(0.0, 1.0); [EOL]     assertFalse(r1.contains(Double.NaN)); [EOL]     assertFalse(r1.contains(Double.NEGATIVE_INFINITY)); [EOL]     assertFalse(r1.contains(-1.0)); [EOL]     assertTrue(r1.contains(0.0)); [EOL]     assertTrue(r1.contains(0.5)); [EOL]     assertTrue(r1.contains(1.0)); [EOL]     assertFalse(r1.contains(2.0)); [EOL]     assertFalse(r1.contains(Double.POSITIVE_INFINITY)); [EOL] } <line_num>: 134,144
public void testConstrain() { [EOL]     Range r1 = new Range(0.0, 1.0); [EOL]     double d = r1.constrain(0.5); [EOL]     assertEquals(0.5, d, 0.0000001); [EOL]     d = r1.constrain(0.0); [EOL]     assertEquals(0.0, d, 0.0000001); [EOL]     d = r1.constrain(1.0); [EOL]     assertEquals(1.0, d, 0.0000001); [EOL]     d = r1.constrain(-1.0); [EOL]     assertEquals(0.0, d, 0.0000001); [EOL]     d = r1.constrain(2.0); [EOL]     assertEquals(1.0, d, 0.0000001); [EOL]     d = r1.constrain(Double.POSITIVE_INFINITY); [EOL]     assertEquals(1.0, d, 0.0000001); [EOL]     d = r1.constrain(Double.NEGATIVE_INFINITY); [EOL]     assertEquals(0.0, d, 0.0000001); [EOL]     d = r1.constrain(Double.NaN); [EOL]     assertTrue(Double.isNaN(d)); [EOL] } <line_num>: 149,175
public void testIntersects() { [EOL]     Range r1 = new Range(0.0, 1.0); [EOL]     assertFalse(r1.intersects(-2.0, -1.0)); [EOL]     assertFalse(r1.intersects(-2.0, 0.0)); [EOL]     assertTrue(r1.intersects(-2.0, 0.5)); [EOL]     assertTrue(r1.intersects(-2.0, 1.0)); [EOL]     assertTrue(r1.intersects(-2.0, 1.5)); [EOL]     assertTrue(r1.intersects(0.0, 0.5)); [EOL]     assertTrue(r1.intersects(0.0, 1.0)); [EOL]     assertTrue(r1.intersects(0.0, 1.5)); [EOL]     assertTrue(r1.intersects(0.5, 0.6)); [EOL]     assertTrue(r1.intersects(0.5, 1.0)); [EOL]     assertTrue(r1.intersects(0.5, 1.5)); [EOL]     assertFalse(r1.intersects(1.0, 1.1)); [EOL]     assertFalse(r1.intersects(1.5, 2.0)); [EOL] } <line_num>: 180,195
public void testExpand() { [EOL]     Range r1 = new Range(0.0, 100.0); [EOL]     Range r2 = Range.expand(r1, 0.10, 0.10); [EOL]     assertEquals(-10.0, r2.getLowerBound(), 0.001); [EOL]     assertEquals(110.0, r2.getUpperBound(), 0.001); [EOL]     r2 = Range.expand(r1, 0.0, 0.0); [EOL]     assertEquals(r1, r2); [EOL]     try { [EOL]         Range.expand(null, 0.1, 0.1); [EOL]         fail("Null value is accepted"); [EOL]     } catch (Exception e) { [EOL]     } [EOL]     r2 = Range.expand(r1, -0.8, -0.5); [EOL]     assertEquals(65.0, r2.getLowerBound(), 0.001); [EOL]     assertEquals(65.0, r2.getUpperBound(), 0.001); [EOL] } <line_num>: 200,221
public void testShift() { [EOL]     Range r1 = new Range(10.0, 20.0); [EOL]     Range r2 = Range.shift(r1, 20.0); [EOL]     assertEquals(30.0, r2.getLowerBound(), 0.001); [EOL]     assertEquals(40.0, r2.getUpperBound(), 0.001); [EOL]     r1 = new Range(0.0, 100.0); [EOL]     r2 = Range.shift(r1, -50.0, true); [EOL]     assertEquals(-50.0, r2.getLowerBound(), 0.001); [EOL]     assertEquals(50.0, r2.getUpperBound(), 0.001); [EOL]     r1 = new Range(-10.0, 20.0); [EOL]     r2 = Range.shift(r1, 20.0, true); [EOL]     assertEquals(10.0, r2.getLowerBound(), 0.001); [EOL]     assertEquals(40.0, r2.getUpperBound(), 0.001); [EOL]     r1 = new Range(-10.0, 20.0); [EOL]     r2 = Range.shift(r1, -30.0, true); [EOL]     assertEquals(-40.0, r2.getLowerBound(), 0.001); [EOL]     assertEquals(-10.0, r2.getUpperBound(), 0.001); [EOL]     r1 = new Range(-10.0, 20.0); [EOL]     r2 = Range.shift(r1, 20.0, false); [EOL]     assertEquals(0.0, r2.getLowerBound(), 0.001); [EOL]     assertEquals(40.0, r2.getUpperBound(), 0.001); [EOL]     r1 = new Range(-10.0, 20.0); [EOL]     r2 = Range.shift(r1, -30.0, false); [EOL]     assertEquals(-40.0, r2.getLowerBound(), 0.001); [EOL]     assertEquals(0.0, r2.getUpperBound(), 0.001); [EOL]     r2 = Range.shift(r1, 0.0); [EOL]     assertEquals(r1, r2); [EOL]     try { [EOL]         Range.shift(null, 0.1); [EOL]         fail("Null value is accepted"); [EOL]     } catch (Exception e) { [EOL]     } [EOL] } <line_num>: 226,267
public void testScale() { [EOL]     Range r1 = new Range(0.0, 100.0); [EOL]     Range r2 = Range.scale(r1, 0.10); [EOL]     assertEquals(0.0, r2.getLowerBound(), 0.001); [EOL]     assertEquals(10.0, r2.getUpperBound(), 0.001); [EOL]     r1 = new Range(-10.0, 100.0); [EOL]     r2 = Range.scale(r1, 2.0); [EOL]     assertEquals(-20.0, r2.getLowerBound(), 0.001); [EOL]     assertEquals(200.0, r2.getUpperBound(), 0.001); [EOL]     r2 = Range.scale(r1, 1.0); [EOL]     assertEquals(r1, r2); [EOL]     try { [EOL]         Range.scale(null, 0.1); [EOL]         fail("Null value is accepted"); [EOL]     } catch (Exception e) { [EOL]     } [EOL]     try { [EOL]         Range.scale(r1, -0.5); [EOL]         fail("Negative factor accepted"); [EOL]     } catch (Exception e) { [EOL]     } [EOL] } <line_num>: 272,300
public void testSerialization() { [EOL]     Range r1 = new Range(25.0, 133.42); [EOL]     Range r2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(r1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         r2 = (Range) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         System.out.println(e.toString()); [EOL]         fail("Serialization is not supported"); [EOL]     } [EOL]     assertEquals(r1, r2); [EOL] } <line_num>: 305,328
