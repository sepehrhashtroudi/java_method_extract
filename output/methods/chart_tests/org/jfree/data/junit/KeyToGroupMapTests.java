public KeyToGroupMapTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 75,77
public static Test suite() { [EOL]     return new TestSuite(KeyToGroupMapTests.class); [EOL] } <line_num>: 66,68
public void testMapKeyToGroup() { [EOL]     KeyToGroupMap m1 = new KeyToGroupMap("G1"); [EOL]     m1.mapKeyToGroup("K1", "G1"); [EOL]     assertEquals("G1", m1.getGroup("K1")); [EOL]     m1.mapKeyToGroup("K2", "G2"); [EOL]     assertEquals("G2", m1.getGroup("K2")); [EOL]     m1.mapKeyToGroup("K2", null); [EOL]     assertEquals("G1", m1.getGroup("K2")); [EOL]     boolean pass = false; [EOL]     try { [EOL]         m1.mapKeyToGroup(null, "G1"); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 82,107
public void testGroupCount() { [EOL]     KeyToGroupMap m1 = new KeyToGroupMap("Default Group"); [EOL]     assertEquals(1, m1.getGroupCount()); [EOL]     m1.mapKeyToGroup("C1", "G1"); [EOL]     assertEquals(2, m1.getGroupCount()); [EOL]     m1.mapKeyToGroup("C2", "Default Group"); [EOL]     assertEquals(2, m1.getGroupCount()); [EOL]     m1.mapKeyToGroup("C3", "Default Group"); [EOL]     m1.mapKeyToGroup("C4", "G2"); [EOL]     m1.mapKeyToGroup("C5", "G2"); [EOL]     m1.mapKeyToGroup("C6", "Default Group"); [EOL]     assertEquals(3, m1.getGroupCount()); [EOL]     m1.mapKeyToGroup("C4", "G1"); [EOL]     m1.mapKeyToGroup("C5", "G1"); [EOL]     assertEquals(2, m1.getGroupCount()); [EOL] } <line_num>: 113,140
public void testKeyCount() { [EOL]     KeyToGroupMap m1 = new KeyToGroupMap("Default Group"); [EOL]     assertEquals(0, m1.getKeyCount("Default Group")); [EOL]     m1.mapKeyToGroup("K1", "G1"); [EOL]     assertEquals(1, m1.getKeyCount("G1")); [EOL]     m1.mapKeyToGroup("K1", null); [EOL]     assertEquals(0, m1.getKeyCount("G1")); [EOL]     m1.mapKeyToGroup("K2", "Default Group"); [EOL]     assertEquals(1, m1.getKeyCount("Default Group")); [EOL]     m1.mapKeyToGroup("K3", "Default Group"); [EOL]     m1.mapKeyToGroup("K4", "G2"); [EOL]     m1.mapKeyToGroup("K5", "G2"); [EOL]     m1.mapKeyToGroup("K6", "Default Group"); [EOL]     assertEquals(3, m1.getKeyCount("Default Group")); [EOL]     assertEquals(2, m1.getKeyCount("G2")); [EOL]     m1.mapKeyToGroup("K4", "G1"); [EOL]     m1.mapKeyToGroup("K5", "G1"); [EOL]     assertEquals(2, m1.getKeyCount("G1")); [EOL]     assertEquals(0, m1.getKeyCount("G2")); [EOL] } <line_num>: 146,175
public void testGetGroupIndex() { [EOL]     KeyToGroupMap m1 = new KeyToGroupMap("Default Group"); [EOL]     assertEquals(0, m1.getGroupIndex("Default Group")); [EOL]     assertEquals(-1, m1.getGroupIndex("G3")); [EOL]     m1.mapKeyToGroup("K3", "G3"); [EOL]     m1.mapKeyToGroup("K1", "G1"); [EOL]     m1.mapKeyToGroup("K2", "G2"); [EOL]     assertEquals(1, m1.getGroupIndex("G3")); [EOL]     assertEquals(2, m1.getGroupIndex("G1")); [EOL]     assertEquals(3, m1.getGroupIndex("G2")); [EOL] } <line_num>: 180,196
public void testGetGroup() { [EOL]     KeyToGroupMap m1 = new KeyToGroupMap("Default Group"); [EOL]     assertEquals("Default Group", m1.getGroup("K1")); [EOL]     m1.mapKeyToGroup("K1", "G1"); [EOL]     assertEquals("G1", m1.getGroup("K1")); [EOL]     m1.mapKeyToGroup("K1", "G2"); [EOL]     assertEquals("G2", m1.getGroup("K1")); [EOL]     m1.mapKeyToGroup("K1", null); [EOL]     assertEquals("Default Group", m1.getGroup("K1")); [EOL]     boolean pass = false; [EOL]     try { [EOL]         Comparable g = m1.getGroup(null); [EOL]         System.out.println(g); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 201,224
public void testEquals() { [EOL]     KeyToGroupMap m1 = new KeyToGroupMap("Default Group"); [EOL]     KeyToGroupMap m2 = new KeyToGroupMap("Default Group"); [EOL]     assertTrue(m1.equals(m2)); [EOL]     assertTrue(m2.equals(m1)); [EOL]     m1.mapKeyToGroup("K1", "G1"); [EOL]     assertFalse(m1.equals(m2)); [EOL]     m2.mapKeyToGroup("K1", "G1"); [EOL]     assertTrue(m1.equals(m2)); [EOL] } <line_num>: 229,239
public void testCloning() { [EOL]     KeyToGroupMap m1 = new KeyToGroupMap("Test"); [EOL]     m1.mapKeyToGroup("K1", "G1"); [EOL]     KeyToGroupMap m2 = null; [EOL]     try { [EOL]         m2 = (KeyToGroupMap) m1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         System.err.println("Failed to clone."); [EOL]     } [EOL]     assertTrue(m1 != m2); [EOL]     assertTrue(m1.getClass() == m2.getClass()); [EOL]     assertTrue(m1.equals(m2)); [EOL]     m1.mapKeyToGroup("K1", "G2"); [EOL]     assertFalse(m1.equals(m2)); [EOL]     m2.mapKeyToGroup("K1", "G2"); [EOL]     assertTrue(m1.equals(m2)); [EOL] } <line_num>: 244,263
public void testSerialization() { [EOL]     KeyToGroupMap m1 = new KeyToGroupMap("Test"); [EOL]     KeyToGroupMap m2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(m1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         m2 = (KeyToGroupMap) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         System.out.println(e.toString()); [EOL]     } [EOL]     assertEquals(m1, m2); [EOL] } <line_num>: 268,290
