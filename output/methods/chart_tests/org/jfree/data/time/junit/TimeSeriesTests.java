public TimeSeriesTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 112,114
public static Test suite() { [EOL]     return new TestSuite(TimeSeriesTests.class); [EOL] } <line_num>: 103,105
protected void setUp() { [EOL]     this.seriesA = new TimeSeries("Series A"); [EOL]     try { [EOL]         this.seriesA.add(new Year(2000), new Integer(102000)); [EOL]         this.seriesA.add(new Year(2001), new Integer(102001)); [EOL]         this.seriesA.add(new Year(2002), new Integer(102002)); [EOL]         this.seriesA.add(new Year(2003), new Integer(102003)); [EOL]         this.seriesA.add(new Year(2004), new Integer(102004)); [EOL]         this.seriesA.add(new Year(2005), new Integer(102005)); [EOL]     } catch (SeriesException e) { [EOL]         System.err.println("Problem creating series."); [EOL]     } [EOL]     this.seriesB = new TimeSeries("Series B"); [EOL]     try { [EOL]         this.seriesB.add(new Year(2006), new Integer(202006)); [EOL]         this.seriesB.add(new Year(2007), new Integer(202007)); [EOL]         this.seriesB.add(new Year(2008), new Integer(202008)); [EOL]     } catch (SeriesException e) { [EOL]         System.err.println("Problem creating series."); [EOL]     } [EOL]     this.seriesC = new TimeSeries("Series C"); [EOL]     try { [EOL]         this.seriesC.add(new Year(1999), new Integer(301999)); [EOL]         this.seriesC.add(new Year(2000), new Integer(302000)); [EOL]         this.seriesC.add(new Year(2002), new Integer(302002)); [EOL]     } catch (SeriesException e) { [EOL]         System.err.println("Problem creating series."); [EOL]     } [EOL] } <line_num>: 119,154
public void seriesChanged(SeriesChangeEvent event) { [EOL]     this.gotSeriesChangeEvent = true; [EOL] } <line_num>: 162,164
public void testClone() { [EOL]     TimeSeries series = new TimeSeries("Test Series"); [EOL]     RegularTimePeriod jan1st2002 = new Day(1, MonthConstants.JANUARY, 2002); [EOL]     try { [EOL]         series.add(jan1st2002, new Integer(42)); [EOL]     } catch (SeriesException e) { [EOL]         System.err.println("Problem adding to series."); [EOL]     } [EOL]     TimeSeries clone = null; [EOL]     try { [EOL]         clone = (TimeSeries) series.clone(); [EOL]         clone.setKey("Clone Series"); [EOL]         try { [EOL]             clone.update(jan1st2002, new Integer(10)); [EOL]         } catch (SeriesException e) { [EOL]             e.printStackTrace(); [EOL]         } [EOL]     } catch (CloneNotSupportedException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     int seriesValue = series.getValue(jan1st2002).intValue(); [EOL]     int cloneValue = Integer.MAX_VALUE; [EOL]     if (clone != null) { [EOL]         cloneValue = clone.getValue(jan1st2002).intValue(); [EOL]     } [EOL]     assertEquals(42, seriesValue); [EOL]     assertEquals(10, cloneValue); [EOL]     assertEquals("Test Series", series.getKey()); [EOL]     if (clone != null) { [EOL]         assertEquals("Clone Series", clone.getKey()); [EOL]     } else { [EOL]         assertTrue(false); [EOL]     } [EOL] } <line_num>: 169,212
public void testClone2() { [EOL]     TimeSeries s1 = new TimeSeries("S1"); [EOL]     s1.add(new Year(2007), 100.0); [EOL]     s1.add(new Year(2008), null); [EOL]     s1.add(new Year(2009), 200.0); [EOL]     TimeSeries s2 = null; [EOL]     try { [EOL]         s2 = (TimeSeries) s1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(s1.equals(s2)); [EOL]     s2.addOrUpdate(new Year(2009), 300.0); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s1.addOrUpdate(new Year(2009), 300.0); [EOL]     assertTrue(s1.equals(s2)); [EOL] } <line_num>: 217,236
public void testAddValue() { [EOL]     try { [EOL]         this.seriesA.add(new Year(1999), new Integer(1)); [EOL]     } catch (SeriesException e) { [EOL]         System.err.println("Problem adding to series."); [EOL]     } [EOL]     int value = this.seriesA.getValue(0).intValue(); [EOL]     assertEquals(1, value); [EOL] } <line_num>: 241,253
public void testGetValue() { [EOL]     Number value1 = this.seriesA.getValue(new Year(1999)); [EOL]     assertNull(value1); [EOL]     int value2 = this.seriesA.getValue(new Year(2000)).intValue(); [EOL]     assertEquals(102000, value2); [EOL] } <line_num>: 258,265
public void testDelete() { [EOL]     this.seriesA.delete(0, 0); [EOL]     assertEquals(5, this.seriesA.getItemCount()); [EOL]     Number value = this.seriesA.getValue(new Year(2000)); [EOL]     assertNull(value); [EOL] } <line_num>: 270,275
public void testDelete2() { [EOL]     TimeSeries s1 = new TimeSeries("Series"); [EOL]     s1.add(new Year(2000), 13.75); [EOL]     s1.add(new Year(2001), 11.90); [EOL]     s1.add(new Year(2002), null); [EOL]     s1.addChangeListener(this); [EOL]     this.gotSeriesChangeEvent = false; [EOL]     s1.delete(new Year(2001)); [EOL]     assertTrue(this.gotSeriesChangeEvent); [EOL]     assertEquals(2, s1.getItemCount()); [EOL]     assertEquals(null, s1.getValue(new Year(2001))); [EOL]     this.gotSeriesChangeEvent = false; [EOL]     s1.delete(new Year(2006)); [EOL]     assertFalse(this.gotSeriesChangeEvent); [EOL]     try { [EOL]         s1.delete(null); [EOL]         fail("Expected IllegalArgumentException."); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 280,305
public void testDelete3() { [EOL]     TimeSeries s1 = new TimeSeries("S1"); [EOL]     s1.add(new Year(2011), 1.1); [EOL]     s1.add(new Year(2012), 2.2); [EOL]     s1.add(new Year(2013), 3.3); [EOL]     s1.add(new Year(2014), 4.4); [EOL]     s1.add(new Year(2015), 5.5); [EOL]     s1.add(new Year(2016), 6.6); [EOL]     s1.delete(2, 5); [EOL]     assertEquals(2, s1.getItemCount()); [EOL]     assertEquals(new Year(2011), s1.getTimePeriod(0)); [EOL]     assertEquals(new Year(2012), s1.getTimePeriod(1)); [EOL]     assertEquals(1.1, s1.getMinY(), EPSILON); [EOL]     assertEquals(2.2, s1.getMaxY(), EPSILON); [EOL] } <line_num>: 310,324
public void testDelete_RegularTimePeriod() { [EOL]     TimeSeries s1 = new TimeSeries("S1"); [EOL]     s1.add(new Year(2010), 1.1); [EOL]     s1.add(new Year(2011), 2.2); [EOL]     s1.add(new Year(2012), 3.3); [EOL]     s1.add(new Year(2013), 4.4); [EOL]     s1.delete(new Year(2010)); [EOL]     s1.delete(new Year(2013)); [EOL]     assertEquals(2.2, s1.getMinY(), EPSILON); [EOL]     assertEquals(3.3, s1.getMaxY(), EPSILON); [EOL] } <line_num>: 330,340
public void testSerialization() { [EOL]     TimeSeries s1 = new TimeSeries("A test"); [EOL]     s1.add(new Year(2000), 13.75); [EOL]     s1.add(new Year(2001), 11.90); [EOL]     s1.add(new Year(2002), null); [EOL]     s1.add(new Year(2005), 19.32); [EOL]     s1.add(new Year(2007), 16.89); [EOL]     TimeSeries s2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(s1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         s2 = (TimeSeries) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(s1.equals(s2)); [EOL] } <line_num>: 345,367
public void testEquals() { [EOL]     TimeSeries s1 = new TimeSeries("Time Series 1"); [EOL]     TimeSeries s2 = new TimeSeries("Time Series 2"); [EOL]     boolean b1 = s1.equals(s2); [EOL]     assertFalse("b1", b1); [EOL]     s2.setKey("Time Series 1"); [EOL]     boolean b2 = s1.equals(s2); [EOL]     assertTrue("b2", b2); [EOL]     RegularTimePeriod p1 = new Day(); [EOL]     RegularTimePeriod p2 = p1.next(); [EOL]     s1.add(p1, 100.0); [EOL]     s1.add(p2, 200.0); [EOL]     boolean b3 = s1.equals(s2); [EOL]     assertFalse("b3", b3); [EOL]     s2.add(p1, 100.0); [EOL]     s2.add(p2, 200.0); [EOL]     boolean b4 = s1.equals(s2); [EOL]     assertTrue("b4", b4); [EOL]     s1.setMaximumItemCount(100); [EOL]     boolean b5 = s1.equals(s2); [EOL]     assertFalse("b5", b5); [EOL]     s2.setMaximumItemCount(100); [EOL]     boolean b6 = s1.equals(s2); [EOL]     assertTrue("b6", b6); [EOL]     s1.setMaximumItemAge(100); [EOL]     boolean b7 = s1.equals(s2); [EOL]     assertFalse("b7", b7); [EOL]     s2.setMaximumItemAge(100); [EOL]     boolean b8 = s1.equals(s2); [EOL]     assertTrue("b8", b8); [EOL] } <line_num>: 372,409
public void testEquals2() { [EOL]     TimeSeries s1 = new TimeSeries("Series", null, null); [EOL]     TimeSeries s2 = new TimeSeries("Series", null, null); [EOL]     assertTrue(s1.equals(s2)); [EOL] } <line_num>: 415,419
public void testCreateCopy1() { [EOL]     TimeSeries series = new TimeSeries("Series"); [EOL]     series.add(new Month(MonthConstants.JANUARY, 2003), 45.0); [EOL]     series.add(new Month(MonthConstants.FEBRUARY, 2003), 55.0); [EOL]     series.add(new Month(MonthConstants.JUNE, 2003), 35.0); [EOL]     series.add(new Month(MonthConstants.NOVEMBER, 2003), 85.0); [EOL]     series.add(new Month(MonthConstants.DECEMBER, 2003), 75.0); [EOL]     try { [EOL]         TimeSeries result1 = series.createCopy(new Month(MonthConstants.NOVEMBER, 2002), new Month(MonthConstants.DECEMBER, 2002)); [EOL]         assertEquals(0, result1.getItemCount()); [EOL]         TimeSeries result2 = series.createCopy(new Month(MonthConstants.NOVEMBER, 2002), new Month(MonthConstants.JANUARY, 2003)); [EOL]         assertEquals(1, result2.getItemCount()); [EOL]         TimeSeries result3 = series.createCopy(new Month(MonthConstants.NOVEMBER, 2002), new Month(MonthConstants.APRIL, 2003)); [EOL]         assertEquals(2, result3.getItemCount()); [EOL]         TimeSeries result4 = series.createCopy(new Month(MonthConstants.NOVEMBER, 2002), new Month(MonthConstants.DECEMBER, 2003)); [EOL]         assertEquals(5, result4.getItemCount()); [EOL]         TimeSeries result5 = series.createCopy(new Month(MonthConstants.NOVEMBER, 2002), new Month(MonthConstants.MARCH, 2004)); [EOL]         assertEquals(5, result5.getItemCount()); [EOL]         TimeSeries result6 = series.createCopy(new Month(MonthConstants.JANUARY, 2003), new Month(MonthConstants.JANUARY, 2003)); [EOL]         assertEquals(1, result6.getItemCount()); [EOL]         TimeSeries result7 = series.createCopy(new Month(MonthConstants.JANUARY, 2003), new Month(MonthConstants.APRIL, 2003)); [EOL]         assertEquals(2, result7.getItemCount()); [EOL]         TimeSeries result8 = series.createCopy(new Month(MonthConstants.JANUARY, 2003), new Month(MonthConstants.DECEMBER, 2003)); [EOL]         assertEquals(5, result8.getItemCount()); [EOL]         TimeSeries result9 = series.createCopy(new Month(MonthConstants.JANUARY, 2003), new Month(MonthConstants.MARCH, 2004)); [EOL]         assertEquals(5, result9.getItemCount()); [EOL]         TimeSeries result10 = series.createCopy(new Month(MonthConstants.MAY, 2003), new Month(MonthConstants.DECEMBER, 2003)); [EOL]         assertEquals(3, result10.getItemCount()); [EOL]         TimeSeries result11 = series.createCopy(new Month(MonthConstants.MAY, 2003), new Month(MonthConstants.MARCH, 2004)); [EOL]         assertEquals(3, result11.getItemCount()); [EOL]         TimeSeries result12 = series.createCopy(new Month(MonthConstants.DECEMBER, 2003), new Month(MonthConstants.DECEMBER, 2003)); [EOL]         assertEquals(1, result12.getItemCount()); [EOL]         TimeSeries result13 = series.createCopy(new Month(MonthConstants.DECEMBER, 2003), new Month(MonthConstants.MARCH, 2004)); [EOL]         assertEquals(1, result13.getItemCount()); [EOL]         TimeSeries result14 = series.createCopy(new Month(MonthConstants.JANUARY, 2004), new Month(MonthConstants.MARCH, 2004)); [EOL]         assertEquals(0, result14.getItemCount()); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         assertTrue(false); [EOL]     } [EOL] } <line_num>: 425,513
public void testCreateCopy2() { [EOL]     TimeSeries series = new TimeSeries("Series"); [EOL]     series.add(new Month(MonthConstants.JANUARY, 2003), 45.0); [EOL]     series.add(new Month(MonthConstants.FEBRUARY, 2003), 55.0); [EOL]     series.add(new Month(MonthConstants.JUNE, 2003), 35.0); [EOL]     series.add(new Month(MonthConstants.NOVEMBER, 2003), 85.0); [EOL]     series.add(new Month(MonthConstants.DECEMBER, 2003), 75.0); [EOL]     try { [EOL]         TimeSeries result1 = series.createCopy(0, 0); [EOL]         assertEquals(new Month(1, 2003), result1.getTimePeriod(0)); [EOL]         result1 = series.createCopy(0, 1); [EOL]         assertEquals(new Month(2, 2003), result1.getTimePeriod(1)); [EOL]         result1 = series.createCopy(1, 3); [EOL]         assertEquals(new Month(2, 2003), result1.getTimePeriod(0)); [EOL]         assertEquals(new Month(11, 2003), result1.getTimePeriod(2)); [EOL]         result1 = series.createCopy(3, 4); [EOL]         assertEquals(new Month(11, 2003), result1.getTimePeriod(0)); [EOL]         assertEquals(new Month(12, 2003), result1.getTimePeriod(1)); [EOL]         result1 = series.createCopy(4, 4); [EOL]         assertEquals(new Month(12, 2003), result1.getTimePeriod(0)); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     boolean pass = false; [EOL]     try { [EOL]         series.createCopy(-1, 1); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } catch (CloneNotSupportedException e) { [EOL]         pass = false; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         series.createCopy(1, 0); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } catch (CloneNotSupportedException e) { [EOL]         pass = false; [EOL]     } [EOL]     assertTrue(pass); [EOL]     TimeSeries series2 = new TimeSeries("Series 2"); [EOL]     try { [EOL]         TimeSeries series3 = series2.createCopy(99, 999); [EOL]         assertEquals(0, series3.getItemCount()); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         assertTrue(false); [EOL]     } [EOL] } <line_num>: 519,589
public void testCreateCopy3() throws CloneNotSupportedException { [EOL]     TimeSeries s1 = new TimeSeries("S1"); [EOL]     s1.add(new Year(2009), 100.0); [EOL]     s1.add(new Year(2010), 101.0); [EOL]     s1.add(new Year(2011), 102.0); [EOL]     assertEquals(100.0, s1.getMinY(), EPSILON); [EOL]     assertEquals(102.0, s1.getMaxY(), EPSILON); [EOL]     TimeSeries s2 = s1.createCopy(0, 1); [EOL]     assertEquals(100.0, s2.getMinY(), EPSILON); [EOL]     assertEquals(101.0, s2.getMaxY(), EPSILON); [EOL]     TimeSeries s3 = s1.createCopy(1, 2); [EOL]     assertEquals(101.0, s3.getMinY(), EPSILON); [EOL]     assertEquals(102.0, s3.getMaxY(), EPSILON); [EOL] } <line_num>: 597,612
public void testSetMaximumItemCount() { [EOL]     TimeSeries s1 = new TimeSeries("S1"); [EOL]     s1.add(new Year(2000), 13.75); [EOL]     s1.add(new Year(2001), 11.90); [EOL]     s1.add(new Year(2002), null); [EOL]     s1.add(new Year(2005), 19.32); [EOL]     s1.add(new Year(2007), 16.89); [EOL]     assertTrue(s1.getItemCount() == 5); [EOL]     s1.setMaximumItemCount(3); [EOL]     assertTrue(s1.getItemCount() == 3); [EOL]     TimeSeriesDataItem item = s1.getDataItem(0); [EOL]     assertTrue(item.getPeriod().equals(new Year(2002))); [EOL]     assertEquals(16.89, s1.getMinY(), EPSILON); [EOL]     assertEquals(19.32, s1.getMaxY(), EPSILON); [EOL] } <line_num>: 618,633
public void testAddOrUpdate() { [EOL]     TimeSeries s1 = new TimeSeries("S1"); [EOL]     s1.setMaximumItemCount(2); [EOL]     s1.addOrUpdate(new Year(2000), 100.0); [EOL]     assertEquals(1, s1.getItemCount()); [EOL]     s1.addOrUpdate(new Year(2001), 101.0); [EOL]     assertEquals(2, s1.getItemCount()); [EOL]     s1.addOrUpdate(new Year(2001), 102.0); [EOL]     assertEquals(2, s1.getItemCount()); [EOL]     s1.addOrUpdate(new Year(2002), 103.0); [EOL]     assertEquals(2, s1.getItemCount()); [EOL] } <line_num>: 638,649
public void testAddOrUpdate2() { [EOL]     TimeSeries s1 = new TimeSeries("S1"); [EOL]     s1.setMaximumItemCount(2); [EOL]     s1.addOrUpdate(new Year(2010), 1.1); [EOL]     s1.addOrUpdate(new Year(2011), 2.2); [EOL]     s1.addOrUpdate(new Year(2012), 3.3); [EOL]     assertEquals(2, s1.getItemCount()); [EOL]     assertEquals(2.2, s1.getMinY(), EPSILON); [EOL]     assertEquals(3.3, s1.getMaxY(), EPSILON); [EOL] } <line_num>: 654,663
public void testAddOrUpdate3() { [EOL]     TimeSeries s1 = new TimeSeries("S1"); [EOL]     s1.addOrUpdate(new Year(2010), 1.1); [EOL]     assertEquals(Year.class, s1.getTimePeriodClass()); [EOL]     boolean pass = false; [EOL]     try { [EOL]         s1.addOrUpdate(new Month(1, 2009), 0.0); [EOL]     } catch (SeriesException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 669,682
public void testAddOrUpdate4() { [EOL]     TimeSeries ts = new TimeSeries("S"); [EOL]     TimeSeriesDataItem overwritten = ts.addOrUpdate(new Year(2009), 20.09); [EOL]     assertNull(overwritten); [EOL]     overwritten = ts.addOrUpdate(new Year(2009), 1.0); [EOL]     assertEquals(new Double(20.09), overwritten.getValue()); [EOL]     assertEquals(new Double(1.0), ts.getValue(new Year(2009))); [EOL]     overwritten.setValue(null); [EOL]     assertEquals(new Double(1.0), ts.getValue(new Year(2009))); [EOL]     TimeSeriesDataItem item = new TimeSeriesDataItem(new Year(2010), 20.10); [EOL]     overwritten = ts.addOrUpdate(item); [EOL]     assertNull(overwritten); [EOL]     assertEquals(new Double(20.10), ts.getValue(new Year(2010))); [EOL]     item.setValue(null); [EOL]     assertEquals(new Double(20.10), ts.getValue(new Year(2010))); [EOL] } <line_num>: 687,706
public void testBug1075255() { [EOL]     TimeSeries ts = new TimeSeries("dummy"); [EOL]     ts.add(new FixedMillisecond(0L), 0.0); [EOL]     TimeSeries ts2 = new TimeSeries("dummy2"); [EOL]     ts2.add(new FixedMillisecond(0L), 1.0); [EOL]     try { [EOL]         ts.addAndOrUpdate(ts2); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]         assertTrue(false); [EOL]     } [EOL]     assertEquals(1, ts.getItemCount()); [EOL] } <line_num>: 711,724
public void testBug1832432() { [EOL]     TimeSeries s1 = new TimeSeries("Series"); [EOL]     TimeSeries s2 = null; [EOL]     try { [EOL]         s2 = (TimeSeries) s1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(s1 != s2); [EOL]     assertTrue(s1.getClass() == s2.getClass()); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1.add(new Day(1, 1, 2007), 100.0); [EOL]     assertFalse(s1.equals(s2)); [EOL] } <line_num>: 729,745
public void testGetIndex() { [EOL]     TimeSeries series = new TimeSeries("Series"); [EOL]     assertEquals(-1, series.getIndex(new Month(1, 2003))); [EOL]     series.add(new Month(1, 2003), 45.0); [EOL]     assertEquals(0, series.getIndex(new Month(1, 2003))); [EOL]     assertEquals(-1, series.getIndex(new Month(12, 2002))); [EOL]     assertEquals(-2, series.getIndex(new Month(2, 2003))); [EOL]     series.add(new Month(3, 2003), 55.0); [EOL]     assertEquals(-1, series.getIndex(new Month(12, 2002))); [EOL]     assertEquals(0, series.getIndex(new Month(1, 2003))); [EOL]     assertEquals(-2, series.getIndex(new Month(2, 2003))); [EOL]     assertEquals(1, series.getIndex(new Month(3, 2003))); [EOL]     assertEquals(-3, series.getIndex(new Month(4, 2003))); [EOL] } <line_num>: 750,765
public void testGetDataItem1() { [EOL]     TimeSeries series = new TimeSeries("S"); [EOL]     boolean pass = false; [EOL]     try { [EOL]         series.getDataItem(0); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     series.add(new Year(2006), 100.0); [EOL]     TimeSeriesDataItem item = series.getDataItem(0); [EOL]     assertEquals(new Year(2006), item.getPeriod()); [EOL]     pass = false; [EOL]     try { [EOL]         series.getDataItem(-1); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         series.getDataItem(1); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 770,803
public void testGetDataItem2() { [EOL]     TimeSeries series = new TimeSeries("S"); [EOL]     assertNull(series.getDataItem(new Year(2006))); [EOL]     boolean pass = false; [EOL]     try { [EOL]         series.getDataItem(null); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 808,821
public void testRemoveAgedItems() { [EOL]     TimeSeries series = new TimeSeries("Test Series"); [EOL]     series.addChangeListener(this); [EOL]     assertEquals(Long.MAX_VALUE, series.getMaximumItemAge()); [EOL]     assertEquals(Integer.MAX_VALUE, series.getMaximumItemCount()); [EOL]     this.gotSeriesChangeEvent = false; [EOL]     series.removeAgedItems(true); [EOL]     assertEquals(0, series.getItemCount()); [EOL]     assertFalse(this.gotSeriesChangeEvent); [EOL]     series.add(new Year(1999), 1.0); [EOL]     series.setMaximumItemAge(0); [EOL]     this.gotSeriesChangeEvent = false; [EOL]     series.removeAgedItems(true); [EOL]     assertEquals(1, series.getItemCount()); [EOL]     assertFalse(this.gotSeriesChangeEvent); [EOL]     series.setMaximumItemAge(10); [EOL]     series.add(new Year(2001), 2.0); [EOL]     this.gotSeriesChangeEvent = false; [EOL]     series.setMaximumItemAge(2); [EOL]     assertEquals(2, series.getItemCount()); [EOL]     assertEquals(0, series.getIndex(new Year(1999))); [EOL]     assertFalse(this.gotSeriesChangeEvent); [EOL]     series.setMaximumItemAge(1); [EOL]     assertEquals(1, series.getItemCount()); [EOL]     assertEquals(0, series.getIndex(new Year(2001))); [EOL]     assertTrue(this.gotSeriesChangeEvent); [EOL] } <line_num>: 826,858
public void testRemoveAgedItems2() { [EOL]     long y2006 = 1157087372534L; [EOL]     TimeSeries series = new TimeSeries("Test Series"); [EOL]     series.addChangeListener(this); [EOL]     assertEquals(Long.MAX_VALUE, series.getMaximumItemAge()); [EOL]     assertEquals(Integer.MAX_VALUE, series.getMaximumItemCount()); [EOL]     this.gotSeriesChangeEvent = false; [EOL]     series.removeAgedItems(y2006, true); [EOL]     assertEquals(0, series.getItemCount()); [EOL]     assertFalse(this.gotSeriesChangeEvent); [EOL]     series.add(new Year(2004), 1.0); [EOL]     series.setMaximumItemAge(1); [EOL]     this.gotSeriesChangeEvent = false; [EOL]     series.removeAgedItems(new Year(2005).getMiddleMillisecond(), true); [EOL]     assertEquals(1, series.getItemCount()); [EOL]     assertFalse(this.gotSeriesChangeEvent); [EOL]     series.removeAgedItems(y2006, true); [EOL]     assertEquals(0, series.getItemCount()); [EOL]     assertTrue(this.gotSeriesChangeEvent); [EOL]     series.setMaximumItemAge(2); [EOL]     series.add(new Year(2003), 1.0); [EOL]     series.add(new Year(2005), 2.0); [EOL]     assertEquals(2, series.getItemCount()); [EOL]     this.gotSeriesChangeEvent = false; [EOL]     assertEquals(2, series.getItemCount()); [EOL]     series.removeAgedItems(new Year(2005).getMiddleMillisecond(), true); [EOL]     assertEquals(2, series.getItemCount()); [EOL]     assertFalse(this.gotSeriesChangeEvent); [EOL]     series.removeAgedItems(y2006, true); [EOL]     assertEquals(1, series.getItemCount()); [EOL]     assertTrue(this.gotSeriesChangeEvent); [EOL] } <line_num>: 863,901
public void testRemoveAgedItems3() { [EOL]     TimeSeries s = new TimeSeries("Test"); [EOL]     boolean pass = true; [EOL]     try { [EOL]         s.removeAgedItems(0L, true); [EOL]     } catch (Exception e) { [EOL]         pass = false; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 907,917
public void testRemoveAgedItems4() { [EOL]     TimeSeries s1 = new TimeSeries("S1"); [EOL]     s1.setMaximumItemAge(2); [EOL]     s1.add(new Year(2010), 1.1); [EOL]     s1.add(new Year(2011), 2.2); [EOL]     s1.add(new Year(2012), 3.3); [EOL]     s1.add(new Year(2013), 2.5); [EOL]     assertEquals(3, s1.getItemCount()); [EOL]     assertEquals(2.2, s1.getMinY(), EPSILON); [EOL]     assertEquals(3.3, s1.getMaxY(), EPSILON); [EOL] } <line_num>: 923,933
public void testRemoveAgedItems5() { [EOL]     TimeSeries s1 = new TimeSeries("S1"); [EOL]     s1.setMaximumItemAge(4); [EOL]     s1.add(new Year(2010), 1.1); [EOL]     s1.add(new Year(2011), 2.2); [EOL]     s1.add(new Year(2012), 3.3); [EOL]     s1.add(new Year(2013), 2.5); [EOL]     s1.removeAgedItems(new Year(2015).getMiddleMillisecond(), true); [EOL]     assertEquals(3, s1.getItemCount()); [EOL]     assertEquals(2.2, s1.getMinY(), EPSILON); [EOL]     assertEquals(3.3, s1.getMaxY(), EPSILON); [EOL] } <line_num>: 939,950
public void testHashCode() { [EOL]     TimeSeries s1 = new TimeSeries("Test"); [EOL]     TimeSeries s2 = new TimeSeries("Test"); [EOL]     assertEquals(s1, s2); [EOL]     assertEquals(s1.hashCode(), s2.hashCode()); [EOL]     s1.add(new Day(1, 1, 2007), 500.0); [EOL]     s2.add(new Day(1, 1, 2007), 500.0); [EOL]     assertEquals(s1, s2); [EOL]     assertEquals(s1.hashCode(), s2.hashCode()); [EOL]     s1.add(new Day(2, 1, 2007), null); [EOL]     s2.add(new Day(2, 1, 2007), null); [EOL]     assertEquals(s1, s2); [EOL]     assertEquals(s1.hashCode(), s2.hashCode()); [EOL]     s1.add(new Day(5, 1, 2007), 111.0); [EOL]     s2.add(new Day(5, 1, 2007), 111.0); [EOL]     assertEquals(s1, s2); [EOL]     assertEquals(s1.hashCode(), s2.hashCode()); [EOL]     s1.add(new Day(9, 1, 2007), 1.0); [EOL]     s2.add(new Day(9, 1, 2007), 1.0); [EOL]     assertEquals(s1, s2); [EOL]     assertEquals(s1.hashCode(), s2.hashCode()); [EOL] } <line_num>: 955,980
public void testBug1864222() { [EOL]     TimeSeries s = new TimeSeries("S"); [EOL]     s.add(new Day(19, 8, 2005), 1); [EOL]     s.add(new Day(31, 1, 2006), 1); [EOL]     boolean pass = true; [EOL]     try { [EOL]         s.createCopy(new Day(1, 12, 2005), new Day(18, 1, 2006)); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         pass = false; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 985,997
public void testGetMinY() { [EOL]     TimeSeries s1 = new TimeSeries("S1"); [EOL]     assertTrue(Double.isNaN(s1.getMinY())); [EOL]     s1.add(new Year(2008), 1.1); [EOL]     assertEquals(1.1, s1.getMinY(), EPSILON); [EOL]     s1.add(new Year(2009), 2.2); [EOL]     assertEquals(1.1, s1.getMinY(), EPSILON); [EOL]     s1.add(new Year(2000), 99.9); [EOL]     assertEquals(1.1, s1.getMinY(), EPSILON); [EOL]     s1.add(new Year(2002), -1.1); [EOL]     assertEquals(-1.1, s1.getMinY(), EPSILON); [EOL]     s1.add(new Year(2003), null); [EOL]     assertEquals(-1.1, s1.getMinY(), EPSILON); [EOL]     s1.addOrUpdate(new Year(2002), null); [EOL]     assertEquals(1.1, s1.getMinY(), EPSILON); [EOL] } <line_num>: 1004,1025
public void testGetMaxY() { [EOL]     TimeSeries s1 = new TimeSeries("S1"); [EOL]     assertTrue(Double.isNaN(s1.getMaxY())); [EOL]     s1.add(new Year(2008), 1.1); [EOL]     assertEquals(1.1, s1.getMaxY(), EPSILON); [EOL]     s1.add(new Year(2009), 2.2); [EOL]     assertEquals(2.2, s1.getMaxY(), EPSILON); [EOL]     s1.add(new Year(2000), 99.9); [EOL]     assertEquals(99.9, s1.getMaxY(), EPSILON); [EOL]     s1.add(new Year(2002), -1.1); [EOL]     assertEquals(99.9, s1.getMaxY(), EPSILON); [EOL]     s1.add(new Year(2003), null); [EOL]     assertEquals(99.9, s1.getMaxY(), EPSILON); [EOL]     s1.addOrUpdate(new Year(2000), null); [EOL]     assertEquals(2.2, s1.getMaxY(), EPSILON); [EOL] } <line_num>: 1030,1051
public void testClear() { [EOL]     TimeSeries s1 = new TimeSeries("S1"); [EOL]     s1.add(new Year(2009), 1.1); [EOL]     s1.add(new Year(2010), 2.2); [EOL]     assertEquals(2, s1.getItemCount()); [EOL]     s1.clear(); [EOL]     assertEquals(0, s1.getItemCount()); [EOL]     assertTrue(Double.isNaN(s1.getMinY())); [EOL]     assertTrue(Double.isNaN(s1.getMaxY())); [EOL] } <line_num>: 1056,1067
public void testAdd() { [EOL]     TimeSeries s1 = new TimeSeries("S1"); [EOL]     s1.setMaximumItemCount(2); [EOL]     s1.add(new Year(2010), 1.1); [EOL]     s1.add(new Year(2011), 2.2); [EOL]     s1.add(new Year(2012), 3.3); [EOL]     assertEquals(2, s1.getItemCount()); [EOL]     assertEquals(2.2, s1.getMinY(), EPSILON); [EOL]     assertEquals(3.3, s1.getMaxY(), EPSILON); [EOL] } <line_num>: 1073,1082
public void testUpdate_RegularTimePeriod() { [EOL]     TimeSeries s1 = new TimeSeries("S1"); [EOL]     s1.add(new Year(2010), 1.1); [EOL]     s1.add(new Year(2011), 2.2); [EOL]     s1.add(new Year(2012), 3.3); [EOL]     s1.update(new Year(2012), new Double(4.4)); [EOL]     assertEquals(4.4, s1.getMaxY(), EPSILON); [EOL]     s1.update(new Year(2010), new Double(0.5)); [EOL]     assertEquals(0.5, s1.getMinY(), EPSILON); [EOL]     s1.update(new Year(2012), null); [EOL]     assertEquals(2.2, s1.getMaxY(), EPSILON); [EOL]     s1.update(new Year(2010), null); [EOL]     assertEquals(2.2, s1.getMinY(), EPSILON); [EOL] } <line_num>: 1087,1100
public void testAdd_TimeSeriesDataItem() { [EOL]     TimeSeriesDataItem item = new TimeSeriesDataItem(new Year(2009), 1.0); [EOL]     TimeSeries series = new TimeSeries("S1"); [EOL]     series.add(item); [EOL]     assertTrue(item.equals(series.getDataItem(0))); [EOL]     item.setValue(new Double(99.9)); [EOL]     assertFalse(item.equals(series.getDataItem(0))); [EOL] } <line_num>: 1106,1113
