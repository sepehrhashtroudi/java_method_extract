public MinuteTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 91,93
public static Test suite() { [EOL]     return new TestSuite(MinuteTests.class); [EOL] } <line_num>: 82,84
protected void setUp() { [EOL] } <line_num>: 98,100
public void testEqualsSelf() { [EOL]     Minute minute = new Minute(); [EOL]     assertTrue(minute.equals(minute)); [EOL] } <line_num>: 107,110
public void testEquals() { [EOL]     Day day1 = new Day(29, MonthConstants.MARCH, 2002); [EOL]     Hour hour1 = new Hour(15, day1); [EOL]     Minute minute1 = new Minute(15, hour1); [EOL]     Day day2 = new Day(29, MonthConstants.MARCH, 2002); [EOL]     Hour hour2 = new Hour(15, day2); [EOL]     Minute minute2 = new Minute(15, hour2); [EOL]     assertTrue(minute1.equals(minute2)); [EOL] } <line_num>: 115,123
public void testDateConstructor1() { [EOL]     TimeZone zone = TimeZone.getTimeZone("GMT"); [EOL]     Calendar c = new GregorianCalendar(zone); [EOL]     Minute m1 = new Minute(new Date(1016729699999L), zone); [EOL]     Minute m2 = new Minute(new Date(1016729700000L), zone); [EOL]     assertEquals(54, m1.getMinute()); [EOL]     assertEquals(1016729699999L, m1.getLastMillisecond(c)); [EOL]     assertEquals(55, m2.getMinute()); [EOL]     assertEquals(1016729700000L, m2.getFirstMillisecond(c)); [EOL] } <line_num>: 129,142
public void testDateConstructor2() { [EOL]     TimeZone zone = TimeZone.getTimeZone("Asia/Singapore"); [EOL]     Calendar c = new GregorianCalendar(zone); [EOL]     Minute m1 = new Minute(new Date(1016700899999L), zone); [EOL]     Minute m2 = new Minute(new Date(1016700900000L), zone); [EOL]     assertEquals(54, m1.getMinute()); [EOL]     assertEquals(1016700899999L, m1.getLastMillisecond(c)); [EOL]     assertEquals(55, m2.getMinute()); [EOL]     assertEquals(1016700900000L, m2.getFirstMillisecond(c)); [EOL] } <line_num>: 149,162
public void testSerialization() { [EOL]     Minute m1 = new Minute(); [EOL]     Minute m2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(m1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         m2 = (Minute) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         System.out.println(e.toString()); [EOL]     } [EOL]     assertEquals(m1, m2); [EOL] } <line_num>: 167,189
public void testHashcode() { [EOL]     Minute m1 = new Minute(45, 5, 1, 2, 2003); [EOL]     Minute m2 = new Minute(45, 5, 1, 2, 2003); [EOL]     assertTrue(m1.equals(m2)); [EOL]     int h1 = m1.hashCode(); [EOL]     int h2 = m2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 194,201
public void testNotCloneable() { [EOL]     Minute m = new Minute(45, 5, 1, 2, 2003); [EOL]     assertFalse(m instanceof Cloneable); [EOL] } <line_num>: 207,210
public void testGetFirstMillisecond() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.UK); [EOL]     TimeZone savedZone = TimeZone.getDefault(); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Minute m = new Minute(43, 15, 1, 4, 2006); [EOL]     assertEquals(1143902580000L, m.getFirstMillisecond()); [EOL]     Locale.setDefault(saved); [EOL]     TimeZone.setDefault(savedZone); [EOL] } <line_num>: 215,224
public void testGetFirstMillisecondWithTimeZone() { [EOL]     Minute m = new Minute(59, 15, 1, 4, 1950); [EOL]     TimeZone zone = TimeZone.getTimeZone("America/Los_Angeles"); [EOL]     Calendar c = new GregorianCalendar(zone); [EOL]     assertEquals(-623289660000L, m.getFirstMillisecond(c)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         m.getFirstMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 229,244
public void testGetFirstMillisecondWithCalendar() { [EOL]     Minute m = new Minute(40, 2, 15, 4, 2000); [EOL]     GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY); [EOL]     calendar.setTimeZone(TimeZone.getTimeZone("Europe/Frankfurt")); [EOL]     assertEquals(955766400000L, m.getFirstMillisecond(calendar)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         m.getFirstMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 249,264
public void testGetLastMillisecond() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.UK); [EOL]     TimeZone savedZone = TimeZone.getDefault(); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Minute m = new Minute(1, 1, 1, 1, 1970); [EOL]     assertEquals(119999L, m.getLastMillisecond()); [EOL]     Locale.setDefault(saved); [EOL]     TimeZone.setDefault(savedZone); [EOL] } <line_num>: 269,278
public void testGetLastMillisecondWithTimeZone() { [EOL]     Minute m = new Minute(1, 2, 7, 7, 1950); [EOL]     TimeZone zone = TimeZone.getTimeZone("America/Los_Angeles"); [EOL]     Calendar c = new GregorianCalendar(zone); [EOL]     assertEquals(-614962680001L, m.getLastMillisecond(c)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         m.getLastMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 283,298
public void testGetLastMillisecondWithCalendar() { [EOL]     Minute m = new Minute(45, 21, 21, 4, 2001); [EOL]     GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY); [EOL]     calendar.setTimeZone(TimeZone.getTimeZone("Europe/Frankfurt")); [EOL]     assertEquals(987889559999L, m.getLastMillisecond(calendar)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         m.getLastMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 303,318
public void testGetSerialIndex() { [EOL]     Minute m = new Minute(1, 1, 1, 1, 2000); [EOL]     assertEquals(52597501L, m.getSerialIndex()); [EOL]     m = new Minute(1, 1, 1, 1, 1900); [EOL]     assertEquals(2941L, m.getSerialIndex()); [EOL] } <line_num>: 323,328
public void testNext() { [EOL]     Minute m = new Minute(30, 1, 12, 12, 2000); [EOL]     m = (Minute) m.next(); [EOL]     assertEquals(2000, m.getHour().getYear()); [EOL]     assertEquals(12, m.getHour().getMonth()); [EOL]     assertEquals(12, m.getHour().getDayOfMonth()); [EOL]     assertEquals(1, m.getHour().getHour()); [EOL]     assertEquals(31, m.getMinute()); [EOL]     m = new Minute(59, 23, 31, 12, 9999); [EOL]     assertNull(m.next()); [EOL] } <line_num>: 333,343
public void testGetStart() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.ITALY); [EOL]     TimeZone savedZone = TimeZone.getDefault(); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/Rome")); [EOL]     Calendar cal = Calendar.getInstance(Locale.ITALY); [EOL]     cal.set(2006, Calendar.JANUARY, 16, 3, 47, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     Minute m = new Minute(47, 3, 16, 1, 2006); [EOL]     assertEquals(cal.getTime(), m.getStart()); [EOL]     Locale.setDefault(saved); [EOL]     TimeZone.setDefault(savedZone); [EOL] } <line_num>: 348,360
public void testGetEnd() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.ITALY); [EOL]     TimeZone savedZone = TimeZone.getDefault(); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/Rome")); [EOL]     Calendar cal = Calendar.getInstance(Locale.ITALY); [EOL]     cal.set(2006, Calendar.JANUARY, 16, 3, 47, 59); [EOL]     cal.set(Calendar.MILLISECOND, 999); [EOL]     Minute m = new Minute(47, 3, 16, 1, 2006); [EOL]     assertEquals(cal.getTime(), m.getEnd()); [EOL]     Locale.setDefault(saved); [EOL]     TimeZone.setDefault(savedZone); [EOL] } <line_num>: 365,377
public void test1611872() { [EOL]     Minute m1 = new Minute(0, 10, 15, 4, 2000); [EOL]     Minute m2 = (Minute) m1.previous(); [EOL]     assertEquals(m2, new Minute(59, 9, 15, 4, 2000)); [EOL] } <line_num>: 382,386
