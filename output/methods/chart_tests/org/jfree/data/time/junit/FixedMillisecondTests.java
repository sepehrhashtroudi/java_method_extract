public FixedMillisecondTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 79,81
public static Test suite() { [EOL]     return new TestSuite(FixedMillisecondTests.class); [EOL] } <line_num>: 70,72
public void testSerialization() { [EOL]     FixedMillisecond m1 = new FixedMillisecond(); [EOL]     FixedMillisecond m2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(m1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         m2 = (FixedMillisecond) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(m1, m2); [EOL] } <line_num>: 86,107
public void testHashcode() { [EOL]     FixedMillisecond m1 = new FixedMillisecond(500000L); [EOL]     FixedMillisecond m2 = new FixedMillisecond(500000L); [EOL]     assertTrue(m1.equals(m2)); [EOL]     int h1 = m1.hashCode(); [EOL]     int h2 = m2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 112,119
public void testNotCloneable() { [EOL]     FixedMillisecond m = new FixedMillisecond(500000L); [EOL]     assertFalse(m instanceof Cloneable); [EOL] } <line_num>: 125,128
public void testImmutability() { [EOL]     Date d = new Date(20L); [EOL]     FixedMillisecond fm = new FixedMillisecond(d); [EOL]     d.setTime(22L); [EOL]     assertEquals(20L, fm.getFirstMillisecond()); [EOL] } <line_num>: 133,138
