public MonthTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 105,107
public static Test suite() { [EOL]     return new TestSuite(MonthTests.class); [EOL] } <line_num>: 96,98
protected void setUp() { [EOL]     this.jan1900 = new Month(MonthConstants.JANUARY, 1900); [EOL]     this.feb1900 = new Month(MonthConstants.FEBRUARY, 1900); [EOL]     this.nov9999 = new Month(MonthConstants.NOVEMBER, 9999); [EOL]     this.dec9999 = new Month(MonthConstants.DECEMBER, 9999); [EOL] } <line_num>: 112,117
public void testEqualsSelf() { [EOL]     Month month = new Month(); [EOL]     assertTrue(month.equals(month)); [EOL] } <line_num>: 124,127
public void testEquals() { [EOL]     Month m1 = new Month(MonthConstants.MAY, 2002); [EOL]     Month m2 = new Month(MonthConstants.MAY, 2002); [EOL]     assertTrue(m1.equals(m2)); [EOL] } <line_num>: 132,136
public void testDateConstructor1() { [EOL]     TimeZone zone = TimeZone.getTimeZone("GMT"); [EOL]     Calendar c = new GregorianCalendar(zone); [EOL]     Month m1 = new Month(new Date(951868799999L), zone, Locale.getDefault()); [EOL]     Month m2 = new Month(new Date(951868800000L), zone, Locale.getDefault()); [EOL]     assertEquals(MonthConstants.FEBRUARY, m1.getMonth()); [EOL]     assertEquals(951868799999L, m1.getLastMillisecond(c)); [EOL]     assertEquals(MonthConstants.MARCH, m2.getMonth()); [EOL]     assertEquals(951868800000L, m2.getFirstMillisecond(c)); [EOL] } <line_num>: 142,157
public void testDateConstructor2() { [EOL]     TimeZone zone = TimeZone.getTimeZone("Pacific/Auckland"); [EOL]     Calendar c = new GregorianCalendar(zone); [EOL]     Month m1 = new Month(new Date(951821999999L), zone, Locale.getDefault()); [EOL]     Month m2 = new Month(new Date(951822000000L), zone, Locale.getDefault()); [EOL]     assertEquals(MonthConstants.FEBRUARY, m1.getMonth()); [EOL]     assertEquals(951821999999L, m1.getLastMillisecond(c)); [EOL]     assertEquals(MonthConstants.MARCH, m2.getMonth()); [EOL]     assertEquals(951822000000L, m2.getFirstMillisecond(c)); [EOL] } <line_num>: 163,178
public void testJan1900Previous() { [EOL]     Month previous = (Month) this.jan1900.previous(); [EOL]     assertNull(previous); [EOL] } <line_num>: 184,187
public void testJan1900Next() { [EOL]     Month next = (Month) this.jan1900.next(); [EOL]     assertEquals(this.feb1900, next); [EOL] } <line_num>: 193,196
public void testDec9999Previous() { [EOL]     Month previous = (Month) this.dec9999.previous(); [EOL]     assertEquals(this.nov9999, previous); [EOL] } <line_num>: 202,205
public void testDec9999Next() { [EOL]     Month next = (Month) this.dec9999.next(); [EOL]     assertNull(next); [EOL] } <line_num>: 211,214
public void testParseMonth() { [EOL]     Month month = null; [EOL]     try { [EOL]         month = Month.parseMonth("1990-01"); [EOL]     } catch (TimePeriodFormatException e) { [EOL]         month = new Month(1, 1900); [EOL]     } [EOL]     assertEquals(1, month.getMonth()); [EOL]     assertEquals(1990, month.getYear().getYear()); [EOL]     try { [EOL]         month = Month.parseMonth("02-1991"); [EOL]     } catch (TimePeriodFormatException e) { [EOL]         month = new Month(1, 1900); [EOL]     } [EOL]     assertEquals(2, month.getMonth()); [EOL]     assertEquals(1991, month.getYear().getYear()); [EOL]     try { [EOL]         month = Month.parseMonth("March 1993"); [EOL]     } catch (TimePeriodFormatException e) { [EOL]         month = new Month(1, 1900); [EOL]     } [EOL]     assertEquals(3, month.getMonth()); [EOL]     assertEquals(1993, month.getYear().getYear()); [EOL] } <line_num>: 219,253
public void testSerialization() { [EOL]     Month m1 = new Month(12, 1999); [EOL]     Month m2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(m1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         m2 = (Month) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         System.out.println(e.toString()); [EOL]     } [EOL]     assertEquals(m1, m2); [EOL] } <line_num>: 258,280
public void testHashcode() { [EOL]     Month m1 = new Month(2, 2003); [EOL]     Month m2 = new Month(2, 2003); [EOL]     assertTrue(m1.equals(m2)); [EOL]     int h1 = m1.hashCode(); [EOL]     int h2 = m2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 285,292
public void testNotCloneable() { [EOL]     Month m = new Month(2, 2003); [EOL]     assertFalse(m instanceof Cloneable); [EOL] } <line_num>: 297,300
public void testGetFirstMillisecond() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.UK); [EOL]     TimeZone savedZone = TimeZone.getDefault(); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Month m = new Month(3, 1970); [EOL]     assertEquals(5094000000L, m.getFirstMillisecond()); [EOL]     Locale.setDefault(saved); [EOL]     TimeZone.setDefault(savedZone); [EOL] } <line_num>: 305,314
public void testGetFirstMillisecondWithTimeZone() { [EOL]     Month m = new Month(2, 1950); [EOL]     TimeZone zone = TimeZone.getTimeZone("America/Los_Angeles"); [EOL]     Calendar c = new GregorianCalendar(zone); [EOL]     assertEquals(-628444800000L, m.getFirstMillisecond(c)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         m.getFirstMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 319,334
public void testGetFirstMillisecondWithCalendar() { [EOL]     Month m = new Month(1, 2001); [EOL]     GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY); [EOL]     calendar.setTimeZone(TimeZone.getTimeZone("Europe/Frankfurt")); [EOL]     assertEquals(978307200000L, m.getFirstMillisecond(calendar)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         m.getFirstMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 339,354
public void testGetLastMillisecond() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.UK); [EOL]     TimeZone savedZone = TimeZone.getDefault(); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Month m = new Month(3, 1970); [EOL]     assertEquals(7772399999L, m.getLastMillisecond()); [EOL]     Locale.setDefault(saved); [EOL]     TimeZone.setDefault(savedZone); [EOL] } <line_num>: 359,368
public void testGetLastMillisecondWithTimeZone() { [EOL]     Month m = new Month(2, 1950); [EOL]     TimeZone zone = TimeZone.getTimeZone("America/Los_Angeles"); [EOL]     Calendar c = new GregorianCalendar(zone); [EOL]     assertEquals(-626025600001L, m.getLastMillisecond(c)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         m.getLastMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 373,388
public void testGetLastMillisecondWithCalendar() { [EOL]     Month m = new Month(3, 2001); [EOL]     GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY); [EOL]     calendar.setTimeZone(TimeZone.getTimeZone("Europe/Frankfurt")); [EOL]     assertEquals(986083199999L, m.getLastMillisecond(calendar)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         m.getLastMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 393,408
public void testGetSerialIndex() { [EOL]     Month m = new Month(1, 2000); [EOL]     assertEquals(24001L, m.getSerialIndex()); [EOL]     m = new Month(1, 1900); [EOL]     assertEquals(22801L, m.getSerialIndex()); [EOL] } <line_num>: 413,418
public void testNext() { [EOL]     Month m = new Month(12, 2000); [EOL]     m = (Month) m.next(); [EOL]     assertEquals(new Year(2001), m.getYear()); [EOL]     assertEquals(1, m.getMonth()); [EOL]     m = new Month(12, 9999); [EOL]     assertNull(m.next()); [EOL] } <line_num>: 423,430
public void testGetStart() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.ITALY); [EOL]     Calendar cal = Calendar.getInstance(Locale.ITALY); [EOL]     cal.set(2006, Calendar.MARCH, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     Month m = new Month(3, 2006); [EOL]     assertEquals(cal.getTime(), m.getStart()); [EOL]     Locale.setDefault(saved); [EOL] } <line_num>: 435,444
public void testGetEnd() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.ITALY); [EOL]     Calendar cal = Calendar.getInstance(Locale.ITALY); [EOL]     cal.set(2006, Calendar.JANUARY, 31, 23, 59, 59); [EOL]     cal.set(Calendar.MILLISECOND, 999); [EOL]     Month m = new Month(1, 2006); [EOL]     assertEquals(cal.getTime(), m.getEnd()); [EOL]     Locale.setDefault(saved); [EOL] } <line_num>: 449,458
