public YearTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 88,90
public static Test suite() { [EOL]     return new TestSuite(YearTests.class); [EOL] } <line_num>: 79,81
protected void setUp() { [EOL] } <line_num>: 95,97
public void testEqualsSelf() { [EOL]     Year year = new Year(); [EOL]     assertTrue(year.equals(year)); [EOL] } <line_num>: 104,107
public void testEquals() { [EOL]     Year year1 = new Year(2002); [EOL]     Year year2 = new Year(2002); [EOL]     assertTrue(year1.equals(year2)); [EOL]     year1 = new Year(1999); [EOL]     assertFalse(year1.equals(year2)); [EOL]     year2 = new Year(1999); [EOL]     assertTrue(year1.equals(year2)); [EOL] } <line_num>: 112,121
public void testDateConstructor1() { [EOL]     TimeZone zone = TimeZone.getTimeZone("GMT"); [EOL]     Calendar c = new GregorianCalendar(zone); [EOL]     Date d1 = new Date(1009843199999L); [EOL]     Date d2 = new Date(1009843200000L); [EOL]     Year y1 = new Year(d1, zone); [EOL]     Year y2 = new Year(d2, zone); [EOL]     assertEquals(2001, y1.getYear()); [EOL]     assertEquals(1009843199999L, y1.getLastMillisecond(c)); [EOL]     assertEquals(2002, y2.getYear()); [EOL]     assertEquals(1009843200000L, y2.getFirstMillisecond(c)); [EOL] } <line_num>: 127,142
public void testDateConstructor2() { [EOL]     TimeZone zone = TimeZone.getTimeZone("America/Los_Angeles"); [EOL]     Calendar c = new GregorianCalendar(zone); [EOL]     Year y1 = new Year(new Date(1009871999999L), zone); [EOL]     Year y2 = new Year(new Date(1009872000000L), zone); [EOL]     assertEquals(2001, y1.getYear()); [EOL]     assertEquals(1009871999999L, y1.getLastMillisecond(c)); [EOL]     assertEquals(2002, y2.getYear()); [EOL]     assertEquals(1009872000000L, y2.getFirstMillisecond(c)); [EOL] } <line_num>: 148,161
public void testMinuss9999Previous() { [EOL]     Year current = new Year(-9999); [EOL]     Year previous = (Year) current.previous(); [EOL]     assertNull(previous); [EOL] } <line_num>: 167,171
public void test1900Next() { [EOL]     Year current = new Year(1900); [EOL]     Year next = (Year) current.next(); [EOL]     assertEquals(1901, next.getYear()); [EOL] } <line_num>: 176,180
public void test9999Previous() { [EOL]     Year current = new Year(9999); [EOL]     Year previous = (Year) current.previous(); [EOL]     assertEquals(9998, previous.getYear()); [EOL] } <line_num>: 186,190
public void test9999Next() { [EOL]     Year current = new Year(9999); [EOL]     Year next = (Year) current.next(); [EOL]     assertNull(next); [EOL] } <line_num>: 195,199
public void testParseYear() { [EOL]     Year year = null; [EOL]     try { [EOL]         year = Year.parseYear("2000"); [EOL]     } catch (TimePeriodFormatException e) { [EOL]         year = new Year(1900); [EOL]     } [EOL]     assertEquals(2000, year.getYear()); [EOL]     try { [EOL]         year = Year.parseYear(" 2001 "); [EOL]     } catch (TimePeriodFormatException e) { [EOL]         year = new Year(1900); [EOL]     } [EOL]     assertEquals(2001, year.getYear()); [EOL]     try { [EOL]         year = Year.parseYear("99"); [EOL]     } catch (TimePeriodFormatException e) { [EOL]         year = new Year(1900); [EOL]     } [EOL]     assertEquals(99, year.getYear()); [EOL] } <line_num>: 204,235
public void testSerialization() { [EOL]     Year y1 = new Year(1999); [EOL]     Year y2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(y1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         y2 = (Year) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         System.out.println(e.toString()); [EOL]     } [EOL]     assertEquals(y1, y2); [EOL] } <line_num>: 240,262
public void testNotCloneable() { [EOL]     Year y = new Year(1999); [EOL]     assertFalse(y instanceof Cloneable); [EOL] } <line_num>: 267,270
public void testHashcode() { [EOL]     Year y1 = new Year(1988); [EOL]     Year y2 = new Year(1988); [EOL]     assertTrue(y1.equals(y2)); [EOL]     int h1 = y1.hashCode(); [EOL]     int h2 = y2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 275,282
public void testGetFirstMillisecond() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.UK); [EOL]     TimeZone savedZone = TimeZone.getDefault(); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Year y = new Year(1970); [EOL]     assertEquals(-3600000L, y.getFirstMillisecond()); [EOL]     Locale.setDefault(saved); [EOL]     TimeZone.setDefault(savedZone); [EOL] } <line_num>: 287,297
public void testGetFirstMillisecondWithTimeZone() { [EOL]     Year y = new Year(1950); [EOL]     TimeZone zone = TimeZone.getTimeZone("America/Los_Angeles"); [EOL]     Calendar c = new GregorianCalendar(zone); [EOL]     assertEquals(-631123200000L, y.getFirstMillisecond(c)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         y.getFirstMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 302,317
public void testGetFirstMillisecondWithCalendar() { [EOL]     Year y = new Year(2001); [EOL]     GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY); [EOL]     calendar.setTimeZone(TimeZone.getTimeZone("Europe/Frankfurt")); [EOL]     assertEquals(978307200000L, y.getFirstMillisecond(calendar)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         y.getFirstMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 322,337
public void testGetLastMillisecond() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.UK); [EOL]     TimeZone savedZone = TimeZone.getDefault(); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Year y = new Year(1970); [EOL]     assertEquals(31532399999L, y.getLastMillisecond()); [EOL]     Locale.setDefault(saved); [EOL]     TimeZone.setDefault(savedZone); [EOL] } <line_num>: 342,352
public void testGetLastMillisecondWithTimeZone() { [EOL]     Year y = new Year(1950); [EOL]     TimeZone zone = TimeZone.getTimeZone("America/Los_Angeles"); [EOL]     Calendar c = new GregorianCalendar(zone); [EOL]     assertEquals(-599587200001L, y.getLastMillisecond(c)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         y.getLastMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 357,372
public void testGetLastMillisecondWithCalendar() { [EOL]     Year y = new Year(2001); [EOL]     GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY); [EOL]     calendar.setTimeZone(TimeZone.getTimeZone("Europe/Frankfurt")); [EOL]     assertEquals(1009843199999L, y.getLastMillisecond(calendar)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         y.getLastMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 377,392
public void testGetSerialIndex() { [EOL]     Year y = new Year(2000); [EOL]     assertEquals(2000L, y.getSerialIndex()); [EOL] } <line_num>: 397,400
public void testNext() { [EOL]     Year y = new Year(2000); [EOL]     y = (Year) y.next(); [EOL]     assertEquals(2001, y.getYear()); [EOL]     y = new Year(9999); [EOL]     assertNull(y.next()); [EOL] } <line_num>: 405,411
public void testGetStart() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.ITALY); [EOL]     Calendar cal = Calendar.getInstance(Locale.ITALY); [EOL]     cal.set(2006, Calendar.JANUARY, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     Year y = new Year(2006); [EOL]     assertEquals(cal.getTime(), y.getStart()); [EOL]     Locale.setDefault(saved); [EOL] } <line_num>: 416,425
public void testGetEnd() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.ITALY); [EOL]     Calendar cal = Calendar.getInstance(Locale.ITALY); [EOL]     cal.set(2006, Calendar.DECEMBER, 31, 23, 59, 59); [EOL]     cal.set(Calendar.MILLISECOND, 999); [EOL]     Year y = new Year(2006); [EOL]     assertEquals(cal.getTime(), y.getEnd()); [EOL]     Locale.setDefault(saved); [EOL] } <line_num>: 430,439
