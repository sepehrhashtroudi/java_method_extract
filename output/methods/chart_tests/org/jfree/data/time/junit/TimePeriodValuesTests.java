public TimePeriodValuesTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 97,99
public MySeriesChangeListener() { [EOL]     this.lastEvent = null; [EOL] } <line_num>: 418,420
public static Test suite() { [EOL]     return new TestSuite(TimePeriodValuesTests.class); [EOL] } <line_num>: 88,90
protected void setUp() { [EOL]     this.seriesA = new TimePeriodValues("Series A"); [EOL]     try { [EOL]         this.seriesA.add(new Year(2000), new Integer(102000)); [EOL]         this.seriesA.add(new Year(2001), new Integer(102001)); [EOL]         this.seriesA.add(new Year(2002), new Integer(102002)); [EOL]         this.seriesA.add(new Year(2003), new Integer(102003)); [EOL]         this.seriesA.add(new Year(2004), new Integer(102004)); [EOL]         this.seriesA.add(new Year(2005), new Integer(102005)); [EOL]     } catch (SeriesException e) { [EOL]         System.err.println("Problem creating series."); [EOL]     } [EOL]     this.seriesB = new TimePeriodValues("Series B"); [EOL]     try { [EOL]         this.seriesB.add(new Year(2006), new Integer(202006)); [EOL]         this.seriesB.add(new Year(2007), new Integer(202007)); [EOL]         this.seriesB.add(new Year(2008), new Integer(202008)); [EOL]     } catch (SeriesException e) { [EOL]         System.err.println("Problem creating series."); [EOL]     } [EOL]     this.seriesC = new TimePeriodValues("Series C"); [EOL]     try { [EOL]         this.seriesC.add(new Year(1999), new Integer(301999)); [EOL]         this.seriesC.add(new Year(2000), new Integer(302000)); [EOL]         this.seriesC.add(new Year(2002), new Integer(302002)); [EOL]     } catch (SeriesException e) { [EOL]         System.err.println("Problem creating series."); [EOL]     } [EOL] } <line_num>: 104,139
public void testClone() { [EOL]     TimePeriodValues series = new TimePeriodValues("Test Series"); [EOL]     RegularTimePeriod jan1st2002 = new Day(1, MonthConstants.JANUARY, 2002); [EOL]     try { [EOL]         series.add(jan1st2002, new Integer(42)); [EOL]     } catch (SeriesException e) { [EOL]         System.err.println("Problem adding to collection."); [EOL]     } [EOL]     TimePeriodValues clone = null; [EOL]     try { [EOL]         clone = (TimePeriodValues) series.clone(); [EOL]         clone.setKey("Clone Series"); [EOL]         try { [EOL]             clone.update(0, new Integer(10)); [EOL]         } catch (SeriesException e) { [EOL]             System.err.println("Problem updating series."); [EOL]         } [EOL]     } catch (CloneNotSupportedException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     int seriesValue = series.getValue(0).intValue(); [EOL]     int cloneValue = clone.getValue(0).intValue(); [EOL]     assertEquals(42, seriesValue); [EOL]     assertEquals(10, cloneValue); [EOL]     assertEquals("Test Series", series.getKey()); [EOL]     assertEquals("Clone Series", clone.getKey()); [EOL] } <line_num>: 145,180
public void testAddValue() { [EOL]     TimePeriodValues tpvs = new TimePeriodValues("Test"); [EOL]     try { [EOL]         tpvs.add(new Year(1999), new Integer(1)); [EOL]     } catch (SeriesException e) { [EOL]         System.err.println("Problem adding to series."); [EOL]     } [EOL]     int value = tpvs.getValue(0).intValue(); [EOL]     assertEquals(1, value); [EOL] } <line_num>: 185,198
public void testSerialization() { [EOL]     TimePeriodValues s1 = new TimePeriodValues("A test"); [EOL]     s1.add(new Year(2000), 13.75); [EOL]     s1.add(new Year(2001), 11.90); [EOL]     s1.add(new Year(2002), null); [EOL]     s1.add(new Year(2005), 19.32); [EOL]     s1.add(new Year(2007), 16.89); [EOL]     TimePeriodValues s2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(s1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         s2 = (TimePeriodValues) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(s1.equals(s2)); [EOL] } <line_num>: 203,229
public void testEquals() { [EOL]     TimePeriodValues s1 = new TimePeriodValues("Time Series 1"); [EOL]     TimePeriodValues s2 = new TimePeriodValues("Time Series 2"); [EOL]     boolean b1 = s1.equals(s2); [EOL]     assertFalse("b1", b1); [EOL]     s2.setKey("Time Series 1"); [EOL]     boolean b2 = s1.equals(s2); [EOL]     assertTrue("b2", b2); [EOL]     s1.setDomainDescription("XYZ"); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.setDomainDescription("XYZ"); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1.setDomainDescription(null); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.setDomainDescription(null); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1.setRangeDescription("XYZ"); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.setRangeDescription("XYZ"); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1.setRangeDescription(null); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.setRangeDescription(null); [EOL]     assertTrue(s1.equals(s2)); [EOL]     RegularTimePeriod p1 = new Day(); [EOL]     RegularTimePeriod p2 = p1.next(); [EOL]     s1.add(p1, 100.0); [EOL]     s1.add(p2, 200.0); [EOL]     boolean b3 = s1.equals(s2); [EOL]     assertFalse("b3", b3); [EOL]     s2.add(p1, 100.0); [EOL]     s2.add(p2, 200.0); [EOL]     boolean b4 = s1.equals(s2); [EOL]     assertTrue("b4", b4); [EOL] } <line_num>: 234,280
public void test1161329() { [EOL]     TimePeriodValues tpv = new TimePeriodValues("Test"); [EOL]     RegularTimePeriod t = new Day(); [EOL]     tpv.add(t, 1.0); [EOL]     t = t.next(); [EOL]     tpv.add(t, 2.0); [EOL]     tpv.delete(0, 1); [EOL]     assertEquals(0, tpv.getItemCount()); [EOL]     tpv.add(t, 2.0); [EOL]     assertEquals(1, tpv.getItemCount()); [EOL] } <line_num>: 285,295
public void testAdd() { [EOL]     TimePeriodValues tpv = new TimePeriodValues("Test"); [EOL]     MySeriesChangeListener listener = new MySeriesChangeListener(); [EOL]     tpv.addChangeListener(listener); [EOL]     tpv.add(new TimePeriodValue(new SimpleTimePeriod(new Date(1L), new Date(3L)), 99.0)); [EOL]     assertEquals(99.0, tpv.getValue(0).doubleValue(), EPSILON); [EOL]     assertEquals(tpv, listener.getLastEvent().getSource()); [EOL]     boolean pass = false; [EOL]     try { [EOL]         tpv.add((TimePeriodValue) null); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 302,320
public void testGetMinStartIndex() { [EOL]     TimePeriodValues s = new TimePeriodValues("Test"); [EOL]     assertEquals(-1, s.getMinStartIndex()); [EOL]     s.add(new SimpleTimePeriod(100L, 200L), 1.0); [EOL]     assertEquals(0, s.getMinStartIndex()); [EOL]     s.add(new SimpleTimePeriod(300L, 400L), 2.0); [EOL]     assertEquals(0, s.getMinStartIndex()); [EOL]     s.add(new SimpleTimePeriod(0L, 50L), 3.0); [EOL]     assertEquals(2, s.getMinStartIndex()); [EOL] } <line_num>: 325,334
public void testGetMaxStartIndex() { [EOL]     TimePeriodValues s = new TimePeriodValues("Test"); [EOL]     assertEquals(-1, s.getMaxStartIndex()); [EOL]     s.add(new SimpleTimePeriod(100L, 200L), 1.0); [EOL]     assertEquals(0, s.getMaxStartIndex()); [EOL]     s.add(new SimpleTimePeriod(300L, 400L), 2.0); [EOL]     assertEquals(1, s.getMaxStartIndex()); [EOL]     s.add(new SimpleTimePeriod(0L, 50L), 3.0); [EOL]     assertEquals(1, s.getMaxStartIndex()); [EOL] } <line_num>: 339,348
public void testGetMinMiddleIndex() { [EOL]     TimePeriodValues s = new TimePeriodValues("Test"); [EOL]     assertEquals(-1, s.getMinMiddleIndex()); [EOL]     s.add(new SimpleTimePeriod(100L, 200L), 1.0); [EOL]     assertEquals(0, s.getMinMiddleIndex()); [EOL]     s.add(new SimpleTimePeriod(300L, 400L), 2.0); [EOL]     assertEquals(0, s.getMinMiddleIndex()); [EOL]     s.add(new SimpleTimePeriod(0L, 50L), 3.0); [EOL]     assertEquals(2, s.getMinMiddleIndex()); [EOL] } <line_num>: 353,362
public void testGetMaxMiddleIndex() { [EOL]     TimePeriodValues s = new TimePeriodValues("Test"); [EOL]     assertEquals(-1, s.getMaxMiddleIndex()); [EOL]     s.add(new SimpleTimePeriod(100L, 200L), 1.0); [EOL]     assertEquals(0, s.getMaxMiddleIndex()); [EOL]     s.add(new SimpleTimePeriod(300L, 400L), 2.0); [EOL]     assertEquals(1, s.getMaxMiddleIndex()); [EOL]     s.add(new SimpleTimePeriod(0L, 50L), 3.0); [EOL]     assertEquals(1, s.getMaxMiddleIndex()); [EOL]     s.add(new SimpleTimePeriod(150L, 200L), 4.0); [EOL]     assertEquals(1, s.getMaxMiddleIndex()); [EOL] } <line_num>: 367,378
public void getMinEndIndex() { [EOL]     TimePeriodValues s = new TimePeriodValues("Test"); [EOL]     assertEquals(-1, s.getMinEndIndex()); [EOL]     s.add(new SimpleTimePeriod(100L, 200L), 1.0); [EOL]     assertEquals(0, s.getMinEndIndex()); [EOL]     s.add(new SimpleTimePeriod(300L, 400L), 2.0); [EOL]     assertEquals(0, s.getMinEndIndex()); [EOL]     s.add(new SimpleTimePeriod(0L, 50L), 3.0); [EOL]     assertEquals(2, s.getMinEndIndex()); [EOL] } <line_num>: 383,392
public void getMaxEndIndex() { [EOL]     TimePeriodValues s = new TimePeriodValues("Test"); [EOL]     assertEquals(-1, s.getMaxEndIndex()); [EOL]     s.add(new SimpleTimePeriod(100L, 200L), 1.0); [EOL]     assertEquals(0, s.getMaxEndIndex()); [EOL]     s.add(new SimpleTimePeriod(300L, 400L), 2.0); [EOL]     assertEquals(1, s.getMaxEndIndex()); [EOL]     s.add(new SimpleTimePeriod(0L, 50L), 3.0); [EOL]     assertEquals(1, s.getMaxEndIndex()); [EOL] } <line_num>: 397,406
public SeriesChangeEvent getLastEvent() { [EOL]     return this.lastEvent; [EOL] } <line_num>: 427,429
public void clearLastEvent() { [EOL]     this.lastEvent = null; [EOL] } <line_num>: 434,436
public void seriesChanged(SeriesChangeEvent event) { [EOL]     this.lastEvent = event; [EOL] } <line_num>: 443,445
