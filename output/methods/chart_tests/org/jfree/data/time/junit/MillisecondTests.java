public MillisecondTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 92,94
public static Test suite() { [EOL]     return new TestSuite(MillisecondTests.class); [EOL] } <line_num>: 83,85
protected void setUp() { [EOL] } <line_num>: 99,101
public void testEqualsSelf() { [EOL]     Millisecond millisecond = new Millisecond(); [EOL]     assertTrue(millisecond.equals(millisecond)); [EOL] } <line_num>: 108,111
public void testEquals() { [EOL]     Day day1 = new Day(29, MonthConstants.MARCH, 2002); [EOL]     Hour hour1 = new Hour(15, day1); [EOL]     Minute minute1 = new Minute(15, hour1); [EOL]     Second second1 = new Second(34, minute1); [EOL]     Millisecond milli1 = new Millisecond(999, second1); [EOL]     Day day2 = new Day(29, MonthConstants.MARCH, 2002); [EOL]     Hour hour2 = new Hour(15, day2); [EOL]     Minute minute2 = new Minute(15, hour2); [EOL]     Second second2 = new Second(34, minute2); [EOL]     Millisecond milli2 = new Millisecond(999, second2); [EOL]     assertTrue(milli1.equals(milli2)); [EOL] } <line_num>: 116,128
public void testDateConstructor1() { [EOL]     TimeZone zone = TimeZone.getTimeZone("GMT"); [EOL]     Calendar c = new GregorianCalendar(zone); [EOL]     Millisecond m1 = new Millisecond(new Date(1016729759122L), zone); [EOL]     Millisecond m2 = new Millisecond(new Date(1016729759123L), zone); [EOL]     assertEquals(122, m1.getMillisecond()); [EOL]     assertEquals(1016729759122L, m1.getLastMillisecond(c)); [EOL]     assertEquals(123, m2.getMillisecond()); [EOL]     assertEquals(1016729759123L, m2.getFirstMillisecond(c)); [EOL] } <line_num>: 135,148
public void testDateConstructor2() { [EOL]     TimeZone zone = TimeZone.getTimeZone("Europe/Tallinn"); [EOL]     Calendar c = new GregorianCalendar(zone); [EOL]     Millisecond m1 = new Millisecond(new Date(1016722559122L), zone); [EOL]     Millisecond m2 = new Millisecond(new Date(1016722559123L), zone); [EOL]     assertEquals(122, m1.getMillisecond()); [EOL]     assertEquals(1016722559122L, m1.getLastMillisecond(c)); [EOL]     assertEquals(123, m2.getMillisecond()); [EOL]     assertEquals(1016722559123L, m2.getFirstMillisecond(c)); [EOL] } <line_num>: 155,168
public void testSerialization() { [EOL]     Millisecond m1 = new Millisecond(); [EOL]     Millisecond m2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(m1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         m2 = (Millisecond) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         System.out.println(e.toString()); [EOL]     } [EOL]     assertEquals(m1, m2); [EOL] } <line_num>: 173,195
public void testHashcode() { [EOL]     Millisecond m1 = new Millisecond(599, 23, 45, 7, 9, 10, 2007); [EOL]     Millisecond m2 = new Millisecond(599, 23, 45, 7, 9, 10, 2007); [EOL]     assertTrue(m1.equals(m2)); [EOL]     int hash1 = m1.hashCode(); [EOL]     int hash2 = m2.hashCode(); [EOL]     assertEquals(hash1, hash2); [EOL] } <line_num>: 200,207
public void test943985() { [EOL]     Millisecond ms = new Millisecond(new java.util.Date(4)); [EOL]     assertEquals(ms.getFirstMillisecond(), ms.getMiddleMillisecond()); [EOL]     assertEquals(ms.getMiddleMillisecond(), ms.getLastMillisecond()); [EOL]     ms = new Millisecond(new java.util.Date(5)); [EOL]     assertEquals(ms.getFirstMillisecond(), ms.getMiddleMillisecond()); [EOL]     assertEquals(ms.getMiddleMillisecond(), ms.getLastMillisecond()); [EOL] } <line_num>: 213,220
public void testNotCloneable() { [EOL]     Millisecond m = new Millisecond(599, 23, 45, 7, 9, 10, 2007); [EOL]     assertFalse(m instanceof Cloneable); [EOL] } <line_num>: 226,229
public void testGetFirstMillisecond() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.UK); [EOL]     TimeZone savedZone = TimeZone.getDefault(); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Millisecond m = new Millisecond(500, 15, 43, 15, 1, 4, 2006); [EOL]     assertEquals(1143902595500L, m.getFirstMillisecond()); [EOL]     Locale.setDefault(saved); [EOL]     TimeZone.setDefault(savedZone); [EOL] } <line_num>: 234,243
public void testGetFirstMillisecondWithTimeZone() { [EOL]     Millisecond m = new Millisecond(500, 50, 59, 15, 1, 4, 1950); [EOL]     TimeZone zone = TimeZone.getTimeZone("America/Los_Angeles"); [EOL]     Calendar c = new GregorianCalendar(zone); [EOL]     assertEquals(-623289609500L, m.getFirstMillisecond(c)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         m.getFirstMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 248,263
public void testGetFirstMillisecondWithCalendar() { [EOL]     Millisecond m = new Millisecond(500, 55, 40, 2, 15, 4, 2000); [EOL]     GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY); [EOL]     calendar.setTimeZone(TimeZone.getTimeZone("Europe/Frankfurt")); [EOL]     assertEquals(955766455500L, m.getFirstMillisecond(calendar)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         m.getFirstMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 268,283
public void testGetLastMillisecond() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.UK); [EOL]     TimeZone savedZone = TimeZone.getDefault(); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Millisecond m = new Millisecond(750, 1, 1, 1, 1, 1, 1970); [EOL]     assertEquals(61750L, m.getLastMillisecond()); [EOL]     Locale.setDefault(saved); [EOL]     TimeZone.setDefault(savedZone); [EOL] } <line_num>: 288,297
public void testGetLastMillisecondWithTimeZone() { [EOL]     Millisecond m = new Millisecond(750, 55, 1, 2, 7, 7, 1950); [EOL]     TimeZone zone = TimeZone.getTimeZone("America/Los_Angeles"); [EOL]     Calendar c = new GregorianCalendar(zone); [EOL]     assertEquals(-614962684250L, m.getLastMillisecond(c)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         m.getLastMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 302,317
public void testGetLastMillisecondWithCalendar() { [EOL]     Millisecond m = new Millisecond(250, 50, 45, 21, 21, 4, 2001); [EOL]     GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY); [EOL]     calendar.setTimeZone(TimeZone.getTimeZone("Europe/Frankfurt")); [EOL]     assertEquals(987889550250L, m.getLastMillisecond(calendar)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         m.getLastMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 322,337
public void testGetSerialIndex() { [EOL]     Millisecond m = new Millisecond(500, 1, 1, 1, 1, 1, 2000); [EOL]     assertEquals(3155850061500L, m.getSerialIndex()); [EOL]     m = new Millisecond(500, 1, 1, 1, 1, 1, 1900); [EOL]     assertEquals(176461500L, m.getSerialIndex()); [EOL] } <line_num>: 342,348
public void testNext() { [EOL]     Millisecond m = new Millisecond(555, 55, 30, 1, 12, 12, 2000); [EOL]     m = (Millisecond) m.next(); [EOL]     assertEquals(2000, m.getSecond().getMinute().getHour().getYear()); [EOL]     assertEquals(12, m.getSecond().getMinute().getHour().getMonth()); [EOL]     assertEquals(12, m.getSecond().getMinute().getHour().getDayOfMonth()); [EOL]     assertEquals(1, m.getSecond().getMinute().getHour().getHour()); [EOL]     assertEquals(30, m.getSecond().getMinute().getMinute()); [EOL]     assertEquals(55, m.getSecond().getSecond()); [EOL]     assertEquals(556, m.getMillisecond()); [EOL]     m = new Millisecond(999, 59, 59, 23, 31, 12, 9999); [EOL]     assertNull(m.next()); [EOL] } <line_num>: 353,365
public void testGetStart() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.ITALY); [EOL]     Calendar cal = Calendar.getInstance(Locale.ITALY); [EOL]     cal.set(2006, Calendar.JANUARY, 16, 3, 47, 55); [EOL]     cal.set(Calendar.MILLISECOND, 555); [EOL]     Millisecond m = new Millisecond(555, 55, 47, 3, 16, 1, 2006); [EOL]     assertEquals(cal.getTime(), m.getStart()); [EOL]     Locale.setDefault(saved); [EOL] } <line_num>: 370,379
public void testGetEnd() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.ITALY); [EOL]     Calendar cal = Calendar.getInstance(Locale.ITALY); [EOL]     cal.set(2006, Calendar.JANUARY, 16, 3, 47, 55); [EOL]     cal.set(Calendar.MILLISECOND, 555); [EOL]     Millisecond m = new Millisecond(555, 55, 47, 3, 16, 1, 2006); [EOL]     assertEquals(cal.getTime(), m.getEnd()); [EOL]     Locale.setDefault(saved); [EOL] } <line_num>: 384,393
