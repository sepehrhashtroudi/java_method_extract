public TimePeriodValuesCollectionTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 85,87
public static Test suite() { [EOL]     return new TestSuite(TimePeriodValuesCollectionTests.class); [EOL] } <line_num>: 76,78
protected void setUp() { [EOL] } <line_num>: 92,94
public void test1161340() { [EOL]     TimePeriodValuesCollection dataset = new TimePeriodValuesCollection(); [EOL]     TimePeriodValues v1 = new TimePeriodValues("V1"); [EOL]     v1.add(new Day(11, 3, 2005), 1.2); [EOL]     v1.add(new Day(12, 3, 2005), 3.4); [EOL]     dataset.addSeries(v1); [EOL]     assertEquals(1, dataset.getSeriesCount()); [EOL]     dataset.removeSeries(v1); [EOL]     assertEquals(0, dataset.getSeriesCount()); [EOL]     TimePeriodValues v2 = new TimePeriodValues("V2"); [EOL]     v1.add(new Day(5, 3, 2005), 1.2); [EOL]     v1.add(new Day(6, 3, 2005), 3.4); [EOL]     dataset.addSeries(v2); [EOL]     assertEquals(1, dataset.getSeriesCount()); [EOL] } <line_num>: 100,115
public void testEquals() { [EOL]     TimePeriodValuesCollection c1 = new TimePeriodValuesCollection(); [EOL]     TimePeriodValuesCollection c2 = new TimePeriodValuesCollection(); [EOL]     assertTrue(c1.equals(c2)); [EOL]     c1.setXPosition(TimePeriodAnchor.END); [EOL]     assertFalse(c1.equals(c2)); [EOL]     c2.setXPosition(TimePeriodAnchor.END); [EOL]     assertTrue(c1.equals(c2)); [EOL]     TimePeriodValues v1 = new TimePeriodValues("Test"); [EOL]     TimePeriodValues v2 = new TimePeriodValues("Test"); [EOL]     c1.addSeries(v1); [EOL]     assertFalse(c1.equals(c2)); [EOL]     c2.addSeries(v2); [EOL]     assertTrue(c1.equals(c2)); [EOL] } <line_num>: 120,138
public void testSerialization() { [EOL]     TimePeriodValuesCollection c1 = new TimePeriodValuesCollection(); [EOL]     TimePeriodValuesCollection c2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(c1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         c2 = (TimePeriodValuesCollection) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(c1, c2); [EOL] } <line_num>: 143,161
public void testGetSeries() { [EOL]     TimePeriodValuesCollection c1 = new TimePeriodValuesCollection(); [EOL]     TimePeriodValues s1 = new TimePeriodValues("Series 1"); [EOL]     c1.addSeries(s1); [EOL]     assertEquals("Series 1", c1.getSeries(0).getKey()); [EOL]     boolean pass = false; [EOL]     try { [EOL]         c1.getSeries(-1); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         c1.getSeries(1); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 166,189
public void testGetDomainBoundsWithoutInterval() { [EOL]     TimePeriodValuesCollection dataset = new TimePeriodValuesCollection(); [EOL]     Range r = dataset.getDomainBounds(false); [EOL]     assertNull(r); [EOL]     TimePeriodValues s1 = new TimePeriodValues("S1"); [EOL]     s1.add(new SimpleTimePeriod(1000L, 2000L), 1.0); [EOL]     dataset.addSeries(s1); [EOL]     r = dataset.getDomainBounds(false); [EOL]     assertEquals(1500.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(1500.0, r.getUpperBound(), EPSILON); [EOL]     s1.add(new SimpleTimePeriod(1500L, 3000L), 2.0); [EOL]     r = dataset.getDomainBounds(false); [EOL]     assertEquals(1500.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(2250.0, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 196,215
public void testGetDomainBoundsWithInterval() { [EOL]     TimePeriodValuesCollection dataset = new TimePeriodValuesCollection(); [EOL]     Range r = dataset.getDomainBounds(true); [EOL]     assertNull(r); [EOL]     TimePeriodValues s1 = new TimePeriodValues("S1"); [EOL]     s1.add(new SimpleTimePeriod(1000L, 2000L), 1.0); [EOL]     dataset.addSeries(s1); [EOL]     r = dataset.getDomainBounds(true); [EOL]     assertEquals(1000.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(2000.0, r.getUpperBound(), EPSILON); [EOL]     s1.add(new SimpleTimePeriod(1500L, 3000L), 2.0); [EOL]     r = dataset.getDomainBounds(true); [EOL]     assertEquals(1000.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(3000.0, r.getUpperBound(), EPSILON); [EOL]     s1.add(new SimpleTimePeriod(6000L, 7000L), 1.5); [EOL]     r = dataset.getDomainBounds(true); [EOL]     assertEquals(1000.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(7000.0, r.getUpperBound(), EPSILON); [EOL]     s1.add(new SimpleTimePeriod(4000L, 5000L), 1.4); [EOL]     r = dataset.getDomainBounds(true); [EOL]     assertEquals(1000.0, r.getLowerBound(), EPSILON); [EOL]     assertEquals(7000.0, r.getUpperBound(), EPSILON); [EOL] } <line_num>: 222,253
