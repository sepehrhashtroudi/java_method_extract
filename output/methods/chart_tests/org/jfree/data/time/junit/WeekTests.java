public WeekTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 103,105
public static Test suite() { [EOL]     return new TestSuite(WeekTests.class); [EOL] } <line_num>: 94,96
protected void setUp() { [EOL]     this.w1Y1900 = new Week(1, 1900); [EOL]     this.w2Y1900 = new Week(2, 1900); [EOL]     this.w51Y9999 = new Week(51, 9999); [EOL]     this.w52Y9999 = new Week(52, 9999); [EOL] } <line_num>: 110,115
public void testEquals() { [EOL]     Week w1 = new Week(1, 2002); [EOL]     Week w2 = new Week(1, 2002); [EOL]     assertTrue(w1.equals(w2)); [EOL]     assertTrue(w2.equals(w1)); [EOL]     w1 = new Week(2, 2002); [EOL]     assertFalse(w1.equals(w2)); [EOL]     w2 = new Week(2, 2002); [EOL]     assertTrue(w1.equals(w2)); [EOL]     w1 = new Week(2, 2003); [EOL]     assertFalse(w1.equals(w2)); [EOL]     w2 = new Week(2, 2003); [EOL]     assertTrue(w1.equals(w2)); [EOL] } <line_num>: 120,135
public void testW1Y1900Previous() { [EOL]     Week previous = (Week) this.w1Y1900.previous(); [EOL]     assertNull(previous); [EOL] } <line_num>: 140,143
public void testW1Y1900Next() { [EOL]     Week next = (Week) this.w1Y1900.next(); [EOL]     assertEquals(this.w2Y1900, next); [EOL] } <line_num>: 148,151
public void testW52Y9999Previous() { [EOL]     Week previous = (Week) this.w52Y9999.previous(); [EOL]     assertEquals(this.w51Y9999, previous); [EOL] } <line_num>: 156,159
public void testW52Y9999Next() { [EOL]     Week next = (Week) this.w52Y9999.next(); [EOL]     assertNull(next); [EOL] } <line_num>: 164,167
public void testSerialization() { [EOL]     Week w1 = new Week(24, 1999); [EOL]     Week w2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(w1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         w2 = (Week) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(w1, w2); [EOL] } <line_num>: 172,193
public void testHashcode() { [EOL]     Week w1 = new Week(2, 2003); [EOL]     Week w2 = new Week(2, 2003); [EOL]     assertTrue(w1.equals(w2)); [EOL]     int h1 = w1.hashCode(); [EOL]     int h2 = w2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 198,205
public void testNotCloneable() { [EOL]     Week w = new Week(1, 1999); [EOL]     assertFalse(w instanceof Cloneable); [EOL] } <line_num>: 210,213
public void testWeek12005() { [EOL]     Week w1 = new Week(1, 2005); [EOL]     Calendar c1 = Calendar.getInstance(TimeZone.getTimeZone("Europe/London"), Locale.UK); [EOL]     c1.setMinimalDaysInFirstWeek(4); [EOL]     assertEquals(1104710400000L, w1.getFirstMillisecond(c1)); [EOL]     assertEquals(1105315199999L, w1.getLastMillisecond(c1)); [EOL]     Calendar c2 = Calendar.getInstance(TimeZone.getTimeZone("Europe/Paris"), Locale.FRANCE); [EOL]     c2.setMinimalDaysInFirstWeek(4); [EOL]     assertEquals(1104706800000L, w1.getFirstMillisecond(c2)); [EOL]     assertEquals(1105311599999L, w1.getLastMillisecond(c2)); [EOL]     Calendar c3 = Calendar.getInstance(TimeZone.getTimeZone("America/New_York"), Locale.US); [EOL]     assertEquals(1104037200000L, w1.getFirstMillisecond(c3)); [EOL]     assertEquals(1104641999999L, w1.getLastMillisecond(c3)); [EOL] } <line_num>: 235,251
public void testWeek532005() { [EOL]     Week w1 = new Week(53, 2004); [EOL]     Calendar c1 = Calendar.getInstance(TimeZone.getTimeZone("Europe/London"), Locale.UK); [EOL]     c1.setMinimalDaysInFirstWeek(4); [EOL]     assertEquals(1104105600000L, w1.getFirstMillisecond(c1)); [EOL]     assertEquals(1104710399999L, w1.getLastMillisecond(c1)); [EOL]     Calendar c2 = Calendar.getInstance(TimeZone.getTimeZone("Europe/Paris"), Locale.FRANCE); [EOL]     c2.setMinimalDaysInFirstWeek(4); [EOL]     assertEquals(1104102000000L, w1.getFirstMillisecond(c2)); [EOL]     assertEquals(1104706799999L, w1.getLastMillisecond(c2)); [EOL]     w1 = new Week(53, 2005); [EOL]     Calendar c3 = Calendar.getInstance(TimeZone.getTimeZone("America/New_York"), Locale.US); [EOL]     assertEquals(1135486800000L, w1.getFirstMillisecond(c3)); [EOL]     assertEquals(1136091599999L, w1.getLastMillisecond(c3)); [EOL] } <line_num>: 270,287
public void testBug1448828() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.UK); [EOL]     try { [EOL]         Week w = new Week(new Date(1136109830000l), TimeZone.getTimeZone("GMT"), Locale.getDefault()); [EOL]         assertEquals(2005, w.getYearValue()); [EOL]         assertEquals(52, w.getWeek()); [EOL]     } finally { [EOL]         Locale.setDefault(saved); [EOL]     } [EOL] } <line_num>: 292,304
public void testBug1498805() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.UK); [EOL]     try { [EOL]         TimeZone zone = TimeZone.getTimeZone("GMT"); [EOL]         GregorianCalendar gc = new GregorianCalendar(zone); [EOL]         gc.set(2005, Calendar.JANUARY, 1, 12, 0, 0); [EOL]         Week w = new Week(gc.getTime(), zone, Locale.getDefault()); [EOL]         assertEquals(53, w.getWeek()); [EOL]         assertEquals(new Year(2004), w.getYear()); [EOL]     } finally { [EOL]         Locale.setDefault(saved); [EOL]     } [EOL] } <line_num>: 309,323
public void testGetFirstMillisecond() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.UK); [EOL]     TimeZone savedZone = TimeZone.getDefault(); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Week w = new Week(3, 1970); [EOL]     assertEquals(946800000L, w.getFirstMillisecond()); [EOL]     Locale.setDefault(saved); [EOL]     TimeZone.setDefault(savedZone); [EOL] } <line_num>: 328,337
public void testGetFirstMillisecondWithTimeZone() { [EOL]     Week w = new Week(47, 1950); [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.US); [EOL]     try { [EOL]         TimeZone zone = TimeZone.getTimeZone("America/Los_Angeles"); [EOL]         Calendar c = new GregorianCalendar(zone); [EOL]         assertEquals(-603302400000L, w.getFirstMillisecond(c)); [EOL]     } finally { [EOL]         Locale.setDefault(saved); [EOL]     } [EOL]     boolean pass = false; [EOL]     try { [EOL]         w.getFirstMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 342,364
public void testGetFirstMillisecondWithCalendar() { [EOL]     Week w = new Week(1, 2001); [EOL]     GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY); [EOL]     calendar.setTimeZone(TimeZone.getTimeZone("Europe/Frankfurt")); [EOL]     assertEquals(978307200000L, w.getFirstMillisecond(calendar)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         w.getFirstMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 369,384
public void testGetLastMillisecond() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.UK); [EOL]     TimeZone savedZone = TimeZone.getDefault(); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Week w = new Week(31, 1970); [EOL]     assertEquals(18485999999L, w.getLastMillisecond()); [EOL]     Locale.setDefault(saved); [EOL]     TimeZone.setDefault(savedZone); [EOL] } <line_num>: 389,398
public void testGetLastMillisecondWithTimeZone() { [EOL]     Week w = new Week(2, 1950); [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.US); [EOL]     try { [EOL]         TimeZone zone = TimeZone.getTimeZone("America/Los_Angeles"); [EOL]         Calendar c = new GregorianCalendar(zone); [EOL]         assertEquals(-629913600001L, w.getLastMillisecond(c)); [EOL]     } finally { [EOL]         Locale.setDefault(saved); [EOL]     } [EOL]     boolean pass = false; [EOL]     try { [EOL]         w.getLastMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 403,425
public void testGetLastMillisecondWithCalendar() { [EOL]     Week w = new Week(52, 2001); [EOL]     GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY); [EOL]     calendar.setTimeZone(TimeZone.getTimeZone("Europe/Frankfurt")); [EOL]     assertEquals(1009756799999L, w.getLastMillisecond(calendar)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         w.getLastMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 430,445
public void testGetSerialIndex() { [EOL]     Week w = new Week(1, 2000); [EOL]     assertEquals(106001L, w.getSerialIndex()); [EOL]     w = new Week(1, 1900); [EOL]     assertEquals(100701L, w.getSerialIndex()); [EOL] } <line_num>: 450,455
public void testNext() { [EOL]     Week w = new Week(12, 2000); [EOL]     w = (Week) w.next(); [EOL]     assertEquals(new Year(2000), w.getYear()); [EOL]     assertEquals(13, w.getWeek()); [EOL]     w = new Week(53, 9999); [EOL]     assertNull(w.next()); [EOL] } <line_num>: 460,467
public void testGetStart() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.ITALY); [EOL]     Calendar cal = Calendar.getInstance(Locale.ITALY); [EOL]     cal.set(2006, Calendar.JANUARY, 16, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     Week w = new Week(3, 2006); [EOL]     assertEquals(cal.getTime(), w.getStart()); [EOL]     Locale.setDefault(saved); [EOL] } <line_num>: 472,481
public void testGetEnd() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.ITALY); [EOL]     Calendar cal = Calendar.getInstance(Locale.ITALY); [EOL]     cal.set(2006, Calendar.JANUARY, 8, 23, 59, 59); [EOL]     cal.set(Calendar.MILLISECOND, 999); [EOL]     Week w = new Week(1, 2006); [EOL]     assertEquals(cal.getTime(), w.getEnd()); [EOL]     Locale.setDefault(saved); [EOL] } <line_num>: 486,495
public void testConstructor() { [EOL]     Locale savedLocale = Locale.getDefault(); [EOL]     TimeZone savedZone = TimeZone.getDefault(); [EOL]     Locale.setDefault(new Locale("da", "DK")); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/Copenhagen")); [EOL]     GregorianCalendar cal = (GregorianCalendar) Calendar.getInstance(TimeZone.getDefault(), Locale.getDefault()); [EOL]     assertEquals(Calendar.MONDAY, cal.getFirstDayOfWeek()); [EOL]     cal.set(2007, Calendar.AUGUST, 26, 1, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     Date t = cal.getTime(); [EOL]     Week w = new Week(t, TimeZone.getTimeZone("Europe/Copenhagen"), Locale.getDefault()); [EOL]     assertEquals(34, w.getWeek()); [EOL]     Locale.setDefault(Locale.US); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("US/Detroit")); [EOL]     cal = (GregorianCalendar) Calendar.getInstance(TimeZone.getDefault()); [EOL]     assertEquals(Calendar.SUNDAY, cal.getFirstDayOfWeek()); [EOL]     cal.set(2007, Calendar.AUGUST, 26, 1, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     t = cal.getTime(); [EOL]     w = new Week(t, TimeZone.getTimeZone("Europe/Copenhagen"), Locale.getDefault()); [EOL]     assertEquals(35, w.getWeek()); [EOL]     w = new Week(t, TimeZone.getTimeZone("Europe/Copenhagen"), new Locale("da", "DK")); [EOL]     assertEquals(34, w.getWeek()); [EOL]     Locale.setDefault(savedLocale); [EOL]     TimeZone.setDefault(savedZone); [EOL] } <line_num>: 500,535
