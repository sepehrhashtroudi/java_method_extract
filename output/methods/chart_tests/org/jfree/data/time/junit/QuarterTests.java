public QuarterTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 99,101
public static Test suite() { [EOL]     return new TestSuite(QuarterTests.class); [EOL] } <line_num>: 90,92
protected void setUp() { [EOL]     this.q1Y1900 = new Quarter(1, 1900); [EOL]     this.q2Y1900 = new Quarter(2, 1900); [EOL]     this.q3Y9999 = new Quarter(3, 9999); [EOL]     this.q4Y9999 = new Quarter(4, 9999); [EOL] } <line_num>: 106,111
public void testEqualsSelf() { [EOL]     Quarter quarter = new Quarter(); [EOL]     assertTrue(quarter.equals(quarter)); [EOL] } <line_num>: 118,121
public void testEquals() { [EOL]     Quarter q1 = new Quarter(2, 2002); [EOL]     Quarter q2 = new Quarter(2, 2002); [EOL]     assertTrue(q1.equals(q2)); [EOL] } <line_num>: 126,130
public void testDateConstructor1() { [EOL]     TimeZone zone = TimeZone.getTimeZone("GMT"); [EOL]     Calendar c = new GregorianCalendar(zone); [EOL]     Quarter q1 = new Quarter(new Date(1017619199999L), zone, Locale.getDefault()); [EOL]     Quarter q2 = new Quarter(new Date(1017619200000L), zone, Locale.getDefault()); [EOL]     assertEquals(1, q1.getQuarter()); [EOL]     assertEquals(1017619199999L, q1.getLastMillisecond(c)); [EOL]     assertEquals(2, q2.getQuarter()); [EOL]     assertEquals(1017619200000L, q2.getFirstMillisecond(c)); [EOL] } <line_num>: 136,151
public void testDateConstructor2() { [EOL]     TimeZone zone = TimeZone.getTimeZone("Europe/Istanbul"); [EOL]     Calendar c = new GregorianCalendar(zone); [EOL]     Quarter q1 = new Quarter(new Date(1017608399999L), zone, Locale.getDefault()); [EOL]     Quarter q2 = new Quarter(new Date(1017608400000L), zone, Locale.getDefault()); [EOL]     assertEquals(1, q1.getQuarter()); [EOL]     assertEquals(1017608399999L, q1.getLastMillisecond(c)); [EOL]     assertEquals(2, q2.getQuarter()); [EOL]     assertEquals(1017608400000L, q2.getFirstMillisecond(c)); [EOL] } <line_num>: 157,172
public void testQ1Y1900Previous() { [EOL]     Quarter previous = (Quarter) this.q1Y1900.previous(); [EOL]     assertNull(previous); [EOL] } <line_num>: 178,181
public void testQ1Y1900Next() { [EOL]     Quarter next = (Quarter) this.q1Y1900.next(); [EOL]     assertEquals(this.q2Y1900, next); [EOL] } <line_num>: 187,190
public void testQ4Y9999Previous() { [EOL]     Quarter previous = (Quarter) this.q4Y9999.previous(); [EOL]     assertEquals(this.q3Y9999, previous); [EOL] } <line_num>: 196,199
public void testQ4Y9999Next() { [EOL]     Quarter next = (Quarter) this.q4Y9999.next(); [EOL]     assertNull(next); [EOL] } <line_num>: 205,208
public void testParseQuarter() { [EOL]     Quarter quarter = null; [EOL]     try { [EOL]         quarter = Quarter.parseQuarter("Q1-2000"); [EOL]     } catch (TimePeriodFormatException e) { [EOL]         quarter = new Quarter(1, 1900); [EOL]     } [EOL]     assertEquals(1, quarter.getQuarter()); [EOL]     assertEquals(2000, quarter.getYear().getYear()); [EOL]     try { [EOL]         quarter = Quarter.parseQuarter("2001-Q2"); [EOL]     } catch (TimePeriodFormatException e) { [EOL]         quarter = new Quarter(1, 1900); [EOL]     } [EOL]     assertEquals(2, quarter.getQuarter()); [EOL]     assertEquals(2001, quarter.getYear().getYear()); [EOL]     try { [EOL]         quarter = Quarter.parseQuarter("Q3, 2002"); [EOL]     } catch (TimePeriodFormatException e) { [EOL]         quarter = new Quarter(1, 1900); [EOL]     } [EOL]     assertEquals(3, quarter.getQuarter()); [EOL]     assertEquals(2002, quarter.getYear().getYear()); [EOL] } <line_num>: 213,247
public void testSerialization() { [EOL]     Quarter q1 = new Quarter(4, 1999); [EOL]     Quarter q2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(q1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         q2 = (Quarter) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         System.out.println(e.toString()); [EOL]     } [EOL]     assertEquals(q1, q2); [EOL] } <line_num>: 252,274
public void testHashcode() { [EOL]     Quarter q1 = new Quarter(2, 2003); [EOL]     Quarter q2 = new Quarter(2, 2003); [EOL]     assertTrue(q1.equals(q2)); [EOL]     int h1 = q1.hashCode(); [EOL]     int h2 = q2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 279,286
public void testNotCloneable() { [EOL]     Quarter q = new Quarter(2, 2003); [EOL]     assertFalse(q instanceof Cloneable); [EOL] } <line_num>: 292,295
public void testConstructor() { [EOL]     boolean pass = false; [EOL]     try { [EOL]         new Quarter(0, 2005); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         new Quarter(5, 2005); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 301,319
public void testGetFirstMillisecond() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.UK); [EOL]     TimeZone savedZone = TimeZone.getDefault(); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Quarter q = new Quarter(3, 1970); [EOL]     assertEquals(15634800000L, q.getFirstMillisecond()); [EOL]     Locale.setDefault(saved); [EOL]     TimeZone.setDefault(savedZone); [EOL] } <line_num>: 324,333
public void testGetFirstMillisecondWithTimeZone() { [EOL]     Quarter q = new Quarter(2, 1950); [EOL]     TimeZone zone = TimeZone.getTimeZone("America/Los_Angeles"); [EOL]     Calendar c = new GregorianCalendar(zone); [EOL]     assertEquals(-623347200000L, q.getFirstMillisecond(c)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         q.getFirstMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 338,353
public void testGetFirstMillisecondWithCalendar() { [EOL]     Quarter q = new Quarter(1, 2001); [EOL]     GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY); [EOL]     calendar.setTimeZone(TimeZone.getTimeZone("Europe/Frankfurt")); [EOL]     assertEquals(978307200000L, q.getFirstMillisecond(calendar)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         q.getFirstMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 358,373
public void testGetLastMillisecond() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.UK); [EOL]     TimeZone savedZone = TimeZone.getDefault(); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Quarter q = new Quarter(3, 1970); [EOL]     assertEquals(23583599999L, q.getLastMillisecond()); [EOL]     Locale.setDefault(saved); [EOL]     TimeZone.setDefault(savedZone); [EOL] } <line_num>: 378,387
public void testGetLastMillisecondWithTimeZone() { [EOL]     Quarter q = new Quarter(2, 1950); [EOL]     TimeZone zone = TimeZone.getTimeZone("America/Los_Angeles"); [EOL]     Calendar c = new GregorianCalendar(zone); [EOL]     assertEquals(-615488400001L, q.getLastMillisecond(c)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         q.getLastMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 392,407
public void testGetLastMillisecondWithCalendar() { [EOL]     Quarter q = new Quarter(3, 2001); [EOL]     GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY); [EOL]     calendar.setTimeZone(TimeZone.getTimeZone("Europe/Frankfurt")); [EOL]     assertEquals(1001894399999L, q.getLastMillisecond(calendar)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         q.getLastMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 412,427
public void testGetSerialIndex() { [EOL]     Quarter q = new Quarter(1, 2000); [EOL]     assertEquals(8001L, q.getSerialIndex()); [EOL]     q = new Quarter(1, 1900); [EOL]     assertEquals(7601L, q.getSerialIndex()); [EOL] } <line_num>: 432,437
public void testNext() { [EOL]     Quarter q = new Quarter(1, 2000); [EOL]     q = (Quarter) q.next(); [EOL]     assertEquals(new Year(2000), q.getYear()); [EOL]     assertEquals(2, q.getQuarter()); [EOL]     q = new Quarter(4, 9999); [EOL]     assertNull(q.next()); [EOL] } <line_num>: 442,449
public void testGetStart() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.ITALY); [EOL]     Calendar cal = Calendar.getInstance(Locale.ITALY); [EOL]     cal.set(2006, Calendar.JULY, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     Quarter q = new Quarter(3, 2006); [EOL]     assertEquals(cal.getTime(), q.getStart()); [EOL]     Locale.setDefault(saved); [EOL] } <line_num>: 454,463
public void testGetEnd() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.ITALY); [EOL]     Calendar cal = Calendar.getInstance(Locale.ITALY); [EOL]     cal.set(2006, Calendar.MARCH, 31, 23, 59, 59); [EOL]     cal.set(Calendar.MILLISECOND, 999); [EOL]     Quarter q = new Quarter(1, 2006); [EOL]     assertEquals(cal.getTime(), q.getEnd()); [EOL]     Locale.setDefault(saved); [EOL] } <line_num>: 468,477
