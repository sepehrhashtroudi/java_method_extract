public TimeSeriesCollectionTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 87,89
public static Test suite() { [EOL]     return new TestSuite(TimeSeriesCollectionTests.class); [EOL] } <line_num>: 78,80
public void testEquals() { [EOL]     TimeSeriesCollection c1 = new TimeSeriesCollection(); [EOL]     TimeSeriesCollection c2 = new TimeSeriesCollection(); [EOL]     TimeSeries s1 = new TimeSeries("Series 1"); [EOL]     TimeSeries s2 = new TimeSeries("Series 2"); [EOL]     boolean b1 = c1.equals(c2); [EOL]     assertTrue("b1", b1); [EOL]     c1.addSeries(s1); [EOL]     c1.addSeries(s2); [EOL]     boolean b2 = c1.equals(c2); [EOL]     assertFalse("b2", b2); [EOL]     c2.addSeries(s1); [EOL]     c2.addSeries(s2); [EOL]     boolean b3 = c1.equals(c2); [EOL]     assertTrue("b3", b3); [EOL]     c2.removeSeries(s2); [EOL]     boolean b4 = c1.equals(c2); [EOL]     assertFalse("b4", b4); [EOL]     c1.removeSeries(s2); [EOL]     boolean b5 = c1.equals(c2); [EOL]     assertTrue("b5", b5); [EOL] } <line_num>: 94,127
public void testRemoveSeries() { [EOL]     TimeSeriesCollection c1 = new TimeSeriesCollection(); [EOL]     TimeSeries s1 = new TimeSeries("Series 1"); [EOL]     TimeSeries s2 = new TimeSeries("Series 2"); [EOL]     TimeSeries s3 = new TimeSeries("Series 3"); [EOL]     TimeSeries s4 = new TimeSeries("Series 4"); [EOL]     c1.addSeries(s1); [EOL]     c1.addSeries(s2); [EOL]     c1.addSeries(s3); [EOL]     c1.addSeries(s4); [EOL]     c1.removeSeries(s3); [EOL]     TimeSeries s = c1.getSeries(2); [EOL]     boolean b1 = s.equals(s4); [EOL]     assertTrue(b1); [EOL] } <line_num>: 132,152
public void testRemoveSeries_int() { [EOL]     TimeSeriesCollection c1 = new TimeSeriesCollection(); [EOL]     TimeSeries s1 = new TimeSeries("Series 1"); [EOL]     TimeSeries s2 = new TimeSeries("Series 2"); [EOL]     TimeSeries s3 = new TimeSeries("Series 3"); [EOL]     TimeSeries s4 = new TimeSeries("Series 4"); [EOL]     c1.addSeries(s1); [EOL]     c1.addSeries(s2); [EOL]     c1.addSeries(s3); [EOL]     c1.addSeries(s4); [EOL]     c1.removeSeries(2); [EOL]     assertTrue(c1.getSeries(2).equals(s4)); [EOL]     c1.removeSeries(0); [EOL]     assertTrue(c1.getSeries(0).equals(s2)); [EOL]     assertEquals(2, c1.getSeriesCount()); [EOL] } <line_num>: 158,173
public void testGetSurroundingItems() { [EOL]     TimeSeries series = new TimeSeries("Series 1"); [EOL]     TimeSeriesCollection collection = new TimeSeriesCollection(series); [EOL]     collection.setXPosition(TimePeriodAnchor.MIDDLE); [EOL]     int[] result = collection.getSurroundingItems(0, 1000L); [EOL]     assertTrue(result[0] == -1); [EOL]     assertTrue(result[1] == -1); [EOL]     Day today = new Day(); [EOL]     long start1 = today.getFirstMillisecond(); [EOL]     long middle1 = today.getMiddleMillisecond(); [EOL]     long end1 = today.getLastMillisecond(); [EOL]     series.add(today, 99.9); [EOL]     result = collection.getSurroundingItems(0, start1); [EOL]     assertTrue(result[0] == -1); [EOL]     assertTrue(result[1] == 0); [EOL]     result = collection.getSurroundingItems(0, middle1); [EOL]     assertTrue(result[0] == 0); [EOL]     assertTrue(result[1] == 0); [EOL]     result = collection.getSurroundingItems(0, end1); [EOL]     assertTrue(result[0] == 0); [EOL]     assertTrue(result[1] == -1); [EOL]     Day tomorrow = (Day) today.next(); [EOL]     long start2 = tomorrow.getFirstMillisecond(); [EOL]     long middle2 = tomorrow.getMiddleMillisecond(); [EOL]     long end2 = tomorrow.getLastMillisecond(); [EOL]     series.add(tomorrow, 199.9); [EOL]     result = collection.getSurroundingItems(0, start2); [EOL]     assertTrue(result[0] == 0); [EOL]     assertTrue(result[1] == 1); [EOL]     result = collection.getSurroundingItems(0, middle2); [EOL]     assertTrue(result[0] == 1); [EOL]     assertTrue(result[1] == 1); [EOL]     result = collection.getSurroundingItems(0, end2); [EOL]     assertTrue(result[0] == 1); [EOL]     assertTrue(result[1] == -1); [EOL]     Day yesterday = (Day) today.previous(); [EOL]     long start3 = yesterday.getFirstMillisecond(); [EOL]     long middle3 = yesterday.getMiddleMillisecond(); [EOL]     long end3 = yesterday.getLastMillisecond(); [EOL]     series.add(yesterday, 1.23); [EOL]     result = collection.getSurroundingItems(0, start3); [EOL]     assertTrue(result[0] == -1); [EOL]     assertTrue(result[1] == 0); [EOL]     result = collection.getSurroundingItems(0, middle3); [EOL]     assertTrue(result[0] == 0); [EOL]     assertTrue(result[1] == 0); [EOL]     result = collection.getSurroundingItems(0, end3); [EOL]     assertTrue(result[0] == 0); [EOL]     assertTrue(result[1] == 1); [EOL] } <line_num>: 179,247
public void testSerialization() { [EOL]     TimeSeriesCollection c1 = new TimeSeriesCollection(createSeries()); [EOL]     TimeSeriesCollection c2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(c1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         c2 = (TimeSeriesCollection) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(c1, c2); [EOL] } <line_num>: 252,270
private TimeSeries createSeries() { [EOL]     RegularTimePeriod t = new Day(); [EOL]     TimeSeries series = new TimeSeries("Test"); [EOL]     series.add(t, 1.0); [EOL]     t = t.next(); [EOL]     series.add(t, 2.0); [EOL]     t = t.next(); [EOL]     series.add(t, null); [EOL]     t = t.next(); [EOL]     series.add(t, 4.0); [EOL]     return series; [EOL] } <line_num>: 277,288
public void test1170825() { [EOL]     TimeSeries s1 = new TimeSeries("Series1"); [EOL]     TimeSeriesCollection dataset = new TimeSeriesCollection(); [EOL]     dataset.addSeries(s1); [EOL]     try { [EOL]         dataset.getSeries(1); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         assertTrue(false); [EOL]     } [EOL] } <line_num>: 293,306
public void testIndexOf() { [EOL]     TimeSeries s1 = new TimeSeries("S1"); [EOL]     TimeSeries s2 = new TimeSeries("S2"); [EOL]     TimeSeriesCollection dataset = new TimeSeriesCollection(); [EOL]     assertEquals(-1, dataset.indexOf(s1)); [EOL]     assertEquals(-1, dataset.indexOf(s2)); [EOL]     dataset.addSeries(s1); [EOL]     assertEquals(0, dataset.indexOf(s1)); [EOL]     assertEquals(-1, dataset.indexOf(s2)); [EOL]     dataset.addSeries(s2); [EOL]     assertEquals(0, dataset.indexOf(s1)); [EOL]     assertEquals(1, dataset.indexOf(s2)); [EOL]     dataset.removeSeries(s1); [EOL]     assertEquals(-1, dataset.indexOf(s1)); [EOL]     assertEquals(0, dataset.indexOf(s2)); [EOL]     TimeSeries s2b = new TimeSeries("S2"); [EOL]     assertEquals(0, dataset.indexOf(s2b)); [EOL] } <line_num>: 311,332
public void testFindDomainBounds() { [EOL] } <line_num>: 341,341
public void testCloning() { [EOL]     TimeSeries s1 = new TimeSeries("Series"); [EOL]     s1.add(new Year(2009), 1.1); [EOL]     TimeSeriesCollection c1 = new TimeSeriesCollection(); [EOL]     c1.addSeries(s1); [EOL]     TimeSeriesCollection c2 = null; [EOL]     try { [EOL]         c2 = (TimeSeriesCollection) c1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(c1 != c2); [EOL]     assertTrue(c1.getClass() == c2.getClass()); [EOL]     assertTrue(c1.equals(c2)); [EOL]     s1.setDescription("XYZ"); [EOL]     assertFalse(c1.equals(c2)); [EOL]     c2.getSeries(0).setDescription("XYZ"); [EOL]     assertTrue(c1.equals(c2)); [EOL] } <line_num>: 385,406
