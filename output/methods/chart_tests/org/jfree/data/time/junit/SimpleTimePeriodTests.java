public SimpleTimePeriodTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 78,80
public static Test suite() { [EOL]     return new TestSuite(SimpleTimePeriodTests.class); [EOL] } <line_num>: 69,71
protected void setUp() { [EOL] } <line_num>: 85,87
public void testEqualsSelf() { [EOL]     SimpleTimePeriod p = new SimpleTimePeriod(new Date(1000L), new Date(1001L)); [EOL]     assertTrue(p.equals(p)); [EOL] } <line_num>: 94,98
public void testEquals() { [EOL]     SimpleTimePeriod p1 = new SimpleTimePeriod(new Date(1000L), new Date(1004L)); [EOL]     SimpleTimePeriod p2 = new SimpleTimePeriod(new Date(1000L), new Date(1004L)); [EOL]     assertTrue(p1.equals(p2)); [EOL]     assertTrue(p2.equals(p1)); [EOL]     p1 = new SimpleTimePeriod(new Date(1002L), new Date(1004L)); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2 = new SimpleTimePeriod(new Date(1002L), new Date(1004L)); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1 = new SimpleTimePeriod(new Date(1002L), new Date(1003L)); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2 = new SimpleTimePeriod(new Date(1002L), new Date(1003L)); [EOL]     assertTrue(p1.equals(p2)); [EOL] } <line_num>: 103,120
public void testSerialization() { [EOL]     SimpleTimePeriod p1 = new SimpleTimePeriod(new Date(1000L), new Date(1001L)); [EOL]     SimpleTimePeriod p2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(p1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         p2 = (SimpleTimePeriod) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(p1, p2); [EOL] } <line_num>: 125,143
public void testHashcode() { [EOL]     SimpleTimePeriod s1 = new SimpleTimePeriod(new Date(10L), new Date(20L)); [EOL]     SimpleTimePeriod s2 = new SimpleTimePeriod(new Date(10L), new Date(20L)); [EOL]     assertTrue(s1.equals(s2)); [EOL]     int h1 = s1.hashCode(); [EOL]     int h2 = s2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 148,157
public void testClone() { [EOL]     SimpleTimePeriod s1 = new SimpleTimePeriod(new Date(10L), new Date(20)); [EOL]     assertFalse(s1 instanceof Cloneable); [EOL] } <line_num>: 162,166
public void testImmutable() { [EOL]     SimpleTimePeriod p1 = new SimpleTimePeriod(new Date(10L), new Date(20L)); [EOL]     SimpleTimePeriod p2 = new SimpleTimePeriod(new Date(10L), new Date(20L)); [EOL]     assertEquals(p1, p2); [EOL]     p1.getStart().setTime(11L); [EOL]     assertEquals(p1, p2); [EOL]     Date d1 = new Date(10L); [EOL]     Date d2 = new Date(20L); [EOL]     p1 = new SimpleTimePeriod(d1, d2); [EOL]     d1.setTime(11L); [EOL]     assertEquals(new Date(10L), p1.getStart()); [EOL] } <line_num>: 171,185
public void testCompareTo() { [EOL]     SimpleTimePeriod s1 = new SimpleTimePeriod(new Date(10L), new Date(20L)); [EOL]     SimpleTimePeriod s2 = new SimpleTimePeriod(new Date(10L), new Date(20L)); [EOL]     assertEquals(0, s1.compareTo(s2)); [EOL]     s1 = new SimpleTimePeriod(new Date(9L), new Date(21L)); [EOL]     s2 = new SimpleTimePeriod(new Date(10L), new Date(20L)); [EOL]     assertEquals(-1, s1.compareTo(s2)); [EOL]     s1 = new SimpleTimePeriod(new Date(11L), new Date(19L)); [EOL]     s2 = new SimpleTimePeriod(new Date(10L), new Date(20L)); [EOL]     assertEquals(1, s1.compareTo(s2)); [EOL]     s1 = new SimpleTimePeriod(new Date(9L), new Date(19L)); [EOL]     s2 = new SimpleTimePeriod(new Date(10L), new Date(20L)); [EOL]     assertEquals(-1, s1.compareTo(s2)); [EOL]     s1 = new SimpleTimePeriod(new Date(11L), new Date(21)); [EOL]     s2 = new SimpleTimePeriod(new Date(10L), new Date(20L)); [EOL]     assertEquals(1, s1.compareTo(s2)); [EOL]     s1 = new SimpleTimePeriod(new Date(10L), new Date(18)); [EOL]     s2 = new SimpleTimePeriod(new Date(10L), new Date(20L)); [EOL]     assertEquals(-1, s1.compareTo(s2)); [EOL]     s1 = new SimpleTimePeriod(new Date(10L), new Date(22)); [EOL]     s2 = new SimpleTimePeriod(new Date(10L), new Date(20L)); [EOL]     assertEquals(1, s1.compareTo(s2)); [EOL] } <line_num>: 190,220
