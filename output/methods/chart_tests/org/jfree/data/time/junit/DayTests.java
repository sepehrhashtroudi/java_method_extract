public DayTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 93,95
public static Test suite() { [EOL]     return new TestSuite(DayTests.class); [EOL] } <line_num>: 84,86
protected void setUp() { [EOL] } <line_num>: 100,102
public void testEqualsSelf() { [EOL]     Day day = new Day(); [EOL]     assertTrue(day.equals(day)); [EOL] } <line_num>: 109,112
public void testEquals() { [EOL]     Day day1 = new Day(29, MonthConstants.MARCH, 2002); [EOL]     Day day2 = new Day(29, MonthConstants.MARCH, 2002); [EOL]     assertTrue(day1.equals(day2)); [EOL] } <line_num>: 117,121
public void testDateConstructor1() { [EOL]     TimeZone zone = TimeZone.getTimeZone("GMT"); [EOL]     Calendar c = new GregorianCalendar(zone); [EOL]     Day d1 = new Day(new Date(1078099199999L), zone); [EOL]     Day d2 = new Day(new Date(1078099200000L), zone); [EOL]     assertEquals(MonthConstants.FEBRUARY, d1.getMonth()); [EOL]     assertEquals(1078099199999L, d1.getLastMillisecond(c)); [EOL]     assertEquals(MonthConstants.MARCH, d2.getMonth()); [EOL]     assertEquals(1078099200000L, d2.getFirstMillisecond(c)); [EOL] } <line_num>: 127,140
public void testDateConstructor2() { [EOL]     TimeZone zone = TimeZone.getTimeZone("Europe/Helsinki"); [EOL]     Calendar c = new GregorianCalendar(zone); [EOL]     Day d1 = new Day(new Date(1078091999999L), zone); [EOL]     Day d2 = new Day(new Date(1078092000000L), zone); [EOL]     assertEquals(MonthConstants.FEBRUARY, d1.getMonth()); [EOL]     assertEquals(1078091999999L, d1.getLastMillisecond(c)); [EOL]     assertEquals(MonthConstants.MARCH, d2.getMonth()); [EOL]     assertEquals(1078092000000L, d2.getFirstMillisecond(c)); [EOL] } <line_num>: 147,160
public void test1Jan1900Previous() { [EOL]     Day jan1st1900 = new Day(1, MonthConstants.JANUARY, 1900); [EOL]     Day previous = (Day) jan1st1900.previous(); [EOL]     assertNull(previous); [EOL] } <line_num>: 166,172
public void test1Jan1900Next() { [EOL]     Day jan1st1900 = new Day(1, MonthConstants.JANUARY, 1900); [EOL]     Day next = (Day) jan1st1900.next(); [EOL]     assertEquals(2, next.getDayOfMonth()); [EOL] } <line_num>: 178,184
public void test31Dec9999Previous() { [EOL]     Day dec31st9999 = new Day(31, MonthConstants.DECEMBER, 9999); [EOL]     Day previous = (Day) dec31st9999.previous(); [EOL]     assertEquals(30, previous.getDayOfMonth()); [EOL] } <line_num>: 190,196
public void test31Dec9999Next() { [EOL]     Day dec31st9999 = new Day(31, MonthConstants.DECEMBER, 9999); [EOL]     Day next = (Day) dec31st9999.next(); [EOL]     assertNull(next); [EOL] } <line_num>: 202,208
public void testParseDay() throws ParseException { [EOL]     GregorianCalendar gc = new GregorianCalendar(2001, 12, 31); [EOL]     SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy"); [EOL]     Date reference = format.parse("31/12/2001"); [EOL]     if (reference.equals(gc.getTime())) { [EOL]         Day d = Day.parseDay("31/12/2001"); [EOL]         assertEquals(37256, d.getSerialDate().toSerial()); [EOL]     } [EOL]     Day d = Day.parseDay("2001-12-31"); [EOL]     assertEquals(37256, d.getSerialDate().toSerial()); [EOL] } <line_num>: 219,234
public void testSerialization() { [EOL]     Day d1 = new Day(15, 4, 2000); [EOL]     Day d2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(d1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         d2 = (Day) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         System.out.println(e.toString()); [EOL]     } [EOL]     assertEquals(d1, d2); [EOL] } <line_num>: 239,261
public void testHashcode() { [EOL]     Day d1 = new Day(1, 2, 2003); [EOL]     Day d2 = new Day(1, 2, 2003); [EOL]     assertTrue(d1.equals(d2)); [EOL]     int h1 = d1.hashCode(); [EOL]     int h2 = d2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 266,273
public void testNotCloneable() { [EOL]     Day d = new Day(1, 2, 2003); [EOL]     assertFalse(d instanceof Cloneable); [EOL] } <line_num>: 278,281
public void testGetSerialIndex() { [EOL]     Day d = new Day(1, 1, 1900); [EOL]     assertEquals(2, d.getSerialIndex()); [EOL]     d = new Day(15, 4, 2000); [EOL]     assertEquals(36631, d.getSerialIndex()); [EOL] } <line_num>: 286,291
public void testGetFirstMillisecond() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.UK); [EOL]     TimeZone savedZone = TimeZone.getDefault(); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Day d = new Day(1, 3, 1970); [EOL]     assertEquals(5094000000L, d.getFirstMillisecond()); [EOL]     Locale.setDefault(saved); [EOL]     TimeZone.setDefault(savedZone); [EOL] } <line_num>: 296,305
public void testGetFirstMillisecondWithTimeZone() { [EOL]     Day d = new Day(26, 4, 1950); [EOL]     TimeZone zone = TimeZone.getTimeZone("America/Los_Angeles"); [EOL]     Calendar c = new GregorianCalendar(zone); [EOL]     assertEquals(-621187200000L, d.getFirstMillisecond(c)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         d.getFirstMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 310,325
public void testGetFirstMillisecondWithCalendar() { [EOL]     Day d = new Day(1, 12, 2001); [EOL]     GregorianCalendar calendar = new GregorianCalendar(Locale.GERMANY); [EOL]     calendar.setTimeZone(TimeZone.getTimeZone("Europe/Frankfurt")); [EOL]     assertEquals(1007164800000L, d.getFirstMillisecond(calendar)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         d.getFirstMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 330,345
public void testGetLastMillisecond() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.UK); [EOL]     TimeZone savedZone = TimeZone.getDefault(); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Day d = new Day(1, 1, 1970); [EOL]     assertEquals(82799999L, d.getLastMillisecond()); [EOL]     Locale.setDefault(saved); [EOL]     TimeZone.setDefault(savedZone); [EOL] } <line_num>: 350,359
public void testGetLastMillisecondWithTimeZone() { [EOL]     Day d = new Day(1, 2, 1950); [EOL]     TimeZone zone = TimeZone.getTimeZone("America/Los_Angeles"); [EOL]     Calendar c = new GregorianCalendar(zone); [EOL]     assertEquals(-628358400001L, d.getLastMillisecond(c)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         d.getLastMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 364,379
public void testGetLastMillisecondWithCalendar() { [EOL]     Day d = new Day(4, 5, 2001); [EOL]     Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone("Europe/London"), Locale.UK); [EOL]     assertEquals(989017199999L, d.getLastMillisecond(calendar)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         d.getLastMillisecond((Calendar) null); [EOL]     } catch (NullPointerException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 384,399
public void testNext() { [EOL]     Day d = new Day(25, 12, 2000); [EOL]     d = (Day) d.next(); [EOL]     assertEquals(2000, d.getYear()); [EOL]     assertEquals(12, d.getMonth()); [EOL]     assertEquals(26, d.getDayOfMonth()); [EOL]     d = new Day(31, 12, 9999); [EOL]     assertNull(d.next()); [EOL] } <line_num>: 404,412
public void testGetStart() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.ITALY); [EOL]     Calendar cal = Calendar.getInstance(Locale.ITALY); [EOL]     cal.set(2006, Calendar.NOVEMBER, 3, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     Day d = new Day(3, 11, 2006); [EOL]     assertEquals(cal.getTime(), d.getStart()); [EOL]     Locale.setDefault(saved); [EOL] } <line_num>: 417,426
public void testGetEnd() { [EOL]     Locale saved = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.ITALY); [EOL]     Calendar cal = Calendar.getInstance(Locale.ITALY); [EOL]     cal.set(1900, Calendar.JANUARY, 1, 23, 59, 59); [EOL]     cal.set(Calendar.MILLISECOND, 999); [EOL]     Day d = new Day(1, 1, 1900); [EOL]     assertEquals(cal.getTime(), d.getEnd()); [EOL]     Locale.setDefault(saved); [EOL] } <line_num>: 431,440
