public OHLCSeriesCollectionTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 83,85
public static Test suite() { [EOL]     return new TestSuite(OHLCSeriesCollectionTests.class); [EOL] } <line_num>: 74,76
public void testEquals() { [EOL]     OHLCSeriesCollection c1 = new OHLCSeriesCollection(); [EOL]     OHLCSeriesCollection c2 = new OHLCSeriesCollection(); [EOL]     assertEquals(c1, c2); [EOL]     OHLCSeries s1 = new OHLCSeries("Series"); [EOL]     s1.add(new Year(2006), 1.0, 1.1, 1.2, 1.3); [EOL]     c1.addSeries(s1); [EOL]     assertFalse(c1.equals(c2)); [EOL]     OHLCSeries s2 = new OHLCSeries("Series"); [EOL]     s2.add(new Year(2006), 1.0, 1.1, 1.2, 1.3); [EOL]     c2.addSeries(s2); [EOL]     assertTrue(c1.equals(c2)); [EOL]     c1.addSeries(new OHLCSeries("Empty Series")); [EOL]     assertFalse(c1.equals(c2)); [EOL]     c2.addSeries(new OHLCSeries("Empty Series")); [EOL]     assertTrue(c1.equals(c2)); [EOL]     c1.setXPosition(TimePeriodAnchor.END); [EOL]     assertFalse(c1.equals(c2)); [EOL]     c2.setXPosition(TimePeriodAnchor.END); [EOL]     assertTrue(c1.equals(c2)); [EOL] } <line_num>: 90,116
public void testCloning() { [EOL]     OHLCSeriesCollection c1 = new OHLCSeriesCollection(); [EOL]     OHLCSeries s1 = new OHLCSeries("Series"); [EOL]     s1.add(new Year(2006), 1.0, 1.1, 1.2, 1.3); [EOL]     c1.addSeries(s1); [EOL]     OHLCSeriesCollection c2 = null; [EOL]     try { [EOL]         c2 = (OHLCSeriesCollection) c1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(c1 != c2); [EOL]     assertTrue(c1.getClass() == c2.getClass()); [EOL]     assertTrue(c1.equals(c2)); [EOL]     s1.setDescription("XYZ"); [EOL]     assertFalse(c1.equals(c2)); [EOL] } <line_num>: 121,140
public void testSerialization() { [EOL]     OHLCSeriesCollection c1 = new OHLCSeriesCollection(); [EOL]     OHLCSeries s1 = new OHLCSeries("Series"); [EOL]     s1.add(new Year(2006), 1.0, 1.1, 1.2, 1.3); [EOL]     c1.addSeries(s1); [EOL]     OHLCSeriesCollection c2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(c1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         c2 = (OHLCSeriesCollection) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(c1, c2); [EOL] } <line_num>: 145,167
public void test1170825() { [EOL]     OHLCSeries s1 = new OHLCSeries("Series1"); [EOL]     OHLCSeriesCollection dataset = new OHLCSeriesCollection(); [EOL]     dataset.addSeries(s1); [EOL]     try { [EOL]         dataset.getSeries(1); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         assertTrue(false); [EOL]     } [EOL] } <line_num>: 173,186
public void testHashcode() { [EOL]     OHLCSeriesCollection c1 = new OHLCSeriesCollection(); [EOL]     OHLCSeries s1 = new OHLCSeries("S"); [EOL]     s1.add(new Year(2009), 1.0, 4.0, 0.5, 2.0); [EOL]     c1.addSeries(s1); [EOL]     OHLCSeriesCollection c2 = new OHLCSeriesCollection(); [EOL]     OHLCSeries s2 = new OHLCSeries("S"); [EOL]     s2.add(new Year(2009), 1.0, 4.0, 0.5, 2.0); [EOL]     c2.addSeries(s2); [EOL]     assertTrue(c1.equals(c2)); [EOL]     int h1 = c1.hashCode(); [EOL]     int h2 = c2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 191,204
public void testRemoveSeries_int() { [EOL]     OHLCSeriesCollection c1 = new OHLCSeriesCollection(); [EOL]     OHLCSeries s1 = new OHLCSeries("Series 1"); [EOL]     OHLCSeries s2 = new OHLCSeries("Series 2"); [EOL]     OHLCSeries s3 = new OHLCSeries("Series 3"); [EOL]     OHLCSeries s4 = new OHLCSeries("Series 4"); [EOL]     c1.addSeries(s1); [EOL]     c1.addSeries(s2); [EOL]     c1.addSeries(s3); [EOL]     c1.addSeries(s4); [EOL]     c1.removeSeries(2); [EOL]     assertTrue(c1.getSeries(2).equals(s4)); [EOL]     c1.removeSeries(0); [EOL]     assertTrue(c1.getSeries(0).equals(s2)); [EOL]     assertEquals(2, c1.getSeriesCount()); [EOL] } <line_num>: 210,225
public void testRemoveSeries() { [EOL]     OHLCSeriesCollection c1 = new OHLCSeriesCollection(); [EOL]     OHLCSeries s1 = new OHLCSeries("Series 1"); [EOL]     OHLCSeries s2 = new OHLCSeries("Series 2"); [EOL]     OHLCSeries s3 = new OHLCSeries("Series 3"); [EOL]     OHLCSeries s4 = new OHLCSeries("Series 4"); [EOL]     c1.addSeries(s1); [EOL]     c1.addSeries(s2); [EOL]     c1.addSeries(s3); [EOL]     c1.addSeries(s4); [EOL]     c1.removeSeries(s3); [EOL]     assertTrue(c1.getSeries(2).equals(s4)); [EOL]     c1.removeSeries(s1); [EOL]     assertTrue(c1.getSeries(0).equals(s2)); [EOL]     assertEquals(2, c1.getSeriesCount()); [EOL] } <line_num>: 231,246
public void testRemoveAllSeries() { [EOL]     OHLCSeriesCollection c1 = new OHLCSeriesCollection(); [EOL]     c1.addChangeListener(this); [EOL]     this.lastEvent = null; [EOL]     c1.removeAllSeries(); [EOL]     assertNull(this.lastEvent); [EOL]     OHLCSeries s1 = new OHLCSeries("Series 1"); [EOL]     OHLCSeries s2 = new OHLCSeries("Series 2"); [EOL]     c1.addSeries(s1); [EOL]     c1.addSeries(s2); [EOL]     c1.removeAllSeries(); [EOL]     assertEquals(0, c1.getSeriesCount()); [EOL]     assertNotNull(this.lastEvent); [EOL]     this.lastEvent = null; [EOL] } <line_num>: 251,268
public void datasetChanged(DatasetChangeEvent event) { [EOL]     this.lastEvent = event; [EOL] } <line_num>: 278,280
