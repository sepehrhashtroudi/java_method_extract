public OHLCSeriesTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 92,94
public void seriesChanged(SeriesChangeEvent event) { [EOL]     this.lastEvent = event; [EOL] } <line_num>: 74,76
public static Test suite() { [EOL]     return new TestSuite(OHLCSeriesTests.class); [EOL] } <line_num>: 83,85
public void testEquals() { [EOL]     OHLCSeries s1 = new OHLCSeries("s1"); [EOL]     OHLCSeries s2 = new OHLCSeries("s1"); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1 = new OHLCSeries("s2"); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2 = new OHLCSeries("s2"); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1.add(new Year(2006), 2.0, 4.0, 1.0, 3.0); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.add(new Year(2006), 2.0, 4.0, 1.0, 3.0); [EOL]     assertTrue(s2.equals(s1)); [EOL]     s1.add(new Year(2008), 2.0, 4.0, 1.0, 3.0); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.add(new Year(2008), 2.0, 4.0, 1.0, 3.0); [EOL]     assertTrue(s2.equals(s1)); [EOL]     s1.remove(new Year(2008)); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.remove(new Year(2008)); [EOL]     assertTrue(s2.equals(s1)); [EOL] } <line_num>: 99,127
public void testCloning() { [EOL]     OHLCSeries s1 = new OHLCSeries("s1"); [EOL]     s1.add(new Year(2006), 2.0, 4.0, 1.0, 3.0); [EOL]     OHLCSeries s2 = null; [EOL]     try { [EOL]         s2 = (OHLCSeries) s1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(s1 != s2); [EOL]     assertTrue(s1.getClass() == s2.getClass()); [EOL]     assertTrue(s1.equals(s2)); [EOL] } <line_num>: 132,145
public void testSerialization() { [EOL]     OHLCSeries s1 = new OHLCSeries("s1"); [EOL]     s1.add(new Year(2006), 2.0, 4.0, 1.0, 3.0); [EOL]     OHLCSeries s2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(s1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         s2 = (OHLCSeries) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(s1, s2); [EOL] } <line_num>: 150,172
public void testIndexOf() { [EOL]     OHLCSeries s1 = new OHLCSeries("s1"); [EOL]     s1.add(new Year(2006), 2.0, 4.0, 1.0, 3.0); [EOL]     s1.add(new Year(2011), 2.0, 4.0, 1.0, 3.0); [EOL]     s1.add(new Year(2010), 2.0, 4.0, 1.0, 3.0); [EOL]     assertEquals(0, s1.indexOf(new Year(2006))); [EOL]     assertEquals(1, s1.indexOf(new Year(2010))); [EOL]     assertEquals(2, s1.indexOf(new Year(2011))); [EOL] } <line_num>: 177,185
public void testRemove() { [EOL]     OHLCSeries s1 = new OHLCSeries("s1"); [EOL]     s1.add(new Year(2006), 2.0, 4.0, 1.0, 3.0); [EOL]     s1.add(new Year(2011), 2.1, 4.1, 1.1, 3.1); [EOL]     s1.add(new Year(2010), 2.2, 4.2, 1.2, 3.2); [EOL]     assertEquals(3, s1.getItemCount()); [EOL]     s1.remove(new Year(2010)); [EOL]     assertEquals(new Year(2011), s1.getPeriod(1)); [EOL]     s1.remove(new Year(2006)); [EOL]     assertEquals(new Year(2011), s1.getPeriod(0)); [EOL] } <line_num>: 190,202
public void testAdditionOfDuplicatePeriod() { [EOL]     OHLCSeries s1 = new OHLCSeries("s1"); [EOL]     s1.add(new Year(2006), 1.0, 1.0, 1.0, 1.0); [EOL]     boolean pass = false; [EOL]     try { [EOL]         s1.add(new Year(2006), 1.0, 1.0, 1.0, 1.0); [EOL]     } catch (SeriesException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 207,218
public void testSetMaximumItemCount() { [EOL]     OHLCSeries s1 = new OHLCSeries("s1"); [EOL]     assertEquals(Integer.MAX_VALUE, s1.getMaximumItemCount()); [EOL]     s1.setMaximumItemCount(2); [EOL]     assertEquals(2, s1.getMaximumItemCount()); [EOL]     s1.add(new Year(2006), 1.0, 1.1, 1.1, 1.1); [EOL]     s1.add(new Year(2007), 2.0, 2.2, 2.2, 2.2); [EOL]     s1.add(new Year(2008), 3.0, 3.3, 3.3, 3.3); [EOL]     assertEquals(new Year(2007), s1.getPeriod(0)); [EOL]     assertEquals(new Year(2008), s1.getPeriod(1)); [EOL] } <line_num>: 223,233
public void testSetMaximumItemCount2() { [EOL]     OHLCSeries s1 = new OHLCSeries("s1"); [EOL]     s1.add(new Year(2006), 1.0, 1.1, 1.1, 1.1); [EOL]     s1.add(new Year(2007), 2.0, 2.2, 2.2, 2.2); [EOL]     s1.add(new Year(2008), 3.0, 3.3, 3.3, 3.3); [EOL]     s1.setMaximumItemCount(2); [EOL]     assertEquals(new Year(2007), s1.getPeriod(0)); [EOL]     assertEquals(new Year(2008), s1.getPeriod(1)); [EOL] } <line_num>: 238,246
public void testClear() { [EOL]     OHLCSeries s1 = new OHLCSeries("S1"); [EOL]     s1.addChangeListener(this); [EOL]     s1.clear(); [EOL]     assertNull(this.lastEvent); [EOL]     assertTrue(s1.isEmpty()); [EOL]     s1.add(new Year(2006), 1.0, 1.1, 1.1, 1.1); [EOL]     assertFalse(s1.isEmpty()); [EOL]     s1.clear(); [EOL]     assertNotNull(this.lastEvent); [EOL]     assertTrue(s1.isEmpty()); [EOL] } <line_num>: 251,262
