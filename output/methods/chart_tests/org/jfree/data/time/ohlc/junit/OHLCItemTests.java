public OHLCItemTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 76,78
public static Test suite() { [EOL]     return new TestSuite(OHLCItemTests.class); [EOL] } <line_num>: 67,69
public void testConstructor1() { [EOL]     OHLCItem item1 = new OHLCItem(new Year(2006), 2.0, 4.0, 1.0, 3.0); [EOL]     assertEquals(new Year(2006), item1.getPeriod()); [EOL]     assertEquals(2.0, item1.getOpenValue(), EPSILON); [EOL]     assertEquals(4.0, item1.getHighValue(), EPSILON); [EOL]     assertEquals(1.0, item1.getLowValue(), EPSILON); [EOL]     assertEquals(3.0, item1.getCloseValue(), EPSILON); [EOL] } <line_num>: 85,92
public void testEquals() { [EOL]     OHLCItem item1 = new OHLCItem(new Year(2006), 2.0, 4.0, 1.0, 3.0); [EOL]     OHLCItem item2 = new OHLCItem(new Year(2006), 2.0, 4.0, 1.0, 3.0); [EOL]     assertTrue(item1.equals(item2)); [EOL]     assertTrue(item2.equals(item1)); [EOL]     item1 = new OHLCItem(new Year(2007), 2.0, 4.0, 1.0, 3.0); [EOL]     assertFalse(item1.equals(item2)); [EOL]     item2 = new OHLCItem(new Year(2007), 2.0, 4.0, 1.0, 3.0); [EOL]     assertTrue(item1.equals(item2)); [EOL]     item1 = new OHLCItem(new Year(2007), 2.2, 4.0, 1.0, 3.0); [EOL]     assertFalse(item1.equals(item2)); [EOL]     item2 = new OHLCItem(new Year(2007), 2.2, 4.0, 1.0, 3.0); [EOL]     assertTrue(item1.equals(item2)); [EOL]     item1 = new OHLCItem(new Year(2007), 2.2, 4.4, 1.0, 3.0); [EOL]     assertFalse(item1.equals(item2)); [EOL]     item2 = new OHLCItem(new Year(2007), 2.2, 4.4, 1.0, 3.0); [EOL]     assertTrue(item1.equals(item2)); [EOL]     item1 = new OHLCItem(new Year(2007), 2.2, 4.4, 1.1, 3.0); [EOL]     assertFalse(item1.equals(item2)); [EOL]     item2 = new OHLCItem(new Year(2007), 2.2, 4.4, 1.1, 3.0); [EOL]     assertTrue(item1.equals(item2)); [EOL]     item1 = new OHLCItem(new Year(2007), 2.2, 4.4, 1.1, 3.3); [EOL]     assertFalse(item1.equals(item2)); [EOL]     item2 = new OHLCItem(new Year(2007), 2.2, 4.4, 1.1, 3.3); [EOL]     assertTrue(item1.equals(item2)); [EOL] } <line_num>: 97,132
public void testCloning() { [EOL]     OHLCItem item1 = new OHLCItem(new Year(2006), 2.0, 4.0, 1.0, 3.0); [EOL]     OHLCItem item2 = null; [EOL]     try { [EOL]         item2 = (OHLCItem) item1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(item1 != item2); [EOL]     assertTrue(item1.getClass() == item2.getClass()); [EOL]     assertTrue(item1.equals(item2)); [EOL] } <line_num>: 137,149
public void testSerialization() { [EOL]     OHLCItem item1 = new OHLCItem(new Year(2006), 2.0, 4.0, 1.0, 3.0); [EOL]     OHLCItem item2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(item1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         item2 = (OHLCItem) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(item1, item2); [EOL] } <line_num>: 154,172
