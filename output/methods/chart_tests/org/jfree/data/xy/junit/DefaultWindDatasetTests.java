public DefaultWindDatasetTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 79,81
public static Test suite() { [EOL]     return new TestSuite(DefaultWindDatasetTests.class); [EOL] } <line_num>: 70,72
public void testEquals() { [EOL]     DefaultWindDataset d1 = new DefaultWindDataset(); [EOL]     DefaultWindDataset d2 = new DefaultWindDataset(); [EOL]     assertTrue(d1.equals(d2)); [EOL]     assertTrue(d2.equals(d1)); [EOL]     d1 = createSampleDataset1(); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2 = createSampleDataset1(); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 86,96
public void testCloning() { [EOL]     DefaultWindDataset d1 = new DefaultWindDataset(); [EOL]     DefaultWindDataset d2 = null; [EOL]     try { [EOL]         d2 = (DefaultWindDataset) d1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(d1 != d2); [EOL]     assertTrue(d1.getClass() == d2.getClass()); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1 = createSampleDataset1(); [EOL]     d2 = null; [EOL]     try { [EOL]         d2 = (DefaultWindDataset) d1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(d1 != d2); [EOL]     assertTrue(d1.getClass() == d2.getClass()); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 101,126
public void testPublicCloneable() { [EOL]     DefaultWindDataset d1 = new DefaultWindDataset(); [EOL]     assertTrue(d1 instanceof PublicCloneable); [EOL] } <line_num>: 131,134
public void testSerialization() { [EOL]     DefaultWindDataset d1 = new DefaultWindDataset(); [EOL]     DefaultWindDataset d2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(d1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         d2 = (DefaultWindDataset) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(d1, d2); [EOL]     d1 = createSampleDataset1(); [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(d1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         d2 = (DefaultWindDataset) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(d1, d2); [EOL] } <line_num>: 139,176
public void testGetSeriesKey() { [EOL]     DefaultWindDataset d = createSampleDataset1(); [EOL]     assertEquals("Series 1", d.getSeriesKey(0)); [EOL]     assertEquals("Series 2", d.getSeriesKey(1)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         d.getSeriesKey(-1); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         d.getSeriesKey(2); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 181,204
public void testIndexOf() { [EOL]     DefaultWindDataset d = createSampleDataset1(); [EOL]     assertEquals(0, d.indexOf("Series 1")); [EOL]     assertEquals(1, d.indexOf("Series 2")); [EOL]     assertEquals(-1, d.indexOf("Green Eggs and Ham")); [EOL]     assertEquals(-1, d.indexOf(null)); [EOL] } <line_num>: 209,215
public DefaultWindDataset createSampleDataset1() { [EOL]     Day t = new Day(1, 4, 2006); [EOL]     Object[] item1 = createItem(t, 3, 7); [EOL]     Object[] item2 = createItem(t.next(), 4, 8); [EOL]     Object[] item3 = createItem(t.next(), 5, 9); [EOL]     Object[][] series1 = new Object[][] { item1, item2, item3 }; [EOL]     Object[] item1b = createItem(t, 6, 10); [EOL]     Object[] item2b = createItem(t.next(), 7, 11); [EOL]     Object[] item3b = createItem(t.next(), 8, 12); [EOL]     Object[][] series2 = new Object[][] { item1b, item2b, item3b }; [EOL]     Object[][][] data = new Object[][][] { series1, series2 }; [EOL]     return new DefaultWindDataset(data); [EOL] } <line_num>: 222,234
private Object[] createItem(RegularTimePeriod t, int dir, int force) { [EOL]     return new Object[] { new Long(t.getMiddleMillisecond()), new Integer(dir), new Integer(force) }; [EOL] } <line_num>: 245,248
