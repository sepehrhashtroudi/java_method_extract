public VectorSeriesTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 92,94
public void seriesChanged(SeriesChangeEvent event) { [EOL]     this.lastEvent = event; [EOL] } <line_num>: 74,76
public static Test suite() { [EOL]     return new TestSuite(VectorSeriesTests.class); [EOL] } <line_num>: 83,85
public void testEquals() { [EOL]     VectorSeries s1 = new VectorSeries("s1"); [EOL]     VectorSeries s2 = new VectorSeries("s1"); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1 = new VectorSeries("s2"); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2 = new VectorSeries("s2"); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1 = new VectorSeries("s2", true, true); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2 = new VectorSeries("s2", true, true); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1 = new VectorSeries("s2", false, false); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2 = new VectorSeries("s2", false, false); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1.add(1.0, 0.5, 1.5, 2.0); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.add(1.0, 0.5, 1.5, 2.0); [EOL]     assertTrue(s2.equals(s1)); [EOL]     s1.add(2.0, 0.5, 1.5, 2.0); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.add(2.0, 0.5, 1.5, 2.0); [EOL]     assertTrue(s2.equals(s1)); [EOL]     s1.remove(new XYCoordinate(1.0, 0.5)); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.remove(new XYCoordinate(1.0, 0.5)); [EOL]     assertTrue(s2.equals(s1)); [EOL] } <line_num>: 99,141
public void testCloning() { [EOL]     VectorSeries s1 = new VectorSeries("s1"); [EOL]     s1.add(1.0, 0.5, 1.5, 2.0); [EOL]     VectorSeries s2 = null; [EOL]     try { [EOL]         s2 = (VectorSeries) s1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(s1 != s2); [EOL]     assertTrue(s1.getClass() == s2.getClass()); [EOL]     assertTrue(s1.equals(s2)); [EOL] } <line_num>: 146,159
public void testSerialization() { [EOL]     VectorSeries s1 = new VectorSeries("s1"); [EOL]     s1.add(1.0, 0.5, 1.5, 2.0); [EOL]     VectorSeries s2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(s1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         s2 = (VectorSeries) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(s1, s2); [EOL] } <line_num>: 164,184
public void testIndexOf() { [EOL]     VectorSeries s1 = new VectorSeries("Series 1"); [EOL]     s1.add(1.0, 1.0, 1.0, 2.0); [EOL]     s1.add(2.0, 2.0, 2.0, 3.0); [EOL]     s1.add(3.0, 3.0, 3.0, 4.0); [EOL]     assertEquals(0, s1.indexOf(new XYCoordinate(1.0, 1.0))); [EOL] } <line_num>: 189,195
public void testIndexOf2() { [EOL]     VectorSeries s1 = new VectorSeries("Series 1"); [EOL]     s1.add(1.0, 1.0, 1.0, 2.0); [EOL]     s1.add(3.0, 3.0, 3.0, 3.0); [EOL]     s1.add(2.0, 2.0, 2.0, 2.0); [EOL]     assertEquals(0, s1.indexOf(new XYCoordinate(1.0, 1.0))); [EOL]     assertEquals(1, s1.indexOf(new XYCoordinate(3.0, 3.0))); [EOL]     assertEquals(2, s1.indexOf(new XYCoordinate(2.0, 2.0))); [EOL] } <line_num>: 200,208
public void testRemove() { [EOL]     VectorSeries s1 = new VectorSeries("Series 1"); [EOL]     s1.add(1.0, 1.0, 1.0, 2.0); [EOL]     s1.add(3.0, 3.0, 3.0, 3.0); [EOL]     s1.add(2.0, 2.0, 2.0, 2.0); [EOL]     assertEquals(3, s1.getItemCount()); [EOL]     s1.remove(new XYCoordinate(2.0, 2.0)); [EOL]     assertEquals(3.0, s1.getXValue(1), EPSILON); [EOL]     s1.remove(new XYCoordinate(1.0, 1.0)); [EOL]     assertEquals(3.0, s1.getXValue(0), EPSILON); [EOL] } <line_num>: 213,225
public void testAdditionOfDuplicateXValues() { [EOL]     VectorSeries s1 = new VectorSeries("Series 1"); [EOL]     s1.add(1.0, 1.0, 1.0, 1.0); [EOL]     s1.add(2.0, 2.0, 2.0, 2.0); [EOL]     s1.add(2.0, 2.0, 3.0, 3.0); [EOL]     s1.add(2.0, 3.0, 4.0, 4.0); [EOL]     s1.add(3.0, 5.0, 5.0, 5.0); [EOL]     assertEquals(1.0, s1.getVectorXValue(0), EPSILON); [EOL]     assertEquals(2.0, s1.getVectorXValue(1), EPSILON); [EOL]     assertEquals(3.0, s1.getVectorXValue(2), EPSILON); [EOL]     assertEquals(4.0, s1.getVectorXValue(3), EPSILON); [EOL]     assertEquals(5.0, s1.getVectorXValue(4), EPSILON); [EOL] } <line_num>: 233,245
public void testAdd() { [EOL]     VectorSeries series = new VectorSeries("Series", false, true); [EOL]     series.add(5.0, 5.50, 5.50, 5.50); [EOL]     series.add(5.1, 5.51, 5.51, 5.51); [EOL]     series.add(6.0, 6.6, 6.6, 6.6); [EOL]     series.add(3.0, 3.3, 3.3, 3.3); [EOL]     series.add(4.0, 4.4, 4.4, 4.4); [EOL]     series.add(2.0, 2.2, 2.2, 2.2); [EOL]     series.add(1.0, 1.1, 1.1, 1.1); [EOL]     assertEquals(5.5, series.getVectorXValue(0), EPSILON); [EOL]     assertEquals(5.51, series.getVectorXValue(1), EPSILON); [EOL]     assertEquals(6.6, series.getVectorXValue(2), EPSILON); [EOL]     assertEquals(3.3, series.getVectorXValue(3), EPSILON); [EOL]     assertEquals(4.4, series.getVectorXValue(4), EPSILON); [EOL]     assertEquals(2.2, series.getVectorXValue(5), EPSILON); [EOL]     assertEquals(1.1, series.getVectorXValue(6), EPSILON); [EOL] } <line_num>: 250,266
public void testSetMaximumItemCount() { [EOL]     VectorSeries s1 = new VectorSeries("S1"); [EOL]     assertEquals(Integer.MAX_VALUE, s1.getMaximumItemCount()); [EOL]     s1.setMaximumItemCount(2); [EOL]     assertEquals(2, s1.getMaximumItemCount()); [EOL]     s1.add(1.0, 1.1, 1.1, 1.1); [EOL]     s1.add(2.0, 2.2, 2.2, 2.2); [EOL]     s1.add(3.0, 3.3, 3.3, 3.3); [EOL]     assertEquals(2.0, s1.getXValue(0), EPSILON); [EOL]     assertEquals(3.0, s1.getXValue(1), EPSILON); [EOL] } <line_num>: 271,281
public void testSetMaximumItemCount2() { [EOL]     VectorSeries s1 = new VectorSeries("S1"); [EOL]     s1.add(1.0, 1.1, 1.1, 1.1); [EOL]     s1.add(2.0, 2.2, 2.2, 2.2); [EOL]     s1.add(3.0, 3.3, 3.3, 3.3); [EOL]     s1.setMaximumItemCount(2); [EOL]     assertEquals(2.0, s1.getXValue(0), EPSILON); [EOL]     assertEquals(3.0, s1.getXValue(1), EPSILON); [EOL] } <line_num>: 286,294
public void testClear() { [EOL]     VectorSeries s1 = new VectorSeries("S1"); [EOL]     s1.addChangeListener(this); [EOL]     s1.clear(); [EOL]     assertNull(this.lastEvent); [EOL]     assertTrue(s1.isEmpty()); [EOL]     s1.add(1.0, 2.0, 3.0, 4.0); [EOL]     assertFalse(s1.isEmpty()); [EOL]     s1.clear(); [EOL]     assertNotNull(this.lastEvent); [EOL]     assertTrue(s1.isEmpty()); [EOL] } <line_num>: 299,310
