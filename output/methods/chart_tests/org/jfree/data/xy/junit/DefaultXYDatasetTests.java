public DefaultXYDatasetTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 78,80
public static Test suite() { [EOL]     return new TestSuite(DefaultXYDatasetTests.class); [EOL] } <line_num>: 69,71
public void testEquals() { [EOL]     DefaultXYDataset d1 = new DefaultXYDataset(); [EOL]     DefaultXYDataset d2 = new DefaultXYDataset(); [EOL]     assertTrue(d1.equals(d2)); [EOL]     assertTrue(d2.equals(d1)); [EOL]     double[] x1 = new double[] { 1.0, 2.0, 3.0 }; [EOL]     double[] y1 = new double[] { 4.0, 5.0, 6.0 }; [EOL]     double[][] data1 = new double[][] { x1, y1 }; [EOL]     double[] x2 = new double[] { 1.0, 2.0, 3.0 }; [EOL]     double[] y2 = new double[] { 4.0, 5.0, 6.0 }; [EOL]     double[][] data2 = new double[][] { x2, y2 }; [EOL]     d1.addSeries("S1", data1); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.addSeries("S1", data2); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 85,102
public void testCloning() { [EOL]     DefaultXYDataset d1 = new DefaultXYDataset(); [EOL]     DefaultXYDataset d2 = null; [EOL]     try { [EOL]         d2 = (DefaultXYDataset) d1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(d1 != d2); [EOL]     assertTrue(d1.getClass() == d2.getClass()); [EOL]     assertTrue(d1.equals(d2)); [EOL]     double[] x1 = new double[] { 1.0, 2.0, 3.0 }; [EOL]     double[] y1 = new double[] { 4.0, 5.0, 6.0 }; [EOL]     double[][] data1 = new double[][] { x1, y1 }; [EOL]     d1.addSeries("S1", data1); [EOL]     try { [EOL]         d2 = (DefaultXYDataset) d1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(d1 != d2); [EOL]     assertTrue(d1.getClass() == d2.getClass()); [EOL]     assertTrue(d1.equals(d2)); [EOL]     x1[1] = 2.2; [EOL]     assertFalse(d1.equals(d2)); [EOL]     x1[1] = 2.0; [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 107,140
public void testPublicCloneable() { [EOL]     DefaultXYDataset d1 = new DefaultXYDataset(); [EOL]     assertTrue(d1 instanceof PublicCloneable); [EOL] } <line_num>: 145,148
public void testSerialization() { [EOL]     DefaultXYDataset d1 = new DefaultXYDataset(); [EOL]     DefaultXYDataset d2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(d1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         d2 = (DefaultXYDataset) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(d1, d2); [EOL]     double[] x1 = new double[] { 1.0, 2.0, 3.0 }; [EOL]     double[] y1 = new double[] { 4.0, 5.0, 6.0 }; [EOL]     double[][] data1 = new double[][] { x1, y1 }; [EOL]     d1.addSeries("S1", data1); [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(d1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         d2 = (DefaultXYDataset) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(d1, d2); [EOL] } <line_num>: 153,197
public void testGetSeriesKey() { [EOL]     DefaultXYDataset d = createSampleDataset1(); [EOL]     assertEquals("S1", d.getSeriesKey(0)); [EOL]     assertEquals("S2", d.getSeriesKey(1)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         d.getSeriesKey(-1); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         d.getSeriesKey(2); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 202,225
public void testIndexOf() { [EOL]     DefaultXYDataset d = createSampleDataset1(); [EOL]     assertEquals(0, d.indexOf("S1")); [EOL]     assertEquals(1, d.indexOf("S2")); [EOL]     assertEquals(-1, d.indexOf("Green Eggs and Ham")); [EOL]     assertEquals(-1, d.indexOf(null)); [EOL] } <line_num>: 230,236
public void testAddSeries() { [EOL]     DefaultXYDataset d = new DefaultXYDataset(); [EOL]     d.addSeries("S1", new double[][] { { 1.0 }, { 2.0 } }); [EOL]     assertEquals(1, d.getSeriesCount()); [EOL]     assertEquals("S1", d.getSeriesKey(0)); [EOL]     d.addSeries("S1", new double[][] { { 11.0 }, { 12.0 } }); [EOL]     assertEquals(1, d.getSeriesCount()); [EOL]     assertEquals(12.0, d.getYValue(0, 0), EPSILON); [EOL]     boolean pass = false; [EOL]     try { [EOL]         d.addSeries(null, new double[][] { { 1.0 }, { 2.0 } }); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 243,265
public DefaultXYDataset createSampleDataset1() { [EOL]     DefaultXYDataset d = new DefaultXYDataset(); [EOL]     double[] x1 = new double[] { 1.0, 2.0, 3.0 }; [EOL]     double[] y1 = new double[] { 4.0, 5.0, 6.0 }; [EOL]     double[][] data1 = new double[][] { x1, y1 }; [EOL]     d.addSeries("S1", data1); [EOL]     double[] x2 = new double[] { 1.0, 2.0, 3.0 }; [EOL]     double[] y2 = new double[] { 4.0, 5.0, 6.0 }; [EOL]     double[][] data2 = new double[][] { x2, y2 }; [EOL]     d.addSeries("S2", data2); [EOL]     return d; [EOL] } <line_num>: 272,284
