public XYSeriesTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 84,86
public static Test suite() { [EOL]     return new TestSuite(XYSeriesTests.class); [EOL] } <line_num>: 75,77
public void testEquals() { [EOL]     XYSeries s1 = new XYSeries("Series"); [EOL]     s1.add(1.0, 1.1); [EOL]     XYSeries s2 = new XYSeries("Series"); [EOL]     s2.add(1.0, 1.1); [EOL]     assertTrue(s1.equals(s2)); [EOL]     assertTrue(s2.equals(s1)); [EOL]     s1.setKey("Series X"); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.setKey("Series X"); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1.add(2.0, 2.2); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.add(2.0, 2.2); [EOL]     assertTrue(s1.equals(s2)); [EOL] } <line_num>: 91,108
public void testHashCode() { [EOL]     XYSeries s1 = new XYSeries("Test"); [EOL]     XYSeries s2 = new XYSeries("Test"); [EOL]     assertEquals(s1, s2); [EOL]     assertEquals(s1.hashCode(), s2.hashCode()); [EOL]     s1.add(1.0, 500.0); [EOL]     s2.add(1.0, 500.0); [EOL]     assertEquals(s1, s2); [EOL]     assertEquals(s1.hashCode(), s2.hashCode()); [EOL]     s1.add(2.0, null); [EOL]     s2.add(2.0, null); [EOL]     assertEquals(s1, s2); [EOL]     assertEquals(s1.hashCode(), s2.hashCode()); [EOL]     s1.add(5.0, 111.0); [EOL]     s2.add(5.0, 111.0); [EOL]     assertEquals(s1, s2); [EOL]     assertEquals(s1.hashCode(), s2.hashCode()); [EOL]     s1.add(9.0, 1.0); [EOL]     s2.add(9.0, 1.0); [EOL]     assertEquals(s1, s2); [EOL]     assertEquals(s1.hashCode(), s2.hashCode()); [EOL] } <line_num>: 113,138
public void testCloning() { [EOL]     XYSeries s1 = new XYSeries("Series"); [EOL]     s1.add(1.0, 1.1); [EOL]     XYSeries s2 = null; [EOL]     try { [EOL]         s2 = (XYSeries) s1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(s1 != s2); [EOL]     assertTrue(s1.getClass() == s2.getClass()); [EOL]     assertTrue(s1.equals(s2)); [EOL] } <line_num>: 143,156
public void testCloning2() { [EOL]     XYSeries s1 = new XYSeries("S1"); [EOL]     s1.add(1.0, 100.0); [EOL]     s1.add(2.0, null); [EOL]     s1.add(3.0, 200.0); [EOL]     XYSeries s2 = null; [EOL]     try { [EOL]         s2 = (XYSeries) s1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(s1.equals(s2)); [EOL]     s2.add(4.0, 300.0); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s1.add(4.0, 300.0); [EOL]     assertTrue(s1.equals(s2)); [EOL] } <line_num>: 161,180
public void testCloning3() { [EOL]     XYSeries s1 = new XYSeries("S1"); [EOL]     XYSeries s2 = null; [EOL]     try { [EOL]         s2 = (XYSeries) s1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(s1.equals(s2)); [EOL]     s2.add(4.0, 300.0); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s1.add(4.0, 300.0); [EOL]     assertTrue(s1.equals(s2)); [EOL] } <line_num>: 185,201
public void testSerialization() { [EOL]     XYSeries s1 = new XYSeries("Series"); [EOL]     s1.add(1.0, 1.1); [EOL]     XYSeries s2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(s1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         s2 = (XYSeries) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(s1, s2); [EOL] } <line_num>: 206,225
public void testIndexOf() { [EOL]     XYSeries s1 = new XYSeries("Series 1"); [EOL]     s1.add(1.0, 1.0); [EOL]     s1.add(2.0, 2.0); [EOL]     s1.add(3.0, 3.0); [EOL]     assertEquals(0, s1.indexOf(new Double(1.0))); [EOL]     assertEquals(1, s1.indexOf(new Double(2.0))); [EOL]     assertEquals(2, s1.indexOf(new Double(3.0))); [EOL]     assertEquals(-4, s1.indexOf(new Double(99.9))); [EOL] } <line_num>: 230,239
public void testIndexOf2() { [EOL]     XYSeries s1 = new XYSeries("Series 1", false, true); [EOL]     s1.add(1.0, 1.0); [EOL]     s1.add(3.0, 3.0); [EOL]     s1.add(2.0, 2.0); [EOL]     assertEquals(0, s1.indexOf(new Double(1.0))); [EOL]     assertEquals(1, s1.indexOf(new Double(3.0))); [EOL]     assertEquals(2, s1.indexOf(new Double(2.0))); [EOL] } <line_num>: 244,252
public void testIndexOf3() { [EOL]     XYSeries s1 = new XYSeries("Series 1"); [EOL]     s1.add(1.0, 1.0); [EOL]     s1.add(2.0, 2.0); [EOL]     s1.add(2.0, 3.0); [EOL]     assertEquals(0, s1.indexOf(new Double(1.0))); [EOL]     assertEquals(1, s1.indexOf(new Double(2.0))); [EOL] } <line_num>: 258,265
public void testRemove() { [EOL]     XYSeries s1 = new XYSeries("Series 1"); [EOL]     s1.add(1.0, 1.0); [EOL]     s1.add(2.0, 2.0); [EOL]     s1.add(3.0, 3.0); [EOL]     assertEquals(3, s1.getItemCount()); [EOL]     s1.remove(new Double(2.0)); [EOL]     assertEquals(new Double(3.0), s1.getX(1)); [EOL]     s1.remove(0); [EOL]     assertEquals(new Double(3.0), s1.getX(0)); [EOL] } <line_num>: 270,282
public void testRemove2() { [EOL]     XYSeries s1 = new XYSeries("S1"); [EOL]     s1.add(1.0, 1.1); [EOL]     s1.add(2.0, 2.2); [EOL]     s1.add(3.0, 3.3); [EOL]     s1.add(4.0, 4.4); [EOL]     s1.add(5.0, 5.5); [EOL]     s1.add(6.0, 6.6); [EOL]     assertEquals(6, s1.getItemCount()); [EOL]     assertEquals(1.0, s1.getMinX(), EPSILON); [EOL]     assertEquals(6.0, s1.getMaxX(), EPSILON); [EOL]     assertEquals(1.1, s1.getMinY(), EPSILON); [EOL]     assertEquals(6.6, s1.getMaxY(), EPSILON); [EOL]     s1.remove(5); [EOL]     assertEquals(5, s1.getItemCount()); [EOL]     assertEquals(1.0, s1.getMinX(), EPSILON); [EOL]     assertEquals(5.0, s1.getMaxX(), EPSILON); [EOL]     assertEquals(1.1, s1.getMinY(), EPSILON); [EOL]     assertEquals(5.5, s1.getMaxY(), EPSILON); [EOL] } <line_num>: 287,307
public void testAdditionOfDuplicateXValues() { [EOL]     XYSeries s1 = new XYSeries("Series 1"); [EOL]     s1.add(1.0, 1.0); [EOL]     s1.add(2.0, 2.0); [EOL]     s1.add(2.0, 3.0); [EOL]     s1.add(2.0, 4.0); [EOL]     s1.add(3.0, 5.0); [EOL]     assertEquals(1.0, s1.getY(0).doubleValue(), EPSILON); [EOL]     assertEquals(2.0, s1.getY(1).doubleValue(), EPSILON); [EOL]     assertEquals(3.0, s1.getY(2).doubleValue(), EPSILON); [EOL]     assertEquals(4.0, s1.getY(3).doubleValue(), EPSILON); [EOL]     assertEquals(5.0, s1.getY(4).doubleValue(), EPSILON); [EOL] } <line_num>: 315,327
public void testUpdate() { [EOL]     XYSeries series = new XYSeries("S1"); [EOL]     series.add(new Integer(1), new Integer(2)); [EOL]     assertEquals(new Integer(2), series.getY(0)); [EOL]     series.update(new Integer(1), new Integer(3)); [EOL]     assertEquals(new Integer(3), series.getY(0)); [EOL]     try { [EOL]         series.update(new Integer(2), new Integer(99)); [EOL]         assertTrue(false); [EOL]     } catch (SeriesException e) { [EOL]     } [EOL] } <line_num>: 332,345
public void testUpdate2() { [EOL]     XYSeries series = new XYSeries("Series", false, true); [EOL]     series.add(5.0, 55.0); [EOL]     series.add(4.0, 44.0); [EOL]     series.add(6.0, 66.0); [EOL]     series.update(new Double(4.0), new Double(99.0)); [EOL]     assertEquals(new Double(99.0), series.getY(1)); [EOL] } <line_num>: 350,357
public void testAddOrUpdate() { [EOL]     XYSeries series = new XYSeries("S1", true, false); [EOL]     XYDataItem old = series.addOrUpdate(new Long(1), new Long(2)); [EOL]     assertTrue(old == null); [EOL]     assertEquals(1, series.getItemCount()); [EOL]     assertEquals(new Long(2), series.getY(0)); [EOL]     old = series.addOrUpdate(new Long(2), new Long(3)); [EOL]     assertTrue(old == null); [EOL]     assertEquals(2, series.getItemCount()); [EOL]     assertEquals(new Long(3), series.getY(1)); [EOL]     old = series.addOrUpdate(new Long(1), new Long(99)); [EOL]     assertEquals(new XYDataItem(new Long(1), new Long(2)), old); [EOL]     assertEquals(2, series.getItemCount()); [EOL]     assertEquals(new Long(99), series.getY(0)); [EOL]     assertEquals(new Long(3), series.getY(1)); [EOL] } <line_num>: 362,379
public void testAddOrUpdate2() { [EOL]     XYSeries series = new XYSeries("Series", false, false); [EOL]     series.add(5.0, 5.5); [EOL]     series.add(6.0, 6.6); [EOL]     series.add(3.0, 3.3); [EOL]     series.add(4.0, 4.4); [EOL]     series.add(2.0, 2.2); [EOL]     series.add(1.0, 1.1); [EOL]     series.addOrUpdate(new Double(3.0), new Double(33.3)); [EOL]     series.addOrUpdate(new Double(2.0), new Double(22.2)); [EOL]     assertEquals(33.3, series.getY(2).doubleValue(), EPSILON); [EOL]     assertEquals(22.2, series.getY(4).doubleValue(), EPSILON); [EOL] } <line_num>: 384,396
public void testAddOrUpdate3() { [EOL]     XYSeries series = new XYSeries("Series", false, true); [EOL]     series.addOrUpdate(1.0, 1.0); [EOL]     series.addOrUpdate(1.0, 2.0); [EOL]     series.addOrUpdate(1.0, 3.0); [EOL]     assertEquals(new Double(1.0), series.getY(0)); [EOL]     assertEquals(new Double(2.0), series.getY(1)); [EOL]     assertEquals(new Double(3.0), series.getY(2)); [EOL]     assertEquals(3, series.getItemCount()); [EOL] } <line_num>: 401,410
public void testAdd() { [EOL]     XYSeries series = new XYSeries("Series", false, true); [EOL]     series.add(5.0, 5.50); [EOL]     series.add(5.1, 5.51); [EOL]     series.add(6.0, 6.6); [EOL]     series.add(3.0, 3.3); [EOL]     series.add(4.0, 4.4); [EOL]     series.add(2.0, 2.2); [EOL]     series.add(1.0, 1.1); [EOL]     assertEquals(5.5, series.getY(0).doubleValue(), EPSILON); [EOL]     assertEquals(5.51, series.getY(1).doubleValue(), EPSILON); [EOL]     assertEquals(6.6, series.getY(2).doubleValue(), EPSILON); [EOL]     assertEquals(3.3, series.getY(3).doubleValue(), EPSILON); [EOL]     assertEquals(4.4, series.getY(4).doubleValue(), EPSILON); [EOL]     assertEquals(2.2, series.getY(5).doubleValue(), EPSILON); [EOL]     assertEquals(1.1, series.getY(6).doubleValue(), EPSILON); [EOL] } <line_num>: 415,431
public void testSetMaximumItemCount() { [EOL]     XYSeries s1 = new XYSeries("S1"); [EOL]     assertEquals(Integer.MAX_VALUE, s1.getMaximumItemCount()); [EOL]     s1.setMaximumItemCount(2); [EOL]     assertEquals(2, s1.getMaximumItemCount()); [EOL]     s1.add(1.0, 1.1); [EOL]     s1.add(2.0, 2.2); [EOL]     s1.add(3.0, 3.3); [EOL]     assertEquals(2.0, s1.getX(0).doubleValue(), EPSILON); [EOL]     assertEquals(3.0, s1.getX(1).doubleValue(), EPSILON); [EOL] } <line_num>: 436,446
public void testSetMaximumItemCount2() { [EOL]     XYSeries s1 = new XYSeries("S1"); [EOL]     s1.add(1.0, 1.1); [EOL]     s1.add(2.0, 2.2); [EOL]     s1.add(3.0, 3.3); [EOL]     s1.setMaximumItemCount(2); [EOL]     assertEquals(2.0, s1.getX(0).doubleValue(), EPSILON); [EOL]     assertEquals(3.0, s1.getX(1).doubleValue(), EPSILON); [EOL] } <line_num>: 451,459
public void testSetMaximumItemCount3() { [EOL]     XYSeries s1 = new XYSeries("S1"); [EOL]     s1.add(1.0, 1.1); [EOL]     s1.add(2.0, 2.2); [EOL]     s1.add(3.0, 3.3); [EOL]     s1.add(4.0, 4.4); [EOL]     s1.add(5.0, 5.5); [EOL]     s1.add(6.0, 6.6); [EOL]     s1.setMaximumItemCount(2); [EOL]     assertEquals(5.0, s1.getX(0).doubleValue(), EPSILON); [EOL]     assertEquals(6.0, s1.getX(1).doubleValue(), EPSILON); [EOL]     assertEquals(5.0, s1.getMinX(), EPSILON); [EOL]     assertEquals(6.0, s1.getMaxX(), EPSILON); [EOL]     assertEquals(5.5, s1.getMinY(), EPSILON); [EOL]     assertEquals(6.6, s1.getMaxY(), EPSILON); [EOL] } <line_num>: 465,480
public void testSetMaximumItemCount4() { [EOL]     XYSeries s1 = new XYSeries("S1"); [EOL]     s1.setMaximumItemCount(2); [EOL]     s1.add(1.0, 1.1); [EOL]     s1.add(2.0, 2.2); [EOL]     s1.add(3.0, 3.3); [EOL]     assertEquals(2.0, s1.getX(0).doubleValue(), EPSILON); [EOL]     assertEquals(3.0, s1.getX(1).doubleValue(), EPSILON); [EOL]     assertEquals(2.0, s1.getMinX(), EPSILON); [EOL]     assertEquals(3.0, s1.getMaxX(), EPSILON); [EOL]     assertEquals(2.2, s1.getMinY(), EPSILON); [EOL]     assertEquals(3.3, s1.getMaxY(), EPSILON); [EOL] } <line_num>: 486,498
public void testToArray() { [EOL]     XYSeries s = new XYSeries("S1"); [EOL]     double[][] array = s.toArray(); [EOL]     assertEquals(2, array.length); [EOL]     assertEquals(0, array[0].length); [EOL]     assertEquals(0, array[1].length); [EOL]     s.add(1.0, 2.0); [EOL]     array = s.toArray(); [EOL]     assertEquals(1, array[0].length); [EOL]     assertEquals(1, array[1].length); [EOL]     assertEquals(2, array.length); [EOL]     assertEquals(1.0, array[0][0], EPSILON); [EOL]     assertEquals(2.0, array[1][0], EPSILON); [EOL]     s.add(2.0, null); [EOL]     array = s.toArray(); [EOL]     assertEquals(2, array.length); [EOL]     assertEquals(2, array[0].length); [EOL]     assertEquals(2, array[1].length); [EOL]     assertEquals(2.0, array[0][1], EPSILON); [EOL]     assertTrue(Double.isNaN(array[1][1])); [EOL] } <line_num>: 503,525
public void testToArrayExample() { [EOL]     XYSeries s = new XYSeries("S"); [EOL]     s.add(1.0, 11.0); [EOL]     s.add(2.0, 22.0); [EOL]     s.add(3.5, 35.0); [EOL]     s.add(5.0, null); [EOL]     DefaultXYDataset dataset = new DefaultXYDataset(); [EOL]     dataset.addSeries("S", s.toArray()); [EOL]     assertEquals(1, dataset.getSeriesCount()); [EOL]     assertEquals(4, dataset.getItemCount(0)); [EOL]     assertEquals("S", dataset.getSeriesKey(0)); [EOL]     assertEquals(1.0, dataset.getXValue(0, 0), EPSILON); [EOL]     assertEquals(2.0, dataset.getXValue(0, 1), EPSILON); [EOL]     assertEquals(3.5, dataset.getXValue(0, 2), EPSILON); [EOL]     assertEquals(5.0, dataset.getXValue(0, 3), EPSILON); [EOL]     assertEquals(11.0, dataset.getYValue(0, 0), EPSILON); [EOL]     assertEquals(22.0, dataset.getYValue(0, 1), EPSILON); [EOL]     assertEquals(35.0, dataset.getYValue(0, 2), EPSILON); [EOL]     assertTrue(Double.isNaN(dataset.getYValue(0, 3))); [EOL] } <line_num>: 530,549
public void testBug1955483() { [EOL]     XYSeries series = new XYSeries("Series", true, true); [EOL]     series.addOrUpdate(1.0, 1.0); [EOL]     series.addOrUpdate(1.0, 2.0); [EOL]     assertEquals(new Double(1.0), series.getY(0)); [EOL]     assertEquals(new Double(2.0), series.getY(1)); [EOL]     assertEquals(2, series.getItemCount()); [EOL] } <line_num>: 554,561
public void testDelete() { [EOL]     XYSeries s1 = new XYSeries("S1"); [EOL]     s1.add(1.0, 1.1); [EOL]     s1.add(2.0, 2.2); [EOL]     s1.add(3.0, 3.3); [EOL]     s1.add(4.0, 4.4); [EOL]     s1.add(5.0, 5.5); [EOL]     s1.add(6.0, 6.6); [EOL]     s1.delete(2, 5); [EOL]     assertEquals(2, s1.getItemCount()); [EOL]     assertEquals(1.0, s1.getX(0).doubleValue(), EPSILON); [EOL]     assertEquals(2.0, s1.getX(1).doubleValue(), EPSILON); [EOL]     assertEquals(1.0, s1.getMinX(), EPSILON); [EOL]     assertEquals(2.0, s1.getMaxX(), EPSILON); [EOL]     assertEquals(1.1, s1.getMinY(), EPSILON); [EOL]     assertEquals(2.2, s1.getMaxY(), EPSILON); [EOL] } <line_num>: 566,582
public void testGetMinX() { [EOL]     XYSeries s1 = new XYSeries("S1"); [EOL]     assertTrue(Double.isNaN(s1.getMinX())); [EOL]     s1.add(1.0, 1.1); [EOL]     assertEquals(1.0, s1.getMinX(), EPSILON); [EOL]     s1.add(2.0, 2.2); [EOL]     assertEquals(1.0, s1.getMinX(), EPSILON); [EOL]     s1.add(Double.NaN, 99.9); [EOL]     assertEquals(1.0, s1.getMinX(), EPSILON); [EOL]     s1.add(-1.0, -1.1); [EOL]     assertEquals(-1.0, s1.getMinX(), EPSILON); [EOL]     s1.add(0.0, null); [EOL]     assertEquals(-1.0, s1.getMinX(), EPSILON); [EOL] } <line_num>: 587,605
public void testGetMaxX() { [EOL]     XYSeries s1 = new XYSeries("S1"); [EOL]     assertTrue(Double.isNaN(s1.getMaxX())); [EOL]     s1.add(1.0, 1.1); [EOL]     assertEquals(1.0, s1.getMaxX(), EPSILON); [EOL]     s1.add(2.0, 2.2); [EOL]     assertEquals(2.0, s1.getMaxX(), EPSILON); [EOL]     s1.add(Double.NaN, 99.9); [EOL]     assertEquals(2.0, s1.getMaxX(), EPSILON); [EOL]     s1.add(-1.0, -1.1); [EOL]     assertEquals(2.0, s1.getMaxX(), EPSILON); [EOL]     s1.add(0.0, null); [EOL]     assertEquals(2.0, s1.getMaxX(), EPSILON); [EOL] } <line_num>: 610,628
public void testGetMinY() { [EOL]     XYSeries s1 = new XYSeries("S1"); [EOL]     assertTrue(Double.isNaN(s1.getMinY())); [EOL]     s1.add(1.0, 1.1); [EOL]     assertEquals(1.1, s1.getMinY(), EPSILON); [EOL]     s1.add(2.0, 2.2); [EOL]     assertEquals(1.1, s1.getMinY(), EPSILON); [EOL]     s1.add(Double.NaN, 99.9); [EOL]     assertEquals(1.1, s1.getMinY(), EPSILON); [EOL]     s1.add(-1.0, -1.1); [EOL]     assertEquals(-1.1, s1.getMinY(), EPSILON); [EOL]     s1.add(0.0, null); [EOL]     assertEquals(-1.1, s1.getMinY(), EPSILON); [EOL] } <line_num>: 633,651
public void testGetMaxY() { [EOL]     XYSeries s1 = new XYSeries("S1"); [EOL]     assertTrue(Double.isNaN(s1.getMaxY())); [EOL]     s1.add(1.0, 1.1); [EOL]     assertEquals(1.1, s1.getMaxY(), EPSILON); [EOL]     s1.add(2.0, 2.2); [EOL]     assertEquals(2.2, s1.getMaxY(), EPSILON); [EOL]     s1.add(Double.NaN, 99.9); [EOL]     assertEquals(99.9, s1.getMaxY(), EPSILON); [EOL]     s1.add(-1.0, -1.1); [EOL]     assertEquals(99.9, s1.getMaxY(), EPSILON); [EOL]     s1.add(0.0, null); [EOL]     assertEquals(99.9, s1.getMaxY(), EPSILON); [EOL] } <line_num>: 656,674
public void testClear() { [EOL]     XYSeries s1 = new XYSeries("S1"); [EOL]     s1.add(1.0, 1.1); [EOL]     s1.add(2.0, 2.2); [EOL]     s1.add(3.0, 3.3); [EOL]     assertEquals(3, s1.getItemCount()); [EOL]     s1.clear(); [EOL]     assertEquals(0, s1.getItemCount()); [EOL]     assertTrue(Double.isNaN(s1.getMinX())); [EOL]     assertTrue(Double.isNaN(s1.getMaxX())); [EOL]     assertTrue(Double.isNaN(s1.getMinY())); [EOL]     assertTrue(Double.isNaN(s1.getMaxY())); [EOL] } <line_num>: 679,693
public void testUpdateByIndex() { [EOL]     XYSeries s1 = new XYSeries("S1"); [EOL]     s1.add(1.0, 1.1); [EOL]     s1.add(2.0, 2.2); [EOL]     s1.add(3.0, 3.3); [EOL]     assertEquals(1.1, s1.getMinY(), EPSILON); [EOL]     assertEquals(3.3, s1.getMaxY(), EPSILON); [EOL]     s1.updateByIndex(0, new Double(-5.0)); [EOL]     assertEquals(-5.0, s1.getMinY(), EPSILON); [EOL]     assertEquals(3.3, s1.getMaxY(), EPSILON); [EOL]     s1.updateByIndex(0, null); [EOL]     assertEquals(2.2, s1.getMinY(), EPSILON); [EOL]     assertEquals(3.3, s1.getMaxY(), EPSILON); [EOL]     s1.updateByIndex(2, null); [EOL]     assertEquals(2.2, s1.getMinY(), EPSILON); [EOL]     assertEquals(2.2, s1.getMaxY(), EPSILON); [EOL]     s1.updateByIndex(1, null); [EOL]     assertTrue(Double.isNaN(s1.getMinY())); [EOL]     assertTrue(Double.isNaN(s1.getMaxY())); [EOL] } <line_num>: 698,722
public void testUpdateByIndex2() { [EOL]     XYSeries s1 = new XYSeries("S1"); [EOL]     s1.add(1.0, Double.NaN); [EOL]     assertTrue(Double.isNaN(s1.getMinY())); [EOL]     assertTrue(Double.isNaN(s1.getMaxY())); [EOL]     s1.updateByIndex(0, new Double(1.0)); [EOL]     assertEquals(1.0, s1.getMinY(), EPSILON); [EOL]     assertEquals(1.0, s1.getMaxY(), EPSILON); [EOL]     s1.updateByIndex(0, new Double(2.0)); [EOL]     assertEquals(2.0, s1.getMinY(), EPSILON); [EOL]     assertEquals(2.0, s1.getMaxY(), EPSILON); [EOL]     s1.add(-1.0, -1.0); [EOL]     s1.updateByIndex(0, new Double(0.0)); [EOL]     assertEquals(0.0, s1.getMinY(), EPSILON); [EOL]     assertEquals(2.0, s1.getMaxY(), EPSILON); [EOL] } <line_num>: 727,746
public void testUpdateByIndex3() { [EOL]     XYSeries s1 = new XYSeries("S1"); [EOL]     s1.add(1.0, 1.1); [EOL]     s1.add(2.0, 2.2); [EOL]     s1.add(3.0, 3.3); [EOL]     s1.updateByIndex(1, new Double(2.05)); [EOL]     assertEquals(1.1, s1.getMinY(), EPSILON); [EOL]     assertEquals(3.3, s1.getMaxY(), EPSILON); [EOL] } <line_num>: 751,760
public void testUpdateXY() { [EOL]     XYSeries s1 = new XYSeries("S1"); [EOL]     s1.add(1.0, Double.NaN); [EOL]     assertTrue(Double.isNaN(s1.getMinY())); [EOL]     assertTrue(Double.isNaN(s1.getMaxY())); [EOL]     s1.update(new Double(1.0), new Double(1.0)); [EOL]     assertEquals(1.0, s1.getMinY(), EPSILON); [EOL]     assertEquals(1.0, s1.getMaxY(), EPSILON); [EOL]     s1.update(new Double(1.0), new Double(2.0)); [EOL]     assertEquals(2.0, s1.getMinY(), EPSILON); [EOL]     assertEquals(2.0, s1.getMaxY(), EPSILON); [EOL] } <line_num>: 765,779
