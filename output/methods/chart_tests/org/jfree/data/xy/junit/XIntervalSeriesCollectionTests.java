public XIntervalSeriesCollectionTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 79,81
public static Test suite() { [EOL]     return new TestSuite(XIntervalSeriesCollectionTests.class); [EOL] } <line_num>: 70,72
public void testEquals() { [EOL]     XIntervalSeriesCollection c1 = new XIntervalSeriesCollection(); [EOL]     XIntervalSeriesCollection c2 = new XIntervalSeriesCollection(); [EOL]     assertEquals(c1, c2); [EOL]     XIntervalSeries s1 = new XIntervalSeries("Series"); [EOL]     s1.add(1.0, 1.1, 1.2, 1.3); [EOL]     c1.addSeries(s1); [EOL]     assertFalse(c1.equals(c2)); [EOL]     XIntervalSeries s2 = new XIntervalSeries("Series"); [EOL]     s2.add(1.0, 1.1, 1.2, 1.3); [EOL]     c2.addSeries(s2); [EOL]     assertTrue(c1.equals(c2)); [EOL]     c1.addSeries(new XIntervalSeries("Empty Series")); [EOL]     assertFalse(c1.equals(c2)); [EOL]     c2.addSeries(new XIntervalSeries("Empty Series")); [EOL]     assertTrue(c1.equals(c2)); [EOL] } <line_num>: 86,106
public void testCloning() { [EOL]     XIntervalSeriesCollection c1 = new XIntervalSeriesCollection(); [EOL]     XIntervalSeries s1 = new XIntervalSeries("Series"); [EOL]     s1.add(1.0, 1.1, 1.2, 1.3); [EOL]     c1.addSeries(s1); [EOL]     XIntervalSeriesCollection c2 = null; [EOL]     try { [EOL]         c2 = (XIntervalSeriesCollection) c1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(c1 != c2); [EOL]     assertTrue(c1.getClass() == c2.getClass()); [EOL]     assertTrue(c1.equals(c2)); [EOL]     s1.setDescription("XYZ"); [EOL]     assertFalse(c1.equals(c2)); [EOL] } <line_num>: 111,130
public void testPublicCloneable() { [EOL]     XIntervalSeriesCollection c1 = new XIntervalSeriesCollection(); [EOL]     assertTrue(c1 instanceof PublicCloneable); [EOL] } <line_num>: 135,138
public void testSerialization() { [EOL]     XIntervalSeriesCollection c1 = new XIntervalSeriesCollection(); [EOL]     XIntervalSeries s1 = new XIntervalSeries("Series"); [EOL]     s1.add(1.0, 1.1, 1.2, 1.3); [EOL]     XIntervalSeriesCollection c2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(c1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         c2 = (XIntervalSeriesCollection) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(c1, c2); [EOL] } <line_num>: 143,164
public void testRemoveSeries() { [EOL]     XIntervalSeriesCollection c = new XIntervalSeriesCollection(); [EOL]     XIntervalSeries s1 = new XIntervalSeries("s1"); [EOL]     c.addSeries(s1); [EOL]     c.removeSeries(0); [EOL]     assertEquals(0, c.getSeriesCount()); [EOL]     c.addSeries(s1); [EOL]     boolean pass = false; [EOL]     try { [EOL]         c.removeSeries(-1); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         c.removeSeries(1); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 169,194
public void test1170825() { [EOL]     XIntervalSeries s1 = new XIntervalSeries("Series1"); [EOL]     XIntervalSeriesCollection dataset = new XIntervalSeriesCollection(); [EOL]     dataset.addSeries(s1); [EOL]     try { [EOL]         dataset.getSeries(1); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         assertTrue(false); [EOL]     } [EOL] } <line_num>: 200,213
