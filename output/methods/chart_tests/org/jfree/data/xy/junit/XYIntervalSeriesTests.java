public XYIntervalSeriesTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 91,93
public void seriesChanged(SeriesChangeEvent event) { [EOL]     this.lastEvent = event; [EOL] } <line_num>: 73,75
public static Test suite() { [EOL]     return new TestSuite(XYIntervalSeriesTests.class); [EOL] } <line_num>: 82,84
public void testEquals() { [EOL]     XYIntervalSeries s1 = new XYIntervalSeries("s1"); [EOL]     XYIntervalSeries s2 = new XYIntervalSeries("s1"); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1 = new XYIntervalSeries("s2"); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2 = new XYIntervalSeries("s2"); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1 = new XYIntervalSeries("s2", false, true); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2 = new XYIntervalSeries("s2", false, true); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1 = new XYIntervalSeries("s2", false, false); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2 = new XYIntervalSeries("s2", false, false); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1.add(1.0, 0.5, 1.5, 2.0, 1.9, 2.1); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.add(1.0, 0.5, 1.5, 2.0, 1.9, 2.1); [EOL]     assertTrue(s2.equals(s1)); [EOL]     s1.add(2.0, 0.5, 1.5, 2.0, 1.9, 2.1); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.add(2.0, 0.5, 1.5, 2.0, 1.9, 2.1); [EOL]     assertTrue(s2.equals(s1)); [EOL]     s1.remove(new Double(1.0)); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.remove(new Double(1.0)); [EOL]     assertTrue(s2.equals(s1)); [EOL] } <line_num>: 98,140
public void testCloning() { [EOL]     XYIntervalSeries s1 = new XYIntervalSeries("s1"); [EOL]     s1.add(1.0, 0.5, 1.5, 2.0, 1.9, 2.01); [EOL]     XYIntervalSeries s2 = null; [EOL]     try { [EOL]         s2 = (XYIntervalSeries) s1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(s1 != s2); [EOL]     assertTrue(s1.getClass() == s2.getClass()); [EOL]     assertTrue(s1.equals(s2)); [EOL] } <line_num>: 145,158
public void testSerialization() { [EOL]     XYIntervalSeries s1 = new XYIntervalSeries("s1"); [EOL]     s1.add(1.0, 0.5, 1.5, 2.0, 1.9, 2.1); [EOL]     XYIntervalSeries s2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(s1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         s2 = (XYIntervalSeries) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(s1, s2); [EOL] } <line_num>: 163,185
public void testIndexOf() { [EOL]     XYIntervalSeries s1 = new XYIntervalSeries("Series 1"); [EOL]     s1.add(1.0, 1.0, 1.0, 2.0, 1.9, 2.1); [EOL]     s1.add(2.0, 2.0, 2.0, 3.0, 2.9, 3.1); [EOL]     s1.add(3.0, 3.0, 3.0, 4.0, 3.9, 4.1); [EOL]     assertEquals(0, s1.indexOf(new Double(1.0))); [EOL] } <line_num>: 190,196
public void testIndexOf2() { [EOL]     XYIntervalSeries s1 = new XYIntervalSeries("Series 1", false, true); [EOL]     s1.add(1.0, 1.0, 1.0, 2.0, 1.9, 2.1); [EOL]     s1.add(3.0, 3.0, 3.0, 3.0, 2.9, 3.1); [EOL]     s1.add(2.0, 2.0, 2.0, 2.0, 1.9, 2.1); [EOL]     assertEquals(0, s1.indexOf(new Double(1.0))); [EOL]     assertEquals(1, s1.indexOf(new Double(3.0))); [EOL]     assertEquals(2, s1.indexOf(new Double(2.0))); [EOL] } <line_num>: 201,209
public void testRemove() { [EOL]     XYIntervalSeries s1 = new XYIntervalSeries("Series 1"); [EOL]     s1.add(1.0, 1.0, 1.0, 2.0, 1.9, 2.1); [EOL]     s1.add(2.0, 2.0, 2.0, 2.0, 1.9, 2.1); [EOL]     s1.add(3.0, 3.0, 3.0, 3.0, 2.9, 3.1); [EOL]     assertEquals(3, s1.getItemCount()); [EOL]     s1.remove(new Double(2.0)); [EOL]     assertEquals(new Double(3.0), s1.getX(1)); [EOL]     s1.remove(new Double(1.0)); [EOL]     assertEquals(new Double(3.0), s1.getX(0)); [EOL] } <line_num>: 214,226
public void testAdditionOfDuplicateXValues() { [EOL]     XYIntervalSeries s1 = new XYIntervalSeries("Series 1"); [EOL]     s1.add(1.0, 1.0, 1.0, 1.0, 1.0, 1.0); [EOL]     s1.add(2.0, 2.0, 2.0, 2.0, 2.0, 2.0); [EOL]     s1.add(2.0, 3.0, 3.0, 3.0, 3.0, 3.0); [EOL]     s1.add(2.0, 4.0, 4.0, 4.0, 4.0, 4.0); [EOL]     s1.add(3.0, 5.0, 5.0, 5.0, 5.0, 5.0); [EOL]     assertEquals(1.0, s1.getYValue(0), EPSILON); [EOL]     assertEquals(2.0, s1.getYValue(1), EPSILON); [EOL]     assertEquals(3.0, s1.getYValue(2), EPSILON); [EOL]     assertEquals(4.0, s1.getYValue(3), EPSILON); [EOL]     assertEquals(5.0, s1.getYValue(4), EPSILON); [EOL] } <line_num>: 234,246
public void testAdd() { [EOL]     XYIntervalSeries series = new XYIntervalSeries("Series", false, true); [EOL]     series.add(5.0, 5.50, 5.50, 5.50, 5.50, 5.50); [EOL]     series.add(5.1, 5.51, 5.51, 5.51, 5.51, 5.51); [EOL]     series.add(6.0, 6.6, 6.6, 6.6, 6.6, 6.6); [EOL]     series.add(3.0, 3.3, 3.3, 3.3, 3.3, 3.3); [EOL]     series.add(4.0, 4.4, 4.4, 4.4, 4.4, 4.4); [EOL]     series.add(2.0, 2.2, 2.2, 2.2, 2.2, 2.2); [EOL]     series.add(1.0, 1.1, 1.1, 1.1, 1.1, 1.1); [EOL]     assertEquals(5.5, series.getYValue(0), EPSILON); [EOL]     assertEquals(5.51, series.getYValue(1), EPSILON); [EOL]     assertEquals(6.6, series.getYValue(2), EPSILON); [EOL]     assertEquals(3.3, series.getYValue(3), EPSILON); [EOL]     assertEquals(4.4, series.getYValue(4), EPSILON); [EOL]     assertEquals(2.2, series.getYValue(5), EPSILON); [EOL]     assertEquals(1.1, series.getYValue(6), EPSILON); [EOL] } <line_num>: 251,267
public void testSetMaximumItemCount() { [EOL]     XYIntervalSeries s1 = new XYIntervalSeries("S1"); [EOL]     assertEquals(Integer.MAX_VALUE, s1.getMaximumItemCount()); [EOL]     s1.setMaximumItemCount(2); [EOL]     assertEquals(2, s1.getMaximumItemCount()); [EOL]     s1.add(1.0, 1.1, 1.1, 1.1, 1.1, 1.1); [EOL]     s1.add(2.0, 2.2, 2.2, 2.2, 2.2, 2.2); [EOL]     s1.add(3.0, 3.3, 3.3, 3.3, 3.3, 3.3); [EOL]     assertEquals(2.0, s1.getX(0).doubleValue(), EPSILON); [EOL]     assertEquals(3.0, s1.getX(1).doubleValue(), EPSILON); [EOL] } <line_num>: 272,282
public void testSetMaximumItemCount2() { [EOL]     XYIntervalSeries s1 = new XYIntervalSeries("S1"); [EOL]     s1.add(1.0, 1.1, 1.1, 1.1, 1.1, 1.1); [EOL]     s1.add(2.0, 2.2, 2.2, 2.2, 2.2, 2.2); [EOL]     s1.add(3.0, 3.3, 3.3, 3.3, 2.2, 2.2); [EOL]     s1.setMaximumItemCount(2); [EOL]     assertEquals(2.0, s1.getX(0).doubleValue(), EPSILON); [EOL]     assertEquals(3.0, s1.getX(1).doubleValue(), EPSILON); [EOL] } <line_num>: 287,295
public void testValues() { [EOL]     XYIntervalSeries s1 = new XYIntervalSeries("S1"); [EOL]     s1.add(2.0, 1.0, 3.0, 5.0, 4.0, 6.0); [EOL]     assertEquals(2.0, s1.getX(0).doubleValue(), EPSILON); [EOL]     assertEquals(1.0, s1.getXLowValue(0), EPSILON); [EOL]     assertEquals(3.0, s1.getXHighValue(0), EPSILON); [EOL]     assertEquals(5.0, s1.getYValue(0), EPSILON); [EOL]     assertEquals(4.0, s1.getYLowValue(0), EPSILON); [EOL]     assertEquals(6.0, s1.getYHighValue(0), EPSILON); [EOL] } <line_num>: 300,309
public void testClear() { [EOL]     XYIntervalSeries s1 = new XYIntervalSeries("S1"); [EOL]     s1.addChangeListener(this); [EOL]     s1.clear(); [EOL]     assertNull(this.lastEvent); [EOL]     assertTrue(s1.isEmpty()); [EOL]     s1.add(1.0, 2.0, 3.0, 4.0, 5.0, 6.0); [EOL]     assertFalse(s1.isEmpty()); [EOL]     s1.clear(); [EOL]     assertNotNull(this.lastEvent); [EOL]     assertTrue(s1.isEmpty()); [EOL] } <line_num>: 314,325
