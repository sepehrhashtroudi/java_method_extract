public IntervalXYDelegateTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 78,80
public static Test suite() { [EOL]     return new TestSuite(IntervalXYDelegateTests.class); [EOL] } <line_num>: 69,71
public void testEquals() { [EOL]     XYSeries s1 = new XYSeries("Series"); [EOL]     s1.add(1.2, 3.4); [EOL]     XYSeriesCollection c1 = new XYSeriesCollection(); [EOL]     c1.addSeries(s1); [EOL]     IntervalXYDelegate d1 = new IntervalXYDelegate(c1); [EOL]     XYSeries s2 = new XYSeries("Series"); [EOL]     XYSeriesCollection c2 = new XYSeriesCollection(); [EOL]     s2.add(1.2, 3.4); [EOL]     c2.addSeries(s2); [EOL]     IntervalXYDelegate d2 = new IntervalXYDelegate(c2); [EOL]     assertTrue(d1.equals(d2)); [EOL]     assertTrue(d2.equals(d1)); [EOL]     d1.setAutoWidth(false); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.setAutoWidth(false); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1.setIntervalPositionFactor(0.123); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.setIntervalPositionFactor(0.123); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1.setFixedIntervalWidth(1.23); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.setFixedIntervalWidth(1.23); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 85,115
public void testCloning() { [EOL]     XYSeries s1 = new XYSeries("Series"); [EOL]     s1.add(1.2, 3.4); [EOL]     XYSeriesCollection c1 = new XYSeriesCollection(); [EOL]     c1.addSeries(s1); [EOL]     IntervalXYDelegate d1 = new IntervalXYDelegate(c1); [EOL]     IntervalXYDelegate d2 = null; [EOL]     try { [EOL]         d2 = (IntervalXYDelegate) d1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         System.err.println("Failed to clone."); [EOL]     } [EOL]     assertTrue(d1 != d2); [EOL]     assertTrue(d1.getClass() == d2.getClass()); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 120,137
public void testSerialization() { [EOL]     XYSeries s1 = new XYSeries("Series"); [EOL]     s1.add(1.2, 3.4); [EOL]     XYSeriesCollection c1 = new XYSeriesCollection(); [EOL]     c1.addSeries(s1); [EOL]     IntervalXYDelegate d1 = new IntervalXYDelegate(c1); [EOL]     IntervalXYDelegate d2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(d1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         d2 = (IntervalXYDelegate) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         System.out.println(e.toString()); [EOL]     } [EOL]     assertEquals(d1, d2); [EOL] } <line_num>: 142,166
