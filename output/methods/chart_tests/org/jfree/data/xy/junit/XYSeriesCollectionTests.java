public XYSeriesCollectionTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 83,85
public static Test suite() { [EOL]     return new TestSuite(XYSeriesCollectionTests.class); [EOL] } <line_num>: 74,76
public void testConstructor() { [EOL]     XYSeriesCollection xysc = new XYSeriesCollection(); [EOL]     assertEquals(0, xysc.getSeriesCount()); [EOL]     assertEquals(1.0, xysc.getIntervalWidth(), EPSILON); [EOL]     assertEquals(0.5, xysc.getIntervalPositionFactor(), EPSILON); [EOL] } <line_num>: 92,97
public void testEquals() { [EOL]     XYSeries s1 = new XYSeries("Series"); [EOL]     s1.add(1.0, 1.1); [EOL]     XYSeriesCollection c1 = new XYSeriesCollection(); [EOL]     c1.addSeries(s1); [EOL]     XYSeries s2 = new XYSeries("Series"); [EOL]     s2.add(1.0, 1.1); [EOL]     XYSeriesCollection c2 = new XYSeriesCollection(); [EOL]     c2.addSeries(s2); [EOL]     assertTrue(c1.equals(c2)); [EOL]     assertTrue(c2.equals(c1)); [EOL]     c1.addSeries(new XYSeries("Empty Series")); [EOL]     assertFalse(c1.equals(c2)); [EOL]     c2.addSeries(new XYSeries("Empty Series")); [EOL]     assertTrue(c1.equals(c2)); [EOL]     c1.setIntervalWidth(5.0); [EOL]     assertFalse(c1.equals(c2)); [EOL]     c2.setIntervalWidth(5.0); [EOL]     assertTrue(c1.equals(c2)); [EOL]     c1.setIntervalPositionFactor(0.75); [EOL]     assertFalse(c1.equals(c2)); [EOL]     c2.setIntervalPositionFactor(0.75); [EOL]     assertTrue(c1.equals(c2)); [EOL]     c1.setAutoWidth(true); [EOL]     assertFalse(c1.equals(c2)); [EOL]     c2.setAutoWidth(true); [EOL]     assertTrue(c1.equals(c2)); [EOL] } <line_num>: 102,134
public void testCloning() { [EOL]     XYSeries s1 = new XYSeries("Series"); [EOL]     s1.add(1.0, 1.1); [EOL]     XYSeriesCollection c1 = new XYSeriesCollection(); [EOL]     c1.addSeries(s1); [EOL]     XYSeriesCollection c2 = null; [EOL]     try { [EOL]         c2 = (XYSeriesCollection) c1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(c1 != c2); [EOL]     assertTrue(c1.getClass() == c2.getClass()); [EOL]     assertTrue(c1.equals(c2)); [EOL]     s1.setDescription("XYZ"); [EOL]     assertFalse(c1.equals(c2)); [EOL] } <line_num>: 139,158
public void testPublicCloneable() { [EOL]     XYSeriesCollection c1 = new XYSeriesCollection(); [EOL]     assertTrue(c1 instanceof PublicCloneable); [EOL] } <line_num>: 163,166
public void testSerialization() { [EOL]     XYSeries s1 = new XYSeries("Series"); [EOL]     s1.add(1.0, 1.1); [EOL]     XYSeriesCollection c1 = new XYSeriesCollection(); [EOL]     c1.addSeries(s1); [EOL]     XYSeriesCollection c2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(c1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         c2 = (XYSeriesCollection) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(c1, c2); [EOL] } <line_num>: 171,193
public void test1170825() { [EOL]     XYSeries s1 = new XYSeries("Series1"); [EOL]     XYSeriesCollection dataset = new XYSeriesCollection(); [EOL]     dataset.addSeries(s1); [EOL]     try { [EOL]         dataset.getSeries(1); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         assertTrue(false); [EOL]     } [EOL] } <line_num>: 198,211
public void testGetSeries() { [EOL]     XYSeriesCollection c = new XYSeriesCollection(); [EOL]     XYSeries s1 = new XYSeries("s1"); [EOL]     c.addSeries(s1); [EOL]     assertEquals("s1", c.getSeries(0).getKey()); [EOL]     boolean pass = false; [EOL]     try { [EOL]         c.getSeries(-1); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         c.getSeries(1); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 216,239
public void testGetSeriesByKey() { [EOL]     XYSeriesCollection c = new XYSeriesCollection(); [EOL]     XYSeries s1 = new XYSeries("s1"); [EOL]     c.addSeries(s1); [EOL]     assertEquals("s1", c.getSeries("s1").getKey()); [EOL]     boolean pass = false; [EOL]     try { [EOL]         c.getSeries("s2"); [EOL]     } catch (UnknownKeyException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         c.getSeries(null); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 244,267
public void testRemoveSeries() { [EOL]     XYSeriesCollection c = new XYSeriesCollection(); [EOL]     XYSeries s1 = new XYSeries("s1"); [EOL]     c.addSeries(s1); [EOL]     c.removeSeries(0); [EOL]     assertEquals(0, c.getSeriesCount()); [EOL]     c.addSeries(s1); [EOL]     boolean pass = false; [EOL]     try { [EOL]         c.removeSeries(-1); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         c.removeSeries(1); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 272,297
public void testIndexOf() { [EOL]     XYSeries s1 = new XYSeries("S1"); [EOL]     XYSeries s2 = new XYSeries("S2"); [EOL]     XYSeriesCollection dataset = new XYSeriesCollection(); [EOL]     assertEquals(-1, dataset.indexOf(s1)); [EOL]     assertEquals(-1, dataset.indexOf(s2)); [EOL]     dataset.addSeries(s1); [EOL]     assertEquals(0, dataset.indexOf(s1)); [EOL]     assertEquals(-1, dataset.indexOf(s2)); [EOL]     dataset.addSeries(s2); [EOL]     assertEquals(0, dataset.indexOf(s1)); [EOL]     assertEquals(1, dataset.indexOf(s2)); [EOL]     dataset.removeSeries(s1); [EOL]     assertEquals(-1, dataset.indexOf(s1)); [EOL]     assertEquals(0, dataset.indexOf(s2)); [EOL]     XYSeries s2b = new XYSeries("S2"); [EOL]     assertEquals(0, dataset.indexOf(s2b)); [EOL] } <line_num>: 302,323
public void testGetDomainBounds() { [EOL]     XYSeriesCollection dataset = new XYSeriesCollection(); [EOL]     Range r = dataset.getDomainBounds(false); [EOL]     assertNull(r); [EOL]     r = dataset.getDomainBounds(true); [EOL]     assertNull(r); [EOL]     XYSeries series = new XYSeries("S1"); [EOL]     dataset.addSeries(series); [EOL]     r = dataset.getDomainBounds(false); [EOL]     assertNull(r); [EOL]     r = dataset.getDomainBounds(true); [EOL]     assertNull(r); [EOL]     series.add(1.0, 1.1); [EOL]     r = dataset.getDomainBounds(false); [EOL]     assertEquals(new Range(1.0, 1.0), r); [EOL]     r = dataset.getDomainBounds(true); [EOL]     assertEquals(new Range(0.5, 1.5), r); [EOL]     series.add(-1.0, -1.1); [EOL]     r = dataset.getDomainBounds(false); [EOL]     assertEquals(new Range(-1.0, 1.0), r); [EOL]     r = dataset.getDomainBounds(true); [EOL]     assertEquals(new Range(-1.5, 1.5), r); [EOL] } <line_num>: 328,353
public void testGetRangeBounds() { [EOL]     XYSeriesCollection dataset = new XYSeriesCollection(); [EOL]     Range r = dataset.getRangeBounds(false); [EOL]     assertNull(r); [EOL]     r = dataset.getRangeBounds(true); [EOL]     assertNull(r); [EOL]     XYSeries series = new XYSeries("S1"); [EOL]     dataset.addSeries(series); [EOL]     r = dataset.getRangeBounds(false); [EOL]     assertNull(r); [EOL]     r = dataset.getRangeBounds(true); [EOL]     assertNull(r); [EOL]     series.add(1.0, 1.1); [EOL]     r = dataset.getRangeBounds(false); [EOL]     assertEquals(new Range(1.1, 1.1), r); [EOL]     r = dataset.getRangeBounds(true); [EOL]     assertEquals(new Range(1.1, 1.1), r); [EOL]     series.add(-1.0, -1.1); [EOL]     r = dataset.getRangeBounds(false); [EOL]     assertEquals(new Range(-1.1, 1.1), r); [EOL]     r = dataset.getRangeBounds(true); [EOL]     assertEquals(new Range(-1.1, 1.1), r); [EOL] } <line_num>: 358,383
