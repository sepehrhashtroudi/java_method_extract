public TableXYDatasetTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 86,88
public static Test suite() { [EOL]     return new TestSuite(TableXYDatasetTests.class); [EOL] } <line_num>: 77,79
public void testEquals() { [EOL]     DefaultTableXYDataset d1 = new DefaultTableXYDataset(); [EOL]     DefaultTableXYDataset d2 = new DefaultTableXYDataset(); [EOL]     assertTrue(d1.equals(d2)); [EOL]     assertTrue(d2.equals(d1)); [EOL]     d1.addSeries(createSeries1()); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.addSeries(createSeries1()); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 93,106
public void testCloning() { [EOL]     DefaultTableXYDataset d1 = new DefaultTableXYDataset(); [EOL]     d1.addSeries(createSeries1()); [EOL]     DefaultTableXYDataset d2 = null; [EOL]     try { [EOL]         d2 = (DefaultTableXYDataset) d1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         System.err.println("Failed to clone."); [EOL]     } [EOL]     assertTrue(d1 != d2); [EOL]     assertTrue(d1.getClass() == d2.getClass()); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 111,124
public void testPublicCloneable() { [EOL]     DefaultTableXYDataset d1 = new DefaultTableXYDataset(); [EOL]     assertTrue(d1 instanceof PublicCloneable); [EOL] } <line_num>: 129,132
public void testSerialization() { [EOL]     DefaultTableXYDataset d1 = new DefaultTableXYDataset(); [EOL]     d1.addSeries(createSeries2()); [EOL]     DefaultTableXYDataset d2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(d1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         d2 = (DefaultTableXYDataset) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         System.out.println(e.toString()); [EOL]     } [EOL]     assertEquals(d1, d2); [EOL] } <line_num>: 137,160
public void testTableXYDataset() { [EOL]     XYSeries series1 = createSeries1(); [EOL]     XYSeries series2 = createSeries2(); [EOL]     DefaultTableXYDataset dataset = new DefaultTableXYDataset(); [EOL]     dataset.addSeries(series1); [EOL]     dataset.addSeries(series2); [EOL]     assertEquals(6, dataset.getItemCount()); [EOL]     assertEquals(6, dataset.getX(0, 5).intValue()); [EOL]     assertEquals(null, dataset.getY(0, 5)); [EOL]     assertEquals(6, dataset.getX(1, 5).intValue()); [EOL]     assertEquals(2, dataset.getY(1, 5).intValue()); [EOL]     series2.add(7, 2); [EOL]     assertEquals(7, dataset.getItemCount()); [EOL]     assertEquals(null, dataset.getY(0, 6)); [EOL]     assertEquals(2, dataset.getY(1, 6).intValue()); [EOL]     dataset.removeSeries(series1); [EOL]     assertEquals(7, dataset.getItemCount()); [EOL]     dataset.removeSeries(series2); [EOL]     series1 = createSeries1(); [EOL]     dataset.addSeries(series1); [EOL]     assertEquals(4, dataset.getItemCount()); [EOL] } <line_num>: 165,201
public void test788597() { [EOL]     DefaultTableXYDataset dataset = new DefaultTableXYDataset(); [EOL]     dataset.addSeries(createSeries1()); [EOL]     assertEquals(4, dataset.getItemCount()); [EOL]     dataset.removeAllSeries(); [EOL]     assertEquals(0, dataset.getItemCount()); [EOL] } <line_num>: 206,212
public void testRemoveAllValuesForX() { [EOL]     DefaultTableXYDataset dataset = new DefaultTableXYDataset(); [EOL]     dataset.addSeries(createSeries1()); [EOL]     dataset.addSeries(createSeries2()); [EOL]     dataset.removeAllValuesForX(new Double(2.0)); [EOL]     assertEquals(5, dataset.getItemCount()); [EOL]     assertEquals(new Double(1.0), dataset.getX(0, 0)); [EOL]     assertEquals(new Double(3.0), dataset.getX(0, 1)); [EOL]     assertEquals(new Double(4.0), dataset.getX(0, 2)); [EOL]     assertEquals(new Double(5.0), dataset.getX(0, 3)); [EOL]     assertEquals(new Double(6.0), dataset.getX(0, 4)); [EOL] } <line_num>: 217,228
public void testPrune() { [EOL]     DefaultTableXYDataset dataset = new DefaultTableXYDataset(); [EOL]     dataset.addSeries(createSeries1()); [EOL]     dataset.addSeries(createSeries2()); [EOL]     dataset.removeSeries(1); [EOL]     dataset.prune(); [EOL]     assertEquals(4, dataset.getItemCount()); [EOL] } <line_num>: 233,240
public void testAutoPrune() { [EOL]     DefaultTableXYDataset dataset = new DefaultTableXYDataset(true); [EOL]     dataset.addSeries(createSeriesA()); [EOL]     assertEquals(2, dataset.getItemCount()); [EOL]     dataset.addSeries(createSeriesB()); [EOL]     assertEquals(2, dataset.getItemCount()); [EOL]     dataset.removeSeries(1); [EOL]     assertEquals(1, dataset.getItemCount()); [EOL]     DefaultTableXYDataset dataset2 = new DefaultTableXYDataset(true); [EOL]     dataset2.addSeries(createSeriesA()); [EOL]     assertEquals(2, dataset2.getItemCount()); [EOL]     dataset2.addSeries(createSeriesB()); [EOL]     assertEquals(2, dataset2.getItemCount()); [EOL]     dataset2.removeSeries(1); [EOL]     assertEquals(1, dataset2.getItemCount()); [EOL] } <line_num>: 245,265
private XYSeries createSeriesA() { [EOL]     XYSeries s = new XYSeries("A", true, false); [EOL]     s.add(1.0, 1.1); [EOL]     s.add(2.0, null); [EOL]     return s; [EOL] } <line_num>: 272,277
private XYSeries createSeriesB() { [EOL]     XYSeries s = new XYSeries("B", true, false); [EOL]     s.add(1.0, null); [EOL]     s.add(2.0, 2.2); [EOL]     return s; [EOL] } <line_num>: 284,289
private XYSeries createSeries1() { [EOL]     XYSeries series1 = new XYSeries("Series 1", true, false); [EOL]     series1.add(1.0, 1.0); [EOL]     series1.add(2.0, 1.0); [EOL]     series1.add(4.0, 1.0); [EOL]     series1.add(5.0, 1.0); [EOL]     return series1; [EOL] } <line_num>: 296,303
private XYSeries createSeries2() { [EOL]     XYSeries series2 = new XYSeries("Series 2", true, false); [EOL]     series2.add(2.0, 2.0); [EOL]     series2.add(3.0, 2.0); [EOL]     series2.add(4.0, 2.0); [EOL]     series2.add(5.0, 2.0); [EOL]     series2.add(6.0, 2.0); [EOL]     return series2; [EOL] } <line_num>: 310,318
