public CategoryTableXYDatasetTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 77,79
public static Test suite() { [EOL]     return new TestSuite(CategoryTableXYDatasetTests.class); [EOL] } <line_num>: 68,70
public void testEquals() { [EOL]     CategoryTableXYDataset d1 = new CategoryTableXYDataset(); [EOL]     d1.add(1.0, 1.1, "Series 1"); [EOL]     d1.add(2.0, 2.2, "Series 1"); [EOL]     CategoryTableXYDataset d2 = new CategoryTableXYDataset(); [EOL]     d2.add(1.0, 1.1, "Series 1"); [EOL]     d2.add(2.0, 2.2, "Series 1"); [EOL]     assertTrue(d1.equals(d2)); [EOL]     assertTrue(d2.equals(d1)); [EOL]     d1.add(3.0, 3.3, "Series 1"); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.add(3.0, 3.3, "Series 1"); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 84,103
public void testCloning() { [EOL]     CategoryTableXYDataset d1 = new CategoryTableXYDataset(); [EOL]     d1.add(1.0, 1.1, "Series 1"); [EOL]     d1.add(2.0, 2.2, "Series 1"); [EOL]     CategoryTableXYDataset d2 = null; [EOL]     try { [EOL]         d2 = (CategoryTableXYDataset) d1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(d1 != d2); [EOL]     assertTrue(d1.getClass() == d2.getClass()); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1.add(3.0, 3.3, "Series 1"); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.add(3.0, 3.3, "Series 1"); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1.setIntervalPositionFactor(0.33); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.setIntervalPositionFactor(0.33); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 108,133
public void testCloning2() { [EOL]     CategoryTableXYDataset d1 = new CategoryTableXYDataset(); [EOL]     d1.add(1.0, 1.1, "Series 1"); [EOL]     d1.add(2.0, 2.2, "Series 1"); [EOL]     d1.setIntervalWidth(1.23); [EOL]     CategoryTableXYDataset d2 = null; [EOL]     try { [EOL]         d2 = (CategoryTableXYDataset) d1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(d1 != d2); [EOL]     assertTrue(d1.getClass() == d2.getClass()); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1.add(3.0, 3.3, "Series 1"); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.add(3.0, 3.3, "Series 1"); [EOL]     assertTrue(d1.equals(d2)); [EOL]     d1.setIntervalPositionFactor(0.33); [EOL]     assertFalse(d1.equals(d2)); [EOL]     d2.setIntervalPositionFactor(0.33); [EOL]     assertTrue(d1.equals(d2)); [EOL] } <line_num>: 139,165
public void testPublicCloneable() { [EOL]     CategoryTableXYDataset d1 = new CategoryTableXYDataset(); [EOL]     assertTrue(d1 instanceof PublicCloneable); [EOL] } <line_num>: 170,173
public void testSerialization() { [EOL]     CategoryTableXYDataset d1 = new CategoryTableXYDataset(); [EOL]     d1.add(1.0, 1.1, "Series 1"); [EOL]     d1.add(2.0, 2.2, "Series 1"); [EOL]     CategoryTableXYDataset d2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(d1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         d2 = (CategoryTableXYDataset) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(d1, d2); [EOL] } <line_num>: 178,203
public void testAddSeries() { [EOL]     CategoryTableXYDataset d1 = new CategoryTableXYDataset(); [EOL]     d1.setAutoWidth(true); [EOL]     d1.add(3.0, 1.1, "Series 1"); [EOL]     d1.add(7.0, 2.2, "Series 1"); [EOL]     assertEquals(3.0, d1.getXValue(0, 0), EPSILON); [EOL]     assertEquals(7.0, d1.getXValue(0, 1), EPSILON); [EOL]     assertEquals(1.0, d1.getStartXValue(0, 0), EPSILON); [EOL]     assertEquals(5.0, d1.getStartXValue(0, 1), EPSILON); [EOL]     assertEquals(5.0, d1.getEndXValue(0, 0), EPSILON); [EOL]     assertEquals(9.0, d1.getEndXValue(0, 1), EPSILON); [EOL]     d1.add(7.5, 1.1, "Series 2"); [EOL]     d1.add(9.0, 2.2, "Series 2"); [EOL]     assertEquals(3.0, d1.getXValue(1, 0), EPSILON); [EOL]     assertEquals(7.0, d1.getXValue(1, 1), EPSILON); [EOL]     assertEquals(7.5, d1.getXValue(1, 2), EPSILON); [EOL]     assertEquals(9.0, d1.getXValue(1, 3), EPSILON); [EOL]     assertEquals(7.25, d1.getStartXValue(1, 2), EPSILON); [EOL]     assertEquals(8.75, d1.getStartXValue(1, 3), EPSILON); [EOL]     assertEquals(7.75, d1.getEndXValue(1, 2), EPSILON); [EOL]     assertEquals(9.25, d1.getEndXValue(1, 3), EPSILON); [EOL]     assertEquals(2.75, d1.getStartXValue(0, 0), EPSILON); [EOL]     assertEquals(6.75, d1.getStartXValue(0, 1), EPSILON); [EOL]     assertEquals(3.25, d1.getEndXValue(0, 0), EPSILON); [EOL]     assertEquals(7.25, d1.getEndXValue(0, 1), EPSILON); [EOL] } <line_num>: 212,243
