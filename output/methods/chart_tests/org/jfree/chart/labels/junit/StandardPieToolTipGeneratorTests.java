public StandardPieToolTipGeneratorTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 85,87
public static Test suite() { [EOL]     return new TestSuite(StandardPieToolTipGeneratorTests.class); [EOL] } <line_num>: 76,78
public void testEquals() { [EOL]     StandardPieToolTipGenerator g1 = new StandardPieToolTipGenerator(); [EOL]     StandardPieToolTipGenerator g2 = new StandardPieToolTipGenerator(); [EOL]     assertTrue(g1.equals(g2)); [EOL]     assertTrue(g2.equals(g1)); [EOL]     g1 = new StandardPieToolTipGenerator("{0}", new DecimalFormat("#,##0.00"), NumberFormat.getPercentInstance()); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2 = new StandardPieToolTipGenerator("{0}", new DecimalFormat("#,##0.00"), NumberFormat.getPercentInstance()); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1 = new StandardPieToolTipGenerator("{0} {1}", new DecimalFormat("#,##0.00"), NumberFormat.getPercentInstance()); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2 = new StandardPieToolTipGenerator("{0} {1}", new DecimalFormat("#,##0.00"), NumberFormat.getPercentInstance()); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1 = new StandardPieToolTipGenerator("{0} {1}", new DecimalFormat("#,##0"), NumberFormat.getPercentInstance()); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2 = new StandardPieToolTipGenerator("{0} {1}", new DecimalFormat("#,##0"), NumberFormat.getPercentInstance()); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1 = new StandardPieToolTipGenerator("{0} {1}", new DecimalFormat("#,##0"), new DecimalFormat("0.000%")); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2 = new StandardPieToolTipGenerator("{0} {1}", new DecimalFormat("#,##0"), new DecimalFormat("0.000%")); [EOL]     assertTrue(g1.equals(g2)); [EOL] } <line_num>: 92,129
public void testHashCode() { [EOL]     StandardPieToolTipGenerator g1 = new StandardPieToolTipGenerator(); [EOL]     StandardPieToolTipGenerator g2 = new StandardPieToolTipGenerator(); [EOL]     assertTrue(g1.equals(g2)); [EOL]     assertTrue(g1.hashCode() == g2.hashCode()); [EOL] } <line_num>: 134,141
public void testCloning() { [EOL]     StandardPieToolTipGenerator g1 = new StandardPieToolTipGenerator(); [EOL]     StandardPieToolTipGenerator g2 = null; [EOL]     try { [EOL]         g2 = (StandardPieToolTipGenerator) g1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(g1 != g2); [EOL]     assertTrue(g1.getClass() == g2.getClass()); [EOL]     assertTrue(g1.equals(g2)); [EOL]     assertTrue(g1.getNumberFormat() != g2.getNumberFormat()); [EOL]     assertTrue(g1.getPercentFormat() != g2.getPercentFormat()); [EOL] } <line_num>: 146,160
public void testPublicCloneable() { [EOL]     StandardPieToolTipGenerator g1 = new StandardPieToolTipGenerator(); [EOL]     assertTrue(g1 instanceof PublicCloneable); [EOL] } <line_num>: 165,168
public void testSerialization() { [EOL]     StandardPieToolTipGenerator g1 = new StandardPieToolTipGenerator(); [EOL]     StandardPieToolTipGenerator g2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(g1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         g2 = (StandardPieToolTipGenerator) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(g1, g2); [EOL] } <line_num>: 173,194
