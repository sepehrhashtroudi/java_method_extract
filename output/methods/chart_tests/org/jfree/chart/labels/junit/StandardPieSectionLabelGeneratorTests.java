public StandardPieSectionLabelGeneratorTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 83,85
public static Test suite() { [EOL]     return new TestSuite(StandardPieSectionLabelGeneratorTests.class); [EOL] } <line_num>: 74,76
public void testEquals() { [EOL]     StandardPieSectionLabelGenerator g1 = new StandardPieSectionLabelGenerator(); [EOL]     StandardPieSectionLabelGenerator g2 = new StandardPieSectionLabelGenerator(); [EOL]     assertTrue(g1.equals(g2)); [EOL]     assertTrue(g2.equals(g1)); [EOL]     g1 = new StandardPieSectionLabelGenerator("{0}", new DecimalFormat("#,##0.00"), NumberFormat.getPercentInstance()); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2 = new StandardPieSectionLabelGenerator("{0}", new DecimalFormat("#,##0.00"), NumberFormat.getPercentInstance()); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1 = new StandardPieSectionLabelGenerator("{0} {1}", new DecimalFormat("#,##0.00"), NumberFormat.getPercentInstance()); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2 = new StandardPieSectionLabelGenerator("{0} {1}", new DecimalFormat("#,##0.00"), NumberFormat.getPercentInstance()); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1 = new StandardPieSectionLabelGenerator("{0} {1}", new DecimalFormat("#,##0"), NumberFormat.getPercentInstance()); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2 = new StandardPieSectionLabelGenerator("{0} {1}", new DecimalFormat("#,##0"), NumberFormat.getPercentInstance()); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1 = new StandardPieSectionLabelGenerator("{0} {1}", new DecimalFormat("#,##0"), new DecimalFormat("0.000%")); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2 = new StandardPieSectionLabelGenerator("{0} {1}", new DecimalFormat("#,##0"), new DecimalFormat("0.000%")); [EOL]     assertTrue(g1.equals(g2)); [EOL]     AttributedString as = new AttributedString("XYZ"); [EOL]     g1.setAttributedLabel(0, as); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2.setAttributedLabel(0, as); [EOL]     assertTrue(g1.equals(g2)); [EOL] } <line_num>: 90,135
public void testHashCode() { [EOL]     StandardPieSectionLabelGenerator g1 = new StandardPieSectionLabelGenerator(); [EOL]     StandardPieSectionLabelGenerator g2 = new StandardPieSectionLabelGenerator(); [EOL]     assertTrue(g1.equals(g2)); [EOL]     assertTrue(g1.hashCode() == g2.hashCode()); [EOL] } <line_num>: 140,147
public void testCloning() { [EOL]     StandardPieSectionLabelGenerator g1 = new StandardPieSectionLabelGenerator(); [EOL]     StandardPieSectionLabelGenerator g2 = null; [EOL]     try { [EOL]         g2 = (StandardPieSectionLabelGenerator) g1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(g1 != g2); [EOL]     assertTrue(g1.getClass() == g2.getClass()); [EOL]     assertTrue(g1.equals(g2)); [EOL] } <line_num>: 152,165
public void testPublicCloneable() { [EOL]     StandardPieSectionLabelGenerator g1 = new StandardPieSectionLabelGenerator(); [EOL]     assertTrue(g1 instanceof PublicCloneable); [EOL] } <line_num>: 170,174
public void testSerialization() { [EOL]     StandardPieSectionLabelGenerator g1 = new StandardPieSectionLabelGenerator(); [EOL]     StandardPieSectionLabelGenerator g2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(g1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         g2 = (StandardPieSectionLabelGenerator) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(g1, g2); [EOL] } <line_num>: 179,201
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 208,210
