public StandardCategorySeriesLabelGeneratorTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 78,80
public static Test suite() { [EOL]     return new TestSuite(StandardCategorySeriesLabelGeneratorTests.class); [EOL] } <line_num>: 69,71
public void testGenerateLabel() { [EOL]     StandardCategorySeriesLabelGenerator g = new StandardCategorySeriesLabelGenerator("{0}"); [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     dataset.addValue(1.0, "R0", "C0"); [EOL]     dataset.addValue(2.0, "R0", "C1"); [EOL]     dataset.addValue(3.0, "R1", "C0"); [EOL]     dataset.addValue(null, "R1", "C1"); [EOL]     String s = g.generateLabel(dataset, 0); [EOL]     assertEquals("R0", s); [EOL] } <line_num>: 85,95
public void testEquals() { [EOL]     StandardCategorySeriesLabelGenerator g1 = new StandardCategorySeriesLabelGenerator(); [EOL]     StandardCategorySeriesLabelGenerator g2 = new StandardCategorySeriesLabelGenerator(); [EOL]     assertTrue(g1.equals(g2)); [EOL]     assertTrue(g2.equals(g1)); [EOL]     g1 = new StandardCategorySeriesLabelGenerator("{1}"); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2 = new StandardCategorySeriesLabelGenerator("{1}"); [EOL]     assertTrue(g1.equals(g2)); [EOL] } <line_num>: 100,112
public void testHashCode() { [EOL]     StandardCategorySeriesLabelGenerator g1 = new StandardCategorySeriesLabelGenerator(); [EOL]     StandardCategorySeriesLabelGenerator g2 = new StandardCategorySeriesLabelGenerator(); [EOL]     assertTrue(g1.equals(g2)); [EOL]     assertTrue(g1.hashCode() == g2.hashCode()); [EOL] } <line_num>: 117,124
public void testCloning() { [EOL]     StandardCategorySeriesLabelGenerator g1 = new StandardCategorySeriesLabelGenerator("{1}"); [EOL]     StandardCategorySeriesLabelGenerator g2 = null; [EOL]     try { [EOL]         g2 = (StandardCategorySeriesLabelGenerator) g1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(g1 != g2); [EOL]     assertTrue(g1.getClass() == g2.getClass()); [EOL]     assertTrue(g1.equals(g2)); [EOL] } <line_num>: 129,142
public void testPublicCloneable() { [EOL]     StandardCategorySeriesLabelGenerator g1 = new StandardCategorySeriesLabelGenerator("{1}"); [EOL]     assertTrue(g1 instanceof PublicCloneable); [EOL] } <line_num>: 147,151
public void testSerialization() { [EOL]     StandardCategorySeriesLabelGenerator g1 = new StandardCategorySeriesLabelGenerator("{2}"); [EOL]     StandardCategorySeriesLabelGenerator g2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(g1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         g2 = (StandardCategorySeriesLabelGenerator) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(g1, g2); [EOL] } <line_num>: 156,176
