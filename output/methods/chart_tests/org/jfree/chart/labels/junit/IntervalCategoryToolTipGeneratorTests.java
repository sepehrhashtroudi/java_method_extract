public IntervalCategoryToolTipGeneratorTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 82,84
public static Test suite() { [EOL]     return new TestSuite(IntervalCategoryToolTipGeneratorTests.class); [EOL] } <line_num>: 73,75
public void testEquals() { [EOL]     IntervalCategoryToolTipGenerator g1 = new IntervalCategoryToolTipGenerator(); [EOL]     IntervalCategoryToolTipGenerator g2 = new IntervalCategoryToolTipGenerator(); [EOL]     assertTrue(g1.equals(g2)); [EOL]     assertTrue(g2.equals(g1)); [EOL]     g1 = new IntervalCategoryToolTipGenerator("{3} - {4}", new DecimalFormat("0.000")); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2 = new IntervalCategoryToolTipGenerator("{3} - {4}", new DecimalFormat("0.000")); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1 = new IntervalCategoryToolTipGenerator("{3} - {4}", new SimpleDateFormat("d-MMM")); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2 = new IntervalCategoryToolTipGenerator("{3} - {4}", new SimpleDateFormat("d-MMM")); [EOL]     assertTrue(g1.equals(g2)); [EOL] } <line_num>: 89,110
public void testEquals2() { [EOL]     IntervalCategoryToolTipGenerator g1 = new IntervalCategoryToolTipGenerator(); [EOL]     StandardCategoryToolTipGenerator g2 = new StandardCategoryToolTipGenerator(IntervalCategoryToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT_STRING, NumberFormat.getInstance()); [EOL]     assertFalse(g1.equals(g2)); [EOL] } <line_num>: 115,123
public void testHashCode() { [EOL]     IntervalCategoryToolTipGenerator g1 = new IntervalCategoryToolTipGenerator(); [EOL]     IntervalCategoryToolTipGenerator g2 = new IntervalCategoryToolTipGenerator(); [EOL]     assertTrue(g1.equals(g2)); [EOL]     assertTrue(g1.hashCode() == g2.hashCode()); [EOL] } <line_num>: 128,135
public void testCloning() { [EOL]     IntervalCategoryToolTipGenerator g1 = new IntervalCategoryToolTipGenerator(); [EOL]     IntervalCategoryToolTipGenerator g2 = null; [EOL]     try { [EOL]         g2 = (IntervalCategoryToolTipGenerator) g1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(g1 != g2); [EOL]     assertTrue(g1.getClass() == g2.getClass()); [EOL]     assertTrue(g1.equals(g2)); [EOL] } <line_num>: 140,153
public void testPublicCloneable() { [EOL]     IntervalCategoryToolTipGenerator g1 = new IntervalCategoryToolTipGenerator(); [EOL]     assertTrue(g1 instanceof PublicCloneable); [EOL] } <line_num>: 158,162
public void testSerialization() { [EOL]     IntervalCategoryToolTipGenerator g1 = new IntervalCategoryToolTipGenerator("{3} - {4}", DateFormat.getInstance()); [EOL]     IntervalCategoryToolTipGenerator g2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(g1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         g2 = (IntervalCategoryToolTipGenerator) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(g1, g2); [EOL] } <line_num>: 167,187
