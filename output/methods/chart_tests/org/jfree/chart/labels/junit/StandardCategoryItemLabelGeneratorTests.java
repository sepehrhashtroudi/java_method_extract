public StandardCategoryItemLabelGeneratorTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 84,86
public static Test suite() { [EOL]     return new TestSuite(StandardCategoryItemLabelGeneratorTests.class); [EOL] } <line_num>: 75,77
public void testGenerateLabel() { [EOL]     StandardCategoryItemLabelGenerator g = new StandardCategoryItemLabelGenerator("{2}", new DecimalFormat("0.000")); [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     dataset.addValue(1.0, "R0", "C0"); [EOL]     dataset.addValue(2.0, "R0", "C1"); [EOL]     dataset.addValue(3.0, "R1", "C0"); [EOL]     dataset.addValue(null, "R1", "C1"); [EOL]     String s = g.generateLabel(dataset, 0, 0); [EOL]     assertTrue(s.startsWith("1")); [EOL]     assertTrue(s.endsWith("000")); [EOL]     s = g.generateLabel(dataset, 1, 1); [EOL]     assertEquals("-", s); [EOL] } <line_num>: 91,107
public void testEquals() { [EOL]     StandardCategoryItemLabelGenerator g1 = new StandardCategoryItemLabelGenerator(); [EOL]     StandardCategoryItemLabelGenerator g2 = new StandardCategoryItemLabelGenerator(); [EOL]     assertTrue(g1.equals(g2)); [EOL]     assertTrue(g2.equals(g1)); [EOL]     g1 = new StandardCategoryItemLabelGenerator("{0}", new DecimalFormat("0.000")); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2 = new StandardCategoryItemLabelGenerator("{0}", new DecimalFormat("0.000")); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1 = new StandardCategoryItemLabelGenerator("{1}", new DecimalFormat("0.000")); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2 = new StandardCategoryItemLabelGenerator("{1}", new DecimalFormat("0.000")); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1 = new StandardCategoryItemLabelGenerator("{2}", new SimpleDateFormat("d-MMM")); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2 = new StandardCategoryItemLabelGenerator("{2}", new SimpleDateFormat("d-MMM")); [EOL]     assertTrue(g1.equals(g2)); [EOL] } <line_num>: 112,142
public void testHashCode() { [EOL]     StandardCategoryItemLabelGenerator g1 = new StandardCategoryItemLabelGenerator(); [EOL]     StandardCategoryItemLabelGenerator g2 = new StandardCategoryItemLabelGenerator(); [EOL]     assertTrue(g1.equals(g2)); [EOL]     assertTrue(g1.hashCode() == g2.hashCode()); [EOL] } <line_num>: 147,154
public void testCloning() { [EOL]     StandardCategoryItemLabelGenerator g1 = new StandardCategoryItemLabelGenerator(); [EOL]     StandardCategoryItemLabelGenerator g2 = null; [EOL]     try { [EOL]         g2 = (StandardCategoryItemLabelGenerator) g1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(g1 != g2); [EOL]     assertTrue(g1.getClass() == g2.getClass()); [EOL]     assertTrue(g1.equals(g2)); [EOL] } <line_num>: 159,172
public void testPublicCloneable() { [EOL]     StandardCategoryItemLabelGenerator g1 = new StandardCategoryItemLabelGenerator(); [EOL]     assertTrue(g1 instanceof PublicCloneable); [EOL] } <line_num>: 177,181
public void testSerialization() { [EOL]     StandardCategoryItemLabelGenerator g1 = new StandardCategoryItemLabelGenerator("{2}", DateFormat.getInstance()); [EOL]     StandardCategoryItemLabelGenerator g2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(g1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         g2 = (StandardCategoryItemLabelGenerator) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(g1, g2); [EOL] } <line_num>: 186,209
public void testEquals1481087() { [EOL]     StandardCategoryItemLabelGenerator g1 = new StandardCategoryItemLabelGenerator("{0}", new DecimalFormat("0.00")); [EOL]     StandardCategoryToolTipGenerator g2 = new StandardCategoryToolTipGenerator("{0}", new DecimalFormat("0.00")); [EOL]     assertFalse(g1.equals(g2)); [EOL] } <line_num>: 214,222
