public ScatterRendererTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 78,80
public static Test suite() { [EOL]     return new TestSuite(ScatterRendererTests.class); [EOL] } <line_num>: 69,71
public void testEquals() { [EOL]     ScatterRenderer r1 = new ScatterRenderer(); [EOL]     ScatterRenderer r2 = new ScatterRenderer(); [EOL]     assertEquals(r1, r2); [EOL]     r1.setSeriesShapesFilled(1, true); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesShapesFilled(1, true); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBaseShapesFilled(false); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseShapesFilled(false); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setUseFillPaint(true); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setUseFillPaint(true); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setDrawOutlines(true); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setDrawOutlines(true); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setUseOutlinePaint(true); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setUseOutlinePaint(true); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setUseSeriesOffset(false); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setUseSeriesOffset(false); [EOL]     assertTrue(r1.equals(r2)); [EOL] } <line_num>: 85,121
public void testHashcode() { [EOL]     ScatterRenderer r1 = new ScatterRenderer(); [EOL]     ScatterRenderer r2 = new ScatterRenderer(); [EOL]     assertTrue(r1.equals(r2)); [EOL]     int h1 = r1.hashCode(); [EOL]     int h2 = r2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 126,133
public void testCloning() { [EOL]     ScatterRenderer r1 = new ScatterRenderer(); [EOL]     ScatterRenderer r2 = null; [EOL]     try { [EOL]         r2 = (ScatterRenderer) r1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(r1 != r2); [EOL]     assertTrue(r1.getClass() == r2.getClass()); [EOL]     assertTrue(r1.equals(r2)); [EOL]     assertTrue(checkIndependence(r1, r2)); [EOL] } <line_num>: 138,152
public void testPublicCloneable() { [EOL]     ScatterRenderer r1 = new ScatterRenderer(); [EOL]     assertTrue(r1 instanceof PublicCloneable); [EOL] } <line_num>: 157,160
private boolean checkIndependence(ScatterRenderer r1, ScatterRenderer r2) { [EOL]     if (!r1.equals(r2)) { [EOL]         return false; [EOL]     } [EOL]     r1.setSeriesShapesFilled(1, true); [EOL]     if (r1.equals(r2)) { [EOL]         return false; [EOL]     } [EOL]     r2.setSeriesShapesFilled(1, true); [EOL]     if (!r1.equals(r2)) { [EOL]         return false; [EOL]     } [EOL]     r1.setBaseShapesFilled(false); [EOL]     r2.setBaseShapesFilled(true); [EOL]     if (r1.equals(r2)) { [EOL]         return false; [EOL]     } [EOL]     r2.setBaseShapesFilled(false); [EOL]     if (!r1.equals(r2)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 170,199
public void testSerialization() { [EOL]     ScatterRenderer r1 = new ScatterRenderer(); [EOL]     ScatterRenderer r2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(r1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         r2 = (ScatterRenderer) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(r1, r2); [EOL] } <line_num>: 204,225
