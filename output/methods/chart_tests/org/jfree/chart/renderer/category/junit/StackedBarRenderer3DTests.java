public StackedBarRenderer3DTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 95,97
public List createStackedValueList(CategoryDataset dataset, Comparable category, int[] includedRows, double base, boolean asPercentages) { [EOL]     return super.createStackedValueList(dataset, category, includedRows, base, asPercentages); [EOL] } <line_num>: 73,78
public static Test suite() { [EOL]     return new TestSuite(StackedBarRenderer3DTests.class); [EOL] } <line_num>: 86,88
public void testFindRangeBounds() { [EOL]     StackedBarRenderer3D r = new StackedBarRenderer3D(); [EOL]     assertNull(r.findRangeBounds(null)); [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     assertNull(r.findRangeBounds(dataset)); [EOL]     dataset.addValue(1.0, "R1", "C1"); [EOL]     assertEquals(new Range(0.0, 1.0), r.findRangeBounds(dataset)); [EOL]     dataset.addValue(-2.0, "R1", "C2"); [EOL]     assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset)); [EOL]     dataset.addValue(null, "R1", "C3"); [EOL]     assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset)); [EOL]     dataset.addValue(2.0, "R2", "C1"); [EOL]     assertEquals(new Range(-2.0, 3.0), r.findRangeBounds(dataset)); [EOL]     dataset.addValue(null, "R2", "C2"); [EOL]     assertEquals(new Range(-2.0, 3.0), r.findRangeBounds(dataset)); [EOL] } <line_num>: 102,124
public void testEquals() { [EOL]     StackedBarRenderer3D r1 = new StackedBarRenderer3D(); [EOL]     StackedBarRenderer3D r2 = new StackedBarRenderer3D(); [EOL]     assertEquals(r1, r2); [EOL] } <line_num>: 129,133
public void testHashcode() { [EOL]     StackedBarRenderer3D r1 = new StackedBarRenderer3D(); [EOL]     StackedBarRenderer3D r2 = new StackedBarRenderer3D(); [EOL]     assertTrue(r1.equals(r2)); [EOL]     int h1 = r1.hashCode(); [EOL]     int h2 = r2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 138,145
public void testCloning() { [EOL]     StackedBarRenderer3D r1 = new StackedBarRenderer3D(); [EOL]     StackedBarRenderer3D r2 = null; [EOL]     try { [EOL]         r2 = (StackedBarRenderer3D) r1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(r1 != r2); [EOL]     assertTrue(r1.getClass() == r2.getClass()); [EOL]     assertTrue(r1.equals(r2)); [EOL] } <line_num>: 150,162
public void testPublicCloneable() { [EOL]     StackedBarRenderer3D r1 = new StackedBarRenderer3D(); [EOL]     assertTrue(r1 instanceof PublicCloneable); [EOL] } <line_num>: 167,170
public void testSerialization() { [EOL]     StackedBarRenderer3D r1 = new StackedBarRenderer3D(); [EOL]     StackedBarRenderer3D r2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(r1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         r2 = (StackedBarRenderer3D) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(r1, r2); [EOL] } <line_num>: 175,196
public void testCreateStackedValueList1() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     d.addValue(1.0, "s0", "c0"); [EOL]     MyRenderer r = new MyRenderer(); [EOL]     List l = r.createStackedValueList(d, "c0", new int[] { 0 }, 0.0, false); [EOL]     assertEquals(2, l.size()); [EOL]     assertEquals(new Double(0.0), ((Object[]) l.get(0))[1]); [EOL]     assertEquals(new Double(1.0), ((Object[]) l.get(1))[1]); [EOL] } <line_num>: 201,209
public void testCreateStackedValueList2() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     d.addValue(-1.0, "s0", "c0"); [EOL]     MyRenderer r = new MyRenderer(); [EOL]     List l = r.createStackedValueList(d, "c0", new int[] { 0 }, 0.0, false); [EOL]     assertEquals(2, l.size()); [EOL]     assertEquals(new Double(-1.0), ((Object[]) l.get(0))[1]); [EOL]     assertEquals(new Double(0.0), ((Object[]) l.get(1))[1]); [EOL] } <line_num>: 214,222
public void testCreateStackedValueList3() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     d.addValue(0.0, "s0", "c0"); [EOL]     MyRenderer r = new MyRenderer(); [EOL]     List l = r.createStackedValueList(d, "c0", new int[] { 0 }, 0.0, false); [EOL]     assertEquals(2, l.size()); [EOL]     assertEquals(new Double(0.0), ((Object[]) l.get(0))[1]); [EOL]     assertEquals(new Double(0.0), ((Object[]) l.get(1))[1]); [EOL] } <line_num>: 227,235
public void testCreateStackedValueList4() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     d.addValue(null, "s0", "c0"); [EOL]     MyRenderer r = new MyRenderer(); [EOL]     List l = r.createStackedValueList(d, "c0", new int[] { 0 }, 0.0, false); [EOL]     assertEquals(0, l.size()); [EOL] } <line_num>: 240,246
public void testCreateStackedValueList1a() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     d.addValue(1.0, "s0", "c0"); [EOL]     d.addValue(1.1, "s1", "c0"); [EOL]     MyRenderer r = new MyRenderer(); [EOL]     List l = r.createStackedValueList(d, "c0", new int[] { 0, 1 }, 0.0, false); [EOL]     assertEquals(3, l.size()); [EOL]     assertEquals(new Double(0.0), ((Object[]) l.get(0))[1]); [EOL]     assertEquals(new Double(1.0), ((Object[]) l.get(1))[1]); [EOL]     assertEquals(new Double(2.1), ((Object[]) l.get(2))[1]); [EOL] } <line_num>: 251,262
public void testCreateStackedValueList1b() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     d.addValue(1.0, "s0", "c0"); [EOL]     d.addValue(-1.1, "s1", "c0"); [EOL]     MyRenderer r = new MyRenderer(); [EOL]     List l = r.createStackedValueList(d, "c0", new int[] { 0, 1 }, 0.0, false); [EOL]     assertEquals(3, l.size()); [EOL]     assertEquals(new Double(-1.1), ((Object[]) l.get(0))[1]); [EOL]     assertEquals(new Double(0.0), ((Object[]) l.get(1))[1]); [EOL]     assertEquals(new Double(1.0), ((Object[]) l.get(2))[1]); [EOL] } <line_num>: 267,278
public void testCreateStackedValueList1c() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     d.addValue(1.0, "s0", "c0"); [EOL]     d.addValue(0.0, "s1", "c0"); [EOL]     MyRenderer r = new MyRenderer(); [EOL]     List l = r.createStackedValueList(d, "c0", new int[] { 0, 1 }, 0.0, false); [EOL]     assertEquals(3, l.size()); [EOL]     assertEquals(new Double(0.0), ((Object[]) l.get(0))[1]); [EOL]     assertEquals(new Double(1.0), ((Object[]) l.get(1))[1]); [EOL]     assertEquals(new Double(1.0), ((Object[]) l.get(2))[1]); [EOL] } <line_num>: 283,294
public void testCreateStackedValueList1d() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     d.addValue(1.0, "s0", "c0"); [EOL]     d.addValue(null, "s1", "c0"); [EOL]     MyRenderer r = new MyRenderer(); [EOL]     List l = r.createStackedValueList(d, "c0", new int[] { 0, 1 }, 0.0, false); [EOL]     assertEquals(2, l.size()); [EOL]     assertEquals(new Double(0.0), ((Object[]) l.get(0))[1]); [EOL]     assertEquals(new Double(1.0), ((Object[]) l.get(1))[1]); [EOL] } <line_num>: 299,309
public void testCreateStackedValueList2a() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     d.addValue(-1.0, "s0", "c0"); [EOL]     d.addValue(1.1, "s1", "c0"); [EOL]     MyRenderer r = new MyRenderer(); [EOL]     List l = r.createStackedValueList(d, "c0", new int[] { 0, 1 }, 0.0, false); [EOL]     assertEquals(3, l.size()); [EOL]     assertEquals(new Double(-1.0), ((Object[]) l.get(0))[1]); [EOL]     assertEquals(new Double(0.0), ((Object[]) l.get(1))[1]); [EOL]     assertEquals(new Double(1.1), ((Object[]) l.get(2))[1]); [EOL] } <line_num>: 314,325
public void testCreateStackedValueList2b() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     d.addValue(-1.0, "s0", "c0"); [EOL]     d.addValue(-1.1, "s1", "c0"); [EOL]     MyRenderer r = new MyRenderer(); [EOL]     List l = r.createStackedValueList(d, "c0", new int[] { 0, 1 }, 0.0, false); [EOL]     assertEquals(3, l.size()); [EOL]     assertEquals(new Double(-2.1), ((Object[]) l.get(0))[1]); [EOL]     assertEquals(new Double(-1.0), ((Object[]) l.get(1))[1]); [EOL]     assertEquals(new Double(0.0), ((Object[]) l.get(2))[1]); [EOL] } <line_num>: 330,341
public void testCreateStackedValueList2c() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     d.addValue(-1.0, "s0", "c0"); [EOL]     d.addValue(0.0, "s1", "c0"); [EOL]     MyRenderer r = new MyRenderer(); [EOL]     List l = r.createStackedValueList(d, "c0", new int[] { 0, 1 }, 0.0, false); [EOL]     assertEquals(3, l.size()); [EOL]     assertEquals(new Double(-1.0), ((Object[]) l.get(0))[1]); [EOL]     assertEquals(new Double(0.0), ((Object[]) l.get(1))[1]); [EOL]     assertEquals(new Double(0.0), ((Object[]) l.get(2))[1]); [EOL] } <line_num>: 346,357
public void testCreateStackedValueList2d() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     d.addValue(-1.0, "s0", "c0"); [EOL]     d.addValue(null, "s1", "c0"); [EOL]     MyRenderer r = new MyRenderer(); [EOL]     List l = r.createStackedValueList(d, "c0", new int[] { 0, 1 }, 0.0, false); [EOL]     assertEquals(2, l.size()); [EOL]     assertEquals(new Double(-1.0), ((Object[]) l.get(0))[1]); [EOL]     assertEquals(new Double(0.0), ((Object[]) l.get(1))[1]); [EOL] } <line_num>: 362,372
public void testCreateStackedValueList3a() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     d.addValue(0.0, "s0", "c0"); [EOL]     d.addValue(1.1, "s1", "c0"); [EOL]     MyRenderer r = new MyRenderer(); [EOL]     List l = r.createStackedValueList(d, "c0", new int[] { 0, 1 }, 0.0, false); [EOL]     assertEquals(3, l.size()); [EOL]     assertEquals(new Double(0.0), ((Object[]) l.get(0))[1]); [EOL]     assertEquals(new Double(0.0), ((Object[]) l.get(1))[1]); [EOL]     assertEquals(new Double(1.1), ((Object[]) l.get(2))[1]); [EOL] } <line_num>: 377,388
public void testCreateStackedValueList3b() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     d.addValue(0.0, "s0", "c0"); [EOL]     d.addValue(-1.1, "s1", "c0"); [EOL]     MyRenderer r = new MyRenderer(); [EOL]     List l = r.createStackedValueList(d, "c0", new int[] { 0, 1 }, 0.0, false); [EOL]     assertEquals(3, l.size()); [EOL]     assertEquals(new Double(-1.1), ((Object[]) l.get(0))[1]); [EOL]     assertEquals(new Double(0.0), ((Object[]) l.get(1))[1]); [EOL]     assertEquals(new Double(0.0), ((Object[]) l.get(2))[1]); [EOL] } <line_num>: 393,404
public void testCreateStackedValueList3c() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     d.addValue(0.0, "s0", "c0"); [EOL]     d.addValue(0.0, "s1", "c0"); [EOL]     MyRenderer r = new MyRenderer(); [EOL]     List l = r.createStackedValueList(d, "c0", new int[] { 0, 1 }, 0.0, false); [EOL]     assertEquals(3, l.size()); [EOL]     assertEquals(new Double(0.0), ((Object[]) l.get(0))[1]); [EOL]     assertEquals(new Double(0.0), ((Object[]) l.get(1))[1]); [EOL]     assertEquals(new Double(0.0), ((Object[]) l.get(2))[1]); [EOL] } <line_num>: 409,420
public void testCreateStackedValueList3d() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     d.addValue(0.0, "s0", "c0"); [EOL]     d.addValue(null, "s1", "c0"); [EOL]     MyRenderer r = new MyRenderer(); [EOL]     List l = r.createStackedValueList(d, "c0", new int[] { 0, 1 }, 0.0, false); [EOL]     assertEquals(2, l.size()); [EOL]     assertEquals(new Double(0.0), ((Object[]) l.get(0))[1]); [EOL]     assertEquals(new Double(0.0), ((Object[]) l.get(1))[1]); [EOL] } <line_num>: 425,435
public void testCreateStackedValueList5() { [EOL]     DefaultCategoryDataset d = new DefaultCategoryDataset(); [EOL]     d.addValue(1.0, "s0", "c0"); [EOL]     d.addValue(null, "s1", "c0"); [EOL]     d.addValue(2.0, "s2", "c0"); [EOL]     MyRenderer r = new MyRenderer(); [EOL]     List l = r.createStackedValueList(d, "c0", new int[] { 0, 1, 2 }, 0.0, false); [EOL]     assertEquals(3, l.size()); [EOL]     assertEquals(new Double(0.0), ((Object[]) l.get(0))[1]); [EOL]     assertEquals(new Double(1.0), ((Object[]) l.get(1))[1]); [EOL]     assertEquals(new Double(3.0), ((Object[]) l.get(2))[1]); [EOL] } <line_num>: 440,452
