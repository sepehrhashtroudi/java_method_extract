public AreaRendererTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 87,89
public static Test suite() { [EOL]     return new TestSuite(AreaRendererTests.class); [EOL] } <line_num>: 78,80
public void testEquals() { [EOL]     AreaRenderer r1 = new AreaRenderer(); [EOL]     AreaRenderer r2 = new AreaRenderer(); [EOL]     assertEquals(r1, r2); [EOL]     r1.setEndType(AreaRendererEndType.LEVEL); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setEndType(AreaRendererEndType.LEVEL); [EOL]     assertTrue(r1.equals(r2)); [EOL] } <line_num>: 94,103
public void testHashcode() { [EOL]     AreaRenderer r1 = new AreaRenderer(); [EOL]     AreaRenderer r2 = new AreaRenderer(); [EOL]     assertTrue(r1.equals(r2)); [EOL]     int h1 = r1.hashCode(); [EOL]     int h2 = r2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 108,115
public void testCloning() { [EOL]     AreaRenderer r1 = new AreaRenderer(); [EOL]     AreaRenderer r2 = null; [EOL]     try { [EOL]         r2 = (AreaRenderer) r1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(r1 != r2); [EOL]     assertTrue(r1.getClass() == r2.getClass()); [EOL]     assertTrue(r1.equals(r2)); [EOL] } <line_num>: 120,132
public void testPublicCloneable() { [EOL]     AreaRenderer r1 = new AreaRenderer(); [EOL]     assertTrue(r1 instanceof PublicCloneable); [EOL] } <line_num>: 137,140
public void testSerialization() { [EOL]     AreaRenderer r1 = new AreaRenderer(); [EOL]     AreaRenderer r2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(r1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         r2 = (AreaRenderer) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(r1, r2); [EOL] } <line_num>: 145,163
public void testGetLegendItemSeriesIndex() { [EOL]     DefaultCategoryDataset dataset0 = new DefaultCategoryDataset(); [EOL]     dataset0.addValue(21.0, "R1", "C1"); [EOL]     dataset0.addValue(22.0, "R2", "C1"); [EOL]     DefaultCategoryDataset dataset1 = new DefaultCategoryDataset(); [EOL]     dataset1.addValue(23.0, "R3", "C1"); [EOL]     dataset1.addValue(24.0, "R4", "C1"); [EOL]     dataset1.addValue(25.0, "R5", "C1"); [EOL]     AreaRenderer r = new AreaRenderer(); [EOL]     CategoryPlot plot = new CategoryPlot(dataset0, new CategoryAxis("x"), new NumberAxis("y"), r); [EOL]     plot.setDataset(1, dataset1); [EOL]     new JFreeChart(plot); [EOL]     LegendItem li = r.getLegendItem(1, 2); [EOL]     assertEquals("R5", li.getLabel()); [EOL]     assertEquals(1, li.getDatasetIndex()); [EOL]     assertEquals(2, li.getSeriesIndex()); [EOL] } <line_num>: 169,186
