public GroupedStackedBarRendererTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 84,86
public static Test suite() { [EOL]     return new TestSuite(GroupedStackedBarRendererTests.class); [EOL] } <line_num>: 75,77
public void testEquals() { [EOL]     GroupedStackedBarRenderer r1 = new GroupedStackedBarRenderer(); [EOL]     GroupedStackedBarRenderer r2 = new GroupedStackedBarRenderer(); [EOL]     assertTrue(r1.equals(r2)); [EOL]     assertTrue(r2.equals(r1)); [EOL]     KeyToGroupMap m1 = new KeyToGroupMap("G1"); [EOL]     m1.mapKeyToGroup("S1", "G2"); [EOL]     r1.setSeriesToGroupMap(m1); [EOL]     assertFalse(r1.equals(r2)); [EOL]     KeyToGroupMap m2 = new KeyToGroupMap("G1"); [EOL]     m2.mapKeyToGroup("S1", "G2"); [EOL]     r2.setSeriesToGroupMap(m2); [EOL]     assertTrue(r1.equals(r2)); [EOL] } <line_num>: 91,106
public void testCloning() { [EOL]     GroupedStackedBarRenderer r1 = new GroupedStackedBarRenderer(); [EOL]     GroupedStackedBarRenderer r2 = null; [EOL]     try { [EOL]         r2 = (GroupedStackedBarRenderer) r1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(r1 != r2); [EOL]     assertTrue(r1.getClass() == r2.getClass()); [EOL]     assertTrue(r1.equals(r2)); [EOL] } <line_num>: 111,123
public void testPublicCloneable() { [EOL]     GroupedStackedBarRenderer r1 = new GroupedStackedBarRenderer(); [EOL]     assertTrue(r1 instanceof PublicCloneable); [EOL] } <line_num>: 128,131
public void testSerialization() { [EOL]     GroupedStackedBarRenderer r1 = new GroupedStackedBarRenderer(); [EOL]     GroupedStackedBarRenderer r2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(r1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         r2 = (GroupedStackedBarRenderer) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(r1, r2); [EOL] } <line_num>: 136,156
public void testDrawWithNullInfo() { [EOL]     boolean success = false; [EOL]     try { [EOL]         DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]         dataset.addValue(1.0, "S1", "C1"); [EOL]         dataset.addValue(2.0, "S1", "C2"); [EOL]         dataset.addValue(3.0, "S2", "C1"); [EOL]         dataset.addValue(4.0, "S2", "C2"); [EOL]         GroupedStackedBarRenderer renderer = new GroupedStackedBarRenderer(); [EOL]         CategoryPlot plot = new CategoryPlot(dataset, new CategoryAxis("Category"), new NumberAxis("Value"), renderer); [EOL]         JFreeChart chart = new JFreeChart(plot); [EOL]         chart.createBufferedImage(300, 200, null); [EOL]         success = true; [EOL]     } catch (NullPointerException e) { [EOL]         e.printStackTrace(); [EOL]         success = false; [EOL]     } [EOL]     assertTrue(success); [EOL] } <line_num>: 162,185
public void testFindRangeBounds() { [EOL]     GroupedStackedBarRenderer r = new GroupedStackedBarRenderer(); [EOL]     assertNull(r.findRangeBounds(null)); [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     assertNull(r.findRangeBounds(dataset)); [EOL]     dataset.addValue(1.0, "R1", "C1"); [EOL]     assertEquals(new Range(0.0, 1.0), r.findRangeBounds(dataset)); [EOL]     dataset.addValue(-2.0, "R1", "C2"); [EOL]     assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset)); [EOL]     dataset.addValue(null, "R1", "C3"); [EOL]     assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset)); [EOL]     KeyToGroupMap m = new KeyToGroupMap("G1"); [EOL]     m.mapKeyToGroup("R1", "G1"); [EOL]     m.mapKeyToGroup("R2", "G1"); [EOL]     m.mapKeyToGroup("R3", "G2"); [EOL]     r.setSeriesToGroupMap(m); [EOL]     dataset.addValue(0.5, "R3", "C1"); [EOL]     assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset)); [EOL]     dataset.addValue(5.0, "R3", "C2"); [EOL]     assertEquals(new Range(-2.0, 5.0), r.findRangeBounds(dataset)); [EOL] } <line_num>: 190,218
