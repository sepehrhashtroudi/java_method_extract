public XYBubbleRendererTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 84,86
public static Test suite() { [EOL]     return new TestSuite(XYBubbleRendererTests.class); [EOL] } <line_num>: 75,77
public void testEquals() { [EOL]     XYBubbleRenderer r1 = new XYBubbleRenderer(); [EOL]     XYBubbleRenderer r2 = new XYBubbleRenderer(); [EOL]     assertEquals(r1, r2); [EOL]     r1 = new XYBubbleRenderer(XYBubbleRenderer.SCALE_ON_RANGE_AXIS); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2 = new XYBubbleRenderer(XYBubbleRenderer.SCALE_ON_RANGE_AXIS); [EOL]     assertTrue(r1.equals(r2)); [EOL] } <line_num>: 91,100
public void testHashcode() { [EOL]     XYBubbleRenderer r1 = new XYBubbleRenderer(); [EOL]     XYBubbleRenderer r2 = new XYBubbleRenderer(); [EOL]     assertTrue(r1.equals(r2)); [EOL]     int h1 = r1.hashCode(); [EOL]     int h2 = r2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 105,112
public void testCloning() { [EOL]     XYBubbleRenderer r1 = new XYBubbleRenderer(); [EOL]     XYBubbleRenderer r2 = null; [EOL]     try { [EOL]         r2 = (XYBubbleRenderer) r1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(r1 != r2); [EOL]     assertTrue(r1.getClass() == r2.getClass()); [EOL]     assertTrue(r1.equals(r2)); [EOL] } <line_num>: 117,129
public void testPublicCloneable() { [EOL]     XYBubbleRenderer r1 = new XYBubbleRenderer(); [EOL]     assertTrue(r1 instanceof PublicCloneable); [EOL] } <line_num>: 134,137
public void testSerialization() { [EOL]     XYBubbleRenderer r1 = new XYBubbleRenderer(); [EOL]     XYBubbleRenderer r2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(r1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         r2 = (XYBubbleRenderer) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(r1, r2); [EOL] } <line_num>: 142,161
public void testGetLegendItemSeriesIndex() { [EOL]     DefaultXYZDataset d1 = new DefaultXYZDataset(); [EOL]     double[] x = { 2.1, 2.3, 2.3, 2.2, 2.2, 1.8, 1.8, 1.9, 2.3, 3.8 }; [EOL]     double[] y = { 14.1, 11.1, 10.0, 8.8, 8.7, 8.4, 5.4, 4.1, 4.1, 25 }; [EOL]     double[] z = { 2.4, 2.7, 2.7, 2.2, 2.2, 2.2, 2.1, 2.2, 1.6, 4 }; [EOL]     double[][] s1 = new double[][] { x, y, z }; [EOL]     d1.addSeries("S1", s1); [EOL]     x = new double[] { 2.1 }; [EOL]     y = new double[] { 14.1 }; [EOL]     z = new double[] { 2.4 }; [EOL]     double[][] s2 = new double[][] { x, y, z }; [EOL]     d1.addSeries("S2", s2); [EOL]     DefaultXYZDataset d2 = new DefaultXYZDataset(); [EOL]     x = new double[] { 2.1 }; [EOL]     y = new double[] { 14.1 }; [EOL]     z = new double[] { 2.4 }; [EOL]     double[][] s3 = new double[][] { x, y, z }; [EOL]     d2.addSeries("S3", s3); [EOL]     x = new double[] { 2.1 }; [EOL]     y = new double[] { 14.1 }; [EOL]     z = new double[] { 2.4 }; [EOL]     double[][] s4 = new double[][] { x, y, z }; [EOL]     d2.addSeries("S4", s4); [EOL]     x = new double[] { 2.1 }; [EOL]     y = new double[] { 14.1 }; [EOL]     z = new double[] { 2.4 }; [EOL]     double[][] s5 = new double[][] { x, y, z }; [EOL]     d2.addSeries("S5", s5); [EOL]     XYBubbleRenderer r = new XYBubbleRenderer(); [EOL]     XYPlot plot = new XYPlot(d1, new NumberAxis("x"), new NumberAxis("y"), r); [EOL]     plot.setDataset(1, d2); [EOL]     new JFreeChart(plot); [EOL]     LegendItem li = r.getLegendItem(1, 2); [EOL]     assertEquals("S5", li.getLabel()); [EOL]     assertEquals(1, li.getDatasetIndex()); [EOL]     assertEquals(2, li.getSeriesIndex()); [EOL] } <line_num>: 167,206
