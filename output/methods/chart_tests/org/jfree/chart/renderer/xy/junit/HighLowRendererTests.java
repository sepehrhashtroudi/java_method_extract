public HighLowRendererTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 87,89
public static Test suite() { [EOL]     return new TestSuite(HighLowRendererTests.class); [EOL] } <line_num>: 78,80
public void testEquals() { [EOL]     HighLowRenderer r1 = new HighLowRenderer(); [EOL]     HighLowRenderer r2 = new HighLowRenderer(); [EOL]     assertEquals(r1, r2); [EOL]     r1.setDrawOpenTicks(false); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setDrawOpenTicks(false); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setDrawCloseTicks(false); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setDrawCloseTicks(false); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setOpenTickPaint(Color.red); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setOpenTickPaint(Color.red); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setCloseTickPaint(Color.blue); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setCloseTickPaint(Color.blue); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setTickLength(99.9); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setTickLength(99.9); [EOL]     assertTrue(r1.equals(r2)); [EOL] } <line_num>: 94,128
public void testHashcode() { [EOL]     HighLowRenderer r1 = new HighLowRenderer(); [EOL]     HighLowRenderer r2 = new HighLowRenderer(); [EOL]     assertTrue(r1.equals(r2)); [EOL]     int h1 = r1.hashCode(); [EOL]     int h2 = r2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 133,140
public void testCloning() { [EOL]     HighLowRenderer r1 = new HighLowRenderer(); [EOL]     r1.setCloseTickPaint(Color.green); [EOL]     HighLowRenderer r2 = null; [EOL]     try { [EOL]         r2 = (HighLowRenderer) r1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(r1 != r2); [EOL]     assertTrue(r1.getClass() == r2.getClass()); [EOL]     assertTrue(r1.equals(r2)); [EOL] } <line_num>: 145,158
public void testPublicCloneable() { [EOL]     HighLowRenderer r1 = new HighLowRenderer(); [EOL]     assertTrue(r1 instanceof PublicCloneable); [EOL] } <line_num>: 163,166
public void testSerialization() { [EOL]     HighLowRenderer r1 = new HighLowRenderer(); [EOL]     r1.setCloseTickPaint(Color.green); [EOL]     HighLowRenderer r2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(r1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         r2 = (HighLowRenderer) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(r1, r2); [EOL] } <line_num>: 171,193
public void testFindRangeBounds() { [EOL]     HighLowRenderer renderer = new HighLowRenderer(); [EOL]     OHLCDataItem item1 = new OHLCDataItem(new Date(1L), 2.0, 4.0, 1.0, 3.0, 100); [EOL]     OHLCDataset dataset = new DefaultOHLCDataset("S1", new OHLCDataItem[] { item1 }); [EOL]     Range range = renderer.findRangeBounds(dataset); [EOL]     assertEquals(new Range(1.0, 4.0), range); [EOL]     OHLCDataItem item2 = new OHLCDataItem(new Date(1L), -1.0, 3.0, -1.0, 3.0, 100); [EOL]     dataset = new DefaultOHLCDataset("S1", new OHLCDataItem[] { item1, item2 }); [EOL]     range = renderer.findRangeBounds(dataset); [EOL]     assertEquals(new Range(-1.0, 4.0), range); [EOL]     dataset = new DefaultOHLCDataset("S1", new OHLCDataItem[] {}); [EOL]     range = renderer.findRangeBounds(dataset); [EOL]     assertNull(range); [EOL]     range = renderer.findRangeBounds(null); [EOL]     assertNull(range); [EOL] } <line_num>: 198,223
