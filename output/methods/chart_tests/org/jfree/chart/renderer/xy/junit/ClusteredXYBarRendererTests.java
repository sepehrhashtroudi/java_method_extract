public ClusteredXYBarRendererTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 81,83
public static Test suite() { [EOL]     return new TestSuite(ClusteredXYBarRendererTests.class); [EOL] } <line_num>: 72,74
public void testEquals() { [EOL]     ClusteredXYBarRenderer r1 = new ClusteredXYBarRenderer(); [EOL]     ClusteredXYBarRenderer r2 = new ClusteredXYBarRenderer(); [EOL]     assertEquals(r1, r2); [EOL]     assertEquals(r2, r1); [EOL]     r1 = new ClusteredXYBarRenderer(1.2, false); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2 = new ClusteredXYBarRenderer(1.2, false); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1 = new ClusteredXYBarRenderer(1.2, true); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2 = new ClusteredXYBarRenderer(1.2, true); [EOL]     assertTrue(r1.equals(r2)); [EOL] } <line_num>: 88,103
public void testHashcode() { [EOL]     ClusteredXYBarRenderer r1 = new ClusteredXYBarRenderer(); [EOL]     ClusteredXYBarRenderer r2 = new ClusteredXYBarRenderer(); [EOL]     assertTrue(r1.equals(r2)); [EOL]     int h1 = r1.hashCode(); [EOL]     int h2 = r2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 108,115
public void testCloning() { [EOL]     ClusteredXYBarRenderer r1 = new ClusteredXYBarRenderer(); [EOL]     ClusteredXYBarRenderer r2 = null; [EOL]     try { [EOL]         r2 = (ClusteredXYBarRenderer) r1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(r1 != r2); [EOL]     assertTrue(r1.getClass() == r2.getClass()); [EOL]     assertTrue(r1.equals(r2)); [EOL] } <line_num>: 120,132
public void testPublicCloneable() { [EOL]     ClusteredXYBarRenderer r1 = new ClusteredXYBarRenderer(); [EOL]     assertTrue(r1 instanceof PublicCloneable); [EOL] } <line_num>: 137,140
public void testSerialization() { [EOL]     ClusteredXYBarRenderer r1 = new ClusteredXYBarRenderer(); [EOL]     ClusteredXYBarRenderer r2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(r1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         r2 = (ClusteredXYBarRenderer) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(r1, r2); [EOL] } <line_num>: 145,166
public void testFindDomainBounds() { [EOL]     AbstractXYItemRenderer renderer = new ClusteredXYBarRenderer(); [EOL]     XYDataset dataset = createSampleDataset1(); [EOL]     Range r = renderer.findDomainBounds(dataset); [EOL]     assertEquals(0.9, r.getLowerBound(), EPSILON); [EOL]     assertEquals(13.1, r.getUpperBound(), EPSILON); [EOL]     renderer = new ClusteredXYBarRenderer(0.0, true); [EOL]     r = renderer.findDomainBounds(dataset); [EOL]     assertEquals(0.8, r.getLowerBound(), EPSILON); [EOL]     assertEquals(13.0, r.getUpperBound(), EPSILON); [EOL]     assertTrue(renderer.findDomainBounds(null) == null); [EOL] } <line_num>: 174,188
public DefaultIntervalXYDataset createSampleDataset1() { [EOL]     DefaultIntervalXYDataset d = new DefaultIntervalXYDataset(); [EOL]     double[] x1 = new double[] { 1.0, 2.0, 3.0 }; [EOL]     double[] x1Start = new double[] { 0.9, 1.9, 2.9 }; [EOL]     double[] x1End = new double[] { 1.1, 2.1, 3.1 }; [EOL]     double[] y1 = new double[] { 4.0, 5.0, 6.0 }; [EOL]     double[] y1Start = new double[] { 1.09, 2.09, 3.09 }; [EOL]     double[] y1End = new double[] { 1.11, 2.11, 3.11 }; [EOL]     double[][] data1 = new double[][] { x1, x1Start, x1End, y1, y1Start, y1End }; [EOL]     d.addSeries("S1", data1); [EOL]     double[] x2 = new double[] { 11.0, 12.0, 13.0 }; [EOL]     double[] x2Start = new double[] { 10.9, 11.9, 12.9 }; [EOL]     double[] x2End = new double[] { 11.1, 12.1, 13.1 }; [EOL]     double[] y2 = new double[] { 14.0, 15.0, 16.0 }; [EOL]     double[] y2Start = new double[] { 11.09, 12.09, 13.09 }; [EOL]     double[] y2End = new double[] { 11.11, 12.11, 13.11 }; [EOL]     double[][] data2 = new double[][] { x2, x2Start, x2End, y2, y2Start, y2End }; [EOL]     d.addSeries("S2", data2); [EOL]     return d; [EOL] } <line_num>: 195,217
