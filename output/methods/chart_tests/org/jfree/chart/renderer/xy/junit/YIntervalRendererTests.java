public YIntervalRendererTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 93,95
public static Test suite() { [EOL]     return new TestSuite(YIntervalRendererTests.class); [EOL] } <line_num>: 84,86
public void testEquals() { [EOL]     YIntervalRenderer r1 = new YIntervalRenderer(); [EOL]     YIntervalRenderer r2 = new YIntervalRenderer(); [EOL]     assertEquals(r1, r2); [EOL]     r1.setSeriesItemLabelGenerator(0, new StandardXYItemLabelGenerator()); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesItemLabelGenerator(0, new StandardXYItemLabelGenerator()); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBaseItemLabelGenerator(new StandardXYItemLabelGenerator()); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseItemLabelGenerator(new StandardXYItemLabelGenerator()); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesToolTipGenerator(0, new StandardXYToolTipGenerator()); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesToolTipGenerator(0, new StandardXYToolTipGenerator()); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBaseToolTipGenerator(new StandardXYToolTipGenerator()); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseToolTipGenerator(new StandardXYToolTipGenerator()); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesURLGenerator(0, new StandardXYURLGenerator()); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesURLGenerator(0, new StandardXYURLGenerator()); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBaseURLGenerator(new StandardXYURLGenerator()); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseURLGenerator(new StandardXYURLGenerator()); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.addAnnotation(new XYTextAnnotation("X", 1.0, 2.0), Layer.FOREGROUND); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.addAnnotation(new XYTextAnnotation("X", 1.0, 2.0), Layer.FOREGROUND); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.addAnnotation(new XYTextAnnotation("X", 1.0, 2.0), Layer.BACKGROUND); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.addAnnotation(new XYTextAnnotation("X", 1.0, 2.0), Layer.BACKGROUND); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setDefaultEntityRadius(99); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setDefaultEntityRadius(99); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setLegendItemLabelGenerator(new StandardXYSeriesLabelGenerator("{0} {1}")); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setLegendItemLabelGenerator(new StandardXYSeriesLabelGenerator("{0} {1}")); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setLegendItemToolTipGenerator(new StandardXYSeriesLabelGenerator()); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setLegendItemToolTipGenerator(new StandardXYSeriesLabelGenerator()); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setLegendItemURLGenerator(new StandardXYSeriesLabelGenerator()); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setLegendItemURLGenerator(new StandardXYSeriesLabelGenerator()); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setAdditionalItemLabelGenerator(new IntervalXYItemLabelGenerator()); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setAdditionalItemLabelGenerator(new IntervalXYItemLabelGenerator()); [EOL]     assertTrue(r1.equals(r2)); [EOL] } <line_num>: 100,173
public void testHashcode() { [EOL]     YIntervalRenderer r1 = new YIntervalRenderer(); [EOL]     YIntervalRenderer r2 = new YIntervalRenderer(); [EOL]     assertTrue(r1.equals(r2)); [EOL]     int h1 = r1.hashCode(); [EOL]     int h2 = r2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 178,185
public void testCloning() { [EOL]     YIntervalRenderer r1 = new YIntervalRenderer(); [EOL]     YIntervalRenderer r2 = null; [EOL]     try { [EOL]         r2 = (YIntervalRenderer) r1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(r1 != r2); [EOL]     assertTrue(r1.getClass() == r2.getClass()); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesItemLabelGenerator(0, new StandardXYItemLabelGenerator()); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesItemLabelGenerator(0, new StandardXYItemLabelGenerator()); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesToolTipGenerator(0, new StandardXYToolTipGenerator()); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesToolTipGenerator(0, new StandardXYToolTipGenerator()); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.addAnnotation(new XYTextAnnotation("ABC", 1.0, 2.0), Layer.FOREGROUND); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.addAnnotation(new XYTextAnnotation("ABC", 1.0, 2.0), Layer.FOREGROUND); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.addAnnotation(new XYTextAnnotation("ABC", 1.0, 2.0), Layer.BACKGROUND); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.addAnnotation(new XYTextAnnotation("ABC", 1.0, 2.0), Layer.BACKGROUND); [EOL]     assertTrue(r1.equals(r2)); [EOL] } <line_num>: 190,228
public void testPublicCloneable() { [EOL]     YIntervalRenderer r1 = new YIntervalRenderer(); [EOL]     assertTrue(r1 instanceof PublicCloneable); [EOL] } <line_num>: 233,236
public void testSerialization() { [EOL]     YIntervalRenderer r1 = new YIntervalRenderer(); [EOL]     YIntervalRenderer r2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(r1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         r2 = (YIntervalRenderer) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(r1, r2); [EOL] } <line_num>: 241,262
public void testGetLegendItemSeriesIndex() { [EOL]     YIntervalSeriesCollection d1 = new YIntervalSeriesCollection(); [EOL]     YIntervalSeries s1 = new YIntervalSeries("S1"); [EOL]     s1.add(1.0, 1.1, 1.2, 1.3); [EOL]     YIntervalSeries s2 = new YIntervalSeries("S2"); [EOL]     s2.add(1.0, 1.1, 1.2, 1.3); [EOL]     d1.addSeries(s1); [EOL]     d1.addSeries(s2); [EOL]     YIntervalSeriesCollection d2 = new YIntervalSeriesCollection(); [EOL]     YIntervalSeries s3 = new YIntervalSeries("S3"); [EOL]     s3.add(1.0, 1.1, 1.2, 1.3); [EOL]     YIntervalSeries s4 = new YIntervalSeries("S4"); [EOL]     s4.add(1.0, 1.1, 1.2, 1.3); [EOL]     YIntervalSeries s5 = new YIntervalSeries("S5"); [EOL]     s5.add(1.0, 1.1, 1.2, 1.3); [EOL]     d2.addSeries(s3); [EOL]     d2.addSeries(s4); [EOL]     d2.addSeries(s5); [EOL]     YIntervalRenderer r = new YIntervalRenderer(); [EOL]     XYPlot plot = new XYPlot(d1, new NumberAxis("x"), new NumberAxis("y"), r); [EOL]     plot.setDataset(1, d2); [EOL]     new JFreeChart(plot); [EOL]     LegendItem li = r.getLegendItem(1, 2); [EOL]     assertEquals("S5", li.getLabel()); [EOL]     assertEquals(1, li.getDatasetIndex()); [EOL]     assertEquals(2, li.getSeriesIndex()); [EOL] } <line_num>: 268,297
