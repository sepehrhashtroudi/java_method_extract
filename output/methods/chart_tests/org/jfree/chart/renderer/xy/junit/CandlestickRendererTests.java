public CandlestickRendererTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 89,91
public static Test suite() { [EOL]     return new TestSuite(CandlestickRendererTests.class); [EOL] } <line_num>: 80,82
public void testConstructor() { [EOL]     CandlestickRenderer r1 = new CandlestickRenderer(); [EOL]     assertEquals(Color.green, r1.getUpPaint()); [EOL]     assertEquals(Color.red, r1.getDownPaint()); [EOL]     assertFalse(r1.getUseOutlinePaint()); [EOL]     assertTrue(r1.getDrawVolume()); [EOL]     assertEquals(Color.gray, r1.getVolumePaint()); [EOL]     assertEquals(-1.0, r1.getCandleWidth(), EPSILON); [EOL] } <line_num>: 98,108
public void testEquals() { [EOL]     CandlestickRenderer r1 = new CandlestickRenderer(); [EOL]     CandlestickRenderer r2 = new CandlestickRenderer(); [EOL]     assertEquals(r1, r2); [EOL]     r1.setUpPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setUpPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setDownPaint(new GradientPaint(5.0f, 6.0f, Color.green, 7.0f, 8.0f, Color.yellow)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setDownPaint(new GradientPaint(5.0f, 6.0f, Color.green, 7.0f, 8.0f, Color.yellow)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setDrawVolume(false); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setDrawVolume(false); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setCandleWidth(3.3); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setCandleWidth(3.3); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setMaxCandleWidthInMilliseconds(123); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setMaxCandleWidthInMilliseconds(123); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setAutoWidthMethod(CandlestickRenderer.WIDTHMETHOD_SMALLEST); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setAutoWidthMethod(CandlestickRenderer.WIDTHMETHOD_SMALLEST); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setAutoWidthFactor(0.22); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setAutoWidthFactor(0.22); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setAutoWidthGap(1.1); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setAutoWidthGap(1.1); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setUseOutlinePaint(true); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setUseOutlinePaint(true); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setVolumePaint(Color.blue); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setVolumePaint(Color.blue); [EOL]     assertTrue(r1.equals(r2)); [EOL] } <line_num>: 113,179
public void testHashcode() { [EOL]     CandlestickRenderer r1 = new CandlestickRenderer(); [EOL]     CandlestickRenderer r2 = new CandlestickRenderer(); [EOL]     assertTrue(r1.equals(r2)); [EOL]     int h1 = r1.hashCode(); [EOL]     int h2 = r2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 184,191
public void testCloning() { [EOL]     CandlestickRenderer r1 = new CandlestickRenderer(); [EOL]     CandlestickRenderer r2 = null; [EOL]     try { [EOL]         r2 = (CandlestickRenderer) r1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(r1 != r2); [EOL]     assertTrue(r1.getClass() == r2.getClass()); [EOL]     assertTrue(r1.equals(r2)); [EOL] } <line_num>: 196,208
public void testPublicCloneable() { [EOL]     CandlestickRenderer r1 = new CandlestickRenderer(); [EOL]     assertTrue(r1 instanceof PublicCloneable); [EOL] } <line_num>: 213,216
public void testSerialization() { [EOL]     CandlestickRenderer r1 = new CandlestickRenderer(); [EOL]     CandlestickRenderer r2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(r1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         r2 = (CandlestickRenderer) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(r1, r2); [EOL] } <line_num>: 221,242
public void testFindRangeBounds() { [EOL]     CandlestickRenderer renderer = new CandlestickRenderer(); [EOL]     OHLCDataItem item1 = new OHLCDataItem(new Date(1L), 2.0, 4.0, 1.0, 3.0, 100); [EOL]     OHLCDataset dataset = new DefaultOHLCDataset("S1", new OHLCDataItem[] { item1 }); [EOL]     Range range = renderer.findRangeBounds(dataset); [EOL]     assertEquals(new Range(1.0, 4.0), range); [EOL]     OHLCDataItem item2 = new OHLCDataItem(new Date(1L), -1.0, 3.0, -1.0, 3.0, 100); [EOL]     dataset = new DefaultOHLCDataset("S1", new OHLCDataItem[] { item1, item2 }); [EOL]     range = renderer.findRangeBounds(dataset); [EOL]     assertEquals(new Range(-1.0, 4.0), range); [EOL]     dataset = new DefaultOHLCDataset("S1", new OHLCDataItem[] {}); [EOL]     range = renderer.findRangeBounds(dataset); [EOL]     assertNull(range); [EOL]     range = renderer.findRangeBounds(null); [EOL]     assertNull(range); [EOL] } <line_num>: 247,272
