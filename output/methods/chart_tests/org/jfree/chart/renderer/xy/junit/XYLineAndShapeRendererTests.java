public XYLineAndShapeRendererTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 93,95
public static Test suite() { [EOL]     return new TestSuite(XYLineAndShapeRendererTests.class); [EOL] } <line_num>: 84,86
public void testEquals() { [EOL]     XYLineAndShapeRenderer r1 = new XYLineAndShapeRenderer(); [EOL]     XYLineAndShapeRenderer r2 = new XYLineAndShapeRenderer(); [EOL]     assertEquals(r1, r2); [EOL]     assertEquals(r2, r1); [EOL]     r1.setSeriesLinesVisible(3, true); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesLinesVisible(3, true); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBaseLinesVisible(false); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseLinesVisible(false); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setLegendLine(new Line2D.Double(1.0, 2.0, 3.0, 4.0)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setLegendLine(new Line2D.Double(1.0, 2.0, 3.0, 4.0)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesShapesVisible(3, true); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesShapesVisible(3, true); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBaseShapesVisible(false); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseShapesVisible(false); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesShapesFilled(3, true); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesShapesFilled(3, true); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBaseShapesFilled(false); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseShapesFilled(false); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setDrawOutlines(!r1.getDrawOutlines()); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setDrawOutlines(r1.getDrawOutlines()); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setUseOutlinePaint(true); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setUseOutlinePaint(true); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setUseFillPaint(true); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setUseFillPaint(true); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setDrawSeriesLineAsPath(true); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setDrawSeriesLineAsPath(true); [EOL]     assertTrue(r1.equals(r2)); [EOL] } <line_num>: 100,161
public void testEquals2() { [EOL]     XYLineAndShapeRenderer r1 = new XYLineAndShapeRenderer(); [EOL]     XYLineAndShapeRenderer r2 = new XYLineAndShapeRenderer(); [EOL]     assertEquals(r1, r2); [EOL]     assertEquals(r2, r1); [EOL]     r1.setBaseURLGenerator(new TimeSeriesURLGenerator()); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseURLGenerator(new TimeSeriesURLGenerator()); [EOL]     assertTrue(r1.equals(r2)); [EOL] } <line_num>: 166,176
public void testHashcode() { [EOL]     XYLineAndShapeRenderer r1 = new XYLineAndShapeRenderer(); [EOL]     XYLineAndShapeRenderer r2 = new XYLineAndShapeRenderer(); [EOL]     assertTrue(r1.equals(r2)); [EOL]     int h1 = r1.hashCode(); [EOL]     int h2 = r2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 182,189
public void testCloning() { [EOL]     Rectangle2D legendShape = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0); [EOL]     XYLineAndShapeRenderer r1 = new XYLineAndShapeRenderer(); [EOL]     r1.setLegendLine(legendShape); [EOL]     XYLineAndShapeRenderer r2 = null; [EOL]     try { [EOL]         r2 = (XYLineAndShapeRenderer) r1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(r1 != r2); [EOL]     assertTrue(r1.getClass() == r2.getClass()); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesLinesVisible(0, false); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesLinesVisible(0, false); [EOL]     assertTrue(r1.equals(r2)); [EOL]     legendShape.setRect(4.0, 3.0, 2.0, 1.0); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setLegendLine(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesShapesVisible(1, true); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesShapesVisible(1, true); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesShapesFilled(1, true); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesShapesFilled(1, true); [EOL]     assertTrue(r1.equals(r2)); [EOL] } <line_num>: 194,228
public void testPublicCloneable() { [EOL]     XYLineAndShapeRenderer r1 = new XYLineAndShapeRenderer(); [EOL]     assertTrue(r1 instanceof PublicCloneable); [EOL] } <line_num>: 233,236
public void testSerialization() { [EOL]     XYLineAndShapeRenderer r1 = new XYLineAndShapeRenderer(); [EOL]     XYLineAndShapeRenderer r2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(r1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         r2 = (XYLineAndShapeRenderer) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(r1, r2); [EOL] } <line_num>: 241,261
public void testFindDomainBounds() { [EOL]     XYSeriesCollection dataset = RendererXYPackageTests.createTestXYSeriesCollection(); [EOL]     JFreeChart chart = ChartFactory.createXYLineChart("Test Chart", "X", "Y", dataset, false); [EOL]     XYPlot plot = (XYPlot) chart.getPlot(); [EOL]     NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis(); [EOL]     domainAxis.setAutoRangeIncludesZero(false); [EOL]     Range bounds = domainAxis.getRange(); [EOL]     assertFalse(bounds.contains(0.9)); [EOL]     assertTrue(bounds.contains(1.0)); [EOL]     assertTrue(bounds.contains(2.0)); [EOL]     assertFalse(bounds.contains(2.10)); [EOL] } <line_num>: 266,279
public void testFindRangeBounds() { [EOL]     TableXYDataset dataset = RendererXYPackageTests.createTestTableXYDataset(); [EOL]     JFreeChart chart = ChartFactory.createXYLineChart("Test Chart", "X", "Y", dataset, false); [EOL]     XYPlot plot = (XYPlot) chart.getPlot(); [EOL]     NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis(); [EOL]     rangeAxis.setAutoRangeIncludesZero(false); [EOL]     Range bounds = rangeAxis.getRange(); [EOL]     assertFalse(bounds.contains(1.0)); [EOL]     assertTrue(bounds.contains(2.0)); [EOL]     assertTrue(bounds.contains(5.0)); [EOL]     assertFalse(bounds.contains(6.0)); [EOL] } <line_num>: 284,297
public void testGetLegendItemSeriesIndex() { [EOL]     XYSeriesCollection d1 = new XYSeriesCollection(); [EOL]     XYSeries s1 = new XYSeries("S1"); [EOL]     s1.add(1.0, 1.1); [EOL]     XYSeries s2 = new XYSeries("S2"); [EOL]     s2.add(1.0, 1.1); [EOL]     d1.addSeries(s1); [EOL]     d1.addSeries(s2); [EOL]     XYSeriesCollection d2 = new XYSeriesCollection(); [EOL]     XYSeries s3 = new XYSeries("S3"); [EOL]     s3.add(1.0, 1.1); [EOL]     XYSeries s4 = new XYSeries("S4"); [EOL]     s4.add(1.0, 1.1); [EOL]     XYSeries s5 = new XYSeries("S5"); [EOL]     s5.add(1.0, 1.1); [EOL]     d2.addSeries(s3); [EOL]     d2.addSeries(s4); [EOL]     d2.addSeries(s5); [EOL]     XYLineAndShapeRenderer r = new XYLineAndShapeRenderer(); [EOL]     XYPlot plot = new XYPlot(d1, new NumberAxis("x"), new NumberAxis("y"), r); [EOL]     plot.setDataset(1, d2); [EOL]     new JFreeChart(plot); [EOL]     LegendItem li = r.getLegendItem(1, 2); [EOL]     assertEquals("S5", li.getLabel()); [EOL]     assertEquals(1, li.getDatasetIndex()); [EOL]     assertEquals(2, li.getSeriesIndex()); [EOL] } <line_num>: 303,332
