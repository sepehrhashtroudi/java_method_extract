public GrayPaintScaleTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 79,81
public static Test suite() { [EOL]     return new TestSuite(GrayPaintScaleTests.class); [EOL] } <line_num>: 70,72
public void testConstructor() { [EOL]     GrayPaintScale gps = new GrayPaintScale(); [EOL]     assertEquals(0.0, gps.getLowerBound(), EPSILON); [EOL]     assertEquals(1.0, gps.getUpperBound(), EPSILON); [EOL]     assertEquals(255, gps.getAlpha()); [EOL] } <line_num>: 88,93
public void testGetPaint() { [EOL]     GrayPaintScale gps = new GrayPaintScale(); [EOL]     Color c = (Color) gps.getPaint(0.0); [EOL]     assertTrue(c.equals(Color.black)); [EOL]     c = (Color) gps.getPaint(1.0); [EOL]     assertTrue(c.equals(Color.white)); [EOL]     c = (Color) gps.getPaint(-0.5); [EOL]     assertTrue(c.equals(Color.black)); [EOL]     c = (Color) gps.getPaint(1.5); [EOL]     assertTrue(c.equals(Color.white)); [EOL] } <line_num>: 98,111
public void testEquals() { [EOL]     GrayPaintScale g1 = new GrayPaintScale(); [EOL]     GrayPaintScale g2 = new GrayPaintScale(); [EOL]     assertTrue(g1.equals(g2)); [EOL]     assertTrue(g2.equals(g1)); [EOL]     g1 = new GrayPaintScale(0.0, 1.0); [EOL]     g2 = new GrayPaintScale(0.0, 1.0); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1 = new GrayPaintScale(0.1, 1.0); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2 = new GrayPaintScale(0.1, 1.0); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1 = new GrayPaintScale(0.1, 0.9); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2 = new GrayPaintScale(0.1, 0.9); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1 = new GrayPaintScale(0.1, 0.9, 128); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2 = new GrayPaintScale(0.1, 0.9, 128); [EOL]     assertTrue(g1.equals(g2)); [EOL] } <line_num>: 116,139
public void testCloning() { [EOL]     GrayPaintScale g1 = new GrayPaintScale(); [EOL]     GrayPaintScale g2 = null; [EOL]     try { [EOL]         g2 = (GrayPaintScale) g1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(g1 != g2); [EOL]     assertTrue(g1.getClass() == g2.getClass()); [EOL]     assertTrue(g1.equals(g2)); [EOL] } <line_num>: 144,156
public void testSerialization() { [EOL]     GrayPaintScale g1 = new GrayPaintScale(); [EOL]     GrayPaintScale g2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(g1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         g2 = (GrayPaintScale) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(g1, g2); [EOL] } <line_num>: 161,179
