public LookupPaintScaleTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 81,83
public static Test suite() { [EOL]     return new TestSuite(LookupPaintScaleTests.class); [EOL] } <line_num>: 72,74
public void testEquals() { [EOL]     LookupPaintScale g1 = new LookupPaintScale(); [EOL]     LookupPaintScale g2 = new LookupPaintScale(); [EOL]     assertTrue(g1.equals(g2)); [EOL]     assertTrue(g2.equals(g1)); [EOL]     g1 = new LookupPaintScale(1.0, 2.0, Color.red); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2 = new LookupPaintScale(1.0, 2.0, Color.red); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1.add(1.5, new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2.add(1.5, new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     assertTrue(g1.equals(g2)); [EOL] } <line_num>: 88,105
public void testCloning() { [EOL]     LookupPaintScale g1 = new LookupPaintScale(); [EOL]     LookupPaintScale g2 = null; [EOL]     try { [EOL]         g2 = (LookupPaintScale) g1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(g1 != g2); [EOL]     assertTrue(g1.getClass() == g2.getClass()); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1.add(0.5, Color.red); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2.add(0.5, Color.red); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1 = new LookupPaintScale(1.0, 2.0, new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.green)); [EOL]     g1.add(1.5, new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     g2 = null; [EOL]     try { [EOL]         g2 = (LookupPaintScale) g1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(g1 != g2); [EOL]     assertTrue(g1.getClass() == g2.getClass()); [EOL]     assertTrue(g1.equals(g2)); [EOL] } <line_num>: 110,144
public void testSerialization() { [EOL]     LookupPaintScale g1 = new LookupPaintScale(); [EOL]     LookupPaintScale g2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(g1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         g2 = (LookupPaintScale) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(g1, g2); [EOL]     g1 = new LookupPaintScale(1.0, 2.0, new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow)); [EOL]     g1.add(1.5, new GradientPaint(1.1f, 2.2f, Color.red, 3.3f, 4.4f, Color.blue)); [EOL]     g2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(g1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         g2 = (LookupPaintScale) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(g1, g2); [EOL] } <line_num>: 149,188
public void testConstructor1() { [EOL]     LookupPaintScale s = new LookupPaintScale(); [EOL]     assertEquals(0.0, s.getLowerBound(), EPSILON); [EOL]     assertEquals(1.0, s.getUpperBound(), EPSILON); [EOL] } <line_num>: 195,199
public void testConstructor2() { [EOL]     LookupPaintScale s = new LookupPaintScale(1.0, 2.0, Color.red); [EOL]     assertEquals(1.0, s.getLowerBound(), EPSILON); [EOL]     assertEquals(2.0, s.getUpperBound(), EPSILON); [EOL]     assertEquals(Color.red, s.getDefaultPaint()); [EOL] } <line_num>: 204,209
public void testGeneral() { [EOL]     LookupPaintScale s = new LookupPaintScale(0.0, 100.0, Color.black); [EOL]     assertEquals(Color.black, s.getPaint(-1.0)); [EOL]     assertEquals(Color.black, s.getPaint(0.0)); [EOL]     assertEquals(Color.black, s.getPaint(50.0)); [EOL]     assertEquals(Color.black, s.getPaint(100.0)); [EOL]     assertEquals(Color.black, s.getPaint(101.0)); [EOL]     s.add(50.0, Color.blue); [EOL]     assertEquals(Color.black, s.getPaint(-1.0)); [EOL]     assertEquals(Color.black, s.getPaint(0.0)); [EOL]     assertEquals(Color.blue, s.getPaint(50.0)); [EOL]     assertEquals(Color.blue, s.getPaint(100.0)); [EOL]     assertEquals(Color.black, s.getPaint(101.0)); [EOL]     s.add(50.0, Color.red); [EOL]     assertEquals(Color.black, s.getPaint(-1.0)); [EOL]     assertEquals(Color.black, s.getPaint(0.0)); [EOL]     assertEquals(Color.red, s.getPaint(50.0)); [EOL]     assertEquals(Color.red, s.getPaint(100.0)); [EOL]     assertEquals(Color.black, s.getPaint(101.0)); [EOL]     s.add(25.0, Color.green); [EOL]     assertEquals(Color.black, s.getPaint(-1.0)); [EOL]     assertEquals(Color.black, s.getPaint(0.0)); [EOL]     assertEquals(Color.green, s.getPaint(25.0)); [EOL]     assertEquals(Color.red, s.getPaint(50.0)); [EOL]     assertEquals(Color.red, s.getPaint(100.0)); [EOL]     assertEquals(Color.black, s.getPaint(101.0)); [EOL]     s.add(75.0, Color.yellow); [EOL]     assertEquals(Color.black, s.getPaint(-1.0)); [EOL]     assertEquals(Color.black, s.getPaint(0.0)); [EOL]     assertEquals(Color.green, s.getPaint(25.0)); [EOL]     assertEquals(Color.red, s.getPaint(50.0)); [EOL]     assertEquals(Color.yellow, s.getPaint(75.0)); [EOL]     assertEquals(Color.yellow, s.getPaint(100.0)); [EOL]     assertEquals(Color.black, s.getPaint(101.0)); [EOL] } <line_num>: 214,253
