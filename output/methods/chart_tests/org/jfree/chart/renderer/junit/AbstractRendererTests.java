public AbstractRendererTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 101,103
public MyRendererChangeListener() { [EOL]     this.lastEvent = null; [EOL] } <line_num>: 488,490
public static Test suite() { [EOL]     return new TestSuite(AbstractRendererTests.class); [EOL] } <line_num>: 92,94
public void testEquals() { [EOL]     BarRenderer r1 = new BarRenderer(); [EOL]     BarRenderer r2 = new BarRenderer(); [EOL]     assertTrue(r1.equals(r2)); [EOL]     assertTrue(r2.equals(r1)); [EOL]     r1.setSeriesVisible(2, Boolean.TRUE); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesVisible(2, Boolean.TRUE); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBaseSeriesVisible(false); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseSeriesVisible(false); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesVisibleInLegend(1, Boolean.TRUE); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesVisibleInLegend(1, Boolean.TRUE); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBaseSeriesVisibleInLegend(false); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseSeriesVisibleInLegend(false); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.red)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.red)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.red)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.red)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.red)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.red)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.red)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.red)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.red)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.red)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     Stroke s = new BasicStroke(3.21f); [EOL]     r1.setSeriesStroke(1, s); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesStroke(1, s); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBaseStroke(s); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseStroke(s); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesOutlineStroke(0, s); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesOutlineStroke(0, s); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBaseOutlineStroke(s); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseOutlineStroke(s); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBaseShape(new Ellipse2D.Double(1, 2, 3, 4)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseShape(new Ellipse2D.Double(1, 2, 3, 4)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesItemLabelsVisible(1, Boolean.TRUE); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesItemLabelsVisible(1, Boolean.TRUE); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBaseItemLabelsVisible(true); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseItemLabelsVisible(true); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesItemLabelFont(1, new Font("Serif", Font.BOLD, 9)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesItemLabelFont(1, new Font("Serif", Font.BOLD, 9)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBaseItemLabelFont(new Font("Serif", Font.PLAIN, 10)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseItemLabelFont(new Font("Serif", Font.PLAIN, 10)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.gray)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.gray)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBaseItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.gray)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.gray)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition()); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition()); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBasePositiveItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBasePositiveItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBaseNegativeItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseNegativeItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setItemLabelAnchorOffset(3.0); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setItemLabelAnchorOffset(3.0); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesCreateEntities(0, Boolean.TRUE); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesCreateEntities(0, Boolean.TRUE); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBaseCreateEntities(false); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseCreateEntities(false); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBaseLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setLegendTextFont(0, new Font("Dialog", Font.PLAIN, 7)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setLegendTextFont(0, new Font("Dialog", Font.PLAIN, 7)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBaseLegendTextFont(new Font("Dialog", Font.PLAIN, 7)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseLegendTextFont(new Font("Dialog", Font.PLAIN, 7)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.red)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.red)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBaseLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.red)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.red)); [EOL]     assertTrue(r1.equals(r2)); [EOL] } <line_num>: 108,352
public void testCloning() { [EOL]     LineAndShapeRenderer r1 = new LineAndShapeRenderer(); [EOL]     Rectangle2D baseShape = new Rectangle2D.Double(11.0, 12.0, 13.0, 14.0); [EOL]     r1.setBaseShape(baseShape); [EOL]     r1.setBaseLegendShape(new Rectangle(4, 3, 2, 1)); [EOL]     r1.setBaseLegendTextFont(new Font("Dialog", Font.PLAIN, 3)); [EOL]     r1.setBaseLegendTextPaint(new Color(1, 2, 3)); [EOL]     LineAndShapeRenderer r2 = null; [EOL]     try { [EOL]         r2 = (LineAndShapeRenderer) r1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(r1 != r2); [EOL]     assertTrue(r1.getClass() == r2.getClass()); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesVisible(0, Boolean.FALSE); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesVisible(0, Boolean.FALSE); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesVisibleInLegend(0, Boolean.FALSE); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesVisibleInLegend(0, Boolean.FALSE); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesPaint(0, Color.black); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesPaint(0, Color.black); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesFillPaint(0, Color.yellow); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesFillPaint(0, Color.yellow); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesOutlinePaint(0, Color.yellow); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesOutlinePaint(0, Color.yellow); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesStroke(0, new BasicStroke(2.2f)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesStroke(0, new BasicStroke(2.2f)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesOutlineStroke(0, new BasicStroke(2.2f)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesOutlineStroke(0, new BasicStroke(2.2f)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     baseShape.setRect(4.0, 3.0, 2.0, 1.0); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesItemLabelsVisible(0, Boolean.TRUE); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesItemLabelsVisible(0, Boolean.TRUE); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesItemLabelPaint(0, Color.red); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesItemLabelPaint(0, Color.red); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition()); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition()); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition()); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition()); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setSeriesCreateEntities(0, Boolean.FALSE); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setSeriesCreateEntities(0, Boolean.FALSE); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setLegendShape(0, new Rectangle(9, 7, 3, 4)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setLegendShape(0, new Rectangle(9, 7, 3, 4)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBaseLegendShape(new Rectangle(3, 4, 1, 5)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseLegendShape(new Rectangle(3, 4, 1, 5)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setLegendTextFont(1, new Font("Dialog", Font.PLAIN, 33)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setLegendTextFont(1, new Font("Dialog", Font.PLAIN, 33)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBaseLegendTextFont(new Font("Dialog", Font.PLAIN, 11)); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseLegendTextFont(new Font("Dialog", Font.PLAIN, 11)); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setLegendTextPaint(3, Color.red); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setLegendTextPaint(3, Color.red); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.setBaseLegendTextPaint(Color.green); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.setBaseLegendTextPaint(Color.green); [EOL]     assertTrue(r1.equals(r2)); [EOL] } <line_num>: 357,475
public void rendererChanged(RendererChangeEvent event) { [EOL]     this.lastEvent = event; [EOL] } <line_num>: 491,493
public void testCloning2() { [EOL]     LineAndShapeRenderer r1 = new LineAndShapeRenderer(); [EOL]     r1.setBasePaint(Color.blue); [EOL]     r1.setBaseLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     LineAndShapeRenderer r2 = null; [EOL]     try { [EOL]         r2 = (LineAndShapeRenderer) r1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(r1 != r2); [EOL]     assertTrue(r1.getClass() == r2.getClass()); [EOL]     assertTrue(r1.equals(r2)); [EOL]     MyRendererChangeListener listener = new MyRendererChangeListener(); [EOL]     r2.addChangeListener(listener); [EOL]     r2.setBasePaint(Color.red); [EOL]     assertTrue(listener.lastEvent.getRenderer() == r2); [EOL]     assertFalse(r1.hasListener(listener)); [EOL] } <line_num>: 499,520
public void testEventNotification() { [EOL]     RendererChangeDetector detector = new RendererChangeDetector(); [EOL]     BarRenderer r1 = new BarRenderer(); [EOL]     r1.addChangeListener(detector); [EOL]     detector.setNotified(false); [EOL]     r1.setSeriesPaint(0, Color.red); [EOL]     assertTrue(detector.getNotified()); [EOL]     detector.setNotified(false); [EOL]     r1.setBasePaint(Color.red); [EOL]     assertTrue(detector.getNotified()); [EOL]     detector.setNotified(false); [EOL]     r1.setSeriesOutlinePaint(0, Color.red); [EOL]     assertTrue(detector.getNotified()); [EOL]     detector.setNotified(false); [EOL]     r1.setBaseOutlinePaint(Color.red); [EOL]     assertTrue(detector.getNotified()); [EOL]     detector.setNotified(false); [EOL]     r1.setSeriesStroke(0, new BasicStroke(1.0f)); [EOL]     assertTrue(detector.getNotified()); [EOL]     detector.setNotified(false); [EOL]     r1.setBaseStroke(new BasicStroke(1.0f)); [EOL]     assertTrue(detector.getNotified()); [EOL]     detector.setNotified(false); [EOL]     r1.setSeriesOutlineStroke(0, new BasicStroke(1.0f)); [EOL]     assertTrue(detector.getNotified()); [EOL]     detector.setNotified(false); [EOL]     r1.setBaseOutlineStroke(new BasicStroke(1.0f)); [EOL]     assertTrue(detector.getNotified()); [EOL]     detector.setNotified(false); [EOL]     r1.setSeriesShape(0, new Rectangle2D.Float()); [EOL]     assertTrue(detector.getNotified()); [EOL]     detector.setNotified(false); [EOL]     r1.setBaseShape(new Rectangle2D.Float()); [EOL]     assertTrue(detector.getNotified()); [EOL]     detector.setNotified(false); [EOL]     r1.setSeriesItemLabelsVisible(0, Boolean.TRUE); [EOL]     assertTrue(detector.getNotified()); [EOL]     detector.setNotified(false); [EOL]     r1.setBaseItemLabelsVisible(true); [EOL]     assertTrue(detector.getNotified()); [EOL]     detector.setNotified(false); [EOL]     r1.setSeriesItemLabelFont(0, new Font("Serif", Font.PLAIN, 12)); [EOL]     assertTrue(detector.getNotified()); [EOL]     detector.setNotified(false); [EOL]     r1.setBaseItemLabelFont(new Font("Serif", Font.PLAIN, 12)); [EOL]     assertTrue(detector.getNotified()); [EOL]     detector.setNotified(false); [EOL]     r1.setSeriesItemLabelPaint(0, Color.blue); [EOL]     assertTrue(detector.getNotified()); [EOL]     detector.setNotified(false); [EOL]     r1.setBaseItemLabelPaint(Color.blue); [EOL]     assertTrue(detector.getNotified()); [EOL]     detector.setNotified(false); [EOL]     r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition(ItemLabelAnchor.CENTER, TextAnchor.CENTER)); [EOL]     assertTrue(detector.getNotified()); [EOL]     detector.setNotified(false); [EOL]     r1.setBasePositiveItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.CENTER, TextAnchor.CENTER)); [EOL]     assertTrue(detector.getNotified()); [EOL]     detector.setNotified(false); [EOL]     r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition(ItemLabelAnchor.CENTER, TextAnchor.CENTER)); [EOL]     assertTrue(detector.getNotified()); [EOL]     detector.setNotified(false); [EOL]     r1.setBaseNegativeItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.CENTER, TextAnchor.CENTER)); [EOL]     assertTrue(detector.getNotified()); [EOL] } <line_num>: 525,626
public void testSerialization() { [EOL]     BarRenderer r1 = new BarRenderer(); [EOL]     r1.setBaseLegendTextFont(new Font("Dialog", Font.PLAIN, 4)); [EOL]     r1.setBaseLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.green)); [EOL]     r1.setBaseLegendShape(new Line2D.Double(1.0, 2.0, 3.0, 4.0)); [EOL]     BarRenderer r2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(r1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         r2 = (BarRenderer) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(r1, r2); [EOL]     try { [EOL]         r2.notifyListeners(new RendererChangeEvent(r2)); [EOL]     } catch (NullPointerException e) { [EOL]         assertTrue(false); [EOL]     } [EOL] } <line_num>: 633,664
public void testAutoPopulateFlagDefaults() { [EOL]     BarRenderer r = new BarRenderer(); [EOL]     assertEquals(true, r.getAutoPopulateSeriesPaint()); [EOL]     assertEquals(false, r.getAutoPopulateSeriesFillPaint()); [EOL]     assertEquals(false, r.getAutoPopulateSeriesOutlinePaint()); [EOL]     assertEquals(true, r.getAutoPopulateSeriesStroke()); [EOL]     assertEquals(false, r.getAutoPopulateSeriesOutlineStroke()); [EOL]     assertEquals(true, r.getAutoPopulateSeriesShape()); [EOL] } <line_num>: 669,677
public void testPaintLookup() { [EOL]     BarRenderer r = new BarRenderer(); [EOL]     assertEquals(Color.blue, r.getBasePaint()); [EOL]     r.setAutoPopulateSeriesPaint(false); [EOL]     assertEquals(Color.blue, r.lookupSeriesPaint(0)); [EOL]     assertNull(r.getSeriesPaint(0)); [EOL]     r.setAutoPopulateSeriesPaint(true); [EOL]     new CategoryPlot(null, new CategoryAxis("Category"), new NumberAxis("Value"), r); [EOL]     assertEquals(DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE[0], r.lookupSeriesPaint(0)); [EOL]     assertNotNull(r.getSeriesPaint(0)); [EOL] } <line_num>: 682,698
public void testFillPaintLookup() { [EOL]     BarRenderer r = new BarRenderer(); [EOL]     assertEquals(Color.white, r.getBaseFillPaint()); [EOL]     r.setAutoPopulateSeriesFillPaint(false); [EOL]     assertEquals(Color.white, r.lookupSeriesFillPaint(0)); [EOL]     assertNull(r.getSeriesFillPaint(0)); [EOL]     r.setAutoPopulateSeriesFillPaint(true); [EOL]     new CategoryPlot(null, new CategoryAxis("Category"), new NumberAxis("Value"), r); [EOL]     assertEquals(DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE[0], r.lookupSeriesFillPaint(0)); [EOL]     assertNotNull(r.getSeriesFillPaint(0)); [EOL] } <line_num>: 703,719
public void testOutlinePaintLookup() { [EOL]     BarRenderer r = new BarRenderer(); [EOL]     assertEquals(Color.gray, r.getBaseOutlinePaint()); [EOL]     r.setAutoPopulateSeriesOutlinePaint(false); [EOL]     assertEquals(Color.gray, r.lookupSeriesOutlinePaint(0)); [EOL]     assertNull(r.getSeriesOutlinePaint(0)); [EOL]     r.setAutoPopulateSeriesOutlinePaint(true); [EOL]     new CategoryPlot(null, new CategoryAxis("Category"), new NumberAxis("Value"), r); [EOL]     assertEquals(DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE[0], r.lookupSeriesOutlinePaint(0)); [EOL]     assertNotNull(r.getSeriesOutlinePaint(0)); [EOL] } <line_num>: 724,740
public void testHashCode() { [EOL]     BarRenderer r1 = new BarRenderer(); [EOL]     BarRenderer r2 = new BarRenderer(); [EOL]     assertTrue(r1.hashCode() == r2.hashCode()); [EOL]     r1.setSeriesVisible(1, Boolean.FALSE); [EOL]     assertFalse(r1.hashCode() == r2.hashCode()); [EOL]     r2.setSeriesVisible(1, Boolean.FALSE); [EOL]     assertTrue(r1.hashCode() == r2.hashCode()); [EOL]     r1.setBaseSeriesVisible(false); [EOL]     assertFalse(r1.hashCode() == r2.hashCode()); [EOL]     r2.setBaseSeriesVisible(false); [EOL]     assertTrue(r1.hashCode() == r2.hashCode()); [EOL]     r1.setSeriesVisibleInLegend(1, Boolean.FALSE); [EOL]     assertFalse(r1.hashCode() == r2.hashCode()); [EOL]     r2.setSeriesVisibleInLegend(1, Boolean.FALSE); [EOL]     assertTrue(r1.hashCode() == r2.hashCode()); [EOL]     r1.setBaseSeriesVisibleInLegend(false); [EOL]     assertFalse(r1.hashCode() == r2.hashCode()); [EOL]     r2.setBaseSeriesVisibleInLegend(false); [EOL]     assertTrue(r1.hashCode() == r2.hashCode()); [EOL]     r1.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED, 3.0f, 4.0f, Color.BLUE)); [EOL]     assertFalse(r1.hashCode() == r2.hashCode()); [EOL]     r2.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED, 3.0f, 4.0f, Color.BLUE)); [EOL]     assertTrue(r1.hashCode() == r2.hashCode()); [EOL]     r1.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.RED, 3.0f, 4.0f, Color.BLUE)); [EOL]     assertFalse(r1.hashCode() == r2.hashCode()); [EOL]     r2.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.RED, 3.0f, 4.0f, Color.BLUE)); [EOL]     assertTrue(r1.hashCode() == r2.hashCode()); [EOL]     r1.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED, 3.0f, 4.0f, Color.BLUE)); [EOL]     assertFalse(r1.hashCode() == r2.hashCode()); [EOL]     r2.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED, 3.0f, 4.0f, Color.BLUE)); [EOL]     assertTrue(r1.hashCode() == r2.hashCode()); [EOL]     r1.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.RED, 3.0f, 4.0f, Color.BLUE)); [EOL]     assertFalse(r1.hashCode() == r2.hashCode()); [EOL]     r2.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.RED, 3.0f, 4.0f, Color.BLUE)); [EOL]     assertTrue(r1.hashCode() == r2.hashCode()); [EOL]     r1.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.RED, 3.0f, 4.0f, Color.BLUE)); [EOL]     assertFalse(r1.hashCode() == r2.hashCode()); [EOL]     r2.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.RED, 3.0f, 4.0f, Color.BLUE)); [EOL]     assertTrue(r1.hashCode() == r2.hashCode()); [EOL]     r1.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.RED, 3.0f, 4.0f, Color.BLUE)); [EOL]     assertFalse(r1.hashCode() == r2.hashCode()); [EOL]     r2.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.RED, 3.0f, 4.0f, Color.BLUE)); [EOL]     assertTrue(r1.hashCode() == r2.hashCode()); [EOL]     r1.setSeriesStroke(0, new BasicStroke(1.1f)); [EOL]     assertFalse(r1.hashCode() == r2.hashCode()); [EOL]     r2.setSeriesStroke(0, new BasicStroke(1.1f)); [EOL]     assertTrue(r1.hashCode() == r2.hashCode()); [EOL]     r1.setBaseStroke(new BasicStroke(1.5f)); [EOL]     assertFalse(r1.hashCode() == r2.hashCode()); [EOL]     r2.setBaseStroke(new BasicStroke(1.5f)); [EOL]     assertTrue(r1.hashCode() == r2.hashCode()); [EOL]     r1.setSeriesOutlineStroke(1, new BasicStroke(1.5f)); [EOL]     assertFalse(r1.hashCode() == r2.hashCode()); [EOL]     r2.setSeriesOutlineStroke(1, new BasicStroke(1.5f)); [EOL]     assertTrue(r1.hashCode() == r2.hashCode()); [EOL]     r1.setBaseOutlineStroke(new BasicStroke(2.0f)); [EOL]     assertFalse(r1.hashCode() == r2.hashCode()); [EOL]     r2.setBaseOutlineStroke(new BasicStroke(2.0f)); [EOL]     assertTrue(r1.hashCode() == r2.hashCode()); [EOL]     r1.setSeriesItemLabelsVisible(1, true); [EOL]     assertFalse(r1.hashCode() == r2.hashCode()); [EOL]     r2.setSeriesItemLabelsVisible(1, true); [EOL]     assertTrue(r1.hashCode() == r2.hashCode()); [EOL]     r1.setBaseItemLabelsVisible(true); [EOL]     assertFalse(r1.hashCode() == r2.hashCode()); [EOL]     r2.setBaseItemLabelsVisible(true); [EOL]     assertTrue(r1.hashCode() == r2.hashCode()); [EOL] } <line_num>: 745,841
