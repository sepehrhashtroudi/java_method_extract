public RendererUtilitiesTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 70,72
public static Test suite() { [EOL]     return new TestSuite(RendererUtilitiesTests.class); [EOL] } <line_num>: 61,63
public void testFindLiveItemsLowerBound_Unordered() { [EOL]     DefaultXYDataset d = new DefaultXYDataset(); [EOL]     d.addSeries("S1", new double[][] { {}, {} }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 0, 10.0, 11.0)); [EOL]     d.addSeries("S2", new double[][] { { 0.0 }, { 9.9 } }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 1, 0.0, 1.1)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 1, 2.0, 3.3)); [EOL]     d.addSeries("S3", new double[][] { { 0.0, 1.0 }, { 9.9, 9.9 } }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 2, 0.0, 1.1)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 2, 1.0, 2.2)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 2, 2.0, 3.3)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 2, 3.0, 4.4)); [EOL]     d.addSeries("S4", new double[][] { { 1.0, 2.0, 1.5 }, { 9.9, 9.9, 9.9 } }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 3, 0.0, 1.1)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 3, 1.0, 2.2)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 3, 2.0, 3.3)); [EOL]     assertEquals(2, RendererUtilities.findLiveItemsLowerBound(d, 3, 3.0, 4.4)); [EOL]     d.addSeries("S5", new double[][] { { 1.0, 2.0, 1.5, 1.8 }, { 9.9, 9.9, 9.9, 9.9 } }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 4, 0.0, 1.1)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 4, 1.0, 2.2)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 4, 2.0, 3.3)); [EOL]     assertEquals(3, RendererUtilities.findLiveItemsLowerBound(d, 4, 3.0, 4.4)); [EOL]     assertEquals(3, RendererUtilities.findLiveItemsLowerBound(d, 4, 4.0, 5.5)); [EOL] } <line_num>: 78,128
public DomainOrder getDomainOrder() { [EOL]     return DomainOrder.ASCENDING; [EOL] } <line_num>: 136,140
public void testFindLiveItemsLowerBound_Ascending() { [EOL]     DefaultXYDataset d = new DefaultXYDataset() { [EOL]  [EOL]         public DomainOrder getDomainOrder() { [EOL]             return DomainOrder.ASCENDING; [EOL]         } [EOL]     }; [EOL]     d.addSeries("S1", new double[][] { {}, {} }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 0, 10.0, 11.1)); [EOL]     d.addSeries("S2", new double[][] { { 1.0 }, { 9.9 } }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 1, 0.0, 1.1)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 1, 2.0, 2.2)); [EOL]     d.addSeries("S3", new double[][] { { 1.0, 2.0 }, { 9.9, 9.9 } }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 2, 0.0, 1.1)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 2, 1.0, 2.2)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 2, 2.0, 3.3)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 2, 3.0, 4.4)); [EOL]     d.addSeries("S4", new double[][] { { 1.0, 2.0, 3.0 }, { 9.9, 9.9, 9.9 } }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 3, 0.0, 1.1)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 3, 1.0, 2.2)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 3, 2.0, 3.3)); [EOL]     assertEquals(2, RendererUtilities.findLiveItemsLowerBound(d, 3, 3.0, 4.4)); [EOL]     d.addSeries("S5", new double[][] { { 1.0, 2.0, 3.0, 4.0 }, { 9.9, 9.9, 9.9, 9.9 } }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 4, 0.0, 1.1)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 4, 1.0, 2.2)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 4, 2.0, 3.3)); [EOL]     assertEquals(2, RendererUtilities.findLiveItemsLowerBound(d, 4, 3.0, 4.4)); [EOL]     assertEquals(3, RendererUtilities.findLiveItemsLowerBound(d, 4, 4.0, 5.5)); [EOL]     d.addSeries("S5", new double[][] { { 1.0, 2.0, 2.0, 2.0, 3.0 }, { 9.9, 9.9, 9.9, 9.9, 9.9 } }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 4, 0.0, 4.0)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 4, 1.0, 4.0)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 4, 2.0, 4.0)); [EOL]     assertEquals(4, RendererUtilities.findLiveItemsLowerBound(d, 4, 3.0, 4.0)); [EOL] } <line_num>: 134,202
public DomainOrder getDomainOrder() { [EOL]     return DomainOrder.DESCENDING; [EOL] } <line_num>: 210,214
public void testFindLiveItemsLowerBound_Descending() { [EOL]     DefaultXYDataset d = new DefaultXYDataset() { [EOL]  [EOL]         public DomainOrder getDomainOrder() { [EOL]             return DomainOrder.DESCENDING; [EOL]         } [EOL]     }; [EOL]     d.addSeries("S1", new double[][] { {}, {} }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 0, 10.0, 11.0)); [EOL]     d.addSeries("S2", new double[][] { { 1.0 }, { 9.9 } }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 1, 0.0, 1.0)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 1, 1.1, 2.0)); [EOL]     d.addSeries("S3", new double[][] { { 2.0, 1.0 }, { 9.9, 9.9 } }); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 2, 0.1, 0.5)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 2, 0.1, 1.0)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 2, 1.1, 2.0)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 2, 2.2, 3.0)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 2, 3.3, 4.0)); [EOL]     d.addSeries("S4", new double[][] { { 3.0, 2.0, 1.0 }, { 9.9, 9.9, 9.9 } }); [EOL]     assertEquals(2, RendererUtilities.findLiveItemsLowerBound(d, 3, 0.0, 1.0)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 3, 1.0, 2.0)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 3, 2.0, 3.0)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 3, 3.0, 4.0)); [EOL]     d.addSeries("S5", new double[][] { { 4.0, 3.0, 2.0, 1.0 }, { 9.9, 9.9, 9.9, 9.9 } }); [EOL]     assertEquals(3, RendererUtilities.findLiveItemsLowerBound(d, 4, 0.1, 0.5)); [EOL]     assertEquals(3, RendererUtilities.findLiveItemsLowerBound(d, 4, 0.1, 1.0)); [EOL]     assertEquals(2, RendererUtilities.findLiveItemsLowerBound(d, 4, 1.1, 2.0)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 4, 2.2, 3.0)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 4, 3.3, 4.0)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 4, 4.4, 5.0)); [EOL]     d.addSeries("S6", new double[][] { { 3.0, 2.0, 2.0, 2.0, 1.0 }, { 9.9, 9.9, 9.9, 9.9, 9.9 } }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 5, 0.0, 3.0)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 5, 0.0, 2.0)); [EOL]     assertEquals(4, RendererUtilities.findLiveItemsLowerBound(d, 5, 0.0, 1.0)); [EOL]     assertEquals(4, RendererUtilities.findLiveItemsLowerBound(d, 5, 0.0, 0.5)); [EOL] } <line_num>: 208,279
public void testFindLiveItemsUpperBound_Unordered() { [EOL]     DefaultXYDataset d = new DefaultXYDataset(); [EOL]     d.addSeries("S1", new double[][] { {}, {} }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 0, 10.0, 11.0)); [EOL]     d.addSeries("S2", new double[][] { { 1.0 }, { 9.9 } }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 1, 0.0, 1.1)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 1, 2.0, 3.3)); [EOL]     d.addSeries("S3", new double[][] { { 1.0, 2.0 }, { 9.9, 9.9 } }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 2, 0.0, 1.1)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 2, 1.0, 2.2)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 2, 2.0, 3.3)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 2, 3.0, 4.4)); [EOL]     d.addSeries("S4", new double[][] { { 1.0, 2.0, 1.5 }, { 9.9, 9.9, 9.9 } }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 3, 0.0, 1.1)); [EOL]     assertEquals(2, RendererUtilities.findLiveItemsUpperBound(d, 3, 1.0, 2.2)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 3, 2.0, 3.3)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 3, 3.0, 4.4)); [EOL]     d.addSeries("S5", new double[][] { { 1.0, 2.0, 1.5, 1.8 }, { 9.9, 9.9, 9.9, 9.9 } }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 4, 0.0, 1.1)); [EOL]     assertEquals(3, RendererUtilities.findLiveItemsUpperBound(d, 4, 1.0, 2.2)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 4, 2.0, 3.3)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 4, 3.0, 4.4)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 4, 4.0, 5.5)); [EOL] } <line_num>: 285,335
public DomainOrder getDomainOrder() { [EOL]     return DomainOrder.ASCENDING; [EOL] } <line_num>: 343,347
public void testFindLiveItemsUpperBound_Ascending() { [EOL]     DefaultXYDataset d = new DefaultXYDataset() { [EOL]  [EOL]         public DomainOrder getDomainOrder() { [EOL]             return DomainOrder.ASCENDING; [EOL]         } [EOL]     }; [EOL]     d.addSeries("S1", new double[][] { {}, {} }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 0, 10.0, 11.1)); [EOL]     d.addSeries("S2", new double[][] { { 1.0 }, { 9.9 } }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 1, 0.0, 1.1)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 1, 2.0, 2.2)); [EOL]     d.addSeries("S3", new double[][] { { 1.0, 2.0 }, { 9.9, 9.9 } }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 2, 0.0, 1.0)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 2, 1.0, 2.2)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 2, 2.0, 3.3)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 2, 3.0, 4.4)); [EOL]     d.addSeries("S4", new double[][] { { 1.0, 2.0, 3.0 }, { 9.9, 9.9, 9.9 } }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 3, 0.0, 1.1)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 3, 1.0, 2.2)); [EOL]     assertEquals(2, RendererUtilities.findLiveItemsUpperBound(d, 3, 2.0, 3.3)); [EOL]     assertEquals(2, RendererUtilities.findLiveItemsUpperBound(d, 3, 3.0, 4.4)); [EOL]     d.addSeries("S5", new double[][] { { 1.0, 2.0, 3.0, 4.0 }, { 9.9, 9.9, 9.9, 9.9 } }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 4, 0.0, 1.1)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 4, 1.0, 2.2)); [EOL]     assertEquals(2, RendererUtilities.findLiveItemsUpperBound(d, 4, 2.0, 3.3)); [EOL]     assertEquals(3, RendererUtilities.findLiveItemsUpperBound(d, 4, 3.0, 4.4)); [EOL]     assertEquals(3, RendererUtilities.findLiveItemsUpperBound(d, 4, 4.0, 5.5)); [EOL]     d.addSeries("S5", new double[][] { { 1.0, 2.0, 2.0, 2.0, 3.0 }, { 9.9, 9.9, 9.9, 9.9, 9.9 } }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 4, 0.0, 1.0)); [EOL]     assertEquals(3, RendererUtilities.findLiveItemsUpperBound(d, 4, 0.0, 2.0)); [EOL]     assertEquals(4, RendererUtilities.findLiveItemsUpperBound(d, 4, 0.0, 3.0)); [EOL]     assertEquals(4, RendererUtilities.findLiveItemsUpperBound(d, 4, 0.0, 4.0)); [EOL] } <line_num>: 341,409
public DomainOrder getDomainOrder() { [EOL]     return DomainOrder.DESCENDING; [EOL] } <line_num>: 417,421
public void testFindLiveItemsUpperBound_Descending() { [EOL]     DefaultXYDataset d = new DefaultXYDataset() { [EOL]  [EOL]         public DomainOrder getDomainOrder() { [EOL]             return DomainOrder.DESCENDING; [EOL]         } [EOL]     }; [EOL]     d.addSeries("S1", new double[][] { {}, {} }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 0, 10.0, 11.0)); [EOL]     d.addSeries("S2", new double[][] { { 1.0 }, { 9.9 } }); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 1, 0.0, 1.0)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 1, 1.1, 2.0)); [EOL]     d.addSeries("S3", new double[][] { { 2.0, 1.0 }, { 9.9, 9.9 } }); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 2, 0.1, 0.5)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 2, 0.1, 1.0)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 2, 1.1, 2.0)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 2, 2.2, 3.0)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 2, 3.3, 4.0)); [EOL]     d.addSeries("S4", new double[][] { { 3.0, 2.0, 1.0 }, { 9.9, 9.9, 9.9 } }); [EOL]     assertEquals(2, RendererUtilities.findLiveItemsUpperBound(d, 3, 0.0, 1.0)); [EOL]     assertEquals(2, RendererUtilities.findLiveItemsUpperBound(d, 3, 1.0, 2.0)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 3, 2.0, 3.0)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 3, 3.0, 4.0)); [EOL]     d.addSeries("S5", new double[][] { { 4.0, 3.0, 2.0, 1.0 }, { 9.9, 9.9, 9.9, 9.9 } }); [EOL]     assertEquals(3, RendererUtilities.findLiveItemsUpperBound(d, 4, 0.1, 0.5)); [EOL]     assertEquals(3, RendererUtilities.findLiveItemsUpperBound(d, 4, 0.1, 1.0)); [EOL]     assertEquals(2, RendererUtilities.findLiveItemsUpperBound(d, 4, 1.1, 2.0)); [EOL]     assertEquals(1, RendererUtilities.findLiveItemsUpperBound(d, 4, 2.2, 3.0)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 4, 3.3, 4.0)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 4, 4.4, 5.0)); [EOL]     d.addSeries("S6", new double[][] { { 3.0, 2.0, 2.0, 2.0, 1.0 }, { 9.9, 9.9, 9.9, 9.9, 9.9 } }); [EOL]     assertEquals(4, RendererUtilities.findLiveItemsUpperBound(d, 5, 0.0, 5.0)); [EOL]     assertEquals(4, RendererUtilities.findLiveItemsUpperBound(d, 5, 1.0, 5.0)); [EOL]     assertEquals(3, RendererUtilities.findLiveItemsUpperBound(d, 5, 2.0, 5.0)); [EOL]     assertEquals(0, RendererUtilities.findLiveItemsUpperBound(d, 5, 3.0, 5.0)); [EOL] } <line_num>: 415,486
