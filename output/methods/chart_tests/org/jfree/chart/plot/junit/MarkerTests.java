public MarkerTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 87,89
public static Test suite() { [EOL]     return new TestSuite(MarkerTests.class); [EOL] } <line_num>: 78,80
public void testGetSetPaint() { [EOL]     ValueMarker m = new ValueMarker(1.1); [EOL]     m.addChangeListener(this); [EOL]     this.lastEvent = null; [EOL]     assertEquals(Color.gray, m.getPaint()); [EOL]     m.setPaint(Color.blue); [EOL]     assertEquals(Color.blue, m.getPaint()); [EOL]     assertEquals(m, this.lastEvent.getMarker()); [EOL]     try { [EOL]         m.setPaint(null); [EOL]         fail("Expected an IllegalArgumentException for null."); [EOL]     } catch (IllegalArgumentException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] } <line_num>: 94,113
public void testGetSetStroke() { [EOL]     ValueMarker m = new ValueMarker(1.1); [EOL]     m.addChangeListener(this); [EOL]     this.lastEvent = null; [EOL]     assertEquals(new BasicStroke(0.5f), m.getStroke()); [EOL]     m.setStroke(new BasicStroke(1.1f)); [EOL]     assertEquals(new BasicStroke(1.1f), m.getStroke()); [EOL]     assertEquals(m, this.lastEvent.getMarker()); [EOL]     try { [EOL]         m.setStroke(null); [EOL]         fail("Expected an IllegalArgumentException for null."); [EOL]     } catch (IllegalArgumentException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] } <line_num>: 118,137
public void testGetSetOutlinePaint() { [EOL]     ValueMarker m = new ValueMarker(1.1); [EOL]     m.addChangeListener(this); [EOL]     this.lastEvent = null; [EOL]     assertEquals(Color.gray, m.getOutlinePaint()); [EOL]     m.setOutlinePaint(Color.yellow); [EOL]     assertEquals(Color.yellow, m.getOutlinePaint()); [EOL]     assertEquals(m, this.lastEvent.getMarker()); [EOL]     m.setOutlinePaint(null); [EOL]     assertEquals(null, m.getOutlinePaint()); [EOL] } <line_num>: 142,156
public void testGetSetOutlineStroke() { [EOL]     ValueMarker m = new ValueMarker(1.1); [EOL]     m.addChangeListener(this); [EOL]     this.lastEvent = null; [EOL]     assertEquals(new BasicStroke(0.5f), m.getOutlineStroke()); [EOL]     m.setOutlineStroke(new BasicStroke(1.1f)); [EOL]     assertEquals(new BasicStroke(1.1f), m.getOutlineStroke()); [EOL]     assertEquals(m, this.lastEvent.getMarker()); [EOL]     m.setOutlineStroke(null); [EOL]     assertEquals(null, m.getOutlineStroke()); [EOL] } <line_num>: 161,175
public void testGetSetAlpha() { [EOL]     ValueMarker m = new ValueMarker(1.1); [EOL]     m.addChangeListener(this); [EOL]     this.lastEvent = null; [EOL]     assertEquals(0.8f, m.getAlpha(), EPSILON); [EOL]     m.setAlpha(0.5f); [EOL]     assertEquals(0.5f, m.getAlpha(), EPSILON); [EOL]     assertEquals(m, this.lastEvent.getMarker()); [EOL] } <line_num>: 182,192
public void testGetSetLabel() { [EOL]     ValueMarker m = new ValueMarker(1.1); [EOL]     m.addChangeListener(this); [EOL]     this.lastEvent = null; [EOL]     assertEquals(null, m.getLabel()); [EOL]     m.setLabel("XYZ"); [EOL]     assertEquals("XYZ", m.getLabel()); [EOL]     assertEquals(m, this.lastEvent.getMarker()); [EOL]     m.setLabel(null); [EOL]     assertEquals(null, m.getLabel()); [EOL] } <line_num>: 197,211
public void testGetSetLabelFont() { [EOL]     ValueMarker m = new ValueMarker(1.1); [EOL]     m.addChangeListener(this); [EOL]     this.lastEvent = null; [EOL]     assertEquals(new Font("Tahoma", Font.PLAIN, 9), m.getLabelFont()); [EOL]     m.setLabelFont(new Font("SansSerif", Font.BOLD, 10)); [EOL]     assertEquals(new Font("SansSerif", Font.BOLD, 10), m.getLabelFont()); [EOL]     assertEquals(m, this.lastEvent.getMarker()); [EOL]     try { [EOL]         m.setLabelFont(null); [EOL]         fail("Expected an IllegalArgumentException for null."); [EOL]     } catch (IllegalArgumentException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] } <line_num>: 216,235
public void testGetSetLabelPaint() { [EOL]     ValueMarker m = new ValueMarker(1.1); [EOL]     m.addChangeListener(this); [EOL]     this.lastEvent = null; [EOL]     assertEquals(Color.black, m.getLabelPaint()); [EOL]     m.setLabelPaint(Color.red); [EOL]     assertEquals(Color.red, m.getLabelPaint()); [EOL]     assertEquals(m, this.lastEvent.getMarker()); [EOL]     try { [EOL]         m.setLabelPaint(null); [EOL]         fail("Expected an IllegalArgumentException for null."); [EOL]     } catch (IllegalArgumentException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] } <line_num>: 240,259
public void testGetSetLabelAnchor() { [EOL]     ValueMarker m = new ValueMarker(1.1); [EOL]     m.addChangeListener(this); [EOL]     this.lastEvent = null; [EOL]     assertEquals(RectangleAnchor.TOP_LEFT, m.getLabelAnchor()); [EOL]     m.setLabelAnchor(RectangleAnchor.TOP); [EOL]     assertEquals(RectangleAnchor.TOP, m.getLabelAnchor()); [EOL]     assertEquals(m, this.lastEvent.getMarker()); [EOL]     try { [EOL]         m.setLabelAnchor(null); [EOL]         fail("Expected an IllegalArgumentException for null."); [EOL]     } catch (IllegalArgumentException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] } <line_num>: 264,283
public void testGetSetLabelOffset() { [EOL]     ValueMarker m = new ValueMarker(1.1); [EOL]     m.addChangeListener(this); [EOL]     this.lastEvent = null; [EOL]     assertEquals(new RectangleInsets(3, 3, 3, 3), m.getLabelOffset()); [EOL]     m.setLabelOffset(new RectangleInsets(1, 2, 3, 4)); [EOL]     assertEquals(new RectangleInsets(1, 2, 3, 4), m.getLabelOffset()); [EOL]     assertEquals(m, this.lastEvent.getMarker()); [EOL]     try { [EOL]         m.setLabelOffset(null); [EOL]         fail("Expected an IllegalArgumentException for null."); [EOL]     } catch (IllegalArgumentException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] } <line_num>: 288,307
public void testGetSetLabelOffsetType() { [EOL]     ValueMarker m = new ValueMarker(1.1); [EOL]     m.addChangeListener(this); [EOL]     this.lastEvent = null; [EOL]     assertEquals(LengthAdjustmentType.CONTRACT, m.getLabelOffsetType()); [EOL]     m.setLabelOffsetType(LengthAdjustmentType.EXPAND); [EOL]     assertEquals(LengthAdjustmentType.EXPAND, m.getLabelOffsetType()); [EOL]     assertEquals(m, this.lastEvent.getMarker()); [EOL]     try { [EOL]         m.setLabelOffsetType(null); [EOL]         fail("Expected an IllegalArgumentException for null."); [EOL]     } catch (IllegalArgumentException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] } <line_num>: 313,332
public void testGetSetLabelTextAnchor() { [EOL]     ValueMarker m = new ValueMarker(1.1); [EOL]     m.addChangeListener(this); [EOL]     this.lastEvent = null; [EOL]     assertEquals(TextAnchor.CENTER, m.getLabelTextAnchor()); [EOL]     m.setLabelTextAnchor(TextAnchor.BASELINE_LEFT); [EOL]     assertEquals(TextAnchor.BASELINE_LEFT, m.getLabelTextAnchor()); [EOL]     assertEquals(m, this.lastEvent.getMarker()); [EOL]     try { [EOL]         m.setLabelTextAnchor(null); [EOL]         fail("Expected an IllegalArgumentException for null."); [EOL]     } catch (IllegalArgumentException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] } <line_num>: 338,357
public void testListenersWithCategoryPlot() { [EOL]     CategoryPlot plot = new CategoryPlot(); [EOL]     CategoryMarker marker1 = new CategoryMarker("X"); [EOL]     ValueMarker marker2 = new ValueMarker(1.0); [EOL]     plot.addDomainMarker(marker1); [EOL]     plot.addRangeMarker(marker2); [EOL]     EventListener[] listeners1 = marker1.getListeners(MarkerChangeListener.class); [EOL]     assertTrue(Arrays.asList(listeners1).contains(plot)); [EOL]     EventListener[] listeners2 = marker1.getListeners(MarkerChangeListener.class); [EOL]     assertTrue(Arrays.asList(listeners2).contains(plot)); [EOL]     plot.clearDomainMarkers(); [EOL]     plot.clearRangeMarkers(); [EOL]     listeners1 = marker1.getListeners(MarkerChangeListener.class); [EOL]     assertFalse(Arrays.asList(listeners1).contains(plot)); [EOL]     listeners2 = marker1.getListeners(MarkerChangeListener.class); [EOL]     assertFalse(Arrays.asList(listeners2).contains(plot)); [EOL] } <line_num>: 362,380
public void testListenersWithXYPlot() { [EOL]     XYPlot plot = new XYPlot(); [EOL]     ValueMarker marker1 = new ValueMarker(1.0); [EOL]     ValueMarker marker2 = new ValueMarker(2.0); [EOL]     plot.addDomainMarker(marker1); [EOL]     plot.addRangeMarker(marker2); [EOL]     EventListener[] listeners1 = marker1.getListeners(MarkerChangeListener.class); [EOL]     assertTrue(Arrays.asList(listeners1).contains(plot)); [EOL]     EventListener[] listeners2 = marker1.getListeners(MarkerChangeListener.class); [EOL]     assertTrue(Arrays.asList(listeners2).contains(plot)); [EOL]     plot.clearDomainMarkers(); [EOL]     plot.clearRangeMarkers(); [EOL]     listeners1 = marker1.getListeners(MarkerChangeListener.class); [EOL]     assertFalse(Arrays.asList(listeners1).contains(plot)); [EOL]     listeners2 = marker1.getListeners(MarkerChangeListener.class); [EOL]     assertFalse(Arrays.asList(listeners2).contains(plot)); [EOL] } <line_num>: 385,403
public void markerChanged(MarkerChangeEvent event) { [EOL]     this.lastEvent = event; [EOL] } <line_num>: 410,412
