public MeterPlotTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 86,88
public static Test suite() { [EOL]     return new TestSuite(MeterPlotTests.class); [EOL] } <line_num>: 77,79
public void testEquals() { [EOL]     MeterPlot plot1 = new MeterPlot(); [EOL]     MeterPlot plot2 = new MeterPlot(); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setUnits("mph"); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setUnits("mph"); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRange(new Range(50.0, 70.0)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRange(new Range(50.0, 70.0)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.addInterval(new MeterInterval("Normal", new Range(55.0, 60.0))); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.addInterval(new MeterInterval("Normal", new Range(55.0, 60.0))); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDialOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDialOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDialShape(DialShape.CHORD); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDialShape(DialShape.CHORD); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDialBackgroundPaint(new GradientPaint(9.0f, 8.0f, Color.red, 7.0f, 6.0f, Color.blue)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDialBackgroundPaint(new GradientPaint(9.0f, 8.0f, Color.red, 7.0f, 6.0f, Color.blue)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDialOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.green, 3.0f, 4.0f, Color.red)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDialOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.green, 3.0f, 4.0f, Color.red)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setNeedlePaint(new GradientPaint(9.0f, 8.0f, Color.red, 7.0f, 6.0f, Color.blue)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setNeedlePaint(new GradientPaint(9.0f, 8.0f, Color.red, 7.0f, 6.0f, Color.blue)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setValueFont(new Font("Serif", Font.PLAIN, 6)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setValueFont(new Font("Serif", Font.PLAIN, 6)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setValuePaint(new GradientPaint(1.0f, 2.0f, Color.black, 3.0f, 4.0f, Color.white)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setValuePaint(new GradientPaint(1.0f, 2.0f, Color.black, 3.0f, 4.0f, Color.white)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setTickLabelsVisible(false); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setTickLabelsVisible(false); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setTickLabelFont(new Font("Serif", Font.PLAIN, 6)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setTickLabelFont(new Font("Serif", Font.PLAIN, 6)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setTickLabelPaint(Color.red); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setTickLabelPaint(Color.red); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setTickLabelFormat(new DecimalFormat("0")); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setTickLabelFormat(new DecimalFormat("0")); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setTickPaint(Color.green); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setTickPaint(Color.green); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setTickSize(1.23); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setTickSize(1.23); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDrawBorder(!plot1.getDrawBorder()); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDrawBorder(plot1.getDrawBorder()); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setMeterAngle(22); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setMeterAngle(22); [EOL]     assertTrue(plot1.equals(plot2)); [EOL] } <line_num>: 94,217
public void testCloning() { [EOL]     MeterPlot p1 = new MeterPlot(); [EOL]     MeterPlot p2 = null; [EOL]     try { [EOL]         p2 = (MeterPlot) p1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(p1 != p2); [EOL]     assertTrue(p1.getClass() == p2.getClass()); [EOL]     assertTrue(p1.equals(p2)); [EOL]     assertTrue(p1.getDataset() == p2.getDataset()); [EOL]     p1.getTickLabelFormat().setMinimumIntegerDigits(99); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.getTickLabelFormat().setMinimumIntegerDigits(99); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.addInterval(new MeterInterval("Test", new Range(1.234, 5.678))); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.addInterval(new MeterInterval("Test", new Range(1.234, 5.678))); [EOL]     assertTrue(p1.equals(p2)); [EOL] } <line_num>: 222,250
public void testSerialization1() { [EOL]     MeterPlot p1 = new MeterPlot(null); [EOL]     p1.setDialBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     p1.setDialOutlinePaint(new GradientPaint(4.0f, 3.0f, Color.red, 2.0f, 1.0f, Color.blue)); [EOL]     p1.setNeedlePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     p1.setTickLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     p1.setTickPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     MeterPlot p2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(p1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         p2 = (MeterPlot) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(p1, p2); [EOL] } <line_num>: 255,283
public void testSerialization2() { [EOL]     MeterPlot p1 = new MeterPlot(new DefaultValueDataset(1.23)); [EOL]     MeterPlot p2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(p1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         p2 = (MeterPlot) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(p1, p2); [EOL] } <line_num>: 288,307
