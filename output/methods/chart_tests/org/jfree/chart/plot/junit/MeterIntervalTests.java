public MeterIntervalTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 78,80
public static Test suite() { [EOL]     return new TestSuite(MeterIntervalTests.class); [EOL] } <line_num>: 69,71
public void testEquals() { [EOL]     MeterInterval m1 = new MeterInterval("Label 1", new Range(1.2, 3.4), Color.red, new BasicStroke(1.0f), Color.blue); [EOL]     MeterInterval m2 = new MeterInterval("Label 1", new Range(1.2, 3.4), Color.red, new BasicStroke(1.0f), Color.blue); [EOL]     assertTrue(m1.equals(m2)); [EOL]     assertTrue(m2.equals(m1)); [EOL]     m1 = new MeterInterval("Label 2", new Range(1.2, 3.4), Color.red, new BasicStroke(1.0f), Color.blue); [EOL]     assertFalse(m1.equals(m2)); [EOL]     m2 = new MeterInterval("Label 2", new Range(1.2, 3.4), Color.red, new BasicStroke(1.0f), Color.blue); [EOL]     assertTrue(m1.equals(m2)); [EOL] } <line_num>: 85,109
public void testCloning() { [EOL]     MeterInterval m1 = new MeterInterval("X", new Range(1.0, 2.0)); [EOL]     assertFalse(m1 instanceof Cloneable); [EOL] } <line_num>: 114,117
public void testSerialization() { [EOL]     MeterInterval m1 = new MeterInterval("X", new Range(1.0, 2.0)); [EOL]     MeterInterval m2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(m1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         m2 = (MeterInterval) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         System.out.println(e.toString()); [EOL]     } [EOL]     boolean b = m1.equals(m2); [EOL]     assertTrue(b); [EOL] } <line_num>: 122,144
