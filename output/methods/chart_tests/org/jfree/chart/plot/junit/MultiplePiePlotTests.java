public MultiplePiePlotTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 107,109
public static Test suite() { [EOL]     return new TestSuite(MultiplePiePlotTests.class); [EOL] } <line_num>: 88,90
public void plotChanged(PlotChangeEvent event) { [EOL]     this.lastEvent = event; [EOL] } <line_num>: 98,100
public void testConstructor() { [EOL]     MultiplePiePlot plot = new MultiplePiePlot(); [EOL]     assertNull(plot.getDataset()); [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     plot = new MultiplePiePlot(dataset); [EOL]     assertTrue(dataset.hasListener(plot)); [EOL] } <line_num>: 114,123
public void testEquals() { [EOL]     MultiplePiePlot p1 = new MultiplePiePlot(); [EOL]     MultiplePiePlot p2 = new MultiplePiePlot(); [EOL]     assertTrue(p1.equals(p2)); [EOL]     assertTrue(p2.equals(p1)); [EOL]     p1.setDataExtractOrder(TableOrder.BY_ROW); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setDataExtractOrder(TableOrder.BY_ROW); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setLimit(1.23); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setLimit(1.23); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setAggregatedItemsKey("Aggregated Items"); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setAggregatedItemsKey("Aggregated Items"); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setAggregatedItemsPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow)); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setAggregatedItemsPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow)); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setPieChart(ChartFactory.createPieChart("Title", null, true)); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setPieChart(ChartFactory.createPieChart("Title", null, true)); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setLegendItemShape(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0)); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setLegendItemShape(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0)); [EOL]     assertTrue(p1.equals(p2)); [EOL] } <line_num>: 128,165
public void testCloning() { [EOL]     MultiplePiePlot p1 = new MultiplePiePlot(); [EOL]     Rectangle2D rect = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0); [EOL]     p1.setLegendItemShape(rect); [EOL]     MultiplePiePlot p2 = null; [EOL]     try { [EOL]         p2 = (MultiplePiePlot) p1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(p1 != p2); [EOL]     assertTrue(p1.getClass() == p2.getClass()); [EOL]     assertTrue(p1.equals(p2)); [EOL]     rect.setRect(2.0, 3.0, 4.0, 5.0); [EOL]     assertFalse(p1.equals(p2)); [EOL] } <line_num>: 170,188
public void testSerialization() { [EOL]     MultiplePiePlot p1 = new MultiplePiePlot(null); [EOL]     p1.setAggregatedItemsPaint(new GradientPaint(1.0f, 2.0f, Color.yellow, 3.0f, 4.0f, Color.red)); [EOL]     MultiplePiePlot p2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(p1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         p2 = (MultiplePiePlot) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(p1, p2); [EOL] } <line_num>: 193,213
public void testGetLegendItems() { [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     dataset.addValue(35.0, "S1", "C1"); [EOL]     dataset.addValue(45.0, "S1", "C2"); [EOL]     dataset.addValue(55.0, "S2", "C1"); [EOL]     dataset.addValue(15.0, "S2", "C2"); [EOL]     MultiplePiePlot plot = new MultiplePiePlot(dataset); [EOL]     JFreeChart chart = new JFreeChart(plot); [EOL]     LegendItemCollection legendItems = plot.getLegendItems(); [EOL]     assertEquals(2, legendItems.getItemCount()); [EOL]     LegendItem item1 = legendItems.get(0); [EOL]     assertEquals("S1", item1.getLabel()); [EOL]     assertEquals("S1", item1.getSeriesKey()); [EOL]     assertEquals(0, item1.getSeriesIndex()); [EOL]     assertEquals(dataset, item1.getDataset()); [EOL]     assertEquals(0, item1.getDatasetIndex()); [EOL]     LegendItem item2 = legendItems.get(1); [EOL]     assertEquals("S2", item2.getLabel()); [EOL]     assertEquals("S2", item2.getSeriesKey()); [EOL]     assertEquals(1, item2.getSeriesIndex()); [EOL]     assertEquals(dataset, item2.getDataset()); [EOL]     assertEquals(0, item2.getDatasetIndex()); [EOL] } <line_num>: 218,241
