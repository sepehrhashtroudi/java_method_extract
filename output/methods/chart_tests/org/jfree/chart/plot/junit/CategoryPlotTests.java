public CategoryPlotTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 127,129
public static Test suite() { [EOL]     return new TestSuite(CategoryPlotTests.class); [EOL] } <line_num>: 118,120
public void testConstructor() { [EOL]     CategoryPlot plot = new CategoryPlot(); [EOL]     assertEquals(new RectangleInsets(4.0, 4.0, 4.0, 4.0), plot.getAxisOffset()); [EOL] } <line_num>: 134,138
public void testAxisRange() { [EOL]     DefaultCategoryDataset datasetA = new DefaultCategoryDataset(); [EOL]     DefaultCategoryDataset datasetB = new DefaultCategoryDataset(); [EOL]     datasetB.addValue(50.0, "R1", "C1"); [EOL]     datasetB.addValue(80.0, "R1", "C1"); [EOL]     CategoryPlot plot = new CategoryPlot(datasetA, new CategoryAxis(null), new NumberAxis(null), new LineAndShapeRenderer()); [EOL]     plot.setDataset(1, datasetB); [EOL]     plot.setRenderer(1, new LineAndShapeRenderer()); [EOL]     Range r = plot.getRangeAxis().getRange(); [EOL]     assertEquals(84.0, r.getUpperBound(), 0.00001); [EOL] } <line_num>: 143,154
public void testEquals() { [EOL]     CategoryPlot plot1 = new CategoryPlot(); [EOL]     CategoryPlot plot2 = new CategoryPlot(); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     assertTrue(plot2.equals(plot1)); [EOL]     plot1.setOrientation(PlotOrientation.HORIZONTAL); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setOrientation(PlotOrientation.HORIZONTAL); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDomainAxis(new CategoryAxis("Category Axis")); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDomainAxis(new CategoryAxis("Category Axis")); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDomainAxis(11, new CategoryAxis("Secondary Axis")); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDomainAxis(11, new CategoryAxis("Secondary Axis")); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDrawSharedDomainAxis(!plot1.getDrawSharedDomainAxis()); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDrawSharedDomainAxis(!plot2.getDrawSharedDomainAxis()); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeAxis(new NumberAxis("Range Axis")); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeAxis(new NumberAxis("Range Axis")); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeAxis(11, new NumberAxis("Secondary Range Axis")); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeAxis(11, new NumberAxis("Secondary Range Axis")); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.mapDatasetToDomainAxis(11, 11); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.mapDatasetToDomainAxis(11, 11); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.mapDatasetToRangeAxis(11, 11); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.mapDatasetToRangeAxis(11, 11); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRenderer(new AreaRenderer()); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRenderer(new AreaRenderer()); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRenderer(11, new AreaRenderer()); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRenderer(11, new AreaRenderer()); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setColumnRenderingOrder(SortOrder.DESCENDING); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setColumnRenderingOrder(SortOrder.DESCENDING); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRowRenderingOrder(SortOrder.DESCENDING); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRowRenderingOrder(SortOrder.DESCENDING); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDomainGridlinesVisible(true); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDomainGridlinesVisible(true); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDomainGridlinePosition(CategoryAnchor.END); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDomainGridlinePosition(CategoryAnchor.END); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     Stroke stroke = new BasicStroke(2.0f); [EOL]     plot1.setDomainGridlineStroke(stroke); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDomainGridlineStroke(stroke); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.yellow)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.yellow)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeGridlinesVisible(false); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeGridlinesVisible(false); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeGridlineStroke(stroke); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeGridlineStroke(stroke); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green, 3.0f, 4.0f, Color.yellow)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green, 3.0f, 4.0f, Color.yellow)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setAnchorValue(100.0); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setAnchorValue(100.0); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeCrosshairVisible(true); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeCrosshairVisible(true); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeCrosshairValue(100.0); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeCrosshairValue(100.0); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeCrosshairStroke(stroke); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeCrosshairStroke(stroke); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.yellow)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.yellow)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeCrosshairLockedOnData(false); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeCrosshairLockedOnData(false); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.addDomainMarker(new CategoryMarker("C1"), Layer.FOREGROUND); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.addDomainMarker(new CategoryMarker("C1"), Layer.FOREGROUND); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.addDomainMarker(new CategoryMarker("C2"), Layer.BACKGROUND); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.addDomainMarker(new CategoryMarker("C2"), Layer.BACKGROUND); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.addAnnotation(new CategoryTextAnnotation("Text", "Category", 43.0)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.addAnnotation(new CategoryTextAnnotation("Text", "Category", 43.0)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setWeight(3); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setWeight(3); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setFixedDomainAxisSpace(new AxisSpace()); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setFixedDomainAxisSpace(new AxisSpace()); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setFixedRangeAxisSpace(new AxisSpace()); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setFixedRangeAxisSpace(new AxisSpace()); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setFixedLegendItems(new LegendItemCollection()); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setFixedLegendItems(new LegendItemCollection()); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setCrosshairDatasetIndex(99); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setCrosshairDatasetIndex(99); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDomainCrosshairColumnKey("A"); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDomainCrosshairColumnKey("A"); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDomainCrosshairRowKey("B"); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDomainCrosshairRowKey("B"); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDomainCrosshairVisible(true); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDomainCrosshairVisible(true); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDomainCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDomainCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDomainCrosshairStroke(new BasicStroke(1.23f)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDomainCrosshairStroke(new BasicStroke(1.23f)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeMinorGridlinesVisible(true); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeMinorGridlinesVisible(true); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeMinorGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeMinorGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeMinorGridlineStroke(new BasicStroke(1.23f)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeMinorGridlineStroke(new BasicStroke(1.23f)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeZeroBaselineVisible(!plot1.isRangeZeroBaselineVisible()); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeZeroBaselineVisible(!plot2.isRangeZeroBaselineVisible()); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeZeroBaselineStroke(new BasicStroke(1.23f)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeZeroBaselineStroke(new BasicStroke(1.23f)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setShadowGenerator(new DefaultShadowGenerator(5, Color.gray, 0.6f, 4, -Math.PI / 4)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setShadowGenerator(new DefaultShadowGenerator(5, Color.gray, 0.6f, 4, -Math.PI / 4)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setShadowGenerator(null); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setShadowGenerator(null); [EOL]     assertTrue(plot1.equals(plot2)); [EOL] } <line_num>: 159,510
public void testCloning() { [EOL]     CategoryPlot p1 = new CategoryPlot(); [EOL]     p1.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.yellow)); [EOL]     p1.setRangeMinorGridlinePaint(new GradientPaint(2.0f, 3.0f, Color.white, 4.0f, 5.0f, Color.red)); [EOL]     p1.setRangeZeroBaselinePaint(new GradientPaint(3.0f, 4.0f, Color.red, 5.0f, 6.0f, Color.white)); [EOL]     CategoryPlot p2 = null; [EOL]     try { [EOL]         p2 = (CategoryPlot) p1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]         System.err.println("Failed to clone."); [EOL]     } [EOL]     assertTrue(p1 != p2); [EOL]     assertTrue(p1.getClass() == p2.getClass()); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.addAnnotation(new CategoryLineAnnotation("C1", 1.0, "C2", 2.0, Color.red, new BasicStroke(1.0f))); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.addAnnotation(new CategoryLineAnnotation("C1", 1.0, "C2", 2.0, Color.red, new BasicStroke(1.0f))); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.addDomainMarker(new CategoryMarker("C1"), Layer.FOREGROUND); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.addDomainMarker(new CategoryMarker("C1"), Layer.FOREGROUND); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.addDomainMarker(new CategoryMarker("C2"), Layer.BACKGROUND); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.addDomainMarker(new CategoryMarker("C2"), Layer.BACKGROUND); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.addRangeMarker(new ValueMarker(1.0), Layer.FOREGROUND); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.addRangeMarker(new ValueMarker(1.0), Layer.FOREGROUND); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.addRangeMarker(new ValueMarker(2.0), Layer.BACKGROUND); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.addRangeMarker(new ValueMarker(2.0), Layer.BACKGROUND); [EOL]     assertTrue(p1.equals(p2)); [EOL] } <line_num>: 515,562
public void testCloning2() { [EOL]     AxisSpace da1 = new AxisSpace(); [EOL]     AxisSpace ra1 = new AxisSpace(); [EOL]     CategoryPlot p1 = new CategoryPlot(); [EOL]     p1.setFixedDomainAxisSpace(da1); [EOL]     p1.setFixedRangeAxisSpace(ra1); [EOL]     CategoryPlot p2 = null; [EOL]     try { [EOL]         p2 = (CategoryPlot) p1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(p1 != p2); [EOL]     assertTrue(p1.getClass() == p2.getClass()); [EOL]     assertTrue(p1.equals(p2)); [EOL]     da1.setBottom(99.0); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.getFixedDomainAxisSpace().setBottom(99.0); [EOL]     assertTrue(p1.equals(p2)); [EOL]     ra1.setBottom(11.0); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.getFixedRangeAxisSpace().setBottom(11.0); [EOL]     assertTrue(p1.equals(p2)); [EOL] } <line_num>: 567,593
public void testCloning3() { [EOL]     LegendItemCollection c1 = new LegendItemCollection(); [EOL]     CategoryPlot p1 = new CategoryPlot(); [EOL]     p1.setFixedLegendItems(c1); [EOL]     CategoryPlot p2 = null; [EOL]     try { [EOL]         p2 = (CategoryPlot) p1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(p1 != p2); [EOL]     assertTrue(p1.getClass() == p2.getClass()); [EOL]     assertTrue(p1.equals(p2)); [EOL]     c1.add(new LegendItem("X", "XX", "tt", "url", true, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), true, Color.red, true, Color.yellow, new BasicStroke(1.0f), true, new Line2D.Double(1.0, 2.0, 3.0, 4.0), new BasicStroke(1.0f), Color.green)); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.getFixedLegendItems().add(new LegendItem("X", "XX", "tt", "url", true, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), true, Color.red, true, Color.yellow, new BasicStroke(1.0f), true, new Line2D.Double(1.0, 2.0, 3.0, 4.0), new BasicStroke(1.0f), Color.green)); [EOL]     assertTrue(p1.equals(p2)); [EOL] } <line_num>: 598,625
public void testBug2817504() { [EOL]     CategoryPlot p1 = new CategoryPlot(); [EOL]     LineAndShapeRenderer r1 = new LineAndShapeRenderer(); [EOL]     p1.setRenderer(r1); [EOL]     CategoryPlot p2 = null; [EOL]     try { [EOL]         p2 = (CategoryPlot) p1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(p1 != p2); [EOL]     assertTrue(p1.getClass() == p2.getClass()); [EOL]     assertTrue(p1.equals(p2)); [EOL]     LineAndShapeRenderer r2 = (LineAndShapeRenderer) p2.getRenderer(); [EOL]     assertTrue(r2.getPlot() == p2); [EOL] } <line_num>: 631,649
public void testSerialization() { [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     CategoryAxis domainAxis = new CategoryAxis("Domain"); [EOL]     NumberAxis rangeAxis = new NumberAxis("Range"); [EOL]     BarRenderer renderer = new BarRenderer(); [EOL]     CategoryPlot p1 = new CategoryPlot(dataset, domainAxis, rangeAxis, renderer); [EOL]     p1.setOrientation(PlotOrientation.HORIZONTAL); [EOL]     CategoryPlot p2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(p1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         p2 = (CategoryPlot) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(p1.equals(p2)); [EOL] } <line_num>: 654,678
public void testSerialization2() { [EOL]     DefaultCategoryDataset data = new DefaultCategoryDataset(); [EOL]     CategoryAxis domainAxis = new CategoryAxis("Domain"); [EOL]     NumberAxis rangeAxis = new NumberAxis("Range"); [EOL]     BarRenderer renderer = new BarRenderer(); [EOL]     CategoryPlot p1 = new CategoryPlot(data, domainAxis, rangeAxis, renderer); [EOL]     p1.setOrientation(PlotOrientation.VERTICAL); [EOL]     CategoryPlot p2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(p1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         p2 = (CategoryPlot) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         fail(e.toString()); [EOL]     } [EOL]     assertEquals(p1, p2); [EOL] } <line_num>: 683,708
public void testSerialization3() { [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     JFreeChart chart = ChartFactory.createBarChart("Test Chart", "Category Axis", "Value Axis", dataset, true); [EOL]     JFreeChart chart2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(chart); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         chart2 = (JFreeChart) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         fail(e.toString()); [EOL]     } [EOL]     boolean passed = true; [EOL]     try { [EOL]         chart2.createBufferedImage(300, 200); [EOL]     } catch (Exception e) { [EOL]         passed = false; [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(passed); [EOL] } <line_num>: 713,745
public void testSerialization4() { [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     JFreeChart chart = ChartFactory.createBarChart("Test Chart", "Category Axis", "Value Axis", dataset, true); [EOL]     CategoryPlot plot = (CategoryPlot) chart.getPlot(); [EOL]     plot.addRangeMarker(new ValueMarker(1.1), Layer.FOREGROUND); [EOL]     plot.addRangeMarker(new IntervalMarker(2.2, 3.3), Layer.BACKGROUND); [EOL]     JFreeChart chart2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(chart); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         chart2 = (JFreeChart) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         fail(e.toString()); [EOL]     } [EOL]     assertEquals(chart, chart2); [EOL]     boolean passed = true; [EOL]     try { [EOL]         chart2.createBufferedImage(300, 200); [EOL]     } catch (Exception e) { [EOL]         passed = false; [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(passed); [EOL] } <line_num>: 750,786
public void testSerialization5() { [EOL]     DefaultCategoryDataset dataset1 = new DefaultCategoryDataset(); [EOL]     CategoryAxis domainAxis1 = new CategoryAxis("Domain 1"); [EOL]     NumberAxis rangeAxis1 = new NumberAxis("Range 1"); [EOL]     BarRenderer renderer1 = new BarRenderer(); [EOL]     CategoryPlot p1 = new CategoryPlot(dataset1, domainAxis1, rangeAxis1, renderer1); [EOL]     CategoryAxis domainAxis2 = new CategoryAxis("Domain 2"); [EOL]     NumberAxis rangeAxis2 = new NumberAxis("Range 2"); [EOL]     BarRenderer renderer2 = new BarRenderer(); [EOL]     DefaultCategoryDataset dataset2 = new DefaultCategoryDataset(); [EOL]     p1.setDataset(1, dataset2); [EOL]     p1.setDomainAxis(1, domainAxis2); [EOL]     p1.setRangeAxis(1, rangeAxis2); [EOL]     p1.setRenderer(1, renderer2); [EOL]     CategoryPlot p2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(p1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         p2 = (CategoryPlot) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         fail(e.toString()); [EOL]     } [EOL]     assertEquals(p1, p2); [EOL]     CategoryAxis domainAxisA = p2.getDomainAxis(0); [EOL]     NumberAxis rangeAxisA = (NumberAxis) p2.getRangeAxis(0); [EOL]     DefaultCategoryDataset datasetA = (DefaultCategoryDataset) p2.getDataset(0); [EOL]     BarRenderer rendererA = (BarRenderer) p2.getRenderer(0); [EOL]     CategoryAxis domainAxisB = p2.getDomainAxis(1); [EOL]     NumberAxis rangeAxisB = (NumberAxis) p2.getRangeAxis(1); [EOL]     DefaultCategoryDataset datasetB = (DefaultCategoryDataset) p2.getDataset(1); [EOL]     BarRenderer rendererB = (BarRenderer) p2.getRenderer(1); [EOL]     assertTrue(datasetA.hasListener(p2)); [EOL]     assertTrue(domainAxisA.hasListener(p2)); [EOL]     assertTrue(rangeAxisA.hasListener(p2)); [EOL]     assertTrue(rendererA.hasListener(p2)); [EOL]     assertTrue(datasetB.hasListener(p2)); [EOL]     assertTrue(domainAxisB.hasListener(p2)); [EOL]     assertTrue(rangeAxisB.hasListener(p2)); [EOL]     assertTrue(rendererB.hasListener(p2)); [EOL] } <line_num>: 793,844
public void testSetRenderer() { [EOL]     CategoryPlot plot = new CategoryPlot(); [EOL]     CategoryItemRenderer renderer = new LineAndShapeRenderer(); [EOL]     plot.setRenderer(renderer); [EOL]     MyPlotChangeListener listener = new MyPlotChangeListener(); [EOL]     plot.addChangeListener(listener); [EOL]     renderer.setSeriesPaint(0, Color.black); [EOL]     assertTrue(listener.getEvent() != null); [EOL] } <line_num>: 850,860
public void test1169972() { [EOL]     CategoryPlot plot = new CategoryPlot(null, null, null, null); [EOL]     plot.setDomainAxis(new CategoryAxis("C")); [EOL]     plot.setRangeAxis(new NumberAxis("Y")); [EOL]     plot.setRenderer(new BarRenderer()); [EOL]     plot.setDataset(new DefaultCategoryDataset()); [EOL]     assertTrue(plot != null); [EOL] } <line_num>: 865,872
public void testAddDomainMarker() { [EOL]     CategoryPlot plot = new CategoryPlot(); [EOL]     CategoryMarker m = new CategoryMarker("C1"); [EOL]     plot.addDomainMarker(m); [EOL]     List listeners = Arrays.asList(m.getListeners(MarkerChangeListener.class)); [EOL]     assertTrue(listeners.contains(plot)); [EOL]     plot.clearDomainMarkers(); [EOL]     listeners = Arrays.asList(m.getListeners(MarkerChangeListener.class)); [EOL]     assertFalse(listeners.contains(plot)); [EOL] } <line_num>: 877,887
public void testAddRangeMarker() { [EOL]     CategoryPlot plot = new CategoryPlot(); [EOL]     Marker m = new ValueMarker(1.0); [EOL]     plot.addRangeMarker(m); [EOL]     List listeners = Arrays.asList(m.getListeners(MarkerChangeListener.class)); [EOL]     assertTrue(listeners.contains(plot)); [EOL]     plot.clearRangeMarkers(); [EOL]     listeners = Arrays.asList(m.getListeners(MarkerChangeListener.class)); [EOL]     assertFalse(listeners.contains(plot)); [EOL] } <line_num>: 892,902
public void test1654215() { [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     JFreeChart chart = ChartFactory.createLineChart("Title", "X", "Y", dataset, true); [EOL]     CategoryPlot plot = (CategoryPlot) chart.getPlot(); [EOL]     plot.setRenderer(1, new LineAndShapeRenderer()); [EOL]     boolean success = false; [EOL]     try { [EOL]         BufferedImage image = new BufferedImage(200, 100, BufferedImage.TYPE_INT_RGB); [EOL]         Graphics2D g2 = image.createGraphics(); [EOL]         chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null); [EOL]         g2.dispose(); [EOL]         success = true; [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]         success = false; [EOL]     } [EOL]     assertTrue(success); [EOL] } <line_num>: 908,928
public void testGetDomainAxisIndex() { [EOL]     CategoryAxis domainAxis1 = new CategoryAxis("X1"); [EOL]     CategoryAxis domainAxis2 = new CategoryAxis("X2"); [EOL]     NumberAxis rangeAxis1 = new NumberAxis("Y1"); [EOL]     CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, null); [EOL]     assertEquals(0, plot.getDomainAxisIndex(domainAxis1)); [EOL]     assertEquals(-1, plot.getDomainAxisIndex(domainAxis2)); [EOL]     plot.setDomainAxis(1, domainAxis2); [EOL]     assertEquals(1, plot.getDomainAxisIndex(domainAxis2)); [EOL]     assertEquals(-1, plot.getDomainAxisIndex(new CategoryAxis("X2"))); [EOL]     boolean pass = false; [EOL]     try { [EOL]         plot.getDomainAxisIndex(null); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 933,952
public void testGetRangeAxisIndex() { [EOL]     CategoryAxis domainAxis1 = new CategoryAxis("X1"); [EOL]     NumberAxis rangeAxis1 = new NumberAxis("Y1"); [EOL]     NumberAxis rangeAxis2 = new NumberAxis("Y2"); [EOL]     CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, null); [EOL]     assertEquals(0, plot.getRangeAxisIndex(rangeAxis1)); [EOL]     assertEquals(-1, plot.getRangeAxisIndex(rangeAxis2)); [EOL]     plot.setRangeAxis(1, rangeAxis2); [EOL]     assertEquals(1, plot.getRangeAxisIndex(rangeAxis2)); [EOL]     assertEquals(-1, plot.getRangeAxisIndex(new NumberAxis("Y2"))); [EOL]     boolean pass = false; [EOL]     try { [EOL]         plot.getRangeAxisIndex(null); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 957,976
public void testRemoveDomainMarker() { [EOL]     CategoryPlot plot = new CategoryPlot(); [EOL]     assertFalse(plot.removeDomainMarker(new CategoryMarker("Category 1"))); [EOL] } <line_num>: 982,985
public void testRemoveRangeMarker() { [EOL]     CategoryPlot plot = new CategoryPlot(); [EOL]     assertFalse(plot.removeRangeMarker(new ValueMarker(0.5))); [EOL] } <line_num>: 991,994
public void testGetDomainAxisForDataset() { [EOL]     CategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     CategoryAxis xAxis = new CategoryAxis("X"); [EOL]     NumberAxis yAxis = new NumberAxis("Y"); [EOL]     CategoryItemRenderer renderer = new BarRenderer(); [EOL]     CategoryPlot plot = new CategoryPlot(dataset, xAxis, yAxis, renderer); [EOL]     assertEquals(xAxis, plot.getDomainAxisForDataset(0)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         plot.getDomainAxisForDataset(-1); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     CategoryAxis xAxis2 = new CategoryAxis("X2"); [EOL]     plot.setDomainAxis(1, xAxis2); [EOL]     assertEquals(xAxis, plot.getDomainAxisForDataset(0)); [EOL]     plot.mapDatasetToDomainAxis(0, 1); [EOL]     assertEquals(xAxis2, plot.getDomainAxisForDataset(0)); [EOL]     List axisIndices = Arrays.asList(new Integer[] { new Integer(0), new Integer(1) }); [EOL]     plot.mapDatasetToDomainAxes(0, axisIndices); [EOL]     assertEquals(xAxis, plot.getDomainAxisForDataset(0)); [EOL]     axisIndices = Arrays.asList(new Integer[] { new Integer(1), new Integer(2) }); [EOL]     plot.mapDatasetToDomainAxes(0, axisIndices); [EOL]     assertEquals(xAxis2, plot.getDomainAxisForDataset(0)); [EOL] } <line_num>: 999,1035
public void testGetRangeAxisForDataset() { [EOL]     CategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     CategoryAxis xAxis = new CategoryAxis("X"); [EOL]     NumberAxis yAxis = new NumberAxis("Y"); [EOL]     CategoryItemRenderer renderer = new DefaultCategoryItemRenderer(); [EOL]     CategoryPlot plot = new CategoryPlot(dataset, xAxis, yAxis, renderer); [EOL]     assertEquals(yAxis, plot.getRangeAxisForDataset(0)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         plot.getRangeAxisForDataset(-1); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     NumberAxis yAxis2 = new NumberAxis("Y2"); [EOL]     plot.setRangeAxis(1, yAxis2); [EOL]     assertEquals(yAxis, plot.getRangeAxisForDataset(0)); [EOL]     plot.mapDatasetToRangeAxis(0, 1); [EOL]     assertEquals(yAxis2, plot.getRangeAxisForDataset(0)); [EOL]     List axisIndices = Arrays.asList(new Integer[] { new Integer(0), new Integer(1) }); [EOL]     plot.mapDatasetToRangeAxes(0, axisIndices); [EOL]     assertEquals(yAxis, plot.getRangeAxisForDataset(0)); [EOL]     axisIndices = Arrays.asList(new Integer[] { new Integer(1), new Integer(2) }); [EOL]     plot.mapDatasetToRangeAxes(0, axisIndices); [EOL]     assertEquals(yAxis2, plot.getRangeAxisForDataset(0)); [EOL] } <line_num>: 1040,1076
