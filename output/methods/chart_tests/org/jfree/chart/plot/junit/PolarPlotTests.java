public PolarPlotTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 87,89
public static Test suite() { [EOL]     return new TestSuite(PolarPlotTests.class); [EOL] } <line_num>: 78,80
public void testEquals() { [EOL]     PolarPlot plot1 = new PolarPlot(); [EOL]     PolarPlot plot2 = new PolarPlot(); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     assertTrue(plot2.equals(plot1)); [EOL]     plot1.setAngleGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setAngleGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     Stroke s = new BasicStroke(1.23f); [EOL]     plot1.setAngleGridlineStroke(s); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setAngleGridlineStroke(s); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setAngleTickUnit(new NumberTickUnit(11.0)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setAngleTickUnit(new NumberTickUnit(11.0)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setAngleGridlinesVisible(false); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setAngleGridlinesVisible(false); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setAngleLabelFont(new Font("Serif", Font.PLAIN, 9)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setAngleLabelFont(new Font("Serif", Font.PLAIN, 9)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setAngleLabelPaint(new GradientPaint(9.0f, 8.0f, Color.blue, 7.0f, 6.0f, Color.red)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setAngleLabelPaint(new GradientPaint(9.0f, 8.0f, Color.blue, 7.0f, 6.0f, Color.red)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setAngleLabelsVisible(false); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setAngleLabelsVisible(false); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setAxis(new NumberAxis("Test")); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setAxis(new NumberAxis("Test")); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRadiusGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.black)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRadiusGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.black)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRadiusGridlineStroke(s); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRadiusGridlineStroke(s); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRadiusGridlinesVisible(false); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRadiusGridlinesVisible(false); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.addCornerTextItem("XYZ"); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.addCornerTextItem("XYZ"); [EOL]     assertTrue(plot1.equals(plot2)); [EOL] } <line_num>: 94,166
public void testCloning() { [EOL]     PolarPlot p1 = new PolarPlot(); [EOL]     PolarPlot p2 = null; [EOL]     try { [EOL]         p2 = (PolarPlot) p1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(p1 != p2); [EOL]     assertTrue(p1.getClass() == p2.getClass()); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.addCornerTextItem("XYZ"); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.addCornerTextItem("XYZ"); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1 = new PolarPlot(new DefaultXYDataset(), new NumberAxis("A1"), new DefaultPolarItemRenderer()); [EOL]     p2 = null; [EOL]     try { [EOL]         p2 = (PolarPlot) p1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]         System.err.println("Failed to clone."); [EOL]     } [EOL]     assertTrue(p1 != p2); [EOL]     assertTrue(p1.getClass() == p2.getClass()); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.getAxis().setLabel("ABC"); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.getAxis().setLabel("ABC"); [EOL]     assertTrue(p1.equals(p2)); [EOL] } <line_num>: 171,210
public void testSerialization() { [EOL]     PolarPlot p1 = new PolarPlot(); [EOL]     p1.setAngleGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     p1.setAngleLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     p1.setRadiusGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     PolarPlot p2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(p1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         p2 = (PolarPlot) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(p1, p2); [EOL] } <line_num>: 215,242
