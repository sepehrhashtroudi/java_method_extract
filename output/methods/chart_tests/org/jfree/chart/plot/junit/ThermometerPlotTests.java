public ThermometerPlotTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 86,88
public static Test suite() { [EOL]     return new TestSuite(ThermometerPlotTests.class); [EOL] } <line_num>: 77,79
public void testEquals() { [EOL]     ThermometerPlot p1 = new ThermometerPlot(); [EOL]     ThermometerPlot p2 = new ThermometerPlot(); [EOL]     assertTrue(p1.equals(p2)); [EOL]     assertTrue(p2.equals(p1)); [EOL]     p1.setPadding(new RectangleInsets(1.0, 2.0, 3.0, 4.0)); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setPadding(new RectangleInsets(1.0, 2.0, 3.0, 4.0)); [EOL]     assertTrue(p2.equals(p1)); [EOL]     BasicStroke s = new BasicStroke(1.23f); [EOL]     p1.setThermometerStroke(s); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setThermometerStroke(s); [EOL]     assertTrue(p2.equals(p1)); [EOL]     p1.setThermometerPaint(new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.red)); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setThermometerPaint(new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.red)); [EOL]     assertTrue(p2.equals(p1)); [EOL]     p1.setUnits(ThermometerPlot.UNITS_KELVIN); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setUnits(ThermometerPlot.UNITS_KELVIN); [EOL]     assertTrue(p2.equals(p1)); [EOL]     p1.setValueLocation(ThermometerPlot.LEFT); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setValueLocation(ThermometerPlot.LEFT); [EOL]     assertTrue(p2.equals(p1)); [EOL]     p1.setAxisLocation(ThermometerPlot.RIGHT); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setAxisLocation(ThermometerPlot.RIGHT); [EOL]     assertTrue(p2.equals(p1)); [EOL]     p1.setValueFont(new Font("Serif", Font.PLAIN, 9)); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setValueFont(new Font("Serif", Font.PLAIN, 9)); [EOL]     assertTrue(p2.equals(p1)); [EOL]     p1.setValuePaint(new GradientPaint(4.0f, 5.0f, Color.red, 6.0f, 7.0f, Color.white)); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setValuePaint(new GradientPaint(4.0f, 5.0f, Color.red, 6.0f, 7.0f, Color.white)); [EOL]     assertTrue(p2.equals(p1)); [EOL]     p1.setValueFormat(new DecimalFormat("0.0000")); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setValueFormat(new DecimalFormat("0.0000")); [EOL]     assertTrue(p2.equals(p1)); [EOL]     p1.setMercuryPaint(new GradientPaint(9.0f, 8.0f, Color.red, 7.0f, 6.0f, Color.blue)); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setMercuryPaint(new GradientPaint(9.0f, 8.0f, Color.red, 7.0f, 6.0f, Color.blue)); [EOL]     assertTrue(p2.equals(p1)); [EOL]     p1.setSubrange(1, 1.0, 2.0); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setSubrange(1, 1.0, 2.0); [EOL]     assertTrue(p2.equals(p1)); [EOL]     p1.setSubrangePaint(1, new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow)); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setSubrangePaint(1, new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow)); [EOL]     assertTrue(p2.equals(p1)); [EOL]     p1.setBulbRadius(9); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setBulbRadius(9); [EOL]     assertTrue(p2.equals(p1)); [EOL]     p1.setColumnRadius(8); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setColumnRadius(8); [EOL]     assertTrue(p2.equals(p1)); [EOL]     p1.setGap(7); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setGap(7); [EOL]     assertTrue(p2.equals(p1)); [EOL] } <line_num>: 93,192
public void testCloning() { [EOL]     ThermometerPlot p1 = new ThermometerPlot(); [EOL]     ThermometerPlot p2 = null; [EOL]     try { [EOL]         p2 = (ThermometerPlot) p1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(p1 != p2); [EOL]     assertTrue(p1.getClass() == p2.getClass()); [EOL]     assertTrue(p1.equals(p2)); [EOL] } <line_num>: 197,209
public void testSerialization() { [EOL]     ThermometerPlot p1 = new ThermometerPlot(); [EOL]     ThermometerPlot p2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(p1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         p2 = (ThermometerPlot) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(p1.equals(p2)); [EOL] } <line_num>: 214,235
public void testSerialization2() { [EOL]     ThermometerPlot p1 = new ThermometerPlot(); [EOL]     p1.setSubrangePaint(1, new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     ThermometerPlot p2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(p1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         p2 = (ThermometerPlot) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(p1.equals(p2)); [EOL] } <line_num>: 240,261
