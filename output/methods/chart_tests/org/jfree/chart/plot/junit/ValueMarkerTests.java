public ValueMarkerTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 98,100
public static Test suite() { [EOL]     return new TestSuite(ValueMarkerTests.class); [EOL] } <line_num>: 89,91
public void testEquals() { [EOL]     Marker m1 = new ValueMarker(45.0); [EOL]     Marker m2 = new ValueMarker(45.0); [EOL]     assertTrue(m1.equals(m2)); [EOL]     assertTrue(m2.equals(m1)); [EOL]     m1.setPaint(new GradientPaint(1.0f, 2.0f, Color.green, 3.0f, 4.0f, Color.red)); [EOL]     assertFalse(m1.equals(m2)); [EOL]     m2.setPaint(new GradientPaint(1.0f, 2.0f, Color.green, 3.0f, 4.0f, Color.red)); [EOL]     assertTrue(m1.equals(m2)); [EOL]     BasicStroke stroke = new BasicStroke(2.2f); [EOL]     m1.setStroke(stroke); [EOL]     assertFalse(m1.equals(m2)); [EOL]     m2.setStroke(stroke); [EOL]     assertTrue(m1.equals(m2)); [EOL]     m1.setOutlinePaint(new GradientPaint(4.0f, 3.0f, Color.yellow, 2.0f, 1.0f, Color.white)); [EOL]     assertFalse(m1.equals(m2)); [EOL]     m2.setOutlinePaint(new GradientPaint(4.0f, 3.0f, Color.yellow, 2.0f, 1.0f, Color.white)); [EOL]     assertTrue(m1.equals(m2)); [EOL]     m1.setOutlineStroke(stroke); [EOL]     assertFalse(m1.equals(m2)); [EOL]     m2.setOutlineStroke(stroke); [EOL]     assertTrue(m1.equals(m2)); [EOL]     m1.setAlpha(0.1f); [EOL]     assertFalse(m1.equals(m2)); [EOL]     m2.setAlpha(0.1f); [EOL]     assertTrue(m1.equals(m2)); [EOL]     m1.setLabel("New Label"); [EOL]     assertFalse(m1.equals(m2)); [EOL]     m2.setLabel("New Label"); [EOL]     assertTrue(m1.equals(m2)); [EOL]     m1.setLabelFont(new Font("SansSerif", Font.PLAIN, 10)); [EOL]     assertFalse(m1.equals(m2)); [EOL]     m2.setLabelFont(new Font("SansSerif", Font.PLAIN, 10)); [EOL]     assertTrue(m1.equals(m2)); [EOL]     m1.setLabelPaint(new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.yellow)); [EOL]     assertFalse(m1.equals(m2)); [EOL]     m2.setLabelPaint(new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.yellow)); [EOL]     assertTrue(m1.equals(m2)); [EOL]     m1.setLabelAnchor(RectangleAnchor.TOP_RIGHT); [EOL]     assertFalse(m1.equals(m2)); [EOL]     m2.setLabelAnchor(RectangleAnchor.TOP_RIGHT); [EOL]     assertTrue(m1.equals(m2)); [EOL]     m1.setLabelTextAnchor(TextAnchor.BASELINE_RIGHT); [EOL]     assertFalse(m1.equals(m2)); [EOL]     m2.setLabelTextAnchor(TextAnchor.BASELINE_RIGHT); [EOL]     assertTrue(m1.equals(m2)); [EOL]     m1.setLabelOffset(new RectangleInsets(10.0, 10.0, 10.0, 10.0)); [EOL]     assertFalse(m1.equals(m2)); [EOL]     m2.setLabelOffset(new RectangleInsets(10.0, 10.0, 10.0, 10.0)); [EOL]     assertTrue(m1.equals(m2)); [EOL]     m1.setLabelOffsetType(LengthAdjustmentType.EXPAND); [EOL]     assertFalse(m1.equals(m2)); [EOL]     m2.setLabelOffsetType(LengthAdjustmentType.EXPAND); [EOL]     assertTrue(m1.equals(m2)); [EOL]     m1 = new ValueMarker(12.3); [EOL]     m2 = new ValueMarker(45.6); [EOL]     assertFalse(m1.equals(m2)); [EOL]     m2 = new ValueMarker(12.3); [EOL]     assertTrue(m1.equals(m2)); [EOL] } <line_num>: 105,185
public void testCloning() { [EOL]     ValueMarker m1 = new ValueMarker(25.0); [EOL]     ValueMarker m2 = null; [EOL]     try { [EOL]         m2 = (ValueMarker) m1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(m1 != m2); [EOL]     assertTrue(m1.getClass() == m2.getClass()); [EOL]     assertTrue(m1.equals(m2)); [EOL] } <line_num>: 190,202
public void testSerialization() { [EOL]     ValueMarker m1 = new ValueMarker(25.0); [EOL]     ValueMarker m2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(m1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         m2 = (ValueMarker) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     boolean b = m1.equals(m2); [EOL]     assertTrue(b); [EOL] } <line_num>: 207,229
public void testGetSetValue() { [EOL]     ValueMarker m = new ValueMarker(1.1); [EOL]     m.addChangeListener(this); [EOL]     this.lastEvent = null; [EOL]     assertEquals(1.1, m.getValue(), EPSILON); [EOL]     m.setValue(33.3); [EOL]     assertEquals(33.3, m.getValue(), EPSILON); [EOL]     assertEquals(m, this.lastEvent.getMarker()); [EOL] } <line_num>: 236,244
public void markerChanged(MarkerChangeEvent event) { [EOL]     this.lastEvent = event; [EOL] } <line_num>: 251,253
public void test1802195() { [EOL]     ValueMarker m1 = new ValueMarker(25.0); [EOL]     ValueMarker m2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(m1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         m2 = (ValueMarker) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     boolean b = m1.equals(m2); [EOL]     assertTrue(b); [EOL]     boolean pass = true; [EOL]     try { [EOL]         m2.setValue(-10.0); [EOL]     } catch (NullPointerException e) { [EOL]         pass = false; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 258,289
public void test1808376() { [EOL]     Stroke stroke = new BasicStroke(1.0f); [EOL]     Stroke outlineStroke = new BasicStroke(2.0f); [EOL]     ValueMarker m = new ValueMarker(1.0, Color.red, stroke, Color.blue, outlineStroke, 0.5f); [EOL]     assertEquals(1.0, m.getValue(), EPSILON); [EOL]     assertEquals(Color.red, m.getPaint()); [EOL]     assertEquals(stroke, m.getStroke()); [EOL]     assertEquals(Color.blue, m.getOutlinePaint()); [EOL]     assertEquals(outlineStroke, m.getOutlineStroke()); [EOL]     assertEquals(0.5f, m.getAlpha(), EPSILON); [EOL] } <line_num>: 294,305
