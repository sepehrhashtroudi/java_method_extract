public XYPlotTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 128,130
public static Test suite() { [EOL]     return new TestSuite(XYPlotTests.class); [EOL] } <line_num>: 119,121
public void testEquals() { [EOL]     XYPlot plot1 = new XYPlot(); [EOL]     XYPlot plot2 = new XYPlot(); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setOrientation(PlotOrientation.HORIZONTAL); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setOrientation(PlotOrientation.HORIZONTAL); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDomainAxis(new NumberAxis("Domain Axis")); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDomainAxis(new NumberAxis("Domain Axis")); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDomainAxis(11, new NumberAxis("Secondary Domain Axis")); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDomainAxis(11, new NumberAxis("Secondary Domain Axis")); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeAxis(new NumberAxis("Range Axis")); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeAxis(new NumberAxis("Range Axis")); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeAxis(11, new NumberAxis("Secondary Range Axis")); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeAxis(11, new NumberAxis("Secondary Range Axis")); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.mapDatasetToDomainAxis(11, 11); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.mapDatasetToDomainAxis(11, 11); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.mapDatasetToRangeAxis(11, 11); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.mapDatasetToRangeAxis(11, 11); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRenderer(new DefaultXYItemRenderer()); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRenderer(new DefaultXYItemRenderer()); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRenderer(11, new DefaultXYItemRenderer()); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRenderer(11, new DefaultXYItemRenderer()); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDomainGridlinesVisible(false); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDomainGridlinesVisible(false); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     Stroke stroke = new BasicStroke(2.0f); [EOL]     plot1.setDomainGridlineStroke(stroke); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDomainGridlineStroke(stroke); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.red)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.red)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeGridlinesVisible(false); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeGridlinesVisible(false); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeGridlineStroke(stroke); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeGridlineStroke(stroke); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green, 3.0f, 4.0f, Color.red)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green, 3.0f, 4.0f, Color.red)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeZeroBaselineVisible(true); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeZeroBaselineVisible(true); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeZeroBaselineStroke(stroke); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeZeroBaselineStroke(stroke); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.red)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.red)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeCrosshairVisible(true); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeCrosshairVisible(true); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeCrosshairValue(100.0); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeCrosshairValue(100.0); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeCrosshairStroke(stroke); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeCrosshairStroke(stroke); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.pink, 3.0f, 4.0f, Color.red)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.pink, 3.0f, 4.0f, Color.red)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeCrosshairLockedOnData(false); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeCrosshairLockedOnData(false); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.addRangeMarker(new ValueMarker(4.0)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.addRangeMarker(new ValueMarker(4.0)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.addRangeMarker(1, new ValueMarker(99.0), Layer.BACKGROUND); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.addRangeMarker(1, new ValueMarker(99.0), Layer.BACKGROUND); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setFixedLegendItems(new LegendItemCollection()); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setFixedLegendItems(new LegendItemCollection()); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setWeight(3); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setWeight(3); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setQuadrantOrigin(new Point2D.Double(12.3, 45.6)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setQuadrantOrigin(new Point2D.Double(12.3, 45.6)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setQuadrantPaint(0, new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setQuadrantPaint(0, new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setQuadrantPaint(1, new GradientPaint(2.0f, 3.0f, Color.red, 4.0f, 5.0f, Color.blue)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setQuadrantPaint(1, new GradientPaint(2.0f, 3.0f, Color.red, 4.0f, 5.0f, Color.blue)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setQuadrantPaint(2, new GradientPaint(3.0f, 4.0f, Color.red, 5.0f, 6.0f, Color.blue)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setQuadrantPaint(2, new GradientPaint(3.0f, 4.0f, Color.red, 5.0f, 6.0f, Color.blue)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setQuadrantPaint(3, new GradientPaint(4.0f, 5.0f, Color.red, 6.0f, 7.0f, Color.blue)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setQuadrantPaint(3, new GradientPaint(4.0f, 5.0f, Color.red, 6.0f, 7.0f, Color.blue)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDomainTickBandPaint(Color.red); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDomainTickBandPaint(Color.red); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeTickBandPaint(Color.blue); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeTickBandPaint(Color.blue); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDomainMinorGridlinesVisible(true); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDomainMinorGridlinesVisible(true); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDomainMinorGridlinePaint(Color.red); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDomainMinorGridlinePaint(Color.red); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setDomainGridlineStroke(new BasicStroke(1.1f)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setDomainGridlineStroke(new BasicStroke(1.1f)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeMinorGridlinesVisible(true); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeMinorGridlinesVisible(true); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeMinorGridlinePaint(Color.blue); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeMinorGridlinePaint(Color.blue); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setRangeMinorGridlineStroke(new BasicStroke(1.23f)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setRangeMinorGridlineStroke(new BasicStroke(1.23f)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     List axisIndices = Arrays.asList(new Integer[] { new Integer(0), new Integer(1) }); [EOL]     plot1.mapDatasetToDomainAxes(0, axisIndices); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.mapDatasetToDomainAxes(0, axisIndices); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.mapDatasetToRangeAxes(0, axisIndices); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.mapDatasetToRangeAxes(0, axisIndices); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setShadowGenerator(new DefaultShadowGenerator(5, Color.gray, 0.6f, 4, -Math.PI / 4)); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setShadowGenerator(new DefaultShadowGenerator(5, Color.gray, 0.6f, 4, -Math.PI / 4)); [EOL]     assertTrue(plot1.equals(plot2)); [EOL]     plot1.setShadowGenerator(null); [EOL]     assertFalse(plot1.equals(plot2)); [EOL]     plot2.setShadowGenerator(null); [EOL]     assertTrue(plot1.equals(plot2)); [EOL] } <line_num>: 146,454
public void testCloning() { [EOL]     XYPlot p1 = new XYPlot(); [EOL]     XYPlot p2 = null; [EOL]     try { [EOL]         p2 = (XYPlot) p1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(p1 != p2); [EOL]     assertTrue(p1.getClass() == p2.getClass()); [EOL]     assertTrue(p1.equals(p2)); [EOL] } <line_num>: 459,471
public void testCloning2() { [EOL]     XYPlot p1 = new XYPlot(null, new NumberAxis("Domain Axis"), new NumberAxis("Range Axis"), new StandardXYItemRenderer()); [EOL]     p1.setRangeAxis(1, new NumberAxis("Range Axis 2")); [EOL]     List axisIndices = Arrays.asList(new Integer[] { new Integer(0), new Integer(1) }); [EOL]     p1.mapDatasetToDomainAxes(0, axisIndices); [EOL]     p1.mapDatasetToRangeAxes(0, axisIndices); [EOL]     p1.setRenderer(1, new XYBarRenderer()); [EOL]     XYPlot p2 = null; [EOL]     try { [EOL]         p2 = (XYPlot) p1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(p1 != p2); [EOL]     assertTrue(p1.getClass() == p2.getClass()); [EOL]     assertTrue(p1.equals(p2)); [EOL] } <line_num>: 476,495
public void testCloning3() { [EOL]     XYPlot p1 = new XYPlot(null, new NumberAxis("Domain Axis"), new NumberAxis("Range Axis"), new StandardXYItemRenderer()); [EOL]     LegendItemCollection c1 = new LegendItemCollection(); [EOL]     p1.setFixedLegendItems(c1); [EOL]     XYPlot p2 = null; [EOL]     try { [EOL]         p2 = (XYPlot) p1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(p1 != p2); [EOL]     assertTrue(p1.getClass() == p2.getClass()); [EOL]     assertTrue(p1.equals(p2)); [EOL]     c1.add(new LegendItem("X")); [EOL]     assertFalse(p1.equals(p2)); [EOL] } <line_num>: 501,520
public void testCloning4() { [EOL]     XYLineAndShapeRenderer r1 = new XYLineAndShapeRenderer(); [EOL]     XYPlot p1 = new XYPlot(null, new NumberAxis("Domain Axis"), new NumberAxis("Range Axis"), r1); [EOL]     XYPlot p2 = null; [EOL]     try { [EOL]         p2 = (XYPlot) p1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(p1 != p2); [EOL]     assertTrue(p1.getClass() == p2.getClass()); [EOL]     assertTrue(p1.equals(p2)); [EOL]     XYLineAndShapeRenderer r2 = (XYLineAndShapeRenderer) p2.getRenderer(); [EOL]     assertTrue(r2.hasListener(p2)); [EOL] } <line_num>: 526,544
public void testCloning_QuadrantOrigin() { [EOL]     XYPlot p1 = new XYPlot(); [EOL]     Point2D p = new Point2D.Double(1.2, 3.4); [EOL]     p1.setQuadrantOrigin(p); [EOL]     XYPlot p2 = null; [EOL]     try { [EOL]         p2 = (XYPlot) p1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(p1 != p2); [EOL]     assertTrue(p1.getClass() == p2.getClass()); [EOL]     assertTrue(p1.equals(p2)); [EOL]     assertTrue(p2.getQuadrantOrigin() != p); [EOL] } <line_num>: 549,564
public void testCloning_QuadrantPaint() { [EOL]     XYPlot p1 = new XYPlot(); [EOL]     p1.setQuadrantPaint(3, new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     XYPlot p2 = null; [EOL]     try { [EOL]         p2 = (XYPlot) p1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(p1 != p2); [EOL]     assertTrue(p1.getClass() == p2.getClass()); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setQuadrantPaint(1, Color.red); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setQuadrantPaint(1, Color.red); [EOL]     assertTrue(p1.equals(p2)); [EOL] } <line_num>: 569,589
public void testBug2817504() { [EOL]     XYPlot p1 = new XYPlot(); [EOL]     XYLineAndShapeRenderer r1 = new XYLineAndShapeRenderer(); [EOL]     p1.setRenderer(r1); [EOL]     XYPlot p2 = null; [EOL]     try { [EOL]         p2 = (XYPlot) p1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(p1 != p2); [EOL]     assertTrue(p1.getClass() == p2.getClass()); [EOL]     assertTrue(p1.equals(p2)); [EOL]     XYLineAndShapeRenderer r2 = (XYLineAndShapeRenderer) p2.getRenderer(); [EOL]     assertTrue(r2.getPlot() == p2); [EOL] } <line_num>: 595,613
public void testCloneIndependence() { [EOL]     XYPlot p1 = new XYPlot(null, new NumberAxis("Domain Axis"), new NumberAxis("Range Axis"), new StandardXYItemRenderer()); [EOL]     p1.setDomainAxis(1, new NumberAxis("Domain Axis 2")); [EOL]     p1.setDomainAxisLocation(1, AxisLocation.BOTTOM_OR_LEFT); [EOL]     p1.setRangeAxis(1, new NumberAxis("Range Axis 2")); [EOL]     p1.setRangeAxisLocation(1, AxisLocation.TOP_OR_RIGHT); [EOL]     p1.setRenderer(1, new XYBarRenderer()); [EOL]     XYPlot p2 = null; [EOL]     try { [EOL]         p2 = (XYPlot) p1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]         System.err.println("Failed to clone."); [EOL]     } [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.getDomainAxis().setLabel("Label"); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.getDomainAxis().setLabel("Label"); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.getDomainAxis(1).setLabel("S1"); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.getDomainAxis(1).setLabel("S1"); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setDomainAxisLocation(1, AxisLocation.TOP_OR_RIGHT); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setDomainAxisLocation(1, AxisLocation.TOP_OR_RIGHT); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.mapDatasetToDomainAxis(2, 1); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.mapDatasetToDomainAxis(2, 1); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.getRangeAxis().setLabel("Label"); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.getRangeAxis().setLabel("Label"); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.getRangeAxis(1).setLabel("S1"); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.getRangeAxis(1).setLabel("S1"); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setRangeAxisLocation(1, AxisLocation.TOP_OR_LEFT); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setRangeAxisLocation(1, AxisLocation.TOP_OR_LEFT); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.mapDatasetToRangeAxis(2, 1); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.mapDatasetToRangeAxis(2, 1); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.getRenderer().setBaseOutlinePaint(Color.cyan); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.getRenderer().setBaseOutlinePaint(Color.cyan); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.getRenderer(1).setBaseOutlinePaint(Color.red); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.getRenderer(1).setBaseOutlinePaint(Color.red); [EOL]     assertTrue(p1.equals(p2)); [EOL] } <line_num>: 618,686
public void testSetNullRenderer() { [EOL]     boolean failed = false; [EOL]     try { [EOL]         XYPlot plot = new XYPlot(null, new NumberAxis("X"), new NumberAxis("Y"), null); [EOL]         plot.setRenderer(null); [EOL]     } catch (Exception e) { [EOL]         failed = true; [EOL]     } [EOL]     assertTrue(!failed); [EOL] } <line_num>: 692,703
public void testSerialization1() { [EOL]     XYDataset data = new XYSeriesCollection(); [EOL]     NumberAxis domainAxis = new NumberAxis("Domain"); [EOL]     NumberAxis rangeAxis = new NumberAxis("Range"); [EOL]     StandardXYItemRenderer renderer = new StandardXYItemRenderer(); [EOL]     XYPlot p1 = new XYPlot(data, domainAxis, rangeAxis, renderer); [EOL]     XYPlot p2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(p1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         p2 = (XYPlot) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         fail(e.toString()); [EOL]     } [EOL]     assertEquals(p1, p2); [EOL] } <line_num>: 708,733
public void testSerialization2() { [EOL]     IntervalXYDataset data1 = createDataset1(); [EOL]     XYItemRenderer renderer1 = new XYBarRenderer(0.20); [EOL]     renderer1.setBaseToolTipGenerator(StandardXYToolTipGenerator.getTimeSeriesInstance()); [EOL]     XYPlot p1 = new XYPlot(data1, new DateAxis("Date"), null, renderer1); [EOL]     XYPlot p2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(p1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         p2 = (XYPlot) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         fail(e.toString()); [EOL]     } [EOL]     assertEquals(p1, p2); [EOL] } <line_num>: 739,764
public void testSerialization3() { [EOL]     XYSeriesCollection dataset = new XYSeriesCollection(); [EOL]     JFreeChart chart = ChartFactory.createXYLineChart("Test Chart", "Domain Axis", "Range Axis", dataset, true); [EOL]     JFreeChart chart2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(chart); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         chart2 = (JFreeChart) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         fail(e.toString()); [EOL]     } [EOL]     assertEquals(chart, chart2); [EOL]     boolean passed = true; [EOL]     try { [EOL]         chart2.createBufferedImage(300, 200); [EOL]     } catch (Exception e) { [EOL]         passed = false; [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(passed); [EOL] } <line_num>: 776,810
public void testSerialization4() { [EOL]     XYSeriesCollection dataset = new XYSeriesCollection(); [EOL]     JFreeChart chart = ChartFactory.createXYLineChart("Test Chart", "Domain Axis", "Range Axis", dataset, true); [EOL]     XYPlot plot = (XYPlot) chart.getPlot(); [EOL]     plot.addDomainMarker(new ValueMarker(1.0), Layer.FOREGROUND); [EOL]     plot.addDomainMarker(new IntervalMarker(2.0, 3.0), Layer.BACKGROUND); [EOL]     plot.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND); [EOL]     plot.addRangeMarker(new IntervalMarker(5.0, 6.0), Layer.BACKGROUND); [EOL]     JFreeChart chart2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(chart); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         chart2 = (JFreeChart) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         fail(e.toString()); [EOL]     } [EOL]     assertEquals(chart, chart2); [EOL]     boolean passed = true; [EOL]     try { [EOL]         chart2.createBufferedImage(300, 200); [EOL]     } catch (Exception e) { [EOL]         passed = false; [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(passed); [EOL] } <line_num>: 816,855
public void testSerialization5() { [EOL]     XYSeriesCollection dataset1 = new XYSeriesCollection(); [EOL]     NumberAxis domainAxis1 = new NumberAxis("Domain 1"); [EOL]     NumberAxis rangeAxis1 = new NumberAxis("Range 1"); [EOL]     StandardXYItemRenderer renderer1 = new StandardXYItemRenderer(); [EOL]     XYPlot p1 = new XYPlot(dataset1, domainAxis1, rangeAxis1, renderer1); [EOL]     NumberAxis domainAxis2 = new NumberAxis("Domain 2"); [EOL]     NumberAxis rangeAxis2 = new NumberAxis("Range 2"); [EOL]     StandardXYItemRenderer renderer2 = new StandardXYItemRenderer(); [EOL]     XYSeriesCollection dataset2 = new XYSeriesCollection(); [EOL]     p1.setDataset(1, dataset2); [EOL]     p1.setDomainAxis(1, domainAxis2); [EOL]     p1.setRangeAxis(1, rangeAxis2); [EOL]     p1.setRenderer(1, renderer2); [EOL]     XYPlot p2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(p1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         p2 = (XYPlot) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         fail(e.toString()); [EOL]     } [EOL]     assertEquals(p1, p2); [EOL]     NumberAxis domainAxisA = (NumberAxis) p2.getDomainAxis(0); [EOL]     NumberAxis rangeAxisA = (NumberAxis) p2.getRangeAxis(0); [EOL]     XYSeriesCollection datasetA = (XYSeriesCollection) p2.getDataset(0); [EOL]     StandardXYItemRenderer rendererA = (StandardXYItemRenderer) p2.getRenderer(0); [EOL]     NumberAxis domainAxisB = (NumberAxis) p2.getDomainAxis(1); [EOL]     NumberAxis rangeAxisB = (NumberAxis) p2.getRangeAxis(1); [EOL]     XYSeriesCollection datasetB = (XYSeriesCollection) p2.getDataset(1); [EOL]     StandardXYItemRenderer rendererB = (StandardXYItemRenderer) p2.getRenderer(1); [EOL]     assertTrue(datasetA.hasListener(p2)); [EOL]     assertTrue(domainAxisA.hasListener(p2)); [EOL]     assertTrue(rangeAxisA.hasListener(p2)); [EOL]     assertTrue(rendererA.hasListener(p2)); [EOL]     assertTrue(datasetB.hasListener(p2)); [EOL]     assertTrue(domainAxisB.hasListener(p2)); [EOL]     assertTrue(rangeAxisB.hasListener(p2)); [EOL]     assertTrue(rendererB.hasListener(p2)); [EOL] } <line_num>: 862,913
public void testGetRendererForDataset() { [EOL]     XYDataset d0 = new XYSeriesCollection(); [EOL]     XYDataset d1 = new XYSeriesCollection(); [EOL]     XYDataset d2 = new XYSeriesCollection(); [EOL]     XYDataset d3 = new XYSeriesCollection(); [EOL]     XYItemRenderer r0 = new XYLineAndShapeRenderer(); [EOL]     XYItemRenderer r2 = new XYLineAndShapeRenderer(); [EOL]     XYPlot plot = new XYPlot(); [EOL]     plot.setDataset(0, d0); [EOL]     plot.setDataset(1, d1); [EOL]     plot.setDataset(2, d2); [EOL]     plot.setRenderer(0, r0); [EOL]     plot.setRenderer(2, r2); [EOL]     assertEquals(r0, plot.getRendererForDataset(d0)); [EOL]     assertEquals(r0, plot.getRendererForDataset(d1)); [EOL]     assertEquals(r2, plot.getRendererForDataset(d2)); [EOL]     assertEquals(null, plot.getRendererForDataset(d3)); [EOL]     assertEquals(null, plot.getRendererForDataset(null)); [EOL] } <line_num>: 918,937
public void testGetLegendItems() { [EOL]     XYDataset d0 = createDataset1(); [EOL]     XYDataset d1 = createDataset2(); [EOL]     XYItemRenderer r0 = new XYLineAndShapeRenderer(); [EOL]     XYPlot plot = new XYPlot(); [EOL]     plot.setDataset(0, d0); [EOL]     plot.setDataset(1, d1); [EOL]     plot.setRenderer(0, r0); [EOL]     LegendItemCollection items = plot.getLegendItems(); [EOL]     assertEquals(2, items.getItemCount()); [EOL] } <line_num>: 942,954
private IntervalXYDataset createDataset1() { [EOL]     TimeSeries series1 = new TimeSeries("Series 1"); [EOL]     series1.add(new Day(1, MonthConstants.MARCH, 2002), 12353.3); [EOL]     series1.add(new Day(2, MonthConstants.MARCH, 2002), 13734.4); [EOL]     series1.add(new Day(3, MonthConstants.MARCH, 2002), 14525.3); [EOL]     series1.add(new Day(4, MonthConstants.MARCH, 2002), 13984.3); [EOL]     series1.add(new Day(5, MonthConstants.MARCH, 2002), 12999.4); [EOL]     series1.add(new Day(6, MonthConstants.MARCH, 2002), 14274.3); [EOL]     series1.add(new Day(7, MonthConstants.MARCH, 2002), 15943.5); [EOL]     series1.add(new Day(8, MonthConstants.MARCH, 2002), 14845.3); [EOL]     series1.add(new Day(9, MonthConstants.MARCH, 2002), 14645.4); [EOL]     series1.add(new Day(10, MonthConstants.MARCH, 2002), 16234.6); [EOL]     series1.add(new Day(11, MonthConstants.MARCH, 2002), 17232.3); [EOL]     series1.add(new Day(12, MonthConstants.MARCH, 2002), 14232.2); [EOL]     series1.add(new Day(13, MonthConstants.MARCH, 2002), 13102.2); [EOL]     series1.add(new Day(14, MonthConstants.MARCH, 2002), 14230.2); [EOL]     series1.add(new Day(15, MonthConstants.MARCH, 2002), 11235.2); [EOL]     TimeSeriesCollection collection = new TimeSeriesCollection(series1); [EOL]     return collection; [EOL] } <line_num>: 961,984
private XYDataset createDataset2() { [EOL]     XYSeries series = new XYSeries("Series 2"); [EOL]     XYSeriesCollection collection = new XYSeriesCollection(series); [EOL]     return collection; [EOL] } <line_num>: 991,997
public void testSetRenderer() { [EOL]     XYPlot plot = new XYPlot(); [EOL]     XYItemRenderer renderer = new XYLineAndShapeRenderer(); [EOL]     plot.setRenderer(renderer); [EOL]     MyPlotChangeListener listener = new MyPlotChangeListener(); [EOL]     plot.addChangeListener(listener); [EOL]     renderer.setSeriesPaint(0, Color.black); [EOL]     assertTrue(listener.getEvent() != null); [EOL] } <line_num>: 1003,1013
public void testRemoveAnnotation() { [EOL]     XYPlot plot = new XYPlot(); [EOL]     XYTextAnnotation a1 = new XYTextAnnotation("X", 1.0, 2.0); [EOL]     XYTextAnnotation a2 = new XYTextAnnotation("X", 3.0, 4.0); [EOL]     XYTextAnnotation a3 = new XYTextAnnotation("X", 1.0, 2.0); [EOL]     plot.addAnnotation(a1); [EOL]     plot.addAnnotation(a2); [EOL]     plot.addAnnotation(a3); [EOL]     plot.removeAnnotation(a2); [EOL]     XYTextAnnotation x = (XYTextAnnotation) plot.getAnnotations().get(0); [EOL]     assertEquals(x, a1); [EOL]     assertTrue(a1.equals(a3)); [EOL]     plot.removeAnnotation(a3); [EOL]     x = (XYTextAnnotation) plot.getAnnotations().get(0); [EOL]     assertEquals(x, a3); [EOL] } <line_num>: 1018,1036
public void testAddDomainMarker() { [EOL]     XYPlot plot = new XYPlot(); [EOL]     Marker m = new ValueMarker(1.0); [EOL]     plot.addDomainMarker(m); [EOL]     List listeners = Arrays.asList(m.getListeners(MarkerChangeListener.class)); [EOL]     assertTrue(listeners.contains(plot)); [EOL]     plot.clearDomainMarkers(); [EOL]     listeners = Arrays.asList(m.getListeners(MarkerChangeListener.class)); [EOL]     assertFalse(listeners.contains(plot)); [EOL] } <line_num>: 1041,1051
public void testAddRangeMarker() { [EOL]     XYPlot plot = new XYPlot(); [EOL]     Marker m = new ValueMarker(1.0); [EOL]     plot.addRangeMarker(m); [EOL]     List listeners = Arrays.asList(m.getListeners(MarkerChangeListener.class)); [EOL]     assertTrue(listeners.contains(plot)); [EOL]     plot.clearRangeMarkers(); [EOL]     listeners = Arrays.asList(m.getListeners(MarkerChangeListener.class)); [EOL]     assertFalse(listeners.contains(plot)); [EOL] } <line_num>: 1056,1066
public void test1654215() { [EOL]     DefaultXYDataset dataset = new DefaultXYDataset(); [EOL]     JFreeChart chart = ChartFactory.createXYLineChart("Title", "X", "Y", dataset, true); [EOL]     XYPlot plot = (XYPlot) chart.getPlot(); [EOL]     plot.setRenderer(1, new XYLineAndShapeRenderer()); [EOL]     boolean success = false; [EOL]     try { [EOL]         BufferedImage image = new BufferedImage(200, 100, BufferedImage.TYPE_INT_RGB); [EOL]         Graphics2D g2 = image.createGraphics(); [EOL]         chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null); [EOL]         g2.dispose(); [EOL]         success = true; [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]         success = false; [EOL]     } [EOL]     assertTrue(success); [EOL] } <line_num>: 1072,1092
public void testDrawRangeGridlines() { [EOL]     DefaultXYDataset dataset = new DefaultXYDataset(); [EOL]     JFreeChart chart = ChartFactory.createXYLineChart("Title", "X", "Y", dataset, true); [EOL]     XYPlot plot = (XYPlot) chart.getPlot(); [EOL]     plot.setRenderer(null); [EOL]     boolean success = false; [EOL]     try { [EOL]         BufferedImage image = new BufferedImage(200, 100, BufferedImage.TYPE_INT_RGB); [EOL]         Graphics2D g2 = image.createGraphics(); [EOL]         chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null); [EOL]         g2.dispose(); [EOL]         success = true; [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]         success = false; [EOL]     } [EOL]     assertTrue(success); [EOL] } <line_num>: 1098,1118
public void testDrawSeriesWithZeroItems() { [EOL]     DefaultXYDataset dataset = new DefaultXYDataset(); [EOL]     dataset.addSeries("Series 1", new double[][] { { 1.0, 2.0 }, { 3.0, 4.0 } }); [EOL]     dataset.addSeries("Series 2", new double[][] { {}, {} }); [EOL]     JFreeChart chart = ChartFactory.createXYLineChart("Title", "X", "Y", dataset, true); [EOL]     boolean success = false; [EOL]     try { [EOL]         BufferedImage image = new BufferedImage(200, 100, BufferedImage.TYPE_INT_RGB); [EOL]         Graphics2D g2 = image.createGraphics(); [EOL]         chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null); [EOL]         g2.dispose(); [EOL]         success = true; [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]         success = false; [EOL]     } [EOL]     assertTrue(success); [EOL] } <line_num>: 1124,1144
public void testRemoveDomainMarker() { [EOL]     XYPlot plot = new XYPlot(); [EOL]     assertFalse(plot.removeDomainMarker(new ValueMarker(0.5))); [EOL] } <line_num>: 1150,1153
public void testRemoveRangeMarker() { [EOL]     XYPlot plot = new XYPlot(); [EOL]     assertFalse(plot.removeRangeMarker(new ValueMarker(0.5))); [EOL] } <line_num>: 1159,1162
public void testGetDomainAxisForDataset() { [EOL]     XYDataset dataset = new XYSeriesCollection(); [EOL]     NumberAxis xAxis = new NumberAxis("X"); [EOL]     NumberAxis yAxis = new NumberAxis("Y"); [EOL]     XYItemRenderer renderer = new DefaultXYItemRenderer(); [EOL]     XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer); [EOL]     assertEquals(xAxis, plot.getDomainAxisForDataset(0)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         plot.getDomainAxisForDataset(-1); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         plot.getDomainAxisForDataset(1); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     NumberAxis xAxis2 = new NumberAxis("X2"); [EOL]     plot.setDomainAxis(1, xAxis2); [EOL]     assertEquals(xAxis, plot.getDomainAxisForDataset(0)); [EOL]     plot.mapDatasetToDomainAxis(0, 1); [EOL]     assertEquals(xAxis2, plot.getDomainAxisForDataset(0)); [EOL]     List axisIndices = Arrays.asList(new Integer[] { new Integer(0), new Integer(1) }); [EOL]     plot.mapDatasetToDomainAxes(0, axisIndices); [EOL]     assertEquals(xAxis, plot.getDomainAxisForDataset(0)); [EOL]     axisIndices = Arrays.asList(new Integer[] { new Integer(1), new Integer(2) }); [EOL]     plot.mapDatasetToDomainAxes(0, axisIndices); [EOL]     assertEquals(xAxis2, plot.getDomainAxisForDataset(0)); [EOL] } <line_num>: 1167,1213
public void testGetRangeAxisForDataset() { [EOL]     XYDataset dataset = new XYSeriesCollection(); [EOL]     NumberAxis xAxis = new NumberAxis("X"); [EOL]     NumberAxis yAxis = new NumberAxis("Y"); [EOL]     XYItemRenderer renderer = new DefaultXYItemRenderer(); [EOL]     XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer); [EOL]     assertEquals(yAxis, plot.getRangeAxisForDataset(0)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         plot.getRangeAxisForDataset(-1); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         plot.getRangeAxisForDataset(1); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     NumberAxis yAxis2 = new NumberAxis("Y2"); [EOL]     plot.setRangeAxis(1, yAxis2); [EOL]     assertEquals(yAxis, plot.getRangeAxisForDataset(0)); [EOL]     plot.mapDatasetToRangeAxis(0, 1); [EOL]     assertEquals(yAxis2, plot.getRangeAxisForDataset(0)); [EOL]     List axisIndices = Arrays.asList(new Integer[] { new Integer(0), new Integer(1) }); [EOL]     plot.mapDatasetToRangeAxes(0, axisIndices); [EOL]     assertEquals(yAxis, plot.getRangeAxisForDataset(0)); [EOL]     axisIndices = Arrays.asList(new Integer[] { new Integer(1), new Integer(2) }); [EOL]     plot.mapDatasetToRangeAxes(0, axisIndices); [EOL]     assertEquals(yAxis2, plot.getRangeAxisForDataset(0)); [EOL] } <line_num>: 1218,1264
