public SpiderWebPlotTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 94,96
public static Test suite() { [EOL]     return new TestSuite(SpiderWebPlotTests.class); [EOL] } <line_num>: 85,87
public void testEquals() { [EOL]     SpiderWebPlot p1 = new SpiderWebPlot(new DefaultCategoryDataset()); [EOL]     SpiderWebPlot p2 = new SpiderWebPlot(new DefaultCategoryDataset()); [EOL]     assertTrue(p1.equals(p2)); [EOL]     assertTrue(p2.equals(p1)); [EOL]     p1.setDataExtractOrder(TableOrder.BY_COLUMN); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setDataExtractOrder(TableOrder.BY_COLUMN); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setHeadPercent(0.321); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setHeadPercent(0.321); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setInteriorGap(0.123); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setInteriorGap(0.123); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setStartAngle(0.456); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setStartAngle(0.456); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setDirection(Rotation.ANTICLOCKWISE); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setDirection(Rotation.ANTICLOCKWISE); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setMaxValue(123.4); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setMaxValue(123.4); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setLegendItemShape(new Rectangle(1, 2, 3, 4)); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setLegendItemShape(new Rectangle(1, 2, 3, 4)); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setSeriesPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white)); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setSeriesPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white)); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setSeriesPaint(1, new GradientPaint(1.0f, 2.0f, Color.yellow, 3.0f, 4.0f, Color.white)); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setSeriesPaint(1, new GradientPaint(1.0f, 2.0f, Color.yellow, 3.0f, 4.0f, Color.white)); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setBaseSeriesPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.black)); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setBaseSeriesPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.black)); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setSeriesOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.black)); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setSeriesOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.black)); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setSeriesOutlinePaint(1, new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green)); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setSeriesOutlinePaint(1, new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green)); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setBaseSeriesOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.cyan, 3.0f, 4.0f, Color.green)); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setBaseSeriesOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.cyan, 3.0f, 4.0f, Color.green)); [EOL]     assertTrue(p1.equals(p2)); [EOL]     BasicStroke s = new BasicStroke(1.23f); [EOL]     p1.setSeriesOutlineStroke(s); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setSeriesOutlineStroke(s); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setSeriesOutlineStroke(1, s); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setSeriesOutlineStroke(1, s); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setBaseSeriesOutlineStroke(s); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setBaseSeriesOutlineStroke(s); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setWebFilled(false); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setWebFilled(false); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setAxisLabelGap(0.11); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setAxisLabelGap(0.11); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setLabelFont(new Font("Serif", Font.PLAIN, 9)); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setLabelFont(new Font("Serif", Font.PLAIN, 9)); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setLabelGenerator(new StandardCategoryItemLabelGenerator("XYZ: {0}", new DecimalFormat("0.000"))); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setLabelGenerator(new StandardCategoryItemLabelGenerator("XYZ: {0}", new DecimalFormat("0.000"))); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setToolTipGenerator(new StandardCategoryToolTipGenerator()); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setToolTipGenerator(new StandardCategoryToolTipGenerator()); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setURLGenerator(new StandardCategoryURLGenerator()); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setURLGenerator(new StandardCategoryURLGenerator()); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setAxisLinePaint(Color.red); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setAxisLinePaint(Color.red); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setAxisLineStroke(new BasicStroke(1.1f)); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setAxisLineStroke(new BasicStroke(1.1f)); [EOL]     assertTrue(p1.equals(p2)); [EOL] } <line_num>: 101,273
public void testCloning() { [EOL]     SpiderWebPlot p1 = new SpiderWebPlot(new DefaultCategoryDataset()); [EOL]     Rectangle2D legendShape = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0); [EOL]     p1.setLegendItemShape(legendShape); [EOL]     SpiderWebPlot p2 = null; [EOL]     try { [EOL]         p2 = (SpiderWebPlot) p1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(p1 != p2); [EOL]     assertTrue(p1.getClass() == p2.getClass()); [EOL]     assertTrue(p1.equals(p2)); [EOL]     legendShape.setRect(4.0, 3.0, 2.0, 1.0); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setLegendItemShape(legendShape); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setSeriesPaint(1, Color.black); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setSeriesPaint(1, Color.black); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setSeriesOutlinePaint(0, Color.red); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setSeriesOutlinePaint(0, Color.red); [EOL]     assertTrue(p1.equals(p2)); [EOL]     p1.setSeriesOutlineStroke(0, new BasicStroke(1.1f)); [EOL]     assertFalse(p1.equals(p2)); [EOL]     p2.setSeriesOutlineStroke(0, new BasicStroke(1.1f)); [EOL]     assertTrue(p1.equals(p2)); [EOL] } <line_num>: 278,317
public void testSerialization() { [EOL]     SpiderWebPlot p1 = new SpiderWebPlot(new DefaultCategoryDataset()); [EOL]     SpiderWebPlot p2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(p1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         p2 = (SpiderWebPlot) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(p1, p2); [EOL] } <line_num>: 322,343
public void testDrawWithNullInfo() { [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     dataset.addValue(35.0, "S1", "C1"); [EOL]     dataset.addValue(45.0, "S1", "C2"); [EOL]     dataset.addValue(55.0, "S1", "C3"); [EOL]     dataset.addValue(15.0, "S1", "C4"); [EOL]     dataset.addValue(25.0, "S1", "C5"); [EOL]     SpiderWebPlot plot = new SpiderWebPlot(dataset); [EOL]     JFreeChart chart = new JFreeChart(plot); [EOL]     boolean success = false; [EOL]     try { [EOL]         BufferedImage image = new BufferedImage(200, 100, BufferedImage.TYPE_INT_RGB); [EOL]         Graphics2D g2 = image.createGraphics(); [EOL]         chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null); [EOL]         g2.dispose(); [EOL]         success = true; [EOL]     } catch (Exception e) { [EOL]         success = false; [EOL]     } [EOL]     assertTrue(success); [EOL] } <line_num>: 349,371
