public DefaultDrawingSupplierTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 81,83
public static Test suite() { [EOL]     return new TestSuite(DefaultDrawingSupplierTests.class); [EOL] } <line_num>: 72,74
public void testEquals() { [EOL]     DefaultDrawingSupplier r1 = new DefaultDrawingSupplier(); [EOL]     DefaultDrawingSupplier r2 = new DefaultDrawingSupplier(); [EOL]     assertTrue(r1.equals(r2)); [EOL]     assertTrue(r2.equals(r1)); [EOL]     Paint[] ps1A = new Paint[] { Color.red, Color.blue }; [EOL]     Paint[] ps2A = new Paint[] { Color.green, Color.yellow, Color.white }; [EOL]     Paint[] ops1A = new Paint[] { Color.lightGray, Color.blue }; [EOL]     Paint[] ops2A = new Paint[] { Color.black, Color.yellow, Color.cyan }; [EOL]     Stroke[] ss1A = new Stroke[] { new BasicStroke(1.1f) }; [EOL]     Stroke[] ss2A = new Stroke[] { new BasicStroke(2.2f), new BasicStroke(3.3f) }; [EOL]     Stroke[] oss1A = new Stroke[] { new BasicStroke(4.4f) }; [EOL]     Stroke[] oss2A = new Stroke[] { new BasicStroke(5.5f), new BasicStroke(6.6f) }; [EOL]     Shape[] shapes1A = new Shape[] { new Rectangle2D.Double(1.0, 1.0, 1.0, 1.0) }; [EOL]     Shape[] shapes2A = new Shape[] { new Rectangle2D.Double(2.0, 2.0, 2.0, 2.0), new Rectangle2D.Double(2.0, 2.0, 2.0, 2.0) }; [EOL]     Paint[] ps1B = new Paint[] { Color.red, Color.blue }; [EOL]     Paint[] ps2B = new Paint[] { Color.green, Color.yellow, Color.white }; [EOL]     Paint[] ops1B = new Paint[] { Color.lightGray, Color.blue }; [EOL]     Paint[] ops2B = new Paint[] { Color.black, Color.yellow, Color.cyan }; [EOL]     Stroke[] ss1B = new Stroke[] { new BasicStroke(1.1f) }; [EOL]     Stroke[] ss2B = new Stroke[] { new BasicStroke(2.2f), new BasicStroke(3.3f) }; [EOL]     Stroke[] oss1B = new Stroke[] { new BasicStroke(4.4f) }; [EOL]     Stroke[] oss2B = new Stroke[] { new BasicStroke(5.5f), new BasicStroke(6.6f) }; [EOL]     Shape[] shapes1B = new Shape[] { new Rectangle2D.Double(1.0, 1.0, 1.0, 1.0) }; [EOL]     Shape[] shapes2B = new Shape[] { new Rectangle2D.Double(2.0, 2.0, 2.0, 2.0), new Rectangle2D.Double(2.0, 2.0, 2.0, 2.0) }; [EOL]     r1 = new DefaultDrawingSupplier(ps1A, ops1A, ss1A, oss1A, shapes1A); [EOL]     r2 = new DefaultDrawingSupplier(ps1B, ops1B, ss1B, oss1B, shapes1B); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1 = new DefaultDrawingSupplier(ps2A, ops1A, ss1A, oss1A, shapes1A); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2 = new DefaultDrawingSupplier(ps2B, ops1B, ss1B, oss1B, shapes1B); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1 = new DefaultDrawingSupplier(ps2A, ops2A, ss1A, oss1A, shapes1A); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2 = new DefaultDrawingSupplier(ps2B, ops2B, ss1B, oss1B, shapes1B); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1 = new DefaultDrawingSupplier(ps2A, ops2A, ss2A, oss1A, shapes1A); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2 = new DefaultDrawingSupplier(ps2B, ops2B, ss2B, oss1B, shapes1B); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1 = new DefaultDrawingSupplier(ps2A, ops2A, ss2A, oss2A, shapes1A); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2 = new DefaultDrawingSupplier(ps2B, ops2B, ss2B, oss2B, shapes1B); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1 = new DefaultDrawingSupplier(ps2A, ops2A, ss2A, oss2A, shapes2A); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2 = new DefaultDrawingSupplier(ps2B, ops2B, ss2B, oss2B, shapes2B); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.getNextPaint(); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.getNextPaint(); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.getNextOutlinePaint(); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.getNextOutlinePaint(); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.getNextStroke(); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.getNextStroke(); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.getNextOutlineStroke(); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.getNextOutlineStroke(); [EOL]     assertTrue(r1.equals(r2)); [EOL]     r1.getNextShape(); [EOL]     assertFalse(r1.equals(r2)); [EOL]     r2.getNextShape(); [EOL]     assertTrue(r1.equals(r2)); [EOL] } <line_num>: 88,189
public void testCloning() { [EOL]     DefaultDrawingSupplier r1 = new DefaultDrawingSupplier(); [EOL]     DefaultDrawingSupplier r2 = null; [EOL]     try { [EOL]         r2 = (DefaultDrawingSupplier) r1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]         System.err.println("Failed to clone."); [EOL]     } [EOL]     assertTrue(r1 != r2); [EOL]     assertTrue(r1.getClass() == r2.getClass()); [EOL]     assertTrue(r1.equals(r2)); [EOL] } <line_num>: 194,207
public void testSerialization() { [EOL]     DefaultDrawingSupplier r1 = new DefaultDrawingSupplier(); [EOL]     DefaultDrawingSupplier r2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(r1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         r2 = (DefaultDrawingSupplier) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         System.out.println(e.toString()); [EOL]     } [EOL]     assertEquals(r1, r2); [EOL] } <line_num>: 212,234
