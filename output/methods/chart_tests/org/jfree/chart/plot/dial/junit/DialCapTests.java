public DialCapTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 78,80
public static Test suite() { [EOL]     return new TestSuite(DialCapTests.class); [EOL] } <line_num>: 69,71
public void testEquals() { [EOL]     DialCap c1 = new DialCap(); [EOL]     DialCap c2 = new DialCap(); [EOL]     assertTrue(c1.equals(c2)); [EOL]     c1.setRadius(0.5); [EOL]     assertFalse(c1.equals(c2)); [EOL]     c2.setRadius(0.5); [EOL]     assertTrue(c1.equals(c2)); [EOL]     c1.setFillPaint(new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green)); [EOL]     assertFalse(c1.equals(c2)); [EOL]     c2.setFillPaint(new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green)); [EOL]     c1.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.gray)); [EOL]     assertFalse(c1.equals(c2)); [EOL]     c2.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.gray)); [EOL]     assertTrue(c1.equals(c2)); [EOL]     c1.setOutlineStroke(new BasicStroke(1.1f)); [EOL]     assertFalse(c1.equals(c2)); [EOL]     c2.setOutlineStroke(new BasicStroke(1.1f)); [EOL]     assertTrue(c1.equals(c2)); [EOL]     c1.setVisible(false); [EOL]     assertFalse(c1.equals(c2)); [EOL]     c2.setVisible(false); [EOL]     assertTrue(c1.equals(c2)); [EOL] } <line_num>: 85,123
public void testHashCode() { [EOL]     DialCap c1 = new DialCap(); [EOL]     DialCap c2 = new DialCap(); [EOL]     assertTrue(c1.equals(c2)); [EOL]     int h1 = c1.hashCode(); [EOL]     int h2 = c2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 128,135
public void testCloning() { [EOL]     DialCap c1 = new DialCap(); [EOL]     DialCap c2 = null; [EOL]     try { [EOL]         c2 = (DialCap) c1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(c1 != c2); [EOL]     assertTrue(c1.getClass() == c2.getClass()); [EOL]     assertTrue(c1.equals(c2)); [EOL]     c1 = new DialCap(); [EOL]     c1.setFillPaint(new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green)); [EOL]     c1.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.gray)); [EOL]     c1.setOutlineStroke(new BasicStroke(2.0f)); [EOL]     c2 = null; [EOL]     try { [EOL]         c2 = (DialCap) c1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(c1 != c2); [EOL]     assertTrue(c1.getClass() == c2.getClass()); [EOL]     assertTrue(c1.equals(c2)); [EOL]     MyDialLayerChangeListener l1 = new MyDialLayerChangeListener(); [EOL]     c1.addChangeListener(l1); [EOL]     assertTrue(c1.hasListener(l1)); [EOL]     assertFalse(c2.hasListener(l1)); [EOL] } <line_num>: 140,177
public void testSerialization() { [EOL]     DialCap c1 = new DialCap(); [EOL]     DialCap c2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(c1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         c2 = (DialCap) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(c1, c2); [EOL]     c1 = new DialCap(); [EOL]     c1.setFillPaint(new GradientPaint(1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green)); [EOL]     c1.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.gray)); [EOL]     c1.setOutlineStroke(new BasicStroke(2.0f)); [EOL]     c2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(c1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         c2 = (DialCap) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(c1, c2); [EOL] } <line_num>: 183,228
