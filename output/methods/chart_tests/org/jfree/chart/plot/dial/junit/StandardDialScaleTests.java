public StandardDialScaleTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 80,82
public static Test suite() { [EOL]     return new TestSuite(StandardDialScaleTests.class); [EOL] } <line_num>: 71,73
public void testEquals() { [EOL]     StandardDialScale s1 = new StandardDialScale(); [EOL]     StandardDialScale s2 = new StandardDialScale(); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1 = new StandardDialScale(10.0, 100.0, 0.0, 270.0, 10.0, 4); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2 = new StandardDialScale(10.0, 100.0, 0.0, 270.0, 10.0, 4); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1 = new StandardDialScale(10.0, 200.0, 0.0, 270.0, 10.0, 4); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2 = new StandardDialScale(10.0, 200.0, 0.0, 270.0, 10.0, 4); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1 = new StandardDialScale(10.0, 200.0, 20.0, 270.0, 10.0, 4); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2 = new StandardDialScale(10.0, 200.0, 20.0, 270.0, 10.0, 4); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1 = new StandardDialScale(10.0, 200.0, 20.0, 99.0, 10.0, 4); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2 = new StandardDialScale(10.0, 200.0, 20.0, 99.0, 10.0, 4); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1.setTickRadius(0.99); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.setTickRadius(0.99); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1.setMajorTickIncrement(11.1); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.setMajorTickIncrement(11.1); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1.setMajorTickLength(0.09); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.setMajorTickLength(0.09); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1.setMajorTickPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow)); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.setMajorTickPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow)); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1.setMajorTickStroke(new BasicStroke(1.1f)); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.setMajorTickStroke(new BasicStroke(1.1f)); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1.setMinorTickCount(7); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.setMinorTickCount(7); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1.setMinorTickLength(0.09); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.setMinorTickLength(0.09); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1.setTickLabelOffset(0.11); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.setTickLabelOffset(0.11); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1.setTickLabelFont(new Font("Dialog", Font.PLAIN, 15)); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.setTickLabelFont(new Font("Dialog", Font.PLAIN, 15)); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1.setTickLabelPaint(new GradientPaint(1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.green)); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.setTickLabelPaint(new GradientPaint(1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.green)); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1.setTickLabelsVisible(false); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.setTickLabelsVisible(false); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1.setVisible(false); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s2.setVisible(false); [EOL]     assertTrue(s1.equals(s2)); [EOL] } <line_num>: 87,190
public void testHashCode() { [EOL]     StandardDialScale s1 = new StandardDialScale(); [EOL]     StandardDialScale s2 = new StandardDialScale(); [EOL]     assertTrue(s1.equals(s2)); [EOL]     int h1 = s1.hashCode(); [EOL]     int h2 = s2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 195,202
public void testCloning() { [EOL]     StandardDialScale s1 = new StandardDialScale(); [EOL]     StandardDialScale s2 = null; [EOL]     try { [EOL]         s2 = (StandardDialScale) s1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(s1 != s2); [EOL]     assertTrue(s1.getClass() == s2.getClass()); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1 = new StandardDialScale(); [EOL]     s1.setExtent(123.4); [EOL]     s1.setMajorTickPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white)); [EOL]     s1.setMajorTickStroke(new BasicStroke(2.0f)); [EOL]     s2 = null; [EOL]     try { [EOL]         s2 = (StandardDialScale) s1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(s1 != s2); [EOL]     assertTrue(s1.getClass() == s2.getClass()); [EOL]     assertTrue(s1.equals(s2)); [EOL]     MyDialLayerChangeListener l1 = new MyDialLayerChangeListener(); [EOL]     s1.addChangeListener(l1); [EOL]     assertTrue(s1.hasListener(l1)); [EOL]     assertFalse(s2.hasListener(l1)); [EOL] } <line_num>: 207,243
public void testSerialization() { [EOL]     StandardDialScale s1 = new StandardDialScale(); [EOL]     StandardDialScale s2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(s1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         s2 = (StandardDialScale) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(s1, s2); [EOL]     s1 = new StandardDialScale(); [EOL]     s1.setExtent(123.4); [EOL]     s1.setMajorTickPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white)); [EOL]     s1.setMajorTickStroke(new BasicStroke(2.0f)); [EOL]     s2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(s1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         s2 = (StandardDialScale) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(s1, s2); [EOL] } <line_num>: 248,292
