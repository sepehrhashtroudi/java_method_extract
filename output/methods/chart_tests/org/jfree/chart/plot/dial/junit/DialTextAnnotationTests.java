public DialTextAnnotationTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 78,80
public static Test suite() { [EOL]     return new TestSuite(DialTextAnnotationTests.class); [EOL] } <line_num>: 69,71
public void testEquals() { [EOL]     DialTextAnnotation a1 = new DialTextAnnotation("A1"); [EOL]     DialTextAnnotation a2 = new DialTextAnnotation("A1"); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setAngle(1.1); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setAngle(1.1); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setRadius(9.9); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setRadius(9.9); [EOL]     assertTrue(a1.equals(a2)); [EOL]     Font f = new Font("SansSerif", Font.PLAIN, 14); [EOL]     a1.setFont(f); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setFont(f); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setPaint(Color.red); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setPaint(Color.red); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setLabel("ABC"); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setLabel("ABC"); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setVisible(false); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setVisible(false); [EOL]     assertTrue(a1.equals(a2)); [EOL] } <line_num>: 85,126
public void testHashCode() { [EOL]     DialTextAnnotation a1 = new DialTextAnnotation("A1"); [EOL]     DialTextAnnotation a2 = new DialTextAnnotation("A1"); [EOL]     assertTrue(a1.equals(a2)); [EOL]     int h1 = a1.hashCode(); [EOL]     int h2 = a2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 131,138
public void testCloning() { [EOL]     DialTextAnnotation a1 = new DialTextAnnotation("A1"); [EOL]     DialTextAnnotation a2 = null; [EOL]     try { [EOL]         a2 = (DialTextAnnotation) a1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(a1 != a2); [EOL]     assertTrue(a1.getClass() == a2.getClass()); [EOL]     assertTrue(a1.equals(a2)); [EOL]     MyDialLayerChangeListener l1 = new MyDialLayerChangeListener(); [EOL]     a1.addChangeListener(l1); [EOL]     assertTrue(a1.hasListener(l1)); [EOL]     assertFalse(a2.hasListener(l1)); [EOL] } <line_num>: 143,163
public void testSerialization() { [EOL]     DialTextAnnotation a1 = new DialTextAnnotation("A1"); [EOL]     DialTextAnnotation a2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(a1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         a2 = (DialTextAnnotation) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(a1, a2); [EOL]     a1 = new DialTextAnnotation("A1"); [EOL]     a1.setPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     a2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(a1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         a2 = (DialTextAnnotation) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(a1, a2); [EOL] } <line_num>: 169,213
