public AbstractBlockTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 81,83
public static Test suite() { [EOL]     return new TestSuite(AbstractBlockTests.class); [EOL] } <line_num>: 72,74
public void testEquals() { [EOL]     EmptyBlock b1 = new EmptyBlock(1.0, 2.0); [EOL]     EmptyBlock b2 = new EmptyBlock(1.0, 2.0); [EOL]     assertTrue(b1.equals(b2)); [EOL]     assertTrue(b2.equals(b2)); [EOL]     b1.setID("Test"); [EOL]     assertFalse(b1.equals(b2)); [EOL]     b2.setID("Test"); [EOL]     assertTrue(b1.equals(b2)); [EOL]     b1.setMargin(new RectangleInsets(1.0, 2.0, 3.0, 4.0)); [EOL]     assertFalse(b1.equals(b2)); [EOL]     b2.setMargin(new RectangleInsets(1.0, 2.0, 3.0, 4.0)); [EOL]     assertTrue(b1.equals(b2)); [EOL]     b1.setFrame(new BlockBorder(Color.red)); [EOL]     assertFalse(b1.equals(b2)); [EOL]     b2.setFrame(new BlockBorder(Color.red)); [EOL]     assertTrue(b1.equals(b2)); [EOL]     b1.setPadding(new RectangleInsets(2.0, 4.0, 6.0, 8.0)); [EOL]     assertFalse(b1.equals(b2)); [EOL]     b2.setPadding(new RectangleInsets(2.0, 4.0, 6.0, 8.0)); [EOL]     assertTrue(b1.equals(b2)); [EOL]     b1.setWidth(1.23); [EOL]     assertFalse(b1.equals(b2)); [EOL]     b2.setWidth(1.23); [EOL]     assertTrue(b1.equals(b2)); [EOL]     b1.setHeight(4.56); [EOL]     assertFalse(b1.equals(b2)); [EOL]     b2.setHeight(4.56); [EOL]     assertTrue(b1.equals(b2)); [EOL]     b1.setBounds(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0)); [EOL]     assertFalse(b1.equals(b2)); [EOL]     b2.setBounds(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0)); [EOL]     assertTrue(b1.equals(b2)); [EOL]     b1 = new EmptyBlock(1.1, 2.0); [EOL]     assertFalse(b1.equals(b2)); [EOL]     b2 = new EmptyBlock(1.1, 2.0); [EOL]     assertTrue(b1.equals(b2)); [EOL]     b1 = new EmptyBlock(1.1, 2.2); [EOL]     assertFalse(b1.equals(b2)); [EOL]     b2 = new EmptyBlock(1.1, 2.2); [EOL]     assertTrue(b1.equals(b2)); [EOL] } <line_num>: 88,138
public void testCloning() { [EOL]     EmptyBlock b1 = new EmptyBlock(1.0, 2.0); [EOL]     Rectangle2D bounds1 = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0); [EOL]     b1.setBounds(bounds1); [EOL]     EmptyBlock b2 = null; [EOL]     try { [EOL]         b2 = (EmptyBlock) b1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         fail(e.toString()); [EOL]     } [EOL]     assertTrue(b1 != b2); [EOL]     assertTrue(b1.getClass() == b2.getClass()); [EOL]     assertTrue(b1.equals(b2)); [EOL]     bounds1.setFrame(2.0, 4.0, 6.0, 8.0); [EOL]     assertFalse(b1.equals(b2)); [EOL]     b2.setBounds(new Rectangle2D.Double(2.0, 4.0, 6.0, 8.0)); [EOL]     assertTrue(b1.equals(b2)); [EOL] } <line_num>: 143,163
public void testSerialization() { [EOL]     EmptyBlock b1 = new EmptyBlock(1.0, 2.0); [EOL]     EmptyBlock b2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(b1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         b2 = (EmptyBlock) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         fail(e.toString()); [EOL]     } [EOL]     assertEquals(b1, b2); [EOL] } <line_num>: 168,186
