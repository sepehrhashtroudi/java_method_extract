public BorderArrangementTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 88,90
public static Test suite() { [EOL]     return new TestSuite(BorderArrangementTests.class); [EOL] } <line_num>: 79,81
public void testEquals() { [EOL]     BorderArrangement b1 = new BorderArrangement(); [EOL]     BorderArrangement b2 = new BorderArrangement(); [EOL]     assertTrue(b1.equals(b2)); [EOL]     assertTrue(b2.equals(b1)); [EOL]     b1.add(new EmptyBlock(99.0, 99.0), null); [EOL]     assertFalse(b1.equals(b2)); [EOL]     b2.add(new EmptyBlock(99.0, 99.0), null); [EOL]     assertTrue(b1.equals(b2)); [EOL]     b1.add(new EmptyBlock(1.0, 1.0), RectangleEdge.LEFT); [EOL]     assertFalse(b1.equals(b2)); [EOL]     b2.add(new EmptyBlock(1.0, 1.0), RectangleEdge.LEFT); [EOL]     assertTrue(b1.equals(b2)); [EOL]     b1.add(new EmptyBlock(2.0, 2.0), RectangleEdge.RIGHT); [EOL]     assertFalse(b1.equals(b2)); [EOL]     b2.add(new EmptyBlock(2.0, 2.0), RectangleEdge.RIGHT); [EOL]     assertTrue(b1.equals(b2)); [EOL]     b1.add(new EmptyBlock(3.0, 3.0), RectangleEdge.TOP); [EOL]     assertFalse(b1.equals(b2)); [EOL]     b2.add(new EmptyBlock(3.0, 3.0), RectangleEdge.TOP); [EOL]     assertTrue(b1.equals(b2)); [EOL]     b1.add(new EmptyBlock(4.0, 4.0), RectangleEdge.BOTTOM); [EOL]     assertFalse(b1.equals(b2)); [EOL]     b2.add(new EmptyBlock(4.0, 4.0), RectangleEdge.BOTTOM); [EOL]     assertTrue(b1.equals(b2)); [EOL] } <line_num>: 95,125
public void testCloning() { [EOL]     BorderArrangement b1 = new BorderArrangement(); [EOL]     assertFalse(b1 instanceof Cloneable); [EOL] } <line_num>: 130,133
public void testSerialization() { [EOL]     BorderArrangement b1 = new BorderArrangement(); [EOL]     BorderArrangement b2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(b1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         b2 = (BorderArrangement) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         fail(e.toString()); [EOL]     } [EOL]     assertEquals(b1, b2); [EOL] } <line_num>: 138,156
public void testSizing() { [EOL]     BlockContainer container = new BlockContainer(new BorderArrangement()); [EOL]     BufferedImage image = new BufferedImage(200, 100, BufferedImage.TYPE_INT_RGB); [EOL]     Graphics2D g2 = image.createGraphics(); [EOL]     Size2D size = container.arrange(g2); [EOL]     assertEquals(0.0, size.width, EPSILON); [EOL]     assertEquals(0.0, size.height, EPSILON); [EOL]     container.add(new EmptyBlock(123.4, 567.8)); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(123.4, size.width, EPSILON); [EOL]     assertEquals(567.8, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.RIGHT); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(12.3, size.width, EPSILON); [EOL]     assertEquals(45.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(10.0, 20.0)); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.RIGHT); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(22.3, size.width, EPSILON); [EOL]     assertEquals(45.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     Block rb = new EmptyBlock(12.3, 15.6); [EOL]     container.add(new EmptyBlock(10.0, 20.0)); [EOL]     container.add(rb, RectangleEdge.RIGHT); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(22.3, size.width, EPSILON); [EOL]     assertEquals(20.0, size.height, EPSILON); [EOL]     assertEquals(20.0, rb.getBounds().getHeight(), EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(12.3, size.width, EPSILON); [EOL]     assertEquals(45.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(10.0, 20.0)); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(22.3, size.width, EPSILON); [EOL]     assertEquals(45.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     Block lb = new EmptyBlock(12.3, 15.6); [EOL]     container.add(new EmptyBlock(10.0, 20.0)); [EOL]     container.add(lb, RectangleEdge.LEFT); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(22.3, size.width, EPSILON); [EOL]     assertEquals(20.0, size.height, EPSILON); [EOL]     assertEquals(20.0, lb.getBounds().getHeight(), EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(22.3, size.width, EPSILON); [EOL]     assertEquals(45.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(10.0, 20.0)); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT); [EOL]     container.add(new EmptyBlock(5.4, 3.2), RectangleEdge.RIGHT); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(27.7, size.width, EPSILON); [EOL]     assertEquals(45.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(12.3, size.width, EPSILON); [EOL]     assertEquals(45.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(10.0, 20.0)); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(12.3, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(12.3, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(21.0, 12.3)); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(31.0, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(12.3, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(21.0, 12.3)); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(31.0, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(31.0, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM); [EOL]     container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT); [EOL]     container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT); [EOL]     container.add(new EmptyBlock(9.0, 10.0)); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(21.0, size.width, EPSILON); [EOL]     assertEquals(14.0, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(12.3, size.width, EPSILON); [EOL]     assertEquals(45.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(10.0, 20.0)); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(12.3, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(12.3, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(21.0, 12.3)); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.RIGHT); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(33.3, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(12.3, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(21.0, 12.3)); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(33.3, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(33.3, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP); [EOL]     container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT); [EOL]     container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT); [EOL]     container.add(new EmptyBlock(9.0, 10.0)); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(21.0, size.width, EPSILON); [EOL]     assertEquals(12.0, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(12.3, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(21.0, 12.3)); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(21.0, size.width, EPSILON); [EOL]     assertEquals(77.9, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(21.0, size.width, EPSILON); [EOL]     assertEquals(77.9, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP); [EOL]     container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM); [EOL]     container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT); [EOL]     container.add(new EmptyBlock(9.0, 10.0)); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(16.0, size.width, EPSILON); [EOL]     assertEquals(16.0, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.LEFT); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(21.0, size.width, EPSILON); [EOL]     assertEquals(77.9, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP); [EOL]     container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM); [EOL]     container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT); [EOL]     container.add(new EmptyBlock(9.0, 10.0)); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(14.0, size.width, EPSILON); [EOL]     assertEquals(16.0, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP); [EOL]     container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM); [EOL]     container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT); [EOL]     container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(12.0, size.width, EPSILON); [EOL]     assertEquals(14.0, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP); [EOL]     container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM); [EOL]     container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT); [EOL]     container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT); [EOL]     container.add(new EmptyBlock(9.0, 10.0)); [EOL]     size = container.arrange(g2); [EOL]     assertEquals(21.0, size.width, EPSILON); [EOL]     assertEquals(16.0, size.height, EPSILON); [EOL] } <line_num>: 161,489
public void testSizingWithWidthConstraint() { [EOL]     RectangleConstraint constraint = new RectangleConstraint(10.0, new Range(10.0, 10.0), LengthConstraintType.FIXED, 0.0, new Range(0.0, 0.0), LengthConstraintType.NONE); [EOL]     BlockContainer container = new BlockContainer(new BorderArrangement()); [EOL]     BufferedImage image = new BufferedImage(200, 100, BufferedImage.TYPE_INT_RGB); [EOL]     Graphics2D g2 = image.createGraphics(); [EOL]     container.add(new EmptyBlock(5.0, 6.0)); [EOL]     Size2D size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(6.0, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(15.0, 16.0)); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(16.0, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.RIGHT); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(45.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(7.0, 20.0)); [EOL]     container.add(new EmptyBlock(8.0, 45.6), RectangleEdge.RIGHT); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(45.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(45.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(10.0, 20.0)); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(45.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(45.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(10.0, 20.0)); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT); [EOL]     container.add(new EmptyBlock(5.4, 3.2), RectangleEdge.RIGHT); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(45.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(45.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(10.0, 20.0)); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(21.0, 12.3)); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(21.0, 12.3)); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM); [EOL]     container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT); [EOL]     container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT); [EOL]     container.add(new EmptyBlock(9.0, 10.0)); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(14.0, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(45.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(10.0, 20.0)); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(21.0, 12.3)); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.RIGHT); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(21.0, 12.3)); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP); [EOL]     container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT); [EOL]     container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT); [EOL]     container.add(new EmptyBlock(9.0, 10.0)); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(12.0, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(65.6, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(21.0, 12.3)); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(77.9, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(77.9, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP); [EOL]     container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM); [EOL]     container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT); [EOL]     container.add(new EmptyBlock(9.0, 10.0)); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(16.0, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.LEFT); [EOL]     container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP); [EOL]     container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(77.9, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP); [EOL]     container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM); [EOL]     container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT); [EOL]     container.add(new EmptyBlock(9.0, 10.0)); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(16.0, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP); [EOL]     container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM); [EOL]     container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT); [EOL]     container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(14.0, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP); [EOL]     container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM); [EOL]     container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT); [EOL]     container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT); [EOL]     container.add(new EmptyBlock(9.0, 10.0)); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(16.0, size.height, EPSILON); [EOL]     container.clear(); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(10.0, size.width, EPSILON); [EOL]     assertEquals(0.0, size.height, EPSILON); [EOL] } <line_num>: 494,813
public void testBugX() { [EOL]     RectangleConstraint constraint = new RectangleConstraint(new Range(0.0, 200.0), new Range(0.0, 100.0)); [EOL]     BlockContainer container = new BlockContainer(new BorderArrangement()); [EOL]     BufferedImage image = new BufferedImage(200, 100, BufferedImage.TYPE_INT_RGB); [EOL]     Graphics2D g2 = image.createGraphics(); [EOL]     container.add(new EmptyBlock(10.0, 6.0), RectangleEdge.LEFT); [EOL]     container.add(new EmptyBlock(20.0, 6.0), RectangleEdge.RIGHT); [EOL]     container.add(new EmptyBlock(30.0, 6.0)); [EOL]     Size2D size = container.arrange(g2, constraint); [EOL]     assertEquals(60.0, size.width, EPSILON); [EOL]     assertEquals(6.0, size.height, EPSILON); [EOL]     container.clear(); [EOL]     container.add(new EmptyBlock(10.0, 6.0), RectangleEdge.LEFT); [EOL]     container.add(new EmptyBlock(20.0, 6.0), RectangleEdge.RIGHT); [EOL]     container.add(new EmptyBlock(300.0, 6.0)); [EOL]     size = container.arrange(g2, constraint); [EOL]     assertEquals(200.0, size.width, EPSILON); [EOL]     assertEquals(6.0, size.height, EPSILON); [EOL] } <line_num>: 821,845
