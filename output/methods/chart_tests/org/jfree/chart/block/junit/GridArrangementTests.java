public GridArrangementTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 84,86
public static Test suite() { [EOL]     return new TestSuite(GridArrangementTests.class); [EOL] } <line_num>: 75,77
public void testEquals() { [EOL]     GridArrangement f1 = new GridArrangement(11, 22); [EOL]     GridArrangement f2 = new GridArrangement(11, 22); [EOL]     assertTrue(f1.equals(f2)); [EOL]     assertTrue(f2.equals(f1)); [EOL]     f1 = new GridArrangement(33, 22); [EOL]     assertFalse(f1.equals(f2)); [EOL]     f2 = new GridArrangement(33, 22); [EOL]     assertTrue(f1.equals(f2)); [EOL]     f1 = new GridArrangement(33, 44); [EOL]     assertFalse(f1.equals(f2)); [EOL]     f2 = new GridArrangement(33, 44); [EOL]     assertTrue(f1.equals(f2)); [EOL] } <line_num>: 91,106
public void testCloning() { [EOL]     GridArrangement f1 = new GridArrangement(1, 2); [EOL]     assertFalse(f1 instanceof Cloneable); [EOL] } <line_num>: 111,114
public void testSerialization() { [EOL]     GridArrangement f1 = new GridArrangement(33, 44); [EOL]     GridArrangement f2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(f1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         f2 = (GridArrangement) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(f1, f2); [EOL] } <line_num>: 119,137
public void testNN() { [EOL]     BlockContainer c = createTestContainer1(); [EOL]     Size2D s = c.arrange(null, RectangleConstraint.NONE); [EOL]     assertEquals(90.0, s.width, EPSILON); [EOL]     assertEquals(33.0, s.height, EPSILON); [EOL] } <line_num>: 144,149
public void testFN() { [EOL]     BlockContainer c = createTestContainer1(); [EOL]     RectangleConstraint constraint = new RectangleConstraint(100.0, null, LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE); [EOL]     Size2D s = c.arrange(null, constraint); [EOL]     assertEquals(100.0, s.width, EPSILON); [EOL]     assertEquals(33.0, s.height, EPSILON); [EOL] } <line_num>: 154,162
public void testNF() { [EOL]     BlockContainer c = createTestContainer1(); [EOL]     RectangleConstraint constraint = RectangleConstraint.NONE.toFixedHeight(100.0); [EOL]     Size2D s = c.arrange(null, constraint); [EOL]     assertEquals(90.0, s.width, EPSILON); [EOL]     assertEquals(100.0, s.height, EPSILON); [EOL] } <line_num>: 167,174
public void testRF() { [EOL]     BlockContainer c = createTestContainer1(); [EOL]     RectangleConstraint constraint = new RectangleConstraint(new Range(40.0, 60.0), 100.0); [EOL]     Size2D s = c.arrange(null, constraint); [EOL]     assertEquals(60.0, s.width, EPSILON); [EOL]     assertEquals(100.0, s.height, EPSILON); [EOL] } <line_num>: 179,186
public void testRR() { [EOL]     BlockContainer c = createTestContainer1(); [EOL]     RectangleConstraint constraint = new RectangleConstraint(new Range(40.0, 60.0), new Range(50.0, 70.0)); [EOL]     Size2D s = c.arrange(null, constraint); [EOL]     assertEquals(60.0, s.width, EPSILON); [EOL]     assertEquals(50.0, s.height, EPSILON); [EOL] } <line_num>: 191,198
public void testRN() { [EOL]     BlockContainer c = createTestContainer1(); [EOL]     RectangleConstraint constraint = RectangleConstraint.NONE.toRangeWidth(new Range(40.0, 60.0)); [EOL]     Size2D s = c.arrange(null, constraint); [EOL]     assertEquals(60.0, s.width, EPSILON); [EOL]     assertEquals(33.0, s.height, EPSILON); [EOL] } <line_num>: 203,210
public void testNR() { [EOL]     BlockContainer c = createTestContainer1(); [EOL]     RectangleConstraint constraint = RectangleConstraint.NONE.toRangeHeight(new Range(40.0, 60.0)); [EOL]     Size2D s = c.arrange(null, constraint); [EOL]     assertEquals(90.0, s.width, EPSILON); [EOL]     assertEquals(40.0, s.height, EPSILON); [EOL] } <line_num>: 215,222
private BlockContainer createTestContainer1() { [EOL]     Block b1 = new EmptyBlock(10, 11); [EOL]     Block b2 = new EmptyBlock(20, 22); [EOL]     Block b3 = new EmptyBlock(30, 33); [EOL]     BlockContainer result = new BlockContainer(new GridArrangement(1, 3)); [EOL]     result.add(b1); [EOL]     result.add(b2); [EOL]     result.add(b3); [EOL]     return result; [EOL] } <line_num>: 224,233
public void testNullBlock_FF() { [EOL]     BlockContainer c = new BlockContainer(new GridArrangement(1, 1)); [EOL]     c.add(null); [EOL]     Size2D s = c.arrange(null, new RectangleConstraint(20, 10)); [EOL]     assertEquals(20.0, s.getWidth(), EPSILON); [EOL]     assertEquals(10.0, s.getHeight(), EPSILON); [EOL] } <line_num>: 238,244
public void testNullBlock_FN() { [EOL]     BlockContainer c = new BlockContainer(new GridArrangement(1, 1)); [EOL]     c.add(null); [EOL]     Size2D s = c.arrange(null, RectangleConstraint.NONE.toFixedWidth(10)); [EOL]     assertEquals(10.0, s.getWidth(), EPSILON); [EOL]     assertEquals(0.0, s.getHeight(), EPSILON); [EOL] } <line_num>: 249,255
public void testNullBlock_FR() { [EOL]     BlockContainer c = new BlockContainer(new GridArrangement(1, 1)); [EOL]     c.add(null); [EOL]     Size2D s = c.arrange(null, new RectangleConstraint(30.0, new Range(5.0, 10.0))); [EOL]     assertEquals(30.0, s.getWidth(), EPSILON); [EOL]     assertEquals(5.0, s.getHeight(), EPSILON); [EOL] } <line_num>: 260,267
public void testNullBlock_NN() { [EOL]     BlockContainer c = new BlockContainer(new GridArrangement(1, 1)); [EOL]     c.add(null); [EOL]     Size2D s = c.arrange(null, RectangleConstraint.NONE); [EOL]     assertEquals(0.0, s.getWidth(), EPSILON); [EOL]     assertEquals(0.0, s.getHeight(), EPSILON); [EOL] } <line_num>: 272,278
public void testGridNotFull_FF() { [EOL]     Block b1 = new EmptyBlock(5, 5); [EOL]     BlockContainer c = new BlockContainer(new GridArrangement(2, 3)); [EOL]     c.add(b1); [EOL]     Size2D s = c.arrange(null, new RectangleConstraint(200, 100)); [EOL]     assertEquals(200.0, s.getWidth(), EPSILON); [EOL]     assertEquals(100.0, s.getHeight(), EPSILON); [EOL] } <line_num>: 283,290
public void testGridNotFull_FN() { [EOL]     Block b1 = new EmptyBlock(5, 5); [EOL]     BlockContainer c = new BlockContainer(new GridArrangement(2, 3)); [EOL]     c.add(b1); [EOL]     Size2D s = c.arrange(null, RectangleConstraint.NONE.toFixedWidth(30.0)); [EOL]     assertEquals(30.0, s.getWidth(), EPSILON); [EOL]     assertEquals(10.0, s.getHeight(), EPSILON); [EOL] } <line_num>: 295,302
public void testGridNotFull_FR() { [EOL]     Block b1 = new EmptyBlock(5, 5); [EOL]     BlockContainer c = new BlockContainer(new GridArrangement(2, 3)); [EOL]     c.add(b1); [EOL]     Size2D s = c.arrange(null, new RectangleConstraint(30.0, new Range(5.0, 10.0))); [EOL]     assertEquals(30.0, s.getWidth(), EPSILON); [EOL]     assertEquals(10.0, s.getHeight(), EPSILON); [EOL] } <line_num>: 307,315
public void testGridNotFull_NN() { [EOL]     Block b1 = new EmptyBlock(5, 5); [EOL]     BlockContainer c = new BlockContainer(new GridArrangement(2, 3)); [EOL]     c.add(b1); [EOL]     Size2D s = c.arrange(null, RectangleConstraint.NONE); [EOL]     assertEquals(15.0, s.getWidth(), EPSILON); [EOL]     assertEquals(10.0, s.getHeight(), EPSILON); [EOL] } <line_num>: 320,327
