public ModuloAxisTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 76,78
public static Test suite() { [EOL]     return new TestSuite(ModuloAxisTests.class); [EOL] } <line_num>: 67,69
public void testCloning() { [EOL]     ModuloAxis a1 = new ModuloAxis("Test", new Range(0.0, 1.0)); [EOL]     ModuloAxis a2 = null; [EOL]     try { [EOL]         a2 = (ModuloAxis) a1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(a1 != a2); [EOL]     assertTrue(a1.getClass() == a2.getClass()); [EOL]     assertTrue(a1.equals(a2)); [EOL] } <line_num>: 83,95
public void testEquals() { [EOL]     ModuloAxis a1 = new ModuloAxis("Test", new Range(0.0, 1.0)); [EOL]     ModuloAxis a2 = new ModuloAxis("Test", new Range(0.0, 1.0)); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setDisplayRange(0.1, 1.1); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setDisplayRange(0.1, 1.1); [EOL]     assertTrue(a1.equals(a2)); [EOL] } <line_num>: 100,109
public void testHashCode() { [EOL]     ModuloAxis a1 = new ModuloAxis("Test", new Range(0.0, 1.0)); [EOL]     ModuloAxis a2 = new ModuloAxis("Test", new Range(0.0, 1.0)); [EOL]     assertTrue(a1.equals(a2)); [EOL]     int h1 = a1.hashCode(); [EOL]     int h2 = a2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 114,121
public void testSerialization() { [EOL]     ModuloAxis a1 = new ModuloAxis("Test", new Range(0.0, 1.0)); [EOL]     ModuloAxis a2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(a1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         a2 = (ModuloAxis) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(a1, a2); [EOL] } <line_num>: 126,147
