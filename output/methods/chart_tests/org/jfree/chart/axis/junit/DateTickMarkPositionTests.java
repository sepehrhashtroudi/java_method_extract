public DateTickMarkPositionTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 75,77
public static Test suite() { [EOL]     return new TestSuite(DateTickMarkPositionTests.class); [EOL] } <line_num>: 66,68
public void testEquals() { [EOL]     assertEquals(DateTickMarkPosition.START, DateTickMarkPosition.START); [EOL]     assertEquals(DateTickMarkPosition.MIDDLE, DateTickMarkPosition.MIDDLE); [EOL]     assertEquals(DateTickMarkPosition.END, DateTickMarkPosition.END); [EOL]     assertFalse(DateTickMarkPosition.START.equals(null)); [EOL]     assertFalse(DateTickMarkPosition.START.equals(DateTickMarkPosition.END)); [EOL]     assertFalse(DateTickMarkPosition.MIDDLE.equals(DateTickMarkPosition.END)); [EOL] } <line_num>: 82,91
public void testHashCode() { [EOL]     DateTickMarkPosition a1 = DateTickMarkPosition.END; [EOL]     DateTickMarkPosition a2 = DateTickMarkPosition.END; [EOL]     assertTrue(a1.equals(a2)); [EOL]     int h1 = a1.hashCode(); [EOL]     int h2 = a2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 96,103
public void testSerialization() { [EOL]     DateTickMarkPosition p1 = DateTickMarkPosition.MIDDLE; [EOL]     DateTickMarkPosition p2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(p1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         p2 = (DateTickMarkPosition) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(p1, p2); [EOL]     assertTrue(p1 == p2); [EOL] } <line_num>: 108,128
