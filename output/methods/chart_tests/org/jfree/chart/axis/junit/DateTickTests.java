public DateTickTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 80,82
public static Test suite() { [EOL]     return new TestSuite(DateTickTests.class); [EOL] } <line_num>: 71,73
public void testEquals() { [EOL]     Date d1 = new Date(0L); [EOL]     Date d2 = new Date(1L); [EOL]     String l1 = "Label 1"; [EOL]     String l2 = "Label 2"; [EOL]     TextAnchor ta1 = TextAnchor.CENTER; [EOL]     TextAnchor ta2 = TextAnchor.BASELINE_LEFT; [EOL]     DateTick t1 = new DateTick(d1, l1, ta1, ta1, Math.PI / 2.0); [EOL]     DateTick t2 = new DateTick(d1, l1, ta1, ta1, Math.PI / 2.0); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1 = new DateTick(d2, l1, ta1, ta1, Math.PI / 2.0); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2 = new DateTick(d2, l1, ta1, ta1, Math.PI / 2.0); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1 = new DateTick(d1, l2, ta1, ta1, Math.PI / 2.0); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2 = new DateTick(d1, l2, ta1, ta1, Math.PI / 2.0); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1 = new DateTick(d1, l1, ta2, ta1, Math.PI / 2.0); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2 = new DateTick(d1, l1, ta2, ta1, Math.PI / 2.0); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1 = new DateTick(d1, l1, ta1, ta2, Math.PI / 2.0); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2 = new DateTick(d1, l1, ta1, ta2, Math.PI / 2.0); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1 = new DateTick(d1, l1, ta1, ta1, Math.PI / 3.0); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2 = new DateTick(d1, l1, ta1, ta1, Math.PI / 3.0); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1 = new DateTick(TickType.MINOR, d1, l1, ta1, ta1, Math.PI); [EOL]     t2 = new DateTick(TickType.MAJOR, d1, l1, ta1, ta1, Math.PI); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2 = new DateTick(TickType.MINOR, d1, l1, ta1, ta1, Math.PI); [EOL]     assertTrue(t1.equals(t2)); [EOL] } <line_num>: 87,131
public void testHashCode() { [EOL]     Date d1 = new Date(0L); [EOL]     String l1 = "Label 1"; [EOL]     TextAnchor ta1 = TextAnchor.CENTER; [EOL]     DateTick t1 = new DateTick(d1, l1, ta1, ta1, Math.PI / 2.0); [EOL]     DateTick t2 = new DateTick(d1, l1, ta1, ta1, Math.PI / 2.0); [EOL]     assertTrue(t1.equals(t2)); [EOL]     int h1 = t1.hashCode(); [EOL]     int h2 = t2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 136,147
public void testCloning() { [EOL]     DateTick t1 = new DateTick(new Date(0L), "Label", TextAnchor.CENTER, TextAnchor.CENTER, 10.0); [EOL]     DateTick t2 = null; [EOL]     try { [EOL]         t2 = (DateTick) t1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(t1 != t2); [EOL]     assertTrue(t1.getClass() == t2.getClass()); [EOL]     assertTrue(t1.equals(t2)); [EOL] } <line_num>: 152,165
public void testSerialization() { [EOL]     DateTick t1 = new DateTick(new Date(0L), "Label", TextAnchor.CENTER, TextAnchor.CENTER, 10.0); [EOL]     DateTick t2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(t1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         t2 = (DateTick) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(t1, t2); [EOL] } <line_num>: 170,192
