public MyLogarithmicAxis(String label) { [EOL]     super(label); [EOL] } <line_num>: 72,74
public LogarithmicAxisTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 104,106
protected double switchedLog10(double val) { [EOL]     return super.switchedLog10(val); [EOL] } <line_num>: 79,81
public static Test suite() { [EOL]     return new TestSuite(LogarithmicAxisTests.class); [EOL] } <line_num>: 95,97
protected void setUp() throws Exception { [EOL]     this.axis = new MyLogarithmicAxis("Value (log)"); [EOL]     this.axis.setAllowNegativesFlag(false); [EOL]     this.axis.setLog10TickLabelsFlag(false); [EOL]     this.axis.setLowerMargin(0.0); [EOL]     this.axis.setUpperMargin(0.0); [EOL]     this.axis.setLowerBound(0.2); [EOL]     this.axis.setUpperBound(100.0); [EOL] } <line_num>: 113,122
public void testSerialization() { [EOL]     LogarithmicAxis a1 = new LogarithmicAxis("Test Axis"); [EOL]     LogarithmicAxis a2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(a1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         a2 = (LogarithmicAxis) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(a1, a2); [EOL] } <line_num>: 127,148
public void testAdjustedLog10() { [EOL]     checkLogPowRoundTrip(20); [EOL]     checkLogPowRoundTrip(10); [EOL]     checkLogPowRoundTrip(5); [EOL]     checkLogPowRoundTrip(2); [EOL]     checkLogPowRoundTrip(1); [EOL]     checkLogPowRoundTrip(0.5); [EOL]     checkLogPowRoundTrip(0.2); [EOL]     checkLogPowRoundTrip(0.0001); [EOL] } <line_num>: 153,162
private void checkLogPowRoundTrip(double value) { [EOL]     assertEquals("log(pow(x)) = x", value, this.axis.adjustedLog10(this.axis.adjustedPow10(value)), EPSILON); [EOL]     assertEquals("pow(log(x)) = x", value, this.axis.adjustedPow10(this.axis.adjustedLog10(value)), EPSILON); [EOL] } <line_num>: 164,169
public void testSwitchedLog10() { [EOL]     assertFalse("Axis should not allow negative values", this.axis.getAllowNegativesFlag()); [EOL]     assertEquals(Math.log(0.5) / LogarithmicAxis.LOG10_VALUE, this.axis.switchedLog10(0.5), EPSILON); [EOL]     checkSwitchedLogPowRoundTrip(20); [EOL]     checkSwitchedLogPowRoundTrip(10); [EOL]     checkSwitchedLogPowRoundTrip(5); [EOL]     checkSwitchedLogPowRoundTrip(2); [EOL]     checkSwitchedLogPowRoundTrip(1); [EOL]     checkSwitchedLogPowRoundTrip(0.5); [EOL]     checkSwitchedLogPowRoundTrip(0.2); [EOL]     checkSwitchedLogPowRoundTrip(0.0001); [EOL] } <line_num>: 174,189
private void checkSwitchedLogPowRoundTrip(double value) { [EOL]     assertEquals("log(pow(x)) = x", value, this.axis.switchedLog10(this.axis.switchedPow10(value)), EPSILON); [EOL]     assertEquals("pow(log(x)) = x", value, this.axis.switchedPow10(this.axis.switchedLog10(value)), EPSILON); [EOL] } <line_num>: 191,196
public void testJava2DToValue() { [EOL]     Rectangle2D plotArea = new Rectangle2D.Double(22, 33, 500, 500); [EOL]     RectangleEdge edge = RectangleEdge.BOTTOM; [EOL]     this.axis.setRange(10, 20); [EOL]     checkPointsToValue(edge, plotArea); [EOL]     this.axis.setRange(0.5, 10); [EOL]     checkPointsToValue(edge, plotArea); [EOL]     this.axis.setRange(0.2, 20); [EOL]     checkPointsToValue(edge, plotArea); [EOL]     this.axis.setRange(0.2, 0.7); [EOL]     checkPointsToValue(edge, plotArea); [EOL] } <line_num>: 201,220
public void testValueToJava2D() { [EOL]     Rectangle2D plotArea = new Rectangle2D.Double(22, 33, 500, 500); [EOL]     RectangleEdge edge = RectangleEdge.BOTTOM; [EOL]     this.axis.setRange(10, 20); [EOL]     checkPointsToJava2D(edge, plotArea); [EOL]     this.axis.setRange(0.5, 10); [EOL]     checkPointsToJava2D(edge, plotArea); [EOL]     this.axis.setRange(0.2, 20); [EOL]     checkPointsToJava2D(edge, plotArea); [EOL]     this.axis.setRange(0.2, 0.7); [EOL]     checkPointsToJava2D(edge, plotArea); [EOL] } <line_num>: 225,244
private void checkPointsToJava2D(RectangleEdge edge, Rectangle2D plotArea) { [EOL]     assertEquals("Left most point on the axis should be beginning of " + "range.", plotArea.getX(), this.axis.valueToJava2D(this.axis.getLowerBound(), plotArea, edge), EPSILON); [EOL]     assertEquals("Right most point on the axis should be end of range.", plotArea.getX() + plotArea.getWidth(), this.axis.valueToJava2D(this.axis.getUpperBound(), plotArea, edge), EPSILON); [EOL]     assertEquals("Center point on the axis should geometric mean of the bounds.", plotArea.getX() + (plotArea.getWidth() / 2), this.axis.valueToJava2D(Math.sqrt(this.axis.getLowerBound() * this.axis.getUpperBound()), plotArea, edge), EPSILON); [EOL] } <line_num>: 246,259
private void checkPointsToValue(RectangleEdge edge, Rectangle2D plotArea) { [EOL]     assertEquals("Right most point on the axis should be end of range.", this.axis.getUpperBound(), this.axis.java2DToValue(plotArea.getX() + plotArea.getWidth(), plotArea, edge), EPSILON); [EOL]     assertEquals("Left most point on the axis should be beginning of " + "range.", this.axis.getLowerBound(), this.axis.java2DToValue(plotArea.getX(), plotArea, edge), EPSILON); [EOL]     assertEquals("Center point on the axis should geometric mean of the " + "bounds.", Math.sqrt(this.axis.getUpperBound() * this.axis.getLowerBound()), this.axis.java2DToValue(plotArea.getX() + (plotArea.getWidth() / 2), plotArea, edge), EPSILON); [EOL] } <line_num>: 267,283
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(LogarithmicAxisTests.class); [EOL] } <line_num>: 290,292
