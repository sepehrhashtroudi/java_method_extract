public PeriodAxisTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 108,110
public void axisChanged(AxisChangeEvent event) { [EOL]     this.lastEvent = event; [EOL] } <line_num>: 90,92
public static Test suite() { [EOL]     return new TestSuite(PeriodAxisTests.class); [EOL] } <line_num>: 99,101
public void testEquals() { [EOL]     PeriodAxis a1 = new PeriodAxis("Test"); [EOL]     PeriodAxis a2 = new PeriodAxis("Test"); [EOL]     assertTrue(a1.equals(a2)); [EOL]     assertTrue(a2.equals(a1)); [EOL]     a1.setFirst(new Year(2000)); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setFirst(new Year(2000)); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setLast(new Year(2004)); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setLast(new Year(2004)); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setTimeZone(TimeZone.getTimeZone("Pacific/Auckland")); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setTimeZone(TimeZone.getTimeZone("Pacific/Auckland")); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setAutoRangeTimePeriodClass(Quarter.class); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setAutoRangeTimePeriodClass(Quarter.class); [EOL]     assertTrue(a1.equals(a2)); [EOL]     PeriodAxisLabelInfo[] info = new PeriodAxisLabelInfo[1]; [EOL]     info[0] = new PeriodAxisLabelInfo(Month.class, new SimpleDateFormat("MMM")); [EOL]     a1.setLabelInfo(info); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setLabelInfo(info); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setMajorTickTimePeriodClass(Minute.class); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setMajorTickTimePeriodClass(Minute.class); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setMinorTickMarksVisible(!a1.isMinorTickMarksVisible()); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setMinorTickMarksVisible(a1.isMinorTickMarksVisible()); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setMinorTickTimePeriodClass(Minute.class); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setMinorTickTimePeriodClass(Minute.class); [EOL]     assertTrue(a1.equals(a2)); [EOL]     Stroke s = new BasicStroke(1.23f); [EOL]     a1.setMinorTickMarkStroke(s); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setMinorTickMarkStroke(s); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setMinorTickMarkPaint(Color.blue); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setMinorTickMarkPaint(Color.blue); [EOL]     assertTrue(a1.equals(a2)); [EOL] } <line_num>: 115,177
public void testEqualsWithLocale() { [EOL]     PeriodAxis a1 = new PeriodAxis("Test", new Year(2000), new Year(2009), TimeZone.getDefault(), Locale.JAPAN); [EOL]     PeriodAxis a2 = new PeriodAxis("Test", new Year(2000), new Year(2009), TimeZone.getDefault(), Locale.JAPAN); [EOL]     assertTrue(a1.equals(a2)); [EOL]     assertTrue(a2.equals(a1)); [EOL]     a1 = new PeriodAxis("Test", new Year(2000), new Year(2009), TimeZone.getDefault(), Locale.UK); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2 = new PeriodAxis("Test", new Year(2000), new Year(2009), TimeZone.getDefault(), Locale.UK); [EOL]     assertTrue(a1.equals(a2)); [EOL] } <line_num>: 183,197
public void testHashCode() { [EOL]     PeriodAxis a1 = new PeriodAxis("Test"); [EOL]     PeriodAxis a2 = new PeriodAxis("Test"); [EOL]     assertTrue(a1.equals(a2)); [EOL]     int h1 = a1.hashCode(); [EOL]     int h2 = a2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 202,209
public void testCloning() { [EOL]     PeriodAxis a1 = new PeriodAxis("Test"); [EOL]     PeriodAxis a2 = null; [EOL]     try { [EOL]         a2 = (PeriodAxis) a1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(a1 != a2); [EOL]     assertTrue(a1.getClass() == a2.getClass()); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setLabel("New Label"); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setLabel("New Label"); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setFirst(new Year(1920)); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setFirst(new Year(1920)); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setLast(new Year(2020)); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setLast(new Year(2020)); [EOL]     assertTrue(a1.equals(a2)); [EOL]     PeriodAxisLabelInfo[] info = new PeriodAxisLabelInfo[2]; [EOL]     info[0] = new PeriodAxisLabelInfo(Day.class, new SimpleDateFormat("d")); [EOL]     info[1] = new PeriodAxisLabelInfo(Year.class, new SimpleDateFormat("yyyy")); [EOL]     a1.setLabelInfo(info); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setLabelInfo(info); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setAutoRangeTimePeriodClass(Second.class); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setAutoRangeTimePeriodClass(Second.class); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setTimeZone(new SimpleTimeZone(123, "Bogus")); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setTimeZone(new SimpleTimeZone(123, "Bogus")); [EOL]     assertTrue(a1.equals(a2)); [EOL] } <line_num>: 214,262
public void testSerialization() { [EOL]     PeriodAxis a1 = new PeriodAxis("Test Axis"); [EOL]     PeriodAxis a2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(a1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         a2 = (PeriodAxis) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     boolean b = a1.equals(a2); [EOL]     assertTrue(b); [EOL] } <line_num>: 267,286
public void test1932146() { [EOL]     PeriodAxis axis = new PeriodAxis("TestAxis"); [EOL]     axis.addChangeListener(this); [EOL]     this.lastEvent = null; [EOL]     axis.setRange(new DateRange(0L, 1000L)); [EOL]     assertTrue(this.lastEvent != null); [EOL] } <line_num>: 291,297
public void test2490803() { [EOL] } <line_num>: 306,306
