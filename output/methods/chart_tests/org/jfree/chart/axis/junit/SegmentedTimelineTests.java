public SegmentedTimelineTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 180,182
public static Test suite() { [EOL]     return new TestSuite(SegmentedTimelineTests.class); [EOL] } <line_num>: 171,173
protected void setUp() throws Exception { [EOL]     this.msTimeline = new SegmentedTimeline(1, 5, 2); [EOL]     this.msTimeline.setStartTime(0); [EOL]     this.ms2BaseTimeline = new SegmentedTimeline(4, 1, 1); [EOL]     this.ms2BaseTimeline.setStartTime(0); [EOL]     this.ms2Timeline = new SegmentedTimeline(1, 2, 2); [EOL]     this.ms2Timeline.setStartTime(1); [EOL]     this.ms2Timeline.setBaseTimeline(this.ms2BaseTimeline); [EOL]     this.mondayFridayTimeline = SegmentedTimeline.newMondayThroughFridayTimeline(); [EOL]     this.fifteenMinTimeline = SegmentedTimeline.newFifteenMinuteTimeline(); [EOL]     Calendar cal = new GregorianCalendar(SegmentedTimeline.NO_DST_TIME_ZONE); [EOL]     cal.set(2001, 0, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     while (cal.get(Calendar.DAY_OF_WEEK) != Calendar.MONDAY) { [EOL]         cal.add(Calendar.DATE, 1); [EOL]     } [EOL]     this.monday = (Calendar) cal.clone(); [EOL]     cal.add(Calendar.HOUR, 9); [EOL]     this.monday9am = (Calendar) cal.clone(); [EOL] } <line_num>: 190,282
protected void tearDown() throws Exception { [EOL] } <line_num>: 290,292
public void testMsSegmentedTimeline() { [EOL]     assertEquals(1, this.msTimeline.getSegmentSize()); [EOL]     assertEquals(0, this.msTimeline.getStartTime()); [EOL]     assertEquals(5, this.msTimeline.getSegmentsIncluded()); [EOL]     assertEquals(2, this.msTimeline.getSegmentsExcluded()); [EOL] } <line_num>: 302,308
public void testMs2SegmentedTimeline() { [EOL]     assertEquals(1, this.ms2Timeline.getSegmentSize()); [EOL]     assertEquals(1, this.ms2Timeline.getStartTime()); [EOL]     assertEquals(2, this.ms2Timeline.getSegmentsIncluded()); [EOL]     assertEquals(2, this.ms2Timeline.getSegmentsExcluded()); [EOL]     assertEquals(this.ms2BaseTimeline, this.ms2Timeline.getBaseTimeline()); [EOL] } <line_num>: 314,321
public void testMondayThroughFridaySegmentedTimeline() { [EOL]     assertEquals(SegmentedTimeline.DAY_SEGMENT_SIZE, this.mondayFridayTimeline.getSegmentSize()); [EOL]     assertEquals(SegmentedTimeline.FIRST_MONDAY_AFTER_1900, this.mondayFridayTimeline.getStartTime()); [EOL]     assertEquals(5, this.mondayFridayTimeline.getSegmentsIncluded()); [EOL]     assertEquals(2, this.mondayFridayTimeline.getSegmentsExcluded()); [EOL] } <line_num>: 327,335
public void testFifteenMinSegmentedTimeline() { [EOL]     assertEquals(SegmentedTimeline.FIFTEEN_MINUTE_SEGMENT_SIZE, this.fifteenMinTimeline.getSegmentSize()); [EOL]     assertEquals(SegmentedTimeline.FIRST_MONDAY_AFTER_1900 + 36 * this.fifteenMinTimeline.getSegmentSize(), this.fifteenMinTimeline.getStartTime()); [EOL]     assertEquals(28, this.fifteenMinTimeline.getSegmentsIncluded()); [EOL]     assertEquals(68, this.fifteenMinTimeline.getSegmentsExcluded()); [EOL] } <line_num>: 341,349
public void testMsSegment() { [EOL]     verifyOneSegment(this.msTimeline); [EOL] } <line_num>: 359,361
public void testMs2Segment() { [EOL]     verifyOneSegment(this.ms2Timeline); [EOL] } <line_num>: 367,369
public void testMondayThroughFridaySegment() { [EOL]     verifyOneSegment(this.mondayFridayTimeline); [EOL] } <line_num>: 375,377
public void testFifteenMinSegment() { [EOL]     verifyOneSegment(this.fifteenMinTimeline); [EOL] } <line_num>: 383,385
public void verifyOneSegment(SegmentedTimeline timeline) { [EOL]     for (long testCycle = TEST_CYCLE_START; testCycle < TEST_CYCLE_END; testCycle += TEST_CYCLE_INC) { [EOL]         SegmentedTimeline.Segment segment1 = timeline.getSegment(this.monday.getTime().getTime() + testCycle); [EOL]         SegmentedTimeline.Segment segment2 = timeline.getSegment(segment1.getSegmentEnd() + 1); [EOL]         assertEquals(segment1.getSegmentNumber() + 1, segment2.getSegmentNumber()); [EOL]         assertEquals(segment1.getSegmentEnd() + 1, segment2.getSegmentStart()); [EOL]         assertEquals(segment1.getSegmentStart() + timeline.getSegmentSize() - 1, segment1.getSegmentEnd()); [EOL]         assertEquals(segment1.getSegmentStart() + timeline.getSegmentSize(), segment2.getSegmentStart()); [EOL]         assertEquals(segment1.getSegmentEnd() + timeline.getSegmentSize(), segment2.getSegmentEnd()); [EOL]         long delta; [EOL]         if (timeline.getSegmentSize() > 1000000) { [EOL]             delta = timeline.getSegmentSize() / 10000; [EOL]         } else if (timeline.getSegmentSize() > 100000) { [EOL]             delta = timeline.getSegmentSize() / 1000; [EOL]         } else if (timeline.getSegmentSize() > 10000) { [EOL]             delta = timeline.getSegmentSize() / 100; [EOL]         } else if (timeline.getSegmentSize() > 1000) { [EOL]             delta = timeline.getSegmentSize() / 10; [EOL]         } else if (timeline.getSegmentSize() > 100) { [EOL]             delta = timeline.getSegmentSize() / 5; [EOL]         } else { [EOL]             delta = 1; [EOL]         } [EOL]         long start = segment1.getSegmentStart() + delta; [EOL]         long end = segment1.getSegmentStart() + timeline.getSegmentSize() - 1; [EOL]         SegmentedTimeline.Segment lastSeg = timeline.getSegment(segment1.getSegmentStart()); [EOL]         SegmentedTimeline.Segment seg; [EOL]         for (long i = start; i < end; i += delta) { [EOL]             seg = timeline.getSegment(i); [EOL]             assertEquals(lastSeg.getSegmentNumber(), seg.getSegmentNumber()); [EOL]             assertEquals(lastSeg.getSegmentStart(), seg.getSegmentStart()); [EOL]             assertEquals(lastSeg.getSegmentEnd(), seg.getSegmentEnd()); [EOL]             assertTrue(lastSeg.getMillisecond() < seg.getMillisecond()); [EOL]             lastSeg = seg; [EOL]         } [EOL]         seg = timeline.getSegment(end + 1); [EOL]         assertEquals(segment2.getSegmentNumber(), seg.getSegmentNumber()); [EOL]         assertEquals(segment2.getSegmentStart(), seg.getSegmentStart()); [EOL]         assertEquals(segment2.getSegmentEnd(), seg.getSegmentEnd()); [EOL]     } [EOL] } <line_num>: 392,458
public void testMsInc() { [EOL]     verifyInc(this.msTimeline); [EOL] } <line_num>: 467,469
public void testMs2Inc() { [EOL]     verifyInc(this.ms2Timeline); [EOL] } <line_num>: 474,476
public void testMondayThroughFridayInc() { [EOL]     verifyInc(this.mondayFridayTimeline); [EOL] } <line_num>: 481,483
public void testFifteenMinInc() { [EOL]     verifyInc(this.fifteenMinTimeline); [EOL] } <line_num>: 488,490
public void verifyInc(SegmentedTimeline timeline) { [EOL]     for (long testCycle = TEST_CYCLE_START; testCycle < TEST_CYCLE_END; testCycle += TEST_CYCLE_INC) { [EOL]         long m = timeline.getSegmentSize(); [EOL]         SegmentedTimeline.Segment segment = timeline.getSegment(testCycle); [EOL]         SegmentedTimeline.Segment seg1 = segment.copy(); [EOL]         for (int i = 0; i < 1000; i++) { [EOL]             SegmentedTimeline.Segment seg2 = seg1.copy(); [EOL]             seg2.inc(); [EOL]             if ((seg1.getSegmentEnd() + 1) != seg2.getSegmentStart()) { [EOL]                 assertTrue(!timeline.containsDomainRange(seg1.getSegmentEnd() + 1, seg2.getSegmentStart() - 1)); [EOL]                 assertEquals(0, (seg2.getSegmentStart() - seg1.getSegmentStart()) % m); [EOL]                 assertEquals(0, (seg2.getSegmentEnd() - seg1.getSegmentEnd()) % m); [EOL]                 assertEquals(0, (seg2.getMillisecond() - seg1.getMillisecond()) % m); [EOL]             } else { [EOL]                 assertEquals(seg1.getSegmentStart() + m, seg2.getSegmentStart()); [EOL]                 assertEquals(seg1.getSegmentEnd() + m, seg2.getSegmentEnd()); [EOL]                 assertEquals(seg1.getMillisecond() + m, seg2.getMillisecond()); [EOL]             } [EOL]             SegmentedTimeline.Segment seg3 = seg1.copy(); [EOL]             SegmentedTimeline.Segment seg4 = seg1.copy(); [EOL]             for (int j = 0; j < i; j++) { [EOL]                 seg3.inc(); [EOL]             } [EOL]             seg4.inc(i); [EOL]             assertEquals(seg3.getSegmentStart(), seg4.getSegmentStart()); [EOL]             assertEquals(seg3.getSegmentEnd(), seg4.getSegmentEnd()); [EOL]             assertEquals(seg3.getMillisecond(), seg4.getMillisecond()); [EOL]             seg1.inc(); [EOL]         } [EOL]     } [EOL] } <line_num>: 496,549
public void testMsIncludedAndExcludedSegments() { [EOL]     verifyIncludedAndExcludedSegments(this.msTimeline, 0); [EOL] } <line_num>: 559,561
public void testMs2IncludedAndExcludedSegments() { [EOL]     verifyIncludedAndExcludedSegments(this.ms2Timeline, 1); [EOL] } <line_num>: 567,569
public void testMondayThroughFridayIncludedAndExcludedSegments() { [EOL]     verifyIncludedAndExcludedSegments(this.mondayFridayTimeline, this.monday.getTime().getTime()); [EOL] } <line_num>: 576,579
public void testFifteenMinIncludedAndExcludedSegments() { [EOL]     verifyIncludedAndExcludedSegments(this.fifteenMinTimeline, this.monday9am.getTime().getTime()); [EOL] } <line_num>: 586,589
public void verifyIncludedAndExcludedSegments(SegmentedTimeline timeline, long n) { [EOL]     timeline.setExceptionSegments(new java.util.ArrayList()); [EOL]     SegmentedTimeline.Segment segment = timeline.getSegment(n); [EOL]     for (int i = 0; i < 1000; i++) { [EOL]         int d = (i % timeline.getGroupSegmentCount()); [EOL]         if (d < timeline.getSegmentsIncluded()) { [EOL]             assertTrue(segment.inIncludeSegments()); [EOL]             assertTrue(!segment.inExcludeSegments()); [EOL]             assertTrue(!segment.inExceptionSegments()); [EOL]         } else { [EOL]             assertTrue(!segment.inIncludeSegments()); [EOL]             assertTrue(segment.inExcludeSegments()); [EOL]             assertTrue(!segment.inExceptionSegments()); [EOL]         } [EOL]         segment.inc(); [EOL]     } [EOL] } <line_num>: 598,621
public void testMsExceptionSegments() throws ParseException { [EOL]     verifyExceptionSegments(this.msTimeline, MS_EXCEPTIONS, NUMBER_FORMAT); [EOL] } <line_num>: 632,634
public void testMs2BaseTimelineExceptionSegments() throws ParseException { [EOL]     verifyExceptionSegments(this.ms2BaseTimeline, MS2_BASE_TIMELINE_EXCEPTIONS, NUMBER_FORMAT); [EOL] } <line_num>: 641,644
public void testMondayThoughFridayExceptionSegments() throws ParseException { [EOL]     verifyExceptionSegments(this.mondayFridayTimeline, US_HOLIDAYS, DATE_FORMAT); [EOL] } <line_num>: 651,655
public void testFifteenMinExceptionSegments() throws ParseException { [EOL]     verifyExceptionSegments(this.fifteenMinTimeline, FIFTEEN_MIN_EXCEPTIONS, DATE_TIME_FORMAT); [EOL] } <line_num>: 662,665
public void verifyExceptionSegments(SegmentedTimeline timeline, String[] exceptionString, Format fmt) throws ParseException { [EOL]     long[] exception = verifyFillInExceptions(timeline, exceptionString, fmt); [EOL]     int m = exception.length; [EOL]     assertEquals(exception.length, timeline.getExceptionSegments().size()); [EOL]     SegmentedTimeline.Segment lastSegment = timeline.getSegment(exception[m - 1]); [EOL]     for (int i = 0; i < m; i++) { [EOL]         SegmentedTimeline.Segment segment = timeline.getSegment(exception[i]); [EOL]         assertTrue(segment.inExceptionSegments()); [EOL]         assertEquals(m - i, timeline.getExceptionSegmentCount(segment.getSegmentStart(), lastSegment.getSegmentEnd())); [EOL]         assertEquals(Math.max(0, m - i - 2), timeline.getExceptionSegmentCount(exception[i] + 1, exception[m - 1] - 1)); [EOL]     } [EOL] } <line_num>: 676,704
public void testMsTranslations() throws ParseException { [EOL]     verifyFillInExceptions(this.msTimeline, MS_EXCEPTIONS, NUMBER_FORMAT); [EOL]     verifyTranslations(this.msTimeline, 0); [EOL] } <line_num>: 715,718
public void testMs2BaseTimelineTranslations() throws ParseException { [EOL]     verifyFillInExceptions(this.ms2BaseTimeline, MS2_BASE_TIMELINE_EXCEPTIONS, NUMBER_FORMAT); [EOL]     verifyTranslations(this.ms2BaseTimeline, 0); [EOL] } <line_num>: 725,729
public void testMs2Translations() throws ParseException { [EOL]     fillInBaseTimelineExceptions(this.ms2Timeline, MS2_BASE_TIMELINE_EXCEPTIONS, NUMBER_FORMAT); [EOL]     fillInBaseTimelineExclusionsAsExceptions(this.ms2Timeline, 0, 5000); [EOL]     verifyTranslations(this.ms2Timeline, 1); [EOL] } <line_num>: 736,741
public void textMondayThroughFridayTranslations() throws ParseException { [EOL]     verifyFillInExceptions(this.mondayFridayTimeline, US_HOLIDAYS, DATE_FORMAT); [EOL]     verifyTranslations(this.mondayFridayTimeline, this.monday.getTime().getTime()); [EOL] } <line_num>: 748,753
public void testFifteenMinTranslations() throws ParseException { [EOL]     verifyFillInExceptions(this.fifteenMinTimeline, FIFTEEN_MIN_EXCEPTIONS, DATE_TIME_FORMAT); [EOL]     fillInBaseTimelineExceptions(this.fifteenMinTimeline, US_HOLIDAYS, DATE_FORMAT); [EOL]     fillInBaseTimelineExclusionsAsExceptions(this.fifteenMinTimeline, this.monday9am.getTime().getTime(), this.monday9am.getTime().getTime() + FIVE_YEARS); [EOL]     verifyTranslations(this.fifteenMinTimeline, this.monday9am.getTime().getTime()); [EOL] } <line_num>: 760,770
public void verifyTranslations(SegmentedTimeline timeline, long startTest) { [EOL]     for (long testCycle = TEST_CYCLE_START; testCycle < TEST_CYCLE_END; testCycle += TEST_CYCLE_INC) { [EOL]         long millisecond = startTest + testCycle * timeline.getSegmentSize(); [EOL]         SegmentedTimeline.Segment segment = timeline.getSegment(millisecond); [EOL]         for (int i = 0; i < 1000; i++) { [EOL]             long translatedValue = timeline.toTimelineValue(segment.getMillisecond()); [EOL]             long newValue = timeline.toMillisecond(translatedValue); [EOL]             if (segment.inExcludeSegments() || segment.inExceptionSegments()) { [EOL]                 SegmentedTimeline.Segment tempSegment = segment.copy(); [EOL]                 tempSegment.moveIndexToStart(); [EOL]                 do { [EOL]                     tempSegment.inc(); [EOL]                 } while (!tempSegment.inIncludeSegments()); [EOL]                 assertEquals(tempSegment.getMillisecond(), newValue); [EOL]             } else { [EOL]                 assertEquals(segment.getMillisecond(), newValue); [EOL]             } [EOL]             segment.inc(); [EOL]         } [EOL]     } [EOL] } <line_num>: 778,811
public void testSerialization() { [EOL]     verifySerialization(this.msTimeline); [EOL]     verifySerialization(this.ms2Timeline); [EOL]     verifySerialization(this.ms2BaseTimeline); [EOL]     verifySerialization(SegmentedTimeline.newMondayThroughFridayTimeline()); [EOL]     verifySerialization(SegmentedTimeline.newFifteenMinuteTimeline()); [EOL] } <line_num>: 820,826
private void verifySerialization(SegmentedTimeline a1) { [EOL]     SegmentedTimeline a2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(a1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         a2 = (SegmentedTimeline) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(a1, a2); [EOL] } <line_num>: 832,850
private long[] verifyFillInExceptions(SegmentedTimeline timeline, String[] exceptionString, Format fmt) throws ParseException { [EOL]     timeline.setExceptionSegments(new java.util.ArrayList()); [EOL]     assertEquals(0, timeline.getExceptionSegments().size()); [EOL]     ArrayList exceptionList = new ArrayList(); [EOL]     for (int i = 0; i < exceptionString.length; i++) { [EOL]         long e; [EOL]         if (fmt instanceof NumberFormat) { [EOL]             e = ((NumberFormat) fmt).parse(exceptionString[i]).longValue(); [EOL]         } else { [EOL]             e = timeline.getTime(((SimpleDateFormat) fmt).parse(exceptionString[i])); [EOL]         } [EOL]         SegmentedTimeline.Segment segment = timeline.getSegment(e); [EOL]         if (segment.inIncludeSegments()) { [EOL]             timeline.addException(e); [EOL]             exceptionList.add(new Long(e)); [EOL]             assertEquals(exceptionList.size(), timeline.getExceptionSegments().size()); [EOL]             assertTrue(segment.inExceptionSegments()); [EOL]         } [EOL]     } [EOL]     long[] exception = new long[exceptionList.size()]; [EOL]     int i = 0; [EOL]     for (Iterator iter = exceptionList.iterator(); iter.hasNext(); ) { [EOL]         Long l = (Long) iter.next(); [EOL]         exception[i++] = l.longValue(); [EOL]     } [EOL]     return (exception); [EOL] } <line_num>: 862,901
private void fillInBaseTimelineExceptions(SegmentedTimeline timeline, String[] exceptionString, Format fmt) throws ParseException { [EOL]     SegmentedTimeline baseTimeline = timeline.getBaseTimeline(); [EOL]     for (int i = 0; i < exceptionString.length; i++) { [EOL]         long e; [EOL]         if (fmt instanceof NumberFormat) { [EOL]             e = ((NumberFormat) fmt).parse(exceptionString[i]).longValue(); [EOL]         } else { [EOL]             e = timeline.getTime(((SimpleDateFormat) fmt).parse(exceptionString[i])); [EOL]         } [EOL]         timeline.addBaseTimelineException(e); [EOL]         SegmentedTimeline.Segment segment1 = baseTimeline.getSegment(e); [EOL]         for (SegmentedTimeline.Segment segment2 = timeline.getSegment(segment1.getSegmentStart()); segment2.getSegmentStart() <= segment1.getSegmentEnd(); segment2.inc()) { [EOL]             if (!segment2.inExcludeSegments()) { [EOL]                 assertTrue(segment2.inExceptionSegments()); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 912,940
private void fillInBaseTimelineExclusionsAsExceptions(SegmentedTimeline timeline, long from, long to) { [EOL]     timeline.addBaseTimelineExclusions(from, to); [EOL]     for (SegmentedTimeline.Segment segment1 = timeline.getBaseTimeline().getSegment(from); segment1.getSegmentStart() <= to; segment1.inc()) { [EOL]         if (segment1.inExcludeSegments()) { [EOL]             for (SegmentedTimeline.Segment segment2 = timeline.getSegment(segment1.getSegmentStart()); segment2.getSegmentStart() <= segment1.getSegmentEnd(); segment2.inc()) { [EOL]                 if (!segment2.inExcludeSegments()) { [EOL]                     assertTrue(segment2.inExceptionSegments()); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 950,976
public void testCloning() { [EOL]     SegmentedTimeline l1 = new SegmentedTimeline(1000, 5, 2); [EOL]     SegmentedTimeline l2 = null; [EOL]     try { [EOL]         l2 = (SegmentedTimeline) l1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(l1 != l2); [EOL]     assertTrue(l1.getClass() == l2.getClass()); [EOL]     assertTrue(l1.equals(l2)); [EOL] } <line_num>: 981,993
public void testEquals() { [EOL]     SegmentedTimeline l1 = new SegmentedTimeline(1000, 5, 2); [EOL]     SegmentedTimeline l2 = new SegmentedTimeline(1000, 5, 2); [EOL]     assertTrue(l1.equals(l2)); [EOL]     l1 = new SegmentedTimeline(1000, 5, 2); [EOL]     l2 = new SegmentedTimeline(1001, 5, 2); [EOL]     assertFalse(l1.equals(l2)); [EOL]     l1 = new SegmentedTimeline(1000, 5, 2); [EOL]     l2 = new SegmentedTimeline(1000, 4, 2); [EOL]     assertFalse(l1.equals(l2)); [EOL]     l1 = new SegmentedTimeline(1000, 5, 2); [EOL]     l2 = new SegmentedTimeline(1000, 5, 1); [EOL]     assertFalse(l1.equals(l2)); [EOL]     l1 = new SegmentedTimeline(1000, 5, 2); [EOL]     l2 = new SegmentedTimeline(1000, 5, 2); [EOL]     l1.setStartTime(1234L); [EOL]     assertFalse(l1.equals(l2)); [EOL]     l2.setStartTime(1234L); [EOL]     assertTrue(l1.equals(l2)); [EOL] } <line_num>: 998,1025
public void testHashCode() { [EOL]     SegmentedTimeline l1 = new SegmentedTimeline(1000, 5, 2); [EOL]     SegmentedTimeline l2 = new SegmentedTimeline(1000, 5, 2); [EOL]     assertTrue(l1.equals(l2)); [EOL]     int h1 = l1.hashCode(); [EOL]     int h2 = l2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 1030,1037
public void testSerialization2() { [EOL]     SegmentedTimeline l1 = new SegmentedTimeline(1000, 5, 2); [EOL]     SegmentedTimeline l2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(l1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         l2 = (SegmentedTimeline) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     boolean b = l1.equals(l2); [EOL]     assertTrue(b); [EOL] } <line_num>: 1042,1064
public void testBasicSegmentedTimeline() { [EOL]     SegmentedTimeline stl = new SegmentedTimeline(10, 2, 3); [EOL]     stl.setStartTime(946684800000L); [EOL]     assertFalse(stl.containsDomainValue(946684799999L)); [EOL]     assertTrue(stl.containsDomainValue(946684800000L)); [EOL]     assertTrue(stl.containsDomainValue(946684800019L)); [EOL]     assertFalse(stl.containsDomainValue(946684800020L)); [EOL]     assertFalse(stl.containsDomainValue(946684800049L)); [EOL]     assertTrue(stl.containsDomainValue(946684800050L)); [EOL]     assertTrue(stl.containsDomainValue(946684800069L)); [EOL]     assertFalse(stl.containsDomainValue(946684800070L)); [EOL]     assertFalse(stl.containsDomainValue(946684800099L)); [EOL]     assertTrue(stl.containsDomainValue(946684800100L)); [EOL]     assertEquals(0, stl.toTimelineValue(946684800000L)); [EOL]     assertEquals(19, stl.toTimelineValue(946684800019L)); [EOL]     assertEquals(20, stl.toTimelineValue(946684800020L)); [EOL]     assertEquals(20, stl.toTimelineValue(946684800049L)); [EOL]     assertEquals(20, stl.toTimelineValue(946684800050L)); [EOL]     assertEquals(39, stl.toTimelineValue(946684800069L)); [EOL]     assertEquals(40, stl.toTimelineValue(946684800070L)); [EOL]     assertEquals(40, stl.toTimelineValue(946684800099L)); [EOL]     assertEquals(40, stl.toTimelineValue(946684800100L)); [EOL]     assertEquals(946684800000L, stl.toMillisecond(0)); [EOL]     assertEquals(946684800019L, stl.toMillisecond(19)); [EOL]     assertEquals(946684800050L, stl.toMillisecond(20)); [EOL]     assertEquals(946684800069L, stl.toMillisecond(39)); [EOL]     assertEquals(946684800100L, stl.toMillisecond(40)); [EOL] } <line_num>: 1073,1103
public void testSegmentedTimelineWithException1() { [EOL]     SegmentedTimeline stl = new SegmentedTimeline(10, 2, 3); [EOL]     stl.setStartTime(946684800000L); [EOL]     stl.addException(946684800050L); [EOL]     assertFalse(stl.containsDomainValue(946684799999L)); [EOL]     assertTrue(stl.containsDomainValue(946684800000L)); [EOL]     assertTrue(stl.containsDomainValue(946684800019L)); [EOL]     assertFalse(stl.containsDomainValue(946684800020L)); [EOL]     assertFalse(stl.containsDomainValue(946684800049L)); [EOL]     assertFalse(stl.containsDomainValue(946684800050L)); [EOL]     assertFalse(stl.containsDomainValue(946684800059L)); [EOL]     assertTrue(stl.containsDomainValue(946684800060L)); [EOL]     assertTrue(stl.containsDomainValue(946684800069L)); [EOL]     assertFalse(stl.containsDomainValue(946684800070L)); [EOL]     assertFalse(stl.containsDomainValue(946684800099L)); [EOL]     assertTrue(stl.containsDomainValue(946684800100L)); [EOL]     assertEquals(0, stl.toTimelineValue(946684800000L)); [EOL]     assertEquals(19, stl.toTimelineValue(946684800019L)); [EOL]     assertEquals(20, stl.toTimelineValue(946684800020L)); [EOL]     assertEquals(20, stl.toTimelineValue(946684800049L)); [EOL]     assertEquals(20, stl.toTimelineValue(946684800050L)); [EOL]     assertEquals(29, stl.toTimelineValue(946684800069L)); [EOL]     assertEquals(30, stl.toTimelineValue(946684800070L)); [EOL]     assertEquals(30, stl.toTimelineValue(946684800099L)); [EOL]     assertEquals(30, stl.toTimelineValue(946684800100L)); [EOL]     assertEquals(946684800000L, stl.toMillisecond(0)); [EOL]     assertEquals(946684800019L, stl.toMillisecond(19)); [EOL]     assertEquals(946684800060L, stl.toMillisecond(20)); [EOL]     assertEquals(946684800069L, stl.toMillisecond(29)); [EOL]     assertEquals(946684800100L, stl.toMillisecond(30)); [EOL] } <line_num>: 1108,1142
public static void main(String[] args) throws Exception { [EOL]     SegmentedTimelineTests test = new SegmentedTimelineTests("Test"); [EOL]     test.setUp(); [EOL]     test.testMondayThoughFridayExceptionSegments(); [EOL]     test.tearDown(); [EOL] } <line_num>: 1155,1160
