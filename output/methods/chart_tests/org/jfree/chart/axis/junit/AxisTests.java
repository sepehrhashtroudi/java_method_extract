public AxisTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 79,81
public static Test suite() { [EOL]     return new TestSuite(AxisTests.class); [EOL] } <line_num>: 70,72
public void testCloning() { [EOL]     CategoryAxis a1 = new CategoryAxis("Test"); [EOL]     a1.setAxisLinePaint(Color.red); [EOL]     CategoryAxis a2 = null; [EOL]     try { [EOL]         a2 = (CategoryAxis) a1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(a1 != a2); [EOL]     assertTrue(a1.getClass() == a2.getClass()); [EOL]     assertTrue(a1.equals(a2)); [EOL] } <line_num>: 86,99
public void testEquals() { [EOL]     Axis a1 = new CategoryAxis("Test"); [EOL]     Axis a2 = new CategoryAxis("Test"); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setVisible(false); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setVisible(false); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setLabel("New Label"); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setLabel("New Label"); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setLabelFont(new Font("Dialog", Font.PLAIN, 8)); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setLabelFont(new Font("Dialog", Font.PLAIN, 8)); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setLabelPaint(new GradientPaint(1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.black)); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setLabelPaint(new GradientPaint(1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.black)); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setLabelInsets(new RectangleInsets(10.0, 10.0, 10.0, 10.0)); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setLabelInsets(new RectangleInsets(10.0, 10.0, 10.0, 10.0)); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setLabelAngle(1.23); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setLabelAngle(1.23); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setLabelToolTip("123"); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setLabelToolTip("123"); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setLabelURL("ABC"); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setLabelURL("ABC"); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setAxisLineVisible(false); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setAxisLineVisible(false); [EOL]     assertTrue(a1.equals(a2)); [EOL]     BasicStroke s = new BasicStroke(1.1f); [EOL]     a1.setAxisLineStroke(s); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setAxisLineStroke(s); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setAxisLinePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.black)); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setAxisLinePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.black)); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setTickLabelsVisible(false); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setTickLabelsVisible(false); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setTickLabelFont(new Font("Dialog", Font.PLAIN, 12)); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setTickLabelFont(new Font("Dialog", Font.PLAIN, 12)); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setTickLabelPaint(new GradientPaint(1.0f, 2.0f, Color.yellow, 3.0f, 4.0f, Color.black)); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setTickLabelPaint(new GradientPaint(1.0f, 2.0f, Color.yellow, 3.0f, 4.0f, Color.black)); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setTickLabelInsets(new RectangleInsets(10.0, 10.0, 10.0, 10.0)); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setTickLabelInsets(new RectangleInsets(10.0, 10.0, 10.0, 10.0)); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setTickMarksVisible(!a1.isTickMarksVisible()); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setTickMarksVisible(a1.isTickMarksVisible()); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setTickMarkInsideLength(1.23f); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setTickMarkInsideLength(1.23f); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setTickMarkOutsideLength(1.23f); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setTickMarkOutsideLength(1.23f); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setTickMarkStroke(new BasicStroke(2.0f)); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setTickMarkStroke(new BasicStroke(2.0f)); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setTickMarkPaint(new GradientPaint(1.0f, 2.0f, Color.cyan, 3.0f, 4.0f, Color.black)); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setTickMarkPaint(new GradientPaint(1.0f, 2.0f, Color.cyan, 3.0f, 4.0f, Color.black)); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setFixedDimension(3.21f); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setFixedDimension(3.21f); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setMinorTickMarksVisible(true); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setMinorTickMarksVisible(true); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setMinorTickMarkInsideLength(1.23f); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setMinorTickMarkInsideLength(1.23f); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setMinorTickMarkOutsideLength(3.21f); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setMinorTickMarkOutsideLength(3.21f); [EOL]     assertTrue(a1.equals(a2)); [EOL] } <line_num>: 104,258
public void testHashCode() { [EOL]     Axis a1 = new CategoryAxis("Test"); [EOL]     Axis a2 = new CategoryAxis("Test"); [EOL]     assertTrue(a1.equals(a2)); [EOL]     int h1 = a1.hashCode(); [EOL]     int h2 = a2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 263,270
