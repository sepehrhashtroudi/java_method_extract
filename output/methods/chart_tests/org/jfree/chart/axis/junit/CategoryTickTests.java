public CategoryTickTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 81,83
public static Test suite() { [EOL]     return new TestSuite(CategoryTickTests.class); [EOL] } <line_num>: 72,74
public void testEquals() { [EOL]     Comparable c1 = "C1"; [EOL]     Comparable c2 = "C2"; [EOL]     TextBlock tb1 = new TextBlock(); [EOL]     tb1.addLine(new TextLine("Block 1")); [EOL]     TextBlock tb2 = new TextBlock(); [EOL]     tb1.addLine(new TextLine("Block 2")); [EOL]     TextBlockAnchor tba1 = TextBlockAnchor.CENTER; [EOL]     TextBlockAnchor tba2 = TextBlockAnchor.BOTTOM_CENTER; [EOL]     TextAnchor ta1 = TextAnchor.CENTER; [EOL]     TextAnchor ta2 = TextAnchor.BASELINE_LEFT; [EOL]     CategoryTick t1 = new CategoryTick(c1, tb1, tba1, ta1, 1.0f); [EOL]     CategoryTick t2 = new CategoryTick(c1, tb1, tba1, ta1, 1.0f); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1 = new CategoryTick(c2, tb1, tba1, ta1, 1.0f); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2 = new CategoryTick(c2, tb1, tba1, ta1, 1.0f); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1 = new CategoryTick(c2, tb2, tba1, ta1, 1.0f); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2 = new CategoryTick(c2, tb2, tba1, ta1, 1.0f); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1 = new CategoryTick(c2, tb2, tba2, ta1, 1.0f); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2 = new CategoryTick(c2, tb2, tba2, ta1, 1.0f); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1 = new CategoryTick(c2, tb2, tba2, ta2, 1.0f); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2 = new CategoryTick(c2, tb2, tba2, ta2, 1.0f); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1 = new CategoryTick(c2, tb2, tba2, ta2, 2.0f); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2 = new CategoryTick(c2, tb2, tba2, ta2, 2.0f); [EOL]     assertTrue(t1.equals(t2)); [EOL] } <line_num>: 88,130
public void testHashCode() { [EOL]     Comparable c1 = "C1"; [EOL]     TextBlock tb1 = new TextBlock(); [EOL]     tb1.addLine(new TextLine("Block 1")); [EOL]     tb1.addLine(new TextLine("Block 2")); [EOL]     TextBlockAnchor tba1 = TextBlockAnchor.CENTER; [EOL]     TextAnchor ta1 = TextAnchor.CENTER; [EOL]     CategoryTick t1 = new CategoryTick(c1, tb1, tba1, ta1, 1.0f); [EOL]     CategoryTick t2 = new CategoryTick(c1, tb1, tba1, ta1, 1.0f); [EOL]     assertTrue(t1.equals(t2)); [EOL]     int h1 = t1.hashCode(); [EOL]     int h2 = t2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 135,149
public void testCloning() { [EOL]     CategoryTick t1 = new CategoryTick("C1", new TextBlock(), TextBlockAnchor.CENTER, TextAnchor.CENTER, 1.5f); [EOL]     CategoryTick t2 = null; [EOL]     try { [EOL]         t2 = (CategoryTick) t1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         System.err.println("Failed to clone."); [EOL]     } [EOL]     assertTrue(t1 != t2); [EOL]     assertTrue(t1.getClass() == t2.getClass()); [EOL]     assertTrue(t1.equals(t2)); [EOL] } <line_num>: 154,169
public void testSerialization() { [EOL]     CategoryTick t1 = new CategoryTick("C1", new TextBlock(), TextBlockAnchor.CENTER, TextAnchor.CENTER, 1.5f); [EOL]     CategoryTick t2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(t1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         t2 = (CategoryTick) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(t1, t2); [EOL] } <line_num>: 174,196
