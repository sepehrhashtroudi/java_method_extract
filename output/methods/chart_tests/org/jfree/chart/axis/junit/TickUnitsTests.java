public TickUnitsTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 76,78
public static Test suite() { [EOL]     return new TestSuite(TickUnitsTests.class); [EOL] } <line_num>: 67,69
public void testSerialization() { [EOL]     TickUnits t1 = (TickUnits) NumberAxis.createIntegerTickUnits(); [EOL]     TickUnits t2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(t1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         t2 = (TickUnits) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(t1, t2); [EOL] } <line_num>: 83,104
public void testCloning() { [EOL]     TickUnits t1 = (TickUnits) NumberAxis.createIntegerTickUnits(); [EOL]     TickUnits t2 = null; [EOL]     try { [EOL]         t2 = (TickUnits) t1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(t1 != t2); [EOL]     assertTrue(t1.getClass() == t2.getClass()); [EOL]     assertTrue(t1.equals(t2)); [EOL] } <line_num>: 109,121
public void testEquals() { [EOL]     TickUnits t1 = (TickUnits) NumberAxis.createIntegerTickUnits(); [EOL]     TickUnits t2 = (TickUnits) NumberAxis.createIntegerTickUnits(); [EOL]     assertTrue(t1.equals(t2)); [EOL]     assertTrue(t2.equals(t1)); [EOL] } <line_num>: 126,131
