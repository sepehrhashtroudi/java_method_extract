public CategoryAxisTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 81,83
public static Test suite() { [EOL]     return new TestSuite(CategoryAxisTests.class); [EOL] } <line_num>: 72,74
public void testEquals() { [EOL]     CategoryAxis a1 = new CategoryAxis("Test"); [EOL]     CategoryAxis a2 = new CategoryAxis("Test"); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setLowerMargin(0.15); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setLowerMargin(0.15); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setUpperMargin(0.15); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setUpperMargin(0.15); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setCategoryMargin(0.15); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setCategoryMargin(0.15); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setMaximumCategoryLabelWidthRatio(0.98f); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setMaximumCategoryLabelWidthRatio(0.98f); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setCategoryLabelPositionOffset(11); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setCategoryLabelPositionOffset(11); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setCategoryLabelPositions(CategoryLabelPositions.DOWN_45); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setCategoryLabelPositions(CategoryLabelPositions.DOWN_45); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.addCategoryLabelToolTip("Test", "Check"); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.addCategoryLabelToolTip("Test", "Check"); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setTickLabelFont("C1", new Font("Dialog", Font.PLAIN, 21)); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setTickLabelFont("C1", new Font("Dialog", Font.PLAIN, 21)); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setTickLabelPaint("C1", Color.red); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setTickLabelPaint("C1", Color.red); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setTickLabelPaint("C1", new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow)); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setTickLabelPaint("C1", new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow)); [EOL]     assertTrue(a1.equals(a2)); [EOL] } <line_num>: 88,156
public void testHashCode() { [EOL]     CategoryAxis a1 = new CategoryAxis("Test"); [EOL]     CategoryAxis a2 = new CategoryAxis("Test"); [EOL]     assertTrue(a1.equals(a2)); [EOL]     int h1 = a1.hashCode(); [EOL]     int h2 = a2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 161,168
public void testCloning() { [EOL]     CategoryAxis a1 = new CategoryAxis("Test"); [EOL]     CategoryAxis a2 = null; [EOL]     try { [EOL]         a2 = (CategoryAxis) a1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         System.err.println("Failed to clone."); [EOL]     } [EOL]     assertTrue(a1 != a2); [EOL]     assertTrue(a1.getClass() == a2.getClass()); [EOL]     assertTrue(a1.equals(a2)); [EOL] } <line_num>: 173,185
public void testCloning2() { [EOL]     CategoryAxis a1 = new CategoryAxis("Test"); [EOL]     a1.setTickLabelFont("C1", new Font("Dialog", Font.PLAIN, 15)); [EOL]     a1.setTickLabelPaint("C1", new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white)); [EOL]     CategoryAxis a2 = null; [EOL]     try { [EOL]         a2 = (CategoryAxis) a1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         System.err.println("Failed to clone."); [EOL]     } [EOL]     assertTrue(a1 != a2); [EOL]     assertTrue(a1.getClass() == a2.getClass()); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setTickLabelFont("C1", null); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setTickLabelFont("C1", null); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setTickLabelPaint("C1", Color.yellow); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setTickLabelPaint("C1", Color.yellow); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.addCategoryLabelToolTip("C1", "XYZ"); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.addCategoryLabelToolTip("C1", "XYZ"); [EOL]     assertTrue(a1.equals(a2)); [EOL] } <line_num>: 191,224
public void testSerialization() { [EOL]     CategoryAxis a1 = new CategoryAxis("Test Axis"); [EOL]     a1.setTickLabelPaint("C1", new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white)); [EOL]     CategoryAxis a2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(a1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         a2 = (CategoryAxis) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(a1, a2); [EOL] } <line_num>: 229,251
