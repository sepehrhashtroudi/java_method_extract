public SymbolAxisTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 77,79
public static Test suite() { [EOL]     return new TestSuite(SymbolAxisTests.class); [EOL] } <line_num>: 68,70
public void testSerialization() { [EOL]     String[] tickLabels = new String[] { "One", "Two", "Three" }; [EOL]     SymbolAxis a1 = new SymbolAxis("Test Axis", tickLabels); [EOL]     SymbolAxis a2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(a1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         a2 = (SymbolAxis) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(a1, a2); [EOL] } <line_num>: 84,106
public void testCloning() { [EOL]     SymbolAxis a1 = new SymbolAxis("Axis", new String[] { "A", "B" }); [EOL]     SymbolAxis a2 = null; [EOL]     try { [EOL]         a2 = (SymbolAxis) a1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(a1 != a2); [EOL]     assertTrue(a1.getClass() == a2.getClass()); [EOL]     assertTrue(a1.equals(a2)); [EOL] } <line_num>: 111,123
public void testEquals() { [EOL]     SymbolAxis a1 = new SymbolAxis("Axis", new String[] { "A", "B" }); [EOL]     SymbolAxis a2 = new SymbolAxis("Axis", new String[] { "A", "B" }); [EOL]     assertTrue(a1.equals(a2)); [EOL]     assertTrue(a2.equals(a1)); [EOL]     a1 = new SymbolAxis("Axis 2", new String[] { "A", "B" }); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2 = new SymbolAxis("Axis 2", new String[] { "A", "B" }); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1 = new SymbolAxis("Axis 2", new String[] { "C", "B" }); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2 = new SymbolAxis("Axis 2", new String[] { "C", "B" }); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setGridBandsVisible(false); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setGridBandsVisible(false); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setGridBandPaint(Color.black); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setGridBandPaint(Color.black); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setGridBandAlternatePaint(Color.red); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setGridBandAlternatePaint(Color.red); [EOL]     assertTrue(a1.equals(a2)); [EOL] } <line_num>: 128,158
