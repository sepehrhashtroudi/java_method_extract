public CyclicNumberAxisTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 82,84
public static Test suite() { [EOL]     return new TestSuite(CyclicNumberAxisTests.class); [EOL] } <line_num>: 73,75
public void testCloning() { [EOL]     CyclicNumberAxis a1 = new CyclicNumberAxis(10, 0, "Test"); [EOL]     CyclicNumberAxis a2 = null; [EOL]     try { [EOL]         a2 = (CyclicNumberAxis) a1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         System.err.println("Failed to clone."); [EOL]     } [EOL]     assertTrue(a1 != a2); [EOL]     assertTrue(a1.getClass() == a2.getClass()); [EOL]     assertTrue(a1.equals(a2)); [EOL] } <line_num>: 89,101
public void testEquals() { [EOL]     CyclicNumberAxis a1 = new CyclicNumberAxis(10, 0, "Test"); [EOL]     CyclicNumberAxis a2 = new CyclicNumberAxis(10, 0, "Test"); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setPeriod(5); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setPeriod(5); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setOffset(2.0); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setOffset(2.0); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setAdvanceLinePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.black)); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setAdvanceLinePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.black)); [EOL]     assertTrue(a1.equals(a2)); [EOL]     Stroke stroke = new BasicStroke(0.2f); [EOL]     a1.setAdvanceLineStroke(stroke); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setAdvanceLineStroke(stroke); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setAdvanceLineVisible(!a1.isAdvanceLineVisible()); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setAdvanceLineVisible(a1.isAdvanceLineVisible()); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setBoundMappedToLastCycle(!a1.isBoundMappedToLastCycle()); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setBoundMappedToLastCycle(a1.isBoundMappedToLastCycle()); [EOL]     assertTrue(a1.equals(a2)); [EOL] } <line_num>: 106,151
public void testHashCode() { [EOL]     CyclicNumberAxis a1 = new CyclicNumberAxis(10, 0, "Test"); [EOL]     CyclicNumberAxis a2 = new CyclicNumberAxis(10, 0, "Test"); [EOL]     assertTrue(a1.equals(a2)); [EOL]     int h1 = a1.hashCode(); [EOL]     int h2 = a2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 156,163
public void testSerialization() { [EOL]     CyclicNumberAxis a1 = new CyclicNumberAxis(10, 0, "Test Axis"); [EOL]     CyclicNumberAxis a2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(a1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         a2 = (CyclicNumberAxis) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(a1, a2); [EOL] } <line_num>: 168,189
