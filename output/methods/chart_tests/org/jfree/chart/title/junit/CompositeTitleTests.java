public CompositeTitleTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 84,86
public static Test suite() { [EOL]     return new TestSuite(CompositeTitleTests.class); [EOL] } <line_num>: 75,77
public void testConstructor() { [EOL]     CompositeTitle t = new CompositeTitle(); [EOL]     assertNull(t.getBackgroundPaint()); [EOL] } <line_num>: 91,94
public void testEquals() { [EOL]     CompositeTitle t1 = new CompositeTitle(new BlockContainer()); [EOL]     CompositeTitle t2 = new CompositeTitle(new BlockContainer()); [EOL]     assertEquals(t1, t2); [EOL]     assertEquals(t2, t1); [EOL]     t1.setMargin(new RectangleInsets(1.0, 2.0, 3.0, 4.0)); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setMargin(new RectangleInsets(1.0, 2.0, 3.0, 4.0)); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setFrame(new BlockBorder(Color.red)); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setFrame(new BlockBorder(Color.red)); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setPadding(new RectangleInsets(1.0, 2.0, 3.0, 4.0)); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setPadding(new RectangleInsets(1.0, 2.0, 3.0, 4.0)); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.getContainer().add(new TextTitle("T1")); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.getContainer().add(new TextTitle("T1")); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow)); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow)); [EOL]     assertTrue(t1.equals(t2)); [EOL] } <line_num>: 99,136
public void testHashcode() { [EOL]     CompositeTitle t1 = new CompositeTitle(new BlockContainer()); [EOL]     t1.getContainer().add(new TextTitle("T1")); [EOL]     CompositeTitle t2 = new CompositeTitle(new BlockContainer()); [EOL]     t2.getContainer().add(new TextTitle("T1")); [EOL]     assertTrue(t1.equals(t2)); [EOL]     int h1 = t1.hashCode(); [EOL]     int h2 = t2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 141,150
public void testCloning() { [EOL]     CompositeTitle t1 = new CompositeTitle(new BlockContainer()); [EOL]     t1.getContainer().add(new TextTitle("T1")); [EOL]     t1.setBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow)); [EOL]     CompositeTitle t2 = null; [EOL]     try { [EOL]         t2 = (CompositeTitle) t1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         fail(e.toString()); [EOL]     } [EOL]     assertTrue(t1 != t2); [EOL]     assertTrue(t1.getClass() == t2.getClass()); [EOL]     assertTrue(t1.equals(t2)); [EOL] } <line_num>: 155,170
public void testSerialization() { [EOL]     CompositeTitle t1 = new CompositeTitle(new BlockContainer()); [EOL]     t1.getContainer().add(new TextTitle("T1")); [EOL]     t1.setBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     CompositeTitle t2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(t1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         t2 = (CompositeTitle) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(t1, t2); [EOL] } <line_num>: 175,196
