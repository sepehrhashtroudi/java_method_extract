public PaintScaleLegendTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 83,85
public static Test suite() { [EOL]     return new TestSuite(PaintScaleLegendTests.class); [EOL] } <line_num>: 74,76
public void testEquals() { [EOL]     PaintScaleLegend l1 = new PaintScaleLegend(new GrayPaintScale(), new NumberAxis("X")); [EOL]     PaintScaleLegend l2 = new PaintScaleLegend(new GrayPaintScale(), new NumberAxis("X")); [EOL]     assertTrue(l1.equals(l2)); [EOL]     assertTrue(l2.equals(l1)); [EOL]     l1.setScale(new LookupPaintScale()); [EOL]     assertFalse(l1.equals(l2)); [EOL]     l2.setScale(new LookupPaintScale()); [EOL]     assertTrue(l1.equals(l2)); [EOL]     l1.setAxis(new NumberAxis("Axis 2")); [EOL]     assertFalse(l1.equals(l2)); [EOL]     l2.setAxis(new NumberAxis("Axis 2")); [EOL]     assertTrue(l1.equals(l2)); [EOL]     l1.setAxisLocation(AxisLocation.BOTTOM_OR_RIGHT); [EOL]     assertFalse(l1.equals(l2)); [EOL]     l2.setAxisLocation(AxisLocation.BOTTOM_OR_RIGHT); [EOL]     assertTrue(l1.equals(l2)); [EOL]     l1.setAxisOffset(99.0); [EOL]     assertFalse(l1.equals(l2)); [EOL]     l2.setAxisOffset(99.0); [EOL]     assertTrue(l1.equals(l2)); [EOL]     l1.setStripWidth(99.0); [EOL]     assertFalse(l1.equals(l2)); [EOL]     l2.setStripWidth(99.0); [EOL]     assertTrue(l1.equals(l2)); [EOL]     l1.setStripOutlineVisible(!l1.isStripOutlineVisible()); [EOL]     assertFalse(l1.equals(l2)); [EOL]     l2.setStripOutlineVisible(l1.isStripOutlineVisible()); [EOL]     assertTrue(l1.equals(l2)); [EOL]     l1.setStripOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     assertFalse(l1.equals(l2)); [EOL]     l2.setStripOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     assertTrue(l1.equals(l2)); [EOL]     l1.setStripOutlineStroke(new BasicStroke(1.1f)); [EOL]     assertFalse(l1.equals(l2)); [EOL]     l2.setStripOutlineStroke(new BasicStroke(1.1f)); [EOL]     assertTrue(l1.equals(l2)); [EOL]     l1.setBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     assertFalse(l1.equals(l2)); [EOL]     l2.setBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     assertTrue(l1.equals(l2)); [EOL]     l1.setSubdivisionCount(99); [EOL]     assertFalse(l1.equals(l2)); [EOL]     l2.setSubdivisionCount(99); [EOL]     assertTrue(l1.equals(l2)); [EOL] } <line_num>: 90,163
public void testHashcode() { [EOL]     PaintScaleLegend l1 = new PaintScaleLegend(new GrayPaintScale(), new NumberAxis("X")); [EOL]     PaintScaleLegend l2 = new PaintScaleLegend(new GrayPaintScale(), new NumberAxis("X")); [EOL]     assertTrue(l1.equals(l2)); [EOL]     int h1 = l1.hashCode(); [EOL]     int h2 = l2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 168,177
public void testCloning() { [EOL]     PaintScaleLegend l1 = new PaintScaleLegend(new GrayPaintScale(), new NumberAxis("X")); [EOL]     PaintScaleLegend l2 = null; [EOL]     try { [EOL]         l2 = (PaintScaleLegend) l1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(l1 != l2); [EOL]     assertTrue(l1.getClass() == l2.getClass()); [EOL]     assertTrue(l1.equals(l2)); [EOL] } <line_num>: 182,195
public void testSerialization() { [EOL]     PaintScaleLegend l1 = new PaintScaleLegend(new GrayPaintScale(), new NumberAxis("X")); [EOL]     PaintScaleLegend l2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(l1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         l2 = (PaintScaleLegend) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(l1, l2); [EOL] } <line_num>: 200,219
