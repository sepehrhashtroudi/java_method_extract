public LegendGraphicTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 85,87
public static Test suite() { [EOL]     return new TestSuite(LegendGraphicTests.class); [EOL] } <line_num>: 76,78
public void testEquals() { [EOL]     LegendGraphic g1 = new LegendGraphic(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), Color.black); [EOL]     LegendGraphic g2 = new LegendGraphic(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), Color.black); [EOL]     assertEquals(g1, g2); [EOL]     assertEquals(g2, g1); [EOL]     g1.setShapeVisible(!g1.isShapeVisible()); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2.setShapeVisible(!g2.isShapeVisible()); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1.setShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0)); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2.setShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0)); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1.setShapeFilled(!g1.isShapeFilled()); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2.setShapeFilled(!g2.isShapeFilled()); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1.setFillPaint(Color.green); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2.setFillPaint(Color.green); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1.setShapeOutlineVisible(!g1.isShapeOutlineVisible()); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2.setShapeOutlineVisible(!g2.isShapeOutlineVisible()); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1.setOutlinePaint(Color.green); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2.setOutlinePaint(Color.green); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1.setOutlineStroke(new BasicStroke(1.23f)); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2.setOutlineStroke(new BasicStroke(1.23f)); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1.setShapeAnchor(RectangleAnchor.BOTTOM_RIGHT); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2.setShapeAnchor(RectangleAnchor.BOTTOM_RIGHT); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1.setShapeLocation(RectangleAnchor.BOTTOM_RIGHT); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2.setShapeLocation(RectangleAnchor.BOTTOM_RIGHT); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1.setLineVisible(!g1.isLineVisible()); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2.setLineVisible(!g2.isLineVisible()); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1.setLine(new Line2D.Double(1.0, 2.0, 3.0, 4.0)); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2.setLine(new Line2D.Double(1.0, 2.0, 3.0, 4.0)); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1.setLinePaint(Color.green); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2.setLinePaint(Color.green); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1.setLineStroke(new BasicStroke(1.23f)); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2.setLineStroke(new BasicStroke(1.23f)); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1.setFillPaintTransformer(new StandardGradientPaintTransformer(GradientPaintTransformType.CENTER_HORIZONTAL)); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2.setFillPaintTransformer(new StandardGradientPaintTransformer(GradientPaintTransformType.CENTER_HORIZONTAL)); [EOL]     assertTrue(g1.equals(g2)); [EOL] } <line_num>: 92,186
public void testHashcode() { [EOL]     LegendGraphic g1 = new LegendGraphic(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), Color.black); [EOL]     LegendGraphic g2 = new LegendGraphic(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), Color.black); [EOL]     assertTrue(g1.equals(g2)); [EOL]     int h1 = g1.hashCode(); [EOL]     int h2 = g2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 191,200
public void testCloning() { [EOL]     Rectangle r = new Rectangle(1, 2, 3, 4); [EOL]     LegendGraphic g1 = new LegendGraphic(r, Color.black); [EOL]     LegendGraphic g2 = null; [EOL]     try { [EOL]         g2 = (LegendGraphic) g1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(g1 != g2); [EOL]     assertTrue(g1.getClass() == g2.getClass()); [EOL]     assertTrue(g1.equals(g2)); [EOL]     r.setBounds(4, 3, 2, 1); [EOL]     assertFalse(g1.equals(g2)); [EOL] } <line_num>: 205,222
public void testCloning2() { [EOL]     Rectangle r = new Rectangle(1, 2, 3, 4); [EOL]     LegendGraphic g1 = new LegendGraphic(r, Color.black); [EOL]     Line2D l = new Line2D.Double(1.0, 2.0, 3.0, 4.0); [EOL]     g1.setLine(l); [EOL]     LegendGraphic g2 = null; [EOL]     try { [EOL]         g2 = (LegendGraphic) g1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(g1 != g2); [EOL]     assertTrue(g1.getClass() == g2.getClass()); [EOL]     assertTrue(g1.equals(g2)); [EOL]     l.setLine(4.0, 3.0, 2.0, 1.0); [EOL]     assertFalse(g1.equals(g2)); [EOL] } <line_num>: 227,247
public void testSerialization() { [EOL]     Stroke s = new BasicStroke(1.23f); [EOL]     LegendGraphic g1 = new LegendGraphic(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), Color.black); [EOL]     g1.setOutlineStroke(s); [EOL]     LegendGraphic g2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(g1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         g2 = (LegendGraphic) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         System.out.println(e.toString()); [EOL]     } [EOL]     assertTrue(g1.equals(g2)); [EOL] } <line_num>: 252,275
