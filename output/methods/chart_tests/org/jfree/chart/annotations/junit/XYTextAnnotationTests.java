public XYTextAnnotationTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 86,88
public static Test suite() { [EOL]     return new TestSuite(XYTextAnnotationTests.class); [EOL] } <line_num>: 77,79
public void testEquals() { [EOL]     XYTextAnnotation a1 = new XYTextAnnotation("Text", 10.0, 20.0); [EOL]     XYTextAnnotation a2 = new XYTextAnnotation("Text", 10.0, 20.0); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1 = new XYTextAnnotation("ABC", 10.0, 20.0); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2 = new XYTextAnnotation("ABC", 10.0, 20.0); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1 = new XYTextAnnotation("ABC", 11.0, 20.0); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2 = new XYTextAnnotation("ABC", 11.0, 20.0); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1 = new XYTextAnnotation("ABC", 11.0, 22.0); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2 = new XYTextAnnotation("ABC", 11.0, 22.0); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setFont(new Font("Serif", Font.PLAIN, 23)); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setFont(new Font("Serif", Font.PLAIN, 23)); [EOL]     assertTrue(a1.equals(a2)); [EOL]     GradientPaint gp1 = new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow); [EOL]     GradientPaint gp2 = new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow); [EOL]     a1.setPaint(gp1); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setPaint(gp2); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setRotationAnchor(TextAnchor.BASELINE_RIGHT); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setRotationAnchor(TextAnchor.BASELINE_RIGHT); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setRotationAngle(12.3); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setRotationAngle(12.3); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setTextAnchor(TextAnchor.BASELINE_RIGHT); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setTextAnchor(TextAnchor.BASELINE_RIGHT); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setBackgroundPaint(gp1); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setBackgroundPaint(gp1); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setOutlinePaint(gp1); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setOutlinePaint(gp1); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setOutlineStroke(new BasicStroke(1.2f)); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setOutlineStroke(new BasicStroke(1.2f)); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setOutlineVisible(!a1.isOutlineVisible()); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setOutlineVisible(a1.isOutlineVisible()); [EOL]     assertTrue(a1.equals(a2)); [EOL] } <line_num>: 93,170
public void testHashCode() { [EOL]     XYTextAnnotation a1 = new XYTextAnnotation("Text", 10.0, 20.0); [EOL]     XYTextAnnotation a2 = new XYTextAnnotation("Text", 10.0, 20.0); [EOL]     assertTrue(a1.equals(a2)); [EOL]     int h1 = a1.hashCode(); [EOL]     int h2 = a2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 175,182
public void testCloning() { [EOL]     XYTextAnnotation a1 = new XYTextAnnotation("Text", 10.0, 20.0); [EOL]     XYTextAnnotation a2 = null; [EOL]     try { [EOL]         a2 = (XYTextAnnotation) a1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(a1 != a2); [EOL]     assertTrue(a1.getClass() == a2.getClass()); [EOL]     assertTrue(a1.equals(a2)); [EOL] } <line_num>: 187,199
public void testPublicCloneable() { [EOL]     XYTextAnnotation a1 = new XYTextAnnotation("Text", 10.0, 20.0); [EOL]     assertTrue(a1 instanceof PublicCloneable); [EOL] } <line_num>: 204,207
public void testSerialization() { [EOL]     XYTextAnnotation a1 = new XYTextAnnotation("Text", 10.0, 20.0); [EOL]     a1.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     XYTextAnnotation a2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(a1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         a2 = (XYTextAnnotation) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(a1, a2); [EOL] } <line_num>: 212,233
