public XYPointerAnnotationTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 83,85
public static Test suite() { [EOL]     return new TestSuite(XYPointerAnnotationTests.class); [EOL] } <line_num>: 74,76
public void testEquals() { [EOL]     XYPointerAnnotation a1 = new XYPointerAnnotation("Label", 10.0, 20.0, Math.PI); [EOL]     XYPointerAnnotation a2 = new XYPointerAnnotation("Label", 10.0, 20.0, Math.PI); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1 = new XYPointerAnnotation("Label2", 10.0, 20.0, Math.PI); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2 = new XYPointerAnnotation("Label2", 10.0, 20.0, Math.PI); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setX(11.0); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setX(11.0); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setY(22.0); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setY(22.0); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setAngle(Math.PI / 4.0); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setAngle(Math.PI / 4.0); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setTipRadius(20.0); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setTipRadius(20.0); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setBaseRadius(5.0); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setBaseRadius(5.0); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setArrowLength(33.0); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setArrowLength(33.0); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setArrowWidth(9.0); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setArrowWidth(9.0); [EOL]     assertTrue(a1.equals(a2)); [EOL]     Stroke stroke = new BasicStroke(1.5f); [EOL]     a1.setArrowStroke(stroke); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setArrowStroke(stroke); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setArrowPaint(Color.blue); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setArrowPaint(Color.blue); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1.setLabelOffset(10.0); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2.setLabelOffset(10.0); [EOL]     assertTrue(a1.equals(a2)); [EOL] } <line_num>: 90,162
public void testHashCode() { [EOL]     XYPointerAnnotation a1 = new XYPointerAnnotation("Label", 10.0, 20.0, Math.PI); [EOL]     XYPointerAnnotation a2 = new XYPointerAnnotation("Label", 10.0, 20.0, Math.PI); [EOL]     assertTrue(a1.equals(a2)); [EOL]     int h1 = a1.hashCode(); [EOL]     int h2 = a2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 167,176
public void testCloning() { [EOL]     XYPointerAnnotation a1 = new XYPointerAnnotation("Label", 10.0, 20.0, Math.PI); [EOL]     XYPointerAnnotation a2 = null; [EOL]     try { [EOL]         a2 = (XYPointerAnnotation) a1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         System.err.println("Failed to clone."); [EOL]     } [EOL]     assertTrue(a1 != a2); [EOL]     assertTrue(a1.getClass() == a2.getClass()); [EOL]     assertTrue(a1.equals(a2)); [EOL] } <line_num>: 181,194
public void testPublicCloneable() { [EOL]     XYPointerAnnotation a1 = new XYPointerAnnotation("Label", 10.0, 20.0, Math.PI); [EOL]     assertTrue(a1 instanceof PublicCloneable); [EOL] } <line_num>: 199,203
public void testSerialization() { [EOL]     XYPointerAnnotation a1 = new XYPointerAnnotation("Label", 10.0, 20.0, Math.PI); [EOL]     XYPointerAnnotation a2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(a1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         a2 = (XYPointerAnnotation) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(a1, a2); [EOL] } <line_num>: 208,230
