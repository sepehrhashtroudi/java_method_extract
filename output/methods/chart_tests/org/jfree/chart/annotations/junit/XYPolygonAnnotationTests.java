public XYPolygonAnnotationTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 81,83
public static Test suite() { [EOL]     return new TestSuite(XYPolygonAnnotationTests.class); [EOL] } <line_num>: 72,74
public void testEquals() { [EOL]     Stroke stroke1 = new BasicStroke(2.0f); [EOL]     Stroke stroke2 = new BasicStroke(2.5f); [EOL]     XYPolygonAnnotation a1 = new XYPolygonAnnotation(new double[] { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 }, stroke1, Color.red, Color.blue); [EOL]     XYPolygonAnnotation a2 = new XYPolygonAnnotation(new double[] { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 }, stroke1, Color.red, Color.blue); [EOL]     assertTrue(a1.equals(a2)); [EOL]     assertTrue(a2.equals(a1)); [EOL]     a1 = new XYPolygonAnnotation(new double[] { 99.0, 2.0, 3.0, 4.0, 5.0, 6.0 }, stroke1, Color.red, Color.blue); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2 = new XYPolygonAnnotation(new double[] { 99.0, 2.0, 3.0, 4.0, 5.0, 6.0 }, stroke1, Color.red, Color.blue); [EOL]     assertTrue(a1.equals(a2)); [EOL]     a1 = new XYPolygonAnnotation(new double[] { 99.0, 2.0, 3.0, 4.0, 5.0, 6.0 }, stroke2, Color.red, Color.blue); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2 = new XYPolygonAnnotation(new double[] { 99.0, 2.0, 3.0, 4.0, 5.0, 6.0 }, stroke2, Color.red, Color.blue); [EOL]     assertTrue(a1.equals(a2)); [EOL]     GradientPaint gp1 = new GradientPaint(1.0f, 2.0f, Color.yellow, 3.0f, 4.0f, Color.white); [EOL]     GradientPaint gp2 = new GradientPaint(1.0f, 2.0f, Color.yellow, 3.0f, 4.0f, Color.white); [EOL]     a1 = new XYPolygonAnnotation(new double[] { 99.0, 2.0, 3.0, 4.0, 5.0, 6.0 }, stroke2, gp1, Color.blue); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2 = new XYPolygonAnnotation(new double[] { 99.0, 2.0, 3.0, 4.0, 5.0, 6.0 }, stroke2, gp2, Color.blue); [EOL]     assertTrue(a1.equals(a2)); [EOL]     GradientPaint gp3 = new GradientPaint(1.0f, 2.0f, Color.green, 3.0f, 4.0f, Color.white); [EOL]     GradientPaint gp4 = new GradientPaint(1.0f, 2.0f, Color.green, 3.0f, 4.0f, Color.white); [EOL]     a1 = new XYPolygonAnnotation(new double[] { 99.0, 2.0, 3.0, 4.0, 5.0, 6.0 }, stroke2, gp1, gp3); [EOL]     assertFalse(a1.equals(a2)); [EOL]     a2 = new XYPolygonAnnotation(new double[] { 99.0, 2.0, 3.0, 4.0, 5.0, 6.0 }, stroke2, gp2, gp4); [EOL]     assertTrue(a1.equals(a2)); [EOL] } <line_num>: 88,133
public void testHashCode() { [EOL]     Stroke stroke = new BasicStroke(2.0f); [EOL]     XYPolygonAnnotation a1 = new XYPolygonAnnotation(new double[] { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 }, stroke, Color.red, Color.blue); [EOL]     XYPolygonAnnotation a2 = new XYPolygonAnnotation(new double[] { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 }, stroke, Color.red, Color.blue); [EOL]     assertTrue(a1.equals(a2)); [EOL]     int h1 = a1.hashCode(); [EOL]     int h2 = a2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 138,148
public void testCloning() { [EOL]     Stroke stroke1 = new BasicStroke(2.0f); [EOL]     XYPolygonAnnotation a1 = new XYPolygonAnnotation(new double[] { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 }, stroke1, Color.red, Color.blue); [EOL]     XYPolygonAnnotation a2 = null; [EOL]     try { [EOL]         a2 = (XYPolygonAnnotation) a1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(a1 != a2); [EOL]     assertTrue(a1.getClass() == a2.getClass()); [EOL]     assertTrue(a1.equals(a2)); [EOL] } <line_num>: 153,167
public void testPublicCloneable() { [EOL]     Stroke stroke1 = new BasicStroke(2.0f); [EOL]     XYPolygonAnnotation a1 = new XYPolygonAnnotation(new double[] { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 }, stroke1, Color.red, Color.blue); [EOL]     assertTrue(a1 instanceof PublicCloneable); [EOL] } <line_num>: 172,177
public void testSerialization() { [EOL]     Stroke stroke1 = new BasicStroke(2.0f); [EOL]     XYPolygonAnnotation a1 = new XYPolygonAnnotation(new double[] { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 }, stroke1, Color.red, Color.blue); [EOL]     XYPolygonAnnotation a2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(a1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         a2 = (XYPolygonAnnotation) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(a1, a2); [EOL] } <line_num>: 182,206
