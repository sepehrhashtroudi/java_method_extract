public TimeSeriesURLGeneratorTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 79,81
public static Test suite() { [EOL]     return new TestSuite(TimeSeriesURLGeneratorTests.class); [EOL] } <line_num>: 70,72
public void testGenerateURL() { [EOL]     TimeSeriesURLGenerator g = new TimeSeriesURLGenerator(); [EOL]     DefaultXYDataset dataset = new DefaultXYDataset(); [EOL]     dataset.addSeries("Series '1'", new double[][] { { 1.0, 2.0 }, { 3.0, 4.0 } }); [EOL]     String s = g.generateURL(dataset, 0, 0); [EOL]     assertTrue(s.startsWith("index.html?series=Series+%271%27&amp;item=")); [EOL] } <line_num>: 86,93
public void testEquals() { [EOL]     TimeSeriesURLGenerator g1 = new TimeSeriesURLGenerator(); [EOL]     TimeSeriesURLGenerator g2 = new TimeSeriesURLGenerator(); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1 = new TimeSeriesURLGenerator(new SimpleDateFormat("yyyy"), "prefix", "series", "item"); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2 = new TimeSeriesURLGenerator(new SimpleDateFormat("yyyy"), "prefix", "series", "item"); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1 = new TimeSeriesURLGenerator(new SimpleDateFormat("yy"), "prefix", "series", "item"); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2 = new TimeSeriesURLGenerator(new SimpleDateFormat("yy"), "prefix", "series", "item"); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1 = new TimeSeriesURLGenerator(new SimpleDateFormat("yy"), "prefix1", "series", "item"); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2 = new TimeSeriesURLGenerator(new SimpleDateFormat("yy"), "prefix1", "series", "item"); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1 = new TimeSeriesURLGenerator(new SimpleDateFormat("yy"), "prefix1", "series1", "item"); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2 = new TimeSeriesURLGenerator(new SimpleDateFormat("yy"), "prefix1", "series1", "item"); [EOL]     assertTrue(g1.equals(g2)); [EOL]     g1 = new TimeSeriesURLGenerator(new SimpleDateFormat("yy"), "prefix1", "series1", "item1"); [EOL]     assertFalse(g1.equals(g2)); [EOL]     g2 = new TimeSeriesURLGenerator(new SimpleDateFormat("yy"), "prefix1", "series1", "item1"); [EOL]     assertTrue(g1.equals(g2)); [EOL] } <line_num>: 98,137
public void testSerialization() { [EOL]     TimeSeriesURLGenerator g1 = new TimeSeriesURLGenerator(); [EOL]     TimeSeriesURLGenerator g2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(g1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         g2 = (TimeSeriesURLGenerator) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(g1, g2); [EOL] } <line_num>: 142,163
public void testPublicCloneable() { [EOL]     TimeSeriesURLGenerator g1 = new TimeSeriesURLGenerator(); [EOL]     assertFalse(g1 instanceof PublicCloneable); [EOL] } <line_num>: 169,172
