public GanttChartTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 93,95
public static Test suite() { [EOL]     return new TestSuite(GanttChartTests.class); [EOL] } <line_num>: 84,86
protected void setUp() { [EOL]     this.chart = createGanttChart(); [EOL] } <line_num>: 100,102
public void testDrawWithNullInfo() { [EOL]     boolean success = false; [EOL]     try { [EOL]         BufferedImage image = new BufferedImage(200, 100, BufferedImage.TYPE_INT_RGB); [EOL]         Graphics2D g2 = image.createGraphics(); [EOL]         this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null); [EOL]         g2.dispose(); [EOL]         success = true; [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]         success = false; [EOL]     } [EOL]     assertTrue(success); [EOL] } <line_num>: 108,124
public void testDrawWithNullInfo2() { [EOL]     boolean success = false; [EOL]     try { [EOL]         JFreeChart chart = createGanttChart(); [EOL]         CategoryPlot plot = (CategoryPlot) chart.getPlot(); [EOL]         plot.setDataset(createDataset()); [EOL]         chart.createBufferedImage(300, 200, null); [EOL]         success = true; [EOL]     } catch (NullPointerException e) { [EOL]         success = false; [EOL]     } [EOL]     assertTrue(success); [EOL] } <line_num>: 130,143
public void testReplaceDataset() { [EOL]     LocalListener l = new LocalListener(); [EOL]     this.chart.addChangeListener(l); [EOL]     CategoryPlot plot = (CategoryPlot) this.chart.getPlot(); [EOL]     plot.setDataset(null); [EOL]     assertEquals(true, l.flag); [EOL] } <line_num>: 148,154
public void testSetSeriesToolTipGenerator() { [EOL]     CategoryPlot plot = (CategoryPlot) this.chart.getPlot(); [EOL]     CategoryItemRenderer renderer = plot.getRenderer(); [EOL]     StandardCategoryToolTipGenerator tt = new StandardCategoryToolTipGenerator(); [EOL]     renderer.setSeriesToolTipGenerator(0, tt); [EOL]     CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0, false); [EOL]     assertTrue(tt2 == tt); [EOL] } <line_num>: 160,169
public void testSetSeriesURLGenerator() { [EOL]     CategoryPlot plot = (CategoryPlot) this.chart.getPlot(); [EOL]     CategoryItemRenderer renderer = plot.getRenderer(); [EOL]     StandardCategoryURLGenerator url1 = new StandardCategoryURLGenerator(); [EOL]     renderer.setSeriesURLGenerator(0, url1); [EOL]     CategoryURLGenerator url2 = renderer.getURLGenerator(0, 0, false); [EOL]     assertTrue(url2 == url1); [EOL] } <line_num>: 175,183
private static JFreeChart createGanttChart() { [EOL]     return ChartFactory.createGanttChart("Gantt Chart", "Domain", "Range", null, true); [EOL] } <line_num>: 190,193
public static IntervalCategoryDataset createDataset() { [EOL]     TaskSeries s1 = new TaskSeries("Scheduled"); [EOL]     s1.add(new Task("Write Proposal", new SimpleTimePeriod(date(1, Calendar.APRIL, 2001), date(5, Calendar.APRIL, 2001)))); [EOL]     s1.add(new Task("Obtain Approval", new SimpleTimePeriod(date(9, Calendar.APRIL, 2001), date(9, Calendar.APRIL, 2001)))); [EOL]     s1.add(new Task("Requirements Analysis", new SimpleTimePeriod(date(10, Calendar.APRIL, 2001), date(5, Calendar.MAY, 2001)))); [EOL]     s1.add(new Task("Design Phase", new SimpleTimePeriod(date(6, Calendar.MAY, 2001), date(30, Calendar.MAY, 2001)))); [EOL]     s1.add(new Task("Design Signoff", new SimpleTimePeriod(date(2, Calendar.JUNE, 2001), date(2, Calendar.JUNE, 2001)))); [EOL]     s1.add(new Task("Alpha Implementation", new SimpleTimePeriod(date(3, Calendar.JUNE, 2001), date(31, Calendar.JULY, 2001)))); [EOL]     s1.add(new Task("Design Review", new SimpleTimePeriod(date(1, Calendar.AUGUST, 2001), date(8, Calendar.AUGUST, 2001)))); [EOL]     s1.add(new Task("Revised Design Signoff", new SimpleTimePeriod(date(10, Calendar.AUGUST, 2001), date(10, Calendar.AUGUST, 2001)))); [EOL]     s1.add(new Task("Beta Implementation", new SimpleTimePeriod(date(12, Calendar.AUGUST, 2001), date(12, Calendar.SEPTEMBER, 2001)))); [EOL]     s1.add(new Task("Testing", new SimpleTimePeriod(date(13, Calendar.SEPTEMBER, 2001), date(31, Calendar.OCTOBER, 2001)))); [EOL]     s1.add(new Task("Final Implementation", new SimpleTimePeriod(date(1, Calendar.NOVEMBER, 2001), date(15, Calendar.NOVEMBER, 2001)))); [EOL]     s1.add(new Task("Signoff", new SimpleTimePeriod(date(28, Calendar.NOVEMBER, 2001), date(30, Calendar.NOVEMBER, 2001)))); [EOL]     TaskSeries s2 = new TaskSeries("Actual"); [EOL]     s2.add(new Task("Write Proposal", new SimpleTimePeriod(date(1, Calendar.APRIL, 2001), date(5, Calendar.APRIL, 2001)))); [EOL]     s2.add(new Task("Obtain Approval", new SimpleTimePeriod(date(9, Calendar.APRIL, 2001), date(9, Calendar.APRIL, 2001)))); [EOL]     s2.add(new Task("Requirements Analysis", new SimpleTimePeriod(date(10, Calendar.APRIL, 2001), date(15, Calendar.MAY, 2001)))); [EOL]     s2.add(new Task("Design Phase", new SimpleTimePeriod(date(15, Calendar.MAY, 2001), date(17, Calendar.JUNE, 2001)))); [EOL]     s2.add(new Task("Design Signoff", new SimpleTimePeriod(date(30, Calendar.JUNE, 2001), date(30, Calendar.JUNE, 2001)))); [EOL]     s2.add(new Task("Alpha Implementation", new SimpleTimePeriod(date(1, Calendar.JULY, 2001), date(12, Calendar.SEPTEMBER, 2001)))); [EOL]     s2.add(new Task("Design Review", new SimpleTimePeriod(date(12, Calendar.SEPTEMBER, 2001), date(22, Calendar.SEPTEMBER, 2001)))); [EOL]     s2.add(new Task("Revised Design Signoff", new SimpleTimePeriod(date(25, Calendar.SEPTEMBER, 2001), date(27, Calendar.SEPTEMBER, 2001)))); [EOL]     s2.add(new Task("Beta Implementation", new SimpleTimePeriod(date(27, Calendar.SEPTEMBER, 2001), date(30, Calendar.OCTOBER, 2001)))); [EOL]     s2.add(new Task("Testing", new SimpleTimePeriod(date(31, Calendar.OCTOBER, 2001), date(17, Calendar.NOVEMBER, 2001)))); [EOL]     s2.add(new Task("Final Implementation", new SimpleTimePeriod(date(18, Calendar.NOVEMBER, 2001), date(5, Calendar.DECEMBER, 2001)))); [EOL]     s2.add(new Task("Signoff", new SimpleTimePeriod(date(10, Calendar.DECEMBER, 2001), date(11, Calendar.DECEMBER, 2001)))); [EOL]     TaskSeriesCollection collection = new TaskSeriesCollection(); [EOL]     collection.add(s1); [EOL]     collection.add(s2); [EOL]     return collection; [EOL] } <line_num>: 200,283
private static Date date(int day, int month, int year) { [EOL]     Calendar calendar = Calendar.getInstance(); [EOL]     calendar.set(year, month, day); [EOL]     Date result = calendar.getTime(); [EOL]     return result; [EOL] } <line_num>: 294,301
public void chartChanged(ChartChangeEvent event) { [EOL]     this.flag = true; [EOL] } <line_num>: 315,317
