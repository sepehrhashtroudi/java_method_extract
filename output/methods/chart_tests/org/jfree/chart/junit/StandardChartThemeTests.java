public StandardChartThemeTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 89,91
public static Test suite() { [EOL]     return new TestSuite(StandardChartThemeTests.class); [EOL] } <line_num>: 80,82
public void testEquals() { [EOL]     StandardChartTheme t1 = new StandardChartTheme("Name"); [EOL]     StandardChartTheme t2 = new StandardChartTheme("Name"); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1 = new StandardChartTheme("t1"); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2 = new StandardChartTheme("t1"); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setExtraLargeFont(new Font("Dialog", Font.PLAIN, 21)); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setExtraLargeFont(new Font("Dialog", Font.PLAIN, 21)); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setLargeFont(new Font("Dialog", Font.PLAIN, 19)); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setLargeFont(new Font("Dialog", Font.PLAIN, 19)); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setRegularFont(new Font("Dialog", Font.PLAIN, 17)); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setRegularFont(new Font("Dialog", Font.PLAIN, 17)); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setTitlePaint(new GradientPaint(0f, 1f, Color.red, 2f, 3f, Color.blue)); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setTitlePaint(new GradientPaint(0f, 1f, Color.red, 2f, 3f, Color.blue)); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setSubtitlePaint(new GradientPaint(1f, 2f, Color.red, 3f, 4f, Color.blue)); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setSubtitlePaint(new GradientPaint(1f, 2f, Color.red, 3f, 4f, Color.blue)); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setChartBackgroundPaint(new GradientPaint(2f, 3f, Color.blue, 4f, 5f, Color.red)); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setChartBackgroundPaint(new GradientPaint(2f, 3f, Color.blue, 4f, 5f, Color.red)); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setLegendBackgroundPaint(new GradientPaint(3f, 4f, Color.gray, 1f, 2f, Color.red)); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setLegendBackgroundPaint(new GradientPaint(3f, 4f, Color.gray, 1f, 2f, Color.red)); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setLegendItemPaint(new GradientPaint(9f, 8f, Color.red, 7f, 6f, Color.blue)); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setLegendItemPaint(new GradientPaint(9f, 8f, Color.red, 7f, 6f, Color.blue)); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setDrawingSupplier(new DefaultDrawingSupplier(new Paint[] { Color.red }, new Paint[] { Color.blue }, new Stroke[] { new BasicStroke(1.0f) }, new Stroke[] { new BasicStroke(1.0f) }, new Shape[] { new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0) })); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setDrawingSupplier(new DefaultDrawingSupplier(new Paint[] { Color.red }, new Paint[] { Color.blue }, new Stroke[] { new BasicStroke(1.0f) }, new Stroke[] { new BasicStroke(1.0f) }, new Shape[] { new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0) })); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setPlotBackgroundPaint(new GradientPaint(4f, 3f, Color.red, 6f, 7f, Color.blue)); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setPlotBackgroundPaint(new GradientPaint(4f, 3f, Color.red, 6f, 7f, Color.blue)); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setPlotOutlinePaint(new GradientPaint(5f, 2f, Color.blue, 6f, 7f, Color.red)); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setPlotOutlinePaint(new GradientPaint(5f, 2f, Color.blue, 6f, 7f, Color.red)); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setLabelLinkStyle(PieLabelLinkStyle.STANDARD); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setLabelLinkStyle(PieLabelLinkStyle.STANDARD); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setLabelLinkPaint(new GradientPaint(4f, 3f, Color.red, 2f, 9f, Color.blue)); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setLabelLinkPaint(new GradientPaint(4f, 3f, Color.red, 2f, 9f, Color.blue)); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setDomainGridlinePaint(Color.blue); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setDomainGridlinePaint(Color.blue); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setRangeGridlinePaint(Color.red); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setRangeGridlinePaint(Color.red); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setAxisOffset(new RectangleInsets(1, 2, 3, 4)); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setAxisOffset(new RectangleInsets(1, 2, 3, 4)); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setAxisLabelPaint(new GradientPaint(8f, 4f, Color.gray, 2f, 9f, Color.blue)); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setAxisLabelPaint(new GradientPaint(8f, 4f, Color.gray, 2f, 9f, Color.blue)); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setTickLabelPaint(new GradientPaint(3f, 4f, Color.red, 5f, 6f, Color.yellow)); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setTickLabelPaint(new GradientPaint(3f, 4f, Color.red, 5f, 6f, Color.yellow)); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setItemLabelPaint(new GradientPaint(2f, 5f, Color.gray, 1f, 2f, Color.blue)); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setItemLabelPaint(new GradientPaint(2f, 5f, Color.gray, 1f, 2f, Color.blue)); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setShadowVisible(!t1.isShadowVisible()); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setShadowVisible(t1.isShadowVisible()); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setShadowPaint(new GradientPaint(7f, 1f, Color.blue, 4f, 6f, Color.red)); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setShadowPaint(new GradientPaint(7f, 1f, Color.blue, 4f, 6f, Color.red)); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setBarPainter(new StandardBarPainter()); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setBarPainter(new StandardBarPainter()); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setXYBarPainter(new StandardXYBarPainter()); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setXYBarPainter(new StandardXYBarPainter()); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setThermometerPaint(new GradientPaint(9f, 7f, Color.red, 5f, 1f, Color.blue)); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setThermometerPaint(new GradientPaint(9f, 7f, Color.red, 5f, 1f, Color.blue)); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setWallPaint(new GradientPaint(4f, 5f, Color.red, 1f, 0f, Color.gray)); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setWallPaint(new GradientPaint(4f, 5f, Color.red, 1f, 0f, Color.gray)); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setErrorIndicatorPaint(new GradientPaint(0f, 1f, Color.white, 2f, 3f, Color.blue)); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setErrorIndicatorPaint(new GradientPaint(0f, 1f, Color.white, 2f, 3f, Color.blue)); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setGridBandPaint(new GradientPaint(1f, 2f, Color.white, 4f, 8f, Color.red)); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setGridBandPaint(new GradientPaint(1f, 2f, Color.white, 4f, 8f, Color.red)); [EOL]     assertTrue(t1.equals(t2)); [EOL]     t1.setGridBandAlternatePaint(new GradientPaint(1f, 4f, Color.green, 1f, 2f, Color.red)); [EOL]     assertFalse(t1.equals(t2)); [EOL]     t2.setGridBandAlternatePaint(new GradientPaint(1f, 4f, Color.green, 1f, 2f, Color.red)); [EOL]     assertTrue(t1.equals(t2)); [EOL] } <line_num>: 96,286
public void testSerialization() { [EOL]     StandardChartTheme t1 = new StandardChartTheme("Name"); [EOL]     StandardChartTheme t2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(t1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         t2 = (StandardChartTheme) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(t1.equals(t2)); [EOL] } <line_num>: 291,309
public void testCloning() { [EOL]     StandardChartTheme t1 = new StandardChartTheme("Name"); [EOL]     StandardChartTheme t2 = null; [EOL]     try { [EOL]         t2 = (StandardChartTheme) t1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(t1 != t2); [EOL]     assertTrue(t1.getClass() == t2.getClass()); [EOL]     assertTrue(t1.equals(t2)); [EOL] } <line_num>: 314,326
