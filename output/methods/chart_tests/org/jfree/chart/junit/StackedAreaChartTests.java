public StackedAreaChartTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 91,93
public static Test suite() { [EOL]     return new TestSuite(StackedAreaChartTests.class); [EOL] } <line_num>: 82,84
protected void setUp() { [EOL]     this.chart = createChart(); [EOL] } <line_num>: 98,100
public void testDrawWithNullInfo() { [EOL]     boolean success = false; [EOL]     try { [EOL]         BufferedImage image = new BufferedImage(200, 100, BufferedImage.TYPE_INT_RGB); [EOL]         Graphics2D g2 = image.createGraphics(); [EOL]         this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null); [EOL]         g2.dispose(); [EOL]         success = true; [EOL]     } catch (Exception e) { [EOL]         success = false; [EOL]     } [EOL]     assertTrue(success); [EOL] } <line_num>: 106,123
public void testReplaceDataset() { [EOL]     Number[][] data = new Integer[][] { { new Integer(-30), new Integer(-20) }, { new Integer(-10), new Integer(10) }, { new Integer(20), new Integer(30) } }; [EOL]     CategoryDataset newData = DatasetUtilities.createCategoryDataset("S", "C", data); [EOL]     LocalListener l = new LocalListener(); [EOL]     this.chart.addChangeListener(l); [EOL]     CategoryPlot plot = (CategoryPlot) this.chart.getPlot(); [EOL]     plot.setDataset(newData); [EOL]     assertEquals(true, l.flag); [EOL]     ValueAxis axis = plot.getRangeAxis(); [EOL]     Range range = axis.getRange(); [EOL]     assertTrue("Expecting the lower bound of the range to be around -30: " + range.getLowerBound(), range.getLowerBound() <= -30); [EOL]     assertTrue("Expecting the upper bound of the range to be around 30: " + range.getUpperBound(), range.getUpperBound() >= 30); [EOL] } <line_num>: 128,151
public void testSetSeriesToolTipGenerator() { [EOL]     CategoryPlot plot = (CategoryPlot) this.chart.getPlot(); [EOL]     CategoryItemRenderer renderer = plot.getRenderer(); [EOL]     StandardCategoryToolTipGenerator tt = new StandardCategoryToolTipGenerator(); [EOL]     renderer.setSeriesToolTipGenerator(0, tt); [EOL]     CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0, false); [EOL]     assertTrue(tt2 == tt); [EOL] } <line_num>: 157,166
public void testSetSeriesURLGenerator() { [EOL]     CategoryPlot plot = (CategoryPlot) this.chart.getPlot(); [EOL]     CategoryItemRenderer renderer = plot.getRenderer(); [EOL]     StandardCategoryURLGenerator url1 = new StandardCategoryURLGenerator(); [EOL]     renderer.setSeriesURLGenerator(0, url1); [EOL]     CategoryURLGenerator url2 = renderer.getURLGenerator(0, 0, false); [EOL]     assertTrue(url2 == url1); [EOL] } <line_num>: 172,180
private static JFreeChart createChart() { [EOL]     Number[][] data = new Integer[][] { { new Integer(-3), new Integer(-2) }, { new Integer(-1), new Integer(1) }, { new Integer(2), new Integer(3) } }; [EOL]     CategoryDataset dataset = DatasetUtilities.createCategoryDataset("S", "C", data); [EOL]     return ChartFactory.createStackedAreaChart("Stacked Area Chart", "Domain", "Range", dataset, true); [EOL] } <line_num>: 187,196
public void chartChanged(ChartChangeEvent event) { [EOL]     this.flag = true; [EOL] } <line_num>: 211,213
