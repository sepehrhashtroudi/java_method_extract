public JFreeChartTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 108,110
public static Test suite() { [EOL]     return new TestSuite(JFreeChartTests.class); [EOL] } <line_num>: 99,101
protected void setUp() { [EOL]     DefaultPieDataset dataset = new DefaultPieDataset(); [EOL]     dataset.setValue("Java", new Double(43.2)); [EOL]     dataset.setValue("Visual Basic", new Double(0.0)); [EOL]     dataset.setValue("C/C++", new Double(17.5)); [EOL]     this.pieChart = ChartFactory.createPieChart("Pie Chart", dataset, true); [EOL] } <line_num>: 115,122
public void testEquals() { [EOL]     JFreeChart chart1 = new JFreeChart("Title", new Font("SansSerif", Font.PLAIN, 12), new PiePlot(), true); [EOL]     JFreeChart chart2 = new JFreeChart("Title", new Font("SansSerif", Font.PLAIN, 12), new PiePlot(), true); [EOL]     assertTrue(chart1.equals(chart2)); [EOL]     assertTrue(chart2.equals(chart1)); [EOL]     chart1.setRenderingHints(new RenderingHints(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON)); [EOL]     assertFalse(chart1.equals(chart2)); [EOL]     chart2.setRenderingHints(new RenderingHints(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON)); [EOL]     assertTrue(chart1.equals(chart2)); [EOL]     chart1.setBorderVisible(true); [EOL]     assertFalse(chart1.equals(chart2)); [EOL]     chart2.setBorderVisible(true); [EOL]     assertTrue(chart1.equals(chart2)); [EOL]     BasicStroke s = new BasicStroke(2.0f); [EOL]     chart1.setBorderStroke(s); [EOL]     assertFalse(chart1.equals(chart2)); [EOL]     chart2.setBorderStroke(s); [EOL]     assertTrue(chart1.equals(chart2)); [EOL]     chart1.setBorderPaint(Color.red); [EOL]     assertFalse(chart1.equals(chart2)); [EOL]     chart2.setBorderPaint(Color.red); [EOL]     assertTrue(chart1.equals(chart2)); [EOL]     chart1.setPadding(new RectangleInsets(1, 2, 3, 4)); [EOL]     assertFalse(chart1.equals(chart2)); [EOL]     chart2.setPadding(new RectangleInsets(1, 2, 3, 4)); [EOL]     assertTrue(chart1.equals(chart2)); [EOL]     chart1.setTitle("XYZ"); [EOL]     assertFalse(chart1.equals(chart2)); [EOL]     chart2.setTitle("XYZ"); [EOL]     assertTrue(chart1.equals(chart2)); [EOL]     chart1.addSubtitle(new TextTitle("Subtitle")); [EOL]     assertFalse(chart1.equals(chart2)); [EOL]     chart2.addSubtitle(new TextTitle("Subtitle")); [EOL]     assertTrue(chart1.equals(chart2)); [EOL]     chart1 = new JFreeChart("Title", new Font("SansSerif", Font.PLAIN, 12), new RingPlot(), false); [EOL]     chart2 = new JFreeChart("Title", new Font("SansSerif", Font.PLAIN, 12), new PiePlot(), false); [EOL]     assertFalse(chart1.equals(chart2)); [EOL]     chart2 = new JFreeChart("Title", new Font("SansSerif", Font.PLAIN, 12), new RingPlot(), false); [EOL]     assertTrue(chart1.equals(chart2)); [EOL]     chart1.setBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     assertFalse(chart1.equals(chart2)); [EOL]     chart2.setBackgroundPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue)); [EOL]     assertTrue(chart1.equals(chart2)); [EOL]     chart1.setBackgroundImage(JFreeChart.INFO.getLogo()); [EOL]     assertFalse(chart1.equals(chart2)); [EOL]     chart2.setBackgroundImage(JFreeChart.INFO.getLogo()); [EOL]     assertTrue(chart1.equals(chart2)); [EOL]     chart1.setBackgroundImageAlignment(Align.BOTTOM_LEFT); [EOL]     assertFalse(chart1.equals(chart2)); [EOL]     chart2.setBackgroundImageAlignment(Align.BOTTOM_LEFT); [EOL]     assertTrue(chart1.equals(chart2)); [EOL]     chart1.setBackgroundImageAlpha(0.1f); [EOL]     assertFalse(chart1.equals(chart2)); [EOL]     chart2.setBackgroundImageAlpha(0.1f); [EOL]     assertTrue(chart1.equals(chart2)); [EOL] } <line_num>: 127,217
public void testEquals2() { [EOL]     JFreeChart chart1 = new JFreeChart("Title", new Font("SansSerif", Font.PLAIN, 12), new PiePlot(), true); [EOL]     JFreeChart chart2 = new JFreeChart("Title", new Font("SansSerif", Font.PLAIN, 12), new PiePlot(), false); [EOL]     assertFalse(chart1.equals(chart2)); [EOL]     assertFalse(chart2.equals(chart1)); [EOL] } <line_num>: 223,230
public void testSubtitleCount() { [EOL]     int count = this.pieChart.getSubtitleCount(); [EOL]     assertEquals(1, count); [EOL] } <line_num>: 235,238
public void testGetSubtitle() { [EOL]     DefaultPieDataset dataset = new DefaultPieDataset(); [EOL]     JFreeChart chart = ChartFactory.createPieChart("title", dataset, true); [EOL]     Title t = chart.getSubtitle(0); [EOL]     assertTrue(t instanceof LegendTitle); [EOL]     boolean pass = false; [EOL]     try { [EOL]         t = chart.getSubtitle(-1); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         t = chart.getSubtitle(1); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         t = chart.getSubtitle(2); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 243,275
public void testSerialization1() { [EOL]     DefaultPieDataset data = new DefaultPieDataset(); [EOL]     data.setValue("Type 1", 54.5); [EOL]     data.setValue("Type 2", 23.9); [EOL]     data.setValue("Type 3", 45.8); [EOL]     JFreeChart c1 = ChartFactory.createPieChart("Test", data, true); [EOL]     JFreeChart c2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(c1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         c2 = (JFreeChart) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(c1, c2); [EOL]     LegendTitle lt2 = c2.getLegend(); [EOL]     assertTrue(lt2.getSources()[0] == c2.getPlot()); [EOL] } <line_num>: 280,307
public void testSerialization2() { [EOL]     DefaultPieDataset data = new DefaultPieDataset(); [EOL]     data.setValue("Type 1", 54.5); [EOL]     data.setValue("Type 2", 23.9); [EOL]     data.setValue("Type 3", 45.8); [EOL]     JFreeChart c1 = ChartFactory.createPieChart3D("Test", data, true); [EOL]     JFreeChart c2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(c1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         c2 = (JFreeChart) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(c1, c2); [EOL] } <line_num>: 312,338
public void testSerialization3() { [EOL]     String series1 = "First"; [EOL]     String series2 = "Second"; [EOL]     String series3 = "Third"; [EOL]     String category1 = "Category 1"; [EOL]     String category2 = "Category 2"; [EOL]     String category3 = "Category 3"; [EOL]     String category4 = "Category 4"; [EOL]     String category5 = "Category 5"; [EOL]     String category6 = "Category 6"; [EOL]     String category7 = "Category 7"; [EOL]     String category8 = "Category 8"; [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     dataset.addValue(1.0, series1, category1); [EOL]     dataset.addValue(4.0, series1, category2); [EOL]     dataset.addValue(3.0, series1, category3); [EOL]     dataset.addValue(5.0, series1, category4); [EOL]     dataset.addValue(5.0, series1, category5); [EOL]     dataset.addValue(7.0, series1, category6); [EOL]     dataset.addValue(7.0, series1, category7); [EOL]     dataset.addValue(8.0, series1, category8); [EOL]     dataset.addValue(5.0, series2, category1); [EOL]     dataset.addValue(7.0, series2, category2); [EOL]     dataset.addValue(6.0, series2, category3); [EOL]     dataset.addValue(8.0, series2, category4); [EOL]     dataset.addValue(4.0, series2, category5); [EOL]     dataset.addValue(4.0, series2, category6); [EOL]     dataset.addValue(2.0, series2, category7); [EOL]     dataset.addValue(1.0, series2, category8); [EOL]     dataset.addValue(4.0, series3, category1); [EOL]     dataset.addValue(3.0, series3, category2); [EOL]     dataset.addValue(2.0, series3, category3); [EOL]     dataset.addValue(3.0, series3, category4); [EOL]     dataset.addValue(6.0, series3, category5); [EOL]     dataset.addValue(3.0, series3, category6); [EOL]     dataset.addValue(4.0, series3, category7); [EOL]     dataset.addValue(3.0, series3, category8); [EOL]     JFreeChart c1 = ChartFactory.createBarChart("Vertical Bar Chart", "Category", "Value", dataset, true); [EOL]     JFreeChart c2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(c1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         c2 = (JFreeChart) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(c1, c2); [EOL] } <line_num>: 343,411
public void testSerialization4() { [EOL]     RegularTimePeriod t = new Day(); [EOL]     TimeSeries series = new TimeSeries("Series 1"); [EOL]     series.add(t, 36.4); [EOL]     t = t.next(); [EOL]     series.add(t, 63.5); [EOL]     TimeSeriesCollection dataset = new TimeSeriesCollection(); [EOL]     dataset.addSeries(series); [EOL]     JFreeChart c1 = ChartFactory.createTimeSeriesChart("Test", "Date", "Value", dataset, true); [EOL]     JFreeChart c2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(c1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         c2 = (JFreeChart) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(c1, c2); [EOL] } <line_num>: 416,446
public void testAddSubtitle() { [EOL]     DefaultPieDataset dataset = new DefaultPieDataset(); [EOL]     JFreeChart chart = ChartFactory.createPieChart("title", dataset, true); [EOL]     TextTitle t0 = new TextTitle("T0"); [EOL]     chart.addSubtitle(0, t0); [EOL]     assertEquals(t0, chart.getSubtitle(0)); [EOL]     TextTitle t1 = new TextTitle("T1"); [EOL]     chart.addSubtitle(t1); [EOL]     assertEquals(t1, chart.getSubtitle(2)); [EOL]     boolean pass = false; [EOL]     try { [EOL]         chart.addSubtitle(null); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         chart.addSubtitle(-1, t0); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL]     pass = false; [EOL]     try { [EOL]         chart.addSubtitle(4, t0); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 451,489
public void testGetSubtitles() { [EOL]     DefaultPieDataset dataset = new DefaultPieDataset(); [EOL]     JFreeChart chart = ChartFactory.createPieChart("title", dataset, true); [EOL]     List subtitles = chart.getSubtitles(); [EOL]     assertEquals(1, chart.getSubtitleCount()); [EOL]     subtitles.add(new TextTitle("T")); [EOL]     assertEquals(1, chart.getSubtitleCount()); [EOL] } <line_num>: 494,504
public void testLegendEvents() { [EOL]     DefaultPieDataset dataset = new DefaultPieDataset(); [EOL]     JFreeChart chart = ChartFactory.createPieChart("title", dataset, true); [EOL]     chart.addChangeListener(this); [EOL]     this.lastChartChangeEvent = null; [EOL]     LegendTitle legend = chart.getLegend(); [EOL]     legend.setPosition(RectangleEdge.TOP); [EOL]     assertNotNull(this.lastChartChangeEvent); [EOL] } <line_num>: 509,517
public void testTitleChangeEvent() { [EOL]     DefaultPieDataset dataset = new DefaultPieDataset(); [EOL]     JFreeChart chart = ChartFactory.createPieChart("title", dataset, true); [EOL]     chart.addChangeListener(this); [EOL]     this.lastChartChangeEvent = null; [EOL]     TextTitle t = chart.getTitle(); [EOL]     t.setFont(new Font("Dialog", Font.BOLD, 9)); [EOL]     assertNotNull(this.lastChartChangeEvent); [EOL]     this.lastChartChangeEvent = null; [EOL]     TextTitle t2 = new TextTitle("T2"); [EOL]     chart.setTitle(t2); [EOL]     assertNotNull(this.lastChartChangeEvent); [EOL]     this.lastChartChangeEvent = null; [EOL]     t2.setFont(new Font("Dialog", Font.BOLD, 9)); [EOL]     assertNotNull(this.lastChartChangeEvent); [EOL]     this.lastChartChangeEvent = null; [EOL]     t.setFont(new Font("Dialog", Font.BOLD, 9)); [EOL]     assertNull(this.lastChartChangeEvent); [EOL]     this.lastChartChangeEvent = null; [EOL] } <line_num>: 522,550
public void chartChanged(ChartChangeEvent event) { [EOL]     this.lastChartChangeEvent = event; [EOL] } <line_num>: 560,562
