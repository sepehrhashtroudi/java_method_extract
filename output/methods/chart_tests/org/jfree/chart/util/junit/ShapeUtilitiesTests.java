public ShapeUtilitiesTests(final String name) { [EOL]     super(name); [EOL] } <line_num>: 77,79
public static Test suite() { [EOL]     return new TestSuite(ShapeUtilitiesTests.class); [EOL] } <line_num>: 68,70
public void testEqualLine2Ds() { [EOL]     assertTrue(ShapeUtilities.equal((Line2D) null, (Line2D) null)); [EOL]     Line2D l1 = new Line2D.Float(1.0f, 2.0f, 3.0f, 4.0f); [EOL]     Line2D l2 = new Line2D.Float(1.0f, 2.0f, 3.0f, 4.0f); [EOL]     assertTrue(ShapeUtilities.equal(l1, l2)); [EOL]     l1 = new Line2D.Float(4.0f, 3.0f, 2.0f, 1.0f); [EOL]     assertFalse(ShapeUtilities.equal(l1, l2)); [EOL]     l2 = new Line2D.Float(4.0f, 3.0f, 2.0f, 1.0f); [EOL]     assertTrue(ShapeUtilities.equal(l1, l2)); [EOL]     l1 = new Line2D.Double(4.0f, 3.0f, 2.0f, 1.0f); [EOL]     assertTrue(ShapeUtilities.equal(l1, l2)); [EOL] } <line_num>: 84,99
public void testEqualShapes() { [EOL]     Shape s1 = null; [EOL]     Shape s2 = null; [EOL]     assertTrue(ShapeUtilities.equal(s1, s2)); [EOL]     s1 = new Line2D.Double(1.0, 2.0, 3.0, 4.0); [EOL]     assertFalse(ShapeUtilities.equal(s1, s2)); [EOL]     s2 = new Line2D.Double(1.0, 2.0, 3.0, 4.0); [EOL]     assertTrue(ShapeUtilities.equal(s1, s2)); [EOL]     assertFalse(s1.equals(s2)); [EOL]     s1 = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0); [EOL]     assertFalse(ShapeUtilities.equal(s1, s2)); [EOL]     s2 = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0); [EOL]     assertTrue(ShapeUtilities.equal(s1, s2)); [EOL]     assertTrue(s1.equals(s2)); [EOL]     s1 = new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0); [EOL]     assertFalse(ShapeUtilities.equal(s1, s2)); [EOL]     s2 = new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0); [EOL]     assertTrue(ShapeUtilities.equal(s1, s2)); [EOL]     s1 = new Arc2D.Double(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, Arc2D.PIE); [EOL]     assertFalse(ShapeUtilities.equal(s1, s2)); [EOL]     s2 = new Arc2D.Double(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, Arc2D.PIE); [EOL]     assertTrue(ShapeUtilities.equal(s1, s2)); [EOL]     Polygon p1 = new Polygon(new int[] { 0, 1, 0 }, new int[] { 1, 0, 1 }, 3); [EOL]     Polygon p2 = new Polygon(new int[] { 1, 1, 0 }, new int[] { 1, 0, 1 }, 3); [EOL]     s1 = p1; [EOL]     s2 = p2; [EOL]     assertFalse(ShapeUtilities.equal(s1, s2)); [EOL]     p2 = new Polygon(new int[] { 0, 1, 0 }, new int[] { 1, 0, 1 }, 3); [EOL]     s2 = p2; [EOL]     assertTrue(ShapeUtilities.equal(s1, s2)); [EOL]     GeneralPath g1 = new GeneralPath(); [EOL]     g1.moveTo(1.0f, 2.0f); [EOL]     g1.lineTo(3.0f, 4.0f); [EOL]     g1.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f); [EOL]     g1.quadTo(1.0f, 2.0f, 3.0f, 4.0f); [EOL]     g1.closePath(); [EOL]     s1 = g1; [EOL]     assertFalse(ShapeUtilities.equal(s1, s2)); [EOL]     GeneralPath g2 = new GeneralPath(); [EOL]     g2.moveTo(1.0f, 2.0f); [EOL]     g2.lineTo(3.0f, 4.0f); [EOL]     g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f); [EOL]     g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f); [EOL]     g2.closePath(); [EOL]     s2 = g2; [EOL]     assertTrue(ShapeUtilities.equal(s1, s2)); [EOL]     assertFalse(s1.equals(s2)); [EOL] } <line_num>: 104,166
public void testIntersects() { [EOL]     final Rectangle2D r1 = new Rectangle2D.Float(0, 0, 100, 100); [EOL]     final Rectangle2D r2 = new Rectangle2D.Float(0, 0, 100, 100); [EOL]     assertTrue(ShapeUtilities.intersects(r1, r2)); [EOL]     r1.setRect(100, 0, 100, 0); [EOL]     assertTrue(ShapeUtilities.intersects(r1, r2)); [EOL]     assertTrue(ShapeUtilities.intersects(r2, r1)); [EOL]     r1.setRect(0, 0, 0, 0); [EOL]     assertTrue(ShapeUtilities.intersects(r1, r2)); [EOL]     assertTrue(ShapeUtilities.intersects(r2, r1)); [EOL]     r1.setRect(50, 50, 10, 0); [EOL]     assertTrue(ShapeUtilities.intersects(r1, r2)); [EOL]     assertTrue(ShapeUtilities.intersects(r2, r1)); [EOL] } <line_num>: 171,187
public void testEqualGeneralPaths() { [EOL]     GeneralPath g1 = new GeneralPath(); [EOL]     g1.moveTo(1.0f, 2.0f); [EOL]     g1.lineTo(3.0f, 4.0f); [EOL]     g1.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f); [EOL]     g1.quadTo(1.0f, 2.0f, 3.0f, 4.0f); [EOL]     g1.closePath(); [EOL]     GeneralPath g2 = new GeneralPath(); [EOL]     g2.moveTo(1.0f, 2.0f); [EOL]     g2.lineTo(3.0f, 4.0f); [EOL]     g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f); [EOL]     g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f); [EOL]     g2.closePath(); [EOL]     assertTrue(ShapeUtilities.equal(g1, g2)); [EOL]     g2 = new GeneralPath(); [EOL]     g2.moveTo(11.0f, 22.0f); [EOL]     g2.lineTo(3.0f, 4.0f); [EOL]     g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f); [EOL]     g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f); [EOL]     g2.closePath(); [EOL]     assertFalse(ShapeUtilities.equal(g1, g2)); [EOL]     g2 = new GeneralPath(); [EOL]     g2.moveTo(1.0f, 2.0f); [EOL]     g2.lineTo(33.0f, 44.0f); [EOL]     g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f); [EOL]     g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f); [EOL]     g2.closePath(); [EOL]     assertFalse(ShapeUtilities.equal(g1, g2)); [EOL]     g2 = new GeneralPath(); [EOL]     g2.moveTo(1.0f, 2.0f); [EOL]     g2.lineTo(3.0f, 4.0f); [EOL]     g2.curveTo(55.0f, 66.0f, 77.0f, 88.0f, 99.0f, 100.0f); [EOL]     g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f); [EOL]     g2.closePath(); [EOL]     assertFalse(ShapeUtilities.equal(g1, g2)); [EOL]     g2 = new GeneralPath(); [EOL]     g2.moveTo(1.0f, 2.0f); [EOL]     g2.lineTo(3.0f, 4.0f); [EOL]     g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f); [EOL]     g2.quadTo(11.0f, 22.0f, 33.0f, 44.0f); [EOL]     g2.closePath(); [EOL]     assertFalse(ShapeUtilities.equal(g1, g2)); [EOL]     g2 = new GeneralPath(); [EOL]     g2.moveTo(1.0f, 2.0f); [EOL]     g2.lineTo(3.0f, 4.0f); [EOL]     g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f); [EOL]     g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f); [EOL]     g2.lineTo(3.0f, 4.0f); [EOL]     g2.closePath(); [EOL]     assertFalse(ShapeUtilities.equal(g1, g2)); [EOL] } <line_num>: 192,247
private boolean lineEquals(Line2D line, double x1, double y1, double x2, double y2) { [EOL]     boolean result = true; [EOL]     double epsilon = 0.0000000001; [EOL]     if (Math.abs(line.getX1() - x1) > epsilon) [EOL]         result = false; [EOL]     if (Math.abs(line.getY1() - y1) > epsilon) [EOL]         result = false; [EOL]     if (Math.abs(line.getX2() - x2) > epsilon) [EOL]         result = false; [EOL]     if (Math.abs(line.getY2() - y2) > epsilon) [EOL]         result = false; [EOL]     if (result == false) { [EOL]         System.out.println(line.getX1() + ", " + line.getY1() + ", " + line.getX2() + ", " + line.getY2()); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 248,261
public void testClipLine() { [EOL]     Rectangle2D rect = new Rectangle2D.Double(1.0, 1.0, 1.0, 1.0); [EOL]     Line2D line = new Line2D.Double(); [EOL]     assertFalse(ShapeUtilities.clipLine(line, rect)); [EOL]     assertTrue(lineEquals(line, 0.0, 0.0, 0.0, 0.0)); [EOL]     line.setLine(0.5, 0.5, 0.6, 0.6); [EOL]     assertFalse(ShapeUtilities.clipLine(line, rect)); [EOL]     assertTrue(lineEquals(line, 0.5, 0.5, 0.6, 0.6)); [EOL]     line.setLine(0.5, 0.5, 1.6, 0.6); [EOL]     assertFalse(ShapeUtilities.clipLine(line, rect)); [EOL]     assertTrue(lineEquals(line, 0.5, 0.5, 1.6, 0.6)); [EOL]     line.setLine(0.5, 0.5, 2.6, 0.6); [EOL]     assertFalse(ShapeUtilities.clipLine(line, rect)); [EOL]     assertTrue(lineEquals(line, 0.5, 0.5, 2.6, 0.6)); [EOL]     line.setLine(0.5, 0.5, 0.6, 1.6); [EOL]     assertFalse(ShapeUtilities.clipLine(line, rect)); [EOL]     assertTrue(lineEquals(line, 0.5, 0.5, 0.6, 1.6)); [EOL]     line.setLine(0.5, 0.5, 1.6, 1.6); [EOL]     assertTrue(ShapeUtilities.clipLine(line, rect)); [EOL]     assertTrue(lineEquals(line, 1.0, 1.0, 1.6, 1.6)); [EOL]     line.setLine(0.5, 0.5, 2.6, 1.6); [EOL]     assertTrue(ShapeUtilities.clipLine(line, rect)); [EOL]     assertTrue(lineEquals(line, 1.4545454545454546, 1.0, 2.0, 1.2857142857142858)); [EOL]     line.setLine(0.5, 0.5, 0.5, 2.6); [EOL]     assertFalse(ShapeUtilities.clipLine(line, rect)); [EOL]     assertTrue(lineEquals(line, 0.5, 0.5, 0.5, 2.6)); [EOL]     line.setLine(0.5, 0.5, 1.5, 2.6); [EOL]     assertTrue(ShapeUtilities.clipLine(line, rect)); [EOL]     assertTrue(lineEquals(line, 1.0, 1.55, 1.2142857142857142, 2.0)); [EOL]     line.setLine(0.5, 0.5, 2.5, 2.6); [EOL]     assertTrue(ShapeUtilities.clipLine(line, rect)); [EOL]     assertTrue(lineEquals(line, 1.0, 1.025, 1.9285714285714284, 2.0)); [EOL]     line.setLine(0.5, 0.5, 1.5, 1.5); [EOL]     assertTrue(ShapeUtilities.clipLine(line, rect)); [EOL]     assertTrue(lineEquals(line, 1.0, 1.0, 1.5, 1.5)); [EOL]     line.setLine(2.5, 1.0, 1.5, 1.5); [EOL]     assertTrue(ShapeUtilities.clipLine(line, rect)); [EOL]     assertTrue(lineEquals(line, 2.0, 1.25, 1.5, 1.5)); [EOL]     line.setLine(1.5, 1.5, 2.5, 1.0); [EOL]     assertTrue(ShapeUtilities.clipLine(line, rect)); [EOL]     assertTrue(lineEquals(line, 1.5, 1.5, 2.0, 1.25)); [EOL] } <line_num>: 266,321
