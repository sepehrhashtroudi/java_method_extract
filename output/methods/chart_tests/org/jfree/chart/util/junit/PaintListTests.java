public PaintListTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 78,80
public static Test suite() { [EOL]     return new TestSuite(PaintListTests.class); [EOL] } <line_num>: 69,71
public void testEquals() { [EOL]     PaintList l1 = new PaintList(); [EOL]     l1.setPaint(0, Color.red); [EOL]     l1.setPaint(1, Color.blue); [EOL]     l1.setPaint(2, null); [EOL]     PaintList l2 = new PaintList(); [EOL]     l2.setPaint(0, Color.red); [EOL]     l2.setPaint(1, Color.blue); [EOL]     l2.setPaint(2, null); [EOL]     assertTrue(l1.equals(l2)); [EOL]     assertTrue(l2.equals(l2)); [EOL] } <line_num>: 85,98
public void testEquals2() { [EOL]     PaintList l1 = new PaintList(); [EOL]     Color color1 = new Color(200, 200, 200); [EOL]     l1.setPaint(0, color1); [EOL]     PaintList l2 = new PaintList(); [EOL]     Color color2 = new Color(200, 200, 200); [EOL]     l2.setPaint(0, color2); [EOL]     assertEquals(l1, l2); [EOL] } <line_num>: 103,112
public void testEquals3() { [EOL]     PaintList l1 = new PaintList(); [EOL]     Paint p1 = new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue); [EOL]     l1.setPaint(0, p1); [EOL]     PaintList l2 = new PaintList(); [EOL]     Paint p2 = new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue); [EOL]     l2.setPaint(0, p2); [EOL]     assertEquals(l1, l2); [EOL] } <line_num>: 118,129
public void testCloning() { [EOL]     PaintList l1 = new PaintList(); [EOL]     l1.setPaint(0, Color.red); [EOL]     l1.setPaint(1, Color.blue); [EOL]     l1.setPaint(2, null); [EOL]     PaintList l2 = null; [EOL]     try { [EOL]         l2 = (PaintList) l1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         System.err.println("PaintListTests.testCloning: failed to clone."); [EOL]     } [EOL]     assertTrue(l1 != l2); [EOL]     assertTrue(l1.getClass() == l2.getClass()); [EOL]     assertTrue(l1.equals(l2)); [EOL]     l2.setPaint(0, Color.green); [EOL]     assertFalse(l1.equals(l2)); [EOL] } <line_num>: 134,155
public void testSerialization() { [EOL]     PaintList l1 = new PaintList(); [EOL]     l1.setPaint(0, Color.red); [EOL]     l1.setPaint(1, Color.blue); [EOL]     l1.setPaint(2, null); [EOL]     PaintList l2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(l1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         l2 = (PaintList) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(l1, l2); [EOL] } <line_num>: 160,185
public void testHashCode() { [EOL]     PaintList p1 = new PaintList(); [EOL]     PaintList p2 = new PaintList(); [EOL]     assertTrue(p1.hashCode() == p2.hashCode()); [EOL]     p1.setPaint(0, Color.red); [EOL]     assertFalse(p1.hashCode() == p2.hashCode()); [EOL]     p2.setPaint(0, Color.red); [EOL]     assertTrue(p1.hashCode() == p2.hashCode()); [EOL]     p1.setPaint(1, new GradientPaint(1.0f, 2.0f, Color.RED, 3.0f, 4.0f, Color.GREEN)); [EOL]     assertFalse(p1.hashCode() == p2.hashCode()); [EOL]     p2.setPaint(1, new GradientPaint(1.0f, 2.0f, Color.RED, 3.0f, 4.0f, Color.GREEN)); [EOL]     assertTrue(p1.hashCode() == p2.hashCode()); [EOL] } <line_num>: 190,206
