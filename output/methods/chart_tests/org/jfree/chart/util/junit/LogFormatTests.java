public LogFormatTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 77,79
public static Test suite() { [EOL]     return new TestSuite(LogFormatTests.class); [EOL] } <line_num>: 68,70
public void testEquals() { [EOL]     LogFormat f1 = new LogFormat(10.0, "10", true); [EOL]     LogFormat f2 = new LogFormat(10.0, "10", true); [EOL]     assertEquals(f1, f2); [EOL]     f1 = new LogFormat(11.0, "10", true); [EOL]     assertFalse(f1.equals(f2)); [EOL]     f2 = new LogFormat(11.0, "10", true); [EOL]     assertTrue(f1.equals(f2)); [EOL]     f1 = new LogFormat(11.0, "11", true); [EOL]     assertFalse(f1.equals(f2)); [EOL]     f2 = new LogFormat(11.0, "11", true); [EOL]     assertTrue(f1.equals(f2)); [EOL]     f1 = new LogFormat(11.0, "11", false); [EOL]     assertFalse(f1.equals(f2)); [EOL]     f2 = new LogFormat(11.0, "11", false); [EOL]     assertTrue(f1.equals(f2)); [EOL]     f1.setExponentFormat(new DecimalFormat("0.000")); [EOL]     assertFalse(f1.equals(f2)); [EOL]     f2.setExponentFormat(new DecimalFormat("0.000")); [EOL]     assertTrue(f1.equals(f2)); [EOL] } <line_num>: 84,108
public void testHashcode() { [EOL]     LogFormat f1 = new LogFormat(10.0, "10", true); [EOL]     LogFormat f2 = new LogFormat(10.0, "10", true); [EOL]     assertTrue(f1.equals(f2)); [EOL]     int h1 = f1.hashCode(); [EOL]     int h2 = f2.hashCode(); [EOL]     assertEquals(h1, h2); [EOL] } <line_num>: 113,120
public void testCloning() { [EOL]     LogFormat f1 = new LogFormat(10.0, "10", true); [EOL]     LogFormat f2 = null; [EOL]     try { [EOL]         f2 = (LogFormat) f1.clone(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(f1 != f2); [EOL]     assertTrue(f1.getClass() == f2.getClass()); [EOL]     assertTrue(f1.equals(f2)); [EOL] } <line_num>: 125,137
public void testSerialization() { [EOL]     LogFormat f1 = new LogFormat(10.0, "10", true); [EOL]     LogFormat f2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(f1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         f2 = (LogFormat) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(f1, f2); [EOL] } <line_num>: 142,160
