public PaintMapTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 78,80
public static Test suite() { [EOL]     return new TestSuite(PaintMapTests.class); [EOL] } <line_num>: 69,71
public void testGetPaint() { [EOL]     PaintMap m1 = new PaintMap(); [EOL]     assertEquals(null, m1.getPaint("A")); [EOL]     m1.put("A", Color.red); [EOL]     assertEquals(Color.red, m1.getPaint("A")); [EOL]     m1.put("A", null); [EOL]     assertEquals(null, m1.getPaint("A")); [EOL]     boolean pass = false; [EOL]     try { [EOL]         m1.getPaint(null); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 85,102
public void testPut() { [EOL]     PaintMap m1 = new PaintMap(); [EOL]     m1.put("A", Color.red); [EOL]     assertEquals(Color.red, m1.getPaint("A")); [EOL]     boolean pass = false; [EOL]     try { [EOL]         m1.put(null, Color.blue); [EOL]     } catch (IllegalArgumentException e) { [EOL]         pass = true; [EOL]     } [EOL]     assertTrue(pass); [EOL] } <line_num>: 107,121
public void testEquals() { [EOL]     PaintMap m1 = new PaintMap(); [EOL]     PaintMap m2 = new PaintMap(); [EOL]     assertTrue(m1.equals(m1)); [EOL]     assertTrue(m1.equals(m2)); [EOL]     assertFalse(m1.equals(null)); [EOL]     assertFalse(m1.equals("ABC")); [EOL]     m1.put("K1", Color.red); [EOL]     assertFalse(m1.equals(m2)); [EOL]     m2.put("K1", Color.red); [EOL]     assertTrue(m1.equals(m2)); [EOL]     m1.put("K2", new GradientPaint(1.0f, 2.0f, Color.green, 3.0f, 4.0f, Color.yellow)); [EOL]     assertFalse(m1.equals(m2)); [EOL]     m2.put("K2", new GradientPaint(1.0f, 2.0f, Color.green, 3.0f, 4.0f, Color.yellow)); [EOL]     assertTrue(m1.equals(m2)); [EOL]     m1.put("K2", null); [EOL]     assertFalse(m1.equals(m2)); [EOL]     m2.put("K2", null); [EOL]     assertTrue(m1.equals(m2)); [EOL] } <line_num>: 126,150
public void testCloning() { [EOL]     PaintMap m1 = new PaintMap(); [EOL]     PaintMap m2 = null; [EOL]     try { [EOL]         m2 = (PaintMap) m1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(m1.equals(m2)); [EOL]     m1.put("K1", Color.red); [EOL]     m1.put("K2", new GradientPaint(1.0f, 2.0f, Color.green, 3.0f, 4.0f, Color.yellow)); [EOL]     try { [EOL]         m2 = (PaintMap) m1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(m1.equals(m2)); [EOL] } <line_num>: 155,176
public void testSerialization1() { [EOL]     PaintMap m1 = new PaintMap(); [EOL]     PaintMap m2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(m1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         m2 = (PaintMap) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(m1, m2); [EOL] } <line_num>: 181,199
public void testSerialization2() { [EOL]     PaintMap m1 = new PaintMap(); [EOL]     m1.put("K1", Color.red); [EOL]     m1.put("K2", new GradientPaint(1.0f, 2.0f, Color.green, 3.0f, 4.0f, Color.yellow)); [EOL]     PaintMap m2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(m1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         m2 = (PaintMap) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(m1, m2); [EOL] } <line_num>: 204,225
public void testKeysOfDifferentClasses() { [EOL]     PaintMap m = new PaintMap(); [EOL]     m.put("ABC", Color.red); [EOL]     m.put(new Integer(99), Color.blue); [EOL]     assertEquals(Color.blue, m.getPaint(new Integer(99))); [EOL] } <line_num>: 232,237
