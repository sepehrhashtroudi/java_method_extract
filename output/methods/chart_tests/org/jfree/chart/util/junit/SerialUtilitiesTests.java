public SerialUtilitiesTests(final String name) { [EOL]     super(name); [EOL] } <line_num>: 89,91
public static Test suite() { [EOL]     return new TestSuite(SerialUtilitiesTests.class); [EOL] } <line_num>: 80,82
public void testIsSerializable() { [EOL]     assertTrue(SerialUtilities.isSerializable(Color.class)); [EOL]     assertTrue(SerialUtilities.isSerializable(ColorUIResource.class)); [EOL]     assertFalse(SerialUtilities.isSerializable(GradientPaint.class)); [EOL]     assertFalse(SerialUtilities.isSerializable(TexturePaint.class)); [EOL] } <line_num>: 96,101
public void testColorSerialization() { [EOL]     Paint p1 = Color.blue; [EOL]     Paint p2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutputStream out = new ObjectOutputStream(buffer); [EOL]         SerialUtilities.writePaint(p1, out); [EOL]         out.close(); [EOL]         ByteArrayInputStream bias = new ByteArrayInputStream(buffer.toByteArray()); [EOL]         ObjectInputStream in = new ObjectInputStream(bias); [EOL]         p2 = SerialUtilities.readPaint(in); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(p1, p2); [EOL] } <line_num>: 107,129
public void testColorUIResourceSerialization() { [EOL]     Paint p1 = UIManager.getColor("Panel.background"); [EOL]     Paint p2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutputStream out = new ObjectOutputStream(buffer); [EOL]         SerialUtilities.writePaint(p1, out); [EOL]         out.close(); [EOL]         ByteArrayInputStream bias = new ByteArrayInputStream(buffer.toByteArray()); [EOL]         ObjectInputStream in = new ObjectInputStream(bias); [EOL]         p2 = SerialUtilities.readPaint(in); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         fail(e.toString()); [EOL]     } [EOL]     assertEquals(p1, p2); [EOL] } <line_num>: 135,154
public void testGradientPaintSerialization() { [EOL]     Paint p1 = new GradientPaint(0.0f, 0.0f, Color.blue, 100.0f, 200.0f, Color.red); [EOL]     Paint p2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutputStream out = new ObjectOutputStream(buffer); [EOL]         SerialUtilities.writePaint(p1, out); [EOL]         out.close(); [EOL]         ByteArrayInputStream bias = new ByteArrayInputStream(buffer.toByteArray()); [EOL]         ObjectInputStream in = new ObjectInputStream(bias); [EOL]         p2 = SerialUtilities.readPaint(in); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     GradientPaint gp1 = (GradientPaint) p1; [EOL]     GradientPaint gp2 = (GradientPaint) p2; [EOL]     assertEquals(gp1.getColor1(), gp2.getColor1()); [EOL]     assertEquals(gp1.getPoint1(), gp2.getPoint1()); [EOL]     assertEquals(gp1.getColor2(), gp2.getColor2()); [EOL]     assertEquals(gp1.getPoint2(), gp2.getPoint2()); [EOL]     assertEquals(gp1.isCyclic(), gp2.isCyclic()); [EOL] } <line_num>: 160,193
public void testTexturePaintSerialization() { [EOL]     Paint p1 = new TexturePaint(new BufferedImage(5, 5, BufferedImage.TYPE_INT_RGB), new Rectangle2D.Double(0, 0, 5, 5)); [EOL]     Paint p2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutputStream out = new ObjectOutputStream(buffer); [EOL]         SerialUtilities.writePaint(p1, out); [EOL]         out.close(); [EOL]         ByteArrayInputStream bias = new ByteArrayInputStream(buffer.toByteArray()); [EOL]         ObjectInputStream in = new ObjectInputStream(bias); [EOL]         p2 = SerialUtilities.readPaint(in); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertNull(p2); [EOL] } <line_num>: 200,225
public void testLine2DFloatSerialization() { [EOL]     Line2D l1 = new Line2D.Float(1.0f, 2.0f, 3.0f, 4.0f); [EOL]     Line2D l2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutputStream out = new ObjectOutputStream(buffer); [EOL]         SerialUtilities.writeShape(l1, out); [EOL]         out.close(); [EOL]         ByteArrayInputStream bais = new ByteArrayInputStream(buffer.toByteArray()); [EOL]         ObjectInputStream in = new ObjectInputStream(bais); [EOL]         l2 = (Line2D) SerialUtilities.readShape(in); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(ShapeUtilities.equal(l1, l2)); [EOL] } <line_num>: 231,250
public void testLine2DDoubleSerialization() { [EOL]     Line2D l1 = new Line2D.Double(1.0, 2.0, 3.0, 4.0); [EOL]     Line2D l2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutputStream out = new ObjectOutputStream(buffer); [EOL]         SerialUtilities.writeShape(l1, out); [EOL]         out.close(); [EOL]         ByteArrayInputStream bais = new ByteArrayInputStream(buffer.toByteArray()); [EOL]         ObjectInputStream in = new ObjectInputStream(bais); [EOL]         l2 = (Line2D) SerialUtilities.readShape(in); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(ShapeUtilities.equal(l1, l2)); [EOL] } <line_num>: 256,275
public void testRectangle2DFloatSerialization() { [EOL]     Rectangle2D r1 = new Rectangle2D.Float(1.0f, 2.0f, 3.0f, 4.0f); [EOL]     Rectangle2D r2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutputStream out = new ObjectOutputStream(buffer); [EOL]         SerialUtilities.writeShape(r1, out); [EOL]         out.close(); [EOL]         ByteArrayInputStream bais = new ByteArrayInputStream(buffer.toByteArray()); [EOL]         ObjectInputStream in = new ObjectInputStream(bais); [EOL]         r2 = (Rectangle2D) SerialUtilities.readShape(in); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(ShapeUtilities.equal(r1, r2)); [EOL] } <line_num>: 281,300
public void testRectangle2DDoubleSerialization() { [EOL]     Rectangle2D r1 = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0); [EOL]     Rectangle2D r2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutputStream out = new ObjectOutputStream(buffer); [EOL]         SerialUtilities.writeShape(r1, out); [EOL]         out.close(); [EOL]         ByteArrayInputStream bais = new ByteArrayInputStream(buffer.toByteArray()); [EOL]         ObjectInputStream in = new ObjectInputStream(bais); [EOL]         r2 = (Rectangle2D) SerialUtilities.readShape(in); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(ShapeUtilities.equal(r1, r2)); [EOL] } <line_num>: 306,325
public void testArc2DFloatSerialization() { [EOL]     Arc2D a1 = new Arc2D.Float(1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, Arc2D.PIE); [EOL]     Arc2D a2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutputStream out = new ObjectOutputStream(buffer); [EOL]         SerialUtilities.writeShape(a1, out); [EOL]         out.close(); [EOL]         ByteArrayInputStream bais = new ByteArrayInputStream(buffer.toByteArray()); [EOL]         ObjectInputStream in = new ObjectInputStream(bais); [EOL]         a2 = (Arc2D) SerialUtilities.readShape(in); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(ShapeUtilities.equal(a1, a2)); [EOL] } <line_num>: 331,351
public void testArc2DDoubleSerialization() { [EOL]     Arc2D a1 = new Arc2D.Double(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, Arc2D.PIE); [EOL]     Arc2D a2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutputStream out = new ObjectOutputStream(buffer); [EOL]         SerialUtilities.writeShape(a1, out); [EOL]         out.close(); [EOL]         ByteArrayInputStream bais = new ByteArrayInputStream(buffer.toByteArray()); [EOL]         ObjectInputStream in = new ObjectInputStream(bais); [EOL]         a2 = (Arc2D) SerialUtilities.readShape(in); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(ShapeUtilities.equal(a1, a2)); [EOL] } <line_num>: 357,376
public void testGeneralPathSerialization() { [EOL]     GeneralPath g1 = new GeneralPath(); [EOL]     g1.moveTo(1.0f, 2.0f); [EOL]     g1.lineTo(3.0f, 4.0f); [EOL]     g1.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f); [EOL]     g1.quadTo(1.0f, 2.0f, 3.0f, 4.0f); [EOL]     g1.closePath(); [EOL]     GeneralPath g2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutputStream out = new ObjectOutputStream(buffer); [EOL]         SerialUtilities.writeShape(g1, out); [EOL]         out.close(); [EOL]         ByteArrayInputStream bais = new ByteArrayInputStream(buffer.toByteArray()); [EOL]         ObjectInputStream in = new ObjectInputStream(bais); [EOL]         g2 = (GeneralPath) SerialUtilities.readShape(in); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(ShapeUtilities.equal(g1, g2)); [EOL] } <line_num>: 381,406
public void testAttributedStringSerialization1() { [EOL]     AttributedString s1 = new AttributedString(""); [EOL]     AttributedString s2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutputStream out = new ObjectOutputStream(buffer); [EOL]         SerialUtilities.writeAttributedString(s1, out); [EOL]         out.close(); [EOL]         ByteArrayInputStream bais = new ByteArrayInputStream(buffer.toByteArray()); [EOL]         ObjectInputStream in = new ObjectInputStream(bais); [EOL]         s2 = SerialUtilities.readAttributedString(in); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(AttributedStringUtilities.equal(s1, s2)); [EOL] } <line_num>: 411,430
public void testAttributedStringSerialization2() { [EOL]     AttributedString s1 = new AttributedString("ABC"); [EOL]     AttributedString s2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutputStream out = new ObjectOutputStream(buffer); [EOL]         SerialUtilities.writeAttributedString(s1, out); [EOL]         out.close(); [EOL]         ByteArrayInputStream bais = new ByteArrayInputStream(buffer.toByteArray()); [EOL]         ObjectInputStream in = new ObjectInputStream(bais); [EOL]         s2 = SerialUtilities.readAttributedString(in); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(AttributedStringUtilities.equal(s1, s2)); [EOL] } <line_num>: 435,454
public void testAttributedStringSerialization3() { [EOL]     AttributedString s1 = new AttributedString("ABC"); [EOL]     s1.addAttribute(TextAttribute.LANGUAGE, "English"); [EOL]     AttributedString s2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutputStream out = new ObjectOutputStream(buffer); [EOL]         SerialUtilities.writeAttributedString(s1, out); [EOL]         out.close(); [EOL]         ByteArrayInputStream bais = new ByteArrayInputStream(buffer.toByteArray()); [EOL]         ObjectInputStream in = new ObjectInputStream(bais); [EOL]         s2 = SerialUtilities.readAttributedString(in); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(AttributedStringUtilities.equal(s1, s2)); [EOL] } <line_num>: 459,479
