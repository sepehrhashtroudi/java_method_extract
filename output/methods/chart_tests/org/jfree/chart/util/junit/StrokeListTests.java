public StrokeListTests(String name) { [EOL]     super(name); [EOL] } <line_num>: 76,78
public static Test suite() { [EOL]     return new TestSuite(StrokeListTests.class); [EOL] } <line_num>: 67,69
public void testEquals() { [EOL]     StrokeList l1 = new StrokeList(); [EOL]     StrokeList l2 = new StrokeList(); [EOL]     assertEquals(l1, l2); [EOL]     l1.setStroke(0, new BasicStroke(1.0f)); [EOL]     assertFalse(l1.equals(l2)); [EOL]     l2.setStroke(0, new BasicStroke(1.0f)); [EOL]     assertTrue(l1.equals(l2)); [EOL]     l1.setStroke(1, new BasicStroke(1.5f)); [EOL]     assertFalse(l1.equals(l2)); [EOL]     l2.setStroke(1, new BasicStroke(1.5f)); [EOL]     assertTrue(l1.equals(l2)); [EOL]     l1.setStroke(1, null); [EOL]     assertFalse(l1.equals(l2)); [EOL]     l2.setStroke(1, null); [EOL]     assertTrue(l1.equals(l2)); [EOL] } <line_num>: 83,102
public void testCloning() { [EOL]     StrokeList l1 = new StrokeList(); [EOL]     l1.setStroke(0, new BasicStroke(1.0f)); [EOL]     l1.setStroke(1, new BasicStroke(1.5f)); [EOL]     l1.setStroke(2, null); [EOL]     StrokeList l2 = null; [EOL]     try { [EOL]         l2 = (StrokeList) l1.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertTrue(l1 != l2); [EOL]     assertTrue(l1.getClass() == l2.getClass()); [EOL]     assertTrue(l1.equals(l2)); [EOL]     l2.setStroke(0, new BasicStroke(0.5f)); [EOL]     assertFalse(l1.equals(l2)); [EOL] } <line_num>: 107,128
public void testSerialization() { [EOL]     StrokeList l1 = new StrokeList(); [EOL]     l1.setStroke(0, new BasicStroke(1.0f)); [EOL]     l1.setStroke(1, new BasicStroke(1.5f)); [EOL]     l1.setStroke(2, null); [EOL]     StrokeList l2 = null; [EOL]     try { [EOL]         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); [EOL]         ObjectOutput out = new ObjectOutputStream(buffer); [EOL]         out.writeObject(l1); [EOL]         out.close(); [EOL]         ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray())); [EOL]         l2 = (StrokeList) in.readObject(); [EOL]         in.close(); [EOL]     } catch (Exception e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     assertEquals(l1, l2); [EOL] } <line_num>: 133,158
public void testHashCode() { [EOL]     StrokeList p1 = new StrokeList(); [EOL]     StrokeList p2 = new StrokeList(); [EOL]     assertTrue(p1.hashCode() == p2.hashCode()); [EOL]     p1.setStroke(0, new BasicStroke(0.5f)); [EOL]     assertFalse(p1.hashCode() == p2.hashCode()); [EOL]     p2.setStroke(0, new BasicStroke(0.5f)); [EOL]     assertTrue(p1.hashCode() == p2.hashCode()); [EOL]     p1.setStroke(1, null); [EOL]     assertFalse(p1.hashCode() == p2.hashCode()); [EOL]     p2.setStroke(1, null); [EOL]     assertTrue(p1.hashCode() == p2.hashCode()); [EOL] } <line_num>: 163,177
