public DataFormatDetector(JsonFactory... detectors) { [EOL]     this(detectors, MatchStrength.SOLID_MATCH, MatchStrength.WEAK_MATCH, DEFAULT_MAX_INPUT_LOOKAHEAD); [EOL] } <line_num>: 57,60
public DataFormatDetector(Collection<JsonFactory> detectors) { [EOL]     this(detectors.toArray(new JsonFactory[detectors.size()])); [EOL] } <line_num>: 62,64
private DataFormatDetector(JsonFactory[] detectors, MatchStrength optMatch, MatchStrength minMatch, int maxInputLookahead) { [EOL]     _detectors = detectors; [EOL]     _optimalMatch = optMatch; [EOL]     _minimalMatch = minMatch; [EOL]     _maxInputLookahead = maxInputLookahead; [EOL] } <line_num>: 101,109
public DataFormatDetector withOptimalMatch(MatchStrength optMatch) { [EOL]     if (optMatch == _optimalMatch) { [EOL]         return this; [EOL]     } [EOL]     return new DataFormatDetector(_detectors, optMatch, _minimalMatch, _maxInputLookahead); [EOL] } <line_num>: 71,76
public DataFormatDetector withMinimalMatch(MatchStrength minMatch) { [EOL]     if (minMatch == _minimalMatch) { [EOL]         return this; [EOL]     } [EOL]     return new DataFormatDetector(_detectors, _optimalMatch, minMatch, _maxInputLookahead); [EOL] } <line_num>: 82,87
public DataFormatDetector withMaxInputLookahead(int lookaheadBytes) { [EOL]     if (lookaheadBytes == _maxInputLookahead) { [EOL]         return this; [EOL]     } [EOL]     return new DataFormatDetector(_detectors, _optimalMatch, _minimalMatch, lookaheadBytes); [EOL] } <line_num>: 93,99
public DataFormatMatcher findFormat(InputStream in) throws IOException { [EOL]     return _findFormat(new InputAccessor.Std(in, new byte[_maxInputLookahead])); [EOL] } <line_num>: 125,128
public DataFormatMatcher findFormat(byte[] fullInputData) throws IOException { [EOL]     return _findFormat(new InputAccessor.Std(fullInputData)); [EOL] } <line_num>: 137,140
public DataFormatMatcher findFormat(byte[] fullInputData, int offset, int len) throws IOException { [EOL]     return _findFormat(new InputAccessor.Std(fullInputData, offset, len)); [EOL] } <line_num>: 151,154
@Override [EOL] public String toString() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     final int len = _detectors.length; [EOL]     if (len > 0) { [EOL]         sb.append(_detectors[0].getFormatName()); [EOL]         for (int i = 1; i < len; ++i) { [EOL]             sb.append(", "); [EOL]             sb.append(_detectors[i].getFormatName()); [EOL]         } [EOL]     } [EOL]     sb.append(']'); [EOL]     return sb.toString(); [EOL] } <line_num>: 162,177
private DataFormatMatcher _findFormat(InputAccessor.Std acc) throws IOException { [EOL]     JsonFactory bestMatch = null; [EOL]     MatchStrength bestMatchStrength = null; [EOL]     for (JsonFactory f : _detectors) { [EOL]         acc.reset(); [EOL]         MatchStrength strength = f.hasFormat(acc); [EOL]         if (strength == null || strength.ordinal() < _minimalMatch.ordinal()) { [EOL]             continue; [EOL]         } [EOL]         if (bestMatch != null) { [EOL]             if (bestMatchStrength.ordinal() >= strength.ordinal()) { [EOL]                 continue; [EOL]             } [EOL]         } [EOL]         bestMatch = f; [EOL]         bestMatchStrength = strength; [EOL]         if (strength.ordinal() >= _optimalMatch.ordinal()) { [EOL]             break; [EOL]         } [EOL]     } [EOL]     return acc.createMatcher(bestMatch, bestMatchStrength); [EOL] } <line_num>: 185,210
