protected ParserMinimalBase() { [EOL] } <line_num>: 78,78
protected ParserMinimalBase(int features) { [EOL]     super(features); [EOL] } <line_num>: 79,81
@Override [EOL] public Version version() { [EOL]     return VersionUtil.versionFor(getClass()); [EOL] } <line_num>: 83,86
@Override [EOL] public abstract JsonToken nextToken() throws IOException, JsonParseException; <line_num>: 107,108
@Override [EOL] public JsonToken getCurrentToken() { [EOL]     return _currToken; [EOL] } <line_num>: 110,113
@Override [EOL] public boolean hasCurrentToken() { [EOL]     return _currToken != null; [EOL] } <line_num>: 115,118
@Override [EOL] public JsonToken nextValue() throws IOException, JsonParseException { [EOL]     JsonToken t = nextToken(); [EOL]     if (t == JsonToken.FIELD_NAME) { [EOL]         t = nextToken(); [EOL]     } [EOL]     return t; [EOL] } <line_num>: 120,133
@SuppressWarnings("incomplete-switch") [EOL] @Override [EOL] public JsonParser skipChildren() throws IOException, JsonParseException { [EOL]     if (_currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY) { [EOL]         return this; [EOL]     } [EOL]     int open = 1; [EOL]     while (true) { [EOL]         JsonToken t = nextToken(); [EOL]         if (t == null) { [EOL]             _handleEOF(); [EOL]             return this; [EOL]         } [EOL]         switch(t) { [EOL]             case START_OBJECT: [EOL]             case START_ARRAY: [EOL]                 ++open; [EOL]                 break; [EOL]             case END_OBJECT: [EOL]             case END_ARRAY: [EOL]                 if (--open == 0) { [EOL]                     return this; [EOL]                 } [EOL]                 break; [EOL]         } [EOL]     } [EOL] } <line_num>: 135,171
protected abstract void _handleEOF() throws JsonParseException; <line_num>: 176,176
@Override [EOL] public abstract String getCurrentName() throws IOException, JsonParseException; <line_num>: 182,183
@Override [EOL] public abstract void close() throws IOException; <line_num>: 185,186
@Override [EOL] public abstract boolean isClosed(); <line_num>: 188,189
@Override [EOL] public abstract JsonStreamContext getParsingContext(); <line_num>: 191,192
@Override [EOL] public void clearCurrentToken() { [EOL]     if (_currToken != null) { [EOL]         _lastClearedToken = _currToken; [EOL]         _currToken = null; [EOL]     } [EOL] } <line_num>: 204,210
@Override [EOL] public JsonToken getLastClearedToken() { [EOL]     return _lastClearedToken; [EOL] } <line_num>: 212,215
@Override [EOL] public abstract void overrideCurrentName(String name); <line_num>: 217,218
@Override [EOL] public abstract String getText() throws IOException, JsonParseException; <line_num>: 226,227
@Override [EOL] public abstract char[] getTextCharacters() throws IOException, JsonParseException; <line_num>: 229,230
@Override [EOL] public abstract boolean hasTextCharacters(); <line_num>: 232,233
@Override [EOL] public abstract int getTextLength() throws IOException, JsonParseException; <line_num>: 235,236
@Override [EOL] public abstract int getTextOffset() throws IOException, JsonParseException; <line_num>: 238,239
@Override [EOL] public abstract byte[] getBinaryValue(Base64Variant b64variant) throws IOException, JsonParseException; <line_num>: 247,249
@SuppressWarnings("incomplete-switch") [EOL] @Override [EOL] public boolean getValueAsBoolean(boolean defaultValue) throws IOException, JsonParseException { [EOL]     if (_currToken != null) { [EOL]         switch(_currToken) { [EOL]             case VALUE_NUMBER_INT: [EOL]                 return getIntValue() != 0; [EOL]             case VALUE_TRUE: [EOL]                 return true; [EOL]             case VALUE_FALSE: [EOL]             case VALUE_NULL: [EOL]                 return false; [EOL]             case VALUE_EMBEDDED_OBJECT: [EOL]                 { [EOL]                     Object value = this.getEmbeddedObject(); [EOL]                     if (value instanceof Boolean) { [EOL]                         return (Boolean) value; [EOL]                     } [EOL]                 } [EOL]             case VALUE_STRING: [EOL]                 String str = getText().trim(); [EOL]                 if ("true".equals(str)) { [EOL]                     return true; [EOL]                 } [EOL]                 if (_hasTextualNull(str)) { [EOL]                     return false; [EOL]                 } [EOL]                 break; [EOL]         } [EOL]     } [EOL]     return defaultValue; [EOL] } <line_num>: 257,289
@SuppressWarnings("incomplete-switch") [EOL] @Override [EOL] public int getValueAsInt(int defaultValue) throws IOException, JsonParseException { [EOL]     if (_currToken != null) { [EOL]         switch(_currToken) { [EOL]             case VALUE_NUMBER_INT: [EOL]             case VALUE_NUMBER_FLOAT: [EOL]                 return getIntValue(); [EOL]             case VALUE_TRUE: [EOL]                 return 1; [EOL]             case VALUE_FALSE: [EOL]             case VALUE_NULL: [EOL]                 return 0; [EOL]             case VALUE_STRING: [EOL]                 String str = getText(); [EOL]                 if (_hasTextualNull(str)) { [EOL]                     return 0; [EOL]                 } [EOL]                 return NumberInput.parseAsInt(str, defaultValue); [EOL]             case VALUE_EMBEDDED_OBJECT: [EOL]                 { [EOL]                     Object value = this.getEmbeddedObject(); [EOL]                     if (value instanceof Number) { [EOL]                         return ((Number) value).intValue(); [EOL]                     } [EOL]                 } [EOL]         } [EOL]     } [EOL]     return defaultValue; [EOL] } <line_num>: 291,321
@Override [EOL] public long getValueAsLong(long defaultValue) throws IOException, JsonParseException { [EOL]     if (_currToken != null) { [EOL]         switch(_currToken) { [EOL]             case VALUE_NUMBER_INT: [EOL]             case VALUE_NUMBER_FLOAT: [EOL]                 return getLongValue(); [EOL]             case VALUE_TRUE: [EOL]                 return 1; [EOL]             case VALUE_FALSE: [EOL]             case VALUE_NULL: [EOL]                 return 0; [EOL]             case VALUE_STRING: [EOL]                 String str = getText(); [EOL]                 if (_hasTextualNull(str)) { [EOL]                     return 0L; [EOL]                 } [EOL]                 return NumberInput.parseAsLong(str, defaultValue); [EOL]             case VALUE_EMBEDDED_OBJECT: [EOL]                 { [EOL]                     Object value = this.getEmbeddedObject(); [EOL]                     if (value instanceof Number) { [EOL]                         return ((Number) value).longValue(); [EOL]                     } [EOL]                 } [EOL]             default: [EOL]         } [EOL]     } [EOL]     return defaultValue; [EOL] } <line_num>: 323,353
@SuppressWarnings("incomplete-switch") [EOL] @Override [EOL] public double getValueAsDouble(double defaultValue) throws IOException, JsonParseException { [EOL]     if (_currToken != null) { [EOL]         switch(_currToken) { [EOL]             case VALUE_NUMBER_INT: [EOL]             case VALUE_NUMBER_FLOAT: [EOL]                 return getDoubleValue(); [EOL]             case VALUE_TRUE: [EOL]                 return 1; [EOL]             case VALUE_FALSE: [EOL]             case VALUE_NULL: [EOL]                 return 0; [EOL]             case VALUE_STRING: [EOL]                 String str = getText(); [EOL]                 if (_hasTextualNull(str)) { [EOL]                     return 0; [EOL]                 } [EOL]                 return NumberInput.parseAsDouble(str, defaultValue); [EOL]             case VALUE_EMBEDDED_OBJECT: [EOL]                 { [EOL]                     Object value = this.getEmbeddedObject(); [EOL]                     if (value instanceof Number) { [EOL]                         return ((Number) value).doubleValue(); [EOL]                     } [EOL]                 } [EOL]         } [EOL]     } [EOL]     return defaultValue; [EOL] } <line_num>: 355,385
@Override [EOL] public String getValueAsString(String defaultValue) throws IOException, JsonParseException { [EOL]     if (_currToken != JsonToken.VALUE_STRING) { [EOL]         if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) { [EOL]             return defaultValue; [EOL]         } [EOL]     } [EOL]     return getText(); [EOL] } <line_num>: 387,396
protected void _decodeBase64(String str, ByteArrayBuilder builder, Base64Variant b64variant) throws IOException, JsonParseException { [EOL]     try { [EOL]         b64variant.decode(str, builder); [EOL]     } catch (IllegalArgumentException e) { [EOL]         _reportError(e.getMessage()); [EOL]     } [EOL] } <line_num>: 408,417
@Deprecated [EOL] protected void _reportInvalidBase64(Base64Variant b64variant, char ch, int bindex, String msg) throws JsonParseException { [EOL]     String base; [EOL]     if (ch <= INT_SPACE) { [EOL]         base = "Illegal white space character (code 0x" + Integer.toHexString(ch) + ") as character #" + (bindex + 1) + " of 4-char base64 unit: can only used between units"; [EOL]     } else if (b64variant.usesPaddingChar(ch)) { [EOL]         base = "Unexpected padding character ('" + b64variant.getPaddingChar() + "') as character #" + (bindex + 1) + " of 4-char base64 unit: padding only legal as 3rd or 4th character"; [EOL]     } else if (!Character.isDefined(ch) || Character.isISOControl(ch)) { [EOL]         base = "Illegal character (code 0x" + Integer.toHexString(ch) + ") in base64 content"; [EOL]     } else { [EOL]         base = "Illegal character '" + ch + "' (code 0x" + Integer.toHexString(ch) + ") in base64 content"; [EOL]     } [EOL]     if (msg != null) { [EOL]         base = base + ": " + msg; [EOL]     } [EOL]     throw _constructError(base); [EOL] } <line_num>: 425,444
@Deprecated [EOL] protected void _reportBase64EOF() throws JsonParseException { [EOL]     throw _constructError("Unexpected end-of-String in base64 content"); [EOL] } <line_num>: 450,453
protected boolean _hasTextualNull(String value) { [EOL]     return "null".equals(value); [EOL] } <line_num>: 468,470
protected void _reportUnexpectedChar(int ch, String comment) throws JsonParseException { [EOL]     String msg = "Unexpected character (" + _getCharDesc(ch) + ")"; [EOL]     if (comment != null) { [EOL]         msg += ": " + comment; [EOL]     } [EOL]     _reportError(msg); [EOL] } <line_num>: 478,486
protected void _reportInvalidEOF() throws JsonParseException { [EOL]     _reportInvalidEOF(" in " + _currToken); [EOL] } <line_num>: 488,492
protected void _reportInvalidEOF(String msg) throws JsonParseException { [EOL]     _reportError("Unexpected end-of-input" + msg); [EOL] } <line_num>: 494,498
protected void _reportInvalidEOFInValue() throws JsonParseException { [EOL]     _reportInvalidEOF(" in a value"); [EOL] } <line_num>: 500,503
protected void _throwInvalidSpace(int i) throws JsonParseException { [EOL]     char c = (char) i; [EOL]     String msg = "Illegal character (" + _getCharDesc(c) + "): only regular white space (\\r, \\n, \\t) is allowed between tokens"; [EOL]     _reportError(msg); [EOL] } <line_num>: 505,511
protected void _throwUnquotedSpace(int i, String ctxtDesc) throws JsonParseException { [EOL]     if (!isEnabled(Feature.ALLOW_UNQUOTED_CONTROL_CHARS) || i >= INT_SPACE) { [EOL]         char c = (char) i; [EOL]         String msg = "Illegal unquoted character (" + _getCharDesc(c) + "): has to be escaped using backslash to be included in " + ctxtDesc; [EOL]         _reportError(msg); [EOL]     } [EOL] } <line_num>: 518,527
protected char _handleUnrecognizedCharacterEscape(char ch) throws JsonProcessingException { [EOL]     if (isEnabled(Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER)) { [EOL]         return ch; [EOL]     } [EOL]     if (ch == '\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES)) { [EOL]         return ch; [EOL]     } [EOL]     _reportError("Unrecognized character escape " + _getCharDesc(ch)); [EOL]     return ch; [EOL] } <line_num>: 529,541
protected final static String _getCharDesc(int ch) { [EOL]     char c = (char) ch; [EOL]     if (Character.isISOControl(c)) { [EOL]         return "(CTRL-CHAR, code " + ch + ")"; [EOL]     } [EOL]     if (ch > 255) { [EOL]         return "'" + c + "' (code " + ch + " / 0x" + Integer.toHexString(ch) + ")"; [EOL]     } [EOL]     return "'" + c + "' (code " + ch + ")"; [EOL] } <line_num>: 549,559
protected final void _reportError(String msg) throws JsonParseException { [EOL]     throw _constructError(msg); [EOL] } <line_num>: 561,565
protected final void _wrapError(String msg, Throwable t) throws JsonParseException { [EOL]     throw _constructError(msg, t); [EOL] } <line_num>: 567,571
protected final void _throwInternal() { [EOL]     VersionUtil.throwInternal(); [EOL] } <line_num>: 573,575
protected final JsonParseException _constructError(String msg, Throwable t) { [EOL]     return new JsonParseException(msg, getCurrentLocation(), t); [EOL] } <line_num>: 577,580
