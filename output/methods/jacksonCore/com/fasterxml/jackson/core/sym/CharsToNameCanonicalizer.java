private CharsToNameCanonicalizer() { [EOL]     _canonicalize = true; [EOL]     _intern = true; [EOL]     _dirty = true; [EOL]     _hashSeed = 0; [EOL]     _longestCollisionList = 0; [EOL]     initTables(DEFAULT_TABLE_SIZE); [EOL] } <line_num>: 233,243
private CharsToNameCanonicalizer(CharsToNameCanonicalizer parent, boolean canonicalize, boolean intern, String[] symbols, Bucket[] buckets, int size, int hashSeed, int longestColl) { [EOL]     _parent = parent; [EOL]     _canonicalize = canonicalize; [EOL]     _intern = intern; [EOL]     _symbols = symbols; [EOL]     _buckets = buckets; [EOL]     _size = size; [EOL]     _hashSeed = hashSeed; [EOL]     int arrayLen = (symbols.length); [EOL]     _sizeThreshold = _thresholdSize(arrayLen); [EOL]     _indexMask = (arrayLen - 1); [EOL]     _longestCollisionList = longestColl; [EOL]     _dirty = false; [EOL] } <line_num>: 264,285
public Bucket(String symbol, Bucket next) { [EOL]     _symbol = symbol; [EOL]     _next = next; [EOL]     _length = (next == null) ? 1 : next._length + 1; [EOL] } <line_num>: 692,696
public static CharsToNameCanonicalizer createRoot() { [EOL]     long now = System.currentTimeMillis(); [EOL]     int seed = (((int) now) + ((int) (now >>> 32))) | 1; [EOL]     return createRoot(seed); [EOL] } <line_num>: 212,221
protected static CharsToNameCanonicalizer createRoot(int hashSeed) { [EOL]     return sBootstrapSymbolTable.makeOrphan(hashSeed); [EOL] } <line_num>: 223,225
private void initTables(int initialSize) { [EOL]     _symbols = new String[initialSize]; [EOL]     _buckets = new Bucket[initialSize >> 1]; [EOL]     _indexMask = initialSize - 1; [EOL]     _size = 0; [EOL]     _longestCollisionList = 0; [EOL]     _sizeThreshold = _thresholdSize(initialSize); [EOL] } <line_num>: 245,255
private static int _thresholdSize(int hashAreaSize) { [EOL]     return hashAreaSize - (hashAreaSize >> 2); [EOL] } <line_num>: 257,259
public CharsToNameCanonicalizer makeChild(final boolean canonicalize, final boolean intern) { [EOL]     final String[] symbols; [EOL]     final Bucket[] buckets; [EOL]     final int size; [EOL]     final int hashSeed; [EOL]     final int longestCollisionList; [EOL]     synchronized (this) { [EOL]         symbols = _symbols; [EOL]         buckets = _buckets; [EOL]         size = _size; [EOL]         hashSeed = _hashSeed; [EOL]         longestCollisionList = _longestCollisionList; [EOL]     } [EOL]     return new CharsToNameCanonicalizer(this, canonicalize, intern, symbols, buckets, size, hashSeed, longestCollisionList); [EOL] } <line_num>: 299,322
private CharsToNameCanonicalizer makeOrphan(int seed) { [EOL]     return new CharsToNameCanonicalizer(null, true, true, _symbols, _buckets, _size, seed, _longestCollisionList); [EOL] } <line_num>: 324,328
private void mergeChild(CharsToNameCanonicalizer child) { [EOL]     if (child.size() > MAX_ENTRIES_FOR_REUSE || child._longestCollisionList > MAX_COLL_CHAIN_FOR_REUSE) { [EOL]         synchronized (this) { [EOL]             initTables(DEFAULT_TABLE_SIZE); [EOL]             _dirty = false; [EOL]         } [EOL]     } else { [EOL]         if (child.size() <= size()) { [EOL]             return; [EOL]         } [EOL]         synchronized (this) { [EOL]             _symbols = child._symbols; [EOL]             _buckets = child._buckets; [EOL]             _size = child._size; [EOL]             _sizeThreshold = child._sizeThreshold; [EOL]             _indexMask = child._indexMask; [EOL]             _longestCollisionList = child._longestCollisionList; [EOL]             _dirty = false; [EOL]         } [EOL]     } [EOL] } <line_num>: 337,375
public void release() { [EOL]     if (!maybeDirty()) { [EOL]         return; [EOL]     } [EOL]     if (_parent != null) { [EOL]         _parent.mergeChild(this); [EOL]         _dirty = false; [EOL]     } [EOL] } <line_num>: 377,391
public int size() { [EOL]     return _size; [EOL] } <line_num>: 399,399
public int bucketCount() { [EOL]     return _symbols.length; [EOL] } <line_num>: 407,408
public boolean maybeDirty() { [EOL]     return _dirty; [EOL] } <line_num>: 410,410
public int hashSeed() { [EOL]     return _hashSeed; [EOL] } <line_num>: 412,412
public int collisionCount() { [EOL]     int count = 0; [EOL]     for (Bucket bucket : _buckets) { [EOL]         if (bucket != null) { [EOL]             count += bucket.length(); [EOL]         } [EOL]     } [EOL]     return count; [EOL] } <line_num>: 421,431
public int maxCollisionLength() { [EOL]     return _longestCollisionList; [EOL] } <line_num>: 440,443
public String findSymbol(char[] buffer, int start, int len, int h) { [EOL]     if (len < 1) { [EOL]         return ""; [EOL]     } [EOL]     if (!_canonicalize) { [EOL]         return new String(buffer, start, len); [EOL]     } [EOL]     int index = _hashToIndex(h); [EOL]     String sym = _symbols[index]; [EOL]     if (sym != null) { [EOL]         if (sym.length() == len) { [EOL]             int i = 0; [EOL]             do { [EOL]                 if (sym.charAt(i) != buffer[start + i]) { [EOL]                     break; [EOL]                 } [EOL]             } while (++i < len); [EOL]             if (i == len) { [EOL]                 return sym; [EOL]             } [EOL]         } [EOL]         Bucket b = _buckets[index >> 1]; [EOL]         if (b != null) { [EOL]             sym = b.find(buffer, start, len); [EOL]             if (sym != null) { [EOL]                 return sym; [EOL]             } [EOL]         } [EOL]     } [EOL]     if (!_dirty) { [EOL]         copyArrays(); [EOL]         _dirty = true; [EOL]     } else if (_size >= _sizeThreshold) { [EOL]         rehash(); [EOL]         index = _hashToIndex(calcHash(buffer, start, len)); [EOL]     } [EOL]     String newSymbol = new String(buffer, start, len); [EOL]     if (_intern) { [EOL]         newSymbol = InternCache.instance.intern(newSymbol); [EOL]     } [EOL]     ++_size; [EOL]     if (_symbols[index] == null) { [EOL]         _symbols[index] = newSymbol; [EOL]     } else { [EOL]         int bix = (index >> 1); [EOL]         Bucket newB = new Bucket(newSymbol, _buckets[bix]); [EOL]         _buckets[bix] = newB; [EOL]         _longestCollisionList = Math.max(newB.length(), _longestCollisionList); [EOL]         if (_longestCollisionList > MAX_COLL_CHAIN_LENGTH) { [EOL]             reportTooManyCollisions(MAX_COLL_CHAIN_LENGTH); [EOL]         } [EOL]     } [EOL]     return newSymbol; [EOL] } <line_num>: 451,523
public int _hashToIndex(int rawHash) { [EOL]     rawHash += (rawHash >>> 15); [EOL]     return (rawHash & _indexMask); [EOL] } <line_num>: 529,533
public int calcHash(char[] buffer, int start, int len) { [EOL]     int hash = _hashSeed; [EOL]     for (int i = 0; i < len; ++i) { [EOL]         hash = (hash * HASH_MULT) + (int) buffer[i]; [EOL]     } [EOL]     return (hash == 0) ? 1 : hash; [EOL] } <line_num>: 544,552
public int calcHash(String key) { [EOL]     final int len = key.length(); [EOL]     int hash = _hashSeed; [EOL]     for (int i = 0; i < len; ++i) { [EOL]         hash = (hash * HASH_MULT) + (int) key.charAt(i); [EOL]     } [EOL]     return (hash == 0) ? 1 : hash; [EOL] } <line_num>: 554,564
private void copyArrays() { [EOL]     final String[] oldSyms = _symbols; [EOL]     _symbols = Arrays.copyOf(oldSyms, oldSyms.length); [EOL]     final Bucket[] oldBuckets = _buckets; [EOL]     _buckets = Arrays.copyOf(oldBuckets, oldBuckets.length); [EOL] } <line_num>: 576,582
private void rehash() { [EOL]     int size = _symbols.length; [EOL]     int newSize = size + size; [EOL]     if (newSize > MAX_TABLE_SIZE) { [EOL]         _size = 0; [EOL]         Arrays.fill(_symbols, null); [EOL]         Arrays.fill(_buckets, null); [EOL]         _dirty = true; [EOL]         return; [EOL]     } [EOL]     String[] oldSyms = _symbols; [EOL]     Bucket[] oldBuckets = _buckets; [EOL]     _symbols = new String[newSize]; [EOL]     _buckets = new Bucket[newSize >> 1]; [EOL]     _indexMask = newSize - 1; [EOL]     _sizeThreshold = _thresholdSize(newSize); [EOL]     int count = 0; [EOL]     int maxColl = 0; [EOL]     for (int i = 0; i < size; ++i) { [EOL]         String symbol = oldSyms[i]; [EOL]         if (symbol != null) { [EOL]             ++count; [EOL]             int index = _hashToIndex(calcHash(symbol)); [EOL]             if (_symbols[index] == null) { [EOL]                 _symbols[index] = symbol; [EOL]             } else { [EOL]                 int bix = (index >> 1); [EOL]                 Bucket newB = new Bucket(symbol, _buckets[bix]); [EOL]                 _buckets[bix] = newB; [EOL]                 maxColl = Math.max(maxColl, newB.length()); [EOL]             } [EOL]         } [EOL]     } [EOL]     size >>= 1; [EOL]     for (int i = 0; i < size; ++i) { [EOL]         Bucket b = oldBuckets[i]; [EOL]         while (b != null) { [EOL]             ++count; [EOL]             String symbol = b.getSymbol(); [EOL]             int index = _hashToIndex(calcHash(symbol)); [EOL]             if (_symbols[index] == null) { [EOL]                 _symbols[index] = symbol; [EOL]             } else { [EOL]                 int bix = (index >> 1); [EOL]                 Bucket newB = new Bucket(symbol, _buckets[bix]); [EOL]                 _buckets[bix] = newB; [EOL]                 maxColl = Math.max(maxColl, newB.length()); [EOL]             } [EOL]             b = b.getNext(); [EOL]         } [EOL]     } [EOL]     _longestCollisionList = maxColl; [EOL]     if (count != _size) { [EOL]         throw new Error("Internal error on SymbolTable.rehash(): had " + _size + " entries; now have " + count + "."); [EOL]     } [EOL] } <line_num>: 591,665
protected void reportTooManyCollisions(int maxLen) { [EOL]     throw new IllegalStateException("Longest collision chain in symbol table (of size " + _size + ") now exceeds maximum, " + maxLen + " -- suspect a DoS attack based on hash collisions"); [EOL] } <line_num>: 670,674
public String getSymbol() { [EOL]     return _symbol; [EOL] } <line_num>: 698,698
public Bucket getNext() { [EOL]     return _next; [EOL] } <line_num>: 699,699
public int length() { [EOL]     return _length; [EOL] } <line_num>: 700,700
public String find(char[] buf, int start, int len) { [EOL]     String sym = _symbol; [EOL]     Bucket b = _next; [EOL]     while (true) { [EOL]         if (sym.length() == len) { [EOL]             int i = 0; [EOL]             do { [EOL]                 if (sym.charAt(i) != buf[start + i]) { [EOL]                     break; [EOL]                 } [EOL]             } while (++i < len); [EOL]             if (i == len) { [EOL]                 return sym; [EOL]             } [EOL]         } [EOL]         if (b == null) { [EOL]             break; [EOL]         } [EOL]         sym = b.getSymbol(); [EOL]         b = b.getNext(); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 702,725
