public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out) { [EOL]     super(ctxt, features, codec); [EOL]     _outputStream = out; [EOL]     _bufferRecyclable = true; [EOL]     _outputBuffer = ctxt.allocWriteEncodingBuffer(); [EOL]     _outputEnd = _outputBuffer.length; [EOL]     _outputMaxContiguous = _outputEnd >> 3; [EOL]     _charBuffer = ctxt.allocConcatBuffer(); [EOL]     _charBufferLength = _charBuffer.length; [EOL]     if (isEnabled(Feature.ESCAPE_NON_ASCII)) { [EOL]         setHighestNonEscapedChar(127); [EOL]     } [EOL] } <line_num>: 105,126
public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable) { [EOL]     super(ctxt, features, codec); [EOL]     _outputStream = out; [EOL]     _bufferRecyclable = bufferRecyclable; [EOL]     _outputTail = outputOffset; [EOL]     _outputBuffer = outputBuffer; [EOL]     _outputEnd = _outputBuffer.length; [EOL]     _outputMaxContiguous = _outputEnd >> 3; [EOL]     _charBuffer = ctxt.allocConcatBuffer(); [EOL]     _charBufferLength = _charBuffer.length; [EOL] } <line_num>: 128,143
@Override [EOL] public Object getOutputTarget() { [EOL]     return _outputStream; [EOL] } <line_num>: 151,154
@Override [EOL] public final void writeFieldName(String name) throws IOException, JsonGenerationException { [EOL]     int status = _writeContext.writeFieldName(name); [EOL]     if (status == JsonWriteContext.STATUS_EXPECT_VALUE) { [EOL]         _reportError("Can not write a field name, expecting a value"); [EOL]     } [EOL]     if (_cfgPrettyPrinter != null) { [EOL]         _writePPFieldName(name, (status == JsonWriteContext.STATUS_OK_AFTER_COMMA)); [EOL]         return; [EOL]     } [EOL]     if (status == JsonWriteContext.STATUS_OK_AFTER_COMMA) { [EOL]         if (_outputTail >= _outputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         _outputBuffer[_outputTail++] = BYTE_COMMA; [EOL]     } [EOL]     _writeFieldName(name); [EOL] } <line_num>: 162,180
@Override [EOL] public final void writeFieldName(SerializableString name) throws IOException, JsonGenerationException { [EOL]     int status = _writeContext.writeFieldName(name.getValue()); [EOL]     if (status == JsonWriteContext.STATUS_EXPECT_VALUE) { [EOL]         _reportError("Can not write a field name, expecting a value"); [EOL]     } [EOL]     if (_cfgPrettyPrinter != null) { [EOL]         _writePPFieldName(name, (status == JsonWriteContext.STATUS_OK_AFTER_COMMA)); [EOL]         return; [EOL]     } [EOL]     if (status == JsonWriteContext.STATUS_OK_AFTER_COMMA) { [EOL]         if (_outputTail >= _outputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         _outputBuffer[_outputTail++] = BYTE_COMMA; [EOL]     } [EOL]     _writeFieldName(name); [EOL] } <line_num>: 182,202
@Override [EOL] public final void writeStartArray() throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("start an array"); [EOL]     _writeContext = _writeContext.createChildArrayContext(); [EOL]     if (_cfgPrettyPrinter != null) { [EOL]         _cfgPrettyPrinter.writeStartArray(this); [EOL]     } else { [EOL]         if (_outputTail >= _outputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         _outputBuffer[_outputTail++] = BYTE_LBRACKET; [EOL]     } [EOL] } <line_num>: 210,223
@Override [EOL] public final void writeEndArray() throws IOException, JsonGenerationException { [EOL]     if (!_writeContext.inArray()) { [EOL]         _reportError("Current context not an ARRAY but " + _writeContext.getTypeDesc()); [EOL]     } [EOL]     if (_cfgPrettyPrinter != null) { [EOL]         _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount()); [EOL]     } else { [EOL]         if (_outputTail >= _outputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         _outputBuffer[_outputTail++] = BYTE_RBRACKET; [EOL]     } [EOL]     _writeContext = _writeContext.getParent(); [EOL] } <line_num>: 225,240
@Override [EOL] public final void writeStartObject() throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("start an object"); [EOL]     _writeContext = _writeContext.createChildObjectContext(); [EOL]     if (_cfgPrettyPrinter != null) { [EOL]         _cfgPrettyPrinter.writeStartObject(this); [EOL]     } else { [EOL]         if (_outputTail >= _outputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         _outputBuffer[_outputTail++] = BYTE_LCURLY; [EOL]     } [EOL] } <line_num>: 242,255
@Override [EOL] public final void writeEndObject() throws IOException, JsonGenerationException { [EOL]     if (!_writeContext.inObject()) { [EOL]         _reportError("Current context not an object but " + _writeContext.getTypeDesc()); [EOL]     } [EOL]     if (_cfgPrettyPrinter != null) { [EOL]         _cfgPrettyPrinter.writeEndObject(this, _writeContext.getEntryCount()); [EOL]     } else { [EOL]         if (_outputTail >= _outputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         _outputBuffer[_outputTail++] = BYTE_RCURLY; [EOL]     } [EOL]     _writeContext = _writeContext.getParent(); [EOL] } <line_num>: 257,272
protected final void _writeFieldName(String name) throws IOException, JsonGenerationException { [EOL]     if (!isEnabled(Feature.QUOTE_FIELD_NAMES)) { [EOL]         _writeStringSegments(name); [EOL]         return; [EOL]     } [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     final int len = name.length(); [EOL]     if (len <= _charBufferLength) { [EOL]         name.getChars(0, len, _charBuffer, 0); [EOL]         if (len <= _outputMaxContiguous) { [EOL]             if ((_outputTail + len) > _outputEnd) { [EOL]                 _flushBuffer(); [EOL]             } [EOL]             _writeStringSegment(_charBuffer, 0, len); [EOL]         } else { [EOL]             _writeStringSegments(_charBuffer, 0, len); [EOL]         } [EOL]     } else { [EOL]         _writeStringSegments(name); [EOL]     } [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL] } <line_num>: 274,310
protected final void _writeFieldName(SerializableString name) throws IOException, JsonGenerationException { [EOL]     if (!isEnabled(Feature.QUOTE_FIELD_NAMES)) { [EOL]         int len = name.appendQuotedUTF8(_outputBuffer, _outputTail); [EOL]         if (len < 0) { [EOL]             _writeBytes(name.asQuotedUTF8()); [EOL]         } else { [EOL]             _outputTail += len; [EOL]         } [EOL]         return; [EOL]     } [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     int len = name.appendQuotedUTF8(_outputBuffer, _outputTail); [EOL]     if (len < 0) { [EOL]         _writeBytes(name.asQuotedUTF8()); [EOL]     } else { [EOL]         _outputTail += len; [EOL]     } [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL] } <line_num>: 312,338
protected final void _writePPFieldName(String name, boolean commaBefore) throws IOException, JsonGenerationException { [EOL]     if (commaBefore) { [EOL]         _cfgPrettyPrinter.writeObjectEntrySeparator(this); [EOL]     } else { [EOL]         _cfgPrettyPrinter.beforeObjectEntries(this); [EOL]     } [EOL]     if (isEnabled(Feature.QUOTE_FIELD_NAMES)) { [EOL]         if (_outputTail >= _outputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]         final int len = name.length(); [EOL]         if (len <= _charBufferLength) { [EOL]             name.getChars(0, len, _charBuffer, 0); [EOL]             if (len <= _outputMaxContiguous) { [EOL]                 if ((_outputTail + len) > _outputEnd) { [EOL]                     _flushBuffer(); [EOL]                 } [EOL]                 _writeStringSegment(_charBuffer, 0, len); [EOL]             } else { [EOL]                 _writeStringSegments(_charBuffer, 0, len); [EOL]             } [EOL]         } else { [EOL]             _writeStringSegments(name); [EOL]         } [EOL]         if (_outputTail >= _outputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     } else { [EOL]         _writeStringSegments(name); [EOL]     } [EOL] } <line_num>: 344,380
protected final void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException, JsonGenerationException { [EOL]     if (commaBefore) { [EOL]         _cfgPrettyPrinter.writeObjectEntrySeparator(this); [EOL]     } else { [EOL]         _cfgPrettyPrinter.beforeObjectEntries(this); [EOL]     } [EOL]     boolean addQuotes = isEnabled(Feature.QUOTE_FIELD_NAMES); [EOL]     if (addQuotes) { [EOL]         if (_outputTail >= _outputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     } [EOL]     _writeBytes(name.asQuotedUTF8()); [EOL]     if (addQuotes) { [EOL]         if (_outputTail >= _outputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     } [EOL] } <line_num>: 382,405
@Override [EOL] public void writeString(String text) throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("write text value"); [EOL]     if (text == null) { [EOL]         _writeNull(); [EOL]         return; [EOL]     } [EOL]     final int len = text.length(); [EOL]     if (len > _charBufferLength) { [EOL]         _writeLongString(text); [EOL]         return; [EOL]     } [EOL]     text.getChars(0, len, _charBuffer, 0); [EOL]     if (len > _outputMaxContiguous) { [EOL]         _writeLongString(_charBuffer, 0, len); [EOL]         return; [EOL]     } [EOL]     if ((_outputTail + len) >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     _writeStringSegment(_charBuffer, 0, len); [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL] } <line_num>: 413,447
private void _writeLongString(String text) throws IOException, JsonGenerationException { [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     _writeStringSegments(text); [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL] } <line_num>: 449,461
private void _writeLongString(char[] text, int offset, int len) throws IOException, JsonGenerationException { [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     _writeStringSegments(_charBuffer, 0, len); [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL] } <line_num>: 463,475
@Override [EOL] public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("write text value"); [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     if (len <= _outputMaxContiguous) { [EOL]         if ((_outputTail + len) > _outputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         _writeStringSegment(text, offset, len); [EOL]     } else { [EOL]         _writeStringSegments(text, offset, len); [EOL]     } [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL] } <line_num>: 477,500
@Override [EOL] public final void writeString(SerializableString text) throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("write text value"); [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     int len = text.appendQuotedUTF8(_outputBuffer, _outputTail); [EOL]     if (len < 0) { [EOL]         _writeBytes(text.asQuotedUTF8()); [EOL]     } else { [EOL]         _outputTail += len; [EOL]     } [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL] } <line_num>: 502,521
@Override [EOL] public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("write text value"); [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     _writeBytes(text, offset, length); [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL] } <line_num>: 523,537
@Override [EOL] public void writeUTF8String(byte[] text, int offset, int len) throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("write text value"); [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     if (len <= _outputMaxContiguous) { [EOL]         _writeUTF8Segment(text, offset, len); [EOL]     } else { [EOL]         _writeUTF8Segments(text, offset, len); [EOL]     } [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL] } <line_num>: 539,558
@Override [EOL] public void writeRaw(String text) throws IOException, JsonGenerationException { [EOL]     int start = 0; [EOL]     int len = text.length(); [EOL]     while (len > 0) { [EOL]         char[] buf = _charBuffer; [EOL]         final int blen = buf.length; [EOL]         final int len2 = (len < blen) ? len : blen; [EOL]         text.getChars(start, start + len2, buf, 0); [EOL]         writeRaw(buf, 0, len2); [EOL]         start += len2; [EOL]         len -= len2; [EOL]     } [EOL] } <line_num>: 566,581
@Override [EOL] public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException { [EOL]     while (len > 0) { [EOL]         char[] buf = _charBuffer; [EOL]         final int blen = buf.length; [EOL]         final int len2 = (len < blen) ? len : blen; [EOL]         text.getChars(offset, offset + len2, buf, 0); [EOL]         writeRaw(buf, 0, len2); [EOL]         offset += len2; [EOL]         len -= len2; [EOL]     } [EOL] } <line_num>: 583,596
@Override [EOL] public void writeRaw(SerializableString text) throws IOException, JsonGenerationException { [EOL]     byte[] raw = text.asUnquotedUTF8(); [EOL]     if (raw.length > 0) { [EOL]         _writeBytes(raw); [EOL]     } [EOL] } <line_num>: 598,605
@Override [EOL] public final void writeRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException { [EOL]     { [EOL]         int len3 = len + len + len; [EOL]         if ((_outputTail + len3) > _outputEnd) { [EOL]             if (_outputEnd < len3) { [EOL]                 _writeSegmentedRaw(cbuf, offset, len); [EOL]                 return; [EOL]             } [EOL]             _flushBuffer(); [EOL]         } [EOL]     } [EOL]     len += offset; [EOL]     main_loop: while (offset < len) { [EOL]         inner_loop: while (true) { [EOL]             int ch = (int) cbuf[offset]; [EOL]             if (ch > 0x7F) { [EOL]                 break inner_loop; [EOL]             } [EOL]             _outputBuffer[_outputTail++] = (byte) ch; [EOL]             if (++offset >= len) { [EOL]                 break main_loop; [EOL]             } [EOL]         } [EOL]         char ch = cbuf[offset++]; [EOL]         if (ch < 0x800) { [EOL]             _outputBuffer[_outputTail++] = (byte) (0xc0 | (ch >> 6)); [EOL]             _outputBuffer[_outputTail++] = (byte) (0x80 | (ch & 0x3f)); [EOL]         } else { [EOL]             _outputRawMultiByteChar(ch, cbuf, offset, len); [EOL]         } [EOL]     } [EOL] } <line_num>: 608,649
@Override [EOL] public void writeRaw(char ch) throws IOException, JsonGenerationException { [EOL]     if ((_outputTail + 3) >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     final byte[] bbuf = _outputBuffer; [EOL]     if (ch <= 0x7F) { [EOL]         bbuf[_outputTail++] = (byte) ch; [EOL]     } else if (ch < 0x800) { [EOL]         bbuf[_outputTail++] = (byte) (0xc0 | (ch >> 6)); [EOL]         bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f)); [EOL]     } else { [EOL]         _outputRawMultiByteChar(ch, null, 0, 0); [EOL]     } [EOL] } <line_num>: 651,667
private final void _writeSegmentedRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException { [EOL]     final int end = _outputEnd; [EOL]     final byte[] bbuf = _outputBuffer; [EOL]     main_loop: while (offset < len) { [EOL]         inner_loop: while (true) { [EOL]             int ch = (int) cbuf[offset]; [EOL]             if (ch >= 0x80) { [EOL]                 break inner_loop; [EOL]             } [EOL]             if (_outputTail >= end) { [EOL]                 _flushBuffer(); [EOL]             } [EOL]             bbuf[_outputTail++] = (byte) ch; [EOL]             if (++offset >= len) { [EOL]                 break main_loop; [EOL]             } [EOL]         } [EOL]         if ((_outputTail + 3) >= _outputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         char ch = cbuf[offset++]; [EOL]         if (ch < 0x800) { [EOL]             bbuf[_outputTail++] = (byte) (0xc0 | (ch >> 6)); [EOL]             bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f)); [EOL]         } else { [EOL]             _outputRawMultiByteChar(ch, cbuf, offset, len); [EOL]         } [EOL]     } [EOL] } <line_num>: 673,707
@Override [EOL] public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("write binary value"); [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     _writeBinary(b64variant, data, offset, offset + len); [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL] } <line_num>: 715,732
@Override [EOL] public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("write binary value"); [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     byte[] encodingBuffer = _ioContext.allocBase64Buffer(); [EOL]     int bytes; [EOL]     try { [EOL]         if (dataLength < 0) { [EOL]             bytes = _writeBinary(b64variant, data, encodingBuffer); [EOL]         } else { [EOL]             int missing = _writeBinary(b64variant, data, encodingBuffer, dataLength); [EOL]             if (missing > 0) { [EOL]                 _reportError("Too few bytes available: missing " + missing + " bytes (out of " + dataLength + ")"); [EOL]             } [EOL]             bytes = dataLength; [EOL]         } [EOL]     } finally { [EOL]         _ioContext.releaseBase64Buffer(encodingBuffer); [EOL]     } [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     return bytes; [EOL] } <line_num>: 734,766
@Override [EOL] public void writeNumber(short s) throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("write number"); [EOL]     if ((_outputTail + 6) >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     if (_cfgNumbersAsStrings) { [EOL]         _writeQuotedShort(s); [EOL]         return; [EOL]     } [EOL]     _outputTail = NumberOutput.outputInt(s, _outputBuffer, _outputTail); [EOL] } <line_num>: 774,788
private void _writeQuotedShort(short s) throws IOException { [EOL]     if ((_outputTail + 8) >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     _outputTail = NumberOutput.outputInt(s, _outputBuffer, _outputTail); [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL] } <line_num>: 790,797
@Override [EOL] public void writeNumber(int i) throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("write number"); [EOL]     if ((_outputTail + 11) >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     if (_cfgNumbersAsStrings) { [EOL]         _writeQuotedInt(i); [EOL]         return; [EOL]     } [EOL]     _outputTail = NumberOutput.outputInt(i, _outputBuffer, _outputTail); [EOL] } <line_num>: 799,813
private void _writeQuotedInt(int i) throws IOException { [EOL]     if ((_outputTail + 13) >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     _outputTail = NumberOutput.outputInt(i, _outputBuffer, _outputTail); [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL] } <line_num>: 815,822
@Override [EOL] public void writeNumber(long l) throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("write number"); [EOL]     if (_cfgNumbersAsStrings) { [EOL]         _writeQuotedLong(l); [EOL]         return; [EOL]     } [EOL]     if ((_outputTail + 21) >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputTail = NumberOutput.outputLong(l, _outputBuffer, _outputTail); [EOL] } <line_num>: 824,838
private void _writeQuotedLong(long l) throws IOException { [EOL]     if ((_outputTail + 23) >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     _outputTail = NumberOutput.outputLong(l, _outputBuffer, _outputTail); [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL] } <line_num>: 840,847
@Override [EOL] public void writeNumber(BigInteger value) throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("write number"); [EOL]     if (value == null) { [EOL]         _writeNull(); [EOL]     } else if (_cfgNumbersAsStrings) { [EOL]         _writeQuotedRaw(value); [EOL]     } else { [EOL]         writeRaw(value.toString()); [EOL]     } [EOL] } <line_num>: 849,861
@Override [EOL] public void writeNumber(double d) throws IOException, JsonGenerationException { [EOL]     if (_cfgNumbersAsStrings || (((Double.isNaN(d) || Double.isInfinite(d)) && isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)))) { [EOL]         writeString(String.valueOf(d)); [EOL]         return; [EOL]     } [EOL]     _verifyValueWrite("write number"); [EOL]     writeRaw(String.valueOf(d)); [EOL] } <line_num>: 864,878
@Override [EOL] public void writeNumber(float f) throws IOException, JsonGenerationException { [EOL]     if (_cfgNumbersAsStrings || (((Float.isNaN(f) || Float.isInfinite(f)) && isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)))) { [EOL]         writeString(String.valueOf(f)); [EOL]         return; [EOL]     } [EOL]     _verifyValueWrite("write number"); [EOL]     writeRaw(String.valueOf(f)); [EOL] } <line_num>: 880,894
@Override [EOL] public void writeNumber(BigDecimal value) throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("write number"); [EOL]     if (value == null) { [EOL]         _writeNull(); [EOL]     } else if (_cfgNumbersAsStrings) { [EOL]         _writeQuotedRaw(value); [EOL]     } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) { [EOL]         writeRaw(value.toPlainString()); [EOL]     } else { [EOL]         writeRaw(value.toString()); [EOL]     } [EOL] } <line_num>: 896,911
@Override [EOL] public void writeNumber(String encodedValue) throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("write number"); [EOL]     if (_cfgNumbersAsStrings) { [EOL]         _writeQuotedRaw(encodedValue); [EOL]     } else { [EOL]         writeRaw(encodedValue); [EOL]     } [EOL] } <line_num>: 913,923
private void _writeQuotedRaw(Object value) throws IOException { [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     writeRaw(value.toString()); [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL] } <line_num>: 925,936
@Override [EOL] public void writeBoolean(boolean state) throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("write boolean value"); [EOL]     if ((_outputTail + 5) >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     byte[] keyword = state ? TRUE_BYTES : FALSE_BYTES; [EOL]     int len = keyword.length; [EOL]     System.arraycopy(keyword, 0, _outputBuffer, _outputTail, len); [EOL]     _outputTail += len; [EOL] } <line_num>: 938,950
@Override [EOL] public void writeNull() throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("write null value"); [EOL]     _writeNull(); [EOL] } <line_num>: 952,958
@Override [EOL] protected final void _verifyValueWrite(String typeMsg) throws IOException, JsonGenerationException { [EOL]     int status = _writeContext.writeValue(); [EOL]     if (status == JsonWriteContext.STATUS_EXPECT_NAME) { [EOL]         _reportError("Can not " + typeMsg + ", expecting field name"); [EOL]     } [EOL]     if (_cfgPrettyPrinter == null) { [EOL]         byte b; [EOL]         switch(status) { [EOL]             case JsonWriteContext.STATUS_OK_AFTER_COMMA: [EOL]                 b = BYTE_COMMA; [EOL]                 break; [EOL]             case JsonWriteContext.STATUS_OK_AFTER_COLON: [EOL]                 b = BYTE_COLON; [EOL]                 break; [EOL]             case JsonWriteContext.STATUS_OK_AFTER_SPACE: [EOL]                 if (_rootValueSeparator != null) { [EOL]                     byte[] raw = _rootValueSeparator.asUnquotedUTF8(); [EOL]                     if (raw.length > 0) { [EOL]                         _writeBytes(raw); [EOL]                     } [EOL]                 } [EOL]                 return; [EOL]             case JsonWriteContext.STATUS_OK_AS_IS: [EOL]             default: [EOL]                 return; [EOL]         } [EOL]         if (_outputTail >= _outputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         _outputBuffer[_outputTail] = b; [EOL]         ++_outputTail; [EOL]         return; [EOL]     } [EOL]     _verifyPrettyValueWrite(typeMsg, status); [EOL] } <line_num>: 966,1004
protected final void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException, JsonGenerationException { [EOL]     switch(status) { [EOL]         case JsonWriteContext.STATUS_OK_AFTER_COMMA: [EOL]             _cfgPrettyPrinter.writeArrayValueSeparator(this); [EOL]             break; [EOL]         case JsonWriteContext.STATUS_OK_AFTER_COLON: [EOL]             _cfgPrettyPrinter.writeObjectFieldValueSeparator(this); [EOL]             break; [EOL]         case JsonWriteContext.STATUS_OK_AFTER_SPACE: [EOL]             _cfgPrettyPrinter.writeRootValueSeparator(this); [EOL]             break; [EOL]         case JsonWriteContext.STATUS_OK_AS_IS: [EOL]             if (_writeContext.inArray()) { [EOL]                 _cfgPrettyPrinter.beforeArrayValues(this); [EOL]             } else if (_writeContext.inObject()) { [EOL]                 _cfgPrettyPrinter.beforeObjectEntries(this); [EOL]             } [EOL]             break; [EOL]         default: [EOL]             _throwInternal(); [EOL]             break; [EOL]     } [EOL] } <line_num>: 1006,1032
@Override [EOL] public final void flush() throws IOException { [EOL]     _flushBuffer(); [EOL]     if (_outputStream != null) { [EOL]         if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) { [EOL]             _outputStream.flush(); [EOL]         } [EOL]     } [EOL] } <line_num>: 1040,1050
@Override [EOL] public void close() throws IOException { [EOL]     super.close(); [EOL]     if (_outputBuffer != null && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) { [EOL]         while (true) { [EOL]             JsonStreamContext ctxt = getOutputContext(); [EOL]             if (ctxt.inArray()) { [EOL]                 writeEndArray(); [EOL]             } else if (ctxt.inObject()) { [EOL]                 writeEndObject(); [EOL]             } else { [EOL]                 break; [EOL]             } [EOL]         } [EOL]     } [EOL]     _flushBuffer(); [EOL]     if (_outputStream != null) { [EOL]         if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) { [EOL]             _outputStream.close(); [EOL]         } else if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) { [EOL]             _outputStream.flush(); [EOL]         } [EOL]     } [EOL]     _releaseBuffers(); [EOL] } <line_num>: 1052,1093
@Override [EOL] protected void _releaseBuffers() { [EOL]     byte[] buf = _outputBuffer; [EOL]     if (buf != null && _bufferRecyclable) { [EOL]         _outputBuffer = null; [EOL]         _ioContext.releaseWriteEncodingBuffer(buf); [EOL]     } [EOL]     char[] cbuf = _charBuffer; [EOL]     if (cbuf != null) { [EOL]         _charBuffer = null; [EOL]         _ioContext.releaseConcatBuffer(cbuf); [EOL]     } [EOL] } <line_num>: 1095,1108
private final void _writeBytes(byte[] bytes) throws IOException { [EOL]     final int len = bytes.length; [EOL]     if ((_outputTail + len) > _outputEnd) { [EOL]         _flushBuffer(); [EOL]         if (len > MAX_BYTES_TO_BUFFER) { [EOL]             _outputStream.write(bytes, 0, len); [EOL]             return; [EOL]         } [EOL]     } [EOL]     System.arraycopy(bytes, 0, _outputBuffer, _outputTail, len); [EOL]     _outputTail += len; [EOL] } <line_num>: 1116,1129
private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException { [EOL]     if ((_outputTail + len) > _outputEnd) { [EOL]         _flushBuffer(); [EOL]         if (len > MAX_BYTES_TO_BUFFER) { [EOL]             _outputStream.write(bytes, offset, len); [EOL]             return; [EOL]         } [EOL]     } [EOL]     System.arraycopy(bytes, offset, _outputBuffer, _outputTail, len); [EOL]     _outputTail += len; [EOL] } <line_num>: 1131,1143
private final void _writeStringSegments(String text) throws IOException, JsonGenerationException { [EOL]     int left = text.length(); [EOL]     int offset = 0; [EOL]     final char[] cbuf = _charBuffer; [EOL]     while (left > 0) { [EOL]         int len = Math.min(_outputMaxContiguous, left); [EOL]         text.getChars(offset, offset + len, cbuf, 0); [EOL]         if ((_outputTail + len) > _outputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         _writeStringSegment(cbuf, 0, len); [EOL]         offset += len; [EOL]         left -= len; [EOL]     } [EOL] } <line_num>: 1158,1175
private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws IOException, JsonGenerationException { [EOL]     do { [EOL]         int len = Math.min(_outputMaxContiguous, totalLen); [EOL]         if ((_outputTail + len) > _outputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         _writeStringSegment(cbuf, offset, len); [EOL]         offset += len; [EOL]         totalLen -= len; [EOL]     } while (totalLen > 0); [EOL] } <line_num>: 1183,1195
private final void _writeStringSegment(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException { [EOL]     len += offset; [EOL]     int outputPtr = _outputTail; [EOL]     final byte[] outputBuffer = _outputBuffer; [EOL]     final int[] escCodes = _outputEscapes; [EOL]     while (offset < len) { [EOL]         int ch = cbuf[offset]; [EOL]         if (ch > 0x7F || escCodes[ch] != 0) { [EOL]             break; [EOL]         } [EOL]         outputBuffer[outputPtr++] = (byte) ch; [EOL]         ++offset; [EOL]     } [EOL]     _outputTail = outputPtr; [EOL]     if (offset < len) { [EOL]         if (_characterEscapes != null) { [EOL]             _writeCustomStringSegment2(cbuf, offset, len); [EOL]         } else if (_maximumNonEscapedChar == 0) { [EOL]             _writeStringSegment2(cbuf, offset, len); [EOL]         } else { [EOL]             _writeStringSegmentASCII2(cbuf, offset, len); [EOL]         } [EOL]     } [EOL] } <line_num>: 1211,1245
private final void _writeStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException { [EOL]     if ((_outputTail + 6 * (end - offset)) > _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     int outputPtr = _outputTail; [EOL]     final byte[] outputBuffer = _outputBuffer; [EOL]     final int[] escCodes = _outputEscapes; [EOL]     while (offset < end) { [EOL]         int ch = cbuf[offset++]; [EOL]         if (ch <= 0x7F) { [EOL]             if (escCodes[ch] == 0) { [EOL]                 outputBuffer[outputPtr++] = (byte) ch; [EOL]                 continue; [EOL]             } [EOL]             int escape = escCodes[ch]; [EOL]             if (escape > 0) { [EOL]                 outputBuffer[outputPtr++] = BYTE_BACKSLASH; [EOL]                 outputBuffer[outputPtr++] = (byte) escape; [EOL]             } else { [EOL]                 outputPtr = _writeGenericEscape(ch, outputPtr); [EOL]             } [EOL]             continue; [EOL]         } [EOL]         if (ch <= 0x7FF) { [EOL]             outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6)); [EOL]             outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f)); [EOL]         } else { [EOL]             outputPtr = _outputMultiByteChar(ch, outputPtr); [EOL]         } [EOL]     } [EOL]     _outputTail = outputPtr; [EOL] } <line_num>: 1251,1289
private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException { [EOL]     if ((_outputTail + 6 * (end - offset)) > _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     int outputPtr = _outputTail; [EOL]     final byte[] outputBuffer = _outputBuffer; [EOL]     final int[] escCodes = _outputEscapes; [EOL]     final int maxUnescaped = _maximumNonEscapedChar; [EOL]     while (offset < end) { [EOL]         int ch = cbuf[offset++]; [EOL]         if (ch <= 0x7F) { [EOL]             if (escCodes[ch] == 0) { [EOL]                 outputBuffer[outputPtr++] = (byte) ch; [EOL]                 continue; [EOL]             } [EOL]             int escape = escCodes[ch]; [EOL]             if (escape > 0) { [EOL]                 outputBuffer[outputPtr++] = BYTE_BACKSLASH; [EOL]                 outputBuffer[outputPtr++] = (byte) escape; [EOL]             } else { [EOL]                 outputPtr = _writeGenericEscape(ch, outputPtr); [EOL]             } [EOL]             continue; [EOL]         } [EOL]         if (ch > maxUnescaped) { [EOL]             outputPtr = _writeGenericEscape(ch, outputPtr); [EOL]             continue; [EOL]         } [EOL]         if (ch <= 0x7FF) { [EOL]             outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6)); [EOL]             outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f)); [EOL]         } else { [EOL]             outputPtr = _outputMultiByteChar(ch, outputPtr); [EOL]         } [EOL]     } [EOL]     _outputTail = outputPtr; [EOL] } <line_num>: 1302,1345
private void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException { [EOL]     if ((_outputTail + 6 * (end - offset)) > _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     int outputPtr = _outputTail; [EOL]     final byte[] outputBuffer = _outputBuffer; [EOL]     final int[] escCodes = _outputEscapes; [EOL]     final int maxUnescaped = (_maximumNonEscapedChar <= 0) ? 0xFFFF : _maximumNonEscapedChar; [EOL]     final CharacterEscapes customEscapes = _characterEscapes; [EOL]     while (offset < end) { [EOL]         int ch = cbuf[offset++]; [EOL]         if (ch <= 0x7F) { [EOL]             if (escCodes[ch] == 0) { [EOL]                 outputBuffer[outputPtr++] = (byte) ch; [EOL]                 continue; [EOL]             } [EOL]             int escape = escCodes[ch]; [EOL]             if (escape > 0) { [EOL]                 outputBuffer[outputPtr++] = BYTE_BACKSLASH; [EOL]                 outputBuffer[outputPtr++] = (byte) escape; [EOL]             } else if (escape == CharacterEscapes.ESCAPE_CUSTOM) { [EOL]                 SerializableString esc = customEscapes.getEscapeSequence(ch); [EOL]                 if (esc == null) { [EOL]                     _reportError("Invalid custom escape definitions; custom escape not found for character code 0x" + Integer.toHexString(ch) + ", although was supposed to have one"); [EOL]                 } [EOL]                 outputPtr = _writeCustomEscape(outputBuffer, outputPtr, esc, end - offset); [EOL]             } else { [EOL]                 outputPtr = _writeGenericEscape(ch, outputPtr); [EOL]             } [EOL]             continue; [EOL]         } [EOL]         if (ch > maxUnescaped) { [EOL]             outputPtr = _writeGenericEscape(ch, outputPtr); [EOL]             continue; [EOL]         } [EOL]         SerializableString esc = customEscapes.getEscapeSequence(ch); [EOL]         if (esc != null) { [EOL]             outputPtr = _writeCustomEscape(outputBuffer, outputPtr, esc, end - offset); [EOL]             continue; [EOL]         } [EOL]         if (ch <= 0x7FF) { [EOL]             outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6)); [EOL]             outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f)); [EOL]         } else { [EOL]             outputPtr = _outputMultiByteChar(ch, outputPtr); [EOL]         } [EOL]     } [EOL]     _outputTail = outputPtr; [EOL] } <line_num>: 1358,1414
private int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars) throws IOException, JsonGenerationException { [EOL]     byte[] raw = esc.asUnquotedUTF8(); [EOL]     int len = raw.length; [EOL]     if (len > 6) { [EOL]         return _handleLongCustomEscape(outputBuffer, outputPtr, _outputEnd, raw, remainingChars); [EOL]     } [EOL]     System.arraycopy(raw, 0, outputBuffer, outputPtr, len); [EOL]     return (outputPtr + len); [EOL] } <line_num>: 1416,1427
private int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw, int remainingChars) throws IOException, JsonGenerationException { [EOL]     int len = raw.length; [EOL]     if ((outputPtr + len) > outputEnd) { [EOL]         _outputTail = outputPtr; [EOL]         _flushBuffer(); [EOL]         outputPtr = _outputTail; [EOL]         if (len > outputBuffer.length) { [EOL]             _outputStream.write(raw, 0, len); [EOL]             return outputPtr; [EOL]         } [EOL]         System.arraycopy(raw, 0, outputBuffer, outputPtr, len); [EOL]         outputPtr += len; [EOL]     } [EOL]     if ((outputPtr + 6 * remainingChars) > outputEnd) { [EOL]         _flushBuffer(); [EOL]         return _outputTail; [EOL]     } [EOL]     return outputPtr; [EOL] } <line_num>: 1429,1451
private void _writeUTF8Segments(byte[] utf8, int offset, int totalLen) throws IOException, JsonGenerationException { [EOL]     do { [EOL]         int len = Math.min(_outputMaxContiguous, totalLen); [EOL]         _writeUTF8Segment(utf8, offset, len); [EOL]         offset += len; [EOL]         totalLen -= len; [EOL]     } while (totalLen > 0); [EOL] } <line_num>: 1464,1473
private void _writeUTF8Segment(byte[] utf8, final int offset, final int len) throws IOException, JsonGenerationException { [EOL]     final int[] escCodes = _outputEscapes; [EOL]     for (int ptr = offset, end = offset + len; ptr < end; ) { [EOL]         int ch = utf8[ptr++]; [EOL]         if ((ch >= 0) && escCodes[ch] != 0) { [EOL]             _writeUTF8Segment2(utf8, offset, len); [EOL]             return; [EOL]         } [EOL]     } [EOL]     if ((_outputTail + len) > _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     System.arraycopy(utf8, offset, _outputBuffer, _outputTail, len); [EOL]     _outputTail += len; [EOL] } <line_num>: 1475,1496
private void _writeUTF8Segment2(final byte[] utf8, int offset, int len) throws IOException, JsonGenerationException { [EOL]     int outputPtr = _outputTail; [EOL]     if ((outputPtr + (len * 6)) > _outputEnd) { [EOL]         _flushBuffer(); [EOL]         outputPtr = _outputTail; [EOL]     } [EOL]     final byte[] outputBuffer = _outputBuffer; [EOL]     final int[] escCodes = _outputEscapes; [EOL]     len += offset; [EOL]     while (offset < len) { [EOL]         byte b = utf8[offset++]; [EOL]         int ch = b; [EOL]         if (ch < 0 || escCodes[ch] == 0) { [EOL]             outputBuffer[outputPtr++] = b; [EOL]             continue; [EOL]         } [EOL]         int escape = escCodes[ch]; [EOL]         if (escape > 0) { [EOL]             outputBuffer[outputPtr++] = BYTE_BACKSLASH; [EOL]             outputBuffer[outputPtr++] = (byte) escape; [EOL]         } else { [EOL]             outputPtr = _writeGenericEscape(ch, outputPtr); [EOL]         } [EOL]     } [EOL]     _outputTail = outputPtr; [EOL] } <line_num>: 1498,1530
protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd) throws IOException, JsonGenerationException { [EOL]     int safeInputEnd = inputEnd - 3; [EOL]     int safeOutputEnd = _outputEnd - 6; [EOL]     int chunksBeforeLF = b64variant.getMaxLineLength() >> 2; [EOL]     while (inputPtr <= safeInputEnd) { [EOL]         if (_outputTail > safeOutputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         int b24 = ((int) input[inputPtr++]) << 8; [EOL]         b24 |= ((int) input[inputPtr++]) & 0xFF; [EOL]         b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF); [EOL]         _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail); [EOL]         if (--chunksBeforeLF <= 0) { [EOL]             _outputBuffer[_outputTail++] = '\\'; [EOL]             _outputBuffer[_outputTail++] = 'n'; [EOL]             chunksBeforeLF = b64variant.getMaxLineLength() >> 2; [EOL]         } [EOL]     } [EOL]     int inputLeft = inputEnd - inputPtr; [EOL]     if (inputLeft > 0) { [EOL]         if (_outputTail > safeOutputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         int b24 = ((int) input[inputPtr++]) << 16; [EOL]         if (inputLeft == 2) { [EOL]             b24 |= (((int) input[inputPtr++]) & 0xFF) << 8; [EOL]         } [EOL]         _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail); [EOL]     } [EOL] } <line_num>: 1538,1578
protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft) throws IOException, JsonGenerationException { [EOL]     int inputPtr = 0; [EOL]     int inputEnd = 0; [EOL]     int lastFullOffset = -3; [EOL]     int safeOutputEnd = _outputEnd - 6; [EOL]     int chunksBeforeLF = b64variant.getMaxLineLength() >> 2; [EOL]     while (bytesLeft > 2) { [EOL]         if (inputPtr > lastFullOffset) { [EOL]             inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft); [EOL]             inputPtr = 0; [EOL]             if (inputEnd < 3) { [EOL]                 break; [EOL]             } [EOL]             lastFullOffset = inputEnd - 3; [EOL]         } [EOL]         if (_outputTail > safeOutputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         int b24 = ((int) readBuffer[inputPtr++]) << 8; [EOL]         b24 |= ((int) readBuffer[inputPtr++]) & 0xFF; [EOL]         b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF); [EOL]         bytesLeft -= 3; [EOL]         _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail); [EOL]         if (--chunksBeforeLF <= 0) { [EOL]             _outputBuffer[_outputTail++] = '\\'; [EOL]             _outputBuffer[_outputTail++] = 'n'; [EOL]             chunksBeforeLF = b64variant.getMaxLineLength() >> 2; [EOL]         } [EOL]     } [EOL]     if (bytesLeft > 0) { [EOL]         inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft); [EOL]         inputPtr = 0; [EOL]         if (inputEnd > 0) { [EOL]             if (_outputTail > safeOutputEnd) { [EOL]                 _flushBuffer(); [EOL]             } [EOL]             int b24 = ((int) readBuffer[inputPtr++]) << 16; [EOL]             int amount; [EOL]             if (inputPtr < inputEnd) { [EOL]                 b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8; [EOL]                 amount = 2; [EOL]             } else { [EOL]                 amount = 1; [EOL]             } [EOL]             _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail); [EOL]             bytesLeft -= amount; [EOL]         } [EOL]     } [EOL]     return bytesLeft; [EOL] } <line_num>: 1581,1638
protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer) throws IOException, JsonGenerationException { [EOL]     int inputPtr = 0; [EOL]     int inputEnd = 0; [EOL]     int lastFullOffset = -3; [EOL]     int bytesDone = 0; [EOL]     int safeOutputEnd = _outputEnd - 6; [EOL]     int chunksBeforeLF = b64variant.getMaxLineLength() >> 2; [EOL]     while (true) { [EOL]         if (inputPtr > lastFullOffset) { [EOL]             inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, readBuffer.length); [EOL]             inputPtr = 0; [EOL]             if (inputEnd < 3) { [EOL]                 break; [EOL]             } [EOL]             lastFullOffset = inputEnd - 3; [EOL]         } [EOL]         if (_outputTail > safeOutputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         int b24 = ((int) readBuffer[inputPtr++]) << 8; [EOL]         b24 |= ((int) readBuffer[inputPtr++]) & 0xFF; [EOL]         b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF); [EOL]         bytesDone += 3; [EOL]         _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail); [EOL]         if (--chunksBeforeLF <= 0) { [EOL]             _outputBuffer[_outputTail++] = '\\'; [EOL]             _outputBuffer[_outputTail++] = 'n'; [EOL]             chunksBeforeLF = b64variant.getMaxLineLength() >> 2; [EOL]         } [EOL]     } [EOL]     if (inputPtr < inputEnd) { [EOL]         if (_outputTail > safeOutputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         int b24 = ((int) readBuffer[inputPtr++]) << 16; [EOL]         int amount = 1; [EOL]         if (inputPtr < inputEnd) { [EOL]             b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8; [EOL]             amount = 2; [EOL]         } [EOL]         bytesDone += amount; [EOL]         _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail); [EOL]     } [EOL]     return bytesDone; [EOL] } <line_num>: 1641,1695
private int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException { [EOL]     int i = 0; [EOL]     while (inputPtr < inputEnd) { [EOL]         readBuffer[i++] = readBuffer[inputPtr++]; [EOL]     } [EOL]     inputPtr = 0; [EOL]     inputEnd = i; [EOL]     maxRead = Math.min(maxRead, readBuffer.length); [EOL]     do { [EOL]         int length = maxRead - inputEnd; [EOL]         if (length == 0) { [EOL]             break; [EOL]         } [EOL]         int count = in.read(readBuffer, inputEnd, length); [EOL]         if (count < 0) { [EOL]             return inputEnd; [EOL]         } [EOL]         inputEnd += count; [EOL]     } while (inputEnd < 3); [EOL]     return inputEnd; [EOL] } <line_num>: 1697,1722
private int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen) throws IOException { [EOL]     if (ch >= SURR1_FIRST) { [EOL]         if (ch <= SURR2_LAST) { [EOL]             if (inputOffset >= inputLen) { [EOL]                 _reportError("Split surrogate on writeRaw() input (last character)"); [EOL]             } [EOL]             _outputSurrogates(ch, cbuf[inputOffset]); [EOL]             return (inputOffset + 1); [EOL]         } [EOL]     } [EOL]     final byte[] bbuf = _outputBuffer; [EOL]     bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12)); [EOL]     bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f)); [EOL]     bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f)); [EOL]     return inputOffset; [EOL] } <line_num>: 1735,1754
protected final void _outputSurrogates(int surr1, int surr2) throws IOException { [EOL]     int c = _decodeSurrogate(surr1, surr2); [EOL]     if ((_outputTail + 4) > _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     final byte[] bbuf = _outputBuffer; [EOL]     bbuf[_outputTail++] = (byte) (0xf0 | (c >> 18)); [EOL]     bbuf[_outputTail++] = (byte) (0x80 | ((c >> 12) & 0x3f)); [EOL]     bbuf[_outputTail++] = (byte) (0x80 | ((c >> 6) & 0x3f)); [EOL]     bbuf[_outputTail++] = (byte) (0x80 | (c & 0x3f)); [EOL] } <line_num>: 1756,1768
private int _outputMultiByteChar(int ch, int outputPtr) throws IOException { [EOL]     byte[] bbuf = _outputBuffer; [EOL]     if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { [EOL]         bbuf[outputPtr++] = BYTE_BACKSLASH; [EOL]         bbuf[outputPtr++] = BYTE_u; [EOL]         bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF]; [EOL]         bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF]; [EOL]         bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF]; [EOL]         bbuf[outputPtr++] = HEX_CHARS[ch & 0xF]; [EOL]     } else { [EOL]         bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12)); [EOL]         bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) & 0x3f)); [EOL]         bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f)); [EOL]     } [EOL]     return outputPtr; [EOL] } <line_num>: 1779,1797
protected final int _decodeSurrogate(int surr1, int surr2) throws IOException { [EOL]     if (surr2 < SURR2_FIRST || surr2 > SURR2_LAST) { [EOL]         String msg = "Incomplete surrogate pair: first char 0x" + Integer.toHexString(surr1) + ", second 0x" + Integer.toHexString(surr2); [EOL]         _reportError(msg); [EOL]     } [EOL]     int c = 0x10000 + ((surr1 - SURR1_FIRST) << 10) + (surr2 - SURR2_FIRST); [EOL]     return c; [EOL] } <line_num>: 1799,1808
private void _writeNull() throws IOException { [EOL]     if ((_outputTail + 4) >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     System.arraycopy(NULL_BYTES, 0, _outputBuffer, _outputTail, 4); [EOL]     _outputTail += 4; [EOL] } <line_num>: 1810,1817
private int _writeGenericEscape(int charToEscape, int outputPtr) throws IOException { [EOL]     final byte[] bbuf = _outputBuffer; [EOL]     bbuf[outputPtr++] = BYTE_BACKSLASH; [EOL]     bbuf[outputPtr++] = BYTE_u; [EOL]     if (charToEscape > 0xFF) { [EOL]         int hi = (charToEscape >> 8) & 0xFF; [EOL]         bbuf[outputPtr++] = HEX_CHARS[hi >> 4]; [EOL]         bbuf[outputPtr++] = HEX_CHARS[hi & 0xF]; [EOL]         charToEscape &= 0xFF; [EOL]     } else { [EOL]         bbuf[outputPtr++] = BYTE_0; [EOL]         bbuf[outputPtr++] = BYTE_0; [EOL]     } [EOL]     bbuf[outputPtr++] = HEX_CHARS[charToEscape >> 4]; [EOL]     bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF]; [EOL]     return outputPtr; [EOL] } <line_num>: 1824,1843
protected final void _flushBuffer() throws IOException { [EOL]     int len = _outputTail; [EOL]     if (len > 0) { [EOL]         _outputTail = 0; [EOL]         _outputStream.write(_outputBuffer, 0, len); [EOL]     } [EOL] } <line_num>: 1845,1852
