protected VersionUtil() { [EOL]     Version v = null; [EOL]     try { [EOL]         v = VersionUtil.versionFor(getClass()); [EOL]     } catch (Exception e) { [EOL]         System.err.println("ERROR: Failed to load Version information for bundle (via " + getClass().getName() + ")."); [EOL]     } [EOL]     if (v == null) { [EOL]         v = Version.unknownVersion(); [EOL]     } [EOL]     _version = v; [EOL] } <line_num>: 44,59
public Version version() { [EOL]     return _version; [EOL] } <line_num>: 61,61
public static Version versionFor(Class<?> cls) { [EOL]     Version packageVersion = packageVersionFor(cls); [EOL]     if (packageVersion != null) { [EOL]         return packageVersion; [EOL]     } [EOL]     final InputStream in = cls.getResourceAsStream(VERSION_FILE); [EOL]     if (in == null) [EOL]         return Version.unknownVersion(); [EOL]     try { [EOL]         InputStreamReader reader = new InputStreamReader(in, "UTF-8"); [EOL]         try { [EOL]             return doReadVersion(reader); [EOL]         } finally { [EOL]             try { [EOL]                 reader.close(); [EOL]             } catch (IOException ignored) { [EOL]             } [EOL]         } [EOL]     } catch (UnsupportedEncodingException e) { [EOL]         return Version.unknownVersion(); [EOL]     } finally { [EOL]         try { [EOL]             in.close(); [EOL]         } catch (IOException e) { [EOL]             throw new RuntimeException(e); [EOL]         } [EOL]     } [EOL] } <line_num>: 82,113
public static Version packageVersionFor(Class<?> cls) { [EOL]     Class<?> versionInfoClass = null; [EOL]     try { [EOL]         Package p = cls.getPackage(); [EOL]         String versionInfoClassName = new StringBuilder(p.getName()).append(".").append(PACKAGE_VERSION_CLASS_NAME).toString(); [EOL]         versionInfoClass = Class.forName(versionInfoClassName, true, cls.getClassLoader()); [EOL]     } catch (Exception e) { [EOL]         return null; [EOL]     } [EOL]     if (versionInfoClass == null) { [EOL]         return null; [EOL]     } [EOL]     Object v; [EOL]     try { [EOL]         v = versionInfoClass.newInstance(); [EOL]     } catch (RuntimeException e) { [EOL]         throw e; [EOL]     } catch (Exception e) { [EOL]         throw new IllegalArgumentException("Failed to instantiate " + versionInfoClass.getName() + " to find version information, problem: " + e.getMessage(), e); [EOL]     } [EOL]     if (!(v instanceof Versioned)) { [EOL]         throw new IllegalArgumentException("Bad version class " + versionInfoClass.getName() + ": does not implement " + Versioned.class.getName()); [EOL]     } [EOL]     return ((Versioned) v).version(); [EOL] } <line_num>: 122,154
private static Version doReadVersion(final Reader reader) { [EOL]     String version = null, group = null, artifact = null; [EOL]     final BufferedReader br = new BufferedReader(reader); [EOL]     try { [EOL]         version = br.readLine(); [EOL]         if (version != null) { [EOL]             group = br.readLine(); [EOL]             if (group != null) [EOL]                 artifact = br.readLine(); [EOL]         } [EOL]     } catch (IOException ignored) { [EOL]     } finally { [EOL]         try { [EOL]             br.close(); [EOL]         } catch (IOException ignored) { [EOL]         } [EOL]     } [EOL]     if (group != null) [EOL]         group = group.trim(); [EOL]     if (artifact != null) [EOL]         artifact = artifact.trim(); [EOL]     return parseVersion(version, group, artifact); [EOL] } <line_num>: 156,182
public static Version mavenVersionFor(ClassLoader classLoader, String groupId, String artifactId) { [EOL]     InputStream pomPoperties = classLoader.getResourceAsStream("META-INF/maven/" + groupId.replaceAll("\\.", "/") + "/" + artifactId + "/pom.properties"); [EOL]     if (pomPoperties != null) { [EOL]         try { [EOL]             Properties props = new Properties(); [EOL]             props.load(pomPoperties); [EOL]             String versionStr = props.getProperty("version"); [EOL]             String pomPropertiesArtifactId = props.getProperty("artifactId"); [EOL]             String pomPropertiesGroupId = props.getProperty("groupId"); [EOL]             return parseVersion(versionStr, pomPropertiesGroupId, pomPropertiesArtifactId); [EOL]         } catch (IOException e) { [EOL]         } finally { [EOL]             try { [EOL]                 pomPoperties.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]     } [EOL]     return Version.unknownVersion(); [EOL] } <line_num>: 195,217
@Deprecated [EOL] public static Version parseVersion(String versionStr) { [EOL]     return parseVersion(versionStr, null, null); [EOL] } <line_num>: 224,227
public static Version parseVersion(String versionStr, String groupId, String artifactId) { [EOL]     if (versionStr == null) { [EOL]         return null; [EOL]     } [EOL]     versionStr = versionStr.trim(); [EOL]     if (versionStr.length() == 0) { [EOL]         return null; [EOL]     } [EOL]     String[] parts = VERSION_SEPARATOR.split(versionStr); [EOL]     int major = parseVersionPart(parts[0]); [EOL]     int minor = (parts.length > 1) ? parseVersionPart(parts[1]) : 0; [EOL]     int patch = (parts.length > 2) ? parseVersionPart(parts[2]) : 0; [EOL]     String snapshot = (parts.length > 3) ? parts[3] : null; [EOL]     return new Version(major, minor, patch, snapshot, groupId, artifactId); [EOL] } <line_num>: 229,246
protected static int parseVersionPart(String partStr) { [EOL]     partStr = partStr.toString(); [EOL]     int len = partStr.length(); [EOL]     int number = 0; [EOL]     for (int i = 0; i < len; ++i) { [EOL]         char c = partStr.charAt(i); [EOL]         if (c > '9' || c < '0') [EOL]             break; [EOL]         number = (number * 10) + (c - '0'); [EOL]     } [EOL]     return number; [EOL] } <line_num>: 248,259
public final static void throwInternal() { [EOL]     throw new RuntimeException("Internal error: this code path should never get executed"); [EOL] } <line_num>: 267,269
