public static int outputInt(int value, char[] buffer, int offset) { [EOL]     if (value < 0) { [EOL]         if (value == Integer.MIN_VALUE) { [EOL]             return outputLong((long) value, buffer, offset); [EOL]         } [EOL]         buffer[offset++] = '-'; [EOL]         value = -value; [EOL]     } [EOL]     if (value < MILLION) { [EOL]         if (value < 1000) { [EOL]             if (value < 10) { [EOL]                 buffer[offset++] = (char) ('0' + value); [EOL]             } else { [EOL]                 offset = outputLeadingTriplet(value, buffer, offset); [EOL]             } [EOL]         } else { [EOL]             int thousands = value / 1000; [EOL]             value -= (thousands * 1000); [EOL]             offset = outputLeadingTriplet(thousands, buffer, offset); [EOL]             offset = outputFullTriplet(value, buffer, offset); [EOL]         } [EOL]         return offset; [EOL]     } [EOL]     boolean hasBillions = (value >= BILLION); [EOL]     if (hasBillions) { [EOL]         value -= BILLION; [EOL]         if (value >= BILLION) { [EOL]             value -= BILLION; [EOL]             buffer[offset++] = '2'; [EOL]         } else { [EOL]             buffer[offset++] = '1'; [EOL]         } [EOL]     } [EOL]     int newValue = value / 1000; [EOL]     int ones = (value - (newValue * 1000)); [EOL]     value = newValue; [EOL]     newValue /= 1000; [EOL]     int thousands = (value - (newValue * 1000)); [EOL]     if (hasBillions) { [EOL]         offset = outputFullTriplet(newValue, buffer, offset); [EOL]     } else { [EOL]         offset = outputLeadingTriplet(newValue, buffer, offset); [EOL]     } [EOL]     offset = outputFullTriplet(thousands, buffer, offset); [EOL]     offset = outputFullTriplet(ones, buffer, offset); [EOL]     return offset; [EOL] } <line_num>: 68,127
public static int outputInt(int value, byte[] buffer, int offset) { [EOL]     if (value < 0) { [EOL]         if (value == Integer.MIN_VALUE) { [EOL]             return outputLong((long) value, buffer, offset); [EOL]         } [EOL]         buffer[offset++] = '-'; [EOL]         value = -value; [EOL]     } [EOL]     if (value < MILLION) { [EOL]         if (value < 1000) { [EOL]             if (value < 10) { [EOL]                 buffer[offset++] = (byte) ('0' + value); [EOL]             } else { [EOL]                 offset = outputLeadingTriplet(value, buffer, offset); [EOL]             } [EOL]         } else { [EOL]             int thousands = value / 1000; [EOL]             value -= (thousands * 1000); [EOL]             offset = outputLeadingTriplet(thousands, buffer, offset); [EOL]             offset = outputFullTriplet(value, buffer, offset); [EOL]         } [EOL]         return offset; [EOL]     } [EOL]     boolean hasBillions = (value >= BILLION); [EOL]     if (hasBillions) { [EOL]         value -= BILLION; [EOL]         if (value >= BILLION) { [EOL]             value -= BILLION; [EOL]             buffer[offset++] = '2'; [EOL]         } else { [EOL]             buffer[offset++] = '1'; [EOL]         } [EOL]     } [EOL]     int newValue = value / 1000; [EOL]     int ones = (value - (newValue * 1000)); [EOL]     value = newValue; [EOL]     newValue /= 1000; [EOL]     int thousands = (value - (newValue * 1000)); [EOL]     if (hasBillions) { [EOL]         offset = outputFullTriplet(newValue, buffer, offset); [EOL]     } else { [EOL]         offset = outputLeadingTriplet(newValue, buffer, offset); [EOL]     } [EOL]     offset = outputFullTriplet(thousands, buffer, offset); [EOL]     offset = outputFullTriplet(ones, buffer, offset); [EOL]     return offset; [EOL] } <line_num>: 129,178
public static int outputLong(long value, char[] buffer, int offset) { [EOL]     if (value < 0L) { [EOL]         if (value > MIN_INT_AS_LONG) { [EOL]             return outputInt((int) value, buffer, offset); [EOL]         } [EOL]         if (value == Long.MIN_VALUE) { [EOL]             int len = SMALLEST_LONG.length(); [EOL]             SMALLEST_LONG.getChars(0, len, buffer, offset); [EOL]             return (offset + len); [EOL]         } [EOL]         buffer[offset++] = '-'; [EOL]         value = -value; [EOL]     } else { [EOL]         if (value <= MAX_INT_AS_LONG) { [EOL]             return outputInt((int) value, buffer, offset); [EOL]         } [EOL]     } [EOL]     int origOffset = offset; [EOL]     offset += calcLongStrLength(value); [EOL]     int ptr = offset; [EOL]     while (value > MAX_INT_AS_LONG) { [EOL]         ptr -= 3; [EOL]         long newValue = value / THOUSAND_L; [EOL]         int triplet = (int) (value - newValue * THOUSAND_L); [EOL]         outputFullTriplet(triplet, buffer, ptr); [EOL]         value = newValue; [EOL]     } [EOL]     int ivalue = (int) value; [EOL]     while (ivalue >= 1000) { [EOL]         ptr -= 3; [EOL]         int newValue = ivalue / 1000; [EOL]         int triplet = ivalue - (newValue * 1000); [EOL]         outputFullTriplet(triplet, buffer, ptr); [EOL]         ivalue = newValue; [EOL]     } [EOL]     outputLeadingTriplet(ivalue, buffer, origOffset); [EOL]     return offset; [EOL] } <line_num>: 183,235
public static int outputLong(long value, byte[] buffer, int offset) { [EOL]     if (value < 0L) { [EOL]         if (value > MIN_INT_AS_LONG) { [EOL]             return outputInt((int) value, buffer, offset); [EOL]         } [EOL]         if (value == Long.MIN_VALUE) { [EOL]             int len = SMALLEST_LONG.length(); [EOL]             for (int i = 0; i < len; ++i) { [EOL]                 buffer[offset++] = (byte) SMALLEST_LONG.charAt(i); [EOL]             } [EOL]             return offset; [EOL]         } [EOL]         buffer[offset++] = '-'; [EOL]         value = -value; [EOL]     } else { [EOL]         if (value <= MAX_INT_AS_LONG) { [EOL]             return outputInt((int) value, buffer, offset); [EOL]         } [EOL]     } [EOL]     int origOffset = offset; [EOL]     offset += calcLongStrLength(value); [EOL]     int ptr = offset; [EOL]     while (value > MAX_INT_AS_LONG) { [EOL]         ptr -= 3; [EOL]         long newValue = value / THOUSAND_L; [EOL]         int triplet = (int) (value - newValue * THOUSAND_L); [EOL]         outputFullTriplet(triplet, buffer, ptr); [EOL]         value = newValue; [EOL]     } [EOL]     int ivalue = (int) value; [EOL]     while (ivalue >= 1000) { [EOL]         ptr -= 3; [EOL]         int newValue = ivalue / 1000; [EOL]         int triplet = ivalue - (newValue * 1000); [EOL]         outputFullTriplet(triplet, buffer, ptr); [EOL]         ivalue = newValue; [EOL]     } [EOL]     outputLeadingTriplet(ivalue, buffer, origOffset); [EOL]     return offset; [EOL] } <line_num>: 237,281
public static String toString(int value) { [EOL]     if (value < sSmallIntStrs.length) { [EOL]         if (value >= 0) { [EOL]             return sSmallIntStrs[value]; [EOL]         } [EOL]         int v2 = -value - 1; [EOL]         if (v2 < sSmallIntStrs2.length) { [EOL]             return sSmallIntStrs2[v2]; [EOL]         } [EOL]     } [EOL]     return Integer.toString(value); [EOL] } <line_num>: 293,306
public static String toString(long value) { [EOL]     if (value <= Integer.MAX_VALUE && value >= Integer.MIN_VALUE) { [EOL]         return toString((int) value); [EOL]     } [EOL]     return Long.toString(value); [EOL] } <line_num>: 308,315
public static String toString(double value) { [EOL]     return Double.toString(value); [EOL] } <line_num>: 317,320
private static int outputLeadingTriplet(int triplet, char[] buffer, int offset) { [EOL]     int digitOffset = (triplet << 2); [EOL]     char c = LEADING_TRIPLETS[digitOffset++]; [EOL]     if (c != NULL_CHAR) { [EOL]         buffer[offset++] = c; [EOL]     } [EOL]     c = LEADING_TRIPLETS[digitOffset++]; [EOL]     if (c != NULL_CHAR) { [EOL]         buffer[offset++] = c; [EOL]     } [EOL]     buffer[offset++] = LEADING_TRIPLETS[digitOffset]; [EOL]     return offset; [EOL] } <line_num>: 328,342
private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset) { [EOL]     int digitOffset = (triplet << 2); [EOL]     char c = LEADING_TRIPLETS[digitOffset++]; [EOL]     if (c != NULL_CHAR) { [EOL]         buffer[offset++] = (byte) c; [EOL]     } [EOL]     c = LEADING_TRIPLETS[digitOffset++]; [EOL]     if (c != NULL_CHAR) { [EOL]         buffer[offset++] = (byte) c; [EOL]     } [EOL]     buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset]; [EOL]     return offset; [EOL] } <line_num>: 344,358
private static int outputFullTriplet(int triplet, char[] buffer, int offset) { [EOL]     int digitOffset = (triplet << 2); [EOL]     buffer[offset++] = FULL_TRIPLETS[digitOffset++]; [EOL]     buffer[offset++] = FULL_TRIPLETS[digitOffset++]; [EOL]     buffer[offset++] = FULL_TRIPLETS[digitOffset]; [EOL]     return offset; [EOL] } <line_num>: 360,367
private static int outputFullTriplet(int triplet, byte[] buffer, int offset) { [EOL]     int digitOffset = (triplet << 2); [EOL]     buffer[offset++] = FULL_TRIPLETS_B[digitOffset++]; [EOL]     buffer[offset++] = FULL_TRIPLETS_B[digitOffset++]; [EOL]     buffer[offset++] = FULL_TRIPLETS_B[digitOffset]; [EOL]     return offset; [EOL] } <line_num>: 369,376
private static int calcLongStrLength(long posValue) { [EOL]     int len = 10; [EOL]     long comp = TEN_BILLION_L; [EOL]     while (posValue >= comp) { [EOL]         if (len == 19) { [EOL]             break; [EOL]         } [EOL]         ++len; [EOL]         comp = (comp << 3) + (comp << 1); [EOL]     } [EOL]     return len; [EOL] } <line_num>: 383,397
