public MergedStream(IOContext context, InputStream in, byte[] buf, int start, int end) { [EOL]     _context = context; [EOL]     _in = in; [EOL]     _buffer = buf; [EOL]     _ptr = start; [EOL]     _end = end; [EOL] } <line_num>: 26,34
@Override [EOL] public int available() throws IOException { [EOL]     if (_buffer != null) { [EOL]         return _end - _ptr; [EOL]     } [EOL]     return _in.available(); [EOL] } <line_num>: 36,43
@Override [EOL] public void close() throws IOException { [EOL]     freeMergedBuffer(); [EOL]     _in.close(); [EOL] } <line_num>: 45,50
@Override [EOL] public void mark(int readlimit) { [EOL]     if (_buffer == null) { [EOL]         _in.mark(readlimit); [EOL]     } [EOL] } <line_num>: 52,58
@Override [EOL] public boolean markSupported() { [EOL]     return (_buffer == null) && _in.markSupported(); [EOL] } <line_num>: 60,65
@Override [EOL] public int read() throws IOException { [EOL]     if (_buffer != null) { [EOL]         int c = _buffer[_ptr++] & 0xFF; [EOL]         if (_ptr >= _end) { [EOL]             freeMergedBuffer(); [EOL]         } [EOL]         return c; [EOL]     } [EOL]     return _in.read(); [EOL] } <line_num>: 67,78
@Override [EOL] public int read(byte[] b) throws IOException { [EOL]     return read(b, 0, b.length); [EOL] } <line_num>: 80,84
@Override [EOL] public int read(byte[] b, int off, int len) throws IOException { [EOL]     if (_buffer != null) { [EOL]         int avail = _end - _ptr; [EOL]         if (len > avail) { [EOL]             len = avail; [EOL]         } [EOL]         System.arraycopy(_buffer, _ptr, b, off, len); [EOL]         _ptr += len; [EOL]         if (_ptr >= _end) { [EOL]             freeMergedBuffer(); [EOL]         } [EOL]         return len; [EOL]     } [EOL]     return _in.read(b, off, len); [EOL] } <line_num>: 86,102
@Override [EOL] public void reset() throws IOException { [EOL]     if (_buffer == null) { [EOL]         _in.reset(); [EOL]     } [EOL] } <line_num>: 104,110
@Override [EOL] public long skip(long n) throws IOException { [EOL]     long count = 0L; [EOL]     if (_buffer != null) { [EOL]         int amount = _end - _ptr; [EOL]         if (amount > n) { [EOL]             _ptr += (int) n; [EOL]             return n; [EOL]         } [EOL]         freeMergedBuffer(); [EOL]         count += amount; [EOL]         n -= amount; [EOL]     } [EOL]     if (n > 0) { [EOL]         count += _in.skip(n); [EOL]     } [EOL]     return count; [EOL] } <line_num>: 112,133
private void freeMergedBuffer() { [EOL]     byte[] buf = _buffer; [EOL]     if (buf != null) { [EOL]         _buffer = null; [EOL]         if (_context != null) { [EOL]             _context.releaseReadIOBuffer(buf); [EOL]         } [EOL]     } [EOL] } <line_num>: 135,144
