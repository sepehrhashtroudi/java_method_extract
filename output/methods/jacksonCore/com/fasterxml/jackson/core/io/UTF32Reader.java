public UTF32Reader(IOContext ctxt, InputStream in, byte[] buf, int ptr, int len, boolean isBigEndian) { [EOL]     super(ctxt, in, buf, ptr, len); [EOL]     _bigEndian = isBigEndian; [EOL]     _managedBuffers = (in != null); [EOL] } <line_num>: 40,47
@Override [EOL] public int read(char[] cbuf, int start, int len) throws IOException { [EOL]     if (_buffer == null) { [EOL]         return -1; [EOL]     } [EOL]     if (len < 1) { [EOL]         return len; [EOL]     } [EOL]     if (start < 0 || (start + len) > cbuf.length) { [EOL]         reportBounds(cbuf, start, len); [EOL]     } [EOL]     len += start; [EOL]     int outPtr = start; [EOL]     if (_surrogate != NULL_CHAR) { [EOL]         cbuf[outPtr++] = _surrogate; [EOL]         _surrogate = NULL_CHAR; [EOL]     } else { [EOL]         int left = (_length - _ptr); [EOL]         if (left < 4) { [EOL]             if (!loadMore(left)) { [EOL]                 return -1; [EOL]             } [EOL]         } [EOL]     } [EOL]     main_loop: while (outPtr < len) { [EOL]         int ptr = _ptr; [EOL]         int ch; [EOL]         if (_bigEndian) { [EOL]             ch = (_buffer[ptr] << 24) | ((_buffer[ptr + 1] & 0xFF) << 16) | ((_buffer[ptr + 2] & 0xFF) << 8) | (_buffer[ptr + 3] & 0xFF); [EOL]         } else { [EOL]             ch = (_buffer[ptr] & 0xFF) | ((_buffer[ptr + 1] & 0xFF) << 8) | ((_buffer[ptr + 2] & 0xFF) << 16) | (_buffer[ptr + 3] << 24); [EOL]         } [EOL]         _ptr += 4; [EOL]         if (ch > 0xFFFF) { [EOL]             if (ch > LAST_VALID_UNICODE_CHAR) { [EOL]                 reportInvalid(ch, outPtr - start, "(above " + Integer.toHexString(LAST_VALID_UNICODE_CHAR) + ") "); [EOL]             } [EOL]             ch -= 0x10000; [EOL]             cbuf[outPtr++] = (char) (0xD800 + (ch >> 10)); [EOL]             ch = (0xDC00 | (ch & 0x03FF)); [EOL]             if (outPtr >= len) { [EOL]                 _surrogate = (char) ch; [EOL]                 break main_loop; [EOL]             } [EOL]         } [EOL]         cbuf[outPtr++] = (char) ch; [EOL]         if (_ptr >= _length) { [EOL]             break main_loop; [EOL]         } [EOL]     } [EOL]     len = outPtr - start; [EOL]     _charCount += len; [EOL]     return len; [EOL] } <line_num>: 55,131
private void reportUnexpectedEOF(int gotBytes, int needed) throws IOException { [EOL]     int bytePos = _byteCount + gotBytes; [EOL]     int charPos = _charCount; [EOL]     throw new CharConversionException("Unexpected EOF in the middle of a 4-byte UTF-32 char: got " + gotBytes + ", needed " + needed + ", at char #" + charPos + ", byte #" + bytePos + ")"); [EOL] } <line_num>: 139,147
private void reportInvalid(int value, int offset, String msg) throws IOException { [EOL]     int bytePos = _byteCount + _ptr - 1; [EOL]     int charPos = _charCount + offset; [EOL]     throw new CharConversionException("Invalid UTF-32 character 0x" + Integer.toHexString(value) + msg + " at char #" + charPos + ", byte #" + bytePos + ")"); [EOL] } <line_num>: 149,157
private boolean loadMore(int available) throws IOException { [EOL]     _byteCount += (_length - available); [EOL]     if (available > 0) { [EOL]         if (_ptr > 0) { [EOL]             for (int i = 0; i < available; ++i) { [EOL]                 _buffer[i] = _buffer[_ptr + i]; [EOL]             } [EOL]             _ptr = 0; [EOL]         } [EOL]         _length = available; [EOL]     } else { [EOL]         _ptr = 0; [EOL]         int count = (_in == null) ? -1 : _in.read(_buffer); [EOL]         if (count < 1) { [EOL]             _length = 0; [EOL]             if (count < 0) { [EOL]                 if (_managedBuffers) { [EOL]                     freeBuffers(); [EOL]                 } [EOL]                 return false; [EOL]             } [EOL]             reportStrangeStream(); [EOL]         } [EOL]         _length = count; [EOL]     } [EOL]     while (_length < 4) { [EOL]         int count = (_in == null) ? -1 : _in.read(_buffer, _length, _buffer.length - _length); [EOL]         if (count < 1) { [EOL]             if (count < 0) { [EOL]                 if (_managedBuffers) { [EOL]                     freeBuffers(); [EOL]                 } [EOL]                 reportUnexpectedEOF(_length, 4); [EOL]             } [EOL]             reportStrangeStream(); [EOL]         } [EOL]         _length += count; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 165,217
