public QCodec() { [EOL]     super(); [EOL] } <line_num>: 111,113
public QCodec(final String charset) { [EOL]     super(); [EOL]     this.charset = charset; [EOL] } <line_num>: 124,127
protected String getEncoding() { [EOL]     return "Q"; [EOL] } <line_num>: 129,131
protected byte[] doEncoding(byte[] bytes) { [EOL]     if (bytes == null) { [EOL]         return null; [EOL]     } [EOL]     byte[] data = QuotedPrintableCodec.encodeQuotedPrintable(PRINTABLE_CHARS, bytes); [EOL]     if (this.encodeBlanks) { [EOL]         for (int i = 0; i < data.length; i++) { [EOL]             if (data[i] == BLANK) { [EOL]                 data[i] = UNDERSCORE; [EOL]             } [EOL]         } [EOL]     } [EOL]     return data; [EOL] } <line_num>: 133,146
protected byte[] doDecoding(byte[] bytes) throws DecoderException { [EOL]     if (bytes == null) { [EOL]         return null; [EOL]     } [EOL]     boolean hasUnderscores = false; [EOL]     for (int i = 0; i < bytes.length; i++) { [EOL]         if (bytes[i] == UNDERSCORE) { [EOL]             hasUnderscores = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     if (hasUnderscores) { [EOL]         byte[] tmp = new byte[bytes.length]; [EOL]         for (int i = 0; i < bytes.length; i++) { [EOL]             byte b = bytes[i]; [EOL]             if (b != UNDERSCORE) { [EOL]                 tmp[i] = b; [EOL]             } else { [EOL]                 tmp[i] = BLANK; [EOL]             } [EOL]         } [EOL]         return QuotedPrintableCodec.decodeQuotedPrintable(tmp); [EOL]     } [EOL]     return QuotedPrintableCodec.decodeQuotedPrintable(bytes); [EOL] } <line_num>: 148,172
public String encode(final String pString, final String charset) throws EncoderException { [EOL]     if (pString == null) { [EOL]         return null; [EOL]     } [EOL]     try { [EOL]         return encodeText(pString, charset); [EOL]     } catch (UnsupportedEncodingException e) { [EOL]         throw new EncoderException(e.getMessage()); [EOL]     } [EOL] } <line_num>: 186,195
public String encode(String pString) throws EncoderException { [EOL]     if (pString == null) { [EOL]         return null; [EOL]     } [EOL]     return encode(pString, getDefaultCharset()); [EOL] } <line_num>: 207,212
public String decode(String pString) throws DecoderException { [EOL]     if (pString == null) { [EOL]         return null; [EOL]     } [EOL]     try { [EOL]         return decodeText(pString); [EOL]     } catch (UnsupportedEncodingException e) { [EOL]         throw new DecoderException(e.getMessage()); [EOL]     } [EOL] } <line_num>: 226,235
public Object encode(Object pObject) throws EncoderException { [EOL]     if (pObject == null) { [EOL]         return null; [EOL]     } else if (pObject instanceof String) { [EOL]         return encode((String) pObject); [EOL]     } else { [EOL]         throw new EncoderException("Objects of type " + pObject.getClass().getName() + " cannot be encoded using Q codec"); [EOL]     } [EOL] } <line_num>: 247,257
public Object decode(Object pObject) throws DecoderException { [EOL]     if (pObject == null) { [EOL]         return null; [EOL]     } else if (pObject instanceof String) { [EOL]         return decode((String) pObject); [EOL]     } else { [EOL]         throw new DecoderException("Objects of type " + pObject.getClass().getName() + " cannot be decoded using Q codec"); [EOL]     } [EOL] } <line_num>: 272,282
public String getDefaultCharset() { [EOL]     return this.charset; [EOL] } <line_num>: 289,291
public boolean isEncodeBlanks() { [EOL]     return this.encodeBlanks; [EOL] } <line_num>: 298,300
public void setEncodeBlanks(boolean b) { [EOL]     this.encodeBlanks = b; [EOL] } <line_num>: 308,310
