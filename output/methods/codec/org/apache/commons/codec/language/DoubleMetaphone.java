public DoubleMetaphone() { [EOL]     super(); [EOL] } <line_num>: 64,66
public DoubleMetaphoneResult(int maxLength) { [EOL]     this.maxLength = maxLength; [EOL] } <line_num>: 1037,1039
public String doubleMetaphone(String value) { [EOL]     return doubleMetaphone(value, false); [EOL] } <line_num>: 74,76
public String doubleMetaphone(String value, boolean alternate) { [EOL]     value = cleanInput(value); [EOL]     if (value == null) { [EOL]         return null; [EOL]     } [EOL]     boolean slavoGermanic = isSlavoGermanic(value); [EOL]     int index = isSilentStart(value) ? 1 : 0; [EOL]     DoubleMetaphoneResult result = new DoubleMetaphoneResult(this.getMaxCodeLen()); [EOL]     while (!result.isComplete() && index <= value.length() - 1) { [EOL]         switch(value.charAt(index)) { [EOL]             case 'A': [EOL]             case 'E': [EOL]             case 'I': [EOL]             case 'O': [EOL]             case 'U': [EOL]             case 'Y': [EOL]                 index = handleAEIOUY(value, result, index); [EOL]                 break; [EOL]             case 'B': [EOL]                 result.append('P'); [EOL]                 index = charAt(value, index + 1) == 'B' ? index + 2 : index + 1; [EOL]                 break; [EOL]             case '\u00C7': [EOL]                 result.append('S'); [EOL]                 index++; [EOL]                 break; [EOL]             case 'C': [EOL]                 index = handleC(value, result, index); [EOL]                 break; [EOL]             case 'D': [EOL]                 index = handleD(value, result, index); [EOL]                 break; [EOL]             case 'F': [EOL]                 result.append('F'); [EOL]                 index = charAt(value, index + 1) == 'F' ? index + 2 : index + 1; [EOL]                 break; [EOL]             case 'G': [EOL]                 index = handleG(value, result, index, slavoGermanic); [EOL]                 break; [EOL]             case 'H': [EOL]                 index = handleH(value, result, index); [EOL]                 break; [EOL]             case 'J': [EOL]                 index = handleJ(value, result, index, slavoGermanic); [EOL]                 break; [EOL]             case 'K': [EOL]                 result.append('K'); [EOL]                 index = charAt(value, index + 1) == 'K' ? index + 2 : index + 1; [EOL]                 break; [EOL]             case 'L': [EOL]                 index = handleL(value, result, index); [EOL]                 break; [EOL]             case 'M': [EOL]                 result.append('M'); [EOL]                 index = conditionM0(value, index) ? index + 2 : index + 1; [EOL]                 break; [EOL]             case 'N': [EOL]                 result.append('N'); [EOL]                 index = charAt(value, index + 1) == 'N' ? index + 2 : index + 1; [EOL]                 break; [EOL]             case '\u00D1': [EOL]                 result.append('N'); [EOL]                 index++; [EOL]                 break; [EOL]             case 'P': [EOL]                 index = handleP(value, result, index); [EOL]                 break; [EOL]             case 'Q': [EOL]                 result.append('K'); [EOL]                 index = charAt(value, index + 1) == 'Q' ? index + 2 : index + 1; [EOL]                 break; [EOL]             case 'R': [EOL]                 index = handleR(value, result, index, slavoGermanic); [EOL]                 break; [EOL]             case 'S': [EOL]                 index = handleS(value, result, index, slavoGermanic); [EOL]                 break; [EOL]             case 'T': [EOL]                 index = handleT(value, result, index); [EOL]                 break; [EOL]             case 'V': [EOL]                 result.append('F'); [EOL]                 index = charAt(value, index + 1) == 'V' ? index + 2 : index + 1; [EOL]                 break; [EOL]             case 'W': [EOL]                 index = handleW(value, result, index); [EOL]                 break; [EOL]             case 'X': [EOL]                 index = handleX(value, result, index); [EOL]                 break; [EOL]             case 'Z': [EOL]                 index = handleZ(value, result, index, slavoGermanic); [EOL]                 break; [EOL]             default: [EOL]                 index++; [EOL]                 break; [EOL]         } [EOL]     } [EOL]     return alternate ? result.getAlternate() : result.getPrimary(); [EOL] } <line_num>: 86,191
public Object encode(Object obj) throws EncoderException { [EOL]     if (!(obj instanceof String)) { [EOL]         throw new EncoderException("DoubleMetaphone encode parameter is not of type String"); [EOL]     } [EOL]     return doubleMetaphone((String) obj); [EOL] } <line_num>: 201,206
public String encode(String value) { [EOL]     return doubleMetaphone(value); [EOL] } <line_num>: 214,216
public boolean isDoubleMetaphoneEqual(String value1, String value2) { [EOL]     return isDoubleMetaphoneEqual(value1, value2, false); [EOL] } <line_num>: 228,230
public boolean isDoubleMetaphoneEqual(String value1, String value2, boolean alternate) { [EOL]     return doubleMetaphone(value1, alternate).equals(doubleMetaphone(value2, alternate)); [EOL] } <line_num>: 242,247
public int getMaxCodeLen() { [EOL]     return this.maxCodeLen; [EOL] } <line_num>: 253,255
public void setMaxCodeLen(int maxCodeLen) { [EOL]     this.maxCodeLen = maxCodeLen; [EOL] } <line_num>: 261,263
private int handleAEIOUY(String value, DoubleMetaphoneResult result, int index) { [EOL]     if (index == 0) { [EOL]         result.append('A'); [EOL]     } [EOL]     return index + 1; [EOL] } <line_num>: 270,276
private int handleC(String value, DoubleMetaphoneResult result, int index) { [EOL]     if (conditionC0(value, index)) { [EOL]         result.append('K'); [EOL]         index += 2; [EOL]     } else if (index == 0 && contains(value, index, 6, "CAESAR")) { [EOL]         result.append('S'); [EOL]         index += 2; [EOL]     } else if (contains(value, index, 2, "CH")) { [EOL]         index = handleCH(value, result, index); [EOL]     } else if (contains(value, index, 2, "CZ") && !contains(value, index - 2, 4, "WICZ")) { [EOL]         result.append('S', 'X'); [EOL]         index += 2; [EOL]     } else if (contains(value, index + 1, 3, "CIA")) { [EOL]         result.append('X'); [EOL]         index += 3; [EOL]     } else if (contains(value, index, 2, "CC") && !(index == 1 && charAt(value, 0) == 'M')) { [EOL]         return handleCC(value, result, index); [EOL]     } else if (contains(value, index, 2, "CK", "CG", "CQ")) { [EOL]         result.append('K'); [EOL]         index += 2; [EOL]     } else if (contains(value, index, 2, "CI", "CE", "CY")) { [EOL]         if (contains(value, index, 3, "CIO", "CIE", "CIA")) { [EOL]             result.append('S', 'X'); [EOL]         } else { [EOL]             result.append('S'); [EOL]         } [EOL]         index += 2; [EOL]     } else { [EOL]         result.append('K'); [EOL]         if (contains(value, index + 1, 2, " C", " Q", " G")) { [EOL]             index += 3; [EOL]         } else if (contains(value, index + 1, 1, "C", "K", "Q") && !contains(value, index + 1, 2, "CE", "CI")) { [EOL]             index += 2; [EOL]         } else { [EOL]             index++; [EOL]         } [EOL]     } [EOL]     return index; [EOL] } <line_num>: 281,330
private int handleCC(String value, DoubleMetaphoneResult result, int index) { [EOL]     if (contains(value, index + 2, 1, "I", "E", "H") && !contains(value, index + 2, 2, "HU")) { [EOL]         if ((index == 1 && charAt(value, index - 1) == 'A') || contains(value, index - 1, 5, "UCCEE", "UCCES")) { [EOL]             result.append("KS"); [EOL]         } else { [EOL]             result.append('X'); [EOL]         } [EOL]         index += 3; [EOL]     } else { [EOL]         result.append('K'); [EOL]         index += 2; [EOL]     } [EOL]     return index; [EOL] } <line_num>: 335,356
private int handleCH(String value, DoubleMetaphoneResult result, int index) { [EOL]     if (index > 0 && contains(value, index, 4, "CHAE")) { [EOL]         result.append('K', 'X'); [EOL]         return index + 2; [EOL]     } else if (conditionCH0(value, index)) { [EOL]         result.append('K'); [EOL]         return index + 2; [EOL]     } else if (conditionCH1(value, index)) { [EOL]         result.append('K'); [EOL]         return index + 2; [EOL]     } else { [EOL]         if (index > 0) { [EOL]             if (contains(value, 0, 2, "MC")) { [EOL]                 result.append('K'); [EOL]             } else { [EOL]                 result.append('X', 'K'); [EOL]             } [EOL]         } else { [EOL]             result.append('X'); [EOL]         } [EOL]         return index + 2; [EOL]     } [EOL] } <line_num>: 361,387
private int handleD(String value, DoubleMetaphoneResult result, int index) { [EOL]     if (contains(value, index, 2, "DG")) { [EOL]         if (contains(value, index + 2, 1, "I", "E", "Y")) { [EOL]             result.append('J'); [EOL]             index += 3; [EOL]         } else { [EOL]             result.append("TK"); [EOL]             index += 2; [EOL]         } [EOL]     } else if (contains(value, index, 2, "DT", "DD")) { [EOL]         result.append('T'); [EOL]         index += 2; [EOL]     } else { [EOL]         result.append('T'); [EOL]         index++; [EOL]     } [EOL]     return index; [EOL] } <line_num>: 392,413
private int handleG(String value, DoubleMetaphoneResult result, int index, boolean slavoGermanic) { [EOL]     if (charAt(value, index + 1) == 'H') { [EOL]         index = handleGH(value, result, index); [EOL]     } else if (charAt(value, index + 1) == 'N') { [EOL]         if (index == 1 && isVowel(charAt(value, 0)) && !slavoGermanic) { [EOL]             result.append("KN", "N"); [EOL]         } else if (!contains(value, index + 2, 2, "EY") && charAt(value, index + 1) != 'Y' && !slavoGermanic) { [EOL]             result.append("N", "KN"); [EOL]         } else { [EOL]             result.append("KN"); [EOL]         } [EOL]         index = index + 2; [EOL]     } else if (contains(value, index + 1, 2, "LI") && !slavoGermanic) { [EOL]         result.append("KL", "L"); [EOL]         index += 2; [EOL]     } else if (index == 0 && (charAt(value, index + 1) == 'Y' || contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) { [EOL]         result.append('K', 'J'); [EOL]         index += 2; [EOL]     } else if ((contains(value, index + 1, 2, "ER") || charAt(value, index + 1) == 'Y') && !contains(value, 0, 6, "DANGER", "RANGER", "MANGER") && !contains(value, index - 1, 1, "E", "I") && !contains(value, index - 1, 3, "RGY", "OGY")) { [EOL]         result.append('K', 'J'); [EOL]         index += 2; [EOL]     } else if (contains(value, index + 1, 1, "E", "I", "Y") || contains(value, index - 1, 4, "AGGI", "OGGI")) { [EOL]         if ((contains(value, 0, 4, "VAN ", "VON ") || contains(value, 0, 3, "SCH")) || contains(value, index + 1, 2, "ET")) { [EOL]             result.append('K'); [EOL]         } else if (contains(value, index + 1, 4, "IER")) { [EOL]             result.append('J'); [EOL]         } else { [EOL]             result.append('J', 'K'); [EOL]         } [EOL]         index += 2; [EOL]     } else if (charAt(value, index + 1) == 'G') { [EOL]         index += 2; [EOL]         result.append('K'); [EOL]     } else { [EOL]         index++; [EOL]         result.append('K'); [EOL]     } [EOL]     return index; [EOL] } <line_num>: 418,469
private int handleGH(String value, DoubleMetaphoneResult result, int index) { [EOL]     if (index > 0 && !isVowel(charAt(value, index - 1))) { [EOL]         result.append('K'); [EOL]         index += 2; [EOL]     } else if (index == 0) { [EOL]         if (charAt(value, index + 2) == 'I') { [EOL]             result.append('J'); [EOL]         } else { [EOL]             result.append('K'); [EOL]         } [EOL]         index += 2; [EOL]     } else if ((index > 1 && contains(value, index - 2, 1, "B", "H", "D")) || (index > 2 && contains(value, index - 3, 1, "B", "H", "D")) || (index > 3 && contains(value, index - 4, 1, "B", "H"))) { [EOL]         index += 2; [EOL]     } else { [EOL]         if (index > 2 && charAt(value, index - 1) == 'U' && contains(value, index - 3, 1, "C", "G", "L", "R", "T")) { [EOL]             result.append('F'); [EOL]         } else if (index > 0 && charAt(value, index - 1) != 'I') { [EOL]             result.append('K'); [EOL]         } [EOL]         index += 2; [EOL]     } [EOL]     return index; [EOL] } <line_num>: 474,503
private int handleH(String value, DoubleMetaphoneResult result, int index) { [EOL]     if ((index == 0 || isVowel(charAt(value, index - 1))) && isVowel(charAt(value, index + 1))) { [EOL]         result.append('H'); [EOL]         index += 2; [EOL]     } else { [EOL]         index++; [EOL]     } [EOL]     return index; [EOL] } <line_num>: 508,521
private int handleJ(String value, DoubleMetaphoneResult result, int index, boolean slavoGermanic) { [EOL]     if (contains(value, index, 4, "JOSE") || contains(value, 0, 4, "SAN ")) { [EOL]         if ((index == 0 && (charAt(value, index + 4) == ' ') || value.length() == 4) || contains(value, 0, 4, "SAN ")) { [EOL]             result.append('H'); [EOL]         } else { [EOL]             result.append('J', 'H'); [EOL]         } [EOL]         index++; [EOL]     } else { [EOL]         if (index == 0 && !contains(value, index, 4, "JOSE")) { [EOL]             result.append('J', 'A'); [EOL]         } else if (isVowel(charAt(value, index - 1)) && !slavoGermanic && (charAt(value, index + 1) == 'A' || charAt(value, index + 1) == 'O')) { [EOL]             result.append('J', 'H'); [EOL]         } else if (index == value.length() - 1) { [EOL]             result.append('J', ' '); [EOL]         } else if (!contains(value, index + 1, 1, L_T_K_S_N_M_B_Z) && !contains(value, index - 1, 1, "S", "K", "L")) { [EOL]             result.append('J'); [EOL]         } [EOL]         if (charAt(value, index + 1) == 'J') { [EOL]             index += 2; [EOL]         } else { [EOL]             index++; [EOL]         } [EOL]     } [EOL]     return index; [EOL] } <line_num>: 526,556
private int handleL(String value, DoubleMetaphoneResult result, int index) { [EOL]     result.append('L'); [EOL]     if (charAt(value, index + 1) == 'L') { [EOL]         if (conditionL0(value, index)) { [EOL]             result.appendAlternate(' '); [EOL]         } [EOL]         index += 2; [EOL]     } else { [EOL]         index++; [EOL]     } [EOL]     return index; [EOL] } <line_num>: 561,574
private int handleP(String value, DoubleMetaphoneResult result, int index) { [EOL]     if (charAt(value, index + 1) == 'H') { [EOL]         result.append('F'); [EOL]         index += 2; [EOL]     } else { [EOL]         result.append('P'); [EOL]         index = contains(value, index + 1, 1, "P", "B") ? index + 2 : index + 1; [EOL]     } [EOL]     return index; [EOL] } <line_num>: 579,590
private int handleR(String value, DoubleMetaphoneResult result, int index, boolean slavoGermanic) { [EOL]     if (index == value.length() - 1 && !slavoGermanic && contains(value, index - 2, 2, "IE") && !contains(value, index - 4, 2, "ME", "MA")) { [EOL]         result.appendAlternate('R'); [EOL]     } else { [EOL]         result.append('R'); [EOL]     } [EOL]     return charAt(value, index + 1) == 'R' ? index + 2 : index + 1; [EOL] } <line_num>: 595,607
private int handleS(String value, DoubleMetaphoneResult result, int index, boolean slavoGermanic) { [EOL]     if (contains(value, index - 1, 3, "ISL", "YSL")) { [EOL]         index++; [EOL]     } else if (index == 0 && contains(value, index, 5, "SUGAR")) { [EOL]         result.append('X', 'S'); [EOL]         index++; [EOL]     } else if (contains(value, index, 2, "SH")) { [EOL]         if (contains(value, index + 1, 4, "HEIM", "HOEK", "HOLM", "HOLZ")) { [EOL]             result.append('S'); [EOL]         } else { [EOL]             result.append('X'); [EOL]         } [EOL]         index += 2; [EOL]     } else if (contains(value, index, 3, "SIO", "SIA") || contains(value, index, 4, "SIAN")) { [EOL]         if (slavoGermanic) { [EOL]             result.append('S'); [EOL]         } else { [EOL]             result.append('S', 'X'); [EOL]         } [EOL]         index += 3; [EOL]     } else if ((index == 0 && contains(value, index + 1, 1, "M", "N", "L", "W")) || contains(value, index + 1, 1, "Z")) { [EOL]         result.append('S', 'X'); [EOL]         index = contains(value, index + 1, 1, "Z") ? index + 2 : index + 1; [EOL]     } else if (contains(value, index, 2, "SC")) { [EOL]         index = handleSC(value, result, index); [EOL]     } else { [EOL]         if (index == value.length() - 1 && contains(value, index - 2, 2, "AI", "OI")) { [EOL]             result.appendAlternate('S'); [EOL]         } else { [EOL]             result.append('S'); [EOL]         } [EOL]         index = contains(value, index + 1, 1, "S", "Z") ? index + 2 : index + 1; [EOL]     } [EOL]     return index; [EOL] } <line_num>: 612,660
private int handleSC(String value, DoubleMetaphoneResult result, int index) { [EOL]     if (charAt(value, index + 2) == 'H') { [EOL]         if (contains(value, index + 3, 2, "OO", "ER", "EN", "UY", "ED", "EM")) { [EOL]             if (contains(value, index + 3, 2, "ER", "EN")) { [EOL]                 result.append("X", "SK"); [EOL]             } else { [EOL]                 result.append("SK"); [EOL]             } [EOL]         } else { [EOL]             if (index == 0 && !isVowel(charAt(value, 3)) && charAt(value, 3) != 'W') { [EOL]                 result.append('X', 'S'); [EOL]             } else { [EOL]                 result.append('X'); [EOL]             } [EOL]         } [EOL]     } else if (contains(value, index + 2, 1, "I", "E", "Y")) { [EOL]         result.append('S'); [EOL]     } else { [EOL]         result.append("SK"); [EOL]     } [EOL]     return index + 3; [EOL] } <line_num>: 665,692
private int handleT(String value, DoubleMetaphoneResult result, int index) { [EOL]     if (contains(value, index, 4, "TION")) { [EOL]         result.append('X'); [EOL]         index += 3; [EOL]     } else if (contains(value, index, 3, "TIA", "TCH")) { [EOL]         result.append('X'); [EOL]         index += 3; [EOL]     } else if (contains(value, index, 2, "TH") || contains(value, index, 3, "TTH")) { [EOL]         if (contains(value, index + 2, 2, "OM", "AM") || contains(value, 0, 4, "VAN ", "VON ") || contains(value, 0, 3, "SCH")) { [EOL]             result.append('T'); [EOL]         } else { [EOL]             result.append('0', 'T'); [EOL]         } [EOL]         index += 2; [EOL]     } else { [EOL]         result.append('T'); [EOL]         index = contains(value, index + 1, 1, "T", "D") ? index + 2 : index + 1; [EOL]     } [EOL]     return index; [EOL] } <line_num>: 697,722
private int handleW(String value, DoubleMetaphoneResult result, int index) { [EOL]     if (contains(value, index, 2, "WR")) { [EOL]         result.append('R'); [EOL]         index += 2; [EOL]     } else { [EOL]         if (index == 0 && (isVowel(charAt(value, index + 1)) || contains(value, index, 2, "WH"))) { [EOL]             if (isVowel(charAt(value, index + 1))) { [EOL]                 result.append('A', 'F'); [EOL]             } else { [EOL]                 result.append('A'); [EOL]             } [EOL]             index++; [EOL]         } else if ((index == value.length() - 1 && isVowel(charAt(value, index - 1))) || contains(value, index - 1, 5, "EWSKI", "EWSKY", "OWSKI", "OWSKY") || contains(value, 0, 3, "SCH")) { [EOL]             result.appendAlternate('F'); [EOL]             index++; [EOL]         } else if (contains(value, index, 4, "WICZ", "WITZ")) { [EOL]             result.append("TS", "FX"); [EOL]             index += 4; [EOL]         } else { [EOL]             index++; [EOL]         } [EOL]     } [EOL]     return index; [EOL] } <line_num>: 727,761
private int handleX(String value, DoubleMetaphoneResult result, int index) { [EOL]     if (index == 0) { [EOL]         result.append('S'); [EOL]         index++; [EOL]     } else { [EOL]         if (!((index == value.length() - 1) && (contains(value, index - 3, 3, "IAU", "EAU") || contains(value, index - 2, 2, "AU", "OU")))) { [EOL]             result.append("KS"); [EOL]         } [EOL]         index = contains(value, index + 1, 1, "C", "X") ? index + 2 : index + 1; [EOL]     } [EOL]     return index; [EOL] } <line_num>: 766,782
private int handleZ(String value, DoubleMetaphoneResult result, int index, boolean slavoGermanic) { [EOL]     if (charAt(value, index + 1) == 'H') { [EOL]         result.append('J'); [EOL]         index += 2; [EOL]     } else { [EOL]         if (contains(value, index + 1, 2, "ZO", "ZI", "ZA") || (slavoGermanic && (index > 0 && charAt(value, index - 1) != 'T'))) { [EOL]             result.append("S", "TS"); [EOL]         } else { [EOL]             result.append('S'); [EOL]         } [EOL]         index = charAt(value, index + 1) == 'Z' ? index + 2 : index + 1; [EOL]     } [EOL]     return index; [EOL] } <line_num>: 787,802
private boolean conditionC0(String value, int index) { [EOL]     if (contains(value, index, 4, "CHIA")) { [EOL]         return true; [EOL]     } else if (index <= 1) { [EOL]         return false; [EOL]     } else if (isVowel(charAt(value, index - 2))) { [EOL]         return false; [EOL]     } else if (!contains(value, index - 1, 3, "ACH")) { [EOL]         return false; [EOL]     } else { [EOL]         char c = charAt(value, index + 2); [EOL]         return (c != 'I' && c != 'E') || contains(value, index - 2, 6, "BACHER", "MACHER"); [EOL]     } [EOL] } <line_num>: 809,823
private boolean conditionCH0(String value, int index) { [EOL]     if (index != 0) { [EOL]         return false; [EOL]     } else if (!contains(value, index + 1, 5, "HARAC", "HARIS") && !contains(value, index + 1, 3, "HOR", "HYM", "HIA", "HEM")) { [EOL]         return false; [EOL]     } else if (contains(value, 0, 5, "CHORE")) { [EOL]         return false; [EOL]     } else { [EOL]         return true; [EOL]     } [EOL] } <line_num>: 828,839
private boolean conditionCH1(String value, int index) { [EOL]     return ((contains(value, 0, 4, "VAN ", "VON ") || contains(value, 0, 3, "SCH")) || contains(value, index - 2, 6, "ORCHES", "ARCHIT", "ORCHID") || contains(value, index + 2, 1, "T", "S") || ((contains(value, index - 1, 1, "A", "O", "U", "E") || index == 0) && (contains(value, index + 2, 1, L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == value.length() - 1))); [EOL] } <line_num>: 844,851
private boolean conditionL0(String value, int index) { [EOL]     if (index == value.length() - 3 && contains(value, index - 1, 4, "ILLO", "ILLA", "ALLE")) { [EOL]         return true; [EOL]     } else if ((contains(value, index - 1, 2, "AS", "OS") || contains(value, value.length() - 1, 1, "A", "O")) && contains(value, index - 1, 4, "ALLE")) { [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 856,867
private boolean conditionM0(String value, int index) { [EOL]     if (charAt(value, index + 1) == 'M') { [EOL]         return true; [EOL]     } [EOL]     return contains(value, index - 1, 3, "UMB") && ((index + 1) == value.length() - 1 || contains(value, index + 2, 2, "ER")); [EOL] } <line_num>: 872,879
private boolean isSlavoGermanic(String value) { [EOL]     return value.indexOf('W') > -1 || value.indexOf('K') > -1 || value.indexOf("CZ") > -1 || value.indexOf("WITZ") > -1; [EOL] } <line_num>: 887,890
private boolean isVowel(char ch) { [EOL]     return VOWELS.indexOf(ch) != -1; [EOL] } <line_num>: 895,897
private boolean isSilentStart(String value) { [EOL]     boolean result = false; [EOL]     for (int i = 0; i < SILENT_START.length; i++) { [EOL]         if (value.startsWith(SILENT_START[i])) { [EOL]             result = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 904,913
private String cleanInput(String input) { [EOL]     if (input == null) { [EOL]         return null; [EOL]     } [EOL]     input = input.trim(); [EOL]     if (input.length() == 0) { [EOL]         return null; [EOL]     } [EOL]     return input.toUpperCase(java.util.Locale.ENGLISH); [EOL] } <line_num>: 918,927
protected char charAt(String value, int index) { [EOL]     if (index < 0 || index >= value.length()) { [EOL]         return Character.MIN_VALUE; [EOL]     } [EOL]     return value.charAt(index); [EOL] } <line_num>: 934,939
private static boolean contains(String value, int start, int length, String criteria) { [EOL]     return contains(value, start, length, new String[] { criteria }); [EOL] } <line_num>: 944,948
private static boolean contains(String value, int start, int length, String criteria1, String criteria2) { [EOL]     return contains(value, start, length, new String[] { criteria1, criteria2 }); [EOL] } <line_num>: 953,957
private static boolean contains(String value, int start, int length, String criteria1, String criteria2, String criteria3) { [EOL]     return contains(value, start, length, new String[] { criteria1, criteria2, criteria3 }); [EOL] } <line_num>: 962,967
private static boolean contains(String value, int start, int length, String criteria1, String criteria2, String criteria3, String criteria4) { [EOL]     return contains(value, start, length, new String[] { criteria1, criteria2, criteria3, criteria4 }); [EOL] } <line_num>: 972,978
private static boolean contains(String value, int start, int length, String criteria1, String criteria2, String criteria3, String criteria4, String criteria5) { [EOL]     return contains(value, start, length, new String[] { criteria1, criteria2, criteria3, criteria4, criteria5 }); [EOL] } <line_num>: 983,990
private static boolean contains(String value, int start, int length, String criteria1, String criteria2, String criteria3, String criteria4, String criteria5, String criteria6) { [EOL]     return contains(value, start, length, new String[] { criteria1, criteria2, criteria3, criteria4, criteria5, criteria6 }); [EOL] } <line_num>: 995,1002
protected static boolean contains(String value, int start, int length, String[] criteria) { [EOL]     boolean result = false; [EOL]     if (start >= 0 && start + length <= value.length()) { [EOL]         String target = value.substring(start, start + length); [EOL]         for (int i = 0; i < criteria.length; i++) { [EOL]             if (target.equals(criteria[i])) { [EOL]                 result = true; [EOL]                 break; [EOL]             } [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1009,1023
public void append(char value) { [EOL]     appendPrimary(value); [EOL]     appendAlternate(value); [EOL] } <line_num>: 1041,1044
public void append(char primary, char alternate) { [EOL]     appendPrimary(primary); [EOL]     appendAlternate(alternate); [EOL] } <line_num>: 1046,1049
public void appendPrimary(char value) { [EOL]     if (this.primary.length() < this.maxLength) { [EOL]         this.primary.append(value); [EOL]     } [EOL] } <line_num>: 1051,1055
public void appendAlternate(char value) { [EOL]     if (this.alternate.length() < this.maxLength) { [EOL]         this.alternate.append(value); [EOL]     } [EOL] } <line_num>: 1057,1061
public void append(String value) { [EOL]     appendPrimary(value); [EOL]     appendAlternate(value); [EOL] } <line_num>: 1063,1066
public void append(String primary, String alternate) { [EOL]     appendPrimary(primary); [EOL]     appendAlternate(alternate); [EOL] } <line_num>: 1068,1071
public void appendPrimary(String value) { [EOL]     int addChars = this.maxLength - this.primary.length(); [EOL]     if (value.length() <= addChars) { [EOL]         this.primary.append(value); [EOL]     } else { [EOL]         this.primary.append(value.substring(0, addChars)); [EOL]     } [EOL] } <line_num>: 1073,1080
public void appendAlternate(String value) { [EOL]     int addChars = this.maxLength - this.alternate.length(); [EOL]     if (value.length() <= addChars) { [EOL]         this.alternate.append(value); [EOL]     } else { [EOL]         this.alternate.append(value.substring(0, addChars)); [EOL]     } [EOL] } <line_num>: 1082,1089
public String getPrimary() { [EOL]     return this.primary.toString(); [EOL] } <line_num>: 1091,1093
public String getAlternate() { [EOL]     return this.alternate.toString(); [EOL] } <line_num>: 1095,1097
public boolean isComplete() { [EOL]     return this.primary.length() >= this.maxLength && this.alternate.length() >= this.maxLength; [EOL] } <line_num>: 1099,1102
