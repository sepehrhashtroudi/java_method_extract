CSVFormat(char delimiter, char encapsulator, char commentStart, char escape, boolean surroundingSpacesIgnored, boolean emptyLinesIgnored, String lineSeparator, String[] header) { [EOL]     this.delimiter = delimiter; [EOL]     this.encapsulator = encapsulator; [EOL]     this.commentStart = commentStart; [EOL]     this.escape = escape; [EOL]     this.surroundingSpacesIgnored = surroundingSpacesIgnored; [EOL]     this.emptyLinesIgnored = emptyLinesIgnored; [EOL]     this.lineSeparator = lineSeparator; [EOL]     this.header = header; [EOL] } <line_num>: 142,159
private static boolean isLineBreak(char c) { [EOL]     return c == '\n' || c == '\r'; [EOL] } <line_num>: 168,170
void validate() throws IllegalArgumentException { [EOL]     if (delimiter == encapsulator) { [EOL]         throw new IllegalArgumentException("The encapsulator character and the delimiter cannot be the same (\"" + encapsulator + "\")"); [EOL]     } [EOL]     if (delimiter == escape) { [EOL]         throw new IllegalArgumentException("The escape character and the delimiter cannot be the same (\"" + escape + "\")"); [EOL]     } [EOL]     if (delimiter == commentStart) { [EOL]         throw new IllegalArgumentException("The comment start character and the delimiter cannot be the same (\"" + commentStart + "\")"); [EOL]     } [EOL]     if (encapsulator != DISABLED && encapsulator == commentStart) { [EOL]         throw new IllegalArgumentException("The comment start character and the encapsulator cannot be the same (\"" + commentStart + "\")"); [EOL]     } [EOL]     if (escape != DISABLED && escape == commentStart) { [EOL]         throw new IllegalArgumentException("The comment start and the escape character cannot be the same (\"" + commentStart + "\")"); [EOL]     } [EOL] } <line_num>: 175,195
public char getDelimiter() { [EOL]     return delimiter; [EOL] } <line_num>: 202,204
public CSVFormat withDelimiter(char delimiter) { [EOL]     if (isLineBreak(delimiter)) { [EOL]         throw new IllegalArgumentException("The delimiter cannot be a line break"); [EOL]     } [EOL]     return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header); [EOL] } <line_num>: 213,219
public char getEncapsulator() { [EOL]     return encapsulator; [EOL] } <line_num>: 226,228
public CSVFormat withEncapsulator(char encapsulator) { [EOL]     if (isLineBreak(encapsulator)) { [EOL]         throw new IllegalArgumentException("The encapsulator cannot be a line break"); [EOL]     } [EOL]     return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header); [EOL] } <line_num>: 237,243
boolean isEncapsulating() { [EOL]     return this.encapsulator != DISABLED; [EOL] } <line_num>: 245,247
public char getCommentStart() { [EOL]     return commentStart; [EOL] } <line_num>: 254,256
public CSVFormat withCommentStart(char commentStart) { [EOL]     if (isLineBreak(commentStart)) { [EOL]         throw new IllegalArgumentException("The comment start character cannot be a line break"); [EOL]     } [EOL]     return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header); [EOL] } <line_num>: 265,271
public boolean isCommentingEnabled() { [EOL]     return this.commentStart != DISABLED; [EOL] } <line_num>: 278,280
public char getEscape() { [EOL]     return escape; [EOL] } <line_num>: 287,289
public CSVFormat withEscape(char escape) { [EOL]     if (isLineBreak(escape)) { [EOL]         throw new IllegalArgumentException("The escape character cannot be a line break"); [EOL]     } [EOL]     return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header); [EOL] } <line_num>: 298,304
boolean isEscaping() { [EOL]     return this.escape != DISABLED; [EOL] } <line_num>: 306,308
public boolean isSurroundingSpacesIgnored() { [EOL]     return surroundingSpacesIgnored; [EOL] } <line_num>: 315,317
public CSVFormat withSurroundingSpacesIgnored(boolean surroundingSpacesIgnored) { [EOL]     return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header); [EOL] } <line_num>: 326,328
public boolean isEmptyLinesIgnored() { [EOL]     return emptyLinesIgnored; [EOL] } <line_num>: 335,337
public CSVFormat withEmptyLinesIgnored(boolean emptyLinesIgnored) { [EOL]     return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header); [EOL] } <line_num>: 346,348
public String getLineSeparator() { [EOL]     return lineSeparator; [EOL] } <line_num>: 355,357
public CSVFormat withLineSeparator(String lineSeparator) { [EOL]     return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header); [EOL] } <line_num>: 366,368
String[] getHeader() { [EOL]     return header; [EOL] } <line_num>: 370,372
public CSVFormat withHeader(String... header) { [EOL]     return new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header); [EOL] } <line_num>: 388,390
public Iterable<CSVRecord> parse(Reader in) throws IOException { [EOL]     return new CSVParser(in, this); [EOL] } <line_num>: 397,399
public String format(String... values) { [EOL]     StringWriter out = new StringWriter(); [EOL]     try { [EOL]         new CSVPrinter(out, this).println(values); [EOL]     } catch (IOException e) { [EOL]     } [EOL]     return out.toString().trim(); [EOL] } <line_num>: 406,415
@Override [EOL] public String toString() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append("Delimiter=<").append(delimiter).append('>'); [EOL]     if (isEscaping()) { [EOL]         sb.append(' '); [EOL]         sb.append("Escape=<").append(escape).append('>'); [EOL]     } [EOL]     if (isEncapsulating()) { [EOL]         sb.append(' '); [EOL]         sb.append("Encapsulator=<").append(encapsulator).append('>'); [EOL]     } [EOL]     if (isCommentingEnabled()) { [EOL]         sb.append(' '); [EOL]         sb.append("CommentStart=<").append(commentStart).append('>'); [EOL]     } [EOL]     if (isEmptyLinesIgnored()) { [EOL]         sb.append(" EmptyLines:ignored"); [EOL]     } [EOL]     if (isSurroundingSpacesIgnored()) { [EOL]         sb.append(" SurroundingSpaces:ignored"); [EOL]     } [EOL]     return sb.toString(); [EOL] } <line_num>: 417,440
