Lexer(CSVFormat format, ExtendedBufferedReader in) { [EOL]     this.format = format; [EOL]     this.in = in; [EOL]     this.isEncapsulating = format.isEncapsulating(); [EOL]     this.isEscaping = format.isEscaping(); [EOL]     this.isCommentEnabled = format.isCommentingEnabled(); [EOL]     this.delimiter = format.getDelimiter(); [EOL]     this.escape = format.getEscape(); [EOL]     this.encapsulator = format.getEncapsulator(); [EOL]     this.commmentStart = format.getCommentStart(); [EOL]     this.surroundingSpacesIgnored = format.isSurroundingSpacesIgnored(); [EOL]     this.emptyLinesIgnored = format.isEmptyLinesIgnored(); [EOL] } <line_num>: 45,57
int getLineNumber() { [EOL]     return in.getLineNumber(); [EOL] } <line_num>: 59,61
int readEscape(int c) throws IOException { [EOL]     c = in.read(); [EOL]     switch(c) { [EOL]         case 'r': [EOL]             return '\r'; [EOL]         case 'n': [EOL]             return '\n'; [EOL]         case 't': [EOL]             return '\t'; [EOL]         case 'b': [EOL]             return '\b'; [EOL]         case 'f': [EOL]             return '\f'; [EOL]         default: [EOL]             return c; [EOL]     } [EOL] } <line_num>: 63,80
void trimTrailingSpaces(StringBuilder buffer) { [EOL]     int length = buffer.length(); [EOL]     while (length > 0 && Character.isWhitespace(buffer.charAt(length - 1))) { [EOL]         length = length - 1; [EOL]     } [EOL]     if (length != buffer.length()) { [EOL]         buffer.setLength(length); [EOL]     } [EOL] } <line_num>: 82,90
boolean isWhitespace(int c) { [EOL]     return (c != format.getDelimiter()) && Character.isWhitespace((char) c); [EOL] } <line_num>: 95,97
boolean isEndOfLine(int c) throws IOException { [EOL]     if (c == '\r' && in.lookAhead() == '\n') { [EOL]         c = in.read(); [EOL]     } [EOL]     return (c == '\n' || c == '\r'); [EOL] } <line_num>: 105,112
boolean isEndOfFile(int c) { [EOL]     return c == ExtendedBufferedReader.END_OF_STREAM; [EOL] } <line_num>: 117,119
abstract Token nextToken(Token reusableToken) throws IOException; <line_num>: 121,121
boolean isDelimiter(int c) { [EOL]     return c == delimiter; [EOL] } <line_num>: 123,125
boolean isEscape(int c) { [EOL]     return isEscaping && c == escape; [EOL] } <line_num>: 127,129
boolean isEncapsulator(int c) { [EOL]     return isEncapsulating && c == encapsulator; [EOL] } <line_num>: 131,133
boolean isCommentStart(int c) { [EOL]     return isCommentEnabled && c == commmentStart; [EOL] } <line_num>: 135,137
