public CSVPrinter(Appendable out, CSVFormat format) { [EOL]     this.out = out; [EOL]     this.format = format == null ? CSVFormat.DEFAULT : format; [EOL]     this.format.validate(); [EOL] } <line_num>: 45,50
public void println() throws IOException { [EOL]     out.append(format.getLineSeparator()); [EOL]     newLine = true; [EOL] } <line_num>: 59,62
public void flush() throws IOException { [EOL]     if (out instanceof Flushable) { [EOL]         ((Flushable) out).flush(); [EOL]     } [EOL] } <line_num>: 69,73
public void println(String... values) throws IOException { [EOL]     for (String value : values) { [EOL]         print(value); [EOL]     } [EOL]     println(); [EOL] } <line_num>: 82,87
public void printComment(String comment) throws IOException { [EOL]     if (!format.isCommentingEnabled()) { [EOL]         return; [EOL]     } [EOL]     if (!newLine) { [EOL]         println(); [EOL]     } [EOL]     out.append(format.getCommentStart()); [EOL]     out.append(' '); [EOL]     for (int i = 0; i < comment.length(); i++) { [EOL]         char c = comment.charAt(i); [EOL]         switch(c) { [EOL]             case '\r': [EOL]                 if (i + 1 < comment.length() && comment.charAt(i + 1) == '\n') { [EOL]                     i++; [EOL]                 } [EOL]             case '\n': [EOL]                 println(); [EOL]                 out.append(format.getCommentStart()); [EOL]                 out.append(' '); [EOL]                 break; [EOL]             default: [EOL]                 out.append(c); [EOL]                 break; [EOL]         } [EOL]     } [EOL]     println(); [EOL] } <line_num>: 100,128
private void print(CharSequence value, int offset, int len) throws IOException { [EOL]     if (format.isEncapsulating()) { [EOL]         printAndEncapsulate(value, offset, len); [EOL]     } else if (format.isEscaping()) { [EOL]         printAndEscape(value, offset, len); [EOL]     } else { [EOL]         printSep(); [EOL]         out.append(value, offset, offset + len); [EOL]     } [EOL] } <line_num>: 131,140
void printSep() throws IOException { [EOL]     if (newLine) { [EOL]         newLine = false; [EOL]     } else { [EOL]         out.append(format.getDelimiter()); [EOL]     } [EOL] } <line_num>: 142,148
void printAndEscape(CharSequence value, int offset, int len) throws IOException { [EOL]     int start = offset; [EOL]     int pos = offset; [EOL]     int end = offset + len; [EOL]     printSep(); [EOL]     char delim = format.getDelimiter(); [EOL]     char escape = format.getEscape(); [EOL]     while (pos < end) { [EOL]         char c = value.charAt(pos); [EOL]         if (c == '\r' || c == '\n' || c == delim || c == escape) { [EOL]             if (pos > start) { [EOL]                 out.append(value, start, pos); [EOL]             } [EOL]             if (c == '\n') { [EOL]                 c = 'n'; [EOL]             } else if (c == '\r') { [EOL]                 c = 'r'; [EOL]             } [EOL]             out.append(escape); [EOL]             out.append(c); [EOL]             start = pos + 1; [EOL]         } [EOL]         pos++; [EOL]     } [EOL]     if (pos > start) { [EOL]         out.append(value, start, pos); [EOL]     } [EOL] } <line_num>: 150,186
void printAndEncapsulate(CharSequence value, int offset, int len) throws IOException { [EOL]     boolean first = newLine; [EOL]     boolean quote = false; [EOL]     int start = offset; [EOL]     int pos = offset; [EOL]     int end = offset + len; [EOL]     printSep(); [EOL]     char delim = format.getDelimiter(); [EOL]     char encapsulator = format.getEncapsulator(); [EOL]     if (len <= 0) { [EOL]         if (first) { [EOL]             quote = true; [EOL]         } [EOL]     } else { [EOL]         char c = value.charAt(pos); [EOL]         if (first && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) { [EOL]             quote = true; [EOL]         } else if (c <= '#') { [EOL]             quote = true; [EOL]         } else { [EOL]             while (pos < end) { [EOL]                 c = value.charAt(pos); [EOL]                 if (c == '\n' || c == '\r' || c == encapsulator || c == delim) { [EOL]                     quote = true; [EOL]                     break; [EOL]                 } [EOL]                 pos++; [EOL]             } [EOL]             if (!quote) { [EOL]                 pos = end - 1; [EOL]                 c = value.charAt(pos); [EOL]                 if (c <= ' ') { [EOL]                     quote = true; [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     if (!quote) { [EOL]         out.append(value, start, end); [EOL]         return; [EOL]     } [EOL]     out.append(encapsulator); [EOL]     while (pos < end) { [EOL]         char c = value.charAt(pos); [EOL]         if (c == encapsulator) { [EOL]             out.append(value, start, pos + 1); [EOL]             start = pos; [EOL]         } [EOL]         pos++; [EOL]     } [EOL]     out.append(value, start, pos); [EOL]     out.append(encapsulator); [EOL] } <line_num>: 188,275
public void print(String value, boolean checkForEscape) throws IOException { [EOL]     if (value == null) { [EOL]         value = ""; [EOL]     } [EOL]     if (!checkForEscape) { [EOL]         printSep(); [EOL]         out.append(value); [EOL]     } else { [EOL]         print(value, 0, value.length()); [EOL]     } [EOL] } <line_num>: 283,296
public void print(String value) throws IOException { [EOL]     print(value, true); [EOL] } <line_num>: 304,306
