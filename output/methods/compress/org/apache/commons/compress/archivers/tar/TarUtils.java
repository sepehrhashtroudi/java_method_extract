public static long parseOctal(byte[] header, int offset, int length) { [EOL]     long result = 0; [EOL]     boolean stillPadding = true; [EOL]     int end = offset + length; [EOL]     for (int i = offset; i < end; ++i) { [EOL]         if (header[i] == 0) { [EOL]             break; [EOL]         } [EOL]         if (header[i] == (byte) ' ' || header[i] == '0') { [EOL]             if (stillPadding) { [EOL]                 continue; [EOL]             } [EOL]             if (header[i] == (byte) ' ') { [EOL]                 break; [EOL]             } [EOL]         } [EOL]         stillPadding = false; [EOL]         result = (result << 3) + (header[i] - '0'); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 39,66
public static StringBuffer parseName(byte[] header, int offset, int length) { [EOL]     StringBuffer result = new StringBuffer(length); [EOL]     int end = offset + length; [EOL]     for (int i = offset; i < end; ++i) { [EOL]         if (header[i] == 0) { [EOL]             break; [EOL]         } [EOL]         result.append((char) header[i]); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 76,89
public static int getNameBytes(StringBuffer name, byte[] buf, int offset, int length) { [EOL]     int i; [EOL]     for (i = 0; i < length && i < name.length(); ++i) { [EOL]         buf[offset + i] = (byte) name.charAt(i); [EOL]     } [EOL]     for (; i < length; ++i) { [EOL]         buf[offset + i] = 0; [EOL]     } [EOL]     return offset + length; [EOL] } <line_num>: 100,112
public static int getOctalBytes(long value, byte[] buf, int offset, int length) { [EOL]     int idx = length - 1; [EOL]     buf[offset + idx] = 0; [EOL]     --idx; [EOL]     buf[offset + idx] = (byte) ' '; [EOL]     --idx; [EOL]     if (value == 0) { [EOL]         buf[offset + idx] = (byte) '0'; [EOL]         --idx; [EOL]     } else { [EOL]         for (long val = value; idx >= 0 && val > 0; --idx) { [EOL]             buf[offset + idx] = (byte) ((byte) '0' + (byte) (val & 7)); [EOL]             val = val >> 3; [EOL]         } [EOL]     } [EOL]     for (; idx >= 0; --idx) { [EOL]         buf[offset + idx] = (byte) ' '; [EOL]     } [EOL]     return offset + length; [EOL] } <line_num>: 123,148
public static int getLongOctalBytes(long value, byte[] buf, int offset, int length) { [EOL]     byte[] temp = new byte[length + 1]; [EOL]     getOctalBytes(value, temp, 0, length + 1); [EOL]     System.arraycopy(temp, 0, buf, offset, length); [EOL]     return offset + length; [EOL] } <line_num>: 159,166
public static int getCheckSumOctalBytes(long value, byte[] buf, int offset, int length) { [EOL]     getOctalBytes(value, buf, offset, length); [EOL]     buf[offset + length - 1] = (byte) ' '; [EOL]     buf[offset + length - 2] = 0; [EOL]     return offset + length; [EOL] } <line_num>: 177,184
public static long computeCheckSum(byte[] buf) { [EOL]     long sum = 0; [EOL]     for (int i = 0; i < buf.length; ++i) { [EOL]         sum += BYTE_MASK & buf[i]; [EOL]     } [EOL]     return sum; [EOL] } <line_num>: 192,200
