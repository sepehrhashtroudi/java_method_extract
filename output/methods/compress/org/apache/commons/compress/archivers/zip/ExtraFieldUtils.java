public static void register(Class c) { [EOL]     try { [EOL]         ZipExtraField ze = (ZipExtraField) c.newInstance(); [EOL]         implementations.put(ze.getHeaderId(), c); [EOL]     } catch (ClassCastException cc) { [EOL]         throw new RuntimeException(c + " doesn\'t implement ZipExtraField"); [EOL]     } catch (InstantiationException ie) { [EOL]         throw new RuntimeException(c + " is not a concrete class"); [EOL]     } catch (IllegalAccessException ie) { [EOL]         throw new RuntimeException(c + "\'s no-arg constructor is not public"); [EOL]     } [EOL] } <line_num>: 55,66
public static ZipExtraField createExtraField(ZipShort headerId) throws InstantiationException, IllegalAccessException { [EOL]     Class c = (Class) implementations.get(headerId); [EOL]     if (c != null) { [EOL]         return (ZipExtraField) c.newInstance(); [EOL]     } [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(headerId); [EOL]     return u; [EOL] } <line_num>: 76,85
public static ZipExtraField[] parse(byte[] data) throws ZipException { [EOL]     return parse(data, true); [EOL] } <line_num>: 94,96
public static ZipExtraField[] parse(byte[] data, boolean local) throws ZipException { [EOL]     List v = new ArrayList(); [EOL]     int start = 0; [EOL]     while (start <= data.length - WORD) { [EOL]         ZipShort headerId = new ZipShort(data, start); [EOL]         int length = (new ZipShort(data, start + 2)).getValue(); [EOL]         if (start + WORD + length > data.length) { [EOL]             throw new ZipException("data starting at " + start + " is in unknown format"); [EOL]         } [EOL]         try { [EOL]             ZipExtraField ze = createExtraField(headerId); [EOL]             if (local) { [EOL]                 ze.parseFromLocalFileData(data, start + WORD, length); [EOL]             } else { [EOL]                 ze.parseFromCentralDirectoryData(data, start + WORD, length); [EOL]             } [EOL]             v.add(ze); [EOL]         } catch (InstantiationException ie) { [EOL]             throw new ZipException(ie.getMessage()); [EOL]         } catch (IllegalAccessException iae) { [EOL]             throw new ZipException(iae.getMessage()); [EOL]         } [EOL]         start += (length + WORD); [EOL]     } [EOL]     ZipExtraField[] result = new ZipExtraField[v.size()]; [EOL]     return (ZipExtraField[]) v.toArray(result); [EOL] } <line_num>: 107,137
public static byte[] mergeLocalFileDataData(ZipExtraField[] data) { [EOL]     int sum = WORD * data.length; [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         sum += data[i].getLocalFileDataLength().getValue(); [EOL]     } [EOL]     byte[] result = new byte[sum]; [EOL]     int start = 0; [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         System.arraycopy(data[i].getHeaderId().getBytes(), 0, result, start, 2); [EOL]         System.arraycopy(data[i].getLocalFileDataLength().getBytes(), 0, result, start + 2, 2); [EOL]         byte[] local = data[i].getLocalFileDataData(); [EOL]         System.arraycopy(local, 0, result, start + WORD, local.length); [EOL]         start += (local.length + WORD); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 144,161
public static byte[] mergeCentralDirectoryData(ZipExtraField[] data) { [EOL]     int sum = WORD * data.length; [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         sum += data[i].getCentralDirectoryLength().getValue(); [EOL]     } [EOL]     byte[] result = new byte[sum]; [EOL]     int start = 0; [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         System.arraycopy(data[i].getHeaderId().getBytes(), 0, result, start, 2); [EOL]         System.arraycopy(data[i].getCentralDirectoryLength().getBytes(), 0, result, start + 2, 2); [EOL]         byte[] local = data[i].getCentralDirectoryData(); [EOL]         System.arraycopy(local, 0, result, start + WORD, local.length); [EOL]         start += (local.length + WORD); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 168,185
