public TarBuffer(InputStream inStream) { [EOL]     this(inStream, TarBuffer.DEFAULT_BLKSIZE); [EOL] } <line_num>: 61,63
public TarBuffer(InputStream inStream, int blockSize) { [EOL]     this(inStream, blockSize, TarBuffer.DEFAULT_RCDSIZE); [EOL] } <line_num>: 70,72
public TarBuffer(InputStream inStream, int blockSize, int recordSize) { [EOL]     this.inStream = inStream; [EOL]     this.outStream = null; [EOL]     this.initialize(blockSize, recordSize); [EOL] } <line_num>: 80,85
public TarBuffer(OutputStream outStream) { [EOL]     this(outStream, TarBuffer.DEFAULT_BLKSIZE); [EOL] } <line_num>: 91,93
public TarBuffer(OutputStream outStream, int blockSize) { [EOL]     this(outStream, blockSize, TarBuffer.DEFAULT_RCDSIZE); [EOL] } <line_num>: 100,102
public TarBuffer(OutputStream outStream, int blockSize, int recordSize) { [EOL]     this.inStream = null; [EOL]     this.outStream = outStream; [EOL]     this.initialize(blockSize, recordSize); [EOL] } <line_num>: 110,115
private void initialize(int blockSize, int recordSize) { [EOL]     this.debug = false; [EOL]     this.blockSize = blockSize; [EOL]     this.recordSize = recordSize; [EOL]     this.recsPerBlock = (this.blockSize / this.recordSize); [EOL]     this.blockBuffer = new byte[this.blockSize]; [EOL]     if (this.inStream != null) { [EOL]         this.currBlkIdx = -1; [EOL]         this.currRecIdx = this.recsPerBlock; [EOL]     } else { [EOL]         this.currBlkIdx = 0; [EOL]         this.currRecIdx = 0; [EOL]     } [EOL] } <line_num>: 120,134
public int getBlockSize() { [EOL]     return this.blockSize; [EOL] } <line_num>: 140,142
public int getRecordSize() { [EOL]     return this.recordSize; [EOL] } <line_num>: 148,150
public void setDebug(boolean debug) { [EOL]     this.debug = debug; [EOL] } <line_num>: 157,159
public boolean isEOFRecord(byte[] record) { [EOL]     for (int i = 0, sz = getRecordSize(); i < sz; ++i) { [EOL]         if (record[i] != 0) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 168,176
public void skipRecord() throws IOException { [EOL]     if (debug) { [EOL]         System.err.println("SkipRecord: recIdx = " + currRecIdx + " blkIdx = " + currBlkIdx); [EOL]     } [EOL]     if (inStream == null) { [EOL]         throw new IOException("reading (via skip) from an output buffer"); [EOL]     } [EOL]     if (currRecIdx >= recsPerBlock) { [EOL]         if (!readBlock()) { [EOL]             return; [EOL]         } [EOL]     } [EOL]     currRecIdx++; [EOL] } <line_num>: 182,199
public byte[] readRecord() throws IOException { [EOL]     if (debug) { [EOL]         System.err.println("ReadRecord: recIdx = " + currRecIdx + " blkIdx = " + currBlkIdx); [EOL]     } [EOL]     if (inStream == null) { [EOL]         throw new IOException("reading from an output buffer"); [EOL]     } [EOL]     if (currRecIdx >= recsPerBlock) { [EOL]         if (!readBlock()) { [EOL]             return null; [EOL]         } [EOL]     } [EOL]     byte[] result = new byte[recordSize]; [EOL]     System.arraycopy(blockBuffer, (currRecIdx * recordSize), result, 0, recordSize); [EOL]     currRecIdx++; [EOL]     return result; [EOL] } <line_num>: 207,232
private boolean readBlock() throws IOException { [EOL]     if (debug) { [EOL]         System.err.println("ReadBlock: blkIdx = " + currBlkIdx); [EOL]     } [EOL]     if (inStream == null) { [EOL]         throw new IOException("reading from an output buffer"); [EOL]     } [EOL]     currRecIdx = 0; [EOL]     int offset = 0; [EOL]     int bytesNeeded = blockSize; [EOL]     while (bytesNeeded > 0) { [EOL]         long numBytes = inStream.read(blockBuffer, offset, bytesNeeded); [EOL]         if (numBytes == -1) { [EOL]             if (offset == 0) { [EOL]                 return false; [EOL]             } [EOL]             Arrays.fill(blockBuffer, offset, offset + bytesNeeded, (byte) 0); [EOL]             break; [EOL]         } [EOL]         offset += numBytes; [EOL]         bytesNeeded -= numBytes; [EOL]         if (numBytes != blockSize) { [EOL]             if (debug) { [EOL]                 System.err.println("ReadBlock: INCOMPLETE READ " + numBytes + " of " + blockSize + " bytes read."); [EOL]             } [EOL]         } [EOL]     } [EOL]     currBlkIdx++; [EOL]     return true; [EOL] } <line_num>: 237,301
public int getCurrentBlockNum() { [EOL]     return currBlkIdx; [EOL] } <line_num>: 308,310
public int getCurrentRecordNum() { [EOL]     return currRecIdx - 1; [EOL] } <line_num>: 318,320
public void writeRecord(byte[] record) throws IOException { [EOL]     if (debug) { [EOL]         System.err.println("WriteRecord: recIdx = " + currRecIdx + " blkIdx = " + currBlkIdx); [EOL]     } [EOL]     if (outStream == null) { [EOL]         throw new IOException("writing to an input buffer"); [EOL]     } [EOL]     if (record.length != recordSize) { [EOL]         throw new IOException("record to write has length '" + record.length + "' which is not the record size of '" + recordSize + "'"); [EOL]     } [EOL]     if (currRecIdx >= recsPerBlock) { [EOL]         writeBlock(); [EOL]     } [EOL]     System.arraycopy(record, 0, blockBuffer, (currRecIdx * recordSize), recordSize); [EOL]     currRecIdx++; [EOL] } <line_num>: 328,354
public void writeRecord(byte[] buf, int offset) throws IOException { [EOL]     if (debug) { [EOL]         System.err.println("WriteRecord: recIdx = " + currRecIdx + " blkIdx = " + currBlkIdx); [EOL]     } [EOL]     if (outStream == null) { [EOL]         throw new IOException("writing to an input buffer"); [EOL]     } [EOL]     if ((offset + recordSize) > buf.length) { [EOL]         throw new IOException("record has length '" + buf.length + "' with offset '" + offset + "' which is less than the record size of '" + recordSize + "'"); [EOL]     } [EOL]     if (currRecIdx >= recsPerBlock) { [EOL]         writeBlock(); [EOL]     } [EOL]     System.arraycopy(buf, offset, blockBuffer, (currRecIdx * recordSize), recordSize); [EOL]     currRecIdx++; [EOL] } <line_num>: 365,391
private void writeBlock() throws IOException { [EOL]     if (debug) { [EOL]         System.err.println("WriteBlock: blkIdx = " + currBlkIdx); [EOL]     } [EOL]     if (outStream == null) { [EOL]         throw new IOException("writing to an input buffer"); [EOL]     } [EOL]     outStream.write(blockBuffer, 0, blockSize); [EOL]     outStream.flush(); [EOL]     currRecIdx = 0; [EOL]     currBlkIdx++; [EOL] } <line_num>: 396,410
private void flushBlock() throws IOException { [EOL]     if (debug) { [EOL]         System.err.println("TarBuffer.flushBlock() called."); [EOL]     } [EOL]     if (outStream == null) { [EOL]         throw new IOException("writing to an input buffer"); [EOL]     } [EOL]     if (currRecIdx > 0) { [EOL]         writeBlock(); [EOL]     } [EOL] } <line_num>: 415,427
public void close() throws IOException { [EOL]     if (debug) { [EOL]         System.err.println("TarBuffer.closeBuffer()."); [EOL]     } [EOL]     if (outStream != null) { [EOL]         flushBlock(); [EOL]         if (outStream != System.out && outStream != System.err) { [EOL]             outStream.close(); [EOL]             outStream = null; [EOL]         } [EOL]     } else if (inStream != null) { [EOL]         if (inStream != System.in) { [EOL]             inStream.close(); [EOL]             inStream = null; [EOL]         } [EOL]     } [EOL] } <line_num>: 434,455
