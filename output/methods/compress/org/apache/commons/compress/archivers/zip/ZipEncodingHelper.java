SimpleEncodingHolder(char[] highChars) { [EOL]     this.highChars = highChars; [EOL] } <line_num>: 49,51
public synchronized Simple8BitZipEncoding getEncoding() { [EOL]     if (this.encoding == null) { [EOL]         this.encoding = new Simple8BitZipEncoding(this.highChars); [EOL]     } [EOL]     return this.encoding; [EOL] } <line_num>: 57,62
static ByteBuffer growBuffer(ByteBuffer b, int newCapacity) { [EOL]     b.limit(b.position()); [EOL]     b.rewind(); [EOL]     int c2 = b.capacity() * 2; [EOL]     ByteBuffer on = ByteBuffer.allocate(c2 < newCapacity ? newCapacity : c2); [EOL]     on.put(b); [EOL]     return on; [EOL] } <line_num>: 147,156
static void appendSurrogate(ByteBuffer bb, char c) { [EOL]     bb.put((byte) '%'); [EOL]     bb.put((byte) 'U'); [EOL]     bb.put(HEX_DIGITS[(c >> 12) & 0x0f]); [EOL]     bb.put(HEX_DIGITS[(c >> 8) & 0x0f]); [EOL]     bb.put(HEX_DIGITS[(c >> 4) & 0x0f]); [EOL]     bb.put(HEX_DIGITS[c & 0x0f]); [EOL] } <line_num>: 176,185
static ZipEncoding getZipEncoding(String name) { [EOL]     if (isUTF8(name)) { [EOL]         return UTF8_ZIP_ENCODING; [EOL]     } [EOL]     if (name == null) { [EOL]         return new FallbackZipEncoding(); [EOL]     } [EOL]     SimpleEncodingHolder h = (SimpleEncodingHolder) simpleEncodings.get(name); [EOL]     if (h != null) { [EOL]         return h.getEncoding(); [EOL]     } [EOL]     try { [EOL]         Charset cs = Charset.forName(name); [EOL]         return new NioZipEncoding(cs); [EOL]     } catch (UnsupportedCharsetException e) { [EOL]         return new FallbackZipEncoding(name); [EOL]     } [EOL] } <line_num>: 205,231
static boolean isUTF8(String encoding) { [EOL]     if (encoding == null) { [EOL]         encoding = System.getProperty("file.encoding"); [EOL]     } [EOL]     return UTF8.equalsIgnoreCase(encoding) || "utf-8".equalsIgnoreCase(encoding); [EOL] } <line_num>: 237,244
