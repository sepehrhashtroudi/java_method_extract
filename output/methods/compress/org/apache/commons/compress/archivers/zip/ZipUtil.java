public static ZipLong toDosTime(Date time) { [EOL]     return new ZipLong(toDosTime(time.getTime())); [EOL] } <line_num>: 34,36
public static byte[] toDosTime(long t) { [EOL]     Date time = new Date(t); [EOL]     int year = time.getYear() + 1900; [EOL]     if (year < 1980) { [EOL]         return DOS_TIME_MIN; [EOL]     } [EOL]     int month = time.getMonth() + 1; [EOL]     long value = ((year - 1980) << 25) | (month << 21) | (time.getDate() << 16) | (time.getHours() << 11) | (time.getMinutes() << 5) | (time.getSeconds() >> 1); [EOL]     return ZipLong.getBytes(value); [EOL] } <line_num>: 45,62
public static long adjustToLong(int i) { [EOL]     if (i < 0) { [EOL]         return 2 * ((long) Integer.MAX_VALUE) + 2 + i; [EOL]     } else { [EOL]         return i; [EOL]     } [EOL] } <line_num>: 70,76
public static Date fromDosTime(ZipLong zipDosTime) { [EOL]     long dosTime = zipDosTime.getValue(); [EOL]     return new Date(dosToJavaTime(dosTime)); [EOL] } <line_num>: 84,87
public static long dosToJavaTime(long dosTime) { [EOL]     Calendar cal = Calendar.getInstance(); [EOL]     cal.set(Calendar.YEAR, (int) ((dosTime >> 25) & 0x7f) + 1980); [EOL]     cal.set(Calendar.MONTH, (int) ((dosTime >> 21) & 0x0f) - 1); [EOL]     cal.set(Calendar.DATE, (int) (dosTime >> 16) & 0x1f); [EOL]     cal.set(Calendar.HOUR_OF_DAY, (int) (dosTime >> 11) & 0x1f); [EOL]     cal.set(Calendar.MINUTE, (int) (dosTime >> 5) & 0x3f); [EOL]     cal.set(Calendar.SECOND, (int) (dosTime << 1) & 0x3e); [EOL]     return cal.getTime().getTime(); [EOL] } <line_num>: 93,104
