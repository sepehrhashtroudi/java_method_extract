Simple8BitChar(byte code, char unicode) { [EOL]     this.code = code; [EOL]     this.unicode = unicode; [EOL] } <line_num>: 56,59
public Simple8BitZipEncoding(char[] highChars) { [EOL]     this.highChars = highChars; [EOL]     this.reverseMapping = new ArrayList(this.highChars.length); [EOL]     byte code = 127; [EOL]     for (int i = 0; i < this.highChars.length; ++i) { [EOL]         this.reverseMapping.add(new Simple8BitChar(++code, this.highChars[i])); [EOL]     } [EOL]     Collections.sort(this.reverseMapping); [EOL] } <line_num>: 90,102
public int compareTo(Object o) { [EOL]     Simple8BitChar a = (Simple8BitChar) o; [EOL]     return this.unicode - a.unicode; [EOL] } <line_num>: 61,65
public String toString() { [EOL]     return "0x" + Integer.toHexString(0xffff & unicode) + "->0x" + Integer.toHexString(0xff & code); [EOL] } <line_num>: 67,70
public char decodeByte(byte b) { [EOL]     if (b >= 0) { [EOL]         return (char) b; [EOL]     } [EOL]     return this.highChars[128 + b]; [EOL] } <line_num>: 110,118
public boolean canEncodeChar(char c) { [EOL]     if (c >= 0 && c < 128) { [EOL]         return true; [EOL]     } [EOL]     Simple8BitChar r = this.encodeHighChar(c); [EOL]     return r != null; [EOL] } <line_num>: 124,132
public boolean pushEncodedChar(ByteBuffer bb, char c) { [EOL]     if (c >= 0 && c < 128) { [EOL]         bb.put((byte) c); [EOL]         return true; [EOL]     } [EOL]     Simple8BitChar r = this.encodeHighChar(c); [EOL]     if (r == null) { [EOL]         return false; [EOL]     } [EOL]     bb.put(r.code); [EOL]     return true; [EOL] } <line_num>: 143,156
private Simple8BitChar encodeHighChar(char c) { [EOL]     int i0 = 0; [EOL]     int i1 = this.reverseMapping.size(); [EOL]     while (i1 > i0) { [EOL]         int i = i0 + (i1 - i0) / 2; [EOL]         Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i); [EOL]         if (m.unicode == c) { [EOL]             return m; [EOL]         } [EOL]         if (m.unicode < c) { [EOL]             i0 = i + 1; [EOL]         } else { [EOL]             i1 = i; [EOL]         } [EOL]     } [EOL]     if (i0 >= this.reverseMapping.size()) { [EOL]         return null; [EOL]     } [EOL]     Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0); [EOL]     if (r.unicode != c) { [EOL]         return null; [EOL]     } [EOL]     return r; [EOL] } <line_num>: 164,198
public boolean canEncode(String name) { [EOL]     for (int i = 0; i < name.length(); ++i) { [EOL]         char c = name.charAt(i); [EOL]         if (!this.canEncodeChar(c)) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 204,216
public ByteBuffer encode(String name) { [EOL]     ByteBuffer out = ByteBuffer.allocate(name.length() + 6 + (name.length() + 1) / 2); [EOL]     for (int i = 0; i < name.length(); ++i) { [EOL]         char c = name.charAt(i); [EOL]         if (out.remaining() < 6) { [EOL]             out = ZipEncodingHelper.growBuffer(out, out.position() + 6); [EOL]         } [EOL]         if (!this.pushEncodedChar(out, c)) { [EOL]             ZipEncodingHelper.appendSurrogate(out, c); [EOL]         } [EOL]     } [EOL]     out.limit(out.position()); [EOL]     out.rewind(); [EOL]     return out; [EOL] } <line_num>: 222,243
public String decode(byte[] data) throws IOException { [EOL]     char[] ret = new char[data.length]; [EOL]     for (int i = 0; i < data.length; ++i) { [EOL]         ret[i] = this.decodeByte(data[i]); [EOL]     } [EOL]     return new String(ret); [EOL] } <line_num>: 249,257
