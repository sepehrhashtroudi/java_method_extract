public TarArchiveOutputStream(OutputStream os) { [EOL]     this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE); [EOL] } <line_num>: 61,63
public TarArchiveOutputStream(OutputStream os, int blockSize) { [EOL]     this(os, blockSize, TarBuffer.DEFAULT_RCDSIZE); [EOL] } <line_num>: 70,72
public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize) { [EOL]     out = os; [EOL]     this.buffer = new TarBuffer(os, blockSize, recordSize); [EOL]     this.debug = false; [EOL]     this.assemLen = 0; [EOL]     this.assemBuf = new byte[recordSize]; [EOL]     this.recordBuf = new byte[recordSize]; [EOL]     this.oneBuf = new byte[1]; [EOL] } <line_num>: 80,89
public void setLongFileMode(int longFileMode) { [EOL]     this.longFileMode = longFileMode; [EOL] } <line_num>: 98,100
public void setDebug(boolean debugF) { [EOL]     this.debug = debugF; [EOL] } <line_num>: 108,110
public void setBufferDebug(boolean debug) { [EOL]     buffer.setDebug(debug); [EOL] } <line_num>: 117,119
public void finish() throws IOException { [EOL]     writeEOFRecord(); [EOL]     writeEOFRecord(); [EOL] } <line_num>: 126,131
public void close() throws IOException { [EOL]     if (!closed) { [EOL]         finish(); [EOL]         buffer.close(); [EOL]         out.close(); [EOL]         closed = true; [EOL]     } [EOL] } <line_num>: 139,146
public int getRecordSize() { [EOL]     return buffer.getRecordSize(); [EOL] } <line_num>: 153,155
public void putNextEntry(TarArchiveEntry entry) throws IOException { [EOL]     if (entry.getName().length() >= TarConstants.NAMELEN) { [EOL]         if (longFileMode == LONGFILE_GNU) { [EOL]             TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME); [EOL]             longLinkEntry.setSize(entry.getName().length() + 1); [EOL]             putNextEntry(longLinkEntry); [EOL]             write(entry.getName().getBytes()); [EOL]             write(0); [EOL]             closeEntry(); [EOL]         } else if (longFileMode != LONGFILE_TRUNCATE) { [EOL]             throw new RuntimeException("file name '" + entry.getName() + "' is too long ( > " + TarConstants.NAMELEN + " bytes)"); [EOL]         } [EOL]     } [EOL]     entry.writeEntryHeader(recordBuf); [EOL]     buffer.writeRecord(recordBuf); [EOL]     currBytes = 0; [EOL]     if (entry.isDirectory()) { [EOL]         currSize = 0; [EOL]     } else { [EOL]         currSize = entry.getSize(); [EOL]     } [EOL]     currName = entry.getName(); [EOL] } <line_num>: 169,201
public void closeEntry() throws IOException { [EOL]     if (assemLen > 0) { [EOL]         for (int i = assemLen; i < assemBuf.length; ++i) { [EOL]             assemBuf[i] = 0; [EOL]         } [EOL]         buffer.writeRecord(assemBuf); [EOL]         currBytes += assemLen; [EOL]         assemLen = 0; [EOL]     } [EOL]     if (currBytes < currSize) { [EOL]         throw new IOException("entry '" + currName + "' closed at '" + currBytes + "' before the '" + currSize + "' bytes specified in the header were written"); [EOL]     } [EOL] } <line_num>: 213,231
public void write(int b) throws IOException { [EOL]     oneBuf[0] = (byte) b; [EOL]     write(oneBuf, 0, 1); [EOL] } <line_num>: 241,245
public void write(byte[] wBuf) throws IOException { [EOL]     write(wBuf, 0, wBuf.length); [EOL] } <line_num>: 255,257
public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException { [EOL]     if ((currBytes + numToWrite) > currSize) { [EOL]         throw new IOException("request to write '" + numToWrite + "' bytes exceeds size in header of '" + currSize + "' bytes for entry '" + currName + "'"); [EOL]     } [EOL]     if (assemLen > 0) { [EOL]         if ((assemLen + numToWrite) >= recordBuf.length) { [EOL]             int aLen = recordBuf.length - assemLen; [EOL]             System.arraycopy(assemBuf, 0, recordBuf, 0, assemLen); [EOL]             System.arraycopy(wBuf, wOffset, recordBuf, assemLen, aLen); [EOL]             buffer.writeRecord(recordBuf); [EOL]             currBytes += recordBuf.length; [EOL]             wOffset += aLen; [EOL]             numToWrite -= aLen; [EOL]             assemLen = 0; [EOL]         } else { [EOL]             System.arraycopy(wBuf, wOffset, assemBuf, assemLen, numToWrite); [EOL]             wOffset += numToWrite; [EOL]             assemLen += numToWrite; [EOL]             numToWrite = 0; [EOL]         } [EOL]     } [EOL]     while (numToWrite > 0) { [EOL]         if (numToWrite < recordBuf.length) { [EOL]             System.arraycopy(wBuf, wOffset, assemBuf, assemLen, numToWrite); [EOL]             assemLen += numToWrite; [EOL]             break; [EOL]         } [EOL]         buffer.writeRecord(wBuf, wOffset); [EOL]         int num = recordBuf.length; [EOL]         currBytes += num; [EOL]         numToWrite -= num; [EOL]         wOffset += num; [EOL]     } [EOL] } <line_num>: 273,336
private void writeEOFRecord() throws IOException { [EOL]     for (int i = 0; i < recordBuf.length; ++i) { [EOL]         recordBuf[i] = 0; [EOL]     } [EOL]     buffer.writeRecord(recordBuf); [EOL] } <line_num>: 342,348
public void flush() throws IOException { [EOL]     out.flush(); [EOL] } <line_num>: 351,353
public void closeArchiveEntry() throws IOException { [EOL]     closeEntry(); [EOL] } <line_num>: 357,359
public void putArchiveEntry(ArchiveEntry entry) throws IOException { [EOL]     putNextEntry((TarArchiveEntry) entry); [EOL] } <line_num>: 361,363
public String getDefaultFileExtension() { [EOL]     return "tar"; [EOL] } <line_num>: 365,367
public String getName() { [EOL]     return "tar"; [EOL] } <line_num>: 369,371
