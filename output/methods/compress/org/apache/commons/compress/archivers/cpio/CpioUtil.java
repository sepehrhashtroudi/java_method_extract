static long byteArray2long(final byte[] number, final boolean swapHalfWord) { [EOL]     long ret = 0; [EOL]     int pos = 0; [EOL]     byte[] tmp_number = new byte[number.length]; [EOL]     System.arraycopy(number, 0, tmp_number, 0, number.length); [EOL]     if (tmp_number.length % 2 != 0) { [EOL]         throw new UnsupportedOperationException(); [EOL]     } [EOL]     if (!swapHalfWord) { [EOL]         byte tmp = 0; [EOL]         for (pos = 0; pos < tmp_number.length; pos++) { [EOL]             tmp = tmp_number[pos]; [EOL]             tmp_number[pos++] = tmp_number[pos]; [EOL]             tmp_number[pos] = tmp; [EOL]         } [EOL]     } [EOL]     ret = tmp_number[0] & 0xFF; [EOL]     for (pos = 1; pos < tmp_number.length; pos++) { [EOL]         ret <<= 8; [EOL]         ret |= tmp_number[pos] & 0xFF; [EOL]     } [EOL]     return ret; [EOL] } <line_num>: 32,57
static byte[] long2byteArray(final long number, final int length, final boolean swapHalfWord) { [EOL]     byte[] ret = new byte[length]; [EOL]     int pos = 0; [EOL]     long tmp_number = 0; [EOL]     if (length % 2 != 0 || length < 2) { [EOL]         throw new UnsupportedOperationException(); [EOL]     } [EOL]     tmp_number = number; [EOL]     for (pos = length - 1; pos >= 0; pos--) { [EOL]         ret[pos] = (byte) (tmp_number & 0xFF); [EOL]         tmp_number >>= 8; [EOL]     } [EOL]     if (!swapHalfWord) { [EOL]         byte tmp = 0; [EOL]         for (pos = 0; pos < length; pos++) { [EOL]             tmp = ret[pos]; [EOL]             ret[pos++] = ret[pos]; [EOL]             ret[pos] = tmp; [EOL]         } [EOL]     } [EOL]     return ret; [EOL] } <line_num>: 71,97
