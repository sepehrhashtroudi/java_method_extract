public ArArchiveInputStream(final InputStream pInput) { [EOL]     input = pInput; [EOL] } <line_num>: 35,37
public ArArchiveEntry getNextArEntry() throws IOException { [EOL]     if (offset == 0) { [EOL]         final byte[] expected = "!<arch>\n".getBytes(); [EOL]         final byte[] realized = new byte[expected.length]; [EOL]         final int read = read(realized); [EOL]         if (read != expected.length) { [EOL]             throw new IOException("failed to read header"); [EOL]         } [EOL]         for (int i = 0; i < expected.length; i++) { [EOL]             if (expected[i] != realized[i]) { [EOL]                 throw new IOException("invalid header " + new String(realized)); [EOL]             } [EOL]         } [EOL]     } [EOL]     if (input.available() == 0) { [EOL]         return null; [EOL]     } [EOL]     if (offset % 2 != 0) { [EOL]         read(); [EOL]     } [EOL]     final byte[] name = new byte[16]; [EOL]     final byte[] lastmodified = new byte[12]; [EOL]     final byte[] userid = new byte[6]; [EOL]     final byte[] groupid = new byte[6]; [EOL]     final byte[] filemode = new byte[8]; [EOL]     final byte[] length = new byte[10]; [EOL]     read(name); [EOL]     read(lastmodified); [EOL]     read(userid); [EOL]     read(groupid); [EOL]     read(filemode); [EOL]     read(length); [EOL]     { [EOL]         final byte[] expected = "`\012".getBytes(); [EOL]         final byte[] realized = new byte[expected.length]; [EOL]         final int read = read(realized); [EOL]         if (read != expected.length) { [EOL]             throw new IOException("failed to read entry header"); [EOL]         } [EOL]         for (int i = 0; i < expected.length; i++) { [EOL]             if (expected[i] != realized[i]) { [EOL]                 throw new IOException("invalid entry header. not read the content?"); [EOL]             } [EOL]         } [EOL]     } [EOL]     return new ArArchiveEntry(new String(name).trim(), Long.parseLong(new String(length).trim())); [EOL] } <line_num>: 39,93
public ArchiveEntry getNextEntry() throws IOException { [EOL]     return getNextArEntry(); [EOL] } <line_num>: 96,98
public int read() throws IOException { [EOL]     final int ret = input.read(); [EOL]     offset++; [EOL]     return ret; [EOL] } <line_num>: 100,104
public int read(byte[] b) throws IOException { [EOL]     final int ret = read(b, 0, b.length); [EOL]     offset = offset + b.length; [EOL]     return ret; [EOL] } <line_num>: 106,110
public int read(byte[] b, int off, int len) throws IOException { [EOL]     final int ret = this.input.read(b, off, len); [EOL]     offset = offset + off; [EOL]     return ret; [EOL] } <line_num>: 112,116
public static boolean matches(byte[] signature, int length) { [EOL]     if (length < 8) { [EOL]         return false; [EOL]     } [EOL]     if (signature[0] != 0x21) { [EOL]         return false; [EOL]     } [EOL]     if (signature[1] != 0x3c) { [EOL]         return false; [EOL]     } [EOL]     if (signature[2] != 0x61) { [EOL]         return false; [EOL]     } [EOL]     if (signature[3] != 0x72) { [EOL]         return false; [EOL]     } [EOL]     if (signature[4] != 0x63) { [EOL]         return false; [EOL]     } [EOL]     if (signature[5] != 0x68) { [EOL]         return false; [EOL]     } [EOL]     if (signature[6] != 0x3e) { [EOL]         return false; [EOL]     } [EOL]     if (signature[7] != 0x0a) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 118,150
