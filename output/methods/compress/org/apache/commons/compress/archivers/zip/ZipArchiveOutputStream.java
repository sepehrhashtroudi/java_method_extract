public ZipArchiveOutputStream(OutputStream out) { [EOL]     this.out = out; [EOL]     this.raf = null; [EOL] } <line_num>: 233,236
public ZipArchiveOutputStream(File file) throws IOException { [EOL]     OutputStream o = null; [EOL]     RandomAccessFile _raf = null; [EOL]     try { [EOL]         _raf = new RandomAccessFile(file, "rw"); [EOL]         _raf.setLength(0); [EOL]     } catch (IOException e) { [EOL]         if (_raf != null) { [EOL]             try { [EOL]                 _raf.close(); [EOL]             } catch (IOException inner) { [EOL]             } [EOL]             _raf = null; [EOL]         } [EOL]         o = new FileOutputStream(file); [EOL]     } [EOL]     out = o; [EOL]     raf = _raf; [EOL] } <line_num>: 244,263
private UnicodeExtraFieldPolicy(String n) { [EOL]     name = n; [EOL] } <line_num>: 938,940
public boolean isSeekable() { [EOL]     return raf != null; [EOL] } <line_num>: 274,276
public void setEncoding(final String encoding) { [EOL]     this.encoding = encoding; [EOL]     this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); [EOL]     useEFS &= ZipEncodingHelper.isUTF8(encoding); [EOL] } <line_num>: 287,291
public String getEncoding() { [EOL]     return encoding; [EOL] } <line_num>: 298,300
public void setUseLanguageEncodingFlag(boolean b) { [EOL]     useEFS = b && ZipEncodingHelper.isUTF8(encoding); [EOL] } <line_num>: 308,310
public void setCreateUnicodeExtraFields(UnicodeExtraFieldPolicy b) { [EOL]     createUnicodeExtraFields = b; [EOL] } <line_num>: 317,319
public void setFallbackToUTF8(boolean b) { [EOL]     fallbackToUTF8 = b; [EOL] } <line_num>: 327,329
public void finish() throws IOException { [EOL]     closeEntry(); [EOL]     cdOffset = written; [EOL]     for (Iterator i = entries.iterator(); i.hasNext(); ) { [EOL]         writeCentralFileHeader((ZipArchiveEntry) i.next()); [EOL]     } [EOL]     cdLength = written - cdOffset; [EOL]     writeCentralDirectoryEnd(); [EOL]     offsets.clear(); [EOL]     entries.clear(); [EOL] } <line_num>: 336,346
public void closeEntry() throws IOException { [EOL]     if (entry == null) { [EOL]         return; [EOL]     } [EOL]     long realCrc = crc.getValue(); [EOL]     crc.reset(); [EOL]     if (entry.getMethod() == DEFLATED) { [EOL]         def.finish(); [EOL]         while (!def.finished()) { [EOL]             deflate(); [EOL]         } [EOL]         entry.setSize(ZipUtil.adjustToLong(def.getTotalIn())); [EOL]         entry.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOut())); [EOL]         entry.setCrc(realCrc); [EOL]         def.reset(); [EOL]         written += entry.getCompressedSize(); [EOL]     } else if (raf == null) { [EOL]         if (entry.getCrc() != realCrc) { [EOL]             throw new ZipException("bad CRC checksum for entry " + entry.getName() + ": " + Long.toHexString(entry.getCrc()) + " instead of " + Long.toHexString(realCrc)); [EOL]         } [EOL]         if (entry.getSize() != written - dataStart) { [EOL]             throw new ZipException("bad size for entry " + entry.getName() + ": " + entry.getSize() + " instead of " + (written - dataStart)); [EOL]         } [EOL]     } else { [EOL]         long size = written - dataStart; [EOL]         entry.setSize(size); [EOL]         entry.setCompressedSize(size); [EOL]         entry.setCrc(realCrc); [EOL]     } [EOL]     if (raf != null) { [EOL]         long save = raf.getFilePointer(); [EOL]         raf.seek(localDataStart); [EOL]         writeOut(ZipLong.getBytes(entry.getCrc())); [EOL]         writeOut(ZipLong.getBytes(entry.getCompressedSize())); [EOL]         writeOut(ZipLong.getBytes(entry.getSize())); [EOL]         raf.seek(save); [EOL]     } [EOL]     writeDataDescriptor(entry); [EOL]     entry = null; [EOL] } <line_num>: 352,411
public void putNextEntry(ZipArchiveEntry ze) throws IOException { [EOL]     closeEntry(); [EOL]     entry = ze; [EOL]     entries.add(entry); [EOL]     if (entry.getMethod() == -1) { [EOL]         entry.setMethod(method); [EOL]     } [EOL]     if (entry.getTime() == -1) { [EOL]         entry.setTime(System.currentTimeMillis()); [EOL]     } [EOL]     if (entry.getMethod() == STORED && raf == null) { [EOL]         if (entry.getSize() == -1) { [EOL]             throw new ZipException("uncompressed size is required for" + " STORED method when not writing to a" + " file"); [EOL]         } [EOL]         if (entry.getCrc() == -1) { [EOL]             throw new ZipException("crc checksum is required for STORED" + " method when not writing to a file"); [EOL]         } [EOL]         entry.setCompressedSize(entry.getSize()); [EOL]     } [EOL]     if (entry.getMethod() == DEFLATED && hasCompressionLevelChanged) { [EOL]         def.setLevel(level); [EOL]         hasCompressionLevelChanged = false; [EOL]     } [EOL]     writeLocalFileHeader(entry); [EOL] } <line_num>: 418,451
public void setComment(String comment) { [EOL]     this.comment = comment; [EOL] } <line_num>: 457,459
public void setLevel(int level) { [EOL]     if (level < Deflater.DEFAULT_COMPRESSION || level > Deflater.BEST_COMPRESSION) { [EOL]         throw new IllegalArgumentException("Invalid compression level: " + level); [EOL]     } [EOL]     hasCompressionLevelChanged = (this.level != level); [EOL]     this.level = level; [EOL] } <line_num>: 469,477
public void setMethod(int method) { [EOL]     this.method = method; [EOL] } <line_num>: 485,487
public void write(byte[] b, int offset, int length) throws IOException { [EOL]     if (entry.getMethod() == DEFLATED) { [EOL]         if (length > 0) { [EOL]             if (!def.finished()) { [EOL]                 if (length <= DEFLATER_BLOCK_SIZE) { [EOL]                     def.setInput(b, offset, length); [EOL]                     deflateUntilInputIsNeeded(); [EOL]                 } else { [EOL]                     final int fullblocks = length / DEFLATER_BLOCK_SIZE; [EOL]                     for (int i = 0; i < fullblocks; i++) { [EOL]                         def.setInput(b, offset + i * DEFLATER_BLOCK_SIZE, DEFLATER_BLOCK_SIZE); [EOL]                         deflateUntilInputIsNeeded(); [EOL]                     } [EOL]                     final int done = fullblocks * DEFLATER_BLOCK_SIZE; [EOL]                     if (done < length) { [EOL]                         def.setInput(b, offset + done, length - done); [EOL]                         deflateUntilInputIsNeeded(); [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } else { [EOL]         writeOut(b, offset, length); [EOL]         written += length; [EOL]     } [EOL]     crc.update(b, offset, length); [EOL] } <line_num>: 496,523
public void write(int b) throws IOException { [EOL]     byte[] buff = new byte[1]; [EOL]     buff[0] = (byte) (b & BYTE_MASK); [EOL]     write(buff, 0, 1); [EOL] } <line_num>: 532,536
public void close() throws IOException { [EOL]     finish(); [EOL]     if (raf != null) { [EOL]         raf.close(); [EOL]     } [EOL]     if (out != null) { [EOL]         out.close(); [EOL]     } [EOL] } <line_num>: 544,553
public void flush() throws IOException { [EOL]     if (out != null) { [EOL]         out.flush(); [EOL]     } [EOL] } <line_num>: 561,565
public void putArchiveEntry(ArchiveEntry entry) throws IOException { [EOL]     putNextEntry((ZipArchiveEntry) entry); [EOL] } <line_num>: 567,569
public void closeArchiveEntry() { [EOL] } <line_num>: 571,573
public void write(byte[] b) throws IOException { [EOL]     write(b, 0, b.length); [EOL] } <line_num>: 579,581
protected final void deflate() throws IOException { [EOL]     int len = def.deflate(buf, 0, buf.length); [EOL]     if (len > 0) { [EOL]         writeOut(buf, 0, len); [EOL]     } [EOL] } <line_num>: 607,612
protected void writeLocalFileHeader(ZipArchiveEntry ze) throws IOException { [EOL]     boolean encodable = zipEncoding.canEncode(ze.getName()); [EOL]     final ZipEncoding entryEncoding; [EOL]     if (!encodable && fallbackToUTF8) { [EOL]         entryEncoding = ZipEncodingHelper.UTF8_ZIP_ENCODING; [EOL]     } else { [EOL]         entryEncoding = zipEncoding; [EOL]     } [EOL]     ByteBuffer name = entryEncoding.encode(ze.getName()); [EOL]     if (createUnicodeExtraFields != UnicodeExtraFieldPolicy.NEVER) { [EOL]         if (createUnicodeExtraFields == UnicodeExtraFieldPolicy.ALWAYS || !encodable) { [EOL]             ze.addExtraField(new UnicodePathExtraField(ze.getName(), name.array(), name.arrayOffset(), name.limit())); [EOL]         } [EOL]         String comm = ze.getComment(); [EOL]         if (comm != null && !"".equals(comm)) { [EOL]             boolean commentEncodable = this.zipEncoding.canEncode(comm); [EOL]             if (createUnicodeExtraFields == UnicodeExtraFieldPolicy.ALWAYS || !commentEncodable) { [EOL]                 ByteBuffer commentB = entryEncoding.encode(comm); [EOL]                 ze.addExtraField(new UnicodeCommentExtraField(comm, commentB.array(), commentB.arrayOffset(), commentB.limit())); [EOL]             } [EOL]         } [EOL]     } [EOL]     offsets.put(ze, ZipLong.getBytes(written)); [EOL]     writeOut(LFH_SIG); [EOL]     written += WORD; [EOL]     final int zipMethod = ze.getMethod(); [EOL]     writeVersionNeededToExtractAndGeneralPurposeBits(zipMethod, !encodable && fallbackToUTF8); [EOL]     written += WORD; [EOL]     writeOut(ZipShort.getBytes(zipMethod)); [EOL]     written += SHORT; [EOL]     writeOut(ZipUtil.toDosTime(ze.getTime())); [EOL]     written += WORD; [EOL]     localDataStart = written; [EOL]     if (zipMethod == DEFLATED || raf != null) { [EOL]         writeOut(LZERO); [EOL]         writeOut(LZERO); [EOL]         writeOut(LZERO); [EOL]     } else { [EOL]         writeOut(ZipLong.getBytes(ze.getCrc())); [EOL]         writeOut(ZipLong.getBytes(ze.getSize())); [EOL]         writeOut(ZipLong.getBytes(ze.getSize())); [EOL]     } [EOL]     written += 12; [EOL]     writeOut(ZipShort.getBytes(name.limit())); [EOL]     written += SHORT; [EOL]     byte[] extra = ze.getLocalFileDataExtra(); [EOL]     writeOut(ZipShort.getBytes(extra.length)); [EOL]     written += SHORT; [EOL]     writeOut(name.array(), name.arrayOffset(), name.limit()); [EOL]     written += name.limit(); [EOL]     writeOut(extra); [EOL]     written += extra.length; [EOL]     dataStart = written; [EOL] } <line_num>: 619,716
protected void writeDataDescriptor(ZipArchiveEntry ze) throws IOException { [EOL]     if (ze.getMethod() != DEFLATED || raf != null) { [EOL]         return; [EOL]     } [EOL]     writeOut(DD_SIG); [EOL]     writeOut(ZipLong.getBytes(entry.getCrc())); [EOL]     writeOut(ZipLong.getBytes(entry.getCompressedSize())); [EOL]     writeOut(ZipLong.getBytes(entry.getSize())); [EOL]     written += 16; [EOL] } <line_num>: 723,734
protected void writeCentralFileHeader(ZipArchiveEntry ze) throws IOException { [EOL]     writeOut(CFH_SIG); [EOL]     written += WORD; [EOL]     writeOut(ZipShort.getBytes((ze.getPlatform() << 8) | 20)); [EOL]     written += SHORT; [EOL]     final int zipMethod = ze.getMethod(); [EOL]     final boolean encodable = zipEncoding.canEncode(ze.getName()); [EOL]     writeVersionNeededToExtractAndGeneralPurposeBits(zipMethod, !encodable && fallbackToUTF8); [EOL]     written += WORD; [EOL]     writeOut(ZipShort.getBytes(zipMethod)); [EOL]     written += SHORT; [EOL]     writeOut(ZipUtil.toDosTime(ze.getTime())); [EOL]     written += WORD; [EOL]     writeOut(ZipLong.getBytes(ze.getCrc())); [EOL]     writeOut(ZipLong.getBytes(ze.getCompressedSize())); [EOL]     writeOut(ZipLong.getBytes(ze.getSize())); [EOL]     written += 12; [EOL]     final ZipEncoding entryEncoding; [EOL]     if (!encodable && fallbackToUTF8) { [EOL]         entryEncoding = ZipEncodingHelper.UTF8_ZIP_ENCODING; [EOL]     } else { [EOL]         entryEncoding = zipEncoding; [EOL]     } [EOL]     ByteBuffer name = entryEncoding.encode(ze.getName()); [EOL]     writeOut(ZipShort.getBytes(name.limit())); [EOL]     written += SHORT; [EOL]     byte[] extra = ze.getCentralDirectoryExtra(); [EOL]     writeOut(ZipShort.getBytes(extra.length)); [EOL]     written += SHORT; [EOL]     String comm = ze.getComment(); [EOL]     if (comm == null) { [EOL]         comm = ""; [EOL]     } [EOL]     ByteBuffer commentB = entryEncoding.encode(comm); [EOL]     writeOut(ZipShort.getBytes(commentB.limit())); [EOL]     written += SHORT; [EOL]     writeOut(ZERO); [EOL]     written += SHORT; [EOL]     writeOut(ZipShort.getBytes(ze.getInternalAttributes())); [EOL]     written += SHORT; [EOL]     writeOut(ZipLong.getBytes(ze.getExternalAttributes())); [EOL]     written += WORD; [EOL]     writeOut((byte[]) offsets.get(ze)); [EOL]     written += WORD; [EOL]     writeOut(name.array(), name.arrayOffset(), name.limit()); [EOL]     written += name.limit(); [EOL]     writeOut(extra); [EOL]     written += extra.length; [EOL]     writeOut(commentB.array(), commentB.arrayOffset(), commentB.limit()); [EOL]     written += commentB.limit(); [EOL] } <line_num>: 741,832
protected void writeCentralDirectoryEnd() throws IOException { [EOL]     writeOut(EOCD_SIG); [EOL]     writeOut(ZERO); [EOL]     writeOut(ZERO); [EOL]     byte[] num = ZipShort.getBytes(entries.size()); [EOL]     writeOut(num); [EOL]     writeOut(num); [EOL]     writeOut(ZipLong.getBytes(cdLength)); [EOL]     writeOut(ZipLong.getBytes(cdOffset)); [EOL]     ByteBuffer data = this.zipEncoding.encode(comment); [EOL]     writeOut(ZipShort.getBytes(data.limit())); [EOL]     writeOut(data.array(), data.arrayOffset(), data.limit()); [EOL] } <line_num>: 838,858
protected final void writeOut(byte[] data) throws IOException { [EOL]     writeOut(data, 0, data.length); [EOL] } <line_num>: 865,867
protected final void writeOut(byte[] data, int offset, int length) throws IOException { [EOL]     if (raf != null) { [EOL]         raf.write(data, offset, length); [EOL]     } else { [EOL]         out.write(data, offset, length); [EOL]     } [EOL] } <line_num>: 876,883
private void deflateUntilInputIsNeeded() throws IOException { [EOL]     while (!def.needsInput()) { [EOL]         deflate(); [EOL]     } [EOL] } <line_num>: 885,889
private void writeVersionNeededToExtractAndGeneralPurposeBits(final int zipMethod, final boolean utfFallback) throws IOException { [EOL]     int versionNeededToExtract = 10; [EOL]     int generalPurposeFlag = (useEFS || utfFallback) ? EFS_FLAG : 0; [EOL]     if (zipMethod == DEFLATED && raf == null) { [EOL]         versionNeededToExtract = 20; [EOL]         generalPurposeFlag |= 8; [EOL]     } [EOL]     writeOut(ZipShort.getBytes(versionNeededToExtract)); [EOL]     writeOut(ZipShort.getBytes(generalPurposeFlag)); [EOL] } <line_num>: 891,913
public String toString() { [EOL]     return name; [EOL] } <line_num>: 941,943
