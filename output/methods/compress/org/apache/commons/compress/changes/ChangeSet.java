public void delete(final String pFilename) { [EOL]     addDeletion(new Change(pFilename)); [EOL] } <line_num>: 38,40
public void add(final ArchiveEntry pEntry, final InputStream pInput) { [EOL]     changes.add(new Change(pEntry, pInput)); [EOL] } <line_num>: 46,48
public Set asSet() { [EOL]     return changes; [EOL] } <line_num>: 50,52
public void perform(ArchiveInputStream in, ArchiveOutputStream out) throws IOException { [EOL]     ArchiveEntry entry = null; [EOL]     while ((entry = in.getNextEntry()) != null) { [EOL]         boolean copy = true; [EOL]         for (Iterator it = changes.iterator(); it.hasNext(); ) { [EOL]             Change change = (Change) it.next(); [EOL]             if (change.type() == Change.TYPE_ADD) { [EOL]                 copyStream(change.getInput(), out, change.getEntry()); [EOL]                 it.remove(); [EOL]             } [EOL]             if (change.type() == Change.TYPE_DELETE && entry.getName() != null) { [EOL]                 if (entry.getName().equals(change.targetFile())) { [EOL]                     copy = false; [EOL]                     it.remove(); [EOL]                     break; [EOL]                 } else if (entry.getName().matches(change.targetFile() + "/.*")) { [EOL]                     copy = false; [EOL]                     break; [EOL]                 } [EOL]             } [EOL]         } [EOL]         if (copy) { [EOL]             if (!isDeletedLater(entry)) { [EOL]                 copyStream(in, out, entry); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 54,88
private void addDeletion(Change pChange) { [EOL]     if (Change.TYPE_DELETE != pChange.type() || pChange.targetFile() == null) { [EOL]         return; [EOL]     } [EOL]     String source = pChange.targetFile(); [EOL]     if (!changes.isEmpty()) { [EOL]         for (Iterator it = changes.iterator(); it.hasNext(); ) { [EOL]             Change change = (Change) it.next(); [EOL]             if (change.type() == Change.TYPE_ADD && change.getEntry() != null) { [EOL]                 String target = change.getEntry().getName(); [EOL]                 if (source.equals(target)) { [EOL]                     it.remove(); [EOL]                 } else if (target.matches(source + "/.*")) { [EOL]                     it.remove(); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     changes.add(pChange); [EOL] } <line_num>: 90,113
private boolean isDeletedLater(ArchiveEntry entry) { [EOL]     String source = entry.getName(); [EOL]     if (!changes.isEmpty()) { [EOL]         for (Iterator it = changes.iterator(); it.hasNext(); ) { [EOL]             Change change = (Change) it.next(); [EOL]             if (change.type() == Change.TYPE_DELETE) { [EOL]                 String target = change.targetFile(); [EOL]                 if (source.equals(target)) { [EOL]                     return true; [EOL]                 } [EOL]                 return source.matches(target + "/.*"); [EOL]             } [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 115,133
private static void copyStream(InputStream in, ArchiveOutputStream out, ArchiveEntry entry) throws IOException { [EOL]     out.putArchiveEntry(entry); [EOL]     IOUtils.copy(in, out); [EOL]     out.closeArchiveEntry(); [EOL] } <line_num>: 135,140
