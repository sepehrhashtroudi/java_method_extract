public void setWidth(int width) { [EOL]     this.defaultWidth = width; [EOL] } <line_num>: 88,91
public int getWidth() { [EOL]     return this.defaultWidth; [EOL] } <line_num>: 98,101
public void setLeftPadding(int padding) { [EOL]     this.defaultLeftPad = padding; [EOL] } <line_num>: 108,111
public int getLeftPadding() { [EOL]     return this.defaultLeftPad; [EOL] } <line_num>: 118,121
public void setDescPadding(int padding) { [EOL]     this.defaultDescPad = padding; [EOL] } <line_num>: 128,131
public int getDescPadding() { [EOL]     return this.defaultDescPad; [EOL] } <line_num>: 138,141
public void setSyntaxPrefix(String prefix) { [EOL]     this.defaultSyntaxPrefix = prefix; [EOL] } <line_num>: 148,151
public String getSyntaxPrefix() { [EOL]     return this.defaultSyntaxPrefix; [EOL] } <line_num>: 158,161
public void setNewLine(String newline) { [EOL]     this.defaultNewLine = newline; [EOL] } <line_num>: 168,171
public String getNewLine() { [EOL]     return this.defaultNewLine; [EOL] } <line_num>: 178,181
public void setOptPrefix(String prefix) { [EOL]     this.defaultOptPrefix = prefix; [EOL] } <line_num>: 188,191
public String getOptPrefix() { [EOL]     return this.defaultOptPrefix; [EOL] } <line_num>: 198,201
public void setLongOptPrefix(String prefix) { [EOL]     this.defaultLongOptPrefix = prefix; [EOL] } <line_num>: 208,211
public String getLongOptPrefix() { [EOL]     return this.defaultLongOptPrefix; [EOL] } <line_num>: 218,221
public void setArgName(String name) { [EOL]     this.defaultArgName = name; [EOL] } <line_num>: 228,231
public String getArgName() { [EOL]     return this.defaultArgName; [EOL] } <line_num>: 238,241
public void printHelp(String cmdLineSyntax, Options options) { [EOL]     printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); [EOL] } <line_num>: 254,257
public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { [EOL]     printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); [EOL] } <line_num>: 269,273
public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { [EOL]     printHelp(cmdLineSyntax, header, options, footer, false); [EOL] } <line_num>: 285,289
public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { [EOL]     printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); [EOL] } <line_num>: 303,308
public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { [EOL]     printHelp(width, cmdLineSyntax, header, options, footer, false); [EOL] } <line_num>: 321,325
public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { [EOL]     PrintWriter pw = new PrintWriter(System.out); [EOL]     printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); [EOL]     pw.flush(); [EOL] } <line_num>: 340,348
public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { [EOL]     printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); [EOL] } <line_num>: 365,371
public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { [EOL]     if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { [EOL]         throw new IllegalArgumentException("cmdLineSyntax not provided"); [EOL]     } [EOL]     if (autoUsage) { [EOL]         printUsage(pw, width, cmdLineSyntax, options); [EOL]     } else { [EOL]         printUsage(pw, width, cmdLineSyntax); [EOL]     } [EOL]     if ((header != null) && (header.trim().length() > 0)) { [EOL]         printWrapped(pw, width, header); [EOL]     } [EOL]     printOptions(pw, width, options, leftPad, descPad); [EOL]     if ((footer != null) && (footer.trim().length() > 0)) { [EOL]         printWrapped(pw, width, footer); [EOL]     } [EOL] } <line_num>: 391,420
public void printUsage(PrintWriter pw, int width, String app, Options options) { [EOL]     StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(" "); [EOL]     final Collection processedGroups = new ArrayList(); [EOL]     Option option; [EOL]     for (Iterator i = options.getOptions().iterator(); i.hasNext(); ) { [EOL]         option = (Option) i.next(); [EOL]         OptionGroup group = options.getOptionGroup(option); [EOL]         if (group != null) { [EOL]             if (!processedGroups.contains(group)) { [EOL]                 processedGroups.add(group); [EOL]                 appendOptionGroup(buff, group); [EOL]             } [EOL]         } else { [EOL]             appendOption(buff, option, option.isRequired()); [EOL]         } [EOL]         if (i.hasNext()) { [EOL]             buff.append(" "); [EOL]         } [EOL]     } [EOL]     printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); [EOL] } <line_num>: 431,487
private static void appendOptionGroup(final StringBuffer buff, final OptionGroup group) { [EOL]     if (!group.isRequired()) { [EOL]         buff.append("["); [EOL]     } [EOL]     for (Iterator i = group.getOptions().iterator(); i.hasNext(); ) { [EOL]         appendOption(buff, (Option) i.next(), true); [EOL]         if (i.hasNext()) { [EOL]             buff.append(" | "); [EOL]         } [EOL]     } [EOL]     if (!group.isRequired()) { [EOL]         buff.append("]"); [EOL]     } [EOL] } <line_num>: 497,521
private static void appendOption(final StringBuffer buff, final Option option, final boolean required) { [EOL]     if (!required) { [EOL]         buff.append("["); [EOL]     } [EOL]     if (option.getOpt() != null) { [EOL]         buff.append("-").append(option.getOpt()); [EOL]     } else { [EOL]         buff.append("--").append(option.getLongOpt()); [EOL]     } [EOL]     if (option.hasArg() && (option.getArgName() != null)) { [EOL]         buff.append(" <").append(option.getArgName()).append(">"); [EOL]     } [EOL]     if (!required) { [EOL]         buff.append("]"); [EOL]     } [EOL] } <line_num>: 530,559
public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { [EOL]     int argPos = cmdLineSyntax.indexOf(' ') + 1; [EOL]     printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); [EOL] } <line_num>: 569,575
public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { [EOL]     StringBuffer sb = new StringBuffer(); [EOL]     renderOptions(sb, width, options, leftPad, descPad); [EOL]     pw.println(sb.toString()); [EOL] } <line_num>: 589,596
public void printWrapped(PrintWriter pw, int width, String text) { [EOL]     printWrapped(pw, width, 0, text); [EOL] } <line_num>: 605,608
public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { [EOL]     StringBuffer sb = new StringBuffer(text.length()); [EOL]     renderWrappedText(sb, width, nextLineTabStop, text); [EOL]     pw.println(sb.toString()); [EOL] } <line_num>: 618,625
protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) { [EOL]     final String lpad = createPadding(leftPad); [EOL]     final String dpad = createPadding(descPad); [EOL]     int max = 0; [EOL]     StringBuffer optBuf; [EOL]     List prefixList = new ArrayList(); [EOL]     Option option; [EOL]     List optList = options.helpOptions(); [EOL]     Collections.sort(optList, new OptionComparator()); [EOL]     for (Iterator i = optList.iterator(); i.hasNext(); ) { [EOL]         option = (Option) i.next(); [EOL]         optBuf = new StringBuffer(8); [EOL]         if (option.getOpt() == null) { [EOL]             optBuf.append(lpad).append("   " + defaultLongOptPrefix).append(option.getLongOpt()); [EOL]         } else { [EOL]             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt()); [EOL]             if (option.hasLongOpt()) { [EOL]                 optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt()); [EOL]             } [EOL]         } [EOL]         if (option.hasArg()) { [EOL]             if (option.hasArgName()) { [EOL]                 optBuf.append(" <").append(option.getArgName()).append(">"); [EOL]             } else { [EOL]                 optBuf.append(' '); [EOL]             } [EOL]         } [EOL]         prefixList.add(optBuf); [EOL]         max = (optBuf.length() > max) ? optBuf.length() : max; [EOL]     } [EOL]     int x = 0; [EOL]     for (Iterator i = optList.iterator(); i.hasNext(); ) { [EOL]         option = (Option) i.next(); [EOL]         optBuf = new StringBuffer(prefixList.get(x++).toString()); [EOL]         if (optBuf.length() < max) { [EOL]             optBuf.append(createPadding(max - optBuf.length())); [EOL]         } [EOL]         optBuf.append(dpad); [EOL]         int nextLineTabStop = max + descPad; [EOL]         if (option.getDescription() != null) { [EOL]             optBuf.append(option.getDescription()); [EOL]         } [EOL]         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString()); [EOL]         if (i.hasNext()) { [EOL]             sb.append(defaultNewLine); [EOL]         } [EOL]     } [EOL]     return sb; [EOL] } <line_num>: 643,730
protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { [EOL]     int pos = findWrapPos(text, width, 0); [EOL]     if (pos == -1) { [EOL]         sb.append(rtrim(text)); [EOL]         return sb; [EOL]     } [EOL]     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); [EOL]     final String padding = createPadding(nextLineTabStop); [EOL]     while (true) { [EOL]         text = padding + text.substring(pos).trim(); [EOL]         pos = findWrapPos(text, width, nextLineTabStop); [EOL]         if (pos == -1) { [EOL]             sb.append(text); [EOL]             return sb; [EOL]         } [EOL]         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); [EOL]     } [EOL] } <line_num>: 743,774
protected int findWrapPos(String text, int width, int startPos) { [EOL]     int pos = -1; [EOL]     if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width)) { [EOL]         return pos + 1; [EOL]     } else if ((startPos + width) >= text.length()) { [EOL]         return -1; [EOL]     } [EOL]     pos = startPos + width; [EOL]     char c; [EOL]     while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\n') && (c != '\r')) { [EOL]         --pos; [EOL]     } [EOL]     if (pos > startPos) { [EOL]         return pos; [EOL]     } [EOL]     pos = startPos + width; [EOL]     while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ') && (c != '\n') && (c != '\r')) { [EOL]         ++pos; [EOL]     } [EOL]     return (pos == text.length()) ? (-1) : pos; [EOL] } <line_num>: 789,833
protected String createPadding(int len) { [EOL]     StringBuffer sb = new StringBuffer(len); [EOL]     for (int i = 0; i < len; ++i) { [EOL]         sb.append(' '); [EOL]     } [EOL]     return sb.toString(); [EOL] } <line_num>: 842,852
protected String rtrim(String s) { [EOL]     if ((s == null) || (s.length() == 0)) { [EOL]         return s; [EOL]     } [EOL]     int pos = s.length(); [EOL]     while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1))) { [EOL]         --pos; [EOL]     } [EOL]     return s.substring(0, pos); [EOL] } <line_num>: 861,876
public int compare(Object o1, Object o2) { [EOL]     Option opt1 = (Option) o1; [EOL]     Option opt2 = (Option) o2; [EOL]     return opt1.getKey().compareToIgnoreCase(opt2.getKey()); [EOL] } <line_num>: 900,906
