public static Object getValueClass(char ch) { [EOL]     if (ch == '@') { [EOL]         return PatternOptionBuilder.OBJECT_VALUE; [EOL]     } else if (ch == ':') { [EOL]         return PatternOptionBuilder.STRING_VALUE; [EOL]     } else if (ch == '%') { [EOL]         return PatternOptionBuilder.NUMBER_VALUE; [EOL]     } else if (ch == '+') { [EOL]         return PatternOptionBuilder.CLASS_VALUE; [EOL]     } else if (ch == '#') { [EOL]         return PatternOptionBuilder.DATE_VALUE; [EOL]     } else if (ch == '<') { [EOL]         return PatternOptionBuilder.EXISTING_FILE_VALUE; [EOL]     } else if (ch == '>') { [EOL]         return PatternOptionBuilder.FILE_VALUE; [EOL]     } else if (ch == '*') { [EOL]         return PatternOptionBuilder.FILES_VALUE; [EOL]     } else if (ch == '/') { [EOL]         return PatternOptionBuilder.URL_VALUE; [EOL]     } [EOL]     return null; [EOL] } <line_num>: 87,127
public static boolean isValueCode(char ch) { [EOL]     if ((ch != '@') && (ch != ':') && (ch != '%') && (ch != '+') && (ch != '#') && (ch != '<') && (ch != '>') && (ch != '*') && (ch != '/') && (ch != '!')) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 136,146
public static Options parsePattern(String pattern) { [EOL]     int sz = pattern.length(); [EOL]     char opt = ' '; [EOL]     char ch = ' '; [EOL]     boolean required = false; [EOL]     Object type = null; [EOL]     Options options = new Options(); [EOL]     for (int i = 0; i < sz; i++) { [EOL]         ch = pattern.charAt(i); [EOL]         if (!isValueCode(ch)) { [EOL]             if (opt != ' ') { [EOL]                 OptionBuilder.hasArg(type != null); [EOL]                 OptionBuilder.isRequired(required); [EOL]                 OptionBuilder.withType(type); [EOL]                 options.addOption(OptionBuilder.create(opt)); [EOL]                 required = false; [EOL]                 type = null; [EOL]                 opt = ' '; [EOL]             } [EOL]             opt = ch; [EOL]         } else if (ch == '!') { [EOL]             required = true; [EOL]         } else { [EOL]             type = getValueClass(ch); [EOL]         } [EOL]     } [EOL]     if (opt != ' ') { [EOL]         OptionBuilder.hasArg(type != null); [EOL]         OptionBuilder.isRequired(required); [EOL]         OptionBuilder.withType(type); [EOL]         options.addOption(OptionBuilder.create(opt)); [EOL]     } [EOL]     return options; [EOL] } <line_num>: 155,210
