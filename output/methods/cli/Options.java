public Options addOptionGroup(OptionGroup group) { [EOL]     Iterator options = group.getOptions().iterator(); [EOL]     if (group.isRequired()) { [EOL]         requiredOpts.add(group); [EOL]     } [EOL]     while (options.hasNext()) { [EOL]         Option option = (Option) options.next(); [EOL]         option.setRequired(false); [EOL]         addOption(option); [EOL]         optionGroups.put(option.getKey(), group); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 69
Collection getOptionGroups() { [EOL]     return new HashSet(optionGroups.values()); [EOL] } <line_num>: 99
public Options addOption(String opt, boolean hasArg, String description) { [EOL]     addOption(opt, null, hasArg, description); [EOL]     return this; [EOL] } <line_num>: 112
public Options addOption(String opt, String longOpt, boolean hasArg, String description) { [EOL]     addOption(new Option(opt, longOpt, hasArg, description)); [EOL]     return this; [EOL] } <line_num>: 129
public Options addOption(Option opt) { [EOL]     String key = opt.getKey(); [EOL]     if (opt.hasLongOpt()) { [EOL]         longOpts.put(opt.getLongOpt(), opt); [EOL]     } [EOL]     if (opt.isRequired()) { [EOL]         if (requiredOpts.contains(key)) { [EOL]             requiredOpts.remove(requiredOpts.indexOf(key)); [EOL]         } [EOL]         requiredOpts.add(key); [EOL]     } [EOL]     shortOpts.put(key, opt); [EOL]     return this; [EOL] } <line_num>: 143
public Collection getOptions() { [EOL]     return Collections.unmodifiableCollection(helpOptions()); [EOL] } <line_num>: 172
List helpOptions() { [EOL]     List opts = new ArrayList(shortOpts.values()); [EOL]     Iterator iter = longOpts.values().iterator(); [EOL]     while (iter.hasNext()) { [EOL]         Object item = iter.next(); [EOL]         if (!opts.contains(item)) { [EOL]             opts.add(item); [EOL]         } [EOL]     } [EOL]     return new ArrayList(opts); [EOL] } <line_num>: 182
public List getRequiredOptions() { [EOL]     return requiredOpts; [EOL] } <line_num>: 209
public Option getOption(String opt) { [EOL]     opt = Util.stripLeadingHyphens(opt); [EOL]     if (shortOpts.containsKey(opt)) { [EOL]         return (Option) shortOpts.get(opt); [EOL]     } [EOL]     return (Option) longOpts.get(opt); [EOL] } <line_num>: 220
public boolean hasOption(String opt) { [EOL]     opt = Util.stripLeadingHyphens(opt); [EOL]     return shortOpts.containsKey(opt) || longOpts.containsKey(opt); [EOL] } <line_num>: 240
public OptionGroup getOptionGroup(Option opt) { [EOL]     return (OptionGroup) optionGroups.get(opt.getKey()); [EOL] } <line_num>: 255
public String toString() { [EOL]     StringBuffer buf = new StringBuffer(); [EOL]     buf.append("[ Options: [ short "); [EOL]     buf.append(shortOpts.toString()); [EOL]     buf.append(" ] [ long "); [EOL]     buf.append(longOpts); [EOL]     buf.append(" ]"); [EOL]     return buf.toString(); [EOL] } <line_num>: 265
public Options() { [EOL] } <line_num>: 58
