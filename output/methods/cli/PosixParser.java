private void init() { [EOL]     eatTheRest = false; [EOL]     tokens.clear(); [EOL]     currentOption = null; [EOL] } <line_num>: 49
protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) { [EOL]     init(); [EOL]     this.options = options; [EOL]     Iterator iter = Arrays.asList(arguments).iterator(); [EOL]     String token = null; [EOL]     while (iter.hasNext()) { [EOL]         token = (String) iter.next(); [EOL]         if (token.startsWith("--")) { [EOL]             if (token.indexOf('=') != -1) { [EOL]                 tokens.add(token.substring(0, token.indexOf('='))); [EOL]                 tokens.add(token.substring(token.indexOf('=') + 1, token.length())); [EOL]             } else { [EOL]                 tokens.add(token); [EOL]             } [EOL]         } else if ("-".equals(token)) { [EOL]             processSingleHyphen(token); [EOL]         } else if (token.startsWith("-")) { [EOL]             int tokenLength = token.length(); [EOL]             if (tokenLength == 2) { [EOL]                 processOptionToken(token, stopAtNonOption); [EOL]             } else if (options.hasOption(token)) { [EOL]                 tokens.add(token); [EOL]             } else { [EOL]                 burstToken(token, stopAtNonOption); [EOL]             } [EOL]         } else { [EOL]             if (stopAtNonOption) { [EOL]                 process(token); [EOL]             } else { [EOL]                 tokens.add(token); [EOL]             } [EOL]         } [EOL]         gobble(iter); [EOL]     } [EOL]     return (String[]) tokens.toArray(new String[] {}); [EOL] } <line_num>: 94
private void gobble(Iterator iter) { [EOL]     if (eatTheRest) { [EOL]         while (iter.hasNext()) { [EOL]             tokens.add(iter.next()); [EOL]         } [EOL]     } [EOL] } <line_num>: 170
private void process(String value) { [EOL]     if ((currentOption != null) && currentOption.hasArg()) { [EOL]         if (currentOption.hasArg()) { [EOL]             tokens.add(value); [EOL]             currentOption = null; [EOL]         } else if (currentOption.hasArgs()) { [EOL]             tokens.add(value); [EOL]         } [EOL]     } else { [EOL]         eatTheRest = true; [EOL]         tokens.add("--"); [EOL]         tokens.add(value); [EOL]     } [EOL] } <line_num>: 194
private void processSingleHyphen(String hyphen) { [EOL]     tokens.add(hyphen); [EOL] } <line_num>: 222
private void processOptionToken(String token, boolean stopAtNonOption) { [EOL]     if (this.options.hasOption(token)) { [EOL]         currentOption = this.options.getOption(token); [EOL]         tokens.add(token); [EOL]     } else if (stopAtNonOption) { [EOL]         eatTheRest = true; [EOL]     } [EOL] } <line_num>: 239
protected void burstToken(String token, boolean stopAtNonOption) { [EOL]     int tokenLength = token.length(); [EOL]     for (int i = 1; i < tokenLength; i++) { [EOL]         String ch = String.valueOf(token.charAt(i)); [EOL]         boolean hasOption = options.hasOption(ch); [EOL]         if (hasOption) { [EOL]             tokens.add("-" + ch); [EOL]             currentOption = options.getOption(ch); [EOL]             if (currentOption.hasArg() && (token.length() != (i + 1))) { [EOL]                 tokens.add(token.substring(i + 1)); [EOL]                 break; [EOL]             } [EOL]         } else if (stopAtNonOption) { [EOL]             process(token.substring(i)); [EOL]         } else { [EOL]             tokens.add("-" + ch); [EOL]         } [EOL]     } [EOL] } <line_num>: 278
