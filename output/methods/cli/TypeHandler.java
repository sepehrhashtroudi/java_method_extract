public static Object createValue(String str, Object obj) { [EOL]     return createValue(str, (Class) obj); [EOL] } <line_num>: 47
public static Object createValue(String str, Class clazz) { [EOL]     if (PatternOptionBuilder.STRING_VALUE == clazz) { [EOL]         return str; [EOL]     } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { [EOL]         return createObject(str); [EOL]     } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { [EOL]         return createNumber(str); [EOL]     } else if (PatternOptionBuilder.DATE_VALUE == clazz) { [EOL]         return createDate(str); [EOL]     } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { [EOL]         return createClass(str); [EOL]     } else if (PatternOptionBuilder.FILE_VALUE == clazz) { [EOL]         return createFile(str); [EOL]     } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { [EOL]         return createFile(str); [EOL]     } else if (PatternOptionBuilder.FILES_VALUE == clazz) { [EOL]         return createFiles(str); [EOL]     } else if (PatternOptionBuilder.URL_VALUE == clazz) { [EOL]         return createURL(str); [EOL]     } else { [EOL]         return null; [EOL]     } [EOL] } <line_num>: 61
public static Object createObject(String str) { [EOL]     Class cl = null; [EOL]     try { [EOL]         cl = Class.forName(str); [EOL]     } catch (ClassNotFoundException cnfe) { [EOL]         System.err.println("Unable to find: " + str); [EOL]         return null; [EOL]     } [EOL]     Object instance = null; [EOL]     try { [EOL]         instance = cl.newInstance(); [EOL]     } catch (InstantiationException cnfe) { [EOL]         System.err.println("InstantiationException; Unable to create: " + str); [EOL]         return null; [EOL]     } catch (IllegalAccessException cnfe) { [EOL]         System.err.println("IllegalAccessException; Unable to create: " + str); [EOL]         return null; [EOL]     } [EOL]     return instance; [EOL] } <line_num>: 112
public static Number createNumber(String str) { [EOL]     try { [EOL]         return NumberUtils.createNumber(str); [EOL]     } catch (NumberFormatException nfe) { [EOL]         System.err.println(nfe.getMessage()); [EOL]         return null; [EOL]     } [EOL] } <line_num>: 158
public static Class createClass(String str) { [EOL]     try { [EOL]         return Class.forName(str); [EOL]     } catch (ClassNotFoundException cnfe) { [EOL]         System.err.println("Unable to find: " + str); [EOL]         return null; [EOL]     } [EOL] } <line_num>: 180
public static Date createDate(String str) { [EOL]     Date date = null; [EOL]     if (date == null) { [EOL]         System.err.println("Unable to parse: " + str); [EOL]     } [EOL]     return date; [EOL] } <line_num>: 201
public static URL createURL(String str) { [EOL]     try { [EOL]         return new URL(str); [EOL]     } catch (MalformedURLException mue) { [EOL]         System.err.println("Unable to parse: " + str); [EOL]         return null; [EOL]     } [EOL] } <line_num>: 220
public static File createFile(String str) { [EOL]     return new File(str); [EOL] } <line_num>: 240
public static File[] createFiles(String str) { [EOL]     return null; [EOL] } <line_num>: 251
