@Deprecated [EOL] protected MappingIterator(JavaType type, JsonParser jp, DeserializationContext ctxt, JsonDeserializer<?> deser) { [EOL]     this(type, jp, ctxt, deser, true, null); [EOL] } <line_num>: 49,54
@SuppressWarnings("unchecked") [EOL] protected MappingIterator(JavaType type, JsonParser jp, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean managedParser, Object valueToUpdate) { [EOL]     _type = type; [EOL]     _parser = jp; [EOL]     _context = ctxt; [EOL]     _deserializer = (JsonDeserializer<T>) deser; [EOL]     _closeParser = managedParser; [EOL]     if (valueToUpdate == null) { [EOL]         _updatedValue = null; [EOL]     } else { [EOL]         _updatedValue = (T) valueToUpdate; [EOL]     } [EOL]     if (managedParser && jp != null && jp.getCurrentToken() == JsonToken.START_ARRAY) { [EOL]         jp.clearCurrentToken(); [EOL]     } [EOL] } <line_num>: 62,91
@SuppressWarnings("unchecked") [EOL] protected static <T> MappingIterator<T> emptyIterator() { [EOL]     return (MappingIterator<T>) EMPTY_ITERATOR; [EOL] } <line_num>: 93,96
@Override [EOL] public boolean hasNext() { [EOL]     try { [EOL]         return hasNextValue(); [EOL]     } catch (JsonMappingException e) { [EOL]         throw new RuntimeJsonMappingException(e.getMessage(), e); [EOL]     } catch (IOException e) { [EOL]         throw new RuntimeException(e.getMessage(), e); [EOL]     } [EOL] } <line_num>: 104,114
@Override [EOL] public T next() { [EOL]     try { [EOL]         return nextValue(); [EOL]     } catch (JsonMappingException e) { [EOL]         throw new RuntimeJsonMappingException(e.getMessage(), e); [EOL]     } catch (IOException e) { [EOL]         throw new RuntimeException(e.getMessage(), e); [EOL]     } [EOL] } <line_num>: 116,126
@Override [EOL] public void remove() { [EOL]     throw new UnsupportedOperationException(); [EOL] } <line_num>: 128,131
@Override [EOL] public void close() throws IOException { [EOL]     if (_parser != null) { [EOL]         _parser.close(); [EOL]     } [EOL] } <line_num>: 133,138
public boolean hasNextValue() throws IOException { [EOL]     if (_parser == null) { [EOL]         return false; [EOL]     } [EOL]     if (!_hasNextChecked) { [EOL]         JsonToken t = _parser.getCurrentToken(); [EOL]         _hasNextChecked = true; [EOL]         if (t == null) { [EOL]             t = _parser.nextToken(); [EOL]             if (t == null || t == JsonToken.END_ARRAY) { [EOL]                 JsonParser jp = _parser; [EOL]                 _parser = null; [EOL]                 if (_closeParser) { [EOL]                     jp.close(); [EOL]                 } [EOL]                 return false; [EOL]             } [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 150,172
public T nextValue() throws IOException { [EOL]     if (!_hasNextChecked) { [EOL]         if (!hasNextValue()) { [EOL]             throw new NoSuchElementException(); [EOL]         } [EOL]     } [EOL]     if (_parser == null) { [EOL]         throw new NoSuchElementException(); [EOL]     } [EOL]     _hasNextChecked = false; [EOL]     T result; [EOL]     if (_updatedValue == null) { [EOL]         result = _deserializer.deserialize(_parser, _context); [EOL]     } else { [EOL]         _deserializer.deserialize(_parser, _context, _updatedValue); [EOL]         result = _updatedValue; [EOL]     } [EOL]     _parser.clearCurrentToken(); [EOL]     return result; [EOL] } <line_num>: 174,197
public List<T> readAll() throws IOException { [EOL]     return readAll(new ArrayList<T>()); [EOL] } <line_num>: 207,209
public List<T> readAll(List<T> resultList) throws IOException { [EOL]     while (hasNextValue()) { [EOL]         resultList.add(nextValue()); [EOL]     } [EOL]     return resultList; [EOL] } <line_num>: 219,225
public JsonParser getParser() { [EOL]     return _parser; [EOL] } <line_num>: 238,240
public FormatSchema getParserSchema() { [EOL]     return _parser.getSchema(); [EOL] } <line_num>: 249,251
public JsonLocation getCurrentLocation() { [EOL]     return _parser.getCurrentLocation(); [EOL] } <line_num>: 263,265
