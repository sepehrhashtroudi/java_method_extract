public BeanDeserializerFactory(DeserializerFactoryConfig config) { [EOL]     super(config); [EOL] } <line_num>: 61,63
@Override [EOL] public DeserializerFactory withConfig(DeserializerFactoryConfig config) { [EOL]     if (_factoryConfig == config) { [EOL]         return this; [EOL]     } [EOL]     if (getClass() != BeanDeserializerFactory.class) { [EOL]         throw new IllegalStateException("Subtype of BeanDeserializerFactory (" + getClass().getName() + ") has not properly overridden method 'withAdditionalDeserializers': can not instantiate subtype with " + "additional deserializer definitions"); [EOL]     } [EOL]     return new BeanDeserializerFactory(config); [EOL] } <line_num>: 70,88
@SuppressWarnings("unchecked") [EOL] protected JsonDeserializer<Object> _findCustomBeanDeserializer(JavaType type, DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException { [EOL]     for (Deserializers d : _factoryConfig.deserializers()) { [EOL]         JsonDeserializer<?> deser = d.findBeanDeserializer(type, config, beanDesc); [EOL]         if (deser != null) { [EOL]             return (JsonDeserializer<Object>) deser; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 98,110
@Override [EOL] public JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException { [EOL]     final DeserializationConfig config = ctxt.getConfig(); [EOL]     JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc); [EOL]     if (custom != null) { [EOL]         return custom; [EOL]     } [EOL]     if (type.isThrowable()) { [EOL]         return buildThrowableDeserializer(ctxt, type, beanDesc); [EOL]     } [EOL]     if (type.isAbstract()) { [EOL]         JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc); [EOL]         if (concreteType != null) { [EOL]             beanDesc = config.introspect(concreteType); [EOL]             return buildBeanDeserializer(ctxt, concreteType, beanDesc); [EOL]         } [EOL]     } [EOL]     @SuppressWarnings("unchecked") [EOL]     JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc); [EOL]     if (deser != null) { [EOL]         return deser; [EOL]     } [EOL]     if (!isPotentialBeanType(type.getRawClass())) { [EOL]         return null; [EOL]     } [EOL]     return buildBeanDeserializer(ctxt, type, beanDesc); [EOL] } <line_num>: 123,169
@Override [EOL] public JsonDeserializer<Object> createBuilderBasedDeserializer(DeserializationContext ctxt, JavaType valueType, BeanDescription beanDesc, Class<?> builderClass) throws JsonMappingException { [EOL]     JavaType builderType = ctxt.constructType(builderClass); [EOL]     BeanDescription builderDesc = ctxt.getConfig().introspectForBuilder(builderType); [EOL]     return buildBuilderBasedDeserializer(ctxt, valueType, builderDesc); [EOL] } <line_num>: 171,181
protected JsonDeserializer<?> findStdDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException { [EOL]     JsonDeserializer<?> deser = findDefaultDeserializer(ctxt, type, beanDesc); [EOL]     if (deser != null) { [EOL]         return deser; [EOL]     } [EOL]     Class<?> cls = type.getRawClass(); [EOL]     if (AtomicReference.class.isAssignableFrom(cls)) { [EOL]         TypeFactory tf = ctxt.getTypeFactory(); [EOL]         JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]         JavaType referencedType; [EOL]         if (params == null || params.length < 1) { [EOL]             referencedType = TypeFactory.unknownType(); [EOL]         } else { [EOL]             referencedType = params[0]; [EOL]         } [EOL]         return new JdkDeserializers.AtomicReferenceDeserializer(referencedType); [EOL]     } [EOL]     return findOptionalStdDeserializer(ctxt, type, beanDesc); [EOL] } <line_num>: 187,213
protected JsonDeserializer<?> findOptionalStdDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException { [EOL]     return OptionalHandlerFactory.instance.findDeserializer(type, ctxt.getConfig(), beanDesc); [EOL] } <line_num>: 220,225
protected JavaType materializeAbstractType(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException { [EOL]     final JavaType abstractType = beanDesc.getType(); [EOL]     for (AbstractTypeResolver r : _factoryConfig.abstractTypeResolvers()) { [EOL]         JavaType concrete = r.resolveAbstractType(ctxt.getConfig(), abstractType); [EOL]         if (concrete != null) { [EOL]             return concrete; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 227,241
@SuppressWarnings("unchecked") [EOL] public JsonDeserializer<Object> buildBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException { [EOL]     ValueInstantiator valueInstantiator = findValueInstantiator(ctxt, beanDesc); [EOL]     BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, beanDesc); [EOL]     builder.setValueInstantiator(valueInstantiator); [EOL]     addBeanProps(ctxt, beanDesc, builder); [EOL]     addObjectIdReader(ctxt, beanDesc, builder); [EOL]     addReferenceProperties(ctxt, beanDesc, builder); [EOL]     addInjectables(ctxt, beanDesc, builder); [EOL]     final DeserializationConfig config = ctxt.getConfig(); [EOL]     if (_factoryConfig.hasDeserializerModifiers()) { [EOL]         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { [EOL]             builder = mod.updateBuilder(config, beanDesc, builder); [EOL]         } [EOL]     } [EOL]     JsonDeserializer<?> deserializer; [EOL]     if (type.isAbstract() && !valueInstantiator.canInstantiate()) { [EOL]         deserializer = builder.buildAbstract(); [EOL]     } else { [EOL]         deserializer = builder.build(); [EOL]     } [EOL]     if (_factoryConfig.hasDeserializerModifiers()) { [EOL]         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { [EOL]             deserializer = mod.modifyDeserializer(config, beanDesc, deserializer); [EOL]         } [EOL]     } [EOL]     return (JsonDeserializer<Object>) deserializer; [EOL] } <line_num>: 257,299
@SuppressWarnings("unchecked") [EOL] protected JsonDeserializer<Object> buildBuilderBasedDeserializer(DeserializationContext ctxt, JavaType valueType, BeanDescription builderDesc) throws JsonMappingException { [EOL]     ValueInstantiator valueInstantiator = findValueInstantiator(ctxt, builderDesc); [EOL]     final DeserializationConfig config = ctxt.getConfig(); [EOL]     BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, builderDesc); [EOL]     builder.setValueInstantiator(valueInstantiator); [EOL]     addBeanProps(ctxt, builderDesc, builder); [EOL]     addObjectIdReader(ctxt, builderDesc, builder); [EOL]     addReferenceProperties(ctxt, builderDesc, builder); [EOL]     addInjectables(ctxt, builderDesc, builder); [EOL]     JsonPOJOBuilder.Value builderConfig = builderDesc.findPOJOBuilderConfig(); [EOL]     final String buildMethodName = (builderConfig == null) ? "build" : builderConfig.buildMethodName; [EOL]     AnnotatedMethod buildMethod = builderDesc.findMethod(buildMethodName, null); [EOL]     if (buildMethod != null) { [EOL]         if (config.canOverrideAccessModifiers()) { [EOL]             ClassUtil.checkAndFixAccess(buildMethod.getMember()); [EOL]         } [EOL]     } [EOL]     builder.setPOJOBuilder(buildMethod, builderConfig); [EOL]     if (_factoryConfig.hasDeserializerModifiers()) { [EOL]         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { [EOL]             builder = mod.updateBuilder(config, builderDesc, builder); [EOL]         } [EOL]     } [EOL]     JsonDeserializer<?> deserializer = builder.buildBuilderBased(valueType, buildMethodName); [EOL]     if (_factoryConfig.hasDeserializerModifiers()) { [EOL]         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { [EOL]             deserializer = mod.modifyDeserializer(config, builderDesc, deserializer); [EOL]         } [EOL]     } [EOL]     return (JsonDeserializer<Object>) deserializer; [EOL] } <line_num>: 308,354
protected void addObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException { [EOL]     ObjectIdInfo objectIdInfo = beanDesc.getObjectIdInfo(); [EOL]     if (objectIdInfo == null) { [EOL]         return; [EOL]     } [EOL]     Class<?> implClass = objectIdInfo.getGeneratorType(); [EOL]     JavaType idType; [EOL]     SettableBeanProperty idProp; [EOL]     ObjectIdGenerator<?> gen; [EOL]     if (implClass == ObjectIdGenerators.PropertyGenerator.class) { [EOL]         String propName = objectIdInfo.getPropertyName(); [EOL]         idProp = builder.findProperty(propName); [EOL]         if (idProp == null) { [EOL]             throw new IllegalArgumentException("Invalid Object Id definition for " + beanDesc.getBeanClass().getName() + ": can not find property with name '" + propName + "'"); [EOL]         } [EOL]         idType = idProp.getType(); [EOL]         gen = new PropertyBasedObjectIdGenerator(objectIdInfo.getScope()); [EOL]     } else { [EOL]         JavaType type = ctxt.constructType(implClass); [EOL]         idType = ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0]; [EOL]         idProp = null; [EOL]         gen = ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo); [EOL]     } [EOL]     JsonDeserializer<?> deser = ctxt.findRootValueDeserializer(idType); [EOL]     builder.setObjectIdReader(ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), gen, deser, idProp)); [EOL] } <line_num>: 356,389
@SuppressWarnings("unchecked") [EOL] public JsonDeserializer<Object> buildThrowableDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException { [EOL]     final DeserializationConfig config = ctxt.getConfig(); [EOL]     BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, beanDesc); [EOL]     builder.setValueInstantiator(findValueInstantiator(ctxt, beanDesc)); [EOL]     addBeanProps(ctxt, beanDesc, builder); [EOL]     AnnotatedMethod am = beanDesc.findMethod("initCause", INIT_CAUSE_PARAMS); [EOL]     if (am != null) { [EOL]         SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(ctxt.getConfig(), am, "cause"); [EOL]         SettableBeanProperty prop = constructSettableProperty(ctxt, beanDesc, propDef, am.getGenericParameterType(0)); [EOL]         if (prop != null) { [EOL]             builder.addOrReplaceProperty(prop, true); [EOL]         } [EOL]     } [EOL]     builder.addIgnorable("localizedMessage"); [EOL]     builder.addIgnorable("suppressed"); [EOL]     builder.addIgnorable("message"); [EOL]     if (_factoryConfig.hasDeserializerModifiers()) { [EOL]         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { [EOL]             builder = mod.updateBuilder(config, beanDesc, builder); [EOL]         } [EOL]     } [EOL]     JsonDeserializer<?> deserializer = builder.build(); [EOL]     if (deserializer instanceof BeanDeserializer) { [EOL]         deserializer = new ThrowableDeserializer((BeanDeserializer) deserializer); [EOL]     } [EOL]     if (_factoryConfig.hasDeserializerModifiers()) { [EOL]         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { [EOL]             deserializer = mod.modifyDeserializer(config, beanDesc, deserializer); [EOL]         } [EOL]     } [EOL]     return (JsonDeserializer<Object>) deserializer; [EOL] } <line_num>: 391,453
protected BeanDeserializerBuilder constructBeanDeserializerBuilder(DeserializationContext ctxt, BeanDescription beanDesc) { [EOL]     return new BeanDeserializerBuilder(beanDesc, ctxt.getConfig()); [EOL] } <line_num>: 467,470
protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException { [EOL]     final SettableBeanProperty[] creatorProps = builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig()); [EOL]     AnnotationIntrospector intr = ctxt.getAnnotationIntrospector(); [EOL]     boolean ignoreAny = false; [EOL]     { [EOL]         Boolean B = intr.findIgnoreUnknownProperties(beanDesc.getClassInfo()); [EOL]         if (B != null) { [EOL]             ignoreAny = B.booleanValue(); [EOL]             builder.setIgnoreUnknownProperties(ignoreAny); [EOL]         } [EOL]     } [EOL]     Set<String> ignored = ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo())); [EOL]     for (String propName : ignored) { [EOL]         builder.addIgnorable(propName); [EOL]     } [EOL]     AnnotatedMethod anySetter = beanDesc.findAnySetter(); [EOL]     if (anySetter != null) { [EOL]         builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter)); [EOL]     } [EOL]     if (anySetter == null) { [EOL]         Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames(); [EOL]         if (ignored2 != null) { [EOL]             for (String propName : ignored2) { [EOL]                 builder.addIgnorable(propName); [EOL]             } [EOL]         } [EOL]     } [EOL]     final boolean useGettersAsSetters = (ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS)); [EOL]     List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored); [EOL]     if (_factoryConfig.hasDeserializerModifiers()) { [EOL]         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { [EOL]             propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs); [EOL]         } [EOL]     } [EOL]     for (BeanPropertyDefinition propDef : propDefs) { [EOL]         SettableBeanProperty prop = null; [EOL]         if (propDef.hasConstructorParameter()) { [EOL]             final String name = propDef.getName(); [EOL]             if (creatorProps != null) { [EOL]                 for (SettableBeanProperty cp : creatorProps) { [EOL]                     if (name.equals(cp.getName())) { [EOL]                         prop = cp; [EOL]                         break; [EOL]                     } [EOL]                 } [EOL]             } [EOL]             if (prop == null) { [EOL]                 throw ctxt.mappingException("Could not find creator property with name '" + name + "' (in class " + beanDesc.getBeanClass().getName() + ")"); [EOL]             } [EOL]             builder.addCreatorProperty(prop); [EOL]             continue; [EOL]         } [EOL]         if (propDef.hasSetter()) { [EOL]             Type propertyType = propDef.getSetter().getGenericParameterType(0); [EOL]             prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType); [EOL]         } else if (propDef.hasField()) { [EOL]             Type propertyType = propDef.getField().getGenericType(); [EOL]             prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType); [EOL]         } else if (useGettersAsSetters && propDef.hasGetter()) { [EOL]             AnnotatedMethod getter = propDef.getGetter(); [EOL]             Class<?> rawPropertyType = getter.getRawType(); [EOL]             if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) { [EOL]                 prop = constructSetterlessProperty(ctxt, beanDesc, propDef); [EOL]             } [EOL]         } [EOL]         if (prop != null) { [EOL]             Class<?>[] views = propDef.findViews(); [EOL]             if (views == null) { [EOL]                 if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) { [EOL]                     views = NO_VIEWS; [EOL]                 } [EOL]             } [EOL]             prop.setViews(views); [EOL]             builder.addProperty(prop); [EOL]         } [EOL]     } [EOL] } <line_num>: 479,588
protected List<BeanPropertyDefinition> filterBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder, List<BeanPropertyDefinition> propDefsIn, Set<String> ignored) throws JsonMappingException { [EOL]     ArrayList<BeanPropertyDefinition> result = new ArrayList<BeanPropertyDefinition>(Math.max(4, propDefsIn.size())); [EOL]     HashMap<Class<?>, Boolean> ignoredTypes = new HashMap<Class<?>, Boolean>(); [EOL]     for (BeanPropertyDefinition property : propDefsIn) { [EOL]         String name = property.getName(); [EOL]         if (ignored.contains(name)) { [EOL]             continue; [EOL]         } [EOL]         if (!property.hasConstructorParameter()) { [EOL]             Class<?> rawPropertyType = null; [EOL]             if (property.hasSetter()) { [EOL]                 rawPropertyType = property.getSetter().getRawParameterType(0); [EOL]             } else if (property.hasField()) { [EOL]                 rawPropertyType = property.getField().getRawType(); [EOL]             } [EOL]             if ((rawPropertyType != null) && (isIgnorableType(ctxt.getConfig(), beanDesc, rawPropertyType, ignoredTypes))) { [EOL]                 builder.addIgnorable(name); [EOL]                 continue; [EOL]             } [EOL]         } [EOL]         result.add(property); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 596,630
protected void addReferenceProperties(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException { [EOL]     Map<String, AnnotatedMember> refs = beanDesc.findBackReferenceProperties(); [EOL]     if (refs != null) { [EOL]         for (Map.Entry<String, AnnotatedMember> en : refs.entrySet()) { [EOL]             String name = en.getKey(); [EOL]             AnnotatedMember m = en.getValue(); [EOL]             Type genericType; [EOL]             if (m instanceof AnnotatedMethod) { [EOL]                 genericType = ((AnnotatedMethod) m).getGenericParameterType(0); [EOL]             } else { [EOL]                 genericType = m.getRawType(); [EOL]             } [EOL]             SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(ctxt.getConfig(), m); [EOL]             builder.addBackReferenceProperty(name, constructSettableProperty(ctxt, beanDesc, propDef, genericType)); [EOL]         } [EOL]     } [EOL] } <line_num>: 636,658
protected void addInjectables(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException { [EOL]     Map<Object, AnnotatedMember> raw = beanDesc.findInjectables(); [EOL]     if (raw != null) { [EOL]         boolean fixAccess = ctxt.canOverrideAccessModifiers(); [EOL]         for (Map.Entry<Object, AnnotatedMember> entry : raw.entrySet()) { [EOL]             AnnotatedMember m = entry.getValue(); [EOL]             if (fixAccess) { [EOL]                 m.fixAccess(); [EOL]             } [EOL]             builder.addInjectable(m.getName(), beanDesc.resolveType(m.getGenericType()), beanDesc.getClassAnnotations(), m, entry.getKey()); [EOL]         } [EOL]     } [EOL] } <line_num>: 664,680
protected SettableAnyProperty constructAnySetter(DeserializationContext ctxt, BeanDescription beanDesc, AnnotatedMethod setter) throws JsonMappingException { [EOL]     if (ctxt.canOverrideAccessModifiers()) { [EOL]         setter.fixAccess(); [EOL]     } [EOL]     JavaType type = beanDesc.bindingsForBeanType().resolveType(setter.getGenericParameterType(1)); [EOL]     BeanProperty.Std property = new BeanProperty.Std(setter.getName(), type, null, beanDesc.getClassAnnotations(), setter, false); [EOL]     type = resolveType(ctxt, beanDesc, type, setter); [EOL]     JsonDeserializer<Object> deser = findDeserializerFromAnnotation(ctxt, setter); [EOL]     if (deser != null) { [EOL]         return new SettableAnyProperty(property, setter, type, deser); [EOL]     } [EOL]     type = modifyTypeByAnnotation(ctxt, setter, type); [EOL]     return new SettableAnyProperty(property, setter, type, null); [EOL] } <line_num>: 687,714
protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, Type jdkType) throws JsonMappingException { [EOL]     AnnotatedMember mutator = propDef.getMutator(); [EOL]     if (ctxt.canOverrideAccessModifiers()) { [EOL]         mutator.fixAccess(); [EOL]     } [EOL]     JavaType t0 = beanDesc.resolveType(jdkType); [EOL]     BeanProperty.Std property = new BeanProperty.Std(propDef.getName(), t0, propDef.getWrapperName(), beanDesc.getClassAnnotations(), mutator, propDef.isRequired()); [EOL]     JavaType type = resolveType(ctxt, beanDesc, t0, mutator); [EOL]     if (type != t0) { [EOL]         property = property.withType(type); [EOL]     } [EOL]     JsonDeserializer<Object> propDeser = findDeserializerFromAnnotation(ctxt, mutator); [EOL]     type = modifyTypeByAnnotation(ctxt, mutator, type); [EOL]     TypeDeserializer typeDeser = type.getTypeHandler(); [EOL]     SettableBeanProperty prop; [EOL]     if (mutator instanceof AnnotatedMethod) { [EOL]         prop = new MethodProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator); [EOL]     } else { [EOL]         prop = new FieldProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator); [EOL]     } [EOL]     if (propDeser != null) { [EOL]         prop = prop.withValueDeserializer(propDeser); [EOL]     } [EOL]     AnnotationIntrospector.ReferenceProperty ref = propDef.findReferenceType(); [EOL]     if (ref != null && ref.isManagedReference()) { [EOL]         prop.setManagedReferenceName(ref.getName()); [EOL]     } [EOL]     return prop; [EOL] } <line_num>: 723,767
protected SettableBeanProperty constructSetterlessProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef) throws JsonMappingException { [EOL]     final AnnotatedMethod getter = propDef.getGetter(); [EOL]     if (ctxt.canOverrideAccessModifiers()) { [EOL]         getter.fixAccess(); [EOL]     } [EOL]     JavaType type = getter.getType(beanDesc.bindingsForBeanType()); [EOL]     JsonDeserializer<Object> propDeser = findDeserializerFromAnnotation(ctxt, getter); [EOL]     type = modifyTypeByAnnotation(ctxt, getter, type); [EOL]     TypeDeserializer typeDeser = type.getTypeHandler(); [EOL]     SettableBeanProperty prop = new SetterlessProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), getter); [EOL]     if (propDeser != null) { [EOL]         prop = prop.withValueDeserializer(propDeser); [EOL]     } [EOL]     return prop; [EOL] } <line_num>: 773,799
protected boolean isPotentialBeanType(Class<?> type) { [EOL]     String typeStr = ClassUtil.canBeABeanType(type); [EOL]     if (typeStr != null) { [EOL]         throw new IllegalArgumentException("Can not deserialize Class " + type.getName() + " (of type " + typeStr + ") as a Bean"); [EOL]     } [EOL]     if (ClassUtil.isProxyType(type)) { [EOL]         throw new IllegalArgumentException("Can not deserialize Proxy class " + type.getName() + " as a Bean"); [EOL]     } [EOL]     typeStr = ClassUtil.isLocalType(type, true); [EOL]     if (typeStr != null) { [EOL]         throw new IllegalArgumentException("Can not deserialize Class " + type.getName() + " (of type " + typeStr + ") as a Bean"); [EOL]     } [EOL]     return true; [EOL] } <line_num>: 815,832
protected boolean isIgnorableType(DeserializationConfig config, BeanDescription beanDesc, Class<?> type, Map<Class<?>, Boolean> ignoredTypes) { [EOL]     Boolean status = ignoredTypes.get(type); [EOL]     if (status == null) { [EOL]         BeanDescription desc = config.introspectClassAnnotations(type); [EOL]         status = config.getAnnotationIntrospector().isIgnorableType(desc.getClassInfo()); [EOL]         if (status == null) { [EOL]             status = Boolean.FALSE; [EOL]         } [EOL]     } [EOL]     return status; [EOL] } <line_num>: 838,851
