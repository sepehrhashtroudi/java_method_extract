public JavaTypeDeserializer() { [EOL]     super(JavaType.class); [EOL] } <line_num>: 72,72
public TokenBufferDeserializer() { [EOL]     super(TokenBuffer.class); [EOL] } <line_num>: 157,157
@Deprecated [EOL] public static StdDeserializer<?>[] all() { [EOL]     return new StdDeserializer[] { JavaTypeDeserializer.instance, TokenBufferDeserializer.instance }; [EOL] } <line_num>: 28,36
public static JsonDeserializer<?> find(Class<?> rawType) { [EOL]     if (rawType == TokenBuffer.class) { [EOL]         return TokenBufferDeserializer.instance; [EOL]     } [EOL]     if (JavaType.class.isAssignableFrom(rawType)) { [EOL]         return JavaTypeDeserializer.instance; [EOL]     } [EOL]     return null; [EOL] } <line_num>: 38,47
public static ValueInstantiator findValueInstantiator(DeserializationConfig config, BeanDescription beanDesc) { [EOL]     if (beanDesc.getBeanClass() == JsonLocation.class) { [EOL]         return JsonLocationInstantiator.instance; [EOL]     } [EOL]     return null; [EOL] } <line_num>: 49,56
@Override [EOL] public JavaType deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     JsonToken curr = jp.getCurrentToken(); [EOL]     if (curr == JsonToken.VALUE_STRING) { [EOL]         String str = jp.getText().trim(); [EOL]         if (str.length() == 0) { [EOL]             return getEmptyValue(); [EOL]         } [EOL]         return ctxt.getTypeFactory().constructFromCanonical(str); [EOL]     } [EOL]     if (curr == JsonToken.VALUE_EMBEDDED_OBJECT) { [EOL]         return (JavaType) jp.getEmbeddedObject(); [EOL]     } [EOL]     throw ctxt.mappingException(_valueClass); [EOL] } <line_num>: 74,92
@Override [EOL] public String getValueTypeDesc() { [EOL]     return JsonLocation.class.getName(); [EOL] } <line_num>: 104,107
@Override [EOL] public boolean canCreateFromObjectWith() { [EOL]     return true; [EOL] } <line_num>: 109,110
@Override [EOL] public CreatorProperty[] getFromObjectArguments(DeserializationConfig config) { [EOL]     JavaType intType = config.constructType(Integer.TYPE); [EOL]     JavaType longType = config.constructType(Long.TYPE); [EOL]     return new CreatorProperty[] { creatorProp("sourceRef", config.constructType(Object.class), 0), creatorProp("byteOffset", longType, 1), creatorProp("charOffset", longType, 2), creatorProp("lineNr", intType, 3), creatorProp("columnNr", intType, 4) }; [EOL] } <line_num>: 112,123
private static CreatorProperty creatorProp(String name, JavaType type, int index) { [EOL]     return new CreatorProperty(name, type, null, null, null, null, index, null, true); [EOL] } <line_num>: 125,128
@Override [EOL] public Object createFromObjectWith(DeserializationContext ctxt, Object[] args) { [EOL]     return new JsonLocation(args[0], _long(args[1]), _long(args[2]), _int(args[3]), _int(args[4])); [EOL] } <line_num>: 130,134
private final static long _long(Object o) { [EOL]     return (o == null) ? 0L : ((Number) o).longValue(); [EOL] } <line_num>: 136,138
private final static int _int(Object o) { [EOL]     return (o == null) ? 0 : ((Number) o).intValue(); [EOL] } <line_num>: 139,141
@Override [EOL] public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     TokenBuffer tb = new TokenBuffer(jp.getCodec()); [EOL]     tb.copyCurrentStructure(jp); [EOL]     return tb; [EOL] } <line_num>: 159,167
