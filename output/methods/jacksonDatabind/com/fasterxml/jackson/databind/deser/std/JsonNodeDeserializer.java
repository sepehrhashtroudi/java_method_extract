protected JsonNodeDeserializer() { [EOL] } <line_num>: 25,25
protected ObjectDeserializer() { [EOL] } <line_num>: 80,80
protected ArrayDeserializer() { [EOL] } <line_num>: 106,106
public BaseNodeDeserializer() { [EOL]     super(JsonNode.class); [EOL] } <line_num>: 130,133
public static JsonDeserializer<? extends JsonNode> getDeserializer(Class<?> nodeClass) { [EOL]     if (nodeClass == ObjectNode.class) { [EOL]         return ObjectDeserializer.getInstance(); [EOL]     } [EOL]     if (nodeClass == ArrayNode.class) { [EOL]         return ArrayDeserializer.getInstance(); [EOL]     } [EOL]     return instance; [EOL] } <line_num>: 30,40
@Override [EOL] public JsonNode deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     switch(jp.getCurrentToken()) { [EOL]         case START_OBJECT: [EOL]             return deserializeObject(jp, ctxt, ctxt.getNodeFactory()); [EOL]         case START_ARRAY: [EOL]             return deserializeArray(jp, ctxt, ctxt.getNodeFactory()); [EOL]         default: [EOL]             return deserializeAny(jp, ctxt, ctxt.getNodeFactory()); [EOL]     } [EOL] } <line_num>: 53,65
public static ObjectDeserializer getInstance() { [EOL]     return _instance; [EOL] } <line_num>: 82,82
@Override [EOL] public ObjectNode deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     if (jp.getCurrentToken() == JsonToken.START_OBJECT) { [EOL]         jp.nextToken(); [EOL]         return deserializeObject(jp, ctxt, ctxt.getNodeFactory()); [EOL]     } [EOL]     if (jp.getCurrentToken() == JsonToken.FIELD_NAME) { [EOL]         return deserializeObject(jp, ctxt, ctxt.getNodeFactory()); [EOL]     } [EOL]     throw ctxt.mappingException(ObjectNode.class); [EOL] } <line_num>: 84,96
public static ArrayDeserializer getInstance() { [EOL]     return _instance; [EOL] } <line_num>: 108,108
@Override [EOL] public ArrayNode deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     if (jp.isExpectedStartArrayToken()) { [EOL]         return deserializeArray(jp, ctxt, ctxt.getNodeFactory()); [EOL]     } [EOL]     throw ctxt.mappingException(ArrayNode.class); [EOL] } <line_num>: 110,118
@Override [EOL] public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException, JsonProcessingException { [EOL]     return typeDeserializer.deserializeTypedFromAny(jp, ctxt); [EOL] } <line_num>: 135,144
@Override [EOL] public JsonNode getNullValue() { [EOL]     return NullNode.getInstance(); [EOL] } <line_num>: 146,149
protected void _reportProblem(JsonParser jp, String msg) throws JsonMappingException { [EOL]     throw new JsonMappingException(msg, jp.getTokenLocation()); [EOL] } <line_num>: 157,161
protected void _handleDuplicateField(String fieldName, ObjectNode objectNode, JsonNode oldValue, JsonNode newValue) throws JsonProcessingException { [EOL]     ; [EOL] } <line_num>: 176,182
protected final ObjectNode deserializeObject(JsonParser jp, DeserializationContext ctxt, final JsonNodeFactory nodeFactory) throws IOException, JsonProcessingException { [EOL]     ObjectNode node = nodeFactory.objectNode(); [EOL]     JsonToken t = jp.getCurrentToken(); [EOL]     if (t == JsonToken.START_OBJECT) { [EOL]         t = jp.nextToken(); [EOL]     } [EOL]     for (; t == JsonToken.FIELD_NAME; t = jp.nextToken()) { [EOL]         String fieldName = jp.getCurrentName(); [EOL]         JsonNode value; [EOL]         switch(jp.nextToken()) { [EOL]             case START_OBJECT: [EOL]                 value = deserializeObject(jp, ctxt, nodeFactory); [EOL]                 break; [EOL]             case START_ARRAY: [EOL]                 value = deserializeArray(jp, ctxt, nodeFactory); [EOL]                 break; [EOL]             case VALUE_STRING: [EOL]                 value = nodeFactory.textNode(jp.getText()); [EOL]                 break; [EOL]             default: [EOL]                 value = deserializeAny(jp, ctxt, nodeFactory); [EOL]         } [EOL]         JsonNode old = node.replace(fieldName, value); [EOL]         if (old != null) { [EOL]             _handleDuplicateField(fieldName, node, old, value); [EOL]         } [EOL]     } [EOL]     return node; [EOL] } <line_num>: 190,221
protected final ArrayNode deserializeArray(JsonParser jp, DeserializationContext ctxt, final JsonNodeFactory nodeFactory) throws IOException, JsonProcessingException { [EOL]     ArrayNode node = nodeFactory.arrayNode(); [EOL]     while (true) { [EOL]         JsonToken t = jp.nextToken(); [EOL]         if (t == null) { [EOL]             throw ctxt.mappingException("Unexpected end-of-input when binding data into ArrayNode"); [EOL]         } [EOL]         switch(t) { [EOL]             case START_OBJECT: [EOL]                 node.add(deserializeObject(jp, ctxt, nodeFactory)); [EOL]                 break; [EOL]             case START_ARRAY: [EOL]                 node.add(deserializeArray(jp, ctxt, nodeFactory)); [EOL]                 break; [EOL]             case END_ARRAY: [EOL]                 return node; [EOL]             case VALUE_STRING: [EOL]                 node.add(nodeFactory.textNode(jp.getText())); [EOL]                 break; [EOL]             default: [EOL]                 node.add(deserializeAny(jp, ctxt, nodeFactory)); [EOL]                 break; [EOL]         } [EOL]     } [EOL] } <line_num>: 223,250
protected final JsonNode deserializeAny(JsonParser jp, DeserializationContext ctxt, final JsonNodeFactory nodeFactory) throws IOException, JsonProcessingException { [EOL]     switch(jp.getCurrentToken()) { [EOL]         case START_OBJECT: [EOL]             return deserializeObject(jp, ctxt, nodeFactory); [EOL]         case START_ARRAY: [EOL]             return deserializeArray(jp, ctxt, nodeFactory); [EOL]         case FIELD_NAME: [EOL]             return deserializeObject(jp, ctxt, nodeFactory); [EOL]         case VALUE_EMBEDDED_OBJECT: [EOL]             { [EOL]                 Object ob = jp.getEmbeddedObject(); [EOL]                 if (ob == null) { [EOL]                     return nodeFactory.nullNode(); [EOL]                 } [EOL]                 Class<?> type = ob.getClass(); [EOL]                 if (type == byte[].class) { [EOL]                     return nodeFactory.binaryNode((byte[]) ob); [EOL]                 } [EOL]                 return nodeFactory.POJONode(ob); [EOL]             } [EOL]         case VALUE_STRING: [EOL]             return nodeFactory.textNode(jp.getText()); [EOL]         case VALUE_NUMBER_INT: [EOL]             { [EOL]                 JsonParser.NumberType nt = jp.getNumberType(); [EOL]                 if (nt == JsonParser.NumberType.BIG_INTEGER || ctxt.isEnabled(DeserializationFeature.USE_BIG_INTEGER_FOR_INTS)) { [EOL]                     return nodeFactory.numberNode(jp.getBigIntegerValue()); [EOL]                 } [EOL]                 if (nt == JsonParser.NumberType.INT) { [EOL]                     return nodeFactory.numberNode(jp.getIntValue()); [EOL]                 } [EOL]                 return nodeFactory.numberNode(jp.getLongValue()); [EOL]             } [EOL]         case VALUE_NUMBER_FLOAT: [EOL]             { [EOL]                 JsonParser.NumberType nt = jp.getNumberType(); [EOL]                 if (nt == JsonParser.NumberType.BIG_DECIMAL || ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) { [EOL]                     return nodeFactory.numberNode(jp.getDecimalValue()); [EOL]                 } [EOL]                 return nodeFactory.numberNode(jp.getDoubleValue()); [EOL]             } [EOL]         case VALUE_TRUE: [EOL]             return nodeFactory.booleanNode(true); [EOL]         case VALUE_FALSE: [EOL]             return nodeFactory.booleanNode(false); [EOL]         case VALUE_NULL: [EOL]             return nodeFactory.nullNode(); [EOL]         default: [EOL]             throw ctxt.mappingException(getValueClass()); [EOL]     } [EOL] } <line_num>: 252,324
