public StringCollectionDeserializer(JavaType collectionType, JsonDeserializer<?> valueDeser, ValueInstantiator valueInstantiator) { [EOL]     this(collectionType, valueInstantiator, null, valueDeser); [EOL] } <line_num>: 57,61
@SuppressWarnings("unchecked") [EOL] protected StringCollectionDeserializer(JavaType collectionType, ValueInstantiator valueInstantiator, JsonDeserializer<?> delegateDeser, JsonDeserializer<?> valueDeser) { [EOL]     super(collectionType.getRawClass()); [EOL]     _collectionType = collectionType; [EOL]     _valueDeserializer = (JsonDeserializer<String>) valueDeser; [EOL]     _valueInstantiator = valueInstantiator; [EOL]     _delegateDeserializer = (JsonDeserializer<Object>) delegateDeser; [EOL] } <line_num>: 63,73
protected StringCollectionDeserializer withResolved(JsonDeserializer<?> delegateDeser, JsonDeserializer<?> valueDeser) { [EOL]     if ((_valueDeserializer == valueDeser) && (_delegateDeserializer == delegateDeser)) { [EOL]         return this; [EOL]     } [EOL]     return new StringCollectionDeserializer(_collectionType, _valueInstantiator, delegateDeser, valueDeser); [EOL] } <line_num>: 75,83
@Override [EOL] public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException { [EOL]     JsonDeserializer<Object> delegate = null; [EOL]     if (_valueInstantiator != null) { [EOL]         AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator(); [EOL]         if (delegateCreator != null) { [EOL]             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig()); [EOL]             delegate = findDeserializer(ctxt, delegateType, property); [EOL]         } [EOL]     } [EOL]     JsonDeserializer<?> valueDeser = _valueDeserializer; [EOL]     if (valueDeser == null) { [EOL]         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser); [EOL]         if (valueDeser == null) { [EOL]             valueDeser = ctxt.findContextualValueDeserializer(_collectionType.getContentType(), property); [EOL]         } [EOL]     } else { [EOL]         if (valueDeser instanceof ContextualDeserializer) { [EOL]             valueDeser = ((ContextualDeserializer) valueDeser).createContextual(ctxt, property); [EOL]         } [EOL]     } [EOL]     if (isDefaultDeserializer(valueDeser)) { [EOL]         valueDeser = null; [EOL]     } [EOL]     return withResolved(delegate, valueDeser); [EOL] } <line_num>: 90,120
@Override [EOL] public JavaType getContentType() { [EOL]     return _collectionType.getContentType(); [EOL] } <line_num>: 128,131
@SuppressWarnings("unchecked") [EOL] @Override [EOL] public JsonDeserializer<Object> getContentDeserializer() { [EOL]     JsonDeserializer<?> deser = _valueDeserializer; [EOL]     return (JsonDeserializer<Object>) deser; [EOL] } <line_num>: 133,138
@SuppressWarnings("unchecked") [EOL] @Override [EOL] public Collection<String> deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     if (_delegateDeserializer != null) { [EOL]         return (Collection<String>) _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt)); [EOL]     } [EOL]     final Collection<String> result = (Collection<String>) _valueInstantiator.createUsingDefault(ctxt); [EOL]     return deserialize(jp, ctxt, result); [EOL] } <line_num>: 146,157
@Override [EOL] public Collection<String> deserialize(JsonParser jp, DeserializationContext ctxt, Collection<String> result) throws IOException, JsonProcessingException { [EOL]     if (!jp.isExpectedStartArrayToken()) { [EOL]         return handleNonArray(jp, ctxt, result); [EOL]     } [EOL]     if (_valueDeserializer != null) { [EOL]         return deserializeUsingCustom(jp, ctxt, result, _valueDeserializer); [EOL]     } [EOL]     JsonToken t; [EOL]     while ((t = jp.nextToken()) != JsonToken.END_ARRAY) { [EOL]         result.add((t == JsonToken.VALUE_NULL) ? null : _parseString(jp, ctxt)); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 159,178
private Collection<String> deserializeUsingCustom(JsonParser jp, DeserializationContext ctxt, Collection<String> result, final JsonDeserializer<String> deser) throws IOException, JsonProcessingException { [EOL]     JsonToken t; [EOL]     while ((t = jp.nextToken()) != JsonToken.END_ARRAY) { [EOL]         String value; [EOL]         if (t == JsonToken.VALUE_NULL) { [EOL]             value = null; [EOL]         } else { [EOL]             value = deser.deserialize(jp, ctxt); [EOL]         } [EOL]         result.add(value); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 180,196
@Override [EOL] public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException, JsonProcessingException { [EOL]     return typeDeserializer.deserializeTypedFromArray(jp, ctxt); [EOL] } <line_num>: 198,205
private final Collection<String> handleNonArray(JsonParser jp, DeserializationContext ctxt, Collection<String> result) throws IOException, JsonProcessingException { [EOL]     if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY)) { [EOL]         throw ctxt.mappingException(_collectionType.getRawClass()); [EOL]     } [EOL]     JsonDeserializer<String> valueDes = _valueDeserializer; [EOL]     JsonToken t = jp.getCurrentToken(); [EOL]     String value; [EOL]     if (t == JsonToken.VALUE_NULL) { [EOL]         value = null; [EOL]     } else { [EOL]         value = (valueDes == null) ? _parseString(jp, ctxt) : valueDes.deserialize(jp, ctxt); [EOL]     } [EOL]     result.add(value); [EOL]     return result; [EOL] } <line_num>: 212,233
