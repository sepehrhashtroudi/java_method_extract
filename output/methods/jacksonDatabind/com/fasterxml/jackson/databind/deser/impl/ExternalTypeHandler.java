protected ExternalTypeHandler(ExtTypedProperty[] properties, HashMap<String, Integer> nameToPropertyIndex, String[] typeIds, TokenBuffer[] tokens) { [EOL]     _properties = properties; [EOL]     _nameToPropertyIndex = nameToPropertyIndex; [EOL]     _typeIds = typeIds; [EOL]     _tokens = tokens; [EOL] } <line_num>: 28,36
protected ExternalTypeHandler(ExternalTypeHandler h) { [EOL]     _properties = h._properties; [EOL]     _nameToPropertyIndex = h._nameToPropertyIndex; [EOL]     int len = _properties.length; [EOL]     _typeIds = new String[len]; [EOL]     _tokens = new TokenBuffer[len]; [EOL] } <line_num>: 38,45
public ExtTypedProperty(SettableBeanProperty property, TypeDeserializer typeDeser) { [EOL]     _property = property; [EOL]     _typeDeserializer = typeDeser; [EOL]     _typePropertyName = typeDeser.getPropertyName(); [EOL] } <line_num>: 288,293
public ExternalTypeHandler start() { [EOL]     return new ExternalTypeHandler(this); [EOL] } <line_num>: 47,49
public boolean handleTypePropertyValue(JsonParser jp, DeserializationContext ctxt, String propName, Object bean) throws IOException, JsonProcessingException { [EOL]     Integer I = _nameToPropertyIndex.get(propName); [EOL]     if (I == null) { [EOL]         return false; [EOL]     } [EOL]     int index = I.intValue(); [EOL]     ExtTypedProperty prop = _properties[index]; [EOL]     if (!prop.hasTypePropertyName(propName)) { [EOL]         return false; [EOL]     } [EOL]     String typeId = jp.getText(); [EOL]     boolean canDeserialize = (bean != null) && (_tokens[index] != null); [EOL]     if (canDeserialize) { [EOL]         _deserializeAndSet(jp, ctxt, bean, index, typeId); [EOL]         _tokens[index] = null; [EOL]     } else { [EOL]         _typeIds[index] = typeId; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 57,82
public boolean handlePropertyValue(JsonParser jp, DeserializationContext ctxt, String propName, Object bean) throws IOException, JsonProcessingException { [EOL]     Integer I = _nameToPropertyIndex.get(propName); [EOL]     if (I == null) { [EOL]         return false; [EOL]     } [EOL]     int index = I.intValue(); [EOL]     ExtTypedProperty prop = _properties[index]; [EOL]     boolean canDeserialize; [EOL]     if (prop.hasTypePropertyName(propName)) { [EOL]         _typeIds[index] = jp.getText(); [EOL]         jp.skipChildren(); [EOL]         canDeserialize = (bean != null) && (_tokens[index] != null); [EOL]     } else { [EOL]         @SuppressWarnings("resource") [EOL]         TokenBuffer tokens = new TokenBuffer(jp.getCodec()); [EOL]         tokens.copyCurrentStructure(jp); [EOL]         _tokens[index] = tokens; [EOL]         canDeserialize = (bean != null) && (_typeIds[index] != null); [EOL]     } [EOL]     if (canDeserialize) { [EOL]         String typeId = _typeIds[index]; [EOL]         _typeIds[index] = null; [EOL]         _deserializeAndSet(jp, ctxt, bean, index, typeId); [EOL]         _tokens[index] = null; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 92,125
public Object complete(JsonParser jp, DeserializationContext ctxt, Object bean) throws IOException, JsonProcessingException { [EOL]     for (int i = 0, len = _properties.length; i < len; ++i) { [EOL]         String typeId = _typeIds[i]; [EOL]         if (typeId == null) { [EOL]             TokenBuffer tokens = _tokens[i]; [EOL]             if (tokens == null) { [EOL]                 continue; [EOL]             } [EOL]             JsonToken t = tokens.firstToken(); [EOL]             if (t != null && t.isScalarValue()) { [EOL]                 JsonParser buffered = tokens.asParser(jp); [EOL]                 buffered.nextToken(); [EOL]                 SettableBeanProperty extProp = _properties[i].getProperty(); [EOL]                 Object result = TypeDeserializer.deserializeIfNatural(buffered, ctxt, extProp.getType()); [EOL]                 if (result != null) { [EOL]                     extProp.set(bean, result); [EOL]                     continue; [EOL]                 } [EOL]                 if (!_properties[i].hasDefaultType()) { [EOL]                     throw ctxt.mappingException("Missing external type id property '" + _properties[i].getTypePropertyName() + "'"); [EOL]                 } [EOL]                 typeId = _properties[i].getDefaultTypeId(); [EOL]             } [EOL]         } else if (_tokens[i] == null) { [EOL]             SettableBeanProperty prop = _properties[i].getProperty(); [EOL]             throw ctxt.mappingException("Missing property '" + prop.getName() + "' for external type id '" + _properties[i].getTypePropertyName()); [EOL]         } [EOL]         _deserializeAndSet(jp, ctxt, bean, i, typeId); [EOL]     } [EOL]     return bean; [EOL] } <line_num>: 127,165
public Object complete(JsonParser jp, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException, JsonProcessingException { [EOL]     final int len = _properties.length; [EOL]     Object[] values = new Object[len]; [EOL]     for (int i = 0; i < len; ++i) { [EOL]         String typeId = _typeIds[i]; [EOL]         if (typeId == null) { [EOL]             if (_tokens[i] == null) { [EOL]                 continue; [EOL]             } [EOL]             if (!_properties[i].hasDefaultType()) { [EOL]                 throw ctxt.mappingException("Missing external type id property '" + _properties[i].getTypePropertyName() + "'"); [EOL]             } [EOL]             typeId = _properties[i].getDefaultTypeId(); [EOL]         } else if (_tokens[i] == null) { [EOL]             SettableBeanProperty prop = _properties[i].getProperty(); [EOL]             throw ctxt.mappingException("Missing property '" + prop.getName() + "' for external type id '" + _properties[i].getTypePropertyName()); [EOL]         } [EOL]         values[i] = _deserialize(jp, ctxt, i, typeId); [EOL]     } [EOL]     for (int i = 0; i < len; ++i) { [EOL]         SettableBeanProperty prop = _properties[i].getProperty(); [EOL]         if (creator.findCreatorProperty(prop.getName()) != null) { [EOL]             buffer.assignParameter(prop.getCreatorIndex(), values[i]); [EOL]         } [EOL]     } [EOL]     Object bean = creator.build(ctxt, buffer); [EOL]     for (int i = 0; i < len; ++i) { [EOL]         SettableBeanProperty prop = _properties[i].getProperty(); [EOL]         if (creator.findCreatorProperty(prop.getName()) == null) { [EOL]             prop.set(bean, values[i]); [EOL]         } [EOL]     } [EOL]     return bean; [EOL] } <line_num>: 171,213
protected final Object _deserialize(JsonParser jp, DeserializationContext ctxt, int index, String typeId) throws IOException, JsonProcessingException { [EOL]     @SuppressWarnings("resource") [EOL]     TokenBuffer merged = new TokenBuffer(jp.getCodec()); [EOL]     merged.writeStartArray(); [EOL]     merged.writeString(typeId); [EOL]     JsonParser p2 = _tokens[index].asParser(jp); [EOL]     p2.nextToken(); [EOL]     merged.copyCurrentStructure(p2); [EOL]     merged.writeEndArray(); [EOL]     p2 = merged.asParser(jp); [EOL]     p2.nextToken(); [EOL]     return _properties[index].getProperty().deserialize(p2, ctxt); [EOL] } <line_num>: 215,232
protected final void _deserializeAndSet(JsonParser jp, DeserializationContext ctxt, Object bean, int index, String typeId) throws IOException, JsonProcessingException { [EOL]     @SuppressWarnings("resource") [EOL]     TokenBuffer merged = new TokenBuffer(jp.getCodec()); [EOL]     merged.writeStartArray(); [EOL]     merged.writeString(typeId); [EOL]     JsonParser p2 = _tokens[index].asParser(jp); [EOL]     p2.nextToken(); [EOL]     merged.copyCurrentStructure(p2); [EOL]     merged.writeEndArray(); [EOL]     p2 = merged.asParser(jp); [EOL]     p2.nextToken(); [EOL]     _properties[index].getProperty().deserializeAndSet(p2, ctxt, bean); [EOL] } <line_num>: 234,254
public void addExternal(SettableBeanProperty property, TypeDeserializer typeDeser) { [EOL]     Integer index = _properties.size(); [EOL]     _properties.add(new ExtTypedProperty(property, typeDeser)); [EOL]     _nameToPropertyIndex.put(property.getName(), index); [EOL]     _nameToPropertyIndex.put(typeDeser.getPropertyName(), index); [EOL] } <line_num>: 268,274
public ExternalTypeHandler build() { [EOL]     return new ExternalTypeHandler(_properties.toArray(new ExtTypedProperty[_properties.size()]), _nameToPropertyIndex, null, null); [EOL] } <line_num>: 276,279
public boolean hasTypePropertyName(String n) { [EOL]     return n.equals(_typePropertyName); [EOL] } <line_num>: 295,297
public boolean hasDefaultType() { [EOL]     return _typeDeserializer.getDefaultImpl() != null; [EOL] } <line_num>: 299,301
public String getDefaultTypeId() { [EOL]     Class<?> defaultType = _typeDeserializer.getDefaultImpl(); [EOL]     if (defaultType == null) { [EOL]         return null; [EOL]     } [EOL]     return _typeDeserializer.getTypeIdResolver().idFromValueAndType(null, defaultType); [EOL] } <line_num>: 303,309
public String getTypePropertyName() { [EOL]     return _typePropertyName; [EOL] } <line_num>: 311,311
public SettableBeanProperty getProperty() { [EOL]     return _property; [EOL] } <line_num>: 313,315
