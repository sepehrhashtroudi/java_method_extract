public ObjectArrayDeserializer(ArrayType arrayType, JsonDeserializer<Object> elemDeser, TypeDeserializer elemTypeDeser) { [EOL]     super(Object[].class); [EOL]     _arrayType = arrayType; [EOL]     _elementClass = arrayType.getContentType().getRawClass(); [EOL]     _untyped = (_elementClass == Object.class); [EOL]     _elementDeserializer = elemDeser; [EOL]     _elementTypeDeserializer = elemTypeDeser; [EOL] } <line_num>: 61,70
@SuppressWarnings("unchecked") [EOL] public ObjectArrayDeserializer withDeserializer(TypeDeserializer elemTypeDeser, JsonDeserializer<?> elemDeser) { [EOL]     if ((elemDeser == _elementDeserializer) && (elemTypeDeser == _elementTypeDeserializer)) { [EOL]         return this; [EOL]     } [EOL]     return new ObjectArrayDeserializer(_arrayType, (JsonDeserializer<Object>) elemDeser, elemTypeDeser); [EOL] } <line_num>: 75,84
@Override [EOL] public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException { [EOL]     JsonDeserializer<?> deser = _elementDeserializer; [EOL]     deser = findConvertingContentDeserializer(ctxt, property, deser); [EOL]     if (deser == null) { [EOL]         deser = ctxt.findContextualValueDeserializer(_arrayType.getContentType(), property); [EOL]     } else { [EOL]         if (deser instanceof ContextualDeserializer) { [EOL]             deser = ((ContextualDeserializer) deser).createContextual(ctxt, property); [EOL]         } [EOL]     } [EOL]     TypeDeserializer elemTypeDeser = _elementTypeDeserializer; [EOL]     if (elemTypeDeser != null) { [EOL]         elemTypeDeser = elemTypeDeser.forProperty(property); [EOL]     } [EOL]     return withDeserializer(elemTypeDeser, deser); [EOL] } <line_num>: 86,105
@Override [EOL] public JavaType getContentType() { [EOL]     return _arrayType.getContentType(); [EOL] } <line_num>: 113,116
@Override [EOL] public JsonDeserializer<Object> getContentDeserializer() { [EOL]     return _elementDeserializer; [EOL] } <line_num>: 118,121
@Override [EOL] public Object[] deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     if (!jp.isExpectedStartArrayToken()) { [EOL]         return handleNonArray(jp, ctxt); [EOL]     } [EOL]     final ObjectBuffer buffer = ctxt.leaseObjectBuffer(); [EOL]     Object[] chunk = buffer.resetAndStart(); [EOL]     int ix = 0; [EOL]     JsonToken t; [EOL]     final TypeDeserializer typeDeser = _elementTypeDeserializer; [EOL]     while ((t = jp.nextToken()) != JsonToken.END_ARRAY) { [EOL]         Object value; [EOL]         if (t == JsonToken.VALUE_NULL) { [EOL]             value = null; [EOL]         } else if (typeDeser == null) { [EOL]             value = _elementDeserializer.deserialize(jp, ctxt); [EOL]         } else { [EOL]             value = _elementDeserializer.deserializeWithType(jp, ctxt, typeDeser); [EOL]         } [EOL]         if (ix >= chunk.length) { [EOL]             chunk = buffer.appendCompletedChunk(chunk); [EOL]             ix = 0; [EOL]         } [EOL]         chunk[ix++] = value; [EOL]     } [EOL]     Object[] result; [EOL]     if (_untyped) { [EOL]         result = buffer.completeAndClearBuffer(chunk, ix); [EOL]     } else { [EOL]         result = buffer.completeAndClearBuffer(chunk, ix, _elementClass); [EOL]     } [EOL]     ctxt.returnObjectBuffer(buffer); [EOL]     return result; [EOL] } <line_num>: 129,171
@Override [EOL] public Object[] deserializeWithType(JsonParser jp, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException, JsonProcessingException { [EOL]     return (Object[]) typeDeserializer.deserializeTypedFromArray(jp, ctxt); [EOL] } <line_num>: 173,182
protected Byte[] deserializeFromBase64(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     byte[] b = jp.getBinaryValue(ctxt.getBase64Variant()); [EOL]     Byte[] result = new Byte[b.length]; [EOL]     for (int i = 0, len = b.length; i < len; ++i) { [EOL]         result[i] = Byte.valueOf(b[i]); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 190,201
private final Object[] handleNonArray(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     if ((jp.getCurrentToken() == JsonToken.VALUE_STRING) && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) { [EOL]         String str = jp.getText(); [EOL]         if (str.length() == 0) { [EOL]             return null; [EOL]         } [EOL]     } [EOL]     if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY)) { [EOL]         if (jp.getCurrentToken() == JsonToken.VALUE_STRING && _elementClass == Byte.class) { [EOL]             return deserializeFromBase64(jp, ctxt); [EOL]         } [EOL]         throw ctxt.mappingException(_arrayType.getRawClass()); [EOL]     } [EOL]     JsonToken t = jp.getCurrentToken(); [EOL]     Object value; [EOL]     if (t == JsonToken.VALUE_NULL) { [EOL]         value = null; [EOL]     } else if (_elementTypeDeserializer == null) { [EOL]         value = _elementDeserializer.deserialize(jp, ctxt); [EOL]     } else { [EOL]         value = _elementDeserializer.deserializeWithType(jp, ctxt, _elementTypeDeserializer); [EOL]     } [EOL]     Object[] result; [EOL]     if (_untyped) { [EOL]         result = new Object[1]; [EOL]     } else { [EOL]         result = (Object[]) Array.newInstance(_elementClass, 1); [EOL]     } [EOL]     result[0] = value; [EOL]     return result; [EOL] } <line_num>: 203,246
