public ManagedReferenceProperty(SettableBeanProperty forward, String refName, SettableBeanProperty backward, Annotations contextAnnotations, boolean isContainer) { [EOL]     super(forward.getName(), forward.getType(), forward.getWrapperName(), forward.getValueTypeDeserializer(), contextAnnotations, forward.isRequired()); [EOL]     _referenceName = refName; [EOL]     _managedProperty = forward; [EOL]     _backProperty = backward; [EOL]     _isContainer = isContainer; [EOL] } <line_num>: 38,49
protected ManagedReferenceProperty(ManagedReferenceProperty src, JsonDeserializer<?> deser) { [EOL]     super(src, deser); [EOL]     _referenceName = src._referenceName; [EOL]     _isContainer = src._isContainer; [EOL]     _managedProperty = src._managedProperty; [EOL]     _backProperty = src._backProperty; [EOL] } <line_num>: 51,58
protected ManagedReferenceProperty(ManagedReferenceProperty src, String newName) { [EOL]     super(src, newName); [EOL]     _referenceName = src._referenceName; [EOL]     _isContainer = src._isContainer; [EOL]     _managedProperty = src._managedProperty; [EOL]     _backProperty = src._backProperty; [EOL] } <line_num>: 60,66
@Override [EOL] public ManagedReferenceProperty withName(String newName) { [EOL]     return new ManagedReferenceProperty(this, newName); [EOL] } <line_num>: 68,71
@Override [EOL] public ManagedReferenceProperty withValueDeserializer(JsonDeserializer<?> deser) { [EOL]     return new ManagedReferenceProperty(this, deser); [EOL] } <line_num>: 73,76
@Override [EOL] public <A extends Annotation> A getAnnotation(Class<A> acls) { [EOL]     return _managedProperty.getAnnotation(acls); [EOL] } <line_num>: 84,87
@Override [EOL] public AnnotatedMember getMember() { [EOL]     return _managedProperty.getMember(); [EOL] } <line_num>: 89,89
@Override [EOL] public void deserializeAndSet(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException, JsonProcessingException { [EOL]     set(instance, _managedProperty.deserialize(jp, ctxt)); [EOL] } <line_num>: 97,103
@Override [EOL] public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException, JsonProcessingException { [EOL]     return setAndReturn(instance, deserialize(jp, ctxt)); [EOL] } <line_num>: 105,111
@Override [EOL] public final void set(Object instance, Object value) throws IOException { [EOL]     setAndReturn(instance, value); [EOL] } <line_num>: 113,118
@Override [EOL] public Object setAndReturn(Object instance, Object value) throws IOException { [EOL]     Object result = _managedProperty.setAndReturn(instance, value); [EOL]     if (value != null) { [EOL]         if (_isContainer) { [EOL]             if (value instanceof Object[]) { [EOL]                 for (Object ob : (Object[]) value) { [EOL]                     if (ob != null) { [EOL]                         _backProperty.set(ob, instance); [EOL]                     } [EOL]                 } [EOL]             } else if (value instanceof Collection<?>) { [EOL]                 for (Object ob : (Collection<?>) value) { [EOL]                     if (ob != null) { [EOL]                         _backProperty.set(ob, instance); [EOL]                     } [EOL]                 } [EOL]             } else if (value instanceof Map<?, ?>) { [EOL]                 for (Object ob : ((Map<?, ?>) value).values()) { [EOL]                     if (ob != null) { [EOL]                         _backProperty.set(ob, instance); [EOL]                     } [EOL]                 } [EOL]             } else { [EOL]                 throw new IllegalStateException("Unsupported container type (" + value.getClass().getName() + ") when resolving reference '" + _referenceName + "'"); [EOL]             } [EOL]         } else { [EOL]             _backProperty.set(value, instance); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 120,157
