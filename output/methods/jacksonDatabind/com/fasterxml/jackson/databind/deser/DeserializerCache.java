public DeserializerCache() { [EOL] } <line_num>: 61,61
Object writeReplace() { [EOL]     _incompleteDeserializers.clear(); [EOL]     return this; [EOL] } <line_num>: 69,74
public int cachedDeserializersCount() { [EOL]     return _cachedDeserializers.size(); [EOL] } <line_num>: 94,96
public void flushCachedDeserializers() { [EOL]     _cachedDeserializers.clear(); [EOL] } <line_num>: 105,107
public JsonDeserializer<Object> findValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType propertyType) throws JsonMappingException { [EOL]     JsonDeserializer<Object> deser = _findCachedDeserializer(propertyType); [EOL]     if (deser != null) { [EOL]         return deser; [EOL]     } [EOL]     deser = _createAndCacheValueDeserializer(ctxt, factory, propertyType); [EOL]     if (deser == null) { [EOL]         deser = _handleUnknownValueDeserializer(propertyType); [EOL]     } [EOL]     return deser; [EOL] } <line_num>: 137,155
public KeyDeserializer findKeyDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException { [EOL]     KeyDeserializer kd = factory.createKeyDeserializer(ctxt, type); [EOL]     if (kd == null) { [EOL]         return _handleUnknownKeyDeserializer(type); [EOL]     } [EOL]     if (kd instanceof ResolvableDeserializer) { [EOL]         ((ResolvableDeserializer) kd).resolve(ctxt); [EOL]     } [EOL]     return kd; [EOL] } <line_num>: 165,178
public boolean hasValueDeserializerFor(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) { [EOL]     JsonDeserializer<Object> deser = _findCachedDeserializer(type); [EOL]     if (deser == null) { [EOL]         try { [EOL]             deser = _createAndCacheValueDeserializer(ctxt, factory, type); [EOL]         } catch (Exception e) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return (deser != null); [EOL] } <line_num>: 185,200
protected JsonDeserializer<Object> _findCachedDeserializer(JavaType type) { [EOL]     if (type == null) { [EOL]         throw new IllegalArgumentException("Null JavaType passed"); [EOL]     } [EOL]     return _cachedDeserializers.get(type); [EOL] } <line_num>: 208,214
protected JsonDeserializer<Object> _createAndCacheValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException { [EOL]     synchronized (_incompleteDeserializers) { [EOL]         JsonDeserializer<Object> deser = _findCachedDeserializer(type); [EOL]         if (deser != null) { [EOL]             return deser; [EOL]         } [EOL]         int count = _incompleteDeserializers.size(); [EOL]         if (count > 0) { [EOL]             deser = _incompleteDeserializers.get(type); [EOL]             if (deser != null) { [EOL]                 return deser; [EOL]             } [EOL]         } [EOL]         try { [EOL]             return _createAndCache2(ctxt, factory, type); [EOL]         } finally { [EOL]             if (count == 0 && _incompleteDeserializers.size() > 0) { [EOL]                 _incompleteDeserializers.clear(); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 223,255
protected JsonDeserializer<Object> _createAndCache2(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException { [EOL]     JsonDeserializer<Object> deser; [EOL]     try { [EOL]         deser = _createDeserializer(ctxt, factory, type); [EOL]     } catch (IllegalArgumentException iae) { [EOL]         throw new JsonMappingException(iae.getMessage(), null, iae); [EOL]     } [EOL]     if (deser == null) { [EOL]         return null; [EOL]     } [EOL]     boolean isResolvable = (deser instanceof ResolvableDeserializer); [EOL]     boolean addToCache = deser.isCachable(); [EOL]     if (isResolvable) { [EOL]         _incompleteDeserializers.put(type, deser); [EOL]         ((ResolvableDeserializer) deser).resolve(ctxt); [EOL]         _incompleteDeserializers.remove(type); [EOL]     } [EOL]     if (addToCache) { [EOL]         _cachedDeserializers.put(type, deser); [EOL]     } [EOL]     return deser; [EOL] } <line_num>: 261,305
@SuppressWarnings("unchecked") [EOL] protected JsonDeserializer<Object> _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException { [EOL]     final DeserializationConfig config = ctxt.getConfig(); [EOL]     if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) { [EOL]         type = factory.mapAbstractType(config, type); [EOL]     } [EOL]     BeanDescription beanDesc = config.introspect(type); [EOL]     JsonDeserializer<Object> deser = findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo()); [EOL]     if (deser != null) { [EOL]         return deser; [EOL]     } [EOL]     JavaType newType = modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type); [EOL]     if (newType != type) { [EOL]         type = newType; [EOL]         beanDesc = config.introspect(newType); [EOL]     } [EOL]     Class<?> builder = beanDesc.findPOJOBuilder(); [EOL]     if (builder != null) { [EOL]         return (JsonDeserializer<Object>) factory.createBuilderBasedDeserializer(ctxt, type, beanDesc, builder); [EOL]     } [EOL]     Converter<Object, Object> conv = beanDesc.findDeserializationConverter(); [EOL]     if (conv == null) { [EOL]         return (JsonDeserializer<Object>) _createDeserializer2(ctxt, factory, type, beanDesc); [EOL]     } [EOL]     JavaType delegateType = conv.getInputType(ctxt.getTypeFactory()); [EOL]     return new StdDelegatingDeserializer<Object>(conv, delegateType, _createDeserializer2(ctxt, factory, delegateType, beanDesc)); [EOL] } <line_num>: 318,360
protected JsonDeserializer<?> _createDeserializer2(DeserializationContext ctxt, DeserializerFactory factory, JavaType type, BeanDescription beanDesc) throws JsonMappingException { [EOL]     final DeserializationConfig config = ctxt.getConfig(); [EOL]     if (type.isEnumType()) { [EOL]         return factory.createEnumDeserializer(ctxt, type, beanDesc); [EOL]     } [EOL]     if (type.isContainerType()) { [EOL]         if (type.isArrayType()) { [EOL]             return factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc); [EOL]         } [EOL]         if (type.isMapLikeType()) { [EOL]             MapLikeType mlt = (MapLikeType) type; [EOL]             if (mlt.isTrueMapType()) { [EOL]                 return factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc); [EOL]             } [EOL]             return factory.createMapLikeDeserializer(ctxt, mlt, beanDesc); [EOL]         } [EOL]         if (type.isCollectionLikeType()) { [EOL]             JsonFormat.Value format = beanDesc.findExpectedFormat(null); [EOL]             if (format == null || format.getShape() != JsonFormat.Shape.OBJECT) { [EOL]                 CollectionLikeType clt = (CollectionLikeType) type; [EOL]                 if (clt.isTrueCollectionType()) { [EOL]                     return factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc); [EOL]                 } [EOL]                 return factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc); [EOL]             } [EOL]         } [EOL]     } [EOL]     if (JsonNode.class.isAssignableFrom(type.getRawClass())) { [EOL]         return factory.createTreeDeserializer(config, type, beanDesc); [EOL]     } [EOL]     return factory.createBeanDeserializer(ctxt, type, beanDesc); [EOL] } <line_num>: 362,402
protected JsonDeserializer<Object> findDeserializerFromAnnotation(DeserializationContext ctxt, Annotated ann) throws JsonMappingException { [EOL]     Object deserDef = ctxt.getAnnotationIntrospector().findDeserializer(ann); [EOL]     if (deserDef == null) { [EOL]         return null; [EOL]     } [EOL]     JsonDeserializer<Object> deser = ctxt.deserializerInstance(ann, deserDef); [EOL]     return findConvertingDeserializer(ctxt, ann, deser); [EOL] } <line_num>: 409,420
protected JsonDeserializer<Object> findConvertingDeserializer(DeserializationContext ctxt, Annotated a, JsonDeserializer<Object> deser) throws JsonMappingException { [EOL]     Converter<Object, Object> conv = findConverter(ctxt, a); [EOL]     if (conv == null) { [EOL]         return deser; [EOL]     } [EOL]     JavaType delegateType = conv.getInputType(ctxt.getTypeFactory()); [EOL]     return (JsonDeserializer<Object>) new StdDelegatingDeserializer<Object>(conv, delegateType, deser); [EOL] } <line_num>: 428,438
protected Converter<Object, Object> findConverter(DeserializationContext ctxt, Annotated a) throws JsonMappingException { [EOL]     Object convDef = ctxt.getAnnotationIntrospector().findDeserializationConverter(a); [EOL]     if (convDef == null) { [EOL]         return null; [EOL]     } [EOL]     return ctxt.converterInstance(a, convDef); [EOL] } <line_num>: 440,449
private JavaType modifyTypeByAnnotation(DeserializationContext ctxt, Annotated a, JavaType type) throws JsonMappingException { [EOL]     AnnotationIntrospector intr = ctxt.getAnnotationIntrospector(); [EOL]     Class<?> subclass = intr.findDeserializationType(a, type); [EOL]     if (subclass != null) { [EOL]         try { [EOL]             type = type.narrowBy(subclass); [EOL]         } catch (IllegalArgumentException iae) { [EOL]             throw new JsonMappingException("Failed to narrow type " + type + " with concrete-type annotation (value " + subclass.getName() + "), method '" + a.getName() + "': " + iae.getMessage(), null, iae); [EOL]         } [EOL]     } [EOL]     if (type.isContainerType()) { [EOL]         Class<?> keyClass = intr.findDeserializationKeyType(a, type.getKeyType()); [EOL]         if (keyClass != null) { [EOL]             if (!(type instanceof MapLikeType)) { [EOL]                 throw new JsonMappingException("Illegal key-type annotation: type " + type + " is not a Map(-like) type"); [EOL]             } [EOL]             try { [EOL]                 type = ((MapLikeType) type).narrowKey(keyClass); [EOL]             } catch (IllegalArgumentException iae) { [EOL]                 throw new JsonMappingException("Failed to narrow key type " + type + " with key-type annotation (" + keyClass.getName() + "): " + iae.getMessage(), null, iae); [EOL]             } [EOL]         } [EOL]         JavaType keyType = type.getKeyType(); [EOL]         if (keyType != null && keyType.getValueHandler() == null) { [EOL]             Object kdDef = intr.findKeyDeserializer(a); [EOL]             if (kdDef != null) { [EOL]                 KeyDeserializer kd = ctxt.keyDeserializerInstance(a, kdDef); [EOL]                 if (kd != null) { [EOL]                     type = ((MapLikeType) type).withKeyValueHandler(kd); [EOL]                     keyType = type.getKeyType(); [EOL]                 } [EOL]             } [EOL]         } [EOL]         Class<?> cc = intr.findDeserializationContentType(a, type.getContentType()); [EOL]         if (cc != null) { [EOL]             try { [EOL]                 type = type.narrowContentsBy(cc); [EOL]             } catch (IllegalArgumentException iae) { [EOL]                 throw new JsonMappingException("Failed to narrow content type " + type + " with content-type annotation (" + cc.getName() + "): " + iae.getMessage(), null, iae); [EOL]             } [EOL]         } [EOL]         JavaType contentType = type.getContentType(); [EOL]         if (contentType.getValueHandler() == null) { [EOL]             Object cdDef = intr.findContentDeserializer(a); [EOL]             if (cdDef != null) { [EOL]                 JsonDeserializer<?> cd = null; [EOL]                 if (cdDef instanceof JsonDeserializer<?>) { [EOL]                     cdDef = (JsonDeserializer<?>) cdDef; [EOL]                 } else { [EOL]                     Class<?> cdClass = _verifyAsClass(cdDef, "findContentDeserializer", JsonDeserializer.None.class); [EOL]                     if (cdClass != null) { [EOL]                         cd = ctxt.deserializerInstance(a, cdClass); [EOL]                     } [EOL]                 } [EOL]                 if (cd != null) { [EOL]                     type = type.withContentValueHandler(cd); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return type; [EOL] } <line_num>: 466,541
private Class<?> _verifyAsClass(Object src, String methodName, Class<?> noneClass) { [EOL]     if (src == null) { [EOL]         return null; [EOL]     } [EOL]     if (!(src instanceof Class)) { [EOL]         throw new IllegalStateException("AnnotationIntrospector." + methodName + "() returned value of type " + src.getClass().getName() + ": expected type JsonSerializer or Class<JsonSerializer> instead"); [EOL]     } [EOL]     Class<?> cls = (Class<?>) src; [EOL]     if (cls == noneClass || cls == NoClass.class) { [EOL]         return null; [EOL]     } [EOL]     return cls; [EOL] } <line_num>: 543,556
protected JsonDeserializer<Object> _handleUnknownValueDeserializer(JavaType type) throws JsonMappingException { [EOL]     Class<?> rawClass = type.getRawClass(); [EOL]     if (!ClassUtil.isConcrete(rawClass)) { [EOL]         throw new JsonMappingException("Can not find a Value deserializer for abstract type " + type); [EOL]     } [EOL]     throw new JsonMappingException("Can not find a Value deserializer for type " + type); [EOL] } <line_num>: 564,575
protected KeyDeserializer _handleUnknownKeyDeserializer(JavaType type) throws JsonMappingException { [EOL]     throw new JsonMappingException("Can not find a (Map) Key deserializer for type " + type); [EOL] } <line_num>: 577,581
