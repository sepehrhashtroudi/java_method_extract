public SettableAnyProperty(BeanProperty property, AnnotatedMethod setter, JavaType type, JsonDeserializer<Object> valueDeser) { [EOL]     this(property, setter.getAnnotated(), type, valueDeser); [EOL] } <line_num>: 45,48
public SettableAnyProperty(BeanProperty property, Method rawSetter, JavaType type, JsonDeserializer<Object> valueDeser) { [EOL]     _property = property; [EOL]     _type = type; [EOL]     _setter = rawSetter; [EOL]     _valueDeserializer = valueDeser; [EOL] } <line_num>: 50,56
public SettableAnyProperty withValueDeserializer(JsonDeserializer<Object> deser) { [EOL]     return new SettableAnyProperty(_property, _setter, _type, deser); [EOL] } <line_num>: 58,60
public BeanProperty getProperty() { [EOL]     return _property; [EOL] } <line_num>: 68,68
public boolean hasValueDeserializer() { [EOL]     return (_valueDeserializer != null); [EOL] } <line_num>: 70,70
public JavaType getType() { [EOL]     return _type; [EOL] } <line_num>: 72,72
public final void deserializeAndSet(JsonParser jp, DeserializationContext ctxt, Object instance, String propName) throws IOException, JsonProcessingException { [EOL]     set(instance, propName, deserialize(jp, ctxt)); [EOL] } <line_num>: 84,89
public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     JsonToken t = jp.getCurrentToken(); [EOL]     if (t == JsonToken.VALUE_NULL) { [EOL]         return null; [EOL]     } [EOL]     return _valueDeserializer.deserialize(jp, ctxt); [EOL] } <line_num>: 91,99
public final void set(Object instance, String propName, Object value) throws IOException { [EOL]     try { [EOL]         _setter.invoke(instance, propName, value); [EOL]     } catch (Exception e) { [EOL]         _throwAsIOE(e, propName, value); [EOL]     } [EOL] } <line_num>: 101,109
protected void _throwAsIOE(Exception e, String propName, Object value) throws IOException { [EOL]     if (e instanceof IllegalArgumentException) { [EOL]         String actType = (value == null) ? "[NULL]" : value.getClass().getName(); [EOL]         StringBuilder msg = new StringBuilder("Problem deserializing \"any\" property '").append(propName); [EOL]         msg.append("' of class " + getClassName() + " (expected type: ").append(_type); [EOL]         msg.append("; actual type: ").append(actType).append(")"); [EOL]         String origMsg = e.getMessage(); [EOL]         if (origMsg != null) { [EOL]             msg.append(", problem: ").append(origMsg); [EOL]         } else { [EOL]             msg.append(" (no error message provided)"); [EOL]         } [EOL]         throw new JsonMappingException(msg.toString(), null, e); [EOL]     } [EOL]     if (e instanceof IOException) { [EOL]         throw (IOException) e; [EOL]     } [EOL]     if (e instanceof RuntimeException) { [EOL]         throw (RuntimeException) e; [EOL]     } [EOL]     Throwable t = e; [EOL]     while (t.getCause() != null) { [EOL]         t = t.getCause(); [EOL]     } [EOL]     throw new JsonMappingException(t.getMessage(), null, t); [EOL] } <line_num>: 122,150
private String getClassName() { [EOL]     return _setter.getDeclaringClass().getName(); [EOL] } <line_num>: 152,152
@Override [EOL] public String toString() { [EOL]     return "[any property on class " + getClassName() + "]"; [EOL] } <line_num>: 154,154
