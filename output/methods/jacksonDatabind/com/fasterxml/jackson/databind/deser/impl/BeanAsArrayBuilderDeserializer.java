public BeanAsArrayBuilderDeserializer(BeanDeserializerBase delegate, SettableBeanProperty[] ordered, AnnotatedMethod buildMethod) { [EOL]     super(delegate); [EOL]     _delegate = delegate; [EOL]     _orderedProperties = ordered; [EOL]     _buildMethod = buildMethod; [EOL] } <line_num>: 41,49
@Override [EOL] public JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper) { [EOL]     return _delegate.unwrappingDeserializer(unwrapper); [EOL] } <line_num>: 51,59
@Override [EOL] public BeanAsArrayBuilderDeserializer withObjectIdReader(ObjectIdReader oir) { [EOL]     return new BeanAsArrayBuilderDeserializer(_delegate.withObjectIdReader(oir), _orderedProperties, _buildMethod); [EOL] } <line_num>: 61,65
@Override [EOL] public BeanAsArrayBuilderDeserializer withIgnorableProperties(HashSet<String> ignorableProps) { [EOL]     return new BeanAsArrayBuilderDeserializer(_delegate.withIgnorableProperties(ignorableProps), _orderedProperties, _buildMethod); [EOL] } <line_num>: 67,71
@Override [EOL] protected BeanAsArrayBuilderDeserializer asArrayDeserializer() { [EOL]     return this; [EOL] } <line_num>: 73,76
protected final Object finishBuild(DeserializationContext ctxt, Object builder) throws IOException { [EOL]     try { [EOL]         return _buildMethod.getMember().invoke(builder); [EOL]     } catch (Exception e) { [EOL]         wrapInstantiationProblem(e, ctxt); [EOL]         return null; [EOL]     } [EOL] } <line_num>: 84,93
@Override [EOL] public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     if (jp.getCurrentToken() != JsonToken.START_ARRAY) { [EOL]         return finishBuild(ctxt, _deserializeFromNonArray(jp, ctxt)); [EOL]     } [EOL]     if (!_vanillaProcessing) { [EOL]         return finishBuild(ctxt, _deserializeNonVanilla(jp, ctxt)); [EOL]     } [EOL]     Object builder = _valueInstantiator.createUsingDefault(ctxt); [EOL]     final SettableBeanProperty[] props = _orderedProperties; [EOL]     int i = 0; [EOL]     final int propCount = props.length; [EOL]     while (true) { [EOL]         if (jp.nextToken() == JsonToken.END_ARRAY) { [EOL]             return finishBuild(ctxt, builder); [EOL]         } [EOL]         if (i == propCount) { [EOL]             break; [EOL]         } [EOL]         SettableBeanProperty prop = props[i]; [EOL]         if (prop != null) { [EOL]             try { [EOL]                 builder = prop.deserializeSetAndReturn(jp, ctxt, builder); [EOL]             } catch (Exception e) { [EOL]                 wrapAndThrow(e, builder, prop.getName(), ctxt); [EOL]             } [EOL]         } else { [EOL]             jp.skipChildren(); [EOL]         } [EOL]         ++i; [EOL]     } [EOL]     if (!_ignoreAllUnknown) { [EOL]         throw ctxt.mappingException("Unexpected JSON values; expected at most " + propCount + " properties (in JSON Array)"); [EOL]     } [EOL]     while (jp.nextToken() != JsonToken.END_ARRAY) { [EOL]         jp.skipChildren(); [EOL]     } [EOL]     return finishBuild(ctxt, builder); [EOL] } <line_num>: 95,138
@Override [EOL] public Object deserialize(JsonParser jp, DeserializationContext ctxt, Object builder) throws IOException, JsonProcessingException { [EOL]     if (_injectables != null) { [EOL]         injectValues(ctxt, builder); [EOL]     } [EOL]     final SettableBeanProperty[] props = _orderedProperties; [EOL]     int i = 0; [EOL]     final int propCount = props.length; [EOL]     while (true) { [EOL]         if (jp.nextToken() == JsonToken.END_ARRAY) { [EOL]             return finishBuild(ctxt, builder); [EOL]         } [EOL]         if (i == propCount) { [EOL]             break; [EOL]         } [EOL]         SettableBeanProperty prop = props[i]; [EOL]         if (prop != null) { [EOL]             try { [EOL]                 builder = prop.deserializeSetAndReturn(jp, ctxt, builder); [EOL]             } catch (Exception e) { [EOL]                 wrapAndThrow(e, builder, prop.getName(), ctxt); [EOL]             } [EOL]         } else { [EOL]             jp.skipChildren(); [EOL]         } [EOL]         ++i; [EOL]     } [EOL]     if (!_ignoreAllUnknown) { [EOL]         throw ctxt.mappingException("Unexpected JSON values; expected at most " + propCount + " properties (in JSON Array)"); [EOL]     } [EOL]     while (jp.nextToken() != JsonToken.END_ARRAY) { [EOL]         jp.skipChildren(); [EOL]     } [EOL]     return finishBuild(ctxt, builder); [EOL] } <line_num>: 140,182
@Override [EOL] public Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     return _deserializeFromNonArray(jp, ctxt); [EOL] } <line_num>: 185,190
protected Object _deserializeNonVanilla(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     if (_nonStandardCreation) { [EOL]         return _deserializeWithCreator(jp, ctxt); [EOL]     } [EOL]     Object builder = _valueInstantiator.createUsingDefault(ctxt); [EOL]     if (_injectables != null) { [EOL]         injectValues(ctxt, builder); [EOL]     } [EOL]     Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null; [EOL]     final SettableBeanProperty[] props = _orderedProperties; [EOL]     int i = 0; [EOL]     final int propCount = props.length; [EOL]     while (true) { [EOL]         if (jp.nextToken() == JsonToken.END_ARRAY) { [EOL]             return builder; [EOL]         } [EOL]         if (i == propCount) { [EOL]             break; [EOL]         } [EOL]         SettableBeanProperty prop = props[i]; [EOL]         ++i; [EOL]         if (prop != null) { [EOL]             if (activeView == null || prop.visibleInView(activeView)) { [EOL]                 try { [EOL]                     prop.deserializeSetAndReturn(jp, ctxt, builder); [EOL]                 } catch (Exception e) { [EOL]                     wrapAndThrow(e, builder, prop.getName(), ctxt); [EOL]                 } [EOL]                 continue; [EOL]             } [EOL]         } [EOL]         jp.skipChildren(); [EOL]     } [EOL]     if (!_ignoreAllUnknown) { [EOL]         throw ctxt.mappingException("Unexpected JSON values; expected at most " + propCount + " properties (in JSON Array)"); [EOL]     } [EOL]     while (jp.nextToken() != JsonToken.END_ARRAY) { [EOL]         jp.skipChildren(); [EOL]     } [EOL]     return builder; [EOL] } <line_num>: 205,250
protected Object _deserializeWithCreator(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     if (_delegateDeserializer != null) { [EOL]         return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt)); [EOL]     } [EOL]     if (_propertyBasedCreator != null) { [EOL]         return _deserializeUsingPropertyBased(jp, ctxt); [EOL]     } [EOL]     if (_beanType.isAbstract()) { [EOL]         throw JsonMappingException.from(jp, "Can not instantiate abstract type " + _beanType + " (need to add/enable type information?)"); [EOL]     } [EOL]     throw JsonMappingException.from(jp, "No suitable constructor found for type " + _beanType + ": can not instantiate from JSON object (need to add/enable type information?)"); [EOL] } <line_num>: 252,269
@Override [EOL] protected final Object _deserializeUsingPropertyBased(final JsonParser jp, final DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     final PropertyBasedCreator creator = _propertyBasedCreator; [EOL]     PropertyValueBuffer buffer = creator.startBuilding(jp, ctxt, _objectIdReader); [EOL]     final SettableBeanProperty[] props = _orderedProperties; [EOL]     final int propCount = props.length; [EOL]     int i = 0; [EOL]     Object builder = null; [EOL]     for (; jp.nextToken() != JsonToken.END_ARRAY; ++i) { [EOL]         SettableBeanProperty prop = (i < propCount) ? props[i] : null; [EOL]         if (prop == null) { [EOL]             jp.skipChildren(); [EOL]             continue; [EOL]         } [EOL]         if (builder != null) { [EOL]             try { [EOL]                 builder = prop.deserializeSetAndReturn(jp, ctxt, builder); [EOL]             } catch (Exception e) { [EOL]                 wrapAndThrow(e, builder, prop.getName(), ctxt); [EOL]             } [EOL]             continue; [EOL]         } [EOL]         final String propName = prop.getName(); [EOL]         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName); [EOL]         if (creatorProp != null) { [EOL]             Object value = creatorProp.deserialize(jp, ctxt); [EOL]             if (buffer.assignParameter(creatorProp.getCreatorIndex(), value)) { [EOL]                 try { [EOL]                     builder = creator.build(ctxt, buffer); [EOL]                 } catch (Exception e) { [EOL]                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt); [EOL]                     continue; [EOL]                 } [EOL]                 if (builder.getClass() != _beanType.getRawClass()) { [EOL]                     throw ctxt.mappingException("Can not support implicit polymorphic deserialization for POJOs-as-Arrays style: " + "nominal type " + _beanType.getRawClass().getName() + ", actual type " + builder.getClass().getName()); [EOL]                 } [EOL]             } [EOL]             continue; [EOL]         } [EOL]         if (buffer.readIdProperty(propName)) { [EOL]             continue; [EOL]         } [EOL]         buffer.bufferProperty(prop, prop.deserialize(jp, ctxt)); [EOL]     } [EOL]     if (builder == null) { [EOL]         try { [EOL]             builder = creator.build(ctxt, buffer); [EOL]         } catch (Exception e) { [EOL]             wrapInstantiationProblem(e, ctxt); [EOL]             return null; [EOL]         } [EOL]     } [EOL]     return builder; [EOL] } <line_num>: 279,350
protected Object _deserializeFromNonArray(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     throw ctxt.mappingException("Can not deserialize a POJO (of type " + _beanType.getRawClass().getName() + ") from non-Array representation (token: " + jp.getCurrentToken() + "): type/property designed to be serialized as JSON Array"); [EOL] } <line_num>: 358,367
