protected PropertyBasedCreator(ValueInstantiator valueInstantiator, SettableBeanProperty[] creatorProps, Object[] defaultValues) { [EOL]     _valueInstantiator = valueInstantiator; [EOL]     _properties = new HashMap<String, SettableBeanProperty>(); [EOL]     SettableBeanProperty[] propertiesWithInjectables = null; [EOL]     final int len = creatorProps.length; [EOL]     _propertyCount = len; [EOL]     for (int i = 0; i < len; ++i) { [EOL]         SettableBeanProperty prop = creatorProps[i]; [EOL]         _properties.put(prop.getName(), prop); [EOL]         Object injectableValueId = prop.getInjectableValueId(); [EOL]         if (injectableValueId != null) { [EOL]             if (propertiesWithInjectables == null) { [EOL]                 propertiesWithInjectables = new SettableBeanProperty[len]; [EOL]             } [EOL]             propertiesWithInjectables[i] = prop; [EOL]         } [EOL]     } [EOL]     _defaultValues = defaultValues; [EOL]     _propertiesWithInjectables = propertiesWithInjectables; [EOL] } <line_num>: 59,80
public static PropertyBasedCreator construct(DeserializationContext ctxt, ValueInstantiator valueInstantiator, SettableBeanProperty[] srcProps) throws JsonMappingException { [EOL]     final int len = srcProps.length; [EOL]     SettableBeanProperty[] creatorProps = new SettableBeanProperty[len]; [EOL]     Object[] defaultValues = null; [EOL]     for (int i = 0; i < len; ++i) { [EOL]         SettableBeanProperty prop = srcProps[i]; [EOL]         if (!prop.hasValueDeserializer()) { [EOL]             prop = prop.withValueDeserializer(ctxt.findContextualValueDeserializer(prop.getType(), prop)); [EOL]         } [EOL]         creatorProps[i] = prop; [EOL]         JsonDeserializer<?> deser = prop.getValueDeserializer(); [EOL]         Object nullValue = (deser == null) ? null : deser.getNullValue(); [EOL]         if ((nullValue == null) && prop.getType().isPrimitive()) { [EOL]             nullValue = ClassUtil.defaultValue(prop.getType().getRawClass()); [EOL]         } [EOL]         if (nullValue != null) { [EOL]             if (defaultValues == null) { [EOL]                 defaultValues = new Object[len]; [EOL]             } [EOL]             defaultValues[i] = nullValue; [EOL]         } [EOL]     } [EOL]     return new PropertyBasedCreator(valueInstantiator, creatorProps, defaultValues); [EOL] } <line_num>: 86,114
public void assignDeserializer(SettableBeanProperty prop, JsonDeserializer<Object> deser) { [EOL]     prop = prop.withValueDeserializer(deser); [EOL]     _properties.put(prop.getName(), prop); [EOL] } <line_num>: 116,119
public Collection<SettableBeanProperty> properties() { [EOL]     return _properties.values(); [EOL] } <line_num>: 127,129
public SettableBeanProperty findCreatorProperty(String name) { [EOL]     return _properties.get(name); [EOL] } <line_num>: 131,133
public PropertyValueBuffer startBuilding(JsonParser jp, DeserializationContext ctxt, ObjectIdReader oir) { [EOL]     PropertyValueBuffer buffer = new PropertyValueBuffer(jp, ctxt, _propertyCount, oir); [EOL]     if (_propertiesWithInjectables != null) { [EOL]         buffer.inject(_propertiesWithInjectables); [EOL]     } [EOL]     return buffer; [EOL] } <line_num>: 146,154
public Object build(DeserializationContext ctxt, PropertyValueBuffer buffer) throws IOException { [EOL]     Object bean = _valueInstantiator.createFromObjectWith(ctxt, buffer.getParameters(_defaultValues)); [EOL]     bean = buffer.handleIdValue(ctxt, bean); [EOL]     for (PropertyValue pv = buffer.buffered(); pv != null; pv = pv.next) { [EOL]         pv.assign(bean); [EOL]     } [EOL]     return bean; [EOL] } <line_num>: 156,167
