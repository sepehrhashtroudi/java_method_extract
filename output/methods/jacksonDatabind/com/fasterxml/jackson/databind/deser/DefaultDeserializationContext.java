protected DefaultDeserializationContext(DeserializerFactory df, DeserializerCache cache) { [EOL]     super(df, cache); [EOL] } <line_num>: 38,40
protected DefaultDeserializationContext(DefaultDeserializationContext src, DeserializationConfig config, JsonParser jp, InjectableValues values) { [EOL]     super(src, config, jp, values); [EOL] } <line_num>: 42,45
protected DefaultDeserializationContext(DefaultDeserializationContext src, DeserializerFactory factory) { [EOL]     super(src, factory); [EOL] } <line_num>: 47,50
public Impl(DeserializerFactory df) { [EOL]     super(df, null); [EOL] } <line_num>: 202,204
protected Impl(Impl src, DeserializationConfig config, JsonParser jp, InjectableValues values) { [EOL]     super(src, config, jp, values); [EOL] } <line_num>: 206,209
protected Impl(Impl src, DeserializerFactory factory) { [EOL]     super(src, factory); [EOL] } <line_num>: 211,213
@Override [EOL] public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> generator) { [EOL]     final ObjectIdGenerator.IdKey key = generator.key(id); [EOL]     if (_objectIds == null) { [EOL]         _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId>(); [EOL]     } else { [EOL]         ReadableObjectId entry = _objectIds.get(key); [EOL]         if (entry != null) { [EOL]             return entry; [EOL]         } [EOL]     } [EOL]     ReadableObjectId entry = new ReadableObjectId(id); [EOL]     _objectIds.put(key, entry); [EOL]     return entry; [EOL] } <line_num>: 58,74
@SuppressWarnings("unchecked") [EOL] @Override [EOL] public JsonDeserializer<Object> deserializerInstance(Annotated annotated, Object deserDef) throws JsonMappingException { [EOL]     if (deserDef == null) { [EOL]         return null; [EOL]     } [EOL]     JsonDeserializer<?> deser; [EOL]     if (deserDef instanceof JsonDeserializer) { [EOL]         deser = (JsonDeserializer<?>) deserDef; [EOL]     } else { [EOL]         if (!(deserDef instanceof Class)) { [EOL]             throw new IllegalStateException("AnnotationIntrospector returned deserializer definition of type " + deserDef.getClass().getName() + "; expected type JsonDeserializer or Class<JsonDeserializer> instead"); [EOL]         } [EOL]         Class<?> deserClass = (Class<?>) deserDef; [EOL]         if (deserClass == JsonDeserializer.None.class || deserClass == NoClass.class) { [EOL]             return null; [EOL]         } [EOL]         if (!JsonDeserializer.class.isAssignableFrom(deserClass)) { [EOL]             throw new IllegalStateException("AnnotationIntrospector returned Class " + deserClass.getName() + "; expected Class<JsonDeserializer>"); [EOL]         } [EOL]         HandlerInstantiator hi = _config.getHandlerInstantiator(); [EOL]         deser = (hi == null) ? null : hi.deserializerInstance(_config, annotated, deserClass); [EOL]         if (deser == null) { [EOL]             deser = (JsonDeserializer<?>) ClassUtil.createInstance(deserClass, _config.canOverrideAccessModifiers()); [EOL]         } [EOL]     } [EOL]     if (deser instanceof ResolvableDeserializer) { [EOL]         ((ResolvableDeserializer) deser).resolve(this); [EOL]     } [EOL]     return (JsonDeserializer<Object>) deser; [EOL] } <line_num>: 82,122
@Override [EOL] public final KeyDeserializer keyDeserializerInstance(Annotated annotated, Object deserDef) throws JsonMappingException { [EOL]     if (deserDef == null) { [EOL]         return null; [EOL]     } [EOL]     KeyDeserializer deser; [EOL]     if (deserDef instanceof KeyDeserializer) { [EOL]         deser = (KeyDeserializer) deserDef; [EOL]     } else { [EOL]         if (!(deserDef instanceof Class)) { [EOL]             throw new IllegalStateException("AnnotationIntrospector returned key deserializer definition of type " + deserDef.getClass().getName() + "; expected type KeyDeserializer or Class<KeyDeserializer> instead"); [EOL]         } [EOL]         Class<?> deserClass = (Class<?>) deserDef; [EOL]         if (deserClass == KeyDeserializer.None.class || deserClass == NoClass.class) { [EOL]             return null; [EOL]         } [EOL]         if (!KeyDeserializer.class.isAssignableFrom(deserClass)) { [EOL]             throw new IllegalStateException("AnnotationIntrospector returned Class " + deserClass.getName() + "; expected Class<KeyDeserializer>"); [EOL]         } [EOL]         HandlerInstantiator hi = _config.getHandlerInstantiator(); [EOL]         deser = (hi == null) ? null : hi.keyDeserializerInstance(_config, annotated, deserClass); [EOL]         if (deser == null) { [EOL]             deser = (KeyDeserializer) ClassUtil.createInstance(deserClass, _config.canOverrideAccessModifiers()); [EOL]         } [EOL]     } [EOL]     if (deser instanceof ResolvableDeserializer) { [EOL]         ((ResolvableDeserializer) deser).resolve(this); [EOL]     } [EOL]     return deser; [EOL] } <line_num>: 124,164
public abstract DefaultDeserializationContext with(DeserializerFactory factory); <line_num>: 176,176
public abstract DefaultDeserializationContext createInstance(DeserializationConfig config, JsonParser jp, InjectableValues values); <line_num>: 182,183
@Override [EOL] public DefaultDeserializationContext createInstance(DeserializationConfig config, JsonParser jp, InjectableValues values) { [EOL]     return new Impl(this, config, jp, values); [EOL] } <line_num>: 215,219
@Override [EOL] public DefaultDeserializationContext with(DeserializerFactory factory) { [EOL]     return new Impl(this, factory); [EOL] } <line_num>: 221,224
