public BuilderBasedDeserializer(BeanDeserializerBuilder builder, BeanDescription beanDesc, BeanPropertyMap properties, Map<String, SettableBeanProperty> backRefs, HashSet<String> ignorableProps, boolean ignoreAllUnknown, boolean hasViews) { [EOL]     super(builder, beanDesc, properties, backRefs, ignorableProps, ignoreAllUnknown, hasViews); [EOL]     _buildMethod = builder.getBuildMethod(); [EOL]     if (_objectIdReader != null) { [EOL]         throw new IllegalArgumentException("Can not use Object Id with Builder-based deserialization (type " + beanDesc.getType() + ")"); [EOL]     } [EOL] } <line_num>: 39,53
protected BuilderBasedDeserializer(BuilderBasedDeserializer src) { [EOL]     this(src, src._ignoreAllUnknown); [EOL] } <line_num>: 59,62
protected BuilderBasedDeserializer(BuilderBasedDeserializer src, boolean ignoreAllUnknown) { [EOL]     super(src, ignoreAllUnknown); [EOL]     _buildMethod = src._buildMethod; [EOL] } <line_num>: 64,68
protected BuilderBasedDeserializer(BuilderBasedDeserializer src, NameTransformer unwrapper) { [EOL]     super(src, unwrapper); [EOL]     _buildMethod = src._buildMethod; [EOL] } <line_num>: 70,73
public BuilderBasedDeserializer(BuilderBasedDeserializer src, ObjectIdReader oir) { [EOL]     super(src, oir); [EOL]     _buildMethod = src._buildMethod; [EOL] } <line_num>: 75,78
public BuilderBasedDeserializer(BuilderBasedDeserializer src, HashSet<String> ignorableProps) { [EOL]     super(src, ignorableProps); [EOL]     _buildMethod = src._buildMethod; [EOL] } <line_num>: 80,83
@Override [EOL] public JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper) { [EOL]     return new BuilderBasedDeserializer(this, unwrapper); [EOL] } <line_num>: 85,93
@Override [EOL] public BuilderBasedDeserializer withObjectIdReader(ObjectIdReader oir) { [EOL]     return new BuilderBasedDeserializer(this, oir); [EOL] } <line_num>: 95,98
@Override [EOL] public BuilderBasedDeserializer withIgnorableProperties(HashSet<String> ignorableProps) { [EOL]     return new BuilderBasedDeserializer(this, ignorableProps); [EOL] } <line_num>: 100,103
@Override [EOL] protected BeanAsArrayBuilderDeserializer asArrayDeserializer() { [EOL]     SettableBeanProperty[] props = _beanProperties.getPropertiesInInsertionOrder(); [EOL]     return new BeanAsArrayBuilderDeserializer(this, props, _buildMethod); [EOL] } <line_num>: 105,109
protected final Object finishBuild(DeserializationContext ctxt, Object builder) throws IOException { [EOL]     try { [EOL]         return _buildMethod.getMember().invoke(builder); [EOL]     } catch (Exception e) { [EOL]         wrapInstantiationProblem(e, ctxt); [EOL]         return null; [EOL]     } [EOL] } <line_num>: 117,126
@Override [EOL] public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     JsonToken t = jp.getCurrentToken(); [EOL]     if (t == JsonToken.START_OBJECT) { [EOL]         t = jp.nextToken(); [EOL]         if (_vanillaProcessing) { [EOL]             return finishBuild(ctxt, vanillaDeserialize(jp, ctxt, t)); [EOL]         } [EOL]         Object builder = deserializeFromObject(jp, ctxt); [EOL]         return finishBuild(ctxt, builder); [EOL]     } [EOL]     switch(t) { [EOL]         case VALUE_STRING: [EOL]             return finishBuild(ctxt, deserializeFromString(jp, ctxt)); [EOL]         case VALUE_NUMBER_INT: [EOL]             return finishBuild(ctxt, deserializeFromNumber(jp, ctxt)); [EOL]         case VALUE_NUMBER_FLOAT: [EOL]             return finishBuild(ctxt, deserializeFromDouble(jp, ctxt)); [EOL]         case VALUE_EMBEDDED_OBJECT: [EOL]             return jp.getEmbeddedObject(); [EOL]         case VALUE_TRUE: [EOL]         case VALUE_FALSE: [EOL]             return finishBuild(ctxt, deserializeFromBoolean(jp, ctxt)); [EOL]         case START_ARRAY: [EOL]             return finishBuild(ctxt, deserializeFromArray(jp, ctxt)); [EOL]         case FIELD_NAME: [EOL]         case END_OBJECT: [EOL]             return finishBuild(ctxt, deserializeFromObject(jp, ctxt)); [EOL]         default: [EOL]             throw ctxt.mappingException(getBeanClass()); [EOL]     } [EOL] } <line_num>: 131,168
@Override [EOL] public Object deserialize(JsonParser jp, DeserializationContext ctxt, Object builder) throws IOException, JsonProcessingException { [EOL]     return finishBuild(ctxt, _deserialize(jp, ctxt, builder)); [EOL] } <line_num>: 175,184
protected final Object _deserialize(JsonParser jp, DeserializationContext ctxt, Object builder) throws IOException, JsonProcessingException { [EOL]     if (_injectables != null) { [EOL]         injectValues(ctxt, builder); [EOL]     } [EOL]     if (_unwrappedPropertyHandler != null) { [EOL]         return deserializeWithUnwrapped(jp, ctxt, builder); [EOL]     } [EOL]     if (_externalTypeIdHandler != null) { [EOL]         return deserializeWithExternalTypeId(jp, ctxt, builder); [EOL]     } [EOL]     if (_needViewProcesing) { [EOL]         Class<?> view = ctxt.getActiveView(); [EOL]         if (view != null) { [EOL]             return deserializeWithView(jp, ctxt, builder, view); [EOL]         } [EOL]     } [EOL]     JsonToken t = jp.getCurrentToken(); [EOL]     if (t == JsonToken.START_OBJECT) { [EOL]         t = jp.nextToken(); [EOL]     } [EOL]     for (; t == JsonToken.FIELD_NAME; t = jp.nextToken()) { [EOL]         String propName = jp.getCurrentName(); [EOL]         jp.nextToken(); [EOL]         SettableBeanProperty prop = _beanProperties.find(propName); [EOL]         if (prop != null) { [EOL]             try { [EOL]                 builder = prop.deserializeSetAndReturn(jp, ctxt, builder); [EOL]             } catch (Exception e) { [EOL]                 wrapAndThrow(e, builder, propName, ctxt); [EOL]             } [EOL]             continue; [EOL]         } [EOL]         if (_ignorableProps != null && _ignorableProps.contains(propName)) { [EOL]             jp.skipChildren(); [EOL]         } else if (_anySetter != null) { [EOL]             _anySetter.deserializeAndSet(jp, ctxt, builder, propName); [EOL]             continue; [EOL]         } else { [EOL]             handleUnknownProperty(jp, ctxt, builder, propName); [EOL]         } [EOL]     } [EOL]     return builder; [EOL] } <line_num>: 192,242
private final Object vanillaDeserialize(JsonParser jp, DeserializationContext ctxt, JsonToken t) throws IOException, JsonProcessingException { [EOL]     Object bean = _valueInstantiator.createUsingDefault(ctxt); [EOL]     for (; jp.getCurrentToken() != JsonToken.END_OBJECT; jp.nextToken()) { [EOL]         String propName = jp.getCurrentName(); [EOL]         jp.nextToken(); [EOL]         SettableBeanProperty prop = _beanProperties.find(propName); [EOL]         if (prop != null) { [EOL]             try { [EOL]                 bean = prop.deserializeSetAndReturn(jp, ctxt, bean); [EOL]             } catch (Exception e) { [EOL]                 wrapAndThrow(e, bean, propName, ctxt); [EOL]             } [EOL]         } else { [EOL]             handleUnknownVanilla(jp, ctxt, bean, propName); [EOL]         } [EOL]     } [EOL]     return bean; [EOL] } <line_num>: 248,269
@Override [EOL] public Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     if (_nonStandardCreation) { [EOL]         if (_unwrappedPropertyHandler != null) { [EOL]             return deserializeWithUnwrapped(jp, ctxt); [EOL]         } [EOL]         if (_externalTypeIdHandler != null) { [EOL]             return deserializeWithExternalTypeId(jp, ctxt); [EOL]         } [EOL]         return deserializeFromObjectUsingNonDefault(jp, ctxt); [EOL]     } [EOL]     Object bean = _valueInstantiator.createUsingDefault(ctxt); [EOL]     if (_injectables != null) { [EOL]         injectValues(ctxt, bean); [EOL]     } [EOL]     if (_needViewProcesing) { [EOL]         Class<?> view = ctxt.getActiveView(); [EOL]         if (view != null) { [EOL]             return deserializeWithView(jp, ctxt, bean, view); [EOL]         } [EOL]     } [EOL]     for (; jp.getCurrentToken() != JsonToken.END_OBJECT; jp.nextToken()) { [EOL]         String propName = jp.getCurrentName(); [EOL]         jp.nextToken(); [EOL]         SettableBeanProperty prop = _beanProperties.find(propName); [EOL]         if (prop != null) { [EOL]             try { [EOL]                 bean = prop.deserializeSetAndReturn(jp, ctxt, bean); [EOL]             } catch (Exception e) { [EOL]                 wrapAndThrow(e, bean, propName, ctxt); [EOL]             } [EOL]             continue; [EOL]         } [EOL]         if (_ignorableProps != null && _ignorableProps.contains(propName)) { [EOL]             jp.skipChildren(); [EOL]         } else if (_anySetter != null) { [EOL]             try { [EOL]                 _anySetter.deserializeAndSet(jp, ctxt, bean, propName); [EOL]             } catch (Exception e) { [EOL]                 wrapAndThrow(e, bean, propName, ctxt); [EOL]             } [EOL]             continue; [EOL]         } else { [EOL]             handleUnknownProperty(jp, ctxt, bean, propName); [EOL]         } [EOL]     } [EOL]     return bean; [EOL] } <line_num>: 275,329
@Override [EOL] protected final Object _deserializeUsingPropertyBased(final JsonParser jp, final DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     final PropertyBasedCreator creator = _propertyBasedCreator; [EOL]     PropertyValueBuffer buffer = creator.startBuilding(jp, ctxt, _objectIdReader); [EOL]     TokenBuffer unknown = null; [EOL]     JsonToken t = jp.getCurrentToken(); [EOL]     for (; t == JsonToken.FIELD_NAME; t = jp.nextToken()) { [EOL]         String propName = jp.getCurrentName(); [EOL]         jp.nextToken(); [EOL]         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName); [EOL]         if (creatorProp != null) { [EOL]             Object value = creatorProp.deserialize(jp, ctxt); [EOL]             if (buffer.assignParameter(creatorProp.getCreatorIndex(), value)) { [EOL]                 jp.nextToken(); [EOL]                 Object bean; [EOL]                 try { [EOL]                     bean = creator.build(ctxt, buffer); [EOL]                 } catch (Exception e) { [EOL]                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt); [EOL]                     continue; [EOL]                 } [EOL]                 if (bean.getClass() != _beanType.getRawClass()) { [EOL]                     return handlePolymorphic(jp, ctxt, bean, unknown); [EOL]                 } [EOL]                 if (unknown != null) { [EOL]                     bean = handleUnknownProperties(ctxt, bean, unknown); [EOL]                 } [EOL]                 return _deserialize(jp, ctxt, bean); [EOL]             } [EOL]             continue; [EOL]         } [EOL]         if (buffer.readIdProperty(propName)) { [EOL]             continue; [EOL]         } [EOL]         SettableBeanProperty prop = _beanProperties.find(propName); [EOL]         if (prop != null) { [EOL]             buffer.bufferProperty(prop, prop.deserialize(jp, ctxt)); [EOL]             continue; [EOL]         } [EOL]         if (_ignorableProps != null && _ignorableProps.contains(propName)) { [EOL]             jp.skipChildren(); [EOL]             continue; [EOL]         } [EOL]         if (_anySetter != null) { [EOL]             buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(jp, ctxt)); [EOL]             continue; [EOL]         } [EOL]         if (unknown == null) { [EOL]             unknown = new TokenBuffer(jp.getCodec()); [EOL]         } [EOL]         unknown.writeFieldName(propName); [EOL]         unknown.copyCurrentStructure(jp); [EOL]     } [EOL]     Object bean; [EOL]     try { [EOL]         bean = creator.build(ctxt, buffer); [EOL]     } catch (Exception e) { [EOL]         wrapInstantiationProblem(e, ctxt); [EOL]         return null; [EOL]     } [EOL]     if (unknown != null) { [EOL]         if (bean.getClass() != _beanType.getRawClass()) { [EOL]             return handlePolymorphic(null, ctxt, bean, unknown); [EOL]         } [EOL]         return handleUnknownProperties(ctxt, bean, unknown); [EOL]     } [EOL]     return bean; [EOL] } <line_num>: 339,426
protected final Object deserializeWithView(JsonParser jp, DeserializationContext ctxt, Object bean, Class<?> activeView) throws IOException, JsonProcessingException { [EOL]     JsonToken t = jp.getCurrentToken(); [EOL]     for (; t == JsonToken.FIELD_NAME; t = jp.nextToken()) { [EOL]         String propName = jp.getCurrentName(); [EOL]         jp.nextToken(); [EOL]         SettableBeanProperty prop = _beanProperties.find(propName); [EOL]         if (prop != null) { [EOL]             if (!prop.visibleInView(activeView)) { [EOL]                 jp.skipChildren(); [EOL]                 continue; [EOL]             } [EOL]             try { [EOL]                 bean = prop.deserializeSetAndReturn(jp, ctxt, bean); [EOL]             } catch (Exception e) { [EOL]                 wrapAndThrow(e, bean, propName, ctxt); [EOL]             } [EOL]             continue; [EOL]         } [EOL]         if (_ignorableProps != null && _ignorableProps.contains(propName)) { [EOL]             jp.skipChildren(); [EOL]         } else if (_anySetter != null) { [EOL]             _anySetter.deserializeAndSet(jp, ctxt, bean, propName); [EOL]             continue; [EOL]         } else { [EOL]             handleUnknownProperty(jp, ctxt, bean, propName); [EOL]         } [EOL]     } [EOL]     return bean; [EOL] } <line_num>: 434,470
protected Object deserializeWithUnwrapped(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     if (_delegateDeserializer != null) { [EOL]         return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt)); [EOL]     } [EOL]     if (_propertyBasedCreator != null) { [EOL]         return deserializeUsingPropertyBasedWithUnwrapped(jp, ctxt); [EOL]     } [EOL]     TokenBuffer tokens = new TokenBuffer(jp.getCodec()); [EOL]     tokens.writeStartObject(); [EOL]     Object bean = _valueInstantiator.createUsingDefault(ctxt); [EOL]     if (_injectables != null) { [EOL]         injectValues(ctxt, bean); [EOL]     } [EOL]     final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null; [EOL]     for (; jp.getCurrentToken() != JsonToken.END_OBJECT; jp.nextToken()) { [EOL]         String propName = jp.getCurrentName(); [EOL]         jp.nextToken(); [EOL]         SettableBeanProperty prop = _beanProperties.find(propName); [EOL]         if (prop != null) { [EOL]             if (activeView != null && !prop.visibleInView(activeView)) { [EOL]                 jp.skipChildren(); [EOL]                 continue; [EOL]             } [EOL]             try { [EOL]                 bean = prop.deserializeSetAndReturn(jp, ctxt, bean); [EOL]             } catch (Exception e) { [EOL]                 wrapAndThrow(e, bean, propName, ctxt); [EOL]             } [EOL]             continue; [EOL]         } [EOL]         if (_ignorableProps != null && _ignorableProps.contains(propName)) { [EOL]             jp.skipChildren(); [EOL]             continue; [EOL]         } [EOL]         tokens.writeFieldName(propName); [EOL]         tokens.copyCurrentStructure(jp); [EOL]         if (_anySetter != null) { [EOL]             try { [EOL]                 _anySetter.deserializeAndSet(jp, ctxt, bean, propName); [EOL]             } catch (Exception e) { [EOL]                 wrapAndThrow(e, bean, propName, ctxt); [EOL]             } [EOL]             continue; [EOL]         } [EOL]     } [EOL]     tokens.writeEndObject(); [EOL]     _unwrappedPropertyHandler.processUnwrapped(jp, ctxt, bean, tokens); [EOL]     return bean; [EOL] } <line_num>: 482,538
protected Object deserializeWithUnwrapped(JsonParser jp, DeserializationContext ctxt, Object bean) throws IOException, JsonProcessingException { [EOL]     JsonToken t = jp.getCurrentToken(); [EOL]     if (t == JsonToken.START_OBJECT) { [EOL]         t = jp.nextToken(); [EOL]     } [EOL]     TokenBuffer tokens = new TokenBuffer(jp.getCodec()); [EOL]     tokens.writeStartObject(); [EOL]     final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null; [EOL]     for (; t == JsonToken.FIELD_NAME; t = jp.nextToken()) { [EOL]         String propName = jp.getCurrentName(); [EOL]         SettableBeanProperty prop = _beanProperties.find(propName); [EOL]         jp.nextToken(); [EOL]         if (prop != null) { [EOL]             if (activeView != null && !prop.visibleInView(activeView)) { [EOL]                 jp.skipChildren(); [EOL]                 continue; [EOL]             } [EOL]             try { [EOL]                 bean = prop.deserializeSetAndReturn(jp, ctxt, bean); [EOL]             } catch (Exception e) { [EOL]                 wrapAndThrow(e, bean, propName, ctxt); [EOL]             } [EOL]             continue; [EOL]         } [EOL]         if (_ignorableProps != null && _ignorableProps.contains(propName)) { [EOL]             jp.skipChildren(); [EOL]             continue; [EOL]         } [EOL]         tokens.writeFieldName(propName); [EOL]         tokens.copyCurrentStructure(jp); [EOL]         if (_anySetter != null) { [EOL]             _anySetter.deserializeAndSet(jp, ctxt, bean, propName); [EOL]         } [EOL]     } [EOL]     tokens.writeEndObject(); [EOL]     _unwrappedPropertyHandler.processUnwrapped(jp, ctxt, bean, tokens); [EOL]     return bean; [EOL] } <line_num>: 540,582
@SuppressWarnings("resource") [EOL] protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     final PropertyBasedCreator creator = _propertyBasedCreator; [EOL]     PropertyValueBuffer buffer = creator.startBuilding(jp, ctxt, _objectIdReader); [EOL]     TokenBuffer tokens = new TokenBuffer(jp.getCodec()); [EOL]     tokens.writeStartObject(); [EOL]     JsonToken t = jp.getCurrentToken(); [EOL]     for (; t == JsonToken.FIELD_NAME; t = jp.nextToken()) { [EOL]         String propName = jp.getCurrentName(); [EOL]         jp.nextToken(); [EOL]         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName); [EOL]         if (creatorProp != null) { [EOL]             Object value = creatorProp.deserialize(jp, ctxt); [EOL]             if (buffer.assignParameter(creatorProp.getCreatorIndex(), value)) { [EOL]                 t = jp.nextToken(); [EOL]                 Object bean; [EOL]                 try { [EOL]                     bean = creator.build(ctxt, buffer); [EOL]                 } catch (Exception e) { [EOL]                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt); [EOL]                     continue; [EOL]                 } [EOL]                 while (t == JsonToken.FIELD_NAME) { [EOL]                     jp.nextToken(); [EOL]                     tokens.copyCurrentStructure(jp); [EOL]                     t = jp.nextToken(); [EOL]                 } [EOL]                 tokens.writeEndObject(); [EOL]                 if (bean.getClass() != _beanType.getRawClass()) { [EOL]                     throw ctxt.mappingException("Can not create polymorphic instances with unwrapped values"); [EOL]                 } [EOL]                 return _unwrappedPropertyHandler.processUnwrapped(jp, ctxt, bean, tokens); [EOL]             } [EOL]             continue; [EOL]         } [EOL]         if (buffer.readIdProperty(propName)) { [EOL]             continue; [EOL]         } [EOL]         SettableBeanProperty prop = _beanProperties.find(propName); [EOL]         if (prop != null) { [EOL]             buffer.bufferProperty(prop, prop.deserialize(jp, ctxt)); [EOL]             continue; [EOL]         } [EOL]         if (_ignorableProps != null && _ignorableProps.contains(propName)) { [EOL]             jp.skipChildren(); [EOL]             continue; [EOL]         } [EOL]         tokens.writeFieldName(propName); [EOL]         tokens.copyCurrentStructure(jp); [EOL]         if (_anySetter != null) { [EOL]             buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(jp, ctxt)); [EOL]         } [EOL]     } [EOL]     Object bean; [EOL]     try { [EOL]         bean = creator.build(ctxt, buffer); [EOL]     } catch (Exception e) { [EOL]         wrapInstantiationProblem(e, ctxt); [EOL]         return null; [EOL]     } [EOL]     return _unwrappedPropertyHandler.processUnwrapped(jp, ctxt, bean, tokens); [EOL] } <line_num>: 584,664
protected Object deserializeWithExternalTypeId(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     if (_propertyBasedCreator != null) { [EOL]         return deserializeUsingPropertyBasedWithExternalTypeId(jp, ctxt); [EOL]     } [EOL]     return deserializeWithExternalTypeId(jp, ctxt, _valueInstantiator.createUsingDefault(ctxt)); [EOL] } <line_num>: 673,680
protected Object deserializeWithExternalTypeId(JsonParser jp, DeserializationContext ctxt, Object bean) throws IOException, JsonProcessingException { [EOL]     final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null; [EOL]     final ExternalTypeHandler ext = _externalTypeIdHandler.start(); [EOL]     for (; jp.getCurrentToken() != JsonToken.END_OBJECT; jp.nextToken()) { [EOL]         String propName = jp.getCurrentName(); [EOL]         jp.nextToken(); [EOL]         SettableBeanProperty prop = _beanProperties.find(propName); [EOL]         if (prop != null) { [EOL]             if (activeView != null && !prop.visibleInView(activeView)) { [EOL]                 jp.skipChildren(); [EOL]                 continue; [EOL]             } [EOL]             try { [EOL]                 bean = prop.deserializeSetAndReturn(jp, ctxt, bean); [EOL]             } catch (Exception e) { [EOL]                 wrapAndThrow(e, bean, propName, ctxt); [EOL]             } [EOL]             continue; [EOL]         } [EOL]         if (_ignorableProps != null && _ignorableProps.contains(propName)) { [EOL]             jp.skipChildren(); [EOL]             continue; [EOL]         } [EOL]         if (ext.handlePropertyValue(jp, ctxt, propName, bean)) { [EOL]             continue; [EOL]         } [EOL]         if (_anySetter != null) { [EOL]             try { [EOL]                 _anySetter.deserializeAndSet(jp, ctxt, bean, propName); [EOL]             } catch (Exception e) { [EOL]                 wrapAndThrow(e, bean, propName, ctxt); [EOL]             } [EOL]             continue; [EOL]         } else { [EOL]             handleUnknownProperty(jp, ctxt, bean, propName); [EOL]         } [EOL]     } [EOL]     return ext.complete(jp, ctxt, bean); [EOL] } <line_num>: 682,728
protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     throw new IllegalStateException("Deserialization with Builder, External type id, @JsonCreator not yet implemented"); [EOL] } <line_num>: 730,736
