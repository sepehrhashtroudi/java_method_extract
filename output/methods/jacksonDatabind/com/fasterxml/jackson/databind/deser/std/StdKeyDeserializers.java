@Deprecated [EOL] public static KeyDeserializer constructStringKeyDeserializer(DeserializationConfig config, JavaType type) { [EOL]     return StdKeyDeserializer.StringKD.forType(type.getRawClass()); [EOL] } <line_num>: 37,41
public static KeyDeserializer constructEnumKeyDeserializer(EnumResolver<?> enumResolver) { [EOL]     return new StdKeyDeserializer.EnumKD(enumResolver, null); [EOL] } <line_num>: 43,45
public static KeyDeserializer constructEnumKeyDeserializer(EnumResolver<?> enumResolver, AnnotatedMethod factory) { [EOL]     return new StdKeyDeserializer.EnumKD(enumResolver, factory); [EOL] } <line_num>: 47,50
public static KeyDeserializer constructDelegatingKeyDeserializer(DeserializationConfig config, JavaType type, JsonDeserializer<?> deser) { [EOL]     return new StdKeyDeserializer.DelegatingKD(type.getRawClass(), deser); [EOL] } <line_num>: 52,56
public static KeyDeserializer findStringBasedKeyDeserializer(DeserializationConfig config, JavaType type) { [EOL]     BeanDescription beanDesc = config.introspect(type); [EOL]     Constructor<?> ctor = beanDesc.findSingleArgConstructor(String.class); [EOL]     if (ctor != null) { [EOL]         if (config.canOverrideAccessModifiers()) { [EOL]             ClassUtil.checkAndFixAccess(ctor); [EOL]         } [EOL]         return new StdKeyDeserializer.StringCtorKeyDeserializer(ctor); [EOL]     } [EOL]     Method m = beanDesc.findFactoryMethod(String.class); [EOL]     if (m != null) { [EOL]         if (config.canOverrideAccessModifiers()) { [EOL]             ClassUtil.checkAndFixAccess(m); [EOL]         } [EOL]         return new StdKeyDeserializer.StringFactoryKeyDeserializer(m); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 58,85
@Override [EOL] public KeyDeserializer findKeyDeserializer(JavaType type, DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException { [EOL]     Class<?> raw = type.getRawClass(); [EOL]     if (raw == String.class || raw == Object.class) { [EOL]         return StdKeyDeserializer.StringKD.forType(raw); [EOL]     } [EOL]     if (raw == UUID.class) { [EOL]         return new StdKeyDeserializer.UuidKD(); [EOL]     } [EOL]     if (raw.isPrimitive()) { [EOL]         raw = ClassUtil.wrapperType(raw); [EOL]     } [EOL]     if (raw == Integer.class) { [EOL]         return new StdKeyDeserializer.IntKD(); [EOL]     } [EOL]     if (raw == Long.class) { [EOL]         return new StdKeyDeserializer.LongKD(); [EOL]     } [EOL]     if (raw == Date.class) { [EOL]         return new StdKeyDeserializer.DateKD(); [EOL]     } [EOL]     if (raw == Calendar.class) { [EOL]         return new StdKeyDeserializer.CalendarKD(); [EOL]     } [EOL]     if (raw == Boolean.class) { [EOL]         return new StdKeyDeserializer.BoolKD(); [EOL]     } [EOL]     if (raw == Byte.class) { [EOL]         return new StdKeyDeserializer.ByteKD(); [EOL]     } [EOL]     if (raw == Character.class) { [EOL]         return new StdKeyDeserializer.CharKD(); [EOL]     } [EOL]     if (raw == Short.class) { [EOL]         return new StdKeyDeserializer.ShortKD(); [EOL]     } [EOL]     if (raw == Float.class) { [EOL]         return new StdKeyDeserializer.FloatKD(); [EOL]     } [EOL]     if (raw == Double.class) { [EOL]         return new StdKeyDeserializer.DoubleKD(); [EOL]     } [EOL]     if (raw == Locale.class) { [EOL]         return new StdKeyDeserializer.LocaleKD(); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 93,148
