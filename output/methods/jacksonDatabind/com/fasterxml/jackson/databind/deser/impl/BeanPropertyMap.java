public BeanPropertyMap(Collection<SettableBeanProperty> properties) { [EOL]     _size = properties.size(); [EOL]     int bucketCount = findSize(_size); [EOL]     _hashMask = bucketCount - 1; [EOL]     Bucket[] buckets = new Bucket[bucketCount]; [EOL]     for (SettableBeanProperty property : properties) { [EOL]         String key = property.getName(); [EOL]         int index = key.hashCode() & _hashMask; [EOL]         buckets[index] = new Bucket(buckets[index], key, property, _nextBucketIndex++); [EOL]     } [EOL]     _buckets = buckets; [EOL] } <line_num>: 41,53
private BeanPropertyMap(Bucket[] buckets, int size, int index) { [EOL]     _buckets = buckets; [EOL]     _size = size; [EOL]     _hashMask = buckets.length - 1; [EOL]     _nextBucketIndex = index; [EOL] } <line_num>: 55,61
public Bucket(Bucket next, String key, SettableBeanProperty value, int index) { [EOL]     this.next = next; [EOL]     this.key = key; [EOL]     this.value = value; [EOL]     this.index = index; [EOL] } <line_num>: 333,339
public IteratorImpl(Bucket[] buckets) { [EOL]     _buckets = buckets; [EOL]     int i = 0; [EOL]     for (int len = _buckets.length; i < len; ) { [EOL]         Bucket b = _buckets[i++]; [EOL]         if (b != null) { [EOL]             _currentBucket = b; [EOL]             break; [EOL]         } [EOL]     } [EOL]     _nextBucketIndex = i; [EOL] } <line_num>: 360,372
public BeanPropertyMap withProperty(SettableBeanProperty newProperty) { [EOL]     final int bcount = _buckets.length; [EOL]     Bucket[] newBuckets = new Bucket[bcount]; [EOL]     System.arraycopy(_buckets, 0, newBuckets, 0, bcount); [EOL]     final String propName = newProperty.getName(); [EOL]     SettableBeanProperty oldProp = find(newProperty.getName()); [EOL]     if (oldProp == null) { [EOL]         int index = propName.hashCode() & _hashMask; [EOL]         newBuckets[index] = new Bucket(newBuckets[index], propName, newProperty, _nextBucketIndex++); [EOL]         return new BeanPropertyMap(newBuckets, _size + 1, _nextBucketIndex); [EOL]     } [EOL]     BeanPropertyMap newMap = new BeanPropertyMap(newBuckets, bcount, _nextBucketIndex); [EOL]     newMap.replace(newProperty); [EOL]     return newMap; [EOL] } <line_num>: 72,94
public BeanPropertyMap renameAll(NameTransformer transformer) { [EOL]     if (transformer == null || (transformer == NameTransformer.NOP)) { [EOL]         return this; [EOL]     } [EOL]     Iterator<SettableBeanProperty> it = iterator(); [EOL]     ArrayList<SettableBeanProperty> newProps = new ArrayList<SettableBeanProperty>(); [EOL]     while (it.hasNext()) { [EOL]         SettableBeanProperty prop = it.next(); [EOL]         String newName = transformer.transform(prop.getName()); [EOL]         prop = prop.withName(newName); [EOL]         JsonDeserializer<?> deser = prop.getValueDeserializer(); [EOL]         if (deser != null) { [EOL]             @SuppressWarnings("unchecked") [EOL]             JsonDeserializer<Object> newDeser = (JsonDeserializer<Object>) deser.unwrappingDeserializer(transformer); [EOL]             if (newDeser != deser) { [EOL]                 prop = prop.withValueDeserializer(newDeser); [EOL]             } [EOL]         } [EOL]         newProps.add(prop); [EOL]     } [EOL]     return new BeanPropertyMap(newProps); [EOL] } <line_num>: 100,124
public BeanPropertyMap assignIndexes() { [EOL]     int index = 0; [EOL]     for (Bucket bucket : _buckets) { [EOL]         while (bucket != null) { [EOL]             bucket.value.assignIndex(index++); [EOL]             bucket = bucket.next; [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 126,137
private final static int findSize(int size) { [EOL]     int needed = (size <= 32) ? (size + size) : (size + (size >> 2)); [EOL]     int result = 2; [EOL]     while (result < needed) { [EOL]         result += result; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 139,148
@Override [EOL] public String toString() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append("Properties=["); [EOL]     int count = 0; [EOL]     for (SettableBeanProperty prop : getPropertiesInInsertionOrder()) { [EOL]         if (prop == null) { [EOL]             continue; [EOL]         } [EOL]         if (count++ > 0) { [EOL]             sb.append(", "); [EOL]         } [EOL]         sb.append(prop.getName()); [EOL]         sb.append('('); [EOL]         sb.append(prop.getType()); [EOL]         sb.append(')'); [EOL]     } [EOL]     sb.append(']'); [EOL]     return sb.toString(); [EOL] } <line_num>: 156,176
@Override [EOL] public Iterator<SettableBeanProperty> iterator() { [EOL]     return new IteratorImpl(_buckets); [EOL] } <line_num>: 181,184
public SettableBeanProperty[] getPropertiesInInsertionOrder() { [EOL]     int len = _nextBucketIndex; [EOL]     SettableBeanProperty[] result = new SettableBeanProperty[len]; [EOL]     for (Bucket root : _buckets) { [EOL]         for (Bucket bucket = root; bucket != null; bucket = bucket.next) { [EOL]             result[bucket.index] = bucket.value; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 194,204
public int size() { [EOL]     return _size; [EOL] } <line_num>: 212,212
public SettableBeanProperty find(String key) { [EOL]     int index = key.hashCode() & _hashMask; [EOL]     Bucket bucket = _buckets[index]; [EOL]     if (bucket == null) { [EOL]         return null; [EOL]     } [EOL]     if (bucket.key == key) { [EOL]         return bucket.value; [EOL]     } [EOL]     while ((bucket = bucket.next) != null) { [EOL]         if (bucket.key == key) { [EOL]             return bucket.value; [EOL]         } [EOL]     } [EOL]     return _findWithEquals(key, index); [EOL] } <line_num>: 214,233
public void replace(SettableBeanProperty property) { [EOL]     String name = property.getName(); [EOL]     int index = name.hashCode() & (_buckets.length - 1); [EOL]     Bucket tail = null; [EOL]     int foundIndex = -1; [EOL]     for (Bucket bucket = _buckets[index]; bucket != null; bucket = bucket.next) { [EOL]         if (foundIndex < 0 && bucket.key.equals(name)) { [EOL]             foundIndex = bucket.index; [EOL]         } else { [EOL]             tail = new Bucket(tail, bucket.key, bucket.value, bucket.index); [EOL]         } [EOL]     } [EOL]     if (foundIndex < 0) { [EOL]         throw new NoSuchElementException("No entry '" + property + "' found, can't replace"); [EOL]     } [EOL]     _buckets[index] = new Bucket(tail, name, property, foundIndex); [EOL] } <line_num>: 240,267
public void remove(SettableBeanProperty property) { [EOL]     String name = property.getName(); [EOL]     int index = name.hashCode() & (_buckets.length - 1); [EOL]     Bucket tail = null; [EOL]     boolean found = false; [EOL]     for (Bucket bucket = _buckets[index]; bucket != null; bucket = bucket.next) { [EOL]         if (!found && bucket.key.equals(name)) { [EOL]             found = true; [EOL]         } else { [EOL]             tail = new Bucket(tail, bucket.key, bucket.value, bucket.index); [EOL]         } [EOL]     } [EOL]     if (!found) { [EOL]         throw new NoSuchElementException("No entry '" + property + "' found, can't remove"); [EOL]     } [EOL]     _buckets[index] = tail; [EOL] } <line_num>: 273,293
private SettableBeanProperty _findWithEquals(String key, int index) { [EOL]     Bucket bucket = _buckets[index]; [EOL]     while (bucket != null) { [EOL]         if (key.equals(bucket.key)) { [EOL]             return bucket.value; [EOL]         } [EOL]         bucket = bucket.next; [EOL]     } [EOL]     return null; [EOL] } <line_num>: 301,311
@Override [EOL] public boolean hasNext() { [EOL]     return _currentBucket != null; [EOL] } <line_num>: 374,377
@Override [EOL] public SettableBeanProperty next() { [EOL]     Bucket curr = _currentBucket; [EOL]     if (curr == null) { [EOL]         throw new NoSuchElementException(); [EOL]     } [EOL]     Bucket b = curr.next; [EOL]     while (b == null && _nextBucketIndex < _buckets.length) { [EOL]         b = _buckets[_nextBucketIndex++]; [EOL]     } [EOL]     _currentBucket = b; [EOL]     return curr.value; [EOL] } <line_num>: 379,393
@Override [EOL] public void remove() { [EOL]     throw new UnsupportedOperationException(); [EOL] } <line_num>: 395,398
