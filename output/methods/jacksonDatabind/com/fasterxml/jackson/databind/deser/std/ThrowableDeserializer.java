public ThrowableDeserializer(BeanDeserializer baseDeserializer) { [EOL]     super(baseDeserializer); [EOL]     _vanillaProcessing = false; [EOL] } <line_num>: 29,34
protected ThrowableDeserializer(BeanDeserializer src, NameTransformer unwrapper) { [EOL]     super(src, unwrapper); [EOL] } <line_num>: 39,42
@Override [EOL] public JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper) { [EOL]     if (getClass() != ThrowableDeserializer.class) { [EOL]         return this; [EOL]     } [EOL]     return new ThrowableDeserializer(this, unwrapper); [EOL] } <line_num>: 44,55
@Override [EOL] public Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     if (_propertyBasedCreator != null) { [EOL]         return _deserializeUsingPropertyBased(jp, ctxt); [EOL]     } [EOL]     if (_delegateDeserializer != null) { [EOL]         return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt)); [EOL]     } [EOL]     if (_beanType.isAbstract()) { [EOL]         throw JsonMappingException.from(jp, "Can not instantiate abstract type " + _beanType + " (need to add/enable type information?)"); [EOL]     } [EOL]     boolean hasStringCreator = _valueInstantiator.canCreateFromString(); [EOL]     boolean hasDefaultCtor = _valueInstantiator.canCreateUsingDefault(); [EOL]     if (!hasStringCreator && !hasDefaultCtor) { [EOL]         throw new JsonMappingException("Can not deserialize Throwable of type " + _beanType + " without having a default contructor, a single-String-arg constructor; or explicit @JsonCreator"); [EOL]     } [EOL]     Object throwable = null; [EOL]     Object[] pending = null; [EOL]     int pendingIx = 0; [EOL]     for (; jp.getCurrentToken() != JsonToken.END_OBJECT; jp.nextToken()) { [EOL]         String propName = jp.getCurrentName(); [EOL]         SettableBeanProperty prop = _beanProperties.find(propName); [EOL]         jp.nextToken(); [EOL]         if (prop != null) { [EOL]             if (throwable != null) { [EOL]                 prop.deserializeAndSet(jp, ctxt, throwable); [EOL]                 continue; [EOL]             } [EOL]             if (pending == null) { [EOL]                 int len = _beanProperties.size(); [EOL]                 pending = new Object[len + len]; [EOL]             } [EOL]             pending[pendingIx++] = prop; [EOL]             pending[pendingIx++] = prop.deserialize(jp, ctxt); [EOL]             continue; [EOL]         } [EOL]         if (PROP_NAME_MESSAGE.equals(propName)) { [EOL]             if (hasStringCreator) { [EOL]                 throwable = _valueInstantiator.createFromString(ctxt, jp.getText()); [EOL]                 if (pending != null) { [EOL]                     for (int i = 0, len = pendingIx; i < len; i += 2) { [EOL]                         prop = (SettableBeanProperty) pending[i]; [EOL]                         prop.set(throwable, pending[i + 1]); [EOL]                     } [EOL]                     pending = null; [EOL]                 } [EOL]                 continue; [EOL]             } [EOL]         } [EOL]         if (_ignorableProps != null && _ignorableProps.contains(propName)) { [EOL]             jp.skipChildren(); [EOL]             continue; [EOL]         } [EOL]         if (_anySetter != null) { [EOL]             _anySetter.deserializeAndSet(jp, ctxt, throwable, propName); [EOL]             continue; [EOL]         } [EOL]         handleUnknownProperty(jp, ctxt, throwable, propName); [EOL]     } [EOL]     if (throwable == null) { [EOL]         if (hasStringCreator) { [EOL]             throwable = _valueInstantiator.createFromString(ctxt, null); [EOL]         } else { [EOL]             throwable = _valueInstantiator.createUsingDefault(ctxt); [EOL]         } [EOL]         if (pending != null) { [EOL]             for (int i = 0, len = pendingIx; i < len; i += 2) { [EOL]                 SettableBeanProperty prop = (SettableBeanProperty) pending[i]; [EOL]                 prop.set(throwable, pending[i + 1]); [EOL]             } [EOL]         } [EOL]     } [EOL]     return throwable; [EOL] } <line_num>: 64,163
