public StringArrayDeserializer() { [EOL]     super(String[].class); [EOL]     _elementDeserializer = null; [EOL] } <line_num>: 32,35
@SuppressWarnings("unchecked") [EOL] protected StringArrayDeserializer(JsonDeserializer<?> deser) { [EOL]     super(String[].class); [EOL]     _elementDeserializer = (JsonDeserializer<String>) deser; [EOL] } <line_num>: 37,41
@Override [EOL] public String[] deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     if (!jp.isExpectedStartArrayToken()) { [EOL]         return handleNonArray(jp, ctxt); [EOL]     } [EOL]     if (_elementDeserializer != null) { [EOL]         return _deserializeCustom(jp, ctxt); [EOL]     } [EOL]     final ObjectBuffer buffer = ctxt.leaseObjectBuffer(); [EOL]     Object[] chunk = buffer.resetAndStart(); [EOL]     int ix = 0; [EOL]     JsonToken t; [EOL]     while ((t = jp.nextToken()) != JsonToken.END_ARRAY) { [EOL]         String value; [EOL]         if (t == JsonToken.VALUE_STRING) { [EOL]             value = jp.getText(); [EOL]         } else if (t == JsonToken.VALUE_NULL) { [EOL]             value = null; [EOL]         } else { [EOL]             value = _parseString(jp, ctxt); [EOL]         } [EOL]         if (ix >= chunk.length) { [EOL]             chunk = buffer.appendCompletedChunk(chunk); [EOL]             ix = 0; [EOL]         } [EOL]         chunk[ix++] = value; [EOL]     } [EOL]     String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class); [EOL]     ctxt.returnObjectBuffer(buffer); [EOL]     return result; [EOL] } <line_num>: 43,80
protected final String[] _deserializeCustom(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     final ObjectBuffer buffer = ctxt.leaseObjectBuffer(); [EOL]     Object[] chunk = buffer.resetAndStart(); [EOL]     final JsonDeserializer<String> deser = _elementDeserializer; [EOL]     int ix = 0; [EOL]     JsonToken t; [EOL]     while ((t = jp.nextToken()) != JsonToken.END_ARRAY) { [EOL]         String value = (t == JsonToken.VALUE_NULL) ? null : deser.deserialize(jp, ctxt); [EOL]         if (ix >= chunk.length) { [EOL]             chunk = buffer.appendCompletedChunk(chunk); [EOL]             ix = 0; [EOL]         } [EOL]         chunk[ix++] = value; [EOL]     } [EOL]     String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class); [EOL]     ctxt.returnObjectBuffer(buffer); [EOL]     return result; [EOL] } <line_num>: 85,107
@Override [EOL] public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException, JsonProcessingException { [EOL]     return typeDeserializer.deserializeTypedFromArray(jp, ctxt); [EOL] } <line_num>: 109,115
private final String[] handleNonArray(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY)) { [EOL]         if ((jp.getCurrentToken() == JsonToken.VALUE_STRING) && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) { [EOL]             String str = jp.getText(); [EOL]             if (str.length() == 0) { [EOL]                 return null; [EOL]             } [EOL]         } [EOL]         throw ctxt.mappingException(_valueClass); [EOL]     } [EOL]     return new String[] { (jp.getCurrentToken() == JsonToken.VALUE_NULL) ? null : _parseString(jp, ctxt) }; [EOL] } <line_num>: 117,133
@Override [EOL] public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException { [EOL]     JsonDeserializer<?> deser = _elementDeserializer; [EOL]     deser = findConvertingContentDeserializer(ctxt, property, deser); [EOL]     if (deser == null) { [EOL]         deser = ctxt.findContextualValueDeserializer(ctxt.constructType(String.class), property); [EOL]     } else { [EOL]         if (deser instanceof ContextualDeserializer) { [EOL]             deser = ((ContextualDeserializer) deser).createContextual(ctxt, property); [EOL]         } [EOL]     } [EOL]     if (deser != null && this.isDefaultDeserializer(deser)) { [EOL]         deser = null; [EOL]     } [EOL]     if (_elementDeserializer != deser) { [EOL]         return new StringArrayDeserializer(deser); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 139,161
