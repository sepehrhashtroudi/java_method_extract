protected PrimitiveOrWrapperDeserializer(Class<T> vc, T nvl) { [EOL]     super(vc); [EOL]     _nullValue = nvl; [EOL] } <line_num>: 166,170
public BooleanDeserializer(Class<Boolean> cls, Boolean nvl) { [EOL]     super(cls, nvl); [EOL] } <line_num>: 193,196
public ByteDeserializer(Class<Byte> cls, Byte nvl) { [EOL]     super(cls, nvl); [EOL] } <line_num>: 225,228
public ShortDeserializer(Class<Short> cls, Short nvl) { [EOL]     super(cls, nvl); [EOL] } <line_num>: 247,250
public CharacterDeserializer(Class<Character> cls, Character nvl) { [EOL]     super(cls, nvl); [EOL] } <line_num>: 269,272
public IntegerDeserializer(Class<Integer> cls, Integer nvl) { [EOL]     super(cls, nvl); [EOL] } <line_num>: 310,313
public LongDeserializer(Class<Long> cls, Long nvl) { [EOL]     super(cls, nvl); [EOL] } <line_num>: 342,345
public FloatDeserializer(Class<Float> cls, Float nvl) { [EOL]     super(cls, nvl); [EOL] } <line_num>: 364,367
public DoubleDeserializer(Class<Double> cls, Double nvl) { [EOL]     super(cls, nvl); [EOL] } <line_num>: 389,392
public NumberDeserializer() { [EOL]     super(Number.class); [EOL] } <line_num>: 429,429
public BigIntegerDeserializer() { [EOL]     super(BigInteger.class); [EOL] } <line_num>: 522,522
public BigDecimalDeserializer() { [EOL]     super(BigDecimal.class); [EOL] } <line_num>: 566,566
@Deprecated [EOL] public static StdDeserializer<?>[] all() { [EOL]     return new StdDeserializer<?>[] { new BooleanDeserializer(Boolean.class, null), new ByteDeserializer(Byte.class, null), new ShortDeserializer(Short.class, null), new CharacterDeserializer(Character.class, null), new IntegerDeserializer(Integer.class, null), new LongDeserializer(Long.class, null), new FloatDeserializer(Float.class, null), new DoubleDeserializer(Double.class, null), new BooleanDeserializer(Boolean.TYPE, Boolean.FALSE), new ByteDeserializer(Byte.TYPE, Byte.valueOf((byte) (0))), new ShortDeserializer(Short.TYPE, Short.valueOf((short) 0)), new CharacterDeserializer(Character.TYPE, Character.valueOf('\0')), new IntegerDeserializer(Integer.TYPE, Integer.valueOf(0)), new LongDeserializer(Long.TYPE, Long.valueOf(0L)), new FloatDeserializer(Float.TYPE, Float.valueOf(0.0f)), new DoubleDeserializer(Double.TYPE, Double.valueOf(0.0)), new NumberDeserializer(), new BigDecimalDeserializer(), new BigIntegerDeserializer() }; [EOL] } <line_num>: 50,81
public static JsonDeserializer<?> find(Class<?> rawType, String clsName) { [EOL]     if (rawType.isPrimitive()) { [EOL]         if (rawType == Integer.TYPE) { [EOL]             return IntegerDeserializer.primitiveInstance; [EOL]         } [EOL]         if (rawType == Boolean.TYPE) { [EOL]             return BooleanDeserializer.primitiveInstance; [EOL]         } [EOL]         if (rawType == Long.TYPE) { [EOL]             return LongDeserializer.primitiveInstance; [EOL]         } [EOL]         if (rawType == Double.TYPE) { [EOL]             return DoubleDeserializer.primitiveInstance; [EOL]         } [EOL]         if (rawType == Character.TYPE) { [EOL]             return CharacterDeserializer.primitiveInstance; [EOL]         } [EOL]         if (rawType == Byte.TYPE) { [EOL]             return ByteDeserializer.primitiveInstance; [EOL]         } [EOL]         if (rawType == Short.TYPE) { [EOL]             return ShortDeserializer.primitiveInstance; [EOL]         } [EOL]         if (rawType == Float.TYPE) { [EOL]             return FloatDeserializer.primitiveInstance; [EOL]         } [EOL]     } else if (_classNames.contains(clsName)) { [EOL]         if (rawType == Integer.class) { [EOL]             return IntegerDeserializer.wrapperInstance; [EOL]         } [EOL]         if (rawType == Boolean.class) { [EOL]             return BooleanDeserializer.wrapperInstance; [EOL]         } [EOL]         if (rawType == Long.class) { [EOL]             return LongDeserializer.wrapperInstance; [EOL]         } [EOL]         if (rawType == Double.class) { [EOL]             return DoubleDeserializer.wrapperInstance; [EOL]         } [EOL]         if (rawType == Character.class) { [EOL]             return CharacterDeserializer.wrapperInstance; [EOL]         } [EOL]         if (rawType == Byte.class) { [EOL]             return ByteDeserializer.wrapperInstance; [EOL]         } [EOL]         if (rawType == Short.class) { [EOL]             return ShortDeserializer.wrapperInstance; [EOL]         } [EOL]         if (rawType == Float.class) { [EOL]             return FloatDeserializer.wrapperInstance; [EOL]         } [EOL]         if (rawType == Number.class) { [EOL]             return NumberDeserializer.instance; [EOL]         } [EOL]         if (rawType == BigDecimal.class) { [EOL]             return BigDecimalDeserializer.instance; [EOL]         } [EOL]         if (rawType == BigInteger.class) { [EOL]             return BigIntegerDeserializer.instance; [EOL]         } [EOL]     } else { [EOL]         return null; [EOL]     } [EOL]     throw new IllegalArgumentException("Internal error: can't find deserializer for " + rawType.getName()); [EOL] } <line_num>: 83,150
@Override [EOL] public final T getNullValue() { [EOL]     return _nullValue; [EOL] } <line_num>: 172,175
@Override [EOL] public Boolean deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     return _parseBoolean(jp, ctxt); [EOL] } <line_num>: 198,203
@Override [EOL] public Boolean deserializeWithType(JsonParser jp, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException, JsonProcessingException { [EOL]     return _parseBoolean(jp, ctxt); [EOL] } <line_num>: 207,213
@Override [EOL] public Byte deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     return _parseByte(jp, ctxt); [EOL] } <line_num>: 230,235
@Override [EOL] public Short deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     return _parseShort(jp, ctxt); [EOL] } <line_num>: 252,257
@Override [EOL] public Character deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     JsonToken t = jp.getCurrentToken(); [EOL]     int value; [EOL]     if (t == JsonToken.VALUE_NUMBER_INT) { [EOL]         value = jp.getIntValue(); [EOL]         if (value >= 0 && value <= 0xFFFF) { [EOL]             return Character.valueOf((char) value); [EOL]         } [EOL]     } else if (t == JsonToken.VALUE_STRING) { [EOL]         String text = jp.getText(); [EOL]         if (text.length() == 1) { [EOL]             return Character.valueOf(text.charAt(0)); [EOL]         } [EOL]         if (text.length() == 0) { [EOL]             return (Character) getEmptyValue(); [EOL]         } [EOL]     } [EOL]     throw ctxt.mappingException(_valueClass, t); [EOL] } <line_num>: 274,298
@Override [EOL] public Integer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     return _parseInteger(jp, ctxt); [EOL] } <line_num>: 315,320
@Override [EOL] public Integer deserializeWithType(JsonParser jp, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException, JsonProcessingException { [EOL]     return _parseInteger(jp, ctxt); [EOL] } <line_num>: 324,330
@Override [EOL] public Long deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     return _parseLong(jp, ctxt); [EOL] } <line_num>: 347,352
@Override [EOL] public Float deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     return _parseFloat(jp, ctxt); [EOL] } <line_num>: 369,377
@Override [EOL] public Double deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     return _parseDouble(jp, ctxt); [EOL] } <line_num>: 394,399
@Override [EOL] public Double deserializeWithType(JsonParser jp, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException, JsonProcessingException { [EOL]     return _parseDouble(jp, ctxt); [EOL] } <line_num>: 403,409
@Override [EOL] public Number deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     JsonToken t = jp.getCurrentToken(); [EOL]     if (t == JsonToken.VALUE_NUMBER_INT) { [EOL]         if (ctxt.isEnabled(DeserializationFeature.USE_BIG_INTEGER_FOR_INTS)) { [EOL]             return jp.getBigIntegerValue(); [EOL]         } [EOL]         return jp.getNumberValue(); [EOL]     } else if (t == JsonToken.VALUE_NUMBER_FLOAT) { [EOL]         if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) { [EOL]             return jp.getDecimalValue(); [EOL]         } [EOL]         return Double.valueOf(jp.getDoubleValue()); [EOL]     } [EOL]     if (t == JsonToken.VALUE_STRING) { [EOL]         String text = jp.getText().trim(); [EOL]         try { [EOL]             if (text.indexOf('.') >= 0) { [EOL]                 if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) { [EOL]                     return new BigDecimal(text); [EOL]                 } [EOL]                 return new Double(text); [EOL]             } [EOL]             if (ctxt.isEnabled(DeserializationFeature.USE_BIG_INTEGER_FOR_INTS)) { [EOL]                 return new BigInteger(text); [EOL]             } [EOL]             long value = Long.parseLong(text); [EOL]             if (value <= Integer.MAX_VALUE && value >= Integer.MIN_VALUE) { [EOL]                 return Integer.valueOf((int) value); [EOL]             } [EOL]             return Long.valueOf(value); [EOL]         } catch (IllegalArgumentException iae) { [EOL]             throw ctxt.weirdStringException(text, _valueClass, "not a valid number"); [EOL]         } [EOL]     } [EOL]     throw ctxt.mappingException(_valueClass, t); [EOL] } <line_num>: 431,479
@SuppressWarnings("incomplete-switch") [EOL] @Override [EOL] public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException, JsonProcessingException { [EOL]     switch(jp.getCurrentToken()) { [EOL]         case VALUE_NUMBER_INT: [EOL]         case VALUE_NUMBER_FLOAT: [EOL]         case VALUE_STRING: [EOL]             return deserialize(jp, ctxt); [EOL]     } [EOL]     return typeDeserializer.deserializeTypedFromScalar(jp, ctxt); [EOL] } <line_num>: 487,501
@SuppressWarnings("incomplete-switch") [EOL] @Override [EOL] public BigInteger deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     JsonToken t = jp.getCurrentToken(); [EOL]     String text; [EOL]     if (t == JsonToken.VALUE_NUMBER_INT) { [EOL]         switch(jp.getNumberType()) { [EOL]             case INT: [EOL]             case LONG: [EOL]                 return BigInteger.valueOf(jp.getLongValue()); [EOL]         } [EOL]     } else if (t == JsonToken.VALUE_NUMBER_FLOAT) { [EOL]         return jp.getDecimalValue().toBigInteger(); [EOL]     } else if (t != JsonToken.VALUE_STRING) { [EOL]         throw ctxt.mappingException(_valueClass, t); [EOL]     } [EOL]     text = jp.getText().trim(); [EOL]     if (text.length() == 0) { [EOL]         return null; [EOL]     } [EOL]     try { [EOL]         return new BigInteger(text); [EOL]     } catch (IllegalArgumentException iae) { [EOL]         throw ctxt.weirdStringException(text, _valueClass, "not a valid representation"); [EOL]     } [EOL] } <line_num>: 524,556
@Override [EOL] public BigDecimal deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     JsonToken t = jp.getCurrentToken(); [EOL]     if (t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT) { [EOL]         return jp.getDecimalValue(); [EOL]     } [EOL]     if (t == JsonToken.VALUE_STRING) { [EOL]         String text = jp.getText().trim(); [EOL]         if (text.length() == 0) { [EOL]             return null; [EOL]         } [EOL]         try { [EOL]             return new BigDecimal(text); [EOL]         } catch (IllegalArgumentException iae) { [EOL]             throw ctxt.weirdStringException(text, _valueClass, "not a valid representation"); [EOL]         } [EOL]     } [EOL]     throw ctxt.mappingException(_valueClass, t); [EOL] } <line_num>: 568,590
