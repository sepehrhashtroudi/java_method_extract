public MapDeserializer(JavaType mapType, ValueInstantiator valueInstantiator, KeyDeserializer keyDeser, JsonDeserializer<Object> valueDeser, TypeDeserializer valueTypeDeser) { [EOL]     super(Map.class); [EOL]     _mapType = mapType; [EOL]     _keyDeserializer = keyDeser; [EOL]     _valueDeserializer = valueDeser; [EOL]     _valueTypeDeserializer = valueTypeDeser; [EOL]     _valueInstantiator = valueInstantiator; [EOL]     _hasDefaultCreator = valueInstantiator.canCreateUsingDefault(); [EOL]     _delegateDeserializer = null; [EOL]     _propertyBasedCreator = null; [EOL]     _standardStringKey = _isStdKeyDeser(mapType, keyDeser); [EOL] } <line_num>: 94,108
protected MapDeserializer(MapDeserializer src) { [EOL]     super(src._valueClass); [EOL]     _mapType = src._mapType; [EOL]     _keyDeserializer = src._keyDeserializer; [EOL]     _valueDeserializer = src._valueDeserializer; [EOL]     _valueTypeDeserializer = src._valueTypeDeserializer; [EOL]     _valueInstantiator = src._valueInstantiator; [EOL]     _propertyBasedCreator = src._propertyBasedCreator; [EOL]     _delegateDeserializer = src._delegateDeserializer; [EOL]     _hasDefaultCreator = src._hasDefaultCreator; [EOL]     _ignorableProperties = src._ignorableProperties; [EOL]     _standardStringKey = src._standardStringKey; [EOL] } <line_num>: 114,129
protected MapDeserializer(MapDeserializer src, KeyDeserializer keyDeser, JsonDeserializer<Object> valueDeser, TypeDeserializer valueTypeDeser, HashSet<String> ignorable) { [EOL]     super(src._valueClass); [EOL]     _mapType = src._mapType; [EOL]     _keyDeserializer = keyDeser; [EOL]     _valueDeserializer = valueDeser; [EOL]     _valueTypeDeserializer = valueTypeDeser; [EOL]     _valueInstantiator = src._valueInstantiator; [EOL]     _propertyBasedCreator = src._propertyBasedCreator; [EOL]     _delegateDeserializer = src._delegateDeserializer; [EOL]     _hasDefaultCreator = src._hasDefaultCreator; [EOL]     _ignorableProperties = ignorable; [EOL]     _standardStringKey = _isStdKeyDeser(_mapType, keyDeser); [EOL] } <line_num>: 131,148
@SuppressWarnings("unchecked") [EOL] protected MapDeserializer withResolved(KeyDeserializer keyDeser, TypeDeserializer valueTypeDeser, JsonDeserializer<?> valueDeser, HashSet<String> ignorable) { [EOL]     if ((_keyDeserializer == keyDeser) && (_valueDeserializer == valueDeser) && (_valueTypeDeserializer == valueTypeDeser) && (_ignorableProperties == ignorable)) { [EOL]         return this; [EOL]     } [EOL]     return new MapDeserializer(this, keyDeser, (JsonDeserializer<Object>) valueDeser, valueTypeDeser, ignorable); [EOL] } <line_num>: 154,166
protected final boolean _isStdKeyDeser(JavaType mapType, KeyDeserializer keyDeser) { [EOL]     if (keyDeser == null) { [EOL]         return true; [EOL]     } [EOL]     JavaType keyType = mapType.getKeyType(); [EOL]     if (keyType == null) { [EOL]         return true; [EOL]     } [EOL]     Class<?> rawKeyType = keyType.getRawClass(); [EOL]     return ((rawKeyType == String.class || rawKeyType == Object.class) && isDefaultKeyDeserializer(keyDeser)); [EOL] } <line_num>: 172,184
public void setIgnorableProperties(String[] ignorable) { [EOL]     _ignorableProperties = (ignorable == null || ignorable.length == 0) ? null : ArrayBuilders.arrayToSet(ignorable); [EOL] } <line_num>: 186,190
@Override [EOL] public void resolve(DeserializationContext ctxt) throws JsonMappingException { [EOL]     if (_valueInstantiator.canCreateUsingDelegate()) { [EOL]         JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig()); [EOL]         if (delegateType == null) { [EOL]             throw new IllegalArgumentException("Invalid delegate-creator definition for " + _mapType + ": value instantiator (" + _valueInstantiator.getClass().getName() + ") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'"); [EOL]         } [EOL]         _delegateDeserializer = findDeserializer(ctxt, delegateType, null); [EOL]     } [EOL]     if (_valueInstantiator.canCreateFromObjectWith()) { [EOL]         SettableBeanProperty[] creatorProps = _valueInstantiator.getFromObjectArguments(ctxt.getConfig()); [EOL]         _propertyBasedCreator = PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps); [EOL]     } [EOL]     _standardStringKey = _isStdKeyDeser(_mapType, _keyDeserializer); [EOL] } <line_num>: 198,220
@Override [EOL] public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException { [EOL]     KeyDeserializer kd = _keyDeserializer; [EOL]     if (kd == null) { [EOL]         kd = ctxt.findKeyDeserializer(_mapType.getKeyType(), property); [EOL]     } else { [EOL]         if (kd instanceof ContextualKeyDeserializer) { [EOL]             kd = ((ContextualKeyDeserializer) kd).createContextual(ctxt, property); [EOL]         } [EOL]     } [EOL]     JsonDeserializer<?> vd = _valueDeserializer; [EOL]     vd = findConvertingContentDeserializer(ctxt, property, vd); [EOL]     if (vd == null) { [EOL]         vd = ctxt.findContextualValueDeserializer(_mapType.getContentType(), property); [EOL]     } else { [EOL]         if (vd instanceof ContextualDeserializer) { [EOL]             vd = ((ContextualDeserializer) vd).createContextual(ctxt, property); [EOL]         } [EOL]     } [EOL]     TypeDeserializer vtd = _valueTypeDeserializer; [EOL]     if (vtd != null) { [EOL]         vtd = vtd.forProperty(property); [EOL]     } [EOL]     HashSet<String> ignored = _ignorableProperties; [EOL]     AnnotationIntrospector intr = ctxt.getAnnotationIntrospector(); [EOL]     if (intr != null && property != null) { [EOL]         String[] moreToIgnore = intr.findPropertiesToIgnore(property.getMember()); [EOL]         if (moreToIgnore != null) { [EOL]             ignored = (ignored == null) ? new HashSet<String>() : new HashSet<String>(ignored); [EOL]             for (String str : moreToIgnore) { [EOL]                 ignored.add(str); [EOL]             } [EOL]         } [EOL]     } [EOL]     return withResolved(kd, vtd, vd, ignored); [EOL] } <line_num>: 226,264
@Override [EOL] public JavaType getContentType() { [EOL]     return _mapType.getContentType(); [EOL] } <line_num>: 272,275
@Override [EOL] public JsonDeserializer<Object> getContentDeserializer() { [EOL]     return _valueDeserializer; [EOL] } <line_num>: 277,280
@Override [EOL] @SuppressWarnings("unchecked") [EOL] public Map<Object, Object> deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     if (_propertyBasedCreator != null) { [EOL]         return _deserializeUsingCreator(jp, ctxt); [EOL]     } [EOL]     if (_delegateDeserializer != null) { [EOL]         return (Map<Object, Object>) _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt)); [EOL]     } [EOL]     if (!_hasDefaultCreator) { [EOL]         throw ctxt.instantiationException(getMapClass(), "No default constructor found"); [EOL]     } [EOL]     JsonToken t = jp.getCurrentToken(); [EOL]     if (t != JsonToken.START_OBJECT && t != JsonToken.FIELD_NAME && t != JsonToken.END_OBJECT) { [EOL]         if (t == JsonToken.VALUE_STRING) { [EOL]             return (Map<Object, Object>) _valueInstantiator.createFromString(ctxt, jp.getText()); [EOL]         } [EOL]         throw ctxt.mappingException(getMapClass()); [EOL]     } [EOL]     final Map<Object, Object> result = (Map<Object, Object>) _valueInstantiator.createUsingDefault(ctxt); [EOL]     if (_standardStringKey) { [EOL]         _readAndBindStringMap(jp, ctxt, result); [EOL]         return result; [EOL]     } [EOL]     _readAndBind(jp, ctxt, result); [EOL]     return result; [EOL] } <line_num>: 288,319
@Override [EOL] public Map<Object, Object> deserialize(JsonParser jp, DeserializationContext ctxt, Map<Object, Object> result) throws IOException, JsonProcessingException { [EOL]     JsonToken t = jp.getCurrentToken(); [EOL]     if (t != JsonToken.START_OBJECT && t != JsonToken.FIELD_NAME) { [EOL]         throw ctxt.mappingException(getMapClass()); [EOL]     } [EOL]     if (_standardStringKey) { [EOL]         _readAndBindStringMap(jp, ctxt, result); [EOL]         return result; [EOL]     } [EOL]     _readAndBind(jp, ctxt, result); [EOL]     return result; [EOL] } <line_num>: 321,337
@Override [EOL] public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException, JsonProcessingException { [EOL]     return typeDeserializer.deserializeTypedFromObject(jp, ctxt); [EOL] } <line_num>: 339,346
@SuppressWarnings("unchecked") [EOL] public final Class<?> getMapClass() { [EOL]     return (Class<Map<Object, Object>>) _mapType.getRawClass(); [EOL] } <line_num>: 354,355
@Override [EOL] public JavaType getValueType() { [EOL]     return _mapType; [EOL] } <line_num>: 357,357
protected final void _readAndBind(JsonParser jp, DeserializationContext ctxt, Map<Object, Object> result) throws IOException, JsonProcessingException { [EOL]     JsonToken t = jp.getCurrentToken(); [EOL]     if (t == JsonToken.START_OBJECT) { [EOL]         t = jp.nextToken(); [EOL]     } [EOL]     final KeyDeserializer keyDes = _keyDeserializer; [EOL]     final JsonDeserializer<Object> valueDes = _valueDeserializer; [EOL]     final TypeDeserializer typeDeser = _valueTypeDeserializer; [EOL]     for (; t == JsonToken.FIELD_NAME; t = jp.nextToken()) { [EOL]         String fieldName = jp.getCurrentName(); [EOL]         Object key = keyDes.deserializeKey(fieldName, ctxt); [EOL]         t = jp.nextToken(); [EOL]         if (_ignorableProperties != null && _ignorableProperties.contains(fieldName)) { [EOL]             jp.skipChildren(); [EOL]             continue; [EOL]         } [EOL]         Object value; [EOL]         if (t == JsonToken.VALUE_NULL) { [EOL]             value = null; [EOL]         } else if (typeDeser == null) { [EOL]             value = valueDes.deserialize(jp, ctxt); [EOL]         } else { [EOL]             value = valueDes.deserializeWithType(jp, ctxt, typeDeser); [EOL]         } [EOL]         result.put(key, value); [EOL]     } [EOL] } <line_num>: 365,401
protected final void _readAndBindStringMap(JsonParser jp, DeserializationContext ctxt, Map<Object, Object> result) throws IOException, JsonProcessingException { [EOL]     JsonToken t = jp.getCurrentToken(); [EOL]     if (t == JsonToken.START_OBJECT) { [EOL]         t = jp.nextToken(); [EOL]     } [EOL]     final JsonDeserializer<Object> valueDes = _valueDeserializer; [EOL]     final TypeDeserializer typeDeser = _valueTypeDeserializer; [EOL]     for (; t == JsonToken.FIELD_NAME; t = jp.nextToken()) { [EOL]         String fieldName = jp.getCurrentName(); [EOL]         t = jp.nextToken(); [EOL]         if (_ignorableProperties != null && _ignorableProperties.contains(fieldName)) { [EOL]             jp.skipChildren(); [EOL]             continue; [EOL]         } [EOL]         Object value; [EOL]         if (t == JsonToken.VALUE_NULL) { [EOL]             value = null; [EOL]         } else if (typeDeser == null) { [EOL]             value = valueDes.deserialize(jp, ctxt); [EOL]         } else { [EOL]             value = valueDes.deserializeWithType(jp, ctxt, typeDeser); [EOL]         } [EOL]         result.put(fieldName, value); [EOL]     } [EOL] } <line_num>: 408,438
@SuppressWarnings("unchecked") [EOL] public Map<Object, Object> _deserializeUsingCreator(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     final PropertyBasedCreator creator = _propertyBasedCreator; [EOL]     PropertyValueBuffer buffer = creator.startBuilding(jp, ctxt, null); [EOL]     JsonToken t = jp.getCurrentToken(); [EOL]     if (t == JsonToken.START_OBJECT) { [EOL]         t = jp.nextToken(); [EOL]     } [EOL]     final JsonDeserializer<Object> valueDes = _valueDeserializer; [EOL]     final TypeDeserializer typeDeser = _valueTypeDeserializer; [EOL]     for (; t == JsonToken.FIELD_NAME; t = jp.nextToken()) { [EOL]         String propName = jp.getCurrentName(); [EOL]         t = jp.nextToken(); [EOL]         if (_ignorableProperties != null && _ignorableProperties.contains(propName)) { [EOL]             jp.skipChildren(); [EOL]             continue; [EOL]         } [EOL]         SettableBeanProperty prop = creator.findCreatorProperty(propName); [EOL]         if (prop != null) { [EOL]             Object value = prop.deserialize(jp, ctxt); [EOL]             if (buffer.assignParameter(prop.getCreatorIndex(), value)) { [EOL]                 jp.nextToken(); [EOL]                 Map<Object, Object> result; [EOL]                 try { [EOL]                     result = (Map<Object, Object>) creator.build(ctxt, buffer); [EOL]                 } catch (Exception e) { [EOL]                     wrapAndThrow(e, _mapType.getRawClass()); [EOL]                     return null; [EOL]                 } [EOL]                 _readAndBind(jp, ctxt, result); [EOL]                 return result; [EOL]             } [EOL]             continue; [EOL]         } [EOL]         String fieldName = jp.getCurrentName(); [EOL]         Object key = _keyDeserializer.deserializeKey(fieldName, ctxt); [EOL]         Object value; [EOL]         if (t == JsonToken.VALUE_NULL) { [EOL]             value = null; [EOL]         } else if (typeDeser == null) { [EOL]             value = valueDes.deserialize(jp, ctxt); [EOL]         } else { [EOL]             value = valueDes.deserializeWithType(jp, ctxt, typeDeser); [EOL]         } [EOL]         buffer.bufferMapProperty(key, value); [EOL]     } [EOL]     try { [EOL]         return (Map<Object, Object>) creator.build(ctxt, buffer); [EOL]     } catch (Exception e) { [EOL]         wrapAndThrow(e, _mapType.getRawClass()); [EOL]         return null; [EOL]     } [EOL] } <line_num>: 440,501
protected void wrapAndThrow(Throwable t, Object ref) throws IOException { [EOL]     while (t instanceof InvocationTargetException && t.getCause() != null) { [EOL]         t = t.getCause(); [EOL]     } [EOL]     if (t instanceof Error) { [EOL]         throw (Error) t; [EOL]     } [EOL]     if (t instanceof IOException && !(t instanceof JsonMappingException)) { [EOL]         throw (IOException) t; [EOL]     } [EOL]     throw JsonMappingException.wrapWithPath(t, ref, null); [EOL] } <line_num>: 504,520
