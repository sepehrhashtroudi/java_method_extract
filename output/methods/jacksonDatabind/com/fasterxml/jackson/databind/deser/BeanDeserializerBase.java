protected BeanDeserializerBase(BeanDeserializerBuilder builder, BeanDescription beanDesc, BeanPropertyMap properties, Map<String, SettableBeanProperty> backRefs, HashSet<String> ignorableProps, boolean ignoreAllUnknown, boolean hasViews) { [EOL]     super(beanDesc.getType()); [EOL]     AnnotatedClass ac = beanDesc.getClassInfo(); [EOL]     _classAnnotations = ac.getAnnotations(); [EOL]     _beanType = beanDesc.getType(); [EOL]     _valueInstantiator = builder.getValueInstantiator(); [EOL]     _beanProperties = properties; [EOL]     _backRefs = backRefs; [EOL]     _ignorableProps = ignorableProps; [EOL]     _ignoreAllUnknown = ignoreAllUnknown; [EOL]     _anySetter = builder.getAnySetter(); [EOL]     List<ValueInjector> injectables = builder.getInjectables(); [EOL]     _injectables = (injectables == null || injectables.isEmpty()) ? null : injectables.toArray(new ValueInjector[injectables.size()]); [EOL]     _objectIdReader = builder.getObjectIdReader(); [EOL]     _nonStandardCreation = (_unwrappedPropertyHandler != null) || _valueInstantiator.canCreateUsingDelegate() || _valueInstantiator.canCreateFromObjectWith() || !_valueInstantiator.canCreateUsingDefault(); [EOL]     JsonFormat.Value format = beanDesc.findExpectedFormat(null); [EOL]     _serializationShape = (format == null) ? null : format.getShape(); [EOL]     _needViewProcesing = hasViews; [EOL]     _vanillaProcessing = !_nonStandardCreation && (_injectables == null) && !_needViewProcesing && (_objectIdReader != null); [EOL] } <line_num>: 200,240
protected BeanDeserializerBase(BeanDeserializerBase src) { [EOL]     this(src, src._ignoreAllUnknown); [EOL] } <line_num>: 242,245
protected BeanDeserializerBase(BeanDeserializerBase src, boolean ignoreAllUnknown) { [EOL]     super(src._beanType); [EOL]     _classAnnotations = src._classAnnotations; [EOL]     _beanType = src._beanType; [EOL]     _valueInstantiator = src._valueInstantiator; [EOL]     _delegateDeserializer = src._delegateDeserializer; [EOL]     _propertyBasedCreator = src._propertyBasedCreator; [EOL]     _beanProperties = src._beanProperties; [EOL]     _backRefs = src._backRefs; [EOL]     _ignorableProps = src._ignorableProps; [EOL]     _ignoreAllUnknown = ignoreAllUnknown; [EOL]     _anySetter = src._anySetter; [EOL]     _injectables = src._injectables; [EOL]     _objectIdReader = src._objectIdReader; [EOL]     _nonStandardCreation = src._nonStandardCreation; [EOL]     _unwrappedPropertyHandler = src._unwrappedPropertyHandler; [EOL]     _needViewProcesing = src._needViewProcesing; [EOL]     _serializationShape = src._serializationShape; [EOL]     _vanillaProcessing = src._vanillaProcessing; [EOL] } <line_num>: 247,272
protected BeanDeserializerBase(BeanDeserializerBase src, NameTransformer unwrapper) { [EOL]     super(src._beanType); [EOL]     _classAnnotations = src._classAnnotations; [EOL]     _beanType = src._beanType; [EOL]     _valueInstantiator = src._valueInstantiator; [EOL]     _delegateDeserializer = src._delegateDeserializer; [EOL]     _propertyBasedCreator = src._propertyBasedCreator; [EOL]     _backRefs = src._backRefs; [EOL]     _ignorableProps = src._ignorableProps; [EOL]     _ignoreAllUnknown = (unwrapper != null) || src._ignoreAllUnknown; [EOL]     _anySetter = src._anySetter; [EOL]     _injectables = src._injectables; [EOL]     _objectIdReader = src._objectIdReader; [EOL]     _nonStandardCreation = src._nonStandardCreation; [EOL]     _unwrappedPropertyHandler = src._unwrappedPropertyHandler; [EOL]     if (unwrapper != null) { [EOL]         if (_unwrappedPropertyHandler != null) { [EOL]             _unwrappedPropertyHandler.renameAll(unwrapper); [EOL]         } [EOL]         _beanProperties = src._beanProperties.renameAll(unwrapper); [EOL]     } else { [EOL]         _beanProperties = src._beanProperties; [EOL]     } [EOL]     _needViewProcesing = src._needViewProcesing; [EOL]     _serializationShape = src._serializationShape; [EOL]     _vanillaProcessing = false; [EOL] } <line_num>: 274,310
public BeanDeserializerBase(BeanDeserializerBase src, ObjectIdReader oir) { [EOL]     super(src._beanType); [EOL]     _classAnnotations = src._classAnnotations; [EOL]     _beanType = src._beanType; [EOL]     _valueInstantiator = src._valueInstantiator; [EOL]     _delegateDeserializer = src._delegateDeserializer; [EOL]     _propertyBasedCreator = src._propertyBasedCreator; [EOL]     _backRefs = src._backRefs; [EOL]     _ignorableProps = src._ignorableProps; [EOL]     _ignoreAllUnknown = src._ignoreAllUnknown; [EOL]     _anySetter = src._anySetter; [EOL]     _injectables = src._injectables; [EOL]     _nonStandardCreation = src._nonStandardCreation; [EOL]     _unwrappedPropertyHandler = src._unwrappedPropertyHandler; [EOL]     _needViewProcesing = src._needViewProcesing; [EOL]     _serializationShape = src._serializationShape; [EOL]     _vanillaProcessing = src._vanillaProcessing; [EOL]     _objectIdReader = oir; [EOL]     if (oir == null) { [EOL]         _beanProperties = src._beanProperties; [EOL]     } else { [EOL]         ObjectIdValueProperty idProp = new ObjectIdValueProperty(oir, true); [EOL]         _beanProperties = src._beanProperties.withProperty(idProp); [EOL]     } [EOL] } <line_num>: 312,349
public BeanDeserializerBase(BeanDeserializerBase src, HashSet<String> ignorableProps) { [EOL]     super(src._beanType); [EOL]     _classAnnotations = src._classAnnotations; [EOL]     _beanType = src._beanType; [EOL]     _valueInstantiator = src._valueInstantiator; [EOL]     _delegateDeserializer = src._delegateDeserializer; [EOL]     _propertyBasedCreator = src._propertyBasedCreator; [EOL]     _backRefs = src._backRefs; [EOL]     _ignorableProps = ignorableProps; [EOL]     _ignoreAllUnknown = src._ignoreAllUnknown; [EOL]     _anySetter = src._anySetter; [EOL]     _injectables = src._injectables; [EOL]     _nonStandardCreation = src._nonStandardCreation; [EOL]     _unwrappedPropertyHandler = src._unwrappedPropertyHandler; [EOL]     _needViewProcesing = src._needViewProcesing; [EOL]     _serializationShape = src._serializationShape; [EOL]     _vanillaProcessing = src._vanillaProcessing; [EOL]     _objectIdReader = src._objectIdReader; [EOL]     _beanProperties = src._beanProperties; [EOL] } <line_num>: 351,376
@Override [EOL] public abstract JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper); <line_num>: 378,379
public abstract BeanDeserializerBase withObjectIdReader(ObjectIdReader oir); <line_num>: 381,381
public abstract BeanDeserializerBase withIgnorableProperties(HashSet<String> ignorableProps); <line_num>: 383,383
protected abstract BeanDeserializerBase asArrayDeserializer(); <line_num>: 392,392
@Override [EOL] public void resolve(DeserializationContext ctxt) throws JsonMappingException { [EOL]     ExternalTypeHandler.Builder extTypes = null; [EOL]     if (_valueInstantiator.canCreateFromObjectWith()) { [EOL]         SettableBeanProperty[] creatorProps = _valueInstantiator.getFromObjectArguments(ctxt.getConfig()); [EOL]         _propertyBasedCreator = PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps); [EOL]         for (SettableBeanProperty prop : _propertyBasedCreator.properties()) { [EOL]             if (prop.hasValueTypeDeserializer()) { [EOL]                 TypeDeserializer typeDeser = prop.getValueTypeDeserializer(); [EOL]                 if (typeDeser.getTypeInclusion() == JsonTypeInfo.As.EXTERNAL_PROPERTY) { [EOL]                     if (extTypes == null) { [EOL]                         extTypes = new ExternalTypeHandler.Builder(); [EOL]                     } [EOL]                     extTypes.addExternal(prop, typeDeser); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     UnwrappedPropertyHandler unwrapped = null; [EOL]     for (SettableBeanProperty origProp : _beanProperties) { [EOL]         SettableBeanProperty prop = origProp; [EOL]         if (!prop.hasValueDeserializer()) { [EOL]             JsonDeserializer<?> deser = findConvertingDeserializer(ctxt, prop); [EOL]             if (deser == null) { [EOL]                 deser = findDeserializer(ctxt, prop.getType(), prop); [EOL]             } [EOL]             prop = prop.withValueDeserializer(deser); [EOL]         } else { [EOL]             JsonDeserializer<Object> deser = prop.getValueDeserializer(); [EOL]             if (deser instanceof ContextualDeserializer) { [EOL]                 JsonDeserializer<?> cd = ((ContextualDeserializer) deser).createContextual(ctxt, prop); [EOL]                 if (cd != deser) { [EOL]                     prop = prop.withValueDeserializer(cd); [EOL]                 } [EOL]             } [EOL]         } [EOL]         prop = _resolveManagedReferenceProperty(ctxt, prop); [EOL]         SettableBeanProperty u = _resolveUnwrappedProperty(ctxt, prop); [EOL]         if (u != null) { [EOL]             prop = u; [EOL]             if (unwrapped == null) { [EOL]                 unwrapped = new UnwrappedPropertyHandler(); [EOL]             } [EOL]             unwrapped.addProperty(prop); [EOL]             continue; [EOL]         } [EOL]         prop = _resolveInnerClassValuedProperty(ctxt, prop); [EOL]         if (prop != origProp) { [EOL]             _beanProperties.replace(prop); [EOL]         } [EOL]         if (prop.hasValueTypeDeserializer()) { [EOL]             TypeDeserializer typeDeser = prop.getValueTypeDeserializer(); [EOL]             if (typeDeser.getTypeInclusion() == JsonTypeInfo.As.EXTERNAL_PROPERTY) { [EOL]                 if (extTypes == null) { [EOL]                     extTypes = new ExternalTypeHandler.Builder(); [EOL]                 } [EOL]                 extTypes.addExternal(prop, typeDeser); [EOL]                 _beanProperties.remove(prop); [EOL]                 continue; [EOL]             } [EOL]         } [EOL]     } [EOL]     if (_anySetter != null && !_anySetter.hasValueDeserializer()) { [EOL]         _anySetter = _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty())); [EOL]     } [EOL]     if (_valueInstantiator.canCreateUsingDelegate()) { [EOL]         JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig()); [EOL]         if (delegateType == null) { [EOL]             throw new IllegalArgumentException("Invalid delegate-creator definition for " + _beanType + ": value instantiator (" + _valueInstantiator.getClass().getName() + ") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'"); [EOL]         } [EOL]         AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator(); [EOL]         BeanProperty.Std property = new BeanProperty.Std(null, delegateType, null, _classAnnotations, delegateCreator, false); [EOL]         _delegateDeserializer = findDeserializer(ctxt, delegateType, property); [EOL]     } [EOL]     if (extTypes != null) { [EOL]         _externalTypeIdHandler = extTypes.build(); [EOL]         _nonStandardCreation = true; [EOL]     } [EOL]     _unwrappedPropertyHandler = unwrapped; [EOL]     if (unwrapped != null) { [EOL]         _nonStandardCreation = true; [EOL]     } [EOL]     _vanillaProcessing = _vanillaProcessing && !_nonStandardCreation; [EOL] } <line_num>: 405,518
protected JsonDeserializer<Object> findConvertingDeserializer(DeserializationContext ctxt, SettableBeanProperty prop) throws JsonMappingException { [EOL]     final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector(); [EOL]     if (intr != null) { [EOL]         Object convDef = intr.findDeserializationConverter(prop.getMember()); [EOL]         if (convDef != null) { [EOL]             Converter<Object, Object> conv = ctxt.converterInstance(prop.getMember(), convDef); [EOL]             JavaType delegateType = conv.getInputType(ctxt.getTypeFactory()); [EOL]             JsonDeserializer<?> ser = ctxt.findContextualValueDeserializer(delegateType, prop); [EOL]             return new StdDelegatingDeserializer<Object>(conv, delegateType, ser); [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 527,542
@Override [EOL] public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException { [EOL]     ObjectIdReader oir = _objectIdReader; [EOL]     String[] ignorals = null; [EOL]     final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector(); [EOL]     final AnnotatedMember accessor = (property == null || intr == null) ? null : property.getMember(); [EOL]     if (property != null && intr != null) { [EOL]         ignorals = intr.findPropertiesToIgnore(accessor); [EOL]         ObjectIdInfo objectIdInfo = intr.findObjectIdInfo(accessor); [EOL]         if (objectIdInfo != null) { [EOL]             objectIdInfo = intr.findObjectReferenceInfo(accessor, objectIdInfo); [EOL]             Class<?> implClass = objectIdInfo.getGeneratorType(); [EOL]             JavaType idType; [EOL]             SettableBeanProperty idProp; [EOL]             ObjectIdGenerator<?> idGen; [EOL]             if (implClass == ObjectIdGenerators.PropertyGenerator.class) { [EOL]                 String propName = objectIdInfo.getPropertyName(); [EOL]                 idProp = findProperty(propName); [EOL]                 if (idProp == null) { [EOL]                     throw new IllegalArgumentException("Invalid Object Id definition for " + getBeanClass().getName() + ": can not find property with name '" + propName + "'"); [EOL]                 } [EOL]                 idType = idProp.getType(); [EOL]                 idGen = new PropertyBasedObjectIdGenerator(objectIdInfo.getScope()); [EOL]             } else { [EOL]                 JavaType type = ctxt.constructType(implClass); [EOL]                 idType = ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0]; [EOL]                 idProp = null; [EOL]                 idGen = ctxt.objectIdGeneratorInstance(accessor, objectIdInfo); [EOL]             } [EOL]             JsonDeserializer<?> deser = ctxt.findRootValueDeserializer(idType); [EOL]             oir = ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp); [EOL]         } [EOL]     } [EOL]     BeanDeserializerBase contextual = this; [EOL]     if (oir != null && oir != _objectIdReader) { [EOL]         contextual = contextual.withObjectIdReader(oir); [EOL]     } [EOL]     if (ignorals != null && ignorals.length != 0) { [EOL]         HashSet<String> newIgnored = ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals); [EOL]         contextual = contextual.withIgnorableProperties(newIgnored); [EOL]     } [EOL]     JsonFormat.Shape shape = null; [EOL]     if (accessor != null) { [EOL]         JsonFormat.Value format = intr.findFormat((Annotated) accessor); [EOL]         if (format != null) { [EOL]             shape = format.getShape(); [EOL]         } [EOL]     } [EOL]     if (shape == null) { [EOL]         shape = _serializationShape; [EOL]     } [EOL]     if (shape == JsonFormat.Shape.ARRAY) { [EOL]         contextual = contextual.asArrayDeserializer(); [EOL]     } [EOL]     return contextual; [EOL] } <line_num>: 551,621
protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt, SettableBeanProperty prop) { [EOL]     String refName = prop.getManagedReferenceName(); [EOL]     if (refName == null) { [EOL]         return prop; [EOL]     } [EOL]     JsonDeserializer<?> valueDeser = prop.getValueDeserializer(); [EOL]     SettableBeanProperty backProp = null; [EOL]     boolean isContainer = false; [EOL]     if (valueDeser instanceof BeanDeserializerBase) { [EOL]         backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName); [EOL]     } else if (valueDeser instanceof ContainerDeserializerBase<?>) { [EOL]         JsonDeserializer<?> contentDeser = ((ContainerDeserializerBase<?>) valueDeser).getContentDeserializer(); [EOL]         if (!(contentDeser instanceof BeanDeserializerBase)) { [EOL]             String deserName = (contentDeser == null) ? "NULL" : contentDeser.getClass().getName(); [EOL]             throw new IllegalArgumentException("Can not handle managed/back reference '" + refName + "': value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer " + " (instead it's of type " + deserName + ")"); [EOL]         } [EOL]         backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName); [EOL]         isContainer = true; [EOL]     } else if (valueDeser instanceof AbstractDeserializer) { [EOL]         backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName); [EOL]     } else { [EOL]         throw new IllegalArgumentException("Can not handle managed/back reference '" + refName + "': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but " + valueDeser.getClass().getName()); [EOL]     } [EOL]     if (backProp == null) { [EOL]         throw new IllegalArgumentException("Can not handle managed/back reference '" + refName + "': no back reference property found from type " + prop.getType()); [EOL]     } [EOL]     JavaType referredType = _beanType; [EOL]     JavaType backRefType = backProp.getType(); [EOL]     if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) { [EOL]         throw new IllegalArgumentException("Can not handle managed/back reference '" + refName + "': back reference type (" + backRefType.getRawClass().getName() + ") not compatible with managed type (" + referredType.getRawClass().getName() + ")"); [EOL]     } [EOL]     return new ManagedReferenceProperty(prop, refName, backProp, _classAnnotations, isContainer); [EOL] } <line_num>: 628,671
protected SettableBeanProperty _resolveUnwrappedProperty(DeserializationContext ctxt, SettableBeanProperty prop) { [EOL]     AnnotatedMember am = prop.getMember(); [EOL]     if (am != null) { [EOL]         NameTransformer unwrapper = ctxt.getAnnotationIntrospector().findUnwrappingNameTransformer(am); [EOL]         if (unwrapper != null) { [EOL]             JsonDeserializer<Object> orig = prop.getValueDeserializer(); [EOL]             JsonDeserializer<Object> unwrapping = orig.unwrappingDeserializer(unwrapper); [EOL]             if (unwrapping != orig && unwrapping != null) { [EOL]                 return prop.withValueDeserializer(unwrapping); [EOL]             } [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 677,693
protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationContext ctxt, SettableBeanProperty prop) { [EOL]     JsonDeserializer<Object> deser = prop.getValueDeserializer(); [EOL]     if (deser instanceof BeanDeserializerBase) { [EOL]         BeanDeserializerBase bd = (BeanDeserializerBase) deser; [EOL]         ValueInstantiator vi = bd.getValueInstantiator(); [EOL]         if (!vi.canCreateUsingDefault()) { [EOL]             Class<?> valueClass = prop.getType().getRawClass(); [EOL]             Class<?> enclosing = ClassUtil.getOuterClass(valueClass); [EOL]             if (enclosing != null && enclosing == _beanType.getRawClass()) { [EOL]                 for (Constructor<?> ctor : valueClass.getConstructors()) { [EOL]                     Class<?>[] paramTypes = ctor.getParameterTypes(); [EOL]                     if (paramTypes.length == 1 && paramTypes[0] == enclosing) { [EOL]                         if (ctxt.getConfig().canOverrideAccessModifiers()) { [EOL]                             ClassUtil.checkAndFixAccess(ctor); [EOL]                         } [EOL]                         return new InnerClassProperty(prop, ctor); [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return prop; [EOL] } <line_num>: 699,728
@Override [EOL] public boolean isCachable() { [EOL]     return true; [EOL] } <line_num>: 736,737
@Override [EOL] public ObjectIdReader getObjectIdReader() { [EOL]     return _objectIdReader; [EOL] } <line_num>: 744,747
public boolean hasProperty(String propertyName) { [EOL]     return _beanProperties.find(propertyName) != null; [EOL] } <line_num>: 749,751
public boolean hasViews() { [EOL]     return _needViewProcesing; [EOL] } <line_num>: 753,755
public int getPropertyCount() { [EOL]     return _beanProperties.size(); [EOL] } <line_num>: 760,762
@Override [EOL] public Collection<Object> getKnownPropertyNames() { [EOL]     ArrayList<Object> names = new ArrayList<Object>(); [EOL]     for (SettableBeanProperty prop : _beanProperties) { [EOL]         names.add(prop.getName()); [EOL]     } [EOL]     return names; [EOL] } <line_num>: 764,771
public final Class<?> getBeanClass() { [EOL]     return _beanType.getRawClass(); [EOL] } <line_num>: 773,773
@Override [EOL] public JavaType getValueType() { [EOL]     return _beanType; [EOL] } <line_num>: 775,775
public Iterator<SettableBeanProperty> properties() { [EOL]     if (_beanProperties == null) { [EOL]         throw new IllegalStateException("Can only call after BeanDeserializer has been resolved"); [EOL]     } [EOL]     return _beanProperties.iterator(); [EOL] } <line_num>: 784,790
public Iterator<SettableBeanProperty> creatorProperties() { [EOL]     if (_propertyBasedCreator == null) { [EOL]         return Collections.<SettableBeanProperty>emptyList().iterator(); [EOL]     } [EOL]     return _propertyBasedCreator.properties().iterator(); [EOL] } <line_num>: 799,805
public SettableBeanProperty findProperty(String propertyName) { [EOL]     SettableBeanProperty prop = (_beanProperties == null) ? null : _beanProperties.find(propertyName); [EOL]     if (prop == null && _propertyBasedCreator != null) { [EOL]         prop = _propertyBasedCreator.findCreatorProperty(propertyName); [EOL]     } [EOL]     return prop; [EOL] } <line_num>: 814,822
public SettableBeanProperty findBackReference(String logicalName) { [EOL]     if (_backRefs == null) { [EOL]         return null; [EOL]     } [EOL]     return _backRefs.get(logicalName); [EOL] } <line_num>: 828,834
public ValueInstantiator getValueInstantiator() { [EOL]     return _valueInstantiator; [EOL] } <line_num>: 836,838
public void replaceProperty(SettableBeanProperty original, SettableBeanProperty replacement) { [EOL]     _beanProperties.replace(replacement); [EOL] } <line_num>: 858,862
public abstract Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException; <line_num>: 874,875
@Override [EOL] public final Object deserializeWithType(JsonParser jp, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException, JsonProcessingException { [EOL]     if (_objectIdReader != null) { [EOL]         JsonToken t = jp.getCurrentToken(); [EOL]         if (t != null && t.isScalarValue()) { [EOL]             return deserializeFromObjectId(jp, ctxt); [EOL]         } [EOL]     } [EOL]     return typeDeserializer.deserializeTypedFromObject(jp, ctxt); [EOL] } <line_num>: 877,894
@SuppressWarnings("resource") [EOL] protected Object deserializeWithObjectId(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     final String idPropName = _objectIdReader.propertyName; [EOL]     if (idPropName.equals(jp.getCurrentName())) { [EOL]         return deserializeFromObject(jp, ctxt); [EOL]     } [EOL]     TokenBuffer tmpBuffer = new TokenBuffer(jp.getCodec()); [EOL]     TokenBuffer mergedBuffer = null; [EOL]     for (; jp.getCurrentToken() != JsonToken.END_OBJECT; jp.nextToken()) { [EOL]         String propName = jp.getCurrentName(); [EOL]         if (mergedBuffer == null) { [EOL]             if (idPropName.equals(propName)) { [EOL]                 mergedBuffer = new TokenBuffer(jp.getCodec()); [EOL]                 mergedBuffer.writeFieldName(propName); [EOL]                 jp.nextToken(); [EOL]                 mergedBuffer.copyCurrentStructure(jp); [EOL]                 mergedBuffer.append(tmpBuffer); [EOL]                 tmpBuffer = null; [EOL]             } else { [EOL]                 tmpBuffer.writeFieldName(propName); [EOL]                 jp.nextToken(); [EOL]                 tmpBuffer.copyCurrentStructure(jp); [EOL]             } [EOL]         } else { [EOL]             mergedBuffer.writeFieldName(propName); [EOL]             jp.nextToken(); [EOL]             mergedBuffer.copyCurrentStructure(jp); [EOL]         } [EOL]     } [EOL]     TokenBuffer buffer = (mergedBuffer == null) ? tmpBuffer : mergedBuffer; [EOL]     buffer.writeEndObject(); [EOL]     JsonParser mergedParser = buffer.asParser(); [EOL]     mergedParser.nextToken(); [EOL]     return deserializeFromObject(mergedParser, ctxt); [EOL] } <line_num>: 905,947
protected Object deserializeFromObjectId(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     Object id = _objectIdReader.deserializer.deserialize(jp, ctxt); [EOL]     ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator); [EOL]     Object pojo = roid.item; [EOL]     if (pojo == null) { [EOL]         throw new IllegalStateException("Could not resolve Object Id [" + id + "] (for " + _beanType + ") -- unresolved forward-reference?"); [EOL]     } [EOL]     return pojo; [EOL] } <line_num>: 953,965
protected Object deserializeFromObjectUsingNonDefault(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     if (_delegateDeserializer != null) { [EOL]         return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt)); [EOL]     } [EOL]     if (_propertyBasedCreator != null) { [EOL]         return _deserializeUsingPropertyBased(jp, ctxt); [EOL]     } [EOL]     if (_beanType.isAbstract()) { [EOL]         throw JsonMappingException.from(jp, "Can not instantiate abstract type " + _beanType + " (need to add/enable type information?)"); [EOL]     } [EOL]     throw JsonMappingException.from(jp, "No suitable constructor found for type " + _beanType + ": can not instantiate from JSON object (need to add/enable type information?)"); [EOL] } <line_num>: 967,985
protected abstract Object _deserializeUsingPropertyBased(final JsonParser jp, final DeserializationContext ctxt) throws IOException, JsonProcessingException; <line_num>: 987,989
@SuppressWarnings("incomplete-switch") [EOL] public Object deserializeFromNumber(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     if (_objectIdReader != null) { [EOL]         return deserializeFromObjectId(jp, ctxt); [EOL]     } [EOL]     switch(jp.getNumberType()) { [EOL]         case INT: [EOL]             if (_delegateDeserializer != null) { [EOL]                 if (!_valueInstantiator.canCreateFromInt()) { [EOL]                     Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt)); [EOL]                     if (_injectables != null) { [EOL]                         injectValues(ctxt, bean); [EOL]                     } [EOL]                     return bean; [EOL]                 } [EOL]             } [EOL]             return _valueInstantiator.createFromInt(ctxt, jp.getIntValue()); [EOL]         case LONG: [EOL]             if (_delegateDeserializer != null) { [EOL]                 if (!_valueInstantiator.canCreateFromInt()) { [EOL]                     Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt)); [EOL]                     if (_injectables != null) { [EOL]                         injectValues(ctxt, bean); [EOL]                     } [EOL]                     return bean; [EOL]                 } [EOL]             } [EOL]             return _valueInstantiator.createFromLong(ctxt, jp.getLongValue()); [EOL]     } [EOL]     if (_delegateDeserializer != null) { [EOL]         Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt)); [EOL]         if (_injectables != null) { [EOL]             injectValues(ctxt, bean); [EOL]         } [EOL]         return bean; [EOL]     } [EOL]     throw ctxt.instantiationException(getBeanClass(), "no suitable creator method found to deserialize from JSON integer number"); [EOL] } <line_num>: 991,1033
public Object deserializeFromString(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     if (_objectIdReader != null) { [EOL]         return deserializeFromObjectId(jp, ctxt); [EOL]     } [EOL]     if (_delegateDeserializer != null) { [EOL]         if (!_valueInstantiator.canCreateFromString()) { [EOL]             Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt)); [EOL]             if (_injectables != null) { [EOL]                 injectValues(ctxt, bean); [EOL]             } [EOL]             return bean; [EOL]         } [EOL]     } [EOL]     return _valueInstantiator.createFromString(ctxt, jp.getText()); [EOL] } <line_num>: 1035,1056
@SuppressWarnings("incomplete-switch") [EOL] public Object deserializeFromDouble(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     switch(jp.getNumberType()) { [EOL]         case FLOAT: [EOL]         case DOUBLE: [EOL]             if (_delegateDeserializer != null) { [EOL]                 if (!_valueInstantiator.canCreateFromDouble()) { [EOL]                     Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt)); [EOL]                     if (_injectables != null) { [EOL]                         injectValues(ctxt, bean); [EOL]                     } [EOL]                     return bean; [EOL]                 } [EOL]             } [EOL]             return _valueInstantiator.createFromDouble(ctxt, jp.getDoubleValue()); [EOL]     } [EOL]     if (_delegateDeserializer != null) { [EOL]         return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt)); [EOL]     } [EOL]     throw ctxt.instantiationException(getBeanClass(), "no suitable creator method found to deserialize from JSON floating-point number"); [EOL] } <line_num>: 1062,1085
public Object deserializeFromBoolean(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     if (_delegateDeserializer != null) { [EOL]         if (!_valueInstantiator.canCreateFromBoolean()) { [EOL]             Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt)); [EOL]             if (_injectables != null) { [EOL]                 injectValues(ctxt, bean); [EOL]             } [EOL]             return bean; [EOL]         } [EOL]     } [EOL]     boolean value = (jp.getCurrentToken() == JsonToken.VALUE_TRUE); [EOL]     return _valueInstantiator.createFromBoolean(ctxt, value); [EOL] } <line_num>: 1090,1104
public Object deserializeFromArray(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     if (_delegateDeserializer != null) { [EOL]         try { [EOL]             Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt)); [EOL]             if (_injectables != null) { [EOL]                 injectValues(ctxt, bean); [EOL]             } [EOL]             return bean; [EOL]         } catch (Exception e) { [EOL]             wrapInstantiationProblem(e, ctxt); [EOL]         } [EOL]     } [EOL]     throw ctxt.mappingException(getBeanClass()); [EOL] } <line_num>: 1106,1121
protected void injectValues(DeserializationContext ctxt, Object bean) throws IOException, JsonProcessingException { [EOL]     for (ValueInjector injector : _injectables) { [EOL]         injector.inject(ctxt, bean); [EOL]     } [EOL] } <line_num>: 1129,1135
@Override [EOL] protected void handleUnknownProperty(JsonParser jp, DeserializationContext ctxt, Object beanOrClass, String propName) throws IOException, JsonProcessingException { [EOL]     if (_ignoreAllUnknown || (_ignorableProps != null && _ignorableProps.contains(propName))) { [EOL]         jp.skipChildren(); [EOL]         return; [EOL]     } [EOL]     super.handleUnknownProperty(jp, ctxt, beanOrClass, propName); [EOL] } <line_num>: 1141,1160
protected Object handleUnknownProperties(DeserializationContext ctxt, Object bean, TokenBuffer unknownTokens) throws IOException, JsonProcessingException { [EOL]     unknownTokens.writeEndObject(); [EOL]     JsonParser bufferParser = unknownTokens.asParser(); [EOL]     while (bufferParser.nextToken() != JsonToken.END_OBJECT) { [EOL]         String propName = bufferParser.getCurrentName(); [EOL]         bufferParser.nextToken(); [EOL]         handleUnknownProperty(bufferParser, ctxt, bean, propName); [EOL]     } [EOL]     return bean; [EOL] } <line_num>: 1167,1182
protected void handleUnknownVanilla(JsonParser jp, DeserializationContext ctxt, Object bean, String propName) throws IOException, JsonProcessingException { [EOL]     if (_ignorableProps != null && _ignorableProps.contains(propName)) { [EOL]         jp.skipChildren(); [EOL]     } else if (_anySetter != null) { [EOL]         try { [EOL]             _anySetter.deserializeAndSet(jp, ctxt, bean, propName); [EOL]         } catch (Exception e) { [EOL]             wrapAndThrow(e, bean, propName, ctxt); [EOL]         } [EOL]     } else { [EOL]         handleUnknownProperty(jp, ctxt, bean, propName); [EOL]     } [EOL] } <line_num>: 1188,1205
protected Object handlePolymorphic(JsonParser jp, DeserializationContext ctxt, Object bean, TokenBuffer unknownTokens) throws IOException, JsonProcessingException { [EOL]     JsonDeserializer<Object> subDeser = _findSubclassDeserializer(ctxt, bean, unknownTokens); [EOL]     if (subDeser != null) { [EOL]         if (unknownTokens != null) { [EOL]             unknownTokens.writeEndObject(); [EOL]             JsonParser p2 = unknownTokens.asParser(); [EOL]             p2.nextToken(); [EOL]             bean = subDeser.deserialize(p2, ctxt, bean); [EOL]         } [EOL]         if (jp != null) { [EOL]             bean = subDeser.deserialize(jp, ctxt, bean); [EOL]         } [EOL]         return bean; [EOL]     } [EOL]     if (unknownTokens != null) { [EOL]         bean = handleUnknownProperties(ctxt, bean, unknownTokens); [EOL]     } [EOL]     if (jp != null) { [EOL]         bean = deserialize(jp, ctxt, bean); [EOL]     } [EOL]     return bean; [EOL] } <line_num>: 1218,1247
protected JsonDeserializer<Object> _findSubclassDeserializer(DeserializationContext ctxt, Object bean, TokenBuffer unknownTokens) throws IOException, JsonProcessingException { [EOL]     JsonDeserializer<Object> subDeser; [EOL]     synchronized (this) { [EOL]         subDeser = (_subDeserializers == null) ? null : _subDeserializers.get(new ClassKey(bean.getClass())); [EOL]     } [EOL]     if (subDeser != null) { [EOL]         return subDeser; [EOL]     } [EOL]     JavaType type = ctxt.constructType(bean.getClass()); [EOL]     subDeser = ctxt.findRootValueDeserializer(type); [EOL]     if (subDeser != null) { [EOL]         synchronized (this) { [EOL]             if (_subDeserializers == null) { [EOL]                 _subDeserializers = new HashMap<ClassKey, JsonDeserializer<Object>>(); [EOL]                 ; [EOL]             } [EOL]             _subDeserializers.put(new ClassKey(bean.getClass()), subDeser); [EOL]         } [EOL]     } [EOL]     return subDeser; [EOL] } <line_num>: 1253,1285
public void wrapAndThrow(Throwable t, Object bean, String fieldName, DeserializationContext ctxt) throws IOException { [EOL]     while (t instanceof InvocationTargetException && t.getCause() != null) { [EOL]         t = t.getCause(); [EOL]     } [EOL]     if (t instanceof Error) { [EOL]         throw (Error) t; [EOL]     } [EOL]     boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS); [EOL]     if (t instanceof IOException) { [EOL]         if (!wrap || !(t instanceof JsonMappingException)) { [EOL]             throw (IOException) t; [EOL]         } [EOL]     } else if (!wrap) { [EOL]         if (t instanceof RuntimeException) { [EOL]             throw (RuntimeException) t; [EOL]         } [EOL]     } [EOL]     throw JsonMappingException.wrapWithPath(t, bean, fieldName); [EOL] } <line_num>: 1305,1333
public void wrapAndThrow(Throwable t, Object bean, int index, DeserializationContext ctxt) throws IOException { [EOL]     while (t instanceof InvocationTargetException && t.getCause() != null) { [EOL]         t = t.getCause(); [EOL]     } [EOL]     if (t instanceof Error) { [EOL]         throw (Error) t; [EOL]     } [EOL]     boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS); [EOL]     if (t instanceof IOException) { [EOL]         if (!wrap || !(t instanceof JsonMappingException)) { [EOL]             throw (IOException) t; [EOL]         } [EOL]     } else if (!wrap) { [EOL]         if (t instanceof RuntimeException) { [EOL]             throw (RuntimeException) t; [EOL]         } [EOL]     } [EOL]     throw JsonMappingException.wrapWithPath(t, bean, index); [EOL] } <line_num>: 1335,1358
protected void wrapInstantiationProblem(Throwable t, DeserializationContext ctxt) throws IOException { [EOL]     while (t instanceof InvocationTargetException && t.getCause() != null) { [EOL]         t = t.getCause(); [EOL]     } [EOL]     if (t instanceof Error) { [EOL]         throw (Error) t; [EOL]     } [EOL]     boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS); [EOL]     if (t instanceof IOException) { [EOL]         throw (IOException) t; [EOL]     } else if (!wrap) { [EOL]         if (t instanceof RuntimeException) { [EOL]             throw (RuntimeException) t; [EOL]         } [EOL]     } [EOL]     throw ctxt.instantiationException(_beanType.getRawClass(), t); [EOL] } <line_num>: 1360,1380
