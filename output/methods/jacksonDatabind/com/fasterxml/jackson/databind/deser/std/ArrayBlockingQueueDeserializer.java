public ArrayBlockingQueueDeserializer(JavaType collectionType, JsonDeserializer<Object> valueDeser, TypeDeserializer valueTypeDeser, ValueInstantiator valueInstantiator, JsonDeserializer<Object> delegateDeser) { [EOL]     super(collectionType, valueDeser, valueTypeDeser, valueInstantiator, delegateDeser); [EOL] } <line_num>: 35,41
protected ArrayBlockingQueueDeserializer(ArrayBlockingQueueDeserializer src) { [EOL]     super(src); [EOL] } <line_num>: 47,49
@Override [EOL] @SuppressWarnings("unchecked") [EOL] protected ArrayBlockingQueueDeserializer withResolved(JsonDeserializer<?> dd, JsonDeserializer<?> vd, TypeDeserializer vtd) { [EOL]     if ((dd == _delegateDeserializer) && (vd == _valueDeserializer) && (vtd == _valueTypeDeserializer)) { [EOL]         return this; [EOL]     } [EOL]     return new ArrayBlockingQueueDeserializer(_collectionType, (JsonDeserializer<Object>) vd, vtd, _valueInstantiator, (JsonDeserializer<Object>) dd); [EOL] } <line_num>: 54,66
@SuppressWarnings("unchecked") [EOL] @Override [EOL] public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     if (_delegateDeserializer != null) { [EOL]         return (Collection<Object>) _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(jp, ctxt)); [EOL]     } [EOL]     if (jp.getCurrentToken() == JsonToken.VALUE_STRING) { [EOL]         String str = jp.getText(); [EOL]         if (str.length() == 0) { [EOL]             return (Collection<Object>) _valueInstantiator.createFromString(ctxt, str); [EOL]         } [EOL]     } [EOL]     return deserialize(jp, ctxt, null); [EOL] } <line_num>: 74,90
@Override [EOL] public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt, Collection<Object> result0) throws IOException, JsonProcessingException { [EOL]     if (!jp.isExpectedStartArrayToken()) { [EOL]         return handleNonArray(jp, ctxt, new ArrayBlockingQueue<Object>(1)); [EOL]     } [EOL]     ArrayList<Object> tmp = new ArrayList<Object>(); [EOL]     JsonDeserializer<Object> valueDes = _valueDeserializer; [EOL]     JsonToken t; [EOL]     final TypeDeserializer typeDeser = _valueTypeDeserializer; [EOL]     while ((t = jp.nextToken()) != JsonToken.END_ARRAY) { [EOL]         Object value; [EOL]         if (t == JsonToken.VALUE_NULL) { [EOL]             value = null; [EOL]         } else if (typeDeser == null) { [EOL]             value = valueDes.deserialize(jp, ctxt); [EOL]         } else { [EOL]             value = valueDes.deserializeWithType(jp, ctxt, typeDeser); [EOL]         } [EOL]         tmp.add(value); [EOL]     } [EOL]     if (result0 != null) { [EOL]         result0.addAll(tmp); [EOL]         return result0; [EOL]     } [EOL]     return new ArrayBlockingQueue<Object>(tmp.size(), false, tmp); [EOL] } <line_num>: 92,124
@Override [EOL] public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException, JsonProcessingException { [EOL]     return typeDeserializer.deserializeTypedFromArray(jp, ctxt); [EOL] } <line_num>: 126,133
