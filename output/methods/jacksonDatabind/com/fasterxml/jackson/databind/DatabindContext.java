public abstract MapperConfig<?> getConfig(); <line_num>: 37,37
public abstract AnnotationIntrospector getAnnotationIntrospector(); <line_num>: 45,45
public final boolean isEnabled(MapperFeature feature) { [EOL]     return getConfig().isEnabled(feature); [EOL] } <line_num>: 61,63
public final boolean canOverrideAccessModifiers() { [EOL]     return getConfig().canOverrideAccessModifiers(); [EOL] } <line_num>: 71,73
public abstract Class<?> getActiveView(); <line_num>: 79,79
public JavaType constructType(Type type) { [EOL]     return getTypeFactory().constructType(type); [EOL] } <line_num>: 91,93
public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass) { [EOL]     return getConfig().constructSpecializedType(baseType, subclass); [EOL] } <line_num>: 99,101
public abstract TypeFactory getTypeFactory(); <line_num>: 103,103
public ObjectIdGenerator<?> objectIdGeneratorInstance(Annotated annotated, ObjectIdInfo objectIdInfo) throws JsonMappingException { [EOL]     Class<?> implClass = objectIdInfo.getGeneratorType(); [EOL]     final MapperConfig<?> config = getConfig(); [EOL]     HandlerInstantiator hi = config.getHandlerInstantiator(); [EOL]     ObjectIdGenerator<?> gen = (hi == null) ? null : hi.objectIdGeneratorInstance(config, annotated, implClass); [EOL]     if (gen == null) { [EOL]         gen = (ObjectIdGenerator<?>) ClassUtil.createInstance(implClass, config.canOverrideAccessModifiers()); [EOL]     } [EOL]     return gen.forScope(objectIdInfo.getScope()); [EOL] } <line_num>: 111,124
@SuppressWarnings("unchecked") [EOL] public Converter<Object, Object> converterInstance(Annotated annotated, Object converterDef) throws JsonMappingException { [EOL]     if (converterDef == null) { [EOL]         return null; [EOL]     } [EOL]     if (converterDef instanceof Converter<?, ?>) { [EOL]         return (Converter<Object, Object>) converterDef; [EOL]     } [EOL]     if (!(converterDef instanceof Class)) { [EOL]         throw new IllegalStateException("AnnotationIntrospector returned Converter definition of type " + converterDef.getClass().getName() + "; expected type Converter or Class<Converter> instead"); [EOL]     } [EOL]     Class<?> converterClass = (Class<?>) converterDef; [EOL]     if (converterClass == Converter.None.class || converterClass == NoClass.class) { [EOL]         return null; [EOL]     } [EOL]     if (!Converter.class.isAssignableFrom(converterClass)) { [EOL]         throw new IllegalStateException("AnnotationIntrospector returned Class " + converterClass.getName() + "; expected Class<Converter>"); [EOL]     } [EOL]     final MapperConfig<?> config = getConfig(); [EOL]     HandlerInstantiator hi = config.getHandlerInstantiator(); [EOL]     Converter<?, ?> conv = (hi == null) ? null : hi.converterInstance(config, annotated, converterClass); [EOL]     if (conv == null) { [EOL]         conv = (Converter<?, ?>) ClassUtil.createInstance(converterClass, config.canOverrideAccessModifiers()); [EOL]     } [EOL]     return (Converter<Object, Object>) conv; [EOL] } <line_num>: 132,164
