protected DeserializationContext(DeserializerFactory df) { [EOL]     this(df, null); [EOL] } <line_num>: 129,131
protected DeserializationContext(DeserializerFactory df, DeserializerCache cache) { [EOL]     if (df == null) { [EOL]         throw new IllegalArgumentException("Can not pass null DeserializerFactory"); [EOL]     } [EOL]     _factory = df; [EOL]     _cache = (cache == null) ? new DeserializerCache() : cache; [EOL]     _featureFlags = 0; [EOL]     _config = null; [EOL]     _injectableValues = null; [EOL]     _view = null; [EOL] } <line_num>: 133,146
protected DeserializationContext(DeserializationContext src, DeserializerFactory factory) { [EOL]     _cache = src._cache; [EOL]     _factory = factory; [EOL]     _config = src._config; [EOL]     _featureFlags = src._featureFlags; [EOL]     _view = src._view; [EOL]     _parser = src._parser; [EOL]     _injectableValues = src._injectableValues; [EOL] } <line_num>: 148,159
protected DeserializationContext(DeserializationContext src, DeserializationConfig config, JsonParser jp, InjectableValues injectableValues) { [EOL]     _cache = src._cache; [EOL]     _factory = src._factory; [EOL]     _config = config; [EOL]     _featureFlags = config.getDeserializationFeatures(); [EOL]     _view = config.getActiveView(); [EOL]     _parser = jp; [EOL]     _injectableValues = injectableValues; [EOL] } <line_num>: 161,173
@Override [EOL] public DeserializationConfig getConfig() { [EOL]     return _config; [EOL] } <line_num>: 181,182
@Override [EOL] public final Class<?> getActiveView() { [EOL]     return _view; [EOL] } <line_num>: 184,185
@Override [EOL] public final AnnotationIntrospector getAnnotationIntrospector() { [EOL]     return _config.getAnnotationIntrospector(); [EOL] } <line_num>: 187,190
@Override [EOL] public final TypeFactory getTypeFactory() { [EOL]     return _config.getTypeFactory(); [EOL] } <line_num>: 192,195
public DeserializerFactory getFactory() { [EOL]     return _factory; [EOL] } <line_num>: 206,208
public final boolean isEnabled(DeserializationFeature feat) { [EOL]     return (_featureFlags & feat.getMask()) != 0; [EOL] } <line_num>: 214,219
public final JsonParser getParser() { [EOL]     return _parser; [EOL] } <line_num>: 229,229
public final Object findInjectableValue(Object valueId, BeanProperty forProperty, Object beanInstance) { [EOL]     if (_injectableValues == null) { [EOL]         throw new IllegalStateException("No 'injectableValues' configured, can not inject value with id [" + valueId + "]"); [EOL]     } [EOL]     return _injectableValues.findInjectableValue(valueId, this, forProperty, beanInstance); [EOL] } <line_num>: 231,238
public final Base64Variant getBase64Variant() { [EOL]     return _config.getBase64Variant(); [EOL] } <line_num>: 248,250
public final JsonNodeFactory getNodeFactory() { [EOL]     return _config.getNodeFactory(); [EOL] } <line_num>: 258,260
public Locale getLocale() { [EOL]     return _config.getLocale(); [EOL] } <line_num>: 268,270
public TimeZone getTimeZone() { [EOL]     return _config.getTimeZone(); [EOL] } <line_num>: 278,280
public boolean hasValueDeserializerFor(JavaType type) { [EOL]     return _cache.hasValueDeserializerFor(this, _factory, type); [EOL] } <line_num>: 292,294
@SuppressWarnings("unchecked") [EOL] public final JsonDeserializer<Object> findContextualValueDeserializer(JavaType type, BeanProperty property) throws JsonMappingException { [EOL]     JsonDeserializer<Object> deser = _cache.findValueDeserializer(this, _factory, type); [EOL]     if (deser != null) { [EOL]         if (deser instanceof ContextualDeserializer) { [EOL]             deser = (JsonDeserializer<Object>) ((ContextualDeserializer) deser).createContextual(this, property); [EOL]         } [EOL]     } [EOL]     return deser; [EOL] } <line_num>: 301,313
@SuppressWarnings("unchecked") [EOL] public final JsonDeserializer<Object> findRootValueDeserializer(JavaType type) throws JsonMappingException { [EOL]     JsonDeserializer<Object> deser = _cache.findValueDeserializer(this, _factory, type); [EOL]     if (deser == null) { [EOL]         return null; [EOL]     } [EOL]     if (deser instanceof ContextualDeserializer) { [EOL]         deser = (JsonDeserializer<Object>) ((ContextualDeserializer) deser).createContextual(this, null); [EOL]     } [EOL]     TypeDeserializer typeDeser = _factory.findTypeDeserializer(_config, type); [EOL]     if (typeDeser != null) { [EOL]         typeDeser = typeDeser.forProperty(null); [EOL]         return new TypeWrappedDeserializer(typeDeser, deser); [EOL]     } [EOL]     return deser; [EOL] } <line_num>: 318,337
public final KeyDeserializer findKeyDeserializer(JavaType keyType, BeanProperty property) throws JsonMappingException { [EOL]     KeyDeserializer kd = _cache.findKeyDeserializer(this, _factory, keyType); [EOL]     if (kd instanceof ContextualKeyDeserializer) { [EOL]         kd = ((ContextualKeyDeserializer) kd).createContextual(this, property); [EOL]     } [EOL]     return kd; [EOL] } <line_num>: 345,354
public abstract ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> generator); <line_num>: 366,367
public final JavaType constructType(Class<?> cls) { [EOL]     return _config.constructType(cls); [EOL] } <line_num>: 381,383
public Class<?> findClass(String className) throws ClassNotFoundException { [EOL]     return ClassUtil.findClass(className); [EOL] } <line_num>: 391,395
public abstract JsonDeserializer<Object> deserializerInstance(Annotated annotated, Object deserDef) throws JsonMappingException; <line_num>: 403,405
public abstract KeyDeserializer keyDeserializerInstance(Annotated annotated, Object deserDef) throws JsonMappingException; <line_num>: 407,409
public final ObjectBuffer leaseObjectBuffer() { [EOL]     ObjectBuffer buf = _objectBuffer; [EOL]     if (buf == null) { [EOL]         buf = new ObjectBuffer(); [EOL]     } else { [EOL]         _objectBuffer = null; [EOL]     } [EOL]     return buf; [EOL] } <line_num>: 423,432
public final void returnObjectBuffer(ObjectBuffer buf) { [EOL]     if (_objectBuffer == null || buf.initialCapacity() >= _objectBuffer.initialCapacity()) { [EOL]         _objectBuffer = buf; [EOL]     } [EOL] } <line_num>: 440,449
public final ArrayBuilders getArrayBuilders() { [EOL]     if (_arrayBuilders == null) { [EOL]         _arrayBuilders = new ArrayBuilders(); [EOL]     } [EOL]     return _arrayBuilders; [EOL] } <line_num>: 455,461
public Date parseDate(String dateStr) throws IllegalArgumentException { [EOL]     try { [EOL]         return getDateFormat().parse(dateStr); [EOL]     } catch (ParseException e) { [EOL]         throw new IllegalArgumentException("Failed to parse Date value '" + dateStr + "': " + e.getMessage()); [EOL]     } [EOL] } <line_num>: 479,487
public Calendar constructCalendar(Date d) { [EOL]     Calendar c = Calendar.getInstance(getTimeZone()); [EOL]     c.setTime(d); [EOL]     return c; [EOL] } <line_num>: 493,501
public boolean handleUnknownProperty(JsonParser jp, JsonDeserializer<?> deser, Object instanceOrClass, String propName) throws IOException, JsonProcessingException { [EOL]     LinkedNode<DeserializationProblemHandler> h = _config.getProblemHandlers(); [EOL]     if (h != null) { [EOL]         while (h != null) { [EOL]             if (h.value().handleUnknownProperty(this, jp, deser, instanceOrClass, propName)) { [EOL]                 return true; [EOL]             } [EOL]             h = h.next(); [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 520,535
public void reportUnknownProperty(Object instanceOrClass, String fieldName, JsonDeserializer<?> deser) throws JsonMappingException { [EOL]     if (!isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)) { [EOL]         return; [EOL]     } [EOL]     Collection<Object> propIds = (deser == null) ? null : deser.getKnownPropertyNames(); [EOL]     throw UnrecognizedPropertyException.from(_parser, instanceOrClass, fieldName, propIds); [EOL] } <line_num>: 546,557
public JsonMappingException mappingException(Class<?> targetClass) { [EOL]     return mappingException(targetClass, _parser.getCurrentToken()); [EOL] } <line_num>: 568,570
public JsonMappingException mappingException(Class<?> targetClass, JsonToken token) { [EOL]     String clsName = _calcName(targetClass); [EOL]     return JsonMappingException.from(_parser, "Can not deserialize instance of " + clsName + " out of " + token + " token"); [EOL] } <line_num>: 572,577
public JsonMappingException mappingException(String message) { [EOL]     return JsonMappingException.from(getParser(), message); [EOL] } <line_num>: 583,585
public JsonMappingException instantiationException(Class<?> instClass, Throwable t) { [EOL]     return JsonMappingException.from(_parser, "Can not construct instance of " + instClass.getName() + ", problem: " + t.getMessage(), t); [EOL] } <line_num>: 592,597
public JsonMappingException instantiationException(Class<?> instClass, String msg) { [EOL]     return JsonMappingException.from(_parser, "Can not construct instance of " + instClass.getName() + ", problem: " + msg); [EOL] } <line_num>: 599,601
@Deprecated [EOL] public JsonMappingException weirdStringException(Class<?> instClass, String msg) { [EOL]     return weirdStringException(null, instClass, msg); [EOL] } <line_num>: 610,613
public JsonMappingException weirdStringException(String value, Class<?> instClass, String msg) { [EOL]     return InvalidFormatException.from(_parser, "Can not construct instance of " + instClass.getName() + " from String value '" + _valueDesc() + "': " + msg, value, instClass); [EOL] } <line_num>: 625,629
@Deprecated [EOL] public JsonMappingException weirdNumberException(Class<?> instClass, String msg) { [EOL]     return weirdStringException(null, instClass, msg); [EOL] } <line_num>: 635,638
public JsonMappingException weirdNumberException(Number value, Class<?> instClass, String msg) { [EOL]     return InvalidFormatException.from(_parser, "Can not construct instance of " + instClass.getName() + " from number value (" + _valueDesc() + "): " + msg, null, instClass); [EOL] } <line_num>: 644,648
public JsonMappingException weirdKeyException(Class<?> keyClass, String keyValue, String msg) { [EOL]     return InvalidFormatException.from(_parser, "Can not construct Map key of type " + keyClass.getName() + " from String \"" + _desc(keyValue) + "\": " + msg, keyValue, keyClass); [EOL] } <line_num>: 655,660
public JsonMappingException wrongTokenException(JsonParser jp, JsonToken expToken, String msg) { [EOL]     return JsonMappingException.from(jp, "Unexpected token (" + jp.getCurrentToken() + "), expected " + expToken + ": " + msg); [EOL] } <line_num>: 666,669
public JsonMappingException unknownTypeException(JavaType type, String id) { [EOL]     return JsonMappingException.from(_parser, "Could not resolve type id '" + id + "' into a subtype of " + type); [EOL] } <line_num>: 675,678
public JsonMappingException endOfInputException(Class<?> instClass) { [EOL]     return JsonMappingException.from(_parser, "Unexpected end-of-input when trying to deserialize a " + instClass.getName()); [EOL] } <line_num>: 680,684
protected DateFormat getDateFormat() { [EOL]     if (_dateFormat != null) { [EOL]         return _dateFormat; [EOL]     } [EOL]     DateFormat df = _config.getDateFormat(); [EOL]     _dateFormat = df = (DateFormat) df.clone(); [EOL]     return df; [EOL] } <line_num>: 692,705
protected String determineClassName(Object instance) { [EOL]     return ClassUtil.getClassDescription(instance); [EOL] } <line_num>: 707,710
protected String _calcName(Class<?> cls) { [EOL]     if (cls.isArray()) { [EOL]         return _calcName(cls.getComponentType()) + "[]"; [EOL]     } [EOL]     return cls.getName(); [EOL] } <line_num>: 718,724
protected String _valueDesc() { [EOL]     try { [EOL]         return _desc(_parser.getText()); [EOL]     } catch (Exception e) { [EOL]         return "[N/A]"; [EOL]     } [EOL] } <line_num>: 726,733
protected String _desc(String desc) { [EOL]     if (desc.length() > MAX_ERROR_STR_LEN) { [EOL]         desc = desc.substring(0, MAX_ERROR_STR_LEN) + "]...[" + desc.substring(desc.length() - MAX_ERROR_STR_LEN); [EOL]     } [EOL]     return desc; [EOL] } <line_num>: 734,741
