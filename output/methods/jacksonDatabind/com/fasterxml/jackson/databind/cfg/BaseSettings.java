public BaseSettings(ClassIntrospector ci, AnnotationIntrospector ai, VisibilityChecker<?> vc, PropertyNamingStrategy pns, TypeFactory tf, TypeResolverBuilder<?> typer, DateFormat dateFormat, HandlerInstantiator hi, Locale locale, TimeZone tz, Base64Variant defaultBase64) { [EOL]     _classIntrospector = ci; [EOL]     _annotationIntrospector = ai; [EOL]     _visibilityChecker = vc; [EOL]     _propertyNamingStrategy = pns; [EOL]     _typeFactory = tf; [EOL]     _typeResolverBuilder = typer; [EOL]     _dateFormat = dateFormat; [EOL]     _handlerInstantiator = hi; [EOL]     _locale = locale; [EOL]     _timeZone = tz; [EOL]     _defaultBase64 = defaultBase64; [EOL] } <line_num>: 136,152
public BaseSettings withClassIntrospector(ClassIntrospector ci) { [EOL]     if (_classIntrospector == ci) { [EOL]         return this; [EOL]     } [EOL]     return new BaseSettings(ci, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64); [EOL] } <line_num>: 160,167
public BaseSettings withAnnotationIntrospector(AnnotationIntrospector ai) { [EOL]     if (_annotationIntrospector == ai) { [EOL]         return this; [EOL]     } [EOL]     return new BaseSettings(_classIntrospector, ai, _visibilityChecker, _propertyNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64); [EOL] } <line_num>: 169,176
public BaseSettings withInsertedAnnotationIntrospector(AnnotationIntrospector ai) { [EOL]     return withAnnotationIntrospector(AnnotationIntrospectorPair.create(ai, _annotationIntrospector)); [EOL] } <line_num>: 178,180
public BaseSettings withAppendedAnnotationIntrospector(AnnotationIntrospector ai) { [EOL]     return withAnnotationIntrospector(AnnotationIntrospectorPair.create(_annotationIntrospector, ai)); [EOL] } <line_num>: 182,184
public BaseSettings withVisibilityChecker(VisibilityChecker<?> vc) { [EOL]     if (_visibilityChecker == vc) { [EOL]         return this; [EOL]     } [EOL]     return new BaseSettings(_classIntrospector, _annotationIntrospector, vc, _propertyNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64); [EOL] } <line_num>: 186,193
public BaseSettings withVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility) { [EOL]     return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker.withVisibility(forMethod, visibility), _propertyNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64); [EOL] } <line_num>: 195,201
public BaseSettings withPropertyNamingStrategy(PropertyNamingStrategy pns) { [EOL]     if (_propertyNamingStrategy == pns) { [EOL]         return this; [EOL]     } [EOL]     return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, pns, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64); [EOL] } <line_num>: 203,210
public BaseSettings withTypeFactory(TypeFactory tf) { [EOL]     if (_typeFactory == tf) { [EOL]         return this; [EOL]     } [EOL]     return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, tf, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64); [EOL] } <line_num>: 212,219
public BaseSettings withTypeResolverBuilder(TypeResolverBuilder<?> typer) { [EOL]     if (_typeResolverBuilder == typer) { [EOL]         return this; [EOL]     } [EOL]     return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory, typer, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64); [EOL] } <line_num>: 221,228
public BaseSettings withDateFormat(DateFormat df) { [EOL]     if (_dateFormat == df) { [EOL]         return this; [EOL]     } [EOL]     return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory, _typeResolverBuilder, df, _handlerInstantiator, _locale, _timeZone, _defaultBase64); [EOL] } <line_num>: 230,237
public BaseSettings withHandlerInstantiator(HandlerInstantiator hi) { [EOL]     if (_handlerInstantiator == hi) { [EOL]         return this; [EOL]     } [EOL]     return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, hi, _locale, _timeZone, _defaultBase64); [EOL] } <line_num>: 239,246
public BaseSettings with(Locale l) { [EOL]     if (_locale == l) { [EOL]         return this; [EOL]     } [EOL]     return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, l, _timeZone, _defaultBase64); [EOL] } <line_num>: 248,255
public BaseSettings with(TimeZone tz) { [EOL]     if (tz == null) { [EOL]         throw new IllegalArgumentException(); [EOL]     } [EOL]     DateFormat df = _dateFormat; [EOL]     if (df instanceof StdDateFormat) { [EOL]         df = ((StdDateFormat) df).withTimeZone(tz); [EOL]     } else { [EOL]         df = (DateFormat) df.clone(); [EOL]         df.setTimeZone(tz); [EOL]     } [EOL]     return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory, _typeResolverBuilder, df, _handlerInstantiator, _locale, tz, _defaultBase64); [EOL] } <line_num>: 262,279
public BaseSettings with(Base64Variant base64) { [EOL]     if (base64 == _defaultBase64) { [EOL]         return this; [EOL]     } [EOL]     return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, base64); [EOL] } <line_num>: 284,292
public ClassIntrospector getClassIntrospector() { [EOL]     return _classIntrospector; [EOL] } <line_num>: 300,302
public AnnotationIntrospector getAnnotationIntrospector() { [EOL]     return _annotationIntrospector; [EOL] } <line_num>: 304,306
public VisibilityChecker<?> getVisibilityChecker() { [EOL]     return _visibilityChecker; [EOL] } <line_num>: 308,310
public PropertyNamingStrategy getPropertyNamingStrategy() { [EOL]     return _propertyNamingStrategy; [EOL] } <line_num>: 312,314
public TypeFactory getTypeFactory() { [EOL]     return _typeFactory; [EOL] } <line_num>: 316,318
public TypeResolverBuilder<?> getTypeResolverBuilder() { [EOL]     return _typeResolverBuilder; [EOL] } <line_num>: 320,322
public DateFormat getDateFormat() { [EOL]     return _dateFormat; [EOL] } <line_num>: 324,326
public HandlerInstantiator getHandlerInstantiator() { [EOL]     return _handlerInstantiator; [EOL] } <line_num>: 328,330
public Locale getLocale() { [EOL]     return _locale; [EOL] } <line_num>: 332,334
public TimeZone getTimeZone() { [EOL]     return _timeZone; [EOL] } <line_num>: 336,338
public Base64Variant getBase64Variant() { [EOL]     return _defaultBase64; [EOL] } <line_num>: 340,342
