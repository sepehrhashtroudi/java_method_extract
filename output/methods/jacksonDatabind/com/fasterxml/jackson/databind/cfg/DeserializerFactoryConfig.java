public DeserializerFactoryConfig() { [EOL]     this(null, null, null, null, null); [EOL] } <line_num>: 70,72
protected DeserializerFactoryConfig(Deserializers[] allAdditionalDeserializers, KeyDeserializers[] allAdditionalKeyDeserializers, BeanDeserializerModifier[] modifiers, AbstractTypeResolver[] atr, ValueInstantiators[] vi) { [EOL]     _additionalDeserializers = (allAdditionalDeserializers == null) ? NO_DESERIALIZERS : allAdditionalDeserializers; [EOL]     _additionalKeyDeserializers = (allAdditionalKeyDeserializers == null) ? DEFAULT_KEY_DESERIALIZERS : allAdditionalKeyDeserializers; [EOL]     _modifiers = (modifiers == null) ? NO_MODIFIERS : modifiers; [EOL]     _abstractTypeResolvers = (atr == null) ? NO_ABSTRACT_TYPE_RESOLVERS : atr; [EOL]     _valueInstantiators = (vi == null) ? NO_VALUE_INSTANTIATORS : vi; [EOL] } <line_num>: 78,91
public DeserializerFactoryConfig withAdditionalDeserializers(Deserializers additional) { [EOL]     if (additional == null) { [EOL]         throw new IllegalArgumentException("Can not pass null Deserializers"); [EOL]     } [EOL]     Deserializers[] all = ArrayBuilders.insertInListNoDup(_additionalDeserializers, additional); [EOL]     return new DeserializerFactoryConfig(all, _additionalKeyDeserializers, _modifiers, _abstractTypeResolvers, _valueInstantiators); [EOL] } <line_num>: 99,107
public DeserializerFactoryConfig withAdditionalKeyDeserializers(KeyDeserializers additional) { [EOL]     if (additional == null) { [EOL]         throw new IllegalArgumentException("Can not pass null KeyDeserializers"); [EOL]     } [EOL]     KeyDeserializers[] all = ArrayBuilders.insertInListNoDup(_additionalKeyDeserializers, additional); [EOL]     return new DeserializerFactoryConfig(_additionalDeserializers, all, _modifiers, _abstractTypeResolvers, _valueInstantiators); [EOL] } <line_num>: 114,122
public DeserializerFactoryConfig withDeserializerModifier(BeanDeserializerModifier modifier) { [EOL]     if (modifier == null) { [EOL]         throw new IllegalArgumentException("Can not pass null modifier"); [EOL]     } [EOL]     BeanDeserializerModifier[] all = ArrayBuilders.insertInListNoDup(_modifiers, modifier); [EOL]     return new DeserializerFactoryConfig(_additionalDeserializers, _additionalKeyDeserializers, all, _abstractTypeResolvers, _valueInstantiators); [EOL] } <line_num>: 130,138
public DeserializerFactoryConfig withAbstractTypeResolver(AbstractTypeResolver resolver) { [EOL]     if (resolver == null) { [EOL]         throw new IllegalArgumentException("Can not pass null resolver"); [EOL]     } [EOL]     AbstractTypeResolver[] all = ArrayBuilders.insertInListNoDup(_abstractTypeResolvers, resolver); [EOL]     return new DeserializerFactoryConfig(_additionalDeserializers, _additionalKeyDeserializers, _modifiers, all, _valueInstantiators); [EOL] } <line_num>: 147,155
public DeserializerFactoryConfig withValueInstantiators(ValueInstantiators instantiators) { [EOL]     if (instantiators == null) { [EOL]         throw new IllegalArgumentException("Can not pass null resolver"); [EOL]     } [EOL]     ValueInstantiators[] all = ArrayBuilders.insertInListNoDup(_valueInstantiators, instantiators); [EOL]     return new DeserializerFactoryConfig(_additionalDeserializers, _additionalKeyDeserializers, _modifiers, _abstractTypeResolvers, all); [EOL] } <line_num>: 167,175
public boolean hasDeserializers() { [EOL]     return _additionalDeserializers.length > 0; [EOL] } <line_num>: 177,177
public boolean hasKeyDeserializers() { [EOL]     return _additionalKeyDeserializers.length > 0; [EOL] } <line_num>: 179,179
public boolean hasDeserializerModifiers() { [EOL]     return _modifiers.length > 0; [EOL] } <line_num>: 181,181
public boolean hasAbstractTypeResolvers() { [EOL]     return _abstractTypeResolvers.length > 0; [EOL] } <line_num>: 183,183
public boolean hasValueInstantiators() { [EOL]     return _valueInstantiators.length > 0; [EOL] } <line_num>: 185,185
public Iterable<Deserializers> deserializers() { [EOL]     return ArrayBuilders.arrayAsIterable(_additionalDeserializers); [EOL] } <line_num>: 187,189
public Iterable<KeyDeserializers> keyDeserializers() { [EOL]     return ArrayBuilders.arrayAsIterable(_additionalKeyDeserializers); [EOL] } <line_num>: 191,193
public Iterable<BeanDeserializerModifier> deserializerModifiers() { [EOL]     return ArrayBuilders.arrayAsIterable(_modifiers); [EOL] } <line_num>: 195,197
public Iterable<AbstractTypeResolver> abstractTypeResolvers() { [EOL]     return ArrayBuilders.arrayAsIterable(_abstractTypeResolvers); [EOL] } <line_num>: 199,201
public Iterable<ValueInstantiators> valueInstantiators() { [EOL]     return ArrayBuilders.arrayAsIterable(_valueInstantiators); [EOL] } <line_num>: 203,205
