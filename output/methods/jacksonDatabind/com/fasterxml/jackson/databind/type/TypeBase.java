@Deprecated [EOL] protected TypeBase(Class<?> raw, int hash, Object valueHandler, Object typeHandler) { [EOL]     this(raw, hash, valueHandler, typeHandler, false); [EOL] } <line_num>: 26,31
protected TypeBase(Class<?> raw, int hash, Object valueHandler, Object typeHandler, boolean asStatic) { [EOL]     super(raw, hash, valueHandler, typeHandler, asStatic); [EOL] } <line_num>: 36,40
@Override [EOL] public String toCanonical() { [EOL]     String str = _canonicalName; [EOL]     if (str == null) { [EOL]         str = buildCanonicalName(); [EOL]     } [EOL]     return str; [EOL] } <line_num>: 42,50
protected abstract String buildCanonicalName(); <line_num>: 52,52
@Override [EOL] public abstract StringBuilder getGenericSignature(StringBuilder sb); <line_num>: 54,55
@Override [EOL] public abstract StringBuilder getErasedSignature(StringBuilder sb); <line_num>: 57,58
@Override [EOL] @SuppressWarnings("unchecked") [EOL] public <T> T getValueHandler() { [EOL]     return (T) _valueHandler; [EOL] } <line_num>: 60,62
@Override [EOL] @SuppressWarnings("unchecked") [EOL] public <T> T getTypeHandler() { [EOL]     return (T) _typeHandler; [EOL] } <line_num>: 64,66
@Override [EOL] public void serializeWithType(JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException, JsonProcessingException { [EOL]     typeSer.writeTypePrefixForScalar(this, jgen); [EOL]     this.serialize(jgen, provider); [EOL]     typeSer.writeTypeSuffixForScalar(this, jgen); [EOL] } <line_num>: 74,82
@Override [EOL] public void serialize(JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]     jgen.writeString(toCanonical()); [EOL] } <line_num>: 84,89
protected static StringBuilder _classSignature(Class<?> cls, StringBuilder sb, boolean trailingSemicolon) { [EOL]     if (cls.isPrimitive()) { [EOL]         if (cls == Boolean.TYPE) { [EOL]             sb.append('Z'); [EOL]         } else if (cls == Byte.TYPE) { [EOL]             sb.append('B'); [EOL]         } else if (cls == Short.TYPE) { [EOL]             sb.append('S'); [EOL]         } else if (cls == Character.TYPE) { [EOL]             sb.append('C'); [EOL]         } else if (cls == Integer.TYPE) { [EOL]             sb.append('I'); [EOL]         } else if (cls == Long.TYPE) { [EOL]             sb.append('J'); [EOL]         } else if (cls == Float.TYPE) { [EOL]             sb.append('F'); [EOL]         } else if (cls == Double.TYPE) { [EOL]             sb.append('D'); [EOL]         } else if (cls == Void.TYPE) { [EOL]             sb.append('V'); [EOL]         } else { [EOL]             throw new IllegalStateException("Unrecognized primitive type: " + cls.getName()); [EOL]         } [EOL]     } else { [EOL]         sb.append('L'); [EOL]         String name = cls.getName(); [EOL]         for (int i = 0, len = name.length(); i < len; ++i) { [EOL]             char c = name.charAt(i); [EOL]             if (c == '.') [EOL]                 c = '/'; [EOL]             sb.append(c); [EOL]         } [EOL]         if (trailingSemicolon) { [EOL]             sb.append(';'); [EOL]         } [EOL]     } [EOL]     return sb; [EOL] } <line_num>: 101,146
