protected MapLikeType(Class<?> mapType, JavaType keyT, JavaType valueT, Object valueHandler, Object typeHandler, boolean asStatic) { [EOL]     super(mapType, keyT.hashCode() ^ valueT.hashCode(), valueHandler, typeHandler, asStatic); [EOL]     _keyType = keyT; [EOL]     _valueType = valueT; [EOL] } <line_num>: 35,41
public static MapLikeType construct(Class<?> rawType, JavaType keyT, JavaType valueT) { [EOL]     return new MapLikeType(rawType, keyT, valueT, null, null, false); [EOL] } <line_num>: 43,47
@Override [EOL] protected JavaType _narrow(Class<?> subclass) { [EOL]     return new MapLikeType(subclass, _keyType, _valueType, _valueHandler, _typeHandler, _asStatic); [EOL] } <line_num>: 49,52
@Override [EOL] public JavaType narrowContentsBy(Class<?> contentClass) { [EOL]     if (contentClass == _valueType.getRawClass()) { [EOL]         return this; [EOL]     } [EOL]     return new MapLikeType(_class, _keyType, _valueType.narrowBy(contentClass), _valueHandler, _typeHandler, _asStatic); [EOL] } <line_num>: 54,63
@Override [EOL] public JavaType widenContentsBy(Class<?> contentClass) { [EOL]     if (contentClass == _valueType.getRawClass()) { [EOL]         return this; [EOL]     } [EOL]     return new MapLikeType(_class, _keyType, _valueType.widenBy(contentClass), _valueHandler, _typeHandler, _asStatic); [EOL] } <line_num>: 65,73
public JavaType narrowKey(Class<?> keySubclass) { [EOL]     if (keySubclass == _keyType.getRawClass()) { [EOL]         return this; [EOL]     } [EOL]     return new MapLikeType(_class, _keyType.narrowBy(keySubclass), _valueType, _valueHandler, _typeHandler, _asStatic); [EOL] } <line_num>: 75,83
public JavaType widenKey(Class<?> keySubclass) { [EOL]     if (keySubclass == _keyType.getRawClass()) { [EOL]         return this; [EOL]     } [EOL]     return new MapLikeType(_class, _keyType.widenBy(keySubclass), _valueType, _valueHandler, _typeHandler, _asStatic); [EOL] } <line_num>: 85,93
@Override [EOL] public MapLikeType withTypeHandler(Object h) { [EOL]     return new MapLikeType(_class, _keyType, _valueType, _valueHandler, h, _asStatic); [EOL] } <line_num>: 95,99
@Override [EOL] public MapLikeType withContentTypeHandler(Object h) { [EOL]     return new MapLikeType(_class, _keyType, _valueType.withTypeHandler(h), _valueHandler, _typeHandler, _asStatic); [EOL] } <line_num>: 101,106
@Override [EOL] public MapLikeType withValueHandler(Object h) { [EOL]     return new MapLikeType(_class, _keyType, _valueType, h, _typeHandler, _asStatic); [EOL] } <line_num>: 108,111
@Override [EOL] public MapLikeType withContentValueHandler(Object h) { [EOL]     return new MapLikeType(_class, _keyType, _valueType.withValueHandler(h), _valueHandler, _typeHandler, _asStatic); [EOL] } <line_num>: 113,117
@Override [EOL] public MapLikeType withStaticTyping() { [EOL]     if (_asStatic) { [EOL]         return this; [EOL]     } [EOL]     return new MapLikeType(_class, _keyType, _valueType.withStaticTyping(), _valueHandler, _typeHandler, true); [EOL] } <line_num>: 119,126
@Override [EOL] protected String buildCanonicalName() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append(_class.getName()); [EOL]     if (_keyType != null) { [EOL]         sb.append('<'); [EOL]         sb.append(_keyType.toCanonical()); [EOL]         sb.append(','); [EOL]         sb.append(_valueType.toCanonical()); [EOL]         sb.append('>'); [EOL]     } [EOL]     return sb.toString(); [EOL] } <line_num>: 128,140
@Override [EOL] public boolean isContainerType() { [EOL]     return true; [EOL] } <line_num>: 148,149
@Override [EOL] public boolean isMapLikeType() { [EOL]     return true; [EOL] } <line_num>: 151,152
@Override [EOL] public JavaType getKeyType() { [EOL]     return _keyType; [EOL] } <line_num>: 154,155
@Override [EOL] public JavaType getContentType() { [EOL]     return _valueType; [EOL] } <line_num>: 157,158
@Override [EOL] public int containedTypeCount() { [EOL]     return 2; [EOL] } <line_num>: 160,161
@Override [EOL] public JavaType containedType(int index) { [EOL]     if (index == 0) [EOL]         return _keyType; [EOL]     if (index == 1) [EOL]         return _valueType; [EOL]     return null; [EOL] } <line_num>: 163,168
@Override [EOL] public String containedTypeName(int index) { [EOL]     if (index == 0) [EOL]         return "K"; [EOL]     if (index == 1) [EOL]         return "V"; [EOL]     return null; [EOL] } <line_num>: 175,180
@Override [EOL] public StringBuilder getErasedSignature(StringBuilder sb) { [EOL]     return _classSignature(_class, sb, true); [EOL] } <line_num>: 182,185
@Override [EOL] public StringBuilder getGenericSignature(StringBuilder sb) { [EOL]     _classSignature(_class, sb, false); [EOL]     sb.append('<'); [EOL]     _keyType.getGenericSignature(sb); [EOL]     _valueType.getGenericSignature(sb); [EOL]     sb.append(">;"); [EOL]     return sb; [EOL] } <line_num>: 187,196
public MapLikeType withKeyTypeHandler(Object h) { [EOL]     return new MapLikeType(_class, _keyType.withTypeHandler(h), _valueType, _valueHandler, _typeHandler, _asStatic); [EOL] } <line_num>: 204,208
public MapLikeType withKeyValueHandler(Object h) { [EOL]     return new MapLikeType(_class, _keyType.withValueHandler(h), _valueType, _valueHandler, _typeHandler, _asStatic); [EOL] } <line_num>: 210,213
public boolean isTrueMapType() { [EOL]     return Map.class.isAssignableFrom(_class); [EOL] } <line_num>: 221,223
@Override [EOL] public String toString() { [EOL]     return "[map-like type; class " + _class.getName() + ", " + _keyType + " -> " + _valueType + "]"; [EOL] } <line_num>: 231,235
@Override [EOL] public boolean equals(Object o) { [EOL]     if (o == this) [EOL]         return true; [EOL]     if (o == null) [EOL]         return false; [EOL]     if (o.getClass() != getClass()) [EOL]         return false; [EOL]     MapLikeType other = (MapLikeType) o; [EOL]     return (_class == other._class) && _keyType.equals(other._keyType) && _valueType.equals(other._valueType); [EOL] } <line_num>: 237,248
