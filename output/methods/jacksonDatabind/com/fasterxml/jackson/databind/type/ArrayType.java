private ArrayType(JavaType componentType, Object emptyInstance, Object valueHandler, Object typeHandler, boolean asStatic) { [EOL]     super(emptyInstance.getClass(), componentType.hashCode(), valueHandler, typeHandler, asStatic); [EOL]     _componentType = componentType; [EOL]     _emptyArray = emptyInstance; [EOL] } <line_num>: 29,36
public static ArrayType construct(JavaType componentType, Object valueHandler, Object typeHandler) { [EOL]     Object emptyInstance = Array.newInstance(componentType.getRawClass(), 0); [EOL]     return new ArrayType(componentType, emptyInstance, null, null, false); [EOL] } <line_num>: 38,49
@Override [EOL] public ArrayType withTypeHandler(Object h) { [EOL]     if (h == _typeHandler) { [EOL]         return this; [EOL]     } [EOL]     return new ArrayType(_componentType, _emptyArray, _valueHandler, h, _asStatic); [EOL] } <line_num>: 51,58
@Override [EOL] public ArrayType withContentTypeHandler(Object h) { [EOL]     if (h == _componentType.<Object>getTypeHandler()) { [EOL]         return this; [EOL]     } [EOL]     return new ArrayType(_componentType.withTypeHandler(h), _emptyArray, _valueHandler, _typeHandler, _asStatic); [EOL] } <line_num>: 60,68
@Override [EOL] public ArrayType withValueHandler(Object h) { [EOL]     if (h == _valueHandler) { [EOL]         return this; [EOL]     } [EOL]     return new ArrayType(_componentType, _emptyArray, h, _typeHandler, _asStatic); [EOL] } <line_num>: 70,76
@Override [EOL] public ArrayType withContentValueHandler(Object h) { [EOL]     if (h == _componentType.<Object>getValueHandler()) { [EOL]         return this; [EOL]     } [EOL]     return new ArrayType(_componentType.withValueHandler(h), _emptyArray, _valueHandler, _typeHandler, _asStatic); [EOL] } <line_num>: 78,85
@Override [EOL] public ArrayType withStaticTyping() { [EOL]     if (_asStatic) { [EOL]         return this; [EOL]     } [EOL]     return new ArrayType(_componentType.withStaticTyping(), _emptyArray, _valueHandler, _typeHandler, true); [EOL] } <line_num>: 87,94
@Override [EOL] protected String buildCanonicalName() { [EOL]     return _class.getName(); [EOL] } <line_num>: 96,99
@Override [EOL] protected JavaType _narrow(Class<?> subclass) { [EOL]     if (!subclass.isArray()) { [EOL]         throw new IllegalArgumentException("Incompatible narrowing operation: trying to narrow " + toString() + " to class " + subclass.getName()); [EOL]     } [EOL]     Class<?> newCompClass = subclass.getComponentType(); [EOL]     JavaType newCompType = TypeFactory.defaultInstance().constructType(newCompClass); [EOL]     return construct(newCompType, _valueHandler, _typeHandler); [EOL] } <line_num>: 111,133
@Override [EOL] public JavaType narrowContentsBy(Class<?> contentClass) { [EOL]     if (contentClass == _componentType.getRawClass()) { [EOL]         return this; [EOL]     } [EOL]     return construct(_componentType.narrowBy(contentClass), _valueHandler, _typeHandler); [EOL] } <line_num>: 139,148
@Override [EOL] public JavaType widenContentsBy(Class<?> contentClass) { [EOL]     if (contentClass == _componentType.getRawClass()) { [EOL]         return this; [EOL]     } [EOL]     return construct(_componentType.widenBy(contentClass), _valueHandler, _typeHandler); [EOL] } <line_num>: 150,159
@Override [EOL] public boolean isArrayType() { [EOL]     return true; [EOL] } <line_num>: 167,168
@Override [EOL] public boolean isAbstract() { [EOL]     return false; [EOL] } <line_num>: 175,176
@Override [EOL] public boolean isConcrete() { [EOL]     return true; [EOL] } <line_num>: 183,184
@Override [EOL] public boolean hasGenericTypes() { [EOL]     return _componentType.hasGenericTypes(); [EOL] } <line_num>: 186,190
@Override [EOL] public String containedTypeName(int index) { [EOL]     if (index == 0) [EOL]         return "E"; [EOL]     return null; [EOL] } <line_num>: 198,202
@Override [EOL] public boolean isContainerType() { [EOL]     return true; [EOL] } <line_num>: 210,211
@Override [EOL] public JavaType getContentType() { [EOL]     return _componentType; [EOL] } <line_num>: 213,214
@Override [EOL] public int containedTypeCount() { [EOL]     return 1; [EOL] } <line_num>: 216,217
@Override [EOL] public JavaType containedType(int index) { [EOL]     return (index == 0) ? _componentType : null; [EOL] } <line_num>: 218,221
@Override [EOL] public StringBuilder getGenericSignature(StringBuilder sb) { [EOL]     sb.append('['); [EOL]     return _componentType.getGenericSignature(sb); [EOL] } <line_num>: 223,227
@Override [EOL] public StringBuilder getErasedSignature(StringBuilder sb) { [EOL]     sb.append('['); [EOL]     return _componentType.getErasedSignature(sb); [EOL] } <line_num>: 229,233
@Override [EOL] public String toString() { [EOL]     return "[array type, component type: " + _componentType + "]"; [EOL] } <line_num>: 241,245
@Override [EOL] public boolean equals(Object o) { [EOL]     if (o == this) [EOL]         return true; [EOL]     if (o == null) [EOL]         return false; [EOL]     if (o.getClass() != getClass()) [EOL]         return false; [EOL]     ArrayType other = (ArrayType) o; [EOL]     return _componentType.equals(other._componentType); [EOL] } <line_num>: 247,256
