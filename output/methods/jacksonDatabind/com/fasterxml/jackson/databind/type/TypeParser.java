public TypeParser(TypeFactory f) { [EOL]     _factory = f; [EOL] } <line_num>: 21,23
public MyTokenizer(String str) { [EOL]     super(str, "<,>", true); [EOL]     _input = str; [EOL] } <line_num>: 100,103
public JavaType parse(String canonical) throws IllegalArgumentException { [EOL]     canonical = canonical.trim(); [EOL]     MyTokenizer tokens = new MyTokenizer(canonical); [EOL]     JavaType type = parseType(tokens); [EOL]     if (tokens.hasMoreTokens()) { [EOL]         throw _problem(tokens, "Unexpected tokens after complete type"); [EOL]     } [EOL]     return type; [EOL] } <line_num>: 25,36
protected JavaType parseType(MyTokenizer tokens) throws IllegalArgumentException { [EOL]     if (!tokens.hasMoreTokens()) { [EOL]         throw _problem(tokens, "Unexpected end-of-string"); [EOL]     } [EOL]     Class<?> base = findClass(tokens.nextToken(), tokens); [EOL]     if (tokens.hasMoreTokens()) { [EOL]         String token = tokens.nextToken(); [EOL]         if ("<".equals(token)) { [EOL]             return _factory._fromParameterizedClass(base, parseTypes(tokens)); [EOL]         } [EOL]         tokens.pushBack(token); [EOL]     } [EOL]     return _factory._fromClass(base, null); [EOL] } <line_num>: 38,55
protected List<JavaType> parseTypes(MyTokenizer tokens) throws IllegalArgumentException { [EOL]     ArrayList<JavaType> types = new ArrayList<JavaType>(); [EOL]     while (tokens.hasMoreTokens()) { [EOL]         types.add(parseType(tokens)); [EOL]         if (!tokens.hasMoreTokens()) [EOL]             break; [EOL]         String token = tokens.nextToken(); [EOL]         if (">".equals(token)) [EOL]             return types; [EOL]         if (!",".equals(token)) { [EOL]             throw _problem(tokens, "Unexpected token '" + token + "', expected ',' or '>')"); [EOL]         } [EOL]     } [EOL]     throw _problem(tokens, "Unexpected end-of-string"); [EOL] } <line_num>: 57,71
protected Class<?> findClass(String className, MyTokenizer tokens) { [EOL]     try { [EOL]         return ClassUtil.findClass(className); [EOL]     } catch (Exception e) { [EOL]         if (e instanceof RuntimeException) { [EOL]             throw (RuntimeException) e; [EOL]         } [EOL]         throw _problem(tokens, "Can not locate class '" + className + "', problem: " + e.getMessage()); [EOL]     } [EOL] } <line_num>: 73,83
protected IllegalArgumentException _problem(MyTokenizer tokens, String msg) { [EOL]     return new IllegalArgumentException("Failed to parse type '" + tokens.getAllInput() + "' (remaining: '" + tokens.getRemainingInput() + "'): " + msg); [EOL] } <line_num>: 85,89
@Override [EOL] public boolean hasMoreTokens() { [EOL]     return (_pushbackToken != null) || super.hasMoreTokens(); [EOL] } <line_num>: 105,108
@Override [EOL] public String nextToken() { [EOL]     String token; [EOL]     if (_pushbackToken != null) { [EOL]         token = _pushbackToken; [EOL]         _pushbackToken = null; [EOL]     } else { [EOL]         token = super.nextToken(); [EOL]     } [EOL]     _index += token.length(); [EOL]     return token; [EOL] } <line_num>: 110,121
public void pushBack(String token) { [EOL]     _pushbackToken = token; [EOL]     _index -= token.length(); [EOL] } <line_num>: 123,126
public String getAllInput() { [EOL]     return _input; [EOL] } <line_num>: 128,128
public String getUsedInput() { [EOL]     return _input.substring(0, _index); [EOL] } <line_num>: 129,129
public String getRemainingInput() { [EOL]     return _input.substring(_index); [EOL] } <line_num>: 130,130
