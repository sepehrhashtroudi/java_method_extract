protected CollectionLikeType(Class<?> collT, JavaType elemT, Object valueHandler, Object typeHandler, boolean asStatic) { [EOL]     super(collT, elemT.hashCode(), valueHandler, typeHandler, asStatic); [EOL]     _elementType = elemT; [EOL] } <line_num>: 29,34
@Override [EOL] protected JavaType _narrow(Class<?> subclass) { [EOL]     return new CollectionLikeType(subclass, _elementType, _valueHandler, _typeHandler, _asStatic); [EOL] } <line_num>: 36,40
@Override [EOL] public JavaType narrowContentsBy(Class<?> contentClass) { [EOL]     if (contentClass == _elementType.getRawClass()) { [EOL]         return this; [EOL]     } [EOL]     return new CollectionLikeType(_class, _elementType.narrowBy(contentClass), _valueHandler, _typeHandler, _asStatic); [EOL] } <line_num>: 42,51
@Override [EOL] public JavaType widenContentsBy(Class<?> contentClass) { [EOL]     if (contentClass == _elementType.getRawClass()) { [EOL]         return this; [EOL]     } [EOL]     return new CollectionLikeType(_class, _elementType.widenBy(contentClass), _valueHandler, _typeHandler, _asStatic); [EOL] } <line_num>: 53,62
public static CollectionLikeType construct(Class<?> rawType, JavaType elemT) { [EOL]     return new CollectionLikeType(rawType, elemT, null, null, false); [EOL] } <line_num>: 64,68
@Override [EOL] public CollectionLikeType withTypeHandler(Object h) { [EOL]     return new CollectionLikeType(_class, _elementType, _valueHandler, h, _asStatic); [EOL] } <line_num>: 70,74
@Override [EOL] public CollectionLikeType withContentTypeHandler(Object h) { [EOL]     return new CollectionLikeType(_class, _elementType.withTypeHandler(h), _valueHandler, _typeHandler, _asStatic); [EOL] } <line_num>: 76,81
@Override [EOL] public CollectionLikeType withValueHandler(Object h) { [EOL]     return new CollectionLikeType(_class, _elementType, h, _typeHandler, _asStatic); [EOL] } <line_num>: 83,86
@Override [EOL] public CollectionLikeType withContentValueHandler(Object h) { [EOL]     return new CollectionLikeType(_class, _elementType.withValueHandler(h), _valueHandler, _typeHandler, _asStatic); [EOL] } <line_num>: 88,92
@Override [EOL] public CollectionLikeType withStaticTyping() { [EOL]     if (_asStatic) { [EOL]         return this; [EOL]     } [EOL]     return new CollectionLikeType(_class, _elementType.withStaticTyping(), _valueHandler, _typeHandler, true); [EOL] } <line_num>: 94,101
@Override [EOL] public boolean isContainerType() { [EOL]     return true; [EOL] } <line_num>: 109,110
@Override [EOL] public boolean isCollectionLikeType() { [EOL]     return true; [EOL] } <line_num>: 112,113
@Override [EOL] public JavaType getContentType() { [EOL]     return _elementType; [EOL] } <line_num>: 115,116
@Override [EOL] public int containedTypeCount() { [EOL]     return 1; [EOL] } <line_num>: 118,119
@Override [EOL] public JavaType containedType(int index) { [EOL]     return (index == 0) ? _elementType : null; [EOL] } <line_num>: 121,124
@Override [EOL] public String containedTypeName(int index) { [EOL]     if (index == 0) [EOL]         return "E"; [EOL]     return null; [EOL] } <line_num>: 130,134
@Override [EOL] public StringBuilder getErasedSignature(StringBuilder sb) { [EOL]     return _classSignature(_class, sb, true); [EOL] } <line_num>: 136,139
@Override [EOL] public StringBuilder getGenericSignature(StringBuilder sb) { [EOL]     _classSignature(_class, sb, false); [EOL]     sb.append('<'); [EOL]     _elementType.getGenericSignature(sb); [EOL]     sb.append(">;"); [EOL]     return sb; [EOL] } <line_num>: 141,148
@Override [EOL] protected String buildCanonicalName() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append(_class.getName()); [EOL]     if (_elementType != null) { [EOL]         sb.append('<'); [EOL]         sb.append(_elementType.toCanonical()); [EOL]         sb.append('>'); [EOL]     } [EOL]     return sb.toString(); [EOL] } <line_num>: 150,160
public boolean isTrueCollectionType() { [EOL]     return Collection.class.isAssignableFrom(_class); [EOL] } <line_num>: 174,176
@Override [EOL] public boolean equals(Object o) { [EOL]     if (o == this) [EOL]         return true; [EOL]     if (o == null) [EOL]         return false; [EOL]     if (o.getClass() != getClass()) [EOL]         return false; [EOL]     CollectionLikeType other = (CollectionLikeType) o; [EOL]     return (_class == other._class) && _elementType.equals(other._elementType); [EOL] } <line_num>: 184,193
@Override [EOL] public String toString() { [EOL]     return "[collection-like type; class " + _class.getName() + ", contains " + _elementType + "]"; [EOL] } <line_num>: 195,199
