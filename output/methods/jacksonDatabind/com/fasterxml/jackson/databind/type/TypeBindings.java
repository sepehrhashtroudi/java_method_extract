public TypeBindings(TypeFactory typeFactory, Class<?> cc) { [EOL]     this(typeFactory, null, cc, null); [EOL] } <line_num>: 62,65
public TypeBindings(TypeFactory typeFactory, JavaType type) { [EOL]     this(typeFactory, null, type.getRawClass(), type); [EOL] } <line_num>: 67,70
private TypeBindings(TypeFactory tf, TypeBindings parent, Class<?> cc, JavaType type) { [EOL]     _typeFactory = tf; [EOL]     _parentBindings = parent; [EOL]     _contextClass = cc; [EOL]     _contextType = type; [EOL] } <line_num>: 82,89
public TypeBindings childInstance() { [EOL]     return new TypeBindings(_typeFactory, this, _contextClass, _contextType); [EOL] } <line_num>: 78,80
public JavaType resolveType(Class<?> cls) { [EOL]     return _typeFactory._constructType(cls, this); [EOL] } <line_num>: 97,99
public JavaType resolveType(Type type) { [EOL]     return _typeFactory._constructType(type, this); [EOL] } <line_num>: 101,103
public int getBindingCount() { [EOL]     if (_bindings == null) { [EOL]         _resolve(); [EOL]     } [EOL]     return _bindings.size(); [EOL] } <line_num>: 111,116
public JavaType findType(String name) { [EOL]     if (_bindings == null) { [EOL]         _resolve(); [EOL]     } [EOL]     JavaType t = _bindings.get(name); [EOL]     if (t != null) { [EOL]         return t; [EOL]     } [EOL]     if (_placeholders != null && _placeholders.contains(name)) { [EOL]         return UNBOUND; [EOL]     } [EOL]     if (_parentBindings != null) { [EOL]         return _parentBindings.findType(name); [EOL]     } [EOL]     if (_contextClass != null) { [EOL]         Class<?> enclosing = _contextClass.getEnclosingClass(); [EOL]         if (enclosing != null) { [EOL]             if (!Modifier.isStatic(_contextClass.getModifiers())) { [EOL]                 return UNBOUND; [EOL]             } [EOL]         } [EOL]     } [EOL]     String className; [EOL]     if (_contextClass != null) { [EOL]         className = _contextClass.getName(); [EOL]     } else if (_contextType != null) { [EOL]         className = _contextType.toString(); [EOL]     } else { [EOL]         className = "UNKNOWN"; [EOL]     } [EOL]     throw new IllegalArgumentException("Type variable '" + name + "' can not be resolved (with context of class " + className + ")"); [EOL] } <line_num>: 118,173
public void addBinding(String name, JavaType type) { [EOL]     if (_bindings == null || _bindings.size() == 0) { [EOL]         _bindings = new LinkedHashMap<String, JavaType>(); [EOL]     } [EOL]     _bindings.put(name, type); [EOL] } <line_num>: 175,182
public JavaType[] typesAsArray() { [EOL]     if (_bindings == null) { [EOL]         _resolve(); [EOL]     } [EOL]     if (_bindings.size() == 0) { [EOL]         return NO_TYPES; [EOL]     } [EOL]     return _bindings.values().toArray(new JavaType[_bindings.size()]); [EOL] } <line_num>: 184,193
protected void _resolve() { [EOL]     _resolveBindings(_contextClass); [EOL]     if (_contextType != null) { [EOL]         int count = _contextType.containedTypeCount(); [EOL]         if (count > 0) { [EOL]             for (int i = 0; i < count; ++i) { [EOL]                 String name = _contextType.containedTypeName(i); [EOL]                 JavaType type = _contextType.containedType(i); [EOL]                 addBinding(name, type); [EOL]             } [EOL]         } [EOL]     } [EOL]     if (_bindings == null) { [EOL]         _bindings = Collections.emptyMap(); [EOL]     } [EOL] } <line_num>: 201,221
public void _addPlaceholder(String name) { [EOL]     if (_placeholders == null) { [EOL]         _placeholders = new HashSet<String>(); [EOL]     } [EOL]     _placeholders.add(name); [EOL] } <line_num>: 223,228
protected void _resolveBindings(Type t) { [EOL]     if (t == null) [EOL]         return; [EOL]     Class<?> raw; [EOL]     if (t instanceof ParameterizedType) { [EOL]         ParameterizedType pt = (ParameterizedType) t; [EOL]         Type[] args = pt.getActualTypeArguments(); [EOL]         if (args != null && args.length > 0) { [EOL]             Class<?> rawType = (Class<?>) pt.getRawType(); [EOL]             TypeVariable<?>[] vars = rawType.getTypeParameters(); [EOL]             if (vars.length != args.length) { [EOL]                 throw new IllegalArgumentException("Strange parametrized type (in class " + rawType.getName() + "): number of type arguments != number of type parameters (" + args.length + " vs " + vars.length + ")"); [EOL]             } [EOL]             for (int i = 0, len = args.length; i < len; ++i) { [EOL]                 TypeVariable<?> var = vars[i]; [EOL]                 String name = var.getName(); [EOL]                 if (_bindings == null) { [EOL]                     _bindings = new LinkedHashMap<String, JavaType>(); [EOL]                 } else { [EOL]                     if (_bindings.containsKey(name)) [EOL]                         continue; [EOL]                 } [EOL]                 _addPlaceholder(name); [EOL]                 _bindings.put(name, _typeFactory._constructType(args[i], this)); [EOL]             } [EOL]         } [EOL]         raw = (Class<?>) pt.getRawType(); [EOL]     } else if (t instanceof Class<?>) { [EOL]         raw = (Class<?>) t; [EOL]         Class<?> decl = raw.getDeclaringClass(); [EOL]         if (decl != null && !decl.isAssignableFrom(raw)) { [EOL]             _resolveBindings(raw.getDeclaringClass()); [EOL]         } [EOL]         TypeVariable<?>[] vars = raw.getTypeParameters(); [EOL]         if (vars != null && vars.length > 0) { [EOL]             JavaType[] typeParams = null; [EOL]             if (_contextType != null && raw.isAssignableFrom(_contextType.getRawClass())) { [EOL]                 typeParams = _typeFactory.findTypeParameters(_contextType, raw); [EOL]             } [EOL]             for (int i = 0; i < vars.length; i++) { [EOL]                 TypeVariable<?> var = vars[i]; [EOL]                 String name = var.getName(); [EOL]                 Type varType = var.getBounds()[0]; [EOL]                 if (varType != null) { [EOL]                     if (_bindings == null) { [EOL]                         _bindings = new LinkedHashMap<String, JavaType>(); [EOL]                     } else { [EOL]                         if (_bindings.containsKey(name)) [EOL]                             continue; [EOL]                     } [EOL]                     _addPlaceholder(name); [EOL]                     if (typeParams != null) { [EOL]                         _bindings.put(name, typeParams[i]); [EOL]                     } else { [EOL]                         _bindings.put(name, _typeFactory._constructType(varType, this)); [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } else { [EOL]         return; [EOL]     } [EOL]     _resolveBindings(raw.getGenericSuperclass()); [EOL]     for (Type intType : raw.getGenericInterfaces()) { [EOL]         _resolveBindings(intType); [EOL]     } [EOL] } <line_num>: 230,321
@Override [EOL] public String toString() { [EOL]     if (_bindings == null) { [EOL]         _resolve(); [EOL]     } [EOL]     StringBuilder sb = new StringBuilder("[TypeBindings for "); [EOL]     if (_contextType != null) { [EOL]         sb.append(_contextType.toString()); [EOL]     } else { [EOL]         sb.append(_contextClass.getName()); [EOL]     } [EOL]     sb.append(": ").append(_bindings).append("]"); [EOL]     return sb.toString(); [EOL] } <line_num>: 323,337
