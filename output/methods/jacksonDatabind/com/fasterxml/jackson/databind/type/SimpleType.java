protected SimpleType(Class<?> cls) { [EOL]     this(cls, null, null, null, null, false); [EOL] } <line_num>: 35,37
protected SimpleType(Class<?> cls, String[] typeNames, JavaType[] typeParams, Object valueHandler, Object typeHandler, boolean asStatic) { [EOL]     super(cls, 0, valueHandler, typeHandler, asStatic); [EOL]     if (typeNames == null || typeNames.length == 0) { [EOL]         _typeNames = null; [EOL]         _typeParameters = null; [EOL]     } else { [EOL]         _typeNames = typeNames; [EOL]         _typeParameters = typeParams; [EOL]     } [EOL] } <line_num>: 39,50
public static SimpleType constructUnsafe(Class<?> raw) { [EOL]     return new SimpleType(raw, null, null, null, null, false); [EOL] } <line_num>: 58,60
@Override [EOL] protected JavaType _narrow(Class<?> subclass) { [EOL]     return new SimpleType(subclass, _typeNames, _typeParameters, _valueHandler, _typeHandler, _asStatic); [EOL] } <line_num>: 62,68
@Override [EOL] public JavaType narrowContentsBy(Class<?> subclass) { [EOL]     throw new IllegalArgumentException("Internal error: SimpleType.narrowContentsBy() should never be called"); [EOL] } <line_num>: 70,75
@Override [EOL] public JavaType widenContentsBy(Class<?> subclass) { [EOL]     throw new IllegalArgumentException("Internal error: SimpleType.widenContentsBy() should never be called"); [EOL] } <line_num>: 77,82
public static SimpleType construct(Class<?> cls) { [EOL]     if (Map.class.isAssignableFrom(cls)) { [EOL]         throw new IllegalArgumentException("Can not construct SimpleType for a Map (class: " + cls.getName() + ")"); [EOL]     } [EOL]     if (Collection.class.isAssignableFrom(cls)) { [EOL]         throw new IllegalArgumentException("Can not construct SimpleType for a Collection (class: " + cls.getName() + ")"); [EOL]     } [EOL]     if (cls.isArray()) { [EOL]         throw new IllegalArgumentException("Can not construct SimpleType for an array (class: " + cls.getName() + ")"); [EOL]     } [EOL]     return new SimpleType(cls); [EOL] } <line_num>: 84,100
@Override [EOL] public SimpleType withTypeHandler(Object h) { [EOL]     return new SimpleType(_class, _typeNames, _typeParameters, _valueHandler, h, _asStatic); [EOL] } <line_num>: 102,106
@Override [EOL] public JavaType withContentTypeHandler(Object h) { [EOL]     throw new IllegalArgumentException("Simple types have no content types; can not call withContenTypeHandler()"); [EOL] } <line_num>: 108,112
@Override [EOL] public SimpleType withValueHandler(Object h) { [EOL]     if (h == _valueHandler) { [EOL]         return this; [EOL]     } [EOL]     return new SimpleType(_class, _typeNames, _typeParameters, h, _typeHandler, _asStatic); [EOL] } <line_num>: 114,120
@Override [EOL] public SimpleType withContentValueHandler(Object h) { [EOL]     throw new IllegalArgumentException("Simple types have no content types; can not call withContenValueHandler()"); [EOL] } <line_num>: 122,126
@Override [EOL] public SimpleType withStaticTyping() { [EOL]     return _asStatic ? this : new SimpleType(_class, _typeNames, _typeParameters, _valueHandler, _typeHandler, _asStatic); [EOL] } <line_num>: 128,132
@Override [EOL] protected String buildCanonicalName() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append(_class.getName()); [EOL]     if (_typeParameters != null && _typeParameters.length > 0) { [EOL]         sb.append('<'); [EOL]         boolean first = true; [EOL]         for (JavaType t : _typeParameters) { [EOL]             if (first) { [EOL]                 first = false; [EOL]             } else { [EOL]                 sb.append(','); [EOL]             } [EOL]             sb.append(t.toCanonical()); [EOL]         } [EOL]         sb.append('>'); [EOL]     } [EOL]     return sb.toString(); [EOL] } <line_num>: 134,153
@Override [EOL] public boolean isContainerType() { [EOL]     return false; [EOL] } <line_num>: 161,162
@Override [EOL] public int containedTypeCount() { [EOL]     return (_typeParameters == null) ? 0 : _typeParameters.length; [EOL] } <line_num>: 164,167
@Override [EOL] public JavaType containedType(int index) { [EOL]     if (index < 0 || _typeParameters == null || index >= _typeParameters.length) { [EOL]         return null; [EOL]     } [EOL]     return _typeParameters[index]; [EOL] } <line_num>: 169,176
@Override [EOL] public String containedTypeName(int index) { [EOL]     if (index < 0 || _typeNames == null || index >= _typeNames.length) { [EOL]         return null; [EOL]     } [EOL]     return _typeNames[index]; [EOL] } <line_num>: 178,185
@Override [EOL] public StringBuilder getErasedSignature(StringBuilder sb) { [EOL]     return _classSignature(_class, sb, true); [EOL] } <line_num>: 187,190
@Override [EOL] public StringBuilder getGenericSignature(StringBuilder sb) { [EOL]     _classSignature(_class, sb, false); [EOL]     if (_typeParameters != null) { [EOL]         sb.append('<'); [EOL]         for (JavaType param : _typeParameters) { [EOL]             sb = param.getGenericSignature(sb); [EOL]         } [EOL]         sb.append('>'); [EOL]     } [EOL]     sb.append(';'); [EOL]     return sb; [EOL] } <line_num>: 192,205
@Override [EOL] public String toString() { [EOL]     StringBuilder sb = new StringBuilder(40); [EOL]     sb.append("[simple type, class ").append(buildCanonicalName()).append(']'); [EOL]     return sb.toString(); [EOL] } <line_num>: 213,219
@Override [EOL] public boolean equals(Object o) { [EOL]     if (o == this) [EOL]         return true; [EOL]     if (o == null) [EOL]         return false; [EOL]     if (o.getClass() != getClass()) [EOL]         return false; [EOL]     SimpleType other = (SimpleType) o; [EOL]     if (other._class != this._class) [EOL]         return false; [EOL]     JavaType[] p1 = _typeParameters; [EOL]     JavaType[] p2 = other._typeParameters; [EOL]     if (p1 == null) { [EOL]         return (p2 == null) || p2.length == 0; [EOL]     } [EOL]     if (p2 == null) [EOL]         return false; [EOL]     if (p1.length != p2.length) [EOL]         return false; [EOL]     for (int i = 0, len = p1.length; i < len; ++i) { [EOL]         if (!p1[i].equals(p2[i])) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 221,248
