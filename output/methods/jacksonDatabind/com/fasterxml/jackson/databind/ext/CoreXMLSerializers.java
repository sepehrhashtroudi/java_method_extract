public XMLGregorianCalendarSerializer() { [EOL]     super(XMLGregorianCalendar.class); [EOL] } <line_num>: 48,50
@Override [EOL] public JsonSerializer<?> findSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc) { [EOL]     Class<?> raw = type.getRawClass(); [EOL]     if (Duration.class.isAssignableFrom(raw) || QName.class.isAssignableFrom(raw)) { [EOL]         return ToStringSerializer.instance; [EOL]     } [EOL]     if (XMLGregorianCalendar.class.isAssignableFrom(raw)) { [EOL]         return XMLGregorianCalendarSerializer.instance; [EOL]     } [EOL]     return null; [EOL] } <line_num>: 30,42
@Override [EOL] public void serialize(XMLGregorianCalendar value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     CalendarSerializer.instance.serialize(value.toGregorianCalendar(), jgen, provider); [EOL] } <line_num>: 52,56
@Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException { [EOL]     return CalendarSerializer.instance.getSchema(provider, typeHint); [EOL] } <line_num>: 58,61
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     CalendarSerializer.instance.acceptJsonFormatVisitor(visitor, null); [EOL] } <line_num>: 63,68
