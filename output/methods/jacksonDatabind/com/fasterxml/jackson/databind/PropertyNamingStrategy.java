public String nameForField(MapperConfig<?> config, AnnotatedField field, String defaultName) { [EOL]     return defaultName; [EOL] } <line_num>: 52,56
public String nameForGetterMethod(MapperConfig<?> config, AnnotatedMethod method, String defaultName) { [EOL]     return defaultName; [EOL] } <line_num>: 73,77
public String nameForSetterMethod(MapperConfig<?> config, AnnotatedMethod method, String defaultName) { [EOL]     return defaultName; [EOL] } <line_num>: 93,97
public String nameForConstructorParameter(MapperConfig<?> config, AnnotatedParameter ctorParam, String defaultName) { [EOL]     return defaultName; [EOL] } <line_num>: 111,115
@Override [EOL] public String nameForField(MapperConfig<?> config, AnnotatedField field, String defaultName) { [EOL]     return translate(defaultName); [EOL] } <line_num>: 125,129
@Override [EOL] public String nameForGetterMethod(MapperConfig<?> config, AnnotatedMethod method, String defaultName) { [EOL]     return translate(defaultName); [EOL] } <line_num>: 131,135
@Override [EOL] public String nameForSetterMethod(MapperConfig<?> config, AnnotatedMethod method, String defaultName) { [EOL]     return translate(defaultName); [EOL] } <line_num>: 137,141
@Override [EOL] public String nameForConstructorParameter(MapperConfig<?> config, AnnotatedParameter ctorParam, String defaultName) { [EOL]     return translate(defaultName); [EOL] } <line_num>: 143,148
public abstract String translate(String propertyName); <line_num>: 150,150
@Override [EOL] public String translate(String input) { [EOL]     if (input == null) [EOL]         return input; [EOL]     int length = input.length(); [EOL]     StringBuilder result = new StringBuilder(length * 2); [EOL]     int resultLength = 0; [EOL]     boolean wasPrevTranslated = false; [EOL]     for (int i = 0; i < length; i++) { [EOL]         char c = input.charAt(i); [EOL]         if (i > 0 || c != '_') { [EOL]             if (Character.isUpperCase(c)) { [EOL]                 if (!wasPrevTranslated && resultLength > 0 && result.charAt(resultLength - 1) != '_') { [EOL]                     result.append('_'); [EOL]                     resultLength++; [EOL]                 } [EOL]                 c = Character.toLowerCase(c); [EOL]                 wasPrevTranslated = true; [EOL]             } else { [EOL]                 wasPrevTranslated = false; [EOL]             } [EOL]             result.append(c); [EOL]             resultLength++; [EOL]         } [EOL]     } [EOL]     return resultLength > 0 ? result.toString() : input; [EOL] } <line_num>: 217,249
@Override [EOL] public String translate(String input) { [EOL]     if (input == null || input.length() == 0) { [EOL]         return input; [EOL]     } [EOL]     char c = input.charAt(0); [EOL]     if (Character.isUpperCase(c)) { [EOL]         return input; [EOL]     } [EOL]     StringBuilder sb = new StringBuilder(input); [EOL]     sb.setCharAt(0, Character.toUpperCase(c)); [EOL]     return sb.toString(); [EOL] } <line_num>: 286,299
