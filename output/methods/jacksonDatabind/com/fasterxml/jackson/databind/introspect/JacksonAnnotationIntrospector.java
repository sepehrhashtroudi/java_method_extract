public JacksonAnnotationIntrospector() { [EOL] } <line_num>: 32,32
@Override [EOL] public Version version() { [EOL]     return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION; [EOL] } <line_num>: 34,37
@Override [EOL] @Deprecated [EOL] public boolean isHandled(Annotation ann) { [EOL]     Class<? extends Annotation> acls = ann.annotationType(); [EOL]     return acls.getAnnotation(JacksonAnnotation.class) != null; [EOL] } <line_num>: 46,52
@Override [EOL] public boolean isAnnotationBundle(Annotation ann) { [EOL]     return ann.annotationType().getAnnotation(JacksonAnnotationsInside.class) != null; [EOL] } <line_num>: 58,62
@Override [EOL] public PropertyName findRootName(AnnotatedClass ac) { [EOL]     JsonRootName ann = ac.getAnnotation(JsonRootName.class); [EOL]     if (ann == null) { [EOL]         return null; [EOL]     } [EOL]     return new PropertyName(ann.value()); [EOL] } <line_num>: 79,87
@Override [EOL] public String[] findPropertiesToIgnore(Annotated ac) { [EOL]     JsonIgnoreProperties ignore = ac.getAnnotation(JsonIgnoreProperties.class); [EOL]     return (ignore == null) ? null : ignore.value(); [EOL] } <line_num>: 89,93
@Override [EOL] public Boolean findIgnoreUnknownProperties(AnnotatedClass ac) { [EOL]     JsonIgnoreProperties ignore = ac.getAnnotation(JsonIgnoreProperties.class); [EOL]     return (ignore == null) ? null : ignore.ignoreUnknown(); [EOL] } <line_num>: 95,99
@Override [EOL] public Boolean isIgnorableType(AnnotatedClass ac) { [EOL]     JsonIgnoreType ignore = ac.getAnnotation(JsonIgnoreType.class); [EOL]     return (ignore == null) ? null : ignore.value(); [EOL] } <line_num>: 101,105
@Override [EOL] public Object findFilterId(AnnotatedClass ac) { [EOL]     JsonFilter ann = ac.getAnnotation(JsonFilter.class); [EOL]     if (ann != null) { [EOL]         String id = ann.value(); [EOL]         if (id.length() > 0) { [EOL]             return id; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 107,119
@Override [EOL] public Object findNamingStrategy(AnnotatedClass ac) { [EOL]     JsonNaming ann = ac.getAnnotation(JsonNaming.class); [EOL]     return (ann == null) ? null : ann.value(); [EOL] } <line_num>: 121,126
@Override [EOL] public VisibilityChecker<?> findAutoDetectVisibility(AnnotatedClass ac, VisibilityChecker<?> checker) { [EOL]     JsonAutoDetect ann = ac.getAnnotation(JsonAutoDetect.class); [EOL]     return (ann == null) ? checker : checker.with(ann); [EOL] } <line_num>: 134,140
@Override [EOL] public ReferenceProperty findReferenceType(AnnotatedMember member) { [EOL]     JsonManagedReference ref1 = member.getAnnotation(JsonManagedReference.class); [EOL]     if (ref1 != null) { [EOL]         return AnnotationIntrospector.ReferenceProperty.managed(ref1.value()); [EOL]     } [EOL]     JsonBackReference ref2 = member.getAnnotation(JsonBackReference.class); [EOL]     if (ref2 != null) { [EOL]         return AnnotationIntrospector.ReferenceProperty.back(ref2.value()); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 148,160
@Override [EOL] public NameTransformer findUnwrappingNameTransformer(AnnotatedMember member) { [EOL]     JsonUnwrapped ann = member.getAnnotation(JsonUnwrapped.class); [EOL]     if (ann == null || !ann.enabled()) { [EOL]         return null; [EOL]     } [EOL]     String prefix = ann.prefix(); [EOL]     String suffix = ann.suffix(); [EOL]     return NameTransformer.simpleTransformer(prefix, suffix); [EOL] } <line_num>: 162,174
@Override [EOL] public boolean hasIgnoreMarker(AnnotatedMember m) { [EOL]     return _isIgnorable(m); [EOL] } <line_num>: 176,179
@Override [EOL] public Boolean hasRequiredMarker(AnnotatedMember m) { [EOL]     JsonProperty ann = m.getAnnotation(JsonProperty.class); [EOL]     if (ann != null) { [EOL]         return ann.required(); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 181,189
@Override [EOL] public Object findInjectableValueId(AnnotatedMember m) { [EOL]     JacksonInject ann = m.getAnnotation(JacksonInject.class); [EOL]     if (ann == null) { [EOL]         return null; [EOL]     } [EOL]     String id = ann.value(); [EOL]     if (id.length() == 0) { [EOL]         if (!(m instanceof AnnotatedMethod)) { [EOL]             return m.getRawType().getName(); [EOL]         } [EOL]         AnnotatedMethod am = (AnnotatedMethod) m; [EOL]         if (am.getParameterCount() == 0) { [EOL]             return m.getRawType().getName(); [EOL]         } [EOL]         return am.getRawParameterType(0).getName(); [EOL]     } [EOL]     return id; [EOL] } <line_num>: 191,214
@Override [EOL] public TypeResolverBuilder<?> findTypeResolver(MapperConfig<?> config, AnnotatedClass ac, JavaType baseType) { [EOL]     return _findTypeResolver(config, ac, baseType); [EOL] } <line_num>: 222,227
@Override [EOL] public TypeResolverBuilder<?> findPropertyTypeResolver(MapperConfig<?> config, AnnotatedMember am, JavaType baseType) { [EOL]     if (baseType.isContainerType()) [EOL]         return null; [EOL]     return _findTypeResolver(config, am, baseType); [EOL] } <line_num>: 229,239
@Override [EOL] public TypeResolverBuilder<?> findPropertyContentTypeResolver(MapperConfig<?> config, AnnotatedMember am, JavaType containerType) { [EOL]     if (!containerType.isContainerType()) { [EOL]         throw new IllegalArgumentException("Must call method with a container type (got " + containerType + ")"); [EOL]     } [EOL]     return _findTypeResolver(config, am, containerType); [EOL] } <line_num>: 241,252
@Override [EOL] public List<NamedType> findSubtypes(Annotated a) { [EOL]     JsonSubTypes t = a.getAnnotation(JsonSubTypes.class); [EOL]     if (t == null) [EOL]         return null; [EOL]     JsonSubTypes.Type[] types = t.value(); [EOL]     ArrayList<NamedType> result = new ArrayList<NamedType>(types.length); [EOL]     for (JsonSubTypes.Type type : types) { [EOL]         result.add(new NamedType(type.value(), type.name())); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 254,265
@Override [EOL] public String findTypeName(AnnotatedClass ac) { [EOL]     JsonTypeName tn = ac.getAnnotation(JsonTypeName.class); [EOL]     return (tn == null) ? null : tn.value(); [EOL] } <line_num>: 267,272
@Override [EOL] public Object findSerializer(Annotated a) { [EOL]     JsonSerialize ann = a.getAnnotation(JsonSerialize.class); [EOL]     if (ann != null) { [EOL]         Class<? extends JsonSerializer<?>> serClass = ann.using(); [EOL]         if (serClass != JsonSerializer.None.class) { [EOL]             return serClass; [EOL]         } [EOL]     } [EOL]     JsonRawValue annRaw = a.getAnnotation(JsonRawValue.class); [EOL]     if ((annRaw != null) && annRaw.value()) { [EOL]         Class<?> cls = a.getRawType(); [EOL]         return new RawSerializer<Object>(cls); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 280,302
@Override [EOL] public Class<? extends JsonSerializer<?>> findKeySerializer(Annotated a) { [EOL]     JsonSerialize ann = a.getAnnotation(JsonSerialize.class); [EOL]     if (ann != null) { [EOL]         Class<? extends JsonSerializer<?>> serClass = ann.keyUsing(); [EOL]         if (serClass != JsonSerializer.None.class) { [EOL]             return serClass; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 304,315
@Override [EOL] public Class<? extends JsonSerializer<?>> findContentSerializer(Annotated a) { [EOL]     JsonSerialize ann = a.getAnnotation(JsonSerialize.class); [EOL]     if (ann != null) { [EOL]         Class<? extends JsonSerializer<?>> serClass = ann.contentUsing(); [EOL]         if (serClass != JsonSerializer.None.class) { [EOL]             return serClass; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 317,328
@Override [EOL] public JsonInclude.Include findSerializationInclusion(Annotated a, JsonInclude.Include defValue) { [EOL]     JsonInclude inc = a.getAnnotation(JsonInclude.class); [EOL]     if (inc != null) { [EOL]         return inc.value(); [EOL]     } [EOL]     JsonSerialize ann = a.getAnnotation(JsonSerialize.class); [EOL]     if (ann != null) { [EOL]         @SuppressWarnings("deprecation") [EOL]         JsonSerialize.Inclusion i2 = ann.include(); [EOL]         switch(i2) { [EOL]             case ALWAYS: [EOL]                 return JsonInclude.Include.ALWAYS; [EOL]             case NON_NULL: [EOL]                 return JsonInclude.Include.NON_NULL; [EOL]             case NON_DEFAULT: [EOL]                 return JsonInclude.Include.NON_DEFAULT; [EOL]             case NON_EMPTY: [EOL]                 return JsonInclude.Include.NON_EMPTY; [EOL]         } [EOL]     } [EOL]     return defValue; [EOL] } <line_num>: 330,353
@Override [EOL] public Class<?> findSerializationType(Annotated am) { [EOL]     JsonSerialize ann = am.getAnnotation(JsonSerialize.class); [EOL]     if (ann != null) { [EOL]         Class<?> cls = ann.as(); [EOL]         if (cls != NoClass.class) { [EOL]             return cls; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 355,366
@Override [EOL] public Class<?> findSerializationKeyType(Annotated am, JavaType baseType) { [EOL]     JsonSerialize ann = am.getAnnotation(JsonSerialize.class); [EOL]     if (ann != null) { [EOL]         Class<?> cls = ann.keyAs(); [EOL]         if (cls != NoClass.class) { [EOL]             return cls; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 368,379
@Override [EOL] public Class<?> findSerializationContentType(Annotated am, JavaType baseType) { [EOL]     JsonSerialize ann = am.getAnnotation(JsonSerialize.class); [EOL]     if (ann != null) { [EOL]         Class<?> cls = ann.contentAs(); [EOL]         if (cls != NoClass.class) { [EOL]             return cls; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 381,392
@Override [EOL] public JsonSerialize.Typing findSerializationTyping(Annotated a) { [EOL]     JsonSerialize ann = a.getAnnotation(JsonSerialize.class); [EOL]     return (ann == null) ? null : ann.typing(); [EOL] } <line_num>: 394,399
@Override [EOL] public Object findSerializationConverter(Annotated a) { [EOL]     JsonSerialize ann = a.getAnnotation(JsonSerialize.class); [EOL]     if (ann != null) { [EOL]         Class<?> def = ann.converter(); [EOL]         if (def != Converter.None.class) { [EOL]             return def; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 401,411
@Override [EOL] public Object findSerializationContentConverter(AnnotatedMember a) { [EOL]     JsonSerialize ann = a.getAnnotation(JsonSerialize.class); [EOL]     if (ann != null) { [EOL]         Class<?> def = ann.contentConverter(); [EOL]         if (def != Converter.None.class) { [EOL]             return def; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 413,423
@Override [EOL] public Class<?>[] findViews(Annotated a) { [EOL]     JsonView ann = a.getAnnotation(JsonView.class); [EOL]     return (ann == null) ? null : ann.value(); [EOL] } <line_num>: 425,430
@Override [EOL] public Boolean isTypeId(AnnotatedMember member) { [EOL]     return member.hasAnnotation(JsonTypeId.class); [EOL] } <line_num>: 432,435
@Override [EOL] public ObjectIdInfo findObjectIdInfo(Annotated ann) { [EOL]     JsonIdentityInfo info = ann.getAnnotation(JsonIdentityInfo.class); [EOL]     if (info == null || info.generator() == ObjectIdGenerators.None.class) { [EOL]         return null; [EOL]     } [EOL]     return new ObjectIdInfo(info.property(), info.scope(), info.generator()); [EOL] } <line_num>: 437,444
@Override [EOL] public ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo) { [EOL]     JsonIdentityReference ref = ann.getAnnotation(JsonIdentityReference.class); [EOL]     if (ref != null) { [EOL]         objectIdInfo = objectIdInfo.withAlwaysAsId(ref.alwaysAsId()); [EOL]     } [EOL]     return objectIdInfo; [EOL] } <line_num>: 446,453
@Override [EOL] public JsonFormat.Value findFormat(AnnotatedMember member) { [EOL]     return findFormat(member); [EOL] } <line_num>: 455,458
@Override [EOL] public JsonFormat.Value findFormat(Annotated annotated) { [EOL]     JsonFormat ann = annotated.getAnnotation(JsonFormat.class); [EOL]     return (ann == null) ? null : new JsonFormat.Value(ann); [EOL] } <line_num>: 460,464
@Override [EOL] public String[] findSerializationPropertyOrder(AnnotatedClass ac) { [EOL]     JsonPropertyOrder order = ac.getAnnotation(JsonPropertyOrder.class); [EOL]     return (order == null) ? null : order.value(); [EOL] } <line_num>: 472,476
@Override [EOL] public Boolean findSerializationSortAlphabetically(AnnotatedClass ac) { [EOL]     JsonPropertyOrder order = ac.getAnnotation(JsonPropertyOrder.class); [EOL]     return (order == null) ? null : order.alphabetic(); [EOL] } <line_num>: 478,482
@Override [EOL] public PropertyName findNameForSerialization(Annotated a) { [EOL]     String name; [EOL]     if (a instanceof AnnotatedField) { [EOL]         name = findSerializationName((AnnotatedField) a); [EOL]     } else if (a instanceof AnnotatedMethod) { [EOL]         name = findSerializationName((AnnotatedMethod) a); [EOL]     } else { [EOL]         name = null; [EOL]     } [EOL]     if (name != null) { [EOL]         if (name.length() == 0) { [EOL]             return PropertyName.USE_DEFAULT; [EOL]         } [EOL]         return new PropertyName(name); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 490,510
@Override [EOL] public String findSerializationName(AnnotatedField af) { [EOL]     JsonProperty pann = af.getAnnotation(JsonProperty.class); [EOL]     if (pann != null) { [EOL]         return pann.value(); [EOL]     } [EOL]     if (af.hasAnnotation(JsonSerialize.class) || af.hasAnnotation(JsonView.class)) { [EOL]         return ""; [EOL]     } [EOL]     return null; [EOL] } <line_num>: 512,525
@Override [EOL] public String findSerializationName(AnnotatedMethod am) { [EOL]     JsonGetter ann = am.getAnnotation(JsonGetter.class); [EOL]     if (ann != null) { [EOL]         return ann.value(); [EOL]     } [EOL]     JsonProperty pann = am.getAnnotation(JsonProperty.class); [EOL]     if (pann != null) { [EOL]         return pann.value(); [EOL]     } [EOL]     if (am.hasAnnotation(JsonSerialize.class) || am.hasAnnotation(JsonView.class)) { [EOL]         return ""; [EOL]     } [EOL]     return null; [EOL] } <line_num>: 527,547
@Override [EOL] public boolean hasAsValueAnnotation(AnnotatedMethod am) { [EOL]     JsonValue ann = am.getAnnotation(JsonValue.class); [EOL]     return (ann != null && ann.value()); [EOL] } <line_num>: 549,555
@Override [EOL] public Class<? extends JsonDeserializer<?>> findDeserializer(Annotated a) { [EOL]     JsonDeserialize ann = a.getAnnotation(JsonDeserialize.class); [EOL]     if (ann != null) { [EOL]         Class<? extends JsonDeserializer<?>> deserClass = ann.using(); [EOL]         if (deserClass != JsonDeserializer.None.class) { [EOL]             return deserClass; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 563,574
@Override [EOL] public Class<? extends KeyDeserializer> findKeyDeserializer(Annotated a) { [EOL]     JsonDeserialize ann = a.getAnnotation(JsonDeserialize.class); [EOL]     if (ann != null) { [EOL]         Class<? extends KeyDeserializer> deserClass = ann.keyUsing(); [EOL]         if (deserClass != KeyDeserializer.None.class) { [EOL]             return deserClass; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 576,587
@Override [EOL] public Class<? extends JsonDeserializer<?>> findContentDeserializer(Annotated a) { [EOL]     JsonDeserialize ann = a.getAnnotation(JsonDeserialize.class); [EOL]     if (ann != null) { [EOL]         Class<? extends JsonDeserializer<?>> deserClass = ann.contentUsing(); [EOL]         if (deserClass != JsonDeserializer.None.class) { [EOL]             return deserClass; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 589,600
@Override [EOL] public Class<?> findDeserializationType(Annotated am, JavaType baseType) { [EOL]     JsonDeserialize ann = am.getAnnotation(JsonDeserialize.class); [EOL]     if (ann != null) { [EOL]         Class<?> cls = ann.as(); [EOL]         if (cls != NoClass.class) { [EOL]             return cls; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 602,614
@Override [EOL] public Class<?> findDeserializationKeyType(Annotated am, JavaType baseKeyType) { [EOL]     JsonDeserialize ann = am.getAnnotation(JsonDeserialize.class); [EOL]     if (ann != null) { [EOL]         Class<?> cls = ann.keyAs(); [EOL]         if (cls != NoClass.class) { [EOL]             return cls; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 616,628
@Override [EOL] public Class<?> findDeserializationContentType(Annotated am, JavaType baseContentType) { [EOL]     JsonDeserialize ann = am.getAnnotation(JsonDeserialize.class); [EOL]     if (ann != null) { [EOL]         Class<?> cls = ann.contentAs(); [EOL]         if (cls != NoClass.class) { [EOL]             return cls; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 630,642
@Override [EOL] public Object findDeserializationConverter(Annotated a) { [EOL]     JsonDeserialize ann = a.getAnnotation(JsonDeserialize.class); [EOL]     if (ann != null) { [EOL]         Class<?> def = ann.converter(); [EOL]         if (def != Converter.None.class) { [EOL]             return def; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 644,655
@Override [EOL] public Object findDeserializationContentConverter(AnnotatedMember a) { [EOL]     JsonDeserialize ann = a.getAnnotation(JsonDeserialize.class); [EOL]     if (ann != null) { [EOL]         Class<?> def = ann.contentConverter(); [EOL]         if (def != Converter.None.class) { [EOL]             return def; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 657,667
@Override [EOL] public Object findValueInstantiator(AnnotatedClass ac) { [EOL]     JsonValueInstantiator ann = ac.getAnnotation(JsonValueInstantiator.class); [EOL]     return (ann == null) ? null : ann.value(); [EOL] } <line_num>: 675,681
@Override [EOL] public Class<?> findPOJOBuilder(AnnotatedClass ac) { [EOL]     JsonDeserialize ann = ac.getAnnotation(JsonDeserialize.class); [EOL]     return ((ann == null) || (ann.builder() == NoClass.class)) ? null : ann.builder(); [EOL] } <line_num>: 683,689
@Override [EOL] public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac) { [EOL]     JsonPOJOBuilder ann = ac.getAnnotation(JsonPOJOBuilder.class); [EOL]     return (ann == null) ? null : new JsonPOJOBuilder.Value(ann); [EOL] } <line_num>: 691,696
@Override [EOL] public PropertyName findNameForDeserialization(Annotated a) { [EOL]     String name; [EOL]     if (a instanceof AnnotatedField) { [EOL]         name = findDeserializationName((AnnotatedField) a); [EOL]     } else if (a instanceof AnnotatedMethod) { [EOL]         name = findDeserializationName((AnnotatedMethod) a); [EOL]     } else if (a instanceof AnnotatedParameter) { [EOL]         name = findDeserializationName((AnnotatedParameter) a); [EOL]     } else { [EOL]         name = null; [EOL]     } [EOL]     if (name != null) { [EOL]         if (name.length() == 0) { [EOL]             return PropertyName.USE_DEFAULT; [EOL]         } [EOL]         return new PropertyName(name); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 704,726
@Override [EOL] public String findDeserializationName(AnnotatedMethod am) { [EOL]     JsonSetter ann = am.getAnnotation(JsonSetter.class); [EOL]     if (ann != null) { [EOL]         return ann.value(); [EOL]     } [EOL]     JsonProperty pann = am.getAnnotation(JsonProperty.class); [EOL]     if (pann != null) { [EOL]         return pann.value(); [EOL]     } [EOL]     if (am.hasAnnotation(JsonDeserialize.class) || am.hasAnnotation(JsonView.class) || am.hasAnnotation(JsonBackReference.class) || am.hasAnnotation(JsonManagedReference.class)) { [EOL]         return ""; [EOL]     } [EOL]     return null; [EOL] } <line_num>: 728,751
@Override [EOL] public String findDeserializationName(AnnotatedField af) { [EOL]     JsonProperty pann = af.getAnnotation(JsonProperty.class); [EOL]     if (pann != null) { [EOL]         return pann.value(); [EOL]     } [EOL]     if (af.hasAnnotation(JsonDeserialize.class) || af.hasAnnotation(JsonView.class) || af.hasAnnotation(JsonBackReference.class) || af.hasAnnotation(JsonManagedReference.class)) { [EOL]         return ""; [EOL]     } [EOL]     return null; [EOL] } <line_num>: 753,770
@Override [EOL] public String findDeserializationName(AnnotatedParameter param) { [EOL]     if (param != null) { [EOL]         JsonProperty pann = param.getAnnotation(JsonProperty.class); [EOL]         if (pann != null) { [EOL]             return pann.value(); [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 771,785
@Override [EOL] public boolean hasAnySetterAnnotation(AnnotatedMethod am) { [EOL]     return am.hasAnnotation(JsonAnySetter.class); [EOL] } <line_num>: 787,795
@Override [EOL] public boolean hasAnyGetterAnnotation(AnnotatedMethod am) { [EOL]     return am.hasAnnotation(JsonAnyGetter.class); [EOL] } <line_num>: 797,804
@Override [EOL] public boolean hasCreatorAnnotation(Annotated a) { [EOL]     return a.hasAnnotation(JsonCreator.class); [EOL] } <line_num>: 806,814
protected boolean _isIgnorable(Annotated a) { [EOL]     JsonIgnore ann = a.getAnnotation(JsonIgnore.class); [EOL]     return (ann != null && ann.value()); [EOL] } <line_num>: 822,826
protected TypeResolverBuilder<?> _findTypeResolver(MapperConfig<?> config, Annotated ann, JavaType baseType) { [EOL]     TypeResolverBuilder<?> b; [EOL]     JsonTypeInfo info = ann.getAnnotation(JsonTypeInfo.class); [EOL]     JsonTypeResolver resAnn = ann.getAnnotation(JsonTypeResolver.class); [EOL]     if (resAnn != null) { [EOL]         if (info == null) { [EOL]             return null; [EOL]         } [EOL]         b = config.typeResolverBuilderInstance(ann, resAnn.value()); [EOL]     } else { [EOL]         if (info == null) { [EOL]             return null; [EOL]         } [EOL]         if (info.use() == JsonTypeInfo.Id.NONE) { [EOL]             return _constructNoTypeResolverBuilder(); [EOL]         } [EOL]         b = _constructStdTypeResolverBuilder(); [EOL]     } [EOL]     JsonTypeIdResolver idResInfo = ann.getAnnotation(JsonTypeIdResolver.class); [EOL]     TypeIdResolver idRes = (idResInfo == null) ? null : config.typeIdResolverInstance(ann, idResInfo.value()); [EOL]     if (idRes != null) { [EOL]         idRes.init(baseType); [EOL]     } [EOL]     b = b.init(info.use(), idRes); [EOL]     JsonTypeInfo.As inclusion = info.include(); [EOL]     if (inclusion == JsonTypeInfo.As.EXTERNAL_PROPERTY && (ann instanceof AnnotatedClass)) { [EOL]         inclusion = JsonTypeInfo.As.PROPERTY; [EOL]     } [EOL]     b = b.inclusion(inclusion); [EOL]     b = b.typeProperty(info.property()); [EOL]     Class<?> defaultImpl = info.defaultImpl(); [EOL]     if (defaultImpl != JsonTypeInfo.None.class) { [EOL]         b = b.defaultImpl(defaultImpl); [EOL]     } [EOL]     b = b.typeIdVisibility(info.visible()); [EOL]     return b; [EOL] } <line_num>: 832,883
protected StdTypeResolverBuilder _constructStdTypeResolverBuilder() { [EOL]     return new StdTypeResolverBuilder(); [EOL] } <line_num>: 889,891
protected StdTypeResolverBuilder _constructNoTypeResolverBuilder() { [EOL]     return StdTypeResolverBuilder.noTypeInfoBuilder(); [EOL] } <line_num>: 897,899
