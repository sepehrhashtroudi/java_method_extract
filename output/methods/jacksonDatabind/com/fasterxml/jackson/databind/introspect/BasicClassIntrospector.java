public BasicClassIntrospector() { [EOL] } <line_num>: 53,53
@Override [EOL] public BasicBeanDescription forSerialization(SerializationConfig cfg, JavaType type, MixInResolver r) { [EOL]     BasicBeanDescription desc = _findCachedDesc(type); [EOL]     if (desc == null) { [EOL]         desc = BasicBeanDescription.forSerialization(collectProperties(cfg, type, r, true, "set")); [EOL]     } [EOL]     return desc; [EOL] } <line_num>: 61,72
@Override [EOL] public BasicBeanDescription forDeserialization(DeserializationConfig cfg, JavaType type, MixInResolver r) { [EOL]     BasicBeanDescription desc = _findCachedDesc(type); [EOL]     if (desc == null) { [EOL]         desc = BasicBeanDescription.forDeserialization(collectProperties(cfg, type, r, false, "set")); [EOL]     } [EOL]     return desc; [EOL] } <line_num>: 74,85
@Override [EOL] public BasicBeanDescription forDeserializationWithBuilder(DeserializationConfig cfg, JavaType type, MixInResolver r) { [EOL]     return BasicBeanDescription.forDeserialization(collectPropertiesWithBuilder(cfg, type, r, false)); [EOL] } <line_num>: 87,94
@Override [EOL] public BasicBeanDescription forCreation(DeserializationConfig cfg, JavaType type, MixInResolver r) { [EOL]     BasicBeanDescription desc = _findCachedDesc(type); [EOL]     if (desc == null) { [EOL]         desc = BasicBeanDescription.forDeserialization(collectProperties(cfg, type, r, false, "set")); [EOL]     } [EOL]     return desc; [EOL] } <line_num>: 96,106
@Override [EOL] public BasicBeanDescription forClassAnnotations(MapperConfig<?> cfg, JavaType type, MixInResolver r) { [EOL]     boolean useAnnotations = cfg.isAnnotationProcessingEnabled(); [EOL]     AnnotatedClass ac = AnnotatedClass.construct(type.getRawClass(), (useAnnotations ? cfg.getAnnotationIntrospector() : null), r); [EOL]     return BasicBeanDescription.forOtherUse(cfg, type, ac); [EOL] } <line_num>: 108,116
@Override [EOL] public BasicBeanDescription forDirectClassAnnotations(MapperConfig<?> cfg, JavaType type, MixInResolver r) { [EOL]     boolean useAnnotations = cfg.isAnnotationProcessingEnabled(); [EOL]     AnnotationIntrospector ai = cfg.getAnnotationIntrospector(); [EOL]     AnnotatedClass ac = AnnotatedClass.constructWithoutSuperTypes(type.getRawClass(), (useAnnotations ? ai : null), r); [EOL]     return BasicBeanDescription.forOtherUse(cfg, type, ac); [EOL] } <line_num>: 118,127
protected POJOPropertiesCollector collectProperties(MapperConfig<?> config, JavaType type, MixInResolver r, boolean forSerialization, String mutatorPrefix) { [EOL]     boolean useAnnotations = config.isAnnotationProcessingEnabled(); [EOL]     AnnotatedClass ac = AnnotatedClass.construct(type.getRawClass(), (useAnnotations ? config.getAnnotationIntrospector() : null), r); [EOL]     return constructPropertyCollector(config, ac, type, forSerialization, mutatorPrefix).collect(); [EOL] } <line_num>: 135,143
protected POJOPropertiesCollector collectPropertiesWithBuilder(MapperConfig<?> config, JavaType type, MixInResolver r, boolean forSerialization) { [EOL]     boolean useAnnotations = config.isAnnotationProcessingEnabled(); [EOL]     AnnotationIntrospector ai = useAnnotations ? config.getAnnotationIntrospector() : null; [EOL]     AnnotatedClass ac = AnnotatedClass.construct(type.getRawClass(), ai, r); [EOL]     JsonPOJOBuilder.Value builderConfig = (ai == null) ? null : ai.findPOJOBuilderConfig(ac); [EOL]     String mutatorPrefix = (builderConfig == null) ? "with" : builderConfig.withPrefix; [EOL]     return constructPropertyCollector(config, ac, type, forSerialization, mutatorPrefix).collect(); [EOL] } <line_num>: 145,154
protected POJOPropertiesCollector constructPropertyCollector(MapperConfig<?> config, AnnotatedClass ac, JavaType type, boolean forSerialization, String mutatorPrefix) { [EOL]     return new POJOPropertiesCollector(config, forSerialization, type, ac, mutatorPrefix); [EOL] } <line_num>: 160,165
protected BasicBeanDescription _findCachedDesc(JavaType type) { [EOL]     Class<?> cls = type.getRawClass(); [EOL]     if (cls == String.class) { [EOL]         return STRING_DESC; [EOL]     } [EOL]     if (cls == Boolean.TYPE) { [EOL]         return BOOLEAN_DESC; [EOL]     } [EOL]     if (cls == Integer.TYPE) { [EOL]         return INT_DESC; [EOL]     } [EOL]     if (cls == Long.TYPE) { [EOL]         return LONG_DESC; [EOL]     } [EOL]     return null; [EOL] } <line_num>: 171,187
