public SerializationConfig(BaseSettings base, SubtypeResolver str, Map<ClassKey, Class<?>> mixins) { [EOL]     super(base, str, mixins); [EOL]     _serFeatures = collectFeatureDefaults(SerializationFeature.class); [EOL]     _filterProvider = null; [EOL] } <line_num>: 71,77
private SerializationConfig(SerializationConfig src, SubtypeResolver str) { [EOL]     super(src, str); [EOL]     _serFeatures = src._serFeatures; [EOL]     _serializationInclusion = src._serializationInclusion; [EOL]     _filterProvider = src._filterProvider; [EOL] } <line_num>: 79,85
private SerializationConfig(SerializationConfig src, int mapperFeatures, int serFeatures) { [EOL]     super(src, mapperFeatures); [EOL]     _serFeatures = serFeatures; [EOL]     _serializationInclusion = src._serializationInclusion; [EOL]     _filterProvider = src._filterProvider; [EOL] } <line_num>: 87,94
private SerializationConfig(SerializationConfig src, BaseSettings base) { [EOL]     super(src, base); [EOL]     _serFeatures = src._serFeatures; [EOL]     _serializationInclusion = src._serializationInclusion; [EOL]     _filterProvider = src._filterProvider; [EOL] } <line_num>: 96,102
private SerializationConfig(SerializationConfig src, FilterProvider filters) { [EOL]     super(src); [EOL]     _serFeatures = src._serFeatures; [EOL]     _serializationInclusion = src._serializationInclusion; [EOL]     _filterProvider = filters; [EOL] } <line_num>: 104,110
private SerializationConfig(SerializationConfig src, Class<?> view) { [EOL]     super(src, view); [EOL]     _serFeatures = src._serFeatures; [EOL]     _serializationInclusion = src._serializationInclusion; [EOL]     _filterProvider = src._filterProvider; [EOL] } <line_num>: 112,118
private SerializationConfig(SerializationConfig src, JsonInclude.Include incl) { [EOL]     super(src); [EOL]     _serFeatures = src._serFeatures; [EOL]     _serializationInclusion = incl; [EOL]     _filterProvider = src._filterProvider; [EOL] } <line_num>: 120,126
private SerializationConfig(SerializationConfig src, String rootName) { [EOL]     super(src, rootName); [EOL]     _serFeatures = src._serFeatures; [EOL]     _serializationInclusion = src._serializationInclusion; [EOL]     _filterProvider = src._filterProvider; [EOL] } <line_num>: 128,134
protected SerializationConfig(SerializationConfig src, Map<ClassKey, Class<?>> mixins) { [EOL]     super(src, mixins); [EOL]     _serFeatures = src._serFeatures; [EOL]     _serializationInclusion = src._serializationInclusion; [EOL]     _filterProvider = src._filterProvider; [EOL] } <line_num>: 139,145
@Override [EOL] public SerializationConfig with(MapperFeature... features) { [EOL]     int newMapperFlags = _mapperFeatures; [EOL]     for (MapperFeature f : features) { [EOL]         newMapperFlags |= f.getMask(); [EOL]     } [EOL]     return (newMapperFlags == _mapperFeatures) ? this : new SerializationConfig(this, newMapperFlags, _serFeatures); [EOL] } <line_num>: 157,166
@Override [EOL] public SerializationConfig without(MapperFeature... features) { [EOL]     int newMapperFlags = _mapperFeatures; [EOL]     for (MapperFeature f : features) { [EOL]         newMapperFlags &= ~f.getMask(); [EOL]     } [EOL]     return (newMapperFlags == _mapperFeatures) ? this : new SerializationConfig(this, newMapperFlags, _serFeatures); [EOL] } <line_num>: 172,181
@Override [EOL] public SerializationConfig with(AnnotationIntrospector ai) { [EOL]     return _withBase(_base.withAnnotationIntrospector(ai)); [EOL] } <line_num>: 183,186
@Override [EOL] public SerializationConfig withAppendedAnnotationIntrospector(AnnotationIntrospector ai) { [EOL]     return _withBase(_base.withAppendedAnnotationIntrospector(ai)); [EOL] } <line_num>: 188,191
@Override [EOL] public SerializationConfig withInsertedAnnotationIntrospector(AnnotationIntrospector ai) { [EOL]     return _withBase(_base.withInsertedAnnotationIntrospector(ai)); [EOL] } <line_num>: 193,196
@Override [EOL] public SerializationConfig with(ClassIntrospector ci) { [EOL]     return _withBase(_base.withClassIntrospector(ci)); [EOL] } <line_num>: 198,201
@Override [EOL] public SerializationConfig with(DateFormat df) { [EOL]     SerializationConfig cfg = new SerializationConfig(this, _base.withDateFormat(df)); [EOL]     if (df == null) { [EOL]         cfg = cfg.with(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     } else { [EOL]         cfg = cfg.without(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     } [EOL]     return cfg; [EOL] } <line_num>: 208,218
@Override [EOL] public SerializationConfig with(HandlerInstantiator hi) { [EOL]     return _withBase(_base.withHandlerInstantiator(hi)); [EOL] } <line_num>: 220,223
@Override [EOL] public SerializationConfig with(PropertyNamingStrategy pns) { [EOL]     return _withBase(_base.withPropertyNamingStrategy(pns)); [EOL] } <line_num>: 225,228
@Override [EOL] public SerializationConfig withRootName(String rootName) { [EOL]     if (rootName == null) { [EOL]         if (_rootName == null) { [EOL]             return this; [EOL]         } [EOL]     } else if (rootName.equals(_rootName)) { [EOL]         return this; [EOL]     } [EOL]     return new SerializationConfig(this, rootName); [EOL] } <line_num>: 230,240
@Override [EOL] public SerializationConfig with(SubtypeResolver str) { [EOL]     return (str == _subtypeResolver) ? this : new SerializationConfig(this, str); [EOL] } <line_num>: 242,245
@Override [EOL] public SerializationConfig with(TypeFactory tf) { [EOL]     return _withBase(_base.withTypeFactory(tf)); [EOL] } <line_num>: 247,250
@Override [EOL] public SerializationConfig with(TypeResolverBuilder<?> trb) { [EOL]     return _withBase(_base.withTypeResolverBuilder(trb)); [EOL] } <line_num>: 252,255
@Override [EOL] public SerializationConfig withView(Class<?> view) { [EOL]     return (_view == view) ? this : new SerializationConfig(this, view); [EOL] } <line_num>: 257,260
@Override [EOL] public SerializationConfig with(VisibilityChecker<?> vc) { [EOL]     return _withBase(_base.withVisibilityChecker(vc)); [EOL] } <line_num>: 262,265
@Override [EOL] public SerializationConfig withVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility) { [EOL]     return _withBase(_base.withVisibility(forMethod, visibility)); [EOL] } <line_num>: 267,270
@Override [EOL] public SerializationConfig with(Locale l) { [EOL]     return _withBase(_base.with(l)); [EOL] } <line_num>: 272,275
@Override [EOL] public SerializationConfig with(TimeZone tz) { [EOL]     return _withBase(_base.with(tz)); [EOL] } <line_num>: 277,280
@Override [EOL] public SerializationConfig with(Base64Variant base64) { [EOL]     return _withBase(_base.with(base64)); [EOL] } <line_num>: 282,285
private final SerializationConfig _withBase(BaseSettings newBase) { [EOL]     return (_base == newBase) ? this : new SerializationConfig(this, newBase); [EOL] } <line_num>: 287,289
public SerializationConfig with(SerializationFeature feature) { [EOL]     int newSerFeatures = _serFeatures | feature.getMask(); [EOL]     return (newSerFeatures == _serFeatures) ? this : new SerializationConfig(this, _mapperFeatures, newSerFeatures); [EOL] } <line_num>: 301,306
public SerializationConfig with(SerializationFeature first, SerializationFeature... features) { [EOL]     int newSerFeatures = _serFeatures | first.getMask(); [EOL]     for (SerializationFeature f : features) { [EOL]         newSerFeatures |= f.getMask(); [EOL]     } [EOL]     return (newSerFeatures == _serFeatures) ? this : new SerializationConfig(this, _mapperFeatures, newSerFeatures); [EOL] } <line_num>: 312,320
public SerializationConfig withFeatures(SerializationFeature... features) { [EOL]     int newSerFeatures = _serFeatures; [EOL]     for (SerializationFeature f : features) { [EOL]         newSerFeatures |= f.getMask(); [EOL]     } [EOL]     return (newSerFeatures == _serFeatures) ? this : new SerializationConfig(this, _mapperFeatures, newSerFeatures); [EOL] } <line_num>: 326,334
public SerializationConfig without(SerializationFeature feature) { [EOL]     int newSerFeatures = _serFeatures & ~feature.getMask(); [EOL]     return (newSerFeatures == _serFeatures) ? this : new SerializationConfig(this, _mapperFeatures, newSerFeatures); [EOL] } <line_num>: 340,345
public SerializationConfig without(SerializationFeature first, SerializationFeature... features) { [EOL]     int newSerFeatures = _serFeatures & ~first.getMask(); [EOL]     for (SerializationFeature f : features) { [EOL]         newSerFeatures &= ~f.getMask(); [EOL]     } [EOL]     return (newSerFeatures == _serFeatures) ? this : new SerializationConfig(this, _mapperFeatures, newSerFeatures); [EOL] } <line_num>: 351,359
public SerializationConfig withoutFeatures(SerializationFeature... features) { [EOL]     int newSerFeatures = _serFeatures; [EOL]     for (SerializationFeature f : features) { [EOL]         newSerFeatures &= ~f.getMask(); [EOL]     } [EOL]     return (newSerFeatures == _serFeatures) ? this : new SerializationConfig(this, _mapperFeatures, newSerFeatures); [EOL] } <line_num>: 365,373
public SerializationConfig withFilters(FilterProvider filterProvider) { [EOL]     return (filterProvider == _filterProvider) ? this : new SerializationConfig(this, filterProvider); [EOL] } <line_num>: 375,377
public SerializationConfig withSerializationInclusion(JsonInclude.Include incl) { [EOL]     return (_serializationInclusion == incl) ? this : new SerializationConfig(this, incl); [EOL] } <line_num>: 379,381
@Override [EOL] public boolean useRootWrapping() { [EOL]     if (_rootName != null) { [EOL]         return (_rootName.length() > 0); [EOL]     } [EOL]     return isEnabled(SerializationFeature.WRAP_ROOT_VALUE); [EOL] } <line_num>: 389,396
@Override [EOL] public AnnotationIntrospector getAnnotationIntrospector() { [EOL]     if (isEnabled(MapperFeature.USE_ANNOTATIONS)) { [EOL]         return super.getAnnotationIntrospector(); [EOL]     } [EOL]     return AnnotationIntrospector.nopInstance(); [EOL] } <line_num>: 398,408
@Override [EOL] public BeanDescription introspectClassAnnotations(JavaType type) { [EOL]     return getClassIntrospector().forClassAnnotations(this, type, this); [EOL] } <line_num>: 414,417
@Override [EOL] public BeanDescription introspectDirectClassAnnotations(JavaType type) { [EOL]     return getClassIntrospector().forDirectClassAnnotations(this, type, this); [EOL] } <line_num>: 424,427
@Override [EOL] public VisibilityChecker<?> getDefaultVisibilityChecker() { [EOL]     VisibilityChecker<?> vchecker = super.getDefaultVisibilityChecker(); [EOL]     if (!isEnabled(MapperFeature.AUTO_DETECT_GETTERS)) { [EOL]         vchecker = vchecker.withGetterVisibility(Visibility.NONE); [EOL]     } [EOL]     if (!isEnabled(MapperFeature.AUTO_DETECT_IS_GETTERS)) { [EOL]         vchecker = vchecker.withIsGetterVisibility(Visibility.NONE); [EOL]     } [EOL]     if (!isEnabled(MapperFeature.AUTO_DETECT_FIELDS)) { [EOL]         vchecker = vchecker.withFieldVisibility(Visibility.NONE); [EOL]     } [EOL]     return vchecker; [EOL] } <line_num>: 429,444
public final boolean isEnabled(SerializationFeature f) { [EOL]     return (_serFeatures & f.getMask()) != 0; [EOL] } <line_num>: 452,454
public final int getSerializationFeatures() { [EOL]     return _serFeatures; [EOL] } <line_num>: 456,458
public JsonInclude.Include getSerializationInclusion() { [EOL]     if (_serializationInclusion != null) { [EOL]         return _serializationInclusion; [EOL]     } [EOL]     return JsonInclude.Include.ALWAYS; [EOL] } <line_num>: 460,466
public FilterProvider getFilterProvider() { [EOL]     return _filterProvider; [EOL] } <line_num>: 474,476
@SuppressWarnings("unchecked") [EOL] public <T extends BeanDescription> T introspect(JavaType type) { [EOL]     return (T) getClassIntrospector().forSerialization(this, type, this); [EOL] } <line_num>: 488,491
@Override [EOL] public String toString() { [EOL]     return "[SerializationConfig: flags=0x" + Integer.toHexString(_serFeatures) + "]"; [EOL] } <line_num>: 499,502
