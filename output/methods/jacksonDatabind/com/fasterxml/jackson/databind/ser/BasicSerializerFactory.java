protected BasicSerializerFactory(SerializerFactoryConfig config) { [EOL]     _factoryConfig = (config == null) ? new SerializerFactoryConfig() : config; [EOL] } <line_num>: 140,142
public SerializerFactoryConfig getFactoryConfig() { [EOL]     return _factoryConfig; [EOL] } <line_num>: 151,153
public abstract SerializerFactory withConfig(SerializerFactoryConfig config); <line_num>: 165,165
@Override [EOL] public final SerializerFactory withAdditionalSerializers(Serializers additional) { [EOL]     return withConfig(_factoryConfig.withAdditionalSerializers(additional)); [EOL] } <line_num>: 171,174
@Override [EOL] public final SerializerFactory withAdditionalKeySerializers(Serializers additional) { [EOL]     return withConfig(_factoryConfig.withAdditionalKeySerializers(additional)); [EOL] } <line_num>: 180,183
@Override [EOL] public final SerializerFactory withSerializerModifier(BeanSerializerModifier modifier) { [EOL]     return withConfig(_factoryConfig.withSerializerModifier(modifier)); [EOL] } <line_num>: 189,192
@Override [EOL] public abstract JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType type) throws JsonMappingException; <line_num>: 201,204
@Override [EOL] @SuppressWarnings("unchecked") [EOL] public JsonSerializer<Object> createKeySerializer(SerializationConfig config, JavaType keyType, JsonSerializer<Object> defaultImpl) { [EOL]     BeanDescription beanDesc = config.introspectClassAnnotations(keyType.getRawClass()); [EOL]     JsonSerializer<?> ser = null; [EOL]     if (_factoryConfig.hasKeySerializers()) { [EOL]         for (Serializers serializers : _factoryConfig.keySerializers()) { [EOL]             ser = serializers.findSerializer(config, keyType, beanDesc); [EOL]             if (ser != null) { [EOL]                 break; [EOL]             } [EOL]         } [EOL]     } [EOL]     if (ser == null) { [EOL]         ser = defaultImpl; [EOL]         if (ser == null) { [EOL]             ser = StdKeySerializers.getStdKeySerializer(keyType); [EOL]         } [EOL]     } [EOL]     if (_factoryConfig.hasSerializerModifiers()) { [EOL]         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) { [EOL]             ser = mod.modifyKeySerializer(config, keyType, beanDesc, ser); [EOL]         } [EOL]     } [EOL]     return (JsonSerializer<Object>) ser; [EOL] } <line_num>: 206,238
@Override [EOL] public TypeSerializer createTypeSerializer(SerializationConfig config, JavaType baseType) { [EOL]     BeanDescription bean = config.introspectClassAnnotations(baseType.getRawClass()); [EOL]     AnnotatedClass ac = bean.getClassInfo(); [EOL]     AnnotationIntrospector ai = config.getAnnotationIntrospector(); [EOL]     TypeResolverBuilder<?> b = ai.findTypeResolver(config, ac, baseType); [EOL]     Collection<NamedType> subtypes = null; [EOL]     if (b == null) { [EOL]         b = config.getDefaultTyper(baseType); [EOL]     } else { [EOL]         subtypes = config.getSubtypeResolver().collectAndResolveSubtypes(ac, config, ai); [EOL]     } [EOL]     if (b == null) { [EOL]         return null; [EOL]     } [EOL]     return b.buildTypeSerializer(config, baseType, subtypes); [EOL] } <line_num>: 245,266
public final JsonSerializer<?> getNullSerializer() { [EOL]     return NullSerializer.instance; [EOL] } <line_num>: 274,276
protected abstract Iterable<Serializers> customSerializers(); <line_num>: 278,278
protected final JsonSerializer<?> findSerializerByLookup(JavaType type, SerializationConfig config, BeanDescription beanDesc, boolean staticTyping) { [EOL]     Class<?> raw = type.getRawClass(); [EOL]     String clsName = raw.getName(); [EOL]     JsonSerializer<?> ser = _concrete.get(clsName); [EOL]     if (ser == null) { [EOL]         Class<? extends JsonSerializer<?>> serClass = _concreteLazy.get(clsName); [EOL]         if (serClass != null) { [EOL]             try { [EOL]                 return serClass.newInstance(); [EOL]             } catch (Exception e) { [EOL]                 throw new IllegalStateException("Failed to instantiate standard serializer (of type " + serClass.getName() + "): " + e.getMessage(), e); [EOL]             } [EOL]         } [EOL]     } [EOL]     return ser; [EOL] } <line_num>: 290,309
protected final JsonSerializer<?> findSerializerByAnnotations(SerializerProvider prov, JavaType type, BeanDescription beanDesc) throws JsonMappingException { [EOL]     Class<?> raw = type.getRawClass(); [EOL]     if (JsonSerializable.class.isAssignableFrom(raw)) { [EOL]         return SerializableSerializer.instance; [EOL]     } [EOL]     AnnotatedMethod valueMethod = beanDesc.findJsonValueMethod(); [EOL]     if (valueMethod != null) { [EOL]         Method m = valueMethod.getAnnotated(); [EOL]         if (prov.canOverrideAccessModifiers()) { [EOL]             ClassUtil.checkAndFixAccess(m); [EOL]         } [EOL]         JsonSerializer<Object> ser = findSerializerFromAnnotation(prov, valueMethod); [EOL]         return new JsonValueSerializer(m, ser); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 327,348
protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException { [EOL]     Class<?> raw = type.getRawClass(); [EOL]     if (InetAddress.class.isAssignableFrom(raw)) { [EOL]         return InetAddressSerializer.instance; [EOL]     } [EOL]     if (TimeZone.class.isAssignableFrom(raw)) { [EOL]         return TimeZoneSerializer.instance; [EOL]     } [EOL]     if (java.nio.charset.Charset.class.isAssignableFrom(raw)) { [EOL]         return ToStringSerializer.instance; [EOL]     } [EOL]     JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping); [EOL]     if (ser != null) { [EOL]         return ser; [EOL]     } [EOL]     if (Number.class.isAssignableFrom(raw)) { [EOL]         return NumberSerializers.NumberSerializer.instance; [EOL]     } [EOL]     if (Enum.class.isAssignableFrom(raw)) { [EOL]         return buildEnumSerializer(prov.getConfig(), type, beanDesc); [EOL]     } [EOL]     if (Calendar.class.isAssignableFrom(raw)) { [EOL]         return CalendarSerializer.instance; [EOL]     } [EOL]     if (java.util.Date.class.isAssignableFrom(raw)) { [EOL]         return DateSerializer.instance; [EOL]     } [EOL]     return null; [EOL] } <line_num>: 357,395
protected JsonSerializer<?> findOptionalStdSerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException { [EOL]     return OptionalHandlerFactory.instance.findSerializer(prov.getConfig(), type, beanDesc); [EOL] } <line_num>: 402,407
protected final JsonSerializer<?> findSerializerByAddonType(SerializationConfig config, JavaType javaType, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException { [EOL]     Class<?> type = javaType.getRawClass(); [EOL]     if (Iterator.class.isAssignableFrom(type)) { [EOL]         return buildIteratorSerializer(config, javaType, beanDesc, staticTyping); [EOL]     } [EOL]     if (Iterable.class.isAssignableFrom(type)) { [EOL]         return buildIterableSerializer(config, javaType, beanDesc, staticTyping); [EOL]     } [EOL]     if (CharSequence.class.isAssignableFrom(type)) { [EOL]         return ToStringSerializer.instance; [EOL]     } [EOL]     return null; [EOL] } <line_num>: 417,435
@SuppressWarnings("unchecked") [EOL] protected JsonSerializer<Object> findSerializerFromAnnotation(SerializerProvider prov, Annotated a) throws JsonMappingException { [EOL]     Object serDef = prov.getAnnotationIntrospector().findSerializer(a); [EOL]     if (serDef == null) { [EOL]         return null; [EOL]     } [EOL]     JsonSerializer<Object> ser = prov.serializerInstance(a, serDef); [EOL]     return (JsonSerializer<Object>) findConvertingSerializer(prov, a, ser); [EOL] } <line_num>: 444,456
protected JsonSerializer<?> findConvertingSerializer(SerializerProvider prov, Annotated a, JsonSerializer<?> ser) throws JsonMappingException { [EOL]     Converter<Object, Object> conv = findConverter(prov, a); [EOL]     if (conv == null) { [EOL]         return ser; [EOL]     } [EOL]     JavaType delegateType = conv.getOutputType(prov.getTypeFactory()); [EOL]     return new StdDelegatingSerializer(conv, delegateType, ser); [EOL] } <line_num>: 464,474
protected Converter<Object, Object> findConverter(SerializerProvider prov, Annotated a) throws JsonMappingException { [EOL]     Object convDef = prov.getAnnotationIntrospector().findSerializationConverter(a); [EOL]     if (convDef == null) { [EOL]         return null; [EOL]     } [EOL]     return prov.converterInstance(a, convDef); [EOL] } <line_num>: 476,485
@Deprecated [EOL] protected final JsonSerializer<?> buildContainerSerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException { [EOL]     return buildContainerSerializer(prov, type, beanDesc, staticTyping); [EOL] } <line_num>: 499,505
protected JsonSerializer<?> buildContainerSerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException { [EOL]     final SerializationConfig config = prov.getConfig(); [EOL]     if (!staticTyping && type.useStaticType()) { [EOL]         if (!type.isContainerType() || type.getContentType().getRawClass() != Object.class) { [EOL]             staticTyping = true; [EOL]         } [EOL]     } [EOL]     JavaType elementType = type.getContentType(); [EOL]     TypeSerializer elementTypeSerializer = createTypeSerializer(config, elementType); [EOL]     if (elementTypeSerializer != null) { [EOL]         staticTyping = false; [EOL]     } [EOL]     JsonSerializer<Object> elementValueSerializer = _findContentSerializer(prov, beanDesc.getClassInfo()); [EOL]     if (type.isMapLikeType()) { [EOL]         MapLikeType mlt = (MapLikeType) type; [EOL]         JsonSerializer<Object> keySerializer = _findKeySerializer(prov, beanDesc.getClassInfo()); [EOL]         if (mlt.isTrueMapType()) { [EOL]             return buildMapSerializer(config, (MapType) mlt, beanDesc, staticTyping, keySerializer, elementTypeSerializer, elementValueSerializer); [EOL]         } [EOL]         for (Serializers serializers : customSerializers()) { [EOL]             MapLikeType mlType = (MapLikeType) type; [EOL]             JsonSerializer<?> ser = serializers.findMapLikeSerializer(config, mlType, beanDesc, keySerializer, elementTypeSerializer, elementValueSerializer); [EOL]             if (ser != null) { [EOL]                 if (_factoryConfig.hasSerializerModifiers()) { [EOL]                     for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) { [EOL]                         ser = mod.modifyMapLikeSerializer(config, mlType, beanDesc, ser); [EOL]                     } [EOL]                 } [EOL]                 return ser; [EOL]             } [EOL]         } [EOL]         return null; [EOL]     } [EOL]     if (type.isCollectionLikeType()) { [EOL]         CollectionLikeType clt = (CollectionLikeType) type; [EOL]         if (clt.isTrueCollectionType()) { [EOL]             return buildCollectionSerializer(config, (CollectionType) clt, beanDesc, staticTyping, elementTypeSerializer, elementValueSerializer); [EOL]         } [EOL]         CollectionLikeType clType = (CollectionLikeType) type; [EOL]         for (Serializers serializers : customSerializers()) { [EOL]             JsonSerializer<?> ser = serializers.findCollectionLikeSerializer(config, clType, beanDesc, elementTypeSerializer, elementValueSerializer); [EOL]             if (ser != null) { [EOL]                 if (_factoryConfig.hasSerializerModifiers()) { [EOL]                     for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) { [EOL]                         ser = mod.modifyCollectionLikeSerializer(config, clType, beanDesc, ser); [EOL]                     } [EOL]                 } [EOL]                 return ser; [EOL]             } [EOL]         } [EOL]         return null; [EOL]     } [EOL]     if (type.isArrayType()) { [EOL]         return buildArraySerializer(config, (ArrayType) type, beanDesc, staticTyping, elementTypeSerializer, elementValueSerializer); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 510,596
@Deprecated [EOL] protected final JsonSerializer<?> buildCollectionSerializer(SerializationConfig config, CollectionType type, BeanDescription beanDesc, BeanProperty property, boolean staticTyping, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) throws JsonMappingException { [EOL]     return buildCollectionSerializer(config, type, beanDesc, staticTyping, elementTypeSerializer, elementValueSerializer); [EOL] } <line_num>: 604,614
protected JsonSerializer<?> buildCollectionSerializer(SerializationConfig config, CollectionType type, BeanDescription beanDesc, boolean staticTyping, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) throws JsonMappingException { [EOL]     JsonSerializer<?> ser = null; [EOL]     for (Serializers serializers : customSerializers()) { [EOL]         ser = serializers.findCollectionSerializer(config, type, beanDesc, elementTypeSerializer, elementValueSerializer); [EOL]         if (ser != null) { [EOL]             break; [EOL]         } [EOL]     } [EOL]     if (ser == null) { [EOL]         JsonFormat.Value format = beanDesc.findExpectedFormat(null); [EOL]         if (format != null && format.getShape() == JsonFormat.Shape.OBJECT) { [EOL]             return null; [EOL]         } [EOL]         Class<?> raw = type.getRawClass(); [EOL]         if (EnumSet.class.isAssignableFrom(raw)) { [EOL]             JavaType enumType = type.getContentType(); [EOL]             if (!enumType.isEnumType()) { [EOL]                 enumType = null; [EOL]             } [EOL]             ser = StdContainerSerializers.enumSetSerializer(enumType); [EOL]         } else { [EOL]             Class<?> elementRaw = type.getContentType().getRawClass(); [EOL]             if (isIndexedList(raw)) { [EOL]                 if (elementRaw == String.class) { [EOL]                     if (elementValueSerializer == null || ClassUtil.isJacksonStdImpl(elementValueSerializer)) { [EOL]                         ser = IndexedStringListSerializer.instance; [EOL]                     } [EOL]                 } else { [EOL]                     ser = StdContainerSerializers.indexedListSerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer); [EOL]                 } [EOL]             } else if (elementRaw == String.class) { [EOL]                 if (elementValueSerializer == null || ClassUtil.isJacksonStdImpl(elementValueSerializer)) { [EOL]                     ser = StringCollectionSerializer.instance; [EOL]                 } [EOL]             } [EOL]             if (ser == null) { [EOL]                 ser = StdContainerSerializers.collectionSerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer); [EOL]             } [EOL]         } [EOL]     } [EOL]     if (_factoryConfig.hasSerializerModifiers()) { [EOL]         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) { [EOL]             ser = mod.modifyCollectionSerializer(config, type, beanDesc, ser); [EOL]         } [EOL]     } [EOL]     return ser; [EOL] } <line_num>: 622,686
protected boolean isIndexedList(Class<?> cls) { [EOL]     return RandomAccess.class.isAssignableFrom(cls); [EOL] } <line_num>: 688,691
protected JsonSerializer<?> buildMapSerializer(SerializationConfig config, MapType type, BeanDescription beanDesc, boolean staticTyping, JsonSerializer<Object> keySerializer, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) throws JsonMappingException { [EOL]     JsonSerializer<?> ser = null; [EOL]     for (Serializers serializers : customSerializers()) { [EOL]         ser = serializers.findMapSerializer(config, type, beanDesc, keySerializer, elementTypeSerializer, elementValueSerializer); [EOL]         if (ser != null) { [EOL]             break; [EOL]         } [EOL]     } [EOL]     if (ser == null) { [EOL]         if (EnumMap.class.isAssignableFrom(type.getRawClass())) { [EOL]             JavaType keyType = type.getKeyType(); [EOL]             EnumValues enums = null; [EOL]             if (keyType.isEnumType()) { [EOL]                 @SuppressWarnings("unchecked") [EOL]                 Class<Enum<?>> enumClass = (Class<Enum<?>>) keyType.getRawClass(); [EOL]                 enums = EnumValues.construct(enumClass, config.getAnnotationIntrospector()); [EOL]             } [EOL]             ser = new EnumMapSerializer(type.getContentType(), staticTyping, enums, elementTypeSerializer, elementValueSerializer); [EOL]         } else { [EOL]             ser = MapSerializer.construct(config.getAnnotationIntrospector().findPropertiesToIgnore(beanDesc.getClassInfo()), type, staticTyping, elementTypeSerializer, keySerializer, elementValueSerializer); [EOL]         } [EOL]     } [EOL]     if (_factoryConfig.hasSerializerModifiers()) { [EOL]         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) { [EOL]             ser = mod.modifyMapSerializer(config, type, beanDesc, ser); [EOL]         } [EOL]     } [EOL]     return ser; [EOL] } <line_num>: 703,742
protected JsonSerializer<?> buildArraySerializer(SerializationConfig config, ArrayType type, BeanDescription beanDesc, boolean staticTyping, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) throws JsonMappingException { [EOL]     JsonSerializer<?> ser = null; [EOL]     for (Serializers serializers : customSerializers()) { [EOL]         ser = serializers.findArraySerializer(config, type, beanDesc, elementTypeSerializer, elementValueSerializer); [EOL]         if (ser != null) { [EOL]             break; [EOL]         } [EOL]     } [EOL]     if (ser == null) { [EOL]         Class<?> raw = type.getRawClass(); [EOL]         if (elementValueSerializer == null || ClassUtil.isJacksonStdImpl(elementValueSerializer)) { [EOL]             if (String[].class == raw) { [EOL]                 ser = StringArraySerializer.instance; [EOL]             } else { [EOL]                 ser = StdArraySerializers.findStandardImpl(raw); [EOL]             } [EOL]         } [EOL]         if (ser == null) { [EOL]             ser = new ObjectArraySerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer); [EOL]         } [EOL]     } [EOL]     if (_factoryConfig.hasSerializerModifiers()) { [EOL]         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) { [EOL]             ser = mod.modifyArraySerializer(config, type, beanDesc, ser); [EOL]         } [EOL]     } [EOL]     return ser; [EOL] } <line_num>: 754,792
protected JsonSerializer<?> buildIteratorSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException { [EOL]     JavaType valueType = type.containedType(0); [EOL]     if (valueType == null) { [EOL]         valueType = TypeFactory.unknownType(); [EOL]     } [EOL]     TypeSerializer vts = createTypeSerializer(config, valueType); [EOL]     return StdContainerSerializers.iteratorSerializer(valueType, usesStaticTyping(config, beanDesc, vts), vts); [EOL] } <line_num>: 800,813
protected JsonSerializer<?> buildIterableSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException { [EOL]     JavaType valueType = type.containedType(0); [EOL]     if (valueType == null) { [EOL]         valueType = TypeFactory.unknownType(); [EOL]     } [EOL]     TypeSerializer vts = createTypeSerializer(config, valueType); [EOL]     return StdContainerSerializers.iterableSerializer(valueType, usesStaticTyping(config, beanDesc, vts), vts); [EOL] } <line_num>: 815,828
protected JsonSerializer<?> buildEnumSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc) throws JsonMappingException { [EOL]     JsonFormat.Value format = beanDesc.findExpectedFormat(null); [EOL]     if (format != null && format.getShape() == JsonFormat.Shape.OBJECT) { [EOL]         ((BasicBeanDescription) beanDesc).removeProperty("declaringClass"); [EOL]         return null; [EOL]     } [EOL]     @SuppressWarnings("unchecked") [EOL]     Class<Enum<?>> enumClass = (Class<Enum<?>>) type.getRawClass(); [EOL]     JsonSerializer<?> ser = EnumSerializer.construct(enumClass, config, beanDesc, format); [EOL]     if (_factoryConfig.hasSerializerModifiers()) { [EOL]         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) { [EOL]             ser = mod.modifyEnumSerializer(config, type, beanDesc, ser); [EOL]         } [EOL]     } [EOL]     return ser; [EOL] } <line_num>: 830,856
@SuppressWarnings("unchecked") [EOL] protected <T extends JavaType> T modifyTypeByAnnotation(SerializationConfig config, Annotated a, T type) { [EOL]     Class<?> superclass = config.getAnnotationIntrospector().findSerializationType(a); [EOL]     if (superclass != null) { [EOL]         try { [EOL]             type = (T) type.widenBy(superclass); [EOL]         } catch (IllegalArgumentException iae) { [EOL]             throw new IllegalArgumentException("Failed to widen type " + type + " with concrete-type annotation (value " + superclass.getName() + "), method '" + a.getName() + "': " + iae.getMessage()); [EOL]         } [EOL]     } [EOL]     return modifySecondaryTypesByAnnotation(config, a, type); [EOL] } <line_num>: 867,881
@SuppressWarnings("unchecked") [EOL] protected static <T extends JavaType> T modifySecondaryTypesByAnnotation(SerializationConfig config, Annotated a, T type) { [EOL]     AnnotationIntrospector intr = config.getAnnotationIntrospector(); [EOL]     if (type.isContainerType()) { [EOL]         Class<?> keyClass = intr.findSerializationKeyType(a, type.getKeyType()); [EOL]         if (keyClass != null) { [EOL]             if (!(type instanceof MapType)) { [EOL]                 throw new IllegalArgumentException("Illegal key-type annotation: type " + type + " is not a Map type"); [EOL]             } [EOL]             try { [EOL]                 type = (T) ((MapType) type).widenKey(keyClass); [EOL]             } catch (IllegalArgumentException iae) { [EOL]                 throw new IllegalArgumentException("Failed to narrow key type " + type + " with key-type annotation (" + keyClass.getName() + "): " + iae.getMessage()); [EOL]             } [EOL]         } [EOL]         Class<?> cc = intr.findSerializationContentType(a, type.getContentType()); [EOL]         if (cc != null) { [EOL]             try { [EOL]                 type = (T) type.widenContentsBy(cc); [EOL]             } catch (IllegalArgumentException iae) { [EOL]                 throw new IllegalArgumentException("Failed to narrow content type " + type + " with content-type annotation (" + cc.getName() + "): " + iae.getMessage()); [EOL]             } [EOL]         } [EOL]     } [EOL]     return type; [EOL] } <line_num>: 883,914
protected JsonSerializer<Object> _findKeySerializer(SerializerProvider prov, Annotated a) throws JsonMappingException { [EOL]     AnnotationIntrospector intr = prov.getAnnotationIntrospector(); [EOL]     Object serDef = intr.findKeySerializer(a); [EOL]     if (serDef != null) { [EOL]         return prov.serializerInstance(a, serDef); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 921,931
protected JsonSerializer<Object> _findContentSerializer(SerializerProvider prov, Annotated a) throws JsonMappingException { [EOL]     AnnotationIntrospector intr = prov.getAnnotationIntrospector(); [EOL]     Object serDef = intr.findContentSerializer(a); [EOL]     if (serDef != null) { [EOL]         return prov.serializerInstance(a, serDef); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 938,948
@Deprecated [EOL] protected final boolean usesStaticTyping(SerializationConfig config, BeanDescription beanDesc, TypeSerializer typeSer, BeanProperty property) { [EOL]     return usesStaticTyping(config, beanDesc, typeSer); [EOL] } <line_num>: 953,958
protected boolean usesStaticTyping(SerializationConfig config, BeanDescription beanDesc, TypeSerializer typeSer) { [EOL]     if (typeSer != null) { [EOL]         return false; [EOL]     } [EOL]     AnnotationIntrospector intr = config.getAnnotationIntrospector(); [EOL]     JsonSerialize.Typing t = intr.findSerializationTyping(beanDesc.getClassInfo()); [EOL]     if (t != null) { [EOL]         return (t == JsonSerialize.Typing.STATIC); [EOL]     } [EOL]     return config.isEnabled(MapperFeature.USE_STATIC_TYPING); [EOL] } <line_num>: 968,983
protected Class<?> _verifyAsClass(Object src, String methodName, Class<?> noneClass) { [EOL]     if (src == null) { [EOL]         return null; [EOL]     } [EOL]     if (!(src instanceof Class)) { [EOL]         throw new IllegalStateException("AnnotationIntrospector." + methodName + "() returned value of type " + src.getClass().getName() + ": expected type JsonSerializer or Class<JsonSerializer> instead"); [EOL]     } [EOL]     Class<?> cls = (Class<?>) src; [EOL]     if (cls == noneClass || cls == NoClass.class) { [EOL]         return null; [EOL]     } [EOL]     return cls; [EOL] } <line_num>: 985,998
