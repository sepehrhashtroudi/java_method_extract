public EnumMapSerializer(JavaType valueType, boolean staticTyping, EnumValues keyEnums, TypeSerializer vts, JsonSerializer<Object> valueSerializer) { [EOL]     super(EnumMap.class, false); [EOL]     _property = null; [EOL]     _staticTyping = staticTyping || (valueType != null && valueType.isFinal()); [EOL]     _valueType = valueType; [EOL]     _keyEnums = keyEnums; [EOL]     _valueTypeSerializer = vts; [EOL]     _valueSerializer = valueSerializer; [EOL] } <line_num>: 67,77
@SuppressWarnings("unchecked") [EOL] public EnumMapSerializer(EnumMapSerializer src, BeanProperty property, JsonSerializer<?> ser) { [EOL]     super(src); [EOL]     _property = property; [EOL]     _staticTyping = src._staticTyping; [EOL]     _valueType = src._valueType; [EOL]     _keyEnums = src._keyEnums; [EOL]     _valueTypeSerializer = src._valueTypeSerializer; [EOL]     _valueSerializer = (JsonSerializer<Object>) ser; [EOL] } <line_num>: 82,93
@Override [EOL] public EnumMapSerializer _withValueTypeSerializer(TypeSerializer vts) { [EOL]     return new EnumMapSerializer(_valueType, _staticTyping, _keyEnums, vts, _valueSerializer); [EOL] } <line_num>: 95,98
public EnumMapSerializer withValueSerializer(BeanProperty prop, JsonSerializer<?> ser) { [EOL]     if (_property == prop && ser == _valueSerializer) { [EOL]         return this; [EOL]     } [EOL]     return new EnumMapSerializer(this, prop, ser); [EOL] } <line_num>: 100,105
@Override [EOL] public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException { [EOL]     JsonSerializer<?> ser = null; [EOL]     if (property != null) { [EOL]         AnnotatedMember m = property.getMember(); [EOL]         if (m != null) { [EOL]             Object serDef = provider.getAnnotationIntrospector().findContentSerializer(m); [EOL]             if (serDef != null) { [EOL]                 ser = provider.serializerInstance(m, serDef); [EOL]             } [EOL]         } [EOL]     } [EOL]     if (ser == null) { [EOL]         ser = _valueSerializer; [EOL]     } [EOL]     ser = findConvertingContentSerializer(provider, property, ser); [EOL]     if (ser == null) { [EOL]         if (_staticTyping) { [EOL]             return withValueSerializer(property, provider.findValueSerializer(_valueType, property)); [EOL]         } [EOL]     } else if (_valueSerializer instanceof ContextualSerializer) { [EOL]         ser = ((ContextualSerializer) ser).createContextual(provider, property); [EOL]     } [EOL]     if (ser != _valueSerializer) { [EOL]         return withValueSerializer(property, ser); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 107,143
@Override [EOL] public JavaType getContentType() { [EOL]     return _valueType; [EOL] } <line_num>: 151,154
@Override [EOL] public JsonSerializer<?> getContentSerializer() { [EOL]     return _valueSerializer; [EOL] } <line_num>: 156,159
@Override [EOL] public boolean isEmpty(EnumMap<? extends Enum<?>, ?> value) { [EOL]     return (value == null) || value.isEmpty(); [EOL] } <line_num>: 161,164
@Override [EOL] public boolean hasSingleElement(EnumMap<? extends Enum<?>, ?> value) { [EOL]     return value.size() == 1; [EOL] } <line_num>: 166,169
@Override [EOL] public void serialize(EnumMap<? extends Enum<?>, ?> value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     jgen.writeStartObject(); [EOL]     if (!value.isEmpty()) { [EOL]         serializeContents(value, jgen, provider); [EOL]     } [EOL]     jgen.writeEndObject(); [EOL] } <line_num>: 177,186
@Override [EOL] public void serializeWithType(EnumMap<? extends Enum<?>, ?> value, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException, JsonGenerationException { [EOL]     typeSer.writeTypePrefixForObject(value, jgen); [EOL]     if (!value.isEmpty()) { [EOL]         serializeContents(value, jgen, provider); [EOL]     } [EOL]     typeSer.writeTypeSuffixForObject(value, jgen); [EOL] } <line_num>: 188,198
protected void serializeContents(EnumMap<? extends Enum<?>, ?> value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     if (_valueSerializer != null) { [EOL]         serializeContentsUsing(value, jgen, provider, _valueSerializer); [EOL]         return; [EOL]     } [EOL]     JsonSerializer<Object> prevSerializer = null; [EOL]     Class<?> prevClass = null; [EOL]     EnumValues keyEnums = _keyEnums; [EOL]     final boolean skipNulls = !provider.isEnabled(SerializationFeature.WRITE_NULL_MAP_VALUES); [EOL]     final TypeSerializer vts = _valueTypeSerializer; [EOL]     for (Map.Entry<? extends Enum<?>, ?> entry : value.entrySet()) { [EOL]         final Object valueElem = entry.getValue(); [EOL]         if (skipNulls && valueElem == null) { [EOL]             continue; [EOL]         } [EOL]         Enum<?> key = entry.getKey(); [EOL]         if (keyEnums == null) { [EOL]             StdSerializer<?> ser = (StdSerializer<?>) provider.findValueSerializer(key.getDeclaringClass(), _property); [EOL]             keyEnums = ((EnumSerializer) ser).getEnumValues(); [EOL]         } [EOL]         jgen.writeFieldName(keyEnums.serializedValueFor(key)); [EOL]         if (valueElem == null) { [EOL]             provider.defaultSerializeNull(jgen); [EOL]             continue; [EOL]         } [EOL]         Class<?> cc = valueElem.getClass(); [EOL]         JsonSerializer<Object> currSerializer; [EOL]         if (cc == prevClass) { [EOL]             currSerializer = prevSerializer; [EOL]         } else { [EOL]             currSerializer = provider.findValueSerializer(cc, _property); [EOL]             prevSerializer = currSerializer; [EOL]             prevClass = cc; [EOL]         } [EOL]         try { [EOL]             if (vts == null) { [EOL]                 currSerializer.serialize(valueElem, jgen, provider); [EOL]             } else { [EOL]                 currSerializer.serializeWithType(valueElem, jgen, provider, vts); [EOL]             } [EOL]         } catch (Exception e) { [EOL]             wrapAndThrow(provider, e, value, entry.getKey().name()); [EOL]         } [EOL]     } [EOL] } <line_num>: 200,255
protected void serializeContentsUsing(EnumMap<? extends Enum<?>, ?> value, JsonGenerator jgen, SerializerProvider provider, JsonSerializer<Object> valueSer) throws IOException, JsonGenerationException { [EOL]     EnumValues keyEnums = _keyEnums; [EOL]     final boolean skipNulls = !provider.isEnabled(SerializationFeature.WRITE_NULL_MAP_VALUES); [EOL]     final TypeSerializer vts = _valueTypeSerializer; [EOL]     for (Map.Entry<? extends Enum<?>, ?> entry : value.entrySet()) { [EOL]         final Object valueElem = entry.getValue(); [EOL]         if (skipNulls && valueElem == null) { [EOL]             continue; [EOL]         } [EOL]         Enum<?> key = entry.getKey(); [EOL]         if (keyEnums == null) { [EOL]             StdSerializer<?> ser = (StdSerializer<?>) provider.findValueSerializer(key.getDeclaringClass(), _property); [EOL]             keyEnums = ((EnumSerializer) ser).getEnumValues(); [EOL]         } [EOL]         jgen.writeFieldName(keyEnums.serializedValueFor(key)); [EOL]         if (valueElem == null) { [EOL]             provider.defaultSerializeNull(jgen); [EOL]             continue; [EOL]         } [EOL]         try { [EOL]             if (vts == null) { [EOL]                 valueSer.serialize(valueElem, jgen, provider); [EOL]             } else { [EOL]                 valueSer.serializeWithType(valueElem, jgen, provider, vts); [EOL]             } [EOL]         } catch (Exception e) { [EOL]             wrapAndThrow(provider, e, value, entry.getKey().name()); [EOL]         } [EOL]     } [EOL] } <line_num>: 257,292
@SuppressWarnings({ "unchecked", "deprecation" }) [EOL] @Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException { [EOL]     ObjectNode o = createSchemaNode("object", true); [EOL]     if (typeHint instanceof ParameterizedType) { [EOL]         Type[] typeArgs = ((ParameterizedType) typeHint).getActualTypeArguments(); [EOL]         if (typeArgs.length == 2) { [EOL]             JavaType enumType = provider.constructType(typeArgs[0]); [EOL]             JavaType valueType = provider.constructType(typeArgs[1]); [EOL]             ObjectNode propsNode = JsonNodeFactory.instance.objectNode(); [EOL]             Class<Enum<?>> enumClass = (Class<Enum<?>>) enumType.getRawClass(); [EOL]             for (Enum<?> enumValue : enumClass.getEnumConstants()) { [EOL]                 JsonSerializer<Object> ser = provider.findValueSerializer(valueType.getRawClass(), _property); [EOL]                 JsonNode schemaNode = (ser instanceof SchemaAware) ? ((SchemaAware) ser).getSchema(provider, null) : com.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode(); [EOL]                 propsNode.put(provider.getConfig().getAnnotationIntrospector().findEnumValue((Enum<?>) enumValue), schemaNode); [EOL]             } [EOL]             o.put("properties", propsNode); [EOL]         } [EOL]     } [EOL]     return o; [EOL] } <line_num>: 294,318
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     if (visitor == null) { [EOL]         return; [EOL]     } [EOL]     JsonObjectFormatVisitor objectVisitor = visitor.expectObjectFormat(typeHint); [EOL]     if (objectVisitor == null) { [EOL]         return; [EOL]     } [EOL]     JavaType valueType = typeHint.containedType(1); [EOL]     JsonSerializer<Object> ser = _valueSerializer; [EOL]     if (ser == null && valueType != null) { [EOL]         ser = visitor.getProvider().findValueSerializer(valueType, _property); [EOL]     } [EOL]     if (valueType == null) { [EOL]         valueType = visitor.getProvider().constructType(Object.class); [EOL]     } [EOL]     EnumValues keyEnums = _keyEnums; [EOL]     if (keyEnums == null) { [EOL]         JavaType enumType = typeHint.containedType(0); [EOL]         if (enumType == null) { [EOL]             throw new IllegalStateException("Can not resolve Enum type of EnumMap: " + typeHint); [EOL]         } [EOL]         JsonSerializer<?> enumSer = (enumType == null) ? null : visitor.getProvider().findValueSerializer(enumType, _property); [EOL]         if (!(enumSer instanceof EnumSerializer)) { [EOL]             throw new IllegalStateException("Can not resolve Enum type of EnumMap: " + typeHint); [EOL]         } [EOL]         keyEnums = ((EnumSerializer) enumSer).getEnumValues(); [EOL]     } [EOL]     for (Map.Entry<?, SerializedString> entry : keyEnums.internalMap().entrySet()) { [EOL]         String name = entry.getValue().getValue(); [EOL]         if (ser == null) { [EOL]             ser = visitor.getProvider().findValueSerializer(entry.getKey().getClass(), _property); [EOL]         } [EOL]         objectVisitor.property(name, (JsonFormatVisitable) ser, valueType); [EOL]     } [EOL] } <line_num>: 325,365
