protected NumberSerializers() { [EOL] } <line_num>: 21,21
public ShortSerializer() { [EOL]     super(Short.class); [EOL] } <line_num>: 54,54
public IntegerSerializer() { [EOL]     super(Integer.class); [EOL] } <line_num>: 91,91
public IntLikeSerializer() { [EOL]     super(Number.class); [EOL] } <line_num>: 128,128
public LongSerializer() { [EOL]     super(Long.class); [EOL] } <line_num>: 160,160
public FloatSerializer() { [EOL]     super(Float.class); [EOL] } <line_num>: 192,192
public DoubleSerializer() { [EOL]     super(Double.class); [EOL] } <line_num>: 231,231
public NumberSerializer() { [EOL]     super(Number.class); [EOL] } <line_num>: 267,267
public static void addAll(Map<String, JsonSerializer<?>> allDeserializers) { [EOL]     final JsonSerializer<?> intS = new IntegerSerializer(); [EOL]     allDeserializers.put(Integer.class.getName(), intS); [EOL]     allDeserializers.put(Integer.TYPE.getName(), intS); [EOL]     allDeserializers.put(Long.class.getName(), LongSerializer.instance); [EOL]     allDeserializers.put(Long.TYPE.getName(), LongSerializer.instance); [EOL]     allDeserializers.put(Byte.class.getName(), IntLikeSerializer.instance); [EOL]     allDeserializers.put(Byte.TYPE.getName(), IntLikeSerializer.instance); [EOL]     allDeserializers.put(Short.class.getName(), ShortSerializer.instance); [EOL]     allDeserializers.put(Short.TYPE.getName(), ShortSerializer.instance); [EOL]     allDeserializers.put(Float.class.getName(), FloatSerializer.instance); [EOL]     allDeserializers.put(Float.TYPE.getName(), FloatSerializer.instance); [EOL]     allDeserializers.put(Double.class.getName(), DoubleSerializer.instance); [EOL]     allDeserializers.put(Double.TYPE.getName(), DoubleSerializer.instance); [EOL] } <line_num>: 23,40
@Override [EOL] public void serialize(Short value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     jgen.writeNumber(value.shortValue()); [EOL] } <line_num>: 56,61
@Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) { [EOL]     return createSchemaNode("number", true); [EOL] } <line_num>: 63,67
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint); [EOL]     if (v2 != null) { [EOL]         v2.numberType(JsonParser.NumberType.INT); [EOL]     } [EOL] } <line_num>: 69,77
@Override [EOL] public void serialize(Integer value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     jgen.writeNumber(value.intValue()); [EOL] } <line_num>: 93,98
@Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) { [EOL]     return createSchemaNode("integer", true); [EOL] } <line_num>: 100,104
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint); [EOL]     if (v2 != null) { [EOL]         v2.numberType(JsonParser.NumberType.INT); [EOL]     } [EOL] } <line_num>: 106,114
@Override [EOL] public void serialize(Number value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     jgen.writeNumber(value.intValue()); [EOL] } <line_num>: 130,135
@Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) { [EOL]     return createSchemaNode("integer", true); [EOL] } <line_num>: 137,141
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint); [EOL]     if (v2 != null) { [EOL]         v2.numberType(JsonParser.NumberType.INT); [EOL]     } [EOL] } <line_num>: 143,151
@Override [EOL] public void serialize(Long value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     jgen.writeNumber(value.longValue()); [EOL] } <line_num>: 162,167
@Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) { [EOL]     return createSchemaNode("number", true); [EOL] } <line_num>: 169,173
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint); [EOL]     if (v2 != null) { [EOL]         v2.numberType(JsonParser.NumberType.LONG); [EOL]     } [EOL] } <line_num>: 175,183
@Override [EOL] public void serialize(Float value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     jgen.writeNumber(value.floatValue()); [EOL] } <line_num>: 194,199
@Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) { [EOL]     return createSchemaNode("number", true); [EOL] } <line_num>: 201,205
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     JsonNumberFormatVisitor v2 = visitor.expectNumberFormat(typeHint); [EOL]     if (v2 != null) { [EOL]         v2.numberType(JsonParser.NumberType.FLOAT); [EOL]     } [EOL] } <line_num>: 207,215
@Override [EOL] public void serialize(Double value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     jgen.writeNumber(value.doubleValue()); [EOL] } <line_num>: 233,238
@Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) { [EOL]     return createSchemaNode("number", true); [EOL] } <line_num>: 240,244
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     JsonNumberFormatVisitor v2 = visitor.expectNumberFormat(typeHint); [EOL]     if (v2 != null) { [EOL]         v2.numberType(JsonParser.NumberType.DOUBLE); [EOL]     } [EOL] } <line_num>: 246,254
@Override [EOL] public void serialize(Number value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     if (value instanceof BigDecimal) { [EOL]         if (provider.isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN)) { [EOL]             jgen.writeNumber(((BigDecimal) value).toPlainString()); [EOL]         } else { [EOL]             jgen.writeNumber((BigDecimal) value); [EOL]         } [EOL]     } else if (value instanceof BigInteger) { [EOL]         jgen.writeNumber((BigInteger) value); [EOL]     } else if (value instanceof Integer) { [EOL]         jgen.writeNumber(value.intValue()); [EOL]     } else if (value instanceof Long) { [EOL]         jgen.writeNumber(value.longValue()); [EOL]     } else if (value instanceof Double) { [EOL]         jgen.writeNumber(value.doubleValue()); [EOL]     } else if (value instanceof Float) { [EOL]         jgen.writeNumber(value.floatValue()); [EOL]     } else if ((value instanceof Byte) || (value instanceof Short)) { [EOL]         jgen.writeNumber(value.intValue()); [EOL]     } else { [EOL]         jgen.writeNumber(value.toString()); [EOL]     } [EOL] } <line_num>: 269,300
@Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) { [EOL]     return createSchemaNode("number", true); [EOL] } <line_num>: 302,306
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     JsonNumberFormatVisitor v2 = visitor.expectNumberFormat(typeHint); [EOL]     if (v2 != null) { [EOL]         v2.numberType(JsonParser.NumberType.BIG_DECIMAL); [EOL]     } [EOL] } <line_num>: 308,318
