public JsonValueSerializer(Method valueMethod, JsonSerializer<Object> ser) { [EOL]     super(Object.class); [EOL]     _accessorMethod = valueMethod; [EOL]     _valueSerializer = ser; [EOL]     _property = null; [EOL]     _forceTypeInformation = true; [EOL] } <line_num>: 63,70
@SuppressWarnings("unchecked") [EOL] public JsonValueSerializer(JsonValueSerializer src, BeanProperty property, JsonSerializer<?> ser, boolean forceTypeInfo) { [EOL]     super(_notNullClass(src.handledType())); [EOL]     _accessorMethod = src._accessorMethod; [EOL]     _valueSerializer = (JsonSerializer<Object>) ser; [EOL]     _property = property; [EOL]     _forceTypeInformation = forceTypeInfo; [EOL] } <line_num>: 72,81
@SuppressWarnings("unchecked") [EOL] private final static Class<Object> _notNullClass(Class<?> cls) { [EOL]     return (cls == null) ? Object.class : (Class<Object>) cls; [EOL] } <line_num>: 83,86
public JsonValueSerializer withResolved(BeanProperty property, JsonSerializer<?> ser, boolean forceTypeInfo) { [EOL]     if (_property == property && _valueSerializer == ser && forceTypeInfo == _forceTypeInformation) { [EOL]         return this; [EOL]     } [EOL]     return new JsonValueSerializer(this, property, ser, forceTypeInfo); [EOL] } <line_num>: 88,96
@Override [EOL] public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException { [EOL]     JsonSerializer<?> ser = _valueSerializer; [EOL]     if (ser == null) { [EOL]         if (provider.isEnabled(MapperFeature.USE_STATIC_TYPING) || Modifier.isFinal(_accessorMethod.getReturnType().getModifiers())) { [EOL]             JavaType t = provider.constructType(_accessorMethod.getGenericReturnType()); [EOL]             ser = provider.findTypedValueSerializer(t, false, _property); [EOL]             boolean forceTypeInformation = isNaturalTypeWithStdHandling(t.getRawClass(), ser); [EOL]             return withResolved(property, ser, forceTypeInformation); [EOL]         } [EOL]     } else if (ser instanceof ContextualSerializer) { [EOL]         ser = ((ContextualSerializer) ser).createContextual(provider, property); [EOL]         return withResolved(property, ser, _forceTypeInformation); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 108,140
@Override [EOL] public void serialize(Object bean, JsonGenerator jgen, SerializerProvider prov) throws IOException, JsonGenerationException { [EOL]     try { [EOL]         Object value = _accessorMethod.invoke(bean); [EOL]         if (value == null) { [EOL]             prov.defaultSerializeNull(jgen); [EOL]             return; [EOL]         } [EOL]         JsonSerializer<Object> ser = _valueSerializer; [EOL]         if (ser == null) { [EOL]             Class<?> c = value.getClass(); [EOL]             ser = prov.findTypedValueSerializer(c, true, _property); [EOL]         } [EOL]         ser.serialize(value, jgen, prov); [EOL]     } catch (IOException ioe) { [EOL]         throw ioe; [EOL]     } catch (Exception e) { [EOL]         Throwable t = e; [EOL]         while (t instanceof InvocationTargetException && t.getCause() != null) { [EOL]             t = t.getCause(); [EOL]         } [EOL]         if (t instanceof Error) { [EOL]             throw (Error) t; [EOL]         } [EOL]         throw JsonMappingException.wrapWithPath(t, bean, _accessorMethod.getName() + "()"); [EOL]     } [EOL] } <line_num>: 148,184
@Override [EOL] public void serializeWithType(Object bean, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer0) throws IOException, JsonProcessingException { [EOL]     Object value = null; [EOL]     try { [EOL]         value = _accessorMethod.invoke(bean); [EOL]         if (value == null) { [EOL]             provider.defaultSerializeNull(jgen); [EOL]             return; [EOL]         } [EOL]         JsonSerializer<Object> ser = _valueSerializer; [EOL]         if (ser == null) { [EOL]             ser = provider.findValueSerializer(value.getClass(), _property); [EOL]         } else { [EOL]             if (_forceTypeInformation) { [EOL]                 typeSer0.writeTypePrefixForScalar(bean, jgen); [EOL]                 ser.serialize(value, jgen, provider); [EOL]                 typeSer0.writeTypeSuffixForScalar(bean, jgen); [EOL]                 return; [EOL]             } [EOL]         } [EOL]         ser.serializeWithType(value, jgen, provider, typeSer0); [EOL]     } catch (IOException ioe) { [EOL]         throw ioe; [EOL]     } catch (Exception e) { [EOL]         Throwable t = e; [EOL]         while (t instanceof InvocationTargetException && t.getCause() != null) { [EOL]             t = t.getCause(); [EOL]         } [EOL]         if (t instanceof Error) { [EOL]             throw (Error) t; [EOL]         } [EOL]         throw JsonMappingException.wrapWithPath(t, bean, _accessorMethod.getName() + "()"); [EOL]     } [EOL] } <line_num>: 186,236
@SuppressWarnings("deprecation") [EOL] @Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException { [EOL]     return (_valueSerializer instanceof SchemaAware) ? ((SchemaAware) _valueSerializer).getSchema(provider, null) : com.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode(); [EOL] } <line_num>: 238,246
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     if (_valueSerializer != null) { [EOL]         _valueSerializer.acceptJsonFormatVisitor(visitor, null); [EOL]     } else { [EOL]         visitor.expectAnyFormat(typeHint); [EOL]     } [EOL] } <line_num>: 248,257
protected boolean isNaturalTypeWithStdHandling(Class<?> rawType, JsonSerializer<?> ser) { [EOL]     if (rawType.isPrimitive()) { [EOL]         if (rawType != Integer.TYPE && rawType != Boolean.TYPE && rawType != Double.TYPE) { [EOL]             return false; [EOL]         } [EOL]     } else { [EOL]         if (rawType != String.class && rawType != Integer.class && rawType != Boolean.class && rawType != Double.class) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return isDefaultSerializer(ser); [EOL] } <line_num>: 259,273
@Override [EOL] public String toString() { [EOL]     return "(@JsonValue serializer for method " + _accessorMethod.getDeclaringClass() + "#" + _accessorMethod.getName() + ")"; [EOL] } <line_num>: 281,285
