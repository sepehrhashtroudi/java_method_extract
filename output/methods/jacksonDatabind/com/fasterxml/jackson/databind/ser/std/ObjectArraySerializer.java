public ObjectArraySerializer(JavaType elemType, boolean staticTyping, TypeSerializer vts, JsonSerializer<Object> elementSerializer) { [EOL]     super(Object[].class, null); [EOL]     _elementType = elemType; [EOL]     _staticTyping = staticTyping; [EOL]     _valueTypeSerializer = vts; [EOL]     _dynamicSerializers = PropertySerializerMap.emptyMap(); [EOL]     _elementSerializer = elementSerializer; [EOL] } <line_num>: 64,73
public ObjectArraySerializer(ObjectArraySerializer src, TypeSerializer vts) { [EOL]     super(src); [EOL]     _elementType = src._elementType; [EOL]     _valueTypeSerializer = vts; [EOL]     _staticTyping = src._staticTyping; [EOL]     _dynamicSerializers = src._dynamicSerializers; [EOL]     _elementSerializer = src._elementSerializer; [EOL] } <line_num>: 75,83
@SuppressWarnings("unchecked") [EOL] public ObjectArraySerializer(ObjectArraySerializer src, BeanProperty property, TypeSerializer vts, JsonSerializer<?> elementSerializer) { [EOL]     super(src, property); [EOL]     _elementType = src._elementType; [EOL]     _valueTypeSerializer = vts; [EOL]     _staticTyping = src._staticTyping; [EOL]     _dynamicSerializers = src._dynamicSerializers; [EOL]     _elementSerializer = (JsonSerializer<Object>) elementSerializer; [EOL] } <line_num>: 85,95
@Override [EOL] public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) { [EOL]     return new ObjectArraySerializer(_elementType, _staticTyping, vts, _elementSerializer); [EOL] } <line_num>: 97,101
public ObjectArraySerializer withResolved(BeanProperty prop, TypeSerializer vts, JsonSerializer<?> ser) { [EOL]     if (_property == prop && ser == _elementSerializer && _valueTypeSerializer == vts) { [EOL]         return this; [EOL]     } [EOL]     return new ObjectArraySerializer(this, prop, vts, ser); [EOL] } <line_num>: 103,109
@Override [EOL] public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException { [EOL]     TypeSerializer vts = _valueTypeSerializer; [EOL]     if (vts != null) { [EOL]         vts = vts.forProperty(property); [EOL]     } [EOL]     JsonSerializer<?> ser = null; [EOL]     if (property != null) { [EOL]         AnnotatedMember m = property.getMember(); [EOL]         if (m != null) { [EOL]             Object serDef = provider.getAnnotationIntrospector().findContentSerializer(m); [EOL]             if (serDef != null) { [EOL]                 ser = provider.serializerInstance(m, serDef); [EOL]             } [EOL]         } [EOL]     } [EOL]     if (ser == null) { [EOL]         ser = _elementSerializer; [EOL]     } [EOL]     ser = findConvertingContentSerializer(provider, property, ser); [EOL]     if (ser == null) { [EOL]         if (_elementType != null) { [EOL]             if (_staticTyping || hasContentTypeAnnotation(provider, property)) { [EOL]                 ser = provider.findValueSerializer(_elementType, property); [EOL]             } [EOL]         } [EOL]     } else if (ser instanceof ContextualSerializer) { [EOL]         ser = ((ContextualSerializer) ser).createContextual(provider, property); [EOL]     } [EOL]     return withResolved(property, vts, ser); [EOL] } <line_num>: 117,158
@Override [EOL] public JavaType getContentType() { [EOL]     return _elementType; [EOL] } <line_num>: 166,169
@Override [EOL] public JsonSerializer<?> getContentSerializer() { [EOL]     return _elementSerializer; [EOL] } <line_num>: 171,174
@Override [EOL] public boolean isEmpty(Object[] value) { [EOL]     return (value == null) || (value.length == 0); [EOL] } <line_num>: 176,179
@Override [EOL] public boolean hasSingleElement(Object[] value) { [EOL]     return (value.length == 1); [EOL] } <line_num>: 181,184
@Override [EOL] public void serializeContents(Object[] value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     final int len = value.length; [EOL]     if (len == 0) { [EOL]         return; [EOL]     } [EOL]     if (_elementSerializer != null) { [EOL]         serializeContentsUsing(value, jgen, provider, _elementSerializer); [EOL]         return; [EOL]     } [EOL]     if (_valueTypeSerializer != null) { [EOL]         serializeTypedContents(value, jgen, provider); [EOL]         return; [EOL]     } [EOL]     int i = 0; [EOL]     Object elem = null; [EOL]     try { [EOL]         PropertySerializerMap serializers = _dynamicSerializers; [EOL]         for (; i < len; ++i) { [EOL]             elem = value[i]; [EOL]             if (elem == null) { [EOL]                 provider.defaultSerializeNull(jgen); [EOL]                 continue; [EOL]             } [EOL]             Class<?> cc = elem.getClass(); [EOL]             JsonSerializer<Object> serializer = serializers.serializerFor(cc); [EOL]             if (serializer == null) { [EOL]                 if (_elementType.hasGenericTypes()) { [EOL]                     serializer = _findAndAddDynamic(serializers, provider.constructSpecializedType(_elementType, cc), provider); [EOL]                 } else { [EOL]                     serializer = _findAndAddDynamic(serializers, cc, provider); [EOL]                 } [EOL]             } [EOL]             serializer.serialize(elem, jgen, provider); [EOL]         } [EOL]     } catch (IOException ioe) { [EOL]         throw ioe; [EOL]     } catch (Exception e) { [EOL]         Throwable t = e; [EOL]         while (t instanceof InvocationTargetException && t.getCause() != null) { [EOL]             t = t.getCause(); [EOL]         } [EOL]         if (t instanceof Error) { [EOL]             throw (Error) t; [EOL]         } [EOL]         throw JsonMappingException.wrapWithPath(t, elem, i); [EOL]     } [EOL] } <line_num>: 192,248
public void serializeContentsUsing(Object[] value, JsonGenerator jgen, SerializerProvider provider, JsonSerializer<Object> ser) throws IOException, JsonGenerationException { [EOL]     final int len = value.length; [EOL]     final TypeSerializer typeSer = _valueTypeSerializer; [EOL]     int i = 0; [EOL]     Object elem = null; [EOL]     try { [EOL]         for (; i < len; ++i) { [EOL]             elem = value[i]; [EOL]             if (elem == null) { [EOL]                 provider.defaultSerializeNull(jgen); [EOL]                 continue; [EOL]             } [EOL]             if (typeSer == null) { [EOL]                 ser.serialize(elem, jgen, provider); [EOL]             } else { [EOL]                 ser.serializeWithType(elem, jgen, provider, typeSer); [EOL]             } [EOL]         } [EOL]     } catch (IOException ioe) { [EOL]         throw ioe; [EOL]     } catch (Exception e) { [EOL]         Throwable t = e; [EOL]         while (t instanceof InvocationTargetException && t.getCause() != null) { [EOL]             t = t.getCause(); [EOL]         } [EOL]         if (t instanceof Error) { [EOL]             throw (Error) t; [EOL]         } [EOL]         throw JsonMappingException.wrapWithPath(t, elem, i); [EOL]     } [EOL] } <line_num>: 250,284
public void serializeTypedContents(Object[] value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     final int len = value.length; [EOL]     final TypeSerializer typeSer = _valueTypeSerializer; [EOL]     int i = 0; [EOL]     Object elem = null; [EOL]     try { [EOL]         PropertySerializerMap serializers = _dynamicSerializers; [EOL]         for (; i < len; ++i) { [EOL]             elem = value[i]; [EOL]             if (elem == null) { [EOL]                 provider.defaultSerializeNull(jgen); [EOL]                 continue; [EOL]             } [EOL]             Class<?> cc = elem.getClass(); [EOL]             JsonSerializer<Object> serializer = serializers.serializerFor(cc); [EOL]             if (serializer == null) { [EOL]                 serializer = _findAndAddDynamic(serializers, cc, provider); [EOL]             } [EOL]             serializer.serializeWithType(elem, jgen, provider, typeSer); [EOL]         } [EOL]     } catch (IOException ioe) { [EOL]         throw ioe; [EOL]     } catch (Exception e) { [EOL]         Throwable t = e; [EOL]         while (t instanceof InvocationTargetException && t.getCause() != null) { [EOL]             t = t.getCause(); [EOL]         } [EOL]         if (t instanceof Error) { [EOL]             throw (Error) t; [EOL]         } [EOL]         throw JsonMappingException.wrapWithPath(t, elem, i); [EOL]     } [EOL] } <line_num>: 286,320
@SuppressWarnings("deprecation") [EOL] @Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException { [EOL]     ObjectNode o = createSchemaNode("array", true); [EOL]     if (typeHint != null) { [EOL]         JavaType javaType = provider.constructType(typeHint); [EOL]         if (javaType.isArrayType()) { [EOL]             Class<?> componentType = ((ArrayType) javaType).getContentType().getRawClass(); [EOL]             if (componentType == Object.class) { [EOL]                 o.put("items", com.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode()); [EOL]             } else { [EOL]                 JsonSerializer<Object> ser = provider.findValueSerializer(componentType, _property); [EOL]                 JsonNode schemaNode = (ser instanceof SchemaAware) ? ((SchemaAware) ser).getSchema(provider, null) : com.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode(); [EOL]                 o.put("items", schemaNode); [EOL]             } [EOL]         } [EOL]     } [EOL]     return o; [EOL] } <line_num>: 322,345
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     JsonArrayFormatVisitor arrayVisitor = visitor.expectArrayFormat(typeHint); [EOL]     if (arrayVisitor != null) { [EOL]         TypeFactory tf = visitor.getProvider().getTypeFactory(); [EOL]         JavaType contentType = tf.moreSpecificType(_elementType, typeHint.getContentType()); [EOL]         if (contentType == null) { [EOL]             throw new JsonMappingException("Could not resolve type"); [EOL]         } [EOL]         JsonSerializer<?> valueSer = _elementSerializer; [EOL]         if (valueSer == null) { [EOL]             valueSer = visitor.getProvider().findValueSerializer(contentType, _property); [EOL]         } [EOL]         arrayVisitor.itemsFormat(valueSer, contentType); [EOL]     } [EOL] } <line_num>: 347,364
protected final JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map, Class<?> type, SerializerProvider provider) throws JsonMappingException { [EOL]     PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property); [EOL]     if (map != result.map) { [EOL]         _dynamicSerializers = result.map; [EOL]     } [EOL]     return result.serializer; [EOL] } <line_num>: 366,375
protected final JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map, JavaType type, SerializerProvider provider) throws JsonMappingException { [EOL]     PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property); [EOL]     if (map != result.map) { [EOL]         _dynamicSerializers = result.map; [EOL]     } [EOL]     return result.serializer; [EOL] } <line_num>: 377,386
