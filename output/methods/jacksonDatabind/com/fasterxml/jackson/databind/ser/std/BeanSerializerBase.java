protected BeanSerializerBase(JavaType type, BeanSerializerBuilder builder, BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties) { [EOL]     super(type); [EOL]     _props = properties; [EOL]     _filteredProps = filteredProperties; [EOL]     if (builder == null) { [EOL]         _typeId = null; [EOL]         _anyGetterWriter = null; [EOL]         _propertyFilterId = null; [EOL]         _objectIdWriter = null; [EOL]         _serializationShape = null; [EOL]     } else { [EOL]         _typeId = builder.getTypeId(); [EOL]         _anyGetterWriter = builder.getAnyGetter(); [EOL]         _propertyFilterId = builder.getFilterId(); [EOL]         _objectIdWriter = builder.getObjectIdWriter(); [EOL]         JsonFormat.Value format = builder.getBeanDescription().findExpectedFormat(null); [EOL]         _serializationShape = (format == null) ? null : format.getShape(); [EOL]     } [EOL] } <line_num>: 104,124
public BeanSerializerBase(BeanSerializerBase src, BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties) { [EOL]     super(src._handledType); [EOL]     _props = properties; [EOL]     _filteredProps = filteredProperties; [EOL]     _typeId = src._typeId; [EOL]     _anyGetterWriter = src._anyGetterWriter; [EOL]     _objectIdWriter = src._objectIdWriter; [EOL]     _propertyFilterId = src._propertyFilterId; [EOL]     _serializationShape = src._serializationShape; [EOL] } <line_num>: 126,138
protected BeanSerializerBase(BeanSerializerBase src, ObjectIdWriter objectIdWriter) { [EOL]     super(src._handledType); [EOL]     _props = src._props; [EOL]     _filteredProps = src._filteredProps; [EOL]     _typeId = src._typeId; [EOL]     _anyGetterWriter = src._anyGetterWriter; [EOL]     _objectIdWriter = objectIdWriter; [EOL]     _propertyFilterId = src._propertyFilterId; [EOL]     _serializationShape = src._serializationShape; [EOL] } <line_num>: 140,151
protected BeanSerializerBase(BeanSerializerBase src, String[] toIgnore) { [EOL]     super(src._handledType); [EOL]     HashSet<String> ignoredSet = ArrayBuilders.arrayToSet(toIgnore); [EOL]     final BeanPropertyWriter[] propsIn = src._props; [EOL]     final BeanPropertyWriter[] fpropsIn = src._filteredProps; [EOL]     final int len = propsIn.length; [EOL]     ArrayList<BeanPropertyWriter> propsOut = new ArrayList<BeanPropertyWriter>(len); [EOL]     ArrayList<BeanPropertyWriter> fpropsOut = (fpropsIn == null) ? null : new ArrayList<BeanPropertyWriter>(len); [EOL]     for (int i = 0; i < len; ++i) { [EOL]         BeanPropertyWriter bpw = propsIn[i]; [EOL]         if (ignoredSet.contains(bpw.getName())) { [EOL]             continue; [EOL]         } [EOL]         propsOut.add(bpw); [EOL]         if (fpropsIn != null) { [EOL]             fpropsOut.add(fpropsIn[i]); [EOL]         } [EOL]     } [EOL]     _props = propsOut.toArray(new BeanPropertyWriter[propsOut.size()]); [EOL]     _filteredProps = (fpropsOut == null) ? null : fpropsOut.toArray(new BeanPropertyWriter[fpropsOut.size()]); [EOL]     _typeId = src._typeId; [EOL]     _anyGetterWriter = src._anyGetterWriter; [EOL]     _objectIdWriter = src._objectIdWriter; [EOL]     _propertyFilterId = src._propertyFilterId; [EOL]     _serializationShape = src._serializationShape; [EOL] } <line_num>: 153,185
protected BeanSerializerBase(BeanSerializerBase src) { [EOL]     this(src, src._props, src._filteredProps); [EOL] } <line_num>: 216,218
protected BeanSerializerBase(BeanSerializerBase src, NameTransformer unwrapper) { [EOL]     this(src, rename(src._props, unwrapper), rename(src._filteredProps, unwrapper)); [EOL] } <line_num>: 224,226
public abstract BeanSerializerBase withObjectIdWriter(ObjectIdWriter objectIdWriter); <line_num>: 193,193
protected abstract BeanSerializerBase withIgnorals(String[] toIgnore); <line_num>: 201,201
protected abstract BeanSerializerBase asArraySerializer(); <line_num>: 210,210
private final static BeanPropertyWriter[] rename(BeanPropertyWriter[] props, NameTransformer transformer) { [EOL]     if (props == null || props.length == 0 || transformer == null || transformer == NameTransformer.NOP) { [EOL]         return props; [EOL]     } [EOL]     final int len = props.length; [EOL]     BeanPropertyWriter[] result = new BeanPropertyWriter[len]; [EOL]     for (int i = 0; i < len; ++i) { [EOL]         BeanPropertyWriter bpw = props[i]; [EOL]         if (bpw != null) { [EOL]             result[i] = bpw.rename(transformer); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 228,243
@Override [EOL] public void resolve(SerializerProvider provider) throws JsonMappingException { [EOL]     int filteredCount = (_filteredProps == null) ? 0 : _filteredProps.length; [EOL]     for (int i = 0, len = _props.length; i < len; ++i) { [EOL]         BeanPropertyWriter prop = _props[i]; [EOL]         if (!prop.willSuppressNulls() && !prop.hasNullSerializer()) { [EOL]             JsonSerializer<Object> nullSer = provider.findNullValueSerializer(prop); [EOL]             if (nullSer != null) { [EOL]                 prop.assignNullSerializer(nullSer); [EOL]                 if (i < filteredCount) { [EOL]                     BeanPropertyWriter w2 = _filteredProps[i]; [EOL]                     if (w2 != null) { [EOL]                         w2.assignNullSerializer(nullSer); [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]         if (prop.hasSerializer()) { [EOL]             continue; [EOL]         } [EOL]         JsonSerializer<Object> ser = findConvertingSerializer(provider, prop); [EOL]         if (ser == null) { [EOL]             JavaType type = prop.getSerializationType(); [EOL]             if (type == null) { [EOL]                 type = provider.constructType(prop.getGenericPropertyType()); [EOL]                 if (!type.isFinal()) { [EOL]                     if (type.isContainerType() || type.containedTypeCount() > 0) { [EOL]                         prop.setNonTrivialBaseType(type); [EOL]                     } [EOL]                     continue; [EOL]                 } [EOL]             } [EOL]             ser = provider.findValueSerializer(type, prop); [EOL]             if (type.isContainerType()) { [EOL]                 TypeSerializer typeSer = type.getContentType().getTypeHandler(); [EOL]                 if (typeSer != null) { [EOL]                     if (ser instanceof ContainerSerializer<?>) { [EOL]                         @SuppressWarnings("unchecked") [EOL]                         JsonSerializer<Object> ser2 = (JsonSerializer<Object>) ((ContainerSerializer<?>) ser).withValueTypeSerializer(typeSer); [EOL]                         ser = ser2; [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]         prop.assignSerializer(ser); [EOL]         if (i < filteredCount) { [EOL]             BeanPropertyWriter w2 = _filteredProps[i]; [EOL]             if (w2 != null) { [EOL]                 w2.assignSerializer(ser); [EOL]             } [EOL]         } [EOL]     } [EOL]     if (_anyGetterWriter != null) { [EOL]         _anyGetterWriter.resolve(provider); [EOL]     } [EOL] } <line_num>: 255,328
protected JsonSerializer<Object> findConvertingSerializer(SerializerProvider provider, BeanPropertyWriter prop) throws JsonMappingException { [EOL]     final AnnotationIntrospector intr = provider.getAnnotationIntrospector(); [EOL]     if (intr != null) { [EOL]         Object convDef = intr.findSerializationConverter(prop.getMember()); [EOL]         if (convDef != null) { [EOL]             Converter<Object, Object> conv = provider.converterInstance(prop.getMember(), convDef); [EOL]             JavaType delegateType = conv.getOutputType(provider.getTypeFactory()); [EOL]             JsonSerializer<?> ser = provider.findValueSerializer(delegateType, prop); [EOL]             return new StdDelegatingSerializer(conv, delegateType, ser); [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 337,352
@Override [EOL] public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException { [EOL]     ObjectIdWriter oiw = _objectIdWriter; [EOL]     String[] ignorals = null; [EOL]     final AnnotationIntrospector intr = provider.getAnnotationIntrospector(); [EOL]     final AnnotatedMember accessor = (property == null || intr == null) ? null : property.getMember(); [EOL]     if (accessor != null) { [EOL]         ignorals = intr.findPropertiesToIgnore(accessor); [EOL]         ObjectIdInfo objectIdInfo = intr.findObjectIdInfo(accessor); [EOL]         if (objectIdInfo == null) { [EOL]             if (oiw != null) { [EOL]                 objectIdInfo = intr.findObjectReferenceInfo(accessor, new ObjectIdInfo("", null, null)); [EOL]                 oiw = _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId()); [EOL]             } [EOL]         } else { [EOL]             objectIdInfo = intr.findObjectReferenceInfo(accessor, objectIdInfo); [EOL]             ObjectIdGenerator<?> gen; [EOL]             Class<?> implClass = objectIdInfo.getGeneratorType(); [EOL]             JavaType type = provider.constructType(implClass); [EOL]             JavaType idType = provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0]; [EOL]             if (implClass == ObjectIdGenerators.PropertyGenerator.class) { [EOL]                 String propName = objectIdInfo.getPropertyName(); [EOL]                 BeanPropertyWriter idProp = null; [EOL]                 for (int i = 0, len = _props.length; ; ++i) { [EOL]                     if (i == len) { [EOL]                         throw new IllegalArgumentException("Invalid Object Id definition for " + _handledType.getName() + ": can not find property with name '" + propName + "'"); [EOL]                     } [EOL]                     BeanPropertyWriter prop = _props[i]; [EOL]                     if (propName.equals(prop.getName())) { [EOL]                         idProp = prop; [EOL]                         if (i > 0) { [EOL]                             System.arraycopy(_props, 0, _props, 1, i); [EOL]                             _props[0] = idProp; [EOL]                             if (_filteredProps != null) { [EOL]                                 BeanPropertyWriter fp = _filteredProps[i]; [EOL]                                 System.arraycopy(_filteredProps, 0, _filteredProps, 1, i); [EOL]                                 _filteredProps[0] = fp; [EOL]                             } [EOL]                         } [EOL]                         break; [EOL]                     } [EOL]                 } [EOL]                 idType = idProp.getType(); [EOL]                 gen = new PropertyBasedObjectIdGenerator(objectIdInfo, idProp); [EOL]                 oiw = ObjectIdWriter.construct(idType, null, gen, objectIdInfo.getAlwaysAsId()); [EOL]             } else { [EOL]                 gen = provider.objectIdGeneratorInstance(accessor, objectIdInfo); [EOL]                 oiw = ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId()); [EOL]             } [EOL]         } [EOL]     } [EOL]     BeanSerializerBase contextual = this; [EOL]     if (oiw != null) { [EOL]         JsonSerializer<?> ser = provider.findValueSerializer(oiw.idType, property); [EOL]         oiw = oiw.withSerializer(ser); [EOL]         if (oiw != _objectIdWriter) { [EOL]             contextual = contextual.withObjectIdWriter(oiw); [EOL]         } [EOL]     } [EOL]     if (ignorals != null && ignorals.length != 0) { [EOL]         contextual = contextual.withIgnorals(ignorals); [EOL]     } [EOL]     JsonFormat.Shape shape = null; [EOL]     if (accessor != null) { [EOL]         JsonFormat.Value format = intr.findFormat((Annotated) accessor); [EOL]         if (format != null) { [EOL]             shape = format.getShape(); [EOL]         } [EOL]     } [EOL]     if (shape == null) { [EOL]         shape = _serializationShape; [EOL]     } [EOL]     if (shape == JsonFormat.Shape.ARRAY) { [EOL]         contextual = contextual.asArraySerializer(); [EOL]     } [EOL]     return contextual; [EOL] } <line_num>: 354,454
@Override [EOL] public boolean usesObjectId() { [EOL]     return (_objectIdWriter != null); [EOL] } <line_num>: 462,465
@Override [EOL] public abstract void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException; <line_num>: 468,470
@Override [EOL] public void serializeWithType(Object bean, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException, JsonGenerationException { [EOL]     if (_objectIdWriter != null) { [EOL]         _serializeWithObjectId(bean, jgen, provider, typeSer); [EOL]         return; [EOL]     } [EOL]     String typeStr = (_typeId == null) ? null : _customTypeId(bean); [EOL]     if (typeStr == null) { [EOL]         typeSer.writeTypePrefixForObject(bean, jgen); [EOL]     } else { [EOL]         typeSer.writeCustomTypePrefixForObject(bean, jgen, typeStr); [EOL]     } [EOL]     if (_propertyFilterId != null) { [EOL]         serializeFieldsFiltered(bean, jgen, provider); [EOL]     } else { [EOL]         serializeFields(bean, jgen, provider); [EOL]     } [EOL]     if (typeStr == null) { [EOL]         typeSer.writeTypeSuffixForObject(bean, jgen); [EOL]     } else { [EOL]         typeSer.writeCustomTypeSuffixForObject(bean, jgen, typeStr); [EOL]     } [EOL] } <line_num>: 473,499
protected final void _serializeWithObjectId(Object bean, JsonGenerator jgen, SerializerProvider provider, boolean startEndObject) throws IOException, JsonGenerationException { [EOL]     final ObjectIdWriter w = _objectIdWriter; [EOL]     WritableObjectId objectId = provider.findObjectId(bean, w.generator); [EOL]     if (objectId.writeAsId(jgen, provider, w)) { [EOL]         return; [EOL]     } [EOL]     Object id = objectId.generateId(bean); [EOL]     if (w.alwaysAsId) { [EOL]         w.serializer.serialize(id, jgen, provider); [EOL]         return; [EOL]     } [EOL]     if (startEndObject) { [EOL]         jgen.writeStartObject(); [EOL]     } [EOL]     objectId.writeAsField(jgen, provider, w); [EOL]     if (_propertyFilterId != null) { [EOL]         serializeFieldsFiltered(bean, jgen, provider); [EOL]     } else { [EOL]         serializeFields(bean, jgen, provider); [EOL]     } [EOL]     if (startEndObject) { [EOL]         jgen.writeEndObject(); [EOL]     } [EOL] } <line_num>: 501,530
protected final void _serializeWithObjectId(Object bean, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException, JsonGenerationException { [EOL]     final ObjectIdWriter w = _objectIdWriter; [EOL]     WritableObjectId objectId = provider.findObjectId(bean, w.generator); [EOL]     if (objectId.writeAsId(jgen, provider, w)) { [EOL]         return; [EOL]     } [EOL]     Object id = objectId.generateId(bean); [EOL]     if (w.alwaysAsId) { [EOL]         w.serializer.serialize(id, jgen, provider); [EOL]         return; [EOL]     } [EOL]     String typeStr = (_typeId == null) ? null : _customTypeId(bean); [EOL]     if (typeStr == null) { [EOL]         typeSer.writeTypePrefixForObject(bean, jgen); [EOL]     } else { [EOL]         typeSer.writeCustomTypePrefixForObject(bean, jgen, typeStr); [EOL]     } [EOL]     objectId.writeAsField(jgen, provider, w); [EOL]     if (_propertyFilterId != null) { [EOL]         serializeFieldsFiltered(bean, jgen, provider); [EOL]     } else { [EOL]         serializeFields(bean, jgen, provider); [EOL]     } [EOL]     if (typeStr == null) { [EOL]         typeSer.writeTypeSuffixForObject(bean, jgen); [EOL]     } else { [EOL]         typeSer.writeCustomTypeSuffixForObject(bean, jgen, typeStr); [EOL]     } [EOL] } <line_num>: 532,566
private final String _customTypeId(Object bean) { [EOL]     final Object typeId = _typeId.getValue(bean); [EOL]     if (typeId == null) { [EOL]         return ""; [EOL]     } [EOL]     return (typeId instanceof String) ? (String) typeId : typeId.toString(); [EOL] } <line_num>: 568,575
protected void serializeFields(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     final BeanPropertyWriter[] props; [EOL]     if (_filteredProps != null && provider.getActiveView() != null) { [EOL]         props = _filteredProps; [EOL]     } else { [EOL]         props = _props; [EOL]     } [EOL]     int i = 0; [EOL]     try { [EOL]         for (final int len = props.length; i < len; ++i) { [EOL]             BeanPropertyWriter prop = props[i]; [EOL]             if (prop != null) { [EOL]                 prop.serializeAsField(bean, jgen, provider); [EOL]             } [EOL]         } [EOL]         if (_anyGetterWriter != null) { [EOL]             _anyGetterWriter.getAndSerialize(bean, jgen, provider); [EOL]         } [EOL]     } catch (Exception e) { [EOL]         String name = (i == props.length) ? "[anySetter]" : props[i].getName(); [EOL]         wrapAndThrow(provider, e, bean, name); [EOL]     } catch (StackOverflowError e) { [EOL]         JsonMappingException mapE = new JsonMappingException("Infinite recursion (StackOverflowError)", e); [EOL]         String name = (i == props.length) ? "[anySetter]" : props[i].getName(); [EOL]         mapE.prependPath(new JsonMappingException.Reference(bean, name)); [EOL]         throw mapE; [EOL]     } [EOL] } <line_num>: 583,616
protected void serializeFieldsFiltered(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     final BeanPropertyWriter[] props; [EOL]     if (_filteredProps != null && provider.getActiveView() != null) { [EOL]         props = _filteredProps; [EOL]     } else { [EOL]         props = _props; [EOL]     } [EOL]     final BeanPropertyFilter filter = findFilter(provider); [EOL]     if (filter == null) { [EOL]         serializeFields(bean, jgen, provider); [EOL]         return; [EOL]     } [EOL]     int i = 0; [EOL]     try { [EOL]         for (final int len = props.length; i < len; ++i) { [EOL]             BeanPropertyWriter prop = props[i]; [EOL]             if (prop != null) { [EOL]                 filter.serializeAsField(bean, jgen, provider, prop); [EOL]             } [EOL]         } [EOL]         if (_anyGetterWriter != null) { [EOL]             _anyGetterWriter.getAndSerialize(bean, jgen, provider); [EOL]         } [EOL]     } catch (Exception e) { [EOL]         String name = (i == props.length) ? "[anySetter]" : props[i].getName(); [EOL]         wrapAndThrow(provider, e, bean, name); [EOL]     } catch (StackOverflowError e) { [EOL]         JsonMappingException mapE = new JsonMappingException("Infinite recursion (StackOverflowError)", e); [EOL]         String name = (i == props.length) ? "[anySetter]" : props[i].getName(); [EOL]         mapE.prependPath(new JsonMappingException.Reference(bean, name)); [EOL]         throw mapE; [EOL]     } [EOL] } <line_num>: 623,663
protected BeanPropertyFilter findFilter(SerializerProvider provider) throws JsonMappingException { [EOL]     final Object filterId = _propertyFilterId; [EOL]     FilterProvider filters = provider.getFilterProvider(); [EOL]     if (filters == null) { [EOL]         throw new JsonMappingException("Can not resolve BeanPropertyFilter with id '" + filterId + "'; no FilterProvider configured"); [EOL]     } [EOL]     BeanPropertyFilter filter = filters.findFilter(filterId); [EOL]     return filter; [EOL] } <line_num>: 669,681
@Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException { [EOL]     ObjectNode o = createSchemaNode("object", true); [EOL]     JsonSerializableSchema ann = _handledType.getAnnotation(JsonSerializableSchema.class); [EOL]     if (ann != null) { [EOL]         String id = ann.id(); [EOL]         if (id != null && id.length() > 0) { [EOL]             o.put("id", id); [EOL]         } [EOL]     } [EOL]     ObjectNode propertiesNode = o.objectNode(); [EOL]     final BeanPropertyFilter filter; [EOL]     if (_propertyFilterId != null) { [EOL]         filter = findFilter(provider); [EOL]     } else { [EOL]         filter = null; [EOL]     } [EOL]     for (int i = 0; i < _props.length; i++) { [EOL]         BeanPropertyWriter prop = _props[i]; [EOL]         if (filter == null) { [EOL]             prop.depositSchemaProperty(propertiesNode, provider); [EOL]         } else { [EOL]             filter.depositSchemaProperty(prop, propertiesNode, provider); [EOL]         } [EOL]     } [EOL]     o.put("properties", propertiesNode); [EOL]     return o; [EOL] } <line_num>: 683,719
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     JsonObjectFormatVisitor objectVisitor = (visitor == null) ? null : visitor.expectObjectFormat(typeHint); [EOL]     if (objectVisitor != null) { [EOL]         if (_propertyFilterId != null) { [EOL]             BeanPropertyFilter filter = findFilter(visitor.getProvider()); [EOL]             for (int i = 0; i < _props.length; i++) { [EOL]                 filter.depositSchemaProperty(_props[i], objectVisitor, visitor.getProvider()); [EOL]             } [EOL]         } else { [EOL]             for (int i = 0; i < _props.length; i++) { [EOL]                 _props[i].depositSchemaProperty(objectVisitor); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 721,739
