public PropertyBasedObjectIdGenerator(ObjectIdInfo oid, BeanPropertyWriter prop) { [EOL]     this(oid.getScope(), prop); [EOL] } <line_num>: 16,19
protected PropertyBasedObjectIdGenerator(Class<?> scope, BeanPropertyWriter prop) { [EOL]     super(scope); [EOL]     _property = prop; [EOL] } <line_num>: 21,25
@Override [EOL] public boolean canUseFor(ObjectIdGenerator<?> gen) { [EOL]     if (gen.getClass() == getClass()) { [EOL]         PropertyBasedObjectIdGenerator other = (PropertyBasedObjectIdGenerator) gen; [EOL]         if (other.getScope() == _scope) { [EOL]             return (other._property == _property); [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 31,46
@Override [EOL] public Object generateId(Object forPojo) { [EOL]     try { [EOL]         return _property.get(forPojo); [EOL]     } catch (RuntimeException e) { [EOL]         throw e; [EOL]     } catch (Exception e) { [EOL]         throw new IllegalStateException("Problem accessing property '" + _property.getName() + "': " + e.getMessage(), e); [EOL]     } [EOL] } <line_num>: 48,58
@Override [EOL] public ObjectIdGenerator<Object> forScope(Class<?> scope) { [EOL]     return (scope == _scope) ? this : new PropertyBasedObjectIdGenerator(scope, _property); [EOL] } <line_num>: 60,63
@Override [EOL] public ObjectIdGenerator<Object> newForSerialization(Object context) { [EOL]     return this; [EOL] } <line_num>: 65,69
@Override [EOL] public com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey key(Object key) { [EOL]     return new IdKey(getClass(), _scope, key); [EOL] } <line_num>: 71,75
