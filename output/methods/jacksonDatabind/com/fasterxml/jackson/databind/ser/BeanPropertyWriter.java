@SuppressWarnings("unchecked") [EOL] public BeanPropertyWriter(BeanPropertyDefinition propDef, AnnotatedMember member, Annotations contextAnnotations, JavaType declaredType, JsonSerializer<?> ser, TypeSerializer typeSer, JavaType serType, boolean suppressNulls, Object suppressableValue) { [EOL]     _member = member; [EOL]     _contextAnnotations = contextAnnotations; [EOL]     _name = new SerializedString(propDef.getName()); [EOL]     _wrapperName = propDef.getWrapperName(); [EOL]     _declaredType = declaredType; [EOL]     _serializer = (JsonSerializer<Object>) ser; [EOL]     _dynamicSerializers = (ser == null) ? PropertySerializerMap.emptyMap() : null; [EOL]     _typeSerializer = typeSer; [EOL]     _cfgSerializationType = serType; [EOL]     _isRequired = propDef.isRequired(); [EOL]     if (member instanceof AnnotatedField) { [EOL]         _accessorMethod = null; [EOL]         _field = (Field) member.getMember(); [EOL]     } else if (member instanceof AnnotatedMethod) { [EOL]         _accessorMethod = (Method) member.getMember(); [EOL]         _field = null; [EOL]     } else { [EOL]         throw new IllegalArgumentException("Can not pass member of type " + member.getClass().getName()); [EOL]     } [EOL]     _suppressNulls = suppressNulls; [EOL]     _suppressableValue = suppressableValue; [EOL]     _includeInViews = propDef.findViews(); [EOL]     _nullSerializer = null; [EOL] } <line_num>: 183,217
protected BeanPropertyWriter(BeanPropertyWriter base) { [EOL]     this(base, base._name); [EOL] } <line_num>: 222,224
protected BeanPropertyWriter(BeanPropertyWriter base, SerializedString name) { [EOL]     _name = name; [EOL]     _wrapperName = base._wrapperName; [EOL]     _member = base._member; [EOL]     _contextAnnotations = base._contextAnnotations; [EOL]     _declaredType = base._declaredType; [EOL]     _accessorMethod = base._accessorMethod; [EOL]     _field = base._field; [EOL]     _serializer = base._serializer; [EOL]     _nullSerializer = base._nullSerializer; [EOL]     if (base._internalSettings != null) { [EOL]         _internalSettings = new HashMap<Object, Object>(base._internalSettings); [EOL]     } [EOL]     _cfgSerializationType = base._cfgSerializationType; [EOL]     _dynamicSerializers = base._dynamicSerializers; [EOL]     _suppressNulls = base._suppressNulls; [EOL]     _suppressableValue = base._suppressableValue; [EOL]     _includeInViews = base._includeInViews; [EOL]     _typeSerializer = base._typeSerializer; [EOL]     _nonTrivialBaseType = base._nonTrivialBaseType; [EOL]     _isRequired = base._isRequired; [EOL] } <line_num>: 226,250
public BeanPropertyWriter rename(NameTransformer transformer) { [EOL]     String newName = transformer.transform(_name.getValue()); [EOL]     if (newName.equals(_name.toString())) { [EOL]         return this; [EOL]     } [EOL]     return new BeanPropertyWriter(this, new SerializedString(newName)); [EOL] } <line_num>: 252,258
public void assignSerializer(JsonSerializer<Object> ser) { [EOL]     if (_serializer != null && _serializer != ser) { [EOL]         throw new IllegalStateException("Can not override serializer"); [EOL]     } [EOL]     _serializer = ser; [EOL] } <line_num>: 265,272
public void assignNullSerializer(JsonSerializer<Object> nullSer) { [EOL]     if (_nullSerializer != null && _nullSerializer != nullSer) { [EOL]         throw new IllegalStateException("Can not override null serializer"); [EOL]     } [EOL]     _nullSerializer = nullSer; [EOL] } <line_num>: 279,286
public BeanPropertyWriter unwrappingWriter(NameTransformer unwrapper) { [EOL]     return new UnwrappingBeanPropertyWriter(this, unwrapper); [EOL] } <line_num>: 292,294
public void setNonTrivialBaseType(JavaType t) { [EOL]     _nonTrivialBaseType = t; [EOL] } <line_num>: 301,303
@Override [EOL] public String getName() { [EOL]     return _name.getValue(); [EOL] } <line_num>: 311,314
@Override [EOL] public JavaType getType() { [EOL]     return _declaredType; [EOL] } <line_num>: 316,319
@Override [EOL] public PropertyName getWrapperName() { [EOL]     return _wrapperName; [EOL] } <line_num>: 321,324
@Override [EOL] public boolean isRequired() { [EOL]     return _isRequired; [EOL] } <line_num>: 326,329
@Override [EOL] public <A extends Annotation> A getAnnotation(Class<A> acls) { [EOL]     return _member.getAnnotation(acls); [EOL] } <line_num>: 331,334
@Override [EOL] public <A extends Annotation> A getContextAnnotation(Class<A> acls) { [EOL]     return _contextAnnotations.get(acls); [EOL] } <line_num>: 336,339
@Override [EOL] public AnnotatedMember getMember() { [EOL]     return _member; [EOL] } <line_num>: 341,344
@Override [EOL] public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor) throws JsonMappingException { [EOL]     if (objectVisitor != null) { [EOL]         if (isRequired()) { [EOL]             objectVisitor.property(this); [EOL]         } else { [EOL]             objectVisitor.optionalProperty(this); [EOL]         } [EOL]     } [EOL] } <line_num>: 347,358
public Object getInternalSetting(Object key) { [EOL]     if (_internalSettings == null) { [EOL]         return null; [EOL]     } [EOL]     return _internalSettings.get(key); [EOL] } <line_num>: 372,378
public Object setInternalSetting(Object key, Object value) { [EOL]     if (_internalSettings == null) { [EOL]         _internalSettings = new HashMap<Object, Object>(); [EOL]     } [EOL]     return _internalSettings.put(key, value); [EOL] } <line_num>: 385,391
public Object removeInternalSetting(Object key) { [EOL]     Object removed = null; [EOL]     if (_internalSettings != null) { [EOL]         removed = _internalSettings.remove(key); [EOL]         if (_internalSettings.size() == 0) { [EOL]             _internalSettings = null; [EOL]         } [EOL]     } [EOL]     return removed; [EOL] } <line_num>: 398,409
public SerializedString getSerializedName() { [EOL]     return _name; [EOL] } <line_num>: 417,417
public boolean hasSerializer() { [EOL]     return _serializer != null; [EOL] } <line_num>: 419,419
public boolean hasNullSerializer() { [EOL]     return _nullSerializer != null; [EOL] } <line_num>: 420,420
public boolean willSuppressNulls() { [EOL]     return _suppressNulls; [EOL] } <line_num>: 422,422
public JsonSerializer<Object> getSerializer() { [EOL]     return _serializer; [EOL] } <line_num>: 425,427
public JavaType getSerializationType() { [EOL]     return _cfgSerializationType; [EOL] } <line_num>: 429,431
public Class<?> getRawSerializationType() { [EOL]     return (_cfgSerializationType == null) ? null : _cfgSerializationType.getRawClass(); [EOL] } <line_num>: 433,435
public Class<?> getPropertyType() { [EOL]     if (_accessorMethod != null) { [EOL]         return _accessorMethod.getReturnType(); [EOL]     } [EOL]     return _field.getType(); [EOL] } <line_num>: 437,443
public Type getGenericPropertyType() { [EOL]     if (_accessorMethod != null) { [EOL]         return _accessorMethod.getGenericReturnType(); [EOL]     } [EOL]     return _field.getGenericType(); [EOL] } <line_num>: 450,456
public Class<?>[] getViews() { [EOL]     return _includeInViews; [EOL] } <line_num>: 458,458
@Deprecated [EOL] protected boolean isRequired(AnnotationIntrospector intr) { [EOL]     return _isRequired; [EOL] } <line_num>: 471,474
@SuppressWarnings("deprecation") [EOL] public void depositSchemaProperty(ObjectNode propertiesNode, SerializerProvider provider) throws JsonMappingException { [EOL]     JavaType propType = getSerializationType(); [EOL]     Type hint = (propType == null) ? getGenericPropertyType() : propType.getRawClass(); [EOL]     JsonNode schemaNode; [EOL]     JsonSerializer<Object> ser = getSerializer(); [EOL]     if (ser == null) { [EOL]         Class<?> serType = getRawSerializationType(); [EOL]         if (serType == null) { [EOL]             serType = getPropertyType(); [EOL]         } [EOL]         ser = provider.findValueSerializer(serType, this); [EOL]     } [EOL]     boolean isOptional = !isRequired(); [EOL]     if (ser instanceof SchemaAware) { [EOL]         schemaNode = ((SchemaAware) ser).getSchema(provider, hint, isOptional); [EOL]     } else { [EOL]         schemaNode = com.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode(); [EOL]     } [EOL]     propertiesNode.put(getName(), schemaNode); [EOL] } <line_num>: 494,518
public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception { [EOL]     Object value = get(bean); [EOL]     if (value == null) { [EOL]         if (_nullSerializer != null) { [EOL]             jgen.writeFieldName(_name); [EOL]             _nullSerializer.serialize(null, jgen, prov); [EOL]         } [EOL]         return; [EOL]     } [EOL]     JsonSerializer<Object> ser = _serializer; [EOL]     if (ser == null) { [EOL]         Class<?> cls = value.getClass(); [EOL]         PropertySerializerMap map = _dynamicSerializers; [EOL]         ser = map.serializerFor(cls); [EOL]         if (ser == null) { [EOL]             ser = _findAndAddDynamic(map, cls, prov); [EOL]         } [EOL]     } [EOL]     if (_suppressableValue != null) { [EOL]         if (MARKER_FOR_EMPTY == _suppressableValue) { [EOL]             if (ser.isEmpty(value)) { [EOL]                 return; [EOL]             } [EOL]         } else if (_suppressableValue.equals(value)) { [EOL]             return; [EOL]         } [EOL]     } [EOL]     if (value == bean) { [EOL]         _handleSelfReference(bean, ser); [EOL]     } [EOL]     jgen.writeFieldName(_name); [EOL]     if (_typeSerializer == null) { [EOL]         ser.serialize(value, jgen, prov); [EOL]     } else { [EOL]         ser.serializeWithType(value, jgen, prov, _typeSerializer); [EOL]     } [EOL] } <line_num>: 531,573
public void serializeAsColumn(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception { [EOL]     Object value = get(bean); [EOL]     if (value == null) { [EOL]         if (_nullSerializer != null) { [EOL]             _nullSerializer.serialize(null, jgen, prov); [EOL]         } else { [EOL]             jgen.writeNull(); [EOL]         } [EOL]         return; [EOL]     } [EOL]     JsonSerializer<Object> ser = _serializer; [EOL]     if (ser == null) { [EOL]         Class<?> cls = value.getClass(); [EOL]         PropertySerializerMap map = _dynamicSerializers; [EOL]         ser = map.serializerFor(cls); [EOL]         if (ser == null) { [EOL]             ser = _findAndAddDynamic(map, cls, prov); [EOL]         } [EOL]     } [EOL]     if (_suppressableValue != null) { [EOL]         if (MARKER_FOR_EMPTY == _suppressableValue) { [EOL]             if (ser.isEmpty(value)) { [EOL]                 serializeAsPlaceholder(bean, jgen, prov); [EOL]                 return; [EOL]             } [EOL]         } else if (_suppressableValue.equals(value)) { [EOL]             serializeAsPlaceholder(bean, jgen, prov); [EOL]             return; [EOL]         } [EOL]     } [EOL]     if (value == bean) { [EOL]         _handleSelfReference(bean, ser); [EOL]     } [EOL]     if (_typeSerializer == null) { [EOL]         ser.serialize(value, jgen, prov); [EOL]     } else { [EOL]         ser.serializeWithType(value, jgen, prov, _typeSerializer); [EOL]     } [EOL] } <line_num>: 582,625
public void serializeAsPlaceholder(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception { [EOL]     if (_nullSerializer != null) { [EOL]         _nullSerializer.serialize(null, jgen, prov); [EOL]     } else { [EOL]         jgen.writeNull(); [EOL]     } [EOL] } <line_num>: 635,643
protected JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map, Class<?> type, SerializerProvider provider) throws JsonMappingException { [EOL]     PropertySerializerMap.SerializerAndMapResult result; [EOL]     if (_nonTrivialBaseType != null) { [EOL]         JavaType t = provider.constructSpecializedType(_nonTrivialBaseType, type); [EOL]         result = map.findAndAddSerializer(t, provider, this); [EOL]     } else { [EOL]         result = map.findAndAddSerializer(type, provider, this); [EOL]     } [EOL]     if (map != result.map) { [EOL]         _dynamicSerializers = result.map; [EOL]     } [EOL]     return result.serializer; [EOL] } <line_num>: 651,666
public final Object get(Object bean) throws Exception { [EOL]     if (_accessorMethod != null) { [EOL]         return _accessorMethod.invoke(bean); [EOL]     } [EOL]     return _field.get(bean); [EOL] } <line_num>: 676,682
protected void _handleSelfReference(Object bean, JsonSerializer<?> ser) throws JsonMappingException { [EOL]     if (ser.usesObjectId()) { [EOL]         return; [EOL]     } [EOL]     throw new JsonMappingException("Direct self-reference leading to cycle"); [EOL] } <line_num>: 684,694
@Override [EOL] public String toString() { [EOL]     StringBuilder sb = new StringBuilder(40); [EOL]     sb.append("property '").append(getName()).append("' ("); [EOL]     if (_accessorMethod != null) { [EOL]         sb.append("via method ").append(_accessorMethod.getDeclaringClass().getName()).append("#").append(_accessorMethod.getName()); [EOL]     } else { [EOL]         sb.append("field \"").append(_field.getDeclaringClass().getName()).append("#").append(_field.getName()); [EOL]     } [EOL]     if (_serializer == null) { [EOL]         sb.append(", no static serializer"); [EOL]     } else { [EOL]         sb.append(", static serializer of type " + _serializer.getClass().getName()); [EOL]     } [EOL]     sb.append(')'); [EOL]     return sb.toString(); [EOL] } <line_num>: 696,713
