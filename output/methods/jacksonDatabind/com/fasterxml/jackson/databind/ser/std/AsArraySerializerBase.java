protected AsArraySerializerBase(Class<?> cls, JavaType et, boolean staticTyping, TypeSerializer vts, BeanProperty property, JsonSerializer<Object> elementSerializer) { [EOL]     super(cls, false); [EOL]     _elementType = et; [EOL]     _staticTyping = staticTyping || (et != null && et.isFinal()); [EOL]     _valueTypeSerializer = vts; [EOL]     _property = property; [EOL]     _elementSerializer = elementSerializer; [EOL]     _dynamicSerializers = PropertySerializerMap.emptyMap(); [EOL] } <line_num>: 61,73
@SuppressWarnings("unchecked") [EOL] protected AsArraySerializerBase(AsArraySerializerBase<?> src, BeanProperty property, TypeSerializer vts, JsonSerializer<?> elementSerializer) { [EOL]     super(src); [EOL]     _elementType = src._elementType; [EOL]     _staticTyping = src._staticTyping; [EOL]     _valueTypeSerializer = vts; [EOL]     _property = property; [EOL]     _elementSerializer = (JsonSerializer<Object>) elementSerializer; [EOL]     _dynamicSerializers = src._dynamicSerializers; [EOL] } <line_num>: 75,86
public abstract AsArraySerializerBase<T> withResolved(BeanProperty property, TypeSerializer vts, JsonSerializer<?> elementSerializer); <line_num>: 88,89
@Override [EOL] public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException { [EOL]     TypeSerializer typeSer = _valueTypeSerializer; [EOL]     if (typeSer != null) { [EOL]         typeSer = typeSer.forProperty(property); [EOL]     } [EOL]     JsonSerializer<?> ser = null; [EOL]     if (property != null) { [EOL]         AnnotatedMember m = property.getMember(); [EOL]         if (m != null) { [EOL]             Object serDef = provider.getAnnotationIntrospector().findContentSerializer(m); [EOL]             if (serDef != null) { [EOL]                 ser = provider.serializerInstance(m, serDef); [EOL]             } [EOL]         } [EOL]     } [EOL]     if (ser == null) { [EOL]         ser = _elementSerializer; [EOL]     } [EOL]     ser = findConvertingContentSerializer(provider, property, ser); [EOL]     if (ser == null) { [EOL]         if (ser == null) { [EOL]             if (_elementType != null) { [EOL]                 if (_staticTyping || hasContentTypeAnnotation(provider, property)) { [EOL]                     ser = provider.findValueSerializer(_elementType, property); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } else { [EOL]         if (ser instanceof ContextualSerializer) { [EOL]             ser = ((ContextualSerializer) ser).createContextual(provider, property); [EOL]         } [EOL]     } [EOL]     if ((ser != _elementSerializer) || (property != _property) || _valueTypeSerializer != typeSer) { [EOL]         return withResolved(property, typeSer, ser); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 103,151
@Override [EOL] public JavaType getContentType() { [EOL]     return _elementType; [EOL] } <line_num>: 159,162
@Override [EOL] public JsonSerializer<?> getContentSerializer() { [EOL]     return _elementSerializer; [EOL] } <line_num>: 164,167
@Override [EOL] public final void serialize(T value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     if (provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED) && hasSingleElement(value)) { [EOL]         serializeContents(value, jgen, provider); [EOL]         return; [EOL]     } [EOL]     jgen.writeStartArray(); [EOL]     serializeContents(value, jgen, provider); [EOL]     jgen.writeEndArray(); [EOL] } <line_num>: 175,188
@Override [EOL] public final void serializeWithType(T value, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException, JsonGenerationException { [EOL]     typeSer.writeTypePrefixForArray(value, jgen); [EOL]     serializeContents(value, jgen, provider); [EOL]     typeSer.writeTypeSuffixForArray(value, jgen); [EOL] } <line_num>: 190,199
protected abstract void serializeContents(T value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException; <line_num>: 201,202
@SuppressWarnings("deprecation") [EOL] @Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException { [EOL]     ObjectNode o = createSchemaNode("array", true); [EOL]     JavaType contentType = null; [EOL]     if (typeHint != null) { [EOL]         JavaType javaType = provider.constructType(typeHint); [EOL]         contentType = javaType.getContentType(); [EOL]         if (contentType == null) { [EOL]             if (typeHint instanceof ParameterizedType) { [EOL]                 Type[] typeArgs = ((ParameterizedType) typeHint).getActualTypeArguments(); [EOL]                 if (typeArgs.length == 1) { [EOL]                     contentType = provider.constructType(typeArgs[0]); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     if (contentType == null && _elementType != null) { [EOL]         contentType = _elementType; [EOL]     } [EOL]     if (contentType != null) { [EOL]         JsonNode schemaNode = null; [EOL]         if (contentType.getRawClass() != Object.class) { [EOL]             JsonSerializer<Object> ser = provider.findValueSerializer(contentType, _property); [EOL]             if (ser instanceof SchemaAware) { [EOL]                 schemaNode = ((SchemaAware) ser).getSchema(provider, null); [EOL]             } [EOL]         } [EOL]         if (schemaNode == null) { [EOL]             schemaNode = com.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode(); [EOL]         } [EOL]         o.put("items", schemaNode); [EOL]     } [EOL]     return o; [EOL] } <line_num>: 204,246
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     JsonArrayFormatVisitor arrayVisitor = (visitor == null) ? null : visitor.expectArrayFormat(typeHint); [EOL]     if (arrayVisitor != null) { [EOL]         TypeFactory tf = visitor.getProvider().getTypeFactory(); [EOL]         JavaType contentType = tf.moreSpecificType(_elementType, typeHint.getContentType()); [EOL]         if (contentType == null) { [EOL]             throw new JsonMappingException("Could not resolve type"); [EOL]         } [EOL]         JsonSerializer<?> valueSer = _elementSerializer; [EOL]         if (valueSer == null) { [EOL]             valueSer = visitor.getProvider().findValueSerializer(contentType, _property); [EOL]         } [EOL]         arrayVisitor.itemsFormat(valueSer, contentType); [EOL]     } [EOL] } <line_num>: 248,265
protected final JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map, Class<?> type, SerializerProvider provider) throws JsonMappingException { [EOL]     PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property); [EOL]     if (map != result.map) { [EOL]         _dynamicSerializers = result.map; [EOL]     } [EOL]     return result.serializer; [EOL] } <line_num>: 267,276
protected final JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map, JavaType type, SerializerProvider provider) throws JsonMappingException { [EOL]     PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property); [EOL]     if (map != result.map) { [EOL]         _dynamicSerializers = result.map; [EOL]     } [EOL]     return result.serializer; [EOL] } <line_num>: 278,286
