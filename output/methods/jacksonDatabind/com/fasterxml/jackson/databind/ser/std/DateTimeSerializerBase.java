protected DateTimeSerializerBase(Class<T> type, boolean useTimestamp, DateFormat customFormat) { [EOL]     super(type); [EOL]     _useTimestamp = useTimestamp; [EOL]     _customFormat = customFormat; [EOL] } <line_num>: 37,43
public abstract DateTimeSerializerBase<T> withFormat(boolean timestamp, DateFormat customFormat); <line_num>: 45,45
@Override [EOL] public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException { [EOL]     if (property != null) { [EOL]         JsonFormat.Value format = prov.getAnnotationIntrospector().findFormat((Annotated) property.getMember()); [EOL]         if (format != null) { [EOL]             if (format.getShape().isNumeric()) { [EOL]                 return withFormat(true, null); [EOL]             } [EOL]             TimeZone tz = format.getTimeZone(); [EOL]             String pattern = format.getPattern(); [EOL]             if (pattern.length() > 0) { [EOL]                 Locale loc = format.getLocale(); [EOL]                 if (loc == null) { [EOL]                     loc = prov.getLocale(); [EOL]                 } [EOL]                 SimpleDateFormat df = new SimpleDateFormat(pattern, loc); [EOL]                 if (tz == null) { [EOL]                     tz = prov.getTimeZone(); [EOL]                 } [EOL]                 df.setTimeZone(tz); [EOL]                 return withFormat(false, df); [EOL]             } [EOL]             if (tz != null) { [EOL]                 DateFormat df = prov.getConfig().getDateFormat(); [EOL]                 if (df.getClass() == StdDateFormat.class) { [EOL]                     df = StdDateFormat.getISO8601Format(tz); [EOL]                 } else { [EOL]                     df = (DateFormat) df.clone(); [EOL]                     df.setTimeZone(tz); [EOL]                 } [EOL]                 return withFormat(false, df); [EOL]             } [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 47,89
@Override [EOL] public boolean isEmpty(T value) { [EOL]     return (value == null) || (_timestamp(value) == 0L); [EOL] } <line_num>: 97,101
protected abstract long _timestamp(T value); <line_num>: 103,103
@Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) { [EOL]     boolean asNumber = _useTimestamp; [EOL]     if (!asNumber) { [EOL]         if (_customFormat == null) { [EOL]             asNumber = provider.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]         } [EOL]     } [EOL]     return createSchemaNode(asNumber ? "number" : "string", true); [EOL] } <line_num>: 105,116
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     boolean asNumber = _useTimestamp; [EOL]     if (!asNumber) { [EOL]         if (_customFormat == null) { [EOL]             asNumber = visitor.getProvider().isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]         } [EOL]     } [EOL]     if (asNumber) { [EOL]         JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint); [EOL]         if (v2 != null) { [EOL]             v2.numberType(JsonParser.NumberType.LONG); [EOL]             v2.format(JsonValueFormat.UTC_MILLISEC); [EOL]         } [EOL]     } else { [EOL]         JsonStringFormatVisitor v2 = visitor.expectStringFormat(typeHint); [EOL]         if (v2 != null) { [EOL]             v2.format(JsonValueFormat.DATE_TIME); [EOL]         } [EOL]     } [EOL] } <line_num>: 118,140
@Override [EOL] public abstract void serialize(T value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException; <line_num>: 148,150
