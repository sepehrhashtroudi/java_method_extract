public BeanAsArraySerializer(BeanSerializerBase src) { [EOL]     super(src, (ObjectIdWriter) null); [EOL]     _defaultSerializer = src; [EOL] } <line_num>: 63,66
protected BeanAsArraySerializer(BeanSerializerBase src, String[] toIgnore) { [EOL]     super(src, toIgnore); [EOL]     _defaultSerializer = src; [EOL] } <line_num>: 68,71
@Override [EOL] public JsonSerializer<Object> unwrappingSerializer(NameTransformer transformer) { [EOL]     return _defaultSerializer.unwrappingSerializer(transformer); [EOL] } <line_num>: 79,85
@Override [EOL] public boolean isUnwrappingSerializer() { [EOL]     return false; [EOL] } <line_num>: 87,90
@Override [EOL] public BeanSerializerBase withObjectIdWriter(ObjectIdWriter objectIdWriter) { [EOL]     return _defaultSerializer.withObjectIdWriter(objectIdWriter); [EOL] } <line_num>: 92,96
@Override [EOL] protected BeanAsArraySerializer withIgnorals(String[] toIgnore) { [EOL]     return new BeanAsArraySerializer(this, toIgnore); [EOL] } <line_num>: 98,101
@Override [EOL] protected BeanSerializerBase asArraySerializer() { [EOL]     return this; [EOL] } <line_num>: 103,107
@Override [EOL] public void serializeWithType(Object bean, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException, JsonGenerationException { [EOL]     _defaultSerializer.serializeWithType(bean, jgen, provider, typeSer); [EOL] } <line_num>: 116,125
@Override [EOL] public final void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     if (provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED) && hasSingleElement(provider)) { [EOL]         serializeAsArray(bean, jgen, provider); [EOL]         return; [EOL]     } [EOL]     jgen.writeStartArray(); [EOL]     serializeAsArray(bean, jgen, provider); [EOL]     jgen.writeEndArray(); [EOL] } <line_num>: 132,149
private boolean hasSingleElement(SerializerProvider provider) { [EOL]     final BeanPropertyWriter[] props; [EOL]     if (_filteredProps != null && provider.getActiveView() != null) { [EOL]         props = _filteredProps; [EOL]     } else { [EOL]         props = _props; [EOL]     } [EOL]     return props.length == 1; [EOL] } <line_num>: 156,164
protected final void serializeAsArray(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     final BeanPropertyWriter[] props; [EOL]     if (_filteredProps != null && provider.getActiveView() != null) { [EOL]         props = _filteredProps; [EOL]     } else { [EOL]         props = _props; [EOL]     } [EOL]     int i = 0; [EOL]     try { [EOL]         for (final int len = props.length; i < len; ++i) { [EOL]             BeanPropertyWriter prop = props[i]; [EOL]             if (prop == null) { [EOL]                 jgen.writeNull(); [EOL]             } else { [EOL]                 prop.serializeAsColumn(bean, jgen, provider); [EOL]             } [EOL]         } [EOL]     } catch (Exception e) { [EOL]         String name = (i == props.length) ? "[anySetter]" : props[i].getName(); [EOL]         wrapAndThrow(provider, e, bean, name); [EOL]     } catch (StackOverflowError e) { [EOL]         JsonMappingException mapE = new JsonMappingException("Infinite recursion (StackOverflowError)", e); [EOL]         String name = (i == props.length) ? "[anySetter]" : props[i].getName(); [EOL]         mapE.prependPath(new JsonMappingException.Reference(bean, name)); [EOL]         throw mapE; [EOL]     } [EOL] } <line_num>: 166,199
@Override [EOL] public String toString() { [EOL]     return "BeanAsArraySerializer for " + handledType().getName(); [EOL] } <line_num>: 207,209
