public CollectionSerializer(JavaType elemType, boolean staticTyping, TypeSerializer vts, BeanProperty property, JsonSerializer<Object> valueSerializer) { [EOL]     super(Collection.class, elemType, staticTyping, vts, property, valueSerializer); [EOL] } <line_num>: 32,36
public CollectionSerializer(CollectionSerializer src, BeanProperty property, TypeSerializer vts, JsonSerializer<?> valueSerializer) { [EOL]     super(src, property, vts, valueSerializer); [EOL] } <line_num>: 38,42
@Override [EOL] public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) { [EOL]     return new CollectionSerializer(_elementType, _staticTyping, vts, _property, _elementSerializer); [EOL] } <line_num>: 44,47
@Override [EOL] public CollectionSerializer withResolved(BeanProperty property, TypeSerializer vts, JsonSerializer<?> elementSerializer) { [EOL]     return new CollectionSerializer(this, property, vts, elementSerializer); [EOL] } <line_num>: 49,53
@Override [EOL] public boolean isEmpty(Collection<?> value) { [EOL]     return (value == null) || value.isEmpty(); [EOL] } <line_num>: 61,64
@Override [EOL] public boolean hasSingleElement(Collection<?> value) { [EOL]     Iterator<?> it = value.iterator(); [EOL]     if (!it.hasNext()) { [EOL]         return false; [EOL]     } [EOL]     it.next(); [EOL]     return !it.hasNext(); [EOL] } <line_num>: 66,74
@Override [EOL] public void serializeContents(Collection<?> value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     if (_elementSerializer != null) { [EOL]         serializeContentsUsing(value, jgen, provider, _elementSerializer); [EOL]         return; [EOL]     } [EOL]     Iterator<?> it = value.iterator(); [EOL]     if (!it.hasNext()) { [EOL]         return; [EOL]     } [EOL]     PropertySerializerMap serializers = _dynamicSerializers; [EOL]     final TypeSerializer typeSer = _valueTypeSerializer; [EOL]     int i = 0; [EOL]     try { [EOL]         do { [EOL]             Object elem = it.next(); [EOL]             if (elem == null) { [EOL]                 provider.defaultSerializeNull(jgen); [EOL]             } else { [EOL]                 Class<?> cc = elem.getClass(); [EOL]                 JsonSerializer<Object> serializer = serializers.serializerFor(cc); [EOL]                 if (serializer == null) { [EOL]                     if (_elementType.hasGenericTypes()) { [EOL]                         serializer = _findAndAddDynamic(serializers, provider.constructSpecializedType(_elementType, cc), provider); [EOL]                     } else { [EOL]                         serializer = _findAndAddDynamic(serializers, cc, provider); [EOL]                     } [EOL]                     serializers = _dynamicSerializers; [EOL]                 } [EOL]                 if (typeSer == null) { [EOL]                     serializer.serialize(elem, jgen, provider); [EOL]                 } else { [EOL]                     serializer.serializeWithType(elem, jgen, provider, typeSer); [EOL]                 } [EOL]             } [EOL]             ++i; [EOL]         } while (it.hasNext()); [EOL]     } catch (Exception e) { [EOL]         wrapAndThrow(provider, e, value, i); [EOL]     } [EOL] } <line_num>: 82,128
public void serializeContentsUsing(Collection<?> value, JsonGenerator jgen, SerializerProvider provider, JsonSerializer<Object> ser) throws IOException, JsonGenerationException { [EOL]     Iterator<?> it = value.iterator(); [EOL]     if (it.hasNext()) { [EOL]         TypeSerializer typeSer = _valueTypeSerializer; [EOL]         int i = 0; [EOL]         do { [EOL]             Object elem = it.next(); [EOL]             try { [EOL]                 if (elem == null) { [EOL]                     provider.defaultSerializeNull(jgen); [EOL]                 } else { [EOL]                     if (typeSer == null) { [EOL]                         ser.serialize(elem, jgen, provider); [EOL]                     } else { [EOL]                         ser.serializeWithType(elem, jgen, provider, typeSer); [EOL]                     } [EOL]                 } [EOL]                 ++i; [EOL]             } catch (Exception e) { [EOL]                 wrapAndThrow(provider, e, value, i); [EOL]             } [EOL]         } while (it.hasNext()); [EOL]     } [EOL] } <line_num>: 130,157
