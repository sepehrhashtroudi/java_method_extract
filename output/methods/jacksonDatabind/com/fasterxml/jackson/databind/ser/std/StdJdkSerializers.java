public AtomicBooleanSerializer() { [EOL]     super(AtomicBoolean.class, false); [EOL] } <line_num>: 69,69
public AtomicIntegerSerializer() { [EOL]     super(AtomicInteger.class, false); [EOL] } <line_num>: 95,95
public AtomicLongSerializer() { [EOL]     super(AtomicLong.class, false); [EOL] } <line_num>: 124,124
public AtomicReferenceSerializer() { [EOL]     super(AtomicReference.class, false); [EOL] } <line_num>: 153,153
public FileSerializer() { [EOL]     super(File.class); [EOL] } <line_num>: 189,189
public ClassSerializer() { [EOL]     super(Class.class, false); [EOL] } <line_num>: 219,219
public static Collection<Map.Entry<Class<?>, Object>> all() { [EOL]     HashMap<Class<?>, Object> sers = new HashMap<Class<?>, Object>(); [EOL]     final ToStringSerializer sls = ToStringSerializer.instance; [EOL]     sers.put(java.net.URL.class, sls); [EOL]     sers.put(java.net.URI.class, sls); [EOL]     sers.put(Currency.class, sls); [EOL]     sers.put(UUID.class, sls); [EOL]     sers.put(java.util.regex.Pattern.class, sls); [EOL]     sers.put(Locale.class, sls); [EOL]     sers.put(Locale.class, sls); [EOL]     sers.put(AtomicReference.class, AtomicReferenceSerializer.class); [EOL]     sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class); [EOL]     sers.put(AtomicInteger.class, AtomicIntegerSerializer.class); [EOL]     sers.put(AtomicLong.class, AtomicLongSerializer.class); [EOL]     sers.put(File.class, FileSerializer.class); [EOL]     sers.put(Class.class, ClassSerializer.class); [EOL]     sers.put(Void.TYPE, NullSerializer.class); [EOL]     return sers.entrySet(); [EOL] } <line_num>: 26,58
@Override [EOL] public void serialize(AtomicBoolean value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     jgen.writeBoolean(value.get()); [EOL] } <line_num>: 71,76
@Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) { [EOL]     return createSchemaNode("boolean", true); [EOL] } <line_num>: 78,82
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     visitor.expectBooleanFormat(typeHint); [EOL] } <line_num>: 84,89
@Override [EOL] public void serialize(AtomicInteger value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     jgen.writeNumber(value.get()); [EOL] } <line_num>: 97,102
@Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) { [EOL]     return createSchemaNode("integer", true); [EOL] } <line_num>: 104,108
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint); [EOL]     if (v2 != null) { [EOL]         v2.numberType(JsonParser.NumberType.INT); [EOL]     } [EOL] } <line_num>: 110,118
@Override [EOL] public void serialize(AtomicLong value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     jgen.writeNumber(value.get()); [EOL] } <line_num>: 126,131
@Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) { [EOL]     return createSchemaNode("integer", true); [EOL] } <line_num>: 133,137
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint); [EOL]     if (v2 != null) { [EOL]         v2.numberType(JsonParser.NumberType.LONG); [EOL]     } [EOL] } <line_num>: 139,147
@Override [EOL] public void serialize(AtomicReference<?> value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     provider.defaultSerializeValue(value.get(), jgen); [EOL] } <line_num>: 155,160
@Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) { [EOL]     return createSchemaNode("any", true); [EOL] } <line_num>: 162,166
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     visitor.expectAnyFormat(typeHint); [EOL] } <line_num>: 168,173
@Override [EOL] public void serialize(File value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     jgen.writeString(value.getAbsolutePath()); [EOL] } <line_num>: 191,196
@Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) { [EOL]     return createSchemaNode("string", true); [EOL] } <line_num>: 198,202
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     visitor.expectStringFormat(typeHint); [EOL] } <line_num>: 204,209
@Override [EOL] public void serialize(Class<?> value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     jgen.writeString(value.getName()); [EOL] } <line_num>: 221,226
@Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) { [EOL]     return createSchemaNode("string", true); [EOL] } <line_num>: 228,232
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     visitor.expectStringFormat(typeHint); [EOL] } <line_num>: 234,239
