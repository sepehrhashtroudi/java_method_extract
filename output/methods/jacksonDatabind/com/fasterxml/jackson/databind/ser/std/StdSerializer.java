protected StdSerializer(Class<T> t) { [EOL]     _handledType = t; [EOL] } <line_num>: 39,41
@SuppressWarnings("unchecked") [EOL] protected StdSerializer(JavaType type) { [EOL]     _handledType = (Class<T>) type.getRawClass(); [EOL] } <line_num>: 43,46
@SuppressWarnings("unchecked") [EOL] protected StdSerializer(Class<?> t, boolean dummy) { [EOL]     _handledType = (Class<T>) t; [EOL] } <line_num>: 52,55
@Override [EOL] public Class<T> handledType() { [EOL]     return _handledType; [EOL] } <line_num>: 62,63
@Override [EOL] public abstract void serialize(T value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException; <line_num>: 71,73
@Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException { [EOL]     return createSchemaNode("string"); [EOL] } <line_num>: 85,90
@Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint, boolean isOptional) throws JsonMappingException { [EOL]     ObjectNode schema = (ObjectNode) getSchema(provider, typeHint); [EOL]     if (!isOptional) { [EOL]         schema.put("required", !isOptional); [EOL]     } [EOL]     return schema; [EOL] } <line_num>: 96,105
protected ObjectNode createObjectNode() { [EOL]     return JsonNodeFactory.instance.objectNode(); [EOL] } <line_num>: 107,109
protected ObjectNode createSchemaNode(String type) { [EOL]     ObjectNode schema = createObjectNode(); [EOL]     schema.put("type", type); [EOL]     return schema; [EOL] } <line_num>: 111,116
protected ObjectNode createSchemaNode(String type, boolean isOptional) { [EOL]     ObjectNode schema = createSchemaNode(type); [EOL]     if (!isOptional) { [EOL]         schema.put("required", !isOptional); [EOL]     } [EOL]     return schema; [EOL] } <line_num>: 118,126
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     visitor.expectAnyFormat(typeHint); [EOL] } <line_num>: 132,137
public void wrapAndThrow(SerializerProvider provider, Throwable t, Object bean, String fieldName) throws IOException { [EOL]     while (t instanceof InvocationTargetException && t.getCause() != null) { [EOL]         t = t.getCause(); [EOL]     } [EOL]     if (t instanceof Error) { [EOL]         throw (Error) t; [EOL]     } [EOL]     boolean wrap = (provider == null) || provider.isEnabled(SerializationFeature.WRAP_EXCEPTIONS); [EOL]     if (t instanceof IOException) { [EOL]         if (!wrap || !(t instanceof JsonMappingException)) { [EOL]             throw (IOException) t; [EOL]         } [EOL]     } else if (!wrap) { [EOL]         if (t instanceof RuntimeException) { [EOL]             throw (RuntimeException) t; [EOL]         } [EOL]     } [EOL]     throw JsonMappingException.wrapWithPath(t, bean, fieldName); [EOL] } <line_num>: 157,185
public void wrapAndThrow(SerializerProvider provider, Throwable t, Object bean, int index) throws IOException { [EOL]     while (t instanceof InvocationTargetException && t.getCause() != null) { [EOL]         t = t.getCause(); [EOL]     } [EOL]     if (t instanceof Error) { [EOL]         throw (Error) t; [EOL]     } [EOL]     boolean wrap = (provider == null) || provider.isEnabled(SerializationFeature.WRAP_EXCEPTIONS); [EOL]     if (t instanceof IOException) { [EOL]         if (!wrap || !(t instanceof JsonMappingException)) { [EOL]             throw (IOException) t; [EOL]         } [EOL]     } else if (!wrap) { [EOL]         if (t instanceof RuntimeException) { [EOL]             throw (RuntimeException) t; [EOL]         } [EOL]     } [EOL]     throw JsonMappingException.wrapWithPath(t, bean, index); [EOL] } <line_num>: 187,211
protected boolean isDefaultSerializer(JsonSerializer<?> serializer) { [EOL]     return (serializer != null && serializer.getClass().getAnnotation(JacksonStdImpl.class) != null); [EOL] } <line_num>: 225,227
protected JsonSerializer<?> findConvertingContentSerializer(SerializerProvider provider, BeanProperty prop, JsonSerializer<?> existingSerializer) throws JsonMappingException { [EOL]     final AnnotationIntrospector intr = provider.getAnnotationIntrospector(); [EOL]     if (intr != null && prop != null) { [EOL]         Object convDef = intr.findSerializationContentConverter(prop.getMember()); [EOL]         if (convDef != null) { [EOL]             Converter<Object, Object> conv = provider.converterInstance(prop.getMember(), convDef); [EOL]             JavaType delegateType = conv.getOutputType(provider.getTypeFactory()); [EOL]             if (existingSerializer == null) { [EOL]                 existingSerializer = provider.findValueSerializer(delegateType, prop); [EOL]             } [EOL]             return new StdDelegatingSerializer(conv, delegateType, existingSerializer); [EOL]         } [EOL]     } [EOL]     return existingSerializer; [EOL] } <line_num>: 239,256
