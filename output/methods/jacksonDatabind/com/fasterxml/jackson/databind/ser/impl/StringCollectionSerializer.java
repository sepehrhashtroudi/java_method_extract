protected StringCollectionSerializer() { [EOL]     this(null); [EOL] } <line_num>: 39,41
@SuppressWarnings("unchecked") [EOL] protected StringCollectionSerializer(JsonSerializer<?> ser) { [EOL]     super(Collection.class); [EOL]     _serializer = (JsonSerializer<String>) ser; [EOL] } <line_num>: 43,48
@Override [EOL] protected JsonNode contentSchema() { [EOL]     return createSchemaNode("string", true); [EOL] } <line_num>: 50,52
@Override [EOL] protected void acceptContentVisitor(JsonArrayFormatVisitor visitor) throws JsonMappingException { [EOL]     visitor.itemsFormat(JsonFormatTypes.STRING); [EOL] } <line_num>: 54,59
@Override [EOL] public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException { [EOL]     JsonSerializer<?> ser = null; [EOL]     if (property != null) { [EOL]         AnnotatedMember m = property.getMember(); [EOL]         if (m != null) { [EOL]             Object serDef = provider.getAnnotationIntrospector().findContentSerializer(m); [EOL]             if (serDef != null) { [EOL]                 ser = provider.serializerInstance(m, serDef); [EOL]             } [EOL]         } [EOL]     } [EOL]     if (ser == null) { [EOL]         ser = _serializer; [EOL]     } [EOL]     ser = findConvertingContentSerializer(provider, property, ser); [EOL]     if (ser == null) { [EOL]         ser = provider.findValueSerializer(String.class, property); [EOL]     } else if (ser instanceof ContextualSerializer) { [EOL]         ser = ((ContextualSerializer) ser).createContextual(provider, property); [EOL]     } [EOL]     if (isDefaultSerializer(ser)) { [EOL]         ser = null; [EOL]     } [EOL]     if (ser == _serializer) { [EOL]         return this; [EOL]     } [EOL]     return new StringCollectionSerializer(ser); [EOL] } <line_num>: 67,106
@Override [EOL] public void serialize(Collection<String> value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     if ((value.size() == 1) && provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)) { [EOL]         _serializeUnwrapped(value, jgen, provider); [EOL]         return; [EOL]     } [EOL]     jgen.writeStartArray(); [EOL]     if (_serializer == null) { [EOL]         serializeContents(value, jgen, provider); [EOL]     } else { [EOL]         serializeUsingCustom(value, jgen, provider); [EOL]     } [EOL]     jgen.writeEndArray(); [EOL] } <line_num>: 114,130
private final void _serializeUnwrapped(Collection<String> value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     if (_serializer == null) { [EOL]         serializeContents(value, jgen, provider); [EOL]     } else { [EOL]         serializeUsingCustom(value, jgen, provider); [EOL]     } [EOL] } <line_num>: 132,140
@Override [EOL] public void serializeWithType(Collection<String> value, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException, JsonGenerationException { [EOL]     typeSer.writeTypePrefixForArray(value, jgen); [EOL]     if (_serializer == null) { [EOL]         serializeContents(value, jgen, provider); [EOL]     } else { [EOL]         serializeUsingCustom(value, jgen, provider); [EOL]     } [EOL]     typeSer.writeTypeSuffixForArray(value, jgen); [EOL] } <line_num>: 142,154
private final void serializeContents(Collection<String> value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     if (_serializer != null) { [EOL]         serializeUsingCustom(value, jgen, provider); [EOL]         return; [EOL]     } [EOL]     int i = 0; [EOL]     for (String str : value) { [EOL]         try { [EOL]             if (str == null) { [EOL]                 provider.defaultSerializeNull(jgen); [EOL]             } else { [EOL]                 jgen.writeString(str); [EOL]             } [EOL]             ++i; [EOL]         } catch (Exception e) { [EOL]             wrapAndThrow(provider, e, value, i); [EOL]         } [EOL]     } [EOL] } <line_num>: 156,176
private void serializeUsingCustom(Collection<String> value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     final JsonSerializer<String> ser = _serializer; [EOL]     int i = 0; [EOL]     for (String str : value) { [EOL]         try { [EOL]             if (str == null) { [EOL]                 provider.defaultSerializeNull(jgen); [EOL]             } else { [EOL]                 ser.serialize(str, jgen, provider); [EOL]             } [EOL]         } catch (Exception e) { [EOL]             wrapAndThrow(provider, e, value, i); [EOL]         } [EOL]     } [EOL] } <line_num>: 178,194
