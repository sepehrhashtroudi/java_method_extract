@SuppressWarnings("unchecked") [EOL] protected MapSerializer(HashSet<String> ignoredEntries, JavaType keyType, JavaType valueType, boolean valueTypeIsStatic, TypeSerializer vts, JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer) { [EOL]     super(Map.class, false); [EOL]     _ignoredEntries = ignoredEntries; [EOL]     _keyType = keyType; [EOL]     _valueType = valueType; [EOL]     _valueTypeIsStatic = valueTypeIsStatic; [EOL]     _valueTypeSerializer = vts; [EOL]     _keySerializer = (JsonSerializer<Object>) keySerializer; [EOL]     _valueSerializer = (JsonSerializer<Object>) valueSerializer; [EOL]     _dynamicValueSerializers = PropertySerializerMap.emptyMap(); [EOL]     _property = null; [EOL] } <line_num>: 87,103
@SuppressWarnings("unchecked") [EOL] protected MapSerializer(MapSerializer src, BeanProperty property, JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer, HashSet<String> ignored) { [EOL]     super(Map.class, false); [EOL]     _ignoredEntries = ignored; [EOL]     _keyType = src._keyType; [EOL]     _valueType = src._valueType; [EOL]     _valueTypeIsStatic = src._valueTypeIsStatic; [EOL]     _valueTypeSerializer = src._valueTypeSerializer; [EOL]     _keySerializer = (JsonSerializer<Object>) keySerializer; [EOL]     _valueSerializer = (JsonSerializer<Object>) valueSerializer; [EOL]     _dynamicValueSerializers = src._dynamicValueSerializers; [EOL]     _property = property; [EOL] } <line_num>: 105,120
protected MapSerializer(MapSerializer src, TypeSerializer vts) { [EOL]     super(Map.class, false); [EOL]     _ignoredEntries = src._ignoredEntries; [EOL]     _keyType = src._keyType; [EOL]     _valueType = src._valueType; [EOL]     _valueTypeIsStatic = src._valueTypeIsStatic; [EOL]     _valueTypeSerializer = vts; [EOL]     _keySerializer = src._keySerializer; [EOL]     _valueSerializer = src._valueSerializer; [EOL]     _dynamicValueSerializers = src._dynamicValueSerializers; [EOL]     _property = src._property; [EOL] } <line_num>: 122,134
@Override [EOL] public MapSerializer _withValueTypeSerializer(TypeSerializer vts) { [EOL]     return new MapSerializer(this, vts); [EOL] } <line_num>: 136,140
public MapSerializer withResolved(BeanProperty property, JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer, HashSet<String> ignored) { [EOL]     return new MapSerializer(this, property, keySerializer, valueSerializer, ignored); [EOL] } <line_num>: 142,147
public static MapSerializer construct(String[] ignoredList, JavaType mapType, boolean staticValueType, TypeSerializer vts, JsonSerializer<Object> keySerializer, JsonSerializer<Object> valueSerializer) { [EOL]     HashSet<String> ignoredEntries = toSet(ignoredList); [EOL]     JavaType keyType, valueType; [EOL]     if (mapType == null) { [EOL]         keyType = valueType = UNSPECIFIED_TYPE; [EOL]     } else { [EOL]         keyType = mapType.getKeyType(); [EOL]         valueType = mapType.getContentType(); [EOL]     } [EOL]     if (!staticValueType) { [EOL]         staticValueType = (valueType != null && valueType.isFinal()); [EOL]     } [EOL]     return new MapSerializer(ignoredEntries, keyType, valueType, staticValueType, vts, keySerializer, valueSerializer); [EOL] } <line_num>: 149,168
private static HashSet<String> toSet(String[] ignoredEntries) { [EOL]     if (ignoredEntries == null || ignoredEntries.length == 0) { [EOL]         return null; [EOL]     } [EOL]     HashSet<String> result = new HashSet<String>(ignoredEntries.length); [EOL]     for (String prop : ignoredEntries) { [EOL]         result.add(prop); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 170,179
@Override [EOL] public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException { [EOL]     JsonSerializer<?> ser = null; [EOL]     JsonSerializer<?> keySer = null; [EOL]     if (property != null) { [EOL]         AnnotatedMember m = property.getMember(); [EOL]         if (m != null) { [EOL]             Object serDef; [EOL]             final AnnotationIntrospector intr = provider.getAnnotationIntrospector(); [EOL]             serDef = intr.findKeySerializer(m); [EOL]             if (serDef != null) { [EOL]                 keySer = provider.serializerInstance(m, serDef); [EOL]             } [EOL]             serDef = intr.findContentSerializer(m); [EOL]             if (serDef != null) { [EOL]                 ser = provider.serializerInstance(m, serDef); [EOL]             } [EOL]         } [EOL]     } [EOL]     if (ser == null) { [EOL]         ser = _valueSerializer; [EOL]     } [EOL]     ser = findConvertingContentSerializer(provider, property, ser); [EOL]     if (ser == null) { [EOL]         if (_valueTypeIsStatic || hasContentTypeAnnotation(provider, property)) { [EOL]             ser = provider.findValueSerializer(_valueType, property); [EOL]         } [EOL]     } else if (ser instanceof ContextualSerializer) { [EOL]         ser = ((ContextualSerializer) ser).createContextual(provider, property); [EOL]     } [EOL]     if (keySer == null) { [EOL]         keySer = _keySerializer; [EOL]     } [EOL]     if (keySer == null) { [EOL]         keySer = provider.findKeySerializer(_keyType, property); [EOL]     } else if (keySer instanceof ContextualSerializer) { [EOL]         keySer = ((ContextualSerializer) keySer).createContextual(provider, property); [EOL]     } [EOL]     HashSet<String> ignored = this._ignoredEntries; [EOL]     AnnotationIntrospector intr = provider.getAnnotationIntrospector(); [EOL]     if (intr != null && property != null) { [EOL]         String[] moreToIgnore = intr.findPropertiesToIgnore(property.getMember()); [EOL]         if (moreToIgnore != null) { [EOL]             ignored = (ignored == null) ? new HashSet<String>() : new HashSet<String>(ignored); [EOL]             for (String str : moreToIgnore) { [EOL]                 ignored.add(str); [EOL]             } [EOL]         } [EOL]     } [EOL]     return withResolved(property, keySer, ser, ignored); [EOL] } <line_num>: 187,249
@Override [EOL] public JavaType getContentType() { [EOL]     return _valueType; [EOL] } <line_num>: 257,260
@Override [EOL] public JsonSerializer<?> getContentSerializer() { [EOL]     return _valueSerializer; [EOL] } <line_num>: 262,265
@Override [EOL] public boolean isEmpty(Map<?, ?> value) { [EOL]     return (value == null) || value.isEmpty(); [EOL] } <line_num>: 267,270
@Override [EOL] public boolean hasSingleElement(Map<?, ?> value) { [EOL]     return (value.size() == 1); [EOL] } <line_num>: 272,275
public JsonSerializer<?> getKeySerializer() { [EOL]     return _keySerializer; [EOL] } <line_num>: 293,295
@Override [EOL] public void serialize(Map<?, ?> value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     jgen.writeStartObject(); [EOL]     if (!value.isEmpty()) { [EOL]         if (provider.isEnabled(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS)) { [EOL]             value = _orderEntries(value); [EOL]         } [EOL]         if (_valueSerializer != null) { [EOL]             serializeFieldsUsing(value, jgen, provider, _valueSerializer); [EOL]         } else { [EOL]             serializeFields(value, jgen, provider); [EOL]         } [EOL]     } [EOL]     jgen.writeEndObject(); [EOL] } <line_num>: 303,319
@Override [EOL] public void serializeWithType(Map<?, ?> value, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException, JsonGenerationException { [EOL]     typeSer.writeTypePrefixForObject(value, jgen); [EOL]     if (!value.isEmpty()) { [EOL]         if (provider.isEnabled(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS)) { [EOL]             value = _orderEntries(value); [EOL]         } [EOL]         if (_valueSerializer != null) { [EOL]             serializeFieldsUsing(value, jgen, provider, _valueSerializer); [EOL]         } else { [EOL]             serializeFields(value, jgen, provider); [EOL]         } [EOL]     } [EOL]     typeSer.writeTypeSuffixForObject(value, jgen); [EOL] } <line_num>: 321,338
public void serializeFields(Map<?, ?> value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     if (_valueTypeSerializer != null) { [EOL]         serializeTypedFields(value, jgen, provider); [EOL]         return; [EOL]     } [EOL]     final JsonSerializer<Object> keySerializer = _keySerializer; [EOL]     final HashSet<String> ignored = _ignoredEntries; [EOL]     final boolean skipNulls = !provider.isEnabled(SerializationFeature.WRITE_NULL_MAP_VALUES); [EOL]     PropertySerializerMap serializers = _dynamicValueSerializers; [EOL]     for (Map.Entry<?, ?> entry : value.entrySet()) { [EOL]         Object valueElem = entry.getValue(); [EOL]         Object keyElem = entry.getKey(); [EOL]         if (keyElem == null) { [EOL]             provider.findNullKeySerializer(_keyType, _property).serialize(null, jgen, provider); [EOL]         } else { [EOL]             if (skipNulls && valueElem == null) [EOL]                 continue; [EOL]             if (ignored != null && ignored.contains(keyElem)) [EOL]                 continue; [EOL]             keySerializer.serialize(keyElem, jgen, provider); [EOL]         } [EOL]         if (valueElem == null) { [EOL]             provider.defaultSerializeNull(jgen); [EOL]         } else { [EOL]             Class<?> cc = valueElem.getClass(); [EOL]             JsonSerializer<Object> serializer = serializers.serializerFor(cc); [EOL]             if (serializer == null) { [EOL]                 if (_valueType.hasGenericTypes()) { [EOL]                     serializer = _findAndAddDynamic(serializers, provider.constructSpecializedType(_valueType, cc), provider); [EOL]                 } else { [EOL]                     serializer = _findAndAddDynamic(serializers, cc, provider); [EOL]                 } [EOL]                 serializers = _dynamicValueSerializers; [EOL]             } [EOL]             try { [EOL]                 serializer.serialize(valueElem, jgen, provider); [EOL]             } catch (Exception e) { [EOL]                 String keyDesc = "" + keyElem; [EOL]                 wrapAndThrow(provider, e, value, keyDesc); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 349,402
protected void serializeFieldsUsing(Map<?, ?> value, JsonGenerator jgen, SerializerProvider provider, JsonSerializer<Object> ser) throws IOException, JsonGenerationException { [EOL]     final JsonSerializer<Object> keySerializer = _keySerializer; [EOL]     final HashSet<String> ignored = _ignoredEntries; [EOL]     final TypeSerializer typeSer = _valueTypeSerializer; [EOL]     final boolean skipNulls = !provider.isEnabled(SerializationFeature.WRITE_NULL_MAP_VALUES); [EOL]     for (Map.Entry<?, ?> entry : value.entrySet()) { [EOL]         Object valueElem = entry.getValue(); [EOL]         Object keyElem = entry.getKey(); [EOL]         if (keyElem == null) { [EOL]             provider.findNullKeySerializer(_keyType, _property).serialize(null, jgen, provider); [EOL]         } else { [EOL]             if (skipNulls && valueElem == null) [EOL]                 continue; [EOL]             if (ignored != null && ignored.contains(keyElem)) [EOL]                 continue; [EOL]             keySerializer.serialize(keyElem, jgen, provider); [EOL]         } [EOL]         if (valueElem == null) { [EOL]             provider.defaultSerializeNull(jgen); [EOL]         } else { [EOL]             try { [EOL]                 if (typeSer == null) { [EOL]                     ser.serialize(valueElem, jgen, provider); [EOL]                 } else { [EOL]                     ser.serializeWithType(valueElem, jgen, provider, typeSer); [EOL]                 } [EOL]             } catch (Exception e) { [EOL]                 String keyDesc = "" + keyElem; [EOL]                 wrapAndThrow(provider, e, value, keyDesc); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 409,445
protected void serializeTypedFields(Map<?, ?> value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     final JsonSerializer<Object> keySerializer = _keySerializer; [EOL]     JsonSerializer<Object> prevValueSerializer = null; [EOL]     Class<?> prevValueClass = null; [EOL]     final HashSet<String> ignored = _ignoredEntries; [EOL]     final boolean skipNulls = !provider.isEnabled(SerializationFeature.WRITE_NULL_MAP_VALUES); [EOL]     for (Map.Entry<?, ?> entry : value.entrySet()) { [EOL]         Object valueElem = entry.getValue(); [EOL]         Object keyElem = entry.getKey(); [EOL]         if (keyElem == null) { [EOL]             provider.findNullKeySerializer(_keyType, _property).serialize(null, jgen, provider); [EOL]         } else { [EOL]             if (skipNulls && valueElem == null) [EOL]                 continue; [EOL]             if (ignored != null && ignored.contains(keyElem)) [EOL]                 continue; [EOL]             keySerializer.serialize(keyElem, jgen, provider); [EOL]         } [EOL]         if (valueElem == null) { [EOL]             provider.defaultSerializeNull(jgen); [EOL]         } else { [EOL]             Class<?> cc = valueElem.getClass(); [EOL]             JsonSerializer<Object> currSerializer; [EOL]             if (cc == prevValueClass) { [EOL]                 currSerializer = prevValueSerializer; [EOL]             } else { [EOL]                 currSerializer = provider.findValueSerializer(cc, _property); [EOL]                 prevValueSerializer = currSerializer; [EOL]                 prevValueClass = cc; [EOL]             } [EOL]             try { [EOL]                 currSerializer.serializeWithType(valueElem, jgen, provider, _valueTypeSerializer); [EOL]             } catch (Exception e) { [EOL]                 String keyDesc = "" + keyElem; [EOL]                 wrapAndThrow(provider, e, value, keyDesc); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 447,492
@Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) { [EOL]     ObjectNode o = createSchemaNode("object", true); [EOL]     return o; [EOL] } <line_num>: 494,501
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     JsonMapFormatVisitor v2 = (visitor == null) ? null : visitor.expectMapFormat(typeHint); [EOL]     if (v2 != null) { [EOL]         v2.keyFormat(_keySerializer, _keyType); [EOL]         JsonSerializer<?> valueSer = _valueSerializer; [EOL]         if (valueSer == null) { [EOL]             valueSer = _findAndAddDynamic(_dynamicValueSerializers, _valueType, visitor.getProvider()); [EOL]         } [EOL]         v2.valueFormat(valueSer, _valueType); [EOL]     } [EOL] } <line_num>: 503,517
protected final JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map, Class<?> type, SerializerProvider provider) throws JsonMappingException { [EOL]     PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property); [EOL]     if (map != result.map) { [EOL]         _dynamicValueSerializers = result.map; [EOL]     } [EOL]     return result.serializer; [EOL] } <line_num>: 525,534
protected final JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map, JavaType type, SerializerProvider provider) throws JsonMappingException { [EOL]     PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property); [EOL]     if (map != result.map) { [EOL]         _dynamicValueSerializers = result.map; [EOL]     } [EOL]     return result.serializer; [EOL] } <line_num>: 536,544
protected Map<?, ?> _orderEntries(Map<?, ?> input) { [EOL]     if (input instanceof SortedMap<?, ?>) { [EOL]         return input; [EOL]     } [EOL]     return new TreeMap<Object, Object>(input); [EOL] } <line_num>: 546,553
