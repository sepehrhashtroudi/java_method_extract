@SuppressWarnings("unchecked") [EOL] public StdDelegatingSerializer(Converter<?, ?> converter) { [EOL]     super(Object.class); [EOL]     _converter = (Converter<Object, ?>) converter; [EOL]     _delegateType = null; [EOL]     _delegateSerializer = null; [EOL] } <line_num>: 50,57
@SuppressWarnings("unchecked") [EOL] public <T> StdDelegatingSerializer(Class<T> cls, Converter<T, ?> converter) { [EOL]     super(cls, false); [EOL]     _converter = (Converter<Object, ?>) converter; [EOL]     _delegateType = null; [EOL]     _delegateSerializer = null; [EOL] } <line_num>: 59,66
@SuppressWarnings("unchecked") [EOL] public StdDelegatingSerializer(Converter<Object, ?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer) { [EOL]     super(delegateType); [EOL]     _converter = converter; [EOL]     _delegateType = delegateType; [EOL]     _delegateSerializer = (JsonSerializer<Object>) delegateSerializer; [EOL] } <line_num>: 68,76
protected StdDelegatingSerializer withDelegate(Converter<Object, ?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer) { [EOL]     if (getClass() != StdDelegatingSerializer.class) { [EOL]         throw new IllegalStateException("Sub-class " + getClass().getName() + " must override 'withDelegate'"); [EOL]     } [EOL]     return new StdDelegatingSerializer(converter, delegateType, delegateSerializer); [EOL] } <line_num>: 82,89
@Override [EOL] public void resolve(SerializerProvider provider) throws JsonMappingException { [EOL]     if ((_delegateSerializer != null) && (_delegateSerializer instanceof ResolvableSerializer)) { [EOL]         ((ResolvableSerializer) _delegateSerializer).resolve(provider); [EOL]     } [EOL] } <line_num>: 97,104
@Override [EOL] public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException { [EOL]     if (_delegateSerializer != null) { [EOL]         if (_delegateSerializer instanceof ContextualSerializer) { [EOL]             JsonSerializer<?> ser = ((ContextualSerializer) _delegateSerializer).createContextual(provider, property); [EOL]             if (ser == _delegateSerializer) { [EOL]                 return this; [EOL]             } [EOL]             return withDelegate(_converter, _delegateType, ser); [EOL]         } [EOL]         return this; [EOL]     } [EOL]     JavaType delegateType = _delegateType; [EOL]     if (delegateType == null) { [EOL]         delegateType = _converter.getOutputType(provider.getTypeFactory()); [EOL]     } [EOL]     return withDelegate(_converter, delegateType, provider.findValueSerializer(delegateType, property)); [EOL] } <line_num>: 106,129
protected Converter<Object, ?> getConverter() { [EOL]     return _converter; [EOL] } <line_num>: 137,139
@Override [EOL] public JsonSerializer<?> getDelegatee() { [EOL]     return _delegateSerializer; [EOL] } <line_num>: 141,144
@Override [EOL] public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]     Object delegateValue = convertValue(value); [EOL]     if (delegateValue == null) { [EOL]         provider.defaultSerializeNull(jgen); [EOL]         return; [EOL]     } [EOL]     _delegateSerializer.serialize(delegateValue, jgen, provider); [EOL] } <line_num>: 152,163
@Override [EOL] public void serializeWithType(Object value, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException, JsonProcessingException { [EOL]     Object delegateValue = convertValue(value); [EOL]     _delegateSerializer.serializeWithType(delegateValue, jgen, provider, typeSer); [EOL] } <line_num>: 165,175
@Override [EOL] public boolean isEmpty(Object value) { [EOL]     Object delegateValue = convertValue(value); [EOL]     return _delegateSerializer.isEmpty(delegateValue); [EOL] } <line_num>: 177,182
@Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException { [EOL]     if (_delegateSerializer instanceof SchemaAware) { [EOL]         return ((SchemaAware) _delegateSerializer).getSchema(provider, typeHint); [EOL]     } [EOL]     return super.getSchema(provider, typeHint); [EOL] } <line_num>: 190,198
@Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint, boolean isOptional) throws JsonMappingException { [EOL]     if (_delegateSerializer instanceof SchemaAware) { [EOL]         return ((SchemaAware) _delegateSerializer).getSchema(provider, typeHint, isOptional); [EOL]     } [EOL]     return super.getSchema(provider, typeHint); [EOL] } <line_num>: 200,208
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint); [EOL] } <line_num>: 210,218
protected Object convertValue(Object value) { [EOL]     return _converter.convert(value); [EOL] } <line_num>: 237,239
