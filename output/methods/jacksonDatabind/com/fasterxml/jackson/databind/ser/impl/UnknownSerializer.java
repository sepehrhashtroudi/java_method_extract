public UnknownSerializer() { [EOL]     super(Object.class); [EOL] } <line_num>: 16,18
@Override [EOL] public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonMappingException { [EOL]     if (provider.isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS)) { [EOL]         failForEmpty(value); [EOL]     } [EOL]     jgen.writeStartObject(); [EOL]     jgen.writeEndObject(); [EOL] } <line_num>: 20,31
@Override [EOL] public final void serializeWithType(Object value, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException, JsonGenerationException { [EOL]     if (provider.isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS)) { [EOL]         failForEmpty(value); [EOL]     } [EOL]     typeSer.writeTypePrefixForObject(value, jgen); [EOL]     typeSer.writeTypeSuffixForObject(value, jgen); [EOL] } <line_num>: 33,43
@Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException { [EOL]     return null; [EOL] } <line_num>: 45,48
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     visitor.expectAnyFormat(typeHint); [EOL] } <line_num>: 50,55
protected void failForEmpty(Object value) throws JsonMappingException { [EOL]     throw new JsonMappingException("No serializer found for class " + value.getClass().getName() + " and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) )"); [EOL] } <line_num>: 57,60
