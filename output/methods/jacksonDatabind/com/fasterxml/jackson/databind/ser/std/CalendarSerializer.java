public CalendarSerializer() { [EOL]     this(false, null); [EOL] } <line_num>: 23,23
public CalendarSerializer(boolean useTimestamp, DateFormat customFormat) { [EOL]     super(Calendar.class, useTimestamp, customFormat); [EOL] } <line_num>: 25,27
@Override [EOL] public CalendarSerializer withFormat(boolean timestamp, DateFormat customFormat) { [EOL]     if (timestamp) { [EOL]         return new CalendarSerializer(true, null); [EOL]     } [EOL]     return new CalendarSerializer(false, customFormat); [EOL] } <line_num>: 29,36
@Override [EOL] protected long _timestamp(Calendar value) { [EOL]     return (value == null) ? 0L : value.getTimeInMillis(); [EOL] } <line_num>: 38,41
@Override [EOL] public void serialize(Calendar value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     if (_useTimestamp) { [EOL]         jgen.writeNumber(_timestamp(value)); [EOL]     } else if (_customFormat != null) { [EOL]         synchronized (_customFormat) { [EOL]             jgen.writeString(_customFormat.format(value)); [EOL]         } [EOL]     } else { [EOL]         provider.defaultSerializeDateValue(value.getTime(), jgen); [EOL]     } [EOL] } <line_num>: 43,57
