protected SerializableSerializer() { [EOL]     super(JsonSerializable.class); [EOL] } <line_num>: 38,38
@Override [EOL] public void serialize(JsonSerializable value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     value.serialize(jgen, provider); [EOL] } <line_num>: 40,45
@Override [EOL] public final void serializeWithType(JsonSerializable value, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException, JsonGenerationException { [EOL]     value.serializeWithType(jgen, provider, typeSer); [EOL] } <line_num>: 47,53
@Override [EOL] @SuppressWarnings("deprecation") [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException { [EOL]     ObjectNode objectNode = createObjectNode(); [EOL]     String schemaType = "any"; [EOL]     String objectProperties = null; [EOL]     String itemDefinition = null; [EOL]     if (typeHint != null) { [EOL]         Class<?> rawClass = TypeFactory.rawClass(typeHint); [EOL]         if (rawClass.isAnnotationPresent(JsonSerializableSchema.class)) { [EOL]             JsonSerializableSchema schemaInfo = rawClass.getAnnotation(JsonSerializableSchema.class); [EOL]             schemaType = schemaInfo.schemaType(); [EOL]             if (!JsonSerializableSchema.NO_VALUE.equals(schemaInfo.schemaObjectPropertiesDefinition())) { [EOL]                 objectProperties = schemaInfo.schemaObjectPropertiesDefinition(); [EOL]             } [EOL]             if (!JsonSerializableSchema.NO_VALUE.equals(schemaInfo.schemaItemDefinition())) { [EOL]                 itemDefinition = schemaInfo.schemaItemDefinition(); [EOL]             } [EOL]         } [EOL]     } [EOL]     objectNode.put("type", schemaType); [EOL]     if (objectProperties != null) { [EOL]         try { [EOL]             objectNode.put("properties", _getObjectMapper().readTree(objectProperties)); [EOL]         } catch (IOException e) { [EOL]             throw new JsonMappingException("Failed to parse @JsonSerializableSchema.schemaObjectPropertiesDefinition value"); [EOL]         } [EOL]     } [EOL]     if (itemDefinition != null) { [EOL]         try { [EOL]             objectNode.put("items", _getObjectMapper().readTree(itemDefinition)); [EOL]         } catch (IOException e) { [EOL]             throw new JsonMappingException("Failed to parse @JsonSerializableSchema.schemaItemDefinition value"); [EOL]         } [EOL]     } [EOL]     return objectNode; [EOL] } <line_num>: 55,98
private final static synchronized ObjectMapper _getObjectMapper() { [EOL]     ObjectMapper mapper = _mapperReference.get(); [EOL]     if (mapper == null) { [EOL]         mapper = new ObjectMapper(); [EOL]         _mapperReference.set(mapper); [EOL]     } [EOL]     return mapper; [EOL] } <line_num>: 100,108
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     visitor.expectAnyFormat(typeHint); [EOL] } <line_num>: 110,115
