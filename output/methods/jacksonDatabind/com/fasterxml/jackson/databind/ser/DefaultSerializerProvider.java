protected DefaultSerializerProvider() { [EOL]     super(); [EOL] } <line_num>: 59,59
protected DefaultSerializerProvider(SerializerProvider src, SerializationConfig config, SerializerFactory f) { [EOL]     super(src, config, f); [EOL] } <line_num>: 61,64
public Impl() { [EOL]     super(); [EOL] } <line_num>: 433,433
protected Impl(SerializerProvider src, SerializationConfig config, SerializerFactory f) { [EOL]     super(src, config, f); [EOL] } <line_num>: 435,438
public abstract DefaultSerializerProvider createInstance(SerializationConfig config, SerializerFactory jsf); <line_num>: 76,77
public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException { [EOL]     JsonSerializer<Object> ser; [EOL]     final boolean wrap; [EOL]     if (value == null) { [EOL]         ser = getDefaultNullValueSerializer(); [EOL]         wrap = false; [EOL]     } else { [EOL]         Class<?> cls = value.getClass(); [EOL]         ser = findTypedValueSerializer(cls, true, null); [EOL]         String rootName = _config.getRootName(); [EOL]         if (rootName == null) { [EOL]             wrap = _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE); [EOL]             if (wrap) { [EOL]                 jgen.writeStartObject(); [EOL]                 jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config)); [EOL]             } [EOL]         } else if (rootName.length() == 0) { [EOL]             wrap = false; [EOL]         } else { [EOL]             wrap = true; [EOL]             jgen.writeStartObject(); [EOL]             jgen.writeFieldName(rootName); [EOL]         } [EOL]     } [EOL]     try { [EOL]         ser.serialize(value, jgen, this); [EOL]         if (wrap) { [EOL]             jgen.writeEndObject(); [EOL]         } [EOL]     } catch (IOException ioe) { [EOL]         throw ioe; [EOL]     } catch (Exception e) { [EOL]         String msg = e.getMessage(); [EOL]         if (msg == null) { [EOL]             msg = "[no message for " + e.getClass().getName() + "]"; [EOL]         } [EOL]         throw new JsonMappingException(msg, e); [EOL]     } [EOL] } <line_num>: 85,131
public void serializeValue(JsonGenerator jgen, Object value, JavaType rootType) throws IOException, JsonGenerationException { [EOL]     final boolean wrap; [EOL]     JsonSerializer<Object> ser; [EOL]     if (value == null) { [EOL]         ser = getDefaultNullValueSerializer(); [EOL]         wrap = false; [EOL]     } else { [EOL]         if (!rootType.getRawClass().isAssignableFrom(value.getClass())) { [EOL]             _reportIncompatibleRootType(value, rootType); [EOL]         } [EOL]         ser = findTypedValueSerializer(rootType, true, null); [EOL]         wrap = _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE); [EOL]         if (wrap) { [EOL]             jgen.writeStartObject(); [EOL]             jgen.writeFieldName(_rootNames.findRootName(rootType, _config)); [EOL]         } [EOL]     } [EOL]     try { [EOL]         ser.serialize(value, jgen, this); [EOL]         if (wrap) { [EOL]             jgen.writeEndObject(); [EOL]         } [EOL]     } catch (IOException ioe) { [EOL]         throw ioe; [EOL]     } catch (Exception e) { [EOL]         String msg = e.getMessage(); [EOL]         if (msg == null) { [EOL]             msg = "[no message for " + e.getClass().getName() + "]"; [EOL]         } [EOL]         throw new JsonMappingException(msg, e); [EOL]     } [EOL] } <line_num>: 144,181
public void serializeValue(JsonGenerator jgen, Object value, JavaType rootType, JsonSerializer<Object> ser) throws IOException, JsonGenerationException { [EOL]     final boolean wrap; [EOL]     if (value == null) { [EOL]         ser = getDefaultNullValueSerializer(); [EOL]         wrap = false; [EOL]     } else { [EOL]         if (rootType != null) { [EOL]             if (!rootType.getRawClass().isAssignableFrom(value.getClass())) { [EOL]                 _reportIncompatibleRootType(value, rootType); [EOL]             } [EOL]         } [EOL]         if (ser == null) { [EOL]             ser = findTypedValueSerializer(rootType, true, null); [EOL]         } [EOL]         wrap = _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE); [EOL]         if (wrap) { [EOL]             jgen.writeStartObject(); [EOL]             jgen.writeFieldName(_rootNames.findRootName(rootType, _config)); [EOL]         } [EOL]     } [EOL]     try { [EOL]         ser.serialize(value, jgen, this); [EOL]         if (wrap) { [EOL]             jgen.writeEndObject(); [EOL]         } [EOL]     } catch (IOException ioe) { [EOL]         throw ioe; [EOL]     } catch (Exception e) { [EOL]         String msg = e.getMessage(); [EOL]         if (msg == null) { [EOL]             msg = "[no message for " + e.getClass().getName() + "]"; [EOL]         } [EOL]         throw new JsonMappingException(msg, e); [EOL]     } [EOL] } <line_num>: 195,235
@SuppressWarnings("deprecation") [EOL] public com.fasterxml.jackson.databind.jsonschema.JsonSchema generateJsonSchema(Class<?> type) throws JsonMappingException { [EOL]     if (type == null) { [EOL]         throw new IllegalArgumentException("A class must be provided"); [EOL]     } [EOL]     JsonSerializer<Object> ser = findValueSerializer(type, null); [EOL]     JsonNode schemaNode = (ser instanceof SchemaAware) ? ((SchemaAware) ser).getSchema(this, null) : com.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode(); [EOL]     if (!(schemaNode instanceof ObjectNode)) { [EOL]         throw new IllegalArgumentException("Class " + type.getName() + " would not be serialized as a JSON object and therefore has no schema"); [EOL]     } [EOL]     return new com.fasterxml.jackson.databind.jsonschema.JsonSchema((ObjectNode) schemaNode); [EOL] } <line_num>: 244,262
public void acceptJsonFormatVisitor(JavaType javaType, JsonFormatVisitorWrapper visitor) throws JsonMappingException { [EOL]     if (javaType == null) { [EOL]         throw new IllegalArgumentException("A class must be provided"); [EOL]     } [EOL]     visitor.setProvider(this); [EOL]     findValueSerializer(javaType, null).acceptJsonFormatVisitor(visitor, javaType); [EOL] } <line_num>: 271,282
public boolean hasSerializerFor(Class<?> cls) { [EOL]     try { [EOL]         return _findExplicitUntypedSerializer(cls) != null; [EOL]     } catch (JsonMappingException e) { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 291,299
public int cachedSerializersCount() { [EOL]     return _serializerCache.size(); [EOL] } <line_num>: 318,320
public void flushCachedSerializers() { [EOL]     _serializerCache.flush(); [EOL] } <line_num>: 328,330
@Override [EOL] public WritableObjectId findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType) { [EOL]     if (_seenObjectIds == null) { [EOL]         _seenObjectIds = new IdentityHashMap<Object, WritableObjectId>(); [EOL]     } else { [EOL]         WritableObjectId oid = _seenObjectIds.get(forPojo); [EOL]         if (oid != null) { [EOL]             return oid; [EOL]         } [EOL]     } [EOL]     ObjectIdGenerator<?> generator = null; [EOL]     if (_objectIdGenerators == null) { [EOL]         _objectIdGenerators = new ArrayList<ObjectIdGenerator<?>>(8); [EOL]     } else { [EOL]         for (int i = 0, len = _objectIdGenerators.size(); i < len; ++i) { [EOL]             ObjectIdGenerator<?> gen = _objectIdGenerators.get(i); [EOL]             if (gen.canUseFor(generatorType)) { [EOL]                 generator = gen; [EOL]                 break; [EOL]             } [EOL]         } [EOL]     } [EOL]     if (generator == null) { [EOL]         generator = generatorType.newForSerialization(this); [EOL]         _objectIdGenerators.add(generator); [EOL]     } [EOL]     WritableObjectId oid = new WritableObjectId(generator); [EOL]     _seenObjectIds.put(forPojo, oid); [EOL]     return oid; [EOL] } <line_num>: 338,371
@Override [EOL] public JsonSerializer<Object> serializerInstance(Annotated annotated, Object serDef) throws JsonMappingException { [EOL]     if (serDef == null) { [EOL]         return null; [EOL]     } [EOL]     JsonSerializer<?> ser; [EOL]     if (serDef instanceof JsonSerializer) { [EOL]         ser = (JsonSerializer<?>) serDef; [EOL]     } else { [EOL]         if (!(serDef instanceof Class)) { [EOL]             throw new IllegalStateException("AnnotationIntrospector returned serializer definition of type " + serDef.getClass().getName() + "; expected type JsonSerializer or Class<JsonSerializer> instead"); [EOL]         } [EOL]         Class<?> serClass = (Class<?>) serDef; [EOL]         if (serClass == JsonSerializer.None.class || serClass == NoClass.class) { [EOL]             return null; [EOL]         } [EOL]         if (!JsonSerializer.class.isAssignableFrom(serClass)) { [EOL]             throw new IllegalStateException("AnnotationIntrospector returned Class " + serClass.getName() + "; expected Class<JsonSerializer>"); [EOL]         } [EOL]         HandlerInstantiator hi = _config.getHandlerInstantiator(); [EOL]         ser = (hi == null) ? null : hi.serializerInstance(_config, annotated, serClass); [EOL]         if (ser == null) { [EOL]             ser = (JsonSerializer<?>) ClassUtil.createInstance(serClass, _config.canOverrideAccessModifiers()); [EOL]         } [EOL]     } [EOL]     return (JsonSerializer<Object>) _handleResolvable(ser); [EOL] } <line_num>: 379,417
@Override [EOL] public Impl createInstance(SerializationConfig config, SerializerFactory jsf) { [EOL]     return new Impl(this, config, jsf); [EOL] } <line_num>: 440,444
