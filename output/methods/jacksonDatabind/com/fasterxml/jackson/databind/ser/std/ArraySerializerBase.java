protected ArraySerializerBase(Class<T> cls) { [EOL]     super(cls); [EOL]     _property = null; [EOL] } <line_num>: 22,26
protected ArraySerializerBase(Class<T> cls, BeanProperty property) { [EOL]     super(cls); [EOL]     _property = property; [EOL] } <line_num>: 28,32
protected ArraySerializerBase(ArraySerializerBase<?> src) { [EOL]     super(src._handledType, false); [EOL]     _property = src._property; [EOL] } <line_num>: 34,38
protected ArraySerializerBase(ArraySerializerBase<?> src, BeanProperty property) { [EOL]     super(src._handledType, false); [EOL]     _property = property; [EOL] } <line_num>: 40,44
@Override [EOL] public final void serialize(T value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     if (provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED) && hasSingleElement(value)) { [EOL]         serializeContents(value, jgen, provider); [EOL]         return; [EOL]     } [EOL]     jgen.writeStartArray(); [EOL]     serializeContents(value, jgen, provider); [EOL]     jgen.writeEndArray(); [EOL] } <line_num>: 46,59
@Override [EOL] public final void serializeWithType(T value, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException, JsonGenerationException { [EOL]     typeSer.writeTypePrefixForArray(value, jgen); [EOL]     serializeContents(value, jgen, provider); [EOL]     typeSer.writeTypeSuffixForArray(value, jgen); [EOL] } <line_num>: 61,70
protected abstract void serializeContents(T value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException; <line_num>: 72,73
