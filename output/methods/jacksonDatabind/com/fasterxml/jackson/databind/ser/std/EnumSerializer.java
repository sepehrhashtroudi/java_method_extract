@Deprecated [EOL] public EnumSerializer(EnumValues v) { [EOL]     this(v, null); [EOL] } <line_num>: 61,64
public EnumSerializer(EnumValues v, Boolean serializeAsIndex) { [EOL]     super(Enum.class, false); [EOL]     _values = v; [EOL]     _serializeAsIndex = serializeAsIndex; [EOL] } <line_num>: 66,71
public static EnumSerializer construct(Class<Enum<?>> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) { [EOL]     AnnotationIntrospector intr = config.getAnnotationIntrospector(); [EOL]     EnumValues v = config.isEnabled(SerializationFeature.WRITE_ENUMS_USING_TO_STRING) ? EnumValues.constructFromToString(enumClass, intr) : EnumValues.constructFromName(enumClass, intr); [EOL]     Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true); [EOL]     return new EnumSerializer(v, serializeAsIndex); [EOL] } <line_num>: 79,88
@Deprecated [EOL] public static EnumSerializer construct(Class<Enum<?>> enumClass, SerializationConfig config, BeanDescription beanDesc) { [EOL]     return construct(enumClass, config, beanDesc, beanDesc.findExpectedFormat(null)); [EOL] } <line_num>: 93,98
@Override [EOL] public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException { [EOL]     if (property != null) { [EOL]         JsonFormat.Value format = prov.getAnnotationIntrospector().findFormat((Annotated) property.getMember()); [EOL]         if (format != null) { [EOL]             Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false); [EOL]             if (serializeAsIndex != _serializeAsIndex) { [EOL]                 return new EnumSerializer(_values, serializeAsIndex); [EOL]             } [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 105,119
public EnumValues getEnumValues() { [EOL]     return _values; [EOL] } <line_num>: 127,127
@Override [EOL] public final void serialize(Enum<?> en, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     if (_serializeAsIndex(provider)) { [EOL]         jgen.writeNumber(en.ordinal()); [EOL]         return; [EOL]     } [EOL]     jgen.writeString(_values.serializedValueFor(en)); [EOL] } <line_num>: 135,145
@Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) { [EOL]     if (_serializeAsIndex(provider)) { [EOL]         return createSchemaNode("integer", true); [EOL]     } [EOL]     ObjectNode objectNode = createSchemaNode("string", true); [EOL]     if (typeHint != null) { [EOL]         JavaType type = provider.constructType(typeHint); [EOL]         if (type.isEnumType()) { [EOL]             ArrayNode enumNode = objectNode.putArray("enum"); [EOL]             for (SerializedString value : _values.values()) { [EOL]                 enumNode.add(value.getValue()); [EOL]             } [EOL]         } [EOL]     } [EOL]     return objectNode; [EOL] } <line_num>: 147,165
@Override [EOL] public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { [EOL]     if (visitor.getProvider().isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX)) { [EOL]         JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint); [EOL]         if (v2 != null) { [EOL]             v2.numberType(JsonParser.NumberType.INT); [EOL]         } [EOL]     } else { [EOL]         JsonStringFormatVisitor stringVisitor = visitor.expectStringFormat(typeHint); [EOL]         if (typeHint != null && stringVisitor != null) { [EOL]             if (typeHint.isEnumType()) { [EOL]                 Set<String> enums = new LinkedHashSet<String>(); [EOL]                 for (SerializedString value : _values.values()) { [EOL]                     enums.add(value.getValue()); [EOL]                 } [EOL]                 stringVisitor.enumTypes(enums); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 167,189
protected final boolean _serializeAsIndex(SerializerProvider provider) { [EOL]     if (_serializeAsIndex != null) { [EOL]         return _serializeAsIndex.booleanValue(); [EOL]     } [EOL]     return provider.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL] } <line_num>: 197,204
protected static Boolean _isShapeWrittenUsingIndex(Class<?> enumClass, JsonFormat.Value format, boolean fromClass) { [EOL]     JsonFormat.Shape shape = (format == null) ? null : format.getShape(); [EOL]     if (shape == null) { [EOL]         return null; [EOL]     } [EOL]     if (shape == Shape.ANY || shape == Shape.SCALAR) { [EOL]         return null; [EOL]     } [EOL]     if (shape == Shape.STRING) { [EOL]         return Boolean.FALSE; [EOL]     } [EOL]     if (shape.isNumeric()) { [EOL]         return Boolean.TRUE; [EOL]     } [EOL]     throw new IllegalArgumentException("Unsupported serialization shape (" + shape + ") for Enum " + enumClass.getName() + ", not supported as " + (fromClass ? "class" : "property") + " annotation"); [EOL] } <line_num>: 209,229
