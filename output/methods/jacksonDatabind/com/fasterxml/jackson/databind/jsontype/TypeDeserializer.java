public abstract TypeDeserializer forProperty(BeanProperty prop); <line_num>: 41,41
public abstract As getTypeInclusion(); <line_num>: 54,54
public abstract String getPropertyName(); <line_num>: 60,60
public abstract TypeIdResolver getTypeIdResolver(); <line_num>: 66,66
public abstract Class<?> getDefaultImpl(); <line_num>: 74,74
public abstract Object deserializeTypedFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException; <line_num>: 91,93
public abstract Object deserializeTypedFromArray(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException; <line_num>: 104,106
public abstract Object deserializeTypedFromScalar(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException; <line_num>: 118,120
public abstract Object deserializeTypedFromAny(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException; <line_num>: 131,133
public static Object deserializeIfNatural(JsonParser jp, DeserializationContext ctxt, JavaType baseType) throws IOException, JsonProcessingException { [EOL]     return deserializeIfNatural(jp, ctxt, baseType.getRawClass()); [EOL] } <line_num>: 146,151
@SuppressWarnings("incomplete-switch") [EOL] public static Object deserializeIfNatural(JsonParser jp, DeserializationContext ctxt, Class<?> base) throws IOException, JsonProcessingException { [EOL]     JsonToken t = jp.getCurrentToken(); [EOL]     if (t == null) { [EOL]         return null; [EOL]     } [EOL]     switch(t) { [EOL]         case VALUE_STRING: [EOL]             if (base.isAssignableFrom(String.class)) { [EOL]                 return jp.getText(); [EOL]             } [EOL]             break; [EOL]         case VALUE_NUMBER_INT: [EOL]             if (base.isAssignableFrom(Integer.class)) { [EOL]                 return jp.getIntValue(); [EOL]             } [EOL]             break; [EOL]         case VALUE_NUMBER_FLOAT: [EOL]             if (base.isAssignableFrom(Double.class)) { [EOL]                 return Double.valueOf(jp.getDoubleValue()); [EOL]             } [EOL]             break; [EOL]         case VALUE_TRUE: [EOL]             if (base.isAssignableFrom(Boolean.class)) { [EOL]                 return Boolean.TRUE; [EOL]             } [EOL]             break; [EOL]         case VALUE_FALSE: [EOL]             if (base.isAssignableFrom(Boolean.class)) { [EOL]                 return Boolean.FALSE; [EOL]             } [EOL]             break; [EOL]     } [EOL]     return null; [EOL] } <line_num>: 153,191
