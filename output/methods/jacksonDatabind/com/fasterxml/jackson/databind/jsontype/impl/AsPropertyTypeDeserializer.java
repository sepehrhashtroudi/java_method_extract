public AsPropertyTypeDeserializer(JavaType bt, TypeIdResolver idRes, String typePropertyName, boolean typeIdVisible, Class<?> defaultImpl) { [EOL]     super(bt, idRes, typePropertyName, typeIdVisible, defaultImpl); [EOL] } <line_num>: 28,32
public AsPropertyTypeDeserializer(AsPropertyTypeDeserializer src, BeanProperty property) { [EOL]     super(src, property); [EOL] } <line_num>: 34,36
@Override [EOL] public TypeDeserializer forProperty(BeanProperty prop) { [EOL]     if (prop == _property) { [EOL]         return this; [EOL]     } [EOL]     return new AsPropertyTypeDeserializer(this, prop); [EOL] } <line_num>: 38,44
@Override [EOL] public As getTypeInclusion() { [EOL]     return As.PROPERTY; [EOL] } <line_num>: 46,49
@Override [EOL] public Object deserializeTypedFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     JsonToken t = jp.getCurrentToken(); [EOL]     if (t == JsonToken.START_OBJECT) { [EOL]         t = jp.nextToken(); [EOL]     } else if (t == JsonToken.START_ARRAY) { [EOL]         return _deserializeTypedUsingDefaultImpl(jp, ctxt, null); [EOL]     } else if (t != JsonToken.FIELD_NAME) { [EOL]         return _deserializeTypedUsingDefaultImpl(jp, ctxt, null); [EOL]     } [EOL]     TokenBuffer tb = null; [EOL]     for (; t == JsonToken.FIELD_NAME; t = jp.nextToken()) { [EOL]         String name = jp.getCurrentName(); [EOL]         jp.nextToken(); [EOL]         if (_typePropertyName.equals(name)) { [EOL]             return _deserializeTypedForId(jp, ctxt, tb); [EOL]         } [EOL]         if (tb == null) { [EOL]             tb = new TokenBuffer(null); [EOL]         } [EOL]         tb.writeFieldName(name); [EOL]         tb.copyCurrentStructure(jp); [EOL]     } [EOL]     return _deserializeTypedUsingDefaultImpl(jp, ctxt, tb); [EOL] } <line_num>: 55,91
@SuppressWarnings("resource") [EOL] protected final Object _deserializeTypedForId(JsonParser jp, DeserializationContext ctxt, TokenBuffer tb) throws IOException, JsonProcessingException { [EOL]     String typeId = jp.getText(); [EOL]     JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId); [EOL]     if (_typeIdVisible) { [EOL]         if (tb == null) { [EOL]             tb = new TokenBuffer(null); [EOL]         } [EOL]         tb.writeFieldName(jp.getCurrentName()); [EOL]         tb.writeString(typeId); [EOL]     } [EOL]     if (tb != null) { [EOL]         jp = JsonParserSequence.createFlattened(tb.asParser(jp), jp); [EOL]     } [EOL]     jp.nextToken(); [EOL]     return deser.deserialize(jp, ctxt); [EOL] } <line_num>: 93,114
protected Object _deserializeTypedUsingDefaultImpl(JsonParser jp, DeserializationContext ctxt, TokenBuffer tb) throws IOException, JsonProcessingException { [EOL]     JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt); [EOL]     if (deser != null) { [EOL]         if (tb != null) { [EOL]             tb.writeEndObject(); [EOL]             jp = tb.asParser(jp); [EOL]             jp.nextToken(); [EOL]         } [EOL]         return deser.deserialize(jp, ctxt); [EOL]     } [EOL]     Object result = TypeDeserializer.deserializeIfNatural(jp, ctxt, _baseType); [EOL]     if (result != null) { [EOL]         return result; [EOL]     } [EOL]     if (jp.getCurrentToken() == JsonToken.START_ARRAY) { [EOL]         return super.deserializeTypedFromAny(jp, ctxt); [EOL]     } [EOL]     throw ctxt.wrongTokenException(jp, JsonToken.FIELD_NAME, "missing property '" + _typePropertyName + "' that is to contain type id  (for class " + baseTypeName() + ")"); [EOL] } <line_num>: 117,143
@Override [EOL] public Object deserializeTypedFromAny(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     if (jp.getCurrentToken() == JsonToken.START_ARRAY) { [EOL]         return super.deserializeTypedFromArray(jp, ctxt); [EOL]     } [EOL]     return deserializeTypedFromObject(jp, ctxt); [EOL] } <line_num>: 149,160
