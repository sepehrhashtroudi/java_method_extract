public AsWrapperTypeSerializer(TypeIdResolver idRes, BeanProperty property) { [EOL]     super(idRes, property); [EOL] } <line_num>: 24,27
@Override [EOL] public AsWrapperTypeSerializer forProperty(BeanProperty prop) { [EOL]     if (_property == prop) [EOL]         return this; [EOL]     return new AsWrapperTypeSerializer(this._idResolver, prop); [EOL] } <line_num>: 29,33
@Override [EOL] public As getTypeInclusion() { [EOL]     return As.WRAPPER_OBJECT; [EOL] } <line_num>: 35,36
@Override [EOL] public void writeTypePrefixForObject(Object value, JsonGenerator jgen) throws IOException, JsonProcessingException { [EOL]     jgen.writeStartObject(); [EOL]     jgen.writeObjectFieldStart(idFromValue(value)); [EOL] } <line_num>: 38,46
@Override [EOL] public void writeTypePrefixForObject(Object value, JsonGenerator jgen, Class<?> type) throws IOException, JsonProcessingException { [EOL]     jgen.writeStartObject(); [EOL]     jgen.writeObjectFieldStart(idFromValueAndType(value, type)); [EOL] } <line_num>: 48,57
@Override [EOL] public void writeTypePrefixForArray(Object value, JsonGenerator jgen) throws IOException, JsonProcessingException { [EOL]     jgen.writeStartObject(); [EOL]     jgen.writeArrayFieldStart(idFromValue(value)); [EOL] } <line_num>: 59,67
@Override [EOL] public void writeTypePrefixForArray(Object value, JsonGenerator jgen, Class<?> type) throws IOException, JsonProcessingException { [EOL]     jgen.writeStartObject(); [EOL]     jgen.writeArrayFieldStart(idFromValueAndType(value, type)); [EOL] } <line_num>: 69,78
@Override [EOL] public void writeTypePrefixForScalar(Object value, JsonGenerator jgen) throws IOException, JsonProcessingException { [EOL]     jgen.writeStartObject(); [EOL]     jgen.writeFieldName(idFromValue(value)); [EOL] } <line_num>: 80,87
@Override [EOL] public void writeTypePrefixForScalar(Object value, JsonGenerator jgen, Class<?> type) throws IOException, JsonProcessingException { [EOL]     jgen.writeStartObject(); [EOL]     jgen.writeFieldName(idFromValueAndType(value, type)); [EOL] } <line_num>: 89,97
@Override [EOL] public void writeTypeSuffixForObject(Object value, JsonGenerator jgen) throws IOException, JsonProcessingException { [EOL]     jgen.writeEndObject(); [EOL]     jgen.writeEndObject(); [EOL] } <line_num>: 99,107
@Override [EOL] public void writeTypeSuffixForArray(Object value, JsonGenerator jgen) throws IOException, JsonProcessingException { [EOL]     jgen.writeEndArray(); [EOL]     jgen.writeEndObject(); [EOL] } <line_num>: 109,117
@Override [EOL] public void writeTypeSuffixForScalar(Object value, JsonGenerator jgen) throws IOException, JsonProcessingException { [EOL]     jgen.writeEndObject(); [EOL] } <line_num>: 119,125
@Override [EOL] public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId) throws IOException, JsonProcessingException { [EOL]     jgen.writeStartObject(); [EOL]     jgen.writeObjectFieldStart(typeId); [EOL] } <line_num>: 133,139
@Override [EOL] public void writeCustomTypePrefixForArray(Object value, JsonGenerator jgen, String typeId) throws IOException, JsonProcessingException { [EOL]     jgen.writeStartObject(); [EOL]     jgen.writeArrayFieldStart(typeId); [EOL] } <line_num>: 141,147
@Override [EOL] public void writeCustomTypePrefixForScalar(Object value, JsonGenerator jgen, String typeId) throws IOException, JsonProcessingException { [EOL]     jgen.writeStartObject(); [EOL]     jgen.writeFieldName(typeId); [EOL] } <line_num>: 149,155
@Override [EOL] public void writeCustomTypeSuffixForObject(Object value, JsonGenerator jgen, String typeId) throws IOException, JsonProcessingException { [EOL]     writeTypeSuffixForObject(value, jgen); [EOL] } <line_num>: 157,161
@Override [EOL] public void writeCustomTypeSuffixForArray(Object value, JsonGenerator jgen, String typeId) throws IOException, JsonProcessingException { [EOL]     writeTypeSuffixForArray(value, jgen); [EOL] } <line_num>: 163,167
@Override [EOL] public void writeCustomTypeSuffixForScalar(Object value, JsonGenerator jgen, String typeId) throws IOException, JsonProcessingException { [EOL]     writeTypeSuffixForScalar(value, jgen); [EOL] } <line_num>: 169,173
