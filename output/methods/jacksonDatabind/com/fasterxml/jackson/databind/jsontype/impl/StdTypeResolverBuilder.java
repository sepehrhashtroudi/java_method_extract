public StdTypeResolverBuilder() { [EOL] } <line_num>: 51,51
public static StdTypeResolverBuilder noTypeInfoBuilder() { [EOL]     return new StdTypeResolverBuilder().init(JsonTypeInfo.Id.NONE, null); [EOL] } <line_num>: 53,55
@Override [EOL] public StdTypeResolverBuilder init(JsonTypeInfo.Id idType, TypeIdResolver idRes) { [EOL]     if (idType == null) { [EOL]         throw new IllegalArgumentException("idType can not be null"); [EOL]     } [EOL]     _idType = idType; [EOL]     _customIdResolver = idRes; [EOL]     _typeProperty = idType.getDefaultPropertyName(); [EOL]     return this; [EOL] } <line_num>: 57,69
@Override [EOL] public TypeSerializer buildTypeSerializer(SerializationConfig config, JavaType baseType, Collection<NamedType> subtypes) { [EOL]     if (_idType == JsonTypeInfo.Id.NONE) { [EOL]         return null; [EOL]     } [EOL]     TypeIdResolver idRes = idResolver(config, baseType, subtypes, true, false); [EOL]     switch(_includeAs) { [EOL]         case WRAPPER_ARRAY: [EOL]             return new AsArrayTypeSerializer(idRes, null); [EOL]         case PROPERTY: [EOL]             return new AsPropertyTypeSerializer(idRes, null, _typeProperty); [EOL]         case WRAPPER_OBJECT: [EOL]             return new AsWrapperTypeSerializer(idRes, null); [EOL]         case EXTERNAL_PROPERTY: [EOL]             return new AsExternalTypeSerializer(idRes, null, _typeProperty); [EOL]     } [EOL]     throw new IllegalStateException("Do not know how to construct standard type serializer for inclusion type: " + _includeAs); [EOL] } <line_num>: 71,92
@Override [EOL] public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection<NamedType> subtypes) { [EOL]     if (_idType == JsonTypeInfo.Id.NONE) { [EOL]         return null; [EOL]     } [EOL]     TypeIdResolver idRes = idResolver(config, baseType, subtypes, false, true); [EOL]     switch(_includeAs) { [EOL]         case WRAPPER_ARRAY: [EOL]             return new AsArrayTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl); [EOL]         case PROPERTY: [EOL]             return new AsPropertyTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl); [EOL]         case WRAPPER_OBJECT: [EOL]             return new AsWrapperTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl); [EOL]         case EXTERNAL_PROPERTY: [EOL]             return new AsExternalTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl); [EOL]     } [EOL]     throw new IllegalStateException("Do not know how to construct standard type serializer for inclusion type: " + _includeAs); [EOL] } <line_num>: 94,120
@Override [EOL] public StdTypeResolverBuilder inclusion(JsonTypeInfo.As includeAs) { [EOL]     if (includeAs == null) { [EOL]         throw new IllegalArgumentException("includeAs can not be null"); [EOL]     } [EOL]     _includeAs = includeAs; [EOL]     return this; [EOL] } <line_num>: 128,135
@Override [EOL] public StdTypeResolverBuilder typeProperty(String typeIdPropName) { [EOL]     if (typeIdPropName == null || typeIdPropName.length() == 0) { [EOL]         typeIdPropName = _idType.getDefaultPropertyName(); [EOL]     } [EOL]     _typeProperty = typeIdPropName; [EOL]     return this; [EOL] } <line_num>: 141,150
@Override [EOL] public StdTypeResolverBuilder defaultImpl(Class<?> defaultImpl) { [EOL]     _defaultImpl = defaultImpl; [EOL]     return this; [EOL] } <line_num>: 152,157
@Override [EOL] public StdTypeResolverBuilder typeIdVisibility(boolean isVisible) { [EOL]     _typeIdVisible = isVisible; [EOL]     return this; [EOL] } <line_num>: 159,163
public String getTypeProperty() { [EOL]     return _typeProperty; [EOL] } <line_num>: 171,171
@Override [EOL] public Class<?> getDefaultImpl() { [EOL]     return _defaultImpl; [EOL] } <line_num>: 173,176
public boolean isTypeIdVisible() { [EOL]     return _typeIdVisible; [EOL] } <line_num>: 178,178
protected TypeIdResolver idResolver(MapperConfig<?> config, JavaType baseType, Collection<NamedType> subtypes, boolean forSer, boolean forDeser) { [EOL]     if (_customIdResolver != null) { [EOL]         return _customIdResolver; [EOL]     } [EOL]     if (_idType == null) { [EOL]         throw new IllegalStateException("Can not build, 'init()' not yet called"); [EOL]     } [EOL]     switch(_idType) { [EOL]         case CLASS: [EOL]             return new ClassNameIdResolver(baseType, config.getTypeFactory()); [EOL]         case MINIMAL_CLASS: [EOL]             return new MinimalClassNameIdResolver(baseType, config.getTypeFactory()); [EOL]         case NAME: [EOL]             return TypeNameIdResolver.construct(config, baseType, subtypes, forSer, forDeser); [EOL]         case NONE: [EOL]             return null; [EOL]         case CUSTOM: [EOL]     } [EOL]     throw new IllegalStateException("Do not know how to construct standard type id resolver for idType: " + _idType); [EOL] } <line_num>: 191,214
