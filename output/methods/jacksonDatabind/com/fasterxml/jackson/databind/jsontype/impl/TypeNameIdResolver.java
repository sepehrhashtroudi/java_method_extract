protected TypeNameIdResolver(MapperConfig<?> config, JavaType baseType, HashMap<String, String> typeToId, HashMap<String, JavaType> idToType) { [EOL]     super(baseType, config.getTypeFactory()); [EOL]     _config = config; [EOL]     _typeToId = typeToId; [EOL]     _idToType = idToType; [EOL] } <line_num>: 27,34
public static TypeNameIdResolver construct(MapperConfig<?> config, JavaType baseType, Collection<NamedType> subtypes, boolean forSer, boolean forDeser) { [EOL]     if (forSer == forDeser) [EOL]         throw new IllegalArgumentException(); [EOL]     HashMap<String, String> typeToId = null; [EOL]     HashMap<String, JavaType> idToType = null; [EOL]     if (forSer) { [EOL]         typeToId = new HashMap<String, String>(); [EOL]     } [EOL]     if (forDeser) { [EOL]         idToType = new HashMap<String, JavaType>(); [EOL]     } [EOL]     if (subtypes != null) { [EOL]         for (NamedType t : subtypes) { [EOL]             Class<?> cls = t.getType(); [EOL]             String id = t.hasName() ? t.getName() : _defaultTypeId(cls); [EOL]             if (forSer) { [EOL]                 typeToId.put(cls.getName(), id); [EOL]             } [EOL]             if (forDeser) { [EOL]                 JavaType prev = idToType.get(id); [EOL]                 if (prev != null) { [EOL]                     if (cls.isAssignableFrom(prev.getRawClass())) { [EOL]                         continue; [EOL]                     } [EOL]                 } [EOL]                 idToType.put(id, config.constructType(cls)); [EOL]             } [EOL]         } [EOL]     } [EOL]     return new TypeNameIdResolver(config, baseType, typeToId, idToType); [EOL] } <line_num>: 36,77
@Override [EOL] public JsonTypeInfo.Id getMechanism() { [EOL]     return JsonTypeInfo.Id.NAME; [EOL] } <line_num>: 79,80
@Override [EOL] public String idFromValue(Object value) { [EOL]     Class<?> cls = value.getClass(); [EOL]     final String key = cls.getName(); [EOL]     String name; [EOL]     synchronized (_typeToId) { [EOL]         name = _typeToId.get(key); [EOL]         if (name == null) { [EOL]             if (_config.isAnnotationProcessingEnabled()) { [EOL]                 BeanDescription beanDesc = _config.introspectClassAnnotations(cls); [EOL]                 name = _config.getAnnotationIntrospector().findTypeName(beanDesc.getClassInfo()); [EOL]             } [EOL]             if (name == null) { [EOL]                 name = _defaultTypeId(cls); [EOL]             } [EOL]             _typeToId.put(key, name); [EOL]         } [EOL]     } [EOL]     return name; [EOL] } <line_num>: 82,105
@Override [EOL] public String idFromValueAndType(Object value, Class<?> type) { [EOL]     if (value == null) { [EOL]         return null; [EOL]     } [EOL]     return idFromValue(value); [EOL] } <line_num>: 107,117
@Override [EOL] public JavaType typeFromId(String id) throws IllegalArgumentException { [EOL]     JavaType t = _idToType.get(id); [EOL]     return t; [EOL] } <line_num>: 119,130
@Override [EOL] public String toString() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('[').append(getClass().getName()); [EOL]     sb.append("; id-to-type=").append(_idToType); [EOL]     sb.append(']'); [EOL]     return sb.toString(); [EOL] } <line_num>: 132,140
protected static String _defaultTypeId(Class<?> cls) { [EOL]     String n = cls.getName(); [EOL]     int ix = n.lastIndexOf('.'); [EOL]     return (ix < 0) ? n : n.substring(ix + 1); [EOL] } <line_num>: 152,157
