public DefaultTypeResolverBuilder(DefaultTyping t) { [EOL]     _appliesFor = t; [EOL] } <line_num>: 128,130
public ObjectMapper() { [EOL]     this(null, null, null); [EOL] } <line_num>: 362,365
public ObjectMapper(JsonFactory jf) { [EOL]     this(jf, null, null); [EOL] } <line_num>: 372,375
protected ObjectMapper(ObjectMapper src) { [EOL]     _jsonFactory = src._jsonFactory.copy(); [EOL]     _jsonFactory.setCodec(this); [EOL]     _subtypeResolver = src._subtypeResolver; [EOL]     _rootNames = new RootNameLookup(); [EOL]     _typeFactory = src._typeFactory; [EOL]     _serializationConfig = src._serializationConfig; [EOL]     HashMap<ClassKey, Class<?>> mixins = new HashMap<ClassKey, Class<?>>(src._mixInAnnotations); [EOL]     _serializationConfig = new SerializationConfig(src._serializationConfig, mixins); [EOL]     _deserializationConfig = new DeserializationConfig(src._deserializationConfig, mixins); [EOL]     _serializerProvider = src._serializerProvider; [EOL]     _deserializationContext = src._deserializationContext; [EOL]     _serializerFactory = src._serializerFactory; [EOL] } <line_num>: 382,398
public ObjectMapper(JsonFactory jf, DefaultSerializerProvider sp, DefaultDeserializationContext dc) { [EOL]     if (jf == null) { [EOL]         _jsonFactory = new MappingJsonFactory(this); [EOL]     } else { [EOL]         _jsonFactory = jf; [EOL]         if (jf.getCodec() == null) { [EOL]             _jsonFactory.setCodec(this); [EOL]         } [EOL]     } [EOL]     _subtypeResolver = new StdSubtypeResolver(); [EOL]     _rootNames = new RootNameLookup(); [EOL]     _typeFactory = TypeFactory.defaultInstance(); [EOL]     _serializationConfig = new SerializationConfig(DEFAULT_BASE, _subtypeResolver, _mixInAnnotations); [EOL]     _deserializationConfig = new DeserializationConfig(DEFAULT_BASE, _subtypeResolver, _mixInAnnotations); [EOL]     _serializerProvider = (sp == null) ? new DefaultSerializerProvider.Impl() : sp; [EOL]     _deserializationContext = (dc == null) ? new DefaultDeserializationContext.Impl(BeanDeserializerFactory.instance) : dc; [EOL]     _serializerFactory = BeanSerializerFactory.instance; [EOL] } <line_num>: 412,443
@Override [EOL] public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection<NamedType> subtypes) { [EOL]     return useForType(baseType) ? super.buildTypeDeserializer(config, baseType, subtypes) : null; [EOL] } <line_num>: 132,137
@Override [EOL] public TypeSerializer buildTypeSerializer(SerializationConfig config, JavaType baseType, Collection<NamedType> subtypes) { [EOL]     return useForType(baseType) ? super.buildTypeSerializer(config, baseType, subtypes) : null; [EOL] } <line_num>: 139,144
public boolean useForType(JavaType t) { [EOL]     switch(_appliesFor) { [EOL]         case NON_CONCRETE_AND_ARRAYS: [EOL]             while (t.isArrayType()) { [EOL]                 t = t.getContentType(); [EOL]             } [EOL]         case OBJECT_AND_NON_CONCRETE: [EOL]             return (t.getRawClass() == Object.class) || !t.isConcrete(); [EOL]         case NON_FINAL: [EOL]             while (t.isArrayType()) { [EOL]                 t = t.getContentType(); [EOL]             } [EOL]             return !t.isFinal(); [EOL]         default: [EOL]             return (t.getRawClass() == Object.class); [EOL]     } [EOL] } <line_num>: 154,173
public ObjectMapper copy() { [EOL]     _checkInvalidCopy(ObjectMapper.class); [EOL]     return new ObjectMapper(this); [EOL] } <line_num>: 460,464
protected void _checkInvalidCopy(Class<?> exp) { [EOL]     if (getClass() != exp) { [EOL]         throw new IllegalStateException("Failed copy(): " + getClass().getName() + " (version: " + version() + ") does not override copy(); it has to"); [EOL]     } [EOL] } <line_num>: 470,476
@Override [EOL] public Version version() { [EOL]     return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION; [EOL] } <line_num>: 488,491
@Override [EOL] public Version getMapperVersion() { [EOL]     return version(); [EOL] } <line_num>: 528,531
@SuppressWarnings("unchecked") [EOL] @Override [EOL] public <C extends ObjectCodec> C getOwner() { [EOL]     return (C) mapper; [EOL] } <line_num>: 533,538
@Override [EOL] public TypeFactory getTypeFactory() { [EOL]     return _typeFactory; [EOL] } <line_num>: 540,543
@Override [EOL] public boolean isEnabled(MapperFeature f) { [EOL]     return mapper.isEnabled(f); [EOL] } <line_num>: 545,548
@Override [EOL] public boolean isEnabled(DeserializationFeature f) { [EOL]     return mapper.isEnabled(f); [EOL] } <line_num>: 550,553
@Override [EOL] public boolean isEnabled(SerializationFeature f) { [EOL]     return mapper.isEnabled(f); [EOL] } <line_num>: 555,558
@Override [EOL] public boolean isEnabled(JsonFactory.Feature f) { [EOL]     return mapper.isEnabled(f); [EOL] } <line_num>: 560,563
@Override [EOL] public boolean isEnabled(JsonParser.Feature f) { [EOL]     return mapper.isEnabled(f); [EOL] } <line_num>: 565,568
@Override [EOL] public boolean isEnabled(JsonGenerator.Feature f) { [EOL]     return mapper.isEnabled(f); [EOL] } <line_num>: 570,573
@Override [EOL] public void addDeserializers(Deserializers d) { [EOL]     DeserializerFactory df = mapper._deserializationContext._factory.withAdditionalDeserializers(d); [EOL]     mapper._deserializationContext = mapper._deserializationContext.with(df); [EOL] } <line_num>: 577,581
@Override [EOL] public void addKeyDeserializers(KeyDeserializers d) { [EOL]     DeserializerFactory df = mapper._deserializationContext._factory.withAdditionalKeyDeserializers(d); [EOL]     mapper._deserializationContext = mapper._deserializationContext.with(df); [EOL] } <line_num>: 583,587
@Override [EOL] public void addBeanDeserializerModifier(BeanDeserializerModifier modifier) { [EOL]     DeserializerFactory df = mapper._deserializationContext._factory.withDeserializerModifier(modifier); [EOL]     mapper._deserializationContext = mapper._deserializationContext.with(df); [EOL] } <line_num>: 589,593
@Override [EOL] public void addSerializers(Serializers s) { [EOL]     mapper._serializerFactory = mapper._serializerFactory.withAdditionalSerializers(s); [EOL] } <line_num>: 597,600
@Override [EOL] public void addKeySerializers(Serializers s) { [EOL]     mapper._serializerFactory = mapper._serializerFactory.withAdditionalKeySerializers(s); [EOL] } <line_num>: 602,605
@Override [EOL] public void addBeanSerializerModifier(BeanSerializerModifier modifier) { [EOL]     mapper._serializerFactory = mapper._serializerFactory.withSerializerModifier(modifier); [EOL] } <line_num>: 607,610
@Override [EOL] public void addAbstractTypeResolver(AbstractTypeResolver resolver) { [EOL]     DeserializerFactory df = mapper._deserializationContext._factory.withAbstractTypeResolver(resolver); [EOL]     mapper._deserializationContext = mapper._deserializationContext.with(df); [EOL] } <line_num>: 614,618
@Override [EOL] public void addTypeModifier(TypeModifier modifier) { [EOL]     TypeFactory f = mapper._typeFactory; [EOL]     f = f.withModifier(modifier); [EOL]     mapper.setTypeFactory(f); [EOL] } <line_num>: 620,625
@Override [EOL] public void addValueInstantiators(ValueInstantiators instantiators) { [EOL]     DeserializerFactory df = mapper._deserializationContext._factory.withValueInstantiators(instantiators); [EOL]     mapper._deserializationContext = mapper._deserializationContext.with(df); [EOL] } <line_num>: 627,631
@Override [EOL] public void setClassIntrospector(ClassIntrospector ci) { [EOL]     mapper._deserializationConfig = mapper._deserializationConfig.with(ci); [EOL]     mapper._serializationConfig = mapper._serializationConfig.with(ci); [EOL] } <line_num>: 633,637
@Override [EOL] public void insertAnnotationIntrospector(AnnotationIntrospector ai) { [EOL]     mapper._deserializationConfig = mapper._deserializationConfig.withInsertedAnnotationIntrospector(ai); [EOL]     mapper._serializationConfig = mapper._serializationConfig.withInsertedAnnotationIntrospector(ai); [EOL] } <line_num>: 639,643
@Override [EOL] public void appendAnnotationIntrospector(AnnotationIntrospector ai) { [EOL]     mapper._deserializationConfig = mapper._deserializationConfig.withAppendedAnnotationIntrospector(ai); [EOL]     mapper._serializationConfig = mapper._serializationConfig.withAppendedAnnotationIntrospector(ai); [EOL] } <line_num>: 645,649
@Override [EOL] public void registerSubtypes(Class<?>... subtypes) { [EOL]     mapper.registerSubtypes(subtypes); [EOL] } <line_num>: 651,654
@Override [EOL] public void registerSubtypes(NamedType... subtypes) { [EOL]     mapper.registerSubtypes(subtypes); [EOL] } <line_num>: 656,659
@Override [EOL] public void setMixInAnnotations(Class<?> target, Class<?> mixinSource) { [EOL]     mapper.addMixInAnnotations(target, mixinSource); [EOL] } <line_num>: 661,664
@Override [EOL] public void addDeserializationProblemHandler(DeserializationProblemHandler handler) { [EOL]     mapper.addHandler(handler); [EOL] } <line_num>: 666,669
public ObjectMapper registerModule(Module module) { [EOL]     String name = module.getModuleName(); [EOL]     if (name == null) { [EOL]         throw new IllegalArgumentException("Module without defined name"); [EOL]     } [EOL]     Version version = module.version(); [EOL]     if (version == null) { [EOL]         throw new IllegalArgumentException("Module without defined version"); [EOL]     } [EOL]     final ObjectMapper mapper = this; [EOL]     module.setupModule(new Module.SetupContext() { [EOL]  [EOL]         @Override [EOL]         public Version getMapperVersion() { [EOL]             return version(); [EOL]         } [EOL]  [EOL]         @SuppressWarnings("unchecked") [EOL]         @Override [EOL]         public <C extends ObjectCodec> C getOwner() { [EOL]             return (C) mapper; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public TypeFactory getTypeFactory() { [EOL]             return _typeFactory; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public boolean isEnabled(MapperFeature f) { [EOL]             return mapper.isEnabled(f); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public boolean isEnabled(DeserializationFeature f) { [EOL]             return mapper.isEnabled(f); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public boolean isEnabled(SerializationFeature f) { [EOL]             return mapper.isEnabled(f); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public boolean isEnabled(JsonFactory.Feature f) { [EOL]             return mapper.isEnabled(f); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public boolean isEnabled(JsonParser.Feature f) { [EOL]             return mapper.isEnabled(f); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public boolean isEnabled(JsonGenerator.Feature f) { [EOL]             return mapper.isEnabled(f); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public void addDeserializers(Deserializers d) { [EOL]             DeserializerFactory df = mapper._deserializationContext._factory.withAdditionalDeserializers(d); [EOL]             mapper._deserializationContext = mapper._deserializationContext.with(df); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public void addKeyDeserializers(KeyDeserializers d) { [EOL]             DeserializerFactory df = mapper._deserializationContext._factory.withAdditionalKeyDeserializers(d); [EOL]             mapper._deserializationContext = mapper._deserializationContext.with(df); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public void addBeanDeserializerModifier(BeanDeserializerModifier modifier) { [EOL]             DeserializerFactory df = mapper._deserializationContext._factory.withDeserializerModifier(modifier); [EOL]             mapper._deserializationContext = mapper._deserializationContext.with(df); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public void addSerializers(Serializers s) { [EOL]             mapper._serializerFactory = mapper._serializerFactory.withAdditionalSerializers(s); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public void addKeySerializers(Serializers s) { [EOL]             mapper._serializerFactory = mapper._serializerFactory.withAdditionalKeySerializers(s); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public void addBeanSerializerModifier(BeanSerializerModifier modifier) { [EOL]             mapper._serializerFactory = mapper._serializerFactory.withSerializerModifier(modifier); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public void addAbstractTypeResolver(AbstractTypeResolver resolver) { [EOL]             DeserializerFactory df = mapper._deserializationContext._factory.withAbstractTypeResolver(resolver); [EOL]             mapper._deserializationContext = mapper._deserializationContext.with(df); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public void addTypeModifier(TypeModifier modifier) { [EOL]             TypeFactory f = mapper._typeFactory; [EOL]             f = f.withModifier(modifier); [EOL]             mapper.setTypeFactory(f); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public void addValueInstantiators(ValueInstantiators instantiators) { [EOL]             DeserializerFactory df = mapper._deserializationContext._factory.withValueInstantiators(instantiators); [EOL]             mapper._deserializationContext = mapper._deserializationContext.with(df); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public void setClassIntrospector(ClassIntrospector ci) { [EOL]             mapper._deserializationConfig = mapper._deserializationConfig.with(ci); [EOL]             mapper._serializationConfig = mapper._serializationConfig.with(ci); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public void insertAnnotationIntrospector(AnnotationIntrospector ai) { [EOL]             mapper._deserializationConfig = mapper._deserializationConfig.withInsertedAnnotationIntrospector(ai); [EOL]             mapper._serializationConfig = mapper._serializationConfig.withInsertedAnnotationIntrospector(ai); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public void appendAnnotationIntrospector(AnnotationIntrospector ai) { [EOL]             mapper._deserializationConfig = mapper._deserializationConfig.withAppendedAnnotationIntrospector(ai); [EOL]             mapper._serializationConfig = mapper._serializationConfig.withAppendedAnnotationIntrospector(ai); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public void registerSubtypes(Class<?>... subtypes) { [EOL]             mapper.registerSubtypes(subtypes); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public void registerSubtypes(NamedType... subtypes) { [EOL]             mapper.registerSubtypes(subtypes); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public void setMixInAnnotations(Class<?> target, Class<?> mixinSource) { [EOL]             mapper.addMixInAnnotations(target, mixinSource); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public void addDeserializationProblemHandler(DeserializationProblemHandler handler) { [EOL]             mapper.addHandler(handler); [EOL]         } [EOL]     }); [EOL]     return this; [EOL] } <line_num>: 506,672
public ObjectMapper registerModules(Module... modules) { [EOL]     for (Module module : modules) { [EOL]         registerModule(module); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 685,691
public ObjectMapper registerModules(Iterable<Module> modules) { [EOL]     for (Module module : modules) { [EOL]         registerModule(module); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 704,710
public static List<Module> findModules() { [EOL]     return findModules(null); [EOL] } <line_num>: 721,723
public static List<Module> findModules(ClassLoader classLoader) { [EOL]     ArrayList<Module> modules = new ArrayList<Module>(); [EOL]     ServiceLoader<Module> loader = (classLoader == null) ? ServiceLoader.load(Module.class) : ServiceLoader.load(Module.class, classLoader); [EOL]     for (Module module : loader) { [EOL]         modules.add(module); [EOL]     } [EOL]     return modules; [EOL] } <line_num>: 734,743
public ObjectMapper findAndRegisterModules() { [EOL]     return registerModules(findModules()); [EOL] } <line_num>: 757,759
public SerializationConfig getSerializationConfig() { [EOL]     return _serializationConfig; [EOL] } <line_num>: 775,777
public DeserializationConfig getDeserializationConfig() { [EOL]     return _deserializationConfig; [EOL] } <line_num>: 788,790
public DeserializationContext getDeserializationContext() { [EOL]     return _deserializationContext; [EOL] } <line_num>: 799,801
public ObjectMapper setSerializerFactory(SerializerFactory f) { [EOL]     _serializerFactory = f; [EOL]     return this; [EOL] } <line_num>: 813,816
public SerializerFactory getSerializerFactory() { [EOL]     return _serializerFactory; [EOL] } <line_num>: 825,827
public ObjectMapper setSerializerProvider(DefaultSerializerProvider p) { [EOL]     _serializerProvider = p; [EOL]     return this; [EOL] } <line_num>: 833,836
public SerializerProvider getSerializerProvider() { [EOL]     return _serializerProvider; [EOL] } <line_num>: 838,840
public final void setMixInAnnotations(Map<Class<?>, Class<?>> sourceMixins) { [EOL]     _mixInAnnotations.clear(); [EOL]     if (sourceMixins != null && sourceMixins.size() > 0) { [EOL]         for (Map.Entry<Class<?>, Class<?>> en : sourceMixins.entrySet()) { [EOL]             _mixInAnnotations.put(new ClassKey(en.getKey()), en.getValue()); [EOL]         } [EOL]     } [EOL] } <line_num>: 860,868
public final void addMixInAnnotations(Class<?> target, Class<?> mixinSource) { [EOL]     _mixInAnnotations.put(new ClassKey(target), mixinSource); [EOL] } <line_num>: 880,883
public final Class<?> findMixInClassFor(Class<?> cls) { [EOL]     return (_mixInAnnotations == null) ? null : _mixInAnnotations.get(new ClassKey(cls)); [EOL] } <line_num>: 885,887
public final int mixInCount() { [EOL]     return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size(); [EOL] } <line_num>: 889,891
public VisibilityChecker<?> getVisibilityChecker() { [EOL]     return _serializationConfig.getDefaultVisibilityChecker(); [EOL] } <line_num>: 904,906
public void setVisibilityChecker(VisibilityChecker<?> vc) { [EOL]     _deserializationConfig = _deserializationConfig.with(vc); [EOL]     _serializationConfig = _serializationConfig.with(vc); [EOL] } <line_num>: 915,918
public ObjectMapper setVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility) { [EOL]     _deserializationConfig = _deserializationConfig.withVisibility(forMethod, visibility); [EOL]     _serializationConfig = _serializationConfig.withVisibility(forMethod, visibility); [EOL]     return this; [EOL] } <line_num>: 944,949
public SubtypeResolver getSubtypeResolver() { [EOL]     return _subtypeResolver; [EOL] } <line_num>: 954,956
public ObjectMapper setSubtypeResolver(SubtypeResolver str) { [EOL]     _subtypeResolver = str; [EOL]     _deserializationConfig = _deserializationConfig.with(str); [EOL]     _serializationConfig = _serializationConfig.with(str); [EOL]     return this; [EOL] } <line_num>: 961,966
public ObjectMapper setAnnotationIntrospector(AnnotationIntrospector ai) { [EOL]     _serializationConfig = _serializationConfig.with(ai); [EOL]     _deserializationConfig = _deserializationConfig.with(ai); [EOL]     return this; [EOL] } <line_num>: 972,976
public ObjectMapper setAnnotationIntrospectors(AnnotationIntrospector serializerAI, AnnotationIntrospector deserializerAI) { [EOL]     _serializationConfig = _serializationConfig.with(serializerAI); [EOL]     _deserializationConfig = _deserializationConfig.with(deserializerAI); [EOL]     return this; [EOL] } <line_num>: 991,996
public ObjectMapper setPropertyNamingStrategy(PropertyNamingStrategy s) { [EOL]     _serializationConfig = _serializationConfig.with(s); [EOL]     _deserializationConfig = _deserializationConfig.with(s); [EOL]     return this; [EOL] } <line_num>: 1001,1005
public ObjectMapper setSerializationInclusion(JsonInclude.Include incl) { [EOL]     _serializationConfig = _serializationConfig.withSerializationInclusion(incl); [EOL]     return this; [EOL] } <line_num>: 1010,1013
public ObjectMapper enableDefaultTyping() { [EOL]     return enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE); [EOL] } <line_num>: 1027,1029
public ObjectMapper enableDefaultTyping(DefaultTyping dti) { [EOL]     return enableDefaultTyping(dti, JsonTypeInfo.As.WRAPPER_ARRAY); [EOL] } <line_num>: 1037,1039
public ObjectMapper enableDefaultTyping(DefaultTyping applicability, JsonTypeInfo.As includeAs) { [EOL]     TypeResolverBuilder<?> typer = new DefaultTypeResolverBuilder(applicability); [EOL]     typer = typer.init(JsonTypeInfo.Id.CLASS, null); [EOL]     typer = typer.inclusion(includeAs); [EOL]     return setDefaultTyping(typer); [EOL] } <line_num>: 1049,1056
public ObjectMapper enableDefaultTypingAsProperty(DefaultTyping applicability, String propertyName) { [EOL]     TypeResolverBuilder<?> typer = new DefaultTypeResolverBuilder(applicability); [EOL]     typer = typer.init(JsonTypeInfo.Id.CLASS, null); [EOL]     typer = typer.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     typer = typer.typeProperty(propertyName); [EOL]     return setDefaultTyping(typer); [EOL] } <line_num>: 1066,1074
public ObjectMapper disableDefaultTyping() { [EOL]     return setDefaultTyping(null); [EOL] } <line_num>: 1082,1084
public ObjectMapper setDefaultTyping(TypeResolverBuilder<?> typer) { [EOL]     _deserializationConfig = _deserializationConfig.with(typer); [EOL]     _serializationConfig = _serializationConfig.with(typer); [EOL]     return this; [EOL] } <line_num>: 1093,1097
public void registerSubtypes(Class<?>... classes) { [EOL]     getSubtypeResolver().registerSubtypes(classes); [EOL] } <line_num>: 1106,1108
public void registerSubtypes(NamedType... types) { [EOL]     getSubtypeResolver().registerSubtypes(types); [EOL] } <line_num>: 1118,1120
public TypeFactory getTypeFactory() { [EOL]     return _typeFactory; [EOL] } <line_num>: 1131,1133
public ObjectMapper setTypeFactory(TypeFactory f) { [EOL]     _typeFactory = f; [EOL]     _deserializationConfig = _deserializationConfig.with(f); [EOL]     _serializationConfig = _serializationConfig.with(f); [EOL]     return this; [EOL] } <line_num>: 1142,1148
public JavaType constructType(Type t) { [EOL]     return _typeFactory.constructType(t); [EOL] } <line_num>: 1155,1157
public ObjectMapper setNodeFactory(JsonNodeFactory f) { [EOL]     _deserializationConfig = _deserializationConfig.with(f); [EOL]     return this; [EOL] } <line_num>: 1170,1173
public ObjectMapper addHandler(DeserializationProblemHandler h) { [EOL]     _deserializationConfig = _deserializationConfig.withHandler(h); [EOL]     return this; [EOL] } <line_num>: 1179,1182
public ObjectMapper clearProblemHandlers() { [EOL]     _deserializationConfig = _deserializationConfig.withNoProblemHandlers(); [EOL]     return this; [EOL] } <line_num>: 1188,1191
public void setFilters(FilterProvider filterProvider) { [EOL]     _serializationConfig = _serializationConfig.withFilters(filterProvider); [EOL] } <line_num>: 1211,1213
public ObjectMapper setBase64Variant(Base64Variant v) { [EOL]     _serializationConfig = _serializationConfig.with(v); [EOL]     _deserializationConfig = _deserializationConfig.with(v); [EOL]     return this; [EOL] } <line_num>: 1225,1229
@Override [EOL] public JsonFactory getFactory() { [EOL]     return _jsonFactory; [EOL] } <line_num>: 1245,1246
@Deprecated [EOL] @Override [EOL] public JsonFactory getJsonFactory() { [EOL]     return _jsonFactory; [EOL] } <line_num>: 1251,1253
public ObjectMapper setDateFormat(DateFormat dateFormat) { [EOL]     _deserializationConfig = _deserializationConfig.with(dateFormat); [EOL]     _serializationConfig = _serializationConfig.with(dateFormat); [EOL]     return this; [EOL] } <line_num>: 1265,1270
public Object setHandlerInstantiator(HandlerInstantiator hi) { [EOL]     _deserializationConfig = _deserializationConfig.with(hi); [EOL]     _serializationConfig = _serializationConfig.with(hi); [EOL]     return this; [EOL] } <line_num>: 1279,1284
public ObjectMapper setInjectableValues(InjectableValues injectableValues) { [EOL]     _injectableValues = injectableValues; [EOL]     return this; [EOL] } <line_num>: 1290,1293
public ObjectMapper setLocale(Locale l) { [EOL]     _deserializationConfig = _deserializationConfig.with(l); [EOL]     _serializationConfig = _serializationConfig.with(l); [EOL]     return this; [EOL] } <line_num>: 1299,1303
public ObjectMapper setTimeZone(TimeZone tz) { [EOL]     _deserializationConfig = _deserializationConfig.with(tz); [EOL]     _serializationConfig = _serializationConfig.with(tz); [EOL]     return this; [EOL] } <line_num>: 1309,1313
public ObjectMapper configure(MapperFeature f, boolean state) { [EOL]     _serializationConfig = state ? _serializationConfig.with(f) : _serializationConfig.without(f); [EOL]     _deserializationConfig = state ? _deserializationConfig.with(f) : _deserializationConfig.without(f); [EOL]     return this; [EOL] } <line_num>: 1325,1331
public ObjectMapper configure(SerializationFeature f, boolean state) { [EOL]     _serializationConfig = state ? _serializationConfig.with(f) : _serializationConfig.without(f); [EOL]     return this; [EOL] } <line_num>: 1337,1341
public ObjectMapper configure(DeserializationFeature f, boolean state) { [EOL]     _deserializationConfig = state ? _deserializationConfig.with(f) : _deserializationConfig.without(f); [EOL]     return this; [EOL] } <line_num>: 1347,1351
public ObjectMapper configure(JsonParser.Feature f, boolean state) { [EOL]     _jsonFactory.configure(f, state); [EOL]     return this; [EOL] } <line_num>: 1362,1365
public ObjectMapper configure(JsonGenerator.Feature f, boolean state) { [EOL]     _jsonFactory.configure(f, state); [EOL]     return this; [EOL] } <line_num>: 1376,1379
public ObjectMapper enable(MapperFeature... f) { [EOL]     _deserializationConfig = _deserializationConfig.with(f); [EOL]     _serializationConfig = _serializationConfig.with(f); [EOL]     return this; [EOL] } <line_num>: 1385,1389
public ObjectMapper disable(MapperFeature... f) { [EOL]     _deserializationConfig = _deserializationConfig.without(f); [EOL]     _serializationConfig = _serializationConfig.without(f); [EOL]     return this; [EOL] } <line_num>: 1395,1399
public ObjectMapper enable(DeserializationFeature feature) { [EOL]     _deserializationConfig = _deserializationConfig.with(feature); [EOL]     return this; [EOL] } <line_num>: 1405,1408
public ObjectMapper enable(DeserializationFeature first, DeserializationFeature... f) { [EOL]     _deserializationConfig = _deserializationConfig.with(first, f); [EOL]     return this; [EOL] } <line_num>: 1414,1418
public ObjectMapper disable(DeserializationFeature feature) { [EOL]     _deserializationConfig = _deserializationConfig.without(feature); [EOL]     return this; [EOL] } <line_num>: 1424,1427
public ObjectMapper disable(DeserializationFeature first, DeserializationFeature... f) { [EOL]     _deserializationConfig = _deserializationConfig.without(first, f); [EOL]     return this; [EOL] } <line_num>: 1433,1437
public ObjectMapper enable(SerializationFeature f) { [EOL]     _serializationConfig = _serializationConfig.with(f); [EOL]     return this; [EOL] } <line_num>: 1443,1446
public ObjectMapper enable(SerializationFeature first, SerializationFeature... f) { [EOL]     _serializationConfig = _serializationConfig.with(first, f); [EOL]     return this; [EOL] } <line_num>: 1452,1456
public ObjectMapper disable(SerializationFeature f) { [EOL]     _serializationConfig = _serializationConfig.without(f); [EOL]     return this; [EOL] } <line_num>: 1462,1465
public ObjectMapper disable(SerializationFeature first, SerializationFeature... f) { [EOL]     _serializationConfig = _serializationConfig.without(first, f); [EOL]     return this; [EOL] } <line_num>: 1471,1475
public boolean isEnabled(MapperFeature f) { [EOL]     return _serializationConfig.isEnabled(f); [EOL] } <line_num>: 1481,1484
public boolean isEnabled(SerializationFeature f) { [EOL]     return _serializationConfig.isEnabled(f); [EOL] } <line_num>: 1490,1492
public boolean isEnabled(DeserializationFeature f) { [EOL]     return _deserializationConfig.isEnabled(f); [EOL] } <line_num>: 1498,1500
public boolean isEnabled(JsonFactory.Feature f) { [EOL]     return _jsonFactory.isEnabled(f); [EOL] } <line_num>: 1508,1510
public boolean isEnabled(JsonParser.Feature f) { [EOL]     return _jsonFactory.isEnabled(f); [EOL] } <line_num>: 1518,1520
public boolean isEnabled(JsonGenerator.Feature f) { [EOL]     return _jsonFactory.isEnabled(f); [EOL] } <line_num>: 1528,1530
public JsonNodeFactory getNodeFactory() { [EOL]     return _deserializationConfig.getNodeFactory(); [EOL] } <line_num>: 1542,1544
@Override [EOL] @SuppressWarnings("unchecked") [EOL] public <T> T readValue(JsonParser jp, Class<T> valueType) throws IOException, JsonParseException, JsonMappingException { [EOL]     return (T) _readValue(getDeserializationConfig(), jp, _typeFactory.constructType(valueType)); [EOL] } <line_num>: 1564,1570
@Override [EOL] @SuppressWarnings("unchecked") [EOL] public <T> T readValue(JsonParser jp, TypeReference<?> valueTypeRef) throws IOException, JsonParseException, JsonMappingException { [EOL]     return (T) _readValue(getDeserializationConfig(), jp, _typeFactory.constructType(valueTypeRef)); [EOL] } <line_num>: 1579,1585
@Override [EOL] @SuppressWarnings("unchecked") [EOL] public final <T> T readValue(JsonParser jp, ResolvedType valueType) throws IOException, JsonParseException, JsonMappingException { [EOL]     return (T) _readValue(getDeserializationConfig(), jp, (JavaType) valueType); [EOL] } <line_num>: 1593,1599
@SuppressWarnings("unchecked") [EOL] public <T> T readValue(JsonParser jp, JavaType valueType) throws IOException, JsonParseException, JsonMappingException { [EOL]     return (T) _readValue(getDeserializationConfig(), jp, valueType); [EOL] } <line_num>: 1604,1609
@Override [EOL] public <T extends TreeNode> T readTree(JsonParser jp) throws IOException, JsonProcessingException { [EOL]     DeserializationConfig cfg = getDeserializationConfig(); [EOL]     JsonToken t = jp.getCurrentToken(); [EOL]     if (t == null) { [EOL]         t = jp.nextToken(); [EOL]         if (t == null) { [EOL]             return null; [EOL]         } [EOL]     } [EOL]     JsonNode n = (JsonNode) _readValue(cfg, jp, JSON_NODE_TYPE); [EOL]     if (n == null) { [EOL]         n = getNodeFactory().nullNode(); [EOL]     } [EOL]     @SuppressWarnings("unchecked") [EOL]     T result = (T) n; [EOL]     return result; [EOL] } <line_num>: 1618,1644
@Override [EOL] public <T> MappingIterator<T> readValues(JsonParser jp, ResolvedType valueType) throws IOException, JsonProcessingException { [EOL]     return readValues(jp, (JavaType) valueType); [EOL] } <line_num>: 1658,1663
public <T> MappingIterator<T> readValues(JsonParser jp, JavaType valueType) throws IOException, JsonProcessingException { [EOL]     DeserializationConfig config = getDeserializationConfig(); [EOL]     DeserializationContext ctxt = createDeserializationContext(jp, config); [EOL]     JsonDeserializer<?> deser = _findRootDeserializer(ctxt, valueType); [EOL]     return new MappingIterator<T>(valueType, jp, ctxt, deser, false, null); [EOL] } <line_num>: 1668,1677
@Override [EOL] public <T> MappingIterator<T> readValues(JsonParser jp, Class<T> valueType) throws IOException, JsonProcessingException { [EOL]     return readValues(jp, _typeFactory.constructType(valueType)); [EOL] } <line_num>: 1682,1687
@Override [EOL] public <T> MappingIterator<T> readValues(JsonParser jp, TypeReference<?> valueTypeRef) throws IOException, JsonProcessingException { [EOL]     return readValues(jp, _typeFactory.constructType(valueTypeRef)); [EOL] } <line_num>: 1692,1697
public JsonNode readTree(InputStream in) throws IOException, JsonProcessingException { [EOL]     JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createParser(in), JSON_NODE_TYPE); [EOL]     return (n == null) ? NullNode.instance : n; [EOL] } <line_num>: 1716,1721
public JsonNode readTree(Reader r) throws IOException, JsonProcessingException { [EOL]     JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createParser(r), JSON_NODE_TYPE); [EOL]     return (n == null) ? NullNode.instance : n; [EOL] } <line_num>: 1733,1738
public JsonNode readTree(String content) throws IOException, JsonProcessingException { [EOL]     JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createParser(content), JSON_NODE_TYPE); [EOL]     return (n == null) ? NullNode.instance : n; [EOL] } <line_num>: 1747,1752
public JsonNode readTree(byte[] content) throws IOException, JsonProcessingException { [EOL]     JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createParser(content), JSON_NODE_TYPE); [EOL]     return (n == null) ? NullNode.instance : n; [EOL] } <line_num>: 1761,1766
public JsonNode readTree(File file) throws IOException, JsonProcessingException { [EOL]     JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createParser(file), JSON_NODE_TYPE); [EOL]     return (n == null) ? NullNode.instance : n; [EOL] } <line_num>: 1775,1780
public JsonNode readTree(URL source) throws IOException, JsonProcessingException { [EOL]     JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createParser(source), JSON_NODE_TYPE); [EOL]     return (n == null) ? NullNode.instance : n; [EOL] } <line_num>: 1789,1794
@Override [EOL] public void writeValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException, JsonMappingException { [EOL]     SerializationConfig config = getSerializationConfig(); [EOL]     if (config.isEnabled(SerializationFeature.INDENT_OUTPUT)) { [EOL]         jgen.useDefaultPrettyPrinter(); [EOL]     } [EOL]     if (config.isEnabled(SerializationFeature.CLOSE_CLOSEABLE) && (value instanceof Closeable)) { [EOL]         _writeCloseableValue(jgen, value, config); [EOL]     } else { [EOL]         _serializerProvider(config).serializeValue(jgen, value); [EOL]         if (config.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE)) { [EOL]             jgen.flush(); [EOL]         } [EOL]     } [EOL] } <line_num>: 1807,1824
public void writeTree(JsonGenerator jgen, JsonNode rootNode) throws IOException, JsonProcessingException { [EOL]     SerializationConfig config = getSerializationConfig(); [EOL]     _serializerProvider(config).serializeValue(jgen, rootNode); [EOL]     if (config.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE)) { [EOL]         jgen.flush(); [EOL]     } [EOL] } <line_num>: 1830,1838
@Override [EOL] public ObjectNode createObjectNode() { [EOL]     return _deserializationConfig.getNodeFactory().objectNode(); [EOL] } <line_num>: 1853,1856
@Override [EOL] public ArrayNode createArrayNode() { [EOL]     return _deserializationConfig.getNodeFactory().arrayNode(); [EOL] } <line_num>: 1865,1868
@Override [EOL] public JsonParser treeAsTokens(TreeNode n) { [EOL]     return new TreeTraversingParser((JsonNode) n, this); [EOL] } <line_num>: 1876,1880
@SuppressWarnings("unchecked") [EOL] @Override [EOL] public <T> T treeToValue(TreeNode n, Class<T> valueType) throws JsonProcessingException { [EOL]     try { [EOL]         if (valueType != Object.class && valueType.isAssignableFrom(n.getClass())) { [EOL]             return (T) n; [EOL]         } [EOL]         return readValue(treeAsTokens(n), valueType); [EOL]     } catch (JsonProcessingException e) { [EOL]         throw e; [EOL]     } catch (IOException e) { [EOL]         throw new IllegalArgumentException(e.getMessage(), e); [EOL]     } [EOL] } <line_num>: 1891,1908
@SuppressWarnings("unchecked") [EOL] public <T extends JsonNode> T valueToTree(Object fromValue) throws IllegalArgumentException { [EOL]     if (fromValue == null) [EOL]         return null; [EOL]     TokenBuffer buf = new TokenBuffer(this); [EOL]     JsonNode result; [EOL]     try { [EOL]         writeValue(buf, fromValue); [EOL]         JsonParser jp = buf.asParser(); [EOL]         result = readTree(jp); [EOL]         jp.close(); [EOL]     } catch (IOException e) { [EOL]         throw new IllegalArgumentException(e.getMessage(), e); [EOL]     } [EOL]     return (T) result; [EOL] } <line_num>: 1921,1937
public boolean canSerialize(Class<?> type) { [EOL]     return _serializerProvider(getSerializationConfig()).hasSerializerFor(type); [EOL] } <line_num>: 1955,1957
public boolean canDeserialize(JavaType type) { [EOL]     return createDeserializationContext(null, getDeserializationConfig()).hasValueDeserializerFor(type); [EOL] } <line_num>: 1969,1973
@SuppressWarnings("unchecked") [EOL] public <T> T readValue(File src, Class<T> valueType) throws IOException, JsonParseException, JsonMappingException { [EOL]     return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueType)); [EOL] } <line_num>: 1982,1989
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public <T> T readValue(File src, TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException { [EOL]     return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef)); [EOL] } <line_num>: 1991,1996
@SuppressWarnings("unchecked") [EOL] public <T> T readValue(File src, JavaType valueType) throws IOException, JsonParseException, JsonMappingException { [EOL]     return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType); [EOL] } <line_num>: 1998,2003
@SuppressWarnings("unchecked") [EOL] public <T> T readValue(URL src, Class<T> valueType) throws IOException, JsonParseException, JsonMappingException { [EOL]     return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueType)); [EOL] } <line_num>: 2005,2012
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public <T> T readValue(URL src, TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException { [EOL]     return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef)); [EOL] } <line_num>: 2014,2019
@SuppressWarnings("unchecked") [EOL] public <T> T readValue(URL src, JavaType valueType) throws IOException, JsonParseException, JsonMappingException { [EOL]     return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType); [EOL] } <line_num>: 2021,2026
@SuppressWarnings("unchecked") [EOL] public <T> T readValue(String content, Class<T> valueType) throws IOException, JsonParseException, JsonMappingException { [EOL]     return (T) _readMapAndClose(_jsonFactory.createParser(content), _typeFactory.constructType(valueType)); [EOL] } <line_num>: 2028,2035
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public <T> T readValue(String content, TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException { [EOL]     return (T) _readMapAndClose(_jsonFactory.createParser(content), _typeFactory.constructType(valueTypeRef)); [EOL] } <line_num>: 2037,2042
@SuppressWarnings("unchecked") [EOL] public <T> T readValue(String content, JavaType valueType) throws IOException, JsonParseException, JsonMappingException { [EOL]     return (T) _readMapAndClose(_jsonFactory.createParser(content), valueType); [EOL] } <line_num>: 2044,2049
@SuppressWarnings("unchecked") [EOL] public <T> T readValue(Reader src, Class<T> valueType) throws IOException, JsonParseException, JsonMappingException { [EOL]     return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueType)); [EOL] } <line_num>: 2051,2058
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public <T> T readValue(Reader src, TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException { [EOL]     return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef)); [EOL] } <line_num>: 2060,2065
@SuppressWarnings("unchecked") [EOL] public <T> T readValue(Reader src, JavaType valueType) throws IOException, JsonParseException, JsonMappingException { [EOL]     return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType); [EOL] } <line_num>: 2067,2072
@SuppressWarnings("unchecked") [EOL] public <T> T readValue(InputStream src, Class<T> valueType) throws IOException, JsonParseException, JsonMappingException { [EOL]     return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueType)); [EOL] } <line_num>: 2074,2081
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public <T> T readValue(InputStream src, TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException { [EOL]     return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef)); [EOL] } <line_num>: 2083,2088
@SuppressWarnings("unchecked") [EOL] public <T> T readValue(InputStream src, JavaType valueType) throws IOException, JsonParseException, JsonMappingException { [EOL]     return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType); [EOL] } <line_num>: 2090,2095
@SuppressWarnings("unchecked") [EOL] public <T> T readValue(byte[] src, Class<T> valueType) throws IOException, JsonParseException, JsonMappingException { [EOL]     return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueType)); [EOL] } <line_num>: 2097,2104
@SuppressWarnings("unchecked") [EOL] public <T> T readValue(byte[] src, int offset, int len, Class<T> valueType) throws IOException, JsonParseException, JsonMappingException { [EOL]     return (T) _readMapAndClose(_jsonFactory.createParser(src, offset, len), _typeFactory.constructType(valueType)); [EOL] } <line_num>: 2106,2114
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public <T> T readValue(byte[] src, TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException { [EOL]     return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef)); [EOL] } <line_num>: 2116,2121
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public <T> T readValue(byte[] src, int offset, int len, TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException { [EOL]     return (T) _readMapAndClose(_jsonFactory.createParser(src, offset, len), _typeFactory.constructType(valueTypeRef)); [EOL] } <line_num>: 2123,2129
@SuppressWarnings("unchecked") [EOL] public <T> T readValue(byte[] src, JavaType valueType) throws IOException, JsonParseException, JsonMappingException { [EOL]     return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType); [EOL] } <line_num>: 2131,2136
@SuppressWarnings("unchecked") [EOL] public <T> T readValue(byte[] src, int offset, int len, JavaType valueType) throws IOException, JsonParseException, JsonMappingException { [EOL]     return (T) _readMapAndClose(_jsonFactory.createParser(src, offset, len), valueType); [EOL] } <line_num>: 2138,2144
public void writeValue(File resultFile, Object value) throws IOException, JsonGenerationException, JsonMappingException { [EOL]     _configAndWriteValue(_jsonFactory.createGenerator(resultFile, JsonEncoding.UTF8), value); [EOL] } <line_num>: 2157,2161
public void writeValue(OutputStream out, Object value) throws IOException, JsonGenerationException, JsonMappingException { [EOL]     _configAndWriteValue(_jsonFactory.createGenerator(out, JsonEncoding.UTF8), value); [EOL] } <line_num>: 2174,2178
public void writeValue(Writer w, Object value) throws IOException, JsonGenerationException, JsonMappingException { [EOL]     _configAndWriteValue(_jsonFactory.createGenerator(w), value); [EOL] } <line_num>: 2190,2194
public String writeValueAsString(Object value) throws JsonProcessingException { [EOL]     SegmentedStringWriter sw = new SegmentedStringWriter(_jsonFactory._getBufferRecycler()); [EOL]     try { [EOL]         _configAndWriteValue(_jsonFactory.createGenerator(sw), value); [EOL]     } catch (JsonProcessingException e) { [EOL]         throw e; [EOL]     } catch (IOException e) { [EOL]         throw JsonMappingException.fromUnexpectedIOE(e); [EOL]     } [EOL]     return sw.getAndClear(); [EOL] } <line_num>: 2204,2217
public byte[] writeValueAsBytes(Object value) throws JsonProcessingException { [EOL]     ByteArrayBuilder bb = new ByteArrayBuilder(_jsonFactory._getBufferRecycler()); [EOL]     try { [EOL]         _configAndWriteValue(_jsonFactory.createGenerator(bb, JsonEncoding.UTF8), value); [EOL]     } catch (JsonProcessingException e) { [EOL]         throw e; [EOL]     } catch (IOException e) { [EOL]         throw JsonMappingException.fromUnexpectedIOE(e); [EOL]     } [EOL]     byte[] result = bb.toByteArray(); [EOL]     bb.release(); [EOL]     return result; [EOL] } <line_num>: 2228,2242
public ObjectWriter writer() { [EOL]     return new ObjectWriter(this, getSerializationConfig()); [EOL] } <line_num>: 2255,2257
public ObjectWriter writer(SerializationFeature feature) { [EOL]     return new ObjectWriter(this, getSerializationConfig().with(feature)); [EOL] } <line_num>: 2264,2266
public ObjectWriter writer(SerializationFeature first, SerializationFeature... other) { [EOL]     return new ObjectWriter(this, getSerializationConfig().with(first, other)); [EOL] } <line_num>: 2273,2276
public ObjectWriter writer(DateFormat df) { [EOL]     return new ObjectWriter(this, getSerializationConfig().with(df)); [EOL] } <line_num>: 2283,2286
public ObjectWriter writerWithView(Class<?> serializationView) { [EOL]     return new ObjectWriter(this, getSerializationConfig().withView(serializationView)); [EOL] } <line_num>: 2292,2294
public ObjectWriter writerWithType(Class<?> rootType) { [EOL]     return new ObjectWriter(this, getSerializationConfig(), ((rootType == null) ? null : _typeFactory.constructType(rootType)), null); [EOL] } <line_num>: 2302,2307
public ObjectWriter writerWithType(TypeReference<?> rootType) { [EOL]     return new ObjectWriter(this, getSerializationConfig(), ((rootType == null) ? null : _typeFactory.constructType(rootType)), null); [EOL] } <line_num>: 2314,2319
public ObjectWriter writerWithType(JavaType rootType) { [EOL]     return new ObjectWriter(this, getSerializationConfig(), rootType, null); [EOL] } <line_num>: 2326,2328
public ObjectWriter writer(PrettyPrinter pp) { [EOL]     if (pp == null) { [EOL]         pp = ObjectWriter.NULL_PRETTY_PRINTER; [EOL]     } [EOL]     return new ObjectWriter(this, getSerializationConfig(), null, pp); [EOL] } <line_num>: 2335,2340
public ObjectWriter writerWithDefaultPrettyPrinter() { [EOL]     return new ObjectWriter(this, getSerializationConfig(), null, _defaultPrettyPrinter()); [EOL] } <line_num>: 2346,2349
public ObjectWriter writer(FilterProvider filterProvider) { [EOL]     return new ObjectWriter(this, getSerializationConfig().withFilters(filterProvider)); [EOL] } <line_num>: 2355,2358
public ObjectWriter writer(FormatSchema schema) { [EOL]     _verifySchemaType(schema); [EOL]     return new ObjectWriter(this, getSerializationConfig(), schema); [EOL] } <line_num>: 2367,2370
public ObjectWriter writer(Base64Variant defaultBase64) { [EOL]     return new ObjectWriter(this, getSerializationConfig().with(defaultBase64)); [EOL] } <line_num>: 2378,2380
public ObjectReader reader() { [EOL]     return new ObjectReader(this, getDeserializationConfig()).with(_injectableValues); [EOL] } <line_num>: 2394,2397
public ObjectReader reader(DeserializationFeature feature) { [EOL]     return new ObjectReader(this, getDeserializationConfig().with(feature)); [EOL] } <line_num>: 2406,2408
public ObjectReader reader(DeserializationFeature first, DeserializationFeature... other) { [EOL]     return new ObjectReader(this, getDeserializationConfig().with(first, other)); [EOL] } <line_num>: 2417,2420
public ObjectReader readerForUpdating(Object valueToUpdate) { [EOL]     JavaType t = _typeFactory.constructType(valueToUpdate.getClass()); [EOL]     return new ObjectReader(this, getDeserializationConfig(), t, valueToUpdate, null, _injectableValues); [EOL] } <line_num>: 2432,2437
public ObjectReader reader(JavaType type) { [EOL]     return new ObjectReader(this, getDeserializationConfig(), type, null, null, _injectableValues); [EOL] } <line_num>: 2443,2447
public ObjectReader reader(Class<?> type) { [EOL]     return reader(_typeFactory.constructType(type)); [EOL] } <line_num>: 2453,2456
public ObjectReader reader(TypeReference<?> type) { [EOL]     return reader(_typeFactory.constructType(type)); [EOL] } <line_num>: 2462,2465
public ObjectReader reader(JsonNodeFactory f) { [EOL]     return new ObjectReader(this, getDeserializationConfig()).with(f); [EOL] } <line_num>: 2471,2474
public ObjectReader reader(FormatSchema schema) { [EOL]     _verifySchemaType(schema); [EOL]     return new ObjectReader(this, getDeserializationConfig(), null, null, schema, _injectableValues); [EOL] } <line_num>: 2483,2487
public ObjectReader reader(InjectableValues injectableValues) { [EOL]     return new ObjectReader(this, getDeserializationConfig(), null, null, null, injectableValues); [EOL] } <line_num>: 2495,2498
public ObjectReader readerWithView(Class<?> view) { [EOL]     return new ObjectReader(this, getDeserializationConfig().withView(view)); [EOL] } <line_num>: 2504,2506
public ObjectReader reader(Base64Variant defaultBase64) { [EOL]     return new ObjectReader(this, getDeserializationConfig().with(defaultBase64)); [EOL] } <line_num>: 2514,2516
@SuppressWarnings("unchecked") [EOL] public <T> T convertValue(Object fromValue, Class<T> toValueType) throws IllegalArgumentException { [EOL]     if (fromValue == null) [EOL]         return null; [EOL]     return (T) _convert(fromValue, _typeFactory.constructType(toValueType)); [EOL] } <line_num>: 2536,2543
@SuppressWarnings("unchecked") [EOL] public <T> T convertValue(Object fromValue, TypeReference<?> toValueTypeRef) throws IllegalArgumentException { [EOL]     return (T) convertValue(fromValue, _typeFactory.constructType(toValueTypeRef)); [EOL] } <line_num>: 2545,2550
@SuppressWarnings("unchecked") [EOL] public <T> T convertValue(Object fromValue, JavaType toValueType) throws IllegalArgumentException { [EOL]     if (fromValue == null) [EOL]         return null; [EOL]     return (T) _convert(fromValue, toValueType); [EOL] } <line_num>: 2552,2559
protected Object _convert(Object fromValue, JavaType toValueType) throws IllegalArgumentException { [EOL]     Class<?> targetType = toValueType.getRawClass(); [EOL]     if (targetType != Object.class && !toValueType.hasGenericTypes() && targetType.isAssignableFrom(fromValue.getClass())) { [EOL]         return fromValue; [EOL]     } [EOL]     TokenBuffer buf = new TokenBuffer(this); [EOL]     try { [EOL]         SerializationConfig config = getSerializationConfig().without(SerializationFeature.WRAP_ROOT_VALUE); [EOL]         _serializerProvider(config).serializeValue(buf, fromValue); [EOL]         final JsonParser jp = buf.asParser(); [EOL]         Object result; [EOL]         final DeserializationConfig deserConfig = getDeserializationConfig(); [EOL]         JsonToken t = _initForReading(jp); [EOL]         if (t == JsonToken.VALUE_NULL) { [EOL]             DeserializationContext ctxt = createDeserializationContext(jp, deserConfig); [EOL]             result = _findRootDeserializer(ctxt, toValueType).getNullValue(); [EOL]         } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) { [EOL]             result = null; [EOL]         } else { [EOL]             DeserializationContext ctxt = createDeserializationContext(jp, deserConfig); [EOL]             JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, toValueType); [EOL]             result = deser.deserialize(jp, ctxt); [EOL]         } [EOL]         jp.close(); [EOL]         return result; [EOL]     } catch (IOException e) { [EOL]         throw new IllegalArgumentException(e.getMessage(), e); [EOL]     } [EOL] } <line_num>: 2569,2617
@SuppressWarnings("deprecation") [EOL] public com.fasterxml.jackson.databind.jsonschema.JsonSchema generateJsonSchema(Class<?> t) throws JsonMappingException { [EOL]     return _serializerProvider(getSerializationConfig()).generateJsonSchema(t); [EOL] } <line_num>: 2632,2636
public void acceptJsonFormatVisitor(Class<?> type, JsonFormatVisitorWrapper visitor) throws JsonMappingException { [EOL]     acceptJsonFormatVisitor(_typeFactory.constructType(type), visitor); [EOL] } <line_num>: 2649,2653
public void acceptJsonFormatVisitor(JavaType type, JsonFormatVisitorWrapper visitor) throws JsonMappingException { [EOL]     if (type == null) { [EOL]         throw new IllegalArgumentException("type must be provided"); [EOL]     } [EOL]     _serializerProvider(getSerializationConfig()).acceptJsonFormatVisitor(type, visitor); [EOL] } <line_num>: 2667,2674
protected DefaultSerializerProvider _serializerProvider(SerializationConfig config) { [EOL]     return _serializerProvider.createInstance(config, _serializerFactory); [EOL] } <line_num>: 2686,2688
protected PrettyPrinter _defaultPrettyPrinter() { [EOL]     return _defaultPrettyPrinter; [EOL] } <line_num>: 2695,2697
protected final void _configAndWriteValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException, JsonMappingException { [EOL]     SerializationConfig cfg = getSerializationConfig(); [EOL]     if (cfg.isEnabled(SerializationFeature.INDENT_OUTPUT)) { [EOL]         jgen.useDefaultPrettyPrinter(); [EOL]     } [EOL]     if (cfg.isEnabled(SerializationFeature.CLOSE_CLOSEABLE) && (value instanceof Closeable)) { [EOL]         _configAndWriteCloseable(jgen, value, cfg); [EOL]         return; [EOL]     } [EOL]     boolean closed = false; [EOL]     try { [EOL]         _serializerProvider(cfg).serializeValue(jgen, value); [EOL]         closed = true; [EOL]         jgen.close(); [EOL]     } finally { [EOL]         if (!closed) { [EOL]             try { [EOL]                 jgen.close(); [EOL]             } catch (IOException ioe) { [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 2703,2731
protected final void _configAndWriteValue(JsonGenerator jgen, Object value, Class<?> viewClass) throws IOException, JsonGenerationException, JsonMappingException { [EOL]     SerializationConfig cfg = getSerializationConfig().withView(viewClass); [EOL]     if (cfg.isEnabled(SerializationFeature.INDENT_OUTPUT)) { [EOL]         jgen.useDefaultPrettyPrinter(); [EOL]     } [EOL]     if (cfg.isEnabled(SerializationFeature.CLOSE_CLOSEABLE) && (value instanceof Closeable)) { [EOL]         _configAndWriteCloseable(jgen, value, cfg); [EOL]         return; [EOL]     } [EOL]     boolean closed = false; [EOL]     try { [EOL]         _serializerProvider(cfg).serializeValue(jgen, value); [EOL]         closed = true; [EOL]         jgen.close(); [EOL]     } finally { [EOL]         if (!closed) { [EOL]             try { [EOL]                 jgen.close(); [EOL]             } catch (IOException ioe) { [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 2733,2757
private final void _configAndWriteCloseable(JsonGenerator jgen, Object value, SerializationConfig cfg) throws IOException, JsonGenerationException, JsonMappingException { [EOL]     Closeable toClose = (Closeable) value; [EOL]     try { [EOL]         _serializerProvider(cfg).serializeValue(jgen, value); [EOL]         JsonGenerator tmpJgen = jgen; [EOL]         jgen = null; [EOL]         tmpJgen.close(); [EOL]         Closeable tmpToClose = toClose; [EOL]         toClose = null; [EOL]         tmpToClose.close(); [EOL]     } finally { [EOL]         if (jgen != null) { [EOL]             try { [EOL]                 jgen.close(); [EOL]             } catch (IOException ioe) { [EOL]             } [EOL]         } [EOL]         if (toClose != null) { [EOL]             try { [EOL]                 toClose.close(); [EOL]             } catch (IOException ioe) { [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 2763,2790
private final void _writeCloseableValue(JsonGenerator jgen, Object value, SerializationConfig cfg) throws IOException, JsonGenerationException, JsonMappingException { [EOL]     Closeable toClose = (Closeable) value; [EOL]     try { [EOL]         _serializerProvider(cfg).serializeValue(jgen, value); [EOL]         if (cfg.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE)) { [EOL]             jgen.flush(); [EOL]         } [EOL]         Closeable tmpToClose = toClose; [EOL]         toClose = null; [EOL]         tmpToClose.close(); [EOL]     } finally { [EOL]         if (toClose != null) { [EOL]             try { [EOL]                 toClose.close(); [EOL]             } catch (IOException ioe) { [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 2796,2815
protected DefaultDeserializationContext createDeserializationContext(JsonParser jp, DeserializationConfig cfg) { [EOL]     return _deserializationContext.createInstance(cfg, jp, _injectableValues); [EOL] } <line_num>: 2828,2833
protected Object _readValue(DeserializationConfig cfg, JsonParser jp, JavaType valueType) throws IOException, JsonParseException, JsonMappingException { [EOL]     Object result; [EOL]     JsonToken t = _initForReading(jp); [EOL]     if (t == JsonToken.VALUE_NULL) { [EOL]         DeserializationContext ctxt = createDeserializationContext(jp, cfg); [EOL]         result = _findRootDeserializer(ctxt, valueType).getNullValue(); [EOL]     } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) { [EOL]         result = null; [EOL]     } else { [EOL]         DeserializationContext ctxt = createDeserializationContext(jp, cfg); [EOL]         JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType); [EOL]         if (cfg.useRootWrapping()) { [EOL]             result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser); [EOL]         } else { [EOL]             result = deser.deserialize(jp, ctxt); [EOL]         } [EOL]     } [EOL]     jp.clearCurrentToken(); [EOL]     return result; [EOL] } <line_num>: 2838,2866
protected Object _readMapAndClose(JsonParser jp, JavaType valueType) throws IOException, JsonParseException, JsonMappingException { [EOL]     try { [EOL]         Object result; [EOL]         JsonToken t = _initForReading(jp); [EOL]         if (t == JsonToken.VALUE_NULL) { [EOL]             DeserializationContext ctxt = createDeserializationContext(jp, getDeserializationConfig()); [EOL]             result = _findRootDeserializer(ctxt, valueType).getNullValue(); [EOL]         } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) { [EOL]             result = null; [EOL]         } else { [EOL]             DeserializationConfig cfg = getDeserializationConfig(); [EOL]             DeserializationContext ctxt = createDeserializationContext(jp, cfg); [EOL]             JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType); [EOL]             if (cfg.useRootWrapping()) { [EOL]                 result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser); [EOL]             } else { [EOL]                 result = deser.deserialize(jp, ctxt); [EOL]             } [EOL]         } [EOL]         jp.clearCurrentToken(); [EOL]         return result; [EOL]     } finally { [EOL]         try { [EOL]             jp.close(); [EOL]         } catch (IOException ioe) { [EOL]         } [EOL]     } [EOL] } <line_num>: 2868,2899
protected JsonToken _initForReading(JsonParser jp) throws IOException, JsonParseException, JsonMappingException { [EOL]     JsonToken t = jp.getCurrentToken(); [EOL]     if (t == null) { [EOL]         t = jp.nextToken(); [EOL]         if (t == null) { [EOL]             throw JsonMappingException.from(jp, "No content to map due to end-of-input"); [EOL]         } [EOL]     } [EOL]     return t; [EOL] } <line_num>: 2916,2935
protected Object _unwrapAndDeserialize(JsonParser jp, DeserializationContext ctxt, DeserializationConfig config, JavaType rootType, JsonDeserializer<Object> deser) throws IOException, JsonParseException, JsonMappingException { [EOL]     String expName = config.getRootName(); [EOL]     if (expName == null) { [EOL]         SerializedString sstr = _rootNames.findRootName(rootType, config); [EOL]         expName = sstr.getValue(); [EOL]     } [EOL]     if (jp.getCurrentToken() != JsonToken.START_OBJECT) { [EOL]         throw JsonMappingException.from(jp, "Current token not START_OBJECT (needed to unwrap root name '" + expName + "'), but " + jp.getCurrentToken()); [EOL]     } [EOL]     if (jp.nextToken() != JsonToken.FIELD_NAME) { [EOL]         throw JsonMappingException.from(jp, "Current token not FIELD_NAME (to contain expected root name '" + expName + "'), but " + jp.getCurrentToken()); [EOL]     } [EOL]     String actualName = jp.getCurrentName(); [EOL]     if (!expName.equals(actualName)) { [EOL]         throw JsonMappingException.from(jp, "Root name '" + actualName + "' does not match expected ('" + expName + "') for type " + rootType); [EOL]     } [EOL]     jp.nextToken(); [EOL]     Object result = deser.deserialize(jp, ctxt); [EOL]     if (jp.nextToken() != JsonToken.END_OBJECT) { [EOL]         throw JsonMappingException.from(jp, "Current token not END_OBJECT (to match wrapper object with root name '" + expName + "'), but " + jp.getCurrentToken()); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 2937,2969
protected JsonDeserializer<Object> _findRootDeserializer(DeserializationContext ctxt, JavaType valueType) throws JsonMappingException { [EOL]     JsonDeserializer<Object> deser = _rootDeserializers.get(valueType); [EOL]     if (deser != null) { [EOL]         return deser; [EOL]     } [EOL]     deser = ctxt.findRootValueDeserializer(valueType); [EOL]     if (deser == null) { [EOL]         throw new JsonMappingException("Can not find a deserializer for type " + valueType); [EOL]     } [EOL]     _rootDeserializers.put(valueType, deser); [EOL]     return deser; [EOL] } <line_num>: 2980,2996
protected void _verifySchemaType(FormatSchema schema) { [EOL]     if (schema != null) { [EOL]         if (!_jsonFactory.canUseSchema(schema)) { [EOL]             throw new IllegalArgumentException("Can not use FormatSchema of type " + schema.getClass().getName() + " for format " + _jsonFactory.getFormatName()); [EOL]         } [EOL]     } [EOL] } <line_num>: 3001,3009
