public SerializerProvider() { [EOL]     _config = null; [EOL]     _serializerFactory = null; [EOL]     _serializerCache = new SerializerCache(); [EOL]     _knownSerializers = null; [EOL]     _rootNames = new RootNameLookup(); [EOL]     _serializationView = null; [EOL] } <line_num>: 162,172
protected SerializerProvider(SerializerProvider src, SerializationConfig config, SerializerFactory f) { [EOL]     if (config == null) { [EOL]         throw new NullPointerException(); [EOL]     } [EOL]     _serializerFactory = f; [EOL]     _config = config; [EOL]     _serializerCache = src._serializerCache; [EOL]     _unknownTypeSerializer = src._unknownTypeSerializer; [EOL]     _keySerializer = src._keySerializer; [EOL]     _nullValueSerializer = src._nullValueSerializer; [EOL]     _nullKeySerializer = src._nullKeySerializer; [EOL]     _rootNames = src._rootNames; [EOL]     _knownSerializers = _serializerCache.getReadOnlyLookupMap(); [EOL]     _serializationView = config.getActiveView(); [EOL] } <line_num>: 179,201
public void setDefaultKeySerializer(JsonSerializer<Object> ks) { [EOL]     if (ks == null) { [EOL]         throw new IllegalArgumentException("Can not pass null JsonSerializer"); [EOL]     } [EOL]     _keySerializer = ks; [EOL] } <line_num>: 215,221
public void setNullValueSerializer(JsonSerializer<Object> nvs) { [EOL]     if (nvs == null) { [EOL]         throw new IllegalArgumentException("Can not pass null JsonSerializer"); [EOL]     } [EOL]     _nullValueSerializer = nvs; [EOL] } <line_num>: 228,234
public void setNullKeySerializer(JsonSerializer<Object> nks) { [EOL]     if (nks == null) { [EOL]         throw new IllegalArgumentException("Can not pass null JsonSerializer"); [EOL]     } [EOL]     _nullKeySerializer = nks; [EOL] } <line_num>: 245,251
@Override [EOL] public final SerializationConfig getConfig() { [EOL]     return _config; [EOL] } <line_num>: 262,263
@Override [EOL] public final AnnotationIntrospector getAnnotationIntrospector() { [EOL]     return _config.getAnnotationIntrospector(); [EOL] } <line_num>: 265,268
@Override [EOL] public final TypeFactory getTypeFactory() { [EOL]     return _config.getTypeFactory(); [EOL] } <line_num>: 270,273
@Override [EOL] public final Class<?> getActiveView() { [EOL]     return _serializationView; [EOL] } <line_num>: 275,276
@Deprecated [EOL] public final Class<?> getSerializationView() { [EOL]     return _serializationView; [EOL] } <line_num>: 281,282
public final boolean isEnabled(SerializationFeature feature) { [EOL]     return _config.isEnabled(feature); [EOL] } <line_num>: 298,300
public final FilterProvider getFilterProvider() { [EOL]     return _config.getFilterProvider(); [EOL] } <line_num>: 309,311
public Locale getLocale() { [EOL]     return _config.getLocale(); [EOL] } <line_num>: 319,321
public TimeZone getTimeZone() { [EOL]     return _config.getTimeZone(); [EOL] } <line_num>: 329,331
public abstract WritableObjectId findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType); <line_num>: 345,346
public JsonSerializer<Object> findValueSerializer(Class<?> valueType, BeanProperty property) throws JsonMappingException { [EOL]     JsonSerializer<Object> ser = _knownSerializers.untypedValueSerializer(valueType); [EOL]     if (ser == null) { [EOL]         ser = _serializerCache.untypedValueSerializer(valueType); [EOL]         if (ser == null) { [EOL]             ser = _serializerCache.untypedValueSerializer(_config.constructType(valueType)); [EOL]             if (ser == null) { [EOL]                 ser = _createAndCacheUntypedSerializer(valueType); [EOL]                 if (ser == null) { [EOL]                     ser = getUnknownTypeSerializer(valueType); [EOL]                     if (CACHE_UNKNOWN_MAPPINGS) { [EOL]                         _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this); [EOL]                     } [EOL]                     return ser; [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return _handleContextual(ser, property); [EOL] } <line_num>: 373,406
public JsonSerializer<Object> findValueSerializer(JavaType valueType, BeanProperty property) throws JsonMappingException { [EOL]     JsonSerializer<Object> ser = _knownSerializers.untypedValueSerializer(valueType); [EOL]     if (ser == null) { [EOL]         ser = _serializerCache.untypedValueSerializer(valueType); [EOL]         if (ser == null) { [EOL]             ser = _createAndCacheUntypedSerializer(valueType); [EOL]             if (ser == null) { [EOL]                 ser = getUnknownTypeSerializer(valueType.getRawClass()); [EOL]                 if (CACHE_UNKNOWN_MAPPINGS) { [EOL]                     _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this); [EOL]                 } [EOL]                 return ser; [EOL]             } [EOL]         } [EOL]     } [EOL]     return _handleContextual(ser, property); [EOL] } <line_num>: 418,445
public JsonSerializer<Object> findTypedValueSerializer(Class<?> valueType, boolean cache, BeanProperty property) throws JsonMappingException { [EOL]     JsonSerializer<Object> ser = _knownSerializers.typedValueSerializer(valueType); [EOL]     if (ser != null) { [EOL]         return ser; [EOL]     } [EOL]     ser = _serializerCache.typedValueSerializer(valueType); [EOL]     if (ser != null) { [EOL]         return ser; [EOL]     } [EOL]     ser = findValueSerializer(valueType, property); [EOL]     TypeSerializer typeSer = _serializerFactory.createTypeSerializer(_config, _config.constructType(valueType)); [EOL]     if (typeSer != null) { [EOL]         typeSer = typeSer.forProperty(property); [EOL]         ser = new TypeWrappedSerializer(typeSer, ser); [EOL]     } [EOL]     if (cache) { [EOL]         _serializerCache.addTypedSerializer(valueType, ser); [EOL]     } [EOL]     return ser; [EOL] } <line_num>: 462,489
public JsonSerializer<Object> findTypedValueSerializer(JavaType valueType, boolean cache, BeanProperty property) throws JsonMappingException { [EOL]     JsonSerializer<Object> ser = _knownSerializers.typedValueSerializer(valueType); [EOL]     if (ser != null) { [EOL]         return ser; [EOL]     } [EOL]     ser = _serializerCache.typedValueSerializer(valueType); [EOL]     if (ser != null) { [EOL]         return ser; [EOL]     } [EOL]     ser = findValueSerializer(valueType, property); [EOL]     TypeSerializer typeSer = _serializerFactory.createTypeSerializer(_config, valueType); [EOL]     if (typeSer != null) { [EOL]         typeSer = typeSer.forProperty(property); [EOL]         ser = new TypeWrappedSerializer(typeSer, ser); [EOL]     } [EOL]     if (cache) { [EOL]         _serializerCache.addTypedSerializer(valueType, ser); [EOL]     } [EOL]     return ser; [EOL] } <line_num>: 507,533
public JsonSerializer<Object> findKeySerializer(JavaType keyType, BeanProperty property) throws JsonMappingException { [EOL]     JsonSerializer<Object> ser = _serializerFactory.createKeySerializer(_config, keyType, _keySerializer); [EOL]     return _handleContextualResolvable(ser, property); [EOL] } <line_num>: 545,552
public JsonSerializer<Object> getDefaultNullKeySerializer() { [EOL]     return _nullKeySerializer; [EOL] } <line_num>: 563,565
public JsonSerializer<Object> getDefaultNullValueSerializer() { [EOL]     return _nullValueSerializer; [EOL] } <line_num>: 570,572
public JsonSerializer<Object> findNullKeySerializer(JavaType serializationType, BeanProperty property) throws JsonMappingException { [EOL]     return getDefaultNullKeySerializer(); [EOL] } <line_num>: 591,595
public JsonSerializer<Object> findNullValueSerializer(BeanProperty property) throws JsonMappingException { [EOL]     return getDefaultNullValueSerializer(); [EOL] } <line_num>: 607,610
public JsonSerializer<Object> getUnknownTypeSerializer(Class<?> unknownType) { [EOL]     return _unknownTypeSerializer; [EOL] } <line_num>: 624,626
public abstract JsonSerializer<Object> serializerInstance(Annotated annotated, Object serDef) throws JsonMappingException; <line_num>: 645,647
public final void defaultSerializeValue(Object value, JsonGenerator jgen) throws IOException, JsonProcessingException { [EOL]     if (value == null) { [EOL]         getDefaultNullValueSerializer().serialize(null, jgen, this); [EOL]     } else { [EOL]         Class<?> cls = value.getClass(); [EOL]         findTypedValueSerializer(cls, true, null).serialize(value, jgen, this); [EOL]     } [EOL] } <line_num>: 662,671
public final void defaultSerializeField(String fieldName, Object value, JsonGenerator jgen) throws IOException, JsonProcessingException { [EOL]     jgen.writeFieldName(fieldName); [EOL]     if (value == null) { [EOL]         getDefaultNullValueSerializer().serialize(null, jgen, this); [EOL]     } else { [EOL]         Class<?> cls = value.getClass(); [EOL]         findTypedValueSerializer(cls, true, null).serialize(value, jgen, this); [EOL]     } [EOL] } <line_num>: 678,691
public final void defaultSerializeDateValue(long timestamp, JsonGenerator jgen) throws IOException, JsonProcessingException { [EOL]     if (isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) { [EOL]         jgen.writeNumber(timestamp); [EOL]     } else { [EOL]         jgen.writeString(_dateFormat().format(new Date(timestamp))); [EOL]     } [EOL] } <line_num>: 706,715
public final void defaultSerializeDateValue(Date date, JsonGenerator jgen) throws IOException, JsonProcessingException { [EOL]     if (isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) { [EOL]         jgen.writeNumber(date.getTime()); [EOL]     } else { [EOL]         jgen.writeString(_dateFormat().format(date)); [EOL]     } [EOL] } <line_num>: 724,733
public void defaultSerializeDateKey(long timestamp, JsonGenerator jgen) throws IOException, JsonProcessingException { [EOL]     if (isEnabled(SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS)) { [EOL]         jgen.writeFieldName(String.valueOf(timestamp)); [EOL]     } else { [EOL]         jgen.writeFieldName(_dateFormat().format(new Date(timestamp))); [EOL]     } [EOL] } <line_num>: 740,748
public void defaultSerializeDateKey(Date date, JsonGenerator jgen) throws IOException, JsonProcessingException { [EOL]     if (isEnabled(SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS)) { [EOL]         jgen.writeFieldName(String.valueOf(date.getTime())); [EOL]     } else { [EOL]         jgen.writeFieldName(_dateFormat().format(date)); [EOL]     } [EOL] } <line_num>: 755,763
public final void defaultSerializeNull(JsonGenerator jgen) throws IOException, JsonProcessingException { [EOL]     getDefaultNullValueSerializer().serialize(null, jgen, this); [EOL] } <line_num>: 765,769
protected void _reportIncompatibleRootType(Object value, JavaType rootType) throws IOException, JsonProcessingException { [EOL]     if (rootType.isPrimitive()) { [EOL]         Class<?> wrapperType = ClassUtil.wrapperType(rootType.getRawClass()); [EOL]         if (wrapperType.isAssignableFrom(value.getClass())) { [EOL]             return; [EOL]         } [EOL]     } [EOL]     throw new JsonMappingException("Incompatible types: declared root type (" + rootType + ") vs " + value.getClass().getName()); [EOL] } <line_num>: 777,792
protected JsonSerializer<Object> _findExplicitUntypedSerializer(Class<?> runtimeType) throws JsonMappingException { [EOL]     JsonSerializer<Object> ser = _knownSerializers.untypedValueSerializer(runtimeType); [EOL]     if (ser != null) { [EOL]         return ser; [EOL]     } [EOL]     ser = _serializerCache.untypedValueSerializer(runtimeType); [EOL]     if (ser != null) { [EOL]         return ser; [EOL]     } [EOL]     return _createAndCacheUntypedSerializer(runtimeType); [EOL] } <line_num>: 801,815
protected JsonSerializer<Object> _createAndCacheUntypedSerializer(Class<?> type) throws JsonMappingException { [EOL]     JsonSerializer<Object> ser; [EOL]     try { [EOL]         ser = _createUntypedSerializer(_config.constructType(type)); [EOL]     } catch (IllegalArgumentException iae) { [EOL]         throw new JsonMappingException(iae.getMessage(), null, iae); [EOL]     } [EOL]     if (ser != null) { [EOL]         _serializerCache.addAndResolveNonTypedSerializer(type, ser, this); [EOL]     } [EOL]     return ser; [EOL] } <line_num>: 828,845
protected JsonSerializer<Object> _createAndCacheUntypedSerializer(JavaType type) throws JsonMappingException { [EOL]     JsonSerializer<Object> ser; [EOL]     try { [EOL]         ser = _createUntypedSerializer(type); [EOL]     } catch (IllegalArgumentException iae) { [EOL]         throw new JsonMappingException(iae.getMessage(), null, iae); [EOL]     } [EOL]     if (ser != null) { [EOL]         _serializerCache.addAndResolveNonTypedSerializer(type, ser, this); [EOL]     } [EOL]     return ser; [EOL] } <line_num>: 847,864
protected JsonSerializer<Object> _createUntypedSerializer(JavaType type) throws JsonMappingException { [EOL]     return (JsonSerializer<Object>) _serializerFactory.createSerializer(this, type); [EOL] } <line_num>: 869,874
protected JsonSerializer<Object> _handleContextualResolvable(JsonSerializer<?> ser, BeanProperty property) throws JsonMappingException { [EOL]     if (ser instanceof ResolvableSerializer) { [EOL]         ((ResolvableSerializer) ser).resolve(this); [EOL]     } [EOL]     return _handleContextual(ser, property); [EOL] } <line_num>: 880,888
@SuppressWarnings("unchecked") [EOL] protected JsonSerializer<Object> _handleResolvable(JsonSerializer<?> ser) throws JsonMappingException { [EOL]     if (ser instanceof ResolvableSerializer) { [EOL]         ((ResolvableSerializer) ser).resolve(this); [EOL]     } [EOL]     return (JsonSerializer<Object>) ser; [EOL] } <line_num>: 890,898
@SuppressWarnings("unchecked") [EOL] protected JsonSerializer<Object> _handleContextual(JsonSerializer<?> ser, BeanProperty property) throws JsonMappingException { [EOL]     if (ser instanceof ContextualSerializer) { [EOL]         ser = ((ContextualSerializer) ser).createContextual(this, property); [EOL]     } [EOL]     return (JsonSerializer<Object>) ser; [EOL] } <line_num>: 900,909
protected final DateFormat _dateFormat() { [EOL]     if (_dateFormat != null) { [EOL]         return _dateFormat; [EOL]     } [EOL]     DateFormat df = _config.getDateFormat(); [EOL]     _dateFormat = df = (DateFormat) df.clone(); [EOL]     return df; [EOL] } <line_num>: 917,930
