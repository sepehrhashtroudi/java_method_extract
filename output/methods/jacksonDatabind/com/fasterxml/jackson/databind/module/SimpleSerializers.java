public SimpleSerializers() { [EOL] } <line_num>: 50,50
public SimpleSerializers(List<JsonSerializer<?>> sers) { [EOL]     addSerializers(sers); [EOL] } <line_num>: 55,57
public void addSerializer(JsonSerializer<?> ser) { [EOL]     Class<?> cls = ser.handledType(); [EOL]     if (cls == null || cls == Object.class) { [EOL]         throw new IllegalArgumentException("JsonSerializer of type " + ser.getClass().getName() + " does not define valid handledType() -- must either register with method that takes type argument " + " or make serializer extend 'com.fasterxml.jackson.databind.ser.std.StdSerializer'"); [EOL]     } [EOL]     _addSerializer(cls, ser); [EOL] } <line_num>: 68,78
public <T> void addSerializer(Class<? extends T> type, JsonSerializer<T> ser) { [EOL]     _addSerializer(type, ser); [EOL] } <line_num>: 80,83
public void addSerializers(List<JsonSerializer<?>> sers) { [EOL]     for (JsonSerializer<?> ser : sers) { [EOL]         addSerializer(ser); [EOL]     } [EOL] } <line_num>: 88,92
private void _addSerializer(Class<?> cls, JsonSerializer<?> ser) { [EOL]     ClassKey key = new ClassKey(cls); [EOL]     if (cls.isInterface()) { [EOL]         if (_interfaceMappings == null) { [EOL]             _interfaceMappings = new HashMap<ClassKey, JsonSerializer<?>>(); [EOL]         } [EOL]         _interfaceMappings.put(key, ser); [EOL]     } else { [EOL]         if (_classMappings == null) { [EOL]             _classMappings = new HashMap<ClassKey, JsonSerializer<?>>(); [EOL]         } [EOL]         _classMappings.put(key, ser); [EOL]     } [EOL] } <line_num>: 94,109
@Override [EOL] public JsonSerializer<?> findSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc) { [EOL]     Class<?> cls = type.getRawClass(); [EOL]     ClassKey key = new ClassKey(cls); [EOL]     JsonSerializer<?> ser = null; [EOL]     if (cls.isInterface()) { [EOL]         if (_interfaceMappings != null) { [EOL]             ser = _interfaceMappings.get(key); [EOL]             if (ser != null) { [EOL]                 return ser; [EOL]             } [EOL]         } [EOL]     } else { [EOL]         if (_classMappings != null) { [EOL]             ser = _classMappings.get(key); [EOL]             if (ser != null) { [EOL]                 return ser; [EOL]             } [EOL]             for (Class<?> curr = cls; (curr != null); curr = curr.getSuperclass()) { [EOL]                 key.reset(curr); [EOL]                 ser = _classMappings.get(key); [EOL]                 if (ser != null) { [EOL]                     return ser; [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     if (_interfaceMappings != null) { [EOL]         ser = _findInterfaceMapping(cls, key); [EOL]         if (ser != null) { [EOL]             return ser; [EOL]         } [EOL]         if (!cls.isInterface()) { [EOL]             while ((cls = cls.getSuperclass()) != null) { [EOL]                 ser = _findInterfaceMapping(cls, key); [EOL]                 if (ser != null) { [EOL]                     return ser; [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 117,166
@Override [EOL] public JsonSerializer<?> findArraySerializer(SerializationConfig config, ArrayType type, BeanDescription beanDesc, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) { [EOL]     return findSerializer(config, type, beanDesc); [EOL] } <line_num>: 168,173
@Override [EOL] public JsonSerializer<?> findCollectionSerializer(SerializationConfig config, CollectionType type, BeanDescription beanDesc, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) { [EOL]     return findSerializer(config, type, beanDesc); [EOL] } <line_num>: 175,180
@Override [EOL] public JsonSerializer<?> findCollectionLikeSerializer(SerializationConfig config, CollectionLikeType type, BeanDescription beanDesc, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) { [EOL]     return findSerializer(config, type, beanDesc); [EOL] } <line_num>: 182,187
@Override [EOL] public JsonSerializer<?> findMapSerializer(SerializationConfig config, MapType type, BeanDescription beanDesc, JsonSerializer<Object> keySerializer, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) { [EOL]     return findSerializer(config, type, beanDesc); [EOL] } <line_num>: 189,195
@Override [EOL] public JsonSerializer<?> findMapLikeSerializer(SerializationConfig config, MapLikeType type, BeanDescription beanDesc, JsonSerializer<Object> keySerializer, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) { [EOL]     return findSerializer(config, type, beanDesc); [EOL] } <line_num>: 197,203
protected JsonSerializer<?> _findInterfaceMapping(Class<?> cls, ClassKey key) { [EOL]     for (Class<?> iface : cls.getInterfaces()) { [EOL]         key.reset(iface); [EOL]         JsonSerializer<?> ser = _interfaceMappings.get(key); [EOL]         if (ser != null) { [EOL]             return ser; [EOL]         } [EOL]         ser = _findInterfaceMapping(iface, key); [EOL]         if (ser != null) { [EOL]             return ser; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 211,225
