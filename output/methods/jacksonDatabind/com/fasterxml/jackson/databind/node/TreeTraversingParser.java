public TreeTraversingParser(JsonNode n) { [EOL]     this(n, null); [EOL] } <line_num>: 67,67
public TreeTraversingParser(JsonNode n, ObjectCodec codec) { [EOL]     super(0); [EOL]     _objectCodec = codec; [EOL]     if (n.isArray()) { [EOL]         _nextToken = JsonToken.START_ARRAY; [EOL]         _nodeCursor = new NodeCursor.Array(n, null); [EOL]     } else if (n.isObject()) { [EOL]         _nextToken = JsonToken.START_OBJECT; [EOL]         _nodeCursor = new NodeCursor.Object(n, null); [EOL]     } else { [EOL]         _nodeCursor = new NodeCursor.RootValue(n, null); [EOL]     } [EOL] } <line_num>: 69,82
@Override [EOL] public void setCodec(ObjectCodec c) { [EOL]     _objectCodec = c; [EOL] } <line_num>: 84,87
@Override [EOL] public ObjectCodec getCodec() { [EOL]     return _objectCodec; [EOL] } <line_num>: 89,92
@Override [EOL] public Version version() { [EOL]     return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION; [EOL] } <line_num>: 94,97
@Override [EOL] public void close() throws IOException { [EOL]     if (!_closed) { [EOL]         _closed = true; [EOL]         _nodeCursor = null; [EOL]         _currToken = null; [EOL]     } [EOL] } <line_num>: 105,113
@Override [EOL] public JsonToken nextToken() throws IOException, JsonParseException { [EOL]     if (_nextToken != null) { [EOL]         _currToken = _nextToken; [EOL]         _nextToken = null; [EOL]         return _currToken; [EOL]     } [EOL]     if (_startContainer) { [EOL]         _startContainer = false; [EOL]         if (!_nodeCursor.currentHasChildren()) { [EOL]             _currToken = (_currToken == JsonToken.START_OBJECT) ? JsonToken.END_OBJECT : JsonToken.END_ARRAY; [EOL]             return _currToken; [EOL]         } [EOL]         _nodeCursor = _nodeCursor.iterateChildren(); [EOL]         _currToken = _nodeCursor.nextToken(); [EOL]         if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) { [EOL]             _startContainer = true; [EOL]         } [EOL]         return _currToken; [EOL]     } [EOL]     if (_nodeCursor == null) { [EOL]         _closed = true; [EOL]         return null; [EOL]     } [EOL]     _currToken = _nodeCursor.nextToken(); [EOL]     if (_currToken != null) { [EOL]         if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) { [EOL]             _startContainer = true; [EOL]         } [EOL]         return _currToken; [EOL]     } [EOL]     _currToken = _nodeCursor.endToken(); [EOL]     _nodeCursor = _nodeCursor.getParent(); [EOL]     return _currToken; [EOL] } <line_num>: 121,162
@Override [EOL] public JsonParser skipChildren() throws IOException, JsonParseException { [EOL]     if (_currToken == JsonToken.START_OBJECT) { [EOL]         _startContainer = false; [EOL]         _currToken = JsonToken.END_OBJECT; [EOL]     } else if (_currToken == JsonToken.START_ARRAY) { [EOL]         _startContainer = false; [EOL]         _currToken = JsonToken.END_ARRAY; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 167,178
@Override [EOL] public boolean isClosed() { [EOL]     return _closed; [EOL] } <line_num>: 180,183
@Override [EOL] public String getCurrentName() { [EOL]     return (_nodeCursor == null) ? null : _nodeCursor.getCurrentName(); [EOL] } <line_num>: 191,194
@Override [EOL] public void overrideCurrentName(String name) { [EOL]     if (_nodeCursor != null) { [EOL]         _nodeCursor.overrideCurrentName(name); [EOL]     } [EOL] } <line_num>: 196,202
@Override [EOL] public JsonStreamContext getParsingContext() { [EOL]     return _nodeCursor; [EOL] } <line_num>: 204,207
@Override [EOL] public JsonLocation getTokenLocation() { [EOL]     return JsonLocation.NA; [EOL] } <line_num>: 209,212
@Override [EOL] public JsonLocation getCurrentLocation() { [EOL]     return JsonLocation.NA; [EOL] } <line_num>: 214,217
@Override [EOL] public String getText() { [EOL]     if (_closed) { [EOL]         return null; [EOL]     } [EOL]     switch(_currToken) { [EOL]         case FIELD_NAME: [EOL]             return _nodeCursor.getCurrentName(); [EOL]         case VALUE_STRING: [EOL]             return currentNode().textValue(); [EOL]         case VALUE_NUMBER_INT: [EOL]         case VALUE_NUMBER_FLOAT: [EOL]             return String.valueOf(currentNode().numberValue()); [EOL]         case VALUE_EMBEDDED_OBJECT: [EOL]             JsonNode n = currentNode(); [EOL]             if (n != null && n.isBinary()) { [EOL]                 return n.asText(); [EOL]             } [EOL]         default: [EOL]             return (_currToken == null) ? null : _currToken.asString(); [EOL]     } [EOL] } <line_num>: 225,249
@Override [EOL] public char[] getTextCharacters() throws IOException, JsonParseException { [EOL]     return getText().toCharArray(); [EOL] } <line_num>: 251,254
@Override [EOL] public int getTextLength() throws IOException, JsonParseException { [EOL]     return getText().length(); [EOL] } <line_num>: 256,259
@Override [EOL] public int getTextOffset() throws IOException, JsonParseException { [EOL]     return 0; [EOL] } <line_num>: 261,264
@Override [EOL] public boolean hasTextCharacters() { [EOL]     return false; [EOL] } <line_num>: 266,270
@Override [EOL] public NumberType getNumberType() throws IOException, JsonParseException { [EOL]     JsonNode n = currentNumericNode(); [EOL]     return (n == null) ? null : n.numberType(); [EOL] } <line_num>: 280,284
@Override [EOL] public BigInteger getBigIntegerValue() throws IOException, JsonParseException { [EOL]     return currentNumericNode().bigIntegerValue(); [EOL] } <line_num>: 286,290
@Override [EOL] public BigDecimal getDecimalValue() throws IOException, JsonParseException { [EOL]     return currentNumericNode().decimalValue(); [EOL] } <line_num>: 292,295
@Override [EOL] public double getDoubleValue() throws IOException, JsonParseException { [EOL]     return currentNumericNode().doubleValue(); [EOL] } <line_num>: 297,300
@Override [EOL] public float getFloatValue() throws IOException, JsonParseException { [EOL]     return (float) currentNumericNode().doubleValue(); [EOL] } <line_num>: 302,305
@Override [EOL] public long getLongValue() throws IOException, JsonParseException { [EOL]     return currentNumericNode().longValue(); [EOL] } <line_num>: 307,310
@Override [EOL] public int getIntValue() throws IOException, JsonParseException { [EOL]     return currentNumericNode().intValue(); [EOL] } <line_num>: 312,315
@Override [EOL] public Number getNumberValue() throws IOException, JsonParseException { [EOL]     return currentNumericNode().numberValue(); [EOL] } <line_num>: 317,320
@Override [EOL] public Object getEmbeddedObject() { [EOL]     if (!_closed) { [EOL]         JsonNode n = currentNode(); [EOL]         if (n != null) { [EOL]             if (n.isPojo()) { [EOL]                 return ((POJONode) n).getPojo(); [EOL]             } [EOL]             if (n.isBinary()) { [EOL]                 return ((BinaryNode) n).binaryValue(); [EOL]             } [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 322,337
@Override [EOL] public byte[] getBinaryValue(Base64Variant b64variant) throws IOException, JsonParseException { [EOL]     JsonNode n = currentNode(); [EOL]     if (n != null) { [EOL]         byte[] data = n.binaryValue(); [EOL]         if (data != null) { [EOL]             return data; [EOL]         } [EOL]         if (n.isPojo()) { [EOL]             Object ob = ((POJONode) n).getPojo(); [EOL]             if (ob instanceof byte[]) { [EOL]                 return (byte[]) ob; [EOL]             } [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 345,367
@Override [EOL] public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException, JsonParseException { [EOL]     byte[] data = getBinaryValue(b64variant); [EOL]     if (data != null) { [EOL]         out.write(data, 0, data.length); [EOL]         return data.length; [EOL]     } [EOL]     return 0; [EOL] } <line_num>: 370,380
protected JsonNode currentNode() { [EOL]     if (_closed || _nodeCursor == null) { [EOL]         return null; [EOL]     } [EOL]     return _nodeCursor.currentNode(); [EOL] } <line_num>: 388,393
protected JsonNode currentNumericNode() throws JsonParseException { [EOL]     JsonNode n = currentNode(); [EOL]     if (n == null || !n.isNumber()) { [EOL]         JsonToken t = (n == null) ? null : n.asToken(); [EOL]         throw _constructError("Current token (" + t + ") not numeric, can not use numeric value accessors"); [EOL]     } [EOL]     return n; [EOL] } <line_num>: 395,404
@Override [EOL] protected void _handleEOF() throws JsonParseException { [EOL]     _throwInternal(); [EOL] } <line_num>: 406,409
