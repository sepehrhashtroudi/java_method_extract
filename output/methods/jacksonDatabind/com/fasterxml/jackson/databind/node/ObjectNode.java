public ObjectNode(JsonNodeFactory nc) { [EOL]     super(nc); [EOL] } <line_num>: 30,30
@SuppressWarnings("unchecked") [EOL] @Override [EOL] public ObjectNode deepCopy() { [EOL]     ObjectNode ret = new ObjectNode(_nodeFactory); [EOL]     for (Map.Entry<String, JsonNode> entry : _children.entrySet()) ret._children.put(entry.getKey(), entry.getValue().deepCopy()); [EOL]     return ret; [EOL] } <line_num>: 36,46
@Override [EOL] public JsonNodeType getNodeType() { [EOL]     return JsonNodeType.OBJECT; [EOL] } <line_num>: 54,58
@Override [EOL] public JsonToken asToken() { [EOL]     return JsonToken.START_OBJECT; [EOL] } <line_num>: 60,60
@Override [EOL] public int size() { [EOL]     return _children.size(); [EOL] } <line_num>: 62,65
@Override [EOL] public Iterator<JsonNode> elements() { [EOL]     return _children.values().iterator(); [EOL] } <line_num>: 67,71
@Override [EOL] public JsonNode get(int index) { [EOL]     return null; [EOL] } <line_num>: 73,74
@Override [EOL] public JsonNode get(String fieldName) { [EOL]     return _children.get(fieldName); [EOL] } <line_num>: 76,80
@Override [EOL] public Iterator<String> fieldNames() { [EOL]     return _children.keySet().iterator(); [EOL] } <line_num>: 82,86
@Override [EOL] public JsonNode path(int index) { [EOL]     return MissingNode.getInstance(); [EOL] } <line_num>: 88,92
@Override [EOL] public JsonNode path(String fieldName) { [EOL]     JsonNode n = _children.get(fieldName); [EOL]     if (n != null) { [EOL]         return n; [EOL]     } [EOL]     return MissingNode.getInstance(); [EOL] } <line_num>: 94,102
@Override [EOL] public Iterator<Map.Entry<String, JsonNode>> fields() { [EOL]     return _children.entrySet().iterator(); [EOL] } <line_num>: 108,112
@Override [EOL] public ObjectNode with(String propertyName) { [EOL]     JsonNode n = _children.get(propertyName); [EOL]     if (n != null) { [EOL]         if (n instanceof ObjectNode) { [EOL]             return (ObjectNode) n; [EOL]         } [EOL]         throw new UnsupportedOperationException("Property '" + propertyName + "' has value that is not of type ObjectNode (but " + n.getClass().getName() + ")"); [EOL]     } [EOL]     ObjectNode result = objectNode(); [EOL]     _children.put(propertyName, result); [EOL]     return result; [EOL] } <line_num>: 114,129
@Override [EOL] public ArrayNode withArray(String propertyName) { [EOL]     JsonNode n = _children.get(propertyName); [EOL]     if (n != null) { [EOL]         if (n instanceof ArrayNode) { [EOL]             return (ArrayNode) n; [EOL]         } [EOL]         throw new UnsupportedOperationException("Property '" + propertyName + "' has value that is not of type ArrayNode (but " + n.getClass().getName() + ")"); [EOL]     } [EOL]     ArrayNode result = arrayNode(); [EOL]     _children.put(propertyName, result); [EOL]     return result; [EOL] } <line_num>: 131,146
@Override [EOL] public JsonNode findValue(String fieldName) { [EOL]     for (Map.Entry<String, JsonNode> entry : _children.entrySet()) { [EOL]         if (fieldName.equals(entry.getKey())) { [EOL]             return entry.getValue(); [EOL]         } [EOL]         JsonNode value = entry.getValue().findValue(fieldName); [EOL]         if (value != null) { [EOL]             return value; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 154,167
@Override [EOL] public List<JsonNode> findValues(String fieldName, List<JsonNode> foundSoFar) { [EOL]     for (Map.Entry<String, JsonNode> entry : _children.entrySet()) { [EOL]         if (fieldName.equals(entry.getKey())) { [EOL]             if (foundSoFar == null) { [EOL]                 foundSoFar = new ArrayList<JsonNode>(); [EOL]             } [EOL]             foundSoFar.add(entry.getValue()); [EOL]         } else { [EOL]             foundSoFar = entry.getValue().findValues(fieldName, foundSoFar); [EOL]         } [EOL]     } [EOL]     return foundSoFar; [EOL] } <line_num>: 169,183
@Override [EOL] public List<String> findValuesAsText(String fieldName, List<String> foundSoFar) { [EOL]     for (Map.Entry<String, JsonNode> entry : _children.entrySet()) { [EOL]         if (fieldName.equals(entry.getKey())) { [EOL]             if (foundSoFar == null) { [EOL]                 foundSoFar = new ArrayList<String>(); [EOL]             } [EOL]             foundSoFar.add(entry.getValue().asText()); [EOL]         } else { [EOL]             foundSoFar = entry.getValue().findValuesAsText(fieldName, foundSoFar); [EOL]         } [EOL]     } [EOL]     return foundSoFar; [EOL] } <line_num>: 185,200
@Override [EOL] public ObjectNode findParent(String fieldName) { [EOL]     for (Map.Entry<String, JsonNode> entry : _children.entrySet()) { [EOL]         if (fieldName.equals(entry.getKey())) { [EOL]             return this; [EOL]         } [EOL]         JsonNode value = entry.getValue().findParent(fieldName); [EOL]         if (value != null) { [EOL]             return (ObjectNode) value; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 202,215
@Override [EOL] public List<JsonNode> findParents(String fieldName, List<JsonNode> foundSoFar) { [EOL]     for (Map.Entry<String, JsonNode> entry : _children.entrySet()) { [EOL]         if (fieldName.equals(entry.getKey())) { [EOL]             if (foundSoFar == null) { [EOL]                 foundSoFar = new ArrayList<JsonNode>(); [EOL]             } [EOL]             foundSoFar.add(this); [EOL]         } else { [EOL]             foundSoFar = entry.getValue().findParents(fieldName, foundSoFar); [EOL]         } [EOL]     } [EOL]     return foundSoFar; [EOL] } <line_num>: 217,232
@Override [EOL] public void serialize(JsonGenerator jg, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]     jg.writeStartObject(); [EOL]     for (Map.Entry<String, JsonNode> en : _children.entrySet()) { [EOL]         jg.writeFieldName(en.getKey()); [EOL]         ((BaseJsonNode) en.getValue()).serialize(jg, provider); [EOL]     } [EOL]     jg.writeEndObject(); [EOL] } <line_num>: 244,259
@Override [EOL] public void serializeWithType(JsonGenerator jg, SerializerProvider provider, TypeSerializer typeSer) throws IOException, JsonProcessingException { [EOL]     typeSer.writeTypePrefixForObject(this, jg); [EOL]     for (Map.Entry<String, JsonNode> en : _children.entrySet()) { [EOL]         jg.writeFieldName(en.getKey()); [EOL]         ((BaseJsonNode) en.getValue()).serialize(jg, provider); [EOL]     } [EOL]     typeSer.writeTypeSuffixForObject(this, jg); [EOL] } <line_num>: 261,272
public JsonNode set(String fieldName, JsonNode value) { [EOL]     if (value == null) { [EOL]         value = nullNode(); [EOL]     } [EOL]     _children.put(fieldName, value); [EOL]     return this; [EOL] } <line_num>: 296,303
public JsonNode setAll(Map<String, JsonNode> properties) { [EOL]     for (Map.Entry<String, JsonNode> en : properties.entrySet()) { [EOL]         JsonNode n = en.getValue(); [EOL]         if (n == null) { [EOL]             n = nullNode(); [EOL]         } [EOL]         _children.put(en.getKey(), n); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 315,325
public JsonNode setAll(ObjectNode other) { [EOL]     _children.putAll(other._children); [EOL]     return this; [EOL] } <line_num>: 337,341
public JsonNode replace(String fieldName, JsonNode value) { [EOL]     if (value == null) { [EOL]         value = nullNode(); [EOL]     } [EOL]     return _children.put(fieldName, value); [EOL] } <line_num>: 355,361
public JsonNode without(String fieldName) { [EOL]     _children.remove(fieldName); [EOL]     return this; [EOL] } <line_num>: 371,375
public ObjectNode without(Collection<String> fieldNames) { [EOL]     _children.keySet().removeAll(fieldNames); [EOL]     return this; [EOL] } <line_num>: 387,391
public JsonNode put(String fieldName, JsonNode value) { [EOL]     if (value == null) { [EOL]         value = nullNode(); [EOL]     } [EOL]     return _children.put(fieldName, value); [EOL] } <line_num>: 414,420
public JsonNode remove(String fieldName) { [EOL]     return _children.remove(fieldName); [EOL] } <line_num>: 429,432
public ObjectNode remove(Collection<String> fieldNames) { [EOL]     _children.keySet().removeAll(fieldNames); [EOL]     return this; [EOL] } <line_num>: 442,446
@Override [EOL] public ObjectNode removeAll() { [EOL]     _children.clear(); [EOL]     return this; [EOL] } <line_num>: 454,459
public JsonNode putAll(Map<String, JsonNode> properties) { [EOL]     return setAll(properties); [EOL] } <line_num>: 472,474
public JsonNode putAll(ObjectNode other) { [EOL]     return setAll(other); [EOL] } <line_num>: 487,489
public ObjectNode retain(Collection<String> fieldNames) { [EOL]     _children.keySet().retainAll(fieldNames); [EOL]     return this; [EOL] } <line_num>: 499,503
public ObjectNode retain(String... fieldNames) { [EOL]     return retain(Arrays.asList(fieldNames)); [EOL] } <line_num>: 513,515
public ArrayNode putArray(String fieldName) { [EOL]     ArrayNode n = arrayNode(); [EOL]     _children.put(fieldName, n); [EOL]     return n; [EOL] } <line_num>: 534,539
public ObjectNode putObject(String fieldName) { [EOL]     ObjectNode n = objectNode(); [EOL]     _children.put(fieldName, n); [EOL]     return n; [EOL] } <line_num>: 552,557
public ObjectNode putPOJO(String fieldName, Object pojo) { [EOL]     _children.put(fieldName, POJONode(pojo)); [EOL]     return this; [EOL] } <line_num>: 562,565
public ObjectNode putNull(String fieldName) { [EOL]     _children.put(fieldName, nullNode()); [EOL]     return this; [EOL] } <line_num>: 570,574
public ObjectNode put(String fieldName, short v) { [EOL]     _children.put(fieldName, numberNode(v)); [EOL]     return this; [EOL] } <line_num>: 581,584
public ObjectNode put(String fieldName, Short value) { [EOL]     if (value == null) { [EOL]         _children.put(fieldName, nullNode()); [EOL]     } else { [EOL]         _children.put(fieldName, numberNode(value.shortValue())); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 592,599
public ObjectNode put(String fieldName, int v) { [EOL]     _children.put(fieldName, numberNode(v)); [EOL]     return this; [EOL] } <line_num>: 606,609
public ObjectNode put(String fieldName, Integer value) { [EOL]     if (value == null) { [EOL]         _children.put(fieldName, nullNode()); [EOL]     } else { [EOL]         _children.put(fieldName, numberNode(value.intValue())); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 617,624
public ObjectNode put(String fieldName, long v) { [EOL]     _children.put(fieldName, numberNode(v)); [EOL]     return this; [EOL] } <line_num>: 631,634
public ObjectNode put(String fieldName, Long value) { [EOL]     if (value == null) { [EOL]         _children.put(fieldName, nullNode()); [EOL]     } else { [EOL]         _children.put(fieldName, numberNode(value.longValue())); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 642,649
public ObjectNode put(String fieldName, float v) { [EOL]     _children.put(fieldName, numberNode(v)); [EOL]     return this; [EOL] } <line_num>: 656,659
public ObjectNode put(String fieldName, Float value) { [EOL]     if (value == null) { [EOL]         _children.put(fieldName, nullNode()); [EOL]     } else { [EOL]         _children.put(fieldName, numberNode(value.floatValue())); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 667,674
public ObjectNode put(String fieldName, double v) { [EOL]     _children.put(fieldName, numberNode(v)); [EOL]     return this; [EOL] } <line_num>: 681,684
public ObjectNode put(String fieldName, Double value) { [EOL]     if (value == null) { [EOL]         _children.put(fieldName, nullNode()); [EOL]     } else { [EOL]         _children.put(fieldName, numberNode(value.doubleValue())); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 692,699
public ObjectNode put(String fieldName, BigDecimal v) { [EOL]     if (v == null) { [EOL]         putNull(fieldName); [EOL]     } else { [EOL]         _children.put(fieldName, numberNode(v)); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 706,713
public ObjectNode put(String fieldName, String v) { [EOL]     if (v == null) { [EOL]         putNull(fieldName); [EOL]     } else { [EOL]         _children.put(fieldName, textNode(v)); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 720,727
public ObjectNode put(String fieldName, boolean v) { [EOL]     _children.put(fieldName, booleanNode(v)); [EOL]     return this; [EOL] } <line_num>: 734,737
public ObjectNode put(String fieldName, Boolean value) { [EOL]     if (value == null) { [EOL]         _children.put(fieldName, nullNode()); [EOL]     } else { [EOL]         _children.put(fieldName, booleanNode(value.booleanValue())); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 745,752
public ObjectNode put(String fieldName, byte[] v) { [EOL]     if (v == null) { [EOL]         _children.put(fieldName, nullNode()); [EOL]     } else { [EOL]         _children.put(fieldName, binaryNode(v)); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 759,766
@Override [EOL] public boolean equals(Object o) { [EOL]     if (o == this) [EOL]         return true; [EOL]     if (o == null) [EOL]         return false; [EOL]     if (getClass() != o.getClass()) { [EOL]         return false; [EOL]     } [EOL]     return _children.equals(((ObjectNode) o)._children); [EOL] } <line_num>: 774,785
@Override [EOL] public int hashCode() { [EOL]     return _children.hashCode(); [EOL] } <line_num>: 787,791
@Override [EOL] public String toString() { [EOL]     StringBuilder sb = new StringBuilder(32 + (size() << 4)); [EOL]     sb.append("{"); [EOL]     int count = 0; [EOL]     for (Map.Entry<String, JsonNode> en : _children.entrySet()) { [EOL]         if (count > 0) { [EOL]             sb.append(","); [EOL]         } [EOL]         ++count; [EOL]         TextNode.appendQuoted(sb, en.getKey()); [EOL]         sb.append(':'); [EOL]         sb.append(en.getValue().toString()); [EOL]     } [EOL]     sb.append("}"); [EOL]     return sb.toString(); [EOL] } <line_num>: 793,810
