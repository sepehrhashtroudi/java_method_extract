public Std() { [EOL]     this(new HashMap<String, Object>()); [EOL] } <line_num>: 47,49
public Std(Map<String, Object> values) { [EOL]     _values = values; [EOL] } <line_num>: 51,53
public abstract Object findInjectableValue(Object valueId, DeserializationContext ctxt, BeanProperty forProperty, Object beanInstance); <line_num>: 25,27
public Std addValue(String key, Object value) { [EOL]     _values.put(key, value); [EOL]     return this; [EOL] } <line_num>: 55,59
public Std addValue(Class<?> classKey, Object value) { [EOL]     _values.put(classKey.getName(), value); [EOL]     return this; [EOL] } <line_num>: 61,65
@Override [EOL] public Object findInjectableValue(Object valueId, DeserializationContext ctxt, BeanProperty forProperty, Object beanInstance) { [EOL]     if (!(valueId instanceof String)) { [EOL]         String type = (valueId == null) ? "[null]" : valueId.getClass().getName(); [EOL]         throw new IllegalArgumentException("Unrecognized inject value id type (" + type + "), expecting String"); [EOL]     } [EOL]     String key = (String) valueId; [EOL]     Object ob = _values.get(key); [EOL]     if (ob == null && !_values.containsKey(key)) { [EOL]         throw new IllegalArgumentException("No injectable id with value '" + key + "' found (for property '" + forProperty.getName() + "')"); [EOL]     } [EOL]     return ob; [EOL] } <line_num>: 67,83
