protected EnumResolver(Class<T> enumClass, T[] enums, HashMap<String, T> map) { [EOL]     _enumClass = enumClass; [EOL]     _enums = enums; [EOL]     _enumsById = map; [EOL] } <line_num>: 23,28
public static <ET extends Enum<ET>> EnumResolver<ET> constructFor(Class<ET> enumCls, AnnotationIntrospector ai) { [EOL]     ET[] enumValues = enumCls.getEnumConstants(); [EOL]     if (enumValues == null) { [EOL]         throw new IllegalArgumentException("No enum constants for class " + enumCls.getName()); [EOL]     } [EOL]     HashMap<String, ET> map = new HashMap<String, ET>(); [EOL]     for (ET e : enumValues) { [EOL]         map.put(ai.findEnumValue(e), e); [EOL]     } [EOL]     return new EnumResolver<ET>(enumCls, enumValues, map); [EOL] } <line_num>: 34,45
public static <ET extends Enum<ET>> EnumResolver<ET> constructUsingToString(Class<ET> enumCls) { [EOL]     ET[] enumValues = enumCls.getEnumConstants(); [EOL]     HashMap<String, ET> map = new HashMap<String, ET>(); [EOL]     for (int i = enumValues.length; --i >= 0; ) { [EOL]         ET e = enumValues[i]; [EOL]         map.put(e.toString(), e); [EOL]     } [EOL]     return new EnumResolver<ET>(enumCls, enumValues, map); [EOL] } <line_num>: 51,61
public static <ET extends Enum<ET>> EnumResolver<ET> constructUsingMethod(Class<ET> enumCls, Method accessor) { [EOL]     ET[] enumValues = enumCls.getEnumConstants(); [EOL]     HashMap<String, ET> map = new HashMap<String, ET>(); [EOL]     for (int i = enumValues.length; --i >= 0; ) { [EOL]         ET en = enumValues[i]; [EOL]         try { [EOL]             Object o = accessor.invoke(en); [EOL]             if (o != null) { [EOL]                 map.put(o.toString(), en); [EOL]             } [EOL]         } catch (Exception e) { [EOL]             throw new IllegalArgumentException("Failed to access @JsonValue of Enum value " + en + ": " + e.getMessage()); [EOL]         } [EOL]     } [EOL]     return new EnumResolver<ET>(enumCls, enumValues, map); [EOL] } <line_num>: 63,81
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public static EnumResolver<?> constructUnsafe(Class<?> rawEnumCls, AnnotationIntrospector ai) { [EOL]     Class<Enum> enumCls = (Class<Enum>) rawEnumCls; [EOL]     return constructFor(enumCls, ai); [EOL] } <line_num>: 87,95
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public static EnumResolver<?> constructUnsafeUsingToString(Class<?> rawEnumCls) { [EOL]     Class<Enum> enumCls = (Class<Enum>) rawEnumCls; [EOL]     return constructUsingToString(enumCls); [EOL] } <line_num>: 101,107
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public static EnumResolver<?> constructUnsafeUsingMethod(Class<?> rawEnumCls, Method accessor) { [EOL]     Class<Enum> enumCls = (Class<Enum>) rawEnumCls; [EOL]     return constructUsingMethod(enumCls, accessor); [EOL] } <line_num>: 113,119
public T findEnum(String key) { [EOL]     return _enumsById.get(key); [EOL] } <line_num>: 121,124
public T getEnum(int index) { [EOL]     if (index < 0 || index >= _enums.length) { [EOL]         return null; [EOL]     } [EOL]     return _enums[index]; [EOL] } <line_num>: 126,132
public Class<T> getEnumClass() { [EOL]     return _enumClass; [EOL] } <line_num>: 134,134
public int lastValidIndex() { [EOL]     return _enums.length - 1; [EOL] } <line_num>: 136,136
