protected PrimitiveArrayBuilder() { [EOL] } <line_num>: 45,45
public Node(T data, int dataLen) { [EOL]     _data = data; [EOL]     _dataLength = dataLen; [EOL] } <line_num>: 155,159
public T resetAndStart() { [EOL]     _reset(); [EOL]     return (_freeBuffer == null) ? _constructArray(INITIAL_CHUNK_SIZE) : _freeBuffer; [EOL] } <line_num>: 53,58
public final T appendCompletedChunk(T fullChunk, int fullChunkLength) { [EOL]     Node<T> next = new Node<T>(fullChunk, fullChunkLength); [EOL]     if (_bufferHead == null) { [EOL]         _bufferHead = _bufferTail = next; [EOL]     } else { [EOL]         _bufferTail.linkNext(next); [EOL]         _bufferTail = next; [EOL]     } [EOL]     _bufferedEntryCount += fullChunkLength; [EOL]     int nextLen = fullChunkLength; [EOL]     if (nextLen < SMALL_CHUNK_SIZE) { [EOL]         nextLen += nextLen; [EOL]     } else { [EOL]         nextLen += (nextLen >> 2); [EOL]     } [EOL]     return _constructArray(nextLen); [EOL] } <line_num>: 63,81
public T completeAndClearBuffer(T lastChunk, int lastChunkEntries) { [EOL]     int totalSize = lastChunkEntries + _bufferedEntryCount; [EOL]     T resultArray = _constructArray(totalSize); [EOL]     int ptr = 0; [EOL]     for (Node<T> n = _bufferHead; n != null; n = n.next()) { [EOL]         ptr = n.copyData(resultArray, ptr); [EOL]     } [EOL]     System.arraycopy(lastChunk, 0, resultArray, ptr, lastChunkEntries); [EOL]     ptr += lastChunkEntries; [EOL]     if (ptr != totalSize) { [EOL]         throw new IllegalStateException("Should have gotten " + totalSize + " entries, got " + ptr); [EOL]     } [EOL]     return resultArray; [EOL] } <line_num>: 83,101
protected abstract T _constructArray(int len); <line_num>: 109,109
protected void _reset() { [EOL]     if (_bufferTail != null) { [EOL]         _freeBuffer = _bufferTail.getData(); [EOL]     } [EOL]     _bufferHead = _bufferTail = null; [EOL]     _bufferedEntryCount = 0; [EOL] } <line_num>: 117,126
public T getData() { [EOL]     return _data; [EOL] } <line_num>: 161,161
public int copyData(T dst, int ptr) { [EOL]     System.arraycopy(_data, 0, dst, ptr, _dataLength); [EOL]     ptr += _dataLength; [EOL]     return ptr; [EOL] } <line_num>: 163,168
public Node<T> next() { [EOL]     return _next; [EOL] } <line_num>: 170,170
public void linkNext(Node<T> next) { [EOL]     if (_next != null) { [EOL]         throw new IllegalStateException(); [EOL]     } [EOL]     _next = next; [EOL] } <line_num>: 172,178
