public ObjectBuffer() { [EOL] } <line_num>: 59,59
public Node(Object[] data) { [EOL]     _data = data; [EOL] } <line_num>: 236,238
public Object[] resetAndStart() { [EOL]     _reset(); [EOL]     if (_freeBuffer == null) { [EOL]         return new Object[INITIAL_CHUNK_SIZE]; [EOL]     } [EOL]     return _freeBuffer; [EOL] } <line_num>: 71,78
public Object[] appendCompletedChunk(Object[] fullChunk) { [EOL]     Node next = new Node(fullChunk); [EOL]     if (_bufferHead == null) { [EOL]         _bufferHead = _bufferTail = next; [EOL]     } else { [EOL]         _bufferTail.linkNext(next); [EOL]         _bufferTail = next; [EOL]     } [EOL]     int len = fullChunk.length; [EOL]     _bufferedEntryCount += len; [EOL]     if (len < SMALL_CHUNK_SIZE) { [EOL]         len += len; [EOL]     } else { [EOL]         len += (len >> 2); [EOL]     } [EOL]     return new Object[len]; [EOL] } <line_num>: 94,112
public Object[] completeAndClearBuffer(Object[] lastChunk, int lastChunkEntries) { [EOL]     int totalSize = lastChunkEntries + _bufferedEntryCount; [EOL]     Object[] result = new Object[totalSize]; [EOL]     _copyTo(result, totalSize, lastChunk, lastChunkEntries); [EOL]     return result; [EOL] } <line_num>: 124,130
public <T> T[] completeAndClearBuffer(Object[] lastChunk, int lastChunkEntries, Class<T> componentType) { [EOL]     int totalSize = lastChunkEntries + _bufferedEntryCount; [EOL]     @SuppressWarnings("unchecked") [EOL]     T[] result = (T[]) Array.newInstance(componentType, totalSize); [EOL]     _copyTo(result, totalSize, lastChunk, lastChunkEntries); [EOL]     _reset(); [EOL]     return result; [EOL] } <line_num>: 140,148
public void completeAndClearBuffer(Object[] lastChunk, int lastChunkEntries, List<Object> resultList) { [EOL]     for (Node n = _bufferHead; n != null; n = n.next()) { [EOL]         Object[] curr = n.getData(); [EOL]         for (int i = 0, len = curr.length; i < len; ++i) { [EOL]             resultList.add(curr[i]); [EOL]         } [EOL]     } [EOL]     for (int i = 0; i < lastChunkEntries; ++i) { [EOL]         resultList.add(lastChunk[i]); [EOL]     } [EOL] } <line_num>: 150,162
public int initialCapacity() { [EOL]     return (_freeBuffer == null) ? 0 : _freeBuffer.length; [EOL] } <line_num>: 170,173
public int bufferedSize() { [EOL]     return _bufferedEntryCount; [EOL] } <line_num>: 179,179
protected void _reset() { [EOL]     if (_bufferTail != null) { [EOL]         _freeBuffer = _bufferTail.getData(); [EOL]     } [EOL]     _bufferHead = _bufferTail = null; [EOL]     _bufferedEntryCount = 0; [EOL] } <line_num>: 187,196
protected final void _copyTo(Object resultArray, int totalSize, Object[] lastChunk, int lastChunkEntries) { [EOL]     int ptr = 0; [EOL]     for (Node n = _bufferHead; n != null; n = n.next()) { [EOL]         Object[] curr = n.getData(); [EOL]         int len = curr.length; [EOL]         System.arraycopy(curr, 0, resultArray, ptr, len); [EOL]         ptr += len; [EOL]     } [EOL]     System.arraycopy(lastChunk, 0, resultArray, ptr, lastChunkEntries); [EOL]     ptr += lastChunkEntries; [EOL]     if (ptr != totalSize) { [EOL]         throw new IllegalStateException("Should have gotten " + totalSize + " entries, got " + ptr); [EOL]     } [EOL] } <line_num>: 198,216
public Object[] getData() { [EOL]     return _data; [EOL] } <line_num>: 240,240
public Node next() { [EOL]     return _next; [EOL] } <line_num>: 242,242
public void linkNext(Node next) { [EOL]     if (_next != null) { [EOL]         throw new IllegalStateException(); [EOL]     } [EOL]     _next = next; [EOL] } <line_num>: 244,250
