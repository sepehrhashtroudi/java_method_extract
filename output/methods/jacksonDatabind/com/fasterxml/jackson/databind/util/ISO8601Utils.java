public static TimeZone timeZoneGMT() { [EOL]     return TIMEZONE_GMT; [EOL] } <line_num>: 30,32
public static String format(Date date) { [EOL]     return format(date, false, TIMEZONE_GMT); [EOL] } <line_num>: 46,48
public static String format(Date date, boolean millis) { [EOL]     return format(date, millis, TIMEZONE_GMT); [EOL] } <line_num>: 57,59
public static String format(Date date, boolean millis, TimeZone tz) { [EOL]     Calendar calendar = new GregorianCalendar(tz, Locale.US); [EOL]     calendar.setTime(date); [EOL]     int capacity = "yyyy-MM-ddThh:mm:ss".length(); [EOL]     capacity += millis ? ".sss".length() : 0; [EOL]     capacity += tz.getRawOffset() == 0 ? "Z".length() : "+hh:mm".length(); [EOL]     StringBuilder formatted = new StringBuilder(capacity); [EOL]     padInt(formatted, calendar.get(Calendar.YEAR), "yyyy".length()); [EOL]     formatted.append('-'); [EOL]     padInt(formatted, calendar.get(Calendar.MONTH) + 1, "MM".length()); [EOL]     formatted.append('-'); [EOL]     padInt(formatted, calendar.get(Calendar.DAY_OF_MONTH), "dd".length()); [EOL]     formatted.append('T'); [EOL]     padInt(formatted, calendar.get(Calendar.HOUR_OF_DAY), "hh".length()); [EOL]     formatted.append(':'); [EOL]     padInt(formatted, calendar.get(Calendar.MINUTE), "mm".length()); [EOL]     formatted.append(':'); [EOL]     padInt(formatted, calendar.get(Calendar.SECOND), "ss".length()); [EOL]     if (millis) { [EOL]         formatted.append('.'); [EOL]         padInt(formatted, calendar.get(Calendar.MILLISECOND), "sss".length()); [EOL]     } [EOL]     int offset = tz.getOffset(calendar.getTimeInMillis()); [EOL]     if (offset != 0) { [EOL]         int hours = Math.abs((offset / (60 * 1000)) / 60); [EOL]         int minutes = Math.abs((offset / (60 * 1000)) % 60); [EOL]         formatted.append(offset < 0 ? '-' : '+'); [EOL]         padInt(formatted, hours, "hh".length()); [EOL]         formatted.append(':'); [EOL]         padInt(formatted, minutes, "mm".length()); [EOL]     } else { [EOL]         formatted.append('Z'); [EOL]     } [EOL]     return formatted.toString(); [EOL] } <line_num>: 69,108
public static Date parse(String date) { [EOL]     try { [EOL]         int offset = 0; [EOL]         int year = parseInt(date, offset, offset += 4); [EOL]         checkOffset(date, offset, '-'); [EOL]         int month = parseInt(date, offset += 1, offset += 2); [EOL]         checkOffset(date, offset, '-'); [EOL]         int day = parseInt(date, offset += 1, offset += 2); [EOL]         checkOffset(date, offset, 'T'); [EOL]         int hour = parseInt(date, offset += 1, offset += 2); [EOL]         checkOffset(date, offset, ':'); [EOL]         int minutes = parseInt(date, offset += 1, offset += 2); [EOL]         checkOffset(date, offset, ':'); [EOL]         int seconds = parseInt(date, offset += 1, offset += 2); [EOL]         int milliseconds = 0; [EOL]         if (date.charAt(offset) == '.') { [EOL]             checkOffset(date, offset, '.'); [EOL]             milliseconds = parseInt(date, offset += 1, offset += 3); [EOL]         } [EOL]         String timezoneId; [EOL]         char timezoneIndicator = date.charAt(offset); [EOL]         if (timezoneIndicator == '+' || timezoneIndicator == '-') { [EOL]             timezoneId = GMT_ID + date.substring(offset); [EOL]         } else if (timezoneIndicator == 'Z') { [EOL]             timezoneId = GMT_ID; [EOL]         } else { [EOL]             throw new IndexOutOfBoundsException("Invalid time zone indicator " + timezoneIndicator); [EOL]         } [EOL]         TimeZone timezone = TimeZone.getTimeZone(timezoneId); [EOL]         if (!timezone.getID().equals(timezoneId)) { [EOL]             throw new IndexOutOfBoundsException(); [EOL]         } [EOL]         Calendar calendar = new GregorianCalendar(timezone); [EOL]         calendar.setLenient(false); [EOL]         calendar.set(Calendar.YEAR, year); [EOL]         calendar.set(Calendar.MONTH, month - 1); [EOL]         calendar.set(Calendar.DAY_OF_MONTH, day); [EOL]         calendar.set(Calendar.HOUR_OF_DAY, hour); [EOL]         calendar.set(Calendar.MINUTE, minutes); [EOL]         calendar.set(Calendar.SECOND, seconds); [EOL]         calendar.set(Calendar.MILLISECOND, milliseconds); [EOL]         return calendar.getTime(); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         throw new IllegalArgumentException("Failed to parse date " + date, e); [EOL]     } catch (NumberFormatException e) { [EOL]         throw new IllegalArgumentException("Failed to parse date " + date, e); [EOL]     } catch (IllegalArgumentException e) { [EOL]         throw new IllegalArgumentException("Failed to parse date " + date, e); [EOL]     } [EOL] } <line_num>: 123,187
private static void checkOffset(String value, int offset, char expected) throws IndexOutOfBoundsException { [EOL]     char found = value.charAt(offset); [EOL]     if (found != expected) { [EOL]         throw new IndexOutOfBoundsException("Expected '" + expected + "' character but found '" + found + "'"); [EOL]     } [EOL] } <line_num>: 197,202
private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException { [EOL]     if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) { [EOL]         throw new NumberFormatException(value); [EOL]     } [EOL]     int i = beginIndex; [EOL]     int result = 0; [EOL]     int digit; [EOL]     if (i < endIndex) { [EOL]         digit = Character.digit(value.charAt(i++), 10); [EOL]         if (digit < 0) { [EOL]             throw new NumberFormatException("Invalid number: " + value); [EOL]         } [EOL]         result = -digit; [EOL]     } [EOL]     while (i < endIndex) { [EOL]         digit = Character.digit(value.charAt(i++), 10); [EOL]         if (digit < 0) { [EOL]             throw new NumberFormatException("Invalid number: " + value); [EOL]         } [EOL]         result *= 10; [EOL]         result -= digit; [EOL]     } [EOL]     return -result; [EOL] } <line_num>: 213,237
private static void padInt(StringBuilder buffer, int value, int length) { [EOL]     String strValue = Integer.toString(value); [EOL]     for (int i = length - strValue.length(); i > 0; i--) { [EOL]         buffer.append('0'); [EOL]     } [EOL]     buffer.append(strValue); [EOL] } <line_num>: 246,252
