public SourceMapConsumerV2Test() { [EOL] } <line_num>: 27,28
public SourceMapConsumerV2Test(String name) { [EOL]     super(name); [EOL] } <line_num>: 30,32
public void testEmptyMap() throws Exception { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append("{\n"); [EOL]     sb.append("\"version\": 2,\n"); [EOL]     sb.append("\"file\": \"somefile.js\",\n"); [EOL]     sb.append("\"lineCount\": 0,\n"); [EOL]     sb.append("\"lineMaps\": [],\n"); [EOL]     sb.append("\"sources\": [],\n"); [EOL]     sb.append("\"mappings\": []\n"); [EOL]     sb.append("}\n"); [EOL]     SourceMapConsumerV2 sourceMap = new SourceMapConsumerV2(); [EOL]     sourceMap.parse(sb.toString()); [EOL] } <line_num>: 34,47
public void testGetMappingForLine() throws Exception { [EOL]     String mapData = "{\n" + "\"version\":2,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":1,\n" + "\"lineMaps\":" + "[\"cAEBABIBA/ICA+ADICA/ICA+IDA9AEYBMBA5\"],\n" + "\"sources\":[\"testcode\"],\n" + "\"mappings\":[[0,1,9,\"f\"],\n" + "[0,1,9,\"f\"],\n" + "[0,1,10],\n" + "[0,1,11,\"foo\"],\n" + "[0,1,16,\"bar\"],\n" + "[0,1,21],\n" + "[0,1,23],\n" + "[0,1,23,\"foo\"],\n" + "[0,1,29,\"foo\"],\n" + "[0,1,35,\"bar\"],\n" + "[0,1,41],\n" + "[0,1,44],\n" + "[0,1,51,\"foo\"],\n" + "]\n" + "}\n"; [EOL]     SourceMapConsumerV2 sourceMap = new SourceMapConsumerV2(); [EOL]     sourceMap.parse(mapData); [EOL]     OriginalMapping mapping = sourceMap.getMappingForLine(1, 10); [EOL]     assertNotNull(mapping); [EOL]     assertEquals("testcode", mapping.getOriginalFile()); [EOL]     assertEquals(1, mapping.getLineNumber()); [EOL]     assertEquals(9, mapping.getColumnPosition()); [EOL]     assertEquals("f", mapping.getIdentifier()); [EOL]     mapping = sourceMap.getMappingForLine(1, 40); [EOL]     assertNotNull(mapping); [EOL]     assertEquals("testcode", mapping.getOriginalFile()); [EOL]     assertEquals(1, mapping.getLineNumber()); [EOL]     assertEquals(44, mapping.getColumnPosition()); [EOL]     assertEquals("", mapping.getIdentifier()); [EOL]     mapping = sourceMap.getMappingForLine(1, 42); [EOL]     assertNotNull(mapping); [EOL]     assertEquals("testcode", mapping.getOriginalFile()); [EOL]     assertEquals(1, mapping.getLineNumber()); [EOL]     assertEquals(51, mapping.getColumnPosition()); [EOL]     assertEquals("foo", mapping.getIdentifier()); [EOL]     assertNull(sourceMap.getMappingForLine(Integer.MAX_VALUE, 1)); [EOL]     assertNull(sourceMap.getMappingForLine(1, Integer.MAX_VALUE)); [EOL] } <line_num>: 49,103
public void testGetMappingForLineWithNameIndex() throws Exception { [EOL]     String mapData = "{\n" + "\"version\":2,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":1,\n" + "\"lineMaps\":" + "[\"cAEBABIBA/ICA+ADICA/ICA+IDA9AEYBMBA5\"],\n" + "\"sources\":[\"testcode\"],\n" + "\"names\": [\"f\"],\n" + "\"mappings\":[[0,1,9,0],\n" + "[0,1,9,0]\n" + "]\n" + "}\n"; [EOL]     SourceMapConsumerV2 sourceMap = new SourceMapConsumerV2(); [EOL]     sourceMap.parse(mapData); [EOL]     OriginalMapping mapping = sourceMap.getMappingForLine(1, 10); [EOL]     assertNotNull(mapping); [EOL]     assertEquals("testcode", mapping.getOriginalFile()); [EOL]     assertEquals(1, mapping.getLineNumber()); [EOL]     assertEquals(9, mapping.getColumnPosition()); [EOL]     assertEquals("f", mapping.getIdentifier()); [EOL] } <line_num>: 105,130
public void testInvalidJSONFailure() throws Exception { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append("notjson"); [EOL]     assertExceptionStartsWith("JSON parse exception: org.json.JSONException: " + "A JSONObject text must begin " + "with '{' at character 1", sb); [EOL] } <line_num>: 132,139
public void testUnknownVersion() throws Exception { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append("{\"version\": 3}"); [EOL]     assertException("Unknown version: 3", sb); [EOL] } <line_num>: 141,145
public void testMissingFile() throws Exception { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append("{\"version\": 2, \"file\": \"\"}"); [EOL]     assertException("File entry is missing or empty", sb); [EOL] } <line_num>: 147,151
private void assertException(String exception, StringBuilder sb) { [EOL]     boolean exceptionRaised = false; [EOL]     try { [EOL]         SourceMapConsumerV2 sourceMap = new SourceMapConsumerV2(); [EOL]         sourceMap.parse(sb.toString()); [EOL]     } catch (SourceMapParseException pe) { [EOL]         assertEquals(exception, pe.getMessage()); [EOL]         exceptionRaised = true; [EOL]     } [EOL]     assertTrue(exceptionRaised); [EOL] } <line_num>: 153,166
private void assertExceptionStartsWith(String exception, StringBuilder sb) { [EOL]     boolean exceptionRaised = false; [EOL]     try { [EOL]         SourceMapConsumerV2 sourceMap = new SourceMapConsumerV2(); [EOL]         sourceMap.parse(sb.toString()); [EOL]     } catch (SourceMapParseException pe) { [EOL]         assertTrue("expected <" + exception + "> but was <" + pe.getMessage() + ">", pe.getMessage().startsWith(exception)); [EOL]         exceptionRaised = true; [EOL]     } [EOL]     assertTrue(exceptionRaised); [EOL] } <line_num>: 168,183
