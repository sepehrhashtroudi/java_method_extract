public SourceMapGeneratorV3Test() { [EOL] } <line_num>: 35,36
@Override [EOL] protected SourceMapConsumer getSourceMapConsumer() { [EOL]     return new SourceMapConsumerV3(); [EOL] } <line_num>: 38,41
@Override [EOL] protected Format getSourceMapFormat() { [EOL]     return SourceMap.Format.V3; [EOL] } <line_num>: 43,46
public void testBasicMapping1() throws Exception { [EOL]     compileAndCheck("function __BASIC__() { }"); [EOL] } <line_num>: 48,50
public void testBasicMappingGoldenOutput() throws Exception { [EOL]     checkSourceMap("function __BASIC__() { }", "{\n" + "\"version\":3,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":1,\n" + "\"mappings\":\"AAAAA,QAASA,UAAS,EAAG;\",\n" + "\"sources\":[\"testcode\"],\n" + "\"names\":[\"__BASIC__\"]\n" + "}\n"); [EOL] } <line_num>: 52,64
public void testBasicMapping2() throws Exception { [EOL]     compileAndCheck("function __BASIC__(__PARAM1__) {}"); [EOL] } <line_num>: 66,68
public void testLiteralMappings() throws Exception { [EOL]     compileAndCheck("function __BASIC__(__PARAM1__, __PARAM2__) { " + "var __VAR__ = '__STR__'; }"); [EOL] } <line_num>: 70,73
public void testLiteralMappingsGoldenOutput() throws Exception { [EOL]     checkSourceMap("function __BASIC__(__PARAM1__, __PARAM2__) { " + "var __VAR__ = '__STR__'; }", "{\n" + "\"version\":3,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":1,\n" + "\"mappings\":\"AAAAA,QAASA,UAAS,CAACC,UAAD,CAAaC,UAAb," + "CAAyB,CAAE,IAAIC,QAAU,SAAhB;\",\n" + "\"sources\":[\"testcode\"],\n" + "\"names\":[\"__BASIC__\",\"__PARAM1__\",\"__PARAM2__\"," + "\"__VAR__\"]\n" + "}\n"); [EOL] } <line_num>: 75,90
public void testMultilineMapping() throws Exception { [EOL]     compileAndCheck("function __BASIC__(__PARAM1__, __PARAM2__) {\n" + "var __VAR__ = '__STR__';\n" + "var __ANO__ = \"__STR2__\";\n" + "}"); [EOL] } <line_num>: 92,97
public void testMultilineMapping2() throws Exception { [EOL]     compileAndCheck("function __BASIC__(__PARAM1__, __PARAM2__) {\n" + "var __VAR__ = 1;\n" + "var __ANO__ = 2;\n" + "}"); [EOL] } <line_num>: 99,104
public void testMultiFunctionMapping() throws Exception { [EOL]     compileAndCheck("function __BASIC__(__PARAM1__, __PARAM2__) {\n" + "var __VAR__ = '__STR__';\n" + "var __ANO__ = \"__STR2__\";\n" + "}\n" + "function __BASIC2__(__PARAM3__, __PARAM4__) {\n" + "var __VAR2__ = '__STR2__';\n" + "var __ANO2__ = \"__STR3__\";\n" + "}\n"); [EOL] } <line_num>: 106,116
public void testGoldenOutput0() throws Exception { [EOL]     checkSourceMap("", "{\n" + "\"version\":3,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":1,\n" + "\"mappings\":\";\",\n" + "\"sources\":[],\n" + "\"names\":[]\n" + "}\n"); [EOL] } <line_num>: 118,130
public void testGoldenOutput0a() throws Exception { [EOL]     checkSourceMap("a;", "{\n" + "\"version\":3,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":1,\n" + "\"mappings\":\"AAAAA;\",\n" + "\"sources\":[\"testcode\"],\n" + "\"names\":[\"a\"]\n" + "}\n"); [EOL] } <line_num>: 132,144
public void testGoldenOutput1() throws Exception { [EOL]     detailLevel = SourceMap.DetailLevel.ALL; [EOL]     checkSourceMap("function f(foo, bar) { foo = foo + bar + 2; return foo; }", "{\n" + "\"version\":3,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":1,\n" + "\"mappings\":\"AAAAA,QAASA,EAAC,CAACC,GAAD,CAAMC,GAAN," + "CAAW,CAAED,GAAA,CAAMA,GAAN,CAAYC,GAAZ,CAAkB,CAAG," + "OAAOD,IAA9B;\",\n" + "\"sources\":[\"testcode\"],\n" + "\"names\":[\"f\",\"foo\",\"bar\"]\n" + "}\n"); [EOL]     detailLevel = SourceMap.DetailLevel.SYMBOLS; [EOL]     checkSourceMap("function f(foo, bar) { foo = foo + bar + 2; return foo; }", "{\n" + "\"version\":3,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":1,\n" + "\"mappings\":\"AAAAA,QAASA,EAATA,CAAWC,GAAXD,CAAgBE," + "GAAhBF,EAAuBC,GAAvBD,CAA6BC,GAA7BD,CAAmCE,GAAnCF," + "SAAmDC,IAAnDD;\",\n" + "\"sources\":[\"testcode\"],\n" + "\"names\":[\"f\",\"foo\",\"bar\"]\n" + "}\n"); [EOL] } <line_num>: 146,176
public void testGoldenOutput2() throws Exception { [EOL]     checkSourceMap("function f(foo, bar) {\r\n\n\n\nfoo = foo + bar + foo;" + "\nreturn foo;\n}", "{\n" + "\"version\":3,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":1,\n" + "\"mappings\":\"AAAAA,QAASA,EAAC,CAACC,GAAD,CAAMC,GAAN," + "CAAW,CAIrBD,GAAA,CAAMA,GAAN,CAAYC,GAAZ,CAAkBD," + "GAClB,OAAOA,IALc;\",\n" + "\"sources\":[\"testcode\"],\n" + "\"names\":[\"f\",\"foo\",\"bar\"]\n" + "}\n"); [EOL] } <line_num>: 178,192
public void testGoldenOutput3() throws Exception { [EOL]     checkSourceMap("c:\\myfile.js", "foo;", "{\n" + "\"version\":3,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":1,\n" + "\"mappings\":\"AAAAA;\",\n" + "\"sources\":[\"c:\\\\myfile.js\"],\n" + "\"names\":[\"foo\"]\n" + "}\n"); [EOL] } <line_num>: 194,206
public void testGoldenOutput4() throws Exception { [EOL]     checkSourceMap("c:\\myfile.js", "foo;   boo;   goo;", "{\n" + "\"version\":3,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":1,\n" + "\"mappings\":\"AAAAA,GAAOC,IAAOC;\",\n" + "\"sources\":[\"c:\\\\myfile.js\"],\n" + "\"names\":[\"foo\",\"boo\",\"goo\"]\n" + "}\n"); [EOL] } <line_num>: 208,220
public void testGoldenOutput5() throws Exception { [EOL]     detailLevel = SourceMap.DetailLevel.ALL; [EOL]     checkSourceMap("c:\\myfile.js", "/** @preserve\n" + " * this is a test.\n" + " */\n" + "var foo=a + 'this is a really long line that will force the" + " mapping to span multiple linesc + d + e;", "{\n" + "\"version\":3,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":6,\n" + "\"mappings\":\"A;;;;AAGA,IAAIA,IAAIC,CAAJD,CAAQ,mxCAARA;AAA8xCE," + "CAA9xCF,CAAkyCG,CAAlyCH,CAAsyCI;\",\n" + "\"sources\":[\"c:\\\\myfile.js\"],\n" + "\"names\":[\"foo\",\"a\",\"c\",\"d\",\"e\"]\n" + "}\n"); [EOL]     detailLevel = SourceMap.DetailLevel.SYMBOLS; [EOL]     checkSourceMap("c:\\myfile.js", "/** @preserve\n" + " * this is a test.\n" + " */\n" + "var foo=a + 'this is a really long line that will force the" + " mapping to span multiple linesc + d + e;", "{\n" + "\"version\":3,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":6,\n" + "\"mappings\":\"A;;;;IAGIA,IAAIC,CAAJD;AAA8xCE,CAA9xCF,CAAkyCG," + "CAAlyCH,CAAsyCI;\",\n" + "\"sources\":[\"c:\\\\myfile.js\"],\n" + "\"names\":[\"foo\",\"a\",\"c\",\"d\",\"e\"]\n" + "}\n"); [EOL] } <line_num>: 222,311
public void testBasicDeterminism() throws Exception { [EOL]     RunResult result1 = compile("file1", "foo;", "file2", "bar;"); [EOL]     RunResult result2 = compile("file2", "foo;", "file1", "bar;"); [EOL]     String map1 = getSourceMap(result1); [EOL]     String map2 = getSourceMap(result2); [EOL]     String files1 = map1.split("\n")[4]; [EOL]     String files2 = map2.split("\n")[4]; [EOL]     assertEquals(files1, files2); [EOL] } <line_num>: 313,328
public void testWriteMetaMap() throws IOException { [EOL]     StringWriter out = new StringWriter(); [EOL]     String name = "./app.js"; [EOL]     List<SourceMapSection> appSections = Lists.newArrayList(SourceMapSection.forURL("src1", 0, 0), SourceMapSection.forURL("src2", 100, 10), SourceMapSection.forURL("src3", 150, 5)); [EOL]     SourceMapGeneratorV3 generator = new SourceMapGeneratorV3(); [EOL]     generator.appendIndexMapTo(out, name, appSections); [EOL]     assertEquals("{\n" + "\"version\":3,\n" + "\"file\":\"./app.js\",\n" + "\"sections\":[\n" + "{\n" + "\"offset\":{\n" + "\"line\":0,\n" + "\"column\":0\n" + "},\n" + "\"url\":\"src1\"\n" + "},\n" + "{\n" + "\"offset\":{\n" + "\"line\":100,\n" + "\"column\":10\n" + "},\n" + "\"url\":\"src2\"\n" + "},\n" + "{\n" + "\"offset\":{\n" + "\"line\":150,\n" + "\"column\":5\n" + "},\n" + "\"url\":\"src3\"\n" + "}\n" + "]\n" + "}\n", out.toString()); [EOL] } <line_num>: 330,370
private String getEmptyMapFor(String name) throws IOException { [EOL]     StringWriter out = new StringWriter(); [EOL]     SourceMapGeneratorV3 generator = new SourceMapGeneratorV3(); [EOL]     generator.appendTo(out, name); [EOL]     return out.toString(); [EOL] } <line_num>: 372,377
public void testWriteMetaMap2() throws IOException { [EOL]     StringWriter out = new StringWriter(); [EOL]     String name = "./app.js"; [EOL]     List<SourceMapSection> appSections = Lists.newArrayList(SourceMapSection.forMap(getEmptyMapFor("./part.js"), 0, 0), SourceMapSection.forURL("src2", 100, 10)); [EOL]     SourceMapGeneratorV3 generator = new SourceMapGeneratorV3(); [EOL]     generator.appendIndexMapTo(out, name, appSections); [EOL]     assertEquals("{\n" + "\"version\":3,\n" + "\"file\":\"./app.js\",\n" + "\"sections\":[\n" + "{\n" + "\"offset\":{\n" + "\"line\":0,\n" + "\"column\":0\n" + "},\n" + "\"map\":{\n" + "\"version\":3,\n" + "\"file\":\"./part.js\",\n" + "\"lineCount\":1,\n" + "\"mappings\":\";\",\n" + "\"sources\":[],\n" + "\"names\":[]\n" + "}\n" + "\n" + "},\n" + "{\n" + "\"offset\":{\n" + "\"line\":100,\n" + "\"column\":10\n" + "},\n" + "\"url\":\"src2\"\n" + "}\n" + "]\n" + "}\n", out.toString()); [EOL] } <line_num>: 379,420
@Override [EOL] public String getSourceMap(String url) { [EOL]     return maps.get(url); [EOL] } <line_num>: 452,455
public void testParseSourceMetaMap() throws Exception { [EOL]     final String INPUT1 = "file1"; [EOL]     final String INPUT2 = "file2"; [EOL]     LinkedHashMap<String, String> inputs = Maps.newLinkedHashMap(); [EOL]     inputs.put(INPUT1, "var __FOO__ = 1;"); [EOL]     inputs.put(INPUT2, "var __BAR__ = 2;"); [EOL]     RunResult result1 = compile(inputs.get(INPUT1), INPUT1); [EOL]     RunResult result2 = compile(inputs.get(INPUT2), INPUT2); [EOL]     final String MAP1 = "map1"; [EOL]     final String MAP2 = "map2"; [EOL]     final LinkedHashMap<String, String> maps = Maps.newLinkedHashMap(); [EOL]     maps.put(MAP1, result1.sourceMapFileContent); [EOL]     maps.put(MAP2, result2.sourceMapFileContent); [EOL]     List<SourceMapSection> sections = Lists.newArrayList(); [EOL]     StringBuilder output = new StringBuilder(); [EOL]     FilePosition offset = appendAndCount(output, result1.generatedSource); [EOL]     sections.add(SourceMapSection.forURL(MAP1, 0, 0)); [EOL]     output.append(result2.generatedSource); [EOL]     sections.add(SourceMapSection.forURL(MAP2, offset.getLine(), offset.getColumn())); [EOL]     SourceMapGeneratorV3 generator = new SourceMapGeneratorV3(); [EOL]     StringBuilder mapContents = new StringBuilder(); [EOL]     generator.appendIndexMapTo(mapContents, "out.js", sections); [EOL]     check(inputs, output.toString(), mapContents.toString(), new SourceMapSupplier() { [EOL]  [EOL]         @Override [EOL]         public String getSourceMap(String url) { [EOL]             return maps.get(url); [EOL]         } [EOL]     }); [EOL] } <line_num>: 422,456
public void testSourceMapMerging() throws Exception { [EOL]     final String INPUT1 = "file1"; [EOL]     final String INPUT2 = "file2"; [EOL]     LinkedHashMap<String, String> inputs = Maps.newLinkedHashMap(); [EOL]     inputs.put(INPUT1, "var __FOO__ = 1;"); [EOL]     inputs.put(INPUT2, "var __BAR__ = 2;"); [EOL]     RunResult result1 = compile(inputs.get(INPUT1), INPUT1); [EOL]     RunResult result2 = compile(inputs.get(INPUT2), INPUT2); [EOL]     StringBuilder output = new StringBuilder(); [EOL]     FilePosition offset = appendAndCount(output, result1.generatedSource); [EOL]     output.append(result2.generatedSource); [EOL]     SourceMapGeneratorV3 generator = new SourceMapGeneratorV3(); [EOL]     generator.mergeMapSection(0, 0, result1.sourceMapFileContent); [EOL]     generator.mergeMapSection(offset.getLine(), offset.getColumn(), result2.sourceMapFileContent); [EOL]     StringBuilder mapContents = new StringBuilder(); [EOL]     generator.appendTo(mapContents, "out.js"); [EOL]     check(inputs, output.toString(), mapContents.toString()); [EOL] } <line_num>: 458,481
FilePosition count(String js) { [EOL]     int line = 0, column = 0; [EOL]     for (int i = 0; i < js.length(); i++) { [EOL]         if (js.charAt(i) == '\n') { [EOL]             line++; [EOL]             column = 0; [EOL]         } else { [EOL]             column++; [EOL]         } [EOL]     } [EOL]     return new FilePosition(line, column); [EOL] } <line_num>: 483,494
FilePosition appendAndCount(Appendable out, String js) throws IOException { [EOL]     out.append(js); [EOL]     return count(js); [EOL] } <line_num>: 496,499
