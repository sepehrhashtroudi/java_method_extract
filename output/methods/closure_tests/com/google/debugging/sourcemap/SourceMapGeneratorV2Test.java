public SourceMapGeneratorV2Test() { [EOL]     disableColumnValidation(); [EOL] } <line_num>: 31,33
@Override [EOL] protected SourceMapConsumer getSourceMapConsumer() { [EOL]     return new SourceMapConsumerV2(); [EOL] } <line_num>: 35,38
@Override [EOL] protected Format getSourceMapFormat() { [EOL]     return SourceMap.Format.V2; [EOL] } <line_num>: 40,43
@Override [EOL] public void setUp() { [EOL]     detailLevel = SourceMap.DetailLevel.ALL; [EOL] } <line_num>: 45,48
public void testBasicMapping() throws Exception { [EOL]     compileAndCheck("function __BASIC__() { }"); [EOL] } <line_num>: 50,52
public void testBasicMappingGoldenOutput() throws Exception { [EOL]     checkSourceMap("function __BASIC__() { }", "{\n" + "\"version\":2,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":1,\n" + "\"lineMaps\":[\"cAkBEBEB\"],\n" + "\"mappings\":[[0,1,0,0],\n" + "[0,1,9,0],\n" + "[0,1,18],\n" + "[0,1,21],\n" + "],\n" + "\"sources\":[\"testcode\"],\n" + "\"names\":[\"__BASIC__\"]\n" + "}\n"); [EOL] } <line_num>: 54,72
public void testLiteralMappings() throws Exception { [EOL]     compileAndCheck("function __BASIC__(__PARAM1__, __PARAM2__) { " + "var __VAR__ = '__STR__'; }"); [EOL] } <line_num>: 74,77
public void testLiteralMappingsGoldenOutput() throws Exception { [EOL]     checkSourceMap("function __BASIC__(__PARAM1__, __PARAM2__) { " + "var __VAR__ = '__STR__'; }", "{\n" + "\"version\":2,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":1,\n" + "\"lineMaps\":[\"cAkBABkBA/kCA+ADMBcBgBA9\"],\n" + "\"mappings\":[[0,1,0,0],\n" + "[0,1,9,0],\n" + "[0,1,18],\n" + "[0,1,19,1],\n" + "[0,1,31,2],\n" + "[0,1,43],\n" + "[0,1,45],\n" + "[0,1,49,3],\n" + "[0,1,59],\n" + "],\n" + "\"sources\":[\"testcode\"],\n" + "\"names\":[" + "\"__BASIC__\",\"__PARAM1__\",\"__PARAM2__\"," + "\"__VAR__\"]\n" + "}\n"); [EOL] } <line_num>: 79,105
public void testMultilineMapping() throws Exception { [EOL]     compileAndCheck("function __BASIC__(__PARAM1__, __PARAM2__) {\n" + "var __VAR__ = '__STR__';\n" + "var __ANO__ = \"__STR2__\";\n" + "}"); [EOL] } <line_num>: 107,112
public void testMultiFunctionMapping() throws Exception { [EOL]     compileAndCheck("function __BASIC__(__PARAM1__, __PARAM2__) {\n" + "var __VAR__ = '__STR__';\n" + "var __ANO__ = \"__STR2__\";\n" + "}\n\n" + "function __BASIC2__(__PARAM3__, __PARAM4__) {\n" + "var __VAR2__ = '__STR2__';\n" + "var __ANO2__ = \"__STR3__\";\n" + "}\n\n"); [EOL] } <line_num>: 114,124
public void testGoldenOutput0() throws Exception { [EOL]     checkSourceMap("", "{\n" + "\"version\":2,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":1,\n" + "\"lineMaps\":[\"\"],\n" + "\"mappings\":[],\n" + "\"sources\":[\"testcode\"],\n" + "\"names\":[]\n" + "}\n"); [EOL] } <line_num>: 126,139
public void testGoldenOutput1() throws Exception { [EOL]     detailLevel = SourceMap.DetailLevel.ALL; [EOL]     checkSourceMap("function f(foo, bar) { foo = foo + bar + 2; return foo; }", "{\n" + "\"version\":2,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":1,\n" + "\"lineMaps\":[\"cAEBABIBA/ICA+ADICA/ICA+IDA9AEYBMBA5\"],\n" + "\"mappings\":[[0,1,0,0],\n" + "[0,1,9,0],\n" + "[0,1,10],\n" + "[0,1,11,1],\n" + "[0,1,16,2],\n" + "[0,1,21],\n" + "[0,1,23],\n" + "[0,1,23,1],\n" + "[0,1,29,1],\n" + "[0,1,35,2],\n" + "[0,1,41],\n" + "[0,1,44],\n" + "[0,1,51,1],\n" + "],\n" + "\"sources\":[\"testcode\"],\n" + "\"names\":[\"f\",\"foo\",\"bar\"]\n" + "}\n"); [EOL]     detailLevel = SourceMap.DetailLevel.SYMBOLS; [EOL]     checkSourceMap("function f(foo, bar) { foo = foo + bar + 2; return foo; }", "{\n" + "\"version\":2,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":1,\n" + "\"lineMaps\":[\"cAEBA/ICA+IDE9IEA8IFA7IGg6MHA5\"],\n" + "\"mappings\":[[0,1,0,0],\n" + "[0,1,9,0],\n" + "[0,1,11,1],\n" + "[0,1,16,2],\n" + "[0,1,23,1],\n" + "[0,1,29,1],\n" + "[0,1,35,2],\n" + "[0,1,51,1],\n" + "],\n" + "\"sources\":[\"testcode\"],\n" + "\"names\":[\"f\",\"foo\",\"bar\"]\n" + "}\n"); [EOL] } <line_num>: 141,191
public void testGoldenOutput2() throws Exception { [EOL]     checkSourceMap("function f(foo, bar) {\r\n\n\n\nfoo = foo + bar + foo;" + "\nreturn foo;\n}", "{\n" + "\"version\":2,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":1,\n" + "\"lineMaps\":[" + "\"cAEBABIBA/ICA+ADICA/ICA+IDA9IEYBMBA5\"],\n" + "\"mappings\":[[0,1,0,0],\n" + "[0,1,9,0],\n" + "[0,1,10],\n" + "[0,1,11,1],\n" + "[0,1,16,2],\n" + "[0,1,21],\n" + "[0,5,0],\n" + "[0,5,0,1],\n" + "[0,5,6,1],\n" + "[0,5,12,2],\n" + "[0,5,18,1],\n" + "[0,6,0],\n" + "[0,6,7,1],\n" + "],\n" + "\"sources\":[\"testcode\"],\n" + "\"names\":[\"f\",\"foo\",\"bar\"]\n" + "}\n"); [EOL] } <line_num>: 193,220
public void testGoldenOutput3() throws Exception { [EOL]     checkSourceMap("c:\\myfile.js", "foo;", "{\n" + "\"version\":2,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":1,\n" + "\"lineMaps\":[\"IA\"],\n" + "\"mappings\":[[0,1,0,0],\n" + "],\n" + "\"sources\":[\"c:\\\\myfile.js\"],\n" + "\"names\":[\"foo\"]\n" + "}\n"); [EOL] } <line_num>: 222,236
public void testGoldenOutput4() throws Exception { [EOL]     checkSourceMap("c:\\myfile.js", "foo;   boo;   goo;", "{\n" + "\"version\":2,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":1,\n" + "\"lineMaps\":[\"IAMBMB\"],\n" + "\"mappings\":[[0,1,0,0],\n" + "[0,1,7,1],\n" + "[0,1,14,2],\n" + "],\n" + "\"sources\":[\"c:\\\\myfile.js\"],\n" + "\"names\":[\"foo\",\"boo\",\"goo\"]\n" + "}\n"); [EOL] } <line_num>: 238,254
public void testGoldenOutput5() throws Exception { [EOL]     detailLevel = SourceMap.DetailLevel.ALL; [EOL]     checkSourceMap("c:\\myfile.js", "/** @preserve\n" + " * this is a test.\n" + " */\n" + "var foo=a + 'this is a really long line that will force the" + " mapping to span multiple linesc + d + e;", "{\n" + "\"version\":2,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":6,\n" + "\"lineMaps\":[\"\",\n" + "\"\",\n" + "\"\",\n" + "\"\",\n" + "\"MAMBABA/!!AUSC\",\n" + "\"AEA9AEA8AF\"],\n" + "\"mappings\":[[0,4,0],\n" + "[0,4,4,0],\n" + "[0,4,8,1],\n" + "[0,4,12],\n" + "[0,4,1314,2],\n" + "[0,4,1318,3],\n" + "[0,4,1322,4],\n" + "],\n" + "\"sources\":[\"c:\\\\myfile.js\"],\n" + "\"names\":[\"foo\",\"a\",\"c\",\"d\",\"e\"]\n" + "}\n"); [EOL]     detailLevel = SourceMap.DetailLevel.SYMBOLS; [EOL]     checkSourceMap("c:\\myfile.js", "/** @preserve\n" + " * this is a test.\n" + " */\n" + "var foo=a + 'this is a really long line that will force the" + " mapping to span multiple linesc + d + e;", "{\n" + "\"version\":2,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":6,\n" + "\"lineMaps\":[\"\",\n" + "\"\",\n" + "\"\",\n" + "\"\",\n" + "\"M/MBAB\",\n" + "\"ACA+ADA9AE\"],\n" + "\"mappings\":[[0,4,4,0],\n" + "[0,4,8,1],\n" + "[0,4,1314,2],\n" + "[0,4,1318,3],\n" + "[0,4,1322,4],\n" + "],\n" + "\"sources\":[\"c:\\\\myfile.js\"],\n" + "\"names\":[\"foo\",\"a\",\"c\",\"d\",\"e\"]\n" + "}\n"); [EOL] } <line_num>: 256,366
public void testBasicDeterminism() throws Exception { [EOL]     RunResult result1 = compile("file1", "foo;", "file2", "bar;"); [EOL]     RunResult result2 = compile("file2", "foo;", "file1", "bar;"); [EOL]     String map1 = getSourceMap(result1); [EOL]     String map2 = getSourceMap(result2); [EOL]     String files1 = map1.split("\n")[4]; [EOL]     String files2 = map2.split("\n")[4]; [EOL]     assertEquals(files1, files2); [EOL] } <line_num>: 368,383
private int getRelativeId(int id, int lastId) { [EOL]     int length = LineMapEncoder.getRelativeMappingIdLength(id, lastId); [EOL]     int result = LineMapEncoder.getRelativeMappingId(id, length, lastId); [EOL]     int inverse = SourceMapLineDecoder.getIdFromRelativeId(result, length, lastId); [EOL]     assertEquals(id, inverse); [EOL]     return result; [EOL] } <line_num>: 385,392
public void testEncodingRelativeId() { [EOL]     assertEquals(0, getRelativeId(0, 0)); [EOL]     assertEquals(64 + (-1), getRelativeId(-1, 0)); [EOL]     assertEquals(64 + (-32), getRelativeId(0, 32)); [EOL]     assertEquals(31, getRelativeId(31, 0)); [EOL]     assertEquals(4096 + (-33), getRelativeId(0, 33)); [EOL]     assertEquals(32, getRelativeId(32, 0)); [EOL] } <line_num>: 394,401
public void testEncodingIdLength() { [EOL]     assertEquals(1, LineMapEncoder.getRelativeMappingIdLength(0, 0)); [EOL]     assertEquals(1, LineMapEncoder.getRelativeMappingIdLength(-1, 0)); [EOL]     assertEquals(1, LineMapEncoder.getRelativeMappingIdLength(0, 32)); [EOL]     assertEquals(1, LineMapEncoder.getRelativeMappingIdLength(31, 0)); [EOL]     assertEquals(2, LineMapEncoder.getRelativeMappingIdLength(0, 33)); [EOL]     assertEquals(2, LineMapEncoder.getRelativeMappingIdLength(32, 0)); [EOL]     assertEquals(2, LineMapEncoder.getRelativeMappingIdLength(2047, 0)); [EOL]     assertEquals(3, LineMapEncoder.getRelativeMappingIdLength(2048, 0)); [EOL]     assertEquals(2, LineMapEncoder.getRelativeMappingIdLength(0, 2048)); [EOL]     assertEquals(3, LineMapEncoder.getRelativeMappingIdLength(0, 2049)); [EOL] } <line_num>: 403,415
private String getEntry(int id, int lastId, int reps) throws IOException { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     LineMapEncoder.encodeEntry(sb, id, lastId, reps); [EOL]     return sb.toString(); [EOL] } <line_num>: 417,421
public void testEncoding() throws IOException { [EOL]     assertEquals("AA", getEntry(0, 0, 1)); [EOL]     assertEquals("EA", getEntry(0, 0, 2)); [EOL]     assertEquals("8A", getEntry(0, 0, 16)); [EOL]     assertEquals("!AQA", getEntry(0, 0, 17)); [EOL]     assertEquals("!ARA", getEntry(0, 0, 18)); [EOL]     assertEquals("!A+A", getEntry(0, 0, 63)); [EOL]     assertEquals("!A/A", getEntry(0, 0, 64)); [EOL]     assertEquals("!!ABAA", getEntry(0, 0, 65)); [EOL]     assertEquals("!!A//A", getEntry(0, 0, 4096)); [EOL]     assertEquals("!!!ABAAA", getEntry(0, 0, 4097)); [EOL]     assertEquals("Af", getEntry(31, 0, 1)); [EOL]     assertEquals("BAg", getEntry(32, 0, 1)); [EOL]     assertEquals("AB", getEntry(32, 31, 1)); [EOL]     assertEquals("!AQf", getEntry(31, 0, 17)); [EOL]     assertEquals("!BQAg", getEntry(32, 0, 17)); [EOL]     assertEquals("!AQB", getEntry(32, 31, 17)); [EOL]     assertEquals("!A/B", getEntry(32, 31, 64)); [EOL]     assertEquals("!!ABAB", getEntry(32, 31, 65)); [EOL] } <line_num>: 423,445
