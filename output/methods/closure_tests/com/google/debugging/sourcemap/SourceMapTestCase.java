public SourceMapTestCase() { [EOL] } <line_num>: 44,45
Token(String tokenName, String inputName, FilePosition position) { [EOL]     this.tokenName = tokenName; [EOL]     this.inputName = inputName; [EOL]     this.position = position; [EOL] } <line_num>: 67,71
void disableColumnValidation() { [EOL]     validateColumns = false; [EOL] } <line_num>: 47,49
@Override [EOL] public void setUp() { [EOL]     detailLevel = SourceMap.DetailLevel.ALL; [EOL] } <line_num>: 74,77
protected void checkSourceMap(String js, String expectedMap) throws IOException { [EOL]     checkSourceMap("testcode", js, expectedMap); [EOL] } <line_num>: 83,86
protected String getSourceMap(RunResult result) throws IOException { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     result.sourceMap.appendTo(sb, "testcode"); [EOL]     return sb.toString(); [EOL] } <line_num>: 88,92
protected void checkSourceMap(String fileName, String js, String expectedMap) throws IOException { [EOL]     RunResult result = compile(js, fileName); [EOL]     assertEquals(expectedMap, result.sourceMapFileContent); [EOL]     assertEquals(result.sourceMapFileContent, getSourceMap(result)); [EOL] } <line_num>: 94,99
private Map<String, Token> findTokens(Map<String, String> inputs) { [EOL]     Map<String, Token> tokens = Maps.newLinkedHashMap(); [EOL]     for (Entry<String, String> entry : inputs.entrySet()) { [EOL]         findTokens(tokens, entry.getKey(), entry.getValue()); [EOL]     } [EOL]     return tokens; [EOL] } <line_num>: 105,113
private Map<String, Token> findTokens(String src) { [EOL]     Map<String, Token> tokens = Maps.newLinkedHashMap(); [EOL]     findTokens(tokens, "", src); [EOL]     return tokens; [EOL] } <line_num>: 119,125
private Map<String, Token> findTokens(Map<String, Token> tokens, String inputName, String js) { [EOL]     int currentLine = 0; [EOL]     int positionOffset = 0; [EOL]     for (int i = 0; i < js.length(); ++i) { [EOL]         char current = js.charAt(i); [EOL]         if (current == '\n') { [EOL]             positionOffset = i + 1; [EOL]             currentLine++; [EOL]             continue; [EOL]         } [EOL]         if (current == '_' && (i < js.length() - 5)) { [EOL]             if (js.charAt(i + 1) != '_') { [EOL]                 continue; [EOL]             } [EOL]             String tokenName = ""; [EOL]             int j = i + 2; [EOL]             for (; j < js.length(); ++j) { [EOL]                 if (js.charAt(j) == '_') { [EOL]                     break; [EOL]                 } [EOL]                 tokenName += js.charAt(j); [EOL]             } [EOL]             if (tokenName.length() > 0) { [EOL]                 int currentPosition = i - positionOffset; [EOL]                 Token token = new Token(tokenName, inputName, new FilePosition(currentLine, currentPosition)); [EOL]                 tokens.put(tokenName, token); [EOL]             } [EOL]             i = j; [EOL]         } [EOL]     } [EOL]     return tokens; [EOL] } <line_num>: 131,177
abstract protected SourceMap.Format getSourceMapFormat(); <line_num>: 179,179
abstract protected SourceMapConsumer getSourceMapConsumer(); <line_num>: 181,181
protected void compileAndCheck(String js) { [EOL]     String inputName = "testcode"; [EOL]     RunResult result = compile(js, inputName); [EOL]     check(inputName, js, result.generatedSource, result.sourceMapFileContent); [EOL] } <line_num>: 183,187
protected void check(String inputName, String input, String output, String sourceMapFileContent) { [EOL]     Map<String, String> inputMap = new LinkedHashMap<String, String>(); [EOL]     inputMap.put(inputName, input); [EOL]     check(inputMap, output, sourceMapFileContent); [EOL] } <line_num>: 189,195
protected void check(Map<String, String> originalInputs, String generatedSource, String sourceMapFileContent) { [EOL]     check(originalInputs, generatedSource, sourceMapFileContent, null); [EOL] } <line_num>: 197,201
protected void check(Map<String, String> originalInputs, String generatedSource, String sourceMapFileContent, SourceMapSupplier supplier) { [EOL]     Map<String, Token> originalTokens = findTokens(originalInputs); [EOL]     Map<String, Token> resultTokens = findTokens(generatedSource); [EOL]     assertEquals(originalTokens.size(), resultTokens.size()); [EOL]     SourceMapping reader; [EOL]     try { [EOL]         reader = SourceMapConsumerFactory.parse(sourceMapFileContent, supplier); [EOL]     } catch (SourceMapParseException e) { [EOL]         throw new RuntimeException("unexpected exception", e); [EOL]     } [EOL]     for (Token token : resultTokens.values()) { [EOL]         OriginalMapping mapping = reader.getMappingForLine(token.position.getLine() + 1, token.position.getColumn() + 1); [EOL]         assertNotNull(mapping); [EOL]         Token inputToken = originalTokens.get(token.tokenName); [EOL]         assertNotNull(inputToken); [EOL]         assertEquals(mapping.getOriginalFile(), inputToken.inputName); [EOL]         assertEquals(mapping.getLineNumber(), inputToken.position.getLine() + 1); [EOL]         int start = inputToken.position.getColumn() + 1; [EOL]         if (inputToken.tokenName.startsWith("STR")) { [EOL]             start--; [EOL]         } [EOL]         if (validateColumns) { [EOL]             assertEquals(start, mapping.getColumnPosition()); [EOL]         } [EOL]         if (!inputToken.tokenName.startsWith("STR")) { [EOL]             assertTrue("missing name for " + inputToken.tokenName, !mapping.getIdentifier().isEmpty()); [EOL]         } [EOL]         if (!mapping.getIdentifier().isEmpty()) { [EOL]             assertEquals(mapping.getIdentifier(), "__" + inputToken.tokenName + "__"); [EOL]         } [EOL]     } [EOL] } <line_num>: 203,269
protected RunResult compile(String js, String fileName) { [EOL]     return compile(js, fileName, null, null); [EOL] } <line_num>: 271,273
protected CompilerOptions getCompilerOptions() { [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     options.sourceMapOutputPath = "testcode_source_map.out"; [EOL]     options.sourceMapFormat = getSourceMapFormat(); [EOL]     options.sourceMapDetailLevel = detailLevel; [EOL]     return options; [EOL] } <line_num>: 275,281
protected RunResult compile(String js1, String fileName1, String js2, String fileName2) { [EOL]     Compiler compiler = new Compiler(); [EOL]     CompilerOptions options = getCompilerOptions(); [EOL]     options.ideMode = true; [EOL]     List<SourceFile> inputs = ImmutableList.of(SourceFile.fromCode(fileName1, js1)); [EOL]     if (js2 != null && fileName2 != null) { [EOL]         inputs = ImmutableList.of(SourceFile.fromCode(fileName1, js1), SourceFile.fromCode(fileName2, js2)); [EOL]     } [EOL]     Result result = compiler.compile(EXTERNS, inputs, options); [EOL]     assertTrue("compilation failed", result.success); [EOL]     String source = compiler.toSource(); [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     try { [EOL]         result.sourceMap.validate(true); [EOL]         result.sourceMap.appendTo(sb, "testcode"); [EOL]     } catch (IOException e) { [EOL]         throw new RuntimeException("unexpected exception", e); [EOL]     } [EOL]     RunResult rr = new RunResult(); [EOL]     rr.generatedSource = source; [EOL]     rr.sourceMap = result.sourceMap; [EOL]     rr.sourceMapFileContent = sb.toString(); [EOL]     return rr; [EOL] } <line_num>: 283,318
