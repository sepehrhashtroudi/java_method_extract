public SourceMapConsumerV1Test() { [EOL] } <line_num>: 27,28
public SourceMapConsumerV1Test(String name) { [EOL]     super(name); [EOL] } <line_num>: 30,32
public void testGetMappingForLine() throws Exception { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append("/** Begin line maps. **/{ count : 2 }\n"); [EOL]     sb.append("[0,,,,1,,2]\n"); [EOL]     sb.append("[3,,,,,,,]\n"); [EOL]     sb.append("/** Begin file information. **/\n"); [EOL]     sb.append("['test.js']\n"); [EOL]     sb.append("['foo.js']\n"); [EOL]     sb.append("/** Begin mapping definitions. **/\n"); [EOL]     sb.append("['test.js', 0, 1]\n"); [EOL]     sb.append("['bleg.js', 5, 8, 'hello']\n"); [EOL]     sb.append("['bleg.js', 12, 78]\n"); [EOL]     sb.append("['foo.js', 15, 16, 'yo!']"); [EOL]     SourceMapConsumerV1 sourceMap = new SourceMapConsumerV1(); [EOL]     sourceMap.parse(sb.toString()); [EOL]     OriginalMapping mapping = sourceMap.getMappingForLine(1, 1); [EOL]     assertNotNull(mapping); [EOL]     assertEquals("test.js", mapping.getOriginalFile()); [EOL]     assertEquals(0, mapping.getLineNumber()); [EOL]     assertEquals(1, mapping.getColumnPosition()); [EOL]     assertEquals("", mapping.getIdentifier()); [EOL]     mapping = sourceMap.getMappingForLine(1, 6); [EOL]     assertNotNull(mapping); [EOL]     assertEquals("bleg.js", mapping.getOriginalFile()); [EOL]     assertEquals(5, mapping.getLineNumber()); [EOL]     assertEquals(8, mapping.getColumnPosition()); [EOL]     assertEquals("hello", mapping.getIdentifier()); [EOL]     mapping = sourceMap.getMappingForLine(2, 4); [EOL]     assertNotNull(mapping); [EOL]     assertEquals("foo.js", mapping.getOriginalFile()); [EOL]     assertEquals(15, mapping.getLineNumber()); [EOL]     assertEquals(16, mapping.getColumnPosition()); [EOL]     assertEquals("yo!", mapping.getIdentifier()); [EOL]     assertNull(sourceMap.getMappingForLine(Integer.MAX_VALUE, 1)); [EOL]     assertNotNull(sourceMap.getMappingForLine(1, Integer.MAX_VALUE)); [EOL] } <line_num>: 34,75
public void testLineEdges() throws Exception { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append("/** Begin line maps. **/{ count : 2 }\n"); [EOL]     sb.append("[100]\n"); [EOL]     sb.append("[200]\n"); [EOL]     sb.append("/** Begin file information. **/\n"); [EOL]     sb.append("['test.js']\n"); [EOL]     sb.append("['foo.js']\n"); [EOL]     sb.append("/** Begin mapping definitions. **/\n"); [EOL]     for (int i = 0; i <= 200; i++) { [EOL]         sb.append("['foo.js', ").append(i).append(", 1]\n"); [EOL]     } [EOL]     SourceMapConsumerV1 sourceMap = new SourceMapConsumerV1(); [EOL]     sourceMap.parse(sb.toString()); [EOL]     OriginalMapping mapping = sourceMap.getMappingForLine(-1, 1); [EOL]     assertNull(mapping); [EOL]     mapping = sourceMap.getMappingForLine(0, 1); [EOL]     assertNull(mapping); [EOL]     mapping = sourceMap.getMappingForLine(1, 1); [EOL]     assertEquals(100, mapping.getLineNumber()); [EOL]     mapping = sourceMap.getMappingForLine(2, 1); [EOL]     assertEquals(200, mapping.getLineNumber()); [EOL]     mapping = sourceMap.getMappingForLine(3, 1); [EOL]     assertNull(mapping); [EOL] } <line_num>: 77,107
public void testColumnEdges() throws Exception { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append("/** Begin line maps. **/{ count : 1 }\n"); [EOL]     sb.append("[100, 101]\n"); [EOL]     sb.append("/** Begin file information. **/\n"); [EOL]     sb.append("\n"); [EOL]     sb.append("/** Begin mapping definitions. **/\n"); [EOL]     for (int i = 0; i <= 200; i++) { [EOL]         sb.append("['foo.js', ").append(i).append(", 1]\n"); [EOL]     } [EOL]     SourceMapConsumerV1 sourceMap = new SourceMapConsumerV1(); [EOL]     sourceMap.parse(sb.toString()); [EOL]     OriginalMapping mapping = sourceMap.getMappingForLine(1, -1); [EOL]     assertNull(mapping); [EOL]     mapping = sourceMap.getMappingForLine(1, 0); [EOL]     assertNull(mapping); [EOL]     mapping = sourceMap.getMappingForLine(1, 1); [EOL]     assertEquals(100, mapping.getLineNumber()); [EOL]     mapping = sourceMap.getMappingForLine(1, 2); [EOL]     assertEquals(101, mapping.getLineNumber()); [EOL]     mapping = sourceMap.getMappingForLine(1, 3); [EOL]     assertEquals(101, mapping.getLineNumber()); [EOL] } <line_num>: 109,139
public void testNegativeOneInLineMap() throws Exception { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append("/** Begin line maps. **/{ count : 1 }\n"); [EOL]     sb.append("[200,-1,199,-1]\n"); [EOL]     sb.append("/** Begin file information. **/\n"); [EOL]     sb.append("\n"); [EOL]     sb.append("/** Begin mapping definitions. **/\n"); [EOL]     for (int i = 0; i <= 200; i++) { [EOL]         sb.append("['foo.js', 1, ").append(i).append("]\n"); [EOL]     } [EOL]     SourceMapConsumerV1 sourceMap = new SourceMapConsumerV1(); [EOL]     sourceMap.parse(sb.toString()); [EOL]     OriginalMapping mapping = sourceMap.getMappingForLine(1, 2); [EOL]     assertNull(mapping); [EOL]     mapping = sourceMap.getMappingForLine(1, 4); [EOL]     assertNull(mapping); [EOL] } <line_num>: 141,160
public void testSimpleParse() throws Exception { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append("/** Begin line maps. **/{ count : 1 }\n"); [EOL]     sb.append("[0,,,,1,2]\n"); [EOL]     sb.append("/** Begin file information. **/\n"); [EOL]     sb.append("['test.js']\n"); [EOL]     sb.append("/** Begin mapping definitions. **/\n"); [EOL]     sb.append("['test.js', 0, 1]\n"); [EOL]     sb.append("['test.js', 0, 1, 'hello']\n"); [EOL]     sb.append("['test.js', 0, 1]"); [EOL]     SourceMapConsumerV1 sourceMap = new SourceMapConsumerV1(); [EOL]     sourceMap.parse(sb.toString()); [EOL] } <line_num>: 162,175
public void testBlankLine() throws Exception { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append("/** Begin line maps. **/{ count : 1 }\n"); [EOL]     sb.append("\n"); [EOL]     sb.append("/** Begin file information. **/\n"); [EOL]     sb.append("\n"); [EOL]     sb.append("/** Begin mapping definitions. **/\n"); [EOL]     SourceMapConsumerV1 sourceMap = new SourceMapConsumerV1(); [EOL]     sourceMap.parse(sb.toString()); [EOL] } <line_num>: 177,187
public void testCountFailure() throws Exception { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append("/** Begin line maps. **/{ counter : 1 }\n"); [EOL]     assertException("Missing 'count'", sb); [EOL] } <line_num>: 189,194
public void testInvalidCountFailure() throws Exception { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append("/** Begin line maps. **/{ count : 0 }\n"); [EOL]     assertException("Count must be >= 1", sb); [EOL] } <line_num>: 196,201
public void testInvalidJSONFailure() throws Exception { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append("/** Begin line maps. **/{ count : 2 }\n"); [EOL]     sb.append("[0,,,,2\n"); [EOL]     assertExceptionStartsWith("JSON parse exception: org.json.JSONException: " + "Expected a ',' or ']' at ", sb); [EOL] } <line_num>: 203,210
public void testInvalidHeaderFailure() throws Exception { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append("/** Begin line maps. **/{ count : 1 }\n"); [EOL]     sb.append("[0,,,1]\n"); [EOL]     sb.append("[3,,,4]\n"); [EOL]     assertException("Expected /** Begin file information. **/ got [3,,,4]", sb); [EOL] } <line_num>: 212,220
public void testInvalidPostHeaderToken() throws Exception { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append("/** Begin line maps. **/{ count : 1 }\n"); [EOL]     sb.append("[0,,,1]\n"); [EOL]     sb.append("/** Begin file information. **/f\n"); [EOL]     assertException("Expected /** Begin file information. **/" + " got /** Begin file information. **/f", sb); [EOL] } <line_num>: 222,230
public void testInvalidMappingArrayFailure() throws Exception { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append("/** Begin line maps. **/{ count : 1 }\n"); [EOL]     sb.append("[0,,,,1,2]\n"); [EOL]     sb.append("/** Begin file information. **/\n"); [EOL]     sb.append("['test.js']\n"); [EOL]     sb.append("/** Begin mapping definitions. **/\n"); [EOL]     sb.append("['test.js', 0]\n"); [EOL]     assertException("Invalid mapping array", sb); [EOL] } <line_num>: 232,242
public void testMultipleLineFragments() throws Exception { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append("/** Begin line maps. **/{ count : 1 }\n"); [EOL]     sb.append("[0,1,2,3,260,261,262]\n"); [EOL]     sb.append("/** Begin file information. **/\n"); [EOL]     sb.append("\n"); [EOL]     sb.append("/** Begin mapping definitions. **/\n"); [EOL]     for (int i = 0; i < 262; i++) { [EOL]         sb.append("['frog/test" + i + ".js', " + i + ", 1]\n"); [EOL]     } [EOL]     sb.append("['frog/testigloo.js', 500, 1]"); [EOL]     SourceMapConsumerV1 sourceMap = new SourceMapConsumerV1(); [EOL]     sourceMap.parse(sb.toString()); [EOL]     OriginalMapping mapping = sourceMap.getMappingForLine(1, 1); [EOL]     assertNotNull(mapping); [EOL]     assertEquals("frog/test0.js", mapping.getOriginalFile()); [EOL]     assertEquals(0, mapping.getLineNumber()); [EOL]     assertEquals(1, mapping.getColumnPosition()); [EOL]     assertEquals("", mapping.getIdentifier()); [EOL]     mapping = sourceMap.getMappingForLine(1, 6); [EOL]     assertNotNull(mapping); [EOL]     assertEquals("frog/test261.js", mapping.getOriginalFile()); [EOL]     assertEquals(261, mapping.getLineNumber()); [EOL]     assertEquals(1, mapping.getColumnPosition()); [EOL] } <line_num>: 244,272
public void testMultipleMappingFragments() throws Exception { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append("/** Begin line maps. **/{ count : 1 }\n"); [EOL]     sb.append("[0,1,2,3,260,261,262,1023]\n"); [EOL]     sb.append("/** Begin file information. **/\n"); [EOL]     sb.append("\n"); [EOL]     sb.append("/** Begin mapping definitions. **/\n"); [EOL]     for (int i = 0; i < 2000; i++) { [EOL]         sb.append("['frog/test" + (i / 100) + ".js', " + i + ", 1]\n"); [EOL]     } [EOL]     sb.append("['frog/testigloo.js', 500, 1]"); [EOL]     SourceMapConsumerV1 sourceMap = new SourceMapConsumerV1(); [EOL]     sourceMap.parse(sb.toString()); [EOL]     OriginalMapping mapping = sourceMap.getMappingForLine(1, 1); [EOL]     assertNotNull(mapping); [EOL]     assertEquals("frog/test0.js", mapping.getOriginalFile()); [EOL]     assertEquals(0, mapping.getLineNumber()); [EOL]     assertEquals(1, mapping.getColumnPosition()); [EOL]     assertEquals("", mapping.getIdentifier()); [EOL]     mapping = sourceMap.getMappingForLine(1, 6); [EOL]     assertNotNull(mapping); [EOL]     assertEquals("frog/test2.js", mapping.getOriginalFile()); [EOL]     assertEquals(261, mapping.getLineNumber()); [EOL]     assertEquals(1, mapping.getColumnPosition()); [EOL]     mapping = sourceMap.getMappingForLine(1, 8); [EOL]     assertNotNull(mapping); [EOL]     assertEquals("frog/test10.js", mapping.getOriginalFile()); [EOL]     assertEquals(1023, mapping.getLineNumber()); [EOL]     assertEquals(1, mapping.getColumnPosition()); [EOL] } <line_num>: 274,308
private void assertException(String exception, StringBuilder sb) { [EOL]     boolean exceptionRaised = false; [EOL]     try { [EOL]         SourceMapConsumerV1 sourceMap = new SourceMapConsumerV1(); [EOL]         sourceMap.parse(sb.toString()); [EOL]     } catch (SourceMapParseException pe) { [EOL]         assertEquals(exception, pe.getMessage()); [EOL]         exceptionRaised = true; [EOL]     } [EOL]     assertTrue(exceptionRaised); [EOL] } <line_num>: 310,323
private void assertExceptionStartsWith(String exception, StringBuilder sb) { [EOL]     boolean exceptionRaised = false; [EOL]     try { [EOL]         SourceMapConsumerV1 sourceMap = new SourceMapConsumerV1(); [EOL]         sourceMap.parse(sb.toString()); [EOL]     } catch (SourceMapParseException pe) { [EOL]         assertTrue("expected <" + exception + "> but was <" + pe.getMessage() + ">", pe.getMessage().startsWith(exception)); [EOL]         exceptionRaised = true; [EOL]     } [EOL]     assertTrue(exceptionRaised); [EOL] } <line_num>: 325,340
