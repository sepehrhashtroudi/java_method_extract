public void testMergeExtractNormal() throws Exception { [EOL]     testMergeExtract(5, 6); [EOL]     testMergeExtract(456, 3423); [EOL]     testMergeExtract(0, 0); [EOL] } <line_num>: 49,53
public void testMergeExtractErroneous() throws Exception { [EOL]     assertEquals(-1, Node.mergeLineCharNo(-5, 90)); [EOL]     assertEquals(-1, Node.mergeLineCharNo(0, -1)); [EOL]     assertEquals(-1, Node.extractLineno(-1)); [EOL]     assertEquals(-1, Node.extractCharno(-1)); [EOL] } <line_num>: 55,60
public void testMergeOverflowGraciously() throws Exception { [EOL]     int linecharno = Node.mergeLineCharNo(89, 4096); [EOL]     assertEquals(89, Node.extractLineno(linecharno)); [EOL]     assertEquals(4095, Node.extractCharno(linecharno)); [EOL] } <line_num>: 62,66
public void testCheckTreeEqualsImplSame() { [EOL]     Node node1 = new Node(1, new Node(2)); [EOL]     Node node2 = new Node(1, new Node(2)); [EOL]     assertEquals(null, node1.checkTreeEqualsImpl(node2)); [EOL] } <line_num>: 68,72
public void testCheckTreeEqualsImplDifferentType() { [EOL]     Node node1 = new Node(1, new Node(2)); [EOL]     Node node2 = new Node(2, new Node(2)); [EOL]     assertEquals(new NodeMismatch(node1, node2), node1.checkTreeEqualsImpl(node2)); [EOL] } <line_num>: 74,79
public void testCheckTreeEqualsImplDifferentChildCount() { [EOL]     Node node1 = new Node(1, new Node(2)); [EOL]     Node node2 = new Node(1); [EOL]     assertEquals(new NodeMismatch(node1, node2), node1.checkTreeEqualsImpl(node2)); [EOL] } <line_num>: 81,86
public void testCheckTreeEqualsImplDifferentChild() { [EOL]     Node child1 = new Node(1); [EOL]     Node child2 = new Node(2); [EOL]     Node node1 = new Node(1, child1); [EOL]     Node node2 = new Node(1, child2); [EOL]     assertEquals(new NodeMismatch(child1, child2), node1.checkTreeEqualsImpl(node2)); [EOL] } <line_num>: 88,95
public void testCheckTreeEqualsSame() { [EOL]     Node node1 = new Node(1); [EOL]     assertEquals(null, node1.checkTreeEquals(node1)); [EOL] } <line_num>: 97,100
public void testCheckTreeEqualsStringDifferent() { [EOL]     Node node1 = new Node(Token.ADD); [EOL]     Node node2 = new Node(Token.SUB); [EOL]     assertNotNull(node1.checkTreeEquals(node2)); [EOL] } <line_num>: 102,106
public void testCheckTreeEqualsBooleanSame() { [EOL]     Node node1 = new Node(1); [EOL]     assertEquals(true, node1.isEquivalentTo(node1)); [EOL] } <line_num>: 108,111
public void testCheckTreeEqualsBooleanDifferent() { [EOL]     Node node1 = new Node(1); [EOL]     Node node2 = new Node(2); [EOL]     assertEquals(false, node1.isEquivalentTo(node2)); [EOL] } <line_num>: 113,117
public void testCheckTreeEqualsSlashVDifferent() { [EOL]     Node node1 = Node.newString("\u000B"); [EOL]     node1.putBooleanProp(Node.SLASH_V, true); [EOL]     Node node2 = Node.newString("\u000B"); [EOL]     assertEquals(false, node1.isEquivalentTo(node2)); [EOL] } <line_num>: 119,124
public void testCheckTreeEqualsImplDifferentIncProp() { [EOL]     Node node1 = new Node(Token.INC); [EOL]     node1.putIntProp(Node.INCRDECR_PROP, 1); [EOL]     Node node2 = new Node(Token.INC); [EOL]     assertNotNull(node1.checkTreeEqualsImpl(node2)); [EOL] } <line_num>: 126,131
public void testCheckTreeTypeAwareEqualsSame() { [EOL]     TestErrorReporter testErrorReporter = new TestErrorReporter(null, null); [EOL]     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter); [EOL]     Node node1 = Node.newString(Token.NAME, "f"); [EOL]     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE)); [EOL]     Node node2 = Node.newString(Token.NAME, "f"); [EOL]     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE)); [EOL]     assertTrue(node1.isEquivalentToTyped(node2)); [EOL] } <line_num>: 133,141
public void testCheckTreeTypeAwareEqualsSameNull() { [EOL]     TestErrorReporter testErrorReporter = new TestErrorReporter(null, null); [EOL]     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter); [EOL]     Node node1 = Node.newString(Token.NAME, "f"); [EOL]     Node node2 = Node.newString(Token.NAME, "f"); [EOL]     assertTrue(node1.isEquivalentToTyped(node2)); [EOL] } <line_num>: 143,149
public void testCheckTreeTypeAwareEqualsDifferent() { [EOL]     TestErrorReporter testErrorReporter = new TestErrorReporter(null, null); [EOL]     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter); [EOL]     Node node1 = Node.newString(Token.NAME, "f"); [EOL]     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE)); [EOL]     Node node2 = Node.newString(Token.NAME, "f"); [EOL]     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE)); [EOL]     assertFalse(node1.isEquivalentToTyped(node2)); [EOL] } <line_num>: 151,159
public void testCheckTreeTypeAwareEqualsDifferentNull() { [EOL]     TestErrorReporter testErrorReporter = new TestErrorReporter(null, null); [EOL]     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter); [EOL]     Node node1 = Node.newString(Token.NAME, "f"); [EOL]     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE)); [EOL]     Node node2 = Node.newString(Token.NAME, "f"); [EOL]     assertFalse(node1.isEquivalentToTyped(node2)); [EOL] } <line_num>: 161,168
public void testVarArgs1() { [EOL]     assertFalse(new Node(1).isVarArgs()); [EOL] } <line_num>: 170,172
public void testVarArgs2() { [EOL]     Node n = new Node(1); [EOL]     n.setVarArgs(false); [EOL]     assertFalse(n.isVarArgs()); [EOL] } <line_num>: 174,178
public void testVarArgs3() { [EOL]     Node n = new Node(1); [EOL]     n.setVarArgs(true); [EOL]     assertTrue(n.isVarArgs()); [EOL] } <line_num>: 180,184
private void testMergeExtract(int lineno, int charno) { [EOL]     int linecharno = Node.mergeLineCharNo(lineno, charno); [EOL]     assertEquals(lineno, Node.extractLineno(linecharno)); [EOL]     assertEquals(charno, Node.extractCharno(linecharno)); [EOL] } <line_num>: 186,190
public void testFileLevelJSDocAppender() { [EOL]     Node n = new Node(1); [EOL]     Node.FileLevelJsDocBuilder builder = n.getJsDocBuilderForNode(); [EOL]     builder.append("foo"); [EOL]     builder.append("bar"); [EOL]     assertEquals("foobar", n.getJSDocInfo().getLicense()); [EOL] } <line_num>: 192,198
public void disable_testIsQualifiedName() { [EOL]     assertTrue(getNode("a").isQualifiedName()); [EOL]     assertTrue(getNode("$").isQualifiedName()); [EOL]     assertTrue(getNode("_").isQualifiedName()); [EOL]     assertTrue(getNode("a.b").isQualifiedName()); [EOL]     assertTrue(getNode("a_b.cccccc$d4.x.y.zA$").isQualifiedName()); [EOL]     assertTrue(getNode("this.foo").isQualifiedName()); [EOL]     assertFalse(getNode("0").isQualifiedName()); [EOL]     assertFalse(getNode("[]").isQualifiedName()); [EOL]     assertFalse(getNode("{}").isQualifiedName()); [EOL]     assertFalse(getNode("''").isQualifiedName()); [EOL]     assertFalse(getNode("a[b]").isQualifiedName()); [EOL]     assertFalse(getNode("a[b].c").isQualifiedName()); [EOL]     assertFalse(getNode("c.a[b]").isQualifiedName()); [EOL]     assertFalse(getNode("a()").isQualifiedName()); [EOL]     assertFalse(getNode("a().b").isQualifiedName()); [EOL]     assertFalse(getNode("b.a()").isQualifiedName()); [EOL]     assertFalse(getNode("'a'").isQualifiedName()); [EOL]     assertFalse(getNode("/x/").isQualifiedName()); [EOL]     assertFalse(getNode("++x").isQualifiedName()); [EOL] } <line_num>: 201,221
public void testCloneAnnontations() { [EOL]     Node n = getVarRef("a"); [EOL]     assertFalse(n.getBooleanProp(Node.IS_CONSTANT_NAME)); [EOL]     n.putBooleanProp(Node.IS_CONSTANT_NAME, true); [EOL]     assertTrue(n.getBooleanProp(Node.IS_CONSTANT_NAME)); [EOL]     Node nodeClone = n.cloneNode(); [EOL]     assertTrue(nodeClone.getBooleanProp(Node.IS_CONSTANT_NAME)); [EOL] } <line_num>: 223,231
public void testSharedProps1() { [EOL]     Node n = getVarRef("A"); [EOL]     n.putIntProp(Node.SIDE_EFFECT_FLAGS, 5); [EOL]     Node m = new Node(Token.TRUE); [EOL]     m.clonePropsFrom(n); [EOL]     assertEquals(m.getPropListHeadForTesting(), n.getPropListHeadForTesting()); [EOL]     assertEquals(5, n.getIntProp(Node.SIDE_EFFECT_FLAGS)); [EOL]     assertEquals(5, m.getIntProp(Node.SIDE_EFFECT_FLAGS)); [EOL] } <line_num>: 233,241
public void testSharedProps2() { [EOL]     Node n = getVarRef("A"); [EOL]     n.putIntProp(Node.SIDE_EFFECT_FLAGS, 5); [EOL]     Node m = new Node(Token.TRUE); [EOL]     m.clonePropsFrom(n); [EOL]     n.putIntProp(Node.SIDE_EFFECT_FLAGS, 6); [EOL]     assertEquals(6, n.getIntProp(Node.SIDE_EFFECT_FLAGS)); [EOL]     assertEquals(5, m.getIntProp(Node.SIDE_EFFECT_FLAGS)); [EOL]     assertFalse(m.getPropListHeadForTesting() == n.getPropListHeadForTesting()); [EOL]     m.putIntProp(Node.SIDE_EFFECT_FLAGS, 7); [EOL]     assertEquals(6, n.getIntProp(Node.SIDE_EFFECT_FLAGS)); [EOL]     assertEquals(7, m.getIntProp(Node.SIDE_EFFECT_FLAGS)); [EOL] } <line_num>: 243,258
public void testSharedProps3() { [EOL]     Node n = getVarRef("A"); [EOL]     n.putIntProp(Node.SIDE_EFFECT_FLAGS, 2); [EOL]     n.putIntProp(Node.INCRDECR_PROP, 3); [EOL]     Node m = new Node(Token.TRUE); [EOL]     m.clonePropsFrom(n); [EOL]     n.putIntProp(Node.SIDE_EFFECT_FLAGS, 4); [EOL]     assertEquals(4, n.getIntProp(Node.SIDE_EFFECT_FLAGS)); [EOL]     assertEquals(2, m.getIntProp(Node.SIDE_EFFECT_FLAGS)); [EOL] } <line_num>: 260,270
public void testBooleanProp() { [EOL]     Node n = getVarRef("a"); [EOL]     n.putBooleanProp(Node.IS_CONSTANT_NAME, false); [EOL]     assertNull(n.lookupProperty(Node.IS_CONSTANT_NAME)); [EOL]     assertFalse(n.getBooleanProp(Node.IS_CONSTANT_NAME)); [EOL]     n.putBooleanProp(Node.IS_CONSTANT_NAME, true); [EOL]     assertNotNull(n.lookupProperty(Node.IS_CONSTANT_NAME)); [EOL]     assertTrue(n.getBooleanProp(Node.IS_CONSTANT_NAME)); [EOL]     n.putBooleanProp(Node.IS_CONSTANT_NAME, false); [EOL]     assertNull(n.lookupProperty(Node.IS_CONSTANT_NAME)); [EOL]     assertFalse(n.getBooleanProp(Node.IS_CONSTANT_NAME)); [EOL] } <line_num>: 272,289
public void testCloneAnnontations2() { [EOL]     Node n = getVarRef("a"); [EOL]     n.putBooleanProp(Node.IS_CONSTANT_NAME, true); [EOL]     n.putBooleanProp(Node.IS_DISPATCHER, true); [EOL]     assertTrue(n.getBooleanProp(Node.IS_CONSTANT_NAME)); [EOL]     assertTrue(n.getBooleanProp(Node.IS_DISPATCHER)); [EOL]     Node nodeClone = n.cloneNode(); [EOL]     assertTrue(nodeClone.getBooleanProp(Node.IS_CONSTANT_NAME)); [EOL]     assertTrue(nodeClone.getBooleanProp(Node.IS_DISPATCHER)); [EOL]     n.putBooleanProp(Node.IS_DISPATCHER, false); [EOL]     assertTrue(n.getBooleanProp(Node.IS_CONSTANT_NAME)); [EOL]     assertFalse(n.getBooleanProp(Node.IS_DISPATCHER)); [EOL]     assertTrue(nodeClone.getBooleanProp(Node.IS_CONSTANT_NAME)); [EOL]     assertTrue(nodeClone.getBooleanProp(Node.IS_DISPATCHER)); [EOL] } <line_num>: 292,309
public void testGetIndexOfChild() { [EOL]     Node assign = getAssignExpr("b", "c"); [EOL]     assertEquals(2, assign.getChildCount()); [EOL]     Node firstChild = assign.getFirstChild(); [EOL]     Node secondChild = firstChild.getNext(); [EOL]     assertNotNull(secondChild); [EOL]     assertEquals(0, assign.getIndexOfChild(firstChild)); [EOL]     assertEquals(1, assign.getIndexOfChild(secondChild)); [EOL]     assertEquals(-1, assign.getIndexOfChild(assign)); [EOL] } <line_num>: 311,322
public void testCopyInformationFrom() { [EOL]     Node assign = getAssignExpr("b", "c"); [EOL]     assign.setSourceEncodedPosition(99); [EOL]     assign.setSourceFileForTesting("foo.js"); [EOL]     Node lhs = assign.getFirstChild(); [EOL]     lhs.copyInformationFrom(assign); [EOL]     assertEquals(99, lhs.getSourcePosition()); [EOL]     assertEquals("foo.js", lhs.getSourceFileName()); [EOL]     assign.setSourceEncodedPosition(101); [EOL]     assign.setSourceFileForTesting("bar.js"); [EOL]     lhs.copyInformationFrom(assign); [EOL]     assertEquals(99, lhs.getSourcePosition()); [EOL]     assertEquals("foo.js", lhs.getSourceFileName()); [EOL] } <line_num>: 324,339
public void testUseSourceInfoIfMissingFrom() { [EOL]     Node assign = getAssignExpr("b", "c"); [EOL]     assign.setSourceEncodedPosition(99); [EOL]     assign.setSourceFileForTesting("foo.js"); [EOL]     Node lhs = assign.getFirstChild(); [EOL]     lhs.useSourceInfoIfMissingFrom(assign); [EOL]     assertEquals(99, lhs.getSourcePosition()); [EOL]     assertEquals("foo.js", lhs.getSourceFileName()); [EOL]     assign.setSourceEncodedPosition(101); [EOL]     assign.setSourceFileForTesting("bar.js"); [EOL]     lhs.useSourceInfoIfMissingFrom(assign); [EOL]     assertEquals(99, lhs.getSourcePosition()); [EOL]     assertEquals("foo.js", lhs.getSourceFileName()); [EOL] } <line_num>: 341,356
public void testUseSourceInfoFrom() { [EOL]     Node assign = getAssignExpr("b", "c"); [EOL]     assign.setSourceEncodedPosition(99); [EOL]     assign.setSourceFileForTesting("foo.js"); [EOL]     Node lhs = assign.getFirstChild(); [EOL]     lhs.useSourceInfoFrom(assign); [EOL]     assertEquals(99, lhs.getSourcePosition()); [EOL]     assertEquals("foo.js", lhs.getSourceFileName()); [EOL]     assign.setSourceEncodedPosition(101); [EOL]     assign.setSourceFileForTesting("bar.js"); [EOL]     lhs.useSourceInfoFrom(assign); [EOL]     assertEquals(101, lhs.getSourcePosition()); [EOL]     assertEquals("bar.js", lhs.getSourceFileName()); [EOL] } <line_num>: 358,373
public void testInvalidSourceOffset() { [EOL]     Node string = Node.newString("a"); [EOL]     string.setSourceEncodedPosition(-1); [EOL]     assertTrue(string.getSourceOffset() < 0); [EOL]     string.setSourceFileForTesting("foo.js"); [EOL]     assertTrue(string.getSourceOffset() < 0); [EOL] } <line_num>: 375,383
public void testQualifiedName() { [EOL]     assertNull(IR.name("").getQualifiedName()); [EOL]     assertEquals("a", IR.name("a").getQualifiedName()); [EOL]     assertEquals("a.b", IR.getprop(IR.name("a"), IR.string("b")).getQualifiedName()); [EOL]     assertEquals("this.b", IR.getprop(IR.thisNode(), IR.string("b")).getQualifiedName()); [EOL]     assertNull(IR.getprop(IR.call(IR.name("a")), IR.string("b")).getQualifiedName()); [EOL] } <line_num>: 385,394
private static Node getVarRef(String name) { [EOL]     return Node.newString(Token.NAME, name); [EOL] } <line_num>: 396,398
private static Node getAssignExpr(String name1, String name2) { [EOL]     return new Node(Token.ASSIGN, getVarRef(name1), getVarRef(name2)); [EOL] } <line_num>: 400,402
private static Node getNode(String js) { [EOL]     return null; [EOL] } <line_num>: 404,412
private static Node parse(String string) { [EOL]     return null; [EOL] } <line_num>: 414,424
