public void testRecursiveRecord() { [EOL]     ProxyObjectType loop = new ProxyObjectType(registry, NUMBER_TYPE); [EOL]     JSType record = new RecordTypeBuilder(registry).addProperty("loop", loop, null).addProperty("number", NUMBER_TYPE, null).addProperty("string", STRING_TYPE, null).build(); [EOL]     assertEquals("{loop: number, number: number, string: string}", record.toString()); [EOL]     loop.setReferencedType(record); [EOL]     assertEquals("{loop: {...}, number: number, string: string}", record.toString()); [EOL]     assertEquals("{loop: ?, number: number, string: string}", record.toAnnotationString()); [EOL]     Asserts.assertEquivalenceOperations(record, loop); [EOL] } <line_num>: 46,63
public void testLongToString() { [EOL]     JSType record = new RecordTypeBuilder(registry).addProperty("a1", NUMBER_TYPE, null).addProperty("a2", NUMBER_TYPE, null).addProperty("a3", NUMBER_TYPE, null).addProperty("a4", NUMBER_TYPE, null).addProperty("a5", NUMBER_TYPE, null).addProperty("a6", NUMBER_TYPE, null).build(); [EOL]     assertEquals("{a1: number, a2: number, a3: number, a4: number, ...}", record.toString()); [EOL]     assertEquals("{a1: number, a2: number, a3: number, a4: number," + " a5: number, a6: number}", record.toAnnotationString()); [EOL] } <line_num>: 65,80
public void testSupAndInf() { [EOL]     JSType recordA = new RecordTypeBuilder(registry).addProperty("a", NUMBER_TYPE, null).addProperty("b", NUMBER_TYPE, null).build(); [EOL]     JSType recordC = new RecordTypeBuilder(registry).addProperty("b", NUMBER_TYPE, null).addProperty("c", NUMBER_TYPE, null).build(); [EOL]     ProxyObjectType proxyRecordA = new ProxyObjectType(registry, recordA); [EOL]     ProxyObjectType proxyRecordC = new ProxyObjectType(registry, recordC); [EOL]     JSType aInfC = new RecordTypeBuilder(registry).addProperty("a", NUMBER_TYPE, null).addProperty("b", NUMBER_TYPE, null).addProperty("c", NUMBER_TYPE, null).build(); [EOL]     JSType aSupC = registry.createUnionType(recordA, recordC); [EOL]     Asserts.assertTypeEquals(aInfC, recordA.getGreatestSubtype(recordC)); [EOL]     Asserts.assertTypeEquals(aSupC, recordA.getLeastSupertype(recordC)); [EOL]     Asserts.assertTypeEquals(aInfC, proxyRecordA.getGreatestSubtype(proxyRecordC)); [EOL]     Asserts.assertTypeEquals(aSupC, proxyRecordA.getLeastSupertype(proxyRecordC)); [EOL] } <line_num>: 82,111
public void testSubtypeWithUnknowns() throws Exception { [EOL]     JSType recordA = new RecordTypeBuilder(registry).addProperty("a", NUMBER_TYPE, null).build(); [EOL]     JSType recordB = new RecordTypeBuilder(registry).addProperty("a", UNKNOWN_TYPE, null).build(); [EOL]     assertTrue(recordA.isSubtype(recordB)); [EOL]     assertTrue(recordB.isSubtype(recordA)); [EOL] } <line_num>: 113,122
public void testSubtypeWithUnknowns2() throws Exception { [EOL]     JSType recordA = new RecordTypeBuilder(registry).addProperty("a", new FunctionBuilder(registry).withReturnType(NUMBER_TYPE).build(), null).build(); [EOL]     JSType recordB = new RecordTypeBuilder(registry).addProperty("a", new FunctionBuilder(registry).withReturnType(UNKNOWN_TYPE).build(), null).build(); [EOL]     assertTrue(recordA.isSubtype(recordB)); [EOL]     assertTrue(recordB.isSubtype(recordA)); [EOL] } <line_num>: 124,141
public void testSubtypeWithFunctionProps() throws Exception { [EOL]     JSType recordA = new RecordTypeBuilder(registry).addProperty("a", new FunctionBuilder(registry).withReturnType(NUMBER_TYPE).build(), null).build(); [EOL]     JSType recordB = new RecordTypeBuilder(registry).addProperty("a", new FunctionBuilder(registry).withReturnType(STRING_TYPE).build(), null).build(); [EOL]     assertFalse(recordA.isSubtype(recordB)); [EOL]     assertFalse(recordB.isSubtype(recordA)); [EOL] } <line_num>: 143,160
public void testSubtypeWithManyProps() throws Exception { [EOL]     JSType recordA = new RecordTypeBuilder(registry).addProperty("a", NUMBER_TYPE, null).addProperty("b", NUMBER_TYPE, null).build(); [EOL]     JSType recordB = new RecordTypeBuilder(registry).addProperty("a", NUMBER_TYPE, null).addProperty("b", STRING_TYPE, null).build(); [EOL]     JSType recordC = new RecordTypeBuilder(registry).addProperty("a", NUMBER_TYPE, null).addProperty("b", registry.createUnionType(NUMBER_TYPE, STRING_TYPE), null).build(); [EOL]     assertFalse(recordA.isSubtype(recordB)); [EOL]     assertFalse(recordB.isSubtype(recordA)); [EOL]     assertFalse(recordC.isSubtype(recordB)); [EOL]     assertFalse(recordB.isSubtype(recordC)); [EOL] } <line_num>: 162,180
