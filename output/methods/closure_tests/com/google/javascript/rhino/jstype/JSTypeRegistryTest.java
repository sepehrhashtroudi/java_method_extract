public void testGetBuiltInType() { [EOL]     JSTypeRegistry typeRegistry = new JSTypeRegistry(null); [EOL]     assertTypeEquals(typeRegistry.getNativeType(JSTypeNative.BOOLEAN_TYPE), typeRegistry.getType("boolean")); [EOL] } <line_num>: 58,62
public void testGetDeclaredType() { [EOL]     JSTypeRegistry typeRegistry = new JSTypeRegistry(null); [EOL]     JSType type = typeRegistry.createAnonymousObjectType(null); [EOL]     String name = "Foo"; [EOL]     typeRegistry.declareType(name, type); [EOL]     assertTypeEquals(type, typeRegistry.getType(name)); [EOL]     JSTypeRegistry typeRegistry2 = new JSTypeRegistry(null); [EOL]     assertEquals(null, typeRegistry2.getType(name)); [EOL]     assertTypeEquals(type, typeRegistry.getType(name)); [EOL] } <line_num>: 64,75
public void testGetDeclaredTypeInNamespace() { [EOL]     JSTypeRegistry typeRegistry = new JSTypeRegistry(null); [EOL]     JSType type = typeRegistry.createAnonymousObjectType(null); [EOL]     String name = "a.b.Foo"; [EOL]     typeRegistry.declareType(name, type); [EOL]     assertTypeEquals(type, typeRegistry.getType(name)); [EOL]     assertTrue(typeRegistry.hasNamespace("a")); [EOL]     assertTrue(typeRegistry.hasNamespace("a.b")); [EOL] } <line_num>: 77,85
public void testPropertyOnManyTypes() { [EOL]     JSTypeRegistry typeRegistry = new JSTypeRegistry(null); [EOL]     JSType type = null; [EOL]     for (int i = 0; i < 100; i++) { [EOL]         type = typeRegistry.createObjectType("type: " + i, null, null); [EOL]         typeRegistry.registerPropertyOnType("foo", type); [EOL]     } [EOL]     assertFalse(typeRegistry.getGreatestSubtypeWithProperty(type, "foo").isUnknownType()); [EOL] } <line_num>: 87,101
public void testTypeAsNamespace() { [EOL]     JSTypeRegistry typeRegistry = new JSTypeRegistry(null); [EOL]     JSType type = typeRegistry.createAnonymousObjectType(null); [EOL]     String name = "a.b.Foo"; [EOL]     typeRegistry.declareType(name, type); [EOL]     assertTypeEquals(type, typeRegistry.getType(name)); [EOL]     type = typeRegistry.createAnonymousObjectType(null); [EOL]     name = "a.b.Foo.Bar"; [EOL]     typeRegistry.declareType(name, type); [EOL]     assertTypeEquals(type, typeRegistry.getType(name)); [EOL]     assertTrue(typeRegistry.hasNamespace("a")); [EOL]     assertTrue(typeRegistry.hasNamespace("a.b")); [EOL]     assertTrue(typeRegistry.hasNamespace("a.b.Foo")); [EOL] } <line_num>: 103,119
@Override [EOL] public StaticSlot<JSType> getSlot(final String name) { [EOL]     return new SimpleSlot(name, typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE), false); [EOL] } <line_num>: 126,132
public void testGenerationIncrementing1() { [EOL]     SimpleErrorReporter reporter = new SimpleErrorReporter(); [EOL]     final JSTypeRegistry typeRegistry = new JSTypeRegistry(reporter); [EOL]     StaticScope<JSType> scope = new AbstractStaticScope<JSType>() { [EOL]  [EOL]         @Override [EOL]         public StaticSlot<JSType> getSlot(final String name) { [EOL]             return new SimpleSlot(name, typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE), false); [EOL]         } [EOL]     }; [EOL]     ObjectType namedType = (ObjectType) typeRegistry.getType(scope, "Foo", null, 0, 0); [EOL]     ObjectType subNamed = typeRegistry.createObjectType(typeRegistry.createObjectType(namedType)); [EOL]     typeRegistry.setLastGeneration(false); [EOL]     typeRegistry.resolveTypesInScope(scope); [EOL]     assertTrue(subNamed.isUnknownType()); [EOL]     typeRegistry.declareType("Foo", typeRegistry.createAnonymousObjectType(null)); [EOL]     typeRegistry.resolveTypesInScope(scope); [EOL]     assertTrue(subNamed.isUnknownType()); [EOL]     assertNull("Unexpected errors: " + reporter.errors(), reporter.errors()); [EOL]     assertNull("Unexpected warnings: " + reporter.warnings(), reporter.warnings()); [EOL]     typeRegistry.incrementGeneration(); [EOL]     typeRegistry.setLastGeneration(true); [EOL]     typeRegistry.resolveTypesInScope(scope); [EOL]     assertFalse(subNamed.isUnknownType()); [EOL] } <line_num>: 121,162
@Override [EOL] public StaticSlot<JSType> getSlot(final String name) { [EOL]     return new SimpleSlot(name, typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE), false); [EOL] } <line_num>: 169,175
public void testGenerationIncrementing2() { [EOL]     SimpleErrorReporter reporter = new SimpleErrorReporter(); [EOL]     final JSTypeRegistry typeRegistry = new JSTypeRegistry(reporter); [EOL]     StaticScope<JSType> scope = new AbstractStaticScope<JSType>() { [EOL]  [EOL]         @Override [EOL]         public StaticSlot<JSType> getSlot(final String name) { [EOL]             return new SimpleSlot(name, typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE), false); [EOL]         } [EOL]     }; [EOL]     ObjectType namedType = (ObjectType) typeRegistry.getType(scope, "Foo", null, 0, 0); [EOL]     FunctionType functionType = typeRegistry.createFunctionType(namedType); [EOL]     typeRegistry.setLastGeneration(false); [EOL]     typeRegistry.resolveTypesInScope(scope); [EOL]     assertTrue(functionType.getReturnType().isUnknownType()); [EOL]     functionType.resolve(reporter, scope); [EOL]     assertTrue(functionType.getReturnType().isUnknownType()); [EOL]     typeRegistry.declareType("Foo", typeRegistry.createAnonymousObjectType(null)); [EOL]     typeRegistry.resolveTypesInScope(scope); [EOL]     assertTrue(functionType.getReturnType().isUnknownType()); [EOL]     assertNull("Unexpected errors: " + reporter.errors(), reporter.errors()); [EOL]     assertNull("Unexpected warnings: " + reporter.warnings(), reporter.warnings()); [EOL]     typeRegistry.incrementGeneration(); [EOL]     typeRegistry.setLastGeneration(true); [EOL]     typeRegistry.resolveTypesInScope(scope); [EOL]     assertFalse(functionType.getReturnType().isUnknownType()); [EOL] } <line_num>: 164,206
public void testTypeResolutionModes() { [EOL]     SimpleErrorReporter reporter = new SimpleErrorReporter(); [EOL]     JSTypeRegistry lazyExprRegistry = new JSTypeRegistry(reporter); [EOL]     lazyExprRegistry.setResolveMode(ResolveMode.LAZY_EXPRESSIONS); [EOL]     JSTypeRegistry lazyNameRegistry = new JSTypeRegistry(reporter); [EOL]     lazyNameRegistry.setResolveMode(ResolveMode.LAZY_NAMES); [EOL]     JSTypeRegistry immediateRegistry = new JSTypeRegistry(reporter); [EOL]     immediateRegistry.setResolveMode(ResolveMode.IMMEDIATE); [EOL]     Node expr = new Node(Token.QMARK, Node.newString("foo")); [EOL]     StaticScope<JSType> empty = MapBasedScope.emptyScope(); [EOL]     JSType type = lazyExprRegistry.createFromTypeNodes(expr, "source.js", empty); [EOL]     assertTrue(type instanceof UnresolvedTypeExpression); [EOL]     assertTrue(type.isUnknownType()); [EOL]     assertEquals("?", type.toString()); [EOL]     assertNull("Unexpected warnings: " + reporter.warnings(), reporter.warnings()); [EOL]     type = lazyNameRegistry.createFromTypeNodes(expr, "source.js", empty); [EOL]     assertTrue(type instanceof UnionType); [EOL]     assertTrue(type.isUnknownType()); [EOL]     assertEquals("(foo|null)", type.toString()); [EOL]     assertNull("Unexpected warnings: " + reporter.warnings(), reporter.warnings()); [EOL]     type = immediateRegistry.createFromTypeNodes(expr, "source.js", empty); [EOL]     assertTrue(type instanceof UnknownType); [EOL]     assertEquals("Expected warnings", 1, reporter.warnings().size()); [EOL] } <line_num>: 208,243
public void testForceResolve() { [EOL]     SimpleErrorReporter reporter = new SimpleErrorReporter(); [EOL]     JSTypeRegistry lazyExprRegistry = new JSTypeRegistry(reporter); [EOL]     lazyExprRegistry.setResolveMode(ResolveMode.LAZY_EXPRESSIONS); [EOL]     Node expr = new Node(Token.QMARK, Node.newString("foo")); [EOL]     StaticScope<JSType> empty = MapBasedScope.emptyScope(); [EOL]     JSType type = lazyExprRegistry.createFromTypeNodes(expr, "source.js", empty); [EOL]     assertFalse(type.isResolved()); [EOL]     assertTrue(type.forceResolve(reporter, empty).isResolved()); [EOL]     assertEquals("Expected warnings", 1, reporter.warnings().size()); [EOL] } <line_num>: 245,259
public void testAllTypeResolvesImmediately() { [EOL]     JSTypeRegistry lazyExprRegistry = new JSTypeRegistry(new SimpleErrorReporter()); [EOL]     lazyExprRegistry.setResolveMode(ResolveMode.LAZY_EXPRESSIONS); [EOL]     Node expr = new Node(Token.STAR); [EOL]     JSType type = lazyExprRegistry.createFromTypeNodes(expr, "source.js", MapBasedScope.emptyScope()); [EOL]     assertTrue(type instanceof AllType); [EOL] } <line_num>: 261,270
private void assertTypeEquals(JSType a, JSType b) { [EOL]     Asserts.assertTypeEquals(a, b); [EOL] } <line_num>: 272,274
