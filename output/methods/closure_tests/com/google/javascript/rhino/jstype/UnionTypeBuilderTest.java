public void testAllType() { [EOL]     assertUnion("*", ALL_TYPE); [EOL]     assertUnion("*", NUMBER_TYPE, ALL_TYPE); [EOL]     assertUnion("*", ALL_TYPE, NUMBER_TYPE); [EOL]     assertUnion("*", ALL_TYPE, NUMBER_TYPE, NO_TYPE); [EOL] } <line_num>: 50,55
public void testEmptyUnion() { [EOL]     assertUnion("None"); [EOL]     assertUnion("None", NO_TYPE, NO_TYPE); [EOL] } <line_num>: 57,60
public void testUnionTypes() { [EOL]     JSType union = registry.createUnionType(STRING_TYPE, OBJECT_TYPE); [EOL]     assertUnion("*", ALL_TYPE, union); [EOL]     assertUnion("(Object|string)", OBJECT_TYPE, union); [EOL]     assertUnion("(Object|string)", union, OBJECT_TYPE); [EOL]     assertUnion("(Object|number|string)", NUMBER_TYPE, union); [EOL]     assertUnion("(Object|number|string)", union, NUMBER_TYPE); [EOL]     assertUnion("(Object|boolean|number|string)", union, registry.createUnionType(NUMBER_TYPE, BOOLEAN_TYPE)); [EOL]     assertUnion("(Object|boolean|number|string)", registry.createUnionType(NUMBER_TYPE, BOOLEAN_TYPE), union); [EOL]     assertUnion("(Object|string)", union, STRING_OBJECT_TYPE); [EOL] } <line_num>: 62,75
public void testUnknownTypes() { [EOL]     JSType unresolvedNameA1 = new NamedType(registry, "not.resolved.A", null, -1, -1); [EOL]     JSType unresolvedNameA2 = new NamedType(registry, "not.resolved.A", null, -1, -1); [EOL]     JSType unresolvedNameB = new NamedType(registry, "not.resolved.B", null, -1, -1); [EOL]     assertUnion("?", UNKNOWN_TYPE); [EOL]     assertUnion("?", UNKNOWN_TYPE, UNKNOWN_TYPE); [EOL]     assertUnion("?", UNKNOWN_TYPE, unresolvedNameA1); [EOL]     assertUnion("not.resolved.A", unresolvedNameA1, unresolvedNameA2); [EOL]     assertUnion("(not.resolved.A|not.resolved.B)", unresolvedNameA1, unresolvedNameB); [EOL]     assertUnion("(Object|not.resolved.A)", unresolvedNameA1, OBJECT_TYPE); [EOL] } <line_num>: 77,94
public void testRemovalOfDupes() { [EOL]     JSType stringAndObject = registry.createUnionType(STRING_TYPE, OBJECT_TYPE); [EOL]     assertUnion("(Object|string)", stringAndObject, STRING_OBJECT_TYPE); [EOL]     assertUnion("(Object|string)", STRING_OBJECT_TYPE, stringAndObject); [EOL] } <line_num>: 96,101
public void testRemovalOfDupes2() { [EOL]     JSType union = registry.createUnionType(EVAL_ERROR_TYPE, createFunctionWithReturn(ERROR_TYPE), ERROR_TYPE, createFunctionWithReturn(EVAL_ERROR_TYPE)); [EOL]     assertEquals("(Error|function (): Error)", union.toString()); [EOL] } <line_num>: 103,111
public void testRemovalOfDupes3() { [EOL]     JSType union = registry.createUnionType(ERROR_TYPE, createFunctionWithReturn(EVAL_ERROR_TYPE), EVAL_ERROR_TYPE, createFunctionWithReturn(ERROR_TYPE)); [EOL]     assertEquals("(Error|function (): Error)", union.toString()); [EOL] } <line_num>: 113,121
public void assertUnion(String expected, JSType... types) { [EOL]     UnionTypeBuilder builder = new UnionTypeBuilder(registry); [EOL]     for (JSType type : types) { [EOL]         builder.addAlternate(type); [EOL]     } [EOL]     assertEquals(expected, builder.build().toString()); [EOL] } <line_num>: 123,129
public FunctionType createFunctionWithReturn(JSType type) { [EOL]     return new FunctionBuilder(registry).withParamsNode(registry.createParameters()).withReturnType(type).build(); [EOL] } <line_num>: 131,136
