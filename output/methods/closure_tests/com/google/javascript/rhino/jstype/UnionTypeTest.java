@Override [EOL] public void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     unresolvedNamedType = new NamedType(registry, "not.resolved.named.type", null, -1, -1); [EOL] } <line_num>: 47,52
private void assertTypeCanAssignToItself(JSType type) { [EOL]     assertTrue(type.isSubtype(type)); [EOL] } <line_num>: 57,59
@SuppressWarnings("checked") [EOL] public void testUnionType() throws Exception { [EOL]     UnionType nullOrString = (UnionType) createUnionType(NULL_TYPE, STRING_OBJECT_TYPE); [EOL]     UnionType stringOrNull = (UnionType) createUnionType(STRING_OBJECT_TYPE, NULL_TYPE); [EOL]     Asserts.assertTypeEquals(nullOrString, stringOrNull); [EOL]     Asserts.assertTypeEquals(stringOrNull, nullOrString); [EOL]     assertTypeCanAssignToItself(createUnionType(VOID_TYPE, NUMBER_TYPE)); [EOL]     assertTypeCanAssignToItself(createUnionType(NUMBER_TYPE, STRING_TYPE, OBJECT_TYPE)); [EOL]     assertTypeCanAssignToItself(createUnionType(NUMBER_TYPE, BOOLEAN_TYPE)); [EOL]     assertTypeCanAssignToItself(createUnionType(VOID_TYPE)); [EOL]     UnionType nullOrUnknown = (UnionType) createUnionType(NULL_TYPE, unresolvedNamedType); [EOL]     assertTrue(nullOrUnknown.isUnknownType()); [EOL]     Asserts.assertTypeEquals(nullOrUnknown, NULL_TYPE.getLeastSupertype(nullOrUnknown)); [EOL]     Asserts.assertTypeEquals(nullOrUnknown, nullOrUnknown.getLeastSupertype(NULL_TYPE)); [EOL]     Asserts.assertTypeEquals(UNKNOWN_TYPE, NULL_TYPE.getGreatestSubtype(nullOrUnknown)); [EOL]     Asserts.assertTypeEquals(UNKNOWN_TYPE, nullOrUnknown.getGreatestSubtype(NULL_TYPE)); [EOL]     assertTrue(NULL_TYPE.differsFrom(nullOrUnknown)); [EOL]     assertTrue(nullOrUnknown.differsFrom(NULL_TYPE)); [EOL]     assertFalse(nullOrUnknown.differsFrom(unresolvedNamedType)); [EOL]     assertTrue(NULL_TYPE.isSubtype(nullOrUnknown)); [EOL]     assertTrue(unresolvedNamedType.isSubtype(nullOrUnknown)); [EOL]     assertTrue(nullOrUnknown.isSubtype(NULL_TYPE)); [EOL]     Asserts.assertTypeEquals(unresolvedNamedType, nullOrUnknown.restrictByNotNullOrUndefined()); [EOL]     Asserts.assertTypeEquals(NUMBER_TYPE, nullOrString.findPropertyType("length")); [EOL]     assertEquals(null, nullOrString.findPropertyType("lengthx")); [EOL]     Asserts.assertResolvesToSame(nullOrString); [EOL] } <line_num>: 64,106
public void testGreatestSubtypeUnionTypes1() { [EOL]     Asserts.assertTypeEquals(NULL_TYPE, createNullableType(STRING_TYPE).getGreatestSubtype(createNullableType(NUMBER_TYPE))); [EOL] } <line_num>: 111,114
@SuppressWarnings("checked") [EOL] public void testGreatestSubtypeUnionTypes2() { [EOL]     UnionType evalUriError = (UnionType) createUnionType(EVAL_ERROR_TYPE, URI_ERROR_TYPE); [EOL]     Asserts.assertTypeEquals(evalUriError, evalUriError.getGreatestSubtype(ERROR_TYPE)); [EOL] } <line_num>: 119,125
@SuppressWarnings("checked") [EOL] public void testGreatestSubtypeUnionTypes3() { [EOL]     UnionType nullableOptionalNumber = (UnionType) createUnionType(NULL_TYPE, VOID_TYPE, NUMBER_TYPE); [EOL]     UnionType nullUndefined = (UnionType) createUnionType(VOID_TYPE, NULL_TYPE); [EOL]     Asserts.assertTypeEquals(nullUndefined, nullUndefined.getGreatestSubtype(nullableOptionalNumber)); [EOL]     Asserts.assertTypeEquals(nullUndefined, nullableOptionalNumber.getGreatestSubtype(nullUndefined)); [EOL] } <line_num>: 130,142
public void testGreatestSubtypeUnionTypes4() throws Exception { [EOL]     UnionType errUnion = (UnionType) createUnionType(NULL_TYPE, EVAL_ERROR_TYPE, URI_ERROR_TYPE); [EOL]     Asserts.assertTypeEquals(createUnionType(EVAL_ERROR_TYPE, URI_ERROR_TYPE), errUnion.getGreatestSubtype(ERROR_TYPE)); [EOL] } <line_num>: 147,152
public void testGreatestSubtypeUnionTypes5() throws Exception { [EOL]     JSType errUnion = createUnionType(EVAL_ERROR_TYPE, URI_ERROR_TYPE); [EOL]     Asserts.assertTypeEquals(NO_OBJECT_TYPE, errUnion.getGreatestSubtype(STRING_OBJECT_TYPE)); [EOL] } <line_num>: 157,161
public void testSubtypingUnionTypes() throws Exception { [EOL]     assertTrue(BOOLEAN_TYPE.isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE))); [EOL]     assertTrue(createUnionType(BOOLEAN_TYPE, STRING_TYPE).isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE))); [EOL]     assertTrue(createUnionType(BOOLEAN_TYPE, STRING_TYPE).isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE, NULL_TYPE))); [EOL]     assertTrue(createUnionType(BOOLEAN_TYPE, STRING_TYPE).isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE, NULL_TYPE))); [EOL]     assertTrue(createUnionType(BOOLEAN_TYPE).isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE, NULL_TYPE))); [EOL]     assertTrue(createUnionType(STRING_TYPE).isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE, NULL_TYPE))); [EOL]     assertTrue(createUnionType(STRING_TYPE, NULL_TYPE).isSubtype(ALL_TYPE)); [EOL]     assertTrue(createUnionType(DATE_TYPE, REGEXP_TYPE).isSubtype(OBJECT_TYPE)); [EOL]     assertTrue(createUnionType(URI_ERROR_TYPE, EVAL_ERROR_TYPE).isSubtype(ERROR_TYPE)); [EOL]     assertTrue(createUnionType(URI_ERROR_TYPE, EVAL_ERROR_TYPE).isSubtype(OBJECT_TYPE)); [EOL]     assertFalse(createUnionType(STRING_TYPE, NULL_TYPE).isSubtype(NO_TYPE)); [EOL]     assertFalse(createUnionType(STRING_TYPE, NULL_TYPE).isSubtype(NO_OBJECT_TYPE)); [EOL]     assertFalse(createUnionType(NO_OBJECT_TYPE, NULL_TYPE).isSubtype(OBJECT_TYPE)); [EOL]     assertTrue(NUMBER_TYPE.isSubtype(OBJECT_NUMBER_STRING)); [EOL]     assertTrue(OBJECT_TYPE.isSubtype(OBJECT_NUMBER_STRING)); [EOL]     assertTrue(STRING_TYPE.isSubtype(OBJECT_NUMBER_STRING)); [EOL]     assertTrue(NO_OBJECT_TYPE.isSubtype(OBJECT_NUMBER_STRING)); [EOL]     assertTrue(NUMBER_TYPE.isSubtype(NUMBER_STRING_BOOLEAN)); [EOL]     assertTrue(BOOLEAN_TYPE.isSubtype(NUMBER_STRING_BOOLEAN)); [EOL]     assertTrue(STRING_TYPE.isSubtype(NUMBER_STRING_BOOLEAN)); [EOL]     assertTrue(NUMBER_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN)); [EOL]     assertTrue(OBJECT_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN)); [EOL]     assertTrue(STRING_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN)); [EOL]     assertTrue(BOOLEAN_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN)); [EOL]     assertTrue(NO_OBJECT_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN)); [EOL] } <line_num>: 166,209
@SuppressWarnings("checked") [EOL] public void testSpecialUnionCanAssignTo() throws Exception { [EOL]     UnionType numbers = (UnionType) createUnionType(NUMBER_TYPE, NUMBER_OBJECT_TYPE); [EOL]     assertFalse(numbers.isSubtype(NUMBER_TYPE)); [EOL]     assertFalse(numbers.isSubtype(NUMBER_OBJECT_TYPE)); [EOL]     assertFalse(numbers.isSubtype(EVAL_ERROR_TYPE)); [EOL]     UnionType strings = (UnionType) createUnionType(STRING_OBJECT_TYPE, STRING_TYPE); [EOL]     assertFalse(strings.isSubtype(STRING_TYPE)); [EOL]     assertFalse(strings.isSubtype(STRING_OBJECT_TYPE)); [EOL]     assertFalse(strings.isSubtype(DATE_TYPE)); [EOL]     UnionType booleans = (UnionType) createUnionType(BOOLEAN_OBJECT_TYPE, BOOLEAN_TYPE); [EOL]     assertFalse(booleans.isSubtype(BOOLEAN_TYPE)); [EOL]     assertFalse(booleans.isSubtype(BOOLEAN_OBJECT_TYPE)); [EOL]     assertFalse(booleans.isSubtype(REGEXP_TYPE)); [EOL]     JSType unknown = createUnionType(UNKNOWN_TYPE, DATE_TYPE); [EOL]     assertTrue(unknown.isSubtype(STRING_TYPE)); [EOL]     UnionType stringDate = (UnionType) createUnionType(STRING_OBJECT_TYPE, DATE_TYPE); [EOL]     assertTrue(stringDate.isSubtype(OBJECT_TYPE)); [EOL]     assertFalse(stringDate.isSubtype(STRING_OBJECT_TYPE)); [EOL]     assertFalse(stringDate.isSubtype(DATE_TYPE)); [EOL] } <line_num>: 216,247
@SuppressWarnings("checked") [EOL] public void testCreateUnionType() throws Exception { [EOL]     UnionType optNumber = (UnionType) registry.createUnionType(NUMBER_TYPE, DATE_TYPE); [EOL]     assertTrue(optNumber.contains(NUMBER_TYPE)); [EOL]     assertTrue(optNumber.contains(DATE_TYPE)); [EOL]     UnionType optUnion = (UnionType) registry.createUnionType(REGEXP_TYPE, registry.createUnionType(STRING_OBJECT_TYPE, DATE_TYPE)); [EOL]     assertTrue(optUnion.contains(DATE_TYPE)); [EOL]     assertTrue(optUnion.contains(STRING_OBJECT_TYPE)); [EOL]     assertTrue(optUnion.contains(REGEXP_TYPE)); [EOL] } <line_num>: 253,268
public void testUnionWithUnknown() throws Exception { [EOL]     assertTrue(createUnionType(UNKNOWN_TYPE, NULL_TYPE).isUnknownType()); [EOL] } <line_num>: 271,273
public void testGetRestrictedUnion1() throws Exception { [EOL]     UnionType numStr = (UnionType) createUnionType(NUMBER_TYPE, STRING_TYPE); [EOL]     Asserts.assertTypeEquals(STRING_TYPE, numStr.getRestrictedUnion(NUMBER_TYPE)); [EOL] } <line_num>: 275,278
public void testGetRestrictedUnion2() throws Exception { [EOL]     UnionType numStr = (UnionType) createUnionType(NULL_TYPE, EVAL_ERROR_TYPE, URI_ERROR_TYPE); [EOL]     Asserts.assertTypeEquals(NULL_TYPE, numStr.getRestrictedUnion(ERROR_TYPE)); [EOL] } <line_num>: 280,284
public void testIsEquivalentTo() { [EOL]     UnionType type = (UnionType) createUnionType(NUMBER_TYPE, STRING_TYPE); [EOL]     assertFalse(type.equals(null)); [EOL]     assertTrue(type.isEquivalentTo(type)); [EOL] } <line_num>: 286,290
public void testProxyUnionType() throws Exception { [EOL]     UnionType stringOrNumber = (UnionType) createUnionType(NUMBER_TYPE, STRING_TYPE); [EOL]     UnionType stringOrBoolean = (UnionType) createUnionType(BOOLEAN_TYPE, STRING_TYPE); [EOL]     assertEquals("(boolean|number|string)", stringOrNumber.getLeastSupertype(stringOrBoolean).toString()); [EOL]     assertEquals("string", stringOrNumber.getGreatestSubtype(stringOrBoolean).toString()); [EOL]     assertEquals(TernaryValue.UNKNOWN, stringOrNumber.testForEquality(stringOrBoolean)); [EOL]     assertEquals("(number|string)", stringOrNumber.getTypesUnderEquality(stringOrBoolean).typeA.toString()); [EOL]     assertEquals("string", stringOrNumber.getTypesUnderShallowEquality(stringOrBoolean).typeA.toString()); [EOL]     assertEquals("(number|string)", stringOrNumber.getTypesUnderInequality(stringOrBoolean).typeA.toString()); [EOL]     assertEquals("(number|string)", stringOrNumber.getTypesUnderShallowInequality(stringOrBoolean).typeA.toString()); [EOL]     ObjectType stringOrNumberProxy = new ProxyObjectType(registry, stringOrNumber); [EOL]     ObjectType stringOrBooleanProxy = new ProxyObjectType(registry, stringOrBoolean); [EOL]     assertEquals("(boolean|number|string)", stringOrNumberProxy.getLeastSupertype(stringOrBooleanProxy).toString()); [EOL]     assertEquals("string", stringOrNumberProxy.getGreatestSubtype(stringOrBooleanProxy).toString()); [EOL]     assertEquals(TernaryValue.UNKNOWN, stringOrNumberProxy.testForEquality(stringOrBooleanProxy)); [EOL]     assertEquals("(number|string)", stringOrNumberProxy.getTypesUnderEquality(stringOrBooleanProxy).typeA.toString()); [EOL]     assertEquals("string", stringOrNumberProxy.getTypesUnderShallowEquality(stringOrBooleanProxy).typeA.toString()); [EOL]     assertEquals("(number|string)", stringOrNumberProxy.getTypesUnderInequality(stringOrBooleanProxy).typeA.toString()); [EOL]     assertEquals("(number|string)", stringOrNumberProxy.getTypesUnderShallowInequality(stringOrBooleanProxy).typeA.toString()); [EOL] } <line_num>: 292,355
public void testCollapseUnion1() { [EOL]     assertEquals("*", registry.createUnionType(NUMBER_TYPE, STRING_TYPE).collapseUnion().toString()); [EOL] } <line_num>: 357,362
public void testCollapseUnion2() { [EOL]     assertEquals("?", registry.createUnionType(UNKNOWN_TYPE, NUMBER_TYPE).collapseUnion().toString()); [EOL]     assertEquals("?", registry.createUnionType(NUMBER_TYPE, UNKNOWN_TYPE).collapseUnion().toString()); [EOL] } <line_num>: 364,373
public void testCollapseUnion3() { [EOL]     assertEquals("Object", registry.createUnionType(ARRAY_TYPE, DATE_TYPE).collapseUnion().toString()); [EOL]     assertEquals("Object", registry.createUnionType(ARRAY_TYPE, OBJECT_TYPE).collapseUnion().toString()); [EOL]     assertEquals("Error", registry.createUnionType(ERROR_TYPE, RANGE_ERROR_TYPE).collapseUnion().toString()); [EOL]     assertEquals("Error", registry.createUnionType(EVAL_ERROR_TYPE, RANGE_ERROR_TYPE).collapseUnion().toString()); [EOL]     assertEquals("Error", registry.createUnionType(EVAL_ERROR_TYPE, RANGE_ERROR_TYPE, TYPE_ERROR_TYPE).collapseUnion().toString()); [EOL] } <line_num>: 375,397
public void testCollapseUnion4() { [EOL]     assertEquals("*", registry.createUnionType(OBJECT_TYPE, STRING_TYPE).collapseUnion().toString()); [EOL]     assertEquals("*", registry.createUnionType(STRING_TYPE, OBJECT_TYPE).collapseUnion().toString()); [EOL] } <line_num>: 399,408
public void testCollapseProxyUnion() { [EOL]     ProxyObjectType type = new ProxyObjectType(registry, OBJECT_TYPE); [EOL]     assertTrue(type == type.collapseUnion()); [EOL] } <line_num>: 410,414
public void testShallowEquality() { [EOL]     assertTrue(registry.createUnionType(ARRAY_TYPE, STRING_TYPE).canTestForShallowEqualityWith(OBJECT_TYPE)); [EOL] } <line_num>: 416,420
