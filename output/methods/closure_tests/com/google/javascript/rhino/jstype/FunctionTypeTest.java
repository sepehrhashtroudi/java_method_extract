public void testDefaultReturnType() { [EOL]     FunctionType f = new FunctionBuilder(registry).build(); [EOL]     assertEquals(UNKNOWN_TYPE, f.getReturnType()); [EOL] } <line_num>: 54,57
public void testSupAndInfOfReturnTypes() { [EOL]     FunctionType retString = new FunctionBuilder(registry).withParamsNode(registry.createParameters()).withInferredReturnType(STRING_TYPE).build(); [EOL]     FunctionType retNumber = new FunctionBuilder(registry).withParamsNode(registry.createParameters()).withReturnType(NUMBER_TYPE).build(); [EOL]     assertLeastSupertype("function (): (number|string)", retString, retNumber); [EOL]     assertGreatestSubtype("function (): None", retString, retNumber); [EOL]     assertTrue(retString.isReturnTypeInferred()); [EOL]     assertFalse(retNumber.isReturnTypeInferred()); [EOL]     assertTrue(((FunctionType) retString.getLeastSupertype(retNumber)).isReturnTypeInferred()); [EOL]     assertTrue(((FunctionType) retString.getGreatestSubtype(retString)).isReturnTypeInferred()); [EOL] } <line_num>: 59,80
public void testSupAndInfOfReturnTypesWithDifferentParams() { [EOL]     FunctionType retString = new FunctionBuilder(registry).withParamsNode(registry.createParameters(NUMBER_TYPE)).withInferredReturnType(STRING_TYPE).build(); [EOL]     FunctionType retNumber = new FunctionBuilder(registry).withParamsNode(registry.createParameters()).withReturnType(NUMBER_TYPE).build(); [EOL]     assertLeastSupertype("Function", retString, retNumber); [EOL]     assertGreatestSubtype("function (...[*]): None", retString, retNumber); [EOL] } <line_num>: 82,94
public void testSupAndInfWithDifferentParams() { [EOL]     FunctionType retString = new FunctionBuilder(registry).withParamsNode(registry.createParameters(NUMBER_TYPE)).withReturnType(STRING_TYPE).build(); [EOL]     FunctionType retNumber = new FunctionBuilder(registry).withParamsNode(registry.createParameters(STRING_TYPE)).withReturnType(NUMBER_TYPE).build(); [EOL]     assertLeastSupertype("Function", retString, retNumber); [EOL]     assertGreatestSubtype("function (...[*]): None", retString, retNumber); [EOL] } <line_num>: 96,108
public void testSupAndInfWithDifferentThisTypes() { [EOL]     FunctionType retString = new FunctionBuilder(registry).withParamsNode(registry.createParameters()).withTypeOfThis(OBJECT_TYPE).withReturnType(STRING_TYPE).build(); [EOL]     FunctionType retNumber = new FunctionBuilder(registry).withParamsNode(registry.createParameters()).withTypeOfThis(DATE_TYPE).withReturnType(NUMBER_TYPE).build(); [EOL]     assertLeastSupertype("function (this:Object): (number|string)", retString, retNumber); [EOL]     assertGreatestSubtype("function (this:Date): None", retString, retNumber); [EOL] } <line_num>: 110,124
public void testSupAndInfWithDifferentThisTypes2() { [EOL]     FunctionType retString = new FunctionBuilder(registry).withParamsNode(registry.createParameters()).withTypeOfThis(ARRAY_TYPE).withReturnType(STRING_TYPE).build(); [EOL]     FunctionType retNumber = new FunctionBuilder(registry).withParamsNode(registry.createParameters()).withTypeOfThis(DATE_TYPE).withReturnType(NUMBER_TYPE).build(); [EOL]     assertLeastSupertype("function (this:(Array|Date)): (number|string)", retString, retNumber); [EOL]     assertGreatestSubtype("function (this:NoObject): None", retString, retNumber); [EOL] } <line_num>: 126,140
public void testSupAndInfOfReturnTypesWithNumOfParams() { [EOL]     FunctionType twoNumbers = new FunctionBuilder(registry).withParamsNode(registry.createParameters(NUMBER_TYPE, NUMBER_TYPE)).withReturnType(BOOLEAN_TYPE).build(); [EOL]     FunctionType oneNumber = new FunctionBuilder(registry).withParamsNode(registry.createParameters(NUMBER_TYPE)).withReturnType(BOOLEAN_TYPE).build(); [EOL]     assertLeastSupertype("function (number, number): boolean", twoNumbers, oneNumber); [EOL]     assertGreatestSubtype("function (number): boolean", twoNumbers, oneNumber); [EOL] } <line_num>: 142,154
public void testSubtypeWithInterfaceThisType() { [EOL]     FunctionType iface = registry.createInterfaceType("I", null); [EOL]     FunctionType ifaceReturnBoolean = new FunctionBuilder(registry).withParamsNode(registry.createParameters()).withTypeOfThis(iface.getInstanceType()).withReturnType(BOOLEAN_TYPE).build(); [EOL]     FunctionType objReturnBoolean = new FunctionBuilder(registry).withParamsNode(registry.createParameters()).withTypeOfThis(OBJECT_TYPE).withReturnType(BOOLEAN_TYPE).build(); [EOL]     assertTrue(objReturnBoolean.isSubtype(ifaceReturnBoolean)); [EOL] } <line_num>: 156,167
public void testOrdinaryFunctionPrototype() { [EOL]     FunctionType oneNumber = new FunctionBuilder(registry).withParamsNode(registry.createParameters(NUMBER_TYPE)).withReturnType(BOOLEAN_TYPE).build(); [EOL]     assertEquals(ImmutableSet.<String>of(), oneNumber.getOwnPropertyNames()); [EOL] } <line_num>: 169,174
public void testCtorWithPrototypeSet() { [EOL]     FunctionType ctor = registry.createConstructorType("Foo", null, null, null, null); [EOL]     assertFalse(ctor.getInstanceType().isUnknownType()); [EOL]     Node node = new Node(Token.OBJECTLIT); [EOL]     ctor.defineDeclaredProperty("prototype", UNKNOWN_TYPE, node); [EOL]     assertTrue(ctor.getInstanceType().isUnknownType()); [EOL]     assertEquals(ImmutableSet.<String>of("prototype"), ctor.getOwnPropertyNames()); [EOL]     assertTrue(ctor.isPropertyTypeInferred("prototype")); [EOL]     assertTrue(ctor.getPropertyType("prototype").isUnknownType()); [EOL]     assertEquals(node, ctor.getPropertyNode("prototype")); [EOL] } <line_num>: 176,191
public void testEmptyFunctionTypes() { [EOL]     assertTrue(LEAST_FUNCTION_TYPE.isEmptyType()); [EOL]     assertFalse(GREATEST_FUNCTION_TYPE.isEmptyType()); [EOL] } <line_num>: 193,196
public void testInterfacePrototypeChain1() { [EOL]     FunctionType iface = registry.createInterfaceType("I", null); [EOL]     assertTypeEquals(iface.getPrototype(), iface.getInstanceType().getImplicitPrototype()); [EOL]     assertTypeEquals(OBJECT_TYPE, iface.getPrototype().getImplicitPrototype()); [EOL] } <line_num>: 198,206
public void testInterfacePrototypeChain2() { [EOL]     FunctionType iface = registry.createInterfaceType("I", null); [EOL]     iface.getPrototype().defineDeclaredProperty("numberProp", NUMBER_TYPE, null); [EOL]     FunctionType subIface = registry.createInterfaceType("SubI", null); [EOL]     subIface.setExtendedInterfaces(Lists.<ObjectType>newArrayList(iface.getInstanceType())); [EOL]     assertTypeEquals(subIface.getPrototype(), subIface.getInstanceType().getImplicitPrototype()); [EOL]     assertTypeEquals(OBJECT_TYPE, subIface.getPrototype().getImplicitPrototype()); [EOL]     ObjectType subIfaceInst = subIface.getInstanceType(); [EOL]     assertTrue(subIfaceInst.hasProperty("numberProp")); [EOL]     assertTrue(subIfaceInst.isPropertyTypeDeclared("numberProp")); [EOL]     assertFalse(subIfaceInst.isPropertyTypeInferred("numberProp")); [EOL] } <line_num>: 208,227
private void assertLeastSupertype(String s, JSType t1, JSType t2) { [EOL]     assertEquals(s, t1.getLeastSupertype(t2).toString()); [EOL]     assertEquals(s, t2.getLeastSupertype(t1).toString()); [EOL] } <line_num>: 229,232
private void assertGreatestSubtype(String s, JSType t1, JSType t2) { [EOL]     assertEquals(s, t1.getGreatestSubtype(t2).toString()); [EOL]     assertEquals(s, t2.getGreatestSubtype(t1).toString()); [EOL] } <line_num>: 234,237
public void testIsEquivalentTo() { [EOL]     FunctionType type = new FunctionBuilder(registry).build(); [EOL]     assertFalse(type.equals(null)); [EOL]     assertTrue(type.isEquivalentTo(type)); [EOL] } <line_num>: 239,243
public void testIsEquivalentToParams() { [EOL]     FunctionType oneNum = new FunctionBuilder(registry).withParamsNode(registry.createParameters(NUMBER_TYPE)).build(); [EOL]     FunctionType optNum = new FunctionBuilder(registry).withParamsNode(registry.createOptionalParameters(NUMBER_TYPE)).build(); [EOL]     FunctionType varNum = new FunctionBuilder(registry).withParamsNode(registry.createParametersWithVarArgs(NUMBER_TYPE)).build(); [EOL]     Asserts.assertEquivalenceOperations(oneNum, oneNum); [EOL]     Asserts.assertEquivalenceOperations(optNum, optNum); [EOL]     Asserts.assertEquivalenceOperations(varNum, varNum); [EOL]     assertFalse(oneNum.isEquivalentTo(optNum)); [EOL]     assertFalse(oneNum.isEquivalentTo(varNum)); [EOL]     assertFalse(optNum.isEquivalentTo(varNum)); [EOL] } <line_num>: 245,261
public void testIsEquivalentOptAndVarArgs() { [EOL]     FunctionType varNum = new FunctionBuilder(registry).withParamsNode(registry.createParametersWithVarArgs(NUMBER_TYPE)).build(); [EOL]     FunctionParamBuilder builder = new FunctionParamBuilder(registry); [EOL]     builder.addOptionalParams(NUMBER_TYPE); [EOL]     builder.addVarArgs(NUMBER_TYPE); [EOL]     FunctionType optAndVarNum = new FunctionBuilder(registry).withParamsNode(builder.build()).build(); [EOL]     assertFalse(varNum.isEquivalentTo(optAndVarNum)); [EOL]     assertFalse(optAndVarNum.isEquivalentTo(varNum)); [EOL] } <line_num>: 263,279
public void testRecursiveFunction() { [EOL]     ProxyObjectType loop = new ProxyObjectType(registry, NUMBER_TYPE); [EOL]     FunctionType fn = new FunctionBuilder(registry).withParamsNode(registry.createParameters(loop)).withReturnType(loop).build(); [EOL]     loop.setReferencedType(fn); [EOL]     assertEquals("function (Function): Function", fn.toString()); [EOL]     Asserts.assertEquivalenceOperations(fn, loop); [EOL] } <line_num>: 281,291
public void testBindSignature() { [EOL]     FunctionType fn = new FunctionBuilder(registry).withTypeOfThis(DATE_TYPE).withParamsNode(registry.createParameters(STRING_TYPE, NUMBER_TYPE)).withReturnType(BOOLEAN_TYPE).build(); [EOL]     assertEquals("function ((Date|null|undefined), string=, number=):" + " function (...[?]): boolean", fn.getPropertyType("bind").toString()); [EOL] } <line_num>: 293,303
public void testCallSignature1() { [EOL]     FunctionType fn = new FunctionBuilder(registry).withTypeOfThis(DATE_TYPE).withParamsNode(registry.createParameters(STRING_TYPE, NUMBER_TYPE)).withReturnType(BOOLEAN_TYPE).build(); [EOL]     assertEquals("function ((Date|null|undefined), string, number): boolean", fn.getPropertyType("call").toString()); [EOL] } <line_num>: 305,314
public void testCallSignature2() { [EOL]     FunctionType fn = new FunctionBuilder(registry).withTypeOfThis(DATE_TYPE).withParamsNode(registry.createParameters()).withReturnType(BOOLEAN_TYPE).build(); [EOL]     assertEquals("function ((Date|null)=): boolean", fn.getPropertyType("call").toString()); [EOL] } <line_num>: 316,325
public void testTemplatedFunctionDerivedFunctions() { [EOL]     FunctionType fn = new FunctionBuilder(registry).withTypeOfThis(new TemplateType(registry, "T")).withTemplateKeys(ImmutableList.of("T")).withReturnType(BOOLEAN_TYPE).build(); [EOL]     assertEquals("[T]", fn.getPropertyType("call").getTemplateKeys().toString()); [EOL]     assertEquals("[T]", fn.getPropertyType("apply").getTemplateKeys().toString()); [EOL]     assertEquals("[T]", fn.getPropertyType("bind").getTemplateKeys().toString()); [EOL]     assertEquals("[T]", fn.getBindReturnType(0).getTemplateKeys().toString()); [EOL] } <line_num>: 327,341
public void testPrint() { [EOL]     FunctionType fn = new FunctionBuilder(registry).withTypeOfThis(new TemplateType(registry, "T")).withReturnType(BOOLEAN_TYPE).build(); [EOL]     assertEquals("function (this:T, ...[?]): boolean", fn.toString()); [EOL] } <line_num>: 343,348
public void testSetImplementsOnInterface() { [EOL]     FunctionType iface = registry.createInterfaceType("I", null); [EOL]     FunctionType subIface = registry.createInterfaceType("SubI", null); [EOL]     try { [EOL]         subIface.setImplementedInterfaces(ImmutableList.of(iface.getInstanceType())); [EOL]         fail("Expected exception"); [EOL]     } catch (UnsupportedOperationException e) { [EOL]     } [EOL] } <line_num>: 350,360
