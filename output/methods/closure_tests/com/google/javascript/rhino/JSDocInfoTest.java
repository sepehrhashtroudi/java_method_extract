private JSType getNativeType(JSTypeNative typeId) { [EOL]     return registry.getNativeType(typeId); [EOL] } <line_num>: 62,64
public void testVisibilityOrdinal() { [EOL]     assertEquals(0, PRIVATE.ordinal()); [EOL]     assertEquals(1, PROTECTED.ordinal()); [EOL]     assertEquals(2, PUBLIC.ordinal()); [EOL] } <line_num>: 70,74
public void testSetType() { [EOL]     JSDocInfo info = new JSDocInfo(); [EOL]     info.setType(fromString("string")); [EOL]     assertNull(info.getBaseType()); [EOL]     assertNull(info.getDescription()); [EOL]     assertNull(info.getEnumParameterType()); [EOL]     assertEquals(0, info.getParameterCount()); [EOL]     assertNull(info.getReturnType()); [EOL]     assertTypeEquals(STRING_TYPE, resolve(info.getType())); [EOL]     assertNull(info.getVisibility()); [EOL]     assertTrue(info.hasType()); [EOL]     assertFalse(info.isConstant()); [EOL]     assertFalse(info.isConstructor()); [EOL]     assertFalse(info.isHidden()); [EOL]     assertFalse(info.shouldPreserveTry()); [EOL] } <line_num>: 76,92
public void testSetTypeAndVisibility() { [EOL]     JSDocInfo info = new JSDocInfo(); [EOL]     info.setType(fromString("string")); [EOL]     info.setVisibility(PROTECTED); [EOL]     assertNull(info.getBaseType()); [EOL]     assertNull(info.getDescription()); [EOL]     assertNull(info.getEnumParameterType()); [EOL]     assertEquals(0, info.getParameterCount()); [EOL]     assertNull(info.getReturnType()); [EOL]     assertTypeEquals(STRING_TYPE, resolve(info.getType())); [EOL]     assertEquals(PROTECTED, info.getVisibility()); [EOL]     assertTrue(info.hasType()); [EOL]     assertFalse(info.isConstant()); [EOL]     assertFalse(info.isConstructor()); [EOL]     assertFalse(info.isHidden()); [EOL]     assertFalse(info.shouldPreserveTry()); [EOL] } <line_num>: 94,111
public void testSetReturnType() { [EOL]     JSDocInfo info = new JSDocInfo(); [EOL]     info.setReturnType(fromString("string")); [EOL]     assertNull(info.getBaseType()); [EOL]     assertNull(info.getDescription()); [EOL]     assertNull(info.getEnumParameterType()); [EOL]     assertEquals(0, info.getParameterCount()); [EOL]     assertTypeEquals(STRING_TYPE, resolve(info.getReturnType())); [EOL]     assertNull(info.getType()); [EOL]     assertNull(info.getVisibility()); [EOL]     assertFalse(info.hasType()); [EOL]     assertFalse(info.isConstant()); [EOL]     assertFalse(info.isConstructor()); [EOL]     assertFalse(info.isHidden()); [EOL]     assertFalse(info.shouldPreserveTry()); [EOL] } <line_num>: 113,129
public void testSetReturnTypeAndBaseType() { [EOL]     JSDocInfo info = new JSDocInfo(); [EOL]     info.setBaseType(new JSTypeExpression(new Node(Token.BANG, Node.newString("Number")), "")); [EOL]     info.setReturnType(fromString("string")); [EOL]     assertTypeEquals(NUMBER_OBJECT_TYPE, resolve(info.getBaseType())); [EOL]     assertNull(info.getDescription()); [EOL]     assertNull(info.getEnumParameterType()); [EOL]     assertEquals(0, info.getParameterCount()); [EOL]     assertTypeEquals(STRING_TYPE, resolve(info.getReturnType())); [EOL]     assertNull(info.getType()); [EOL]     assertNull(info.getVisibility()); [EOL]     assertFalse(info.hasType()); [EOL]     assertFalse(info.isConstant()); [EOL]     assertFalse(info.isConstructor()); [EOL]     assertFalse(info.isHidden()); [EOL]     assertFalse(info.shouldPreserveTry()); [EOL] } <line_num>: 131,151
public void testSetEnumParameterType() { [EOL]     JSDocInfo info = new JSDocInfo(); [EOL]     info.setEnumParameterType(fromString("string")); [EOL]     assertNull(info.getBaseType()); [EOL]     assertNull(info.getDescription()); [EOL]     assertTypeEquals(STRING_TYPE, resolve(info.getEnumParameterType())); [EOL]     assertEquals(0, info.getParameterCount()); [EOL]     assertNull(info.getReturnType()); [EOL]     assertNull(info.getType()); [EOL]     assertNull(info.getVisibility()); [EOL]     assertFalse(info.hasType()); [EOL]     assertFalse(info.isConstant()); [EOL]     assertFalse(info.isConstructor()); [EOL]     assertFalse(info.isHidden()); [EOL]     assertFalse(info.shouldPreserveTry()); [EOL] } <line_num>: 153,170
public void testMultipleSetType() { [EOL]     JSDocInfo info = new JSDocInfo(); [EOL]     info.setType(fromString("number")); [EOL]     try { [EOL]         info.setReturnType(fromString("boolean")); [EOL]         fail("Expected exception"); [EOL]     } catch (IllegalStateException e) { [EOL]     } [EOL]     try { [EOL]         info.setEnumParameterType(fromString("string")); [EOL]         fail("Expected exception"); [EOL]     } catch (IllegalStateException e) { [EOL]     } [EOL]     try { [EOL]         info.setTypedefType(fromString("string")); [EOL]         fail("Expected exception"); [EOL]     } catch (IllegalStateException e) { [EOL]     } [EOL]     assertTypeEquals(NUMBER_TYPE, resolve(info.getType())); [EOL]     assertNull(info.getReturnType()); [EOL]     assertNull(info.getEnumParameterType()); [EOL]     assertNull(info.getTypedefType()); [EOL]     assertTrue(info.hasType()); [EOL] } <line_num>: 172,196
public void testMultipleSetType2() { [EOL]     JSDocInfo info = new JSDocInfo(); [EOL]     info.setReturnType(fromString("boolean")); [EOL]     try { [EOL]         info.setType(fromString("number")); [EOL]         fail("Expected exception"); [EOL]     } catch (IllegalStateException e) { [EOL]     } [EOL]     try { [EOL]         info.setEnumParameterType(fromString("string")); [EOL]         fail("Expected exception"); [EOL]     } catch (IllegalStateException e) { [EOL]     } [EOL]     try { [EOL]         info.setTypedefType(fromString("string")); [EOL]         fail("Expected exception"); [EOL]     } catch (IllegalStateException e) { [EOL]     } [EOL]     assertTypeEquals(BOOLEAN_TYPE, resolve(info.getReturnType())); [EOL]     assertNull(info.getEnumParameterType()); [EOL]     assertNull(info.getType()); [EOL]     assertNull(info.getTypedefType()); [EOL]     assertFalse(info.hasType()); [EOL] } <line_num>: 198,224
public void testMultipleSetType3() { [EOL]     JSDocInfo info = new JSDocInfo(); [EOL]     info.setEnumParameterType(fromString("boolean")); [EOL]     try { [EOL]         info.setType(fromString("number")); [EOL]         fail("Expected exception"); [EOL]     } catch (IllegalStateException e) { [EOL]     } [EOL]     try { [EOL]         info.setReturnType(fromString("string")); [EOL]         fail("Expected exception"); [EOL]     } catch (IllegalStateException e) { [EOL]     } [EOL]     try { [EOL]         info.setTypedefType(fromString("string")); [EOL]         fail("Expected exception"); [EOL]     } catch (IllegalStateException e) { [EOL]     } [EOL]     assertNull(info.getType()); [EOL]     assertNull(info.getTypedefType()); [EOL]     assertNull(info.getReturnType()); [EOL]     assertTypeEquals(BOOLEAN_TYPE, resolve(info.getEnumParameterType())); [EOL] } <line_num>: 226,250
public void testSetTypedefType() { [EOL]     JSDocInfo info = new JSDocInfo(); [EOL]     info.setTypedefType(fromString("boolean")); [EOL]     assertTypeEquals(BOOLEAN_TYPE, resolve(info.getTypedefType())); [EOL]     assertTrue(info.hasTypedefType()); [EOL]     assertFalse(info.hasType()); [EOL]     assertFalse(info.hasEnumParameterType()); [EOL]     assertFalse(info.hasReturnType()); [EOL] } <line_num>: 252,262
public void testSetConstant() { [EOL]     JSDocInfo info = new JSDocInfo(); [EOL]     info.setConstant(true); [EOL]     assertFalse(info.hasType()); [EOL]     assertTrue(info.isConstant()); [EOL]     assertFalse(info.isConstructor()); [EOL]     assertFalse(info.isDefine()); [EOL]     assertFalse(info.isHidden()); [EOL]     assertFalse(info.shouldPreserveTry()); [EOL] } <line_num>: 264,274
public void testSetConstructor() { [EOL]     JSDocInfo info = new JSDocInfo(); [EOL]     info.setConstructor(true); [EOL]     assertFalse(info.isConstant()); [EOL]     assertTrue(info.isConstructor()); [EOL]     assertFalse(info.isDefine()); [EOL]     assertFalse(info.isHidden()); [EOL]     assertFalse(info.shouldPreserveTry()); [EOL] } <line_num>: 276,285
public void testSetDefine() { [EOL]     JSDocInfo info = new JSDocInfo(); [EOL]     info.setDefine(true); [EOL]     assertTrue(info.isConstant()); [EOL]     assertFalse(info.isConstructor()); [EOL]     assertTrue(info.isDefine()); [EOL]     assertFalse(info.isHidden()); [EOL]     assertFalse(info.shouldPreserveTry()); [EOL] } <line_num>: 287,296
public void testSetHidden() { [EOL]     JSDocInfo info = new JSDocInfo(); [EOL]     info.setHidden(true); [EOL]     assertFalse(info.hasType()); [EOL]     assertFalse(info.isConstant()); [EOL]     assertFalse(info.isConstructor()); [EOL]     assertFalse(info.isDefine()); [EOL]     assertTrue(info.isHidden()); [EOL]     assertFalse(info.shouldPreserveTry()); [EOL] } <line_num>: 298,308
public void testSetShouldPreserveTry() { [EOL]     JSDocInfo info = new JSDocInfo(); [EOL]     info.setShouldPreserveTry(true); [EOL]     assertFalse(info.isConstant()); [EOL]     assertFalse(info.isConstructor()); [EOL]     assertFalse(info.isDefine()); [EOL]     assertFalse(info.isHidden()); [EOL]     assertTrue(info.shouldPreserveTry()); [EOL] } <line_num>: 310,319
public void testSetNoTypeCheck() { [EOL]     JSDocInfo info = new JSDocInfo(); [EOL]     info.setNoCheck(true); [EOL]     assertFalse(info.isDeprecated()); [EOL]     assertFalse(info.isNoAlias()); [EOL]     assertFalse(info.isOverride()); [EOL]     assertTrue(info.isNoTypeCheck()); [EOL] } <line_num>: 321,329
public void testSetOverride() { [EOL]     JSDocInfo info = new JSDocInfo(); [EOL]     info.setOverride(true); [EOL]     assertFalse(info.isDeprecated()); [EOL]     assertFalse(info.isNoAlias()); [EOL]     assertTrue(info.isOverride()); [EOL] } <line_num>: 331,338
public void testSetExport() { [EOL]     JSDocInfo info = new JSDocInfo(); [EOL]     info.setExport(true); [EOL]     assertTrue(info.isExport()); [EOL] } <line_num>: 340,345
public void testSetNoAlias() { [EOL]     JSDocInfo info = new JSDocInfo(); [EOL]     info.setNoAlias(true); [EOL]     assertFalse(info.isDeprecated()); [EOL]     assertFalse(info.isOverride()); [EOL]     assertTrue(info.isNoAlias()); [EOL] } <line_num>: 347,354
public void testSetDeprecated() { [EOL]     JSDocInfo info = new JSDocInfo(); [EOL]     info.setDeprecated(true); [EOL]     assertFalse(info.isNoAlias()); [EOL]     assertFalse(info.isOverride()); [EOL]     assertTrue(info.isDeprecated()); [EOL] } <line_num>: 356,363
public void testMultipleSetFlags1() { [EOL]     JSDocInfo info = new JSDocInfo(); [EOL]     info.setConstant(true); [EOL]     info.setConstructor(true); [EOL]     info.setHidden(true); [EOL]     info.setShouldPreserveTry(true); [EOL]     assertFalse(info.hasType()); [EOL]     assertTrue(info.isConstant()); [EOL]     assertTrue(info.isConstructor()); [EOL]     assertFalse(info.isDefine()); [EOL]     assertTrue(info.isHidden()); [EOL]     assertTrue(info.shouldPreserveTry()); [EOL]     info.setHidden(false); [EOL]     assertTrue(info.isConstant()); [EOL]     assertTrue(info.isConstructor()); [EOL]     assertFalse(info.isDefine()); [EOL]     assertFalse(info.isHidden()); [EOL]     assertTrue(info.shouldPreserveTry()); [EOL]     info.setConstant(false); [EOL]     info.setConstructor(false); [EOL]     assertFalse(info.isConstant()); [EOL]     assertFalse(info.isConstructor()); [EOL]     assertFalse(info.isDefine()); [EOL]     assertFalse(info.isHidden()); [EOL]     assertTrue(info.shouldPreserveTry()); [EOL]     info.setConstructor(true); [EOL]     assertFalse(info.isConstant()); [EOL]     assertTrue(info.isConstructor()); [EOL]     assertFalse(info.isDefine()); [EOL]     assertFalse(info.isHidden()); [EOL]     assertTrue(info.shouldPreserveTry()); [EOL] } <line_num>: 365,403
public void testSetFileOverviewWithDocumentationOff() { [EOL]     JSDocInfo info = new JSDocInfo(); [EOL]     info.documentFileOverview("hi bob"); [EOL]     assertNull(info.getFileOverview()); [EOL] } <line_num>: 405,409
public void testSetFileOverviewWithDocumentationOn() { [EOL]     JSDocInfo info = new JSDocInfo(true); [EOL]     info.documentFileOverview("hi bob"); [EOL]     assertEquals("hi bob", info.getFileOverview()); [EOL] } <line_num>: 411,415
public void testSetSuppressions() { [EOL]     JSDocInfo info = new JSDocInfo(true); [EOL]     info.setSuppressions(Sets.newHashSet("sam", "bob")); [EOL]     assertEquals(Sets.newHashSet("bob", "sam"), info.getSuppressions()); [EOL] } <line_num>: 417,421
public void testSetModifies() { [EOL]     JSDocInfo info = new JSDocInfo(true); [EOL]     info.setModifies(Sets.newHashSet("this")); [EOL]     assertEquals(Sets.newHashSet("this"), info.getModifies()); [EOL]     info = new JSDocInfo(true); [EOL]     info.setModifies(Sets.newHashSet("arguments")); [EOL]     assertEquals(Sets.newHashSet("arguments"), info.getModifies()); [EOL] } <line_num>: 423,431
private JSTypeExpression fromString(String s) { [EOL]     return new JSTypeExpression(Node.newString(s), ""); [EOL] } <line_num>: 434,436
private JSType resolve(JSTypeExpression n, String... warnings) { [EOL]     errorReporter.setWarnings(warnings); [EOL]     return n.evaluate(null, registry); [EOL] } <line_num>: 438,441
private void assertTypeEquals(JSTypeNative a, JSType b) { [EOL]     assertTypeEquals(getNativeType(a), b); [EOL] } <line_num>: 443,445
private void assertTypeEquals(JSType a, JSType b) { [EOL]     Asserts.assertTypeEquals(a, b); [EOL] } <line_num>: 447,449
