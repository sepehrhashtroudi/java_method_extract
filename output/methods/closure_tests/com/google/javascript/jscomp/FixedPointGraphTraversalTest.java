@Override [EOL] public boolean traverseEdge(Counter source, String e, Counter dest) { [EOL]     dest.value++; [EOL]     return dest.value <= maxChange; [EOL] } <line_num>: 42,46
@Override [EOL] public void setUp() { [EOL]     A = new Counter(); [EOL]     B = new Counter(); [EOL]     C = new Counter(); [EOL]     D = new Counter(); [EOL]     E = new Counter(); [EOL]     graph = LinkedDirectedGraph.create(); [EOL]     graph.createDirectedGraphNode(A); [EOL]     graph.createDirectedGraphNode(B); [EOL]     graph.createDirectedGraphNode(C); [EOL]     graph.createDirectedGraphNode(D); [EOL]     graph.createDirectedGraphNode(E); [EOL]     graph.connect(A, "->", B); [EOL]     graph.connect(A, "->", C); [EOL]     graph.connect(A, "->", D); [EOL]     graph.connect(B, "->", D); [EOL]     graph.connect(C, "->", E); [EOL]     graph.connect(D, "->", E); [EOL]     graph.connect(E, "->", D); [EOL] } <line_num>: 67,89
public void testGraph1() { [EOL]     maxChange = 0; [EOL]     traversal.computeFixedPoint(graph, A); [EOL]     assertEquals(0, A.value); [EOL]     assertEquals(1, B.value); [EOL]     assertEquals(1, C.value); [EOL]     assertEquals(1, D.value); [EOL]     assertEquals(0, E.value); [EOL] } <line_num>: 91,100
public void testGraph2() { [EOL]     maxChange = 0; [EOL]     traversal.computeFixedPoint(graph, D); [EOL]     assertEquals(0, A.value); [EOL]     assertEquals(0, B.value); [EOL]     assertEquals(0, C.value); [EOL]     assertEquals(0, D.value); [EOL]     assertEquals(1, E.value); [EOL] } <line_num>: 102,111
public void testGraph3() { [EOL]     maxChange = 1; [EOL]     traversal.computeFixedPoint(graph, A); [EOL]     assertEquals(0, A.value); [EOL]     assertEquals(1, B.value); [EOL]     assertEquals(1, C.value); [EOL]     assertEquals(3, D.value); [EOL]     assertEquals(2, E.value); [EOL] } <line_num>: 113,122
public void testGraph4() { [EOL]     maxChange = 1; [EOL]     traversal.computeFixedPoint(graph, D); [EOL]     assertEquals(0, A.value); [EOL]     assertEquals(0, B.value); [EOL]     assertEquals(0, C.value); [EOL]     assertEquals(1, D.value); [EOL]     assertEquals(2, E.value); [EOL] } <line_num>: 124,133
public void testGraph5() { [EOL]     maxChange = 5; [EOL]     traversal.computeFixedPoint(graph, A); [EOL]     assertEquals(0, A.value); [EOL]     assertEquals(1, B.value); [EOL]     assertEquals(1, C.value); [EOL]     assertEquals(6, D.value); [EOL]     assertEquals(5, E.value); [EOL] } <line_num>: 135,144
public void testGraph6() { [EOL]     maxChange = 5; [EOL]     traversal.computeFixedPoint(graph, B); [EOL]     assertEquals(0, A.value); [EOL]     assertEquals(0, B.value); [EOL]     assertEquals(0, C.value); [EOL]     assertEquals(6, D.value); [EOL]     assertEquals(5, E.value); [EOL] } <line_num>: 146,155
@Override [EOL] public boolean traverseEdge(Counter source, String e, Counter dest) { [EOL]     return true; [EOL] } <line_num>: 164,167
public void testGraph8() { [EOL]     maxChange = 2; [EOL]     traversal.computeFixedPoint(graph, A); [EOL]     try { [EOL]         traversal = new FixedPointGraphTraversal<Counter, String>(new EdgeCallback<Counter, String>() { [EOL]  [EOL]             @Override [EOL]             public boolean traverseEdge(Counter source, String e, Counter dest) { [EOL]                 return true; [EOL]             } [EOL]         }); [EOL]         traversal.computeFixedPoint(graph, A); [EOL]         fail("Expecting Error: " + FixedPointGraphTraversal.NON_HALTING_ERROR_MSG); [EOL]     } catch (IllegalStateException e) { [EOL]         assertEquals(e.getMessage(), FixedPointGraphTraversal.NON_HALTING_ERROR_MSG); [EOL]     } [EOL] } <line_num>: 157,176
public void testGraph9() { [EOL]     maxChange = 0; [EOL]     traversal.computeFixedPoint(graph); [EOL]     assertEquals(0, A.value); [EOL]     assertEquals(1, B.value); [EOL]     assertEquals(1, C.value); [EOL]     assertEquals(3, D.value); [EOL]     assertEquals(2, E.value); [EOL] } <line_num>: 178,190
public void testGraph10() { [EOL]     maxChange = 5; [EOL]     A = new Counter(); [EOL]     B = new Counter(); [EOL]     graph = LinkedDirectedGraph.create(); [EOL]     graph.createDirectedGraphNode(A); [EOL]     graph.createDirectedGraphNode(B); [EOL]     graph.connect(A, "->", A); [EOL]     graph.connect(A, "->", B); [EOL]     traversal.computeFixedPoint(graph); [EOL]     assertEquals(6, A.value); [EOL]     assertEquals(6, B.value); [EOL] } <line_num>: 192,210
