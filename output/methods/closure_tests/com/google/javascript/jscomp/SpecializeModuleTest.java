public SpecializeModuleTest() { [EOL]     super(SHARED_EXTERNS); [EOL] } <line_num>: 33,35
FunctionFinder(String target) { [EOL]     this.target = target; [EOL] } <line_num>: 510,512
@Override [EOL] protected CompilerPass create(AbstractCompiler compiler) { [EOL]     return new InlineFunctions(compiler, compiler.getUniqueNameIdSupplier(), true, false, true, true, true); [EOL] } <line_num>: 39,43
@Override [EOL] protected CompilerPass create(AbstractCompiler compiler) { [EOL]     return new RemoveUnusedPrototypeProperties(compiler, false, false); [EOL] } <line_num>: 48,51
@Override [EOL] protected CompilerPass create(AbstractCompiler compiler) { [EOL]     return new DevirtualizePrototypeMethods(compiler); [EOL] } <line_num>: 56,59
@Override [EOL] public void process(Node externs, Node root) { [EOL]     specializeModule.process(externs, root); [EOL]     new VarCheck(compiler).process(externs, root); [EOL] } <line_num>: 69,75
@Override [EOL] protected CompilerPass getProcessor(final Compiler compiler) { [EOL]     final SpecializeModule specializeModule = new SpecializeModule(compiler, devirtualizePrototypeMethods, inlineFunctions, removeUnusedPrototypeProperties); [EOL]     return new CompilerPass() { [EOL]  [EOL]         @Override [EOL]         public void process(Node externs, Node root) { [EOL]             specializeModule.process(externs, root); [EOL]             new VarCheck(compiler).process(externs, root); [EOL]         } [EOL]     }; [EOL] } <line_num>: 62,77
@Override [EOL] public void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     enableNormalize(); [EOL] } <line_num>: 79,84
public void testSpecializeInline() { [EOL]     JSModule[] modules = createModuleStar("var A = function() {alert(B());A()};" + "var B = function() {return 6};" + "A();", "A();" + "B();" + "B = function() {return 7};" + "A();" + "B();"); [EOL]     test(modules, new String[] { "var A = function() {alert(6);A()};" + "A();" + "var B;", "A = function() {alert(B());A()};" + "B = function() {return 6};" + "A();" + "B();" + "B = function() {return 7};" + "A();" + "B();" }); [EOL] } <line_num>: 86,115
public void testSpecializeCascadedInline() { [EOL]     JSModule[] modules = createModuleStar("var A = function() {alert(B());A()};" + "var B = function() {return C()};" + "var C = function() {return 6};" + "A();", "B = function() {return 7};" + "A();"); [EOL]     test(modules, new String[] { "var A = function() {alert(6);A()};" + "A();" + "var B, C;", "A = function() {alert(B());A()};" + "B = function() {return C()};" + "C = function() {return 6};" + "B = function() {return 7};" + "A();" }); [EOL] } <line_num>: 117,141
public void testSpecializeInlineWithMultipleDependents() { [EOL]     JSModule[] modules = createModuleStar("var A = function() {alert(B());A()};" + "var B = function() {return 6};" + "A();", "B = function() {return 7};" + "A();", "A();"); [EOL]     test(modules, new String[] { "var A = function() {alert(6);A()};" + "A();" + "var B;", "A = function() {alert(B());A()};" + "B = function() {return 6};" + "B = function() {return 7};" + "A();", "A = function() {alert(B());A()};" + "B = function() {return 6};" + "A();" }); [EOL] } <line_num>: 143,172
public void testSpecializeInlineWithNamespaces() { [EOL]     JSModule[] modules = createModuleStar("var ns = {};" + "ns.A = function() {alert(B());ns.A()};" + "var B = function() {return 6};" + "ns.A();", "B = function() {return 7};" + "ns.A();"); [EOL]     test(modules, new String[] { "var ns = {};" + "ns.A = function() {alert(6);ns.A()};" + "ns.A();" + "var B;", "ns.A = function() {alert(B());ns.A()};" + "B = function() {return 6};" + "B = function() {return 7};" + "ns.A();" }); [EOL] } <line_num>: 174,198
public void testSpecializeInlineWithRegularFunctions() { [EOL]     JSModule[] modules = createModuleStar("function A() {alert(B());A()}" + "function B() {return 6}" + "A();", "B = function() {return 7};" + "A();"); [EOL]     test(modules, new String[] { "function A() {alert(6);A()}" + "A();" + "var B;", "A = function() {alert(B());A()};" + "B = function() {return 6};" + "B = function() {return 7};" + "A();" }); [EOL] } <line_num>: 200,223
public void testDontSpecializeLocalNonAnonymousFunctions() { [EOL]     enableNormalize(false); [EOL]     JSModule[] modules = createModuleStar("(function(){var noSpecialize = " + "function() {alert(6)};noSpecialize()})()", ""); [EOL]     test(modules, new String[] { "(function(){var noSpecialize = " + "function() {alert(6)};noSpecialize()})()", "" }); [EOL] } <line_num>: 225,243
public void testAddDummyVarsForRemovedFunctions() { [EOL]     JSModule[] modules = createModuleStar("var A = function() {alert(B() + C());A()};" + "var B = function() {return 6};" + "var C = function() {return 8};" + "A();", "" + "A();"); [EOL]     test(modules, new String[] { "var A = function() {alert(6 + 8);A()};" + "A();" + "var B, C;", "A = function() {alert(B() + C());A()};" + "B = function() {return 6};" + "C = function() {return 8};" + "A();" }); [EOL] } <line_num>: 245,268
public void testSpecializeRemoveUnusedProperties() { [EOL]     JSModule[] modules = createModuleStar("var Foo = function(){};" + "Foo.prototype.a = function() {this.a()};" + "Foo.prototype.b = function() {return 6};" + "Foo.prototype.c = function() {return 7};" + "var aliasA = Foo.prototype.a;" + "var x = new Foo();" + "x.a();", ""); [EOL]     test(modules, new String[] { "var Foo = function(){};" + "Foo.prototype.a = function() {this.a()};" + "var aliasA = Foo.prototype.a;" + "var x = new Foo();" + "x.a();", "Foo.prototype.b = function() {return 6};" + "Foo.prototype.c = function() {return 7};" }); [EOL] } <line_num>: 270,295
public void testDontSpecializeAliasedFunctions_inline() { [EOL]     JSModule[] modules = createModuleStar("function A() {alert(B());A()}" + "function B() {return 6}" + "var aliasA = A;" + "A();", "B = function() {return 7};" + "B();"); [EOL]     test(modules, new String[] { "function A() {alert(B());A()}" + "function B() {return 6}" + "var aliasA = A;" + "A();", "B = function() {return 7};" + "B();" }); [EOL] } <line_num>: 297,320
public void testDontSpecializeAliasedFunctions_remove_unused_properties() { [EOL]     JSModule[] modules = createModuleStar("var Foo = function(){};" + "Foo.prototype.a = function() {this.a()};" + "Foo.prototype.b = function() {return 6};" + "var aliasB = Foo.prototype.b;" + "Foo.prototype.c = function() {return 7};" + "Foo.prototype.d = function() {return 7};" + "var aliasA = Foo.prototype.a;" + "var x = new Foo();" + "x.a();" + "var aliasC = (new Foo).c", ""); [EOL]     test(modules, new String[] { "var Foo = function(){};" + "Foo.prototype.a = function() {this.a()};" + "Foo.prototype.b = function() {return 6};" + "var aliasB = Foo.prototype.b;" + "Foo.prototype.c = function() {return 7};" + "var aliasA = Foo.prototype.a;" + "var x = new Foo();" + "x.a();" + "var aliasC = (new Foo).c", "Foo.prototype.d = function() {return 7};" }); [EOL] } <line_num>: 322,352
public void testSpecializeDevirtualizePrototypeMethods() { [EOL]     JSModule[] modules = createModuleStar("/** @constructor */" + "var Foo = function(){};" + "Foo.prototype.a = function() {this.a();return 7};" + "Foo.prototype.b = function() {this.a()};" + "var x = new Foo();" + "x.a();", ""); [EOL]     test(modules, new String[] { "var Foo = function(){};" + "var JSCompiler_StaticMethods_a =" + "function(JSCompiler_StaticMethods_a$self) {" + "JSCompiler_StaticMethods_a(JSCompiler_StaticMethods_a$self);" + "return 7" + "};" + "var x = new Foo();" + "JSCompiler_StaticMethods_a(x);", "Foo.prototype.a = function() {this.a();return 7};" + "Foo.prototype.b = function() {this.a()};" }); [EOL] } <line_num>: 354,380
public void testSpecializeDevirtualizePrototypeMethodsWithInline() { [EOL]     JSModule[] modules = createModuleStar("/** @constructor */" + "var Foo = function(){};" + "Foo.prototype.a = function() {return 7};" + "var x = new Foo();" + "var z = x.a();", ""); [EOL]     test(modules, new String[] { "var Foo = function(){};" + "var x = new Foo();" + "var z = 7;", "Foo.prototype.a = function() {return 7};" }); [EOL] } <line_num>: 382,401
@Override [EOL] public void process(Node externs, Node root) { [EOL]     SimpleDefinitionFinder defFinder = new SimpleDefinitionFinder(compiler); [EOL]     defFinder.process(externs, root); [EOL]     SimpleFunctionAliasAnalysis functionAliasAnalysis = new SimpleFunctionAliasAnalysis(); [EOL]     functionAliasAnalysis.analyze(defFinder); [EOL]     lastState = new SpecializationState(functionAliasAnalysis); [EOL] } <line_num>: 419,432
@Override [EOL] public CompilerPass getProcessor(final Compiler compiler) { [EOL]     lastCompiler = compiler; [EOL]     return new CompilerPass() { [EOL]  [EOL]         @Override [EOL]         public void process(Node externs, Node root) { [EOL]             SimpleDefinitionFinder defFinder = new SimpleDefinitionFinder(compiler); [EOL]             defFinder.process(externs, root); [EOL]             SimpleFunctionAliasAnalysis functionAliasAnalysis = new SimpleFunctionAliasAnalysis(); [EOL]             functionAliasAnalysis.analyze(defFinder); [EOL]             lastState = new SpecializationState(functionAliasAnalysis); [EOL]         } [EOL]     }; [EOL] } <line_num>: 413,434
public void testRemovedFunctions() { [EOL]     testSame("function F(){}\nvar G = function(a){};"); [EOL]     assertEquals(ImmutableSet.of(), lastState.getRemovedFunctions()); [EOL]     Node functionF = findFunction("F"); [EOL]     lastState.reportRemovedFunction(functionF, functionF.getParent()); [EOL]     assertEquals(ImmutableSet.of(functionF), lastState.getRemovedFunctions()); [EOL]     Node functionG = findFunction("F"); [EOL]     lastState.reportRemovedFunction(functionG, functionF.getParent()); [EOL]     assertEquals(ImmutableSet.of(functionF, functionG), lastState.getRemovedFunctions()); [EOL]     assertEquals(ImmutableSet.of(), lastState.getSpecializedFunctions()); [EOL] } <line_num>: 436,453
public void testSpecializedFunctions() { [EOL]     testSame("function F(){}\nvar G = function(a){};"); [EOL]     assertEquals(ImmutableSet.of(), lastState.getSpecializedFunctions()); [EOL]     Node functionF = findFunction("F"); [EOL]     lastState.reportSpecializedFunction(functionF); [EOL]     assertEquals(ImmutableSet.of(functionF), lastState.getSpecializedFunctions()); [EOL]     Node functionG = findFunction("F"); [EOL]     lastState.reportSpecializedFunction(functionG); [EOL]     assertEquals(ImmutableSet.of(functionF, functionG), lastState.getSpecializedFunctions()); [EOL]     assertEquals(ImmutableSet.of(), lastState.getRemovedFunctions()); [EOL] } <line_num>: 455,473
public void testCanFixupFunction() { [EOL]     testSame("function F(){}\n" + "var G = function(a){};\n" + "var ns = {};" + "ns.H = function(){};" + "var ns2 = {I : function anon1(){}};" + "(function anon2(){})();"); [EOL]     assertTrue(lastState.canFixupFunction(findFunction("F"))); [EOL]     assertTrue(lastState.canFixupFunction(findFunction("G"))); [EOL]     assertTrue(lastState.canFixupFunction(findFunction("ns.H"))); [EOL]     assertFalse(lastState.canFixupFunction(findFunction("anon1"))); [EOL]     assertFalse(lastState.canFixupFunction(findFunction("anon2"))); [EOL]     testSame("function A(){}\n" + "var aliasA = A;\n"); [EOL]     assertFalse(lastState.canFixupFunction(findFunction("A"))); [EOL] } <line_num>: 475,494
private Node findFunction(String name) { [EOL]     FunctionFinder f = new FunctionFinder(name); [EOL]     new NodeTraversal(lastCompiler, f).traverse(lastCompiler.jsRoot); [EOL]     assertNotNull("Couldn't find " + name, f.found); [EOL]     return f.found; [EOL] } <line_num>: 496,501
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (n.isFunction() && target.equals(NodeUtil.getFunctionName(n))) { [EOL]         found = n; [EOL]     } [EOL] } <line_num>: 514,520
