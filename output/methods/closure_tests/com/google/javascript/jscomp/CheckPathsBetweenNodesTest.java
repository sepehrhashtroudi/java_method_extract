PrefixPredicate(String prefix) { [EOL]     this.prefix = prefix; [EOL] } <line_num>: 40,42
private CountingPredicate(Predicate<T> delegate) { [EOL]     this.delegate = delegate; [EOL] } <line_num>: 330,332
@Override [EOL] public boolean apply(String input) { [EOL]     return input.startsWith(prefix); [EOL] } <line_num>: 44,47
public void testSimple() { [EOL]     DiGraph<String, String> g = LinkedDirectedGraph.create(); [EOL]     g.createDirectedGraphNode("a"); [EOL]     g.createDirectedGraphNode("b"); [EOL]     g.createDirectedGraphNode("c"); [EOL]     g.createDirectedGraphNode("d"); [EOL]     g.connect("a", "-", "b"); [EOL]     g.connect("b", "-", "c"); [EOL]     g.connect("c", "-", "d"); [EOL]     g.connect("a", "x", "d"); [EOL]     CheckPathsBetweenNodes<String, String> test = null; [EOL]     assertGood(createTest(g, "a", "d", Predicates.equalTo("b"), edgeIs("-"))); [EOL]     assertGood(createTest(g, "a", "d", Predicates.equalTo("a"), edgeIs("-"))); [EOL]     assertGood(createTest(g, "a", "d", Predicates.equalTo("d"), edgeIs("-"))); [EOL]     assertGood(createTest(g, "a", "d", FALSE, NO_EDGE)); [EOL]     assertBad(createTest(g, "a", "d", Predicates.equalTo("b"), edgeIs("x"))); [EOL] } <line_num>: 59,85
public void testSomeValidPaths() { [EOL]     DiGraph<String, String> g = LinkedDirectedGraph.create(); [EOL]     g.createDirectedGraphNode("a"); [EOL]     g.createDirectedGraphNode("b"); [EOL]     g.createDirectedGraphNode("c"); [EOL]     g.createDirectedGraphNode("d"); [EOL]     g.createDirectedGraphNode("e"); [EOL]     g.connect("a", "1", "b"); [EOL]     g.connect("b", "2", "c"); [EOL]     g.connect("b", "3", "e"); [EOL]     g.connect("e", "4", "d"); [EOL]     g.connect("c", "5", "d"); [EOL]     assertBad(createTest(g, "a", "d", Predicates.equalTo("c"), ALL_EDGE)); [EOL]     assertBad(createTest(g, "a", "d", Predicates.equalTo("z"), ALL_EDGE)); [EOL] } <line_num>: 91,107
public void testManyValidPaths() { [EOL]     DiGraph<String, String> g = LinkedDirectedGraph.create(); [EOL]     g.createDirectedGraphNode("a"); [EOL]     g.createDirectedGraphNode("b"); [EOL]     g.createDirectedGraphNode("c1"); [EOL]     g.createDirectedGraphNode("c2"); [EOL]     g.createDirectedGraphNode("c3"); [EOL]     DiGraphNode<String, String> d = g.createDirectedGraphNode("d"); [EOL]     g.connect("a", "-", "b"); [EOL]     g.connect("b", "-", "c1"); [EOL]     g.connect("b", "-", "c2"); [EOL]     g.connect("c2", "-", "d"); [EOL]     g.connect("c1", "-", "d"); [EOL]     g.connect("a", "-", "c3"); [EOL]     g.connect("c3", "-", "d"); [EOL]     assertGood(createTest(g, "a", "d", new PrefixPredicate("c"), ALL_EDGE)); [EOL] } <line_num>: 110,128
public void testCycles1() { [EOL]     DiGraph<String, String> g = LinkedDirectedGraph.create(); [EOL]     g.createDirectedGraphNode("a"); [EOL]     g.createDirectedGraphNode("b"); [EOL]     g.createDirectedGraphNode("c"); [EOL]     g.createDirectedGraphNode("d"); [EOL]     g.createDirectedGraphNode("e"); [EOL]     g.createDirectedGraphNode("f"); [EOL]     g.connect("a", "-", "b"); [EOL]     g.connect("b", "-", "c"); [EOL]     g.connect("c", "-", "d"); [EOL]     g.connect("d", "-", "e"); [EOL]     g.connect("e", "-", "f"); [EOL]     g.connect("f", "-", "b"); [EOL]     assertGood(createTest(g, "a", "e", Predicates.equalTo("b"), ALL_EDGE)); [EOL]     assertGood(createTest(g, "a", "e", Predicates.equalTo("c"), ALL_EDGE)); [EOL]     assertGood(createTest(g, "a", "e", Predicates.equalTo("d"), ALL_EDGE)); [EOL]     assertGood(createTest(g, "a", "e", Predicates.equalTo("e"), ALL_EDGE)); [EOL]     assertBad(createTest(g, "a", "e", Predicates.equalTo("f"), ALL_EDGE)); [EOL] } <line_num>: 131,152
public void testCycles2() { [EOL]     DiGraph<String, String> g = LinkedDirectedGraph.create(); [EOL]     g.createDirectedGraphNode("a"); [EOL]     g.createDirectedGraphNode("b"); [EOL]     g.createDirectedGraphNode("c"); [EOL]     g.createDirectedGraphNode("d"); [EOL]     g.connect("a", "-", "b"); [EOL]     g.connect("b", "-", "c"); [EOL]     g.connect("c", "-", "b"); [EOL]     g.connect("b", "-", "d"); [EOL]     assertGood(createTest(g, "a", "d", Predicates.equalTo("a"), ALL_EDGE)); [EOL]     assertBad(createTest(g, "a", "d", Predicates.equalTo("z"), ALL_EDGE)); [EOL] } <line_num>: 159,173
public void testCycles3() { [EOL]     DiGraph<String, String> g = LinkedDirectedGraph.create(); [EOL]     g.createDirectedGraphNode("a"); [EOL]     g.createDirectedGraphNode("b"); [EOL]     g.createDirectedGraphNode("c"); [EOL]     g.createDirectedGraphNode("d"); [EOL]     g.connect("a", "-", "b"); [EOL]     g.connect("b", "-", "c"); [EOL]     g.connect("c", "-", "b"); [EOL]     g.connect("b", "-", "d"); [EOL]     g.connect("c", "-", "d"); [EOL]     assertGood(createTest(g, "a", "d", Predicates.equalTo("a"), ALL_EDGE)); [EOL]     assertBad(createTest(g, "a", "d", Predicates.equalTo("z"), ALL_EDGE)); [EOL] } <line_num>: 180,195
public void testSomePath1() { [EOL]     DiGraph<String, String> g = LinkedDirectedGraph.create(); [EOL]     g.createDirectedGraphNode("a"); [EOL]     g.createDirectedGraphNode("b"); [EOL]     g.createDirectedGraphNode("c"); [EOL]     g.createDirectedGraphNode("d"); [EOL]     g.connect("a", "-", "b"); [EOL]     g.connect("a", "-", "c"); [EOL]     g.connect("b", "-", "d"); [EOL]     g.connect("c", "-", "d"); [EOL]     assertTrue(createTest(g, "a", "d", Predicates.equalTo("b"), ALL_EDGE).somePathsSatisfyPredicate()); [EOL]     assertTrue(createTest(g, "a", "d", Predicates.equalTo("c"), ALL_EDGE).somePathsSatisfyPredicate()); [EOL]     assertTrue(createTest(g, "a", "d", Predicates.equalTo("a"), ALL_EDGE).somePathsSatisfyPredicate()); [EOL]     assertTrue(createTest(g, "a", "d", Predicates.equalTo("d"), ALL_EDGE).somePathsSatisfyPredicate()); [EOL]     assertFalse(createTest(g, "a", "d", Predicates.equalTo("NONE"), ALL_EDGE).somePathsSatisfyPredicate()); [EOL] } <line_num>: 202,224
public void testSomePath2() { [EOL]     DiGraph<String, String> g = LinkedDirectedGraph.create(); [EOL]     g.createDirectedGraphNode("a"); [EOL]     g.createDirectedGraphNode("b"); [EOL]     assertFalse(createTest(g, "a", "b", Predicates.equalTo("b"), ALL_EDGE).somePathsSatisfyPredicate()); [EOL]     assertFalse(createTest(g, "a", "b", Predicates.equalTo("d"), ALL_EDGE).somePathsSatisfyPredicate()); [EOL]     assertTrue(createTest(g, "a", "b", Predicates.equalTo("a"), ALL_EDGE).somePathsSatisfyPredicate()); [EOL] } <line_num>: 226,238
public void testSomePathRevisiting() { [EOL]     DiGraph<String, String> g = LinkedDirectedGraph.create(); [EOL]     g.createDirectedGraphNode("1"); [EOL]     g.createDirectedGraphNode("2a"); [EOL]     g.createDirectedGraphNode("2b"); [EOL]     g.createDirectedGraphNode("3"); [EOL]     g.createDirectedGraphNode("4a"); [EOL]     g.createDirectedGraphNode("4b"); [EOL]     g.createDirectedGraphNode("5"); [EOL]     g.connect("1", "-", "2a"); [EOL]     g.connect("1", "-", "2b"); [EOL]     g.connect("2a", "-", "3"); [EOL]     g.connect("2b", "-", "3"); [EOL]     g.connect("3", "-", "4a"); [EOL]     g.connect("3", "-", "4b"); [EOL]     g.connect("4a", "-", "5"); [EOL]     g.connect("4b", "-", "5"); [EOL]     CountingPredicate<String> p = new CountingPredicate<String>(Predicates.equalTo("4a")); [EOL]     assertTrue(createTest(g, "1", "5", p, ALL_EDGE).somePathsSatisfyPredicate()); [EOL]     assertEquals(4, p.count); [EOL] } <line_num>: 240,266
public void testNonInclusive() { [EOL]     DiGraph<String, String> g = LinkedDirectedGraph.create(); [EOL]     g.createDirectedGraphNode("a"); [EOL]     g.createDirectedGraphNode("b"); [EOL]     g.createDirectedGraphNode("c"); [EOL]     g.connect("a", "-", "b"); [EOL]     g.connect("b", "-", "c"); [EOL]     assertFalse(createNonInclusiveTest(g, "a", "b", Predicates.equalTo("a"), ALL_EDGE).somePathsSatisfyPredicate()); [EOL]     assertFalse(createNonInclusiveTest(g, "a", "b", Predicates.equalTo("b"), ALL_EDGE).somePathsSatisfyPredicate()); [EOL]     assertTrue(createNonInclusiveTest(g, "a", "c", Predicates.equalTo("b"), ALL_EDGE).somePathsSatisfyPredicate()); [EOL] } <line_num>: 268,282
private static <N, E> void assertGood(CheckPathsBetweenNodes<N, E> test) { [EOL]     assertTrue(test.allPathsSatisfyPredicate()); [EOL] } <line_num>: 284,286
private static <N, E> void assertBad(CheckPathsBetweenNodes<N, E> test) { [EOL]     assertFalse(test.allPathsSatisfyPredicate()); [EOL] } <line_num>: 288,290
private static CheckPathsBetweenNodes<String, String> createTest(DiGraph<String, String> graph, String entry, String exit, Predicate<String> nodePredicate, Predicate<DiGraphEdge<String, String>> edgePredicate) { [EOL]     return new CheckPathsBetweenNodes<String, String>(graph, graph.getDirectedGraphNode(entry), graph.getDirectedGraphNode(exit), nodePredicate, edgePredicate); [EOL] } <line_num>: 292,301
private static CheckPathsBetweenNodes<String, String> createNonInclusiveTest(DiGraph<String, String> graph, String entry, String exit, Predicate<String> nodePredicate, Predicate<DiGraphEdge<String, String>> edgePredicate) { [EOL]     return new CheckPathsBetweenNodes<String, String>(graph, graph.getDirectedGraphNode(entry), graph.getDirectedGraphNode(exit), nodePredicate, edgePredicate, false); [EOL] } <line_num>: 303,313
@Override [EOL] public boolean apply(DiGraphEdge<String, String> input) { [EOL]     return input.getValue().equals(val); [EOL] } <line_num>: 318,321
private static Predicate<DiGraphEdge<String, String>> edgeIs(final Object val) { [EOL]     return new Predicate<DiGraphEdge<String, String>>() { [EOL]  [EOL]         @Override [EOL]         public boolean apply(DiGraphEdge<String, String> input) { [EOL]             return input.getValue().equals(val); [EOL]         } [EOL]     }; [EOL] } <line_num>: 315,323
@Override [EOL] public boolean apply(T input) { [EOL]     count++; [EOL]     return delegate.apply(input); [EOL] } <line_num>: 333,337
