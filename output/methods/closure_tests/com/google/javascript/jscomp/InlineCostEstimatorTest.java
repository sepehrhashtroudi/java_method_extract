static Node parse(String js) { [EOL]     Compiler compiler = new Compiler(); [EOL]     Node n = compiler.parseTestCode(js); [EOL]     assertEquals(0, compiler.getErrorCount()); [EOL]     return n; [EOL] } <line_num>: 30,35
static String minimize(String js) { [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     options.setLineLengthThreshold(Integer.MAX_VALUE); [EOL]     return new CodePrinter.Builder(parse(js)).setCompilerOptions(options).build(); [EOL] } <line_num>: 37,43
static long cost(String js) { [EOL]     return InlineCostEstimator.getCost(parse(js)); [EOL] } <line_num>: 45,47
public void testCost() { [EOL]     checkCost("1", "1"); [EOL]     checkCost("true", "1"); [EOL]     checkCost("false", "1"); [EOL]     checkCost("a", "xx"); [EOL]     checkCost("a + b", "xx+xx"); [EOL]     checkCost("foo()", "xx()"); [EOL]     checkCost("foo(a,b)", "xx(xx,xx)"); [EOL]     checkCost("10 + foo(a,b)", "0+xx(xx,xx)"); [EOL]     checkCost("1 + foo(a,b)", "1+xx(xx,xx)"); [EOL]     checkCost("a ? 1 : 0", "xx?1:0"); [EOL]     checkCost("a.b", "xx.xx"); [EOL]     checkCost("new Obj()", "new xx"); [EOL]     checkCost("function a() {return \"monkey\"}", "function xx(){return\"monkey\"}"); [EOL] } <line_num>: 49,64
private void checkCost(String source, String example) { [EOL]     assertEquals(minimize(example), example); [EOL]     assertEquals(example.length(), cost(source)); [EOL] } <line_num>: 66,73
