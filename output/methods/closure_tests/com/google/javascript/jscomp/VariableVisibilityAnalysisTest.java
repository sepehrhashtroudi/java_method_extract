LabeledVariableSearcher(String target) { [EOL]     this.target = target; [EOL] } <line_num>: 232,234
@Override [EOL] protected CompilerPass getProcessor(Compiler compiler) { [EOL]     lastAnalysis = new VariableVisibilityAnalysis(compiler); [EOL]     lastCompiler = compiler; [EOL]     return lastAnalysis; [EOL] } <line_num>: 34,40
public void testCapturedVariables() { [EOL]     String source = "global:var global;\n" + "function Outer() {\n" + "  captured:var captured;\n" + "  notcaptured:var notCaptured;\n" + "  function Inner() {\n" + "    alert(captured);" + "   }\n" + "}\n"; [EOL]     analyze(source); [EOL]     assertIsCapturedLocal("captured"); [EOL]     assertIsUncapturedLocal("notcaptured"); [EOL] } <line_num>: 42,57
public void testGlobals() { [EOL]     String source = "global:var global;"; [EOL]     analyze(source); [EOL]     assertIsGlobal("global"); [EOL] } <line_num>: 59,66
public void testParameters() { [EOL]     String source = "function A(a,b,c) {\n" + "}\n"; [EOL]     analyze(source); [EOL]     assertIsParameter("a"); [EOL]     assertIsParameter("b"); [EOL]     assertIsParameter("c"); [EOL] } <line_num>: 68,78
public void testFunctions() { [EOL]     String source = "function global() {\n" + "  function inner() {\n" + "  }\n" + "  function innerCaptured() {\n" + "    (function(){innerCaptured()})()\n" + "  }\n" + "}\n"; [EOL]     analyze(source); [EOL]     assertFunctionHasVisibility("global", VariableVisibility.GLOBAL); [EOL]     assertFunctionHasVisibility("inner", VariableVisibility.LOCAL); [EOL]     assertFunctionHasVisibility("innerCaptured", VariableVisibility.CAPTURED_LOCAL); [EOL] } <line_num>: 80,100
private void assertFunctionHasVisibility(String functionName, VariableVisibility visibility) { [EOL]     Node functionNode = searchForFunction(functionName); [EOL]     assertNotNull(functionNode); [EOL]     Node nameNode = functionNode.getFirstChild(); [EOL]     assertEquals(visibility, lastAnalysis.getVariableVisibility(nameNode)); [EOL] } <line_num>: 102,110
private void assertLabeledVariableHasVisibility(String label, VariableVisibility visibility) { [EOL]     Node labeledVariable = searchLabel(label); [EOL]     Preconditions.checkState(labeledVariable.isVar()); [EOL]     Node nameNode = labeledVariable.getFirstChild(); [EOL]     assertEquals(visibility, lastAnalysis.getVariableVisibility(nameNode)); [EOL] } <line_num>: 112,123
private void assertIsCapturedLocal(String label) { [EOL]     assertLabeledVariableHasVisibility(label, VariableVisibility.CAPTURED_LOCAL); [EOL] } <line_num>: 125,128
private void assertIsUncapturedLocal(String label) { [EOL]     assertLabeledVariableHasVisibility(label, VariableVisibility.LOCAL); [EOL] } <line_num>: 130,133
private void assertIsGlobal(String label) { [EOL]     assertLabeledVariableHasVisibility(label, VariableVisibility.GLOBAL); [EOL] } <line_num>: 135,138
private void assertIsParameter(String parameterName) { [EOL]     Node parameterNode = searchForParameter(parameterName); [EOL]     assertNotNull(parameterNode); [EOL]     assertEquals(VariableVisibility.PARAMETER, lastAnalysis.getVariableVisibility(parameterNode)); [EOL] } <line_num>: 140,147
private VariableVisibilityAnalysis analyze(String src) { [EOL]     testSame(src); [EOL]     return lastAnalysis; [EOL] } <line_num>: 149,153
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (n.getParent().isParamList() && parameterName.equals(n.getString())) { [EOL]         foundNode[0] = n; [EOL]     } [EOL] } <line_num>: 168,175
private Node searchForParameter(final String parameterName) { [EOL]     Preconditions.checkArgument(parameterName != null); [EOL]     final Node[] foundNode = new Node[1]; [EOL]     AbstractPostOrderCallback findParameter = new AbstractPostOrderCallback() { [EOL]  [EOL]         @Override [EOL]         public void visit(NodeTraversal t, Node n, Node parent) { [EOL]             if (n.getParent().isParamList() && parameterName.equals(n.getString())) { [EOL]                 foundNode[0] = n; [EOL]             } [EOL]         } [EOL]     }; [EOL]     new NodeTraversal(lastCompiler, findParameter).traverse(lastCompiler.jsRoot); [EOL]     return foundNode[0]; [EOL] } <line_num>: 161,182
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (n.isFunction() && functionName.equals(NodeUtil.getFunctionName(n))) { [EOL]         foundNode[0] = n; [EOL]     } [EOL] } <line_num>: 197,203
private Node searchForFunction(final String functionName) { [EOL]     Preconditions.checkArgument(functionName != null); [EOL]     final Node[] foundNode = new Node[1]; [EOL]     AbstractPostOrderCallback findFunction = new AbstractPostOrderCallback() { [EOL]  [EOL]         @Override [EOL]         public void visit(NodeTraversal t, Node n, Node parent) { [EOL]             if (n.isFunction() && functionName.equals(NodeUtil.getFunctionName(n))) { [EOL]                 foundNode[0] = n; [EOL]             } [EOL]         } [EOL]     }; [EOL]     new NodeTraversal(lastCompiler, findFunction).traverse(lastCompiler.jsRoot); [EOL]     return foundNode[0]; [EOL] } <line_num>: 190,210
private Node searchLabel(String label) { [EOL]     LabeledVariableSearcher s = new LabeledVariableSearcher(label); [EOL]     new NodeTraversal(lastCompiler, s).traverse(lastCompiler.jsRoot); [EOL]     assertNotNull("Label " + label + " should be in the source code", s.found); [EOL]     return s.found; [EOL] } <line_num>: 213,220
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (n.isLabel() && target.equals(n.getFirstChild().getString())) { [EOL]         found = n.getLastChild(); [EOL]     } [EOL] } <line_num>: 235,246
