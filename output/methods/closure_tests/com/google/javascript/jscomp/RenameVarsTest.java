private ClosurePassAndRenameVars(Compiler compiler) { [EOL]     this.compiler = compiler; [EOL] } <line_num>: 581,583
@Override [EOL] protected CodingConvention getCodingConvention() { [EOL]     if (useGoogleCodingConvention) { [EOL]         return new GoogleCodingConvention(); [EOL]     } else { [EOL]         return CodingConventions.getDefault(); [EOL]     } [EOL] } <line_num>: 43,50
@Override [EOL] protected CompilerPass getProcessor(Compiler compiler) { [EOL]     if (withClosurePass) { [EOL]         return new ClosurePassAndRenameVars(compiler); [EOL]     } else { [EOL]         return renameVars = new RenameVars(compiler, prefix, localRenamingOnly, preserveFunctionExpressionNames, generatePseudoNames, shouldShadow, previouslyUsedMap, null, null); [EOL]     } [EOL] } <line_num>: 52,62
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 64,67
@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     previouslyUsedMap = new VariableMap(ImmutableMap.<String, String>of()); [EOL]     prefix = DEFAULT_PREFIX; [EOL]     withClosurePass = false; [EOL]     localRenamingOnly = false; [EOL]     preserveFunctionExpressionNames = false; [EOL]     generatePseudoNames = false; [EOL]     shouldShadow = false; [EOL] } <line_num>: 69,81
public void testRenameSimple() { [EOL]     test("function Foo(v1, v2) {return v1;} Foo();", "function a(b, c) {return b;} a();"); [EOL] } <line_num>: 83,86
public void testRenameGlobals() { [EOL]     test("var Foo; var Bar, y; function x() { Bar++; }", "var a; var b, c; function d() { b++; }"); [EOL] } <line_num>: 88,91
public void testRenameLocals() { [EOL]     test("(function (v1, v2) {}); (function (v3, v4) {});", "(function (a, b) {}); (function (a, b) {});"); [EOL]     test("function f1(v1, v2) {}; function f2(v3, v4) {};", "function c(a, b) {}; function d(a, b) {};"); [EOL] } <line_num>: 93,98
public void testRenameRedeclaredGlobals() { [EOL]     test("function f1(v1, v2) {f1()};" + "/** @suppress {duplicate} */" + "function f1(v3, v4) {f1()};", "function a(b, c) {a()};" + "function a(b, c) {a()};"); [EOL]     localRenamingOnly = true; [EOL]     test("function f1(v1, v2) {f1()};" + "/** @suppress {duplicate} */" + "function f1(v3, v4) {f1()};", "function f1(a, b) {f1()};" + "function f1(a, b) {f1()};"); [EOL] } <line_num>: 100,114
public void testRecursiveFunctions1() { [EOL]     test("var walk = function walk(node, aFunction) {" + "  walk(node, aFunction);" + "};", "var a = function a(b, c) {" + "  a(b, c);" + "};"); [EOL]     localRenamingOnly = true; [EOL]     test("var walk = function walk(node, aFunction) {" + "  walk(node, aFunction);" + "};", "var walk = function walk(a, b) {" + "  walk(a, b);" + "};"); [EOL] } <line_num>: 116,132
public void testRecursiveFunctions2() { [EOL]     preserveFunctionExpressionNames = true; [EOL]     test("var walk = function walk(node, aFunction) {" + "  walk(node, aFunction);" + "};", "var c = function walk(a, b) {" + "  walk(a, b);" + "};"); [EOL]     localRenamingOnly = true; [EOL]     test("var walk = function walk(node, aFunction) {" + "  walk(node, aFunction);" + "};", "var walk = function walk(a, b) {" + "  walk(a, b);" + "};"); [EOL] } <line_num>: 134,152
public void testRenameLocalsClashingWithGlobals() { [EOL]     test("function a(v1, v2) {return v1;} a();", "function a(b, c) {return b;} a();"); [EOL] } <line_num>: 154,157
public void testRenameNested() { [EOL]     test("function f1(v1, v2) { (function(v3, v4) {}) }", "function a(b, c) { (function(d, e) {}) }"); [EOL]     test("function f1(v1, v2) { function f2(v3, v4) {} }", "function a(b, c) { function d(e, f) {} }"); [EOL] } <line_num>: 159,164
public void testBleedingRecursiveFunctions1() { [EOL]     test("var x = function a(x) { return x ? 1 : a(1); };" + "var y = function b(x) { return x ? 2 : b(2); };", "var c = function b(a) { return a ? 1 : b(1); };" + "var e = function d(a) { return a ? 2 : d(2); };"); [EOL] } <line_num>: 166,174
public void testBleedingRecursiveFunctions2() { [EOL]     test("function f() {" + "  var x = function a(x) { return x ? 1 : a(1); };" + "  var y = function b(x) { return x ? 2 : b(2); };" + "}", "function d() {" + "  var e = function b(a) { return a ? 1 : b(1); };" + "  var f = function a(c) { return c ? 2 : a(2); };" + "}"); [EOL] } <line_num>: 176,185
public void testBleedingRecursiveFunctions3() { [EOL]     test("function f() {" + "  var x = function a(x) { return x ? 1 : a(1); };" + "  var y = function b(x) { return x ? 2 : b(2); };" + "  var z = function c(x) { return x ? y : c(2); };" + "}", "function f() {" + "  var g = function c(a) { return a ? 1 : c(1); };" + "  var d = function a(b) { return b ? 2 : a(2); };" + "  var h = function b(e) { return e ? d : b(2); };" + "}"); [EOL] } <line_num>: 187,198
public void testRenameWithExterns1() { [EOL]     String externs = "var foo;"; [EOL]     test(externs, "var bar; foo(bar);", "var a; foo(a);", null, null); [EOL] } <line_num>: 200,203
public void testRenameWithExterns2() { [EOL]     String externs = "var a;"; [EOL]     test(externs, "var b = 5", "var b = 5", null, null); [EOL] } <line_num>: 205,208
public void testDoNotRenameExportedName() { [EOL]     test("_foo()", "_foo()"); [EOL] } <line_num>: 210,212
public void testRenameWithNameOverlap() { [EOL]     test("var a = 1; var b = 2; b + b;", "var a = 1; var b = 2; b + b;"); [EOL] } <line_num>: 214,217
public void testRenameWithPrefix1() { [EOL]     prefix = "PRE_"; [EOL]     test("function Foo(v1, v2) {return v1} Foo();", "function PRE_(a, b) {return a} PRE_();"); [EOL]     prefix = DEFAULT_PREFIX; [EOL] } <line_num>: 219,225
public void testRenameWithPrefix2() { [EOL]     prefix = "PRE_"; [EOL]     test("function Foo(v1, v2) {var v3 = v1 + v2; return v3;} Foo();", "function PRE_(a, b) {var c = a + b; return c;} PRE_();"); [EOL]     prefix = DEFAULT_PREFIX; [EOL] } <line_num>: 227,232
public void testRenameWithPrefix3() { [EOL]     prefix = "a"; [EOL]     test("function Foo() {return 1;}" + "function Bar() {" + "  var a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z," + "      A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,aa,ab;" + "  Foo();" + "} Bar();", "function a() {return 1;}" + "function aa() {" + "  var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A," + "      B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,$,ba,ca;" + "  a();" + "} aa();"); [EOL]     prefix = DEFAULT_PREFIX; [EOL] } <line_num>: 234,250
public void testNamingBasedOnOrderOfOccurrence() { [EOL]     test("var q,p,m,n,l,k; " + "(function (r) {}); try { } catch(s) {}; var t = q + q;", "var a,b,c,d,e,f; " + "(function(g) {}); try { } catch(h) {}; var i = a + a;"); [EOL]     test("(function(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z," + "a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,$){});" + "var a4,a3,a2,a1,b4,b3,b2,b1,ab,ac,ad,fg;function foo(){};", "(function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z," + "A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,$){});" + "var aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la;function ma(){};"); [EOL] } <line_num>: 252,264
public void testStableRenameSimple() { [EOL]     VariableMap expectedVariableMap = makeVariableMap("Foo", "a", "L 0", "b", "L 1", "c"); [EOL]     testRenameMap("function Foo(v1, v2) {return v1;} Foo();", "function a(b, c) {return b;} a();", expectedVariableMap); [EOL]     expectedVariableMap = makeVariableMap("Foo", "a", "L 0", "b", "L 1", "c", "L 2", "d"); [EOL]     testRenameMapUsingOldMap("function Foo(v1, v2, v3) {return v1;} Foo();", "function a(b, c, d) {return b;} a();", expectedVariableMap); [EOL] } <line_num>: 266,276
public void testStableRenameGlobals() { [EOL]     VariableMap expectedVariableMap = makeVariableMap("Foo", "a", "Bar", "b", "y", "c", "x", "d"); [EOL]     testRenameMap("var Foo; var Bar, y; function x() { Bar++; }", "var a; var b, c; function d() { b++; }", expectedVariableMap); [EOL]     expectedVariableMap = makeVariableMap("Foo", "a", "Bar", "b", "y", "c", "x", "d", "Baz", "f", "L 0", "e"); [EOL]     testRenameMapUsingOldMap("var Foo, Baz; var Bar, y; function x(R) { return R + Bar++; }", "var a, f; var b, c; function d(e) { return e + b++; }", expectedVariableMap); [EOL] } <line_num>: 278,291
public void testStableRenameWithPointlesslyAnonymousFunctions() { [EOL]     VariableMap expectedVariableMap = makeVariableMap("L 0", "a", "L 1", "b"); [EOL]     testRenameMap("(function (v1, v2) {}); (function (v3, v4) {});", "(function (a, b) {}); (function (a, b) {});", expectedVariableMap); [EOL]     expectedVariableMap = makeVariableMap("L 0", "a", "L 1", "b", "L 2", "c"); [EOL]     testRenameMapUsingOldMap("(function (v0, v1, v2) {});" + "(function (v3, v4) {});", "(function (a, b, c) {});" + "(function (a, b) {});", expectedVariableMap); [EOL] } <line_num>: 293,305
public void testStableRenameLocalsClashingWithGlobals() { [EOL]     test("function a(v1, v2) {return v1;} a();", "function a(b, c) {return b;} a();"); [EOL]     previouslyUsedMap = renameVars.getVariableMap(); [EOL]     test("function bar(){return;}function a(v1, v2) {return v1;} a();", "function d(){return;}function a(b, c) {return b;} a();"); [EOL] } <line_num>: 307,313
public void testStableRenameNested() { [EOL]     VariableMap expectedVariableMap = makeVariableMap("f1", "a", "L 0", "b", "L 1", "c", "L 2", "d", "L 3", "e"); [EOL]     testRenameMap("function f1(v1, v2) { (function(v3, v4) {}) }", "function a(b, c) { (function(d, e) {}) }", expectedVariableMap); [EOL]     expectedVariableMap = makeVariableMap("f1", "a", "L 0", "b", "L 1", "c", "L 2", "d", "L 3", "e", "L 4", "f"); [EOL]     testRenameMapUsingOldMap("function f1(v1, v2) { (function(v3, v4, v5) {}) }", "function a(b, c) { (function(d, e, f) {}) }", expectedVariableMap); [EOL] } <line_num>: 315,328
public void testStableRenameWithExterns1() { [EOL]     String externs = "var foo;"; [EOL]     test(externs, "var bar; foo(bar);", "var a; foo(a);", null, null); [EOL]     previouslyUsedMap = renameVars.getVariableMap(); [EOL]     test(externs, "var bar, baz; foo(bar, baz);", "var a, b; foo(a, b);", null, null); [EOL] } <line_num>: 330,336
public void testStableRenameWithExterns2() { [EOL]     String externs = "var a;"; [EOL]     test(externs, "var b = 5", "var b = 5", null, null); [EOL]     previouslyUsedMap = renameVars.getVariableMap(); [EOL]     test(externs, "var b = 5, catty = 9;", "var b = 5, c=9;", null, null); [EOL] } <line_num>: 338,343
public void testStableRenameWithNameOverlap() { [EOL]     test("var a = 1; var b = 2; b + b;", "var a = 1; var b = 2; b + b;"); [EOL]     previouslyUsedMap = renameVars.getVariableMap(); [EOL]     test("var a = 1; var c, b = 2; b + b;", "var a = 1; var c, b = 2; b + b;"); [EOL] } <line_num>: 345,351
public void testStableRenameWithAnonymousFunctions() { [EOL]     VariableMap expectedVariableMap = makeVariableMap("L 0", "a", "foo", "b"); [EOL]     testRenameMap("function foo(bar){return bar;}foo(function(h){return h;});", "function b(a){return a}b(function(a){return a;})", expectedVariableMap); [EOL]     expectedVariableMap = makeVariableMap("foo", "b", "L 0", "a", "L 1", "c"); [EOL]     testRenameMapUsingOldMap("function foo(bar) {return bar;}foo(function(g,h) {return g+h;});", "function b(a){return a}b(function(a,c){return a+c;})", expectedVariableMap); [EOL] } <line_num>: 353,364
public void testStableRenameSimpleExternsChanges() { [EOL]     VariableMap expectedVariableMap = makeVariableMap("Foo", "a", "L 0", "b", "L 1", "c"); [EOL]     testRenameMap("function Foo(v1, v2) {return v1;} Foo();", "function a(b, c) {return b;} a();", expectedVariableMap); [EOL]     expectedVariableMap = makeVariableMap("L 0", "b", "L 1", "c", "L 2", "a"); [EOL]     String externs = "var Foo;"; [EOL]     testRenameMapUsingOldMap(externs, "function Foo(v1, v2, v0) {return v1;} Foo();", "function Foo(b, c, a) {return b;} Foo();", expectedVariableMap); [EOL] } <line_num>: 366,378
public void testStableRenameSimpleLocalNameExterned() { [EOL]     test("function Foo(v1, v2) {return v1;} Foo();", "function a(b, c) {return b;} a();"); [EOL]     previouslyUsedMap = renameVars.getVariableMap(); [EOL]     String externs = "var b;"; [EOL]     test(externs, "function Foo(v1, v2) {return v1;} Foo(b);", "function a(d, c) {return d;} a(b);", null, null); [EOL] } <line_num>: 380,389
public void testStableRenameSimpleGlobalNameExterned() { [EOL]     test("function Foo(v1, v2) {return v1;} Foo();", "function a(b, c) {return b;} a();"); [EOL]     previouslyUsedMap = renameVars.getVariableMap(); [EOL]     String externs = "var Foo;"; [EOL]     test(externs, "function Foo(v1, v2, v0) {return v1;} Foo();", "function Foo(b, c, a) {return b;} Foo();", null, null); [EOL] } <line_num>: 391,400
public void testStableRenameWithPrefix1AndUnstableLocalNames() { [EOL]     prefix = "PRE_"; [EOL]     test("function Foo(v1, v2) {return v1} Foo();", "function PRE_(a, b) {return a} PRE_();"); [EOL]     previouslyUsedMap = renameVars.getVariableMap(); [EOL]     prefix = "PRE_"; [EOL]     test("function Foo(v0, v1, v2) {return v1} Foo();", "function PRE_(a, b, c) {return b} PRE_();"); [EOL] } <line_num>: 402,412
public void testStableRenameWithPrefix2() { [EOL]     prefix = "a"; [EOL]     test("function Foo() {return 1;}" + "function Bar() {" + "  var a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z," + "      A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,aa,ab;" + "  Foo();" + "} Bar();", "function a() {return 1;}" + "function aa() {" + "  var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A," + "      B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,$,ba,ca;" + "  a();" + "} aa();"); [EOL]     previouslyUsedMap = renameVars.getVariableMap(); [EOL]     prefix = "a"; [EOL]     test("function Foo() {return 1;}" + "function Baz() {return 1;}" + "function Bar() {" + "  var a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z," + "      A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,aa,ab;" + "  Foo();" + "} Bar();", "function a() {return 1;}" + "function ab() {return 1;}" + "function aa() {" + "  var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A," + "      B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,$,ba,ca;" + "  a();" + "} aa();"); [EOL] } <line_num>: 414,448
public void testContrivedExampleWhereConsistentRenamingIsWorse() { [EOL]     previouslyUsedMap = makeVariableMap("Foo", "LongString", "L 0", "b", "L 1", "c"); [EOL]     test("function Foo(v1, v2) {return v1;} Foo();", "function LongString(b, c) {return b;} LongString();"); [EOL]     previouslyUsedMap = renameVars.getVariableMap(); [EOL]     VariableMap expectedVariableMap = makeVariableMap("Foo", "LongString", "L 0", "b", "L 1", "c"); [EOL]     assertVariableMapsEqual(expectedVariableMap, previouslyUsedMap); [EOL] } <line_num>: 450,461
public void testExportSimpleSymbolReservesName() { [EOL]     test("var goog, x; goog.exportSymbol('a', x);", "var a, b; a.exportSymbol('a', b);"); [EOL]     withClosurePass = true; [EOL]     test("var goog, x; goog.exportSymbol('a', x);", "var b, c; b.exportSymbol('a', c);"); [EOL] } <line_num>: 463,469
public void testExportComplexSymbolReservesName() { [EOL]     test("var goog, x; goog.exportSymbol('a.b', x);", "var a, b; a.exportSymbol('a.b', b);"); [EOL]     withClosurePass = true; [EOL]     test("var goog, x; goog.exportSymbol('a.b', x);", "var b, c; b.exportSymbol('a.b', c);"); [EOL] } <line_num>: 471,477
public void testExportToNonStringDoesntExplode() { [EOL]     withClosurePass = true; [EOL]     test("var goog, a, b; goog.exportSymbol(a, b);", "var a, b, c; a.exportSymbol(b, c);"); [EOL] } <line_num>: 479,483
public void testDollarSignSuperExport1() { [EOL]     useGoogleCodingConvention = false; [EOL]     test("var x = function($super,duper,$fantastic){}", "var c = function($super,    a,        b){}"); [EOL]     localRenamingOnly = false; [EOL]     test("var $super = 1", "var a = 1"); [EOL]     useGoogleCodingConvention = true; [EOL]     test("var x = function($super,duper,$fantastic){}", "var c = function($super,a,b){}"); [EOL] } <line_num>: 485,497
public void testDollarSignSuperExport2() { [EOL]     boolean normalizedExpectedJs = false; [EOL]     super.enableNormalize(false); [EOL]     useGoogleCodingConvention = false; [EOL]     test("var x = function($super,duper,$fantastic){};" + "var y = function($super,duper){};", "var c = function($super,    a,         b){};" + "var d = function($super,    a){};"); [EOL]     localRenamingOnly = false; [EOL]     test("var $super = 1", "var a = 1"); [EOL]     useGoogleCodingConvention = true; [EOL]     test("var x = function($super,duper,$fantastic){};" + "var y = function($super,duper){};", "var c = function($super,   a,    b         ){};" + "var d = function($super,a){};"); [EOL]     super.disableNormalize(); [EOL] } <line_num>: 499,520
public void testPseudoNames() { [EOL]     generatePseudoNames = false; [EOL]     test("var foo = function(a, b, c){}", "var d = function(a, b, c){}"); [EOL]     generatePseudoNames = true; [EOL]     test("var foo = function(a, b, c){}", "var $foo$$ = function($a$$, $b$$, $c$$){}"); [EOL]     test("var a = function(a, b, c){}", "var $a$$ = function($a$$, $b$$, $c$$){}"); [EOL] } <line_num>: 522,534
private void testRenameMapUsingOldMap(String input, String expected, VariableMap expectedMap) { [EOL]     previouslyUsedMap = renameVars.getVariableMap(); [EOL]     testRenameMap("", input, expected, expectedMap); [EOL] } <line_num>: 536,540
private void testRenameMapUsingOldMap(String externs, String input, String expected, VariableMap expectedMap) { [EOL]     previouslyUsedMap = renameVars.getVariableMap(); [EOL]     testRenameMap(externs, input, expected, expectedMap); [EOL] } <line_num>: 542,547
private void testRenameMap(String input, String expected, VariableMap expectedRenameMap) { [EOL]     testRenameMap("", input, expected, expectedRenameMap); [EOL] } <line_num>: 549,552
private void testRenameMap(String externs, String input, String expected, VariableMap expectedRenameMap) { [EOL]     test(externs, input, expected, null, null); [EOL]     VariableMap renameMap = renameVars.getVariableMap(); [EOL]     assertVariableMapsEqual(expectedRenameMap, renameMap); [EOL] } <line_num>: 554,559
private VariableMap makeVariableMap(String... keyValPairs) { [EOL]     Preconditions.checkArgument(keyValPairs.length % 2 == 0); [EOL]     ImmutableMap.Builder<String, String> renameMap = ImmutableMap.builder(); [EOL]     for (int i = 0; i < keyValPairs.length; i += 2) { [EOL]         renameMap.put(keyValPairs[i], keyValPairs[i + 1]); [EOL]     } [EOL]     return new VariableMap(renameMap.build()); [EOL] } <line_num>: 561,570
private static void assertVariableMapsEqual(VariableMap a, VariableMap b) { [EOL]     Map<String, String> ma = a.getOriginalNameToNewNameMap(); [EOL]     Map<String, String> mb = b.getOriginalNameToNewNameMap(); [EOL]     assertEquals("VariableMaps not equal", ma, mb); [EOL] } <line_num>: 572,576
@Override [EOL] public void process(Node externs, Node root) { [EOL]     ProcessClosurePrimitives closurePass = new ProcessClosurePrimitives(compiler, null, CheckLevel.WARNING); [EOL]     closurePass.process(externs, root); [EOL]     renameVars = new RenameVars(compiler, prefix, false, false, false, false, previouslyUsedMap, null, closurePass.getExportedVariableNames()); [EOL]     renameVars.process(externs, root); [EOL] } <line_num>: 585,595
