private static Node parse(String js) { [EOL]     Compiler compiler = new Compiler(); [EOL]     compiler.initCompilerOptionsIfTesting(); [EOL]     compiler.getOptions().setLanguageIn(LanguageMode.ECMASCRIPT5); [EOL]     Node n = compiler.parseTestCode(js); [EOL]     assertEquals(0, compiler.getErrorCount()); [EOL]     return n; [EOL] } <line_num>: 39,46
static Node getNode(String js) { [EOL]     Node root = parse("var a=(" + js + ");"); [EOL]     Node expr = root.getFirstChild(); [EOL]     Node var = expr.getFirstChild(); [EOL]     return var.getFirstChild(); [EOL] } <line_num>: 48,53
public void testIsLiteralOrConstValue() { [EOL]     assertLiteralAndImmutable(getNode("10")); [EOL]     assertLiteralAndImmutable(getNode("-10")); [EOL]     assertLiteralButNotImmutable(getNode("[10, 20]")); [EOL]     assertLiteralButNotImmutable(getNode("{'a': 20}")); [EOL]     assertLiteralButNotImmutable(getNode("[10, , 1.0, [undefined], 'a']")); [EOL]     assertLiteralButNotImmutable(getNode("/abc/")); [EOL]     assertLiteralAndImmutable(getNode("\"string\"")); [EOL]     assertLiteralAndImmutable(getNode("'aaa'")); [EOL]     assertLiteralAndImmutable(getNode("null")); [EOL]     assertLiteralAndImmutable(getNode("undefined")); [EOL]     assertLiteralAndImmutable(getNode("void 0")); [EOL]     assertNotLiteral(getNode("abc")); [EOL]     assertNotLiteral(getNode("[10, foo(), 20]")); [EOL]     assertNotLiteral(getNode("foo()")); [EOL]     assertNotLiteral(getNode("c + d")); [EOL]     assertNotLiteral(getNode("{'a': foo()}")); [EOL]     assertNotLiteral(getNode("void foo()")); [EOL] } <line_num>: 55,73
public void assertLiteralAndImmutable(Node n) { [EOL]     assertTrue(NodeUtil.isLiteralValue(n, true)); [EOL]     assertTrue(NodeUtil.isLiteralValue(n, false)); [EOL]     assertTrue(NodeUtil.isImmutableValue(n)); [EOL] } <line_num>: 75,79
public void assertLiteralButNotImmutable(Node n) { [EOL]     assertTrue(NodeUtil.isLiteralValue(n, true)); [EOL]     assertTrue(NodeUtil.isLiteralValue(n, false)); [EOL]     assertFalse(NodeUtil.isImmutableValue(n)); [EOL] } <line_num>: 81,85
public void assertNotLiteral(Node n) { [EOL]     assertFalse(NodeUtil.isLiteralValue(n, true)); [EOL]     assertFalse(NodeUtil.isLiteralValue(n, false)); [EOL]     assertFalse(NodeUtil.isImmutableValue(n)); [EOL] } <line_num>: 87,91
public void testGetBooleanValue() { [EOL]     assertPureBooleanTrue("true"); [EOL]     assertPureBooleanTrue("10"); [EOL]     assertPureBooleanTrue("'0'"); [EOL]     assertPureBooleanTrue("/a/"); [EOL]     assertPureBooleanTrue("{}"); [EOL]     assertPureBooleanTrue("[]"); [EOL]     assertPureBooleanFalse("false"); [EOL]     assertPureBooleanFalse("null"); [EOL]     assertPureBooleanFalse("0"); [EOL]     assertPureBooleanFalse("''"); [EOL]     assertPureBooleanFalse("undefined"); [EOL]     assertPureBooleanFalse("void 0"); [EOL]     assertPureBooleanUnknown("void foo()"); [EOL]     assertPureBooleanUnknown("b"); [EOL]     assertPureBooleanUnknown("-'0.0'"); [EOL]     assertPureBooleanUnknown("{a:foo()}"); [EOL]     assertPureBooleanUnknown("[foo()]"); [EOL] } <line_num>: 93,113
private void assertPureBooleanTrue(String val) { [EOL]     assertEquals(TernaryValue.TRUE, NodeUtil.getPureBooleanValue(getNode(val))); [EOL] } <line_num>: 115,117
private void assertPureBooleanFalse(String val) { [EOL]     assertEquals(TernaryValue.FALSE, NodeUtil.getPureBooleanValue(getNode(val))); [EOL] } <line_num>: 119,122
private void assertPureBooleanUnknown(String val) { [EOL]     assertEquals(TernaryValue.UNKNOWN, NodeUtil.getPureBooleanValue(getNode(val))); [EOL] } <line_num>: 124,127
public void testGetExpressionBooleanValue() { [EOL]     assertImpureBooleanTrue("a=true"); [EOL]     assertImpureBooleanFalse("a=false"); [EOL]     assertImpureBooleanTrue("a=(false,true)"); [EOL]     assertImpureBooleanFalse("a=(true,false)"); [EOL]     assertImpureBooleanTrue("a=(false || true)"); [EOL]     assertImpureBooleanFalse("a=(true && false)"); [EOL]     assertImpureBooleanTrue("a=!(true && false)"); [EOL]     assertImpureBooleanTrue("a,true"); [EOL]     assertImpureBooleanFalse("a,false"); [EOL]     assertImpureBooleanTrue("true||false"); [EOL]     assertImpureBooleanFalse("false||false"); [EOL]     assertImpureBooleanTrue("true&&true"); [EOL]     assertImpureBooleanFalse("true&&false"); [EOL]     assertImpureBooleanFalse("!true"); [EOL]     assertImpureBooleanTrue("!false"); [EOL]     assertImpureBooleanTrue("!''"); [EOL]     assertImpureBooleanUnknown("a *= 2"); [EOL]     assertImpureBooleanUnknown("2 + 2"); [EOL]     assertImpureBooleanTrue("a=1"); [EOL]     assertImpureBooleanTrue("a=/a/"); [EOL]     assertImpureBooleanTrue("a={}"); [EOL]     assertImpureBooleanTrue("true"); [EOL]     assertImpureBooleanTrue("10"); [EOL]     assertImpureBooleanTrue("'0'"); [EOL]     assertImpureBooleanTrue("/a/"); [EOL]     assertImpureBooleanTrue("{}"); [EOL]     assertImpureBooleanTrue("[]"); [EOL]     assertImpureBooleanFalse("false"); [EOL]     assertImpureBooleanFalse("null"); [EOL]     assertImpureBooleanFalse("0"); [EOL]     assertImpureBooleanFalse("''"); [EOL]     assertImpureBooleanFalse("undefined"); [EOL]     assertImpureBooleanFalse("void 0"); [EOL]     assertImpureBooleanFalse("void foo()"); [EOL]     assertImpureBooleanTrue("a?true:true"); [EOL]     assertImpureBooleanFalse("a?false:false"); [EOL]     assertImpureBooleanUnknown("a?true:false"); [EOL]     assertImpureBooleanUnknown("a?true:foo()"); [EOL]     assertImpureBooleanUnknown("b"); [EOL]     assertImpureBooleanUnknown("-'0.0'"); [EOL]     assertImpureBooleanTrue("{a:foo()}"); [EOL]     assertImpureBooleanTrue("[foo()]"); [EOL] } <line_num>: 129,189
private void assertImpureBooleanTrue(String val) { [EOL]     assertEquals(TernaryValue.TRUE, NodeUtil.getImpureBooleanValue(getNode(val))); [EOL] } <line_num>: 191,194
private void assertImpureBooleanFalse(String val) { [EOL]     assertEquals(TernaryValue.FALSE, NodeUtil.getImpureBooleanValue(getNode(val))); [EOL] } <line_num>: 196,199
private void assertImpureBooleanUnknown(String val) { [EOL]     assertEquals(TernaryValue.UNKNOWN, NodeUtil.getImpureBooleanValue(getNode(val))); [EOL] } <line_num>: 201,204
public void testGetStringValue() { [EOL]     assertEquals("true", NodeUtil.getStringValue(getNode("true"))); [EOL]     assertEquals("10", NodeUtil.getStringValue(getNode("10"))); [EOL]     assertEquals("1", NodeUtil.getStringValue(getNode("1.0"))); [EOL]     assertEquals("0", NodeUtil.getStringValue(getNode("'0'"))); [EOL]     assertEquals(null, NodeUtil.getStringValue(getNode("/a/"))); [EOL]     assertEquals("[object Object]", NodeUtil.getStringValue(getNode("{}"))); [EOL]     assertEquals("", NodeUtil.getStringValue(getNode("[]"))); [EOL]     assertEquals("false", NodeUtil.getStringValue(getNode("false"))); [EOL]     assertEquals("null", NodeUtil.getStringValue(getNode("null"))); [EOL]     assertEquals("0", NodeUtil.getStringValue(getNode("0"))); [EOL]     assertEquals("", NodeUtil.getStringValue(getNode("''"))); [EOL]     assertEquals("undefined", NodeUtil.getStringValue(getNode("undefined"))); [EOL]     assertEquals("undefined", NodeUtil.getStringValue(getNode("void 0"))); [EOL]     assertEquals("undefined", NodeUtil.getStringValue(getNode("void foo()"))); [EOL]     assertEquals("NaN", NodeUtil.getStringValue(getNode("NaN"))); [EOL]     assertEquals("Infinity", NodeUtil.getStringValue(getNode("Infinity"))); [EOL]     assertEquals(null, NodeUtil.getStringValue(getNode("x"))); [EOL] } <line_num>: 206,225
public void testGetArrayStringValue() { [EOL]     assertEquals("", NodeUtil.getStringValue(getNode("[]"))); [EOL]     assertEquals("", NodeUtil.getStringValue(getNode("['']"))); [EOL]     assertEquals("", NodeUtil.getStringValue(getNode("[null]"))); [EOL]     assertEquals("", NodeUtil.getStringValue(getNode("[undefined]"))); [EOL]     assertEquals("", NodeUtil.getStringValue(getNode("[void 0]"))); [EOL]     assertEquals("NaN", NodeUtil.getStringValue(getNode("[NaN]"))); [EOL]     assertEquals(",", NodeUtil.getStringValue(getNode("[,'']"))); [EOL]     assertEquals(",,", NodeUtil.getStringValue(getNode("[[''],[''],['']]"))); [EOL]     assertEquals("1,2", NodeUtil.getStringValue(getNode("[[1.0],[2.0]]"))); [EOL]     assertEquals(null, NodeUtil.getStringValue(getNode("[a]"))); [EOL]     assertEquals(null, NodeUtil.getStringValue(getNode("[1,a]"))); [EOL] } <line_num>: 227,239
public void testIsObjectLiteralKey1() throws Exception { [EOL]     testIsObjectLiteralKey(parseExpr("({})"), false); [EOL]     testIsObjectLiteralKey(parseExpr("a"), false); [EOL]     testIsObjectLiteralKey(parseExpr("'a'"), false); [EOL]     testIsObjectLiteralKey(parseExpr("1"), false); [EOL]     testIsObjectLiteralKey(parseExpr("({a: 1})").getFirstChild(), true); [EOL]     testIsObjectLiteralKey(parseExpr("({1: 1})").getFirstChild(), true); [EOL]     testIsObjectLiteralKey(parseExpr("({get a(){}})").getFirstChild(), true); [EOL]     testIsObjectLiteralKey(parseExpr("({set a(b){}})").getFirstChild(), true); [EOL] } <line_num>: 241,258
private Node parseExpr(String js) { [EOL]     Compiler compiler = new Compiler(); [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     options.setLanguageIn(LanguageMode.ECMASCRIPT5); [EOL]     compiler.initOptions(options); [EOL]     Node root = compiler.parseTestCode(js); [EOL]     return root.getFirstChild().getFirstChild(); [EOL] } <line_num>: 260,267
private void testIsObjectLiteralKey(Node node, boolean expected) { [EOL]     assertEquals(expected, NodeUtil.isObjectLitKey(node, node.getParent())); [EOL] } <line_num>: 269,271
public void testGetFunctionName1() throws Exception { [EOL]     Compiler compiler = new Compiler(); [EOL]     Node parent = compiler.parseTestCode("function name(){}"); [EOL]     testGetFunctionName(parent.getFirstChild(), "name"); [EOL] } <line_num>: 273,278
public void testGetFunctionName2() throws Exception { [EOL]     Compiler compiler = new Compiler(); [EOL]     Node parent = compiler.parseTestCode("var name = function(){}").getFirstChild().getFirstChild(); [EOL]     testGetFunctionName(parent.getFirstChild(), "name"); [EOL] } <line_num>: 280,286
public void testGetFunctionName3() throws Exception { [EOL]     Compiler compiler = new Compiler(); [EOL]     Node parent = compiler.parseTestCode("qualified.name = function(){}").getFirstChild().getFirstChild(); [EOL]     testGetFunctionName(parent.getLastChild(), "qualified.name"); [EOL] } <line_num>: 288,294
public void testGetFunctionName4() throws Exception { [EOL]     Compiler compiler = new Compiler(); [EOL]     Node parent = compiler.parseTestCode("var name2 = function name1(){}").getFirstChild().getFirstChild(); [EOL]     testGetFunctionName(parent.getFirstChild(), "name2"); [EOL] } <line_num>: 296,302
public void testGetFunctionName5() throws Exception { [EOL]     Compiler compiler = new Compiler(); [EOL]     Node n = compiler.parseTestCode("qualified.name2 = function name1(){}"); [EOL]     Node parent = n.getFirstChild().getFirstChild(); [EOL]     testGetFunctionName(parent.getLastChild(), "qualified.name2"); [EOL] } <line_num>: 304,310
private void testGetFunctionName(Node function, String name) { [EOL]     assertEquals(Token.FUNCTION, function.getType()); [EOL]     assertEquals(name, NodeUtil.getFunctionName(function)); [EOL] } <line_num>: 312,315
public void testContainsFunctionDeclaration() { [EOL]     assertTrue(NodeUtil.containsFunction(getNode("function foo(){}"))); [EOL]     assertTrue(NodeUtil.containsFunction(getNode("(b?function(){}:null)"))); [EOL]     assertFalse(NodeUtil.containsFunction(getNode("(b?foo():null)"))); [EOL]     assertFalse(NodeUtil.containsFunction(getNode("foo()"))); [EOL] } <line_num>: 317,327
private void assertSideEffect(boolean se, String js) { [EOL]     Node n = parse(js); [EOL]     assertEquals(se, NodeUtil.mayHaveSideEffects(n.getFirstChild())); [EOL] } <line_num>: 329,332
private void assertSideEffect(boolean se, String js, boolean globalRegExp) { [EOL]     Node n = parse(js); [EOL]     Compiler compiler = new Compiler(); [EOL]     compiler.setHasRegExpGlobalReferences(globalRegExp); [EOL]     assertEquals(se, NodeUtil.mayHaveSideEffects(n.getFirstChild(), compiler)); [EOL] } <line_num>: 334,339
public void testMayHaveSideEffects() { [EOL]     assertSideEffect(true, "i++"); [EOL]     assertSideEffect(true, "[b, [a, i++]]"); [EOL]     assertSideEffect(true, "i=3"); [EOL]     assertSideEffect(true, "[0, i=3]"); [EOL]     assertSideEffect(true, "b()"); [EOL]     assertSideEffect(true, "[1, b()]"); [EOL]     assertSideEffect(true, "b.b=4"); [EOL]     assertSideEffect(true, "b.b--"); [EOL]     assertSideEffect(true, "i--"); [EOL]     assertSideEffect(true, "a[0][i=4]"); [EOL]     assertSideEffect(true, "a += 3"); [EOL]     assertSideEffect(true, "a, b, z += 4"); [EOL]     assertSideEffect(true, "a ? c : d++"); [EOL]     assertSideEffect(true, "a + c++"); [EOL]     assertSideEffect(true, "a + c - d()"); [EOL]     assertSideEffect(true, "a + c - d()"); [EOL]     assertSideEffect(true, "function foo() {}"); [EOL]     assertSideEffect(true, "while(true);"); [EOL]     assertSideEffect(true, "if(true){a()}"); [EOL]     assertSideEffect(false, "if(true){a}"); [EOL]     assertSideEffect(false, "(function() { })"); [EOL]     assertSideEffect(false, "(function() { i++ })"); [EOL]     assertSideEffect(false, "[function a(){}]"); [EOL]     assertSideEffect(false, "a"); [EOL]     assertSideEffect(false, "[b, c [d, [e]]]"); [EOL]     assertSideEffect(false, "({a: x, b: y, c: z})"); [EOL]     assertSideEffect(false, "/abc/gi"); [EOL]     assertSideEffect(false, "'a'"); [EOL]     assertSideEffect(false, "0"); [EOL]     assertSideEffect(false, "a + c"); [EOL]     assertSideEffect(false, "'c' + a[0]"); [EOL]     assertSideEffect(false, "a[0][1]"); [EOL]     assertSideEffect(false, "'a' + c"); [EOL]     assertSideEffect(false, "'a' + a.name"); [EOL]     assertSideEffect(false, "1, 2, 3"); [EOL]     assertSideEffect(false, "a, b, 3"); [EOL]     assertSideEffect(false, "(function(a, b) {  })"); [EOL]     assertSideEffect(false, "a ? c : d"); [EOL]     assertSideEffect(false, "'1' + navigator.userAgent"); [EOL]     assertSideEffect(false, "new RegExp('foobar', 'i')"); [EOL]     assertSideEffect(true, "new RegExp(SomethingWacky(), 'i')"); [EOL]     assertSideEffect(false, "new Array()"); [EOL]     assertSideEffect(false, "new Array"); [EOL]     assertSideEffect(false, "new Array(4)"); [EOL]     assertSideEffect(false, "new Array('a', 'b', 'c')"); [EOL]     assertSideEffect(true, "new SomeClassINeverHeardOf()"); [EOL]     assertSideEffect(true, "new SomeClassINeverHeardOf()"); [EOL]     assertSideEffect(false, "({}).foo = 4"); [EOL]     assertSideEffect(false, "([]).foo = 4"); [EOL]     assertSideEffect(false, "(function() {}).foo = 4"); [EOL]     assertSideEffect(true, "this.foo = 4"); [EOL]     assertSideEffect(true, "a.foo = 4"); [EOL]     assertSideEffect(true, "(function() { return n; })().foo = 4"); [EOL]     assertSideEffect(true, "([]).foo = bar()"); [EOL]     assertSideEffect(false, "undefined"); [EOL]     assertSideEffect(false, "void 0"); [EOL]     assertSideEffect(true, "void foo()"); [EOL]     assertSideEffect(false, "-Infinity"); [EOL]     assertSideEffect(false, "Infinity"); [EOL]     assertSideEffect(false, "NaN"); [EOL]     assertSideEffect(false, "({}||[]).foo = 2;"); [EOL]     assertSideEffect(false, "(true ? {} : []).foo = 2;"); [EOL]     assertSideEffect(false, "({},[]).foo = 2;"); [EOL]     assertSideEffect(true, "delete a.b"); [EOL] } <line_num>: 341,415
public void testObjectMethodSideEffects() { [EOL]     assertSideEffect(false, "o.toString()"); [EOL]     assertSideEffect(false, "o.valueOf()"); [EOL]     assertSideEffect(true, "o.watch()"); [EOL] } <line_num>: 417,424
public void testRegExpSideEffect() { [EOL]     assertSideEffect(false, "/abc/gi", true); [EOL]     assertSideEffect(false, "/abc/gi", false); [EOL]     assertSideEffect(true, "(/abc/gi).test('')", true); [EOL]     assertSideEffect(false, "(/abc/gi).test('')", false); [EOL]     assertSideEffect(true, "(/abc/gi).test(a)", true); [EOL]     assertSideEffect(false, "(/abc/gi).test(b)", false); [EOL]     assertSideEffect(true, "(/abc/gi).exec('')", true); [EOL]     assertSideEffect(false, "(/abc/gi).exec('')", false); [EOL]     assertSideEffect(true, "(/abc/gi).foo('')", true); [EOL]     assertSideEffect(true, "(/abc/gi).foo('')", false); [EOL]     assertSideEffect(true, "''.match('a')", true); [EOL]     assertSideEffect(false, "''.match('a')", false); [EOL]     assertSideEffect(true, "''.match(/(a)/)", true); [EOL]     assertSideEffect(false, "''.match(/(a)/)", false); [EOL]     assertSideEffect(true, "''.replace('a')", true); [EOL]     assertSideEffect(false, "''.replace('a')", false); [EOL]     assertSideEffect(true, "''.search('a')", true); [EOL]     assertSideEffect(false, "''.search('a')", false); [EOL]     assertSideEffect(true, "''.split('a')", true); [EOL]     assertSideEffect(false, "''.split('a')", false); [EOL]     assertSideEffect(true, "''.foo('a')", true); [EOL]     assertSideEffect(true, "''.foo('a')", false); [EOL]     assertSideEffect(true, "''.match(a)", true); [EOL]     assertSideEffect(true, "''.match(a)", false); [EOL] } <line_num>: 426,471
private void assertMutableState(boolean se, String js) { [EOL]     Node n = parse(js); [EOL]     assertEquals(se, NodeUtil.mayEffectMutableState(n.getFirstChild())); [EOL] } <line_num>: 473,476
public void testMayEffectMutableState() { [EOL]     assertMutableState(true, "i++"); [EOL]     assertMutableState(true, "[b, [a, i++]]"); [EOL]     assertMutableState(true, "i=3"); [EOL]     assertMutableState(true, "[0, i=3]"); [EOL]     assertMutableState(true, "b()"); [EOL]     assertMutableState(true, "void b()"); [EOL]     assertMutableState(true, "[1, b()]"); [EOL]     assertMutableState(true, "b.b=4"); [EOL]     assertMutableState(true, "b.b--"); [EOL]     assertMutableState(true, "i--"); [EOL]     assertMutableState(true, "a[0][i=4]"); [EOL]     assertMutableState(true, "a += 3"); [EOL]     assertMutableState(true, "a, b, z += 4"); [EOL]     assertMutableState(true, "a ? c : d++"); [EOL]     assertMutableState(true, "a + c++"); [EOL]     assertMutableState(true, "a + c - d()"); [EOL]     assertMutableState(true, "a + c - d()"); [EOL]     assertMutableState(true, "function foo() {}"); [EOL]     assertMutableState(true, "while(true);"); [EOL]     assertMutableState(true, "if(true){a()}"); [EOL]     assertMutableState(false, "if(true){a}"); [EOL]     assertMutableState(true, "(function() { })"); [EOL]     assertMutableState(true, "(function() { i++ })"); [EOL]     assertMutableState(true, "[function a(){}]"); [EOL]     assertMutableState(false, "a"); [EOL]     assertMutableState(true, "[b, c [d, [e]]]"); [EOL]     assertMutableState(true, "({a: x, b: y, c: z})"); [EOL]     assertMutableState(true, "/abc/gi"); [EOL]     assertMutableState(false, "'a'"); [EOL]     assertMutableState(false, "0"); [EOL]     assertMutableState(false, "a + c"); [EOL]     assertMutableState(false, "'c' + a[0]"); [EOL]     assertMutableState(false, "a[0][1]"); [EOL]     assertMutableState(false, "'a' + c"); [EOL]     assertMutableState(false, "'a' + a.name"); [EOL]     assertMutableState(false, "1, 2, 3"); [EOL]     assertMutableState(false, "a, b, 3"); [EOL]     assertMutableState(true, "(function(a, b) {  })"); [EOL]     assertMutableState(false, "a ? c : d"); [EOL]     assertMutableState(false, "'1' + navigator.userAgent"); [EOL]     assertMutableState(true, "new RegExp('foobar', 'i')"); [EOL]     assertMutableState(true, "new RegExp(SomethingWacky(), 'i')"); [EOL]     assertMutableState(true, "new Array()"); [EOL]     assertMutableState(true, "new Array"); [EOL]     assertMutableState(true, "new Array(4)"); [EOL]     assertMutableState(true, "new Array('a', 'b', 'c')"); [EOL]     assertMutableState(true, "new SomeClassINeverHeardOf()"); [EOL] } <line_num>: 478,532
public void testIsFunctionExpression() { [EOL]     assertContainsAnonFunc(true, "(function(){})"); [EOL]     assertContainsAnonFunc(true, "[function a(){}]"); [EOL]     assertContainsAnonFunc(false, "{x: function a(){}}"); [EOL]     assertContainsAnonFunc(true, "(function a(){})()"); [EOL]     assertContainsAnonFunc(true, "x = function a(){};"); [EOL]     assertContainsAnonFunc(true, "var x = function a(){};"); [EOL]     assertContainsAnonFunc(true, "if (function a(){});"); [EOL]     assertContainsAnonFunc(true, "while (function a(){});"); [EOL]     assertContainsAnonFunc(true, "do; while (function a(){});"); [EOL]     assertContainsAnonFunc(true, "for (function a(){};;);"); [EOL]     assertContainsAnonFunc(true, "for (;function a(){};);"); [EOL]     assertContainsAnonFunc(true, "for (;;function a(){});"); [EOL]     assertContainsAnonFunc(true, "for (p in function a(){});"); [EOL]     assertContainsAnonFunc(true, "with (function a(){}) {}"); [EOL]     assertContainsAnonFunc(false, "function a(){}"); [EOL]     assertContainsAnonFunc(false, "if (x) function a(){};"); [EOL]     assertContainsAnonFunc(false, "if (x) { function a(){} }"); [EOL]     assertContainsAnonFunc(false, "if (x); else function a(){};"); [EOL]     assertContainsAnonFunc(false, "while (x) function a(){};"); [EOL]     assertContainsAnonFunc(false, "do function a(){} while (0);"); [EOL]     assertContainsAnonFunc(false, "for (;;) function a(){}"); [EOL]     assertContainsAnonFunc(false, "for (p in o) function a(){};"); [EOL]     assertContainsAnonFunc(false, "with (x) function a(){}"); [EOL] } <line_num>: 535,559
private void assertContainsAnonFunc(boolean expected, String js) { [EOL]     Node funcParent = findParentOfFuncDescendant(parse(js)); [EOL]     assertNotNull("Expected function node in parse tree of: " + js, funcParent); [EOL]     Node funcNode = getFuncChild(funcParent); [EOL]     assertEquals(expected, NodeUtil.isFunctionExpression(funcNode)); [EOL] } <line_num>: 561,566
private Node findParentOfFuncDescendant(Node n) { [EOL]     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { [EOL]         if (c.isFunction()) { [EOL]             return n; [EOL]         } [EOL]         Node result = findParentOfFuncDescendant(c); [EOL]         if (result != null) { [EOL]             return result; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 568,579
private Node getFuncChild(Node n) { [EOL]     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { [EOL]         if (c.isFunction()) { [EOL]             return c; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 581,588
public void testContainsType() { [EOL]     assertTrue(NodeUtil.containsType(parse("this"), Token.THIS)); [EOL]     assertTrue(NodeUtil.containsType(parse("function foo(){}(this)"), Token.THIS)); [EOL]     assertTrue(NodeUtil.containsType(parse("b?this:null"), Token.THIS)); [EOL]     assertFalse(NodeUtil.containsType(parse("a"), Token.THIS)); [EOL]     assertFalse(NodeUtil.containsType(parse("function foo(){}"), Token.THIS)); [EOL]     assertFalse(NodeUtil.containsType(parse("(b?foo():null)"), Token.THIS)); [EOL] } <line_num>: 590,604
public void testReferencesThis() { [EOL]     assertTrue(NodeUtil.referencesThis(parse("this"))); [EOL]     assertFalse(NodeUtil.referencesThis(parse("function foo(){this}"))); [EOL]     Node n = parse("function foo(){this}").getFirstChild(); [EOL]     assertEquals(n.getType(), Token.FUNCTION); [EOL]     assertTrue(NodeUtil.referencesThis(n)); [EOL]     assertTrue(NodeUtil.referencesThis(parse("b?this:null"))); [EOL]     assertFalse(NodeUtil.referencesThis(parse("a"))); [EOL]     n = parse("function foo(){}").getFirstChild(); [EOL]     assertEquals(n.getType(), Token.FUNCTION); [EOL]     assertFalse(NodeUtil.referencesThis(n)); [EOL]     assertFalse(NodeUtil.referencesThis(parse("(b?foo():null)"))); [EOL] } <line_num>: 606,626
public void testGetNodeTypeReferenceCount() { [EOL]     assertEquals(0, NodeUtil.getNodeTypeReferenceCount(parse("function foo(){}"), Token.THIS, Predicates.<Node>alwaysTrue())); [EOL]     assertEquals(1, NodeUtil.getNodeTypeReferenceCount(parse("this"), Token.THIS, Predicates.<Node>alwaysTrue())); [EOL]     assertEquals(2, NodeUtil.getNodeTypeReferenceCount(parse("this;function foo(){}(this)"), Token.THIS, Predicates.<Node>alwaysTrue())); [EOL] } <line_num>: 628,638
public void testIsNameReferenceCount() { [EOL]     assertTrue(NodeUtil.isNameReferenced(parse("function foo(){}"), "foo")); [EOL]     assertTrue(NodeUtil.isNameReferenced(parse("var foo = function(){}"), "foo")); [EOL]     assertFalse(NodeUtil.isNameReferenced(parse("function foo(){}"), "undefined")); [EOL]     assertTrue(NodeUtil.isNameReferenced(parse("undefined"), "undefined")); [EOL]     assertTrue(NodeUtil.isNameReferenced(parse("undefined;function foo(){}(undefined)"), "undefined")); [EOL]     assertTrue(NodeUtil.isNameReferenced(parse("goo.foo"), "goo")); [EOL]     assertFalse(NodeUtil.isNameReferenced(parse("goo.foo"), "foo")); [EOL] } <line_num>: 640,656
public void testGetNameReferenceCount() { [EOL]     assertEquals(0, NodeUtil.getNameReferenceCount(parse("function foo(){}"), "undefined")); [EOL]     assertEquals(1, NodeUtil.getNameReferenceCount(parse("undefined"), "undefined")); [EOL]     assertEquals(2, NodeUtil.getNameReferenceCount(parse("undefined;function foo(){}(undefined)"), "undefined")); [EOL]     assertEquals(1, NodeUtil.getNameReferenceCount(parse("goo.foo"), "goo")); [EOL]     assertEquals(0, NodeUtil.getNameReferenceCount(parse("goo.foo"), "foo")); [EOL]     assertEquals(1, NodeUtil.getNameReferenceCount(parse("function foo(){}"), "foo")); [EOL]     assertEquals(1, NodeUtil.getNameReferenceCount(parse("var foo = function(){}"), "foo")); [EOL] } <line_num>: 659,675
public void testGetVarsDeclaredInBranch() { [EOL]     Compiler compiler = new Compiler(); [EOL]     assertNodeNames(Sets.newHashSet("foo"), NodeUtil.getVarsDeclaredInBranch(parse("var foo;"))); [EOL]     assertNodeNames(Sets.newHashSet("foo", "goo"), NodeUtil.getVarsDeclaredInBranch(parse("var foo,goo;"))); [EOL]     assertNodeNames(Sets.<String>newHashSet(), NodeUtil.getVarsDeclaredInBranch(parse("foo();"))); [EOL]     assertNodeNames(Sets.<String>newHashSet(), NodeUtil.getVarsDeclaredInBranch(parse("function f(){var foo;}"))); [EOL]     assertNodeNames(Sets.newHashSet("goo"), NodeUtil.getVarsDeclaredInBranch(parse("var goo;function f(){var foo;}"))); [EOL] } <line_num>: 677,695
private void assertNodeNames(Set<String> nodeNames, Collection<Node> nodes) { [EOL]     Set<String> actualNames = Sets.newHashSet(); [EOL]     for (Node node : nodes) { [EOL]         actualNames.add(node.getString()); [EOL]     } [EOL]     assertEquals(nodeNames, actualNames); [EOL] } <line_num>: 697,703
public void testIsControlStructureCodeBlock() { [EOL]     Node root = parse("if (x) foo(); else boo();"); [EOL]     Node ifNode = root.getFirstChild(); [EOL]     Node ifCondition = ifNode.getFirstChild(); [EOL]     Node ifCase = ifNode.getFirstChild().getNext(); [EOL]     Node elseCase = ifNode.getLastChild(); [EOL]     assertFalse(NodeUtil.isControlStructureCodeBlock(ifNode, ifCondition)); [EOL]     assertTrue(NodeUtil.isControlStructureCodeBlock(ifNode, ifCase)); [EOL]     assertTrue(NodeUtil.isControlStructureCodeBlock(ifNode, elseCase)); [EOL] } <line_num>: 705,716
public void testIsFunctionExpression1() { [EOL]     Node root = parse("(function foo() {})"); [EOL]     Node statementNode = root.getFirstChild(); [EOL]     assertTrue(statementNode.isExprResult()); [EOL]     Node functionNode = statementNode.getFirstChild(); [EOL]     assertTrue(functionNode.isFunction()); [EOL]     assertTrue(NodeUtil.isFunctionExpression(functionNode)); [EOL] } <line_num>: 718,725
public void testIsFunctionExpression2() { [EOL]     Node root = parse("function foo() {}"); [EOL]     Node functionNode = root.getFirstChild(); [EOL]     assertTrue(functionNode.isFunction()); [EOL]     assertFalse(NodeUtil.isFunctionExpression(functionNode)); [EOL] } <line_num>: 727,732
public void testRemoveChildBlock() { [EOL]     Node actual = parse("{{x()}}"); [EOL]     Node outerBlockNode = actual.getFirstChild(); [EOL]     Node innerBlockNode = outerBlockNode.getFirstChild(); [EOL]     innerBlockNode.setIsSyntheticBlock(true); [EOL]     NodeUtil.removeChild(outerBlockNode, innerBlockNode); [EOL]     String expected = "{{}}"; [EOL]     String difference = parse(expected).checkTreeEquals(actual); [EOL]     if (difference != null) { [EOL]         assertTrue("Nodes do not match:\n" + difference, false); [EOL]     } [EOL] } <line_num>: 734,748
public void testRemoveTryChild1() { [EOL]     Node actual = parse("try {foo()} catch(e) {} finally {}"); [EOL]     Node tryNode = actual.getFirstChild(); [EOL]     Node tryBlock = tryNode.getFirstChild(); [EOL]     Node catchBlocks = tryNode.getFirstChild().getNext(); [EOL]     Node finallyBlock = tryNode.getLastChild(); [EOL]     NodeUtil.removeChild(tryNode, finallyBlock); [EOL]     String expected = "try {foo()} catch(e) {}"; [EOL]     String difference = parse(expected).checkTreeEquals(actual); [EOL]     if (difference != null) { [EOL]         assertTrue("Nodes do not match:\n" + difference, false); [EOL]     } [EOL] } <line_num>: 750,765
public void testRemoveTryChild2() { [EOL]     Node actual = parse("try {foo()} catch(e) {} finally {}"); [EOL]     Node tryNode = actual.getFirstChild(); [EOL]     Node tryBlock = tryNode.getFirstChild(); [EOL]     Node catchBlocks = tryNode.getFirstChild().getNext(); [EOL]     NodeUtil.removeChild(tryNode, tryBlock); [EOL]     String expected = "try {} catch(e) {} finally {}"; [EOL]     String difference = parse(expected).checkTreeEquals(actual); [EOL]     if (difference != null) { [EOL]         assertTrue("Nodes do not match:\n" + difference, false); [EOL]     } [EOL] } <line_num>: 767,781
public void testRemoveTryChild3() { [EOL]     Node actual = parse("try {foo()} catch(e) {} finally {}"); [EOL]     Node tryNode = actual.getFirstChild(); [EOL]     Node tryBlock = tryNode.getFirstChild(); [EOL]     Node catchBlocks = tryNode.getFirstChild().getNext(); [EOL]     Node catchBlock = catchBlocks.getFirstChild(); [EOL]     Node finallyBlock = tryNode.getLastChild(); [EOL]     NodeUtil.removeChild(catchBlocks, catchBlock); [EOL]     String expected = "try {foo()} finally {}"; [EOL]     String difference = parse(expected).checkTreeEquals(actual); [EOL]     if (difference != null) { [EOL]         assertTrue("Nodes do not match:\n" + difference, false); [EOL]     } [EOL] } <line_num>: 783,799
public void testRemoveTryChild4() { [EOL]     Node actual = parse("try {foo()} catch(e) {} finally {}"); [EOL]     Node tryNode = actual.getFirstChild(); [EOL]     Node tryBlock = tryNode.getFirstChild(); [EOL]     Node catchBlocks = tryNode.getFirstChild().getNext(); [EOL]     Node catchBlock = catchBlocks.getFirstChild(); [EOL]     Node finallyBlock = tryNode.getLastChild(); [EOL]     NodeUtil.removeChild(tryNode, catchBlocks); [EOL]     String expected = "try {foo()} finally {}"; [EOL]     String difference = parse(expected).checkTreeEquals(actual); [EOL]     if (difference != null) { [EOL]         assertTrue("Nodes do not match:\n" + difference, false); [EOL]     } [EOL] } <line_num>: 801,817
public void testRemoveTryChild5() { [EOL]     Node actual = parse("try {foo()} catch(e) {} finally {}"); [EOL]     Node tryNode = actual.getFirstChild(); [EOL]     Node tryBlock = tryNode.getFirstChild(); [EOL]     Node catchBlocks = tryNode.getFirstChild().getNext(); [EOL]     Node catchBlock = catchBlocks.getFirstChild(); [EOL]     Node finallyBlock = tryNode.getLastChild(); [EOL]     NodeUtil.removeChild(catchBlocks, catchBlock); [EOL]     String expected = "try {foo()} finally {}"; [EOL]     String difference = parse(expected).checkTreeEquals(actual); [EOL]     if (difference != null) { [EOL]         assertTrue("Nodes do not match:\n" + difference, false); [EOL]     } [EOL] } <line_num>: 819,834
public void testRemoveVarChild() { [EOL]     Compiler compiler = new Compiler(); [EOL]     Node actual = parse("var foo, goo, hoo"); [EOL]     Node varNode = actual.getFirstChild(); [EOL]     Node nameNode = varNode.getFirstChild(); [EOL]     NodeUtil.removeChild(varNode, nameNode); [EOL]     String expected = "var goo, hoo"; [EOL]     String difference = parse(expected).checkTreeEquals(actual); [EOL]     if (difference != null) { [EOL]         assertTrue("Nodes do not match:\n" + difference, false); [EOL]     } [EOL]     actual = parse("var foo, goo, hoo"); [EOL]     varNode = actual.getFirstChild(); [EOL]     nameNode = varNode.getFirstChild().getNext(); [EOL]     NodeUtil.removeChild(varNode, nameNode); [EOL]     expected = "var foo, hoo"; [EOL]     difference = parse(expected).checkTreeEquals(actual); [EOL]     if (difference != null) { [EOL]         assertTrue("Nodes do not match:\n" + difference, false); [EOL]     } [EOL]     actual = parse("var foo, hoo"); [EOL]     varNode = actual.getFirstChild(); [EOL]     nameNode = varNode.getFirstChild().getNext(); [EOL]     NodeUtil.removeChild(varNode, nameNode); [EOL]     expected = "var foo"; [EOL]     difference = parse(expected).checkTreeEquals(actual); [EOL]     if (difference != null) { [EOL]         assertTrue("Nodes do not match:\n" + difference, false); [EOL]     } [EOL]     actual = parse("var hoo"); [EOL]     varNode = actual.getFirstChild(); [EOL]     nameNode = varNode.getFirstChild(); [EOL]     NodeUtil.removeChild(varNode, nameNode); [EOL]     expected = ""; [EOL]     difference = parse(expected).checkTreeEquals(actual); [EOL]     if (difference != null) { [EOL]         assertTrue("Nodes do not match:\n" + difference, false); [EOL]     } [EOL] } <line_num>: 836,891
public void testRemoveLabelChild1() { [EOL]     Compiler compiler = new Compiler(); [EOL]     Node actual = parse("foo: goo()"); [EOL]     Node labelNode = actual.getFirstChild(); [EOL]     Node callExpressNode = labelNode.getLastChild(); [EOL]     NodeUtil.removeChild(labelNode, callExpressNode); [EOL]     String expected = ""; [EOL]     String difference = parse(expected).checkTreeEquals(actual); [EOL]     if (difference != null) { [EOL]         assertTrue("Nodes do not match:\n" + difference, false); [EOL]     } [EOL] } <line_num>: 893,908
public void testRemoveLabelChild2() { [EOL]     Node actual = parse("achoo: foo: goo()"); [EOL]     Node labelNode = actual.getFirstChild(); [EOL]     Node callExpressNode = labelNode.getLastChild(); [EOL]     NodeUtil.removeChild(labelNode, callExpressNode); [EOL]     String expected = ""; [EOL]     String difference = parse(expected).checkTreeEquals(actual); [EOL]     if (difference != null) { [EOL]         assertTrue("Nodes do not match:\n" + difference, false); [EOL]     } [EOL] } <line_num>: 910,923
public void testRemoveForChild() { [EOL]     Compiler compiler = new Compiler(); [EOL]     Node actual = parse("for(var a=0;a<0;a++)foo()"); [EOL]     Node forNode = actual.getFirstChild(); [EOL]     Node child = forNode.getFirstChild(); [EOL]     NodeUtil.removeChild(forNode, child); [EOL]     String expected = "for(;a<0;a++)foo()"; [EOL]     String difference = parse(expected).checkTreeEquals(actual); [EOL]     assertNull("Nodes do not match:\n" + difference, difference); [EOL]     actual = parse("for(var a=0;a<0;a++)foo()"); [EOL]     forNode = actual.getFirstChild(); [EOL]     child = forNode.getFirstChild().getNext(); [EOL]     NodeUtil.removeChild(forNode, child); [EOL]     expected = "for(var a=0;;a++)foo()"; [EOL]     difference = parse(expected).checkTreeEquals(actual); [EOL]     assertNull("Nodes do not match:\n" + difference, difference); [EOL]     actual = parse("for(var a=0;a<0;a++)foo()"); [EOL]     forNode = actual.getFirstChild(); [EOL]     child = forNode.getFirstChild().getNext().getNext(); [EOL]     NodeUtil.removeChild(forNode, child); [EOL]     expected = "for(var a=0;a<0;)foo()"; [EOL]     difference = parse(expected).checkTreeEquals(actual); [EOL]     assertNull("Nodes do not match:\n" + difference, difference); [EOL]     actual = parse("for(var a=0;a<0;a++)foo()"); [EOL]     forNode = actual.getFirstChild(); [EOL]     child = forNode.getLastChild(); [EOL]     NodeUtil.removeChild(forNode, child); [EOL]     expected = "for(var a=0;a<0;a++);"; [EOL]     difference = parse(expected).checkTreeEquals(actual); [EOL]     assertNull("Nodes do not match:\n" + difference, difference); [EOL]     actual = parse("for(a in ack)foo();"); [EOL]     forNode = actual.getFirstChild(); [EOL]     child = forNode.getLastChild(); [EOL]     NodeUtil.removeChild(forNode, child); [EOL]     expected = "for(a in ack);"; [EOL]     difference = parse(expected).checkTreeEquals(actual); [EOL]     assertNull("Nodes do not match:\n" + difference, difference); [EOL] } <line_num>: 925,986
public void testMergeBlock1() { [EOL]     Compiler compiler = new Compiler(); [EOL]     Node actual = parse("{{a();b();}}"); [EOL]     Node parentBlock = actual.getFirstChild(); [EOL]     Node childBlock = parentBlock.getFirstChild(); [EOL]     assertTrue(NodeUtil.tryMergeBlock(childBlock)); [EOL]     String expected = "{a();b();}"; [EOL]     String difference = parse(expected).checkTreeEquals(actual); [EOL]     assertNull("Nodes do not match:\n" + difference, difference); [EOL] } <line_num>: 988,1001
public void testMergeBlock2() { [EOL]     Compiler compiler = new Compiler(); [EOL]     Node actual = parse("foo:{a();}"); [EOL]     Node parentLabel = actual.getFirstChild(); [EOL]     Node childBlock = parentLabel.getLastChild(); [EOL]     assertFalse(NodeUtil.tryMergeBlock(childBlock)); [EOL] } <line_num>: 1003,1013
public void testMergeBlock3() { [EOL]     Compiler compiler = new Compiler(); [EOL]     String code = "foo:{a();boo()}"; [EOL]     Node actual = parse("foo:{a();boo()}"); [EOL]     Node parentLabel = actual.getFirstChild(); [EOL]     Node childBlock = parentLabel.getLastChild(); [EOL]     assertFalse(NodeUtil.tryMergeBlock(childBlock)); [EOL]     String expected = code; [EOL]     String difference = parse(expected).checkTreeEquals(actual); [EOL]     assertNull("Nodes do not match:\n" + difference, difference); [EOL] } <line_num>: 1015,1029
public void testGetSourceName() { [EOL]     Node n = new Node(Token.BLOCK); [EOL]     Node parent = new Node(Token.BLOCK, n); [EOL]     parent.setSourceFileForTesting("foo"); [EOL]     assertEquals("foo", NodeUtil.getSourceName(n)); [EOL] } <line_num>: 1031,1037
public void testLocalValue1() throws Exception { [EOL]     assertFalse(testLocalValue("x")); [EOL]     assertFalse(testLocalValue("x()")); [EOL]     assertFalse(testLocalValue("this")); [EOL]     assertFalse(testLocalValue("arguments")); [EOL]     assertFalse(testLocalValue("new x()")); [EOL]     assertFalse(testLocalValue("(new x()).y")); [EOL]     assertFalse(testLocalValue("(new x())['y']")); [EOL]     assertTrue(testLocalValue("null")); [EOL]     assertTrue(testLocalValue("undefined")); [EOL]     assertTrue(testLocalValue("Infinity")); [EOL]     assertTrue(testLocalValue("NaN")); [EOL]     assertTrue(testLocalValue("1")); [EOL]     assertTrue(testLocalValue("'a'")); [EOL]     assertTrue(testLocalValue("true")); [EOL]     assertTrue(testLocalValue("false")); [EOL]     assertTrue(testLocalValue("[]")); [EOL]     assertTrue(testLocalValue("{}")); [EOL]     assertTrue(testLocalValue("[x]")); [EOL]     assertTrue(testLocalValue("{'a':x}")); [EOL]     assertTrue(testLocalValue("++x")); [EOL]     assertTrue(testLocalValue("--x")); [EOL]     assertFalse(testLocalValue("x++")); [EOL]     assertFalse(testLocalValue("x--")); [EOL]     assertTrue(testLocalValue("x=1")); [EOL]     assertFalse(testLocalValue("x=[]")); [EOL]     assertFalse(testLocalValue("x=y")); [EOL]     assertTrue(testLocalValue("x+=y")); [EOL]     assertTrue(testLocalValue("x*=y")); [EOL]     assertTrue(testLocalValue("x==y")); [EOL]     assertTrue(testLocalValue("x!=y")); [EOL]     assertTrue(testLocalValue("x>y")); [EOL]     assertTrue(testLocalValue("(1,2)")); [EOL]     assertTrue(testLocalValue("(x,1)")); [EOL]     assertFalse(testLocalValue("(x,y)")); [EOL]     assertTrue(testLocalValue("1||2")); [EOL]     assertFalse(testLocalValue("x||1")); [EOL]     assertFalse(testLocalValue("x||y")); [EOL]     assertFalse(testLocalValue("1||y")); [EOL]     assertTrue(testLocalValue("1&&2")); [EOL]     assertFalse(testLocalValue("x&&1")); [EOL]     assertFalse(testLocalValue("x&&y")); [EOL]     assertFalse(testLocalValue("1&&y")); [EOL]     assertTrue(testLocalValue("x?1:2")); [EOL]     assertFalse(testLocalValue("x?x:2")); [EOL]     assertFalse(testLocalValue("x?1:x")); [EOL]     assertFalse(testLocalValue("x?x:y")); [EOL]     assertTrue(testLocalValue("!y")); [EOL]     assertTrue(testLocalValue("~y")); [EOL]     assertTrue(testLocalValue("y + 1")); [EOL]     assertTrue(testLocalValue("y + z")); [EOL]     assertTrue(testLocalValue("y * z")); [EOL]     assertTrue(testLocalValue("'a' in x")); [EOL]     assertTrue(testLocalValue("typeof x")); [EOL]     assertTrue(testLocalValue("x instanceof y")); [EOL]     assertTrue(testLocalValue("void x")); [EOL]     assertTrue(testLocalValue("void 0")); [EOL]     assertFalse(testLocalValue("{}.x")); [EOL]     assertTrue(testLocalValue("{}.toString()")); [EOL]     assertTrue(testLocalValue("o.toString()")); [EOL]     assertFalse(testLocalValue("o.valueOf()")); [EOL]     assertTrue(testLocalValue("delete a.b")); [EOL] } <line_num>: 1039,1136
public void testLocalValue2() { [EOL]     Node newExpr = getNode("new x()"); [EOL]     assertFalse(NodeUtil.evaluatesToLocalValue(newExpr)); [EOL]     Preconditions.checkState(newExpr.isNew()); [EOL]     Node.SideEffectFlags flags = new Node.SideEffectFlags(); [EOL]     flags.clearAllFlags(); [EOL]     newExpr.setSideEffectFlags(flags.valueOf()); [EOL]     assertTrue(NodeUtil.evaluatesToLocalValue(newExpr)); [EOL]     flags.clearAllFlags(); [EOL]     flags.setMutatesThis(); [EOL]     newExpr.setSideEffectFlags(flags.valueOf()); [EOL]     assertTrue(NodeUtil.evaluatesToLocalValue(newExpr)); [EOL]     flags.clearAllFlags(); [EOL]     flags.setReturnsTainted(); [EOL]     newExpr.setSideEffectFlags(flags.valueOf()); [EOL]     assertTrue(NodeUtil.evaluatesToLocalValue(newExpr)); [EOL]     flags.clearAllFlags(); [EOL]     flags.setThrows(); [EOL]     newExpr.setSideEffectFlags(flags.valueOf()); [EOL]     assertFalse(NodeUtil.evaluatesToLocalValue(newExpr)); [EOL]     flags.clearAllFlags(); [EOL]     flags.setMutatesArguments(); [EOL]     newExpr.setSideEffectFlags(flags.valueOf()); [EOL]     assertFalse(NodeUtil.evaluatesToLocalValue(newExpr)); [EOL]     flags.clearAllFlags(); [EOL]     flags.setMutatesGlobalState(); [EOL]     newExpr.setSideEffectFlags(flags.valueOf()); [EOL]     assertFalse(NodeUtil.evaluatesToLocalValue(newExpr)); [EOL] } <line_num>: 1138,1179
public void testCallSideEffects() { [EOL]     Node callExpr = getNode("new x().method()"); [EOL]     assertTrue(NodeUtil.functionCallHasSideEffects(callExpr)); [EOL]     Node newExpr = callExpr.getFirstChild().getFirstChild(); [EOL]     Preconditions.checkState(newExpr.isNew()); [EOL]     Node.SideEffectFlags flags = new Node.SideEffectFlags(); [EOL]     flags.clearAllFlags(); [EOL]     newExpr.setSideEffectFlags(flags.valueOf()); [EOL]     flags.clearAllFlags(); [EOL]     callExpr.setSideEffectFlags(flags.valueOf()); [EOL]     assertTrue(NodeUtil.evaluatesToLocalValue(callExpr)); [EOL]     assertFalse(NodeUtil.functionCallHasSideEffects(callExpr)); [EOL]     assertFalse(NodeUtil.mayHaveSideEffects(callExpr)); [EOL]     flags.clearAllFlags(); [EOL]     newExpr.setSideEffectFlags(flags.valueOf()); [EOL]     flags.clearAllFlags(); [EOL]     flags.setMutatesThis(); [EOL]     callExpr.setSideEffectFlags(flags.valueOf()); [EOL]     assertTrue(NodeUtil.evaluatesToLocalValue(callExpr)); [EOL]     assertFalse(NodeUtil.functionCallHasSideEffects(callExpr)); [EOL]     assertFalse(NodeUtil.mayHaveSideEffects(callExpr)); [EOL]     flags.clearAllFlags(); [EOL]     newExpr.setSideEffectFlags(flags.valueOf()); [EOL]     flags.clearAllFlags(); [EOL]     flags.setMutatesThis(); [EOL]     flags.setReturnsTainted(); [EOL]     callExpr.setSideEffectFlags(flags.valueOf()); [EOL]     assertFalse(NodeUtil.evaluatesToLocalValue(callExpr)); [EOL]     assertFalse(NodeUtil.functionCallHasSideEffects(callExpr)); [EOL]     assertFalse(NodeUtil.mayHaveSideEffects(callExpr)); [EOL]     flags.clearAllFlags(); [EOL]     newExpr.setSideEffectFlags(flags.valueOf()); [EOL]     flags.clearAllFlags(); [EOL]     flags.setReturnsTainted(); [EOL]     callExpr.setSideEffectFlags(flags.valueOf()); [EOL]     assertFalse(NodeUtil.evaluatesToLocalValue(callExpr)); [EOL]     assertFalse(NodeUtil.functionCallHasSideEffects(callExpr)); [EOL]     assertFalse(NodeUtil.mayHaveSideEffects(callExpr)); [EOL]     flags.clearAllFlags(); [EOL]     flags.setMutatesGlobalState(); [EOL]     newExpr.setSideEffectFlags(flags.valueOf()); [EOL]     flags.clearAllFlags(); [EOL]     callExpr.setSideEffectFlags(flags.valueOf()); [EOL]     assertTrue(NodeUtil.evaluatesToLocalValue(callExpr)); [EOL]     assertFalse(NodeUtil.functionCallHasSideEffects(callExpr)); [EOL]     assertTrue(NodeUtil.mayHaveSideEffects(callExpr)); [EOL] } <line_num>: 1181,1244
private boolean testLocalValue(String js) { [EOL]     return NodeUtil.evaluatesToLocalValue(getNode(js)); [EOL] } <line_num>: 1246,1248
public void testValidDefine() { [EOL]     assertTrue(testValidDefineValue("1")); [EOL]     assertTrue(testValidDefineValue("-3")); [EOL]     assertTrue(testValidDefineValue("true")); [EOL]     assertTrue(testValidDefineValue("false")); [EOL]     assertTrue(testValidDefineValue("'foo'")); [EOL]     assertFalse(testValidDefineValue("x")); [EOL]     assertFalse(testValidDefineValue("null")); [EOL]     assertFalse(testValidDefineValue("undefined")); [EOL]     assertFalse(testValidDefineValue("NaN")); [EOL]     assertTrue(testValidDefineValue("!true")); [EOL]     assertTrue(testValidDefineValue("-true")); [EOL]     assertTrue(testValidDefineValue("1 & 8")); [EOL]     assertTrue(testValidDefineValue("1 + 8")); [EOL]     assertTrue(testValidDefineValue("'a' + 'b'")); [EOL]     assertFalse(testValidDefineValue("1 & foo")); [EOL] } <line_num>: 1250,1269
private boolean testValidDefineValue(String js) { [EOL]     Node script = parse("var test = " + js + ";"); [EOL]     Node var = script.getFirstChild(); [EOL]     Node name = var.getFirstChild(); [EOL]     Node value = name.getFirstChild(); [EOL]     ImmutableSet<String> defines = ImmutableSet.of(); [EOL]     return NodeUtil.isValidDefineValue(value, defines); [EOL] } <line_num>: 1271,1279
public void testGetNumberValue() { [EOL]     assertEquals(1.0, NodeUtil.getNumberValue(getNode("'\\uFEFF1'"))); [EOL]     assertEquals(0.0, NodeUtil.getNumberValue(getNode("''"))); [EOL]     assertEquals(0.0, NodeUtil.getNumberValue(getNode("' '"))); [EOL]     assertEquals(0.0, NodeUtil.getNumberValue(getNode("' \\t'"))); [EOL]     assertEquals(0.0, NodeUtil.getNumberValue(getNode("'+0'"))); [EOL]     assertEquals(-0.0, NodeUtil.getNumberValue(getNode("'-0'"))); [EOL]     assertEquals(2.0, NodeUtil.getNumberValue(getNode("'+2'"))); [EOL]     assertEquals(-1.6, NodeUtil.getNumberValue(getNode("'-1.6'"))); [EOL]     assertEquals(16.0, NodeUtil.getNumberValue(getNode("'16'"))); [EOL]     assertEquals(16.0, NodeUtil.getNumberValue(getNode("' 16 '"))); [EOL]     assertEquals(16.0, NodeUtil.getNumberValue(getNode("' 16 '"))); [EOL]     assertEquals(12300.0, NodeUtil.getNumberValue(getNode("'123e2'"))); [EOL]     assertEquals(12300.0, NodeUtil.getNumberValue(getNode("'123E2'"))); [EOL]     assertEquals(1.23, NodeUtil.getNumberValue(getNode("'123e-2'"))); [EOL]     assertEquals(1.23, NodeUtil.getNumberValue(getNode("'123E-2'"))); [EOL]     assertEquals(-1.23, NodeUtil.getNumberValue(getNode("'-123e-2'"))); [EOL]     assertEquals(-1.23, NodeUtil.getNumberValue(getNode("'-123E-2'"))); [EOL]     assertEquals(1.23, NodeUtil.getNumberValue(getNode("'+123e-2'"))); [EOL]     assertEquals(1.23, NodeUtil.getNumberValue(getNode("'+123E-2'"))); [EOL]     assertEquals(12300.0, NodeUtil.getNumberValue(getNode("'+123e+2'"))); [EOL]     assertEquals(12300.0, NodeUtil.getNumberValue(getNode("'+123E+2'"))); [EOL]     assertEquals(15.0, NodeUtil.getNumberValue(getNode("'0xf'"))); [EOL]     assertEquals(15.0, NodeUtil.getNumberValue(getNode("'0xF'"))); [EOL]     assertEquals(null, NodeUtil.getNumberValue(getNode("'-0xf'"))); [EOL]     assertEquals(null, NodeUtil.getNumberValue(getNode("'-0xF'"))); [EOL]     assertEquals(null, NodeUtil.getNumberValue(getNode("'+0xf'"))); [EOL]     assertEquals(null, NodeUtil.getNumberValue(getNode("'+0xF'"))); [EOL]     assertEquals(16.0, NodeUtil.getNumberValue(getNode("'0X10'"))); [EOL]     assertEquals(Double.NaN, NodeUtil.getNumberValue(getNode("'0X10.8'"))); [EOL]     assertEquals(77.0, NodeUtil.getNumberValue(getNode("'077'"))); [EOL]     assertEquals(-77.0, NodeUtil.getNumberValue(getNode("'-077'"))); [EOL]     assertEquals(-77.5, NodeUtil.getNumberValue(getNode("'-077.5'"))); [EOL]     assertEquals(Double.NEGATIVE_INFINITY, NodeUtil.getNumberValue(getNode("'-Infinity'"))); [EOL]     assertEquals(Double.POSITIVE_INFINITY, NodeUtil.getNumberValue(getNode("'Infinity'"))); [EOL]     assertEquals(Double.POSITIVE_INFINITY, NodeUtil.getNumberValue(getNode("'+Infinity'"))); [EOL]     assertEquals(null, NodeUtil.getNumberValue(getNode("'-infinity'"))); [EOL]     assertEquals(null, NodeUtil.getNumberValue(getNode("'infinity'"))); [EOL]     assertEquals(null, NodeUtil.getNumberValue(getNode("'+infinity'"))); [EOL]     assertEquals(Double.NaN, NodeUtil.getNumberValue(getNode("'NaN'"))); [EOL]     assertEquals(Double.NaN, NodeUtil.getNumberValue(getNode("'some unknown string'"))); [EOL]     assertEquals(Double.NaN, NodeUtil.getNumberValue(getNode("'123 blah'"))); [EOL]     assertEquals(1.0, NodeUtil.getNumberValue(getNode("1"))); [EOL]     assertEquals(-1.0, NodeUtil.getNumberValue(getNode("-1"))); [EOL]     assertEquals(null, NodeUtil.getNumberValue(getNode("+1"))); [EOL]     assertEquals(22.0, NodeUtil.getNumberValue(getNode("22"))); [EOL]     assertEquals(18.0, NodeUtil.getNumberValue(getNode("022"))); [EOL]     assertEquals(34.0, NodeUtil.getNumberValue(getNode("0x22"))); [EOL]     assertEquals(1.0, NodeUtil.getNumberValue(getNode("true"))); [EOL]     assertEquals(0.0, NodeUtil.getNumberValue(getNode("false"))); [EOL]     assertEquals(0.0, NodeUtil.getNumberValue(getNode("null"))); [EOL]     assertEquals(Double.NaN, NodeUtil.getNumberValue(getNode("void 0"))); [EOL]     assertEquals(Double.NaN, NodeUtil.getNumberValue(getNode("void f"))); [EOL]     assertEquals(null, NodeUtil.getNumberValue(getNode("void f()"))); [EOL]     assertEquals(Double.NaN, NodeUtil.getNumberValue(getNode("NaN"))); [EOL]     assertEquals(Double.POSITIVE_INFINITY, NodeUtil.getNumberValue(getNode("Infinity"))); [EOL]     assertEquals(Double.NEGATIVE_INFINITY, NodeUtil.getNumberValue(getNode("-Infinity"))); [EOL]     assertEquals(null, NodeUtil.getNumberValue(getNode("infinity"))); [EOL]     assertEquals(null, NodeUtil.getNumberValue(getNode("-infinity"))); [EOL]     assertEquals(null, NodeUtil.getNumberValue(getNode("x"))); [EOL]     assertEquals(null, NodeUtil.getNumberValue(getNode("x.y"))); [EOL]     assertEquals(null, NodeUtil.getNumberValue(getNode("1/2"))); [EOL]     assertEquals(null, NodeUtil.getNumberValue(getNode("1-2"))); [EOL]     assertEquals(null, NodeUtil.getNumberValue(getNode("+1"))); [EOL] } <line_num>: 1281,1381
public void testIsNumbericResult() { [EOL]     assertTrue(NodeUtil.isNumericResult(getNode("1"))); [EOL]     assertFalse(NodeUtil.isNumericResult(getNode("true"))); [EOL]     assertTrue(NodeUtil.isNumericResult(getNode("+true"))); [EOL]     assertTrue(NodeUtil.isNumericResult(getNode("+1"))); [EOL]     assertTrue(NodeUtil.isNumericResult(getNode("-1"))); [EOL]     assertTrue(NodeUtil.isNumericResult(getNode("-Infinity"))); [EOL]     assertTrue(NodeUtil.isNumericResult(getNode("Infinity"))); [EOL]     assertTrue(NodeUtil.isNumericResult(getNode("NaN"))); [EOL]     assertFalse(NodeUtil.isNumericResult(getNode("undefined"))); [EOL]     assertFalse(NodeUtil.isNumericResult(getNode("void 0"))); [EOL]     assertTrue(NodeUtil.isNumericResult(getNode("a << b"))); [EOL]     assertTrue(NodeUtil.isNumericResult(getNode("a >> b"))); [EOL]     assertTrue(NodeUtil.isNumericResult(getNode("a >>> b"))); [EOL]     assertFalse(NodeUtil.isNumericResult(getNode("a == b"))); [EOL]     assertFalse(NodeUtil.isNumericResult(getNode("a != b"))); [EOL]     assertFalse(NodeUtil.isNumericResult(getNode("a === b"))); [EOL]     assertFalse(NodeUtil.isNumericResult(getNode("a !== b"))); [EOL]     assertFalse(NodeUtil.isNumericResult(getNode("a < b"))); [EOL]     assertFalse(NodeUtil.isNumericResult(getNode("a > b"))); [EOL]     assertFalse(NodeUtil.isNumericResult(getNode("a <= b"))); [EOL]     assertFalse(NodeUtil.isNumericResult(getNode("a >= b"))); [EOL]     assertFalse(NodeUtil.isNumericResult(getNode("a in b"))); [EOL]     assertFalse(NodeUtil.isNumericResult(getNode("a instanceof b"))); [EOL]     assertFalse(NodeUtil.isNumericResult(getNode("'a'"))); [EOL]     assertFalse(NodeUtil.isNumericResult(getNode("'a'+b"))); [EOL]     assertFalse(NodeUtil.isNumericResult(getNode("a+'b'"))); [EOL]     assertFalse(NodeUtil.isNumericResult(getNode("a+b"))); [EOL]     assertFalse(NodeUtil.isNumericResult(getNode("a()"))); [EOL]     assertFalse(NodeUtil.isNumericResult(getNode("''.a"))); [EOL]     assertFalse(NodeUtil.isNumericResult(getNode("a.b"))); [EOL]     assertFalse(NodeUtil.isNumericResult(getNode("a.b()"))); [EOL]     assertFalse(NodeUtil.isNumericResult(getNode("a().b()"))); [EOL]     assertFalse(NodeUtil.isNumericResult(getNode("new a()"))); [EOL]     assertFalse(NodeUtil.isNumericResult(getNode("([1,2])"))); [EOL]     assertFalse(NodeUtil.isNumericResult(getNode("({a:1})"))); [EOL]     assertTrue(NodeUtil.isNumericResult(getNode("1 && 2"))); [EOL]     assertTrue(NodeUtil.isNumericResult(getNode("1 || 2"))); [EOL]     assertTrue(NodeUtil.isNumericResult(getNode("a ? 2 : 3"))); [EOL]     assertTrue(NodeUtil.isNumericResult(getNode("a,1"))); [EOL]     assertTrue(NodeUtil.isNumericResult(getNode("a=1"))); [EOL] } <line_num>: 1383,1431
public void testIsBooleanResult() { [EOL]     assertFalse(NodeUtil.isBooleanResult(getNode("1"))); [EOL]     assertTrue(NodeUtil.isBooleanResult(getNode("true"))); [EOL]     assertFalse(NodeUtil.isBooleanResult(getNode("+true"))); [EOL]     assertFalse(NodeUtil.isBooleanResult(getNode("+1"))); [EOL]     assertFalse(NodeUtil.isBooleanResult(getNode("-1"))); [EOL]     assertFalse(NodeUtil.isBooleanResult(getNode("-Infinity"))); [EOL]     assertFalse(NodeUtil.isBooleanResult(getNode("Infinity"))); [EOL]     assertFalse(NodeUtil.isBooleanResult(getNode("NaN"))); [EOL]     assertFalse(NodeUtil.isBooleanResult(getNode("undefined"))); [EOL]     assertFalse(NodeUtil.isBooleanResult(getNode("void 0"))); [EOL]     assertFalse(NodeUtil.isBooleanResult(getNode("a << b"))); [EOL]     assertFalse(NodeUtil.isBooleanResult(getNode("a >> b"))); [EOL]     assertFalse(NodeUtil.isBooleanResult(getNode("a >>> b"))); [EOL]     assertTrue(NodeUtil.isBooleanResult(getNode("a == b"))); [EOL]     assertTrue(NodeUtil.isBooleanResult(getNode("a != b"))); [EOL]     assertTrue(NodeUtil.isBooleanResult(getNode("a === b"))); [EOL]     assertTrue(NodeUtil.isBooleanResult(getNode("a !== b"))); [EOL]     assertTrue(NodeUtil.isBooleanResult(getNode("a < b"))); [EOL]     assertTrue(NodeUtil.isBooleanResult(getNode("a > b"))); [EOL]     assertTrue(NodeUtil.isBooleanResult(getNode("a <= b"))); [EOL]     assertTrue(NodeUtil.isBooleanResult(getNode("a >= b"))); [EOL]     assertTrue(NodeUtil.isBooleanResult(getNode("a in b"))); [EOL]     assertTrue(NodeUtil.isBooleanResult(getNode("a instanceof b"))); [EOL]     assertFalse(NodeUtil.isBooleanResult(getNode("'a'"))); [EOL]     assertFalse(NodeUtil.isBooleanResult(getNode("'a'+b"))); [EOL]     assertFalse(NodeUtil.isBooleanResult(getNode("a+'b'"))); [EOL]     assertFalse(NodeUtil.isBooleanResult(getNode("a+b"))); [EOL]     assertFalse(NodeUtil.isBooleanResult(getNode("a()"))); [EOL]     assertFalse(NodeUtil.isBooleanResult(getNode("''.a"))); [EOL]     assertFalse(NodeUtil.isBooleanResult(getNode("a.b"))); [EOL]     assertFalse(NodeUtil.isBooleanResult(getNode("a.b()"))); [EOL]     assertFalse(NodeUtil.isBooleanResult(getNode("a().b()"))); [EOL]     assertFalse(NodeUtil.isBooleanResult(getNode("new a()"))); [EOL]     assertTrue(NodeUtil.isBooleanResult(getNode("delete a"))); [EOL]     assertFalse(NodeUtil.isBooleanResult(getNode("([true,false])"))); [EOL]     assertFalse(NodeUtil.isBooleanResult(getNode("({a:true})"))); [EOL]     assertTrue(NodeUtil.isBooleanResult(getNode("true && false"))); [EOL]     assertTrue(NodeUtil.isBooleanResult(getNode("true || false"))); [EOL]     assertTrue(NodeUtil.isBooleanResult(getNode("a ? true : false"))); [EOL]     assertTrue(NodeUtil.isBooleanResult(getNode("a,true"))); [EOL]     assertTrue(NodeUtil.isBooleanResult(getNode("a=true"))); [EOL]     assertFalse(NodeUtil.isBooleanResult(getNode("a=1"))); [EOL] } <line_num>: 1433,1483
public void testMayBeString() { [EOL]     assertFalse(NodeUtil.mayBeString(getNode("1"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("true"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("+true"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("+1"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("-1"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("-Infinity"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("Infinity"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("NaN"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("undefined"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("void 0"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("null"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("a << b"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("a >> b"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("a >>> b"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("a == b"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("a != b"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("a === b"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("a !== b"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("a < b"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("a > b"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("a <= b"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("a >= b"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("a in b"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("a instanceof b"))); [EOL]     assertTrue(NodeUtil.mayBeString(getNode("'a'"))); [EOL]     assertTrue(NodeUtil.mayBeString(getNode("'a'+b"))); [EOL]     assertTrue(NodeUtil.mayBeString(getNode("a+'b'"))); [EOL]     assertTrue(NodeUtil.mayBeString(getNode("a+b"))); [EOL]     assertTrue(NodeUtil.mayBeString(getNode("a()"))); [EOL]     assertTrue(NodeUtil.mayBeString(getNode("''.a"))); [EOL]     assertTrue(NodeUtil.mayBeString(getNode("a.b"))); [EOL]     assertTrue(NodeUtil.mayBeString(getNode("a.b()"))); [EOL]     assertTrue(NodeUtil.mayBeString(getNode("a().b()"))); [EOL]     assertTrue(NodeUtil.mayBeString(getNode("new a()"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("1 && 2"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("1 || 2"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("1 ? 2 : 3"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("1,2"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("a=1"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("1+1"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("true+true"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("null+null"))); [EOL]     assertFalse(NodeUtil.mayBeString(getNode("NaN+NaN"))); [EOL]     assertTrue(NodeUtil.mayBeString(getNode("([1,2])"))); [EOL]     assertTrue(NodeUtil.mayBeString(getNode("({a:1})"))); [EOL]     assertTrue(NodeUtil.mayBeString(getNode("({}+1)"))); [EOL]     assertTrue(NodeUtil.mayBeString(getNode("(1+{})"))); [EOL]     assertTrue(NodeUtil.mayBeString(getNode("([]+1)"))); [EOL]     assertTrue(NodeUtil.mayBeString(getNode("(1+[])"))); [EOL] } <line_num>: 1485,1542
public void testValidNames() { [EOL]     assertTrue(NodeUtil.isValidPropertyName("a")); [EOL]     assertTrue(NodeUtil.isValidPropertyName("a3")); [EOL]     assertFalse(NodeUtil.isValidPropertyName("3a")); [EOL]     assertFalse(NodeUtil.isValidPropertyName("a.")); [EOL]     assertFalse(NodeUtil.isValidPropertyName(".a")); [EOL]     assertFalse(NodeUtil.isValidPropertyName("a.b")); [EOL]     assertFalse(NodeUtil.isValidPropertyName("true")); [EOL]     assertFalse(NodeUtil.isValidPropertyName("a.true")); [EOL]     assertFalse(NodeUtil.isValidPropertyName("a..b")); [EOL]     assertTrue(NodeUtil.isValidSimpleName("a")); [EOL]     assertTrue(NodeUtil.isValidSimpleName("a3")); [EOL]     assertFalse(NodeUtil.isValidSimpleName("3a")); [EOL]     assertFalse(NodeUtil.isValidSimpleName("a.")); [EOL]     assertFalse(NodeUtil.isValidSimpleName(".a")); [EOL]     assertFalse(NodeUtil.isValidSimpleName("a.b")); [EOL]     assertFalse(NodeUtil.isValidSimpleName("true")); [EOL]     assertFalse(NodeUtil.isValidSimpleName("a.true")); [EOL]     assertFalse(NodeUtil.isValidSimpleName("a..b")); [EOL]     assertTrue(NodeUtil.isValidQualifiedName("a")); [EOL]     assertTrue(NodeUtil.isValidQualifiedName("a3")); [EOL]     assertFalse(NodeUtil.isValidQualifiedName("3a")); [EOL]     assertFalse(NodeUtil.isValidQualifiedName("a.")); [EOL]     assertFalse(NodeUtil.isValidQualifiedName(".a")); [EOL]     assertTrue(NodeUtil.isValidQualifiedName("a.b")); [EOL]     assertFalse(NodeUtil.isValidQualifiedName("true")); [EOL]     assertFalse(NodeUtil.isValidQualifiedName("a.true")); [EOL]     assertFalse(NodeUtil.isValidQualifiedName("a..b")); [EOL] } <line_num>: 1544,1574
public void testGetNearestFunctionName() { [EOL]     testFunctionName("(function() {})()", null); [EOL]     testFunctionName("function a() {}", "a"); [EOL]     testFunctionName("(function a() {})", "a"); [EOL]     testFunctionName("({a:function () {}})", "a"); [EOL]     testFunctionName("({get a() {}})", "a"); [EOL]     testFunctionName("({set a(b) {}})", "a"); [EOL]     testFunctionName("({set a(b) {}})", "a"); [EOL]     testFunctionName("({1:function () {}})", "1"); [EOL]     testFunctionName("var a = function a() {}", "a"); [EOL]     testFunctionName("var a;a = function a() {}", "a"); [EOL]     testFunctionName("var o;o.a = function a() {}", "o.a"); [EOL]     testFunctionName("this.a = function a() {}", "this.a"); [EOL] } <line_num>: 1576,1589
public void testGetBestLValue() { [EOL]     assertEquals("x", getFunctionLValue("var x = function() {};")); [EOL]     assertEquals("x", getFunctionLValue("x = function() {};")); [EOL]     assertEquals("x", getFunctionLValue("function x() {};")); [EOL]     assertEquals("x", getFunctionLValue("var x = y ? z : function() {};")); [EOL]     assertEquals("x", getFunctionLValue("var x = y ? function() {} : z;")); [EOL]     assertEquals("x", getFunctionLValue("var x = y && function() {};")); [EOL]     assertEquals("x", getFunctionLValue("var x = y || function() {};")); [EOL]     assertEquals("x", getFunctionLValue("var x = (y, function() {});")); [EOL] } <line_num>: 1591,1600
public void testIsNaN() { [EOL]     assertEquals(true, NodeUtil.isNaN(getNode("NaN"))); [EOL]     assertEquals(false, NodeUtil.isNaN(getNode("Infinity"))); [EOL]     assertEquals(false, NodeUtil.isNaN(getNode("x"))); [EOL]     assertEquals(true, NodeUtil.isNaN(getNode("0/0"))); [EOL]     assertEquals(false, NodeUtil.isNaN(getNode("1/0"))); [EOL]     assertEquals(false, NodeUtil.isNaN(getNode("0/1"))); [EOL]     assertEquals(false, NodeUtil.isNaN(IR.number(0.0))); [EOL] } <line_num>: 1602,1610
public void testIsExecutedExactlyOnce() { [EOL]     assertEquals(true, executedOnceTestCase("x;")); [EOL]     assertEquals(true, executedOnceTestCase("x && 1;")); [EOL]     assertEquals(false, executedOnceTestCase("1 && x;")); [EOL]     assertEquals(false, executedOnceTestCase("1 && (x && 1);")); [EOL]     assertEquals(true, executedOnceTestCase("x || 1;")); [EOL]     assertEquals(false, executedOnceTestCase("1 || x;")); [EOL]     assertEquals(false, executedOnceTestCase("1 && (x || 1);")); [EOL]     assertEquals(true, executedOnceTestCase("x ? 1 : 2;")); [EOL]     assertEquals(false, executedOnceTestCase("1 ? 1 : x;")); [EOL]     assertEquals(false, executedOnceTestCase("1 ? x : 2;")); [EOL]     assertEquals(false, executedOnceTestCase("1 && (x ? 1 : 2);")); [EOL]     assertEquals(true, executedOnceTestCase("if (x) {}")); [EOL]     assertEquals(false, executedOnceTestCase("if (true) {x;}")); [EOL]     assertEquals(false, executedOnceTestCase("if (true) {} else {x;}")); [EOL]     assertEquals(false, executedOnceTestCase("if (1) { if (x) {} }")); [EOL]     assertEquals(true, executedOnceTestCase("for(x;;){}")); [EOL]     assertEquals(false, executedOnceTestCase("for(;x;){}")); [EOL]     assertEquals(false, executedOnceTestCase("for(;;x){}")); [EOL]     assertEquals(false, executedOnceTestCase("for(;;){x;}")); [EOL]     assertEquals(false, executedOnceTestCase("if (1) { for(x;;){} }")); [EOL]     assertEquals(false, executedOnceTestCase("for(x in {}){}")); [EOL]     assertEquals(true, executedOnceTestCase("for({}.a in x){}")); [EOL]     assertEquals(false, executedOnceTestCase("for({}.a in {}){x}")); [EOL]     assertEquals(false, executedOnceTestCase("if (1) { for(x in {}){} }")); [EOL]     assertEquals(true, executedOnceTestCase("switch (x) {}")); [EOL]     assertEquals(false, executedOnceTestCase("switch (1) {case x:}")); [EOL]     assertEquals(false, executedOnceTestCase("switch (1) {case 1: x}")); [EOL]     assertEquals(false, executedOnceTestCase("switch (1) {default: x}")); [EOL]     assertEquals(false, executedOnceTestCase("if (1) { switch (x) {} }")); [EOL]     assertEquals(false, executedOnceTestCase("while (x) {}")); [EOL]     assertEquals(false, executedOnceTestCase("while (1) {x}")); [EOL]     assertEquals(false, executedOnceTestCase("do {} while (x)")); [EOL]     assertEquals(false, executedOnceTestCase("do {x} while (1)")); [EOL]     assertEquals(false, executedOnceTestCase("try {x} catch (e) {}")); [EOL]     assertEquals(false, executedOnceTestCase("try {} catch (e) {x}")); [EOL]     assertEquals(true, executedOnceTestCase("try {} finally {x}")); [EOL]     assertEquals(false, executedOnceTestCase("if (1) { try {} finally {x} }")); [EOL] } <line_num>: 1612,1668
private boolean executedOnceTestCase(String code) { [EOL]     Node ast = parse(code); [EOL]     Node nameNode = getNameNode(ast, "x"); [EOL]     return NodeUtil.isExecutedExactlyOnce(nameNode); [EOL] } <line_num>: 1670,1674
private String getFunctionLValue(String js) { [EOL]     Node lVal = NodeUtil.getBestLValue(getFunctionNode(js)); [EOL]     return lVal == null ? null : lVal.getString(); [EOL] } <line_num>: 1676,1679
static void testFunctionName(String js, String expected) { [EOL]     assertEquals(expected, NodeUtil.getNearestFunctionName(getFunctionNode(js))); [EOL] } <line_num>: 1681,1685
static Node getFunctionNode(String js) { [EOL]     Node root = parse(js); [EOL]     return getFunctionNode(root); [EOL] } <line_num>: 1687,1690
static Node getFunctionNode(Node n) { [EOL]     if (n.isFunction()) { [EOL]         return n; [EOL]     } [EOL]     for (Node c : n.children()) { [EOL]         Node result = getFunctionNode(c); [EOL]         if (result != null) { [EOL]             return result; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 1692,1703
static Node getNameNode(Node n, String name) { [EOL]     if (n.isName() && n.getString().equals(name)) { [EOL]         return n; [EOL]     } [EOL]     for (Node c : n.children()) { [EOL]         Node result = getNameNode(c, name); [EOL]         if (result != null) { [EOL]             return result; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 1705,1716
