public VarCheckTest() { [EOL]     super(EXTERNS); [EOL] } <line_num>: 34,36
VariableTestCheck(AbstractCompiler compiler) { [EOL]     this.compiler = compiler; [EOL] } <line_num>: 341,343
@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     super.allowExternsChanges(true); [EOL]     super.enableAstValidation(true); [EOL]     strictModuleDepErrorLevel = CheckLevel.OFF; [EOL]     externValidationErrorLevel = null; [EOL]     sanityCheck = false; [EOL]     testSetupPass = null; [EOL] } <line_num>: 38,48
@Override [EOL] protected CompilerOptions getOptions() { [EOL]     CompilerOptions options = super.getOptions(); [EOL]     options.setWarningLevel(DiagnosticGroups.STRICT_MODULE_DEP_CHECK, strictModuleDepErrorLevel); [EOL]     if (externValidationErrorLevel != null) { [EOL]         options.setWarningLevel(DiagnosticGroups.EXTERNS_VALIDATION, externValidationErrorLevel); [EOL]     } [EOL]     return options; [EOL] } <line_num>: 50,60
@Override [EOL] public void process(Node externs, Node root) { [EOL]     if (testSetupPass != null) { [EOL]         testSetupPass.process(externs, root); [EOL]     } [EOL]     new VarCheck(compiler, false).process(externs, root); [EOL]     if (!compiler.hasErrors()) { [EOL]         new VarCheck(compiler, true).process(externs, root); [EOL]     } [EOL] } <line_num>: 66,74
@Override [EOL] protected CompilerPass getProcessor(final Compiler compiler) { [EOL]     if (!sanityCheck) { [EOL]         return new CompilerPass() { [EOL]  [EOL]             @Override [EOL]             public void process(Node externs, Node root) { [EOL]                 if (testSetupPass != null) { [EOL]                     testSetupPass.process(externs, root); [EOL]                 } [EOL]                 new VarCheck(compiler, false).process(externs, root); [EOL]                 if (!compiler.hasErrors()) { [EOL]                     new VarCheck(compiler, true).process(externs, root); [EOL]                 } [EOL]             } [EOL]         }; [EOL]     } [EOL]     return new VarCheck(compiler, sanityCheck); [EOL] } <line_num>: 62,78
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 80,84
public void testBreak() { [EOL]     testSame("a: while(1) break a;"); [EOL] } <line_num>: 86,88
public void testContinue() { [EOL]     testSame("a: while(1) continue a;"); [EOL] } <line_num>: 90,92
public void testReferencedVarNotDefined() { [EOL]     test("x = 0;", null, VarCheck.UNDEFINED_VAR_ERROR); [EOL] } <line_num>: 94,96
public void testReferencedVarDefined1() { [EOL]     testSame("var x, y; x=1;"); [EOL] } <line_num>: 98,100
public void testReferencedVarDefined2() { [EOL]     testSame("var x; function y() {x=1;}"); [EOL] } <line_num>: 102,104
public void testReferencedVarsExternallyDefined() { [EOL]     testSame("var x = window; alert(x);"); [EOL] } <line_num>: 106,108
public void testMultiplyDeclaredVars1() { [EOL]     test("var x = 1; var x = 2;", null, SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR); [EOL] } <line_num>: 110,113
public void testMultiplyDeclaredVars2() { [EOL]     test("var y; try { y=1 } catch (x) {}" + "try { y=1 } catch (x) {}", "var y;try{y=1}catch(x){}try{y=1}catch(x){}"); [EOL] } <line_num>: 115,119
public void testMultiplyDeclaredVars3() { [EOL]     test("try { var x = 1; x *=2; } catch (x) {}", null, SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR); [EOL] } <line_num>: 121,124
public void testMultiplyDeclaredVars4() { [EOL]     testSame("x;", "var x = 1; var x = 2;", SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR, true); [EOL] } <line_num>: 126,129
public void testVarReferenceInExterns() { [EOL]     testSame("asdf;", "var asdf;", VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR); [EOL] } <line_num>: 131,134
public void testCallInExterns() { [EOL]     testSame("yz();", "function yz() {}", VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR); [EOL] } <line_num>: 136,139
public void testPropReferenceInExterns1() { [EOL]     testSame("asdf.foo;", "var asdf;", VarCheck.UNDEFINED_EXTERN_VAR_ERROR); [EOL] } <line_num>: 141,144
public void testPropReferenceInExterns2() { [EOL]     testSame("asdf.foo;", "", VarCheck.UNDEFINED_VAR_ERROR, true); [EOL] } <line_num>: 146,149
public void testPropReferenceInExterns3() { [EOL]     testSame("asdf.foo;", "var asdf;", VarCheck.UNDEFINED_EXTERN_VAR_ERROR); [EOL]     externValidationErrorLevel = CheckLevel.ERROR; [EOL]     test("asdf.foo;", "var asdf;", "", VarCheck.UNDEFINED_EXTERN_VAR_ERROR, null); [EOL]     externValidationErrorLevel = CheckLevel.OFF; [EOL]     test("asdf.foo;", "var asdf;", "var asdf;", null, null); [EOL] } <line_num>: 151,162
public void testVarInWithBlock() { [EOL]     test("var a = {b:5}; with (a){b;}", null, VarCheck.UNDEFINED_VAR_ERROR); [EOL] } <line_num>: 164,166
public void testValidFunctionExpr() { [EOL]     testSame("(function() {});"); [EOL] } <line_num>: 168,170
public void testRecursiveFunction() { [EOL]     testSame("(function a() { return a(); })();"); [EOL] } <line_num>: 172,174
public void testRecursiveFunction2() { [EOL]     testSame("var a = 3; (function a() { return a(); })();"); [EOL] } <line_num>: 176,178
public void testLegalVarReferenceBetweenModules() { [EOL]     testDependentModules("var x = 10;", "var y = x++;", null); [EOL] } <line_num>: 180,182
public void testMissingModuleDependencyDefault() { [EOL]     testIndependentModules("var x = 10;", "var y = x++;", null, VarCheck.MISSING_MODULE_DEP_ERROR); [EOL] } <line_num>: 184,187
public void testViolatedModuleDependencyDefault() { [EOL]     testDependentModules("var y = x++;", "var x = 10;", VarCheck.VIOLATED_MODULE_DEP_ERROR); [EOL] } <line_num>: 189,192
public void testMissingModuleDependencySkipNonStrict() { [EOL]     sanityCheck = true; [EOL]     testIndependentModules("var x = 10;", "var y = x++;", null, null); [EOL] } <line_num>: 194,198
public void testViolatedModuleDependencySkipNonStrict() { [EOL]     sanityCheck = true; [EOL]     testDependentModules("var y = x++;", "var x = 10;", null); [EOL] } <line_num>: 200,204
public void testMissingModuleDependencySkipNonStrictNotPromoted() { [EOL]     sanityCheck = true; [EOL]     strictModuleDepErrorLevel = CheckLevel.ERROR; [EOL]     testIndependentModules("var x = 10;", "var y = x++;", null, null); [EOL] } <line_num>: 206,210
public void testViolatedModuleDependencyNonStrictNotPromoted() { [EOL]     sanityCheck = true; [EOL]     strictModuleDepErrorLevel = CheckLevel.ERROR; [EOL]     testDependentModules("var y = x++;", "var x = 10;", null); [EOL] } <line_num>: 212,216
public void testDependentStrictModuleDependencyCheck() { [EOL]     strictModuleDepErrorLevel = CheckLevel.ERROR; [EOL]     testDependentModules("var f = function() {return new B();};", "var B = function() {}", VarCheck.STRICT_MODULE_DEP_ERROR); [EOL] } <line_num>: 218,223
public void testIndependentStrictModuleDependencyCheck() { [EOL]     strictModuleDepErrorLevel = CheckLevel.ERROR; [EOL]     testIndependentModules("var f = function() {return new B();};", "var B = function() {}", VarCheck.STRICT_MODULE_DEP_ERROR, null); [EOL] } <line_num>: 225,230
public void testStarStrictModuleDependencyCheck() { [EOL]     strictModuleDepErrorLevel = CheckLevel.WARNING; [EOL]     testSame(createModuleStar("function a() {}", "function b() { a(); c(); }", "function c() { a(); }"), VarCheck.STRICT_MODULE_DEP_ERROR); [EOL] } <line_num>: 232,237
public void testForwardVarReferenceInLocalScope1() { [EOL]     testDependentModules("var x = 10; function a() {y++;}", "var y = 11; a();", null); [EOL] } <line_num>: 239,242
public void testForwardVarReferenceInLocalScope2() { [EOL]     testDependentModules("var x = 10; function a() {y++;} a();", "var y = 11;", null); [EOL] } <line_num>: 244,249
private void testDependentModules(String code1, String code2, DiagnosticType error) { [EOL]     testDependentModules(code1, code2, error, null); [EOL] } <line_num>: 251,254
private void testDependentModules(String code1, String code2, DiagnosticType error, DiagnosticType warning) { [EOL]     testTwoModules(code1, code2, true, error, warning); [EOL] } <line_num>: 256,260
private void testIndependentModules(String code1, String code2, DiagnosticType error, DiagnosticType warning) { [EOL]     testTwoModules(code1, code2, false, error, warning); [EOL] } <line_num>: 262,266
private void testTwoModules(String code1, String code2, boolean m2DependsOnm1, DiagnosticType error, DiagnosticType warning) { [EOL]     JSModule m1 = new JSModule("m1"); [EOL]     m1.add(SourceFile.fromCode("input1", code1)); [EOL]     JSModule m2 = new JSModule("m2"); [EOL]     m2.add(SourceFile.fromCode("input2", code2)); [EOL]     if (m2DependsOnm1) { [EOL]         m2.addDependency(m1); [EOL]     } [EOL]     test(new JSModule[] { m1, m2 }, new String[] { code1, code2 }, error, warning); [EOL] } <line_num>: 268,279
public void testSimple() { [EOL]     checkSynthesizedExtern("x", "var x;"); [EOL]     checkSynthesizedExtern("var x", ""); [EOL] } <line_num>: 284,287
public void testSimpleSanityCheck() { [EOL]     sanityCheck = true; [EOL]     try { [EOL]         checkSynthesizedExtern("x", ""); [EOL]     } catch (RuntimeException e) { [EOL]         assertTrue(e.getMessage().indexOf("Unexpected variable x") != -1); [EOL]     } [EOL] } <line_num>: 289,296
public void testParameter() { [EOL]     checkSynthesizedExtern("function f(x){}", ""); [EOL] } <line_num>: 298,300
public void testLocalVar() { [EOL]     checkSynthesizedExtern("function f(){x}", "var x"); [EOL] } <line_num>: 302,304
public void testTwoLocalVars() { [EOL]     checkSynthesizedExtern("function f(){x}function g() {x}", "var x"); [EOL] } <line_num>: 306,308
public void testInnerFunctionLocalVar() { [EOL]     checkSynthesizedExtern("function f(){function g() {x}}", "var x"); [EOL] } <line_num>: 310,312
public void testNoCreateVarsForLabels() { [EOL]     checkSynthesizedExtern("x:var y", ""); [EOL] } <line_num>: 314,316
public void testVariableInNormalCodeUsedInExterns1() { [EOL]     checkSynthesizedExtern("x.foo;", "var x;", "var x; x.foo;"); [EOL] } <line_num>: 318,321
public void testVariableInNormalCodeUsedInExterns2() { [EOL]     checkSynthesizedExtern("x;", "var x;", "var x; x;"); [EOL] } <line_num>: 323,326
public void testVariableInNormalCodeUsedInExterns3() { [EOL]     checkSynthesizedExtern("x.foo;", "function x() {}", "var x; x.foo; "); [EOL] } <line_num>: 328,331
public void testVariableInNormalCodeUsedInExterns4() { [EOL]     checkSynthesizedExtern("x;", "function x() {}", "var x; x; "); [EOL] } <line_num>: 333,336
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (n.isName() && !parent.isFunction() && !parent.isLabel()) { [EOL]         assertTrue("Variable " + n.getString() + " should have be declared", t.getScope().isDeclared(n.getString(), true)); [EOL]     } [EOL] } <line_num>: 349,356
@Override [EOL] public void process(Node externs, Node root) { [EOL]     NodeTraversal.traverseRoots(compiler, Lists.newArrayList(externs, root), new AbstractPostOrderCallback() { [EOL]  [EOL]         @Override [EOL]         public void visit(NodeTraversal t, Node n, Node parent) { [EOL]             if (n.isName() && !parent.isFunction() && !parent.isLabel()) { [EOL]                 assertTrue("Variable " + n.getString() + " should have be declared", t.getScope().isDeclared(n.getString(), true)); [EOL]             } [EOL]         } [EOL]     }); [EOL] } <line_num>: 345,358
public void checkSynthesizedExtern(String input, String expectedExtern) { [EOL]     checkSynthesizedExtern("", input, expectedExtern); [EOL] } <line_num>: 361,364
public void checkSynthesizedExtern(String extern, String input, String expectedExtern) { [EOL]     Compiler compiler = new Compiler(); [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     options.setWarningLevel(DiagnosticGroup.forType(VarCheck.UNDEFINED_VAR_ERROR), CheckLevel.OFF); [EOL]     compiler.init(ImmutableList.of(SourceFile.fromCode("extern", extern)), ImmutableList.of(SourceFile.fromCode("input", input)), options); [EOL]     compiler.parseInputs(); [EOL]     assertFalse(compiler.hasErrors()); [EOL]     Node externsAndJs = compiler.getRoot(); [EOL]     Node root = externsAndJs.getLastChild(); [EOL]     Node rootOriginal = root.cloneTree(); [EOL]     Node externs = externsAndJs.getFirstChild(); [EOL]     Node expected = compiler.parseTestCode(expectedExtern); [EOL]     assertFalse(compiler.hasErrors()); [EOL]     (new VarCheck(compiler, sanityCheck)).process(externs, root); [EOL]     if (!sanityCheck) { [EOL]         (new VariableTestCheck(compiler)).process(externs, root); [EOL]     } [EOL]     String externsCode = compiler.toSource(externs); [EOL]     String expectedCode = compiler.toSource(expected); [EOL]     assertEquals(expectedCode, externsCode); [EOL] } <line_num>: 366,399
