public TypeCheckFunctionCheckTest() { [EOL]     parseTypeInfo = true; [EOL]     enableTypeCheck(CheckLevel.ERROR); [EOL] } <line_num>: 34,37
@Override [EOL] public void process(Node externs, Node root) { [EOL] } <line_num>: 41,42
@Override [EOL] protected CompilerPass getProcessor(Compiler compiler) { [EOL]     return new CompilerPass() { [EOL]  [EOL]         @Override [EOL]         public void process(Node externs, Node root) { [EOL]         } [EOL]     }; [EOL] } <line_num>: 39,44
@Override [EOL] protected CodingConvention getCodingConvention() { [EOL]     return convention; [EOL] } <line_num>: 46,49
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 51,56
@Override [EOL] public void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     convention = new GoogleCodingConvention(); [EOL] } <line_num>: 58,62
public void testFunctionAritySimple() { [EOL]     assertOk("", ""); [EOL]     assertOk("a", "'a'"); [EOL]     assertOk("a,b", "10, 20"); [EOL] } <line_num>: 64,68
public void testFunctionArityWithOptionalArgs() { [EOL]     assertOk("a,b,opt_c", "1,2"); [EOL]     assertOk("a,b,opt_c", "1,2,3"); [EOL]     assertOk("a,opt_b,opt_c", "1"); [EOL] } <line_num>: 70,74
public void testFunctionArityWithVarArgs() { [EOL]     assertOk("var_args", ""); [EOL]     assertOk("var_args", "1,2"); [EOL]     assertOk("a,b,var_args", "1,2"); [EOL]     assertOk("a,b,var_args", "1,2,3"); [EOL]     assertOk("a,b,var_args", "1,2,3,4,5"); [EOL]     assertOk("a,opt_b,var_args", "1"); [EOL]     assertOk("a,opt_b,var_args", "1,2"); [EOL]     assertOk("a,opt_b,var_args", "1,2,3"); [EOL]     assertOk("a,opt_b,var_args", "1,2,3,4,5"); [EOL] } <line_num>: 76,86
public void testWrongNumberOfArgs() { [EOL]     assertWarning("a,b,opt_c", "1", WRONG_ARGUMENT_COUNT); [EOL]     assertWarning("a,b,opt_c", "1,2,3,4", WRONG_ARGUMENT_COUNT); [EOL]     assertWarning("a,b", "1, 2, 3", WRONG_ARGUMENT_COUNT); [EOL]     assertWarning("", "1, 2, 3", WRONG_ARGUMENT_COUNT); [EOL]     assertWarning("a,b,c,d", "1, 2, 3", WRONG_ARGUMENT_COUNT); [EOL]     assertWarning("a,b,var_args", "1", WRONG_ARGUMENT_COUNT); [EOL]     assertWarning("a,b,opt_c,var_args", "1", WRONG_ARGUMENT_COUNT); [EOL] } <line_num>: 88,103
public void testVarArgsLast() { [EOL]     assertWarning("a,b,var_args,c", "1,2,3,4", VAR_ARGS_MUST_BE_LAST); [EOL] } <line_num>: 105,108
public void testOptArgsLast() { [EOL]     assertWarning("a,b,opt_d,c", "1, 2, 3", OPTIONAL_ARG_AT_END); [EOL]     assertWarning("a,b,opt_d,c", "1, 2", OPTIONAL_ARG_AT_END); [EOL] } <line_num>: 110,115
public void testFunctionsWithJsDoc1() { [EOL]     testSame("/** @param {*=} c */ function foo(a,b,c) {} foo(1,2);"); [EOL] } <line_num>: 117,119
public void testFunctionsWithJsDoc2() { [EOL]     testSame("/** @param {*=} c */ function foo(a,b,c) {} foo(1,2,3);"); [EOL] } <line_num>: 121,123
public void testFunctionsWithJsDoc3() { [EOL]     testSame("/** @param {*=} c \n * @param {*=} b */ " + "function foo(a,b,c) {} foo(1);"); [EOL] } <line_num>: 125,128
public void testFunctionsWithJsDoc4() { [EOL]     testSame("/** @param {...*} a */ var foo = function(a) {}; foo();"); [EOL] } <line_num>: 130,132
public void testFunctionsWithJsDoc5() { [EOL]     testSame("/** @param {...*} a */ var foo = function(a) {}; foo(1,2);"); [EOL] } <line_num>: 134,136
public void testFunctionsWithJsDoc6() { [EOL]     testSame("/** @param {...*} b */ var foo = function(a, b) {}; foo();", WRONG_ARGUMENT_COUNT); [EOL] } <line_num>: 138,141
public void testFunctionsWithJsDoc7() { [EOL]     String fooDfn = "/** @param {*} [b] */ var foo = function(b) {};"; [EOL]     testSame(fooDfn + "foo();"); [EOL]     testSame(fooDfn + "foo(1);"); [EOL]     testSame(fooDfn + "foo(1, 2);", WRONG_ARGUMENT_COUNT); [EOL] } <line_num>: 143,148
public void testFunctionWithDefaultCodingConvention() { [EOL]     convention = CodingConventions.getDefault(); [EOL]     testSame("var foo = function(x) {}; foo(1, 2);"); [EOL]     testSame("var foo = function(opt_x) {}; foo(1, 2);"); [EOL]     testSame("var foo = function(var_args) {}; foo(1, 2);"); [EOL] } <line_num>: 150,155
public void testMethodCalls() { [EOL]     final String METHOD_DEFS = "/** @constructor */\n" + "function Foo() {}" + "function twoArg(arg1, arg2) {};" + "Foo.prototype.prototypeMethod = twoArg;" + "Foo.staticMethod = twoArg;" + "/**\n * @constructor\n * @return {Bar}\n */\n" + "function Bar() {}"; [EOL]     testSame(METHOD_DEFS + "var f = new Foo();f.prototypeMethod(1, 2, 3);", TypeCheck.WRONG_ARGUMENT_COUNT); [EOL]     testSame(METHOD_DEFS + "var f = new Foo();f.prototypeMethod(1);", TypeCheck.WRONG_ARGUMENT_COUNT); [EOL]     testSame(METHOD_DEFS + "Foo.staticMethod(1, 2, 3);", TypeCheck.WRONG_ARGUMENT_COUNT); [EOL]     testSame(METHOD_DEFS + "Foo.staticMethod(1);", TypeCheck.WRONG_ARGUMENT_COUNT); [EOL]     testSame(METHOD_DEFS + "Bar();", TypeCheck.CONSTRUCTOR_NOT_CALLABLE); [EOL]     testSame(METHOD_DEFS, "Foo();", TypeCheck.CONSTRUCTOR_NOT_CALLABLE); [EOL]     testSame(METHOD_DEFS, "Bar();", null); [EOL] } <line_num>: 157,195
public void assertOk(String params, String arguments) { [EOL]     assertWarning(params, arguments, null); [EOL] } <line_num>: 197,199
public void assertWarning(String params, String arguments, DiagnosticType type) { [EOL]     testSame("function foo(" + params + ") {} foo(" + arguments + ");", type); [EOL] } <line_num>: 201,205
