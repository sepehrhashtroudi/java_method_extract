@Override [EOL] protected CompilerPass getProcessor(final Compiler compiler) { [EOL]     lastPass = new ReplaceIdGenerators(compiler, new ImmutableSet.Builder<String>().add("goog.events.getUniqueId").add("goog.place.getUniqueId").build(), generatePseudoNames, previousMappings); [EOL]     return lastPass; [EOL] } <line_num>: 32,43
@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     generatePseudoNames = false; [EOL]     previousMappings = null; [EOL] } <line_num>: 45,50
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 52,55
public void testBackwardCompat() { [EOL]     test("foo.bar = goog.events.getUniqueId('foo_bar')", "foo.bar = 'a'", "foo.bar = 'foo_bar$0'"); [EOL] } <line_num>: 57,61
public void testSerialization1() { [EOL]     testMap("var x = goog.events.getUniqueId('xxx');\n" + "var y = goog.events.getUniqueId('yyy');\n", "var x = 'a';\n" + "var y = 'b';\n", "[goog.events.getUniqueId]\n" + "\n" + "a:testcode:1:32\n" + "b:testcode:2:32\n" + "\n"); [EOL] } <line_num>: 63,75
public void testSerialization2() { [EOL]     testMap("/** @consistentIdGenerator */ id = function() {};" + "f1 = id('f1');" + "f1 = id('f1')", "id = function() {};" + "f1 = 'a';" + "f1 = 'a'", "[id]\n" + "\n" + "a:f1\n" + "\n"); [EOL] } <line_num>: 77,90
public void testReusePreviousSerialization1() { [EOL]     previousMappings = "[goog.events.getUniqueId]\n" + "\n" + "previous1:testcode:1:32\n" + "previous2:testcode:2:32\n" + "\n" + "[goog.place.getUniqueId]\n" + "\n" + "\n"; [EOL]     testMap("var x = goog.events.getUniqueId('xxx');\n" + "var y = goog.events.getUniqueId('yyy');\n", "var x = 'previous1';\n" + "var y = 'previous2';\n", "[goog.events.getUniqueId]\n" + "\n" + "previous1:testcode:1:32\n" + "previous2:testcode:2:32\n" + "\n"); [EOL] } <line_num>: 92,113
public void testReusePreviousSerialization2() { [EOL]     previousMappings = "[goog.events.getUniqueId]\n" + "\n" + "a:testcode:1:32\n" + "b:testcode:2:32\n" + "\n" + "[goog.place.getUniqueId]\n" + "\n" + "\n"; [EOL]     testMap("var x = goog.events.getUniqueId('xxx');\n" + "\n" + "var y = goog.events.getUniqueId('yyy');\n", "var x = 'a';\n" + "var y = 'c';\n", "[goog.events.getUniqueId]\n" + "\n" + "a:testcode:1:32\n" + "c:testcode:3:32\n" + "\n"); [EOL] } <line_num>: 115,138
public void testReusePreviousSerializationConsistent1() { [EOL]     previousMappings = "[id]\n" + "\n" + "a:f1\n" + "\n"; [EOL]     testMap("/** @consistentIdGenerator */ id = function() {};" + "f1 = id('f1');" + "f1 = id('f1')", "id = function() {};" + "f1 = 'a';" + "f1 = 'a'", "[id]\n" + "\n" + "a:f1\n" + "\n"); [EOL] } <line_num>: 140,159
public void testSimple() { [EOL]     test("/** @idGenerator */ foo.getUniqueId = function() {};" + "foo.bar = foo.getUniqueId('foo_bar')", "foo.getUniqueId = function() {};" + "foo.bar = 'a'", "foo.getUniqueId = function() {};" + "foo.bar = 'foo_bar$0'"); [EOL]     test("/** @idGenerator */ goog.events.getUniqueId = function() {};" + "foo1 = goog.events.getUniqueId('foo1');" + "foo1 = goog.events.getUniqueId('foo1');", "goog.events.getUniqueId = function() {};" + "foo1 = 'a';" + "foo1 = 'b';", "goog.events.getUniqueId = function() {};" + "foo1 = 'foo1$0';" + "foo1 = 'foo1$1';"); [EOL] } <line_num>: 161,182
public void testSimpleConsistent() { [EOL]     test("/** @consistentIdGenerator */ id = function() {};" + "foo.bar = id('foo_bar')", "id = function() {};" + "foo.bar = 'a'", "id = function() {};" + "foo.bar = 'foo_bar$0'"); [EOL]     test("/** @consistentIdGenerator */ id = function() {};" + "f1 = id('f1');" + "f1 = id('f1')", "id = function() {};" + "f1 = 'a';" + "f1 = 'a'", "id = function() {};" + "f1 = 'f1$0';" + "f1 = 'f1$0'"); [EOL]     test("/** @consistentIdGenerator */ id = function() {};" + "f1 = id('f1');" + "f1 = id('f1');" + "f1 = id('f1')", "id = function() {};" + "f1 = 'a';" + "f1 = 'a';" + "f1 = 'a'", "id = function() {};" + "f1 = 'f1$0';" + "f1 = 'f1$0';" + "f1 = 'f1$0'"); [EOL] } <line_num>: 184,220
public void testSimpleStable() { [EOL]     testNonPseudoSupportingGenerator("/** @stableIdGenerator */ id = function() {};" + "foo.bar = id('foo_bar')", "id = function() {};" + "foo.bar = '125lGg'"); [EOL]     testNonPseudoSupportingGenerator("/** @stableIdGenerator */ id = function() {};" + "f1 = id('f1');" + "f1 = id('f1')", "id = function() {};" + "f1 = 'AAAMiw';" + "f1 = 'AAAMiw'"); [EOL] } <line_num>: 222,238
public void testVar() { [EOL]     test("/** @consistentIdGenerator */ var id = function() {};" + "foo.bar = id('foo_bar')", "var id = function() {};" + "foo.bar = 'a'", "var id = function() {};" + "foo.bar = 'foo_bar$0'"); [EOL]     testNonPseudoSupportingGenerator("/** @stableIdGenerator */ var id = function() {};" + "foo.bar = id('foo_bar')", "var id = function() {};" + "foo.bar = '125lGg'"); [EOL] } <line_num>: 240,256
public void testObjLit() { [EOL]     test("/** @consistentIdGenerator */ get.id = function() {};" + "foo.bar = {a: get.id('foo_bar')}", "get.id = function() {};" + "foo.bar = {a: 'a'}", "get.id = function() {};" + "foo.bar = {a: 'foo_bar$0'}"); [EOL]     testNonPseudoSupportingGenerator("/** @stableIdGenerator */ get.id = function() {};" + "foo.bar = {a: get.id('foo_bar')}", "get.id = function() {};" + "foo.bar = {a: '125lGg'}"); [EOL] } <line_num>: 258,274
public void testTwoGenerators() { [EOL]     test("/** @idGenerator */ var id1 = function() {};" + "/** @idGenerator */ var id2 = function() {};" + "f1 = id1('1');" + "f2 = id1('1');" + "f3 = id2('1');" + "f4 = id2('1');", "var id1 = function() {};" + "var id2 = function() {};" + "f1 = 'a';" + "f2 = 'b';" + "f3 = 'a';" + "f4 = 'b';", "var id1 = function() {};" + "var id2 = function() {};" + "f1 = '1$0';" + "f2 = '1$1';" + "f3 = '1$0';" + "f4 = '1$1';"); [EOL] } <line_num>: 276,297
public void testMixedGenerators() { [EOL]     test("/** @idGenerator */ var id1 = function() {};" + "/** @consistentIdGenerator */ var id2 = function() {};" + "/** @stableIdGenerator */ var id3 = function() {};" + "f1 = id1('1');" + "f2 = id1('1');" + "f3 = id2('1');" + "f4 = id2('1');" + "f5 = id3('1');" + "f6 = id3('1');", "var id1 = function() {};" + "var id2 = function() {};" + "var id3 = function() {};" + "f1 = 'a';" + "f2 = 'b';" + "f3 = 'a';" + "f4 = 'a';" + "f5 = 'AAAAMQ';" + "f6 = 'AAAAMQ';", "var id1 = function() {};" + "var id2 = function() {};" + "var id3 = function() {};" + "f1 = '1$0';" + "f2 = '1$1';" + "f3 = '1$0';" + "f4 = '1$0';" + "f5 = 'AAAAMQ';" + "f6 = 'AAAAMQ';"); [EOL] } <line_num>: 299,329
public void testLocalCall() { [EOL]     testSame(new String[] { "/** @idGenerator */ var id = function() {}; " + "function Foo() { id('foo'); }" }, ReplaceIdGenerators.NON_GLOBAL_ID_GENERATOR_CALL); [EOL] } <line_num>: 331,335
public void testConditionalCall() { [EOL]     testSame(new String[] { "/** @idGenerator */ var id = function() {}; " + "if(x) id('foo');" }, ReplaceIdGenerators.CONDITIONAL_ID_GENERATOR_CALL); [EOL]     test("/** @consistentIdGenerator */ var id = function() {};" + "function fb() {foo.bar = id('foo_bar')}", "var id = function() {};" + "function fb() {foo.bar = 'a'}", "var id = function() {};" + "function fb() {foo.bar = 'foo_bar$0'}"); [EOL]     testNonPseudoSupportingGenerator("/** @stableIdGenerator */ var id = function() {};" + "function fb() {foo.bar = id('foo_bar')}", "var id = function() {};" + "function fb() {foo.bar = '125lGg'}"); [EOL] } <line_num>: 337,357
public void testConflictingIdGenerator() { [EOL]     testSame(new String[] { "/** @idGenerator \n @consistentIdGenerator \n*/" + "var id = function() {}; " }, ReplaceIdGenerators.CONFLICTING_GENERATOR_TYPE); [EOL]     testSame(new String[] { "/** @stableIdGenerator \n @idGenerator \n*/" + "var id = function() {}; " }, ReplaceIdGenerators.CONFLICTING_GENERATOR_TYPE); [EOL]     testSame(new String[] { "/** @stableIdGenerator \n @consistentIdGenerator \n*/" + "var id = function() {}; " }, ReplaceIdGenerators.CONFLICTING_GENERATOR_TYPE); [EOL]     test("/** @consistentIdGenerator */ var id = function() {};" + "if (x) {foo.bar = id('foo_bar')}", "var id = function() {};" + "if (x) {foo.bar = 'a'}", "var id = function() {};" + "if (x) {foo.bar = 'foo_bar$0'}"); [EOL] } <line_num>: 359,380
private void testMap(String code, String expected, String expectedMap) { [EOL]     test(code, expected); [EOL]     assertEquals(expectedMap, lastPass.getSerializedIdMappings()); [EOL] } <line_num>: 382,385
private void test(String code, String expected, String expectedPseudo) { [EOL]     generatePseudoNames = false; [EOL]     test(code, expected); [EOL]     generatePseudoNames = true; [EOL]     test(code, expectedPseudo); [EOL] } <line_num>: 387,392
private void testNonPseudoSupportingGenerator(String code, String expected) { [EOL]     generatePseudoNames = false; [EOL]     test(code, expected); [EOL]     generatePseudoNames = true; [EOL]     test(code, expected); [EOL] } <line_num>: 394,399
