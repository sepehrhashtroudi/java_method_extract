public RemoveUnusedClassPropertiesTest() { [EOL]     super(EXTERNS); [EOL] } <line_num>: 30,32
@Override [EOL] protected CompilerPass getProcessor(Compiler compiler) { [EOL]     return new RemoveUnusedClassProperties(compiler); [EOL] } <line_num>: 34,37
public void testSimple1() { [EOL]     test("this.a = 2", "2"); [EOL]     test("x = (this.a = 2)", "x = 2"); [EOL]     testSame("this.a = 2; x = this.a;"); [EOL] } <line_num>: 39,44
public void testSimple2() { [EOL]     test("this.a = 2, f()", "2, f()"); [EOL]     test("x = (this.a = 2, f())", "x = (2, f())"); [EOL]     test("x = (f(), this.a = 2)", "x = (f(), 2)"); [EOL] } <line_num>: 46,52
public void testSimple3() { [EOL]     testSame("y.a = 2"); [EOL]     test("y.a = 2; this.a = 2", "y.a = 2; 2"); [EOL]     testSame("y.a = 2; this.a = 1; alert(x.a)"); [EOL] } <line_num>: 54,61
public void testObjLit() { [EOL]     testSame("({a:2})"); [EOL]     test("({a:0}); this.a = 1;", "({a:0});1"); [EOL]     testSame("x = ({a:0}); this.a = 1; alert(x.a)"); [EOL] } <line_num>: 63,70
public void testExtern() { [EOL]     testSame("this.ext = 2"); [EOL] } <line_num>: 72,75
public void testExport() { [EOL]     testSame("this.ext = 2; window['export'] = this.ext;"); [EOL]     testSame("function f() { this.ext = 2; } window['export'] = this.ext;"); [EOL] } <line_num>: 77,81
public void testAssignOp1() { [EOL]     test("this.x += 2", "2"); [EOL]     testSame("x = (this.x += 2)"); [EOL]     testSame("this.x += 2; x = this.x;"); [EOL]     testSame("this.x += 2; x.x;"); [EOL] } <line_num>: 84,92
public void testAssignOp2() { [EOL]     test("this.a += 2, f()", "2, f()"); [EOL]     test("x = (this.a += 2, f())", "x = (2, f())"); [EOL]     testSame("x = (f(), this.a += 2)"); [EOL] } <line_num>: 94,100
public void testInc1() { [EOL]     test("this.x++", "0"); [EOL]     testSame("x = (this.x++)"); [EOL]     testSame("this.x++; x = this.x;"); [EOL]     test("--this.x", "0"); [EOL]     testSame("x = (--this.x)"); [EOL]     testSame("--this.x; x = this.x;"); [EOL] } <line_num>: 102,112
public void testInc2() { [EOL]     test("this.a++, f()", "0, f()"); [EOL]     test("x = (this.a++, f())", "x = (0, f())"); [EOL]     testSame("x = (f(), this.a++)"); [EOL]     test("--this.a, f()", "0, f()"); [EOL]     test("x = (--this.a, f())", "x = (0, f())"); [EOL]     testSame("x = (f(), --this.a)"); [EOL] } <line_num>: 114,124
public void testJSCompiler_renameProperty() { [EOL]     testSame("this.a = 2; x[JSCompiler_renameProperty('a')]"); [EOL]     testSame("this.a = 2; JSCompiler_renameProperty('a')"); [EOL] } <line_num>: 126,130
public void testForIn() { [EOL]     test("this.y = 1;for (var a in x) { alert(x[a]) }", "1;for (var a in x) { alert(x[a]) }"); [EOL] } <line_num>: 132,137
public void testObjectKeys() { [EOL]     test("this.y = 1;alert(Object.keys(this))", "1;alert(Object.keys(this))"); [EOL] } <line_num>: 139,144
public void testIssue730() { [EOL]     test("function A() {this.foo = 0;}\n" + "function B() {this.a = new A();}\n" + "B.prototype.dostuff = function() {this.a.foo++;alert('hi');}\n" + "new B().dostuff();\n", "function A(){0}" + "function B(){this.a=new A}" + "B.prototype.dostuff=function(){this.a.foo++;alert(\"hi\")};" + "new B().dostuff();"); [EOL] } <line_num>: 146,159
