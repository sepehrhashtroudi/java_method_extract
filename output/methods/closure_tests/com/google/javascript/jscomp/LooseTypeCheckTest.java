private TypeCheckResult(Node root, Scope scope) { [EOL]     this.root = root; [EOL]     this.scope = scope; [EOL] } <line_num>: 7070,7073
@Override [EOL] public CompilerOptions getOptions() { [EOL]     CompilerOptions options = super.getOptions(); [EOL]     options.looseTypes = true; [EOL]     return options; [EOL] } <line_num>: 49,54
public void testInitialTypingScope() { [EOL]     Scope s = new TypedScopeCreator(compiler, CodingConventions.getDefault()).createInitialScope(new Node(Token.BLOCK)); [EOL]     assertTypeEquals(ARRAY_FUNCTION_TYPE, s.getVar("Array").getType()); [EOL]     assertTypeEquals(BOOLEAN_OBJECT_FUNCTION_TYPE, s.getVar("Boolean").getType()); [EOL]     assertTypeEquals(DATE_FUNCTION_TYPE, s.getVar("Date").getType()); [EOL]     assertTypeEquals(ERROR_FUNCTION_TYPE, s.getVar("Error").getType()); [EOL]     assertTypeEquals(EVAL_ERROR_FUNCTION_TYPE, s.getVar("EvalError").getType()); [EOL]     assertTypeEquals(NUMBER_OBJECT_FUNCTION_TYPE, s.getVar("Number").getType()); [EOL]     assertTypeEquals(OBJECT_FUNCTION_TYPE, s.getVar("Object").getType()); [EOL]     assertTypeEquals(RANGE_ERROR_FUNCTION_TYPE, s.getVar("RangeError").getType()); [EOL]     assertTypeEquals(REFERENCE_ERROR_FUNCTION_TYPE, s.getVar("ReferenceError").getType()); [EOL]     assertTypeEquals(REGEXP_FUNCTION_TYPE, s.getVar("RegExp").getType()); [EOL]     assertTypeEquals(STRING_OBJECT_FUNCTION_TYPE, s.getVar("String").getType()); [EOL]     assertTypeEquals(SYNTAX_ERROR_FUNCTION_TYPE, s.getVar("SyntaxError").getType()); [EOL]     assertTypeEquals(TYPE_ERROR_FUNCTION_TYPE, s.getVar("TypeError").getType()); [EOL]     assertTypeEquals(URI_ERROR_FUNCTION_TYPE, s.getVar("URIError").getType()); [EOL] } <line_num>: 56,84
public void testTypeCheck1() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){ if (foo()) return; }"); [EOL] } <line_num>: 86,88
public void testTypeCheck2() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){ var x=foo(); x--; }", "increment/decrement\n" + "found   : undefined\n" + "required: number"); [EOL] } <line_num>: 90,95
public void testTypeCheck4() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){ !foo(); }"); [EOL] } <line_num>: 97,99
public void testTypeCheck5() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){ var a = +foo(); }", "sign operator\n" + "found   : undefined\n" + "required: number"); [EOL] } <line_num>: 101,106
public void testTypeCheck6() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){" + "/** @type {undefined|number} */var a;if (a == foo())return;}"); [EOL] } <line_num>: 108,112
public void testTypeCheck8() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){do {} while (foo());}"); [EOL] } <line_num>: 114,116
public void testTypeCheck9() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){while (foo());}"); [EOL] } <line_num>: 118,120
public void testTypeCheck10() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){for (;foo(););}"); [EOL] } <line_num>: 122,124
public void testTypeCheck11() throws Exception { [EOL]     testTypes("/**@type !Number */var a;" + "/**@type !String */var b;" + "a = b;", "assignment\n" + "found   : String\n" + "required: Number"); [EOL] } <line_num>: 126,133
public void testTypeCheck12() throws Exception { [EOL]     testTypes("/**@return {!Object}*/function foo(){var a = 3^foo();}", "bad right operand to bitwise operator\n" + "found   : Object\n" + "required: (boolean|null|number|string|undefined)"); [EOL] } <line_num>: 135,140
public void testTypeCheck13() throws Exception { [EOL]     testTypes("/**@type {!Number|!String}*/var i; i=/xx/;", "assignment\n" + "found   : RegExp\n" + "required: (Number|String)"); [EOL] } <line_num>: 142,147
public void testTypeCheck14() throws Exception { [EOL]     testTypes("/**@param opt_a*/function foo(opt_a){}"); [EOL] } <line_num>: 149,151
public void testTypeCheck15() throws Exception { [EOL]     testTypes("/**@type {Number} */var x;x=null;x=10;", "assignment\n" + "found   : number\n" + "required: (Number|null|undefined)"); [EOL] } <line_num>: 154,159
public void testTypeCheck16a() throws Exception { [EOL]     testTypes("/**@type {Number|null} */var x='';", "initializing variable\n" + "found   : string\n" + "required: (Number|null|undefined)"); [EOL] } <line_num>: 161,166
public void testTypeCheck16b() throws Exception { [EOL]     testTypes("/**@type {!Number|null} */var x='';", "initializing variable\n" + "found   : string\n" + "required: (Number|null)"); [EOL] } <line_num>: 168,173
public void testTypeCheck17() throws Exception { [EOL]     testTypes("/**@return {Number}\n@param {Number} opt_foo */\n" + "function a(opt_foo){\nreturn /**@type {Number}*/(opt_foo);\n}"); [EOL] } <line_num>: 175,178
public void testTypeCheck18() throws Exception { [EOL]     testTypes("/**@return {RegExp}\n*/\n function a(){return new RegExp();}"); [EOL] } <line_num>: 181,183
public void testTypeCheck19() throws Exception { [EOL]     testTypes("/**@return {Array}\n*/\n function a(){return new Array();}"); [EOL] } <line_num>: 185,187
public void testTypeCheck20() throws Exception { [EOL]     testTypes("/**@return {Date}\n*/\n function a(){return new Date();}"); [EOL] } <line_num>: 189,191
public void testTypeCheckBasicDowncast() throws Exception { [EOL]     testTypes("/** @constructor */function foo() {}\n" + "/** @type {Object} */ var bar = new foo();\n"); [EOL] } <line_num>: 193,196
public void testTypeCheckNoDowncastToNumber() throws Exception { [EOL]     testTypes("/** @constructor */function foo() {}\n" + "/** @type {!Number} */ var bar = new foo();\n", "initializing variable\n" + "found   : foo\n" + "required: Number"); [EOL] } <line_num>: 198,204
public void testTypeCheck21() throws Exception { [EOL]     testTypes("/** @type Array.<String> */var foo;"); [EOL] } <line_num>: 206,208
public void testTypeCheck22() throws Exception { [EOL]     testTypes("/** @param {Element|Object} p */\nfunction foo(p){}\n" + "/** @constructor */function Element(){}\n" + "/** @type {Element|Object} */var v;\n" + "foo(v);\n"); [EOL] } <line_num>: 210,215
public void testTypeCheck23() throws Exception { [EOL]     testTypes("/** @type {(Object,Null)} */var foo; foo = null;"); [EOL] } <line_num>: 217,219
public void testTypeCheck24() throws Exception { [EOL]     testTypes("/** @constructor */function MyType(){}\n" + "/** @type {(MyType,Null)} */var foo; foo = null;"); [EOL] } <line_num>: 221,224
public void testTypeCheckDefaultExterns() throws Exception { [EOL]     testTypes("/** @param {string} x */ function f(x) {}" + "f([].length);", "actual parameter 1 of f does not match formal parameter\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 226,232
public void testTypeCheckCustomExterns() throws Exception { [EOL]     testTypes(DEFAULT_EXTERNS + "/** @type {boolean} */ Array.prototype.oogabooga;", "/** @param {string} x */ function f(x) {}" + "f([].oogabooga);", "actual parameter 1 of f does not match formal parameter\n" + "found   : boolean\n" + "required: string", false); [EOL] } <line_num>: 234,242
public void testParameterizedArray1() throws Exception { [EOL]     testTypes("/** @param {!Array.<number>} a\n" + "* @return {string}\n" + "*/ var f = function(a) { return a[0]; };", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 244,251
public void testParameterizedArray2() throws Exception { [EOL]     testTypes("/** @param {!Array.<!Array.<number>>} a\n" + "* @return {number}\n" + "*/ var f = function(a) { return a[0]; };", "inconsistent return type\n" + "found   : Array.<number>\n" + "required: number"); [EOL] } <line_num>: 253,260
public void testParameterizedArray3() throws Exception { [EOL]     testTypes("/** @param {!Array.<number>} a\n" + "* @return {number}\n" + "*/ var f = function(a) { a[1] = 0; return a[0]; };"); [EOL] } <line_num>: 262,266
public void testParameterizedArray4() throws Exception { [EOL]     testTypes("/** @param {!Array.<number>} a\n" + "*/ var f = function(a) { a[0] = 'a'; };", "assignment\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 268,274
public void testParameterizedArray5() throws Exception { [EOL]     testTypes("/** @param {!Array.<*>} a\n" + "*/ var f = function(a) { a[0] = 'a'; };"); [EOL] } <line_num>: 276,279
public void testParameterizedArray6() throws Exception { [EOL]     testTypes("/** @param {!Array.<*>} a\n" + "* @return {string}\n" + "*/ var f = function(a) { return a[0]; };", "inconsistent return type\n" + "found   : *\n" + "required: string"); [EOL] } <line_num>: 281,288
public void testParameterizedArray7() throws Exception { [EOL]     testTypes("/** @param {?Array.<number>} a\n" + "* @return {string}\n" + "*/ var f = function(a) { return a[0]; };", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 290,297
public void testParameterizedObject1() throws Exception { [EOL]     testTypes("/** @param {!Object.<number>} a\n" + "* @return {string}\n" + "*/ var f = function(a) { return a[0]; };", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 299,306
public void testParameterizedObject2() throws Exception { [EOL]     testTypes("/** @param {!Object.<string,number>} a\n" + "* @return {string}\n" + "*/ var f = function(a) { return a['x']; };", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 308,315
public void testParameterizedObject3() throws Exception { [EOL]     testTypes("/** @param {!Object.<number,string>} a\n" + "* @return {string}\n" + "*/ var f = function(a) { return a['x']; };", "restricted index type\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 317,324
public void testParameterizedObject4() throws Exception { [EOL]     testTypes("/** @enum {string} */ var E = {A: 'a', B: 'b'};\n" + "/** @param {!Object.<E,string>} a\n" + "* @return {string}\n" + "*/ var f = function(a) { return a['x']; };", "restricted index type\n" + "found   : string\n" + "required: E.<string>"); [EOL] } <line_num>: 326,334
public void testUnionOfFunctionAndType() throws Exception { [EOL]     testTypes("/** @type {null|(function(Number):void)} */ var a;" + "/** @type {(function(Number):void)|null} */ var b = null; a = b;"); [EOL] } <line_num>: 336,339
public void testOptionalParameterComparedToUndefined() throws Exception { [EOL]     testTypes("/**@param opt_a {Number}*/function foo(opt_a)" + "{if (opt_a==undefined) var b = 3;}"); [EOL] } <line_num>: 341,344
public void testOptionalAllType() throws Exception { [EOL]     testTypes("/** @param {*} opt_x */function f(opt_x) { return opt_x }\n" + "/** @type {*} */var y;\n" + "f(y);"); [EOL] } <line_num>: 346,350
public void testOptionalUnknownNamedType() throws Exception { [EOL]     testTypes("/** @param {!T} opt_x\n@return {undefined} */\n" + "function f(opt_x) { return opt_x; }\n" + "/** @constructor */var T = function() {};", "inconsistent return type\n" + "found   : (T|undefined)\n" + "required: undefined"); [EOL] } <line_num>: 352,359
public void testOptionalArgFunctionParam() throws Exception { [EOL]     testTypes("/** @param {function(number=)} a */" + "function f(a) {a()};"); [EOL] } <line_num>: 361,364
public void testOptionalArgFunctionParam2() throws Exception { [EOL]     testTypes("/** @param {function(number=)} a */" + "function f(a) {a(3)};"); [EOL] } <line_num>: 366,369
public void testOptionalArgFunctionParam3() throws Exception { [EOL]     testTypes("/** @param {function(number=)} a */" + "function f(a) {a(undefined)};"); [EOL] } <line_num>: 371,374
public void testOptionalArgFunctionParam4() throws Exception { [EOL]     String expectedWarning = "Function a: called with 2 argument(s). " + "Function requires at least 0 argument(s) and no more than 1 " + "argument(s)."; [EOL]     testTypes("/** @param {function(number=)} a */function f(a) {a(3,4)};", expectedWarning, false); [EOL] } <line_num>: 376,383
public void testOptionalArgFunctionParamError() throws Exception { [EOL]     String expectedWarning = "Bad type annotation. variable length argument must be last"; [EOL]     testTypes("/** @param {function(...[number], number=)} a */" + "function f(a) {};", expectedWarning, false); [EOL] } <line_num>: 385,390
public void testOptionalNullableArgFunctionParam() throws Exception { [EOL]     testTypes("/** @param {function(?number=)} a */" + "function f(a) {a()};"); [EOL] } <line_num>: 392,395
public void testOptionalNullableArgFunctionParam2() throws Exception { [EOL]     testTypes("/** @param {function(?number=)} a */" + "function f(a) {a(null)};"); [EOL] } <line_num>: 397,400
public void testOptionalNullableArgFunctionParam3() throws Exception { [EOL]     testTypes("/** @param {function(?number=)} a */" + "function f(a) {a(3)};"); [EOL] } <line_num>: 402,405
public void testOptionalArgFunctionReturn() throws Exception { [EOL]     testTypes("/** @return {function(number=)} */" + "function f() { return function(opt_x) { }; };" + "f()()"); [EOL] } <line_num>: 407,411
public void testOptionalArgFunctionReturn2() throws Exception { [EOL]     testTypes("/** @return {function(Object=)} */" + "function f() { return function(opt_x) { }; };" + "f()({})"); [EOL] } <line_num>: 413,417
public void testBooleanType() throws Exception { [EOL]     testTypes("/**@type {boolean} */var x = 1 < 2;"); [EOL] } <line_num>: 419,421
public void testBooleanReduction1() throws Exception { [EOL]     testTypes("/**@type {string} */var x; x = null || \"a\";"); [EOL] } <line_num>: 423,425
public void testBooleanReduction2() throws Exception { [EOL]     testTypes("/** @param {string} s\n @return {string} */" + "(function(s) { return ((s == 'a') && s) || 'b'; })"); [EOL] } <line_num>: 427,432
public void testBooleanReduction3() throws Exception { [EOL]     testTypes("/** @param {string} s\n @return {string?} */" + "(function(s) { return s && null && 3; })"); [EOL] } <line_num>: 434,437
public void testBooleanReduction4() throws Exception { [EOL]     testTypes("/** @param {Object} x\n @return {Object} */" + "(function(x) { return null || x || null ; })"); [EOL] } <line_num>: 439,442
public void testBooleanReduction5() throws Exception { [EOL]     testTypes("/**\n" + "* @param {Array|string} x\n" + "* @return {string?}\n" + "*/\n" + "var f = function(x) {\n" + "if (!x || typeof x == 'string') {\n" + "return x;\n" + "}\n" + "return null;\n" + "};"); [EOL] } <line_num>: 444,455
public void testBooleanReduction6() throws Exception { [EOL]     testTypes("/**\n" + "* @param {Array|string|null} x\n" + "* @return {string?}\n" + "*/\n" + "var f = function(x) {\n" + "if (!(x && typeof x != 'string')) {\n" + "return x;\n" + "}\n" + "return null;\n" + "};"); [EOL] } <line_num>: 457,468
public void testBooleanReduction7() throws Exception { [EOL]     testTypes("/** @constructor */var T = function() {};\n" + "/**\n" + "* @param {Array|T} x\n" + "* @return {null|undefined}\n" + "*/\n" + "var f = function(x) {\n" + "if (!x) {\n" + "return x;\n" + "}\n" + "return null;\n" + "};"); [EOL] } <line_num>: 470,482
public void testNullAnd() throws Exception { [EOL]     testTypes("/** @type null */var x;\n" + "/** @type number */var r = x && x;", "initializing variable\n" + "found   : null\n" + "required: number"); [EOL] } <line_num>: 484,490
public void testNullOr() throws Exception { [EOL]     testTypes("/** @type null */var x;\n" + "/** @type number */var r = x || x;", "initializing variable\n" + "found   : null\n" + "required: number"); [EOL] } <line_num>: 492,498
public void testBooleanPreservation1() throws Exception { [EOL]     testTypes("/**@type {string} */var x = \"a\";" + "x = ((x == \"a\") && x) || x == \"b\";", "assignment\n" + "found   : (boolean|string)\n" + "required: string"); [EOL] } <line_num>: 500,506
public void testBooleanPreservation2() throws Exception { [EOL]     testTypes("/**@type {string} */var x = \"a\"; x = (x == \"a\") || x;", "assignment\n" + "found   : (boolean|string)\n" + "required: string"); [EOL] } <line_num>: 508,513
public void testBooleanPreservation3() throws Exception { [EOL]     testTypes("/** @param {Function?} x\n @return {boolean?} */" + "function f(x) { return x && x == \"a\"; }", "condition always evaluates to false\n" + "left : Function\n" + "right: string"); [EOL] } <line_num>: 515,521
public void testBooleanPreservation4() throws Exception { [EOL]     testTypes("/** @param {Function?|boolean} x\n @return {boolean} */" + "function f(x) { return x && x == \"a\"; }", "inconsistent return type\n" + "found   : (boolean|null|undefined)\n" + "required: boolean"); [EOL] } <line_num>: 523,529
public void testTypeOfReduction1() throws Exception { [EOL]     testTypes("/** @param {string|number} x\n @return {string} */ " + "function f(x) { return typeof x == 'number' ? String(x) : x; }"); [EOL] } <line_num>: 531,534
public void testTypeOfReduction2() throws Exception { [EOL]     testTypes("/** @param {string|number} x\n @return {string} */ " + "function f(x) { return typeof x != 'string' ? String(x) : x; }"); [EOL] } <line_num>: 536,539
public void testTypeOfReduction3() throws Exception { [EOL]     testTypes("/** @param {number|null} x\n @return {number} */ " + "function f(x) { return typeof x == 'object' ? 1 : x; }"); [EOL] } <line_num>: 541,544
public void testTypeOfReduction4() throws Exception { [EOL]     testTypes("/** @param {Object|undefined} x\n @return {Object} */ " + "function f(x) { return typeof x == 'undefined' ? {} : x; }"); [EOL] } <line_num>: 546,549
public void testTypeOfReduction5() throws Exception { [EOL]     testTypes("/** @enum {string} */ var E = {A: 'a', B: 'b'};\n" + "/** @param {!E|number} x\n @return {string} */ " + "function f(x) { return typeof x != 'number' ? x : 'a'; }"); [EOL] } <line_num>: 551,555
public void testTypeOfReduction6() throws Exception { [EOL]     testTypes("/** @param {number|string} x\n@return {string} */\n" + "function f(x) {\n" + "return typeof x == 'string' && x.length == 3 ? x : 'a';\n" + "}"); [EOL] } <line_num>: 557,562
public void testTypeOfReduction7() throws Exception { [EOL]     testTypes("/** @return {string} */var f = function(x) { " + "return typeof x == 'number' ? x : 'a'; }", "inconsistent return type\n" + "found   : (number|string)\n" + "required: string"); [EOL] } <line_num>: 564,570
public void testTypeOfReduction8() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @param {number|string} x\n@return {string} */\n" + "function f(x) {\n" + "return goog.isString(x) && x.length == 3 ? x : 'a';\n" + "}", null); [EOL] } <line_num>: 572,579
public void testTypeOfReduction9() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @param {!Array|string} x\n@return {string} */\n" + "function f(x) {\n" + "return goog.isArray(x) ? 'a' : x;\n" + "}", null); [EOL] } <line_num>: 581,588
public void testTypeOfReduction10() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @param {Array|string} x\n@return {Array} */\n" + "function f(x) {\n" + "return goog.isArray(x) ? x : [];\n" + "}", null); [EOL] } <line_num>: 590,597
public void testTypeOfReduction11() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @param {Array|string} x\n@return {Array} */\n" + "function f(x) {\n" + "return goog.isObject(x) ? x : [];\n" + "}", null); [EOL] } <line_num>: 599,606
public void testTypeOfReduction12() throws Exception { [EOL]     testTypes("/** @enum {string} */ var E = {A: 'a', B: 'b'};\n" + "/** @param {E|Array} x\n @return {Array} */ " + "function f(x) { return typeof x == 'object' ? x : []; }"); [EOL] } <line_num>: 608,612
public void testTypeOfReduction13() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @enum {string} */ var E = {A: 'a', B: 'b'};\n" + "/** @param {E|Array} x\n@return {Array} */ " + "function f(x) { return goog.isObject(x) ? x : []; }", null); [EOL] } <line_num>: 614,620
public void testTypeOfReduction14() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "function f(x) { " + "  return goog.isString(arguments[0]) ? arguments[0] : 0;" + "}", null); [EOL] } <line_num>: 622,629
public void testTypeOfReduction15() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "function f(x) { " + "  return typeof arguments[0] == 'string' ? arguments[0] : 0;" + "}", null); [EOL] } <line_num>: 631,638
public void testQualifiedNameReduction1() throws Exception { [EOL]     testTypes("var x = {}; /** @type {string?} */ x.a = 'a';\n" + "/** @return {string} */ var f = function() {\n" + "return x.a ? x.a : 'a'; }"); [EOL] } <line_num>: 640,644
public void testQualifiedNameReduction2() throws Exception { [EOL]     testTypes("/** @param {string?} a\n@constructor */ var T = " + "function(a) {this.a = a};\n" + "/** @return {string} */ T.prototype.f = function() {\n" + "return this.a ? this.a : 'a'; }"); [EOL] } <line_num>: 646,651
public void testQualifiedNameReduction3() throws Exception { [EOL]     testTypes("/** @param {string|Array} a\n@constructor */ var T = " + "function(a) {this.a = a};\n" + "/** @return {string} */ T.prototype.f = function() {\n" + "return typeof this.a == 'string' ? this.a : 'a'; }"); [EOL] } <line_num>: 653,658
public void testQualifiedNameReduction4() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @param {string|Array} a\n@constructor */ var T = " + "function(a) {this.a = a};\n" + "/** @return {string} */ T.prototype.f = function() {\n" + "return goog.isString(this.a) ? this.a : 'a'; }", null); [EOL] } <line_num>: 660,667
public void testInstanceOfReduction1() throws Exception { [EOL]     testTypes("/** @constructor */ var T = function() {};\n" + "/** @param {T|string} x\n@return {T} */\n" + "var f = function(x) {\n" + "if (x instanceof T) { return x; } else { return new T(); }\n" + "};"); [EOL] } <line_num>: 669,675
public void testInstanceOfReduction2() throws Exception { [EOL]     testTypes("/** @constructor */ var T = function() {};\n" + "/** @param {!T|string} x\n@return {string} */\n" + "var f = function(x) {\n" + "if (x instanceof T) { return ''; } else { return x; }\n" + "};"); [EOL] } <line_num>: 677,683
public void testPropertyInferredPropagation() throws Exception { [EOL]     testTypes("/** @return {Object} */function f() { return {}; }\n" + "function g() { var x = f(); if (x.p) x.a = 'a'; else x.a = 'b'; }\n" + "function h() { var x = f(); x.a = false; }"); [EOL] } <line_num>: 685,689
public void testPropertyInference1() throws Exception { [EOL]     testTypes("/** @constructor */ function F() { this.x_ = true; }" + "/** @return {string} */" + "F.prototype.bar = function() { if (this.x_) return this.x_; };", "inconsistent return type\n" + "found   : boolean\n" + "required: string"); [EOL] } <line_num>: 691,699
public void testPropertyInference2() throws Exception { [EOL]     testTypes("/** @constructor */ function F() { this.x_ = true; }" + "F.prototype.baz = function() { this.x_ = null; };" + "/** @return {string} */" + "F.prototype.bar = function() { if (this.x_) return this.x_; };", "inconsistent return type\n" + "found   : boolean\n" + "required: string"); [EOL] } <line_num>: 701,710
public void testPropertyInference3() throws Exception { [EOL]     testTypes("/** @constructor */ function F() { this.x_ = true; }" + "F.prototype.baz = function() { this.x_ = 3; };" + "/** @return {string} */" + "F.prototype.bar = function() { if (this.x_) return this.x_; };", "inconsistent return type\n" + "found   : (boolean|number)\n" + "required: string"); [EOL] } <line_num>: 712,721
public void testPropertyInference4() throws Exception { [EOL]     testTypes("/** @constructor */ function F() { }" + "F.prototype.x_ = 3;" + "/** @return {string} */" + "F.prototype.bar = function() { if (this.x_) return this.x_; };", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 723,732
public void testPropertyInference5() throws Exception { [EOL]     testTypes("/** @constructor */ function F() { }" + "F.prototype.baz = function() { this.x_ = 3; };" + "/** @return {string} */" + "F.prototype.bar = function() { if (this.x_) return this.x_; };"); [EOL] } <line_num>: 734,740
public void testPropertyInference6() throws Exception { [EOL]     testTypes("/** @constructor */ function F() { }" + "(new F).x_ = 3;" + "/** @return {string} */" + "F.prototype.bar = function() { return this.x_; };"); [EOL] } <line_num>: 742,748
public void testPropertyInference7() throws Exception { [EOL]     testTypes("/** @constructor */ function F() { this.x_ = true; }" + "(new F).x_ = 3;" + "/** @return {string} */" + "F.prototype.bar = function() { return this.x_; };", "inconsistent return type\n" + "found   : boolean\n" + "required: string"); [EOL] } <line_num>: 750,759
public void testPropertyInference8() throws Exception { [EOL]     testTypes("/** @constructor */ function F() { " + "  /** @type {string} */ this.x_ = 'x';" + "}" + "(new F).x_ = 3;" + "/** @return {string} */" + "F.prototype.bar = function() { return this.x_; };", "assignment to property x_ of F\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 761,772
public void testNoPersistentTypeInferenceForObjectProperties() throws Exception { [EOL]     testTypes("/** @param {Object} o\n@param {string} x */\n" + "function s1(o,x) { o.x = x; }\n" + "/** @param {Object} o\n@return {string} */\n" + "function g1(o) { return typeof o.x == 'undefined' ? '' : o.x; }\n" + "/** @param {Object} o\n@param {number} x */\n" + "function s2(o,x) { o.x = x; }\n" + "/** @param {Object} o\n@return {number} */\n" + "function g2(o) { return typeof o.x == 'undefined' ? 0 : o.x; }"); [EOL] } <line_num>: 774,784
public void testNoPersistentTypeInferenceForFunctionProperties() throws Exception { [EOL]     testTypes("/** @param {Function} o\n@param {string} x */\n" + "function s1(o,x) { o.x = x; }\n" + "/** @param {Function} o\n@return {string} */\n" + "function g1(o) { return typeof o.x == 'undefined' ? '' : o.x; }\n" + "/** @param {Function} o\n@param {number} x */\n" + "function s2(o,x) { o.x = x; }\n" + "/** @param {Function} o\n@return {number} */\n" + "function g2(o) { return typeof o.x == 'undefined' ? 0 : o.x; }"); [EOL] } <line_num>: 786,796
public void testObjectPropertyTypeInferredInLocalScope1() throws Exception { [EOL]     testTypes("/** @param {!Object} o\n@return {string} */\n" + "function f(o) { o.x = 1; return o.x; }", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 798,804
public void testObjectPropertyTypeInferredInLocalScope2() throws Exception { [EOL]     testTypes("/**@param {!Object} o\n@param {number?} x\n@return {string}*/" + "function f(o, x) { o.x = 'a';\nif (x) {o.x = x;}\nreturn o.x; }", "inconsistent return type\n" + "found   : (number|string)\n" + "required: string"); [EOL] } <line_num>: 806,812
public void testObjectPropertyTypeInferredInLocalScope3() throws Exception { [EOL]     testTypes("/**@param {!Object} o\n@param {number?} x\n@return {string}*/" + "function f(o, x) { if (x) {o.x = x;} else {o.x = 'a';}\nreturn o.x; }", "inconsistent return type\n" + "found   : (number|string)\n" + "required: string"); [EOL] } <line_num>: 814,820
public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty1() throws Exception { [EOL]     testTypes("/** @constructor */var T = function() { this.x = ''; };\n" + "/** @type {number} */ T.prototype.x = 0;", "assignment to property x of T\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 822,829
public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty2() throws Exception { [EOL]     testTypes("/** @constructor */var T = function() { this.x = ''; };\n" + "/** @type {number} */ T.prototype.x;", "assignment to property x of T\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 831,838
public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty3() throws Exception { [EOL]     testTypes("/** @type {Object} */ var n = {};\n" + "/** @constructor */ n.T = function() { this.x = ''; };\n" + "/** @type {number} */ n.T.prototype.x = 0;", "assignment to property x of n.T\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 840,848
public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty4() throws Exception { [EOL]     testTypes("var n = {};\n" + "/** @constructor */ n.T = function() { this.x = ''; };\n" + "/** @type {number} */ n.T.prototype.x = 0;", "assignment to property x of n.T\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 850,858
public void testPropertyUsedBeforeDefinition1() throws Exception { [EOL]     testTypes("/** @constructor */ var T = function() {};\n" + "/** @return {string} */" + "T.prototype.f = function() { return this.g(); };\n" + "/** @return {number} */ T.prototype.g = function() { return 1; };\n", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 860,868
public void testPropertyUsedBeforeDefinition2() throws Exception { [EOL]     testTypes("var n = {};\n" + "/** @constructor */ n.T = function() {};\n" + "/** @return {string} */" + "n.T.prototype.f = function() { return this.g(); };\n" + "/** @return {number} */ n.T.prototype.g = function() { return 1; };\n", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 870,879
public void testAdd1() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){var a = 'abc'+foo();}"); [EOL] } <line_num>: 881,883
public void testAdd2() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){var a = foo()+4;}"); [EOL] } <line_num>: 885,887
public void testAdd3() throws Exception { [EOL]     testTypes("/** @type {string} */ var a = 'a';" + "/** @type {string} */ var b = 'b';" + "/** @type {string} */ var c = a + b;"); [EOL] } <line_num>: 889,893
public void testAdd4() throws Exception { [EOL]     testTypes("/** @type {number} */ var a = 5;" + "/** @type {string} */ var b = 'b';" + "/** @type {string} */ var c = a + b;"); [EOL] } <line_num>: 895,899
public void testAdd5() throws Exception { [EOL]     testTypes("/** @type {string} */ var a = 'a';" + "/** @type {number} */ var b = 5;" + "/** @type {string} */ var c = a + b;"); [EOL] } <line_num>: 901,905
public void testAdd6() throws Exception { [EOL]     testTypes("/** @type {number} */ var a = 5;" + "/** @type {number} */ var b = 5;" + "/** @type {number} */ var c = a + b;"); [EOL] } <line_num>: 907,911
public void testAdd7() throws Exception { [EOL]     testTypes("/** @type {number} */ var a = 5;" + "/** @type {string} */ var b = 'b';" + "/** @type {number} */ var c = a + b;", "initializing variable\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 913,920
public void testAdd8() throws Exception { [EOL]     testTypes("/** @type {string} */ var a = 'a';" + "/** @type {number} */ var b = 5;" + "/** @type {number} */ var c = a + b;", "initializing variable\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 922,929
public void testAdd9() throws Exception { [EOL]     testTypes("/** @type {number} */ var a = 5;" + "/** @type {number} */ var b = 5;" + "/** @type {string} */ var c = a + b;", "initializing variable\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 931,938
public void testAdd10() throws Exception { [EOL]     testTypes(suppressMissingProperty("e", "f") + "/** @type {number} */ var a = 5;" + "/** @type {string} */ var c = a + d.e.f;"); [EOL] } <line_num>: 940,946
public void testAdd11() throws Exception { [EOL]     testTypes(suppressMissingProperty("e", "f") + "/** @type {number} */ var a = 5;" + "/** @type {number} */ var c = a + d.e.f;"); [EOL] } <line_num>: 948,954
public void testAdd12() throws Exception { [EOL]     testTypes("/** @return {(number,string)} */ function a() { return 5; }" + "/** @type {number} */ var b = 5;" + "/** @type {boolean} */ var c = a() + b;", "initializing variable\n" + "found   : (number|string)\n" + "required: boolean"); [EOL] } <line_num>: 956,963
public void testAdd13() throws Exception { [EOL]     testTypes("/** @type {number} */ var a = 5;" + "/** @return {(number,string)} */ function b() { return 5; }" + "/** @type {boolean} */ var c = a + b();", "initializing variable\n" + "found   : (number|string)\n" + "required: boolean"); [EOL] } <line_num>: 965,972
public void testAdd14() throws Exception { [EOL]     testTypes("/** @type {(null,string)} */ var a = null;" + "/** @type {number} */ var b = 5;" + "/** @type {boolean} */ var c = a + b;", "initializing variable\n" + "found   : (number|string)\n" + "required: boolean"); [EOL] } <line_num>: 974,981
public void testAdd15() throws Exception { [EOL]     testTypes("/** @type {number} */ var a = 5;" + "/** @return {(number,string)} */ function b() { return 5; }" + "/** @type {boolean} */ var c = a + b();", "initializing variable\n" + "found   : (number|string)\n" + "required: boolean"); [EOL] } <line_num>: 983,990
public void testAdd16() throws Exception { [EOL]     testTypes("/** @type {(undefined,string)} */ var a = undefined;" + "/** @type {number} */ var b = 5;" + "/** @type {boolean} */ var c = a + b;", "initializing variable\n" + "found   : (number|string)\n" + "required: boolean"); [EOL] } <line_num>: 992,999
public void testAdd17() throws Exception { [EOL]     testTypes("/** @type {number} */ var a = 5;" + "/** @type {(undefined,string)} */ var b = undefined;" + "/** @type {boolean} */ var c = a + b;", "initializing variable\n" + "found   : (number|string)\n" + "required: boolean"); [EOL] } <line_num>: 1001,1008
public void testAdd18() throws Exception { [EOL]     testTypes("function f() {};" + "/** @type {string} */ var a = 'a';" + "/** @type {number} */ var c = a + f();", "initializing variable\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 1010,1017
public void testAdd19() throws Exception { [EOL]     testTypes("/** @param {number} opt_x\n@param {number} opt_y\n" + "@return {number} */ function f(opt_x, opt_y) {" + "return opt_x + opt_y;}"); [EOL] } <line_num>: 1019,1023
public void testAdd20() throws Exception { [EOL]     testTypes("/** @param {!Number} opt_x\n@param {!Number} opt_y\n" + "@return {number} */ function f(opt_x, opt_y) {" + "return opt_x + opt_y;}"); [EOL] } <line_num>: 1025,1029
public void testAdd21() throws Exception { [EOL]     testTypes("/** @param {Number|Boolean} opt_x\n" + "@param {number|boolean} opt_y\n" + "@return {number} */ function f(opt_x, opt_y) {" + "return opt_x + opt_y;}"); [EOL] } <line_num>: 1031,1036
public void testNumericComparison1() throws Exception { [EOL]     testTypes("/**@param {number} a*/ function f(a) {return a < 3;}"); [EOL] } <line_num>: 1038,1040
public void testNumericComparison2() throws Exception { [EOL]     testTypes("/**@param {!Object} a*/ function f(a) {return a < 3;}", "left side of numeric comparison\n" + "found   : Object\n" + "required: number"); [EOL] } <line_num>: 1042,1047
public void testNumericComparison3() throws Exception { [EOL]     testTypes("/**@param {string} a*/ function f(a) {return a < 3;}"); [EOL] } <line_num>: 1049,1051
public void testNumericComparison4() throws Exception { [EOL]     testTypes("/**@param {(number,undefined)} a*/ " + "function f(a) {return a < 3;}"); [EOL] } <line_num>: 1053,1056
public void testNumericComparison5() throws Exception { [EOL]     testTypes("/**@param {*} a*/ function f(a) {return a < 3;}", "left side of numeric comparison\n" + "found   : *\n" + "required: number"); [EOL] } <line_num>: 1058,1063
public void testNumericComparison6() throws Exception { [EOL]     testTypes("/**@return {void}*/ function foo() { if (3 >= foo()) return; }", "right side of numeric comparison\n" + "found   : undefined\n" + "required: number"); [EOL] } <line_num>: 1065,1070
public void testStringComparison1() throws Exception { [EOL]     testTypes("/**@param {string} a*/ function f(a) {return a < 'x';}"); [EOL] } <line_num>: 1072,1074
public void testStringComparison2() throws Exception { [EOL]     testTypes("/**@param {Object} a*/ function f(a) {return a < 'x';}"); [EOL] } <line_num>: 1076,1078
public void testStringComparison3() throws Exception { [EOL]     testTypes("/**@param {number} a*/ function f(a) {return a < 'x';}"); [EOL] } <line_num>: 1080,1082
public void testStringComparison4() throws Exception { [EOL]     testTypes("/**@param {string|undefined} a*/ " + "function f(a) {return a < 'x';}"); [EOL] } <line_num>: 1084,1087
public void testStringComparison5() throws Exception { [EOL]     testTypes("/**@param {*} a*/ " + "function f(a) {return a < 'x';}"); [EOL] } <line_num>: 1089,1092
public void testStringComparison6() throws Exception { [EOL]     testTypes("/**@return {void} */ " + "function foo() { if ('a' >= foo()) return; }", "right side of comparison\n" + "found   : undefined\n" + "required: string"); [EOL] } <line_num>: 1094,1100
public void testValueOfComparison1() throws Exception { [EOL]     testTypes("/** @constructor */function O() {};" + "/**@override*/O.prototype.valueOf = function() { return 1; };" + "/**@param {!O} a\n@param {!O} b*/ function f(a,b) { return a < b; }"); [EOL] } <line_num>: 1102,1106
public void testValueOfComparison2() throws Exception { [EOL]     testTypes("/** @constructor */function O() {};" + "/**@override*/O.prototype.valueOf = function() { return 1; };" + "/**@param {!O} a\n@param {number} b*/" + "function f(a,b) { return a < b; }"); [EOL] } <line_num>: 1108,1113
public void testValueOfComparison3() throws Exception { [EOL]     testTypes("/** @constructor */function O() {};" + "/**@override*/O.prototype.toString = function() { return 'o'; };" + "/**@param {!O} a\n@param {string} b*/" + "function f(a,b) { return a < b; }"); [EOL] } <line_num>: 1115,1120
public void testGenericRelationalExpression() throws Exception { [EOL]     testTypes("/**@param {*} a\n@param {*} b*/ " + "function f(a,b) {return a < b;}"); [EOL] } <line_num>: 1122,1125
public void testInstanceof1() throws Exception { [EOL]     testTypes("function foo(){" + "if (bar instanceof 3)return;}", "instanceof requires an object\n" + "found   : number\n" + "required: Object"); [EOL] } <line_num>: 1127,1133
public void testInstanceof2() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){" + "if (foo() instanceof Object)return;}", "deterministic instanceof yields false\n" + "found   : undefined\n" + "required: NoObject"); [EOL] } <line_num>: 1135,1141
public void testInstanceof3() throws Exception { [EOL]     testTypes("/**@return {*} */function foo(){" + "if (foo() instanceof Object)return;}"); [EOL] } <line_num>: 1143,1146
public void testInstanceof4() throws Exception { [EOL]     testTypes("/**@return {(Object|number)} */function foo(){" + "if (foo() instanceof Object)return 3;}"); [EOL] } <line_num>: 1148,1151
public void testInstanceof5() throws Exception { [EOL]     testTypes("/** @return {?} */ function foo(){" + "if (foo() instanceof Object)return;}"); [EOL] } <line_num>: 1153,1157
public void testInstanceof6() throws Exception { [EOL]     testTypes("/**@return {(Array|number)} */function foo(){" + "if (foo() instanceof Object)return 3;}"); [EOL] } <line_num>: 1159,1162
public void testInstanceOfReduction3() throws Exception { [EOL]     testTypes("/** \n" + " * @param {Object} x \n" + " * @param {Function} y \n" + " * @return {boolean} \n" + " */\n" + "var f = function(x, y) {\n" + "  return x instanceof y;\n" + "};"); [EOL] } <line_num>: 1164,1174
public void testScoping1() throws Exception { [EOL]     testTypes("/**@param {string} a*/function foo(a){" + "  /**@param {Array|string} a*/function bar(a){" + "    if (a instanceof Array)return;" + "  }" + "}"); [EOL] } <line_num>: 1176,1183
public void testScoping2() throws Exception { [EOL]     testTypes("/** @type number */ var a;" + "function Foo() {" + "  /** @type string */ var a;" + "}"); [EOL] } <line_num>: 1185,1191
public void testScoping3() throws Exception { [EOL]     testTypes("\n\n/** @type{Number}*/var b;\n/** @type{!String} */var b;", "variable b redefined with type String, original " + "definition at [testcode]:3 with type (Number|null|undefined)"); [EOL] } <line_num>: 1193,1197
public void testScoping4() throws Exception { [EOL]     testTypes("/** @type{Number}*/var b; if (true) /** @type{!String} */var b;", "variable b redefined with type String, original " + "definition at [testcode]:1 with type (Number|null|undefined)"); [EOL] } <line_num>: 1199,1203
public void testScoping5() throws Exception { [EOL]     testTypes("if (true) var b; var b;"); [EOL] } <line_num>: 1205,1209
public void testScoping6() throws Exception { [EOL]     testTypes("if (true) var b; if (true) var b;"); [EOL] } <line_num>: 1211,1215
public void testScoping7() throws Exception { [EOL]     testTypes("/** @constructor */function A() {" + "  /** @type !A */this.a = null;" + "}", "assignment to property a of A\n" + "found   : null\n" + "required: A"); [EOL] } <line_num>: 1217,1224
public void testScoping8() throws Exception { [EOL]     testTypes("/** @constructor */function A() {}" + "/** @constructor */function B() {" + "  /** @type !A */this.a = null;" + "}", "assignment to property a of B\n" + "found   : null\n" + "required: A"); [EOL] } <line_num>: 1226,1234
public void testScoping9() throws Exception { [EOL]     testTypes("/** @constructor */function B() {" + "  /** @type !A */this.a = null;" + "}" + "/** @constructor */function A() {}", "assignment to property a of B\n" + "found   : null\n" + "required: A"); [EOL] } <line_num>: 1236,1244
public void testScoping10() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("var a = function b(){};"); [EOL]     assertTrue(p.scope.isDeclared("a", false)); [EOL]     assertFalse(p.scope.isDeclared("b", false)); [EOL]     assertEquals("function (): undefined", p.scope.getVar("a").getType().toString()); [EOL] } <line_num>: 1246,1256
public void testScoping11() throws Exception { [EOL]     testTypes("/** @return {number} */var a = function b(){ return b };", "inconsistent return type\n" + "found   : function (): number\n" + "required: number"); [EOL] } <line_num>: 1258,1266
public void testFunctionArguments1() throws Exception { [EOL]     testFunctionType("/** @param {number} a\n@return {string} */" + "function f(a) {}", "function (number): string"); [EOL] } <line_num>: 1268,1273
public void testFunctionArguments2() throws Exception { [EOL]     testFunctionType("/** @param {number} opt_a\n@return {string} */" + "function f(opt_a) {}", "function (number=): string"); [EOL] } <line_num>: 1275,1280
public void testFunctionArguments3() throws Exception { [EOL]     testFunctionType("/** @param {number} b\n@return {string} */" + "function f(a,b) {}", "function (?, number): string"); [EOL] } <line_num>: 1282,1287
public void testFunctionArguments4() throws Exception { [EOL]     testFunctionType("/** @param {number} opt_a\n@return {string} */" + "function f(a,opt_a) {}", "function (?, number=): string"); [EOL] } <line_num>: 1289,1294
public void testFunctionArguments5() throws Exception { [EOL]     testTypes("function a(opt_a,a) {}", "optional arguments must be at the end"); [EOL] } <line_num>: 1296,1300
public void testFunctionArguments6() throws Exception { [EOL]     testTypes("function a(var_args,a) {}", "variable length argument must be last"); [EOL] } <line_num>: 1302,1306
public void testFunctionArguments7() throws Exception { [EOL]     testTypes("/** @param {number} opt_a\n@return {string} */" + "function a(a,opt_a,var_args) {}"); [EOL] } <line_num>: 1308,1312
public void testFunctionArguments8() throws Exception { [EOL]     testTypes("function a(a,opt_a,var_args,b) {}", "variable length argument must be last"); [EOL] } <line_num>: 1314,1318
public void testFunctionArguments9() throws Exception { [EOL]     testTypes("function a(a,opt_a,var_args,b,c) {}", "variable length argument must be last"); [EOL] } <line_num>: 1320,1325
public void testFunctionArguments10() throws Exception { [EOL]     testTypes("function a(a,opt_a,b,c) {}", "optional arguments must be at the end"); [EOL] } <line_num>: 1327,1332
public void testFunctionArguments11() throws Exception { [EOL]     testTypes("function a(a,opt_a,b,c,var_args,d) {}", "optional arguments must be at the end"); [EOL] } <line_num>: 1334,1338
public void testFunctionArguments12() throws Exception { [EOL]     testTypes("/** @param foo {String} */function bar(baz){}", "parameter foo does not appear in bar's parameter list"); [EOL] } <line_num>: 1340,1343
public void testFunctionArguments13() throws Exception { [EOL]     testTypes("/** @return {boolean} */ function u() { return true; }" + "/** @param {boolean} b\n@return {?boolean} */" + "function f(b) { if (u()) { b = null; } return b; }", "assignment\n" + "found   : null\n" + "required: boolean"); [EOL] } <line_num>: 1345,1354
public void testFunctionArguments14() throws Exception { [EOL]     testTypes("/**\n" + " * @param {string} x\n" + " * @param {number} opt_y\n" + " * @param {boolean} var_args\n" + " */ function f(x, opt_y, var_args) {}" + "f('3'); f('3', 2); f('3', 2, true); f('3', 2, true, false);"); [EOL] } <line_num>: 1356,1364
public void testFunctionArguments15() throws Exception { [EOL]     testTypes("/** @param {?function(*)} f */" + "function g(f) { f(1, 2); }", "Function f: called with 2 argument(s). " + "Function requires at least 1 argument(s) " + "and no more than 1 argument(s)."); [EOL] } <line_num>: 1366,1373
public void testPrintFunctionName1() throws Exception { [EOL]     testTypes("var goog = {}; goog.run = function(f) {};" + "goog.run();", "Function goog.run: called with 0 argument(s). " + "Function requires at least 1 argument(s) " + "and no more than 1 argument(s)."); [EOL] } <line_num>: 1375,1383
public void testPrintFunctionName2() throws Exception { [EOL]     testTypes("/** @constructor */ var Foo = function() {}; " + "Foo.prototype.run = function(f) {};" + "(new Foo).run();", "Function Foo.prototype.run: called with 0 argument(s). " + "Function requires at least 1 argument(s) " + "and no more than 1 argument(s)."); [EOL] } <line_num>: 1385,1393
public void testFunctionInference1() throws Exception { [EOL]     testFunctionType("function f(a) {}", "function (?): undefined"); [EOL] } <line_num>: 1395,1399
public void testFunctionInference2() throws Exception { [EOL]     testFunctionType("function f(a,b) {}", "function (?, ?): undefined"); [EOL] } <line_num>: 1401,1405
public void testFunctionInference3() throws Exception { [EOL]     testFunctionType("function f(var_args) {}", "function (...[?]): undefined"); [EOL] } <line_num>: 1407,1411
public void testFunctionInference4() throws Exception { [EOL]     testFunctionType("function f(a,b,c,var_args) {}", "function (?, ?, ?, ...[?]): undefined"); [EOL] } <line_num>: 1413,1417
public void testFunctionInference5() throws Exception { [EOL]     testFunctionType("/** @this Date\n@return {string} */function f(a) {}", "function (this:Date, ?): string"); [EOL] } <line_num>: 1419,1423
public void testFunctionInference6() throws Exception { [EOL]     testFunctionType("/** @this Date\n@return {string} */function f(opt_a) {}", "function (this:Date, ?=): string"); [EOL] } <line_num>: 1425,1429
public void testFunctionInference7() throws Exception { [EOL]     testFunctionType("/** @this Date */function f(a,b,c,var_args) {}", "function (this:Date, ?, ?, ?, ...[?]): undefined"); [EOL] } <line_num>: 1431,1435
public void testFunctionInference8() throws Exception { [EOL]     testFunctionType("function f() {}", "function (): undefined"); [EOL] } <line_num>: 1437,1441
public void testFunctionInference9() throws Exception { [EOL]     testFunctionType("var f = function() {};", "function (): undefined"); [EOL] } <line_num>: 1443,1447
public void testFunctionInference10() throws Exception { [EOL]     testFunctionType("/** @this Date\n@param {boolean} b\n@return {string} */" + "var f = function(a,b) {};", "function (this:Date, ?, boolean): string"); [EOL] } <line_num>: 1449,1454
public void testFunctionInference11() throws Exception { [EOL]     testFunctionType("var goog = {};" + "/** @return {number}*/goog.f = function(){};", "goog.f", "function (): number"); [EOL] } <line_num>: 1456,1462
public void testFunctionInference12() throws Exception { [EOL]     testFunctionType("var goog = {};" + "goog.f = function(){};", "goog.f", "function (): undefined"); [EOL] } <line_num>: 1464,1470
public void testFunctionInference13() throws Exception { [EOL]     testFunctionType("var goog = {};" + "/** @constructor */ goog.Foo = function(){};" + "/** @param {!goog.Foo} f */function eatFoo(f){};", "eatFoo", "function (goog.Foo): undefined"); [EOL] } <line_num>: 1472,1479
public void testFunctionInference14() throws Exception { [EOL]     testFunctionType("var goog = {};" + "/** @constructor */ goog.Foo = function(){};" + "/** @return {!goog.Foo} */function eatFoo(){ return new goog.Foo; };", "eatFoo", "function (): goog.Foo"); [EOL] } <line_num>: 1481,1488
public void testFunctionInference15() throws Exception { [EOL]     testFunctionType("/** @constructor */ function f() {};" + "f.prototype.foo = function(){};", "f.prototype.foo", "function (this:f): undefined"); [EOL] } <line_num>: 1490,1496
public void testFunctionInference16() throws Exception { [EOL]     testFunctionType("/** @constructor */ function f() {};" + "f.prototype.foo = function(){};", "(new f).foo", "function (this:f): undefined"); [EOL] } <line_num>: 1498,1504
public void testFunctionInference17() throws Exception { [EOL]     testFunctionType("/** @constructor */ function f() {}" + "function abstractMethod() {}" + "/** @param {number} x */ f.prototype.foo = abstractMethod;", "(new f).foo", "function (this:f, number): ?"); [EOL] } <line_num>: 1506,1513
public void testFunctionInference18() throws Exception { [EOL]     testFunctionType("var goog = {};" + "/** @this {Date} */ goog.eatWithDate;", "goog.eatWithDate", "function (this:Date): ?"); [EOL] } <line_num>: 1515,1521
public void testFunctionInference19() throws Exception { [EOL]     testFunctionType("/** @param {string} x */ var f;", "f", "function (string): ?"); [EOL] } <line_num>: 1523,1528
public void testFunctionInference20() throws Exception { [EOL]     testFunctionType("/** @this {Date} */ var f;", "f", "function (this:Date): ?"); [EOL] } <line_num>: 1530,1535
public void testInnerFunction1() throws Exception { [EOL]     testTypes("function f() {" + " /** @type {number} */ var x = 3;\n" + " function g() { x = null; }" + " return x;" + "}", "assignment\n" + "found   : null\n" + "required: number"); [EOL] } <line_num>: 1537,1547
public void testInnerFunction2() throws Exception { [EOL]     testTypes("/** @return {number} */\n" + "function f() {" + " var x = null;\n" + " function g() { x = 3; }" + " g();" + " return x;" + "}", "inconsistent return type\n" + "found   : (null|number)\n" + "required: number"); [EOL] } <line_num>: 1549,1561
public void testInnerFunction3() throws Exception { [EOL]     testTypes("var x = null;" + "/** @return {number} */\n" + "function f() {" + " x = 3;\n" + " /** @return {number} */\n" + " function g() { x = true; return x; }" + " return x;" + "}", "inconsistent return type\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 1563,1576
public void testInnerFunction4() throws Exception { [EOL]     testTypes("var x = null;" + "/** @return {number} */\n" + "function f() {" + " x = '3';\n" + " /** @return {number} */\n" + " function g() { x = 3; return x; }" + " return x;" + "}", "inconsistent return type\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 1578,1591
public void testInnerFunction5() throws Exception { [EOL]     testTypes("/** @return {number} */\n" + "function f() {" + " var x = 3;\n" + " /** @return {number} */" + " function g() { var x = 3;x = true; return x; }" + " return x;" + "}", "inconsistent return type\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 1593,1605
public void testInnerFunction6() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "function f() {" + " var x = 0 || function() {};\n" + " function g() { if (goog.isFunction(x)) { x(1); } }" + " g();" + "}", "Function x: called with 1 argument(s). " + "Function requires at least 0 argument(s) " + "and no more than 0 argument(s)."); [EOL] } <line_num>: 1607,1618
public void testInnerFunction7() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "function f() {" + " /** @type {number|function()} */" + " var x = 0 || function() {};\n" + " function g() { if (goog.isFunction(x)) { x(1); } }" + " g();" + "}", "Function x: called with 1 argument(s). " + "Function requires at least 0 argument(s) " + "and no more than 0 argument(s)."); [EOL] } <line_num>: 1620,1632
public void testInnerFunction8() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "function f() {" + " function x() {};\n" + " function g() { if (goog.isFunction(x)) { x(1); } }" + " g();" + "}", "Function x: called with 1 argument(s). " + "Function requires at least 0 argument(s) " + "and no more than 0 argument(s)."); [EOL] } <line_num>: 1634,1645
public void testInnerFunction9() throws Exception { [EOL]     testTypes("function f() {" + " var x = 3;\n" + " function g() { x = null; };\n" + " function h() { return x == null; }" + " return h();" + "}"); [EOL] } <line_num>: 1647,1655
public void testAbstractMethodHandling1() throws Exception { [EOL]     testTypes("/** @type {Function} */ var abstractFn = function() {};" + "abstractFn(1);"); [EOL] } <line_num>: 1657,1661
public void testAbstractMethodHandling2() throws Exception { [EOL]     testTypes("var abstractFn = function() {};" + "abstractFn(1);", "Function abstractFn: called with 1 argument(s). " + "Function requires at least 0 argument(s) " + "and no more than 0 argument(s)."); [EOL] } <line_num>: 1663,1670
public void testAbstractMethodHandling3() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @type {Function} */ goog.abstractFn = function() {};" + "goog.abstractFn(1);"); [EOL] } <line_num>: 1672,1677
public void testAbstractMethodHandling4() throws Exception { [EOL]     testTypes("var goog = {};" + "goog.abstractFn = function() {};" + "goog.abstractFn(1);", "Function goog.abstractFn: called with 1 argument(s). " + "Function requires at least 0 argument(s) " + "and no more than 0 argument(s)."); [EOL] } <line_num>: 1679,1687
public void testAbstractMethodHandling5() throws Exception { [EOL]     testTypes("/** @type {!Function} */ var abstractFn = function() {};" + "/** @param {number} x */ var f = abstractFn;" + "f('x');", "actual parameter 1 of f does not match formal parameter\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 1689,1697
public void testAbstractMethodHandling6() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @type {Function} */ goog.abstractFn = function() {};" + "/** @param {number} x */ goog.f = abstractFn;" + "goog.f('x');", "actual parameter 1 of goog.f does not match formal parameter\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 1699,1708
public void testMethodInference1() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "/** @return {number} */ F.prototype.foo = function() { return 3; };" + "/** @constructor \n * @extends {F} */ " + "function G() {}" + "/** @override */ G.prototype.foo = function() { return true; };", "inconsistent return type\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 1710,1720
public void testMethodInference2() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor */ goog.F = function() {};" + "/** @return {number} */ goog.F.prototype.foo = " + "    function() { return 3; };" + "/** @constructor \n * @extends {goog.F} */ " + "goog.G = function() {};" + "/** @override */ goog.G.prototype.foo = function() { return true; };", "inconsistent return type\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 1722,1734
public void testMethodInference3() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "/** @param {boolean} x \n * @return {number} */ " + "F.prototype.foo = function(x) { return 3; };" + "/** @constructor \n * @extends {F} */ " + "function G() {}" + "/** @override */ " + "G.prototype.foo = function(x) { return x; };", "inconsistent return type\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 1736,1748
public void testMethodInference4() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "/** @param {boolean} x \n * @return {number} */ " + "F.prototype.foo = function(x) { return 3; };" + "/** @constructor \n * @extends {F} */ " + "function G() {}" + "/** @override */ " + "G.prototype.foo = function(y) { return y; };", "inconsistent return type\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 1750,1762
public void testMethodInference5() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "/** @param {number} x \n * @return {string} */ " + "F.prototype.foo = function(x) { return 'x'; };" + "/** @constructor \n * @extends {F} */ " + "function G() {}" + "/** @type {number} */ G.prototype.num = 3;" + "/** @override */ " + "G.prototype.foo = function(y) { return this.num + y; };", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 1764,1777
public void testMethodInference6() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "/** @param {number} x */ F.prototype.foo = function(x) { };" + "/** @constructor \n * @extends {F} */ " + "function G() {}" + "/** @override */ G.prototype.foo = function() { };" + "(new G()).foo(1);"); [EOL] } <line_num>: 1779,1787
public void testMethodInference7() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "F.prototype.foo = function() { };" + "/** @constructor \n * @extends {F} */ " + "function G() {}" + "/** @override */ G.prototype.foo = function(x, y) { };", "mismatch of the foo property type and the type of the property " + "it overrides from superclass F\n" + "original: function (this:F): undefined\n" + "override: function (this:G, ?, ?): undefined"); [EOL] } <line_num>: 1789,1800
public void testMethodInference8() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "F.prototype.foo = function() { };" + "/** @constructor \n * @extends {F} */ " + "function G() {}" + "/** @override */ " + "G.prototype.foo = function(opt_b, var_args) { };" + "(new G()).foo(1, 2, 3);"); [EOL] } <line_num>: 1802,1811
public void testMethodInference9() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "F.prototype.foo = function() { };" + "/** @constructor \n * @extends {F} */ " + "function G() {}" + "/** @override */ " + "G.prototype.foo = function(var_args, opt_b) { };", "variable length argument must be last"); [EOL] } <line_num>: 1813,1822
public void testStaticMethodDeclaration1() throws Exception { [EOL]     testTypes("/** @constructor */ function F() { F.foo(true); }" + "/** @param {number} x */ F.foo = function(x) {};", "actual parameter 1 of F.foo does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 1824,1831
public void testStaticMethodDeclaration2() throws Exception { [EOL]     testTypes("var goog = goog || {}; function f() { goog.foo(true); }" + "/** @param {number} x */ goog.foo = function(x) {};", "actual parameter 1 of goog.foo does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 1833,1840
public void testStaticMethodDeclaration3() throws Exception { [EOL]     testTypes("var goog = goog || {}; function f() { goog.foo(true); }" + "goog.foo = function() {};", "Function goog.foo: called with 1 argument(s). Function requires " + "at least 0 argument(s) and no more than 0 argument(s)."); [EOL] } <line_num>: 1842,1848
public void testDuplicateStaticMethodDecl1() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "/** @param {number} x */ goog.foo = function(x) {};" + "/** @param {number} x */ goog.foo = function(x) {};", "variable goog.foo redefined with type function (number): undefined, " + "original definition at [testcode]:1 " + "with type function (number): undefined"); [EOL] } <line_num>: 1850,1858
public void testDuplicateStaticMethodDecl2() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "/** @param {number} x */ goog.foo = function(x) {};" + "/** @param {number} x \n * @suppress {duplicate} */ " + "goog.foo = function(x) {};"); [EOL] } <line_num>: 1860,1866
public void testDuplicateStaticMethodDecl3() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "goog.foo = function(x) {};" + "goog.foo = function(x) {};"); [EOL] } <line_num>: 1868,1873
public void testDuplicateStaticMethodDecl4() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "/** @type {Function} */ goog.foo = function(x) {};" + "goog.foo = function(x) {};"); [EOL] } <line_num>: 1875,1880
public void testDuplicateStaticMethodDecl5() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "goog.foo = function(x) {};" + "/** @return {undefined} */ goog.foo = function(x) {};", "variable goog.foo redefined with type function (?): undefined, " + "original definition at [testcode]:1 with type " + "function (?): undefined"); [EOL] } <line_num>: 1882,1890
public void testDuplicateStaticPropertyDecl1() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "/** @type {Foo} */ goog.foo;" + "/** @type {Foo} */ goog.foo;" + "/** @constructor */ function Foo() {}"); [EOL] } <line_num>: 1892,1898
public void testDuplicateStaticPropertyDecl2() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "/** @type {Foo} */ goog.foo;" + "/** @type {Foo} \n * @suppress {duplicate} */ goog.foo;" + "/** @constructor */ function Foo() {}"); [EOL] } <line_num>: 1900,1906
public void testDuplicateStaticPropertyDecl3() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "/** @type {!Foo} */ goog.foo;" + "/** @type {string} */ goog.foo;" + "/** @constructor */ function Foo() {}", "variable goog.foo redefined with type string, " + "original definition at [testcode]:1 with type Foo"); [EOL] } <line_num>: 1908,1916
public void testDuplicateStaticPropertyDecl4() throws Exception { [EOL]     testClosureTypesMultipleWarnings("var goog = goog || {};" + "/** @type {!Foo} */ goog.foo;" + "/** @type {string} */ goog.foo = 'x';" + "/** @constructor */ function Foo() {}", Lists.newArrayList("assignment to property foo of goog\n" + "found   : string\n" + "required: Foo", "variable goog.foo redefined with type string, " + "original definition at [testcode]:1 with type Foo")); [EOL] } <line_num>: 1918,1930
public void testDuplicateStaticPropertyDecl5() throws Exception { [EOL]     testClosureTypesMultipleWarnings("var goog = goog || {};" + "/** @type {!Foo} */ goog.foo;" + "/** @type {string}\n * @suppress {duplicate} */ goog.foo = 'x';" + "/** @constructor */ function Foo() {}", Lists.newArrayList("assignment to property foo of goog\n" + "found   : string\n" + "required: Foo", "variable goog.foo redefined with type string, " + "original definition at [testcode]:1 with type Foo")); [EOL] } <line_num>: 1932,1944
public void testDuplicateStaticPropertyDecl6() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "/** @type {string} */ goog.foo = 'y';" + "/** @type {string}\n * @suppress {duplicate} */ goog.foo = 'x';"); [EOL] } <line_num>: 1946,1951
public void testDuplicateStaticPropertyDecl7() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "/** @param {string} x */ goog.foo;" + "/** @type {function(string)} */ goog.foo;"); [EOL] } <line_num>: 1953,1958
public void testDuplicateStaticPropertyDecl8() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "/** @return {EventCopy} */ goog.foo;" + "/** @constructor */ function EventCopy() {}" + "/** @return {EventCopy} */ goog.foo;"); [EOL] } <line_num>: 1960,1966
public void testDuplicateStaticPropertyDecl9() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "/** @return {EventCopy} */ goog.foo;" + "/** @return {EventCopy} */ goog.foo;" + "/** @constructor */ function EventCopy() {}"); [EOL] } <line_num>: 1968,1974
public void testDuplicateLocalVarDecl() throws Exception { [EOL]     testClosureTypesMultipleWarnings("/** @param {number} x */\n" + "function f(x) { /** @type {string} */ var x = ''; }", Lists.newArrayList("variable x redefined with type string, original definition" + " at [testcode]:2 with type number", "initializing variable\n" + "found   : string\n" + "required: number")); [EOL] } <line_num>: 1976,1986
public void testStubFunctionDeclaration1() throws Exception { [EOL]     testFunctionType("/** @constructor */ function f() {};" + "/** @param {number} x \n * @param {string} y \n" + "  * @return {number} */ f.prototype.foo;", "(new f).foo", "function (this:f, number, string): number"); [EOL] } <line_num>: 1988,1995
public void testStubFunctionDeclaration2() throws Exception { [EOL]     testExternFunctionType("/** @constructor */ function f() {};" + "/** @constructor \n * @extends {f} */ f.subclass;", "f.subclass", "function (new:f.subclass): ?"); [EOL] } <line_num>: 1997,2004
public void testStubFunctionDeclaration3() throws Exception { [EOL]     testFunctionType("/** @constructor */ function f() {};" + "/** @return {undefined} */ f.foo;", "f.foo", "function (): undefined"); [EOL] } <line_num>: 2006,2012
public void testStubFunctionDeclaration4() throws Exception { [EOL]     testFunctionType("/** @constructor */ function f() { " + "  /** @return {number} */ this.foo;" + "}", "(new f).foo", "function (this:f): number"); [EOL] } <line_num>: 2014,2021
public void testStubFunctionDeclaration5() throws Exception { [EOL]     testFunctionType("/** @constructor */ function f() { " + "  /** @type {Function} */ this.foo;" + "}", "(new f).foo", createOptionalType(createNullableType(U2U_CONSTRUCTOR_TYPE)).toString()); [EOL] } <line_num>: 2023,2031
public void testStubFunctionDeclaration6() throws Exception { [EOL]     testFunctionType("/** @constructor */ function f() {} " + "/** @type {Function} */ f.prototype.foo;", "(new f).foo", createOptionalType(createNullableType(U2U_CONSTRUCTOR_TYPE)).toString()); [EOL] } <line_num>: 2033,2040
public void testStubFunctionDeclaration7() throws Exception { [EOL]     testFunctionType("/** @constructor */ function f() {} " + "/** @type {Function} */ f.prototype.foo = function() {};", "(new f).foo", createOptionalType(createNullableType(U2U_CONSTRUCTOR_TYPE)).toString()); [EOL] } <line_num>: 2042,2049
public void testStubFunctionDeclaration8() throws Exception { [EOL]     testFunctionType("/** @type {Function} */ var f = function() {}; ", "f", createOptionalType(createNullableType(U2U_CONSTRUCTOR_TYPE)).toString()); [EOL] } <line_num>: 2051,2057
public void testStubFunctionDeclaration9() throws Exception { [EOL]     testFunctionType("/** @type {function():number} */ var f; ", "f", "function (): number"); [EOL] } <line_num>: 2059,2064
public void testStubFunctionDeclaration10() throws Exception { [EOL]     testFunctionType("/** @type {function(number):number} */ var f = function(x) {};", "f", "function (number): number"); [EOL] } <line_num>: 2066,2071
public void testNestedFunctionInference1() throws Exception { [EOL]     String nestedAssignOfFooAndBar = "/** @constructor */ function f() {};" + "f.prototype.foo = f.prototype.bar = function(){};"; [EOL]     testFunctionType(nestedAssignOfFooAndBar, "(new f).bar", "function (this:f): undefined"); [EOL] } <line_num>: 2073,2079
private void testFunctionType(String functionDef, String functionType) throws Exception { [EOL]     testFunctionType(functionDef, "f", functionType); [EOL] } <line_num>: 2085,2088
private void testFunctionType(String functionDef, String functionName, String functionType) throws Exception { [EOL]     testTypes(functionDef + "/** @type number */var a=" + functionName + ";", "initializing variable\n" + "found   : " + functionType + "\n" + "required: number"); [EOL] } <line_num>: 2094,2103
private void testExternFunctionType(String functionDef, String functionName, String functionType) throws Exception { [EOL]     testTypes(functionDef, "/** @type number */var a=" + functionName + ";", "initializing variable\n" + "found   : " + functionType + "\n" + "required: number", false); [EOL] } <line_num>: 2110,2118
public void testTypeRedefinition() throws Exception { [EOL]     testClosureTypesMultipleWarnings("a={};/**@enum {string}*/ a.A = {ZOR:'b'};" + "/** @constructor */ a.A = function() {}", Lists.newArrayList("variable a.A redefined with type function (new:a.A): undefined, " + "original definition at [testcode]:1 with type enum{a.A}", "assignment to property A of a\n" + "found   : function (new:a.A): undefined\n" + "required: enum{a.A}")); [EOL] } <line_num>: 2120,2130
public void testIn1() throws Exception { [EOL]     testTypes("'foo' in Object"); [EOL] } <line_num>: 2132,2134
public void testIn2() throws Exception { [EOL]     testTypes("3 in Object"); [EOL] } <line_num>: 2136,2138
public void testIn3() throws Exception { [EOL]     testTypes("undefined in Object"); [EOL] } <line_num>: 2140,2142
public void testIn4() throws Exception { [EOL]     testTypes("Date in Object", "left side of 'in'\n" + "found   : function (new:Date, ?=, ?=, ?=, ?=, ?=, ?=, ?=): string\n" + "required: string"); [EOL] } <line_num>: 2144,2149
public void testIn5() throws Exception { [EOL]     testTypes("'x' in null", "'in' requires an object\n" + "found   : null\n" + "required: Object"); [EOL] } <line_num>: 2151,2156
public void testIn6() throws Exception { [EOL]     testTypes("/** @param {number} x */" + "function g(x) {}" + "g(1 in {});", "actual parameter 1 of g does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 2158,2166
public void testIn7() throws Exception { [EOL]     testTypes("/**\n" + " * @param {number} x\n" + " * @return {number}\n" + " */\n" + "function g(x) { return 5; }" + "function f() {" + "  var x = {};" + "  x.foo = '3';" + "  return g(x.foo) in {};" + "}", "actual parameter 1 of g does not match formal parameter\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 2168,2184
public void testComparison2() throws Exception { [EOL]     testTypes("/**@type number*/var a;" + "/**@type !Date */var b;" + "if (a!==b) {}", "condition always evaluates to true\n" + "left : number\n" + "right: Date"); [EOL] } <line_num>: 2196,2203
public void testComparison3() throws Exception { [EOL]     testTypes("/** @type {(Object,undefined)} */var a;" + "var b = a == null"); [EOL] } <line_num>: 2205,2209
public void testComparison4() throws Exception { [EOL]     testTypes("/** @type {(!Object,undefined)} */var a;" + "/** @type {!Object} */var b;" + "var c = a == b"); [EOL] } <line_num>: 2211,2215
public void testComparison5() throws Exception { [EOL]     testTypes("/** @type null */var a;" + "/** @type null */var b;" + "a == b", "condition always evaluates to true\n" + "left : null\n" + "right: null"); [EOL] } <line_num>: 2217,2224
public void testComparison6() throws Exception { [EOL]     testTypes("/** @type null */var a;" + "/** @type null */var b;" + "a != b", "condition always evaluates to false\n" + "left : null\n" + "right: null"); [EOL] } <line_num>: 2226,2233
public void testComparison7() throws Exception { [EOL]     testTypes("var a;" + "var b;" + "a == b", "condition always evaluates to true\n" + "left : undefined\n" + "right: undefined"); [EOL] } <line_num>: 2235,2242
public void testComparison8() throws Exception { [EOL]     testTypes("/** @type {Array.<string>} */ var a = [];" + "a[0] == null || a[1] == undefined"); [EOL] } <line_num>: 2244,2247
public void testComparison9() throws Exception { [EOL]     testTypes("/** @type {Array.<undefined>} */ var a = [];" + "a[0] == null", "condition always evaluates to true\n" + "left : undefined\n" + "right: null"); [EOL] } <line_num>: 2249,2255
public void testComparison10() throws Exception { [EOL]     testTypes("/** @type {Array.<undefined>} */ var a = [];" + "a[0] === null"); [EOL] } <line_num>: 2257,2260
public void testEnumStaticMethod1() throws Exception { [EOL]     testTypes("/** @enum */ var Foo = {AAA: 1};" + "/** @param {number} x */ Foo.method = function(x) {};" + "Foo.method(true);", "actual parameter 1 of Foo.method does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 2262,2270
public void testEnumStaticMethod2() throws Exception { [EOL]     testTypes("/** @enum */ var Foo = {AAA: 1};" + "/** @param {number} x */ Foo.method = function(x) {};" + "function f() { Foo.method(true); }", "actual parameter 1 of Foo.method does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 2272,2280
public void testEnum1() throws Exception { [EOL]     testTypes("/**@enum*/var a={BB:1,CC:2};\n" + "/**@type {a}*/var d;d=a.BB;"); [EOL] } <line_num>: 2282,2285
public void testEnum2() throws Exception { [EOL]     testTypes("/**@enum*/var a={b:1}", "enum key b must be a syntactic constant"); [EOL] } <line_num>: 2287,2290
public void testEnum3() throws Exception { [EOL]     testTypes("/**@enum*/var a={BB:1,BB:2}", "variable a.BB redefined with type a.<number>, " + "original definition at [testcode]:1 with type a.<number>"); [EOL] } <line_num>: 2292,2296
public void testEnum4() throws Exception { [EOL]     testTypes("/**@enum*/var a={BB:'string'}", "assignment to property BB of enum{a}\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 2298,2303
public void testEnum5() throws Exception { [EOL]     testTypes("/**@enum {String}*/var a={BB:'string'}", "assignment to property BB of enum{a}\n" + "found   : string\n" + "required: (String|null|undefined)"); [EOL] } <line_num>: 2305,2310
public void testEnum6() throws Exception { [EOL]     testTypes("/**@enum*/var a={BB:1,CC:2};\n/**@type {!Array}*/var d;d=a.BB;", "assignment\n" + "found   : a.<number>\n" + "required: Array"); [EOL] } <line_num>: 2312,2317
public void testEnum7() throws Exception { [EOL]     testTypes("/** @enum */var a={AA:1,BB:2,CC:3};" + "/** @type a */var b=a.D;", "element D does not exist on this enum"); [EOL] } <line_num>: 2319,2323
public void testEnum8() throws Exception { [EOL]     testClosureTypesMultipleWarnings("/** @enum */var a=8;", Lists.newArrayList("enum initializer must be an object literal or an enum", "initializing variable\n" + "found   : number\n" + "required: enum{a}")); [EOL] } <line_num>: 2325,2332
public void testEnum9() throws Exception { [EOL]     testClosureTypesMultipleWarnings("var goog = {};" + "/** @enum */goog.a=8;", Lists.newArrayList("assignment to property a of goog\n" + "found   : number\n" + "required: enum{goog.a}", "enum initializer must be an object literal or an enum")); [EOL] } <line_num>: 2334,2343
public void testEnum10() throws Exception { [EOL]     testTypes("/** @enum {number} */" + "goog.K = { A : 3 };"); [EOL] } <line_num>: 2345,2349
public void testEnum11() throws Exception { [EOL]     testTypes("/** @enum {number} */" + "goog.K = { 502 : 3 };"); [EOL] } <line_num>: 2351,2355
public void testEnum12() throws Exception { [EOL]     testTypes("/** @enum {number} */ var a = {};" + "/** @enum */ var b = a;"); [EOL] } <line_num>: 2357,2361
public void testEnum13() throws Exception { [EOL]     testTypes("/** @enum {number} */ var a = {};" + "/** @enum {string} */ var b = a;", "incompatible enum element types\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 2363,2370
public void testEnum14() throws Exception { [EOL]     testTypes("/** @enum {number} */ var a = {FOO:5};" + "/** @enum */ var b = a;" + "var c = b.FOO;"); [EOL] } <line_num>: 2372,2377
public void testEnum15() throws Exception { [EOL]     testTypes("/** @enum {number} */ var a = {FOO:5};" + "/** @enum */ var b = a;" + "var c = b.BAR;", "element BAR does not exist on this enum"); [EOL] } <line_num>: 2379,2385
public void testEnum16() throws Exception { [EOL]     testTypes("var goog = {};" + "/**@enum*/goog .a={BB:1,BB:2}", "variable goog.a.BB redefined with type goog.a.<number>, " + "original definition at [testcode]:1 with type goog.a.<number>"); [EOL] } <line_num>: 2387,2392
public void testEnum17() throws Exception { [EOL]     testTypes("var goog = {};" + "/**@enum*/goog.a={BB:'string'}", "assignment to property BB of enum{goog.a}\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 2394,2400
public void testEnum18() throws Exception { [EOL]     testTypes("/**@enum*/ var E = {A: 1, B: 2};" + "/** @param {!E} x\n@return {number} */\n" + "var f = function(x) { return x; };"); [EOL] } <line_num>: 2402,2406
public void testEnum19() throws Exception { [EOL]     testTypes("/**@enum*/ var E = {A: 1, B: 2};" + "/** @param {number} x\n@return {!E} */\n" + "var f = function(x) { return x; };", "inconsistent return type\n" + "found   : number\n" + "required: E.<number>"); [EOL] } <line_num>: 2408,2415
public void testEnum20() throws Exception { [EOL]     testTypes("/**@enum*/ var E = {A: 1, B: 2}; var x = []; x[E.A] = 0;"); [EOL] } <line_num>: 2417,2419
public void testEnum21() throws Exception { [EOL]     Node n = parseAndTypeCheck("/** @enum {string} */ var E = {A : 'a', B : 'b'};\n" + "/** @param {!E} x\n@return {!E} */ function f(x) { return x; }"); [EOL]     Node nodeX = n.getLastChild().getLastChild().getLastChild().getLastChild(); [EOL]     JSType typeE = nodeX.getJSType(); [EOL]     assertFalse(typeE.isObject()); [EOL]     assertFalse(typeE.isNullable()); [EOL] } <line_num>: 2421,2429
public void testEnum22() throws Exception { [EOL]     testTypes("/**@enum*/ var E = {A: 1, B: 2};" + "/** @param {E} x \n* @return {number} */ function f(x) {return x}"); [EOL] } <line_num>: 2431,2434
public void testEnum23() throws Exception { [EOL]     testTypes("/**@enum*/ var E = {A: 1, B: 2};" + "/** @param {E} x \n* @return {string} */ function f(x) {return x}", "inconsistent return type\n" + "found   : E.<number>\n" + "required: string"); [EOL] } <line_num>: 2436,2442
public void testEnum24() throws Exception { [EOL]     testTypes("/**@enum {Object} */ var E = {A: {}};" + "/** @param {E} x \n* @return {!Object} */ function f(x) {return x}", "inconsistent return type\n" + "found   : E.<(Object|null|undefined)>\n" + "required: Object"); [EOL] } <line_num>: 2444,2450
public void testEnum25() throws Exception { [EOL]     testTypes("/**@enum {!Object} */ var E = {A: {}};" + "/** @param {E} x \n* @return {!Object} */ function f(x) {return x}"); [EOL] } <line_num>: 2452,2455
public void testEnum26() throws Exception { [EOL]     testTypes("var a = {}; /**@enum*/ a.B = {A: 1, B: 2};" + "/** @param {a.B} x \n* @return {number} */ function f(x) {return x}"); [EOL] } <line_num>: 2457,2460
public void testEnum27() throws Exception { [EOL]     testTypes("/** @enum */ var A = {B: 1, C: 2}; " + "function f(x) { return A == x; }"); [EOL] } <line_num>: 2462,2466
public void testEnum28() throws Exception { [EOL]     testTypes("/** @enum */ var A = {B: 1, C: 2}; " + "function f(x) { return A.B == x; }"); [EOL] } <line_num>: 2468,2472
public void testEnum29() throws Exception { [EOL]     testTypes("/** @enum */ var A = {B: 1, C: 2}; " + "/** @return {number} */ function f() { return A; }", "inconsistent return type\n" + "found   : enum{A}\n" + "required: number"); [EOL] } <line_num>: 2474,2480
public void testEnum30() throws Exception { [EOL]     testTypes("/** @enum */ var A = {B: 1, C: 2}; " + "/** @return {number} */ function f() { return A.B; }"); [EOL] } <line_num>: 2482,2485
public void testEnum31() throws Exception { [EOL]     testTypes("/** @enum */ var A = {B: 1, C: 2}; " + "/** @return {A} */ function f() { return A; }", "inconsistent return type\n" + "found   : enum{A}\n" + "required: A.<number>"); [EOL] } <line_num>: 2487,2493
public void testEnum32() throws Exception { [EOL]     testTypes("/** @enum */ var A = {B: 1, C: 2}; " + "/** @return {A} */ function f() { return A.B; }"); [EOL] } <line_num>: 2495,2498
public void testEnum34() throws Exception { [EOL]     testTypes("/** @enum */ var A = {B: 1, C: 2}; " + "/** @param {number} x */ function f(x) { return x == A.B; }"); [EOL] } <line_num>: 2500,2503
public void testEnum35() throws Exception { [EOL]     testTypes("var a = a || {}; /** @enum */ a.b = {C: 1, D: 2};" + "/** @return {a.b} */ function f() { return a.b.C; }"); [EOL] } <line_num>: 2505,2508
public void testEnum36() throws Exception { [EOL]     testTypes("var a = a || {}; /** @enum */ a.b = {C: 1, D: 2};" + "/** @return {!a.b} */ function f() { return 1; }", "inconsistent return type\n" + "found   : number\n" + "required: a.b.<number>"); [EOL] } <line_num>: 2510,2516
public void testEnum37() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "/** @enum {number} */ goog.a = {};" + "/** @enum */ var b = goog.a;"); [EOL] } <line_num>: 2518,2523
public void testEnum38() throws Exception { [EOL]     testTypes("/** @enum {MyEnum} */ var MyEnum = {};" + "/** @param {MyEnum} x */ function f(x) {}", "Parse error. Cycle detected in inheritance chain " + "of type MyEnum"); [EOL] } <line_num>: 2525,2531
public void testEnum39() throws Exception { [EOL]     testTypes("/** @enum {Number} */ var MyEnum = {FOO: new Number(1)};" + "/** @param {MyEnum} x \n * @return {number} */" + "function f(x) { return x == MyEnum.FOO && MyEnum.FOO == x; }", "inconsistent return type\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 2533,2541
public void testEnum40() throws Exception { [EOL]     testTypes("/** @enum {Number} */ var MyEnum = {FOO: new Number(1)};" + "/** @param {number} x \n * @return {number} */" + "function f(x) { return x == MyEnum.FOO && MyEnum.FOO == x; }", "inconsistent return type\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 2543,2551
public void testAliasedEnum1() throws Exception { [EOL]     testTypes("/** @enum */ var YourEnum = {FOO: 3};" + "/** @enum */ var MyEnum = YourEnum;" + "/** @param {MyEnum} x */ function f(x) {} f(MyEnum.FOO);"); [EOL] } <line_num>: 2553,2558
public void testAliasedEnum2() throws Exception { [EOL]     testTypes("/** @enum */ var YourEnum = {FOO: 3};" + "/** @enum */ var MyEnum = YourEnum;" + "/** @param {YourEnum} x */ function f(x) {} f(MyEnum.FOO);"); [EOL] } <line_num>: 2560,2565
public void testAliasedEnum3() throws Exception { [EOL]     testTypes("/** @enum */ var YourEnum = {FOO: 3};" + "/** @enum */ var MyEnum = YourEnum;" + "/** @param {MyEnum} x */ function f(x) {} f(YourEnum.FOO);"); [EOL] } <line_num>: 2567,2572
public void testAliasedEnum4() throws Exception { [EOL]     testTypes("/** @enum */ var YourEnum = {FOO: 3};" + "/** @enum */ var MyEnum = YourEnum;" + "/** @param {YourEnum} x */ function f(x) {} f(YourEnum.FOO);"); [EOL] } <line_num>: 2574,2579
public void testAliasedEnum5() throws Exception { [EOL]     testTypes("/** @enum */ var YourEnum = {FOO: 3};" + "/** @enum */ var MyEnum = YourEnum;" + "/** @param {string} x */ function f(x) {} f(MyEnum.FOO);", "actual parameter 1 of f does not match formal parameter\n" + "found   : YourEnum.<number>\n" + "required: string"); [EOL] } <line_num>: 2581,2589
public void testBackwardsEnumUse1() throws Exception { [EOL]     testTypes("/** @return {string} */ function f() { return MyEnum.FOO; }" + "/** @enum {string} */ var MyEnum = {FOO: 'x'};"); [EOL] } <line_num>: 2591,2595
public void testBackwardsEnumUse2() throws Exception { [EOL]     testTypes("/** @return {number} */ function f() { return MyEnum.FOO; }" + "/** @enum {string} */ var MyEnum = {FOO: 'x'};", "inconsistent return type\n" + "found   : MyEnum.<string>\n" + "required: number"); [EOL] } <line_num>: 2597,2604
public void testBackwardsEnumUse3() throws Exception { [EOL]     testTypes("/** @return {string} */ function f() { return MyEnum.FOO; }" + "/** @enum {string} */ var YourEnum = {FOO: 'x'};" + "/** @enum {string} */ var MyEnum = YourEnum;"); [EOL] } <line_num>: 2606,2611
public void testBackwardsEnumUse4() throws Exception { [EOL]     testTypes("/** @return {number} */ function f() { return MyEnum.FOO; }" + "/** @enum {string} */ var YourEnum = {FOO: 'x'};" + "/** @enum {string} */ var MyEnum = YourEnum;", "inconsistent return type\n" + "found   : YourEnum.<string>\n" + "required: number"); [EOL] } <line_num>: 2613,2621
public void testBackwardsEnumUse5() throws Exception { [EOL]     testTypes("/** @return {string} */ function f() { return MyEnum.BAR; }" + "/** @enum {string} */ var YourEnum = {FOO: 'x'};" + "/** @enum {string} */ var MyEnum = YourEnum;", "element BAR does not exist on this enum"); [EOL] } <line_num>: 2623,2629
public void testBackwardsConstructor1() throws Exception { [EOL]     testTypes("function f() { (new Foo(true)); }" + "/** \n * @constructor \n * @param {number} x */" + "var Foo = function(x) {};", "actual parameter 1 of Foo does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 2631,2639
public void testBackwardsConstructor2() throws Exception { [EOL]     testTypes("function f() { (new Foo(true)); }" + "/** \n * @constructor \n * @param {number} x */" + "var YourFoo = function(x) {};" + "/** \n * @constructor \n * @param {number} x */" + "var Foo = YourFoo;", "actual parameter 1 of Foo does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 2641,2651
public void testMinimalConstructorAnnotation() throws Exception { [EOL]     testTypes("/** @constructor */function Foo(){}"); [EOL] } <line_num>: 2653,2655
public void testGoodExtends1() throws Exception { [EOL]     testTypes("/** @constructor */function base() {}\n" + "/** @constructor\n * @extends {base} */function derived() {}\n"); [EOL] } <line_num>: 2657,2661
public void testGoodExtends2() throws Exception { [EOL]     testTypes("/** @constructor\n * @extends base */function derived() {}\n" + "/** @constructor */function base() {}\n"); [EOL] } <line_num>: 2663,2666
public void testGoodExtends3() throws Exception { [EOL]     testTypes("/** @constructor\n * @extends {Object} */function base() {}\n" + "/** @constructor\n * @extends {base} */function derived() {}\n"); [EOL] } <line_num>: 2668,2671
public void testGoodExtends4() throws Exception { [EOL]     Node n = parseAndTypeCheck("var goog = {};\n" + "/** @constructor */goog.Base = function(){};\n" + "/** @constructor\n" + "  * @extends {goog.Base} */goog.Derived = function(){};\n"); [EOL]     Node subTypeName = n.getLastChild().getLastChild().getFirstChild(); [EOL]     assertEquals("goog.Derived", subTypeName.getQualifiedName()); [EOL]     FunctionType subCtorType = (FunctionType) subTypeName.getNext().getJSType(); [EOL]     assertEquals("goog.Derived", subCtorType.getInstanceType().toString()); [EOL]     JSType superType = subCtorType.getPrototype().getImplicitPrototype(); [EOL]     assertEquals("goog.Base", superType.toString()); [EOL] } <line_num>: 2673,2691
public void testGoodExtends5() throws Exception { [EOL]     testTypes("/** @constructor */function base() {}\n" + "/** @extends {base}\n * @constructor */function derived() {}\n"); [EOL] } <line_num>: 2693,2697
public void testGoodExtends6() throws Exception { [EOL]     testFunctionType(CLOSURE_DEFS + "/** @constructor */function base() {}\n" + "/** @return {number} */ " + "  base.prototype.foo = function() { return 1; };\n" + "/** @extends {base}\n * @constructor */function derived() {}\n" + "goog.inherits(derived, base);", "derived.superClass_.foo", "function (this:base): number"); [EOL] } <line_num>: 2699,2709
public void testGoodExtends7() throws Exception { [EOL]     testFunctionType("Function.prototype.inherits = function(x) {};" + "/** @constructor */function base() {}\n" + "/** @extends {base}\n * @constructor */function derived() {}\n" + "derived.inherits(base);", "(new derived).constructor", "function (new:derived, ...[?]): ?"); [EOL] } <line_num>: 2711,2719
public void testGoodExtends8() throws Exception { [EOL]     testTypes("/** @constructor \n @extends {Base} */ function Sub() {}" + "/** @return {number} */ function f() { return (new Sub()).foo; }" + "/** @constructor */ function Base() {}" + "/** @type {boolean} */ Base.prototype.foo = true;", "inconsistent return type\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 2721,2729
public void testGoodExtends9() throws Exception { [EOL]     testTypes("/** @constructor */ function Super() {}" + "Super.prototype.foo = function() {};" + "/** @constructor \n * @extends {Super} */ function Sub() {}" + "Sub.prototype = new Super();" + "/** @override */ Sub.prototype.foo = function() {};"); [EOL] } <line_num>: 2731,2738
public void testGoodExtends10() throws Exception { [EOL]     testTypes("/** @constructor */ function Super() {}" + "/** @constructor \n * @extends {Super} */ function Sub() {}" + "Sub.prototype = new Super();" + "/** @return {Super} */ function foo() { return new Sub(); }"); [EOL] } <line_num>: 2740,2746
public void testGoodExtends11() throws Exception { [EOL]     testTypes("/** @constructor */ function Super() {}" + "/** @param {boolean} x */ Super.prototype.foo = function(x) {};" + "/** @constructor \n * @extends {Super} */ function Sub() {}" + "Sub.prototype = new Super();" + "(new Sub()).foo(0);", "actual parameter 1 of Super.prototype.foo " + "does not match formal parameter\n" + "found   : number\n" + "required: boolean"); [EOL] } <line_num>: 2748,2759
public void testBadExtends1() throws Exception { [EOL]     testTypes("/** @constructor */function base() {}\n" + "/** @constructor\n * @extends {not_base} */function derived() {}\n", "Bad type annotation. Unknown type not_base"); [EOL] } <line_num>: 2761,2765
public void testBadExtends2() throws Exception { [EOL]     testTypes("/** @constructor */function base() {\n" + "/** @type {!Number}*/\n" + "this.baseMember = new Number(4);\n" + "}\n" + "/** @constructor\n" + "  * @extends {base} */function derived() {}\n" + "/** @param {!String} x*/\n" + "function foo(x){ }\n" + "/** @type {!derived}*/var y;\n" + "foo(y.baseMember);\n", "actual parameter 1 of foo does not match formal parameter\n" + "found   : Number\n" + "required: String"); [EOL] } <line_num>: 2767,2781
public void testBadExtends3() throws Exception { [EOL]     testTypes("/** @extends {Object} */function base() {}", "@extends used without @constructor or @interface for base"); [EOL] } <line_num>: 2783,2786
public void testLateExtends() throws Exception { [EOL]     testTypes(CLOSURE_DEFS + "/** @constructor */ function Foo() {}\n" + "Foo.prototype.foo = function() {};\n" + "/** @constructor */function Bar() {}\n" + "goog.inherits(Foo, Bar);\n", "Missing @extends tag on type Foo"); [EOL] } <line_num>: 2788,2796
public void testSuperclassMatch() throws Exception { [EOL]     compiler.getOptions().setCodingConvention(new GoogleCodingConvention()); [EOL]     testTypes("/** @constructor */ var Foo = function() {};\n" + "/** @constructor \n @extends Foo */ var Bar = function() {};\n" + "Bar.inherits = function(x){};" + "Bar.inherits(Foo);\n"); [EOL] } <line_num>: 2798,2804
public void testSuperclassMatchWithMixin() throws Exception { [EOL]     compiler.getOptions().setCodingConvention(new GoogleCodingConvention()); [EOL]     testTypes("/** @constructor */ var Foo = function() {};\n" + "/** @constructor */ var Baz = function() {};\n" + "/** @constructor \n @extends Foo */ var Bar = function() {};\n" + "Bar.inherits = function(x){};" + "Bar.mixin = function(y){};" + "Bar.inherits(Foo);\n" + "Bar.mixin(Baz);\n"); [EOL] } <line_num>: 2806,2815
public void testSuperclassMismatch1() throws Exception { [EOL]     compiler.getOptions().setCodingConvention(new GoogleCodingConvention()); [EOL]     testTypes("/** @constructor */ var Foo = function() {};\n" + "/** @constructor \n @extends Object */ var Bar = function() {};\n" + "Bar.inherits = function(x){};" + "Bar.inherits(Foo);\n", "Missing @extends tag on type Bar"); [EOL] } <line_num>: 2817,2824
public void testSuperclassMismatch2() throws Exception { [EOL]     compiler.getOptions().setCodingConvention(new GoogleCodingConvention()); [EOL]     testTypes("/** @constructor */ var Foo = function(){};\n" + "/** @constructor */ var Bar = function(){};\n" + "Bar.inherits = function(x){};" + "Bar.inherits(Foo);", "Missing @extends tag on type Bar"); [EOL] } <line_num>: 2826,2833
public void testSuperClassDefinedAfterSubClass1() throws Exception { [EOL]     testTypes("/** @constructor \n * @extends {Base} */ function A() {}" + "/** @constructor \n * @extends {Base} */ function B() {}" + "/** @constructor */ function Base() {}" + "/** @param {A|B} x \n * @return {B|A} */ " + "function foo(x) { return x; }"); [EOL] } <line_num>: 2835,2842
public void testSuperClassDefinedAfterSubClass2() throws Exception { [EOL]     testTypes("/** @constructor \n * @extends {Base} */ function A() {}" + "/** @constructor \n * @extends {Base} */ function B() {}" + "/** @param {A|B} x \n * @return {B|A} */ " + "function foo(x) { return x; }" + "/** @constructor */ function Base() {}"); [EOL] } <line_num>: 2844,2851
public void testDirectPrototypeAssignment1() throws Exception { [EOL]     testTypes("/** @constructor */ function Base() {}" + "Base.prototype.foo = 3;" + "/** @constructor \n * @extends {Base} */ function A() {}" + "A.prototype = new Base();" + "/** @return {string} */ function foo() { return (new A).foo; }", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 2853,2863
public void testDirectPrototypeAssignment2() throws Exception { [EOL]     testTypes("/** @constructor */ function Base() {}" + "/** @constructor \n * @extends {Base} */ function A() {}" + "A.prototype = new Base();" + "A.prototype.foo = 3;" + "/** @return {string} */ function foo() { return (new Base).foo; }"); [EOL] } <line_num>: 2865,2874
public void testGoodImplements1() throws Exception { [EOL]     testTypes("/** @interface */function Disposable() {}\n" + "/** @implements {Disposable}\n * @constructor */function f() {}"); [EOL] } <line_num>: 2876,2879
public void testGoodImplements2() throws Exception { [EOL]     testTypes("/** @interface */function Base1() {}\n" + "/** @interface */function Base2() {}\n" + "/** @constructor\n" + " * @implements {Base1}\n" + " * @implements {Base2}\n" + " */ function derived() {}"); [EOL] } <line_num>: 2881,2888
public void testBadImplements1() throws Exception { [EOL]     testTypes("/** @interface */function Base1() {}\n" + "/** @interface */function Base2() {}\n" + "/** @constructor\n" + " * @implements {nonExistent}\n" + " * @implements {Base2}\n" + " */ function derived() {}", "Bad type annotation. Unknown type nonExistent"); [EOL] } <line_num>: 2890,2898
public void testBadImplements2() throws Exception { [EOL]     testTypes("/** @interface */function Disposable() {}\n" + "/** @implements {Disposable}\n */function f() {}", "@implements used without @constructor for f"); [EOL] } <line_num>: 2900,2904
public void testBadImplements3() throws Exception { [EOL]     testTypes("/** @interface */function Disposable() {}\n" + "/** @implements {Disposable}\n * @interface */function f() {}", "f cannot implement this type; an interface can only extend, " + "but not implement interfaces"); [EOL] } <line_num>: 2906,2911
public void testInterfaceExtends() throws Exception { [EOL]     testTypes("/** @interface */function A() {}\n" + "/** @interface \n * @extends {A} */function B() {}\n" + "/** @constructor\n" + " * @implements {B}\n" + " */ function derived() {}"); [EOL] } <line_num>: 2913,2919
public void testBadInterfaceExtends1() throws Exception { [EOL]     testTypes("/** @interface \n * @extends {nonExistent} */function A() {}", "Bad type annotation. Unknown type nonExistent"); [EOL] } <line_num>: 2921,2924
public void testBadInterfaceExtends2() throws Exception { [EOL]     testTypes("/** @constructor */function A() {}\n" + "/** @interface \n * @extends {A} */function B() {}", "B cannot extend this type; interfaces can only extend interfaces"); [EOL] } <line_num>: 2926,2930
public void testBadInterfaceExtends3() throws Exception { [EOL]     testTypes("/** @interface */function A() {}\n" + "/** @constructor \n * @extends {A} */function B() {}", "B cannot extend this type; constructors can only extend constructors"); [EOL] } <line_num>: 2932,2936
public void testBadInterfaceExtends4() throws Exception { [EOL]     testTypes("/** @interface */function A() {}\n" + "/** @constructor */function B() {}\n" + "B.prototype = A;"); [EOL] } <line_num>: 2938,2945
public void testBadInterfaceExtends5() throws Exception { [EOL]     testTypes("/** @constructor */function A() {}\n" + "/** @interface */function B() {}\n" + "B.prototype = A;"); [EOL] } <line_num>: 2947,2954
public void testBadImplementsAConstructor() throws Exception { [EOL]     testTypes("/** @constructor */function A() {}\n" + "/** @constructor \n * @implements {A} */function B() {}", "can only implement interfaces"); [EOL] } <line_num>: 2956,2960
public void testBadImplementsNonInterfaceType() throws Exception { [EOL]     testTypes("/** @constructor \n * @implements {Boolean} */function B() {}", "can only implement interfaces"); [EOL] } <line_num>: 2962,2965
public void testBadImplementsNonObjectType() throws Exception { [EOL]     testTypes("/** @constructor \n * @implements {string} */function S() {}", "can only implement interfaces"); [EOL] } <line_num>: 2967,2970
public void testInterfaceAssignment1() throws Exception { [EOL]     testTypes("/** @interface */var I = function() {};\n" + "/** @constructor\n@implements {I} */var T = function() {};\n" + "var t = new T();\n" + "/** @type {!I} */var i = t;"); [EOL] } <line_num>: 2972,2977
public void testInterfaceAssignment2() throws Exception { [EOL]     testTypes("/** @interface */var I = function() {};\n" + "/** @constructor */var T = function() {};\n" + "var t = new T();\n" + "/** @type {!I} */var i = t;", "initializing variable\n" + "found   : T\n" + "required: I"); [EOL] } <line_num>: 2979,2987
public void testInterfaceAssignment3() throws Exception { [EOL]     testTypes("/** @interface */var I = function() {};\n" + "/** @constructor\n@implements {I} */var T = function() {};\n" + "var t = new T();\n" + "/** @type {I|number} */var i = t;"); [EOL] } <line_num>: 2989,2994
public void testInterfaceAssignment4() throws Exception { [EOL]     testTypes("/** @interface */var I1 = function() {};\n" + "/** @interface */var I2 = function() {};\n" + "/** @constructor\n@implements {I1} */var T = function() {};\n" + "var t = new T();\n" + "/** @type {I1|I2} */var i = t;"); [EOL] } <line_num>: 2996,3002
public void testInterfaceAssignment5() throws Exception { [EOL]     testTypes("/** @interface */var I1 = function() {};\n" + "/** @interface */var I2 = function() {};\n" + "/** @constructor\n@implements {I1}\n@implements {I2}*/" + "var T = function() {};\n" + "var t = new T();\n" + "/** @type {I1} */var i1 = t;\n" + "/** @type {I2} */var i2 = t;\n"); [EOL] } <line_num>: 3004,3012
public void testInterfaceAssignment6() throws Exception { [EOL]     testTypes("/** @interface */var I1 = function() {};\n" + "/** @interface */var I2 = function() {};\n" + "/** @constructor\n@implements {I1} */var T = function() {};\n" + "/** @type {!I1} */var i1 = new T();\n" + "/** @type {!I2} */var i2 = i1;\n", "initializing variable\n" + "found   : I1\n" + "required: I2"); [EOL] } <line_num>: 3014,3023
public void testInterfaceAssignment7() throws Exception { [EOL]     testTypes("/** @interface */var I1 = function() {};\n" + "/** @interface\n@extends {I1}*/var I2 = function() {};\n" + "/** @constructor\n@implements {I2}*/var T = function() {};\n" + "var t = new T();\n" + "/** @type {I1} */var i1 = t;\n" + "/** @type {I2} */var i2 = t;\n" + "i1 = i2;\n"); [EOL] } <line_num>: 3025,3033
public void testInterfaceAssignment8() throws Exception { [EOL]     testTypes("/** @interface */var I = function() {};\n" + "/** @type {I} */var i;\n" + "/** @type {Object} */var o = i;"); [EOL] } <line_num>: 3035,3039
public void testInterfaceAssignment9() throws Exception { [EOL]     testTypes("/** @interface */var I = function() {};\n" + "/** @return {I?} */function f() { return null; }\n" + "/** @type {!I} */var i = f();\n", "initializing variable\n" + "found   : (I|null|undefined)\n" + "required: I"); [EOL] } <line_num>: 3041,3048
public void testInterfaceAssignment10() throws Exception { [EOL]     testTypes("/** @interface */var I1 = function() {};\n" + "/** @interface */var I2 = function() {};\n" + "/** @constructor\n@implements {I2} */var T = function() {};\n" + "/** @return {!I1|!I2} */function f() { return new T(); }\n" + "/** @type {!I1} */var i1 = f();\n", "initializing variable\n" + "found   : (I1|I2)\n" + "required: I1"); [EOL] } <line_num>: 3050,3059
public void testInterfaceAssignment11() throws Exception { [EOL]     testTypes("/** @interface */var I1 = function() {};\n" + "/** @interface */var I2 = function() {};\n" + "/** @constructor */var T = function() {};\n" + "/** @return {!I1|!I2|!T} */function f() { return new T(); }\n" + "/** @type {!I1} */var i1 = f();\n", "initializing variable\n" + "found   : (I1|I2|T)\n" + "required: I1"); [EOL] } <line_num>: 3061,3070
public void testInterfaceAssignment12() throws Exception { [EOL]     testTypes("/** @interface */var I = function() {};\n" + "/** @constructor\n@implements{I}*/var T1 = function() {};\n" + "/** @constructor\n@extends {T1}*/var T2 = function() {};\n" + "/** @return {I} */function f() { return new T2(); }"); [EOL] } <line_num>: 3072,3077
public void testInterfaceAssignment13() throws Exception { [EOL]     testTypes("/** @interface */var I = function() {};\n" + "/** @constructor\n@implements {I}*/var T = function() {};\n" + "/** @constructor */function Super() {};\n" + "/** @return {I} */Super.prototype.foo = " + "function() { return new T(); };\n" + "/** @constructor\n@extends {Super} */function Sub() {}\n" + "/** @override\n@return {T} */Sub.prototype.foo = " + "function() { return new T(); };\n"); [EOL] } <line_num>: 3079,3088
public void testGetprop1() throws Exception { [EOL]     testTypes("/** @return {void}*/function foo(){foo().bar;}", "No properties on this expression\n" + "found   : undefined\n" + "required: Object"); [EOL] } <line_num>: 3090,3095
public void testArrayAccess1() throws Exception { [EOL]     testTypes("var a = []; var b = a['hi'];"); [EOL] } <line_num>: 3097,3099
public void testArrayAccess2() throws Exception { [EOL]     testTypes("var a = []; var b = a[[1,2]];", "array access\n" + "found   : Array\n" + "required: number"); [EOL] } <line_num>: 3101,3106
public void testArrayAccess3() throws Exception { [EOL]     testTypes("var bar = [];" + "/** @return {void} */function baz(){};" + "var foo = bar[baz()];", "array access\n" + "found   : undefined\n" + "required: number"); [EOL] } <line_num>: 3108,3115
public void testArrayAccess4() throws Exception { [EOL]     testTypes("/**@return {!Array}*/function foo(){};var bar = foo()[foo()];", "array access\n" + "found   : Array\n" + "required: number"); [EOL] } <line_num>: 3117,3122
public void testArrayAccess6() throws Exception { [EOL]     testTypes("var bar = null[1];", "only arrays or objects can be accessed\n" + "found   : null\n" + "required: Object"); [EOL] } <line_num>: 3124,3129
public void testArrayAccess7() throws Exception { [EOL]     testTypes("var bar = void 0; bar[0];", "only arrays or objects can be accessed\n" + "found   : undefined\n" + "required: Object"); [EOL] } <line_num>: 3131,3136
public void testArrayAccess8() throws Exception { [EOL]     testTypes("var bar = void 0; bar[0]; bar[1];", "only arrays or objects can be accessed\n" + "found   : undefined\n" + "required: Object"); [EOL] } <line_num>: 3138,3145
public void testPropAccess() throws Exception { [EOL]     testTypes("/** @param {*} x */var f = function(x) {\n" + "var o = String(x);\n" + "if (typeof o['a'] != 'undefined') { return o['a']; }\n" + "return null;\n" + "};"); [EOL] } <line_num>: 3147,3153
public void testPropAccess2() throws Exception { [EOL]     testTypes("var bar = void 0; bar.baz;", "No properties on this expression\n" + "found   : undefined\n" + "required: Object"); [EOL] } <line_num>: 3155,3160
public void testPropAccess3() throws Exception { [EOL]     testTypes("var bar = void 0; bar.baz; bar.bax;", "No properties on this expression\n" + "found   : undefined\n" + "required: Object"); [EOL] } <line_num>: 3162,3169
public void testPropAccess4() throws Exception { [EOL]     testTypes("/** @param {*} x */ function f(x) { return x['hi']; }"); [EOL] } <line_num>: 3171,3173
public void testSwitchCase1() throws Exception { [EOL]     testTypes("/**@type number*/var a;" + "/**@type string*/var b;" + "switch(a){case b:;}", "case expression doesn't match switch\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 3175,3182
public void testSwitchCase2() throws Exception { [EOL]     testTypes("var a = null; switch (typeof a) { case 'foo': }"); [EOL] } <line_num>: 3184,3186
public void testVar1() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("/** @type {(string,null)} */var a = null"); [EOL]     assertTypeEquals(createUnionType(STRING_TYPE, NULL_TYPE), p.scope.getVar("a").getType()); [EOL] } <line_num>: 3188,3194
public void testVar2() throws Exception { [EOL]     testTypes("/** @type {Function} */ var a = function(){}"); [EOL] } <line_num>: 3196,3198
public void testVar3() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("var a = 3;"); [EOL]     assertTypeEquals(NUMBER_TYPE, p.scope.getVar("a").getType()); [EOL] } <line_num>: 3200,3204
public void testVar4() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("var a = 3; a = 'string';"); [EOL]     assertTypeEquals(createUnionType(STRING_TYPE, NUMBER_TYPE), p.scope.getVar("a").getType()); [EOL] } <line_num>: 3206,3212
public void testVar5() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @type string */goog.foo = 'hello';" + "/** @type number */var a = goog.foo;", "initializing variable\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 3214,3221
public void testVar6() throws Exception { [EOL]     testTypes("function f() {" + "  return function() {" + "    /** @type {!Date} */" + "    var a = 7;" + "  };" + "}", "initializing variable\n" + "found   : number\n" + "required: Date"); [EOL] } <line_num>: 3223,3234
public void testVar7() throws Exception { [EOL]     testTypes("/** @type number */var a, b;", "declaration of multiple variables with shared type information"); [EOL] } <line_num>: 3236,3239
public void testVar8() throws Exception { [EOL]     testTypes("var a, b;"); [EOL] } <line_num>: 3241,3243
public void testVar9() throws Exception { [EOL]     testTypes("/** @enum */var a;", "enum initializer must be an object literal or an enum"); [EOL] } <line_num>: 3245,3248
public void testVar10() throws Exception { [EOL]     testTypes("/** @type !Number */var foo = 'abc';", "initializing variable\n" + "found   : string\n" + "required: Number"); [EOL] } <line_num>: 3250,3255
public void testVar11() throws Exception { [EOL]     testTypes("var /** @type !Date */foo = 'abc';", "initializing variable\n" + "found   : string\n" + "required: Date"); [EOL] } <line_num>: 3257,3262
public void testVar12() throws Exception { [EOL]     testTypes("var /** @type !Date */foo = 'abc', " + "/** @type !RegExp */bar = 5;", new String[] { "initializing variable\n" + "found   : string\n" + "required: Date", "initializing variable\n" + "found   : number\n" + "required: RegExp" }); [EOL] } <line_num>: 3264,3274
public void testVar13() throws Exception { [EOL]     testTypes("var /** @type number */a,a;"); [EOL] } <line_num>: 3276,3279
public void testVar14() throws Exception { [EOL]     testTypes("/** @return {number} */ function f() { var x; return x; }", "inconsistent return type\n" + "found   : undefined\n" + "required: number"); [EOL] } <line_num>: 3281,3286
public void testVar15() throws Exception { [EOL]     testTypes("/** @return {number} */" + "function f() { var x = x || {}; return x; }", "inconsistent return type\n" + "found   : {}\n" + "required: number"); [EOL] } <line_num>: 3288,3294
public void testAssign1() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @type number */goog.foo = 'hello';", "assignment to property foo of goog\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 3296,3302
public void testAssign2() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @type number */goog.foo = 3;" + "goog.foo = 'hello';", "assignment to property foo of goog\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 3304,3311
public void testAssign3() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @type number */goog.foo = 3;" + "goog.foo = 4;"); [EOL] } <line_num>: 3313,3317
public void testAssign4() throws Exception { [EOL]     testTypes("var goog = {};" + "goog.foo = 3;" + "goog.foo = 'hello';"); [EOL] } <line_num>: 3319,3323
public void testAssignInference() throws Exception { [EOL]     testTypes("/**" + " * @param {Array} x" + " * @return {number}" + " */" + "function f(x) {" + "  var y = null;" + "  y = x[0];" + "  if (y == null) { return 4; } else { return 6; }" + "}"); [EOL] } <line_num>: 3325,3336
public void testOr1() throws Exception { [EOL]     testTypes("/** @type number */var a;" + "/** @type number */var b;" + "a + b || undefined;"); [EOL] } <line_num>: 3338,3342
public void testOr2() throws Exception { [EOL]     testTypes("/** @type number */var a;" + "/** @type number */var b;" + "/** @type number */var c = a + b || undefined;", "initializing variable\n" + "found   : (number|undefined)\n" + "required: number"); [EOL] } <line_num>: 3344,3351
public void testOr3() throws Exception { [EOL]     testTypes("/** @type {(number, undefined)} */var a;" + "/** @type number */var c = a || 3;"); [EOL] } <line_num>: 3353,3356
public void testOr4() throws Exception { [EOL]     testTypes("/**@type {number} */var x;x=null || \"a\";", "assignment\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 3363,3368
public void testOr5() throws Exception { [EOL]     testTypes("/**@type {number} */var x;x=undefined || \"a\";", "assignment\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 3373,3378
public void testAnd1() throws Exception { [EOL]     testTypes("/** @type number */var a;" + "/** @type number */var b;" + "a + b && undefined;"); [EOL] } <line_num>: 3380,3384
public void testAnd2() throws Exception { [EOL]     testTypes("/** @type number */var a;" + "/** @type number */var b;" + "/** @type number */var c = a + b && undefined;", "initializing variable\n" + "found   : (number|undefined)\n" + "required: number"); [EOL] } <line_num>: 3386,3393
public void testAnd3() throws Exception { [EOL]     testTypes("/** @type {(!Array, undefined)} */var a;" + "/** @type number */var c = a && undefined;", "initializing variable\n" + "found   : undefined\n" + "required: number"); [EOL] } <line_num>: 3395,3401
public void testAnd4() throws Exception { [EOL]     testTypes("/** @param {number} x */function f(x){};\n" + "/** @type null */var x; /** @type {number?} */var y;\n" + "if (x && y) { f(y) }"); [EOL] } <line_num>: 3403,3407
public void testAnd5() throws Exception { [EOL]     testTypes("/** @param {number} x\n@param {string} y*/function f(x,y){};\n" + "/** @type {number?} */var x; /** @type {string?} */var y;\n" + "if (x && y) { f(x, y) }"); [EOL] } <line_num>: 3409,3413
public void testAnd6() throws Exception { [EOL]     testTypes("/** @param {number} x */function f(x){};\n" + "/** @type {number|undefined} */var x;\n" + "if (x && f(x)) { f(x) }"); [EOL] } <line_num>: 3415,3419
public void testAnd7() throws Exception { [EOL]     testTypes("/** @type null */var x; if (x && x) {}"); [EOL] } <line_num>: 3421,3427
public void testHook() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){ var x=foo()?a:b; }"); [EOL] } <line_num>: 3429,3431
public void testHookRestrictsType1() throws Exception { [EOL]     testTypes("/** @return {(string,null)} */" + "function f() { return null;}" + "/** @type {(string,null)} */ var a = f();" + "/** @type string */" + "var b = a ? a : 'default';"); [EOL] } <line_num>: 3433,3439
public void testHookRestrictsType2() throws Exception { [EOL]     testTypes("/** @type {String} */" + "var a = null;" + "/** @type (null|undefined) */" + "var b = a ? null : a;"); [EOL] } <line_num>: 3441,3446
public void testHookRestrictsType3() throws Exception { [EOL]     testTypes("/** @type {String} */" + "var a;" + "/** @type (null|undefined) */" + "var b = (!a) ? a : null;"); [EOL] } <line_num>: 3448,3453
public void testHookRestrictsType4() throws Exception { [EOL]     testTypes("/** @type {(boolean,undefined)} */" + "var a;" + "/** @type boolean */" + "var b = a != null ? a : true;"); [EOL] } <line_num>: 3455,3460
public void testHookRestrictsType5() throws Exception { [EOL]     testTypes("/** @type {(boolean,undefined)} */" + "var a;" + "/** @type {(undefined)} */" + "var b = a == null ? a : undefined;"); [EOL] } <line_num>: 3462,3467
public void testHookRestrictsType6() throws Exception { [EOL]     testTypes("/** @type {(number,null,undefined)} */" + "var a;" + "/** @type {number} */" + "var b = a == null ? 5 : a;"); [EOL] } <line_num>: 3469,3474
public void testHookRestrictsType7() throws Exception { [EOL]     testTypes("/** @type {(number,null,undefined)} */" + "var a;" + "/** @type {number} */" + "var b = a == undefined ? 5 : a;"); [EOL] } <line_num>: 3476,3481
public void testWhileRestrictsType1() throws Exception { [EOL]     testTypes("/** @param {null} x */ function g(x) {}" + "/** @param {number?} x */\n" + "function f(x) {\n" + "while (x) {\n" + "if (g(x)) { x = 1; }\n" + "x = x-1;\n}\n}", "actual parameter 1 of g does not match formal parameter\n" + "found   : number\n" + "required: null"); [EOL] } <line_num>: 3483,3493
public void testWhileRestrictsType2() throws Exception { [EOL]     testTypes("/** @param {number?} x\n@return {number}*/\n" + "function f(x) {\n/** @type {number} */var y = 0;" + "while (x) {\n" + "y = x;\n" + "x = x-1;\n}\n" + "return y;}"); [EOL] } <line_num>: 3495,3502
public void testHigherOrderFunctions1() throws Exception { [EOL]     testTypes("/** @type {function(number)} */var f;" + "f(true);", "actual parameter 1 of f does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 3504,3511
public void testHigherOrderFunctions2() throws Exception { [EOL]     testTypes("/** @type {function():!Date} */var f;" + "/** @type boolean */var a = f();", "initializing variable\n" + "found   : Date\n" + "required: boolean"); [EOL] } <line_num>: 3513,3520
public void testHigherOrderFunctions3() throws Exception { [EOL]     testTypes("/** @type {function(this:Error):Date} */var f; new f", "cannot instantiate non-constructor"); [EOL] } <line_num>: 3522,3526
public void testHigherOrderFunctions4() throws Exception { [EOL]     testTypes("/** @type {function(this:Error,...[number]):Date} */var f; new f", "cannot instantiate non-constructor"); [EOL] } <line_num>: 3528,3532
public void testConstructorAlias1() throws Exception { [EOL]     testTypes("/** @constructor */ var Foo = function() {};" + "/** @type {number} */ Foo.prototype.bar = 3;" + "/** @constructor */ var FooAlias = Foo;" + "/** @return {string} */ function foo() { " + "  return (new FooAlias()).bar; }", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 3534,3544
public void testConstructorAlias2() throws Exception { [EOL]     testTypes("/** @constructor */ var Foo = function() {};" + "/** @constructor */ var FooAlias = Foo;" + "/** @type {number} */ FooAlias.prototype.bar = 3;" + "/** @return {string} */ function foo() { " + "  return (new Foo()).bar; }", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 3546,3556
public void testConstructorAlias3() throws Exception { [EOL]     testTypes("/** @constructor */ var Foo = function() {};" + "/** @type {number} */ Foo.prototype.bar = 3;" + "/** @constructor */ var FooAlias = Foo;" + "/** @return {string} */ function foo() { " + "  return (new FooAlias()).bar; }", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 3558,3568
public void testConstructorAlias4() throws Exception { [EOL]     testTypes("/** @constructor */ var Foo = function() {};" + "var FooAlias = Foo;" + "/** @type {number} */ FooAlias.prototype.bar = 3;" + "/** @return {string} */ function foo() { " + "  return (new Foo()).bar; }", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 3570,3580
public void testConstructorAlias5() throws Exception { [EOL]     testTypes("/** @constructor */ var Foo = function() {};" + "/** @constructor */ var FooAlias = Foo;" + "/** @return {FooAlias} */ function foo() { " + "  return new Foo(); }"); [EOL] } <line_num>: 3582,3588
public void testConstructorAlias6() throws Exception { [EOL]     testTypes("/** @constructor */ var Foo = function() {};" + "/** @constructor */ var FooAlias = Foo;" + "/** @return {Foo} */ function foo() { " + "  return new FooAlias(); }"); [EOL] } <line_num>: 3590,3596
public void testConstructorAlias7() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor */ goog.Foo = function() {};" + "/** @constructor */ goog.FooAlias = goog.Foo;" + "/** @return {number} */ function foo() { " + "  return new goog.FooAlias(); }", "inconsistent return type\n" + "found   : goog.Foo\n" + "required: number"); [EOL] } <line_num>: 3598,3608
public void testConstructorAlias8() throws Exception { [EOL]     testTypes("var goog = {};" + "/**\n * @param {number} x \n * @constructor */ " + "goog.Foo = function(x) {};" + "/**\n * @param {number} x \n * @constructor */ " + "goog.FooAlias = goog.Foo;" + "/** @return {number} */ function foo() { " + "  return new goog.FooAlias(1); }", "inconsistent return type\n" + "found   : goog.Foo\n" + "required: number"); [EOL] } <line_num>: 3610,3622
public void testConstructorAlias9() throws Exception { [EOL]     testTypes("var goog = {};" + "/**\n * @param {number} x \n * @constructor */ " + "goog.Foo = function(x) {};" + "/** @constructor */ goog.FooAlias = goog.Foo;" + "/** @return {number} */ function foo() { " + "  return new goog.FooAlias(1); }", "inconsistent return type\n" + "found   : goog.Foo\n" + "required: number"); [EOL] } <line_num>: 3624,3635
public void testConstructorAlias10() throws Exception { [EOL]     testTypes("/**\n * @param {number} x \n * @constructor */ " + "var Foo = function(x) {};" + "/** @constructor */ var FooAlias = Foo;" + "/** @return {number} */ function foo() { " + "  return new FooAlias(1); }", "inconsistent return type\n" + "found   : Foo\n" + "required: number"); [EOL] } <line_num>: 3637,3647
public void testClosure1() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @type {string|undefined} */var a;" + "/** @type string */" + "var b = goog.isDef(a) ? a : 'default';", null); [EOL] } <line_num>: 3649,3656
public void testClosure2() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @type {string|null} */var a;" + "/** @type string */" + "var b = goog.isNull(a) ? 'default' : a;", null); [EOL] } <line_num>: 3658,3665
public void testClosure3() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @type {string|null|undefined} */var a;" + "/** @type string */" + "var b = goog.isDefAndNotNull(a) ? a : 'default';", null); [EOL] } <line_num>: 3667,3674
public void testClosure4() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @type {string|undefined} */var a;" + "/** @type string */" + "var b = !goog.isDef(a) ? 'default' : a;", null); [EOL] } <line_num>: 3676,3683
public void testClosure5() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @type {string|null} */var a;" + "/** @type string */" + "var b = !goog.isNull(a) ? a : 'default';", null); [EOL] } <line_num>: 3685,3692
public void testClosure6() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @type {string|null|undefined} */var a;" + "/** @type string */" + "var b = !goog.isDefAndNotNull(a) ? 'default' : a;", null); [EOL] } <line_num>: 3694,3701
public void testReturn1() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){ return 3; }", "inconsistent return type\n" + "found   : number\n" + "required: undefined"); [EOL] } <line_num>: 3703,3708
public void testReturn2() throws Exception { [EOL]     testTypes("/**@return {!Number}*/function foo(){ return; }", "inconsistent return type\n" + "found   : undefined\n" + "required: Number"); [EOL] } <line_num>: 3710,3715
public void testReturn3() throws Exception { [EOL]     testTypes("/**@return {!Number}*/function foo(){ return 'abc'; }", "inconsistent return type\n" + "found   : string\n" + "required: Number"); [EOL] } <line_num>: 3717,3722
public void testReturn4() throws Exception { [EOL]     testTypes("/**@return {!Number}\n*/\n function a(){return new Array();}", "inconsistent return type\n" + "found   : Array\n" + "required: Number"); [EOL] } <line_num>: 3724,3729
public void testReturn5() throws Exception { [EOL]     testTypes("/** @param {number} n\n" + "@constructor */function n(n){return};"); [EOL] } <line_num>: 3731,3734
public void testReturn6() throws Exception { [EOL]     testTypes("/** @param {number} opt_a\n@return {string} */" + "function a(opt_a) { return opt_a }", "inconsistent return type\n" + "found   : (number|undefined)\n" + "required: string"); [EOL] } <line_num>: 3736,3743
public void testReturn7() throws Exception { [EOL]     testTypes("/** @constructor */var A = function() {};\n" + "/** @constructor */var B = function() {};\n" + "/** @return {!B} */A.f = function() { return 1; };", "inconsistent return type\n" + "found   : number\n" + "required: B"); [EOL] } <line_num>: 3745,3752
public void testReturn8() throws Exception { [EOL]     testTypes("/** @constructor */var A = function() {};\n" + "/** @constructor */var B = function() {};\n" + "/** @return {!B} */A.prototype.f = function() { return 1; };", "inconsistent return type\n" + "found   : number\n" + "required: B"); [EOL] } <line_num>: 3754,3761
public void testThis1() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor */goog.A = function(){};" + "/** @return {number} */goog.A.prototype.n = " + "  function() { return this };", "inconsistent return type\n" + "found   : goog.A\n" + "required: number"); [EOL] } <line_num>: 3763,3771
public void testThis2() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor */goog.A = function(){" + "  this.foo = null;" + "};" + "/** @return {number} */" + "goog.A.prototype.n = function() { return this.foo };", "inconsistent return type\n" + "found   : null\n" + "required: number"); [EOL] } <line_num>: 3773,3783
public void testThis3() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor */goog.A = function(){" + "  this.foo = null;" + "  this.foo = 5;" + "};"); [EOL] } <line_num>: 3785,3791
public void testThis4() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor */goog.A = function(){" + "  /** @type {string?} */this.foo = null;" + "};" + "/** @return {number} */goog.A.prototype.n = function() {" + "  return this.foo };", "inconsistent return type\n" + "found   : (null|string|undefined)\n" + "required: number"); [EOL] } <line_num>: 3793,3803
public void testThis5() throws Exception { [EOL]     testTypes("/** @this Date\n@return {number}*/function h() { return this }", "inconsistent return type\n" + "found   : Date\n" + "required: number"); [EOL] } <line_num>: 3805,3810
public void testThis6() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor\n@return {!Date} */" + "goog.A = function(){ return this };", "inconsistent return type\n" + "found   : goog.A\n" + "required: Date"); [EOL] } <line_num>: 3812,3819
public void testThis7() throws Exception { [EOL]     testTypes("/** @constructor */function A(){};" + "/** @return {number} */A.prototype.n = function() { return this };", "inconsistent return type\n" + "found   : A\n" + "required: number"); [EOL] } <line_num>: 3821,3827
public void testThis8() throws Exception { [EOL]     testTypes("/** @constructor */function A(){" + "  /** @type {string?} */this.foo = null;" + "};" + "/** @return {number} */A.prototype.n = function() {" + "  return this.foo };", "inconsistent return type\n" + "found   : (null|string|undefined)\n" + "required: number"); [EOL] } <line_num>: 3829,3838
public void testThis9() throws Exception { [EOL]     testTypes("/** @constructor */function A(){};" + "A.prototype.foo = 3;" + "/** @return {string} */ A.bar = function() { return this.foo; };"); [EOL] } <line_num>: 3840,3845
public void testThis10() throws Exception { [EOL]     testTypes("/** @constructor */function A(){};" + "A.prototype.foo = 3;" + "/** @this {A}\n@return {string} */" + "A.bar = function() { return this.foo; };", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 3847,3856
public void testGlobalThis1() throws Exception { [EOL]     testTypes("/** @constructor */ function Window() {}" + "/** @param {string} msg */ " + "Window.prototype.alert = function(msg) {};" + "this.alert(3);", "actual parameter 1 of Window.prototype.alert " + "does not match formal parameter\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 3858,3867
public void testGlobalThis2() throws Exception { [EOL]     testTypes("/** @constructor */ function Bindow() {}" + "/** @param {string} msg */ " + "Bindow.prototype.alert = function(msg) {};" + "this.alert = 3;" + "(new Bindow()).alert(this.alert)"); [EOL] } <line_num>: 3869,3875
public void testGlobalThis3() throws Exception { [EOL]     testTypes("/** @param {string} msg */ " + "function alert(msg) {};" + "this.alert(3);", "actual parameter 1 of global this.alert " + "does not match formal parameter\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 3877,3886
public void testGlobalThis4() throws Exception { [EOL]     testTypes("/** @param {string} msg */ " + "var alert = function(msg) {};" + "this.alert(3);", "actual parameter 1 of global this.alert " + "does not match formal parameter\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 3888,3897
public void testGlobalThis5() throws Exception { [EOL]     testTypes("function f() {" + "  /** @param {string} msg */ " + "  var alert = function(msg) {};" + "}" + "this.alert(3);", "Property alert never defined on global this"); [EOL] } <line_num>: 3899,3907
public void testGlobalThis6() throws Exception { [EOL]     testTypes("/** @param {string} msg */ " + "var alert = function(msg) {};" + "var x = 3;" + "x = 'msg';" + "this.alert(this.x);"); [EOL] } <line_num>: 3909,3916
public void testControlFlowRestrictsType1a() throws Exception { [EOL]     testTypes("/** @return {String?} */ function f() { return null; }\n" + "/** @type {String?} */ var a = f();\n" + "/** @type String */ var b = new String('foo');\n" + "/** @type (null|undefined) */ var c = null;\n" + "if (a) {\n" + "  b = a;\n" + "} else {\n" + "  c = a;\n" + "}"); [EOL] } <line_num>: 3918,3928
public void testControlFlowRestrictsType1b() throws Exception { [EOL]     testTypes("/** @return {!String|null} */ function f() { return null; }\n" + "/** @type {!String|null} */ var a = f();\n" + "/** @type String */ var b = new String('foo');\n" + "/** @type (null) */ var c = null;\n" + "if (a) {\n" + "  b = a;\n" + "} else {\n" + "  c = a;\n" + "}"); [EOL] } <line_num>: 3930,3940
public void testControlFlowRestrictsType1c() throws Exception { [EOL]     testTypes("/** @return {!String|undefined} */\n" + "function f() { return undefined; }\n" + "/** @type {!String|undefined} */ var a = f();\n" + "/** @type String */ var b = new String('foo');\n" + "/** @type undefined */ var c = undefined;\n" + "if (a) {\n" + "  b = a;\n" + "} else {\n" + "  c = a;\n" + "}"); [EOL] } <line_num>: 3942,3953
public void testControlFlowRestrictsType2() throws Exception { [EOL]     testTypes("/** @return {(string,null)} */ function f() { return null; }" + "/** @type {(string,null)} */ var a = f();" + "/** @type string */ var b = 'foo';" + "/** @type null */ var c = null;" + "if (a) {" + "  b = a;" + "} else {" + "  c = a;" + "}", "assignment\n" + "found   : (null|string)\n" + "required: null"); [EOL] } <line_num>: 3955,3968
public void testControlFlowRestrictsType3() throws Exception { [EOL]     testTypes("/** @type {(string,void)} */" + "var a;" + "/** @type string */" + "var b = 'foo';" + "if (a) {" + "  b = a;" + "}"); [EOL] } <line_num>: 3970,3978
public void testControlFlowRestrictsType4() throws Exception { [EOL]     testTypes("/** @param {string} a */ function f(a){}" + "/** @type {(string,undefined)} */ var a;" + "a && f(a);"); [EOL] } <line_num>: 3980,3984
public void testControlFlowRestrictsType5() throws Exception { [EOL]     testTypes("/** @param {undefined} a */ function f(a){}" + "/** @type {(!Array,undefined)} */ var a;" + "a || f(a);"); [EOL] } <line_num>: 3986,3990
public void testControlFlowRestrictsType6() throws Exception { [EOL]     testTypes("/** @param {undefined} x */ function f(x) {}" + "/** @type {(string,undefined)} */ var a;" + "a && f(a);", "actual parameter 1 of f does not match formal parameter\n" + "found   : string\n" + "required: undefined"); [EOL] } <line_num>: 3992,3999
public void testControlFlowRestrictsType7() throws Exception { [EOL]     testTypes("/** @param {undefined} x */ function f(x) {}" + "/** @type {(string,undefined)} */ var a;" + "a && f(a);", "actual parameter 1 of f does not match formal parameter\n" + "found   : string\n" + "required: undefined"); [EOL] } <line_num>: 4001,4008
public void testControlFlowRestrictsType8() throws Exception { [EOL]     testTypes("/** @param {undefined} a */ function f(a){}" + "/** @type {(!Array,undefined)} */ var a;" + "if (a || f(a)) {}"); [EOL] } <line_num>: 4010,4014
public void testControlFlowRestrictsType9() throws Exception { [EOL]     testTypes("/** @param {number?} x\n * @return {number}*/\n" + "var f = function(x) {\n" + "if (!x || x == 1) { return 1; } else { return x; }\n" + "};"); [EOL] } <line_num>: 4016,4021
public void testSwitchCase3() throws Exception { [EOL]     testTypes("/** @type String */" + "var a = new String('foo');" + "switch (a) { case 'A': }"); [EOL] } <line_num>: 4023,4027
public void testSwitchCase4() throws Exception { [EOL]     testTypes("/** @type {(string,Null)} */" + "var a = 'foo';" + "switch (a) { case 'A':break; case null:break; }"); [EOL] } <line_num>: 4029,4033
public void testSwitchCase5() throws Exception { [EOL]     testTypes("/** @type {(String,Null)} */" + "var a = new String('foo');" + "switch (a) { case 'A':break; case null:break; }"); [EOL] } <line_num>: 4035,4039
public void testSwitchCase6() throws Exception { [EOL]     testTypes("/** @type {(Number,Null)} */" + "var a = new Number(5);" + "switch (a) { case 5:break; case null:break; }"); [EOL] } <line_num>: 4041,4045
public void testSwitchCase7() throws Exception { [EOL]     testTypes("/**\n" + " * @param {number} x\n" + " * @return {number}\n" + " */\n" + "function g(x) { return 5; }" + "function f() {" + "  var x = {};" + "  x.foo = '3';" + "  switch (3) { case g(x.foo): return 3; }" + "}", "actual parameter 1 of g does not match formal parameter\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 4047,4063
public void testSwitchCase8() throws Exception { [EOL]     testTypes("/**\n" + " * @param {number} x\n" + " * @return {number}\n" + " */\n" + "function g(x) { return 5; }" + "function f() {" + "  var x = {};" + "  x.foo = '3';" + "  switch (g(x.foo)) { case 3: return 3; }" + "}", "actual parameter 1 of g does not match formal parameter\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 4065,4081
public void testNoTypeCheck1() throws Exception { [EOL]     testTypes("/** @notypecheck */function foo() { new 4 }"); [EOL] } <line_num>: 4083,4085
public void testNoTypeCheck2() throws Exception { [EOL]     testTypes("/** @notypecheck */var foo = function() { new 4 }"); [EOL] } <line_num>: 4087,4089
public void testNoTypeCheck3() throws Exception { [EOL]     testTypes("/** @notypecheck */var foo = function bar() { new 4 }"); [EOL] } <line_num>: 4091,4093
public void testNoTypeCheck4() throws Exception { [EOL]     testTypes("var foo;" + "/** @notypecheck */foo = function() { new 4 }"); [EOL] } <line_num>: 4095,4098
public void testNoTypeCheck5() throws Exception { [EOL]     testTypes("var foo;" + "foo = /** @notypecheck */function() { new 4 }"); [EOL] } <line_num>: 4100,4103
public void testNoTypeCheck6() throws Exception { [EOL]     testTypes("var foo;" + "/** @notypecheck */foo = function bar() { new 4 }"); [EOL] } <line_num>: 4105,4108
public void testNoTypeCheck7() throws Exception { [EOL]     testTypes("var foo;" + "foo = /** @notypecheck */function bar() { new 4 }"); [EOL] } <line_num>: 4110,4113
public void testNoTypeCheck8() throws Exception { [EOL]     testTypes("/** @fileoverview \n * @notypecheck */ var foo;" + "var bar = 3; /** @param {string} x */ function f(x) {} f(bar);"); [EOL] } <line_num>: 4115,4118
public void testImplicitCast() throws Exception { [EOL]     testTypes("/** @constructor */ function Element() {};\n" + "/** @type {string}\n" + "  * @implicitCast */" + "Element.prototype.innerHTML;", "(new Element).innerHTML = new Array();", null, false); [EOL] } <line_num>: 4120,4126
public void testImplicitCastSubclassAccess() throws Exception { [EOL]     testTypes("/** @constructor */ function Element() {};\n" + "/** @type {string}\n" + "  * @implicitCast */" + "Element.prototype.innerHTML;" + "/** @constructor \n @extends Element */" + "function DIVElement() {};", "(new DIVElement).innerHTML = new Array();", null, false); [EOL] } <line_num>: 4128,4136
public void testImplicitCastNotInExterns() throws Exception { [EOL]     testTypes("/** @constructor */ function Element() {};\n" + "/** @type {string}\n" + "  * @implicitCast */" + "Element.prototype.innerHTML;" + "(new Element).innerHTML = new Array();", new String[] { "Illegal annotation on innerHTML. @implicitCast may only be " + "used in externs.", "assignment to property innerHTML of Element\n" + "found   : Array\n" + "required: string" }); [EOL] } <line_num>: 4138,4151
public void testNumberNode() throws Exception { [EOL]     Node n = typeCheck(Node.newNumber(0)); [EOL]     assertTypeEquals(NUMBER_TYPE, n.getJSType()); [EOL] } <line_num>: 4153,4157
public void testStringNode() throws Exception { [EOL]     Node n = typeCheck(Node.newString("hello")); [EOL]     assertTypeEquals(STRING_TYPE, n.getJSType()); [EOL] } <line_num>: 4159,4163
public void testBooleanNodeTrue() throws Exception { [EOL]     Node trueNode = typeCheck(new Node(Token.TRUE)); [EOL]     assertTypeEquals(BOOLEAN_TYPE, trueNode.getJSType()); [EOL] } <line_num>: 4165,4169
public void testBooleanNodeFalse() throws Exception { [EOL]     Node falseNode = typeCheck(new Node(Token.FALSE)); [EOL]     assertTypeEquals(BOOLEAN_TYPE, falseNode.getJSType()); [EOL] } <line_num>: 4171,4175
public void testUndefinedNode() throws Exception { [EOL]     Node p = new Node(Token.ADD); [EOL]     Node n = Node.newString(Token.NAME, "undefined"); [EOL]     p.addChildToBack(n); [EOL]     p.addChildToBack(Node.newNumber(5)); [EOL]     typeCheck(p); [EOL]     assertTypeEquals(VOID_TYPE, n.getJSType()); [EOL] } <line_num>: 4177,4185
public void testNumberAutoboxing() throws Exception { [EOL]     testTypes("/** @type Number */var a = 4;", "initializing variable\n" + "found   : number\n" + "required: (Number|null|undefined)"); [EOL] } <line_num>: 4187,4192
public void testNumberUnboxing() throws Exception { [EOL]     testTypes("/** @type number */var a = new Number(4);", "initializing variable\n" + "found   : Number\n" + "required: number"); [EOL] } <line_num>: 4194,4199
public void testStringAutoboxing() throws Exception { [EOL]     testTypes("/** @type String */var a = 'hello';", "initializing variable\n" + "found   : string\n" + "required: (String|null|undefined)"); [EOL] } <line_num>: 4201,4206
public void testStringUnboxing() throws Exception { [EOL]     testTypes("/** @type string */var a = new String('hello');", "initializing variable\n" + "found   : String\n" + "required: string"); [EOL] } <line_num>: 4208,4213
public void testBooleanAutoboxing() throws Exception { [EOL]     testTypes("/** @type Boolean */var a = true;", "initializing variable\n" + "found   : boolean\n" + "required: (Boolean|null|undefined)"); [EOL] } <line_num>: 4215,4220
public void testBooleanUnboxing() throws Exception { [EOL]     testTypes("/** @type boolean */var a = new Boolean(false);", "initializing variable\n" + "found   : Boolean\n" + "required: boolean"); [EOL] } <line_num>: 4222,4227
public void testIssue86() throws Exception { [EOL]     testTypes("/** @interface */ function I() {}" + "/** @return {number} */ I.prototype.get = function(){};" + "/** @constructor \n * @implements {I} */ function F() {}" + "/** @override */ F.prototype.get = function() { return true; };", "inconsistent return type\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 4229,4238
public void testIssue124() throws Exception { [EOL]     testTypes("var t = null;" + "function test() {" + "  if (t != null) { t = null; }" + "  t = 1;" + "}"); [EOL] } <line_num>: 4240,4247
public void testIssue124b() throws Exception { [EOL]     testTypes("var t = null;" + "function test() {" + "  if (t != null) { t = null; }" + "  t = undefined;" + "}", "condition always evaluates to false\n" + "left : (null|undefined)\n" + "right: null"); [EOL] } <line_num>: 4249,4259
public void testBug592170() throws Exception { [EOL]     testTypes("/** @param {Function} opt_f ... */" + "function foo(opt_f) {" + "  /** @type {Function} */" + "  return opt_f || function () {};" + "}", "Type annotations are not allowed here. Are you missing parentheses?"); [EOL] } <line_num>: 4266,4274
public void testBug901455() throws Exception { [EOL]     testTypes("/** @return {(number,undefined)} */ function a() { return 3; }" + "var b = undefined === a()"); [EOL]     testTypes("/** @return {(number,undefined)} */ function a() { return 3; }" + "var b = a() === undefined"); [EOL] } <line_num>: 4281,4286
public void testBug908701() throws Exception { [EOL]     testTypes("/** @type {String} */var s = new String('foo');" + "var b = s.match(/a/) != null;"); [EOL] } <line_num>: 4291,4294
public void testBug908625() throws Exception { [EOL]     testTypes("/** @constructor */function A(){}" + "/** @constructor\n * @extends A */function B(){}" + "/** @param {B} b" + "\n @return {(A,undefined)} */function foo(b){return b}"); [EOL] } <line_num>: 4299,4304
public void testBug911118() throws Exception { [EOL]     Scope s = parseAndTypeCheckWithScope("var a = function(){};").scope; [EOL]     JSType type = s.getVar("a").getType(); [EOL]     assertEquals("function (): undefined", type.toString()); [EOL]     testTypes("function nullFunction() {};" + "var foo = nullFunction;" + "foo = function() {};" + "foo();"); [EOL] } <line_num>: 4310,4321
public void testBug909000() throws Exception { [EOL]     testTypes("/** @constructor */function A(){}\n" + "/** @param {!A} a\n" + "@return {boolean}*/\n" + "function y(a) { return a }", "inconsistent return type\n" + "found   : A\n" + "required: boolean"); [EOL] } <line_num>: 4323,4331
public void testBug930117() throws Exception { [EOL]     testTypes("/** @param {boolean} x */function f(x){}" + "f(null);", "actual parameter 1 of f does not match formal parameter\n" + "found   : null\n" + "required: boolean"); [EOL] } <line_num>: 4333,4340
public void testBug1484445() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "/** @type {number?} */ Foo.prototype.bar = null;" + "/** @type {number?} */ Foo.prototype.baz = null;" + "/** @param {Foo} foo */" + "function f(foo) {" + "  while (true) {" + "    if (foo.bar == null && foo.baz == null) {" + "      foo.bar;" + "    }" + "  }" + "}"); [EOL] } <line_num>: 4342,4355
public void testBug1859535() throws Exception { [EOL]     testTypes("/**\n" + " * @param {Function} childCtor Child class.\n" + " * @param {Function} parentCtor Parent class.\n" + " */" + "var inherits = function(childCtor, parentCtor) {" + "  /** @constructor */" + "  function tempCtor() {};" + "  tempCtor.prototype = parentCtor.prototype;" + "  childCtor.superClass_ = parentCtor.prototype;" + "  childCtor.prototype = new tempCtor();" + "  /** @override */ childCtor.prototype.constructor = childCtor;" + "};" + "/**" + " * @param {Function} constructor\n" + " * @param {Object} var_args\n" + " * @return {Object}\n" + " */" + "var factory = function(constructor, var_args) {" + "  /** @constructor */" + "  var tempCtor = function() {};" + "  tempCtor.prototype = constructor.prototype;" + "  var obj = new tempCtor();" + "  constructor.apply(obj, arguments);" + "  return obj;" + "};"); [EOL] } <line_num>: 4357,4384
public void testBug1940591() throws Exception { [EOL]     testTypes("/** @type {Object} */" + "var a = {};\n" + "/** @type {number} */\n" + "a.name = 0;\n" + "/**\n" + " * @param {Function} x anything.\n" + " */\n" + "a.g = function(x) { x.name = 'a'; }"); [EOL] } <line_num>: 4386,4396
public void testBug1942972() throws Exception { [EOL]     testTypes("var google = {\n" + "  gears: {\n" + "    factory: {},\n" + "    workerPool: {}\n" + "  }\n" + "};\n" + "\n" + "google.gears = {factory: {}};\n"); [EOL] } <line_num>: 4398,4408
public void testBug1943776() throws Exception { [EOL]     testTypes("/** @return  {{foo: Array}} */" + "function bar() {" + "  return {foo: []};" + "}"); [EOL] } <line_num>: 4410,4416
public void testBug1987544() throws Exception { [EOL]     testTypes("/** @param {string} x */ function foo(x) {}" + "var duration;" + "if (true && !(duration = 3)) {" + " foo(duration);" + "}", "actual parameter 1 of foo does not match formal parameter\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 4418,4428
public void testBug1940769() throws Exception { [EOL]     testTypes("/** @return {!Object} */ " + "function proto(obj) { return obj.prototype; }" + "/** @constructor */ function Map() {}" + "/**\n" + " * @constructor\n" + " * @extends {Map}\n" + " */" + "function Map2() { Map.call(this); };" + "Map2.prototype = proto(Map);"); [EOL] } <line_num>: 4430,4441
public void testBug2335992() throws Exception { [EOL]     testTypes("/** @return {*} */ function f() { return 3; }" + "var x = f();" + "/** @type {string} */" + "x.y = 3;", "assignment\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 4443,4452
public void testBug2341812() throws Exception { [EOL]     testTypes("/** @interface */" + "function EventTarget() {}" + "/** @constructor \n * @implements {EventTarget} */" + "function Node() {}" + "/** @type {number} */ Node.prototype.index;" + "/** @param {EventTarget} x \n * @return {string} */" + "function foo(x) { return x.index; }"); [EOL] } <line_num>: 4454,4463
public void testScopedConstructors() throws Exception { [EOL]     testTypes("function foo1() { " + "  /** @constructor */ function Bar() { " + "    /** @type {number} */ this.x = 3;" + "  }" + "}" + "function foo2() { " + "  /** @constructor */ function Bar() { " + "    /** @type {string} */ this.x = 'y';" + "  }" + "  /** " + "   * @param {Bar} b\n" + "   * @return {number}\n" + "   */" + "  function baz(b) { return b.x; }" + "}", "inconsistent return type\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 4465,4485
public void testQualifiedNameInference1() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "/** @type {number?} */ Foo.prototype.bar = null;" + "/** @type {number?} */ Foo.prototype.baz = null;" + "/** @param {Foo} foo */" + "function f(foo) {" + "  while (true) {" + "    if (!foo.baz) break; " + "    foo.bar = null;" + "  }" + "  return foo.bar == null;" + "}"); [EOL] } <line_num>: 4487,4501
public void testQualifiedNameInference2() throws Exception { [EOL]     testTypes("var x = {};" + "x.y = c;" + "function f(a, b) {" + "  if (a) {" + "    if (b) " + "      x.y = 2;" + "    else " + "      x.y = 1;" + "  }" + "  return x.y == null;" + "}"); [EOL] } <line_num>: 4503,4516
public void testQualifiedNameInference3() throws Exception { [EOL]     testTypes("var x = {};" + "x.y = c;" + "function f(a, b) {" + "  if (a) {" + "    if (b) " + "      x.y = 2;" + "    else " + "      x.y = 1;" + "  }" + "  return x.y == null;" + "} function g() { x.y = null; }"); [EOL] } <line_num>: 4518,4531
public void testQualifiedNameInference4() throws Exception { [EOL]     testTypes("/** @param {string} x */ function f(x) {}\n" + "/**\n" + " * @param {?string} x \n" + " * @constructor\n" + " */" + "function Foo(x) { this.x_ = x; }\n" + "Foo.prototype.bar = function() {" + "  if (this.x_) { f(this.x_); }" + "};"); [EOL] } <line_num>: 4533,4544
public void testSheqRefinedScope() throws Exception { [EOL]     Node n = parseAndTypeCheck("/** @constructor */function A() {}\n" + "/** @constructor \n @extends A */ function B() {}\n" + "/** @return {number} */\n" + "B.prototype.p = function() { return 1; }\n" + "/** @param {A} a\n @param {B} b */\n" + "function f(a, b) {\n" + "  b.p();\n" + "  if (a === b) {\n" + "    b.p();\n" + "  }\n" + "}"); [EOL]     Node nodeC = n.getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild(); [EOL]     JSType typeC = nodeC.getJSType(); [EOL]     assertTrue(typeC.isNumber()); [EOL]     Node nodeB = nodeC.getFirstChild().getFirstChild(); [EOL]     JSType typeB = nodeB.getJSType(); [EOL]     assertEquals("B", typeB.toString()); [EOL] } <line_num>: 4546,4567
public void testAssignToUntypedVariable() throws Exception { [EOL]     Node n = parseAndTypeCheck("var z; z = 1;"); [EOL]     Node assign = n.getLastChild().getFirstChild(); [EOL]     Node node = assign.getFirstChild(); [EOL]     assertFalse(node.getJSType().isUnknownType()); [EOL]     assertEquals("number", node.getJSType().toString()); [EOL] } <line_num>: 4569,4576
public void testAssignToUntypedProperty() throws Exception { [EOL]     Node n = parseAndTypeCheck("/** @constructor */ function Foo() {}\n" + "Foo.prototype.a = 1;" + "(new Foo).a;"); [EOL]     Node node = n.getLastChild().getFirstChild(); [EOL]     assertFalse(node.getJSType().isUnknownType()); [EOL]     assertTrue(node.getJSType().isNumber()); [EOL] } <line_num>: 4578,4587
public void testNew1() throws Exception { [EOL]     testTypes("new 4", TypeCheck.NOT_A_CONSTRUCTOR); [EOL] } <line_num>: 4589,4591
public void testNew2() throws Exception { [EOL]     testTypes("var Math = {}; new Math()", TypeCheck.NOT_A_CONSTRUCTOR); [EOL] } <line_num>: 4593,4595
public void testNew3() throws Exception { [EOL]     testTypes("new Date()"); [EOL] } <line_num>: 4597,4599
public void testNew4() throws Exception { [EOL]     testTypes("/** @constructor */function A(){}; new A();"); [EOL] } <line_num>: 4601,4603
public void testNew5() throws Exception { [EOL]     testTypes("function A(){}; new A();", TypeCheck.NOT_A_CONSTRUCTOR); [EOL] } <line_num>: 4605,4607
public void testNew6() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("/** @constructor */function A(){};" + "var a = new A();"); [EOL]     JSType aType = p.scope.getVar("a").getType(); [EOL]     assertTrue(aType instanceof ObjectType); [EOL]     ObjectType aObjectType = (ObjectType) aType; [EOL]     assertEquals("A", aObjectType.getConstructor().getReferenceName()); [EOL] } <line_num>: 4609,4618
public void testNew7() throws Exception { [EOL]     testTypes("/** @param {Function} opt_constructor */" + "function foo(opt_constructor) {" + "if (opt_constructor) { new opt_constructor; }" + "}"); [EOL] } <line_num>: 4620,4625
public void testNew8() throws Exception { [EOL]     testTypes("/** @param {Function} opt_constructor */" + "function foo(opt_constructor) {" + "new opt_constructor;" + "}"); [EOL] } <line_num>: 4627,4632
public void testNew9() throws Exception { [EOL]     testTypes("/** @param {Function} opt_constructor */" + "function foo(opt_constructor) {" + "new (opt_constructor || Array);" + "}"); [EOL] } <line_num>: 4634,4639
public void testNew10() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @param {Function} opt_constructor */" + "goog.Foo = function (opt_constructor) {" + "new (opt_constructor || Array);" + "}"); [EOL] } <line_num>: 4641,4647
public void testNew11() throws Exception { [EOL]     testTypes("/** @param {Function} c1 */" + "function f(c1) {" + "  var c2 = function(){};" + "  c1.prototype = new c2;" + "}", TypeCheck.NOT_A_CONSTRUCTOR); [EOL] } <line_num>: 4649,4655
public void testNew12() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("var a = new Array();"); [EOL]     Var a = p.scope.getVar("a"); [EOL]     assertTypeEquals(ARRAY_TYPE, a.getType()); [EOL] } <line_num>: 4657,4662
public void testNew13() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("/** @constructor */function FooBar(){};" + "var a = new FooBar();"); [EOL]     Var a = p.scope.getVar("a"); [EOL]     assertTrue(a.getType() instanceof ObjectType); [EOL]     assertEquals("FooBar", a.getType().toString()); [EOL] } <line_num>: 4664,4672
public void testNew14() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("/** @constructor */var FooBar = function(){};" + "var a = new FooBar();"); [EOL]     Var a = p.scope.getVar("a"); [EOL]     assertTrue(a.getType() instanceof ObjectType); [EOL]     assertEquals("FooBar", a.getType().toString()); [EOL] } <line_num>: 4674,4682
public void testNew15() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("var goog = {};" + "/** @constructor */goog.A = function(){};" + "var a = new goog.A();"); [EOL]     Var a = p.scope.getVar("a"); [EOL]     assertTrue(a.getType() instanceof ObjectType); [EOL]     assertEquals("goog.A", a.getType().toString()); [EOL] } <line_num>: 4684,4693
public void testNew16() throws Exception { [EOL]     testTypes("/** \n" + " * @param {string} x \n" + " * @constructor \n" + " */" + "function Foo(x) {}" + "function g() { new Foo(1); }", "actual parameter 1 of Foo does not match formal parameter\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 4695,4706
public void testName1() throws Exception { [EOL]     assertTypeEquals(VOID_TYPE, testNameNode("undefined")); [EOL] } <line_num>: 4708,4710
public void testName2() throws Exception { [EOL]     assertTypeEquals(OBJECT_FUNCTION_TYPE, testNameNode("Object")); [EOL] } <line_num>: 4712,4714
public void testName3() throws Exception { [EOL]     assertTypeEquals(ARRAY_FUNCTION_TYPE, testNameNode("Array")); [EOL] } <line_num>: 4716,4718
public void testName4() throws Exception { [EOL]     assertTypeEquals(DATE_FUNCTION_TYPE, testNameNode("Date")); [EOL] } <line_num>: 4720,4722
public void testName5() throws Exception { [EOL]     assertTypeEquals(REGEXP_FUNCTION_TYPE, testNameNode("RegExp")); [EOL] } <line_num>: 4724,4726
private JSType testNameNode(String name) { [EOL]     Node node = Node.newString(Token.NAME, name); [EOL]     Node parent = new Node(Token.SCRIPT, node); [EOL]     parent.setInputId(new InputId("code")); [EOL]     Node externs = new Node(Token.SCRIPT); [EOL]     externs.setInputId(new InputId("externs")); [EOL]     Node externAndJsRoot = new Node(Token.BLOCK, externs, parent); [EOL]     externAndJsRoot.setIsSyntheticBlock(true); [EOL]     makeTypeCheck().processForTesting(null, parent); [EOL]     return node.getJSType(); [EOL] } <line_num>: 4731,4744
public void testBitOperation1() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){ ~foo(); }", "operator ~ cannot be applied to undefined"); [EOL] } <line_num>: 4746,4749
public void testBitOperation2() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){var a = foo()<<3;}", "operator << cannot be applied to undefined"); [EOL] } <line_num>: 4751,4754
public void testBitOperation3() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){var a = 3<<foo();}", "operator << cannot be applied to undefined"); [EOL] } <line_num>: 4756,4759
public void testBitOperation4() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){var a = foo()>>>3;}", "operator >>> cannot be applied to undefined"); [EOL] } <line_num>: 4761,4764
public void testBitOperation5() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){var a = 3>>>foo();}", "operator >>> cannot be applied to undefined"); [EOL] } <line_num>: 4766,4769
public void testBitOperation6() throws Exception { [EOL]     testTypes("/**@return {!Object}*/function foo(){var a = foo()&3;}", "bad left operand to bitwise operator\n" + "found   : Object\n" + "required: (boolean|null|number|string|undefined)"); [EOL] } <line_num>: 4771,4776
public void testBitOperation7() throws Exception { [EOL]     testTypes("var x = null; x |= undefined; x &= 3; x ^= '3'; x |= true;"); [EOL] } <line_num>: 4778,4780
public void testBitOperation8() throws Exception { [EOL]     testTypes("var x = void 0; x |= new Number(3);"); [EOL] } <line_num>: 4782,4784
public void testBitOperation9() throws Exception { [EOL]     testTypes("var x = void 0; x |= {};", "bad right operand to bitwise operator\n" + "found   : {}\n" + "required: (boolean|null|number|string|undefined)"); [EOL] } <line_num>: 4786,4791
public void testCall1() throws Exception { [EOL]     testTypes("3();", "number expressions are not callable"); [EOL] } <line_num>: 4793,4795
public void testCall2() throws Exception { [EOL]     testTypes("/** @param {!Number} foo*/function bar(foo){ bar('abc'); }", "actual parameter 1 of bar does not match formal parameter\n" + "found   : string\n" + "required: Number"); [EOL] } <line_num>: 4797,4802
public void testCall3() throws Exception { [EOL]     testTypes("/** @type {Function|undefined} */var opt_f;" + "/** @type {some.unknown.type} */var f1;" + "var f2 = opt_f || f1;" + "f2();", "Bad type annotation. Unknown type some.unknown.type"); [EOL] } <line_num>: 4804,4812
public void testCall4() throws Exception { [EOL]     testTypes("/**@param {!RegExp} a*/var foo = function bar(a){ bar('abc'); }", "actual parameter 1 of bar does not match formal parameter\n" + "found   : string\n" + "required: RegExp"); [EOL] } <line_num>: 4814,4819
public void testCall5() throws Exception { [EOL]     testTypes("/**@param {!RegExp} a*/var foo = function bar(a){ foo('abc'); }", "actual parameter 1 of foo does not match formal parameter\n" + "found   : string\n" + "required: RegExp"); [EOL] } <line_num>: 4821,4826
public void testCall6() throws Exception { [EOL]     testTypes("/** @param {!Number} foo*/function bar(foo){}" + "bar('abc');", "actual parameter 1 of bar does not match formal parameter\n" + "found   : string\n" + "required: Number"); [EOL] } <line_num>: 4828,4834
public void testCall7() throws Exception { [EOL]     testTypes("/** @param {!RegExp} a*/var foo = function bar(a){};" + "foo('abc');", "actual parameter 1 of foo does not match formal parameter\n" + "found   : string\n" + "required: RegExp"); [EOL] } <line_num>: 4836,4842
public void testCall8() throws Exception { [EOL]     testTypes("/** @type {Function|number} */var f;f();", "(Function|number) expressions are " + "not callable"); [EOL] } <line_num>: 4844,4848
public void testCall9() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor */ goog.Foo = function() {};" + "/** @param {!goog.Foo} a */ var bar = function(a){};" + "bar('abc');", "actual parameter 1 of bar does not match formal parameter\n" + "found   : string\n" + "required: goog.Foo"); [EOL] } <line_num>: 4850,4859
public void testCall10() throws Exception { [EOL]     testTypes("/** @type {Function} */var f;f();"); [EOL] } <line_num>: 4861,4863
public void testCall11() throws Exception { [EOL]     testTypes("var f = new Function(); f();"); [EOL] } <line_num>: 4865,4867
public void testFunctionCall1() throws Exception { [EOL]     testTypes("/** @param {number} x */ var foo = function(x) {};" + "foo.call(null, 3);"); [EOL] } <line_num>: 4869,4873
public void testFunctionCall2() throws Exception { [EOL]     testTypes("/** @param {number} x */ var foo = function(x) {};" + "foo.call(null, 'bar');", "actual parameter 2 of foo.call does not match formal parameter\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 4875,4882
public void testFunctionCall3() throws Exception { [EOL]     testTypes("/** @param {number} x \n * @constructor */ " + "var Foo = function(x) { this.bar.call(null, x); };" + "/** @type {function(number)} */ Foo.prototype.bar;"); [EOL] } <line_num>: 4884,4889
public void testFunctionCall4() throws Exception { [EOL]     testTypes("/** @param {string} x \n * @constructor */ " + "var Foo = function(x) { this.bar.call(null, x); };" + "/** @type {function(number)} */ Foo.prototype.bar;", "actual parameter 2 of this.bar.call " + "does not match formal parameter\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 4891,4900
public void testFunctionCall5() throws Exception { [EOL]     testTypes("/** @param {Function} handler \n * @constructor */ " + "var Foo = function(handler) { handler.call(this, x); };"); [EOL] } <line_num>: 4902,4906
public void testFunctionCall6() throws Exception { [EOL]     testTypes("/** @param {Function} handler \n * @constructor */ " + "var Foo = function(handler) { handler.apply(this, x); };"); [EOL] } <line_num>: 4908,4912
public void testFunctionCall7() throws Exception { [EOL]     testTypes("/** @param {Function} handler \n * @param {Object} opt_context */ " + "var Foo = function(handler, opt_context) { " + "  handler.call(opt_context, x);" + "};"); [EOL] } <line_num>: 4914,4920
public void testFunctionCall8() throws Exception { [EOL]     testTypes("/** @param {Function} handler \n * @param {Object} opt_context */ " + "var Foo = function(handler, opt_context) { " + "  handler.apply(opt_context, x);" + "};"); [EOL] } <line_num>: 4922,4928
public void testCast2() throws Exception { [EOL]     testTypes("/** @constructor */function base() {}\n" + "/** @constructor\n @extends {base} */function derived() {}\n" + "/** @type {base} */ var baz = new derived();\n"); [EOL] } <line_num>: 4930,4935
public void testCast3() throws Exception { [EOL]     testTypes("/** @constructor */function base() {}\n" + "/** @constructor @extends {base} */function derived() {}\n" + "/** @type {!derived} */ var baz = new base();\n", "initializing variable\n" + "found   : base\n" + "required: derived"); [EOL] } <line_num>: 4937,4945
public void testCast4() throws Exception { [EOL]     testTypes("/** @constructor */function base() {}\n" + "/** @constructor\n * @extends {base} */function derived() {}\n" + "/** @type {!derived} */ var baz = " + "/** @type {!derived} */(new base());\n"); [EOL] } <line_num>: 4947,4953
public void testCast5() throws Exception { [EOL]     testTypes("/** @constructor */function foo() {}\n" + "/** @constructor */function bar() {}\n" + "var baz = /** @type {!foo} */(new bar);\n", "invalid cast - must be a subtype or supertype\n" + "from: bar\n" + "to  : foo"); [EOL] } <line_num>: 4955,4963
public void testCast6() throws Exception { [EOL]     testTypes("/** @constructor */function foo() {}\n" + "/** @constructor \n @extends foo */function bar() {}\n" + "var baz = /** @type {!bar} */(new bar);\n" + "var baz = /** @type {!foo} */(new foo);\n" + "var baz = /** @type {bar} */(new bar);\n" + "var baz = /** @type {foo} */(new foo);\n" + "var baz = /** @type {!foo} */(new bar);\n" + "var baz = /** @type {!bar} */(new foo);\n" + "var baz = /** @type {foo} */(new bar);\n" + "var baz = /** @type {bar} */(new foo);\n"); [EOL] } <line_num>: 4965,4977
public void testCast7() throws Exception { [EOL]     testTypes("var x = /** @type {foo} */ (new Object());", "Bad type annotation. Unknown type foo"); [EOL] } <line_num>: 4979,4982
public void testCast8() throws Exception { [EOL]     testTypes("function f() { return /** @type {foo} */ (new Object()); }", "Bad type annotation. Unknown type foo"); [EOL] } <line_num>: 4984,4987
public void testCast9() throws Exception { [EOL]     testTypes("var foo = {};" + "function f() { return /** @type {foo} */ (new Object()); }", "Bad type annotation. Unknown type foo"); [EOL] } <line_num>: 4989,4993
public void testCast10() throws Exception { [EOL]     testTypes("var foo = function() {};" + "function f() { return /** @type {foo} */ (new Object()); }", "Bad type annotation. Unknown type foo"); [EOL] } <line_num>: 4995,4999
public void testCast11() throws Exception { [EOL]     testTypes("var goog = {}; goog.foo = {};" + "function f() { return /** @type {goog.foo} */ (new Object()); }", "Bad type annotation. Unknown type goog.foo"); [EOL] } <line_num>: 5001,5005
public void testCast12() throws Exception { [EOL]     testTypes("var goog = {}; goog.foo = function() {};" + "function f() { return /** @type {goog.foo} */ (new Object()); }", "Bad type annotation. Unknown type goog.foo"); [EOL] } <line_num>: 5007,5011
public void testCast13() throws Exception { [EOL]     testClosureTypes("var goog = {}; " + "goog.addDependency('zzz.js', ['goog.foo'], []);" + "goog.foo = function() {};" + "function f() { return /** @type {goog.foo} */ (new Object()); }", "Bad type annotation. Unknown type goog.foo"); [EOL] } <line_num>: 5013,5021
public void testCast14() throws Exception { [EOL]     testClosureTypes("var goog = {}; " + "goog.addDependency('zzz.js', ['goog.bar'], []);" + "function f() { return /** @type {goog.bar} */ (new Object()); }", null); [EOL] } <line_num>: 5023,5030
public void testCast15() throws Exception { [EOL]     testTypes("for (var i = 0; i < 10; i++) {" + "var x = /** @type {Object|number} */ ({foo: 3});" + "/** @param {number} x */ function f(x) {}" + "f(x.foo);" + "f([].foo);" + "}", "Property foo never defined on Array"); [EOL] } <line_num>: 5032,5048
public void testCast16() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {} \n" + "/** @type {Foo} */ var x = /** @type {Foo} */ ({})"); [EOL]     testTypes("/** @constructor */ function Foo() {} \n" + "/** @type {Foo} */ var x = (/** @type {Foo} */ y)"); [EOL] } <line_num>: 5050,5057
public void testNestedCasts() throws Exception { [EOL]     testTypes("/** @constructor */var T = function() {};\n" + "/** @constructor */var V = function() {};\n" + "/**\n" + "* @param {boolean} b\n" + "* @return {T|V}\n" + "*/\n" + "function f(b) { return b ? new T() : new V(); }\n" + "/**\n" + "* @param {boolean} b\n" + "* @return {boolean|undefined}\n" + "*/\n" + "function g(b) { return b ? true : undefined; }\n" + "/** @return {T} */\n" + "function h() {\n" + "return /** @type {T} */ (f(/** @type {boolean} */ (g(true))));\n" + "}"); [EOL] } <line_num>: 5059,5076
public void testNativeCast1() throws Exception { [EOL]     testTypes("/** @param {number} x */ function f(x) {}" + "f(String(true));", "actual parameter 1 of f does not match formal parameter\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 5078,5085
public void testNativeCast2() throws Exception { [EOL]     testTypes("/** @param {string} x */ function f(x) {}" + "f(Number(true));", "actual parameter 1 of f does not match formal parameter\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 5087,5094
public void testNativeCast3() throws Exception { [EOL]     testTypes("/** @param {number} x */ function f(x) {}" + "f(Boolean(''));", "actual parameter 1 of f does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 5096,5103
public void testNativeCast4() throws Exception { [EOL]     testTypes("/** @param {number} x */ function f(x) {}" + "f(Error(''));", "actual parameter 1 of f does not match formal parameter\n" + "found   : Error\n" + "required: number"); [EOL] } <line_num>: 5105,5112
public void testBadConstructorCall() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "Foo();", "Constructor function (new:Foo): undefined should be called " + "with the \"new\" keyword"); [EOL] } <line_num>: 5114,5120
public void testTypeof() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){ var a = typeof foo(); }"); [EOL] } <line_num>: 5122,5124
public void testConstructorType1() throws Exception { [EOL]     testTypes("/**@constructor*/function Foo(){}" + "/**@type{!Foo}*/var f = new Date();", "initializing variable\n" + "found   : Date\n" + "required: Foo"); [EOL] } <line_num>: 5126,5132
public void testConstructorType2() throws Exception { [EOL]     testTypes("/**@constructor*/function Foo(){\n" + "/**@type{Number}*/this.bar = new Number(5);\n" + "}\n" + "/**@type{Foo}*/var f = new Foo();\n" + "/**@type{Number}*/var n = f.bar;"); [EOL] } <line_num>: 5134,5140
public void testConstructorType3() throws Exception { [EOL]     testTypes("/**@type{Foo}*/var f = new Foo();\n" + "/**@type{Number}*/var n = f.bar;" + "/**@constructor*/function Foo(){\n" + "/**@type{Number}*/this.bar = new Number(5);\n" + "}\n"); [EOL] } <line_num>: 5142,5150
public void testConstructorType4() throws Exception { [EOL]     testTypes("/**@constructor*/function Foo(){\n" + "/**@type{!Number}*/this.bar = new Number(5);\n" + "}\n" + "/**@type{!Foo}*/var f = new Foo();\n" + "/**@type{!String}*/var n = f.bar;", "initializing variable\n" + "found   : Number\n" + "required: String"); [EOL] } <line_num>: 5152,5161
public void testConstructorType5() throws Exception { [EOL]     testTypes("/**@constructor*/function Foo(){}\n" + "if (Foo){}\n"); [EOL] } <line_num>: 5163,5166
public void testConstructorType6() throws Exception { [EOL]     testTypes("/** @constructor */\n" + "function bar() {}\n" + "function _foo() {\n" + " /** @param {bar} x */\n" + "  function f(x) {}\n" + "}"); [EOL] } <line_num>: 5168,5175
public void testConstructorType7() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("/** @constructor */function A(){};"); [EOL]     JSType type = p.scope.getVar("A").getType(); [EOL]     assertTrue(type instanceof FunctionType); [EOL]     FunctionType fType = (FunctionType) type; [EOL]     assertEquals("A", fType.getReferenceName()); [EOL] } <line_num>: 5177,5185
public void testAnonymousType1() throws Exception { [EOL]     testTypes("function f() { return {}; }" + "/** @constructor */\n" + "f().bar = function() {};"); [EOL] } <line_num>: 5187,5191
public void testAnonymousType2() throws Exception { [EOL]     testTypes("function f() { return {}; }" + "/** @interface */\n" + "f().bar = function() {};"); [EOL] } <line_num>: 5193,5197
public void testAnonymousType3() throws Exception { [EOL]     testTypes("function f() { return {}; }" + "/** @enum */\n" + "f().bar = {FOO: 1};"); [EOL] } <line_num>: 5199,5203
public void testBang1() throws Exception { [EOL]     testTypes("/** @param {Object} x\n@return {!Object} */\n" + "function f(x) { return x; }", "inconsistent return type\n" + "found   : (Object|null|undefined)\n" + "required: Object"); [EOL] } <line_num>: 5205,5211
public void testBang2() throws Exception { [EOL]     testTypes("/** @param {Object} x\n@return {!Object} */\n" + "function f(x) { return x ? x : new Object(); }"); [EOL] } <line_num>: 5213,5216
public void testBang3() throws Exception { [EOL]     testTypes("/** @param {Object} x\n@return {!Object} */\n" + "function f(x) { return /** @type {!Object} */ (x); }"); [EOL] } <line_num>: 5218,5221
public void testBang4() throws Exception { [EOL]     testTypes("/**@param {Object} x\n@param {Object} y\n@return {boolean}*/\n" + "function f(x, y) {\n" + "if (typeof x != 'undefined') { return x == y; }\n" + "else { return x != y; }\n}"); [EOL] } <line_num>: 5223,5228
public void testBang5() throws Exception { [EOL]     testTypes("/**@param {Object} x\n@param {Object} y\n@return {boolean}*/\n" + "function f(x, y) { return !!x && x == y; }"); [EOL] } <line_num>: 5230,5233
public void testBang6() throws Exception { [EOL]     testTypes("/** @param {Object?} x\n@return {Object} */\n" + "function f(x) { return x; }"); [EOL] } <line_num>: 5235,5238
public void testBang7() throws Exception { [EOL]     testTypes("/**@param {(Object,string,null)} x\n" + "@return {(Object,string)}*/function f(x) { return x; }"); [EOL] } <line_num>: 5240,5243
public void testDefinePropertyOnNullableObject1() throws Exception { [EOL]     testTypes("/** @type {Object} */ var n = {};\n" + "/** @type {number} */ n.x = 1;\n" + "/** @return {boolean} */function f() { return n.x; }", "inconsistent return type\n" + "found   : number\n" + "required: boolean"); [EOL] } <line_num>: 5245,5252
public void testDefinePropertyOnNullableObject2() throws Exception { [EOL]     testTypes("/** @constructor */ var T = function() {};\n" + "/** @param {T} t\n@return {boolean} */function f(t) {\n" + "t.x = 1; return t.x; }", "inconsistent return type\n" + "found   : number\n" + "required: boolean"); [EOL] } <line_num>: 5254,5261
public void testUnknownConstructorInstanceType1() throws Exception { [EOL]     testTypes("/** @return {Array} */ function g(f) { return new f(); }"); [EOL] } <line_num>: 5263,5265
public void testUnknownConstructorInstanceType2() throws Exception { [EOL]     testTypes("function g(f) { return /** @type Array */ (new f()); }"); [EOL] } <line_num>: 5267,5269
public void testUnknownConstructorInstanceType3() throws Exception { [EOL]     testTypes("function g(f) { var x = new f(); x.a = 1; return x; }"); [EOL] } <line_num>: 5271,5273
public void testUnknownPrototypeChain() throws Exception { [EOL]     testTypes("/**\n" + "* @param {Object} co\n" + " * @return {Object}\n" + " */\n" + "function inst(co) {\n" + " /** @constructor */\n" + " var c = function() {};\n" + " c.prototype = co.prototype;\n" + " return new c;\n" + "}"); [EOL] } <line_num>: 5275,5286
public void testNamespacedConstructor() throws Exception { [EOL]     Node root = parseAndTypeCheck("var goog = {};" + "/** @constructor */ goog.MyClass = function() {};" + "/** @return {!goog.MyClass} */ " + "function foo() { return new goog.MyClass(); }"); [EOL]     JSType typeOfFoo = root.getLastChild().getJSType(); [EOL]     assert (typeOfFoo instanceof FunctionType); [EOL]     JSType retType = ((FunctionType) typeOfFoo).getReturnType(); [EOL]     assert (retType instanceof ObjectType); [EOL]     assertEquals("goog.MyClass", ((ObjectType) retType).getReferenceName()); [EOL] } <line_num>: 5288,5301
public void testComplexNamespace() throws Exception { [EOL]     String js = "var goog = {};" + "goog.foo = {};" + "goog.foo.bar = 5;"; [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope(js); [EOL]     JSType googScopeType = p.scope.getVar("goog").getType(); [EOL]     assertTrue(googScopeType instanceof ObjectType); [EOL]     assertTrue("foo property not present on goog type", ((ObjectType) googScopeType).hasProperty("foo")); [EOL]     assertFalse("bar property present on goog type", ((ObjectType) googScopeType).hasProperty("bar")); [EOL]     Node varNode = p.root.getFirstChild(); [EOL]     assertEquals(Token.VAR, varNode.getType()); [EOL]     JSType googNodeType = varNode.getFirstChild().getJSType(); [EOL]     assertTrue(googNodeType instanceof ObjectType); [EOL]     assertTrue(googScopeType == googNodeType); [EOL]     Node getpropFoo1 = varNode.getNext().getFirstChild().getFirstChild(); [EOL]     assertEquals(Token.GETPROP, getpropFoo1.getType()); [EOL]     assertEquals("goog", getpropFoo1.getFirstChild().getString()); [EOL]     JSType googGetpropFoo1Type = getpropFoo1.getFirstChild().getJSType(); [EOL]     assertTrue(googGetpropFoo1Type instanceof ObjectType); [EOL]     assertTrue(googGetpropFoo1Type == googScopeType); [EOL]     JSType googFooType = ((ObjectType) googScopeType).getPropertyType("foo"); [EOL]     assertTrue(googFooType instanceof ObjectType); [EOL]     Node getpropFoo2 = varNode.getNext().getNext().getFirstChild().getFirstChild().getFirstChild(); [EOL]     assertEquals(Token.GETPROP, getpropFoo2.getType()); [EOL]     assertEquals("goog", getpropFoo2.getFirstChild().getString()); [EOL]     JSType googGetpropFoo2Type = getpropFoo2.getFirstChild().getJSType(); [EOL]     assertTrue(googGetpropFoo2Type instanceof ObjectType); [EOL]     assertTrue(googGetpropFoo2Type == googScopeType); [EOL]     JSType googFooGetprop2Type = getpropFoo2.getJSType(); [EOL]     assertTrue("goog.foo incorrectly annotated in goog.foo.bar selection", googFooGetprop2Type instanceof ObjectType); [EOL]     ObjectType googFooGetprop2ObjectType = (ObjectType) googFooGetprop2Type; [EOL]     assertFalse("foo property present on goog.foo type", googFooGetprop2ObjectType.hasProperty("foo")); [EOL]     assertTrue("bar property not present on goog.foo type", googFooGetprop2ObjectType.hasProperty("bar")); [EOL]     assertTypeEquals("bar property on goog.foo type incorrectly inferred", NUMBER_TYPE, googFooGetprop2ObjectType.getPropertyType("bar")); [EOL] } <line_num>: 5303,5366
public void testAddingMethodsUsingPrototypeIdiomSimpleNamespace() throws Exception { [EOL]     Node js1Node = parseAndTypeCheck("/** @constructor */function A() {}" + "A.prototype.m1 = 5"); [EOL]     ObjectType instanceType = getInstanceType(js1Node); [EOL]     assertEquals(NATIVE_PROPERTIES_COUNT + 1, instanceType.getPropertiesCount()); [EOL]     checkObjectType(instanceType, "m1", NUMBER_TYPE); [EOL] } <line_num>: 5368,5378
public void testAddingMethodsUsingPrototypeIdiomComplexNamespace1() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("var goog = {};" + "goog.A = /** @constructor */function() {};" + "/** @type number */goog.A.prototype.m1 = 5"); [EOL]     testAddingMethodsUsingPrototypeIdiomComplexNamespace(p); [EOL] } <line_num>: 5380,5388
public void testAddingMethodsUsingPrototypeIdiomComplexNamespace2() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("var goog = {};" + "/** @constructor */goog.A = function() {};" + "/** @type number */goog.A.prototype.m1 = 5"); [EOL]     testAddingMethodsUsingPrototypeIdiomComplexNamespace(p); [EOL] } <line_num>: 5390,5398
private void testAddingMethodsUsingPrototypeIdiomComplexNamespace(TypeCheckResult p) { [EOL]     ObjectType goog = (ObjectType) p.scope.getVar("goog").getType(); [EOL]     assertEquals(NATIVE_PROPERTIES_COUNT + 1, goog.getPropertiesCount()); [EOL]     JSType googA = goog.getPropertyType("A"); [EOL]     assertNotNull(googA); [EOL]     assertTrue(googA instanceof FunctionType); [EOL]     FunctionType googAFunction = (FunctionType) googA; [EOL]     ObjectType classA = googAFunction.getInstanceType(); [EOL]     assertEquals(NATIVE_PROPERTIES_COUNT + 1, classA.getPropertiesCount()); [EOL]     checkObjectType(classA, "m1", NUMBER_TYPE); [EOL] } <line_num>: 5400,5411
public void testAddingMethodsPrototypeIdiomAndObjectLiteralSimpleNamespace() throws Exception { [EOL]     Node js1Node = parseAndTypeCheck("/** @constructor */function A() {}" + "A.prototype = {m1: 5, m2: true}"); [EOL]     ObjectType instanceType = getInstanceType(js1Node); [EOL]     assertEquals(NATIVE_PROPERTIES_COUNT + 2, instanceType.getPropertiesCount()); [EOL]     checkObjectType(instanceType, "m1", NUMBER_TYPE); [EOL]     checkObjectType(instanceType, "m2", BOOLEAN_TYPE); [EOL] } <line_num>: 5413,5424
public void testDontAddMethodsIfNoConstructor() throws Exception { [EOL]     Node js1Node = parseAndTypeCheck("function A() {}" + "A.prototype = {m1: 5, m2: true}"); [EOL]     JSType functionAType = js1Node.getFirstChild().getJSType(); [EOL]     assertEquals("function (): undefined", functionAType.toString()); [EOL]     assertTypeEquals(UNKNOWN_TYPE, U2U_FUNCTION_TYPE.getPropertyType("m1")); [EOL]     assertTypeEquals(UNKNOWN_TYPE, U2U_FUNCTION_TYPE.getPropertyType("m2")); [EOL] } <line_num>: 5426,5438
public void testFunctionAssignement() throws Exception { [EOL]     testTypes("/**" + "* @param {string} ph0" + "* @param {string} ph1" + "* @return {string}" + "*/" + "function MSG_CALENDAR_ACCESS_ERROR(ph0, ph1) {return ''}" + "/** @type {Function} */" + "var MSG_CALENDAR_ADD_ERROR = MSG_CALENDAR_ACCESS_ERROR;"); [EOL] } <line_num>: 5440,5449
public void testAddMethodsPrototypeTwoWays() throws Exception { [EOL]     Node js1Node = parseAndTypeCheck("/** @constructor */function A() {}" + "A.prototype = {m1: 5, m2: true};" + "A.prototype.m3 = 'third property!';"); [EOL]     ObjectType instanceType = getInstanceType(js1Node); [EOL]     assertEquals("A", instanceType.toString()); [EOL]     assertEquals(NATIVE_PROPERTIES_COUNT + 3, instanceType.getPropertiesCount()); [EOL]     checkObjectType(instanceType, "m1", NUMBER_TYPE); [EOL]     checkObjectType(instanceType, "m2", BOOLEAN_TYPE); [EOL]     checkObjectType(instanceType, "m3", STRING_TYPE); [EOL] } <line_num>: 5451,5464
public void testPrototypePropertyTypes() throws Exception { [EOL]     Node js1Node = parseAndTypeCheck("/** @constructor */function A() {\n" + "  /** @type string */ this.m1;\n" + "  /** @type Object? */ this.m2 = {};\n" + "  /** @type boolean */ this.m3;\n" + "}\n" + "/** @type string */ A.prototype.m4;\n" + "/** @type number */ A.prototype.m5 = 0;\n" + "/** @type boolean */ A.prototype.m6;\n"); [EOL]     ObjectType instanceType = getInstanceType(js1Node); [EOL]     assertEquals(NATIVE_PROPERTIES_COUNT + 6, instanceType.getPropertiesCount()); [EOL]     checkObjectType(instanceType, "m1", STRING_TYPE); [EOL]     checkObjectType(instanceType, "m2", createUnionType(createUnionType(OBJECT_TYPE, NULL_TYPE), VOID_TYPE)); [EOL]     checkObjectType(instanceType, "m3", BOOLEAN_TYPE); [EOL]     checkObjectType(instanceType, "m4", STRING_TYPE); [EOL]     checkObjectType(instanceType, "m5", NUMBER_TYPE); [EOL]     checkObjectType(instanceType, "m6", BOOLEAN_TYPE); [EOL] } <line_num>: 5466,5487
public void testValueTypeBuiltInPrototypePropertyType() throws Exception { [EOL]     Node node = parseAndTypeCheck("\"x\".charAt(0)"); [EOL]     assertTypeEquals(STRING_TYPE, node.getFirstChild().getFirstChild().getJSType()); [EOL] } <line_num>: 5489,5492
public void testDeclareBuiltInConstructor() throws Exception { [EOL]     Node node = parseAndTypeCheck("/** @constructor */ var String = function(opt_str) {};\n" + "(new String(\"x\")).charAt(0)"); [EOL]     assertTypeEquals(STRING_TYPE, node.getLastChild().getFirstChild().getJSType()); [EOL] } <line_num>: 5494,5501
public void testExtendBuiltInType1() throws Exception { [EOL]     String externs = "/** @constructor */ var String = function(opt_str) {};\n" + "/**\n" + "* @param {number} start\n" + "* @param {number} opt_length\n" + "* @return {string}\n" + "*/\n" + "String.prototype.substr = function(start, opt_length) {};\n"; [EOL]     Node n1 = parseAndTypeCheck(externs + "(new String(\"x\")).substr(0,1);"); [EOL]     assertTypeEquals(STRING_TYPE, n1.getLastChild().getFirstChild().getJSType()); [EOL] } <line_num>: 5503,5514
public void testExtendBuiltInType2() throws Exception { [EOL]     String externs = "/** @constructor */ var String = function(opt_str) {};\n" + "/**\n" + "* @param {number} start\n" + "* @param {number} opt_length\n" + "* @return {string}\n" + "*/\n" + "String.prototype.substr = function(start, opt_length) {};\n"; [EOL]     Node n2 = parseAndTypeCheck(externs + "\"x\".substr(0,1);"); [EOL]     assertTypeEquals(STRING_TYPE, n2.getLastChild().getFirstChild().getJSType()); [EOL] } <line_num>: 5516,5527
public void testExtendFunction1() throws Exception { [EOL]     Node n = parseAndTypeCheck("/**@return {number}*/Function.prototype.f = " + "function() { return 1; };\n" + "(new Function()).f();"); [EOL]     JSType type = n.getLastChild().getLastChild().getJSType(); [EOL]     assertTypeEquals(NUMBER_TYPE, type); [EOL] } <line_num>: 5529,5535
public void testExtendFunction2() throws Exception { [EOL]     Node n = parseAndTypeCheck("/**@return {number}*/Function.prototype.f = " + "function() { return 1; };\n" + "(function() {}).f();"); [EOL]     JSType type = n.getLastChild().getLastChild().getJSType(); [EOL]     assertTypeEquals(NUMBER_TYPE, type); [EOL] } <line_num>: 5537,5543
public void testInheritanceCheck1() throws Exception { [EOL]     testTypes("/** @constructor */function Super() {};" + "/** @constructor\n @extends {Super} */function Sub() {};" + "Sub.prototype.foo = function() {};"); [EOL] } <line_num>: 5545,5550
public void testInheritanceCheck2() throws Exception { [EOL]     testTypes("/** @constructor */function Super() {};" + "/** @constructor\n @extends {Super} */function Sub() {};" + "/** @override */Sub.prototype.foo = function() {};", "property foo not defined on any superclass of Sub"); [EOL] } <line_num>: 5552,5558
public void testInheritanceCheck3() throws Exception { [EOL]     testTypes("/** @constructor */function Super() {};" + "Super.prototype.foo = function() {};" + "/** @constructor\n @extends {Super} */function Sub() {};" + "Sub.prototype.foo = function() {};", "property foo already defined on superclass Super; " + "use @override to override it"); [EOL] } <line_num>: 5560,5568
public void testInheritanceCheck4() throws Exception { [EOL]     testTypes("/** @constructor */function Super() {};" + "Super.prototype.foo = function() {};" + "/** @constructor\n @extends {Super} */function Sub() {};" + "/** @override */Sub.prototype.foo = function() {};"); [EOL] } <line_num>: 5570,5576
public void testInheritanceCheck5() throws Exception { [EOL]     testTypes("/** @constructor */function Root() {};" + "Root.prototype.foo = function() {};" + "/** @constructor\n @extends {Root} */function Super() {};" + "/** @constructor\n @extends {Super} */function Sub() {};" + "Sub.prototype.foo = function() {};", "property foo already defined on superclass Root; " + "use @override to override it"); [EOL] } <line_num>: 5578,5587
public void testInheritanceCheck6() throws Exception { [EOL]     testTypes("/** @constructor */function Root() {};" + "Root.prototype.foo = function() {};" + "/** @constructor\n @extends {Root} */function Super() {};" + "/** @constructor\n @extends {Super} */function Sub() {};" + "/** @override */Sub.prototype.foo = function() {};"); [EOL] } <line_num>: 5589,5596
public void testInheritanceCheck7() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor */goog.Super = function() {};" + "goog.Super.prototype.foo = 3;" + "/** @constructor\n @extends {goog.Super} */goog.Sub = function() {};" + "goog.Sub.prototype.foo = 5;"); [EOL] } <line_num>: 5598,5605
public void testInheritanceCheck8() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor */goog.Super = function() {};" + "goog.Super.prototype.foo = 3;" + "/** @constructor\n @extends {goog.Super} */goog.Sub = function() {};" + "/** @override */goog.Sub.prototype.foo = 5;"); [EOL] } <line_num>: 5607,5614
public void testInheritanceCheck9_1() throws Exception { [EOL]     testTypes("/** @constructor */function Super() {};" + "Super.prototype.foo = function() { return 3; };" + "/** @constructor\n @extends {Super} */function Sub() {};" + "/** @override\n @return {number} */Sub.prototype.foo =\n" + "function() { return 1; };"); [EOL] } <line_num>: 5616,5623
public void testInheritanceCheck9_2() throws Exception { [EOL]     testTypes("/** @constructor */function Super() {};" + "/** @return {number} */" + "Super.prototype.foo = function() { return 1; };" + "/** @constructor\n @extends {Super} */function Sub() {};" + "/** @override */Sub.prototype.foo =\n" + "function() {};"); [EOL] } <line_num>: 5625,5633
public void testInheritanceCheck9_3() throws Exception { [EOL]     testTypes("/** @constructor */function Super() {};" + "/** @return {number} */" + "Super.prototype.foo = function() { return 1; };" + "/** @constructor\n @extends {Super} */function Sub() {};" + "/** @override\n @return {string} */Sub.prototype.foo =\n" + "function() { return \"some string\" };", "mismatch of the foo property type and the type of the property it " + "overrides from superclass Super\n" + "original: function (this:Super): number\n" + "override: function (this:Sub): string"); [EOL] } <line_num>: 5635,5647
public void testInheritanceCheck10_1() throws Exception { [EOL]     testTypes("/** @constructor */function Root() {};" + "Root.prototype.foo = function() { return 4; };" + "/** @constructor\n @extends {Root} */function Super() {};" + "/** @constructor\n @extends {Super} */function Sub() {};" + "/** @override\n @return {number} */Sub.prototype.foo =\n" + "function() { return 1; };"); [EOL] } <line_num>: 5649,5657
public void testInheritanceCheck10_2() throws Exception { [EOL]     testTypes("/** @constructor */function Root() {};" + "/** @return {number} */" + "Root.prototype.foo = function() { return 1; };" + "/** @constructor\n @extends {Root} */function Super() {};" + "/** @constructor\n @extends {Super} */function Sub() {};" + "/** @override */Sub.prototype.foo =\n" + "function() {};"); [EOL] } <line_num>: 5659,5668
public void testInheritanceCheck10_3() throws Exception { [EOL]     testTypes("/** @constructor */function Root() {};" + "/** @return {number} */" + "Root.prototype.foo = function() { return 1; };" + "/** @constructor\n @extends {Root} */function Super() {};" + "/** @constructor\n @extends {Super} */function Sub() {};" + "/** @override\n @return {string} */Sub.prototype.foo =\n" + "function() { return \"some string\" };", "mismatch of the foo property type and the type of the property it " + "overrides from superclass Root\n" + "original: function (this:Root): number\n" + "override: function (this:Sub): string"); [EOL] } <line_num>: 5670,5683
public void testInterfaceInheritanceCheck11() throws Exception { [EOL]     testTypes("/** @constructor */function Super() {};" + "/** @param {number} bar */Super.prototype.foo = function(bar) {};" + "/** @constructor\n @extends {Super} */function Sub() {};" + "/** @override\n  @param {string} bar */Sub.prototype.foo =\n" + "function(bar) {};", "mismatch of the foo property type and the type of the property it " + "overrides from superclass Super\n" + "original: function (this:Super, number): undefined\n" + "override: function (this:Sub, string): undefined"); [EOL] } <line_num>: 5685,5696
public void testInheritanceCheck12() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor */goog.Super = function() {};" + "goog.Super.prototype.foo = 3;" + "/** @constructor\n @extends {goog.Super} */goog.Sub = function() {};" + "/** @override */goog.Sub.prototype.foo = \"some string\";"); [EOL] } <line_num>: 5698,5705
public void testInheritanceCheck13() throws Exception { [EOL]     testTypes("var goog = {};\n" + "/** @constructor\n @extends {goog.Missing} */function Sub() {};" + "/** @override */Sub.prototype.foo = function() {};", "Bad type annotation. Unknown type goog.Missing"); [EOL] } <line_num>: 5707,5713
public void testInheritanceCheck14() throws Exception { [EOL]     testTypes("var goog = {};\n" + "/** @constructor\n @extends {goog.Missing} */\n" + "goog.Super = function() {};\n" + "/** @constructor\n @extends {goog.Super} */function Sub() {};" + "/** @override */Sub.prototype.foo = function() {};", "Bad type annotation. Unknown type goog.Missing"); [EOL] } <line_num>: 5715,5723
public void testInterfaceInheritanceCheck1() throws Exception { [EOL]     testTypes("/** @interface */function Super() {};" + "/** @desc description */Super.prototype.foo = function() {};" + "/** @constructor\n @implements {Super} */function Sub() {};" + "Sub.prototype.foo = function() {};", "property foo already defined on interface Super; use @override to " + "override it"); [EOL] } <line_num>: 5755,5763
public void testInterfaceInheritanceCheck2() throws Exception { [EOL]     testTypes("/** @interface */function Super() {};" + "/** @desc description */Super.prototype.foo = function() {};" + "/** @constructor\n @implements {Super} */function Sub() {};" + "/** @override */Sub.prototype.foo = function() {};"); [EOL] } <line_num>: 5765,5771
public void testInterfaceInheritanceCheck3() throws Exception { [EOL]     testTypes("/** @interface */function Root() {};" + "/** @return {number} */Root.prototype.foo = function() {};" + "/** @interface\n @extends {Root} */function Super() {};" + "/** @constructor\n @implements {Super} */function Sub() {};" + "/** @return {number} */Sub.prototype.foo = function() { return 1;};", "property foo already defined on interface Root; use @override to " + "override it"); [EOL] } <line_num>: 5773,5782
public void testInterfaceInheritanceCheck4() throws Exception { [EOL]     testTypes("/** @interface */function Root() {};" + "/** @return {number} */Root.prototype.foo = function() {};" + "/** @interface\n @extends {Root} */function Super() {};" + "/** @constructor\n @implements {Super} */function Sub() {};" + "/** @override\n * @return {number} */Sub.prototype.foo =\n" + "function() { return 1;};"); [EOL] } <line_num>: 5784,5792
public void testInterfaceInheritanceCheck5() throws Exception { [EOL]     testTypes("/** @interface */function Super() {};" + "/** @return {string} */Super.prototype.foo = function() {};" + "/** @constructor\n @implements {Super} */function Sub() {};" + "/** @override\n @return {number} */Sub.prototype.foo =\n" + "function() { return 1; };", "mismatch of the foo property type and the type of the property it " + "overrides from interface Super\n" + "original: function (this:Super): string\n" + "override: function (this:Sub): number"); [EOL] } <line_num>: 5794,5805
public void testInterfaceInheritanceCheck6() throws Exception { [EOL]     testTypes("/** @interface */function Root() {};" + "/** @return {string} */Root.prototype.foo = function() {};" + "/** @interface\n @extends {Root} */function Super() {};" + "/** @constructor\n @implements {Super} */function Sub() {};" + "/** @override\n @return {number} */Sub.prototype.foo =\n" + "function() { return 1; };", "mismatch of the foo property type and the type of the property it " + "overrides from interface Root\n" + "original: function (this:Root): string\n" + "override: function (this:Sub): number"); [EOL] } <line_num>: 5807,5819
public void testInterfaceInheritanceCheck7() throws Exception { [EOL]     testTypes("/** @interface */function Super() {};" + "/** @param {number} bar */Super.prototype.foo = function(bar) {};" + "/** @constructor\n @implements {Super} */function Sub() {};" + "/** @override\n  @param {string} bar */Sub.prototype.foo =\n" + "function(bar) {};", "mismatch of the foo property type and the type of the property it " + "overrides from interface Super\n" + "original: function (this:Super, number): undefined\n" + "override: function (this:Sub, string): undefined"); [EOL] } <line_num>: 5821,5832
public void testInterfaceInheritanceCheck8() throws Exception { [EOL]     testTypes("/** @constructor\n @implements {Super} */function Sub() {};" + "/** @override */Sub.prototype.foo = function() {};", new String[] { "Bad type annotation. Unknown type Super", "property foo not defined on any superclass of Sub" }); [EOL] } <line_num>: 5834,5842
public void testInterfacePropertyNotImplemented() throws Exception { [EOL]     testTypes("/** @interface */function Int() {};" + "/** @desc description */Int.prototype.foo = function() {};" + "/** @constructor\n @implements {Int} */function Foo() {};", "property foo on interface Int is not implemented by type Foo"); [EOL] } <line_num>: 5844,5850
public void testInterfacePropertyNotImplemented2() throws Exception { [EOL]     testTypes("/** @interface */function Int() {};" + "/** @desc description */Int.prototype.foo = function() {};" + "/** @interface \n @extends {Int} */function Int2() {};" + "/** @constructor\n @implements {Int2} */function Foo() {};", "property foo on interface Int is not implemented by type Foo"); [EOL] } <line_num>: 5852,5859
public void testStubConstructorImplementingInterface() throws Exception { [EOL]     testTypes("/** @interface */ function Int() {}\n" + "/** @desc description */Int.prototype.foo = function() {};" + "/** @constructor \n @implements {Int} */ var Foo;\n", "", null, false); [EOL] } <line_num>: 5861,5870
public void testObjectLiteral() throws Exception { [EOL]     Node n = parseAndTypeCheck("var a = {m1: 7, m2: 'hello'}"); [EOL]     Node nameNode = n.getFirstChild().getFirstChild(); [EOL]     Node objectNode = nameNode.getFirstChild(); [EOL]     assertEquals(Token.NAME, nameNode.getType()); [EOL]     assertEquals(Token.OBJECTLIT, objectNode.getType()); [EOL]     ObjectType objectType = (ObjectType) objectNode.getJSType(); [EOL]     assertTypeEquals(NUMBER_TYPE, objectType.getPropertyType("m1")); [EOL]     assertTypeEquals(STRING_TYPE, objectType.getPropertyType("m2")); [EOL]     assertTypeEquals(objectType, nameNode.getJSType()); [EOL] } <line_num>: 5872,5890
public void testObjectLiteralDeclaration1() throws Exception { [EOL]     testTypes("var x = {" + "/** @type {boolean} */ abc: true," + "/** @type {number} */ 'def': 0," + "/** @type {string} */ 3: 'fgh'" + "};"); [EOL] } <line_num>: 5892,5899
public void testCallDateConstructorAsFunction() throws Exception { [EOL]     Node n = parseAndTypeCheck("Date()"); [EOL]     assertTypeEquals(STRING_TYPE, n.getFirstChild().getFirstChild().getJSType()); [EOL] } <line_num>: 5901,5906
public void testCallErrorConstructorAsFunction() throws Exception { [EOL]     Node n = parseAndTypeCheck("Error('x')"); [EOL]     assertTypeEquals(ERROR_TYPE, n.getFirstChild().getFirstChild().getJSType()); [EOL] } <line_num>: 5911,5915
public void testCallArrayConstructorAsFunction() throws Exception { [EOL]     Node n = parseAndTypeCheck("Array()"); [EOL]     assertTypeEquals(ARRAY_TYPE, n.getFirstChild().getFirstChild().getJSType()); [EOL] } <line_num>: 5917,5921
public void testPropertyTypeOfUnionType() throws Exception { [EOL]     testTypes("var a = {};" + "/** @constructor */ a.N = function() {};\n" + "a.N.prototype.p = 1;\n" + "/** @constructor */ a.S = function() {};\n" + "a.S.prototype.p = 'a';\n" + "/** @param {!a.N|!a.S} x\n@return {string} */\n" + "var f = function(x) { return x.p; };", "inconsistent return type\n" + "found   : (number|string)\n" + "required: string"); [EOL] } <line_num>: 5923,5934
public void testAnnotatedPropertyOnInterface1() throws Exception { [EOL]     testTypes("/** @interface */ u.T = function() {};\n" + "/** @return {number} */ u.T.prototype.f = function() {};"); [EOL] } <line_num>: 5967,5972
public void testAnnotatedPropertyOnInterface2() throws Exception { [EOL]     testTypes("/** @interface */ u.T = function() {};\n" + "/** @return {number} */ u.T.prototype.f = function() { };"); [EOL] } <line_num>: 5974,5977
public void testAnnotatedPropertyOnInterface3() throws Exception { [EOL]     testTypes("/** @interface */ function T() {};\n" + "/** @return {number} */ T.prototype.f = function() { };"); [EOL] } <line_num>: 5979,5982
public void testAnnotatedPropertyOnInterface4() throws Exception { [EOL]     testTypes(CLOSURE_DEFS + "/** @interface */ function T() {};\n" + "/** @return {number} */ T.prototype.f = goog.abstractMethod;"); [EOL] } <line_num>: 5984,5989
public void testWarnUnannotatedPropertyOnInterface5() throws Exception { [EOL]     testTypes("/** @interface */ u.T = function () {};\n" + "/** @desc x does something */u.T.prototype.x = function() {};"); [EOL] } <line_num>: 6003,6006
public void testWarnUnannotatedPropertyOnInterface6() throws Exception { [EOL]     testTypes("/** @interface */ function T() {};\n" + "/** @desc x does something */T.prototype.x = function() {};"); [EOL] } <line_num>: 6008,6011
public void testWarnDataPropertyOnInterface3() throws Exception { [EOL]     testTypes("/** @interface */ u.T = function () {};\n" + "/** @type {number} */u.T.prototype.x = 1;", "interface members can only be empty property declarations, " + "empty functions, or goog.abstractMethod"); [EOL] } <line_num>: 6027,6032
public void testWarnDataPropertyOnInterface4() throws Exception { [EOL]     testTypes("/** @interface */ function T() {};\n" + "/** @type {number} */T.prototype.x = 1;", "interface members can only be empty property declarations, " + "empty functions, or goog.abstractMethod"); [EOL] } <line_num>: 6034,6039
public void testErrorMismatchingPropertyOnInterface4() throws Exception { [EOL]     testTypes("/** @interface */ u.T = function () {};\n" + "/** @param {Number} foo */u.T.prototype.x =\n" + "function() {};", "parameter foo does not appear in u.T.prototype.x's parameter list"); [EOL] } <line_num>: 6070,6075
public void testErrorMismatchingPropertyOnInterface5() throws Exception { [EOL]     testTypes("/** @interface */ function T() {};\n" + "/** @type {number} */T.prototype.x = function() { };", "assignment to property x of T.prototype\n" + "found   : function (): undefined\n" + "required: number"); [EOL] } <line_num>: 6077,6083
public void testErrorMismatchingPropertyOnInterface6() throws Exception { [EOL]     testClosureTypesMultipleWarnings("/** @interface */ function T() {};\n" + "/** @return {number} */T.prototype.x = 1", Lists.newArrayList("assignment to property x of T.prototype\n" + "found   : number\n" + "required: function (this:T): number", "interface members can only be empty property declarations, " + "empty functions, or goog.abstractMethod")); [EOL] } <line_num>: 6085,6095
public void testInterfaceNonEmptyFunction() throws Exception { [EOL]     testTypes("/** @interface */ function T() {};\n" + "T.prototype.x = function() { return 'foo'; }", "interface member functions must have an empty body"); [EOL] } <line_num>: 6097,6102
public void testDoubleNestedInterface() throws Exception { [EOL]     testTypes("/** @interface */ var I1 = function() {};\n" + "/** @interface */ I1.I2 = function() {};\n" + "/** @interface */ I1.I2.I3 = function() {};\n"); [EOL] } <line_num>: 6104,6108
public void testStaticDataPropertyOnNestedInterface() throws Exception { [EOL]     testTypes("/** @interface */ var I1 = function() {};\n" + "/** @interface */ I1.I2 = function() {};\n" + "/** @type {number} */ I1.I2.x = 1;\n"); [EOL] } <line_num>: 6110,6114
public void testInterfaceInstantiation() throws Exception { [EOL]     testTypes("/** @interface */var f = function(){}; new f", "cannot instantiate non-constructor"); [EOL] } <line_num>: 6116,6119
public void testPrototypeLoop() throws Exception { [EOL]     testClosureTypesMultipleWarnings(suppressMissingProperty("foo") + "/** @constructor \n * @extends {T} */var T = function() {};" + "alert((new T).foo);", Lists.newArrayList("Parse error. Cycle detected in inheritance chain of type T", "Could not resolve type in @extends tag of T")); [EOL] } <line_num>: 6121,6129
public void testDirectPrototypeAssign() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "/** @constructor */ function Bar() {}" + "/** @type {Array} */ Bar.prototype = new Foo()"); [EOL] } <line_num>: 6131,6137
public void testResolutionViaRegistry1() throws Exception { [EOL]     testTypes("/** @constructor */ u.T = function() {};\n" + "/** @type {(number|string)} */ u.T.prototype.a;\n" + "/**\n" + "* @param {u.T} t\n" + "* @return {string}\n" + "*/\n" + "var f = function(t) { return t.a; };", "inconsistent return type\n" + "found   : (number|string)\n" + "required: string"); [EOL] } <line_num>: 6142,6153
public void testResolutionViaRegistry2() throws Exception { [EOL]     testTypes("/** @constructor */ u.T = function() {" + "  this.a = 0; };\n" + "/**\n" + "* @param {u.T} t\n" + "* @return {string}\n" + "*/\n" + "var f = function(t) { return t.a; };", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 6155,6167
public void testResolutionViaRegistry3() throws Exception { [EOL]     testTypes("/** @constructor */ u.T = function() {};\n" + "/** @type {(number|string)} */ u.T.prototype.a = 0;\n" + "/**\n" + "* @param {u.T} t\n" + "* @return {string}\n" + "*/\n" + "var f = function(t) { return t.a; };", "inconsistent return type\n" + "found   : (number|string)\n" + "required: string"); [EOL] } <line_num>: 6169,6180
public void testResolutionViaRegistry4() throws Exception { [EOL]     testTypes("/** @constructor */ u.A = function() {};\n" + "/**\n* @constructor\n* @extends {u.A}\n*/\nu.A.A = function() {}\n;" + "/**\n* @constructor\n* @extends {u.A}\n*/\nu.A.B = function() {};\n" + "var ab = new u.A.B();\n" + "/** @type {!u.A} */ var a = ab;\n" + "/** @type {!u.A.A} */ var aa = ab;\n", "initializing variable\n" + "found   : u.A.B\n" + "required: u.A.A"); [EOL] } <line_num>: 6182,6192
public void testResolutionViaRegistry5() throws Exception { [EOL]     Node n = parseAndTypeCheck("/** @constructor */ u.T = function() {}; u.T"); [EOL]     JSType type = n.getLastChild().getLastChild().getJSType(); [EOL]     assertFalse(type.isUnknownType()); [EOL]     assertTrue(type instanceof FunctionType); [EOL]     assertEquals("u.T", ((FunctionType) type).getInstanceType().getReferenceName()); [EOL] } <line_num>: 6194,6201
public void testGatherProperyWithoutAnnotation1() throws Exception { [EOL]     Node n = parseAndTypeCheck("/** @constructor */ var T = function() {};" + "/** @type {!T} */var t; t.x; t;"); [EOL]     JSType type = n.getLastChild().getLastChild().getJSType(); [EOL]     assertFalse(type.isUnknownType()); [EOL]     assertTrue(type instanceof ObjectType); [EOL]     ObjectType objectType = (ObjectType) type; [EOL]     assertFalse(objectType.hasProperty("x")); [EOL]     Asserts.assertTypeCollectionEquals(Lists.newArrayList(objectType), registry.getTypesWithProperty("x")); [EOL] } <line_num>: 6203,6214
public void testGatherProperyWithoutAnnotation2() throws Exception { [EOL]     TypeCheckResult ns = parseAndTypeCheckWithScope("/** @type {!Object} */var t; t.x; t;"); [EOL]     Node n = ns.root; [EOL]     Scope s = ns.scope; [EOL]     JSType type = n.getLastChild().getLastChild().getJSType(); [EOL]     assertFalse(type.isUnknownType()); [EOL]     assertTypeEquals(type, OBJECT_TYPE); [EOL]     assertTrue(type instanceof ObjectType); [EOL]     ObjectType objectType = (ObjectType) type; [EOL]     assertFalse(objectType.hasProperty("x")); [EOL]     Asserts.assertTypeCollectionEquals(Lists.newArrayList(OBJECT_TYPE), registry.getTypesWithProperty("x")); [EOL] } <line_num>: 6216,6230
public void testFunctionMasksVariableBug() throws Exception { [EOL]     testTypes("var x = 4; var f = function x(b) { return b ? 1 : x(true); };", "function x masks variable (IE bug)"); [EOL] } <line_num>: 6232,6235
public void testDfa1() throws Exception { [EOL]     testTypes("var x = null;\n x = 1;\n /** @type number */ var y = x;"); [EOL] } <line_num>: 6237,6239
public void testDfa2() throws Exception { [EOL]     testTypes("function u() {}\n" + "/** @return {number} */ function f() {\nvar x = 'todo';\n" + "if (u()) { x = 1; } else { x = 2; } return x;\n}"); [EOL] } <line_num>: 6241,6245
public void testDfa3() throws Exception { [EOL]     testTypes("function u() {}\n" + "/** @return {number} */ function f() {\n" + "/** @type {number|string} */ var x = 'todo';\n" + "if (u()) { x = 1; } else { x = 2; } return x;\n}"); [EOL] } <line_num>: 6247,6252
public void testDfa4() throws Exception { [EOL]     testTypes("/** @param {Date?} d */ function f(d) {\n" + "if (!d) { return; }\n" + "/** @type {!Date} */ var e = d;\n}"); [EOL] } <line_num>: 6254,6258
public void testDfa5() throws Exception { [EOL]     testTypes("/** @return {string?} */ function u() {return 'a';}\n" + "/** @param {string?} x\n@return {string} */ function f(x) {\n" + "while (!x) { x = u(); }\nreturn x;\n}"); [EOL] } <line_num>: 6260,6264
public void testDfa6() throws Exception { [EOL]     testTypes("/** @return {Object?} */ function u() {return {};}\n" + "/** @param {Object?} x */ function f(x) {\n" + "while (x) { x = u(); if (!x) { x = u(); } }\n}"); [EOL] } <line_num>: 6266,6270
public void testDfa7() throws Exception { [EOL]     testTypes("/** @constructor */ var T = function() {};\n" + "/** @type {Date?} */ T.prototype.x = null;\n" + "/** @param {!T} t */ function f(t) {\n" + "if (!t.x) { return; }\n" + "/** @type {!Date} */ var e = t.x;\n}"); [EOL] } <line_num>: 6272,6278
public void testDfa8() throws Exception { [EOL]     testTypes("/** @constructor */ var T = function() {};\n" + "/** @type {number|string} */ T.prototype.x = '';\n" + "function u() {}\n" + "/** @param {!T} t\n@return {number} */ function f(t) {\n" + "if (u()) { t.x = 1; } else { t.x = 2; } return t.x;\n}"); [EOL] } <line_num>: 6280,6286
public void testDfa9() throws Exception { [EOL]     testTypes("function f() {\n/** @type {string?} */var x;\nx = null;\n" + "if (x == null) { return 0; } else { return 1; } }", "condition always evaluates to true\n" + "left : null\n" + "right: null"); [EOL] } <line_num>: 6288,6294
public void testDfa10() throws Exception { [EOL]     testTypes("/** @param {null} x */ function g(x) {}" + "/** @param {string?} x */function f(x) {\n" + "if (!x) { x = ''; }\n" + "if (g(x)) { return 0; } else { return 1; } }", "actual parameter 1 of g does not match formal parameter\n" + "found   : string\n" + "required: null"); [EOL] } <line_num>: 6296,6304
public void testDfa11() throws Exception { [EOL]     testTypes("/** @param {string} opt_x\n@return {string} */\n" + "function f(opt_x) { if (!opt_x) { " + "throw new Error('x cannot be empty'); } return opt_x; }"); [EOL] } <line_num>: 6306,6310
public void testDfa12() throws Exception { [EOL]     testTypes("/** @param {string} x \n * @constructor \n */" + "var Bar = function(x) {};" + "/** @param {string} x */ function g(x) { return true; }" + "/** @param {string|number} opt_x */ " + "function f(opt_x) { " + "  if (opt_x) { new Bar(g(opt_x) && 'x'); }" + "}", "actual parameter 1 of g does not match formal parameter\n" + "found   : (number|string)\n" + "required: string"); [EOL] } <line_num>: 6312,6323
public void testDfa13() throws Exception { [EOL]     testTypes("/**\n" + " * @param {string} x \n" + " * @param {number} y \n" + " * @param {number} z \n" + " */" + "function g(x, y, z) {}" + "function f() { " + "  var x = 'a'; g(x, x = 3, x);" + "}"); [EOL] } <line_num>: 6325,6336
public void testTypeInferenceWithCast1() throws Exception { [EOL]     testTypes("/**@return {(number,null,undefined)}*/function u(x) {return null;}" + "/**@param {number?} x\n@return {number?}*/function f(x) {return x;}" + "/**@return {number?}*/function g(x) {" + "var y = /**@type {number?}*/(u(x)); return f(y);}"); [EOL] } <line_num>: 6338,6344
public void testTypeInferenceWithCast2() throws Exception { [EOL]     testTypes("/**@return {(number,null,undefined)}*/function u(x) {return null;}" + "/**@param {number?} x\n@return {number?}*/function f(x) {return x;}" + "/**@return {number?}*/function g(x) {" + "var y; y = /**@type {number?}*/(u(x)); return f(y);}"); [EOL] } <line_num>: 6346,6352
public void testTypeInferenceWithCast3() throws Exception { [EOL]     testTypes("/**@return {(number,null,undefined)}*/function u(x) {return 1;}" + "/**@return {number}*/function g(x) {" + "return /**@type {number}*/(u(x));}"); [EOL] } <line_num>: 6354,6359
public void testTypeInferenceWithCast4() throws Exception { [EOL]     testTypes("/**@return {(number,null,undefined)}*/function u(x) {return 1;}" + "/**@return {number}*/function g(x) {" + "return /**@type {number}*/(u(x)) && 1;}"); [EOL] } <line_num>: 6361,6366
public void testTypeInferenceWithCast5() throws Exception { [EOL]     testTypes("/** @param {number} x */ function foo(x) {}" + "/** @param {{length:*}} y */ function bar(y) {" + "  /** @type {string} */ y.length;" + "  foo(y.length);" + "}", "actual parameter 1 of foo does not match formal parameter\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 6368,6378
public void testTypeInferenceWithClosure1() throws Exception { [EOL]     testTypes("/** @return {boolean} */" + "function f() {" + "  /** @type {?string} */ var x = null;" + "  function g() { x = 'y'; } g(); " + "  return x == null;" + "}"); [EOL] } <line_num>: 6380,6388
public void testTypeInferenceWithClosure2() throws Exception { [EOL]     testTypes("/** @return {boolean} */" + "function f() {" + "  /** @type {?string} */ var x = null;" + "  function g() { x = 'y'; } g(); " + "  return x === 3;" + "}", "condition always evaluates to false\n" + "left : (null|string|undefined)\n" + "right: number"); [EOL] } <line_num>: 6390,6401
public void testForwardPropertyReference() throws Exception { [EOL]     testTypes("/** @constructor */ var Foo = function() { this.init(); };" + "/** @return {string} */" + "Foo.prototype.getString = function() {" + "  return this.number_;" + "};" + "Foo.prototype.init = function() {" + "  /** @type {number} */" + "  this.number_ = 3;" + "};", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 6403,6416
public void testNoForwardTypeDeclaration() throws Exception { [EOL]     testTypes("/** @param {MyType} x */ function f(x) {}", "Bad type annotation. Unknown type MyType"); [EOL] } <line_num>: 6418,6422
public void testNoForwardTypeDeclarationAndNoBraces() throws Exception { [EOL]     testTypes("/** @return The result. */ function f() {}"); [EOL] } <line_num>: 6424,6426
public void testForwardTypeDeclaration1() throws Exception { [EOL]     testClosureTypes("goog.addDependency();" + "goog.addDependency('y', [goog]);" + "goog.addDependency('zzz.js', ['MyType'], []);" + "/** @param {MyType} x \n * @return {number} */" + "function f(x) { return 3; }", null); [EOL] } <line_num>: 6428,6437
public void testForwardTypeDeclaration2() throws Exception { [EOL]     String f = "goog.addDependency('zzz.js', ['MyType'], []);" + "/** @param {MyType} x */ function f(x) { }"; [EOL]     testClosureTypes(f, null); [EOL]     testClosureTypes(f + "f(3);", "actual parameter 1 of f does not match formal parameter\n" + "found   : number\n" + "required: (MyType|null|undefined)"); [EOL] } <line_num>: 6439,6447
public void testForwardTypeDeclaration3() throws Exception { [EOL]     testClosureTypes("goog.addDependency('zzz.js', ['MyType'], []);" + "/** @param {MyType} x */ function f(x) { return x; }" + "/** @constructor */ var MyType = function() {};" + "f(3);", "actual parameter 1 of f does not match formal parameter\n" + "found   : number\n" + "required: (MyType|null|undefined)"); [EOL] } <line_num>: 6449,6458
public void testDuplicateTypeDef() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor */ goog.Bar = function() {};" + "/** @typedef {number} */ goog.Bar;", "variable goog.Bar redefined with type None, " + "original definition at [testcode]:1 " + "with type function (new:goog.Bar): undefined"); [EOL] } <line_num>: 6460,6468
public void testTypeDef1() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @typedef {number} */ goog.Bar;" + "/** @param {goog.Bar} x */ function f(x) {}" + "f(3);"); [EOL] } <line_num>: 6470,6476
public void testTypeDef2() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @typedef {number} */ goog.Bar;" + "/** @param {goog.Bar} x */ function f(x) {}" + "f('3');", "actual parameter 1 of f does not match formal parameter\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 6478,6487
public void testTypeDef3() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @typedef {number} */ var Bar;" + "/** @param {Bar} x */ function f(x) {}" + "f('3');", "actual parameter 1 of f does not match formal parameter\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 6489,6498
public void testCircularTypeDef() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @typedef {number|Array.<goog.Bar>} */ goog.Bar;" + "/** @param {goog.Bar} x */ function f(x) {}" + "f(3); f([3]); f([[3]]);"); [EOL] } <line_num>: 6500,6506
public void testGetTypedPercent1() throws Exception { [EOL]     String js = "var id = function(x) { return x; }\n" + "var id2 = function(x) { return id(x); }"; [EOL]     assertEquals(50.0, getTypedPercent(js), 0.1); [EOL] } <line_num>: 6508,6512
public void testGetTypedPercent2() throws Exception { [EOL]     String js = "var x = {}; x.y = 1;"; [EOL]     assertEquals(100.0, getTypedPercent(js), 0.1); [EOL] } <line_num>: 6514,6517
public void testGetTypedPercent3() throws Exception { [EOL]     String js = "var f = function(x) { x.a = x.b; }"; [EOL]     assertEquals(50.0, getTypedPercent(js), 0.1); [EOL] } <line_num>: 6519,6522
public void testGetTypedPercent4() throws Exception { [EOL]     String js = "var n = {};\n /** @constructor */ n.T = function() {};\n" + "/** @type n.T */ var x = new n.T();"; [EOL]     assertEquals(100.0, getTypedPercent(js), 0.1); [EOL] } <line_num>: 6524,6528
private double getTypedPercent(String js) throws Exception { [EOL]     Node n = compiler.parseTestCode(js); [EOL]     Node externs = new Node(Token.BLOCK); [EOL]     Node externAndJsRoot = new Node(Token.BLOCK, externs, n); [EOL]     externAndJsRoot.setIsSyntheticBlock(true); [EOL]     TypeCheck t = makeTypeCheck(); [EOL]     t.processForTesting(null, n); [EOL]     return t.getTypedPercent(); [EOL] } <line_num>: 6530,6540
private ObjectType getInstanceType(Node js1Node) { [EOL]     JSType type = js1Node.getFirstChild().getJSType(); [EOL]     assertNotNull(type); [EOL]     assertTrue(type instanceof FunctionType); [EOL]     FunctionType functionType = (FunctionType) type; [EOL]     assertTrue(functionType.isConstructor()); [EOL]     return functionType.getInstanceType(); [EOL] } <line_num>: 6542,6549
public void testPrototypePropertyReference() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("" + "/** @constructor */\n" + "function Foo() {}\n" + "/** @param {number} a */\n" + "Foo.prototype.bar = function(a){};\n" + "/** @param {Foo} f */\n" + "function baz(f) {\n" + "  Foo.prototype.bar.call(f, 3);\n" + "}"); [EOL]     assertEquals(0, compiler.getErrorCount()); [EOL]     assertEquals(0, compiler.getWarningCount()); [EOL]     assertTrue(p.scope.getVar("Foo").getType() instanceof FunctionType); [EOL]     FunctionType fooType = (FunctionType) p.scope.getVar("Foo").getType(); [EOL]     assertEquals("function (this:Foo, number): undefined", fooType.getPrototype().getPropertyType("bar").toString()); [EOL] } <line_num>: 6551,6568
public void testResolvingNamedTypes() throws Exception { [EOL]     String js = "" + "/** @constructor */\n" + "var Foo = function() {}\n" + "/** @param {number} a */\n" + "Foo.prototype.foo = function(a) {\n" + "  return this.baz().toString();\n" + "};\n" + "/** @return {Baz} */\n" + "Foo.prototype.baz = function() { return new Baz(); };\n" + "/** @constructor\n" + "  * @extends Foo */\n" + "var Bar = function() {};" + "/** @constructor */\n" + "var Baz = function() {};"; [EOL]     assertEquals(100.0, getTypedPercent(js), 0.1); [EOL] } <line_num>: 6570,6586
public void testMissingProperty1() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "Foo.prototype.bar = function() { return this.a; };" + "Foo.prototype.baz = function() { this.a = 3; };"); [EOL] } <line_num>: 6588,6593
public void testMissingProperty2() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "Foo.prototype.bar = function() { return this.a; };" + "Foo.prototype.baz = function() { this.b = 3; };", "Property a never defined on Foo"); [EOL] } <line_num>: 6595,6601
public void testMissingProperty3() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "Foo.prototype.bar = function() { return this.a; };" + "(new Foo).a = 3;"); [EOL] } <line_num>: 6603,6608
public void testMissingProperty4() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "Foo.prototype.bar = function() { return this.a; };" + "(new Foo).b = 3;", "Property a never defined on Foo"); [EOL] } <line_num>: 6610,6616
public void testMissingProperty5() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "Foo.prototype.bar = function() { return this.a; };" + "/** @constructor */ function Bar() { this.a = 3; };", "Property a never defined on Foo"); [EOL] } <line_num>: 6618,6624
public void testMissingProperty6() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "Foo.prototype.bar = function() { return this.a; };" + "/** @constructor \n * @extends {Foo} */ " + "function Bar() { this.a = 3; };"); [EOL] } <line_num>: 6626,6632
public void testMissingProperty7() throws Exception { [EOL]     testTypes("/** @param {Object} obj */" + "function foo(obj) { return obj.impossible; }", "Property impossible never defined on Object"); [EOL] } <line_num>: 6634,6639
public void testMissingProperty8() throws Exception { [EOL]     testTypes("/** @param {Object} obj */" + "function foo(obj) { return typeof obj.impossible; }"); [EOL] } <line_num>: 6641,6645
public void testMissingProperty9() throws Exception { [EOL]     testTypes("/** @param {Object} obj */" + "function foo(obj) { if (obj.impossible) { return true; } }"); [EOL] } <line_num>: 6647,6651
public void testMissingProperty10() throws Exception { [EOL]     testTypes("/** @param {Object} obj */" + "function foo(obj) { while (obj.impossible) { return true; } }"); [EOL] } <line_num>: 6653,6657
public void testMissingProperty11() throws Exception { [EOL]     testTypes("/** @param {Object} obj */" + "function foo(obj) { for (;obj.impossible;) { return true; } }"); [EOL] } <line_num>: 6659,6663
public void testMissingProperty12() throws Exception { [EOL]     testTypes("/** @param {Object} obj */" + "function foo(obj) { do { } while (obj.impossible); }"); [EOL] } <line_num>: 6665,6669
public void testMissingProperty13() throws Exception { [EOL]     testTypes("var goog = {}; goog.isDef = function(x) { return false; };" + "/** @param {Object} obj */" + "function foo(obj) { return goog.isDef(obj.impossible); }"); [EOL] } <line_num>: 6671,6676
public void testMissingProperty14() throws Exception { [EOL]     testTypes("var goog = {}; goog.isDef = function(x) { return false; };" + "/** @param {Object} obj */" + "function foo(obj) { return goog.isNull(obj.impossible); }", "Property isNull never defined on goog"); [EOL] } <line_num>: 6678,6684
public void testMissingProperty15() throws Exception { [EOL]     testTypes("/** @param {Object} x */" + "function f(x) { if (x.foo) { x.foo(); } }"); [EOL] } <line_num>: 6686,6690
public void testMissingProperty16() throws Exception { [EOL]     testTypes("/** @param {Object} x */" + "function f(x) { x.foo(); if (x.foo) {} }", "Property foo never defined on Object"); [EOL] } <line_num>: 6692,6697
public void testMissingProperty17() throws Exception { [EOL]     testTypes("/** @param {Object} x */" + "function f(x) { if (typeof x.foo == 'function') { x.foo(); } }"); [EOL] } <line_num>: 6699,6703
public void testMissingProperty18() throws Exception { [EOL]     testTypes("/** @param {Object} x */" + "function f(x) { if (x.foo instanceof Function) { x.foo(); } }"); [EOL] } <line_num>: 6705,6709
public void testMissingProperty19() throws Exception { [EOL]     testTypes("/** @param {Object} x */" + "function f(x) { if (x.bar) { if (x.foo) {} } else { x.foo(); } }", "Property foo never defined on Object"); [EOL] } <line_num>: 6711,6716
public void testMissingProperty21() throws Exception { [EOL]     testTypes("/** @param {Object} x */" + "function f(x) { x.foo && x.foo(); }"); [EOL] } <line_num>: 6718,6722
public void testMissingProperty22() throws Exception { [EOL]     testTypes("/** @param {Object} x \n * @return {boolean} */" + "function f(x) { return x.foo ? x.foo() : true; }"); [EOL] } <line_num>: 6724,6728
public void testMissingProperty23() throws Exception { [EOL]     testTypes("function f(x) { x.impossible(); }", "Property impossible never defined on x"); [EOL] } <line_num>: 6730,6734
public void testMissingProperty24() throws Exception { [EOL]     testClosureTypes("goog.addDependency('zzz.js', ['MissingType'], []);" + "/** @param {MissingType} x */" + "function f(x) { x.impossible(); }", null); [EOL] } <line_num>: 6736,6741
public void testMissingProperty25() throws Exception { [EOL]     testTypes("/** @constructor */ var Foo = function() {};" + "Foo.prototype.bar = function() {};" + "/** @constructor */ var FooAlias = Foo;" + "(new FooAlias()).bar();"); [EOL] } <line_num>: 6743,6749
public void testMissingProperty26() throws Exception { [EOL]     testTypes("/** @constructor */ var Foo = function() {};" + "/** @constructor */ var FooAlias = Foo;" + "FooAlias.prototype.bar = function() {};" + "(new Foo()).bar();"); [EOL] } <line_num>: 6751,6757
public void testMissingProperty27() throws Exception { [EOL]     testClosureTypes("goog.addDependency('zzz.js', ['MissingType'], []);" + "/** @param {?MissingType} x */" + "function f(x) {" + "  for (var parent = x; parent; parent = parent.getParent()) {}" + "}", null); [EOL] } <line_num>: 6759,6766
public void testMissingProperty28() throws Exception { [EOL]     testTypes("function f(obj) {" + "  /** @type {*} */ obj.foo;" + "  return obj.foo;" + "}"); [EOL]     testTypes("function f(obj) {" + "  /** @type {*} */ obj.foo;" + "  return obj.foox;" + "}", "Property foox never defined on obj"); [EOL] } <line_num>: 6768,6780
public void testMissingProperty29() throws Exception { [EOL]     testTypes("/** @constructor */ var Foo;" + "Foo.prototype.opera;" + "Foo.prototype.opera.postError;", "", null, false); [EOL] } <line_num>: 6782,6792
public void testDeclaredNativeTypeEquality() throws Exception { [EOL]     Node n = parseAndTypeCheck("/** @constructor */ function Object() {};"); [EOL]     assertEquals(registry.getNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE), n.getFirstChild().getJSType()); [EOL] } <line_num>: 6794,6798
public void testUndefinedVar() throws Exception { [EOL]     Node n = parseAndTypeCheck("var undefined;"); [EOL]     assertEquals(registry.getNativeType(JSTypeNative.VOID_TYPE), n.getFirstChild().getFirstChild().getJSType()); [EOL] } <line_num>: 6800,6804
public void testFlowScopeBug1() throws Exception { [EOL]     Node n = parseAndTypeCheck("/** @param {number} a \n" + "* @param {number} b */\n" + "function f(a, b) {\n" + "/** @type number */" + "var i = 0;" + "for (; (i + a) < b; ++i) {}}"); [EOL]     assertEquals(registry.getNativeType(JSTypeNative.NUMBER_TYPE), n.getFirstChild().getLastChild().getLastChild().getFirstChild().getNext().getFirstChild().getJSType()); [EOL] } <line_num>: 6806,6818
public void testFlowScopeBug2() throws Exception { [EOL]     Node n = parseAndTypeCheck("/** @constructor */ function Foo() {};\n" + "Foo.prototype.hi = false;" + "function foo(a, b) {\n" + "  /** @type Array */" + "  var arr;" + "  /** @type number */" + "  var iter;" + "  for (iter = 0; iter < arr.length; ++ iter) {" + "    /** @type Foo */" + "    var afoo = arr[iter];" + "    afoo;" + "  }" + "}"); [EOL]     assertTypeEquals(registry.createOptionalType(registry.createNullableType(registry.getType("Foo"))), n.getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getJSType()); [EOL] } <line_num>: 6820,6840
public void testAddSingletonGetter() { [EOL]     Node n = parseAndTypeCheck("/** @constructor */ function Foo() {};\n" + "goog.addSingletonGetter(Foo);"); [EOL]     ObjectType o = (ObjectType) n.getFirstChild().getJSType(); [EOL]     assertEquals("function (): Foo", o.getPropertyType("getInstance").toString()); [EOL]     assertEquals("Foo", o.getPropertyType("instance_").toString()); [EOL] } <line_num>: 6842,6850
public void testTypeCheckStandaloneAST() throws Exception { [EOL]     Node n = compiler.parseTestCode("function Foo() { }"); [EOL]     typeCheck(n); [EOL]     MemoizedScopeCreator scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler)); [EOL]     Scope topScope = scopeCreator.createScope(n, null); [EOL]     Node second = compiler.parseTestCode("new Foo"); [EOL]     Node externs = new Node(Token.BLOCK); [EOL]     Node externAndJsRoot = new Node(Token.BLOCK, externs, second); [EOL]     externAndJsRoot.setIsSyntheticBlock(true); [EOL]     new TypeCheck(compiler, new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(), registry), registry, topScope, scopeCreator, CheckLevel.WARNING, CheckLevel.OFF).process(null, second); [EOL]     assertEquals(1, compiler.getWarningCount()); [EOL]     assertEquals("cannot instantiate non-constructor", compiler.getWarnings()[0].description); [EOL] } <line_num>: 6852,6875
private void checkObjectType(ObjectType objectType, String propertyName, JSType expectedType) { [EOL]     assertTrue("Expected " + objectType.getReferenceName() + " to have property " + propertyName, objectType.hasProperty(propertyName)); [EOL]     assertTypeEquals("Expected " + objectType.getReferenceName() + "'s property " + propertyName + " to have type " + expectedType, expectedType, objectType.getPropertyType(propertyName)); [EOL] } <line_num>: 6877,6886
private void testTypes(String js) throws Exception { [EOL]     testTypes(js, (String) null); [EOL] } <line_num>: 6888,6890
private void testTypes(String js, String description) throws Exception { [EOL]     testTypes(js, description, false); [EOL] } <line_num>: 6892,6894
private void testTypes(String js, DiagnosticType type) throws Exception { [EOL]     testTypes(js, type.format(), false); [EOL] } <line_num>: 6896,6898
private void testClosureTypes(String js, String description) throws Exception { [EOL]     testClosureTypesMultipleWarnings(js, description == null ? null : Lists.newArrayList(description)); [EOL] } <line_num>: 6900,6904
private void testClosureTypesMultipleWarnings(String js, List<String> descriptions) throws Exception { [EOL]     Node n = compiler.parseTestCode(js); [EOL]     Node externs = new Node(Token.BLOCK); [EOL]     Node externAndJsRoot = new Node(Token.BLOCK, externs, n); [EOL]     externAndJsRoot.setIsSyntheticBlock(true); [EOL]     assertEquals("parsing error: " + Joiner.on(", ").join(compiler.getErrors()), 0, compiler.getErrorCount()); [EOL]     new ProcessClosurePrimitives(compiler, null, CheckLevel.ERROR).process(null, n); [EOL]     CodingConvention convention = compiler.getCodingConvention(); [EOL]     new TypeCheck(compiler, new ClosureReverseAbstractInterpreter(convention, registry).append(new SemanticReverseAbstractInterpreter(convention, registry)).getFirst(), registry).processForTesting(null, n); [EOL]     assertEquals(0, compiler.getErrorCount()); [EOL]     if (descriptions == null) { [EOL]         assertEquals("unexpected warning(s) : " + Joiner.on(", ").join(compiler.getWarnings()), 0, compiler.getWarningCount()); [EOL]     } else { [EOL]         assertEquals(descriptions.size(), compiler.getWarningCount()); [EOL]         Set<String> actualWarningDescriptions = Sets.newHashSet(); [EOL]         for (int i = 0; i < descriptions.size(); i++) { [EOL]             actualWarningDescriptions.add(compiler.getWarnings()[i].description); [EOL]         } [EOL]         assertEquals(Sets.newHashSet(descriptions), actualWarningDescriptions); [EOL]     } [EOL] } <line_num>: 6906,6947
void testTypes(String js, String description, boolean isError) throws Exception { [EOL]     testTypes(DEFAULT_EXTERNS, js, description, isError); [EOL] } <line_num>: 6949,6952
void testTypes(String externs, String js, String description, boolean isError) throws Exception { [EOL]     Node n = parseAndTypeCheck(externs, js); [EOL]     JSError[] errors = compiler.getErrors(); [EOL]     if (description != null && isError) { [EOL]         assertTrue("expected an error", errors.length > 0); [EOL]         assertEquals(description, errors[0].description); [EOL]         errors = Arrays.asList(errors).subList(1, errors.length).toArray(new JSError[errors.length - 1]); [EOL]     } [EOL]     if (errors.length > 0) { [EOL]         fail("unexpected error(s):\n" + Joiner.on("\n").join(errors)); [EOL]     } [EOL]     JSError[] warnings = compiler.getWarnings(); [EOL]     if (description != null && !isError) { [EOL]         assertTrue("expected a warning", warnings.length > 0); [EOL]         assertEquals(description, warnings[0].description); [EOL]         warnings = Arrays.asList(warnings).subList(1, warnings.length).toArray(new JSError[warnings.length - 1]); [EOL]     } [EOL]     if (warnings.length > 0) { [EOL]         fail("unexpected warnings(s):\n" + Joiner.on("\n").join(warnings)); [EOL]     } [EOL] } <line_num>: 6954,6979
private Node parseAndTypeCheck(String js) { [EOL]     return parseAndTypeCheck(DEFAULT_EXTERNS, js); [EOL] } <line_num>: 6984,6986
private Node parseAndTypeCheck(String externs, String js) { [EOL]     return parseAndTypeCheckWithScope(externs, js).root; [EOL] } <line_num>: 6988,6990
private TypeCheckResult parseAndTypeCheckWithScope(String js) { [EOL]     return parseAndTypeCheckWithScope(DEFAULT_EXTERNS, js); [EOL] } <line_num>: 6996,6998
private TypeCheckResult parseAndTypeCheckWithScope(String externs, String js) { [EOL]     compiler.init(Lists.newArrayList(SourceFile.fromCode("[externs]", externs)), Lists.newArrayList(SourceFile.fromCode("[testcode]", js)), compiler.getOptions()); [EOL]     Node n = compiler.getInput(new InputId("[testcode]")).getAstRoot(compiler); [EOL]     Node externsNode = compiler.getInput(new InputId("[externs]")).getAstRoot(compiler); [EOL]     Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n); [EOL]     externAndJsRoot.setIsSyntheticBlock(true); [EOL]     assertEquals("parsing error: " + Joiner.on(", ").join(compiler.getErrors()), 0, compiler.getErrorCount()); [EOL]     Scope s = makeTypeCheck().processForTesting(externsNode, n); [EOL]     return new TypeCheckResult(n, s); [EOL] } <line_num>: 7000,7019
private Node typeCheck(Node n) { [EOL]     Node externsNode = new Node(Token.BLOCK); [EOL]     Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n); [EOL]     externAndJsRoot.setIsSyntheticBlock(true); [EOL]     makeTypeCheck().processForTesting(null, n); [EOL]     return n; [EOL] } <line_num>: 7021,7028
private TypeCheck makeTypeCheck() { [EOL]     return new TypeCheck(compiler, new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(), registry), registry); [EOL] } <line_num>: 7030,7036
void testTypes(String js, String[] warnings) throws Exception { [EOL]     Node n = compiler.parseTestCode(js); [EOL]     assertEquals(0, compiler.getErrorCount()); [EOL]     Node externsNode = new Node(Token.BLOCK); [EOL]     Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n); [EOL]     makeTypeCheck().processForTesting(null, n); [EOL]     assertEquals(0, compiler.getErrorCount()); [EOL]     if (warnings != null) { [EOL]         assertEquals(warnings.length, compiler.getWarningCount()); [EOL]         JSError[] messages = compiler.getWarnings(); [EOL]         for (int i = 0; i < warnings.length && i < compiler.getWarningCount(); i++) { [EOL]             assertEquals(warnings[i], messages[i].description); [EOL]         } [EOL]     } else { [EOL]         assertEquals(0, compiler.getWarningCount()); [EOL]     } [EOL] } <line_num>: 7038,7056
String suppressMissingProperty(String... props) { [EOL]     String result = "function dummy(x) { "; [EOL]     for (String prop : props) { [EOL]         result += "x." + prop + " = 3;"; [EOL]     } [EOL]     return result + "}"; [EOL] } <line_num>: 7058,7064
