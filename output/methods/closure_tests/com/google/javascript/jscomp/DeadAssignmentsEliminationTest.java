public DeadAssignmentsEliminationTest() { [EOL]     super("var extern;"); [EOL] } <line_num>: 27,29
@Override [EOL] public void setUp() { [EOL]     super.enableLineNumberCheck(true); [EOL] } <line_num>: 31,34
@Override [EOL] public void process(Node externs, Node js) { [EOL]     NodeTraversal.traverse(compiler, js, new DeadAssignmentsElimination(compiler)); [EOL] } <line_num>: 39,43
@Override [EOL] public CompilerPass getProcessor(final Compiler compiler) { [EOL]     return new CompilerPass() { [EOL]  [EOL]         @Override [EOL]         public void process(Node externs, Node js) { [EOL]             NodeTraversal.traverse(compiler, js, new DeadAssignmentsElimination(compiler)); [EOL]         } [EOL]     }; [EOL] } <line_num>: 36,45
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 47,50
public void testSimple() { [EOL]     inFunction("var a; a=1", "var a; 1"); [EOL]     inFunction("var a; a=1+1", "var a; 1+1"); [EOL]     inFunction("var a; a=foo();", "var a; foo()"); [EOL]     inFunction("a=1; var a; a=foo();", "1; var a; foo();"); [EOL]     inFunction("var a; a=function f(){}"); [EOL] } <line_num>: 52,60
public void testLoops() { [EOL]     inFunction("for(var a=0; a<10; a++) {}"); [EOL]     inFunction("var x; for(var a=0; a<10; a++) {x=a}; a(x)"); [EOL]     inFunction("var x; for(var a=0; x=a<10; a++) {}", "var x; for(var a=0; a<10; a++) {}"); [EOL]     inFunction("var x; for(var a=0; a<10; x=a) {}", "var x; for(var a=0; a<10; a) {}"); [EOL]     inFunction("var x; for(var a=0; a<10; x=a,a++) {}", "var x; for(var a=0; a<10; a,a++) {}"); [EOL]     inFunction("var x; for(var a=0; a<10; a++,x=a) {}", "var x; for(var a=0; a<10; a++,a) {}"); [EOL]     inFunction("var x;for(var a=0; a<10; a++) {x=1}", "var x;for(var a=0; a<10; a++) {1}"); [EOL]     inFunction("var x; x=1; do{x=2}while(0); x", "var x; 1; do{x=2}while(0); x"); [EOL]     inFunction("var x; x=1; while(1){x=2}; x"); [EOL] } <line_num>: 62,78
public void testMultiPaths() { [EOL]     inFunction("var x,y; if(x)y=1;", "var x,y; if(x)1;"); [EOL]     inFunction("var x,y; if(x)y=1; y=2; x(y)", "var x,y; if(x)1; y=2; x(y)"); [EOL]     inFunction("var x; switch(x) { case(1): x=1; break; } x"); [EOL]     inFunction("var x; switch(x) { case(1): x=1; break; }", "var x; switch(x) { case(1): 1; break; }"); [EOL] } <line_num>: 80,86
public void testUsedAsConditions() { [EOL]     inFunction("var x; while(x=1){}", "var x; while(1){}"); [EOL]     inFunction("var x; if(x=1){}", "var x; if(1){}"); [EOL]     inFunction("var x; do{}while(x=1)", "var x; do{}while(1)"); [EOL]     inFunction("var x; if(x=1==4&&1){}", "var x; if(1==4&&1) {}"); [EOL]     inFunction("var x; if(0&&(x=1)){}", "var x; if(0&&1){}"); [EOL]     inFunction("var x; if((x=2)&&(x=1)){}", "var x; if(2&&1){}"); [EOL]     inFunction("var x; x=2; if(0&&(x=1)){}; x"); [EOL]     inFunction("var x,y; if( (x=1)+(y=2) > 3){}", "var x,y; if( 1+2 > 3){}"); [EOL] } <line_num>: 88,99
public void testUsedAsConditionsInSwitchStatements() { [EOL]     inFunction("var x; switch(x=1){}", "var x; switch(1){}"); [EOL]     inFunction("var x; switch(x){case(x=1):break;}", "var x; switch(x){case(1):break;}"); [EOL]     inFunction("var x,y; switch(y) { case (x += 1): break; case (x): break;}"); [EOL]     inFunction("var x,y; switch(y) { case (x = 1): break; case (2): break;}", "var x,y; switch(y) { case (1): break; case (2): break;}"); [EOL]     inFunction("var x,y; switch(y) { case (x+=1): break; case (x=2): break;}", "var x,y; switch(y) { case (x+1): break; case (2): break;}"); [EOL] } <line_num>: 101,112
public void testAssignmentInReturn() { [EOL]     inFunction("var x; return x = 1;", "var x; return 1"); [EOL]     inFunction("var x; return"); [EOL] } <line_num>: 114,117
public void testAssignmentSamples() { [EOL]     inFunction("var x = 2;"); [EOL]     inFunction("var x = 2; x++;", "var x=2; void 0"); [EOL]     inFunction("var x; x=x++;", "var x;x++"); [EOL]     inFunction("var x; x+=1;", "var x;x+1"); [EOL] } <line_num>: 119,125
public void testAssignmentInArgs() { [EOL]     inFunction("var x; foo(x = 1);", "var x; foo(1);"); [EOL]     inFunction("var x; return foo(x = 1);", "var x; return foo(1);"); [EOL] } <line_num>: 127,130
public void testAssignAndReadInCondition() { [EOL]     inFunction("var a, b; if ((a = 1) && (b = a)) {b}"); [EOL]     inFunction("var a, b; if ((b = a) && (a = 1)) {b}", "var a, b; if ((b = a) && (1)) {b}"); [EOL] } <line_num>: 135,139
public void testParameters() { [EOL]     inFunction("param1=1; param1=2; param2(param1)", "1; param1=2; param2(param1)"); [EOL]     inFunction("param1=param2()", "param2()"); [EOL] } <line_num>: 141,145
public void testErrorHandling() { [EOL]     inFunction("var x; try{ x=1 } catch(e){ x=2 }; x"); [EOL]     inFunction("var x; try{ x=1 } catch(e){ x=2 }", "var x;try{ 1 } catch(e) { 2 }"); [EOL]     inFunction("var x; try{ x=1 } finally { x=2 }; x", "var x;try{ 1 } finally{ x=2 }; x"); [EOL]     inFunction("var x; while(1) { try{x=1;break}finally{x} }"); [EOL]     inFunction("var x; try{throw 1} catch(e){x=2} finally{x}"); [EOL]     inFunction("var x; try{x=1;throw 1;x} finally{x=2}; x", "var x; try{1;throw 1;x} finally{x=2}; x"); [EOL] } <line_num>: 147,157
public void testDeadVarDeclarations() { [EOL]     inFunction("var x=1;"); [EOL]     inFunction("var x=1; x=2; x"); [EOL] } <line_num>: 159,163
public void testGlobal() { [EOL]     test("var x; x=1; x=2; x=3;", "var x; x=1; x=2; x=3;"); [EOL] } <line_num>: 165,168
public void testInnerFunctions() { [EOL]     inFunction("var x = function() { var x; x=1; }", "var x = function() { var x; 1; }"); [EOL] } <line_num>: 170,173
public void testInnerFunctions2() { [EOL]     inFunction("var x = 0; print(x); x = 1; var y = function(){}; y()"); [EOL] } <line_num>: 175,178
public void testSelfReAssignment() { [EOL]     inFunction("var x; x = x;", "var x; x"); [EOL] } <line_num>: 180,182
public void testSelfIncrement() { [EOL]     inFunction("var x; x = x + 1;", "var x; x + 1"); [EOL] } <line_num>: 184,186
public void testAssignmentOp() { [EOL]     inFunction("var x; x += foo()", "var x; x + foo()"); [EOL] } <line_num>: 188,191
public void testAssignmentOpUsedAsLhs() { [EOL]     inFunction("var x,y; y = x += foo(); print(y)", "var x,y; y = x +  foo(); print(y)"); [EOL] } <line_num>: 193,196
public void testAssignmentOpUsedAsCondition() { [EOL]     inFunction("var x; if(x += foo()) {}", "var x; if(x +  foo()) {}"); [EOL]     inFunction("var x; if((x += foo()) > 1) {}", "var x; if((x +  foo()) > 1) {}"); [EOL]     inFunction("var x; while((x += foo()) > 1) {}"); [EOL]     inFunction("var x; for(;--x;){}"); [EOL]     inFunction("var x; for(;x--;){}"); [EOL]     inFunction("var x; for(;x -= 1;){}"); [EOL]     inFunction("var x; for(;x = 0;){}", "var x; for(;0;){}"); [EOL]     inFunction("var x; for(;;--x){}"); [EOL]     inFunction("var x; for(;;x--){}"); [EOL]     inFunction("var x; for(;;x -= 1){}"); [EOL]     inFunction("var x; for(;;x = 0){}", "var x; for(;;0){}"); [EOL]     inFunction("var x; for(--x;;){}", "var x; for(;;){}"); [EOL]     inFunction("var x; for(x--;;){}", "var x; for(;;){}"); [EOL]     inFunction("var x; for(x -= 1;;){}", "var x; for(x - 1;;){}"); [EOL]     inFunction("var x; for(x = 0;;){}", "var x; for(0;;){}"); [EOL] } <line_num>: 198,222
public void testDeadIncrement() { [EOL]     inFunction("var x; x ++", "var x; void 0"); [EOL]     inFunction("var x; x --", "var x; void 0"); [EOL] } <line_num>: 224,228
public void testDeadButAlivePartiallyWithinTheExpression() { [EOL]     inFunction("var x; x = 100, print(x), x = 101;", "var x; x = 100, print(x),     101;"); [EOL]     inFunction("var x; x = 100, print(x), print(x), x = 101;", "var x; x = 100, print(x), print(x),     101;"); [EOL]     inFunction("var x; x = 100, print(x), x = 0, print(x), x = 101;", "var x; x = 100, print(x), x = 0, print(x),     101;"); [EOL] } <line_num>: 230,237
public void testMutipleDeadAssignmentsButAlivePartiallyWithinTheExpression() { [EOL]     inFunction("var x; x = 1, x = 2, x = 3, x = 4, x = 5," + "  print(x), x = 0, print(x), x = 101;", "var x; 1, 2, 3, 4, x = 5, print(x), x = 0, print(x), 101;"); [EOL] } <line_num>: 239,244
public void testDeadPartiallyWithinTheExpression() { [EOL]     inFunction("var x; x = 100, x = 101; print(x);"); [EOL] } <line_num>: 247,251
public void testAssignmentChain() { [EOL]     inFunction("var a,b,c,d,e; a = b = c = d = e = 1", "var a,b,c,d,e; 1"); [EOL]     inFunction("var a,b,c,d,e; a = b = c = d = e = 1; print(c)", "var a,b,c,d,e;         c = 1        ; print(c)"); [EOL]     inFunction("var a,b,c,d,e; a = b = c = d = e = 1; print(a + e)", "var a,b,c,d,e; a =             e = 1; print(a + e)"); [EOL]     inFunction("var a,b,c,d,e; a = b = c = d = e = 1; print(b + d)", "var a,b,c,d,e;     b =     d     = 1; print(b + d)"); [EOL]     inFunction("var a,b,c,d,e; a = b = c = d = e = 1; print(a + b + d + e)", "var a,b,c,d,e; a = b =     d = e = 1; print(a + b + d + e)"); [EOL]     inFunction("var a,b,c,d,e; a = b = c = d = e = 1; print(a+b+c+d+e)"); [EOL] } <line_num>: 253,265
public void testAssignmentOpChain() { [EOL]     inFunction("var a,b,c,d,e; a = b = c += d = e = 1", "var a,b,c,d,e;         c + 1"); [EOL]     inFunction("var a,b,c,d,e; a = b = c += d = e = 1;  print(e)", "var a,b,c,d,e;         c +     (e = 1); print(e)"); [EOL]     inFunction("var a,b,c,d,e; a = b = c += d = e = 1;  print(d)", "var a,b,c,d,e;         c + (d = 1)  ;   print(d)"); [EOL]     inFunction("var a,b,c,d,e; a = b = c += d = e = 1;  print(a)", "var a,b,c,d,e; a =     c +          1;  print(a)"); [EOL] } <line_num>: 267,276
public void testIncDecInSubExpressions() { [EOL]     inFunction("var a; a = 1, a++; a"); [EOL]     inFunction("var a; a = 1, ++a; a"); [EOL]     inFunction("var a; a = 1, a--; a"); [EOL]     inFunction("var a; a = 1, --a; a"); [EOL]     inFunction("var a; a = 1, a++, print(a)"); [EOL]     inFunction("var a; a = 1, ++a, print(a)"); [EOL]     inFunction("var a; a = 1, a--, print(a)"); [EOL]     inFunction("var a; a = 1, --a, print(a)"); [EOL]     inFunction("var a; a = 1, print(a++)"); [EOL]     inFunction("var a; a = 1, print(++a)"); [EOL]     inFunction("var a; a = 1, print(a++)"); [EOL]     inFunction("var a; a = 1, print(++a)"); [EOL]     inFunction("var a; a = 1, print(a--)"); [EOL]     inFunction("var a; a = 1, print(--a)"); [EOL] } <line_num>: 278,297
public void testNestedReassignments() { [EOL]     inFunction("var a; a = (a = 1)", "var a; 1"); [EOL]     inFunction("var a; a = (a *= 2)", "var a; a*2"); [EOL]     inFunction("var a; a = (a++)", "var a; a++"); [EOL]     inFunction("var a; a = (++a)", "var a; ++a"); [EOL]     inFunction("var a; a = (b = (a = 1))", "var a; b = 1"); [EOL]     inFunction("var a; a = (b = (a *= 2))", "var a; b = a * 2"); [EOL]     inFunction("var a; a = (b = (a++))", "var a; b=a++"); [EOL]     inFunction("var a; a = (b = (++a))", "var a; b=++a"); [EOL]     inFunction("var a,b; a = (b = (a = 1))", "var a,b; 1"); [EOL]     inFunction("var a,b; a = (b = (a *= 2))", "var a,b; a * 2"); [EOL]     inFunction("var a,b; a = (b = (a++))", "var a,b; a++"); [EOL]     inFunction("var a,b; a = (b = (++a))", "var a,b; ++a"); [EOL]     inFunction("var a; a += (a++)", "var a; a + a++"); [EOL]     inFunction("var a; a += (++a)", "var a; a+ (++a)"); [EOL]     inFunction("var a,b; a += (b = (a = 1))", "var a,b; a + 1"); [EOL]     inFunction("var a,b; a += (b = (a *= 2))", "var a,b; a + (a * 2)"); [EOL]     inFunction("var a,b; a += (b = (a++))", "var a,b; a + a++"); [EOL]     inFunction("var a,b; a += (b = (++a))", "var a,b; a+(++a)"); [EOL] } <line_num>: 299,328
public void testIncrementalReassignmentInForLoops() { [EOL]     inFunction("for(;x+=1;x+=1) {}"); [EOL]     inFunction("for(;x;x+=1){}"); [EOL]     inFunction("for(;x+=1;){foo(x)}"); [EOL]     inFunction("for(;1;x+=1){foo(x)}"); [EOL] } <line_num>: 330,335
public void testIdentityAssignments() { [EOL]     inFunction("var x; x=x", "var x; x"); [EOL] } <line_num>: 337,339
private void inFunction(String src) { [EOL]     inFunction(src, src); [EOL] } <line_num>: 341,343
private void inFunction(String src, String expected) { [EOL]     test("function FUNC(param1, param2){" + src + "}", "function FUNC(param1, param2){" + expected + "}"); [EOL] } <line_num>: 345,348
public void testBug8730257() { [EOL]     inFunction("  try {" + "     var sortIndices = {};" + "     sortIndices = bar();" + "     for (var i = 0; i < 100; i++) {" + "       var sortIndex = sortIndices[i];" + "       bar(sortIndex);" + "     }" + "   } finally {" + "     bar();" + "   }"); [EOL] } <line_num>: 350,362
public void testAssignToExtern() { [EOL]     inFunction("extern = true;"); [EOL] } <line_num>: 364,366
public void testIssue297a() { [EOL]     testSame("function f(p) {" + " var x;" + " return ((x=p.id) && (x=parseInt(x.substr(1))) && x>0);" + "}; f('');"); [EOL] } <line_num>: 368,373
public void testIssue297b() { [EOL]     test("function f() {" + " var x;" + " return (x='') && (x = x.substr(1));" + "};", "function f() {" + " var x;" + " return (x='') && (x.substr(1));" + "};"); [EOL] } <line_num>: 375,384
public void testIssue297c() { [EOL]     test("function f() {" + " var x;" + " return (x=1) && (x = f(x));" + "};", "function f() {" + " var x;" + " return (x=1) && f(x);" + "};"); [EOL] } <line_num>: 386,395
public void testIssue297d() { [EOL]     test("function f(a) {" + " return (a=1) && (a = f(a));" + "};", "function f(a) {" + " return (a=1) && (f(a));" + "};"); [EOL] } <line_num>: 397,404
public void testIssue297e() { [EOL]     test("function f(a) {" + " return (a=1) - (a = g(a));" + "};", "function f(a) {" + " return (a=1) - (g(a));" + "};"); [EOL] } <line_num>: 406,413
public void testIssue297f() { [EOL]     test("function f(a) {" + " h((a=1) - (a = g(a)));" + "};", "function f(a) {" + " h((a=1) - (g(a)));" + "};"); [EOL] } <line_num>: 415,422
public void testIssue297g() { [EOL]     test("function f(a) {" + " var b = h((b=1) - (b = g(b)));" + " return b;" + "};", "function f(a) {" + " var b = h((b=1) - (b = g(b)));" + " return b;" + "};"); [EOL] } <line_num>: 424,434
public void testIssue297h() { [EOL]     test("function f(a) {" + " var b = b=1;" + " return b;" + "};", "function f(a) {" + " var b = b = 1;" + " return b;" + "};"); [EOL] } <line_num>: 436,446
public void testInExpression1() { [EOL]     inFunction("var a; return a=(a=(a=3));", "var a; return 3;"); [EOL]     inFunction("var a; return a=(a=(a=a));", "var a; return a;"); [EOL]     inFunction("var a; return a=(a=(a=a+1)+1);", "var a; return a+1+1;"); [EOL]     inFunction("var a; return a=(a=(a=f(a)+1)+1);", "var a; return f(a)+1+1;"); [EOL]     inFunction("var a; return a=f(a=f(a=f(a)));", "var a; return f(f(f(a)));"); [EOL] } <line_num>: 449,455
public void testInExpression2() { [EOL]     inFunction("var a; a = 1; if ((a = 2) || (a = 3) || (a)) {}", "var a; a = 1; if ((    2) || (a = 3) || (a)) {}"); [EOL]     inFunction("var a; (a = 1) || (a = 2)", "var a; 1 || 2"); [EOL]     inFunction("var a; (a = 1) || (a = 2); return a"); [EOL]     inFunction("var a; a = 1; a ? a = 2 : a;", "var a; a = 1; a ?     2 : a;"); [EOL]     inFunction("var a; a = 1; a ? a = 2 : a; return a"); [EOL]     inFunction("var a; a = 1; a ? a : a = 2;", "var a; a = 1; a ? a : 2;"); [EOL]     inFunction("var a; a = 1; a ? a : a =2; return a"); [EOL]     inFunction("var a; (a = 1) ? a = 2 : a = 3;", "var a;      1  ?     2 :     3;"); [EOL]     inFunction("var a; (a = 1) ? a = 2 : a = 3; return a"); [EOL] } <line_num>: 457,489
public void testIssue384a() { [EOL]     inFunction(" var a, b;\n" + " if (f(b = true) || f(b = false))\n" + "   a = b;\n" + " else\n" + "   a = null;\n" + " return a;"); [EOL] } <line_num>: 491,499
public void testIssue384b() { [EOL]     inFunction(" var a, b;\n" + " (f(b = true) || f(b = false)) ? (a = b) : (a = null);\n" + " return a;"); [EOL] } <line_num>: 501,506
public void testIssue384c() { [EOL]     inFunction(" var a, b;\n" + " (a ? f(b = true) : f(b = false)) && (a = b);\n" + " return a;"); [EOL] } <line_num>: 508,513
public void testIssue384d() { [EOL]     inFunction(" var a, b;\n" + " (f(b = true) || f(b = false)) && (a = b);\n" + " return a;"); [EOL] } <line_num>: 515,520
public void testForIn() { [EOL]     inFunction("var x = {}; for (var y in x) { y() }"); [EOL]     inFunction("var x, y, z; x = {}; z = {}; for (y in x = z) { y() }", "var x, y, z;   ({}); z = {}; for (y in z)     { y() }"); [EOL]     inFunction("var x, y, z; x = {}; z = {}; for (y[z=1] in z) { y() }", "var x, y, z;   ({}); z = {}; for (y[z=1] in z) { y() }"); [EOL]     inFunction("var x, y, z; x = {}; z = {}; for (x in z) { x() }"); [EOL] } <line_num>: 522,533
