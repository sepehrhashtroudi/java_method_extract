SimpleDefinitionEnumerator(Compiler compiler) { [EOL]     this.passUnderTest = new SimpleDefinitionFinder(compiler); [EOL]     this.compiler = compiler; [EOL] } <line_num>: 344,347
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 38,42
@Override [EOL] protected void tearDown() throws Exception { [EOL]     super.tearDown(); [EOL]     found.clear(); [EOL] } <line_num>: 44,48
public void testDefineNumber() throws Exception { [EOL]     checkDefinitionsInJs("var a = 1", ImmutableSet.of("DEF NAME a -> NUMBER")); [EOL]     checkDefinitionsInJs("a = 1", ImmutableSet.of("DEF NAME a -> NUMBER")); [EOL]     checkDefinitionsInJs("a.b = 1", ImmutableSet.of("DEF GETPROP a.b -> NUMBER")); [EOL]     checkDefinitionsInJs("a[\"b\"] = 1", ImmutableSet.<String>of()); [EOL]     checkDefinitionsInJs("f().b = 1", ImmutableSet.of("DEF GETPROP null -> NUMBER")); [EOL]     checkDefinitionsInJs("({a : 1}); o.a", ImmutableSet.of("DEF STRING_KEY null -> NUMBER", "USE GETPROP o.a -> [NUMBER]")); [EOL]     checkDefinitionsInJs("({'a' : 1}); o['a']", ImmutableSet.<String>of("DEF STRING_KEY null -> NUMBER")); [EOL]     checkDefinitionsInJs("({1 : 1}); o[1]", ImmutableSet.<String>of("DEF STRING_KEY null -> NUMBER")); [EOL]     checkDefinitionsInJs("var a = {b : 1}; a.b", ImmutableSet.of("DEF NAME a -> <null>", "DEF STRING_KEY null -> NUMBER", "USE NAME a -> [<null>]", "USE GETPROP a.b -> [NUMBER]")); [EOL] } <line_num>: 50,92
public void testDefineGet() throws Exception { [EOL]     checkDefinitionsInJs("({get a() {}}); o.a", ImmutableSet.of("DEF GETTER_DEF null -> FUNCTION", "USE GETPROP o.a -> [FUNCTION]")); [EOL] } <line_num>: 94,100
public void testDefineSet() throws Exception { [EOL]     checkDefinitionsInJs("({set a(b) {}}); o.a", ImmutableSet.of("DEF NAME b -> <null>", "DEF SETTER_DEF null -> FUNCTION", "USE GETPROP o.a -> [FUNCTION]")); [EOL] } <line_num>: 102,109
public void testDefineFunction() throws Exception { [EOL]     checkDefinitionsInJs("var a = function(){}", ImmutableSet.of("DEF NAME a -> FUNCTION")); [EOL]     checkDefinitionsInJs("var a = function f(){}", ImmutableSet.of("DEF NAME f -> FUNCTION", "DEF NAME a -> FUNCTION")); [EOL]     checkDefinitionsInJs("function a(){}", ImmutableSet.of("DEF NAME a -> FUNCTION")); [EOL]     checkDefinitionsInJs("a = function(){}", ImmutableSet.of("DEF NAME a -> FUNCTION")); [EOL]     checkDefinitionsInJs("a.b = function(){}", ImmutableSet.of("DEF GETPROP a.b -> FUNCTION")); [EOL]     checkDefinitionsInJs("a[\"b\"] = function(){}", ImmutableSet.<String>of()); [EOL]     checkDefinitionsInJs("f().b = function(){}", ImmutableSet.of("DEF GETPROP null -> FUNCTION")); [EOL] } <line_num>: 111,140
public void testFunctionArgumentsBasic() throws Exception { [EOL]     checkDefinitionsInJs("function f(a){return a}", ImmutableSet.of("DEF NAME a -> <null>", "USE NAME a -> [<null>]", "DEF NAME f -> FUNCTION")); [EOL]     checkDefinitionsInJs("var a = 1; function f(a){return a}", ImmutableSet.of("DEF NAME a -> NUMBER", "DEF NAME a -> <null>", "USE NAME a -> [<null>, NUMBER]", "DEF NAME f -> FUNCTION")); [EOL] } <line_num>: 142,155
public void testFunctionArgumentsInExterns() throws Exception { [EOL]     final String DEF = "var f = function(arg1, arg2){}"; [EOL]     final String USE = "f(1, 2)"; [EOL]     checkDefinitionsInJs(DEF + ";" + USE, ImmutableSet.of("DEF NAME f -> FUNCTION", "DEF NAME arg1 -> <null>", "DEF NAME arg2 -> <null>", "USE NAME f -> [FUNCTION]")); [EOL]     checkDefinitions(DEF, USE, ImmutableSet.of("DEF NAME f -> EXTERN FUNCTION", "USE NAME f -> [EXTERN FUNCTION]")); [EOL] } <line_num>: 157,174
public void testMultipleDefinition() throws Exception { [EOL]     checkDefinitionsInJs("a = 1; a = 2; a", ImmutableSet.of("DEF NAME a -> NUMBER", "USE NAME a -> [NUMBER x 2]")); [EOL]     checkDefinitionsInJs("a = 1; a = 'a'; a", ImmutableSet.of("DEF NAME a -> NUMBER", "DEF NAME a -> STRING", "USE NAME a -> [NUMBER, STRING]")); [EOL]     checkDefinitionsInJs("a = 1; b = 2; a = b; a", ImmutableSet.of("DEF NAME a -> <null>", "DEF NAME a -> NUMBER", "DEF NAME b -> NUMBER", "USE NAME a -> [<null>, NUMBER]", "USE NAME b -> [NUMBER]")); [EOL]     checkDefinitionsInJs("a = 1; b = 2; c = b; c = a; c", ImmutableSet.of("DEF NAME a -> NUMBER", "DEF NAME b -> NUMBER", "DEF NAME c -> <null>", "USE NAME a -> [NUMBER]", "USE NAME b -> [NUMBER]", "USE NAME c -> [<null> x 2]")); [EOL]     checkDefinitionsInJs("function f(){} f()", ImmutableSet.of("DEF NAME f -> FUNCTION", "USE NAME f -> [FUNCTION]")); [EOL]     checkDefinitionsInJs("function f(){} f.call(null)", ImmutableSet.of("DEF NAME f -> FUNCTION", "USE NAME f -> [FUNCTION]", "USE GETPROP f.call -> [FUNCTION]")); [EOL]     checkDefinitionsInJs("function f(){} f.apply(null, [])", ImmutableSet.of("DEF NAME f -> FUNCTION", "USE NAME f -> [FUNCTION]", "USE GETPROP f.apply -> [FUNCTION]")); [EOL]     checkDefinitionsInJs("function f(){} f.foobar()", ImmutableSet.of("DEF NAME f -> FUNCTION", "USE NAME f -> [FUNCTION]")); [EOL]     checkDefinitionsInJs("function f(){} f(); f.call(null)", ImmutableSet.of("DEF NAME f -> FUNCTION", "USE NAME f -> [FUNCTION]", "USE GETPROP f.call -> [FUNCTION]")); [EOL] } <line_num>: 176,233
public void testDefinitionInExterns() throws Exception { [EOL]     String externs = "var a = 1"; [EOL]     checkDefinitionsInExterns(externs, ImmutableSet.of("DEF NAME a -> EXTERN NUMBER")); [EOL]     checkDefinitions(externs, "var b = 1", ImmutableSet.of("DEF NAME a -> EXTERN NUMBER", "DEF NAME b -> NUMBER")); [EOL]     checkDefinitions(externs, "a = \"foo\"; a", ImmutableSet.of("DEF NAME a -> EXTERN NUMBER", "DEF NAME a -> STRING", "USE NAME a -> [EXTERN NUMBER, STRING]")); [EOL]     checkDefinitionsInExterns("var a = {}; a.b = 10", ImmutableSet.of("DEF GETPROP a.b -> EXTERN NUMBER", "DEF NAME a -> EXTERN <null>", "USE NAME a -> [EXTERN <null>]")); [EOL]     checkDefinitionsInExterns("var a = {}; a.b", ImmutableSet.of("DEF GETPROP a.b -> EXTERN <null>", "DEF NAME a -> EXTERN <null>", "USE NAME a -> [EXTERN <null>]")); [EOL]     checkDefinitions("var a = {}", "a.b = 1", ImmutableSet.of("DEF GETPROP a.b -> NUMBER", "DEF NAME a -> EXTERN <null>", "USE NAME a -> [EXTERN <null>]")); [EOL]     checkDefinitions("var a = {}", "a.b", ImmutableSet.of("DEF NAME a -> EXTERN <null>", "USE NAME a -> [EXTERN <null>]")); [EOL]     checkDefinitionsInExterns(externs, ImmutableSet.of("DEF NAME a -> EXTERN NUMBER")); [EOL] } <line_num>: 235,282
public void testObjectLitInExterns() { [EOL]     checkDefinitions("var goog = {};" + "/** @type {number} */ goog.HYBRID;" + "/** @enum */ goog.Enum = {HYBRID: 0, ROADMAP: 1};", "goog.HYBRID; goog.Enum.ROADMAP;", ImmutableSet.of("DEF GETPROP goog.Enum -> EXTERN <null>", "DEF GETPROP goog.HYBRID -> EXTERN <null>", "DEF NAME goog -> EXTERN <null>", "DEF STRING_KEY null -> EXTERN NUMBER", "USE GETPROP goog.Enum -> [EXTERN <null>]", "USE GETPROP goog.Enum.ROADMAP -> [EXTERN NUMBER]", "USE GETPROP goog.HYBRID -> [EXTERN <null>, EXTERN NUMBER]", "USE NAME goog -> [EXTERN <null>]")); [EOL] } <line_num>: 284,299
public void testCallInExterns() { [EOL]     checkDefinitionsInExterns("var goog = {};" + "/** @constructor */ goog.Response = function() {};" + "goog.Response.prototype.get;" + "goog.Response.prototype.get().get;", ImmutableSet.of("DEF GETPROP goog.Response -> EXTERN FUNCTION", "DEF GETPROP goog.Response.prototype.get -> EXTERN <null>", "DEF GETPROP null -> EXTERN <null>", "DEF NAME goog -> EXTERN <null>", "USE GETPROP goog.Response -> [EXTERN FUNCTION]", "USE GETPROP goog.Response.prototype.get -> [EXTERN <null> x 2]", "USE NAME goog -> [EXTERN <null>]")); [EOL] } <line_num>: 301,315
void checkDefinitionsInExterns(String externs, Set<String> expected) { [EOL]     checkDefinitions(externs, "", expected); [EOL] } <line_num>: 317,319
void checkDefinitionsInJs(String js, Set<String> expected) { [EOL]     checkDefinitions("", js, expected); [EOL] } <line_num>: 321,323
void checkDefinitions(String externs, String source, Set<String> expected) { [EOL]     testSame(externs, source, null); [EOL]     assertEquals(expected, found); [EOL]     found.clear(); [EOL] } <line_num>: 325,329
@Override [EOL] protected CompilerPass getProcessor(Compiler compiler) { [EOL]     return new SimpleDefinitionEnumerator(compiler); [EOL] } <line_num>: 331,334
@Override [EOL] public void process(Node externs, Node root) { [EOL]     passUnderTest.process(externs, root); [EOL]     NodeTraversal.traverse(compiler, externs, this); [EOL]     NodeTraversal.traverse(compiler, root, this); [EOL]     for (DefinitionSite defSite : passUnderTest.getDefinitionSites()) { [EOL]         Node node = defSite.node; [EOL]         Definition definition = defSite.definition; [EOL]         StringBuilder sb = new StringBuilder(); [EOL]         sb.append("DEF "); [EOL]         sb.append(Token.name(node.getType())); [EOL]         sb.append(" "); [EOL]         sb.append(node.getQualifiedName()); [EOL]         sb.append(" -> "); [EOL]         if (definition.isExtern()) { [EOL]             sb.append("EXTERN "); [EOL]         } [EOL]         Node rValue = definition.getRValue(); [EOL]         if (rValue != null) { [EOL]             sb.append(Token.name(rValue.getType())); [EOL]         } else { [EOL]             sb.append("<null>"); [EOL]         } [EOL]         found.add(sb.toString()); [EOL]     } [EOL] } <line_num>: 349,379
@Override [EOL] public void visit(NodeTraversal traversal, Node node, Node parent) { [EOL]     Collection<Definition> defs = passUnderTest.getDefinitionsReferencedAt(node); [EOL]     if (defs != null) { [EOL]         StringBuilder sb = new StringBuilder(); [EOL]         sb.append("USE "); [EOL]         sb.append(Token.name(node.getType())); [EOL]         sb.append(" "); [EOL]         sb.append(node.getQualifiedName()); [EOL]         sb.append(" -> "); [EOL]         Multiset<String> defstrs = TreeMultiset.create(); [EOL]         for (Definition def : defs) { [EOL]             String defstr; [EOL]             Node rValue = def.getRValue(); [EOL]             if (rValue != null) { [EOL]                 defstr = Token.name(rValue.getType()); [EOL]             } else { [EOL]                 defstr = "<null>"; [EOL]             } [EOL]             if (def.isExtern()) { [EOL]                 defstr = "EXTERN " + defstr; [EOL]             } [EOL]             defstrs.add(defstr); [EOL]         } [EOL]         sb.append(defstrs.toString()); [EOL]         found.add(sb.toString()); [EOL]     } [EOL] } <line_num>: 381,413
