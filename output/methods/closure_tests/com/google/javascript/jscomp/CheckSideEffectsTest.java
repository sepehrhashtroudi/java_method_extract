public CheckSideEffectsTest() { [EOL]     this.parseTypeInfo = true; [EOL]     allowExternsChanges(true); [EOL] } <line_num>: 22,25
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 27,30
@Override [EOL] protected CompilerPass getProcessor(Compiler compiler) { [EOL]     return new CheckSideEffects(compiler, CheckLevel.WARNING, true); [EOL] } <line_num>: 32,35
@Override [EOL] public void test(String js, String expected, DiagnosticType warning) { [EOL]     test(js, expected, null, warning); [EOL] } <line_num>: 37,40
public void test(String js, DiagnosticType warning) { [EOL]     test(js, js, null, warning); [EOL] } <line_num>: 42,44
public void testUselessCode() { [EOL]     test("function f(x) { if(x) return; }", ok); [EOL]     test("function f(x) { if(x); }", "function f(x) { if(x); }", e); [EOL]     test("if(x) x = y;", ok); [EOL]     test("if(x) x == bar();", "if(x) JSCOMPILER_PRESERVE(x == bar());", e); [EOL]     test("x = 3;", ok); [EOL]     test("x == 3;", "JSCOMPILER_PRESERVE(x == 3);", e); [EOL]     test("var x = 'test'", ok); [EOL]     test("var x = 'test'\n'str'", "var x = 'test'\nJSCOMPILER_PRESERVE('str')", e); [EOL]     test("", ok); [EOL]     test("foo();;;;bar();;;;", ok); [EOL]     test("var a, b; a = 5, b = 6", ok); [EOL]     test("var a, b; a = 5, b == 6", "var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)", e); [EOL]     test("var a, b; a = (5, 6)", "var a, b; a = (JSCOMPILER_PRESERVE(5), 6)", e); [EOL]     test("var a, b; a = (bar(), 6, 7)", "var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)", e); [EOL]     test("var a, b; a = (bar(), bar(), 7, 8)", "var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)", e); [EOL]     test("var a, b; a = (b = 7, 6)", ok); [EOL]     test("function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));", ok); [EOL]     test("function x(){}\nfunction f(a, b){}\nf(1,(2, 3));", "function x(){}\nfunction f(a, b){}\n" + "f(1,(JSCOMPILER_PRESERVE(2), 3));", e); [EOL] } <line_num>: 49,80
public void testUselessCodeInFor() { [EOL]     test("for(var x = 0; x < 100; x++) { foo(x) }", ok); [EOL]     test("for(; true; ) { bar() }", ok); [EOL]     test("for(foo(); true; foo()) { bar() }", ok); [EOL]     test("for(void 0; true; foo()) { bar() }", "for(JSCOMPILER_PRESERVE(void 0); true; foo()) { bar() }", e); [EOL]     test("for(foo(); true; void 0) { bar() }", "for(foo(); true; JSCOMPILER_PRESERVE(void 0)) { bar() }", e); [EOL]     test("for(foo(); true; (1, bar())) { bar() }", "for(foo(); true; (JSCOMPILER_PRESERVE(1), bar())) { bar() }", e); [EOL]     test("for(foo in bar) { foo() }", ok); [EOL]     test("for (i = 0; el = el.previousSibling; i++) {}", ok); [EOL]     test("for (i = 0; el = el.previousSibling; i++);", ok); [EOL] } <line_num>: 82,96
public void testTypeAnnotations() { [EOL]     test("x;", "JSCOMPILER_PRESERVE(x);", e); [EOL]     test("a.b.c.d;", "JSCOMPILER_PRESERVE(a.b.c.d);", e); [EOL]     test("/** @type Number */ a.b.c.d;", ok); [EOL]     test("if (true) { /** @type Number */ a.b.c.d; }", ok); [EOL]     test("function A() { this.foo; }", "function A() { JSCOMPILER_PRESERVE(this.foo); }", e); [EOL]     test("function A() { /** @type Number */ this.foo; }", ok); [EOL] } <line_num>: 98,107
public void testJSDocComments() { [EOL]     test("function A() { /** This is a JsDoc comment */ this.foo; }", ok); [EOL]     test("function A() { /* This is a normal comment */ this.foo; }", "function A() { " + " /* This is a normal comment */ JSCOMPILER_PRESERVE(this.foo); }", e); [EOL] } <line_num>: 109,114
public void testIssue80() { [EOL]     test("(0, eval)('alert');", ok); [EOL]     test("(0, foo)('alert');", "(JSCOMPILER_PRESERVE(0), foo)('alert');", e); [EOL] } <line_num>: 116,119
public void testIsue504() { [EOL]     test("void f();", "JSCOMPILER_PRESERVE(void f());", null, e, "Suspicious code. The result of the 'void' operator is not being used."); [EOL] } <line_num>: 121,124
