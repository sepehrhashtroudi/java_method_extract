public void testCanExposeExpression1() { [EOL]     helperCanExposeExpression(DecompositionType.UNDECOMPOSABLE, "while(foo());", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.UNDECOMPOSABLE, "while(x = goo()&&foo()){}", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.UNDECOMPOSABLE, "while(x += goo()&&foo()){}", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.UNDECOMPOSABLE, "do{}while(foo());", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.UNDECOMPOSABLE, "for(;foo(););", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.UNDECOMPOSABLE, "for(;;foo());", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.UNDECOMPOSABLE, "switch(1){case foo():;}", "foo"); [EOL] } <line_num>: 39,62
public void testCanExposeExpression2() { [EOL]     helperCanExposeExpression(DecompositionType.MOVABLE, "foo()", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.MOVABLE, "x = foo()", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.MOVABLE, "var x = foo()", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.MOVABLE, "if(foo()){}", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.MOVABLE, "switch(foo()){}", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.MOVABLE, "switch(foo()){}", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.MOVABLE, "function f(){ return foo();}", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.MOVABLE, "x = foo() && 1", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.MOVABLE, "x = foo() || 1", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.MOVABLE, "x = foo() ? 0 : 1", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.MOVABLE, "(function(a){b = a})(foo())", "foo"); [EOL] } <line_num>: 64,88
public void testCanExposeExpression3() { [EOL]     helperCanExposeExpression(DecompositionType.DECOMPOSABLE, "x = 0 && foo()", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.DECOMPOSABLE, "x = 1 || foo()", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.DECOMPOSABLE, "var x = 1 ? foo() : 0", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.DECOMPOSABLE, "goo() && foo()", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.DECOMPOSABLE, "x = goo() && foo()", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.DECOMPOSABLE, "x += goo() && foo()", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.DECOMPOSABLE, "var x = goo() && foo()", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.DECOMPOSABLE, "if(goo() && foo()){}", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.DECOMPOSABLE, "switch(goo() && foo()){}", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.DECOMPOSABLE, "switch(goo() && foo()){}", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.DECOMPOSABLE, "switch(x = goo() && foo()){}", "foo"); [EOL]     helperCanExposeExpression(DecompositionType.DECOMPOSABLE, "function f(){ return goo() && foo();}", "foo"); [EOL] } <line_num>: 90,117
public void testCanExposeExpression4() { [EOL]     helperCanExposeExpression(DecompositionType.UNDECOMPOSABLE, "if (goo.a(1, foo()));", "foo"); [EOL] } <line_num>: 119,123
public void testCanExposeExpression5() { [EOL]     helperCanExposeExpression(DecompositionType.UNDECOMPOSABLE, "if (goo['a'](foo()));", "foo"); [EOL] } <line_num>: 125,129
public void testCanExposeExpression6() { [EOL]     helperCanExposeExpression(DecompositionType.UNDECOMPOSABLE, "z:if (goo.a(1, foo()));", "foo"); [EOL] } <line_num>: 131,135
public void testCanExposeExpression7() { [EOL]     helperCanExposeFunctionExpression(DecompositionType.MOVABLE, "(function(map){descriptions_=map})(\n" + "function(){\n" + "var ret={};\n" + "ret[INIT]='a';\n" + "ret[MIGRATION_BANNER_DISMISS]='b';\n" + "return ret\n" + "}()\n" + ");", 2); [EOL] } <line_num>: 137,149
public void testCanExposeExpression8() { [EOL]     helperCanExposeExpression(DecompositionType.DECOMPOSABLE, "HangoutStarter.prototype.launchHangout = function() {\n" + "  var self = a.b;\n" + "  var myUrl = new goog.Uri(getDomServices_(self).getDomHelper()." + "getWindow().location.href);\n" + "};", "getDomServices_"); [EOL]     helperExposeExpression("HangoutStarter.prototype.launchHangout = function() {\n" + "  var self = a.b;\n" + "  var myUrl = new goog.Uri(getDomServices_(self).getDomHelper()." + "getWindow().location.href);\n" + "};", "getDomServices_", "HangoutStarter.prototype.launchHangout = function() {" + "  var self = a.b;" + "  var temp_const$$0 = goog.Uri;" + "  var myUrl = new temp_const$$0(getDomServices_(self)." + "      getDomHelper().getWindow().location.href)}"); [EOL]     helperMoveExpression("HangoutStarter.prototype.launchHangout = function() {" + "  var self = a.b;" + "  var temp_const$$0 = goog.Uri;" + "  var myUrl = new temp_const$$0(getDomServices_(self)." + "      getDomHelper().getWindow().location.href)}", "getDomServices_", "HangoutStarter.prototype.launchHangout = function() {" + "  var self=a.b;" + "  var temp_const$$0=goog.Uri;" + "  var result$$0=getDomServices_(self);" + "  var myUrl=new temp_const$$0(result$$0.getDomHelper()." + "      getWindow().location.href)}"); [EOL] } <line_num>: 151,190
public void testMoveExpression1() { [EOL]     helperMoveExpression("foo()", "foo", "var result$$0 = foo(); result$$0;"); [EOL] } <line_num>: 192,195
public void testMoveExpression2() { [EOL]     helperMoveExpression("x = foo()", "foo", "var result$$0 = foo(); x = result$$0;"); [EOL] } <line_num>: 197,202
public void testMoveExpression3() { [EOL]     helperMoveExpression("var x = foo()", "foo", "var result$$0 = foo(); var x = result$$0;"); [EOL] } <line_num>: 204,209
public void testMoveExpression4() { [EOL]     helperMoveExpression("if(foo()){}", "foo", "var result$$0 = foo(); if (result$$0);"); [EOL] } <line_num>: 211,216
public void testMoveExpression5() { [EOL]     helperMoveExpression("switch(foo()){}", "foo", "var result$$0 = foo(); switch(result$$0){}"); [EOL] } <line_num>: 218,223
public void testMoveExpression6() { [EOL]     helperMoveExpression("switch(1 + foo()){}", "foo", "var result$$0 = foo(); switch(1 + result$$0){}"); [EOL] } <line_num>: 225,230
public void testMoveExpression7() { [EOL]     helperMoveExpression("function f(){ return foo();}", "foo", "function f(){ var result$$0 = foo(); return result$$0;}"); [EOL] } <line_num>: 232,237
public void testMoveExpression8() { [EOL]     helperMoveExpression("x = foo() && 1", "foo", "var result$$0 = foo(); x = result$$0 && 1"); [EOL] } <line_num>: 239,244
public void testMoveExpression9() { [EOL]     helperMoveExpression("x = foo() || 1", "foo", "var result$$0 = foo(); x = result$$0 || 1"); [EOL] } <line_num>: 246,251
public void testMoveExpression10() { [EOL]     helperMoveExpression("x = foo() ? 0 : 1", "foo", "var result$$0 = foo(); x = result$$0 ? 0 : 1"); [EOL] } <line_num>: 253,258
public void testExposeExpression1() { [EOL]     helperExposeExpression("x = 0 && foo()", "foo", "var temp$$0; if (temp$$0 = 0) temp$$0 = foo(); x = temp$$0;"); [EOL] } <line_num>: 262,267
public void testExposeExpression2() { [EOL]     helperExposeExpression("x = 1 || foo()", "foo", "var temp$$0; if (temp$$0 = 1); else temp$$0 = foo(); x = temp$$0;"); [EOL] } <line_num>: 269,274
public void testExposeExpression3() { [EOL]     helperExposeExpression("var x = 1 ? foo() : 0", "foo", "var temp$$0;" + " if (1) temp$$0 = foo(); else temp$$0 = 0;var x = temp$$0;"); [EOL] } <line_num>: 276,282
public void testExposeExpression4() { [EOL]     helperExposeExpression("goo() && foo()", "foo", "if (goo()) foo();"); [EOL] } <line_num>: 284,289
public void testExposeExpression5() { [EOL]     helperExposeExpression("x = goo() && foo()", "foo", "var temp$$0; if (temp$$0 = goo()) temp$$0 = foo(); x = temp$$0;"); [EOL] } <line_num>: 291,296
public void testExposeExpression6() { [EOL]     helperExposeExpression("var x = 1 + (goo() && foo())", "foo", "var temp$$0; if (temp$$0 = goo()) temp$$0 = foo();" + "var x = 1 + temp$$0;"); [EOL] } <line_num>: 298,304
public void testExposeExpression7() { [EOL]     helperExposeExpression("if(goo() && foo());", "foo", "var temp$$0;" + "if (temp$$0 = goo()) temp$$0 = foo();" + "if(temp$$0);"); [EOL] } <line_num>: 306,313
public void testExposeExpression8() { [EOL]     helperExposeExpression("switch(goo() && foo()){}", "foo", "var temp$$0;" + "if (temp$$0 = goo()) temp$$0 = foo();" + "switch(temp$$0){}"); [EOL] } <line_num>: 315,322
public void testExposeExpression9() { [EOL]     helperExposeExpression("switch(1 + goo() + foo()){}", "foo", "var temp_const$$0 = 1 + goo();" + "switch(temp_const$$0 + foo()){}"); [EOL] } <line_num>: 324,330
public void testExposeExpression10() { [EOL]     helperExposeExpression("function f(){ return goo() && foo();}", "foo", "function f(){" + "var temp$$0; if (temp$$0 = goo()) temp$$0 = foo();" + "return temp$$0;" + "}"); [EOL] } <line_num>: 332,340
public void testExposeExpression11() { [EOL]     helperExposeExpression("if (goo(1, goo(2), (1 ? foo() : 0)));", "foo", "var temp_const$$1 = goo;" + "var temp_const$$0 = goo(2);" + "var temp$$2;" + "if (1) temp$$2 = foo(); else temp$$2 = 0;" + "if (temp_const$$1(1, temp_const$$0, temp$$2));"); [EOL] } <line_num>: 342,353
public void testExposePlusEquals1() { [EOL]     helperExposeExpression("var x = 0; x += foo() + 1", "foo", "var x = 0; var temp_const$$0 = x;" + "x = temp_const$$0 + (foo() + 1);"); [EOL]     helperExposeExpression("var x = 0; y = (x += foo()) + x", "foo", "var x = 0; var temp_const$$0 = x;" + "y = (x = temp_const$$0 + foo()) + x"); [EOL] } <line_num>: 356,368
public void testExposePlusEquals2() { [EOL]     helperExposeExpression("var x = {}; x.a += foo() + 1", "foo", "var x = {}; var temp_const$$0 = x;" + "var temp_const$$1 = temp_const$$0.a;" + "temp_const$$0.a = temp_const$$1 + (foo() + 1);"); [EOL]     helperExposeExpression("var x = {}; y = (x.a += foo()) + x.a", "foo", "var x = {}; var temp_const$$0 = x;" + "var temp_const$$1 = temp_const$$0.a;" + "y = (temp_const$$0.a = temp_const$$1 + foo()) + x.a"); [EOL] } <line_num>: 371,385
public void testExposePlusEquals3() { [EOL]     helperExposeExpression("/** @const */ var XX = {};\n" + "XX.a += foo() + 1", "foo", "var XX = {}; var temp_const$$0 = XX.a;" + "XX.a = temp_const$$0 + (foo() + 1);"); [EOL]     helperExposeExpression("var XX = {}; y = (XX.a += foo()) + XX.a", "foo", "var XX = {}; var temp_const$$0 = XX.a;" + "y = (XX.a = temp_const$$0 + foo()) + XX.a"); [EOL] } <line_num>: 388,401
public void testExposePlusEquals4() { [EOL]     helperExposeExpression("var x = {}; goo().a += foo() + 1", "foo", "var x = {};" + "var temp_const$$0 = goo();" + "var temp_const$$1 = temp_const$$0.a;" + "temp_const$$0.a = temp_const$$1 + (foo() + 1);"); [EOL]     helperExposeExpression("var x = {}; y = (goo().a += foo()) + goo().a", "foo", "var x = {};" + "var temp_const$$0 = goo();" + "var temp_const$$1 = temp_const$$0.a;" + "y = (temp_const$$0.a = temp_const$$1 + foo()) + goo().a"); [EOL] } <line_num>: 404,420
public void testExposePlusEquals5() { [EOL]     helperExposeExpression("var x = {}; goo().a.b += foo() + 1", "foo", "var x = {};" + "var temp_const$$0 = goo().a;" + "var temp_const$$1 = temp_const$$0.b;" + "temp_const$$0.b = temp_const$$1 + (foo() + 1);"); [EOL]     helperExposeExpression("var x = {}; y = (goo().a.b += foo()) + goo().a", "foo", "var x = {};" + "var temp_const$$0 = goo().a;" + "var temp_const$$1 = temp_const$$0.b;" + "y = (temp_const$$0.b = temp_const$$1 + foo()) + goo().a"); [EOL] } <line_num>: 423,439
public void testExposeObjectLit1() { [EOL]     helperMoveExpression("var x = {get a() {}, b: foo()};", "foo", "var result$$0=foo();var x = {get a() {}, b: result$$0};"); [EOL]     helperMoveExpression("var x = {set a(p) {}, b: foo()};", "foo", "var result$$0=foo();var x = {set a(p) {}, b: result$$0};"); [EOL] } <line_num>: 441,455
private void helperCanExposeExpression(DecompositionType expectedResult, String code, String fnName) { [EOL]     helperCanExposeExpression(expectedResult, code, fnName, null); [EOL] } <line_num>: 459,465
private void helperCanExposeFunctionExpression(DecompositionType expectedResult, String code, int call) { [EOL]     Compiler compiler = getCompiler(); [EOL]     Set<String> knownConstants = Sets.newHashSet(); [EOL]     ExpressionDecomposer decomposer = new ExpressionDecomposer(compiler, compiler.getUniqueNameIdSupplier(), knownConstants); [EOL]     Node tree = parse(compiler, code); [EOL]     assertNotNull(tree); [EOL]     Node externsRoot = parse(compiler, "function goo() {}" + "function foo() {}"); [EOL]     assertNotNull(externsRoot); [EOL]     Node mainRoot = tree; [EOL]     Node callSite = findCall(tree, null, 2); [EOL]     assertNotNull("Call " + call + " was not found.", callSite); [EOL]     compiler.resetUniqueNameId(); [EOL]     DecompositionType result = decomposer.canExposeExpression(callSite); [EOL]     assertEquals(expectedResult, result); [EOL] } <line_num>: 467,489
private void helperCanExposeExpression(DecompositionType expectedResult, String code, String fnName, Set<String> knownConstants) { [EOL]     Compiler compiler = getCompiler(); [EOL]     if (knownConstants == null) { [EOL]         knownConstants = Sets.newHashSet(); [EOL]     } [EOL]     ExpressionDecomposer decomposer = new ExpressionDecomposer(compiler, compiler.getUniqueNameIdSupplier(), knownConstants); [EOL]     Node tree = parse(compiler, code); [EOL]     assertNotNull(tree); [EOL]     Node externsRoot = parse(compiler, "function goo() {}" + "function foo() {}"); [EOL]     assertNotNull(externsRoot); [EOL]     Node mainRoot = tree; [EOL]     Node callSite = findCall(tree, fnName); [EOL]     assertNotNull("Call to " + fnName + " was not found.", callSite); [EOL]     compiler.resetUniqueNameId(); [EOL]     DecompositionType result = decomposer.canExposeExpression(callSite); [EOL]     assertEquals(expectedResult, result); [EOL] } <line_num>: 491,519
private void helperExposeExpression(String code, String fnName, String expectedResult) { [EOL]     helperExposeExpression(code, fnName, expectedResult, null); [EOL] } <line_num>: 521,528
private void validateSourceInfo(Compiler compiler, Node subtree) { [EOL]     (new LineNumberCheck(compiler)).setCheckSubTree(subtree); [EOL]     if (compiler.getErrorCount() != 0) { [EOL]         String msg = "Error encountered: "; [EOL]         for (JSError err : compiler.getErrors()) { [EOL]             msg += err.toString() + "\n"; [EOL]         } [EOL]         assertTrue(msg, compiler.getErrorCount() == 0); [EOL]     } [EOL] } <line_num>: 530,540
private void helperExposeExpression(String code, String fnName, String expectedResult, Set<String> knownConstants) { [EOL]     Compiler compiler = getCompiler(); [EOL]     if (knownConstants == null) { [EOL]         knownConstants = Sets.newHashSet(); [EOL]     } [EOL]     ExpressionDecomposer decomposer = new ExpressionDecomposer(compiler, compiler.getUniqueNameIdSupplier(), knownConstants); [EOL]     decomposer.setTempNamePrefix("temp"); [EOL]     decomposer.setResultNamePrefix("result"); [EOL]     Node expectedRoot = parse(compiler, expectedResult); [EOL]     Node tree = parse(compiler, code); [EOL]     assertNotNull(tree); [EOL]     Node externsRoot = new Node(Token.EMPTY); [EOL]     Node mainRoot = tree; [EOL]     Node callSite = findCall(tree, fnName); [EOL]     assertNotNull("Call to " + fnName + " was not found.", callSite); [EOL]     DecompositionType result = decomposer.canExposeExpression(callSite); [EOL]     assertTrue(result == DecompositionType.DECOMPOSABLE); [EOL]     compiler.resetUniqueNameId(); [EOL]     decomposer.exposeExpression(callSite); [EOL]     validateSourceInfo(compiler, tree); [EOL]     String explanation = expectedRoot.checkTreeEquals(tree); [EOL]     assertNull("\nExpected: " + compiler.toSource(expectedRoot) + "\nResult: " + compiler.toSource(tree) + "\n" + explanation, explanation); [EOL] } <line_num>: 542,576
private void helperMoveExpression(String code, String fnName, String expectedResult) { [EOL]     helperMoveExpression(code, fnName, expectedResult, null); [EOL] } <line_num>: 578,585
private void helperMoveExpression(String code, String fnName, String expectedResult, Set<String> knownConstants) { [EOL]     Compiler compiler = getCompiler(); [EOL]     if (knownConstants == null) { [EOL]         knownConstants = Sets.newHashSet(); [EOL]     } [EOL]     ExpressionDecomposer decomposer = new ExpressionDecomposer(compiler, compiler.getUniqueNameIdSupplier(), knownConstants); [EOL]     decomposer.setTempNamePrefix("temp"); [EOL]     decomposer.setResultNamePrefix("result"); [EOL]     Node expectedRoot = parse(compiler, expectedResult); [EOL]     Node tree = parse(compiler, code); [EOL]     assertNotNull(tree); [EOL]     Node externsRoot = new Node(Token.EMPTY); [EOL]     Node mainRoot = tree; [EOL]     Node callSite = findCall(tree, fnName); [EOL]     assertNotNull("Call to " + fnName + " was not found.", callSite); [EOL]     compiler.resetUniqueNameId(); [EOL]     decomposer.moveExpression(callSite); [EOL]     validateSourceInfo(compiler, tree); [EOL]     String explanation = expectedRoot.checkTreeEquals(tree); [EOL]     assertNull("\nExpected: " + compiler.toSource(expectedRoot) + "\nResult: " + compiler.toSource(tree) + "\n" + explanation, explanation); [EOL] } <line_num>: 587,619
private static Compiler getCompiler() { [EOL]     Compiler compiler = new Compiler(); [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     options.setLanguageIn(LanguageMode.ECMASCRIPT5); [EOL]     options.setCodingConvention(new GoogleCodingConvention()); [EOL]     compiler.initOptions(options); [EOL]     return compiler; [EOL] } <line_num>: 621,628
private static Node findCall(Node n, String name) { [EOL]     return findCall(n, name, 1); [EOL] } <line_num>: 630,632
Node find(Node n) { [EOL]     if (n.isCall()) { [EOL]         Node callee = n.getFirstChild(); [EOL]         if (name == null || (callee.isName() && callee.getString().equals(name))) { [EOL]             found++; [EOL]             if (found == call) { [EOL]                 return n; [EOL]             } [EOL]         } [EOL]     } [EOL]     for (Node c : n.children()) { [EOL]         Node result = find(c); [EOL]         if (result != null) { [EOL]             return result; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 644,664
private static Node findCall(Node root, @Nullable final String name, final int call) { [EOL]     class Find { [EOL]  [EOL]         int found = 0; [EOL]  [EOL]         Node find(Node n) { [EOL]             if (n.isCall()) { [EOL]                 Node callee = n.getFirstChild(); [EOL]                 if (name == null || (callee.isName() && callee.getString().equals(name))) { [EOL]                     found++; [EOL]                     if (found == call) { [EOL]                         return n; [EOL]                     } [EOL]                 } [EOL]             } [EOL]             for (Node c : n.children()) { [EOL]                 Node result = find(c); [EOL]                 if (result != null) { [EOL]                     return result; [EOL]                 } [EOL]             } [EOL]             return null; [EOL]         } [EOL]     } [EOL]     return (new Find()).find(root); [EOL] } <line_num>: 640,668
private static Node parse(Compiler compiler, String js) { [EOL]     Node n = Normalize.parseAndNormalizeTestCode(compiler, js, ""); [EOL]     assertEquals(0, compiler.getErrorCount()); [EOL]     return n; [EOL] } <line_num>: 670,674
