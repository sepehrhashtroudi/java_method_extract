@Override [EOL] public void setUp() { [EOL]     super.enableLineNumberCheck(false); [EOL]     super.enableNormalize(); [EOL] } <line_num>: 34,38
@Override [EOL] public CompilerPass getProcessor(Compiler compiler) { [EOL]     return new AliasKeywords(compiler); [EOL] } <line_num>: 40,43
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 45,48
private static String generateCode(String keyword, int numReps, String prepend) { [EOL]     StringBuilder sb = new StringBuilder(prepend); [EOL]     for (int i = 0; i < numReps; i++) { [EOL]         sb.append("if ("); [EOL]         sb.append(keyword); [EOL]         sb.append(");"); [EOL]     } [EOL]     return sb.toString(); [EOL] } <line_num>: 57,66
private static String generateCode(String keyword, int numReps) { [EOL]     return generateCode(keyword, numReps, ""); [EOL] } <line_num>: 68,70
private static String generatePreProcessThrowCode(int repititions, String whatToThrow) { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (int i = 0; i < repititions; i++) { [EOL]         sb.append("throw "); [EOL]         sb.append(whatToThrow); [EOL]         sb.append(";"); [EOL]     } [EOL]     return sb.toString(); [EOL] } <line_num>: 72,81
private static String generatePostProcessThrowCode(int repetitions, String code, String whatToThrow) { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append("function "); [EOL]     sb.append(AliasKeywords.ALIAS_THROW); [EOL]     sb.append("(jscomp_throw_param){throw jscomp_throw_param;}"); [EOL]     sb.append(code); [EOL]     for (int i = 0; i < repetitions; i++) { [EOL]         sb.append(AliasKeywords.ALIAS_THROW); [EOL]         sb.append("("); [EOL]         sb.append(whatToThrow); [EOL]         sb.append(");"); [EOL]     } [EOL]     return sb.toString(); [EOL] } <line_num>: 83,97
public void testDontAlias() { [EOL]     testSame(generateCode("true", TOO_FEW_TO_ALIAS_LITERAL)); [EOL]     testSame(generateCode("false", TOO_FEW_TO_ALIAS_LITERAL)); [EOL]     testSame(generateCode("null", TOO_FEW_TO_ALIAS_LITERAL)); [EOL]     testSame(generateCode("void 0", TOO_FEW_TO_ALIAS_LITERAL)); [EOL]     testSame(generatePreProcessThrowCode(TOO_FEW_TO_ALIAS_THROW, "1")); [EOL]     testSame(generateCode("void 1", ENOUGH_TO_ALIAS_LITERAL)); [EOL]     testSame(generateCode("void x", ENOUGH_TO_ALIAS_LITERAL)); [EOL]     testSame(generateCode("void f()", ENOUGH_TO_ALIAS_LITERAL)); [EOL] } <line_num>: 102,113
public void testAlias() { [EOL]     test(generateCode("true", ENOUGH_TO_ALIAS_LITERAL), generateCode(AliasKeywords.ALIAS_TRUE, ENOUGH_TO_ALIAS_LITERAL, "var JSCompiler_alias_TRUE=true;")); [EOL]     test(generateCode("false", ENOUGH_TO_ALIAS_LITERAL), generateCode(AliasKeywords.ALIAS_FALSE, ENOUGH_TO_ALIAS_LITERAL, "var JSCompiler_alias_FALSE=false;")); [EOL]     test(generateCode("null", ENOUGH_TO_ALIAS_LITERAL), generateCode(AliasKeywords.ALIAS_NULL, ENOUGH_TO_ALIAS_LITERAL, "var JSCompiler_alias_NULL=null;")); [EOL]     test(generateCode("void 0", ENOUGH_TO_ALIAS_LITERAL), generateCode(AliasKeywords.ALIAS_VOID, ENOUGH_TO_ALIAS_LITERAL, "var JSCompiler_alias_VOID=void 0;")); [EOL]     test(generatePreProcessThrowCode(ENOUGH_TO_ALIAS_THROW, "1"), generatePostProcessThrowCode(ENOUGH_TO_ALIAS_THROW, "", "1")); [EOL] } <line_num>: 119,138
public void testAliasTrueFalseNull() { [EOL]     StringBuilder actual = new StringBuilder(); [EOL]     actual.append(generateCode("true", ENOUGH_TO_ALIAS_LITERAL)); [EOL]     actual.append(generateCode("false", ENOUGH_TO_ALIAS_LITERAL)); [EOL]     actual.append(generateCode("null", ENOUGH_TO_ALIAS_LITERAL)); [EOL]     actual.append(generateCode("void 0", ENOUGH_TO_ALIAS_LITERAL)); [EOL]     StringBuilder expected = new StringBuilder(); [EOL]     expected.append("var JSCompiler_alias_VOID=void 0;" + "var JSCompiler_alias_TRUE=true;" + "var JSCompiler_alias_NULL=null;" + "var JSCompiler_alias_FALSE=false;"); [EOL]     expected.append(generateCode(AliasKeywords.ALIAS_TRUE, ENOUGH_TO_ALIAS_LITERAL)); [EOL]     expected.append(generateCode(AliasKeywords.ALIAS_FALSE, ENOUGH_TO_ALIAS_LITERAL)); [EOL]     expected.append(generateCode(AliasKeywords.ALIAS_NULL, ENOUGH_TO_ALIAS_LITERAL)); [EOL]     expected.append(generateCode(AliasKeywords.ALIAS_VOID, ENOUGH_TO_ALIAS_LITERAL)); [EOL]     test(actual.toString(), expected.toString()); [EOL] } <line_num>: 140,163
public void testAliasThrowKeywordLiteral() { [EOL]     int repitions = Math.max(ENOUGH_TO_ALIAS_THROW, ENOUGH_TO_ALIAS_LITERAL); [EOL]     String afterCode = generatePostProcessThrowCode(repitions, "var JSCompiler_alias_TRUE=true;", AliasKeywords.ALIAS_TRUE); [EOL]     test(generatePreProcessThrowCode(repitions, "true"), afterCode); [EOL] } <line_num>: 165,171
public void testExistingAliasDefinitionFails() { [EOL]     try { [EOL]         testSame("var JSCompiler_alias_TRUE='foo';"); [EOL]         fail(); [EOL]     } catch (RuntimeException expected) { [EOL]         assertTrue(-1 != expected.getMessage().indexOf("Existing alias definition")); [EOL]     } [EOL] } <line_num>: 173,182
public void testWithNoInputs() { [EOL]     testSame(new String[] {}); [EOL] } <line_num>: 184,186
