public StripCodeTest() { [EOL]     super(EXTERNS, true); [EOL] } <line_num>: 31,33
private static StripCode createLoggerInstance(Compiler compiler) { [EOL]     Set<String> stripTypes = Sets.newHashSet("goog.debug.DebugWindow", "goog.debug.FancyWindow", "goog.debug.Formatter", "goog.debug.HtmlFormatter", "goog.debug.TextFormatter", "goog.debug.Logger", "goog.debug.LogManager", "goog.debug.LogRecord", "goog.net.BrowserChannel.LogSaver", "GA_GoogleDebugger"); [EOL]     Set<String> stripNames = Sets.newHashSet("logger", "logger_", "debugWindow", "debugWindow_", "logFormatter_", "logBuffer_"); [EOL]     Set<String> stripNamePrefixes = Sets.newHashSet("trace"); [EOL]     Set<String> stripTypePrefixes = Sets.newHashSet("e.f.Trace"); [EOL]     return new StripCode(compiler, stripTypes, stripNames, stripTypePrefixes, stripNamePrefixes); [EOL] } <line_num>: 41,67
@Override [EOL] public CompilerPass getProcessor(Compiler compiler) { [EOL]     return createLoggerInstance(compiler); [EOL] } <line_num>: 69,71
public void testLoggerDefinedInConstructor() { [EOL]     test("a.b.c = function() {" + "  this.logger = goog.debug.Logger.getLogger('a.b.c');" + "};", "a.b.c=function(){}"); [EOL] } <line_num>: 73,78
public void testLoggerDefinedInPrototype1() { [EOL]     test("a.b.c = function() {};" + "a.b.c.prototype.logger = goog.debug.Logger.getLogger('a.b.c');", "a.b.c=function(){}"); [EOL] } <line_num>: 80,84
public void testLoggerDefinedInPrototype2() { [EOL]     test("a.b.c = function() {};" + "a.b.c.prototype = {logger: goog.debug.Logger.getLogger('a.b.c')}", "a.b.c = function() {};" + "a.b.c.prototype = {}"); [EOL] } <line_num>: 86,91
public void testLoggerDefinedInPrototype3() { [EOL]     test("a.b.c = function() {};" + "a.b.c.prototype = { " + "  get logger() {return goog.debug.Logger.getLogger('a.b.c')}" + "}", "a.b.c = function() {};" + "a.b.c.prototype = {}"); [EOL] } <line_num>: 93,100
public void testLoggerDefinedInPrototype4() { [EOL]     test("a.b.c = function() {};" + "a.b.c.prototype = { " + "  set logger(a) {this.x = goog.debug.Logger.getLogger('a.b.c')}" + "}", "a.b.c = function() {};" + "a.b.c.prototype = {}"); [EOL] } <line_num>: 102,109
public void testLoggerDefinedInPrototype5() { [EOL]     test("a.b.c = function() {};" + "a.b.c.prototype = { " + "  get f() {return this.x;}," + "  set f(a) {this.x = goog.debug.Logger.getLogger('a.b.c')}" + "}", "a.b.c = function() {};" + "a.b.c.prototype = { " + "  get f() {return this.x;}," + "  set f(a) {this.x = null}" + "}"); [EOL] } <line_num>: 111,122
public void testLoggerDefinedStatically() { [EOL]     test("a.b.c = function() {};" + "a.b.c.logger = goog.debug.Logger.getLogger('a.b.c');", "a.b.c=function(){}"); [EOL] } <line_num>: 124,128
public void testLoggerDefinedInObjectLiteral1() { [EOL]     test("a.b.c = {" + "  x: 0," + "  logger: goog.debug.Logger.getLogger('a.b.c')" + "};", "a.b.c={x:0}"); [EOL] } <line_num>: 130,136
public void testLoggerDefinedInObjectLiteral2() { [EOL]     test("a.b.c = {" + "  x: 0," + "  get logger() {return goog.debug.Logger.getLogger('a.b.c')}" + "};", "a.b.c={x:0}"); [EOL] } <line_num>: 138,144
public void testLoggerDefinedInObjectLiteral3() { [EOL]     test("a.b.c = {" + "  x: null," + "  get logger() {return this.x}," + "  set logger(a) {this.x  = goog.debug.Logger.getLogger(a)}" + "};", "a.b.c={x:null}"); [EOL] } <line_num>: 146,153
public void testLoggerDefinedInObjectLiteral4() { [EOL]     test("a.b.c = {" + "  x: null," + "  get y() {return this.x}," + "  set y(a) {this.x  = goog.debug.Logger.getLogger(a)}" + "};", "a.b.c = {" + "  x: null," + "  get y() {return this.x}," + "  set y(a) {this.x  = null}" + "};"); [EOL] } <line_num>: 155,166
public void testLoggerDefinedInPrototypeAndUsedInConstructor() { [EOL]     test("a.b.c = function(level) {" + "  if (!this.logger.isLoggable(level)) {" + "    this.logger.setLevel(level);" + "  }" + "  this.logger.log(level, 'hi');" + "};" + "a.b.c.prototype.logger = goog.debug.Logger.getLogger('a.b.c');" + "a.b.c.prototype.go = function() { this.logger.finer('x'); };", "a.b.c=function(level){if(!null);};" + "a.b.c.prototype.go=function(){}"); [EOL] } <line_num>: 168,179
public void testLoggerDefinedStaticallyAndUsedInConstructor() { [EOL]     test("a.b.c = function(level) {" + "  if (!a.b.c.logger.isLoggable(level)) {" + "    a.b.c.logger.setLevel(level);" + "  }" + "  a.b.c.logger.log(level, 'hi');" + "};" + "a.b.c.logger = goog.debug.Logger.getLogger('a.b.c');", "a.b.c=function(level){if(!null);}"); [EOL] } <line_num>: 181,190
public void testLoggerVarDeclaration() { [EOL]     test("var logger = opt_logger || goog.debug.LogManager.getRoot();", ""); [EOL] } <line_num>: 192,194
public void testLoggerMethodCallByVariableType() { [EOL]     test("var x = goog.debug.Logger.getLogger('a.b.c'); y.info(a); x.info(a);", "y.info(a)"); [EOL] } <line_num>: 196,199
public void testSubPropertyAccessByVariableName() { [EOL]     test("var x, y = goog.debug.Logger.getLogger('a.b.c');" + "var logger = x;" + "var curlevel = logger.level_ ? logger.getLevel().name : 3;", "var x;var curlevel=null?null:3"); [EOL] } <line_num>: 201,206
public void testPrefixedVariableName() { [EOL]     test("this.blcLogger_ = goog.debug.Logger.getLogger('a.b.c');" + "this.blcLogger_.fine('Raised dirty states.');", ""); [EOL] } <line_num>: 208,211
public void testPrefixedPropertyName() { [EOL]     test("a.b.c.staticLogger_ = goog.debug.Logger.getLogger('a.b.c');" + "a.b.c.staticLogger_.fine('-' + a.b.c.d_())", ""); [EOL] } <line_num>: 213,216
public void testPrefixedClassName() { [EOL]     test("a.b.MyLogger = function(logger) {" + "  this.logger_ = logger;" + "};" + "a.b.MyLogger.prototype.shout = function(msg, opt_x) {" + "  this.logger_.log(goog.debug.Logger.Level.SHOUT, msg, opt_x);" + "};", "a.b.MyLogger=function(logger){};" + "a.b.MyLogger.prototype.shout=function(msg,opt_x){}"); [EOL] } <line_num>: 218,227
public void testLoggerClassDefinition() { [EOL]     test("goog.debug.Logger=function(name){this.name_=name}", ""); [EOL] } <line_num>: 229,231
public void testStaticLoggerPropertyDefinition() { [EOL]     test("goog.debug.Logger.Level.SHOUT=" + "new goog.debug.Logger.Level(x,1200)", ""); [EOL] } <line_num>: 233,236
public void testStaticLoggerMethodDefinition() { [EOL]     test("goog.debug.Logger.getLogger=function(name){" + "return goog.debug.LogManager.getLogger(name)" + "};", ""); [EOL] } <line_num>: 238,242
public void testPrototypeFieldDefinition() { [EOL]     test("goog.debug.Logger.prototype.level_=null;", ""); [EOL] } <line_num>: 244,246
public void testPrototypeFieldDefinitionWithoutAssignment() { [EOL]     test("goog.debug.Logger.prototype.level_;", ""); [EOL] } <line_num>: 248,250
public void testPrototypeMethodDefinition() { [EOL]     test("goog.debug.Logger.prototype.addHandler=" + "function(handler){this.handlers_.push(handler)};", ""); [EOL] } <line_num>: 252,255
public void testPublicPropertyAssignment() { [EOL]     testSame("rootLogger.someProperty=3"); [EOL]     testSame("this.blcLogger_.level=x"); [EOL]     testSame("goog.ui.Component.logger.prop=y"); [EOL] } <line_num>: 257,264
public void testGlobalCallWithStrippedType() { [EOL]     testSame("window.alert(goog.debug.Logger)"); [EOL] } <line_num>: 266,268
public void testClassDefiningCallWithStripType1() { [EOL]     test("goog.debug.Logger.inherits(Object)", ""); [EOL] } <line_num>: 270,272
public void testClassDefiningCallWithStripType2() { [EOL]     test("goog.formatter=function(){};" + "goog.inherits(goog.debug.Formatter,goog.formatter)", "goog.formatter=function(){}"); [EOL] } <line_num>: 274,278
public void testClassDefiningCallWithStripType3() { [EOL]     test("goog.formatter=function(){};" + "goog.inherits(goog.formatter,goog.debug.Formatter)", null, StripCode.STRIP_TYPE_INHERIT_ERROR); [EOL] } <line_num>: 280,284
public void testClassDefiningCallWithStripType4() { [EOL]     test("goog.formatter=function(){};" + "goog.formatter.inherits(goog.debug.Formatter)", null, StripCode.STRIP_TYPE_INHERIT_ERROR); [EOL] } <line_num>: 286,290
public void testClassDefiningCallWithStripType5() { [EOL]     testSame("goog.formatter=function(){};" + "goog.formatter.inherits(goog.debug.FormatterFoo)"); [EOL] } <line_num>: 292,295
public void testClassDefiningCallWithStripType6() { [EOL]     test("goog.formatter=function(){};" + "goog.formatter.inherits(goog.debug.Formatter.Foo)", null, StripCode.STRIP_TYPE_INHERIT_ERROR); [EOL] } <line_num>: 297,301
public void testClassDefiningCallWithStripType7() { [EOL]     test("goog.inherits(goog.debug.TextFormatter,goog.debug.Formatter)", ""); [EOL] } <line_num>: 303,305
public void testClassDefiningCallWithStripType8() { [EOL]     test("goog.debug.DebugWindow = function(){}", ""); [EOL]     test("goog.inherits(goog.debug.DebugWindow,Base)", ""); [EOL]     testSame("goog.debug.DebugWindowFoo=function(){}"); [EOL]     testSame("goog.inherits(goog.debug.DebugWindowFoo,Base)"); [EOL]     testSame("goog.debug.DebugWindowFoo"); [EOL]     testSame("goog.debug.DebugWindowFoo=1"); [EOL]     test("goog.debug.DebugWindow.Foo=function(){}", ""); [EOL]     test("goog.inherits(goog.debug.DebugWindow.Foo,Base)", ""); [EOL]     test("goog.debug.DebugWindow.Foo", ""); [EOL]     test("goog.debug.DebugWindow.Foo=1", ""); [EOL] } <line_num>: 307,324
public void testPropertyWithEmptyStringKey() { [EOL]     test("goog.format.NUMERIC_SCALES_BINARY_ = {'': 1};", "goog.format.NUMERIC_SCALES_BINARY_={\"\":1}"); [EOL] } <line_num>: 326,329
public void testVarinIf() { [EOL]     test("if(x)var logger=null;else foo()", "if(x);else foo()"); [EOL] } <line_num>: 331,333
public void testGetElemInIf() { [EOL]     test("var logger=null;if(x)logger[f];else foo()", "if(x);else foo()"); [EOL] } <line_num>: 335,337
public void testAssignInIf() { [EOL]     test("var logger=null;if(x)logger=1;else foo()", "if(x);else foo()"); [EOL] } <line_num>: 339,342
public void testNamePrefix() { [EOL]     test("a = function(traceZZZ) {}; a.prototype.traceXXX = {x: 1};" + "a.prototype.z = function() { this.traceXXX.f(); };" + "var traceYYY = 0;", "a=function(traceZZZ){};a.prototype.z=function(){}"); [EOL] } <line_num>: 344,349
public void testTypePrefix() { [EOL]     test("e.f.TraceXXX = function() {}; " + "e.f.TraceXXX.prototype.yyy = 2;", ""); [EOL] } <line_num>: 351,354
public void testStripCallsToStrippedNames() { [EOL]     test("a = function() { this.logger_ = function(msg){}; };" + "a.prototype.b = function() { this.logger_('hi'); }", "a=function(){};a.prototype.b=function(){}"); [EOL]     test("a = function() {};" + "a.prototype.logger_ = function(msg) {};" + "a.prototype.b = function() { this.logger_('hi'); }", "a=function(){};a.prototype.b=function(){}"); [EOL] } <line_num>: 356,364
public void testStripVarsInitializedFromStrippedNames() { [EOL]     test("a = function() { this.logger_ = function() { return 1; }; };" + "a.prototype.b = function() { " + "  var one = this.logger_(); if (one) foo() }", "a=function(){};a.prototype.b=function(){if(null)foo()}"); [EOL] } <line_num>: 366,371
public void testReportErrorOnStripInNestedAssignment() { [EOL]     test("(foo.logger_ = 7) + 8", "(foo.logger_ = 7) + 8", StripCode.STRIP_ASSIGNMENT_ERROR); [EOL]     test("(goog.debug.Logger.foo = 7) + 8", "(goog.debug.Logger.foo = 7) + 8", StripCode.STRIP_ASSIGNMENT_ERROR); [EOL]     test("(GA_GoogleDebugger.foo = 7) + 8", "(GA_GoogleDebugger.foo = 7) + 8", StripCode.STRIP_ASSIGNMENT_ERROR); [EOL] } <line_num>: 373,388
public void testNewOperatior1() { [EOL]     test("function foo() {} foo.bar = new goog.debug.Logger();", "function foo() {} foo.bar = null;"); [EOL] } <line_num>: 390,393
public void testNewOperatior2() { [EOL]     test("function foo() {} foo.bar = (new goog.debug.Logger()).foo();", "function foo() {} foo.bar = null;"); [EOL] } <line_num>: 395,398
public void testCrazyNesting1() { [EOL]     test("var x = {}; x[new goog.debug.Logger()] = 3;", "var x = {}; x[null] = 3;"); [EOL] } <line_num>: 400,403
public void testCrazyNesting2() { [EOL]     test("var x = {}; x[goog.debug.Logger.getLogger()] = 3;", "var x = {}; x[null] = 3;"); [EOL] } <line_num>: 405,408
public void testCrazyNesting3() { [EOL]     test("var x = function() {}; x(new goog.debug.Logger());", "var x = function() {}; x(null);"); [EOL] } <line_num>: 410,413
public void testCrazyNesting4() { [EOL]     test("var x = function() {}; x(goog.debug.Logger.getLogger());", "var x = function() {}; x(null);"); [EOL] } <line_num>: 415,418
public void testCrazyNesting5() { [EOL]     test("var x = function() {}; var y = {}; " + "var z = goog.debug.Logger.getLogger(); x(y[z['foo']]);", "var x = function() {}; var y = {}; x(y[null]);"); [EOL] } <line_num>: 420,424
