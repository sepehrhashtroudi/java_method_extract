public ScopedAliasesTest() { [EOL]     super(EXTERNS); [EOL] } <line_num>: 47,49
public TypeVerifyingPass(Compiler compiler) { [EOL]     this.compiler = compiler; [EOL] } <line_num>: 625,627
private void testScoped(String code, String expected) { [EOL]     test(GOOG_SCOPE_START_BLOCK + code + GOOG_SCOPE_END_BLOCK, expected); [EOL] } <line_num>: 51,53
private void testScopedNoChanges(String aliases, String code) { [EOL]     testScoped(aliases + code, code); [EOL] } <line_num>: 55,57
public void testOneLevel() { [EOL]     testScoped("var g = goog;g.dom.createElement(g.dom.TagName.DIV);", "goog.dom.createElement(goog.dom.TagName.DIV);"); [EOL] } <line_num>: 59,62
public void testTwoLevel() { [EOL]     testScoped("var d = goog.dom;d.createElement(d.TagName.DIV);", "goog.dom.createElement(goog.dom.TagName.DIV);"); [EOL] } <line_num>: 64,67
public void testTransitive() { [EOL]     testScoped("var d = goog.dom;var DIV = d.TagName.DIV;d.createElement(DIV);", "goog.dom.createElement(goog.dom.TagName.DIV);"); [EOL] } <line_num>: 69,72
public void testTransitiveInSameVar() { [EOL]     testScoped("var d = goog.dom, DIV = d.TagName.DIV;d.createElement(DIV);", "goog.dom.createElement(goog.dom.TagName.DIV);"); [EOL] } <line_num>: 74,77
public void testMultipleTransitive() { [EOL]     testScoped("var g=goog;var d=g.dom;var t=d.TagName;var DIV=t.DIV;" + "d.createElement(DIV);", "goog.dom.createElement(goog.dom.TagName.DIV);"); [EOL] } <line_num>: 79,84
public void testFourLevel() { [EOL]     testScoped("var DIV = goog.dom.TagName.DIV;goog.dom.createElement(DIV);", "goog.dom.createElement(goog.dom.TagName.DIV);"); [EOL] } <line_num>: 86,89
public void testWorksInClosures() { [EOL]     testScoped("var DIV = goog.dom.TagName.DIV;" + "goog.x = function() {goog.dom.createElement(DIV);};", "goog.x = function() {goog.dom.createElement(goog.dom.TagName.DIV);};"); [EOL] } <line_num>: 91,96
public void testOverridden() { [EOL]     testScopedNoChanges("var g = goog;", "goog.x = function(g) {g.z()};"); [EOL]     testScopedNoChanges("var g = goog;", "goog.x = function() {var g = {}; g.z()};"); [EOL] } <line_num>: 98,106
public void testTwoScopes() { [EOL]     test("goog.scope(function() {var g = goog;g.method()});" + "goog.scope(function() {g.method();});", "goog.method();g.method();"); [EOL] } <line_num>: 108,113
public void testTwoSymbolsInTwoScopes() { [EOL]     test("var goog = {};" + "goog.scope(function() { var g = goog; g.Foo = function() {}; });" + "goog.scope(function() { " + "  var Foo = goog.Foo; goog.bar = function() { return new Foo(); };" + "});", "var goog = {};" + "goog.Foo = function() {};" + "goog.bar = function() { return new goog.Foo(); };"); [EOL] } <line_num>: 115,125
public void testAliasOfSymbolInGoogScope() { [EOL]     test("var goog = {};" + "goog.scope(function() {" + "  var g = goog;" + "  g.Foo = function() {};" + "  var Foo = g.Foo;" + "  Foo.prototype.bar = function() {};" + "});", "var goog = {}; goog.Foo = function() {};" + "goog.Foo.prototype.bar = function() {};"); [EOL] } <line_num>: 127,138
public void testScopedFunctionReturnThis() { [EOL]     test("goog.scope(function() { " + "  var g = goog; g.f = function() { return this; };" + "});", "goog.f = function() { return this; };"); [EOL] } <line_num>: 140,145
public void testScopedFunctionAssignsToVar() { [EOL]     test("goog.scope(function() { " + "  var g = goog; g.f = function(x) { x = 3; return x; };" + "});", "goog.f = function(x) { x = 3; return x; };"); [EOL] } <line_num>: 147,152
public void testScopedFunctionThrows() { [EOL]     test("goog.scope(function() { " + "  var g = goog; g.f = function() { throw 'error'; };" + "});", "goog.f = function() { throw 'error'; };"); [EOL] } <line_num>: 154,159
public void testPropertiesNotChanged() { [EOL]     testScopedNoChanges("var x = goog.dom;", "y.x();"); [EOL] } <line_num>: 161,163
public void testShadowedVar() { [EOL]     test("var Popup = {};" + "var OtherPopup = {};" + "goog.scope(function() {" + "  var Popup = OtherPopup;" + "  Popup.newMethod = function() { return new Popup(); };" + "});", "var Popup = {};" + "var OtherPopup = {};" + "OtherPopup.newMethod = function() { return new OtherPopup(); };"); [EOL] } <line_num>: 165,175
public void testShadowedScopedVar() { [EOL]     test("var goog = {};" + "goog.bar = {};" + "goog.scope(function() {" + "  var bar = goog.bar;" + "  bar.newMethod = function(goog) { return goog + bar; };" + "});", "var goog={};" + "goog.bar={};" + "goog.bar.newMethod=function(goog$$1){return goog$$1 + goog.bar}"); [EOL] } <line_num>: 177,189
public void testShadowedScopedVarTwoScopes() { [EOL]     test("var goog = {};" + "goog.bar = {};" + "goog.scope(function() {" + "  var bar = goog.bar;" + "  bar.newMethod = function(goog, a) { return bar + a; };" + "});" + "goog.scope(function() {" + "  var bar = goog.bar;" + "  bar.newMethod2 = function(goog, b) { return bar + b; };" + "});", "var goog={};" + "goog.bar={};" + "goog.bar.newMethod=function(goog$$1, a){return goog.bar + a};" + "goog.bar.newMethod2=function(goog$$1, b){return goog.bar + b};"); [EOL] } <line_num>: 191,206
public void testUsingObjectLiteralToEscapeScoping() { [EOL]     test("var goog = {};" + "goog.bar = {};" + "goog.scope(function() {" + "  var bar = goog.bar;" + "  var baz = goog.bar.baz;" + "  goog.foo = function() {" + "    goog.bar = {baz: 3};" + "    return baz;" + "  };" + "});", "var goog = {};" + "goog.bar = {};" + "goog.foo = function(){" + "  goog.bar = {baz:3};" + "  return goog.bar.baz;" + "};"); [EOL] } <line_num>: 208,231
private void testTypes(String aliases, String code) { [EOL]     testScopedNoChanges(aliases, code); [EOL]     verifyTypes(); [EOL] } <line_num>: 233,236
private void verifyTypes() { [EOL]     Compiler lastCompiler = getLastCompiler(); [EOL]     new TypeVerifyingPass(lastCompiler).process(lastCompiler.externsRoot, lastCompiler.jsRoot); [EOL] } <line_num>: 238,242
public void testJsDocType() { [EOL]     testTypes("var x = goog.Timer;", "" + "/** @type {x} */ types.actual;" + "/** @type {goog.Timer} */ types.expected;"); [EOL] } <line_num>: 244,250
public void testJsDocParameter() { [EOL]     testTypes("var x = goog.Timer;", "" + "/** @param {x} a */ types.actual;" + "/** @param {goog.Timer} a */ types.expected;"); [EOL] } <line_num>: 252,258
public void testJsDocExtends() { [EOL]     testTypes("var x = goog.Timer;", "" + "/** @extends {x} */ types.actual;" + "/** @extends {goog.Timer} */ types.expected;"); [EOL] } <line_num>: 260,266
public void testJsDocImplements() { [EOL]     testTypes("var x = goog.Timer;", "" + "/** @implements {x} */ types.actual;" + "/** @implements {goog.Timer} */ types.expected;"); [EOL] } <line_num>: 268,274
public void testJsDocEnum() { [EOL]     testTypes("var x = goog.Timer;", "" + "/** @enum {x} */ types.actual;" + "/** @enum {goog.Timer} */ types.expected;"); [EOL] } <line_num>: 276,282
public void testJsDocReturn() { [EOL]     testTypes("var x = goog.Timer;", "" + "/** @return {x} */ types.actual;" + "/** @return {goog.Timer} */ types.expected;"); [EOL] } <line_num>: 284,290
public void testJsDocThis() { [EOL]     testTypes("var x = goog.Timer;", "" + "/** @this {x} */ types.actual;" + "/** @this {goog.Timer} */ types.expected;"); [EOL] } <line_num>: 292,298
public void testJsDocThrows() { [EOL]     testTypes("var x = goog.Timer;", "" + "/** @throws {x} */ types.actual;" + "/** @throws {goog.Timer} */ types.expected;"); [EOL] } <line_num>: 300,306
public void testJsDocSubType() { [EOL]     testTypes("var x = goog.Timer;", "" + "/** @type {x.Enum} */ types.actual;" + "/** @type {goog.Timer.Enum} */ types.expected;"); [EOL] } <line_num>: 308,314
public void testJsDocTypedef() { [EOL]     testTypes("var x = goog.Timer;", "" + "/** @typedef {x} */ types.actual;" + "/** @typedef {goog.Timer} */ types.expected;"); [EOL] } <line_num>: 316,322
public void testArrayJsDoc() { [EOL]     testTypes("var x = goog.Timer;", "" + "/** @type {Array.<x>} */ types.actual;" + "/** @type {Array.<goog.Timer>} */ types.expected;"); [EOL] } <line_num>: 324,330
public void testObjectJsDoc() { [EOL]     testTypes("var x = goog.Timer;", "" + "/** @type {{someKey: x}} */ types.actual;" + "/** @type {{someKey: goog.Timer}} */ types.expected;"); [EOL]     testTypes("var x = goog.Timer;", "" + "/** @type {{x: number}} */ types.actual;" + "/** @type {{x: number}} */ types.expected;"); [EOL] } <line_num>: 332,343
public void testUnionJsDoc() { [EOL]     testTypes("var x = goog.Timer;", "" + "/** @type {x|Object} */ types.actual;" + "/** @type {goog.Timer|Object} */ types.expected;"); [EOL] } <line_num>: 345,351
public void testFunctionJsDoc() { [EOL]     testTypes("var x = goog.Timer;", "" + "/** @type {function(x) : void} */ types.actual;" + "/** @type {function(goog.Timer) : void} */ types.expected;"); [EOL]     testTypes("var x = goog.Timer;", "" + "/** @type {function() : x} */ types.actual;" + "/** @type {function() : goog.Timer} */ types.expected;"); [EOL] } <line_num>: 353,364
public void testForwardJsDoc() { [EOL]     testScoped("/**\n" + " * @constructor\n" + " */\n" + "foo.Foo = function() {};" + "/** @param {Foo.Bar} x */ foo.Foo.actual = function(x) {3};" + "var Foo = foo.Foo;" + "/** @constructor */ Foo.Bar = function() {};" + "/** @param {foo.Foo.Bar} x */ foo.Foo.expected = function(x) {};", "/**\n" + " * @constructor\n" + " */\n" + "foo.Foo = function() {};" + "/** @param {foo.Foo.Bar} x */ foo.Foo.actual = function(x) {3};" + "/** @constructor */ foo.Foo.Bar = function() {};" + "/** @param {foo.Foo.Bar} x */ foo.Foo.expected = function(x) {};"); [EOL]     verifyTypes(); [EOL] } <line_num>: 366,385
public void testTestTypes() { [EOL]     try { [EOL]         testTypes("var x = goog.Timer;", "" + "/** @type {function() : x} */ types.actual;" + "/** @type {function() : wrong.wrong} */ types.expected;"); [EOL]         fail("Test types should fail here."); [EOL]     } catch (AssertionError e) { [EOL]     } [EOL] } <line_num>: 387,397
public void testNullType() { [EOL]     testTypes("var x = goog.Timer;", "/** @param draggable */ types.actual;" + "/** @param draggable */ types.expected;"); [EOL] } <line_num>: 399,404
public void testIssue772() { [EOL]     testTypes("var b = a.b;" + "var c = b.c;", "/** @param {c.MyType} x */ types.actual;" + "/** @param {a.b.c.MyType} x */ types.expected;"); [EOL] } <line_num>: 406,412
private void testFailure(String code, DiagnosticType expectedError) { [EOL]     test(code, null, expectedError); [EOL] } <line_num>: 418,420
private void testScopedFailure(String code, DiagnosticType expectedError) { [EOL]     test("goog.scope(function() {" + code + "});", null, expectedError); [EOL] } <line_num>: 422,424
public void testScopedThis() { [EOL]     testScopedFailure("this.y = 10;", ScopedAliases.GOOG_SCOPE_REFERENCES_THIS); [EOL]     testScopedFailure("var x = this;", ScopedAliases.GOOG_SCOPE_REFERENCES_THIS); [EOL]     testScopedFailure("fn(this);", ScopedAliases.GOOG_SCOPE_REFERENCES_THIS); [EOL] } <line_num>: 426,431
public void testAliasRedefinition() { [EOL]     testScopedFailure("var x = goog.dom; x = goog.events;", ScopedAliases.GOOG_SCOPE_ALIAS_REDEFINED); [EOL] } <line_num>: 433,436
public void testAliasNonRedefinition() { [EOL]     test("var y = {}; goog.scope(function() { goog.dom = y; });", "var y = {}; goog.dom = y;"); [EOL] } <line_num>: 438,441
public void testScopedReturn() { [EOL]     testScopedFailure("return;", ScopedAliases.GOOG_SCOPE_USES_RETURN); [EOL]     testScopedFailure("var x = goog.dom; return;", ScopedAliases.GOOG_SCOPE_USES_RETURN); [EOL] } <line_num>: 443,447
public void testScopedThrow() { [EOL]     testScopedFailure("throw 'error';", ScopedAliases.GOOG_SCOPE_USES_THROW); [EOL] } <line_num>: 449,451
public void testUsedImproperly() { [EOL]     testFailure("var x = goog.scope(function() {});", ScopedAliases.GOOG_SCOPE_USED_IMPROPERLY); [EOL] } <line_num>: 453,456
public void testBadParameters() { [EOL]     testFailure("goog.scope()", ScopedAliases.GOOG_SCOPE_HAS_BAD_PARAMETERS); [EOL]     testFailure("goog.scope(10)", ScopedAliases.GOOG_SCOPE_HAS_BAD_PARAMETERS); [EOL]     testFailure("goog.scope(function() {}, 10)", ScopedAliases.GOOG_SCOPE_HAS_BAD_PARAMETERS); [EOL]     testFailure("goog.scope(function z() {})", ScopedAliases.GOOG_SCOPE_HAS_BAD_PARAMETERS); [EOL]     testFailure("goog.scope(function(a, b, c) {})", ScopedAliases.GOOG_SCOPE_HAS_BAD_PARAMETERS); [EOL] } <line_num>: 458,467
public void testNonAliasLocal() { [EOL]     testScopedFailure("var x = 10", ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL); [EOL]     testScopedFailure("var x = goog.dom + 10", ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL); [EOL]     testScopedFailure("var x = goog['dom']", ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL); [EOL]     testScopedFailure("var x = goog.dom, y = 10", ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL); [EOL]     testScopedFailure("function f() {}", ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL); [EOL] } <line_num>: 469,479
public void testNoGoogScope() { [EOL]     String fullJsCode = "var g = goog;\n g.dom.createElement(g.dom.TagName.DIV);"; [EOL]     TransformationHandlerSpy spy = new TransformationHandlerSpy(); [EOL]     transformationHandler = spy; [EOL]     test(fullJsCode, fullJsCode); [EOL]     assertTrue(spy.observedPositions.isEmpty()); [EOL] } <line_num>: 483,491
public void testRecordOneAlias() { [EOL]     String fullJsCode = GOOG_SCOPE_START_BLOCK + "var g = goog;\n g.dom.createElement(g.dom.TagName.DIV);\n" + GOOG_SCOPE_END_BLOCK; [EOL]     String expectedJsCode = "goog.dom.createElement(goog.dom.TagName.DIV);\n"; [EOL]     TransformationHandlerSpy spy = new TransformationHandlerSpy(); [EOL]     transformationHandler = spy; [EOL]     test(fullJsCode, expectedJsCode); [EOL]     assertTrue(spy.observedPositions.containsKey("testcode")); [EOL]     List<SourcePosition<AliasTransformation>> positions = spy.observedPositions.get("testcode"); [EOL]     assertEquals(1, positions.size()); [EOL]     verifyAliasTransformationPosition(1, 0, 2, 1, positions.get(0)); [EOL]     assertEquals(1, spy.constructedAliases.size()); [EOL]     AliasSpy aliasSpy = (AliasSpy) spy.constructedAliases.get(0); [EOL]     assertEquals("goog", aliasSpy.observedDefinitions.get("g")); [EOL] } <line_num>: 493,512
public void testRecordMultipleAliases() { [EOL]     String fullJsCode = GOOG_SCOPE_START_BLOCK + "var g = goog;\n var b= g.bar;\n var f = goog.something.foo;" + "g.dom.createElement(g.dom.TagName.DIV);\n b.foo();" + GOOG_SCOPE_END_BLOCK; [EOL]     String expectedJsCode = "goog.dom.createElement(goog.dom.TagName.DIV);\n goog.bar.foo();"; [EOL]     TransformationHandlerSpy spy = new TransformationHandlerSpy(); [EOL]     transformationHandler = spy; [EOL]     test(fullJsCode, expectedJsCode); [EOL]     assertTrue(spy.observedPositions.containsKey("testcode")); [EOL]     List<SourcePosition<AliasTransformation>> positions = spy.observedPositions.get("testcode"); [EOL]     assertEquals(1, positions.size()); [EOL]     verifyAliasTransformationPosition(1, 0, 3, 1, positions.get(0)); [EOL]     assertEquals(1, spy.constructedAliases.size()); [EOL]     AliasSpy aliasSpy = (AliasSpy) spy.constructedAliases.get(0); [EOL]     assertEquals("goog", aliasSpy.observedDefinitions.get("g")); [EOL]     assertEquals("g.bar", aliasSpy.observedDefinitions.get("b")); [EOL]     assertEquals("goog.something.foo", aliasSpy.observedDefinitions.get("f")); [EOL] } <line_num>: 514,536
public void testRecordAliasFromMultipleGoogScope() { [EOL]     String firstGoogScopeBlock = GOOG_SCOPE_START_BLOCK + "\n var g = goog;\n g.dom.createElement(g.dom.TagName.DIV);\n" + GOOG_SCOPE_END_BLOCK; [EOL]     String fullJsCode = firstGoogScopeBlock + "\n\nvar l = abc.def;\n\n" + GOOG_SCOPE_START_BLOCK + "\n var z = namespace.Zoo;\n z.getAnimals(l);\n" + GOOG_SCOPE_END_BLOCK; [EOL]     String expectedJsCode = "goog.dom.createElement(goog.dom.TagName.DIV);\n" + "\n\nvar l = abc.def;\n\n" + "\n namespace.Zoo.getAnimals(l);\n"; [EOL]     TransformationHandlerSpy spy = new TransformationHandlerSpy(); [EOL]     transformationHandler = spy; [EOL]     test(fullJsCode, expectedJsCode); [EOL]     assertTrue(spy.observedPositions.containsKey("testcode")); [EOL]     List<SourcePosition<AliasTransformation>> positions = spy.observedPositions.get("testcode"); [EOL]     assertEquals(2, positions.size()); [EOL]     verifyAliasTransformationPosition(1, 0, 6, 0, positions.get(0)); [EOL]     verifyAliasTransformationPosition(8, 0, 11, 4, positions.get(1)); [EOL]     assertEquals(2, spy.constructedAliases.size()); [EOL]     AliasSpy aliasSpy = (AliasSpy) spy.constructedAliases.get(0); [EOL]     assertEquals("goog", aliasSpy.observedDefinitions.get("g")); [EOL]     aliasSpy = (AliasSpy) spy.constructedAliases.get(1); [EOL]     assertEquals("namespace.Zoo", aliasSpy.observedDefinitions.get("z")); [EOL] } <line_num>: 538,570
private void verifyAliasTransformationPosition(int startLine, int startChar, int endLine, int endChar, SourcePosition<AliasTransformation> pos) { [EOL]     assertEquals(startLine, pos.getStartLine()); [EOL]     assertEquals(startChar, pos.getPositionOnStartLine()); [EOL]     assertTrue("expected endline >= " + endLine + ".  Found " + pos.getEndLine(), pos.getEndLine() >= endLine); [EOL]     assertTrue("expected endChar >= " + endChar + ".  Found " + pos.getPositionOnEndLine(), pos.getPositionOnEndLine() >= endChar); [EOL] } <line_num>: 572,581
@Override [EOL] protected ScopedAliases getProcessor(Compiler compiler) { [EOL]     return new ScopedAliases(compiler, null, transformationHandler); [EOL] } <line_num>: 583,586
@Override [EOL] public AliasTransformation logAliasTransformation(String sourceFile, SourcePosition<AliasTransformation> position) { [EOL]     if (!observedPositions.containsKey(sourceFile)) { [EOL]         observedPositions.put(sourceFile, Lists.<SourcePosition<AliasTransformation>>newArrayList()); [EOL]     } [EOL]     observedPositions.get(sourceFile).add(position); [EOL]     AliasTransformation spy = new AliasSpy(); [EOL]     constructedAliases.add(spy); [EOL]     return spy; [EOL] } <line_num>: 597,608
@Override [EOL] public void addAlias(String alias, String definition) { [EOL]     observedDefinitions.put(alias, definition); [EOL] } <line_num>: 614,617
@Override [EOL] public void process(Node externs, Node root) { [EOL]     NodeTraversal.traverse(compiler, root, this); [EOL] } <line_num>: 629,632
@Override [EOL] public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) { [EOL]     return true; [EOL] } <line_num>: 634,638
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     JSDocInfo info = n.getJSDocInfo(); [EOL]     if (info != null) { [EOL]         Collection<Node> typeNodes = info.getTypeNodes(); [EOL]         if (typeNodes.size() > 0) { [EOL]             if (actualTypes != null) { [EOL]                 List<Node> expectedTypes = Lists.newArrayList(); [EOL]                 for (Node typeNode : info.getTypeNodes()) { [EOL]                     expectedTypes.add(typeNode); [EOL]                 } [EOL]                 assertEquals("Wrong number of JsDoc types", expectedTypes.size(), actualTypes.size()); [EOL]                 for (int i = 0; i < expectedTypes.size(); i++) { [EOL]                     assertNull(expectedTypes.get(i).checkTreeEquals(actualTypes.get(i))); [EOL]                 } [EOL]             } else { [EOL]                 actualTypes = Lists.newArrayList(); [EOL]                 for (Node typeNode : info.getTypeNodes()) { [EOL]                     actualTypes.add(typeNode); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 640,665
