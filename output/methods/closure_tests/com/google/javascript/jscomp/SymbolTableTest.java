@Override [EOL] public void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     options = new CompilerOptions(); [EOL]     options.setCodingConvention(new ClosureCodingConvention()); [EOL]     CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options); [EOL]     WarningLevel.VERBOSE.setOptionsForWarningLevel(options); [EOL]     options.ideMode = true; [EOL] } <line_num>: 44,54
public void testGlobalVar() throws Exception { [EOL]     SymbolTable table = createSymbolTable("/** @type {number} */ var x = 5;"); [EOL]     assertNull(getGlobalVar(table, "y")); [EOL]     assertNotNull(getGlobalVar(table, "x")); [EOL]     assertEquals("number", getGlobalVar(table, "x").getType().toString()); [EOL]     assertEquals(2, getVars(table).size()); [EOL] } <line_num>: 56,65
public void testGlobalThisReferences() throws Exception { [EOL]     SymbolTable table = createSymbolTable("var x = this; function f() { return this + this + this; }"); [EOL]     Symbol global = getGlobalVar(table, "*global*"); [EOL]     assertNotNull(global); [EOL]     List<Reference> refs = table.getReferenceList(global); [EOL]     assertEquals(1, refs.size()); [EOL] } <line_num>: 67,76
public void testGlobalThisReferences2() throws Exception { [EOL]     SymbolTable table = createSymbolTable(""); [EOL]     Symbol global = getGlobalVar(table, "*global*"); [EOL]     assertNotNull(global); [EOL]     List<Reference> refs = table.getReferenceList(global); [EOL]     assertEquals(0, refs.size()); [EOL] } <line_num>: 78,87
public void testGlobalThisReferences3() throws Exception { [EOL]     SymbolTable table = createSymbolTable("this.foo = {}; this.foo.bar = {};"); [EOL]     Symbol global = getGlobalVar(table, "*global*"); [EOL]     assertNotNull(global); [EOL]     List<Reference> refs = table.getReferenceList(global); [EOL]     assertEquals(2, refs.size()); [EOL] } <line_num>: 89,97
public void testGlobalThisPropertyReferences() throws Exception { [EOL]     SymbolTable table = createSymbolTable("/** @constructor */ function Foo() {} this.Foo;"); [EOL]     Symbol foo = getGlobalVar(table, "Foo"); [EOL]     assertNotNull(foo); [EOL]     List<Reference> refs = table.getReferenceList(foo); [EOL]     assertEquals(2, refs.size()); [EOL] } <line_num>: 99,108
public void testGlobalVarReferences() throws Exception { [EOL]     SymbolTable table = createSymbolTable("/** @type {number} */ var x = 5; x = 6;"); [EOL]     Symbol x = getGlobalVar(table, "x"); [EOL]     List<Reference> refs = table.getReferenceList(x); [EOL]     assertEquals(2, refs.size()); [EOL]     assertEquals(x.getDeclaration(), refs.get(0)); [EOL]     assertEquals(Token.VAR, refs.get(0).getNode().getParent().getType()); [EOL]     assertEquals(Token.ASSIGN, refs.get(1).getNode().getParent().getType()); [EOL] } <line_num>: 110,120
public void testLocalVarReferences() throws Exception { [EOL]     SymbolTable table = createSymbolTable("function f(x) { return x; }"); [EOL]     Symbol x = getLocalVar(table, "x"); [EOL]     List<Reference> refs = table.getReferenceList(x); [EOL]     assertEquals(2, refs.size()); [EOL]     assertEquals(x.getDeclaration(), refs.get(0)); [EOL]     assertEquals(Token.PARAM_LIST, refs.get(0).getNode().getParent().getType()); [EOL]     assertEquals(Token.RETURN, refs.get(1).getNode().getParent().getType()); [EOL] } <line_num>: 122,132
public void testLocalThisReferences() throws Exception { [EOL]     SymbolTable table = createSymbolTable("/** @constructor */ function F() { this.foo = 3; this.bar = 5; }"); [EOL]     Symbol f = getGlobalVar(table, "F"); [EOL]     assertNotNull(f); [EOL]     Symbol t = table.getParameterInFunction(f, "this"); [EOL]     assertNotNull(t); [EOL]     List<Reference> refs = table.getReferenceList(t); [EOL]     assertEquals(2, refs.size()); [EOL] } <line_num>: 134,146
public void testLocalThisReferences2() throws Exception { [EOL]     SymbolTable table = createSymbolTable("/** @constructor */ function F() {}" + "F.prototype.baz = " + "    function() { this.foo = 3; this.bar = 5; };"); [EOL]     Symbol baz = getGlobalVar(table, "F.prototype.baz"); [EOL]     assertNotNull(baz); [EOL]     Symbol t = table.getParameterInFunction(baz, "this"); [EOL]     assertNotNull(t); [EOL]     List<Reference> refs = table.getReferenceList(t); [EOL]     assertEquals(2, refs.size()); [EOL] } <line_num>: 148,162
public void testLocalThisReferences3() throws Exception { [EOL]     SymbolTable table = createSymbolTable("/** @constructor */ function F() {}"); [EOL]     Symbol baz = getGlobalVar(table, "F"); [EOL]     assertNotNull(baz); [EOL]     Symbol t = table.getParameterInFunction(baz, "this"); [EOL]     assertNotNull(t); [EOL]     List<Reference> refs = table.getReferenceList(t); [EOL]     assertEquals(0, refs.size()); [EOL] } <line_num>: 164,176
public void testNamespacedReferences() throws Exception { [EOL]     SymbolTable table = createSymbolTable("var goog = {};" + "goog.dom = {};" + "goog.dom.DomHelper = function(){};"); [EOL]     Symbol goog = getGlobalVar(table, "goog"); [EOL]     assertNotNull(goog); [EOL]     assertEquals(3, Iterables.size(table.getReferences(goog))); [EOL]     Symbol googDom = getGlobalVar(table, "goog.dom"); [EOL]     assertNotNull(googDom); [EOL]     assertEquals(2, Iterables.size(table.getReferences(googDom))); [EOL]     Symbol googDomHelper = getGlobalVar(table, "goog.dom.DomHelper"); [EOL]     assertNotNull(googDomHelper); [EOL]     assertEquals(1, Iterables.size(table.getReferences(googDomHelper))); [EOL] } <line_num>: 178,196
public void testIncompleteNamespacedReferences() throws Exception { [EOL]     SymbolTable table = createSymbolTable("/** @constructor */\n" + "goog.dom.DomHelper = function(){};\n" + "var y = goog.dom.DomHelper;\n"); [EOL]     Symbol goog = getGlobalVar(table, "goog"); [EOL]     assertNotNull(goog); [EOL]     assertEquals(2, table.getReferenceList(goog).size()); [EOL]     Symbol googDom = getGlobalVar(table, "goog.dom"); [EOL]     assertNotNull(googDom); [EOL]     assertEquals(2, table.getReferenceList(googDom).size()); [EOL]     Symbol googDomHelper = getGlobalVar(table, "goog.dom.DomHelper"); [EOL]     assertNotNull(googDomHelper); [EOL]     assertEquals(2, Iterables.size(table.getReferences(googDomHelper))); [EOL] } <line_num>: 198,214
public void testGlobalRichObjectReference() throws Exception { [EOL]     SymbolTable table = createSymbolTable("/** @constructor */\n" + "function A(){};\n" + "/** @type {?A} */ A.prototype.b;\n" + "/** @type {A} */ var a = new A();\n" + "function g() {\n" + "  return a.b ? 'x' : 'y';\n" + "}\n" + "(function() {\n" + "  var x; if (x) { x = a.b.b; } else { x = a.b.c; }\n" + "  return x;\n" + "})();\n"); [EOL]     Symbol ab = getGlobalVar(table, "a.b"); [EOL]     assertNull(ab); [EOL]     Symbol propB = getGlobalVar(table, "A.prototype.b"); [EOL]     assertNotNull(propB); [EOL]     assertEquals(5, table.getReferenceList(propB).size()); [EOL] } <line_num>: 216,236
public void testRemovalOfNamespacedReferencesOfProperties() throws Exception { [EOL]     SymbolTable table = createSymbolTable("/** @constructor */ var DomHelper = function(){};" + "/** method */ DomHelper.method = function() {};"); [EOL]     Symbol domHelper = getGlobalVar(table, "DomHelper"); [EOL]     assertNotNull(domHelper); [EOL]     Symbol domHelperNamespacedMethod = getGlobalVar(table, "DomHelper.method"); [EOL]     assertEquals("method", domHelperNamespacedMethod.getName()); [EOL]     Symbol domHelperMethod = domHelper.getPropertyScope().getSlot("method"); [EOL]     assertNotNull(domHelperMethod); [EOL] } <line_num>: 238,252
public void testGoogScopeReferences() throws Exception { [EOL]     SymbolTable table = createSymbolTable("var goog = {};" + "goog.scope = function() {};" + "goog.scope(function() {});"); [EOL]     Symbol googScope = getGlobalVar(table, "goog.scope"); [EOL]     assertNotNull(googScope); [EOL]     assertEquals(2, Iterables.size(table.getReferences(googScope))); [EOL] } <line_num>: 254,262
public void testGoogRequireReferences() throws Exception { [EOL]     SymbolTable table = createSymbolTable("var goog = {};" + "goog.provide = function() {};" + "goog.require = function() {};" + "goog.provide('goog.dom');" + "goog.require('goog.dom');"); [EOL]     Symbol goog = getGlobalVar(table, "goog"); [EOL]     assertNotNull(goog); [EOL]     assertEquals(8, Iterables.size(table.getReferences(goog))); [EOL] } <line_num>: 264,283
public void testGoogRequireReferences2() throws Exception { [EOL]     options.brokenClosureRequiresLevel = CheckLevel.OFF; [EOL]     SymbolTable table = createSymbolTable("foo.bar = function(){};  // definition\n" + "goog.require('foo.bar')\n"); [EOL]     Symbol fooBar = getGlobalVar(table, "foo.bar"); [EOL]     assertNotNull(fooBar); [EOL]     assertEquals(2, Iterables.size(table.getReferences(fooBar))); [EOL] } <line_num>: 285,293
public void testGlobalVarInExterns() throws Exception { [EOL]     SymbolTable table = createSymbolTable("customExternFn(1);"); [EOL]     Symbol fn = getGlobalVar(table, "customExternFn"); [EOL]     List<Reference> refs = table.getReferenceList(fn); [EOL]     assertEquals(2, refs.size()); [EOL]     SymbolScope scope = table.getEnclosingScope(refs.get(0).getNode()); [EOL]     assertTrue(scope.isGlobalScope()); [EOL]     assertEquals(SymbolTable.GLOBAL_THIS, table.getSymbolForScope(scope).getName()); [EOL] } <line_num>: 295,305
public void testLocalVarInExterns() throws Exception { [EOL]     SymbolTable table = createSymbolTable(""); [EOL]     Symbol arg = getLocalVar(table, "customExternArg"); [EOL]     List<Reference> refs = table.getReferenceList(arg); [EOL]     assertEquals(1, refs.size()); [EOL]     Symbol fn = getGlobalVar(table, "customExternFn"); [EOL]     SymbolScope scope = table.getEnclosingScope(refs.get(0).getNode()); [EOL]     assertFalse(scope.isGlobalScope()); [EOL]     assertEquals(fn, table.getSymbolForScope(scope)); [EOL] } <line_num>: 307,317
public void testSymbolsForType() throws Exception { [EOL]     SymbolTable table = createSymbolTable("function random() { return 1; }" + "/** @constructor */ function Foo() {}" + "/** @constructor */ function Bar() {}" + "var x = random() ? new Foo() : new Bar();"); [EOL]     Symbol x = getGlobalVar(table, "x"); [EOL]     Symbol foo = getGlobalVar(table, "Foo"); [EOL]     Symbol bar = getGlobalVar(table, "Bar"); [EOL]     Symbol fooPrototype = getGlobalVar(table, "Foo.prototype"); [EOL]     Symbol fn = getGlobalVar(table, "Function"); [EOL]     Symbol obj = getGlobalVar(table, "Object"); [EOL]     assertEquals(Lists.newArrayList(foo, bar), table.getAllSymbolsForTypeOf(x)); [EOL]     assertEquals(Lists.newArrayList(fn), table.getAllSymbolsForTypeOf(foo)); [EOL]     assertEquals(Lists.newArrayList(foo), table.getAllSymbolsForTypeOf(fooPrototype)); [EOL]     assertEquals(foo, table.getSymbolDeclaredBy(foo.getType().toMaybeFunctionType())); [EOL] } <line_num>: 319,342
public void testStaticMethodReferences() throws Exception { [EOL]     SymbolTable table = createSymbolTable("/** @constructor */ var DomHelper = function(){};" + "/** method */ DomHelper.method = function() {};" + "function f() { var x = DomHelper; x.method() + x.method(); }"); [EOL]     Symbol method = getGlobalVar(table, "DomHelper").getPropertyScope().getSlot("method"); [EOL]     assertEquals(3, Iterables.size(table.getReferences(method))); [EOL] } <line_num>: 344,354
public void testMethodReferences() throws Exception { [EOL]     SymbolTable table = createSymbolTable("/** @constructor */ var DomHelper = function(){};" + "/** method */ DomHelper.prototype.method = function() {};" + "function f() { " + "  (new DomHelper()).method(); (new DomHelper()).method(); };"); [EOL]     Symbol method = getGlobalVar(table, "DomHelper.prototype.method"); [EOL]     assertEquals(3, Iterables.size(table.getReferences(method))); [EOL] } <line_num>: 356,367
public void testSuperClassMethodReferences() throws Exception { [EOL]     SymbolTable table = createSymbolTable("var goog = {};" + "goog.inherits = function(a, b) {};" + "/** @constructor */ var A = function(){};" + "/** method */ A.prototype.method = function() {};" + "/**\n" + " * @constructor\n" + " * @extends {A}\n" + " */\n" + "var B = function(){};\n" + "goog.inherits(B, A);" + "/** method */ B.prototype.method = function() {" + "  B.superClass_.method();" + "};"); [EOL]     Symbol methodA = getGlobalVar(table, "A.prototype.method"); [EOL]     assertEquals(2, Iterables.size(table.getReferences(methodA))); [EOL] } <line_num>: 369,389
public void testMethodReferencesMissingTypeInfo() throws Exception { [EOL]     SymbolTable table = createSymbolTable("/**\n" + " * @constructor\n" + " * @extends {Missing}\n" + " */ var DomHelper = function(){};\n" + "/** method */ DomHelper.prototype.method = function() {\n" + "  this.method();\n" + "};\n" + "function f() { " + "  (new DomHelper()).method();\n" + "};"); [EOL]     Symbol method = getGlobalVar(table, "DomHelper.prototype.method"); [EOL]     assertEquals(3, Iterables.size(table.getReferences(method))); [EOL] } <line_num>: 391,408
public void testFieldReferencesMissingTypeInfo() throws Exception { [EOL]     SymbolTable table = createSymbolTable("/**\n" + " * @constructor\n" + " * @extends {Missing}\n" + " */ var DomHelper = function(){ this.prop = 1; };\n" + "/** @type {number} */ DomHelper.prototype.prop = 2;\n" + "function f() {\n" + "  return (new DomHelper()).prop;\n" + "};"); [EOL]     Symbol prop = getGlobalVar(table, "DomHelper.prototype.prop"); [EOL]     assertEquals(3, table.getReferenceList(prop).size()); [EOL]     assertNull(getLocalVar(table, "this.prop")); [EOL] } <line_num>: 410,426
public void testFieldReferences() throws Exception { [EOL]     SymbolTable table = createSymbolTable("/** @constructor */ var DomHelper = function(){" + "  /** @type {number} */ this.field = 3;" + "};" + "function f() { " + "  return (new DomHelper()).field + (new DomHelper()).field; };"); [EOL]     Symbol field = getGlobalVar(table, "DomHelper.prototype.field"); [EOL]     assertEquals(3, Iterables.size(table.getReferences(field))); [EOL] } <line_num>: 428,439
public void testUndeclaredFieldReferences() throws Exception { [EOL]     SymbolTable table = createSymbolTable("/** @constructor */ var DomHelper = function(){};" + "DomHelper.prototype.method = function() { " + "  this.field = 3;" + "  return x.field;" + "}"); [EOL]     Symbol field = getGlobalVar(table, "DomHelper.prototype.field"); [EOL]     assertNull(field); [EOL] } <line_num>: 441,453
public void testPrototypeReferences() throws Exception { [EOL]     SymbolTable table = createSymbolTable("/** @constructor */ function DomHelper() {}" + "DomHelper.prototype.method = function() {};"); [EOL]     Symbol prototype = getGlobalVar(table, "DomHelper.prototype"); [EOL]     assertNotNull(prototype); [EOL]     List<Reference> refs = table.getReferenceList(prototype); [EOL]     assertEquals(refs.toString(), 2, refs.size()); [EOL] } <line_num>: 455,467
public void testPrototypeReferences2() throws Exception { [EOL]     SymbolTable table = createSymbolTable("/** @constructor */\n" + "function Snork() {}\n" + "Snork.prototype.baz = 3;\n"); [EOL]     Symbol prototype = getGlobalVar(table, "Snork.prototype"); [EOL]     assertNotNull(prototype); [EOL]     List<Reference> refs = table.getReferenceList(prototype); [EOL]     assertEquals(2, refs.size()); [EOL] } <line_num>: 469,480
public void testPrototypeReferences3() throws Exception { [EOL]     SymbolTable table = createSymbolTable("/** @constructor */ function Foo() {}"); [EOL]     Symbol fooPrototype = getGlobalVar(table, "Foo.prototype"); [EOL]     assertNotNull(fooPrototype); [EOL]     List<Reference> refs = table.getReferenceList(fooPrototype); [EOL]     assertEquals(1, refs.size()); [EOL]     assertEquals(Token.NAME, refs.get(0).getNode().getType()); [EOL]     assertEquals(refs.get(0).getNode(), table.getReferenceList(getGlobalVar(table, "Foo")).get(0).getNode()); [EOL] } <line_num>: 482,497
public void testPrototypeReferences4() throws Exception { [EOL]     SymbolTable table = createSymbolTable("/** @constructor */ function Foo() {}" + "Foo.prototype = {bar: 3}"); [EOL]     Symbol fooPrototype = getGlobalVar(table, "Foo.prototype"); [EOL]     assertNotNull(fooPrototype); [EOL]     List<Reference> refs = Lists.newArrayList(table.getReferences(fooPrototype)); [EOL]     assertEquals(1, refs.size()); [EOL]     assertEquals(Token.GETPROP, refs.get(0).getNode().getType()); [EOL]     assertEquals("Foo.prototype", refs.get(0).getNode().getQualifiedName()); [EOL] } <line_num>: 499,511
public void testPrototypeReferences5() throws Exception { [EOL]     SymbolTable table = createSymbolTable("var goog = {}; /** @constructor */ goog.Foo = function() {};"); [EOL]     Symbol fooPrototype = getGlobalVar(table, "goog.Foo.prototype"); [EOL]     assertNotNull(fooPrototype); [EOL]     List<Reference> refs = table.getReferenceList(fooPrototype); [EOL]     assertEquals(1, refs.size()); [EOL]     assertEquals(Token.GETPROP, refs.get(0).getNode().getType()); [EOL]     assertEquals(refs.get(0).getNode(), table.getReferenceList(getGlobalVar(table, "goog.Foo")).get(0).getNode()); [EOL] } <line_num>: 513,529
public void testReferencesInJSDocType() { [EOL]     SymbolTable table = createSymbolTable("/** @constructor */ function Foo() {}\n" + "/** @type {Foo} */ var x;\n" + "/** @param {Foo} x */ function f(x) {}\n" + "/** @return {function(): Foo} */ function g() {}\n" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n" + " */ function Sub() {}"); [EOL]     Symbol foo = getGlobalVar(table, "Foo"); [EOL]     assertNotNull(foo); [EOL]     List<Reference> refs = table.getReferenceList(foo); [EOL]     assertEquals(5, refs.size()); [EOL]     assertEquals(1, refs.get(0).getNode().getLineno()); [EOL]     assertEquals(29, refs.get(0).getNode().getCharno()); [EOL]     assertEquals(3, refs.get(0).getNode().getLength()); [EOL]     assertEquals(2, refs.get(1).getNode().getLineno()); [EOL]     assertEquals(11, refs.get(1).getNode().getCharno()); [EOL]     assertEquals(3, refs.get(2).getNode().getLineno()); [EOL]     assertEquals(12, refs.get(2).getNode().getCharno()); [EOL]     assertEquals(4, refs.get(3).getNode().getLineno()); [EOL]     assertEquals(25, refs.get(3).getNode().getCharno()); [EOL]     assertEquals(7, refs.get(4).getNode().getLineno()); [EOL]     assertEquals(13, refs.get(4).getNode().getCharno()); [EOL] } <line_num>: 531,562
public void testReferencesInJSDocType2() { [EOL]     SymbolTable table = createSymbolTable("/** @param {string} x */ function f(x) {}\n"); [EOL]     Symbol str = getGlobalVar(table, "String"); [EOL]     assertNotNull(str); [EOL]     List<Reference> refs = table.getReferenceList(str); [EOL]     assertTrue(refs.size() > 1); [EOL]     int last = refs.size() - 1; [EOL]     for (int i = 0; i < refs.size(); i++) { [EOL]         Reference ref = refs.get(i); [EOL]         assertEquals(i != last, ref.getNode().isFromExterns()); [EOL]         if (!ref.getNode().isFromExterns()) { [EOL]             assertEquals("in1", ref.getNode().getSourceFileName()); [EOL]         } [EOL]     } [EOL] } <line_num>: 564,586
public void testReferencesInJSDocName() { [EOL]     String code = "/** @param {Object} x */ function f(x) {}\n"; [EOL]     SymbolTable table = createSymbolTable(code); [EOL]     Symbol x = getLocalVar(table, "x"); [EOL]     assertNotNull(x); [EOL]     List<Reference> refs = table.getReferenceList(x); [EOL]     assertEquals(2, refs.size()); [EOL]     assertEquals(code.indexOf("x) {"), refs.get(0).getNode().getCharno()); [EOL]     assertEquals(code.indexOf("x */"), refs.get(1).getNode().getCharno()); [EOL]     assertEquals("in1", refs.get(0).getNode().getSourceFileName()); [EOL] } <line_num>: 588,601
public void testLocalQualifiedNamesInLocalScopes() { [EOL]     SymbolTable table = createSymbolTable("function f() { var x = {}; x.number = 3; }"); [EOL]     Symbol xNumber = getLocalVar(table, "x.number"); [EOL]     assertNotNull(xNumber); [EOL]     assertFalse(table.getScope(xNumber).isGlobalScope()); [EOL]     assertEquals("number", xNumber.getType().toString()); [EOL] } <line_num>: 603,611
public void testNaturalSymbolOrdering() { [EOL]     SymbolTable table = createSymbolTable("/** @const */ var a = {};" + "/** @const */ a.b = {};" + "/** @param {number} x */ function f(x) {}"); [EOL]     Symbol a = getGlobalVar(table, "a"); [EOL]     Symbol ab = getGlobalVar(table, "a.b"); [EOL]     Symbol f = getGlobalVar(table, "f"); [EOL]     Symbol x = getLocalVar(table, "x"); [EOL]     Ordering<Symbol> ordering = table.getNaturalSymbolOrdering(); [EOL]     assertSymmetricOrdering(ordering, a, ab); [EOL]     assertSymmetricOrdering(ordering, a, f); [EOL]     assertSymmetricOrdering(ordering, f, ab); [EOL]     assertSymmetricOrdering(ordering, f, x); [EOL] } <line_num>: 613,627
public void testDeclarationDisagreement() { [EOL]     SymbolTable table = createSymbolTable("/** @const */ var goog = goog || {};\n" + "/** @param {!Function} x */\n" + "goog.addSingletonGetter2 = function(x) {};\n" + "/** Wakka wakka wakka */\n" + "goog.addSingletonGetter = goog.addSingletonGetter2;\n" + "/** @param {!Function} x */\n" + "goog.addSingletonGetter = function(x) {};\n"); [EOL]     Symbol method = getGlobalVar(table, "goog.addSingletonGetter"); [EOL]     List<Reference> refs = table.getReferenceList(method); [EOL]     assertEquals(2, refs.size()); [EOL]     assertEquals(7, method.getDeclaration().getNode().getLineno()); [EOL]     assertEquals(5, refs.get(1).getNode().getLineno()); [EOL] } <line_num>: 629,646
public void testMultipleExtends() { [EOL]     SymbolTable table = createSymbolTable("/** @const */ var goog = goog || {};\n" + "goog.inherits = function(x, y) {};\n" + "/** @constructor */\n" + "goog.A = function() { this.fieldA = this.constructor; };\n" + "/** @constructor */ goog.A.FooA = function() {};\n" + "/** @return {void} */ goog.A.prototype.methodA = function() {};\n" + "/**\n" + " * @constructor\n" + " * @extends {goog.A}\n" + " */\n" + "goog.B = function() { this.fieldB = this.constructor; };\n" + "goog.inherits(goog.B, goog.A);\n" + "/** @return {void} */ goog.B.prototype.methodB = function() {};\n" + "/**\n" + " * @constructor\n" + " * @extends {goog.A}\n" + " */\n" + "goog.B2 = function() { this.fieldB = this.constructor; };\n" + "goog.inherits(goog.B2, goog.A);\n" + "/** @constructor */ goog.B2.FooB = function() {};\n" + "/** @return {void} */ goog.B2.prototype.methodB = function() {};\n" + "/**\n" + " * @constructor\n" + " * @extends {goog.B}\n" + " */\n" + "goog.C = function() { this.fieldC = this.constructor; };\n" + "goog.inherits(goog.C, goog.B);\n" + "/** @constructor */ goog.C.FooC = function() {};\n" + "/** @return {void} */ goog.C.prototype.methodC = function() {};\n"); [EOL]     Symbol bCtor = getGlobalVar(table, "goog.B.prototype.constructor"); [EOL]     assertNotNull(bCtor); [EOL]     List<Reference> bRefs = table.getReferenceList(bCtor); [EOL]     assertEquals(2, bRefs.size()); [EOL]     assertEquals(11, bCtor.getDeclaration().getNode().getLineno()); [EOL]     Symbol cCtor = getGlobalVar(table, "goog.C.prototype.constructor"); [EOL]     assertNotNull(cCtor); [EOL]     List<Reference> cRefs = table.getReferenceList(cCtor); [EOL]     assertEquals(2, cRefs.size()); [EOL]     assertEquals(26, cCtor.getDeclaration().getNode().getLineno()); [EOL] } <line_num>: 648,693
public void testJSDocAssociationWithBadNamespace() { [EOL]     SymbolTable table = createSymbolTable("/** @constructor */ goog.Foo = function(){};"); [EOL]     Symbol foo = getGlobalVar(table, "goog.Foo"); [EOL]     assertNotNull(foo); [EOL]     JSDocInfo info = foo.getJSDocInfo(); [EOL]     assertNotNull(info); [EOL]     assertTrue(info.isConstructor()); [EOL] } <line_num>: 695,708
public void testMissingConstructorTag() { [EOL]     SymbolTable table = createSymbolTable("function F() {" + "  this.field1 = 3;" + "}" + "F.prototype.method1 = function() {" + "  this.field1 = 5;" + "};" + "(new F()).method1();"); [EOL]     assertNull(getGlobalVar(table, "F.prototype.field1")); [EOL]     Symbol sym = getGlobalVar(table, "F.prototype.method1"); [EOL]     assertEquals(1, table.getReferenceList(sym).size()); [EOL] } <line_num>: 710,726
public void testTypeCheckingOff() { [EOL]     options = new CompilerOptions(); [EOL]     SymbolTable table = createSymbolTable("/** @contstructor */" + "function F() {" + "  this.field1 = 3;" + "}" + "F.prototype.method1 = function() {" + "  this.field1 = 5;" + "};" + "(new F()).method1();"); [EOL]     assertNull(getGlobalVar(table, "F.prototype.field1")); [EOL]     assertNull(getGlobalVar(table, "F.prototype.method1")); [EOL]     Symbol sym = getGlobalVar(table, "F"); [EOL]     assertEquals(3, table.getReferenceList(sym).size()); [EOL] } <line_num>: 728,746
public void testSuperClassReference() throws Exception { [EOL]     SymbolTable table = createSymbolTable("  var a = {b: {}};\n" + "/** @constructor */\n" + "a.b.BaseClass = function() {};\n" + "a.b.BaseClass.prototype.doSomething = function() {\n" + "  alert('hi');\n" + "};\n" + "/**\n" + " * @constructor\n" + " * @extends {a.b.BaseClass}\n" + " */\n" + "a.b.DerivedClass = function() {};\n" + "goog.inherits(a.b.DerivedClass, a.b.BaseClass);\n" + "/** @override */\n" + "a.b.DerivedClass.prototype.doSomething = function() {\n" + "  a.b.DerivedClass.superClass_.doSomething();\n" + "};\n"); [EOL]     Symbol bad = getGlobalVar(table, "a.b.DerivedClass.superClass_.doSomething"); [EOL]     assertNull(bad); [EOL]     Symbol good = getGlobalVar(table, "a.b.BaseClass.prototype.doSomething"); [EOL]     assertNotNull(good); [EOL]     List<Reference> refs = table.getReferenceList(good); [EOL]     assertEquals(2, refs.size()); [EOL]     assertEquals("a.b.DerivedClass.superClass_.doSomething", refs.get(1).getNode().getQualifiedName()); [EOL] } <line_num>: 748,779
public void testInnerEnum() throws Exception { [EOL]     SymbolTable table = createSymbolTable("var goog = {}; goog.ui = {};" + "  /** @constructor */\n" + "goog.ui.Zippy = function() {};\n" + "/** @enum {string} */\n" + "goog.ui.Zippy.EventType = { TOGGLE: 'toggle' };\n"); [EOL]     Symbol eventType = getGlobalVar(table, "goog.ui.Zippy.EventType"); [EOL]     assertNotNull(eventType); [EOL]     assertTrue(eventType.getType().isEnumType()); [EOL]     Symbol toggle = getGlobalVar(table, "goog.ui.Zippy.EventType.TOGGLE"); [EOL]     assertNotNull(toggle); [EOL] } <line_num>: 781,795
public void testMethodInAnonObject1() throws Exception { [EOL]     SymbolTable table = createSymbolTable("var a = {}; a.b = {}; a.b.c = function() {};"); [EOL]     Symbol a = getGlobalVar(table, "a"); [EOL]     Symbol ab = getGlobalVar(table, "a.b"); [EOL]     Symbol abc = getGlobalVar(table, "a.b.c"); [EOL]     assertNotNull(abc); [EOL]     assertEquals(1, table.getReferenceList(abc).size()); [EOL]     assertEquals("{b: {c: function (): undefined}}", a.getType().toString()); [EOL]     assertEquals("{c: function (): undefined}", ab.getType().toString()); [EOL]     assertEquals("function (): undefined", abc.getType().toString()); [EOL] } <line_num>: 797,810
public void testMethodInAnonObject2() throws Exception { [EOL]     SymbolTable table = createSymbolTable("var a = {b: {c: function() {}}};"); [EOL]     Symbol a = getGlobalVar(table, "a"); [EOL]     Symbol ab = getGlobalVar(table, "a.b"); [EOL]     Symbol abc = getGlobalVar(table, "a.b.c"); [EOL]     assertNotNull(abc); [EOL]     assertEquals(1, table.getReferenceList(abc).size()); [EOL]     assertEquals("{b: {c: function (): undefined}}", a.getType().toString()); [EOL]     assertEquals("{c: function (): undefined}", ab.getType().toString()); [EOL]     assertEquals("function (): undefined", abc.getType().toString()); [EOL] } <line_num>: 812,825
public void testJSDocOnlySymbol() throws Exception { [EOL]     SymbolTable table = createSymbolTable("/**\n" + " * @param {number} x\n" + " * @param y\n" + " */\n" + "var a;"); [EOL]     Symbol x = getDocVar(table, "x"); [EOL]     assertNotNull(x); [EOL]     assertEquals("number", x.getType().toString()); [EOL]     assertEquals(1, table.getReferenceList(x).size()); [EOL]     Symbol y = getDocVar(table, "y"); [EOL]     assertNotNull(x); [EOL]     assertEquals(null, y.getType()); [EOL]     assertEquals(1, table.getReferenceList(y).size()); [EOL] } <line_num>: 827,843
public void testNamespaceDefinitionOrder() throws Exception { [EOL]     SymbolTable table = createSymbolTable("/** @const */ var goog = {};\n" + "/** @constructor */ goog.dom.Foo = function() {};\n" + "/** @const */ goog.dom = {};\n"); [EOL]     Symbol goog = getGlobalVar(table, "goog"); [EOL]     Symbol dom = getGlobalVar(table, "goog.dom"); [EOL]     Symbol Foo = getGlobalVar(table, "goog.dom.Foo"); [EOL]     assertNotNull(goog); [EOL]     assertNotNull(dom); [EOL]     assertNotNull(Foo); [EOL]     assertEquals(dom, goog.getPropertyScope().getSlot("dom")); [EOL]     assertEquals(Foo, dom.getPropertyScope().getSlot("Foo")); [EOL] } <line_num>: 845,863
public void testConstructorAlias() throws Exception { [EOL]     SymbolTable table = createSymbolTable("/** @constructor */ var Foo = function() {};\n" + "/** desc */ Foo.prototype.bar = function() {};\n" + "/** @constructor */ var FooAlias = Foo;\n" + "/** desc */ FooAlias.prototype.baz = function() {};\n"); [EOL]     Symbol foo = getGlobalVar(table, "Foo"); [EOL]     Symbol fooAlias = getGlobalVar(table, "FooAlias"); [EOL]     Symbol bar = getGlobalVar(table, "Foo.prototype.bar"); [EOL]     Symbol baz = getGlobalVar(table, "Foo.prototype.baz"); [EOL]     Symbol bazAlias = getGlobalVar(table, "FooAlias.prototype.baz"); [EOL]     assertNotNull(foo); [EOL]     assertNotNull(fooAlias); [EOL]     assertNotNull(bar); [EOL]     assertNotNull(baz); [EOL]     assertNull(bazAlias); [EOL]     Symbol barScope = table.getSymbolForScope(table.getScope(bar)); [EOL]     assertNotNull(barScope); [EOL]     Symbol bazScope = table.getSymbolForScope(table.getScope(baz)); [EOL]     assertNotNull(bazScope); [EOL]     Symbol fooPrototype = foo.getPropertyScope().getSlot("prototype"); [EOL]     assertNotNull(fooPrototype); [EOL]     assertEquals(fooPrototype, barScope); [EOL]     assertEquals(fooPrototype, bazScope); [EOL] } <line_num>: 865,895
public void testSymbolForScopeOfNatives() throws Exception { [EOL]     SymbolTable table = createSymbolTable(""); [EOL]     Symbol sliceArg = getLocalVar(table, "sliceArg"); [EOL]     assertNotNull(sliceArg); [EOL]     Symbol scope = table.getSymbolForScope(table.getScope(sliceArg)); [EOL]     assertNotNull(scope); [EOL]     assertEquals(scope, getGlobalVar(table, "String.prototype.slice")); [EOL]     Symbol proto = getGlobalVar(table, "String.prototype"); [EOL]     assertEquals("externs1", proto.getDeclaration().getNode().getSourceFileName()); [EOL] } <line_num>: 897,911
private void assertSymmetricOrdering(Ordering<Symbol> ordering, Symbol first, Symbol second) { [EOL]     assertTrue(ordering.compare(first, first) == 0); [EOL]     assertTrue(ordering.compare(second, second) == 0); [EOL]     assertTrue(ordering.compare(first, second) < 0); [EOL]     assertTrue(ordering.compare(second, first) > 0); [EOL] } <line_num>: 913,919
private Symbol getGlobalVar(SymbolTable table, String name) { [EOL]     return table.getGlobalScope().getQualifiedSlot(name); [EOL] } <line_num>: 921,923
private Symbol getDocVar(SymbolTable table, String name) { [EOL]     for (Symbol sym : table.getAllSymbols()) { [EOL]         if (sym.isDocOnlyParameter() && sym.getName().equals(name)) { [EOL]             return sym; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 925,932
private Symbol getLocalVar(SymbolTable table, String name) { [EOL]     for (SymbolScope scope : table.getAllScopes()) { [EOL]         if (!scope.isGlobalScope() && scope.isLexicalScope() && scope.getQualifiedSlot(name) != null) { [EOL]             return scope.getQualifiedSlot(name); [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 934,942
private List<Symbol> getVars(SymbolTable table) { [EOL]     List<Symbol> result = Lists.newArrayList(); [EOL]     for (Symbol symbol : table.getAllSymbols()) { [EOL]         if (symbol.getDeclaration() != null && !symbol.getDeclaration().getNode().isFromExterns()) { [EOL]             result.add(symbol); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 945,954
private SymbolTable createSymbolTable(String input) { [EOL]     List<SourceFile> inputs = Lists.newArrayList(SourceFile.fromCode("in1", input)); [EOL]     List<SourceFile> externs = Lists.newArrayList(SourceFile.fromCode("externs1", EXTERNS)); [EOL]     Compiler compiler = new Compiler(); [EOL]     compiler.compile(externs, inputs, options); [EOL]     return assertSymbolTableValid(compiler.buildKnownSymbolTable()); [EOL] } <line_num>: 956,965
private SymbolTable assertSymbolTableValid(SymbolTable table) { [EOL]     Set<Symbol> allSymbols = Sets.newHashSet(table.getAllSymbols()); [EOL]     for (Symbol sym : table.getAllSymbols()) { [EOL]         assertEquals(sym, table.getScope(sym).getQualifiedSlot(sym.getName())); [EOL]         for (Reference ref : table.getReferences(sym)) { [EOL]             assertEquals(sym, ref.getSymbol()); [EOL]         } [EOL]         Symbol scope = table.getSymbolForScope(table.getScope(sym)); [EOL]         assertTrue("The symbol's scope is a zombie scope that shouldn't exist.\n" + "Symbol: " + sym + "\n" + "Scope: " + table.getScope(sym), scope == null || allSymbols.contains(scope)); [EOL]     } [EOL]     Symbol global = getGlobalVar(table, SymbolTable.GLOBAL_THIS); [EOL]     assertNotNull(global); [EOL]     assertNotNull(global.getDeclaration()); [EOL]     assertEquals(Token.SCRIPT, global.getDeclaration().getNode().getType()); [EOL]     List<Reference> globalRefs = table.getReferenceList(global); [EOL]     assertFalse(globalRefs.contains(global.getDeclaration())); [EOL]     return table; [EOL] } <line_num>: 971,1004
