public void testCodeBuilderColumnAfterResetDummy() { [EOL]     Compiler compiler = new Compiler(); [EOL]     Node n = compiler.parseTestCode(""); [EOL]     Compiler.CodeBuilder cb = new Compiler.CodeBuilder(); [EOL] } <line_num>: 32,36
public void testCodeBuilderColumnAfterReset() { [EOL]     Compiler.CodeBuilder cb = new Compiler.CodeBuilder(); [EOL]     String js = "foo();\ngoo();"; [EOL]     cb.append(js); [EOL]     assertEquals(js, cb.toString()); [EOL]     assertEquals(1, cb.getLineIndex()); [EOL]     assertEquals(6, cb.getColumnIndex()); [EOL]     cb.reset(); [EOL]     assertTrue(cb.toString().isEmpty()); [EOL]     assertEquals(1, cb.getLineIndex()); [EOL]     assertEquals(6, cb.getColumnIndex()); [EOL] } <line_num>: 39,52
public void testCodeBuilderAppend() { [EOL]     Compiler.CodeBuilder cb = new Compiler.CodeBuilder(); [EOL]     cb.append("foo();"); [EOL]     assertEquals(0, cb.getLineIndex()); [EOL]     assertEquals(6, cb.getColumnIndex()); [EOL]     cb.append("goo();"); [EOL]     assertEquals(0, cb.getLineIndex()); [EOL]     assertEquals(12, cb.getColumnIndex()); [EOL]     cb.append("blah();\ngoo();"); [EOL]     assertEquals(1, cb.getLineIndex()); [EOL]     assertEquals(6, cb.getColumnIndex()); [EOL] } <line_num>: 54,70
public void testCyclicalDependencyInInputs() { [EOL]     List<SourceFile> inputs = Lists.newArrayList(SourceFile.fromCode("gin", "goog.provide('gin'); goog.require('tonic'); var gin = {};"), SourceFile.fromCode("tonic", "goog.provide('tonic'); goog.require('gin'); var tonic = {};"), SourceFile.fromCode("mix", "goog.require('gin'); goog.require('tonic');")); [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     options.ideMode = true; [EOL]     options.setManageClosureDependencies(true); [EOL]     Compiler compiler = new Compiler(); [EOL]     compiler.init(ImmutableList.<SourceFile>of(), inputs, options); [EOL]     compiler.parseInputs(); [EOL]     assertEquals(compiler.externAndJsRoot, compiler.jsRoot.getParent()); [EOL]     assertEquals(compiler.externAndJsRoot, compiler.externsRoot.getParent()); [EOL]     assertNotNull(compiler.externAndJsRoot); [EOL]     Node jsRoot = compiler.jsRoot; [EOL]     assertEquals(3, jsRoot.getChildCount()); [EOL] } <line_num>: 72,92
public void testLocalUndefined() throws Exception { [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options); [EOL]     Compiler compiler = new Compiler(); [EOL]     SourceFile externs = SourceFile.fromCode("externs.js", ""); [EOL]     SourceFile input = SourceFile.fromCode("input.js", "(function (undefined) { alert(undefined); })();"); [EOL]     compiler.compile(externs, input, options); [EOL] } <line_num>: 94,111
public void testCommonJSProvidesAndRequire() throws Exception { [EOL]     List<SourceFile> inputs = Lists.newArrayList(SourceFile.fromCode("gin.js", "require('tonic')"), SourceFile.fromCode("tonic.js", ""), SourceFile.fromCode("mix.js", "require('gin'); require('tonic');")); [EOL]     List<String> entryPoints = Lists.newArrayList("module$mix"); [EOL]     Compiler compiler = initCompilerForCommonJS(inputs, entryPoints); [EOL]     JSModuleGraph graph = compiler.getModuleGraph(); [EOL]     assertEquals(4, graph.getModuleCount()); [EOL]     List<CompilerInput> result = graph.manageDependencies(entryPoints, compiler.getInputsForTesting()); [EOL]     assertEquals("[root]", result.get(0).getName()); [EOL]     assertEquals("[module$tonic]", result.get(1).getName()); [EOL]     assertEquals("[module$gin]", result.get(2).getName()); [EOL]     assertEquals("tonic.js", result.get(3).getName()); [EOL]     assertEquals("gin.js", result.get(4).getName()); [EOL]     assertEquals("mix.js", result.get(5).getName()); [EOL] } <line_num>: 113,131
public void testCommonJSMissingRequire() throws Exception { [EOL]     List<SourceFile> inputs = Lists.newArrayList(SourceFile.fromCode("gin.js", "require('missing')")); [EOL]     Compiler compiler = initCompilerForCommonJS(inputs, ImmutableList.of("module$gin")); [EOL]     compiler.processAMDAndCommonJSModules(); [EOL]     assertEquals(1, compiler.getErrorManager().getErrorCount()); [EOL]     String error = compiler.getErrorManager().getErrors()[0].toString(); [EOL]     assertTrue("Unexpected error: " + error, error.contains("required entry point \"module$missing\" never provided")); [EOL] } <line_num>: 133,146
private Compiler initCompilerForCommonJS(List<SourceFile> inputs, List<String> entryPoints) throws Exception { [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     options.ideMode = true; [EOL]     options.setManageClosureDependencies(entryPoints); [EOL]     options.closurePass = true; [EOL]     options.processCommonJSModules = true; [EOL]     Compiler compiler = new Compiler(); [EOL]     compiler.init(Lists.<SourceFile>newArrayList(), inputs, options); [EOL]     compiler.parseInputs(); [EOL]     return compiler; [EOL] } <line_num>: 148,160
