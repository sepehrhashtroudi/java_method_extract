public RenamePrototypesTest() { [EOL]     super(EXTERNS); [EOL]     enableNormalize(); [EOL] } <line_num>: 25,28
@Override [EOL] public CompilerPass getProcessor(Compiler compiler) { [EOL]     return renamePrototypes = new RenamePrototypes(compiler, true, null, prevUsedRenameMap); [EOL] } <line_num>: 30,34
@Override [EOL] protected void tearDown() throws Exception { [EOL]     super.tearDown(); [EOL]     prevUsedRenameMap = null; [EOL] } <line_num>: 36,41
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 43,47
public void testRenamePrototypes1() { [EOL]     test("Bar.prototype={'getFoo':function(){},2:function(){}}", "Bar.prototype={'a':function(){},2:function(){}}"); [EOL] } <line_num>: 49,52
public void testRenamePrototypes2() { [EOL]     test("Bar.prototype.getFoo=function(){};Bar.getFoo(b);" + "Bar.prototype.getBaz=function(){}", "Bar.prototype.a=function(){};Bar.a(b);" + "Bar.prototype.b=function(){}"); [EOL]     test("Bar.prototype['getFoo']=function(){};Bar.getFoo(b);" + "Bar.prototype['getBaz']=function(){}", "Bar.prototype['a']=function(){};Bar.a(b);" + "Bar.prototype['b']=function(){}"); [EOL]     test("Bar.prototype={'getFoo':function(){},2:function(){}}", "Bar.prototype={'a':function(){},2:function(){}}"); [EOL]     test("Bar.prototype={'getFoo':function(){}," + "'getBar':function(){}};b.getFoo()", "Bar.prototype={'a':function(){}," + "'b':function(){}};b.a()"); [EOL]     test("Bar.prototype={'B':function(){}," + "'getBar':function(){}};b.getBar()", "Bar.prototype={'b':function(){}," + "'a':function(){}};b.a()"); [EOL]     test("Bar.prototype={'a':function(){}," + "'b':function(){}};b.b()", "Bar.prototype={'b':function(){}," + "'a':function(){}};b.a()"); [EOL]     test("Bar.prototype={'_getFoo':function(){}," + "'getBar':function(){}};b._getFoo()", "Bar.prototype={'_getFoo':function(){}," + "'a':function(){}};b._getFoo()"); [EOL]     test("Bar.prototype={'toString':function(){}," + "'getBar':function(){}};b.toString()", "Bar.prototype={'toString':function(){}," + "'a':function(){}};b.toString()"); [EOL]     test("Bar.prototype.foo=function(){}" + ";bar.foo();bar.a", "Bar.prototype.b=function(){}" + ";bar.b();bar.a"); [EOL] } <line_num>: 54,99
public void testRenamePrototypesWithGetOrSet() { [EOL]     test("Bar.prototype={get getFoo(){}}", "Bar.prototype={get a(){}}"); [EOL]     test("Bar.prototype={get getFoo(){}}; a.getFoo;", "Bar.prototype={get a(){}}; a.a;"); [EOL]     test("Bar.prototype={set getFoo(x){}}", "Bar.prototype={set a(x){}}"); [EOL]     test("Bar.prototype={set getFoo(x){}}; a.getFoo;", "Bar.prototype={set a(x){}}; a.a;"); [EOL]     test("Bar.prototype={get a(){}," + "get b(){}};b.b()", "Bar.prototype={get b(){}," + "get a(){}};b.a()"); [EOL] } <line_num>: 101,128
public void testRenameProperties() { [EOL]     test("var foo; foo.prop_='bar'", "var foo;foo.a='bar'"); [EOL]     test("this.prop_='bar'", "this.a='bar'"); [EOL]     test("this.prop='bar'", "this.prop='bar'"); [EOL]     test("this['prop_']='bar'", "this['a']='bar'"); [EOL]     test("this['prop']='bar'", "this['prop']='bar'"); [EOL]     test("var foo={prop1_: 'bar',prop2_: 'baz'};", "var foo={a:'bar',b:'baz'}"); [EOL] } <line_num>: 134,142
public void testBoth() { [EOL]     test("Bar.prototype.getFoo_=function(){};Bar.getFoo_(b);" + "Bar.prototype.getBaz_=function(){}", "Bar.prototype.a=function(){};Bar.a(b);" + "Bar.prototype.b=function(){}"); [EOL] } <line_num>: 148,153
public void testPropertyNameThatIsBothObjLitKeyAndPrototypeProperty() { [EOL]     test("x.prototype.myprop=function(){};y={myprop:0};z.myprop", "x.prototype.myprop=function(){};y={myprop:0};z.myprop"); [EOL]     test("x.prototype.myprop_=function(){};y={myprop_:0};z.myprop_", "x.prototype.a=function(){};y={a:0};z.a"); [EOL] } <line_num>: 155,168
public void testModule() { [EOL]     JSModule[] modules = createModules("function Bar(){} var foo; Bar.prototype.getFoo_=function(x){};" + "foo.getFoo_(foo);foo.doo_=foo;foo.bloo_=foo;", "function Far(){} var too; Far.prototype.getGoo_=function(x){};" + "too.getGoo_(too);too.troo_=too;too.bloo_=too;"); [EOL]     test(modules, new String[] { "function Bar(){}var foo; Bar.prototype.a=function(x){};" + "foo.a(foo);foo.d=foo;foo.c=foo;", "function Far(){}var too; Far.prototype.b=function(x){};" + "too.b(too);too.e=too;too.c=too;" }); [EOL] } <line_num>: 170,183
public void testStableSimple1() { [EOL]     testStable("Bar.prototype.getFoo=function(){};Bar.getFoo(b);" + "Bar.prototype.getBaz=function(){}", "Bar.prototype.a=function(){};Bar.a(b);" + "Bar.prototype.b=function(){}", "Bar.prototype.getBar=function(){};Bar.getBar(b);" + "Bar.prototype.getFoo=function(){};Bar.getFoo(b);" + "Bar.prototype.getBaz=function(){}", "Bar.prototype.c=function(){};Bar.c(b);" + "Bar.prototype.a=function(){};Bar.a(b);" + "Bar.prototype.b=function(){}"); [EOL] } <line_num>: 185,197
public void testStableSimple2() { [EOL]     testStable("Bar.prototype['getFoo']=function(){};Bar.getFoo(b);" + "Bar.prototype['getBaz']=function(){}", "Bar.prototype['a']=function(){};Bar.a(b);" + "Bar.prototype['b']=function(){}", "Bar.prototype['getFoo']=function(){};Bar.getFoo(b);" + "Bar.prototype['getBar']=function(){};" + "Bar.prototype['getBaz']=function(){}", "Bar.prototype['a']=function(){};Bar.a(b);" + "Bar.prototype['c']=function(){};" + "Bar.prototype['b']=function(){}"); [EOL] } <line_num>: 199,211
public void testStableSimple3() { [EOL]     testStable("Bar.prototype={'getFoo':function(){}," + "'getBar':function(){}};b.getFoo()", "Bar.prototype={'a':function(){}, 'b':function(){}};b.a()", "Bar.prototype={'getFoo':function(){}," + "'getBaz':function(){},'getBar':function(){}};b.getFoo()", "Bar.prototype={'a':function(){}, " + "'c':function(){}, 'b':function(){}};b.a()"); [EOL] } <line_num>: 213,222
public void testStableOverlap() { [EOL]     testStable("Bar.prototype={'a':function(){},'b':function(){}};b.b()", "Bar.prototype={'b':function(){},'a':function(){}};b.a()", "Bar.prototype={'a':function(){},'b':function(){}};b.b()", "Bar.prototype={'b':function(){},'a':function(){}};b.a()"); [EOL] } <line_num>: 224,230
public void testStableTrickyExternedMethods() { [EOL]     test("Bar.prototype={'toString':function(){}," + "'getBar':function(){}};b.toString()", "Bar.prototype={'toString':function(){}," + "'a':function(){}};b.toString()"); [EOL]     prevUsedRenameMap = renamePrototypes.getPropertyMap(); [EOL]     String externs = EXTERNS + "prop.a;"; [EOL]     test(externs, "Bar.prototype={'toString':function(){}," + "'getBar':function(){}};b.toString()", "Bar.prototype={'toString':function(){}," + "'b':function(){}};b.toString()", null, null); [EOL] } <line_num>: 232,244
public void testStable(String input1, String expected1, String input2, String expected2) { [EOL]     test(input1, expected1); [EOL]     prevUsedRenameMap = renamePrototypes.getPropertyMap(); [EOL]     test(input2, expected2); [EOL] } <line_num>: 246,251
