public void testBasic() { [EOL]     testVarMotionWithCode("var X = 3;", Token.VAR, Token.SCRIPT); [EOL] } <line_num>: 40,42
public void testNamedFunction() { [EOL]     testVarMotionWithCode("var X = 3; function f() {}", Token.VAR, Token.SCRIPT); [EOL] } <line_num>: 44,47
public void testNamedFunction2() { [EOL]     testVarMotionWithCode("var X = 3; function f() {} var Y;", Token.VAR, Token.NAME, Token.VAR, Token.SCRIPT); [EOL] } <line_num>: 49,52
public void testFunctionExpression() { [EOL]     testVarMotionWithCode("var X = 3, Y = function() {}; 3;", Token.NAME, Token.VAR, Token.NUMBER, Token.EXPR_RESULT, Token.SCRIPT); [EOL] } <line_num>: 54,57
public void testFunctionExpression2() { [EOL]     testVarMotionWithCode("var X = 3; var Y = function() {}; 3;", Token.VAR, Token.NAME, Token.VAR, Token.NUMBER, Token.EXPR_RESULT, Token.SCRIPT); [EOL] } <line_num>: 59,63
public void testHaltAtVarRef() { [EOL]     testVarMotionWithCode("var X, Y = 3; var Z = X;", Token.NUMBER, Token.NAME, Token.VAR, Token.NAME); [EOL] } <line_num>: 65,68
public void testHaltAtVarRef2() { [EOL]     testVarMotionWithCode("var X, Y = 3; (function() {})(3, X);", Token.NUMBER, Token.NAME, Token.VAR, Token.NUMBER, Token.NAME); [EOL] } <line_num>: 70,73
public void testHaltAtVarRef3() { [EOL]     testVarMotionWithCode("var X, Y = 3; X;", Token.NUMBER, Token.NAME, Token.VAR, Token.NAME); [EOL] } <line_num>: 75,78
public void testHaltAtSideEffects() { [EOL]     testVarMotionWithCode("var X, Y = 3; var Z = B(3);", Token.NUMBER, Token.NAME, Token.VAR, Token.NAME, Token.NUMBER); [EOL] } <line_num>: 80,83
public void testHaltAtSideEffects2() { [EOL]     testVarMotionWithCode("var A = 1, X = A, Y = 3; delete A;", Token.NUMBER, Token.NAME, Token.VAR, Token.NAME); [EOL] } <line_num>: 85,88
public void testHaltAtSideEffects3() { [EOL]     testVarMotionWithCode("var A = 1, X = A, Y = 3; A++;", Token.NUMBER, Token.NAME, Token.VAR, Token.NAME); [EOL] } <line_num>: 90,93
public void testHaltAtSideEffects4() { [EOL]     testVarMotionWithCode("var A = 1, X = A, Y = 3; A--;", Token.NUMBER, Token.NAME, Token.VAR, Token.NAME); [EOL] } <line_num>: 95,98
public void testHaltAtSideEffects5() { [EOL]     testVarMotionWithCode("var A = 1, X = A, Y = 3; A = 'a';", Token.NUMBER, Token.NAME, Token.VAR, Token.NAME, Token.STRING); [EOL] } <line_num>: 100,103
public void testNoHaltReadWhenValueIsImmutable() { [EOL]     testVarMotionWithCode("var X = 1, Y = 3; alert();", Token.NUMBER, Token.NAME, Token.VAR, Token.NAME); [EOL] } <line_num>: 105,108
public void testHaltReadWhenValueHasSideEffects() { [EOL]     testVarMotionWithCode("var X = f(), Y = 3; alert();", Token.NUMBER, Token.NAME, Token.VAR); [EOL] } <line_num>: 110,113
public void testCatchBlock() { [EOL]     testVarMotionWithCode("var X = 1; try { 4; } catch (X) {}", Token.VAR, Token.NUMBER, Token.EXPR_RESULT, Token.BLOCK); [EOL] } <line_num>: 115,118
public void testIfBranch() { [EOL]     testVarMotionWithCode("var X = foo(); if (X) {}", Token.VAR, Token.NAME); [EOL] } <line_num>: 120,123
private void testVarMotionWithCode(String code, int... expectedTokens) { [EOL]     List<Integer> expectedList = Lists.newArrayList(); [EOL]     for (int token : expectedTokens) { [EOL]         expectedList.add(token); [EOL]     } [EOL]     testVarMotionWithCode(code, expectedList); [EOL] } <line_num>: 130,136
private void testVarMotionWithCode(String code, List<Integer> expectedTokens) { [EOL]     List<Node> ancestors = Lists.newArrayList(); [EOL]     Node root = (new Compiler()).parseTestCode(";" + code); [EOL]     for (Node n = root; n != null; n = n.getFirstChild()) { [EOL]         ancestors.add(0, n); [EOL]     } [EOL]     FunctionlessLocalScope searchIt = new FunctionlessLocalScope(ancestors.toArray(new Node[ancestors.size()])); [EOL]     boolean found = false; [EOL]     while (searchIt.hasNext()) { [EOL]         Node n = searchIt.next(); [EOL]         if (n.isName() && searchIt.currentParent().isVar() && n.getString().equals("X")) { [EOL]             found = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue("Variable X not found! " + root.toStringTree(), found); [EOL]     List<Node> currentAncestors = searchIt.currentAncestors(); [EOL]     assert (currentAncestors.size() >= 3); [EOL]     Iterator<Node> moveIt = LocalVarMotion.forVar(currentAncestors.get(0), currentAncestors.get(1), currentAncestors.get(2)); [EOL]     List<Integer> actualTokens = Lists.newArrayList(); [EOL]     while (moveIt.hasNext()) { [EOL]         actualTokens.add(moveIt.next().getType()); [EOL]     } [EOL]     assertEquals(expectedTokens, actualTokens); [EOL] } <line_num>: 141,179
