public CheckSuspiciousCodeTest() { [EOL]     this.parseTypeInfo = true; [EOL] } <line_num>: 23,25
@Override [EOL] protected CompilerPass getProcessor(Compiler compiler) { [EOL]     return new CombinedCompilerPass(compiler, new CheckSuspiciousCode()); [EOL] } <line_num>: 27,31
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 33,36
public void test(String js, DiagnosticType error) { [EOL]     test(js, js, null, error); [EOL] } <line_num>: 38,40
public void testSuspiciousSemi() { [EOL]     final DiagnosticType e = CheckSuspiciousCode.SUSPICIOUS_SEMICOLON; [EOL]     final DiagnosticType ok = null; [EOL]     test("if(x()) x = y;", ok); [EOL]     test("if(x()); x = y;", e); [EOL]     test("if(x()){} x = y;", ok); [EOL]     test("if(x()) x = y; else y=z;", ok); [EOL]     test("if(x()); else y=z;", e); [EOL]     test("if(x()){} else y=z;", ok); [EOL]     test("if(x()) x = y; else;", e); [EOL]     test("if(x()) x = y; else {}", ok); [EOL]     test("while(x()) x = y;", ok); [EOL]     test("while(x()); x = y;", e); [EOL]     test("while(x()){} x = y;", ok); [EOL]     test("while(x()); {x = y}", e); [EOL]     test("while(x()){} {x = y}", ok); [EOL]     test("for(;;) x = y;", ok); [EOL]     test("for(;;); x = y;", e); [EOL]     test("for(;;){} x = y;", ok); [EOL]     test("for(x in y) x = y;", ok); [EOL]     test("for(x in y); x = y;", e); [EOL]     test("for(x in y){} x = y;", ok); [EOL] } <line_num>: 42,68
private void testReportNaN(String js) { [EOL]     testSame(js, CheckSuspiciousCode.SUSPICIOUS_COMPARISON_WITH_NAN); [EOL] } <line_num>: 70,72
public void testComparison1() { [EOL]     testReportNaN("x == NaN"); [EOL]     testReportNaN("x != NaN"); [EOL]     testReportNaN("x === NaN"); [EOL]     testReportNaN("x !== NaN"); [EOL]     testReportNaN("x < NaN"); [EOL]     testReportNaN("x <= NaN"); [EOL]     testReportNaN("x > NaN"); [EOL]     testReportNaN("x >= NaN"); [EOL] } <line_num>: 74,83
public void testComparison2() { [EOL]     testReportNaN("NaN == x"); [EOL]     testReportNaN("NaN != x"); [EOL]     testReportNaN("NaN === x"); [EOL]     testReportNaN("NaN !== x"); [EOL]     testReportNaN("NaN < x"); [EOL]     testReportNaN("NaN <= x"); [EOL]     testReportNaN("NaN > x"); [EOL]     testReportNaN("NaN >= x"); [EOL] } <line_num>: 85,94
public void testComparison3() { [EOL]     testReportNaN("x == 0/0"); [EOL]     testReportNaN("x != 0/0"); [EOL]     testReportNaN("x === 0/0"); [EOL]     testReportNaN("x !== 0/0"); [EOL]     testReportNaN("x < 0/0"); [EOL]     testReportNaN("x <= 0/0"); [EOL]     testReportNaN("x > 0/0"); [EOL]     testReportNaN("x >= 0/0"); [EOL] } <line_num>: 96,105
public void testComparison4() { [EOL]     testReportNaN("0/0 == x"); [EOL]     testReportNaN("0/0 != x"); [EOL]     testReportNaN("0/0 === x"); [EOL]     testReportNaN("0/0 !== x"); [EOL]     testReportNaN("0/0 < x"); [EOL]     testReportNaN("0/0 <= x"); [EOL]     testReportNaN("0/0 > x"); [EOL]     testReportNaN("0/0 >= x"); [EOL] } <line_num>: 107,116
