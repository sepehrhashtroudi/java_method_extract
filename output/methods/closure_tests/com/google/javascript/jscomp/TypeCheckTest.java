private TypeCheckResult(Node root, Scope scope) { [EOL]     this.root = root; [EOL]     this.scope = scope; [EOL] } <line_num>: 11556,11559
@Override [EOL] public void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     reportMissingOverrides = CheckLevel.WARNING; [EOL] } <line_num>: 46,50
public void testInitialTypingScope() { [EOL]     Scope s = new TypedScopeCreator(compiler, CodingConventions.getDefault()).createInitialScope(new Node(Token.BLOCK)); [EOL]     assertTypeEquals(ARRAY_FUNCTION_TYPE, s.getVar("Array").getType()); [EOL]     assertTypeEquals(BOOLEAN_OBJECT_FUNCTION_TYPE, s.getVar("Boolean").getType()); [EOL]     assertTypeEquals(DATE_FUNCTION_TYPE, s.getVar("Date").getType()); [EOL]     assertTypeEquals(ERROR_FUNCTION_TYPE, s.getVar("Error").getType()); [EOL]     assertTypeEquals(EVAL_ERROR_FUNCTION_TYPE, s.getVar("EvalError").getType()); [EOL]     assertTypeEquals(NUMBER_OBJECT_FUNCTION_TYPE, s.getVar("Number").getType()); [EOL]     assertTypeEquals(OBJECT_FUNCTION_TYPE, s.getVar("Object").getType()); [EOL]     assertTypeEquals(RANGE_ERROR_FUNCTION_TYPE, s.getVar("RangeError").getType()); [EOL]     assertTypeEquals(REFERENCE_ERROR_FUNCTION_TYPE, s.getVar("ReferenceError").getType()); [EOL]     assertTypeEquals(REGEXP_FUNCTION_TYPE, s.getVar("RegExp").getType()); [EOL]     assertTypeEquals(STRING_OBJECT_FUNCTION_TYPE, s.getVar("String").getType()); [EOL]     assertTypeEquals(SYNTAX_ERROR_FUNCTION_TYPE, s.getVar("SyntaxError").getType()); [EOL]     assertTypeEquals(TYPE_ERROR_FUNCTION_TYPE, s.getVar("TypeError").getType()); [EOL]     assertTypeEquals(URI_ERROR_FUNCTION_TYPE, s.getVar("URIError").getType()); [EOL] } <line_num>: 52,80
public void testPrivateType() throws Exception { [EOL]     testTypes("/** @private {number} */ var x = false;", "initializing variable\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 82,88
public void testTypeCheck1() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){ if (foo()) return; }"); [EOL] } <line_num>: 90,92
public void testTypeCheck2() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){ var x=foo(); x--; }", "increment/decrement\n" + "found   : undefined\n" + "required: number"); [EOL] } <line_num>: 94,99
public void testTypeCheck4() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){ !foo(); }"); [EOL] } <line_num>: 101,103
public void testTypeCheck5() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){ var a = +foo(); }", "sign operator\n" + "found   : undefined\n" + "required: number"); [EOL] } <line_num>: 105,110
public void testTypeCheck6() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){" + "/** @type {undefined|number} */var a;if (a == foo())return;}"); [EOL] } <line_num>: 112,116
public void testTypeCheck8() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){do {} while (foo());}"); [EOL] } <line_num>: 118,120
public void testTypeCheck9() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){while (foo());}"); [EOL] } <line_num>: 122,124
public void testTypeCheck10() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){for (;foo(););}"); [EOL] } <line_num>: 126,128
public void testTypeCheck11() throws Exception { [EOL]     testTypes("/**@type !Number */var a;" + "/**@type !String */var b;" + "a = b;", "assignment\n" + "found   : String\n" + "required: Number"); [EOL] } <line_num>: 130,137
public void testTypeCheck12() throws Exception { [EOL]     testTypes("/**@return {!Object}*/function foo(){var a = 3^foo();}", "bad right operand to bitwise operator\n" + "found   : Object\n" + "required: (boolean|null|number|string|undefined)"); [EOL] } <line_num>: 139,144
public void testTypeCheck13() throws Exception { [EOL]     testTypes("/**@type {!Number|!String}*/var i; i=/xx/;", "assignment\n" + "found   : RegExp\n" + "required: (Number|String)"); [EOL] } <line_num>: 146,151
public void testTypeCheck14() throws Exception { [EOL]     testTypes("/**@param opt_a*/function foo(opt_a){}"); [EOL] } <line_num>: 153,155
public void testTypeCheck15() throws Exception { [EOL]     testTypes("/**@type {Number|null} */var x;x=null;x=10;", "assignment\n" + "found   : number\n" + "required: (Number|null)"); [EOL] } <line_num>: 158,163
public void testTypeCheck16() throws Exception { [EOL]     testTypes("/**@type {Number|null} */var x='';", "initializing variable\n" + "found   : string\n" + "required: (Number|null)"); [EOL] } <line_num>: 165,170
public void testTypeCheck17() throws Exception { [EOL]     testTypes("/**@return {Number}\n@param {Number} opt_foo */\n" + "function a(opt_foo){\nreturn /**@type {Number}*/(opt_foo);\n}"); [EOL] } <line_num>: 173,176
public void testTypeCheck18() throws Exception { [EOL]     testTypes("/**@return {RegExp}\n*/\n function a(){return new RegExp();}"); [EOL] } <line_num>: 179,181
public void testTypeCheck19() throws Exception { [EOL]     testTypes("/**@return {Array}\n*/\n function a(){return new Array();}"); [EOL] } <line_num>: 183,185
public void testTypeCheck20() throws Exception { [EOL]     testTypes("/**@return {Date}\n*/\n function a(){return new Date();}"); [EOL] } <line_num>: 187,189
public void testTypeCheckBasicDowncast() throws Exception { [EOL]     testTypes("/** @constructor */function foo() {}\n" + "/** @type {Object} */ var bar = new foo();\n"); [EOL] } <line_num>: 191,194
public void testTypeCheckNoDowncastToNumber() throws Exception { [EOL]     testTypes("/** @constructor */function foo() {}\n" + "/** @type {!Number} */ var bar = new foo();\n", "initializing variable\n" + "found   : foo\n" + "required: Number"); [EOL] } <line_num>: 196,202
public void testTypeCheck21() throws Exception { [EOL]     testTypes("/** @type Array.<String> */var foo;"); [EOL] } <line_num>: 204,206
public void testTypeCheck22() throws Exception { [EOL]     testTypes("/** @param {Element|Object} p */\nfunction foo(p){}\n" + "/** @constructor */function Element(){}\n" + "/** @type {Element|Object} */var v;\n" + "foo(v);\n"); [EOL] } <line_num>: 208,213
public void testTypeCheck23() throws Exception { [EOL]     testTypes("/** @type {(Object,Null)} */var foo; foo = null;"); [EOL] } <line_num>: 215,217
public void testTypeCheck24() throws Exception { [EOL]     testTypes("/** @constructor */function MyType(){}\n" + "/** @type {(MyType,Null)} */var foo; foo = null;"); [EOL] } <line_num>: 219,222
public void testTypeCheckDefaultExterns() throws Exception { [EOL]     testTypes("/** @param {string} x */ function f(x) {}" + "f([].length);", "actual parameter 1 of f does not match formal parameter\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 224,230
public void testTypeCheckCustomExterns() throws Exception { [EOL]     testTypes(DEFAULT_EXTERNS + "/** @type {boolean} */ Array.prototype.oogabooga;", "/** @param {string} x */ function f(x) {}" + "f([].oogabooga);", "actual parameter 1 of f does not match formal parameter\n" + "found   : boolean\n" + "required: string", false); [EOL] } <line_num>: 232,240
public void testTypeCheckCustomExterns2() throws Exception { [EOL]     testTypes(DEFAULT_EXTERNS + "/** @enum {string} */ var Enum = {FOO: 1, BAR: 1};", "/** @param {Enum} x */ function f(x) {} f(Enum.FOO); f(true);", "actual parameter 1 of f does not match formal parameter\n" + "found   : boolean\n" + "required: Enum.<string>", false); [EOL] } <line_num>: 243,251
public void testParameterizedArray1() throws Exception { [EOL]     testTypes("/** @param {!Array.<number>} a\n" + "* @return {string}\n" + "*/ var f = function(a) { return a[0]; };", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 253,260
public void testParameterizedArray2() throws Exception { [EOL]     testTypes("/** @param {!Array.<!Array.<number>>} a\n" + "* @return {number}\n" + "*/ var f = function(a) { return a[0]; };", "inconsistent return type\n" + "found   : Array.<number>\n" + "required: number"); [EOL] } <line_num>: 262,269
public void testParameterizedArray3() throws Exception { [EOL]     testTypes("/** @param {!Array.<number>} a\n" + "* @return {number}\n" + "*/ var f = function(a) { a[1] = 0; return a[0]; };"); [EOL] } <line_num>: 271,275
public void testParameterizedArray4() throws Exception { [EOL]     testTypes("/** @param {!Array.<number>} a\n" + "*/ var f = function(a) { a[0] = 'a'; };", "assignment\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 277,283
public void testParameterizedArray5() throws Exception { [EOL]     testTypes("/** @param {!Array.<*>} a\n" + "*/ var f = function(a) { a[0] = 'a'; };"); [EOL] } <line_num>: 285,288
public void testParameterizedArray6() throws Exception { [EOL]     testTypes("/** @param {!Array.<*>} a\n" + "* @return {string}\n" + "*/ var f = function(a) { return a[0]; };", "inconsistent return type\n" + "found   : *\n" + "required: string"); [EOL] } <line_num>: 290,297
public void testParameterizedArray7() throws Exception { [EOL]     testTypes("/** @param {?Array.<number>} a\n" + "* @return {string}\n" + "*/ var f = function(a) { return a[0]; };", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 299,306
public void testParameterizedObject1() throws Exception { [EOL]     testTypes("/** @param {!Object.<number>} a\n" + "* @return {string}\n" + "*/ var f = function(a) { return a[0]; };", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 308,315
public void testParameterizedObject2() throws Exception { [EOL]     testTypes("/** @param {!Object.<string,number>} a\n" + "* @return {string}\n" + "*/ var f = function(a) { return a['x']; };", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 317,324
public void testParameterizedObject3() throws Exception { [EOL]     testTypes("/** @param {!Object.<number,string>} a\n" + "* @return {string}\n" + "*/ var f = function(a) { return a['x']; };", "restricted index type\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 326,333
public void testParameterizedObject4() throws Exception { [EOL]     testTypes("/** @enum {string} */ var E = {A: 'a', B: 'b'};\n" + "/** @param {!Object.<E,string>} a\n" + "* @return {string}\n" + "*/ var f = function(a) { return a['x']; };", "restricted index type\n" + "found   : string\n" + "required: E.<string>"); [EOL] } <line_num>: 335,343
public void testParameterizedObject5() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {" + "  /** @type {Object.<number, string>} */ this.numbers = {};" + "}" + "(new F()).numbers['ten'] = '10';", "restricted index type\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 345,353
public void testUnionOfFunctionAndType() throws Exception { [EOL]     testTypes("/** @type {null|(function(Number):void)} */ var a;" + "/** @type {(function(Number):void)|null} */ var b = null; a = b;"); [EOL] } <line_num>: 355,358
public void testOptionalParameterComparedToUndefined() throws Exception { [EOL]     testTypes("/**@param opt_a {Number}*/function foo(opt_a)" + "{if (opt_a==undefined) var b = 3;}"); [EOL] } <line_num>: 360,363
public void testOptionalAllType() throws Exception { [EOL]     testTypes("/** @param {*} opt_x */function f(opt_x) { return opt_x }\n" + "/** @type {*} */var y;\n" + "f(y);"); [EOL] } <line_num>: 365,369
public void testOptionalUnknownNamedType() throws Exception { [EOL]     testTypes("/** @param {!T} opt_x\n@return {undefined} */\n" + "function f(opt_x) { return opt_x; }\n" + "/** @constructor */var T = function() {};", "inconsistent return type\n" + "found   : (T|undefined)\n" + "required: undefined"); [EOL] } <line_num>: 371,378
public void testOptionalArgFunctionParam() throws Exception { [EOL]     testTypes("/** @param {function(number=)} a */" + "function f(a) {a()};"); [EOL] } <line_num>: 380,383
public void testOptionalArgFunctionParam2() throws Exception { [EOL]     testTypes("/** @param {function(number=)} a */" + "function f(a) {a(3)};"); [EOL] } <line_num>: 385,388
public void testOptionalArgFunctionParam3() throws Exception { [EOL]     testTypes("/** @param {function(number=)} a */" + "function f(a) {a(undefined)};"); [EOL] } <line_num>: 390,393
public void testOptionalArgFunctionParam4() throws Exception { [EOL]     String expectedWarning = "Function a: called with 2 argument(s). " + "Function requires at least 0 argument(s) and no more than 1 " + "argument(s)."; [EOL]     testTypes("/** @param {function(number=)} a */function f(a) {a(3,4)};", expectedWarning, false); [EOL] } <line_num>: 395,402
public void testOptionalArgFunctionParamError() throws Exception { [EOL]     String expectedWarning = "Bad type annotation. variable length argument must be last"; [EOL]     testTypes("/** @param {function(...[number], number=)} a */" + "function f(a) {};", expectedWarning, false); [EOL] } <line_num>: 404,409
public void testOptionalNullableArgFunctionParam() throws Exception { [EOL]     testTypes("/** @param {function(?number=)} a */" + "function f(a) {a()};"); [EOL] } <line_num>: 411,414
public void testOptionalNullableArgFunctionParam2() throws Exception { [EOL]     testTypes("/** @param {function(?number=)} a */" + "function f(a) {a(null)};"); [EOL] } <line_num>: 416,419
public void testOptionalNullableArgFunctionParam3() throws Exception { [EOL]     testTypes("/** @param {function(?number=)} a */" + "function f(a) {a(3)};"); [EOL] } <line_num>: 421,424
public void testOptionalArgFunctionReturn() throws Exception { [EOL]     testTypes("/** @return {function(number=)} */" + "function f() { return function(opt_x) { }; };" + "f()()"); [EOL] } <line_num>: 426,430
public void testOptionalArgFunctionReturn2() throws Exception { [EOL]     testTypes("/** @return {function(Object=)} */" + "function f() { return function(opt_x) { }; };" + "f()({})"); [EOL] } <line_num>: 432,436
public void testBooleanType() throws Exception { [EOL]     testTypes("/**@type {boolean} */var x = 1 < 2;"); [EOL] } <line_num>: 438,440
public void testBooleanReduction1() throws Exception { [EOL]     testTypes("/**@type {string} */var x; x = null || \"a\";"); [EOL] } <line_num>: 442,444
public void testBooleanReduction2() throws Exception { [EOL]     testTypes("/** @param {string} s\n @return {string} */" + "(function(s) { return ((s == 'a') && s) || 'b'; })"); [EOL] } <line_num>: 446,451
public void testBooleanReduction3() throws Exception { [EOL]     testTypes("/** @param {string} s\n @return {string?} */" + "(function(s) { return s && null && 3; })"); [EOL] } <line_num>: 453,456
public void testBooleanReduction4() throws Exception { [EOL]     testTypes("/** @param {Object} x\n @return {Object} */" + "(function(x) { return null || x || null ; })"); [EOL] } <line_num>: 458,461
public void testBooleanReduction5() throws Exception { [EOL]     testTypes("/**\n" + "* @param {Array|string} x\n" + "* @return {string?}\n" + "*/\n" + "var f = function(x) {\n" + "if (!x || typeof x == 'string') {\n" + "return x;\n" + "}\n" + "return null;\n" + "};"); [EOL] } <line_num>: 463,474
public void testBooleanReduction6() throws Exception { [EOL]     testTypes("/**\n" + "* @param {Array|string|null} x\n" + "* @return {string?}\n" + "*/\n" + "var f = function(x) {\n" + "if (!(x && typeof x != 'string')) {\n" + "return x;\n" + "}\n" + "return null;\n" + "};"); [EOL] } <line_num>: 476,487
public void testBooleanReduction7() throws Exception { [EOL]     testTypes("/** @constructor */var T = function() {};\n" + "/**\n" + "* @param {Array|T} x\n" + "* @return {null}\n" + "*/\n" + "var f = function(x) {\n" + "if (!x) {\n" + "return x;\n" + "}\n" + "return null;\n" + "};"); [EOL] } <line_num>: 489,501
public void testNullAnd() throws Exception { [EOL]     testTypes("/** @type null */var x;\n" + "/** @type number */var r = x && x;", "initializing variable\n" + "found   : null\n" + "required: number"); [EOL] } <line_num>: 503,509
public void testNullOr() throws Exception { [EOL]     testTypes("/** @type null */var x;\n" + "/** @type number */var r = x || x;", "initializing variable\n" + "found   : null\n" + "required: number"); [EOL] } <line_num>: 511,517
public void testBooleanPreservation1() throws Exception { [EOL]     testTypes("/**@type {string} */var x = \"a\";" + "x = ((x == \"a\") && x) || x == \"b\";", "assignment\n" + "found   : (boolean|string)\n" + "required: string"); [EOL] } <line_num>: 519,525
public void testBooleanPreservation2() throws Exception { [EOL]     testTypes("/**@type {string} */var x = \"a\"; x = (x == \"a\") || x;", "assignment\n" + "found   : (boolean|string)\n" + "required: string"); [EOL] } <line_num>: 527,532
public void testBooleanPreservation3() throws Exception { [EOL]     testTypes("/** @param {Function?} x\n @return {boolean?} */" + "function f(x) { return x && x == \"a\"; }", "condition always evaluates to false\n" + "left : Function\n" + "right: string"); [EOL] } <line_num>: 534,540
public void testBooleanPreservation4() throws Exception { [EOL]     testTypes("/** @param {Function?|boolean} x\n @return {boolean} */" + "function f(x) { return x && x == \"a\"; }", "inconsistent return type\n" + "found   : (boolean|null)\n" + "required: boolean"); [EOL] } <line_num>: 542,548
public void testTypeOfReduction1() throws Exception { [EOL]     testTypes("/** @param {string|number} x\n @return {string} */ " + "function f(x) { return typeof x == 'number' ? String(x) : x; }"); [EOL] } <line_num>: 550,553
public void testTypeOfReduction2() throws Exception { [EOL]     testTypes("/** @param {string|number} x\n @return {string} */ " + "function f(x) { return typeof x != 'string' ? String(x) : x; }"); [EOL] } <line_num>: 555,558
public void testTypeOfReduction3() throws Exception { [EOL]     testTypes("/** @param {number|null} x\n @return {number} */ " + "function f(x) { return typeof x == 'object' ? 1 : x; }"); [EOL] } <line_num>: 560,563
public void testTypeOfReduction4() throws Exception { [EOL]     testTypes("/** @param {Object|undefined} x\n @return {Object} */ " + "function f(x) { return typeof x == 'undefined' ? {} : x; }"); [EOL] } <line_num>: 565,568
public void testTypeOfReduction5() throws Exception { [EOL]     testTypes("/** @enum {string} */ var E = {A: 'a', B: 'b'};\n" + "/** @param {!E|number} x\n @return {string} */ " + "function f(x) { return typeof x != 'number' ? x : 'a'; }"); [EOL] } <line_num>: 570,574
public void testTypeOfReduction6() throws Exception { [EOL]     testTypes("/** @param {number|string} x\n@return {string} */\n" + "function f(x) {\n" + "return typeof x == 'string' && x.length == 3 ? x : 'a';\n" + "}"); [EOL] } <line_num>: 576,581
public void testTypeOfReduction7() throws Exception { [EOL]     testTypes("/** @return {string} */var f = function(x) { " + "return typeof x == 'number' ? x : 'a'; }", "inconsistent return type\n" + "found   : (number|string)\n" + "required: string"); [EOL] } <line_num>: 583,589
public void testTypeOfReduction8() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @param {number|string} x\n@return {string} */\n" + "function f(x) {\n" + "return goog.isString(x) && x.length == 3 ? x : 'a';\n" + "}", null); [EOL] } <line_num>: 591,598
public void testTypeOfReduction9() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @param {!Array|string} x\n@return {string} */\n" + "function f(x) {\n" + "return goog.isArray(x) ? 'a' : x;\n" + "}", null); [EOL] } <line_num>: 600,607
public void testTypeOfReduction10() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @param {Array|string} x\n@return {Array} */\n" + "function f(x) {\n" + "return goog.isArray(x) ? x : [];\n" + "}", null); [EOL] } <line_num>: 609,616
public void testTypeOfReduction11() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @param {Array|string} x\n@return {Array} */\n" + "function f(x) {\n" + "return goog.isObject(x) ? x : [];\n" + "}", null); [EOL] } <line_num>: 618,625
public void testTypeOfReduction12() throws Exception { [EOL]     testTypes("/** @enum {string} */ var E = {A: 'a', B: 'b'};\n" + "/** @param {E|Array} x\n @return {Array} */ " + "function f(x) { return typeof x == 'object' ? x : []; }"); [EOL] } <line_num>: 627,631
public void testTypeOfReduction13() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @enum {string} */ var E = {A: 'a', B: 'b'};\n" + "/** @param {E|Array} x\n@return {Array} */ " + "function f(x) { return goog.isObject(x) ? x : []; }", null); [EOL] } <line_num>: 633,639
public void testTypeOfReduction14() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "function f(x) { " + "  return goog.isString(arguments[0]) ? arguments[0] : 0;" + "}", null); [EOL] } <line_num>: 641,648
public void testTypeOfReduction15() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "function f(x) { " + "  return typeof arguments[0] == 'string' ? arguments[0] : 0;" + "}", null); [EOL] } <line_num>: 650,657
public void testTypeOfReduction16() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @interface */ function I() {}\n" + "/**\n" + " * @param {*} x\n" + " * @return {I}\n" + " */\n" + "function f(x) { " + "  if(goog.isObject(x)) {" + "    return /** @type {I} */(x);" + "  }" + "  return null;" + "}", null); [EOL] } <line_num>: 659,673
public void testQualifiedNameReduction1() throws Exception { [EOL]     testTypes("var x = {}; /** @type {string?} */ x.a = 'a';\n" + "/** @return {string} */ var f = function() {\n" + "return x.a ? x.a : 'a'; }"); [EOL] } <line_num>: 675,679
public void testQualifiedNameReduction2() throws Exception { [EOL]     testTypes("/** @param {string?} a\n@constructor */ var T = " + "function(a) {this.a = a};\n" + "/** @return {string} */ T.prototype.f = function() {\n" + "return this.a ? this.a : 'a'; }"); [EOL] } <line_num>: 681,686
public void testQualifiedNameReduction3() throws Exception { [EOL]     testTypes("/** @param {string|Array} a\n@constructor */ var T = " + "function(a) {this.a = a};\n" + "/** @return {string} */ T.prototype.f = function() {\n" + "return typeof this.a == 'string' ? this.a : 'a'; }"); [EOL] } <line_num>: 688,693
public void testQualifiedNameReduction4() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @param {string|Array} a\n@constructor */ var T = " + "function(a) {this.a = a};\n" + "/** @return {string} */ T.prototype.f = function() {\n" + "return goog.isString(this.a) ? this.a : 'a'; }", null); [EOL] } <line_num>: 695,702
public void testQualifiedNameReduction5a() throws Exception { [EOL]     testTypes("var x = {/** @type {string} */ a:'b' };\n" + "/** @return {string} */ var f = function() {\n" + "return x.a; }"); [EOL] } <line_num>: 704,708
public void testQualifiedNameReduction5b() throws Exception { [EOL]     testTypes("var x = {/** @type {number} */ a:12 };\n" + "/** @return {string} */\n" + "var f = function() {\n" + "  return x.a;\n" + "}", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 710,720
public void testQualifiedNameReduction5c() throws Exception { [EOL]     testTypes("/** @return {string} */ var f = function() {\n" + "var x = {/** @type {number} */ a:0 };\n" + "return (x.a) ? (x.a) : 'a'; }", "inconsistent return type\n" + "found   : (number|string)\n" + "required: string"); [EOL] } <line_num>: 722,730
public void testQualifiedNameReduction6() throws Exception { [EOL]     testTypes("/** @return {string} */ var f = function() {\n" + "var x = {/** @return {string?} */ get a() {return 'a'}};\n" + "return x.a ? x.a : 'a'; }"); [EOL] } <line_num>: 732,737
public void testQualifiedNameReduction7() throws Exception { [EOL]     testTypes("/** @return {string} */ var f = function() {\n" + "var x = {/** @return {number} */ get a() {return 12}};\n" + "return x.a; }", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 739,747
public void testQualifiedNameReduction7a() throws Exception { [EOL]     testTypes("/** @return {string} */ var f = function() {\n" + "var x = {get a() {return 12}};\n" + "return x.a; }"); [EOL] } <line_num>: 749,755
public void testQualifiedNameReduction8() throws Exception { [EOL]     testTypes("/** @return {string} */ var f = function() {\n" + "var x = {get a() {return 'a'}};\n" + "return x.a ? x.a : 'a'; }"); [EOL] } <line_num>: 757,762
public void testQualifiedNameReduction9() throws Exception { [EOL]     testTypes("/** @return {string} */ var f = function() {\n" + "var x = { /** @param {string} b */ set a(b) {}};\n" + "return x.a ? x.a : 'a'; }"); [EOL] } <line_num>: 764,769
public void testQualifiedNameReduction10() throws Exception { [EOL]     testTypes("/** @return {string} */ var f = function() {\n" + "var x = { /** @param {number} b */ set a(b) {}};\n" + "return x.a ? x.a : 'a'; }", "inconsistent return type\n" + "found   : (number|string)\n" + "required: string"); [EOL] } <line_num>: 771,781
public void testObjLitDef1a() throws Exception { [EOL]     testTypes("var x = {/** @type {number} */ a:12 };\n" + "x.a = 'a';", "assignment to property a of x\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 783,790
public void testObjLitDef1b() throws Exception { [EOL]     testTypes("function f(){" + "var x = {/** @type {number} */ a:12 };\n" + "x.a = 'a';" + "};\n" + "f();", "assignment to property a of x\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 792,802
public void testObjLitDef2a() throws Exception { [EOL]     testTypes("var x = {/** @param {number} b */ set a(b){} };\n" + "x.a = 'a';", "assignment to property a of x\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 804,811
public void testObjLitDef2b() throws Exception { [EOL]     testTypes("function f(){" + "var x = {/** @param {number} b */ set a(b){} };\n" + "x.a = 'a';" + "};\n" + "f();", "assignment to property a of x\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 813,823
public void testObjLitDef3a() throws Exception { [EOL]     testTypes("/** @type {string} */ var y;\n" + "var x = {/** @return {number} */ get a(){} };\n" + "y = x.a;", "assignment\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 825,833
public void testObjLitDef3b() throws Exception { [EOL]     testTypes("/** @type {string} */ var y;\n" + "function f(){" + "var x = {/** @return {number} */ get a(){} };\n" + "y = x.a;" + "};\n" + "f();", "assignment\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 835,846
public void testObjLitDef4() throws Exception { [EOL]     testTypes("var x = {" + "/** @return {number} */ a:12 };\n", "assignment to property a of {a: function (): number}\n" + "found   : number\n" + "required: function (): number"); [EOL] } <line_num>: 848,855
public void testObjLitDef5() throws Exception { [EOL]     testTypes("var x = {};\n" + "/** @return {number} */ x.a = 12;\n", "assignment to property a of x\n" + "found   : number\n" + "required: function (): number"); [EOL] } <line_num>: 857,864
public void testObjLitDef6() throws Exception { [EOL]     testTypes("var lit = /** @struct */ { 'x': 1 };", "Illegal key, the object literal is a struct"); [EOL] } <line_num>: 866,869
public void testObjLitDef7() throws Exception { [EOL]     testTypes("var lit = /** @dict */ { x: 1 };", "Illegal key, the object literal is a dict"); [EOL] } <line_num>: 871,874
public void testInstanceOfReduction1() throws Exception { [EOL]     testTypes("/** @constructor */ var T = function() {};\n" + "/** @param {T|string} x\n@return {T} */\n" + "var f = function(x) {\n" + "if (x instanceof T) { return x; } else { return new T(); }\n" + "};"); [EOL] } <line_num>: 876,882
public void testInstanceOfReduction2() throws Exception { [EOL]     testTypes("/** @constructor */ var T = function() {};\n" + "/** @param {!T|string} x\n@return {string} */\n" + "var f = function(x) {\n" + "if (x instanceof T) { return ''; } else { return x; }\n" + "};"); [EOL] } <line_num>: 884,890
public void testUndeclaredGlobalProperty1() throws Exception { [EOL]     testTypes("/** @const */ var x = {}; x.y = null;" + "function f(a) { x.y = a; }" + "/** @param {string} a */ function g(a) { }" + "function h() { g(x.y); }"); [EOL] } <line_num>: 892,897
public void testUndeclaredGlobalProperty2() throws Exception { [EOL]     testTypes("/** @const */ var x = {}; x.y = null;" + "function f() { x.y = 3; }" + "/** @param {string} a */ function g(a) { }" + "function h() { g(x.y); }", "actual parameter 1 of g does not match formal parameter\n" + "found   : (null|number)\n" + "required: string"); [EOL] } <line_num>: 899,907
public void testLocallyInferredGlobalProperty1() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "/** @type {number} */ F.prototype.z;" + "/** @const */ var x = {}; /** @type {F} */ x.y;" + "function f() { x.y.z = 'abc'; }" + "/** @param {number} x */ function g(x) {}" + "function h() { g(x.y.z); }", "assignment to property z of F\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 909,921
public void testPropertyInferredPropagation() throws Exception { [EOL]     testTypes("/** @return {Object} */function f() { return {}; }\n" + "function g() { var x = f(); if (x.p) x.a = 'a'; else x.a = 'b'; }\n" + "function h() { var x = f(); x.a = false; }"); [EOL] } <line_num>: 923,927
public void testPropertyInference1() throws Exception { [EOL]     testTypes("/** @constructor */ function F() { this.x_ = true; }" + "/** @return {string} */" + "F.prototype.bar = function() { if (this.x_) return this.x_; };", "inconsistent return type\n" + "found   : boolean\n" + "required: string"); [EOL] } <line_num>: 929,937
public void testPropertyInference2() throws Exception { [EOL]     testTypes("/** @constructor */ function F() { this.x_ = true; }" + "F.prototype.baz = function() { this.x_ = null; };" + "/** @return {string} */" + "F.prototype.bar = function() { if (this.x_) return this.x_; };", "inconsistent return type\n" + "found   : boolean\n" + "required: string"); [EOL] } <line_num>: 939,948
public void testPropertyInference3() throws Exception { [EOL]     testTypes("/** @constructor */ function F() { this.x_ = true; }" + "F.prototype.baz = function() { this.x_ = 3; };" + "/** @return {string} */" + "F.prototype.bar = function() { if (this.x_) return this.x_; };", "inconsistent return type\n" + "found   : (boolean|number)\n" + "required: string"); [EOL] } <line_num>: 950,959
public void testPropertyInference4() throws Exception { [EOL]     testTypes("/** @constructor */ function F() { }" + "F.prototype.x_ = 3;" + "/** @return {string} */" + "F.prototype.bar = function() { if (this.x_) return this.x_; };", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 961,970
public void testPropertyInference5() throws Exception { [EOL]     testTypes("/** @constructor */ function F() { }" + "F.prototype.baz = function() { this.x_ = 3; };" + "/** @return {string} */" + "F.prototype.bar = function() { if (this.x_) return this.x_; };"); [EOL] } <line_num>: 972,978
public void testPropertyInference6() throws Exception { [EOL]     testTypes("/** @constructor */ function F() { }" + "(new F).x_ = 3;" + "/** @return {string} */" + "F.prototype.bar = function() { return this.x_; };"); [EOL] } <line_num>: 980,986
public void testPropertyInference7() throws Exception { [EOL]     testTypes("/** @constructor */ function F() { this.x_ = true; }" + "(new F).x_ = 3;" + "/** @return {string} */" + "F.prototype.bar = function() { return this.x_; };", "inconsistent return type\n" + "found   : boolean\n" + "required: string"); [EOL] } <line_num>: 988,997
public void testPropertyInference8() throws Exception { [EOL]     testTypes("/** @constructor */ function F() { " + "  /** @type {string} */ this.x_ = 'x';" + "}" + "(new F).x_ = 3;" + "/** @return {string} */" + "F.prototype.bar = function() { return this.x_; };", "assignment to property x_ of F\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 999,1010
public void testPropertyInference9() throws Exception { [EOL]     testTypes("/** @constructor */ function A() {}" + "/** @return {function(): ?} */ function f() { " + "  return function() {};" + "}" + "var g = f();" + "/** @type {number} */ g.prototype.bar_ = null;", "assignment\n" + "found   : null\n" + "required: number"); [EOL] } <line_num>: 1012,1023
public void testPropertyInference10() throws Exception { [EOL]     testTypes("/** @constructor */ function A() {}" + "/** @return {function(): ?} */ function f() { " + "  return function() {};" + "}" + "var g = f();" + "/** @type {number} */ g.prototype.bar_ = 1;" + "var h = f();" + "/** @type {string} */ h.prototype.bar_ = 1;", "assignment\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 1025,1042
public void testNoPersistentTypeInferenceForObjectProperties() throws Exception { [EOL]     testTypes("/** @param {Object} o\n@param {string} x */\n" + "function s1(o,x) { o.x = x; }\n" + "/** @param {Object} o\n@return {string} */\n" + "function g1(o) { return typeof o.x == 'undefined' ? '' : o.x; }\n" + "/** @param {Object} o\n@param {number} x */\n" + "function s2(o,x) { o.x = x; }\n" + "/** @param {Object} o\n@return {number} */\n" + "function g2(o) { return typeof o.x == 'undefined' ? 0 : o.x; }"); [EOL] } <line_num>: 1044,1054
public void testNoPersistentTypeInferenceForFunctionProperties() throws Exception { [EOL]     testTypes("/** @param {Function} o\n@param {string} x */\n" + "function s1(o,x) { o.x = x; }\n" + "/** @param {Function} o\n@return {string} */\n" + "function g1(o) { return typeof o.x == 'undefined' ? '' : o.x; }\n" + "/** @param {Function} o\n@param {number} x */\n" + "function s2(o,x) { o.x = x; }\n" + "/** @param {Function} o\n@return {number} */\n" + "function g2(o) { return typeof o.x == 'undefined' ? 0 : o.x; }"); [EOL] } <line_num>: 1056,1066
public void testObjectPropertyTypeInferredInLocalScope1() throws Exception { [EOL]     testTypes("/** @param {!Object} o\n@return {string} */\n" + "function f(o) { o.x = 1; return o.x; }", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 1068,1074
public void testObjectPropertyTypeInferredInLocalScope2() throws Exception { [EOL]     testTypes("/**@param {!Object} o\n@param {number?} x\n@return {string}*/" + "function f(o, x) { o.x = 'a';\nif (x) {o.x = x;}\nreturn o.x; }", "inconsistent return type\n" + "found   : (number|string)\n" + "required: string"); [EOL] } <line_num>: 1076,1082
public void testObjectPropertyTypeInferredInLocalScope3() throws Exception { [EOL]     testTypes("/**@param {!Object} o\n@param {number?} x\n@return {string}*/" + "function f(o, x) { if (x) {o.x = x;} else {o.x = 'a';}\nreturn o.x; }", "inconsistent return type\n" + "found   : (number|string)\n" + "required: string"); [EOL] } <line_num>: 1084,1090
public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty1() throws Exception { [EOL]     testTypes("/** @constructor */var T = function() { this.x = ''; };\n" + "/** @type {number} */ T.prototype.x = 0;", "assignment to property x of T\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 1092,1099
public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty2() throws Exception { [EOL]     testTypes("/** @constructor */var T = function() { this.x = ''; };\n" + "/** @type {number} */ T.prototype.x;", "assignment to property x of T\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 1101,1108
public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty3() throws Exception { [EOL]     testTypes("/** @type {Object} */ var n = {};\n" + "/** @constructor */ n.T = function() { this.x = ''; };\n" + "/** @type {number} */ n.T.prototype.x = 0;", "assignment to property x of n.T\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 1110,1118
public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty4() throws Exception { [EOL]     testTypes("var n = {};\n" + "/** @constructor */ n.T = function() { this.x = ''; };\n" + "/** @type {number} */ n.T.prototype.x = 0;", "assignment to property x of n.T\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 1120,1128
public void testPropertyUsedBeforeDefinition1() throws Exception { [EOL]     testTypes("/** @constructor */ var T = function() {};\n" + "/** @return {string} */" + "T.prototype.f = function() { return this.g(); };\n" + "/** @return {number} */ T.prototype.g = function() { return 1; };\n", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 1130,1138
public void testPropertyUsedBeforeDefinition2() throws Exception { [EOL]     testTypes("var n = {};\n" + "/** @constructor */ n.T = function() {};\n" + "/** @return {string} */" + "n.T.prototype.f = function() { return this.g(); };\n" + "/** @return {number} */ n.T.prototype.g = function() { return 1; };\n", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 1140,1149
public void testAdd1() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){var a = 'abc'+foo();}"); [EOL] } <line_num>: 1151,1153
public void testAdd2() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){var a = foo()+4;}"); [EOL] } <line_num>: 1155,1157
public void testAdd3() throws Exception { [EOL]     testTypes("/** @type {string} */ var a = 'a';" + "/** @type {string} */ var b = 'b';" + "/** @type {string} */ var c = a + b;"); [EOL] } <line_num>: 1159,1163
public void testAdd4() throws Exception { [EOL]     testTypes("/** @type {number} */ var a = 5;" + "/** @type {string} */ var b = 'b';" + "/** @type {string} */ var c = a + b;"); [EOL] } <line_num>: 1165,1169
public void testAdd5() throws Exception { [EOL]     testTypes("/** @type {string} */ var a = 'a';" + "/** @type {number} */ var b = 5;" + "/** @type {string} */ var c = a + b;"); [EOL] } <line_num>: 1171,1175
public void testAdd6() throws Exception { [EOL]     testTypes("/** @type {number} */ var a = 5;" + "/** @type {number} */ var b = 5;" + "/** @type {number} */ var c = a + b;"); [EOL] } <line_num>: 1177,1181
public void testAdd7() throws Exception { [EOL]     testTypes("/** @type {number} */ var a = 5;" + "/** @type {string} */ var b = 'b';" + "/** @type {number} */ var c = a + b;", "initializing variable\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 1183,1190
public void testAdd8() throws Exception { [EOL]     testTypes("/** @type {string} */ var a = 'a';" + "/** @type {number} */ var b = 5;" + "/** @type {number} */ var c = a + b;", "initializing variable\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 1192,1199
public void testAdd9() throws Exception { [EOL]     testTypes("/** @type {number} */ var a = 5;" + "/** @type {number} */ var b = 5;" + "/** @type {string} */ var c = a + b;", "initializing variable\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 1201,1208
public void testAdd10() throws Exception { [EOL]     testTypes(suppressMissingProperty("e", "f") + "/** @type {number} */ var a = 5;" + "/** @type {string} */ var c = a + d.e.f;"); [EOL] } <line_num>: 1210,1216
public void testAdd11() throws Exception { [EOL]     testTypes(suppressMissingProperty("e", "f") + "/** @type {number} */ var a = 5;" + "/** @type {number} */ var c = a + d.e.f;"); [EOL] } <line_num>: 1218,1224
public void testAdd12() throws Exception { [EOL]     testTypes("/** @return {(number,string)} */ function a() { return 5; }" + "/** @type {number} */ var b = 5;" + "/** @type {boolean} */ var c = a() + b;", "initializing variable\n" + "found   : (number|string)\n" + "required: boolean"); [EOL] } <line_num>: 1226,1233
public void testAdd13() throws Exception { [EOL]     testTypes("/** @type {number} */ var a = 5;" + "/** @return {(number,string)} */ function b() { return 5; }" + "/** @type {boolean} */ var c = a + b();", "initializing variable\n" + "found   : (number|string)\n" + "required: boolean"); [EOL] } <line_num>: 1235,1242
public void testAdd14() throws Exception { [EOL]     testTypes("/** @type {(null,string)} */ var a = null;" + "/** @type {number} */ var b = 5;" + "/** @type {boolean} */ var c = a + b;", "initializing variable\n" + "found   : (number|string)\n" + "required: boolean"); [EOL] } <line_num>: 1244,1251
public void testAdd15() throws Exception { [EOL]     testTypes("/** @type {number} */ var a = 5;" + "/** @return {(number,string)} */ function b() { return 5; }" + "/** @type {boolean} */ var c = a + b();", "initializing variable\n" + "found   : (number|string)\n" + "required: boolean"); [EOL] } <line_num>: 1253,1260
public void testAdd16() throws Exception { [EOL]     testTypes("/** @type {(undefined,string)} */ var a = undefined;" + "/** @type {number} */ var b = 5;" + "/** @type {boolean} */ var c = a + b;", "initializing variable\n" + "found   : (number|string)\n" + "required: boolean"); [EOL] } <line_num>: 1262,1269
public void testAdd17() throws Exception { [EOL]     testTypes("/** @type {number} */ var a = 5;" + "/** @type {(undefined,string)} */ var b = undefined;" + "/** @type {boolean} */ var c = a + b;", "initializing variable\n" + "found   : (number|string)\n" + "required: boolean"); [EOL] } <line_num>: 1271,1278
public void testAdd18() throws Exception { [EOL]     testTypes("function f() {};" + "/** @type {string} */ var a = 'a';" + "/** @type {number} */ var c = a + f();", "initializing variable\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 1280,1287
public void testAdd19() throws Exception { [EOL]     testTypes("/** @param {number} opt_x\n@param {number} opt_y\n" + "@return {number} */ function f(opt_x, opt_y) {" + "return opt_x + opt_y;}"); [EOL] } <line_num>: 1289,1293
public void testAdd20() throws Exception { [EOL]     testTypes("/** @param {!Number} opt_x\n@param {!Number} opt_y\n" + "@return {number} */ function f(opt_x, opt_y) {" + "return opt_x + opt_y;}"); [EOL] } <line_num>: 1295,1299
public void testAdd21() throws Exception { [EOL]     testTypes("/** @param {Number|Boolean} opt_x\n" + "@param {number|boolean} opt_y\n" + "@return {number} */ function f(opt_x, opt_y) {" + "return opt_x + opt_y;}"); [EOL] } <line_num>: 1301,1306
public void testNumericComparison1() throws Exception { [EOL]     testTypes("/**@param {number} a*/ function f(a) {return a < 3;}"); [EOL] } <line_num>: 1308,1310
public void testNumericComparison2() throws Exception { [EOL]     testTypes("/**@param {!Object} a*/ function f(a) {return a < 3;}", "left side of numeric comparison\n" + "found   : Object\n" + "required: number"); [EOL] } <line_num>: 1312,1317
public void testNumericComparison3() throws Exception { [EOL]     testTypes("/**@param {string} a*/ function f(a) {return a < 3;}"); [EOL] } <line_num>: 1319,1321
public void testNumericComparison4() throws Exception { [EOL]     testTypes("/**@param {(number,undefined)} a*/ " + "function f(a) {return a < 3;}"); [EOL] } <line_num>: 1323,1326
public void testNumericComparison5() throws Exception { [EOL]     testTypes("/**@param {*} a*/ function f(a) {return a < 3;}", "left side of numeric comparison\n" + "found   : *\n" + "required: number"); [EOL] } <line_num>: 1328,1333
public void testNumericComparison6() throws Exception { [EOL]     testTypes("/**@return {void} */ function foo() { if (3 >= foo()) return; }", "right side of numeric comparison\n" + "found   : undefined\n" + "required: number"); [EOL] } <line_num>: 1335,1340
public void testStringComparison1() throws Exception { [EOL]     testTypes("/**@param {string} a*/ function f(a) {return a < 'x';}"); [EOL] } <line_num>: 1342,1344
public void testStringComparison2() throws Exception { [EOL]     testTypes("/**@param {Object} a*/ function f(a) {return a < 'x';}"); [EOL] } <line_num>: 1346,1348
public void testStringComparison3() throws Exception { [EOL]     testTypes("/**@param {number} a*/ function f(a) {return a < 'x';}"); [EOL] } <line_num>: 1350,1352
public void testStringComparison4() throws Exception { [EOL]     testTypes("/**@param {string|undefined} a*/ " + "function f(a) {return a < 'x';}"); [EOL] } <line_num>: 1354,1357
public void testStringComparison5() throws Exception { [EOL]     testTypes("/**@param {*} a*/ " + "function f(a) {return a < 'x';}"); [EOL] } <line_num>: 1359,1362
public void testStringComparison6() throws Exception { [EOL]     testTypes("/**@return {void} */ " + "function foo() { if ('a' >= foo()) return; }", "right side of comparison\n" + "found   : undefined\n" + "required: string"); [EOL] } <line_num>: 1364,1370
public void testValueOfComparison1() throws Exception { [EOL]     testTypes("/** @constructor */function O() {};" + "/**@override*/O.prototype.valueOf = function() { return 1; };" + "/**@param {!O} a\n@param {!O} b*/ function f(a,b) { return a < b; }"); [EOL] } <line_num>: 1372,1376
public void testValueOfComparison2() throws Exception { [EOL]     testTypes("/** @constructor */function O() {};" + "/**@override*/O.prototype.valueOf = function() { return 1; };" + "/**@param {!O} a\n@param {number} b*/" + "function f(a,b) { return a < b; }"); [EOL] } <line_num>: 1378,1383
public void testValueOfComparison3() throws Exception { [EOL]     testTypes("/** @constructor */function O() {};" + "/**@override*/O.prototype.toString = function() { return 'o'; };" + "/**@param {!O} a\n@param {string} b*/" + "function f(a,b) { return a < b; }"); [EOL] } <line_num>: 1385,1390
public void testGenericRelationalExpression() throws Exception { [EOL]     testTypes("/**@param {*} a\n@param {*} b*/ " + "function f(a,b) {return a < b;}"); [EOL] } <line_num>: 1392,1395
public void testInstanceof1() throws Exception { [EOL]     testTypes("function foo(){" + "if (bar instanceof 3)return;}", "instanceof requires an object\n" + "found   : number\n" + "required: Object"); [EOL] } <line_num>: 1397,1403
public void testInstanceof2() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){" + "if (foo() instanceof Object)return;}", "deterministic instanceof yields false\n" + "found   : undefined\n" + "required: NoObject"); [EOL] } <line_num>: 1405,1411
public void testInstanceof3() throws Exception { [EOL]     testTypes("/**@return {*} */function foo(){" + "if (foo() instanceof Object)return;}"); [EOL] } <line_num>: 1413,1416
public void testInstanceof4() throws Exception { [EOL]     testTypes("/**@return {(Object|number)} */function foo(){" + "if (foo() instanceof Object)return 3;}"); [EOL] } <line_num>: 1418,1421
public void testInstanceof5() throws Exception { [EOL]     testTypes("/** @return {?} */ function foo(){" + "if (foo() instanceof Object)return;}"); [EOL] } <line_num>: 1423,1427
public void testInstanceof6() throws Exception { [EOL]     testTypes("/**@return {(Array|number)} */function foo(){" + "if (foo() instanceof Object)return 3;}"); [EOL] } <line_num>: 1429,1432
public void testInstanceOfReduction3() throws Exception { [EOL]     testTypes("/** \n" + " * @param {Object} x \n" + " * @param {Function} y \n" + " * @return {boolean} \n" + " */\n" + "var f = function(x, y) {\n" + "  return x instanceof y;\n" + "};"); [EOL] } <line_num>: 1434,1444
public void testScoping1() throws Exception { [EOL]     testTypes("/**@param {string} a*/function foo(a){" + "  /**@param {Array|string} a*/function bar(a){" + "    if (a instanceof Array)return;" + "  }" + "}"); [EOL] } <line_num>: 1446,1453
public void testScoping2() throws Exception { [EOL]     testTypes("/** @type number */ var a;" + "function Foo() {" + "  /** @type string */ var a;" + "}"); [EOL] } <line_num>: 1455,1461
public void testScoping3() throws Exception { [EOL]     testTypes("\n\n/** @type{Number}*/var b;\n/** @type{!String} */var b;", "variable b redefined with type String, original " + "definition at [testcode]:3 with type (Number|null)"); [EOL] } <line_num>: 1463,1467
public void testScoping4() throws Exception { [EOL]     testTypes("/** @type{Number}*/var b; if (true) /** @type{!String} */var b;", "variable b redefined with type String, original " + "definition at [testcode]:1 with type (Number|null)"); [EOL] } <line_num>: 1469,1473
public void testScoping5() throws Exception { [EOL]     testTypes("if (true) var b; var b;"); [EOL] } <line_num>: 1475,1479
public void testScoping6() throws Exception { [EOL]     testTypes("if (true) var b; if (true) var b;"); [EOL] } <line_num>: 1481,1485
public void testScoping7() throws Exception { [EOL]     testTypes("/** @constructor */function A() {" + "  /** @type !A */this.a = null;" + "}", "assignment to property a of A\n" + "found   : null\n" + "required: A"); [EOL] } <line_num>: 1487,1494
public void testScoping8() throws Exception { [EOL]     testTypes("/** @constructor */function A() {}" + "/** @constructor */function B() {" + "  /** @type !A */this.a = null;" + "}", "assignment to property a of B\n" + "found   : null\n" + "required: A"); [EOL] } <line_num>: 1496,1504
public void testScoping9() throws Exception { [EOL]     testTypes("/** @constructor */function B() {" + "  /** @type !A */this.a = null;" + "}" + "/** @constructor */function A() {}", "assignment to property a of B\n" + "found   : null\n" + "required: A"); [EOL] } <line_num>: 1506,1514
public void testScoping10() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("var a = function b(){};"); [EOL]     assertTrue(p.scope.isDeclared("a", false)); [EOL]     assertFalse(p.scope.isDeclared("b", false)); [EOL]     assertEquals("function (): undefined", p.scope.getVar("a").getType().toString()); [EOL] } <line_num>: 1516,1526
public void testScoping11() throws Exception { [EOL]     testTypes("/** @return {number} */var a = function b(){ return b };", "inconsistent return type\n" + "found   : function (): number\n" + "required: number"); [EOL] } <line_num>: 1528,1536
public void testScoping12() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "/** @type {number} */ F.prototype.bar = 3;" + "/** @param {!F} f */ function g(f) {" + "  /** @return {string} */" + "  function h() {" + "    return f.bar;" + "  }" + "}", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 1538,1551
public void testFunctionArguments1() throws Exception { [EOL]     testFunctionType("/** @param {number} a\n@return {string} */" + "function f(a) {}", "function (number): string"); [EOL] } <line_num>: 1553,1558
public void testFunctionArguments2() throws Exception { [EOL]     testFunctionType("/** @param {number} opt_a\n@return {string} */" + "function f(opt_a) {}", "function (number=): string"); [EOL] } <line_num>: 1560,1565
public void testFunctionArguments3() throws Exception { [EOL]     testFunctionType("/** @param {number} b\n@return {string} */" + "function f(a,b) {}", "function (?, number): string"); [EOL] } <line_num>: 1567,1572
public void testFunctionArguments4() throws Exception { [EOL]     testFunctionType("/** @param {number} opt_a\n@return {string} */" + "function f(a,opt_a) {}", "function (?, number=): string"); [EOL] } <line_num>: 1574,1579
public void testFunctionArguments5() throws Exception { [EOL]     testTypes("function a(opt_a,a) {}", "optional arguments must be at the end"); [EOL] } <line_num>: 1581,1585
public void testFunctionArguments6() throws Exception { [EOL]     testTypes("function a(var_args,a) {}", "variable length argument must be last"); [EOL] } <line_num>: 1587,1591
public void testFunctionArguments7() throws Exception { [EOL]     testTypes("/** @param {number} opt_a\n@return {string} */" + "function a(a,opt_a,var_args) {}"); [EOL] } <line_num>: 1593,1597
public void testFunctionArguments8() throws Exception { [EOL]     testTypes("function a(a,opt_a,var_args,b) {}", "variable length argument must be last"); [EOL] } <line_num>: 1599,1603
public void testFunctionArguments9() throws Exception { [EOL]     testTypes("function a(a,opt_a,var_args,b,c) {}", "variable length argument must be last"); [EOL] } <line_num>: 1605,1610
public void testFunctionArguments10() throws Exception { [EOL]     testTypes("function a(a,opt_a,b,c) {}", "optional arguments must be at the end"); [EOL] } <line_num>: 1612,1617
public void testFunctionArguments11() throws Exception { [EOL]     testTypes("function a(a,opt_a,b,c,var_args,d) {}", "optional arguments must be at the end"); [EOL] } <line_num>: 1619,1623
public void testFunctionArguments12() throws Exception { [EOL]     testTypes("/** @param foo {String} */function bar(baz){}", "parameter foo does not appear in bar's parameter list"); [EOL] } <line_num>: 1625,1628
public void testFunctionArguments13() throws Exception { [EOL]     testTypes("/** @return {boolean} */ function u() { return true; }" + "/** @param {boolean} b\n@return {?boolean} */" + "function f(b) { if (u()) { b = null; } return b; }", "assignment\n" + "found   : null\n" + "required: boolean"); [EOL] } <line_num>: 1630,1639
public void testFunctionArguments14() throws Exception { [EOL]     testTypes("/**\n" + " * @param {string} x\n" + " * @param {number} opt_y\n" + " * @param {boolean} var_args\n" + " */ function f(x, opt_y, var_args) {}" + "f('3'); f('3', 2); f('3', 2, true); f('3', 2, true, false);"); [EOL] } <line_num>: 1641,1649
public void testFunctionArguments15() throws Exception { [EOL]     testTypes("/** @param {?function(*)} f */" + "function g(f) { f(1, 2); }", "Function f: called with 2 argument(s). " + "Function requires at least 1 argument(s) " + "and no more than 1 argument(s)."); [EOL] } <line_num>: 1651,1658
public void testFunctionArguments16() throws Exception { [EOL]     testTypes("/** @param {...number} var_args */" + "function g(var_args) {} g(1, true);", "actual parameter 2 of g does not match formal parameter\n" + "found   : boolean\n" + "required: (number|undefined)"); [EOL] } <line_num>: 1660,1667
public void testFunctionArguments17() throws Exception { [EOL]     testClosureTypesMultipleWarnings("/** @param {booool|string} x */" + "function f(x) { g(x) }" + "/** @param {number} x */" + "function g(x) {}", Lists.newArrayList("Bad type annotation. Unknown type booool", "actual parameter 1 of g does not match formal parameter\n" + "found   : (booool|null|string)\n" + "required: number")); [EOL] } <line_num>: 1669,1680
public void testPrintFunctionName1() throws Exception { [EOL]     testTypes("var goog = {}; goog.run = function(f) {};" + "goog.run();", "Function goog.run: called with 0 argument(s). " + "Function requires at least 1 argument(s) " + "and no more than 1 argument(s)."); [EOL] } <line_num>: 1682,1690
public void testPrintFunctionName2() throws Exception { [EOL]     testTypes("/** @constructor */ var Foo = function() {}; " + "Foo.prototype.run = function(f) {};" + "(new Foo).run();", "Function Foo.prototype.run: called with 0 argument(s). " + "Function requires at least 1 argument(s) " + "and no more than 1 argument(s)."); [EOL] } <line_num>: 1692,1700
public void testFunctionInference1() throws Exception { [EOL]     testFunctionType("function f(a) {}", "function (?): undefined"); [EOL] } <line_num>: 1702,1706
public void testFunctionInference2() throws Exception { [EOL]     testFunctionType("function f(a,b) {}", "function (?, ?): undefined"); [EOL] } <line_num>: 1708,1712
public void testFunctionInference3() throws Exception { [EOL]     testFunctionType("function f(var_args) {}", "function (...[?]): undefined"); [EOL] } <line_num>: 1714,1718
public void testFunctionInference4() throws Exception { [EOL]     testFunctionType("function f(a,b,c,var_args) {}", "function (?, ?, ?, ...[?]): undefined"); [EOL] } <line_num>: 1720,1724
public void testFunctionInference5() throws Exception { [EOL]     testFunctionType("/** @this Date\n@return {string} */function f(a) {}", "function (this:Date, ?): string"); [EOL] } <line_num>: 1726,1730
public void testFunctionInference6() throws Exception { [EOL]     testFunctionType("/** @this Date\n@return {string} */function f(opt_a) {}", "function (this:Date, ?=): string"); [EOL] } <line_num>: 1732,1736
public void testFunctionInference7() throws Exception { [EOL]     testFunctionType("/** @this Date */function f(a,b,c,var_args) {}", "function (this:Date, ?, ?, ?, ...[?]): undefined"); [EOL] } <line_num>: 1738,1742
public void testFunctionInference8() throws Exception { [EOL]     testFunctionType("function f() {}", "function (): undefined"); [EOL] } <line_num>: 1744,1748
public void testFunctionInference9() throws Exception { [EOL]     testFunctionType("var f = function() {};", "function (): undefined"); [EOL] } <line_num>: 1750,1754
public void testFunctionInference10() throws Exception { [EOL]     testFunctionType("/** @this Date\n@param {boolean} b\n@return {string} */" + "var f = function(a,b) {};", "function (this:Date, ?, boolean): string"); [EOL] } <line_num>: 1756,1761
public void testFunctionInference11() throws Exception { [EOL]     testFunctionType("var goog = {};" + "/** @return {number}*/goog.f = function(){};", "goog.f", "function (): number"); [EOL] } <line_num>: 1763,1769
public void testFunctionInference12() throws Exception { [EOL]     testFunctionType("var goog = {};" + "goog.f = function(){};", "goog.f", "function (): undefined"); [EOL] } <line_num>: 1771,1777
public void testFunctionInference13() throws Exception { [EOL]     testFunctionType("var goog = {};" + "/** @constructor */ goog.Foo = function(){};" + "/** @param {!goog.Foo} f */function eatFoo(f){};", "eatFoo", "function (goog.Foo): undefined"); [EOL] } <line_num>: 1779,1786
public void testFunctionInference14() throws Exception { [EOL]     testFunctionType("var goog = {};" + "/** @constructor */ goog.Foo = function(){};" + "/** @return {!goog.Foo} */function eatFoo(){ return new goog.Foo; };", "eatFoo", "function (): goog.Foo"); [EOL] } <line_num>: 1788,1795
public void testFunctionInference15() throws Exception { [EOL]     testFunctionType("/** @constructor */ function f() {};" + "f.prototype.foo = function(){};", "f.prototype.foo", "function (this:f): undefined"); [EOL] } <line_num>: 1797,1803
public void testFunctionInference16() throws Exception { [EOL]     testFunctionType("/** @constructor */ function f() {};" + "f.prototype.foo = function(){};", "(new f).foo", "function (this:f): undefined"); [EOL] } <line_num>: 1805,1811
public void testFunctionInference17() throws Exception { [EOL]     testFunctionType("/** @constructor */ function f() {}" + "function abstractMethod() {}" + "/** @param {number} x */ f.prototype.foo = abstractMethod;", "(new f).foo", "function (this:f, number): ?"); [EOL] } <line_num>: 1813,1820
public void testFunctionInference18() throws Exception { [EOL]     testFunctionType("var goog = {};" + "/** @this {Date} */ goog.eatWithDate;", "goog.eatWithDate", "function (this:Date): ?"); [EOL] } <line_num>: 1822,1828
public void testFunctionInference19() throws Exception { [EOL]     testFunctionType("/** @param {string} x */ var f;", "f", "function (string): ?"); [EOL] } <line_num>: 1830,1835
public void testFunctionInference20() throws Exception { [EOL]     testFunctionType("/** @this {Date} */ var f;", "f", "function (this:Date): ?"); [EOL] } <line_num>: 1837,1842
public void testFunctionInference21() throws Exception { [EOL]     testTypes("var f = function() { throw 'x' };" + "/** @return {boolean} */ var g = f;"); [EOL]     testFunctionType("var f = function() { throw 'x' };", "f", "function (): ?"); [EOL] } <line_num>: 1844,1852
public void testFunctionInference22() throws Exception { [EOL]     testTypes("/** @type {!Function} */ var f = function() { g(this); };" + "/** @param {boolean} x */ var g = function(x) {};"); [EOL] } <line_num>: 1854,1858
public void testFunctionInference23() throws Exception { [EOL]     testTypes("/** @type {!Function} */ var f = function() {\n" + "  /** @type {number} */ this.prop = 3;\n" + "};" + "/**\n" + " * @param {Object} x\n" + " * @return {string}\n" + " */ var g = function(x) { return x.prop; };"); [EOL] } <line_num>: 1860,1870
public void testInnerFunction1() throws Exception { [EOL]     testTypes("function f() {" + " /** @type {number} */ var x = 3;\n" + " function g() { x = null; }" + " return x;" + "}", "assignment\n" + "found   : null\n" + "required: number"); [EOL] } <line_num>: 1872,1882
public void testInnerFunction2() throws Exception { [EOL]     testTypes("/** @return {number} */\n" + "function f() {" + " var x = null;\n" + " function g() { x = 3; }" + " g();" + " return x;" + "}", "inconsistent return type\n" + "found   : (null|number)\n" + "required: number"); [EOL] } <line_num>: 1884,1896
public void testInnerFunction3() throws Exception { [EOL]     testTypes("var x = null;" + "/** @return {number} */\n" + "function f() {" + " x = 3;\n" + " /** @return {number} */\n" + " function g() { x = true; return x; }" + " return x;" + "}", "inconsistent return type\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 1898,1911
public void testInnerFunction4() throws Exception { [EOL]     testTypes("var x = null;" + "/** @return {number} */\n" + "function f() {" + " x = '3';\n" + " /** @return {number} */\n" + " function g() { x = 3; return x; }" + " return x;" + "}", "inconsistent return type\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 1913,1926
public void testInnerFunction5() throws Exception { [EOL]     testTypes("/** @return {number} */\n" + "function f() {" + " var x = 3;\n" + " /** @return {number} */" + " function g() { var x = 3;x = true; return x; }" + " return x;" + "}", "inconsistent return type\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 1928,1940
public void testInnerFunction6() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "function f() {" + " var x = 0 || function() {};\n" + " function g() { if (goog.isFunction(x)) { x(1); } }" + " g();" + "}", "Function x: called with 1 argument(s). " + "Function requires at least 0 argument(s) " + "and no more than 0 argument(s)."); [EOL] } <line_num>: 1942,1953
public void testInnerFunction7() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "function f() {" + " /** @type {number|function()} */" + " var x = 0 || function() {};\n" + " function g() { if (goog.isFunction(x)) { x(1); } }" + " g();" + "}", "Function x: called with 1 argument(s). " + "Function requires at least 0 argument(s) " + "and no more than 0 argument(s)."); [EOL] } <line_num>: 1955,1967
public void testInnerFunction8() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "function f() {" + " function x() {};\n" + " function g() { if (goog.isFunction(x)) { x(1); } }" + " g();" + "}", "Function x: called with 1 argument(s). " + "Function requires at least 0 argument(s) " + "and no more than 0 argument(s)."); [EOL] } <line_num>: 1969,1980
public void testInnerFunction9() throws Exception { [EOL]     testTypes("function f() {" + " var x = 3;\n" + " function g() { x = null; };\n" + " function h() { return x == null; }" + " return h();" + "}"); [EOL] } <line_num>: 1982,1990
public void testInnerFunction10() throws Exception { [EOL]     testTypes("function f() {" + "  /** @type {?number} */ var x = null;" + "  /** @return {string} */" + "  function g() {" + "    if (!x) {" + "      x = 1;" + "    }" + "    return x;" + "  }" + "}", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 1992,2007
public void testInnerFunction11() throws Exception { [EOL]     testTypes("function f() {" + "  /** @type {?number} */ var x = null;" + "  /** @return {number} */" + "  function g() {" + "    x = 1;" + "    h();" + "    return x;" + "  }" + "  function h() {" + "    x = null;" + "  }" + "}"); [EOL] } <line_num>: 2009,2027
public void testAbstractMethodHandling1() throws Exception { [EOL]     testTypes("/** @type {Function} */ var abstractFn = function() {};" + "abstractFn(1);"); [EOL] } <line_num>: 2029,2033
public void testAbstractMethodHandling2() throws Exception { [EOL]     testTypes("var abstractFn = function() {};" + "abstractFn(1);", "Function abstractFn: called with 1 argument(s). " + "Function requires at least 0 argument(s) " + "and no more than 0 argument(s)."); [EOL] } <line_num>: 2035,2042
public void testAbstractMethodHandling3() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @type {Function} */ goog.abstractFn = function() {};" + "goog.abstractFn(1);"); [EOL] } <line_num>: 2044,2049
public void testAbstractMethodHandling4() throws Exception { [EOL]     testTypes("var goog = {};" + "goog.abstractFn = function() {};" + "goog.abstractFn(1);", "Function goog.abstractFn: called with 1 argument(s). " + "Function requires at least 0 argument(s) " + "and no more than 0 argument(s)."); [EOL] } <line_num>: 2051,2059
public void testAbstractMethodHandling5() throws Exception { [EOL]     testTypes("/** @type {!Function} */ var abstractFn = function() {};" + "/** @param {number} x */ var f = abstractFn;" + "f('x');", "actual parameter 1 of f does not match formal parameter\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 2061,2069
public void testAbstractMethodHandling6() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @type {Function} */ goog.abstractFn = function() {};" + "/** @param {number} x */ goog.f = abstractFn;" + "goog.f('x');", "actual parameter 1 of goog.f does not match formal parameter\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 2071,2080
public void testMethodInference1() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "/** @return {number} */ F.prototype.foo = function() { return 3; };" + "/** @constructor \n * @extends {F} */ " + "function G() {}" + "/** @override */ G.prototype.foo = function() { return true; };", "inconsistent return type\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 2082,2092
public void testMethodInference2() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor */ goog.F = function() {};" + "/** @return {number} */ goog.F.prototype.foo = " + "    function() { return 3; };" + "/** @constructor \n * @extends {goog.F} */ " + "goog.G = function() {};" + "/** @override */ goog.G.prototype.foo = function() { return true; };", "inconsistent return type\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 2094,2106
public void testMethodInference3() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "/** @param {boolean} x \n * @return {number} */ " + "F.prototype.foo = function(x) { return 3; };" + "/** @constructor \n * @extends {F} */ " + "function G() {}" + "/** @override */ " + "G.prototype.foo = function(x) { return x; };", "inconsistent return type\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 2108,2120
public void testMethodInference4() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "/** @param {boolean} x \n * @return {number} */ " + "F.prototype.foo = function(x) { return 3; };" + "/** @constructor \n * @extends {F} */ " + "function G() {}" + "/** @override */ " + "G.prototype.foo = function(y) { return y; };", "inconsistent return type\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 2122,2134
public void testMethodInference5() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "/** @param {number} x \n * @return {string} */ " + "F.prototype.foo = function(x) { return 'x'; };" + "/** @constructor \n * @extends {F} */ " + "function G() {}" + "/** @type {number} */ G.prototype.num = 3;" + "/** @override */ " + "G.prototype.foo = function(y) { return this.num + y; };", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 2136,2149
public void testMethodInference6() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "/** @param {number} x */ F.prototype.foo = function(x) { };" + "/** @constructor \n * @extends {F} */ " + "function G() {}" + "/** @override */ G.prototype.foo = function() { };" + "(new G()).foo(1);"); [EOL] } <line_num>: 2151,2159
public void testMethodInference7() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "F.prototype.foo = function() { };" + "/** @constructor \n * @extends {F} */ " + "function G() {}" + "/** @override */ G.prototype.foo = function(x, y) { };", "mismatch of the foo property type and the type of the property " + "it overrides from superclass F\n" + "original: function (this:F): undefined\n" + "override: function (this:G, ?, ?): undefined"); [EOL] } <line_num>: 2161,2172
public void testMethodInference8() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "F.prototype.foo = function() { };" + "/** @constructor \n * @extends {F} */ " + "function G() {}" + "/** @override */ " + "G.prototype.foo = function(opt_b, var_args) { };" + "(new G()).foo(1, 2, 3);"); [EOL] } <line_num>: 2174,2183
public void testMethodInference9() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "F.prototype.foo = function() { };" + "/** @constructor \n * @extends {F} */ " + "function G() {}" + "/** @override */ " + "G.prototype.foo = function(var_args, opt_b) { };", "variable length argument must be last"); [EOL] } <line_num>: 2185,2194
public void testStaticMethodDeclaration1() throws Exception { [EOL]     testTypes("/** @constructor */ function F() { F.foo(true); }" + "/** @param {number} x */ F.foo = function(x) {};", "actual parameter 1 of F.foo does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 2196,2203
public void testStaticMethodDeclaration2() throws Exception { [EOL]     testTypes("var goog = goog || {}; function f() { goog.foo(true); }" + "/** @param {number} x */ goog.foo = function(x) {};", "actual parameter 1 of goog.foo does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 2205,2212
public void testStaticMethodDeclaration3() throws Exception { [EOL]     testTypes("var goog = goog || {}; function f() { goog.foo(true); }" + "goog.foo = function() {};", "Function goog.foo: called with 1 argument(s). Function requires " + "at least 0 argument(s) and no more than 0 argument(s)."); [EOL] } <line_num>: 2214,2220
public void testDuplicateStaticMethodDecl1() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "/** @param {number} x */ goog.foo = function(x) {};" + "/** @param {number} x */ goog.foo = function(x) {};", "variable goog.foo redefined with type function (number): undefined, " + "original definition at [testcode]:1 " + "with type function (number): undefined"); [EOL] } <line_num>: 2222,2230
public void testDuplicateStaticMethodDecl2() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "/** @param {number} x */ goog.foo = function(x) {};" + "/** @param {number} x \n * @suppress {duplicate} */ " + "goog.foo = function(x) {};"); [EOL] } <line_num>: 2232,2238
public void testDuplicateStaticMethodDecl3() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "goog.foo = function(x) {};" + "goog.foo = function(x) {};"); [EOL] } <line_num>: 2240,2245
public void testDuplicateStaticMethodDecl4() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "/** @type {Function} */ goog.foo = function(x) {};" + "goog.foo = function(x) {};"); [EOL] } <line_num>: 2247,2252
public void testDuplicateStaticMethodDecl5() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "goog.foo = function(x) {};" + "/** @return {undefined} */ goog.foo = function(x) {};", "variable goog.foo redefined with type function (?): undefined, " + "original definition at [testcode]:1 with type " + "function (?): undefined"); [EOL] } <line_num>: 2254,2262
public void testDuplicateStaticPropertyDecl1() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "/** @type {Foo} */ goog.foo;" + "/** @type {Foo} */ goog.foo;" + "/** @constructor */ function Foo() {}"); [EOL] } <line_num>: 2264,2270
public void testDuplicateStaticPropertyDecl2() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "/** @type {Foo} */ goog.foo;" + "/** @type {Foo} \n * @suppress {duplicate} */ goog.foo;" + "/** @constructor */ function Foo() {}"); [EOL] } <line_num>: 2272,2278
public void testDuplicateStaticPropertyDecl3() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "/** @type {!Foo} */ goog.foo;" + "/** @type {string} */ goog.foo;" + "/** @constructor */ function Foo() {}", "variable goog.foo redefined with type string, " + "original definition at [testcode]:1 with type Foo"); [EOL] } <line_num>: 2280,2288
public void testDuplicateStaticPropertyDecl4() throws Exception { [EOL]     testClosureTypesMultipleWarnings("var goog = goog || {};" + "/** @type {!Foo} */ goog.foo;" + "/** @type {string} */ goog.foo = 'x';" + "/** @constructor */ function Foo() {}", Lists.newArrayList("assignment to property foo of goog\n" + "found   : string\n" + "required: Foo", "variable goog.foo redefined with type string, " + "original definition at [testcode]:1 with type Foo")); [EOL] } <line_num>: 2290,2302
public void testDuplicateStaticPropertyDecl5() throws Exception { [EOL]     testClosureTypesMultipleWarnings("var goog = goog || {};" + "/** @type {!Foo} */ goog.foo;" + "/** @type {string}\n * @suppress {duplicate} */ goog.foo = 'x';" + "/** @constructor */ function Foo() {}", Lists.newArrayList("assignment to property foo of goog\n" + "found   : string\n" + "required: Foo", "variable goog.foo redefined with type string, " + "original definition at [testcode]:1 with type Foo")); [EOL] } <line_num>: 2304,2316
public void testDuplicateStaticPropertyDecl6() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "/** @type {string} */ goog.foo = 'y';" + "/** @type {string}\n * @suppress {duplicate} */ goog.foo = 'x';"); [EOL] } <line_num>: 2318,2323
public void testDuplicateStaticPropertyDecl7() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "/** @param {string} x */ goog.foo;" + "/** @type {function(string)} */ goog.foo;"); [EOL] } <line_num>: 2325,2330
public void testDuplicateStaticPropertyDecl8() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "/** @return {EventCopy} */ goog.foo;" + "/** @constructor */ function EventCopy() {}" + "/** @return {EventCopy} */ goog.foo;"); [EOL] } <line_num>: 2332,2338
public void testDuplicateStaticPropertyDecl9() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "/** @return {EventCopy} */ goog.foo;" + "/** @return {EventCopy} */ goog.foo;" + "/** @constructor */ function EventCopy() {}"); [EOL] } <line_num>: 2340,2346
public void testDuplicateStaticPropertyDec20() throws Exception { [EOL]     testTypes("/**\n" + " * @fileoverview\n" + " * @suppress {duplicate}\n" + " */" + "var goog = goog || {};" + "/** @type {string} */ goog.foo = 'y';" + "/** @type {string} */ goog.foo = 'x';"); [EOL] } <line_num>: 2348,2357
public void testDuplicateLocalVarDecl() throws Exception { [EOL]     testClosureTypesMultipleWarnings("/** @param {number} x */\n" + "function f(x) { /** @type {string} */ var x = ''; }", Lists.newArrayList("variable x redefined with type string, original definition" + " at [testcode]:2 with type number", "initializing variable\n" + "found   : string\n" + "required: number")); [EOL] } <line_num>: 2359,2369
public void testDuplicateInstanceMethod1() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "F.prototype.bar = function() {};" + "F.prototype.bar = function() {};"); [EOL] } <line_num>: 2371,2378
public void testDuplicateInstanceMethod2() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "/** jsdoc */ F.prototype.bar = function() {};" + "/** jsdoc */ F.prototype.bar = function() {};", "variable F.prototype.bar redefined with type " + "function (this:F): undefined, original definition at " + "[testcode]:1 with type function (this:F): undefined"); [EOL] } <line_num>: 2380,2388
public void testDuplicateInstanceMethod3() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "F.prototype.bar = function() {};" + "/** jsdoc */ F.prototype.bar = function() {};", "variable F.prototype.bar redefined with type " + "function (this:F): undefined, original definition at " + "[testcode]:1 with type function (this:F): undefined"); [EOL] } <line_num>: 2390,2398
public void testDuplicateInstanceMethod4() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "/** jsdoc */ F.prototype.bar = function() {};" + "F.prototype.bar = function() {};"); [EOL] } <line_num>: 2400,2405
public void testDuplicateInstanceMethod5() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "/** jsdoc \n * @return {number} */ F.prototype.bar = function() {" + "  return 3;" + "};" + "/** jsdoc \n * @suppress {duplicate} */ " + "F.prototype.bar = function() { return ''; };", "inconsistent return type\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 2407,2418
public void testDuplicateInstanceMethod6() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "/** jsdoc \n * @return {number} */ F.prototype.bar = function() {" + "  return 3;" + "};" + "/** jsdoc \n * @return {string} * \n @suppress {duplicate} */ " + "F.prototype.bar = function() { return ''; };", "assignment to property bar of F.prototype\n" + "found   : function (this:F): string\n" + "required: function (this:F): number"); [EOL] } <line_num>: 2420,2431
public void testStubFunctionDeclaration1() throws Exception { [EOL]     testFunctionType("/** @constructor */ function f() {};" + "/** @param {number} x \n * @param {string} y \n" + "  * @return {number} */ f.prototype.foo;", "(new f).foo", "function (this:f, number, string): number"); [EOL] } <line_num>: 2433,2440
public void testStubFunctionDeclaration2() throws Exception { [EOL]     testExternFunctionType("/** @constructor */ function f() {};" + "/** @constructor \n * @extends {f} */ f.subclass;", "f.subclass", "function (new:f.subclass): ?"); [EOL] } <line_num>: 2442,2449
public void testStubFunctionDeclaration3() throws Exception { [EOL]     testFunctionType("/** @constructor */ function f() {};" + "/** @return {undefined} */ f.foo;", "f.foo", "function (): undefined"); [EOL] } <line_num>: 2451,2457
public void testStubFunctionDeclaration4() throws Exception { [EOL]     testFunctionType("/** @constructor */ function f() { " + "  /** @return {number} */ this.foo;" + "}", "(new f).foo", "function (this:f): number"); [EOL] } <line_num>: 2459,2466
public void testStubFunctionDeclaration5() throws Exception { [EOL]     testFunctionType("/** @constructor */ function f() { " + "  /** @type {Function} */ this.foo;" + "}", "(new f).foo", createNullableType(U2U_CONSTRUCTOR_TYPE).toString()); [EOL] } <line_num>: 2468,2475
public void testStubFunctionDeclaration6() throws Exception { [EOL]     testFunctionType("/** @constructor */ function f() {} " + "/** @type {Function} */ f.prototype.foo;", "(new f).foo", createNullableType(U2U_CONSTRUCTOR_TYPE).toString()); [EOL] } <line_num>: 2477,2483
public void testStubFunctionDeclaration7() throws Exception { [EOL]     testFunctionType("/** @constructor */ function f() {} " + "/** @type {Function} */ f.prototype.foo = function() {};", "(new f).foo", createNullableType(U2U_CONSTRUCTOR_TYPE).toString()); [EOL] } <line_num>: 2485,2491
public void testStubFunctionDeclaration8() throws Exception { [EOL]     testFunctionType("/** @type {Function} */ var f = function() {}; ", "f", createNullableType(U2U_CONSTRUCTOR_TYPE).toString()); [EOL] } <line_num>: 2493,2498
public void testStubFunctionDeclaration9() throws Exception { [EOL]     testFunctionType("/** @type {function():number} */ var f; ", "f", "function (): number"); [EOL] } <line_num>: 2500,2505
public void testStubFunctionDeclaration10() throws Exception { [EOL]     testFunctionType("/** @type {function(number):number} */ var f = function(x) {};", "f", "function (number): number"); [EOL] } <line_num>: 2507,2512
public void testNestedFunctionInference1() throws Exception { [EOL]     String nestedAssignOfFooAndBar = "/** @constructor */ function f() {};" + "f.prototype.foo = f.prototype.bar = function(){};"; [EOL]     testFunctionType(nestedAssignOfFooAndBar, "(new f).bar", "function (this:f): undefined"); [EOL] } <line_num>: 2514,2520
private void testFunctionType(String functionDef, String functionType) throws Exception { [EOL]     testFunctionType(functionDef, "f", functionType); [EOL] } <line_num>: 2526,2529
private void testFunctionType(String functionDef, String functionName, String functionType) throws Exception { [EOL]     testTypes(functionDef + "/** @type number */var a=" + functionName + ";", "initializing variable\n" + "found   : " + functionType + "\n" + "required: number"); [EOL] } <line_num>: 2535,2544
private void testExternFunctionType(String functionDef, String functionName, String functionType) throws Exception { [EOL]     testTypes(functionDef, "/** @type number */var a=" + functionName + ";", "initializing variable\n" + "found   : " + functionType + "\n" + "required: number", false); [EOL] } <line_num>: 2551,2559
public void testTypeRedefinition() throws Exception { [EOL]     testClosureTypesMultipleWarnings("a={};/**@enum {string}*/ a.A = {ZOR:'b'};" + "/** @constructor */ a.A = function() {}", Lists.newArrayList("variable a.A redefined with type function (new:a.A): undefined, " + "original definition at [testcode]:1 with type enum{a.A}", "assignment to property A of a\n" + "found   : function (new:a.A): undefined\n" + "required: enum{a.A}")); [EOL] } <line_num>: 2561,2570
public void testIn1() throws Exception { [EOL]     testTypes("'foo' in Object"); [EOL] } <line_num>: 2572,2574
public void testIn2() throws Exception { [EOL]     testTypes("3 in Object"); [EOL] } <line_num>: 2576,2578
public void testIn3() throws Exception { [EOL]     testTypes("undefined in Object"); [EOL] } <line_num>: 2580,2582
public void testIn4() throws Exception { [EOL]     testTypes("Date in Object", "left side of 'in'\n" + "found   : function (new:Date, ?=, ?=, ?=, ?=, ?=, ?=, ?=): string\n" + "required: string"); [EOL] } <line_num>: 2584,2589
public void testIn5() throws Exception { [EOL]     testTypes("'x' in null", "'in' requires an object\n" + "found   : null\n" + "required: Object"); [EOL] } <line_num>: 2591,2596
public void testIn6() throws Exception { [EOL]     testTypes("/** @param {number} x */" + "function g(x) {}" + "g(1 in {});", "actual parameter 1 of g does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 2598,2606
public void testIn7() throws Exception { [EOL]     testTypes("/**\n" + " * @param {number} x\n" + " * @return {number}\n" + " */\n" + "function g(x) { return 5; }" + "function f() {" + "  var x = {};" + "  x.foo = '3';" + "  return g(x.foo) in {};" + "}", "actual parameter 1 of g does not match formal parameter\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 2608,2624
public void testForIn1() throws Exception { [EOL]     testTypes("/** @param {boolean} x */ function f(x) {}" + "for (var k in {}) {" + "  f(k);" + "}", "actual parameter 1 of f does not match formal parameter\n" + "found   : string\n" + "required: boolean"); [EOL] } <line_num>: 2626,2635
public void testForIn2() throws Exception { [EOL]     testTypes("/** @param {boolean} x */ function f(x) {}" + "/** @enum {string} */ var E = {FOO: 'bar'};" + "/** @type {Object.<E, string>} */ var obj = {};" + "var k = null;" + "for (k in obj) {" + "  f(k);" + "}", "actual parameter 1 of f does not match formal parameter\n" + "found   : E.<string>\n" + "required: boolean"); [EOL] } <line_num>: 2637,2649
public void testForIn3() throws Exception { [EOL]     testTypes("/** @param {boolean} x */ function f(x) {}" + "/** @type {Object.<number>} */ var obj = {};" + "for (var k in obj) {" + "  f(obj[k]);" + "}", "actual parameter 1 of f does not match formal parameter\n" + "found   : number\n" + "required: boolean"); [EOL] } <line_num>: 2651,2661
public void testForIn4() throws Exception { [EOL]     testTypes("/** @param {boolean} x */ function f(x) {}" + "/** @enum {string} */ var E = {FOO: 'bar'};" + "/** @type {Object.<E, Array>} */ var obj = {};" + "for (var k in obj) {" + "  f(obj[k]);" + "}", "actual parameter 1 of f does not match formal parameter\n" + "found   : (Array|null)\n" + "required: boolean"); [EOL] } <line_num>: 2663,2674
public void testForIn5() throws Exception { [EOL]     testTypes("/** @param {boolean} x */ function f(x) {}" + "/** @constructor */ var E = function(){};" + "/** @type {Object.<E, number>} */ var obj = {};" + "for (var k in obj) {" + "  f(k);" + "}", "actual parameter 1 of f does not match formal parameter\n" + "found   : string\n" + "required: boolean"); [EOL] } <line_num>: 2676,2687
public void testComparison2() throws Exception { [EOL]     testTypes("/**@type number*/var a;" + "/**@type !Date */var b;" + "if (a!==b) {}", "condition always evaluates to true\n" + "left : number\n" + "right: Date"); [EOL] } <line_num>: 2699,2706
public void testComparison3() throws Exception { [EOL]     testTypes("/** @type {(Object,undefined)} */var a;" + "var b = a == null"); [EOL] } <line_num>: 2708,2712
public void testComparison4() throws Exception { [EOL]     testTypes("/** @type {(!Object,undefined)} */var a;" + "/** @type {!Object} */var b;" + "var c = a == b"); [EOL] } <line_num>: 2714,2718
public void testComparison5() throws Exception { [EOL]     testTypes("/** @type null */var a;" + "/** @type null */var b;" + "a == b", "condition always evaluates to true\n" + "left : null\n" + "right: null"); [EOL] } <line_num>: 2720,2727
public void testComparison6() throws Exception { [EOL]     testTypes("/** @type null */var a;" + "/** @type null */var b;" + "a != b", "condition always evaluates to false\n" + "left : null\n" + "right: null"); [EOL] } <line_num>: 2729,2736
public void testComparison7() throws Exception { [EOL]     testTypes("var a;" + "var b;" + "a == b", "condition always evaluates to true\n" + "left : undefined\n" + "right: undefined"); [EOL] } <line_num>: 2738,2745
public void testComparison8() throws Exception { [EOL]     testTypes("/** @type {Array.<string>} */ var a = [];" + "a[0] == null || a[1] == undefined"); [EOL] } <line_num>: 2747,2750
public void testComparison9() throws Exception { [EOL]     testTypes("/** @type {Array.<undefined>} */ var a = [];" + "a[0] == null", "condition always evaluates to true\n" + "left : undefined\n" + "right: null"); [EOL] } <line_num>: 2752,2758
public void testComparison10() throws Exception { [EOL]     testTypes("/** @type {Array.<undefined>} */ var a = [];" + "a[0] === null"); [EOL] } <line_num>: 2760,2763
public void testComparison11() throws Exception { [EOL]     testTypes("(function(){}) == 'x'", "condition always evaluates to false\n" + "left : function (): undefined\n" + "right: string"); [EOL] } <line_num>: 2765,2771
public void testComparison12() throws Exception { [EOL]     testTypes("(function(){}) == 3", "condition always evaluates to false\n" + "left : function (): undefined\n" + "right: number"); [EOL] } <line_num>: 2773,2779
public void testComparison13() throws Exception { [EOL]     testTypes("(function(){}) == false", "condition always evaluates to false\n" + "left : function (): undefined\n" + "right: boolean"); [EOL] } <line_num>: 2781,2787
public void testComparison14() throws Exception { [EOL]     testTypes("/** @type {function((Array|string), Object): number} */" + "function f(x, y) { return x === y; }", "inconsistent return type\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 2789,2795
public void testComparison15() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @constructor */ function F() {}" + "/**\n" + " * @param {number} x\n" + " * @constructor\n" + " * @extends {F}\n" + " */\n" + "function G(x) {}\n" + "goog.inherits(G, F);\n" + "/**\n" + " * @param {number} x\n" + " * @constructor\n" + " * @extends {G}\n" + " */\n" + "function H(x) {}\n" + "goog.inherits(H, G);\n" + "/** @param {G} x */" + "function f(x) { return x.constructor === H; }", null); [EOL] } <line_num>: 2797,2818
public void testDeleteOperator1() throws Exception { [EOL]     testTypes("var x = {};" + "/** @return {string} */ function f() { return delete x['a']; }", "inconsistent return type\n" + "found   : boolean\n" + "required: string"); [EOL] } <line_num>: 2820,2827
public void testDeleteOperator2() throws Exception { [EOL]     testTypes("var obj = {};" + "/** \n" + " * @param {string} x\n" + " * @return {Object} */ function f(x) { return obj; }" + "/** @param {?number} x */ function g(x) {" + "  if (x) { delete f(x)['a']; }" + "}", "actual parameter 1 of f does not match formal parameter\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 2829,2841
public void testEnumStaticMethod1() throws Exception { [EOL]     testTypes("/** @enum */ var Foo = {AAA: 1};" + "/** @param {number} x */ Foo.method = function(x) {};" + "Foo.method(true);", "actual parameter 1 of Foo.method does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 2843,2851
public void testEnumStaticMethod2() throws Exception { [EOL]     testTypes("/** @enum */ var Foo = {AAA: 1};" + "/** @param {number} x */ Foo.method = function(x) {};" + "function f() { Foo.method(true); }", "actual parameter 1 of Foo.method does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 2853,2861
public void testEnum1() throws Exception { [EOL]     testTypes("/**@enum*/var a={BB:1,CC:2};\n" + "/**@type {a}*/var d;d=a.BB;"); [EOL] } <line_num>: 2863,2866
public void testEnum2() throws Exception { [EOL]     testTypes("/**@enum*/var a={b:1}", "enum key b must be a syntactic constant"); [EOL] } <line_num>: 2868,2871
public void testEnum3() throws Exception { [EOL]     testTypes("/**@enum*/var a={BB:1,BB:2}", "variable a.BB redefined with type a.<number>, " + "original definition at [testcode]:1 with type a.<number>"); [EOL] } <line_num>: 2873,2877
public void testEnum4() throws Exception { [EOL]     testTypes("/**@enum*/var a={BB:'string'}", "assignment to property BB of enum{a}\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 2879,2884
public void testEnum5() throws Exception { [EOL]     testTypes("/**@enum {String}*/var a={BB:'string'}", "assignment to property BB of enum{a}\n" + "found   : string\n" + "required: (String|null)"); [EOL] } <line_num>: 2886,2891
public void testEnum6() throws Exception { [EOL]     testTypes("/**@enum*/var a={BB:1,CC:2};\n/**@type {!Array}*/var d;d=a.BB;", "assignment\n" + "found   : a.<number>\n" + "required: Array"); [EOL] } <line_num>: 2893,2898
public void testEnum7() throws Exception { [EOL]     testTypes("/** @enum */var a={AA:1,BB:2,CC:3};" + "/** @type a */var b=a.D;", "element D does not exist on this enum"); [EOL] } <line_num>: 2900,2904
public void testEnum8() throws Exception { [EOL]     testClosureTypesMultipleWarnings("/** @enum */var a=8;", Lists.newArrayList("enum initializer must be an object literal or an enum", "initializing variable\n" + "found   : number\n" + "required: enum{a}")); [EOL] } <line_num>: 2906,2913
public void testEnum9() throws Exception { [EOL]     testClosureTypesMultipleWarnings("var goog = {};" + "/** @enum */goog.a=8;", Lists.newArrayList("assignment to property a of goog\n" + "found   : number\n" + "required: enum{goog.a}", "enum initializer must be an object literal or an enum")); [EOL] } <line_num>: 2915,2924
public void testEnum10() throws Exception { [EOL]     testTypes("/** @enum {number} */" + "goog.K = { A : 3 };"); [EOL] } <line_num>: 2926,2930
public void testEnum11() throws Exception { [EOL]     testTypes("/** @enum {number} */" + "goog.K = { 502 : 3 };"); [EOL] } <line_num>: 2932,2936
public void testEnum12() throws Exception { [EOL]     testTypes("/** @enum {number} */ var a = {};" + "/** @enum */ var b = a;"); [EOL] } <line_num>: 2938,2942
public void testEnum13() throws Exception { [EOL]     testTypes("/** @enum {number} */ var a = {};" + "/** @enum {string} */ var b = a;", "incompatible enum element types\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 2944,2951
public void testEnum14() throws Exception { [EOL]     testTypes("/** @enum {number} */ var a = {FOO:5};" + "/** @enum */ var b = a;" + "var c = b.FOO;"); [EOL] } <line_num>: 2953,2958
public void testEnum15() throws Exception { [EOL]     testTypes("/** @enum {number} */ var a = {FOO:5};" + "/** @enum */ var b = a;" + "var c = b.BAR;", "element BAR does not exist on this enum"); [EOL] } <line_num>: 2960,2966
public void testEnum16() throws Exception { [EOL]     testTypes("var goog = {};" + "/**@enum*/goog .a={BB:1,BB:2}", "variable goog.a.BB redefined with type goog.a.<number>, " + "original definition at [testcode]:1 with type goog.a.<number>"); [EOL] } <line_num>: 2968,2973
public void testEnum17() throws Exception { [EOL]     testTypes("var goog = {};" + "/**@enum*/goog.a={BB:'string'}", "assignment to property BB of enum{goog.a}\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 2975,2981
public void testEnum18() throws Exception { [EOL]     testTypes("/**@enum*/ var E = {A: 1, B: 2};" + "/** @param {!E} x\n@return {number} */\n" + "var f = function(x) { return x; };"); [EOL] } <line_num>: 2983,2987
public void testEnum19() throws Exception { [EOL]     testTypes("/**@enum*/ var E = {A: 1, B: 2};" + "/** @param {number} x\n@return {!E} */\n" + "var f = function(x) { return x; };", "inconsistent return type\n" + "found   : number\n" + "required: E.<number>"); [EOL] } <line_num>: 2989,2996
public void testEnum20() throws Exception { [EOL]     testTypes("/**@enum*/ var E = {A: 1, B: 2}; var x = []; x[E.A] = 0;"); [EOL] } <line_num>: 2998,3000
public void testEnum21() throws Exception { [EOL]     Node n = parseAndTypeCheck("/** @enum {string} */ var E = {A : 'a', B : 'b'};\n" + "/** @param {!E} x\n@return {!E} */ function f(x) { return x; }"); [EOL]     Node nodeX = n.getLastChild().getLastChild().getLastChild().getLastChild(); [EOL]     JSType typeE = nodeX.getJSType(); [EOL]     assertFalse(typeE.isObject()); [EOL]     assertFalse(typeE.isNullable()); [EOL] } <line_num>: 3002,3010
public void testEnum22() throws Exception { [EOL]     testTypes("/**@enum*/ var E = {A: 1, B: 2};" + "/** @param {E} x \n* @return {number} */ function f(x) {return x}"); [EOL] } <line_num>: 3012,3015
public void testEnum23() throws Exception { [EOL]     testTypes("/**@enum*/ var E = {A: 1, B: 2};" + "/** @param {E} x \n* @return {string} */ function f(x) {return x}", "inconsistent return type\n" + "found   : E.<number>\n" + "required: string"); [EOL] } <line_num>: 3017,3023
public void testEnum24() throws Exception { [EOL]     testTypes("/**@enum {Object} */ var E = {A: {}};" + "/** @param {E} x \n* @return {!Object} */ function f(x) {return x}", "inconsistent return type\n" + "found   : E.<(Object|null)>\n" + "required: Object"); [EOL] } <line_num>: 3025,3031
public void testEnum25() throws Exception { [EOL]     testTypes("/**@enum {!Object} */ var E = {A: {}};" + "/** @param {E} x \n* @return {!Object} */ function f(x) {return x}"); [EOL] } <line_num>: 3033,3036
public void testEnum26() throws Exception { [EOL]     testTypes("var a = {}; /**@enum*/ a.B = {A: 1, B: 2};" + "/** @param {a.B} x \n* @return {number} */ function f(x) {return x}"); [EOL] } <line_num>: 3038,3041
public void testEnum27() throws Exception { [EOL]     testTypes("/** @enum */ var A = {B: 1, C: 2}; " + "function f(x) { return A == x; }"); [EOL] } <line_num>: 3043,3047
public void testEnum28() throws Exception { [EOL]     testTypes("/** @enum */ var A = {B: 1, C: 2}; " + "function f(x) { return A.B == x; }"); [EOL] } <line_num>: 3049,3053
public void testEnum29() throws Exception { [EOL]     testTypes("/** @enum */ var A = {B: 1, C: 2}; " + "/** @return {number} */ function f() { return A; }", "inconsistent return type\n" + "found   : enum{A}\n" + "required: number"); [EOL] } <line_num>: 3055,3061
public void testEnum30() throws Exception { [EOL]     testTypes("/** @enum */ var A = {B: 1, C: 2}; " + "/** @return {number} */ function f() { return A.B; }"); [EOL] } <line_num>: 3063,3066
public void testEnum31() throws Exception { [EOL]     testTypes("/** @enum */ var A = {B: 1, C: 2}; " + "/** @return {A} */ function f() { return A; }", "inconsistent return type\n" + "found   : enum{A}\n" + "required: A.<number>"); [EOL] } <line_num>: 3068,3074
public void testEnum32() throws Exception { [EOL]     testTypes("/** @enum */ var A = {B: 1, C: 2}; " + "/** @return {A} */ function f() { return A.B; }"); [EOL] } <line_num>: 3076,3079
public void testEnum34() throws Exception { [EOL]     testTypes("/** @enum */ var A = {B: 1, C: 2}; " + "/** @param {number} x */ function f(x) { return x == A.B; }"); [EOL] } <line_num>: 3081,3084
public void testEnum35() throws Exception { [EOL]     testTypes("var a = a || {}; /** @enum */ a.b = {C: 1, D: 2};" + "/** @return {a.b} */ function f() { return a.b.C; }"); [EOL] } <line_num>: 3086,3089
public void testEnum36() throws Exception { [EOL]     testTypes("var a = a || {}; /** @enum */ a.b = {C: 1, D: 2};" + "/** @return {!a.b} */ function f() { return 1; }", "inconsistent return type\n" + "found   : number\n" + "required: a.b.<number>"); [EOL] } <line_num>: 3091,3097
public void testEnum37() throws Exception { [EOL]     testTypes("var goog = goog || {};" + "/** @enum {number} */ goog.a = {};" + "/** @enum */ var b = goog.a;"); [EOL] } <line_num>: 3099,3104
public void testEnum38() throws Exception { [EOL]     testTypes("/** @enum {MyEnum} */ var MyEnum = {};" + "/** @param {MyEnum} x */ function f(x) {}", "Parse error. Cycle detected in inheritance chain " + "of type MyEnum"); [EOL] } <line_num>: 3106,3112
public void testEnum39() throws Exception { [EOL]     testTypes("/** @enum {Number} */ var MyEnum = {FOO: new Number(1)};" + "/** @param {MyEnum} x \n * @return {number} */" + "function f(x) { return x == MyEnum.FOO && MyEnum.FOO == x; }", "inconsistent return type\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 3114,3122
public void testEnum40() throws Exception { [EOL]     testTypes("/** @enum {Number} */ var MyEnum = {FOO: new Number(1)};" + "/** @param {number} x \n * @return {number} */" + "function f(x) { return x == MyEnum.FOO && MyEnum.FOO == x; }", "inconsistent return type\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 3124,3132
public void testEnum41() throws Exception { [EOL]     testTypes("/** @enum {number} */ var MyEnum = {/** @const */ FOO: 1};" + "/** @return {string} */" + "function f() { return MyEnum.FOO; }", "inconsistent return type\n" + "found   : MyEnum.<number>\n" + "required: string"); [EOL] } <line_num>: 3134,3142
public void testEnum42() throws Exception { [EOL]     testTypes("/** @param {number} x */ function f(x) {}" + "/** @enum {Object} */ var MyEnum = {FOO: {newProperty: 1, b: 2}};" + "f(MyEnum.FOO.newProperty);"); [EOL] } <line_num>: 3144,3149
public void testAliasedEnum1() throws Exception { [EOL]     testTypes("/** @enum */ var YourEnum = {FOO: 3};" + "/** @enum */ var MyEnum = YourEnum;" + "/** @param {MyEnum} x */ function f(x) {} f(MyEnum.FOO);"); [EOL] } <line_num>: 3151,3156
public void testAliasedEnum2() throws Exception { [EOL]     testTypes("/** @enum */ var YourEnum = {FOO: 3};" + "/** @enum */ var MyEnum = YourEnum;" + "/** @param {YourEnum} x */ function f(x) {} f(MyEnum.FOO);"); [EOL] } <line_num>: 3158,3163
public void testAliasedEnum3() throws Exception { [EOL]     testTypes("/** @enum */ var YourEnum = {FOO: 3};" + "/** @enum */ var MyEnum = YourEnum;" + "/** @param {MyEnum} x */ function f(x) {} f(YourEnum.FOO);"); [EOL] } <line_num>: 3165,3170
public void testAliasedEnum4() throws Exception { [EOL]     testTypes("/** @enum */ var YourEnum = {FOO: 3};" + "/** @enum */ var MyEnum = YourEnum;" + "/** @param {YourEnum} x */ function f(x) {} f(YourEnum.FOO);"); [EOL] } <line_num>: 3172,3177
public void testAliasedEnum5() throws Exception { [EOL]     testTypes("/** @enum */ var YourEnum = {FOO: 3};" + "/** @enum */ var MyEnum = YourEnum;" + "/** @param {string} x */ function f(x) {} f(MyEnum.FOO);", "actual parameter 1 of f does not match formal parameter\n" + "found   : YourEnum.<number>\n" + "required: string"); [EOL] } <line_num>: 3179,3187
public void testBackwardsEnumUse1() throws Exception { [EOL]     testTypes("/** @return {string} */ function f() { return MyEnum.FOO; }" + "/** @enum {string} */ var MyEnum = {FOO: 'x'};"); [EOL] } <line_num>: 3189,3193
public void testBackwardsEnumUse2() throws Exception { [EOL]     testTypes("/** @return {number} */ function f() { return MyEnum.FOO; }" + "/** @enum {string} */ var MyEnum = {FOO: 'x'};", "inconsistent return type\n" + "found   : MyEnum.<string>\n" + "required: number"); [EOL] } <line_num>: 3195,3202
public void testBackwardsEnumUse3() throws Exception { [EOL]     testTypes("/** @return {string} */ function f() { return MyEnum.FOO; }" + "/** @enum {string} */ var YourEnum = {FOO: 'x'};" + "/** @enum {string} */ var MyEnum = YourEnum;"); [EOL] } <line_num>: 3204,3209
public void testBackwardsEnumUse4() throws Exception { [EOL]     testTypes("/** @return {number} */ function f() { return MyEnum.FOO; }" + "/** @enum {string} */ var YourEnum = {FOO: 'x'};" + "/** @enum {string} */ var MyEnum = YourEnum;", "inconsistent return type\n" + "found   : YourEnum.<string>\n" + "required: number"); [EOL] } <line_num>: 3211,3219
public void testBackwardsEnumUse5() throws Exception { [EOL]     testTypes("/** @return {string} */ function f() { return MyEnum.BAR; }" + "/** @enum {string} */ var YourEnum = {FOO: 'x'};" + "/** @enum {string} */ var MyEnum = YourEnum;", "element BAR does not exist on this enum"); [EOL] } <line_num>: 3221,3227
public void testBackwardsTypedefUse2() throws Exception { [EOL]     testTypes("/** @this {MyTypedef} */ function f() {}" + "/** @typedef {!(Date|Array)} */ var MyTypedef;"); [EOL] } <line_num>: 3229,3233
public void testBackwardsTypedefUse4() throws Exception { [EOL]     testTypes("/** @return {MyTypedef} */ function f() { return null; }" + "/** @typedef {string} */ var MyTypedef;", "inconsistent return type\n" + "found   : null\n" + "required: string"); [EOL] } <line_num>: 3235,3242
public void testBackwardsTypedefUse6() throws Exception { [EOL]     testTypes("/** @return {goog.MyTypedef} */ function f() { return null; }" + "var goog = {};" + "/** @typedef {string} */ goog.MyTypedef;", "inconsistent return type\n" + "found   : null\n" + "required: string"); [EOL] } <line_num>: 3244,3252
public void testBackwardsTypedefUse7() throws Exception { [EOL]     testTypes("/** @return {goog.MyTypedef} */ function f() { return null; }" + "var goog = {};" + "/** @typedef {Object} */ goog.MyTypedef;"); [EOL] } <line_num>: 3254,3259
public void testBackwardsTypedefUse8() throws Exception { [EOL]     testTypes("/** @param {!Array} x */ function g(x) {}" + "/** @this {goog.MyTypedef} */ function f() { g(this); }" + "var goog = {};" + "/** @typedef {(Array|null|undefined)} */ goog.MyTypedef;"); [EOL] } <line_num>: 3261,3269
public void testBackwardsTypedefUse9() throws Exception { [EOL]     testTypes("/** @param {!Array} x */ function g(x) {}" + "/** @this {goog.MyTypedef} */ function f() { g(this); }" + "var goog = {};" + "/** @typedef {(Error|null|undefined)} */ goog.MyTypedef;", "actual parameter 1 of g does not match formal parameter\n" + "found   : Error\n" + "required: Array"); [EOL] } <line_num>: 3271,3280
public void testBackwardsTypedefUse10() throws Exception { [EOL]     testTypes("/** @param {goog.MyEnum} x */ function g(x) {}" + "var goog = {};" + "/** @enum {goog.MyTypedef} */ goog.MyEnum = {FOO: 1};" + "/** @typedef {number} */ goog.MyTypedef;" + "g(1);", "actual parameter 1 of g does not match formal parameter\n" + "found   : number\n" + "required: goog.MyEnum.<number>"); [EOL] } <line_num>: 3282,3292
public void testBackwardsConstructor1() throws Exception { [EOL]     testTypes("function f() { (new Foo(true)); }" + "/** \n * @constructor \n * @param {number} x */" + "var Foo = function(x) {};", "actual parameter 1 of Foo does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 3294,3302
public void testBackwardsConstructor2() throws Exception { [EOL]     testTypes("function f() { (new Foo(true)); }" + "/** \n * @constructor \n * @param {number} x */" + "var YourFoo = function(x) {};" + "/** \n * @constructor \n * @param {number} x */" + "var Foo = YourFoo;", "actual parameter 1 of Foo does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 3304,3314
public void testMinimalConstructorAnnotation() throws Exception { [EOL]     testTypes("/** @constructor */function Foo(){}"); [EOL] } <line_num>: 3316,3318
public void testGoodExtends1() throws Exception { [EOL]     testTypes("/** @constructor */function base() {}\n" + "/** @constructor\n * @extends {base} */function derived() {}\n"); [EOL] } <line_num>: 3320,3324
public void testGoodExtends2() throws Exception { [EOL]     testTypes("/** @constructor\n * @extends base */function derived() {}\n" + "/** @constructor */function base() {}\n"); [EOL] } <line_num>: 3326,3329
public void testGoodExtends3() throws Exception { [EOL]     testTypes("/** @constructor\n * @extends {Object} */function base() {}\n" + "/** @constructor\n * @extends {base} */function derived() {}\n"); [EOL] } <line_num>: 3331,3334
public void testGoodExtends4() throws Exception { [EOL]     Node n = parseAndTypeCheck("var goog = {};\n" + "/** @constructor */goog.Base = function(){};\n" + "/** @constructor\n" + "  * @extends {goog.Base} */goog.Derived = function(){};\n"); [EOL]     Node subTypeName = n.getLastChild().getLastChild().getFirstChild(); [EOL]     assertEquals("goog.Derived", subTypeName.getQualifiedName()); [EOL]     FunctionType subCtorType = (FunctionType) subTypeName.getNext().getJSType(); [EOL]     assertEquals("goog.Derived", subCtorType.getInstanceType().toString()); [EOL]     JSType superType = subCtorType.getPrototype().getImplicitPrototype(); [EOL]     assertEquals("goog.Base", superType.toString()); [EOL] } <line_num>: 3336,3354
public void testGoodExtends5() throws Exception { [EOL]     testTypes("/** @constructor */function base() {}\n" + "/** @extends {base}\n * @constructor */function derived() {}\n"); [EOL] } <line_num>: 3356,3360
public void testGoodExtends6() throws Exception { [EOL]     testFunctionType(CLOSURE_DEFS + "/** @constructor */function base() {}\n" + "/** @return {number} */ " + "  base.prototype.foo = function() { return 1; };\n" + "/** @extends {base}\n * @constructor */function derived() {}\n" + "goog.inherits(derived, base);", "derived.superClass_.foo", "function (this:base): number"); [EOL] } <line_num>: 3362,3372
public void testGoodExtends7() throws Exception { [EOL]     testFunctionType("Function.prototype.inherits = function(x) {};" + "/** @constructor */function base() {}\n" + "/** @extends {base}\n * @constructor */function derived() {}\n" + "derived.inherits(base);", "(new derived).constructor", "function (new:derived, ...[?]): ?"); [EOL] } <line_num>: 3374,3382
public void testGoodExtends8() throws Exception { [EOL]     testTypes("/** @constructor \n @extends {Base} */ function Sub() {}" + "/** @return {number} */ function f() { return (new Sub()).foo; }" + "/** @constructor */ function Base() {}" + "/** @type {boolean} */ Base.prototype.foo = true;", "inconsistent return type\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 3384,3392
public void testGoodExtends9() throws Exception { [EOL]     testTypes("/** @constructor */ function Super() {}" + "Super.prototype.foo = function() {};" + "/** @constructor \n * @extends {Super} */ function Sub() {}" + "Sub.prototype = new Super();" + "/** @override */ Sub.prototype.foo = function() {};"); [EOL] } <line_num>: 3394,3401
public void testGoodExtends10() throws Exception { [EOL]     testTypes("/** @constructor */ function Super() {}" + "/** @constructor \n * @extends {Super} */ function Sub() {}" + "Sub.prototype = new Super();" + "/** @return {Super} */ function foo() { return new Sub(); }"); [EOL] } <line_num>: 3403,3409
public void testGoodExtends11() throws Exception { [EOL]     testTypes("/** @constructor */ function Super() {}" + "/** @param {boolean} x */ Super.prototype.foo = function(x) {};" + "/** @constructor \n * @extends {Super} */ function Sub() {}" + "Sub.prototype = new Super();" + "(new Sub()).foo(0);", "actual parameter 1 of Super.prototype.foo " + "does not match formal parameter\n" + "found   : number\n" + "required: boolean"); [EOL] } <line_num>: 3411,3422
public void testGoodExtends12() throws Exception { [EOL]     testTypes("/** @constructor \n * @extends {Super} */ function Sub() {}" + "/** @constructor \n * @extends {Sub} */ function Sub2() {}" + "/** @constructor */ function Super() {}" + "/** @param {Super} x */ function foo(x) {}" + "foo(new Sub2());"); [EOL] } <line_num>: 3424,3431
public void testGoodExtends13() throws Exception { [EOL]     testTypes("/** @constructor \n * @extends {B}  */ function C() {}" + "/** @constructor \n * @extends {D}  */ function E() {}" + "/** @constructor \n * @extends {C}  */ function D() {}" + "/** @constructor \n * @extends {A} */ function B() {}" + "/** @constructor */ function A() {}" + "/** @param {number} x */ function f(x) {} f(new E());", "actual parameter 1 of f does not match formal parameter\n" + "found   : E\n" + "required: number"); [EOL] } <line_num>: 3433,3444
public void testGoodExtends14() throws Exception { [EOL]     testTypes(CLOSURE_DEFS + "/** @param {Function} f */ function g(f) {" + "  /** @constructor */ function NewType() {};" + "  goog.inherits(NewType, f);" + "  (new NewType());" + "}"); [EOL] } <line_num>: 3446,3454
public void testGoodExtends15() throws Exception { [EOL]     testTypes(CLOSURE_DEFS + "/** @constructor */ function OldType() {}" + "/** @param {?function(new:OldType)} f */ function g(f) {" + "  /**\n" + "    * @constructor\n" + "    * @extends {OldType}\n" + "    */\n" + "  function NewType() {};" + "  goog.inherits(NewType, f);" + "  NewType.prototype.method = function() {" + "    NewType.superClass_.foo.call(this);" + "  };" + "}", "Property foo never defined on OldType.prototype"); [EOL] } <line_num>: 3456,3472
public void testGoodExtends16() throws Exception { [EOL]     testTypes(CLOSURE_DEFS + "/** @param {Function} f */ function g(f) {" + "  /** @constructor */ function NewType() {};" + "  goog.inherits(f, NewType);" + "  (new NewType());" + "}"); [EOL] } <line_num>: 3474,3482
public void testGoodExtends17() throws Exception { [EOL]     testFunctionType("Function.prototype.inherits = function(x) {};" + "/** @constructor */function base() {}\n" + "/** @param {number} x */ base.prototype.bar = function(x) {};\n" + "/** @extends {base}\n * @constructor */function derived() {}\n" + "derived.inherits(base);", "(new derived).constructor.prototype.bar", "function (this:base, number): undefined"); [EOL] } <line_num>: 3484,3493
public void testBadExtends1() throws Exception { [EOL]     testTypes("/** @constructor */function base() {}\n" + "/** @constructor\n * @extends {not_base} */function derived() {}\n", "Bad type annotation. Unknown type not_base"); [EOL] } <line_num>: 3495,3499
public void testBadExtends2() throws Exception { [EOL]     testTypes("/** @constructor */function base() {\n" + "/** @type {!Number}*/\n" + "this.baseMember = new Number(4);\n" + "}\n" + "/** @constructor\n" + "  * @extends {base} */function derived() {}\n" + "/** @param {!String} x*/\n" + "function foo(x){ }\n" + "/** @type {!derived}*/var y;\n" + "foo(y.baseMember);\n", "actual parameter 1 of foo does not match formal parameter\n" + "found   : Number\n" + "required: String"); [EOL] } <line_num>: 3501,3515
public void testBadExtends3() throws Exception { [EOL]     testTypes("/** @extends {Object} */function base() {}", "@extends used without @constructor or @interface for base"); [EOL] } <line_num>: 3517,3520
public void testBadExtends4() throws Exception { [EOL]     testTypes("/** @constructor \n * @extends {bad} */ function Sub() {}" + "/** @constructor \n * @extends {Sub} */ function Sub2() {}" + "/** @param {Sub} x */ function foo(x) {}" + "foo(new Sub2());", "Bad type annotation. Unknown type bad"); [EOL] } <line_num>: 3522,3531
public void testLateExtends() throws Exception { [EOL]     testTypes(CLOSURE_DEFS + "/** @constructor */ function Foo() {}\n" + "Foo.prototype.foo = function() {};\n" + "/** @constructor */function Bar() {}\n" + "goog.inherits(Foo, Bar);\n", "Missing @extends tag on type Foo"); [EOL] } <line_num>: 3533,3541
public void testSuperclassMatch() throws Exception { [EOL]     compiler.getOptions().setCodingConvention(new GoogleCodingConvention()); [EOL]     testTypes("/** @constructor */ var Foo = function() {};\n" + "/** @constructor \n @extends Foo */ var Bar = function() {};\n" + "Bar.inherits = function(x){};" + "Bar.inherits(Foo);\n"); [EOL] } <line_num>: 3543,3549
public void testSuperclassMatchWithMixin() throws Exception { [EOL]     compiler.getOptions().setCodingConvention(new GoogleCodingConvention()); [EOL]     testTypes("/** @constructor */ var Foo = function() {};\n" + "/** @constructor */ var Baz = function() {};\n" + "/** @constructor \n @extends Foo */ var Bar = function() {};\n" + "Bar.inherits = function(x){};" + "Bar.mixin = function(y){};" + "Bar.inherits(Foo);\n" + "Bar.mixin(Baz);\n"); [EOL] } <line_num>: 3551,3560
public void testSuperclassMismatch1() throws Exception { [EOL]     compiler.getOptions().setCodingConvention(new GoogleCodingConvention()); [EOL]     testTypes("/** @constructor */ var Foo = function() {};\n" + "/** @constructor \n @extends Object */ var Bar = function() {};\n" + "Bar.inherits = function(x){};" + "Bar.inherits(Foo);\n", "Missing @extends tag on type Bar"); [EOL] } <line_num>: 3562,3569
public void testSuperclassMismatch2() throws Exception { [EOL]     compiler.getOptions().setCodingConvention(new GoogleCodingConvention()); [EOL]     testTypes("/** @constructor */ var Foo = function(){};\n" + "/** @constructor */ var Bar = function(){};\n" + "Bar.inherits = function(x){};" + "Bar.inherits(Foo);", "Missing @extends tag on type Bar"); [EOL] } <line_num>: 3571,3578
public void testSuperClassDefinedAfterSubClass1() throws Exception { [EOL]     testTypes("/** @constructor \n * @extends {Base} */ function A() {}" + "/** @constructor \n * @extends {Base} */ function B() {}" + "/** @constructor */ function Base() {}" + "/** @param {A|B} x \n * @return {B|A} */ " + "function foo(x) { return x; }"); [EOL] } <line_num>: 3580,3587
public void testSuperClassDefinedAfterSubClass2() throws Exception { [EOL]     testTypes("/** @constructor \n * @extends {Base} */ function A() {}" + "/** @constructor \n * @extends {Base} */ function B() {}" + "/** @param {A|B} x \n * @return {B|A} */ " + "function foo(x) { return x; }" + "/** @constructor */ function Base() {}"); [EOL] } <line_num>: 3589,3596
public void testDirectPrototypeAssignment1() throws Exception { [EOL]     testTypes("/** @constructor */ function Base() {}" + "Base.prototype.foo = 3;" + "/** @constructor \n * @extends {Base} */ function A() {}" + "A.prototype = new Base();" + "/** @return {string} */ function foo() { return (new A).foo; }", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 3598,3608
public void testDirectPrototypeAssignment2() throws Exception { [EOL]     testTypes("/** @constructor */ function Base() {}" + "/** @constructor \n * @extends {Base} */ function A() {}" + "A.prototype = new Base();" + "A.prototype.foo = 3;" + "/** @return {string} */ function foo() { return (new Base).foo; }"); [EOL] } <line_num>: 3610,3619
public void testDirectPrototypeAssignment3() throws Exception { [EOL]     testTypes("/** @constructor */ var MainWidgetCreator = function() {};" + "/** @param {Function} ctor */" + "function createMainWidget(ctor) {" + "  /** @constructor */ function tempCtor() {};" + "  tempCtor.prototype = ctor.prototype;" + "  MainWidgetCreator.superClass_ = ctor.prototype;" + "  MainWidgetCreator.prototype = new tempCtor();" + "}"); [EOL] } <line_num>: 3621,3633
public void testGoodImplements1() throws Exception { [EOL]     testTypes("/** @interface */function Disposable() {}\n" + "/** @implements {Disposable}\n * @constructor */function f() {}"); [EOL] } <line_num>: 3635,3638
public void testGoodImplements2() throws Exception { [EOL]     testTypes("/** @interface */function Base1() {}\n" + "/** @interface */function Base2() {}\n" + "/** @constructor\n" + " * @implements {Base1}\n" + " * @implements {Base2}\n" + " */ function derived() {}"); [EOL] } <line_num>: 3640,3647
public void testGoodImplements3() throws Exception { [EOL]     testTypes("/** @interface */function Disposable() {}\n" + "/** @constructor \n @implements {Disposable} */function f() {}"); [EOL] } <line_num>: 3649,3652
public void testGoodImplements4() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @type {!Function} */" + "goog.abstractMethod = function() {};" + "/** @interface */\n" + "goog.Disposable = goog.abstractMethod;" + "goog.Disposable.prototype.dispose = goog.abstractMethod;" + "/** @implements {goog.Disposable}\n * @constructor */" + "goog.SubDisposable = function() {};" + "/** @inheritDoc */ " + "goog.SubDisposable.prototype.dispose = function() {};"); [EOL] } <line_num>: 3654,3665
public void testGoodImplements5() throws Exception { [EOL]     testTypes("/** @interface */\n" + "goog.Disposable = function() {};" + "/** @type {Function} */" + "goog.Disposable.prototype.dispose = function() {};" + "/** @implements {goog.Disposable}\n * @constructor */" + "goog.SubDisposable = function() {};" + "/** @param {number} key \n @override */ " + "goog.SubDisposable.prototype.dispose = function(key) {};"); [EOL] } <line_num>: 3667,3677
public void testGoodImplements6() throws Exception { [EOL]     testTypes("var myNullFunction = function() {};" + "/** @interface */\n" + "goog.Disposable = function() {};" + "/** @return {number} */" + "goog.Disposable.prototype.dispose = myNullFunction;" + "/** @implements {goog.Disposable}\n * @constructor */" + "goog.SubDisposable = function() {};" + "/** @return {number} \n @override */ " + "goog.SubDisposable.prototype.dispose = function() { return 0; };"); [EOL] } <line_num>: 3679,3690
public void testGoodImplements7() throws Exception { [EOL]     testTypes("var myNullFunction = function() {};" + "/** @interface */\n" + "goog.Disposable = function() {};" + "/** @return {number} */" + "goog.Disposable.prototype.dispose = function() {};" + "/** @implements {goog.Disposable}\n * @constructor */" + "goog.SubDisposable = function() {};" + "/** @return {number} \n @override */ " + "goog.SubDisposable.prototype.dispose = function() { return 0; };"); [EOL] } <line_num>: 3692,3703
public void testBadImplements1() throws Exception { [EOL]     testTypes("/** @interface */function Base1() {}\n" + "/** @interface */function Base2() {}\n" + "/** @constructor\n" + " * @implements {nonExistent}\n" + " * @implements {Base2}\n" + " */ function derived() {}", "Bad type annotation. Unknown type nonExistent"); [EOL] } <line_num>: 3705,3713
public void testBadImplements2() throws Exception { [EOL]     testTypes("/** @interface */function Disposable() {}\n" + "/** @implements {Disposable}\n */function f() {}", "@implements used without @constructor for f"); [EOL] } <line_num>: 3715,3719
public void testBadImplements3() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @type {!Function} */ goog.abstractMethod = function(){};" + "/** @interface */ var Disposable = goog.abstractMethod;" + "Disposable.prototype.method = goog.abstractMethod;" + "/** @implements {Disposable}\n * @constructor */function f() {}", "property method on interface Disposable is not implemented by type f"); [EOL] } <line_num>: 3721,3729
public void testBadImplements4() throws Exception { [EOL]     testTypes("/** @interface */function Disposable() {}\n" + "/** @implements {Disposable}\n * @interface */function f() {}", "f cannot implement this type; an interface can only extend, " + "but not implement interfaces"); [EOL] } <line_num>: 3731,3736
public void testBadImplements5() throws Exception { [EOL]     testTypes("/** @interface */function Disposable() {}\n" + "/** @type {number} */ Disposable.prototype.bar = function() {};", "assignment to property bar of Disposable.prototype\n" + "found   : function (): undefined\n" + "required: number"); [EOL] } <line_num>: 3738,3744
public void testBadImplements6() throws Exception { [EOL]     testClosureTypesMultipleWarnings("/** @interface */function Disposable() {}\n" + "/** @type {function()} */ Disposable.prototype.bar = 3;", Lists.newArrayList("assignment to property bar of Disposable.prototype\n" + "found   : number\n" + "required: function (): ?", "interface members can only be empty property declarations, " + "empty functions, or goog.abstractMethod")); [EOL] } <line_num>: 3746,3756
public void testInterfaceExtends() throws Exception { [EOL]     testTypes("/** @interface */function A() {}\n" + "/** @interface \n * @extends {A} */function B() {}\n" + "/** @constructor\n" + " * @implements {B}\n" + " */ function derived() {}"); [EOL] } <line_num>: 3758,3764
public void testBadInterfaceExtends1() throws Exception { [EOL]     testTypes("/** @interface \n * @extends {nonExistent} */function A() {}", "Bad type annotation. Unknown type nonExistent"); [EOL] } <line_num>: 3766,3769
public void testBadInterfaceExtendsNonExistentInterfaces() throws Exception { [EOL]     String js = "/** @interface \n" + " * @extends {nonExistent1} \n" + " * @extends {nonExistent2} \n" + " */function A() {}"; [EOL]     String[] expectedWarnings = { "Bad type annotation. Unknown type nonExistent1", "Bad type annotation. Unknown type nonExistent2" }; [EOL]     testTypes(js, expectedWarnings); [EOL] } <line_num>: 3771,3781
public void testBadInterfaceExtends2() throws Exception { [EOL]     testTypes("/** @constructor */function A() {}\n" + "/** @interface \n * @extends {A} */function B() {}", "B cannot extend this type; interfaces can only extend interfaces"); [EOL] } <line_num>: 3783,3787
public void testBadInterfaceExtends3() throws Exception { [EOL]     testTypes("/** @interface */function A() {}\n" + "/** @constructor \n * @extends {A} */function B() {}", "B cannot extend this type; constructors can only extend constructors"); [EOL] } <line_num>: 3789,3793
public void testBadInterfaceExtends4() throws Exception { [EOL]     testTypes("/** @interface */function A() {}\n" + "/** @constructor */function B() {}\n" + "B.prototype = A;"); [EOL] } <line_num>: 3795,3802
public void testBadInterfaceExtends5() throws Exception { [EOL]     testTypes("/** @constructor */function A() {}\n" + "/** @interface */function B() {}\n" + "B.prototype = A;"); [EOL] } <line_num>: 3804,3811
public void testBadImplementsAConstructor() throws Exception { [EOL]     testTypes("/** @constructor */function A() {}\n" + "/** @constructor \n * @implements {A} */function B() {}", "can only implement interfaces"); [EOL] } <line_num>: 3813,3817
public void testBadImplementsNonInterfaceType() throws Exception { [EOL]     testTypes("/** @constructor \n * @implements {Boolean} */function B() {}", "can only implement interfaces"); [EOL] } <line_num>: 3819,3822
public void testBadImplementsNonObjectType() throws Exception { [EOL]     testTypes("/** @constructor \n * @implements {string} */function S() {}", "can only implement interfaces"); [EOL] } <line_num>: 3824,3827
public void testInterfaceAssignment1() throws Exception { [EOL]     testTypes("/** @interface */var I = function() {};\n" + "/** @constructor\n@implements {I} */var T = function() {};\n" + "var t = new T();\n" + "/** @type {!I} */var i = t;"); [EOL] } <line_num>: 3829,3834
public void testInterfaceAssignment2() throws Exception { [EOL]     testTypes("/** @interface */var I = function() {};\n" + "/** @constructor */var T = function() {};\n" + "var t = new T();\n" + "/** @type {!I} */var i = t;", "initializing variable\n" + "found   : T\n" + "required: I"); [EOL] } <line_num>: 3836,3844
public void testInterfaceAssignment3() throws Exception { [EOL]     testTypes("/** @interface */var I = function() {};\n" + "/** @constructor\n@implements {I} */var T = function() {};\n" + "var t = new T();\n" + "/** @type {I|number} */var i = t;"); [EOL] } <line_num>: 3846,3851
public void testInterfaceAssignment4() throws Exception { [EOL]     testTypes("/** @interface */var I1 = function() {};\n" + "/** @interface */var I2 = function() {};\n" + "/** @constructor\n@implements {I1} */var T = function() {};\n" + "var t = new T();\n" + "/** @type {I1|I2} */var i = t;"); [EOL] } <line_num>: 3853,3859
public void testInterfaceAssignment5() throws Exception { [EOL]     testTypes("/** @interface */var I1 = function() {};\n" + "/** @interface */var I2 = function() {};\n" + "/** @constructor\n@implements {I1}\n@implements {I2}*/" + "var T = function() {};\n" + "var t = new T();\n" + "/** @type {I1} */var i1 = t;\n" + "/** @type {I2} */var i2 = t;\n"); [EOL] } <line_num>: 3861,3869
public void testInterfaceAssignment6() throws Exception { [EOL]     testTypes("/** @interface */var I1 = function() {};\n" + "/** @interface */var I2 = function() {};\n" + "/** @constructor\n@implements {I1} */var T = function() {};\n" + "/** @type {!I1} */var i1 = new T();\n" + "/** @type {!I2} */var i2 = i1;\n", "initializing variable\n" + "found   : I1\n" + "required: I2"); [EOL] } <line_num>: 3871,3880
public void testInterfaceAssignment7() throws Exception { [EOL]     testTypes("/** @interface */var I1 = function() {};\n" + "/** @interface\n@extends {I1}*/var I2 = function() {};\n" + "/** @constructor\n@implements {I2}*/var T = function() {};\n" + "var t = new T();\n" + "/** @type {I1} */var i1 = t;\n" + "/** @type {I2} */var i2 = t;\n" + "i1 = i2;\n"); [EOL] } <line_num>: 3882,3890
public void testInterfaceAssignment8() throws Exception { [EOL]     testTypes("/** @interface */var I = function() {};\n" + "/** @type {I} */var i;\n" + "/** @type {Object} */var o = i;\n" + "new Object().prototype = i.prototype;"); [EOL] } <line_num>: 3892,3897
public void testInterfaceAssignment9() throws Exception { [EOL]     testTypes("/** @interface */var I = function() {};\n" + "/** @return {I?} */function f() { return null; }\n" + "/** @type {!I} */var i = f();\n", "initializing variable\n" + "found   : (I|null)\n" + "required: I"); [EOL] } <line_num>: 3899,3906
public void testInterfaceAssignment10() throws Exception { [EOL]     testTypes("/** @interface */var I1 = function() {};\n" + "/** @interface */var I2 = function() {};\n" + "/** @constructor\n@implements {I2} */var T = function() {};\n" + "/** @return {!I1|!I2} */function f() { return new T(); }\n" + "/** @type {!I1} */var i1 = f();\n", "initializing variable\n" + "found   : (I1|I2)\n" + "required: I1"); [EOL] } <line_num>: 3908,3917
public void testInterfaceAssignment11() throws Exception { [EOL]     testTypes("/** @interface */var I1 = function() {};\n" + "/** @interface */var I2 = function() {};\n" + "/** @constructor */var T = function() {};\n" + "/** @return {!I1|!I2|!T} */function f() { return new T(); }\n" + "/** @type {!I1} */var i1 = f();\n", "initializing variable\n" + "found   : (I1|I2|T)\n" + "required: I1"); [EOL] } <line_num>: 3919,3928
public void testInterfaceAssignment12() throws Exception { [EOL]     testTypes("/** @interface */var I = function() {};\n" + "/** @constructor\n@implements{I}*/var T1 = function() {};\n" + "/** @constructor\n@extends {T1}*/var T2 = function() {};\n" + "/** @return {I} */function f() { return new T2(); }"); [EOL] } <line_num>: 3930,3935
public void testInterfaceAssignment13() throws Exception { [EOL]     testTypes("/** @interface */var I = function() {};\n" + "/** @constructor\n@implements {I}*/var T = function() {};\n" + "/** @constructor */function Super() {};\n" + "/** @return {I} */Super.prototype.foo = " + "function() { return new T(); };\n" + "/** @constructor\n@extends {Super} */function Sub() {}\n" + "/** @override\n@return {T} */Sub.prototype.foo = " + "function() { return new T(); };\n"); [EOL] } <line_num>: 3937,3946
public void testGetprop1() throws Exception { [EOL]     testTypes("/** @return {void}*/function foo(){foo().bar;}", "No properties on this expression\n" + "found   : undefined\n" + "required: Object"); [EOL] } <line_num>: 3948,3953
public void testGetprop2() throws Exception { [EOL]     testTypes("var x = null; x.alert();", "No properties on this expression\n" + "found   : null\n" + "required: Object"); [EOL] } <line_num>: 3955,3960
public void testGetprop3() throws Exception { [EOL]     testTypes("/** @constructor */ " + "function Foo() { /** @type {?Object} */ this.x = null; }" + "Foo.prototype.initX = function() { this.x = {foo: 1}; };" + "Foo.prototype.bar = function() {" + "  if (this.x == null) { this.initX(); alert(this.x.foo); }" + "};"); [EOL] } <line_num>: 3962,3970
public void testGetprop4() throws Exception { [EOL]     testTypes("var x = null; x.prop = 3;", "No properties on this expression\n" + "found   : null\n" + "required: Object"); [EOL] } <line_num>: 3972,3977
public void testSetprop1() throws Exception { [EOL]     testTypes("/**\n" + " * @constructor\n" + " * @struct\n" + " */\n" + "function Foo() { this.x = 123; }"); [EOL] } <line_num>: 3979,3986
public void testSetprop2() throws Exception { [EOL]     testTypes("/**\n" + " * @constructor\n" + " * @struct\n" + " */\n" + "function Foo() {}\n" + "(new Foo()).x = 123;", "Cannot add a property to a struct instance " + "after it is constructed."); [EOL] } <line_num>: 3988,3998
public void testSetprop3() throws Exception { [EOL]     testTypes("/**\n" + " * @constructor\n" + " * @struct\n" + " */\n" + "function Foo() {}\n" + "(function() { (new Foo()).x = 123; })();", "Cannot add a property to a struct instance " + "after it is constructed."); [EOL] } <line_num>: 4000,4010
public void testSetprop4() throws Exception { [EOL]     testTypes("/**\n" + " * @constructor\n" + " * @struct\n" + " */\n" + "function Foo() { this.x = 123; }\n" + "(new Foo()).x = \"asdf\";"); [EOL] } <line_num>: 4012,4020
public void testSetprop5() throws Exception { [EOL]     testTypes("/**\n" + " * @constructor\n" + " * @struct\n" + " */\n" + "function Foo() {}\n" + "(true ? new Foo() : {}).x = 123;", "Cannot add a property to a struct instance " + "after it is constructed."); [EOL] } <line_num>: 4022,4032
public void testSetprop6() throws Exception { [EOL]     testTypes("/**\n" + " * @constructor\n" + " * @struct\n" + " */\n" + "function Foo() {}\n" + "/**\n" + " * @constructor\n" + " * @param{Foo} f\n" + " */\n" + "function Bar(f) { f.x = 123; }", "Cannot add a property to a struct instance " + "after it is constructed."); [EOL] } <line_num>: 4034,4048
public void testSetprop7() throws Exception { [EOL]     testTypes("/**\n" + " * @constructor\n" + " * @struct\n" + " */\n" + "function Foo() {\n" + "  var t = this;\n" + "  t.x = 123;\n" + "}", "Cannot add a property to a struct instance " + "after it is constructed."); [EOL] } <line_num>: 4050,4062
public void testSetprop8() throws Exception { [EOL]     testTypes("/**\n" + " * @constructor\n" + " * @struct\n" + " */\n" + "function Foo() {}\n" + "(new Foo()).x--;", new String[] { "Property x never defined on Foo", "Cannot add a property to a struct instance " + "after it is constructed." }); [EOL] } <line_num>: 4064,4077
public void testSetprop9() throws Exception { [EOL]     testTypes("/**\n" + " * @constructor\n" + " * @struct\n" + " */\n" + "function Foo() {}\n" + "(new Foo()).x += 123;", new String[] { "Property x never defined on Foo", "Cannot add a property to a struct instance " + "after it is constructed." }); [EOL] } <line_num>: 4079,4092
public void testSetprop10() throws Exception { [EOL]     testTypes("/** \n" + " * @constructor \n" + " * @struct \n" + " */ \n" + "function Square(side) { \n" + "  this.side = side; \n" + "} \n" + "Square.prototype = /** @struct */ {\n" + "  area: function() { return this.side * this.side; }\n" + "};\n" + "Square.prototype.id = function(x) { return x; };\n", "Cannot add a property to a struct instance " + "after it is constructed."); [EOL] } <line_num>: 4094,4109
public void testSetprop11() throws Exception { [EOL]     testTypes("/**\n" + " * @constructor\n" + " * @struct\n" + " */\n" + "function Foo() {}\n" + "function Bar() {}\n" + "Bar.prototype = new Foo();\n" + "Bar.prototype.someprop = 123;\n", "Cannot add a property to a struct instance " + "after it is constructed."); [EOL] } <line_num>: 4111,4122
public void testGetpropDict1() throws Exception { [EOL]     testTypes("/**\n" + " * @constructor\n" + " * @dict\n" + " */" + "function Dict1(){ this['prop'] = 123; }" + "/** @param{Dict1} x */" + "function takesDict(x) { return x.prop; }", "Cannot do '.' access on a dict"); [EOL] } <line_num>: 4124,4133
public void testGetpropDict2() throws Exception { [EOL]     testTypes("/**\n" + " * @constructor\n" + " * @dict\n" + " */" + "function Dict1(){ this['prop'] = 123; }" + "/**\n" + " * @constructor\n" + " * @extends {Dict1}\n" + " */" + "function Dict1kid(){ this['prop'] = 123; }" + "/** @param{Dict1kid} x */" + "function takesDict(x) { return x.prop; }", "Cannot do '.' access on a dict"); [EOL] } <line_num>: 4135,4149
public void testGetpropDict3() throws Exception { [EOL]     testTypes("/**\n" + " * @constructor\n" + " * @dict\n" + " */" + "function Dict1() { this['prop'] = 123; }" + "/** @constructor */" + "function NonDict() { this.prop = 321; }" + "/** @param{(NonDict|Dict1)} x */" + "function takesDict(x) { return x.prop; }", "Cannot do '.' access on a dict"); [EOL] } <line_num>: 4151,4162
public void testGetpropDict4() throws Exception { [EOL]     testTypes("/**\n" + " * @constructor\n" + " * @dict\n" + " */" + "function Dict1() { this['prop'] = 123; }" + "/**\n" + " * @constructor\n" + " * @struct\n" + " */" + "function Struct1() { this.prop = 123; }" + "/** @param{(Struct1|Dict1)} x */" + "function takesNothing(x) { return x.prop; }", "Cannot do '.' access on a dict"); [EOL] } <line_num>: 4164,4178
public void testGetpropDict5() throws Exception { [EOL]     testTypes("/**\n" + " * @constructor\n" + " * @dict\n" + " */" + "function Dict1(){ this.prop = 123; }", "Cannot do '.' access on a dict"); [EOL] } <line_num>: 4180,4187
public void testGetpropDict6() throws Exception { [EOL]     testTypes("/**\n" + " * @constructor\n" + " * @dict\n" + " */\n" + "function Foo() {}\n" + "function Bar() {}\n" + "Bar.prototype = new Foo();\n" + "Bar.prototype.someprop = 123;\n", "Cannot do '.' access on a dict"); [EOL] } <line_num>: 4189,4199
public void testGetpropDict7() throws Exception { [EOL]     testTypes("(/** @dict */ {'x': 123}).x = 321;", "Cannot do '.' access on a dict"); [EOL] } <line_num>: 4201,4204
public void testGetelemStruct1() throws Exception { [EOL]     testTypes("/**\n" + " * @constructor\n" + " * @struct\n" + " */" + "function Struct1(){ this.prop = 123; }" + "/** @param{Struct1} x */" + "function takesStruct(x) {" + "  var z = x;" + "  return z['prop'];" + "}", "Cannot do '[]' access on a struct"); [EOL] } <line_num>: 4206,4218
public void testGetelemStruct2() throws Exception { [EOL]     testTypes("/**\n" + " * @constructor\n" + " * @struct\n" + " */" + "function Struct1(){ this.prop = 123; }" + "/**\n" + " * @constructor\n" + " * @extends {Struct1}" + " */" + "function Struct1kid(){ this.prop = 123; }" + "/** @param{Struct1kid} x */" + "function takesStruct2(x) { return x['prop']; }", "Cannot do '[]' access on a struct"); [EOL] } <line_num>: 4220,4234
public void testGetelemStruct3() throws Exception { [EOL]     testTypes("/**\n" + " * @constructor\n" + " * @struct\n" + " */" + "function Struct1(){ this.prop = 123; }" + "/**\n" + " * @constructor\n" + " * @extends {Struct1}\n" + " */" + "function Struct1kid(){ this.prop = 123; }" + "var x = (new Struct1kid())['prop'];", "Cannot do '[]' access on a struct"); [EOL] } <line_num>: 4236,4249
public void testGetelemStruct4() throws Exception { [EOL]     testTypes("/**\n" + " * @constructor\n" + " * @struct\n" + " */" + "function Struct1() { this.prop = 123; }" + "/** @constructor */" + "function NonStruct() { this.prop = 321; }" + "/** @param{(NonStruct|Struct1)} x */" + "function takesStruct(x) { return x['prop']; }", "Cannot do '[]' access on a struct"); [EOL] } <line_num>: 4251,4262
public void testGetelemStruct5() throws Exception { [EOL]     testTypes("/**\n" + " * @constructor\n" + " * @struct\n" + " */" + "function Struct1() { this.prop = 123; }" + "/**\n" + " * @constructor\n" + " * @dict\n" + " */" + "function Dict1() { this['prop'] = 123; }" + "/** @param{(Struct1|Dict1)} x */" + "function takesNothing(x) { return x['prop']; }", "Cannot do '[]' access on a struct"); [EOL] } <line_num>: 4264,4278
public void testGetelemStruct6() throws Exception { [EOL]     testTypes("/** @interface */ function Foo(){}\n" + "/**\n" + " * @constructor\n" + " * @struct\n" + " * @implements {Foo}\n" + " */" + "function Bar(){ this.x = 123; }\n" + "var z = /** @type {Foo} */(new Bar)['x'];"); [EOL] } <line_num>: 4280,4290
public void testGetelemStruct7() throws Exception { [EOL]     testTypes("/**\n" + " * @constructor\n" + " * @struct\n" + " */\n" + "function Foo() {}\n" + "function Bar() {}\n" + "Bar.prototype = new Foo();\n" + "Bar.prototype['someprop'] = 123;\n", "Cannot do '[]' access on a struct"); [EOL] } <line_num>: 4292,4302
public void testInOnStruct() throws Exception { [EOL]     testTypes("/**\n" + " * @constructor\n" + " * @struct\n" + " */" + "function Foo() {}\n" + "if ('prop' in (new Foo())) {}", "Cannot use the IN operator with structs"); [EOL] } <line_num>: 4304,4312
public void testForinOnStruct() throws Exception { [EOL]     testTypes("/**\n" + " * @constructor\n" + " * @struct\n" + " */" + "function Foo() {}\n" + "for (var prop in (new Foo())) {}", "Cannot use the IN operator with structs"); [EOL] } <line_num>: 4314,4322
public void testArrayAccess1() throws Exception { [EOL]     testTypes("var a = []; var b = a['hi'];"); [EOL] } <line_num>: 4324,4326
public void testArrayAccess2() throws Exception { [EOL]     testTypes("var a = []; var b = a[[1,2]];", "array access\n" + "found   : Array\n" + "required: number"); [EOL] } <line_num>: 4328,4333
public void testArrayAccess3() throws Exception { [EOL]     testTypes("var bar = [];" + "/** @return {void} */function baz(){};" + "var foo = bar[baz()];", "array access\n" + "found   : undefined\n" + "required: number"); [EOL] } <line_num>: 4335,4342
public void testArrayAccess4() throws Exception { [EOL]     testTypes("/**@return {!Array}*/function foo(){};var bar = foo()[foo()];", "array access\n" + "found   : Array\n" + "required: number"); [EOL] } <line_num>: 4344,4349
public void testArrayAccess6() throws Exception { [EOL]     testTypes("var bar = null[1];", "only arrays or objects can be accessed\n" + "found   : null\n" + "required: Object"); [EOL] } <line_num>: 4351,4356
public void testArrayAccess7() throws Exception { [EOL]     testTypes("var bar = void 0; bar[0];", "only arrays or objects can be accessed\n" + "found   : undefined\n" + "required: Object"); [EOL] } <line_num>: 4358,4363
public void testArrayAccess8() throws Exception { [EOL]     testTypes("var bar = void 0; bar[0]; bar[1];", "only arrays or objects can be accessed\n" + "found   : undefined\n" + "required: Object"); [EOL] } <line_num>: 4365,4372
public void testArrayAccess9() throws Exception { [EOL]     testTypes("/** @return {?Array} */ function f() { return []; }" + "f()[{}]", "array access\n" + "found   : {}\n" + "required: number"); [EOL] } <line_num>: 4374,4380
public void testPropAccess() throws Exception { [EOL]     testTypes("/** @param {*} x */var f = function(x) {\n" + "var o = String(x);\n" + "if (typeof o['a'] != 'undefined') { return o['a']; }\n" + "return null;\n" + "};"); [EOL] } <line_num>: 4382,4388
public void testPropAccess2() throws Exception { [EOL]     testTypes("var bar = void 0; bar.baz;", "No properties on this expression\n" + "found   : undefined\n" + "required: Object"); [EOL] } <line_num>: 4390,4395
public void testPropAccess3() throws Exception { [EOL]     testTypes("var bar = void 0; bar.baz; bar.bax;", "No properties on this expression\n" + "found   : undefined\n" + "required: Object"); [EOL] } <line_num>: 4397,4404
public void testPropAccess4() throws Exception { [EOL]     testTypes("/** @param {*} x */ function f(x) { return x['hi']; }"); [EOL] } <line_num>: 4406,4408
public void testSwitchCase1() throws Exception { [EOL]     testTypes("/**@type number*/var a;" + "/**@type string*/var b;" + "switch(a){case b:;}", "case expression doesn't match switch\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 4410,4417
public void testSwitchCase2() throws Exception { [EOL]     testTypes("var a = null; switch (typeof a) { case 'foo': }"); [EOL] } <line_num>: 4419,4421
public void testVar1() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("/** @type {(string,null)} */var a = null"); [EOL]     assertTypeEquals(createUnionType(STRING_TYPE, NULL_TYPE), p.scope.getVar("a").getType()); [EOL] } <line_num>: 4423,4429
public void testVar2() throws Exception { [EOL]     testTypes("/** @type {Function} */ var a = function(){}"); [EOL] } <line_num>: 4431,4433
public void testVar3() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("var a = 3;"); [EOL]     assertTypeEquals(NUMBER_TYPE, p.scope.getVar("a").getType()); [EOL] } <line_num>: 4435,4439
public void testVar4() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("var a = 3; a = 'string';"); [EOL]     assertTypeEquals(createUnionType(STRING_TYPE, NUMBER_TYPE), p.scope.getVar("a").getType()); [EOL] } <line_num>: 4441,4447
public void testVar5() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @type string */goog.foo = 'hello';" + "/** @type number */var a = goog.foo;", "initializing variable\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 4449,4456
public void testVar6() throws Exception { [EOL]     testTypes("function f() {" + "  return function() {" + "    /** @type {!Date} */" + "    var a = 7;" + "  };" + "}", "initializing variable\n" + "found   : number\n" + "required: Date"); [EOL] } <line_num>: 4458,4469
public void testVar7() throws Exception { [EOL]     testTypes("/** @type number */var a, b;", "declaration of multiple variables with shared type information"); [EOL] } <line_num>: 4471,4474
public void testVar8() throws Exception { [EOL]     testTypes("var a, b;"); [EOL] } <line_num>: 4476,4478
public void testVar9() throws Exception { [EOL]     testTypes("/** @enum */var a;", "enum initializer must be an object literal or an enum"); [EOL] } <line_num>: 4480,4483
public void testVar10() throws Exception { [EOL]     testTypes("/** @type !Number */var foo = 'abc';", "initializing variable\n" + "found   : string\n" + "required: Number"); [EOL] } <line_num>: 4485,4490
public void testVar11() throws Exception { [EOL]     testTypes("var /** @type !Date */foo = 'abc';", "initializing variable\n" + "found   : string\n" + "required: Date"); [EOL] } <line_num>: 4492,4497
public void testVar12() throws Exception { [EOL]     testTypes("var /** @type !Date */foo = 'abc', " + "/** @type !RegExp */bar = 5;", new String[] { "initializing variable\n" + "found   : string\n" + "required: Date", "initializing variable\n" + "found   : number\n" + "required: RegExp" }); [EOL] } <line_num>: 4499,4509
public void testVar13() throws Exception { [EOL]     testTypes("var /** @type number */a,a;"); [EOL] } <line_num>: 4511,4514
public void testVar14() throws Exception { [EOL]     testTypes("/** @return {number} */ function f() { var x; return x; }", "inconsistent return type\n" + "found   : undefined\n" + "required: number"); [EOL] } <line_num>: 4516,4521
public void testVar15() throws Exception { [EOL]     testTypes("/** @return {number} */" + "function f() { var x = x || {}; return x; }", "inconsistent return type\n" + "found   : {}\n" + "required: number"); [EOL] } <line_num>: 4523,4529
public void testAssign1() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @type number */goog.foo = 'hello';", "assignment to property foo of goog\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 4531,4537
public void testAssign2() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @type number */goog.foo = 3;" + "goog.foo = 'hello';", "assignment to property foo of goog\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 4539,4546
public void testAssign3() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @type number */goog.foo = 3;" + "goog.foo = 4;"); [EOL] } <line_num>: 4548,4552
public void testAssign4() throws Exception { [EOL]     testTypes("var goog = {};" + "goog.foo = 3;" + "goog.foo = 'hello';"); [EOL] } <line_num>: 4554,4558
public void testAssignInference() throws Exception { [EOL]     testTypes("/**" + " * @param {Array} x" + " * @return {number}" + " */" + "function f(x) {" + "  var y = null;" + "  y = x[0];" + "  if (y == null) { return 4; } else { return 6; }" + "}"); [EOL] } <line_num>: 4560,4571
public void testOr1() throws Exception { [EOL]     testTypes("/** @type number */var a;" + "/** @type number */var b;" + "a + b || undefined;"); [EOL] } <line_num>: 4573,4577
public void testOr2() throws Exception { [EOL]     testTypes("/** @type number */var a;" + "/** @type number */var b;" + "/** @type number */var c = a + b || undefined;", "initializing variable\n" + "found   : (number|undefined)\n" + "required: number"); [EOL] } <line_num>: 4579,4586
public void testOr3() throws Exception { [EOL]     testTypes("/** @type {(number, undefined)} */var a;" + "/** @type number */var c = a || 3;"); [EOL] } <line_num>: 4588,4591
public void testOr4() throws Exception { [EOL]     testTypes("/**@type {number} */var x;x=null || \"a\";", "assignment\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 4598,4603
public void testOr5() throws Exception { [EOL]     testTypes("/**@type {number} */var x;x=undefined || \"a\";", "assignment\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 4608,4613
public void testAnd1() throws Exception { [EOL]     testTypes("/** @type number */var a;" + "/** @type number */var b;" + "a + b && undefined;"); [EOL] } <line_num>: 4615,4619
public void testAnd2() throws Exception { [EOL]     testTypes("/** @type number */var a;" + "/** @type number */var b;" + "/** @type number */var c = a + b && undefined;", "initializing variable\n" + "found   : (number|undefined)\n" + "required: number"); [EOL] } <line_num>: 4621,4628
public void testAnd3() throws Exception { [EOL]     testTypes("/** @type {(!Array, undefined)} */var a;" + "/** @type number */var c = a && undefined;", "initializing variable\n" + "found   : undefined\n" + "required: number"); [EOL] } <line_num>: 4630,4636
public void testAnd4() throws Exception { [EOL]     testTypes("/** @param {number} x */function f(x){};\n" + "/** @type null */var x; /** @type {number?} */var y;\n" + "if (x && y) { f(y) }"); [EOL] } <line_num>: 4638,4642
public void testAnd5() throws Exception { [EOL]     testTypes("/** @param {number} x\n@param {string} y*/function f(x,y){};\n" + "/** @type {number?} */var x; /** @type {string?} */var y;\n" + "if (x && y) { f(x, y) }"); [EOL] } <line_num>: 4644,4648
public void testAnd6() throws Exception { [EOL]     testTypes("/** @param {number} x */function f(x){};\n" + "/** @type {number|undefined} */var x;\n" + "if (x && f(x)) { f(x) }"); [EOL] } <line_num>: 4650,4654
public void testAnd7() throws Exception { [EOL]     testTypes("/** @type null */var x; if (x && x) {}"); [EOL] } <line_num>: 4656,4662
public void testHook() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){ var x=foo()?a:b; }"); [EOL] } <line_num>: 4664,4666
public void testHookRestrictsType1() throws Exception { [EOL]     testTypes("/** @return {(string,null)} */" + "function f() { return null;}" + "/** @type {(string,null)} */ var a = f();" + "/** @type string */" + "var b = a ? a : 'default';"); [EOL] } <line_num>: 4668,4674
public void testHookRestrictsType2() throws Exception { [EOL]     testTypes("/** @type {String} */" + "var a = null;" + "/** @type null */" + "var b = a ? null : a;"); [EOL] } <line_num>: 4676,4681
public void testHookRestrictsType3() throws Exception { [EOL]     testTypes("/** @type {String} */" + "var a;" + "/** @type null */" + "var b = (!a) ? a : null;"); [EOL] } <line_num>: 4683,4688
public void testHookRestrictsType4() throws Exception { [EOL]     testTypes("/** @type {(boolean,undefined)} */" + "var a;" + "/** @type boolean */" + "var b = a != null ? a : true;"); [EOL] } <line_num>: 4690,4695
public void testHookRestrictsType5() throws Exception { [EOL]     testTypes("/** @type {(boolean,undefined)} */" + "var a;" + "/** @type {(undefined)} */" + "var b = a == null ? a : undefined;"); [EOL] } <line_num>: 4697,4702
public void testHookRestrictsType6() throws Exception { [EOL]     testTypes("/** @type {(number,null,undefined)} */" + "var a;" + "/** @type {number} */" + "var b = a == null ? 5 : a;"); [EOL] } <line_num>: 4704,4709
public void testHookRestrictsType7() throws Exception { [EOL]     testTypes("/** @type {(number,null,undefined)} */" + "var a;" + "/** @type {number} */" + "var b = a == undefined ? 5 : a;"); [EOL] } <line_num>: 4711,4716
public void testWhileRestrictsType1() throws Exception { [EOL]     testTypes("/** @param {null} x */ function g(x) {}" + "/** @param {number?} x */\n" + "function f(x) {\n" + "while (x) {\n" + "if (g(x)) { x = 1; }\n" + "x = x-1;\n}\n}", "actual parameter 1 of g does not match formal parameter\n" + "found   : number\n" + "required: null"); [EOL] } <line_num>: 4718,4728
public void testWhileRestrictsType2() throws Exception { [EOL]     testTypes("/** @param {number?} x\n@return {number}*/\n" + "function f(x) {\n/** @type {number} */var y = 0;" + "while (x) {\n" + "y = x;\n" + "x = x-1;\n}\n" + "return y;}"); [EOL] } <line_num>: 4730,4737
public void testHigherOrderFunctions1() throws Exception { [EOL]     testTypes("/** @type {function(number)} */var f;" + "f(true);", "actual parameter 1 of f does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 4739,4746
public void testHigherOrderFunctions2() throws Exception { [EOL]     testTypes("/** @type {function():!Date} */var f;" + "/** @type boolean */var a = f();", "initializing variable\n" + "found   : Date\n" + "required: boolean"); [EOL] } <line_num>: 4748,4755
public void testHigherOrderFunctions3() throws Exception { [EOL]     testTypes("/** @type {function(this:Error):Date} */var f; new f", "cannot instantiate non-constructor"); [EOL] } <line_num>: 4757,4761
public void testHigherOrderFunctions4() throws Exception { [EOL]     testTypes("/** @type {function(this:Error,...[number]):Date} */var f; new f", "cannot instantiate non-constructor"); [EOL] } <line_num>: 4763,4767
public void testHigherOrderFunctions5() throws Exception { [EOL]     testTypes("/** @param {number} x */ function g(x) {}" + "/** @type {function(new:Error,...[number]):Date} */ var f;" + "g(new f());", "actual parameter 1 of g does not match formal parameter\n" + "found   : Error\n" + "required: number"); [EOL] } <line_num>: 4769,4777
public void testConstructorAlias1() throws Exception { [EOL]     testTypes("/** @constructor */ var Foo = function() {};" + "/** @type {number} */ Foo.prototype.bar = 3;" + "/** @constructor */ var FooAlias = Foo;" + "/** @return {string} */ function foo() { " + "  return (new FooAlias()).bar; }", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 4779,4789
public void testConstructorAlias2() throws Exception { [EOL]     testTypes("/** @constructor */ var Foo = function() {};" + "/** @constructor */ var FooAlias = Foo;" + "/** @type {number} */ FooAlias.prototype.bar = 3;" + "/** @return {string} */ function foo() { " + "  return (new Foo()).bar; }", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 4791,4801
public void testConstructorAlias3() throws Exception { [EOL]     testTypes("/** @constructor */ var Foo = function() {};" + "/** @type {number} */ Foo.prototype.bar = 3;" + "/** @constructor */ var FooAlias = Foo;" + "/** @return {string} */ function foo() { " + "  return (new FooAlias()).bar; }", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 4803,4813
public void testConstructorAlias4() throws Exception { [EOL]     testTypes("/** @constructor */ var Foo = function() {};" + "var FooAlias = Foo;" + "/** @type {number} */ FooAlias.prototype.bar = 3;" + "/** @return {string} */ function foo() { " + "  return (new Foo()).bar; }", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 4815,4825
public void testConstructorAlias5() throws Exception { [EOL]     testTypes("/** @constructor */ var Foo = function() {};" + "/** @constructor */ var FooAlias = Foo;" + "/** @return {FooAlias} */ function foo() { " + "  return new Foo(); }"); [EOL] } <line_num>: 4827,4833
public void testConstructorAlias6() throws Exception { [EOL]     testTypes("/** @constructor */ var Foo = function() {};" + "/** @constructor */ var FooAlias = Foo;" + "/** @return {Foo} */ function foo() { " + "  return new FooAlias(); }"); [EOL] } <line_num>: 4835,4841
public void testConstructorAlias7() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor */ goog.Foo = function() {};" + "/** @constructor */ goog.FooAlias = goog.Foo;" + "/** @return {number} */ function foo() { " + "  return new goog.FooAlias(); }", "inconsistent return type\n" + "found   : goog.Foo\n" + "required: number"); [EOL] } <line_num>: 4843,4853
public void testConstructorAlias8() throws Exception { [EOL]     testTypes("var goog = {};" + "/**\n * @param {number} x \n * @constructor */ " + "goog.Foo = function(x) {};" + "/**\n * @param {number} x \n * @constructor */ " + "goog.FooAlias = goog.Foo;" + "/** @return {number} */ function foo() { " + "  return new goog.FooAlias(1); }", "inconsistent return type\n" + "found   : goog.Foo\n" + "required: number"); [EOL] } <line_num>: 4855,4867
public void testConstructorAlias9() throws Exception { [EOL]     testTypes("var goog = {};" + "/**\n * @param {number} x \n * @constructor */ " + "goog.Foo = function(x) {};" + "/** @constructor */ goog.FooAlias = goog.Foo;" + "/** @return {number} */ function foo() { " + "  return new goog.FooAlias(1); }", "inconsistent return type\n" + "found   : goog.Foo\n" + "required: number"); [EOL] } <line_num>: 4869,4880
public void testConstructorAlias10() throws Exception { [EOL]     testTypes("/**\n * @param {number} x \n * @constructor */ " + "var Foo = function(x) {};" + "/** @constructor */ var FooAlias = Foo;" + "/** @return {number} */ function foo() { " + "  return new FooAlias(1); }", "inconsistent return type\n" + "found   : Foo\n" + "required: number"); [EOL] } <line_num>: 4882,4892
public void testClosure1() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @type {string|undefined} */var a;" + "/** @type string */" + "var b = goog.isDef(a) ? a : 'default';", null); [EOL] } <line_num>: 4894,4901
public void testClosure2() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @type {string?} */var a;" + "/** @type string */" + "var b = goog.isNull(a) ? 'default' : a;", null); [EOL] } <line_num>: 4903,4910
public void testClosure3() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @type {string|null|undefined} */var a;" + "/** @type string */" + "var b = goog.isDefAndNotNull(a) ? a : 'default';", null); [EOL] } <line_num>: 4912,4919
public void testClosure4() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @type {string|undefined} */var a;" + "/** @type string */" + "var b = !goog.isDef(a) ? 'default' : a;", null); [EOL] } <line_num>: 4921,4928
public void testClosure5() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @type {string?} */var a;" + "/** @type string */" + "var b = !goog.isNull(a) ? a : 'default';", null); [EOL] } <line_num>: 4930,4937
public void testClosure6() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @type {string|null|undefined} */var a;" + "/** @type string */" + "var b = !goog.isDefAndNotNull(a) ? 'default' : a;", null); [EOL] } <line_num>: 4939,4946
public void testClosure7() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @type {string|null|undefined} */ var a = foo();" + "/** @type {number} */" + "var b = goog.asserts.assert(a);", "initializing variable\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 4948,4957
public void testReturn1() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){ return 3; }", "inconsistent return type\n" + "found   : number\n" + "required: undefined"); [EOL] } <line_num>: 4959,4964
public void testReturn2() throws Exception { [EOL]     testTypes("/**@return {!Number}*/function foo(){ return; }", "inconsistent return type\n" + "found   : undefined\n" + "required: Number"); [EOL] } <line_num>: 4966,4971
public void testReturn3() throws Exception { [EOL]     testTypes("/**@return {!Number}*/function foo(){ return 'abc'; }", "inconsistent return type\n" + "found   : string\n" + "required: Number"); [EOL] } <line_num>: 4973,4978
public void testReturn4() throws Exception { [EOL]     testTypes("/**@return {!Number}\n*/\n function a(){return new Array();}", "inconsistent return type\n" + "found   : Array\n" + "required: Number"); [EOL] } <line_num>: 4980,4985
public void testReturn5() throws Exception { [EOL]     testTypes("/** @param {number} n\n" + "@constructor */function n(n){return};"); [EOL] } <line_num>: 4987,4990
public void testReturn6() throws Exception { [EOL]     testTypes("/** @param {number} opt_a\n@return {string} */" + "function a(opt_a) { return opt_a }", "inconsistent return type\n" + "found   : (number|undefined)\n" + "required: string"); [EOL] } <line_num>: 4992,4999
public void testReturn7() throws Exception { [EOL]     testTypes("/** @constructor */var A = function() {};\n" + "/** @constructor */var B = function() {};\n" + "/** @return {!B} */A.f = function() { return 1; };", "inconsistent return type\n" + "found   : number\n" + "required: B"); [EOL] } <line_num>: 5001,5008
public void testReturn8() throws Exception { [EOL]     testTypes("/** @constructor */var A = function() {};\n" + "/** @constructor */var B = function() {};\n" + "/** @return {!B} */A.prototype.f = function() { return 1; };", "inconsistent return type\n" + "found   : number\n" + "required: B"); [EOL] } <line_num>: 5010,5017
public void testInferredReturn1() throws Exception { [EOL]     testTypes("function f() {} /** @param {number} x */ function g(x) {}" + "g(f());", "actual parameter 1 of g does not match formal parameter\n" + "found   : undefined\n" + "required: number"); [EOL] } <line_num>: 5019,5026
public void testInferredReturn2() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "Foo.prototype.bar = function() {}; " + "/** @param {number} x */ function g(x) {}" + "g((new Foo()).bar());", "actual parameter 1 of g does not match formal parameter\n" + "found   : undefined\n" + "required: number"); [EOL] } <line_num>: 5028,5037
public void testInferredReturn3() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "Foo.prototype.bar = function() {}; " + "/** @constructor \n * @extends {Foo} */ function SubFoo() {}" + "/** @return {number} \n * @override  */ " + "SubFoo.prototype.bar = function() { return 3; }; ", "mismatch of the bar property type and the type of the property " + "it overrides from superclass Foo\n" + "original: function (this:Foo): undefined\n" + "override: function (this:SubFoo): number"); [EOL] } <line_num>: 5039,5050
public void testInferredReturn4() throws Exception { [EOL]     testTypes("var x = function() {};" + "x = /** @type {function(): number} */ (function() { return 3; });", "assignment\n" + "found   : function (): number\n" + "required: function (): undefined"); [EOL] } <line_num>: 5052,5062
public void testInferredReturn5() throws Exception { [EOL]     testTypes("/** @return {string} */" + "function f() {" + "  var x = function() {};" + "  x = /** @type {function(): number} */ (function() { return 3; });" + "  return x();" + "}", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 5064,5076
public void testInferredReturn6() throws Exception { [EOL]     testTypes("/** @return {string} */" + "function f() {" + "  var x = function() {};" + "  if (f()) " + "    x = /** @type {function(): number} */ " + "        (function() { return 3; });" + "  return x();" + "}", "inconsistent return type\n" + "found   : (number|undefined)\n" + "required: string"); [EOL] } <line_num>: 5078,5091
public void testInferredReturn7() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "/** @param {number} x */ Foo.prototype.bar = function(x) {};" + "Foo.prototype.bar = function(x) { return 3; };", "inconsistent return type\n" + "found   : number\n" + "required: undefined"); [EOL] } <line_num>: 5093,5101
public void testInferredReturn8() throws Exception { [EOL]     reportMissingOverrides = CheckLevel.OFF; [EOL]     testTypes("/** @constructor */ function Foo() {}" + "/** @param {number} x */ Foo.prototype.bar = function(x) {};" + "/** @constructor \n * @extends {Foo} */ function SubFoo() {}" + "/** @param {number} x */ SubFoo.prototype.bar = " + "    function(x) { return 3; }", "inconsistent return type\n" + "found   : number\n" + "required: undefined"); [EOL] } <line_num>: 5103,5114
public void testInferredParam1() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "/** @param {number} x */ Foo.prototype.bar = function(x) {};" + "/** @param {string} x */ function f(x) {}" + "Foo.prototype.bar = function(y) { f(y); };", "actual parameter 1 of f does not match formal parameter\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 5116,5125
public void testInferredParam2() throws Exception { [EOL]     reportMissingOverrides = CheckLevel.OFF; [EOL]     testTypes("/** @param {string} x */ function f(x) {}" + "/** @constructor */ function Foo() {}" + "/** @param {number} x */ Foo.prototype.bar = function(x) {};" + "/** @constructor \n * @extends {Foo} */ function SubFoo() {}" + "/** @return {void} */ SubFoo.prototype.bar = " + "    function(x) { f(x); }", "actual parameter 1 of f does not match formal parameter\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 5127,5139
public void testInferredParam3() throws Exception { [EOL]     reportMissingOverrides = CheckLevel.OFF; [EOL]     testTypes("/** @param {string} x */ function f(x) {}" + "/** @constructor */ function Foo() {}" + "/** @param {number=} x */ Foo.prototype.bar = function(x) {};" + "/** @constructor \n * @extends {Foo} */ function SubFoo() {}" + "/** @return {void} */ SubFoo.prototype.bar = " + "    function(x) { f(x); }; (new SubFoo()).bar();", "actual parameter 1 of f does not match formal parameter\n" + "found   : (number|undefined)\n" + "required: string"); [EOL] } <line_num>: 5141,5153
public void testInferredParam4() throws Exception { [EOL]     reportMissingOverrides = CheckLevel.OFF; [EOL]     testTypes("/** @param {string} x */ function f(x) {}" + "/** @constructor */ function Foo() {}" + "/** @param {...number} x */ Foo.prototype.bar = function(x) {};" + "/** @constructor \n * @extends {Foo} */ function SubFoo() {}" + "/** @return {void} */ SubFoo.prototype.bar = " + "    function(x) { f(x); }; (new SubFoo()).bar();", "actual parameter 1 of f does not match formal parameter\n" + "found   : (number|undefined)\n" + "required: string"); [EOL] } <line_num>: 5155,5167
public void testInferredParam5() throws Exception { [EOL]     reportMissingOverrides = CheckLevel.OFF; [EOL]     testTypes("/** @param {string} x */ function f(x) {}" + "/** @constructor */ function Foo() {}" + "/** @param {...number} x */ Foo.prototype.bar = function(x) {};" + "/** @constructor \n * @extends {Foo} */ function SubFoo() {}" + "/** @param {number=} x \n * @param {...number} y  */ " + "SubFoo.prototype.bar = " + "    function(x, y) { f(x); }; (new SubFoo()).bar();", "actual parameter 1 of f does not match formal parameter\n" + "found   : (number|undefined)\n" + "required: string"); [EOL] } <line_num>: 5169,5182
public void testInferredParam6() throws Exception { [EOL]     reportMissingOverrides = CheckLevel.OFF; [EOL]     testTypes("/** @param {string} x */ function f(x) {}" + "/** @constructor */ function Foo() {}" + "/** @param {number=} x */ Foo.prototype.bar = function(x) {};" + "/** @constructor \n * @extends {Foo} */ function SubFoo() {}" + "/** @param {number=} x \n * @param {number=} y */ " + "SubFoo.prototype.bar = " + "    function(x, y) { f(y); };", "actual parameter 1 of f does not match formal parameter\n" + "found   : (number|undefined)\n" + "required: string"); [EOL] } <line_num>: 5184,5197
public void testInferredParam7() throws Exception { [EOL]     testTypes("/** @param {string} x */ function f(x) {}" + "var bar = /** @type {function(number=,number=)} */ (" + "    function(x, y) { f(y); });", "actual parameter 1 of f does not match formal parameter\n" + "found   : (number|undefined)\n" + "required: string"); [EOL] } <line_num>: 5199,5207
public void testOverriddenParams1() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "/** @param {...?} var_args */" + "Foo.prototype.bar = function(var_args) {};" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n" + " */ function SubFoo() {}" + "/**\n" + " * @param {number} x\n" + " * @override\n" + " */" + "SubFoo.prototype.bar = function(x) {};"); [EOL] } <line_num>: 5209,5223
public void testOverriddenParams2() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "/** @type {function(...[?])} */" + "Foo.prototype.bar = function(var_args) {};" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n" + " */ function SubFoo() {}" + "/**\n" + " * @type {function(number)}\n" + " * @override\n" + " */" + "SubFoo.prototype.bar = function(x) {};"); [EOL] } <line_num>: 5225,5239
public void testOverriddenParams3() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "/** @param {...number} var_args */" + "Foo.prototype.bar = function(var_args) { };" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n" + " */ function SubFoo() {}" + "/**\n" + " * @param {number} x\n" + " * @override\n" + " */" + "SubFoo.prototype.bar = function(x) {};", "mismatch of the bar property type and the type of the " + "property it overrides from superclass Foo\n" + "original: function (this:Foo, ...[number]): undefined\n" + "override: function (this:SubFoo, number): undefined"); [EOL] } <line_num>: 5241,5259
public void testOverriddenParams4() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "/** @type {function(...[number])} */" + "Foo.prototype.bar = function(var_args) {};" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n" + " */ function SubFoo() {}" + "/**\n" + " * @type {function(number)}\n" + " * @override\n" + " */" + "SubFoo.prototype.bar = function(x) {};", "mismatch of the bar property type and the type of the " + "property it overrides from superclass Foo\n" + "original: function (...[number]): ?\n" + "override: function (number): ?"); [EOL] } <line_num>: 5261,5279
public void testOverriddenParams5() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "/** @param {number} x */" + "Foo.prototype.bar = function(x) { };" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n" + " */ function SubFoo() {}" + "/**\n" + " * @override\n" + " */" + "SubFoo.prototype.bar = function() {};" + "(new SubFoo()).bar();"); [EOL] } <line_num>: 5281,5295
public void testOverriddenParams6() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "/** @param {number} x */" + "Foo.prototype.bar = function(x) { };" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n" + " */ function SubFoo() {}" + "/**\n" + " * @override\n" + " */" + "SubFoo.prototype.bar = function() {};" + "(new SubFoo()).bar(true);", "actual parameter 1 of SubFoo.prototype.bar " + "does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 5297,5315
public void testOverriddenReturn1() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "/** @return {Object} */ Foo.prototype.bar = " + "    function() { return {}; };" + "/** @constructor \n * @extends {Foo} */ function SubFoo() {}" + "/** @return {SubFoo}\n * @override */ SubFoo.prototype.bar = " + "    function() { return new Foo(); }", "inconsistent return type\n" + "found   : Foo\n" + "required: (SubFoo|null)"); [EOL] } <line_num>: 5317,5328
public void testOverriddenReturn2() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "/** @return {SubFoo} */ Foo.prototype.bar = " + "    function() { return new SubFoo(); };" + "/** @constructor \n * @extends {Foo} */ function SubFoo() {}" + "/** @return {Foo} x\n * @override */ SubFoo.prototype.bar = " + "    function() { return new SubFoo(); }", "mismatch of the bar property type and the type of the " + "property it overrides from superclass Foo\n" + "original: function (this:Foo): (SubFoo|null)\n" + "override: function (this:SubFoo): (Foo|null)"); [EOL] } <line_num>: 5330,5342
public void testThis1() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor */goog.A = function(){};" + "/** @return {number} */" + "goog.A.prototype.n = function() { return this };", "inconsistent return type\n" + "found   : goog.A\n" + "required: number"); [EOL] } <line_num>: 5344,5352
public void testOverriddenProperty1() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "/** @type {Object} */" + "Foo.prototype.bar = {};" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n" + " */ function SubFoo() {}" + "/**\n" + " * @type {Array}\n" + " * @override\n" + " */" + "SubFoo.prototype.bar = [];"); [EOL] } <line_num>: 5354,5368
public void testOverriddenProperty2() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {" + "  /** @type {Object} */" + "  this.bar = {};" + "}" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n" + " */ function SubFoo() {}" + "/**\n" + " * @type {Array}\n" + " * @override\n" + " */" + "SubFoo.prototype.bar = [];"); [EOL] } <line_num>: 5370,5385
public void testOverriddenProperty3() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {" + "}" + "/** @type {string} */ Foo.prototype.data;" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n" + " */ function SubFoo() {}" + "/** @type {string|Object} \n @override */ " + "SubFoo.prototype.data = null;", "mismatch of the data property type and the type " + "of the property it overrides from superclass Foo\n" + "original: string\n" + "override: (Object|null|string)"); [EOL] } <line_num>: 5387,5402
public void testOverriddenProperty4() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "Foo.prototype.bar = null;" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n" + " */ function SubFoo() {}" + "SubFoo.prototype.bar = 3;"); [EOL] } <line_num>: 5404,5414
public void testOverriddenProperty5() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "Foo.prototype.bar = null;" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n" + " */ function SubFoo() {}" + "/** @override */ SubFoo.prototype.bar = 3;"); [EOL] } <line_num>: 5416,5426
public void testOverriddenProperty6() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "/** @type {?number} */ Foo.prototype.bar = null;" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n" + " */ function SubFoo() {}" + "SubFoo.prototype.bar = 3;"); [EOL] } <line_num>: 5428,5439
public void testThis2() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor */goog.A = function(){" + "  this.foo = null;" + "};" + "/** @return {number} */" + "goog.A.prototype.n = function() { return this.foo };", "inconsistent return type\n" + "found   : null\n" + "required: number"); [EOL] } <line_num>: 5441,5451
public void testThis3() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor */goog.A = function(){" + "  this.foo = null;" + "  this.foo = 5;" + "};"); [EOL] } <line_num>: 5453,5459
public void testThis4() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor */goog.A = function(){" + "  /** @type {string?} */this.foo = null;" + "};" + "/** @return {number} */goog.A.prototype.n = function() {" + "  return this.foo };", "inconsistent return type\n" + "found   : (null|string)\n" + "required: number"); [EOL] } <line_num>: 5461,5471
public void testThis5() throws Exception { [EOL]     testTypes("/** @this Date\n@return {number}*/function h() { return this }", "inconsistent return type\n" + "found   : Date\n" + "required: number"); [EOL] } <line_num>: 5473,5478
public void testThis6() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor\n@return {!Date} */" + "goog.A = function(){ return this };", "inconsistent return type\n" + "found   : goog.A\n" + "required: Date"); [EOL] } <line_num>: 5480,5487
public void testThis7() throws Exception { [EOL]     testTypes("/** @constructor */function A(){};" + "/** @return {number} */A.prototype.n = function() { return this };", "inconsistent return type\n" + "found   : A\n" + "required: number"); [EOL] } <line_num>: 5489,5495
public void testThis8() throws Exception { [EOL]     testTypes("/** @constructor */function A(){" + "  /** @type {string?} */this.foo = null;" + "};" + "/** @return {number} */A.prototype.n = function() {" + "  return this.foo };", "inconsistent return type\n" + "found   : (null|string)\n" + "required: number"); [EOL] } <line_num>: 5497,5506
public void testThis9() throws Exception { [EOL]     testTypes("/** @constructor */function A(){};" + "A.prototype.foo = 3;" + "/** @return {string} */ A.bar = function() { return this.foo; };"); [EOL] } <line_num>: 5508,5513
public void testThis10() throws Exception { [EOL]     testTypes("/** @constructor */function A(){};" + "A.prototype.foo = 3;" + "/** @this {A}\n@return {string} */" + "A.bar = function() { return this.foo; };", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 5515,5524
public void testThis11() throws Exception { [EOL]     testTypes("/** @param {number} x */ function f(x) {}" + "/** @constructor */ function Ctor() {" + "  /** @this {Date} */" + "  this.method = function() {" + "    f(this);" + "  };" + "}", "actual parameter 1 of f does not match formal parameter\n" + "found   : Date\n" + "required: number"); [EOL] } <line_num>: 5526,5538
public void testThis12() throws Exception { [EOL]     testTypes("/** @param {number} x */ function f(x) {}" + "/** @constructor */ function Ctor() {}" + "Ctor.prototype['method'] = function() {" + "  f(this);" + "}", "actual parameter 1 of f does not match formal parameter\n" + "found   : Ctor\n" + "required: number"); [EOL] } <line_num>: 5540,5550
public void testThis13() throws Exception { [EOL]     testTypes("/** @param {number} x */ function f(x) {}" + "/** @constructor */ function Ctor() {}" + "Ctor.prototype = {" + "  method: function() {" + "    f(this);" + "  }" + "};", "actual parameter 1 of f does not match formal parameter\n" + "found   : Ctor\n" + "required: number"); [EOL] } <line_num>: 5552,5564
public void testThis14() throws Exception { [EOL]     testTypes("/** @param {number} x */ function f(x) {}" + "f(this.Object);", "actual parameter 1 of f does not match formal parameter\n" + "found   : function (new:Object, *=): ?\n" + "required: number"); [EOL] } <line_num>: 5566,5573
public void testThisTypeOfFunction1() throws Exception { [EOL]     testTypes("/** @type {function(this:Object)} */ function f() {}" + "f();"); [EOL] } <line_num>: 5575,5579
public void testThisTypeOfFunction2() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "/** @type {function(this:F)} */ function f() {}" + "f();", "\"function (this:F): ?\" must be called with a \"this\" type"); [EOL] } <line_num>: 5581,5587
public void testThisTypeOfFunction3() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "F.prototype.bar = function() {};" + "var f = (new F()).bar; f();", "\"function (this:F): undefined\" must be called with a \"this\" type"); [EOL] } <line_num>: 5589,5595
public void testThisTypeOfFunction4() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "F.prototype.moveTo = function(x, y) {};" + "F.prototype.lineTo = function(x, y) {};" + "function demo() {" + "  var path = new F();" + "  var points = [[1,1], [2,2]];" + "  for (var i = 0; i < points.length; i++) {" + "    (i == 0 ? path.moveTo : path.lineTo)(" + "       points[i][0], points[i][1]);" + "  }" + "}", "\"function (this:F, ?, ?): undefined\" " + "must be called with a \"this\" type"); [EOL] } <line_num>: 5597,5612
public void testGlobalThis1() throws Exception { [EOL]     testTypes("/** @constructor */ function Window() {}" + "/** @param {string} msg */ " + "Window.prototype.alert = function(msg) {};" + "this.alert(3);", "actual parameter 1 of Window.prototype.alert " + "does not match formal parameter\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 5614,5623
public void testGlobalThis2() throws Exception { [EOL]     testTypes("/** @constructor */ function Bindow() {}" + "/** @param {string} msg */ " + "Bindow.prototype.alert = function(msg) {};" + "this.alert = 3;" + "(new Bindow()).alert(this.alert)"); [EOL] } <line_num>: 5625,5632
public void testGlobalThis2b() throws Exception { [EOL]     testTypes("/** @constructor */ function Bindow() {}" + "/** @param {string} msg */ " + "Bindow.prototype.alert = function(msg) {};" + "/** @return {number} */ this.alert = function() { return 3; };" + "(new Bindow()).alert(this.alert())", "actual parameter 1 of Bindow.prototype.alert " + "does not match formal parameter\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 5635,5645
public void testGlobalThis3() throws Exception { [EOL]     testTypes("/** @param {string} msg */ " + "function alert(msg) {};" + "this.alert(3);", "actual parameter 1 of global this.alert " + "does not match formal parameter\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 5647,5656
public void testGlobalThis4() throws Exception { [EOL]     testTypes("/** @param {string} msg */ " + "var alert = function(msg) {};" + "this.alert(3);", "actual parameter 1 of global this.alert " + "does not match formal parameter\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 5658,5667
public void testGlobalThis5() throws Exception { [EOL]     testTypes("function f() {" + "  /** @param {string} msg */ " + "  var alert = function(msg) {};" + "}" + "this.alert(3);", "Property alert never defined on global this"); [EOL] } <line_num>: 5669,5677
public void testGlobalThis6() throws Exception { [EOL]     testTypes("/** @param {string} msg */ " + "var alert = function(msg) {};" + "var x = 3;" + "x = 'msg';" + "this.alert(this.x);"); [EOL] } <line_num>: 5679,5686
public void testGlobalThis7() throws Exception { [EOL]     testTypes("/** @constructor */ function Window() {}" + "/** @param {Window} msg */ " + "var foo = function(msg) {};" + "foo(this);"); [EOL] } <line_num>: 5688,5694
public void testGlobalThis8() throws Exception { [EOL]     testTypes("/** @constructor */ function Window() {}" + "/** @param {number} msg */ " + "var foo = function(msg) {};" + "foo(this);", "actual parameter 1 of foo does not match formal parameter\n" + "found   : global this\n" + "required: number"); [EOL] } <line_num>: 5696,5705
public void testGlobalThis9() throws Exception { [EOL]     testTypes("function Window() {}" + "Window.prototype.alert = function() {};" + "this.alert();", "Property alert never defined on global this"); [EOL] } <line_num>: 5707,5715
public void testControlFlowRestrictsType1() throws Exception { [EOL]     testTypes("/** @return {String?} */ function f() { return null; }" + "/** @type {String?} */ var a = f();" + "/** @type String */ var b = new String('foo');" + "/** @type null */ var c = null;" + "if (a) {" + "  b = a;" + "} else {" + "  c = a;" + "}"); [EOL] } <line_num>: 5717,5727
public void testControlFlowRestrictsType2() throws Exception { [EOL]     testTypes("/** @return {(string,null)} */ function f() { return null; }" + "/** @type {(string,null)} */ var a = f();" + "/** @type string */ var b = 'foo';" + "/** @type null */ var c = null;" + "if (a) {" + "  b = a;" + "} else {" + "  c = a;" + "}", "assignment\n" + "found   : (null|string)\n" + "required: null"); [EOL] } <line_num>: 5729,5742
public void testControlFlowRestrictsType3() throws Exception { [EOL]     testTypes("/** @type {(string,void)} */" + "var a;" + "/** @type string */" + "var b = 'foo';" + "if (a) {" + "  b = a;" + "}"); [EOL] } <line_num>: 5744,5752
public void testControlFlowRestrictsType4() throws Exception { [EOL]     testTypes("/** @param {string} a */ function f(a){}" + "/** @type {(string,undefined)} */ var a;" + "a && f(a);"); [EOL] } <line_num>: 5754,5758
public void testControlFlowRestrictsType5() throws Exception { [EOL]     testTypes("/** @param {undefined} a */ function f(a){}" + "/** @type {(!Array,undefined)} */ var a;" + "a || f(a);"); [EOL] } <line_num>: 5760,5764
public void testControlFlowRestrictsType6() throws Exception { [EOL]     testTypes("/** @param {undefined} x */ function f(x) {}" + "/** @type {(string,undefined)} */ var a;" + "a && f(a);", "actual parameter 1 of f does not match formal parameter\n" + "found   : string\n" + "required: undefined"); [EOL] } <line_num>: 5766,5773
public void testControlFlowRestrictsType7() throws Exception { [EOL]     testTypes("/** @param {undefined} x */ function f(x) {}" + "/** @type {(string,undefined)} */ var a;" + "a && f(a);", "actual parameter 1 of f does not match formal parameter\n" + "found   : string\n" + "required: undefined"); [EOL] } <line_num>: 5775,5782
public void testControlFlowRestrictsType8() throws Exception { [EOL]     testTypes("/** @param {undefined} a */ function f(a){}" + "/** @type {(!Array,undefined)} */ var a;" + "if (a || f(a)) {}"); [EOL] } <line_num>: 5784,5788
public void testControlFlowRestrictsType9() throws Exception { [EOL]     testTypes("/** @param {number?} x\n * @return {number}*/\n" + "var f = function(x) {\n" + "if (!x || x == 1) { return 1; } else { return x; }\n" + "};"); [EOL] } <line_num>: 5790,5795
public void testControlFlowRestrictsType10() throws Exception { [EOL]     testTypes("/** @param {number} x */ function f(x) {}" + "function g() {" + "  var y = null;" + "  for (var i = 0; i < 10; i++) {" + "    f(y);" + "    if (y != null) {" + "      // y is None the first time it goes through this branch\n" + "    } else {" + "      y = {};" + "    }" + "  }" + "};", "actual parameter 1 of f does not match formal parameter\n" + "found   : (null|{})\n" + "required: number"); [EOL] } <line_num>: 5797,5815
public void testControlFlowRestrictsType11() throws Exception { [EOL]     testTypes("/** @param {boolean} x */ function f(x) {}" + "function g() {" + "  var y = null;" + "  if (y != null) {" + "    for (var i = 0; i < 10; i++) {" + "      f(y);" + "    }" + "  }" + "};", "condition always evaluates to false\n" + "left : null\n" + "right: null"); [EOL] } <line_num>: 5817,5830
public void testSwitchCase3() throws Exception { [EOL]     testTypes("/** @type String */" + "var a = new String('foo');" + "switch (a) { case 'A': }"); [EOL] } <line_num>: 5832,5836
public void testSwitchCase4() throws Exception { [EOL]     testTypes("/** @type {(string,Null)} */" + "var a = 'foo';" + "switch (a) { case 'A':break; case null:break; }"); [EOL] } <line_num>: 5838,5842
public void testSwitchCase5() throws Exception { [EOL]     testTypes("/** @type {(String,Null)} */" + "var a = new String('foo');" + "switch (a) { case 'A':break; case null:break; }"); [EOL] } <line_num>: 5844,5848
public void testSwitchCase6() throws Exception { [EOL]     testTypes("/** @type {(Number,Null)} */" + "var a = new Number(5);" + "switch (a) { case 5:break; case null:break; }"); [EOL] } <line_num>: 5850,5854
public void testSwitchCase7() throws Exception { [EOL]     testTypes("/**\n" + " * @param {number} x\n" + " * @return {number}\n" + " */\n" + "function g(x) { return 5; }" + "function f() {" + "  var x = {};" + "  x.foo = '3';" + "  switch (3) { case g(x.foo): return 3; }" + "}", "actual parameter 1 of g does not match formal parameter\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 5856,5872
public void testSwitchCase8() throws Exception { [EOL]     testTypes("/**\n" + " * @param {number} x\n" + " * @return {number}\n" + " */\n" + "function g(x) { return 5; }" + "function f() {" + "  var x = {};" + "  x.foo = '3';" + "  switch (g(x.foo)) { case 3: return 3; }" + "}", "actual parameter 1 of g does not match formal parameter\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 5874,5890
public void testNoTypeCheck1() throws Exception { [EOL]     testTypes("/** @notypecheck */function foo() { new 4 }"); [EOL] } <line_num>: 5892,5894
public void testNoTypeCheck2() throws Exception { [EOL]     testTypes("/** @notypecheck */var foo = function() { new 4 }"); [EOL] } <line_num>: 5896,5898
public void testNoTypeCheck3() throws Exception { [EOL]     testTypes("/** @notypecheck */var foo = function bar() { new 4 }"); [EOL] } <line_num>: 5900,5902
public void testNoTypeCheck4() throws Exception { [EOL]     testTypes("var foo;" + "/** @notypecheck */foo = function() { new 4 }"); [EOL] } <line_num>: 5904,5907
public void testNoTypeCheck5() throws Exception { [EOL]     testTypes("var foo;" + "foo = /** @notypecheck */function() { new 4 }"); [EOL] } <line_num>: 5909,5912
public void testNoTypeCheck6() throws Exception { [EOL]     testTypes("var foo;" + "/** @notypecheck */foo = function bar() { new 4 }"); [EOL] } <line_num>: 5914,5917
public void testNoTypeCheck7() throws Exception { [EOL]     testTypes("var foo;" + "foo = /** @notypecheck */function bar() { new 4 }"); [EOL] } <line_num>: 5919,5922
public void testNoTypeCheck8() throws Exception { [EOL]     testTypes("/** @fileoverview \n * @notypecheck */ var foo;" + "var bar = 3; /** @param {string} x */ function f(x) {} f(bar);"); [EOL] } <line_num>: 5924,5927
public void testNoTypeCheck9() throws Exception { [EOL]     testTypes("/** @notypecheck */ function g() { }" + " /** @type {string} */ var a = 1", "initializing variable\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 5929,5936
public void testNoTypeCheck10() throws Exception { [EOL]     testTypes("/** @notypecheck */ function g() { }" + " function h() {/** @type {string} */ var a = 1}", "initializing variable\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 5938,5945
public void testNoTypeCheck11() throws Exception { [EOL]     testTypes("/** @notypecheck */ function g() { }" + "/** @notypecheck */ function h() {/** @type {string} */ var a = 1}"); [EOL] } <line_num>: 5947,5951
public void testNoTypeCheck12() throws Exception { [EOL]     testTypes("/** @notypecheck */ function g() { }" + "function h() {/** @type {string}\n * @notypecheck\n*/ var a = 1}"); [EOL] } <line_num>: 5953,5957
public void testNoTypeCheck13() throws Exception { [EOL]     testTypes("/** @notypecheck */ function g() { }" + "function h() {/** @type {string}\n * @notypecheck\n*/ var a = 1;" + "/** @type {string}*/ var b = 1}", "initializing variable\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 5959,5967
public void testNoTypeCheck14() throws Exception { [EOL]     testTypes("/** @fileoverview \n * @notypecheck */ function g() { }" + "g(1,2,3)"); [EOL] } <line_num>: 5969,5972
public void testImplicitCast() throws Exception { [EOL]     testTypes("/** @constructor */ function Element() {};\n" + "/** @type {string}\n" + "  * @implicitCast */" + "Element.prototype.innerHTML;", "(new Element).innerHTML = new Array();", null, false); [EOL] } <line_num>: 5974,5980
public void testImplicitCastSubclassAccess() throws Exception { [EOL]     testTypes("/** @constructor */ function Element() {};\n" + "/** @type {string}\n" + "  * @implicitCast */" + "Element.prototype.innerHTML;" + "/** @constructor \n @extends Element */" + "function DIVElement() {};", "(new DIVElement).innerHTML = new Array();", null, false); [EOL] } <line_num>: 5982,5991
public void testImplicitCastNotInExterns() throws Exception { [EOL]     testTypes("/** @constructor */ function Element() {};\n" + "/** @type {string}\n" + "  * @implicitCast */" + "Element.prototype.innerHTML;" + "(new Element).innerHTML = new Array();", new String[] { "Illegal annotation on innerHTML. @implicitCast may only be " + "used in externs.", "assignment to property innerHTML of Element\n" + "found   : Array\n" + "required: string" }); [EOL] } <line_num>: 5993,6005
public void testNumberNode() throws Exception { [EOL]     Node n = typeCheck(Node.newNumber(0)); [EOL]     assertTypeEquals(NUMBER_TYPE, n.getJSType()); [EOL] } <line_num>: 6007,6011
public void testStringNode() throws Exception { [EOL]     Node n = typeCheck(Node.newString("hello")); [EOL]     assertTypeEquals(STRING_TYPE, n.getJSType()); [EOL] } <line_num>: 6013,6017
public void testBooleanNodeTrue() throws Exception { [EOL]     Node trueNode = typeCheck(new Node(Token.TRUE)); [EOL]     assertTypeEquals(BOOLEAN_TYPE, trueNode.getJSType()); [EOL] } <line_num>: 6019,6023
public void testBooleanNodeFalse() throws Exception { [EOL]     Node falseNode = typeCheck(new Node(Token.FALSE)); [EOL]     assertTypeEquals(BOOLEAN_TYPE, falseNode.getJSType()); [EOL] } <line_num>: 6025,6029
public void testUndefinedNode() throws Exception { [EOL]     Node p = new Node(Token.ADD); [EOL]     Node n = Node.newString(Token.NAME, "undefined"); [EOL]     p.addChildToBack(n); [EOL]     p.addChildToBack(Node.newNumber(5)); [EOL]     typeCheck(p); [EOL]     assertTypeEquals(VOID_TYPE, n.getJSType()); [EOL] } <line_num>: 6031,6039
public void testNumberAutoboxing() throws Exception { [EOL]     testTypes("/** @type Number */var a = 4;", "initializing variable\n" + "found   : number\n" + "required: (Number|null)"); [EOL] } <line_num>: 6041,6046
public void testNumberUnboxing() throws Exception { [EOL]     testTypes("/** @type number */var a = new Number(4);", "initializing variable\n" + "found   : Number\n" + "required: number"); [EOL] } <line_num>: 6048,6053
public void testStringAutoboxing() throws Exception { [EOL]     testTypes("/** @type String */var a = 'hello';", "initializing variable\n" + "found   : string\n" + "required: (String|null)"); [EOL] } <line_num>: 6055,6060
public void testStringUnboxing() throws Exception { [EOL]     testTypes("/** @type string */var a = new String('hello');", "initializing variable\n" + "found   : String\n" + "required: string"); [EOL] } <line_num>: 6062,6067
public void testBooleanAutoboxing() throws Exception { [EOL]     testTypes("/** @type Boolean */var a = true;", "initializing variable\n" + "found   : boolean\n" + "required: (Boolean|null)"); [EOL] } <line_num>: 6069,6074
public void testBooleanUnboxing() throws Exception { [EOL]     testTypes("/** @type boolean */var a = new Boolean(false);", "initializing variable\n" + "found   : Boolean\n" + "required: boolean"); [EOL] } <line_num>: 6076,6081
public void testIIFE1() throws Exception { [EOL]     testTypes("var namespace = {};" + "/** @type {number} */ namespace.prop = 3;" + "(function(ns) {" + "  ns.prop = true;" + "})(namespace);", "assignment to property prop of ns\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 6083,6093
public void testIIFE2() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "(function(ctor) {" + "  /** @type {boolean} */ ctor.prop = true;" + "})(Foo);" + "/** @return {number} */ function f() { return Foo.prop; }", "inconsistent return type\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 6095,6105
public void testIIFE3() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "(function(ctor) {" + "  /** @type {boolean} */ ctor.prop = true;" + "})(Foo);" + "/** @param {number} x */ function f(x) {}" + "f(Foo.prop);", "actual parameter 1 of f does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 6107,6118
public void testIIFE4() throws Exception { [EOL]     testTypes("/** @const */ var namespace = {};" + "(function(ns) {" + "  /**\n" + "   * @constructor\n" + "   * @param {number} x\n" + "   */\n" + "   ns.Ctor = function(x) {};" + "})(namespace);" + "new namespace.Ctor(true);", "actual parameter 1 of namespace.Ctor " + "does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 6120,6135
public void testIIFE5() throws Exception { [EOL]     testTypes("/** @const */ var namespace = {};" + "(function(ns) {" + "  /**\n" + "   * @constructor\n" + "   */\n" + "   ns.Ctor = function() {};" + "   /** @type {boolean} */ ns.Ctor.prototype.bar = true;" + "})(namespace);" + "/** @param {namespace.Ctor} x\n" + "  * @return {number} */ function f(x) { return x.bar; }", "Bad type annotation. Unknown type namespace.Ctor"); [EOL] } <line_num>: 6137,6153
public void testNotIIFE1() throws Exception { [EOL]     testTypes("/** @param {number} x */ function f(x) {}" + "/** @param {...?} x */ function g(x) {}" + "g(function(y) { f(y); }, true);"); [EOL] } <line_num>: 6155,6160
public void testIssue61() throws Exception { [EOL]     testTypes("var ns = {};" + "(function() {" + "  /** @param {string} b */" + "  ns.a = function(b) {};" + "})();" + "function d() {" + "  ns.a(123);" + "}", "actual parameter 1 of ns.a does not match formal parameter\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 6162,6175
public void testIssue61b() throws Exception { [EOL]     testTypes("var ns = {};" + "(function() {" + "  /** @param {string} b */" + "  ns.a = function(b) {};" + "})();" + "ns.a(123);", "actual parameter 1 of ns.a does not match formal parameter\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 6177,6188
public void testIssue86() throws Exception { [EOL]     testTypes("/** @interface */ function I() {}" + "/** @return {number} */ I.prototype.get = function(){};" + "/** @constructor \n * @implements {I} */ function F() {}" + "/** @override */ F.prototype.get = function() { return true; };", "inconsistent return type\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 6190,6199
public void testIssue124() throws Exception { [EOL]     testTypes("var t = null;" + "function test() {" + "  if (t != null) { t = null; }" + "  t = 1;" + "}"); [EOL] } <line_num>: 6201,6208
public void testIssue124b() throws Exception { [EOL]     testTypes("var t = null;" + "function test() {" + "  if (t != null) { t = null; }" + "  t = undefined;" + "}", "condition always evaluates to false\n" + "left : (null|undefined)\n" + "right: null"); [EOL] } <line_num>: 6210,6220
public void testIssue259() throws Exception { [EOL]     testTypes("/** @param {number} x */ function f(x) {}" + "/** @constructor */" + "var Clock = function() {" + "  /** @constructor */" + "  this.Date = function() {};" + "  f(new this.Date());" + "};", "actual parameter 1 of f does not match formal parameter\n" + "found   : this.Date\n" + "required: number"); [EOL] } <line_num>: 6222,6234
public void testIssue301() throws Exception { [EOL]     testTypes("Array.indexOf = function() {};" + "var s = 'hello';" + "alert(s.toLowerCase.indexOf('1'));", "Property indexOf never defined on String.prototype.toLowerCase"); [EOL] } <line_num>: 6236,6242
public void testIssue368() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo(){}" + "/**\n" + " * @param {number} one\n" + " * @param {string} two\n" + " */\n" + "Foo.prototype.add = function(one, two) {};" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n" + " */\n" + "function Bar(){}" + "/** @override */\n" + "Bar.prototype.add = function(ignored) {};" + "(new Bar()).add(1, 2);", "actual parameter 2 of Bar.prototype.add does not match formal parameter\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 6244,6263
public void testIssue380() throws Exception { [EOL]     testTypes("/** @type { function(string): {innerHTML: string} } */\n" + "document.getElementById;\n" + "var list = /** @type {!Array.<string>} */ ['hello', 'you'];\n" + "list.push('?');\n" + "document.getElementById('node').innerHTML = list.toString();", "Type annotations are not allowed here. " + "Are you missing parentheses?"); [EOL] } <line_num>: 6265,6275
public void testIssue483() throws Exception { [EOL]     testTypes("/** @constructor */ function C() {" + "  /** @type {?Array} */ this.a = [];" + "}" + "C.prototype.f = function() {" + "  if (this.a.length > 0) {" + "    g(this.a);" + "  }" + "};" + "/** @param {number} a */ function g(a) {}", "actual parameter 1 of g does not match formal parameter\n" + "found   : Array\n" + "required: number"); [EOL] } <line_num>: 6277,6291
public void testIssue537a() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "Foo.prototype = {method: function() {}};" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n" + " */\n" + "function Bar() {" + "  Foo.call(this);" + "  if (this.baz()) this.method(1);" + "}" + "Bar.prototype = {" + "  baz: function() {" + "    return true;" + "  }" + "};" + "Bar.prototype.__proto__ = Foo.prototype;", "Function Foo.prototype.method: called with 1 argument(s). " + "Function requires at least 0 argument(s) " + "and no more than 0 argument(s)."); [EOL] } <line_num>: 6293,6314
public void testIssue537b() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "Foo.prototype = {method: function() {}};" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n" + " */\n" + "function Bar() {" + "  Foo.call(this);" + "  if (this.baz(1)) this.method();" + "}" + "Bar.prototype = {" + "  baz: function() {" + "    return true;" + "  }" + "};" + "Bar.prototype.__proto__ = Foo.prototype;", "Function Bar.prototype.baz: called with 1 argument(s). " + "Function requires at least 0 argument(s) " + "and no more than 0 argument(s)."); [EOL] } <line_num>: 6316,6337
public void testIssue537c() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n" + " */\n" + "function Bar() {" + "  Foo.call(this);" + "  if (this.baz2()) alert(1);" + "}" + "Bar.prototype = {" + "  baz: function() {" + "    return true;" + "  }" + "};" + "Bar.prototype.__proto__ = Foo.prototype;", "Property baz2 never defined on Bar"); [EOL] } <line_num>: 6339,6357
public void testIssue537d() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "Foo.prototype = {" + "  /** @return {Bar} */ x: function() { new Bar(); }," + "  /** @return {Foo} */ y: function() { new Bar(); }" + "};" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n" + " */\n" + "function Bar() {" + "  this.xy = 3;" + "}" + "/** @return {Bar} */ function f() { return new Bar(); }" + "/** @return {Foo} */ function g() { return new Bar(); }" + "Bar.prototype = {" + "  /** @return {Bar} */ x: function() { new Bar(); }," + "  /** @return {Foo} */ y: function() { new Bar(); }" + "};" + "Bar.prototype.__proto__ = Foo.prototype;"); [EOL] } <line_num>: 6359,6380
public void testIssue586() throws Exception { [EOL]     testTypes("/** @constructor */" + "var MyClass = function() {};" + "/** @param {boolean} success */" + "MyClass.prototype.fn = function(success) {};" + "MyClass.prototype.test = function() {" + "  this.fn();" + "  this.fn = function() {};" + "};", "Function MyClass.prototype.fn: called with 0 argument(s). " + "Function requires at least 1 argument(s) " + "and no more than 1 argument(s)."); [EOL] } <line_num>: 6382,6395
public void testIssue635() throws Exception { [EOL]     testTypes("/** @constructor */" + "function F() {}" + "F.prototype.bar = function() { this.baz(); };" + "F.prototype.baz = function() {};" + "/** @constructor */" + "function G() {}" + "G.prototype.bar = F.prototype.bar;"); [EOL] } <line_num>: 6397,6407
public void testIssue635b() throws Exception { [EOL]     testTypes("/** @constructor */" + "function F() {}" + "/** @constructor */" + "function G() {}" + "/** @type {function(new:G)} */ var x = F;", "initializing variable\n" + "found   : function (new:F): undefined\n" + "required: function (new:G): ?"); [EOL] } <line_num>: 6409,6419
public void testIssue669() throws Exception { [EOL]     testTypes("/** @return {{prop1: (Object|undefined)}} */" + "function f(a) {" + "  var results;" + "  if (a) {" + "    results = {};" + "    results.prop1 = {a: 3};" + "  } else {" + "    results = {prop2: 3};" + "  }" + "  return results;" + "}"); [EOL] } <line_num>: 6421,6434
public void testIssue688() throws Exception { [EOL]     testTypes("/** @const */ var SOME_DEFAULT =\n" + "    /** @type {TwoNumbers} */ ({first: 1, second: 2});\n" + "/**\n" + "* Class defining an interface with two numbers.\n" + "* @interface\n" + "*/\n" + "function TwoNumbers() {}\n" + "/** @type number */\n" + "TwoNumbers.prototype.first;\n" + "/** @type number */\n" + "TwoNumbers.prototype.second;\n" + "/** @return {number} */ function f() { return SOME_DEFAULT; }", "inconsistent return type\n" + "found   : (TwoNumbers|null)\n" + "required: number"); [EOL] } <line_num>: 6436,6453
public void testIssue700() throws Exception { [EOL]     testTypes("/**\n" + " * @param {{text: string}} opt_data\n" + " * @return {string}\n" + " */\n" + "function temp1(opt_data) {\n" + "  return opt_data.text;\n" + "}\n" + "\n" + "/**\n" + " * @param {{activity: (boolean|number|string|null|Object)}} opt_data\n" + " * @return {string}\n" + " */\n" + "function temp2(opt_data) {\n" + "  /** @notypecheck */\n" + "  function __inner() {\n" + "    return temp1(opt_data.activity);\n" + "  }\n" + "  return __inner();\n" + "}\n" + "\n" + "/**\n" + " * @param {{n: number, text: string, b: boolean}} opt_data\n" + " * @return {string}\n" + " */\n" + "function temp3(opt_data) {\n" + "  return 'n: ' + opt_data.n + ', t: ' + opt_data.text + '.';\n" + "}\n" + "\n" + "function callee() {\n" + "  var output = temp3({\n" + "    n: 0,\n" + "    text: 'a string',\n" + "    b: true\n" + "  })\n" + "  alert(output);\n" + "}\n" + "\n" + "callee();"); [EOL] } <line_num>: 6455,6495
public void testIssue725() throws Exception { [EOL]     testTypes("/** @typedef {{name: string}} */ var RecordType1;" + "/** @typedef {{name2: string}} */ var RecordType2;" + "/** @param {RecordType1} rec */ function f(rec) {" + "  alert(rec.name2);" + "}", "Property name2 never defined on rec"); [EOL] } <line_num>: 6497,6505
public void testIssue726() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "/** @param {number} x */ Foo.prototype.bar = function(x) {};" + "/** @return {!Function} */ " + "Foo.prototype.getDeferredBar = function() { " + "  var self = this;" + "  return function() {" + "    self.bar(true);" + "  };" + "};", "actual parameter 1 of Foo.prototype.bar does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 6507,6521
public void testIssue765() throws Exception { [EOL]     testTypes("/** @constructor */" + "var AnotherType = function (parent) {" + "    /** @param {string} stringParameter Description... */" + "    this.doSomething = function (stringParameter) {};" + "};" + "/** @constructor */" + "var YetAnotherType = function () {" + "    this.field = new AnotherType(self);" + "    this.testfun=function(stringdata) {" + "        this.field.doSomething(null);" + "    };" + "};", "actual parameter 1 of AnotherType.doSomething " + "does not match formal parameter\n" + "found   : null\n" + "required: string"); [EOL] } <line_num>: 6523,6541
public void testIssue783() throws Exception { [EOL]     testTypes("/** @constructor */" + "var Type = function () {" + "  /** @type {Type} */" + "  this.me_ = this;" + "};" + "Type.prototype.doIt = function() {" + "  var me = this.me_;" + "  for (var i = 0; i < me.unknownProp; i++) {}" + "};", "Property unknownProp never defined on Type"); [EOL] } <line_num>: 6543,6555
public void testIssue791() throws Exception { [EOL]     testTypes("/** @param {{func: function()}} obj */" + "function test1(obj) {}" + "var fnStruc1 = {};" + "fnStruc1.func = function() {};" + "test1(fnStruc1);"); [EOL] } <line_num>: 6557,6564
public void testIssue810() throws Exception { [EOL]     testTypes("/** @constructor */" + "var Type = function () {" + "};" + "Type.prototype.doIt = function(obj) {" + "  this.prop = obj.unknownProp;" + "};", "Property unknownProp never defined on obj"); [EOL] } <line_num>: 6566,6575
public void testBug592170() throws Exception { [EOL]     testTypes("/** @param {Function} opt_f ... */" + "function foo(opt_f) {" + "  /** @type {Function} */" + "  return opt_f || function () {};" + "}", "Type annotations are not allowed here. Are you missing parentheses?"); [EOL] } <line_num>: 6582,6590
public void testBug901455() throws Exception { [EOL]     testTypes("/** @return {(number,undefined)} */ function a() { return 3; }" + "var b = undefined === a()"); [EOL]     testTypes("/** @return {(number,undefined)} */ function a() { return 3; }" + "var b = a() === undefined"); [EOL] } <line_num>: 6597,6602
public void testBug908701() throws Exception { [EOL]     testTypes("/** @type {String} */var s = new String('foo');" + "var b = s.match(/a/) != null;"); [EOL] } <line_num>: 6607,6610
public void testBug908625() throws Exception { [EOL]     testTypes("/** @constructor */function A(){}" + "/** @constructor\n * @extends A */function B(){}" + "/** @param {B} b" + "\n @return {(A,undefined)} */function foo(b){return b}"); [EOL] } <line_num>: 6615,6620
public void testBug911118() throws Exception { [EOL]     Scope s = parseAndTypeCheckWithScope("var a = function(){};").scope; [EOL]     JSType type = s.getVar("a").getType(); [EOL]     assertEquals("function (): undefined", type.toString()); [EOL]     testTypes("function nullFunction() {};" + "var foo = nullFunction;" + "foo = function() {};" + "foo();"); [EOL] } <line_num>: 6626,6637
public void testBug909000() throws Exception { [EOL]     testTypes("/** @constructor */function A(){}\n" + "/** @param {!A} a\n" + "@return {boolean}*/\n" + "function y(a) { return a }", "inconsistent return type\n" + "found   : A\n" + "required: boolean"); [EOL] } <line_num>: 6639,6647
public void testBug930117() throws Exception { [EOL]     testTypes("/** @param {boolean} x */function f(x){}" + "f(null);", "actual parameter 1 of f does not match formal parameter\n" + "found   : null\n" + "required: boolean"); [EOL] } <line_num>: 6649,6656
public void testBug1484445() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "/** @type {number?} */ Foo.prototype.bar = null;" + "/** @type {number?} */ Foo.prototype.baz = null;" + "/** @param {Foo} foo */" + "function f(foo) {" + "  while (true) {" + "    if (foo.bar == null && foo.baz == null) {" + "      foo.bar;" + "    }" + "  }" + "}"); [EOL] } <line_num>: 6658,6671
public void testBug1859535() throws Exception { [EOL]     testTypes("/**\n" + " * @param {Function} childCtor Child class.\n" + " * @param {Function} parentCtor Parent class.\n" + " */" + "var inherits = function(childCtor, parentCtor) {" + "  /** @constructor */" + "  function tempCtor() {};" + "  tempCtor.prototype = parentCtor.prototype;" + "  childCtor.superClass_ = parentCtor.prototype;" + "  childCtor.prototype = new tempCtor();" + "  /** @override */ childCtor.prototype.constructor = childCtor;" + "};" + "/**" + " * @param {Function} constructor\n" + " * @param {Object} var_args\n" + " * @return {Object}\n" + " */" + "var factory = function(constructor, var_args) {" + "  /** @constructor */" + "  var tempCtor = function() {};" + "  tempCtor.prototype = constructor.prototype;" + "  var obj = new tempCtor();" + "  constructor.apply(obj, arguments);" + "  return obj;" + "};"); [EOL] } <line_num>: 6673,6700
public void testBug1940591() throws Exception { [EOL]     testTypes("/** @type {Object} */" + "var a = {};\n" + "/** @type {number} */\n" + "a.name = 0;\n" + "/**\n" + " * @param {Function} x anything.\n" + " */\n" + "a.g = function(x) { x.name = 'a'; }"); [EOL] } <line_num>: 6702,6712
public void testBug1942972() throws Exception { [EOL]     testTypes("var google = {\n" + "  gears: {\n" + "    factory: {},\n" + "    workerPool: {}\n" + "  }\n" + "};\n" + "\n" + "google.gears = {factory: {}};\n"); [EOL] } <line_num>: 6714,6724
public void testBug1943776() throws Exception { [EOL]     testTypes("/** @return  {{foo: Array}} */" + "function bar() {" + "  return {foo: []};" + "}"); [EOL] } <line_num>: 6726,6732
public void testBug1987544() throws Exception { [EOL]     testTypes("/** @param {string} x */ function foo(x) {}" + "var duration;" + "if (true && !(duration = 3)) {" + " foo(duration);" + "}", "actual parameter 1 of foo does not match formal parameter\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 6734,6744
public void testBug1940769() throws Exception { [EOL]     testTypes("/** @return {!Object} */ " + "function proto(obj) { return obj.prototype; }" + "/** @constructor */ function Map() {}" + "/**\n" + " * @constructor\n" + " * @extends {Map}\n" + " */" + "function Map2() { Map.call(this); };" + "Map2.prototype = proto(Map);"); [EOL] } <line_num>: 6746,6757
public void testBug2335992() throws Exception { [EOL]     testTypes("/** @return {*} */ function f() { return 3; }" + "var x = f();" + "/** @type {string} */" + "x.y = 3;", "assignment\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 6759,6768
public void testBug2341812() throws Exception { [EOL]     testTypes("/** @interface */" + "function EventTarget() {}" + "/** @constructor \n * @implements {EventTarget} */" + "function Node() {}" + "/** @type {number} */ Node.prototype.index;" + "/** @param {EventTarget} x \n * @return {string} */" + "function foo(x) { return x.index; }"); [EOL] } <line_num>: 6770,6779
public void testBug7701884() throws Exception { [EOL]     testTypes("/**\n" + " * @param {Array.<T>} x\n" + " * @param {function(T)} y\n" + " * @template T\n" + " */\n" + "var forEach = function(x, y) {\n" + "  for (var i = 0; i < x.length; i++) y(x[i]);\n" + "};" + "/** @param {number} x */" + "function f(x) {}" + "/** @param {?} x */" + "function h(x) {" + "  var top = null;" + "  forEach(x, function(z) { top = z; });" + "  if (top) f(top);" + "}"); [EOL] } <line_num>: 6781,6799
public void testScopedConstructors1() throws Exception { [EOL]     testTypes("function foo1() { " + "  /** @constructor */ function Bar() { " + "    /** @type {number} */ this.x = 3;" + "  }" + "}" + "function foo2() { " + "  /** @constructor */ function Bar() { " + "    /** @type {string} */ this.x = 'y';" + "  }" + "  /** " + "   * @param {Bar} b\n" + "   * @return {number}\n" + "   */" + "  function baz(b) { return b.x; }" + "}", "inconsistent return type\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 6801,6821
public void testScopedConstructors2() throws Exception { [EOL]     testTypes("/** @param {Function} f */" + "function foo1(f) {" + "  /** @param {Function} g */" + "  f.prototype.bar = function(g) {};" + "}"); [EOL] } <line_num>: 6823,6830
public void testQualifiedNameInference1() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "/** @type {number?} */ Foo.prototype.bar = null;" + "/** @type {number?} */ Foo.prototype.baz = null;" + "/** @param {Foo} foo */" + "function f(foo) {" + "  while (true) {" + "    if (!foo.baz) break; " + "    foo.bar = null;" + "  }" + "  return foo.bar == null;" + "}"); [EOL] } <line_num>: 6832,6846
public void testQualifiedNameInference2() throws Exception { [EOL]     testTypes("var x = {};" + "x.y = c;" + "function f(a, b) {" + "  if (a) {" + "    if (b) " + "      x.y = 2;" + "    else " + "      x.y = 1;" + "  }" + "  return x.y == null;" + "}"); [EOL] } <line_num>: 6848,6861
public void testQualifiedNameInference3() throws Exception { [EOL]     testTypes("var x = {};" + "x.y = c;" + "function f(a, b) {" + "  if (a) {" + "    if (b) " + "      x.y = 2;" + "    else " + "      x.y = 1;" + "  }" + "  return x.y == null;" + "} function g() { x.y = null; }"); [EOL] } <line_num>: 6863,6876
public void testQualifiedNameInference4() throws Exception { [EOL]     testTypes("/** @param {string} x */ function f(x) {}\n" + "/**\n" + " * @param {?string} x \n" + " * @constructor\n" + " */" + "function Foo(x) { this.x_ = x; }\n" + "Foo.prototype.bar = function() {" + "  if (this.x_) { f(this.x_); }" + "};"); [EOL] } <line_num>: 6878,6889
public void testQualifiedNameInference5() throws Exception { [EOL]     testTypes("var ns = {}; " + "(function() { " + "    /** @param {number} x */ ns.foo = function(x) {}; })();" + "(function() { ns.foo(true); })();", "actual parameter 1 of ns.foo does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 6891,6900
public void testQualifiedNameInference6() throws Exception { [EOL]     testTypes("/** @const */ var ns = {}; " + "/** @param {number} x */ ns.foo = function(x) {};" + "(function() { " + "    ns.foo = function(x) {};" + "    ns.foo(true); " + "})();", "actual parameter 1 of ns.foo does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 6902,6913
public void testQualifiedNameInference7() throws Exception { [EOL]     testTypes("var ns = {}; " + "(function() { " + "  /** @constructor \n * @param {number} x */ " + "  ns.Foo = function(x) {};" + "  /** @param {ns.Foo} x */ function f(x) {}" + "  f(new ns.Foo(true));" + "})();", "actual parameter 1 of ns.Foo does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 6915,6927
public void testQualifiedNameInference8() throws Exception { [EOL]     testClosureTypesMultipleWarnings("var ns = {}; " + "(function() { " + "  /** @constructor \n * @param {number} x */ " + "  ns.Foo = function(x) {};" + "})();" + "/** @param {ns.Foo} x */ function f(x) {}" + "f(new ns.Foo(true));", Lists.newArrayList("Bad type annotation. Unknown type ns.Foo", "actual parameter 1 of ns.Foo does not match formal parameter\n" + "found   : boolean\n" + "required: number")); [EOL] } <line_num>: 6929,6945
public void testQualifiedNameInference9() throws Exception { [EOL]     testTypes("var ns = {}; " + "ns.ns2 = {}; " + "(function() { " + "  /** @constructor \n * @param {number} x */ " + "  ns.ns2.Foo = function(x) {};" + "  /** @param {ns.ns2.Foo} x */ function f(x) {}" + "  f(new ns.ns2.Foo(true));" + "})();", "actual parameter 1 of ns.ns2.Foo does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 6947,6960
public void testQualifiedNameInference10() throws Exception { [EOL]     testTypes("var ns = {}; " + "ns.ns2 = {}; " + "(function() { " + "  /** @interface */ " + "  ns.ns2.Foo = function() {};" + "  /** @constructor \n * @implements {ns.ns2.Foo} */ " + "  function F() {}" + "  (new F());" + "})();"); [EOL] } <line_num>: 6962,6973
public void testQualifiedNameInference11() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "function f() {" + "  var x = new Foo();" + "  x.onload = function() {" + "    x.onload = null;" + "  };" + "}"); [EOL] } <line_num>: 6975,6984
public void testQualifiedNameInference12() throws Exception { [EOL]     testTypes("/** @param {function(this:Object)} x */ function f(x) {}" + "/** @constructor */ function Foo() {" + "  /** @type {number} */ this.bar = 3;" + "  f(function() { this.bar = true; });" + "}"); [EOL] } <line_num>: 6986,6995
public void testQualifiedNameInference13() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "function f(z) {" + "  var x = new Foo();" + "  if (z) {" + "    x.onload = function() {};" + "  } else {" + "    x.onload = null;" + "  };" + "}"); [EOL] } <line_num>: 6997,7008
public void testSheqRefinedScope() throws Exception { [EOL]     Node n = parseAndTypeCheck("/** @constructor */function A() {}\n" + "/** @constructor \n @extends A */ function B() {}\n" + "/** @return {number} */\n" + "B.prototype.p = function() { return 1; }\n" + "/** @param {A} a\n @param {B} b */\n" + "function f(a, b) {\n" + "  b.p();\n" + "  if (a === b) {\n" + "    b.p();\n" + "  }\n" + "}"); [EOL]     Node nodeC = n.getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild(); [EOL]     JSType typeC = nodeC.getJSType(); [EOL]     assertTrue(typeC.isNumber()); [EOL]     Node nodeB = nodeC.getFirstChild().getFirstChild(); [EOL]     JSType typeB = nodeB.getJSType(); [EOL]     assertEquals("B", typeB.toString()); [EOL] } <line_num>: 7010,7031
public void testAssignToUntypedVariable() throws Exception { [EOL]     Node n = parseAndTypeCheck("var z; z = 1;"); [EOL]     Node assign = n.getLastChild().getFirstChild(); [EOL]     Node node = assign.getFirstChild(); [EOL]     assertFalse(node.getJSType().isUnknownType()); [EOL]     assertEquals("number", node.getJSType().toString()); [EOL] } <line_num>: 7033,7040
public void testAssignToUntypedProperty() throws Exception { [EOL]     Node n = parseAndTypeCheck("/** @constructor */ function Foo() {}\n" + "Foo.prototype.a = 1;" + "(new Foo).a;"); [EOL]     Node node = n.getLastChild().getFirstChild(); [EOL]     assertFalse(node.getJSType().isUnknownType()); [EOL]     assertTrue(node.getJSType().isNumber()); [EOL] } <line_num>: 7042,7051
public void testNew1() throws Exception { [EOL]     testTypes("new 4", TypeCheck.NOT_A_CONSTRUCTOR); [EOL] } <line_num>: 7053,7055
public void testNew2() throws Exception { [EOL]     testTypes("var Math = {}; new Math()", TypeCheck.NOT_A_CONSTRUCTOR); [EOL] } <line_num>: 7057,7059
public void testNew3() throws Exception { [EOL]     testTypes("new Date()"); [EOL] } <line_num>: 7061,7063
public void testNew4() throws Exception { [EOL]     testTypes("/** @constructor */function A(){}; new A();"); [EOL] } <line_num>: 7065,7067
public void testNew5() throws Exception { [EOL]     testTypes("function A(){}; new A();", TypeCheck.NOT_A_CONSTRUCTOR); [EOL] } <line_num>: 7069,7071
public void testNew6() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("/** @constructor */function A(){};" + "var a = new A();"); [EOL]     JSType aType = p.scope.getVar("a").getType(); [EOL]     assertTrue(aType instanceof ObjectType); [EOL]     ObjectType aObjectType = (ObjectType) aType; [EOL]     assertEquals("A", aObjectType.getConstructor().getReferenceName()); [EOL] } <line_num>: 7073,7082
public void testNew7() throws Exception { [EOL]     testTypes("/** @param {Function} opt_constructor */" + "function foo(opt_constructor) {" + "if (opt_constructor) { new opt_constructor; }" + "}"); [EOL] } <line_num>: 7084,7089
public void testNew8() throws Exception { [EOL]     testTypes("/** @param {Function} opt_constructor */" + "function foo(opt_constructor) {" + "new opt_constructor;" + "}"); [EOL] } <line_num>: 7091,7096
public void testNew9() throws Exception { [EOL]     testTypes("/** @param {Function} opt_constructor */" + "function foo(opt_constructor) {" + "new (opt_constructor || Array);" + "}"); [EOL] } <line_num>: 7098,7103
public void testNew10() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @param {Function} opt_constructor */" + "goog.Foo = function (opt_constructor) {" + "new (opt_constructor || Array);" + "}"); [EOL] } <line_num>: 7105,7111
public void testNew11() throws Exception { [EOL]     testTypes("/** @param {Function} c1 */" + "function f(c1) {" + "  var c2 = function(){};" + "  c1.prototype = new c2;" + "}", TypeCheck.NOT_A_CONSTRUCTOR); [EOL] } <line_num>: 7113,7119
public void testNew12() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("var a = new Array();"); [EOL]     Var a = p.scope.getVar("a"); [EOL]     assertTypeEquals(ARRAY_TYPE, a.getType()); [EOL] } <line_num>: 7121,7126
public void testNew13() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("/** @constructor */function FooBar(){};" + "var a = new FooBar();"); [EOL]     Var a = p.scope.getVar("a"); [EOL]     assertTrue(a.getType() instanceof ObjectType); [EOL]     assertEquals("FooBar", a.getType().toString()); [EOL] } <line_num>: 7128,7136
public void testNew14() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("/** @constructor */var FooBar = function(){};" + "var a = new FooBar();"); [EOL]     Var a = p.scope.getVar("a"); [EOL]     assertTrue(a.getType() instanceof ObjectType); [EOL]     assertEquals("FooBar", a.getType().toString()); [EOL] } <line_num>: 7138,7146
public void testNew15() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("var goog = {};" + "/** @constructor */goog.A = function(){};" + "var a = new goog.A();"); [EOL]     Var a = p.scope.getVar("a"); [EOL]     assertTrue(a.getType() instanceof ObjectType); [EOL]     assertEquals("goog.A", a.getType().toString()); [EOL] } <line_num>: 7148,7157
public void testNew16() throws Exception { [EOL]     testTypes("/** \n" + " * @param {string} x \n" + " * @constructor \n" + " */" + "function Foo(x) {}" + "function g() { new Foo(1); }", "actual parameter 1 of Foo does not match formal parameter\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 7159,7170
public void testNew17() throws Exception { [EOL]     testTypes("var goog = {}; goog.x = 3; new goog.x", "cannot instantiate non-constructor"); [EOL] } <line_num>: 7172,7175
public void testNew18() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor */ goog.F = function() {};" + "/** @constructor */ goog.G = goog.F;"); [EOL] } <line_num>: 7177,7181
public void testName1() throws Exception { [EOL]     assertTypeEquals(VOID_TYPE, testNameNode("undefined")); [EOL] } <line_num>: 7183,7185
public void testName2() throws Exception { [EOL]     assertTypeEquals(OBJECT_FUNCTION_TYPE, testNameNode("Object")); [EOL] } <line_num>: 7187,7189
public void testName3() throws Exception { [EOL]     assertTypeEquals(ARRAY_FUNCTION_TYPE, testNameNode("Array")); [EOL] } <line_num>: 7191,7193
public void testName4() throws Exception { [EOL]     assertTypeEquals(DATE_FUNCTION_TYPE, testNameNode("Date")); [EOL] } <line_num>: 7195,7197
public void testName5() throws Exception { [EOL]     assertTypeEquals(REGEXP_FUNCTION_TYPE, testNameNode("RegExp")); [EOL] } <line_num>: 7199,7201
private JSType testNameNode(String name) { [EOL]     Node node = Node.newString(Token.NAME, name); [EOL]     Node parent = new Node(Token.SCRIPT, node); [EOL]     parent.setInputId(new InputId("code")); [EOL]     Node externs = new Node(Token.SCRIPT); [EOL]     externs.setInputId(new InputId("externs")); [EOL]     Node externAndJsRoot = new Node(Token.BLOCK, externs, parent); [EOL]     externAndJsRoot.setIsSyntheticBlock(true); [EOL]     makeTypeCheck().processForTesting(null, parent); [EOL]     return node.getJSType(); [EOL] } <line_num>: 7206,7219
public void testBitOperation1() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){ ~foo(); }", "operator ~ cannot be applied to undefined"); [EOL] } <line_num>: 7221,7224
public void testBitOperation2() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){var a = foo()<<3;}", "operator << cannot be applied to undefined"); [EOL] } <line_num>: 7226,7229
public void testBitOperation3() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){var a = 3<<foo();}", "operator << cannot be applied to undefined"); [EOL] } <line_num>: 7231,7234
public void testBitOperation4() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){var a = foo()>>>3;}", "operator >>> cannot be applied to undefined"); [EOL] } <line_num>: 7236,7239
public void testBitOperation5() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){var a = 3>>>foo();}", "operator >>> cannot be applied to undefined"); [EOL] } <line_num>: 7241,7244
public void testBitOperation6() throws Exception { [EOL]     testTypes("/**@return {!Object}*/function foo(){var a = foo()&3;}", "bad left operand to bitwise operator\n" + "found   : Object\n" + "required: (boolean|null|number|string|undefined)"); [EOL] } <line_num>: 7246,7251
public void testBitOperation7() throws Exception { [EOL]     testTypes("var x = null; x |= undefined; x &= 3; x ^= '3'; x |= true;"); [EOL] } <line_num>: 7253,7255
public void testBitOperation8() throws Exception { [EOL]     testTypes("var x = void 0; x |= new Number(3);"); [EOL] } <line_num>: 7257,7259
public void testBitOperation9() throws Exception { [EOL]     testTypes("var x = void 0; x |= {};", "bad right operand to bitwise operator\n" + "found   : {}\n" + "required: (boolean|null|number|string|undefined)"); [EOL] } <line_num>: 7261,7266
public void testCall1() throws Exception { [EOL]     testTypes("3();", "number expressions are not callable"); [EOL] } <line_num>: 7268,7270
public void testCall2() throws Exception { [EOL]     testTypes("/** @param {!Number} foo*/function bar(foo){ bar('abc'); }", "actual parameter 1 of bar does not match formal parameter\n" + "found   : string\n" + "required: Number"); [EOL] } <line_num>: 7272,7277
public void testCall3() throws Exception { [EOL]     testTypes("/** @type {Function|undefined} */var opt_f;" + "/** @type {some.unknown.type} */var f1;" + "var f2 = opt_f || f1;" + "f2();", "Bad type annotation. Unknown type some.unknown.type"); [EOL] } <line_num>: 7279,7287
public void testCall4() throws Exception { [EOL]     testTypes("/**@param {!RegExp} a*/var foo = function bar(a){ bar('abc'); }", "actual parameter 1 of bar does not match formal parameter\n" + "found   : string\n" + "required: RegExp"); [EOL] } <line_num>: 7289,7294
public void testCall5() throws Exception { [EOL]     testTypes("/**@param {!RegExp} a*/var foo = function bar(a){ foo('abc'); }", "actual parameter 1 of foo does not match formal parameter\n" + "found   : string\n" + "required: RegExp"); [EOL] } <line_num>: 7296,7301
public void testCall6() throws Exception { [EOL]     testTypes("/** @param {!Number} foo*/function bar(foo){}" + "bar('abc');", "actual parameter 1 of bar does not match formal parameter\n" + "found   : string\n" + "required: Number"); [EOL] } <line_num>: 7303,7309
public void testCall7() throws Exception { [EOL]     testTypes("/** @param {!RegExp} a*/var foo = function bar(a){};" + "foo('abc');", "actual parameter 1 of foo does not match formal parameter\n" + "found   : string\n" + "required: RegExp"); [EOL] } <line_num>: 7311,7317
public void testCall8() throws Exception { [EOL]     testTypes("/** @type {Function|number} */var f;f();", "(Function|number) expressions are " + "not callable"); [EOL] } <line_num>: 7319,7323
public void testCall9() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor */ goog.Foo = function() {};" + "/** @param {!goog.Foo} a */ var bar = function(a){};" + "bar('abc');", "actual parameter 1 of bar does not match formal parameter\n" + "found   : string\n" + "required: goog.Foo"); [EOL] } <line_num>: 7325,7334
public void testCall10() throws Exception { [EOL]     testTypes("/** @type {Function} */var f;f();"); [EOL] } <line_num>: 7336,7338
public void testCall11() throws Exception { [EOL]     testTypes("var f = new Function(); f();"); [EOL] } <line_num>: 7340,7342
public void testFunctionCall1() throws Exception { [EOL]     testTypes("/** @param {number} x */ var foo = function(x) {};" + "foo.call(null, 3);"); [EOL] } <line_num>: 7344,7348
public void testFunctionCall2() throws Exception { [EOL]     testTypes("/** @param {number} x */ var foo = function(x) {};" + "foo.call(null, 'bar');", "actual parameter 2 of foo.call does not match formal parameter\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 7350,7357
public void testFunctionCall3() throws Exception { [EOL]     testTypes("/** @param {number} x \n * @constructor */ " + "var Foo = function(x) { this.bar.call(null, x); };" + "/** @type {function(number)} */ Foo.prototype.bar;"); [EOL] } <line_num>: 7359,7364
public void testFunctionCall4() throws Exception { [EOL]     testTypes("/** @param {string} x \n * @constructor */ " + "var Foo = function(x) { this.bar.call(null, x); };" + "/** @type {function(number)} */ Foo.prototype.bar;", "actual parameter 2 of this.bar.call " + "does not match formal parameter\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 7366,7375
public void testFunctionCall5() throws Exception { [EOL]     testTypes("/** @param {Function} handler \n * @constructor */ " + "var Foo = function(handler) { handler.call(this, x); };"); [EOL] } <line_num>: 7377,7381
public void testFunctionCall6() throws Exception { [EOL]     testTypes("/** @param {Function} handler \n * @constructor */ " + "var Foo = function(handler) { handler.apply(this, x); };"); [EOL] } <line_num>: 7383,7387
public void testFunctionCall7() throws Exception { [EOL]     testTypes("/** @param {Function} handler \n * @param {Object} opt_context */ " + "var Foo = function(handler, opt_context) { " + "  handler.call(opt_context, x);" + "};"); [EOL] } <line_num>: 7389,7395
public void testFunctionCall8() throws Exception { [EOL]     testTypes("/** @param {Function} handler \n * @param {Object} opt_context */ " + "var Foo = function(handler, opt_context) { " + "  handler.apply(opt_context, x);" + "};"); [EOL] } <line_num>: 7397,7403
public void testFunctionBind1() throws Exception { [EOL]     testTypes("/** @type {function(string, number): boolean} */" + "function f(x, y) { return true; }" + "f.bind(null, 3);", "actual parameter 2 of f.bind does not match formal parameter\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 7405,7413
public void testFunctionBind2() throws Exception { [EOL]     testTypes("/** @type {function(number): boolean} */" + "function f(x) { return true; }" + "f(f.bind(null, 3)());", "actual parameter 1 of f does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 7415,7423
public void testFunctionBind3() throws Exception { [EOL]     testTypes("/** @type {function(number, string): boolean} */" + "function f(x, y) { return true; }" + "f.bind(null, 3)(true);", "actual parameter 1 of function does not match formal parameter\n" + "found   : boolean\n" + "required: string"); [EOL] } <line_num>: 7425,7433
public void testFunctionBind4() throws Exception { [EOL]     testTypes("/** @param {...number} x */" + "function f(x) {}" + "f.bind(null, 3, 3, 3)(true);", "actual parameter 1 of function does not match formal parameter\n" + "found   : boolean\n" + "required: (number|undefined)"); [EOL] } <line_num>: 7435,7443
public void testFunctionBind5() throws Exception { [EOL]     testTypes("/** @param {...number} x */" + "function f(x) {}" + "f.bind(null, true)(3, 3, 3);", "actual parameter 2 of f.bind does not match formal parameter\n" + "found   : boolean\n" + "required: (number|undefined)"); [EOL] } <line_num>: 7445,7453
public void testGoogBind1() throws Exception { [EOL]     testClosureTypes("var goog = {}; goog.bind = function(var_args) {};" + "/** @type {function(number): boolean} */" + "function f(x, y) { return true; }" + "f(goog.bind(f, null, 'x')());", "actual parameter 1 of f does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 7455,7464
public void testGoogBind2() throws Exception { [EOL]     testClosureTypes("var goog = {}; goog.bind = function(var_args) {};" + "/** @type {function(boolean): boolean} */" + "function f(x, y) { return true; }" + "f(goog.bind(f, null, 'x')());", null); [EOL] } <line_num>: 7466,7475
public void testCast2() throws Exception { [EOL]     testTypes("/** @constructor */function base() {}\n" + "/** @constructor\n @extends {base} */function derived() {}\n" + "/** @type {base} */ var baz = new derived();\n"); [EOL] } <line_num>: 7477,7482
public void testCast3() throws Exception { [EOL]     testTypes("/** @constructor */function base() {}\n" + "/** @constructor @extends {base} */function derived() {}\n" + "/** @type {!derived} */ var baz = new base();\n", "initializing variable\n" + "found   : base\n" + "required: derived"); [EOL] } <line_num>: 7484,7492
public void testCast3a() throws Exception { [EOL]     testTypes("/** @constructor */function Base() {}\n" + "/** @constructor @extends {Base} */function Derived() {}\n" + "var baseInstance = new Base();" + "/** @type {!Derived} */ var baz = baseInstance;\n", "initializing variable\n" + "found   : Base\n" + "required: Derived"); [EOL] } <line_num>: 7494,7503
public void testCast4() throws Exception { [EOL]     testTypes("/** @constructor */function base() {}\n" + "/** @constructor\n * @extends {base} */function derived() {}\n" + "/** @type {!derived} */ var baz = " + "/** @type {!derived} */(new base());\n"); [EOL] } <line_num>: 7505,7511
public void testCast5() throws Exception { [EOL]     testTypes("/** @constructor */function foo() {}\n" + "/** @constructor */function bar() {}\n" + "var baz = /** @type {!foo} */(new bar);\n", "invalid cast - must be a subtype or supertype\n" + "from: bar\n" + "to  : foo"); [EOL] } <line_num>: 7513,7521
public void testCast5a() throws Exception { [EOL]     testTypes("/** @constructor */function foo() {}\n" + "/** @constructor */function bar() {}\n" + "var barInstance = new bar;\n" + "var baz = /** @type {!foo} */(barInstance);\n", "invalid cast - must be a subtype or supertype\n" + "from: bar\n" + "to  : foo"); [EOL] } <line_num>: 7523,7532
public void testCast6() throws Exception { [EOL]     testTypes("/** @constructor */function foo() {}\n" + "/** @constructor \n @extends foo */function bar() {}\n" + "var baz = /** @type {!bar} */(new bar);\n" + "var baz = /** @type {!foo} */(new foo);\n" + "var baz = /** @type {bar} */(new bar);\n" + "var baz = /** @type {foo} */(new foo);\n" + "var baz = /** @type {!foo} */(new bar);\n" + "var baz = /** @type {!bar} */(new foo);\n" + "var baz = /** @type {foo} */(new bar);\n" + "var baz = /** @type {bar} */(new foo);\n"); [EOL] } <line_num>: 7534,7546
public void testCast7() throws Exception { [EOL]     testTypes("var x = /** @type {foo} */ (new Object());", "Bad type annotation. Unknown type foo"); [EOL] } <line_num>: 7548,7551
public void testCast8() throws Exception { [EOL]     testTypes("function f() { return /** @type {foo} */ (new Object()); }", "Bad type annotation. Unknown type foo"); [EOL] } <line_num>: 7553,7556
public void testCast9() throws Exception { [EOL]     testTypes("var foo = {};" + "function f() { return /** @type {foo} */ (new Object()); }", "Bad type annotation. Unknown type foo"); [EOL] } <line_num>: 7558,7562
public void testCast10() throws Exception { [EOL]     testTypes("var foo = function() {};" + "function f() { return /** @type {foo} */ (new Object()); }", "Bad type annotation. Unknown type foo"); [EOL] } <line_num>: 7564,7568
public void testCast11() throws Exception { [EOL]     testTypes("var goog = {}; goog.foo = {};" + "function f() { return /** @type {goog.foo} */ (new Object()); }", "Bad type annotation. Unknown type goog.foo"); [EOL] } <line_num>: 7570,7574
public void testCast12() throws Exception { [EOL]     testTypes("var goog = {}; goog.foo = function() {};" + "function f() { return /** @type {goog.foo} */ (new Object()); }", "Bad type annotation. Unknown type goog.foo"); [EOL] } <line_num>: 7576,7580
public void testCast13() throws Exception { [EOL]     testClosureTypes("var goog = {}; " + "goog.addDependency('zzz.js', ['goog.foo'], []);" + "goog.foo = function() {};" + "function f() { return /** @type {goog.foo} */ (new Object()); }", "Bad type annotation. Unknown type goog.foo"); [EOL] } <line_num>: 7582,7590
public void testCast14() throws Exception { [EOL]     testClosureTypes("var goog = {}; " + "goog.addDependency('zzz.js', ['goog.bar'], []);" + "function f() { return /** @type {goog.bar} */ (new Object()); }", null); [EOL] } <line_num>: 7592,7599
public void testCast15() throws Exception { [EOL]     testTypes("for (var i = 0; i < 10; i++) {" + "var x = /** @type {Object|number} */ ({foo: 3});" + "/** @param {number} x */ function f(x) {}" + "f(x.foo);" + "f([].foo);" + "}", "Property foo never defined on Array"); [EOL] } <line_num>: 7601,7617
public void testCast16() throws Exception { [EOL]     testTypes("for (var i = 0; i < 10; i++) {" + "var x = /** @type {Object|number} */ (" + "  {/** @type {string} */ foo: 3});" + "}", "assignment to property foo of Object\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 7619,7629
public void testCast17a() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {} \n" + "/** @type {Foo} */ var x = /** @type {Foo} */ (y)"); [EOL]     testTypes("/** @constructor */ function Foo() {} \n" + "/** @type {Foo} */ var x = (/** @type {Foo} */ y)"); [EOL] } <line_num>: 7631,7638
public void testCast17b() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {} \n" + "/** @type {Foo} */ var x = /** @type {Foo} */ ({})"); [EOL] } <line_num>: 7640,7644
public void testCast18() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {} \n" + "/** @type {Foo} */ var x = (/** @type {Foo} */ {})", "Type annotations are not allowed here. " + "Are you missing parentheses?"); [EOL]     testTypes("/** @constructor */ function Foo() {} \n" + "/** @type {Foo} */ var x = /** @type {Foo} */ {}", "Type annotations are not allowed here. " + "Are you missing parentheses?"); [EOL] } <line_num>: 7646,7659
public void testCast19() throws Exception { [EOL]     testTypes("var x = 'string';\n" + "/** @type {number} */\n" + "var y = /** @type {number} */(x);", "invalid cast - must be a subtype or supertype\n" + "from: string\n" + "to  : number"); [EOL] } <line_num>: 7661,7669
public void testCast20() throws Exception { [EOL]     testTypes("/** @enum {boolean|null} */\n" + "var X = {" + "  AA: true," + "  BB: false," + "  CC: null" + "};\n" + "var y = /** @type {X} */(true);"); [EOL] } <line_num>: 7671,7680
public void testCast21() throws Exception { [EOL]     testTypes("/** @enum {boolean|null} */\n" + "var X = {" + "  AA: true," + "  BB: false," + "  CC: null" + "};\n" + "var value = true;\n" + "var y = /** @type {X} */(value);"); [EOL] } <line_num>: 7682,7692
public void testCast22() throws Exception { [EOL]     testTypes("var x = null;\n" + "var y = /** @type {number} */(x);", "invalid cast - must be a subtype or supertype\n" + "from: null\n" + "to  : number"); [EOL] } <line_num>: 7694,7701
public void testCast23() throws Exception { [EOL]     testTypes("var x = null;\n" + "var y = /** @type {Number} */(x);"); [EOL] } <line_num>: 7703,7707
public void testCast24() throws Exception { [EOL]     testTypes("var x = undefined;\n" + "var y = /** @type {number} */(x);", "invalid cast - must be a subtype or supertype\n" + "from: undefined\n" + "to  : number"); [EOL] } <line_num>: 7709,7716
public void testCast25() throws Exception { [EOL]     testTypes("var x = undefined;\n" + "var y = /** @type {number|undefined} */(x);"); [EOL] } <line_num>: 7718,7722
public void testCast26() throws Exception { [EOL]     testTypes("function fn(dir) {\n" + "  var node = dir ? 1 : 2;\n" + "  fn(/** @type {number} */ (node));\n" + "}"); [EOL] } <line_num>: 7724,7730
public void testCast27() throws Exception { [EOL]     testTypes("/** @interface */ function I() {}\n" + "/** @constructor */ function C() {}\n" + "var x = new C();\n" + "var y = /** @type {I} */(x);"); [EOL] } <line_num>: 7732,7739
public void testCast27a() throws Exception { [EOL]     testTypes("/** @interface */ function I() {}\n" + "/** @constructor */ function C() {}\n" + "/** @type {C} */ var x ;\n" + "var y = /** @type {I} */(x);"); [EOL] } <line_num>: 7741,7748
public void testCast28() throws Exception { [EOL]     testTypes("/** @interface */ function I() {}\n" + "/** @constructor */ function C() {}\n" + "/** @type {!I} */ var x;\n" + "var y = /** @type {C} */(x);"); [EOL] } <line_num>: 7750,7757
public void testCast28a() throws Exception { [EOL]     testTypes("/** @interface */ function I() {}\n" + "/** @constructor */ function C() {}\n" + "/** @type {I} */ var x;\n" + "var y = /** @type {C} */(x);"); [EOL] } <line_num>: 7759,7766
public void testCast29a() throws Exception { [EOL]     testTypes("/** @constructor */ function C() {}\n" + "var x = new C();\n" + "var y = /** @type {{remoteJids: Array, sessionId: string}} */(x);"); [EOL] } <line_num>: 7768,7774
public void testCast29b() throws Exception { [EOL]     testTypes("/** @constructor */ function C() {}\n" + "/** @type {C} */ var x;\n" + "var y = /** @type {{prop1: Array, prop2: string}} */(x);"); [EOL] } <line_num>: 7776,7782
public void testCast29c() throws Exception { [EOL]     testTypes("/** @constructor */ function C() {}\n" + "/** @type {{remoteJids: Array, sessionId: string}} */ var x ;\n" + "var y = /** @type {C} */(x);"); [EOL] } <line_num>: 7784,7790
public void testCast30() throws Exception { [EOL]     testTypes("/** @constructor */ function C() {}\n" + "/** @type {function():string} */ var x ;\n" + "var y = /** @type {function():?} */(x);"); [EOL] } <line_num>: 7792,7798
public void testCast31() throws Exception { [EOL]     testTypes("/** @constructor */ function C() {}\n" + "/** @type {function(*)} */ var x ;\n" + "var y = /** @type {function(string)} */(x);"); [EOL] } <line_num>: 7800,7806
public void testCast32() throws Exception { [EOL]     testTypes("/** @constructor */ function C() {}\n" + "/** @type {Object} */ var x ;\n" + "var y = /** @type {null|{length:number}} */(x);"); [EOL] } <line_num>: 7808,7813
public void testCast33() throws Exception { [EOL]     testTypes("/** @constructor */ function C() {}\n" + "/** @type {null|undefined} */ var x ;\n" + "var y = /** @type {string?|undefined} */(x);"); [EOL]     testTypes("/** @constructor */ function C() {}\n" + "/** @type {null|undefined} */ var x ;\n" + "var y = /** @type {string|undefined} */(x);"); [EOL]     testTypes("/** @constructor */ function C() {}\n" + "/** @type {null|undefined} */ var x ;\n" + "var y = /** @type {string?} */(x);"); [EOL]     testTypes("/** @constructor */ function C() {}\n" + "/** @type {null|undefined} */ var x ;\n" + "var y = /** @type {null} */(x);"); [EOL] } <line_num>: 7815,7834
public void testCast34a() throws Exception { [EOL]     testTypes("/** @constructor */ function C() {}\n" + "/** @type {Object} */ var x ;\n" + "var y = /** @type {Function} */(x);"); [EOL] } <line_num>: 7836,7841
public void testCast34b() throws Exception { [EOL]     testTypes("/** @constructor */ function C() {}\n" + "/** @type {Function} */ var x ;\n" + "var y = /** @type {Object} */(x);"); [EOL] } <line_num>: 7843,7848
public void testNestedCasts() throws Exception { [EOL]     testTypes("/** @constructor */var T = function() {};\n" + "/** @constructor */var V = function() {};\n" + "/**\n" + "* @param {boolean} b\n" + "* @return {T|V}\n" + "*/\n" + "function f(b) { return b ? new T() : new V(); }\n" + "/**\n" + "* @param {boolean} b\n" + "* @return {boolean|undefined}\n" + "*/\n" + "function g(b) { return b ? true : undefined; }\n" + "/** @return {T} */\n" + "function h() {\n" + "return /** @type {T} */ (f(/** @type {boolean} */ (g(true))));\n" + "}"); [EOL] } <line_num>: 7850,7867
public void testNativeCast1() throws Exception { [EOL]     testTypes("/** @param {number} x */ function f(x) {}" + "f(String(true));", "actual parameter 1 of f does not match formal parameter\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 7869,7876
public void testNativeCast2() throws Exception { [EOL]     testTypes("/** @param {string} x */ function f(x) {}" + "f(Number(true));", "actual parameter 1 of f does not match formal parameter\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 7878,7885
public void testNativeCast3() throws Exception { [EOL]     testTypes("/** @param {number} x */ function f(x) {}" + "f(Boolean(''));", "actual parameter 1 of f does not match formal parameter\n" + "found   : boolean\n" + "required: number"); [EOL] } <line_num>: 7887,7894
public void testNativeCast4() throws Exception { [EOL]     testTypes("/** @param {number} x */ function f(x) {}" + "f(Error(''));", "actual parameter 1 of f does not match formal parameter\n" + "found   : Error\n" + "required: number"); [EOL] } <line_num>: 7896,7903
public void testBadConstructorCall() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "Foo();", "Constructor function (new:Foo): undefined should be called " + "with the \"new\" keyword"); [EOL] } <line_num>: 7905,7911
public void testTypeof() throws Exception { [EOL]     testTypes("/**@return {void}*/function foo(){ var a = typeof foo(); }"); [EOL] } <line_num>: 7913,7915
public void testTypeof2() throws Exception { [EOL]     testTypes("function f(){ if (typeof 123 == 'numbr') return 321; }", "unknown type: numbr"); [EOL] } <line_num>: 7917,7920
public void testTypeof3() throws Exception { [EOL]     testTypes("function f() {" + "return (typeof 123 == 'number' ||" + "typeof 123 == 'string' ||" + "typeof 123 == 'boolean' ||" + "typeof 123 == 'undefined' ||" + "typeof 123 == 'function' ||" + "typeof 123 == 'object' ||" + "typeof 123 == 'unknown'); }"); [EOL] } <line_num>: 7922,7931
public void testConstructorType1() throws Exception { [EOL]     testTypes("/**@constructor*/function Foo(){}" + "/**@type{!Foo}*/var f = new Date();", "initializing variable\n" + "found   : Date\n" + "required: Foo"); [EOL] } <line_num>: 7933,7939
public void testConstructorType2() throws Exception { [EOL]     testTypes("/**@constructor*/function Foo(){\n" + "/**@type{Number}*/this.bar = new Number(5);\n" + "}\n" + "/**@type{Foo}*/var f = new Foo();\n" + "/**@type{Number}*/var n = f.bar;"); [EOL] } <line_num>: 7941,7947
public void testConstructorType3() throws Exception { [EOL]     testTypes("/**@type{Foo}*/var f = new Foo();\n" + "/**@type{Number}*/var n = f.bar;" + "/**@constructor*/function Foo(){\n" + "/**@type{Number}*/this.bar = new Number(5);\n" + "}\n"); [EOL] } <line_num>: 7949,7957
public void testConstructorType4() throws Exception { [EOL]     testTypes("/**@constructor*/function Foo(){\n" + "/**@type{!Number}*/this.bar = new Number(5);\n" + "}\n" + "/**@type{!Foo}*/var f = new Foo();\n" + "/**@type{!String}*/var n = f.bar;", "initializing variable\n" + "found   : Number\n" + "required: String"); [EOL] } <line_num>: 7959,7968
public void testConstructorType5() throws Exception { [EOL]     testTypes("/**@constructor*/function Foo(){}\n" + "if (Foo){}\n"); [EOL] } <line_num>: 7970,7973
public void testConstructorType6() throws Exception { [EOL]     testTypes("/** @constructor */\n" + "function bar() {}\n" + "function _foo() {\n" + " /** @param {bar} x */\n" + "  function f(x) {}\n" + "}"); [EOL] } <line_num>: 7975,7982
public void testConstructorType7() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("/** @constructor */function A(){};"); [EOL]     JSType type = p.scope.getVar("A").getType(); [EOL]     assertTrue(type instanceof FunctionType); [EOL]     FunctionType fType = (FunctionType) type; [EOL]     assertEquals("A", fType.getReferenceName()); [EOL] } <line_num>: 7984,7992
public void testConstructorType8() throws Exception { [EOL]     testTypes("var ns = {};" + "ns.create = function() { return function() {}; };" + "/** @constructor */ ns.Foo = ns.create();" + "ns.Foo.prototype = {x: 0, y: 0};" + "/**\n" + " * @param {ns.Foo} foo\n" + " * @return {string}\n" + " */\n" + "function f(foo) {" + "  return foo.x;" + "}", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 7994,8010
public void testConstructorType9() throws Exception { [EOL]     testTypes("var ns = {};" + "ns.create = function() { return function() {}; };" + "ns.extend = function(x) { return x; };" + "/** @constructor */ ns.Foo = ns.create();" + "ns.Foo.prototype = ns.extend({x: 0, y: 0});" + "/**\n" + " * @param {ns.Foo} foo\n" + " * @return {string}\n" + " */\n" + "function f(foo) {" + "  return foo.x;" + "}"); [EOL] } <line_num>: 8012,8026
public void testConstructorType10() throws Exception { [EOL]     testTypes("/** @constructor */" + "function NonStr() {}" + "/**\n" + " * @constructor\n" + " * @struct\n" + " * @extends{NonStr}\n" + " */" + "function NonStrKid() {}", "NonStrKid cannot extend this type; " + "structs can only extend structs"); [EOL] } <line_num>: 8028,8039
public void testConstructorType11() throws Exception { [EOL]     testTypes("/** @constructor */" + "function NonDict() {}" + "/**\n" + " * @constructor\n" + " * @dict\n" + " * @extends{NonDict}\n" + " */" + "function NonDictKid() {}", "NonDictKid cannot extend this type; " + "dicts can only extend dicts"); [EOL] } <line_num>: 8041,8052
public void testConstructorType12() throws Exception { [EOL]     testTypes("/**\n" + " * @constructor\n" + " * @struct\n" + " */\n" + "function Bar() {}\n" + "Bar.prototype = {};\n", "Bar cannot extend this type; " + "structs can only extend structs"); [EOL] } <line_num>: 8054,8063
public void testBadStruct() throws Exception { [EOL]     testTypes("/** @struct */function Struct1() {}", "@struct used without @constructor for Struct1"); [EOL] } <line_num>: 8065,8068
public void testBadDict() throws Exception { [EOL]     testTypes("/** @dict */function Dict1() {}", "@dict used without @constructor for Dict1"); [EOL] } <line_num>: 8070,8073
public void testAnonymousPrototype1() throws Exception { [EOL]     testTypes("var ns = {};" + "/** @constructor */ ns.Foo = function() {" + "  this.bar(3, 5);" + "};" + "ns.Foo.prototype = {" + "  bar: function(x) {}" + "};", "Function ns.Foo.prototype.bar: called with 2 argument(s). " + "Function requires at least 1 argument(s) and no more " + "than 1 argument(s)."); [EOL] } <line_num>: 8075,8087
public void testAnonymousPrototype2() throws Exception { [EOL]     testTypes("/** @interface */ var Foo = function() {};" + "Foo.prototype = {" + "  foo: function(x) {}" + "};" + "/**\n" + " * @constructor\n" + " * @implements {Foo}\n" + " */ var Bar = function() {};", "property foo on interface Foo is not implemented by type Bar"); [EOL] } <line_num>: 8089,8100
public void testAnonymousType1() throws Exception { [EOL]     testTypes("function f() { return {}; }" + "/** @constructor */\n" + "f().bar = function() {};"); [EOL] } <line_num>: 8102,8106
public void testAnonymousType2() throws Exception { [EOL]     testTypes("function f() { return {}; }" + "/** @interface */\n" + "f().bar = function() {};"); [EOL] } <line_num>: 8108,8112
public void testAnonymousType3() throws Exception { [EOL]     testTypes("function f() { return {}; }" + "/** @enum */\n" + "f().bar = {FOO: 1};"); [EOL] } <line_num>: 8114,8118
public void testBang1() throws Exception { [EOL]     testTypes("/** @param {Object} x\n@return {!Object} */\n" + "function f(x) { return x; }", "inconsistent return type\n" + "found   : (Object|null)\n" + "required: Object"); [EOL] } <line_num>: 8120,8126
public void testBang2() throws Exception { [EOL]     testTypes("/** @param {Object} x\n@return {!Object} */\n" + "function f(x) { return x ? x : new Object(); }"); [EOL] } <line_num>: 8128,8131
public void testBang3() throws Exception { [EOL]     testTypes("/** @param {Object} x\n@return {!Object} */\n" + "function f(x) { return /** @type {!Object} */ (x); }"); [EOL] } <line_num>: 8133,8136
public void testBang4() throws Exception { [EOL]     testTypes("/**@param {Object} x\n@param {Object} y\n@return {boolean}*/\n" + "function f(x, y) {\n" + "if (typeof x != 'undefined') { return x == y; }\n" + "else { return x != y; }\n}"); [EOL] } <line_num>: 8138,8143
public void testBang5() throws Exception { [EOL]     testTypes("/**@param {Object} x\n@param {Object} y\n@return {boolean}*/\n" + "function f(x, y) { return !!x && x == y; }"); [EOL] } <line_num>: 8145,8148
public void testBang6() throws Exception { [EOL]     testTypes("/** @param {Object?} x\n@return {Object} */\n" + "function f(x) { return x; }"); [EOL] } <line_num>: 8150,8153
public void testBang7() throws Exception { [EOL]     testTypes("/**@param {(Object,string,null)} x\n" + "@return {(Object,string)}*/function f(x) { return x; }"); [EOL] } <line_num>: 8155,8158
public void testDefinePropertyOnNullableObject1() throws Exception { [EOL]     testTypes("/** @type {Object} */ var n = {};\n" + "/** @type {number} */ n.x = 1;\n" + "/** @return {boolean} */function f() { return n.x; }", "inconsistent return type\n" + "found   : number\n" + "required: boolean"); [EOL] } <line_num>: 8160,8167
public void testDefinePropertyOnNullableObject2() throws Exception { [EOL]     testTypes("/** @constructor */ var T = function() {};\n" + "/** @param {T} t\n@return {boolean} */function f(t) {\n" + "t.x = 1; return t.x; }", "inconsistent return type\n" + "found   : number\n" + "required: boolean"); [EOL] } <line_num>: 8169,8176
public void testUnknownConstructorInstanceType1() throws Exception { [EOL]     testTypes("/** @return {Array} */ function g(f) { return new f(); }"); [EOL] } <line_num>: 8178,8180
public void testUnknownConstructorInstanceType2() throws Exception { [EOL]     testTypes("function g(f) { return /** @type Array */(new f()); }"); [EOL] } <line_num>: 8182,8184
public void testUnknownConstructorInstanceType3() throws Exception { [EOL]     testTypes("function g(f) { var x = new f(); x.a = 1; return x; }"); [EOL] } <line_num>: 8186,8188
public void testUnknownPrototypeChain() throws Exception { [EOL]     testTypes("/**\n" + "* @param {Object} co\n" + " * @return {Object}\n" + " */\n" + "function inst(co) {\n" + " /** @constructor */\n" + " var c = function() {};\n" + " c.prototype = co.prototype;\n" + " return new c;\n" + "}"); [EOL] } <line_num>: 8190,8201
public void testNamespacedConstructor() throws Exception { [EOL]     Node root = parseAndTypeCheck("var goog = {};" + "/** @constructor */ goog.MyClass = function() {};" + "/** @return {!goog.MyClass} */ " + "function foo() { return new goog.MyClass(); }"); [EOL]     JSType typeOfFoo = root.getLastChild().getJSType(); [EOL]     assert (typeOfFoo instanceof FunctionType); [EOL]     JSType retType = ((FunctionType) typeOfFoo).getReturnType(); [EOL]     assert (retType instanceof ObjectType); [EOL]     assertEquals("goog.MyClass", ((ObjectType) retType).getReferenceName()); [EOL] } <line_num>: 8203,8216
public void testComplexNamespace() throws Exception { [EOL]     String js = "var goog = {};" + "goog.foo = {};" + "goog.foo.bar = 5;"; [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope(js); [EOL]     JSType googScopeType = p.scope.getVar("goog").getType(); [EOL]     assertTrue(googScopeType instanceof ObjectType); [EOL]     assertTrue("foo property not present on goog type", ((ObjectType) googScopeType).hasProperty("foo")); [EOL]     assertFalse("bar property present on goog type", ((ObjectType) googScopeType).hasProperty("bar")); [EOL]     Node varNode = p.root.getFirstChild(); [EOL]     assertEquals(Token.VAR, varNode.getType()); [EOL]     JSType googNodeType = varNode.getFirstChild().getJSType(); [EOL]     assertTrue(googNodeType instanceof ObjectType); [EOL]     assertTrue(googScopeType == googNodeType); [EOL]     Node getpropFoo1 = varNode.getNext().getFirstChild().getFirstChild(); [EOL]     assertEquals(Token.GETPROP, getpropFoo1.getType()); [EOL]     assertEquals("goog", getpropFoo1.getFirstChild().getString()); [EOL]     JSType googGetpropFoo1Type = getpropFoo1.getFirstChild().getJSType(); [EOL]     assertTrue(googGetpropFoo1Type instanceof ObjectType); [EOL]     assertTrue(googGetpropFoo1Type == googScopeType); [EOL]     JSType googFooType = ((ObjectType) googScopeType).getPropertyType("foo"); [EOL]     assertTrue(googFooType instanceof ObjectType); [EOL]     Node getpropFoo2 = varNode.getNext().getNext().getFirstChild().getFirstChild().getFirstChild(); [EOL]     assertEquals(Token.GETPROP, getpropFoo2.getType()); [EOL]     assertEquals("goog", getpropFoo2.getFirstChild().getString()); [EOL]     JSType googGetpropFoo2Type = getpropFoo2.getFirstChild().getJSType(); [EOL]     assertTrue(googGetpropFoo2Type instanceof ObjectType); [EOL]     assertTrue(googGetpropFoo2Type == googScopeType); [EOL]     JSType googFooGetprop2Type = getpropFoo2.getJSType(); [EOL]     assertTrue("goog.foo incorrectly annotated in goog.foo.bar selection", googFooGetprop2Type instanceof ObjectType); [EOL]     ObjectType googFooGetprop2ObjectType = (ObjectType) googFooGetprop2Type; [EOL]     assertFalse("foo property present on goog.foo type", googFooGetprop2ObjectType.hasProperty("foo")); [EOL]     assertTrue("bar property not present on goog.foo type", googFooGetprop2ObjectType.hasProperty("bar")); [EOL]     assertTypeEquals("bar property on goog.foo type incorrectly inferred", NUMBER_TYPE, googFooGetprop2ObjectType.getPropertyType("bar")); [EOL] } <line_num>: 8218,8281
public void testAddingMethodsUsingPrototypeIdiomSimpleNamespace() throws Exception { [EOL]     Node js1Node = parseAndTypeCheck("/** @constructor */function A() {}" + "A.prototype.m1 = 5"); [EOL]     ObjectType instanceType = getInstanceType(js1Node); [EOL]     assertEquals(NATIVE_PROPERTIES_COUNT + 1, instanceType.getPropertiesCount()); [EOL]     checkObjectType(instanceType, "m1", NUMBER_TYPE); [EOL] } <line_num>: 8283,8293
public void testAddingMethodsUsingPrototypeIdiomComplexNamespace1() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("var goog = {};" + "goog.A = /** @constructor */function() {};" + "/** @type number */goog.A.prototype.m1 = 5"); [EOL]     testAddingMethodsUsingPrototypeIdiomComplexNamespace(p); [EOL] } <line_num>: 8295,8303
public void testAddingMethodsUsingPrototypeIdiomComplexNamespace2() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("var goog = {};" + "/** @constructor */goog.A = function() {};" + "/** @type number */goog.A.prototype.m1 = 5"); [EOL]     testAddingMethodsUsingPrototypeIdiomComplexNamespace(p); [EOL] } <line_num>: 8305,8313
private void testAddingMethodsUsingPrototypeIdiomComplexNamespace(TypeCheckResult p) { [EOL]     ObjectType goog = (ObjectType) p.scope.getVar("goog").getType(); [EOL]     assertEquals(NATIVE_PROPERTIES_COUNT + 1, goog.getPropertiesCount()); [EOL]     JSType googA = goog.getPropertyType("A"); [EOL]     assertNotNull(googA); [EOL]     assertTrue(googA instanceof FunctionType); [EOL]     FunctionType googAFunction = (FunctionType) googA; [EOL]     ObjectType classA = googAFunction.getInstanceType(); [EOL]     assertEquals(NATIVE_PROPERTIES_COUNT + 1, classA.getPropertiesCount()); [EOL]     checkObjectType(classA, "m1", NUMBER_TYPE); [EOL] } <line_num>: 8315,8326
public void testAddingMethodsPrototypeIdiomAndObjectLiteralSimpleNamespace() throws Exception { [EOL]     Node js1Node = parseAndTypeCheck("/** @constructor */function A() {}" + "A.prototype = {m1: 5, m2: true}"); [EOL]     ObjectType instanceType = getInstanceType(js1Node); [EOL]     assertEquals(NATIVE_PROPERTIES_COUNT + 2, instanceType.getPropertiesCount()); [EOL]     checkObjectType(instanceType, "m1", NUMBER_TYPE); [EOL]     checkObjectType(instanceType, "m2", BOOLEAN_TYPE); [EOL] } <line_num>: 8328,8339
public void testDontAddMethodsIfNoConstructor() throws Exception { [EOL]     Node js1Node = parseAndTypeCheck("function A() {}" + "A.prototype = {m1: 5, m2: true}"); [EOL]     JSType functionAType = js1Node.getFirstChild().getJSType(); [EOL]     assertEquals("function (): undefined", functionAType.toString()); [EOL]     assertTypeEquals(UNKNOWN_TYPE, U2U_FUNCTION_TYPE.getPropertyType("m1")); [EOL]     assertTypeEquals(UNKNOWN_TYPE, U2U_FUNCTION_TYPE.getPropertyType("m2")); [EOL] } <line_num>: 8341,8353
public void testFunctionAssignement() throws Exception { [EOL]     testTypes("/**" + "* @param {string} ph0" + "* @param {string} ph1" + "* @return {string}" + "*/" + "function MSG_CALENDAR_ACCESS_ERROR(ph0, ph1) {return ''}" + "/** @type {Function} */" + "var MSG_CALENDAR_ADD_ERROR = MSG_CALENDAR_ACCESS_ERROR;"); [EOL] } <line_num>: 8355,8364
public void testAddMethodsPrototypeTwoWays() throws Exception { [EOL]     Node js1Node = parseAndTypeCheck("/** @constructor */function A() {}" + "A.prototype = {m1: 5, m2: true};" + "A.prototype.m3 = 'third property!';"); [EOL]     ObjectType instanceType = getInstanceType(js1Node); [EOL]     assertEquals("A", instanceType.toString()); [EOL]     assertEquals(NATIVE_PROPERTIES_COUNT + 3, instanceType.getPropertiesCount()); [EOL]     checkObjectType(instanceType, "m1", NUMBER_TYPE); [EOL]     checkObjectType(instanceType, "m2", BOOLEAN_TYPE); [EOL]     checkObjectType(instanceType, "m3", STRING_TYPE); [EOL] } <line_num>: 8366,8379
public void testPrototypePropertyTypes() throws Exception { [EOL]     Node js1Node = parseAndTypeCheck("/** @constructor */function A() {\n" + "  /** @type string */ this.m1;\n" + "  /** @type Object? */ this.m2 = {};\n" + "  /** @type boolean */ this.m3;\n" + "}\n" + "/** @type string */ A.prototype.m4;\n" + "/** @type number */ A.prototype.m5 = 0;\n" + "/** @type boolean */ A.prototype.m6;\n"); [EOL]     ObjectType instanceType = getInstanceType(js1Node); [EOL]     assertEquals(NATIVE_PROPERTIES_COUNT + 6, instanceType.getPropertiesCount()); [EOL]     checkObjectType(instanceType, "m1", STRING_TYPE); [EOL]     checkObjectType(instanceType, "m2", createUnionType(OBJECT_TYPE, NULL_TYPE)); [EOL]     checkObjectType(instanceType, "m3", BOOLEAN_TYPE); [EOL]     checkObjectType(instanceType, "m4", STRING_TYPE); [EOL]     checkObjectType(instanceType, "m5", NUMBER_TYPE); [EOL]     checkObjectType(instanceType, "m6", BOOLEAN_TYPE); [EOL] } <line_num>: 8381,8402
public void testValueTypeBuiltInPrototypePropertyType() throws Exception { [EOL]     Node node = parseAndTypeCheck("\"x\".charAt(0)"); [EOL]     assertTypeEquals(STRING_TYPE, node.getFirstChild().getFirstChild().getJSType()); [EOL] } <line_num>: 8404,8407
public void testDeclareBuiltInConstructor() throws Exception { [EOL]     Node node = parseAndTypeCheck("/** @constructor */ var String = function(opt_str) {};\n" + "(new String(\"x\")).charAt(0)"); [EOL]     assertTypeEquals(STRING_TYPE, node.getLastChild().getFirstChild().getJSType()); [EOL] } <line_num>: 8409,8416
public void testExtendBuiltInType1() throws Exception { [EOL]     String externs = "/** @constructor */ var String = function(opt_str) {};\n" + "/**\n" + "* @param {number} start\n" + "* @param {number} opt_length\n" + "* @return {string}\n" + "*/\n" + "String.prototype.substr = function(start, opt_length) {};\n"; [EOL]     Node n1 = parseAndTypeCheck(externs + "(new String(\"x\")).substr(0,1);"); [EOL]     assertTypeEquals(STRING_TYPE, n1.getLastChild().getFirstChild().getJSType()); [EOL] } <line_num>: 8418,8429
public void testExtendBuiltInType2() throws Exception { [EOL]     String externs = "/** @constructor */ var String = function(opt_str) {};\n" + "/**\n" + "* @param {number} start\n" + "* @param {number} opt_length\n" + "* @return {string}\n" + "*/\n" + "String.prototype.substr = function(start, opt_length) {};\n"; [EOL]     Node n2 = parseAndTypeCheck(externs + "\"x\".substr(0,1);"); [EOL]     assertTypeEquals(STRING_TYPE, n2.getLastChild().getFirstChild().getJSType()); [EOL] } <line_num>: 8431,8442
public void testExtendFunction1() throws Exception { [EOL]     Node n = parseAndTypeCheck("/**@return {number}*/Function.prototype.f = " + "function() { return 1; };\n" + "(new Function()).f();"); [EOL]     JSType type = n.getLastChild().getLastChild().getJSType(); [EOL]     assertTypeEquals(NUMBER_TYPE, type); [EOL] } <line_num>: 8444,8450
public void testExtendFunction2() throws Exception { [EOL]     Node n = parseAndTypeCheck("/**@return {number}*/Function.prototype.f = " + "function() { return 1; };\n" + "(function() {}).f();"); [EOL]     JSType type = n.getLastChild().getLastChild().getJSType(); [EOL]     assertTypeEquals(NUMBER_TYPE, type); [EOL] } <line_num>: 8452,8458
public void testInheritanceCheck1() throws Exception { [EOL]     testTypes("/** @constructor */function Super() {};" + "/** @constructor\n @extends {Super} */function Sub() {};" + "Sub.prototype.foo = function() {};"); [EOL] } <line_num>: 8460,8465
public void testInheritanceCheck2() throws Exception { [EOL]     testTypes("/** @constructor */function Super() {};" + "/** @constructor\n @extends {Super} */function Sub() {};" + "/** @override */Sub.prototype.foo = function() {};", "property foo not defined on any superclass of Sub"); [EOL] } <line_num>: 8467,8473
public void testInheritanceCheck3() throws Exception { [EOL]     testTypes("/** @constructor */function Super() {};" + "Super.prototype.foo = function() {};" + "/** @constructor\n @extends {Super} */function Sub() {};" + "Sub.prototype.foo = function() {};", "property foo already defined on superclass Super; " + "use @override to override it"); [EOL] } <line_num>: 8475,8483
public void testInheritanceCheck4() throws Exception { [EOL]     testTypes("/** @constructor */function Super() {};" + "Super.prototype.foo = function() {};" + "/** @constructor\n @extends {Super} */function Sub() {};" + "/** @override */Sub.prototype.foo = function() {};"); [EOL] } <line_num>: 8485,8491
public void testInheritanceCheck5() throws Exception { [EOL]     testTypes("/** @constructor */function Root() {};" + "Root.prototype.foo = function() {};" + "/** @constructor\n @extends {Root} */function Super() {};" + "/** @constructor\n @extends {Super} */function Sub() {};" + "Sub.prototype.foo = function() {};", "property foo already defined on superclass Root; " + "use @override to override it"); [EOL] } <line_num>: 8493,8502
public void testInheritanceCheck6() throws Exception { [EOL]     testTypes("/** @constructor */function Root() {};" + "Root.prototype.foo = function() {};" + "/** @constructor\n @extends {Root} */function Super() {};" + "/** @constructor\n @extends {Super} */function Sub() {};" + "/** @override */Sub.prototype.foo = function() {};"); [EOL] } <line_num>: 8504,8511
public void testInheritanceCheck7() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor */goog.Super = function() {};" + "goog.Super.prototype.foo = 3;" + "/** @constructor\n @extends {goog.Super} */goog.Sub = function() {};" + "goog.Sub.prototype.foo = 5;"); [EOL] } <line_num>: 8513,8520
public void testInheritanceCheck8() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor */goog.Super = function() {};" + "goog.Super.prototype.foo = 3;" + "/** @constructor\n @extends {goog.Super} */goog.Sub = function() {};" + "/** @override */goog.Sub.prototype.foo = 5;"); [EOL] } <line_num>: 8522,8529
public void testInheritanceCheck9_1() throws Exception { [EOL]     testTypes("/** @constructor */function Super() {};" + "Super.prototype.foo = function() { return 3; };" + "/** @constructor\n @extends {Super} */function Sub() {};" + "/** @override\n @return {number} */Sub.prototype.foo =\n" + "function() { return 1; };"); [EOL] } <line_num>: 8531,8538
public void testInheritanceCheck9_2() throws Exception { [EOL]     testTypes("/** @constructor */function Super() {};" + "/** @return {number} */" + "Super.prototype.foo = function() { return 1; };" + "/** @constructor\n @extends {Super} */function Sub() {};" + "/** @override */Sub.prototype.foo =\n" + "function() {};"); [EOL] } <line_num>: 8540,8548
public void testInheritanceCheck9_3() throws Exception { [EOL]     testTypes("/** @constructor */function Super() {};" + "/** @return {number} */" + "Super.prototype.foo = function() { return 1; };" + "/** @constructor\n @extends {Super} */function Sub() {};" + "/** @override\n @return {string} */Sub.prototype.foo =\n" + "function() { return \"some string\" };", "mismatch of the foo property type and the type of the property it " + "overrides from superclass Super\n" + "original: function (this:Super): number\n" + "override: function (this:Sub): string"); [EOL] } <line_num>: 8550,8562
public void testInheritanceCheck10_1() throws Exception { [EOL]     testTypes("/** @constructor */function Root() {};" + "Root.prototype.foo = function() { return 3; };" + "/** @constructor\n @extends {Root} */function Super() {};" + "/** @constructor\n @extends {Super} */function Sub() {};" + "/** @override\n @return {number} */Sub.prototype.foo =\n" + "function() { return 1; };"); [EOL] } <line_num>: 8564,8572
public void testInheritanceCheck10_2() throws Exception { [EOL]     testTypes("/** @constructor */function Root() {};" + "/** @return {number} */" + "Root.prototype.foo = function() { return 1; };" + "/** @constructor\n @extends {Root} */function Super() {};" + "/** @constructor\n @extends {Super} */function Sub() {};" + "/** @override */Sub.prototype.foo =\n" + "function() {};"); [EOL] } <line_num>: 8574,8583
public void testInheritanceCheck10_3() throws Exception { [EOL]     testTypes("/** @constructor */function Root() {};" + "/** @return {number} */" + "Root.prototype.foo = function() { return 1; };" + "/** @constructor\n @extends {Root} */function Super() {};" + "/** @constructor\n @extends {Super} */function Sub() {};" + "/** @override\n @return {string} */Sub.prototype.foo =\n" + "function() { return \"some string\" };", "mismatch of the foo property type and the type of the property it " + "overrides from superclass Root\n" + "original: function (this:Root): number\n" + "override: function (this:Sub): string"); [EOL] } <line_num>: 8585,8598
public void testInterfaceInheritanceCheck11() throws Exception { [EOL]     testTypes("/** @constructor */function Super() {};" + "/** @param {number} bar */Super.prototype.foo = function(bar) {};" + "/** @constructor\n @extends {Super} */function Sub() {};" + "/** @override\n  @param {string} bar */Sub.prototype.foo =\n" + "function(bar) {};", "mismatch of the foo property type and the type of the property it " + "overrides from superclass Super\n" + "original: function (this:Super, number): undefined\n" + "override: function (this:Sub, string): undefined"); [EOL] } <line_num>: 8600,8611
public void testInheritanceCheck12() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor */goog.Super = function() {};" + "goog.Super.prototype.foo = 3;" + "/** @constructor\n @extends {goog.Super} */goog.Sub = function() {};" + "/** @override */goog.Sub.prototype.foo = \"some string\";"); [EOL] } <line_num>: 8613,8620
public void testInheritanceCheck13() throws Exception { [EOL]     testTypes("var goog = {};\n" + "/** @constructor\n @extends {goog.Missing} */function Sub() {};" + "/** @override */Sub.prototype.foo = function() {};", "Bad type annotation. Unknown type goog.Missing"); [EOL] } <line_num>: 8622,8628
public void testInheritanceCheck14() throws Exception { [EOL]     testClosureTypes("var goog = {};\n" + "/** @constructor\n @extends {goog.Missing} */\n" + "goog.Super = function() {};\n" + "/** @constructor\n @extends {goog.Super} */function Sub() {};" + "/** @override */Sub.prototype.foo = function() {};", "Bad type annotation. Unknown type goog.Missing"); [EOL] } <line_num>: 8630,8638
public void testInheritanceCheck15() throws Exception { [EOL]     testTypes("/** @constructor */function Super() {};" + "/** @param {number} bar */Super.prototype.foo;" + "/** @constructor\n @extends {Super} */function Sub() {};" + "/** @override\n  @param {number} bar */Sub.prototype.foo =\n" + "function(bar) {};"); [EOL] } <line_num>: 8640,8647
public void testInheritanceCheck16() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor */goog.Super = function() {};" + "/** @type {number} */ goog.Super.prototype.foo = 3;" + "/** @constructor\n @extends {goog.Super} */goog.Sub = function() {};" + "/** @type {number} */ goog.Sub.prototype.foo = 5;", "property foo already defined on superclass goog.Super; " + "use @override to override it"); [EOL] } <line_num>: 8649,8658
public void testInheritanceCheck17() throws Exception { [EOL]     reportMissingOverrides = CheckLevel.OFF; [EOL]     testTypes("var goog = {};" + "/** @constructor */goog.Super = function() {};" + "/** @param {number} x */ goog.Super.prototype.foo = function(x) {};" + "/** @constructor\n @extends {goog.Super} */goog.Sub = function() {};" + "/** @param {string} x */ goog.Sub.prototype.foo = function(x) {};", "mismatch of the foo property type and the type of the property it " + "overrides from superclass goog.Super\n" + "original: function (this:goog.Super, number): undefined\n" + "override: function (this:goog.Sub, string): undefined"); [EOL] } <line_num>: 8660,8674
public void testInterfacePropertyOverride1() throws Exception { [EOL]     testTypes("/** @interface */function Super() {};" + "/** @desc description */Super.prototype.foo = function() {};" + "/** @interface\n @extends {Super} */function Sub() {};" + "/** @desc description */Sub.prototype.foo = function() {};"); [EOL] } <line_num>: 8676,8682
public void testInterfacePropertyOverride2() throws Exception { [EOL]     testTypes("/** @interface */function Root() {};" + "/** @desc description */Root.prototype.foo = function() {};" + "/** @interface\n @extends {Root} */function Super() {};" + "/** @interface\n @extends {Super} */function Sub() {};" + "/** @desc description */Sub.prototype.foo = function() {};"); [EOL] } <line_num>: 8684,8691
public void testInterfaceInheritanceCheck1() throws Exception { [EOL]     testTypes("/** @interface */function Super() {};" + "/** @desc description */Super.prototype.foo = function() {};" + "/** @constructor\n @implements {Super} */function Sub() {};" + "Sub.prototype.foo = function() {};", "property foo already defined on interface Super; use @override to " + "override it"); [EOL] } <line_num>: 8693,8701
public void testInterfaceInheritanceCheck2() throws Exception { [EOL]     testTypes("/** @interface */function Super() {};" + "/** @desc description */Super.prototype.foo = function() {};" + "/** @constructor\n @implements {Super} */function Sub() {};" + "/** @override */Sub.prototype.foo = function() {};"); [EOL] } <line_num>: 8703,8709
public void testInterfaceInheritanceCheck3() throws Exception { [EOL]     testTypes("/** @interface */function Root() {};" + "/** @return {number} */Root.prototype.foo = function() {};" + "/** @interface\n @extends {Root} */function Super() {};" + "/** @constructor\n @implements {Super} */function Sub() {};" + "/** @return {number} */Sub.prototype.foo = function() { return 1;};", "property foo already defined on interface Root; use @override to " + "override it"); [EOL] } <line_num>: 8711,8720
public void testInterfaceInheritanceCheck4() throws Exception { [EOL]     testTypes("/** @interface */function Root() {};" + "/** @return {number} */Root.prototype.foo = function() {};" + "/** @interface\n @extends {Root} */function Super() {};" + "/** @constructor\n @implements {Super} */function Sub() {};" + "/** @override\n * @return {number} */Sub.prototype.foo =\n" + "function() { return 1;};"); [EOL] } <line_num>: 8722,8730
public void testInterfaceInheritanceCheck5() throws Exception { [EOL]     testTypes("/** @interface */function Super() {};" + "/** @return {string} */Super.prototype.foo = function() {};" + "/** @constructor\n @implements {Super} */function Sub() {};" + "/** @override\n @return {number} */Sub.prototype.foo =\n" + "function() { return 1; };", "mismatch of the foo property type and the type of the property it " + "overrides from interface Super\n" + "original: function (this:Super): string\n" + "override: function (this:Sub): number"); [EOL] } <line_num>: 8732,8743
public void testInterfaceInheritanceCheck6() throws Exception { [EOL]     testTypes("/** @interface */function Root() {};" + "/** @return {string} */Root.prototype.foo = function() {};" + "/** @interface\n @extends {Root} */function Super() {};" + "/** @constructor\n @implements {Super} */function Sub() {};" + "/** @override\n @return {number} */Sub.prototype.foo =\n" + "function() { return 1; };", "mismatch of the foo property type and the type of the property it " + "overrides from interface Root\n" + "original: function (this:Root): string\n" + "override: function (this:Sub): number"); [EOL] } <line_num>: 8745,8757
public void testInterfaceInheritanceCheck7() throws Exception { [EOL]     testTypes("/** @interface */function Super() {};" + "/** @param {number} bar */Super.prototype.foo = function(bar) {};" + "/** @constructor\n @implements {Super} */function Sub() {};" + "/** @override\n  @param {string} bar */Sub.prototype.foo =\n" + "function(bar) {};", "mismatch of the foo property type and the type of the property it " + "overrides from interface Super\n" + "original: function (this:Super, number): undefined\n" + "override: function (this:Sub, string): undefined"); [EOL] } <line_num>: 8759,8770
public void testInterfaceInheritanceCheck8() throws Exception { [EOL]     testTypes("/** @constructor\n @implements {Super} */function Sub() {};" + "/** @override */Sub.prototype.foo = function() {};", new String[] { "Bad type annotation. Unknown type Super", "property foo not defined on any superclass of Sub" }); [EOL] } <line_num>: 8772,8780
public void testInterfaceInheritanceCheck9() throws Exception { [EOL]     testTypes("/** @interface */ function I() {}" + "/** @return {number} */ I.prototype.bar = function() {};" + "/** @constructor */ function F() {}" + "/** @return {number} */ F.prototype.bar = function() {return 3; };" + "/** @return {number} */ F.prototype.foo = function() {return 3; };" + "/** @constructor \n * @extends {F} \n * @implements {I} */ " + "function G() {}" + "/** @return {string} */ function f() { return new G().bar(); }", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 8782,8795
public void testInterfaceInheritanceCheck10() throws Exception { [EOL]     testTypes("/** @interface */ function I() {}" + "/** @return {number} */ I.prototype.bar = function() {};" + "/** @constructor */ function F() {}" + "/** @return {number} */ F.prototype.foo = function() {return 3; };" + "/** @constructor \n * @extends {F} \n * @implements {I} */ " + "function G() {}" + "/** @return {number} \n * @override */ " + "G.prototype.bar = G.prototype.foo;" + "/** @return {string} */ function f() { return new G().bar(); }", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 8797,8811
public void testInterfaceInheritanceCheck12() throws Exception { [EOL]     testTypes("/** @interface */ function I() {};\n" + "/** @type {string} */ I.prototype.foobar;\n" + "/** \n * @constructor \n * @implements {I} */\n" + "function C() {\n" + "/** \n * @type {number} */ this.foobar = 2;};\n" + "/** @type {I} */ \n var test = new C(); alert(test.foobar);", "mismatch of the foobar property type and the type of the property" + " it overrides from interface I\n" + "original: string\n" + "override: number"); [EOL] } <line_num>: 8813,8825
public void testInterfaceInheritanceCheck13() throws Exception { [EOL]     testTypes("function abstractMethod() {};\n" + "/** @interface */var base = function() {};\n" + "/** @extends {base} \n @interface */ var Int = function() {}\n" + "/** @type {{bar : !Function}} */ var x; \n" + "/** @type {!Function} */ base.prototype.bar = abstractMethod; \n" + "/** @type {Int} */ var foo;\n" + "foo.bar();"); [EOL] } <line_num>: 8827,8836
public void testInterfacePropertyNotImplemented() throws Exception { [EOL]     testTypes("/** @interface */function Int() {};" + "/** @desc description */Int.prototype.foo = function() {};" + "/** @constructor\n @implements {Int} */function Foo() {};", "property foo on interface Int is not implemented by type Foo"); [EOL] } <line_num>: 8838,8844
public void testInterfacePropertyNotImplemented2() throws Exception { [EOL]     testTypes("/** @interface */function Int() {};" + "/** @desc description */Int.prototype.foo = function() {};" + "/** @interface \n @extends {Int} */function Int2() {};" + "/** @constructor\n @implements {Int2} */function Foo() {};", "property foo on interface Int is not implemented by type Foo"); [EOL] } <line_num>: 8846,8853
public void testStubConstructorImplementingInterface() throws Exception { [EOL]     testTypes("/** @interface */ function Int() {}\n" + "/** @desc description */Int.prototype.foo = function() {};" + "/** @constructor \n @implements {Int} */ var Foo;\n", "", null, false); [EOL] } <line_num>: 8855,8864
public void testObjectLiteral() throws Exception { [EOL]     Node n = parseAndTypeCheck("var a = {m1: 7, m2: 'hello'}"); [EOL]     Node nameNode = n.getFirstChild().getFirstChild(); [EOL]     Node objectNode = nameNode.getFirstChild(); [EOL]     assertEquals(Token.NAME, nameNode.getType()); [EOL]     assertEquals(Token.OBJECTLIT, objectNode.getType()); [EOL]     ObjectType objectType = (ObjectType) objectNode.getJSType(); [EOL]     assertTypeEquals(NUMBER_TYPE, objectType.getPropertyType("m1")); [EOL]     assertTypeEquals(STRING_TYPE, objectType.getPropertyType("m2")); [EOL]     assertTypeEquals(objectType, nameNode.getJSType()); [EOL] } <line_num>: 8866,8884
public void testObjectLiteralDeclaration1() throws Exception { [EOL]     testTypes("var x = {" + "/** @type {boolean} */ abc: true," + "/** @type {number} */ 'def': 0," + "/** @type {string} */ 3: 'fgh'" + "};"); [EOL] } <line_num>: 8886,8893
public void testObjectLiteralDeclaration2() throws Exception { [EOL]     testTypes("var x = {" + "  /** @type {boolean} */ abc: true" + "};" + "x.abc = 0;", "assignment to property abc of x\n" + "found   : number\n" + "required: boolean"); [EOL] } <line_num>: 8895,8904
public void testObjectLiteralDeclaration3() throws Exception { [EOL]     testTypes("/** @param {{foo: !Function}} x */ function f(x) {}" + "f({foo: function() {}});"); [EOL] } <line_num>: 8906,8910
public void testObjectLiteralDeclaration4() throws Exception { [EOL]     testClosureTypes("var x = {" + "  /** @param {boolean} x */ abc: function(x) {}" + "};" + "/**\n" + " * @param {string} x\n" + " * @suppress {duplicate}\n" + " */ x.abc = function(x) {};", "assignment to property abc of x\n" + "found   : function (string): undefined\n" + "required: function (boolean): undefined"); [EOL] } <line_num>: 8912,8927
public void testObjectLiteralDeclaration5() throws Exception { [EOL]     testTypes("var x = {" + "  /** @param {boolean} x */ abc: function(x) {}" + "};" + "/**\n" + " * @param {boolean} x\n" + " * @suppress {duplicate}\n" + " */ x.abc = function(x) {};"); [EOL] } <line_num>: 8929,8938
public void testObjectLiteralDeclaration6() throws Exception { [EOL]     testTypes("var x = {};" + "/**\n" + " * @param {boolean} x\n" + " * @suppress {duplicate}\n" + " */ x.abc = function(x) {};" + "x = {" + "  /**\n" + "   * @param {boolean} x\n" + "   * @suppress {duplicate}\n" + "   */" + "  abc: function(x) {}" + "};"); [EOL] } <line_num>: 8940,8954
public void testObjectLiteralDeclaration7() throws Exception { [EOL]     testTypes("var x = {};" + "/**\n" + " * @type {function(boolean): undefined}\n" + " */ x.abc = function(x) {};" + "x = {" + "  /**\n" + "   * @param {boolean} x\n" + "   * @suppress {duplicate}\n" + "   */" + "  abc: function(x) {}" + "};"); [EOL] } <line_num>: 8956,8969
public void testCallDateConstructorAsFunction() throws Exception { [EOL]     Node n = parseAndTypeCheck("Date()"); [EOL]     assertTypeEquals(STRING_TYPE, n.getFirstChild().getFirstChild().getJSType()); [EOL] } <line_num>: 8971,8976
public void testCallErrorConstructorAsFunction() throws Exception { [EOL]     Node n = parseAndTypeCheck("Error('x')"); [EOL]     assertTypeEquals(ERROR_TYPE, n.getFirstChild().getFirstChild().getJSType()); [EOL] } <line_num>: 8981,8985
public void testCallArrayConstructorAsFunction() throws Exception { [EOL]     Node n = parseAndTypeCheck("Array()"); [EOL]     assertTypeEquals(ARRAY_TYPE, n.getFirstChild().getFirstChild().getJSType()); [EOL] } <line_num>: 8987,8991
public void testPropertyTypeOfUnionType() throws Exception { [EOL]     testTypes("var a = {};" + "/** @constructor */ a.N = function() {};\n" + "a.N.prototype.p = 1;\n" + "/** @constructor */ a.S = function() {};\n" + "a.S.prototype.p = 'a';\n" + "/** @param {!a.N|!a.S} x\n@return {string} */\n" + "var f = function(x) { return x.p; };", "inconsistent return type\n" + "found   : (number|string)\n" + "required: string"); [EOL] } <line_num>: 8993,9004
public void testAnnotatedPropertyOnInterface1() throws Exception { [EOL]     testTypes("/** @interface */ u.T = function() {};\n" + "/** @return {number} */ u.T.prototype.f = function() {};"); [EOL] } <line_num>: 9037,9042
public void testAnnotatedPropertyOnInterface2() throws Exception { [EOL]     testTypes("/** @interface */ u.T = function() {};\n" + "/** @return {number} */ u.T.prototype.f = function() { };"); [EOL] } <line_num>: 9044,9047
public void testAnnotatedPropertyOnInterface3() throws Exception { [EOL]     testTypes("/** @interface */ function T() {};\n" + "/** @return {number} */ T.prototype.f = function() { };"); [EOL] } <line_num>: 9049,9052
public void testAnnotatedPropertyOnInterface4() throws Exception { [EOL]     testTypes(CLOSURE_DEFS + "/** @interface */ function T() {};\n" + "/** @return {number} */ T.prototype.f = goog.abstractMethod;"); [EOL] } <line_num>: 9054,9059
public void testWarnUnannotatedPropertyOnInterface5() throws Exception { [EOL]     testTypes("/** @interface */ u.T = function () {};\n" + "/** @desc x does something */u.T.prototype.x = function() {};"); [EOL] } <line_num>: 9073,9076
public void testWarnUnannotatedPropertyOnInterface6() throws Exception { [EOL]     testTypes("/** @interface */ function T() {};\n" + "/** @desc x does something */T.prototype.x = function() {};"); [EOL] } <line_num>: 9078,9081
public void testDataPropertyOnInterface1() throws Exception { [EOL]     testTypes("/** @interface */ function T() {};\n" + "/** @type {number} */T.prototype.x;"); [EOL] } <line_num>: 9091,9094
public void testDataPropertyOnInterface2() throws Exception { [EOL]     reportMissingOverrides = CheckLevel.OFF; [EOL]     testTypes("/** @interface */ function T() {};\n" + "/** @type {number} */T.prototype.x;\n" + "/** @constructor \n" + " *  @implements {T} \n" + " */\n" + "function C() {}\n" + "C.prototype.x = 'foo';", "mismatch of the x property type and the type of the property it " + "overrides from interface T\n" + "original: number\n" + "override: string"); [EOL] } <line_num>: 9096,9109
public void testDataPropertyOnInterface3() throws Exception { [EOL]     testTypes("/** @interface */ function T() {};\n" + "/** @type {number} */T.prototype.x;\n" + "/** @constructor \n" + " *  @implements {T} \n" + " */\n" + "function C() {}\n" + "/** @override */\n" + "C.prototype.x = 'foo';", "mismatch of the x property type and the type of the property it " + "overrides from interface T\n" + "original: number\n" + "override: string"); [EOL] } <line_num>: 9111,9124
public void testDataPropertyOnInterface4() throws Exception { [EOL]     testTypes("/** @interface */ function T() {};\n" + "/** @type {number} */T.prototype.x;\n" + "/** @constructor \n" + " *  @implements {T} \n" + " */\n" + "function C() { /** @type {string} */ \n this.x = 'foo'; }\n", "mismatch of the x property type and the type of the property it " + "overrides from interface T\n" + "original: number\n" + "override: string"); [EOL] } <line_num>: 9126,9137
public void testWarnDataPropertyOnInterface3() throws Exception { [EOL]     testTypes("/** @interface */ u.T = function () {};\n" + "/** @type {number} */u.T.prototype.x = 1;", "interface members can only be empty property declarations, " + "empty functions, or goog.abstractMethod"); [EOL] } <line_num>: 9139,9144
public void testWarnDataPropertyOnInterface4() throws Exception { [EOL]     testTypes("/** @interface */ function T() {};\n" + "/** @type {number} */T.prototype.x = 1;", "interface members can only be empty property declarations, " + "empty functions, or goog.abstractMethod"); [EOL] } <line_num>: 9146,9151
public void testErrorMismatchingPropertyOnInterface4() throws Exception { [EOL]     testTypes("/** @interface */ u.T = function () {};\n" + "/** @param {Number} foo */u.T.prototype.x =\n" + "function() {};", "parameter foo does not appear in u.T.prototype.x's parameter list"); [EOL] } <line_num>: 9182,9187
public void testErrorMismatchingPropertyOnInterface5() throws Exception { [EOL]     testTypes("/** @interface */ function T() {};\n" + "/** @type {number} */T.prototype.x = function() { };", "assignment to property x of T.prototype\n" + "found   : function (): undefined\n" + "required: number"); [EOL] } <line_num>: 9189,9195
public void testErrorMismatchingPropertyOnInterface6() throws Exception { [EOL]     testClosureTypesMultipleWarnings("/** @interface */ function T() {};\n" + "/** @return {number} */T.prototype.x = 1", Lists.newArrayList("assignment to property x of T.prototype\n" + "found   : number\n" + "required: function (this:T): number", "interface members can only be empty property declarations, " + "empty functions, or goog.abstractMethod")); [EOL] } <line_num>: 9197,9207
public void testInterfaceNonEmptyFunction() throws Exception { [EOL]     testTypes("/** @interface */ function T() {};\n" + "T.prototype.x = function() { return 'foo'; }", "interface member functions must have an empty body"); [EOL] } <line_num>: 9209,9214
public void testDoubleNestedInterface() throws Exception { [EOL]     testTypes("/** @interface */ var I1 = function() {};\n" + "/** @interface */ I1.I2 = function() {};\n" + "/** @interface */ I1.I2.I3 = function() {};\n"); [EOL] } <line_num>: 9216,9220
public void testStaticDataPropertyOnNestedInterface() throws Exception { [EOL]     testTypes("/** @interface */ var I1 = function() {};\n" + "/** @interface */ I1.I2 = function() {};\n" + "/** @type {number} */ I1.I2.x = 1;\n"); [EOL] } <line_num>: 9222,9226
public void testInterfaceInstantiation() throws Exception { [EOL]     testTypes("/** @interface */var f = function(){}; new f", "cannot instantiate non-constructor"); [EOL] } <line_num>: 9228,9231
public void testPrototypeLoop() throws Exception { [EOL]     testClosureTypesMultipleWarnings(suppressMissingProperty("foo") + "/** @constructor \n * @extends {T} */var T = function() {};" + "alert((new T).foo);", Lists.newArrayList("Parse error. Cycle detected in inheritance chain of type T", "Could not resolve type in @extends tag of T")); [EOL] } <line_num>: 9233,9241
public void testImplementsLoop() throws Exception { [EOL]     testClosureTypesMultipleWarnings(suppressMissingProperty("foo") + "/** @constructor \n * @implements {T} */var T = function() {};" + "alert((new T).foo);", Lists.newArrayList("Parse error. Cycle detected in inheritance chain of type T")); [EOL] } <line_num>: 9243,9250
public void testImplementsExtendsLoop() throws Exception { [EOL]     testClosureTypesMultipleWarnings(suppressMissingProperty("foo") + "/** @constructor \n * @implements {F} */var G = function() {};" + "/** @constructor \n * @extends {G} */var F = function() {};" + "alert((new F).foo);", Lists.newArrayList("Parse error. Cycle detected in inheritance chain of type F")); [EOL] } <line_num>: 9252,9260
public void testInterfaceExtendsLoop() throws Exception { [EOL]     testClosureTypesMultipleWarnings(suppressMissingProperty("foo") + "/** @interface \n * @extends {F} */var G = function() {};" + "/** @interface \n * @extends {G} */var F = function() {};", Lists.newArrayList("Could not resolve type in @extends tag of G")); [EOL] } <line_num>: 9262,9271
public void testConversionFromInterfaceToRecursiveConstructor() throws Exception { [EOL]     testClosureTypesMultipleWarnings(suppressMissingProperty("foo") + "/** @interface */ var OtherType = function() {}\n" + "/** @implements {MyType} \n * @constructor */\n" + "var MyType = function() {}\n" + "/** @type {MyType} */\n" + "var x = /** @type {!OtherType} */ (new Object());", Lists.newArrayList("Parse error. Cycle detected in inheritance chain of type MyType", "initializing variable\n" + "found   : OtherType\n" + "required: (MyType|null)")); [EOL] } <line_num>: 9273,9287
public void testDirectPrototypeAssign() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "/** @constructor */ function Bar() {}" + "/** @type {Array} */ Bar.prototype = new Foo()"); [EOL] } <line_num>: 9289,9295
public void testResolutionViaRegistry1() throws Exception { [EOL]     testTypes("/** @constructor */ u.T = function() {};\n" + "/** @type {(number|string)} */ u.T.prototype.a;\n" + "/**\n" + "* @param {u.T} t\n" + "* @return {string}\n" + "*/\n" + "var f = function(t) { return t.a; };", "inconsistent return type\n" + "found   : (number|string)\n" + "required: string"); [EOL] } <line_num>: 9300,9311
public void testResolutionViaRegistry2() throws Exception { [EOL]     testTypes("/** @constructor */ u.T = function() {" + "  this.a = 0; };\n" + "/**\n" + "* @param {u.T} t\n" + "* @return {string}\n" + "*/\n" + "var f = function(t) { return t.a; };", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 9313,9325
public void testResolutionViaRegistry3() throws Exception { [EOL]     testTypes("/** @constructor */ u.T = function() {};\n" + "/** @type {(number|string)} */ u.T.prototype.a = 0;\n" + "/**\n" + "* @param {u.T} t\n" + "* @return {string}\n" + "*/\n" + "var f = function(t) { return t.a; };", "inconsistent return type\n" + "found   : (number|string)\n" + "required: string"); [EOL] } <line_num>: 9327,9338
public void testResolutionViaRegistry4() throws Exception { [EOL]     testTypes("/** @constructor */ u.A = function() {};\n" + "/**\n* @constructor\n* @extends {u.A}\n*/\nu.A.A = function() {}\n;" + "/**\n* @constructor\n* @extends {u.A}\n*/\nu.A.B = function() {};\n" + "var ab = new u.A.B();\n" + "/** @type {!u.A} */ var a = ab;\n" + "/** @type {!u.A.A} */ var aa = ab;\n", "initializing variable\n" + "found   : u.A.B\n" + "required: u.A.A"); [EOL] } <line_num>: 9340,9350
public void testResolutionViaRegistry5() throws Exception { [EOL]     Node n = parseAndTypeCheck("/** @constructor */ u.T = function() {}; u.T"); [EOL]     JSType type = n.getLastChild().getLastChild().getJSType(); [EOL]     assertFalse(type.isUnknownType()); [EOL]     assertTrue(type instanceof FunctionType); [EOL]     assertEquals("u.T", ((FunctionType) type).getInstanceType().getReferenceName()); [EOL] } <line_num>: 9352,9359
public void testGatherProperyWithoutAnnotation1() throws Exception { [EOL]     Node n = parseAndTypeCheck("/** @constructor */ var T = function() {};" + "/** @type {!T} */var t; t.x; t;"); [EOL]     JSType type = n.getLastChild().getLastChild().getJSType(); [EOL]     assertFalse(type.isUnknownType()); [EOL]     assertTrue(type instanceof ObjectType); [EOL]     ObjectType objectType = (ObjectType) type; [EOL]     assertFalse(objectType.hasProperty("x")); [EOL]     Asserts.assertTypeCollectionEquals(Lists.newArrayList(objectType), registry.getTypesWithProperty("x")); [EOL] } <line_num>: 9361,9372
public void testGatherProperyWithoutAnnotation2() throws Exception { [EOL]     TypeCheckResult ns = parseAndTypeCheckWithScope("/** @type {!Object} */var t; t.x; t;"); [EOL]     Node n = ns.root; [EOL]     Scope s = ns.scope; [EOL]     JSType type = n.getLastChild().getLastChild().getJSType(); [EOL]     assertFalse(type.isUnknownType()); [EOL]     assertTypeEquals(type, OBJECT_TYPE); [EOL]     assertTrue(type instanceof ObjectType); [EOL]     ObjectType objectType = (ObjectType) type; [EOL]     assertFalse(objectType.hasProperty("x")); [EOL]     Asserts.assertTypeCollectionEquals(Lists.newArrayList(OBJECT_TYPE), registry.getTypesWithProperty("x")); [EOL] } <line_num>: 9374,9388
public void testFunctionMasksVariableBug() throws Exception { [EOL]     testTypes("var x = 4; var f = function x(b) { return b ? 1 : x(true); };", "function x masks variable (IE bug)"); [EOL] } <line_num>: 9390,9393
public void testDfa1() throws Exception { [EOL]     testTypes("var x = null;\n x = 1;\n /** @type number */ var y = x;"); [EOL] } <line_num>: 9395,9397
public void testDfa2() throws Exception { [EOL]     testTypes("function u() {}\n" + "/** @return {number} */ function f() {\nvar x = 'todo';\n" + "if (u()) { x = 1; } else { x = 2; } return x;\n}"); [EOL] } <line_num>: 9399,9403
public void testDfa3() throws Exception { [EOL]     testTypes("function u() {}\n" + "/** @return {number} */ function f() {\n" + "/** @type {number|string} */ var x = 'todo';\n" + "if (u()) { x = 1; } else { x = 2; } return x;\n}"); [EOL] } <line_num>: 9405,9410
public void testDfa4() throws Exception { [EOL]     testTypes("/** @param {Date?} d */ function f(d) {\n" + "if (!d) { return; }\n" + "/** @type {!Date} */ var e = d;\n}"); [EOL] } <line_num>: 9412,9416
public void testDfa5() throws Exception { [EOL]     testTypes("/** @return {string?} */ function u() {return 'a';}\n" + "/** @param {string?} x\n@return {string} */ function f(x) {\n" + "while (!x) { x = u(); }\nreturn x;\n}"); [EOL] } <line_num>: 9418,9422
public void testDfa6() throws Exception { [EOL]     testTypes("/** @return {Object?} */ function u() {return {};}\n" + "/** @param {Object?} x */ function f(x) {\n" + "while (x) { x = u(); if (!x) { x = u(); } }\n}"); [EOL] } <line_num>: 9424,9428
public void testDfa7() throws Exception { [EOL]     testTypes("/** @constructor */ var T = function() {};\n" + "/** @type {Date?} */ T.prototype.x = null;\n" + "/** @param {!T} t */ function f(t) {\n" + "if (!t.x) { return; }\n" + "/** @type {!Date} */ var e = t.x;\n}"); [EOL] } <line_num>: 9430,9436
public void testDfa8() throws Exception { [EOL]     testTypes("/** @constructor */ var T = function() {};\n" + "/** @type {number|string} */ T.prototype.x = '';\n" + "function u() {}\n" + "/** @param {!T} t\n@return {number} */ function f(t) {\n" + "if (u()) { t.x = 1; } else { t.x = 2; } return t.x;\n}"); [EOL] } <line_num>: 9438,9444
public void testDfa9() throws Exception { [EOL]     testTypes("function f() {\n/** @type {string?} */var x;\nx = null;\n" + "if (x == null) { return 0; } else { return 1; } }", "condition always evaluates to true\n" + "left : null\n" + "right: null"); [EOL] } <line_num>: 9446,9452
public void testDfa10() throws Exception { [EOL]     testTypes("/** @param {null} x */ function g(x) {}" + "/** @param {string?} x */function f(x) {\n" + "if (!x) { x = ''; }\n" + "if (g(x)) { return 0; } else { return 1; } }", "actual parameter 1 of g does not match formal parameter\n" + "found   : string\n" + "required: null"); [EOL] } <line_num>: 9454,9462
public void testDfa11() throws Exception { [EOL]     testTypes("/** @param {string} opt_x\n@return {string} */\n" + "function f(opt_x) { if (!opt_x) { " + "throw new Error('x cannot be empty'); } return opt_x; }"); [EOL] } <line_num>: 9464,9468
public void testDfa12() throws Exception { [EOL]     testTypes("/** @param {string} x \n * @constructor \n */" + "var Bar = function(x) {};" + "/** @param {string} x */ function g(x) { return true; }" + "/** @param {string|number} opt_x */ " + "function f(opt_x) { " + "  if (opt_x) { new Bar(g(opt_x) && 'x'); }" + "}", "actual parameter 1 of g does not match formal parameter\n" + "found   : (number|string)\n" + "required: string"); [EOL] } <line_num>: 9470,9481
public void testDfa13() throws Exception { [EOL]     testTypes("/**\n" + " * @param {string} x \n" + " * @param {number} y \n" + " * @param {number} z \n" + " */" + "function g(x, y, z) {}" + "function f() { " + "  var x = 'a'; g(x, x = 3, x);" + "}"); [EOL] } <line_num>: 9483,9494
public void testTypeInferenceWithCast1() throws Exception { [EOL]     testTypes("/**@return {(number,null,undefined)}*/function u(x) {return null;}" + "/**@param {number?} x\n@return {number?}*/function f(x) {return x;}" + "/**@return {number?}*/function g(x) {" + "var y = /**@type {number?}*/(u(x)); return f(y);}"); [EOL] } <line_num>: 9496,9502
public void testTypeInferenceWithCast2() throws Exception { [EOL]     testTypes("/**@return {(number,null,undefined)}*/function u(x) {return null;}" + "/**@param {number?} x\n@return {number?}*/function f(x) {return x;}" + "/**@return {number?}*/function g(x) {" + "var y; y = /**@type {number?}*/(u(x)); return f(y);}"); [EOL] } <line_num>: 9504,9510
public void testTypeInferenceWithCast3() throws Exception { [EOL]     testTypes("/**@return {(number,null,undefined)}*/function u(x) {return 1;}" + "/**@return {number}*/function g(x) {" + "return /**@type {number}*/(u(x));}"); [EOL] } <line_num>: 9512,9517
public void testTypeInferenceWithCast4() throws Exception { [EOL]     testTypes("/**@return {(number,null,undefined)}*/function u(x) {return 1;}" + "/**@return {number}*/function g(x) {" + "return /**@type {number}*/(u(x)) && 1;}"); [EOL] } <line_num>: 9519,9524
public void testTypeInferenceWithCast5() throws Exception { [EOL]     testTypes("/** @param {number} x */ function foo(x) {}" + "/** @param {{length:*}} y */ function bar(y) {" + "  /** @type {string} */ y.length;" + "  foo(y.length);" + "}", "actual parameter 1 of foo does not match formal parameter\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 9526,9536
public void testTypeInferenceWithClosure1() throws Exception { [EOL]     testTypes("/** @return {boolean} */" + "function f() {" + "  /** @type {?string} */ var x = null;" + "  function g() { x = 'y'; } g(); " + "  return x == null;" + "}"); [EOL] } <line_num>: 9538,9546
public void testTypeInferenceWithClosure2() throws Exception { [EOL]     testTypes("/** @return {boolean} */" + "function f() {" + "  /** @type {?string} */ var x = null;" + "  function g() { x = 'y'; } g(); " + "  return x === 3;" + "}", "condition always evaluates to false\n" + "left : (null|string)\n" + "right: number"); [EOL] } <line_num>: 9548,9559
public void testTypeInferenceWithNoEntry1() throws Exception { [EOL]     testTypes("/** @param {number} x */ function f(x) {}" + "/** @constructor */ function Foo() {}" + "Foo.prototype.init = function() {" + "  /** @type {?{baz: number}} */ this.bar = {baz: 3};" + "};" + "/**\n" + " * @extends {Foo}\n" + " * @constructor\n" + " */" + "function SubFoo() {}" + "/** Method */" + "SubFoo.prototype.method = function() {" + "  for (var i = 0; i < 10; i++) {" + "    f(this.bar);" + "    f(this.bar.baz);" + "  }" + "};", "actual parameter 1 of f does not match formal parameter\n" + "found   : (null|{baz: number})\n" + "required: number"); [EOL] } <line_num>: 9561,9583
public void testTypeInferenceWithNoEntry2() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @param {number} x */ function f(x) {}" + "/** @param {!Object} x */ function g(x) {}" + "/** @constructor */ function Foo() {}" + "Foo.prototype.init = function() {" + "  /** @type {?{baz: number}} */ this.bar = {baz: 3};" + "};" + "/**\n" + " * @extends {Foo}\n" + " * @constructor\n" + " */" + "function SubFoo() {}" + "/** Method */" + "SubFoo.prototype.method = function() {" + "  for (var i = 0; i < 10; i++) {" + "    f(this.bar);" + "    goog.asserts.assert(this.bar);" + "    g(this.bar);" + "  }" + "};", "actual parameter 1 of f does not match formal parameter\n" + "found   : (null|{baz: number})\n" + "required: number"); [EOL] } <line_num>: 9585,9610
public void testForwardPropertyReference() throws Exception { [EOL]     testTypes("/** @constructor */ var Foo = function() { this.init(); };" + "/** @return {string} */" + "Foo.prototype.getString = function() {" + "  return this.number_;" + "};" + "Foo.prototype.init = function() {" + "  /** @type {number} */" + "  this.number_ = 3;" + "};", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 9612,9625
public void testNoForwardTypeDeclaration() throws Exception { [EOL]     testTypes("/** @param {MyType} x */ function f(x) {}", "Bad type annotation. Unknown type MyType"); [EOL] } <line_num>: 9627,9631
public void testNoForwardTypeDeclarationAndNoBraces() throws Exception { [EOL]     testTypes("/** @return The result. */ function f() {}"); [EOL] } <line_num>: 9633,9635
public void testForwardTypeDeclaration1() throws Exception { [EOL]     testClosureTypes("goog.addDependency();" + "goog.addDependency('y', [goog]);" + "goog.addDependency('zzz.js', ['MyType'], []);" + "/** @param {MyType} x \n * @return {number} */" + "function f(x) { return 3; }", null); [EOL] } <line_num>: 9637,9646
public void testForwardTypeDeclaration2() throws Exception { [EOL]     String f = "goog.addDependency('zzz.js', ['MyType'], []);" + "/** @param {MyType} x */ function f(x) { }"; [EOL]     testClosureTypes(f, null); [EOL]     testClosureTypes(f + "f(3);", "actual parameter 1 of f does not match formal parameter\n" + "found   : number\n" + "required: (MyType|null)"); [EOL] } <line_num>: 9648,9656
public void testForwardTypeDeclaration3() throws Exception { [EOL]     testClosureTypes("goog.addDependency('zzz.js', ['MyType'], []);" + "/** @param {MyType} x */ function f(x) { return x; }" + "/** @constructor */ var MyType = function() {};" + "f(3);", "actual parameter 1 of f does not match formal parameter\n" + "found   : number\n" + "required: (MyType|null)"); [EOL] } <line_num>: 9658,9667
public void testForwardTypeDeclaration4() throws Exception { [EOL]     testClosureTypes("goog.addDependency('zzz.js', ['MyType'], []);" + "/** @param {MyType} x */ function f(x) { return x; }" + "/** @constructor */ var MyType = function() {};" + "f(new MyType());", null); [EOL] } <line_num>: 9669,9676
public void testForwardTypeDeclaration5() throws Exception { [EOL]     testClosureTypes("goog.addDependency('zzz.js', ['MyType'], []);" + "/**\n" + " * @constructor\n" + " * @extends {MyType}\n" + " */ var YourType = function() {};" + "/** @override */ YourType.prototype.method = function() {};", "Could not resolve type in @extends tag of YourType"); [EOL] } <line_num>: 9678,9687
public void testForwardTypeDeclaration6() throws Exception { [EOL]     testClosureTypesMultipleWarnings("goog.addDependency('zzz.js', ['MyType'], []);" + "/**\n" + " * @constructor\n" + " * @implements {MyType}\n" + " */ var YourType = function() {};" + "/** @override */ YourType.prototype.method = function() {};", Lists.newArrayList("Could not resolve type in @implements tag of YourType", "property method not defined on any superclass of YourType")); [EOL] } <line_num>: 9689,9700
public void testForwardTypeDeclaration7() throws Exception { [EOL]     testClosureTypes("goog.addDependency('zzz.js', ['MyType'], []);" + "/** @param {MyType=} x */" + "function f(x) { return x == undefined; }", null); [EOL] } <line_num>: 9702,9707
public void testForwardTypeDeclaration8() throws Exception { [EOL]     testClosureTypes("goog.addDependency('zzz.js', ['MyType'], []);" + "/** @param {MyType} x */" + "function f(x) { return x.name == undefined; }", null); [EOL] } <line_num>: 9709,9714
public void testForwardTypeDeclaration9() throws Exception { [EOL]     testClosureTypes("goog.addDependency('zzz.js', ['MyType'], []);" + "/** @param {MyType} x */" + "function f(x) { x.name = 'Bob'; }", null); [EOL] } <line_num>: 9716,9721
public void testForwardTypeDeclaration10() throws Exception { [EOL]     String f = "goog.addDependency('zzz.js', ['MyType'], []);" + "/** @param {MyType|number} x */ function f(x) { }"; [EOL]     testClosureTypes(f, null); [EOL]     testClosureTypes(f + "f(3);", null); [EOL]     testClosureTypes(f + "f('3');", "actual parameter 1 of f does not match formal parameter\n" + "found   : string\n" + "required: (MyType|null|number)"); [EOL] } <line_num>: 9723,9732
public void testForwardTypeDeclaration12() throws Exception { [EOL]     testClosureTypes("goog.addDependency('zzz.js', ['MyType'], []);" + "/**\n" + " * @param {!Function} ctor\n" + " * @return {MyType}\n" + " */\n" + "function f(ctor) { return new ctor(); }", null); [EOL] } <line_num>: 9734,9744
public void testForwardTypeDeclaration13() throws Exception { [EOL]     testClosureTypes("goog.addDependency('zzz.js', ['MyType'], []);" + "/**\n" + " * @param {!Function} ctor\n" + " * @return {MyType}\n" + " */\n" + "function f(ctor) { return (new ctor()).impossibleProp; }", "Property impossibleProp never defined on ?"); [EOL] } <line_num>: 9746,9758
public void testDuplicateTypeDef() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @constructor */ goog.Bar = function() {};" + "/** @typedef {number} */ goog.Bar;", "variable goog.Bar redefined with type None, " + "original definition at [testcode]:1 " + "with type function (new:goog.Bar): undefined"); [EOL] } <line_num>: 9760,9768
public void testTypeDef1() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @typedef {number} */ goog.Bar;" + "/** @param {goog.Bar} x */ function f(x) {}" + "f(3);"); [EOL] } <line_num>: 9770,9776
public void testTypeDef2() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @typedef {number} */ goog.Bar;" + "/** @param {goog.Bar} x */ function f(x) {}" + "f('3');", "actual parameter 1 of f does not match formal parameter\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 9778,9787
public void testTypeDef3() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @typedef {number} */ var Bar;" + "/** @param {Bar} x */ function f(x) {}" + "f('3');", "actual parameter 1 of f does not match formal parameter\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 9789,9798
public void testTypeDef4() throws Exception { [EOL]     testTypes("/** @constructor */ function A() {}" + "/** @constructor */ function B() {}" + "/** @typedef {(A|B)} */ var AB;" + "/** @param {AB} x */ function f(x) {}" + "f(new A()); f(new B()); f(1);", "actual parameter 1 of f does not match formal parameter\n" + "found   : number\n" + "required: (A|B|null)"); [EOL] } <line_num>: 9800,9810
public void testTypeDef5() throws Exception { [EOL]     testTypes("/** @param {AB} x */ function f(x) {}" + "/** @constructor */ function A() {}" + "/** @constructor */ function B() {}" + "/** @typedef {(A|B)} */ var AB;" + "f(new A()); f(new B()); f(1);", "actual parameter 1 of f does not match formal parameter\n" + "found   : number\n" + "required: (A|B|null)"); [EOL] } <line_num>: 9812,9826
public void testCircularTypeDef() throws Exception { [EOL]     testTypes("var goog = {};" + "/** @typedef {number|Array.<goog.Bar>} */ goog.Bar;" + "/** @param {goog.Bar} x */ function f(x) {}" + "f(3); f([3]); f([[3]]);"); [EOL] } <line_num>: 9828,9834
public void testGetTypedPercent1() throws Exception { [EOL]     String js = "var id = function(x) { return x; }\n" + "var id2 = function(x) { return id(x); }"; [EOL]     assertEquals(50.0, getTypedPercent(js), 0.1); [EOL] } <line_num>: 9836,9840
public void testGetTypedPercent2() throws Exception { [EOL]     String js = "var x = {}; x.y = 1;"; [EOL]     assertEquals(100.0, getTypedPercent(js), 0.1); [EOL] } <line_num>: 9842,9845
public void testGetTypedPercent3() throws Exception { [EOL]     String js = "var f = function(x) { x.a = x.b; }"; [EOL]     assertEquals(50.0, getTypedPercent(js), 0.1); [EOL] } <line_num>: 9847,9850
public void testGetTypedPercent4() throws Exception { [EOL]     String js = "var n = {};\n /** @constructor */ n.T = function() {};\n" + "/** @type n.T */ var x = new n.T();"; [EOL]     assertEquals(100.0, getTypedPercent(js), 0.1); [EOL] } <line_num>: 9852,9856
public void testGetTypedPercent5() throws Exception { [EOL]     String js = "/** @enum {number} */ keys = {A: 1,B: 2,C: 3};"; [EOL]     assertEquals(100.0, getTypedPercent(js), 0.1); [EOL] } <line_num>: 9858,9861
public void testGetTypedPercent6() throws Exception { [EOL]     String js = "a = {TRUE: 1, FALSE: 0};"; [EOL]     assertEquals(100.0, getTypedPercent(js), 0.1); [EOL] } <line_num>: 9863,9866
private double getTypedPercent(String js) throws Exception { [EOL]     Node n = compiler.parseTestCode(js); [EOL]     Node externs = new Node(Token.BLOCK); [EOL]     Node externAndJsRoot = new Node(Token.BLOCK, externs, n); [EOL]     externAndJsRoot.setIsSyntheticBlock(true); [EOL]     TypeCheck t = makeTypeCheck(); [EOL]     t.processForTesting(null, n); [EOL]     return t.getTypedPercent(); [EOL] } <line_num>: 9868,9878
private ObjectType getInstanceType(Node js1Node) { [EOL]     JSType type = js1Node.getFirstChild().getJSType(); [EOL]     assertNotNull(type); [EOL]     assertTrue(type instanceof FunctionType); [EOL]     FunctionType functionType = (FunctionType) type; [EOL]     assertTrue(functionType.isConstructor()); [EOL]     return functionType.getInstanceType(); [EOL] } <line_num>: 9880,9887
public void testPrototypePropertyReference() throws Exception { [EOL]     TypeCheckResult p = parseAndTypeCheckWithScope("" + "/** @constructor */\n" + "function Foo() {}\n" + "/** @param {number} a */\n" + "Foo.prototype.bar = function(a){};\n" + "/** @param {Foo} f */\n" + "function baz(f) {\n" + "  Foo.prototype.bar.call(f, 3);\n" + "}"); [EOL]     assertEquals(0, compiler.getErrorCount()); [EOL]     assertEquals(0, compiler.getWarningCount()); [EOL]     assertTrue(p.scope.getVar("Foo").getType() instanceof FunctionType); [EOL]     FunctionType fooType = (FunctionType) p.scope.getVar("Foo").getType(); [EOL]     assertEquals("function (this:Foo, number): undefined", fooType.getPrototype().getPropertyType("bar").toString()); [EOL] } <line_num>: 9889,9906
public void testResolvingNamedTypes() throws Exception { [EOL]     String js = "" + "/** @constructor */\n" + "var Foo = function() {}\n" + "/** @param {number} a */\n" + "Foo.prototype.foo = function(a) {\n" + "  return this.baz().toString();\n" + "};\n" + "/** @return {Baz} */\n" + "Foo.prototype.baz = function() { return new Baz(); };\n" + "/** @constructor\n" + "  * @extends Foo */\n" + "var Bar = function() {};" + "/** @constructor */\n" + "var Baz = function() {};"; [EOL]     assertEquals(100.0, getTypedPercent(js), 0.1); [EOL] } <line_num>: 9908,9924
public void testMissingProperty1() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "Foo.prototype.bar = function() { return this.a; };" + "Foo.prototype.baz = function() { this.a = 3; };"); [EOL] } <line_num>: 9926,9931
public void testMissingProperty2() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "Foo.prototype.bar = function() { return this.a; };" + "Foo.prototype.baz = function() { this.b = 3; };", "Property a never defined on Foo"); [EOL] } <line_num>: 9933,9939
public void testMissingProperty3() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "Foo.prototype.bar = function() { return this.a; };" + "(new Foo).a = 3;"); [EOL] } <line_num>: 9941,9946
public void testMissingProperty4() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "Foo.prototype.bar = function() { return this.a; };" + "(new Foo).b = 3;", "Property a never defined on Foo"); [EOL] } <line_num>: 9948,9954
public void testMissingProperty5() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "Foo.prototype.bar = function() { return this.a; };" + "/** @constructor */ function Bar() { this.a = 3; };", "Property a never defined on Foo"); [EOL] } <line_num>: 9956,9962
public void testMissingProperty6() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "Foo.prototype.bar = function() { return this.a; };" + "/** @constructor \n * @extends {Foo} */ " + "function Bar() { this.a = 3; };"); [EOL] } <line_num>: 9964,9970
public void testMissingProperty7() throws Exception { [EOL]     testTypes("/** @param {Object} obj */" + "function foo(obj) { return obj.impossible; }", "Property impossible never defined on Object"); [EOL] } <line_num>: 9972,9977
public void testMissingProperty8() throws Exception { [EOL]     testTypes("/** @param {Object} obj */" + "function foo(obj) { return typeof obj.impossible; }"); [EOL] } <line_num>: 9979,9983
public void testMissingProperty9() throws Exception { [EOL]     testTypes("/** @param {Object} obj */" + "function foo(obj) { if (obj.impossible) { return true; } }"); [EOL] } <line_num>: 9985,9989
public void testMissingProperty10() throws Exception { [EOL]     testTypes("/** @param {Object} obj */" + "function foo(obj) { while (obj.impossible) { return true; } }"); [EOL] } <line_num>: 9991,9995
public void testMissingProperty11() throws Exception { [EOL]     testTypes("/** @param {Object} obj */" + "function foo(obj) { for (;obj.impossible;) { return true; } }"); [EOL] } <line_num>: 9997,10001
public void testMissingProperty12() throws Exception { [EOL]     testTypes("/** @param {Object} obj */" + "function foo(obj) { do { } while (obj.impossible); }"); [EOL] } <line_num>: 10003,10007
public void testMissingProperty13() throws Exception { [EOL]     testTypes("var goog = {}; goog.isDef = function(x) { return false; };" + "/** @param {Object} obj */" + "function foo(obj) { return goog.isDef(obj.impossible); }"); [EOL] } <line_num>: 10009,10014
public void testMissingProperty14() throws Exception { [EOL]     testTypes("var goog = {}; goog.isDef = function(x) { return false; };" + "/** @param {Object} obj */" + "function foo(obj) { return goog.isNull(obj.impossible); }", "Property isNull never defined on goog"); [EOL] } <line_num>: 10016,10022
public void testMissingProperty15() throws Exception { [EOL]     testTypes("/** @param {Object} x */" + "function f(x) { if (x.foo) { x.foo(); } }"); [EOL] } <line_num>: 10024,10028
public void testMissingProperty16() throws Exception { [EOL]     testTypes("/** @param {Object} x */" + "function f(x) { x.foo(); if (x.foo) {} }", "Property foo never defined on Object"); [EOL] } <line_num>: 10030,10035
public void testMissingProperty17() throws Exception { [EOL]     testTypes("/** @param {Object} x */" + "function f(x) { if (typeof x.foo == 'function') { x.foo(); } }"); [EOL] } <line_num>: 10037,10041
public void testMissingProperty18() throws Exception { [EOL]     testTypes("/** @param {Object} x */" + "function f(x) { if (x.foo instanceof Function) { x.foo(); } }"); [EOL] } <line_num>: 10043,10047
public void testMissingProperty19() throws Exception { [EOL]     testTypes("/** @param {Object} x */" + "function f(x) { if (x.bar) { if (x.foo) {} } else { x.foo(); } }", "Property foo never defined on Object"); [EOL] } <line_num>: 10049,10054
public void testMissingProperty20() throws Exception { [EOL]     testTypes("/** @param {Object} x */" + "function f(x) { if (x.foo) { } else { x.foo(); } }", "Property foo never defined on Object"); [EOL] } <line_num>: 10056,10061
public void testMissingProperty21() throws Exception { [EOL]     testTypes("/** @param {Object} x */" + "function f(x) { x.foo && x.foo(); }"); [EOL] } <line_num>: 10063,10067
public void testMissingProperty22() throws Exception { [EOL]     testTypes("/** @param {Object} x \n * @return {boolean} */" + "function f(x) { return x.foo ? x.foo() : true; }"); [EOL] } <line_num>: 10069,10073
public void testMissingProperty23() throws Exception { [EOL]     testTypes("function f(x) { x.impossible(); }", "Property impossible never defined on x"); [EOL] } <line_num>: 10075,10079
public void testMissingProperty24() throws Exception { [EOL]     testClosureTypes("goog.addDependency('zzz.js', ['MissingType'], []);" + "/** @param {MissingType} x */" + "function f(x) { x.impossible(); }", null); [EOL] } <line_num>: 10081,10086
public void testMissingProperty25() throws Exception { [EOL]     testTypes("/** @constructor */ var Foo = function() {};" + "Foo.prototype.bar = function() {};" + "/** @constructor */ var FooAlias = Foo;" + "(new FooAlias()).bar();"); [EOL] } <line_num>: 10088,10094
public void testMissingProperty26() throws Exception { [EOL]     testTypes("/** @constructor */ var Foo = function() {};" + "/** @constructor */ var FooAlias = Foo;" + "FooAlias.prototype.bar = function() {};" + "(new Foo()).bar();"); [EOL] } <line_num>: 10096,10102
public void testMissingProperty27() throws Exception { [EOL]     testClosureTypes("goog.addDependency('zzz.js', ['MissingType'], []);" + "/** @param {?MissingType} x */" + "function f(x) {" + "  for (var parent = x; parent; parent = parent.getParent()) {}" + "}", null); [EOL] } <line_num>: 10104,10111
public void testMissingProperty28() throws Exception { [EOL]     testTypes("function f(obj) {" + "  /** @type {*} */ obj.foo;" + "  return obj.foo;" + "}"); [EOL]     testTypes("function f(obj) {" + "  /** @type {*} */ obj.foo;" + "  return obj.foox;" + "}", "Property foox never defined on obj"); [EOL] } <line_num>: 10113,10125
public void testMissingProperty29() throws Exception { [EOL]     testTypes("/** @constructor */ var Foo;" + "Foo.prototype.opera;" + "Foo.prototype.opera.postError;", "", null, false); [EOL] } <line_num>: 10127,10137
public void testMissingProperty30() throws Exception { [EOL]     testTypes("/** @return {*} */" + "function f() {" + " return {};" + "}" + "f().a = 3;" + "/** @param {Object} y */ function g(y) { return y.a; }"); [EOL] } <line_num>: 10139,10147
public void testMissingProperty31() throws Exception { [EOL]     testTypes("/** @return {Array|number} */" + "function f() {" + " return [];" + "}" + "f().a = 3;" + "/** @param {Array} y */ function g(y) { return y.a; }"); [EOL] } <line_num>: 10149,10157
public void testMissingProperty32() throws Exception { [EOL]     testTypes("/** @return {Array|number} */" + "function f() {" + " return [];" + "}" + "f().a = 3;" + "/** @param {Date} y */ function g(y) { return y.a; }", "Property a never defined on Date"); [EOL] } <line_num>: 10159,10168
public void testMissingProperty33() throws Exception { [EOL]     testTypes("/** @param {Object} x */" + "function f(x) { !x.foo || x.foo(); }"); [EOL] } <line_num>: 10170,10174
public void testMissingProperty34() throws Exception { [EOL]     testTypes("/** @fileoverview \n * @suppress {missingProperties} */" + "/** @constructor */ function Foo() {}" + "Foo.prototype.bar = function() { return this.a; };" + "Foo.prototype.baz = function() { this.b = 3; };"); [EOL] } <line_num>: 10176,10182
public void testMissingProperty35() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "/** @constructor */ function Bar() {}" + "/** @constructor */ function Baz() {}" + "/** @param {Foo|Bar} x */ function f(x) { x.specialProp = 1; }" + "/** @param {Bar|Baz} x */ function g(x) { return x.specialProp; }"); [EOL] } <line_num>: 10184,10192
public void testMissingProperty36() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "Foo.prototype.baz = 0;" + "/** @constructor \n * @extends {Foo} */ function SubFoo() {}" + "SubFoo.prototype.bar = 0;" + "/** @param {{bar: number}} x */ function f(x) { return x.baz; }"); [EOL] } <line_num>: 10194,10203
public void testMissingProperty37() throws Exception { [EOL]     testTypes("/** @param {{isVisible: boolean}} x */ function f(x){" + "  x.isVisible = false;" + "}" + "/** @constructor */ function Foo() {}" + "/**\n" + " * @constructor \n" + " * @extends {Foo}\n" + " */ function SubFoo() {}" + "/** @type {boolean} */ SubFoo.prototype.isVisible = true;" + "/**\n" + " * @param {Foo} x\n" + " * @return {boolean}\n" + " */\n" + "function g(x) { return x.isVisible; }"); [EOL] } <line_num>: 10205,10223
public void testMissingProperty38() throws Exception { [EOL]     testTypes("/** @constructor */ function Foo() {}" + "/** @constructor */ function Bar() {}" + "/** @return {Foo|Bar} */ function f() { return new Foo(); }" + "f().missing;", "Property missing never defined on (Bar|Foo|null)"); [EOL] } <line_num>: 10225,10232
public void testMissingProperty39() throws Exception { [EOL]     testTypes("/** @return {string|number} */ function f() { return 3; }" + "f().length;"); [EOL] } <line_num>: 10234,10238
public void testMissingProperty40() throws Exception { [EOL]     testClosureTypes("goog.addDependency('zzz.js', ['MissingType'], []);" + "/** @param {(Array|MissingType)} x */" + "function f(x) { x.impossible(); }", null); [EOL] } <line_num>: 10240,10245
public void testMissingProperty41() throws Exception { [EOL]     testTypes("/** @param {(Array|Date)} x */" + "function f(x) { if (x.impossible) x.impossible(); }"); [EOL] } <line_num>: 10247,10251
public void testMissingProperty42() throws Exception { [EOL]     testTypes("/** @param {Object} x */" + "function f(x) { " + "  if (typeof x.impossible == 'undefined') throw Error();" + "  return x.impossible;" + "}"); [EOL] } <line_num>: 10254,10261
public void testReflectObject1() throws Exception { [EOL]     testClosureTypes("var goog = {}; goog.reflect = {}; " + "goog.reflect.object = function(x, y){};" + "/** @constructor */ function A() {}" + "goog.reflect.object(A, {x: 3});", null); [EOL] } <line_num>: 10263,10270
public void testReflectObject2() throws Exception { [EOL]     testClosureTypes("var goog = {}; goog.reflect = {}; " + "goog.reflect.object = function(x, y){};" + "/** @param {string} x */ function f(x) {}" + "/** @constructor */ function A() {}" + "goog.reflect.object(A, {x: f(1 + 1)});", "actual parameter 1 of f does not match formal parameter\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 10272,10282
public void testLends1() throws Exception { [EOL]     testTypes("function extend(x, y) {}" + "/** @constructor */ function Foo() {}" + "extend(Foo, /** @lends */ ({bar: 1}));", "Bad type annotation. missing object name in @lends tag"); [EOL] } <line_num>: 10284,10290
public void testLends2() throws Exception { [EOL]     testTypes("function extend(x, y) {}" + "/** @constructor */ function Foo() {}" + "extend(Foo, /** @lends {Foob} */ ({bar: 1}));", "Variable Foob not declared before @lends annotation."); [EOL] } <line_num>: 10292,10298
public void testLends3() throws Exception { [EOL]     testTypes("function extend(x, y) {}" + "/** @constructor */ function Foo() {}" + "extend(Foo, {bar: 1});" + "alert(Foo.bar);", "Property bar never defined on Foo"); [EOL] } <line_num>: 10300,10307
public void testLends4() throws Exception { [EOL]     testTypes("function extend(x, y) {}" + "/** @constructor */ function Foo() {}" + "extend(Foo, /** @lends {Foo} */ ({bar: 1}));" + "alert(Foo.bar);"); [EOL] } <line_num>: 10309,10315
public void testLends5() throws Exception { [EOL]     testTypes("function extend(x, y) {}" + "/** @constructor */ function Foo() {}" + "extend(Foo, {bar: 1});" + "alert((new Foo()).bar);", "Property bar never defined on Foo"); [EOL] } <line_num>: 10317,10324
public void testLends6() throws Exception { [EOL]     testTypes("function extend(x, y) {}" + "/** @constructor */ function Foo() {}" + "extend(Foo, /** @lends {Foo.prototype} */ ({bar: 1}));" + "alert((new Foo()).bar);"); [EOL] } <line_num>: 10326,10332
public void testLends7() throws Exception { [EOL]     testTypes("function extend(x, y) {}" + "/** @constructor */ function Foo() {}" + "extend(Foo, /** @lends {Foo.prototype|Foo} */ ({bar: 1}));", "Bad type annotation. expected closing }"); [EOL] } <line_num>: 10334,10340
public void testLends8() throws Exception { [EOL]     testTypes("function extend(x, y) {}" + "/** @type {number} */ var Foo = 3;" + "extend(Foo, /** @lends {Foo} */ ({bar: 1}));", "May only lend properties to object types. Foo has type number."); [EOL] } <line_num>: 10342,10348
public void testLends9() throws Exception { [EOL]     testClosureTypesMultipleWarnings("function extend(x, y) {}" + "/** @constructor */ function Foo() {}" + "extend(Foo, /** @lends {!Foo} */ ({bar: 1}));", Lists.newArrayList("Bad type annotation. expected closing }", "Bad type annotation. missing object name in @lends tag")); [EOL] } <line_num>: 10350,10358
public void testLends10() throws Exception { [EOL]     testTypes("function defineClass(x) { return function() {}; } " + "/** @constructor */" + "var Foo = defineClass(" + "    /** @lends {Foo.prototype} */ ({/** @type {number} */ bar: 1}));" + "/** @return {string} */ function f() { return (new Foo()).bar; }", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 10360,10370
public void testLends11() throws Exception { [EOL]     testTypes("function defineClass(x, y) { return function() {}; } " + "/** @constructor */" + "var Foo = function() {};" + "/** @return {*} */ Foo.prototype.bar = function() { return 3; };" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n" + " */\n" + "var SubFoo = defineClass(Foo, " + "    /** @lends {SubFoo.prototype} */ ({\n" + "      /** @return {number} */ bar: function() { return 3; }}));" + "/** @return {string} */ function f() { return (new SubFoo()).bar(); }", "inconsistent return type\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 10372,10389
public void testDeclaredNativeTypeEquality() throws Exception { [EOL]     Node n = parseAndTypeCheck("/** @constructor */ function Object() {};"); [EOL]     assertTypeEquals(registry.getNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE), n.getFirstChild().getJSType()); [EOL] } <line_num>: 10391,10395
public void testUndefinedVar() throws Exception { [EOL]     Node n = parseAndTypeCheck("var undefined;"); [EOL]     assertTypeEquals(registry.getNativeType(JSTypeNative.VOID_TYPE), n.getFirstChild().getFirstChild().getJSType()); [EOL] } <line_num>: 10397,10401
public void testFlowScopeBug1() throws Exception { [EOL]     Node n = parseAndTypeCheck("/** @param {number} a \n" + "* @param {number} b */\n" + "function f(a, b) {\n" + "/** @type number */" + "var i = 0;" + "for (; (i + a) < b; ++i) {}}"); [EOL]     assertTypeEquals(registry.getNativeType(JSTypeNative.NUMBER_TYPE), n.getFirstChild().getLastChild().getLastChild().getFirstChild().getNext().getFirstChild().getJSType()); [EOL] } <line_num>: 10403,10415
public void testFlowScopeBug2() throws Exception { [EOL]     Node n = parseAndTypeCheck("/** @constructor */ function Foo() {};\n" + "Foo.prototype.hi = false;" + "function foo(a, b) {\n" + "  /** @type Array */" + "  var arr;" + "  /** @type number */" + "  var iter;" + "  for (iter = 0; iter < arr.length; ++ iter) {" + "    /** @type Foo */" + "    var afoo = arr[iter];" + "    afoo;" + "  }" + "}"); [EOL]     assertTypeEquals(registry.createNullableType(registry.getType("Foo")), n.getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getJSType()); [EOL] } <line_num>: 10417,10436
public void testAddSingletonGetter() { [EOL]     Node n = parseAndTypeCheck("/** @constructor */ function Foo() {};\n" + "goog.addSingletonGetter(Foo);"); [EOL]     ObjectType o = (ObjectType) n.getFirstChild().getJSType(); [EOL]     assertEquals("function (): Foo", o.getPropertyType("getInstance").toString()); [EOL]     assertEquals("Foo", o.getPropertyType("instance_").toString()); [EOL] } <line_num>: 10438,10446
public void testTypeCheckStandaloneAST() throws Exception { [EOL]     Node n = compiler.parseTestCode("function Foo() { }"); [EOL]     typeCheck(n); [EOL]     MemoizedScopeCreator scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler)); [EOL]     Scope topScope = scopeCreator.createScope(n, null); [EOL]     Node second = compiler.parseTestCode("new Foo"); [EOL]     Node externs = new Node(Token.BLOCK); [EOL]     Node externAndJsRoot = new Node(Token.BLOCK, externs, second); [EOL]     externAndJsRoot.setIsSyntheticBlock(true); [EOL]     new TypeCheck(compiler, new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(), registry), registry, topScope, scopeCreator, CheckLevel.WARNING, CheckLevel.OFF).process(null, second); [EOL]     assertEquals(1, compiler.getWarningCount()); [EOL]     assertEquals("cannot instantiate non-constructor", compiler.getWarnings()[0].description); [EOL] } <line_num>: 10448,10471
public void testUpdateParameterTypeOnClosure() throws Exception { [EOL]     testTypes("/**\n" + "* @constructor\n" + "* @param {*=} opt_value\n" + "* @return {?}\n" + "*/\n" + "function Object(opt_value) {}\n" + "/**\n" + "* @constructor\n" + "* @param {...*} var_args\n" + "*/\n" + "function Function(var_args) {}\n" + "/**\n" + "* @type {Function}\n" + "*/\n" + "Object.prototype.constructor = function() {};\n", "/**\n" + "* @param {function(): boolean} fn\n" + "*/\n" + "function f(fn) {}\n" + "f(function(g) { });\n", null, false); [EOL] } <line_num>: 10473,10499
public void testTemplatedThisType1() throws Exception { [EOL]     testTypes("/** @constructor */\n" + "function Foo() {}\n" + "/**\n" + " * @this {T}\n" + " * @return {T}\n" + " * @template T\n" + " */\n" + "Foo.prototype.method = function() {};\n" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n" + " */\n" + "function Bar() {}\n" + "var g = new Bar().method();\n" + "/**\n" + " * @param {number} a\n" + " */\n" + "function compute(a) {};\n" + "compute(g);\n", "actual parameter 1 of compute does not match formal parameter\n" + "found   : Bar\n" + "required: number"); [EOL] } <line_num>: 10501,10526
public void testTemplatedThisType2() throws Exception { [EOL]     testTypes("/**\n" + " * @this {Array.<T>|{length:number}}\n" + " * @return {T}\n" + " * @template T\n" + " */\n" + "Array.prototype.method = function() {};\n" + "(function(){\n" + "  Array.prototype.method.call(arguments);" + "})();"); [EOL] } <line_num>: 10528,10539
public void testTemplateType1() throws Exception { [EOL]     testTypes("/**\n" + "* @param {T} x\n" + "* @param {T} y\n" + "* @param {function(this:T, ...)} z\n" + "* @template T\n" + "*/\n" + "function f(x, y, z) {}\n" + "f(this, this, function() { this });"); [EOL] } <line_num>: 10541,10551
public void testTemplateType2() throws Exception { [EOL]     testTypes("/**\n" + "* @param {T} x\n" + "* @param {function(this:T, ...)} y\n" + "* @template T\n" + "*/\n" + "function f(x, y) {}\n" + "f(0, function() {});"); [EOL] } <line_num>: 10553,10564
public void testTemplateType3() throws Exception { [EOL]     testTypes("/**" + " * @param {T} v\n" + " * @param {function(T)} f\n" + " * @template T\n" + " */\n" + "function call(v, f) { f.call(null, v); }" + "/** @type {string} */ var s;" + "call(3, function(x) {" + " x = true;" + " s = x;" + "});", "assignment\n" + "found   : boolean\n" + "required: string"); [EOL] } <line_num>: 10566,10582
public void testTemplateType4() throws Exception { [EOL]     testTypes("/**" + " * @param {...T} p\n" + " * @return {T} \n" + " * @template T\n" + " */\n" + "function fn(p) { return p; }\n" + "/** @type {!Object} */ var x;" + "x = fn(3, null);", "assignment\n" + "found   : (null|number)\n" + "required: Object"); [EOL] } <line_num>: 10584,10597
public void testTemplateType5() throws Exception { [EOL]     testTypes("/**" + " * @param {Array.<T>} arr \n" + " * @param {?function(T)} f \n" + " * @return {T} \n" + " * @template T\n" + " */\n" + "function fn(arr, f) { return arr[0]; }\n" + "/** @param {Array.<number>} arr */ function g(arr) {" + "  /** @type {!Object} */ var x = fn.call(null, arr, null);" + "}", "initializing variable\n" + "found   : number\n" + "required: Object"); [EOL] } <line_num>: 10599,10614
public void disable_testBadTemplateType4() throws Exception { [EOL]     testTypes("/**\n" + "* @template T\n" + "*/\n" + "function f() {}\n" + "f();", FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format()); [EOL] } <line_num>: 10616,10627
public void disable_testBadTemplateType5() throws Exception { [EOL]     testTypes("/**\n" + "* @template T\n" + "* @return {T}\n" + "*/\n" + "function f() {}\n" + "f();", FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format()); [EOL] } <line_num>: 10629,10641
public void disable_testFunctionLiteralUndefinedThisArgument() throws Exception { [EOL]     testTypes("" + "/**\n" + " * @param {function(this:T, ...)?} fn\n" + " * @param {?T} opt_obj\n" + " * @template T\n" + " */\n" + "function baz(fn, opt_obj) {}\n" + "baz(function() { this; });", "Function literal argument refers to undefined this argument"); [EOL] } <line_num>: 10643,10657
public void testFunctionLiteralDefinedThisArgument() throws Exception { [EOL]     testTypes("" + "/**\n" + " * @param {function(this:T, ...)?} fn\n" + " * @param {?T} opt_obj\n" + " * @template T\n" + " */\n" + "function baz(fn, opt_obj) {}\n" + "baz(function() { this; }, {});"); [EOL] } <line_num>: 10659,10668
public void testFunctionLiteralDefinedThisArgument2() throws Exception { [EOL]     testTypes("" + "/** @param {string} x */ function f(x) {}" + "/**\n" + " * @param {?function(this:T, ...)} fn\n" + " * @param {T=} opt_obj\n" + " * @template T\n" + " */\n" + "function baz(fn, opt_obj) {}\n" + "function g() { baz(function() { f(this.length); }, []); }", "actual parameter 1 of f does not match formal parameter\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 10670,10683
public void testFunctionLiteralUnreadNullThisArgument() throws Exception { [EOL]     testTypes("" + "/**\n" + " * @param {function(this:T, ...)?} fn\n" + " * @param {?T} opt_obj\n" + " * @template T\n" + " */\n" + "function baz(fn, opt_obj) {}\n" + "baz(function() {}, null);"); [EOL] } <line_num>: 10685,10694
public void testUnionTemplateThisType() throws Exception { [EOL]     testTypes("/** @constructor */ function F() {}" + "/** @return {F|Array} */ function g() { return []; }" + "/** @param {F} x */ function h(x) { }" + "/**\n" + "* @param {T} x\n" + "* @param {function(this:T, ...)} y\n" + "* @template T\n" + "*/\n" + "function f(x, y) {}\n" + "f(g(), function() { h(this); });", "actual parameter 1 of h does not match formal parameter\n" + "found   : (Array|F|null)\n" + "required: (F|null)"); [EOL] } <line_num>: 10696,10711
public void testActiveXObject() throws Exception { [EOL]     testTypes("/** @type {Object} */ var x = new ActiveXObject();" + "/** @type { {impossibleProperty} } */ var y = new ActiveXObject();"); [EOL] } <line_num>: 10713,10717
public void testRecordType1() throws Exception { [EOL]     testTypes("/** @param {{prop: number}} x */" + "function f(x) {}" + "f({});", "actual parameter 1 of f does not match formal parameter\n" + "found   : {prop: (number|undefined)}\n" + "required: {prop: number}"); [EOL] } <line_num>: 10719,10727
public void testRecordType2() throws Exception { [EOL]     testTypes("/** @param {{prop: (number|undefined)}} x */" + "function f(x) {}" + "f({});"); [EOL] } <line_num>: 10729,10734
public void testRecordType3() throws Exception { [EOL]     testTypes("/** @param {{prop: number}} x */" + "function f(x) {}" + "f({prop: 'x'});", "actual parameter 1 of f does not match formal parameter\n" + "found   : {prop: (number|string)}\n" + "required: {prop: number}"); [EOL] } <line_num>: 10736,10744
public void testRecordType4() throws Exception { [EOL]     testClosureTypesMultipleWarnings("/** @param {{prop: (number|undefined)}} x */" + "function f(x) {}" + "/** @param {{prop: (string|undefined)}} x */" + "function g(x) {}" + "var x = {}; f(x); g(x);", Lists.newArrayList("actual parameter 1 of f does not match formal parameter\n" + "found   : {prop: (number|string|undefined)}\n" + "required: {prop: (number|undefined)}", "actual parameter 1 of g does not match formal parameter\n" + "found   : {prop: (number|string|undefined)}\n" + "required: {prop: (string|undefined)}")); [EOL] } <line_num>: 10746,10763
public void testRecordType5() throws Exception { [EOL]     testTypes("/** @param {{prop: (number|undefined)}} x */" + "function f(x) {}" + "/** @param {{otherProp: (string|undefined)}} x */" + "function g(x) {}" + "var x = {}; f(x); g(x);"); [EOL] } <line_num>: 10765,10772
public void testRecordType6() throws Exception { [EOL]     testTypes("/** @return {{prop: (number|undefined)}} x */" + "function f() { return {}; }"); [EOL] } <line_num>: 10774,10778
public void testRecordType7() throws Exception { [EOL]     testTypes("/** @return {{prop: (number|undefined)}} x */" + "function f() { var x = {}; g(x); return x; }" + "/** @param {number} x */" + "function g(x) {}", "actual parameter 1 of g does not match formal parameter\n" + "found   : {prop: (number|undefined)}\n" + "required: number"); [EOL] } <line_num>: 10780,10789
public void testRecordType8() throws Exception { [EOL]     testTypes("/** @return {{prop: (number|string)}} x */" + "function f() { var x = {prop: 3}; g(x.prop); return x; }" + "/** @param {string} x */" + "function g(x) {}", "actual parameter 1 of g does not match formal parameter\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 10791,10800
public void testDuplicateRecordFields1() throws Exception { [EOL]     testTypes("/**" + "* @param {{x:string, x:number}} a" + "*/" + "function f(a) {};", "Parse error. Duplicate record field x"); [EOL] } <line_num>: 10802,10808
public void testDuplicateRecordFields2() throws Exception { [EOL]     testTypes("/**" + "* @param {{name:string,number:x,number:y}} a" + " */" + "function f(a) {};", new String[] { "Bad type annotation. Unknown type x", "Parse error. Duplicate record field number", "Bad type annotation. Unknown type y" }); [EOL] } <line_num>: 10810,10818
public void testMultipleExtendsInterface1() throws Exception { [EOL]     testTypes("/** @interface */ function base1() {}\n" + "/** @interface */ function base2() {}\n" + "/** @interface\n" + "* @extends {base1}\n" + "* @extends {base2}\n" + "*/\n" + "function derived() {}"); [EOL] } <line_num>: 10820,10828
public void testMultipleExtendsInterface2() throws Exception { [EOL]     testTypes("/** @interface */function Int0() {};" + "/** @interface */function Int1() {};" + "/** @desc description */Int0.prototype.foo = function() {};" + "/** @interface \n @extends {Int0} \n @extends {Int1} */" + "function Int2() {};" + "/** @constructor\n @implements {Int2} */function Foo() {};", "property foo on interface Int0 is not implemented by type Foo"); [EOL] } <line_num>: 10830,10839
public void testMultipleExtendsInterface3() throws Exception { [EOL]     testTypes("/** @interface */function Int0() {};" + "/** @interface */function Int1() {};" + "/** @desc description */Int1.prototype.foo = function() {};" + "/** @interface \n @extends {Int0} \n @extends {Int1} */" + "function Int2() {};" + "/** @constructor\n @implements {Int2} */function Foo() {};", "property foo on interface Int1 is not implemented by type Foo"); [EOL] } <line_num>: 10841,10850
public void testMultipleExtendsInterface4() throws Exception { [EOL]     testTypes("/** @interface */function Int0() {};" + "/** @interface */function Int1() {};" + "/** @interface \n @extends {Int0} \n @extends {Int1} \n" + " @extends {number} */" + "function Int2() {};" + "/** @constructor\n @implements {Int2} */function Foo() {};", "Int2 @extends non-object type number"); [EOL] } <line_num>: 10852,10861
public void testMultipleExtendsInterface5() throws Exception { [EOL]     testTypes("/** @interface */function Int0() {};" + "/** @constructor */function Int1() {};" + "/** @desc description @ return {string} x */" + "/** @interface \n @extends {Int0} \n @extends {Int1} */" + "function Int2() {};", "Int2 cannot extend this type; interfaces can only extend interfaces"); [EOL] } <line_num>: 10863,10871
public void testMultipleExtendsInterface6() throws Exception { [EOL]     testTypes("/** @interface */function Super1() {};" + "/** @interface */function Super2() {};" + "/** @param {number} bar */Super2.prototype.foo = function(bar) {};" + "/** @interface\n @extends {Super1}\n " + "@extends {Super2} */function Sub() {};" + "/** @override\n @param {string} bar */Sub.prototype.foo =\n" + "function(bar) {};", "mismatch of the foo property type and the type of the property it " + "overrides from superclass Super2\n" + "original: function (this:Super2, number): undefined\n" + "override: function (this:Sub, string): undefined"); [EOL] } <line_num>: 10873,10886
public void testMultipleExtendsInterfaceAssignment() throws Exception { [EOL]     testTypes("/** @interface */var I1 = function() {};\n" + "/** @interface */ var I2 = function() {}\n" + "/** @interface\n@extends {I1}\n@extends {I2}*/" + "var I3 = function() {};\n" + "/** @constructor\n@implements {I3}*/var T = function() {};\n" + "var t = new T();\n" + "/** @type {I1} */var i1 = t;\n" + "/** @type {I2} */var i2 = t;\n" + "/** @type {I3} */var i3 = t;\n" + "i1 = i3;\n" + "i2 = i3;\n"); [EOL] } <line_num>: 10888,10900
public void testMultipleExtendsInterfaceParamPass() throws Exception { [EOL]     testTypes("/** @interface */var I1 = function() {};\n" + "/** @interface */ var I2 = function() {}\n" + "/** @interface\n@extends {I1}\n@extends {I2}*/" + "var I3 = function() {};\n" + "/** @constructor\n@implements {I3}*/var T = function() {};\n" + "var t = new T();\n" + "/** @param x I1 \n@param y I2\n@param z I3*/function foo(x,y,z){};\n" + "foo(t,t,t)\n"); [EOL] } <line_num>: 10902,10911
public void testBadMultipleExtendsClass() throws Exception { [EOL]     testTypes("/** @constructor */ function base1() {}\n" + "/** @constructor */ function base2() {}\n" + "/** @constructor\n" + "* @extends {base1}\n" + "* @extends {base2}\n" + "*/\n" + "function derived() {}", "Bad type annotation. type annotation incompatible " + "with other annotations"); [EOL] } <line_num>: 10913,10923
public void testInterfaceExtendsResolution() throws Exception { [EOL]     testTypes("/** @interface \n @extends {A} */ function B() {};\n" + "/** @constructor \n @implements {B} */ function C() {};\n" + "/** @interface */ function A() {};"); [EOL] } <line_num>: 10925,10929
public void testPropertyCanBeDefinedInObject() throws Exception { [EOL]     testTypes("/** @interface */ function I() {};" + "I.prototype.bar = function() {};" + "/** @type {Object} */ var foo;" + "foo.bar();"); [EOL] } <line_num>: 10931,10936
private void checkObjectType(ObjectType objectType, String propertyName, JSType expectedType) { [EOL]     assertTrue("Expected " + objectType.getReferenceName() + " to have property " + propertyName, objectType.hasProperty(propertyName)); [EOL]     assertTypeEquals("Expected " + objectType.getReferenceName() + "'s property " + propertyName + " to have type " + expectedType, expectedType, objectType.getPropertyType(propertyName)); [EOL] } <line_num>: 10938,10947
public void testExtendedInterfacePropertiesCompatibility1() throws Exception { [EOL]     testTypes("/** @interface */function Int0() {};" + "/** @interface */function Int1() {};" + "/** @type {number} */" + "Int0.prototype.foo;" + "/** @type {string} */" + "Int1.prototype.foo;" + "/** @interface \n @extends {Int0} \n @extends {Int1} */" + "function Int2() {};", "Interface Int2 has a property foo with incompatible types in its " + "super interfaces Int0 and Int1"); [EOL] } <line_num>: 10949,10961
public void testExtendedInterfacePropertiesCompatibility2() throws Exception { [EOL]     testTypes("/** @interface */function Int0() {};" + "/** @interface */function Int1() {};" + "/** @interface */function Int2() {};" + "/** @type {number} */" + "Int0.prototype.foo;" + "/** @type {string} */" + "Int1.prototype.foo;" + "/** @type {Object} */" + "Int2.prototype.foo;" + "/** @interface \n @extends {Int0} \n @extends {Int1} \n" + "@extends {Int2}*/" + "function Int3() {};", new String[] { "Interface Int3 has a property foo with incompatible types in " + "its super interfaces Int0 and Int1", "Interface Int3 has a property foo with incompatible types in " + "its super interfaces Int1 and Int2" }); [EOL] } <line_num>: 10963,10983
public void testExtendedInterfacePropertiesCompatibility3() throws Exception { [EOL]     testTypes("/** @interface */function Int0() {};" + "/** @interface */function Int1() {};" + "/** @type {number} */" + "Int0.prototype.foo;" + "/** @type {string} */" + "Int1.prototype.foo;" + "/** @interface \n @extends {Int1} */ function Int2() {};" + "/** @interface \n @extends {Int0} \n @extends {Int2} */" + "function Int3() {};", "Interface Int3 has a property foo with incompatible types in its " + "super interfaces Int0 and Int1"); [EOL] } <line_num>: 10985,10998
public void testExtendedInterfacePropertiesCompatibility4() throws Exception { [EOL]     testTypes("/** @interface */function Int0() {};" + "/** @interface \n @extends {Int0} */ function Int1() {};" + "/** @type {number} */" + "Int0.prototype.foo;" + "/** @interface */function Int2() {};" + "/** @interface \n @extends {Int2} */ function Int3() {};" + "/** @type {string} */" + "Int2.prototype.foo;" + "/** @interface \n @extends {Int1} \n @extends {Int3} */" + "function Int4() {};", "Interface Int4 has a property foo with incompatible types in its " + "super interfaces Int0 and Int2"); [EOL] } <line_num>: 11000,11014
public void testExtendedInterfacePropertiesCompatibility5() throws Exception { [EOL]     testTypes("/** @interface */function Int0() {};" + "/** @interface */function Int1() {};" + "/** @type {number} */" + "Int0.prototype.foo;" + "/** @type {string} */" + "Int1.prototype.foo;" + "/** @interface \n @extends {Int1} */ function Int2() {};" + "/** @interface \n @extends {Int0} \n @extends {Int2} */" + "function Int3() {};" + "/** @interface */function Int4() {};" + "/** @type {number} */" + "Int4.prototype.foo;" + "/** @interface \n @extends {Int3} \n @extends {Int4} */" + "function Int5() {};", new String[] { "Interface Int3 has a property foo with incompatible types in its" + " super interfaces Int0 and Int1", "Interface Int5 has a property foo with incompatible types in its" + " super interfaces Int1 and Int4" }); [EOL] } <line_num>: 11016,11037
public void testExtendedInterfacePropertiesCompatibility6() throws Exception { [EOL]     testTypes("/** @interface */function Int0() {};" + "/** @interface */function Int1() {};" + "/** @type {number} */" + "Int0.prototype.foo;" + "/** @type {string} */" + "Int1.prototype.foo;" + "/** @interface \n @extends {Int1} */ function Int2() {};" + "/** @interface \n @extends {Int0} \n @extends {Int2} */" + "function Int3() {};" + "/** @interface */function Int4() {};" + "/** @type {string} */" + "Int4.prototype.foo;" + "/** @interface \n @extends {Int3} \n @extends {Int4} */" + "function Int5() {};", "Interface Int3 has a property foo with incompatible types in its" + " super interfaces Int0 and Int1"); [EOL] } <line_num>: 11039,11057
public void testExtendedInterfacePropertiesCompatibility7() throws Exception { [EOL]     testTypes("/** @interface */function Int0() {};" + "/** @interface */function Int1() {};" + "/** @type {number} */" + "Int0.prototype.foo;" + "/** @type {string} */" + "Int1.prototype.foo;" + "/** @interface \n @extends {Int1} */ function Int2() {};" + "/** @interface \n @extends {Int0} \n @extends {Int2} */" + "function Int3() {};" + "/** @interface */function Int4() {};" + "/** @type {Object} */" + "Int4.prototype.foo;" + "/** @interface \n @extends {Int3} \n @extends {Int4} */" + "function Int5() {};", new String[] { "Interface Int3 has a property foo with incompatible types in its" + " super interfaces Int0 and Int1", "Interface Int5 has a property foo with incompatible types in its" + " super interfaces Int1 and Int4" }); [EOL] } <line_num>: 11059,11080
public void testExtendedInterfacePropertiesCompatibility8() throws Exception { [EOL]     testTypes("/** @interface */function Int0() {};" + "/** @interface */function Int1() {};" + "/** @type {number} */" + "Int0.prototype.foo;" + "/** @type {string} */" + "Int1.prototype.bar;" + "/** @interface \n @extends {Int1} */ function Int2() {};" + "/** @interface \n @extends {Int0} \n @extends {Int2} */" + "function Int3() {};" + "/** @interface */function Int4() {};" + "/** @type {Object} */" + "Int4.prototype.foo;" + "/** @type {Null} */" + "Int4.prototype.bar;" + "/** @interface \n @extends {Int3} \n @extends {Int4} */" + "function Int5() {};", new String[] { "Interface Int5 has a property bar with incompatible types in its" + " super interfaces Int1 and Int4", "Interface Int5 has a property foo with incompatible types in its" + " super interfaces Int0 and Int4" }); [EOL] } <line_num>: 11082,11105
public void testGenerics1() throws Exception { [EOL]     String FN_DECL = "/** \n" + " * @param {T} x \n" + " * @param {function(T):T} y \n" + " * @template T\n" + " */ \n" + "function f(x,y) { return y(x); }\n"; [EOL]     testTypes(FN_DECL + "/** @type {string} */" + "var out;" + "/** @type {string} */" + "var result = f('hi', function(x){ out = x; return x; });"); [EOL]     testTypes(FN_DECL + "/** @type {string} */" + "var out;" + "var result = f(0, function(x){ out = x; return x; });", "assignment\n" + "found   : number\n" + "required: string"); [EOL]     testTypes(FN_DECL + "var out;" + "/** @type {string} */" + "var result = f(0, function(x){ out = x; return x; });", "assignment\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 11107,11139
public void testFilter0() throws Exception { [EOL]     testTypes("/**\n" + " * @param {T} arr\n" + " * @return {T}\n" + " * @template T\n" + " */\n" + "var filter = function(arr){};\n" + "/** @type {!Array.<string>} */" + "var arr;\n" + "/** @type {!Array.<string>} */" + "var result = filter(arr);"); [EOL] } <line_num>: 11141,11155
public void testFilter1() throws Exception { [EOL]     testTypes("/**\n" + " * @param {!Array.<T>} arr\n" + " * @return {!Array.<T>}\n" + " * @template T\n" + " */\n" + "var filter = function(arr){};\n" + "/** @type {!Array.<string>} */" + "var arr;\n" + "/** @type {!Array.<string>} */" + "var result = filter(arr);"); [EOL] } <line_num>: 11157,11171
public void testFilter2() throws Exception { [EOL]     testTypes("/**\n" + " * @param {!Array.<T>} arr\n" + " * @return {!Array.<T>}\n" + " * @template T\n" + " */\n" + "var filter = function(arr){};\n" + "/** @type {!Array.<string>} */" + "var arr;\n" + "/** @type {!Array.<number>} */" + "var result = filter(arr);", "initializing variable\n" + "found   : Array.<string>\n" + "required: Array.<number>"); [EOL] } <line_num>: 11173,11190
public void testFilter3() throws Exception { [EOL]     testTypes("/**\n" + " * @param {Array.<T>} arr\n" + " * @return {Array.<T>}\n" + " * @template T\n" + " */\n" + "var filter = function(arr){};\n" + "/** @type {Array.<string>} */" + "var arr;\n" + "/** @type {Array.<number>} */" + "var result = filter(arr);", "initializing variable\n" + "found   : (Array.<string>|null)\n" + "required: (Array.<number>|null)"); [EOL] } <line_num>: 11192,11209
public void testBackwardsInferenceGoogArrayFilter1() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @type {Array.<string>} */" + "var arr;\n" + "/** @type {!Array.<number>} */" + "var result = goog.array.filter(" + "   arr," + "   function(item,index,src) {return false;});", "initializing variable\n" + "found   : Array.<string>\n" + "required: Array.<number>"); [EOL] } <line_num>: 11211,11224
public void testBackwardsInferenceGoogArrayFilter2() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @type {number} */" + "var out;" + "/** @type {Array.<string>} */" + "var arr;\n" + "var out4 = goog.array.filter(" + "   arr," + "   function(item,index,src) {out = item;});", "assignment\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 11226,11239
public void testBackwardsInferenceGoogArrayFilter3() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @type {string} */" + "var out;" + "/** @type {Array.<string>} */ var arr;\n" + "var result = goog.array.filter(" + "   arr," + "   function(item,index,src) {out = index;});", "assignment\n" + "found   : number\n" + "required: string"); [EOL] } <line_num>: 11241,11253
public void testBackwardsInferenceGoogArrayFilter4() throws Exception { [EOL]     testClosureTypes(CLOSURE_DEFS + "/** @type {string} */" + "var out;" + "/** @type {Array.<string>} */ var arr;\n" + "var out4 = goog.array.filter(" + "   arr," + "   function(item,index,srcArr) {out = srcArr;});", "assignment\n" + "found   : (null|{length: number})\n" + "required: string"); [EOL] } <line_num>: 11255,11267
public void testCatchExpression1() throws Exception { [EOL]     testTypes("function fn() {" + "  /** @type {number} */" + "  var out = 0;" + "  try {\n" + "    foo();\n" + "  } catch (/** @type {string} */ e) {\n" + "    out = e;" + "  }" + "}\n", "assignment\n" + "found   : string\n" + "required: number"); [EOL] } <line_num>: 11269,11283
public void testCatchExpression2() throws Exception { [EOL]     testTypes("function fn() {" + "  /** @type {number} */" + "  var out = 0;" + "  /** @type {string} */" + "  var e;" + "  try {\n" + "    foo();\n" + "  } catch (e) {\n" + "    out = e;" + "  }" + "}\n"); [EOL] } <line_num>: 11285,11298
public void testParameterized1() throws Exception { [EOL]     testTypes("/** @type {!Array.<string>} */" + "var arr1 = [];\n" + "/** @type {!Array.<number>} */" + "var arr2 = [];\n" + "arr1 = arr2;", "assignment\n" + "found   : Array.<number>\n" + "required: Array.<string>"); [EOL] } <line_num>: 11300,11310
public void testParameterized2() throws Exception { [EOL]     testTypes("/** @type {!Array.<string>} */" + "var arr1 = /** @type {!Array.<number>} */([]);\n", "initializing variable\n" + "found   : Array.<number>\n" + "required: Array.<string>"); [EOL] } <line_num>: 11312,11319
public void testParameterized3() throws Exception { [EOL]     testTypes("/** @type {Array.<string>} */" + "var arr1 = /** @type {!Array.<number>} */([]);\n", "initializing variable\n" + "found   : Array.<number>\n" + "required: (Array.<string>|null)"); [EOL] } <line_num>: 11321,11328
public void testParameterized4() throws Exception { [EOL]     testTypes("/** @type {Array.<string>} */" + "var arr1 = [];\n" + "/** @type {Array.<number>} */" + "var arr2 = arr1;\n", "initializing variable\n" + "found   : (Array.<string>|null)\n" + "required: (Array.<number>|null)"); [EOL] } <line_num>: 11330,11339
public void testParameterized5() throws Exception { [EOL]     testTypes("/**\n" + " * @param {Object.<T>} obj\n" + " * @return {boolean|undefined}\n" + " * @template T\n" + " */\n" + "var some = function(obj) {" + "  for (var key in obj) if (obj[key]) return true;" + "};" + "/** @return {!Array} */ function f() { return []; }" + "/** @return {!Array.<string>} */ function g() { return []; }" + "some(f());\n" + "some(g());\n"); [EOL] } <line_num>: 11341,11355
public void testParameterizedTypeSubtypes2() throws Exception { [EOL]     JSType arrayOfNumber = createParameterizedType(ARRAY_TYPE, NUMBER_TYPE); [EOL]     JSType arrayOfString = createParameterizedType(ARRAY_TYPE, STRING_TYPE); [EOL]     assertFalse(arrayOfString.isSubtype(createUnionType(arrayOfNumber, NULL_VOID))); [EOL] } <line_num>: 11357,11364
private void testTypes(String js) throws Exception { [EOL]     testTypes(js, (String) null); [EOL] } <line_num>: 11366,11368
private void testTypes(String js, String description) throws Exception { [EOL]     testTypes(js, description, false); [EOL] } <line_num>: 11370,11372
private void testTypes(String js, DiagnosticType type) throws Exception { [EOL]     testTypes(js, type.format(), false); [EOL] } <line_num>: 11374,11376
private void testClosureTypes(String js, String description) throws Exception { [EOL]     testClosureTypesMultipleWarnings(js, description == null ? null : Lists.newArrayList(description)); [EOL] } <line_num>: 11378,11382
private void testClosureTypesMultipleWarnings(String js, List<String> descriptions) throws Exception { [EOL]     Node n = compiler.parseTestCode(js); [EOL]     Node externs = new Node(Token.BLOCK); [EOL]     Node externAndJsRoot = new Node(Token.BLOCK, externs, n); [EOL]     externAndJsRoot.setIsSyntheticBlock(true); [EOL]     assertEquals("parsing error: " + Joiner.on(", ").join(compiler.getErrors()), 0, compiler.getErrorCount()); [EOL]     new ProcessClosurePrimitives(compiler, null, CheckLevel.ERROR).process(null, n); [EOL]     CodingConvention convention = compiler.getCodingConvention(); [EOL]     new TypeCheck(compiler, new ClosureReverseAbstractInterpreter(convention, registry).append(new SemanticReverseAbstractInterpreter(convention, registry)).getFirst(), registry).processForTesting(null, n); [EOL]     assertEquals("unexpected error(s) : " + Joiner.on(", ").join(compiler.getErrors()), 0, compiler.getErrorCount()); [EOL]     if (descriptions == null) { [EOL]         assertEquals("unexpected warning(s) : " + Joiner.on(", ").join(compiler.getWarnings()), 0, compiler.getWarningCount()); [EOL]     } else { [EOL]         assertEquals("unexpected warning(s) : " + Joiner.on(", ").join(compiler.getWarnings()), descriptions.size(), compiler.getWarningCount()); [EOL]         Set<String> actualWarningDescriptions = Sets.newHashSet(); [EOL]         for (int i = 0; i < descriptions.size(); i++) { [EOL]             actualWarningDescriptions.add(compiler.getWarnings()[i].description); [EOL]         } [EOL]         assertEquals(Sets.newHashSet(descriptions), actualWarningDescriptions); [EOL]     } [EOL] } <line_num>: 11384,11431
void testTypes(String js, String description, boolean isError) throws Exception { [EOL]     testTypes(DEFAULT_EXTERNS, js, description, isError); [EOL] } <line_num>: 11433,11436
void testTypes(String externs, String js, String description, boolean isError) throws Exception { [EOL]     Node n = parseAndTypeCheck(externs, js); [EOL]     JSError[] errors = compiler.getErrors(); [EOL]     if (description != null && isError) { [EOL]         assertTrue("expected an error", errors.length > 0); [EOL]         assertEquals(description, errors[0].description); [EOL]         errors = Arrays.asList(errors).subList(1, errors.length).toArray(new JSError[errors.length - 1]); [EOL]     } [EOL]     if (errors.length > 0) { [EOL]         fail("unexpected error(s):\n" + Joiner.on("\n").join(errors)); [EOL]     } [EOL]     JSError[] warnings = compiler.getWarnings(); [EOL]     if (description != null && !isError) { [EOL]         assertTrue("expected a warning", warnings.length > 0); [EOL]         assertEquals(description, warnings[0].description); [EOL]         warnings = Arrays.asList(warnings).subList(1, warnings.length).toArray(new JSError[warnings.length - 1]); [EOL]     } [EOL]     if (warnings.length > 0) { [EOL]         fail("unexpected warnings(s):\n" + Joiner.on("\n").join(warnings)); [EOL]     } [EOL] } <line_num>: 11438,11463
private Node parseAndTypeCheck(String js) { [EOL]     return parseAndTypeCheck(DEFAULT_EXTERNS, js); [EOL] } <line_num>: 11468,11470
private Node parseAndTypeCheck(String externs, String js) { [EOL]     return parseAndTypeCheckWithScope(externs, js).root; [EOL] } <line_num>: 11472,11474
private TypeCheckResult parseAndTypeCheckWithScope(String js) { [EOL]     return parseAndTypeCheckWithScope(DEFAULT_EXTERNS, js); [EOL] } <line_num>: 11480,11482
private TypeCheckResult parseAndTypeCheckWithScope(String externs, String js) { [EOL]     compiler.init(Lists.newArrayList(SourceFile.fromCode("[externs]", externs)), Lists.newArrayList(SourceFile.fromCode("[testcode]", js)), compiler.getOptions()); [EOL]     Node n = compiler.getInput(new InputId("[testcode]")).getAstRoot(compiler); [EOL]     Node externsNode = compiler.getInput(new InputId("[externs]")).getAstRoot(compiler); [EOL]     Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n); [EOL]     externAndJsRoot.setIsSyntheticBlock(true); [EOL]     assertEquals("parsing error: " + Joiner.on(", ").join(compiler.getErrors()), 0, compiler.getErrorCount()); [EOL]     Scope s = makeTypeCheck().processForTesting(externsNode, n); [EOL]     return new TypeCheckResult(n, s); [EOL] } <line_num>: 11484,11503
private Node typeCheck(Node n) { [EOL]     Node externsNode = new Node(Token.BLOCK); [EOL]     Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n); [EOL]     externAndJsRoot.setIsSyntheticBlock(true); [EOL]     makeTypeCheck().processForTesting(null, n); [EOL]     return n; [EOL] } <line_num>: 11505,11512
private TypeCheck makeTypeCheck() { [EOL]     return new TypeCheck(compiler, new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(), registry), registry, reportMissingOverrides, CheckLevel.OFF); [EOL] } <line_num>: 11514,11522
void testTypes(String js, String[] warnings) throws Exception { [EOL]     Node n = compiler.parseTestCode(js); [EOL]     assertEquals(0, compiler.getErrorCount()); [EOL]     Node externsNode = new Node(Token.BLOCK); [EOL]     Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n); [EOL]     makeTypeCheck().processForTesting(null, n); [EOL]     assertEquals(0, compiler.getErrorCount()); [EOL]     if (warnings != null) { [EOL]         assertEquals(warnings.length, compiler.getWarningCount()); [EOL]         JSError[] messages = compiler.getWarnings(); [EOL]         for (int i = 0; i < warnings.length && i < compiler.getWarningCount(); i++) { [EOL]             assertEquals(warnings[i], messages[i].description); [EOL]         } [EOL]     } else { [EOL]         assertEquals(0, compiler.getWarningCount()); [EOL]     } [EOL] } <line_num>: 11524,11542
String suppressMissingProperty(String... props) { [EOL]     String result = "function dummy(x) { "; [EOL]     for (String prop : props) { [EOL]         result += "x." + prop + " = 3;"; [EOL]     } [EOL]     return result + "}"; [EOL] } <line_num>: 11544,11550
