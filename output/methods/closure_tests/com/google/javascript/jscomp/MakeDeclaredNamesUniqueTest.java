@Override [EOL] public void process(Node externs, Node root) { [EOL]     compiler.resetUniqueNameId(); [EOL]     MakeDeclaredNamesUnique renamer = null; [EOL]     if (useDefaultRenamer) { [EOL]         renamer = new MakeDeclaredNamesUnique(); [EOL]     } else { [EOL]         renamer = new MakeDeclaredNamesUnique(new InlineRenamer(compiler.getUniqueNameIdSupplier(), localNamePrefix, removeConst)); [EOL]     } [EOL]     NodeTraversal.traverseRoots(compiler, Lists.newArrayList(externs, root), renamer); [EOL] } <line_num>: 37,52
@Override [EOL] public CompilerPass getProcessor(final Compiler compiler) { [EOL]     if (!invert) { [EOL]         return new CompilerPass() { [EOL]  [EOL]             @Override [EOL]             public void process(Node externs, Node root) { [EOL]                 compiler.resetUniqueNameId(); [EOL]                 MakeDeclaredNamesUnique renamer = null; [EOL]                 if (useDefaultRenamer) { [EOL]                     renamer = new MakeDeclaredNamesUnique(); [EOL]                 } else { [EOL]                     renamer = new MakeDeclaredNamesUnique(new InlineRenamer(compiler.getUniqueNameIdSupplier(), localNamePrefix, removeConst)); [EOL]                 } [EOL]                 NodeTraversal.traverseRoots(compiler, Lists.newArrayList(externs, root), renamer); [EOL]             } [EOL]         }; [EOL]     } else { [EOL]         return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler); [EOL]     } [EOL] } <line_num>: 33,57
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 59,63
@Override [EOL] public void setUp() { [EOL]     removeConst = false; [EOL]     invert = false; [EOL]     useDefaultRenamer = false; [EOL] } <line_num>: 65,70
private void testWithInversion(String original, String expected) { [EOL]     invert = false; [EOL]     test(original, expected); [EOL]     invert = true; [EOL]     test(expected, original); [EOL]     invert = false; [EOL] } <line_num>: 72,78
private void testSameWithInversion(String externs, String original) { [EOL]     invert = false; [EOL]     testSame(externs, original, null); [EOL]     invert = true; [EOL]     testSame(externs, original, null); [EOL]     invert = false; [EOL] } <line_num>: 80,86
private void testSameWithInversion(String original) { [EOL]     testSameWithInversion("", original); [EOL] } <line_num>: 88,90
private String wrapInFunction(String s) { [EOL]     return "function f(){" + s + "}"; [EOL] } <line_num>: 92,94
private void testInFunction(String original, String expected) { [EOL]     test(wrapInFunction(original), wrapInFunction(expected)); [EOL] } <line_num>: 96,98
public void testMakeLocalNamesUniqueWithContext1() { [EOL]     this.useDefaultRenamer = true; [EOL]     invert = true; [EOL]     test("var a;function foo(){var a$$inline_1; a = 1}", "var a;function foo(){var a$$0; a = 1}"); [EOL]     test("var a;function foo(){var a$$inline_1;}", "var a;function foo(){var a;}"); [EOL] } <line_num>: 100,111
public void testMakeLocalNamesUniqueWithContext2() { [EOL]     this.useDefaultRenamer = true; [EOL]     testSameWithInversion("var a;"); [EOL]     testSameWithInversion("a;"); [EOL]     testWithInversion("var a;function foo(a){var b;a}", "var a;function foo(a$$1){var b;a$$1}"); [EOL]     testWithInversion("var a;function foo(){var b;a}function boo(){var b;a}", "var a;function foo(){var b;a}function boo(){var b$$1;a}"); [EOL]     testWithInversion("function foo(a){var b}" + "function boo(a){var b}", "function foo(a){var b}" + "function boo(a$$1){var b$$1}"); [EOL]     testWithInversion("var a = function foo(){foo()};var b = function foo(){foo()};", "var a = function foo(){foo()};var b = function foo$$1(){foo$$1()};"); [EOL]     testWithInversion("try { } catch(e) {e;}", "try { } catch(e) {e;}"); [EOL]     test("try { } catch(e) {e;}; try { } catch(e) {e;}", "try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}"); [EOL]     test("try { } catch(e) {e; try { } catch(e) {e;}};", "try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; "); [EOL] } <line_num>: 113,153
public void testMakeLocalNamesUniqueWithContext3() { [EOL]     this.useDefaultRenamer = true; [EOL]     String externs = "var extern1 = {};"; [EOL]     testSameWithInversion(externs, "var extern1 = extern1 || {};"); [EOL]     testSame(externs, "var extern1 = extern1 || {};", null); [EOL] } <line_num>: 155,166
public void testMakeLocalNamesUniqueWithContext4() { [EOL]     this.useDefaultRenamer = true; [EOL]     testInFunction("var e; try { } catch(e) {e;}; try { } catch(e) {e;}", "var e; try { } catch(e$$1) {e$$1;}; try { } catch(e$$2) {e$$2;}"); [EOL]     testInFunction("var e; try { } catch(e) {e; try { } catch(e) {e;}}", "var e; try { } catch(e$$1) {e$$1; try { } catch(e$$2) {e$$2;} }"); [EOL]     testInFunction("try { } catch(e) {e;}; try { } catch(e) {e;} var e;", "try { } catch(e$$1) {e$$1;}; try { } catch(e$$2) {e$$2;} var e;"); [EOL]     testInFunction("try { } catch(e) {e; try { } catch(e) {e;}} var e;", "try { } catch(e$$1) {e$$1; try { } catch(e$$2) {e$$2;} } var e;"); [EOL]     invert = true; [EOL]     testInFunction("var e; try { } catch(e$$0) {e$$0;}; try { } catch(e$$1) {e$$1;}", "var e; try { } catch(e$$2) {e$$2;}; try { } catch(e$$0) {e$$0;}"); [EOL]     testInFunction("var e; try { } catch(e$$1) {e$$1; try { } catch(e$$2) {e$$2;} };", "var e; try { } catch(e$$0) {e$$0; try { } catch(e$$1) {e$$1;} };"); [EOL]     testInFunction("try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;};var e$$2;", "try { } catch(e) {e;}; try { } catch(e$$0) {e$$0;};var e$$1;"); [EOL]     testInFunction("try { } catch(e) {e; try { } catch(e$$1) {e$$1;} };var e$$2", "try { } catch(e) {e; try { } catch(e$$0) {e$$0;} };var e$$1"); [EOL] } <line_num>: 170,202
public void testMakeLocalNamesUniqueWithContext5() { [EOL]     this.useDefaultRenamer = true; [EOL]     testWithInversion("function f(){var f; f = 1}", "function f(){var f$$1; f$$1 = 1}"); [EOL]     testWithInversion("function f(f){f = 1}", "function f(f$$1){f$$1 = 1}"); [EOL]     testWithInversion("function f(f){var f; f = 1}", "function f(f$$1){var f$$1; f$$1 = 1}"); [EOL]     test("var fn = function f(){var f; f = 1}", "var fn = function f(){var f$$1; f$$1 = 1}"); [EOL]     test("var fn = function f(f){f = 1}", "var fn = function f(f$$1){f$$1 = 1}"); [EOL]     test("var fn = function f(f){var f; f = 1}", "var fn = function f(f$$1){var f$$1; f$$1 = 1}"); [EOL] } <line_num>: 204,227
public void testArguments() { [EOL]     this.useDefaultRenamer = true; [EOL]     testSameWithInversion("function foo(){var arguments;function bar(){var arguments;}}"); [EOL]     invert = true; [EOL]     test("function foo(){var arguments$$1;}", "function foo(){var arguments$$0;}"); [EOL] } <line_num>: 229,243
public void testMakeLocalNamesUniqueWithoutContext() { [EOL]     this.useDefaultRenamer = false; [EOL]     test("var a;", "var a$$unique_0"); [EOL]     testSame("a;"); [EOL]     test("var a;" + "function foo(a){var b;a}", "var a$$unique_0;" + "function foo$$unique_1(a$$unique_2){var b$$unique_3;a$$unique_2}"); [EOL]     test("var a;" + "function foo(){var b;a}" + "function boo(){var b;a}", "var a$$unique_0;" + "function foo$$unique_1(){var b$$unique_3;a$$unique_0}" + "function boo$$unique_2(){var b$$unique_4;a$$unique_0}"); [EOL]     test("var a = function foo(){foo()};", "var a$$unique_0 = function foo$$unique_1(){foo$$unique_1()};"); [EOL]     test("try { } catch(e) {e;}", "try { } catch(e$$unique_0) {e$$unique_0;}"); [EOL]     test("try { } catch(e) {e;};" + "try { } catch(e) {e;}", "try { } catch(e$$unique_0) {e$$unique_0;};" + "try { } catch(e$$unique_1) {e$$unique_1;}"); [EOL]     test("try { } catch(e) {e; " + "try { } catch(e) {e;}};", "try { } catch(e$$unique_0) {e$$unique_0; " + "try { } catch(e$$unique_1) {e$$unique_1;} }; "); [EOL] } <line_num>: 245,282
public void testOnlyInversion() { [EOL]     invert = true; [EOL]     test("function f(a, a$$1) {}", "function f(a, a$$0) {}"); [EOL]     test("function f(a$$1, b$$2) {}", "function f(a, b) {}"); [EOL]     test("function f(a$$1, a$$2) {}", "function f(a, a$$0) {}"); [EOL]     testSame("try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}"); [EOL]     testSame("try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; "); [EOL]     testSame("var a$$1;"); [EOL]     testSame("function f() { var $$; }"); [EOL]     test("var CONST = 3; var b = CONST;", "var CONST = 3; var b = CONST;"); [EOL]     test("function f() {var CONST = 3; var ACONST$$1 = 2;}", "function f() {var CONST = 3; var ACONST = 2;}"); [EOL] } <line_num>: 284,300
public void testOnlyInversion2() { [EOL]     invert = true; [EOL]     test("function f() {try { } catch(e) {e;}; try { } catch(e$$0) {e$$0;}}", "function f() {try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}}"); [EOL] } <line_num>: 302,306
public void testOnlyInversion3() { [EOL]     invert = true; [EOL]     test("function x1() {" + "  var a$$1;" + "  function x2() {" + "    var a$$2;" + "  }" + "  function x3() {" + "    var a$$3;" + "  }" + "}", "function x1() {" + "  var a$$0;" + "  function x2() {" + "    var a;" + "  }" + "  function x3() {" + "    var a;" + "  }" + "}"); [EOL] } <line_num>: 308,329
public void testOnlyInversion4() { [EOL]     invert = true; [EOL]     test("function x1() {" + "  var a$$0;" + "  function x2() {" + "    var a;a$$0++" + "  }" + "}", "function x1() {" + "  var a$$1;" + "  function x2() {" + "    var a;a$$1++" + "  }" + "}"); [EOL] } <line_num>: 331,346
public void testConstRemovingRename1() { [EOL]     removeConst = true; [EOL]     test("(function () {var CONST = 3; var ACONST$$1 = 2;})", "(function () {var CONST$$unique_0 = 3; var ACONST$$unique_1 = 2;})"); [EOL] } <line_num>: 348,352
public void testConstRemovingRename2() { [EOL]     removeConst = true; [EOL]     test("var CONST = 3; var b = CONST;", "var CONST$$unique_0 = 3; var b$$unique_1 = CONST$$unique_0;"); [EOL] } <line_num>: 354,358
