@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 31,34
@Override [EOL] public void setUp() { [EOL]     super.enableLineNumberCheck(true); [EOL]     usePseudoName = false; [EOL] } <line_num>: 36,40
@Override [EOL] public void process(Node externs, Node js) { [EOL]     NodeTraversal.traverse(compiler, js, new CoalesceVariableNames(compiler, usePseudoName)); [EOL] } <line_num>: 45,49
@Override [EOL] public CompilerPass getProcessor(final Compiler compiler) { [EOL]     return new CompilerPass() { [EOL]  [EOL]         @Override [EOL]         public void process(Node externs, Node js) { [EOL]             NodeTraversal.traverse(compiler, js, new CoalesceVariableNames(compiler, usePseudoName)); [EOL]         } [EOL]     }; [EOL] } <line_num>: 42,51
public void testSimple() { [EOL]     inFunction("var x; var y; x=1; x; y=1; y; return y", "var x;        x=1; x; x=1; x; return x"); [EOL]     inFunction("var x,y; x=1; x; y=1; y", "var x  ; x=1; x; x=1; x"); [EOL]     inFunction("var x,y; x=1; y=2; y; x"); [EOL]     inFunction("y=0; var x, y; y; x=0; x", "y=0; var y   ; y; y=0;y"); [EOL]     inFunction("var x,y; x=1; y=x; y", "var x  ; x=1; x=x; x"); [EOL]     inFunction("var x,y; x=1; y=x+1; y", "var x  ; x=1; x=x+1; x"); [EOL]     inFunction("x=1; x; y=2; y; var x; var y", "x=1; x; x=2; x; var x"); [EOL]     inFunction("var x=1; var y=x+1; return y", "var x=1;     x=x+1; return x"); [EOL]     inFunction("var x=1; var y=0; x+=1; y"); [EOL]     inFunction("var x=1; x+=1; var y=0; y", "var x=1; x+=1;     x=0; x"); [EOL]     inFunction("var x=1; foo(bar(x+=1)); var y=0; y", "var x=1; foo(bar(x+=1));     x=0; x"); [EOL]     inFunction("var y, x=1; f(x+=1, y)"); [EOL]     inFunction("var x; var y; y += 1, y, x = 1; x"); [EOL] } <line_num>: 53,88
public void testMergeThreeVarNames() { [EOL]     inFunction("var x,y,z; x=1; x; y=1; y; z=1; z", "var x    ; x=1; x; x=1; x; x=1; x"); [EOL] } <line_num>: 90,93
public void testDifferentBlock() { [EOL]     inFunction("if(1) { var x = 0; x } else { var y = 0; y }", "if(1) { var x = 0; x } else {     x = 0; x }"); [EOL] } <line_num>: 95,98
public void testLoops() { [EOL]     inFunction("var x; while(1) { x; x = 1; var y = 1; y }"); [EOL]     inFunction("var y = 1; y; while(1) { var x = 1; x }", "var y = 1; y; while(1) {     y = 1; y }"); [EOL] } <line_num>: 100,104
public void testEscaped() { [EOL]     inFunction("var x = 1; x; function f() { x };  var y = 0; y; f()"); [EOL] } <line_num>: 106,108
public void testFor() { [EOL]     inFunction("var x = 1; x; for (;;) var y; y = 1; y", "var x = 1; x; for (;;)      ; x = 1; x"); [EOL] } <line_num>: 110,113
public void testForIn() { [EOL]     inFunction("var x = 1, k; x;      ; for (var y in k) { y }", "var x = 1, k; x;      ; for (var y in k) { y }"); [EOL]     inFunction("var x = 1, k; x; y = 1; for (var y in k) { y }", "var x = 1, k; x; x = 1; for (    x in k) { x }"); [EOL] } <line_num>: 115,122
public void testLoopInductionVar() { [EOL]     inFunction("for(var x = 0; x < 10; x++){}" + "for(var y = 0; y < 10; y++){}" + "for(var z = 0; z < 10; z++){}", "for(var x = 0; x < 10; x++){}" + "for(x = 0; x < 10; x++){}" + "for(x = 0; x < 10; x++){}"); [EOL]     inFunction("for(var x = 0; x < 10; x++){z}" + "for(var y = 0, z = 0; y < 10; y++){z}", "for(var x = 0; x < 10; x++){z}" + "for(var x = 0, z = 0; x < 10; x++){z}"); [EOL]     inFunction("var x = 1; x; for (var y; y=1; ) {y}", "var x = 1; x; for (     ; x=1; ) {x}"); [EOL]     inFunction("var x = 1; x; y = 1; while(y) var y; y", "var x = 1; x; x = 1; while(x); x"); [EOL]     inFunction("var x = 1; x; f:var y; y=1", "var x = 1; x; x=1"); [EOL] } <line_num>: 124,149
public void testSwitchCase() { [EOL]     inFunction("var x = 1; switch(x) { case 1: var y; case 2: } y = 1; y", "var x = 1; switch(x) { case 1:        case 2: } x = 1; x"); [EOL] } <line_num>: 151,154
public void testDuplicatedVar() { [EOL]     inFunction("z = 1; var x = 0; x; z; var y = 2, z = 1; y; z;", "z = 1; var x = 0; x; z; var x = 2, z = 1; x; z;"); [EOL] } <line_num>: 156,160
public void testTryCatch() { [EOL]     inFunction("try {} catch (e) { } var x = 4; x;", "try {} catch (e) { } var x = 4; x;"); [EOL]     inFunction("var x = 4; x; try {} catch (e) { }", "var x = 4; x; try {} catch (e) { }"); [EOL] } <line_num>: 162,167
public void testDeadAssignment() { [EOL]     inFunction("var x = 6; var y; y = 4 ; x"); [EOL]     inFunction("var y = 3; var y; y += 4; x"); [EOL]     inFunction("var y = 3; var y; y ++  ; x"); [EOL]     inFunction("y = 3; var x; var y = 1 ; x"); [EOL] } <line_num>: 169,174
public void testParameter() { [EOL]     test("function FUNC(param) {var x = 0; x}", "function FUNC(param) {param = 0; param}"); [EOL] } <line_num>: 176,179
public void testParameter2() { [EOL]     test("function FUNC(x,y) {x = 0; x; y = 0; y}"); [EOL]     test("function FUNC(x,y,z) {x = 0; x; y = 0; z = 0; z}"); [EOL] } <line_num>: 181,185
public void testParameter3() { [EOL]     test("function FUNC(x) {var y; y = 0; x; y}"); [EOL] } <line_num>: 187,190
public void testParameter4() { [EOL]     test("function FUNC(x, y) {var a,b; y; a=0; a; x; b=0; b}", "function FUNC(x, y) {var a; y; a=0; a; x; a=0; a}"); [EOL] } <line_num>: 192,197
public void testParameter4b() { [EOL]     test("function FUNC(x, y, z) {var a,b; y; a=0; a; x; b=0; b}", "function FUNC(x, y, z) {         y; y=0; y; x; x=0; x}"); [EOL] } <line_num>: 199,203
public void testLiveRangeChangeWithinCfgNode() { [EOL]     inFunction("var x, y; x = 1, y = 2, y, x"); [EOL]     inFunction("var x, y; x = 1,x; y"); [EOL]     inFunction("var x; var y; y = 1, y, x = 1; x"); [EOL]     inFunction("var x; var y; y = 1; y, x = 1; x", "var x; x = 1; x, x = 1; x"); [EOL]     inFunction("var x, y; y = 1, x = 1, x, y += 1, y"); [EOL]     inFunction("var x, y; y = 1, x = 1, x, y ++, y"); [EOL] } <line_num>: 205,214
public void testLiveRangeChangeWithinCfgNode2() { [EOL]     inFunction("var x; var y; var a; var b;" + "y = 1, a = 1, y, a, x = 1, b = 1; x; b"); [EOL]     inFunction("var x; var y; var a; var b;" + "y = 1, a = 1, y, a, x = 1; x; b = 1; b", "var x; var y; var a;       " + "y = 1, a = 1, y, a, x = 1; x; x = 1; x"); [EOL]     inFunction("var x; var y; var a; var b;" + "y = 1, a = 1, y, x = 1; a; x; b = 1; b", "var x; var y; var a;       " + "y = 1, a = 1, y, x = 1; a; x; x = 1; x"); [EOL] } <line_num>: 216,227
public void testFunctionNameReuse() { [EOL] } <line_num>: 229,249
public void testBug1401831() { [EOL]     String src = "function f(opt_a2) {" + "  var buffer;" + "  if (opt_a2) {" + "    for(var i = 0; i < arguments.length; i++) {" + "      buffer += arguments[i];" + "    }" + "  }" + "  return buffer;" + "}"; [EOL]     test(src, src); [EOL] } <line_num>: 251,264
public void testDeterministic() { [EOL]     inFunction("var a,b,c,d,e;" + "  a=1; b=1; a; b;" + "  b=1; c=1; b; c;" + "  c=1; d=1; c; d;" + "  d=1; e=1; d; e;" + "  e=1; a=1; e; a;", "var a,b,    e;" + "  a=1; b=1; a; b;" + "  b=1; a=1; b; a;" + "  a=1; b=1; a; b;" + "  b=1; e=1; b; e;" + "  e=1; a=1; e; a;"); [EOL]     inFunction("var d,a,b,c,e;" + "  a=1; b=1; a; b;" + "  b=1; c=1; b; c;" + "  c=1; d=1; c; d;" + "  d=1; e=1; d; e;" + "  e=1; a=1; e; a;", "var d,  b,c  ;" + "  d=1; b=1; d; b;" + "  b=1; c=1; b; c;" + "  c=1; d=1; c; d;" + "  d=1; b=1; d; b;" + "  b=1; d=1; b; d;"); [EOL] } <line_num>: 266,309
public void testVarLiveRangeCross() { [EOL]     inFunction("var a={}; var b=a.S(); b", "var a={};     a=a.S(); a"); [EOL]     inFunction("var a={}; var b=a.S(), c=b.SS(); b; c", "var a={}; var b=a.S(), a=b.SS(); b; a"); [EOL]     inFunction("var a={}; var b=a.S(), c=a.SS(), d=a.SSS(); b; c; d", "var a={}; var b=a.S(), c=a.SS(), a=a.SSS(); b; c; a"); [EOL]     inFunction("var a={}; var b=a.S(), c=a.SS(), d=a.SSS(); b; c; d", "var a={}; var b=a.S(), c=a.SS(), a=a.SSS(); b; c; a"); [EOL]     inFunction("var a={}; d=1; d; var b=a.S(), c=a.SS(), d=a.SSS(); b; c; d"); [EOL] } <line_num>: 312,322
public void testBug1445366() { [EOL]     inFunction(" var iframe = getFrame();" + " try {" + "   var win = iframe.contentWindow;" + " } catch (e) {" + " } finally {" + "   if (win)" + "     this.setupWinUtil_();" + "   else" + "     this.load();" + " }"); [EOL]     inFunction(" var iframe = getFrame();" + " var win = iframe.contentWindow;" + " if (win)" + "   this.setupWinUtil_();" + " else" + "   this.load();", " var iframe = getFrame();" + " iframe = iframe.contentWindow;" + " if (iframe)" + "   this.setupWinUtil_();" + " else" + "   this.load();"); [EOL] } <line_num>: 324,353
public void testCannotReuseAnyParamsBug() { [EOL]     testSame("function handleKeyboardShortcut(e, key, isModifierPressed) {\n" + "  if (!isModifierPressed) {\n" + "    return false;\n" + "  }\n" + "  var command;\n" + "  switch (key) {\n" + "    case 'b': // Ctrl+B\n" + "      command = COMMAND.BOLD;\n" + "      break;\n" + "    case 'i': // Ctrl+I\n" + "      command = COMMAND.ITALIC;\n" + "      break;\n" + "    case 'u': // Ctrl+U\n" + "      command = COMMAND.UNDERLINE;\n" + "      break;\n" + "    case 's': // Ctrl+S\n" + "      return true;\n" + "  }\n" + "\n" + "  if (command) {\n" + "    this.fieldObject.execCommand(command);\n" + "    return true;\n" + "  }\n" + "\n" + "  return false;\n" + "};"); [EOL] } <line_num>: 355,382
public void testForInWithAssignment() { [EOL]     inFunction("var _f = function (commands) {" + "  var k, v, ref;" + "  for (k in ref = commands) {" + "    v = ref[k];" + "    alert(k + ':' + v);" + "  }" + "}", "var _f = function (commands) {" + "  var k,ref;" + "  for (k in ref = commands) {" + "    commands = ref[k];" + "    alert(k + ':' + commands);" + "  }" + "}"); [EOL] } <line_num>: 384,402
public void testUsePseduoNames() { [EOL]     usePseudoName = true; [EOL]     inFunction("var x   = 0; print(x  ); var   y = 1; print(  y)", "var x_y = 0; print(x_y);     x_y = 1; print(x_y)"); [EOL]     inFunction("var x_y = 1; var x   = 0; print(x  ); var     y = 1;" + "print(  y); print(x_y);", "var x_y = 1; var x_y$ = 0; print(x_y$);     x_y$ = 1;" + "" + "print(x_y$); print(x_y);"); [EOL]     inFunction("var x_y = 1; function f() {" + "var x    = 0; print(x  ); var y = 1; print( y);" + "print(x_y);}", "var x_y = 1; function f() {" + "var x_y$ = 0; print(x_y$); x_y$ = 1; print(x_y$);" + "print(x_y);}"); [EOL]     inFunction("var x   = 0; print(x  ); var   y = 1; print(  y); " + "var closure_var; function bar() { print(closure_var); }", "var x_y = 0; print(x_y);     x_y = 1; print(x_y); " + "var closure_var; function bar() { print(closure_var); }"); [EOL] } <line_num>: 404,427
public void testMaxVars() { [EOL]     String code = ""; [EOL]     for (int i = 0; i < LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE + 1; i++) { [EOL]         code += String.format("var x%d = 0; print(x%d);", i, i); [EOL]     } [EOL]     inFunction(code); [EOL] } <line_num>: 429,436
private void inFunction(String src) { [EOL]     inFunction(src, src); [EOL] } <line_num>: 438,440
private void inFunction(String src, String expected) { [EOL]     test("function FUNC(){" + src + "}", "function FUNC(){" + expected + "}"); [EOL] } <line_num>: 442,445
private void test(String src) { [EOL]     test(src, src); [EOL] } <line_num>: 447,449
