@Override [EOL] protected CompilerPass getProcessor(final Compiler compiler) { [EOL]     return new PeepholeOptimizationsPass(compiler, new ReorderConstantExpression()); [EOL] } <line_num>: 25,29
@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     super.enableLineNumberCheck(true); [EOL]     disableTypeCheck(); [EOL] } <line_num>: 31,36
public void testSymmetricOperations() throws Exception { [EOL]     set1Tests("=="); [EOL]     set2Tests("=="); [EOL]     set3Tests("=="); [EOL]     set1Tests("!="); [EOL]     set2Tests("!="); [EOL]     set3Tests("!="); [EOL]     set1Tests("==="); [EOL]     set2Tests("==="); [EOL]     set3Tests("==="); [EOL]     set1Tests("!=="); [EOL]     set2Tests("!=="); [EOL]     set3Tests("!=="); [EOL]     set1Tests("*"); [EOL]     set2Tests("*"); [EOL]     set3Tests("*"); [EOL] } <line_num>: 38,58
public void testRelationalOperations() throws Exception { [EOL]     set1Tests(">", "<"); [EOL]     set3Tests(">"); [EOL]     set1Tests("<", ">"); [EOL]     set3Tests("<"); [EOL]     set1Tests(">=", "<="); [EOL]     set3Tests(">="); [EOL]     set1Tests("<=", ">="); [EOL]     set3Tests("<="); [EOL] } <line_num>: 60,70
private void set1Tests(String op) throws Exception { [EOL]     set1Tests(op, op); [EOL] } <line_num>: 72,74
private void set1Tests(String op1, String op2) throws Exception { [EOL]     test("a " + op1 + " 0", "0 " + op2 + " a"); [EOL]     test("a " + op1 + " '0'", "'0' " + op2 + " a"); [EOL]     test("a " + op1 + " ''", "'' " + op2 + " a"); [EOL]     test("a " + op1 + " -1.0", "-1.0 " + op2 + " a"); [EOL]     test("function f(a){a " + op1 + " 0}", "function f(a){0 " + op2 + " a}"); [EOL]     test("f() " + op1 + " 0", "0 " + op2 + " f()"); [EOL]     test("(a + b) " + op1 + " 0", "0 " + op2 + " (a + b)"); [EOL]     test("(a + 1) " + op1 + " 0", "0 " + op2 + " (a + 1)"); [EOL]     test("x++ " + op1 + " 0", "0 " + op2 + " x++"); [EOL]     test("x = 0; function f(){x++; return x}; f() " + op1 + " 0", "x = 0; function f(){x++; return x}; 0 " + op2 + " f()"); [EOL] } <line_num>: 80,95
private void set2Tests(String op) throws Exception { [EOL]     test("a " + op + " NaN", "NaN " + op + " a"); [EOL]     test("a " + op + " Infinity", "Infinity " + op + " a"); [EOL]     testSame("NaN " + op + " a"); [EOL]     testSame("Infinity " + op + " a"); [EOL] } <line_num>: 101,107
private void set3Tests(String op) throws Exception { [EOL]     testSame("0 " + op + " a"); [EOL]     testSame("'0' " + op + " a"); [EOL]     testSame("'' " + op + " a"); [EOL]     testSame("-1.0 " + op + " a"); [EOL]     testSame("-1.0 " + op + " a"); [EOL]     testSame("0 " + op + " 1"); [EOL]     testSame("a " + op + " b"); [EOL] } <line_num>: 112,122
