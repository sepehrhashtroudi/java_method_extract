public ReplaceCssNamesTest() { [EOL] } <line_num>: 66,67
@Override [EOL] protected CssRenamingMap getCssRenamingMap() { [EOL]     return useReplacementMap ? renamingMap : null; [EOL] } <line_num>: 71,74
@Override [EOL] protected CompilerPass getProcessor(Compiler compiler) { [EOL]     return new ReplaceCssNames(compiler, cssNames, whitelist) { [EOL]  [EOL]         @Override [EOL]         protected CssRenamingMap getCssRenamingMap() { [EOL]             return useReplacementMap ? renamingMap : null; [EOL]         } [EOL]     }; [EOL] } <line_num>: 69,76
@Override [EOL] public String get(String value) { [EOL]     return replacementMap.get(value); [EOL] } <line_num>: 80,82
protected CssRenamingMap getPartialMap() { [EOL]     CssRenamingMap map = new CssRenamingMap.ByPart() { [EOL]  [EOL]         @Override [EOL]         public String get(String value) { [EOL]             return replacementMap.get(value); [EOL]         } [EOL]     }; [EOL]     return map; [EOL] } <line_num>: 78,85
@Override [EOL] public String get(String value) { [EOL]     return replacementMapFull.get(value); [EOL] } <line_num>: 89,91
protected CssRenamingMap getFullMap() { [EOL]     return new CssRenamingMap.ByWhole() { [EOL]  [EOL]         @Override [EOL]         public String get(String value) { [EOL]             return replacementMapFull.get(value); [EOL]         } [EOL]     }; [EOL] } <line_num>: 87,93
@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     super.enableLineNumberCheck(true); [EOL]     cssNames = Maps.newHashMap(); [EOL]     useReplacementMap = true; [EOL]     renamingMap = getPartialMap(); [EOL] } <line_num>: 95,102
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 104,109
public void testDoNotUseReplacementMap() { [EOL]     useReplacementMap = false; [EOL]     test("var x = goog.getCssName('goog-footer-active')", "var x = 'goog-footer-active'"); [EOL]     test("el.className = goog.getCssName('goog-colorswatch-disabled')", "el.className = 'goog-colorswatch-disabled'"); [EOL]     test("setClass(goog.getCssName('active-buttonbar'))", "setClass('active-buttonbar')"); [EOL]     Map<String, Integer> expected = new ImmutableMap.Builder<String, Integer>().put("goog", 2).put("footer", 1).put("active", 2).put("colorswatch", 1).put("disabled", 1).put("buttonbar", 1).build(); [EOL]     assertEquals(expected, cssNames); [EOL] } <line_num>: 111,129
public void testOneArgWithUnknownStringLiterals() { [EOL]     test("var x = goog.getCssName('unknown')", "var x = 'unknown'", null, UNKNOWN_SYMBOL_WARNING); [EOL]     test("el.className = goog.getCssName('ooo')", "el.className = 'ooo'", null, UNKNOWN_SYMBOL_WARNING); [EOL]     test("setClass(goog.getCssName('ab'))", "setClass('ab')", null, UNKNOWN_SYMBOL_WARNING); [EOL] } <line_num>: 131,138
public void testOneArgWithSimpleStringLiterals() { [EOL]     test("var x = goog.getCssName('buttonbar')", "var x = 'b'"); [EOL]     test("el.className = goog.getCssName('colorswatch')", "el.className = 'c'"); [EOL]     test("setClass(goog.getCssName('elephant'))", "setClass('e')"); [EOL]     Map<String, Integer> expected = new ImmutableMap.Builder<String, Integer>().put("buttonbar", 1).put("colorswatch", 1).put("elephant", 1).build(); [EOL]     assertEquals(expected, cssNames); [EOL] } <line_num>: 140,154
public void testOneArgWithCompositeClassNames() { [EOL]     test("var x = goog.getCssName('goog-footer-active')", "var x = 'g-f-a'"); [EOL]     test("el.className = goog.getCssName('goog-colorswatch-disabled')", "el.className = 'g-c-d'"); [EOL]     test("setClass(goog.getCssName('active-buttonbar'))", "setClass('a-b')"); [EOL]     Map<String, Integer> expected = new ImmutableMap.Builder<String, Integer>().put("goog", 2).put("footer", 1).put("active", 2).put("colorswatch", 1).put("disabled", 1).put("buttonbar", 1).build(); [EOL]     assertEquals(expected, cssNames); [EOL] } <line_num>: 156,173
public void testOneArgWithCompositeClassNamesFull() { [EOL]     renamingMap = getFullMap(); [EOL]     test("var x = goog.getCssName('long-prefix')", "var x = 'h'"); [EOL]     test("var x = goog.getCssName('long-prefix-suffix1')", "var x = 'h-i'"); [EOL]     test("var x = goog.getCssName('unrelated')", "var x = 'l'"); [EOL]     test("var x = goog.getCssName('unrelated-word')", "var x = 'k'"); [EOL] } <line_num>: 175,186
public void testOneArgWithCompositeClassNamesWithUnknownParts() { [EOL]     test("var x = goog.getCssName('goog-header-active')", "var x = 'goog-header-active'", null, UNKNOWN_SYMBOL_WARNING); [EOL]     test("el.className = goog.getCssName('goog-colorswatch-focussed')", "el.className = 'goog-colorswatch-focussed'", null, UNKNOWN_SYMBOL_WARNING); [EOL]     test("setClass(goog.getCssName('inactive-buttonbar'))", "setClass('inactive-buttonbar')", null, UNKNOWN_SYMBOL_WARNING); [EOL] } <line_num>: 188,196
public void testTwoArgsWithStringLiterals() { [EOL]     test("var x = goog.getCssName('header', 'active')", null, UNEXPECTED_STRING_LITERAL_ERROR); [EOL]     test("el.className = goog.getCssName('footer', window)", null, ReplaceCssNames.STRING_LITERAL_EXPECTED_ERROR); [EOL]     test("setClass(goog.getCssName('buttonbar', 'disabled'))", null, UNEXPECTED_STRING_LITERAL_ERROR); [EOL]     test("setClass(goog.getCssName(goog.getCssName('buttonbar'), 'active'))", null, UNEXPECTED_STRING_LITERAL_ERROR); [EOL] } <line_num>: 198,207
public void testTwoArsWithVariableFirstArg() { [EOL]     test("var x = goog.getCssName(baseClass, 'active')", "var x = baseClass + '-a'"); [EOL]     test("el.className = goog.getCssName(this.getClass(), 'disabled')", "el.className = this.getClass() + '-d'"); [EOL]     test("setClass(goog.getCssName(BASE_CLASS, 'disabled'))", "setClass(BASE_CLASS + '-d')"); [EOL] } <line_num>: 209,216
public void testTwoArgsWithVariableFirstArgFull() { [EOL]     renamingMap = getFullMap(); [EOL]     test("var x = goog.getCssName(baseClass, 'long-suffix')", "var x = baseClass + '-m'"); [EOL] } <line_num>: 218,223
public void testZeroArguments() { [EOL]     test("goog.getCssName()", null, ReplaceCssNames.INVALID_NUM_ARGUMENTS_ERROR); [EOL] } <line_num>: 225,228
public void testManyArguments() { [EOL]     test("goog.getCssName('a', 'b', 'c')", null, ReplaceCssNames.INVALID_NUM_ARGUMENTS_ERROR); [EOL]     test("goog.getCssName('a', 'b', 'c', 'd')", null, ReplaceCssNames.INVALID_NUM_ARGUMENTS_ERROR); [EOL]     test("goog.getCssName('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')", null, ReplaceCssNames.INVALID_NUM_ARGUMENTS_ERROR); [EOL] } <line_num>: 230,237
public void testNonStringArgument() { [EOL]     test("goog.getCssName(window);", null, ReplaceCssNames.STRING_LITERAL_EXPECTED_ERROR); [EOL]     test("goog.getCssName(555);", null, ReplaceCssNames.STRING_LITERAL_EXPECTED_ERROR); [EOL]     test("goog.getCssName([]);", null, ReplaceCssNames.STRING_LITERAL_EXPECTED_ERROR); [EOL]     test("goog.getCssName({});", null, ReplaceCssNames.STRING_LITERAL_EXPECTED_ERROR); [EOL]     test("goog.getCssName(null);", null, ReplaceCssNames.STRING_LITERAL_EXPECTED_ERROR); [EOL]     test("goog.getCssName(undefined);", null, ReplaceCssNames.STRING_LITERAL_EXPECTED_ERROR); [EOL]     test("goog.getCssName(baseClass, window);", null, ReplaceCssNames.STRING_LITERAL_EXPECTED_ERROR); [EOL]     test("goog.getCssName(baseClass, 555);", null, ReplaceCssNames.STRING_LITERAL_EXPECTED_ERROR); [EOL]     test("goog.getCssName(baseClass, []);", null, ReplaceCssNames.STRING_LITERAL_EXPECTED_ERROR); [EOL]     test("goog.getCssName(baseClass, {});", null, ReplaceCssNames.STRING_LITERAL_EXPECTED_ERROR); [EOL]     test("goog.getCssName(baseClass, null);", null, ReplaceCssNames.STRING_LITERAL_EXPECTED_ERROR); [EOL]     test("goog.getCssName(baseClass, undefined);", null, ReplaceCssNames.STRING_LITERAL_EXPECTED_ERROR); [EOL]     test("goog.getCssName('foo', 3);", null, ReplaceCssNames.STRING_LITERAL_EXPECTED_ERROR); [EOL] } <line_num>: 239,267
@Override [EOL] protected void printSummary() { [EOL] } <line_num>: 273,273
@Override [EOL] public void println(CheckLevel level, JSError error) { [EOL] } <line_num>: 274,274
public void testNoSymbolMapStripsCallAndDoesntIssueWarnings() { [EOL]     String input = "[goog.getCssName('test'), goog.getCssName(base, 'active')]"; [EOL]     Compiler compiler = new Compiler(); [EOL]     ErrorManager errorMan = new BasicErrorManager() { [EOL]  [EOL]         @Override [EOL]         protected void printSummary() { [EOL]         } [EOL]  [EOL]         @Override [EOL]         public void println(CheckLevel level, JSError error) { [EOL]         } [EOL]     }; [EOL]     compiler.setErrorManager(errorMan); [EOL]     Node root = compiler.parseTestCode(input); [EOL]     useReplacementMap = false; [EOL]     ReplaceCssNames replacer = new ReplaceCssNames(compiler, null, null); [EOL]     replacer.process(null, root); [EOL]     assertEquals("[\"test\",base+\"-active\"]", compiler.toSource(root)); [EOL]     assertEquals("There should be no errors", 0, errorMan.getErrorCount()); [EOL]     assertEquals("There should be no warnings", 0, errorMan.getWarningCount()); [EOL] } <line_num>: 269,284
public void testWhitelistByPart() { [EOL]     whitelist = ImmutableSet.<String>of("goog", "elephant"); [EOL]     test("var x = goog.getCssName('goog')", "var x = 'goog'"); [EOL]     test("var x = goog.getCssName('elephant')", "var x = 'elephant'"); [EOL]     test("var x = goog.getCssName('goog-elephant')", "var x = 'g-e'"); [EOL] } <line_num>: 286,295
public void testWhitelistByWhole() { [EOL]     whitelist = ImmutableSet.<String>of("long-prefix"); [EOL]     renamingMap = getFullMap(); [EOL]     test("var x = goog.getCssName('long-prefix')", "var x = 'long-prefix'"); [EOL] } <line_num>: 297,302
public void testWhitelistWithDashes() { [EOL]     whitelist = ImmutableSet.<String>of("goog-elephant"); [EOL]     test("var x = goog.getCssName('goog')", "var x = 'g'"); [EOL]     test("var x = goog.getCssName('elephant')", "var x = 'e'"); [EOL]     test("var x = goog.getCssName('goog-elephant')", "var x = 'goog-elephant'"); [EOL] } <line_num>: 304,312
