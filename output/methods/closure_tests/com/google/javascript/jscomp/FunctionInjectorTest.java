TestCallback(String callname, Method method) { [EOL]     this.callname = callname; [EOL]     this.method = method; [EOL] } <line_num>: 1516,1519
@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     assumeStrictThis = false; [EOL] } <line_num>: 44,48
private FunctionInjector getInjector() { [EOL]     Compiler compiler = new Compiler(); [EOL]     return new FunctionInjector(compiler, compiler.getUniqueNameIdSupplier(), true, assumeStrictThis, assumeMinimumCapture); [EOL] } <line_num>: 50,55
public void testIsSimpleFunction1() { [EOL]     assertTrue(getInjector().isDirectCallNodeReplacementPossible(prep("function f(){}"))); [EOL] } <line_num>: 57,60
public void testIsSimpleFunction2() { [EOL]     assertTrue(getInjector().isDirectCallNodeReplacementPossible(prep("function f(){return 0;}"))); [EOL] } <line_num>: 62,65
public void testIsSimpleFunction3() { [EOL]     assertTrue(getInjector().isDirectCallNodeReplacementPossible(prep("function f(){return x ? 0 : 1}"))); [EOL] } <line_num>: 67,70
public void testIsSimpleFunction4() { [EOL]     assertFalse(getInjector().isDirectCallNodeReplacementPossible(prep("function f(){return;}"))); [EOL] } <line_num>: 72,75
public void testIsSimpleFunction5() { [EOL]     assertFalse(getInjector().isDirectCallNodeReplacementPossible(prep("function f(){return 0; return 0;}"))); [EOL] } <line_num>: 77,80
public void testIsSimpleFunction6() { [EOL]     assertFalse(getInjector().isDirectCallNodeReplacementPossible(prep("function f(){var x=true;return x ? 0 : 1}"))); [EOL] } <line_num>: 82,85
public void testIsSimpleFunction7() { [EOL]     assertFalse(getInjector().isDirectCallNodeReplacementPossible(prep("function f(){if (x) return 0; else return 1}"))); [EOL] } <line_num>: 87,90
public void testCanInlineReferenceToFunction1() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(){}; foo();", "foo", INLINE_DIRECT); [EOL] } <line_num>: 92,95
public void testCanInlineReferenceToFunction2() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(){}; foo();", "foo", INLINE_BLOCK); [EOL] } <line_num>: 97,100
public void testCanInlineReferenceToFunction3() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(){return;}; foo();", "foo", INLINE_DIRECT); [EOL] } <line_num>: 102,107
public void testCanInlineReferenceToFunction4() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(){return;}; foo();", "foo", INLINE_BLOCK); [EOL] } <line_num>: 109,112
public void testCanInlineReferenceToFunction5() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(){return true;}; foo();", "foo", INLINE_DIRECT); [EOL] } <line_num>: 114,117
public void testCanInlineReferenceToFunction6() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(){return true;}; foo();", "foo", INLINE_BLOCK); [EOL] } <line_num>: 119,122
public void testCanInlineReferenceToFunction7() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(){return true;}; var x=foo();", "foo", INLINE_DIRECT); [EOL] } <line_num>: 124,128
public void testCanInlineReferenceToFunction8() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(){return true;}; var x=foo();", "foo", INLINE_BLOCK); [EOL] } <line_num>: 130,133
public void testCanInlineReferenceToFunction9() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(){return true;}; var x; x=foo();", "foo", INLINE_DIRECT); [EOL] } <line_num>: 135,139
public void testCanInlineReferenceToFunction10() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(){return true;}; var x; x=foo();", "foo", INLINE_BLOCK); [EOL] } <line_num>: 141,144
public void testCanInlineReferenceToFunction11() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(){return true;}; var x; x=x+foo();", "foo", INLINE_DIRECT); [EOL] } <line_num>: 146,151
public void testCanInlineReferenceToFunction12() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(){return true;}; var x; x=x+foo();", "foo", INLINE_BLOCK); [EOL] } <line_num>: 153,158
public void testCanInlineReferenceToFunction12b() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION, "function foo(){return true;}; var x; x=x+foo();", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 160,167
public void testCanInlineReferenceToFunction14() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(a){return true;}; foo(x);", "foo", INLINE_DIRECT); [EOL] } <line_num>: 177,181
public void testCanInlineReferenceToFunction15() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(a){return true;}; foo(x);", "foo", INLINE_BLOCK); [EOL] } <line_num>: 183,186
public void testCanInlineReferenceToFunction16() { [EOL]     helperCanInlineReferenceToFunction(NEW_VARS_IN_GLOBAL_SCOPE, "function foo(a){var b;return a;}; foo(goo());", "foo", INLINE_BLOCK); [EOL] } <line_num>: 193,198
public void testCanInlineReferenceToFunction17() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(a){return a;}; " + "function x() { foo(goo()); }", "foo", INLINE_BLOCK); [EOL] } <line_num>: 200,206
public void testCanInlineReferenceToFunction18() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(a){return a;} foo(x++);", "foo", INLINE_DIRECT); [EOL] } <line_num>: 208,212
public void testCanInlineReferenceToFunction19() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(a){return a+a} foo([]);", "foo", INLINE_DIRECT); [EOL] } <line_num>: 214,218
public void testCanInlineReferenceToFunction20() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(a){return a+a} foo({});", "foo", INLINE_DIRECT); [EOL] } <line_num>: 220,223
public void testCanInlineReferenceToFunction21() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(a){return a+a} foo(new Date);", "foo", INLINE_DIRECT); [EOL] } <line_num>: 225,228
public void testCanInlineReferenceToFunction22() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(a){return a+a} foo(true && new Date);", "foo", INLINE_DIRECT); [EOL] } <line_num>: 230,234
public void testCanInlineReferenceToFunction23() { [EOL]     helperCanInlineReferenceToFunction(NEW_VARS_IN_GLOBAL_SCOPE, "function foo(a){return a;}; foo(x++);", "foo", INLINE_BLOCK); [EOL] } <line_num>: 236,240
public void testCanInlineReferenceToFunction24() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(a){return a;}; " + "function x() { foo(x++); }", "foo", INLINE_BLOCK); [EOL] } <line_num>: 242,248
public void testCanInlineReferenceToFunction25() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(a){return a+a;}; foo(x++);", "foo", INLINE_DIRECT); [EOL] } <line_num>: 250,254
public void testCanInlineReferenceToFunction26() { [EOL]     helperCanInlineReferenceToFunction(NEW_VARS_IN_GLOBAL_SCOPE, "function foo(a){return a+a;}; foo(x++);", "foo", INLINE_BLOCK); [EOL] } <line_num>: 256,259
public void testCanInlineReferenceToFunction27() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(a){return a+a;}; " + "function x() { foo(x++); }", "foo", INLINE_BLOCK); [EOL] } <line_num>: 261,266
public void testCanInlineReferenceToFunction28() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(a){return true;}; foo(goo());", "foo", INLINE_DIRECT); [EOL] } <line_num>: 268,272
public void testCanInlineReferenceToFunction29() { [EOL]     helperCanInlineReferenceToFunction(NEW_VARS_IN_GLOBAL_SCOPE, "function foo(a){return true;}; foo(goo());", "foo", INLINE_BLOCK); [EOL] } <line_num>: 274,277
public void testCanInlineReferenceToFunction30() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(a){return true;}; " + "function x() { foo(goo()); }", "foo", INLINE_BLOCK); [EOL] } <line_num>: 279,284
public void testCanInlineReferenceToFunction31() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(a) {return true;}; " + "function x() {foo.call(this, 1);}", "foo", INLINE_DIRECT); [EOL] } <line_num>: 286,291
public void testCanInlineReferenceToFunction32() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(a){return true;}; " + "function x() { foo.apply(this, [1]); }", "foo", INLINE_DIRECT); [EOL] } <line_num>: 293,298
public void testCanInlineReferenceToFunction33() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(a){return true;}; " + "function x() { foo.bar(this, 1); }", "foo", INLINE_DIRECT); [EOL] } <line_num>: 300,306
public void testCanInlineReferenceToFunction34() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(a){return true;}; " + "function x() { foo.call(this, goo()); }", "foo", INLINE_BLOCK); [EOL] } <line_num>: 308,313
public void testCanInlineReferenceToFunction35() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(a){return true;}; " + "function x() { foo.apply(this, goo()); }", "foo", INLINE_BLOCK); [EOL] } <line_num>: 315,320
public void testCanInlineReferenceToFunction36() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(a){return true;}; " + "function x() { foo.bar(this, goo()); }", "foo", INLINE_BLOCK); [EOL] } <line_num>: 322,327
public void testCanInlineReferenceToFunction37() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(a){return true;}; " + "function x() { foo.call(null, 1); }", "foo", INLINE_DIRECT); [EOL] } <line_num>: 329,334
public void testCanInlineReferenceToFunction38() { [EOL]     assumeStrictThis = false; [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(a){return true;}; " + "function x() { foo.call(null, goo()); }", "foo", INLINE_BLOCK); [EOL]     assumeStrictThis = true; [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(a){return true;}; " + "function x() { foo.call(null, goo()); }", "foo", INLINE_BLOCK); [EOL] } <line_num>: 336,350
public void testCanInlineReferenceToFunction39() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(a){return true;}; " + "function x() { foo.call(bar, 1); }", "foo", INLINE_DIRECT); [EOL] } <line_num>: 352,357
public void testCanInlineReferenceToFunction40() { [EOL]     assumeStrictThis = false; [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(a){return true;}; " + "function x() { foo.call(bar, goo()); }", "foo", INLINE_BLOCK); [EOL]     assumeStrictThis = true; [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(a){return true;}; " + "function x() { foo.call(bar, goo()); }", "foo", INLINE_BLOCK); [EOL] } <line_num>: 359,371
public void testCanInlineReferenceToFunction41() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(a){return true;}; " + "function x() { foo.call(new bar(), 1); }", "foo", INLINE_DIRECT); [EOL] } <line_num>: 373,378
public void testCanInlineReferenceToFunction42() { [EOL]     assumeStrictThis = false; [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(a){return true;}; " + "function x() { foo.call(new bar(), goo()); }", "foo", INLINE_BLOCK); [EOL]     assumeStrictThis = true; [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(a){return true;}; " + "function x() { foo.call(new bar(), goo()); }", "foo", INLINE_BLOCK); [EOL] } <line_num>: 380,392
public void testCanInlineReferenceToFunction43() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(){return true;}; " + "function x() { foo.call(); }", "foo", INLINE_DIRECT); [EOL] } <line_num>: 394,400
public void testCanInlineReferenceToFunction44() { [EOL]     assumeStrictThis = false; [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(){return true;}; " + "function x() { foo.call(); }", "foo", INLINE_BLOCK); [EOL]     assumeStrictThis = true; [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(){return true;}; " + "function x() { foo.call(); }", "foo", INLINE_BLOCK); [EOL] } <line_num>: 402,416
public void testCanInlineReferenceToFunction45() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(){return function() {return true;}}; foo();", "foo", INLINE_DIRECT); [EOL] } <line_num>: 418,423
public void testCanInlineReferenceToFunction46() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(){return function() {return true;}}; foo();", "foo", INLINE_BLOCK); [EOL] } <line_num>: 425,430
public void testCanInlineReferenceToFunction47() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(){var a; return function() {return true;}}; foo();", "foo", INLINE_DIRECT); [EOL] } <line_num>: 432,437
public void testCanInlineReferenceToFunction48() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(){var a; return function() {return true;}}; foo();", "foo", INLINE_BLOCK); [EOL] } <line_num>: 439,445
public void testCanInlineReferenceToFunction49() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(){return function() {var a; return true;}}; foo();", "foo", INLINE_DIRECT); [EOL] } <line_num>: 447,452
public void testCanInlineReferenceToFunction50() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(){return function() {var a; return true;}}; foo();", "foo", INLINE_BLOCK); [EOL] } <line_num>: 454,459
public void testCanInlineReferenceToFunction51() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(){function x() {var a; return true;} return x}; foo();", "foo", INLINE_BLOCK); [EOL] } <line_num>: 461,466
public void testCanInlineReferenceToFunctionInExpression1() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION, "function foo(a){return true;}; " + "function x() { if (foo(1)) throw 'test'; }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 468,474
public void testCanInlineReferenceToFunctionInExpression2() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION, "function foo(a){return true;}; " + "function x() { return foo(1); }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 476,482
public void testCanInlineReferenceToFunctionInExpression3() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION, "function foo(a){return true;}; " + "function x() { switch(foo(1)) { default:break; } }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 484,490
public void testCanInlineReferenceToFunctionInExpression4() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION, "function foo(a){return true;}; " + "function x() {foo(1)?0:1 }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 492,498
public void testCanInlineReferenceToFunctionInExpression5() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(a){return true;}; " + "function x() {true?foo(1):1 }", "foo", INLINE_BLOCK); [EOL] } <line_num>: 500,506
public void testCanInlineReferenceToFunctionInExpression5a() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION, "function foo(a){return true;}; " + "function x() {true?foo(1):1 }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 508,515
public void testCanInlineReferenceToFunctionInExpression6() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION, "function foo(a){return true;}; " + "function x() {foo(1) && 1 }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 517,523
public void testCanInlineReferenceToFunctionInExpression7() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(a){return true;}; " + "function x() {1 && foo(1) }", "foo", INLINE_BLOCK); [EOL] } <line_num>: 525,531
public void testCanInlineReferenceToFunctionInExpression7a() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION, "function foo(a){return true;}; " + "function x() {1 && foo(1) }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 533,540
public void testCanInlineReferenceToFunctionInExpression8() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION, "function foo(a){return true;}; " + "function x() {1 + foo(1) }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 542,548
public void testCanInlineReferenceToFunctionInExpression9() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION, "function foo(a){return true;}; " + "function x() {var b = 1 + foo(1)}", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 550,556
public void testCanInlineReferenceToFunctionInExpression10() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(a){return true;}; " + "function x() {var b; b += 1 + foo(1) }", "foo", INLINE_BLOCK); [EOL] } <line_num>: 558,564
public void testCanInlineReferenceToFunctionInExpression10a() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION, "function foo(a){return true;}; " + "function x() {var b; b += 1 + foo(1) }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 566,573
public void testCanInlineReferenceToFunctionInExpression12() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION, "function foo(a){return true;}; " + "function x() {var a,b,c; a = b = c = foo(1) }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 583,588
public void testCanInlineReferenceToFunctionInExpression13() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION, "function foo(a){return true;}; " + "function x() {var a,b,c; a = b = c = 1 + foo(1) }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 590,595
public void testCanInlineReferenceToFunctionInExpression14() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "var a = {}, b = {}, c;" + "a.test = 'a';" + "b.test = 'b';" + "c = a;" + "function foo(){c = b; return 'foo'};" + "c.test=foo();", "foo", INLINE_BLOCK); [EOL] } <line_num>: 597,607
public void testCanInlineReferenceToFunctionInExpression14a() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION, "var a = {}, b = {}, c;" + "a.test = 'a';" + "b.test = 'b';" + "c = a;" + "function foo(){c = b; return 'foo'};" + "c.test=foo();", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 609,620
public void testCanInlineReferenceToFunctionInExpression18() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION, "function foo(){return _g();}; " + "function x() {1 + foo()() }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 661,667
public void testCanInlineReferenceToFunctionInExpression19() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(){return a;}; " + "function x() {1 + _g(foo()) }", "foo", INLINE_BLOCK); [EOL] } <line_num>: 669,677
public void testCanInlineReferenceToFunctionInExpression19a() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION, "function foo(){return a;}; " + "function x() {1 + _g(foo()) }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 679,688
public void testCanInlineReferenceToFunctionInExpression21() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "var z = {};" + "function foo(a){z = {};return true;}; " + "function x() { z.gack = foo(1) }", "foo", INLINE_BLOCK); [EOL] } <line_num>: 698,708
public void testCanInlineReferenceToFunctionInExpression21a() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION, "var z = {};" + "function foo(a){z = {};return true;}; " + "function x() { z.gack = foo(1) }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 710,721
public void testCanInlineReferenceToFunctionInExpression22() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(){return a;}; " + "function x() {1 + _g(_a(), foo()) }", "foo", INLINE_BLOCK); [EOL] } <line_num>: 723,729
public void testCanInlineReferenceToFunctionInExpression22a() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION, "function foo(){return a;}; " + "function x() {1 + _g(_a(), foo()) }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 731,738
public void testCanInlineReferenceToFunctionInExpression23() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(){return a;}; " + "function x() {1 + _g(_a(), foo.call(this)) }", "foo", INLINE_BLOCK); [EOL] } <line_num>: 740,746
public void testCanInlineReferenceToFunctionInExpression23a() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.AFTER_PREPARATION, "function foo(){return a;}; " + "function x() {1 + _g(_a(), foo.call(this)) }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 748,755
public void testCanInlineReferenceToFunctionInLoop1() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.YES, "function foo(){return a;}; " + "while(1) { foo(); }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 757,763
public void testCanInlineReferenceToFunctionInLoop2() { [EOL]     helperCanInlineReferenceToFunction(CanInlineResult.NO, "function foo(){return function() {};}; " + "while(1) { foo(); }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 765,775
public void testInline1() { [EOL]     helperInlineReferenceToFunction("function foo(){}; foo();", "function foo(){}; void 0", "foo", INLINE_DIRECT); [EOL] } <line_num>: 777,782
public void testInline2() { [EOL]     helperInlineReferenceToFunction("function foo(){}; foo();", "function foo(){}; {}", "foo", INLINE_BLOCK); [EOL] } <line_num>: 784,789
public void testInline3() { [EOL]     helperInlineReferenceToFunction("function foo(){return;}; foo();", "function foo(){return;}; {}", "foo", INLINE_BLOCK); [EOL] } <line_num>: 791,796
public void testInline4() { [EOL]     helperInlineReferenceToFunction("function foo(){return true;}; foo();", "function foo(){return true;}; true;", "foo", INLINE_DIRECT); [EOL] } <line_num>: 798,803
public void testInline5() { [EOL]     helperInlineReferenceToFunction("function foo(){return true;}; foo();", "function foo(){return true;}; {true;}", "foo", INLINE_BLOCK); [EOL] } <line_num>: 805,810
public void testInline6() { [EOL]     helperInlineReferenceToFunction("function foo(){return true;}; var x=foo();", "function foo(){return true;}; var x=true;", "foo", INLINE_DIRECT); [EOL] } <line_num>: 812,818
public void testInline7() { [EOL]     helperInlineReferenceToFunction("function foo(){return true;}; var x=foo();", "function foo(){return true;}; var x;" + "{x=true}", "foo", INLINE_BLOCK); [EOL] } <line_num>: 820,826
public void testInline8() { [EOL]     helperInlineReferenceToFunction("function foo(){return true;}; var x; x=foo();", "function foo(){return true;}; var x; x=true;", "foo", INLINE_DIRECT); [EOL] } <line_num>: 828,834
public void testInline9() { [EOL]     helperInlineReferenceToFunction("function foo(){return true;}; var x; x=foo();", "function foo(){return true;}; var x;{x=true}", "foo", INLINE_BLOCK); [EOL] } <line_num>: 836,841
public void testInline10() { [EOL]     helperInlineReferenceToFunction("function foo(){return true;}; var x; x=x+foo();", "function foo(){return true;}; var x; x=x+true;", "foo", INLINE_DIRECT); [EOL] } <line_num>: 843,849
public void testInline11() { [EOL]     helperInlineReferenceToFunction("function foo(a){return true;}; foo(x);", "function foo(a){return true;}; true;", "foo", INLINE_DIRECT); [EOL] } <line_num>: 851,857
public void testInline12() { [EOL]     helperInlineReferenceToFunction("function foo(a){return true;}; foo(x);", "function foo(a){return true;}; {true}", "foo", INLINE_BLOCK); [EOL] } <line_num>: 859,864
public void testInline13() { [EOL]     helperInlineReferenceToFunction("function foo(a){return a;}; " + "function x() { foo(x++); }", "function foo(a){return a;}; " + "function x() {{var a$$inline_0=x++;" + "a$$inline_0}}", "foo", INLINE_BLOCK); [EOL] } <line_num>: 866,875
public void testInline14() { [EOL]     helperInlineReferenceToFunction("function foo(a){return a+a;}; foo(x++);", "function foo(a){return a+a;}; " + "{var a$$inline_0=x++;" + " a$$inline_0+" + "a$$inline_0;}", "foo", INLINE_BLOCK); [EOL] } <line_num>: 877,886
public void testInline15() { [EOL]     helperInlineReferenceToFunction("function foo(a){return a+a;}; foo(new Date());", "function foo(a){return a+a;}; " + "{var a$$inline_0=new Date();" + " a$$inline_0+" + "a$$inline_0;}", "foo", INLINE_BLOCK); [EOL] } <line_num>: 888,897
public void testInline16() { [EOL]     helperInlineReferenceToFunction("function foo(a){return a+a;}; foo(function(){});", "function foo(a){return a+a;}; " + "{var a$$inline_0=function(){};" + " a$$inline_0+" + "a$$inline_0;}", "foo", INLINE_BLOCK); [EOL] } <line_num>: 899,908
public void testInline17() { [EOL]     helperInlineReferenceToFunction("function foo(a){return true;}; foo(goo());", "function foo(a){return true;};" + "{var a$$inline_0=goo();true}", "foo", INLINE_BLOCK); [EOL] } <line_num>: 910,917
public void testInline18() { [EOL]     helperInlineReferenceToFunction("function foo(a){var b;return a;}; " + "function x() { foo(goo()); }", "function foo(a){var b;return a;}; " + "function x() {{var a$$inline_0=goo();" + "var b$$inline_1;a$$inline_0}}", "foo", INLINE_BLOCK); [EOL] } <line_num>: 919,928
public void testInline19() { [EOL]     helperInlineReferenceToFunction("var x = 1; var y = 2;" + "function foo(a,b){x = b; y = a;}; " + "function bar() { foo(x,y); }", "var x = 1; var y = 2;" + "function foo(a,b){x = b; y = a;}; " + "function bar() {" + "{var a$$inline_0=x;" + "x = y;" + "y = a$$inline_0;}" + "}", "foo", INLINE_BLOCK); [EOL] } <line_num>: 930,944
public void testInline19b() { [EOL]     helperInlineReferenceToFunction("var x = 1; var y = 2;" + "function foo(a,b){y = a; x = b;}; " + "function bar() { foo(x,y); }", "var x = 1; var y = 2;" + "function foo(a,b){y = a; x = b;}; " + "function bar() {" + "{var b$$inline_1=y;" + "y = x;" + "x = b$$inline_1;}" + "}", "foo", INLINE_BLOCK); [EOL] } <line_num>: 946,959
public void testInlineIntoLoop() { [EOL]     helperInlineReferenceToFunction("function foo(a){var b;return a;}; " + "for(;1;){ foo(1); }", "function foo(a){var b;return a;}; " + "for(;1;){ {" + "var b$$inline_1=void 0;1}}", "foo", INLINE_BLOCK); [EOL]     helperInlineReferenceToFunction("function foo(a){var b;return a;}; " + "do{ foo(1); } while(1)", "function foo(a){var b;return a;}; " + "do{ {" + "var b$$inline_1=void 0;1}}while(1)", "foo", INLINE_BLOCK); [EOL]     helperInlineReferenceToFunction("function foo(a){for(var b in c)return a;}; " + "for(;1;){ foo(1); }", "function foo(a){var b;for(b in c)return a;}; " + "for(;1;){ {JSCompiler_inline_label_foo_2:{" + "var b$$inline_1=void 0;for(b$$inline_1 in c){" + "1;break JSCompiler_inline_label_foo_2" + "}}}}", "foo", INLINE_BLOCK); [EOL] } <line_num>: 961,987
public void testInlineFunctionWithInnerFunction1() { [EOL]     helperInlineReferenceToFunction("function foo(){return function() {return true;}}; foo();", "function foo(){return function() {return true;}};" + "(function() {return true;})", "foo", INLINE_DIRECT); [EOL] } <line_num>: 989,996
public void testInlineFunctionWithInnerFunction2() { [EOL]     helperInlineReferenceToFunction("function foo(){return function() {return true;}}; foo();", "function foo(){return function() {return true;}};" + "{(function() {return true;})}", "foo", INLINE_BLOCK); [EOL] } <line_num>: 998,1005
public void testInlineFunctionWithInnerFunction3() { [EOL]     helperInlineReferenceToFunction("function foo(){return function() {var a; return true;}}; foo();", "function foo(){return function() {var a; return true;}};" + "(function() {var a; return true;});", "foo", INLINE_DIRECT); [EOL] } <line_num>: 1007,1014
public void testInlineFunctionWithInnerFunction4() { [EOL]     helperInlineReferenceToFunction("function foo(){return function() {var a; return true;}}; foo();", "function foo(){return function() {var a; return true;}};" + "{(function() {var a$$inline_0; return true;});}", "foo", INLINE_BLOCK); [EOL] } <line_num>: 1016,1023
public void testInlineFunctionWithInnerFunction5() { [EOL]     helperInlineReferenceToFunction("function foo(){function x() {var a; return true;} return x}; foo();", "function foo(){function x(){var a;return true}return x};" + "{var x$$inline_0 = function(){" + "var a$$inline_1;return true};x$$inline_0}", "foo", INLINE_BLOCK); [EOL] } <line_num>: 1025,1033
public void testInlineReferenceInExpression1() { [EOL]     helperInlineReferenceToFunction("function foo(a){return true;}; " + "function x() { if (foo(1)) throw 'test'; }", "function foo(a){return true;}; " + "function x() { var JSCompiler_inline_result$$0; " + "{JSCompiler_inline_result$$0=true;}" + "if (JSCompiler_inline_result$$0) throw 'test'; }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 1035,1045
public void testInlineReferenceInExpression2() { [EOL]     helperInlineReferenceToFunction("function foo(a){return true;}; " + "function x() { return foo(1); }", "function foo(a){return true;}; " + "function x() { var JSCompiler_inline_result$$0; " + "{JSCompiler_inline_result$$0=true;}" + "return JSCompiler_inline_result$$0; }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 1047,1057
public void testInlineReferenceInExpression3() { [EOL]     helperInlineReferenceToFunction("function foo(a){return true;}; " + "function x() { switch(foo(1)) { default:break; } }", "function foo(a){return true;}; " + "function x() { var JSCompiler_inline_result$$0; " + "{JSCompiler_inline_result$$0=true;}" + "switch(JSCompiler_inline_result$$0) { default:break; } }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 1059,1069
public void testInlineReferenceInExpression4() { [EOL]     helperInlineReferenceToFunction("function foo(a){return true;}; " + "function x() {foo(1)?0:1 }", "function foo(a){return true;}; " + "function x() { var JSCompiler_inline_result$$0; " + "{JSCompiler_inline_result$$0=true;}" + "JSCompiler_inline_result$$0?0:1 }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 1071,1081
public void testInlineReferenceInExpression5() { [EOL]     helperInlineReferenceToFunction("function foo(a){return true;}; " + "function x() {foo(1)&&1 }", "function foo(a){return true;}; " + "function x() { var JSCompiler_inline_result$$0; " + "{JSCompiler_inline_result$$0=true;}" + "JSCompiler_inline_result$$0&&1 }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 1083,1093
public void testInlineReferenceInExpression6() { [EOL]     helperInlineReferenceToFunction("function foo(a){return true;}; " + "function x() {1 + foo(1) }", "function foo(a){return true;}; " + "function x() { var JSCompiler_inline_result$$0; " + "{JSCompiler_inline_result$$0=true;}" + "1 + JSCompiler_inline_result$$0 }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 1095,1105
public void testInlineReferenceInExpression7() { [EOL]     helperInlineReferenceToFunction("function foo(a){return true;}; " + "function x() {foo(1) && 1 }", "function foo(a){return true;}; " + "function x() { var JSCompiler_inline_result$$0; " + "{JSCompiler_inline_result$$0=true;}" + "JSCompiler_inline_result$$0&&1 }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 1107,1117
public void testInlineReferenceInExpression8() { [EOL]     helperInlineReferenceToFunction("function foo(a){return true;}; " + "function x() {1 + foo(1) }", "function foo(a){return true;}; " + "function x() { var JSCompiler_inline_result$$0;" + "{JSCompiler_inline_result$$0=true;}" + "1 + JSCompiler_inline_result$$0 }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 1119,1129
public void testInlineReferenceInExpression9() { [EOL]     helperInlineReferenceToFunction("function foo(a){return true;}; " + "function x() {var b = 1 + foo(1)}", "function foo(a){return true;}; " + "function x() { " + "var JSCompiler_inline_result$$0;" + "{JSCompiler_inline_result$$0=true;}" + "var b = 1 + JSCompiler_inline_result$$0 " + "}", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 1131,1143
public void testInlineReferenceInExpression11() { [EOL]     helperInlineReferenceToFunction("function foo(a){return true;}; " + "function x() {a:foo(1)?0:1 }", "function foo(a){return true;}; " + "function x() {" + "  a:{" + "    var JSCompiler_inline_result$$0; " + "    {JSCompiler_inline_result$$0=true;}" + "    JSCompiler_inline_result$$0?0:1 " + "  }" + "}", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 1159,1173
public void testInlineReferenceInExpression12() { [EOL]     helperInlineReferenceToFunction("function foo(a){return true;}" + "function x() { 1?foo(1):1; }", "function foo(a){return true}" + "function x() {" + "  if(1) {" + "    {true;}" + "  } else {" + "    1;" + "  }" + "}", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 1175,1188
public void testInlineReferenceInExpression13() { [EOL]     helperInlineReferenceToFunction("function foo(a){return true;}; " + "function x() { goo() + (1?foo(1):1) }", "function foo(a){return true;}; " + "function x() { var JSCompiler_temp_const$$0=goo();" + "var JSCompiler_temp$$1;" + "if(1) {" + "  {JSCompiler_temp$$1=true;} " + "} else {" + "  JSCompiler_temp$$1=1;" + "}" + "JSCompiler_temp_const$$0 + JSCompiler_temp$$1" + "}", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 1190,1205
public void testInlineReferenceInExpression14() { [EOL]     helperInlineReferenceToFunction("var z = {};" + "function foo(a){z = {};return true;}; " + "function x() { z.gack = foo(1) }", "var z = {};" + "function foo(a){z = {};return true;}; " + "function x() {" + "var JSCompiler_temp_const$$0=z;" + "var JSCompiler_inline_result$$1;" + "{" + "z= {};" + "JSCompiler_inline_result$$1 = true;" + "}" + "JSCompiler_temp_const$$0.gack = JSCompiler_inline_result$$1;" + "}", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 1207,1225
public void testInlineReferenceInExpression15() { [EOL]     helperInlineReferenceToFunction("var z = {};" + "function foo(a){z = {};return true;}; " + "function x() { z.gack = foo.call(this,1) }", "var z = {};" + "function foo(a){z = {};return true;}; " + "function x() {" + "var JSCompiler_temp_const$$0=z;" + "var JSCompiler_inline_result$$1;" + "{" + "z= {};" + "JSCompiler_inline_result$$1 = true;" + "}" + "JSCompiler_temp_const$$0.gack = JSCompiler_inline_result$$1;" + "}", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 1227,1245
public void testInlineReferenceInExpression16() { [EOL]     helperInlineReferenceToFunction("var z = {};" + "function foo(a){z = {};return true;}; " + "function x() { z[bar()] = foo(1) }", "var z = {};" + "function foo(a){z = {};return true;}; " + "function x() {" + "var JSCompiler_temp_const$$1=z;" + "var JSCompiler_temp_const$$0=bar();" + "var JSCompiler_inline_result$$2;" + "{" + "z= {};" + "JSCompiler_inline_result$$2 = true;" + "}" + "JSCompiler_temp_const$$1[JSCompiler_temp_const$$0] = " + "JSCompiler_inline_result$$2;" + "}", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 1247,1267
public void testInlineReferenceInExpression17() { [EOL]     helperInlineReferenceToFunction("var z = {};" + "function foo(a){z = {};return true;}; " + "function x() { z.y.x.gack = foo(1) }", "var z = {};" + "function foo(a){z = {};return true;}; " + "function x() {" + "var JSCompiler_temp_const$$0=z.y.x;" + "var JSCompiler_inline_result$$1;" + "{" + "z= {};" + "JSCompiler_inline_result$$1 = true;" + "}" + "JSCompiler_temp_const$$0.gack = JSCompiler_inline_result$$1;" + "}", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 1269,1287
public void testInlineWithinCalls1() { [EOL]     helperInlineReferenceToFunction("function foo(){return _g;}; " + "function x() {1 + foo()() }", "function foo(){return _g;}; " + "function x() { var JSCompiler_inline_result$$0;" + "{JSCompiler_inline_result$$0=_g;}" + "1 + JSCompiler_inline_result$$0() }", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 1290,1300
public void testInlineAssignmentToConstant() { [EOL]     helperInlineReferenceToFunction("function foo(){return _g;}; " + "function x(){var CONSTANT_RESULT = foo(); }", "function foo(){return _g;}; " + "function x() {" + "  var JSCompiler_inline_result$$0;" + "  {JSCompiler_inline_result$$0=_g;}" + "  var CONSTANT_RESULT = JSCompiler_inline_result$$0;" + "}", "foo", INLINE_BLOCK, true); [EOL] } <line_num>: 1314,1327
public void testBug1897706() { [EOL]     helperInlineReferenceToFunction("function foo(a){}; foo(x())", "function foo(a){}; {var a$$inline_0=x()}", "foo", INLINE_BLOCK); [EOL]     helperInlineReferenceToFunction("function foo(a){bar()}; foo(x())", "function foo(a){bar()}; {var a$$inline_0=x();bar()}", "foo", INLINE_BLOCK); [EOL]     helperInlineReferenceToFunction("function foo(a,b){bar()}; foo(x(),y())", "function foo(a,b){bar()};" + "{var a$$inline_0=x();var b$$inline_1=y();bar()}", "foo", INLINE_BLOCK); [EOL] } <line_num>: 1329,1345
public void helperCanInlineReferenceToFunction(final CanInlineResult expectedResult, final String code, final String fnName, final InliningMode mode) { [EOL]     helperCanInlineReferenceToFunction(expectedResult, code, fnName, mode, false); [EOL] } <line_num>: 1358,1365
@Override [EOL] public boolean call(NodeTraversal t, Node n, Node parent) { [EOL]     CanInlineResult result = injector.canInlineReferenceToFunction(t, n, fnNode, unsafe, mode, NodeUtil.referencesThis(fnNode), NodeUtil.containsFunction(NodeUtil.getFunctionBody(fnNode))); [EOL]     assertEquals(expectedResult, result); [EOL]     return true; [EOL] } <line_num>: 1389,1397
public void helperCanInlineReferenceToFunction(final CanInlineResult expectedResult, final String code, final String fnName, final InliningMode mode, boolean allowDecomposition) { [EOL]     final Compiler compiler = new Compiler(); [EOL]     final FunctionInjector injector = new FunctionInjector(compiler, compiler.getUniqueNameIdSupplier(), allowDecomposition, assumeStrictThis, assumeMinimumCapture); [EOL]     final Node tree = parse(compiler, code); [EOL]     Node externsRoot = new Node(Token.EMPTY); [EOL]     Node mainRoot = tree; [EOL]     final Node fnNode = findFunction(tree, fnName); [EOL]     final Set<String> unsafe = FunctionArgumentInjector.findModifiedParameters(fnNode); [EOL]     Method tester = new Method() { [EOL]  [EOL]         @Override [EOL]         public boolean call(NodeTraversal t, Node n, Node parent) { [EOL]             CanInlineResult result = injector.canInlineReferenceToFunction(t, n, fnNode, unsafe, mode, NodeUtil.referencesThis(fnNode), NodeUtil.containsFunction(NodeUtil.getFunctionBody(fnNode))); [EOL]             assertEquals(expectedResult, result); [EOL]             return true; [EOL]         } [EOL]     }; [EOL]     compiler.resetUniqueNameId(); [EOL]     TestCallback test = new TestCallback(fnName, tester); [EOL]     NodeTraversal.traverse(compiler, tree, test); [EOL] } <line_num>: 1367,1403
public void helperInlineReferenceToFunction(String code, final String expectedResult, final String fnName, final InliningMode mode) { [EOL]     helperInlineReferenceToFunction(code, expectedResult, fnName, mode, false); [EOL] } <line_num>: 1405,1410
private void validateSourceInfo(Compiler compiler, Node subtree) { [EOL]     (new LineNumberCheck(compiler)).setCheckSubTree(subtree); [EOL]     if (compiler.getErrorCount() != 0) { [EOL]         String msg = "Error encountered: "; [EOL]         for (JSError err : compiler.getErrors()) { [EOL]             msg += err.toString() + "\n"; [EOL]         } [EOL]         assertTrue(msg, compiler.getErrorCount() == 0); [EOL]     } [EOL] } <line_num>: 1412,1422
@Override [EOL] public boolean call(NodeTraversal t, Node n, Node parent) { [EOL]     CanInlineResult canInline = injector.canInlineReferenceToFunction(t, n, fnNode, unsafe, mode, NodeUtil.referencesThis(fnNode), NodeUtil.containsFunction(NodeUtil.getFunctionBody(fnNode))); [EOL]     assertTrue("canInlineReferenceToFunction should not be CAN_NOT_INLINE", CanInlineResult.NO != canInline); [EOL]     if (decompose) { [EOL]         assertTrue("canInlineReferenceToFunction " + "should be CAN_INLINE_AFTER_DECOMPOSITION", CanInlineResult.AFTER_PREPARATION == canInline); [EOL]         Set<String> knownConstants = Sets.newHashSet(); [EOL]         ExpressionDecomposer decomposer = new ExpressionDecomposer(compiler, compiler.getUniqueNameIdSupplier(), knownConstants); [EOL]         injector.setKnownConstants(knownConstants); [EOL]         injector.maybePrepareCall(n); [EOL]         assertTrue("canInlineReferenceToFunction " + "should be CAN_INLINE", CanInlineResult.YES != canInline); [EOL]     } [EOL]     Node result = injector.inline(t, n, fnName, fnNode, mode); [EOL]     validateSourceInfo(compiler, result); [EOL]     String explanation = expectedRoot.checkTreeEquals(tree.getFirstChild()); [EOL]     assertNull("\nExpected: " + toSource(expectedRoot) + "\nResult: " + toSource(tree.getFirstChild()) + "\n" + explanation, explanation); [EOL]     return true; [EOL] } <line_num>: 1465,1498
public void helperInlineReferenceToFunction(String code, final String expectedResult, final String fnName, final InliningMode mode, final boolean decompose) { [EOL]     final Compiler compiler = new Compiler(); [EOL]     final FunctionInjector injector = new FunctionInjector(compiler, compiler.getUniqueNameIdSupplier(), decompose, assumeStrictThis, assumeMinimumCapture); [EOL]     List<SourceFile> externsInputs = Lists.newArrayList(SourceFile.fromCode("externs", "")); [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     options.setCodingConvention(new GoogleCodingConvention()); [EOL]     compiler.init(externsInputs, Lists.newArrayList(SourceFile.fromCode("code", code)), options); [EOL]     Node parseRoot = compiler.parseInputs(); [EOL]     Node externsRoot = parseRoot.getFirstChild(); [EOL]     final Node tree = parseRoot.getLastChild(); [EOL]     assertNotNull(tree); [EOL]     assertTrue(tree != externsRoot); [EOL]     final Node expectedRoot = parseExpected(new Compiler(), expectedResult); [EOL]     Node mainRoot = tree; [EOL]     MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler); [EOL]     mark.process(externsRoot, mainRoot); [EOL]     Normalize normalize = new Normalize(compiler, false); [EOL]     normalize.process(externsRoot, mainRoot); [EOL]     compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED); [EOL]     final Node fnNode = findFunction(tree, fnName); [EOL]     assertNotNull(fnNode); [EOL]     final Set<String> unsafe = FunctionArgumentInjector.findModifiedParameters(fnNode); [EOL]     assertNotNull(fnNode); [EOL]     Method tester = new Method() { [EOL]  [EOL]         @Override [EOL]         public boolean call(NodeTraversal t, Node n, Node parent) { [EOL]             CanInlineResult canInline = injector.canInlineReferenceToFunction(t, n, fnNode, unsafe, mode, NodeUtil.referencesThis(fnNode), NodeUtil.containsFunction(NodeUtil.getFunctionBody(fnNode))); [EOL]             assertTrue("canInlineReferenceToFunction should not be CAN_NOT_INLINE", CanInlineResult.NO != canInline); [EOL]             if (decompose) { [EOL]                 assertTrue("canInlineReferenceToFunction " + "should be CAN_INLINE_AFTER_DECOMPOSITION", CanInlineResult.AFTER_PREPARATION == canInline); [EOL]                 Set<String> knownConstants = Sets.newHashSet(); [EOL]                 ExpressionDecomposer decomposer = new ExpressionDecomposer(compiler, compiler.getUniqueNameIdSupplier(), knownConstants); [EOL]                 injector.setKnownConstants(knownConstants); [EOL]                 injector.maybePrepareCall(n); [EOL]                 assertTrue("canInlineReferenceToFunction " + "should be CAN_INLINE", CanInlineResult.YES != canInline); [EOL]             } [EOL]             Node result = injector.inline(t, n, fnName, fnNode, mode); [EOL]             validateSourceInfo(compiler, result); [EOL]             String explanation = expectedRoot.checkTreeEquals(tree.getFirstChild()); [EOL]             assertNull("\nExpected: " + toSource(expectedRoot) + "\nResult: " + toSource(tree.getFirstChild()) + "\n" + explanation, explanation); [EOL]             return true; [EOL]         } [EOL]     }; [EOL]     compiler.resetUniqueNameId(); [EOL]     TestCallback test = new TestCallback(fnName, tester); [EOL]     NodeTraversal.traverse(compiler, tree, test); [EOL] } <line_num>: 1424,1504
boolean call(NodeTraversal t, Node n, Node parent); <line_num>: 1507,1507
@Override [EOL] public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) { [EOL]     return !complete; [EOL] } <line_num>: 1521,1525
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (n.isCall()) { [EOL]         Node callee; [EOL]         if (NodeUtil.isGet(n.getFirstChild())) { [EOL]             callee = n.getFirstChild().getFirstChild(); [EOL]         } else { [EOL]             callee = n.getFirstChild(); [EOL]         } [EOL]         if (callee.isName() && callee.getString().equals(callname)) { [EOL]             complete = method.call(t, n, parent); [EOL]         } [EOL]     } [EOL]     if (parent == null) { [EOL]         assertTrue(complete); [EOL]     } [EOL] } <line_num>: 1527,1546
private static Node findFunction(Node n, String name) { [EOL]     if (n.isFunction()) { [EOL]         if (n.getFirstChild().getString().equals(name)) { [EOL]             return n; [EOL]         } [EOL]     } [EOL]     for (Node c : n.children()) { [EOL]         Node result = findFunction(c, name); [EOL]         if (result != null) { [EOL]             return result; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 1549,1564
private static Node prep(String js) { [EOL]     Compiler compiler = new Compiler(); [EOL]     Node n = compiler.parseTestCode(js); [EOL]     assertEquals(0, compiler.getErrorCount()); [EOL]     return n.getFirstChild(); [EOL] } <line_num>: 1566,1571
private static Node parse(Compiler compiler, String js) { [EOL]     Node n = compiler.parseTestCode(js); [EOL]     assertEquals(0, compiler.getErrorCount()); [EOL]     return n; [EOL] } <line_num>: 1573,1577
private static Node parseExpected(Compiler compiler, String js) { [EOL]     Node n = compiler.parseTestCode(js); [EOL]     String message = "Unexpected errors: "; [EOL]     JSError[] errs = compiler.getErrors(); [EOL]     for (int i = 0; i < errs.length; i++) { [EOL]         message += "\n" + errs[i].toString(); [EOL]     } [EOL]     assertEquals(message, 0, compiler.getErrorCount()); [EOL]     return n; [EOL] } <line_num>: 1579,1588
private static String toSource(Node n) { [EOL]     return new CodePrinter.Builder(n).setPrettyPrint(false).setLineBreak(false).setSourceMap(null).build(); [EOL] } <line_num>: 1590,1596
