public RuntimeTypeCheckTest() { [EOL]     super("/** @const */ var undefined;"); [EOL]     enableTypeCheck(CheckLevel.WARNING); [EOL] } <line_num>: 28,31
@Override [EOL] protected void setUp() { [EOL]     super.enableLineNumberCheck(false); [EOL]     enableNormalize(); [EOL] } <line_num>: 33,37
public void testValue() { [EOL]     testChecks("/** @param {number} i */ function f(i) {}", "function f(i) {" + "  $jscomp.typecheck.checkType(i, " + "      [$jscomp.typecheck.valueChecker('number')]);" + "}"); [EOL] } <line_num>: 39,45
public void testConstValue() { [EOL]     testChecks("/** @param {number} CONST */ function f(CONST) {}", "function f(CONST) {" + "  $jscomp.typecheck.checkType(CONST, " + "      [$jscomp.typecheck.valueChecker('number')]);" + "}"); [EOL] } <line_num>: 47,55
public void testValueWithInnerFn() { [EOL]     testChecks("/** @param {number} i */ function f(i) { function g() {} }", "function f(i) {" + "  function g() {}" + "  $jscomp.typecheck.checkType(i, " + "      [$jscomp.typecheck.valueChecker('number')]);" + "}"); [EOL] } <line_num>: 57,64
public void testNullValue() { [EOL]     testChecks("/** @param {null} i */ function f(i) {}", "function f(i) {" + "  $jscomp.typecheck.checkType(i, [$jscomp.typecheck.nullChecker]);" + "}"); [EOL] } <line_num>: 66,71
public void testValues() { [EOL]     testChecks("/** @param {number} i\n@param {string} j*/ function f(i, j) {}", "function f(i, j) {" + "  $jscomp.typecheck.checkType(i, " + "      [$jscomp.typecheck.valueChecker('number')]);" + "  $jscomp.typecheck.checkType(j, " + "      [$jscomp.typecheck.valueChecker('string')]);" + "}"); [EOL] } <line_num>: 73,81
public void testSkipParamOK() { [EOL]     testChecks("/** @param {*} i\n@param {string} j*/ function f(i, j) {}", "function f(i, j) {" + "  $jscomp.typecheck.checkType(j, " + "      [$jscomp.typecheck.valueChecker('string')]);" + "}"); [EOL] } <line_num>: 83,89
public void testUnion() { [EOL]     testChecks("/** @param {number|string} x */ function f(x) {}", "function f(x) {" + "  $jscomp.typecheck.checkType(x, [" + "      $jscomp.typecheck.valueChecker('number'), " + "      $jscomp.typecheck.valueChecker('string')" + "]);" + "}"); [EOL] } <line_num>: 91,99
public void testUntypedParam() { [EOL]     testChecks("/** ... */ function f(x) {}", "function f(x) {}"); [EOL] } <line_num>: 101,103
public void testReturn() { [EOL]     testChecks("/** @return {string} */ function f() { return 'x'; }", "function f() {" + "  return $jscomp.typecheck.checkType('x', " + "      [$jscomp.typecheck.valueChecker('string')]);" + "}"); [EOL] } <line_num>: 105,111
public void testNativeClass() { [EOL]     testChecks("/** @param {!String} x */ function f(x) {}", "function f(x) {" + "  $jscomp.typecheck.checkType(x, " + "      [$jscomp.typecheck.externClassChecker('String')]);" + "}"); [EOL] } <line_num>: 113,119
public void testQualifiedClass() { [EOL]     testChecks("var goog = {}; /** @constructor */goog.Foo = function() {};" + "/** @param {!goog.Foo} x */ function f(x) {}", "var goog = {}; goog.Foo = function() {};" + "goog.Foo.prototype['instance_of__goog.Foo'] = true;" + "function f(x) {" + "  $jscomp.typecheck.checkType(x, " + "    [$jscomp.typecheck.classChecker('goog.Foo')]);" + "}"); [EOL] } <line_num>: 121,130
public void testInnerClasses() { [EOL]     testChecks("function f() { /** @constructor */ function inner() {} }" + "function g() { /** @constructor */ function inner() {} }", "function f() {" + "  /** @constructor */ function inner() {}" + "  inner.prototype['instance_of__inner'] = true;" + "}" + "function g() {" + "  /** @constructor */ function inner$$1() {}" + "  inner$$1.prototype['instance_of__inner$$1'] = true;" + "}"); [EOL] } <line_num>: 132,144
public void testInterface() { [EOL]     testChecks("/** @interface */function I() {}" + "/** @param {!I} i */function f(i) {}", "function I() {}" + "function f(i) {" + "  $jscomp.typecheck.checkType(i, " + "    [$jscomp.typecheck.interfaceChecker('I')])" + "}"); [EOL] } <line_num>: 146,154
public void testImplementedInterface() { [EOL]     testChecks("/** @interface */function I() {}" + "/** @param {!I} i */function f(i) {}" + "/** @constructor\n@implements {I} */function C() {}", "function I() {}" + "function f(i) {" + "  $jscomp.typecheck.checkType(i, " + "      [$jscomp.typecheck.interfaceChecker('I')])" + "}" + "function C() {}" + "C.prototype['instance_of__C'] = true;" + "C.prototype['implements__I'] = true;"); [EOL] } <line_num>: 156,168
public void testExtendedInterface() { [EOL]     testChecks("/** @interface */function I() {}" + "/** @interface\n@extends {I} */function J() {}" + "/** @param {!I} i */function f(i) {}" + "/** @constructor\n@implements {J} */function C() {}", "function I() {}" + "function J() {}" + "function f(i) {" + "  $jscomp.typecheck.checkType(i, " + "      [$jscomp.typecheck.interfaceChecker('I')])" + "}" + "function C() {}" + "C.prototype['instance_of__C'] = true;" + "C.prototype['implements__I'] = true;" + "C.prototype['implements__J'] = true;"); [EOL] } <line_num>: 170,185
public void testImplementedInterfaceOrdering() { [EOL]     testChecks("/** @interface */function I() {}" + "/** @param {!I} i */function f(i) {}" + "/** @constructor\n@implements {I} */function C() {}" + "C.prototype.f = function() {};", "function I() {}" + "function f(i) {" + "  $jscomp.typecheck.checkType(i, " + "      [$jscomp.typecheck.interfaceChecker('I')])" + "}" + "function C() {}" + "C.prototype['instance_of__C'] = true;" + "C.prototype['implements__I'] = true;" + "C.prototype.f = function() {};"); [EOL] } <line_num>: 187,201
public void testImplementedInterfaceOrderingGoogInherits() { [EOL]     testChecks("var goog = {}; goog.inherits = function(x, y) {};" + "/** @interface */function I() {}" + "/** @param {!I} i */function f(i) {}" + "/** @constructor */function B() {}" + "/** @constructor\n@extends {B}\n@implements {I} */function C() {}" + "goog.inherits(C, B);" + "C.prototype.f = function() {};", "var goog = {}; goog.inherits = function(x, y) {};" + "function I() {}" + "function f(i) {" + "  $jscomp.typecheck.checkType(i, " + "      [$jscomp.typecheck.interfaceChecker('I')])" + "}" + "function B() {}" + "B.prototype['instance_of__B'] = true;" + "function C() {}" + "goog.inherits(C, B);" + "C.prototype['instance_of__C'] = true;" + "C.prototype['implements__I'] = true;" + "C.prototype.f = function() {};"); [EOL] } <line_num>: 203,224
public void testInnerConstructor() { [EOL]     testChecks("(function() { /** @constructor */ function C() {} })()", "(function() {" + "  function C() {} C.prototype['instance_of__C'] = true;" + "})()"); [EOL] } <line_num>: 226,231
public void testReturnNothing() { [EOL]     testChecks("function f() { return; }", "function f() { return; }"); [EOL] } <line_num>: 233,235
public void testFunctionType() { [EOL]     testChecks("/** @type {!Function} */function f() {}", "function f() {}"); [EOL] } <line_num>: 237,239
private void testChecks(String js, String expected) { [EOL]     Compiler compiler = new Compiler(); [EOL]     compiler.init(Lists.<SourceFile>newArrayList(), Lists.<SourceFile>newArrayList(), new CompilerOptions()); [EOL]     Node base = compiler.loadLibraryCode("base"); [EOL]     Node typeCheck = compiler.loadLibraryCode("runtime_type_check"); [EOL]     test(js, compiler.toSource(base) + ";" + compiler.toSource(typeCheck) + ";" + expected); [EOL] } <line_num>: 241,252
@Override [EOL] protected CompilerPass getProcessor(final Compiler compiler) { [EOL]     return new RuntimeTypeCheck(compiler, null); [EOL] } <line_num>: 254,257
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 259,262
