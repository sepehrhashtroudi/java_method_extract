@Override [EOL] public int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 42,45
@Override [EOL] protected CompilerOptions getOptions() { [EOL]     CompilerOptions options = super.getOptions(); [EOL]     options.ideMode = true; [EOL]     return options; [EOL] } <line_num>: 47,52
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     Scope s = t.getScope(); [EOL]     if (s.isGlobal()) { [EOL]         globalScope = s; [EOL]     } [EOL] } <line_num>: 55,61
@Override [EOL] public void process(Node externs, Node root) { [EOL]     MemoizedScopeCreator scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler)); [EOL]     Scope topScope = scopeCreator.createScope(root.getParent(), null); [EOL]     (new TypeInferencePass(compiler, compiler.getReverseAbstractInterpreter(), topScope, scopeCreator)).process(externs, root); [EOL]     NodeTraversal t = new NodeTraversal(compiler, callback, scopeCreator); [EOL]     t.traverseRoots(Lists.newArrayList(externs, root)); [EOL]     (new InferJSDocInfo(compiler)).process(externs, root); [EOL] } <line_num>: 67,79
@Override [EOL] public CompilerPass getProcessor(final Compiler compiler) { [EOL]     return new CompilerPass() { [EOL]  [EOL]         @Override [EOL]         public void process(Node externs, Node root) { [EOL]             MemoizedScopeCreator scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler)); [EOL]             Scope topScope = scopeCreator.createScope(root.getParent(), null); [EOL]             (new TypeInferencePass(compiler, compiler.getReverseAbstractInterpreter(), topScope, scopeCreator)).process(externs, root); [EOL]             NodeTraversal t = new NodeTraversal(compiler, callback, scopeCreator); [EOL]             t.traverseRoots(Lists.newArrayList(externs, root)); [EOL]             (new InferJSDocInfo(compiler)).process(externs, root); [EOL]         } [EOL]     }; [EOL] } <line_num>: 64,81
public void testNativeCtor() { [EOL]     testSame("/** Object. \n * @param {*=} x \n * @constructor */ " + "function Object(x) {};", "var x = new Object();" + "/** Another object. */ var y = new Object();", null); [EOL]     assertEquals("Object.", findGlobalNameType("x").getJSDocInfo().getBlockDescription()); [EOL]     assertEquals("Object.", findGlobalNameType("y").getJSDocInfo().getBlockDescription()); [EOL]     assertEquals("Object.", globalScope.getVar("y").getType().getJSDocInfo().getBlockDescription()); [EOL] } <line_num>: 83,98
public void testStructuralFunctions() { [EOL]     testSame("/** Object. \n * @param {*=} x \n * @constructor */ " + "function Object(x) {};", "/** Function. \n * @param {*} x */ " + "function fn(x) {};" + "var goog = {};" + "/** Another object. \n * @type {Object} */ goog.x = new Object();" + "/** Another function. \n * @param {number} x */ goog.y = fn;", null); [EOL]     assertEquals("(Object|null)", globalScope.getVar("goog.x").getType().toString()); [EOL]     assertEquals("Object.", globalScope.getVar("goog.x").getType().restrictByNotNullOrUndefined().getJSDocInfo().getBlockDescription()); [EOL]     assertEquals("Another function.", globalScope.getVar("goog.y").getType().getJSDocInfo().getBlockDescription()); [EOL] } <line_num>: 100,120
public void testInstanceObject() { [EOL]     testSame("/** @constructor */ function Foo() {}" + "var f = new Foo();" + "/** @type {number} */ f.bar = 4;"); [EOL]     ObjectType type = (ObjectType) globalScope.getVar("f").getType(); [EOL]     assertEquals("Foo", type.toString()); [EOL]     assertFalse(type.hasProperty("bar")); [EOL]     assertNull(type.getOwnPropertyJSDocInfo("bar")); [EOL] } <line_num>: 122,132
public void testInterface() { [EOL]     testSame("/** An interface. \n * @interface */ function Foo() {}" + "var f = new Foo();" + "/** @type {number} */ f.bar = 4;"); [EOL]     ObjectType type = (ObjectType) globalScope.getVar("Foo").getType(); [EOL]     assertEquals("An interface.", type.getJSDocInfo().getBlockDescription()); [EOL] } <line_num>: 134,143
public void testNamespacedCtor() { [EOL]     testSame("var goog = {};" + "/** Hello! \n * @constructor */ goog.Foo = function() {};" + "goog.Foo.bar = goog.Foo;" + "/** Bye! \n * @param {string=} opt_x */" + "goog.Foo.prototype.baz = goog.Foo;" + "/** Blargh */ var x = new goog.Foo();"); [EOL]     assertEquals("Hello!", findGlobalNameType("x").getJSDocInfo().getBlockDescription()); [EOL]     assertEquals("Hello!", findGlobalNameType("goog.Foo").getJSDocInfo().getBlockDescription()); [EOL]     assertEquals("Hello!", findGlobalNameType("goog.Foo.bar").getJSDocInfo().getBlockDescription()); [EOL]     assertEquals("Hello!", findGlobalNameType("goog.Foo.prototype.baz").getJSDocInfo().getBlockDescription()); [EOL]     ObjectType proto = (ObjectType) findGlobalNameType("goog.Foo.prototype"); [EOL]     assertEquals("Bye!", proto.getPropertyType("baz").getJSDocInfo().getBlockDescription()); [EOL] } <line_num>: 145,173
public void testAbstractMethod() { [EOL]     testSame("/** Abstract method. \n * @type {!Function} */ var abstractMethod;" + "/** @constructor */ function Foo() {}" + "/** Block description. \n * @param {number} x */" + "Foo.prototype.bar = abstractMethod;"); [EOL]     FunctionType abstractMethod = (FunctionType) findGlobalNameType("abstractMethod"); [EOL]     assertNull(abstractMethod.getJSDocInfo()); [EOL]     FunctionType ctor = (FunctionType) findGlobalNameType("Foo"); [EOL]     ObjectType proto = ctor.getInstanceType().getImplicitPrototype(); [EOL]     FunctionType method = (FunctionType) proto.getPropertyType("bar"); [EOL]     assertEquals("Block description.", method.getJSDocInfo().getBlockDescription()); [EOL]     assertEquals("Block description.", proto.getOwnPropertyJSDocInfo("bar").getBlockDescription()); [EOL] } <line_num>: 175,194
private JSType findGlobalNameType(String name) { [EOL]     return findNameType(name, globalScope); [EOL] } <line_num>: 196,198
private JSType findNameType(String name, Scope scope) { [EOL]     Node root = scope.getRootNode(); [EOL]     Deque<Node> queue = Lists.newLinkedList(); [EOL]     queue.push(root); [EOL]     while (!queue.isEmpty()) { [EOL]         Node current = queue.pop(); [EOL]         if (name.equals(current.getQualifiedName()) && current.getJSType() != null) { [EOL]             return current.getJSType(); [EOL]         } [EOL]         for (Node child : current.children()) { [EOL]             queue.push(child); [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 200,216
