public InlinePropertiesTest() { [EOL]     super(EXTERNS); [EOL]     enableNormalize(); [EOL]     enableTypeCheck(CheckLevel.WARNING); [EOL]     enableClosurePass(); [EOL] } <line_num>: 31,36
@Override [EOL] protected CompilerPass getProcessor(Compiler compiler) { [EOL]     return new InlineProperties(compiler); [EOL] } <line_num>: 38,41
public void testConstInstanceProp1() { [EOL]     test("/** @constructor */\n" + "function C() {\n" + "  this.foo = 1;\n" + "}\n" + "new C().foo;", "function C() {\n" + "  this.foo = 1;\n" + "}\n" + "new C(), 1;"); [EOL] } <line_num>: 43,55
public void testConstInstanceProp2() { [EOL]     test("/** @constructor */\n" + "function C() {\n" + "  this.foo = 1;\n" + "}\n" + "var x = new C();\n" + "x.foo;", "function C() {\n" + "  this.foo = 1\n" + "}\n" + "var x = new C();\n" + "1;\n"); [EOL] } <line_num>: 57,71
public void testConstInstanceProp3() { [EOL]     test("/** @constructor */\n" + "function C() {\n" + "  this.foo = 1;\n" + "}\n" + "/** @type {C} */\n" + "var x = new C();\n" + "x.foo;", "function C() {\n" + "  this.foo = 1\n" + "}\n" + "var x = new C();\n" + "1;\n"); [EOL] } <line_num>: 74,89
public void testConstInstanceProp4() { [EOL]     testSame("/** @constructor */\n" + "function C() {\n" + "  this.foo = 1;\n" + "}\n" + "/** @constructor */\n" + "function B() {\n" + "  this.foo = 1;\n" + "}\n" + "new C().foo;\n"); [EOL] } <line_num>: 91,104
public void testConstClassProps1() { [EOL]     testSame("/** @constructor */\n" + "function C() {\n" + "}\n" + "C.foo = 1;\n" + "C.foo;"); [EOL] } <line_num>: 107,116
public void testConstClassProps2() { [EOL]     testSame("/** @constructor */\n" + "function C() {\n" + "  this.foo = 1;\n" + "}\n" + "C.foo;"); [EOL] } <line_num>: 118,126
public void testConstClassProps3() { [EOL]     testSame("/** @constructor */\n" + "function C() {}\n" + "C.prototype.foo = 1;\n" + "c.foo;\n"); [EOL] } <line_num>: 128,135
public void testNonConstClassProp1() { [EOL]     testSame("/** @constructor */\n" + "function C() {\n" + "  this.foo = 1;\n" + "}\n" + "var x = new C();\n" + "alert(x.foo);\n" + "delete x.foo;"); [EOL] } <line_num>: 137,146
public void testNonConstClassProp2() { [EOL]     testSame("/** @constructor */\n" + "function C() {\n" + "  this.foo = 1;\n" + "}\n" + "var x = new C();\n" + "alert(x.foo);\n" + "x.foo = 2;"); [EOL] } <line_num>: 148,157
public void testNonConstructorClassProp1() { [EOL]     testSame("function C() {\n" + "  this.foo = 1;\n" + "  return this;\n" + "}\n" + "C().foo;"); [EOL] } <line_num>: 159,166
public void testConditionalClassProp1() { [EOL]     testSame("/** @constructor */\n" + "function C() {\n" + "  if (false) this.foo = 1;\n" + "}\n" + "new C().foo;"); [EOL] } <line_num>: 168,175
public void testConstPrototypeProp1() { [EOL]     test("/** @constructor */\n" + "function C() {}\n" + "C.prototype.foo = 1;\n" + "new C().foo;\n", "function C() {}\n" + "C.prototype.foo = 1;\n" + "new C(), 1;\n"); [EOL] } <line_num>: 177,186
public void testConstPrototypeProp2() { [EOL]     test("/** @constructor */\n" + "function C() {}\n" + "C.prototype.foo = 1;\n" + "var x = new C();\n" + "x.foo;\n", "function C() {}\n" + "C.prototype.foo = 1;\n" + "var x = new C();\n" + "1;\n"); [EOL] } <line_num>: 188,199
