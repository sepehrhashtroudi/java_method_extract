public InlineVariablesTest() { [EOL]     enableNormalize(); [EOL] } <line_num>: 31,33
@Override [EOL] public void setUp() { [EOL]     super.enableLineNumberCheck(true); [EOL] } <line_num>: 35,38
@Override [EOL] protected CompilerPass getProcessor(final Compiler compiler) { [EOL]     return new InlineVariables(compiler, (inlineLocalsOnly) ? InlineVariables.Mode.LOCALS_ONLY : InlineVariables.Mode.ALL, inlineAllStrings); [EOL] } <line_num>: 40,48
@Override [EOL] public void tearDown() { [EOL]     inlineAllStrings = false; [EOL]     inlineLocalsOnly = false; [EOL] } <line_num>: 50,54
public void testInlineGlobal() { [EOL]     test("var x = 1; var z = x;", "var z = 1;"); [EOL] } <line_num>: 58,60
public void testNoInlineExportedName() { [EOL]     testSame("var _x = 1; var z = _x;"); [EOL] } <line_num>: 62,64
public void testNoInlineExportedName2() { [EOL]     testSame("var f = function() {}; var _x = f;" + "var y = function() { _x(); }; var _y = f;"); [EOL] } <line_num>: 66,69
public void testDoNotInlineIncrement() { [EOL]     testSame("var x = 1; x++;"); [EOL] } <line_num>: 71,73
public void testDoNotInlineDecrement() { [EOL]     testSame("var x = 1; x--;"); [EOL] } <line_num>: 75,77
public void testDoNotInlineIntoLhsOfAssign() { [EOL]     testSame("var x = 1; x += 3;"); [EOL] } <line_num>: 79,81
public void testInlineIntoRhsOfAssign() { [EOL]     test("var x = 1; var y = x;", "var y = 1;"); [EOL] } <line_num>: 83,85
public void testInlineInFunction() { [EOL]     test("function baz() { var x = 1; var z = x; }", "function baz() { var z = 1; }"); [EOL] } <line_num>: 87,90
public void testInlineInFunction2() { [EOL]     test("function baz() { " + "var a = new obj();" + "result = a;" + "}", "function baz() { " + "result = new obj()" + "}"); [EOL] } <line_num>: 92,100
public void testInlineInFunction3() { [EOL]     testSame("function baz() { " + "var a = new obj();" + "(function(){a;})();" + "result = a;" + "}"); [EOL] } <line_num>: 102,109
public void testInlineInFunction4() { [EOL]     testSame("function baz() { " + "var a = new obj();" + "foo.result = a;" + "}"); [EOL] } <line_num>: 111,117
public void testInlineInFunction5() { [EOL]     testSame("function baz() { " + "var a = (foo = new obj());" + "foo.x();" + "result = a;" + "}"); [EOL] } <line_num>: 119,126
public void testInlineAcrossModules() { [EOL]     test(createModules("var a = 2;", "var b = a;"), new String[] { "", "var b = 2;" }); [EOL] } <line_num>: 128,132
public void testDoNotExitConditional1() { [EOL]     testSame("if (true) { var x = 1; } var z = x;"); [EOL] } <line_num>: 134,136
public void testDoNotExitConditional2() { [EOL]     testSame("if (true) var x = 1; var z = x;"); [EOL] } <line_num>: 138,140
public void testDoNotExitConditional3() { [EOL]     testSame("var x; if (true) x=1; var z = x;"); [EOL] } <line_num>: 143,145
public void testDoNotExitLoop() { [EOL]     testSame("while (z) { var x = 3; } var y = x;"); [EOL] } <line_num>: 147,149
public void testDoNotExitForLoop() { [EOL]     test("for (var i = 1; false; false) var z = i;", "for (;false;false) var z = 1;"); [EOL]     testSame("for (; false; false) var i = 1; var z = i;"); [EOL]     testSame("for (var i in {}); var z = i;"); [EOL] } <line_num>: 151,156
public void testDoNotEnterSubscope() { [EOL]     testSame("var x = function() {" + "  var self = this; " + "  return function() { var y = self; };" + "}"); [EOL]     testSame("var x = function() {" + "  var y = [1]; " + "  return function() { var z = y; };" + "}"); [EOL] } <line_num>: 158,169
public void testDoNotExitTry() { [EOL]     testSame("try { var x = y; } catch (e) {} var z = y; "); [EOL]     testSame("try { throw e; var x = 1; } catch (e) {} var z = x; "); [EOL] } <line_num>: 171,174
public void testDoNotEnterCatch() { [EOL]     testSame("try { } catch (e) { var z = e; } "); [EOL] } <line_num>: 176,178
public void testDoNotEnterFinally() { [EOL]     testSame("try { throw e; var x = 1; } catch (e) {} " + "finally  { var z = x; } "); [EOL] } <line_num>: 180,183
public void testInsideIfConditional() { [EOL]     test("var a = foo(); if (a) { alert(3); }", "if (foo()) { alert(3); }"); [EOL]     test("var a; a = foo(); if (a) { alert(3); }", "if (foo()) { alert(3); }"); [EOL] } <line_num>: 185,188
public void testOnlyReadAtInitialization() { [EOL]     test("var a; a = foo();", "foo();"); [EOL]     test("var a; if (a = foo()) { alert(3); }", "if (foo()) { alert(3); }"); [EOL]     test("var a; switch (a = foo()) {}", "switch(foo()) {}"); [EOL]     test("var a; function f(){ return a = foo(); }", "function f(){ return foo(); }"); [EOL]     test("function f(){ var a; return a = foo(); }", "function f(){ return foo(); }"); [EOL]     test("var a; with (a = foo()) { alert(3); }", "with (foo()) { alert(3); }"); [EOL]     test("var a; b = (a = foo());", "b = foo();"); [EOL]     test("var a; while(a = foo()) { alert(3); }", "while(foo()) { alert(3); }"); [EOL]     test("var a; for(;a = foo();) { alert(3); }", "for(;foo();) { alert(3); }"); [EOL]     test("var a; do {} while(a = foo()) { alert(3); }", "do {} while(foo()) { alert(3); }"); [EOL] } <line_num>: 190,207
public void testImmutableWithSingleReferenceAfterInitialzation() { [EOL]     test("var a; a = 1;", "1;"); [EOL]     test("var a; if (a = 1) { alert(3); }", "if (1) { alert(3); }"); [EOL]     test("var a; switch (a = 1) {}", "switch(1) {}"); [EOL]     test("var a; function f(){ return a = 1; }", "function f(){ return 1; }"); [EOL]     test("function f(){ var a; return a = 1; }", "function f(){ return 1; }"); [EOL]     test("var a; with (a = 1) { alert(3); }", "with (1) { alert(3); }"); [EOL]     test("var a; b = (a = 1);", "b = 1;"); [EOL]     test("var a; while(a = 1) { alert(3); }", "while(1) { alert(3); }"); [EOL]     test("var a; for(;a = 1;) { alert(3); }", "for(;1;) { alert(3); }"); [EOL]     test("var a; do {} while(a = 1) { alert(3); }", "do {} while(1) { alert(3); }"); [EOL] } <line_num>: 209,226
public void testSingleReferenceAfterInitialzation() { [EOL]     test("var a; a = foo();a;", "foo();"); [EOL]     testSame("var a; if (a = foo()) { alert(3); } a;"); [EOL]     testSame("var a; switch (a = foo()) {} a;"); [EOL]     testSame("var a; function f(){ return a = foo(); } a;"); [EOL]     testSame("function f(){ var a; return a = foo(); a;}"); [EOL]     testSame("var a; with (a = foo()) { alert(3); } a;"); [EOL]     testSame("var a; b = (a = foo()); a;"); [EOL]     testSame("var a; while(a = foo()) { alert(3); } a;"); [EOL]     testSame("var a; for(;a = foo();) { alert(3); } a;"); [EOL]     testSame("var a; do {} while(a = foo()) { alert(3); } a;"); [EOL] } <line_num>: 228,239
public void testInsideIfBranch() { [EOL]     testSame("var a = foo(); if (1) { alert(a); }"); [EOL] } <line_num>: 241,243
public void testInsideAndConditional() { [EOL]     test("var a = foo(); a && alert(3);", "foo() && alert(3);"); [EOL] } <line_num>: 245,247
public void testInsideAndBranch() { [EOL]     testSame("var a = foo(); 1 && alert(a);"); [EOL] } <line_num>: 249,251
public void testInsideOrBranch() { [EOL]     testSame("var a = foo(); 1 || alert(a);"); [EOL] } <line_num>: 253,255
public void testInsideHookBranch() { [EOL]     testSame("var a = foo(); 1 ? alert(a) : alert(3)"); [EOL] } <line_num>: 257,259
public void testInsideHookConditional() { [EOL]     test("var a = foo(); a ? alert(1) : alert(3)", "foo() ? alert(1) : alert(3)"); [EOL] } <line_num>: 261,264
public void testInsideOrBranchInsideIfConditional() { [EOL]     testSame("var a = foo(); if (x || a) {}"); [EOL] } <line_num>: 266,268
public void testInsideOrBranchInsideIfConditionalWithConstant() { [EOL]     testSame("var a = [false]; if (x || a) {}"); [EOL] } <line_num>: 270,273
public void testCrossFunctionsAsLeftLeaves() { [EOL]     test(new String[] { "var x = function() {};", "", "function cow() {} var z = x;" }, new String[] { "", "", "function cow() {} var z = function() {};" }); [EOL]     test(new String[] { "var x = function() {};", "", "var cow = function() {}; var z = x;" }, new String[] { "", "", "var cow = function() {}; var z = function() {};" }); [EOL]     testSame(new String[] { "var x = a;", "", "(function() { a++; })(); var z = x;" }); [EOL]     test(new String[] { "var x = a;", "", "function cow() { a++; }; cow(); var z = x;" }, new String[] { "var x = a;", "", ";(function cow(){ a++; })(); var z = x;" }); [EOL]     testSame(new String[] { "var x = a;", "", "cow(); var z = x; function cow() { a++; };" }); [EOL] } <line_num>: 275,297
public void testDoCrossFunction() { [EOL]     test("var x = 1; foo(); var z = x;", "foo(); var z = 1;"); [EOL] } <line_num>: 301,305
public void testDoNotCrossReferencingFunction() { [EOL]     testSame("var f = function() { var z = x; };" + "var x = 1;" + "f();" + "var z = x;" + "f();"); [EOL] } <line_num>: 307,314
public void testChainedAssignment() { [EOL]     test("var a = 2, b = 2; var c = b;", "var a = 2; var c = 2;"); [EOL]     test("var a = 2, b = 2; var c = a;", "var b = 2; var c = 2;"); [EOL]     test("var a = b = 2; var f = 3; var c = a;", "var f = 3; var c = b = 2;"); [EOL]     testSame("var a = b = 2; var c = b;"); [EOL] } <line_num>: 319,324
public void testForIn() { [EOL]     testSame("for (var i in j) { var c = i; }"); [EOL]     testSame("var i = 0; for (i in j) ;"); [EOL]     testSame("var i = 0; for (i in j) { var c = i; }"); [EOL]     testSame("i = 0; for (var i in j) { var c = i; }"); [EOL]     testSame("var j = {'key':'value'}; for (var i in j) {print(i)};"); [EOL] } <line_num>: 326,332
public void testDoCrossNewVariables() { [EOL]     test("var x = foo(); var z = x;", "var z = foo();"); [EOL] } <line_num>: 336,338
public void testDoNotCrossFunctionCalls() { [EOL]     testSame("var x = foo(); bar(); var z = x;"); [EOL] } <line_num>: 340,342
public void testDoNotCrossAssignment() { [EOL]     testSame("var x = {}; var y = x.a; x.a = 1; var z = y;"); [EOL]     testSame("var a = this.id; foo(this.id = 3, a);"); [EOL] } <line_num>: 347,350
public void testDoNotCrossDelete() { [EOL]     testSame("var x = {}; var y = x.a; delete x.a; var z = y;"); [EOL] } <line_num>: 352,354
public void testDoNotCrossAssignmentPlus() { [EOL]     testSame("var a = b; b += 2; var c = a;"); [EOL] } <line_num>: 356,358
public void testDoNotCrossIncrement() { [EOL]     testSame("var a = b.c; b.c++; var d = a;"); [EOL] } <line_num>: 360,362
public void testDoNotCrossConstructor() { [EOL]     testSame("var a = b; new Foo(); var c = a;"); [EOL] } <line_num>: 364,366
public void testDoCrossVar() { [EOL]     test("var a = b; var b = 3; alert(a)", "alert(3);"); [EOL] } <line_num>: 368,371
public void testOverlappingInlines() { [EOL]     String source = "a = function(el, x, opt_y) { " + "  var cur = bar(el); " + "  opt_y = x.y; " + "  x = x.x; " + "  var dx = x - cur.x; " + "  var dy = opt_y - cur.y;" + "  foo(el, el.offsetLeft + dx, el.offsetTop + dy); " + "};"; [EOL]     String expected = "a = function(el, x, opt_y) { " + "  var cur = bar(el); " + "  opt_y = x.y; " + "  x = x.x; " + "  foo(el, el.offsetLeft + (x - cur.x)," + "      el.offsetTop + (opt_y - cur.y)); " + "};"; [EOL]     test(source, expected); [EOL] } <line_num>: 373,393
public void testOverlappingInlineFunctions() { [EOL]     String source = "a = function() { " + "  var b = function(args) {var n;}; " + "  var c = function(args) {}; " + "  d(b,c); " + "};"; [EOL]     String expected = "a = function() { " + "  d(function(args){var n;}, function(args){}); " + "};"; [EOL]     test(source, expected); [EOL] } <line_num>: 395,408
public void testInlineIntoLoops() { [EOL]     test("var x = true; while (true) alert(x);", "while (true) alert(true);"); [EOL]     test("var x = true; while (true) for (var i in {}) alert(x);", "while (true) for (var i in {}) alert(true);"); [EOL]     testSame("var x = [true]; while (true) alert(x);"); [EOL] } <line_num>: 410,416
public void testInlineIntoFunction() { [EOL]     test("var x = false; var f = function() { alert(x); };", "var f = function() { alert(false); };"); [EOL]     testSame("var x = [false]; var f = function() { alert(x); };"); [EOL] } <line_num>: 418,422
public void testNoInlineIntoNamedFunction() { [EOL]     testSame("f(); var x = false; function f() { alert(x); };"); [EOL] } <line_num>: 424,426
public void testInlineIntoNestedNonHoistedNamedFunctions() { [EOL]     test("f(); var x = false; if (false) function f() { alert(x); };", "f(); if (false) function f() { alert(false); };"); [EOL] } <line_num>: 428,431
public void testNoInlineIntoNestedNamedFunctions() { [EOL]     testSame("f(); var x = false; function f() { if (false) { alert(x); } };"); [EOL] } <line_num>: 433,435
public void testNoInlineMutatedVariable() { [EOL]     testSame("var x = false; if (true) { var y = x; x = true; }"); [EOL] } <line_num>: 437,439
public void testInlineImmutableMultipleTimes() { [EOL]     test("var x = null; var y = x, z = x;", "var y = null, z = null;"); [EOL]     test("var x = 3; var y = x, z = x;", "var y = 3, z = 3;"); [EOL] } <line_num>: 441,446
public void testNoInlineStringMultipleTimesIfNotWorthwhile() { [EOL]     testSame("var x = 'abcdefghijklmnopqrstuvwxyz'; var y = x, z = x;"); [EOL] } <line_num>: 448,450
public void testInlineStringMultipleTimesWhenAliasingAllStrings() { [EOL]     inlineAllStrings = true; [EOL]     test("var x = 'abcdefghijklmnopqrstuvwxyz'; var y = x, z = x;", "var y = 'abcdefghijklmnopqrstuvwxyz', " + "    z = 'abcdefghijklmnopqrstuvwxyz';"); [EOL] } <line_num>: 452,457
public void testNoInlineBackwards() { [EOL]     testSame("var y = x; var x = null;"); [EOL] } <line_num>: 459,461
public void testNoInlineOutOfBranch() { [EOL]     testSame("if (true) var x = null; var y = x;"); [EOL] } <line_num>: 463,465
public void testInterferingInlines() { [EOL]     test("var a = 3; var f = function() { var x = a; alert(x); };", "var f = function() { alert(3); };"); [EOL] } <line_num>: 467,470
public void testInlineIntoTryCatch() { [EOL]     test("var a = true; " + "try { var b = a; } " + "catch (e) { var c = a + b; var d = true; } " + "finally { var f = a + b + c + d; }", "try { var b = true; } " + "catch (e) { var c = true + b; var d = true; } " + "finally { var f = true + b + c + d; }"); [EOL] } <line_num>: 472,480
public void testInlineConstants() { [EOL]     test("function foo() { return XXX; } var XXX = true;", "function foo() { return true; }"); [EOL] } <line_num>: 484,487
public void testInlineStringWhenWorthwhile() { [EOL]     test("var x = 'a'; foo(x, x, x);", "foo('a', 'a', 'a');"); [EOL] } <line_num>: 489,491
public void testInlineConstantAlias() { [EOL]     test("var XXX = new Foo(); q(XXX); var YYY = XXX; bar(YYY)", "var XXX = new Foo(); q(XXX); bar(XXX)"); [EOL] } <line_num>: 493,496
public void testInlineConstantAliasWithAnnotation() { [EOL]     test("/** @const */ var xxx = new Foo(); q(xxx); var YYY = xxx; bar(YYY)", "/** @const */ var xxx = new Foo(); q(xxx); bar(xxx)"); [EOL] } <line_num>: 498,501
public void testInlineConstantAliasWithNonConstant() { [EOL]     test("var XXX = new Foo(); q(XXX); var y = XXX; bar(y); baz(y)", "var XXX = new Foo(); q(XXX); bar(XXX); baz(XXX)"); [EOL] } <line_num>: 503,506
public void testCascadingInlines() { [EOL]     test("var XXX = 4; " + "function f() { var YYY = XXX; bar(YYY); baz(YYY); }", "function f() { bar(4); baz(4); }"); [EOL] } <line_num>: 508,512
public void testNoInlineGetpropIntoCall() { [EOL]     test("var a = b; a();", "b();"); [EOL]     test("var a = b.c; f(a);", "f(b.c);"); [EOL]     testSame("var a = b.c; a();"); [EOL] } <line_num>: 514,518
public void testInlineFunctionDeclaration() { [EOL]     test("var f = function () {}; var a = f;", "var a = function () {};"); [EOL]     test("var f = function () {}; foo(); var a = f;", "foo(); var a = function () {};"); [EOL]     test("var f = function () {}; foo(f);", "foo(function () {});"); [EOL]     testSame("var f = function () {}; function g() {var a = f;}"); [EOL]     testSame("var f = function () {}; function g() {h(f);}"); [EOL] } <line_num>: 520,530
public void test2388531() { [EOL]     testSame("var f = function () {};" + "var g = function () {};" + "goog.inherits(f, g);"); [EOL]     testSame("var f = function () {};" + "var g = function () {};" + "goog$inherits(f, g);"); [EOL] } <line_num>: 532,539
public void testRecursiveFunction1() { [EOL]     testSame("var x = 0; (function x() { return x ? x() : 3; })();"); [EOL] } <line_num>: 541,543
public void testRecursiveFunction2() { [EOL]     testSame("function y() { return y(); }"); [EOL] } <line_num>: 545,547
public void testUnreferencedBleedingFunction() { [EOL]     testSame("var x = function y() {}"); [EOL] } <line_num>: 549,551
public void testReferencedBleedingFunction() { [EOL]     testSame("var x = function y() { return y(); }"); [EOL] } <line_num>: 553,555
public void testInlineAliases1() { [EOL]     test("var x = this.foo(); this.bar(); var y = x; this.baz(y);", "var x = this.foo(); this.bar(); this.baz(x);"); [EOL] } <line_num>: 557,560
public void testInlineAliases1b() { [EOL]     test("var x = this.foo(); this.bar(); var y; y = x; this.baz(y);", "var x = this.foo(); this.bar(); x; this.baz(x);"); [EOL] } <line_num>: 562,565
public void testInlineAliases1c() { [EOL]     test("var x; x = this.foo(); this.bar(); var y = x; this.baz(y);", "var x; x = this.foo(); this.bar(); this.baz(x);"); [EOL] } <line_num>: 567,570
public void testInlineAliases1d() { [EOL]     test("var x; x = this.foo(); this.bar(); var y; y = x; this.baz(y);", "var x; x = this.foo(); this.bar(); x; this.baz(x);"); [EOL] } <line_num>: 572,575
public void testInlineAliases2() { [EOL]     test("var x = this.foo(); this.bar(); " + "function f() { var y = x; this.baz(y); }", "var x = this.foo(); this.bar(); function f() { this.baz(x); }"); [EOL] } <line_num>: 577,581
public void testInlineAliases2b() { [EOL]     test("var x = this.foo(); this.bar(); " + "function f() { var y; y = x; this.baz(y); }", "var x = this.foo(); this.bar(); function f() { this.baz(x); }"); [EOL] } <line_num>: 583,587
public void testInlineAliases2c() { [EOL]     test("var x; x = this.foo(); this.bar(); " + "function f() { var y = x; this.baz(y); }", "var x; x = this.foo(); this.bar(); function f() { this.baz(x); }"); [EOL] } <line_num>: 589,593
public void testInlineAliases2d() { [EOL]     test("var x; x = this.foo(); this.bar(); " + "function f() { var y; y = x; this.baz(y); }", "var x; x = this.foo(); this.bar(); function f() { this.baz(x); }"); [EOL] } <line_num>: 595,599
public void testInlineAliasesInLoop() { [EOL]     test("function f() { " + "  var x = extern();" + "  for (var i = 0; i < 5; i++) {" + "    (function() {" + "       var y = x; window.setTimeout(function() { extern(y); }, 0);" + "     })();" + "  }" + "}", "function f() { " + "  var x = extern();" + "  for (var i = 0; i < 5; i++) {" + "    (function() {" + "       window.setTimeout(function() { extern(x); }, 0);" + "     })();" + "  }" + "}"); [EOL] } <line_num>: 601,619
public void testNoInlineAliasesInLoop() { [EOL]     testSame("function f() { " + "  for (var i = 0; i < 5; i++) {" + "    var x = extern();" + "    (function() {" + "       var y = x; window.setTimeout(function() { extern(y); }, 0);" + "     })();" + "  }" + "}"); [EOL] } <line_num>: 621,631
public void testNoInlineAliases1() { [EOL]     testSame("var x = this.foo(); this.bar(); var y = x; x = 3; this.baz(y);"); [EOL] } <line_num>: 633,636
public void testNoInlineAliases1b() { [EOL]     testSame("var x = this.foo(); this.bar(); var y; y = x; x = 3; this.baz(y);"); [EOL] } <line_num>: 638,641
public void testNoInlineAliases2() { [EOL]     testSame("var x = this.foo(); this.bar(); var y = x; y = 3; this.baz(y); "); [EOL] } <line_num>: 643,646
public void testNoInlineAliases2b() { [EOL]     testSame("var x = this.foo(); this.bar(); var y; y = x; y = 3; this.baz(y); "); [EOL] } <line_num>: 648,651
public void testNoInlineAliases3() { [EOL]     testSame("var x = this.foo(); this.bar(); " + "function f() { var y = x; g(); this.baz(y); } " + "function g() { x = 3; }"); [EOL] } <line_num>: 653,658
public void testNoInlineAliases3b() { [EOL]     testSame("var x = this.foo(); this.bar(); " + "function f() { var y; y = x; g(); this.baz(y); } " + "function g() { x = 3; }"); [EOL] } <line_num>: 660,665
public void testNoInlineAliases4() { [EOL]     testSame("var x = this.foo(); this.bar(); " + "function f() { var y = x; y = 3; this.baz(y); }"); [EOL] } <line_num>: 667,671
public void testNoInlineAliases4b() { [EOL]     testSame("var x = this.foo(); this.bar(); " + "function f() { var y; y = x; y = 3; this.baz(y); }"); [EOL] } <line_num>: 673,677
public void testNoInlineAliases5() { [EOL]     testSame("var x = this.foo(); this.bar(); var y = x; this.bing();" + "this.baz(y); x = 3;"); [EOL] } <line_num>: 679,683
public void testNoInlineAliases5b() { [EOL]     testSame("var x = this.foo(); this.bar(); var y; y = x; this.bing();" + "this.baz(y); x = 3;"); [EOL] } <line_num>: 685,689
public void testNoInlineAliases6() { [EOL]     testSame("var x = this.foo(); this.bar(); var y = x; this.bing();" + "this.baz(y); y = 3;"); [EOL] } <line_num>: 691,695
public void testNoInlineAliases6b() { [EOL]     testSame("var x = this.foo(); this.bar(); var y; y = x; this.bing();" + "this.baz(y); y = 3;"); [EOL] } <line_num>: 697,701
public void testNoInlineAliases7() { [EOL]     testSame("var x = this.foo(); this.bar(); " + "function f() { var y = x; this.bing(); this.baz(y); x = 3; }"); [EOL] } <line_num>: 703,707
public void testNoInlineAliases7b() { [EOL]     testSame("var x = this.foo(); this.bar(); " + "function f() { var y; y = x; this.bing(); this.baz(y); x = 3; }"); [EOL] } <line_num>: 709,713
public void testNoInlineAliases8() { [EOL]     testSame("var x = this.foo(); this.bar(); " + "function f() { var y = x; this.baz(y); y = 3; }"); [EOL] } <line_num>: 715,719
public void testNoInlineAliases8b() { [EOL]     testSame("var x = this.foo(); this.bar(); " + "function f() { var y; y = x; this.baz(y); y = 3; }"); [EOL] } <line_num>: 721,725
public void testSideEffectOrder() { [EOL]     String EXTERNS = "var z; function f(){}"; [EOL]     test(EXTERNS, "var x = f(y.a, y); z = x;", "z = f(y.a, y);", null, null); [EOL]     testSame(EXTERNS, "var x = f(y.a, y); z.b = x;", null, null); [EOL] } <line_num>: 727,735
public void testInlineParameterAlias1() { [EOL]     test("function f(x) {" + "  var y = x;" + "  g();" + "  y;y;" + "}", "function f(x) {" + "  g();" + "  x;x;" + "}"); [EOL] } <line_num>: 737,749
public void testInlineParameterAlias2() { [EOL]     test("function f(x) {" + "  var y; y = x;" + "  g();" + "  y;y;" + "}", "function f(x) {" + "  x;" + "  g();" + "  x;x;" + "}"); [EOL] } <line_num>: 751,764
public void testInlineFunctionAlias1a() { [EOL]     test("function f(x) {}" + "var y = f;" + "g();" + "y();y();", "var y = function f(x) {};" + "g();" + "y();y();"); [EOL] } <line_num>: 766,776
public void testInlineFunctionAlias1b() { [EOL]     test("function f(x) {};" + "f;var y = f;" + "g();" + "y();y();", "function f(x) {};" + "f;g();" + "f();f();"); [EOL] } <line_num>: 778,788
public void testInlineFunctionAlias2a() { [EOL]     test("function f(x) {}" + "var y; y = f;" + "g();" + "y();y();", "var y; y = function f(x) {};" + "g();" + "y();y();"); [EOL] } <line_num>: 790,800
public void testInlineFunctionAlias2b() { [EOL]     test("function f(x) {};" + "f; var y; y = f;" + "g();" + "y();y();", "function f(x) {};" + "f; f;" + "g();" + "f();f();"); [EOL] } <line_num>: 802,813
public void testInlineCatchAlias1() { [EOL]     test("try {" + "} catch (e) {" + "  var y = e;" + "  g();" + "  y;y;" + "}", "try {" + "} catch (e) {" + "  g();" + "  e;e;" + "}"); [EOL] } <line_num>: 815,829
public void testInlineCatchAlias2() { [EOL]     test("try {" + "} catch (e) {" + "  var y; y = e;" + "  g();" + "  y;y;" + "}", "try {" + "} catch (e) {" + "  e;" + "  g();" + "  e;e;" + "}"); [EOL] } <line_num>: 831,846
public void testLocalsOnly1() { [EOL]     inlineLocalsOnly = true; [EOL]     test("var x=1; x; function f() {var x = 1; x;}", "var x=1; x; function f() {1;}"); [EOL] } <line_num>: 848,853
public void testLocalsOnly2() { [EOL]     inlineLocalsOnly = true; [EOL]     test("/** @const */\n" + "var X=1; X;\n" + "function f() {\n" + "  /** @const */\n" + "  var X = 1; X;\n" + "}", "var X=1; X; function f() {1;}"); [EOL] } <line_num>: 855,865
public void testInlineUndefined1() { [EOL]     test("var x; x;", "void 0;"); [EOL] } <line_num>: 867,870
public void testInlineUndefined2() { [EOL]     testSame("var x; x++;"); [EOL] } <line_num>: 872,874
public void testInlineUndefined3() { [EOL]     testSame("var x; var x;"); [EOL] } <line_num>: 876,878
public void testInlineUndefined4() { [EOL]     test("var x; x; x;", "void 0; void 0;"); [EOL] } <line_num>: 880,883
public void testInlineUndefined5() { [EOL]     test("var x; for(x in a) {}", "var x; for(x in a) {}"); [EOL] } <line_num>: 885,888
public void testIssue90() { [EOL]     test("var x; x && alert(1)", "void 0 && alert(1)"); [EOL] } <line_num>: 890,893
public void testRenamePropertyFunction() { [EOL]     testSame("var JSCompiler_renameProperty; " + "JSCompiler_renameProperty('foo')"); [EOL] } <line_num>: 895,898
public void testThisAlias() { [EOL]     test("function f() { var a = this; a.y(); a.z(); }", "function f() { this.y(); this.z(); }"); [EOL] } <line_num>: 900,903
public void testThisEscapedAlias() { [EOL]     testSame("function f() { var a = this; var g = function() { a.y(); }; a.z(); }"); [EOL] } <line_num>: 905,908
public void testInlineNamedFunction() { [EOL]     test("function f() {} f();", "(function f(){})()"); [EOL] } <line_num>: 910,912
public void testIssue378ModifiedArguments1() { [EOL]     testSame("function g(callback) {\n" + "  var f = callback;\n" + "  arguments[0] = this;\n" + "  f.apply(this, arguments);\n" + "}"); [EOL] } <line_num>: 914,921
public void testIssue378ModifiedArguments2() { [EOL]     testSame("function g(callback) {\n" + "  /** @const */\n" + "  var f = callback;\n" + "  arguments[0] = this;\n" + "  f.apply(this, arguments);\n" + "}"); [EOL] } <line_num>: 923,931
public void testIssue378EscapedArguments1() { [EOL]     testSame("function g(callback) {\n" + "  var f = callback;\n" + "  h(arguments,this);\n" + "  f.apply(this, arguments);\n" + "}\n" + "function h(a,b) {\n" + "  a[0] = b;" + "}"); [EOL] } <line_num>: 933,943
public void testIssue378EscapedArguments2() { [EOL]     testSame("function g(callback) {\n" + "  /** @const */\n" + "  var f = callback;\n" + "  h(arguments,this);\n" + "  f.apply(this);\n" + "}\n" + "function h(a,b) {\n" + "  a[0] = b;" + "}"); [EOL] } <line_num>: 945,956
public void testIssue378EscapedArguments3() { [EOL]     test("function g(callback) {\n" + "  var f = callback;\n" + "  f.apply(this, arguments);\n" + "}\n", "function g(callback) {\n" + "  callback.apply(this, arguments);\n" + "}\n"); [EOL] } <line_num>: 958,967
public void testIssue378EscapedArguments4() { [EOL]     testSame("function g(callback) {\n" + "  var f = callback;\n" + "  h(arguments[0],this);\n" + "  f.apply(this, arguments);\n" + "}\n" + "function h(a,b) {\n" + "  a[0] = b;" + "}"); [EOL] } <line_num>: 969,979
public void testIssue378ArgumentsRead1() { [EOL]     test("function g(callback) {\n" + "  var f = callback;\n" + "  var g = arguments[0];\n" + "  f.apply(this, arguments);\n" + "}", "function g(callback) {\n" + "  var g = arguments[0];\n" + "  callback.apply(this, arguments);\n" + "}"); [EOL] } <line_num>: 981,992
public void testIssue378ArgumentsRead2() { [EOL]     test("function g(callback) {\n" + "  var f = callback;\n" + "  h(arguments[0],this);\n" + "  f.apply(this, arguments[0]);\n" + "}\n" + "function h(a,b) {\n" + "  a[0] = b;" + "}", "function g(callback) {\n" + "  h(arguments[0],this);\n" + "  callback.apply(this, arguments[0]);\n" + "}\n" + "function h(a,b) {\n" + "  a[0] = b;" + "}"); [EOL] } <line_num>: 994,1011
public void testArgumentsModifiedInOuterFunction() { [EOL]     test("function g(callback) {\n" + "  var f = callback;\n" + "  arguments[0] = this;\n" + "  f.apply(this, arguments);\n" + "  function inner(callback) {" + "    var x = callback;\n" + "    x.apply(this);\n" + "  }" + "}", "function g(callback) {\n" + "  var f = callback;\n" + "  arguments[0] = this;\n" + "  f.apply(this, arguments);\n" + "  function inner(callback) {" + "    callback.apply(this);\n" + "  }" + "}"); [EOL] } <line_num>: 1013,1032
public void testArgumentsModifiedInInnerFunction() { [EOL]     test("function g(callback) {\n" + "  var f = callback;\n" + "  f.apply(this, arguments);\n" + "  function inner(callback) {" + "    var x = callback;\n" + "    arguments[0] = this;\n" + "    x.apply(this);\n" + "  }" + "}", "function g(callback) {\n" + "  callback.apply(this, arguments);\n" + "  function inner(callback) {" + "    var x = callback;\n" + "    arguments[0] = this;\n" + "    x.apply(this);\n" + "  }" + "}"); [EOL] } <line_num>: 1034,1053
public void testNoInlineRedeclaredExterns() { [EOL]     String externs = "var test = 1;"; [EOL]     String code = "/** @suppress {duplicate} */ var test = 2;alert(test);"; [EOL]     test(externs, code, code, null, null); [EOL] } <line_num>: 1055,1059
public void testBug6598844() { [EOL]     testSame("function F() { this.a = 0; }" + "F.prototype.inc = function() { this.a++; return 10; };" + "F.prototype.bar = function() { var val = inc(); this.a += val; };"); [EOL] } <line_num>: 1061,1066
