public CheckAccessControlsTest() { [EOL]     super(CompilerTypeTestCase.DEFAULT_EXTERNS); [EOL]     parseTypeInfo = true; [EOL]     enableTypeCheck(CheckLevel.WARNING); [EOL] } <line_num>: 41,45
@Override [EOL] protected CompilerPass getProcessor(final Compiler compiler) { [EOL]     return new CheckAccessControls(compiler); [EOL] } <line_num>: 47,50
@Override [EOL] protected CompilerOptions getOptions() { [EOL]     CompilerOptions options = super.getOptions(); [EOL]     options.setWarningLevel(DiagnosticGroups.ACCESS_CONTROLS, CheckLevel.ERROR); [EOL]     options.setWarningLevel(DiagnosticGroups.CONSTANT_PROPERTY, CheckLevel.ERROR); [EOL]     return options; [EOL] } <line_num>: 52,59
private void testDep(String js, String reason, DiagnosticType error, DiagnosticType errorWithMessage) { [EOL]     test(String.format(js, ""), null, error); [EOL]     test(String.format(js, reason), null, errorWithMessage, null, reason); [EOL] } <line_num>: 74,83
public void testDeprecatedFunction() { [EOL]     testDep("/** @deprecated %s */ function f() {} function g() { f(); }", "Some Reason", DEPRECATED_NAME, DEPRECATED_NAME_REASON); [EOL] } <line_num>: 85,89
public void testWarningOnDeprecatedConstVariable() { [EOL]     testDep("/** @deprecated %s */ var f = 4; function g() { alert(f); }", "Another reason", DEPRECATED_NAME, DEPRECATED_NAME_REASON); [EOL] } <line_num>: 91,95
public void testThatNumbersArentDeprecated() { [EOL]     testSame("/** @deprecated */ var f = 4; var h = 3; " + "function g() { alert(h); }"); [EOL] } <line_num>: 97,100
public void testDeprecatedFunctionVariable() { [EOL]     testDep("/** @deprecated %s */ var f = function() {}; " + "function g() { f(); }", "I like g...", DEPRECATED_NAME, DEPRECATED_NAME_REASON); [EOL] } <line_num>: 102,106
public void testNoWarningInGlobalScope() { [EOL]     testSame("var goog = {}; goog.makeSingleton = function(x) {};" + "/** @deprecated */ function f() {} goog.makeSingleton(f);"); [EOL] } <line_num>: 108,111
public void testNoWarningInGlobalScopeForCall() { [EOL]     testDep("/** @deprecated %s */ function f() {} f();", "Some global scope", DEPRECATED_NAME, DEPRECATED_NAME_REASON); [EOL] } <line_num>: 113,116
public void testNoWarningInDeprecatedFunction() { [EOL]     testSame("/** @deprecated */ function f() {} " + "/** @deprecated */ function g() { f(); }"); [EOL] } <line_num>: 118,121
public void testWarningInNormalClass() { [EOL]     testDep("/** @deprecated %s */ function f() {}" + "/** @constructor */  var Foo = function() {}; " + "Foo.prototype.bar = function() { f(); }", "FooBar", DEPRECATED_NAME, DEPRECATED_NAME_REASON); [EOL] } <line_num>: 123,128
public void testWarningForProperty1() { [EOL]     testDep("/** @constructor */ function Foo() {}" + "/** @deprecated %s */ Foo.prototype.bar = 3;" + "Foo.prototype.baz = function() { alert((new Foo()).bar); };", "A property is bad", DEPRECATED_PROP, DEPRECATED_PROP_REASON); [EOL] } <line_num>: 130,136
public void testWarningForProperty2() { [EOL]     testDep("/** @constructor */ function Foo() {}" + "/** @deprecated %s */ Foo.prototype.bar = 3;" + "Foo.prototype.baz = function() { alert(this.bar); };", "Zee prop, it is deprecated!", DEPRECATED_PROP, DEPRECATED_PROP_REASON); [EOL] } <line_num>: 138,145
public void testWarningForDeprecatedClass() { [EOL]     testDep("/** @constructor \n* @deprecated %s */ function Foo() {} " + "function f() { new Foo(); }", "Use the class 'Bar'", DEPRECATED_CLASS, DEPRECATED_CLASS_REASON); [EOL] } <line_num>: 147,153
public void testNoWarningForDeprecatedClassInstance() { [EOL]     testSame("/** @constructor \n * @deprecated */ function Foo() {} " + "/** @param {Foo} x */ function f(x) { return x; }"); [EOL] } <line_num>: 155,158
public void testWarningForDeprecatedSuperClass() { [EOL]     testDep("/** @constructor \n * @deprecated %s */ function Foo() {} " + "/** @constructor \n * @extends {Foo} */ function SubFoo() {}" + "function f() { new SubFoo(); }", "Superclass to the rescue!", DEPRECATED_CLASS, DEPRECATED_CLASS_REASON); [EOL] } <line_num>: 160,167
public void testWarningForDeprecatedSuperClass2() { [EOL]     testDep("/** @constructor \n * @deprecated %s */ function Foo() {} " + "var namespace = {}; " + "/** @constructor \n * @extends {Foo} */ " + "namespace.SubFoo = function() {}; " + "function f() { new namespace.SubFoo(); }", "Its only weakness is Kryptoclass", DEPRECATED_CLASS, DEPRECATED_CLASS_REASON); [EOL] } <line_num>: 169,178
public void testWarningForPrototypeProperty() { [EOL]     testDep("/** @constructor */ function Foo() {}" + "/** @deprecated %s */ Foo.prototype.bar = 3;" + "Foo.prototype.baz = function() { alert(Foo.prototype.bar); };", "It is now in production, use that model...", DEPRECATED_PROP, DEPRECATED_PROP_REASON); [EOL] } <line_num>: 180,187
public void testNoWarningForNumbers() { [EOL]     testSame("/** @constructor */ function Foo() {}" + "/** @deprecated */ Foo.prototype.bar = 3;" + "Foo.prototype.baz = function() { alert(3); };"); [EOL] } <line_num>: 189,193
public void testWarningForMethod1() { [EOL]     testDep("/** @constructor */ function Foo() {}" + "/** @deprecated %s */ Foo.prototype.bar = function() {};" + "Foo.prototype.baz = function() { this.bar(); };", "There is a madness to this method", DEPRECATED_PROP, DEPRECATED_PROP_REASON); [EOL] } <line_num>: 195,202
public void testWarningForMethod2() { [EOL]     testDep("/** @constructor */ function Foo() {} " + "/** @deprecated %s */ Foo.prototype.bar; " + "Foo.prototype.baz = function() { this.bar(); };", "Stop the ringing!", DEPRECATED_PROP, DEPRECATED_PROP_REASON); [EOL] } <line_num>: 204,211
public void testNoWarningInDeprecatedClass() { [EOL]     testSame("/** @deprecated */ function f() {} " + "/** @constructor \n * @deprecated */ " + "var Foo = function() {}; " + "Foo.prototype.bar = function() { f(); }"); [EOL] } <line_num>: 213,218
public void testNoWarningInDeprecatedClass2() { [EOL]     testSame("/** @deprecated */ function f() {} " + "/** @constructor \n * @deprecated */ " + "var Foo = function() {}; " + "Foo.bar = function() { f(); }"); [EOL] } <line_num>: 220,225
public void testNoWarningInDeprecatedStaticMethod() { [EOL]     testSame("/** @deprecated */ function f() {} " + "/** @constructor */ " + "var Foo = function() {}; " + "/** @deprecated */ Foo.bar = function() { f(); }"); [EOL] } <line_num>: 227,232
public void testWarningInStaticMethod() { [EOL]     testDep("/** @deprecated %s */ function f() {} " + "/** @constructor */ " + "var Foo = function() {}; " + "Foo.bar = function() { f(); }", "crazy!", DEPRECATED_NAME, DEPRECATED_NAME_REASON); [EOL] } <line_num>: 234,242
public void testDeprecatedObjLitKey() { [EOL]     testDep("var f = {}; /** @deprecated %s */ f.foo = 3; " + "function g() { return f.foo; }", "It is literally not used anymore", DEPRECATED_PROP, DEPRECATED_PROP_REASON); [EOL] } <line_num>: 244,250
public void testWarningForSubclassMethod() { [EOL]     testDep("/** @constructor */ function Foo() {}" + "Foo.prototype.bar = function() {};" + "/** @constructor \n * @extends {Foo} */ function SubFoo() {}" + "/** @deprecated %s */ SubFoo.prototype.bar = function() {};" + "function f() { (new SubFoo()).bar(); };", "I have a parent class!", DEPRECATED_PROP, DEPRECATED_PROP_REASON); [EOL] } <line_num>: 252,261
public void testWarningForSuperClassWithDeprecatedSubclassMethod() { [EOL]     testSame("/** @constructor */ function Foo() {}" + "Foo.prototype.bar = function() {};" + "/** @constructor \n * @extends {Foo} */ function SubFoo() {}" + "/** @deprecated \n * @override */ SubFoo.prototype.bar = " + "function() {};" + "function f() { (new Foo()).bar(); };"); [EOL] } <line_num>: 263,270
public void testWarningForSuperclassMethod() { [EOL]     testDep("/** @constructor */ function Foo() {}" + "/** @deprecated %s */ Foo.prototype.bar = function() {};" + "/** @constructor \n * @extends {Foo} */ function SubFoo() {}" + "SubFoo.prototype.bar = function() {};" + "function f() { (new SubFoo()).bar(); };", "I have a child class!", DEPRECATED_PROP, DEPRECATED_PROP_REASON); [EOL] } <line_num>: 272,281
public void testWarningForSuperclassMethod2() { [EOL]     testDep("/** @constructor */ function Foo() {}" + "/** @deprecated %s \n* @protected */" + "Foo.prototype.bar = function() {};" + "/** @constructor \n * @extends {Foo} */ function SubFoo() {}" + "/** @protected */SubFoo.prototype.bar = function() {};" + "function f() { (new SubFoo()).bar(); };", "I have another child class...", DEPRECATED_PROP, DEPRECATED_PROP_REASON); [EOL] } <line_num>: 283,293
public void testWarningForBind() { [EOL]     testDep("/** @deprecated %s */ Function.prototype.bind = function() {};" + "(function() {}).bind();", "I'm bound to this method...", DEPRECATED_PROP, DEPRECATED_PROP_REASON); [EOL] } <line_num>: 295,301
public void testWarningForDeprecatedClassInGlobalScope() { [EOL]     testDep("/** @constructor \n * @deprecated %s */ var Foo = function() {};" + "new Foo();", "I'm a very worldly object!", DEPRECATED_CLASS, DEPRECATED_CLASS_REASON); [EOL] } <line_num>: 303,309
public void testNoWarningForPrototypeCopying() { [EOL]     testSame("/** @constructor */ var Foo = function() {};" + "Foo.prototype.bar = function() {};" + "/** @deprecated */ Foo.prototype.baz = Foo.prototype.bar;" + "(new Foo()).bar();"); [EOL] } <line_num>: 311,316
public void testNoWarningOnDeprecatedPrototype() { [EOL]     testSame("/** @constructor */ var Foo = function() {};" + "/** @deprecated */ Foo.prototype = {};" + "Foo.prototype.bar = function() {};"); [EOL] } <line_num>: 318,323
public void testPrivateAccessForNames() { [EOL]     testSame("/** @private */ function foo_() {}; foo_();"); [EOL]     test(new String[] { "/** @private */ function foo_() {};", "foo_();" }, null, BAD_PRIVATE_GLOBAL_ACCESS); [EOL] } <line_num>: 325,331
public void testPrivateAccessForProperties1() { [EOL]     testSame("/** @constructor */ function Foo() {}" + "/** @private */ Foo.prototype.bar_ = function() {};" + "Foo.prototype.baz = function() { this.bar_(); }; (new Foo).bar_();"); [EOL] } <line_num>: 333,337
public void testPrivateAccessForProperties2() { [EOL]     testSame(new String[] { "/** @constructor */ function Foo() {}", "/** @private */ Foo.prototype.bar_ = function() {};" + "Foo.prototype.baz = function() { this.bar_(); }; (new Foo).bar_();" }); [EOL] } <line_num>: 339,345
public void testPrivateAccessForProperties3() { [EOL]     testSame(new String[] { "/** @constructor */ function Foo() {}" + "/** @private */ Foo.prototype.bar_ = function() {}; (new Foo).bar_();", "Foo.prototype.baz = function() { this.bar_(); };" }); [EOL] } <line_num>: 347,353
public void testPrivateAccessForProperties4() { [EOL]     testSame(new String[] { "/** @constructor */ function Foo() {}" + "/** @private */ Foo.prototype.bar_ = function() {};", "Foo.prototype['baz'] = function() { (new Foo()).bar_(); };" }); [EOL] } <line_num>: 355,361
public void testNoPrivateAccessForProperties1() { [EOL]     test(new String[] { "/** @constructor */ function Foo() {} (new Foo).bar_();", "/** @private */ Foo.prototype.bar_ = function() {};" + "Foo.prototype.baz = function() { this.bar_(); };" }, null, BAD_PRIVATE_PROPERTY_ACCESS); [EOL] } <line_num>: 363,369
public void testNoPrivateAccessForProperties2() { [EOL]     test(new String[] { "/** @constructor */ function Foo() {} " + "/** @private */ Foo.prototype.bar_ = function() {};" + "Foo.prototype.baz = function() { this.bar_(); };", "(new Foo).bar_();" }, null, BAD_PRIVATE_PROPERTY_ACCESS); [EOL] } <line_num>: 371,378
public void testNoPrivateAccessForProperties3() { [EOL]     test(new String[] { "/** @constructor */ function Foo() {} " + "/** @private */ Foo.prototype.bar_ = function() {};", "/** @constructor */ function OtherFoo() { (new Foo).bar_(); }" }, null, BAD_PRIVATE_PROPERTY_ACCESS); [EOL] } <line_num>: 380,386
public void testNoPrivateAccessForProperties4() { [EOL]     test(new String[] { "/** @constructor */ function Foo() {} " + "/** @private */ Foo.prototype.bar_ = function() {};", "/** @constructor \n * @extends {Foo} */ " + "function SubFoo() { this.bar_(); }" }, null, BAD_PRIVATE_PROPERTY_ACCESS); [EOL] } <line_num>: 388,395
public void testNoPrivateAccessForProperties5() { [EOL]     test(new String[] { "/** @constructor */ function Foo() {} " + "/** @private */ Foo.prototype.bar_ = function() {};", "/** @constructor \n * @extends {Foo} */ " + "function SubFoo() {};" + "SubFoo.prototype.baz = function() { this.bar_(); }" }, null, BAD_PRIVATE_PROPERTY_ACCESS); [EOL] } <line_num>: 397,405
public void testNoPrivateAccessForProperties6() { [EOL]     test(new String[] { "/** @constructor */ function Foo() {} " + "/** @private */ Foo.prototype.bar_ = function() {};", "/** @constructor \n * @extends {Foo} */ " + "function SubFoo() {};" + "SubFoo.prototype.bar_ = function() {};" }, null, BAD_PRIVATE_PROPERTY_ACCESS); [EOL] } <line_num>: 407,417
public void testNoPrivateAccessForProperties7() { [EOL]     test(new String[] { "/** @constructor */ function Foo() {} " + "/** @private */ Foo.prototype.bar_ = function() {};" + "/** @constructor \n * @extends {Foo} */ " + "function SubFoo() {};" + "SubFoo.prototype.bar_ = function() {};", "SubFoo.prototype.baz = function() { this.bar_(); }" }, null, BAD_PRIVATE_PROPERTY_ACCESS); [EOL] } <line_num>: 419,430
public void testNoPrivateAccessForProperties8() { [EOL]     test(new String[] { "/** @constructor */ function Foo() { /** @private */ this.bar_ = 3; }", "/** @constructor \n * @extends {Foo} */ " + "function SubFoo() { /** @private */ this.bar_ = 3; };" }, null, PRIVATE_OVERRIDE); [EOL] } <line_num>: 432,438
public void testProtectedAccessForProperties1() { [EOL]     testSame(new String[] { "/** @constructor */ function Foo() {}" + "/** @protected */ Foo.prototype.bar = function() {};" + "(new Foo).bar();", "Foo.prototype.baz = function() { this.bar(); };" }); [EOL] } <line_num>: 440,447
public void testProtectedAccessForProperties2() { [EOL]     testSame(new String[] { "/** @constructor */ function Foo() {}" + "/** @protected */ Foo.prototype.bar = function() {};" + "(new Foo).bar();", "/** @constructor \n * @extends {Foo} */" + "function SubFoo() { this.bar(); }" }); [EOL] } <line_num>: 449,457
public void testProtectedAccessForProperties3() { [EOL]     testSame(new String[] { "/** @constructor */ function Foo() {}" + "/** @protected */ Foo.prototype.bar = function() {};" + "(new Foo).bar();", "/** @constructor \n * @extends {Foo} */" + "function SubFoo() { }" + "SubFoo.baz = function() { (new Foo).bar(); }" }); [EOL] } <line_num>: 459,468
public void testProtectedAccessForProperties4() { [EOL]     testSame(new String[] { "/** @constructor */ function Foo() {}" + "/** @protected */ Foo.bar = function() {};", "/** @constructor \n * @extends {Foo} */" + "function SubFoo() { Foo.bar(); }" }); [EOL] } <line_num>: 470,477
public void testProtectedAccessForProperties5() { [EOL]     testSame(new String[] { "/** @constructor */ function Foo() {}" + "/** @protected */ Foo.prototype.bar = function() {};" + "(new Foo).bar();", "/** @constructor \n * @extends {Foo} */" + "var SubFoo = function() { this.bar(); }" }); [EOL] } <line_num>: 479,487
public void testProtectedAccessForProperties6() { [EOL]     testSame(new String[] { "var goog = {};" + "/** @constructor */ goog.Foo = function() {};" + "/** @protected */ goog.Foo.prototype.bar = function() {};", "/** @constructor \n * @extends {goog.Foo} */" + "goog.SubFoo = function() { this.bar(); };" }); [EOL] } <line_num>: 489,497
public void testNoProtectedAccessForProperties1() { [EOL]     test(new String[] { "/** @constructor */ function Foo() {} " + "/** @protected */ Foo.prototype.bar = function() {};", "(new Foo).bar();" }, null, BAD_PROTECTED_PROPERTY_ACCESS); [EOL] } <line_num>: 499,505
public void testNoProtectedAccessForProperties2() { [EOL]     test(new String[] { "/** @constructor */ function Foo() {} " + "/** @protected */ Foo.prototype.bar = function() {};", "/** @constructor */ function OtherFoo() { (new Foo).bar(); }" }, null, BAD_PROTECTED_PROPERTY_ACCESS); [EOL] } <line_num>: 507,513
public void testNoProtectedAccessForProperties3() { [EOL]     test(new String[] { "/** @constructor */ function Foo() {} " + "/** @constructor \n * @extends {Foo} */ " + "function SubFoo() {}" + "/** @protected */ SubFoo.prototype.bar = function() {};", "/** @constructor \n * @extends {Foo} */ " + "function SubberFoo() { (new SubFoo).bar(); }" }, null, BAD_PROTECTED_PROPERTY_ACCESS); [EOL] } <line_num>: 515,524
public void testNoProtectedAccessForProperties4() { [EOL]     test(new String[] { "/** @constructor */ function Foo() { (new SubFoo).bar(); } ", "/** @constructor \n * @extends {Foo} */ " + "function SubFoo() {}" + "/** @protected */ SubFoo.prototype.bar = function() {};" }, null, BAD_PROTECTED_PROPERTY_ACCESS); [EOL] } <line_num>: 526,533
public void testNoProtectedAccessForProperties5() { [EOL]     test(new String[] { "var goog = {};" + "/** @constructor */ goog.Foo = function() {};" + "/** @protected */ goog.Foo.prototype.bar = function() {};", "/** @constructor */" + "goog.NotASubFoo = function() { (new goog.Foo).bar(); };" }, null, BAD_PROTECTED_PROPERTY_ACCESS); [EOL] } <line_num>: 535,543
public void testNoExceptionsWithBadConstructors1() { [EOL]     testSame(new String[] { "function Foo() { (new SubFoo).bar(); } " + "/** @constructor */ function SubFoo() {}" + "/** @protected */ SubFoo.prototype.bar = function() {};" }); [EOL] } <line_num>: 545,551
public void testNoExceptionsWithBadConstructors2() { [EOL]     testSame(new String[] { "/** @constructor */ function Foo() {} " + "Foo.prototype.bar = function() {};" + "/** @constructor */" + "function SubFoo() {}" + "/** @protected */ " + "SubFoo.prototype.bar = function() { (new Foo).bar(); };" }); [EOL] } <line_num>: 553,562
public void testGoodOverrideOfProtectedProperty() { [EOL]     testSame(new String[] { "/** @constructor */ function Foo() { } " + "/** @protected */ Foo.prototype.bar = function() {};", "/** @constructor \n * @extends {Foo} */ " + "function SubFoo() {}" + "/** @inheritDoc */ SubFoo.prototype.bar = function() {};" }); [EOL] } <line_num>: 564,572
public void testBadOverrideOfProtectedProperty() { [EOL]     test(new String[] { "/** @constructor */ function Foo() { } " + "/** @protected */ Foo.prototype.bar = function() {};", "/** @constructor \n * @extends {Foo} */ " + "function SubFoo() {}" + "/** @private */ SubFoo.prototype.bar = function() {};" }, null, VISIBILITY_MISMATCH); [EOL] } <line_num>: 574,582
public void testBadOverrideOfPrivateProperty() { [EOL]     test(new String[] { "/** @constructor */ function Foo() { } " + "/** @private */ Foo.prototype.bar = function() {};", "/** @constructor \n * @extends {Foo} */ " + "function SubFoo() {}" + "/** @protected */ SubFoo.prototype.bar = function() {};" }, null, PRIVATE_OVERRIDE); [EOL]     testSame(new String[] { "/** @constructor */ function Foo() { } " + "/** @private */ Foo.prototype.bar = function() {};", "/** @constructor \n * @extends {Foo} */ " + "function SubFoo() {}" + "/** @override \n *@suppress{visibility} */\n" + " SubFoo.prototype.bar = function() {};" }); [EOL] } <line_num>: 584,601
public void testAccessOfStaticMethodOnPrivateConstructor() { [EOL]     testSame(new String[] { "/** @constructor \n * @private */ function Foo() { } " + "Foo.create = function() { return new Foo(); };", "Foo.create()" }); [EOL] } <line_num>: 603,609
public void testAccessOfStaticMethodOnPrivateQualifiedConstructor() { [EOL]     testSame(new String[] { "var goog = {};" + "/** @constructor \n * @private */ goog.Foo = function() { }; " + "goog.Foo.create = function() { return new goog.Foo(); };", "goog.Foo.create()" }); [EOL] } <line_num>: 611,618
public void testInstanceofOfPrivateConstructor() { [EOL]     testSame(new String[] { "var goog = {};" + "/** @constructor \n * @private */ goog.Foo = function() { }; " + "goog.Foo.create = function() { return new goog.Foo(); };", "goog instanceof goog.Foo" }); [EOL] } <line_num>: 620,627
public void testOkAssignmentOfDeprecatedProperty() { [EOL]     testSame("/** @constructor */ function Foo() {" + " /** @deprecated */ this.bar = 3;" + "}"); [EOL] } <line_num>: 629,634
public void testBadReadOfDeprecatedProperty() { [EOL]     testDep("/** @constructor */ function Foo() {" + " /** @deprecated %s */ this.bar = 3;" + "  this.baz = this.bar;" + "}", "GRR", DEPRECATED_PROP, DEPRECATED_PROP_REASON); [EOL] } <line_num>: 636,645
public void testAutoboxedDeprecatedProperty() { [EOL]     test("", "/** @constructor */ function String() {}" + "/** @deprecated %s */ String.prototype.length;" + "function f() { return 'x'.length; }", "GRR", DEPRECATED_PROP_REASON, null); [EOL] } <line_num>: 647,656
public void testAutoboxedPrivateProperty() { [EOL]     test("/** @constructor */ function String() {}" + "/** @private */ String.prototype.length;", "function f() { return 'x'.length; }", "", BAD_PRIVATE_PROPERTY_ACCESS, null); [EOL] } <line_num>: 658,666
public void testNullableDeprecatedProperty() { [EOL]     testDep("/** @constructor */ function Foo() {}" + "/** @deprecated %s */ Foo.prototype.length;" + "/** @param {?Foo} x */ function f(x) { return x.length; }", "GRR", DEPRECATED_PROP, DEPRECATED_PROP_REASON); [EOL] } <line_num>: 668,676
public void testNullablePrivateProperty() { [EOL]     test(new String[] { "/** @constructor */ function Foo() {}" + "/** @private */ Foo.prototype.length;", "/** @param {?Foo} x */ function f(x) { return x.length; }" }, null, BAD_PRIVATE_PROPERTY_ACCESS); [EOL] } <line_num>: 678,684
public void testConstantProperty1() { [EOL]     test("/** @constructor */ function A() {" + "/** @const */ this.bar = 3;}" + "/** @constructor */ function B() {" + "/** @const */ this.bar = 3;this.bar += 4;}", null, CONST_PROPERTY_REASSIGNED_VALUE); [EOL] } <line_num>: 686,692
public void testConstantProperty2() { [EOL]     test("/** @constructor */ function Foo() {}" + "/** @const */ Foo.prototype.prop = 2;" + "var foo = new Foo();" + "foo.prop = 3;", null, CONST_PROPERTY_REASSIGNED_VALUE); [EOL] } <line_num>: 694,700
public void testConstantProperty3() { [EOL]     testSame("var o = { /** @const */ x: 1 };" + "o.x = 2;"); [EOL] } <line_num>: 702,705
public void testConstantProperty4() { [EOL]     test("/** @constructor */ function cat(name) {}" + "/** @const */ cat.test = 1;" + "cat.test *= 2;", null, CONST_PROPERTY_REASSIGNED_VALUE); [EOL] } <line_num>: 707,712
public void testConstantProperty5() { [EOL]     test("/** @constructor */ function Foo() { this.prop = 1;}" + "/** @const */ Foo.prototype.prop;" + "Foo.prototype.prop = 2", null, CONST_PROPERTY_REASSIGNED_VALUE); [EOL] } <line_num>: 714,719
public void testConstantProperty6() { [EOL]     test("/** @constructor */ function Foo() { this.prop = 1;}" + "/** @const */ Foo.prototype.prop = 2;", null, CONST_PROPERTY_REASSIGNED_VALUE); [EOL] } <line_num>: 721,725
public void testConstantProperty7() { [EOL]     testSame("/** @constructor */ function Foo() {} " + "Foo.prototype.bar_ = function() {};" + "/** @constructor \n * @extends {Foo} */ " + "function SubFoo() {};" + "/** @const */ /** @override */ SubFoo.prototype.bar_ = function() {};" + "SubFoo.prototype.baz = function() { this.bar_(); }"); [EOL] } <line_num>: 727,734
public void testConstantProperty8() { [EOL]     testSame("var o = { /** @const */ x: 1 };" + "var y = o.x;"); [EOL] } <line_num>: 736,739
public void testConstantProperty9() { [EOL]     testSame("/** @constructor */ function A() {" + "/** @const */ this.bar = 3;}" + "/** @constructor */ function B() {" + "this.bar = 4;}"); [EOL] } <line_num>: 741,746
public void testConstantProperty10() { [EOL]     testSame("/** @constructor */ function Foo() { this.prop = 1;}" + "/** @const */ Foo.prototype.prop;"); [EOL] } <line_num>: 748,751
public void testConstantProperty11() { [EOL]     test("/** @constructor */ function Foo() {}" + "/** @const */ Foo.prototype.bar;" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n" + " */ function SubFoo() { this.bar = 5; this.bar = 6; }", null, CONST_PROPERTY_REASSIGNED_VALUE); [EOL] } <line_num>: 753,761
public void testConstantProperty12() { [EOL]     testSame("/** @constructor */ function Foo() {}" + "/** @const */ Foo.prototype.bar;" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n" + " */ function SubFoo() { this.bar = 5; }" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n" + " */ function SubFoo2() { this.bar = 5; }"); [EOL] } <line_num>: 763,774
public void testConstantProperty13() { [EOL]     test("/** @constructor */ function Foo() {}" + "/** @const */ Foo.prototype.bar;" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n" + " */ function SubFoo() { this.bar = 5; }" + "/**\n" + " * @constructor\n" + " * @extends {SubFoo}\n" + " */ function SubSubFoo() { this.bar = 5; }", null, CONST_PROPERTY_REASSIGNED_VALUE); [EOL] } <line_num>: 776,788
public void testConstantProperty14() { [EOL]     test("/** @constructor */ function Foo() {" + "/** @const */ this.bar = 3; delete this.bar; }", null, CONST_PROPERTY_DELETED); [EOL] } <line_num>: 790,794
public void testSuppressConstantProperty() { [EOL]     testSame("/** @constructor */ function A() {" + "/** @const */ this.bar = 3;}" + "/**\n" + " * @suppress {constantProperty}\n" + " * @constructor\n" + " */ function B() {" + "/** @const */ this.bar = 3;this.bar += 4;}"); [EOL] } <line_num>: 796,804
public void testSuppressConstantProperty2() { [EOL]     testSame("/** @constructor */ function A() {" + "/** @const */ this.bar = 3;}" + "/**\n" + " * @suppress {const}\n" + " * @constructor\n" + " */ function B() {" + "/** @const */ this.bar = 3;this.bar += 4;}"); [EOL] } <line_num>: 806,814
public void testFinalClassCannotBeSubclassed() { [EOL]     test("/**\n" + " * @constructor\n" + " * @const\n" + " */ Foo = function() {};\n" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n*" + " */ Bar = function() {};", null, EXTEND_FINAL_CLASS); [EOL]     test("/**\n" + " * @constructor\n" + " * @const\n" + " */ function Foo() {};\n" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n*" + " */ function Bar() {};", null, EXTEND_FINAL_CLASS); [EOL] } <line_num>: 816,837
