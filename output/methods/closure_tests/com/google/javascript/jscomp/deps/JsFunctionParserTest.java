@Override [EOL] public void setUp() { [EOL]     errorManager = new PrintStreamErrorManager(System.err); [EOL]     parser = new JsFunctionParser(functions, errorManager); [EOL]     parser.setShortcutMode(true); [EOL] } <line_num>: 42,47
public void testParseFile() { [EOL]     final String CONTENTS = "/*" + "goog.provide('no1');*//*\n" + "goog.provide('no2');\n" + "*/goog.provide('yes1');\n" + "/* blah */goog.provide(\"yes2\")/* blah*/\n" + "goog.require('yes3'); // goog.provide('no3');\n" + "// goog.provide('no4');\n" + "goog.require(\"" + "bar.data.SuperstarAddStarThreadActionRequestDelegate\"); " + "//no new line at EOF"; [EOL]     Collection<SymbolInfo> symbols = parser.parseFile(SRC_PATH, CONTENTS); [EOL]     Iterator<SymbolInfo> i = symbols.iterator(); [EOL]     SymbolInfo symbolInfo = i.next(); [EOL]     assertEquals(symbolInfo.symbol, "yes1"); [EOL]     assertEquals(symbolInfo.functionName, "goog.provide"); [EOL]     symbolInfo = i.next(); [EOL]     assertEquals(symbolInfo.symbol, "yes2"); [EOL]     assertEquals(symbolInfo.functionName, "goog.provide"); [EOL]     symbolInfo = i.next(); [EOL]     assertEquals(symbolInfo.symbol, "yes3"); [EOL]     assertEquals(symbolInfo.functionName, "goog.require"); [EOL]     symbolInfo = i.next(); [EOL]     assertEquals(symbolInfo.symbol, "bar.data.SuperstarAddStarThreadActionRequestDelegate"); [EOL]     assertEquals(symbolInfo.functionName, "goog.require"); [EOL]     assertEquals(symbols.size(), 4); [EOL]     assertEquals(0, errorManager.getErrorCount()); [EOL]     assertEquals(0, errorManager.getWarningCount()); [EOL] } <line_num>: 55,90
public void testMultiplePerLine() { [EOL]     final String CONTENTS = "goog.provide('yes1');goog.provide('yes2');/*" + "goog.provide('no1');*/goog.provide('yes3');//goog.provide('no2');"; [EOL]     Collection<SymbolInfo> symbols = parser.parseFile(SRC_PATH, CONTENTS); [EOL]     Iterator<SymbolInfo> i = symbols.iterator(); [EOL]     SymbolInfo symbolInfo = i.next(); [EOL]     assertEquals(symbolInfo.symbol, "yes1"); [EOL]     assertEquals(symbolInfo.functionName, "goog.provide"); [EOL]     symbolInfo = i.next(); [EOL]     assertEquals(symbolInfo.symbol, "yes2"); [EOL]     assertEquals(symbolInfo.functionName, "goog.provide"); [EOL]     symbolInfo = i.next(); [EOL]     assertEquals(symbolInfo.symbol, "yes3"); [EOL]     assertEquals(symbolInfo.functionName, "goog.provide"); [EOL]     assertEquals(symbols.size(), 3); [EOL]     assertEquals(0, errorManager.getErrorCount()); [EOL]     assertEquals(0, errorManager.getWarningCount()); [EOL] } <line_num>: 92,114
public void testShortcutMode1() { [EOL]     final String CONTENTS = " // hi ! \n /* this is a comment */ " + "goog.provide('yes1');\n /* and another comment */ \n" + "goog.provide('yes2'); // include this\n" + "function foo() {}\n" + "goog.provide('no1');"; [EOL]     Collection<SymbolInfo> symbols = parser.parseFile(SRC_PATH, CONTENTS); [EOL]     Iterator<SymbolInfo> i = symbols.iterator(); [EOL]     SymbolInfo symbolInfo = i.next(); [EOL]     assertEquals(symbolInfo.symbol, "yes1"); [EOL]     assertEquals(symbolInfo.functionName, "goog.provide"); [EOL]     symbolInfo = i.next(); [EOL]     assertEquals(symbolInfo.symbol, "yes2"); [EOL]     assertEquals(symbolInfo.functionName, "goog.provide"); [EOL]     assertEquals(symbols.size(), 2); [EOL]     assertEquals(0, errorManager.getErrorCount()); [EOL]     assertEquals(0, errorManager.getWarningCount()); [EOL] } <line_num>: 116,138
public void testShortcutMode2() { [EOL]     final String CONTENTS = "/** goog.provide('no1'); \n" + " * goog.provide('no2');\n */\n" + "goog.provide('yes1');\n"; [EOL]     Collection<SymbolInfo> symbols = parser.parseFile(SRC_PATH, CONTENTS); [EOL]     Iterator<SymbolInfo> i = symbols.iterator(); [EOL]     SymbolInfo symbolInfo = i.next(); [EOL]     assertEquals(symbolInfo.symbol, "yes1"); [EOL]     assertEquals(symbolInfo.functionName, "goog.provide"); [EOL]     assertEquals(symbols.size(), 1); [EOL]     assertEquals(0, errorManager.getErrorCount()); [EOL]     assertEquals(0, errorManager.getWarningCount()); [EOL] } <line_num>: 140,155
public void testShortcutMode3() { [EOL]     final String CONTENTS = "/**\n" + " * goog.provide('no1');\n */\n" + "goog.provide('yes1');\n"; [EOL]     Collection<SymbolInfo> symbols = parser.parseFile(SRC_PATH, CONTENTS); [EOL]     Iterator<SymbolInfo> i = symbols.iterator(); [EOL]     SymbolInfo symbolInfo = i.next(); [EOL]     assertEquals(symbolInfo.symbol, "yes1"); [EOL]     assertEquals(symbolInfo.functionName, "goog.provide"); [EOL]     assertEquals(0, errorManager.getErrorCount()); [EOL]     assertEquals(0, errorManager.getWarningCount()); [EOL] } <line_num>: 157,170
