public void testSort() throws Exception { [EOL]     SimpleDependencyInfo a = new SimpleDependencyInfo("a", "a", provides(), requires("b", "c")); [EOL]     SimpleDependencyInfo b = new SimpleDependencyInfo("b", "b", provides("b"), requires("d")); [EOL]     SimpleDependencyInfo c = new SimpleDependencyInfo("c", "c", provides("c"), requires("d")); [EOL]     SimpleDependencyInfo d = new SimpleDependencyInfo("d", "d", provides("d"), requires()); [EOL]     SimpleDependencyInfo e = new SimpleDependencyInfo("e", "e", provides("e"), requires()); [EOL]     SimpleDependencyInfo f = new SimpleDependencyInfo("f", "f", provides("f"), requires()); [EOL]     assertSortedInputs(ImmutableList.of(d, b, c, a), ImmutableList.of(a, b, c, d)); [EOL]     assertSortedInputs(ImmutableList.of(d, b, c, a), ImmutableList.of(d, b, c, a)); [EOL]     assertSortedInputs(ImmutableList.of(d, c, b, a), ImmutableList.of(d, c, b, a)); [EOL]     assertSortedInputs(ImmutableList.of(d, b, c, a), ImmutableList.of(d, a, b, c)); [EOL]     assertSortedDeps(ImmutableList.of(d, b, c, a), ImmutableList.of(d, b, c, a), ImmutableList.of(a)); [EOL]     assertSortedDeps(ImmutableList.of(d, c), ImmutableList.of(d, c, b, a), ImmutableList.of(c)); [EOL]     assertSortedDeps(ImmutableList.of(d), ImmutableList.of(d, c, b, a), ImmutableList.of(d)); [EOL]     try { [EOL]         assertSortedDeps(ImmutableList.<SimpleDependencyInfo>of(), ImmutableList.of(a, b, c, d), ImmutableList.of(e)); [EOL]         fail("Expected an exception"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] } <line_num>: 33,80
public void testSort2() throws Exception { [EOL]     SimpleDependencyInfo ab = new SimpleDependencyInfo("ab", "ab", provides("a", "b"), requires("d", "f")); [EOL]     SimpleDependencyInfo c = new SimpleDependencyInfo("c", "c", provides("c"), requires("h")); [EOL]     SimpleDependencyInfo d = new SimpleDependencyInfo("d", "d", provides("d"), requires("e", "f")); [EOL]     SimpleDependencyInfo ef = new SimpleDependencyInfo("ef", "ef", provides("e", "f"), requires("g", "c")); [EOL]     SimpleDependencyInfo g = new SimpleDependencyInfo("g", "g", provides("g"), requires()); [EOL]     SimpleDependencyInfo hi = new SimpleDependencyInfo("hi", "hi", provides("h", "i"), requires()); [EOL]     assertSortedInputs(ImmutableList.of(g, hi, c, ef, d, ab), ImmutableList.of(ab, c, d, ef, g, hi)); [EOL]     assertSortedDeps(ImmutableList.of(g), ImmutableList.of(ab, c, d, ef, g, hi), ImmutableList.of(g)); [EOL]     assertSortedDeps(ImmutableList.of(g, hi, c, ef, d), ImmutableList.of(ab, c, d, ef, g, hi), ImmutableList.of(d, hi)); [EOL] } <line_num>: 82,108
public void testSort3() { [EOL]     SimpleDependencyInfo a = new SimpleDependencyInfo("a", "a", provides("a"), requires("c")); [EOL]     SimpleDependencyInfo b = new SimpleDependencyInfo("b", "b", provides("b"), requires("a")); [EOL]     SimpleDependencyInfo c = new SimpleDependencyInfo("c", "c", provides("c"), requires("b")); [EOL]     try { [EOL]         new SortedDependencies<SimpleDependencyInfo>(Lists.newArrayList(a, b, c)); [EOL]         fail("expected exception"); [EOL]     } catch (CircularDependencyException e) { [EOL]         assertEquals("a -> a", e.getMessage()); [EOL]     } [EOL] } <line_num>: 110,125
public void testSort4() throws Exception { [EOL]     SimpleDependencyInfo a = new SimpleDependencyInfo("a", "a", provides("a"), requires("a")); [EOL]     assertSortedDeps(ImmutableList.of(a), ImmutableList.of(a), ImmutableList.of(a)); [EOL] } <line_num>: 127,135
public void testSort5() throws Exception { [EOL]     SimpleDependencyInfo a = new SimpleDependencyInfo("a", "a", provides("a"), requires()); [EOL]     SimpleDependencyInfo b = new SimpleDependencyInfo("b", "b", provides("b"), requires()); [EOL]     SimpleDependencyInfo c = new SimpleDependencyInfo("c", "c", provides("c"), requires()); [EOL]     assertSortedInputs(ImmutableList.of(a, b, c), ImmutableList.of(a, b, c)); [EOL]     assertSortedInputs(ImmutableList.of(c, b, a), ImmutableList.of(c, b, a)); [EOL] } <line_num>: 137,151
private void assertSortedInputs(List<SimpleDependencyInfo> expected, List<SimpleDependencyInfo> shuffled) throws Exception { [EOL]     SortedDependencies<SimpleDependencyInfo> sorted = new SortedDependencies<SimpleDependencyInfo>(shuffled); [EOL]     assertEquals(expected, sorted.getSortedList()); [EOL] } <line_num>: 153,159
private void assertSortedDeps(List<SimpleDependencyInfo> expected, List<SimpleDependencyInfo> shuffled, List<SimpleDependencyInfo> roots) throws Exception { [EOL]     SortedDependencies<SimpleDependencyInfo> sorted = new SortedDependencies<SimpleDependencyInfo>(shuffled); [EOL]     assertEquals(expected, sorted.getSortedDependenciesOf(roots)); [EOL] } <line_num>: 161,168
private List<String> requires(String... strings) { [EOL]     return Lists.newArrayList(strings); [EOL] } <line_num>: 170,172
private List<String> provides(String... strings) { [EOL]     return Lists.newArrayList(strings); [EOL] } <line_num>: 174,176
