public DisambiguatePropertiesTest() { [EOL]     parseTypeInfo = true; [EOL] } <line_num>: 41,43
@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     super.enableNormalize(true); [EOL]     super.enableTypeCheck(CheckLevel.WARNING); [EOL] } <line_num>: 45,50
@Override [EOL] public void process(Node externs, Node root) { [EOL]     Map<String, CheckLevel> propertiesToErrorFor = Maps.<String, CheckLevel>newHashMap(); [EOL]     propertiesToErrorFor.put("foobar", CheckLevel.ERROR); [EOL]     if (runTightenTypes) { [EOL]         TightenTypes tightener = new TightenTypes(compiler); [EOL]         tightener.process(externs, root); [EOL]         lastPass = DisambiguateProperties.forConcreteTypeSystem(compiler, tightener, propertiesToErrorFor); [EOL]     } else { [EOL]         lastPass = DisambiguateProperties.forJSTypeSystem(compiler, propertiesToErrorFor); [EOL]     } [EOL]     lastPass.process(externs, root); [EOL] } <line_num>: 56,75
@Override [EOL] public CompilerPass getProcessor(final Compiler compiler) { [EOL]     return new CompilerPass() { [EOL]  [EOL]         @Override [EOL]         public void process(Node externs, Node root) { [EOL]             Map<String, CheckLevel> propertiesToErrorFor = Maps.<String, CheckLevel>newHashMap(); [EOL]             propertiesToErrorFor.put("foobar", CheckLevel.ERROR); [EOL]             if (runTightenTypes) { [EOL]                 TightenTypes tightener = new TightenTypes(compiler); [EOL]                 tightener.process(externs, root); [EOL]                 lastPass = DisambiguateProperties.forConcreteTypeSystem(compiler, tightener, propertiesToErrorFor); [EOL]             } else { [EOL]                 lastPass = DisambiguateProperties.forJSTypeSystem(compiler, propertiesToErrorFor); [EOL]             } [EOL]             lastPass.process(externs, root); [EOL]         } [EOL]     }; [EOL] } <line_num>: 52,77
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 79,82
public void testOneType1() { [EOL]     String js = "" + "/** @constructor */ function Foo() {}\n" + "Foo.prototype.a = 0;\n" + "/** @type Foo */\n" + "var F = new Foo;\n" + "F.a = 0;"; [EOL]     testSets(false, js, js, "{a=[[Foo.prototype]]}"); [EOL]     testSets(true, js, js, "{a=[[Foo.prototype]]}"); [EOL] } <line_num>: 84,93
public void testOneType2() { [EOL]     String js = "" + "/** @constructor */ function Foo() {}\n" + "Foo.prototype = {a: 0};\n" + "/** @type Foo */\n" + "var F = new Foo;\n" + "F.a = 0;"; [EOL]     String expected = "{a=[[Foo.prototype]]}"; [EOL]     testSets(false, js, js, expected); [EOL]     testSets(true, js, js, expected); [EOL] } <line_num>: 95,105
public void testOneType3() { [EOL]     String js = "" + "/** @constructor */ function Foo() {}\n" + "Foo.prototype = { get a() {return  0}," + "                  set a(b) {} };\n" + "/** @type Foo */\n" + "var F = new Foo;\n" + "F.a = 0;"; [EOL]     String expected = "{a=[[Foo.prototype]]}"; [EOL]     testSets(false, js, js, expected); [EOL]     testSets(true, js, js, expected); [EOL] } <line_num>: 107,118
public void testPrototypeAndInstance() { [EOL]     String js = "" + "/** @constructor */ function Foo() {}\n" + "Foo.prototype.a = 0;\n" + "/** @type Foo */\n" + "var F = new Foo;\n" + "F.a = 0;"; [EOL]     testSets(false, js, js, "{a=[[Foo.prototype]]}"); [EOL]     testSets(true, js, js, "{a=[[Foo.prototype]]}"); [EOL] } <line_num>: 120,129
public void testPrototypeAndInstance2() { [EOL]     String js = "" + "/** @constructor */ function Foo() {}\n" + "Foo.prototype.a = 0;\n" + "new Foo().a = 0;"; [EOL]     testSets(false, js, js, "{a=[[Foo.prototype]]}"); [EOL]     testSets(true, js, js, "{a=[[Foo.prototype]]}"); [EOL] } <line_num>: 131,138
public void testTwoTypes1() { [EOL]     String js = "" + "/** @constructor */ function Foo() {}\n" + "Foo.prototype.a = 0;" + "/** @type Foo */\n" + "var F = new Foo;\n" + "F.a = 0;" + "/** @constructor */ function Bar() {}\n" + "Bar.prototype.a = 0;" + "/** @type Bar */\n" + "var B = new Bar;\n" + "B.a = 0;"; [EOL]     String output = "" + "function Foo(){}" + "Foo.prototype.Foo_prototype$a=0;" + "var F=new Foo;" + "F.Foo_prototype$a=0;" + "function Bar(){}" + "Bar.prototype.Bar_prototype$a=0;" + "var B=new Bar;" + "B.Bar_prototype$a=0"; [EOL]     testSets(false, js, output, "{a=[[Bar.prototype], [Foo.prototype]]}"); [EOL]     testSets(true, js, output, "{a=[[Bar.prototype], [Foo.prototype]]}"); [EOL] } <line_num>: 140,163
public void testTwoTypes2() { [EOL]     String js = "" + "/** @constructor */ function Foo() {}\n" + "Foo.prototype = {a: 0};" + "/** @type Foo */\n" + "var F = new Foo;\n" + "F.a = 0;" + "/** @constructor */ function Bar() {}\n" + "Bar.prototype = {a: 0};" + "/** @type Bar */\n" + "var B = new Bar;\n" + "B.a = 0;"; [EOL]     String output = "" + "function Foo(){}" + "Foo.prototype = {Foo_prototype$a: 0};" + "var F=new Foo;" + "F.Foo_prototype$a=0;" + "function Bar(){}" + "Bar.prototype = {Bar_prototype$a: 0};" + "var B=new Bar;" + "B.Bar_prototype$a=0"; [EOL]     testSets(false, js, output, "{a=[[Bar.prototype], [Foo.prototype]]}"); [EOL]     testSets(true, js, output, "{a=[[Bar.prototype], [Foo.prototype]]}"); [EOL] } <line_num>: 165,190
public void testTwoTypes3() { [EOL]     String js = "" + "/** @constructor */ function Foo() {}\n" + "Foo.prototype = { get a() {return  0}," + "                  set a(b) {} };\n" + "/** @type Foo */\n" + "var F = new Foo;\n" + "F.a = 0;" + "/** @constructor */ function Bar() {}\n" + "Bar.prototype = { get a() {return  0}," + "                  set a(b) {} };\n" + "/** @type Bar */\n" + "var B = new Bar;\n" + "B.a = 0;"; [EOL]     String output = "" + "function Foo(){}" + "Foo.prototype = { get Foo_prototype$a() {return  0}," + "                  set Foo_prototype$a(b) {} };\n" + "var F=new Foo;" + "F.Foo_prototype$a=0;" + "function Bar(){}" + "Bar.prototype = { get Bar_prototype$a() {return  0}," + "                  set Bar_prototype$a(b) {} };\n" + "var B=new Bar;" + "B.Bar_prototype$a=0"; [EOL]     testSets(false, js, output, "{a=[[Bar.prototype], [Foo.prototype]]}"); [EOL]     testSets(true, js, output, "{a=[[Bar.prototype], [Foo.prototype]]}"); [EOL] } <line_num>: 192,221
public void testTwoFields() { [EOL]     String js = "" + "/** @constructor */ function Foo() {}\n" + "Foo.prototype.a = 0;" + "Foo.prototype.b = 0;" + "/** @type Foo */\n" + "var F = new Foo;\n" + "F.a = 0;" + "F.b = 0;"; [EOL]     String output = "function Foo(){}Foo.prototype.a=0;Foo.prototype.b=0;" + "var F=new Foo;F.a=0;F.b=0"; [EOL]     testSets(false, js, output, "{a=[[Foo.prototype]], b=[[Foo.prototype]]}"); [EOL]     testSets(true, js, output, "{a=[[Foo.prototype]], b=[[Foo.prototype]]}"); [EOL] } <line_num>: 223,236
public void testTwoSeparateFieldsTwoTypes() { [EOL]     String js = "" + "/** @constructor */ function Foo() {}\n" + "Foo.prototype.a = 0;" + "Foo.prototype.b = 0;" + "/** @type Foo */\n" + "var F = new Foo;\n" + "F.a = 0;" + "F.b = 0;" + "/** @constructor */ function Bar() {}\n" + "Bar.prototype.a = 0;" + "Bar.prototype.b = 0;" + "/** @type Bar */\n" + "var B = new Bar;\n" + "B.a = 0;" + "B.b = 0;"; [EOL]     String output = "" + "function Foo(){}" + "Foo.prototype.Foo_prototype$a=0;" + "Foo.prototype.Foo_prototype$b=0;" + "var F=new Foo;" + "F.Foo_prototype$a=0;" + "F.Foo_prototype$b=0;" + "function Bar(){}" + "Bar.prototype.Bar_prototype$a=0;" + "Bar.prototype.Bar_prototype$b=0;" + "var B=new Bar;" + "B.Bar_prototype$a=0;" + "B.Bar_prototype$b=0"; [EOL]     testSets(false, js, output, "{a=[[Bar.prototype], [Foo.prototype]]," + " b=[[Bar.prototype], [Foo.prototype]]}"); [EOL]     testSets(true, js, output, "{a=[[Bar.prototype], [Foo.prototype]]," + " b=[[Bar.prototype], [Foo.prototype]]}"); [EOL] } <line_num>: 238,271
public void testUnionType() { [EOL]     String js = "" + "/** @constructor */ function Foo() {}\n" + "Foo.prototype.a = 0;" + "/** @constructor */ function Bar() {}\n" + "Bar.prototype.a = 0;" + "/** @type {Bar|Foo} */\n" + "var B = new Bar;\n" + "B.a = 0;\n" + "B = new Foo;\n" + "B.a = 0;\n" + "/** @constructor */ function Baz() {}\n" + "Baz.prototype.a = 0;\n"; [EOL]     testSets(false, js, "{a=[[Bar.prototype, Foo.prototype], [Baz.prototype]]}"); [EOL]     testSets(true, js, "{a=[[Bar.prototype, Foo.prototype], [Baz.prototype]]}"); [EOL] } <line_num>: 273,289
public void testIgnoreUnknownType() { [EOL]     String js = "" + "/** @constructor */\n" + "function Foo() {}\n" + "Foo.prototype.blah = 3;\n" + "/** @type {Foo} */\n" + "var F = new Foo;\n" + "F.blah = 0;\n" + "var U = function() { return {} };\n" + "U().blah();"; [EOL]     String expected = "" + "function Foo(){}Foo.prototype.blah=3;var F = new Foo;F.blah=0;" + "var U=function(){return{}};U().blah()"; [EOL]     testSets(false, js, expected, "{}"); [EOL]     testSets(true, BaseJSTypeTestCase.ALL_NATIVE_EXTERN_TYPES, js, expected, "{}"); [EOL] } <line_num>: 291,307
public void testIgnoreUnknownType1() { [EOL]     String js = "" + "/** @constructor */\n" + "function Foo() {}\n" + "Foo.prototype.blah = 3;\n" + "/** @type {Foo} */\n" + "var F = new Foo;\n" + "F.blah = 0;\n" + "/** @return {Object} */\n" + "var U = function() { return {} };\n" + "U().blah();"; [EOL]     String expected = "" + "function Foo(){}Foo.prototype.blah=3;var F = new Foo;F.blah=0;" + "var U=function(){return{}};U().blah()"; [EOL]     testSets(false, js, expected, "{blah=[[Foo.prototype]]}"); [EOL]     testSets(true, BaseJSTypeTestCase.ALL_NATIVE_EXTERN_TYPES, js, expected, "{}"); [EOL] } <line_num>: 309,326
public void testIgnoreUnknownType2() { [EOL]     String js = "" + "/** @constructor */\n" + "function Foo() {}\n" + "Foo.prototype.blah = 3;\n" + "/** @type {Foo} */\n" + "var F = new Foo;\n" + "F.blah = 0;\n" + "/** @constructor */\n" + "function Bar() {}\n" + "Bar.prototype.blah = 3;\n" + "/** @return {Object} */\n" + "var U = function() { return {} };\n" + "U().blah();"; [EOL]     String expected = "" + "function Foo(){}Foo.prototype.blah=3;var F = new Foo;F.blah=0;" + "function Bar(){}Bar.prototype.blah=3;" + "var U=function(){return{}};U().blah()"; [EOL]     testSets(false, js, expected, "{}"); [EOL]     testSets(true, BaseJSTypeTestCase.ALL_NATIVE_EXTERN_TYPES, js, expected, "{}"); [EOL] } <line_num>: 328,349
public void testUnionTypeTwoFields() { [EOL]     String js = "" + "/** @constructor */ function Foo() {}\n" + "Foo.prototype.a = 0;\n" + "Foo.prototype.b = 0;\n" + "/** @constructor */ function Bar() {}\n" + "Bar.prototype.a = 0;\n" + "Bar.prototype.b = 0;\n" + "/** @type {Foo|Bar} */\n" + "var B = new Bar;\n" + "B.a = 0;\n" + "B.b = 0;\n" + "B = new Foo;\n" + "/** @constructor */ function Baz() {}\n" + "Baz.prototype.a = 0;\n" + "Baz.prototype.b = 0;\n"; [EOL]     String output = "" + "function Foo(){}" + "Foo.prototype.Bar_prototype$a=0;" + "Foo.prototype.Bar_prototype$b=0;" + "function Bar(){}" + "Bar.prototype.Bar_prototype$a=0;" + "Bar.prototype.Bar_prototype$b=0;" + "var B=new Bar;" + "B.Bar_prototype$a=0;" + "B.Bar_prototype$b=0;" + "function Baz(){}" + "Baz.prototype.a$Baz_prototype=0;" + "Baz.prototype.b$Baz_prototype=0;"; [EOL]     testSets(false, js, "{a=[[Bar.prototype, Foo.prototype], [Baz.prototype]]," + " b=[[Bar.prototype, Foo.prototype], [Baz.prototype]]}"); [EOL]     testSets(true, js, "{a=[[Bar.prototype, Foo.prototype], [Baz.prototype]]," + " b=[[Bar.prototype, Foo.prototype], [Baz.prototype]]}"); [EOL] } <line_num>: 351,384
public void testCast() { [EOL]     String js = "" + "/** @constructor */ function Foo() {}\n" + "Foo.prototype.a = 0;" + "/** @constructor */ function Bar() {}\n" + "Bar.prototype.a = 0;" + "/** @type {Foo|Bar} */\n" + "var F = new Foo;\n" + "(/** @type {Bar} */(F)).a = 0;"; [EOL]     String output = "" + "function Foo(){}Foo.prototype.Foo_prototype$a=0;" + "function Bar(){}Bar.prototype.Bar_prototype$a=0;" + "var F=new Foo;F.Bar_prototype$a=0;"; [EOL]     String ttOutput = "" + "function Foo(){}Foo.prototype.Foo_prototype$a=0;" + "function Bar(){}Bar.prototype.Bar_prototype$a=0;" + "var F=new Foo;F.Unique$1$a=0;"; [EOL]     testSets(false, js, output, "{a=[[Bar.prototype], [Foo.prototype]]}"); [EOL]     testSets(true, js, ttOutput, "{a=[[Bar.prototype], [Foo.prototype], [Unique$1]]}"); [EOL] } <line_num>: 386,406
public void testConstructorFields() { [EOL]     String js = "" + "/** @constructor */\n" + "var Foo = function() { this.a = 0; };\n" + "/** @constructor */ function Bar() {}\n" + "Bar.prototype.a = 0;" + "new Foo"; [EOL]     String output = "" + "var Foo=function(){this.Foo$a=0};" + "function Bar(){}" + "Bar.prototype.Bar_prototype$a=0;" + "new Foo"; [EOL]     String ttOutput = "" + "var Foo=function(){this.Foo_prototype$a=0};" + "function Bar(){}" + "Bar.prototype.Bar_prototype$a=0;" + "new Foo"; [EOL]     testSets(false, js, output, "{a=[[Bar.prototype], [Foo]]}"); [EOL]     testSets(true, js, ttOutput, "{a=[[Bar.prototype], [Foo.prototype]]}"); [EOL] } <line_num>: 408,427
public void testStaticProperty() { [EOL]     String js = "" + "/** @constructor */ function Foo() {} \n" + "/** @constructor */ function Bar() {}\n" + "Foo.a = 0;" + "Bar.a = 0;"; [EOL]     String output = "" + "function Foo(){}" + "function Bar(){}" + "Foo.function__new_Foo___undefined$a = 0;" + "Bar.function__new_Bar___undefined$a = 0;"; [EOL]     testSets(false, js, output, "{a=[[function (new:Bar): undefined]," + " [function (new:Foo): undefined]]}"); [EOL] } <line_num>: 429,444
public void testSupertypeWithSameField() { [EOL]     String js = "" + "/** @constructor */ function Foo() {}\n" + "Foo.prototype.a = 0;\n" + "/** @constructor\n* @extends Foo */ function Bar() {}\n" + "/** @override */\n" + "Bar.prototype.a = 0;\n" + "/** @type Bar */ var B = new Bar;\n" + "B.a = 0;" + "/** @constructor */ function Baz() {}\n" + "Baz.prototype.a = function(){};\n"; [EOL]     String output = "" + "function Foo(){}Foo.prototype.Foo_prototype$a=0;" + "function Bar(){}Bar.prototype.Foo_prototype$a=0;" + "var B = new Bar;B.Foo_prototype$a=0;" + "function Baz(){}Baz.prototype.Baz_prototype$a=function(){};"; [EOL]     String ttOutput = "" + "function Foo(){}Foo.prototype.Foo_prototype$a=0;" + "function Bar(){}Bar.prototype.Bar_prototype$a=0;" + "var B = new Bar;B.Bar_prototype$a=0;" + "function Baz(){}Baz.prototype.Baz_prototype$a=function(){};"; [EOL]     testSets(false, js, output, "{a=[[Baz.prototype], [Foo.prototype]]}"); [EOL]     testSets(true, js, ttOutput, "{a=[[Bar.prototype], [Baz.prototype], [Foo.prototype]]}"); [EOL] } <line_num>: 446,471
public void testScopedType() { [EOL]     String js = "" + "var g = {};\n" + "/** @constructor */ g.Foo = function() {}\n" + "g.Foo.prototype.a = 0;" + "/** @constructor */ g.Bar = function() {}\n" + "g.Bar.prototype.a = 0;"; [EOL]     String output = "" + "var g={};" + "g.Foo=function(){};" + "g.Foo.prototype.g_Foo_prototype$a=0;" + "g.Bar=function(){};" + "g.Bar.prototype.g_Bar_prototype$a=0;"; [EOL]     testSets(false, js, output, "{a=[[g.Bar.prototype], [g.Foo.prototype]]}"); [EOL]     testSets(true, js, output, "{a=[[g.Bar.prototype], [g.Foo.prototype]]}"); [EOL] } <line_num>: 473,488
public void testUnresolvedType() { [EOL]     String js = "" + "var g = {};" + "/** @constructor \n @extends {?} */ " + "var Foo = function() {};\n" + "Foo.prototype.a = 0;" + "/** @constructor */ var Bar = function() {};\n" + "Bar.prototype.a = 0;"; [EOL]     String output = "" + "var g={};" + "var Foo=function(){};" + "Foo.prototype.Foo_prototype$a=0;" + "var Bar=function(){};" + "Bar.prototype.Bar_prototype$a=0;"; [EOL]     testSets(false, BaseJSTypeTestCase.ALL_NATIVE_EXTERN_TYPES, js, output, "{a=[[Bar.prototype], [Foo.prototype]]}"); [EOL]     testSets(true, BaseJSTypeTestCase.ALL_NATIVE_EXTERN_TYPES, js, output, "{a=[[Bar.prototype], [Foo.prototype]]}"); [EOL] } <line_num>: 490,509
public void testNamedType() { [EOL]     String js = "" + "var g = {};" + "/** @constructor \n @extends g.Late */ var Foo = function() {}\n" + "Foo.prototype.a = 0;" + "/** @constructor */ var Bar = function() {}\n" + "Bar.prototype.a = 0;" + "/** @constructor */ g.Late = function() {}"; [EOL]     String output = "" + "var g={};" + "var Foo=function(){};" + "Foo.prototype.Foo_prototype$a=0;" + "var Bar=function(){};" + "Bar.prototype.Bar_prototype$a=0;" + "g.Late = function(){}"; [EOL]     testSets(false, js, output, "{a=[[Bar.prototype], [Foo.prototype]]}"); [EOL]     testSets(true, js, output, "{a=[[Bar.prototype], [Foo.prototype]]}"); [EOL] } <line_num>: 511,528
public void testUnknownType() { [EOL]     String js = "" + "/** @constructor */ var Foo = function() {};\n" + "/** @constructor */ var Bar = function() {};\n" + "/** @return {?} */ function fun() {}\n" + "Foo.prototype.a = fun();\n" + "fun().a;\n" + "Bar.prototype.a = 0;"; [EOL]     String ttOutput = "" + "var Foo=function(){};\n" + "var Bar=function(){};\n" + "function fun(){}\n" + "Foo.prototype.Foo_prototype$a=fun();\n" + "fun().Unique$1$a;\n" + "Bar.prototype.Bar_prototype$a=0;"; [EOL]     testSets(false, js, js, "{}"); [EOL]     testSets(true, BaseJSTypeTestCase.ALL_NATIVE_EXTERN_TYPES, js, ttOutput, "{a=[[Bar.prototype], [Foo.prototype], [Unique$1]]}"); [EOL] } <line_num>: 530,548
public void testEnum() { [EOL]     String js = "" + "/** @enum {string} */ var En = {\n" + "  A: 'first',\n" + "  B: 'second'\n" + "};\n" + "var EA = En.A;\n" + "var EB = En.B;\n" + "/** @constructor */ function Foo(){};\n" + "Foo.prototype.A = 0;\n" + "Foo.prototype.B = 0;\n"; [EOL]     String output = "" + "var En={A:'first',B:'second'};" + "var EA=En.A;" + "var EB=En.B;" + "function Foo(){};" + "Foo.prototype.Foo_prototype$A=0;" + "Foo.prototype.Foo_prototype$B=0"; [EOL]     String ttOutput = "" + "var En={A:'first',B:'second'};" + "var EA=En.A;" + "var EB=En.B;" + "function Foo(){};" + "Foo.prototype.Foo_prototype$A=0;" + "Foo.prototype.Foo_prototype$B=0"; [EOL]     testSets(false, js, output, "{A=[[Foo.prototype]], B=[[Foo.prototype]]}"); [EOL]     testSets(true, js, ttOutput, "{A=[[Foo.prototype]], B=[[Foo.prototype]]}"); [EOL] } <line_num>: 550,577
public void testEnumOfObjects() { [EOL]     String js = "" + "/** @constructor */ function Formatter() {}" + "Formatter.prototype.format = function() {};" + "/** @constructor */ function Unrelated() {}" + "Unrelated.prototype.format = function() {};" + "/** @enum {!Formatter} */ var Enum = {\n" + "  A: new Formatter()\n" + "};\n" + "Enum.A.format();\n"; [EOL]     String output = "" + "/** @constructor */ function Formatter() {}" + "Formatter.prototype.Formatter_prototype$format = function() {};" + "/** @constructor */ function Unrelated() {}" + "Unrelated.prototype.Unrelated_prototype$format = function() {};" + "/** @enum {!Formatter} */ var Enum = {\n" + "  A: new Formatter()\n" + "};\n" + "Enum.A.Formatter_prototype$format();\n"; [EOL]     testSets(false, js, output, "{format=[[Formatter.prototype], [Unrelated.prototype]]}"); [EOL] } <line_num>: 579,603
public void testEnumOfObjects2() { [EOL]     String js = "" + "/** @constructor */ function Formatter() {}" + "Formatter.prototype.format = function() {};" + "/** @constructor */ function Unrelated() {}" + "Unrelated.prototype.format = function() {};" + "/** @enum {?Formatter} */ var Enum = {\n" + "  A: new Formatter(),\n" + "  B: new Formatter()\n" + "};\n" + "function f() {\n" + "  var formatter = window.toString() ? Enum.A : Enum.B;\n" + "  formatter.format();\n" + "}"; [EOL]     String output = "" + "/** @constructor */ function Formatter() {}" + "Formatter.prototype.format = function() {};" + "/** @constructor */ function Unrelated() {}" + "Unrelated.prototype.format = function() {};" + "/** @enum {?Formatter} */ var Enum = {\n" + "  A: new Formatter(),\n" + "  B: new Formatter()\n" + "};\n" + "function f() {\n" + "  var formatter = window.toString() ? Enum.A : Enum.B;\n" + "  formatter.format();\n" + "}"; [EOL]     testSets(false, js, output, "{}"); [EOL] } <line_num>: 605,633
public void testEnumOfObjects3() { [EOL]     String js = "" + "/** @constructor */ function Formatter() {}" + "Formatter.prototype.format = function() {};" + "/** @constructor */ function Unrelated() {}" + "Unrelated.prototype.format = function() {};" + "/** @enum {!Formatter} */ var Enum = {\n" + "  A: new Formatter(),\n" + "  B: new Formatter()\n" + "};\n" + "/** @enum {!Enum} */ var SubEnum = {\n" + "  C: Enum.A\n" + "};\n" + "function f() {\n" + "  var formatter = SubEnum.C\n" + "  formatter.format();\n" + "}"; [EOL]     String output = "" + "/** @constructor */ function Formatter() {}" + "Formatter.prototype.Formatter_prototype$format = function() {};" + "/** @constructor */ function Unrelated() {}" + "Unrelated.prototype.Unrelated_prototype$format = function() {};" + "/** @enum {!Formatter} */ var Enum = {\n" + "  A: new Formatter(),\n" + "  B: new Formatter()\n" + "};\n" + "/** @enum {!Enum} */ var SubEnum = {\n" + "  C: Enum.A\n" + "};\n" + "function f() {\n" + "  var formatter = SubEnum.C\n" + "  formatter.Formatter_prototype$format();\n" + "}"; [EOL]     testSets(false, js, output, "{format=[[Formatter.prototype], [Unrelated.prototype]]}"); [EOL] } <line_num>: 635,670
public void testUntypedExterns() { [EOL]     String externs = BaseJSTypeTestCase.ALL_NATIVE_EXTERN_TYPES + "var window;" + "window.alert = function() {x};"; [EOL]     String js = "" + "/** @constructor */ function Foo() {}\n" + "Foo.prototype.a = 0;\n" + "Foo.prototype.alert = 0;\n" + "Foo.prototype.window = 0;\n" + "/** @constructor */ function Bar() {}\n" + "Bar.prototype.a = 0;\n" + "Bar.prototype.alert = 0;\n" + "Bar.prototype.window = 0;\n" + "window.alert();"; [EOL]     String output = "" + "function Foo(){}" + "Foo.prototype.Foo_prototype$a=0;" + "Foo.prototype.alert=0;" + "Foo.prototype.Foo_prototype$window=0;" + "function Bar(){}" + "Bar.prototype.Bar_prototype$a=0;" + "Bar.prototype.alert=0;" + "Bar.prototype.Bar_prototype$window=0;" + "window.alert();"; [EOL]     testSets(false, externs, js, output, "{a=[[Bar.prototype], [Foo.prototype]]" + ", window=[[Bar.prototype], [Foo.prototype]]}"); [EOL]     testSets(true, externs, js, output, "{a=[[Bar.prototype], [Foo.prototype]]," + " window=[[Bar.prototype], [Foo.prototype]]}"); [EOL] } <line_num>: 672,702
public void testUnionTypeInvalidation() { [EOL]     String externs = "" + "/** @constructor */ function Baz() {}" + "Baz.prototype.a"; [EOL]     String js = "" + "/** @constructor */ function Ind() {this.a=0}\n" + "/** @constructor */ function Foo() {}\n" + "Foo.prototype.a = 0;\n" + "/** @constructor */ function Bar() {}\n" + "Bar.prototype.a = 0;\n" + "/** @type {Foo|Bar} */\n" + "var F = new Foo;\n" + "F.a = 1\n;" + "F = new Bar;\n" + "/** @type {Baz} */\n" + "var Z = new Baz;\n" + "Z.a = 1\n;" + "/** @type {Bar|Baz} */\n" + "var B = new Baz;\n" + "B.a = 1;\n" + "B = new Bar;\n"; [EOL]     String output = "" + "function Ind() { this.Ind$a = 0; }" + "function Foo() {}" + "Foo.prototype.a = 0;" + "function Bar() {}" + "Bar.prototype.a = 0;" + "var F = new Foo;" + "F.a = 1;" + "F = new Bar;" + "var Z = new Baz;" + "Z.a = 1;" + "var B = new Baz;" + "B.a = 1;" + "B = new Bar;"; [EOL]     String ttOutput = "" + "function Ind() { this.Unique$1$a = 0; }" + "function Foo() {}" + "Foo.prototype.a = 0;" + "function Bar() {}" + "Bar.prototype.a = 0;" + "var F = new Foo;" + "F.a = 1;" + "F = new Bar;" + "var Z = new Baz;" + "Z.a = 1;" + "var B = new Baz;" + "B.a = 1;" + "B = new Bar;"; [EOL]     testSets(false, externs, js, output, "{a=[[Ind]]}"); [EOL]     testSets(true, externs, js, ttOutput, "{a=[[Unique$1]]}"); [EOL] } <line_num>: 704,757
public void testUnionAndExternTypes() { [EOL]     String externs = "" + "/** @constructor */ function Foo() { }" + "Foo.prototype.a = 4;\n"; [EOL]     String js = "" + "/** @constructor */ function Bar() { this.a = 2; }\n" + "/** @constructor */ function Baz() { this.a = 3; }\n" + "/** @constructor */ function Buz() { this.a = 4; }\n" + "/** @constructor */ function T1() { this.a = 3; }\n" + "/** @constructor */ function T2() { this.a = 3; }\n" + "/** @type {Bar|Baz} */ var b;\n" + "/** @type {Baz|Buz} */ var c;\n" + "/** @type {Buz|Foo} */ var d;\n" + "b.a = 5; c.a = 6; d.a = 7;"; [EOL]     String output = "" + "/** @constructor */ function Bar() { this.a = 2; }\n" + "/** @constructor */ function Baz() { this.a = 3; }\n" + "/** @constructor */ function Buz() { this.a = 4; }\n" + "/** @constructor */ function T1() { this.T1$a = 3; }\n" + "/** @constructor */ function T2() { this.T2$a = 3; }\n" + "/** @type {Bar|Baz} */ var b;\n" + "/** @type {Baz|Buz} */ var c;\n" + "/** @type {Buz|Foo} */ var d;\n" + "b.a = 5; c.a = 6; d.a = 7;"; [EOL]     testSets(false, externs, js, output, "{a=[[T1], [T2]]}"); [EOL] } <line_num>: 759,787
public void testTypedExterns() { [EOL]     String externs = "" + "/** @constructor */ function Window() {};\n" + "Window.prototype.alert;" + "/** @type {Window} */" + "var window;"; [EOL]     String js = "" + "/** @constructor */ function Foo() {}\n" + "Foo.prototype.alert = 0;\n" + "window.alert('blarg');"; [EOL]     String output = "" + "function Foo(){}" + "Foo.prototype.Foo_prototype$alert=0;" + "window.alert('blarg');"; [EOL]     testSets(false, externs, js, output, "{alert=[[Foo.prototype]]}"); [EOL]     testSets(true, externs, js, output, "{alert=[[Foo.prototype]]}"); [EOL] } <line_num>: 789,805
public void testSubtypesWithSameField() { [EOL]     String js = "" + "/** @constructor */ function Top() {}\n" + "/** @constructor \n@extends Top*/ function Foo() {}\n" + "Foo.prototype.a;\n" + "/** @constructor \n@extends Top*/ function Bar() {}\n" + "Bar.prototype.a;\n" + "/** @param {Top} top */" + "function foo(top) {\n" + "  var x = top.a;\n" + "}\n" + "foo(new Foo);\n" + "foo(new Bar);\n"; [EOL]     testSets(false, js, "{}"); [EOL]     testSets(true, js, "{a=[[Bar.prototype, Foo.prototype]]}"); [EOL] } <line_num>: 807,822
public void testSupertypeReferenceOfSubtypeProperty() { [EOL]     String externs = "" + "/** @constructor */ function Ext() {}" + "Ext.prototype.a;"; [EOL]     String js = "" + "/** @constructor */ function Foo() {}\n" + "/** @constructor \n@extends Foo*/ function Bar() {}\n" + "Bar.prototype.a;\n" + "/** @param {Foo} foo */" + "function foo(foo) {\n" + "  var x = foo.a;\n" + "}\n"; [EOL]     String result = "" + "function Foo() {}\n" + "function Bar() {}\n" + "Bar.prototype.Bar_prototype$a;\n" + "function foo(foo$$1) {\n" + "  var x = foo$$1.Bar_prototype$a;\n" + "}\n"; [EOL]     testSets(false, externs, js, result, "{a=[[Bar.prototype]]}"); [EOL] } <line_num>: 824,844
public void testObjectLiteralNotRenamed() { [EOL]     String js = "" + "var F = {a:'a', b:'b'};" + "F.a = 'z';"; [EOL]     testSets(false, js, js, "{}"); [EOL]     testSets(true, js, js, "{}"); [EOL] } <line_num>: 846,852
public void testObjectLiteralReflected() { [EOL]     String js = "" + "var goog = {};" + "goog.reflect = {};" + "goog.reflect.object = function(x, y) { return y; };" + "/** @constructor */ function F() {}" + "/** @type {number} */ F.prototype.foo = 3;" + "/** @constructor */ function G() {}" + "/** @type {number} */ G.prototype.foo = 3;" + "goog.reflect.object(F, {foo: 5});"; [EOL]     String result = "" + "var goog = {};" + "goog.reflect = {};" + "goog.reflect.object = function(x, y) { return y; };" + "function F() {}" + "F.prototype.F_prototype$foo = 3;" + "function G() {}" + "G.prototype.G_prototype$foo = 3;" + "goog.reflect.object(F, {F_prototype$foo: 5});"; [EOL]     testSets(false, js, result, "{foo=[[F.prototype], [G.prototype]]}"); [EOL]     testSets(true, js, result, "{foo=[[F.prototype], [G.prototype]]}"); [EOL] } <line_num>: 854,875
public void testObjectLiteralLends() { [EOL]     String js = "" + "var mixin = function(x) { return x; };" + "/** @constructor */ function F() {}" + "/** @type {number} */ F.prototype.foo = 3;" + "/** @constructor */ function G() {}" + "/** @type {number} */ G.prototype.foo = 3;" + "mixin(/** @lends {F.prototype} */ ({foo: 5}));"; [EOL]     String result = "" + "var mixin = function(x) { return x; };" + "function F() {}" + "F.prototype.F_prototype$foo = 3;" + "function G() {}" + "G.prototype.G_prototype$foo = 3;" + "mixin(/** @lends {F.prototype} */ ({F_prototype$foo: 5}));"; [EOL]     testSets(false, js, result, "{foo=[[F.prototype], [G.prototype]]}"); [EOL]     testSets(true, js, result, "{foo=[[F.prototype], [G.prototype]]}"); [EOL] } <line_num>: 877,894
public void testClosureInherits() { [EOL]     String js = "" + "var goog = {};" + "/* @param {Function} childCtor Child class.\n" + " * @param {Function} parentCtor Parent class. */\n" + "goog.inherits = function(childCtor, parentCtor) {\n" + "  /** @constructor */\n" + "  function tempCtor() {};\n" + "  tempCtor.prototype = parentCtor.prototype;\n" + "  childCtor.superClass_ = parentCtor.prototype;\n" + "  childCtor.prototype = new tempCtor();\n" + "  childCtor.prototype.constructor = childCtor;\n" + "};" + "/** @constructor */ function Top() {}\n" + "Top.prototype.f = function() {};" + "/** @constructor \n@extends Top*/ function Foo() {}\n" + "goog.inherits(Foo, Top);\n" + "/** @override */\n" + "Foo.prototype.f = function() {" + "  Foo.superClass_.f();" + "};\n" + "/** @constructor \n* @extends Foo */ function Bar() {}\n" + "goog.inherits(Bar, Foo);\n" + "/** @override */\n" + "Bar.prototype.f = function() {" + "  Bar.superClass_.f();" + "};\n" + "(new Bar).f();\n"; [EOL]     testSets(false, js, "{f=[[Top.prototype]]}"); [EOL]     testSets(true, js, "{constructor=[[Bar.prototype, Foo.prototype]], " + "f=[[Bar.prototype], [Foo.prototype], [Top.prototype]]}"); [EOL] } <line_num>: 896,927
public void testSkipNativeFunctionMethod() { [EOL]     String externs = "" + "/** @constructor \n @param {*} var_args */" + "function Function(var_args) {}" + "Function.prototype.call = function() {};"; [EOL]     String js = "" + "/** @constructor */ function Foo(){};" + "/** @constructor\n @extends Foo */" + "function Bar() { Foo.call(this); };"; [EOL]     testSame(externs, js, null); [EOL] } <line_num>: 929,939
public void testSkipNativeObjectMethod() { [EOL]     String externs = "" + "/** @constructor \n @param {*} opt_v */ function Object(opt_v) {}" + "Object.prototype.hasOwnProperty;"; [EOL]     String js = "" + "/** @constructor */ function Foo(){};" + "(new Foo).hasOwnProperty('x');"; [EOL]     testSets(false, externs, js, js, "{}"); [EOL]     testSets(true, externs, js, js, "{}"); [EOL] } <line_num>: 941,950
public void testExtendNativeType() { [EOL]     String externs = "" + "/** @constructor \n @return {string} */" + "function Date(opt_1, opt_2, opt_3, opt_4, opt_5, opt_6, opt_7) {}" + "/** @override */ Date.prototype.toString = function() {}"; [EOL]     String js = "" + "/** @constructor\n @extends {Date} */ function SuperDate() {};\n" + "(new SuperDate).toString();"; [EOL]     testSets(true, externs, js, js, "{}"); [EOL]     testSets(false, externs, js, js, "{}"); [EOL] } <line_num>: 952,962
public void testStringFunction() { [EOL]     String externs = "/**@constructor\n@param {*} opt_str \n @return {string}*/" + "function String(opt_str) {};\n" + "/** @override \n @return {string} */\n" + "String.prototype.toString = function() { };\n"; [EOL]     String js = "" + "/** @constructor */ function Foo() {};\n" + "Foo.prototype.foo = function() {};\n" + "String.prototype.foo = function() {};\n" + "var a = 'str'.toString().foo();\n"; [EOL]     String output = "" + "function Foo() {};\n" + "Foo.prototype.Foo_prototype$foo = function() {};\n" + "String.prototype.String_prototype$foo = function() {};\n" + "var a = 'str'.toString().String_prototype$foo();\n"; [EOL]     testSets(false, externs, js, output, "{foo=[[Foo.prototype], [String.prototype]]}"); [EOL]     testSets(true, externs, js, output, "{foo=[[Foo.prototype], [String.prototype]]}"); [EOL] } <line_num>: 964,986
public void testUnusedTypeInExterns() { [EOL]     String externs = "" + "/** @constructor */ function Foo() {};\n" + "Foo.prototype.a"; [EOL]     String js = "" + "/** @constructor */ function Bar() {};\n" + "Bar.prototype.a;" + "/** @constructor */ function Baz() {};\n" + "Baz.prototype.a;"; [EOL]     String output = "" + "/** @constructor */ function Bar() {};\n" + "Bar.prototype.Bar_prototype$a;" + "/** @constructor */ function Baz() {};\n" + "Baz.prototype.Baz_prototype$a"; [EOL]     testSets(false, externs, js, output, "{a=[[Bar.prototype], [Baz.prototype]]}"); [EOL]     testSets(true, externs, js, output, "{a=[[Bar.prototype], [Baz.prototype]]}"); [EOL] } <line_num>: 988,1006
public void testInterface() { [EOL]     String js = "" + "/** @interface */ function I() {};\n" + "I.prototype.a;\n" + "/** @constructor \n @implements I */ function Foo() {};\n" + "Foo.prototype.a;\n" + "/** @type I */\n" + "var F = new Foo;" + "var x = F.a;"; [EOL]     testSets(false, js, "{a=[[Foo.prototype, I.prototype]]}"); [EOL]     testSets(true, js, "{a=[[Foo.prototype], [I.prototype]]}"); [EOL] } <line_num>: 1008,1019
public void testInterfaceOfSuperclass() { [EOL]     String js = "" + "/** @interface */ function I() {};\n" + "I.prototype.a;\n" + "/** @constructor \n @implements I */ function Foo() {};\n" + "Foo.prototype.a;\n" + "/** @constructor \n @extends Foo */ function Bar() {};\n" + "Bar.prototype.a;\n" + "/** @type Bar */\n" + "var B = new Bar;" + "B.a = 0"; [EOL]     testSets(false, js, "{a=[[Foo.prototype, I.prototype]]}"); [EOL]     testSets(true, js, "{a=[[Bar.prototype], [Foo.prototype], [I.prototype]]}"); [EOL] } <line_num>: 1021,1035
public void testTwoInterfacesWithSomeInheritance() { [EOL]     String js = "" + "/** @interface */ function I() {};\n" + "I.prototype.a;\n" + "/** @interface */ function I2() {};\n" + "I2.prototype.a;\n" + "/** @constructor \n @implements I */ function Foo() {};\n" + "Foo.prototype.a;\n" + "/** @constructor \n @extends Foo \n @implements I2*/\n" + "function Bar() {};\n" + "Bar.prototype.a;\n" + "/** @type Bar */\n" + "var B = new Bar;" + "B.a = 0"; [EOL]     testSets(false, js, "{a=[[Foo.prototype, I.prototype, I2.prototype]]}"); [EOL]     testSets(true, js, "{a=[[Bar.prototype], [Foo.prototype], " + "[I.prototype], [I2.prototype]]}"); [EOL] } <line_num>: 1037,1054
public void testInvalidatingInterface() { [EOL]     String js = "" + "/** @interface */ function I2() {};\n" + "I2.prototype.a;\n" + "/** @constructor */ function Bar() {}\n" + "/** @type I */\n" + "var i = new Bar;\n" + "/** @constructor \n @implements I \n @implements I2 */" + "function Foo() {};\n" + "/** @override */\n" + "Foo.prototype.a = 0;\n" + "(new Foo).a = 0;" + "/** @interface */ function I() {};\n" + "I.prototype.a;\n"; [EOL]     testSets(false, js, "{}", TypeValidator.TYPE_MISMATCH_WARNING); [EOL]     testSets(true, js, "{}", TypeValidator.TYPE_MISMATCH_WARNING); [EOL] } <line_num>: 1056,1072
public void testMultipleInterfaces() { [EOL]     String js = "" + "/** @interface */ function I() {};\n" + "/** @interface */ function I2() {};\n" + "I2.prototype.a;\n" + "/** @constructor \n @implements I \n @implements I2 */" + "function Foo() {};\n" + "/** @override */" + "Foo.prototype.a = 0;\n" + "(new Foo).a = 0"; [EOL]     testSets(false, js, "{a=[[Foo.prototype, I2.prototype]]}"); [EOL]     testSets(true, js, "{a=[[Foo.prototype], [I2.prototype]]}"); [EOL] } <line_num>: 1074,1086
public void testInterfaceWithSupertypeImplementor() { [EOL]     String js = "" + "/** @interface */ function C() {}\n" + "C.prototype.foo = function() {};\n" + "/** @constructor */ function A (){}\n" + "A.prototype.foo = function() {};\n" + "/** @constructor \n @implements {C} \n @extends {A} */\n" + "function B() {}\n" + "/** @type {C} */ var b = new B();\n" + "b.foo();\n"; [EOL]     testSets(false, js, "{foo=[[A.prototype, C.prototype]]}"); [EOL]     testSets(true, js, "{foo=[[A.prototype], [C.prototype]]}"); [EOL] } <line_num>: 1088,1100
public void testSuperInterface() { [EOL]     String js = "" + "/** @interface */ function I() {};\n" + "I.prototype.a;\n" + "/** @interface \n @extends I */ function I2() {};\n" + "/** @constructor \n @implements I2 */" + "function Foo() {};\n" + "/** @override */\n" + "Foo.prototype.a = 0;\n" + "(new Foo).a = 0"; [EOL]     testSets(false, js, "{a=[[Foo.prototype, I.prototype]]}"); [EOL]     testSets(true, js, "{a=[[Foo.prototype], [I.prototype]]}"); [EOL] } <line_num>: 1102,1114
public void testInterfaceUnionWithCtor() { [EOL]     String js = "" + "/** @interface */ function I() {};\n" + "/** @type {!Function} */ I.prototype.addEventListener;\n" + "/** @constructor \n * @implements {I} */ function Impl() {};\n" + "/** @type {!Function} */ Impl.prototype.addEventListener;" + "/** @constructor */ function C() {};\n" + "/** @type {!Function} */ C.prototype.addEventListener;" + "/** @param {C|I} x */" + "function f(x) { x.addEventListener(); };\n" + "f(new C()); f(new Impl());"; [EOL]     testSets(false, js, js, "{addEventListener=[[C.prototype, I.prototype, Impl.prototype]]}"); [EOL]     String tightenedOutput = "" + "function I() {};\n" + "I.prototype.I_prototype$addEventListener;\n" + "function Impl() {};\n" + "Impl.prototype.C_prototype$addEventListener;" + "function C() {};\n" + "C.prototype.C_prototype$addEventListener;" + "/** @param {C|I} x */" + "function f(x) { x.C_prototype$addEventListener(); };\n" + "f(new C()); f(new Impl());"; [EOL]     testSets(true, js, tightenedOutput, "{addEventListener=[[C.prototype, Impl.prototype], [I.prototype]]}"); [EOL] } <line_num>: 1116,1146
public void testExternInterfaceUnionWithCtor() { [EOL]     String externs = "" + "/** @interface */ function I() {};\n" + "/** @type {!Function} */ I.prototype.addEventListener;\n" + "/** @constructor \n * @implements {I} */ function Impl() {};\n" + "/** @type {!Function} */ Impl.prototype.addEventListener;"; [EOL]     String js = "" + "/** @constructor */ function C() {};\n" + "/** @type {!Function} */ C.prototype.addEventListener;" + "/** @param {C|I} x */" + "function f(x) { x.addEventListener(); };\n" + "f(new C()); f(new Impl());"; [EOL]     testSets(false, externs, js, js, "{}"); [EOL]     testSets(true, externs, js, js, "{}"); [EOL] } <line_num>: 1148,1164
public void testMismatchInvalidation() { [EOL]     String js = "" + "/** @constructor */ function Foo() {}\n" + "Foo.prototype.a = 0;\n" + "/** @constructor */ function Bar() {}\n" + "Bar.prototype.a = 0;\n" + "/** @type Foo */\n" + "var F = new Bar;\n" + "F.a = 0;"; [EOL]     testSets(false, "", js, js, "{}", TypeValidator.TYPE_MISMATCH_WARNING, "initializing variable\n" + "found   : Bar\n" + "required: (Foo|null)"); [EOL]     testSets(true, "", js, js, "{}", TypeValidator.TYPE_MISMATCH_WARNING, "initializing variable\n" + "found   : Bar\n" + "required: (Foo|null)"); [EOL] } <line_num>: 1170,1188
public void testBadCast() { [EOL]     String js = "/** @constructor */ function Foo() {};\n" + "Foo.prototype.a = 0;\n" + "/** @constructor */ function Bar() {};\n" + "Bar.prototype.a = 0;\n" + "var a = /** @type {!Foo} */ (new Bar);\n" + "a.a = 4;"; [EOL]     testSets(false, "", js, js, "{}", TypeValidator.INVALID_CAST, "invalid cast - must be a subtype or supertype\n" + "from: Bar\n" + "to  : Foo"); [EOL] } <line_num>: 1190,1202
public void testDeterministicNaming() { [EOL]     String js = "/** @constructor */function A() {}\n" + "/** @return {string} */A.prototype.f = function() {return 'a';};\n" + "/** @constructor */function B() {}\n" + "/** @return {string} */B.prototype.f = function() {return 'b';};\n" + "/** @constructor */function C() {}\n" + "/** @return {string} */C.prototype.f = function() {return 'c';};\n" + "/** @type {A|B} */var ab = 1 ? new B : new A;\n" + "/** @type {string} */var n = ab.f();\n"; [EOL]     String output = "function A() {}\n" + "A.prototype.A_prototype$f = function() { return'a'; };\n" + "function B() {}\n" + "B.prototype.A_prototype$f = function() { return'b'; };\n" + "function C() {}\n" + "C.prototype.C_prototype$f = function() { return'c'; };\n" + "var ab = 1 ? new B : new A; var n = ab.A_prototype$f();\n"; [EOL]     for (int i = 0; i < 5; i++) { [EOL]         testSets(false, js, output, "{f=[[A.prototype, B.prototype], [C.prototype]]}"); [EOL]         testSets(true, js, output, "{f=[[A.prototype, B.prototype], [C.prototype]]}"); [EOL]     } [EOL] } <line_num>: 1204,1231
public void testObjectLiteral() { [EOL]     String js = "/** @constructor */ function Foo() {}\n" + "Foo.prototype.a;\n" + "/** @constructor */ function Bar() {}\n" + "Bar.prototype.a;\n" + "var F = /** @type {Foo} */({ a: 'a' });\n"; [EOL]     String output = "function Foo() {}\n" + "Foo.prototype.Foo_prototype$a;\n" + "function Bar() {}\n" + "Bar.prototype.Bar_prototype$a;\n" + "var F = { Foo_prototype$a: 'a' };\n"; [EOL]     testSets(false, js, output, "{a=[[Bar.prototype], [Foo.prototype]]}"); [EOL]     testSets(true, js, output, "{a=[[Bar.prototype], [Foo.prototype]]}"); [EOL] } <line_num>: 1233,1248
public void testCustomInherits() { [EOL]     String js = "Object.prototype.inheritsFrom = function(shuper) {\n" + "  /** @constructor */\n" + "  function Inheriter() { }\n" + "  Inheriter.prototype = shuper.prototype;\n" + "  this.prototype = new Inheriter();\n" + "  this.superConstructor = shuper;\n" + "};\n" + "function Foo(var1, var2, strength) {\n" + "  Foo.superConstructor.call(this, strength);\n" + "}" + "Foo.inheritsFrom(Object);"; [EOL]     String externs = "" + "function Function(var_args) {}" + "/** @return {*} */Function.prototype.call = function(var_args) {};"; [EOL]     testSets(false, externs, js, js, "{}"); [EOL] } <line_num>: 1250,1268
public void testSkipNativeFunctionStaticProperty() { [EOL]     String js = "" + "/** @param {!Function} ctor */\n" + "function addSingletonGetter(ctor) { ctor.a; }\n" + "/** @constructor */ function Foo() {}\n" + "Foo.a = 0;" + "/** @constructor */ function Bar() {}\n" + "Bar.a = 0;"; [EOL]     String output = "" + "function addSingletonGetter(ctor){ctor.a}" + "function Foo(){}" + "Foo.a=0;" + "function Bar(){}" + "Bar.a=0"; [EOL]     testSets(false, js, output, "{}"); [EOL] } <line_num>: 1270,1287
public void testErrorOnProtectedProperty() { [EOL]     test("function addSingletonGetter(foo) { foo.foobar = 'a'; };", null, DisambiguateProperties.Warnings.INVALIDATION); [EOL]     assertTrue(getLastCompiler().getErrors()[0].toString().contains("foobar")); [EOL] } <line_num>: 1289,1293
public void testMismatchForbiddenInvalidation() { [EOL]     test("/** @constructor */ function F() {}" + "/** @type {number} */ F.prototype.foobar = 3;" + "/** @return {number} */ function g() { return new F(); }", null, DisambiguateProperties.Warnings.INVALIDATION); [EOL]     assertTrue(getLastCompiler().getErrors()[0].toString().contains("Consider fixing errors")); [EOL] } <line_num>: 1295,1303
public void runFindHighestTypeInChain() { [EOL]     DisambiguateProperties.forJSTypeSystem(new Compiler(), Maps.<String, CheckLevel>newHashMap()).getTypeWithProperty("no", new JSTypeRegistry(new TestErrorReporter(null, null)).getNativeType(JSTypeNative.OBJECT_PROTOTYPE)); [EOL] } <line_num>: 1305,1312
@SuppressWarnings("unchecked") [EOL] private void testSets(boolean runTightenTypes, String js, String expected, String fieldTypes) { [EOL]     this.runTightenTypes = runTightenTypes; [EOL]     test(js, expected); [EOL]     assertEquals(fieldTypes, mapToString(lastPass.getRenamedTypesForTesting())); [EOL] } <line_num>: 1314,1321
@SuppressWarnings("unchecked") [EOL] private void testSets(boolean runTightenTypes, String externs, String js, String expected, String fieldTypes) { [EOL]     testSets(runTightenTypes, externs, js, expected, fieldTypes, null, null); [EOL] } <line_num>: 1323,1327
@SuppressWarnings("unchecked") [EOL] private void testSets(boolean runTightenTypes, String externs, String js, String expected, String fieldTypes, DiagnosticType warning, String description) { [EOL]     this.runTightenTypes = runTightenTypes; [EOL]     test(externs, js, expected, null, warning, description); [EOL]     assertEquals(fieldTypes, mapToString(lastPass.getRenamedTypesForTesting())); [EOL] } <line_num>: 1329,1337
private void testSets(boolean runTightenTypes, String js, String fieldTypes) { [EOL]     this.runTightenTypes = runTightenTypes; [EOL]     test(js, null, null, null); [EOL]     assertEquals(fieldTypes, mapToString(lastPass.getRenamedTypesForTesting())); [EOL] } <line_num>: 1346,1350
private void testSets(boolean runTightenTypes, String js, String fieldTypes, DiagnosticType warning) { [EOL]     this.runTightenTypes = runTightenTypes; [EOL]     test(js, null, null, warning); [EOL]     assertEquals(fieldTypes, mapToString(lastPass.getRenamedTypesForTesting())); [EOL] } <line_num>: 1359,1364
private <T> String mapToString(Multimap<String, Collection<T>> map) { [EOL]     TreeMap<String, String> retMap = Maps.newTreeMap(); [EOL]     for (String key : map.keySet()) { [EOL]         TreeSet<String> treeSet = Sets.newTreeSet(); [EOL]         for (Collection<T> collection : map.get(key)) { [EOL]             Set<String> subSet = Sets.newTreeSet(); [EOL]             for (T type : collection) { [EOL]                 subSet.add(type.toString()); [EOL]             } [EOL]             treeSet.add(subSet.toString()); [EOL]         } [EOL]         retMap.put(key, treeSet.toString()); [EOL]     } [EOL]     return retMap.toString(); [EOL] } <line_num>: 1367,1381
