public void testConstructorCycle() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.checkTypes = true; [EOL]     test(options, "/** @return {function()} */ var AsyncTestCase = function() {};\n" + "/**\n" + " * @constructor\n" + " */ Foo = /** @type {function(new:Foo)} */ (AyncTestCase());", RhinoErrorReporter.PARSE_ERROR); [EOL] } <line_num>: 41,50
public void testBug1949424() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.collapseProperties = true; [EOL]     options.closurePass = true; [EOL]     test(options, CLOSURE_BOILERPLATE + "goog.provide('FOO'); FOO.bar = 3;", CLOSURE_COMPILED + "var FOO$bar = 3;"); [EOL] } <line_num>: 52,58
public void testBug1949424_v2() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.collapseProperties = true; [EOL]     options.closurePass = true; [EOL]     test(options, CLOSURE_BOILERPLATE + "goog.provide('FOO.BAR'); FOO.BAR = 3;", CLOSURE_COMPILED + "var FOO$BAR = 3;"); [EOL] } <line_num>: 60,66
public void testBug1956277() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.collapseProperties = true; [EOL]     options.inlineVariables = true; [EOL]     test(options, "var CONST = {}; CONST.bar = null;" + "function f(url) { CONST.bar = url; }", "var CONST$bar = null; function f(url) { CONST$bar = url; }"); [EOL] } <line_num>: 68,75
public void testBug1962380() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.collapseProperties = true; [EOL]     options.inlineVariables = true; [EOL]     options.generateExports = true; [EOL]     test(options, CLOSURE_BOILERPLATE + "/** @export */ goog.CONSTANT = 1;" + "var x = goog.CONSTANT;", "(function() {})('goog.CONSTANT', 1);" + "var x = 1;"); [EOL] } <line_num>: 77,87
public void testBug2410122() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.generateExports = true; [EOL]     options.closurePass = true; [EOL]     test(options, "var goog = {};" + "function F() {}" + "/** @export */ function G() { goog.base(this); } " + "goog.inherits(G, F);", "var goog = {};" + "function F() {}" + "function G() { F.call(this); } " + "goog.inherits(G, F); goog.exportSymbol('G', G);"); [EOL] } <line_num>: 89,102
public void testIssue90() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.foldConstants = true; [EOL]     options.inlineVariables = true; [EOL]     options.removeDeadCode = true; [EOL]     test(options, "var x; x && alert(1);", ""); [EOL] } <line_num>: 104,112
public void testClosurePassOff() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.closurePass = false; [EOL]     testSame(options, "var goog = {}; goog.require = function(x) {}; goog.require('foo');"); [EOL]     testSame(options, "var goog = {}; goog.getCssName = function(x) {};" + "goog.getCssName('foo');"); [EOL] } <line_num>: 114,124
public void testClosurePassOn() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.closurePass = true; [EOL]     test(options, "var goog = {}; goog.require = function(x) {}; goog.require('foo');", ProcessClosurePrimitives.MISSING_PROVIDE_ERROR); [EOL]     test(options, "/** @define {boolean} */ var COMPILED = false;" + "var goog = {}; goog.getCssName = function(x) {};" + "goog.getCssName('foo');", "var COMPILED = true;" + "var goog = {}; goog.getCssName = function(x) {};" + "'foo';"); [EOL] } <line_num>: 126,141
public void testCssNameCheck() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.closurePass = true; [EOL]     options.checkMissingGetCssNameLevel = CheckLevel.ERROR; [EOL]     options.checkMissingGetCssNameBlacklist = "foo"; [EOL]     test(options, "var x = 'foo';", CheckMissingGetCssName.MISSING_GETCSSNAME); [EOL] } <line_num>: 143,150
public void testBug2592659() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.closurePass = true; [EOL]     options.checkTypes = true; [EOL]     options.checkMissingGetCssNameLevel = CheckLevel.WARNING; [EOL]     options.checkMissingGetCssNameBlacklist = "foo"; [EOL]     test(options, "var goog = {};\n" + "/**\n" + " * @param {string} className\n" + " * @param {string=} opt_modifier\n" + " * @return {string}\n" + "*/\n" + "goog.getCssName = function(className, opt_modifier) {}\n" + "var x = goog.getCssName(123, 'a');", TypeValidator.TYPE_MISMATCH_WARNING); [EOL] } <line_num>: 152,168
public void testTypedefBeforeOwner1() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.closurePass = true; [EOL]     test(options, "goog.provide('foo.Bar.Type');\n" + "goog.provide('foo.Bar');\n" + "/** @typedef {number} */ foo.Bar.Type;\n" + "foo.Bar = function() {};", "var foo = {}; foo.Bar.Type; foo.Bar = function() {};"); [EOL] } <line_num>: 170,179
public void testTypedefBeforeOwner2() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.closurePass = true; [EOL]     options.collapseProperties = true; [EOL]     test(options, "goog.provide('foo.Bar.Type');\n" + "goog.provide('foo.Bar');\n" + "/** @typedef {number} */ foo.Bar.Type;\n" + "foo.Bar = function() {};", "var foo$Bar$Type; var foo$Bar = function() {};"); [EOL] } <line_num>: 181,191
public void testExportedNames() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.closurePass = true; [EOL]     options.variableRenaming = VariableRenamingPolicy.ALL; [EOL]     test(options, "/** @define {boolean} */ var COMPILED = false;" + "var goog = {}; goog.exportSymbol('b', goog);", "var a = true; var c = {}; c.exportSymbol('b', c);"); [EOL]     test(options, "/** @define {boolean} */ var COMPILED = false;" + "var goog = {}; goog.exportSymbol('a', goog);", "var b = true; var c = {}; c.exportSymbol('a', c);"); [EOL] } <line_num>: 193,205
public void testCheckGlobalThisOn() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.checkSuspiciousCode = true; [EOL]     options.checkGlobalThisLevel = CheckLevel.ERROR; [EOL]     test(options, "function f() { this.y = 3; }", CheckGlobalThis.GLOBAL_THIS); [EOL] } <line_num>: 207,212
public void testSusiciousCodeOff() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.checkSuspiciousCode = false; [EOL]     options.checkGlobalThisLevel = CheckLevel.ERROR; [EOL]     test(options, "function f() { this.y = 3; }", CheckGlobalThis.GLOBAL_THIS); [EOL] } <line_num>: 214,219
public void testCheckGlobalThisOff() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.checkSuspiciousCode = true; [EOL]     options.checkGlobalThisLevel = CheckLevel.OFF; [EOL]     testSame(options, "function f() { this.y = 3; }"); [EOL] } <line_num>: 221,226
public void testCheckRequiresAndCheckProvidesOff() { [EOL]     testSame(createCompilerOptions(), new String[] { "/** @constructor */ function Foo() {}", "new Foo();" }); [EOL] } <line_num>: 228,233
public void testCheckRequiresOn() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.checkRequires = CheckLevel.ERROR; [EOL]     test(options, new String[] { "/** @constructor */ function Foo() {}", "new Foo();" }, CheckRequiresForConstructors.MISSING_REQUIRE_WARNING); [EOL] } <line_num>: 235,242
public void testCheckProvidesOn() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.checkProvides = CheckLevel.ERROR; [EOL]     test(options, new String[] { "/** @constructor */ function Foo() {}", "new Foo();" }, CheckProvides.MISSING_PROVIDE_WARNING); [EOL] } <line_num>: 244,251
public void testGenerateExportsOff() { [EOL]     testSame(createCompilerOptions(), "/** @export */ function f() {}"); [EOL] } <line_num>: 253,255
public void testGenerateExportsOn() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.generateExports = true; [EOL]     test(options, "/** @export */ function f() {}", "/** @export */ function f() {} goog.exportSymbol('f', f);"); [EOL] } <line_num>: 257,262
public void testExportTestFunctionsOff() { [EOL]     testSame(createCompilerOptions(), "function testFoo() {}"); [EOL] } <line_num>: 264,266
public void testExportTestFunctionsOn() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.exportTestFunctions = true; [EOL]     test(options, "function testFoo() {}", "/** @export */ function testFoo() {}" + "goog.exportSymbol('testFoo', testFoo);"); [EOL] } <line_num>: 268,274
public void testExpose() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options); [EOL]     test(options, "var x = {eeny: 1, /** @expose */ meeny: 2};" + "/** @constructor */ var Foo = function() {};" + "/** @expose */  Foo.prototype.miny = 3;" + "Foo.prototype.moe = 4;" + "function moe(a, b) { return a.meeny + b.miny; }" + "window['x'] = x;" + "window['Foo'] = Foo;" + "window['moe'] = moe;", "function a(){}" + "a.prototype.miny=3;" + "window.x={a:1,meeny:2};" + "window.Foo=a;" + "window.moe=function(b,c){" + "  return b.meeny+c.miny" + "}"); [EOL] } <line_num>: 276,296
public void testCheckSymbolsOff() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     testSame(options, "x = 3;"); [EOL] } <line_num>: 298,301
public void testCheckSymbolsOn() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.checkSymbols = true; [EOL]     test(options, "x = 3;", VarCheck.UNDEFINED_VAR_ERROR); [EOL] } <line_num>: 303,307
public void testCheckReferencesOff() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     testSame(options, "x = 3; var x = 5;"); [EOL] } <line_num>: 309,312
public void testCheckReferencesOn() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.aggressiveVarCheck = CheckLevel.ERROR; [EOL]     test(options, "x = 3; var x = 5;", VariableReferenceCheck.UNDECLARED_REFERENCE); [EOL] } <line_num>: 314,319
public void testInferTypes() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.inferTypes = true; [EOL]     options.checkTypes = false; [EOL]     options.closurePass = true; [EOL]     test(options, CLOSURE_BOILERPLATE + "goog.provide('Foo'); /** @enum */ Foo = {a: 3};", TypeCheck.ENUM_NOT_CONSTANT); [EOL]     assertTrue(lastCompiler.getErrorManager().getTypedPercent() == 0); [EOL]     test(options, "/** @type {number} */ var n = window.name;", "var n = window.name;"); [EOL]     assertTrue(lastCompiler.getErrorManager().getTypedPercent() == 0); [EOL] } <line_num>: 321,337
public void testTypeCheckAndInference() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.checkTypes = true; [EOL]     test(options, "/** @type {number} */ var n = window.name;", TypeValidator.TYPE_MISMATCH_WARNING); [EOL]     assertTrue(lastCompiler.getErrorManager().getTypedPercent() > 0); [EOL] } <line_num>: 339,345
public void testTypeNameParser() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.checkTypes = true; [EOL]     test(options, "/** @type {n} */ var n = window.name;", RhinoErrorReporter.TYPE_PARSE_ERROR); [EOL] } <line_num>: 347,352
public void testMemoizedTypedScopeCreator() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.checkTypes = true; [EOL]     options.ambiguateProperties = true; [EOL]     options.propertyRenaming = PropertyRenamingPolicy.ALL_UNQUOTED; [EOL]     test(options, "function someTest() {\n" + "  /** @constructor */\n" + "  function Foo() { this.instProp = 3; }\n" + "  Foo.prototype.protoProp = function(a, b) {};\n" + "  /** @constructor\n @extends Foo */\n" + "  function Bar() {}\n" + "  goog.inherits(Bar, Foo);\n" + "  var o = new Bar();\n" + "  o.protoProp(o.protoProp, o.instProp);\n" + "}", "function someTest() {\n" + "  function Foo() { this.b = 3; }\n" + "  function Bar() {}\n" + "  Foo.prototype.a = function(a, b) {};\n" + "  goog.c(Bar, Foo);\n" + "  var o = new Bar();\n" + "  o.a(o.a, o.b);\n" + "}"); [EOL] } <line_num>: 359,382
public void testCheckTypes() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.checkTypes = true; [EOL]     test(options, "var x = x || {}; x.f = function() {}; x.f(3);", TypeCheck.WRONG_ARGUMENT_COUNT); [EOL] } <line_num>: 384,389
public void testReplaceCssNames() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.closurePass = true; [EOL]     options.gatherCssNames = true; [EOL]     test(options, "/** @define {boolean} */\n" + "var COMPILED = false;\n" + "goog.setCssNameMapping({'foo':'bar'});\n" + "function getCss() {\n" + "  return goog.getCssName('foo');\n" + "}", "var COMPILED = true;\n" + "function getCss() {\n" + "  return \"bar\";" + "}"); [EOL]     assertEquals(ImmutableMap.of("foo", new Integer(1)), lastCompiler.getPassConfig().getIntermediateState().cssNames); [EOL] } <line_num>: 391,408
public void testRemoveClosureAsserts() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.closurePass = true; [EOL]     testSame(options, "var goog = {};" + "goog.asserts.assert(goog);"); [EOL]     options.removeClosureAsserts = true; [EOL]     test(options, "var goog = {};" + "goog.asserts.assert(goog);", "var goog = {};"); [EOL] } <line_num>: 410,421
public void testDeprecation() { [EOL]     String code = "/** @deprecated */ function f() { } function g() { f(); }"; [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     testSame(options, code); [EOL]     options.setWarningLevel(DiagnosticGroups.DEPRECATED, CheckLevel.ERROR); [EOL]     testSame(options, code); [EOL]     options.checkTypes = true; [EOL]     test(options, code, CheckAccessControls.DEPRECATED_NAME); [EOL] } <line_num>: 423,434
public void testVisibility() { [EOL]     String[] code = { "/** @private */ function f() { }", "function g() { f(); }" }; [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     testSame(options, code); [EOL]     options.setWarningLevel(DiagnosticGroups.VISIBILITY, CheckLevel.ERROR); [EOL]     testSame(options, code); [EOL]     options.checkTypes = true; [EOL]     test(options, code, CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS); [EOL] } <line_num>: 436,450
public void testUnreachableCode() { [EOL]     String code = "function f() { return \n 3; }"; [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     testSame(options, code); [EOL]     options.checkUnreachableCode = CheckLevel.ERROR; [EOL]     test(options, code, CheckUnreachableCode.UNREACHABLE_CODE); [EOL] } <line_num>: 452,460
public void testMissingReturn() { [EOL]     String code = "/** @return {number} */ function f() { if (f) { return 3; } }"; [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     testSame(options, code); [EOL]     options.checkMissingReturn = CheckLevel.ERROR; [EOL]     testSame(options, code); [EOL]     options.checkTypes = true; [EOL]     test(options, code, CheckMissingReturn.MISSING_RETURN_STATEMENT); [EOL] } <line_num>: 462,474
public void testIdGenerators() { [EOL]     String code = "function f() {} f('id');"; [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     testSame(options, code); [EOL]     options.idGenerators = Sets.newHashSet("f"); [EOL]     test(options, code, "function f() {} 'a';"); [EOL] } <line_num>: 476,484
public void testOptimizeArgumentsArray() { [EOL]     String code = "function f() { return arguments[0]; }"; [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     testSame(options, code); [EOL]     options.optimizeArgumentsArray = true; [EOL]     String argName = "JSCompiler_OptimizeArgumentsArray_p0"; [EOL]     test(options, code, "function f(" + argName + ") { return " + argName + "; }"); [EOL] } <line_num>: 486,496
public void testOptimizeParameters() { [EOL]     String code = "function f(a) { return a; } f(true);"; [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     testSame(options, code); [EOL]     options.optimizeParameters = true; [EOL]     test(options, code, "function f() { var a = true; return a;} f();"); [EOL] } <line_num>: 498,506
public void testOptimizeReturns() { [EOL]     String code = "function f(a) { return a; } f(true);"; [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     testSame(options, code); [EOL]     options.optimizeReturns = true; [EOL]     test(options, code, "function f(a) {return;} f(true);"); [EOL] } <line_num>: 508,516
public void testRemoveAbstractMethods() { [EOL]     String code = CLOSURE_BOILERPLATE + "var x = {}; x.foo = goog.abstractMethod; x.bar = 3;"; [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     testSame(options, code); [EOL]     options.closurePass = true; [EOL]     options.collapseProperties = true; [EOL]     test(options, code, CLOSURE_COMPILED + " var x$bar = 3;"); [EOL] } <line_num>: 518,528
public void testCollapseProperties1() { [EOL]     String code = "var x = {}; x.FOO = 5; x.bar = 3;"; [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     testSame(options, code); [EOL]     options.collapseProperties = true; [EOL]     test(options, code, "var x$FOO = 5; var x$bar = 3;"); [EOL] } <line_num>: 530,539
public void testCollapseProperties2() { [EOL]     String code = "var x = {}; x.FOO = 5; x.bar = 3;"; [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     testSame(options, code); [EOL]     options.collapseProperties = true; [EOL]     options.collapseObjectLiterals = true; [EOL]     test(options, code, "var x$FOO = 5; var x$bar = 3;"); [EOL] } <line_num>: 541,551
public void testCollapseObjectLiteral1() { [EOL]     String code = "var x = {}; x.FOO = 5; x.bar = 3;"; [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     testSame(options, code); [EOL]     options.collapseObjectLiterals = true; [EOL]     testSame(options, code); [EOL] } <line_num>: 553,562
public void testCollapseObjectLiteral2() { [EOL]     String code = "function f() {var x = {}; x.FOO = 5; x.bar = 3;}"; [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     testSame(options, code); [EOL]     options.collapseObjectLiterals = true; [EOL]     test(options, code, "function f(){" + "var JSCompiler_object_inline_FOO_0;" + "var JSCompiler_object_inline_bar_1;" + "JSCompiler_object_inline_FOO_0=5;" + "JSCompiler_object_inline_bar_1=3}"); [EOL] } <line_num>: 564,578
public void testTightenTypesWithoutTypeCheck() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.tightenTypes = true; [EOL]     test(options, "", DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK); [EOL] } <line_num>: 580,584
public void testDisambiguateProperties() { [EOL]     String code = "/** @constructor */ function Foo(){} Foo.prototype.bar = 3;" + "/** @constructor */ function Baz(){} Baz.prototype.bar = 3;"; [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     testSame(options, code); [EOL]     options.disambiguateProperties = true; [EOL]     options.checkTypes = true; [EOL]     test(options, code, "function Foo(){} Foo.prototype.Foo_prototype$bar = 3;" + "function Baz(){} Baz.prototype.Baz_prototype$bar = 3;"); [EOL] } <line_num>: 586,599
public void testMarkPureCalls() { [EOL]     String testCode = "function foo() {} foo();"; [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.removeDeadCode = true; [EOL]     testSame(options, testCode); [EOL]     options.computeFunctionSideEffects = true; [EOL]     test(options, testCode, "function foo() {}"); [EOL] } <line_num>: 601,610
public void testMarkNoSideEffects() { [EOL]     String testCode = "noSideEffects();"; [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.removeDeadCode = true; [EOL]     testSame(options, testCode); [EOL]     options.markNoSideEffectCalls = true; [EOL]     test(options, testCode, ""); [EOL] } <line_num>: 612,621
public void testChainedCalls() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.chainCalls = true; [EOL]     test(options, "/** @constructor */ function Foo() {} " + "Foo.prototype.bar = function() { return this; }; " + "var f = new Foo();" + "f.bar(); " + "f.bar(); ", "function Foo() {} " + "Foo.prototype.bar = function() { return this; }; " + "var f = new Foo();" + "f.bar().bar();"); [EOL] } <line_num>: 623,637
public void testExtraAnnotationNames() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.setExtraAnnotationNames(Sets.newHashSet("TagA", "TagB")); [EOL]     test(options, "/** @TagA */ var f = new Foo(); /** @TagB */ f.bar();", "var f = new Foo(); f.bar();"); [EOL] } <line_num>: 639,646
public void testDevirtualizePrototypeMethods() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.devirtualizePrototypeMethods = true; [EOL]     test(options, "/** @constructor */ var Foo = function() {}; " + "Foo.prototype.bar = function() {};" + "(new Foo()).bar();", "var Foo = function() {};" + "var JSCompiler_StaticMethods_bar = " + "    function(JSCompiler_StaticMethods_bar$self) {};" + "JSCompiler_StaticMethods_bar(new Foo());"); [EOL] } <line_num>: 648,660
public void testCheckConsts() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.inlineConstantVars = true; [EOL]     test(options, "var FOO = true; FOO = false", ConstCheck.CONST_REASSIGNED_VALUE_ERROR); [EOL] } <line_num>: 662,667
public void testAllChecksOn() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.checkSuspiciousCode = true; [EOL]     options.checkControlStructures = true; [EOL]     options.checkRequires = CheckLevel.ERROR; [EOL]     options.checkProvides = CheckLevel.ERROR; [EOL]     options.generateExports = true; [EOL]     options.exportTestFunctions = true; [EOL]     options.closurePass = true; [EOL]     options.checkMissingGetCssNameLevel = CheckLevel.ERROR; [EOL]     options.checkMissingGetCssNameBlacklist = "goog"; [EOL]     options.syntheticBlockStartMarker = "synStart"; [EOL]     options.syntheticBlockEndMarker = "synEnd"; [EOL]     options.checkSymbols = true; [EOL]     options.aggressiveVarCheck = CheckLevel.ERROR; [EOL]     options.processObjectPropertyString = true; [EOL]     options.collapseProperties = true; [EOL]     test(options, CLOSURE_BOILERPLATE, CLOSURE_COMPILED); [EOL] } <line_num>: 669,687
public void testTypeCheckingWithSyntheticBlocks() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.syntheticBlockStartMarker = "synStart"; [EOL]     options.syntheticBlockEndMarker = "synEnd"; [EOL]     options.checkTypes = true; [EOL]     testSame(options, "/** @param {number} x */ function f(x) {}" + "function g() {" + " synStart('foo');" + " var progress = 1;" + " f(progress);" + " synEnd('foo');" + "}"); [EOL] } <line_num>: 689,707
public void testCompilerDoesNotBlowUpIfUndefinedSymbols() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.checkSymbols = true; [EOL]     options.setWarningLevel(DiagnosticGroup.forType(VarCheck.UNDEFINED_VAR_ERROR), CheckLevel.OFF); [EOL]     testSame(options, "var x = {foo: y};"); [EOL] } <line_num>: 709,720
public void testConstantTagsMustAlwaysBeRemoved() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.variableRenaming = VariableRenamingPolicy.LOCAL; [EOL]     String originalText = "var G_GEO_UNKNOWN_ADDRESS=1;\n" + "function foo() {" + "  var localVar = 2;\n" + "  if (G_GEO_UNKNOWN_ADDRESS == localVar) {\n" + "    alert(\"A\"); }}"; [EOL]     String expectedText = "var G_GEO_UNKNOWN_ADDRESS=1;" + "function foo(){var a=2;if(G_GEO_UNKNOWN_ADDRESS==a){alert(\"A\")}}"; [EOL]     test(options, originalText, expectedText); [EOL] } <line_num>: 725,738
public void testClosurePassPreservesJsDoc() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.checkTypes = true; [EOL]     options.closurePass = true; [EOL]     test(options, CLOSURE_BOILERPLATE + "goog.provide('Foo'); /** @constructor */ Foo = function() {};" + "var x = new Foo();", "var COMPILED=true;var goog={};goog.exportSymbol=function(){};" + "var Foo=function(){};var x=new Foo"); [EOL]     test(options, CLOSURE_BOILERPLATE + "goog.provide('Foo'); /** @enum */ Foo = {a: 3};", TypeCheck.ENUM_NOT_CONSTANT); [EOL] } <line_num>: 740,755
public void testProvidedNamespaceIsConst() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.closurePass = true; [EOL]     options.inlineConstantVars = true; [EOL]     options.collapseProperties = true; [EOL]     test(options, "var goog = {}; goog.provide('foo'); " + "function f() { foo = {};}", "var foo = {}; function f() { foo = {}; }", ConstCheck.CONST_REASSIGNED_VALUE_ERROR); [EOL] } <line_num>: 757,767
public void testProvidedNamespaceIsConst2() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.closurePass = true; [EOL]     options.inlineConstantVars = true; [EOL]     options.collapseProperties = true; [EOL]     test(options, "var goog = {}; goog.provide('foo.bar'); " + "function f() { foo.bar = {};}", "var foo$bar = {};" + "function f() { foo$bar = {}; }", ConstCheck.CONST_REASSIGNED_VALUE_ERROR); [EOL] } <line_num>: 769,780
public void testProvidedNamespaceIsConst3() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.closurePass = true; [EOL]     options.inlineConstantVars = true; [EOL]     options.collapseProperties = true; [EOL]     test(options, "var goog = {}; " + "goog.provide('foo.bar'); goog.provide('foo.bar.baz'); " + "/** @constructor */ foo.bar = function() {};" + "/** @constructor */ foo.bar.baz = function() {};", "var foo$bar = function(){};" + "var foo$bar$baz = function(){};"); [EOL] } <line_num>: 782,794
public void testProvidedNamespaceIsConst4() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.closurePass = true; [EOL]     options.inlineConstantVars = true; [EOL]     options.collapseProperties = true; [EOL]     test(options, "var goog = {}; goog.provide('foo.Bar'); " + "var foo = {}; foo.Bar = {};", "var foo = {}; foo = {}; foo.Bar = {};"); [EOL] } <line_num>: 796,805
public void testProvidedNamespaceIsConst5() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.closurePass = true; [EOL]     options.inlineConstantVars = true; [EOL]     options.collapseProperties = true; [EOL]     test(options, "var goog = {}; goog.provide('foo.Bar'); " + "foo = {}; foo.Bar = {};", "var foo = {}; foo = {}; foo.Bar = {};"); [EOL] } <line_num>: 807,816
public void testProcessDefinesAlwaysOn() { [EOL]     test(createCompilerOptions(), "/** @define {boolean} */ var HI = true; HI = false;", "var HI = false;false;"); [EOL] } <line_num>: 818,822
public void testProcessDefinesAdditionalReplacements() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.setDefineToBooleanLiteral("HI", false); [EOL]     test(options, "/** @define {boolean} */ var HI = true;", "var HI = false;"); [EOL] } <line_num>: 824,830
public void testReplaceMessages() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String prefix = "var goog = {}; goog.getMsg = function() {};"; [EOL]     testSame(options, prefix + "var MSG_HI = goog.getMsg('hi');"); [EOL]     options.messageBundle = new EmptyMessageBundle(); [EOL]     test(options, prefix + "/** @desc xyz */ var MSG_HI = goog.getMsg('hi');", prefix + "var MSG_HI = 'hi';"); [EOL] } <line_num>: 832,841
public void testCheckGlobalNames() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.checkGlobalNamesLevel = CheckLevel.ERROR; [EOL]     test(options, "var x = {}; var y = x.z;", CheckGlobalNames.UNDEFINED_NAME_WARNING); [EOL] } <line_num>: 843,848
public void testInlineGetters() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "function Foo() {} Foo.prototype.bar = function() { return 3; };" + "var x = new Foo(); x.bar();"; [EOL]     testSame(options, code); [EOL]     options.inlineGetters = true; [EOL]     test(options, code, "function Foo() {} Foo.prototype.bar = function() { return 3 };" + "var x = new Foo(); 3;"); [EOL] } <line_num>: 850,862
public void testInlineGettersWithAmbiguate() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "/** @constructor */" + "function Foo() {}" + "/** @type {number} */ Foo.prototype.field;" + "Foo.prototype.getField = function() { return this.field; };" + "/** @constructor */" + "function Bar() {}" + "/** @type {string} */ Bar.prototype.field;" + "Bar.prototype.getField = function() { return this.field; };" + "new Foo().getField();" + "new Bar().getField();"; [EOL]     testSame(options, code); [EOL]     options.inlineGetters = true; [EOL]     test(options, code, "function Foo() {}" + "Foo.prototype.field;" + "Foo.prototype.getField = function() { return this.field; };" + "function Bar() {}" + "Bar.prototype.field;" + "Bar.prototype.getField = function() { return this.field; };" + "new Foo().field;" + "new Bar().field;"); [EOL]     options.checkTypes = true; [EOL]     options.ambiguateProperties = true; [EOL]     testSame(options, code); [EOL] } <line_num>: 864,899
public void testInlineVariables() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "function foo() {} var x = 3; foo(x);"; [EOL]     testSame(options, code); [EOL]     options.inlineVariables = true; [EOL]     test(options, code, "(function foo() {})(3);"); [EOL]     options.propertyRenaming = PropertyRenamingPolicy.HEURISTIC; [EOL]     test(options, code, DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR); [EOL] } <line_num>: 901,911
public void testInlineConstants() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "function foo() {} var x = 3; foo(x); var YYY = 4; foo(YYY);"; [EOL]     testSame(options, code); [EOL]     options.inlineConstantVars = true; [EOL]     test(options, code, "function foo() {} var x = 3; foo(x); foo(4);"); [EOL] } <line_num>: 913,920
public void testMinimizeExits() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "function f() {" + "  if (window.foo) return; window.h(); " + "}"; [EOL]     testSame(options, code); [EOL]     options.foldConstants = true; [EOL]     test(options, code, "function f() {" + "  window.foo || window.h(); " + "}"); [EOL] } <line_num>: 922,936
public void testFoldConstants() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "if (true) { window.foo(); }"; [EOL]     testSame(options, code); [EOL]     options.foldConstants = true; [EOL]     test(options, code, "window.foo();"); [EOL] } <line_num>: 938,945
public void testRemoveUnreachableCode() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "function f() { return; f(); }"; [EOL]     testSame(options, code); [EOL]     options.removeDeadCode = true; [EOL]     test(options, code, "function f() {}"); [EOL] } <line_num>: 947,954
public void testRemoveUnusedPrototypeProperties1() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "function Foo() {} " + "Foo.prototype.bar = function() { return new Foo(); };"; [EOL]     testSame(options, code); [EOL]     options.removeUnusedPrototypeProperties = true; [EOL]     test(options, code, "function Foo() {}"); [EOL] } <line_num>: 956,964
public void testRemoveUnusedPrototypeProperties2() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "function Foo() {} " + "Foo.prototype.bar = function() { return new Foo(); };" + "function f(x) { x.bar(); }"; [EOL]     testSame(options, code); [EOL]     options.removeUnusedPrototypeProperties = true; [EOL]     testSame(options, code); [EOL]     options.removeUnusedVars = true; [EOL]     test(options, code, ""); [EOL] } <line_num>: 966,978
public void testSmartNamePass() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "function Foo() { this.bar(); } " + "Foo.prototype.bar = function() { return Foo(); };"; [EOL]     testSame(options, code); [EOL]     options.smartNameRemoval = true; [EOL]     test(options, code, ""); [EOL] } <line_num>: 980,988
public void testDeadAssignmentsElimination() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "function f() { var x = 3; 4; x = 5; return x; } f(); "; [EOL]     testSame(options, code); [EOL]     options.deadAssignmentElimination = true; [EOL]     testSame(options, code); [EOL]     options.removeUnusedVars = true; [EOL]     test(options, code, "function f() { var x = 3; 4; x = 5; return x; } f();"); [EOL] } <line_num>: 990,1000
public void testInlineFunctions() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "function f() { return 3; } f(); "; [EOL]     testSame(options, code); [EOL]     options.inlineFunctions = true; [EOL]     test(options, code, "3;"); [EOL] } <line_num>: 1002,1009
public void testRemoveUnusedVars1() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "function f(x) {} f();"; [EOL]     testSame(options, code); [EOL]     options.removeUnusedVars = true; [EOL]     test(options, code, "function f() {} f();"); [EOL] } <line_num>: 1011,1018
public void testRemoveUnusedVars2() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "(function f(x) {})();var g = function() {}; g();"; [EOL]     testSame(options, code); [EOL]     options.removeUnusedVars = true; [EOL]     test(options, code, "(function() {})();var g = function() {}; g();"); [EOL]     options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.UNMAPPED; [EOL]     test(options, code, "(function f() {})();var g = function $g$() {}; g();"); [EOL] } <line_num>: 1020,1030
public void testCrossModuleCodeMotion() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String[] code = new String[] { "var x = 1;", "x;" }; [EOL]     testSame(options, code); [EOL]     options.crossModuleCodeMotion = true; [EOL]     test(options, code, new String[] { "", "var x = 1; x;" }); [EOL] } <line_num>: 1032,1045
public void testCrossModuleMethodMotion() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String[] code = new String[] { "var Foo = function() {}; Foo.prototype.bar = function() {};" + "var x = new Foo();", "x.bar();" }; [EOL]     testSame(options, code); [EOL]     options.crossModuleMethodMotion = true; [EOL]     test(options, code, new String[] { CrossModuleMethodMotion.STUB_DECLARATIONS + "var Foo = function() {};" + "Foo.prototype.bar=JSCompiler_stubMethod(0); var x=new Foo;", "Foo.prototype.bar=JSCompiler_unstubMethod(0,function(){}); x.bar()" }); [EOL] } <line_num>: 1047,1063
public void testFlowSensitiveInlineVariables1() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "function f() { var x = 3; x = 5; return x; }"; [EOL]     testSame(options, code); [EOL]     options.flowSensitiveInlineVariables = true; [EOL]     test(options, code, "function f() { var x = 3; return 5; }"); [EOL]     String unusedVar = "function f() { var x; x = 5; return x; } f()"; [EOL]     test(options, unusedVar, "function f() { var x; return 5; } f()"); [EOL]     options.removeUnusedVars = true; [EOL]     test(options, unusedVar, "function f() { return 5; } f()"); [EOL] } <line_num>: 1065,1078
public void testFlowSensitiveInlineVariables2() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options); [EOL]     test(options, "function f () {\n" + "    var ab = 0;\n" + "    ab += '-';\n" + "    alert(ab);\n" + "}", "function f () {\n" + "    alert('0-');\n" + "}"); [EOL] } <line_num>: 1080,1093
public void testCollapseAnonymousFunctions() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "var f = function() {};"; [EOL]     testSame(options, code); [EOL]     options.collapseAnonymousFunctions = true; [EOL]     test(options, code, "function f() {}"); [EOL] } <line_num>: 1095,1102
public void testMoveFunctionDeclarations() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "var x = f(); function f() { return 3; }"; [EOL]     testSame(options, code); [EOL]     options.moveFunctionDeclarations = true; [EOL]     test(options, code, "function f() { return 3; } var x = f();"); [EOL] } <line_num>: 1104,1111
public void testNameAnonymousFunctions() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "var f = function() {};"; [EOL]     testSame(options, code); [EOL]     options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.MAPPED; [EOL]     test(options, code, "var f = function $() {}"); [EOL]     assertNotNull(lastCompiler.getResult().namedAnonFunctionMap); [EOL]     options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.UNMAPPED; [EOL]     test(options, code, "var f = function $f$() {}"); [EOL]     assertNull(lastCompiler.getResult().namedAnonFunctionMap); [EOL] } <line_num>: 1113,1125
public void testNameAnonymousFunctionsWithVarRemoval() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.setRemoveUnusedVariables(CompilerOptions.Reach.LOCAL_ONLY); [EOL]     options.setInlineVariables(true); [EOL]     String code = "var f = function longName() {}; var g = function() {};" + "function longerName() {} var i = longerName;"; [EOL]     test(options, code, "var f = function() {}; var g = function() {}; " + "var i = function() {};"); [EOL]     options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.MAPPED; [EOL]     test(options, code, "var f = function longName() {}; var g = function $() {};" + "var i = function longerName(){};"); [EOL]     assertNotNull(lastCompiler.getResult().namedAnonFunctionMap); [EOL]     options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.UNMAPPED; [EOL]     test(options, code, "var f = function longName() {}; var g = function $g$() {};" + "var i = function longerName(){};"); [EOL]     assertNull(lastCompiler.getResult().namedAnonFunctionMap); [EOL] } <line_num>: 1127,1148
public void testExtractPrototypeMemberDeclarations() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "var f = function() {};"; [EOL]     String expected = "var a; var b = function() {}; a = b.prototype;"; [EOL]     for (int i = 0; i < 10; i++) { [EOL]         code += "f.prototype.a = " + i + ";"; [EOL]         expected += "a.a = " + i + ";"; [EOL]     } [EOL]     testSame(options, code); [EOL]     options.extractPrototypeMemberDeclarations = true; [EOL]     options.variableRenaming = VariableRenamingPolicy.ALL; [EOL]     test(options, code, expected); [EOL]     options.propertyRenaming = PropertyRenamingPolicy.HEURISTIC; [EOL]     options.variableRenaming = VariableRenamingPolicy.OFF; [EOL]     testSame(options, code); [EOL] } <line_num>: 1150,1167
public void testDevirtualizationAndExtractPrototypeMemberDeclarations() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.devirtualizePrototypeMethods = true; [EOL]     options.collapseAnonymousFunctions = true; [EOL]     options.extractPrototypeMemberDeclarations = true; [EOL]     options.variableRenaming = VariableRenamingPolicy.ALL; [EOL]     String code = "var f = function() {};"; [EOL]     String expected = "var a; function b() {} a = b.prototype;"; [EOL]     for (int i = 0; i < 10; i++) { [EOL]         code += "f.prototype.argz = function() {arguments};"; [EOL]         code += "f.prototype.devir" + i + " = function() {};"; [EOL]         char letter = (char) ('d' + i); [EOL]         expected += "a.argz = function() {arguments};"; [EOL]         expected += "function " + letter + "(c){}"; [EOL]     } [EOL]     code += "var F = new f(); F.argz();"; [EOL]     expected += "var n = new b(); n.argz();"; [EOL]     for (int i = 0; i < 10; i++) { [EOL]         code += "F.devir" + i + "();"; [EOL]         char letter = (char) ('d' + i); [EOL]         expected += letter + "(n);"; [EOL]     } [EOL]     test(options, code, expected); [EOL] } <line_num>: 1169,1196
public void testCoalesceVariableNames() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "function f() {var x = 3; var y = x; var z = y; return z;}"; [EOL]     testSame(options, code); [EOL]     options.coalesceVariableNames = true; [EOL]     test(options, code, "function f() {var x = 3; x = x; x = x; return x;}"); [EOL] } <line_num>: 1198,1206
public void testPropertyRenaming() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.propertyAffinity = true; [EOL]     String code = "function f() { return this.foo + this['bar'] + this.Baz; }" + "f.prototype.bar = 3; f.prototype.Baz = 3;"; [EOL]     String heuristic = "function f() { return this.foo + this['bar'] + this.a; }" + "f.prototype.bar = 3; f.prototype.a = 3;"; [EOL]     String aggHeuristic = "function f() { return this.foo + this['b'] + this.a; } " + "f.prototype.b = 3; f.prototype.a = 3;"; [EOL]     String all = "function f() { return this.b + this['bar'] + this.a; }" + "f.prototype.c = 3; f.prototype.a = 3;"; [EOL]     testSame(options, code); [EOL]     options.propertyRenaming = PropertyRenamingPolicy.HEURISTIC; [EOL]     test(options, code, heuristic); [EOL]     options.propertyRenaming = PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC; [EOL]     test(options, code, aggHeuristic); [EOL]     options.propertyRenaming = PropertyRenamingPolicy.ALL_UNQUOTED; [EOL]     test(options, code, all); [EOL] } <line_num>: 1208,1233
public void testConvertToDottedProperties() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "function f() { return this['bar']; } f.prototype.bar = 3;"; [EOL]     String expected = "function f() { return this.bar; } f.prototype.a = 3;"; [EOL]     testSame(options, code); [EOL]     options.convertToDottedProperties = true; [EOL]     options.propertyRenaming = PropertyRenamingPolicy.ALL_UNQUOTED; [EOL]     test(options, code, expected); [EOL] } <line_num>: 1235,1246
public void testRewriteFunctionExpressions() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "var a = function() {};"; [EOL]     String expected = "function JSCompiler_emptyFn(){return function(){}} " + "var a = JSCompiler_emptyFn();"; [EOL]     for (int i = 0; i < 10; i++) { [EOL]         code += "a = function() {};"; [EOL]         expected += "a = JSCompiler_emptyFn();"; [EOL]     } [EOL]     testSame(options, code); [EOL]     options.rewriteFunctionExpressions = true; [EOL]     test(options, code, expected); [EOL] } <line_num>: 1248,1261
public void testAliasAllStrings() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "function f() { return 'a'; }"; [EOL]     String expected = "var $$S_a = 'a'; function f() { return $$S_a; }"; [EOL]     testSame(options, code); [EOL]     options.aliasAllStrings = true; [EOL]     test(options, code, expected); [EOL] } <line_num>: 1263,1271
public void testAliasExterns() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "function f() { return window + window + window + window; }"; [EOL]     String expected = "var GLOBAL_window = window;" + "function f() { return GLOBAL_window + GLOBAL_window + " + "               GLOBAL_window + GLOBAL_window; }"; [EOL]     testSame(options, code); [EOL]     options.aliasExternals = true; [EOL]     test(options, code, expected); [EOL] } <line_num>: 1273,1283
public void testAliasKeywords() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "function f() { return true + true + true + true + true + true; }"; [EOL]     String expected = "var JSCompiler_alias_TRUE = true;" + "function f() { return JSCompiler_alias_TRUE + " + "    JSCompiler_alias_TRUE + JSCompiler_alias_TRUE + " + "    JSCompiler_alias_TRUE + JSCompiler_alias_TRUE + " + "    JSCompiler_alias_TRUE; }"; [EOL]     testSame(options, code); [EOL]     options.aliasKeywords = true; [EOL]     test(options, code, expected); [EOL] } <line_num>: 1285,1298
public void testRenameVars1() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "var abc = 3; function f() { var xyz = 5; return abc + xyz; }"; [EOL]     String local = "var abc = 3; function f() { var a = 5; return abc + a; }"; [EOL]     String all = "var a = 3; function c() { var b = 5; return a + b; }"; [EOL]     testSame(options, code); [EOL]     options.variableRenaming = VariableRenamingPolicy.LOCAL; [EOL]     test(options, code, local); [EOL]     options.variableRenaming = VariableRenamingPolicy.ALL; [EOL]     test(options, code, all); [EOL]     options.reserveRawExports = true; [EOL] } <line_num>: 1300,1315
public void testRenameVars2() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.variableRenaming = VariableRenamingPolicy.ALL; [EOL]     String code = "var abc = 3; function f() { window['a'] = 5; }"; [EOL]     String noexport = "var a = 3;   function b() { window['a'] = 5; }"; [EOL]     String export = "var b = 3;   function c() { window['a'] = 5; }"; [EOL]     options.reserveRawExports = false; [EOL]     test(options, code, noexport); [EOL]     options.reserveRawExports = true; [EOL]     test(options, code, export); [EOL] } <line_num>: 1317,1330
public void testShadowVaribles() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.variableRenaming = VariableRenamingPolicy.LOCAL; [EOL]     options.shadowVariables = true; [EOL]     String code = "var f = function(x) { return function(y) {}}"; [EOL]     String expected = "var f = function(a) { return function(a) {}}"; [EOL]     test(options, code, expected); [EOL] } <line_num>: 1332,1339
public void testRenameLabels() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "longLabel: for(;true;) { break longLabel; }"; [EOL]     String expected = "a: for(;true;) { break a; }"; [EOL]     testSame(options, code); [EOL]     options.labelRenaming = true; [EOL]     test(options, code, expected); [EOL] } <line_num>: 1341,1349
public void testBadBreakStatementInIdeMode() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.ideMode = true; [EOL]     options.checkTypes = true; [EOL]     test(options, "function f() { try { } catch(e) { break; } }", RhinoErrorReporter.PARSE_ERROR); [EOL] } <line_num>: 1351,1360
public void testIssue63SourceMap() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "var a;"; [EOL]     options.skipAllPasses = true; [EOL]     options.sourceMapOutputPath = "./src.map"; [EOL]     Compiler compiler = compile(options, code); [EOL]     compiler.toSource(); [EOL] } <line_num>: 1362,1371
public void testRegExp1() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.foldConstants = true; [EOL]     String code = "/(a)/.test(\"a\");"; [EOL]     testSame(options, code); [EOL]     options.computeFunctionSideEffects = true; [EOL]     String expected = ""; [EOL]     test(options, code, expected); [EOL] } <line_num>: 1373,1386
public void testRegExp2() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.foldConstants = true; [EOL]     String code = "/(a)/.test(\"a\");var a = RegExp.$1"; [EOL]     testSame(options, code); [EOL]     options.computeFunctionSideEffects = true; [EOL]     test(options, code, CheckRegExp.REGEXP_REFERENCE); [EOL]     options.setWarningLevel(DiagnosticGroups.CHECK_REGEXP, CheckLevel.OFF); [EOL]     testSame(options, code); [EOL] } <line_num>: 1388,1404
public void testFoldLocals1() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.foldConstants = true; [EOL]     String code = "new Widget().go();"; [EOL]     testSame(options, code); [EOL]     options.computeFunctionSideEffects = true; [EOL]     test(options, code, ""); [EOL] } <line_num>: 1406,1420
public void testFoldLocals2() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.foldConstants = true; [EOL]     options.checkTypes = true; [EOL]     String code = "widgetToken().go();"; [EOL]     testSame(options, code); [EOL]     options.computeFunctionSideEffects = true; [EOL]     test(options, code, "widgetToken()"); [EOL] } <line_num>: 1422,1437
public void testFoldLocals3() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.foldConstants = true; [EOL]     String definition = "function f(){return new Widget()}"; [EOL]     String call = "f().go();"; [EOL]     String code = definition + call; [EOL]     testSame(options, code); [EOL]     options.computeFunctionSideEffects = true; [EOL]     testSame(options, code); [EOL] } <line_num>: 1440,1458
public void testFoldLocals4() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.foldConstants = true; [EOL]     String code = "/** @constructor */\n" + "function InternalWidget(){this.x = 1;}" + "InternalWidget.prototype.internalGo = function (){this.x = 2};" + "new InternalWidget().internalGo();"; [EOL]     testSame(options, code); [EOL]     options.computeFunctionSideEffects = true; [EOL]     String optimized = "" + "function InternalWidget(){this.x = 1;}" + "InternalWidget.prototype.internalGo = function (){this.x = 2};"; [EOL]     test(options, code, optimized); [EOL] } <line_num>: 1460,1479
public void testFoldLocals5() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.foldConstants = true; [EOL]     String code = "" + "function fn(){var a={};a.x={};return a}" + "fn().x.y = 1;"; [EOL]     String result = "" + "function fn(){var a={x:{}};return a}" + "fn().x.y = 1;"; [EOL]     test(options, code, result); [EOL]     options.computeFunctionSideEffects = true; [EOL]     test(options, code, result); [EOL] } <line_num>: 1481,1501
public void testFoldLocals6() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.foldConstants = true; [EOL]     String code = "" + "function fn(){return {}}" + "fn().x.y = 1;"; [EOL]     testSame(options, code); [EOL]     options.computeFunctionSideEffects = true; [EOL]     testSame(options, code); [EOL] } <line_num>: 1503,1517
public void testFoldLocals7() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.foldConstants = true; [EOL]     String code = "" + "function InternalWidget(){return [];}" + "Array.prototype.internalGo = function (){this.x = 2};" + "InternalWidget().internalGo();"; [EOL]     testSame(options, code); [EOL]     options.computeFunctionSideEffects = true; [EOL]     String optimized = "" + "function InternalWidget(){return [];}" + "Array.prototype.internalGo = function (){this.x = 2};"; [EOL]     test(options, code, optimized); [EOL] } <line_num>: 1519,1538
public void testVarDeclarationsIntoFor() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.collapseVariableDeclarations = false; [EOL]     String code = "var a = 1; for (var b = 2; ;) {}"; [EOL]     testSame(options, code); [EOL]     options.collapseVariableDeclarations = true; [EOL]     test(options, code, "for (var a = 1, b = 2; ;) {}"); [EOL] } <line_num>: 1540,1552
public void testExploitAssigns() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.collapseVariableDeclarations = false; [EOL]     String code = "a = 1; b = a; c = b"; [EOL]     testSame(options, code); [EOL]     options.collapseVariableDeclarations = true; [EOL]     test(options, code, "c=b=a=1"); [EOL] } <line_num>: 1554,1566
public void testRecoverOnBadExterns() throws Exception { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.aliasExternals = true; [EOL]     externs = ImmutableList.of(SourceFile.fromCode("externs", "extern.foo")); [EOL]     test(options, "var extern; " + "function f() { return extern + extern + extern + extern; }", "var extern; " + "function f() { return extern + extern + extern + extern; }", VarCheck.UNDEFINED_EXTERN_VAR_ERROR); [EOL] } <line_num>: 1568,1590
public void testDuplicateVariablesInExterns() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.checkSymbols = true; [EOL]     externs = ImmutableList.of(SourceFile.fromCode("externs", "var externs = {}; /** @suppress {duplicate} */ var externs = {};")); [EOL]     testSame(options, ""); [EOL] } <line_num>: 1592,1599
public void testLanguageMode() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.setLanguageIn(LanguageMode.ECMASCRIPT3); [EOL]     String code = "var a = {get f(){}}"; [EOL]     Compiler compiler = compile(options, code); [EOL]     checkUnexpectedErrorsOrWarnings(compiler, 1); [EOL]     assertEquals("JSC_PARSE_ERROR. Parse error. " + "getters are not supported in older versions of JS. " + "If you are targeting newer versions of JS, " + "set the appropriate language_in option. " + "at i0 line 1 : 0", compiler.getErrors()[0].toString()); [EOL]     options.setLanguageIn(LanguageMode.ECMASCRIPT5); [EOL]     testSame(options, code); [EOL]     options.setLanguageIn(LanguageMode.ECMASCRIPT5_STRICT); [EOL]     testSame(options, code); [EOL] } <line_num>: 1601,1624
public void testLanguageMode2() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.setLanguageIn(LanguageMode.ECMASCRIPT3); [EOL]     options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.OFF); [EOL]     String code = "var a  = 2; delete a;"; [EOL]     testSame(options, code); [EOL]     options.setLanguageIn(LanguageMode.ECMASCRIPT5); [EOL]     testSame(options, code); [EOL]     options.setLanguageIn(LanguageMode.ECMASCRIPT5_STRICT); [EOL]     test(options, code, code, StrictModeCheck.DELETE_VARIABLE); [EOL] } <line_num>: 1626,1645
public void testIssue598() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.setLanguageIn(LanguageMode.ECMASCRIPT5_STRICT); [EOL]     WarningLevel.VERBOSE.setOptionsForWarningLevel(options); [EOL]     options.setLanguageIn(LanguageMode.ECMASCRIPT5); [EOL]     String code = "'use strict';\n" + "function App() {}\n" + "App.prototype = {\n" + "  get appData() { return this.appData_; },\n" + "  set appData(data) { this.appData_ = data; }\n" + "};"; [EOL]     Compiler compiler = compile(options, code); [EOL]     testSame(options, code); [EOL] } <line_num>: 1647,1664
public void testIssue701() { [EOL]     String ascii = "/**\n" + " * @preserve\n" + "   This\n" + "     is\n" + "       ASCII    ART\n" + "*/"; [EOL]     String result = "/*\n\n" + "   This\n" + "     is\n" + "       ASCII    ART\n" + "*/\n"; [EOL]     testSame(createCompilerOptions(), ascii); [EOL]     assertEquals(result, lastCompiler.toSource()); [EOL] } <line_num>: 1666,1681
public void testIssue724() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options); [EOL]     String code = "isFunction = function(functionToCheck) {" + "  var getType = {};" + "  return functionToCheck && " + "      getType.toString.apply(functionToCheck) === " + "     '[object Function]';" + "};"; [EOL]     String result = "isFunction=function(a){var b={};" + "return a&&\"[object Function]\"===b.b.a(a)}"; [EOL]     test(options, code, result); [EOL] } <line_num>: 1683,1699
public void testIssue730() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options); [EOL]     String code = "/** @constructor */function A() {this.foo = 0; Object.seal(this);}\n" + "/** @constructor */function B() {this.a = new A();}\n" + "B.prototype.dostuff = function() {this.a.foo++;alert('hi');}\n" + "new B().dostuff();\n"; [EOL]     test(options, code, "function a(){this.b=0;Object.seal(this)}" + "(new function(){this.a=new a}).a.b++;" + "alert(\"hi\")"); [EOL]     options.removeUnusedClassProperties = true; [EOL]     test(options, code, "function a(){Object.seal(this)}" + "(new function(){this.a=new a}).a.b++;" + "alert(\"hi\")"); [EOL] } <line_num>: 1701,1726
public void testCoaleseVariables() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.foldConstants = false; [EOL]     options.coalesceVariableNames = true; [EOL]     String code = "function f(a) {" + "  if (a) {" + "    return a;" + "  } else {" + "    var b = a;" + "    return b;" + "  }" + "  return a;" + "}"; [EOL]     String expected = "function f(a) {" + "  if (a) {" + "    return a;" + "  } else {" + "    a = a;" + "    return a;" + "  }" + "  return a;" + "}"; [EOL]     test(options, code, expected); [EOL]     options.foldConstants = true; [EOL]     options.coalesceVariableNames = false; [EOL]     code = "function f(a) {" + "  if (a) {" + "    return a;" + "  } else {" + "    var b = a;" + "    return b;" + "  }" + "  return a;" + "}"; [EOL]     expected = "function f(a) {" + "  if (!a) {" + "    var b = a;" + "    return b;" + "  }" + "  return a;" + "}"; [EOL]     test(options, code, expected); [EOL]     options.foldConstants = true; [EOL]     options.coalesceVariableNames = true; [EOL]     expected = "function f(a) {" + "  return a;" + "}"; [EOL]     test(options, code, expected); [EOL] } <line_num>: 1728,1790
public void testLateStatementFusion() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.foldConstants = true; [EOL]     test(options, "while(a){a();if(b){b();b()}}", "for(;a;)a(),b&&(b(),b())"); [EOL] } <line_num>: 1792,1798
public void testLateConstantReordering() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.foldConstants = true; [EOL]     test(options, "if (x < 1 || x > 1 || 1 < x || 1 > x) { alert(x) }", "   (1 > x || 1 < x || 1 < x || 1 > x) && alert(x) "); [EOL] } <line_num>: 1800,1806
public void testsyntheticBlockOnDeadAssignments() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.deadAssignmentElimination = true; [EOL]     options.removeUnusedVars = true; [EOL]     options.syntheticBlockStartMarker = "START"; [EOL]     options.syntheticBlockEndMarker = "END"; [EOL]     test(options, "var x; x = 1; START(); x = 1;END();x()", "var x; x = 1;{START();{x = 1}END()}x()"); [EOL] } <line_num>: 1808,1816
public void testBug4152835() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.foldConstants = true; [EOL]     options.syntheticBlockStartMarker = "START"; [EOL]     options.syntheticBlockEndMarker = "END"; [EOL]     test(options, "START();END()", "{START();{}END()}"); [EOL] } <line_num>: 1818,1824
public void testBug5786871() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.ideMode = true; [EOL]     test(options, "function () {}", RhinoErrorReporter.PARSE_ERROR); [EOL] } <line_num>: 1826,1830
public void testIssue378() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.inlineVariables = true; [EOL]     options.flowSensitiveInlineVariables = true; [EOL]     testSame(options, "function f(c) {var f = c; arguments[0] = this;" + "    f.apply(this, arguments); return this;}"); [EOL] } <line_num>: 1832,1838
public void testIssue550() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options); [EOL]     options.foldConstants = true; [EOL]     options.inlineVariables = true; [EOL]     options.flowSensitiveInlineVariables = true; [EOL]     test(options, "function f(h) {\n" + "  var a = h;\n" + "  a = a + 'x';\n" + "  a = a + 'y';\n" + "  return a;\n" + "}", "function f(a) { a += 'x'; return a += 'y'; }"); [EOL] } <line_num>: 1840,1856
public void testIssue284() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.smartNameRemoval = true; [EOL]     test(options, "var goog = {};" + "goog.inherits = function(x, y) {};" + "var ns = {};" + "/** @constructor */" + "ns.PageSelectionModel = function() {};" + "/** @constructor */" + "ns.PageSelectionModel.FooEvent = function() {};" + "/** @constructor */" + "ns.PageSelectionModel.SelectEvent = function() {};" + "goog.inherits(ns.PageSelectionModel.ChangeEvent," + "    ns.PageSelectionModel.FooEvent);", ""); [EOL] } <line_num>: 1858,1874
public void testIssue772() throws Exception { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.closurePass = true; [EOL]     options.checkTypes = true; [EOL]     test(options, "/** @const */ var a = {};" + "/** @const */ a.b = {};" + "/** @const */ a.b.c = {};" + "goog.scope(function() {" + "  var b = a.b;" + "  var c = b.c;" + "  /** @typedef {string} */" + "  c.MyType;" + "  /** @param {c.MyType} x The variable. */" + "  c.myFunc = function(x) {};" + "});", "/** @const */ var a = {};" + "/** @const */ a.b = {};" + "/** @const */ a.b.c = {};" + "a.b.c.MyType;" + "a.b.c.myFunc = function(x) {};"); [EOL] } <line_num>: 1876,1898
public void testCodingConvention() { [EOL]     Compiler compiler = new Compiler(); [EOL]     compiler.initOptions(new CompilerOptions()); [EOL]     assertEquals(compiler.getCodingConvention().getClass().toString(), ClosureCodingConvention.class.toString()); [EOL] } <line_num>: 1900,1906
public void testJQueryStringSplitLoops() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.foldConstants = true; [EOL]     test(options, "var x=['1','2','3','4','5','6','7']", "var x='1234567'.split('')"); [EOL]     options = createCompilerOptions(); [EOL]     options.foldConstants = true; [EOL]     options.computeFunctionSideEffects = false; [EOL]     options.removeUnusedVars = true; [EOL]     test(options, "var x=['1','2','3','4','5','6','7']", ""); [EOL] } <line_num>: 1908,1925
@Override [EOL] public void process(Node externs, Node root) { [EOL]     Node var = root.getLastChild().getFirstChild(); [EOL]     assertEquals(Token.VAR, var.getType()); [EOL]     var.detachFromParent(); [EOL] } <line_num>: 1934,1938
public void testAlwaysRunSafetyCheck() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.checkSymbols = false; [EOL]     options.customPasses = ArrayListMultimap.create(); [EOL]     options.customPasses.put(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS, new CompilerPass() { [EOL]  [EOL]         @Override [EOL]         public void process(Node externs, Node root) { [EOL]             Node var = root.getLastChild().getFirstChild(); [EOL]             assertEquals(Token.VAR, var.getType()); [EOL]             var.detachFromParent(); [EOL]         } [EOL]     }); [EOL]     try { [EOL]         test(options, "var x = 3; function f() { return x + z; }", "function f() { return x + z; }"); [EOL]         fail("Expected run-time exception"); [EOL]     } catch (RuntimeException e) { [EOL]         assertTrue(e.getMessage().indexOf("Unexpected variable x") != -1); [EOL]     } [EOL] } <line_num>: 1927,1948
public void testSuppressEs5StrictWarning() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.WARNING); [EOL]     test(options, "/** @suppress{es5Strict} */\n" + "function f() { var arguments; }", "function f() {}"); [EOL] } <line_num>: 1950,1957
public void testCheckProvidesWarning() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.setWarningLevel(DiagnosticGroups.CHECK_PROVIDES, CheckLevel.WARNING); [EOL]     options.setCheckProvides(CheckLevel.WARNING); [EOL]     test(options, "/** @constructor */\n" + "function f() { var arguments; }", DiagnosticType.warning("JSC_MISSING_PROVIDE", "missing goog.provide(''{0}'')")); [EOL] } <line_num>: 1959,1967
public void testSuppressCheckProvidesWarning() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.setWarningLevel(DiagnosticGroups.CHECK_PROVIDES, CheckLevel.WARNING); [EOL]     options.setCheckProvides(CheckLevel.WARNING); [EOL]     testSame(options, "/** @constructor\n" + " *  @suppress{checkProvides} */\n" + "function f() {}"); [EOL] } <line_num>: 1969,1977
public void testSuppressCastWarning() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING); [EOL]     normalizeResults = true; [EOL]     test(options, "function f() { var xyz = /** @type {string} */ (0); }", DiagnosticType.warning("JSC_INVALID_CAST", "invalid cast")); [EOL]     testSame(options, "/** @suppress{cast} */\n" + "function f() { var xyz = /** @type {string} */ (0); }"); [EOL] } <line_num>: 1979,1993
public void testRenamePrefix() { [EOL]     String code = "var x = {}; function f(y) {}"; [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.renamePrefix = "G_"; [EOL]     options.variableRenaming = VariableRenamingPolicy.ALL; [EOL]     test(options, code, "var G_={}; function G_a(a) {}"); [EOL] } <line_num>: 1995,2001
public void testRenamePrefixNamespace() { [EOL]     String code = "var x = {}; x.FOO = 5; x.bar = 3;"; [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     testSame(options, code); [EOL]     options.collapseProperties = true; [EOL]     options.renamePrefixNamespace = "_"; [EOL]     test(options, code, "_.x$FOO = 5; _.x$bar = 3;"); [EOL] } <line_num>: 2003,2013
public void testRenamePrefixNamespaceProtectSideEffects() { [EOL]     String code = "var x = null; try { +x.FOO; } catch (e) {}"; [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     testSame(options, code); [EOL]     CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options); [EOL]     options.renamePrefixNamespace = "_"; [EOL]     test(options, code, "_.x = null; try { +_.x.FOO; } catch (e) {}"); [EOL] } <line_num>: 2015,2025
public void testRenamePrefixNamespaceActivatesMoveFunctionDeclarations() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "var x = f; function f() { return 3; }"; [EOL]     testSame(options, code); [EOL]     assertFalse(options.moveFunctionDeclarations); [EOL]     options.renamePrefixNamespace = "_"; [EOL]     test(options, code, "_.f = function() { return 3; }; _.x = _.f;"); [EOL] } <line_num>: 2027,2034
public void testBrokenNameSpace() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     String code = "var goog; goog.provide('i.am.on.a.Horse');" + "i.am.on.a.Horse = function() {};" + "i.am.on.a.Horse.prototype.x = function() {};" + "i.am.on.a.Boat.prototype.y = function() {}"; [EOL]     options.closurePass = true; [EOL]     options.collapseProperties = true; [EOL]     options.smartNameRemoval = true; [EOL]     test(options, code, ""); [EOL] } <line_num>: 2036,2046
public void testNamelessParameter() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options); [EOL]     String code = "var impl_0;" + "$load($init());" + "function $load(){" + "  window['f'] = impl_0;" + "}" + "function $init() {" + "  impl_0 = {};" + "}"; [EOL]     String result = "window.f = {};"; [EOL]     test(options, code, result); [EOL] } <line_num>: 2048,2064
public void testHiddenSideEffect() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options); [EOL]     options.setAliasExternals(true); [EOL]     String code = "window.offsetWidth;"; [EOL]     String result = "window.offsetWidth;"; [EOL]     test(options, code, result); [EOL] } <line_num>: 2066,2076
public void testNegativeZero() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options); [EOL]     test(options, "function bar(x) { return x; }\n" + "function foo(x) { print(x / bar(0));\n" + "                 print(x / bar(-0)); }\n" + "foo(3);", "print(3/0);print(3/-0);"); [EOL] } <line_num>: 2078,2088
public void testSingletonGetter1() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options); [EOL]     options.setCodingConvention(new ClosureCodingConvention()); [EOL]     test(options, "/** @const */\n" + "var goog = goog || {};\n" + "goog.addSingletonGetter = function(ctor) {\n" + "  ctor.getInstance = function() {\n" + "    return ctor.instance_ || (ctor.instance_ = new ctor());\n" + "  };\n" + "};" + "function Foo() {}\n" + "goog.addSingletonGetter(Foo);" + "Foo.prototype.bar = 1;" + "function Bar() {}\n" + "goog.addSingletonGetter(Bar);" + "Bar.prototype.bar = 1;", ""); [EOL] } <line_num>: 2090,2110
public void testIncompleteFunction1() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.ideMode = true; [EOL]     DiagnosticType[] warnings = new DiagnosticType[] { RhinoErrorReporter.PARSE_ERROR, RhinoErrorReporter.PARSE_ERROR }; [EOL]     test(options, new String[] { "var foo = {bar: function(e) }" }, new String[] { "var foo = {bar: function(e){}};" }, warnings); [EOL] } <line_num>: 2112,2123
public void testIncompleteFunction2() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.ideMode = true; [EOL]     DiagnosticType[] warnings = new DiagnosticType[] { RhinoErrorReporter.PARSE_ERROR, RhinoErrorReporter.PARSE_ERROR, RhinoErrorReporter.PARSE_ERROR, RhinoErrorReporter.PARSE_ERROR, RhinoErrorReporter.PARSE_ERROR, RhinoErrorReporter.PARSE_ERROR }; [EOL]     test(options, new String[] { "function hi" }, new String[] { "function hi() {}" }, warnings); [EOL] } <line_num>: 2125,2140
public void testSortingOff() { [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     options.closurePass = true; [EOL]     options.setCodingConvention(new ClosureCodingConvention()); [EOL]     test(options, new String[] { "goog.require('goog.beer');", "goog.provide('goog.beer');" }, ProcessClosurePrimitives.LATE_PROVIDE_ERROR); [EOL] } <line_num>: 2142,2152
public void testUnboundedArrayLiteralInfiniteLoop() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.ideMode = true; [EOL]     test(options, "var x = [1, 2", "var x = [1, 2]", RhinoErrorReporter.PARSE_ERROR); [EOL] } <line_num>: 2154,2161
public void testProvideRequireSameFile() throws Exception { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.setDependencyOptions(new DependencyOptions().setDependencySorting(true)); [EOL]     options.closurePass = true; [EOL]     test(options, "goog.provide('x');\ngoog.require('x');", "var x = {};"); [EOL] } <line_num>: 2163,2173
public void testDependencySorting() throws Exception { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.setDependencyOptions(new DependencyOptions().setDependencySorting(true)); [EOL]     test(options, new String[] { "goog.require('x');", "goog.provide('x');" }, new String[] { "goog.provide('x');", "goog.require('x');", "" }); [EOL] } <line_num>: 2175,2194
public void testStrictWarningsGuard() throws Exception { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.checkTypes = true; [EOL]     options.addWarningsGuard(new StrictWarningsGuard()); [EOL]     Compiler compiler = compile(options, "/** @return {number} */ function f() { return true; }"); [EOL]     assertEquals(1, compiler.getErrors().length); [EOL]     assertEquals(0, compiler.getWarnings().length); [EOL] } <line_num>: 2196,2205
public void testStrictWarningsGuardEmergencyMode() throws Exception { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     options.checkTypes = true; [EOL]     options.addWarningsGuard(new StrictWarningsGuard()); [EOL]     options.useEmergencyFailSafe(); [EOL]     Compiler compiler = compile(options, "/** @return {number} */ function f() { return true; }"); [EOL]     assertEquals(0, compiler.getErrors().length); [EOL]     assertEquals(1, compiler.getWarnings().length); [EOL] } <line_num>: 2207,2217
public void testInlineProperties() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     CompilationLevel level = CompilationLevel.ADVANCED_OPTIMIZATIONS; [EOL]     level.setOptionsForCompilationLevel(options); [EOL]     level.setTypeBasedOptimizationOptions(options); [EOL]     String code = "" + "var ns = {};\n" + "/** @constructor */\n" + "ns.C = function () {this.someProperty = 1}\n" + "alert(new ns.C().someProperty + new ns.C().someProperty);\n"; [EOL]     assertTrue(options.inlineProperties); [EOL]     assertTrue(options.collapseProperties); [EOL]     test(options, code, "alert(2);"); [EOL] } <line_num>: 2219,2234
public void testGoogDefineClass1() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     CompilationLevel level = CompilationLevel.ADVANCED_OPTIMIZATIONS; [EOL]     level.setOptionsForCompilationLevel(options); [EOL]     level.setTypeBasedOptimizationOptions(options); [EOL]     String code = "" + "var ns = {};\n" + "ns.C = goog.defineClass(null, {\n" + "  /** @constructor */\n" + "  constructor: function () {this.someProperty = 1}\n" + "});\n" + "alert(new ns.C().someProperty + new ns.C().someProperty);\n"; [EOL]     assertTrue(options.inlineProperties); [EOL]     assertTrue(options.collapseProperties); [EOL]     test(options, code, "alert(2);"); [EOL] } <line_num>: 2236,2253
public void testGoogDefineClass2() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     CompilationLevel level = CompilationLevel.ADVANCED_OPTIMIZATIONS; [EOL]     level.setOptionsForCompilationLevel(options); [EOL]     level.setTypeBasedOptimizationOptions(options); [EOL]     String code = "" + "var C = goog.defineClass(null, {\n" + "  /** @constructor */\n" + "  constructor: function () {this.someProperty = 1}\n" + "});\n" + "alert(new C().someProperty + new C().someProperty);\n"; [EOL]     assertTrue(options.inlineProperties); [EOL]     assertTrue(options.collapseProperties); [EOL]     test(options, code, "alert(2);"); [EOL] } <line_num>: 2255,2271
public void testGoogDefineClass3() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     CompilationLevel level = CompilationLevel.ADVANCED_OPTIMIZATIONS; [EOL]     level.setOptionsForCompilationLevel(options); [EOL]     level.setTypeBasedOptimizationOptions(options); [EOL]     WarningLevel warnings = WarningLevel.VERBOSE; [EOL]     warnings.setOptionsForWarningLevel(options); [EOL]     String code = "" + "var C = goog.defineClass(null, {\n" + "  /** @constructor */\n" + "  constructor: function () {\n" + "    /** @type {number} */\n" + "    this.someProperty = 1},\n" + "  /** @param {string} a */\n" + "  someMethod: function (a) {}\n" + "});" + "var x = new C();\n" + "x.someMethod(x.someProperty);\n"; [EOL]     assertTrue(options.inlineProperties); [EOL]     assertTrue(options.collapseProperties); [EOL]     test(options, code, TypeValidator.TYPE_MISMATCH_WARNING); [EOL] } <line_num>: 2273,2296
public void testCheckConstants1() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     CompilationLevel level = CompilationLevel.SIMPLE_OPTIMIZATIONS; [EOL]     level.setOptionsForCompilationLevel(options); [EOL]     WarningLevel warnings = WarningLevel.QUIET; [EOL]     warnings.setOptionsForWarningLevel(options); [EOL]     String code = "" + "var foo; foo();\n" + "/** @const */\n" + "var x = 1; foo(); x = 2;\n"; [EOL]     test(options, code, code); [EOL] } <line_num>: 2298,2310
public void testCheckConstants2() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     CompilationLevel level = CompilationLevel.SIMPLE_OPTIMIZATIONS; [EOL]     level.setOptionsForCompilationLevel(options); [EOL]     WarningLevel warnings = WarningLevel.DEFAULT; [EOL]     warnings.setOptionsForWarningLevel(options); [EOL]     String code = "" + "var foo;\n" + "/** @const */\n" + "var x = 1; foo(); x = 2;\n"; [EOL]     test(options, code, ConstCheck.CONST_REASSIGNED_VALUE_ERROR); [EOL] } <line_num>: 2312,2324
public void testIssue787() { [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     CompilationLevel level = CompilationLevel.SIMPLE_OPTIMIZATIONS; [EOL]     level.setOptionsForCompilationLevel(options); [EOL]     WarningLevel warnings = WarningLevel.DEFAULT; [EOL]     warnings.setOptionsForWarningLevel(options); [EOL]     String code = "" + "function some_function() {\n" + "  var fn1;\n" + "  var fn2;\n" + "\n" + "  if (any_expression) {\n" + "    fn2 = external_ref;\n" + "    fn1 = function (content) {\n" + "      return fn2();\n" + "    }\n" + "  }\n" + "\n" + "  return {\n" + "    method1: function () {\n" + "      if (fn1) fn1();\n" + "      return true;\n" + "    },\n" + "    method2: function () {\n" + "      return false;\n" + "    }\n" + "  }\n" + "}"; [EOL]     String result = "" + "function some_function() {\n" + "  var a, b;\n" + "  any_expression && (b = external_ref, a = function(a) {\n" + "    return b()\n" + "  });\n" + "  return{method1:function() {\n" + "    a && a();\n" + "    return !0\n" + "  }, method2:function() {\n" + "    return !1\n" + "  }}\n" + "}\n" + ""; [EOL]     test(options, code, result); [EOL] } <line_num>: 2326,2372
public void testManyAdds() { [EOL] } <line_num>: 2374,2374
@Override [EOL] protected CompilerOptions createCompilerOptions() { [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     options.setCodingConvention(new GoogleCodingConvention()); [EOL]     return options; [EOL] } <line_num>: 2393,2398
