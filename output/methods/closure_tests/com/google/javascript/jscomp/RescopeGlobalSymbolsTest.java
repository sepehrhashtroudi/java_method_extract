public RescopeGlobalSymbolsTest() { [EOL] } <line_num>: 27,28
StringCompare() { [EOL]     super("", false); [EOL] } <line_num>: 157,159
@Override [EOL] protected CompilerPass getProcessor(Compiler compiler) { [EOL]     return new RescopeGlobalSymbols(compiler, namespace, false); [EOL] } <line_num>: 30,32
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 34,37
public void testVarDeclarations() { [EOL]     test("var a = 1;", "_.a = 1;"); [EOL]     test("var a = 1, b = 2, c = 3;", "_.a = 1; _.b = 2; _.c = 3;"); [EOL]     test("var a = 'str', b = 1, c = { foo: 'bar' }, d = function() {};", "_.a = 'str'; _.b = 1; _.c = { foo: 'bar' }; _.d = function() {};"); [EOL]     test("if(1){var x = 1;}", "if(1){_.x = 1;}"); [EOL]     test("var x;", ""); [EOL]     test("var a, b = 1;", "_.b = 1"); [EOL] } <line_num>: 39,47
public void testForLoops() { [EOL]     test("for (var i = 0; i < 1000; i++);", "for (_.i = 0; _.i < 1000; _.i++);"); [EOL]     test("for (var i = 0, c = 2; i < 1000; i++);", "for (_.i = 0, _.c = 2; _.i < 1000; _.i++);"); [EOL]     test("for (var i = 0, c = 2, d = 3; i < 1000; i++);", "for (_.i = 0, _.c = 2, _.d = 3; _.i < 1000; _.i++);"); [EOL]     test("for (var i = 0, c = 2, d = 3, e = 4; i < 1000; i++);", "for (_.i = 0, _.c = 2, _.d = 3, _.e = 4; _.i < 1000; _.i++);"); [EOL]     test("for (var i = 0; i < 1000;)i++;", "for (_.i = 0; _.i < 1000;)_.i++;"); [EOL]     test("for (var i = 0,b; i < 1000;)i++;b++", "for (_.i = 0,_.b; _.i < 1000;)_.i++;_.b++"); [EOL]     test("var o={};for (var i in o)i++;", "_.o={};for (_.i in _.o)_.i++;"); [EOL] } <line_num>: 49,64
public void testFunctionStatements() { [EOL]     test("function test(){}", "_.test=function (){}"); [EOL]     test("if(1)function test(){}", "if(1)_.test=function (){}"); [EOL]     new StringCompare().testFreeCallSemantics(); [EOL] } <line_num>: 66,72
public void testDeeperScopes() { [EOL]     test("var a = function(b){return b}", "_.a = function(b){return b}"); [EOL]     test("var a = function(b){var a; return a+b}", "_.a = function(b){var a; return a+b}"); [EOL]     test("var a = function(a,b){return a+b}", "_.a = function(a,b){return a+b}"); [EOL]     test("var x=1,a = function(b){var a; return a+b+x}", "_.x=1;_.a = function(b){var a; return a+b+_.x}"); [EOL]     test("var x=1,a = function(b){return function(){var a;return a+b+x}}", "_.x=1;_.a = function(b){return function(){var a; return a+b+_.x}}"); [EOL] } <line_num>: 74,85
public void testTryCatch() { [EOL]     test("try{var a = 1}catch(e){throw e}", "try{_.a = 1}catch(e){throw e}"); [EOL] } <line_num>: 87,90
public void testShadow() { [EOL]     test("var _ = 1; (function () { _ = 2 })()", "_._ = 1; (function () { _._ = 2 })()"); [EOL]     test("function foo() { var _ = {}; _.foo = foo; _.bar = 1; }", "_.foo = function () { var _$ = {}; _$.foo = _.foo; _$.bar = 1}"); [EOL]     test("function foo() { var _ = {}; _.foo = foo; _.bar = 1; " + "(function() { var _ = 0;})() }", "_.foo = function () { var _$ = {}; _$.foo = _.foo; _$.bar = 1; " + "(function() { var _$ = 0;})() }"); [EOL]     test("function foo() { var _ = {}; _.foo = foo; _.bar = 1; " + "var _$ = 1; }", "_.foo = function () { var _$ = {}; _$.foo = _.foo; _$.bar = 1; " + "var _$$ = 1; }"); [EOL]     test("function foo() { var _ = {}; _.foo = foo; _.bar = 1; " + "var _$ = 1; (function() { _ = _$ })() }", "_.foo = function () { var _$ = {}; _$.foo = _.foo; _$.bar = 1; " + "var _$$ = 1; (function() { _$ = _$$ })() }"); [EOL]     test("function foo() { var _ = {}; _.foo = foo; _.bar = 1; " + "var _$ = 1, _$$ = 2 (function() { _ = _$ = _$$; " + "var _$, _$$$ })() }", "_.foo = function () { var _$ = {}; _$.foo = _.foo; _$.bar = 1; " + "var _$$ = 1, _$$$ = 2 (function() { _$ = _$$ = _$$$; " + "var _$$, _$$$$ })() }"); [EOL]     test("function foo() { var _a = 1;}", "_.foo = function () { var _a = 1;}"); [EOL]     test("function foo() { var _$a = 1;}", "_.foo = function () { var _$a$ = 1;}"); [EOL] } <line_num>: 92,121
public void testExterns() { [EOL]     test("var document;", "document", "window.document", null, null); [EOL]     test("var document;", "document.getElementsByTagName('test')", "window.document.getElementsByTagName('test')", null, null); [EOL]     test("var document;", "window.document.getElementsByTagName('test')", "window.document.getElementsByTagName('test')", null, null); [EOL]     test("var document;document.getElementsByTagName", "document.getElementsByTagName('test')", "window.document.getElementsByTagName('test')", null, null); [EOL]     test("var document,navigator", "document.navigator;navigator", "window.document.navigator;window.navigator", null, null); [EOL]     test("var iframes", "function test() { iframes.resize(); }", "_.test = function() { window.iframes.resize(); }", null, null); [EOL]     test("var iframes", "var foo = iframes;", "_.foo = window.iframes;", null, null); [EOL]     test("var arguments, window, eval;", "arguments;window;eval;", "arguments;window;eval;", null, null); [EOL]     test("", "document", "window.document", null, null); [EOL] } <line_num>: 123,153
@Override [EOL] protected CompilerPass getProcessor(Compiler compiler) { [EOL]     return new RescopeGlobalSymbols(compiler, namespace, false); [EOL] } <line_num>: 161,163
public void testFreeCallSemantics() { [EOL]     test("function x(){};var y=function(){var val=x()||{}}", "_.x=function(){};_.y=function(){var val=(0,_.x)()||{}}"); [EOL]     test("function x(){x()}", "_.x=function(){(0,_.x)()}"); [EOL] } <line_num>: 165,170
