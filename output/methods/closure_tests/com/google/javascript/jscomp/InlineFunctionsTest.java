public InlineFunctionsTest() { [EOL]     this.enableNormalize(); [EOL]     this.enableMarkNoSideEffects(); [EOL] } <line_num>: 33,36
StringCompare() { [EOL]     super("", false); [EOL]     this.enableNormalize(); [EOL]     this.enableMarkNoSideEffects(); [EOL] } <line_num>: 2043,2047
@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     super.enableLineNumberCheck(true); [EOL]     allowGlobalFunctionInlining = true; [EOL]     allowBlockInlining = true; [EOL]     assumeStrictThis = false; [EOL]     assumeMinimumCapture = false; [EOL] } <line_num>: 38,46
@Override [EOL] protected CompilerPass getProcessor(Compiler compiler) { [EOL]     compiler.resetUniqueNameId(); [EOL]     return new InlineFunctions(compiler, compiler.getUniqueNameIdSupplier(), allowGlobalFunctionInlining, allowLocalFunctionInlining, allowBlockInlining, assumeStrictThis, assumeMinimumCapture); [EOL] } <line_num>: 48,59
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 3; [EOL] } <line_num>: 65,69
public void testInlineEmptyFunction1() { [EOL]     test("function foo(){}" + "foo();", "void 0;"); [EOL] } <line_num>: 71,76
public void testInlineEmptyFunction2() { [EOL]     test("function foo(){}" + "foo(1, new Date, function(){});", "void 0;"); [EOL] } <line_num>: 78,83
public void testInlineEmptyFunction3() { [EOL]     test("function foo(){}" + "foo();foo();foo();", "void 0;void 0;void 0"); [EOL] } <line_num>: 85,90
public void testInlineEmptyFunction4() { [EOL]     test("function foo(){}" + "foo(x());", "{var JSCompiler_inline_anon_param_0=x();}"); [EOL] } <line_num>: 92,97
public void testInlineEmptyFunction5() { [EOL]     allowBlockInlining = false; [EOL]     testSame("function foo(){}" + "foo(x());"); [EOL] } <line_num>: 99,105
public void testInlineFunctions1() { [EOL]     test("function foo(){ return 4 }" + "foo();", "4"); [EOL] } <line_num>: 107,112
public void testInlineFunctions2() { [EOL]     test("var t;var AB=function(){return 4};" + "function BC(){return 6;}" + "CD=function(x){return x + 5};x=CD(3);y=AB();z=BC();", "var t;CD=function(x){return x+5};x=CD(3);y=4;z=6"); [EOL] } <line_num>: 114,122
public void testInlineFunctions3() { [EOL]     test("var t;var AB=function(){return 4};" + "function BC(){return 6;}" + "var CD=function(x){return x + 5};x=CD(3);y=AB();z=BC();", "var t;x=3+5;y=4;z=6"); [EOL] } <line_num>: 124,130
public void testInlineFunctions4() { [EOL]     test("var t; var AB = function() { return 4 }; " + "function BC() { return 6; }" + "CD = 0;" + "CD = function(x) { return x + 5 }; x = CD(3); y = AB(); z = BC();", "var t;CD=0;CD=function(x){return x+5};x=CD(3);y=4;z=6"); [EOL] } <line_num>: 132,140
public void testInlineFunctions5() { [EOL]     test("var FOO_FN=function(x,y) { return \"de\" + x + \"nu\" + y };" + "var a = FOO_FN(\"ez\", \"ts\")", "var a=\"de\"+\"ez\"+\"nu\"+\"ts\""); [EOL] } <line_num>: 142,148
public void testInlineFunctions6() { [EOL]     test("function BAR_FN(x, y, z) { return z(foo(x + y)) }" + "alert(BAR_FN(1, 2, baz))", "alert(baz(foo(1+2)))"); [EOL] } <line_num>: 150,156
public void testInlineFunctions7() { [EOL]     test("function FN(x,y,z){return x+x+y}" + "var b=FN(1,2,3)", "var b=1+1+2"); [EOL] } <line_num>: 158,164
public void testInlineFunctions8() { [EOL]     test("function MUL(x,y){return x*y}function ADD(x,y){return x+y}" + "var a=1+MUL(2,3);var b=2*ADD(3,4)", "var a=1+2*3;var b=2*(3+4)"); [EOL] } <line_num>: 166,172
public void testInlineFunctions9() { [EOL]     test("function INC(x){return x++}" + "var y=INC(i)", "var y;{var x$$inline_0=i;" + "y=x$$inline_0++}"); [EOL] } <line_num>: 174,180
public void testInlineFunctions10() { [EOL]     test("function INC(x){return x++}" + "var y=INC(i);y=INC(i)", "var y;" + "{var x$$inline_0=i;" + "y=x$$inline_0++}" + "{var x$$inline_2=i;" + "y=x$$inline_2++}"); [EOL] } <line_num>: 182,190
public void testInlineFunctions11() { [EOL]     test("function f(x){return x}" + "var y=f(i)", "var y=i"); [EOL] } <line_num>: 192,196
public void testInlineFunctions12() { [EOL]     allowBlockInlining = false; [EOL]     test("function f(x){return x}" + "var y=f(i)", "var y=i"); [EOL]     testSame("function f(x){return x}" + "var y=f(i++)"); [EOL] } <line_num>: 198,206
public void testInlineFunctions13() { [EOL]     test("function f(x){return x}" + "var y=f(i++)", "var y;{var x$$inline_0=i++;y=x$$inline_0}"); [EOL] } <line_num>: 208,213
public void testInlineFunctions14() { [EOL]     test("function FOO(x){return x}var BAR=function(y){return y}" + ";b=FOO;a(BAR);x=FOO(1);y=BAR(2)", "function FOO(x){return x}var BAR=function(y){return y}" + ";b=FOO;a(BAR);x=1;y=2"); [EOL] } <line_num>: 215,222
public void testInlineFunctions15a() { [EOL]     test("function foo(){return function(a){return a+1}}" + "var b=function(){return c};" + "var d=b()+foo()", "var d=c+function(a){return a+1}"); [EOL] } <line_num>: 224,231
public void testInlineFunctions15b() { [EOL]     assumeMinimumCapture = false; [EOL]     test("function foo(){var x;return function(a){return a+1}}" + "var b=function(){return c};" + "var d=b()+foo()", "function foo(){var x;return function(a){return a+1}}" + "var d=c+foo()"); [EOL]     assumeMinimumCapture = true; [EOL]     test("function foo(){var x;return function(a){return a+1}}" + "var b=function(){return c};" + "var d=b()+foo()", "var JSCompiler_temp_const$$0 = c;\n" + "var JSCompiler_inline_result$$1;\n" + "{\n" + "var x$$inline_2;\n" + "JSCompiler_inline_result$$1 = " + "    function(a$$inline_3){ return a$$inline_3+1 };\n" + "}" + "var d=JSCompiler_temp_const$$0 + JSCompiler_inline_result$$1"); [EOL] } <line_num>: 233,258
public void testInlineFunctions15c() { [EOL]     assumeMinimumCapture = false; [EOL]     test("function foo(){return function(a){return a+1}}" + "var b=function(){return c};" + "function _x(){ var d=b()+foo() }", "function foo(){return function(a){return a+1}}" + "function _x(){ var d=c+foo() }"); [EOL]     assumeMinimumCapture = true; [EOL]     test("function foo(){return function(a){return a+1}}" + "var b=function(){return c};" + "function _x(){ var d=b()+foo() }", "function _x(){var d=c+function(a){return a+1}}"); [EOL] } <line_num>: 260,280
public void testInlineFunctions15d() { [EOL]     assumeMinimumCapture = false; [EOL]     test("function foo(){var x; return function(a){return a+1}}" + "var b=function(){return c};" + "function _x(){ var d=b()+foo() }", "function foo(){var x; return function(a){return a+1}}" + "function _x(){ var d=c+foo() }"); [EOL]     assumeMinimumCapture = true; [EOL]     test("function foo(){var x; return function(a){return a+1}}" + "var b=function(){return c};" + "function _x(){ var d=b()+foo() }", "function _x() { \n" + "  var JSCompiler_temp_const$$0 = c;\n" + "  var JSCompiler_inline_result$$1;\n" + "  {\n" + "  var x$$inline_2;\n" + "  JSCompiler_inline_result$$1 = " + "      function(a$$inline_3) {return a$$inline_3+1};\n" + "  }\n" + "  var d = JSCompiler_temp_const$$0+JSCompiler_inline_result$$1\n" + "}"); [EOL] } <line_num>: 282,310
public void testInlineFunctions16a() { [EOL]     assumeMinimumCapture = false; [EOL]     testSame("function foo(b){return window.bar(function(){c(b)})}" + "var d=foo(e)"); [EOL]     assumeMinimumCapture = true; [EOL]     test("function foo(b){return window.bar(function(){c(b)})}" + "var d=foo(e)", "var d;{var b$$inline_0=e;" + "d=window.bar(function(){c(b$$inline_0)})}"); [EOL] } <line_num>: 312,325
public void testInlineFunctions16b() { [EOL]     test("function foo(){return window.bar(function(){c()})}" + "var d=foo(e)", "var d=window.bar(function(){c()})"); [EOL] } <line_num>: 327,331
public void testInlineFunctions17() { [EOL]     testSame("function foo(x){return x*x+foo(3)}var bar=foo(4)"); [EOL] } <line_num>: 333,336
public void testInlineFunctions18() { [EOL]     allowBlockInlining = false; [EOL]     test("function foo(a, b){return a+b}" + "function bar(d){return c}" + "var d=foo(bar(1),e)", "var d=c+e"); [EOL] } <line_num>: 338,345
public void testInlineFunctions19() { [EOL]     test("function foo(a, b){return a+b}" + "function bar(d){return c}" + "var d=foo(bar(1),e)", "var d;{d=c+e}"); [EOL] } <line_num>: 347,354
public void testInlineFunctions20() { [EOL]     allowBlockInlining = false; [EOL]     test("function foo(a, b){return a+b}" + "function bar(d){return c}" + "var d=bar(foo(1,e));", "var d=c"); [EOL] } <line_num>: 356,363
public void testInlineFunctions21() { [EOL]     test("function foo(a, b){return a+b}" + "function bar(d){return c}" + "var d=bar(foo(1,e))", "var d;{d=c}"); [EOL] } <line_num>: 365,371
public void testInlineFunctions22() { [EOL]     test("function plex(a){if(a) return 0;else return 1;}" + "function foo(a, b){return bar(a+b)}" + "function bar(d){return plex(d)}" + "var d=foo(1,2)", "var d;{JSCompiler_inline_label_plex_1:{" + "if(1+2){" + "d=0;break JSCompiler_inline_label_plex_1}" + "else{" + "d=1;break JSCompiler_inline_label_plex_1}d=void 0}}"); [EOL] } <line_num>: 373,385
public void testInlineFunctions23() { [EOL]     test("function complex(a){if(a) return 0;else return 1;}" + "function bar(d){return complex(d)}" + "function foo(a, b){return bar(a+b)}" + "var d=foo(1,2)", "var d;{JSCompiler_inline_label_complex_1:{" + "if(1+2){" + "d=0;break JSCompiler_inline_label_complex_1" + "}else{" + "d=1;break JSCompiler_inline_label_complex_1" + "}d=void 0}}"); [EOL] } <line_num>: 387,400
public void testInlineFunctions24() { [EOL]     testSame("function foo(x){return this}foo(1)"); [EOL] } <line_num>: 402,405
public void testInlineFunctions25() { [EOL]     testSame("function foo(){return arguments[0]}foo()"); [EOL] } <line_num>: 407,409
public void testInlineFunctions26() { [EOL]     testSame("function _foo(x){return x}_foo(1)"); [EOL] } <line_num>: 411,414
public void testInlineFunctions27() { [EOL]     test("var window = {}; function foo(){window.bar++; return 3;}" + "var x = {y: 1, z: foo(2)};", "var window={};" + "var JSCompiler_inline_result$$0;" + "{" + "  window.bar++;" + "  JSCompiler_inline_result$$0 = 3;" + "}" + "var x = {y: 1, z: JSCompiler_inline_result$$0};"); [EOL] } <line_num>: 416,426
public void testInlineFunctions28() { [EOL]     test("var window = {}; function foo(){window.bar++; return 3;}" + "var x = {y: alert(), z: foo(2)};", "var window = {};" + "var JSCompiler_temp_const$$0 = alert();" + "var JSCompiler_inline_result$$1;" + "{" + " window.bar++;" + " JSCompiler_inline_result$$1 = 3;}" + "var x = {" + "  y: JSCompiler_temp_const$$0," + "  z: JSCompiler_inline_result$$1" + "};"); [EOL] } <line_num>: 428,441
public void testInlineFunctions29() { [EOL]     test("var window = {}; function foo(){window.bar++; return 3;}" + "var x = {a: alert(), b: alert2(), c: foo(2)};", "var window = {};" + "var JSCompiler_temp_const$$1 = alert();" + "var JSCompiler_temp_const$$0 = alert2();" + "var JSCompiler_inline_result$$2;" + "{" + " window.bar++;" + " JSCompiler_inline_result$$2 = 3;}" + "var x = {" + "  a: JSCompiler_temp_const$$1," + "  b: JSCompiler_temp_const$$0," + "  c: JSCompiler_inline_result$$2" + "};"); [EOL] } <line_num>: 443,458
public void testInlineFunctions30() { [EOL]     testSame("function foo(){ return eval() }" + "foo();"); [EOL] } <line_num>: 460,464
public void testInlineFunctions31() { [EOL]     test("function foo(){ lab:{4;} }" + "lab:{foo();}", "lab:{{JSCompiler_inline_label_0:{4}}}"); [EOL] } <line_num>: 466,471
public void testMixedModeInlining1() { [EOL]     test("function foo(){return 1}" + "foo();", "1;"); [EOL] } <line_num>: 473,478
public void testMixedModeInlining2() { [EOL]     test("function foo(){return 1}" + "foo(x());", "{var JSCompiler_inline_anon_param_0=x();1}"); [EOL] } <line_num>: 480,486
public void testMixedModeInlining3() { [EOL]     test("function foo(){return 1}" + "foo();foo(x());", "1;{var JSCompiler_inline_anon_param_0=x();1}"); [EOL] } <line_num>: 488,493
public void testMixedModeInlining4() { [EOL]     test("function foo(){return 1}" + "foo();foo(x());" + "foo(1);foo(1,x());", "1;{var JSCompiler_inline_anon_param_0=x();1}" + "1;{var JSCompiler_inline_anon_param_4=x();1}"); [EOL] } <line_num>: 495,503
public void testMixedModeInliningCosting1() { [EOL]     test("function foo(a,b){return a+b+a+b+4+5+6+7+8+9+1+2+3+4+5}" + "foo(1,2);" + "foo(2,3)", "1+2+1+2+4+5+6+7+8+9+1+2+3+4+5;" + "2+3+2+3+4+5+6+7+8+9+1+2+3+4+5"); [EOL] } <line_num>: 505,516
public void testMixedModeInliningCosting2() { [EOL]     testSame("function foo(a,b){return a+b+a+b+4+5+6+7+8+9+1+2+3+4+5}" + "foo(1,2);" + "foo(2,3,x())"); [EOL] } <line_num>: 518,525
public void testMixedModeInliningCosting3() { [EOL]     test("function foo(a,b){return a+b+a+b+4+5+6+7+8+9+1+2+3+10}" + "foo(1,2);" + "foo(2,3,x())", "1+2+1+2+4+5+6+7+8+9+1+2+3+10;" + "{var JSCompiler_inline_anon_param_2=x();" + "2+3+2+3+4+5+6+7+8+9+1+2+3+10}"); [EOL] } <line_num>: 527,537
public void testMixedModeInliningCosting4() { [EOL]     testSame("function foo(a,b){return a+b+a+b+4+5+6+7+8+9+1+2+3+4+101}" + "foo(1,2);" + "foo(2,3,x())"); [EOL] } <line_num>: 539,545
public void testNoInlineIfParametersModified1() { [EOL]     test("function f(x){return x=1}f(undefined)", "{var x$$inline_0=undefined;" + "x$$inline_0=1}"); [EOL] } <line_num>: 547,552
public void testNoInlineIfParametersModified2() { [EOL]     test("function f(x){return (x)=1;}f(2)", "{var x$$inline_0=2;" + "x$$inline_0=1}"); [EOL] } <line_num>: 554,558
public void testNoInlineIfParametersModified3() { [EOL]     test("function f(x){return x*=2}f(2)", "{var x$$inline_0=2;" + "x$$inline_0*=2}"); [EOL] } <line_num>: 560,565
public void testNoInlineIfParametersModified4() { [EOL]     test("function f(x){return x?(x=2):0}f(2)", "{var x$$inline_0=2;" + "x$$inline_0?(" + "x$$inline_0=2):0}"); [EOL] } <line_num>: 567,573
public void testNoInlineIfParametersModified5() { [EOL]     test("function f(x,y){return x?(y=2):0}f(2,undefined)", "{var y$$inline_1=undefined;2?(" + "y$$inline_1=2):0}"); [EOL] } <line_num>: 575,580
public void testNoInlineIfParametersModified6() { [EOL]     test("function f(x,y){return x?(y=2):0}f(2)", "{var y$$inline_1=void 0;2?(" + "y$$inline_1=2):0}"); [EOL] } <line_num>: 582,586
public void testNoInlineIfParametersModified7() { [EOL]     test("function f(a){return++a<++a}f(1)", "{var a$$inline_0=1;" + "++a$$inline_0<" + "++a$$inline_0}"); [EOL] } <line_num>: 588,594
public void testNoInlineIfParametersModified8() { [EOL]     test("function f(a){return a.x=2}f(o)", "o.x=2"); [EOL] } <line_num>: 596,599
public void testNoInlineIfParametersModified9() { [EOL]     test("function f(a){return a[2]=2}f(o)", "o[2]=2"); [EOL] } <line_num>: 601,604
public void testInlineNeverPartialSubtitution1() { [EOL]     test("function f(z){return x.y.z;}f(1)", "x.y.z"); [EOL] } <line_num>: 606,609
public void testInlineNeverPartialSubtitution2() { [EOL]     test("function f(z){return x.y[z];}f(a)", "x.y[a]"); [EOL] } <line_num>: 611,614
public void testInlineNeverMutateConstants() { [EOL]     test("function f(x){return x=1}f(undefined)", "{var x$$inline_0=undefined;" + "x$$inline_0=1}"); [EOL] } <line_num>: 616,620
public void testInlineNeverOverrideNewValues() { [EOL]     test("function f(a){return++a<++a}f(1)", "{var a$$inline_0=1;" + "++a$$inline_0<++a$$inline_0}"); [EOL] } <line_num>: 622,626
public void testInlineMutableArgsReferencedOnce() { [EOL]     test("function foo(x){return x;}foo([])", "[]"); [EOL] } <line_num>: 628,630
public void testNoInlineMutableArgs1() { [EOL]     allowBlockInlining = false; [EOL]     testSame("function foo(x){return x+x} foo([])"); [EOL] } <line_num>: 632,635
public void testNoInlineMutableArgs2() { [EOL]     allowBlockInlining = false; [EOL]     testSame("function foo(x){return x+x} foo(new Date)"); [EOL] } <line_num>: 637,640
public void testNoInlineMutableArgs3() { [EOL]     allowBlockInlining = false; [EOL]     testSame("function foo(x){return x+x} foo(true&&new Date)"); [EOL] } <line_num>: 642,645
public void testNoInlineMutableArgs4() { [EOL]     allowBlockInlining = false; [EOL]     testSame("function foo(x){return x+x} foo({})"); [EOL] } <line_num>: 647,650
public void testInlineBlockMutableArgs1() { [EOL]     test("function foo(x){x+x}foo([])", "{var x$$inline_0=[];" + "x$$inline_0+x$$inline_0}"); [EOL] } <line_num>: 652,656
public void testInlineBlockMutableArgs2() { [EOL]     test("function foo(x){x+x}foo(new Date)", "{var x$$inline_0=new Date;" + "x$$inline_0+x$$inline_0}"); [EOL] } <line_num>: 658,662
public void testInlineBlockMutableArgs3() { [EOL]     test("function foo(x){x+x}foo(true&&new Date)", "{var x$$inline_0=true&&new Date;" + "x$$inline_0+x$$inline_0}"); [EOL] } <line_num>: 664,668
public void testInlineBlockMutableArgs4() { [EOL]     test("function foo(x){x+x}foo({})", "{var x$$inline_0={};" + "x$$inline_0+x$$inline_0}"); [EOL] } <line_num>: 670,674
public void testShadowVariables1() { [EOL]     test("var a=0;" + "function foo(a){return 3+a}" + "function bar(){var a=foo(4)}" + "bar();", "var a=0;" + "{var a$$inline_0=3+4}"); [EOL] } <line_num>: 676,689
public void testShadowVariables2() { [EOL]     test("var a=0;" + "function foo(a){return 3+a}" + "function bar(){a=foo(4)}" + "bar()", "var a=0;" + "{a=3+4}"); [EOL] } <line_num>: 691,702
public void testShadowVariables3() { [EOL]     test("var a=0;" + "function foo(){var a=2;return 3+a}" + "function _bar(){a=foo()}", "var a=0;" + "function _bar(){{var a$$inline_0=2;" + "a=3+a$$inline_0}}"); [EOL] } <line_num>: 704,713
public void testShadowVariables4() { [EOL]     test("var a=0;" + "function foo(){return 3+a}" + "function _bar(a){a=foo(4)+a}", "var a=0;function _bar(a$$1){" + "a$$1=" + "3+a+a$$1}"); [EOL] } <line_num>: 715,725
public void testShadowVariables5() { [EOL]     allowBlockInlining = false; [EOL]     testSame("var a=0;" + "function foo(){var a=4;return 3+a}" + "function _bar(a){a=foo(4)+a}"); [EOL] } <line_num>: 727,734
public void testShadowVariables6() { [EOL]     test("var a=0;" + "function foo(){var a=4;return 3+a}" + "function _bar(a){a=foo(4)}", "var a=0;function _bar(a$$2){{" + "var a$$inline_0=4;" + "a$$2=3+a$$inline_0}}"); [EOL] } <line_num>: 736,744
public void testShadowVariables7() { [EOL]     assumeMinimumCapture = false; [EOL]     test("var a=3;" + "function foo(){return a}" + "(function(){var a=5;(function(){foo()})()})()", "var a=3;" + "{var a$$inline_0=5;{a}}"); [EOL]     assumeMinimumCapture = true; [EOL]     test("var a=3;" + "function foo(){return a}" + "(function(){var a=5;(function(){foo()})()})()", "var a=3;" + "{var a$$inline_1=5;{a}}"); [EOL] } <line_num>: 746,762
public void testShadowVariables8() { [EOL]     test("var a=0;" + "function foo(){return 3}" + "function _bar(){var a=foo()}", "var a=0;" + "function _bar(){var a=3}"); [EOL] } <line_num>: 764,772
public void testShadowVariables9() { [EOL]     test("function foo(){return 3}" + "function _bar(){var a=foo()}", "function _bar(){var a=3}"); [EOL] } <line_num>: 774,780
public void testShadowVariables10() { [EOL]     test("var a;function foo(){return a}" + "function _bar(){var a=foo()}", "var a;function _bar(){var a$$1=a}"); [EOL] } <line_num>: 782,787
public void testShadowVariables11() { [EOL]     test("var a=0;var b=1;" + "function foo(){return a+a}" + "function _bar(){var a=foo();alert(a)}", "var a=0;var b=1;" + "function _bar(){var a$$1=a+a;" + "alert(a$$1)}"); [EOL] } <line_num>: 789,799
public void testShadowVariables12() { [EOL]     test("var a=0;var b=1;" + "function foo(){return a+b}" + "function _bar(){var a=foo(),b;alert(a)}", "var a=0;var b=1;" + "function _bar(){var a$$1=a+b," + "b$$1;" + "alert(a$$1)}"); [EOL] } <line_num>: 801,810
public void testShadowVariables13() { [EOL]     test("var a=0;var b=1;" + "function foo(){return a+a}" + "function _bar(){var c=foo();alert(c)}", "var a=0;var b=1;" + "function _bar(){var c=a+a;alert(c)}"); [EOL] } <line_num>: 812,820
public void testShadowVariables14() { [EOL]     test("var a=0;var b=1;" + "function foo(){return a+b}" + "function _bar(){var c=foo(),b;alert(c)}", "var a=0;var b=1;" + "function _bar(){var c=a+b," + "b$$1;alert(c)}"); [EOL] } <line_num>: 822,830
public void testShadowVariables15() { [EOL]     test("var a=0;var b=1;" + "function foo(){return a+a}" + "function _bar(){var c=foo();alert(c+a)}", "var a=0;var b=1;" + "function _bar(){var c=a+a;alert(c+a)}"); [EOL] } <line_num>: 832,840
public void testShadowVariables16() { [EOL]     assumeMinimumCapture = false; [EOL]     test("var a=3;" + "function foo(){return a}" + "(function(){var a=5;(function(){foo()})()})()", "var a=3;" + "{var a$$inline_0=5;{a}}"); [EOL]     assumeMinimumCapture = true; [EOL]     test("var a=3;" + "function foo(){return a}" + "(function(){var a=5;(function(){foo()})()})()", "var a=3;" + "{var a$$inline_1=5;{a}}"); [EOL] } <line_num>: 842,861
public void testShadowVariables17() { [EOL]     test("var a=0;" + "function bar(){return a+a}" + "function foo(){return bar()}" + "function _goo(){var a=2;var x=foo();}", "var a=0;" + "function _goo(){var a$$1=2;var x=a+a}"); [EOL] } <line_num>: 863,871
public void testShadowVariables18() { [EOL]     test("var a=0;" + "function bar(){return a+a}" + "function foo(){var a=3;return bar()}" + "function _goo(){var a=2;var x=foo();}", "var a=0;" + "function _goo(){var a$$2=2;var x;" + "{var a$$inline_0=3;x=a+a}}"); [EOL] } <line_num>: 873,882
public void testCostBasedInlining1() { [EOL]     testSame("function foo(a){return a}" + "foo=new Function(\"return 1\");" + "foo(1)"); [EOL] } <line_num>: 884,889
public void testCostBasedInlining2() { [EOL]     test("function foo(a){return a}" + "var b=foo;" + "function _t1(){return foo(1)}", "function foo(a){return a}" + "var b=foo;" + "function _t1(){return 1}"); [EOL] } <line_num>: 891,902
public void testCostBasedInlining3() { [EOL]     test("function foo(a,b){return a+b}" + "var b=foo;" + "function _t1(){return foo(1,2)}" + "function _t2(){return foo(2,3)}", "function foo(a,b){return a+b}" + "var b=foo;" + "function _t1(){return 1+2}" + "function _t2(){return 2+3}"); [EOL] } <line_num>: 904,916
public void testCostBasedInlining4() { [EOL]     testSame("function foo(a,b){return a+b+a+b}" + "var b=foo;" + "function _t1(){return foo(1,2)}" + "function _t2(){return foo(2,3)}"); [EOL] } <line_num>: 918,926
public void testCostBasedInlining5() { [EOL]     test("function foo(a,b){return a+b+a+b}" + "function _t1(){return foo(1,2)}" + "function _t2(){return foo(2,3)}", "function _t1(){return 1+2+1+2}" + "function _t2(){return 2+3+2+3}"); [EOL] } <line_num>: 928,937
public void testCostBasedInlining6() { [EOL]     test("function foo(a,b){return a+b+a+b+a+b+a+b+4+5+6+7+8+9+1+2+3+4+5}" + "function _t1(){return foo(1,2)}" + "function _t2(){return foo(2,3)}", "function _t1(){return 1+2+1+2+1+2+1+2+4+5+6+7+8+9+1+2+3+4+5}" + "function _t2(){return 2+3+2+3+2+3+2+3+4+5+6+7+8+9+1+2+3+4+5}"); [EOL] } <line_num>: 939,949
public void testCostBasedInlining7() { [EOL]     testSame("function foo(a,b){" + "    return a+b+a+b+a+b+a+b+4+5+6+7+8+9+1+2+3+4+5+6}" + "function _t1(){return foo(1,2)}" + "function _t2(){return foo(2,3)}"); [EOL] } <line_num>: 951,958
public void testCostBasedInlining8() { [EOL]     allowBlockInlining = false; [EOL]     testSame("function f(a){return 1 + a + a;}" + "var a = f(f(1));"); [EOL] } <line_num>: 960,971
public void testCostBasedInlining9() { [EOL]     test("function f(a){return 1 + a + a;}" + "var a = f(f(1));", "var a;" + "{var a$$inline_0=1+1+1;" + "a=1+a$$inline_0+a$$inline_0}"); [EOL] } <line_num>: 973,982
public void testCostBasedInlining10() { [EOL]     allowBlockInlining = false; [EOL]     test("function f(a){return a + a;}" + "var a = f(f(1));", "var a= 1+1+(1+1);"); [EOL] } <line_num>: 984,992
public void testCostBasedInlining11() { [EOL]     test("function f(a){return a + a;}" + "var a = f(f(1))", "var a;" + "{var a$$inline_0=1+1;" + "a=a$$inline_0+a$$inline_0}"); [EOL] } <line_num>: 994,1001
public void testCostBasedInlining12() { [EOL]     test("function f(a){return 1 + a + a;}" + "var a = f(1) + f(2);", "var a=1+1+1+(1+2+2)"); [EOL] } <line_num>: 1003,1008
public void testCostBasedInliningComplex1() { [EOL]     testSame("function foo(a){a()}" + "foo=new Function(\"return 1\");" + "foo(1)"); [EOL] } <line_num>: 1010,1015
public void testCostBasedInliningComplex2() { [EOL]     test("function foo(a){a()}" + "var b=foo;" + "function _t1(){foo(x)}", "function foo(a){a()}" + "var b=foo;" + "function _t1(){{x()}}"); [EOL] } <line_num>: 1017,1028
public void testCostBasedInliningComplex3() { [EOL]     test("function foo(a,b){a+b}" + "var b=foo;" + "function _t1(){foo(1,2)}" + "function _t2(){foo(2,3)}", "function foo(a,b){a+b}" + "var b=foo;" + "function _t1(){{1+2}}" + "function _t2(){{2+3}}"); [EOL] } <line_num>: 1030,1042
public void testCostBasedInliningComplex4() { [EOL]     testSame("function foo(a,b){a+b+a+b}" + "var b=foo;" + "function _t1(){foo(1,2)}" + "function _t2(){foo(2,3)}"); [EOL] } <line_num>: 1044,1052
public void testCostBasedInliningComplex5() { [EOL]     test("function foo(a,b){a+b+a+b}" + "function _t1(){foo(1,2)}" + "function _t2(){foo(2,3)}", "function _t1(){{1+2+1+2}}" + "function _t2(){{2+3+2+3}}"); [EOL] } <line_num>: 1054,1063
public void testCostBasedInliningComplex6() { [EOL]     test("function foo(a,b){a+b+a+b+a+b+a+b+4+5+6+7+8+9+1}" + "function _t1(){foo(1,2)}" + "function _t2(){foo(2,3)}", "function _t1(){{1+2+1+2+1+2+1+2+4+5+6+7+8+9+1}}" + "function _t2(){{2+3+2+3+2+3+2+3+4+5+6+7+8+9+1}}"); [EOL] } <line_num>: 1065,1075
public void testCostBasedInliningComplex7() { [EOL]     testSame("function foo(a,b){a+b+a+b+a+b+a+b+4+5+6+7+8+9+1+2}" + "function _t1(){foo(1,2)}" + "function _t2(){foo(2,3)}"); [EOL] } <line_num>: 1077,1083
public void testCostBasedInliningComplex8() { [EOL]     testSame("function _f(a){1+a+a}" + "a=_f(1)+_f(1)"); [EOL] } <line_num>: 1085,1089
public void testCostBasedInliningComplex9() { [EOL]     test("function f(a){1 + a + a;}" + "f(1);f(2);", "{1+1+1}{1+2+2}"); [EOL] } <line_num>: 1091,1095
public void testDoubleInlining1() { [EOL]     allowBlockInlining = false; [EOL]     test("var foo = function(a) { return getWindow(a); };" + "var bar = function(b) { return b; };" + "foo(bar(x));", "getWindow(x)"); [EOL] } <line_num>: 1097,1103
public void testDoubleInlining2() { [EOL]     test("var foo = function(a) { return getWindow(a); };" + "var bar = function(b) { return b; };" + "foo(bar(x));", "{getWindow(x)}"); [EOL] } <line_num>: 1105,1110
public void testNoInlineOfNonGlobalFunction1() { [EOL]     test("var g;function _f(){function g(){return 0}}" + "function _h(){return g()}", "var g;function _f(){}" + "function _h(){return g()}"); [EOL] } <line_num>: 1112,1117
public void testNoInlineOfNonGlobalFunction2() { [EOL]     test("var g;function _f(){var g=function(){return 0}}" + "function _h(){return g()}", "var g;function _f(){}" + "function _h(){return g()}"); [EOL] } <line_num>: 1119,1124
public void testNoInlineOfNonGlobalFunction3() { [EOL]     test("var g;function _f(){var g=function(){return 0}}" + "function _h(){return g()}", "var g;function _f(){}" + "function _h(){return g()}"); [EOL] } <line_num>: 1126,1131
public void testNoInlineOfNonGlobalFunction4() { [EOL]     test("var g;function _f(){function g(){return 0}}" + "function _h(){return g()}", "var g;function _f(){}" + "function _h(){return g()}"); [EOL] } <line_num>: 1133,1139
public void testNoInlineMaskedFunction() { [EOL]     test("var g=function(){return 0};" + "function _f(g){return g()}", "function _f(g$$1){return g$$1()}"); [EOL] } <line_num>: 1141,1147
public void testNoInlineNonFunction() { [EOL]     testSame("var g=3;function _f(){return g()}"); [EOL] } <line_num>: 1149,1151
public void testInlineCall() { [EOL]     test("function f(g) { return g.h(); } f('x');", "\"x\".h()"); [EOL] } <line_num>: 1153,1156
public void testInlineFunctionWithArgsMismatch1() { [EOL]     test("function f(g) { return g; } f();", "void 0"); [EOL] } <line_num>: 1158,1161
public void testInlineFunctionWithArgsMismatch2() { [EOL]     test("function f() { return 0; } f(1);", "0"); [EOL] } <line_num>: 1163,1166
public void testInlineFunctionWithArgsMismatch3() { [EOL]     test("function f(one, two, three) { return one + two + three; } f(1);", "1+void 0+void 0"); [EOL] } <line_num>: 1168,1171
public void testInlineFunctionWithArgsMismatch4() { [EOL]     test("function f(one, two, three) { return one + two + three; }" + "f(1,2,3,4,5);", "1+2+3"); [EOL] } <line_num>: 1173,1177
public void testArgumentsWithSideEffectsNeverInlined1() { [EOL]     allowBlockInlining = false; [EOL]     testSame("function f(){return 0} f(new goo());"); [EOL] } <line_num>: 1179,1182
public void testArgumentsWithSideEffectsNeverInlined2() { [EOL]     allowBlockInlining = false; [EOL]     testSame("function f(g,h){return h+g}f(g(),h());"); [EOL] } <line_num>: 1184,1187
public void testOneSideEffectCallDoesNotRuinOthers() { [EOL]     allowBlockInlining = false; [EOL]     test("function f(){return 0}f(new goo());f()", "function f(){return 0}f(new goo());0"); [EOL] } <line_num>: 1189,1193
public void testComplexInlineNoResultNoParamCall1() { [EOL]     test("function f(){a()}f()", "{a()}"); [EOL] } <line_num>: 1195,1198
public void testComplexInlineNoResultNoParamCall2() { [EOL]     test("function f(){if (true){return;}else;} f();", "{JSCompiler_inline_label_f_0:{" + "if(true)break JSCompiler_inline_label_f_0;else;}}"); [EOL] } <line_num>: 1200,1204
public void testComplexInlineNoResultNoParamCall3() { [EOL]     test("function f(){a();b();var z=1+1}function _foo(){f()}", "function _foo(){{a();b();var z$$inline_0=1+1}}"); [EOL] } <line_num>: 1206,1215
public void testComplexInlineNoResultWithParamCall1() { [EOL]     test("function f(x){a(x)}f(1)", "{a(1)}"); [EOL] } <line_num>: 1217,1220
public void testComplexInlineNoResultWithParamCall2() { [EOL]     test("function f(x,y){a(x)}var b=1;f(1,b)", "var b=1;{a(1)}"); [EOL] } <line_num>: 1222,1225
public void testComplexInlineNoResultWithParamCall3() { [EOL]     test("function f(x,y){if (x) y(); return true;}var b=1;f(1,b)", "var b=1;{if(1)b();true}"); [EOL] } <line_num>: 1227,1230
public void testComplexInline1() { [EOL]     test("function f(){if (true){return;}else;} z=f();", "{JSCompiler_inline_label_f_0:" + "{if(true){z=void 0;" + "break JSCompiler_inline_label_f_0}else;z=void 0}}"); [EOL] } <line_num>: 1232,1237
public void testComplexInline2() { [EOL]     test("function f(){if (true){return;}else return;} z=f();", "{JSCompiler_inline_label_f_0:{if(true){z=void 0;" + "break JSCompiler_inline_label_f_0}else{z=void 0;" + "break JSCompiler_inline_label_f_0}z=void 0}}"); [EOL] } <line_num>: 1239,1244
public void testComplexInline3() { [EOL]     test("function f(){if (true){return 1;}else return 0;} z=f();", "{JSCompiler_inline_label_f_0:{if(true){z=1;" + "break JSCompiler_inline_label_f_0}else{z=0;" + "break JSCompiler_inline_label_f_0}z=void 0}}"); [EOL] } <line_num>: 1246,1251
public void testComplexInline4() { [EOL]     test("function f(x){a(x)} z = f(1)", "{a(1);z=void 0}"); [EOL] } <line_num>: 1253,1256
public void testComplexInline5() { [EOL]     test("function f(x,y){a(x)}var b=1;z=f(1,b)", "var b=1;{a(1);z=void 0}"); [EOL] } <line_num>: 1258,1261
public void testComplexInline6() { [EOL]     test("function f(x,y){if (x) y(); return true;}var b=1;z=f(1,b)", "var b=1;{if(1)b();z=true}"); [EOL] } <line_num>: 1263,1266
public void testComplexInline7() { [EOL]     test("function f(x,y){if (x) return y(); else return true;}" + "var b=1;z=f(1,b)", "var b=1;{JSCompiler_inline_label_f_2:{if(1){z=b();" + "break JSCompiler_inline_label_f_2}else{z=true;" + "break JSCompiler_inline_label_f_2}z=void 0}}"); [EOL] } <line_num>: 1268,1274
public void testComplexInline8() { [EOL]     test("function f(x){a(x)}var z=f(1)", "var z;{a(1);z=void 0}"); [EOL] } <line_num>: 1276,1279
public void testComplexInlineVars1() { [EOL]     test("function f(){if (true){return;}else;}var z=f();", "var z;{JSCompiler_inline_label_f_0:{" + "if(true){z=void 0;break JSCompiler_inline_label_f_0}else;z=void 0}}"); [EOL] } <line_num>: 1281,1285
public void testComplexInlineVars2() { [EOL]     test("function f(){if (true){return;}else return;}var z=f();", "var z;{JSCompiler_inline_label_f_0:{" + "if(true){z=void 0;break JSCompiler_inline_label_f_0" + "}else{" + "z=void 0;break JSCompiler_inline_label_f_0}z=void 0}}"); [EOL] } <line_num>: 1287,1293
public void testComplexInlineVars3() { [EOL]     test("function f(){if (true){return 1;}else return 0;}var z=f();", "var z;{JSCompiler_inline_label_f_0:{if(true){" + "z=1;break JSCompiler_inline_label_f_0" + "}else{" + "z=0;break JSCompiler_inline_label_f_0}z=void 0}}"); [EOL] } <line_num>: 1295,1301
public void testComplexInlineVars4() { [EOL]     test("function f(x){a(x)}var z = f(1)", "var z;{a(1);z=void 0}"); [EOL] } <line_num>: 1303,1306
public void testComplexInlineVars5() { [EOL]     test("function f(x,y){a(x)}var b=1;var z=f(1,b)", "var b=1;var z;{a(1);z=void 0}"); [EOL] } <line_num>: 1308,1311
public void testComplexInlineVars6() { [EOL]     test("function f(x,y){if (x) y(); return true;}var b=1;var z=f(1,b)", "var b=1;var z;{if(1)b();z=true}"); [EOL] } <line_num>: 1313,1316
public void testComplexInlineVars7() { [EOL]     test("function f(x,y){if (x) return y(); else return true;}" + "var b=1;var z=f(1,b)", "var b=1;var z;" + "{JSCompiler_inline_label_f_2:{if(1){z=b();" + "break JSCompiler_inline_label_f_2" + "}else{" + "z=true;break JSCompiler_inline_label_f_2}z=void 0}}"); [EOL] } <line_num>: 1318,1326
public void testComplexInlineVars8() { [EOL]     test("function f(x){a(x)}var x;var z=f(1)", "var x;var z;{a(1);z=void 0}"); [EOL] } <line_num>: 1328,1331
public void testComplexInlineVars9() { [EOL]     test("function f(x){a(x)}var x;var z=f(1);var y", "var x;var z;{a(1);z=void 0}var y"); [EOL] } <line_num>: 1333,1336
public void testComplexInlineVars10() { [EOL]     test("function f(x){a(x)}var x=blah();var z=f(1);var y=blah();", "var x=blah();var z;{a(1);z=void 0}var y=blah()"); [EOL] } <line_num>: 1338,1341
public void testComplexInlineVars11() { [EOL]     test("function f(x){a(x)}var x=blah();var z=f(1);var y;", "var x=blah();var z;{a(1);z=void 0}var y"); [EOL] } <line_num>: 1343,1346
public void testComplexInlineVars12() { [EOL]     test("function f(x){a(x)}var x;var z=f(1);var y=blah();", "var x;var z;{a(1);z=void 0}var y=blah()"); [EOL] } <line_num>: 1348,1351
public void testComplexInlineInExpresssions1() { [EOL]     test("function f(){a()}var z=f()", "var z;{a();z=void 0}"); [EOL] } <line_num>: 1353,1356
public void testComplexInlineInExpresssions2() { [EOL]     test("function f(){a()}c=z=f()", "var JSCompiler_inline_result$$0;" + "{a();JSCompiler_inline_result$$0=void 0;}" + "c=z=JSCompiler_inline_result$$0"); [EOL] } <line_num>: 1358,1363
public void testComplexInlineInExpresssions3() { [EOL]     test("function f(){a()}c=z=f()", "var JSCompiler_inline_result$$0;" + "{a();JSCompiler_inline_result$$0=void 0;}" + "c=z=JSCompiler_inline_result$$0"); [EOL] } <line_num>: 1365,1370
public void testComplexInlineInExpresssions4() { [EOL]     test("function f(){a()}if(z=f());", "var JSCompiler_inline_result$$0;" + "{a();JSCompiler_inline_result$$0=void 0;}" + "if(z=JSCompiler_inline_result$$0);"); [EOL] } <line_num>: 1372,1377
public void testComplexInlineInExpresssions5() { [EOL]     test("function f(){a()}if(z.y=f());", "var JSCompiler_temp_const$$0=z;" + "var JSCompiler_inline_result$$1;" + "{a();JSCompiler_inline_result$$1=void 0;}" + "if(JSCompiler_temp_const$$0.y=JSCompiler_inline_result$$1);"); [EOL] } <line_num>: 1379,1385
public void testComplexNoInline1() { [EOL]     testSame("function f(){a()}while(z=f())continue"); [EOL] } <line_num>: 1387,1389
public void testComplexNoInline2() { [EOL]     testSame("function f(){a()}do;while(z=f())"); [EOL] } <line_num>: 1391,1393
public void testComplexSample() { [EOL]     String result = "" + "{{" + "var styleSheet$$inline_2=null;" + "if(goog$userAgent$IE)" + "styleSheet$$inline_2=0;" + "else " + "var head$$inline_3=0;" + "{" + "var element$$inline_4=" + "styleSheet$$inline_2;" + "var stylesString$$inline_5=a;" + "if(goog$userAgent$IE)" + "element$$inline_4.cssText=" + "stylesString$$inline_5;" + "else " + "{" + "var propToSet$$inline_6=" + "\"innerText\";" + "element$$inline_4[" + "propToSet$$inline_6]=" + "stylesString$$inline_5" + "}" + "}" + "styleSheet$$inline_2" + "}}"; [EOL]     test("var foo = function(stylesString, opt_element) { " + "var styleSheet = null;" + "if (goog$userAgent$IE)" + "styleSheet = 0;" + "else " + "var head = 0;" + "" + "goo$zoo(styleSheet, stylesString);" + "return styleSheet;" + " };\n " + "var goo$zoo = function(element, stylesString) {" + "if (goog$userAgent$IE)" + "element.cssText = stylesString;" + "else {" + "var propToSet = 'innerText';" + "element[propToSet] = stylesString;" + "}" + "};" + "(function(){foo(a,b);})();", result); [EOL] } <line_num>: 1395,1443
public void testComplexSampleNoInline() { [EOL]     String result = "foo=function(stylesString,opt_element){" + "var styleSheet=null;" + "if(goog$userAgent$IE){" + "styleSheet=0" + "}else{" + "var head=0" + "}" + "{var JSCompiler_inline_element_0=styleSheet;" + "var JSCompiler_inline_stylesString_1=stylesString;" + "if(goog$userAgent$IE){" + "JSCompiler_inline_element_0.cssText=" + "JSCompiler_inline_stylesString_1" + "}else{" + "var propToSet=goog$userAgent$WEBKIT?\"innerText\":\"innerHTML\";" + "JSCompiler_inline_element_0[propToSet]=" + "JSCompiler_inline_stylesString_1" + "}}" + "return styleSheet" + "}"; [EOL]     testSame("foo=function(stylesString,opt_element){" + "var styleSheet=null;" + "if(goog$userAgent$IE)" + "styleSheet=0;" + "else " + "var head=0;" + "" + "goo$zoo(styleSheet,stylesString);" + "return styleSheet" + "};" + "goo$zoo=function(element,stylesString){" + "if(goog$userAgent$IE)" + "element.cssText=stylesString;" + "else{" + "var propToSet=goog$userAgent$WEBKIT?\"innerText\":\"innerHTML\";" + "element[propToSet]=stylesString" + "}" + "}"); [EOL] } <line_num>: 1445,1487
public void testComplexNoVarSub() { [EOL]     test("function foo(x){" + "var x;" + "y=x" + "}" + "foo(1)", "{y=1}"); [EOL] } <line_num>: 1490,1500
public void testComplexFunctionWithFunctionDefinition1() { [EOL]     test("function f(){call(function(){return})}f()", "{call(function(){return})}"); [EOL] } <line_num>: 1502,1505
public void testComplexFunctionWithFunctionDefinition2() { [EOL]     assumeMinimumCapture = false; [EOL]     testSame("function f(a){call(function(){return})}f()"); [EOL]     assumeMinimumCapture = true; [EOL]     test("(function(){" + "var f = function(a){call(function(){return a})};f()})()", "{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}"); [EOL] } <line_num>: 1507,1518
public void testComplexFunctionWithFunctionDefinition2a() { [EOL]     assumeMinimumCapture = false; [EOL]     testSame("(function(){" + "var f = function(a){call(function(){return a})};f()})()"); [EOL]     assumeMinimumCapture = true; [EOL]     test("(function(){" + "var f = function(a){call(function(){return a})};f()})()", "{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}"); [EOL] } <line_num>: 1520,1532
public void testComplexFunctionWithFunctionDefinition3() { [EOL]     assumeMinimumCapture = false; [EOL]     testSame("function f(){var a; call(function(){return a})}f()"); [EOL]     assumeMinimumCapture = true; [EOL]     test("function f(){var a; call(function(){return a})}f()", "{var a$$inline_0;call(function(){return a$$inline_0})}"); [EOL] } <line_num>: 1534,1545
public void testDecomposePlusEquals() { [EOL]     test("function f(){a=1;return 1} var x = 1; x += f()", "var x = 1;" + "var JSCompiler_temp_const$$0 = x;" + "var JSCompiler_inline_result$$1;" + "{a=1;" + " JSCompiler_inline_result$$1=1}" + "x = JSCompiler_temp_const$$0 + JSCompiler_inline_result$$1;"); [EOL] } <line_num>: 1547,1555
public void testDecomposeFunctionExpressionInCall() { [EOL]     test("(function(map){descriptions_=map})(\n" + "function(){\n" + "var ret={};\n" + "ret[ONE]='a';\n" + "ret[TWO]='b';\n" + "return ret\n" + "}()\n" + ");", "var JSCompiler_inline_result$$0;" + "{" + "var ret$$inline_1={};\n" + "ret$$inline_1[ONE]='a';\n" + "ret$$inline_1[TWO]='b';\n" + "JSCompiler_inline_result$$0 = ret$$inline_1;\n" + "}" + "{" + "descriptions_=JSCompiler_inline_result$$0;" + "}"); [EOL] } <line_num>: 1557,1578
public void testInlineConstructor1() { [EOL]     test("function f() {} function _g() {f.call(this)}", "function _g() {void 0}"); [EOL] } <line_num>: 1580,1583
public void testInlineConstructor2() { [EOL]     test("function f() {} f.prototype.a = 0; function _g() {f.call(this)}", "function f() {} f.prototype.a = 0; function _g() {void 0}"); [EOL] } <line_num>: 1585,1588
public void testInlineConstructor3() { [EOL]     test("function f() {x.call(this)} f.prototype.a = 0;" + "function _g() {f.call(this)}", "function f() {x.call(this)} f.prototype.a = 0;" + "function _g() {{x.call(this)}}"); [EOL] } <line_num>: 1590,1595
public void testInlineConstructor4() { [EOL]     test("function f() {x.call(this)} f.prototype.a = 0;" + "function _g() {var t = f.call(this)}", "function f() {x.call(this)} f.prototype.a = 0;" + "function _g() {var t; {x.call(this); t = void 0}}"); [EOL] } <line_num>: 1597,1602
public void testFunctionExpressionInlining1() { [EOL]     test("(function(){})()", "void 0"); [EOL] } <line_num>: 1604,1607
public void testFunctionExpressionInlining2() { [EOL]     test("(function(){foo()})()", "{foo()}"); [EOL] } <line_num>: 1609,1612
public void testFunctionExpressionInlining3() { [EOL]     test("var a = (function(){return foo()})()", "var a = foo()"); [EOL] } <line_num>: 1614,1617
public void testFunctionExpressionInlining4() { [EOL]     test("var a; a = 1 + (function(){return foo()})()", "var a; a = 1 + foo()"); [EOL] } <line_num>: 1619,1622
public void testFunctionExpressionCallInlining1() { [EOL]     test("(function(){}).call(this)", "void 0"); [EOL] } <line_num>: 1624,1627
public void testFunctionExpressionCallInlining2() { [EOL]     test("(function(){foo(this)}).call(this)", "{foo(this)}"); [EOL] } <line_num>: 1629,1632
public void testFunctionExpressionCallInlining3() { [EOL]     test("var a = (function(){return foo(this)}).call(this)", "var a = foo(this)"); [EOL] } <line_num>: 1634,1637
public void testFunctionExpressionCallInlining4() { [EOL]     test("var a; a = 1 + (function(){return foo(this)}).call(this)", "var a; a = 1 + foo(this)"); [EOL] } <line_num>: 1639,1642
public void testFunctionExpressionCallInlining5() { [EOL]     test("a:(function(){return foo()})()", "a:foo()"); [EOL] } <line_num>: 1644,1647
public void testFunctionExpressionCallInlining6() { [EOL]     test("a:(function(){return foo()}).call(this)", "a:foo()"); [EOL] } <line_num>: 1649,1652
public void testFunctionExpressionCallInlining7() { [EOL]     test("a:(function(){})()", "a:void 0"); [EOL] } <line_num>: 1654,1657
public void testFunctionExpressionCallInlining8() { [EOL]     test("a:(function(){}).call(this)", "a:void 0"); [EOL] } <line_num>: 1659,1662
public void testFunctionExpressionCallInlining9() { [EOL]     test("(function foo(){})()", "void 0"); [EOL] } <line_num>: 1664,1668
public void testFunctionExpressionCallInlining10() { [EOL]     test("(function foo(){}).call(this)", "void 0"); [EOL] } <line_num>: 1670,1674
public void testFunctionExpressionCallInlining11a() { [EOL]     test("((function(){return function(){foo()}})())();", "{foo()}"); [EOL] } <line_num>: 1676,1679
public void testFunctionExpressionCallInlining11b() { [EOL]     assumeMinimumCapture = false; [EOL]     testSame("((function(){var a; return function(){foo()}})())();"); [EOL]     assumeMinimumCapture = true; [EOL]     test("((function(){var a; return function(){foo()}})())();", "var JSCompiler_inline_result$$0;" + "{var a$$inline_1;" + "JSCompiler_inline_result$$0=function(){foo()};}" + "JSCompiler_inline_result$$0()"); [EOL] } <line_num>: 1681,1695
public void testFunctionExpressionCallInlining11c() { [EOL]     assumeMinimumCapture = false; [EOL]     testSame("function _x() {" + "  ((function(){return function(){foo()}})())();" + "}"); [EOL]     assumeMinimumCapture = true; [EOL]     test("function _x() {" + "  ((function(){return function(){foo()}})())();" + "}", "function _x() {" + "  {foo()}" + "}"); [EOL] } <line_num>: 1697,1712
public void testFunctionExpressionCallInlining11d() { [EOL]     assumeMinimumCapture = false; [EOL]     testSame("function _x() {" + "  eval();" + "  ((function(){return function(){foo()}})())();" + "}"); [EOL]     assumeMinimumCapture = true; [EOL]     test("function _x() {" + "  eval();" + "  ((function(){return function(){foo()}})())();" + "}", "function _x() {" + "  eval();" + "  {foo()}" + "}"); [EOL] } <line_num>: 1714,1734
public void testFunctionExpressionCallInlining11e() { [EOL]     assumeMinimumCapture = false; [EOL]     testSame("function _x() {" + "  eval();" + "  ((function(a){return function(){foo()}})())();" + "}"); [EOL]     assumeMinimumCapture = true; [EOL]     test("function _x() {" + "  eval();" + "  ((function(a){return function(){foo()}})())();" + "}", "function _x() {" + "  eval();" + "  {foo();}" + "}"); [EOL] } <line_num>: 1736,1754
public void testFunctionExpressionCallInlining12() { [EOL]     testSame("(function foo(){foo()})()"); [EOL] } <line_num>: 1756,1759
public void testFunctionExpressionOmega() { [EOL]     test("(function (f){f(f)})(function(f){f(f)})", "{var f$$inline_0=function(f$$1){f$$1(f$$1)};" + "{{f$$inline_0(f$$inline_0)}}}"); [EOL] } <line_num>: 1761,1766
public void testLocalFunctionInlining1() { [EOL]     test("function _f(){ function g() {} g() }", "function _f(){ void 0 }"); [EOL] } <line_num>: 1768,1771
public void testLocalFunctionInlining2() { [EOL]     test("function _f(){ function g() {foo(); bar();} g() }", "function _f(){ {foo(); bar();} }"); [EOL] } <line_num>: 1773,1776
public void testLocalFunctionInlining3() { [EOL]     test("function _f(){ function g() {foo(); bar();} g() }", "function _f(){ {foo(); bar();} }"); [EOL] } <line_num>: 1778,1781
public void testLocalFunctionInlining4() { [EOL]     test("function _f(){ function g() {return 1} return g() }", "function _f(){ return 1 }"); [EOL] } <line_num>: 1783,1786
public void testLocalFunctionInlining5() { [EOL]     testSame("function _f(){ function g() {this;} g() }"); [EOL] } <line_num>: 1788,1790
public void testLocalFunctionInlining6() { [EOL]     testSame("function _f(){ function g() {this;} return g; }"); [EOL] } <line_num>: 1792,1794
public void testLocalFunctionInliningOnly1() { [EOL]     this.allowGlobalFunctionInlining = true; [EOL]     test("function f(){} f()", "void 0;"); [EOL]     this.allowGlobalFunctionInlining = false; [EOL]     testSame("function f(){} f()"); [EOL] } <line_num>: 1796,1801
public void testLocalFunctionInliningOnly2() { [EOL]     this.allowGlobalFunctionInlining = false; [EOL]     testSame("function f(){} f()"); [EOL]     test("function f(){ function g() {return 1} return g() }; f();", "function f(){ return 1 }; f();"); [EOL] } <line_num>: 1803,1809
public void testLocalFunctionInliningOnly3() { [EOL]     this.allowGlobalFunctionInlining = false; [EOL]     testSame("function f(){} f()"); [EOL]     test("(function(){ function g() {return 1} return g() })();", "(function(){ return 1 })();"); [EOL] } <line_num>: 1811,1817
public void testLocalFunctionInliningOnly4() { [EOL]     this.allowGlobalFunctionInlining = false; [EOL]     testSame("function f(){} f()"); [EOL]     test("(function(){ return (function() {return 1})() })();", "(function(){ return 1 })();"); [EOL] } <line_num>: 1819,1825
public void testInlineWithThis1() { [EOL]     assumeStrictThis = false; [EOL]     testSame("function f(){} f.call();"); [EOL]     testSame("function f(){this} f.call();"); [EOL]     assumeStrictThis = true; [EOL]     test("function f(){} f.call();", "{}"); [EOL]     test("function f(){this} f.call();", "{void 0;}"); [EOL] } <line_num>: 1827,1839
public void testInlineWithThis2() { [EOL]     assumeStrictThis = false; [EOL]     test("function f(){} f.call(this);", "void 0"); [EOL]     assumeStrictThis = true; [EOL]     test("function f(){} f.call(this);", "void 0"); [EOL] } <line_num>: 1841,1848
public void testInlineWithThis3() { [EOL]     assumeStrictThis = false; [EOL]     testSame("function f(){} f.call([]);"); [EOL]     assumeStrictThis = true; [EOL]     test("function f(){} f.call([]);", "{}"); [EOL] } <line_num>: 1850,1859
public void testInlineWithThis4() { [EOL]     assumeStrictThis = false; [EOL]     testSame("function f(){} f.call(new g);"); [EOL]     assumeStrictThis = true; [EOL]     test("function f(){} f.call(new g);", "{var JSCompiler_inline_this_0=new g}"); [EOL] } <line_num>: 1861,1871
public void testInlineWithThis5() { [EOL]     assumeStrictThis = false; [EOL]     testSame("function f(){} f.call(g());"); [EOL]     assumeStrictThis = true; [EOL]     test("function f(){} f.call(g());", "{var JSCompiler_inline_this_0=g()}"); [EOL] } <line_num>: 1873,1883
public void testInlineWithThis6() { [EOL]     assumeStrictThis = false; [EOL]     testSame("function f(){this} f.call(new g);"); [EOL]     assumeStrictThis = true; [EOL]     test("function f(){this} f.call(new g);", "{var JSCompiler_inline_this_0=new g;JSCompiler_inline_this_0}"); [EOL] } <line_num>: 1885,1895
public void testInlineWithThis7() { [EOL]     assumeStrictThis = true; [EOL]     test("function f(a){a=1;this} f.call();", "{var a$$inline_0=void 0; a$$inline_0=1; void 0;}"); [EOL]     test("function f(a){a=1;this} f.call(x, x);", "{var a$$inline_0=x; a$$inline_0=1; x;}"); [EOL] } <line_num>: 1897,1904
public void testFunctionExpressionYCombinator() { [EOL]     assumeMinimumCapture = false; [EOL]     testSame("var factorial = ((function(M) {\n" + "      return ((function(f) {\n" + "                 return M(function(arg) {\n" + "                            return (f(f))(arg);\n" + "                            })\n" + "               })\n" + "              (function(f) {\n" + "                 return M(function(arg) {\n" + "                            return (f(f))(arg);\n" + "                           })\n" + "                 }));\n" + "     })\n" + "    (function(f) {\n" + "       return function(n) {\n" + "        if (n === 0)\n" + "          return 1;\n" + "        else\n" + "          return n * f(n - 1);\n" + "       };\n" + "     }));\n" + "\n" + "factorial(5)\n"); [EOL]     assumeMinimumCapture = true; [EOL]     test("var factorial = ((function(M) {\n" + "      return ((function(f) {\n" + "                 return M(function(arg) {\n" + "                            return (f(f))(arg);\n" + "                            })\n" + "               })\n" + "              (function(f) {\n" + "                 return M(function(arg) {\n" + "                            return (f(f))(arg);\n" + "                           })\n" + "                 }));\n" + "     })\n" + "    (function(f) {\n" + "       return function(n) {\n" + "        if (n === 0)\n" + "          return 1;\n" + "        else\n" + "          return n * f(n - 1);\n" + "       };\n" + "     }));\n" + "\n" + "factorial(5)\n", "var factorial;\n" + "{\n" + "var M$$inline_4 = function(f$$2) {\n" + "  return function(n){if(n===0)return 1;else return n*f$$2(n-1)}\n" + "};\n" + "{\n" + "var f$$inline_0=function(f$$inline_7){\n" + "  return M$$inline_4(\n" + "    function(arg$$inline_8){\n" + "      return f$$inline_7(f$$inline_7)(arg$$inline_8)\n" + "     })\n" + "};\n" + "factorial=M$$inline_4(\n" + "  function(arg$$inline_1){\n" + "    return f$$inline_0(f$$inline_0)(arg$$inline_1)\n" + "});\n" + "}\n" + "}" + "factorial(5)"); [EOL] } <line_num>: 1907,1976
public void testRenamePropertyFunction() { [EOL]     testSame("function JSCompiler_renameProperty(x) {return x} " + "JSCompiler_renameProperty('foo')"); [EOL] } <line_num>: 1978,1981
public void testReplacePropertyFunction() { [EOL]     test("function f(x) {return x} " + "foo(window, f); f(1)", "function f(x) {return x} " + "foo(window, f); 1"); [EOL]     testSame("function f(x) {return x} " + "new JSCompiler_ObjectPropertyString(window, f); f(1)"); [EOL] } <line_num>: 1983,1994
public void testInlineWithClosureContainingThis() { [EOL]     test("(function (){return f(function(){return this})})();", "f(function(){return this})"); [EOL] } <line_num>: 1996,1999
public void testIssue5159924a() { [EOL]     test("function f() { if (x()) return y() }\n" + "while(1){ var m = f() || z() }", "for(;1;) {" + "  var JSCompiler_inline_result$$0;" + "  {" + "    JSCompiler_inline_label_f_1: {" + "      if(x()) {" + "        JSCompiler_inline_result$$0 = y();" + "        break JSCompiler_inline_label_f_1" + "      }" + "      JSCompiler_inline_result$$0 = void 0;" + "    }" + "  }" + "  var m=JSCompiler_inline_result$$0 || z()" + "}"); [EOL] } <line_num>: 2001,2017
public void testIssue5159924b() { [EOL]     test("function f() { if (x()) return y() }\n" + "while(1){ var m = f() }", "for(;1;){" + "  var m;" + "  {" + "    JSCompiler_inline_label_f_0: { " + "      if(x()) {" + "        m = y();" + "        break JSCompiler_inline_label_f_0" + "      }" + "      m = void 0" + "    }" + "  }" + "}"); [EOL] } <line_num>: 2019,2034
public void testInlineObject() { [EOL]     new StringCompare().testInlineObject(); [EOL] } <line_num>: 2036,2038
@Override [EOL] public void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     super.enableLineNumberCheck(true); [EOL]     allowGlobalFunctionInlining = true; [EOL] } <line_num>: 2049,2054
@Override [EOL] protected CompilerPass getProcessor(Compiler compiler) { [EOL]     compiler.resetUniqueNameId(); [EOL]     return new InlineFunctions(compiler, compiler.getUniqueNameIdSupplier(), allowGlobalFunctionInlining, true, true, true, true); [EOL] } <line_num>: 2056,2067
public void testInlineObject() { [EOL]     allowGlobalFunctionInlining = false; [EOL]     test("function inner(){function f(){return g.a}(f())()}", "function inner(){(0,g.a)()}"); [EOL] } <line_num>: 2069,2078
public void testBug4944818() { [EOL]     test("var getDomServices_ = function(self) {\n" + "  if (!self.domServices_) {\n" + "    self.domServices_ = goog$component$DomServices.get(" + "        self.appContext_);\n" + "  }\n" + "\n" + "  return self.domServices_;\n" + "};\n" + "\n" + "var getOwnerWin_ = function(self) {\n" + "  return getDomServices_(self).getDomHelper().getWindow();\n" + "};\n" + "\n" + "HangoutStarter.prototype.launchHangout = function() {\n" + "  var self = a.b;\n" + "  var myUrl = new goog.Uri(getOwnerWin_(self).location.href);\n" + "};", "HangoutStarter.prototype.launchHangout = function() { " + "  var self$$2 = a.b;" + "  var JSCompiler_temp_const$$0 = goog.Uri;" + "  var JSCompiler_inline_result$$1;" + "  {" + "  var self$$inline_2 = self$$2;" + "  if (!self$$inline_2.domServices_) {" + "    self$$inline_2.domServices_ = goog$component$DomServices.get(" + "        self$$inline_2.appContext_);" + "  }" + "  JSCompiler_inline_result$$1=self$$inline_2.domServices_;" + "  }" + "  var myUrl = new JSCompiler_temp_const$$0(" + "      JSCompiler_inline_result$$1.getDomHelper()." + "          getWindow().location.href)" + "}"); [EOL] } <line_num>: 2081,2116
public void testIssue423() { [EOL]     assumeMinimumCapture = false; [EOL]     test("(function($) {\n" + "  $.fn.multicheck = function(options) {\n" + "    initialize.call(this, options);\n" + "  };\n" + "\n" + "  function initialize(options) {\n" + "    options.checkboxes = $(this).siblings(':checkbox');\n" + "    preload_check_all.call(this);\n" + "  }\n" + "\n" + "  function preload_check_all() {\n" + "    $(this).data('checkboxes');\n" + "  }\n" + "})(jQuery)", "(function($){" + "  $.fn.multicheck=function(options$$1){" + "    {" + "     options$$1.checkboxes=$(this).siblings(\":checkbox\");" + "     {" + "       $(this).data(\"checkboxes\")" + "     }" + "    }" + "  }" + "})(jQuery)"); [EOL]     assumeMinimumCapture = true; [EOL]     test("(function($) {\n" + "  $.fn.multicheck = function(options) {\n" + "    initialize.call(this, options);\n" + "  };\n" + "\n" + "  function initialize(options) {\n" + "    options.checkboxes = $(this).siblings(':checkbox');\n" + "    preload_check_all.call(this);\n" + "  }\n" + "\n" + "  function preload_check_all() {\n" + "    $(this).data('checkboxes');\n" + "  }\n" + "})(jQuery)", "{var $$$inline_0=jQuery;\n" + "$$$inline_0.fn.multicheck=function(options$$inline_4){\n" + "  {options$$inline_4.checkboxes=" + "$$$inline_0(this).siblings(\":checkbox\");\n" + "  {$$$inline_0(this).data(\"checkboxes\")}" + "  }\n" + "}\n" + "}"); [EOL] } <line_num>: 2118,2170
public void testIssue728() { [EOL]     String f = "var f = function() { return false; };"; [EOL]     StringBuilder calls = new StringBuilder(); [EOL]     StringBuilder folded = new StringBuilder(); [EOL]     for (int i = 0; i < 30; i++) { [EOL]         calls.append("if (!f()) alert('x');"); [EOL]         folded.append("if (!false) alert('x');"); [EOL]     } [EOL]     test(f + calls, folded.toString()); [EOL] } <line_num>: 2172,2182
public void testAnonymous1() { [EOL]     assumeMinimumCapture = false; [EOL]     test("(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();", "{var a$$inline_0=10;" + "{var b$$inline_1=a$$inline_0;" + "a$$inline_0++;alert(b$$inline_1)}}"); [EOL]     assumeMinimumCapture = true; [EOL]     test("(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();", "{var a$$inline_2=10;" + "{var b$$inline_0=a$$inline_2;" + "a$$inline_2++;alert(b$$inline_0)}}"); [EOL] } <line_num>: 2184,2196
public void testAnonymous2() { [EOL]     testSame("(function(){eval();(function(){var b=a;a++;alert(b)})()})();"); [EOL] } <line_num>: 2198,2200
public void testAnonymous3() { [EOL]     assumeMinimumCapture = false; [EOL]     testSame("(function(){var a=10;(function(){arguments;})()})();"); [EOL]     assumeMinimumCapture = true; [EOL]     test("(function(){var a=10;(function(){arguments;})()})();", "{var a$$inline_0=10;(function(){arguments;})();}"); [EOL]     test("(function(){(function(){arguments;})()})();", "{(function(){arguments;})()}"); [EOL] } <line_num>: 2202,2213
public void testLoopWithFunctionWithFunction() { [EOL]     assumeMinimumCapture = true; [EOL]     test("function _testLocalVariableInLoop_() {\n" + "  var result = 0;\n" + "  function foo() {\n" + "    var arr = [1, 2, 3, 4, 5];\n" + "    for (var i = 0, l = arr.length; i < l; i++) {\n" + "      var j = arr[i];\n" + "      (function() {\n" + "        var k = j;\n" + "        setTimeout(function() { result += k; }, 5 * i);\n" + "      })();\n" + "    }\n" + "  }\n" + "  foo();\n" + "}", "function _testLocalVariableInLoop_(){\n" + "  var result=0;\n" + "  {" + "  var arr$$inline_0=[1,2,3,4,5];\n" + "  var i$$inline_1=0;\n" + "  var l$$inline_2=arr$$inline_0.length;\n" + "  for(;i$$inline_1<l$$inline_2;i$$inline_1++){\n" + "    var j$$inline_3=arr$$inline_0[i$$inline_1];\n" + "    (function(){\n" + "       var k$$inline_4=j$$inline_3;\n" + "       setTimeout(function(){result+=k$$inline_4},5*i$$inline_1)\n" + "     })()\n" + "  }\n" + "  }\n" + "}"); [EOL] } <line_num>: 2216,2249
public void testMethodWithFunctionWithFunction() { [EOL]     assumeMinimumCapture = true; [EOL]     test("function _testLocalVariable_() {\n" + "  var result = 0;\n" + "  function foo() {\n" + "      var j = [i];\n" + "      (function(j) {\n" + "        setTimeout(function() { result += j; }, 5 * i);\n" + "      })(j);\n" + "      j = null;" + "  }\n" + "  foo();\n" + "}", "function _testLocalVariable_(){\n" + "  var result=0;\n" + "  {\n" + "  var j$$inline_2=[i];\n" + "  {\n" + "  var j$$inline_0=j$$inline_2;\n" + "  setTimeout(function(){result+=j$$inline_0},5*i);\n" + "  }\n" + "  j$$inline_2=null\n" + "  }\n" + "}"); [EOL] } <line_num>: 2251,2275
public void testCrossModuleInlining1() { [EOL]     test(createModuleChain("function foo(){return f(1)+g(2)+h(3);}", "foo()"), new String[] { "", "f(1)+g(2)+h(3);" }); [EOL] } <line_num>: 2278,2292
public void testCrossModuleInlining2() { [EOL]     testSame(createModuleChain("foo()", "function foo(){return f(1)+g(2)+h(3);}")); [EOL]     test(createModuleChain("foo()", "function foo(){return f();}"), new String[] { "f();", "" }); [EOL] } <line_num>: 2296,2318
public void testCrossModuleInlining3() { [EOL]     testSame(createModuleChain("foo()", "function foo(){return f(1)+g(2)+h(3);}", "foo()")); [EOL]     test(createModuleChain("foo()", "function foo(){return f();}", "foo()"), new String[] { "f();", "", "f();" }); [EOL] } <line_num>: 2322,2350
public void test6671158() { [EOL]     test("function f() {return g()}" + "function Y(a){a.loader_()}" + "function _Z(){}" + "function _X() { new _Z(a,b, Y(singleton), f()) }", "function _Z(){}" + "function _X(){" + "  var JSCompiler_temp_const$$2=_Z;" + "  var JSCompiler_temp_const$$1=a;" + "  var JSCompiler_temp_const$$0=b;" + "  var JSCompiler_inline_result$$3;" + "  {" + "    singleton.loader_();" + "    JSCompiler_inline_result$$3=void 0;" + "  }" + "  new JSCompiler_temp_const$$2(" + "    JSCompiler_temp_const$$1," + "    JSCompiler_temp_const$$0," + "    JSCompiler_inline_result$$3," + "    g())}"); [EOL] } <line_num>: 2352,2374
