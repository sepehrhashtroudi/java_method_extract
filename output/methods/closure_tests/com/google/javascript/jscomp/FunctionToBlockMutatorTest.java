TestCallback(String callname, Method method) { [EOL]     this.callname = callname; [EOL]     this.method = method; [EOL] } <line_num>: 262,265
public void testMutateNoReturnWithoutResultAssignment() { [EOL]     helperMutate("function foo(){}; foo();", "{}", "foo"); [EOL] } <line_num>: 35,40
public void testMutateNoReturnWithResultAssignment() { [EOL]     helperMutate("function foo(){}; var result = foo();", "{result = void 0}", "foo", true, false); [EOL] } <line_num>: 42,47
public void testMutateNoValueReturnWithoutResultAssignment() { [EOL]     helperMutate("function foo(){return;}; foo();", "{}", "foo", null); [EOL] } <line_num>: 50,55
public void testMutateNoValueReturnWithResultAssignment() { [EOL]     helperMutate("function foo(){return;}; var result = foo();", "{result = void 0}", "foo"); [EOL] } <line_num>: 57,62
public void testMutateValueReturnWithoutResultAssignment() { [EOL]     helperMutate("function foo(){return true;}; foo();", "{true;}", "foo", null); [EOL] } <line_num>: 64,69
public void testMutateValueReturnWithResultAssignment() { [EOL]     helperMutate("function foo(){return true;}; var x=foo();", "{x=true}", "foo", "x", true, false); [EOL] } <line_num>: 71,76
public void testMutateWithMultipleReturns() { [EOL]     helperMutate("function foo(){ if (0) {return 0} else {return 1} };" + "var result=foo();", "{" + "JSCompiler_inline_label_foo_0:{" + "if(0) {" + "result=0; break JSCompiler_inline_label_foo_0" + "} else {" + "result=1; break JSCompiler_inline_label_foo_0" + "} result=void 0" + "}" + "}", "foo", true, false); [EOL] } <line_num>: 78,92
public void testMutateWithParameters1() { [EOL]     helperMutate("function foo(a){return true;}; foo(x);", "{true}", "foo", null); [EOL] } <line_num>: 94,100
public void testMutateWithParameters2() { [EOL]     helperMutate("function foo(a){return x;}; foo(x);", "{x}", "foo", null); [EOL] } <line_num>: 102,108
public void testMutateWithParameters3() { [EOL]     helperMutate("function foo(a){return a;}; " + "function x() { foo(x++); }", "{var a$$inline_0 = x++; a$$inline_0}", "foo", null); [EOL] } <line_num>: 110,117
public void testMutate8() { [EOL]     helperMutate("function foo(a){return a+a;}; foo(x++);", "{var a$$inline_0 = x++;" + "a$$inline_0 + a$$inline_0;}", "foo", null); [EOL] } <line_num>: 119,126
public void testMutateInitializeUninitializedVars1() { [EOL]     helperMutate("function foo(a){var b;return a;}; foo(1);", "{var b$$inline_1=void 0;1}", "foo", null, false, true); [EOL] } <line_num>: 128,133
public void testMutateInitializeUninitializedVars2() { [EOL]     helperMutate("function foo(a){for(var b in c)return a;}; foo(1);", "{JSCompiler_inline_label_foo_2:" + "{" + "for(var b$$inline_1 in c){" + "1;break JSCompiler_inline_label_foo_2" + "}" + "}" + "}", "foo", null); [EOL] } <line_num>: 135,146
public void testMutateCallInLoopVars1() { [EOL]     boolean callInLoop = false; [EOL]     helperMutate("function foo(a){var B = bar(); a;}; foo(1);", "{var B$$inline_1=bar(); 1;}", "foo", null, false, callInLoop); [EOL]     callInLoop = true; [EOL]     helperMutate("function foo(a){var B = bar(); a;}; foo(1);", "{var B$$inline_1 = bar(); 1;}", "foo", null, false, callInLoop); [EOL] } <line_num>: 148,162
public void testMutateFunctionDefinition() { [EOL]     helperMutate("function foo(a){function g(){}}; foo(1);", "{var g$$inline_1=function(){};}", "foo", null); [EOL] } <line_num>: 164,171
public void helperMutate(String code, final String expectedResult, final String fnName) { [EOL]     helperMutate(code, expectedResult, fnName, false, false); [EOL] } <line_num>: 173,176
public void helperMutate(String code, final String expectedResult, final String fnName, final boolean needsDefaultResult, final boolean isCallInLoop) { [EOL]     helperMutate(code, expectedResult, fnName, "result", needsDefaultResult, isCallInLoop); [EOL] } <line_num>: 178,184
public void helperMutate(String code, final String expectedResult, final String fnName, final String resultName) { [EOL]     helperMutate(code, expectedResult, fnName, resultName, false, false); [EOL] } <line_num>: 186,190
private void validateSourceInfo(Compiler compiler, Node subtree) { [EOL]     (new LineNumberCheck(compiler)).setCheckSubTree(subtree); [EOL]     if (compiler.getErrorCount() != 0) { [EOL]         String msg = "Error encountered: "; [EOL]         for (JSError err : compiler.getErrors()) { [EOL]             msg += err.toString() + "\n"; [EOL]         } [EOL]         assertTrue(msg, compiler.getErrorCount() == 0); [EOL]     } [EOL] } <line_num>: 192,202
@Override [EOL] public boolean call(NodeTraversal t, Node n, Node parent) { [EOL]     Node result = mutator.mutate(fnName, fnNode, n, resultName, needsDefaultResult, isCallInLoop); [EOL]     validateSourceInfo(compiler, result); [EOL]     String explanation = expected.checkTreeEquals(result); [EOL]     assertNull("\nExpected: " + compiler.toSource(expected) + "\nResult: " + compiler.toSource(result) + "\n" + explanation, explanation); [EOL]     return true; [EOL] } <line_num>: 232,244
public void helperMutate(String code, final String expectedResult, final String fnName, final String resultName, final boolean needsDefaultResult, final boolean isCallInLoop) { [EOL]     final Compiler compiler = new Compiler(); [EOL]     final FunctionToBlockMutator mutator = new FunctionToBlockMutator(compiler, compiler.getUniqueNameIdSupplier()); [EOL]     Node expectedRoot = parse(compiler, expectedResult); [EOL]     Preconditions.checkState(compiler.getErrorCount() == 0); [EOL]     final Node expected = expectedRoot.getFirstChild(); [EOL]     final Node tree = parse(compiler, code); [EOL]     Preconditions.checkState(compiler.getErrorCount() == 0); [EOL]     Node externsRoot = new Node(Token.EMPTY); [EOL]     Node mainRoot = tree; [EOL]     MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler); [EOL]     mark.process(externsRoot, mainRoot); [EOL]     final Node fnNode = findFunction(tree, fnName); [EOL]     final Set<String> unsafe = FunctionArgumentInjector.findModifiedParameters(fnNode); [EOL]     compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED); [EOL]     Method tester = new Method() { [EOL]  [EOL]         @Override [EOL]         public boolean call(NodeTraversal t, Node n, Node parent) { [EOL]             Node result = mutator.mutate(fnName, fnNode, n, resultName, needsDefaultResult, isCallInLoop); [EOL]             validateSourceInfo(compiler, result); [EOL]             String explanation = expected.checkTreeEquals(result); [EOL]             assertNull("\nExpected: " + compiler.toSource(expected) + "\nResult: " + compiler.toSource(result) + "\n" + explanation, explanation); [EOL]             return true; [EOL]         } [EOL]     }; [EOL]     compiler.resetUniqueNameId(); [EOL]     TestCallback test = new TestCallback(fnName, tester); [EOL]     NodeTraversal.traverse(compiler, tree, test); [EOL] } <line_num>: 204,250
boolean call(NodeTraversal t, Node n, Node parent); <line_num>: 253,253
@Override [EOL] public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) { [EOL]     return !complete; [EOL] } <line_num>: 267,271
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (n.isCall()) { [EOL]         Node first = n.getFirstChild(); [EOL]         if (first.isName() && first.getString().equals(callname)) { [EOL]             complete = method.call(t, n, parent); [EOL]         } [EOL]     } [EOL]     if (parent == null) { [EOL]         assertTrue(complete); [EOL]     } [EOL] } <line_num>: 273,286
private static Node findFunction(Node n, String name) { [EOL]     if (n.isFunction()) { [EOL]         if (n.getFirstChild().getString().equals(name)) { [EOL]             return n; [EOL]         } [EOL]     } [EOL]     for (Node c : n.children()) { [EOL]         Node result = findFunction(c, name); [EOL]         if (result != null) { [EOL]             return result; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 289,304
private static Node parse(Compiler compiler, String js) { [EOL]     Node n = compiler.parseTestCode(js); [EOL]     assertEquals(0, compiler.getErrorCount()); [EOL]     return n; [EOL] } <line_num>: 306,310
