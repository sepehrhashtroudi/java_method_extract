public CheckMissingReturnTest() { [EOL]     enableTypeCheck(CheckLevel.OFF); [EOL] } <line_num>: 27,29
@Override [EOL] protected CompilerPass getProcessor(final Compiler compiler) { [EOL]     return new CombinedCompilerPass(compiler, new CheckMissingReturn(compiler, CheckLevel.ERROR)); [EOL] } <line_num>: 31,35
public void testMissingReturn() { [EOL]     testMissing("if (a) { return 1; }"); [EOL]     testMissing("switch(1) { case 12: return 5; }"); [EOL]     testMissing("try { foo() } catch (e) { return 5; } finally { }"); [EOL]     testMissing("/** @return {number} */ function f() { var x; }; return 1;"); [EOL]     testMissing("/** @return {number} */ function f() { return 1; };"); [EOL] } <line_num>: 37,50
public void testReturnNotMissing() { [EOL]     testNotMissing(""); [EOL]     testSame("function f() { var x; }"); [EOL]     testNotMissing("return 1;"); [EOL]     testNotMissing("void", "var x;"); [EOL]     testNotMissing("undefined", "var x;"); [EOL]     testNotMissing("number|undefined", "var x;"); [EOL]     testNotMissing("number|void", "var x;"); [EOL]     testNotMissing("(number,void)", "var x;"); [EOL]     testNotMissing("(number,undefined)", "var x;"); [EOL]     testNotMissing("*", "var x;"); [EOL]     testNotMissing("try { return foo() } catch (e) { } finally { }"); [EOL]     testNotMissing("/** @return {number} */ function f() { return 1; }; return 1;"); [EOL]     testNotMissing("try { return 12; } finally { return 62; }"); [EOL]     testNotMissing("try { } finally { return 1; }"); [EOL]     testNotMissing("switch(1) { default: return 1; }"); [EOL]     testNotMissing("switch(g) { case 1: return 1; default: return 2; }"); [EOL] } <line_num>: 52,84
public void testFinallyStatements() { [EOL]     testNotMissing("try { return 1; } finally { }"); [EOL]     testNotMissing("try { } finally { return 1; }"); [EOL]     testMissing("try { } finally { }"); [EOL]     testNotMissing("try { return 1; } finally { while (true) { } }"); [EOL]     testMissing("try { } finally { while (x) { } }"); [EOL]     testMissing("try { } finally { while (x) { if (x) { break; } } }"); [EOL]     testNotMissing("try { return 2; } finally { while (x) { if (x) { break; } } }"); [EOL]     testMissing("try { } finally { try { } finally { } }"); [EOL]     testNotMissing("try { } finally { try { return 1; } finally { } }"); [EOL]     testNotMissing("try { return 1; } finally { try { } finally { } }"); [EOL]     testNotMissing("try { g(); return 1; } finally { }"); [EOL]     testNotMissing("try {" + "   /** @return {number} */ function f() {" + "       try { return 1; }" + "       finally { }" + "   };" + "   return 1;" + "}" + "finally { }"); [EOL]     testMissing("try {" + "   /** @return {number} */ function f() {" + "       try { }" + "       finally { }" + "   };" + "   return 1;" + "}" + "finally { }"); [EOL]     testMissing("try {" + "   /** @return {number} */ function f() {" + "       try { return 1; }" + "       finally { }" + "   };" + "}" + "finally { }"); [EOL] } <line_num>: 86,156
public void testKnownConditions() { [EOL]     testNotMissing("if (true) return 1"); [EOL]     testMissing("if (true) {} else {return 1}"); [EOL]     testMissing("if (false) return 1"); [EOL]     testNotMissing("if (false) {} else {return 1}"); [EOL]     testNotMissing("if (1) return 1"); [EOL]     testMissing("if (1) {} else {return 1}"); [EOL]     testMissing("if (0) return 1"); [EOL]     testNotMissing("if (0) {} else {return 1}"); [EOL]     testNotMissing("if (3) return 1"); [EOL]     testMissing("if (3) {} else {return 1}"); [EOL] } <line_num>: 158,173
public void testKnownWhileLoop() { [EOL]     testNotMissing("while (1) return 1"); [EOL]     testNotMissing("while (1) { if (x) {return 1} else {return 1}}"); [EOL]     testNotMissing("while (0) {} return 1"); [EOL]     testNotMissing("while (1) {} return 0"); [EOL]     testMissing("while (false) return 1"); [EOL]     testMissing("while(x) { return 1 }"); [EOL] } <line_num>: 175,187
public void testMultiConditions() { [EOL]     testMissing("if (a) { } else { while (1) {return 1} }"); [EOL]     testNotMissing("if (a) { return 1} else { while (1) {return 1} }"); [EOL] } <line_num>: 189,192
public void testIssue779() { [EOL]     testNotMissing("var a = f(); try { alert(); if (a > 0) return 1; }" + "finally { a = 5; } return 2;"); [EOL] } <line_num>: 194,198
private static String createFunction(String returnType, String body) { [EOL]     return "/** @return {" + returnType + "} */ function foo() {" + body + "}"; [EOL] } <line_num>: 200,202
private void testMissing(String returnType, String body) { [EOL]     String js = createFunction(returnType, body); [EOL]     test(js, js, CheckMissingReturn.MISSING_RETURN_STATEMENT); [EOL] } <line_num>: 204,207
private void testNotMissing(String returnType, String body) { [EOL]     testSame(createFunction(returnType, body)); [EOL] } <line_num>: 209,211
private void testNotMissing(String body) { [EOL]     testNotMissing("number", body); [EOL] } <line_num>: 214,216
private void testMissing(String body) { [EOL]     testMissing("number", body); [EOL] } <line_num>: 219,221
