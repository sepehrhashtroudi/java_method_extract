@Override [EOL] public void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     globalScope = Scope.createGlobalScope(blockNode); [EOL]     globalScope.declare("globalA", null, null, null); [EOL]     globalScope.declare("globalB", null, null, null); [EOL]     localScope = new Scope(globalScope, functionNode); [EOL]     localScope.declare("localA", null, null, null); [EOL]     localScope.declare("localB", null, null, null); [EOL]     globalEntry = LinkedFlowScope.createEntryLattice(globalScope); [EOL]     localEntry = LinkedFlowScope.createEntryLattice(localScope); [EOL] } <line_num>: 41,55
public void testOptimize() { [EOL]     assertEquals(localEntry, localEntry.optimize()); [EOL]     FlowScope child = localEntry.createChildFlowScope(); [EOL]     assertEquals(localEntry, child.optimize()); [EOL]     child.inferSlotType("localB", NUMBER_TYPE); [EOL]     assertEquals(child, child.optimize()); [EOL] } <line_num>: 57,65
public void testJoin1() { [EOL]     FlowScope childA = localEntry.createChildFlowScope(); [EOL]     childA.inferSlotType("localB", NUMBER_TYPE); [EOL]     FlowScope childAB = childA.createChildFlowScope(); [EOL]     childAB.inferSlotType("localB", STRING_TYPE); [EOL]     FlowScope childB = localEntry.createChildFlowScope(); [EOL]     childB.inferSlotType("localB", BOOLEAN_TYPE); [EOL]     assertTypeEquals(STRING_TYPE, childAB.getSlot("localB").getType()); [EOL]     assertTypeEquals(BOOLEAN_TYPE, childB.getSlot("localB").getType()); [EOL]     assertNull(childB.getSlot("localA").getType()); [EOL]     FlowScope joined = join(childB, childAB); [EOL]     assertTypeEquals(createUnionType(STRING_TYPE, BOOLEAN_TYPE), joined.getSlot("localB").getType()); [EOL]     assertNull(joined.getSlot("localA").getType()); [EOL]     joined = join(childAB, childB); [EOL]     assertTypeEquals(createUnionType(STRING_TYPE, BOOLEAN_TYPE), joined.getSlot("localB").getType()); [EOL]     assertNull(joined.getSlot("localA").getType()); [EOL]     assertEquals("Join should be symmetric", join(childB, childAB), join(childAB, childB)); [EOL] } <line_num>: 67,93
public void testJoin2() { [EOL]     FlowScope childA = localEntry.createChildFlowScope(); [EOL]     childA.inferSlotType("localA", STRING_TYPE); [EOL]     FlowScope childB = localEntry.createChildFlowScope(); [EOL]     childB.inferSlotType("globalB", BOOLEAN_TYPE); [EOL]     assertTypeEquals(STRING_TYPE, childA.getSlot("localA").getType()); [EOL]     assertTypeEquals(BOOLEAN_TYPE, childB.getSlot("globalB").getType()); [EOL]     assertNull(childB.getSlot("localB").getType()); [EOL]     FlowScope joined = join(childB, childA); [EOL]     assertTypeEquals(STRING_TYPE, joined.getSlot("localA").getType()); [EOL]     assertTypeEquals(BOOLEAN_TYPE, joined.getSlot("globalB").getType()); [EOL]     joined = join(childA, childB); [EOL]     assertTypeEquals(STRING_TYPE, joined.getSlot("localA").getType()); [EOL]     assertTypeEquals(BOOLEAN_TYPE, joined.getSlot("globalB").getType()); [EOL]     assertEquals("Join should be symmetric", join(childB, childA), join(childA, childB)); [EOL] } <line_num>: 95,116
public void testJoin3() { [EOL]     localScope.declare("localC", null, STRING_TYPE, null); [EOL]     localScope.declare("localD", null, STRING_TYPE, null); [EOL]     FlowScope childA = localEntry.createChildFlowScope(); [EOL]     childA.inferSlotType("localC", NUMBER_TYPE); [EOL]     FlowScope childB = localEntry.createChildFlowScope(); [EOL]     childA.inferSlotType("localD", BOOLEAN_TYPE); [EOL]     FlowScope joined = join(childB, childA); [EOL]     assertTypeEquals(createUnionType(STRING_TYPE, NUMBER_TYPE), joined.getSlot("localC").getType()); [EOL]     assertTypeEquals(createUnionType(STRING_TYPE, BOOLEAN_TYPE), joined.getSlot("localD").getType()); [EOL]     joined = join(childA, childB); [EOL]     assertTypeEquals(createUnionType(STRING_TYPE, NUMBER_TYPE), joined.getSlot("localC").getType()); [EOL]     assertTypeEquals(createUnionType(STRING_TYPE, BOOLEAN_TYPE), joined.getSlot("localD").getType()); [EOL]     assertEquals("Join should be symmetric", join(childB, childA), join(childA, childB)); [EOL] } <line_num>: 118,142
public void testLongChain1() { [EOL]     FlowScope chainA = localEntry.createChildFlowScope(); [EOL]     FlowScope chainB = localEntry.createChildFlowScope(); [EOL]     for (int i = 0; i < LONG_CHAIN_LENGTH; i++) { [EOL]         localScope.declare("local" + i, null, null, null); [EOL]         chainA.inferSlotType("local" + i, i % 2 == 0 ? NUMBER_TYPE : BOOLEAN_TYPE); [EOL]         chainB.inferSlotType("local" + i, i % 3 == 0 ? STRING_TYPE : BOOLEAN_TYPE); [EOL]         chainA = chainA.createChildFlowScope(); [EOL]         chainB = chainB.createChildFlowScope(); [EOL]     } [EOL]     verifyLongChains(chainA, chainB); [EOL] } <line_num>: 148,163
public void testLongChain2() { [EOL]     FlowScope chainA = localEntry.createChildFlowScope(); [EOL]     FlowScope chainB = localEntry.createChildFlowScope(); [EOL]     for (int i = 0; i < LONG_CHAIN_LENGTH * 7; i++) { [EOL]         localScope.declare("local" + i, null, null, null); [EOL]         chainA.inferSlotType("local" + i, i % 2 == 0 ? NUMBER_TYPE : BOOLEAN_TYPE); [EOL]         chainB.inferSlotType("local" + i, i % 3 == 0 ? STRING_TYPE : BOOLEAN_TYPE); [EOL]         if (i % 7 == 0) { [EOL]             chainA = chainA.createChildFlowScope(); [EOL]             chainB = chainB.createChildFlowScope(); [EOL]         } [EOL]     } [EOL]     verifyLongChains(chainA, chainB); [EOL] } <line_num>: 169,186
public void testLongChain3() { [EOL]     FlowScope chainA = localEntry.createChildFlowScope(); [EOL]     FlowScope chainB = localEntry.createChildFlowScope(); [EOL]     for (int i = 0; i < LONG_CHAIN_LENGTH * 7; i++) { [EOL]         if (i % 7 == 0) { [EOL]             int j = i / 7; [EOL]             localScope.declare("local" + j, null, null, null); [EOL]             chainA.inferSlotType("local" + j, j % 2 == 0 ? NUMBER_TYPE : BOOLEAN_TYPE); [EOL]             chainB.inferSlotType("local" + j, j % 3 == 0 ? STRING_TYPE : BOOLEAN_TYPE); [EOL]         } [EOL]         chainA = chainA.createChildFlowScope(); [EOL]         chainB = chainB.createChildFlowScope(); [EOL]     } [EOL]     verifyLongChains(chainA, chainB); [EOL] } <line_num>: 192,210
private void verifyLongChains(FlowScope chainA, FlowScope chainB) { [EOL]     FlowScope joined = join(chainA, chainB); [EOL]     for (int i = 0; i < LONG_CHAIN_LENGTH; i++) { [EOL]         assertTypeEquals(i % 2 == 0 ? NUMBER_TYPE : BOOLEAN_TYPE, chainA.getSlot("local" + i).getType()); [EOL]         assertTypeEquals(i % 3 == 0 ? STRING_TYPE : BOOLEAN_TYPE, chainB.getSlot("local" + i).getType()); [EOL]         JSType joinedSlotType = joined.getSlot("local" + i).getType(); [EOL]         if (i % 6 == 0) { [EOL]             assertTypeEquals(createUnionType(STRING_TYPE, NUMBER_TYPE), joinedSlotType); [EOL]         } else if (i % 2 == 0) { [EOL]             assertTypeEquals(createUnionType(NUMBER_TYPE, BOOLEAN_TYPE), joinedSlotType); [EOL]         } else if (i % 3 == 0) { [EOL]             assertTypeEquals(createUnionType(STRING_TYPE, BOOLEAN_TYPE), joinedSlotType); [EOL]         } else { [EOL]             assertTypeEquals(BOOLEAN_TYPE, joinedSlotType); [EOL]         } [EOL]     } [EOL]     assertScopesDiffer(chainA, chainB); [EOL]     assertScopesDiffer(chainA, joined); [EOL]     assertScopesDiffer(chainB, joined); [EOL] } <line_num>: 213,240
public void testFindUniqueSlot() { [EOL]     FlowScope childA = localEntry.createChildFlowScope(); [EOL]     childA.inferSlotType("localB", NUMBER_TYPE); [EOL]     FlowScope childAB = childA.createChildFlowScope(); [EOL]     childAB.inferSlotType("localB", STRING_TYPE); [EOL]     FlowScope childABC = childAB.createChildFlowScope(); [EOL]     childABC.inferSlotType("localA", BOOLEAN_TYPE); [EOL]     assertNull(childABC.findUniqueRefinedSlot(childABC)); [EOL]     assertTypeEquals(BOOLEAN_TYPE, childABC.findUniqueRefinedSlot(childAB).getType()); [EOL]     assertNull(childABC.findUniqueRefinedSlot(childA)); [EOL]     assertNull(childABC.findUniqueRefinedSlot(localEntry)); [EOL]     assertTypeEquals(STRING_TYPE, childAB.findUniqueRefinedSlot(childA).getType()); [EOL]     assertTypeEquals(STRING_TYPE, childAB.findUniqueRefinedSlot(localEntry).getType()); [EOL]     assertTypeEquals(NUMBER_TYPE, childA.findUniqueRefinedSlot(localEntry).getType()); [EOL] } <line_num>: 242,265
public void testDiffer1() { [EOL]     FlowScope childA = localEntry.createChildFlowScope(); [EOL]     childA.inferSlotType("localB", NUMBER_TYPE); [EOL]     FlowScope childAB = childA.createChildFlowScope(); [EOL]     childAB.inferSlotType("localB", STRING_TYPE); [EOL]     FlowScope childABC = childAB.createChildFlowScope(); [EOL]     childABC.inferSlotType("localA", BOOLEAN_TYPE); [EOL]     FlowScope childB = childAB.createChildFlowScope(); [EOL]     childB.inferSlotType("localB", STRING_TYPE); [EOL]     FlowScope childBC = childB.createChildFlowScope(); [EOL]     childBC.inferSlotType("localA", NO_TYPE); [EOL]     assertScopesSame(childAB, childB); [EOL]     assertScopesDiffer(childABC, childBC); [EOL]     assertScopesDiffer(childABC, childB); [EOL]     assertScopesDiffer(childAB, childBC); [EOL]     assertScopesDiffer(childA, childAB); [EOL]     assertScopesDiffer(childA, childABC); [EOL]     assertScopesDiffer(childA, childB); [EOL]     assertScopesDiffer(childA, childBC); [EOL] } <line_num>: 267,293
public void testDiffer2() { [EOL]     FlowScope childA = localEntry.createChildFlowScope(); [EOL]     childA.inferSlotType("localA", NUMBER_TYPE); [EOL]     FlowScope childB = localEntry.createChildFlowScope(); [EOL]     childB.inferSlotType("localA", NO_TYPE); [EOL]     assertScopesDiffer(childA, childB); [EOL] } <line_num>: 295,303
private void assertScopesDiffer(FlowScope a, FlowScope b) { [EOL]     assertFalse(a.equals(b)); [EOL]     assertFalse(b.equals(a)); [EOL]     assertEquals(a, a); [EOL]     assertEquals(b, b); [EOL] } <line_num>: 305,310
private void assertScopesSame(FlowScope a, FlowScope b) { [EOL]     assertEquals(a, b); [EOL]     assertEquals(b, a); [EOL]     assertEquals(a, a); [EOL]     assertEquals(b, b); [EOL] } <line_num>: 312,317
@SuppressWarnings("unchecked") [EOL] private FlowScope join(FlowScope a, FlowScope b) { [EOL]     return (new LinkedFlowScope.FlowScopeJoinOp()).apply(Lists.newArrayList(a, b)); [EOL] } <line_num>: 319,323
