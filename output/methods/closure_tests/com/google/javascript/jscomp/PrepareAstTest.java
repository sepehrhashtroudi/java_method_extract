public PrepareAstTest() { [EOL]     super.enableLineNumberCheck(true); [EOL] } <line_num>: 30,32
@Override [EOL] public CompilerPass getProcessor(Compiler compiler) { [EOL]     return null; [EOL] } <line_num>: 34,37
public void testJsDocNormalization() throws Exception { [EOL]     Node root = parseExpectedJs("var x = {/** @return {number} */ a: function() {}," + "         c: /** @type {string} */ ('d')};"); [EOL]     Node objlit = root.getFirstChild().getFirstChild().getFirstChild().getFirstChild(); [EOL]     assertEquals(Token.OBJECTLIT, objlit.getType()); [EOL]     Node firstKey = objlit.getFirstChild(); [EOL]     Node firstVal = firstKey.getFirstChild(); [EOL]     Node secondKey = firstKey.getNext(); [EOL]     Node secondVal = secondKey.getFirstChild(); [EOL]     assertNotNull(firstKey.getJSDocInfo()); [EOL]     assertNotNull(firstVal.getJSDocInfo()); [EOL]     assertNull(secondKey.getJSDocInfo()); [EOL]     assertNotNull(secondVal.getJSDocInfo()); [EOL] } <line_num>: 39,56
public void testFreeCall1() throws Exception { [EOL]     Node root = parseExpectedJs("foo();"); [EOL]     Node script = root.getFirstChild(); [EOL]     Preconditions.checkState(script.isScript()); [EOL]     Node firstExpr = script.getFirstChild(); [EOL]     Node call = firstExpr.getFirstChild(); [EOL]     Preconditions.checkState(call.isCall()); [EOL]     assertTrue(call.getBooleanProp(Node.FREE_CALL)); [EOL] } <line_num>: 58,67
public void testFreeCall2() throws Exception { [EOL]     Node root = parseExpectedJs("x.foo();"); [EOL]     Node script = root.getFirstChild(); [EOL]     Preconditions.checkState(script.isScript()); [EOL]     Node firstExpr = script.getFirstChild(); [EOL]     Node call = firstExpr.getFirstChild(); [EOL]     Preconditions.checkState(call.isCall()); [EOL]     assertFalse(call.getBooleanProp(Node.FREE_CALL)); [EOL] } <line_num>: 69,78
