public NameAnonymousFunctionsMappedTest() { [EOL]     super(EXTERNS); [EOL] } <line_num>: 31,33
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 35,38
@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     previous = null; [EOL] } <line_num>: 40,44
@Override [EOL] public CompilerPass getProcessor(Compiler compiler) { [EOL]     return pass = new NameAnonymousFunctionsMapped(compiler, previous); [EOL] } <line_num>: 46,49
private void assertMapping(String... pairs) { [EOL]     VariableMap functionMap = pass.getFunctionMap(); [EOL]     assertTrue(pairs.length % 2 == 0); [EOL]     for (int i = 0; i < pairs.length; i += 2) { [EOL]         String s = functionMap.lookupSourceName(pairs[i]); [EOL]         assertEquals(pairs[i + 1], s); [EOL]     } [EOL]     assertEquals(pairs.length / 2, functionMap.getNewNameToOriginalNameMap().size()); [EOL] } <line_num>: 51,60
public void testSimpleVarAssignment1() { [EOL]     test("var a = function() { return 1; }", "var a = function $() { return 1; }"); [EOL]     assertMapping("$", "a"); [EOL] } <line_num>: 62,66
public void testSimpleVarAssignment2() { [EOL]     previous = VariableMap.fromMap(ImmutableMap.<String, String>of("a", "previous")); [EOL]     test("var a = function() { return 1; }", "var a = function previous() { return 1; }"); [EOL]     assertMapping("previous", "a"); [EOL] } <line_num>: 68,76
public void testSimpleVarAssignment3() { [EOL]     previous = VariableMap.fromMap(ImmutableMap.<String, String>of("unused", "$")); [EOL]     test("var fn = function() { return 1; }", "var fn = function $a() { return 1; }"); [EOL]     assertMapping("$a", "fn"); [EOL] } <line_num>: 78,86
public void testAssignmentToProperty() { [EOL]     test("var a = {}; a.b = function() { return 1; }", "var a = {}; a.b = function $() { return 1; }"); [EOL]     assertMapping("$", "a.b"); [EOL] } <line_num>: 88,92
public void testAssignmentToPrototype() { [EOL]     test("function a() {} a.prototype.b = function() { return 1; };", "function a() {} " + "a.prototype.b = function $() { return 1; };"); [EOL]     assertMapping("$", "a.prototype.b"); [EOL] } <line_num>: 94,99
public void testAssignmentToPrototype2() { [EOL]     test("var a = {}; " + "a.b = function() {}; " + "a.b.prototype.c = function() { return 1; };", "var a = {}; " + "a.b = function $() {}; " + "a.b.prototype.c = function $a() { return 1; };"); [EOL]     assertMapping("$", "a.b", "$a", "a.b.prototype.c"); [EOL] } <line_num>: 101,109
public void testAssignmentToPrototype3() { [EOL]     test("function a() {} a.prototype['XXX'] = function() { return 1; };", "function a() {} " + "a.prototype['XXX'] = function $() { return 1; };"); [EOL]     assertMapping("$", "a.prototype[\"XXX\"]"); [EOL]     test("function a() {} a.prototype['\\n'] = function() { return 1; };", "function a() {} " + "a.prototype['\\n'] = function $() { return 1; };"); [EOL]     assertMapping("$", "a.prototype[\"\\n\"]"); [EOL] } <line_num>: 111,120
public void testAssignmentToPrototype4() { [EOL]     test("var Y = 1; function a() {} " + "a.prototype[Y] = function() { return 1; };", "var Y = 1; function a() {} " + "a.prototype[Y] = function $() { return 1; };"); [EOL]     assertMapping("$", "a.prototype[Y]"); [EOL] } <line_num>: 122,128
public void testAssignmentToPrototype5() { [EOL]     test("function a() {} a['prototype'].b = function() { return 1; };", "function a() {} " + "a['prototype'].b = function $() { return 1; };"); [EOL]     assertMapping("$", "a[\"prototype\"].b"); [EOL] } <line_num>: 130,135
public void testPrototypeInitializer() { [EOL]     test("function a(){} a.prototype = {b: function() { return 1; }};", "function a(){} " + "a.prototype = {b: function $() { return 1; }};"); [EOL]     assertMapping("$", "a.prototype.b"); [EOL] } <line_num>: 138,143
public void testAssignmentToPropertyOfCallReturnValue() { [EOL]     test("document.getElementById('x').onClick = function() {};", "document.getElementById('x').onClick = " + "function $() {};"); [EOL]     assertMapping("$", "document.getElementById(\"x\").onClick"); [EOL] } <line_num>: 145,150
public void testAssignmentToPropertyOfArrayElement() { [EOL]     test("var a = {}; a.b = [{}]; a.b[0].c = function() {};", "var a = {}; a.b = [{}]; a.b[0].c = function $() {};"); [EOL]     assertMapping("$", "a.b[0].c"); [EOL]     test("var a = {b: {'c': {}}}; a.b['c'].d = function() {};", "var a = {b: {'c': {}}}; a.b['c'].d = function $() {};"); [EOL]     assertMapping("$", "a.b[\"c\"].d"); [EOL]     test("var a = {b: {'c': {}}}; a.b[x()].d = function() {};", "var a = {b: {'c': {}}}; a.b[x()].d = function $() {};"); [EOL]     assertMapping("$", "a.b[x()].d"); [EOL] } <line_num>: 152,162
public void testAssignmentToGetElem() { [EOL]     test("function f() { win['x' + this.id] = function(a){}; }", "function f() { win['x' + this.id] = function $(a){}; }"); [EOL]     assertMapping("$", "win[\"x\"+this.id]"); [EOL] } <line_num>: 164,170
public void testGetElemWithDashes() { [EOL]     test("var foo = {}; foo['-'] = function() {};", "var foo = {}; foo['-'] = function $() {};"); [EOL]     assertMapping("$", "foo[\"-\"]"); [EOL] } <line_num>: 172,176
public void testDuplicateNames() { [EOL]     test("var a = function() { return 1; };a = function() { return 2; }", "var a = function $() { return 1; };a = function $() { return 2; }"); [EOL]     assertMapping("$", "a"); [EOL] } <line_num>: 178,182
