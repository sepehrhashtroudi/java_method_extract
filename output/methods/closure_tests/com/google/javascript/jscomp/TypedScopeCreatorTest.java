@Override [EOL] public int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 55,58
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     Scope s = t.getScope(); [EOL]     if (s.isGlobal()) { [EOL]         globalScope = s; [EOL]     } else { [EOL]         lastLocalScope = s; [EOL]     } [EOL] } <line_num>: 61,69
@Override [EOL] public void process(Node externs, Node root) { [EOL]     MemoizedScopeCreator scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler)); [EOL]     Scope topScope = scopeCreator.createScope(root.getParent(), null); [EOL]     (new TypeInferencePass(compiler, compiler.getReverseAbstractInterpreter(), topScope, scopeCreator)).process(externs, root); [EOL]     NodeTraversal t = new NodeTraversal(compiler, callback, scopeCreator); [EOL]     t.traverseRoots(Lists.newArrayList(externs, root)); [EOL] } <line_num>: 76,87
@Override [EOL] public CompilerPass getProcessor(final Compiler compiler) { [EOL]     registry = compiler.getTypeRegistry(); [EOL]     return new CompilerPass() { [EOL]  [EOL]         @Override [EOL]         public void process(Node externs, Node root) { [EOL]             MemoizedScopeCreator scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler)); [EOL]             Scope topScope = scopeCreator.createScope(root.getParent(), null); [EOL]             (new TypeInferencePass(compiler, compiler.getReverseAbstractInterpreter(), topScope, scopeCreator)).process(externs, root); [EOL]             NodeTraversal t = new NodeTraversal(compiler, callback, scopeCreator); [EOL]             t.traverseRoots(Lists.newArrayList(externs, root)); [EOL]         } [EOL]     }; [EOL] } <line_num>: 72,89
public void testStubProperty() { [EOL]     testSame("function Foo() {}; Foo.bar;"); [EOL]     ObjectType foo = (ObjectType) globalScope.getVar("Foo").getType(); [EOL]     assertFalse(foo.hasProperty("bar")); [EOL]     Asserts.assertTypeEquals(registry.getNativeType(UNKNOWN_TYPE), foo.getPropertyType("bar")); [EOL]     Asserts.assertTypeCollectionEquals(Lists.newArrayList(foo), registry.getTypesWithProperty("bar")); [EOL] } <line_num>: 91,99
public void testConstructorProperty() { [EOL]     testSame("var foo = {}; /** @constructor */ foo.Bar = function() {};"); [EOL]     ObjectType foo = (ObjectType) findNameType("foo", globalScope); [EOL]     assertTrue(foo.hasProperty("Bar")); [EOL]     assertFalse(foo.isPropertyTypeInferred("Bar")); [EOL]     JSType fooBar = foo.getPropertyType("Bar"); [EOL]     assertEquals("function (new:foo.Bar): undefined", fooBar.toString()); [EOL]     Asserts.assertTypeCollectionEquals(Lists.newArrayList(foo), registry.getTypesWithProperty("Bar")); [EOL] } <line_num>: 101,111
public void testPrototypePropertyMethodWithoutAnnotation() { [EOL]     testSame("var Foo = function Foo() {};" + "var proto = Foo.prototype = {" + "   bar: function(a, b){}" + "};" + "proto.baz = function(c) {};" + "(function() { proto.baz = function() {}; })();"); [EOL]     ObjectType foo = (ObjectType) findNameType("Foo", globalScope); [EOL]     assertTrue(foo.hasProperty("prototype")); [EOL]     ObjectType fooProto = (ObjectType) foo.getPropertyType("prototype"); [EOL]     assertTrue(fooProto.hasProperty("bar")); [EOL]     assertEquals("function (?, ?): undefined", fooProto.getPropertyType("bar").toString()); [EOL]     assertTrue(fooProto.hasProperty("baz")); [EOL]     assertEquals("function (?): undefined", fooProto.getPropertyType("baz").toString()); [EOL] } <line_num>: 113,131
public void testEnumProperty() { [EOL]     testSame("var foo = {}; /** @enum */ foo.Bar = {XXX: 'xxx'};"); [EOL]     ObjectType foo = (ObjectType) findNameType("foo", globalScope); [EOL]     assertTrue(foo.hasProperty("Bar")); [EOL]     assertFalse(foo.isPropertyTypeInferred("Bar")); [EOL]     assertTrue(foo.isPropertyTypeDeclared("Bar")); [EOL]     JSType fooBar = foo.getPropertyType("Bar"); [EOL]     assertEquals("enum{foo.Bar}", fooBar.toString()); [EOL]     Asserts.assertTypeCollectionEquals(Lists.newArrayList(foo), registry.getTypesWithProperty("Bar")); [EOL] } <line_num>: 133,144
public void testInferredProperty1() { [EOL]     testSame("var foo = {}; foo.Bar = 3;"); [EOL]     ObjectType foo = (ObjectType) findNameType("foo", globalScope); [EOL]     assertTrue(foo.toString(), foo.hasProperty("Bar")); [EOL]     assertEquals("number", foo.getPropertyType("Bar").toString()); [EOL]     assertTrue(foo.isPropertyTypeInferred("Bar")); [EOL] } <line_num>: 146,152
public void testInferredProperty1a() { [EOL]     testSame("var foo = {}; /** @type {number} */ foo.Bar = 3;"); [EOL]     ObjectType foo = (ObjectType) findNameType("foo", globalScope); [EOL]     assertTrue(foo.toString(), foo.hasProperty("Bar")); [EOL]     assertEquals("number", foo.getPropertyType("Bar").toString()); [EOL]     assertFalse(foo.isPropertyTypeInferred("Bar")); [EOL] } <line_num>: 154,160
public void testInferredProperty2() { [EOL]     testSame("var foo = { Bar: 3 };"); [EOL]     ObjectType foo = (ObjectType) findNameType("foo", globalScope); [EOL]     assertTrue(foo.toString(), foo.hasProperty("Bar")); [EOL]     assertEquals("number", foo.getPropertyType("Bar").toString()); [EOL]     assertTrue(foo.isPropertyTypeInferred("Bar")); [EOL] } <line_num>: 162,168
public void testInferredProperty2b() { [EOL]     testSame("var foo = { /** @type {number} */ Bar: 3 };"); [EOL]     ObjectType foo = (ObjectType) findNameType("foo", globalScope); [EOL]     assertTrue(foo.toString(), foo.hasProperty("Bar")); [EOL]     assertEquals("number", foo.getPropertyType("Bar").toString()); [EOL]     assertFalse(foo.isPropertyTypeInferred("Bar")); [EOL] } <line_num>: 170,176
public void testInferredProperty2c() { [EOL]     testSame("var foo = { /** @return {number} */ Bar: 3 };"); [EOL]     ObjectType foo = (ObjectType) findNameType("foo", globalScope); [EOL]     assertTrue(foo.toString(), foo.hasProperty("Bar")); [EOL]     assertEquals("function (): number", foo.getPropertyType("Bar").toString()); [EOL]     assertFalse(foo.isPropertyTypeInferred("Bar")); [EOL] } <line_num>: 178,184
public void testInferredProperty3() { [EOL]     testSame("var foo = { /** @type {number} */ get Bar() { return 3 } };"); [EOL]     ObjectType foo = (ObjectType) findNameType("foo", globalScope); [EOL]     assertTrue(foo.toString(), foo.hasProperty("Bar")); [EOL]     assertEquals("?", foo.getPropertyType("Bar").toString()); [EOL]     assertTrue(foo.isPropertyTypeInferred("Bar")); [EOL] } <line_num>: 186,192
public void testInferredProperty4() { [EOL]     testSame("var foo = { /** @type {number} */ set Bar(a) {} };"); [EOL]     ObjectType foo = (ObjectType) findNameType("foo", globalScope); [EOL]     assertTrue(foo.toString(), foo.hasProperty("Bar")); [EOL]     assertEquals("?", foo.getPropertyType("Bar").toString()); [EOL]     assertTrue(foo.isPropertyTypeInferred("Bar")); [EOL] } <line_num>: 194,200
public void testInferredProperty5() { [EOL]     testSame("var foo = { /** @return {number} */ get Bar() { return 3 } };"); [EOL]     ObjectType foo = (ObjectType) findNameType("foo", globalScope); [EOL]     assertTrue(foo.toString(), foo.hasProperty("Bar")); [EOL]     assertEquals("number", foo.getPropertyType("Bar").toString()); [EOL]     assertFalse(foo.isPropertyTypeInferred("Bar")); [EOL] } <line_num>: 202,208
public void testInferredProperty6() { [EOL]     testSame("var foo = { /** @param {number} a */ set Bar(a) {} };"); [EOL]     ObjectType foo = (ObjectType) findNameType("foo", globalScope); [EOL]     assertTrue(foo.toString(), foo.hasProperty("Bar")); [EOL]     assertEquals("number", foo.getPropertyType("Bar").toString()); [EOL]     assertFalse(foo.isPropertyTypeInferred("Bar")); [EOL] } <line_num>: 210,216
public void testPrototypeInit() { [EOL]     testSame("/** @constructor */ var Foo = function() {};" + "Foo.prototype = {bar: 1}; var foo = new Foo();"); [EOL]     ObjectType foo = (ObjectType) findNameType("foo", globalScope); [EOL]     assertTrue(foo.hasProperty("bar")); [EOL]     assertEquals("number", foo.getPropertyType("bar").toString()); [EOL]     assertTrue(foo.isPropertyTypeInferred("bar")); [EOL] } <line_num>: 218,225
public void testBogusPrototypeInit() { [EOL]     testSame("/** @const */ var goog = {}; " + "goog.F = {}; /** @const */ goog.F.prototype = {};" + "/** @constructor */ goog.F = function() {};"); [EOL] } <line_num>: 227,232
public void testInferredPrototypeProperty1() { [EOL]     testSame("/** @constructor */ var Foo = function() {};" + "Foo.prototype.bar = 1; var x = new Foo();"); [EOL]     ObjectType x = (ObjectType) findNameType("x", globalScope); [EOL]     assertTrue(x.hasProperty("bar")); [EOL]     assertEquals("number", x.getPropertyType("bar").toString()); [EOL]     assertTrue(x.isPropertyTypeInferred("bar")); [EOL] } <line_num>: 234,242
public void testInferredPrototypeProperty2() { [EOL]     testSame("/** @constructor */ var Foo = function() {};" + "Foo.prototype = {bar: 1}; var x = new Foo();"); [EOL]     ObjectType x = (ObjectType) findNameType("x", globalScope); [EOL]     assertTrue(x.hasProperty("bar")); [EOL]     assertEquals("number", x.getPropertyType("bar").toString()); [EOL]     assertTrue(x.isPropertyTypeInferred("bar")); [EOL] } <line_num>: 244,252
public void testEnum() { [EOL]     testSame("/** @enum */ var Foo = {BAR: 1}; var f = Foo;"); [EOL]     ObjectType f = (ObjectType) findNameType("f", globalScope); [EOL]     assertTrue(f.hasProperty("BAR")); [EOL]     assertEquals("Foo.<number>", f.getPropertyType("BAR").toString()); [EOL]     assertTrue(f instanceof EnumType); [EOL] } <line_num>: 254,260
public void testEnumElement() { [EOL]     testSame("/** @enum */ var Foo = {BAR: 1}; var f = Foo;"); [EOL]     Var bar = globalScope.getVar("Foo.BAR"); [EOL]     assertNotNull(bar); [EOL]     assertEquals("Foo.<number>", bar.getType().toString()); [EOL] } <line_num>: 262,267
public void testNamespacedEnum() { [EOL]     testSame("var goog = {}; goog.ui = {};" + "/** @constructor */goog.ui.Zippy = function() {};" + "/** @enum{string} */goog.ui.Zippy.EventType = { TOGGLE: 'toggle' };" + "var x = goog.ui.Zippy.EventType;" + "var y = goog.ui.Zippy.EventType.TOGGLE;"); [EOL]     ObjectType x = (ObjectType) findNameType("x", globalScope); [EOL]     assertTrue(x.isEnumType()); [EOL]     assertTrue(x.hasProperty("TOGGLE")); [EOL]     assertEquals("enum{goog.ui.Zippy.EventType}", x.getReferenceName()); [EOL]     ObjectType y = (ObjectType) findNameType("y", globalScope); [EOL]     assertTrue(y.isSubtype(getNativeType(STRING_TYPE))); [EOL]     assertTrue(y.isEnumElementType()); [EOL]     assertEquals("goog.ui.Zippy.EventType", y.getReferenceName()); [EOL] } <line_num>: 269,285
public void testEnumAlias() { [EOL]     testSame("/** @enum */ var Foo = {BAR: 1}; " + "/** @enum */ var FooAlias = Foo; var f = FooAlias;"); [EOL]     assertEquals("Foo.<number>", registry.getType("FooAlias").toString()); [EOL]     Asserts.assertTypeEquals(registry.getType("FooAlias"), registry.getType("Foo")); [EOL]     ObjectType f = (ObjectType) findNameType("f", globalScope); [EOL]     assertTrue(f.hasProperty("BAR")); [EOL]     assertEquals("Foo.<number>", f.getPropertyType("BAR").toString()); [EOL]     assertTrue(f instanceof EnumType); [EOL] } <line_num>: 287,300
public void testNamespacesEnumAlias() { [EOL]     testSame("var goog = {}; /** @enum */ goog.Foo = {BAR: 1}; " + "/** @enum */ goog.FooAlias = goog.Foo;"); [EOL]     assertEquals("goog.Foo.<number>", registry.getType("goog.FooAlias").toString()); [EOL]     Asserts.assertTypeEquals(registry.getType("goog.Foo"), registry.getType("goog.FooAlias")); [EOL] } <line_num>: 302,310
public void testCollectedFunctionStub() { [EOL]     testSame("/** @constructor */ function f() { " + "  /** @return {number} */ this.foo;" + "}" + "var x = new f();"); [EOL]     ObjectType x = (ObjectType) findNameType("x", globalScope); [EOL]     assertEquals("f", x.toString()); [EOL]     assertTrue(x.hasProperty("foo")); [EOL]     assertEquals("function (this:f): number", x.getPropertyType("foo").toString()); [EOL]     assertFalse(x.isPropertyTypeInferred("foo")); [EOL] } <line_num>: 312,324
public void testCollectedFunctionStubLocal() { [EOL]     testSame("(function() {" + "/** @constructor */ function f() { " + "  /** @return {number} */ this.foo;" + "}" + "var x = new f();" + "});"); [EOL]     ObjectType x = (ObjectType) findNameType("x", lastLocalScope); [EOL]     assertEquals("f", x.toString()); [EOL]     assertTrue(x.hasProperty("foo")); [EOL]     assertEquals("function (this:f): number", x.getPropertyType("foo").toString()); [EOL]     assertFalse(x.isPropertyTypeInferred("foo")); [EOL] } <line_num>: 326,340
public void testNamespacedFunctionStub() { [EOL]     testSame("var goog = {};" + "/** @param {number} x */ goog.foo;"); [EOL]     ObjectType goog = (ObjectType) findNameType("goog", globalScope); [EOL]     assertTrue(goog.hasProperty("foo")); [EOL]     assertEquals("function (number): ?", goog.getPropertyType("foo").toString()); [EOL]     assertTrue(goog.isPropertyTypeDeclared("foo")); [EOL]     Asserts.assertTypeEquals(globalScope.getVar("goog.foo").getType(), goog.getPropertyType("foo")); [EOL] } <line_num>: 342,355
public void testNamespacedFunctionStubLocal() { [EOL]     testSame("(function() {" + "var goog = {};" + "/** @param {number} x */ goog.foo;" + "});"); [EOL]     ObjectType goog = (ObjectType) findNameType("goog", lastLocalScope); [EOL]     assertTrue(goog.hasProperty("foo")); [EOL]     assertEquals("function (number): ?", goog.getPropertyType("foo").toString()); [EOL]     assertTrue(goog.isPropertyTypeDeclared("foo")); [EOL]     Asserts.assertTypeEquals(lastLocalScope.getVar("goog.foo").getType(), goog.getPropertyType("foo")); [EOL] } <line_num>: 357,372
public void testCollectedCtorProperty() { [EOL]     testSame("/** @constructor */ function f() { " + "  /** @type {number} */ this.foo = 3;" + "}" + "var x = new f();"); [EOL]     ObjectType x = (ObjectType) findNameType("x", globalScope); [EOL]     assertEquals("f", x.toString()); [EOL]     assertTrue(x.hasProperty("foo")); [EOL]     assertEquals("number", x.getPropertyType("foo").toString()); [EOL]     assertFalse(x.isPropertyTypeInferred("foo")); [EOL] } <line_num>: 374,385
public void testPropertyOnUnknownSuperClass1() { [EOL]     testSame("var goog = this.foo();" + "/** @constructor \n * @extends {goog.Unknown} */" + "function Foo() {}" + "Foo.prototype.bar = 1;" + "var x = new Foo();", RhinoErrorReporter.TYPE_PARSE_ERROR); [EOL]     ObjectType x = (ObjectType) findNameType("x", globalScope); [EOL]     assertEquals("Foo", x.toString()); [EOL]     assertTrue(x.getImplicitPrototype().hasOwnProperty("bar")); [EOL]     assertEquals("?", x.getPropertyType("bar").toString()); [EOL]     assertTrue(x.isPropertyTypeInferred("bar")); [EOL] } <line_num>: 387,400
public void testPropertyOnUnknownSuperClass2() { [EOL]     testSame("var goog = this.foo();" + "/** @constructor \n * @extends {goog.Unknown} */" + "function Foo() {}" + "Foo.prototype = {bar: 1};" + "var x = new Foo();", RhinoErrorReporter.TYPE_PARSE_ERROR); [EOL]     ObjectType x = (ObjectType) findNameType("x", globalScope); [EOL]     assertEquals("Foo", x.toString()); [EOL]     assertEquals("Foo.prototype", x.getImplicitPrototype().toString()); [EOL]     assertTrue(x.getImplicitPrototype().hasOwnProperty("bar")); [EOL]     assertEquals("?", x.getPropertyType("bar").toString()); [EOL]     assertTrue(x.isPropertyTypeInferred("bar")); [EOL] } <line_num>: 402,416
public void testMethodBeforeFunction1() throws Exception { [EOL]     testSame("var y = Window.prototype;" + "Window.prototype.alert = function(message) {};" + "/** @constructor */ function Window() {}\n" + "var window = new Window(); \n" + "var x = window;"); [EOL]     ObjectType x = (ObjectType) findNameType("x", globalScope); [EOL]     assertEquals("Window", x.toString()); [EOL]     assertTrue(x.getImplicitPrototype().hasOwnProperty("alert")); [EOL]     assertEquals("function (this:Window, ?): undefined", x.getPropertyType("alert").toString()); [EOL]     assertTrue(x.isPropertyTypeDeclared("alert")); [EOL]     ObjectType y = (ObjectType) findNameType("y", globalScope); [EOL]     assertEquals("function (this:Window, ?): undefined", y.getPropertyType("alert").toString()); [EOL] } <line_num>: 418,435
public void testMethodBeforeFunction2() throws Exception { [EOL]     testSame("var y = Window.prototype;" + "Window.prototype = {alert: function(message) {}};" + "/** @constructor */ function Window() {}\n" + "var window = new Window(); \n" + "var x = window;"); [EOL]     ObjectType x = (ObjectType) findNameType("x", globalScope); [EOL]     assertEquals("Window", x.toString()); [EOL]     assertTrue(x.getImplicitPrototype().hasOwnProperty("alert")); [EOL]     assertEquals("function (this:Window, ?): undefined", x.getPropertyType("alert").toString()); [EOL]     assertFalse(x.isPropertyTypeDeclared("alert")); [EOL]     ObjectType y = (ObjectType) findNameType("y", globalScope); [EOL]     assertEquals("?", y.getPropertyType("alert").toString()); [EOL] } <line_num>: 437,454
public void testAddMethodsPrototypeTwoWays() throws Exception { [EOL]     testSame("/** @constructor */function A() {}" + "A.prototype = {m1: 5, m2: true};" + "A.prototype.m3 = 'third property!';" + "var x = new A();"); [EOL]     ObjectType instanceType = (ObjectType) findNameType("x", globalScope); [EOL]     assertEquals(getNativeObjectType(OBJECT_TYPE).getPropertiesCount() + 3, instanceType.getPropertiesCount()); [EOL]     Asserts.assertTypeEquals(getNativeType(NUMBER_TYPE), instanceType.getPropertyType("m1")); [EOL]     Asserts.assertTypeEquals(getNativeType(BOOLEAN_TYPE), instanceType.getPropertyType("m2")); [EOL]     Asserts.assertTypeEquals(getNativeType(STRING_TYPE), instanceType.getPropertyType("m3")); [EOL]     assertFalse(instanceType.hasOwnProperty("m1")); [EOL]     assertFalse(instanceType.hasOwnProperty("m2")); [EOL]     assertFalse(instanceType.hasOwnProperty("m3")); [EOL]     ObjectType proto1 = instanceType.getImplicitPrototype(); [EOL]     assertTrue(proto1.hasOwnProperty("m1")); [EOL]     assertTrue(proto1.hasOwnProperty("m2")); [EOL]     assertTrue(proto1.hasOwnProperty("m3")); [EOL]     ObjectType proto2 = proto1.getImplicitPrototype(); [EOL]     assertFalse(proto2.hasProperty("m1")); [EOL]     assertFalse(proto2.hasProperty("m2")); [EOL]     assertFalse(proto2.hasProperty("m3")); [EOL] } <line_num>: 456,490
public void testInferredVar() throws Exception { [EOL]     testSame("var x = 3; x = 'x'; x = true;"); [EOL]     Var x = globalScope.getVar("x"); [EOL]     assertEquals("(boolean|number|string)", x.getType().toString()); [EOL]     assertTrue(x.isTypeInferred()); [EOL] } <line_num>: 492,498
public void testDeclaredVar() throws Exception { [EOL]     testSame("/** @type {?number} */ var x = 3; var y = x;"); [EOL]     Var x = globalScope.getVar("x"); [EOL]     assertEquals("(null|number)", x.getType().toString()); [EOL]     assertFalse(x.isTypeInferred()); [EOL]     JSType y = findNameType("y", globalScope); [EOL]     assertEquals("(null|number)", y.toString()); [EOL] } <line_num>: 500,509
public void testPropertiesOnInterface() throws Exception { [EOL]     testSame("/** @interface */ var I = function() {};" + "/** @type {number} */ I.prototype.bar;" + "I.prototype.baz = function(){};"); [EOL]     Var i = globalScope.getVar("I"); [EOL]     assertEquals("function (this:I): ?", i.getType().toString()); [EOL]     assertTrue(i.getType().isInterface()); [EOL]     ObjectType iPrototype = (ObjectType) ((ObjectType) i.getType()).getPropertyType("prototype"); [EOL]     assertEquals("I.prototype", iPrototype.toString()); [EOL]     assertTrue(iPrototype.isFunctionPrototypeType()); [EOL]     assertEquals("number", iPrototype.getPropertyType("bar").toString()); [EOL]     assertEquals("function (this:I): undefined", iPrototype.getPropertyType("baz").toString()); [EOL]     Asserts.assertTypeEquals(iPrototype, globalScope.getVar("I.prototype").getType()); [EOL] } <line_num>: 511,530
public void testPropertiesOnInterface2() throws Exception { [EOL]     testSame("/** @interface */ var I = function() {};" + "I.prototype = {baz: function(){}};" + "/** @type {number} */ I.prototype.bar;"); [EOL]     Var i = globalScope.getVar("I"); [EOL]     assertEquals("function (this:I): ?", i.getType().toString()); [EOL]     assertTrue(i.getType().isInterface()); [EOL]     ObjectType iPrototype = (ObjectType) ((ObjectType) i.getType()).getPropertyType("prototype"); [EOL]     assertEquals("I.prototype", iPrototype.toString()); [EOL]     assertTrue(iPrototype.isFunctionPrototypeType()); [EOL]     assertEquals("number", iPrototype.getPropertyType("bar").toString()); [EOL]     assertEquals("function (this:I): undefined", iPrototype.getPropertyType("baz").toString()); [EOL]     assertNull(globalScope.getVar("I.prototype")); [EOL] } <line_num>: 532,554
public void testStubsInExterns() { [EOL]     testSame("/** @constructor */ function Extern() {}" + "Extern.prototype.bar;" + "var e = new Extern(); e.baz;", "/** @constructor */ function Foo() {}" + "Foo.prototype.bar;" + "var f = new Foo(); f.baz;", null); [EOL]     ObjectType e = (ObjectType) globalScope.getVar("e").getType(); [EOL]     assertEquals("?", e.getPropertyType("bar").toString()); [EOL]     assertEquals("?", e.getPropertyType("baz").toString()); [EOL]     ObjectType f = (ObjectType) globalScope.getVar("f").getType(); [EOL]     assertEquals("?", f.getPropertyType("bar").toString()); [EOL]     assertFalse(f.hasProperty("baz")); [EOL] } <line_num>: 558,574
public void testStubsInExterns2() { [EOL]     testSame("/** @constructor */ function Extern() {}" + "/** @type {Extern} */ var myExtern;" + "/** @type {number} */ myExtern.foo;", "", null); [EOL]     JSType e = globalScope.getVar("myExtern").getType(); [EOL]     assertEquals("(Extern|null)", e.toString()); [EOL]     ObjectType externType = (ObjectType) e.restrictByNotNullOrUndefined(); [EOL]     assertTrue(globalScope.getRootNode().toStringTree(), externType.hasOwnProperty("foo")); [EOL]     assertTrue(externType.isPropertyTypeDeclared("foo")); [EOL]     assertEquals("number", externType.getPropertyType("foo").toString()); [EOL]     assertTrue(externType.isPropertyInExterns("foo")); [EOL] } <line_num>: 576,592
public void testStubsInExterns3() { [EOL]     testSame("/** @type {number} */ myExtern.foo;" + "/** @type {Extern} */ var myExtern;" + "/** @constructor */ function Extern() {}", "", null); [EOL]     JSType e = globalScope.getVar("myExtern").getType(); [EOL]     assertEquals("(Extern|null)", e.toString()); [EOL]     ObjectType externType = (ObjectType) e.restrictByNotNullOrUndefined(); [EOL]     assertTrue(globalScope.getRootNode().toStringTree(), externType.hasOwnProperty("foo")); [EOL]     assertTrue(externType.isPropertyTypeDeclared("foo")); [EOL]     assertEquals("number", externType.getPropertyType("foo").toString()); [EOL]     assertTrue(externType.isPropertyInExterns("foo")); [EOL] } <line_num>: 594,610
public void testStubsInExterns4() { [EOL]     testSame("Extern.prototype.foo;" + "/** @constructor */ function Extern() {}", "", null); [EOL]     JSType e = globalScope.getVar("Extern").getType(); [EOL]     assertEquals("function (new:Extern): ?", e.toString()); [EOL]     ObjectType externProto = ((FunctionType) e).getPrototype(); [EOL]     assertTrue(globalScope.getRootNode().toStringTree(), externProto.hasOwnProperty("foo")); [EOL]     assertTrue(externProto.isPropertyTypeInferred("foo")); [EOL]     assertEquals("?", externProto.getPropertyType("foo").toString()); [EOL]     assertTrue(externProto.isPropertyInExterns("foo")); [EOL] } <line_num>: 612,627
public void testPropertyInExterns1() { [EOL]     testSame("/** @constructor */ function Extern() {}" + "/** @type {Extern} */ var extern;" + "/** @return {number} */ extern.one;", "/** @constructor */ function Normal() {}" + "/** @type {Normal} */ var normal;" + "/** @return {number} */ normal.one;", null); [EOL]     JSType e = globalScope.getVar("Extern").getType(); [EOL]     ObjectType externInstance = ((FunctionType) e).getInstanceType(); [EOL]     assertTrue(externInstance.hasOwnProperty("one")); [EOL]     assertTrue(externInstance.isPropertyTypeDeclared("one")); [EOL]     assertEquals("function (): number", externInstance.getPropertyType("one").toString()); [EOL]     JSType n = globalScope.getVar("Normal").getType(); [EOL]     ObjectType normalInstance = ((FunctionType) n).getInstanceType(); [EOL]     assertFalse(normalInstance.hasOwnProperty("one")); [EOL] } <line_num>: 629,648
public void testPropertyInExterns2() { [EOL]     testSame("/** @type {Object} */ var extern;" + "/** @return {number} */ extern.one;", "/** @type {Object} */ var normal;" + "/** @return {number} */ normal.one;", null); [EOL]     JSType e = globalScope.getVar("extern").getType(); [EOL]     assertFalse(e.dereference().hasOwnProperty("one")); [EOL]     JSType normal = globalScope.getVar("normal").getType(); [EOL]     assertFalse(normal.dereference().hasOwnProperty("one")); [EOL] } <line_num>: 650,662
public void testPropertyInExterns3() { [EOL]     testSame("/** @constructor \n * @param {*=} x */ function Object(x) {}" + "/** @type {number} */ Object.one;", "", null); [EOL]     ObjectType obj = globalScope.getVar("Object").getType().dereference(); [EOL]     assertTrue(obj.hasOwnProperty("one")); [EOL]     assertEquals("number", obj.getPropertyType("one").toString()); [EOL] } <line_num>: 664,672
public void testTypedStubsInExterns() { [EOL]     testSame("/** @constructor \n * @param {*} var_args */ " + "function Function(var_args) {}" + "/** @type {!Function} */ Function.prototype.apply;", "var f = new Function();", null); [EOL]     ObjectType f = (ObjectType) globalScope.getVar("f").getType(); [EOL]     assertEquals("function (?=, (Object|null)=): ?", f.getPropertyType("apply").toString()); [EOL]     FunctionType func = (FunctionType) globalScope.getVar("Function").getType(); [EOL]     assertEquals("Function", func.getPrototype().getPropertyType("apply").toString()); [EOL] } <line_num>: 674,694
public void testTypesInExterns() throws Exception { [EOL]     testSame(CompilerTypeTestCase.DEFAULT_EXTERNS, "", null); [EOL]     Var v = globalScope.getVar("Object"); [EOL]     FunctionType obj = (FunctionType) v.getType(); [EOL]     assertEquals("function (new:Object, *=): ?", obj.toString()); [EOL]     assertNotNull(v.getNode()); [EOL]     assertNotNull(v.input); [EOL] } <line_num>: 696,706
public void testPropertyDeclarationOnInstanceType() { [EOL]     testSame("/** @type {!Object} */ var a = {};" + "/** @type {number} */ a.name = 0;"); [EOL]     assertEquals("number", globalScope.getVar("a.name").getType().toString()); [EOL]     ObjectType a = (ObjectType) (globalScope.getVar("a").getType()); [EOL]     assertFalse(a.hasProperty("name")); [EOL]     assertFalse(getNativeObjectType(OBJECT_TYPE).hasProperty("name")); [EOL] } <line_num>: 708,718
public void testPropertyDeclarationOnRecordType() { [EOL]     testSame("/** @type {{foo: number}} */ var a = {foo: 3};" + "/** @type {number} */ a.name = 0;"); [EOL]     assertEquals("number", globalScope.getVar("a.name").getType().toString()); [EOL]     ObjectType a = (ObjectType) (globalScope.getVar("a").getType()); [EOL]     assertEquals("{foo: number}", a.toString()); [EOL]     assertFalse(a.hasProperty("name")); [EOL] } <line_num>: 720,730
public void testGlobalThis1() { [EOL]     testSame("/** @constructor */ function Window() {}" + "Window.prototype.alert = function() {};" + "var x = this;"); [EOL]     ObjectType x = (ObjectType) (globalScope.getVar("x").getType()); [EOL]     FunctionType windowCtor = (FunctionType) (globalScope.getVar("Window").getType()); [EOL]     assertEquals("global this", x.toString()); [EOL]     assertTrue(x.isSubtype(windowCtor.getInstanceType())); [EOL]     assertFalse(x.isEquivalentTo(windowCtor.getInstanceType())); [EOL]     assertTrue(x.hasProperty("alert")); [EOL] } <line_num>: 732,745
public void testGlobalThis2() { [EOL]     testSame("/** @constructor */ function Window() {}" + "Window.prototype = {alert: function() {}};" + "var x = this;"); [EOL]     ObjectType x = (ObjectType) (globalScope.getVar("x").getType()); [EOL]     FunctionType windowCtor = (FunctionType) (globalScope.getVar("Window").getType()); [EOL]     assertEquals("global this", x.toString()); [EOL]     assertTrue(x.isSubtype(windowCtor.getInstanceType())); [EOL]     assertFalse(x.isEquivalentTo(windowCtor.getInstanceType())); [EOL]     assertTrue(x.hasProperty("alert")); [EOL] } <line_num>: 747,760
public void testObjectLiteralCast() { [EOL]     testSame("/** @constructor */ A.B = function() {}\n" + "A.B.prototype.isEnabled = true;\n" + "goog.reflect.object(A.B, {isEnabled: 3})\n" + "var x = (new A.B()).isEnabled;"); [EOL]     assertEquals("A.B", findTokenType(Token.OBJECTLIT, globalScope).toString()); [EOL]     assertEquals("boolean", findNameType("x", globalScope).toString()); [EOL] } <line_num>: 762,774
public void testBadObjectLiteralCast1() { [EOL]     testSame("/** @constructor */ A.B = function() {}\n" + "goog.reflect.object(A.B, 1)", ClosureCodingConvention.OBJECTLIT_EXPECTED); [EOL] } <line_num>: 776,780
public void testBadObjectLiteralCast2() { [EOL]     testSame("goog.reflect.object(A.B, {})", TypedScopeCreator.CONSTRUCTOR_EXPECTED); [EOL] } <line_num>: 782,785
public void testConstructorNode() { [EOL]     testSame("var goog = {}; /** @constructor */ goog.Foo = function() {};"); [EOL]     ObjectType ctor = (ObjectType) (findNameType("goog.Foo", globalScope)); [EOL]     assertNotNull(ctor); [EOL]     assertTrue(ctor.isConstructor()); [EOL]     assertEquals("function (new:goog.Foo): undefined", ctor.toString()); [EOL] } <line_num>: 787,794
public void testForLoopIntegration() { [EOL]     testSame("var y = 3; for (var x = true; x; y = x) {}"); [EOL]     Var y = globalScope.getVar("y"); [EOL]     assertTrue(y.isTypeInferred()); [EOL]     assertEquals("(boolean|number)", y.getType().toString()); [EOL] } <line_num>: 796,802
public void testConstructorAlias() { [EOL]     testSame("/** @constructor */ var Foo = function() {};" + "/** @constructor */ var FooAlias = Foo;"); [EOL]     assertEquals("Foo", registry.getType("FooAlias").toString()); [EOL]     Asserts.assertTypeEquals(registry.getType("Foo"), registry.getType("FooAlias")); [EOL] } <line_num>: 804,810
public void testNamespacedConstructorAlias() { [EOL]     testSame("var goog = {};" + "/** @constructor */ goog.Foo = function() {};" + "/** @constructor */ goog.FooAlias = goog.Foo;"); [EOL]     assertEquals("goog.Foo", registry.getType("goog.FooAlias").toString()); [EOL]     Asserts.assertTypeEquals(registry.getType("goog.Foo"), registry.getType("goog.FooAlias")); [EOL] } <line_num>: 812,820
public void testTemplateType1() { [EOL]     testSame("/**\n" + " * @param {function(this:T, ...)} fn\n" + " * @param {T} thisObj\n" + " * @template T\n" + " */\n" + "function bind(fn, thisObj) {}" + "/** @constructor */\n" + "function Foo() {}\n" + "/** @return {number} */\n" + "Foo.prototype.baz = function() {};\n" + "bind(function() { var g = this; var f = this.baz(); }, new Foo());"); [EOL]     assertEquals("Foo", findNameType("g", lastLocalScope).toString()); [EOL]     assertEquals("number", findNameType("f", lastLocalScope).toString()); [EOL] } <line_num>: 822,837
public void testTemplateType2() { [EOL]     testSame("/**\n" + " * @param {T} x\n" + " * @return {T}\n" + " * @template T\n" + " */\n" + "function f(x) {\n" + "  return x;\n" + "}" + "/** @type {string} */\n" + "var val = 'hi';\n" + "var result = f(val);"); [EOL]     assertEquals("string", findNameType("result", globalScope).toString()); [EOL] } <line_num>: 839,853
public void testTemplateType2a() { [EOL]     testSame("/**\n" + " * @param {T} x\n" + " * @return {T|undefined}\n" + " * @template T\n" + " */\n" + "function f(x) {\n" + "  return x;\n" + "}" + "/** @type {string} */\n" + "var val = 'hi';\n" + "var result = f(val);"); [EOL]     assertEquals("(string|undefined)", findNameType("result", globalScope).toString()); [EOL] } <line_num>: 855,870
public void testTemplateType2b() { [EOL]     testSame("/**\n" + " * @param {T} x\n" + " * @return {T}\n" + " * @template T\n" + " */\n" + "function f(x) {\n" + "  return x;\n" + "}" + "/** @type {string|undefined} */\n" + "var val = 'hi';\n" + "var result = f(val);"); [EOL]     assertEquals("(string|undefined)", findNameType("result", globalScope).toString()); [EOL] } <line_num>: 872,887
public void testTemplateType3() { [EOL]     testSame("/**\n" + " * @param {T} x\n" + " * @return {T}\n" + " * @template T\n" + " */\n" + "function f(x) {\n" + "  return x;\n" + "}" + "/** @type {string} */\n" + "var val1 = 'hi';\n" + "var result1 = f(val1);" + "/** @type {number} */\n" + "var val2 = 0;\n" + "var result2 = f(val2);"); [EOL]     assertEquals("string", findNameType("result1", globalScope).toString()); [EOL]     assertEquals("number", findNameType("result2", globalScope).toString()); [EOL] } <line_num>: 889,908
public void testTemplateType4() { [EOL]     testSame("/**\n" + " * @param {T} x\n" + " * @return {T}\n" + " * @template T\n" + " */\n" + "function f(x) {\n" + "  return x;\n" + "}" + "/** @type {!Array.<string>} */\n" + "var arr = [];\n" + "(function () {var result = f(arr);})();"); [EOL]     JSType resultType = findNameType("result", lastLocalScope); [EOL]     assertEquals("Array.<string>", resultType.toString()); [EOL] } <line_num>: 910,926
public void testTemplateType4a() { [EOL]     testSame("/**\n" + " * @param {function():T} x\n" + " * @return {T}\n" + " * @template T\n" + " */\n" + "function f(x) {\n" + "  return x;\n" + "}" + "/** @return {string} */\n" + "var g = function(){return 'hi'};\n" + "(function () {var result = f(g);})();"); [EOL]     JSType resultType = findNameType("result", lastLocalScope); [EOL]     assertEquals("string", resultType.toString()); [EOL] } <line_num>: 928,944
public void testTemplateType4b() { [EOL]     testSame("/**\n" + " * @param {function(T):void} x\n" + " * @return {T}\n" + " * @template T\n" + " */\n" + "function f(x) {\n" + "  return x;\n" + "}" + "/** @param {string} x */\n" + "var g = function(x){};\n" + "(function () {var result = f(g);})();"); [EOL]     JSType resultType = findNameType("result", lastLocalScope); [EOL]     assertEquals("string", resultType.toString()); [EOL] } <line_num>: 946,962
public void testTemplateType5() { [EOL]     testSame("/**\n" + " * @param {Array.<T>} arr\n" + " * @return {!Array.<T>}\n" + " * @template T\n" + " */\n" + "function f(arr) {\n" + "  return arr;\n" + "}" + "/** @type {Array.<string>} */\n" + "var arr = [];\n" + "var result = f(arr);"); [EOL]     assertEquals("Array.<string>", findNameTypeStr("result", globalScope)); [EOL] } <line_num>: 964,979
public void testTemplateType6() { [EOL]     testSame("/**\n" + " * @param {Array.<T>|string|undefined} arr\n" + " * @return {!Array.<T>}\n" + " * @template T\n" + " */\n" + "function f(arr) {\n" + "  return arr;\n" + "}" + "/** @type {Array.<string>} */\n" + "var arr = [];\n" + "var result = f(arr);"); [EOL]     assertEquals("Array.<string>", findNameTypeStr("result", globalScope)); [EOL] } <line_num>: 981,996
public void testTemplateType7() { [EOL]     testSame("var goog = {};\n" + "goog.array = {};\n" + "/**\n" + " * @param {Array.<T>} arr\n" + " * @param {function(this:S, !T, number, !Array.<!T>):boolean} f\n" + " * @param {!S=} opt_obj\n" + " * @return {!Array.<T>}\n" + " * @template T,S\n" + " */\n" + "goog.array.filter = function(arr, f, opt_obj) {\n" + "  var res = [];\n" + "  for (var i = 0; i < arr.length; i++) {\n" + "     if (f.call(opt_obj, arr[i], i, arr)) {\n" + "        res.push(val);\n" + "     }\n" + "  }\n" + "  return res;\n" + "}" + "/** @constructor */\n" + "function Foo() {}\n" + "/** @type {Array.<string>} */\n" + "var arr = [];\n" + "var result = goog.array.filter(arr," + "  function(a,b,c) {var self=this;}, new Foo());"); [EOL]     assertEquals("Foo", findNameType("self", lastLocalScope).toString()); [EOL]     assertEquals("string", findNameType("a", lastLocalScope).toString()); [EOL]     assertEquals("number", findNameType("b", lastLocalScope).toString()); [EOL]     assertEquals("Array.<string>", findNameType("c", lastLocalScope).toString()); [EOL]     assertEquals("Array.<string>", findNameType("result", globalScope).toString()); [EOL] } <line_num>: 999,1033
public void testTemplateType7b() { [EOL]     testSame("var goog = {};\n" + "goog.array = {};\n" + "/**\n" + " * @param {Array.<T>} arr\n" + " * @param {function(this:S, !T, number, !Array.<T>):boolean} f\n" + " * @param {!S=} opt_obj\n" + " * @return {!Array.<T>}\n" + " * @template T,S\n" + " */\n" + "goog.array.filter = function(arr, f, opt_obj) {\n" + "  var res = [];\n" + "  for (var i = 0; i < arr.length; i++) {\n" + "     if (f.call(opt_obj, arr[i], i, arr)) {\n" + "        res.push(val);\n" + "     }\n" + "  }\n" + "  return res;\n" + "}" + "/** @constructor */\n" + "function Foo() {}\n" + "/** @type {Array.<string>} */\n" + "var arr = [];\n" + "var result = goog.array.filter(arr," + "  function(a,b,c) {var self=this;}, new Foo());"); [EOL]     assertEquals("Foo", findNameType("self", lastLocalScope).toString()); [EOL]     assertEquals("string", findNameType("a", lastLocalScope).toString()); [EOL]     assertEquals("number", findNameType("b", lastLocalScope).toString()); [EOL]     assertEquals("Array.<string>", findNameType("c", lastLocalScope).toString()); [EOL]     assertEquals("Array.<string>", findNameType("result", globalScope).toString()); [EOL] } <line_num>: 1035,1069
public void testTemplateType7c() { [EOL]     testSame("var goog = {};\n" + "goog.array = {};\n" + "/**\n" + " * @param {Array.<T>} arr\n" + " * @param {function(this:S, T, number, Array.<T>):boolean} f\n" + " * @param {!S=} opt_obj\n" + " * @return {!Array.<T>}\n" + " * @template T,S\n" + " */\n" + "goog.array.filter = function(arr, f, opt_obj) {\n" + "  var res = [];\n" + "  for (var i = 0; i < arr.length; i++) {\n" + "     if (f.call(opt_obj, arr[i], i, arr)) {\n" + "        res.push(val);\n" + "     }\n" + "  }\n" + "  return res;\n" + "}" + "/** @constructor */\n" + "function Foo() {}\n" + "/** @type {Array.<string>} */\n" + "var arr = [];\n" + "var result = goog.array.filter(arr," + "  function(a,b,c) {var self=this;}, new Foo());"); [EOL]     assertEquals("Foo", findNameType("self", lastLocalScope).toString()); [EOL]     assertEquals("string", findNameType("a", lastLocalScope).toString()); [EOL]     assertEquals("number", findNameType("b", lastLocalScope).toString()); [EOL]     assertEquals("(Array.<string>|null)", findNameType("c", lastLocalScope).toString()); [EOL]     assertEquals("Array.<string>", findNameType("result", globalScope).toString()); [EOL] } <line_num>: 1071,1105
public void disable_testTemplateType8() { [EOL]     testSame("/** @constructor */ NodeList = function() {};" + "/** @constructor */ Arguments = function() {};" + "var goog = {};" + "goog.array = {};" + "/**\n" + " * @typedef {Array.<T>|NodeList|Arguments|{length: number}}\n" + " * @template T\n" + " */\n" + "goog.array.ArrayLike;" + "/**\n" + " * @param {function(this:T, ...)} fn\n" + " * @param {T} thisObj\n" + " * @template T\n" + " */\n" + "function bind(fn, thisObj) {}" + "/** @constructor */\n" + "function Foo() {}\n" + "/** @return {number} */\n" + "Foo.prototype.baz = function() {};\n" + "bind(function() { var g = this; var f = this.baz(); }, new Foo());"); [EOL]     assertEquals("T", findNameType("g", lastLocalScope).toString()); [EOL]     assertTrue(findNameType("g", lastLocalScope).isEquivalentTo(registry.getType("Foo"))); [EOL]     assertEquals("number", findNameType("f", lastLocalScope).toString()); [EOL] } <line_num>: 1107,1134
public void testTemplateType9() { [EOL]     testSame("/** @constructor */\n" + "function Foo() {}\n" + "/**\n" + " * @this {T}\n" + " * @return {T}\n" + " * @template T\n" + " */\n" + "Foo.prototype.method = function() {};\n" + "/**\n" + " * @constructor\n" + " * @extends {Foo}\n" + " */\n" + "function Bar() {}\n" + "\n" + "var g = new Bar().method();\n"); [EOL]     assertEquals("Bar", findNameType("g", globalScope).toString()); [EOL] } <line_num>: 1136,1154
public void testTemplateType10() { [EOL]     testSame("/** @constructor */\n" + "function Foo() {}\n" + "\n" + "/**\n" + " * @this {T}\n" + " * @return {T} fn\n" + " * @template T\n" + " */\n" + "Foo.prototype.method = function() {var g = this;};\n"); [EOL]     assertEquals("T", findNameType("g", lastLocalScope).toString()); [EOL] } <line_num>: 1156,1171
public void testTemplateType11() { [EOL]     testSame("/**\n" + " * @this {T}\n" + " * @return {T} fn\n" + " * @template T\n" + " */\n" + "var method = function() {};\n" + "/**\n" + " * @constructor\n" + " */\n" + "function Bar() {}\n" + "\n" + "var g = method().call(new Bar());\n"); [EOL]     assertEquals("?", findNameType("g", globalScope).toString()); [EOL] } <line_num>: 1173,1189
public void testTemplateType12() { [EOL]     testSame("/** @constructor */\n" + "function Foo() {}\n" + "\n" + "/**\n" + " * @this {Array.<T>|{length:number}}\n" + " * @return {T} fn\n" + " * @template T\n" + " */\n" + "Foo.prototype.method = function() {var g = this;};\n"); [EOL]     assertEquals("(Array.<T>|{length: number})", findNameType("g", lastLocalScope).toString()); [EOL] } <line_num>: 1191,1204
public void testClosureParameterTypesWithoutJSDoc() { [EOL]     testSame("/**\n" + " * @param {function(!Object)} bar\n" + " */\n" + "function foo(bar) {}\n" + "foo(function(baz) { var f = baz; })\n"); [EOL]     assertEquals("Object", findNameType("f", lastLocalScope).toString()); [EOL] } <line_num>: 1206,1214
public void testClosureParameterTypesWithJSDoc() { [EOL]     testSame("/**\n" + " * @param {function(!Object)} bar\n" + " */\n" + "function foo(bar) {}\n" + "foo((/** @type {function(string)} */" + "function(baz) { var f = baz; }))\n"); [EOL]     assertEquals("string", findNameType("f", lastLocalScope).toString()); [EOL] } <line_num>: 1216,1225
public void testDuplicateExternProperty1() { [EOL]     testSame("/** @constructor */ function Foo() {}" + "Foo.prototype.bar;" + "/** @type {number} */ Foo.prototype.bar; var x = (new Foo).bar;", null); [EOL]     assertEquals("number", findNameType("x", globalScope).toString()); [EOL] } <line_num>: 1227,1234
public void testDuplicateExternProperty2() { [EOL]     testSame("/** @constructor */ function Foo() {}" + "/** @type {number} */ Foo.prototype.bar;" + "Foo.prototype.bar; var x = (new Foo).bar;", null); [EOL]     assertEquals("number", findNameType("x", globalScope).toString()); [EOL] } <line_num>: 1236,1242
public void testAbstractMethod() { [EOL]     testSame("/** @type {!Function} */ var abstractMethod;" + "/** @constructor */ function Foo() {}" + "/** @param {number} x */ Foo.prototype.bar = abstractMethod;"); [EOL]     assertEquals("Function", findNameType("abstractMethod", globalScope).toString()); [EOL]     FunctionType ctor = (FunctionType) findNameType("Foo", globalScope); [EOL]     ObjectType instance = ctor.getInstanceType(); [EOL]     assertEquals("Foo", instance.toString()); [EOL]     ObjectType proto = instance.getImplicitPrototype(); [EOL]     assertEquals("Foo.prototype", proto.toString()); [EOL]     assertEquals("function (this:Foo, number): ?", proto.getPropertyType("bar").toString()); [EOL] } <line_num>: 1244,1262
public void testAbstractMethod2() { [EOL]     testSame("/** @type {!Function} */ var abstractMethod;" + "/** @param {number} x */ var y = abstractMethod;"); [EOL]     assertEquals("Function", findNameType("y", globalScope).toString()); [EOL]     assertEquals("function (number): ?", globalScope.getVar("y").getType().toString()); [EOL] } <line_num>: 1264,1274
public void testAbstractMethod3() { [EOL]     testSame("/** @type {!Function} */ var abstractMethod;" + "/** @param {number} x */ var y = abstractMethod; y;"); [EOL]     assertEquals("function (number): ?", findNameType("y", globalScope).toString()); [EOL] } <line_num>: 1276,1283
public void testAbstractMethod4() { [EOL]     testSame("/** @type {!Function} */ var abstractMethod;" + "/** @constructor */ function Foo() {}" + "Foo.prototype = {/** @param {number} x */ bar: abstractMethod};"); [EOL]     assertEquals("Function", findNameType("abstractMethod", globalScope).toString()); [EOL]     FunctionType ctor = (FunctionType) findNameType("Foo", globalScope); [EOL]     ObjectType instance = ctor.getInstanceType(); [EOL]     assertEquals("Foo", instance.toString()); [EOL]     ObjectType proto = instance.getImplicitPrototype(); [EOL]     assertEquals("Foo.prototype", proto.toString()); [EOL]     assertEquals("function (this:Foo, number): ?", proto.getPropertyType("bar").toString()); [EOL] } <line_num>: 1285,1304
public void testActiveXObject() { [EOL]     testSame(CompilerTypeTestCase.ACTIVE_X_OBJECT_DEF, "var x = new ActiveXObject();", null); [EOL]     assertEquals("?", findNameType("x", globalScope).toString()); [EOL] } <line_num>: 1306,1313
public void testReturnTypeInference1() { [EOL]     testSame("function f() {}"); [EOL]     assertEquals("function (): undefined", findNameType("f", globalScope).toString()); [EOL] } <line_num>: 1315,1320
public void testReturnTypeInference2() { [EOL]     testSame("/** @return {?} */ function f() {}"); [EOL]     assertEquals("function (): ?", findNameType("f", globalScope).toString()); [EOL] } <line_num>: 1322,1327
public void testReturnTypeInference3() { [EOL]     testSame("function f() {x: return 3;}"); [EOL]     assertEquals("function (): ?", findNameType("f", globalScope).toString()); [EOL] } <line_num>: 1329,1334
public void testReturnTypeInference4() { [EOL]     testSame("function f() { throw Error(); }"); [EOL]     assertEquals("function (): ?", findNameType("f", globalScope).toString()); [EOL] } <line_num>: 1336,1341
public void testReturnTypeInference5() { [EOL]     testSame("function f() { if (true) { return 1; } }"); [EOL]     assertEquals("function (): ?", findNameType("f", globalScope).toString()); [EOL] } <line_num>: 1343,1348
public void testLiteralTypesInferred() { [EOL]     testSame("null + true + false + 0 + '' + {}"); [EOL]     assertEquals("null", findTokenType(Token.NULL, globalScope).toString()); [EOL]     assertEquals("boolean", findTokenType(Token.TRUE, globalScope).toString()); [EOL]     assertEquals("boolean", findTokenType(Token.FALSE, globalScope).toString()); [EOL]     assertEquals("number", findTokenType(Token.NUMBER, globalScope).toString()); [EOL]     assertEquals("string", findTokenType(Token.STRING, globalScope).toString()); [EOL]     assertEquals("{}", findTokenType(Token.OBJECTLIT, globalScope).toString()); [EOL] } <line_num>: 1350,1364
public void testGlobalQualifiedNameInLocalScope() { [EOL]     testSame("var ns = {}; " + "(function() { " + "    /** @param {number} x */ ns.foo = function(x) {}; })();" + "(function() { ns.foo(3); })();"); [EOL]     assertNotNull(globalScope.getVar("ns.foo")); [EOL]     assertEquals("function (number): undefined", globalScope.getVar("ns.foo").getType().toString()); [EOL] } <line_num>: 1366,1376
public void testDeclaredObjectLitProperty1() throws Exception { [EOL]     testSame("var x = {/** @type {number} */ y: 3};"); [EOL]     ObjectType xType = ObjectType.cast(globalScope.getVar("x").getType()); [EOL]     assertEquals("number", xType.getPropertyType("y").toString()); [EOL]     assertEquals("{y: number}", xType.toString()); [EOL] } <line_num>: 1378,1387
public void testDeclaredObjectLitProperty2() throws Exception { [EOL]     testSame("var x = {/** @param {number} z */ y: function(z){}};"); [EOL]     ObjectType xType = ObjectType.cast(globalScope.getVar("x").getType()); [EOL]     assertEquals("function (number): undefined", xType.getPropertyType("y").toString()); [EOL]     assertEquals("{y: function (number): undefined}", xType.toString()); [EOL] } <line_num>: 1389,1398
public void testDeclaredObjectLitProperty3() throws Exception { [EOL]     testSame("function f() {" + "  var x = {/** @return {number} */ y: function(z){ return 3; }};" + "}"); [EOL]     ObjectType xType = ObjectType.cast(lastLocalScope.getVar("x").getType()); [EOL]     assertEquals("function (?): number", xType.getPropertyType("y").toString()); [EOL]     assertEquals("{y: function (?): number}", xType.toString()); [EOL] } <line_num>: 1400,1411
public void testDeclaredObjectLitProperty4() throws Exception { [EOL]     testSame("var x = {y: 5, /** @type {number} */ z: 3};"); [EOL]     ObjectType xType = ObjectType.cast(globalScope.getVar("x").getType()); [EOL]     assertEquals("number", xType.getPropertyType("y").toString()); [EOL]     assertFalse(xType.isPropertyTypeDeclared("y")); [EOL]     assertTrue(xType.isPropertyTypeDeclared("z")); [EOL]     assertEquals("{y: number, z: number}", xType.toString()); [EOL] } <line_num>: 1413,1423
public void testDeclaredObjectLitProperty5() throws Exception { [EOL]     testSame("var x = {/** @type {number} */ prop: 3};" + "function f() { var y = x.prop; }"); [EOL]     JSType yType = lastLocalScope.getVar("y").getType(); [EOL]     assertEquals("number", yType.toString()); [EOL] } <line_num>: 1425,1430
public void testDeclaredObjectLitProperty6() throws Exception { [EOL]     testSame("var x = {/** This is JsDoc */ prop: function(){}};"); [EOL]     Var prop = globalScope.getVar("x.prop"); [EOL]     JSType propType = prop.getType(); [EOL]     assertEquals("function (): undefined", propType.toString()); [EOL]     assertFalse(prop.isTypeInferred()); [EOL]     assertFalse(ObjectType.cast(globalScope.getVar("x").getType()).isPropertyTypeInferred("prop")); [EOL] } <line_num>: 1432,1441
public void testInferredObjectLitProperty1() throws Exception { [EOL]     testSame("var x = {prop: 3};"); [EOL]     Var prop = globalScope.getVar("x.prop"); [EOL]     JSType propType = prop.getType(); [EOL]     assertEquals("number", propType.toString()); [EOL]     assertTrue(prop.isTypeInferred()); [EOL]     assertTrue(ObjectType.cast(globalScope.getVar("x").getType()).isPropertyTypeInferred("prop")); [EOL] } <line_num>: 1443,1452
public void testInferredObjectLitProperty2() throws Exception { [EOL]     testSame("var x = {prop: function(){}};"); [EOL]     Var prop = globalScope.getVar("x.prop"); [EOL]     JSType propType = prop.getType(); [EOL]     assertEquals("function (): undefined", propType.toString()); [EOL]     assertTrue(prop.isTypeInferred()); [EOL]     assertTrue(ObjectType.cast(globalScope.getVar("x").getType()).isPropertyTypeInferred("prop")); [EOL] } <line_num>: 1454,1463
public void testDeclaredConstType1() throws Exception { [EOL]     testSame("/** @const */ var x = 3;" + "function f() { var y = x; }"); [EOL]     JSType yType = lastLocalScope.getVar("y").getType(); [EOL]     assertEquals("number", yType.toString()); [EOL] } <line_num>: 1465,1471
public void testDeclaredConstType2() throws Exception { [EOL]     testSame("/** @const */ var x = {};" + "function f() { var y = x; }"); [EOL]     JSType yType = lastLocalScope.getVar("y").getType(); [EOL]     assertEquals("{}", yType.toString()); [EOL] } <line_num>: 1473,1479
public void testDeclaredConstType3() throws Exception { [EOL]     testSame("/** @const */ var x = {};" + "/** @const */ x.z = 'hi';" + "function f() { var y = x.z; }"); [EOL]     JSType yType = lastLocalScope.getVar("y").getType(); [EOL]     assertEquals("string", yType.toString()); [EOL] } <line_num>: 1481,1488
public void testDeclaredConstType4() throws Exception { [EOL]     testSame("/** @constructor */ function Foo() {}" + "/** @const */ Foo.prototype.z = 'hi';" + "function f() { var y = (new Foo()).z; }"); [EOL]     JSType yType = lastLocalScope.getVar("y").getType(); [EOL]     assertEquals("string", yType.toString()); [EOL]     ObjectType fooType = ((FunctionType) globalScope.getVar("Foo").getType()).getInstanceType(); [EOL]     assertTrue(fooType.isPropertyTypeDeclared("z")); [EOL] } <line_num>: 1490,1501
public void testDeclaredConstType5() throws Exception { [EOL]     testSame("/** @const */ var goog = goog || {};" + "/** @const */ var foo = goog || {};" + "function f() { var y = goog; var z = foo; }"); [EOL]     JSType yType = lastLocalScope.getVar("y").getType(); [EOL]     assertEquals("{}", yType.toString()); [EOL]     JSType zType = lastLocalScope.getVar("z").getType(); [EOL]     assertEquals("?", zType.toString()); [EOL] } <line_num>: 1503,1513
public void testBadCtorInit1() throws Exception { [EOL]     testSame("/** @constructor */ var f;", CTOR_INITIALIZER); [EOL] } <line_num>: 1515,1517
public void testBadCtorInit2() throws Exception { [EOL]     testSame("var x = {}; /** @constructor */ x.f;", CTOR_INITIALIZER); [EOL] } <line_num>: 1519,1521
public void testBadIfaceInit1() throws Exception { [EOL]     testSame("/** @interface */ var f;", IFACE_INITIALIZER); [EOL] } <line_num>: 1523,1525
public void testBadIfaceInit2() throws Exception { [EOL]     testSame("var x = {}; /** @interface */ x.f;", IFACE_INITIALIZER); [EOL] } <line_num>: 1527,1529
public void testFunctionInHook() throws Exception { [EOL]     testSame("/** @param {number} x */ var f = Math.random() ? " + "function(x) {} : function(x) {};"); [EOL]     assertEquals("number", lastLocalScope.getVar("x").getType().toString()); [EOL] } <line_num>: 1531,1535
public void testFunctionInAnd() throws Exception { [EOL]     testSame("/** @param {number} x */ var f = Math.random() && " + "function(x) {};"); [EOL]     assertEquals("number", lastLocalScope.getVar("x").getType().toString()); [EOL] } <line_num>: 1537,1541
public void testFunctionInOr() throws Exception { [EOL]     testSame("/** @param {number} x */ var f = Math.random() || " + "function(x) {};"); [EOL]     assertEquals("number", lastLocalScope.getVar("x").getType().toString()); [EOL] } <line_num>: 1543,1547
public void testFunctionInComma() throws Exception { [EOL]     testSame("/** @param {number} x */ var f = (Math.random(), " + "function(x) {});"); [EOL]     assertEquals("number", lastLocalScope.getVar("x").getType().toString()); [EOL] } <line_num>: 1549,1553
public void testDeclaredCatchExpression1() { [EOL]     testSame("try {} catch (e) {}"); [EOL]     assertEquals(null, globalScope.getVar("e").getType()); [EOL] } <line_num>: 1555,1561
public void testDeclaredCatchExpression2() { [EOL]     testSame("try {} catch (/** @type {string} */ e) {}"); [EOL]     assertEquals("string", globalScope.getVar("e").getType().toString()); [EOL] } <line_num>: 1563,1569
@Override [EOL] public boolean apply(Node n) { [EOL]     return name.equals(n.getQualifiedName()); [EOL] } <line_num>: 1573,1575
private JSType findNameType(final String name, Scope scope) { [EOL]     return findTypeOnMatchedNode(new Predicate<Node>() { [EOL]  [EOL]         @Override [EOL]         public boolean apply(Node n) { [EOL]             return name.equals(n.getQualifiedName()); [EOL]         } [EOL]     }, scope); [EOL] } <line_num>: 1571,1577
private String findNameTypeStr(final String name, Scope scope) { [EOL]     return findNameType(name, scope).toString(); [EOL] } <line_num>: 1579,1581
@Override [EOL] public boolean apply(Node n) { [EOL]     return type == n.getType(); [EOL] } <line_num>: 1585,1587
private JSType findTokenType(final int type, Scope scope) { [EOL]     return findTypeOnMatchedNode(new Predicate<Node>() { [EOL]  [EOL]         @Override [EOL]         public boolean apply(Node n) { [EOL]             return type == n.getType(); [EOL]         } [EOL]     }, scope); [EOL] } <line_num>: 1583,1589
private JSType findTypeOnMatchedNode(Predicate<Node> matcher, Scope scope) { [EOL]     Node root = scope.getRootNode(); [EOL]     Deque<Node> queue = Lists.newLinkedList(); [EOL]     queue.push(root); [EOL]     while (!queue.isEmpty()) { [EOL]         Node current = queue.pop(); [EOL]         if (matcher.apply(current) && current.getJSType() != null) { [EOL]             return current.getJSType(); [EOL]         } [EOL]         for (Node child : current.children()) { [EOL]             queue.push(child); [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 1591,1607
private JSType getNativeType(JSTypeNative type) { [EOL]     return registry.getNativeType(type); [EOL] } <line_num>: 1609,1611
private ObjectType getNativeObjectType(JSTypeNative type) { [EOL]     return (ObjectType) registry.getNativeType(type); [EOL] } <line_num>: 1613,1615
