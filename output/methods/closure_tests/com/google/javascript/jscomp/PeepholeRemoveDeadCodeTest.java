public PeepholeRemoveDeadCodeTest() { [EOL]     super(MATH); [EOL] } <line_num>: 32,34
@Override [EOL] public void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     enableLineNumberCheck(true); [EOL] } <line_num>: 36,40
@Override [EOL] public void process(Node externs, Node root) { [EOL]     SimpleDefinitionFinder definitionFinder = new SimpleDefinitionFinder(compiler); [EOL]     definitionFinder.process(externs, root); [EOL]     new PureFunctionIdentifier(compiler, definitionFinder).process(externs, root); [EOL]     PeepholeOptimizationsPass peepholePass = new PeepholeOptimizationsPass(compiler, new PeepholeRemoveDeadCode()); [EOL]     peepholePass.process(externs, root); [EOL] } <line_num>: 45,56
@Override [EOL] public CompilerPass getProcessor(final Compiler compiler) { [EOL]     return new CompilerPass() { [EOL]  [EOL]         @Override [EOL]         public void process(Node externs, Node root) { [EOL]             SimpleDefinitionFinder definitionFinder = new SimpleDefinitionFinder(compiler); [EOL]             definitionFinder.process(externs, root); [EOL]             new PureFunctionIdentifier(compiler, definitionFinder).process(externs, root); [EOL]             PeepholeOptimizationsPass peepholePass = new PeepholeOptimizationsPass(compiler, new PeepholeRemoveDeadCode()); [EOL]             peepholePass.process(externs, root); [EOL]         } [EOL]     }; [EOL] } <line_num>: 42,58
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 2; [EOL] } <line_num>: 60,64
private void foldSame(String js) { [EOL]     testSame(js); [EOL] } <line_num>: 66,68
private void fold(String js, String expected) { [EOL]     test(js, expected); [EOL] } <line_num>: 70,72
public void testFoldBlock() { [EOL]     fold("{{foo()}}", "foo()"); [EOL]     fold("{foo();{}}", "foo()"); [EOL]     fold("{{foo()}{}}", "foo()"); [EOL]     fold("{{foo()}{bar()}}", "foo();bar()"); [EOL]     fold("{if(false)foo(); {bar()}}", "bar()"); [EOL]     fold("{if(false)if(false)if(false)foo(); {bar()}}", "bar()"); [EOL]     fold("{'hi'}", ""); [EOL]     fold("{x==3}", ""); [EOL]     fold("{ (function(){x++}) }", ""); [EOL]     fold("function f(){return;}", "function f(){return;}"); [EOL]     fold("function f(){return 3;}", "function f(){return 3}"); [EOL]     fold("function f(){if(x)return; x=3; return; }", "function f(){if(x)return; x=3; return; }"); [EOL]     fold("{x=3;;;y=2;;;}", "x=3;y=2"); [EOL]     fold("while(x()){x}", "while(x());"); [EOL]     fold("while(x()){x()}", "while(x())x()"); [EOL]     fold("for(x=0;x<100;x++){x}", "for(x=0;x<100;x++);"); [EOL]     fold("for(x in y){x}", "for(x in y);"); [EOL] } <line_num>: 74,96
public void testFoldBlocksWithManyChildren() { [EOL]     fold("function f() { if (false) {} }", "function f(){}"); [EOL]     fold("function f() { { if (false) {} if (true) {} {} } }", "function f(){}"); [EOL]     fold("{var x; var y; var z; function f() { { var a; { var b; } } } }", "var x;var y;var z;function f(){var a;var b}"); [EOL] } <line_num>: 99,105
public void testIf() { [EOL]     fold("if (1){ x=1; } else { x = 2;}", "x=1"); [EOL]     fold("if (false){ x = 1; } else { x = 2; }", "x=2"); [EOL]     fold("if (undefined){ x = 1; } else { x = 2; }", "x=2"); [EOL]     fold("if (null){ x = 1; } else { x = 2; }", "x=2"); [EOL]     fold("if (void 0){ x = 1; } else { x = 2; }", "x=2"); [EOL]     fold("if (void foo()){ x = 1; } else { x = 2; }", "foo();x=2"); [EOL]     fold("if (false){ x = 1; } else if (true) { x = 3; } else { x = 2; }", "x=3"); [EOL]     fold("if (x){ x = 1; } else if (false) { x = 3; }", "if(x)x=1"); [EOL] } <line_num>: 107,119
public void testHook() { [EOL]     fold("true ? a() : b()", "a()"); [EOL]     fold("false ? a() : b()", "b()"); [EOL]     fold("a() ? b() : true", "a() && b()"); [EOL]     fold("a() ? true : b()", "a() || b()"); [EOL]     fold("(a = true) ? b() : c()", "a = true, b()"); [EOL]     fold("(a = false) ? b() : c()", "a = false, c()"); [EOL]     fold("do {f()} while((a = true) ? b() : c())", "do {f()} while((a = true) , b())"); [EOL]     fold("do {f()} while((a = false) ? b() : c())", "do {f()} while((a = false) , c())"); [EOL]     fold("var x = (true) ? 1 : 0", "var x=1"); [EOL]     fold("var y = (true) ? ((false) ? 12 : (cond ? 1 : 2)) : 13", "var y=cond?1:2"); [EOL]     foldSame("var z=x?void 0:y()"); [EOL]     foldSame("z=x?void 0:y()"); [EOL]     foldSame("z*=x?void 0:y()"); [EOL]     foldSame("var z=x?y():void 0"); [EOL]     foldSame("(w?x:void 0).y=z"); [EOL]     foldSame("(w?x:void 0).y+=z"); [EOL]     fold("y = (x ? void 0 : void 0)", "y = void 0"); [EOL]     fold("y = (x ? f() : f())", "y = f()"); [EOL] } <line_num>: 121,149
public void testConstantConditionWithSideEffect1() { [EOL]     fold("if (b=true) x=1;", "b=true;x=1"); [EOL]     fold("if (b=/ab/) x=1;", "b=/ab/;x=1"); [EOL]     fold("if (b=/ab/){ x=1; } else { x=2; }", "b=/ab/;x=1"); [EOL]     fold("var b;b=/ab/;if(b)x=1;", "var b;b=/ab/;x=1"); [EOL]     foldSame("var b;b=f();if(b)x=1;"); [EOL]     fold("var b=/ab/;if(b)x=1;", "var b=/ab/;x=1"); [EOL]     foldSame("var b=f();if(b)x=1;"); [EOL]     foldSame("b=b++;if(b)x=b;"); [EOL]     fold("(b=0,b=1);if(b)x=b;", "b=0,b=1;if(b)x=b;"); [EOL]     fold("b=1;if(foo,b)x=b;", "b=1;x=b;"); [EOL]     foldSame("b=1;if(foo=1,b)x=b;"); [EOL] } <line_num>: 151,163
public void testConstantConditionWithSideEffect2() { [EOL]     fold("(b=true)?x=1:x=2;", "b=true,x=1"); [EOL]     fold("(b=false)?x=1:x=2;", "b=false,x=2"); [EOL]     fold("if (b=/ab/) x=1;", "b=/ab/;x=1"); [EOL]     fold("var b;b=/ab/;(b)?x=1:x=2;", "var b;b=/ab/;x=1"); [EOL]     foldSame("var b;b=f();(b)?x=1:x=2;"); [EOL]     fold("var b=/ab/;(b)?x=1:x=2;", "var b=/ab/;x=1"); [EOL]     foldSame("var b=f();(b)?x=1:x=2;"); [EOL] } <line_num>: 165,173
public void testVarLifting() { [EOL]     fold("if(true)var a", "var a"); [EOL]     fold("if(false)var a", "var a"); [EOL] } <line_num>: 175,180
public void testFoldUselessWhile() { [EOL]     fold("while(false) { foo() }", ""); [EOL]     fold("while(void 0) { foo() }", ""); [EOL]     fold("while(undefined) { foo() }", ""); [EOL]     foldSame("while(true) foo()"); [EOL]     fold("while(false) { var a = 0; }", "var a"); [EOL]     fold("while(false) { foo(); continue }", ""); [EOL]     fold("while(0) { foo() }", ""); [EOL] } <line_num>: 182,196
public void testFoldUselessFor() { [EOL]     fold("for(;false;) { foo() }", ""); [EOL]     fold("for(;void 0;) { foo() }", ""); [EOL]     fold("for(;undefined;) { foo() }", ""); [EOL]     fold("for(;true;) foo() ", "for(;;) foo() "); [EOL]     foldSame("for(;;) foo()"); [EOL]     fold("for(;false;) { var a = 0; }", "var a"); [EOL]     fold("for(;false;) { foo(); continue }", ""); [EOL] } <line_num>: 198,208
public void testFoldUselessDo() { [EOL]     fold("do { foo() } while(false);", "foo()"); [EOL]     fold("do { foo() } while(void 0);", "foo()"); [EOL]     fold("do { foo() } while(undefined);", "foo()"); [EOL]     fold("do { foo() } while(true);", "do { foo() } while(true);"); [EOL]     fold("do { var a = 0; } while(false);", "var a=0"); [EOL]     fold("do { var a = 0; } while(!{a:foo()});", "var a=0;foo()"); [EOL]     foldSame("do { foo(); continue; } while(0)"); [EOL]     foldSame("do { foo(); break; } while(0)"); [EOL] } <line_num>: 210,222
public void testMinimizeWhileConstantCondition() { [EOL]     fold("while(true) foo()", "while(true) foo()"); [EOL]     fold("while(0) foo()", ""); [EOL]     fold("while(0.0) foo()", ""); [EOL]     fold("while(NaN) foo()", ""); [EOL]     fold("while(null) foo()", ""); [EOL]     fold("while(undefined) foo()", ""); [EOL]     fold("while('') foo()", ""); [EOL] } <line_num>: 224,232
public void testFoldConstantCommaExpressions() { [EOL]     fold("if (true, false) {foo()}", ""); [EOL]     fold("if (false, true) {foo()}", "foo()"); [EOL]     fold("true, foo()", "foo()"); [EOL]     fold("(1 + 2 + ''), foo()", "foo()"); [EOL] } <line_num>: 234,239
public void testRemoveUselessOps() { [EOL]     fold("Math.random()", ""); [EOL]     fold("Math.random(f() + g())", "f(),g();"); [EOL]     fold("Math.random(f(),g(),h())", "f(),g(),h();"); [EOL]     foldSame("f();"); [EOL]     foldSame("(function () { f(); })();"); [EOL]     fold("(function () {})();", ""); [EOL]     fold("(function () {});", ""); [EOL]     fold("(function f() {});", ""); [EOL]     fold("(function () {foo();});", ""); [EOL]     fold("+f()", "f()"); [EOL]     fold("a=(+f(),g())", "a=(f(),g())"); [EOL]     fold("a=(true,g())", "a=g()"); [EOL]     fold("f(),true", "f()"); [EOL]     fold("f() + g()", "f(),g()"); [EOL]     fold("for(;;+f()){}", "for(;;f()){}"); [EOL]     fold("for(+f();;g()){}", "for(f();;g()){}"); [EOL]     fold("for(;;Math.random(f(),g(),h())){}", "for(;;f(),g(),h()){}"); [EOL]     fold("g() && +f()", "g() && f()"); [EOL]     fold("g() || +f()", "g() || f()"); [EOL]     fold("x ? g() : +f()", "x ? g() : f()"); [EOL]     fold("+x()", "x()"); [EOL]     fold("+x() * 2", "x()"); [EOL]     fold("-(+x() * 2)", "x()"); [EOL]     fold("2 -(+x() * 2)", "x()"); [EOL]     fold("x().foo", "x()"); [EOL]     foldSame("x().foo()"); [EOL]     foldSame("x++"); [EOL]     foldSame("++x"); [EOL]     foldSame("x--"); [EOL]     foldSame("--x"); [EOL]     foldSame("x = 2"); [EOL]     foldSame("x *= 2"); [EOL]     foldSame("function f() {}"); [EOL]     foldSame("var x;"); [EOL] } <line_num>: 242,301
public void testOptimizeSwitch() { [EOL]     fold("switch(a){}", ""); [EOL]     fold("switch(foo()){}", "foo()"); [EOL]     fold("switch(a){default:}", ""); [EOL]     fold("switch(a){default:break;}", ""); [EOL]     fold("switch(a){default:var b;break;}", "var b"); [EOL]     fold("switch(a){case 1: default:}", ""); [EOL]     fold("switch(a){default: case 1:}", ""); [EOL]     fold("switch(a){default: break; case 1:break;}", ""); [EOL]     fold("switch(a){default: var b; break; case 1: var c; break;}", "var c; var b;"); [EOL]     foldSame("function f() {switch(a){default: return; case 1: break;}}"); [EOL]     foldSame("function f() {switch(a){case 1: foo();}}"); [EOL]     foldSame("function f() {switch(a){case 3: case 2: case 1: foo();}}"); [EOL]     fold("function f() {switch(a){case 2: case 1: default: foo();}}", "function f() {switch(a){default: foo();}}"); [EOL]     fold("switch(a){case 1: default:break; case 2: foo()}", "switch(a){case 2: foo()}"); [EOL]     foldSame("switch(a){case 1: goo(); default:break; case 2: foo()}"); [EOL]     foldSame("switch(a){case 1: goo(); case 2:break; case 3: foo()}"); [EOL]     fold("switch(1){case 2: var x=0;}", "var x;"); [EOL]     fold("switch ('repeated') {\n" + "case 'repeated':\n" + "  foo();\n" + "  break;\n" + "case 'repeated':\n" + "  var x=0;\n" + "  break;\n" + "}", "var x; {foo();}"); [EOL]     foldSame("switch(a){case 1: var c =2; break;}"); [EOL]     foldSame("function f() {switch(a){case 1: return;}}"); [EOL]     foldSame("x:switch(a){case 1: break x;}"); [EOL]     fold("switch ('foo') {\n" + "case 'foo':\n" + "  foo();\n" + "  break;\n" + "case 'bar':\n" + "  bar();\n" + "  break;\n" + "}", "{foo();}"); [EOL]     fold("switch ('noMatch') {\n" + "case 'foo':\n" + "  foo();\n" + "  break;\n" + "case 'bar':\n" + "  bar();\n" + "  break;\n" + "}", ""); [EOL]     foldSame("switch ('fallThru') {\n" + "case 'fallThru':\n" + "  if (foo(123) > 0) {\n" + "    foobar(1);\n" + "    break;\n" + "  }\n" + "  foobar(2);\n" + "case 'bar':\n" + "  bar();\n" + "}"); [EOL]     foldSame("switch ('fallThru') {\n" + "case 'fallThru':\n" + "  foo();\n" + "case 'bar':\n" + "  bar();\n" + "}"); [EOL]     foldSame("switch ('hasDefaultCase') {\n" + "case 'foo':\n" + "  foo();\n" + "  break;\n" + "default:\n" + "  bar();\n" + "  break;\n" + "}"); [EOL]     fold("switch ('repeated') {\n" + "case 'repeated':\n" + "  foo();\n" + "  break;\n" + "case 'repeated':\n" + "  bar();\n" + "  break;\n" + "}", "{foo();}"); [EOL]     fold("switch ('foo') {\n" + "case 'bar':\n" + "  bar();\n" + "  break;\n" + "case notConstant:\n" + "  foobar();\n" + "  break;\n" + "case 'foo':\n" + "  foo();\n" + "  break;\n" + "}", "switch ('foo') {\n" + "case notConstant:\n" + "  foobar();\n" + "  break;\n" + "case 'foo':\n" + "  foo();\n" + "  break;\n" + "}"); [EOL]     fold("switch (1) {\n" + "case 1:\n" + "  foo();\n" + "  break;\n" + "case 2:\n" + "  bar();\n" + "  break;\n" + "}", "{foo();}"); [EOL]     fold("switch (1) {\n" + "case 1.1:\n" + "  foo();\n" + "  break;\n" + "case 2:\n" + "  bar();\n" + "  break;\n" + "}", ""); [EOL]     foldSame("switch (0) {\n" + "case NaN:\n" + "  foobar();\n" + "  break;\n" + "case -0.0:\n" + "  foo();\n" + "  break;\n" + "case 2:\n" + "  bar();\n" + "  break;\n" + "}"); [EOL]     foldSame("switch ('\\v') {\n" + "case '\\u000B':\n" + "  foo();\n" + "}"); [EOL]     foldSame("switch ('empty') {\n" + "case 'empty':\n" + "case 'foo':\n" + "  foo();\n" + "}"); [EOL] } <line_num>: 303,454
public void testRemoveNumber() { [EOL]     test("3", ""); [EOL] } <line_num>: 456,458
public void testRemoveVarGet1() { [EOL]     test("a", ""); [EOL] } <line_num>: 460,462
public void testRemoveVarGet2() { [EOL]     test("var a = 1;a", "var a = 1"); [EOL] } <line_num>: 464,466
public void testRemoveNamespaceGet1() { [EOL]     test("var a = {};a.b", "var a = {}"); [EOL] } <line_num>: 468,470
public void testRemoveNamespaceGet2() { [EOL]     test("var a = {};a.b=1;a.b", "var a = {};a.b=1"); [EOL] } <line_num>: 472,474
public void testRemovePrototypeGet1() { [EOL]     test("var a = {};a.prototype.b", "var a = {}"); [EOL] } <line_num>: 476,478
public void testRemovePrototypeGet2() { [EOL]     test("var a = {};a.prototype.b = 1;a.prototype.b", "var a = {};a.prototype.b = 1"); [EOL] } <line_num>: 480,483
public void testRemoveAdd1() { [EOL]     test("1 + 2", ""); [EOL] } <line_num>: 485,487
public void testNoRemoveVar1() { [EOL]     testSame("var a = 1"); [EOL] } <line_num>: 489,491
public void testNoRemoveVar2() { [EOL]     testSame("var a = 1, b = 2"); [EOL] } <line_num>: 493,495
public void testNoRemoveAssign1() { [EOL]     testSame("a = 1"); [EOL] } <line_num>: 497,499
public void testNoRemoveAssign2() { [EOL]     testSame("a = b = 1"); [EOL] } <line_num>: 501,503
public void testNoRemoveAssign3() { [EOL]     test("1 + (a = 2)", "a = 2"); [EOL] } <line_num>: 505,507
public void testNoRemoveAssign4() { [EOL]     testSame("x.a = 1"); [EOL] } <line_num>: 509,511
public void testNoRemoveAssign5() { [EOL]     testSame("x.a = x.b = 1"); [EOL] } <line_num>: 513,515
public void testNoRemoveAssign6() { [EOL]     test("1 + (x.a = 2)", "x.a = 2"); [EOL] } <line_num>: 517,519
public void testNoRemoveCall1() { [EOL]     testSame("a()"); [EOL] } <line_num>: 521,523
public void testNoRemoveCall2() { [EOL]     test("a()+b()", "a(),b()"); [EOL] } <line_num>: 525,527
public void testNoRemoveCall3() { [EOL]     testSame("a() && b()"); [EOL] } <line_num>: 529,531
public void testNoRemoveCall4() { [EOL]     testSame("a() || b()"); [EOL] } <line_num>: 533,535
public void testNoRemoveCall5() { [EOL]     test("a() || 1", "a()"); [EOL] } <line_num>: 537,539
public void testNoRemoveCall6() { [EOL]     testSame("1 || a()"); [EOL] } <line_num>: 541,543
public void testNoRemoveThrow1() { [EOL]     testSame("function f(){throw a()}"); [EOL] } <line_num>: 545,547
public void testNoRemoveThrow2() { [EOL]     testSame("function f(){throw a}"); [EOL] } <line_num>: 549,551
public void testNoRemoveThrow3() { [EOL]     testSame("function f(){throw 10}"); [EOL] } <line_num>: 553,555
public void testRemoveInControlStructure1() { [EOL]     test("if(x()) 1", "x()"); [EOL] } <line_num>: 557,559
public void testRemoveInControlStructure2() { [EOL]     test("while(2) 1", "while(2);"); [EOL] } <line_num>: 561,563
public void testRemoveInControlStructure3() { [EOL]     test("for(1;2;3) 4", "for(;;);"); [EOL] } <line_num>: 565,567
public void testHook1() { [EOL]     test("1 ? 2 : 3", ""); [EOL] } <line_num>: 569,571
public void testHook2() { [EOL]     test("x ? a() : 3", "x && a()"); [EOL] } <line_num>: 573,575
public void testHook3() { [EOL]     test("x ? 2 : a()", "x || a()"); [EOL] } <line_num>: 577,579
public void testHook4() { [EOL]     testSame("x ? a() : b()"); [EOL] } <line_num>: 581,583
public void testHook5() { [EOL]     test("a() ? 1 : 2", "a()"); [EOL] } <line_num>: 585,587
public void testHook6() { [EOL]     test("a() ? b() : 2", "a() && b()"); [EOL] } <line_num>: 589,591
public void testHook7() { [EOL]     test("a() ? 1 : b()", "a() || b()"); [EOL] } <line_num>: 596,598
public void testHook8() { [EOL]     testSame("a() ? b() : c()"); [EOL] } <line_num>: 600,602
public void testShortCircuit1() { [EOL]     testSame("1 && a()"); [EOL] } <line_num>: 604,606
public void testShortCircuit2() { [EOL]     test("1 && a() && 2", "1 && a()"); [EOL] } <line_num>: 608,610
public void testShortCircuit3() { [EOL]     test("a() && 1 && 2", "a()"); [EOL] } <line_num>: 612,614
public void testShortCircuit4() { [EOL]     testSame("a() && 1 && b()"); [EOL] } <line_num>: 616,618
public void testComplex1() { [EOL]     test("1 && a() + b() + c()", "1 && (a(), b(), c())"); [EOL] } <line_num>: 620,622
public void testComplex2() { [EOL]     test("1 && (a() ? b() : 1)", "1 && a() && b()"); [EOL] } <line_num>: 624,626
public void testComplex3() { [EOL]     test("1 && (a() ? b() : 1 + c())", "1 && (a() ? b() : c())"); [EOL] } <line_num>: 628,630
public void testComplex4() { [EOL]     test("1 && (a() ? 1 : 1 + c())", "1 && (a() || c())"); [EOL] } <line_num>: 632,634
public void testComplex5() { [EOL]     testSame("(a() ? 1 : 1 + c()) && foo()"); [EOL] } <line_num>: 636,639
public void testNoRemoveFunctionDeclaration1() { [EOL]     testSame("function foo(){}"); [EOL] } <line_num>: 641,643
public void testNoRemoveFunctionDeclaration2() { [EOL]     testSame("var foo = function (){}"); [EOL] } <line_num>: 645,647
public void testNoSimplifyFunctionArgs1() { [EOL]     testSame("f(1 + 2, 3 + g())"); [EOL] } <line_num>: 649,651
public void testNoSimplifyFunctionArgs2() { [EOL]     testSame("1 && f(1 + 2, 3 + g())"); [EOL] } <line_num>: 653,655
public void testNoSimplifyFunctionArgs3() { [EOL]     testSame("1 && foo(a() ? b() : 1 + c())"); [EOL] } <line_num>: 657,659
public void testNoRemoveInherits1() { [EOL]     testSame("var a = {}; this.b = {}; var goog = {}; goog.inherits(b, a)"); [EOL] } <line_num>: 661,663
public void testNoRemoveInherits2() { [EOL]     test("var a = {}; this.b = {}; var goog = {}; goog.inherits(b, a) + 1", "var a = {}; this.b = {}; var goog = {}; goog.inherits(b, a)"); [EOL] } <line_num>: 665,668
public void testNoRemoveInherits3() { [EOL]     testSame("this.a = {}; var b = {}; b.inherits(a);"); [EOL] } <line_num>: 670,672
public void testNoRemoveInherits4() { [EOL]     test("this.a = {}; var b = {}; b.inherits(a) + 1;", "this.a = {}; var b = {}; b.inherits(a)"); [EOL] } <line_num>: 674,677
public void testRemoveFromLabel1() { [EOL]     test("LBL: void 0", "LBL: {}"); [EOL] } <line_num>: 679,681
public void testRemoveFromLabel2() { [EOL]     test("LBL: foo() + 1 + bar()", "LBL: foo(),bar()"); [EOL] } <line_num>: 683,685
public void testCall1() { [EOL]     test("Math.sin(0);", ""); [EOL] } <line_num>: 687,689
public void testCall2() { [EOL]     test("1 + Math.sin(0);", ""); [EOL] } <line_num>: 691,693
public void testNew1() { [EOL]     test("new Date;", ""); [EOL] } <line_num>: 695,697
public void testNew2() { [EOL]     test("1 + new Date;", ""); [EOL] } <line_num>: 699,701
public void testFoldAssign() { [EOL]     test("x=x", ""); [EOL]     testSame("x=xy"); [EOL]     testSame("x=x + 1"); [EOL]     testSame("x.a=x.a"); [EOL]     test("var y=(x=x)", "var y=x"); [EOL]     test("y=1 + (x=x)", "y=1 + x"); [EOL] } <line_num>: 703,710
public void testTryCatchFinally() { [EOL]     testSame("try {foo()} catch (e) {bar()}"); [EOL]     testSame("try { try {foo()} catch (e) {bar()}} catch (x) {bar()}"); [EOL]     test("try {var x = 1} finally {}", "var x = 1;"); [EOL]     testSame("try {var x = 1} finally {x()}"); [EOL]     test("function f() { return; try{var x = 1}finally{} }", "function f() { return; var x = 1; }"); [EOL]     test("try {} finally {x()}", "x()"); [EOL]     test("try {} catch (e) { bar()} finally {x()}", "x()"); [EOL]     test("try {} catch (e) { bar()}", ""); [EOL]     test("try {} catch (e) { var a = 0; } finally {x()}", "var a; x()"); [EOL]     test("try {} catch (e) {}", ""); [EOL]     test("try {} finally {}", ""); [EOL]     test("try {} catch (e) {} finally {}", ""); [EOL] } <line_num>: 712,726
public void testObjectLiteral() { [EOL]     test("({})", ""); [EOL]     test("({a:1})", ""); [EOL]     test("({a:foo()})", "foo()"); [EOL]     test("({'a':foo()})", "foo()"); [EOL] } <line_num>: 728,733
public void testArrayLiteral() { [EOL]     test("([])", ""); [EOL]     test("([1])", ""); [EOL]     test("([a])", ""); [EOL]     test("([foo()])", "foo()"); [EOL] } <line_num>: 735,740
