private static Scope getScope(String js) { [EOL]     Compiler compiler = new Compiler(); [EOL]     Node root = compiler.parseTestCode(js); [EOL]     assertEquals(0, compiler.getErrorCount()); [EOL]     Scope scope = new SyntacticScopeCreator(compiler).createScope(root, null); [EOL]     return scope; [EOL] } <line_num>: 33,40
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     t.getScope(); [EOL] } <line_num>: 50,54
private static void testScopes(String js, int errorCount) { [EOL]     Compiler compiler = new Compiler(); [EOL]     Node root = compiler.parseTestCode(js); [EOL]     NodeTraversal.traverse(compiler, root, new NodeTraversal.AbstractPostOrderCallback() { [EOL]  [EOL]         @Override [EOL]         public void visit(NodeTraversal t, Node n, Node parent) { [EOL]             t.getScope(); [EOL]         } [EOL]     }); [EOL]     assertEquals(errorCount, compiler.getErrorCount()); [EOL] } <line_num>: 45,57
public void testFunctionScope() { [EOL]     Scope scope = getScope("function foo() {}\n" + "var x = function bar(a1) {};" + "[function bar2() { var y; }];" + "if (true) { function z() {} }"); [EOL]     assertTrue(scope.isDeclared("foo", false)); [EOL]     assertTrue(scope.isDeclared("x", false)); [EOL]     assertTrue(scope.isDeclared("z", false)); [EOL]     assertFalse(scope.isDeclared("a1", false)); [EOL]     assertFalse(scope.isDeclared("bar", false)); [EOL]     assertFalse(scope.isDeclared("bar2", false)); [EOL]     assertFalse(scope.isDeclared("y", false)); [EOL]     assertFalse(scope.isDeclared("", false)); [EOL] } <line_num>: 59,75
public void testScopeRootNode() { [EOL]     String js = "function foo() {\n" + " var x = 10;" + "}"; [EOL]     Compiler compiler = new Compiler(); [EOL]     Node root = compiler.parseTestCode(js); [EOL]     assertEquals(0, compiler.getErrorCount()); [EOL]     Scope globalScope = new SyntacticScopeCreator(compiler).createScope(root, null); [EOL]     assertEquals(root, globalScope.getRootNode()); [EOL]     Node fooNode = root.getFirstChild(); [EOL]     assertEquals(Token.FUNCTION, fooNode.getType()); [EOL]     Scope fooScope = new SyntacticScopeCreator(compiler).createScope(fooNode, null); [EOL]     assertEquals(fooNode, fooScope.getRootNode()); [EOL]     assertTrue(fooScope.isDeclared("x", false)); [EOL] } <line_num>: 77,95
public void testRedeclaration1() { [EOL]     String js = "var a; var a;"; [EOL]     int errors = createGlobalScopeHelper(js); [EOL]     assertEquals(1, errors); [EOL] } <line_num>: 97,101
public void testRedeclaration2() { [EOL]     String js = "var a; /** @suppress {duplicate} */ var a;"; [EOL]     int errors = createGlobalScopeHelper(js); [EOL]     assertEquals(0, errors); [EOL] } <line_num>: 103,107
public void testRedeclaration3() { [EOL]     String js = " /** @suppress {duplicate} */ var a; var a; "; [EOL]     int errors = createGlobalScopeHelper(js); [EOL]     assertEquals(0, errors); [EOL] } <line_num>: 109,113
public void testFunctionScopeArguments() { [EOL]     testScopes("function f() {var arguments}", 0); [EOL]     testScopes("var f = function arguments() {}", 1); [EOL]     testScopes("var f = function (arguments) {}", 1); [EOL]     testScopes("function f() {try {} catch(arguments) {}}", 1); [EOL] } <line_num>: 116,123
private int createGlobalScopeHelper(String js) { [EOL]     Compiler compiler = new Compiler(); [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     options.checkSymbols = true; [EOL]     compiler.initOptions(options); [EOL]     Node root = compiler.parseTestCode(js); [EOL]     assertEquals(0, compiler.getErrorCount()); [EOL]     Scope globalScope = new SyntacticScopeCreator(compiler).createScope(root, null); [EOL]     assertEquals(root, globalScope.getRootNode()); [EOL]     return compiler.getErrorCount(); [EOL] } <line_num>: 129,141
