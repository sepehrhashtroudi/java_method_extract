public RemoveUnusedNamesTest() { [EOL]     super(EXTERNS); [EOL] } <line_num>: 39,41
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 45,48
@Override [EOL] public void process(Node externs, Node root) { [EOL]     new TypeCheck(compiler, new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(), compiler.getTypeRegistry()), compiler.getTypeRegistry(), CheckLevel.ERROR, CheckLevel.ERROR).processForTesting(externs, root); [EOL]     new RemoveUnusedNames(compiler, canRemoveExterns).process(externs, root); [EOL]     new UnreachableCodeElimination(compiler, true).process(externs, root); [EOL] } <line_num>: 54,69
@Override [EOL] protected CompilerPass getProcessor(final Compiler compiler) { [EOL]     return new CompilerPass() { [EOL]  [EOL]         @Override [EOL]         public void process(Node externs, Node root) { [EOL]             new TypeCheck(compiler, new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(), compiler.getTypeRegistry()), compiler.getTypeRegistry(), CheckLevel.ERROR, CheckLevel.ERROR).processForTesting(externs, root); [EOL]             new RemoveUnusedNames(compiler, canRemoveExterns).process(externs, root); [EOL]             new UnreachableCodeElimination(compiler, true).process(externs, root); [EOL]         } [EOL]     }; [EOL] } <line_num>: 50,71
@Override [EOL] public void setUp() { [EOL]     canRemoveExterns = false; [EOL] } <line_num>: 73,76
public void testAnalyzeUnusedPrototypeProperties() { [EOL]     test("/** @constructor */ \n" + "function e(){} \n" + "e.prototype.a = function(){};" + "e.prototype.b = function(){};" + "var x = new e; x.a()", "function e(){}" + " e.prototype.a = function(){};" + "var x = new e; x.a()"); [EOL] } <line_num>: 78,89
public void testAnalyzeUnusedPrototypeProperties2() { [EOL] } <line_num>: 91,102
public void testAnalyzeUnusedPrototypeProperties3() { [EOL]     test("/** @constructor */ \n" + "function e(){} \n" + "e.prototype.a = function(){};" + "e.prototype.bExtern = function(){};" + "var x = new e;x.a()", "function e(){}" + "e.prototype.a = function(){};" + "var x = new e; x.a()"); [EOL] } <line_num>: 104,125
public void testAliasing() { [EOL] } <line_num>: 127,129
public void testStatement() { [EOL]     test("/**\n" + " * @fileoverview\n" + " * @notypecheck\n" + " */ \n" + "/** @constructor */" + "function e(){}" + "var x = e.prototype.method1 = function(){};" + "var y = new e; x()", "function e(){}" + "var x = function(){};" + "var y = new e; x()"); [EOL] } <line_num>: 131,143
public void testExportedMethodsByNamingConvention() { [EOL] } <line_num>: 145,147
public void testExportedMethodsByNamingConventionAlwaysExported() { [EOL] } <line_num>: 149,151
