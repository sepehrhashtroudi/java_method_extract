public void testOrderingBothNull() throws Exception { [EOL]     assertEquals(0, comparator.compare(null, null)); [EOL] } <line_num>: 42,44
public void testOrderingSourceName1() throws Exception { [EOL]     JSError e1 = JSError.make(NULL_SOURCE, -1, -1, FOO_TYPE); [EOL]     JSError e2 = JSError.make("a", -1, -1, FOO_TYPE); [EOL]     assertSmaller(error(e1), error(e2)); [EOL] } <line_num>: 46,51
public void testOrderingSourceName2() throws Exception { [EOL]     JSError e1 = JSError.make("a", -1, -1, FOO_TYPE); [EOL]     JSError e2 = JSError.make("b", -1, -1, FOO_TYPE); [EOL]     assertSmaller(error(e1), error(e2)); [EOL] } <line_num>: 53,58
public void testOrderingLineno1() throws Exception { [EOL]     JSError e1 = JSError.make(NULL_SOURCE, -1, -1, FOO_TYPE); [EOL]     JSError e2 = JSError.make(NULL_SOURCE, 2, -1, FOO_TYPE); [EOL]     assertSmaller(error(e1), error(e2)); [EOL] } <line_num>: 60,65
public void testOrderingLineno2() throws Exception { [EOL]     JSError e1 = JSError.make(NULL_SOURCE, 8, -1, FOO_TYPE); [EOL]     JSError e2 = JSError.make(NULL_SOURCE, 56, -1, FOO_TYPE); [EOL]     assertSmaller(error(e1), error(e2)); [EOL] } <line_num>: 67,71
public void testOrderingCheckLevel() throws Exception { [EOL]     JSError e1 = JSError.make(NULL_SOURCE, -1, -1, FOO_TYPE); [EOL]     JSError e2 = JSError.make(NULL_SOURCE, -1, -1, FOO_TYPE); [EOL]     assertSmaller(warning(e1), error(e2)); [EOL] } <line_num>: 73,78
public void testOrderingCharno1() throws Exception { [EOL]     JSError e1 = JSError.make(NULL_SOURCE, 5, -1, FOO_TYPE); [EOL]     JSError e2 = JSError.make(NULL_SOURCE, 5, 2, FOO_TYPE); [EOL]     assertSmaller(error(e1), error(e2)); [EOL]     assertSmaller(warning(e1), error(e2)); [EOL] } <line_num>: 80,87
public void testOrderingCharno2() throws Exception { [EOL]     JSError e1 = JSError.make(NULL_SOURCE, 8, 7, FOO_TYPE); [EOL]     JSError e2 = JSError.make(NULL_SOURCE, 8, 5, FOO_TYPE); [EOL]     assertSmaller(error(e2), error(e1)); [EOL]     assertSmaller(warning(e2), error(e1)); [EOL] } <line_num>: 89,96
public void testOrderingDescription() throws Exception { [EOL]     JSError e1 = JSError.make(NULL_SOURCE, -1, -1, FOO_TYPE); [EOL]     JSError e2 = JSError.make(NULL_SOURCE, -1, -1, JOO_TYPE); [EOL]     assertSmaller(error(e1), error(e2)); [EOL] } <line_num>: 98,103
private ErrorWithLevel error(JSError e) { [EOL]     return new ErrorWithLevel(e, CheckLevel.ERROR); [EOL] } <line_num>: 105,107
private ErrorWithLevel warning(JSError e) { [EOL]     return new ErrorWithLevel(e, CheckLevel.WARNING); [EOL] } <line_num>: 109,111
private void assertSmaller(ErrorWithLevel p1, ErrorWithLevel p2) { [EOL]     int p1p2 = comparator.compare(p1, p2); [EOL]     assertTrue(Integer.toString(p1p2), p1p2 < 0); [EOL]     int p2p1 = comparator.compare(p2, p1); [EOL]     assertTrue(Integer.toString(p2p1), p2p1 > 0); [EOL] } <line_num>: 113,118
