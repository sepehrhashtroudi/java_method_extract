public void testCycle1() throws ParseException { [EOL]     cycleTest(ImmutableMap.of("AAA", "a", "BBB", "b")); [EOL]     cycleTest(ImmutableMap.of("AA:AA", "a", "BB:BB", "b")); [EOL]     cycleTest(ImmutableMap.of("AAA", "a:a", "BBB", "b:b")); [EOL] } <line_num>: 35,39
public void cycleTest(ImmutableMap<String, String> map) throws ParseException { [EOL]     VariableMap in = new VariableMap(map); [EOL]     String serialized = new String(in.toBytes(), Charsets.UTF_8); [EOL]     VariableMap out = VariableMap.fromBytes(serialized.getBytes()); [EOL]     assertMapsEquals(in.toMap(), out.toMap()); [EOL] } <line_num>: 41,47
public void assertMapsEquals(Map<String, String> expected, Map<String, String> result) { [EOL]     assertEquals(expected.size(), result.size()); [EOL]     for (String key : expected.keySet()) { [EOL]         assertEquals(expected.get(key), result.get(key)); [EOL]     } [EOL] } <line_num>: 49,55
public void testToBytes() { [EOL]     VariableMap vm = new VariableMap(ImmutableMap.of("AAA", "a", "BBB", "b")); [EOL]     String serialized = new String(vm.toBytes(), Charsets.UTF_8); [EOL]     assertTrue(serialized.endsWith("\n")); [EOL]     List<String> lines = Arrays.asList(serialized.split("\n")); [EOL]     assertEquals(2, lines.size()); [EOL]     assertTrue(lines.contains("AAA:a")); [EOL]     assertTrue(lines.contains("BBB:b")); [EOL] } <line_num>: 57,66
public void testFromBytes() throws ParseException { [EOL]     VariableMap vm = VariableMap.fromBytes("AAA:a\nBBB:b\n".getBytes()); [EOL]     assertEquals(2, vm.getOriginalNameToNewNameMap().size()); [EOL]     assertEquals("a", vm.lookupNewName("AAA")); [EOL]     assertEquals("b", vm.lookupNewName("BBB")); [EOL]     assertEquals("AAA", vm.lookupSourceName("a")); [EOL]     assertEquals("BBB", vm.lookupSourceName("b")); [EOL] } <line_num>: 68,75
public void testFileFormat1() { [EOL]     assertEqual(new VariableMap(ImmutableMap.of("x\ny", "a")).toBytes(), "x\\ny:a\n".getBytes()); [EOL]     assertEqual(new VariableMap(ImmutableMap.of("x:y", "a")).toBytes(), "x\\:y:a\n".getBytes()); [EOL]     assertEqual(new VariableMap(ImmutableMap.of("x\ny", "a")).toBytes(), "x\\ny:a\n".getBytes()); [EOL]     assertEqual(new VariableMap(ImmutableMap.of("x\\y", "a")).toBytes(), "x\\\\y:a\n".getBytes()); [EOL]     assertEqual(new VariableMap(ImmutableMap.of("\n", "a")).toBytes(), "\\n:a\n".getBytes()); [EOL]     assertEqual(new VariableMap(ImmutableMap.of(":", "a")).toBytes(), "\\::a\n".getBytes()); [EOL]     assertEqual(new VariableMap(ImmutableMap.of("\n", "a")).toBytes(), "\\n:a\n".getBytes()); [EOL]     assertEqual(new VariableMap(ImmutableMap.of("\\", "a")).toBytes(), "\\\\:a\n".getBytes()); [EOL] } <line_num>: 77,109
public void testFromBytesComplex1() throws ParseException { [EOL]     cycleTest(ImmutableMap.of("AAA[':f']", "a")); [EOL]     VariableMap in = new VariableMap(ImmutableMap.of("AAA[':f']", "a")); [EOL]     assertEqual(in.toBytes(), "AAA['\\:f']:a\n".getBytes()); [EOL] } <line_num>: 111,118
public void testFromBytesComplex2() throws ParseException { [EOL]     VariableMap vm = VariableMap.fromBytes("AAA['\\:f']:a\n".getBytes()); [EOL]     assertEquals(1, vm.getOriginalNameToNewNameMap().size()); [EOL]     assertEquals("a", vm.lookupNewName("AAA[':f']")); [EOL]     assertEquals(1, vm.getNewNameToOriginalNameMap().size()); [EOL]     assertEquals("AAA[':f']", vm.lookupSourceName("a")); [EOL] } <line_num>: 120,129
private void assertEqual(byte[] bytes1, byte[] bytes2) { [EOL]     if (bytes1 != bytes2) { [EOL]         assertEquals("length differs.", bytes1.length, bytes2.length); [EOL]         for (int i = 0; i < bytes1.length; i++) { [EOL]             assertEquals("byte " + i + "differs.", bytes1[i], bytes2[i]); [EOL]         } [EOL]     } [EOL] } <line_num>: 131,138
