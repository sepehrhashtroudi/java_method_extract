LabeledStatementSearcher(String target) { [EOL]     this.target = target; [EOL] } <line_num>: 613,615
@Override [EOL] public void process(Node externs, Node root) { [EOL]     if (currentLocationAbstractionIdentifier == LocationAbstractionMode.VISIBILITY_BASED) { [EOL]         final VarCheck varCheck = new VarCheck(compiler); [EOL]         varCheck.process(externs, root); [EOL]     } [EOL]     currentAnalysis.process(externs, root); [EOL] } <line_num>: 51,67
@Override [EOL] protected CompilerPass getProcessor(final Compiler compiler) { [EOL]     currentCompiler = compiler; [EOL]     currentAnalysis = new SideEffectsAnalysis(compiler, currentLocationAbstractionIdentifier); [EOL]     return new CompilerPass() { [EOL]  [EOL]         @Override [EOL]         public void process(Node externs, Node root) { [EOL]             if (currentLocationAbstractionIdentifier == LocationAbstractionMode.VISIBILITY_BASED) { [EOL]                 final VarCheck varCheck = new VarCheck(compiler); [EOL]                 varCheck.process(externs, root); [EOL]             } [EOL]             currentAnalysis.process(externs, root); [EOL]         } [EOL]     }; [EOL] } <line_num>: 42,69
@Override [EOL] public void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     currentAnalysis = null; [EOL]     currentCompiler = null; [EOL] } <line_num>: 71,77
public void testDegenerateSafeMoves() { [EOL]     assertSafeMoveDegenerate("src: 1; env: ; dest: 3;"); [EOL]     assertSafeMoveDegenerate("src: 1; env: 2; dest: 3;"); [EOL]     assertSafeMoveDegenerate("src: 1; env: x; dest: 3;"); [EOL]     assertSafeMoveDegenerate("src: x; env: 1; dest: 3;"); [EOL]     assertSafeMoveDegenerate("src: 1; env: x++; dest: 3;"); [EOL]     assertSafeMoveDegenerate("src: x++; env: 1; dest: 3;"); [EOL] } <line_num>: 79,94
public void testVisibilitySafeMoves() { [EOL]     assertSafeMoveVisibility("src: 1; env: ; dest: 3;"); [EOL]     assertSafeMoveVisibility("src: 1; env: 2; dest: 3;"); [EOL]     assertSafeMoveVisibility("var x; src: 1; env: x; dest: 3;"); [EOL]     assertSafeMoveVisibility("var x; src: x; env: 1; dest: 3;"); [EOL]     assertSafeMoveVisibility("var x; src: 1; env: x++; dest: 3;"); [EOL]     assertSafeMoveVisibility("var x; src: x++; env: 1; dest: 3;"); [EOL]     assertSafeMoveVisibility("var x;" + "function f(){" + "var y;" + "src: x;" + "env: y++;" + "dest: 3;" + "}"); [EOL]     assertSafeMoveVisibility("var x;" + "function f(){" + "var y;" + "src: x++;" + "env: y;" + "dest: 3;" + "}"); [EOL]     assertSafeMoveVisibility("var x;" + "var y;" + "function f(){" + "var y;" + "src: x;" + "env: y++;" + "dest: 3;" + "}"); [EOL]     assertSafeMoveVisibility("var x;" + "var y;" + "function f(){" + "var y;" + "src: x++;" + "env: y;" + "dest: 3;" + "}"); [EOL]     assertSafeMoveVisibility("function f(){" + "var x;" + "var y;" + "src: x;" + "env: y++;" + "dest: 3;" + "function inner() {" + "x" + "}" + "}"); [EOL]     assertSafeMoveVisibility("function f(){" + "var x;" + "var y;" + "src: x++;" + "env: y;" + "dest: 3;" + "function inner() {" + "x" + "}" + "}"); [EOL]     assertSafeMoveVisibility("var x = {};" + "function f(){" + "var y;" + "src: x.a;" + "env: y++;" + "dest: 3;" + "}"); [EOL]     assertSafeMoveVisibility("var x = {};" + "function f(){" + "var y;" + "src: x.a++;" + "env: y;" + "dest: 3;" + "}"); [EOL]     assertSafeMoveVisibility("var x = {};" + "src: x.a;" + "env: (function() {" + "x.a++;" + "});" + "dest: 3;"); [EOL]     assertSafeMoveVisibility("var x = {};" + "src: x.a++;" + "env: (function() {" + "x.a;" + "});" + "dest: 3;"); [EOL] } <line_num>: 96,218
public void testDegenerateUnsafeMoves() { [EOL]     assertUnsafeMoveDegenerate("src: x++; env: foo(y); dest: 3;"); [EOL]     assertUnsafeMoveDegenerate("src: foo(y); env: x++; dest: 3;"); [EOL]     assertUnsafeMoveDegenerate("src: x = 7; env: y = 3; dest:3;"); [EOL] } <line_num>: 220,230
public void testVisibilityUnsafeMoves() { [EOL]     assertUnsafeMoveVisibility("var x,y; src: x++; env: y; dest: 3;"); [EOL]     assertUnsafeMoveVisibility("function f() {" + "var x,y; src: x++; env: y; dest: 3;" + "}"); [EOL]     assertUnsafeMoveVisibility("function f() {" + "var x,y; src: x++; env: y; dest: 3;" + "function inner() {" + "x; y;" + "}" + "}"); [EOL]     assertUnsafeMoveVisibility("var x,y; src: x.a++; env: y.b; dest: 3;"); [EOL]     assertUnsafeMoveVisibility("var x,y; src: y; env: x++; dest: 3;"); [EOL]     assertUnsafeMoveVisibility("function f() {" + "var x,y; src: x; env: y++; dest: 3;" + "}"); [EOL]     assertUnsafeMoveVisibility("function f() {" + "var x,y; src: x; env: y++; dest: 3;" + "function inner() {" + "x; y;" + "}" + "}"); [EOL]     assertUnsafeMoveVisibility("var x,y; src: x.a; env: y.b++; dest: 3;"); [EOL]     assertUnsafeMoveVisibility("var x,y; src: x = 7; env: y = 3; dest: 3;"); [EOL]     assertUnsafeMoveVisibility("function f() {" + "var x,y; src: x = 7; env: y = 3; dest: 3;" + "}"); [EOL]     assertUnsafeMoveVisibility("function f() {" + "var x,y; src: x = 7; env: y = 3; dest: 3;" + "function inner() {" + "x; y;" + "}" + "}"); [EOL]     assertUnsafeMoveVisibility("var x,y; src: x.a = 7; env: y.b = 3; dest: 3;"); [EOL] } <line_num>: 232,293
public void testVisibilityMoveCalls() { [EOL]     assertUnsafeMoveVisibility("var x = {};" + "var g = function(){};" + "function f(){" + "var y;" + "src: g();" + "env: x;" + "dest: 3;" + "}"); [EOL]     assertUnsafeMoveVisibility("var x = {};" + "var g = function(){};" + "function f(){" + "var y;" + "src: x;" + "env: g();" + "dest: 3;" + "}"); [EOL] } <line_num>: 295,323
public void testVisibilityMergesParametersWithHeap() { [EOL]     assertUnsafeMoveVisibility("var x = {};" + "function f(y){" + "src: x[0]++;" + "env: y;" + "dest: 3;" + "}"); [EOL]     assertUnsafeMoveVisibility("var x = {};" + "function f(y){" + "src: x[0];" + "env: y++;" + "dest: 3;" + "}"); [EOL]     assertUnsafeMoveVisibility("var x = {};" + "function f(y){" + "src: arguments[0]++;" + "env: y;" + "dest: 3;" + "}"); [EOL]     assertUnsafeMoveVisibility("var x = {};" + "function f(y){" + "src: arguments[0];" + "env: y++;" + "dest: 3;" + "}"); [EOL] } <line_num>: 325,365
public void testMovedSideEffectsMustHaveSameControlFlow() { [EOL]     assertSafeMoveVisibility("var a;" + "function f() {" + "var l;" + "if (l) {" + "src: a++;" + "env: 3;" + "dest: 3;" + "}" + "}"); [EOL]     assertUnsafeMoveVisibility("var a;" + "function f() {" + "var l;" + "if (l) {" + "src: a++;" + "env: 3;" + "}" + "if (l) {" + "dest: 3;" + "}" + "}"); [EOL]     assertUnsafeMoveVisibility("var a;" + "function f() {" + "var l;" + "if (l) {" + "src: a++;" + "env: 3;" + "} else {" + "dest: 3;" + "}" + "}"); [EOL]     assertSafeMoveVisibility("var a;" + "function f() {" + "var l;" + "while (l) {" + "src: a++;" + "env: 3;" + "dest: 3;" + "}" + "}"); [EOL]     assertUnsafeMoveVisibility("var a;" + "function f() {" + "var l;" + "while (l) {" + "src: a++;" + "env: l;" + "break;" + "dest: 3;" + "}" + "}"); [EOL]     assertUnsafeMoveVisibility("var a;" + "function f() {" + "var l;" + "while (l) {" + "src: a++;" + "env: 3;" + "continue;" + "dest: 3;" + "}" + "}"); [EOL]     assertUnsafeMoveVisibility("var a;" + "function f() {" + "var l;" + "while (l) {" + "src: a++;" + "env: 3;" + "return;" + "dest: 3;" + "}" + "}"); [EOL]     assertSafeMoveVisibility("var a;" + "function f() {" + "var l;" + "do {" + "src: a++;" + "env: 3;" + "dest: 3;" + "} while(l)" + "}"); [EOL]     assertUnsafeMoveVisibility("var a;" + "function f() {" + "var l;" + "do {" + "src: a++;" + "env: 3;" + "} while(l)" + "dest: 3;" + "}"); [EOL]     assertUnsafeMoveVisibility("var a;" + "function f() {" + "var l;" + "switch(l) {" + "case 17:" + "src: a++;" + "env: 3;" + "dest: 3;" + "break;" + "}" + "}"); [EOL]     assertUnsafeMoveVisibility("var a;" + "function f() {" + "var l;" + "switch(l) {" + "case 17:" + "src: a++;" + "env: 3;" + "break;" + "case 18:" + "dest: 3;" + "break;" + "}" + "}"); [EOL]     assertUnsafeMoveVisibility("var a;" + "function f() {" + "src: a++;" + "env: 3;" + "}" + "function g() {" + "dest: 3;" + "}"); [EOL] } <line_num>: 367,537
private SideEffectsAnalysis.AbstractMotionEnvironment environment(Node... nodes) { [EOL]     return new SideEffectsAnalysis.RawMotionEnvironment(ImmutableSet.copyOf(nodes)); [EOL] } <line_num>: 539,544
private void assertMove(LocationAbstractionMode abstraction, String src, boolean expected) { [EOL]     SideEffectsAnalysis analysis = compileAndRun(src, abstraction); [EOL]     Node sourceNode = findLabeledStatement("src"); [EOL]     Node environmentNode = findLabeledStatement("env"); [EOL]     Node destinationNode = findLabeledStatement("dest"); [EOL]     boolean result = analysis.safeToMoveBefore(sourceNode, environment(environmentNode), destinationNode); [EOL]     if (expected) { [EOL]         assertTrue(result); [EOL]     } else { [EOL]         assertFalse(result); [EOL]     } [EOL] } <line_num>: 546,563
private void assertSafeMoveDegenerate(String src) { [EOL]     assertMove(LocationAbstractionMode.DEGENERATE, src, true); [EOL] } <line_num>: 565,567
private void assertUnsafeMoveDegenerate(String src) { [EOL]     assertMove(LocationAbstractionMode.DEGENERATE, src, false); [EOL] } <line_num>: 569,571
private void assertSafeMoveVisibility(String src) { [EOL]     assertMove(LocationAbstractionMode.VISIBILITY_BASED, src, true); [EOL] } <line_num>: 573,575
private void assertUnsafeMoveVisibility(String src) { [EOL]     assertMove(LocationAbstractionMode.VISIBILITY_BASED, src, false); [EOL] } <line_num>: 577,579
private SideEffectsAnalysis compileAndRun(String js, LocationAbstractionMode locationAbstractionIdentifier) { [EOL]     currentLocationAbstractionIdentifier = locationAbstractionIdentifier; [EOL]     testSame(SHARED_EXTERNS, js, null); [EOL]     currentJsRoot = currentCompiler.jsRoot; [EOL]     return currentAnalysis; [EOL] } <line_num>: 581,591
private Node findLabeledStatement(String label) { [EOL]     LabeledStatementSearcher s = new LabeledStatementSearcher(label); [EOL]     new NodeTraversal(currentCompiler, s).traverse(currentCompiler.jsRoot); [EOL]     assertNotNull("Label " + label + " should be in the source code", s.found); [EOL]     return s.found; [EOL] } <line_num>: 594,601
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (n.isLabel() && target.equals(n.getFirstChild().getString())) { [EOL]         found = n.getLastChild(); [EOL]     } [EOL] } <line_num>: 616,623
