public ProcessTweaksTest() { [EOL]     super("function alert(arg) {}"); [EOL] } <line_num>: 35,37
@Override [EOL] public void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     defaultValueOverrides = Maps.newHashMap(); [EOL]     stripTweaks = false; [EOL] } <line_num>: 39,44
@Override [EOL] public void process(Node externs, Node root) { [EOL]     ProcessTweaks processTweak = new ProcessTweaks(compiler, stripTweaks, defaultValueOverrides); [EOL]     processTweak.process(externs, root); [EOL]     if (stripTweaks) { [EOL]         Set<String> emptySet = Collections.emptySet(); [EOL]         final StripCode stripCode = new StripCode(compiler, emptySet, emptySet, emptySet, emptySet); [EOL]         stripCode.enableTweakStripping(); [EOL]         stripCode.process(externs, root); [EOL]     } [EOL] } <line_num>: 49,62
@Override [EOL] protected CompilerPass getProcessor(final Compiler compiler) { [EOL]     return new CompilerPass() { [EOL]  [EOL]         @Override [EOL]         public void process(Node externs, Node root) { [EOL]             ProcessTweaks processTweak = new ProcessTweaks(compiler, stripTweaks, defaultValueOverrides); [EOL]             processTweak.process(externs, root); [EOL]             if (stripTweaks) { [EOL]                 Set<String> emptySet = Collections.emptySet(); [EOL]                 final StripCode stripCode = new StripCode(compiler, emptySet, emptySet, emptySet, emptySet); [EOL]                 stripCode.enableTweakStripping(); [EOL]                 stripCode.process(externs, root); [EOL]             } [EOL]         } [EOL]     }; [EOL] } <line_num>: 46,64
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 66,71
public void testBasicTweak1() { [EOL]     testSame("goog.tweak.registerBoolean('Foo', 'Description');" + "goog.tweak.getBoolean('Foo')"); [EOL] } <line_num>: 73,76
public void testBasicTweak2() { [EOL]     testSame("goog.tweak.registerString('Foo', 'Description');" + "goog.tweak.getString('Foo')"); [EOL] } <line_num>: 78,81
public void testBasicTweak3() { [EOL]     testSame("goog.tweak.registerNumber('Foo', 'Description');" + "goog.tweak.getNumber('Foo')"); [EOL] } <line_num>: 83,86
public void testBasicTweak4() { [EOL]     testSame("goog.tweak.registerButton('Foo', 'Description', function() {})"); [EOL] } <line_num>: 88,90
public void testBasicTweak5() { [EOL]     testSame("goog.tweak.registerBoolean('A.b_7', 'Description', true, " + "{ requiresRestart:false })"); [EOL] } <line_num>: 92,95
public void testBasicTweak6() { [EOL]     testSame("var opts = { requiresRestart:false };" + "goog.tweak.registerBoolean('Foo', 'Description', true, opts)"); [EOL] } <line_num>: 97,100
public void testNonLiteralId1() { [EOL]     test("goog.tweak.registerBoolean(3, 'Description')", null, ProcessTweaks.NON_LITERAL_TWEAK_ID_ERROR); [EOL] } <line_num>: 102,105
public void testNonLiteralId2() { [EOL]     test("goog.tweak.getBoolean('a' + 'b')", null, ProcessTweaks.NON_LITERAL_TWEAK_ID_ERROR); [EOL] } <line_num>: 107,110
public void testNonLiteralId3() { [EOL]     test("var CONST = 'foo'; goog.tweak.overrideDefaultValue(CONST, 3)", null, ProcessTweaks.NON_LITERAL_TWEAK_ID_ERROR); [EOL] } <line_num>: 112,115
public void testInvalidId() { [EOL]     test("goog.tweak.registerBoolean('Some ID', 'a')", null, ProcessTweaks.INVALID_TWEAK_ID_ERROR); [EOL] } <line_num>: 117,120
public void testInvalidDefaultValue1() { [EOL]     testSame("var val = true; goog.tweak.registerBoolean('Foo', 'desc', val)", ProcessTweaks.INVALID_TWEAK_DEFAULT_VALUE_WARNING); [EOL] } <line_num>: 122,125
public void testInvalidDefaultValue2() { [EOL]     testSame("goog.tweak.overrideDefaultValue('Foo', 3 + 1);" + "goog.tweak.registerNumber('Foo', 'desc')", ProcessTweaks.INVALID_TWEAK_DEFAULT_VALUE_WARNING); [EOL] } <line_num>: 127,131
public void testUnknownGetString() { [EOL]     testSame("goog.tweak.getString('huh')", ProcessTweaks.UNKNOWN_TWEAK_WARNING); [EOL] } <line_num>: 133,136
public void testUnknownGetNumber() { [EOL]     testSame("goog.tweak.getNumber('huh')", ProcessTweaks.UNKNOWN_TWEAK_WARNING); [EOL] } <line_num>: 138,141
public void testUnknownGetBoolean() { [EOL]     testSame("goog.tweak.getBoolean('huh')", ProcessTweaks.UNKNOWN_TWEAK_WARNING); [EOL] } <line_num>: 143,146
public void testUnknownOverride() { [EOL]     testSame("goog.tweak.overrideDefaultValue('huh', 'val')", ProcessTweaks.UNKNOWN_TWEAK_WARNING); [EOL] } <line_num>: 148,151
public void testDuplicateTweak() { [EOL]     test("goog.tweak.registerBoolean('TweakA', 'desc');" + "goog.tweak.registerBoolean('TweakA', 'desc')", null, ProcessTweaks.TWEAK_MULTIPLY_REGISTERED_ERROR); [EOL] } <line_num>: 153,157
public void testOverrideAfterRegister() { [EOL]     test("goog.tweak.registerBoolean('TweakA', 'desc');" + "goog.tweak.overrideDefaultValue('TweakA', 'val')", null, ProcessTweaks.TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR); [EOL] } <line_num>: 159,163
public void testRegisterInNonGlobalScope() { [EOL]     test("function foo() {goog.tweak.registerBoolean('TweakA', 'desc');};", null, ProcessTweaks.NON_GLOBAL_TWEAK_INIT_ERROR); [EOL] } <line_num>: 165,168
public void testWrongGetter1() { [EOL]     testSame("goog.tweak.registerBoolean('TweakA', 'desc');" + "goog.tweak.getString('TweakA')", ProcessTweaks.TWEAK_WRONG_GETTER_TYPE_WARNING); [EOL] } <line_num>: 170,174
public void testWrongGetter2() { [EOL]     testSame("goog.tweak.registerString('TweakA', 'desc');" + "goog.tweak.getNumber('TweakA')", ProcessTweaks.TWEAK_WRONG_GETTER_TYPE_WARNING); [EOL] } <line_num>: 176,180
public void testWrongGetter3() { [EOL]     testSame("goog.tweak.registerNumber('TweakA', 'desc');" + "goog.tweak.getBoolean('TweakA')", ProcessTweaks.TWEAK_WRONG_GETTER_TYPE_WARNING); [EOL] } <line_num>: 182,186
public void testWithNoTweaks() { [EOL]     testSame("var DEF=true;var x={};x.foo={}"); [EOL] } <line_num>: 188,190
public void testStrippingWithImplicitDefaultValues() { [EOL]     stripTweaks = true; [EOL]     test("goog.tweak.registerNumber('TweakA', 'desc');" + "goog.tweak.registerBoolean('TweakB', 'desc');" + "goog.tweak.registerString('TweakC', 'desc');" + "alert(goog.tweak.getNumber('TweakA'));" + "alert(goog.tweak.getBoolean('TweakB'));" + "alert(goog.tweak.getString('TweakC'));", "void 0; void 0; void 0; alert(0); alert(false); alert('')"); [EOL] } <line_num>: 192,201
public void testStrippingWithExplicitDefaultValues() { [EOL]     stripTweaks = true; [EOL]     test("goog.tweak.registerNumber('TweakA', 'desc', 5);" + "goog.tweak.registerBoolean('TweakB', 'desc', true);" + "goog.tweak.registerString('TweakC', 'desc', '!');" + "alert(goog.tweak.getNumber('TweakA'));" + "alert(goog.tweak.getBoolean('TweakB'));" + "alert(goog.tweak.getString('TweakC'));", "void 0; void 0; void 0; alert(5); alert(true); alert('!')"); [EOL] } <line_num>: 203,212
public void testStrippingWithInCodeOverrides() { [EOL]     stripTweaks = true; [EOL]     test("goog.tweak.overrideDefaultValue('TweakA', 5);" + "goog.tweak.overrideDefaultValue('TweakB', true);" + "goog.tweak.overrideDefaultValue('TweakC', 'bar');" + "goog.tweak.registerNumber('TweakA', 'desc');" + "goog.tweak.registerBoolean('TweakB', 'desc');" + "goog.tweak.registerString('TweakC', 'desc', 'foo');" + "alert(goog.tweak.getNumber('TweakA'));" + "alert(goog.tweak.getBoolean('TweakB'));" + "alert(goog.tweak.getString('TweakC'));", "void 0; void 0; void 0; void 0; void 0; void 0;" + "alert(5); alert(true); alert('bar');"); [EOL] } <line_num>: 214,227
public void testStrippingWithUnregisteredTweak1() { [EOL]     stripTweaks = true; [EOL]     test("alert(goog.tweak.getNumber('TweakA'));", "alert(0)", null, ProcessTweaks.UNKNOWN_TWEAK_WARNING); [EOL] } <line_num>: 229,233
public void testStrippingWithUnregisteredTweak2() { [EOL]     stripTweaks = true; [EOL]     test("alert(goog.tweak.getBoolean('TweakB'))", "alert(false)", null, ProcessTweaks.UNKNOWN_TWEAK_WARNING); [EOL] } <line_num>: 235,239
public void testStrippingWithUnregisteredTweak3() { [EOL]     stripTweaks = true; [EOL]     test("alert(goog.tweak.getString('TweakC'))", "alert('')", null, ProcessTweaks.UNKNOWN_TWEAK_WARNING); [EOL] } <line_num>: 241,245
public void testStrippingOfManuallyRegistered1() { [EOL]     stripTweaks = true; [EOL]     test("var reg = goog.tweak.getRegistry();" + "if (reg) {" + "  reg.register(new goog.tweak.BooleanSetting('foo', 'desc'));" + "  reg.getEntry('foo').setDefaultValue(1);" + "}", "if (null);"); [EOL] } <line_num>: 247,255
public void testOverridesWithStripping() { [EOL]     stripTweaks = true; [EOL]     defaultValueOverrides.put("TweakA", Node.newNumber(1)); [EOL]     defaultValueOverrides.put("TweakB", new Node(Token.FALSE)); [EOL]     defaultValueOverrides.put("TweakC", Node.newString("!")); [EOL]     test("goog.tweak.overrideDefaultValue('TweakA', 5);" + "goog.tweak.overrideDefaultValue('TweakC', 'bar');" + "goog.tweak.registerNumber('TweakA', 'desc');" + "goog.tweak.registerBoolean('TweakB', 'desc', true);" + "goog.tweak.registerString('TweakC', 'desc', 'foo');" + "alert(goog.tweak.getNumber('TweakA'));" + "alert(goog.tweak.getBoolean('TweakB'));" + "alert(goog.tweak.getString('TweakC'));", "void 0; void 0; void 0; void 0; void 0; " + "alert(1); alert(false); alert('!')"); [EOL] } <line_num>: 257,272
public void testCompilerOverridesNoStripping1() { [EOL]     defaultValueOverrides.put("TweakA", Node.newNumber(1)); [EOL]     defaultValueOverrides.put("TweakB", new Node(Token.FALSE)); [EOL]     defaultValueOverrides.put("TweakC", Node.newString("!")); [EOL]     test("goog.tweak.registerNumber('TweakA', 'desc');" + "goog.tweak.registerBoolean('TweakB', 'desc', true);" + "goog.tweak.registerString('TweakC', 'desc', 'foo');" + "var a = goog.tweak.getCompilerOverrides_()", "goog.tweak.registerNumber('TweakA', 'desc');" + "goog.tweak.registerBoolean('TweakB', 'desc', true);" + "goog.tweak.registerString('TweakC', 'desc', 'foo');" + "var a = { TweakA: 1, TweakB: false, TweakC: '!' };"); [EOL] } <line_num>: 274,286
public void testCompilerOverridesNoStripping2() { [EOL]     defaultValueOverrides.put("TweakA", Node.newNumber(1)); [EOL]     defaultValueOverrides.put("TweakB", new Node(Token.FALSE)); [EOL]     defaultValueOverrides.put("TweakC", Node.newString("!")); [EOL]     test("goog.tweak.registerNumber('TweakA', 'desc');" + "goog.tweak.registerBoolean('TweakB', 'desc', true);" + "goog.tweak.registerString('TweakC', 'desc', 'foo');" + "var a = goog.tweak.getCompilerOverrides_();" + "var b = goog.tweak.getCompilerOverrides_()", "goog.tweak.registerNumber('TweakA', 'desc');" + "goog.tweak.registerBoolean('TweakB', 'desc', true);" + "goog.tweak.registerString('TweakC', 'desc', 'foo');" + "var a = { TweakA: 1, TweakB: false, TweakC: '!' };" + "var b = { TweakA: 1, TweakB: false, TweakC: '!' };"); [EOL] } <line_num>: 288,302
public void testUnknownCompilerOverride() { [EOL]     allowSourcelessWarnings(); [EOL]     defaultValueOverrides.put("TweakA", Node.newString("!")); [EOL]     testSame("var a", ProcessTweaks.UNKNOWN_TWEAK_WARNING); [EOL] } <line_num>: 304,308
public void testCompilerOverrideWithWrongType() { [EOL]     allowSourcelessWarnings(); [EOL]     defaultValueOverrides.put("TweakA", Node.newString("!")); [EOL]     testSame("goog.tweak.registerBoolean('TweakA', 'desc')", ProcessTweaks.INVALID_TWEAK_DEFAULT_VALUE_WARNING); [EOL] } <line_num>: 310,315
