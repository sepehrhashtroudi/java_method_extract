public void testGoogIsDef1() throws Exception { [EOL]     testClosureFunction("goog.isDef", createOptionalType(NUMBER_TYPE), NUMBER_TYPE, VOID_TYPE); [EOL] } <line_num>: 29,34
public void testGoogIsDef2() throws Exception { [EOL]     testClosureFunction("goog.isDef", createNullableType(NUMBER_TYPE), createNullableType(NUMBER_TYPE), NO_TYPE); [EOL] } <line_num>: 36,41
public void testGoogIsDef3() throws Exception { [EOL]     testClosureFunction("goog.isDef", ALL_TYPE, createUnionType(OBJECT_NUMBER_STRING_BOOLEAN, NULL_TYPE), VOID_TYPE); [EOL] } <line_num>: 43,48
public void testGoogIsDef4() throws Exception { [EOL]     testClosureFunction("goog.isDef", UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE); [EOL] } <line_num>: 50,55
public void testGoogIsNull1() throws Exception { [EOL]     testClosureFunction("goog.isNull", createOptionalType(NUMBER_TYPE), NO_TYPE, createOptionalType(NUMBER_TYPE)); [EOL] } <line_num>: 57,62
public void testGoogIsNull2() throws Exception { [EOL]     testClosureFunction("goog.isNull", createNullableType(NUMBER_TYPE), NULL_TYPE, NUMBER_TYPE); [EOL] } <line_num>: 64,69
public void testGoogIsNull3() throws Exception { [EOL]     testClosureFunction("goog.isNull", ALL_TYPE, NULL_TYPE, createUnionType(OBJECT_NUMBER_STRING_BOOLEAN, VOID_TYPE)); [EOL] } <line_num>: 71,76
public void testGoogIsNull4() throws Exception { [EOL]     testClosureFunction("goog.isNull", UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE); [EOL] } <line_num>: 78,83
public void testGoogIsDefAndNotNull1() throws Exception { [EOL]     testClosureFunction("goog.isDefAndNotNull", createOptionalType(NUMBER_TYPE), NUMBER_TYPE, VOID_TYPE); [EOL] } <line_num>: 85,90
public void testGoogIsDefAndNotNull2() throws Exception { [EOL]     testClosureFunction("goog.isDefAndNotNull", createNullableType(NUMBER_TYPE), NUMBER_TYPE, NULL_TYPE); [EOL] } <line_num>: 92,97
public void testGoogIsDefAndNotNull3() throws Exception { [EOL]     testClosureFunction("goog.isDefAndNotNull", createOptionalType(createNullableType(NUMBER_TYPE)), NUMBER_TYPE, NULL_VOID); [EOL] } <line_num>: 99,104
public void testGoogIsDefAndNotNull4() throws Exception { [EOL]     testClosureFunction("goog.isDefAndNotNull", ALL_TYPE, OBJECT_NUMBER_STRING_BOOLEAN, NULL_VOID); [EOL] } <line_num>: 106,111
public void testGoogIsDefAndNotNull5() throws Exception { [EOL]     testClosureFunction("goog.isDefAndNotNull", UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE); [EOL] } <line_num>: 113,118
public void testGoogIsString1() throws Exception { [EOL]     testClosureFunction("goog.isString", createNullableType(STRING_TYPE), STRING_TYPE, NULL_TYPE); [EOL] } <line_num>: 120,125
public void testGoogIsString2() throws Exception { [EOL]     testClosureFunction("goog.isString", createNullableType(NUMBER_TYPE), createNullableType(NUMBER_TYPE), createNullableType(NUMBER_TYPE)); [EOL] } <line_num>: 127,132
public void testGoogIsBoolean1() throws Exception { [EOL]     testClosureFunction("goog.isBoolean", createNullableType(BOOLEAN_TYPE), BOOLEAN_TYPE, NULL_TYPE); [EOL] } <line_num>: 134,139
public void testGoogIsBoolean2() throws Exception { [EOL]     testClosureFunction("goog.isBoolean", createUnionType(BOOLEAN_TYPE, STRING_TYPE, NO_OBJECT_TYPE), BOOLEAN_TYPE, createUnionType(STRING_TYPE, NO_OBJECT_TYPE)); [EOL] } <line_num>: 141,146
public void testGoogIsBoolean3() throws Exception { [EOL]     testClosureFunction("goog.isBoolean", ALL_TYPE, BOOLEAN_TYPE, ALL_TYPE); [EOL] } <line_num>: 148,154
public void testGoogIsBoolean4() throws Exception { [EOL]     testClosureFunction("goog.isBoolean", UNKNOWN_TYPE, BOOLEAN_TYPE, CHECKED_UNKNOWN_TYPE); [EOL] } <line_num>: 156,161
public void testGoogIsNumber() throws Exception { [EOL]     testClosureFunction("goog.isNumber", createNullableType(NUMBER_TYPE), NUMBER_TYPE, NULL_TYPE); [EOL] } <line_num>: 163,168
public void testGoogIsFunction() throws Exception { [EOL]     testClosureFunction("goog.isFunction", createNullableType(OBJECT_FUNCTION_TYPE), OBJECT_FUNCTION_TYPE, NULL_TYPE); [EOL] } <line_num>: 170,175
public void testGoogIsFunction2() throws Exception { [EOL]     testClosureFunction("goog.isFunction", OBJECT_NUMBER_STRING_BOOLEAN, U2U_CONSTRUCTOR_TYPE, OBJECT_NUMBER_STRING_BOOLEAN); [EOL] } <line_num>: 177,182
public void testGoogIsFunction3() throws Exception { [EOL]     testClosureFunction("goog.isFunction", createUnionType(U2U_CONSTRUCTOR_TYPE, NUMBER_STRING_BOOLEAN), U2U_CONSTRUCTOR_TYPE, NUMBER_STRING_BOOLEAN); [EOL] } <line_num>: 184,189
public void testGoogIsFunctionOnNull() throws Exception { [EOL]     testClosureFunction("goog.isFunction", null, U2U_CONSTRUCTOR_TYPE, null); [EOL] } <line_num>: 191,196
public void testGoogIsArray1() throws Exception { [EOL]     testClosureFunction("goog.isArray", OBJECT_TYPE, ARRAY_TYPE, OBJECT_TYPE); [EOL] } <line_num>: 198,203
public void testGoogIsArray2() throws Exception { [EOL]     testClosureFunction("goog.isArray", ALL_TYPE, ALL_TYPE, ALL_TYPE); [EOL] } <line_num>: 205,210
public void testGoogIsArray3() throws Exception { [EOL]     testClosureFunction("goog.isArray", UNKNOWN_TYPE, CHECKED_UNKNOWN_TYPE, CHECKED_UNKNOWN_TYPE); [EOL] } <line_num>: 212,217
public void testGoogIsArray4() throws Exception { [EOL]     testClosureFunction("goog.isArray", createUnionType(ARRAY_TYPE, NULL_TYPE), ARRAY_TYPE, NULL_TYPE); [EOL] } <line_num>: 219,224
public void testGoogIsArrayOnNull() throws Exception { [EOL]     testClosureFunction("goog.isArray", null, ARRAY_TYPE, null); [EOL] } <line_num>: 226,231
public void testGoogIsObjectOnNull() throws Exception { [EOL]     testClosureFunction("goog.isObject", null, OBJECT_TYPE, null); [EOL] } <line_num>: 233,238
public void testGoogIsObject1() throws Exception { [EOL]     testClosureFunction("goog.isObject", ALL_TYPE, NO_OBJECT_TYPE, createUnionType(NUMBER_STRING_BOOLEAN, NULL_TYPE, VOID_TYPE)); [EOL] } <line_num>: 240,245
public void testGoogIsObject2() throws Exception { [EOL]     testClosureFunction("goog.isObject", createUnionType(OBJECT_TYPE, NUMBER_STRING_BOOLEAN), OBJECT_TYPE, NUMBER_STRING_BOOLEAN); [EOL] } <line_num>: 247,252
public void testGoogIsObject3() throws Exception { [EOL]     testClosureFunction("goog.isObject", createUnionType(OBJECT_TYPE, NUMBER_STRING_BOOLEAN, NULL_TYPE, VOID_TYPE), OBJECT_TYPE, createUnionType(NUMBER_STRING_BOOLEAN, NULL_TYPE, VOID_TYPE)); [EOL] } <line_num>: 254,260
public void testGoogIsObject4() throws Exception { [EOL]     testClosureFunction("goog.isObject", UNKNOWN_TYPE, NO_OBJECT_TYPE, CHECKED_UNKNOWN_TYPE); [EOL] } <line_num>: 262,267
private void testClosureFunction(String function, JSType type, JSType trueType, JSType falseType) { [EOL]     Node n = compiler.parseTestCode("var a; " + function + "(a)"); [EOL]     Node call = n.getLastChild().getLastChild(); [EOL]     Node name = call.getLastChild(); [EOL]     Scope scope = new SyntacticScopeCreator(compiler).createScope(n, null); [EOL]     FlowScope flowScope = LinkedFlowScope.createEntryLattice(scope); [EOL]     assertEquals(Token.CALL, call.getType()); [EOL]     assertEquals(Token.NAME, name.getType()); [EOL]     GoogleCodingConvention convention = new GoogleCodingConvention(); [EOL]     flowScope.inferSlotType("a", type); [EOL]     ClosureReverseAbstractInterpreter rai = new ClosureReverseAbstractInterpreter(convention, registry); [EOL]     Asserts.assertTypeEquals(trueType, rai.getPreciserScopeKnowingConditionOutcome(call, flowScope, true).getSlot("a").getType()); [EOL]     Asserts.assertTypeEquals(falseType, rai.getPreciserScopeKnowingConditionOutcome(call, flowScope, false).getSlot("a").getType()); [EOL] } <line_num>: 269,298
