@Override [EOL] public void setUp() { [EOL]     trustedStrings = true; [EOL] } <line_num>: 33,35
Node parse(String js) { [EOL]     return parse(js, false); [EOL] } <line_num>: 37,39
Node parse(String js, boolean checkTypes) { [EOL]     Compiler compiler = new Compiler(); [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     options.setTrustedStrings(trustedStrings); [EOL]     options.setLanguageIn(LanguageMode.ECMASCRIPT5); [EOL]     compiler.initOptions(options); [EOL]     Node n = compiler.parseTestCode(js); [EOL]     if (checkTypes) { [EOL]         DefaultPassConfig passConfig = new DefaultPassConfig(null); [EOL]         CompilerPass typeResolver = passConfig.resolveTypes.create(compiler); [EOL]         Node externs = new Node(Token.SCRIPT); [EOL]         externs.setInputId(new InputId("externs")); [EOL]         Node externAndJsRoot = new Node(Token.BLOCK, externs, n); [EOL]         externAndJsRoot.setIsSyntheticBlock(true); [EOL]         typeResolver.process(externs, n); [EOL]         CompilerPass inferTypes = passConfig.inferTypes.create(compiler); [EOL]         inferTypes.process(externs, n); [EOL]     } [EOL]     checkUnexpectedErrorsOrWarnings(compiler, 0); [EOL]     return n; [EOL] } <line_num>: 41,65
private static void checkUnexpectedErrorsOrWarnings(Compiler compiler, int expected) { [EOL]     int actual = compiler.getErrors().length + compiler.getWarnings().length; [EOL]     if (actual != expected) { [EOL]         String msg = ""; [EOL]         for (JSError err : compiler.getErrors()) { [EOL]             msg += "Error:" + err.toString() + "\n"; [EOL]         } [EOL]         for (JSError err : compiler.getWarnings()) { [EOL]             msg += "Warning:" + err.toString() + "\n"; [EOL]         } [EOL]         assertEquals("Unexpected warnings or errors.\n " + msg, expected, actual); [EOL]     } [EOL] } <line_num>: 67,80
String parsePrint(String js, boolean prettyprint, int lineThreshold) { [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     options.setTrustedStrings(trustedStrings); [EOL]     options.setPrettyPrint(prettyprint); [EOL]     options.setLineLengthThreshold(lineThreshold); [EOL]     return new CodePrinter.Builder(parse(js)).setCompilerOptions(options).build(); [EOL] } <line_num>: 82,89
String parsePrint(String js, boolean prettyprint, boolean lineBreak, int lineThreshold) { [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     options.setTrustedStrings(trustedStrings); [EOL]     options.setPrettyPrint(prettyprint); [EOL]     options.setLineLengthThreshold(lineThreshold); [EOL]     options.setLineBreak(lineBreak); [EOL]     return new CodePrinter.Builder(parse(js)).setCompilerOptions(options).build(); [EOL] } <line_num>: 91,100
String parsePrint(String js, boolean prettyprint, boolean lineBreak, boolean preferLineBreakAtEof, int lineThreshold) { [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     options.setTrustedStrings(trustedStrings); [EOL]     options.setPrettyPrint(prettyprint); [EOL]     options.setLineLengthThreshold(lineThreshold); [EOL]     options.setPreferLineBreakAtEndOfFile(preferLineBreakAtEof); [EOL]     options.setLineBreak(lineBreak); [EOL]     return new CodePrinter.Builder(parse(js)).setCompilerOptions(options).build(); [EOL] } <line_num>: 102,112
String parsePrint(String js, boolean prettyprint, boolean lineBreak, int lineThreshold, boolean outputTypes) { [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     options.setTrustedStrings(trustedStrings); [EOL]     options.setPrettyPrint(prettyprint); [EOL]     options.setLineLengthThreshold(lineThreshold); [EOL]     options.setLineBreak(lineBreak); [EOL]     return new CodePrinter.Builder(parse(js, true)).setCompilerOptions(options).setOutputTypes(outputTypes).build(); [EOL] } <line_num>: 114,124
String parsePrint(String js, boolean prettyprint, boolean lineBreak, int lineThreshold, boolean outputTypes, boolean tagAsStrict) { [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     options.setTrustedStrings(trustedStrings); [EOL]     options.setPrettyPrint(prettyprint); [EOL]     options.setLineLengthThreshold(lineThreshold); [EOL]     options.setLineBreak(lineBreak); [EOL]     return new CodePrinter.Builder(parse(js, true)).setCompilerOptions(options).setOutputTypes(outputTypes).setTagAsStrict(tagAsStrict).build(); [EOL] } <line_num>: 126,138
String printNode(Node n) { [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     options.setLineLengthThreshold(CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD); [EOL]     return new CodePrinter.Builder(n).setCompilerOptions(options).build(); [EOL] } <line_num>: 141,145
void assertPrintNode(String expectedJs, Node ast) { [EOL]     assertEquals(expectedJs, printNode(ast)); [EOL] } <line_num>: 147,149
public void testPrint() { [EOL]     assertPrint("10 + a + b", "10+a+b"); [EOL]     assertPrint("10 + (30*50)", "10+30*50"); [EOL]     assertPrint("with(x) { x + 3; }", "with(x)x+3"); [EOL]     assertPrint("\"aa'a\"", "\"aa'a\""); [EOL]     assertPrint("\"aa\\\"a\"", "'aa\"a'"); [EOL]     assertPrint("function foo()\n{return 10;}", "function foo(){return 10}"); [EOL]     assertPrint("a instanceof b", "a instanceof b"); [EOL]     assertPrint("typeof(a)", "typeof a"); [EOL]     assertPrint("var foo = x ? { a : 1 } : {a: 3, b:4, \"default\": 5, \"foo-bar\": 6}", "var foo=x?{a:1}:{a:3,b:4,\"default\":5,\"foo-bar\":6}"); [EOL]     assertPrint("function foo(){throw 'error';}", "function foo(){throw\"error\";}"); [EOL]     assertPrint("if (true) function foo(){return}", "if(true){function foo(){return}}"); [EOL]     assertPrint("var x = 10; { var y = 20; }", "var x=10;var y=20"); [EOL]     assertPrint("while (x-- > 0);", "while(x-- >0);"); [EOL]     assertPrint("x-- >> 1", "x-- >>1"); [EOL]     assertPrint("(function () {})(); ", "(function(){})()"); [EOL]     assertPrint("var a,b,c,d;a || (b&& c) && (a || d)", "var a,b,c,d;a||b&&c&&(a||d)"); [EOL]     assertPrint("var a,b,c; a || (b || c); a * (b * c); a | (b | c)", "var a,b,c;a||b||c;a*b*c;a|b|c"); [EOL]     assertPrint("var a,b,c; a / b / c;a / (b / c); a - (b - c);", "var a,b,c;a/b/c;a/(b/c);a-(b-c)"); [EOL]     assertPrint("var a,b; a = b = 3;", "var a,b;a=b=3"); [EOL]     assertPrint("var a,b,c,d; a = (b = c = (d = 3));", "var a,b,c,d;a=b=c=d=3"); [EOL]     assertPrint("var a,b,c; a += (b = c += 3);", "var a,b,c;a+=b=c+=3"); [EOL]     assertPrint("var a,b,c; a *= (b -= c);", "var a,b,c;a*=b-=c"); [EOL]     assertPrint("a ? delete b[0] : 3", "a?delete b[0]:3"); [EOL]     assertPrint("(delete a[0])/10", "delete a[0]/10"); [EOL]     assertPrint("new A", "new A"); [EOL]     assertPrint("new A()", "new A"); [EOL]     assertPrint("new A('x')", "new A(\"x\")"); [EOL]     assertPrint("new A().a()", "(new A).a()"); [EOL]     assertPrint("(new A).a()", "(new A).a()"); [EOL]     assertPrint("new A('y').a()", "(new A(\"y\")).a()"); [EOL]     assertPrint("new A.B", "new A.B"); [EOL]     assertPrint("new A.B()", "new A.B"); [EOL]     assertPrint("new A.B('z')", "new A.B(\"z\")"); [EOL]     assertPrint("(new A.B).a()", "(new A.B).a()"); [EOL]     assertPrint("new A.B().a()", "(new A.B).a()"); [EOL]     assertPrint("new A.B('w').a()", "(new A.B(\"w\")).a()"); [EOL]     assertPrint("x + +y", "x+ +y"); [EOL]     assertPrint("x - (-y)", "x- -y"); [EOL]     assertPrint("x++ +y", "x++ +y"); [EOL]     assertPrint("x-- -y", "x-- -y"); [EOL]     assertPrint("x++ -y", "x++-y"); [EOL]     assertPrint("foo:for(;;){break foo;}", "foo:for(;;)break foo"); [EOL]     assertPrint("foo:while(1){continue foo;}", "foo:while(1)continue foo"); [EOL]     assertPrint("({})", "({})"); [EOL]     assertPrint("var x = {};", "var x={}"); [EOL]     assertPrint("({}).x", "({}).x"); [EOL]     assertPrint("({})['x']", "({})[\"x\"]"); [EOL]     assertPrint("({}) instanceof Object", "({})instanceof Object"); [EOL]     assertPrint("({}) || 1", "({})||1"); [EOL]     assertPrint("1 || ({})", "1||{}"); [EOL]     assertPrint("({}) ? 1 : 2", "({})?1:2"); [EOL]     assertPrint("0 ? ({}) : 2", "0?{}:2"); [EOL]     assertPrint("0 ? 1 : ({})", "0?1:{}"); [EOL]     assertPrint("typeof ({})", "typeof{}"); [EOL]     assertPrint("f({})", "f({})"); [EOL]     assertPrint("(function(){})", "(function(){})"); [EOL]     assertPrint("(function(){})()", "(function(){})()"); [EOL]     assertPrint("(function(){})instanceof Object", "(function(){})instanceof Object"); [EOL]     assertPrint("(function(){}).bind().call()", "(function(){}).bind().call()"); [EOL]     assertPrint("var x = function() { };", "var x=function(){}"); [EOL]     assertPrint("var x = function() { }();", "var x=function(){}()"); [EOL]     assertPrint("(function() {}), 2", "(function(){}),2"); [EOL]     assertPrint("(function f(){})", "(function f(){})"); [EOL]     assertPrint("function f(){}", "function f(){}"); [EOL]     assertPrint("({ 'a': 4, '\\u0100': 4 })", "({\"a\":4,\"\\u0100\":4})"); [EOL]     assertPrint("({ a: 4, '\\u0100': 4 })", "({a:4,\"\\u0100\":4})"); [EOL]     assertPrint("if (true) { alert();}", "if(true)alert()"); [EOL]     assertPrint("if (false) {} else {alert(\"a\");}", "if(false);else alert(\"a\")"); [EOL]     assertPrint("for(;;) { alert();};", "for(;;)alert()"); [EOL]     assertPrint("do { alert(); } while(true);", "do alert();while(true)"); [EOL]     assertPrint("myLabel: { alert();}", "myLabel:alert()"); [EOL]     assertPrint("myLabel: for(;;) continue myLabel;", "myLabel:for(;;)continue myLabel"); [EOL]     assertPrint("if (true) var x; x = 4;", "if(true)var x;x=4"); [EOL]     assertPrint("\\u00fb", "\\u00fb"); [EOL]     assertPrint("\\u00fa=1", "\\u00fa=1"); [EOL]     assertPrint("function \\u00f9(){}", "function \\u00f9(){}"); [EOL]     assertPrint("x.\\u00f8", "x.\\u00f8"); [EOL]     assertPrint("x.\\u00f8", "x.\\u00f8"); [EOL]     assertPrint("abc\\u4e00\\u4e01jkl", "abc\\u4e00\\u4e01jkl"); [EOL]     assertPrint("! ! true", "!!true"); [EOL]     assertPrint("!(!(true))", "!!true"); [EOL]     assertPrint("typeof(void(0))", "typeof void 0"); [EOL]     assertPrint("typeof(void(!0))", "typeof void!0"); [EOL]     assertPrint("+ - + + - + 3", "+-+ +-+3"); [EOL]     assertPrint("+(--x)", "+--x"); [EOL]     assertPrint("-(++x)", "-++x"); [EOL]     assertPrint("-(--x)", "- --x"); [EOL]     assertPrint("!(~~5)", "!~~5"); [EOL]     assertPrint("~(a/b)", "~(a/b)"); [EOL]     assertPrint("new (foo.bar()).factory(baz)", "new (foo.bar().factory)(baz)"); [EOL]     assertPrint("new (bar()).factory(baz)", "new (bar().factory)(baz)"); [EOL]     assertPrint("new (new foobar(x)).factory(baz)", "new (new foobar(x)).factory(baz)"); [EOL]     assertPrint("a ? b : (c ? d : e)", "a?b:c?d:e"); [EOL]     assertPrint("a ? (b ? c : d) : e", "a?b?c:d:e"); [EOL]     assertPrint("(a ? b : c) ? d : e", "(a?b:c)?d:e"); [EOL]     assertPrint("if (x) if (y); else;", "if(x)if(y);else;"); [EOL]     assertPrint("a,b,c", "a,b,c"); [EOL]     assertPrint("(a,b),c", "a,b,c"); [EOL]     assertPrint("a,(b,c)", "a,b,c"); [EOL]     assertPrint("x=a,b,c", "x=a,b,c"); [EOL]     assertPrint("x=(a,b),c", "x=(a,b),c"); [EOL]     assertPrint("x=a,(b,c)", "x=a,b,c"); [EOL]     assertPrint("x=a,y=b,z=c", "x=a,y=b,z=c"); [EOL]     assertPrint("x=(a,y=b,z=c)", "x=(a,y=b,z=c)"); [EOL]     assertPrint("x=[a,b,c,d]", "x=[a,b,c,d]"); [EOL]     assertPrint("x=[(a,b,c),d]", "x=[(a,b,c),d]"); [EOL]     assertPrint("x=[(a,(b,c)),d]", "x=[(a,b,c),d]"); [EOL]     assertPrint("x=[a,(b,c,d)]", "x=[a,(b,c,d)]"); [EOL]     assertPrint("var x=(a,b)", "var x=(a,b)"); [EOL]     assertPrint("var x=a,b,c", "var x=a,b,c"); [EOL]     assertPrint("var x=(a,b),c", "var x=(a,b),c"); [EOL]     assertPrint("var x=a,b=(c,d)", "var x=a,b=(c,d)"); [EOL]     assertPrint("foo(a,b,c,d)", "foo(a,b,c,d)"); [EOL]     assertPrint("foo((a,b,c),d)", "foo((a,b,c),d)"); [EOL]     assertPrint("foo((a,(b,c)),d)", "foo((a,b,c),d)"); [EOL]     assertPrint("f(a+b,(c,d,(e,f,g)))", "f(a+b,(c,d,e,f,g))"); [EOL]     assertPrint("({}) , 1 , 2", "({}),1,2"); [EOL]     assertPrint("({}) , {} , {}", "({}),{},{}"); [EOL]     assertPrint("if (x){}", "if(x);"); [EOL]     assertPrint("if(x);", "if(x);"); [EOL]     assertPrint("if(x)if(y);", "if(x)if(y);"); [EOL]     assertPrint("if(x){if(y);}", "if(x)if(y);"); [EOL]     assertPrint("if(x){if(y){};;;}", "if(x)if(y);"); [EOL]     assertPrint("if(x){;;function y(){};;}", "if(x){function y(){}}"); [EOL] } <line_num>: 151,353
public void testBreakTrustedStrings() { [EOL]     assertPrint("'<script>'", "\"<script>\""); [EOL]     assertPrint("'</script>'", "\"\\x3c/script>\""); [EOL]     assertPrint("\"</script> </SCRIPT>\"", "\"\\x3c/script> \\x3c/SCRIPT>\""); [EOL]     assertPrint("'-->'", "\"--\\x3e\""); [EOL]     assertPrint("']]>'", "\"]]\\x3e\""); [EOL]     assertPrint("' --></script>'", "\" --\\x3e\\x3c/script>\""); [EOL]     assertPrint("/--> <\\/script>/g", "/--\\x3e <\\/script>/g"); [EOL]     assertPrint("'<!-- I am a string -->'", "\"\\x3c!-- I am a string --\\x3e\""); [EOL]     assertPrint("'<=&>'", "\"<=&>\""); [EOL] } <line_num>: 355,373
public void testBreakUntrustedStrings() { [EOL]     trustedStrings = false; [EOL]     assertPrint("'<script>'", "\"\\x3cscript\\x3e\""); [EOL]     assertPrint("'</script>'", "\"\\x3c/script\\x3e\""); [EOL]     assertPrint("\"</script> </SCRIPT>\"", "\"\\x3c/script\\x3e \\x3c/SCRIPT\\x3e\""); [EOL]     assertPrint("'-->'", "\"--\\x3e\""); [EOL]     assertPrint("']]>'", "\"]]\\x3e\""); [EOL]     assertPrint("' --></script>'", "\" --\\x3e\\x3c/script\\x3e\""); [EOL]     assertPrint("/--> <\\/script>/g", "/--\\x3e <\\/script>/g"); [EOL]     assertPrint("'<!-- I am a string -->'", "\"\\x3c!-- I am a string --\\x3e\""); [EOL]     assertPrint("'<=&>'", "\"\\x3c\\x3d\\x26\\x3e\""); [EOL]     assertPrint("/(?=x)/", "/(?=x)/"); [EOL] } <line_num>: 375,396
public void testPrintArray() { [EOL]     assertPrint("[void 0, void 0]", "[void 0,void 0]"); [EOL]     assertPrint("[undefined, undefined]", "[undefined,undefined]"); [EOL]     assertPrint("[ , , , undefined]", "[,,,undefined]"); [EOL]     assertPrint("[ , , , 0]", "[,,,0]"); [EOL] } <line_num>: 398,403
public void testHook() { [EOL]     assertPrint("a ? b = 1 : c = 2", "a?b=1:c=2"); [EOL]     assertPrint("x = a ? b = 1 : c = 2", "x=a?b=1:c=2"); [EOL]     assertPrint("(x = a) ? b = 1 : c = 2", "(x=a)?b=1:c=2"); [EOL]     assertPrint("x, a ? b = 1 : c = 2", "x,a?b=1:c=2"); [EOL]     assertPrint("x, (a ? b = 1 : c = 2)", "x,a?b=1:c=2"); [EOL]     assertPrint("(x, a) ? b = 1 : c = 2", "(x,a)?b=1:c=2"); [EOL]     assertPrint("a ? (x, b) : c = 2", "a?(x,b):c=2"); [EOL]     assertPrint("a ? b = 1 : (x,c)", "a?b=1:(x,c)"); [EOL]     assertPrint("a ? b = 1 : c = 2 + x", "a?b=1:c=2+x"); [EOL]     assertPrint("(a ? b = 1 : c = 2) + x", "(a?b=1:c=2)+x"); [EOL]     assertPrint("a ? b = 1 : (c = 2) + x", "a?b=1:(c=2)+x"); [EOL]     assertPrint("a ? (b?1:2) : 3", "a?b?1:2:3"); [EOL] } <line_num>: 405,422
public void testPrintInOperatorInForLoop() { [EOL]     assertPrint("var a={}; for (var i = (\"length\" in a); i;) {}", "var a={};for(var i=(\"length\"in a);i;);"); [EOL]     assertPrint("var a={}; for (var i = (\"length\" in a) ? 0 : 1; i;) {}", "var a={};for(var i=(\"length\"in a)?0:1;i;);"); [EOL]     assertPrint("var a={}; for (var i = (\"length\" in a) + 1; i;) {}", "var a={};for(var i=(\"length\"in a)+1;i;);"); [EOL]     assertPrint("var a={};for (var i = (\"length\" in a|| \"size\" in a);;);", "var a={};for(var i=(\"length\"in a)||(\"size\"in a);;);"); [EOL]     assertPrint("var a={};for (var i = a || a || (\"size\" in a);;);", "var a={};for(var i=a||a||(\"size\"in a);;);"); [EOL]     assertPrint("var a={}; for (var i = -(\"length\" in a); i;) {}", "var a={};for(var i=-(\"length\"in a);i;);"); [EOL]     assertPrint("var a={};function b_(p){ return p;};" + "for(var i=1,j=b_(\"length\" in a);;) {}", "var a={};function b_(p){return p}" + "for(var i=1,j=b_(\"length\"in a);;);"); [EOL]     assertPrint("var a={}; for (;(\"length\" in a);) {}", "var a={};for(;\"length\"in a;);"); [EOL] } <line_num>: 424,450
public void testLiteralProperty() { [EOL]     assertPrint("(64).toString()", "(64).toString()"); [EOL] } <line_num>: 452,454
private void assertPrint(String js, String expected) { [EOL]     parse(expected); [EOL]     assertEquals(expected, parsePrint(js, false, CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD)); [EOL] } <line_num>: 456,460
private void assertPrintSame(String js) { [EOL]     assertPrint(js, js); [EOL] } <line_num>: 462,464
public void testAmbiguousElseClauses() { [EOL]     assertPrintNode("if(x)if(y);else;", new Node(Token.IF, Node.newString(Token.NAME, "x"), new Node(Token.BLOCK, new Node(Token.IF, Node.newString(Token.NAME, "y"), new Node(Token.BLOCK), new Node(Token.BLOCK))))); [EOL]     assertPrintNode("if(x){if(y);}else;", new Node(Token.IF, Node.newString(Token.NAME, "x"), new Node(Token.BLOCK, new Node(Token.IF, Node.newString(Token.NAME, "y"), new Node(Token.BLOCK))), new Node(Token.BLOCK))); [EOL]     assertPrintNode("if(x)if(y);else{if(z);}else;", new Node(Token.IF, Node.newString(Token.NAME, "x"), new Node(Token.BLOCK, new Node(Token.IF, Node.newString(Token.NAME, "y"), new Node(Token.BLOCK), new Node(Token.BLOCK, new Node(Token.IF, Node.newString(Token.NAME, "z"), new Node(Token.BLOCK))))), new Node(Token.BLOCK))); [EOL] } <line_num>: 468,505
public void testLineBreak() { [EOL]     assertLineBreak("function a() {}\n" + "function b() {}", "function a(){}\n" + "function b(){}\n"); [EOL]     assertLineBreak("var a = {};\n" + "a.foo = function () {}\n" + "function b() {}", "var a={};a.foo=function(){};\n" + "function b(){}\n"); [EOL]     assertLineBreak("var a = {\n" + "  b: function() {},\n" + "  c: function() {}\n" + "};\n" + "alert(a);", "var a={b:function(){},\n" + "c:function(){}};\n" + "alert(a)"); [EOL] } <line_num>: 507,531
private void assertLineBreak(String js, String expected) { [EOL]     assertEquals(expected, parsePrint(js, false, true, CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD)); [EOL] } <line_num>: 533,537
public void testPreferLineBreakAtEndOfFile() { [EOL]     assertLineBreakAtEndOfFile("\"1234567890\";", "\"1234567890\"", "\"1234567890\""); [EOL]     assertLineBreakAtEndOfFile("\"123456789012345678901234567890\";\"1234567890\"", "\"123456789012345678901234567890\";\n\"1234567890\"", "\"123456789012345678901234567890\"; \"1234567890\";\n"); [EOL]     assertLineBreakAtEndOfFile("var12345678901234567890123456 instanceof Object;", "var12345678901234567890123456 instanceof\nObject", "var12345678901234567890123456 instanceof Object;\n"); [EOL]     assertLineBreakAtEndOfFile("\"1234567890\";\"12345678901234567890\";", "\"1234567890\";\"12345678901234567890\"", "\"1234567890\";\"12345678901234567890\";\n"); [EOL]     assertLineBreakAtEndOfFile("\"123456789012345678901234567890\";\"12345678901234567890\";", "\"123456789012345678901234567890\";\n\"12345678901234567890\"", "\"123456789012345678901234567890\";\n\"12345678901234567890\";\n"); [EOL] } <line_num>: 539,567
private void assertLineBreakAtEndOfFile(String js, String expectedWithoutBreakAtEnd, String expectedWithBreakAtEnd) { [EOL]     assertEquals(expectedWithoutBreakAtEnd, parsePrint(js, false, false, false, 30)); [EOL]     assertEquals(expectedWithBreakAtEnd, parsePrint(js, false, false, true, 30)); [EOL] } <line_num>: 569,575
public void testPrettyPrinter() { [EOL]     assertPrettyPrint("(function(){})();", "(function() {\n})();\n"); [EOL]     assertPrettyPrint("var a = (function() {});alert(a);", "var a = function() {\n};\nalert(a);\n"); [EOL]     assertPrettyPrint("if (1) {}", "if(1) {\n" + "}\n"); [EOL]     assertPrettyPrint("if (1) {alert(\"\");}", "if(1) {\n" + "  alert(\"\")\n" + "}\n"); [EOL]     assertPrettyPrint("if (1)alert(\"\");", "if(1) {\n" + "  alert(\"\")\n" + "}\n"); [EOL]     assertPrettyPrint("if (1) {alert();alert();}", "if(1) {\n" + "  alert();\n" + "  alert()\n" + "}\n"); [EOL]     assertPrettyPrint("label: alert();", "label:alert();\n"); [EOL]     assertPrettyPrint("if (1) alert();", "if(1) {\n" + "  alert()\n" + "}\n"); [EOL]     assertPrettyPrint("for (;;) alert();", "for(;;) {\n" + "  alert()\n" + "}\n"); [EOL]     assertPrettyPrint("while (1) alert();", "while(1) {\n" + "  alert()\n" + "}\n"); [EOL]     assertPrettyPrint("if (1) {} else {alert(a);}", "if(1) {\n" + "}else {\n  alert(a)\n}\n"); [EOL]     assertPrettyPrint("if (1) alert(a); else alert(b);", "if(1) {\n" + "  alert(a)\n" + "}else {\n" + "  alert(b)\n" + "}\n"); [EOL]     assertPrettyPrint("for(;;) { alert();}", "for(;;) {\n" + "  alert()\n" + "}\n"); [EOL]     assertPrettyPrint("for(;;) {}", "for(;;) {\n" + "}\n"); [EOL]     assertPrettyPrint("for(;;) { alert(); alert(); }", "for(;;) {\n" + "  alert();\n" + "  alert()\n" + "}\n"); [EOL]     assertPrettyPrint("do { alert(); } while(true);", "do {\n" + "  alert()\n" + "}while(true);\n"); [EOL]     assertPrettyPrint("myLabel: { alert();}", "myLabel: {\n" + "  alert()\n" + "}\n"); [EOL]     assertPrettyPrint("myLabel: for(;;) continue myLabel;", "myLabel:for(;;) {\n" + "  continue myLabel\n" + "}\n"); [EOL]     assertPrettyPrint("var a;", "var a;\n"); [EOL] } <line_num>: 577,669
public void testPrettyPrinter2() { [EOL]     assertPrettyPrint("if(true) f();", "if(true) {\n" + "  f()\n" + "}\n"); [EOL]     assertPrettyPrint("if (true) { f() } else { g() }", "if(true) {\n" + "  f()\n" + "}else {\n" + "  g()\n" + "}\n"); [EOL]     assertPrettyPrint("if(true) f(); for(;;) g();", "if(true) {\n" + "  f()\n" + "}\n" + "for(;;) {\n" + "  g()\n" + "}\n"); [EOL] } <line_num>: 671,694
public void testPrettyPrinter3() { [EOL]     assertPrettyPrint("try {} catch(e) {}if (1) {alert();alert();}", "try {\n" + "}catch(e) {\n" + "}\n" + "if(1) {\n" + "  alert();\n" + "  alert()\n" + "}\n"); [EOL]     assertPrettyPrint("try {} finally {}if (1) {alert();alert();}", "try {\n" + "}finally {\n" + "}\n" + "if(1) {\n" + "  alert();\n" + "  alert()\n" + "}\n"); [EOL]     assertPrettyPrint("try {} catch(e) {} finally {} if (1) {alert();alert();}", "try {\n" + "}catch(e) {\n" + "}finally {\n" + "}\n" + "if(1) {\n" + "  alert();\n" + "  alert()\n" + "}\n"); [EOL] } <line_num>: 696,727
public void testPrettyPrinter4() { [EOL]     assertPrettyPrint("function f() {}if (1) {alert();}", "function f() {\n" + "}\n" + "if(1) {\n" + "  alert()\n" + "}\n"); [EOL]     assertPrettyPrint("var f = function() {};if (1) {alert();}", "var f = function() {\n" + "};\n" + "if(1) {\n" + "  alert()\n" + "}\n"); [EOL]     assertPrettyPrint("(function() {})();if (1) {alert();}", "(function() {\n" + "})();\n" + "if(1) {\n" + "  alert()\n" + "}\n"); [EOL]     assertPrettyPrint("(function() {alert();alert();})();if (1) {alert();}", "(function() {\n" + "  alert();\n" + "  alert()\n" + "})();\n" + "if(1) {\n" + "  alert()\n" + "}\n"); [EOL] } <line_num>: 729,763
public void testTypeAnnotations() { [EOL]     assertTypeAnnotations("/** @constructor */ function Foo(){}", "/**\n * @return {undefined}\n * @constructor\n */\n" + "function Foo() {\n}\n"); [EOL] } <line_num>: 765,770
public void testTypeAnnotationsTypeDef() { [EOL]     assertTypeAnnotations("/** @typedef {Array.<number>} */ goog.java.Long;\n" + "/** @param {!goog.java.Long} a*/\n" + "function f(a){};\n", "goog.java.Long;\n" + "/**\n" + " * @param {(Array.<number>|null)} a\n" + " * @return {undefined}\n" + " */\n" + "function f(a) {\n}\n"); [EOL] } <line_num>: 772,786
public void testTypeAnnotationsAssign() { [EOL]     assertTypeAnnotations("/** @constructor */ var Foo = function(){}", "/**\n * @return {undefined}\n * @constructor\n */\n" + "var Foo = function() {\n};\n"); [EOL] } <line_num>: 788,792
public void testTypeAnnotationsNamespace() { [EOL]     assertTypeAnnotations("var a = {};" + "/** @constructor */ a.Foo = function(){}", "var a = {};\n" + "/**\n * @return {undefined}\n * @constructor\n */\n" + "a.Foo = function() {\n};\n"); [EOL] } <line_num>: 794,800
public void testTypeAnnotationsMemberSubclass() { [EOL]     assertTypeAnnotations("var a = {};" + "/** @constructor */ a.Foo = function(){};" + "/** @constructor \n @extends {a.Foo} */ a.Bar = function(){}", "var a = {};\n" + "/**\n * @return {undefined}\n * @constructor\n */\n" + "a.Foo = function() {\n};\n" + "/**\n * @return {undefined}\n * @extends {a.Foo}\n" + " * @constructor\n */\n" + "a.Bar = function() {\n};\n"); [EOL] } <line_num>: 802,812
public void testTypeAnnotationsInterface() { [EOL]     assertTypeAnnotations("var a = {};" + "/** @interface */ a.Foo = function(){};" + "/** @interface \n @extends {a.Foo} */ a.Bar = function(){}", "var a = {};\n" + "/**\n * @interface\n */\n" + "a.Foo = function() {\n};\n" + "/**\n * @extends {a.Foo}\n" + " * @interface\n */\n" + "a.Bar = function() {\n};\n"); [EOL] } <line_num>: 814,824
public void testTypeAnnotationsMultipleInterface() { [EOL]     assertTypeAnnotations("var a = {};" + "/** @interface */ a.Foo1 = function(){};" + "/** @interface */ a.Foo2 = function(){};" + "/** @interface \n @extends {a.Foo1} \n @extends {a.Foo2} */" + "a.Bar = function(){}", "var a = {};\n" + "/**\n * @interface\n */\n" + "a.Foo1 = function() {\n};\n" + "/**\n * @interface\n */\n" + "a.Foo2 = function() {\n};\n" + "/**\n * @extends {a.Foo1}\n" + " * @extends {a.Foo2}\n" + " * @interface\n */\n" + "a.Bar = function() {\n};\n"); [EOL] } <line_num>: 826,841
public void testTypeAnnotationsMember() { [EOL]     assertTypeAnnotations("var a = {};" + "/** @constructor */ a.Foo = function(){}" + "/** @param {string} foo\n" + "  * @return {number} */\n" + "a.Foo.prototype.foo = function(foo) { return 3; };" + "/** @type {string|undefined} */" + "a.Foo.prototype.bar = '';", "var a = {};\n" + "/**\n * @return {undefined}\n * @constructor\n */\n" + "a.Foo = function() {\n};\n" + "/**\n" + " * @param {string} foo\n" + " * @return {number}\n" + " */\n" + "a.Foo.prototype.foo = function(foo) {\n  return 3\n};\n" + "/** @type {string} */\n" + "a.Foo.prototype.bar = \"\";\n"); [EOL] } <line_num>: 843,861
public void testTypeAnnotationsImplements() { [EOL]     assertTypeAnnotations("var a = {};" + "/** @constructor */ a.Foo = function(){};\n" + "/** @interface */ a.I = function(){};\n" + "/** @interface */ a.I2 = function(){};\n" + "/** @constructor \n @extends {a.Foo}\n" + " * @implements {a.I} \n @implements {a.I2}\n" + "*/ a.Bar = function(){}", "var a = {};\n" + "/**\n * @return {undefined}\n * @constructor\n */\n" + "a.Foo = function() {\n};\n" + "/**\n * @interface\n */\n" + "a.I = function() {\n};\n" + "/**\n * @interface\n */\n" + "a.I2 = function() {\n};\n" + "/**\n * @return {undefined}\n * @extends {a.Foo}\n" + " * @implements {a.I}\n" + " * @implements {a.I2}\n * @constructor\n */\n" + "a.Bar = function() {\n};\n"); [EOL] } <line_num>: 863,882
public void testTypeAnnotationsDispatcher1() { [EOL]     assertTypeAnnotations("var a = {};\n" + "/** \n" + " * @constructor \n" + " * @javadispatch \n" + " */\n" + "a.Foo = function(){}", "var a = {};\n" + "/**\n" + " * @return {undefined}\n" + " * @constructor\n" + " * @javadispatch\n" + " */\n" + "a.Foo = function() {\n" + "};\n"); [EOL] } <line_num>: 884,900
public void testTypeAnnotationsDispatcher2() { [EOL]     assertTypeAnnotations("var a = {};\n" + "/** \n" + " * @constructor \n" + " */\n" + "a.Foo = function(){}\n" + "/**\n" + " * @javadispatch\n" + " */\n" + "a.Foo.prototype.foo = function() {};", "var a = {};\n" + "/**\n" + " * @return {undefined}\n" + " * @constructor\n" + " */\n" + "a.Foo = function() {\n" + "};\n" + "/**\n" + " * @return {undefined}\n" + " * @javadispatch\n" + " */\n" + "a.Foo.prototype.foo = function() {\n" + "};\n"); [EOL] } <line_num>: 902,927
public void testU2UFunctionTypeAnnotation() { [EOL]     assertTypeAnnotations("/** @type {!Function} */ var x = function() {}", "/**\n * @constructor\n */\nvar x = function() {\n};\n"); [EOL] } <line_num>: 929,933
public void testEmitUnknownParamTypesAsAllType() { [EOL]     assertTypeAnnotations("var a = function(x) {}", "/**\n" + " * @param {*} x\n" + " * @return {undefined}\n" + " */\n" + "var a = function(x) {\n};\n"); [EOL] } <line_num>: 935,943
public void testOptionalTypesAnnotation() { [EOL]     assertTypeAnnotations("/**\n" + " * @param {string=} x \n" + " */\n" + "var a = function(x) {}", "/**\n" + " * @param {string=} x\n" + " * @return {undefined}\n" + " */\n" + "var a = function(x) {\n};\n"); [EOL] } <line_num>: 945,956
public void testVariableArgumentsTypesAnnotation() { [EOL]     assertTypeAnnotations("/**\n" + " * @param {...string} x \n" + " */\n" + "var a = function(x) {}", "/**\n" + " * @param {...string} x\n" + " * @return {undefined}\n" + " */\n" + "var a = function(x) {\n};\n"); [EOL] } <line_num>: 958,969
public void testTempConstructor() { [EOL]     assertTypeAnnotations("var x = function() {\n/**\n * @constructor\n */\nfunction t1() {}\n" + " /**\n * @constructor\n */\nfunction t2() {}\n" + " t1.prototype = t2.prototype}", "/**\n * @return {undefined}\n */\nvar x = function() {\n" + "  /**\n * @return {undefined}\n * @constructor\n */\n" + "function t1() {\n  }\n" + "  /**\n * @return {undefined}\n * @constructor\n */\n" + "function t2() {\n  }\n" + "  t1.prototype = t2.prototype\n};\n"); [EOL] } <line_num>: 971,983
public void testEnumAnnotation1() { [EOL]     assertTypeAnnotations("/** @enum {string} */ var Enum = {FOO: 'x', BAR: 'y'};", "/** @enum {string} */\nvar Enum = {FOO:\"x\", BAR:\"y\"};\n"); [EOL] } <line_num>: 985,989
public void testEnumAnnotation2() { [EOL]     assertTypeAnnotations("var goog = goog || {};" + "/** @enum {string} */ goog.Enum = {FOO: 'x', BAR: 'y'};" + "/** @const */ goog.Enum2 = goog.x ? {} : goog.Enum;", "var goog = goog || {};\n" + "/** @enum {string} */\ngoog.Enum = {FOO:\"x\", BAR:\"y\"};\n" + "/** @type {(Object|{})} */\ngoog.Enum2 = goog.x ? {} : goog.Enum;\n"); [EOL] } <line_num>: 991,999
private void assertPrettyPrint(String js, String expected) { [EOL]     assertEquals(expected, parsePrint(js, true, false, CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD)); [EOL] } <line_num>: 1001,1005
private void assertTypeAnnotations(String js, String expected) { [EOL]     assertEquals(expected, parsePrint(js, true, false, CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD, true)); [EOL] } <line_num>: 1007,1011
public void testSubtraction() { [EOL]     Compiler compiler = new Compiler(); [EOL]     Node n = compiler.parseTestCode("x - -4"); [EOL]     assertEquals(0, compiler.getErrorCount()); [EOL]     assertEquals("x- -4", printNode(n)); [EOL] } <line_num>: 1013,1021
public void testFunctionWithCall() { [EOL]     assertPrint("var user = new function() {" + "alert(\"foo\")}", "var user=new function(){" + "alert(\"foo\")}"); [EOL]     assertPrint("var user = new function() {" + "this.name = \"foo\";" + "this.local = function(){alert(this.name)};}", "var user=new function(){" + "this.name=\"foo\";" + "this.local=function(){alert(this.name)}}"); [EOL] } <line_num>: 1023,1036
public void testLineLength() { [EOL]     assertLineLength("var aba,bcb,cdc", "var aba,bcb," + "\ncdc"); [EOL]     assertLineLength("\"foo\"+\"bar,baz,bomb\"+\"whee\"+\";long-string\"\n+\"aaa\"", "\"foo\"+\"bar,baz,bomb\"+" + "\n\"whee\"+\";long-string\"+" + "\n\"aaa\""); [EOL]     assertLineLength("var abazaba=1234", "var abazaba=" + "\n1234"); [EOL]     assertLineLength("var abab=1;var bab=2", "var abab=1;" + "\nvar bab=2"); [EOL]     assertLineLength("var a=/some[reg](ex),with.*we?rd|chars/i;var b=a", "var a=/some[reg](ex),with.*we?rd|chars/i;" + "\nvar b=a"); [EOL]     assertLineLength("var a=\"foo,{bar};baz\";var b=a", "var a=\"foo,{bar};baz\";" + "\nvar b=a"); [EOL]     assertLineLength("var a=\"a\";a++;var b=\"bbb\";", "var a=\"a\";a++;\n" + "var b=\"bbb\""); [EOL] } <line_num>: 1038,1075
private void assertLineLength(String js, String expected) { [EOL]     assertEquals(expected, parsePrint(js, false, true, 10)); [EOL] } <line_num>: 1077,1080
public void testParsePrintParse() { [EOL]     testReparse("3;"); [EOL]     testReparse("var a = b;"); [EOL]     testReparse("var x, y, z;"); [EOL]     testReparse("try { foo() } catch(e) { bar() }"); [EOL]     testReparse("try { foo() } catch(e) { bar() } finally { stuff() }"); [EOL]     testReparse("try { foo() } finally { stuff() }"); [EOL]     testReparse("throw 'me'"); [EOL]     testReparse("function foo(a) { return a + 4; }"); [EOL]     testReparse("function foo() { return; }"); [EOL]     testReparse("var a = function(a, b) { foo(); return a + b; }"); [EOL]     testReparse("b = [3, 4, 'paul', \"Buchhe it\",,5];"); [EOL]     testReparse("v = (5, 6, 7, 8)"); [EOL]     testReparse("d = 34.0; x = 0; y = .3; z = -22"); [EOL]     testReparse("d = -x; t = !x + ~y;"); [EOL]     testReparse("'hi'; /* just a test */ stuff(a,b) \n" + " foo(); // and another \n" + " bar();"); [EOL]     testReparse("a = b++ + ++c; a = b++-++c; a = - --b; a = - ++b;"); [EOL]     testReparse("a++; b= a++; b = ++a; b = a--; b = --a; a+=2; b-=5"); [EOL]     testReparse("a = (2 + 3) * 4;"); [EOL]     testReparse("a = 1 + (2 + 3) + 4;"); [EOL]     testReparse("x = a ? b : c; x = a ? (b,3,5) : (foo(),bar());"); [EOL]     testReparse("a = b | c || d ^ e " + "&& f & !g != h << i <= j < k >>> l > m * n % !o"); [EOL]     testReparse("a == b; a != b; a === b; a == b == a;" + " (a == b) == a; a == (b == a);"); [EOL]     testReparse("if (a > b) a = b; if (b < 3) a = 3; else c = 4;"); [EOL]     testReparse("if (a == b) { a++; } if (a == 0) { a++; } else { a --; }"); [EOL]     testReparse("for (var i in a) b += i;"); [EOL]     testReparse("for (var i = 0; i < 10; i++){ b /= 2;" + " if (b == 2)break;else continue;}"); [EOL]     testReparse("for (x = 0; x < 10; x++) a /= 2;"); [EOL]     testReparse("for (;;) a++;"); [EOL]     testReparse("while(true) { blah(); }while(true) blah();"); [EOL]     testReparse("do stuff(); while(a>b);"); [EOL]     testReparse("[0, null, , true, false, this];"); [EOL]     testReparse("s.replace(/absc/, 'X').replace(/ab/gi, 'Y');"); [EOL]     testReparse("new Foo; new Bar(a, b,c);"); [EOL]     testReparse("with(foo()) { x = z; y = t; } with(bar()) a = z;"); [EOL]     testReparse("delete foo['bar']; delete foo;"); [EOL]     testReparse("var x = { 'a':'paul', 1:'3', 2:(3,4) };"); [EOL]     testReparse("switch(a) { case 2: case 3: stuff(); break;" + "case 4: morestuff(); break; default: done();}"); [EOL]     testReparse("x = foo['bar'] + foo['my stuff'] + foo[bar] + f.stuff;"); [EOL]     testReparse("a.v = b.v; x['foo'] = y['zoo'];"); [EOL]     testReparse("'test' in x; 3 in x; a in x;"); [EOL]     testReparse("'foo\"bar' + \"foo'c\" + 'stuff\\n and \\\\more'"); [EOL]     testReparse("x.__proto__;"); [EOL] } <line_num>: 1082,1131
private void testReparse(String code) { [EOL]     Compiler compiler = new Compiler(); [EOL]     Node parse1 = parse(code); [EOL]     Node parse2 = parse(new CodePrinter.Builder(parse1).build()); [EOL]     String explanation = parse1.checkTreeEquals(parse2); [EOL]     assertNull("\nExpected: " + compiler.toSource(parse1) + "\nResult: " + compiler.toSource(parse2) + "\n" + explanation, explanation); [EOL] } <line_num>: 1133,1141
public void testDoLoopIECompatiblity() { [EOL]     assertPrint("function f(){if(e1){do foo();while(e2)}else foo()}", "function f(){if(e1){do foo();while(e2)}else foo()}"); [EOL]     assertPrint("function f(){if(e1)do foo();while(e2)else foo()}", "function f(){if(e1){do foo();while(e2)}else foo()}"); [EOL]     assertPrint("if(x){do{foo()}while(y)}else bar()", "if(x){do foo();while(y)}else bar()"); [EOL]     assertPrint("if(x)do{foo()}while(y);else bar()", "if(x){do foo();while(y)}else bar()"); [EOL]     assertPrint("if(x){do{foo()}while(y)}", "if(x){do foo();while(y)}"); [EOL]     assertPrint("if(x)do{foo()}while(y);", "if(x){do foo();while(y)}"); [EOL]     assertPrint("if(x)A:do{foo()}while(y);", "if(x){A:do foo();while(y)}"); [EOL]     assertPrint("var i = 0;a: do{b: do{i++;break b;} while(0);} while(0);", "var i=0;a:do{b:do{i++;break b}while(0)}while(0)"); [EOL] } <line_num>: 1143,1168
public void testFunctionSafariCompatiblity() { [EOL]     assertPrint("function f(){if(e1){function goo(){return true}}else foo()}", "function f(){if(e1){function goo(){return true}}else foo()}"); [EOL]     assertPrint("function f(){if(e1)function goo(){return true}else foo()}", "function f(){if(e1){function goo(){return true}}else foo()}"); [EOL]     assertPrint("if(e1){function goo(){return true}}", "if(e1){function goo(){return true}}"); [EOL]     assertPrint("if(e1)function goo(){return true}", "if(e1){function goo(){return true}}"); [EOL]     assertPrint("if(e1)A:function goo(){return true}", "if(e1){A:function goo(){return true}}"); [EOL] } <line_num>: 1170,1186
public void testExponents() { [EOL]     assertPrintNumber("1", 1); [EOL]     assertPrintNumber("10", 10); [EOL]     assertPrintNumber("100", 100); [EOL]     assertPrintNumber("1E3", 1000); [EOL]     assertPrintNumber("1E4", 10000); [EOL]     assertPrintNumber("1E5", 100000); [EOL]     assertPrintNumber("-1", -1); [EOL]     assertPrintNumber("-10", -10); [EOL]     assertPrintNumber("-100", -100); [EOL]     assertPrintNumber("-1E3", -1000); [EOL]     assertPrintNumber("-12341234E4", -123412340000L); [EOL]     assertPrintNumber("1E18", 1000000000000000000L); [EOL]     assertPrintNumber("1E5", 100000.0); [EOL]     assertPrintNumber("100000.1", 100000.1); [EOL]     assertPrintNumber("1E-6", 0.000001); [EOL]     assertPrintNumber("-0x38d7ea4c68001", -0x38d7ea4c68001L); [EOL]     assertPrintNumber("0x38d7ea4c68001", 0x38d7ea4c68001L); [EOL] } <line_num>: 1188,1207
private void assertPrintNumber(String expected, double number) { [EOL]     assertPrint(String.valueOf(number), expected); [EOL]     assertPrintNode(expected, Node.newNumber(number)); [EOL] } <line_num>: 1211,1214
private void assertPrintNumber(String expected, int number) { [EOL]     assertPrint(String.valueOf(number), expected); [EOL]     assertPrintNode(expected, Node.newNumber(number)); [EOL] } <line_num>: 1216,1219
public void testDirectEval() { [EOL]     assertPrint("eval('1');", "eval(\"1\")"); [EOL] } <line_num>: 1221,1223
public void testIndirectEval() { [EOL]     Node n = parse("eval('1');"); [EOL]     assertPrintNode("eval(\"1\")", n); [EOL]     n.getFirstChild().getFirstChild().getFirstChild().putBooleanProp(Node.DIRECT_EVAL, false); [EOL]     assertPrintNode("(0,eval)(\"1\")", n); [EOL] } <line_num>: 1225,1231
public void testFreeCall1() { [EOL]     assertPrint("foo(a);", "foo(a)"); [EOL]     assertPrint("x.foo(a);", "x.foo(a)"); [EOL] } <line_num>: 1233,1236
public void testFreeCall2() { [EOL]     Node n = parse("foo(a);"); [EOL]     assertPrintNode("foo(a)", n); [EOL]     Node call = n.getFirstChild().getFirstChild(); [EOL]     assertTrue(call.isCall()); [EOL]     call.putBooleanProp(Node.FREE_CALL, true); [EOL]     assertPrintNode("foo(a)", n); [EOL] } <line_num>: 1238,1245
public void testFreeCall3() { [EOL]     Node n = parse("x.foo(a);"); [EOL]     assertPrintNode("x.foo(a)", n); [EOL]     Node call = n.getFirstChild().getFirstChild(); [EOL]     assertTrue(call.isCall()); [EOL]     call.putBooleanProp(Node.FREE_CALL, true); [EOL]     assertPrintNode("(0,x.foo)(a)", n); [EOL] } <line_num>: 1247,1254
public void testPrintScript() { [EOL]     Node ast = new Node(Token.SCRIPT, new Node(Token.EXPR_RESULT, Node.newString("f")), new Node(Token.EXPR_RESULT, Node.newString("g"))); [EOL]     String result = new CodePrinter.Builder(ast).setPrettyPrint(true).build(); [EOL]     assertEquals("\"f\";\n\"g\";\n", result); [EOL] } <line_num>: 1256,1264
public void testObjectLit() { [EOL]     assertPrint("({x:1})", "({x:1})"); [EOL]     assertPrint("var x=({x:1})", "var x={x:1}"); [EOL]     assertPrint("var x={'x':1}", "var x={\"x\":1}"); [EOL]     assertPrint("var x={1:1}", "var x={1:1}"); [EOL]     assertPrint("({},42)+0", "({},42)+0"); [EOL] } <line_num>: 1266,1272
public void testObjectLit2() { [EOL]     assertPrint("var x={1:1}", "var x={1:1}"); [EOL]     assertPrint("var x={'1':1}", "var x={1:1}"); [EOL]     assertPrint("var x={'1.0':1}", "var x={\"1.0\":1}"); [EOL]     assertPrint("var x={1.5:1}", "var x={\"1.5\":1}"); [EOL] } <line_num>: 1274,1280
public void testObjectLit3() { [EOL]     assertPrint("var x={3E9:1}", "var x={3E9:1}"); [EOL]     assertPrint("var x={'3000000000':1}", "var x={3E9:1}"); [EOL]     assertPrint("var x={'3000000001':1}", "var x={3000000001:1}"); [EOL]     assertPrint("var x={'6000000001':1}", "var x={6000000001:1}"); [EOL]     assertPrint("var x={\"12345678901234567\":1}", "var x={\"12345678901234567\":1}"); [EOL] } <line_num>: 1282,1293
public void testObjectLit4() { [EOL]     assertPrint("var x={\"123456789012345671234567890123456712345678901234567\":1}", "var x={\"123456789012345671234567890123456712345678901234567\":1}"); [EOL] } <line_num>: 1295,1300
public void testGetter() { [EOL]     assertPrint("var x = {}", "var x={}"); [EOL]     assertPrint("var x = {get a() {return 1}}", "var x={get a(){return 1}}"); [EOL]     assertPrint("var x = {get a() {}, get b(){}}", "var x={get a(){},get b(){}}"); [EOL]     assertPrint("var x = {get 'a'() {return 1}}", "var x={get \"a\"(){return 1}}"); [EOL]     assertPrint("var x = {get 1() {return 1}}", "var x={get 1(){return 1}}"); [EOL]     assertPrint("var x = {get \"()\"() {return 1}}", "var x={get \"()\"(){return 1}}"); [EOL] } <line_num>: 1302,1320
public void testSetter() { [EOL]     assertPrint("var x = {}", "var x={}"); [EOL]     assertPrint("var x = {set a(y) {return 1}}", "var x={set a(y){return 1}}"); [EOL]     assertPrint("var x = {get 'a'() {return 1}}", "var x={get \"a\"(){return 1}}"); [EOL]     assertPrint("var x = {set 1(y) {return 1}}", "var x={set 1(y){return 1}}"); [EOL]     assertPrint("var x = {set \"(x)\"(y) {return 1}}", "var x={set \"(x)\"(y){return 1}}"); [EOL] } <line_num>: 1322,1339
public void testNegCollapse() { [EOL]     assertPrint("var x = - - 2;", "var x=2"); [EOL]     assertPrint("var x = - (2);", "var x=-2"); [EOL] } <line_num>: 1341,1346
public void testStrict() { [EOL]     String result = parsePrint("var x", false, false, 0, false, true); [EOL]     assertEquals("'use strict';var x", result); [EOL] } <line_num>: 1348,1351
public void testArrayLiteral() { [EOL]     assertPrint("var x = [,];", "var x=[,]"); [EOL]     assertPrint("var x = [,,];", "var x=[,,]"); [EOL]     assertPrint("var x = [,s,,];", "var x=[,s,,]"); [EOL]     assertPrint("var x = [,s];", "var x=[,s]"); [EOL]     assertPrint("var x = [s,];", "var x=[s]"); [EOL] } <line_num>: 1353,1359
public void testZero() { [EOL]     assertPrint("var x ='\\0';", "var x=\"\\x00\""); [EOL]     assertPrint("var x ='\\x00';", "var x=\"\\x00\""); [EOL]     assertPrint("var x ='\\u0000';", "var x=\"\\x00\""); [EOL]     assertPrint("var x ='\\u00003';", "var x=\"\\x003\""); [EOL] } <line_num>: 1361,1366
public void testUnicode() { [EOL]     assertPrint("var x ='\\x0f';", "var x=\"\\u000f\""); [EOL]     assertPrint("var x ='\\x68';", "var x=\"h\""); [EOL]     assertPrint("var x ='\\x7f';", "var x=\"\\u007f\""); [EOL] } <line_num>: 1368,1372
public void testUnicodeKeyword() { [EOL]     assertPrint("var \\u0069\\u0066 = 1;", "var i\\u0066=1"); [EOL]     assertPrint("var v\\u0061\\u0072 = 1;", "var va\\u0072=1"); [EOL]     assertPrint("var w\\u0068\\u0069\\u006C\\u0065 = 1;" + "\\u0077\\u0068il\\u0065 = 2;" + "\\u0077h\\u0069le = 3;", "var whil\\u0065=1;whil\\u0065=2;whil\\u0065=3"); [EOL] } <line_num>: 1374,1384
public void testNumericKeys() { [EOL]     assertPrint("var x = {010: 1};", "var x={8:1}"); [EOL]     assertPrint("var x = {'010': 1};", "var x={\"010\":1}"); [EOL]     assertPrint("var x = {0x10: 1};", "var x={16:1}"); [EOL]     assertPrint("var x = {'0x10': 1};", "var x={\"0x10\":1}"); [EOL]     assertPrint("var x = {.2: 1};", "var x={\"0.2\":1}"); [EOL]     assertPrint("var x = {'.2': 1};", "var x={\".2\":1}"); [EOL]     assertPrint("var x = {0.2: 1};", "var x={\"0.2\":1}"); [EOL]     assertPrint("var x = {'0.2': 1};", "var x={\"0.2\":1}"); [EOL] } <line_num>: 1386,1399
public void testIssue582() { [EOL]     assertPrint("var x = -0.0;", "var x=-0"); [EOL] } <line_num>: 1401,1403
public void testIssue601() { [EOL]     assertPrint("'\\v' == 'v'", "\"\\v\"==\"v\""); [EOL]     assertPrint("'\\u000B' == '\\v'", "\"\\x0B\"==\"\\v\""); [EOL]     assertPrint("'\\x0B' == '\\v'", "\"\\x0B\"==\"\\v\""); [EOL] } <line_num>: 1405,1409
public void testIssue620() { [EOL]     assertPrint("alert(/ / / / /);", "alert(/ // / /)"); [EOL]     assertPrint("alert(/ // / /);", "alert(/ // / /)"); [EOL] } <line_num>: 1411,1414
public void testIssue5746867() { [EOL]     assertPrint("var a = { '$\\\\' : 5 };", "var a={\"$\\\\\":5}"); [EOL] } <line_num>: 1416,1418
public void testCommaSpacing() { [EOL]     assertPrint("var a = (b = 5, c = 5);", "var a=(b=5,c=5)"); [EOL]     assertPrettyPrint("var a = (b = 5, c = 5);", "var a = (b = 5, c = 5);\n"); [EOL] } <line_num>: 1420,1425
public void testManyCommas() { [EOL]     int numCommas = 10000; [EOL]     List<String> numbers = Lists.newArrayList("0", "1"); [EOL]     Node current = new Node(Token.COMMA, Node.newNumber(0), Node.newNumber(1)); [EOL]     for (int i = 2; i < numCommas; i++) { [EOL]         current = new Node(Token.COMMA, current); [EOL]         int num = i % 1000; [EOL]         numbers.add(String.valueOf(num)); [EOL]         current.addChildToBack(Node.newNumber(num)); [EOL]     } [EOL]     String expected = Joiner.on(",").join(numbers); [EOL]     String actual = printNode(current).replace("\n", ""); [EOL]     assertEquals(expected, actual); [EOL] } <line_num>: 1427,1443
public void testManyAdds() { [EOL]     int numAdds = 10000; [EOL]     List<String> numbers = Lists.newArrayList("0", "1"); [EOL]     Node current = new Node(Token.ADD, Node.newNumber(0), Node.newNumber(1)); [EOL]     for (int i = 2; i < numAdds; i++) { [EOL]         current = new Node(Token.ADD, current); [EOL]         int num = i % 1000; [EOL]         numbers.add(String.valueOf(num)); [EOL]         current.addChildToBack(Node.newNumber(num)); [EOL]     } [EOL]     String expected = Joiner.on("+").join(numbers); [EOL]     String actual = printNode(current).replace("\n", ""); [EOL]     assertEquals(expected, actual); [EOL] } <line_num>: 1445,1461
public void testMinusNegativeZero() { [EOL]     assertPrint("x- -0", "x- -0"); [EOL] } <line_num>: 1463,1467
public void testStringEscapeSequences() { [EOL]     assertPrintSame("var x=\"\\b\""); [EOL]     assertPrintSame("var x=\"\\f\""); [EOL]     assertPrintSame("var x=\"\\n\""); [EOL]     assertPrintSame("var x=\"\\r\""); [EOL]     assertPrintSame("var x=\"\\t\""); [EOL]     assertPrintSame("var x=\"\\v\""); [EOL]     assertPrint("var x=\"\\\"\"", "var x='\"'"); [EOL]     assertPrint("var x=\"\\\'\"", "var x=\"'\""); [EOL]     assertPrint("var x=\"\\u000A\"", "var x=\"\\n\""); [EOL]     assertPrint("var x=\"\\u000D\"", "var x=\"\\r\""); [EOL]     assertPrintSame("var x=\"\\u2028\""); [EOL]     assertPrintSame("var x=\"\\u2029\""); [EOL]     assertPrintSame("var x=/\\b/"); [EOL]     assertPrintSame("var x=/\\f/"); [EOL]     assertPrintSame("var x=/\\n/"); [EOL]     assertPrintSame("var x=/\\r/"); [EOL]     assertPrintSame("var x=/\\t/"); [EOL]     assertPrintSame("var x=/\\v/"); [EOL]     assertPrintSame("var x=/\\u000A/"); [EOL]     assertPrintSame("var x=/\\u000D/"); [EOL]     assertPrintSame("var x=/\\u2028/"); [EOL]     assertPrintSame("var x=/\\u2029/"); [EOL] } <line_num>: 1469,1497
