@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     globalScope.declare(VAR1, new Node(Token.NAME), null, INPUT1); [EOL]     var1Refs.references = Lists.newArrayList(var1In1Ref, var1In2Ref, var1In3Ref); [EOL]     globalScope.declare(VAR2, new Node(Token.NAME), null, INPUT1); [EOL]     var2Refs.references = Lists.newArrayList(var2In1Ref, var2In3Ref); [EOL]     globalScope.declare(VAR3, new Node(Token.NAME), null, EXTERN1); [EOL]     var3Refs.references = Lists.newArrayList(var3In1Ext, var3In2Ref); [EOL]     ReferenceCollection var1TempRefs = new ReferenceCollection(); [EOL]     var1TempRefs.references = Lists.newArrayList(var1Refs.references); [EOL]     ReferenceCollection var2TempRefs = new ReferenceCollection(); [EOL]     var2TempRefs.references = Lists.newArrayList(var2Refs.references); [EOL]     ReferenceCollection var3TempRefs = new ReferenceCollection(); [EOL]     var3TempRefs.references = Lists.newArrayList(var3Refs.references); [EOL]     globalMap.put(globalScope.getVar(VAR1), var1TempRefs); [EOL]     globalMap.put(globalScope.getVar(VAR2), var2TempRefs); [EOL]     globalMap.put(globalScope.getVar(VAR3), var3TempRefs); [EOL]     map.updateGlobalVarReferences(globalMap, root); [EOL]     scriptRoot.setInputId(INPUT2.getInputId()); [EOL]     scriptRoot.setSourceFileForTesting(INPUT2.getName()); [EOL] } <line_num>: 73,98
public void testUpdateGlobalVarReferences_ResetReferences() { [EOL]     for (int i = 0; i < 2; i++) { [EOL]         assertEquals(var1Refs.references, map.getReferences(globalScope.getVar(VAR1)).references); [EOL]         assertEquals(var2Refs.references, map.getReferences(globalScope.getVar(VAR2)).references); [EOL]         assertEquals(var3Refs.references, map.getReferences(globalScope.getVar(VAR3)).references); [EOL]         map.updateGlobalVarReferences(globalMap, root); [EOL]     } [EOL] } <line_num>: 101,112
public void testUpdateGlobalVarReferences_UpdateScriptNoRef() { [EOL]     Map<Var, ReferenceCollection> scriptMap = Maps.newHashMap(); [EOL]     map.updateGlobalVarReferences(scriptMap, scriptRoot); [EOL]     ReferenceCollection refs = map.getReferences(globalScope.getVar(VAR2)); [EOL]     assertEquals(var2Refs.references, refs.references); [EOL]     refs = map.getReferences(globalScope.getVar(VAR1)); [EOL]     assertEquals(2, refs.references.size()); [EOL]     assertEquals(var1Refs.references.get(0), refs.references.get(0)); [EOL]     assertEquals(var1Refs.references.get(2), refs.references.get(1)); [EOL]     refs = map.getReferences(globalScope.getVar(VAR3)); [EOL]     assertEquals(1, refs.references.size()); [EOL]     assertEquals(var3Refs.references.get(0), refs.references.get(0)); [EOL] } <line_num>: 115,127
public void testUpdateGlobalVarReferences_UpdateScriptNewRefs() { [EOL]     Map<Var, ReferenceCollection> scriptMap = Maps.newHashMap(); [EOL]     ReferenceCollection newVar1Refs = new ReferenceCollection(); [EOL]     Reference newVar1In2Ref = createRefForTest(INPUT2); [EOL]     newVar1Refs.references = Lists.newArrayList(newVar1In2Ref); [EOL]     ReferenceCollection newVar2Refs = new ReferenceCollection(); [EOL]     Reference newVar2In2Ref = createRefForTest(INPUT2); [EOL]     newVar2Refs.references = Lists.newArrayList(newVar2In2Ref); [EOL]     ReferenceCollection newVar3Refs = new ReferenceCollection(); [EOL]     Reference newVar3In2Ref = createRefForTest(INPUT2); [EOL]     newVar3Refs.references = Lists.newArrayList(newVar3In2Ref); [EOL]     scriptMap.put(globalScope.getVar(VAR1), newVar1Refs); [EOL]     scriptMap.put(globalScope.getVar(VAR2), newVar2Refs); [EOL]     scriptMap.put(globalScope.getVar(VAR3), newVar3Refs); [EOL]     map.updateGlobalVarReferences(scriptMap, scriptRoot); [EOL]     ReferenceCollection refs = map.getReferences(globalScope.getVar(VAR1)); [EOL]     assertEquals(3, refs.references.size()); [EOL]     assertEquals(var1Refs.references.get(0), refs.references.get(0)); [EOL]     assertEquals(newVar1In2Ref, refs.references.get(1)); [EOL]     assertEquals(var1Refs.references.get(2), refs.references.get(2)); [EOL]     refs = map.getReferences(globalScope.getVar(VAR2)); [EOL]     assertEquals(3, refs.references.size()); [EOL]     assertEquals(var2Refs.references.get(0), refs.references.get(0)); [EOL]     assertEquals(newVar2In2Ref, refs.references.get(1)); [EOL]     assertEquals(var2Refs.references.get(1), refs.references.get(2)); [EOL]     refs = map.getReferences(globalScope.getVar(VAR3)); [EOL]     assertEquals(2, refs.references.size()); [EOL]     assertEquals(var3Refs.references.get(0), refs.references.get(0)); [EOL]     assertEquals(newVar3In2Ref, refs.references.get(1)); [EOL] } <line_num>: 130,163
public void testUpdateGlobalVarReferences_UpdateScriptNewVar() { [EOL]     Map<Var, ReferenceCollection> scriptMap = Maps.newHashMap(); [EOL]     final String var4 = "var4"; [EOL]     globalScope.declare(var4, new Node(Token.NAME), null, INPUT2); [EOL]     ReferenceCollection newVar3Refs = new ReferenceCollection(); [EOL]     Reference newVar3In2Ref = createRefForTest(INPUT2); [EOL]     newVar3Refs.references = Lists.newArrayList(newVar3In2Ref); [EOL]     scriptMap.put(globalScope.getVar(var4), newVar3Refs); [EOL]     map.updateGlobalVarReferences(scriptMap, scriptRoot); [EOL]     ReferenceCollection refs = map.getReferences(globalScope.getVar(var4)); [EOL]     assertEquals(1, refs.references.size()); [EOL]     assertEquals(newVar3In2Ref, refs.references.get(0)); [EOL] } <line_num>: 166,178
public void testUpdateReferencesWithGlobalScope() { [EOL]     Scope newGlobalScope = Scope.createGlobalScope(root); [EOL]     map.updateReferencesWithGlobalScope(newGlobalScope); [EOL]     ReferenceCollection references = map.getReferences(globalScope.getVar(VAR1)); [EOL]     for (Reference ref : references) { [EOL]         assertEquals(newGlobalScope, ref.getScope()); [EOL]     } [EOL]     references = map.getReferences(globalScope.getVar(VAR2)); [EOL]     for (Reference ref : references) { [EOL]         assertEquals(newGlobalScope, ref.getScope()); [EOL]     } [EOL]     references = map.getReferences(globalScope.getVar(VAR3)); [EOL]     for (Reference ref : references) { [EOL]         assertEquals(newGlobalScope, ref.getScope()); [EOL]     } [EOL] } <line_num>: 180,196
