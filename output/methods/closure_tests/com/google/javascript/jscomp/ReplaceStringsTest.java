public ReplaceStringsTest() { [EOL]     super(EXTERNS, true); [EOL]     enableNormalize(); [EOL] } <line_num>: 53,56
@Override [EOL] protected CompilerOptions getOptions() { [EOL]     CompilerOptions options = super.getOptions(); [EOL]     options.setWarningLevel(DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.OFF); [EOL]     return options; [EOL] } <line_num>: 58,64
@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     super.enableLineNumberCheck(false); [EOL]     super.enableTypeCheck(CheckLevel.OFF); [EOL]     reserved = Collections.emptySet(); [EOL]     previous = null; [EOL] } <line_num>: 66,73
@Override [EOL] public void process(Node externs, Node js) { [EOL]     new CollapseProperties(compiler, true, true).process(externs, js); [EOL]     pass.process(externs, js); [EOL] } <line_num>: 86,90
@Override [EOL] public CompilerPass getProcessor(final Compiler compiler) { [EOL]     List<String> names = Lists.newArrayList("Error(?)", "goog.debug.Trace.startTracer(*)", "goog.debug.Logger.getLogger(?)", "goog.debug.Logger.prototype.info(?)"); [EOL]     pass = new ReplaceStrings(compiler, "`", names, reserved, previous); [EOL]     return new CompilerPass() { [EOL]  [EOL]         @Override [EOL]         public void process(Node externs, Node js) { [EOL]             new CollapseProperties(compiler, true, true).process(externs, js); [EOL]             pass.process(externs, js); [EOL]         } [EOL]     }; [EOL] } <line_num>: 75,92
@Override [EOL] public int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 94,99
public void testStable1() { [EOL]     previous = VariableMap.fromMap(ImmutableMap.of("previous", "xyz")); [EOL]     testDebugStrings("Error('xyz');", "Error('previous');", (new String[] { "previous", "xyz" })); [EOL]     reserved = ImmutableSet.of("a", "b", "previous"); [EOL]     testDebugStrings("Error('xyz');", "Error('c');", (new String[] { "c", "xyz" })); [EOL] } <line_num>: 101,112
public void testStable2() { [EOL]     previous = VariableMap.fromMap(ImmutableMap.of("a", "unused")); [EOL]     testDebugStrings("Error('xyz');", "Error('b');", (new String[] { "b", "xyz" })); [EOL] } <line_num>: 114,125
public void testThrowError1() { [EOL]     testDebugStrings("throw Error('xyz');", "throw Error('a');", (new String[] { "a", "xyz" })); [EOL]     previous = VariableMap.fromMap(ImmutableMap.of("previous", "xyz")); [EOL]     testDebugStrings("throw Error('xyz');", "throw Error('previous');", (new String[] { "previous", "xyz" })); [EOL] } <line_num>: 127,137
public void testThrowError2() { [EOL]     testDebugStrings("throw Error('x' +\n    'yz');", "throw Error('a');", (new String[] { "a", "xyz" })); [EOL] } <line_num>: 139,144
public void testThrowError3() { [EOL]     testDebugStrings("throw Error('Unhandled mail' + ' search type ' + type);", "throw Error('a' + '`' + type);", (new String[] { "a", "Unhandled mail search type `" })); [EOL] } <line_num>: 146,151
public void testThrowError4() { [EOL]     testDebugStrings("/** @constructor */\n" + "var A = function() {};\n" + "A.prototype.m = function(child) {\n" + "  if (this.haveChild(child)) {\n" + "    throw Error('Node: ' + this.getDataPath() +\n" + "                ' already has a child named ' + child);\n" + "  } else if (child.parentNode) {\n" + "    throw Error('Node: ' + child.getDataPath() +\n" + "                ' already has a parent');\n" + "  }\n" + "  child.parentNode = this;\n" + "};", "var A = function(){};\n" + "A.prototype.m = function(child) {\n" + "  if (this.haveChild(child)) {\n" + "    throw Error('a' + '`' + this.getDataPath() + '`' + child);\n" + "  } else if (child.parentNode) {\n" + "    throw Error('b' + '`' + child.getDataPath());\n" + "  }\n" + "  child.parentNode = this;\n" + "};", (new String[] { "a", "Node: ` already has a child named `", "b", "Node: ` already has a parent" })); [EOL] } <line_num>: 153,183
public void testThrowNonStringError() { [EOL]     testDebugStrings("throw Error(x('abc'));", "throw Error(x('abc'));", (new String[] {})); [EOL] } <line_num>: 185,192
public void testThrowConstStringError() { [EOL]     testDebugStrings("var AA = 'uvw', AB = 'xyz'; throw Error(AB);", "var AA = 'uvw', AB = 'xyz'; throw Error('a');", (new String[] { "a", "xyz" })); [EOL] } <line_num>: 194,199
public void testThrowNewError1() { [EOL]     testDebugStrings("throw new Error('abc');", "throw new Error('a');", (new String[] { "a", "abc" })); [EOL] } <line_num>: 201,206
public void testThrowNewError2() { [EOL]     testDebugStrings("throw new Error();", "throw new Error();", new String[] {}); [EOL] } <line_num>: 208,213
public void testStartTracer1() { [EOL]     testDebugStrings("goog.debug.Trace.startTracer('HistoryManager.updateHistory');", "goog.debug.Trace.startTracer('a');", (new String[] { "a", "HistoryManager.updateHistory" })); [EOL] } <line_num>: 215,220
public void testStartTracer2() { [EOL]     testDebugStrings("goog$debug$Trace.startTracer('HistoryManager', 'updateHistory');", "goog$debug$Trace.startTracer('a', 'b');", (new String[] { "a", "HistoryManager", "b", "updateHistory" })); [EOL] } <line_num>: 222,229
public void testStartTracer3() { [EOL]     testDebugStrings("goog$debug$Trace.startTracer('ThreadlistView',\n" + "                             'Updating ' + array.length + ' rows');", "goog$debug$Trace.startTracer('a', 'b' + '`' + array.length);", new String[] { "a", "ThreadlistView", "b", "Updating ` rows" }); [EOL] } <line_num>: 231,237
public void testStartTracer4() { [EOL]     testDebugStrings("goog.debug.Trace.startTracer(s, 'HistoryManager.updateHistory');", "goog.debug.Trace.startTracer(s, 'a');", (new String[] { "a", "HistoryManager.updateHistory" })); [EOL] } <line_num>: 239,244
public void testLoggerInitialization() { [EOL]     testDebugStrings("goog$debug$Logger$getLogger('my.app.Application');", "goog$debug$Logger$getLogger('a');", (new String[] { "a", "my.app.Application" })); [EOL] } <line_num>: 246,251
public void testLoggerOnObject1() { [EOL]     testDebugStrings("var x = {};" + "x.logger_ = goog.debug.Logger.getLogger('foo');" + "x.logger_.info('Some message');", "var x$logger_ = goog.debug.Logger.getLogger('a');" + "x$logger_.info('b');", new String[] { "a", "foo", "b", "Some message" }); [EOL] } <line_num>: 253,263
public void testLoggerOnObject2() { [EOL]     test("var x = {};" + "x.info = function(a) {};" + "x.info('Some message');", "var x$info = function(a) {};" + "x$info('Some message');"); [EOL] } <line_num>: 266,273
public void testLoggerOnObject3a() { [EOL]     testSame("/** @constructor */\n" + "var x = function() {};\n" + "x.prototype.info = function(a) {};" + "(new x).info('Some message');"); [EOL] } <line_num>: 276,282
public void testLoggerOnObject3b() { [EOL]     testSame("/** @constructor */\n" + "var x = function() {};\n" + "x.prototype.info = function(a) {};" + "var y = (new x); this.info('Some message');"); [EOL] } <line_num>: 285,291
public void testLoggerOnObject4() { [EOL]     testSame("(new x).info('Some message');"); [EOL] } <line_num>: 294,296
public void testLoggerOnObject5() { [EOL]     testSame("my$Thing.logger_.info('Some message');"); [EOL] } <line_num>: 299,301
public void testLoggerOnVar() { [EOL]     testDebugStrings("var logger = goog.debug.Logger.getLogger('foo');" + "logger.info('Some message');", "var logger = goog.debug.Logger.getLogger('a');" + "logger.info('b');", new String[] { "a", "foo", "b", "Some message" }); [EOL] } <line_num>: 303,312
public void testLoggerOnThis() { [EOL]     testDebugStrings("function f() {" + "  this.logger_ = goog.debug.Logger.getLogger('foo');" + "  this.logger_.info('Some message');" + "}", "function f() {" + "  this.logger_ = goog.debug.Logger.getLogger('a');" + "  this.logger_.info('b');" + "}", new String[] { "a", "foo", "b", "Some message" }); [EOL] } <line_num>: 314,327
public void testRepeatedErrorString1() { [EOL]     testDebugStrings("Error('abc');Error('def');Error('abc');", "Error('a');Error('b');Error('a');", (new String[] { "a", "abc", "b", "def" })); [EOL] } <line_num>: 329,334
public void testRepeatedErrorString2() { [EOL]     testDebugStrings("Error('a:' + u + ', b:' + v); Error('a:' + x + ', b:' + y);", "Error('a' + '`' + u + '`' + v); Error('a' + '`' + x + '`' + y);", (new String[] { "a", "a:`, b:`" })); [EOL] } <line_num>: 336,341
public void testRepeatedErrorString3() { [EOL]     testDebugStrings("var AB = 'b'; throw Error(AB); throw Error(AB);", "var AB = 'b'; throw Error('a'); throw Error('a');", (new String[] { "a", "b" })); [EOL] } <line_num>: 343,348
public void testRepeatedTracerString() { [EOL]     testDebugStrings("goog$debug$Trace.startTracer('A', 'B', 'A');", "goog$debug$Trace.startTracer('a', 'b', 'a');", (new String[] { "a", "A", "b", "B" })); [EOL] } <line_num>: 350,355
public void testRepeatedLoggerString() { [EOL]     testDebugStrings("goog$debug$Logger$getLogger('goog.net.XhrTransport');" + "goog$debug$Logger$getLogger('my.app.Application');" + "goog$debug$Logger$getLogger('my.app.Application');", "goog$debug$Logger$getLogger('a');" + "goog$debug$Logger$getLogger('b');" + "goog$debug$Logger$getLogger('b');", new String[] { "a", "goog.net.XhrTransport", "b", "my.app.Application" }); [EOL] } <line_num>: 357,367
public void testRepeatedStringsWithDifferentMethods() { [EOL]     test("throw Error('A');" + "goog$debug$Trace.startTracer('B', 'A');" + "goog$debug$Logger$getLogger('C');" + "goog$debug$Logger$getLogger('B');" + "goog$debug$Logger$getLogger('A');" + "throw Error('D');" + "throw Error('C');" + "throw Error('B');" + "throw Error('A');", "throw Error('a');" + "goog$debug$Trace.startTracer('b', 'a');" + "goog$debug$Logger$getLogger('c');" + "goog$debug$Logger$getLogger('b');" + "goog$debug$Logger$getLogger('a');" + "throw Error('d');" + "throw Error('c');" + "throw Error('b');" + "throw Error('a');"); [EOL] } <line_num>: 369,389
public void testReserved() { [EOL]     testDebugStrings("throw Error('xyz');", "throw Error('a');", (new String[] { "a", "xyz" })); [EOL]     reserved = ImmutableSet.of("a", "b", "c"); [EOL]     testDebugStrings("throw Error('xyz');", "throw Error('d');", (new String[] { "d", "xyz" })); [EOL] } <line_num>: 391,401
private void testDebugStrings(String js, String expected, String[] substitutedStrings) { [EOL]     test(js, expected); [EOL]     List<Result> results = pass.getResult(); [EOL]     assertTrue(substitutedStrings.length % 2 == 0); [EOL]     assertEquals(substitutedStrings.length / 2, results.size()); [EOL]     for (int i = 0; i < substitutedStrings.length; i += 2) { [EOL]         Result result = results.get(i / 2); [EOL]         String original = substitutedStrings[i + 1]; [EOL]         assertEquals(original, result.original); [EOL]         String replacement = substitutedStrings[i]; [EOL]         assertEquals(replacement, result.replacement); [EOL]     } [EOL] } <line_num>: 403,421
