public void testNull() throws Exception { [EOL]     assertNull(format(null)); [EOL] } <line_num>: 28,30
public void testOneLineRegion() throws Exception { [EOL]     assertEquals("  5| hello world", format(region(5, 5, "hello world"))); [EOL] } <line_num>: 32,34
public void testTwoLineRegion() throws Exception { [EOL]     assertEquals("  5| hello world\n" + "  6| foo bar", format(region(5, 6, "hello world\nfoo bar"))); [EOL] } <line_num>: 36,39
public void testThreeLineRegionAcrossNumberRange() throws Exception { [EOL]     String region = format(region(9, 11, "hello world\nfoo bar\nanother one")); [EOL]     assertEquals("   9| hello world\n" + "  10| foo bar\n" + "  11| another one", region); [EOL] } <line_num>: 41,46
public void testThreeLineRegionEmptyLine() throws Exception { [EOL]     String region = format(region(7, 9, "hello world\n\nanother one")); [EOL]     assertEquals("  7| hello world\n" + "  8| \n" + "  9| another one", region); [EOL] } <line_num>: 48,53
public void testOnlyOneEmptyLine() throws Exception { [EOL]     assertNull(format(region(7, 7, ""))); [EOL] } <line_num>: 55,57
public void testTwoEmptyLines() throws Exception { [EOL]     assertEquals("  7| ", format(region(7, 8, "\n"))); [EOL] } <line_num>: 59,61
public void testThreeLineRemoveLastEmptyLine() throws Exception { [EOL]     String region = format(region(7, 9, "hello world\nfoobar\n")); [EOL]     assertEquals("  7| hello world\n" + "  8| foobar", region); [EOL] } <line_num>: 63,67
public void testFormatErrorSpaces() throws Exception { [EOL]     JSError error = JSError.make("javascript/complex.js", Node.newString("foobar", 5, 8), FOO_TYPE); [EOL]     LightweightMessageFormatter formatter = formatter("    if (foobar) {"); [EOL]     assertEquals("javascript/complex.js:5: ERROR - error description here\n" + "    if (foobar) {\n" + "        ^\n", formatter.formatError(error)); [EOL] } <line_num>: 69,76
public void testFormatErrorTabs() throws Exception { [EOL]     JSError error = JSError.make("javascript/complex.js", Node.newString("foobar", 5, 6), FOO_TYPE); [EOL]     LightweightMessageFormatter formatter = formatter("\t\tif (foobar) {"); [EOL]     assertEquals("javascript/complex.js:5: ERROR - error description here\n" + "\t\tif (foobar) {\n" + "\t\t    ^\n", formatter.formatError(error)); [EOL] } <line_num>: 78,85
public void testFormatErrorSpaceEndOfLine1() throws Exception { [EOL]     JSError error = JSError.make("javascript/complex.js", 1, 10, FOO_TYPE); [EOL]     LightweightMessageFormatter formatter = formatter("assert (1;"); [EOL]     assertEquals("javascript/complex.js:1: ERROR - error description here\n" + "assert (1;\n" + "          ^\n", formatter.formatError(error)); [EOL] } <line_num>: 87,94
public void testFormatErrorSpaceEndOfLine2() throws Exception { [EOL]     JSError error = JSError.make("javascript/complex.js", 6, 7, FOO_TYPE); [EOL]     LightweightMessageFormatter formatter = formatter("if (foo"); [EOL]     assertEquals("javascript/complex.js:6: ERROR - error description here\n" + "if (foo\n" + "       ^\n", formatter.formatError(error)); [EOL] } <line_num>: 96,103
private LightweightMessageFormatter formatter(String string) { [EOL]     return new LightweightMessageFormatter(source(string)); [EOL] } <line_num>: 105,107
@Override [EOL] public String getSourceLine(String sourceName, int lineNumber) { [EOL]     return source; [EOL] } <line_num>: 111,114
@Override [EOL] public Region getSourceRegion(String sourceName, int lineNumber) { [EOL]     throw new UnsupportedOperationException(); [EOL] } <line_num>: 115,118
private SourceExcerptProvider source(final String source) { [EOL]     return new SourceExcerptProvider() { [EOL]  [EOL]         @Override [EOL]         public String getSourceLine(String sourceName, int lineNumber) { [EOL]             return source; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Region getSourceRegion(String sourceName, int lineNumber) { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]     }; [EOL] } <line_num>: 109,120
private String format(Region region) { [EOL]     return new LineNumberingFormatter().formatRegion(region); [EOL] } <line_num>: 122,124
private Region region(final int startLine, final int endLine, final String source) { [EOL]     return new SimpleRegion(startLine, endLine, source); [EOL] } <line_num>: 126,129
