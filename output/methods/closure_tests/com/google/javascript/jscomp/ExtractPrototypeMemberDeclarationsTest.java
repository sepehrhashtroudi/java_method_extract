@Override [EOL] protected void setUp() { [EOL]     super.enableLineNumberCheck(true); [EOL]     enableNormalize(); [EOL]     pattern = Pattern.USE_GLOBAL_TEMP; [EOL] } <line_num>: 29,34
@Override [EOL] protected CompilerPass getProcessor(Compiler compiler) { [EOL]     return new ExtractPrototypeMemberDeclarations(compiler, pattern); [EOL] } <line_num>: 36,39
public void testNotEnoughPrototypeToExtract() { [EOL]     for (int i = 0; i < 7; i++) { [EOL]         testSame(generatePrototypeDeclarations("x", i)); [EOL]     } [EOL] } <line_num>: 41,46
public void testExtractingSingleClassPrototype() { [EOL]     extract(generatePrototypeDeclarations("x", 7), loadPrototype("x") + generateExtractedDeclarations(7)); [EOL] } <line_num>: 48,52
public void testExtractingTwoClassPrototype() { [EOL]     extract(generatePrototypeDeclarations("x", 6) + generatePrototypeDeclarations("y", 6), loadPrototype("x") + generateExtractedDeclarations(6) + loadPrototype("y") + generateExtractedDeclarations(6)); [EOL] } <line_num>: 54,62
public void testExtractingTwoClassPrototypeInDifferentBlocks() { [EOL]     extract(generatePrototypeDeclarations("x", 6) + "if (foo()) {" + generatePrototypeDeclarations("y", 6) + "}", loadPrototype("x") + generateExtractedDeclarations(6) + "if (foo()) {" + loadPrototype("y") + generateExtractedDeclarations(6) + "}"); [EOL] } <line_num>: 64,76
public void testNoMemberDeclarations() { [EOL]     testSame("x.prototype = {}; x.prototype = {}; x.prototype = {};" + "x.prototype = {}; x.prototype = {}; x.prototype = {};" + "x.prototype = {}; x.prototype = {}; x.prototype = {};"); [EOL] } <line_num>: 78,83
public void testExtractingPrototypeWithQName() { [EOL]     extract(generatePrototypeDeclarations("com.google.javascript.jscomp.x", 7), loadPrototype("com.google.javascript.jscomp.x") + generateExtractedDeclarations(7)); [EOL] } <line_num>: 85,90
public void testInterweaved() { [EOL]     testSame("x.prototype.a=1; y.prototype.a=1;" + "x.prototype.b=1; y.prototype.b=1;" + "x.prototype.c=1; y.prototype.c=1;" + "x.prototype.d=1; y.prototype.d=1;" + "x.prototype.e=1; y.prototype.e=1;" + "x.prototype.f=1; y.prototype.f=1;"); [EOL] } <line_num>: 92,100
public void testExtractingPrototypeWithNestedMembers() { [EOL]     extract("x.prototype.y.a = 1;" + "x.prototype.y.b = 1;" + "x.prototype.y.c = 1;" + "x.prototype.y.d = 1;" + "x.prototype.y.e = 1;" + "x.prototype.y.f = 1;" + "x.prototype.y.g = 1;", loadPrototype("x") + TMP + ".y.a = 1;" + TMP + ".y.b = 1;" + TMP + ".y.c = 1;" + TMP + ".y.d = 1;" + TMP + ".y.e = 1;" + TMP + ".y.f = 1;" + TMP + ".y.g = 1;"); [EOL] } <line_num>: 102,119
public void testWithDevirtualization() { [EOL]     extract("x.prototype.a = 1;" + "x.prototype.b = 1;" + "function devirtualize1() { }" + "x.prototype.c = 1;" + "x.prototype.d = 1;" + "x.prototype.e = 1;" + "x.prototype.f = 1;" + "x.prototype.g = 1;", loadPrototype("x") + TMP + ".a = 1;" + TMP + ".b = 1;" + "function devirtualize1() { }" + TMP + ".c = 1;" + TMP + ".d = 1;" + TMP + ".e = 1;" + TMP + ".f = 1;" + TMP + ".g = 1;"); [EOL]     extract("x.prototype.a = 1;" + "x.prototype.b = 1;" + "function devirtualize1() { }" + "x.prototype.c = 1;" + "x.prototype.d = 1;" + "function devirtualize2() { }" + "x.prototype.e = 1;" + "x.prototype.f = 1;" + "function devirtualize3() { }" + "x.prototype.g = 1;", loadPrototype("x") + TMP + ".a = 1;" + TMP + ".b = 1;" + "function devirtualize1() { }" + TMP + ".c = 1;" + TMP + ".d = 1;" + "function devirtualize2() { }" + TMP + ".e = 1;" + TMP + ".f = 1;" + "function devirtualize3() { }" + TMP + ".g = 1;"); [EOL] } <line_num>: 121,165
public void testAnonSimple() { [EOL]     pattern = Pattern.USE_ANON_FUNCTION; [EOL]     extract(generatePrototypeDeclarations("x", 3), generateExtractedDeclarations(3) + loadPrototype("x")); [EOL]     testSame(generatePrototypeDeclarations("x", 1)); [EOL]     testSame(generatePrototypeDeclarations("x", 2)); [EOL]     extract(generatePrototypeDeclarations("x", 7), generateExtractedDeclarations(7) + loadPrototype("x")); [EOL] } <line_num>: 167,183
public void testAnonWithDevirtualization() { [EOL]     pattern = Pattern.USE_ANON_FUNCTION; [EOL]     extract("x.prototype.a = 1;" + "x.prototype.b = 1;" + "function devirtualize() { }" + "x.prototype.c = 1;", "(function(" + TMP + "){" + TMP + ".a = 1;" + TMP + ".b = 1;" + TMP + ".c = 1;" + loadPrototype("x") + "function devirtualize() { }"); [EOL]     extract("x.prototype.a = 1;" + "function devirtualize1() { }" + "x.prototype.b = 1;" + "function devirtualize2() { }" + "x.prototype.c = 1;" + "function devirtualize3() { }", "(function(" + TMP + "){" + TMP + ".a = 1;" + TMP + ".b = 1;" + TMP + ".c = 1;" + loadPrototype("x") + "function devirtualize1() { }" + "function devirtualize2() { }" + "function devirtualize3() { }"); [EOL] } <line_num>: 185,217
public void testAnonWithSideFx() { [EOL]     pattern = Pattern.USE_ANON_FUNCTION; [EOL]     testSame("function foo() {};" + "foo.prototype.a1 = 1;" + "bar();;" + "foo.prototype.a2 = 2;" + "bar();;" + "foo.prototype.a3 = 3;" + "bar();;" + "foo.prototype.a4 = 4;" + "bar();;" + "foo.prototype.a5 = 5;" + "bar();;" + "foo.prototype.a6 = 6;" + "bar();;" + "foo.prototype.a7 = 7;" + "bar();"); [EOL] } <line_num>: 219,237
public String loadPrototype(String qName) { [EOL]     if (pattern == Pattern.USE_GLOBAL_TEMP) { [EOL]         return TMP + " = " + qName + ".prototype;"; [EOL]     } else { [EOL]         return "})(" + qName + ".prototype);"; [EOL]     } [EOL] } <line_num>: 239,245
public void extract(String src, String expected) { [EOL]     if (pattern == Pattern.USE_GLOBAL_TEMP) { [EOL]         test(src, "var " + TMP + ";" + expected); [EOL]     } else { [EOL]         test(src, expected); [EOL]     } [EOL] } <line_num>: 247,253
public String generatePrototypeDeclarations(String className, int num) { [EOL]     StringBuilder builder = new StringBuilder(); [EOL]     for (int i = 0; i < num; i++) { [EOL]         char member = (char) ('a' + i); [EOL]         builder.append(generatePrototypeDeclaration(className, "" + member, "" + member)); [EOL]     } [EOL]     return builder.toString(); [EOL] } <line_num>: 255,263
public String generatePrototypeDeclaration(String className, String member, String value) { [EOL]     return className + ".prototype." + member + " = " + value + ";"; [EOL] } <line_num>: 265,268
public String generateExtractedDeclarations(int num) { [EOL]     StringBuilder builder = new StringBuilder(); [EOL]     if (pattern == Pattern.USE_ANON_FUNCTION) { [EOL]         builder.append("(function(" + TMP + "){"); [EOL]     } [EOL]     for (int i = 0; i < num; i++) { [EOL]         char member = (char) ('a' + i); [EOL]         builder.append(generateExtractedDeclaration("" + member, "" + member)); [EOL]     } [EOL]     return builder.toString(); [EOL] } <line_num>: 270,282
public String generateExtractedDeclaration(String member, String value) { [EOL]     return TMP + "." + member + " = " + value + ";"; [EOL] } <line_num>: 284,286
