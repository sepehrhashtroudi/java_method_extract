public AmbiguatePropertiesTest() { [EOL]     super(EXTERNS); [EOL]     enableNormalize(); [EOL]     enableTypeCheck(CheckLevel.WARNING); [EOL]     enableClosurePass(); [EOL] } <line_num>: 39,44
@Override [EOL] public void process(Node externs, Node root) { [EOL]     lastPass = new AmbiguateProperties(compiler, new char[] { '$' }); [EOL]     lastPass.process(externs, root); [EOL] } <line_num>: 49,53
@Override [EOL] public CompilerPass getProcessor(final Compiler compiler) { [EOL]     return new CompilerPass() { [EOL]  [EOL]         @Override [EOL]         public void process(Node externs, Node root) { [EOL]             lastPass = new AmbiguateProperties(compiler, new char[] { '$' }); [EOL]             lastPass.process(externs, root); [EOL]         } [EOL]     }; [EOL] } <line_num>: 46,55
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 57,60
@Override [EOL] protected CompilerOptions getOptions() { [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     options.setLanguageIn(LanguageMode.ECMASCRIPT5); [EOL]     return options; [EOL] } <line_num>: 62,68
public void testOneVar1() { [EOL]     test("/** @constructor */ var Foo = function(){};Foo.prototype.b = 0;", "var Foo = function(){};Foo.prototype.a = 0;"); [EOL] } <line_num>: 70,73
public void testOneVar2() { [EOL]     testSame("/** @constructor */ var Foo = function(){};" + "Foo.prototype = {b: 0};"); [EOL] } <line_num>: 75,78
public void testOneVar3() { [EOL]     testSame("/** @constructor */ var Foo = function(){};" + "Foo.prototype = {get b() {return 0}};"); [EOL] } <line_num>: 80,83
public void testOneVar4() { [EOL]     testSame("/** @constructor */ var Foo = function(){};" + "Foo.prototype = {set b(a) {}};"); [EOL] } <line_num>: 85,88
public void testTwoVar1() { [EOL]     String js = "" + "/** @constructor */ var Foo = function(){};\n" + "Foo.prototype.z=0;\n" + "Foo.prototype.z=0;\n" + "Foo.prototype.x=0;"; [EOL]     String output = "" + "var Foo = function(){};\n" + "Foo.prototype.a=0;\n" + "Foo.prototype.a=0;\n" + "Foo.prototype.b=0;"; [EOL]     test(js, output); [EOL] } <line_num>: 90,102
public void testTwoVar2() { [EOL]     String js = "" + "/** @constructor */ var Foo = function(){};\n" + "Foo.prototype={z:0, z:1, x:0};\n"; [EOL]     testSame(js); [EOL] } <line_num>: 104,110
public void testTwoIndependentVar() { [EOL]     String js = "" + "/** @constructor */ var Foo = function(){};\n" + "Foo.prototype.b = 0;\n" + "/** @constructor */ var Bar = function(){};\n" + "Bar.prototype.c = 0;"; [EOL]     String output = "" + "var Foo = function(){};" + "Foo.prototype.a=0;" + "var Bar = function(){};" + "Bar.prototype.a=0;"; [EOL]     test(js, output); [EOL] } <line_num>: 112,124
public void testTwoTypesTwoVar() { [EOL]     String js = "" + "/** @constructor */ var Foo = function(){};\n" + "Foo.prototype.r = 0;\n" + "Foo.prototype.g = 0;\n" + "/** @constructor */ var Bar = function(){};\n" + "Bar.prototype.c = 0;" + "Bar.prototype.r = 0;"; [EOL]     String output = "" + "var Foo = function(){};" + "Foo.prototype.a=0;" + "Foo.prototype.b=0;" + "var Bar = function(){};" + "Bar.prototype.b=0;" + "Bar.prototype.a=0;"; [EOL]     test(js, output); [EOL] } <line_num>: 126,142
public void testUnion() { [EOL]     String js = "" + "/** @constructor */ var Foo = function(){};\n" + "/** @constructor */ var Bar = function(){};\n" + "Foo.prototype.foodoo=0;\n" + "Bar.prototype.bardoo=0;\n" + "/** @type {Foo|Bar} */\n" + "var U;\n" + "U.joint;" + "U.joint"; [EOL]     String output = "" + "var Foo = function(){};\n" + "var Bar = function(){};\n" + "Foo.prototype.b=0;\n" + "Bar.prototype.b=0;\n" + "var U;\n" + "U.a;" + "U.a"; [EOL]     test(js, output); [EOL] } <line_num>: 144,163
public void testUnions() { [EOL]     String js = "" + "/** @constructor */ var Foo = function(){};\n" + "/** @constructor */ var Bar = function(){};\n" + "/** @constructor */ var Baz = function(){};\n" + "/** @constructor */ var Bat = function(){};\n" + "Foo.prototype.lone1=0;\n" + "Bar.prototype.lone2=0;\n" + "Baz.prototype.lone3=0;\n" + "Bat.prototype.lone4=0;\n" + "/** @type {Foo|Bar} */\n" + "var U1;\n" + "U1.j1;" + "U1.j2;" + "/** @type {Baz|Bar} */\n" + "var U2;\n" + "U2.j3;" + "U2.j4;" + "/** @type {Baz|Bat} */\n" + "var U3;" + "U3.j5;" + "U3.j6"; [EOL]     String output = "" + "var Foo = function(){};\n" + "var Bar = function(){};\n" + "var Baz = function(){};\n" + "var Bat = function(){};\n" + "Foo.prototype.c=0;\n" + "Bar.prototype.e=0;\n" + "Baz.prototype.e=0;\n" + "Bat.prototype.c=0;\n" + "var U1;\n" + "U1.a;" + "U1.b;" + "var U2;\n" + "U2.c;" + "U2.d;" + "var U3;" + "U3.a;" + "U3.b"; [EOL]     test(js, output); [EOL] } <line_num>: 165,206
public void testExtends() { [EOL]     String js = "" + "/** @constructor */ var Foo = function(){};\n" + "Foo.prototype.x=0;\n" + "/** @constructor \n @extends Foo */ var Bar = function(){};\n" + "goog.inherits(Bar, Foo);\n" + "Bar.prototype.y=0;\n" + "Bar.prototype.z=0;\n" + "/** @constructor */ var Baz = function(){};\n" + "Baz.prototype.l=0;\n" + "Baz.prototype.m=0;\n" + "Baz.prototype.n=0;\n" + "(new Baz).m\n"; [EOL]     String output = "" + "/** @constructor */ var Foo = function(){};\n" + "Foo.prototype.a=0;\n" + "/** @constructor \n @extends Foo */ var Bar = function(){};\n" + "goog.inherits(Bar, Foo);\n" + "Bar.prototype.b=0;\n" + "Bar.prototype.c=0;\n" + "/** @constructor */ var Baz = function(){};\n" + "Baz.prototype.b=0;\n" + "Baz.prototype.a=0;\n" + "Baz.prototype.c=0;\n" + "(new Baz).a\n"; [EOL]     test(js, output); [EOL] } <line_num>: 208,234
public void testLotsOfVars() { [EOL]     StringBuilder js = new StringBuilder(); [EOL]     StringBuilder output = new StringBuilder(); [EOL]     js.append("/** @constructor */ var Foo = function(){};\n"); [EOL]     js.append("/** @constructor */ var Bar = function(){};\n"); [EOL]     output.append(js.toString()); [EOL]     int vars = 10; [EOL]     for (int i = 0; i < vars; i++) { [EOL]         js.append("Foo.prototype.var" + i + " = 0;"); [EOL]         js.append("Bar.prototype.var" + (i + 10000) + " = 0;"); [EOL]         output.append("Foo.prototype." + (char) ('a' + i) + "=0;"); [EOL]         output.append("Bar.prototype." + (char) ('a' + i) + "=0;"); [EOL]     } [EOL]     test(js.toString(), output.toString()); [EOL] } <line_num>: 236,251
public void testLotsOfClasses() { [EOL]     StringBuilder b = new StringBuilder(); [EOL]     int classes = 10; [EOL]     for (int i = 0; i < classes; i++) { [EOL]         String c = "Foo" + i; [EOL]         b.append("/** @constructor */ var " + c + " = function(){};\n"); [EOL]         b.append(c + ".prototype.varness" + i + " = 0;"); [EOL]     } [EOL]     String js = b.toString(); [EOL]     test(js, js.replaceAll("varness\\d+", "a")); [EOL] } <line_num>: 253,263
public void testFunctionType() { [EOL]     String js = "" + "/** @constructor */ function Foo(){};\n" + "/** @return {Bar} */\n" + "Foo.prototype.fun = function() { return new Bar(); };\n" + "/** @constructor */ function Bar(){};\n" + "Bar.prototype.bazz;\n" + "(new Foo).fun().bazz();"; [EOL]     String output = "" + "function Foo(){};\n" + "Foo.prototype.a = function() { return new Bar(); };\n" + "function Bar(){};\n" + "Bar.prototype.a;\n" + "(new Foo).a().a();"; [EOL]     test(js, output); [EOL] } <line_num>: 265,280
public void testPrototypePropertiesAsObjLitKeys1() { [EOL]     test("/** @constructor */ function Bar() {};" + "Bar.prototype = {2: function(){}, getA: function(){}};", "/** @constructor */ function Bar() {};" + "Bar.prototype = {2: function(){}, a: function(){}};"); [EOL] } <line_num>: 282,287
public void testPrototypePropertiesAsObjLitKeys2() { [EOL]     testSame("/** @constructor */ function Bar() {};" + "Bar.prototype = {2: function(){}, 'getA': function(){}};"); [EOL] } <line_num>: 289,292
public void testQuotedPrototypeProperty() { [EOL]     testSame("/** @constructor */ function Bar() {};" + "Bar.prototype['getA'] = function(){};" + "var bar = new Bar();" + "bar['getA']();"); [EOL] } <line_num>: 294,299
public void testOverlappingOriginalAndGeneratedNames() { [EOL]     test("/** @constructor */ function Bar(){};" + "Bar.prototype.b = function(){};" + "Bar.prototype.a = function(){};" + "var bar = new Bar();" + "bar.b();", "function Bar(){};" + "Bar.prototype.a = function(){};" + "Bar.prototype.b = function(){};" + "var bar = new Bar();" + "bar.a();"); [EOL] } <line_num>: 301,312
public void testPropertyAddedToObject() { [EOL]     testSame("var foo = {}; foo.prop = '';"); [EOL] } <line_num>: 314,316
public void testPropertyAddedToFunction() { [EOL]     test("var foo = function(){}; foo.prop = '';", "var foo = function(){}; foo.a = '';"); [EOL] } <line_num>: 318,321
public void testPropertyOfObjectOfUnknownType() { [EOL]     testSame("var foo = x(); foo.prop = '';"); [EOL] } <line_num>: 323,325
public void testPropertyOnParamOfUnknownType() { [EOL]     testSame("/** @constructor */ function Foo(){};\n" + "Foo.prototype.prop = 0;" + "function go(aFoo){\n" + "  aFoo.prop = 1;" + "}"); [EOL] } <line_num>: 327,333
public void testSetPropertyOfGlobalThis() { [EOL]     testSame("this.prop = 'bar'"); [EOL] } <line_num>: 335,337
public void testReadPropertyOfGlobalThis() { [EOL]     testSame("f(this.prop);"); [EOL] } <line_num>: 339,341
public void testSetQuotedPropertyOfThis() { [EOL]     testSame("this['prop'] = 'bar';"); [EOL] } <line_num>: 343,345
public void testExternedPropertyName() { [EOL]     test("/** @constructor */ var Bar = function(){};" + "/** @override */ Bar.prototype.toString = function(){};" + "Bar.prototype.func = function(){};" + "var bar = new Bar();" + "bar.toString();", "var Bar = function(){};" + "Bar.prototype.toString = function(){};" + "Bar.prototype.a = function(){};" + "var bar = new Bar();" + "bar.toString();"); [EOL] } <line_num>: 347,358
public void testExternedPropertyNameDefinedByObjectLiteral() { [EOL]     testSame("/**@constructor*/function Bar(){};Bar.prototype.factory"); [EOL] } <line_num>: 360,362
public void testStaticAndInstanceMethodWithSameName() { [EOL]     test("/** @constructor */function Bar(){}; Bar.getA = function(){}; " + "Bar.prototype.getA = function(){}; Bar.getA();" + "var bar = new Bar(); bar.getA();", "function Bar(){}; Bar.a = function(){};" + "Bar.prototype.a = function(){}; Bar.a();" + "var bar = new Bar(); bar.a();"); [EOL] } <line_num>: 364,371
public void testStaticAndInstanceProperties() { [EOL]     test("/** @constructor */function Bar(){};" + "Bar.getA = function(){}; " + "Bar.prototype.getB = function(){};", "function Bar(){}; Bar.a = function(){};" + "Bar.prototype.a = function(){};"); [EOL] } <line_num>: 373,379
public void testStaticAndSubInstanceProperties() { [EOL]     String js = "" + "/** @constructor */ var Foo = function(){};\n" + "Foo.x=0;\n" + "/** @constructor \n @extends Foo */ var Bar = function(){};\n" + "goog.inherits(Bar, Foo);\n" + "Bar.y=0;\n" + "Bar.prototype.z=0;\n"; [EOL]     String output = "" + "/** @constructor */ var Foo = function(){};\n" + "Foo.a=0;\n" + "/** @constructor \n @extends Foo */ var Bar = function(){};\n" + "goog.inherits(Bar, Foo);\n" + "Bar.a=0;\n" + "Bar.prototype.a=0;\n"; [EOL]     test(js, output); [EOL] } <line_num>: 381,397
public void testStaticWithFunctions() { [EOL]     String js = "" + "/** @constructor */ var Foo = function() {};\n" + "Foo.x = 0;" + "/** @param {!Function} x */ function f(x) { x.y = 1 }" + "f(Foo)"; [EOL]     String output = "" + "/** @constructor */ var Foo = function() {};\n" + "Foo.a = 0;" + "/** @param {!Function} x */ function f(x) { x.y = 1 }" + "f(Foo)"; [EOL]     test(js, output); [EOL]     js = "" + "/** @constructor */ var Foo = function() {};\n" + "Foo.x = 0;" + "/** @param {!Function} x */ function f(x) { x.y = 1; x.x = 2;}" + "f(Foo)"; [EOL]     test(js, js); [EOL]     js = "" + "/** @constructor */ var Foo = function() {};\n" + "Foo.x = 0;" + "/** @constructor */ var Bar = function() {};\n" + "Bar.y = 0;"; [EOL]     output = "" + "/** @constructor */ var Foo = function() {};\n" + "Foo.a = 0;" + "/** @constructor */ var Bar = function() {};\n" + "Bar.a = 0;"; [EOL]     test(js, output); [EOL] } <line_num>: 399,432
public void testTypeMismatch() { [EOL]     testSame(EXTERNS, "/** @constructor */var Foo = function(){};\n" + "/** @constructor */var Bar = function(){};\n" + "Foo.prototype.b = 0;\n" + "/** @type {Foo} */\n" + "var F = new Bar();", TypeValidator.TYPE_MISMATCH_WARNING, "initializing variable\n" + "found   : Bar\n" + "required: (Foo|null)"); [EOL] } <line_num>: 434,444
public void testRenamingMap() { [EOL]     String js = "" + "/** @constructor */ var Foo = function(){};\n" + "Foo.prototype.z=0;\n" + "Foo.prototype.z=0;\n" + "Foo.prototype.x=0;\n" + "Foo.prototype.y=0;"; [EOL]     String output = "" + "var Foo = function(){};\n" + "Foo.prototype.a=0;\n" + "Foo.prototype.a=0;\n" + "Foo.prototype.b=0;\n" + "Foo.prototype.c=0;"; [EOL]     test(js, output); [EOL]     Map<String, String> answerMap = Maps.newHashMap(); [EOL]     answerMap.put("x", "b"); [EOL]     answerMap.put("y", "c"); [EOL]     answerMap.put("z", "a"); [EOL]     assertEquals(answerMap, lastPass.getRenamingMap()); [EOL] } <line_num>: 446,466
public void testInline() { [EOL]     String js = "" + "/** @interface */ function Foo(){}\n" + "Foo.prototype.x = function(){};\n" + "/**\n" + " * @constructor\n" + " * @implements {Foo}\n" + " */\n" + "function Bar(){}\n" + "/** @inheritDoc */\n" + "Bar.prototype.x = function() { return this.y; };\n" + "Bar.prototype.z = function() {};\n" + "/** @type {Foo} */ (new Bar).y;"; [EOL]     String output = "" + "function Foo(){}\n" + "Foo.prototype.a = function(){};\n" + "function Bar(){}\n" + "Bar.prototype.a = function() { return this.b; };\n" + "Bar.prototype.c = function() {};\n" + "(new Bar).b;"; [EOL]     test(js, output); [EOL] } <line_num>: 468,491
public void testImplementsAndExtends() { [EOL]     String js = "" + "/** @interface */ function Foo() {}\n" + "/**\n" + " * @constructor\n" + " */\n" + "function Bar(){}\n" + "Bar.prototype.y = function() { return 3; };\n" + "/**\n" + " * @constructor\n" + " * @extends {Bar}\n" + " * @implements {Foo}\n" + " */\n" + "function SubBar(){ }\n" + "/** @param {Foo} x */ function f(x) { x.z = 3; }\n" + "/** @param {SubBar} x */ function g(x) { x.z = 3; }"; [EOL]     String output = "" + "function Foo(){}\n" + "function Bar(){}\n" + "Bar.prototype.b = function() { return 3; };\n" + "function SubBar(){}\n" + "function f(x) { x.a = 3; }\n" + "function g(x) { x.a = 3; }"; [EOL]     test(js, output); [EOL] } <line_num>: 493,517
public void testImplementsAndExtends2() { [EOL]     String js = "" + "/** @interface */ function A() {}\n" + "/**\n" + " * @constructor\n" + " */\n" + "function C1(){}\n" + "/**\n" + " * @constructor\n" + " * @extends {C1}\n" + " * @implements {A}\n" + " */\n" + "function C2(){}\n" + "/** @param {C1} x */ function f(x) { x.y = 3; }\n" + "/** @param {A} x */ function g(x) { x.z = 3; }\n"; [EOL]     String output = "" + "function A(){}\n" + "function C1(){}\n" + "function C2(){}\n" + "function f(x) { x.a = 3; }\n" + "function g(x) { x.b = 3; }\n"; [EOL]     test(js, output); [EOL] } <line_num>: 519,541
public void testExtendsInterface() { [EOL]     String js = "" + "/** @interface */ function A() {}\n" + "/** @interface \n @extends {A} */ function B() {}\n" + "/** @param {A} x */ function f(x) { x.y = 3; }\n" + "/** @param {B} x */ function g(x) { x.z = 3; }\n"; [EOL]     String output = "" + "function A(){}\n" + "function B(){}\n" + "function f(x) { x.a = 3; }\n" + "function g(x) { x.b = 3; }\n"; [EOL]     test(js, output); [EOL] } <line_num>: 543,555
public void testFunctionSubType() { [EOL]     String js = "" + "Function.prototype.a = 1;\n" + "function f() {}\n" + "f.y = 2;\n"; [EOL]     String output = "" + "Function.prototype.a = 1;\n" + "function f() {}\n" + "f.b = 2;\n"; [EOL]     test(js, output); [EOL] } <line_num>: 557,567
public void testFunctionSubType2() { [EOL]     String js = "" + "Function.prototype.a = 1;\n" + "/** @constructor */ function F() {}\n" + "F.y = 2;\n"; [EOL]     String output = "" + "Function.prototype.a = 1;\n" + "function F() {}\n" + "F.b = 2;\n"; [EOL]     test(js, output); [EOL] } <line_num>: 569,579
public void testPredeclaredType() { [EOL]     String js = "goog.addDependency('zzz.js', ['goog.Foo'], []);" + "/** @constructor */ " + "function A() {" + "  this.x = 3;" + "}" + "/** @param {goog.Foo} x */" + "function f(x) { x.y = 4; }"; [EOL]     String result = "0;" + "/** @constructor */ " + "function A() {" + "  this.a = 3;" + "}" + "/** @param {goog.Foo} x */" + "function f(x) { x.y = 4; }"; [EOL]     test(js, result); [EOL] } <line_num>: 581,599
