private TypedName(String name, JSType type) { [EOL]     this.name = name; [EOL]     this.type = type; [EOL] } <line_num>: 604,607
@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     interpreter = new SemanticReverseAbstractInterpreter(codingConvention, registry); [EOL] } <line_num>: 36,42
public FlowScope newScope() { [EOL]     Scope globalScope = Scope.createGlobalScope(new Node(Token.EMPTY)); [EOL]     functionScope = new Scope(globalScope, new Node(Token.EMPTY)); [EOL]     return LinkedFlowScope.createEntryLattice(functionScope); [EOL] } <line_num>: 44,48
public void testNameCondition() throws Exception { [EOL]     FlowScope blind = newScope(); [EOL]     Node condition = createVar(blind, "a", createNullableType(STRING_TYPE)); [EOL]     FlowScope informedTrue = interpreter.getPreciserScopeKnowingConditionOutcome(condition, blind, true); [EOL]     assertTypeEquals(STRING_TYPE, getVarType(informedTrue, "a")); [EOL]     FlowScope informedFalse = interpreter.getPreciserScopeKnowingConditionOutcome(condition, blind, false); [EOL]     assertTypeEquals(createNullableType(STRING_TYPE), getVarType(informedFalse, "a")); [EOL] } <line_num>: 53,67
public void testNegatedNameCondition() throws Exception { [EOL]     FlowScope blind = newScope(); [EOL]     Node a = createVar(blind, "a", createNullableType(STRING_TYPE)); [EOL]     Node condition = new Node(Token.NOT); [EOL]     condition.addChildToBack(a); [EOL]     FlowScope informedTrue = interpreter.getPreciserScopeKnowingConditionOutcome(condition, blind, true); [EOL]     assertTypeEquals(createNullableType(STRING_TYPE), getVarType(informedTrue, "a")); [EOL]     FlowScope informedFalse = interpreter.getPreciserScopeKnowingConditionOutcome(condition, blind, false); [EOL]     assertTypeEquals(STRING_TYPE, getVarType(informedFalse, "a")); [EOL] } <line_num>: 72,88
@SuppressWarnings("unchecked") [EOL] public void testAssignCondition1() throws Exception { [EOL]     FlowScope blind = newScope(); [EOL]     testBinop(blind, Token.ASSIGN, createVar(blind, "a", createNullableType(OBJECT_TYPE)), createVar(blind, "b", createNullableType(OBJECT_TYPE)), Sets.newHashSet(new TypedName("a", OBJECT_TYPE), new TypedName("b", OBJECT_TYPE)), Sets.newHashSet(new TypedName("a", NULL_TYPE), new TypedName("b", NULL_TYPE))); [EOL] } <line_num>: 93,106
@SuppressWarnings("unchecked") [EOL] public void testSheqCondition1() throws Exception { [EOL]     FlowScope blind = newScope(); [EOL]     testBinop(blind, Token.SHEQ, createVar(blind, "a", createUnionType(STRING_TYPE, NUMBER_TYPE)), createNumber(56), Sets.newHashSet(new TypedName("a", NUMBER_TYPE)), Sets.newHashSet(new TypedName("a", createUnionType(STRING_TYPE, NUMBER_TYPE)))); [EOL] } <line_num>: 111,121
@SuppressWarnings("unchecked") [EOL] public void testSheqCondition2() throws Exception { [EOL]     FlowScope blind = newScope(); [EOL]     testBinop(blind, Token.SHEQ, createNumber(56), createVar(blind, "a", createUnionType(STRING_TYPE, NUMBER_TYPE)), Sets.newHashSet(new TypedName("a", NUMBER_TYPE)), Sets.newHashSet(new TypedName("a", createUnionType(STRING_TYPE, NUMBER_TYPE)))); [EOL] } <line_num>: 126,136
@SuppressWarnings("unchecked") [EOL] public void testSheqCondition3() throws Exception { [EOL]     FlowScope blind = newScope(); [EOL]     testBinop(blind, Token.SHEQ, createVar(blind, "b", createUnionType(STRING_TYPE, BOOLEAN_TYPE)), createVar(blind, "a", createUnionType(STRING_TYPE, NUMBER_TYPE)), Sets.newHashSet(new TypedName("a", STRING_TYPE), new TypedName("b", STRING_TYPE)), Sets.newHashSet(new TypedName("a", createUnionType(STRING_TYPE, NUMBER_TYPE)), new TypedName("b", createUnionType(STRING_TYPE, BOOLEAN_TYPE)))); [EOL] } <line_num>: 141,154
@SuppressWarnings("unchecked") [EOL] public void testSheqCondition4() throws Exception { [EOL]     FlowScope blind = newScope(); [EOL]     testBinop(blind, Token.SHEQ, createVar(blind, "a", createUnionType(STRING_TYPE, VOID_TYPE)), createVar(blind, "b", createUnionType(VOID_TYPE)), Sets.newHashSet(new TypedName("a", VOID_TYPE), new TypedName("b", VOID_TYPE)), Sets.newHashSet(new TypedName("a", STRING_TYPE), new TypedName("b", VOID_TYPE))); [EOL] } <line_num>: 156,167
@SuppressWarnings("unchecked") [EOL] public void testSheqCondition5() throws Exception { [EOL]     FlowScope blind = newScope(); [EOL]     testBinop(blind, Token.SHEQ, createVar(blind, "a", createUnionType(NULL_TYPE, VOID_TYPE)), createVar(blind, "b", createUnionType(VOID_TYPE)), Sets.newHashSet(new TypedName("a", VOID_TYPE), new TypedName("b", VOID_TYPE)), Sets.newHashSet(new TypedName("a", NULL_TYPE), new TypedName("b", VOID_TYPE))); [EOL] } <line_num>: 169,180
@SuppressWarnings("unchecked") [EOL] public void testSheqCondition6() throws Exception { [EOL]     FlowScope blind = newScope(); [EOL]     testBinop(blind, Token.SHEQ, createVar(blind, "a", createUnionType(STRING_TYPE, VOID_TYPE)), createVar(blind, "b", createUnionType(NUMBER_TYPE, VOID_TYPE)), Sets.newHashSet(new TypedName("a", VOID_TYPE), new TypedName("b", VOID_TYPE)), Sets.newHashSet(new TypedName("a", createUnionType(STRING_TYPE, VOID_TYPE)), new TypedName("b", createUnionType(NUMBER_TYPE, VOID_TYPE)))); [EOL] } <line_num>: 182,197
@SuppressWarnings("unchecked") [EOL] public void testShneCondition1() throws Exception { [EOL]     FlowScope blind = newScope(); [EOL]     testBinop(blind, Token.SHNE, createVar(blind, "a", createUnionType(STRING_TYPE, NUMBER_TYPE)), createNumber(56), Sets.newHashSet(new TypedName("a", createUnionType(STRING_TYPE, NUMBER_TYPE))), Sets.newHashSet(new TypedName("a", NUMBER_TYPE))); [EOL] } <line_num>: 202,212
@SuppressWarnings("unchecked") [EOL] public void testShneCondition2() throws Exception { [EOL]     FlowScope blind = newScope(); [EOL]     testBinop(blind, Token.SHNE, createNumber(56), createVar(blind, "a", createUnionType(STRING_TYPE, NUMBER_TYPE)), Sets.newHashSet(new TypedName("a", createUnionType(STRING_TYPE, NUMBER_TYPE))), Sets.newHashSet(new TypedName("a", NUMBER_TYPE))); [EOL] } <line_num>: 217,227
@SuppressWarnings("unchecked") [EOL] public void testShneCondition3() throws Exception { [EOL]     FlowScope blind = newScope(); [EOL]     testBinop(blind, Token.SHNE, createVar(blind, "b", createUnionType(STRING_TYPE, BOOLEAN_TYPE)), createVar(blind, "a", createUnionType(STRING_TYPE, NUMBER_TYPE)), Sets.newHashSet(new TypedName("a", createUnionType(STRING_TYPE, NUMBER_TYPE)), new TypedName("b", createUnionType(STRING_TYPE, BOOLEAN_TYPE))), Sets.newHashSet(new TypedName("a", STRING_TYPE), new TypedName("b", STRING_TYPE))); [EOL] } <line_num>: 232,245
@SuppressWarnings("unchecked") [EOL] public void testShneCondition4() throws Exception { [EOL]     FlowScope blind = newScope(); [EOL]     testBinop(blind, Token.SHNE, createVar(blind, "a", createUnionType(STRING_TYPE, VOID_TYPE)), createVar(blind, "b", createUnionType(VOID_TYPE)), Sets.newHashSet(new TypedName("a", STRING_TYPE), new TypedName("b", VOID_TYPE)), Sets.newHashSet(new TypedName("a", VOID_TYPE), new TypedName("b", VOID_TYPE))); [EOL] } <line_num>: 247,258
@SuppressWarnings("unchecked") [EOL] public void testShneCondition5() throws Exception { [EOL]     FlowScope blind = newScope(); [EOL]     testBinop(blind, Token.SHNE, createVar(blind, "a", createUnionType(NULL_TYPE, VOID_TYPE)), createVar(blind, "b", createUnionType(NULL_TYPE)), Sets.newHashSet(new TypedName("a", VOID_TYPE), new TypedName("b", NULL_TYPE)), Sets.newHashSet(new TypedName("a", NULL_TYPE), new TypedName("b", NULL_TYPE))); [EOL] } <line_num>: 260,271
@SuppressWarnings("unchecked") [EOL] public void testShneCondition6() throws Exception { [EOL]     FlowScope blind = newScope(); [EOL]     testBinop(blind, Token.SHNE, createVar(blind, "a", createUnionType(STRING_TYPE, VOID_TYPE)), createVar(blind, "b", createUnionType(NUMBER_TYPE, VOID_TYPE)), Sets.newHashSet(new TypedName("a", createUnionType(STRING_TYPE, VOID_TYPE)), new TypedName("b", createUnionType(NUMBER_TYPE, VOID_TYPE))), Sets.newHashSet(new TypedName("a", VOID_TYPE), new TypedName("b", VOID_TYPE))); [EOL] } <line_num>: 273,288
@SuppressWarnings("unchecked") [EOL] public void testEqCondition1() throws Exception { [EOL]     FlowScope blind = newScope(); [EOL]     testBinop(blind, Token.EQ, createVar(blind, "a", createUnionType(BOOLEAN_TYPE, VOID_TYPE)), createNull(), Sets.newHashSet(new TypedName("a", VOID_TYPE)), Sets.newHashSet(new TypedName("a", BOOLEAN_TYPE))); [EOL] } <line_num>: 293,302
@SuppressWarnings("unchecked") [EOL] public void testEqCondition2() throws Exception { [EOL]     FlowScope blind = newScope(); [EOL]     testBinop(blind, Token.NE, createNull(), createVar(blind, "a", createUnionType(BOOLEAN_TYPE, VOID_TYPE)), Sets.newHashSet(new TypedName("a", BOOLEAN_TYPE)), Sets.newHashSet(new TypedName("a", VOID_TYPE))); [EOL] } <line_num>: 307,316
@SuppressWarnings("unchecked") [EOL] public void testEqCondition3() throws Exception { [EOL]     FlowScope blind = newScope(); [EOL]     JSType nullableOptionalNumber = createUnionType(NULL_TYPE, VOID_TYPE, NUMBER_TYPE); [EOL]     JSType nullUndefined = createUnionType(VOID_TYPE, NULL_TYPE); [EOL]     testBinop(blind, Token.EQ, createVar(blind, "a", nullableOptionalNumber), createNull(), Sets.newHashSet(new TypedName("a", nullUndefined)), Sets.newHashSet(new TypedName("a", NUMBER_TYPE))); [EOL] } <line_num>: 321,336
@SuppressWarnings("unchecked") [EOL] public void testEqCondition4() throws Exception { [EOL]     FlowScope blind = newScope(); [EOL]     testBinop(blind, Token.EQ, createVar(blind, "a", VOID_TYPE), createVar(blind, "b", VOID_TYPE), Sets.newHashSet(new TypedName("a", VOID_TYPE), new TypedName("b", VOID_TYPE)), Sets.newHashSet(new TypedName("a", NO_TYPE), new TypedName("b", NO_TYPE))); [EOL] } <line_num>: 341,354
@SuppressWarnings("unchecked") [EOL] public void testInequalitiesCondition1() { [EOL]     for (int op : Arrays.asList(Token.LT, Token.GT, Token.LE, Token.GE)) { [EOL]         FlowScope blind = newScope(); [EOL]         testBinop(blind, op, createVar(blind, "a", createUnionType(STRING_TYPE, VOID_TYPE)), createNumber(8), Sets.newHashSet(new TypedName("a", STRING_TYPE)), Sets.newHashSet(new TypedName("a", createUnionType(STRING_TYPE, VOID_TYPE)))); [EOL]     } [EOL] } <line_num>: 360,373
@SuppressWarnings("unchecked") [EOL] public void testInequalitiesCondition2() { [EOL]     for (int op : Arrays.asList(Token.LT, Token.GT, Token.LE, Token.GE)) { [EOL]         FlowScope blind = newScope(); [EOL]         testBinop(blind, op, createVar(blind, "a", createUnionType(STRING_TYPE, NUMBER_TYPE, VOID_TYPE)), createVar(blind, "b", createUnionType(NUMBER_TYPE, NULL_TYPE)), Sets.newHashSet(new TypedName("a", createUnionType(STRING_TYPE, NUMBER_TYPE)), new TypedName("b", createUnionType(NUMBER_TYPE, NULL_TYPE))), Sets.newHashSet(new TypedName("a", createUnionType(STRING_TYPE, NUMBER_TYPE, VOID_TYPE)), new TypedName("b", createUnionType(NUMBER_TYPE, NULL_TYPE)))); [EOL]     } [EOL] } <line_num>: 379,400
@SuppressWarnings("unchecked") [EOL] public void testInequalitiesCondition3() { [EOL]     for (int op : Arrays.asList(Token.LT, Token.GT, Token.LE, Token.GE)) { [EOL]         FlowScope blind = newScope(); [EOL]         testBinop(blind, op, createUntypedNumber(8), createVar(blind, "a", createUnionType(STRING_TYPE, VOID_TYPE)), Sets.newHashSet(new TypedName("a", STRING_TYPE)), Sets.newHashSet(new TypedName("a", createUnionType(STRING_TYPE, VOID_TYPE)))); [EOL]     } [EOL] } <line_num>: 406,419
@SuppressWarnings("unchecked") [EOL] public void testAnd() { [EOL]     FlowScope blind = newScope(); [EOL]     testBinop(blind, Token.AND, createVar(blind, "b", createUnionType(STRING_TYPE, NULL_TYPE)), createVar(blind, "a", createUnionType(NUMBER_TYPE, VOID_TYPE)), Sets.newHashSet(new TypedName("a", NUMBER_TYPE), new TypedName("b", STRING_TYPE)), Sets.newHashSet(new TypedName("a", createUnionType(NUMBER_TYPE, VOID_TYPE)), new TypedName("b", createUnionType(STRING_TYPE, NULL_TYPE)))); [EOL] } <line_num>: 421,434
@SuppressWarnings("unchecked") [EOL] public void testTypeof1() { [EOL]     FlowScope blind = newScope(); [EOL]     testBinop(blind, Token.EQ, new Node(Token.TYPEOF, createVar(blind, "a", OBJECT_TYPE)), Node.newString("function"), Sets.newHashSet(new TypedName("a", U2U_CONSTRUCTOR_TYPE)), Sets.newHashSet(new TypedName("a", OBJECT_TYPE))); [EOL] } <line_num>: 436,447
@SuppressWarnings("unchecked") [EOL] public void testTypeof2() { [EOL]     FlowScope blind = newScope(); [EOL]     testBinop(blind, Token.EQ, new Node(Token.TYPEOF, createVar(blind, "a", ALL_TYPE)), Node.newString("function"), Sets.newHashSet(new TypedName("a", U2U_CONSTRUCTOR_TYPE)), Sets.newHashSet(new TypedName("a", ALL_TYPE))); [EOL] } <line_num>: 449,460
@SuppressWarnings("unchecked") [EOL] public void testTypeof3() { [EOL]     FlowScope blind = newScope(); [EOL]     testBinop(blind, Token.EQ, new Node(Token.TYPEOF, createVar(blind, "a", OBJECT_NUMBER_STRING_BOOLEAN)), Node.newString("function"), Sets.newHashSet(new TypedName("a", U2U_CONSTRUCTOR_TYPE)), Sets.newHashSet(new TypedName("a", OBJECT_NUMBER_STRING_BOOLEAN))); [EOL] } <line_num>: 462,474
@SuppressWarnings("unchecked") [EOL] public void testTypeof4() { [EOL]     FlowScope blind = newScope(); [EOL]     testBinop(blind, Token.EQ, new Node(Token.TYPEOF, createVar(blind, "a", createUnionType(U2U_CONSTRUCTOR_TYPE, NUMBER_STRING_BOOLEAN))), Node.newString("function"), Sets.newHashSet(new TypedName("a", U2U_CONSTRUCTOR_TYPE)), Sets.newHashSet(new TypedName("a", NUMBER_STRING_BOOLEAN))); [EOL] } <line_num>: 476,489
@SuppressWarnings("unchecked") [EOL] public void testInstanceOf() { [EOL]     FlowScope blind = newScope(); [EOL]     testBinop(blind, Token.INSTANCEOF, createVar(blind, "x", UNKNOWN_TYPE), createVar(blind, "s", STRING_OBJECT_FUNCTION_TYPE), Sets.newHashSet(new TypedName("x", STRING_OBJECT_TYPE), new TypedName("s", STRING_OBJECT_FUNCTION_TYPE)), Sets.newHashSet(new TypedName("s", STRING_OBJECT_FUNCTION_TYPE))); [EOL] } <line_num>: 491,503
@SuppressWarnings("unchecked") [EOL] public void testInstanceOf2() { [EOL]     FlowScope blind = newScope(); [EOL]     testBinop(blind, Token.INSTANCEOF, createVar(blind, "x", createUnionType(STRING_OBJECT_TYPE, NUMBER_OBJECT_TYPE)), createVar(blind, "s", STRING_OBJECT_FUNCTION_TYPE), Sets.newHashSet(new TypedName("x", STRING_OBJECT_TYPE), new TypedName("s", STRING_OBJECT_FUNCTION_TYPE)), Sets.newHashSet(new TypedName("x", NUMBER_OBJECT_TYPE), new TypedName("s", STRING_OBJECT_FUNCTION_TYPE))); [EOL] } <line_num>: 505,519
@SuppressWarnings("unchecked") [EOL] public void testInstanceOf3() { [EOL]     FlowScope blind = newScope(); [EOL]     testBinop(blind, Token.INSTANCEOF, createVar(blind, "x", OBJECT_TYPE), createVar(blind, "s", STRING_OBJECT_FUNCTION_TYPE), Sets.newHashSet(new TypedName("x", STRING_OBJECT_TYPE), new TypedName("s", STRING_OBJECT_FUNCTION_TYPE)), Sets.newHashSet(new TypedName("x", OBJECT_TYPE), new TypedName("s", STRING_OBJECT_FUNCTION_TYPE))); [EOL] } <line_num>: 521,534
@SuppressWarnings("unchecked") [EOL] public void testInstanceOf4() { [EOL]     FlowScope blind = newScope(); [EOL]     testBinop(blind, Token.INSTANCEOF, createVar(blind, "x", ALL_TYPE), createVar(blind, "s", STRING_OBJECT_FUNCTION_TYPE), Sets.newHashSet(new TypedName("x", STRING_OBJECT_TYPE), new TypedName("s", STRING_OBJECT_FUNCTION_TYPE)), Sets.newHashSet(new TypedName("s", STRING_OBJECT_FUNCTION_TYPE))); [EOL] } <line_num>: 536,548
private void testBinop(FlowScope blind, int binop, Node left, Node right, Collection<TypedName> trueOutcome, Collection<TypedName> falseOutcome) { [EOL]     Node condition = new Node(binop); [EOL]     condition.addChildToBack(left); [EOL]     condition.addChildToBack(right); [EOL]     FlowScope informedTrue = interpreter.getPreciserScopeKnowingConditionOutcome(condition, blind, true); [EOL]     for (TypedName p : trueOutcome) { [EOL]         assertTypeEquals(p.name, p.type, getVarType(informedTrue, p.name)); [EOL]     } [EOL]     FlowScope informedFalse = interpreter.getPreciserScopeKnowingConditionOutcome(condition, blind, false); [EOL]     for (TypedName p : falseOutcome) { [EOL]         assertTypeEquals(p.type, getVarType(informedFalse, p.name)); [EOL]     } [EOL] } <line_num>: 550,570
private Node createNull() { [EOL]     Node n = new Node(Token.NULL); [EOL]     n.setJSType(NULL_TYPE); [EOL]     return n; [EOL] } <line_num>: 572,576
private Node createNumber(int n) { [EOL]     Node number = createUntypedNumber(n); [EOL]     number.setJSType(NUMBER_TYPE); [EOL]     return number; [EOL] } <line_num>: 578,582
private Node createUntypedNumber(int n) { [EOL]     return Node.newNumber(n); [EOL] } <line_num>: 584,586
private JSType getVarType(FlowScope scope, String name) { [EOL]     return scope.getSlot(name).getType(); [EOL] } <line_num>: 588,590
private Node createVar(FlowScope scope, String name, JSType type) { [EOL]     Node n = Node.newString(Token.NAME, name); [EOL]     functionScope.declare(name, n, null, null); [EOL]     ((LinkedFlowScope) scope).inferSlotType(name, type); [EOL]     n.setJSType(type); [EOL]     return n; [EOL] } <line_num>: 592,598
