public AliasExternalsTest() { [EOL]     super(EXTERNS); [EOL] } <line_num>: 45,47
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 49,53
@Override [EOL] public void setUp() { [EOL]     super.enableLineNumberCheck(false); [EOL]     super.enableNormalize(); [EOL]     unaliasableGlobals = null; [EOL]     aliasableGlobals = null; [EOL] } <line_num>: 55,61
public void testGlobalAlias() { [EOL]     test("window.setTimeout(function() {}, 0);" + "var doc=window.document;" + "window.alert(\"foo\");" + "window.eval(\"1\");" + "window.location.href=\"http://www.example.com\";" + "function foo() {var window = \"bar\"; return window}foo();", "var GLOBAL_window=window;" + formatPropNameDecl("setTimeout") + "GLOBAL_window[$$PROP_setTimeout](function() {}, 0);" + "var doc=GLOBAL_window.document;" + "GLOBAL_window.alert(\"foo\");" + "GLOBAL_window.eval(\"1\");" + "GLOBAL_window.location.href=\"http://www.example.com\";" + "function foo() {var window = \"bar\"; return window}foo();"); [EOL] } <line_num>: 66,82
public void testUnaliasable() { [EOL]     test("function foo() {" + "var x=arguments.length;" + "var y=arguments.length;" + "var z=arguments.length;" + "var w=arguments.length;" + "return x + y + z + w" + "};foo();", formatPropNameDecl("length") + "function foo() {" + "var x=arguments[$$PROP_length];" + "var y=arguments[$$PROP_length];" + "var z=arguments[$$PROP_length];" + "var w=arguments[$$PROP_length];" + "return x + y + z + w" + "};foo();"); [EOL]     test("var x=new ActiveXObject();" + "x.foo=\"bar\";" + "var y=new ActiveXObject();" + "y.foo=\"bar\";" + "var z=new ActiveXObject();" + "z.foo=\"bar\";", "var x=new ActiveXObject();" + "x.foo=\"bar\";" + "var y=new ActiveXObject();" + "y.foo=\"bar\";" + "var z=new ActiveXObject();" + "z.foo=\"bar\";"); [EOL]     test("var _a=eval('foo'),_b=eval('foo'),_c=eval('foo'),_d=eval('foo')," + "_e=eval('foo'),_f=eval('foo'),_g=eval('foo');", "var _a=eval('foo'),_b=eval('foo'),_c=eval('foo'),_d=eval('foo')," + "_e=eval('foo'),_f=eval('foo'),_g=eval('foo');"); [EOL] } <line_num>: 88,124
public void testAliasableGlobals() { [EOL]     aliasableGlobals = "notused,length"; [EOL]     test("function foo() {" + "var x=arguments.length;" + "var y=arguments.length;" + "var z=arguments.length;" + "var w=arguments.length;" + "return x + y + z + w" + "};foo();", formatPropNameDecl("length") + "function foo() {" + "var x=arguments[$$PROP_length];" + "var y=arguments[$$PROP_length];" + "var z=arguments[$$PROP_length];" + "var w=arguments[$$PROP_length];" + "return x + y + z + w" + "};foo();"); [EOL]     aliasableGlobals = "notused,notlength"; [EOL]     test("function foo() {" + "var x=arguments.length;" + "var y=arguments.length;" + "var z=arguments.length;" + "var w=arguments.length;" + "return x + y + z + w" + "};foo();", "function foo() {" + "var x=arguments.length;" + "var y=arguments.length;" + "var z=arguments.length;" + "var w=arguments.length;" + "return x + y + z + w" + "};foo();"); [EOL] } <line_num>: 130,165
public void testAliasableAndUnaliasableGlobals() { [EOL]     aliasableGlobals = "foo,bar"; [EOL]     unaliasableGlobals = ""; [EOL]     test("var x;", "var x;"); [EOL]     aliasableGlobals = ""; [EOL]     unaliasableGlobals = "baz,qux"; [EOL]     test("var x;", "var x;"); [EOL]     aliasableGlobals = "foo,bar"; [EOL]     unaliasableGlobals = "baz,qux"; [EOL]     try { [EOL]         test("var x;", "var x;"); [EOL]         fail("Expected an IllegalArgumentException"); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 170,190
public void testGlobalAssigment() { [EOL]     test("var x=_USER_ID+window;" + "var y=_USER_ID+window;" + "var z=_USER_ID+window;" + "var w=x+y+z;" + "_USER_ID = \"foo\";" + "window++;", "var x=_USER_ID+window;" + "var y=_USER_ID+window;" + "var z=_USER_ID+window;" + "var w=x+y+z;" + "_USER_ID = \"foo\";" + "window++"); [EOL] } <line_num>: 195,209
public void testNewOperator() { [EOL]     test("var x;new x(window);window;window;window;window;window", "var GLOBAL_window=window; var x;" + "  new x(GLOBAL_window);GLOBAL_window;GLOBAL_window;" + "  GLOBAL_window;GLOBAL_window;GLOBAL_window"); [EOL] } <line_num>: 211,217
public void testGetProp() { [EOL]     test("function foo(a,b){return a.length > b.length;}", formatPropNameDecl("length") + "function foo(a, b){return a[$$PROP_length] > b[$$PROP_length];}"); [EOL]     test("Foo.prototype.bar = function() { return 'foo'; }", formatPropNameDecl("prototype") + "Foo[$$PROP_prototype].bar = function() { return 'foo'; }"); [EOL]     test("Foo.notreplaced = 5", "Foo.notreplaced=5"); [EOL] } <line_num>: 222,230
public void testIgnoredOps() { [EOL]     testSame("function foo() { this.length-- }"); [EOL]     testSame("function foo() { this.length++ }"); [EOL]     testSame("function foo() { this.length+=5 }"); [EOL]     testSame("function foo() { this.length-=5 }"); [EOL] } <line_num>: 235,240
public void testSetProp() { [EOL]     test("function foo() { this.innerHTML = 'hello!'; }", formatSetPropFn("innerHTML") + "function foo() { SETPROP_innerHTML(this, 'hello!'); }"); [EOL] } <line_num>: 245,249
public void testParentChild() { [EOL]     test("a.length = b.length = c.length;", formatSetPropFn("length") + formatPropNameDecl("length") + "SETPROP_length(a, SETPROP_length(b, c[$$PROP_length]))"); [EOL] } <line_num>: 256,260
public void testModulesWithoutDependencies() { [EOL]     test(createModules(MODULE_SRC_ONE, MODULE_SRC_TWO), new String[] { "var $$PROP_length=\"length\";a=b[$$PROP_length];" + "a=b[$$PROP_length];a=b[$$PROP_length];", "c=d[$$PROP_length];" }); [EOL] } <line_num>: 270,276
public void testModulesWithDependencies() { [EOL]     test(createModuleChain(MODULE_SRC_ONE, MODULE_SRC_TWO), new String[] { "var $$PROP_length=\"length\";a=b[$$PROP_length];" + "a=b[$$PROP_length];a=b[$$PROP_length];", "c=d[$$PROP_length];" }); [EOL] } <line_num>: 282,288
public void testPropAccessorPushedDeeper1() { [EOL]     test(createModuleChain("var a = \"foo\";", "var b = a.length;"), new String[] { "var a = \"foo\";", formatPropNameDecl("length") + "var b = a[$$PROP_length]" }); [EOL] } <line_num>: 290,295
public void testPropAccessorPushedDeeper2() { [EOL]     test(createModuleChain("var a = \"foo\";", "var b = a.length;", "var c = a.length;"), new String[] { "var a = \"foo\";", formatPropNameDecl("length") + "var b = a[$$PROP_length]", "var c = a[$$PROP_length]" }); [EOL] } <line_num>: 297,304
public void testPropAccessorPushedDeeper3() { [EOL]     test(createModuleStar("var a = \"foo\";", "var b = a.length;", "var c = a.length;"), new String[] { formatPropNameDecl("length") + "var a = \"foo\";", "var b = a[$$PROP_length]", "var c = a[$$PROP_length]" }); [EOL] } <line_num>: 306,313
public void testPropAccessorNotPushedDeeper() { [EOL]     test(createModuleChain("var a = \"foo\"; var b = a.length;", "var c = a.length;"), new String[] { formatPropNameDecl("length") + "var a = \"foo\"; var b = a[$$PROP_length]", "var c = a[$$PROP_length]" }); [EOL] } <line_num>: 315,322
public void testPropMutatorPushedDeeper() { [EOL]     test(createModuleChain("var a = [1];", "a.length = 0;"), new String[] { "var a = [1];", formatSetPropFn("length") + "SETPROP_length(a, 0);" }); [EOL] } <line_num>: 324,329
public void testPropMutatorNotPushedDeeper() { [EOL]     test(createModuleChain("var a = [1]; a.length = 1;", "a.length = 0;"), new String[] { formatSetPropFn("length") + "var a = [1]; SETPROP_length(a, 1);", "SETPROP_length(a, 0);" }); [EOL] } <line_num>: 331,337
public void testGlobalAliasPushedDeeper() { [EOL]     test(createModuleChain("var a = 1;", "var b = window, c = window, d = window, e = window;"), new String[] { "var a = 1;", "var GLOBAL_window = window;" + "var b = GLOBAL_window, c = GLOBAL_window, " + "    d = GLOBAL_window, e = GLOBAL_window;" }); [EOL] } <line_num>: 339,347
public void testGlobalAliasNotPushedDeeper() { [EOL]     test(createModuleChain("var a = 1, b = window;", "var c = window, d = window, e = window;"), new String[] { "var GLOBAL_window = window;" + "var a = 1, b = GLOBAL_window;", "var c = GLOBAL_window, " + "    d = GLOBAL_window, e = GLOBAL_window;" }); [EOL] } <line_num>: 349,357
public void testNoAliasAnnotationForSingleVar() { [EOL]     testSame("[RangeObject, RangeObject, RangeObject]"); [EOL] } <line_num>: 359,361
public void testNoAliasAnnotationForMultiVarDeclaration() { [EOL]     test("[RuntimeObject, RuntimeObject, RuntimeObject," + " SelectionObject, SelectionObject, SelectionObject]", "var GLOBAL_SelectionObject = SelectionObject;" + "[RuntimeObject, RuntimeObject, RuntimeObject," + " GLOBAL_SelectionObject, GLOBAL_SelectionObject," + " GLOBAL_SelectionObject]"); [EOL] } <line_num>: 363,370
public void testNoAliasAnnotationForFunction() { [EOL]     testSame("[NoAliasFunction(), NoAliasFunction(), NoAliasFunction()]"); [EOL] } <line_num>: 372,374
private String formatPropNameDecl(String prop) { [EOL]     return "var $$PROP_" + prop + "='" + prop + "';"; [EOL] } <line_num>: 376,378
private String formatSetPropFn(String prop) { [EOL]     String mutatorName = "SETPROP_" + prop; [EOL]     String arg1 = mutatorName + "$a"; [EOL]     String arg2 = mutatorName + "$b"; [EOL]     return "function " + mutatorName + "(" + arg1 + "," + arg2 + ") {" + "return " + arg1 + "." + prop + "=" + arg2 + ";}"; [EOL] } <line_num>: 380,386
@Override [EOL] protected CompilerPass getProcessor(Compiler compiler) { [EOL]     AliasExternals ae = new AliasExternals(compiler, compiler.getModuleGraph(), unaliasableGlobals, aliasableGlobals); [EOL]     ae.setRequiredUsage(1); [EOL]     return ae; [EOL] } <line_num>: 388,395
