public RenamePropertiesTest() { [EOL]     super(EXTERNS); [EOL]     enableNormalize(); [EOL] } <line_num>: 42,45
@Override [EOL] protected void tearDown() throws Exception { [EOL]     super.tearDown(); [EOL]     prevUsedPropertyMap = null; [EOL]     useAffinity = false; [EOL] } <line_num>: 47,53
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 55,58
public void testPrototypeProperties() { [EOL]     test("Bar.prototype.getA = function(){}; bar.getA();" + "Bar.prototype.getB = function(){};", "Bar.prototype.a = function(){}; bar.a();" + "Bar.prototype.b = function(){}"); [EOL] } <line_num>: 60,65
public void testPrototypePropertiesAsObjLitKeys1() { [EOL]     test("Bar.prototype = {2: function(){}, getA: function(){}}; bar[2]();", "Bar.prototype = {2: function(){}, a: function(){}}; bar[2]();"); [EOL] } <line_num>: 67,70
public void testPrototypePropertiesAsObjLitKeys2() { [EOL]     testSame("Bar.prototype = {get 2(){}}; bar[2];"); [EOL]     testSame("Bar.prototype = {get 'a'(){}}; bar['a'];"); [EOL]     test("Bar.prototype = {get getA(){}}; bar.getA;", "Bar.prototype = {get a(){}}; bar.a;"); [EOL] } <line_num>: 72,79
public void testPrototypePropertiesAsObjLitKeys3() { [EOL]     testSame("Bar.prototype = {set 2(x){}}; bar[2];"); [EOL]     testSame("Bar.prototype = {set 'a'(x){}}; bar['a'];"); [EOL]     test("Bar.prototype = {set getA(x){}}; bar.getA;", "Bar.prototype = {set a(x){}}; bar.a;"); [EOL] } <line_num>: 81,88
public void testMixedQuotedAndUnquotedObjLitKeys1() { [EOL]     test("Bar = {getA: function(){}, 'getB': function(){}}; bar.getA();", "Bar = {a: function(){}, 'getB': function(){}}; bar.a();"); [EOL] } <line_num>: 90,93
public void testMixedQuotedAndUnquotedObjLitKeys2() { [EOL]     test("Bar = {getA: function(){}, 'getB': function(){}}; bar.getA();", "Bar = {a: function(){}, 'getB': function(){}}; bar.a();"); [EOL] } <line_num>: 95,98
public void testQuotedPrototypeProperty() { [EOL]     testSame("Bar.prototype['getA'] = function(){}; bar['getA']();"); [EOL] } <line_num>: 100,102
public void testOverlappingOriginalAndGeneratedNames() { [EOL]     test("Bar.prototype = {b: function(){}, a: function(){}}; bar.b();", "Bar.prototype = {a: function(){}, b: function(){}}; bar.a();"); [EOL] } <line_num>: 104,107
public void testRenamePropertiesWithLeadingUnderscores() { [EOL]     test("Bar.prototype = {_getA: function(){}, _b: 0}; bar._getA();", "Bar.prototype = {a: function(){}, b: 0}; bar.a();"); [EOL] } <line_num>: 109,112
public void testPropertyAddedToObject() { [EOL]     test("var foo = {}; foo.prop = '';", "var foo = {}; foo.a = '';"); [EOL] } <line_num>: 114,117
public void testPropertyAddedToFunction() { [EOL]     test("var foo = function(){}; foo.prop = '';", "var foo = function(){}; foo.a = '';"); [EOL] } <line_num>: 119,122
public void testPropertyOfObjectOfUnknownType() { [EOL]     test("var foo = x(); foo.prop = '';", "var foo = x(); foo.a = '';"); [EOL] } <line_num>: 124,127
public void testSetPropertyOfThis() { [EOL]     test("this.prop = 'bar'", "this.a = 'bar'"); [EOL] } <line_num>: 129,132
public void testReadPropertyOfThis() { [EOL]     test("f(this.prop);", "f(this.a);"); [EOL] } <line_num>: 134,137
public void testObjectLiteralInLocalScope() { [EOL]     test("function x() { var foo = {prop1: 'bar', prop2: 'baz'}; }", "function x() { var foo = {a: 'bar', b: 'baz'}; }"); [EOL] } <line_num>: 139,142
public void testIncorrectAttemptToAccessQuotedProperty() { [EOL]     test("Bar.prototype = {'B': 0, 'getFoo': function(){}}; bar.getFoo();", "Bar.prototype = {'B': 0, 'getFoo': function(){}}; bar.a();"); [EOL] } <line_num>: 144,148
public void testSetQuotedPropertyOfThis() { [EOL]     testSame("this['prop'] = 'bar';"); [EOL] } <line_num>: 150,152
public void testExternedPropertyName() { [EOL]     test("Bar.prototype = {toString: function(){}, foo: 0}; bar.toString();", "Bar.prototype = {toString: function(){}, a: 0}; bar.toString();"); [EOL] } <line_num>: 154,157
public void testExternedPropertyNameDefinedByObjectLiteral() { [EOL]     test("function x() { var foo = google.gears.factory; }", "function x() { var foo = google.gears.factory; }"); [EOL] } <line_num>: 159,162
public void testAvoidingConflictsBetweenQuotedAndUnquotedPropertyNames() { [EOL]     test("Bar.prototype.foo = function(){}; Bar.prototype['a'] = 0; bar.foo();", "Bar.prototype.b = function(){}; Bar.prototype['a'] = 0; bar.b();"); [EOL] } <line_num>: 164,167
public void testSamePropertyNameQuotedAndUnquoted() { [EOL]     test("Bar.prototype.prop = function(){}; y = {'prop': 0};", "Bar.prototype.a = function(){}; y = {'prop': 0};"); [EOL] } <line_num>: 169,172
public void testStaticAndInstanceMethodWithSameName() { [EOL]     test("Bar = function(){}; Bar.getA = function(){}; " + "Bar.prototype.getA = function(){}; Bar.getA(); bar.getA();", "Bar = function(){}; Bar.a = function(){}; " + "Bar.prototype.a = function(){}; Bar.a(); bar.a();"); [EOL] } <line_num>: 174,179
public void testRenamePropertiesFunctionCall1() { [EOL]     test("var foo = {myProp: 0}; f(foo[JSCompiler_renameProperty('myProp')]);", "var foo = {a: 0}; f(foo['a']);"); [EOL] } <line_num>: 181,184
public void testRenamePropertiesFunctionCall2() { [EOL]     test("var foo = {myProp: 0}; " + "f(JSCompiler_renameProperty('otherProp.myProp.someProp')); " + "foo.myProp = 1; foo.theirProp = 2; foo.yourProp = 3;", "var foo = {a: 0}; f('b.a.c'); " + "foo.a = 1; foo.d = 2; foo.e = 3;"); [EOL] } <line_num>: 186,192
public void testRemoveRenameFunctionStubs1() { [EOL]     test("function JSCompiler_renameProperty(x) { return x; }", ""); [EOL] } <line_num>: 194,197
public void testRemoveRenameFunctionStubs2() { [EOL]     test("function JSCompiler_renameProperty(x) { return x; }" + "var foo = {myProp: 0}; f(foo[JSCompiler_renameProperty('myProp')]);", "var foo = {a: 0}; f(foo['a']);"); [EOL] } <line_num>: 199,203
public void testGeneratePseudoNames() { [EOL]     generatePseudoNames = true; [EOL]     test("var foo={}; foo.bar=1; foo['abc']=2", "var foo={}; foo.$bar$=1; foo['abc']=2"); [EOL]     generatePseudoNames = false; [EOL] } <line_num>: 205,210
public void testModules() { [EOL]     String module1Js = "function Bar(){} Bar.prototype.getA=function(x){};" + "var foo;foo.getA(foo);foo.doo=foo;foo.bloo=foo;"; [EOL]     String module2Js = "function Far(){} Far.prototype.getB=function(x){};" + "var too;too.getB(too);too.woo=too;too.bloo=too;"; [EOL]     String module3Js = "function Car(){} Car.prototype.getC=function(x){};" + "var noo;noo.getC(noo);noo.zoo=noo;noo.cloo=noo;"; [EOL]     JSModule module1 = new JSModule("m1"); [EOL]     module1.add(SourceFile.fromCode("input1", module1Js)); [EOL]     JSModule module2 = new JSModule("m2"); [EOL]     module2.add(SourceFile.fromCode("input2", module2Js)); [EOL]     JSModule module3 = new JSModule("m3"); [EOL]     module3.add(SourceFile.fromCode("input3", module3Js)); [EOL]     JSModule[] modules = new JSModule[] { module1, module2, module3 }; [EOL]     Compiler compiler = compileModules("", modules); [EOL]     Result result = compiler.getResult(); [EOL]     assertTrue(result.success); [EOL]     assertEquals("function Bar(){}Bar.prototype.b=function(x){};" + "var foo;foo.b(foo);foo.f=foo;foo.a=foo;", compiler.toSource(module1)); [EOL]     assertEquals("function Far(){}Far.prototype.c=function(x){};" + "var too;too.c(too);too.g=too;too.a=too;", compiler.toSource(module2)); [EOL]     assertEquals("function Car(){}Car.prototype.d=function(x){};" + "var noo;noo.d(noo);noo.h=noo;noo.e=noo;", compiler.toSource(module3)); [EOL] } <line_num>: 212,254
public void testPropertyAffinity() { [EOL]     useAffinity = true; [EOL]     test("var foo={};foo.x=1;foo.y=2;foo.z=3;" + "function f1() { foo.z; foo.z; foo.z; foo.y}" + "function f2() {                      foo.x}", "var foo={};foo.c=1;foo.b=2;foo.a=3;" + "function f1() { foo.a; foo.a; foo.a; foo.b}" + "function f2() {                      foo.c}"); [EOL]     test("var foo={};foo.x=1;foo.y=2;foo.z=3;" + "function f1() { foo.z; foo.z; foo.z; foo.y}" + "function f2() { foo.z; foo.z; foo.z; foo.x}", "var foo={};foo.b=1;foo.c=2;foo.a=3;" + "function f1() { foo.a; foo.a; foo.a; foo.c}" + "function f2() { foo.a; foo.a; foo.a; foo.b}"); [EOL] } <line_num>: 256,277
public void testPropertyAffinityOff() { [EOL]     useAffinity = false; [EOL]     test("var foo={};foo.x=1;foo.y=2;foo.z=3;" + "function f1() { foo.z; foo.z; foo.z; foo.y}" + "function f2() {                      foo.x}", "var foo={};foo.b=1;foo.c=2;foo.a=3;" + "function f1() { foo.a; foo.a; foo.a; foo.c}" + "function f2() {                      foo.b}"); [EOL]     test("var foo={};foo.x=1;foo.y=2;foo.z=3;" + "function f1() { foo.z; foo.z; foo.z; foo.y}" + "function f2() { foo.z; foo.z; foo.z; foo.x}", "var foo={};foo.b=1;foo.c=2;foo.a=3;" + "function f1() { foo.a; foo.a; foo.a; foo.c}" + "function f2() { foo.a; foo.a; foo.a; foo.b}"); [EOL] } <line_num>: 279,298
public void testPrototypePropertiesStable() { [EOL]     testStableRenaming("Bar.prototype.getA = function(){}; bar.getA();" + "Bar.prototype.getB = function(){};", "Bar.prototype.a = function(){}; bar.a();" + "Bar.prototype.b = function(){}", "Bar.prototype.get = function(){}; bar.get();" + "Bar.prototype.getA = function(){}; bar.getA();" + "Bar.prototype.getB = function(){};", "Bar.prototype.c = function(){}; bar.c();" + "Bar.prototype.a = function(){}; bar.a();" + "Bar.prototype.b = function(){}"); [EOL] } <line_num>: 300,312
public void testPrototypePropertiesAsObjLitKeysStable() { [EOL]     testStableRenaming("Bar.prototype = {2: function(){}, getA: function(){}}; bar[2]();", "Bar.prototype = {2: function(){}, a: function(){}}; bar[2]();", "Bar.prototype = {getB: function(){},getA: function(){}}; bar.getB();", "Bar.prototype = {b: function(){},a: function(){}}; bar.b();"); [EOL] } <line_num>: 314,320
public void testMixedQuotedAndUnquotedObjLitKeysStable() { [EOL]     testStableRenaming("Bar = {getA: function(){}, 'getB': function(){}}; bar.getA();", "Bar = {a: function(){}, 'getB': function(){}}; bar.a();", "Bar = {get: function(){}, getA: function(){}, 'getB': function(){}};" + "bar.getA();bar.get();", "Bar = {b: function(){}, a: function(){}, 'getB': function(){}};" + "bar.a();bar.b();"); [EOL] } <line_num>: 322,330
public void testOverlappingOriginalAndGeneratedNamesStable() { [EOL]     testStableRenaming("Bar.prototype = {b: function(){}, a: function(){}}; bar.b();", "Bar.prototype = {a: function(){}, b: function(){}}; bar.a();", "Bar.prototype = {c: function(){}, b: function(){}, a: function(){}};" + "bar.b();", "Bar.prototype = {c: function(){}, a: function(){}, b: function(){}};" + "bar.a();"); [EOL] } <line_num>: 332,340
public void testStableWithTrickyExternsChanges() { [EOL]     test("Bar.prototype = {b: function(){}, a: function(){}}; bar.b();", "Bar.prototype = {a: function(){}, b: function(){}}; bar.a();"); [EOL]     prevUsedPropertyMap = renameProperties.getPropertyMap(); [EOL]     String externs = EXTERNS + "prop.b;"; [EOL]     test(externs, "Bar.prototype = {new_f: function(){}, b: function(){}, " + "a: function(){}};bar.b();", "Bar.prototype = {c:function(){}, b:function(){}, a:function(){}};" + "bar.b();", null, null); [EOL] } <line_num>: 342,352
public void testRenamePropertiesWithLeadingUnderscoresStable() { [EOL]     testStableRenaming("Bar.prototype = {_getA: function(){}, _b: 0}; bar._getA();", "Bar.prototype = {a: function(){}, b: 0}; bar.a();", "Bar.prototype = {_getA: function(){}, _c: 1, _b: 0}; bar._getA();", "Bar.prototype = {a: function(){}, c: 1,  b: 0}; bar.a();"); [EOL] } <line_num>: 354,360
public void testPropertyAddedToObjectStable() { [EOL]     testStableRenaming("var foo = {}; foo.prop = '';", "var foo = {}; foo.a = '';", "var foo = {}; foo.prop = ''; foo.a='';", "var foo = {}; foo.a = ''; foo.b='';"); [EOL] } <line_num>: 362,367
public void testAvoidingConflictsBetQuotedAndUnquotedPropertyNamesStable() { [EOL]     testStableRenaming("Bar.prototype.foo = function(){}; Bar.prototype['b'] = 0; bar.foo();", "Bar.prototype.a = function(){}; Bar.prototype['b'] = 0; bar.a();", "Bar.prototype.foo = function(){}; Bar.prototype['a'] = 0; bar.foo();", "Bar.prototype.b = function(){}; Bar.prototype['a'] = 0; bar.b();"); [EOL] } <line_num>: 369,375
public void testRenamePropertiesFunctionCallStable() { [EOL]     testStableRenaming("var foo = {myProp: 0}; " + "f(JSCompiler_renameProperty('otherProp.myProp.someProp')); " + "foo.myProp = 1; foo.theirProp = 2; foo.yourProp = 3;", "var foo = {a: 0}; f('b.a.c'); " + "foo.a = 1; foo.d = 2; foo.e = 3;", "var bar = {newProp: 0}; var foo = {myProp: 0}; " + "f(JSCompiler_renameProperty('otherProp.myProp.someProp')); " + "foo.myProp = 1; foo.theirProp = 2; foo.yourProp = 3;", "var bar = {f: 0}; var foo = {a: 0}; f('b.a.c'); " + "foo.a = 1; foo.d = 2; foo.e = 3;"); [EOL] } <line_num>: 377,389
private void testStableRenaming(String input1, String expected1, String input2, String expected2) { [EOL]     test(input1, expected1); [EOL]     prevUsedPropertyMap = renameProperties.getPropertyMap(); [EOL]     test(input2, expected2); [EOL] } <line_num>: 391,396
private Compiler compileModules(String externs, JSModule[] modules) { [EOL]     SourceFile externsInput = SourceFile.fromCode("externs", externs); [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     options.propertyRenaming = PropertyRenamingPolicy.ALL_UNQUOTED; [EOL]     Compiler compiler = new Compiler(); [EOL]     compiler.compileModules(ImmutableList.of(externsInput), Lists.newArrayList(modules), options); [EOL]     return compiler; [EOL] } <line_num>: 398,408
@Override [EOL] public CompilerPass getProcessor(Compiler compiler) { [EOL]     return renameProperties = new RenameProperties(compiler, useAffinity, generatePseudoNames, prevUsedPropertyMap); [EOL] } <line_num>: 410,415
