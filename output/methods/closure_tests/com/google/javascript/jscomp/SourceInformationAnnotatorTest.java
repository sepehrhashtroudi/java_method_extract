@Override [EOL] public void process(Node externs, Node root) { [EOL]     NodeTraversal.traverse(compiler, root, new SourceInformationAnnotator("", false)); [EOL] } <line_num>: 30,34
@Override [EOL] protected CompilerPass getProcessor(final Compiler compiler) { [EOL]     return new CompilerPass() { [EOL]  [EOL]         @Override [EOL]         public void process(Node externs, Node root) { [EOL]             NodeTraversal.traverse(compiler, root, new SourceInformationAnnotator("", false)); [EOL]         } [EOL]     }; [EOL] } <line_num>: 27,35
public void testPreserveAnnotatedName() { [EOL]     Node root = new Node(Token.SCRIPT); [EOL]     Node name = Node.newString("foo"); [EOL]     name.putProp(Node.ORIGINALNAME_PROP, "bar"); [EOL]     root.addChildToBack(name); [EOL]     NodeTraversal.traverse(null, root, new SourceInformationAnnotator("", false)); [EOL]     assertEquals(name.getProp(Node.ORIGINALNAME_PROP), "bar"); [EOL] } <line_num>: 37,46
