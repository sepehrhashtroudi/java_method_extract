public void testVarAndOptionalParams() { [EOL]     Node args = new Node(Token.PARAM_LIST, Node.newString(Token.NAME, "a"), Node.newString(Token.NAME, "b")); [EOL]     Node optArgs = new Node(Token.PARAM_LIST, Node.newString(Token.NAME, "opt_a"), Node.newString(Token.NAME, "opt_b")); [EOL]     assertFalse(conv.isVarArgsParameter(args.getFirstChild())); [EOL]     assertFalse(conv.isVarArgsParameter(args.getLastChild())); [EOL]     assertFalse(conv.isVarArgsParameter(optArgs.getFirstChild())); [EOL]     assertFalse(conv.isVarArgsParameter(optArgs.getLastChild())); [EOL]     assertFalse(conv.isOptionalParameter(args.getFirstChild())); [EOL]     assertFalse(conv.isOptionalParameter(args.getLastChild())); [EOL]     assertFalse(conv.isOptionalParameter(optArgs.getFirstChild())); [EOL]     assertFalse(conv.isOptionalParameter(optArgs.getLastChild())); [EOL] } <line_num>: 34,51
public void testInlineName() { [EOL]     assertFalse(conv.isConstant("a")); [EOL]     assertFalse(conv.isConstant("XYZ123_")); [EOL]     assertFalse(conv.isConstant("ABC")); [EOL]     assertFalse(conv.isConstant("ABCdef")); [EOL]     assertFalse(conv.isConstant("aBC")); [EOL]     assertFalse(conv.isConstant("A")); [EOL]     assertFalse(conv.isConstant("_XYZ123")); [EOL]     assertFalse(conv.isConstant("a$b$XYZ123_")); [EOL]     assertFalse(conv.isConstant("a$b$ABC_DEF")); [EOL]     assertFalse(conv.isConstant("a$b$A")); [EOL]     assertFalse(conv.isConstant("a$b$a")); [EOL]     assertFalse(conv.isConstant("a$b$ABCdef")); [EOL]     assertFalse(conv.isConstant("a$b$aBC")); [EOL]     assertFalse(conv.isConstant("a$b$")); [EOL]     assertFalse(conv.isConstant("$")); [EOL] } <line_num>: 53,69
public void testExportedName() { [EOL]     assertFalse(conv.isExported("_a")); [EOL]     assertFalse(conv.isExported("_a_")); [EOL]     assertFalse(conv.isExported("a")); [EOL]     assertFalse(conv.isExported("$super", false)); [EOL]     assertTrue(conv.isExported("$super", true)); [EOL]     assertTrue(conv.isExported("$super")); [EOL] } <line_num>: 71,79
public void testPrivateName() { [EOL]     assertFalse(conv.isPrivate("a_")); [EOL]     assertFalse(conv.isPrivate("a")); [EOL]     assertFalse(conv.isPrivate("_a_")); [EOL] } <line_num>: 81,85
public void testEnumKey() { [EOL]     assertTrue(conv.isValidEnumKey("A")); [EOL]     assertTrue(conv.isValidEnumKey("123")); [EOL]     assertTrue(conv.isValidEnumKey("FOO_BAR")); [EOL]     assertTrue(conv.isValidEnumKey("a")); [EOL]     assertTrue(conv.isValidEnumKey("someKeyInCamelCase")); [EOL]     assertTrue(conv.isValidEnumKey("_FOO_BAR")); [EOL] } <line_num>: 87,95
public void testInheritanceDetection1() { [EOL]     assertNotClassDefining("goog.foo(A, B);"); [EOL] } <line_num>: 97,99
public void testInheritanceDetection2() { [EOL]     assertDefinesClasses("goog.inherits(A, B);", "A", "B"); [EOL] } <line_num>: 101,103
public void testInheritanceDetection3() { [EOL]     assertDefinesClasses("A.inherits(B);", "A", "B"); [EOL] } <line_num>: 105,107
public void testInheritanceDetection4() { [EOL]     assertDefinesClasses("goog.inherits(goog.A, goog.B);", "goog.A", "goog.B"); [EOL] } <line_num>: 109,111
public void testInheritanceDetection5() { [EOL]     assertDefinesClasses("goog.A.inherits(goog.B);", "goog.A", "goog.B"); [EOL] } <line_num>: 113,115
public void testInheritanceDetection6() { [EOL]     assertNotClassDefining("A.inherits(this.B);"); [EOL] } <line_num>: 117,119
public void testInheritanceDetection7() { [EOL]     assertNotClassDefining("this.A.inherits(B);"); [EOL] } <line_num>: 121,123
public void testInheritanceDetection8() { [EOL]     assertNotClassDefining("goog.inherits(A, B, C);"); [EOL] } <line_num>: 125,127
public void testInheritanceDetection9() { [EOL]     assertDefinesClasses("A.mixin(B.prototype);", "A", "B"); [EOL] } <line_num>: 129,132
public void testInheritanceDetection10() { [EOL]     assertDefinesClasses("goog.mixin(A.prototype, B.prototype);", "A", "B"); [EOL] } <line_num>: 134,137
public void testInheritanceDetection11() { [EOL]     assertNotClassDefining("A.mixin(B)"); [EOL] } <line_num>: 139,141
public void testInheritanceDetection12() { [EOL]     assertNotClassDefining("goog.mixin(A.prototype, B)"); [EOL] } <line_num>: 143,145
public void testInheritanceDetection13() { [EOL]     assertNotClassDefining("goog.mixin(A, B)"); [EOL] } <line_num>: 147,149
public void testInheritanceDetection14() { [EOL]     assertNotClassDefining("goog$mixin((function(){}).prototype)"); [EOL] } <line_num>: 151,153
public void testInheritanceDetectionPostCollapseProperties() { [EOL]     assertDefinesClasses("goog$inherits(A, B);", "A", "B"); [EOL]     assertNotClassDefining("goog$inherits(A);"); [EOL] } <line_num>: 155,158
public void testObjectLiteralCast() { [EOL]     assertNotObjectLiteralCast("goog.reflect.object();"); [EOL]     assertNotObjectLiteralCast("goog.reflect.object(A);"); [EOL]     assertNotObjectLiteralCast("goog.reflect.object(1, {});"); [EOL]     assertObjectLiteralCast("goog.reflect.object(A, {});"); [EOL] } <line_num>: 160,165
public void testFunctionBind() { [EOL]     assertNotFunctionBind("goog.bind()"); [EOL]     assertFunctionBind("goog.bind(f)"); [EOL]     assertFunctionBind("goog.bind(f, obj)"); [EOL]     assertFunctionBind("goog.bind(f, obj, p1)"); [EOL]     assertNotFunctionBind("goog$bind()"); [EOL]     assertFunctionBind("goog$bind(f)"); [EOL]     assertFunctionBind("goog$bind(f, obj)"); [EOL]     assertFunctionBind("goog$bind(f, obj, p1)"); [EOL]     assertNotFunctionBind("goog.partial()"); [EOL]     assertFunctionBind("goog.partial(f)"); [EOL]     assertFunctionBind("goog.partial(f, obj)"); [EOL]     assertFunctionBind("goog.partial(f, obj, p1)"); [EOL]     assertNotFunctionBind("goog$partial()"); [EOL]     assertFunctionBind("goog$partial(f)"); [EOL]     assertFunctionBind("goog$partial(f, obj)"); [EOL]     assertFunctionBind("goog$partial(f, obj, p1)"); [EOL]     assertFunctionBind("(function(){}).bind()"); [EOL]     assertFunctionBind("(function(){}).bind(obj)"); [EOL]     assertFunctionBind("(function(){}).bind(obj, p1)"); [EOL]     assertNotFunctionBind("Function.prototype.bind.call()"); [EOL]     assertFunctionBind("Function.prototype.bind.call(obj)"); [EOL]     assertFunctionBind("Function.prototype.bind.call(obj, p1)"); [EOL] } <line_num>: 167,195
public void testRequire() { [EOL]     assertRequire("goog.require('foo')"); [EOL]     assertNotRequire("goog.require(foo)"); [EOL]     assertNotRequire("goog.require()"); [EOL]     assertNotRequire("foo()"); [EOL] } <line_num>: 197,202
public void testApplySubclassRelationship() { [EOL]     JSTypeRegistry registry = new JSTypeRegistry(null); [EOL]     Node nodeA = new Node(Token.FUNCTION); [EOL]     FunctionType ctorA = registry.createConstructorType("A", nodeA, new Node(Token.PARAM_LIST), null, null); [EOL]     Node nodeB = new Node(Token.FUNCTION); [EOL]     FunctionType ctorB = registry.createConstructorType("B", nodeB, new Node(Token.PARAM_LIST), null, null); [EOL]     conv.applySubclassRelationship(ctorA, ctorB, SubclassType.INHERITS); [EOL]     assertTrue(ctorB.getPrototype().hasOwnProperty("constructor")); [EOL]     assertEquals(nodeB, ctorB.getPrototype().getPropertyNode("constructor")); [EOL]     assertTrue(ctorB.hasOwnProperty("superClass_")); [EOL]     assertEquals(nodeB, ctorB.getPropertyNode("superClass_")); [EOL] } <line_num>: 204,222
private void assertFunctionBind(String code) { [EOL]     Node n = parseTestCode(code); [EOL]     assertNotNull(conv.describeFunctionBind(n.getFirstChild())); [EOL] } <line_num>: 224,227
private void assertNotFunctionBind(String code) { [EOL]     Node n = parseTestCode(code); [EOL]     assertNull(conv.describeFunctionBind(n.getFirstChild())); [EOL] } <line_num>: 229,232
private void assertRequire(String code) { [EOL]     Node n = parseTestCode(code); [EOL]     assertNotNull(conv.extractClassNameIfRequire(n.getFirstChild(), n)); [EOL] } <line_num>: 234,237
private void assertNotRequire(String code) { [EOL]     Node n = parseTestCode(code); [EOL]     assertNull(conv.extractClassNameIfRequire(n.getFirstChild(), n)); [EOL] } <line_num>: 239,242
private void assertNotObjectLiteralCast(String code) { [EOL]     Node n = parseTestCode(code); [EOL]     assertNull(conv.getObjectLiteralCast(n.getFirstChild())); [EOL] } <line_num>: 244,247
private void assertObjectLiteralCast(String code) { [EOL]     Node n = parseTestCode(code); [EOL]     assertNotNull(conv.getObjectLiteralCast(n.getFirstChild())); [EOL] } <line_num>: 249,252
private void assertNotClassDefining(String code) { [EOL]     Node n = parseTestCode(code); [EOL]     assertNull(conv.getClassesDefinedByCall(n.getFirstChild())); [EOL] } <line_num>: 254,257
private void assertDefinesClasses(String code, String subclassName, String superclassName) { [EOL]     Node n = parseTestCode(code); [EOL]     SubclassRelationship classes = conv.getClassesDefinedByCall(n.getFirstChild()); [EOL]     assertNotNull(classes); [EOL]     assertEquals(subclassName, classes.subclassName); [EOL]     assertEquals(superclassName, classes.superclassName); [EOL] } <line_num>: 259,267
private Node parseTestCode(String code) { [EOL]     Compiler compiler = new Compiler(); [EOL]     return compiler.parseTestCode(code).getFirstChild(); [EOL] } <line_num>: 269,272
