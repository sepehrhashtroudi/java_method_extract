public MarkNoSideEffectCallsTest() { [EOL]     super(kExterns); [EOL] } <line_num>: 47,49
NoSideEffectCallEnumerator(Compiler compiler) { [EOL]     this.passUnderTest = new MarkNoSideEffectCalls(compiler); [EOL]     this.compiler = compiler; [EOL] } <line_num>: 279,282
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 51,55
@Override [EOL] protected void tearDown() throws Exception { [EOL]     super.tearDown(); [EOL]     noSideEffectCalls.clear(); [EOL] } <line_num>: 57,61
public void testFunctionAnnotation() throws Exception { [EOL]     testMarkCalls("/**@nosideeffects*/function f(){}", "f()", ImmutableList.of("f")); [EOL]     testMarkCalls("/**@nosideeffects*/var f = function(){};", "f()", ImmutableList.of("f")); [EOL]     testMarkCalls("var f = /**@nosideeffects*/function(){};", "f()", ImmutableList.of("f")); [EOL]     testMarkCalls("var f; f = /**@nosideeffects*/function(){};", "f()", ImmutableList.of("f")); [EOL]     testMarkCalls("var f; /**@nosideeffects*/ f = function(){};", "f()", ImmutableList.of("f")); [EOL]     testMarkCalls("function f(){}", Collections.<String>emptyList()); [EOL]     testMarkCalls("function f(){} f()", Collections.<String>emptyList()); [EOL]     testMarkCalls("/**@nosideeffects*/var f = " + "/**@nosideeffects*/function(){};", "f()", ImmutableList.of("f")); [EOL] } <line_num>: 63,84
public void testNamespaceAnnotation() throws Exception { [EOL]     testMarkCalls("var o = {}; o.f = /**@nosideeffects*/function(){};", "o.f()", ImmutableList.of("o.f")); [EOL]     testMarkCalls("var o = {}; o.f = /**@nosideeffects*/function(){};", "o.f()", ImmutableList.of("o.f")); [EOL]     testMarkCalls("var o = {}; o.f = function(){}; o.f()", Collections.<String>emptyList()); [EOL] } <line_num>: 86,93
public void testConstructorAnnotation() throws Exception { [EOL]     testMarkCalls("/**@nosideeffects*/function c(){};", "new c", ImmutableList.of("c")); [EOL]     testMarkCalls("var c = /**@nosideeffects*/function(){};", "new c", ImmutableList.of("c")); [EOL]     testMarkCalls("/**@nosideeffects*/var c = function(){};", "new c", ImmutableList.of("c")); [EOL]     testMarkCalls("function c(){}; new c", Collections.<String>emptyList()); [EOL] } <line_num>: 95,103
public void testMultipleDefinition() throws Exception { [EOL]     testMarkCalls("/**@nosideeffects*/function f(){}" + "/**@nosideeffects*/f = function(){};", "f()", ImmutableList.of("f")); [EOL]     testMarkCalls("function f(){}" + "/**@nosideeffects*/f = function(){};", "f()", Collections.<String>emptyList()); [EOL]     testMarkCalls("/**@nosideeffects*/function f(){}", "f = function(){};" + "f()", Collections.<String>emptyList()); [EOL] } <line_num>: 105,118
public void testAssignNoFunction() throws Exception { [EOL]     testMarkCalls("/**@nosideeffects*/function f(){}", "f = 1; f()", ImmutableList.of("f")); [EOL]     testMarkCalls("/**@nosideeffects*/function f(){}", "f = 1 || 2; f()", Collections.<String>emptyList()); [EOL] } <line_num>: 120,125
public void testPrototype() throws Exception { [EOL]     testMarkCalls("function c(){};" + "/**@nosideeffects*/c.prototype.g = function(){};", "var o = new c; o.g()", ImmutableList.of("o.g")); [EOL]     testMarkCalls("function c(){};" + "/**@nosideeffects*/c.prototype.g = function(){};", "function f(){}" + "var o = new c; o.g(); f()", ImmutableList.of("o.g")); [EOL]     testMarkCalls("function c(){};" + "/**@nosideeffects*/c.prototype.g = function(){};", "var o = new c;" + "o.g = function(){};" + "o.g()", ImmutableList.<String>of()); [EOL]     testMarkCalls("function c1(){};" + "/**@nosideeffects*/c1.prototype.f = function(){};" + "function c2(){};" + "/**@nosideeffects*/c2.prototype.f = function(){};", "var o = new c1;" + "o.f()", ImmutableList.of("o.f")); [EOL]     testMarkCalls("function c1(){};" + "/**@nosideeffects*/c1.prototype.f = function(){};", "function c2(){};" + "c2.prototype.f = function(){};" + "var o = new c1;" + "o.f()", Collections.<String>emptyList()); [EOL] } <line_num>: 127,162
public void testAnnotationInExterns() throws Exception { [EOL]     testMarkCalls("externSef1()", Collections.<String>emptyList()); [EOL]     testMarkCalls("externSef2()", Collections.<String>emptyList()); [EOL]     testMarkCalls("externNsef1()", ImmutableList.of("externNsef1")); [EOL]     testMarkCalls("externNsef2()", ImmutableList.of("externNsef2")); [EOL]     testMarkCalls("externNsef3()", ImmutableList.of("externNsef3")); [EOL] } <line_num>: 164,170
public void testNamespaceAnnotationInExterns() throws Exception { [EOL]     testMarkCalls("externObj.sef1()", Collections.<String>emptyList()); [EOL]     testMarkCalls("externObj.sef2()", Collections.<String>emptyList()); [EOL]     testMarkCalls("externObj.nsef1()", ImmutableList.of("externObj.nsef1")); [EOL]     testMarkCalls("externObj.nsef2()", ImmutableList.of("externObj.nsef2")); [EOL]     testMarkCalls("externObj.nsef3()", ImmutableList.of("externObj.nsef3")); [EOL] } <line_num>: 172,179
public void testOverrideDefinitionInSource() throws Exception { [EOL]     testMarkCalls("var obj = {}; obj.sef1 = function(){}; obj.sef1()", Collections.<String>emptyList()); [EOL]     testMarkCalls("var obj = {};" + "/**@nosideeffects*/obj.sef1 = function(){};", "obj.sef1()", Collections.<String>emptyList()); [EOL]     testMarkCalls("var obj = {}; obj.nsef1 = function(){}; obj.nsef1()", Collections.<String>emptyList()); [EOL]     testMarkCalls("var obj = {};" + "/**@nosideeffects*/obj.nsef1 = function(){};", "obj.nsef1()", ImmutableList.of("obj.nsef1")); [EOL] } <line_num>: 181,201
public void testApply1() throws Exception { [EOL]     testMarkCalls("/**@nosideeffects*/ var f = function() {}", "f.apply()", ImmutableList.of("f.apply")); [EOL] } <line_num>: 203,207
public void testApply2() throws Exception { [EOL]     testMarkCalls("var f = function() {}", "f.apply()", ImmutableList.<String>of()); [EOL] } <line_num>: 209,213
public void testCall1() throws Exception { [EOL]     testMarkCalls("/**@nosideeffects*/ var f = function() {}", "f.call()", ImmutableList.of("f.call")); [EOL] } <line_num>: 215,219
public void testCall2() throws Exception { [EOL]     testMarkCalls("var f = function() {}", "f.call()", ImmutableList.<String>of()); [EOL] } <line_num>: 221,225
public void testInvalidAnnotation1() throws Exception { [EOL]     test("/** @nosideeffects */ function foo() {}", null, INVALID_NO_SIDE_EFFECT_ANNOTATION); [EOL] } <line_num>: 227,230
public void testInvalidAnnotation2() throws Exception { [EOL]     test("var f = /** @nosideeffects */ function() {}", null, INVALID_NO_SIDE_EFFECT_ANNOTATION); [EOL] } <line_num>: 232,235
public void testInvalidAnnotation3() throws Exception { [EOL]     test("/** @nosideeffects */ var f = function() {}", null, INVALID_NO_SIDE_EFFECT_ANNOTATION); [EOL] } <line_num>: 237,240
public void testInvalidAnnotation4() throws Exception { [EOL]     test("var f = function() {};" + "/** @nosideeffects */ f.x = function() {}", null, INVALID_NO_SIDE_EFFECT_ANNOTATION); [EOL] } <line_num>: 242,246
public void testInvalidAnnotation5() throws Exception { [EOL]     test("var f = function() {};" + "f.x = /** @nosideeffects */ function() {}", null, INVALID_NO_SIDE_EFFECT_ANNOTATION); [EOL] } <line_num>: 248,252
void testMarkCalls(String source, List<String> expected) { [EOL]     testMarkCalls("", source, expected); [EOL] } <line_num>: 254,256
void testMarkCalls(String extraExterns, String source, List<String> expected) { [EOL]     testSame(kExterns + extraExterns, source, null); [EOL]     assertEquals(expected, noSideEffectCalls); [EOL]     noSideEffectCalls.clear(); [EOL] } <line_num>: 258,263
@Override [EOL] protected CompilerPass getProcessor(Compiler compiler) { [EOL]     return new NoSideEffectCallEnumerator(compiler); [EOL] } <line_num>: 265,268
@Override [EOL] public void process(Node externs, Node root) { [EOL]     passUnderTest.process(externs, root); [EOL]     NodeTraversal.traverse(compiler, externs, this); [EOL]     NodeTraversal.traverse(compiler, root, this); [EOL] } <line_num>: 284,289
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (n.isNew()) { [EOL]         if (!NodeUtil.constructorCallHasSideEffects(n)) { [EOL]             noSideEffectCalls.add(n.getFirstChild().getQualifiedName()); [EOL]         } [EOL]     } else if (n.isCall()) { [EOL]         if (!NodeUtil.functionCallHasSideEffects(n)) { [EOL]             noSideEffectCalls.add(n.getFirstChild().getQualifiedName()); [EOL]         } [EOL]     } [EOL] } <line_num>: 291,302
