public InlineVariablesConstantsTest() { [EOL]     enableNormalize(); [EOL] } <line_num>: 28,30
@Override [EOL] protected CompilerPass getProcessor(final Compiler compiler) { [EOL]     return new InlineVariables(compiler, InlineVariables.Mode.CONSTANTS_ONLY, inlineAllStrings); [EOL] } <line_num>: 32,36
@Override [EOL] public void tearDown() { [EOL]     inlineAllStrings = false; [EOL] } <line_num>: 38,41
public void testInlineVariablesConstants() { [EOL]     test("var ABC=2; var x = ABC;", "var x=2"); [EOL]     test("var AA = 'aa'; AA;", "'aa'"); [EOL]     test("var A_A=10; A_A + A_A;", "10+10"); [EOL]     test("var AA=1", ""); [EOL]     test("var AA; AA=1", "1"); [EOL]     test("var AA; if (false) AA=1; AA;", "if (false) 1; 1;"); [EOL]     testSame("var AA; if (false) AA=1; else AA=2; AA;"); [EOL]     test("var AA;(function () {AA=1})()", "(function () {1})()"); [EOL]     testSame("var x = AA;"); [EOL]     testSame("var AA = '1234567890'; foo(AA); foo(AA); foo(AA);"); [EOL]     test("var AA = '123456789012345';AA;", "'123456789012345'"); [EOL] } <line_num>: 43,63
public void testNoInlineArraysOrRegexps() { [EOL]     testSame("var AA = [10,20]; AA[0]"); [EOL]     testSame("var AA = [10,20]; AA.push(1); AA[0]"); [EOL]     testSame("var AA = /x/; AA.test('1')"); [EOL]     testSame("/** @const */ var aa = /x/; aa.test('1')"); [EOL] } <line_num>: 65,70
public void testInlineVariablesConstantsJsDocStyle() { [EOL]     test("/** @const */var abc=2; var x = abc;", "var x=2"); [EOL]     test("/** @const */var aa = 'aa'; aa;", "'aa'"); [EOL]     test("/** @const */var a_a=10; a_a + a_a;", "10+10"); [EOL]     test("/** @const */var aa=1;", ""); [EOL]     test("/** @const */var aa; aa=1;", "1"); [EOL]     test("/** @const */var aa;(function () {aa=1})()", "(function () {1})()"); [EOL]     test("/** @const */var aa;(function () {aa=1})(); var z=aa", "(function () {1})(); var z=1"); [EOL]     testSame("/** @const */var aa;(function () {var y; aa=y})(); var z=aa"); [EOL]     testSame("/** @const */var aa = '1234567890'; foo(aa); foo(aa); foo(aa);"); [EOL]     test("/** @const */var aa = '123456789012345';aa;", "'123456789012345'"); [EOL] } <line_num>: 72,88
public void testInlineConditionallyDefinedConstant1() { [EOL]     test("if (x) var ABC = 2; if (y) f(ABC);", "if (x); if (y) f(2);"); [EOL] } <line_num>: 90,97
public void testInlineConditionallyDefinedConstant2() { [EOL]     test("if (x); else var ABC = 2; if (y) f(ABC);", "if (x); else; if (y) f(2);"); [EOL] } <line_num>: 99,102
public void testInlineConditionallyDefinedConstant3() { [EOL]     test("if (x) { var ABC = 2; } if (y) { f(ABC); }", "if (x) {} if (y) { f(2); }"); [EOL] } <line_num>: 104,107
public void testInlineDefinedConstant() { [EOL]     test("/**\n" + " * @define {string}\n" + " */\n" + "var aa = '1234567890';\n" + "foo(aa); foo(aa); foo(aa);", "foo('1234567890');foo('1234567890');foo('1234567890')"); [EOL]     test("/**\n" + " * @define {string}\n" + " */\n" + "var ABC = '1234567890';\n" + "foo(ABC); foo(ABC); foo(ABC);", "foo('1234567890');foo('1234567890');foo('1234567890')"); [EOL] } <line_num>: 109,125
public void testInlineVariablesConstantsWithInlineAllStringsOn() { [EOL]     inlineAllStrings = true; [EOL]     test("var AA = '1234567890'; foo(AA); foo(AA); foo(AA);", "foo('1234567890'); foo('1234567890'); foo('1234567890')"); [EOL] } <line_num>: 127,131
public void testNoInlineWithoutConstDeclaration() { [EOL]     testSame("var abc = 2; var x = abc;"); [EOL] } <line_num>: 133,135
public void testNoInlineAliases() { [EOL]     testSame("var XXX = new Foo(); var yyy = XXX; bar(yyy)"); [EOL]     testSame("var xxx = new Foo(); var YYY = xxx; bar(YYY)"); [EOL] } <line_num>: 143,146
