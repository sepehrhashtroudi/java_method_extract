public InstrumentFunctionsTest() { [EOL]     this.instrumentationPb = null; [EOL] } <line_num>: 32,34
NameAndInstrumentFunctions(Compiler compiler) { [EOL]     this.compiler = compiler; [EOL] } <line_num>: 247,249
@Override [EOL] protected void setUp() { [EOL]     super.enableLineNumberCheck(false); [EOL]     this.instrumentationPb = null; [EOL] } <line_num>: 36,40
@Override [EOL] protected CompilerPass getProcessor(Compiler compiler) { [EOL]     return new NameAndInstrumentFunctions(compiler); [EOL] } <line_num>: 42,45
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 47,51
public void testInstrument() { [EOL]     final String kPreamble = "var $$toRemoveDefinition1, $$notToRemove;\n" + "var $$toRemoveDefinition2, $$toRemoveDefinition3;\n"; [EOL]     List<String> initCodeList = ImmutableList.of("var $$Table = [];", "function $$TestDefine(id) {", "  $$Table[id] = 0;", "};", "function $$TestInstrument(id) {", "  $$Table[id]++;", "};"); [EOL]     StringBuilder initCodeBuilder = new StringBuilder(); [EOL]     StringBuilder pbBuilder = new StringBuilder(); [EOL]     for (String line : initCodeList) { [EOL]         initCodeBuilder.append(line).append("\n"); [EOL]         pbBuilder.append("init: \"").append(line).append("\"\n"); [EOL]     } [EOL]     pbBuilder.append("report_call: \"$$testInstrument\"").append("report_defined: \"$$testDefine\"").append("declaration_to_remove: \"$$toRemoveDefinition1\"").append("declaration_to_remove: \"$$toRemoveDefinition2\"").append("declaration_to_remove: \"$$toRemoveDefinition3\""); [EOL]     final String initCode = initCodeBuilder.toString(); [EOL]     this.instrumentationPb = pbBuilder.toString(); [EOL]     test("function a(){b}", initCode + "$$testDefine(0);" + "function a(){$$testInstrument(0);b}"); [EOL]     test(kPreamble + "function a(){b}", initCode + "$$testDefine(0);" + "var $$notToRemove;" + "function a(){$$testInstrument(0);b}"); [EOL]     test(kPreamble + "var a = { b: function(){c} }", initCode + "var $$notToRemove;" + "$$testDefine(0);" + "var a = { b: function(){$$testInstrument(0);c} }"); [EOL]     test(kPreamble + "var a = { b: function(){c}, d: function(){e} }", initCode + "var $$notToRemove;" + "$$testDefine(0);" + "$$testDefine(1);" + "var a={b:function(){$$testInstrument(0);c}," + "d:function(){$$testInstrument(1);e}}"); [EOL]     test(kPreamble + "var a = { b: { f: function(){c} }, d: function(){e} }", initCode + "var $$notToRemove;" + "$$testDefine(0);" + "$$testDefine(1);" + "var a={b:{f:function(){$$testInstrument(0);c}}," + "d:function(){$$testInstrument(1);e}}"); [EOL] } <line_num>: 53,122
public void testEmpty() { [EOL]     this.instrumentationPb = ""; [EOL]     test("function a(){b}", "function a(){b}"); [EOL] } <line_num>: 124,127
public void testAppNameSetter() { [EOL]     this.instrumentationPb = "app_name_setter: \"setAppName\""; [EOL]     test("function a(){b}", "setAppName(\"testfile.js\");function a(){b}"); [EOL] } <line_num>: 129,132
public void testInit() { [EOL]     this.instrumentationPb = "init: \"var foo = 0;\"\n" + "init: \"function f(){g();}\"\n"; [EOL]     test("function a(){b}", "var foo = 0;function f(){g()}function a(){b}"); [EOL] } <line_num>: 134,139
public void testDeclare() { [EOL]     this.instrumentationPb = "report_defined: \"$$testDefine\""; [EOL]     test("function a(){b}", "$$testDefine(0);function a(){b}"); [EOL] } <line_num>: 141,144
public void testCall() { [EOL]     this.instrumentationPb = "report_call: \"$$testCall\""; [EOL]     test("function a(){b}", "function a(){$$testCall(0);b}"); [EOL] } <line_num>: 146,149
public void testNested() { [EOL]     this.instrumentationPb = "report_call: \"$$testCall\"\n" + "report_defined: \"$$testDefine\""; [EOL]     test("function a(){ function b(){}}", "$$testDefine(1);$$testDefine(0);" + "function a(){$$testCall(1);function b(){$$testCall(0)}}"); [EOL] } <line_num>: 151,157
public void testExitPaths() { [EOL]     this.instrumentationPb = "report_exit: \"$$testExit\""; [EOL]     test("function a(){return}", "function a(){return $$testExit(0)}"); [EOL]     test("function b(){return 5}", "function b(){return $$testExit(0, 5)}"); [EOL]     test("function a(){if(2 != 3){return}else{return 5}}", "function a(){if(2!=3){return $$testExit(0)}" + "else{return $$testExit(0,5)}}"); [EOL]     test("function a(){if(2 != 3){return}else{return 5}}b()", "function a(){if(2!=3){return $$testExit(0)}" + "else{return $$testExit(0,5)}}b()"); [EOL]     test("function a(){if(2 != 3){return}else{return 5}}", "function a(){if(2!=3){return $$testExit(0)}" + "else{return $$testExit(0,5)}}"); [EOL] } <line_num>: 159,178
public void testExitNoReturn() { [EOL]     this.instrumentationPb = "report_exit: \"$$testExit\""; [EOL]     test("function a(){}", "function a(){$$testExit(0);}"); [EOL]     test("function a(){b()}", "function a(){b();$$testExit(0);}"); [EOL] } <line_num>: 180,187
public void testPartialExitPaths() { [EOL]     this.instrumentationPb = "report_exit: \"$$testExit\""; [EOL]     test("function a(){if (2 != 3) {return}}", "function a(){if (2 != 3){return $$testExit(0)}$$testExit(0)}"); [EOL] } <line_num>: 189,193
public void testExitTry() { [EOL]     this.instrumentationPb = "report_exit: \"$$testExit\""; [EOL]     test("function a(){try{return}catch(err){}}", "function a(){try{return $$testExit(0)}catch(err){}$$testExit(0)}"); [EOL]     test("function a(){try{}catch(err){return}}", "function a(){try{}catch(err){return $$testExit(0)}$$testExit(0)}"); [EOL]     test("function a(){try{return}finally{}}", "function a(){try{return $$testExit(0)}finally{}$$testExit(0)}"); [EOL]     test("function a(){try{return}catch(err){}finally{}}", "function a(){try{return $$testExit(0)}catch(err){}finally{}" + "$$testExit(0)}"); [EOL]     test("function a(){try{return 1}catch(err){return 2}}", "function a(){try{return $$testExit(0, 1)}" + "catch(err){return $$testExit(0,2)}}"); [EOL]     test("function a(){try{return 1}catch(err){return 2}finally{}}", "function a(){try{return $$testExit(0, 1)}" + "catch(err){return $$testExit(0,2)}" + "finally{}$$testExit(0)}"); [EOL]     test("function a(){try{return 1}catch(err){return 2}finally{return}}", "function a(){try{return $$testExit(0, 1)}" + "catch(err){return $$testExit(0,2)}finally{return $$testExit(0)}}"); [EOL]     test("function a(){try{}catch(err){}finally{return}}", "function a(){try{}catch(err){}finally{return $$testExit(0)}}"); [EOL] } <line_num>: 195,225
public void testNestedExit() { [EOL]     this.instrumentationPb = "report_exit: \"$$testExit\"\n" + "report_defined: \"$$testDefine\""; [EOL]     test("function a(){ return function(){ return c;}}", "$$testDefine(1);function a(){$$testDefine(0);" + "return $$testExit(1, function(){return $$testExit(0, c);});}"); [EOL] } <line_num>: 227,233
public void testProtobuffParseFail() { [EOL]     this.instrumentationPb = "not an ascii pb\n"; [EOL]     test("function a(){b}", "", RhinoErrorReporter.PARSE_ERROR); [EOL] } <line_num>: 235,238
public void testInitJsParseFail() { [EOL]     this.instrumentationPb = "init: \"= assignWithNoLhs();\""; [EOL]     test("function a(){b}", "", RhinoErrorReporter.PARSE_ERROR); [EOL] } <line_num>: 240,243
@Override [EOL] public void process(Node externs, Node root) { [EOL]     FunctionNames functionNames = new FunctionNames(compiler); [EOL]     functionNames.process(externs, root); [EOL]     InstrumentFunctions instrumentation = new InstrumentFunctions(compiler, functionNames, "test init code", "testfile.js", new StringReader(instrumentationPb)); [EOL]     instrumentation.process(externs, root); [EOL] } <line_num>: 251,261
