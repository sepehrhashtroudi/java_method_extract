@Override [EOL] protected void setUp() { [EOL]     super.enableLineNumberCheck(false); [EOL] } <line_num>: 50,53
@Override [EOL] protected FunctionRewriter getProcessor(Compiler compiler) { [EOL]     return new FunctionRewriter(compiler); [EOL] } <line_num>: 55,58
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 60,64
public void testReplaceReturnConst1() { [EOL]     String source = "a.prototype.foo = function() {return \"foobar\"}"; [EOL]     checkCompilesToSame(source, 3); [EOL]     checkCompilesTo(source, RETURNARG_HELPER, "a.prototype.foo = JSCompiler_returnArg(\"foobar\")", 4); [EOL] } <line_num>: 66,73
public void testReplaceReturnConst2() { [EOL]     checkCompilesToSame("a.prototype.foo = function() {return foobar}", 10); [EOL] } <line_num>: 75,77
public void testReplaceReturnConst3() { [EOL]     String source = "a.prototype.foo = function() {return void 0;}"; [EOL]     checkCompilesToSame(source, 3); [EOL]     checkCompilesTo(source, RETURNARG_HELPER, "a.prototype.foo = JSCompiler_returnArg(void 0)", 4); [EOL] } <line_num>: 79,86
public void testReplaceGetter1() { [EOL]     String source = "a.prototype.foo = function() {return this.foo_}"; [EOL]     checkCompilesToSame(source, 3); [EOL]     checkCompilesTo(source, GET_HELPER, "a.prototype.foo = JSCompiler_get(\"foo_\")", 4); [EOL] } <line_num>: 88,95
public void testReplaceGetter2() { [EOL]     checkCompilesToSame("a.prototype.foo = function() {return}", 10); [EOL] } <line_num>: 97,99
public void testReplaceSetter1() { [EOL]     String source = "a.prototype.foo = function(v) {this.foo_ = v}"; [EOL]     checkCompilesToSame(source, 4); [EOL]     checkCompilesTo(source, SET_HELPER, "a.prototype.foo = JSCompiler_set(\"foo_\")", 5); [EOL] } <line_num>: 101,108
public void testReplaceSetter2() { [EOL]     String source = "a.prototype.foo = function(v, v2) {this.foo_ = v}"; [EOL]     checkCompilesToSame(source, 3); [EOL]     checkCompilesTo(source, SET_HELPER, "a.prototype.foo = JSCompiler_set(\"foo_\")", 4); [EOL] } <line_num>: 110,117
public void testReplaceSetter3() { [EOL]     checkCompilesToSame("a.prototype.foo = function() {this.foo_ = v}", 10); [EOL] } <line_num>: 119,121
public void testReplaceSetter4() { [EOL]     checkCompilesToSame("a.prototype.foo = function(v, v2) {this.foo_ = v2}", 10); [EOL] } <line_num>: 123,126
public void testReplaceEmptyFunction1() { [EOL]     String source = "a.prototype.foo = function() {}"; [EOL]     checkCompilesToSame(source, 4); [EOL]     checkCompilesTo(source, EMPTY_HELPER, "a.prototype.foo = JSCompiler_emptyFn()", 5); [EOL] } <line_num>: 128,135
public void testReplaceEmptyFunction2() { [EOL]     checkCompilesToSame("function foo() {}", 10); [EOL] } <line_num>: 137,139
public void testReplaceEmptyFunction3() { [EOL]     String source = "var foo = function() {}"; [EOL]     checkCompilesToSame(source, 4); [EOL]     checkCompilesTo(source, EMPTY_HELPER, "var foo = JSCompiler_emptyFn()", 5); [EOL] } <line_num>: 141,148
public void testReplaceIdentityFunction1() { [EOL]     String source = "a.prototype.foo = function(a) {return a}"; [EOL]     checkCompilesToSame(source, 2); [EOL]     checkCompilesTo(source, IDENTITY_HELPER, "a.prototype.foo = JSCompiler_identityFn()", 3); [EOL] } <line_num>: 152,159
public void testReplaceIdentityFunction2() { [EOL]     checkCompilesToSame("a.prototype.foo = function(a) {return a + 1}", 10); [EOL] } <line_num>: 161,163
public void testIssue538() { [EOL]     checkCompilesToSame("/** @constructor */\n" + "WebInspector.Setting = function() {}\n" + "WebInspector.Setting.prototype = {\n" + "    get name0(){return this._name;},\n" + "    get name1(){return this._name;},\n" + "    get name2(){return this._name;},\n" + "    get name3(){return this._name;},\n" + "    get name4(){return this._name;},\n" + "    get name5(){return this._name;},\n" + "    get name6(){return this._name;},\n" + "    get name7(){return this._name;},\n" + "    get name8(){return this._name;},\n" + "    get name9(){return this._name;},\n" + "}", 1); [EOL] } <line_num>: 165,180
private void checkCompilesTo(String src, String expectedHdr, String expectedBody, int repetitions) { [EOL]     StringBuilder srcBuffer = new StringBuilder(); [EOL]     StringBuilder expectedBuffer = new StringBuilder(); [EOL]     expectedBuffer.append(expectedHdr); [EOL]     for (int idx = 0; idx < repetitions; idx++) { [EOL]         if (idx != 0) { [EOL]             srcBuffer.append(";"); [EOL]             expectedBuffer.append(";"); [EOL]         } [EOL]         srcBuffer.append(src); [EOL]         expectedBuffer.append(expectedBody); [EOL]     } [EOL]     test(srcBuffer.toString(), expectedBuffer.toString()); [EOL] } <line_num>: 182,200
private void checkCompilesToSame(String src, int repetitions) { [EOL]     checkCompilesTo(src, "", src, repetitions); [EOL] } <line_num>: 202,204
