@Override [EOL] public void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     externs = DEFAULT_EXTERNS; [EOL]     filenames = Maps.newHashMap(); [EOL]     lastCompiler = null; [EOL]     lastArg = null; [EOL]     outReader = new ByteArrayOutputStream(); [EOL]     errReader = new ByteArrayOutputStream(); [EOL]     useStringComparison = false; [EOL]     useModules = ModulePattern.NONE; [EOL]     args.clear(); [EOL]     exitCodes = Lists.newArrayList(); [EOL] } <line_num>: 110,123
@Override [EOL] public void tearDown() throws Exception { [EOL]     super.tearDown(); [EOL] } <line_num>: 125,128
public void testWarningGuardOrdering1() { [EOL]     args.add("--jscomp_error=globalThis"); [EOL]     args.add("--jscomp_off=globalThis"); [EOL]     testSame("function f() { this.a = 3; }"); [EOL] } <line_num>: 130,134
public void testWarningGuardOrdering2() { [EOL]     args.add("--jscomp_off=globalThis"); [EOL]     args.add("--jscomp_error=globalThis"); [EOL]     test("function f() { this.a = 3; }", CheckGlobalThis.GLOBAL_THIS); [EOL] } <line_num>: 136,140
public void testWarningGuardOrdering3() { [EOL]     args.add("--jscomp_warning=globalThis"); [EOL]     args.add("--jscomp_off=globalThis"); [EOL]     testSame("function f() { this.a = 3; }"); [EOL] } <line_num>: 142,146
public void testWarningGuardOrdering4() { [EOL]     args.add("--jscomp_off=globalThis"); [EOL]     args.add("--jscomp_warning=globalThis"); [EOL]     test("function f() { this.a = 3; }", CheckGlobalThis.GLOBAL_THIS); [EOL] } <line_num>: 148,152
public void testSimpleModeLeavesUnusedParams() { [EOL]     args.add("--compilation_level=SIMPLE_OPTIMIZATIONS"); [EOL]     testSame("window.f = function(a) {};"); [EOL] } <line_num>: 154,157
public void testAdvancedModeRemovesUnusedParams() { [EOL]     args.add("--compilation_level=ADVANCED_OPTIMIZATIONS"); [EOL]     test("window.f = function(a) {};", "window.a = function() {};"); [EOL] } <line_num>: 159,162
public void testCheckGlobalThisOffByDefault() { [EOL]     testSame("function f() { this.a = 3; }"); [EOL] } <line_num>: 164,166
public void testCheckGlobalThisOnWithAdvancedMode() { [EOL]     args.add("--compilation_level=ADVANCED_OPTIMIZATIONS"); [EOL]     test("function f() { this.a = 3; }", CheckGlobalThis.GLOBAL_THIS); [EOL] } <line_num>: 168,171
public void testCheckGlobalThisOnWithErrorFlag() { [EOL]     args.add("--jscomp_error=globalThis"); [EOL]     test("function f() { this.a = 3; }", CheckGlobalThis.GLOBAL_THIS); [EOL] } <line_num>: 173,176
public void testCheckGlobalThisOff() { [EOL]     args.add("--warning_level=VERBOSE"); [EOL]     args.add("--jscomp_off=globalThis"); [EOL]     testSame("function f() { this.a = 3; }"); [EOL] } <line_num>: 178,182
public void testTypeCheckingOffByDefault() { [EOL]     test("function f(x) { return x; } f();", "function f(a) { return a; } f();"); [EOL] } <line_num>: 184,187
public void testReflectedMethods() { [EOL]     args.add("--compilation_level=ADVANCED_OPTIMIZATIONS"); [EOL]     test("/** @constructor */" + "function Foo() {}" + "Foo.prototype.handle = function(x, y) { alert(y); };" + "var x = goog.reflect.object(Foo, {handle: 1});" + "for (var i in x) { x[i].call(x); }" + "window['Foo'] = Foo;", "function a() {}" + "a.prototype.a = function(e, d) { alert(d); };" + "var b = goog.c.b(a, {a: 1}),c;" + "for (c in b) { b[c].call(b); }" + "window.Foo = a;"); [EOL] } <line_num>: 189,203
public void testInlineVariables() { [EOL]     args.add("--compilation_level=ADVANCED_OPTIMIZATIONS"); [EOL]     test("/** @constructor */ function F() { this.a = 0; }" + "F.prototype.inc = function() { this.a++; return 10; };" + "F.prototype.bar = function() { " + "  var c = 3; var val = inc(); this.a += val + c;" + "};" + "window['f'] = new F();" + "window['f']['bar'] = window['f'].bar;", "function a(){ this.a = 0; }" + "a.prototype.b = function(){ var b=inc(); this.a += b + 3; };" + "window.f = new a;" + "window.f.bar = window.f.b"); [EOL] } <line_num>: 205,219
public void testTypedAdvanced() { [EOL]     args.add("--compilation_level=ADVANCED_OPTIMIZATIONS"); [EOL]     args.add("--use_types_for_optimization"); [EOL]     test("/** @constructor */\n" + "function Foo() {}\n" + "Foo.prototype.handle1 = function(x, y) { alert(y); };\n" + "/** @constructor */\n" + "function Bar() {}\n" + "Bar.prototype.handle1 = function(x, y) {};\n" + "new Foo().handle1(1, 2);\n" + "new Bar().handle1(1, 2);\n", "alert(2)"); [EOL] } <line_num>: 221,234
public void testTypeCheckingOnWithVerbose() { [EOL]     args.add("--warning_level=VERBOSE"); [EOL]     test("function f(x) { return x; } f();", TypeCheck.WRONG_ARGUMENT_COUNT); [EOL] } <line_num>: 236,239
public void testTypeParsingOffByDefault() { [EOL]     testSame("/** @return {number */ function f(a) { return a; }"); [EOL] } <line_num>: 241,243
public void testTypeParsingOnWithVerbose() { [EOL]     args.add("--warning_level=VERBOSE"); [EOL]     test("/** @return {number */ function f(a) { return a; }", RhinoErrorReporter.TYPE_PARSE_ERROR); [EOL]     test("/** @return {n} */ function f(a) { return a; }", RhinoErrorReporter.TYPE_PARSE_ERROR); [EOL] } <line_num>: 245,251
public void testTypeCheckOverride1() { [EOL]     args.add("--warning_level=VERBOSE"); [EOL]     args.add("--jscomp_off=checkTypes"); [EOL]     testSame("var x = x || {}; x.f = function() {}; x.f(3);"); [EOL] } <line_num>: 253,257
public void testTypeCheckOverride2() { [EOL]     args.add("--warning_level=DEFAULT"); [EOL]     testSame("var x = x || {}; x.f = function() {}; x.f(3);"); [EOL]     args.add("--jscomp_warning=checkTypes"); [EOL]     test("var x = x || {}; x.f = function() {}; x.f(3);", TypeCheck.WRONG_ARGUMENT_COUNT); [EOL] } <line_num>: 259,266
public void testCheckSymbolsOffForDefault() { [EOL]     args.add("--warning_level=DEFAULT"); [EOL]     test("x = 3; var y; var y;", "x=3; var y;"); [EOL] } <line_num>: 268,271
public void testCheckSymbolsOnForVerbose() { [EOL]     args.add("--warning_level=VERBOSE"); [EOL]     test("x = 3;", VarCheck.UNDEFINED_VAR_ERROR); [EOL]     test("var y; var y;", SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR); [EOL] } <line_num>: 273,277
public void testCheckSymbolsOverrideForVerbose() { [EOL]     args.add("--warning_level=VERBOSE"); [EOL]     args.add("--jscomp_off=undefinedVars"); [EOL]     testSame("x = 3;"); [EOL] } <line_num>: 279,283
public void testCheckSymbolsOverrideForQuiet() { [EOL]     args.add("--warning_level=QUIET"); [EOL]     args.add("--jscomp_error=undefinedVars"); [EOL]     test("x = 3;", VarCheck.UNDEFINED_VAR_ERROR); [EOL] } <line_num>: 285,289
public void testCheckUndefinedProperties1() { [EOL]     args.add("--warning_level=VERBOSE"); [EOL]     args.add("--jscomp_error=missingProperties"); [EOL]     test("var x = {}; var y = x.bar;", TypeCheck.INEXISTENT_PROPERTY); [EOL] } <line_num>: 291,295
public void testCheckUndefinedProperties2() { [EOL]     args.add("--warning_level=VERBOSE"); [EOL]     args.add("--jscomp_off=missingProperties"); [EOL]     test("var x = {}; var y = x.bar;", CheckGlobalNames.UNDEFINED_NAME_WARNING); [EOL] } <line_num>: 297,301
public void testCheckUndefinedProperties3() { [EOL]     args.add("--warning_level=VERBOSE"); [EOL]     test("function f() {var x = {}; var y = x.bar;}", TypeCheck.INEXISTENT_PROPERTY); [EOL] } <line_num>: 303,307
public void testDuplicateParams() { [EOL]     test("function f(a, a) {}", RhinoErrorReporter.DUPLICATE_PARAM); [EOL]     assertTrue(lastCompiler.hasHaltingErrors()); [EOL] } <line_num>: 309,312
public void testDefineFlag() { [EOL]     args.add("--define=FOO"); [EOL]     args.add("--define=\"BAR=5\""); [EOL]     args.add("--D"); [EOL]     args.add("CCC"); [EOL]     args.add("-D"); [EOL]     args.add("DDD"); [EOL]     test("/** @define {boolean} */ var FOO = false;" + "/** @define {number} */ var BAR = 3;" + "/** @define {boolean} */ var CCC = false;" + "/** @define {boolean} */ var DDD = false;", "var FOO = !0, BAR = 5, CCC = !0, DDD = !0;"); [EOL] } <line_num>: 314,324
public void testDefineFlag2() { [EOL]     args.add("--define=FOO='x\"'"); [EOL]     test("/** @define {string} */ var FOO = \"a\";", "var FOO = \"x\\\"\";"); [EOL] } <line_num>: 326,330
public void testDefineFlag3() { [EOL]     args.add("--define=FOO=\"x'\""); [EOL]     test("/** @define {string} */ var FOO = \"a\";", "var FOO = \"x'\";"); [EOL] } <line_num>: 332,336
public void testScriptStrictModeNoWarning() { [EOL]     test("'use strict';", ""); [EOL]     test("'no use strict';", CheckSideEffects.USELESS_CODE_ERROR); [EOL] } <line_num>: 338,341
public void testFunctionStrictModeNoWarning() { [EOL]     test("function f() {'use strict';}", "function f() {}"); [EOL]     test("function f() {'no use strict';}", CheckSideEffects.USELESS_CODE_ERROR); [EOL] } <line_num>: 343,347
public void testQuietMode() { [EOL]     args.add("--warning_level=DEFAULT"); [EOL]     test("/** @const \n * @const */ var x;", RhinoErrorReporter.PARSE_ERROR); [EOL]     args.add("--warning_level=QUIET"); [EOL]     testSame("/** @const \n * @const */ var x;"); [EOL] } <line_num>: 349,355
public void testProcessClosurePrimitives() { [EOL]     test("var goog = {}; goog.provide('goog.dom');", "var goog = {dom:{}};"); [EOL]     args.add("--process_closure_primitives=false"); [EOL]     testSame("var goog = {}; goog.provide('goog.dom');"); [EOL] } <line_num>: 357,362
public void testGetMsgWiring() throws Exception { [EOL]     test("var goog = {}; goog.getMsg = function(x) { return x; };" + "/** @desc A real foo. */ var MSG_FOO = goog.getMsg('foo');", "var goog={getMsg:function(a){return a}}, " + "MSG_FOO=goog.getMsg('foo');"); [EOL]     args.add("--compilation_level=ADVANCED_OPTIMIZATIONS"); [EOL]     test("var goog = {}; goog.getMsg = function(x) { return x; };" + "/** @desc A real foo. */ var MSG_FOO = goog.getMsg('foo');" + "window['foo'] = MSG_FOO;", "window.foo = 'foo';"); [EOL] } <line_num>: 364,374
public void testCssNameWiring() throws Exception { [EOL]     test("var goog = {}; goog.getCssName = function() {};" + "goog.setCssNameMapping = function() {};" + "goog.setCssNameMapping({'goog': 'a', 'button': 'b'});" + "var a = goog.getCssName('goog-button');" + "var b = goog.getCssName('css-button');" + "var c = goog.getCssName('goog-menu');" + "var d = goog.getCssName('css-menu');", "var goog = { getCssName: function() {}," + "             setCssNameMapping: function() {} }," + "    a = 'a-b'," + "    b = 'css-b'," + "    c = 'a-menu'," + "    d = 'css-menu';"); [EOL] } <line_num>: 376,390
public void testIssue70a() { [EOL]     test("function foo({}) {}", RhinoErrorReporter.PARSE_ERROR); [EOL] } <line_num>: 396,398
public void testIssue70b() { [EOL]     test("function foo([]) {}", RhinoErrorReporter.PARSE_ERROR); [EOL] } <line_num>: 400,402
public void testIssue81() { [EOL]     args.add("--compilation_level=ADVANCED_OPTIMIZATIONS"); [EOL]     useStringComparison = true; [EOL]     test("eval('1'); var x = eval; x('2');", "eval(\"1\");(0,eval)(\"2\");"); [EOL] } <line_num>: 404,409
public void testIssue115() { [EOL]     args.add("--compilation_level=SIMPLE_OPTIMIZATIONS"); [EOL]     args.add("--jscomp_off=es5Strict"); [EOL]     args.add("--warning_level=VERBOSE"); [EOL]     test("function f() { " + "  var arguments = Array.prototype.slice.call(arguments, 0);" + "  return arguments[0]; " + "}", "function f() { " + "  arguments = Array.prototype.slice.call(arguments, 0);" + "  return arguments[0]; " + "}"); [EOL] } <line_num>: 411,423
public void testIssue297() { [EOL]     args.add("--compilation_level=SIMPLE_OPTIMIZATIONS"); [EOL]     test("function f(p) {" + " var x;" + " return ((x=p.id) && (x=parseInt(x.substr(1))) && x>0);" + "}", "function f(b) {" + " var a;" + " return ((a=b.id) && (a=parseInt(a.substr(1))) && 0<a);" + "}"); [EOL] } <line_num>: 425,435
public void testHiddenSideEffect() { [EOL]     args.add("--compilation_level=ADVANCED_OPTIMIZATIONS"); [EOL]     test("element.offsetWidth;", "element.offsetWidth", CheckSideEffects.USELESS_CODE_ERROR); [EOL] } <line_num>: 437,441
public void testIssue504() { [EOL]     args.add("--compilation_level=ADVANCED_OPTIMIZATIONS"); [EOL]     test("void function() { alert('hi'); }();", "alert('hi');void 0", CheckSideEffects.USELESS_CODE_ERROR); [EOL] } <line_num>: 443,447
public void testIssue601() { [EOL]     args.add("--compilation_level=WHITESPACE_ONLY"); [EOL]     test("function f() { return '\\v' == 'v'; } window['f'] = f;", "function f(){return'\\v'=='v'}window['f']=f"); [EOL] } <line_num>: 449,453
public void testIssue601b() { [EOL]     args.add("--compilation_level=ADVANCED_OPTIMIZATIONS"); [EOL]     test("function f() { return '\\v' == 'v'; } window['f'] = f;", "window.f=function(){return'\\v'=='v'}"); [EOL] } <line_num>: 455,459
public void testIssue601c() { [EOL]     args.add("--compilation_level=ADVANCED_OPTIMIZATIONS"); [EOL]     test("function f() { return '\\u000B' == 'v'; } window['f'] = f;", "window.f=function(){return'\\u000B'=='v'}"); [EOL] } <line_num>: 461,465
public void testIssue846() { [EOL]     args.add("--compilation_level=ADVANCED_OPTIMIZATIONS"); [EOL]     testSame("try { new Function('this is an error'); } catch(a) { alert('x'); }"); [EOL] } <line_num>: 467,471
public void testDebugFlag1() { [EOL]     args.add("--compilation_level=SIMPLE_OPTIMIZATIONS"); [EOL]     args.add("--debug=false"); [EOL]     test("function foo(a) {}", "function foo(a) {}"); [EOL] } <line_num>: 473,478
public void testDebugFlag2() { [EOL]     args.add("--compilation_level=SIMPLE_OPTIMIZATIONS"); [EOL]     args.add("--debug=true"); [EOL]     test("function foo(a) {alert(a)}", "function foo($a$$) {alert($a$$)}"); [EOL] } <line_num>: 480,485
public void testDebugFlag3() { [EOL]     args.add("--compilation_level=ADVANCED_OPTIMIZATIONS"); [EOL]     args.add("--warning_level=QUIET"); [EOL]     args.add("--debug=false"); [EOL]     test("function Foo() {}" + "Foo.x = 1;" + "function f() {throw new Foo().x;} f();", "throw (new function() {}).a;"); [EOL] } <line_num>: 487,495
public void testDebugFlag4() { [EOL]     args.add("--compilation_level=ADVANCED_OPTIMIZATIONS"); [EOL]     args.add("--warning_level=QUIET"); [EOL]     args.add("--debug=true"); [EOL]     test("function Foo() {}" + "Foo.x = 1;" + "function f() {throw new Foo().x;} f();", "throw (new function Foo() {}).$x$;"); [EOL] } <line_num>: 497,505
public void testBooleanFlag1() { [EOL]     args.add("--compilation_level=SIMPLE_OPTIMIZATIONS"); [EOL]     args.add("--debug"); [EOL]     test("function foo(a) {alert(a)}", "function foo($a$$) {alert($a$$)}"); [EOL] } <line_num>: 507,512
public void testBooleanFlag2() { [EOL]     args.add("--debug"); [EOL]     args.add("--compilation_level=SIMPLE_OPTIMIZATIONS"); [EOL]     test("function foo(a) {alert(a)}", "function foo($a$$) {alert($a$$)}"); [EOL] } <line_num>: 514,519
public void testHelpFlag() { [EOL]     args.add("--help"); [EOL]     assertFalse(createCommandLineRunner(new String[] { "function f() {}" }).shouldRunCompiler()); [EOL] } <line_num>: 521,526
public void testExternsLifting1() throws Exception { [EOL]     String code = "/** @externs */ function f() {}"; [EOL]     test(new String[] { code }, new String[] {}); [EOL]     assertEquals(2, lastCompiler.getExternsForTesting().size()); [EOL]     CompilerInput extern = lastCompiler.getExternsForTesting().get(1); [EOL]     assertNull(extern.getModule()); [EOL]     assertTrue(extern.isExtern()); [EOL]     assertEquals(code, extern.getCode()); [EOL]     assertEquals(1, lastCompiler.getInputsForTesting().size()); [EOL]     CompilerInput input = lastCompiler.getInputsForTesting().get(0); [EOL]     assertNotNull(input.getModule()); [EOL]     assertFalse(input.isExtern()); [EOL]     assertEquals("", input.getCode()); [EOL] } <line_num>: 528,546
public void testExternsLifting2() { [EOL]     args.add("--warning_level=VERBOSE"); [EOL]     test(new String[] { "/** @externs */ function f() {}", "f(3);" }, new String[] { "f(3);" }, TypeCheck.WRONG_ARGUMENT_COUNT); [EOL] } <line_num>: 548,553
public void testSourceSortingOff() { [EOL]     args.add("--compilation_level=WHITESPACE_ONLY"); [EOL]     testSame(new String[] { "goog.require('beer');", "goog.provide('beer');" }); [EOL] } <line_num>: 555,562
public void testSourceSortingOn() { [EOL]     test(new String[] { "goog.require('beer');", "goog.provide('beer');" }, new String[] { "var beer = {};", "" }); [EOL] } <line_num>: 564,573
public void testSourceSortingOn2() { [EOL]     test(new String[] { "goog.provide('a');", "goog.require('a');\n" + "var COMPILED = false;" }, new String[] { "var a={};", "var COMPILED=!1" }); [EOL] } <line_num>: 575,585
public void testSourceSortingOn3() { [EOL]     args.add("--manage_closure_dependencies=true"); [EOL]     test(new String[] { "goog.addDependency('sym', [], []);\nvar x = 3;", "var COMPILED = false;" }, new String[] { "var COMPILED = !1;", "var x = 3;" }); [EOL] } <line_num>: 587,597
public void testSourceSortingCircularDeps1() { [EOL]     args.add("--manage_closure_dependencies=true"); [EOL]     test(new String[] { "goog.provide('gin'); goog.require('tonic'); var gin = {};", "goog.provide('tonic'); goog.require('gin'); var tonic = {};", "goog.require('gin'); goog.require('tonic');" }, JSModule.CIRCULAR_DEPENDENCY_ERROR); [EOL] } <line_num>: 599,607
public void testSourceSortingCircularDeps2() { [EOL]     args.add("--manage_closure_dependencies=true"); [EOL]     test(new String[] { "goog.provide('roses.lime.juice');", "goog.provide('gin'); goog.require('tonic'); var gin = {};", "goog.provide('tonic'); goog.require('gin'); var tonic = {};", "goog.require('gin'); goog.require('tonic');", "goog.provide('gimlet');" + "     goog.require('gin'); goog.require('roses.lime.juice');" }, JSModule.CIRCULAR_DEPENDENCY_ERROR); [EOL] } <line_num>: 609,620
public void testSourcePruningOn1() { [EOL]     args.add("--manage_closure_dependencies=true"); [EOL]     test(new String[] { "goog.require('beer');", "goog.provide('beer');", "goog.provide('scotch'); var x = 3;" }, new String[] { "var beer = {};", "" }); [EOL] } <line_num>: 622,633
public void testSourcePruningOn2() { [EOL]     args.add("--closure_entry_point=guinness"); [EOL]     test(new String[] { "goog.provide('guinness');\ngoog.require('beer');", "goog.provide('beer');", "goog.provide('scotch'); var x = 3;" }, new String[] { "var beer = {};", "var guinness = {};" }); [EOL] } <line_num>: 635,646
public void testSourcePruningOn3() { [EOL]     args.add("--closure_entry_point=scotch"); [EOL]     test(new String[] { "goog.provide('guinness');\ngoog.require('beer');", "goog.provide('beer');", "goog.provide('scotch'); var x = 3;" }, new String[] { "var scotch = {}, x = 3;" }); [EOL] } <line_num>: 648,658
public void testSourcePruningOn4() { [EOL]     args.add("--closure_entry_point=scotch"); [EOL]     args.add("--closure_entry_point=beer"); [EOL]     test(new String[] { "goog.provide('guinness');\ngoog.require('beer');", "goog.provide('beer');", "goog.provide('scotch'); var x = 3;" }, new String[] { "var beer = {};", "var scotch = {}, x = 3;" }); [EOL] } <line_num>: 660,672
public void testSourcePruningOn5() { [EOL]     args.add("--closure_entry_point=shiraz"); [EOL]     test(new String[] { "goog.provide('guinness');\ngoog.require('beer');", "goog.provide('beer');", "goog.provide('scotch'); var x = 3;" }, Compiler.MISSING_ENTRY_ERROR); [EOL] } <line_num>: 674,682
public void testSourcePruningOn6() { [EOL]     args.add("--closure_entry_point=scotch"); [EOL]     test(new String[] { "goog.require('beer');", "goog.provide('beer');", "goog.provide('scotch'); var x = 3;" }, new String[] { "var beer = {};", "", "var scotch = {}, x = 3;" }); [EOL] } <line_num>: 684,696
public void testSourcePruningOn7() { [EOL]     args.add("--manage_closure_dependencies=true"); [EOL]     test(new String[] { "var COMPILED = false;" }, new String[] { "var COMPILED = !1;" }); [EOL] } <line_num>: 698,706
public void testSourcePruningOn8() { [EOL]     args.add("--only_closure_dependencies"); [EOL]     args.add("--closure_entry_point=scotch"); [EOL]     args.add("--warning_level=VERBOSE"); [EOL]     test(new String[] { "/** @externs */\n" + "var externVar;", "goog.provide('scotch'); var x = externVar;" }, new String[] { "var scotch = {}, x = externVar;" }); [EOL] } <line_num>: 708,720
public void testNoCompile() { [EOL]     args.add("--warning_level=VERBOSE"); [EOL]     test(new String[] { "/** @nocompile */\n" + "goog.provide('x');\n" + "var dupeVar;", "var dupeVar;" }, new String[] { "var dupeVar;" }); [EOL] } <line_num>: 722,733
public void testDependencySortingWhitespaceMode() { [EOL]     args.add("--manage_closure_dependencies"); [EOL]     args.add("--compilation_level=WHITESPACE_ONLY"); [EOL]     test(new String[] { "goog.require('beer');", "goog.provide('beer');\ngoog.require('hops');", "goog.provide('hops');" }, new String[] { "goog.provide('hops');", "goog.provide('beer');\ngoog.require('hops');", "goog.require('beer');" }); [EOL] } <line_num>: 735,748
public void testForwardDeclareDroppedTypes() { [EOL]     args.add("--manage_closure_dependencies=true"); [EOL]     args.add("--warning_level=VERBOSE"); [EOL]     test(new String[] { "goog.require('beer');", "goog.provide('beer'); /** @param {Scotch} x */ function f(x) {}", "goog.provide('Scotch'); var x = 3;" }, new String[] { "var beer = {}; function f(a) {}", "" }); [EOL]     test(new String[] { "goog.require('beer');", "goog.provide('beer'); /** @param {Scotch} x */ function f(x) {}" }, new String[] { "var beer = {}; function f(a) {}", "" }, RhinoErrorReporter.TYPE_PARSE_ERROR); [EOL] } <line_num>: 750,773
public void testOnlyClosureDependenciesEmptyEntryPoints() throws Exception { [EOL]     args.add("--use_only_custom_externs=true"); [EOL]     args.add("--only_closure_dependencies=true"); [EOL]     try { [EOL]         CommandLineRunner runner = createCommandLineRunner(new String[0]); [EOL]         runner.doRun(); [EOL]         fail("Expected FlagUsageException"); [EOL]     } catch (FlagUsageException e) { [EOL]         assertTrue(e.getMessage(), e.getMessage().contains("only_closure_dependencies")); [EOL]     } [EOL] } <line_num>: 775,788
public void testOnlyClosureDependenciesOneEntryPoint() throws Exception { [EOL]     args.add("--only_closure_dependencies=true"); [EOL]     args.add("--closure_entry_point=beer"); [EOL]     test(new String[] { "goog.require('beer'); var beerRequired = 1;", "goog.provide('beer');\ngoog.require('hops');\nvar beerProvided = 1;", "goog.provide('hops'); var hopsProvided = 1;", "goog.provide('scotch'); var scotchProvided = 1;", "goog.require('scotch');\nvar includeFileWithoutProvides = 1;", "/** This is base.js */\nvar COMPILED = false;" }, new String[] { "var COMPILED = !1;", "var hops = {}, hopsProvided = 1;", "var beer = {}, beerProvided = 1;" }); [EOL] } <line_num>: 790,806
public void testSourceMapExpansion1() { [EOL]     args.add("--js_output_file"); [EOL]     args.add("/path/to/out.js"); [EOL]     args.add("--create_source_map=%outname%.map"); [EOL]     testSame("var x = 3;"); [EOL]     assertEquals("/path/to/out.js.map", lastCommandLineRunner.expandSourceMapPath(lastCompiler.getOptions(), null)); [EOL] } <line_num>: 808,816
public void testSourceMapExpansion2() { [EOL]     useModules = ModulePattern.CHAIN; [EOL]     args.add("--create_source_map=%outname%.map"); [EOL]     args.add("--module_output_path_prefix=foo"); [EOL]     testSame(new String[] { "var x = 3;", "var y = 5;" }); [EOL]     assertEquals("foo.map", lastCommandLineRunner.expandSourceMapPath(lastCompiler.getOptions(), null)); [EOL] } <line_num>: 818,826
public void testSourceMapExpansion3() { [EOL]     useModules = ModulePattern.CHAIN; [EOL]     args.add("--create_source_map=%outname%.map"); [EOL]     args.add("--module_output_path_prefix=foo_"); [EOL]     testSame(new String[] { "var x = 3;", "var y = 5;" }); [EOL]     assertEquals("foo_m0.js.map", lastCommandLineRunner.expandSourceMapPath(lastCompiler.getOptions(), lastCompiler.getModuleGraph().getRootModule())); [EOL] } <line_num>: 828,837
public void testSourceMapFormat1() { [EOL]     args.add("--js_output_file"); [EOL]     args.add("/path/to/out.js"); [EOL]     testSame("var x = 3;"); [EOL]     assertEquals(SourceMap.Format.DEFAULT, lastCompiler.getOptions().sourceMapFormat); [EOL] } <line_num>: 839,845
public void testSourceMapFormat2() { [EOL]     args.add("--js_output_file"); [EOL]     args.add("/path/to/out.js"); [EOL]     args.add("--source_map_format=V3"); [EOL]     testSame("var x = 3;"); [EOL]     assertEquals(SourceMap.Format.V3, lastCompiler.getOptions().sourceMapFormat); [EOL] } <line_num>: 847,854
public void testModuleWrapperBaseNameExpansion() throws Exception { [EOL]     useModules = ModulePattern.CHAIN; [EOL]     args.add("--module_wrapper=m0:%s // %basename%"); [EOL]     testSame(new String[] { "var x = 3;", "var y = 4;" }); [EOL]     StringBuilder builder = new StringBuilder(); [EOL]     lastCommandLineRunner.writeModuleOutput(builder, lastCompiler.getModuleGraph().getRootModule()); [EOL]     assertEquals("var x=3; // m0.js\n", builder.toString()); [EOL] } <line_num>: 856,869
public void testCharSetExpansion() { [EOL]     testSame(""); [EOL]     assertEquals("US-ASCII", lastCompiler.getOptions().outputCharset); [EOL]     args.add("--charset=UTF-8"); [EOL]     testSame(""); [EOL]     assertEquals("UTF-8", lastCompiler.getOptions().outputCharset); [EOL] } <line_num>: 871,877
public void testChainModuleManifest() throws Exception { [EOL]     useModules = ModulePattern.CHAIN; [EOL]     testSame(new String[] { "var x = 3;", "var y = 5;", "var z = 7;", "var a = 9;" }); [EOL]     StringBuilder builder = new StringBuilder(); [EOL]     lastCommandLineRunner.printModuleGraphManifestOrBundleTo(lastCompiler.getModuleGraph(), builder, true); [EOL]     assertEquals("{m0}\n" + "i0\n" + "\n" + "{m1:m0}\n" + "i1\n" + "\n" + "{m2:m1}\n" + "i2\n" + "\n" + "{m3:m2}\n" + "i3\n", builder.toString()); [EOL] } <line_num>: 879,900
public void testStarModuleManifest() throws Exception { [EOL]     useModules = ModulePattern.STAR; [EOL]     testSame(new String[] { "var x = 3;", "var y = 5;", "var z = 7;", "var a = 9;" }); [EOL]     StringBuilder builder = new StringBuilder(); [EOL]     lastCommandLineRunner.printModuleGraphManifestOrBundleTo(lastCompiler.getModuleGraph(), builder, true); [EOL]     assertEquals("{m0}\n" + "i0\n" + "\n" + "{m1:m0}\n" + "i1\n" + "\n" + "{m2:m0}\n" + "i2\n" + "\n" + "{m3:m0}\n" + "i3\n", builder.toString()); [EOL] } <line_num>: 902,923
public void testOutputModuleGraphJson() throws Exception { [EOL]     useModules = ModulePattern.STAR; [EOL]     testSame(new String[] { "var x = 3;", "var y = 5;", "var z = 7;", "var a = 9;" }); [EOL]     StringBuilder builder = new StringBuilder(); [EOL]     lastCommandLineRunner.printModuleGraphJsonTo(lastCompiler.getModuleGraph(), builder); [EOL]     assertTrue(builder.toString().indexOf("transitive-dependencies") != -1); [EOL] } <line_num>: 925,934
public void testVersionFlag() { [EOL]     args.add("--version"); [EOL]     testSame(""); [EOL]     assertEquals(0, new String(errReader.toByteArray()).indexOf("Closure Compiler (http://code.google.com/closure/compiler)\n" + "Version: ")); [EOL] } <line_num>: 936,944
public void testVersionFlag2() { [EOL]     lastArg = "--version"; [EOL]     testSame(""); [EOL]     assertEquals(0, new String(errReader.toByteArray()).indexOf("Closure Compiler (http://code.google.com/closure/compiler)\n" + "Version: ")); [EOL] } <line_num>: 946,954
public void testPrintAstFlag() { [EOL]     args.add("--print_ast=true"); [EOL]     testSame(""); [EOL]     assertEquals("digraph AST {\n" + "  node [color=lightblue2, style=filled];\n" + "  node0 [label=\"BLOCK\"];\n" + "  node1 [label=\"SCRIPT\"];\n" + "  node0 -> node1 [weight=1];\n" + "  node1 -> RETURN [label=\"UNCOND\", " + "fontcolor=\"red\", weight=0.01, color=\"red\"];\n" + "  node0 -> RETURN [label=\"SYN_BLOCK\", " + "fontcolor=\"red\", weight=0.01, color=\"red\"];\n" + "  node0 -> node1 [label=\"UNCOND\", " + "fontcolor=\"red\", weight=0.01, color=\"red\"];\n" + "}\n\n", new String(outReader.toByteArray())); [EOL] } <line_num>: 956,973
public void testSyntheticExterns() { [EOL]     externs = ImmutableList.of(SourceFile.fromCode("externs", "myVar.property;")); [EOL]     test("var theirVar = {}; var myVar = {}; var yourVar = {};", VarCheck.UNDEFINED_EXTERN_VAR_ERROR); [EOL]     args.add("--jscomp_off=externsValidation"); [EOL]     args.add("--warning_level=VERBOSE"); [EOL]     test("var theirVar = {}; var myVar = {}; var yourVar = {};", "var theirVar={},myVar={},yourVar={};"); [EOL]     args.add("--jscomp_off=externsValidation"); [EOL]     args.add("--warning_level=VERBOSE"); [EOL]     test("var theirVar = {}; var myVar = {}; var myVar = {};", SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR); [EOL] } <line_num>: 975,990
public void testGoogAssertStripping() { [EOL]     args.add("--compilation_level=ADVANCED_OPTIMIZATIONS"); [EOL]     test("goog.asserts.assert(false)", ""); [EOL]     args.add("--debug"); [EOL]     test("goog.asserts.assert(false)", "goog.$asserts$.$assert$(!1)"); [EOL] } <line_num>: 992,998
public void testMissingReturnCheckOnWithVerbose() { [EOL]     args.add("--warning_level=VERBOSE"); [EOL]     test("/** @return {number} */ function f() {f()} f();", CheckMissingReturn.MISSING_RETURN_STATEMENT); [EOL] } <line_num>: 1000,1004
public void testGenerateExports() { [EOL]     args.add("--generate_exports=true"); [EOL]     test("/** @export */ foo.prototype.x = function() {};", "foo.prototype.x=function(){};" + "goog.exportSymbol(\"foo.prototype.x\",foo.prototype.x);"); [EOL] } <line_num>: 1006,1011
public void testDepreciationWithVerbose() { [EOL]     args.add("--warning_level=VERBOSE"); [EOL]     test("/** @deprecated */ function f() {}; f()", CheckAccessControls.DEPRECATED_NAME); [EOL] } <line_num>: 1013,1017
public void testTwoParseErrors() { [EOL]     Compiler compiler = compile(new String[] { "var a b;", "var b c;" }); [EOL]     assertEquals(2, compiler.getErrors().length); [EOL] } <line_num>: 1019,1027
public void testES3ByDefault() { [EOL]     test("var x = f.function", RhinoErrorReporter.PARSE_ERROR); [EOL] } <line_num>: 1029,1031
public void testES5ChecksByDefault() { [EOL]     testSame("var x = 3; delete x;"); [EOL] } <line_num>: 1033,1035
public void testES5ChecksInVerbose() { [EOL]     args.add("--warning_level=VERBOSE"); [EOL]     test("function f(x) { delete x; }", StrictModeCheck.DELETE_VARIABLE); [EOL] } <line_num>: 1037,1040
public void testES5() { [EOL]     args.add("--language_in=ECMASCRIPT5"); [EOL]     test("var x = f.function", "var x = f.function"); [EOL]     test("var let", "var let"); [EOL] } <line_num>: 1042,1046
public void testES5Strict() { [EOL]     args.add("--language_in=ECMASCRIPT5_STRICT"); [EOL]     test("var x = f.function", "'use strict';var x = f.function"); [EOL]     test("var let", RhinoErrorReporter.PARSE_ERROR); [EOL]     test("function f(x) { delete x; }", StrictModeCheck.DELETE_VARIABLE); [EOL] } <line_num>: 1048,1053
public void testES5StrictUseStrict() { [EOL]     args.add("--language_in=ECMASCRIPT5_STRICT"); [EOL]     Compiler compiler = compile(new String[] { "var x = f.function" }); [EOL]     String outputSource = compiler.toSource(); [EOL]     assertEquals("'use strict'", outputSource.substring(0, 12)); [EOL] } <line_num>: 1055,1060
public void testES5StrictUseStrictMultipleInputs() { [EOL]     args.add("--language_in=ECMASCRIPT5_STRICT"); [EOL]     Compiler compiler = compile(new String[] { "var x = f.function", "var y = f.function", "var z = f.function" }); [EOL]     String outputSource = compiler.toSource(); [EOL]     assertEquals("'use strict'", outputSource.substring(0, 12)); [EOL]     assertEquals(outputSource.substring(13).indexOf("'use strict'"), -1); [EOL] } <line_num>: 1062,1069
public void testWithKeywordDefault() { [EOL]     test("var x = {}; with (x) {}", ControlStructureCheck.USE_OF_WITH); [EOL] } <line_num>: 1071,1073
public void testWithKeywordWithEs5ChecksOff() { [EOL]     args.add("--jscomp_off=es5Strict"); [EOL]     testSame("var x = {}; with (x) {}"); [EOL] } <line_num>: 1075,1078
public void testNoSrCFilesWithManifest() throws IOException { [EOL]     args.add("--use_only_custom_externs=true"); [EOL]     args.add("--output_manifest=test.MF"); [EOL]     CommandLineRunner runner = createCommandLineRunner(new String[0]); [EOL]     String expectedMessage = ""; [EOL]     try { [EOL]         runner.doRun(); [EOL]     } catch (FlagUsageException e) { [EOL]         expectedMessage = e.getMessage(); [EOL]     } [EOL]     assertEquals(expectedMessage, "Bad --js flag. " + "Manifest files cannot be generated when the input is from stdin."); [EOL] } <line_num>: 1080,1092
public void testTransformAMD() { [EOL]     args.add("--transform_amd_modules"); [EOL]     test("define({test: 1})", "exports = {test: 1}"); [EOL] } <line_num>: 1094,1097
public void testProcessCJS() { [EOL]     useStringComparison = true; [EOL]     args.add("--process_common_js_modules"); [EOL]     args.add("--common_js_entry_module=foo/bar"); [EOL]     setFilename(0, "foo/bar.js"); [EOL]     String expected = "var module$foo$bar={test:1};"; [EOL]     test("exports.test = 1", expected); [EOL]     assertEquals(expected + "\n", outReader.toString()); [EOL] } <line_num>: 1099,1107
public void testProcessCJSWithModuleOutput() { [EOL]     useStringComparison = true; [EOL]     args.add("--process_common_js_modules"); [EOL]     args.add("--common_js_entry_module=foo/bar"); [EOL]     args.add("--module=auto"); [EOL]     setFilename(0, "foo/bar.js"); [EOL]     test("exports.test = 1", "var module$foo$bar={test:1};"); [EOL]     assertEquals("", outReader.toString()); [EOL] } <line_num>: 1109,1119
public void testFormattingSingleQuote() { [EOL]     testSame("var x = '';"); [EOL]     assertEquals("var x=\"\";", lastCompiler.toSource()); [EOL]     args.add("--formatting=SINGLE_QUOTES"); [EOL]     testSame("var x = '';"); [EOL]     assertEquals("var x='';", lastCompiler.toSource()); [EOL] } <line_num>: 1121,1128
public void testTransformAMDAndProcessCJS() { [EOL]     useStringComparison = true; [EOL]     args.add("--transform_amd_modules"); [EOL]     args.add("--process_common_js_modules"); [EOL]     args.add("--common_js_entry_module=foo/bar"); [EOL]     setFilename(0, "foo/bar.js"); [EOL]     test("define({foo: 1})", "var module$foo$bar={},module$foo$bar={foo:1};"); [EOL] } <line_num>: 1130,1138
public void testModuleJSON() { [EOL]     useStringComparison = true; [EOL]     args.add("--transform_amd_modules"); [EOL]     args.add("--process_common_js_modules"); [EOL]     args.add("--common_js_entry_module=foo/bar"); [EOL]     args.add("--output_module_dependencies=test.json"); [EOL]     setFilename(0, "foo/bar.js"); [EOL]     test("define({foo: 1})", "var module$foo$bar={},module$foo$bar={foo:1};"); [EOL] } <line_num>: 1140,1149
public void testOutputSameAsInput() { [EOL]     args.add("--js_output_file=" + getFilename(0)); [EOL]     test("", AbstractCommandLineRunner.OUTPUT_SAME_AS_INPUT_ERROR); [EOL] } <line_num>: 1151,1154
private void testSame(String original) { [EOL]     testSame(new String[] { original }); [EOL] } <line_num>: 1158,1160
private void testSame(String[] original) { [EOL]     test(original, original); [EOL] } <line_num>: 1162,1164
private void test(String original, String compiled) { [EOL]     test(new String[] { original }, new String[] { compiled }); [EOL] } <line_num>: 1166,1168
private void test(String[] original, String[] compiled) { [EOL]     test(original, compiled, null); [EOL] } <line_num>: 1174,1176
private void test(String[] original, String[] compiled, DiagnosticType warning) { [EOL]     Compiler compiler = compile(original); [EOL]     if (warning == null) { [EOL]         assertEquals("Expected no warnings or errors\n" + "Errors: \n" + Joiner.on("\n").join(compiler.getErrors()) + "Warnings: \n" + Joiner.on("\n").join(compiler.getWarnings()), 0, compiler.getErrors().length + compiler.getWarnings().length); [EOL]     } else { [EOL]         assertEquals(1, compiler.getWarnings().length); [EOL]         assertEquals(warning, compiler.getWarnings()[0].getType()); [EOL]     } [EOL]     Node root = compiler.getRoot().getLastChild(); [EOL]     if (useStringComparison) { [EOL]         assertEquals(Joiner.on("").join(compiled), compiler.toSource()); [EOL]     } else { [EOL]         Node expectedRoot = parse(compiled); [EOL]         String explanation = expectedRoot.checkTreeEquals(root); [EOL]         assertNull("\nExpected: " + compiler.toSource(expectedRoot) + "\nResult: " + compiler.toSource(root) + "\n" + explanation, explanation); [EOL]     } [EOL] } <line_num>: 1184,1208
private void test(String original, DiagnosticType warning) { [EOL]     test(new String[] { original }, warning); [EOL] } <line_num>: 1213,1215
private void test(String original, String expected, DiagnosticType warning) { [EOL]     test(new String[] { original }, new String[] { expected }, warning); [EOL] } <line_num>: 1217,1219
private void test(String[] original, DiagnosticType warning) { [EOL]     Compiler compiler = compile(original); [EOL]     assertEquals("Expected exactly one warning or error " + "Errors: \n" + Joiner.on("\n").join(compiler.getErrors()) + "Warnings: \n" + Joiner.on("\n").join(compiler.getWarnings()), 1, compiler.getErrors().length + compiler.getWarnings().length); [EOL]     assertTrue(exitCodes.size() > 0); [EOL]     int lastExitCode = exitCodes.get(exitCodes.size() - 1); [EOL]     if (compiler.getErrors().length > 0) { [EOL]         assertEquals(1, compiler.getErrors().length); [EOL]         assertEquals(warning, compiler.getErrors()[0].getType()); [EOL]         assertEquals(1, lastExitCode); [EOL]     } else { [EOL]         assertEquals(1, compiler.getWarnings().length); [EOL]         assertEquals(warning, compiler.getWarnings()[0].getType()); [EOL]         assertEquals(0, lastExitCode); [EOL]     } [EOL] } <line_num>: 1224,1243
private CommandLineRunner createCommandLineRunner(String[] original) { [EOL]     for (int i = 0; i < original.length; i++) { [EOL]         args.add("--js"); [EOL]         args.add("/path/to/input" + i + ".js"); [EOL]         if (useModules == ModulePattern.CHAIN) { [EOL]             args.add("--module"); [EOL]             args.add("m" + i + ":1" + (i > 0 ? (":m" + (i - 1)) : "")); [EOL]         } else if (useModules == ModulePattern.STAR) { [EOL]             args.add("--module"); [EOL]             args.add("m" + i + ":1" + (i > 0 ? ":m0" : "")); [EOL]         } [EOL]     } [EOL]     if (lastArg != null) { [EOL]         args.add(lastArg); [EOL]     } [EOL]     String[] argStrings = args.toArray(new String[] {}); [EOL]     return new CommandLineRunner(argStrings, new PrintStream(outReader), new PrintStream(errReader)); [EOL] } <line_num>: 1245,1267
@Override [EOL] public Boolean apply(Integer code) { [EOL]     return exitCodes.add(code); [EOL] } <line_num>: 1298,1301
private Compiler compile(String[] original) { [EOL]     CommandLineRunner runner = createCommandLineRunner(original); [EOL]     assertTrue(new String(errReader.toByteArray()), runner.shouldRunCompiler()); [EOL]     Supplier<List<SourceFile>> inputsSupplier = null; [EOL]     Supplier<List<JSModule>> modulesSupplier = null; [EOL]     if (useModules == ModulePattern.NONE) { [EOL]         List<SourceFile> inputs = Lists.newArrayList(); [EOL]         for (int i = 0; i < original.length; i++) { [EOL]             inputs.add(SourceFile.fromCode(getFilename(i), original[i])); [EOL]         } [EOL]         inputsSupplier = Suppliers.ofInstance(inputs); [EOL]     } else if (useModules == ModulePattern.STAR) { [EOL]         modulesSupplier = Suppliers.<List<JSModule>>ofInstance(Lists.<JSModule>newArrayList(CompilerTestCase.createModuleStar(original))); [EOL]     } else if (useModules == ModulePattern.CHAIN) { [EOL]         modulesSupplier = Suppliers.<List<JSModule>>ofInstance(Lists.<JSModule>newArrayList(CompilerTestCase.createModuleChain(original))); [EOL]     } else { [EOL]         throw new IllegalArgumentException("Unknown module type: " + useModules); [EOL]     } [EOL]     runner.enableTestMode(Suppliers.<List<SourceFile>>ofInstance(externs), inputsSupplier, modulesSupplier, new Function<Integer, Boolean>() { [EOL]  [EOL]         @Override [EOL]         public Boolean apply(Integer code) { [EOL]             return exitCodes.add(code); [EOL]         } [EOL]     }); [EOL]     runner.run(); [EOL]     lastCompiler = runner.getCompiler(); [EOL]     lastCommandLineRunner = runner; [EOL]     return lastCompiler; [EOL] } <line_num>: 1269,1307
private Node parse(String[] original) { [EOL]     String[] argStrings = args.toArray(new String[] {}); [EOL]     CommandLineRunner runner = new CommandLineRunner(argStrings); [EOL]     Compiler compiler = runner.createCompiler(); [EOL]     List<SourceFile> inputs = Lists.newArrayList(); [EOL]     for (int i = 0; i < original.length; i++) { [EOL]         inputs.add(SourceFile.fromCode(getFilename(i), original[i])); [EOL]     } [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     options.setLanguageIn(LanguageMode.ECMASCRIPT5); [EOL]     compiler.init(externs, inputs, options); [EOL]     Node all = compiler.parseInputs(); [EOL]     Preconditions.checkState(compiler.getErrorCount() == 0); [EOL]     Preconditions.checkNotNull(all); [EOL]     Node n = all.getLastChild(); [EOL]     return n; [EOL] } <line_num>: 1309,1326
private void setFilename(int i, String filename) { [EOL]     this.filenames.put(i, filename); [EOL] } <line_num>: 1328,1330
private String getFilename(int i) { [EOL]     if (filenames.isEmpty()) { [EOL]         return "input" + i; [EOL]     } [EOL]     return filenames.get(i); [EOL] } <line_num>: 1332,1337
