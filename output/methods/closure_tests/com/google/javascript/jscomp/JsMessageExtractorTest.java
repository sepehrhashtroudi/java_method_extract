private Collection<JsMessage> extractMessages(String... js) { [EOL]     try { [EOL]         String sourceCode = Joiner.on("\n").join(js); [EOL]         return new JsMessageExtractor(null, RELAX).extractMessages(SourceFile.fromCode("testcode", sourceCode)); [EOL]     } catch (IOException e) { [EOL]         fail(e.getMessage()); [EOL]         return null; [EOL]     } [EOL] } <line_num>: 37,46
private JsMessage extractMessage(String... js) { [EOL]     Collection<JsMessage> messages = extractMessages(js); [EOL]     assertEquals(1, messages.size()); [EOL]     return messages.iterator().next(); [EOL] } <line_num>: 48,52
public void testSyntaxError1() { [EOL]     try { [EOL]         extractMessage("if (true) {}}"); [EOL]         fail("Expected exception"); [EOL]     } catch (RuntimeException e) { [EOL]         assertTrue(e.getMessage().contains("JSCompiler errors\n")); [EOL]         assertTrue(e.getMessage().contains("testcode:1: ERROR - Parse error. syntax error\n")); [EOL]         assertTrue(e.getMessage().contains("if (true) {}}\n")); [EOL]     } [EOL] } <line_num>: 54,64
public void testSyntaxError2() { [EOL]     try { [EOL]         extractMessage("", "if (true) {}}"); [EOL]         fail("Expected exception"); [EOL]     } catch (RuntimeException e) { [EOL]         assertTrue(e.getMessage(), e.getMessage().contains("JSCompiler errors\n")); [EOL]         assertTrue(e.getMessage(), e.getMessage().contains("testcode:2: ERROR - Parse error. syntax error\n")); [EOL]         assertTrue(e.getMessage(), e.getMessage().contains("if (true) {}}\n")); [EOL]     } [EOL] } <line_num>: 66,82
public void testExtractNewStyleMessage1() { [EOL]     assertEquals(new JsMessage.Builder("MSG_SILLY").appendStringPart("silly test message").build(), extractMessage("var MSG_SILLY = goog.getMsg('silly test message');")); [EOL] } <line_num>: 84,91
public void testExtractNewStyleMessage2() { [EOL]     assertEquals(new JsMessage.Builder("MSG_WELCOME").appendStringPart("Hi ").appendPlaceholderReference("userName").appendStringPart("! Welcome to ").appendPlaceholderReference("product").appendStringPart(".").setDesc("The welcome message.").setIsHidden(true).build(), extractMessage("/**", " * @desc The welcome", " *   message.", " *", " * @hidden", " */", "var MSG_WELCOME = goog.getMsg(", "    'Hi {$userName}! Welcome to {$product}.',", "    {userName: someUserName, product: getProductName()});")); [EOL] } <line_num>: 93,115
public void testExtractOldStyleMessage1() { [EOL]     assertEquals(new JsMessage.Builder("MSG_SILLY").appendStringPart("silly test message").setDesc("Description.").build(), extractMessage("var MSG_SILLY_HELP = 'Description.';", "var MSG_SILLY = 'silly test message';")); [EOL] } <line_num>: 117,127
public void testExtractOldStyleMessage2() { [EOL]     assertEquals(new JsMessage.Builder("MSG_SILLY").appendStringPart("silly test message").setDesc("Description.").build(), extractMessage("var MSG_SILLY = 'silly test message';", "var MSG_SILLY_HELP = 'Descrip' + 'tion.';")); [EOL] } <line_num>: 129,139
public void testExtractOldStyleMessage3() { [EOL]     assertEquals(new JsMessage.Builder("MSG_SILLY").appendPlaceholderReference("one").appendStringPart(", ").appendPlaceholderReference("two").appendStringPart(", buckle my shoe").build(), extractMessage("var MSG_SILLY = function(one, two) {", "  return one + ', ' + two + ', buckle my shoe';", "};")); [EOL] } <line_num>: 141,154
public void testExtractMixedMessages() { [EOL]     Iterator<JsMessage> msgs = extractMessages("var MSG_MONEY = function(amount) {", "  return 'You owe $' + amount +", "         ' to the credit card company.';", "};", "var MSG_TIME = goog.getMsg('You need to finish your work in ' +", "                           '{$duration} hours.', {'duration': d});", "var MSG_NAG = 'Clean your room.\\n\\nWash your clothes.';", "var MSG_NAG_HELP = 'Just some ' +", "                   'nags.';").iterator(); [EOL]     assertEquals(new JsMessage.Builder("MSG_MONEY").appendStringPart("You owe $").appendPlaceholderReference("amount").appendStringPart(" to the credit card company.").build(), msgs.next()); [EOL]     assertEquals(new JsMessage.Builder("MSG_TIME").appendStringPart("You need to finish your work in ").appendPlaceholderReference("duration").appendStringPart(" hours.").build(), msgs.next()); [EOL]     assertEquals(new JsMessage.Builder("MSG_NAG").appendStringPart("Clean your room.\n\nWash your clothes.").setDesc("Just some nags.").build(), msgs.next()); [EOL] } <line_num>: 156,189
public void testDuplicateUnnamedVariables() { [EOL]     Collection<JsMessage> msgs = extractMessages("function a() {", "  var MSG_UNNAMED_2 = goog.getMsg('foo');", "}", "function b() {", "  var MSG_UNNAMED_2 = goog.getMsg('bar');", "}"); [EOL]     assertEquals(2, msgs.size()); [EOL]     final Iterator<JsMessage> iter = msgs.iterator(); [EOL]     assertEquals("foo", iter.next().toString()); [EOL]     assertEquals("bar", iter.next().toString()); [EOL] } <line_num>: 191,206
public void testMeaningAnnotation() { [EOL]     List<JsMessage> msgs = Lists.newArrayList(extractMessages("var MSG_UNNAMED_1 = goog.getMsg('foo');", "var MSG_UNNAMED_2 = goog.getMsg('foo');")); [EOL]     assertEquals(2, msgs.size()); [EOL]     assertTrue(msgs.get(0).getId().equals(msgs.get(1).getId())); [EOL]     assertEquals(msgs.get(0), msgs.get(1)); [EOL]     msgs = Lists.newArrayList(extractMessages("var MSG_UNNAMED_1 = goog.getMsg('foo');", "/** @meaning bar */ var MSG_UNNAMED_2 = goog.getMsg('foo');")); [EOL]     assertEquals(2, msgs.size()); [EOL]     assertFalse(msgs.get(0).getId().equals(msgs.get(1).getId())); [EOL] } <line_num>: 208,223
private void assertEquals(JsMessage expected, JsMessage actual) { [EOL]     assertEquals(expected.getId(), actual.getId()); [EOL]     assertEquals(expected.getKey(), actual.getKey()); [EOL]     assertEquals(expected.parts(), actual.parts()); [EOL]     assertEquals(expected.placeholders(), actual.placeholders()); [EOL]     assertEquals(expected.getDesc(), actual.getDesc()); [EOL]     assertEquals(expected.isHidden(), actual.isHidden()); [EOL]     assertEquals(expected.getMeaning(), actual.getMeaning()); [EOL] } <line_num>: 225,233
