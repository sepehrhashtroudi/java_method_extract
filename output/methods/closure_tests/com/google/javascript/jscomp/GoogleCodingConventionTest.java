public void testVarAndOptionalParams() { [EOL]     Node args = new Node(Token.PARAM_LIST, Node.newString(Token.NAME, "a"), Node.newString(Token.NAME, "b")); [EOL]     Node optArgs = new Node(Token.PARAM_LIST, Node.newString(Token.NAME, "opt_a"), Node.newString(Token.NAME, "opt_b")); [EOL]     assertFalse(conv.isVarArgsParameter(args.getFirstChild())); [EOL]     assertFalse(conv.isVarArgsParameter(args.getLastChild())); [EOL]     assertFalse(conv.isVarArgsParameter(optArgs.getFirstChild())); [EOL]     assertFalse(conv.isVarArgsParameter(optArgs.getLastChild())); [EOL]     assertFalse(conv.isOptionalParameter(args.getFirstChild())); [EOL]     assertFalse(conv.isOptionalParameter(args.getLastChild())); [EOL]     assertTrue(conv.isOptionalParameter(optArgs.getFirstChild())); [EOL]     assertTrue(conv.isOptionalParameter(optArgs.getLastChild())); [EOL] } <line_num>: 31,48
public void testInlineName() { [EOL]     assertFalse(conv.isConstant("a")); [EOL]     assertTrue(conv.isConstant("XYZ123_")); [EOL]     assertTrue(conv.isConstant("ABC")); [EOL]     assertFalse(conv.isConstant("ABCdef")); [EOL]     assertFalse(conv.isConstant("aBC")); [EOL]     assertFalse(conv.isConstant("A")); [EOL]     assertFalse(conv.isConstant("_XYZ123")); [EOL]     assertTrue(conv.isConstant("a$b$XYZ123_")); [EOL]     assertTrue(conv.isConstant("a$b$ABC_DEF")); [EOL]     assertTrue(conv.isConstant("a$b$A")); [EOL]     assertFalse(conv.isConstant("a$b$a")); [EOL]     assertFalse(conv.isConstant("a$b$ABCdef")); [EOL]     assertFalse(conv.isConstant("a$b$aBC")); [EOL]     assertFalse(conv.isConstant("a$b$")); [EOL]     assertFalse(conv.isConstant("$")); [EOL] } <line_num>: 50,66
public void testExportedName() { [EOL]     assertTrue(conv.isExported("_a")); [EOL]     assertTrue(conv.isExported("_a_")); [EOL]     assertFalse(conv.isExported("a")); [EOL]     assertFalse(conv.isExported("$super", false)); [EOL]     assertTrue(conv.isExported("$super", true)); [EOL]     assertTrue(conv.isExported("$super")); [EOL] } <line_num>: 68,76
public void testPrivateName() { [EOL]     assertTrue(conv.isPrivate("a_")); [EOL]     assertFalse(conv.isPrivate("a")); [EOL]     assertFalse(conv.isPrivate("_a_")); [EOL] } <line_num>: 78,82
public void testEnumKey() { [EOL]     assertTrue(conv.isValidEnumKey("A")); [EOL]     assertTrue(conv.isValidEnumKey("123")); [EOL]     assertTrue(conv.isValidEnumKey("FOO_BAR")); [EOL]     assertFalse(conv.isValidEnumKey("a")); [EOL]     assertFalse(conv.isValidEnumKey("someKeyInCamelCase")); [EOL]     assertFalse(conv.isValidEnumKey("_FOO_BAR")); [EOL] } <line_num>: 84,92
public void testInheritanceDetection1() { [EOL]     assertNotClassDefining("goog.foo(A, B);"); [EOL] } <line_num>: 94,96
public void testInheritanceDetection2() { [EOL]     assertDefinesClasses("goog.inherits(A, B);", "A", "B"); [EOL] } <line_num>: 98,100
public void testInheritanceDetection3() { [EOL]     assertDefinesClasses("A.inherits(B);", "A", "B"); [EOL] } <line_num>: 102,104
public void testInheritanceDetection4() { [EOL]     assertDefinesClasses("goog.inherits(goog.A, goog.B);", "goog.A", "goog.B"); [EOL] } <line_num>: 106,108
public void testInheritanceDetection5() { [EOL]     assertDefinesClasses("goog.A.inherits(goog.B);", "goog.A", "goog.B"); [EOL] } <line_num>: 110,112
public void testInheritanceDetection6() { [EOL]     assertNotClassDefining("A.inherits(this.B);"); [EOL] } <line_num>: 114,116
public void testInheritanceDetection7() { [EOL]     assertNotClassDefining("this.A.inherits(B);"); [EOL] } <line_num>: 118,120
public void testInheritanceDetection8() { [EOL]     assertNotClassDefining("goog.inherits(A, B, C);"); [EOL] } <line_num>: 122,124
public void testInheritanceDetection9() { [EOL]     assertDefinesClasses("A.mixin(B.prototype);", "A", "B"); [EOL] } <line_num>: 126,129
public void testInheritanceDetection10() { [EOL]     assertDefinesClasses("goog.mixin(A.prototype, B.prototype);", "A", "B"); [EOL] } <line_num>: 131,134
public void testInheritanceDetectionPostCollapseProperties() { [EOL]     assertDefinesClasses("goog$inherits(A, B);", "A", "B"); [EOL]     assertNotClassDefining("goog$inherits(A);"); [EOL] } <line_num>: 136,139
private void assertNotClassDefining(String code) { [EOL]     Node n = parseTestCode(code); [EOL]     assertNull(conv.getClassesDefinedByCall(n.getFirstChild())); [EOL] } <line_num>: 141,144
private void assertDefinesClasses(String code, String subclassName, String superclassName) { [EOL]     Node n = parseTestCode(code); [EOL]     SubclassRelationship classes = conv.getClassesDefinedByCall(n.getFirstChild()); [EOL]     assertNotNull(classes); [EOL]     assertEquals(subclassName, classes.subclassName); [EOL]     assertEquals(superclassName, classes.superclassName); [EOL] } <line_num>: 146,154
private Node parseTestCode(String code) { [EOL]     Compiler compiler = new Compiler(); [EOL]     return compiler.parseTestCode(code).getFirstChild(); [EOL] } <line_num>: 156,159
