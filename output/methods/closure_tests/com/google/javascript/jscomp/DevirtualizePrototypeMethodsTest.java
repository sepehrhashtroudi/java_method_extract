public DevirtualizePrototypeMethodsTest() { [EOL]     super(EXTERNAL_SYMBOLS); [EOL]     typeInformation = Lists.newArrayList(); [EOL] } <line_num>: 39,42
private RewritePrototypeMethodTestInput() { [EOL] } <line_num>: 130,130
private NoRewriteDeclarationUsedAsRValue() { [EOL] } <line_num>: 174,174
private NoRewriteIfNotInGlobalScopeTestInput() { [EOL] } <line_num>: 205,205
private NoRewriteMultipleDefinitionTestInput() { [EOL] } <line_num>: 253,253
private NoRewritePrototypeObjectLiteralsTestInput() { [EOL] } <line_num>: 294,294
private NoRewriteNonCallReferenceTestInput() { [EOL] } <line_num>: 368,368
private NoRewriteNestedFunctionTestInput() { [EOL] } <line_num>: 405,405
private ModuleTestInput() { [EOL] } <line_num>: 547,547
TypeInformationGatherer(Compiler compiler, CompilerPass passUnderTest, List<String> typeInformation) { [EOL]     this.compiler = compiler; [EOL]     this.passUnderTest = passUnderTest; [EOL]     this.typeInformation = typeInformation; [EOL] } <line_num>: 656,662
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 44,48
@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     super.enableLineNumberCheck(true); [EOL]     disableTypeCheck(); [EOL] } <line_num>: 50,55
private static String newlineJoin(String... parts) { [EOL]     return Joiner.on("\n").join(parts); [EOL] } <line_num>: 60,62
private static String semicolonJoin(String... parts) { [EOL]     return Joiner.on(";").join(parts); [EOL] } <line_num>: 67,69
public void testRewritePrototypeMethods1() throws Exception { [EOL]     disableTypeCheck(); [EOL]     checkTypes(RewritePrototypeMethodTestInput.INPUT, RewritePrototypeMethodTestInput.EXPECTED, RewritePrototypeMethodTestInput.EXPECTED_TYPE_CHECKING_OFF); [EOL] } <line_num>: 133,139
public void testRewritePrototypeMethods2() throws Exception { [EOL]     enableTypeCheck(CheckLevel.ERROR); [EOL]     checkTypes(RewritePrototypeMethodTestInput.INPUT, RewritePrototypeMethodTestInput.EXPECTED, RewritePrototypeMethodTestInput.EXPECTED_TYPE_CHECKING_ON); [EOL] } <line_num>: 141,147
public void testRewriteChained() throws Exception { [EOL]     String source = newlineJoin("A.prototype.foo = function(){return this.b};", "B.prototype.bar = function(){};", "o.foo().bar()"); [EOL]     String expected = newlineJoin("var JSCompiler_StaticMethods_foo = ", "function(JSCompiler_StaticMethods_foo$self) {", "  return JSCompiler_StaticMethods_foo$self.b", "};", "var JSCompiler_StaticMethods_bar = ", "function(JSCompiler_StaticMethods_bar$self) {", "};", "JSCompiler_StaticMethods_bar(JSCompiler_StaticMethods_foo(o))"); [EOL]     test(source, expected); [EOL] } <line_num>: 149,165
public void testRewriteDeclIsExpressionStatement() throws Exception { [EOL]     test(semicolonJoin(NoRewriteDeclarationUsedAsRValue.DECL, NoRewriteDeclarationUsedAsRValue.CALL), "var JSCompiler_StaticMethods_foo =" + "function(JSCompiler_StaticMethods_foo$self) {};" + "JSCompiler_StaticMethods_foo(o)"); [EOL] } <line_num>: 177,183
public void testNoRewriteDeclUsedAsAssignmentRhs() throws Exception { [EOL]     testSame(semicolonJoin("var c = " + NoRewriteDeclarationUsedAsRValue.DECL, NoRewriteDeclarationUsedAsRValue.CALL)); [EOL] } <line_num>: 185,188
public void testNoRewriteDeclUsedAsCallArgument() throws Exception { [EOL]     testSame(semicolonJoin("f(" + NoRewriteDeclarationUsedAsRValue.DECL + ")", NoRewriteDeclarationUsedAsRValue.CALL)); [EOL] } <line_num>: 190,193
public void testRewriteInGlobalScope() throws Exception { [EOL]     String expected = newlineJoin("function a(){}", "var JSCompiler_StaticMethods_foo = ", "function(JSCompiler_StaticMethods_foo$self) {", "  return JSCompiler_StaticMethods_foo$self.x", "};", "var o = new a;", "JSCompiler_StaticMethods_foo(o);"); [EOL]     test(NoRewriteIfNotInGlobalScopeTestInput.INPUT, expected); [EOL] } <line_num>: 208,219
public void testNoRewriteIfNotInGlobalScope1() throws Exception { [EOL]     testSame("if(true){" + NoRewriteIfNotInGlobalScopeTestInput.INPUT + "}"); [EOL] } <line_num>: 221,223
public void testNoRewriteIfNotInGlobalScope2() throws Exception { [EOL]     testSame("function enclosingFunction() {" + NoRewriteIfNotInGlobalScopeTestInput.INPUT + "}"); [EOL] } <line_num>: 225,229
public void testNoRewriteNamespaceFunctions() throws Exception { [EOL]     String source = newlineJoin("function a(){}", "a.foo = function() {return this.x};", "a.foo()"); [EOL]     testSame(source); [EOL] } <line_num>: 231,237
public void testRewriteSingleDefinition1() throws Exception { [EOL]     test(semicolonJoin(NoRewriteMultipleDefinitionTestInput.SOURCE_A, NoRewriteMultipleDefinitionTestInput.CALL), NoRewriteMultipleDefinitionTestInput.SINGLE_DEFINITION_EXPECTED); [EOL] } <line_num>: 256,260
public void testRewriteSingleDefinition2() throws Exception { [EOL]     test(semicolonJoin(NoRewriteMultipleDefinitionTestInput.SOURCE_B, NoRewriteMultipleDefinitionTestInput.CALL), NoRewriteMultipleDefinitionTestInput.SINGLE_DEFINITION_EXPECTED); [EOL] } <line_num>: 262,266
public void testNoRewriteMultipleDefinition1() throws Exception { [EOL]     testSame(semicolonJoin(NoRewriteMultipleDefinitionTestInput.SOURCE_A, NoRewriteMultipleDefinitionTestInput.SOURCE_A, NoRewriteMultipleDefinitionTestInput.CALL)); [EOL] } <line_num>: 268,272
public void testNoRewriteMultipleDefinition2() throws Exception { [EOL]     testSame(semicolonJoin(NoRewriteMultipleDefinitionTestInput.SOURCE_B, NoRewriteMultipleDefinitionTestInput.SOURCE_B, NoRewriteMultipleDefinitionTestInput.CALL)); [EOL] } <line_num>: 274,278
public void testNoRewriteMultipleDefinition3() throws Exception { [EOL]     testSame(semicolonJoin(NoRewriteMultipleDefinitionTestInput.SOURCE_A, NoRewriteMultipleDefinitionTestInput.SOURCE_B, NoRewriteMultipleDefinitionTestInput.CALL)); [EOL] } <line_num>: 280,284
public void testRewritePrototypeNoObjectLiterals() throws Exception { [EOL]     test(semicolonJoin(NoRewritePrototypeObjectLiteralsTestInput.REGULAR, NoRewritePrototypeObjectLiteralsTestInput.CALL), "var JSCompiler_StaticMethods_foo = " + "function(JSCompiler_StaticMethods_foo$self) {};" + "JSCompiler_StaticMethods_foo(o)"); [EOL] } <line_num>: 297,303
public void testRewritePrototypeObjectLiterals1() throws Exception { [EOL]     test(semicolonJoin(NoRewritePrototypeObjectLiteralsTestInput.OBJ_LIT, NoRewritePrototypeObjectLiteralsTestInput.CALL), "a.prototype={};" + "var JSCompiler_StaticMethods_foo=" + "function(JSCompiler_StaticMethods_foo$self){};" + "JSCompiler_StaticMethods_foo(o)"); [EOL] } <line_num>: 305,312
public void testNoRewritePrototypeObjectLiterals2() throws Exception { [EOL]     testSame(semicolonJoin(NoRewritePrototypeObjectLiteralsTestInput.OBJ_LIT, NoRewritePrototypeObjectLiteralsTestInput.REGULAR, NoRewritePrototypeObjectLiteralsTestInput.CALL)); [EOL] } <line_num>: 314,318
public void testNoRewriteExternalMethods1() throws Exception { [EOL]     testSame("a.externalMethod()"); [EOL] } <line_num>: 320,322
public void testNoRewriteExternalMethods2() throws Exception { [EOL]     testSame("A.prototype.externalMethod = function(){}; o.externalMethod()"); [EOL] } <line_num>: 324,326
public void testNoRewriteCodingConvention() throws Exception { [EOL]     testSame("a.prototype._foo = function() {};"); [EOL] } <line_num>: 328,331
public void testRewriteNoVarArgs() throws Exception { [EOL]     String source = newlineJoin("function a(){}", "a.prototype.foo = function(args) {return args};", "var o = new a;", "o.foo()"); [EOL]     String expected = newlineJoin("function a(){}", "var JSCompiler_StaticMethods_foo = ", "  function(JSCompiler_StaticMethods_foo$self, args) {return args};", "var o = new a;", "JSCompiler_StaticMethods_foo(o)"); [EOL]     test(source, expected); [EOL] } <line_num>: 333,348
public void testNoRewriteVarArgs() throws Exception { [EOL]     String source = newlineJoin("function a(){}", "a.prototype.foo = function(var_args) {return arguments};", "var o = new a;", "o.foo()"); [EOL]     testSame(source); [EOL] } <line_num>: 350,357
public void testRewriteCallReference() throws Exception { [EOL]     String expected = newlineJoin("function a(){}", "var JSCompiler_StaticMethods_foo = ", "function(JSCompiler_StaticMethods_foo$self) {", "  return JSCompiler_StaticMethods_foo$self.x", "};", "var o = new a;", "JSCompiler_StaticMethods_foo(o);"); [EOL]     test(NoRewriteNonCallReferenceTestInput.BASE + "o.foo()", expected); [EOL] } <line_num>: 371,382
public void testNoRewriteNoReferences() throws Exception { [EOL]     testSame(NoRewriteNonCallReferenceTestInput.BASE); [EOL] } <line_num>: 384,386
public void testNoRewriteNonCallReference() throws Exception { [EOL]     testSame(NoRewriteNonCallReferenceTestInput.BASE + "o.foo && o.foo()"); [EOL] } <line_num>: 388,390
public void testRewriteNoNestedFunction() throws Exception { [EOL]     test(semicolonJoin(NoRewriteNestedFunctionTestInput.PREFIX + "}", NoRewriteNestedFunctionTestInput.SUFFIX, NoRewriteNestedFunctionTestInput.INNER), semicolonJoin(NoRewriteNestedFunctionTestInput.EXPECTED_PREFIX + "}", NoRewriteNestedFunctionTestInput.EXPECTED_SUFFIX, "var JSCompiler_StaticMethods_bar=" + "function(JSCompiler_StaticMethods_bar$self){}", "JSCompiler_StaticMethods_bar(o)")); [EOL] } <line_num>: 408,419
public void testNoRewriteNestedFunction() throws Exception { [EOL]     test(NoRewriteNestedFunctionTestInput.PREFIX + NoRewriteNestedFunctionTestInput.INNER + "};" + NoRewriteNestedFunctionTestInput.SUFFIX, NoRewriteNestedFunctionTestInput.EXPECTED_PREFIX + NoRewriteNestedFunctionTestInput.INNER + "};" + NoRewriteNestedFunctionTestInput.EXPECTED_SUFFIX); [EOL] } <line_num>: 421,428
public void testRewriteImplementedMethod() throws Exception { [EOL]     String source = newlineJoin("function a(){}", "a.prototype.foo = function(args) {return args};", "var o = new a;", "o.foo()"); [EOL]     String expected = newlineJoin("function a(){}", "var JSCompiler_StaticMethods_foo = ", "  function(JSCompiler_StaticMethods_foo$self, args) {return args};", "var o = new a;", "JSCompiler_StaticMethods_foo(o)"); [EOL]     test(source, expected); [EOL] } <line_num>: 430,443
public void testRewriteImplementedMethod2() throws Exception { [EOL]     String source = newlineJoin("function a(){}", "a.prototype['foo'] = function(args) {return args};", "var o = new a;", "o.foo()"); [EOL]     testSame(source); [EOL] } <line_num>: 445,452
public void testRewriteImplementedMethod3() throws Exception { [EOL]     String source = newlineJoin("function a(){}", "a.prototype.foo = function(args) {return args};", "var o = new a;", "o['foo']"); [EOL]     testSame(source); [EOL] } <line_num>: 454,461
public void testRewriteImplementedMethod4() throws Exception { [EOL]     String source = newlineJoin("function a(){}", "a.prototype['foo'] = function(args) {return args};", "var o = new a;", "o['foo']"); [EOL]     testSame(source); [EOL] } <line_num>: 463,470
public void testRewriteImplementedMethodInObj() throws Exception { [EOL]     String source = newlineJoin("function a(){}", "a.prototype = {foo: function(args) {return args}};", "var o = new a;", "o.foo()"); [EOL]     test(source, "function a(){}" + "a.prototype={};" + "var JSCompiler_StaticMethods_foo=" + "function(JSCompiler_StaticMethods_foo$self,args){return args};" + "var o=new a;" + "JSCompiler_StaticMethods_foo(o)"); [EOL] } <line_num>: 472,485
public void testNoRewriteGet1() throws Exception { [EOL]     String source = newlineJoin("function a(){}", "a.prototype = {get foo(){return f}};", "var o = new a;", "o.foo()"); [EOL]     testSame(source); [EOL] } <line_num>: 487,495
public void testNoRewriteGet2() throws Exception { [EOL]     String source = newlineJoin("function a(){}", "a.prototype = {get foo(){return 1}};", "var o = new a;", "o.foo"); [EOL]     testSame(source); [EOL] } <line_num>: 497,505
public void testNoRewriteSet1() throws Exception { [EOL]     String source = newlineJoin("function a(){}", "a.prototype = {set foo(a){}};", "var o = new a;", "o.foo()"); [EOL]     testSame(source); [EOL] } <line_num>: 507,515
public void testNoRewriteSet2() throws Exception { [EOL]     String source = newlineJoin("function a(){}", "a.prototype = {set foo(a){}};", "var o = new a;", "o.foo = 1"); [EOL]     testSame(source); [EOL] } <line_num>: 517,525
public void testNoRewriteNotImplementedMethod() throws Exception { [EOL]     testSame(newlineJoin("function a(){}", "var o = new a;", "o.foo()")); [EOL] } <line_num>: 527,531
public void testWrapper() { [EOL]     testSame("(function() {})()"); [EOL] } <line_num>: 533,535
public void testRewriteSameModule1() throws Exception { [EOL]     JSModule[] modules = createModuleStar(semicolonJoin(ModuleTestInput.DEFINITION, ModuleTestInput.USE), ""); [EOL]     test(modules, new String[] { semicolonJoin(ModuleTestInput.REWRITTEN_DEFINITION, ModuleTestInput.REWRITTEN_USE), "" }); [EOL] } <line_num>: 550,565
public void testRewriteSameModule2() throws Exception { [EOL]     JSModule[] modules = createModuleStar("", semicolonJoin(ModuleTestInput.DEFINITION, ModuleTestInput.USE)); [EOL]     test(modules, new String[] { "", semicolonJoin(ModuleTestInput.REWRITTEN_DEFINITION, ModuleTestInput.REWRITTEN_USE) }); [EOL] } <line_num>: 567,582
public void testRewriteSameModule3() throws Exception { [EOL]     JSModule[] modules = createModuleStar(semicolonJoin(ModuleTestInput.USE, ModuleTestInput.DEFINITION), ""); [EOL]     test(modules, new String[] { semicolonJoin(ModuleTestInput.REWRITTEN_USE, ModuleTestInput.REWRITTEN_DEFINITION), "" }); [EOL] } <line_num>: 584,599
public void testRewriteDefinitionBeforeUse() throws Exception { [EOL]     JSModule[] modules = createModuleStar(ModuleTestInput.DEFINITION, ModuleTestInput.USE); [EOL]     test(modules, new String[] { ModuleTestInput.REWRITTEN_DEFINITION, ModuleTestInput.REWRITTEN_USE }); [EOL] } <line_num>: 601,614
public void testNoRewriteUseBeforeDefinition() throws Exception { [EOL]     JSModule[] modules = createModuleStar(ModuleTestInput.USE, ModuleTestInput.DEFINITION); [EOL]     testSame(modules); [EOL] } <line_num>: 616,624
private void checkTypes(String source, String expected, List<String> expectedTypes) { [EOL]     typeInformation.clear(); [EOL]     test(source, expected); [EOL]     assertEquals(expectedTypes, typeInformation); [EOL] } <line_num>: 631,637
@Override [EOL] protected CompilerPass getProcessor(Compiler compiler) { [EOL]     return new TypeInformationGatherer(compiler, new DevirtualizePrototypeMethods(compiler), typeInformation); [EOL] } <line_num>: 639,643
@Override [EOL] public void process(Node externs, Node root) { [EOL]     passUnderTest.process(externs, root); [EOL]     NodeTraversal.traverse(compiler, externs, new GatherCallback()); [EOL]     NodeTraversal.traverse(compiler, root, new GatherCallback()); [EOL] } <line_num>: 664,669
public String getNameString(Node n) { [EOL]     int type = n.getType(); [EOL]     if (type == Token.NAME) { [EOL]         return n.getString(); [EOL]     } else if (type == Token.GETPROP) { [EOL]         String left = getNameString(n.getFirstChild()); [EOL]         if (left == null) { [EOL]             return null; [EOL]         } [EOL]         return left + "." + n.getLastChild().getString(); [EOL]     } else if (type == Token.GETELEM) { [EOL]         String left = getNameString(n.getFirstChild()); [EOL]         if (left == null) { [EOL]             return null; [EOL]         } [EOL]         return left + "[" + n.getLastChild().getString() + "]"; [EOL]     } else if (type == Token.THIS) { [EOL]         return "this"; [EOL]     } else if (type == Token.FUNCTION) { [EOL]         return "{ANON FUNCTION}"; [EOL]     } else { [EOL]         return null; [EOL]     } [EOL] } <line_num>: 671,695
@Override [EOL] public void visit(NodeTraversal traversal, Node node, Node parent) { [EOL]     Node nameNode = null; [EOL]     if (node.isFunction()) { [EOL]         if (parent.isName()) { [EOL]             nameNode = parent; [EOL]         } else if (parent.isAssign()) { [EOL]             nameNode = parent.getFirstChild(); [EOL]         } else { [EOL]             nameNode = node.getFirstChild(); [EOL]         } [EOL]     } else if (node.isCall() || node.isNew()) { [EOL]         nameNode = node.getFirstChild(); [EOL]     } [EOL]     if (nameNode != null) { [EOL]         JSType type = node.getJSType(); [EOL]         typeInformation.add(Joiner.on("").join(Token.name(node.getType()), " ", getNameString(nameNode), " = ", (type != null) ? type.toString() : "null")); [EOL]     } [EOL]     if (node.isGetProp()) { [EOL]         Node child = node.getFirstChild(); [EOL]         if (child.isName() && child.getString().endsWith("$self")) { [EOL]             JSType type = child.getJSType(); [EOL]             typeInformation.add(Joiner.on("").join(Token.name(child.getType()), " ", child.getString(), " = ", (type != null) ? type.toString() : "null")); [EOL]         } [EOL]     } [EOL] } <line_num>: 698,737
