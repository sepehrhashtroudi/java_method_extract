@Override [EOL] protected CompilerPass getProcessor(Compiler compiler) { [EOL]     return createValidator(); [EOL] } <line_num>: 33,36
@Override [EOL] public void handleViolation(String message, Node n) { [EOL]     lastCheckWasValid = false; [EOL] } <line_num>: 41,44
private AstValidator createValidator() { [EOL]     lastCheckWasValid = true; [EOL]     return new AstValidator(new ViolationHandler() { [EOL]  [EOL]         @Override [EOL]         public void handleViolation(String message, Node n) { [EOL]             lastCheckWasValid = false; [EOL]         } [EOL]     }); [EOL] } <line_num>: 38,46
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 48,51
@Override [EOL] protected void setUp() throws Exception { [EOL]     super.enableAstValidation(false); [EOL]     super.disableNormalize(); [EOL]     super.enableLineNumberCheck(false); [EOL]     super.setUp(); [EOL] } <line_num>: 53,59
public void testForIn() { [EOL]     valid("for(var a in b);"); [EOL]     valid("for(var a = 1 in b);"); [EOL]     valid("for(a in b);"); [EOL]     valid("for(a in []);"); [EOL]     valid("for(a in {});"); [EOL] } <line_num>: 61,67
public void testDebugger() { [EOL]     valid("debugger;"); [EOL] } <line_num>: 69,71
public void testValidScript() { [EOL]     Node n = new Node(Token.SCRIPT); [EOL]     expectInvalid(n, Check.SCRIPT); [EOL]     n.setInputId(new InputId("something_input")); [EOL]     n.setStaticSourceFile(new SimpleSourceFile("something", false)); [EOL]     expectValid(n, Check.SCRIPT); [EOL]     expectInvalid(n, Check.STATEMENT); [EOL]     expectInvalid(n, Check.EXPRESSION); [EOL] } <line_num>: 73,81
public void testValidStatement1() { [EOL]     Node n = new Node(Token.RETURN); [EOL]     expectInvalid(n, Check.EXPRESSION); [EOL]     expectValid(n, Check.STATEMENT); [EOL]     expectInvalid(n, Check.SCRIPT); [EOL] } <line_num>: 83,88
public void testValidExpression1() { [EOL]     Node n = new Node(Token.ARRAYLIT, new Node(Token.EMPTY)); [EOL]     expectValid(n, Check.EXPRESSION); [EOL]     expectInvalid(n, Check.STATEMENT); [EOL]     expectInvalid(n, Check.SCRIPT); [EOL] } <line_num>: 90,95
public void testValidExpression2() { [EOL]     Node n = new Node(Token.NOT, new Node(Token.TRUE)); [EOL]     expectValid(n, Check.EXPRESSION); [EOL]     expectInvalid(n, Check.STATEMENT); [EOL]     expectInvalid(n, Check.SCRIPT); [EOL] } <line_num>: 97,102
public void testInvalidEmptyStatement() { [EOL]     Node n = new Node(Token.EMPTY, new Node(Token.TRUE)); [EOL]     expectInvalid(n, Check.STATEMENT); [EOL]     n.detachChildren(); [EOL]     expectValid(n, Check.STATEMENT); [EOL] } <line_num>: 104,109
private void valid(String code) { [EOL]     testSame(code); [EOL]     assertTrue(lastCheckWasValid); [EOL] } <line_num>: 111,114
private boolean doCheck(Node n, Check level) { [EOL]     AstValidator validator = createValidator(); [EOL]     switch(level) { [EOL]         case SCRIPT: [EOL]             validator.validateScript(n); [EOL]             break; [EOL]         case STATEMENT: [EOL]             validator.validateStatement(n); [EOL]             break; [EOL]         case EXPRESSION: [EOL]             validator.validateExpression(n); [EOL]             break; [EOL]     } [EOL]     return lastCheckWasValid; [EOL] } <line_num>: 122,136
private void expectInvalid(Node n, Check level) { [EOL]     assertFalse(doCheck(n, level)); [EOL] } <line_num>: 138,140
private void expectValid(Node n, Check level) { [EOL]     assertTrue(doCheck(n, level)); [EOL] } <line_num>: 142,144
