private PeepholeIntegrationTest(boolean compareAsTree) { [EOL]     super("", compareAsTree); [EOL] } <line_num>: 27,29
public PeepholeIntegrationTest() { [EOL]     super(""); [EOL] } <line_num>: 31,33
@Override [EOL] public void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     this.late = false; [EOL]     enableLineNumberCheck(true); [EOL]     disableNormalize(); [EOL] } <line_num>: 35,44
@Override [EOL] public CompilerPass getProcessor(final Compiler compiler) { [EOL]     PeepholeOptimizationsPass peepholePass = new PeepholeOptimizationsPass(compiler, new PeepholeSubstituteAlternateSyntax(late), new PeepholeRemoveDeadCode(), new PeepholeFoldConstants(late)); [EOL]     return peepholePass; [EOL] } <line_num>: 46,56
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 4; [EOL] } <line_num>: 58,62
private void foldSame(String js) { [EOL]     testSame(js); [EOL] } <line_num>: 64,66
private void fold(String js, String expected) { [EOL]     test(js, expected); [EOL] } <line_num>: 68,70
private void assertResultString(String js, String expected) { [EOL]     PeepholeIntegrationTest scTest = new PeepholeIntegrationTest(false); [EOL]     scTest.disableNormalize(); [EOL]     scTest.test(js, expected); [EOL] } <line_num>: 74,80
public void testTrueFalse() { [EOL]     late = false; [EOL]     foldSame("x = true"); [EOL]     foldSame("x = false"); [EOL]     fold("x = !1", "x = false"); [EOL]     fold("x = !0", "x = true"); [EOL]     late = true; [EOL]     fold("x = true", "x = !0"); [EOL]     fold("x = false", "x = !1"); [EOL]     foldSame("x = !1"); [EOL]     foldSame("x = !0"); [EOL] } <line_num>: 82,93
public void testFoldOneChildBlocksIntegration() { [EOL]     fold("function f(){switch(foo()){default:{break}}}", "function f(){foo()}"); [EOL]     fold("function f(){switch(x){default:{break}}}", "function f(){}"); [EOL]     fold("function f(){switch(x){default:x;case 1:return 2}}", "function f(){switch(x){default:case 1:return 2}}"); [EOL]     fold("if(x){if(true){foo();foo()}else{bar();bar()}}", "if(x){foo();foo()}"); [EOL]     fold("if(x){if(false){foo();foo()}else{bar();bar()}}", "if(x){bar();bar()}"); [EOL]     fold("if(x()){}", "x()"); [EOL]     fold("if(x()){} else {x()}", "x()||x()"); [EOL]     fold("if(x){}", ""); [EOL]     fold("if(a()){A()} else if (b()) {} else {C()}", "a()?A():b()||C()"); [EOL]     fold("if(a()){} else if (b()) {} else {C()}", "a()||b()||C()"); [EOL]     fold("if(a()){A()} else if (b()) {} else if (c()) {} else{D()}", "a()?A():b()||c()||D()"); [EOL]     fold("if(a()){} else if (b()) {} else if (c()) {} else{D()}", "a()||b()||c()||D()"); [EOL]     fold("if(a()){A()} else if (b()) {} else if (c()) {} else{}", "a()?A():b()||c()"); [EOL]     fold("function foo(){if(x()){}}", "function foo(){x()}"); [EOL] } <line_num>: 96,132
public void testFoldOneChildBlocksStringCompare() { [EOL]     assertResultString("if(x){if(y){var x;}}else{var z;}", "if(x){if(y)var x}else var z"); [EOL] } <line_num>: 134,138
public void testNecessaryDanglingElse() { [EOL]     assertResultString("if(x)if(y){y();z()}else;else x()", "if(x){if(y){y();z()}}else x()"); [EOL] } <line_num>: 141,147
public void testFoldReturnsIntegration() { [EOL]     fold("function f(){if(x)return;else return}", "function f(){}"); [EOL] } <line_num>: 150,154
public void testBug1059649() { [EOL]     fold("if(x){var y=3;}var z=5", "if(x)var y=3;var z=5"); [EOL]     foldSame("if(x){var y=3;}else{var y=4;}var z=5"); [EOL]     fold("while(x){var y=3;}var z=5", "while(x)var y=3;var z=5"); [EOL]     fold("for(var i=0;i<10;i++){var y=3;}var z=5", "for(var i=0;i<10;i++)var y=3;var z=5"); [EOL]     fold("for(var i in x){var y=3;}var z=5", "for(var i in x)var y=3;var z=5"); [EOL]     fold("do{var y=3;}while(x);var z=5", "do var y=3;while(x);var z=5"); [EOL] } <line_num>: 156,168
public void testHookIfIntegration() { [EOL]     fold("if (false){ x = 1; } else if (cond) { x = 2; } else { x = 3; }", "x=cond?2:3"); [EOL]     fold("x?void 0:y()", "x||y()"); [EOL]     fold("!x?void 0:y()", "(!x)||y()"); [EOL]     fold("x?y():void 0", "x&&y()"); [EOL] } <line_num>: 170,177
public void testRemoveDuplicateStatementsIntegration() { [EOL]     fold("function z() {if (a) { return true }" + "else if (b) { return true }" + "else { return true }}", "function z() {return true;}"); [EOL]     fold("function z() {if (a()) { return true }" + "else if (b()) { return true }" + "else { return true }}", "function z() {a()||b();return true;}"); [EOL] } <line_num>: 179,189
public void testFoldLogicalOpIntegration() { [EOL]     test("if(x && true) z()", "x&&z()"); [EOL]     test("if(x && false) z()", ""); [EOL]     fold("if(x || 3) z()", "z()"); [EOL]     fold("if(x || false) z()", "x&&z()"); [EOL]     test("if(x==y && false) z()", ""); [EOL]     fold("if(y() || x || 3) z()", "(y()||1)&&z()"); [EOL] } <line_num>: 191,199
public void testFoldBitwiseOpStringCompareIntegration() { [EOL]     assertResultString("while(-1 | 0){}", "while(1);"); [EOL] } <line_num>: 201,203
public void testVarLiftingIntegration() { [EOL]     fold("if(true);else var a;", "var a"); [EOL]     fold("if(false) foo();else var a;", "var a"); [EOL]     fold("if(true)var a;else;", "var a"); [EOL]     fold("if(false)var a;else;", "var a"); [EOL]     fold("if(false)var a,b;", "var b; var a"); [EOL]     fold("if(false){var a;var a;}", "var a"); [EOL]     fold("if(false)var a=function(){var b};", "var a"); [EOL]     fold("if(a)if(false)var a;else var b;", "var a;if(a)var b"); [EOL] } <line_num>: 205,214
public void testBug1438784() throws Exception { [EOL]     fold("for(var i=0;i<10;i++)if(x)x.y;", "for(var i=0;i<10;i++);"); [EOL] } <line_num>: 216,218
public void testFoldUselessWhileIntegration() { [EOL]     fold("while(!true) { foo() }", ""); [EOL]     fold("while(!false) foo() ", "while(1) foo()"); [EOL]     fold("while(!void 0) foo()", "while(1) foo()"); [EOL]     fold("if(foo())while(false){foo()}else bar()", "foo()||bar()"); [EOL] } <line_num>: 220,227
public void testFoldUselessForIntegration() { [EOL]     fold("for(;!true;) { foo() }", ""); [EOL]     fold("for(;void 0;) { foo() }", ""); [EOL]     fold("for(;undefined;) { foo() }", ""); [EOL]     fold("for(;1;) foo()", "for(;;) foo()"); [EOL]     fold("for(;!void 0;) foo()", "for(;;) foo()"); [EOL]     fold("if(foo())for(;false;){foo()}else bar()", "foo()||bar()"); [EOL] } <line_num>: 229,238
public void testFoldUselessDoIntegration() { [EOL]     test("do { foo() } while(!true);", "foo()"); [EOL]     fold("do { foo() } while(void 0);", "foo()"); [EOL]     fold("do { foo() } while(undefined);", "foo()"); [EOL]     fold("do { foo() } while(!void 0);", "do { foo() } while(1);"); [EOL]     test("if(foo())do {foo()} while(false) else bar()", "foo()?foo():bar()"); [EOL] } <line_num>: 240,248
public void testMinimizeWhileConstantConditionIntegration() { [EOL]     fold("while(!false) foo()", "while(1) foo()"); [EOL]     fold("while(202) foo()", "while(1) foo()"); [EOL]     fold("while(Infinity) foo()", "while(1) foo()"); [EOL]     fold("while('text') foo()", "while(1) foo()"); [EOL]     fold("while([]) foo()", "while(1) foo()"); [EOL]     fold("while({}) foo()", "while(1) foo()"); [EOL]     fold("while(/./) foo()", "while(1) foo()"); [EOL] } <line_num>: 250,258
public void testMinimizeExpr() { [EOL]     test("!!true", ""); [EOL]     fold("!!x()", "x()"); [EOL]     test("!(!x()&&!y())", "x()||y()"); [EOL]     fold("x()||!!y()", "x()||y()"); [EOL]     fold("!!x()&&y()", "x()&&y()"); [EOL] } <line_num>: 260,269
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 273,276
public void testBug1509085() { [EOL]     PeepholeIntegrationTest oneRepetitiontest = new PeepholeIntegrationTest() { [EOL]  [EOL]         @Override [EOL]         protected int getNumRepetitions() { [EOL]             return 1; [EOL]         } [EOL]     }; [EOL]     oneRepetitiontest.test("x ? x() : void 0", "x&&x();"); [EOL]     oneRepetitiontest.foldSame("y = x ? x() : void 0"); [EOL] } <line_num>: 271,281
public void testBugIssue3() { [EOL]     foldSame("function foo() {" + "  if(sections.length != 1) children[i] = 0;" + "  else var selectedid = children[i]" + "}"); [EOL] } <line_num>: 283,288
public void testBugIssue43() { [EOL]     foldSame("function foo() {" + "  if (a) { var b = 1; } else { a.b = 1; }" + "}"); [EOL] } <line_num>: 290,294
public void testFoldNegativeBug() { [EOL]     fold("while(-3){};", "while(1);"); [EOL] } <line_num>: 296,298
public void testNoNormalizeLabeledExpr() { [EOL]     enableNormalize(true); [EOL]     foldSame("var x; foo:{x = 3;}"); [EOL]     foldSame("var x; foo:x = 3;"); [EOL] } <line_num>: 300,304
public void testShortCircuit1() { [EOL]     test("1 && a()", "a()"); [EOL] } <line_num>: 306,308
public void testShortCircuit2() { [EOL]     test("1 && a() && 2", "a()"); [EOL] } <line_num>: 310,312
public void testShortCircuit3() { [EOL]     test("a() && 1 && 2", "a()"); [EOL] } <line_num>: 314,316
public void testShortCircuit4() { [EOL]     test("a() && (1 && b())", "a() && b()"); [EOL]     test("a() && 1 && b()", "a() && b()"); [EOL]     test("(a() && 1) && b()", "a() && b()"); [EOL] } <line_num>: 318,322
public void testMinimizeExprCondition() { [EOL]     fold("(x || true) && y()", "y()"); [EOL]     fold("(x || false) && y()", "x&&y()"); [EOL]     fold("(x && true) && y()", "x && y()"); [EOL]     fold("(x && false) && y()", ""); [EOL]     fold("a = x || false ? b : c", "a=x?b:c"); [EOL]     fold("do {x()} while((x && false) && y())", "x()"); [EOL] } <line_num>: 324,331
public void testTrueFalseFolding() { [EOL]     late = true; [EOL]     fold("x = true", "x = !0"); [EOL]     fold("x = false", "x = !1"); [EOL]     fold("x = !3", "x = !1"); [EOL]     fold("x = true && !0", "x = !0"); [EOL]     fold("x = !!!!!!!!!!!!3", "x = !0"); [EOL]     fold("if(!3){x()}", ""); [EOL]     fold("if(!!3){x()}", "x()"); [EOL] } <line_num>: 333,342
public void testCommaSplitingConstantCondition() { [EOL]     late = false; [EOL]     fold("(b=0,b=1);if(b)x=b;", "b=0;b=1;x=b;"); [EOL]     fold("(b=0,b=1);if(b)x=b;", "b=0;b=1;x=b;"); [EOL] } <line_num>: 344,348
public void testAvoidCommaSplitting() { [EOL]     late = false; [EOL]     fold("x(),y(),z()", "x();y();z()"); [EOL]     late = true; [EOL]     foldSame("x(),y(),z()"); [EOL] } <line_num>: 350,355
public void testObjectLiteral() { [EOL]     test("({})", ""); [EOL]     test("({a:1})", ""); [EOL]     test("({a:foo()})", "foo()"); [EOL]     test("({'a':foo()})", "foo()"); [EOL] } <line_num>: 357,362
public void testArrayLiteral() { [EOL]     test("([])", ""); [EOL]     test("([1])", ""); [EOL]     test("([a])", ""); [EOL]     test("([foo()])", "foo()"); [EOL] } <line_num>: 364,369
public void testFoldIfs1() { [EOL]     fold("function f() {if (x) return 1; else if (y) return 1;}", "function f() {if (x||y) return 1;}"); [EOL]     fold("function f() {if (x) return 1; else {if (y) return 1; else foo();}}", "function f() {if (x||y) return 1; foo();}"); [EOL] } <line_num>: 371,376
public void testFoldIfs2() { [EOL]     fold("function f() {if (x) { a(); } else if (y) { a() }}", "function f() {x?a():y&&a();}"); [EOL] } <line_num>: 378,381
public void testFoldHook2() { [EOL]     fold("function f(a) {if (!a) return a; else return a;}", "function f(a) {return a}"); [EOL] } <line_num>: 383,386
public void disable_testFoldHook1() { [EOL]     fold("function f(a) {return (!a)?a:a;}", "function f(a) {return a}"); [EOL] } <line_num>: 388,391
