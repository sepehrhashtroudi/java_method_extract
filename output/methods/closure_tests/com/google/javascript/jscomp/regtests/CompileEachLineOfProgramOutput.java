public static void main(String[] args) throws IOException { [EOL]     if (args.length == 0) { [EOL]         usage(); [EOL]     } [EOL]     Runtime r = Runtime.getRuntime(); [EOL]     Process p = null; [EOL]     try { [EOL]         p = r.exec(args); [EOL]     } catch (IOException e) { [EOL]         if (args[0].equals("generatejs")) { [EOL]             System.out.println("generatejs not found, required for generating " + "fuzz test cases"); [EOL]             System.out.println("See: http://github.com/rictic/generatejs"); [EOL]             System.exit(2); [EOL]         } else { [EOL]             throw e; [EOL]         } [EOL]     } [EOL]     BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream())); [EOL]     int programsCompiled = 0, compilerErrors = 0; [EOL]     for (String program = br.readLine(); program != null; program = br.readLine()) { [EOL]         try { [EOL]             compile(program, programsCompiled); [EOL]         } catch (Exception e) { [EOL]             System.out.println("Compiler error on program #" + programsCompiled + ":"); [EOL]             System.out.println(program); [EOL]             System.out.println("Details:"); [EOL]             e.printStackTrace(System.out); [EOL]             System.out.println("\n\n\n"); [EOL]             compilerErrors++; [EOL]         } [EOL]         programsCompiled++; [EOL]     } [EOL]     if (compilerErrors == 0) { [EOL]         System.out.println(programsCompiled + " programs compiled without error"); [EOL]         System.exit(0); [EOL]     } else { [EOL]         System.out.println("==========FAILURE==========="); [EOL]         System.out.println(compilerErrors + " programs caused an error within the compiler out of " + programsCompiled + " tested."); [EOL]         System.exit(1); [EOL]     } [EOL] } <line_num>: 44,95
public static Result compile(String program, int num) { [EOL]     SourceFile input = SourceFile.fromCode("" + num, program); [EOL]     Compiler compiler = new Compiler(); [EOL]     Result result = compiler.compile(extern, input, options); [EOL]     return result; [EOL] } <line_num>: 97,102
private static void usage() { [EOL]     System.out.println("Usage: pass in a program to execute (with arguments)"); [EOL]     System.out.println("The program is expected to produce JS programs to stdout, " + "one per line"); [EOL] } <line_num>: 104,110
