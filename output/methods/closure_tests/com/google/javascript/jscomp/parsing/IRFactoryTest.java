@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     mode = LanguageMode.ECMASCRIPT3; [EOL] } <line_num>: 37,41
public void testStrictScript() throws Exception { [EOL]     assertNull(newParse("").getDirectives()); [EOL]     assertEquals(Sets.newHashSet("use strict"), newParse("'use strict'").getDirectives()); [EOL] } <line_num>: 43,48
public void testArrayLiteral2() throws Exception { [EOL]     testNewParser("[a, , b]", "SCRIPT 1 [source_file: FileName.js] [length: 8]\n" + "    EXPR_RESULT 1 [source_file: FileName.js] [length: 8]\n" + "        ARRAYLIT 1 [source_file: FileName.js] [length: 8]\n" + "            NAME a 1 [source_file: FileName.js] [length: 1]\n" + "            EMPTY 1 [source_file: FileName.js] [length: 1]\n" + "            NAME b 1 [source_file: FileName.js] [length: 1]\n"); [EOL] } <line_num>: 50,58
public void testArrayLiteral4() throws Exception { [EOL]     testNewParser("[,,,a,,b]", "SCRIPT 1 [source_file: FileName.js] [length: 9]\n" + "    EXPR_RESULT 1 [source_file: FileName.js] [length: 9]\n" + "        ARRAYLIT 1 [source_file: FileName.js] [length: 9]\n" + "            EMPTY 1 [source_file: FileName.js] [length: 1]\n" + "            EMPTY 1 [source_file: FileName.js] [length: 1]\n" + "            EMPTY 1 [source_file: FileName.js] [length: 1]\n" + "            NAME a 1 [source_file: FileName.js] [length: 1]\n" + "            EMPTY 1 [source_file: FileName.js] [length: 1]\n" + "            NAME b 1 [source_file: FileName.js] [length: 1]\n"); [EOL] } <line_num>: 60,71
public void testObjectLiteral() { [EOL]     newParse("var o = {}"); [EOL] } <line_num>: 73,75
public void testObjectLiteral2() { [EOL]     newParse("var o = {a: 1}"); [EOL] } <line_num>: 77,79
public void testObjectLiteral3() { [EOL]     newParse("var o = {a: 1, b: 2}"); [EOL] } <line_num>: 81,83
public void testObjectLiteral4() { [EOL]     newParse("var o = {1: 'a'}"); [EOL] } <line_num>: 85,87
public void testObjectLiteral5() { [EOL]     newParse("var o = {'a': 'a'}"); [EOL] } <line_num>: 89,91
public void testObjectLiteral6() { [EOL]     testNewParser("({1: true})", "SCRIPT 1 [source_file: FileName.js] [length: 11]\n" + "    EXPR_RESULT 1 [source_file: FileName.js] [length: 10]\n" + "        OBJECTLIT 1 [source_file: FileName.js] [length: 9]\n" + "            STRING_KEY 1 1 [quoted: 1] [source_file: FileName.js] [length: 1]\n" + "                TRUE 1 [source_file: FileName.js] [length: 4]\n"); [EOL] } <line_num>: 93,100
public void testObjectLiteral7() { [EOL]     mode = LanguageMode.ECMASCRIPT5; [EOL]     testNewParser("({get 1() {}})", "SCRIPT 1 [source_file: FileName.js] [length: 14]\n" + "    EXPR_RESULT 1 [source_file: FileName.js] [length: 13]\n" + "        OBJECTLIT 1 [source_file: FileName.js] [length: 12]\n" + "            GETTER_DEF 1 1 [quoted: 1] [source_file: FileName.js] [length: 1]\n" + "                FUNCTION  1 [source_file: FileName.js] [length: 6]\n" + "                    NAME  1 [source_file: FileName.js]\n" + "                    PARAM_LIST 1 [source_file: FileName.js]\n" + "                    BLOCK 1 [source_file: FileName.js] [length: 2]\n"); [EOL] } <line_num>: 102,114
public void testObjectLiteral8() { [EOL]     mode = LanguageMode.ECMASCRIPT5; [EOL]     testNewParser("({set 1(a) {}})", "SCRIPT 1 [source_file: FileName.js] [length: 15]\n" + "    EXPR_RESULT 1 [source_file: FileName.js] [length: 14]\n" + "        OBJECTLIT 1 [source_file: FileName.js] [length: 13]\n" + "            SETTER_DEF 1 1 [quoted: 1] [source_file: FileName.js] [length: 1]\n" + "                FUNCTION  1 [source_file: FileName.js] [length: 7]\n" + "                    NAME  1 [source_file: FileName.js]\n" + "                    PARAM_LIST 1 [source_file: FileName.js]\n" + "                        NAME a 1 [source_file: FileName.js] [length: 1]\n" + "                    BLOCK 1 [source_file: FileName.js] [length: 2]\n"); [EOL] } <line_num>: 116,129
public void testLabel() { [EOL]     testNewParser("foo: bar", "SCRIPT 1 [source_file: FileName.js] [length: 8]\n" + "    LABEL 1 [source_file: FileName.js] [length: 4]\n" + "        LABEL_NAME foo 1 [source_file: FileName.js] [length: 4]\n" + "        EXPR_RESULT 1 [source_file: FileName.js] [length: 3]\n" + "            NAME bar 1 [source_file: FileName.js] [length: 3]\n"); [EOL] } <line_num>: 133,140
public void testLabel2() { [EOL]     testNewParser("l: while (f()) { if (g()) { continue l; } }", "SCRIPT 1 [source_file: FileName.js] [length: 43]\n" + "    LABEL 1 [source_file: FileName.js] [length: 2]\n" + "        LABEL_NAME l 1 [source_file: FileName.js] [length: 2]\n" + "        WHILE 1 [source_file: FileName.js] [length: 40]\n" + "            CALL 1 [source_file: FileName.js] [length: 3]\n" + "                NAME f 1 [source_file: FileName.js] [length: 1]\n" + "            BLOCK 1 [source_file: FileName.js] [length: 28]\n" + "                IF 1 [source_file: FileName.js] [length: 24]\n" + "                    CALL 1 [source_file: FileName.js] [length: 3]\n" + "                        NAME g 1 [source_file: FileName.js] [length: 1]\n" + "                    BLOCK 1 [source_file: FileName.js] [length: 15]\n" + "                        CONTINUE 1 [source_file: FileName.js] [length: 11]\n" + "                            LABEL_NAME l 1 [source_file: FileName.js] [length: 1]\n"); [EOL] } <line_num>: 142,157
public void testLabel3() { [EOL]     testNewParser("Foo:Bar:X:{ break Bar; }", "SCRIPT 1 [source_file: FileName.js] [length: 24]\n" + "    LABEL 1 [source_file: FileName.js] [length: 4]\n" + "        LABEL_NAME Foo 1 [source_file: FileName.js] [length: 4]\n" + "        LABEL 1 [source_file: FileName.js] [length: 4]\n" + "            LABEL_NAME Bar 1 [source_file: FileName.js] [length: 4]\n" + "            LABEL 1 [source_file: FileName.js] [length: 2]\n" + "                LABEL_NAME X 1 [source_file: FileName.js] [length: 2]\n" + "                BLOCK 1 [source_file: FileName.js] [length: 14]\n" + "                    BREAK 1 [source_file: FileName.js] [length: 10]\n" + "                        LABEL_NAME Bar 1 [source_file: FileName.js] [length: 3]\n"); [EOL] } <line_num>: 159,171
public void testNegation1() { [EOL]     testNewParser("-a", "SCRIPT 1 [source_file: FileName.js] [length: 2]\n" + "    EXPR_RESULT 1 [source_file: FileName.js] [length: 2]\n" + "        NEG 1 [source_file: FileName.js] [length: 2]\n" + "            NAME a 1 [source_file: FileName.js] [length: 1]\n"); [EOL] } <line_num>: 173,179
public void testNegation2() { [EOL]     testNewParser("-2", "SCRIPT 1 [source_file: FileName.js] [length: 2]\n" + "    EXPR_RESULT 1 [source_file: FileName.js] [length: 2]\n" + "        NUMBER -2.0 1 [source_file: FileName.js] [length: 1]\n"); [EOL] } <line_num>: 181,186
public void testNegation3() { [EOL]     testNewParser("1 - -2", "SCRIPT 1 [source_file: FileName.js] [length: 6]\n" + "    EXPR_RESULT 1 [source_file: FileName.js] [length: 6]\n" + "        SUB 1 [source_file: FileName.js] [length: 6]\n" + "            NUMBER 1.0 1 [source_file: FileName.js] [length: 1]\n" + "            NUMBER -2.0 1 [source_file: FileName.js] [length: 1]\n"); [EOL] } <line_num>: 188,195
public void testGetter() { [EOL]     mode = LanguageMode.ECMASCRIPT5; [EOL]     testNewParser("({get a() {}})", "SCRIPT 1 [source_file: FileName.js] [length: 14]\n" + "    EXPR_RESULT 1 [source_file: FileName.js] [length: 13]\n" + "        OBJECTLIT 1 [source_file: FileName.js] [length: 12]\n" + "            GETTER_DEF a 1 [source_file: FileName.js] [length: 1]\n" + "                FUNCTION  1 [source_file: FileName.js] [length: 6]\n" + "                    NAME  1 [source_file: FileName.js]\n" + "                    PARAM_LIST 1 [source_file: FileName.js]\n" + "                    BLOCK 1 [source_file: FileName.js] [length: 2]\n"); [EOL] } <line_num>: 197,208
public void testSetter() { [EOL]     mode = LanguageMode.ECMASCRIPT5; [EOL]     testNewParser("({set a(x) {}})", "SCRIPT 1 [source_file: FileName.js] [length: 15]\n" + "    EXPR_RESULT 1 [source_file: FileName.js] [length: 14]\n" + "        OBJECTLIT 1 [source_file: FileName.js] [length: 13]\n" + "            SETTER_DEF a 1 [source_file: FileName.js] [length: 1]\n" + "                FUNCTION  1 [source_file: FileName.js] [length: 7]\n" + "                    NAME  1 [source_file: FileName.js]\n" + "                    PARAM_LIST 1 [source_file: FileName.js]\n" + "                        NAME x 1 [source_file: FileName.js] [length: 1]\n" + "                    BLOCK 1 [source_file: FileName.js] [length: 2]\n"); [EOL] } <line_num>: 210,222
public void testDelete1() { [EOL]     testNoParseError("delete a.b;"); [EOL] } <line_num>: 224,226
public void testDelete2() { [EOL]     testNoParseError("delete a['b'];"); [EOL] } <line_num>: 228,230
public void testDelete3() { [EOL]     testNoParseError("delete a;"); [EOL] } <line_num>: 232,236
public void testDelete4() { [EOL]     testParseError("delete 'x';", "Invalid delete operand. Only properties can be deleted."); [EOL] } <line_num>: 238,241
public void testCommentPositions1() { [EOL]     Node root = newParse("/** @param {string} x */function a(x) {};" + "/** @param {string} x */function b(x) {}"); [EOL]     Node a = root.getFirstChild(); [EOL]     Node b = root.getLastChild(); [EOL]     assertMarkerPosition(a, 1, 4); [EOL]     assertMarkerPosition(b, 1, 45); [EOL] } <line_num>: 243,250
public void testCommentPositions2() { [EOL]     Node root = newParse("/* foo \n" + "   bar \n" + "*/\n" + "/** @param {string} x */\n" + "function a(x) {};\n" + "\n" + "/* bar \n" + "   foo \n" + "   foo */\n" + "\n" + "/**   @param {string} x */\n" + "function b(x) {};"); [EOL]     assertMarkerPosition(root.getFirstChild(), 4, 4); [EOL]     assertMarkerPosition(root.getFirstChild().getNext().getNext(), 11, 6); [EOL] } <line_num>: 252,268
public void testLiteralLocation() { [EOL]     Node root = newParse("var d =\n" + "    \"foo\";\n" + "var e =\n" + "    1;\n" + "var f = \n" + "    1.2;\n" + "var g = \n" + "    2e5;\n" + "var h = \n" + "    'bar';\n"); [EOL]     Node firstStmt = root.getFirstChild(); [EOL]     Node firstLiteral = firstStmt.getFirstChild().getFirstChild(); [EOL]     Node secondStmt = firstStmt.getNext(); [EOL]     Node secondLiteral = secondStmt.getFirstChild().getFirstChild(); [EOL]     Node thirdStmt = secondStmt.getNext(); [EOL]     Node thirdLiteral = thirdStmt.getFirstChild().getFirstChild(); [EOL]     Node fourthStmt = thirdStmt.getNext(); [EOL]     Node fourthLiteral = fourthStmt.getFirstChild().getFirstChild(); [EOL]     Node fifthStmt = fourthStmt.getNext(); [EOL]     Node fifthLiteral = fifthStmt.getFirstChild().getFirstChild(); [EOL]     assertNodePosition(2, 4, firstLiteral); [EOL]     assertNodePosition(4, 4, secondLiteral); [EOL]     assertNodePosition(6, 4, thirdLiteral); [EOL]     assertNodePosition(8, 4, fourthLiteral); [EOL]     assertNodePosition(10, 4, fifthLiteral); [EOL] } <line_num>: 270,299
public void testSwitchLocation() { [EOL]     Node root = newParse("switch (a) {\n" + "  //{\n" + "   case 1:\n" + "     b++;\n" + "   case 2:\n" + "   default:\n" + "     b--;\n" + "  }\n"); [EOL]     Node switchStmt = root.getFirstChild(); [EOL]     Node switchVar = switchStmt.getFirstChild(); [EOL]     Node firstCase = switchVar.getNext(); [EOL]     Node caseArg = firstCase.getFirstChild(); [EOL]     Node caseBody = caseArg.getNext(); [EOL]     Node caseExprStmt = caseBody.getFirstChild(); [EOL]     Node incrExpr = caseExprStmt.getFirstChild(); [EOL]     Node incrVar = incrExpr.getFirstChild(); [EOL]     Node secondCase = firstCase.getNext(); [EOL]     Node defaultCase = secondCase.getNext(); [EOL]     assertNodePosition(1, 0, switchStmt); [EOL]     assertNodePosition(1, 8, switchVar); [EOL]     assertNodePosition(3, 3, firstCase); [EOL]     assertNodePosition(3, 8, caseArg); [EOL]     assertNodePosition(3, 3, caseBody); [EOL]     assertNodePosition(4, 5, caseExprStmt); [EOL]     assertNodePosition(4, 5, incrExpr); [EOL]     assertNodePosition(4, 5, incrVar); [EOL]     assertNodePosition(5, 3, secondCase); [EOL]     assertNodePosition(6, 3, defaultCase); [EOL] } <line_num>: 301,333
public void testFunctionParamLocation() { [EOL]     Node root = newParse("function\n" + "     foo(a,\n" + "     b,\n" + "     c)\n" + "{}\n"); [EOL]     Node function = root.getFirstChild(); [EOL]     Node functionName = function.getFirstChild(); [EOL]     Node params = functionName.getNext(); [EOL]     Node param1 = params.getFirstChild(); [EOL]     Node param2 = param1.getNext(); [EOL]     Node param3 = param2.getNext(); [EOL]     Node body = params.getNext(); [EOL]     assertNodePosition(1, 0, function); [EOL]     assertNodePosition(2, 5, functionName); [EOL]     assertNodePosition(2, 8, params); [EOL]     assertNodePosition(2, 9, param1); [EOL]     assertNodePosition(3, 5, param2); [EOL]     assertNodePosition(4, 5, param3); [EOL]     assertNodePosition(5, 0, body); [EOL] } <line_num>: 335,361
public void testVarDeclLocation() { [EOL]     Node root = newParse("var\n" + "    a =\n" + "    3\n"); [EOL]     Node varDecl = root.getFirstChild(); [EOL]     Node varName = varDecl.getFirstChild(); [EOL]     Node varExpr = varName.getFirstChild(); [EOL]     assertNodePosition(1, 0, varDecl); [EOL]     assertNodePosition(2, 4, 1, varName); [EOL]     assertNodePosition(3, 4, 1, varExpr); [EOL] } <line_num>: 363,375
public void testReturnLocation() { [EOL]     Node root = newParse("function\n" + "    foo(\n" + "    a,\n" + "    b,\n" + "    c) {\n" + "    return\n" + "    4;\n" + "}\n"); [EOL]     Node function = root.getFirstChild(); [EOL]     Node functionName = function.getFirstChild(); [EOL]     Node params = functionName.getNext(); [EOL]     Node body = params.getNext(); [EOL]     Node returnStmt = body.getFirstChild(); [EOL]     Node exprStmt = returnStmt.getNext(); [EOL]     Node returnVal = exprStmt.getFirstChild(); [EOL]     assertNodePosition(6, 4, returnStmt); [EOL]     assertNodePosition(7, 4, exprStmt); [EOL]     assertNodePosition(7, 4, returnVal); [EOL] } <line_num>: 377,399
public void testLinenoFor() { [EOL]     Node root = newParse("for(\n" + ";\n" + ";\n" + ") {\n" + "}\n"); [EOL]     Node forNode = root.getFirstChild(); [EOL]     Node initClause = forNode.getFirstChild(); [EOL]     Node condClause = initClause.getNext(); [EOL]     Node incrClause = condClause.getNext(); [EOL]     assertNodePosition(1, 0, forNode); [EOL]     assertNodePosition(2, 0, initClause); [EOL]     assertNodePosition(3, 0, condClause); [EOL] } <line_num>: 401,423
public void testBinaryExprLocation() { [EOL]     Node root = newParse("var d = a\n" + "    + \n" + "    b;\n" + "var\n" + "    e =\n" + "    a +\n" + "    c;\n" + "var f = b\n" + "    / c;\n"); [EOL]     Node firstVarDecl = root.getFirstChild(); [EOL]     Node firstVar = firstVarDecl.getFirstChild(); [EOL]     Node firstVarAdd = firstVar.getFirstChild(); [EOL]     Node secondVarDecl = firstVarDecl.getNext(); [EOL]     Node secondVar = secondVarDecl.getFirstChild(); [EOL]     Node secondVarAdd = secondVar.getFirstChild(); [EOL]     Node thirdVarDecl = secondVarDecl.getNext(); [EOL]     Node thirdVar = thirdVarDecl.getFirstChild(); [EOL]     Node thirdVarAdd = thirdVar.getFirstChild(); [EOL]     assertNodePosition(1, 0, firstVarDecl); [EOL]     assertNodePosition(1, 4, firstVar); [EOL]     assertNodePosition(1, 8, firstVarAdd); [EOL]     assertNodePosition(1, 8, firstVarAdd.getFirstChild()); [EOL]     assertNodePosition(3, 4, firstVarAdd.getLastChild()); [EOL]     assertNodePosition(4, 0, secondVarDecl); [EOL]     assertNodePosition(5, 4, secondVar); [EOL]     assertNodePosition(6, 4, secondVarAdd); [EOL]     assertNodePosition(6, 4, secondVarAdd.getFirstChild()); [EOL]     assertNodePosition(7, 4, secondVarAdd.getLastChild()); [EOL]     assertNodePosition(8, 0, thirdVarDecl); [EOL]     assertNodePosition(8, 4, thirdVar); [EOL]     assertNodePosition(8, 8, thirdVarAdd); [EOL]     assertNodePosition(8, 8, thirdVarAdd.getFirstChild()); [EOL]     assertNodePosition(9, 6, thirdVarAdd.getLastChild()); [EOL] } <line_num>: 425,466
public void testPrefixLocation() { [EOL]     Node root = newParse("a++;\n" + "--\n" + "b;\n"); [EOL]     Node firstStmt = root.getFirstChild(); [EOL]     Node secondStmt = firstStmt.getNext(); [EOL]     Node firstOp = firstStmt.getFirstChild(); [EOL]     Node secondOp = secondStmt.getFirstChild(); [EOL]     assertNodePosition(1, 0, firstOp); [EOL]     assertNodePosition(2, 0, secondOp); [EOL] } <line_num>: 468,481
public void testIfLocation() { [EOL]     Node root = newParse("if\n" + "  (a == 3)\n" + "{\n" + "  b = 0;\n" + "}\n" + "  else\n" + "{\n" + "  c = 1;\n" + "}\n"); [EOL]     Node ifStmt = root.getFirstChild(); [EOL]     Node eqClause = ifStmt.getFirstChild(); [EOL]     Node thenClause = eqClause.getNext(); [EOL]     Node elseClause = thenClause.getNext(); [EOL]     assertNodePosition(1, 0, ifStmt); [EOL]     assertNodePosition(2, 3, eqClause); [EOL]     assertNodePosition(3, 0, thenClause); [EOL]     assertNodePosition(7, 0, elseClause); [EOL] } <line_num>: 483,504
public void testTryLocation() { [EOL]     Node root = newParse("try {\n" + "  var x = 1;\n" + "} catch\n" + "   (err)\n" + "{\n" + "} finally {\n" + "  var y = 2;\n" + "}\n"); [EOL]     Node tryStmt = root.getFirstChild(); [EOL]     Node tryBlock = tryStmt.getFirstChild(); [EOL]     Node catchBlock = tryBlock.getNext(); [EOL]     Node catchVarBlock = catchBlock.getFirstChild(); [EOL]     Node catchVar = catchVarBlock.getFirstChild(); [EOL]     Node finallyBlock = catchBlock.getNext(); [EOL]     Node finallyStmt = finallyBlock.getFirstChild(); [EOL]     assertNodePosition(1, 0, tryStmt); [EOL]     assertNodePosition(1, 4, tryBlock); [EOL]     assertNodePosition(3, 2, catchVarBlock); [EOL]     assertNodePosition(4, 4, catchVar); [EOL]     assertNodePosition(3, 0, catchBlock); [EOL]     assertNodePosition(6, 10, finallyBlock); [EOL]     assertNodePosition(7, 2, finallyStmt); [EOL] } <line_num>: 506,532
public void testHookLocation() { [EOL]     Node root = newParse("a\n" + "?\n" + "b\n" + ":\n" + "c\n" + ";\n"); [EOL]     Node hookExpr = root.getFirstChild().getFirstChild(); [EOL]     Node condExpr = hookExpr.getFirstChild(); [EOL]     Node thenExpr = condExpr.getNext(); [EOL]     Node elseExpr = thenExpr.getNext(); [EOL]     assertNodePosition(2, 0, hookExpr); [EOL]     assertNodePosition(1, 0, condExpr); [EOL]     assertNodePosition(3, 0, thenExpr); [EOL]     assertNodePosition(5, 0, elseExpr); [EOL] } <line_num>: 534,552
public void testLabelLocation() { [EOL]     Node root = newParse("foo:\n" + "a = 1;\n" + "bar:\n" + "b = 2;\n"); [EOL]     Node firstStmt = root.getFirstChild(); [EOL]     Node secondStmt = firstStmt.getNext(); [EOL]     assertNodePosition(1, 0, firstStmt); [EOL]     assertNodePosition(3, 0, secondStmt); [EOL] } <line_num>: 554,566
public void testCompareLocation() { [EOL]     Node root = newParse("a\n" + "<\n" + "b\n"); [EOL]     Node condClause = root.getFirstChild().getFirstChild(); [EOL]     Node lhs = condClause.getFirstChild(); [EOL]     Node rhs = lhs.getNext(); [EOL]     assertNodePosition(1, 0, condClause); [EOL]     assertNodePosition(1, 0, lhs); [EOL]     assertNodePosition(3, 0, rhs); [EOL] } <line_num>: 568,581
public void testEqualityLocation() { [EOL]     Node root = newParse("a\n" + "==\n" + "b\n"); [EOL]     Node condClause = root.getFirstChild().getFirstChild(); [EOL]     Node lhs = condClause.getFirstChild(); [EOL]     Node rhs = lhs.getNext(); [EOL]     assertNodePosition(1, 0, condClause); [EOL]     assertNodePosition(1, 0, lhs); [EOL]     assertNodePosition(3, 0, rhs); [EOL] } <line_num>: 583,596
public void testPlusEqLocation() { [EOL]     Node root = newParse("a\n" + "+=\n" + "b\n"); [EOL]     Node condClause = root.getFirstChild().getFirstChild(); [EOL]     Node lhs = condClause.getFirstChild(); [EOL]     Node rhs = lhs.getNext(); [EOL]     assertNodePosition(1, 0, condClause); [EOL]     assertNodePosition(1, 0, lhs); [EOL]     assertNodePosition(3, 0, rhs); [EOL] } <line_num>: 598,611
public void testCommaLocation() { [EOL]     Node root = newParse("a,\n" + "b,\n" + "c;\n"); [EOL]     Node statement = root.getFirstChild(); [EOL]     Node comma1 = statement.getFirstChild(); [EOL]     Node comma2 = comma1.getFirstChild(); [EOL]     Node cRef = comma2.getNext(); [EOL]     Node aRef = comma2.getFirstChild(); [EOL]     Node bRef = aRef.getNext(); [EOL]     assertNodePosition(1, 0, comma2); [EOL]     assertNodePosition(1, 0, aRef); [EOL]     assertNodePosition(2, 0, bRef); [EOL]     assertNodePosition(3, 0, cRef); [EOL] } <line_num>: 613,630
public void testRegexpLocation() { [EOL]     Node root = newParse("var path =\n" + "replace(\n" + "/a/g," + "'/');\n"); [EOL]     Node firstVarDecl = root.getFirstChild(); [EOL]     Node firstVar = firstVarDecl.getFirstChild(); [EOL]     Node callNode = firstVar.getFirstChild(); [EOL]     Node fnName = callNode.getFirstChild(); [EOL]     Node regexObject = fnName.getNext(); [EOL]     Node aString = regexObject.getFirstChild(); [EOL]     Node endRegexString = regexObject.getNext(); [EOL]     assertNodePosition(1, 0, firstVarDecl); [EOL]     assertNodePosition(1, 4, 4, firstVar); [EOL]     assertNodePosition(2, 0, 18, callNode); [EOL]     assertNodePosition(2, 0, 7, fnName); [EOL]     assertNodePosition(3, 0, regexObject); [EOL]     assertNodePosition(3, 0, aString); [EOL]     assertNodePosition(3, 5, endRegexString); [EOL] } <line_num>: 632,654
public void testNestedOr() { [EOL]     Node root = newParse("if (a && \n" + "    b() || \n" + "    /* comment */\n" + "    c) {\n" + "}\n"); [EOL]     Node ifStmt = root.getFirstChild(); [EOL]     Node orClause = ifStmt.getFirstChild(); [EOL]     Node andClause = orClause.getFirstChild(); [EOL]     Node cName = andClause.getNext(); [EOL]     assertNodePosition(1, 0, ifStmt); [EOL]     assertNodePosition(1, 4, orClause); [EOL]     assertNodePosition(1, 4, andClause); [EOL]     assertNodePosition(4, 4, cName); [EOL] } <line_num>: 656,675
public void testBitwiseOps() { [EOL]     Node root = newParse("if (a & \n" + "    b() | \n" + "    /* comment */\n" + "    c) {\n" + "}\n"); [EOL]     Node ifStmt = root.getFirstChild(); [EOL]     Node bitOr = ifStmt.getFirstChild(); [EOL]     Node bitAnd = bitOr.getFirstChild(); [EOL]     Node cName = bitAnd.getNext(); [EOL]     assertNodePosition(1, 0, ifStmt); [EOL]     assertNodePosition(1, 4, bitOr); [EOL]     assertNodePosition(1, 4, bitAnd); [EOL]     assertNodePosition(4, 4, cName); [EOL] } <line_num>: 677,696
public void testObjectLitLocation() { [EOL]     Node root = newParse("var foo =\n" + "{ \n" + "'A' : 'A', \n" + "'B' : 'B', \n" + "'C' :\n" + "    'C' \n" + "};\n"); [EOL]     Node firstVarDecl = root.getFirstChild(); [EOL]     Node firstVar = firstVarDecl.getFirstChild(); [EOL]     Node firstObjectLit = firstVar.getFirstChild(); [EOL]     Node firstKey = firstObjectLit.getFirstChild(); [EOL]     Node firstValue = firstKey.getFirstChild(); [EOL]     Node secondKey = firstKey.getNext(); [EOL]     Node secondValue = secondKey.getFirstChild(); [EOL]     Node thirdKey = secondKey.getNext(); [EOL]     Node thirdValue = thirdKey.getFirstChild(); [EOL]     assertNodePosition(1, 4, firstVar); [EOL]     assertNodePosition(2, 0, firstObjectLit); [EOL]     assertNodePosition(3, 0, firstKey); [EOL]     assertNodePosition(3, 6, firstValue); [EOL]     assertNodePosition(4, 0, secondKey); [EOL]     assertNodePosition(4, 6, secondValue); [EOL]     assertNodePosition(5, 0, thirdKey); [EOL]     assertNodePosition(6, 4, thirdValue); [EOL] } <line_num>: 698,731
public void testTryWithoutCatchLocation() { [EOL]     Node root = newParse("try {\n" + "  var x = 1;\n" + "} finally {\n" + "  var y = 2;\n" + "}\n"); [EOL]     Node tryStmt = root.getFirstChild(); [EOL]     Node tryBlock = tryStmt.getFirstChild(); [EOL]     Node catchBlock = tryBlock.getNext(); [EOL]     Node finallyBlock = catchBlock.getNext(); [EOL]     Node finallyStmt = finallyBlock.getFirstChild(); [EOL]     assertNodePosition(1, 0, tryStmt); [EOL]     assertNodePosition(1, 4, tryBlock); [EOL]     assertNodePosition(3, 0, catchBlock); [EOL]     assertNodePosition(3, 10, finallyBlock); [EOL]     assertNodePosition(4, 2, finallyStmt); [EOL] } <line_num>: 733,752
public void testTryWithoutFinallyLocation() { [EOL]     Node root = newParse("try {\n" + "  var x = 1;\n" + "} catch (ex) {\n" + "  var y = 2;\n" + "}\n"); [EOL]     Node tryStmt = root.getFirstChild(); [EOL]     Node tryBlock = tryStmt.getFirstChild(); [EOL]     Node catchBlock = tryBlock.getNext(); [EOL]     Node catchStmt = catchBlock.getFirstChild(); [EOL]     Node exceptionVar = catchStmt.getFirstChild(); [EOL]     Node exceptionBlock = exceptionVar.getNext(); [EOL]     Node varDecl = exceptionBlock.getFirstChild(); [EOL]     assertNodePosition(1, 0, tryStmt); [EOL]     assertNodePosition(1, 4, tryBlock); [EOL]     assertNodePosition(3, 0, catchBlock); [EOL]     assertNodePosition(3, 2, catchStmt); [EOL]     assertNodePosition(3, 9, exceptionVar); [EOL]     assertNodePosition(3, 13, exceptionBlock); [EOL]     assertNodePosition(4, 2, varDecl); [EOL] } <line_num>: 754,777
public void testMultilineEqLocation() { [EOL]     Node root = newParse("if\n" + "    (((a == \n" + "  3) && \n" + "  (b == 2)) || \n" + " (c == 1)) {\n" + "}\n"); [EOL]     Node ifStmt = root.getFirstChild(); [EOL]     Node orTest = ifStmt.getFirstChild(); [EOL]     Node andTest = orTest.getFirstChild(); [EOL]     Node cTest = andTest.getNext(); [EOL]     Node aTest = andTest.getFirstChild(); [EOL]     Node bTest = aTest.getNext(); [EOL]     assertNodePosition(1, 0, ifStmt); [EOL]     assertNodePosition(2, 7, orTest); [EOL]     assertNodePosition(2, 7, andTest); [EOL]     assertNodePosition(2, 7, aTest); [EOL]     assertNodePosition(4, 3, bTest); [EOL]     assertNodePosition(5, 2, cTest); [EOL] } <line_num>: 779,800
public void testMultilineBitTestLocation() { [EOL]     Node root = newParse("if (\n" + "      ((a \n" + "        | 3 \n" + "       ) == \n" + "       (b \n" + "        & 2)) && \n" + "      ((a \n" + "         ^ 0xffff) \n" + "       != \n" + "       (c \n" + "        << 1))) {\n" + "}\n"); [EOL]     Node ifStmt = root.getFirstChild(); [EOL]     Node andTest = ifStmt.getFirstChild(); [EOL]     Node eqTest = andTest.getFirstChild(); [EOL]     Node notEqTest = eqTest.getNext(); [EOL]     Node bitOrTest = eqTest.getFirstChild(); [EOL]     Node bitAndTest = bitOrTest.getNext(); [EOL]     Node bitXorTest = notEqTest.getFirstChild(); [EOL]     Node bitShiftTest = bitXorTest.getNext(); [EOL]     assertNodePosition(1, 0, ifStmt); [EOL]     assertNodePosition(2, 8, eqTest); [EOL]     assertNodePosition(7, 8, notEqTest); [EOL]     assertNodePosition(2, 8, bitOrTest); [EOL]     assertNodePosition(5, 8, bitAndTest); [EOL]     assertNodePosition(7, 8, bitXorTest); [EOL]     assertNodePosition(10, 8, bitShiftTest); [EOL] } <line_num>: 802,837
public void testCallLocation() { [EOL]     Node root = newParse("a.\n" + "b.\n" + "cccc(1);\n"); [EOL]     Node exprStmt = root.getFirstChild(); [EOL]     Node functionCall = exprStmt.getFirstChild(); [EOL]     Node functionProp = functionCall.getFirstChild(); [EOL]     Node firstNameComponent = functionProp.getFirstChild(); [EOL]     Node lastNameComponent = firstNameComponent.getNext(); [EOL]     Node aNameComponent = firstNameComponent.getFirstChild(); [EOL]     Node bNameComponent = aNameComponent.getNext(); [EOL]     assertNodePosition(1, 0, 13, functionCall); [EOL]     assertNodePosition(1, 0, 10, functionProp); [EOL]     assertNodePosition(1, 0, 4, firstNameComponent); [EOL]     assertNodePosition(3, 0, 4, lastNameComponent); [EOL]     assertNodePosition(1, 0, 1, aNameComponent); [EOL]     assertNodePosition(2, 0, 1, bNameComponent); [EOL] } <line_num>: 839,863
public void testNewLocation() { [EOL]     Node root = newParse("new c();\n"); [EOL]     Node exprStmt = root.getFirstChild(); [EOL]     Node newExpr = exprStmt.getFirstChild(); [EOL]     assertNodePosition(1, 0, 7, newExpr); [EOL] } <line_num>: 865,872
public void testNewLocationMultiLine() { [EOL]     Node root = newParse("new   \n" + "c();\n"); [EOL]     Node exprStmt = root.getFirstChild(); [EOL]     Node newExpr = exprStmt.getFirstChild(); [EOL]     assertNodePosition(1, 0, 10, newExpr); [EOL] } <line_num>: 874,882
public void testLinenoDeclaration() { [EOL]     Node root = newParse("a.\n" + "b=\n" + "function() {};\n"); [EOL]     Node exprStmt = root.getFirstChild(); [EOL]     Node fnAssignment = exprStmt.getFirstChild(); [EOL]     Node aDotbName = fnAssignment.getFirstChild(); [EOL]     Node aName = aDotbName.getFirstChild(); [EOL]     Node bName = aName.getNext(); [EOL]     Node fnNode = aDotbName.getNext(); [EOL]     Node fnName = fnNode.getFirstChild(); [EOL]     assertNodePosition(1, 0, fnAssignment); [EOL]     assertNodePosition(1, 0, aName); [EOL]     assertNodePosition(2, 0, bName); [EOL]     assertNodePosition(3, 0, fnNode); [EOL]     assertNodePosition(3, 8, fnName); [EOL] } <line_num>: 884,905
public void testAssignmentValidation() { [EOL]     testNoParseError("x=1"); [EOL]     testNoParseError("x.y=1"); [EOL]     testNoParseError("f().y=1"); [EOL]     testParseError("(x||y)=1", INVALID_ASSIGNMENT_TARGET); [EOL]     testParseError("(x?y:z)=1", INVALID_ASSIGNMENT_TARGET); [EOL]     testParseError("f()=1", INVALID_ASSIGNMENT_TARGET); [EOL]     testNoParseError("x+=1"); [EOL]     testNoParseError("x.y+=1"); [EOL]     testNoParseError("f().y+=1"); [EOL]     testParseError("(x||y)+=1", INVALID_ASSIGNMENT_TARGET); [EOL]     testParseError("(x?y:z)+=1", INVALID_ASSIGNMENT_TARGET); [EOL]     testParseError("f()+=1", INVALID_ASSIGNMENT_TARGET); [EOL]     testParseError("f()++", INVALID_INCREMENT_TARGET); [EOL]     testParseError("f()--", INVALID_DECREMENT_TARGET); [EOL]     testParseError("++f()", INVALID_INCREMENT_TARGET); [EOL]     testParseError("--f()", INVALID_DECREMENT_TARGET); [EOL] } <line_num>: 914,933
private void testNoParseError(String string) { [EOL]     testParseError(string, (String) null); [EOL] } <line_num>: 935,937
private void testParseError(String string, String error) { [EOL]     testParseError(string, error == null ? null : new String[] { error }); [EOL] } <line_num>: 939,941
private void testParseError(String string, String[] errors) { [EOL]     Node root = newParse(string, new TestErrorReporter(errors, null)); [EOL]     assertTrue("unexpected warnings reported", errorReporter.hasEncounteredAllWarnings()); [EOL]     assertTrue("expected error were not reported", errorReporter.hasEncounteredAllErrors()); [EOL] } <line_num>: 943,949
private void assertMarkerPosition(Node n, int lineno, int charno) { [EOL]     int count = 0; [EOL]     for (JSDocInfo.Marker marker : n.getJSDocInfo().getMarkers()) { [EOL]         assertEquals(lineno, marker.getAnnotation().getStartLine()); [EOL]         assertEquals(charno, marker.getAnnotation().getPositionOnStartLine()); [EOL]         count++; [EOL]     } [EOL]     assertEquals(1, count); [EOL] } <line_num>: 951,959
private void assertNodePosition(int lineno, int charno, Node n) { [EOL]     assertEquals("Line number", lineno, n.getLineno()); [EOL]     assertEquals("Column position", charno, n.getCharno()); [EOL] } <line_num>: 961,964
private void assertNodePosition(int lineno, int charno, int length, Node n) { [EOL]     assertEquals("Line number", lineno, n.getLineno()); [EOL]     assertEquals("Column position", charno, n.getCharno()); [EOL]     assertEquals("Length", length, n.getLength()); [EOL] } <line_num>: 966,970
private void testNewParser(String code, String expected) { [EOL]     String actual = newParse(code).toStringTree(); [EOL]     assertEquals(expected, actual); [EOL] } <line_num>: 973,976
private Node newParse(String string) { [EOL]     return newParse(string, new TestErrorReporter(null, null)); [EOL] } <line_num>: 978,980
private Node newParse(String string, TestErrorReporter errorReporter) { [EOL]     CompilerEnvirons environment = new CompilerEnvirons(); [EOL]     environment.setRecordingComments(true); [EOL]     environment.setRecordingLocalJsDocComments(true); [EOL]     Parser p = new Parser(environment); [EOL]     AstRoot script = p.parse(string, null, 1); [EOL]     Config config = ParserRunner.createConfig(true, mode, false); [EOL]     Node root = IRFactory.transformTree(script, SourceFile.fromCode("FileName.js", string), string, config, errorReporter); [EOL]     return root; [EOL] } <line_num>: 982,996
