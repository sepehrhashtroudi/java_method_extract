public void testJsDocTokenization1() throws Exception { [EOL]     List<JsDocToken> tokens = ImmutableList.of(STAR, ANNOTATION, LC, STRING, RC, EOL, STAR, ANNOTATION); [EOL]     List<String> strings = ImmutableList.of("type", "string", "private"); [EOL]     testJSDocTokenStream(" * @type {string}\n * @private", tokens, strings); [EOL]     testJSDocTokenStream(" *    @type { string } \n * @private", tokens, strings); [EOL]     testJSDocTokenStream(" * @type   {  string}\n * @private", tokens, strings); [EOL]     testJSDocTokenStream(" * @type {string  }\n * @private", tokens, strings); [EOL]     testJSDocTokenStream(" * @type {string}\n *   @private", tokens, strings); [EOL]     testJSDocTokenStream(" * @type {string}   \n * @private", tokens, strings); [EOL] } <line_num>: 52,63
public void testJsDocTokenization2() throws Exception { [EOL]     List<JsDocToken> tokens = ImmutableList.of(ANNOTATION, LC, STRING, LT, STRING, PIPE, STRING, GT, RC); [EOL]     List<String> strings = ImmutableList.of("param", "Array", "string", "null"); [EOL]     testJSDocTokenStream("@param {Array.<string|null>}", tokens, strings); [EOL]     testJSDocTokenStream("@param {Array.<string|null>}", tokens, strings); [EOL]     testJSDocTokenStream("@param {Array.<string |null>}", tokens, strings); [EOL]     testJSDocTokenStream(" @param {Array.<string |  null>}", tokens, strings); [EOL]     testJSDocTokenStream(" @param {Array.<string|null  >}", tokens, strings); [EOL]     testJSDocTokenStream("@param {Array  .<string|null>}", tokens, strings); [EOL]     testJSDocTokenStream("@param   {Array.<string|null>}", tokens, strings); [EOL]     testJSDocTokenStream("@param {  Array.<string|null>}", tokens, strings); [EOL]     testJSDocTokenStream("@param {Array.<string|   null>}  ", tokens, strings); [EOL]     testJSDocTokenStream("@param {Array.<string|null>}", tokens, strings); [EOL]     testJSDocTokenStream("     @param { Array .< string |null > } ", tokens, strings); [EOL] } <line_num>: 65,81
public void testJsDocTokenization3() throws Exception { [EOL]     List<JsDocToken> tokens = ImmutableList.of(ANNOTATION, LC, STRING, LT, STRING, PIPE, STRING, GT, RC); [EOL]     List<String> strings = ImmutableList.of("param", "Array", "string", "null"); [EOL]     testJSDocTokenStream("@param {Array.<string||null>}", tokens, strings); [EOL]     testJSDocTokenStream("@param {Array.< string || null> }", tokens, strings); [EOL]     testJSDocTokenStream("@param {Array.<string || null >  } ", tokens, strings); [EOL]     testJSDocTokenStream("@param {Array .<string   ||null>}", tokens, strings); [EOL]     testJSDocTokenStream("@param {Array.< string||null>}", tokens, strings); [EOL]     testJSDocTokenStream("@param {  Array.<string||null>}", tokens, strings); [EOL]     testJSDocTokenStream(" @param   {Array.<string||null>}", tokens, strings); [EOL]     testJSDocTokenStream("@param   {   Array.<string|| null> }", tokens, strings); [EOL] } <line_num>: 83,97
public void testJsDocTokenization4() throws Exception { [EOL]     List<JsDocToken> tokens = ImmutableList.of(ANNOTATION, LC, STRING, LT, LP, STRING, COMMA, STRING, RP, GT, RC, EOF); [EOL]     List<String> strings = ImmutableList.of("param", "Array", "string", "null"); [EOL]     testJSDocTokenStream("@param {Array.<(string,null)>}", tokens, strings); [EOL]     testJSDocTokenStream("@param {Array  .<(string,null)> } ", tokens, strings); [EOL]     testJSDocTokenStream(" @param {Array.<  (  string,null)>}", tokens, strings); [EOL]     testJSDocTokenStream("@param {Array.<(string  , null)>}", tokens, strings); [EOL]     testJSDocTokenStream("@param {Array.<(string,   null)  > }  ", tokens, strings); [EOL]     testJSDocTokenStream("@param {  Array  .<  (string,null)>}   ", tokens, strings); [EOL] } <line_num>: 99,112
public void testJsDocTokenization5() throws Exception { [EOL]     List<JsDocToken> tokens = ImmutableList.of(ANNOTATION, STRING, EOC, EOF); [EOL]     List<String> strings = ImmutableList.of("param", "foo.Bar"); [EOL]     testJSDocTokenStream("@param foo.Bar*/", tokens, strings); [EOL]     testJSDocTokenStream(" @param   foo.Bar*/", tokens, strings); [EOL]     testJSDocTokenStream(" @param foo.Bar   */", tokens, strings); [EOL] } <line_num>: 114,120
public void testJsDocTokenization6() throws Exception { [EOL]     List<JsDocToken> tokens = ImmutableList.of(ANNOTATION, EOL, ANNOTATION, EOL, ANNOTATION, EOC); [EOL]     List<String> strings = ImmutableList.of("hidden", "static", "desc"); [EOL]     testJSDocTokenStream("@hidden\n@static\n@desc*/", tokens, strings); [EOL]     testJSDocTokenStream("@hidden\n @static\n@desc*/", tokens, strings); [EOL]     testJSDocTokenStream("@hidden\n@static\n @desc*/", tokens, strings); [EOL]     testJSDocTokenStream("@hidden\n@static\n@desc */", tokens, strings); [EOL]     testJSDocTokenStream(" @hidden \n@static\n @desc*/", tokens, strings); [EOL]     testJSDocTokenStream("@hidden\n@static    \n @desc  */", tokens, strings); [EOL]     testJSDocTokenStream("@hidden\n@static\n@desc*/", tokens, strings); [EOL]     testJSDocTokenStream("@hidden   \n@static   \n @desc*/", tokens, strings); [EOL] } <line_num>: 122,134
public void testJsDocTokenization7() throws Exception { [EOL]     List<JsDocToken> tokens = ImmutableList.of(ELLIPSIS, ELLIPSIS, ELLIPSIS, ELLIPSIS, ELLIPSIS, LT, EOC); [EOL]     List<String> strings = ImmutableList.of(); [EOL]     testJSDocTokenStream("................<*/", tokens, strings); [EOL]     testJSDocTokenStream("............... .<*/", tokens, strings); [EOL]     testJSDocTokenStream("................< */", tokens, strings); [EOL]     testJSDocTokenStream("............... .< */", tokens, strings); [EOL]     testJSDocTokenStream("............... .< */ ", tokens, strings); [EOL]     testJSDocTokenStream(" ............... .< */ ", tokens, strings); [EOL] } <line_num>: 136,147
public void testJsDocTokenization8() throws Exception { [EOL]     List<JsDocToken> tokens = ImmutableList.of(STAR, ANNOTATION, STRING, STRING, STRING, STRING, STRING, STRING, STRING, EOL, EOC); [EOL]     List<String> strings = ImmutableList.of("param", "foo.Bar", "opt_name", "this", "parameter", "is", "a", "name"); [EOL]     testJSDocTokenStream(" * @param foo.Bar opt_name this parameter is a name\n" + " */", tokens, strings); [EOL]     testJSDocTokenStream("  *  @param foo.Bar opt_name this parameter is a name \n" + " */ ", tokens, strings); [EOL] } <line_num>: 149,161
public void testJsDocTokenization9() throws Exception { [EOL]     List<JsDocToken> tokens = ImmutableList.of(STAR, ANNOTATION, STRING, STRING, STRING, STRING, STRING, ANNOTATION, STRING, EOL, EOC); [EOL]     List<String> strings = ImmutableList.of("param", "foo.Bar", "opt_name", "this", "parameter", "does", "media", "blah"); [EOL]     testJSDocTokenStream(" * @param foo.Bar opt_name this parameter does @media blah\n" + " */", tokens, strings); [EOL] } <line_num>: 163,173
public void testJsDocTokenization10() throws Exception { [EOL]     List<JsDocToken> tokens = ImmutableList.of(STRING, GT, EOC); [EOL]     List<String> strings = ImmutableList.of("Array<String"); [EOL]     testJSDocTokenStream("Array<String>*/", tokens, strings); [EOL] } <line_num>: 175,179
public void testJsDocTokenization11() throws Exception { [EOL]     List<JsDocToken> tokens = ImmutableList.of(ANNOTATION, LC, STRING, QMARK, RC, EOC, EOF); [EOL]     List<String> strings = ImmutableList.of("param", "string"); [EOL]     testJSDocTokenStream("@param {string?}*/", tokens, strings); [EOL]     testJSDocTokenStream(" @param {string?}*/", tokens, strings); [EOL]     testJSDocTokenStream("@param { string?}*/", tokens, strings); [EOL]     testJSDocTokenStream("@param {string ?}*/", tokens, strings); [EOL]     testJSDocTokenStream("@param  {string ?  } */", tokens, strings); [EOL]     testJSDocTokenStream("@param { string  ?  }*/", tokens, strings); [EOL]     testJSDocTokenStream("@param {string?  }*/", tokens, strings); [EOL] } <line_num>: 181,192
public void testJsDocTokenization12() throws Exception { [EOL]     List<JsDocToken> tokens = ImmutableList.of(STRING, ELLIPSIS, EOC); [EOL]     List<String> strings = ImmutableList.of("function"); [EOL]     testJSDocTokenStream("function ...*/", tokens, strings); [EOL] } <line_num>: 194,199
public void testJsDocTokenization13() throws Exception { [EOL]     List<JsDocToken> tokens = ImmutableList.of(ELLIPSIS, LB, STRING, RB, EOC); [EOL]     List<String> strings = ImmutableList.of("number"); [EOL]     testJSDocTokenStream("...[number]*/", tokens, strings); [EOL] } <line_num>: 201,206
public void testJsDocTokenization14() throws Exception { [EOL]     List<JsDocToken> tokens = ImmutableList.of(STRING, LB, STRING, EOC); [EOL]     List<String> strings = ImmutableList.of("foo", "bar..."); [EOL]     testJSDocTokenStream("foo[ bar...*/", tokens, strings); [EOL] } <line_num>: 208,217
public void testJsDocTokenization15() throws Exception { [EOL]     List<JsDocToken> tokens = ImmutableList.of(STRING, LB, STRING, COMMA, ELLIPSIS, EOC); [EOL]     List<String> strings = ImmutableList.of("foo", "bar"); [EOL]     testJSDocTokenStream("foo[ bar,...*/", tokens, strings); [EOL]     testJSDocTokenStream("foo[ bar ,...*/", tokens, strings); [EOL]     testJSDocTokenStream("foo[bar, ...*/", tokens, strings); [EOL]     testJSDocTokenStream("foo[ bar  ,   ...  */", tokens, strings); [EOL]     testJSDocTokenStream("foo [bar,... */", tokens, strings); [EOL] } <line_num>: 219,229
public void testJsDocTokenization16() throws Exception { [EOL]     List<JsDocToken> tokens = ImmutableList.of(STRING, COLON, COLON, COLON, ELLIPSIS, STRING, COLON, STRING, EOC); [EOL]     List<String> strings = ImmutableList.of("foo", "bar", "bar2"); [EOL]     testJSDocTokenStream("foo:::...bar:bar2*/", tokens, strings); [EOL] } <line_num>: 231,237
public void testJsDocTokenization17() throws Exception { [EOL]     List<JsDocToken> tokens = ImmutableList.of(STRING, EOL, EOC); [EOL]     List<String> strings = ImmutableList.of(".."); [EOL]     testJSDocTokenStream("..\n*/", tokens, strings); [EOL] } <line_num>: 239,244
public void testJsDocTokenization18() throws Exception { [EOL]     List<JsDocToken> tokens = ImmutableList.of(STRING, EOL, EOC); [EOL]     List<String> strings = ImmutableList.of("."); [EOL]     testJSDocTokenStream(".\n*/", tokens, strings); [EOL] } <line_num>: 246,251
public void testJsDocTokenization19() throws Exception { [EOL]     List<JsDocToken> tokens = ImmutableList.of(ANNOTATION, LC, STAR, RC, EOC); [EOL]     List<String> strings = ImmutableList.of("type", "*"); [EOL]     testJSDocTokenStream("@type {*}*/", tokens, strings); [EOL] } <line_num>: 253,258
public void testJsDocTokenization20() throws Exception { [EOL]     List<JsDocToken> tokens = ImmutableList.of(ANNOTATION, LC, BANG, STRING, RC, EOC, EOF); [EOL]     List<String> strings = ImmutableList.of("param", "Object"); [EOL]     testJSDocTokenStream("@param {!Object}*/", tokens, strings); [EOL]     testJSDocTokenStream(" @param {!Object}*/", tokens, strings); [EOL]     testJSDocTokenStream("@param {! Object}*/", tokens, strings); [EOL]     testJSDocTokenStream("@param { !Object}*/", tokens, strings); [EOL]     testJSDocTokenStream("@param  {!Object  } */", tokens, strings); [EOL]     testJSDocTokenStream("@param {  ! Object  }*/", tokens, strings); [EOL]     testJSDocTokenStream("@param {!Object  }*/", tokens, strings); [EOL] } <line_num>: 260,271
public void testJsDocTokenization21() throws Exception { [EOL]     List<JsDocToken> tokens = ImmutableList.of(ANNOTATION, LC, STRING, EQUALS, RC, EOC, EOF); [EOL]     List<String> strings = ImmutableList.of("param", "Object"); [EOL]     testJSDocTokenStream("@param {Object=}*/", tokens, strings); [EOL]     testJSDocTokenStream(" @param {Object=}*/", tokens, strings); [EOL]     testJSDocTokenStream("@param { Object =}*/", tokens, strings); [EOL]     testJSDocTokenStream("@param { Object=}*/", tokens, strings); [EOL]     testJSDocTokenStream("@param  {Object=  } */", tokens, strings); [EOL]     testJSDocTokenStream("@param { Object = }*/", tokens, strings); [EOL]     testJSDocTokenStream("@param {Object=  }*/", tokens, strings); [EOL] } <line_num>: 273,284
private void testJSDocTokenStream(String comment, List<JsDocToken> tokens, List<String> strings) { [EOL]     JsDocTokenStream stream = new JsDocTokenStream(comment, 0); [EOL]     int stringsIndex = 0; [EOL]     for (JsDocToken token : tokens) { [EOL]         JsDocToken readToken = stream.getJsDocToken(); [EOL]         if (token != readToken) { [EOL]             assertEquals(token, readToken); [EOL]         } [EOL]         if (token == ANNOTATION || token == STRING) { [EOL]             assertEquals(strings.get(stringsIndex++), stream.getString()); [EOL]         } [EOL]     } [EOL] } <line_num>: 286,303
