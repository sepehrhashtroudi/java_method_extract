public InlineSimpleMethodsTest() { [EOL]     super("", false); [EOL] } <line_num>: 21,23
@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     super.enableLineNumberCheck(true); [EOL] } <line_num>: 25,29
@Override [EOL] protected CompilerPass getProcessor(Compiler compiler) { [EOL]     return new InlineSimpleMethods(compiler); [EOL] } <line_num>: 31,34
private void testWithPrefix(String definitions, String js, String expected) { [EOL]     test(definitions + js, definitions + expected); [EOL] } <line_num>: 40,42
public void testSimpleInline1() { [EOL]     testWithPrefix("function Foo(){}" + "Foo.prototype.bar=function(){return this.baz};", "var x=(new Foo).bar();var y=(new Foo).bar();", "var x=(new Foo).baz;var y=(new Foo).baz"); [EOL] } <line_num>: 44,49
public void testSimpleInline2() { [EOL]     testWithPrefix("function Foo(){}" + "Foo.prototype={bar:function(){return this.baz}};", "var x=(new Foo).bar();var y=(new Foo).bar();", "var x=(new Foo).baz;var y=(new Foo).baz"); [EOL] } <line_num>: 51,56
public void testSimpleGetterInline1() { [EOL]     testSame("function Foo(){}" + "Foo.prototype={get bar(){return this.baz}};" + "var x=(new Foo).bar;var y=(new Foo).bar"); [EOL]     testSame("function Foo(){}" + "Foo.prototype={get bar(){return this.baz}};" + "var x=(new Foo).bar();var y=(new Foo).bar()"); [EOL] } <line_num>: 58,68
public void testSimpleSetterInline1() { [EOL]     testSame("function Foo(){}" + "Foo.prototype={set bar(a){return this.baz}};" + "var x=(new Foo).bar;var y=(new Foo).bar"); [EOL]     testSame("function Foo(){}" + "Foo.prototype={set bar(a){return this.baz}};" + "var x=(new Foo).bar();var y=(new Foo).bar()"); [EOL] } <line_num>: 70,78
public void testSelfInline() { [EOL]     testWithPrefix("function Foo(){}" + "Foo.prototype.bar=function(){return this.baz};", "Foo.prototype.meth=function(){this.bar();}", "Foo.prototype.meth=function(){this.baz}"); [EOL] } <line_num>: 80,85
public void testCallWithArgs() { [EOL]     testWithPrefix("function Foo(){}" + "Foo.prototype.bar=function(){return this.baz};", "var x=(new Foo).bar(3,new Foo)", "var x=(new Foo).bar(3,new Foo)"); [EOL] } <line_num>: 87,92
public void testCallWithConstArgs() { [EOL]     testWithPrefix("function Foo(){}" + "Foo.prototype.bar=function(a){return this.baz};", "var x=(new Foo).bar(3, 4)", "var x=(new Foo).baz"); [EOL] } <line_num>: 94,99
public void testNestedProperties() { [EOL]     testWithPrefix("function Foo(){}" + "Foo.prototype.bar=function(){return this.baz.ooka};", "(new Foo).bar()", "(new Foo).baz.ooka"); [EOL] } <line_num>: 101,106
public void testSkipComplexMethods() { [EOL]     testWithPrefix("function Foo(){}" + "Foo.prototype.bar=function(){return this.baz};" + "Foo.prototype.condy=function(){return this.baz?this.baz:1};", "var x=(new Foo).argy()", "var x=(new Foo).argy()"); [EOL] } <line_num>: 108,114
public void testSkipConflictingMethods() { [EOL]     testWithPrefix("function Foo(){}" + "Foo.prototype.bar=function(){return this.baz};" + "Foo.prototype.bar=function(){return this.bazz};", "var x=(new Foo).bar()", "var x=(new Foo).bar()"); [EOL] } <line_num>: 116,122
public void testSameNamesDifferentDefinitions() { [EOL]     testWithPrefix("function A(){}" + "A.prototype.g=function(){return this.a};" + "function B(){}" + "B.prototype.g=function(){return this.b};", "var x=(new A).g();" + "var y=(new B).g();" + "var a=new A;" + "var ag=a.g();", "var x=(new A).g();" + "var y=(new B).g();" + "var a=new A;" + "var ag=a.g()"); [EOL] } <line_num>: 124,137
public void testSameNamesSameDefinitions() { [EOL]     testWithPrefix("function A(){}" + "A.prototype.g=function(){return this.a};" + "function B(){}" + "B.prototype.g=function(){return this.a};", "var x=(new A).g();" + "var y=(new B).g();" + "var a=new A;" + "var ag=a.g();", "var x=(new A).a;" + "var y=(new B).a;" + "var a=new A;" + "var ag=a.a"); [EOL] } <line_num>: 139,152
public void testConfusingNames() { [EOL]     testWithPrefix("function Foo(){}" + "Foo.prototype.bar=function(){return this.baz};", "function bar(){var bar=function(){};bar()}", "function bar(){var bar=function(){};bar()}"); [EOL] } <line_num>: 154,159
public void testConstantInline() { [EOL]     testWithPrefix("function Foo(){}" + "Foo.prototype.bar=function(){return 3};", "var f=new Foo;var x=f.bar()", "var f=new Foo;var x=3"); [EOL] } <line_num>: 161,166
public void testConstantArrayInline() { [EOL]     testWithPrefix("function Foo(){}" + "Foo.prototype.bar=function(){return[3,4]};", "var f=new Foo;var x=f.bar()", "var f=new Foo;var x=[3,4]"); [EOL] } <line_num>: 168,173
public void testConstantInlineWithSideEffects() { [EOL]     testWithPrefix("function Foo(){}" + "Foo.prototype.bar=function(){return 3};", "var x=(new Foo).bar()", "var x=(new Foo).bar()"); [EOL] } <line_num>: 175,180
public void testEmptyMethodInline() { [EOL]     testWithPrefix("function Foo(){}" + "Foo.prototype.bar=function(a){};", "var x=new Foo; x.bar();", "var x=new Foo"); [EOL] } <line_num>: 182,187
public void testEmptyMethodInlineWithSideEffects() { [EOL]     testWithPrefix("function Foo(){}" + "Foo.prototype.bar=function(){};", "(new Foo).bar();var y=new Foo;y.bar(new Foo)", "(new Foo).bar();var y=new Foo;y.bar(new Foo)"); [EOL] } <line_num>: 189,194
public void testEmptyMethodInlineInAssign1() { [EOL]     testWithPrefix("function Foo(){}" + "Foo.prototype.bar=function(){};", "var x=new Foo;var y=x.bar()", "var x=new Foo;var y=void 0"); [EOL] } <line_num>: 196,201
public void testEmptyMethodInlineInAssign2() { [EOL]     testWithPrefix("function Foo(){}" + "Foo.prototype.bar=function(){};", "var x=new Foo;var y=x.bar().toString()", "var x=new Foo;var y=(void 0).toString()"); [EOL] } <line_num>: 203,208
public void testNormalMethod() { [EOL]     testWithPrefix("function Foo(){}" + "Foo.prototype.bar=function(){var x=1};", "var x=new Foo;x.bar()", "var x=new Foo;x.bar()"); [EOL] } <line_num>: 210,215
public void testNoInlineOfExternMethods1() { [EOL]     testSame("var external={};external.charAt;", "external.charAt()", (DiagnosticType) null); [EOL] } <line_num>: 217,220
public void testNoInlineOfExternMethods2() { [EOL]     testSame("var external={};external.charAt=function(){};", "external.charAt()", (DiagnosticType) null); [EOL] } <line_num>: 222,225
public void testNoInlineOfExternMethods3() { [EOL]     testSame("var external={};external.bar=function(){};", "function Foo(){}Foo.prototype.bar=function(){};(new Foo).bar()", (DiagnosticType) null); [EOL] } <line_num>: 227,231
public void testNoInlineOfDangerousProperty() { [EOL]     testSame("function Foo(){this.bar=3}" + "Foo.prototype.bar=function(){};" + "var x=new Foo;var y=x.bar()"); [EOL] } <line_num>: 233,237
public void testNoWarn() { [EOL]     testSame("function Foo(){}" + "Foo.prototype.bar=function(opt_a,b){var x=1};" + "var x=new Foo;x.bar()"); [EOL]     testSame("function Foo(){}" + "Foo.prototype.bar=function(var_args,b){var x=1};" + "var x=new Foo;x.bar()"); [EOL] } <line_num>: 242,250
public void testObjectLit() { [EOL]     testSame("Foo.prototype.bar=function(){return this.baz_};" + "var blah={bar:function(){}};" + "(new Foo).bar()"); [EOL] } <line_num>: 252,256
public void testObjectLit2() { [EOL]     testSame("var blah={bar:function(){}};" + "(new Foo).bar()"); [EOL] } <line_num>: 258,261
public void testObjectLitExtern() { [EOL]     String externs = "window.bridge={_sip:function(){}};"; [EOL]     testSame(externs, "window.bridge._sip()", null); [EOL] } <line_num>: 263,266
public void testExternFunction() { [EOL]     String externs = "function emptyFunction() {}"; [EOL]     testSame(externs, "function Foo(){this.empty=emptyFunction}" + "(new Foo).empty()", null); [EOL] } <line_num>: 268,273
public void testIssue2508576_1() { [EOL]     String externs = "function alert(a) {}"; [EOL]     testSame(externs, "({a:alert,b:alert}).a(\"a\")", null); [EOL] } <line_num>: 275,279
public void testIssue2508576_2() { [EOL]     testSame("({a:function(){},b:x()}).a(\"a\")"); [EOL] } <line_num>: 281,284
public void testIssue2508576_3() { [EOL]     test("({a:function(){},b:alert}).a(\"a\")", ""); [EOL] } <line_num>: 286,289
public void testAnonymousGet() { [EOL]     testSame("({get a(){return function(){}},b:alert}).a(\"a\")"); [EOL]     testSame("({get a(){},b:alert}).a(\"a\")"); [EOL]     testSame("({get a(){},b:alert}).a"); [EOL] } <line_num>: 291,296
public void testAnonymousSet() { [EOL]     testSame("({set a(b){return function(){}},b:alert}).a(\"a\")"); [EOL]     testSame("({set a(b){},b:alert}).a(\"a\")"); [EOL]     testSame("({set a(b){},b:alert}).a"); [EOL] } <line_num>: 298,303
