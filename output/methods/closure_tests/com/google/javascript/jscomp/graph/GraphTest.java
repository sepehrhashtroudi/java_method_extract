public void testDirectedSimple() { [EOL]     DiGraph<String, String> graph = LinkedDirectedGraph.create(); [EOL]     graph.createNode("a"); [EOL]     graph.createNode("b"); [EOL]     graph.createNode("c"); [EOL]     graph.connect("a", "->", "b"); [EOL]     assertTrue(graph.hasNode("a")); [EOL]     assertTrue(graph.hasNode("b")); [EOL]     assertTrue(graph.hasNode("c")); [EOL]     assertFalse(graph.hasNode("d")); [EOL]     assertTrue(graph.isConnected("a", "b")); [EOL]     assertTrue(graph.isConnected("b", "a")); [EOL]     assertFalse(graph.isConnected("a", "c")); [EOL]     assertFalse(graph.isConnected("b", "c")); [EOL]     assertFalse(graph.isConnected("c", "a")); [EOL]     assertFalse(graph.isConnected("c", "b")); [EOL]     assertFalse(graph.isConnected("a", "a")); [EOL]     assertFalse(graph.isConnected("b", "b")); [EOL]     assertFalse(graph.isConnected("b", "c")); [EOL]     assertTrue(graph.isConnectedInDirection("a", "b")); [EOL]     assertFalse(graph.isConnectedInDirection("b", "a")); [EOL]     assertFalse(graph.isConnectedInDirection("a", "c")); [EOL]     assertFalse(graph.isConnectedInDirection("b", "c")); [EOL]     assertFalse(graph.isConnectedInDirection("c", "a")); [EOL]     assertFalse(graph.isConnectedInDirection("c", "b")); [EOL]     graph.disconnect("a", "b"); [EOL]     assertFalse(graph.isConnected("a", "b")); [EOL]     assertFalse(graph.isConnected("b", "a")); [EOL]     graph.connect("a", "->", "b"); [EOL]     graph.connect("b", "->", "a"); [EOL]     graph.disconnect("a", "b"); [EOL]     assertFalse(graph.isConnected("a", "b")); [EOL]     assertFalse(graph.isConnected("b", "a")); [EOL]     graph.connect("a", "->", "b"); [EOL]     graph.connect("b", "->", "a"); [EOL]     graph.disconnectInDirection("a", "b"); [EOL]     assertTrue(graph.isConnected("b", "a")); [EOL]     assertTrue(graph.isConnected("a", "b")); [EOL]     assertFalse(graph.isConnectedInDirection("a", "b")); [EOL]     assertTrue(graph.isConnectedInDirection("b", "a")); [EOL] } <line_num>: 42,89
public void testUndirectedSimple() { [EOL]     UndiGraph<String, String> graph = LinkedUndirectedGraph.create(); [EOL]     graph.createNode("a"); [EOL]     graph.createNode("b"); [EOL]     graph.createNode("c"); [EOL]     graph.connect("a", "--", "b"); [EOL]     assertTrue(graph.hasNode("a")); [EOL]     assertTrue(graph.hasNode("b")); [EOL]     assertTrue(graph.hasNode("c")); [EOL]     assertFalse(graph.hasNode("d")); [EOL]     assertTrue(graph.isConnected("a", "b")); [EOL]     assertTrue(graph.isConnected("b", "a")); [EOL]     assertFalse(graph.isConnected("a", "c")); [EOL]     assertFalse(graph.isConnected("b", "c")); [EOL]     assertFalse(graph.isConnected("c", "a")); [EOL]     assertFalse(graph.isConnected("c", "b")); [EOL]     assertFalse(graph.isConnected("a", "a")); [EOL]     assertFalse(graph.isConnected("b", "b")); [EOL]     assertFalse(graph.isConnected("b", "c")); [EOL]     graph.disconnect("a", "b"); [EOL]     assertFalse(graph.isConnected("a", "b")); [EOL]     assertFalse(graph.isConnected("b", "a")); [EOL] } <line_num>: 91,116
public void testDirectedSelfLoop() { [EOL]     DiGraph<String, String> graph = LinkedDirectedGraph.create(); [EOL]     graph.createNode("a"); [EOL]     graph.createNode("b"); [EOL]     graph.connect("a", "->", "a"); [EOL]     assertTrue(graph.isConnected("a", "a")); [EOL]     assertFalse(graph.isConnected("a", "b")); [EOL]     assertFalse(graph.isConnected("b", "a")); [EOL]     assertTrue(graph.isConnectedInDirection("a", "a")); [EOL]     assertFalse(graph.isConnectedInDirection("a", "b")); [EOL]     assertFalse(graph.isConnectedInDirection("b", "a")); [EOL]     graph.disconnect("a", "a"); [EOL]     assertFalse(graph.isConnected("a", "a")); [EOL]     graph.connect("a", "->", "a"); [EOL]     graph.disconnect("a", "a"); [EOL]     assertFalse(graph.isConnected("a", "a")); [EOL]     assertFalse(graph.isConnected("a", "a")); [EOL]     graph.connect("a", "->", "a"); [EOL]     graph.disconnectInDirection("a", "a"); [EOL]     assertFalse(graph.isConnected("a", "a")); [EOL] } <line_num>: 118,145
public void testUndirectedSelfLoop() { [EOL]     UndiGraph<String, String> graph = LinkedUndirectedGraph.create(); [EOL]     graph.createNode("a"); [EOL]     graph.createNode("b"); [EOL]     graph.connect("a", "--", "a"); [EOL]     assertTrue(graph.isConnected("a", "a")); [EOL]     assertFalse(graph.isConnected("a", "b")); [EOL]     assertFalse(graph.isConnected("b", "a")); [EOL]     graph.disconnect("a", "a"); [EOL]     assertFalse(graph.isConnected("a", "a")); [EOL] } <line_num>: 147,160
public void testDirectedInAndOutEdges() { [EOL]     DiGraph<String, String> graph = LinkedDirectedGraph.create(); [EOL]     graph.createNode("a"); [EOL]     graph.createNode("b"); [EOL]     graph.createNode("c"); [EOL]     graph.createNode("d"); [EOL]     graph.connect("a", "->", "b"); [EOL]     graph.connect("a", "-->", "b"); [EOL]     graph.connect("a", "--->", "b"); [EOL]     graph.connect("a", "->", "c"); [EOL]     graph.connect("c", "->", "d"); [EOL]     assertSetEquals(graph.getDirectedSuccNodes("a"), "b", "c"); [EOL]     assertSetEquals(graph.getDirectedPredNodes("b"), "a"); [EOL]     assertSetEquals(graph.getDirectedPredNodes("c"), "a"); [EOL]     assertListCount(graph.getDirectedSuccNodes("a"), "b", 3); [EOL]     graph.disconnect("a", "b"); [EOL]     assertFalse(graph.isConnected("a", "b")); [EOL] } <line_num>: 162,182
public void testUndirectedNeighbors() { [EOL]     UndiGraph<String, String> graph = LinkedUndirectedGraph.create(); [EOL]     graph.createNode("a"); [EOL]     graph.createNode("b"); [EOL]     graph.createNode("c"); [EOL]     graph.createNode("d"); [EOL]     graph.connect("a", "-", "b"); [EOL]     graph.connect("a", "--", "b"); [EOL]     graph.connect("a", "---", "b"); [EOL]     graph.connect("a", "-", "c"); [EOL]     graph.connect("c", "-", "d"); [EOL]     assertSetEquals(graph.getNeighborNodes("a"), "b", "c"); [EOL]     assertSetEquals(graph.getNeighborNodes("b"), "a"); [EOL]     assertSetEquals(graph.getNeighborNodes("c"), "a", "d"); [EOL]     assertListCount(graph.getNeighborNodes("a"), "b", 3); [EOL]     graph.disconnect("a", "b"); [EOL]     assertFalse(graph.isConnected("a", "b")); [EOL] } <line_num>: 184,204
public void testDirectedGetFirstEdge() { [EOL]     DiGraph<String, String> graph = LinkedDirectedGraph.create(); [EOL]     graph.createNode("a"); [EOL]     graph.createNode("b"); [EOL]     graph.createNode("c"); [EOL]     graph.connect("a", "-", "b"); [EOL]     assertEquals(graph.getFirstEdge("a", "b").getValue(), "-"); [EOL]     assertEquals(graph.getFirstEdge("b", "a").getValue(), "-"); [EOL]     assertNull(graph.getFirstEdge("a", "c")); [EOL] } <line_num>: 206,216
public void testUndirectedGetFirstEdge() { [EOL]     UndiGraph<String, String> graph = LinkedUndirectedGraph.create(); [EOL]     graph.createNode("a"); [EOL]     graph.createNode("b"); [EOL]     graph.createNode("c"); [EOL]     graph.connect("a", "-", "b"); [EOL]     assertEquals(graph.getFirstEdge("a", "b").getValue(), "-"); [EOL]     assertEquals(graph.getFirstEdge("b", "a").getValue(), "-"); [EOL]     assertNull(graph.getFirstEdge("a", "c")); [EOL] } <line_num>: 218,228
public void testNodeAnnotations() { [EOL]     Graph<String, String> graph = LinkedUndirectedGraph.create(); [EOL]     GraphNode<String, String> a = graph.createNode("a"); [EOL]     GraphNode<String, String> b = graph.createNode("b"); [EOL]     checkAnnotations(graph, a, b); [EOL] } <line_num>: 230,235
public void testEdgeAnnotations() { [EOL]     Graph<String, String> graph = LinkedUndirectedGraph.create(); [EOL]     graph.createNode("1"); [EOL]     graph.createNode("2"); [EOL]     graph.createNode("3"); [EOL]     graph.connect("1", "a", "2"); [EOL]     graph.connect("2", "b", "3"); [EOL]     GraphEdge<String, String> a = graph.getEdges("1", "2").get(0); [EOL]     GraphEdge<String, String> b = graph.getEdges("2", "3").get(0); [EOL]     checkAnnotations(graph, a, b); [EOL] } <line_num>: 237,247
private static void checkAnnotations(Graph<String, String> graph, Annotatable a, Annotatable b) { [EOL]     final Annotation A = new Annotation() { [EOL]     }; [EOL]     final Annotation B = new Annotation() { [EOL]     }; [EOL]     assertNull(a.getAnnotation()); [EOL]     assertNull(b.getAnnotation()); [EOL]     a.setAnnotation(A); [EOL]     b.setAnnotation(B); [EOL]     assertSame(A, a.getAnnotation()); [EOL]     assertSame(B, b.getAnnotation()); [EOL]     graph.clearEdgeAnnotations(); [EOL]     graph.clearNodeAnnotations(); [EOL]     assertNull(a.getAnnotation()); [EOL]     assertNull(b.getAnnotation()); [EOL]     a.setAnnotation(A); [EOL]     b.setAnnotation(B); [EOL]     graph.pushEdgeAnnotations(); [EOL]     graph.pushNodeAnnotations(); [EOL]     assertNull(a.getAnnotation()); [EOL]     assertNull(b.getAnnotation()); [EOL]     a.setAnnotation(B); [EOL]     b.setAnnotation(B); [EOL]     graph.pushEdgeAnnotations(); [EOL]     graph.pushNodeAnnotations(); [EOL]     a.setAnnotation(B); [EOL]     b.setAnnotation(A); [EOL]     assertSame(B, a.getAnnotation()); [EOL]     assertSame(A, b.getAnnotation()); [EOL]     graph.popEdgeAnnotations(); [EOL]     graph.popNodeAnnotations(); [EOL]     assertSame(B, a.getAnnotation()); [EOL]     assertSame(B, b.getAnnotation()); [EOL]     graph.popEdgeAnnotations(); [EOL]     graph.popNodeAnnotations(); [EOL]     assertSame(A, a.getAnnotation()); [EOL]     assertSame(B, b.getAnnotation()); [EOL] } <line_num>: 249,295
public void testDegree() { [EOL]     testDirectedDegree(LinkedDirectedGraph.<String, String>create()); [EOL]     testDirectedDegree(LinkedUndirectedGraph.<String, String>create()); [EOL] } <line_num>: 297,300
public void testDirectedDegree(Graph<String, String> graph) { [EOL]     graph.createNode("a"); [EOL]     graph.createNode("b"); [EOL]     graph.createNode("c"); [EOL]     graph.createNode("d"); [EOL]     assertEquals(0, graph.getNodeDegree("a")); [EOL]     graph.connect("a", "-", "b"); [EOL]     assertEquals(1, graph.getNodeDegree("a")); [EOL]     graph.connect("b", "-", "c"); [EOL]     assertEquals(1, graph.getNodeDegree("a")); [EOL]     graph.connect("a", "-", "c"); [EOL]     assertEquals(2, graph.getNodeDegree("a")); [EOL]     graph.connect("d", "-", "a"); [EOL]     assertEquals(3, graph.getNodeDegree("a")); [EOL] } <line_num>: 302,316
public void testDirectedConnectIfNotFound() { [EOL]     testDirectedConnectIfNotFound(LinkedDirectedGraph.<String, String>create()); [EOL]     testDirectedConnectIfNotFound(LinkedUndirectedGraph.<String, String>create()); [EOL] } <line_num>: 318,323
public void testDirectedConnectIfNotFound(Graph<String, String> graph) { [EOL]     graph.createNode("a"); [EOL]     graph.createNode("b"); [EOL]     graph.connectIfNotFound("a", "-", "b"); [EOL]     assertEquals(1, graph.getNodeDegree("a")); [EOL]     graph.connectIfNotFound("a", "-", "b"); [EOL]     assertEquals(1, graph.getNodeDegree("a")); [EOL]     graph.connectIfNotFound("a", null, "b"); [EOL]     assertEquals(2, graph.getNodeDegree("a")); [EOL]     graph.connectIfNotFound("a", null, "b"); [EOL]     assertEquals(2, graph.getNodeDegree("a")); [EOL] } <line_num>: 325,336
public void testSimpleSubGraph() { [EOL]     UndiGraph<String, String> graph = LinkedUndirectedGraph.create(); [EOL]     graph.createNode("a"); [EOL]     graph.createNode("b"); [EOL]     graph.createNode("c"); [EOL]     graph.connect("a", "--", "b"); [EOL]     SubGraph<String, String> subGraph = graph.newSubGraph(); [EOL]     subGraph.addNode("a"); [EOL]     subGraph.addNode("b"); [EOL]     try { [EOL]         subGraph.addNode("d"); [EOL]         fail("SubGraph should not allow add for node that is not in graph."); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     assertFalse(subGraph.isIndependentOf("a")); [EOL]     assertFalse(subGraph.isIndependentOf("b")); [EOL]     assertTrue(subGraph.isIndependentOf("c")); [EOL] } <line_num>: 338,360
private <T extends GraphNode<String, String>> void assertListCount(List<T> list, String target, int count) { [EOL]     for (GraphNode<String, String> node : list) { [EOL]         if (node.getValue().equals(target)) { [EOL]             count--; [EOL]         } [EOL]     } [EOL]     assertTrue(count == 0); [EOL] } <line_num>: 362,370
private <T extends GraphNode<String, String>> void assertSetEquals(List<T> list, String... targets) { [EOL]     Set<String> set = new HashSet<String>(); [EOL]     for (GraphNode<String, String> node : list) { [EOL]         set.add(node.getValue()); [EOL]     } [EOL]     Set<String> otherSet = new HashSet<String>(); [EOL]     for (String target : targets) { [EOL]         otherSet.add(target); [EOL]     } [EOL]     assertTrue(otherSet.equals(set)); [EOL] } <line_num>: 372,383
