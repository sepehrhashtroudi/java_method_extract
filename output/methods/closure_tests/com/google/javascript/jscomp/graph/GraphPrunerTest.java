public void testThreeNodesConnected() { [EOL]     DiGraph<String, String> graph = LinkedDirectedGraph.create(); [EOL]     graph.createNode("A"); [EOL]     graph.createNode("B"); [EOL]     graph.createNode("C"); [EOL]     graph.connect("A", "--", "B"); [EOL]     graph.connect("B", "--", "C"); [EOL]     DiGraph<String, String> pruned = new GraphPruner<String, String>(graph).prune(Predicates.in(Lists.newArrayList("A", "C"))); [EOL]     assertEquals(2, pruned.getNodes().size()); [EOL]     assertTrue(pruned.isConnectedInDirection("A", "C")); [EOL] } <line_num>: 29,42
public void testThreeNodesDisconnected() { [EOL]     DiGraph<String, String> graph = LinkedDirectedGraph.create(); [EOL]     graph.createNode("A"); [EOL]     graph.createNode("B"); [EOL]     graph.createNode("C"); [EOL]     graph.connect("A", "--", "B"); [EOL]     graph.connect("C", "--", "B"); [EOL]     DiGraph<String, String> pruned = new GraphPruner<String, String>(graph).prune(Predicates.in(Lists.newArrayList("A", "C"))); [EOL]     assertEquals(2, pruned.getNodes().size()); [EOL]     assertFalse(pruned.isConnectedInDirection("A", "C")); [EOL] } <line_num>: 44,57
public void testFourNodesConnected1() { [EOL]     DiGraph<String, String> graph = LinkedDirectedGraph.create(); [EOL]     graph.createNode("A"); [EOL]     graph.createNode("B"); [EOL]     graph.createNode("C"); [EOL]     graph.createNode("D"); [EOL]     graph.connect("A", "--", "C"); [EOL]     graph.connect("B", "--", "C"); [EOL]     graph.connect("C", "--", "D"); [EOL]     graph.connect("A", "--", "D"); [EOL]     DiGraph<String, String> pruned = new GraphPruner<String, String>(graph).prune(Predicates.not(Predicates.equalTo("C"))); [EOL]     assertEquals(3, pruned.getNodes().size()); [EOL]     assertTrue(pruned.isConnectedInDirection("A", "D")); [EOL]     assertTrue(pruned.isConnectedInDirection("B", "D")); [EOL]     assertFalse(pruned.isConnectedInDirection("A", "B")); [EOL] } <line_num>: 59,77
public void testFourNodesConnected2() { [EOL]     DiGraph<String, String> graph = LinkedDirectedGraph.create(); [EOL]     graph.createNode("A"); [EOL]     graph.createNode("B"); [EOL]     graph.createNode("C"); [EOL]     graph.createNode("D"); [EOL]     graph.connect("A", "--", "B"); [EOL]     graph.connect("B", "--", "C"); [EOL]     graph.connect("C", "--", "D"); [EOL]     DiGraph<String, String> pruned = new GraphPruner<String, String>(graph).prune(Predicates.not(Predicates.in(Lists.newArrayList("B", "C")))); [EOL]     assertEquals(2, pruned.getNodes().size()); [EOL]     assertTrue(pruned.isConnectedInDirection("A", "D")); [EOL] } <line_num>: 79,94
public void testFiveNodesConnected() { [EOL]     DiGraph<String, String> graph = LinkedDirectedGraph.create(); [EOL]     graph.createNode("A"); [EOL]     graph.createNode("B"); [EOL]     graph.createNode("C"); [EOL]     graph.createNode("D"); [EOL]     graph.createNode("E"); [EOL]     graph.connect("A", "--", "B"); [EOL]     graph.connect("B", "--", "C"); [EOL]     graph.connect("C", "--", "D"); [EOL]     graph.connect("D", "--", "E"); [EOL]     graph.connect("D", "--", "B"); [EOL]     DiGraph<String, String> pruned = new GraphPruner<String, String>(graph).prune(Predicates.not(Predicates.in(Lists.newArrayList("B", "C", "D")))); [EOL]     assertEquals(2, pruned.getNodes().size()); [EOL]     assertTrue(pruned.isConnectedInDirection("A", "E")); [EOL] } <line_num>: 96,114
