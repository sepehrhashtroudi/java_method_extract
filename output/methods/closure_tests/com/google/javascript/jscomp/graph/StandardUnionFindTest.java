@Override [EOL] protected void setUp() { [EOL]     union = new StandardUnionFind<String>(); [EOL] } <line_num>: 37,39
public void testEmpty() { [EOL]     assertEquals(0, union.allEquivalenceClasses().size()); [EOL] } <line_num>: 41,43
public void testAdd() { [EOL]     union.add("foo"); [EOL]     union.add("bar"); [EOL]     assertTrue(null != union.find("foo")); [EOL]     assertEquals(2, union.allEquivalenceClasses().size()); [EOL] } <line_num>: 45,50
public void testUnion() { [EOL]     union.union("A", "B"); [EOL]     union.union("C", "D"); [EOL]     assertEquals(union.find("A"), union.find("B")); [EOL]     assertEquals(union.find("C"), union.find("D")); [EOL]     assertFalse(union.find("A").equals(union.find("D"))); [EOL] } <line_num>: 52,58
public void testSetSize() { [EOL]     union.union("A", "B"); [EOL]     union.union("B", "C"); [EOL]     union.union("D", "E"); [EOL]     union.union("F", "F"); [EOL]     assertEquals(3, union.findAll("A").size()); [EOL]     assertEquals(3, union.findAll("B").size()); [EOL]     assertEquals(3, union.findAll("C").size()); [EOL]     assertEquals(2, union.findAll("D").size()); [EOL]     assertEquals(1, union.findAll("F").size()); [EOL] } <line_num>: 60,72
public void testFind() { [EOL]     union.add("A"); [EOL]     union.add("B"); [EOL]     assertEquals("A", union.find("A")); [EOL]     assertEquals("B", union.find("B")); [EOL]     union.union("A", "B"); [EOL]     assertEquals(union.find("A"), union.find("B")); [EOL]     try { [EOL]         union.find("Z"); [EOL]         fail("find() on unknown element should not be allowed."); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 74,88
public void testAllEquivalenceClasses() { [EOL]     union.union("A", "B"); [EOL]     union.union("A", "B"); [EOL]     union.union("B", "A"); [EOL]     union.union("B", "C"); [EOL]     union.union("D", "E"); [EOL]     union.union("F", "F"); [EOL]     Collection<Set<String>> classes = union.allEquivalenceClasses(); [EOL]     assertEquals(3, classes.size()); [EOL]     assertContentsAnyOrder(classes, ImmutableSet.of("A", "B", "C"), ImmutableSet.of("D", "E"), ImmutableSet.of("F")); [EOL] } <line_num>: 90,104
public void testFindAll() { [EOL]     union.union("A", "B"); [EOL]     union.union("A", "B"); [EOL]     union.union("B", "A"); [EOL]     union.union("D", "E"); [EOL]     union.union("F", "F"); [EOL]     Set<String> aSet = union.findAll("A"); [EOL]     assertEquals(2, aSet.size()); [EOL]     assertTrue(aSet.contains("A")); [EOL]     assertTrue(aSet.contains("B")); [EOL]     assertFalse(aSet.contains("C")); [EOL]     assertFalse(aSet.contains("D")); [EOL]     assertFalse(aSet.contains("E")); [EOL]     assertFalse(aSet.contains("F")); [EOL]     union.union("B", "C"); [EOL]     assertTrue(aSet.contains("C")); [EOL]     assertEquals(3, aSet.size()); [EOL]     try { [EOL]         union.findAll("Z"); [EOL]         fail("findAll() on unknown element should not be allowed."); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 106,131
public void testFindAllIterator() { [EOL]     union.union("A", "B"); [EOL]     union.union("B", "C"); [EOL]     union.union("A", "B"); [EOL]     union.union("D", "E"); [EOL]     Set<String> aSet = union.findAll("A"); [EOL]     Iterator<String> aIter = aSet.iterator(); [EOL]     assertTrue(aIter.hasNext()); [EOL]     assertEquals("A", aIter.next()); [EOL]     assertEquals("B", aIter.next()); [EOL]     assertEquals("C", aIter.next()); [EOL]     assertFalse(aIter.hasNext()); [EOL]     Set<String> dSet = union.findAll("D"); [EOL]     Iterator<String> dIter = dSet.iterator(); [EOL]     assertTrue(dIter.hasNext()); [EOL]     assertEquals("D", dIter.next()); [EOL]     assertEquals("E", dIter.next()); [EOL]     assertFalse(dIter.hasNext()); [EOL] } <line_num>: 133,153
public void testFindAllSize() { [EOL]     union.union("A", "B"); [EOL]     union.union("B", "C"); [EOL]     assertEquals(3, union.findAll("A").size()); [EOL]     assertEquals(3, union.findAll("B").size()); [EOL]     assertEquals(3, union.findAll("C").size()); [EOL]     union.union("D", "E"); [EOL]     assertEquals(3, union.findAll("C").size()); [EOL]     assertEquals(2, union.findAll("D").size()); [EOL]     union.union("B", "E"); [EOL]     assertEquals(5, union.findAll("C").size()); [EOL]     assertEquals(5, union.findAll("D").size()); [EOL] } <line_num>: 155,167
public void testElements() { [EOL]     union.union("A", "B"); [EOL]     union.union("B", "C"); [EOL]     union.union("A", "B"); [EOL]     union.union("D", "E"); [EOL]     Set<String> elements = union.elements(); [EOL]     assertEquals(ImmutableSet.of("A", "B", "C", "D", "E"), elements); [EOL]     assertFalse(elements.contains("F")); [EOL] } <line_num>: 169,178
public void testCopy() { [EOL]     union.union("A", "B"); [EOL]     union.union("B", "Z"); [EOL]     union.union("X", "Y"); [EOL]     UnionFind<String> copy = new StandardUnionFind<String>(union); [EOL]     assertContentsAnyOrder(copy.findAll("Z"), "A", "B", "Z"); [EOL]     assertContentsAnyOrder(copy.findAll("X"), "X", "Y"); [EOL] } <line_num>: 180,187
public void testChangesToCopyDontAffectOriginal() { [EOL]     union.union("A", "B"); [EOL]     union.union("X", "Y"); [EOL]     union.union("A", "C"); [EOL]     UnionFind<String> copy = new StandardUnionFind<String>(union); [EOL]     copy.union("A", "D"); [EOL]     assertContentsAnyOrder(copy.findAll("D"), "A", "B", "C", "D"); [EOL]     assertContentsAnyOrder(union.findAll("A"), "A", "B", "C"); [EOL]     assertContentsAnyOrder(copy.findAll("X"), "X", "Y"); [EOL]     try { [EOL]         union.findAll("D"); [EOL]         fail("D has been inserted to the original collection"); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 189,204
public void testCheckEquivalent() { [EOL]     union.union("A", "B"); [EOL]     union.add("C"); [EOL]     assertTrue(union.areEquivalent("A", "B")); [EOL]     assertFalse(union.areEquivalent("C", "A")); [EOL]     assertFalse(union.areEquivalent("C", "B")); [EOL]     try { [EOL]         union.areEquivalent("A", "F"); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 206,217
private static void assertContentsAnyOrder(String message, Iterable<?> actual, Object... expected) { [EOL]     Assert.assertEquals(message, HashMultiset.create(Arrays.asList(expected)), HashMultiset.create(actual)); [EOL] } <line_num>: 225,230
private static void assertContentsAnyOrder(Iterable<?> actual, Object... expected) { [EOL]     assertContentsAnyOrder((String) null, actual, expected); [EOL] } <line_num>: 236,239
