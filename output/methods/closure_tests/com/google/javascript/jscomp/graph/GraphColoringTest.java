public void testNoEdge() { [EOL]     Graph<String, String> graph = LinkedUndirectedGraph.create(); [EOL]     for (int i = 0; i < 5; i++) { [EOL]         graph.createNode("Node " + i); [EOL]         GraphColoring<String, String> coloring = new GreedyGraphColoring<String, String>(graph); [EOL]         assertEquals(1, coloring.color()); [EOL]         validateColoring(graph); [EOL]         for (int j = 0; j < i; j++) { [EOL]             assertEquals("Node 0", coloring.getPartitionSuperNode("Node 0")); [EOL]         } [EOL]     } [EOL] } <line_num>: 37,50
public void testTwoNodesConnected() { [EOL]     Graph<String, String> graph = LinkedUndirectedGraph.create(); [EOL]     graph.createNode("A"); [EOL]     graph.createNode("B"); [EOL]     graph.connect("A", "--", "B"); [EOL]     GraphColoring<String, String> coloring = new GreedyGraphColoring<String, String>(graph); [EOL]     assertEquals(2, coloring.color()); [EOL]     validateColoring(graph); [EOL]     assertEquals("A", coloring.getPartitionSuperNode("A")); [EOL]     assertEquals("B", coloring.getPartitionSuperNode("B")); [EOL] } <line_num>: 52,63
public void testGreedy() { [EOL]     Graph<String, String> graph = LinkedUndirectedGraph.create(); [EOL]     graph.createNode("A"); [EOL]     graph.createNode("B"); [EOL]     graph.createNode("C"); [EOL]     graph.createNode("D"); [EOL]     graph.connect("A", "--", "C"); [EOL]     graph.connect("B", "--", "C"); [EOL]     graph.connect("B", "--", "D"); [EOL]     GraphColoring<String, String> coloring = new GreedyGraphColoring<String, String>(graph); [EOL]     assertEquals(2, coloring.color()); [EOL]     validateColoring(graph); [EOL]     assertEquals("A", coloring.getPartitionSuperNode("A")); [EOL]     assertEquals("A", coloring.getPartitionSuperNode("B")); [EOL]     assertEquals("C", coloring.getPartitionSuperNode("C")); [EOL] } <line_num>: 65,81
public void testFullyConnected() { [EOL]     final int count = 100; [EOL]     Graph<String, String> graph = LinkedUndirectedGraph.create(); [EOL]     for (int i = 0; i < count; i++) { [EOL]         graph.createNode("Node " + i); [EOL]         for (int j = 0; j < count; j++) { [EOL]             graph.createNode("Node " + j); [EOL]             if (i != j) { [EOL]                 graph.connect("Node " + i, null, "Node " + j); [EOL]             } [EOL]         } [EOL]     } [EOL]     GraphColoring<String, String> coloring = new GreedyGraphColoring<String, String>(graph); [EOL]     assertEquals(count, coloring.color()); [EOL]     validateColoring(graph); [EOL]     for (int i = 0; i < count; i++) { [EOL]         assertEquals("Node " + i, coloring.getPartitionSuperNode("Node " + i)); [EOL]     } [EOL] } <line_num>: 83,102
public void testAllConnectedToOneNode() { [EOL]     final int count = 10; [EOL]     Graph<String, String> graph = LinkedUndirectedGraph.create(); [EOL]     graph.createNode("Center"); [EOL]     for (int i = 0; i < count; i++) { [EOL]         graph.createNode("Node " + i); [EOL]         graph.connect("Center", null, "Node " + i); [EOL]     } [EOL]     GraphColoring<String, String> coloring = new GreedyGraphColoring<String, String>(graph); [EOL]     assertEquals(2, coloring.color()); [EOL]     validateColoring(graph); [EOL]     assertEquals("Center", coloring.getPartitionSuperNode("Center")); [EOL]     for (int i = 0; i < count; i++) { [EOL]         assertEquals("Node 0", coloring.getPartitionSuperNode("Node " + i)); [EOL]     } [EOL] } <line_num>: 104,120
public void testTwoFullyConnected() { [EOL]     final int count = 100; [EOL]     Graph<String, String> graph = LinkedUndirectedGraph.create(); [EOL]     for (int i = 0; i < count; i++) { [EOL]         graph.createNode("Node Left " + i); [EOL]         graph.createNode("Node Right " + i); [EOL]         for (int j = 0; j < count; j++) { [EOL]             graph.createNode("Node Left " + j); [EOL]             graph.createNode("Node Right " + j); [EOL]             if (i != j) { [EOL]                 graph.connect("Node Left " + i, null, "Node Left " + j); [EOL]                 graph.connect("Node Right " + i, null, "Node Right " + j); [EOL]             } [EOL]         } [EOL]     } [EOL]     assertEquals(count, new GreedyGraphColoring<String, String>(graph).color()); [EOL]     validateColoring(graph); [EOL]     for (int i = 0; i < count; i++) { [EOL]         graph.connect("Node Left " + i, null, "Node Right " + i); [EOL]     } [EOL]     assertEquals(count, new GreedyGraphColoring<String, String>(graph).color()); [EOL]     validateColoring(graph); [EOL] } <line_num>: 122,151
@Override [EOL] public int compare(String o1, String o2) { [EOL]     return o1.toString().compareTo(o2.toString()); [EOL] } <line_num>: 168,171
@Override [EOL] public int compare(String o1, String o2) { [EOL]     return o1.replaceAll("D", "@").compareTo(o2.replaceAll("D", "@")); [EOL] } <line_num>: 181,184
public void testDeterministic() { [EOL]     Graph<String, String> graph = LinkedUndirectedGraph.create(); [EOL]     graph.createNode("A"); [EOL]     graph.createNode("B"); [EOL]     graph.createNode("C"); [EOL]     graph.createNode("D"); [EOL]     graph.createNode("E"); [EOL]     graph.connect("A", "-->", "B"); [EOL]     graph.connect("B", "-->", "C"); [EOL]     graph.connect("C", "-->", "D"); [EOL]     graph.connect("D", "-->", "E"); [EOL]     graph.connect("E", "-->", "A"); [EOL]     Comparator<String> lexicographic = new Comparator<String>() { [EOL]  [EOL]         @Override [EOL]         public int compare(String o1, String o2) { [EOL]             return o1.toString().compareTo(o2.toString()); [EOL]         } [EOL]     }; [EOL]     GraphColoring<String, String> coloring = new GreedyGraphColoring<String, String>(graph, lexicographic); [EOL]     assertEquals(3, coloring.color()); [EOL]     validateColoring(graph); [EOL]     assertEquals("A", coloring.getPartitionSuperNode("A")); [EOL]     assertEquals("A", coloring.getPartitionSuperNode("C")); [EOL]     Comparator<String> biasD = new Comparator<String>() { [EOL]  [EOL]         @Override [EOL]         public int compare(String o1, String o2) { [EOL]             return o1.replaceAll("D", "@").compareTo(o2.replaceAll("D", "@")); [EOL]         } [EOL]     }; [EOL]     coloring = new GreedyGraphColoring<String, String>(graph, biasD); [EOL]     assertEquals(3, coloring.color()); [EOL]     validateColoring(graph); [EOL]     assertEquals("A", coloring.getPartitionSuperNode("A")); [EOL]     assertFalse("A".equals(coloring.getPartitionSuperNode("C"))); [EOL] } <line_num>: 153,192
private static <N, E> void validateColoring(Graph<N, E> graph) { [EOL]     for (GraphNode<N, E> node : graph.getNodes()) { [EOL]         assertTrue(node.getAnnotation() != null); [EOL]     } [EOL]     for (GraphEdge<N, E> edge : graph.getEdges()) { [EOL]         Color c1 = edge.getNodeA().getAnnotation(); [EOL]         Color c2 = edge.getNodeB().getAnnotation(); [EOL]         assertTrue(c1 != null); [EOL]         assertTrue(c2 != null); [EOL]         assertTrue(!c1.equals(c2)); [EOL]     } [EOL] } <line_num>: 198,209
