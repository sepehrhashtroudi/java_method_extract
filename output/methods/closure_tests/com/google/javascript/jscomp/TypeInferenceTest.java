@Override [EOL] public void setUp() { [EOL]     compiler = new Compiler(); [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     options.setClosurePass(true); [EOL]     options.setLanguageIn(LanguageMode.ECMASCRIPT5); [EOL]     compiler.initOptions(options); [EOL]     registry = compiler.getTypeRegistry(); [EOL]     assumptions = Maps.newHashMap(); [EOL]     returnScope = null; [EOL] } <line_num>: 75,85
private void assumingThisType(JSType type) { [EOL]     assumedThisType = type; [EOL] } <line_num>: 87,89
private void assuming(String name, JSType type) { [EOL]     assumptions.put(name, type); [EOL] } <line_num>: 91,93
private void assuming(String name, JSTypeNative type) { [EOL]     assuming(name, registry.getNativeType(type)); [EOL] } <line_num>: 95,97
private void inFunction(String js) { [EOL]     String thisBlock = assumedThisType == null ? "" : "/** @this {" + assumedThisType + "} */"; [EOL]     Node root = compiler.parseTestCode("(" + thisBlock + " function() {" + js + "});"); [EOL]     assertEquals("parsing error: " + Joiner.on(", ").join(compiler.getErrors()), 0, compiler.getErrorCount()); [EOL]     Node n = root.getFirstChild().getFirstChild(); [EOL]     TypedScopeCreator scopeCreator = new TypedScopeCreator(compiler); [EOL]     Scope assumedScope = scopeCreator.createScope(n, scopeCreator.createScope(root, null)); [EOL]     for (Map.Entry<String, JSType> entry : assumptions.entrySet()) { [EOL]         assumedScope.declare(entry.getKey(), null, entry.getValue(), null, false); [EOL]     } [EOL]     ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, false); [EOL]     cfa.process(null, n); [EOL]     ControlFlowGraph<Node> cfg = cfa.getCfg(); [EOL]     ReverseAbstractInterpreter rai = compiler.getReverseAbstractInterpreter(); [EOL]     TypeInference dfa = new TypeInference(compiler, cfg, rai, assumedScope, ASSERTION_FUNCTION_MAP); [EOL]     dfa.analyze(); [EOL]     BranchedFlowState<FlowScope> rtnState = cfg.getImplicitReturn().getAnnotation(); [EOL]     returnScope = rtnState.getIn(); [EOL] } <line_num>: 99,132
private JSType getType(String name) { [EOL]     assertTrue("The return scope should not be null.", returnScope != null); [EOL]     StaticSlot<JSType> var = returnScope.getSlot(name); [EOL]     assertTrue("The variable " + name + " is missing from the scope.", var != null); [EOL]     return var.getType(); [EOL] } <line_num>: 134,140
private void verify(String name, JSType type) { [EOL]     Asserts.assertTypeEquals("Mismatch for " + name, type, getType(name)); [EOL] } <line_num>: 142,144
private void verify(String name, JSTypeNative type) { [EOL]     verify(name, registry.getNativeType(type)); [EOL] } <line_num>: 146,148
private void verifySubtypeOf(String name, JSType type) { [EOL]     JSType varType = getType(name); [EOL]     assertTrue("The variable " + name + " is missing a type.", varType != null); [EOL]     assertTrue("The type " + varType + " of variable " + name + " is not a subtype of " + type + ".", varType.isSubtype(type)); [EOL] } <line_num>: 150,155
private void verifySubtypeOf(String name, JSTypeNative type) { [EOL]     verifySubtypeOf(name, registry.getNativeType(type)); [EOL] } <line_num>: 157,159
private EnumType createEnumType(String name, JSTypeNative elemType) { [EOL]     return createEnumType(name, registry.getNativeType(elemType)); [EOL] } <line_num>: 161,163
private EnumType createEnumType(String name, JSType elemType) { [EOL]     return registry.createEnumType(name, null, elemType); [EOL] } <line_num>: 165,167
private JSType createUndefinableType(JSTypeNative type) { [EOL]     return registry.createUnionType(registry.getNativeType(type), registry.getNativeType(VOID_TYPE)); [EOL] } <line_num>: 169,172
private JSType createNullableType(JSTypeNative type) { [EOL]     return createNullableType(registry.getNativeType(type)); [EOL] } <line_num>: 174,176
private JSType createNullableType(JSType type) { [EOL]     return registry.createNullableType(type); [EOL] } <line_num>: 178,180
private JSType createUnionType(JSTypeNative type1, JSTypeNative type2) { [EOL]     return registry.createUnionType(registry.getNativeType(type1), registry.getNativeType(type2)); [EOL] } <line_num>: 182,185
public void testAssumption() { [EOL]     assuming("x", NUMBER_TYPE); [EOL]     inFunction(""); [EOL]     verify("x", NUMBER_TYPE); [EOL] } <line_num>: 187,191
public void testVar() { [EOL]     inFunction("var x = 1;"); [EOL]     verify("x", NUMBER_TYPE); [EOL] } <line_num>: 193,196
public void testEmptyVar() { [EOL]     inFunction("var x;"); [EOL]     verify("x", VOID_TYPE); [EOL] } <line_num>: 198,201
public void testAssignment() { [EOL]     assuming("x", OBJECT_TYPE); [EOL]     inFunction("x = 1;"); [EOL]     verify("x", NUMBER_TYPE); [EOL] } <line_num>: 203,207
public void testExprWithinCast() { [EOL]     assuming("x", OBJECT_TYPE); [EOL]     inFunction("/** @type {string} */ (x = 1);"); [EOL]     verify("x", NUMBER_TYPE); [EOL] } <line_num>: 209,213
public void testGetProp() { [EOL]     assuming("x", createNullableType(OBJECT_TYPE)); [EOL]     inFunction("x.y();"); [EOL]     verify("x", OBJECT_TYPE); [EOL] } <line_num>: 215,219
public void testGetElemDereference() { [EOL]     assuming("x", createUndefinableType(OBJECT_TYPE)); [EOL]     inFunction("x['z'] = 3;"); [EOL]     verify("x", OBJECT_TYPE); [EOL] } <line_num>: 221,225
public void testIf1() { [EOL]     assuming("x", createNullableType(OBJECT_TYPE)); [EOL]     inFunction("var y = {}; if (x) { y = x; }"); [EOL]     verifySubtypeOf("y", OBJECT_TYPE); [EOL] } <line_num>: 227,231
public void testIf1a() { [EOL]     assuming("x", createNullableType(OBJECT_TYPE)); [EOL]     inFunction("var y = {}; if (x != null) { y = x; }"); [EOL]     verifySubtypeOf("y", OBJECT_TYPE); [EOL] } <line_num>: 233,237
public void testIf2() { [EOL]     assuming("x", createNullableType(OBJECT_TYPE)); [EOL]     inFunction("var y = x; if (x) { y = x; } else { y = {}; }"); [EOL]     verifySubtypeOf("y", OBJECT_TYPE); [EOL] } <line_num>: 239,243
public void testIf3() { [EOL]     assuming("x", createNullableType(OBJECT_TYPE)); [EOL]     inFunction("var y = 1; if (x) { y = x; }"); [EOL]     verify("y", createUnionType(OBJECT_TYPE, NUMBER_TYPE)); [EOL] } <line_num>: 245,249
public void testPropertyInference1() { [EOL]     ObjectType thisType = registry.createAnonymousObjectType(null); [EOL]     thisType.defineDeclaredProperty("foo", createUndefinableType(STRING_TYPE), null); [EOL]     assumingThisType(thisType); [EOL]     inFunction("var y = 1; if (this.foo) { y = this.foo; }"); [EOL]     verify("y", createUnionType(NUMBER_TYPE, STRING_TYPE)); [EOL] } <line_num>: 251,258
public void testPropertyInference2() { [EOL]     ObjectType thisType = registry.createAnonymousObjectType(null); [EOL]     thisType.defineDeclaredProperty("foo", createUndefinableType(STRING_TYPE), null); [EOL]     assumingThisType(thisType); [EOL]     inFunction("var y = 1; this.foo = 'x'; y = this.foo;"); [EOL]     verify("y", STRING_TYPE); [EOL] } <line_num>: 260,267
public void testPropertyInference3() { [EOL]     ObjectType thisType = registry.createAnonymousObjectType(null); [EOL]     thisType.defineDeclaredProperty("foo", createUndefinableType(STRING_TYPE), null); [EOL]     assumingThisType(thisType); [EOL]     inFunction("var y = 1; this.foo = x; y = this.foo;"); [EOL]     verify("y", CHECKED_UNKNOWN_TYPE); [EOL] } <line_num>: 269,276
public void testAssert1() { [EOL]     JSType startType = createNullableType(OBJECT_TYPE); [EOL]     assuming("x", startType); [EOL]     inFunction("out1 = x; goog.asserts.assert(x); out2 = x;"); [EOL]     verify("out1", startType); [EOL]     verify("out2", OBJECT_TYPE); [EOL] } <line_num>: 278,284
public void testAssert1a() { [EOL]     JSType startType = createNullableType(OBJECT_TYPE); [EOL]     assuming("x", startType); [EOL]     inFunction("out1 = x; goog.asserts.assert(x !== null); out2 = x;"); [EOL]     verify("out1", startType); [EOL]     verify("out2", OBJECT_TYPE); [EOL] } <line_num>: 286,292
public void testAssert2() { [EOL]     JSType startType = createNullableType(OBJECT_TYPE); [EOL]     assuming("x", startType); [EOL]     inFunction("goog.asserts.assert(1, x); out1 = x;"); [EOL]     verify("out1", startType); [EOL] } <line_num>: 294,299
public void testAssert3() { [EOL]     JSType startType = createNullableType(OBJECT_TYPE); [EOL]     assuming("x", startType); [EOL]     assuming("y", startType); [EOL]     inFunction("out1 = x; goog.asserts.assert(x && y); out2 = x; out3 = y;"); [EOL]     verify("out1", startType); [EOL]     verify("out2", OBJECT_TYPE); [EOL]     verify("out3", OBJECT_TYPE); [EOL] } <line_num>: 301,309
public void testAssert4() { [EOL]     JSType startType = createNullableType(OBJECT_TYPE); [EOL]     assuming("x", startType); [EOL]     assuming("y", startType); [EOL]     inFunction("out1 = x; goog.asserts.assert(x && !y); out2 = x; out3 = y;"); [EOL]     verify("out1", startType); [EOL]     verify("out2", OBJECT_TYPE); [EOL]     verify("out3", NULL_TYPE); [EOL] } <line_num>: 311,319
public void testAssert5() { [EOL]     JSType startType = createNullableType(OBJECT_TYPE); [EOL]     assuming("x", startType); [EOL]     assuming("y", startType); [EOL]     inFunction("goog.asserts.assert(x || y); out1 = x; out2 = y;"); [EOL]     verify("out1", startType); [EOL]     verify("out2", startType); [EOL] } <line_num>: 321,328
public void testAssert6() { [EOL]     JSType startType = createNullableType(OBJECT_TYPE); [EOL]     assuming("x.y", startType); [EOL]     inFunction("out1 = x.y; goog.asserts.assert(x.y); out2 = x.y;"); [EOL]     verify("out1", startType); [EOL]     verify("out2", OBJECT_TYPE); [EOL] } <line_num>: 330,336
public void testAssert7() { [EOL]     JSType startType = createNullableType(OBJECT_TYPE); [EOL]     assuming("x", startType); [EOL]     inFunction("out1 = x; out2 = goog.asserts.assert(x);"); [EOL]     verify("out1", startType); [EOL]     verify("out2", OBJECT_TYPE); [EOL] } <line_num>: 338,344
public void testAssert8() { [EOL]     JSType startType = createNullableType(OBJECT_TYPE); [EOL]     assuming("x", startType); [EOL]     inFunction("out1 = x; out2 = goog.asserts.assert(x != null);"); [EOL]     verify("out1", startType); [EOL]     verify("out2", BOOLEAN_TYPE); [EOL] } <line_num>: 346,352
public void testAssert9() { [EOL]     JSType startType = createNullableType(NUMBER_TYPE); [EOL]     assuming("x", startType); [EOL]     inFunction("out1 = x; out2 = goog.asserts.assert(y = x);"); [EOL]     verify("out1", startType); [EOL]     verify("out2", NUMBER_TYPE); [EOL] } <line_num>: 354,360
public void testAssert10() { [EOL]     JSType startType = createNullableType(OBJECT_TYPE); [EOL]     assuming("x", startType); [EOL]     assuming("y", startType); [EOL]     inFunction("out1 = x; out2 = goog.asserts.assert(x && y); out3 = x;"); [EOL]     verify("out1", startType); [EOL]     verify("out2", OBJECT_TYPE); [EOL]     verify("out3", OBJECT_TYPE); [EOL] } <line_num>: 362,370
public void testAssertNumber() { [EOL]     JSType startType = createNullableType(ALL_TYPE); [EOL]     assuming("x", startType); [EOL]     inFunction("out1 = x; goog.asserts.assertNumber(x); out2 = x;"); [EOL]     verify("out1", startType); [EOL]     verify("out2", NUMBER_TYPE); [EOL] } <line_num>: 372,378
public void testAssertNumber2() { [EOL]     JSType startType = createNullableType(ALL_TYPE); [EOL]     assuming("x", startType); [EOL]     inFunction("goog.asserts.assertNumber(x + x); out1 = x;"); [EOL]     verify("out1", startType); [EOL] } <line_num>: 380,386
public void testAssertNumber3() { [EOL]     JSType startType = createNullableType(ALL_TYPE); [EOL]     assuming("x", startType); [EOL]     inFunction("out1 = x; out2 = goog.asserts.assertNumber(x + x);"); [EOL]     verify("out1", startType); [EOL]     verify("out2", NUMBER_TYPE); [EOL] } <line_num>: 388,395
public void testAssertString() { [EOL]     JSType startType = createNullableType(ALL_TYPE); [EOL]     assuming("x", startType); [EOL]     inFunction("out1 = x; goog.asserts.assertString(x); out2 = x;"); [EOL]     verify("out1", startType); [EOL]     verify("out2", STRING_TYPE); [EOL] } <line_num>: 397,403
public void testAssertFunction() { [EOL]     JSType startType = createNullableType(ALL_TYPE); [EOL]     assuming("x", startType); [EOL]     inFunction("out1 = x; goog.asserts.assertFunction(x); out2 = x;"); [EOL]     verify("out1", startType); [EOL]     verifySubtypeOf("out2", FUNCTION_INSTANCE_TYPE); [EOL] } <line_num>: 405,411
public void testAssertObject() { [EOL]     JSType startType = createNullableType(ALL_TYPE); [EOL]     assuming("x", startType); [EOL]     inFunction("out1 = x; goog.asserts.assertObject(x); out2 = x;"); [EOL]     verify("out1", startType); [EOL]     verifySubtypeOf("out2", OBJECT_TYPE); [EOL] } <line_num>: 413,419
public void testAssertObject2() { [EOL]     JSType startType = createNullableType(ARRAY_TYPE); [EOL]     assuming("x", startType); [EOL]     inFunction("out1 = x; goog.asserts.assertObject(x); out2 = x;"); [EOL]     verify("out1", startType); [EOL]     verify("out2", ARRAY_TYPE); [EOL] } <line_num>: 421,427
public void testAssertObject3() { [EOL]     JSType startType = createNullableType(OBJECT_TYPE); [EOL]     assuming("x.y", startType); [EOL]     inFunction("out1 = x.y; goog.asserts.assertObject(x.y); out2 = x.y;"); [EOL]     verify("out1", startType); [EOL]     verify("out2", OBJECT_TYPE); [EOL] } <line_num>: 429,435
public void testAssertObject4() { [EOL]     JSType startType = createNullableType(ARRAY_TYPE); [EOL]     assuming("x", startType); [EOL]     inFunction("out1 = x; out2 = goog.asserts.assertObject(x);"); [EOL]     verify("out1", startType); [EOL]     verify("out2", ARRAY_TYPE); [EOL] } <line_num>: 437,443
public void testAssertObject5() { [EOL]     JSType startType = createNullableType(ALL_TYPE); [EOL]     assuming("x", startType); [EOL]     inFunction("out1 = x;" + "out2 = /** @type {!Array} */ (goog.asserts.assertObject(x));"); [EOL]     verify("out1", startType); [EOL]     verify("out2", ARRAY_TYPE); [EOL] } <line_num>: 445,453
public void testAssertArray() { [EOL]     JSType startType = createNullableType(ALL_TYPE); [EOL]     assuming("x", startType); [EOL]     inFunction("out1 = x; goog.asserts.assertArray(x); out2 = x;"); [EOL]     verify("out1", startType); [EOL]     verifySubtypeOf("out2", ARRAY_TYPE); [EOL] } <line_num>: 455,461
public void testAssertInstanceof1() { [EOL]     JSType startType = createNullableType(ALL_TYPE); [EOL]     assuming("x", startType); [EOL]     inFunction("out1 = x; goog.asserts.assertInstanceof(x); out2 = x;"); [EOL]     verify("out1", startType); [EOL]     verify("out2", OBJECT_TYPE); [EOL] } <line_num>: 463,469
public void testAssertInstanceof2() { [EOL]     JSType startType = createNullableType(ALL_TYPE); [EOL]     assuming("x", startType); [EOL]     inFunction("out1 = x; goog.asserts.assertInstanceof(x, String); out2 = x;"); [EOL]     verify("out1", startType); [EOL]     verify("out2", STRING_OBJECT_TYPE); [EOL] } <line_num>: 471,477
public void testAssertInstanceof3() { [EOL]     JSType startType = registry.getNativeType(UNKNOWN_TYPE); [EOL]     assuming("x", startType); [EOL]     inFunction("out1 = x; goog.asserts.assertInstanceof(x, String); out2 = x;"); [EOL]     verify("out1", startType); [EOL]     verify("out2", UNKNOWN_TYPE); [EOL] } <line_num>: 479,485
public void testAssertInstanceof4() { [EOL]     JSType startType = registry.getNativeType(STRING_OBJECT_TYPE); [EOL]     assuming("x", startType); [EOL]     inFunction("out1 = x; goog.asserts.assertInstanceof(x, Object); out2 = x;"); [EOL]     verify("out1", startType); [EOL]     verify("out2", STRING_OBJECT_TYPE); [EOL] } <line_num>: 487,493
public void testAssertInstanceof5() { [EOL]     JSType startType = registry.getNativeType(ALL_TYPE); [EOL]     assuming("x", startType); [EOL]     inFunction("out1 = x; goog.asserts.assertInstanceof(x, String); var r = x;"); [EOL]     verify("out1", startType); [EOL]     verify("x", STRING_OBJECT_TYPE); [EOL] } <line_num>: 495,502
public void testAssertWithIsDefAndNotNull() { [EOL]     JSType startType = createNullableType(NUMBER_TYPE); [EOL]     assuming("x", startType); [EOL]     inFunction("out1 = x;" + "goog.asserts.assert(goog.isDefAndNotNull(x));" + "out2 = x;"); [EOL]     verify("out1", startType); [EOL]     verify("out2", NUMBER_TYPE); [EOL] } <line_num>: 504,513
public void testIsDefAndNoResolvedType() { [EOL]     JSType startType = createUndefinableType(NO_RESOLVED_TYPE); [EOL]     assuming("x", startType); [EOL]     inFunction("out1 = x;" + "if (goog.isDef(x)) { out2a = x; out2b = x.length; out2c = x; }" + "out3 = x;" + "if (goog.isDef(x)) { out4 = x; }"); [EOL]     verify("out1", startType); [EOL]     verify("out2a", NO_RESOLVED_TYPE); [EOL]     verify("out2b", CHECKED_UNKNOWN_TYPE); [EOL]     verify("out2c", NO_RESOLVED_TYPE); [EOL]     verify("out3", startType); [EOL]     verify("out4", NO_RESOLVED_TYPE); [EOL] } <line_num>: 515,529
public void testAssertWithNotIsNull() { [EOL]     JSType startType = createNullableType(NUMBER_TYPE); [EOL]     assuming("x", startType); [EOL]     inFunction("out1 = x;" + "goog.asserts.assert(!goog.isNull(x));" + "out2 = x;"); [EOL]     verify("out1", startType); [EOL]     verify("out2", NUMBER_TYPE); [EOL] } <line_num>: 531,540
public void testReturn1() { [EOL]     assuming("x", createNullableType(OBJECT_TYPE)); [EOL]     inFunction("if (x) { return x; }\nx = {};\nreturn x;"); [EOL]     verify("x", OBJECT_TYPE); [EOL] } <line_num>: 542,546
public void testReturn2() { [EOL]     assuming("x", createNullableType(NUMBER_TYPE)); [EOL]     inFunction("if (!x) { x = 0; }\nreturn x;"); [EOL]     verify("x", NUMBER_TYPE); [EOL] } <line_num>: 548,552
public void testWhile1() { [EOL]     assuming("x", createNullableType(NUMBER_TYPE)); [EOL]     inFunction("while (!x) { if (x == null) { x = 0; } else { x = 1; } }"); [EOL]     verify("x", NUMBER_TYPE); [EOL] } <line_num>: 554,558
public void testWhile2() { [EOL]     assuming("x", createNullableType(NUMBER_TYPE)); [EOL]     inFunction("while (!x) { x = {}; }"); [EOL]     verifySubtypeOf("x", createUnionType(OBJECT_TYPE, NUMBER_TYPE)); [EOL] } <line_num>: 560,564
public void testDo() { [EOL]     assuming("x", createNullableType(OBJECT_TYPE)); [EOL]     inFunction("do { x = 1; } while (!x);"); [EOL]     verify("x", NUMBER_TYPE); [EOL] } <line_num>: 566,570
public void testFor1() { [EOL]     assuming("y", NUMBER_TYPE); [EOL]     inFunction("var x = null; var i = null; for (i=y; !i; i=1) { x = 1; }"); [EOL]     verify("x", createNullableType(NUMBER_TYPE)); [EOL]     verify("i", NUMBER_TYPE); [EOL] } <line_num>: 572,577
public void testFor2() { [EOL]     assuming("y", OBJECT_TYPE); [EOL]     inFunction("var x = null; var i = null; for (i in y) { x = 1; }"); [EOL]     verify("x", createNullableType(NUMBER_TYPE)); [EOL]     verify("i", createNullableType(STRING_TYPE)); [EOL] } <line_num>: 579,584
public void testFor3() { [EOL]     assuming("y", OBJECT_TYPE); [EOL]     inFunction("var x = null; var i = null; for (var i in y) { x = 1; }"); [EOL]     verify("x", createNullableType(NUMBER_TYPE)); [EOL]     verify("i", createNullableType(STRING_TYPE)); [EOL] } <line_num>: 586,591
public void testFor4() { [EOL]     assuming("x", createNullableType(OBJECT_TYPE)); [EOL]     inFunction("var y = {};\n" + "if (x) { for (var i = 0; i < 10; i++) { break; } y = x; }"); [EOL]     verifySubtypeOf("y", OBJECT_TYPE); [EOL] } <line_num>: 593,598
public void testFor5() { [EOL]     assuming("y", parameterize(getNativeObjectType(ARRAY_TYPE), getNativeType(NUMBER_TYPE))); [EOL]     inFunction("var x = null; for (var i = 0; i < y.length; i++) { x = y[i]; }"); [EOL]     verify("x", createNullableType(NUMBER_TYPE)); [EOL]     verify("i", NUMBER_TYPE); [EOL] } <line_num>: 600,607
public void testFor6() { [EOL]     assuming("y", getNativeObjectType(ARRAY_TYPE)); [EOL]     inFunction("var x = null;" + "for (var i = 0; i < y.length; i++) { " + " if (y[i] == 'z') { x = y[i]; } " + "}"); [EOL]     verify("x", getNativeType(UNKNOWN_TYPE)); [EOL]     verify("i", NUMBER_TYPE); [EOL] } <line_num>: 609,618
public void testSwitch1() { [EOL]     assuming("x", NUMBER_TYPE); [EOL]     inFunction("var y = null; switch(x) {\n" + "case 1: y = 1; break;\n" + "case 2: y = {};\n" + "case 3: y = {};\n" + "default: y = 0;}"); [EOL]     verify("y", NUMBER_TYPE); [EOL] } <line_num>: 620,628
public void testSwitch2() { [EOL]     assuming("x", ALL_TYPE); [EOL]     inFunction("var y = null; switch (typeof x) {\n" + "case 'string':\n" + "  y = x;\n" + "  return;" + "default:\n" + "  y = 'a';\n" + "}"); [EOL]     verify("y", STRING_TYPE); [EOL] } <line_num>: 630,640
public void testSwitch3() { [EOL]     assuming("x", createNullableType(createUnionType(NUMBER_TYPE, STRING_TYPE))); [EOL]     inFunction("var y; var z; switch (typeof x) {\n" + "case 'string':\n" + "  y = 1; z = null;\n" + "  return;\n" + "case 'number':\n" + "  y = x; z = null;\n" + "  return;" + "default:\n" + "  y = 1; z = x;\n" + "}"); [EOL]     verify("y", NUMBER_TYPE); [EOL]     verify("z", NULL_TYPE); [EOL] } <line_num>: 642,657
public void testSwitch4() { [EOL]     assuming("x", ALL_TYPE); [EOL]     inFunction("var y = null; switch (typeof x) {\n" + "case 'string':\n" + "case 'number':\n" + "  y = x;\n" + "  return;\n" + "default:\n" + "  y = 1;\n" + "}\n"); [EOL]     verify("y", createUnionType(NUMBER_TYPE, STRING_TYPE)); [EOL] } <line_num>: 659,670
public void testCall1() { [EOL]     assuming("x", createNullableType(registry.createFunctionType(registry.getNativeType(NUMBER_TYPE)))); [EOL]     inFunction("var y = x();"); [EOL]     verify("y", NUMBER_TYPE); [EOL] } <line_num>: 672,678
public void testNew1() { [EOL]     assuming("x", createNullableType(registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE))); [EOL]     inFunction("var y = new x();"); [EOL]     verify("y", UNKNOWN_TYPE); [EOL] } <line_num>: 680,686
public void testInnerFunction1() { [EOL]     inFunction("var x = 1; function f() { x = null; };"); [EOL]     verify("x", NUMBER_TYPE); [EOL] } <line_num>: 688,691
public void testInnerFunction2() { [EOL]     inFunction("var x = 1; var f = function() { x = null; };"); [EOL]     verify("x", NUMBER_TYPE); [EOL] } <line_num>: 693,696
public void testHook() { [EOL]     assuming("x", createNullableType(OBJECT_TYPE)); [EOL]     inFunction("var y = x ? x : {};"); [EOL]     verifySubtypeOf("y", OBJECT_TYPE); [EOL] } <line_num>: 698,702
public void testThrow() { [EOL]     assuming("x", createNullableType(NUMBER_TYPE)); [EOL]     inFunction("var y = 1;\n" + "if (x == null) { throw new Error('x is null') }\n" + "y = x;"); [EOL]     verify("y", NUMBER_TYPE); [EOL] } <line_num>: 704,710
public void testTry1() { [EOL]     assuming("x", NUMBER_TYPE); [EOL]     inFunction("var y = null; try { y = null; } finally { y = x; }"); [EOL]     verify("y", NUMBER_TYPE); [EOL] } <line_num>: 712,716
public void testTry2() { [EOL]     assuming("x", NUMBER_TYPE); [EOL]     inFunction("var y = null;\n" + "try {  } catch (e) { y = null; } finally { y = x; }"); [EOL]     verify("y", NUMBER_TYPE); [EOL] } <line_num>: 718,723
public void testTry3() { [EOL]     assuming("x", NUMBER_TYPE); [EOL]     inFunction("var y = null; try { y = x; } catch (e) { }"); [EOL]     verify("y", NUMBER_TYPE); [EOL] } <line_num>: 725,729
public void testCatch1() { [EOL]     inFunction("var y = null; try { foo(); } catch (e) { y = e; }"); [EOL]     verify("y", UNKNOWN_TYPE); [EOL] } <line_num>: 731,734
public void testCatch2() { [EOL]     inFunction("var y = null; var e = 3; try { foo(); } catch (e) { y = e; }"); [EOL]     verify("y", UNKNOWN_TYPE); [EOL] } <line_num>: 736,739
public void testUnknownType1() { [EOL]     inFunction("var y = 3; y = x;"); [EOL]     verify("y", UNKNOWN_TYPE); [EOL] } <line_num>: 741,744
public void testUnknownType2() { [EOL]     assuming("x", ARRAY_TYPE); [EOL]     inFunction("var y = 5; y = x[0];"); [EOL]     verify("y", UNKNOWN_TYPE); [EOL] } <line_num>: 746,750
public void testInfiniteLoop1() { [EOL]     assuming("x", createNullableType(OBJECT_TYPE)); [EOL]     inFunction("x = {}; while(x != null) { x = {}; }"); [EOL] } <line_num>: 752,755
public void testInfiniteLoop2() { [EOL]     assuming("x", createNullableType(OBJECT_TYPE)); [EOL]     inFunction("x = {}; do { x = null; } while (x == null);"); [EOL] } <line_num>: 757,760
public void testJoin1() { [EOL]     JSType unknownOrNull = createUnionType(NULL_TYPE, UNKNOWN_TYPE); [EOL]     assuming("x", BOOLEAN_TYPE); [EOL]     assuming("unknownOrNull", unknownOrNull); [EOL]     inFunction("var y; if (x) y = unknownOrNull; else y = null;"); [EOL]     verify("y", unknownOrNull); [EOL] } <line_num>: 762,768
public void testJoin2() { [EOL]     JSType unknownOrNull = createUnionType(NULL_TYPE, UNKNOWN_TYPE); [EOL]     assuming("x", BOOLEAN_TYPE); [EOL]     assuming("unknownOrNull", unknownOrNull); [EOL]     inFunction("var y; if (x) y = null; else y = unknownOrNull;"); [EOL]     verify("y", unknownOrNull); [EOL] } <line_num>: 770,776
public void testArrayLit() { [EOL]     assuming("x", createNullableType(OBJECT_TYPE)); [EOL]     inFunction("var y = 3; if (x) { x = [y = x]; }"); [EOL]     verify("x", createUnionType(NULL_TYPE, ARRAY_TYPE)); [EOL]     verify("y", createUnionType(NUMBER_TYPE, OBJECT_TYPE)); [EOL] } <line_num>: 778,783
public void testGetElem() { [EOL]     assuming("x", createNullableType(OBJECT_TYPE)); [EOL]     inFunction("var y = 3; if (x) { x = x[y = x]; }"); [EOL]     verify("x", UNKNOWN_TYPE); [EOL]     verify("y", createUnionType(NUMBER_TYPE, OBJECT_TYPE)); [EOL] } <line_num>: 785,790
public void testEnumRAI1() { [EOL]     JSType enumType = createEnumType("MyEnum", ARRAY_TYPE).getElementsType(); [EOL]     assuming("x", enumType); [EOL]     inFunction("var y = null; if (x) y = x;"); [EOL]     verify("y", createNullableType(enumType)); [EOL] } <line_num>: 792,797
public void testEnumRAI2() { [EOL]     JSType enumType = createEnumType("MyEnum", NUMBER_TYPE).getElementsType(); [EOL]     assuming("x", enumType); [EOL]     inFunction("var y = null; if (typeof x == 'number') y = x;"); [EOL]     verify("y", createNullableType(enumType)); [EOL] } <line_num>: 799,804
public void testEnumRAI3() { [EOL]     JSType enumType = createEnumType("MyEnum", NUMBER_TYPE).getElementsType(); [EOL]     assuming("x", enumType); [EOL]     inFunction("var y = null; if (x && typeof x == 'number') y = x;"); [EOL]     verify("y", createNullableType(enumType)); [EOL] } <line_num>: 806,811
public void testEnumRAI4() { [EOL]     JSType enumType = createEnumType("MyEnum", createUnionType(STRING_TYPE, NUMBER_TYPE)).getElementsType(); [EOL]     assuming("x", enumType); [EOL]     inFunction("var y = null; if (typeof x == 'number') y = x;"); [EOL]     verify("y", createNullableType(NUMBER_TYPE)); [EOL] } <line_num>: 813,819
public void testShortCircuitingAnd() { [EOL]     assuming("x", NUMBER_TYPE); [EOL]     inFunction("var y = null; if (x && (y = 3)) { }"); [EOL]     verify("y", createNullableType(NUMBER_TYPE)); [EOL] } <line_num>: 821,825
public void testShortCircuitingAnd2() { [EOL]     assuming("x", NUMBER_TYPE); [EOL]     inFunction("var y = null; var z = 4; if (x && (y = 3)) { z = y; }"); [EOL]     verify("z", NUMBER_TYPE); [EOL] } <line_num>: 827,831
public void testShortCircuitingOr() { [EOL]     assuming("x", NUMBER_TYPE); [EOL]     inFunction("var y = null; if (x || (y = 3)) { }"); [EOL]     verify("y", createNullableType(NUMBER_TYPE)); [EOL] } <line_num>: 833,837
public void testShortCircuitingOr2() { [EOL]     assuming("x", NUMBER_TYPE); [EOL]     inFunction("var y = null; var z = 4; if (x || (y = 3)) { z = y; }"); [EOL]     verify("z", createNullableType(NUMBER_TYPE)); [EOL] } <line_num>: 839,843
public void testAssignInCondition() { [EOL]     assuming("x", createNullableType(NUMBER_TYPE)); [EOL]     inFunction("var y; if (!(y = x)) { y = 3; }"); [EOL]     verify("y", NUMBER_TYPE); [EOL] } <line_num>: 845,849
public void testInstanceOf1() { [EOL]     assuming("x", OBJECT_TYPE); [EOL]     inFunction("var y = null; if (x instanceof String) y = x;"); [EOL]     verify("y", createNullableType(STRING_OBJECT_TYPE)); [EOL] } <line_num>: 851,855
public void testInstanceOf2() { [EOL]     assuming("x", createNullableType(OBJECT_TYPE)); [EOL]     inFunction("var y = 1; if (x instanceof String) y = x;"); [EOL]     verify("y", createUnionType(STRING_OBJECT_TYPE, NUMBER_TYPE)); [EOL] } <line_num>: 857,861
public void testInstanceOf3() { [EOL]     assuming("x", createUnionType(STRING_OBJECT_TYPE, NUMBER_OBJECT_TYPE)); [EOL]     inFunction("var y = null; if (x instanceof String) y = x;"); [EOL]     verify("y", createNullableType(STRING_OBJECT_TYPE)); [EOL] } <line_num>: 863,867
public void testInstanceOf4() { [EOL]     assuming("x", createUnionType(STRING_OBJECT_TYPE, NUMBER_OBJECT_TYPE)); [EOL]     inFunction("var y = null; if (x instanceof String); else y = x;"); [EOL]     verify("y", createNullableType(NUMBER_OBJECT_TYPE)); [EOL] } <line_num>: 869,873
public void testInstanceOf5() { [EOL]     assuming("x", OBJECT_TYPE); [EOL]     inFunction("var y = null; if (x instanceof String); else y = x;"); [EOL]     verify("y", createNullableType(OBJECT_TYPE)); [EOL] } <line_num>: 875,879
public void testInstanceOf6() { [EOL]     JSType startType = registry.getNativeType(UNKNOWN_TYPE); [EOL]     assuming("x", startType); [EOL]     inFunction("out1 = x; if (x instanceof String) out2 = x;"); [EOL]     verify("out1", startType); [EOL]     verify("out2", STRING_OBJECT_TYPE); [EOL] } <line_num>: 881,894
public void testFlattening() { [EOL]     for (int i = 0; i < LinkedFlowScope.MAX_DEPTH + 1; i++) { [EOL]         assuming("s" + i, ALL_TYPE); [EOL]     } [EOL]     assuming("b", JSTypeNative.BOOLEAN_TYPE); [EOL]     StringBuilder body = new StringBuilder(); [EOL]     body.append("if (b) {"); [EOL]     for (int i = 0; i < LinkedFlowScope.MAX_DEPTH + 1; i++) { [EOL]         body.append("s"); [EOL]         body.append(i); [EOL]         body.append(" = 1;\n"); [EOL]     } [EOL]     body.append(" } else { "); [EOL]     for (int i = 0; i < LinkedFlowScope.MAX_DEPTH + 1; i++) { [EOL]         body.append("s"); [EOL]         body.append(i); [EOL]         body.append(" = 'ONE';\n"); [EOL]     } [EOL]     body.append("}"); [EOL]     JSType numberORString = createUnionType(NUMBER_TYPE, STRING_TYPE); [EOL]     inFunction(body.toString()); [EOL]     for (int i = 0; i < LinkedFlowScope.MAX_DEPTH + 1; i++) { [EOL]         verify("s" + i, numberORString); [EOL]     } [EOL] } <line_num>: 896,921
public void testUnary() { [EOL]     assuming("x", NUMBER_TYPE); [EOL]     inFunction("var y = +x;"); [EOL]     verify("y", NUMBER_TYPE); [EOL]     inFunction("var z = -x;"); [EOL]     verify("z", NUMBER_TYPE); [EOL] } <line_num>: 923,929
public void testAdd1() { [EOL]     assuming("x", NUMBER_TYPE); [EOL]     inFunction("var y = x + 5;"); [EOL]     verify("y", NUMBER_TYPE); [EOL] } <line_num>: 931,935
public void testAdd2() { [EOL]     assuming("x", NUMBER_TYPE); [EOL]     inFunction("var y = x + '5';"); [EOL]     verify("y", STRING_TYPE); [EOL] } <line_num>: 937,941
public void testAdd3() { [EOL]     assuming("x", NUMBER_TYPE); [EOL]     inFunction("var y = '5' + x;"); [EOL]     verify("y", STRING_TYPE); [EOL] } <line_num>: 943,947
public void testAssignAdd() { [EOL]     assuming("x", NUMBER_TYPE); [EOL]     inFunction("x += '5';"); [EOL]     verify("x", STRING_TYPE); [EOL] } <line_num>: 949,953
public void testComparison() { [EOL]     inFunction("var x = 'foo'; var y = (x = 3) < 4;"); [EOL]     verify("x", NUMBER_TYPE); [EOL]     inFunction("var x = 'foo'; var y = (x = 3) > 4;"); [EOL]     verify("x", NUMBER_TYPE); [EOL]     inFunction("var x = 'foo'; var y = (x = 3) <= 4;"); [EOL]     verify("x", NUMBER_TYPE); [EOL]     inFunction("var x = 'foo'; var y = (x = 3) >= 4;"); [EOL]     verify("x", NUMBER_TYPE); [EOL] } <line_num>: 955,964
public void testThrownExpression() { [EOL]     inFunction("var x = 'foo'; " + "try { throw new Error(x = 3); } catch (ex) {}"); [EOL]     verify("x", NUMBER_TYPE); [EOL] } <line_num>: 966,970
public void testObjectLit() { [EOL]     inFunction("var x = {}; var out = x.a;"); [EOL]     verify("out", UNKNOWN_TYPE); [EOL]     inFunction("var x = {a:1}; var out = x.a;"); [EOL]     verify("out", NUMBER_TYPE); [EOL]     inFunction("var x = {a:1}; var out = x.a; x.a = 'string'; var out2 = x.a;"); [EOL]     verify("out", NUMBER_TYPE); [EOL]     verify("out2", STRING_TYPE); [EOL]     inFunction("var x = { get a() {return 1} }; var out = x.a;"); [EOL]     verify("out", UNKNOWN_TYPE); [EOL]     inFunction("var x = {" + "  /** @return {number} */ get a() {return 1}" + "};" + "var out = x.a;"); [EOL]     verify("out", NUMBER_TYPE); [EOL]     inFunction("var x = { set a(b) {} }; var out = x.a;"); [EOL]     verify("out", UNKNOWN_TYPE); [EOL]     inFunction("var x = { " + "/** @param {number} b */ set a(b) {} };" + "var out = x.a;"); [EOL]     verify("out", NUMBER_TYPE); [EOL] } <line_num>: 972,1000
public void testCast1() { [EOL]     inFunction("var x = /** @type {Object} */ (this);"); [EOL]     verify("x", createNullableType(OBJECT_TYPE)); [EOL] } <line_num>: 1002,1005
public void testCast2() { [EOL]     inFunction("/** @return {boolean} */" + "Object.prototype.method = function() { return true; };" + "var x = /** @type {Object} */ (this).method;"); [EOL]     verify("x", registry.createFunctionType(registry.getNativeObjectType(OBJECT_TYPE), registry.getNativeType(BOOLEAN_TYPE), ImmutableList.<JSType>of())); [EOL] } <line_num>: 1007,1018
public void testBackwardsInferenceCall() { [EOL]     inFunction("/** @param {{foo: (number|undefined)}} x */" + "function f(x) {}" + "var y = {};" + "f(y);"); [EOL]     assertEquals("{foo: (number|undefined)}", getType("y").toString()); [EOL] } <line_num>: 1020,1028
public void testBackwardsInferenceNew() { [EOL]     inFunction("/**\n" + " * @constructor\n" + " * @param {{foo: (number|undefined)}} x\n" + " */" + "function F(x) {}" + "var y = {};" + "new F(y);"); [EOL]     assertEquals("{foo: (number|undefined)}", getType("y").toString()); [EOL] } <line_num>: 1030,1041
public void testNoThisInference() { [EOL]     JSType thisType = createNullableType(OBJECT_TYPE); [EOL]     assumingThisType(thisType); [EOL]     inFunction("var out = 3; if (goog.isNull(this)) out = this;"); [EOL]     verify("out", createUnionType(OBJECT_TYPE, NUMBER_TYPE)); [EOL] } <line_num>: 1043,1048
public void testRecordInference() { [EOL]     inFunction("/** @param {{a: (boolean|undefined)}|{b: (string|undefined)}} x */" + "function f(x) {}" + "var out = {};" + "f(out);"); [EOL]     assertEquals("{a: (boolean|undefined), b: (string|undefined)}", getType("out").toString()); [EOL] } <line_num>: 1050,1058
public void testIssue785() { [EOL]     inFunction("/** @param {string|{prop: (string|undefined)}} x */" + "function f(x) {}" + "var out = {};" + "f(out);"); [EOL]     assertEquals("{prop: (string|undefined)}", getType("out").toString()); [EOL] } <line_num>: 1060,1066
public void testAssertTypeofProp() { [EOL]     assuming("x", createNullableType(OBJECT_TYPE)); [EOL]     inFunction("goog.asserts.assert(typeof x.prop != 'undefined');" + "out = x.prop;"); [EOL]     verify("out", CHECKED_UNKNOWN_TYPE); [EOL] } <line_num>: 1068,1074
private ObjectType getNativeObjectType(JSTypeNative t) { [EOL]     return registry.getNativeObjectType(t); [EOL] } <line_num>: 1076,1078
private JSType getNativeType(JSTypeNative t) { [EOL]     return registry.getNativeType(t); [EOL] } <line_num>: 1080,1082
private JSType parameterize(ObjectType objType, JSType t) { [EOL]     return registry.createParameterizedType(objType, t); [EOL] } <line_num>: 1084,1086
