private PeepholeSubstituteAlternateSyntaxTest(boolean compareAsTree) { [EOL]     super(FOLD_CONSTANTS_TEST_EXTERNS, compareAsTree); [EOL] } <line_num>: 37,39
public PeepholeSubstituteAlternateSyntaxTest() { [EOL]     super(FOLD_CONSTANTS_TEST_EXTERNS); [EOL] } <line_num>: 41,43
StringCompareTestCase() { [EOL]     super("", false); [EOL] } <line_num>: 1041,1043
@Override [EOL] public void setUp() throws Exception { [EOL]     late = true; [EOL]     super.setUp(); [EOL]     enableLineNumberCheck(true); [EOL]     disableNormalize(); [EOL] } <line_num>: 45,51
@Override [EOL] public CompilerPass getProcessor(final Compiler compiler) { [EOL]     CompilerPass peepholePass = new PeepholeOptimizationsPass(compiler, new PeepholeSubstituteAlternateSyntax(late)).setRetraverseOnChange(false); [EOL]     return peepholePass; [EOL] } <line_num>: 53,61
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 63,66
private void foldSame(String js) { [EOL]     testSame(js); [EOL] } <line_num>: 68,70
private void fold(String js, String expected) { [EOL]     test(js, expected); [EOL] } <line_num>: 72,74
void assertResultString(String js, String expected) { [EOL]     assertResultString(js, expected, false); [EOL] } <line_num>: 76,78
void assertResultString(String js, String expected, boolean normalize) { [EOL]     PeepholeSubstituteAlternateSyntaxTest scTest = new PeepholeSubstituteAlternateSyntaxTest(false); [EOL]     if (normalize) { [EOL]         scTest.enableNormalize(); [EOL]     } else { [EOL]         scTest.disableNormalize(); [EOL]     } [EOL]     scTest.test(js, expected); [EOL] } <line_num>: 82,93
public void testFoldOneChildBlocks() { [EOL]     late = false; [EOL]     fold("function f(){if(x)a();x=3}", "function f(){x&&a();x=3}"); [EOL]     fold("function f(){if(x){a()}x=3}", "function f(){x&&a();x=3}"); [EOL]     fold("function f(){if(x){return 3}}", "function f(){if(x)return 3}"); [EOL]     fold("function f(){if(x){a()}}", "function f(){x&&a()}"); [EOL]     fold("function f(){if(x){throw 1}}", "function f(){if(x)throw 1;}"); [EOL]     fold("function f(){if(x){foo()}}", "function f(){x&&foo()}"); [EOL]     fold("function f(){if(x){foo()}else{bar()}}", "function f(){x?foo():bar()}"); [EOL]     fold("function f(){if(x){a.b=1}}", "function f(){if(x)a.b=1}"); [EOL]     fold("function f(){if(x){a.b*=1}}", "function f(){x&&(a.b*=1)}"); [EOL]     fold("function f(){if(x){a.b+=1}}", "function f(){x&&(a.b+=1)}"); [EOL]     fold("function f(){if(x){++a.b}}", "function f(){x&&++a.b}"); [EOL]     fold("function f(){if(x){a.foo()}}", "function f(){x&&a.foo()}"); [EOL]     fold("function f(){try{foo()}catch(e){bar(e)}finally{baz()}}", "function f(){try{foo()}catch(e){bar(e)}finally{baz()}}"); [EOL]     fold("function f(){switch(x){case 1:break}}", "function f(){switch(x){case 1:break}}"); [EOL]     fold("function f(){if(e1){do foo();while(e2)}else foo2()}", "function f(){if(e1){do foo();while(e2)}else foo2()}"); [EOL]     fold("if(x){do{foo()}while(y)}else bar()", "if(x){do foo();while(y)}else bar()"); [EOL]     fold("function f(){if(x){if(y)foo()}}", "function f(){x&&y&&foo()}"); [EOL]     fold("function f(){if(x){if(y)foo();else bar()}}", "function f(){x&&(y?foo():bar())}"); [EOL]     fold("function f(){if(x){if(y)foo()}else bar()}", "function f(){x?y&&foo():bar()}"); [EOL]     fold("function f(){if(x){if(y)foo();else bar()}else{baz()}}", "function f(){x?y?foo():bar():baz()}"); [EOL]     fold("if(e1){while(e2){if(e3){foo()}}}else{bar()}", "if(e1)while(e2)e3&&foo();else bar()"); [EOL]     fold("if(e1){with(e2){if(e3){foo()}}}else{bar()}", "if(e1)with(e2)e3&&foo();else bar()"); [EOL]     fold("if(a||b){if(c||d){var x;}}", "if(a||b)if(c||d)var x"); [EOL]     fold("if(x){ if(y){var x;}else{var z;} }", "if(x)if(y)var x;else var z"); [EOL]     fold("if(x){ if(y){var x;}else{var z;} }else{var w}", "if(x)if(y)var x;else var z;else var w"); [EOL]     fold("if (x) {var x;}else { if (y) { var y;} }", "if(x)var x;else if(y)var y"); [EOL]     fold("if(a){if(b){f1();f2();}else if(c){f3();}}else {if(d){f4();}}", "if(a)if(b){f1();f2()}else c&&f3();else d&&f4()"); [EOL]     fold("function f(){foo()}", "function f(){foo()}"); [EOL]     fold("switch(x){case y: foo()}", "switch(x){case y:foo()}"); [EOL]     fold("try{foo()}catch(ex){bar()}finally{baz()}", "try{foo()}catch(ex){bar()}finally{baz()}"); [EOL] } <line_num>: 96,171
public void testFoldReturns() { [EOL]     fold("function f(){if(x)return 1;else return 2}", "function f(){return x?1:2}"); [EOL]     fold("function f(){if(x)return 1;return 2}", "function f(){return x?1:2}"); [EOL]     fold("function f(){if(x)return;return 2}", "function f(){return x?void 0:2}"); [EOL]     fold("function f(){if(x)return 1+x;else return 2-x}", "function f(){return x?1+x:2-x}"); [EOL]     fold("function f(){if(x)return 1+x;return 2-x}", "function f(){return x?1+x:2-x}"); [EOL]     fold("function f(){if(x)return y += 1;else return y += 2}", "function f(){return x?(y+=1):(y+=2)}"); [EOL]     fold("function f(){if(x)return;else return 2-x}", "function f(){if(x);else return 2-x}"); [EOL]     fold("function f(){if(x)return;return 2-x}", "function f(){return x?void 0:2-x}"); [EOL]     fold("function f(){if(x)return x;else return}", "function f(){if(x)return x;{}}"); [EOL]     fold("function f(){if(x)return x;return}", "function f(){if(x)return x}"); [EOL]     foldSame("function f(){for(var x in y) { return x.y; } return k}"); [EOL] } <line_num>: 174,198
public void testCombineIfs1() { [EOL]     fold("function f() {if (x) return 1; if (y) return 1}", "function f() {if (x||y) return 1;}"); [EOL]     fold("function f() {if (x) return 1; if (y) foo(); else return 1}", "function f() {if ((!x)&&y) foo(); else return 1;}"); [EOL] } <line_num>: 200,205
public void testCombineIfs2() { [EOL]     foldSame("function f() {if (x) throw 1; if (y) throw 1}"); [EOL]     fold("function f(){ if (x) g(); if (y) g() }", "function f(){ x&&g(); y&&g() }"); [EOL]     fold("function f(){ if (x) y = 0; if (y) y = 0; }", "function f(){ x&&(y = 0); y&&(y = 0); }"); [EOL] } <line_num>: 207,216
public void testCombineIfs3() { [EOL]     foldSame("function f() {if (x) return 1; if (y) {g();f()}}"); [EOL] } <line_num>: 218,220
public void testFoldAssignments() { [EOL]     fold("function f(){if(x)y=3;else y=4;}", "function f(){y=x?3:4}"); [EOL]     fold("function f(){if(x)y=1+a;else y=2+a;}", "function f(){y=x?1+a:2+a}"); [EOL]     fold("function f(){if(x)y+=1;else y+=2;}", "function f(){y+=x?1:2}"); [EOL]     fold("function f(){if(x)y-=1;else y-=2;}", "function f(){y-=x?1:2}"); [EOL]     fold("function f(){if(x)y%=1;else y%=2;}", "function f(){y%=x?1:2}"); [EOL]     fold("function f(){if(x)y|=1;else y|=2;}", "function f(){y|=x?1:2}"); [EOL]     foldSame("function f(){x ? y-=1 : y+=2}"); [EOL]     foldSame("function f(){x ? y-=1 : z-=1}"); [EOL]     foldSame("function f(){x ? y().a=3 : y().a=4}"); [EOL] } <line_num>: 224,242
public void testRemoveDuplicateStatements() { [EOL]     fold("if (a) { x = 1; x++ } else { x = 2; x++ }", "x=(a) ? 1 : 2; x++"); [EOL]     fold("if (a) { x = 1; x++; y += 1; z = pi; }" + " else  { x = 2; x++; y += 1; z = pi; }", "x=(a) ? 1 : 2; x++; y += 1; z = pi;"); [EOL]     fold("function z() {" + "if (a) { foo(); return !0 } else { goo(); return !0 }" + "}", "function z() {(a) ? foo() : goo(); return !0}"); [EOL]     fold("function z() {if (a) { foo(); x = true; return true " + "} else { goo(); x = true; return true }}", "function z() {(a) ? foo() : goo(); x = !0; return !0}"); [EOL]     fold("function z() {" + "  if (a) { bar(); foo(); return true }" + "    else { bar(); goo(); return true }" + "}", "function z() {" + "  if (a) { bar(); foo(); }" + "    else { bar(); goo(); }" + "  return !0;" + "}"); [EOL] } <line_num>: 244,267
public void testNotCond() { [EOL]     fold("function f(){if(!x)foo()}", "function f(){x||foo()}"); [EOL]     fold("function f(){if(!x)b=1}", "function f(){x||(b=1)}"); [EOL]     fold("if(!x)z=1;else if(y)z=2", "if(x){y&&(z=2);}else{z=1;}"); [EOL]     fold("if(x)y&&(z=2);else z=1;", "x ? y&&(z=2) : z=1"); [EOL]     foldSame("function f(){if(!(x=1))a.b=1}"); [EOL] } <line_num>: 269,275
public void testAndParenthesesCount() { [EOL]     fold("function f(){if(x||y)a.foo()}", "function f(){(x||y)&&a.foo()}"); [EOL]     fold("function f(){if(x.a)x.a=0}", "function f(){x.a&&(x.a=0)}"); [EOL]     foldSame("function f(){if(x()||y()){x()||y()}}"); [EOL] } <line_num>: 277,282
public void testFoldLogicalOpStringCompare() { [EOL]     assertResultString("if(foo() && false) z()", "foo()&&0&&z()"); [EOL] } <line_num>: 284,288
public void testFoldNot() { [EOL]     fold("while(!(x==y)){a=b;}", "while(x!=y){a=b;}"); [EOL]     fold("while(!(x!=y)){a=b;}", "while(x==y){a=b;}"); [EOL]     fold("while(!(x===y)){a=b;}", "while(x!==y){a=b;}"); [EOL]     fold("while(!(x!==y)){a=b;}", "while(x===y){a=b;}"); [EOL]     foldSame("while(!(x>y)){a=b;}"); [EOL]     foldSame("while(!(x>=y)){a=b;}"); [EOL]     foldSame("while(!(x<y)){a=b;}"); [EOL]     foldSame("while(!(x<=y)){a=b;}"); [EOL]     foldSame("while(!(x<=NaN)){a=b;}"); [EOL]     fold("x = !(y() && true)", "x = !y()"); [EOL]     fold("x = !true", "x = !1"); [EOL] } <line_num>: 290,306
public void testFoldRegExpConstructor() { [EOL]     enableNormalize(); [EOL]     fold("x = new RegExp", "x = RegExp()"); [EOL]     fold("x = new RegExp(\"\")", "x = RegExp(\"\")"); [EOL]     fold("x = new RegExp(\"\", \"i\")", "x = RegExp(\"\",\"i\")"); [EOL]     testSame("x = RegExp(\"foobar\", \"bogus\")", PeepholeSubstituteAlternateSyntax.INVALID_REGULAR_EXPRESSION_FLAGS); [EOL]     fold("x = new RegExp(\"foobar\")", "x = /foobar/"); [EOL]     fold("x = RegExp(\"foobar\")", "x = /foobar/"); [EOL]     fold("x = new RegExp(\"foobar\", \"i\")", "x = /foobar/i"); [EOL]     fold("x = new RegExp(\"\\\\.\", \"i\")", "x = /\\./i"); [EOL]     fold("x = new RegExp(\"/\", \"\")", "x = /\\//"); [EOL]     fold("x = new RegExp(\"[/]\", \"\")", "x = /[/]/"); [EOL]     fold("x = new RegExp(\"///\", \"\")", "x = /\\/\\/\\//"); [EOL]     fold("x = new RegExp(\"\\\\\\/\", \"\")", "x = /\\//"); [EOL]     fold("x = new RegExp(\"\\n\")", "x = /\\n/"); [EOL]     fold("x = new RegExp('\\\\\\r')", "x = /\\r/"); [EOL]     String longRegexp = ""; [EOL]     for (int i = 0; i < 200; i++) longRegexp += "x"; [EOL]     foldSame("x = RegExp(\"" + longRegexp + "\")"); [EOL]     disableNormalize(); [EOL]     foldSame("x = new RegExp(\"foobar\")"); [EOL] } <line_num>: 308,343
public void testVersionSpecificRegExpQuirks() { [EOL]     enableNormalize(); [EOL]     enableEcmaScript5(false); [EOL]     fold("x = new RegExp(\"foobar\", \"g\")", "x = RegExp(\"foobar\",\"g\")"); [EOL]     fold("x = new RegExp(\"foobar\", \"ig\")", "x = RegExp(\"foobar\",\"ig\")"); [EOL]     enableEcmaScript5(true); [EOL]     fold("x = new RegExp(\"foobar\", \"ig\")", "x = /foobar/ig"); [EOL]     enableEcmaScript5(false); [EOL]     fold("x = new RegExp(\"\\u2028\")", "x = RegExp(\"\\u2028\")"); [EOL]     fold("x = new RegExp(\"\\\\\\\\u2028\")", "x = /\\\\u2028/"); [EOL]     enableEcmaScript5(true); [EOL]     fold("x = new RegExp(\"\\u2028\\u2029\")", "x = /\\u2028\\u2029/"); [EOL]     fold("x = new RegExp(\"\\\\u2028\")", "x = /\\u2028/"); [EOL]     fold("x = new RegExp(\"\\\\\\\\u2028\")", "x = /\\\\u2028/"); [EOL] } <line_num>: 345,368
public void testFoldRegExpConstructorStringCompare() { [EOL]     assertResultString("x=new RegExp(\"\\n\", \"i\")", "x=/\\n/i", true); [EOL] } <line_num>: 370,374
public void testContainsUnicodeEscape() throws Exception { [EOL]     assertTrue(!PeepholeSubstituteAlternateSyntax.containsUnicodeEscape("")); [EOL]     assertTrue(!PeepholeSubstituteAlternateSyntax.containsUnicodeEscape("foo")); [EOL]     assertTrue(PeepholeSubstituteAlternateSyntax.containsUnicodeEscape("\u2028")); [EOL]     assertTrue(PeepholeSubstituteAlternateSyntax.containsUnicodeEscape("\\u2028")); [EOL]     assertTrue(PeepholeSubstituteAlternateSyntax.containsUnicodeEscape("foo\\u2028")); [EOL]     assertTrue(!PeepholeSubstituteAlternateSyntax.containsUnicodeEscape("foo\\\\u2028")); [EOL]     assertTrue(PeepholeSubstituteAlternateSyntax.containsUnicodeEscape("foo\\\\u2028bar\\u2028")); [EOL] } <line_num>: 376,389
public void testFoldLiteralObjectConstructors() { [EOL]     enableNormalize(); [EOL]     fold("x = new Object", "x = ({})"); [EOL]     fold("x = new Object()", "x = ({})"); [EOL]     fold("x = Object()", "x = ({})"); [EOL]     disableNormalize(); [EOL]     foldSame("x = new Object"); [EOL]     foldSame("x = new Object()"); [EOL]     foldSame("x = Object()"); [EOL]     enableNormalize(); [EOL]     foldSame("x = " + "(function f(){function Object(){this.x=4};return new Object();})();"); [EOL] } <line_num>: 391,410
public void testFoldLiteralArrayConstructors() { [EOL]     enableNormalize(); [EOL]     fold("x = new Array", "x = []"); [EOL]     fold("x = new Array()", "x = []"); [EOL]     fold("x = Array()", "x = []"); [EOL]     fold("x = new Array(0)", "x = []"); [EOL]     fold("x = Array(0)", "x = []"); [EOL]     fold("x = new Array(\"a\")", "x = [\"a\"]"); [EOL]     fold("x = Array(\"a\")", "x = [\"a\"]"); [EOL]     fold("x = new Array(7)", "x = Array(7)"); [EOL]     fold("x = Array(7)", "x = Array(7)"); [EOL]     fold("x = new Array(y)", "x = Array(y)"); [EOL]     fold("x = Array(y)", "x = Array(y)"); [EOL]     fold("x = new Array(foo())", "x = Array(foo())"); [EOL]     fold("x = Array(foo())", "x = Array(foo())"); [EOL]     fold("x = new Array(1, 2, 3, 4)", "x = [1, 2, 3, 4]"); [EOL]     fold("x = Array(1, 2, 3, 4)", "x = [1, 2, 3, 4]"); [EOL]     fold("x = new Array('a', 1, 2, 'bc', 3, {}, 'abc')", "x = ['a', 1, 2, 'bc', 3, {}, 'abc']"); [EOL]     fold("x = Array('a', 1, 2, 'bc', 3, {}, 'abc')", "x = ['a', 1, 2, 'bc', 3, {}, 'abc']"); [EOL]     fold("x = new Array(Array(1, '2', 3, '4'))", "x = [[1, '2', 3, '4']]"); [EOL]     fold("x = Array(Array(1, '2', 3, '4'))", "x = [[1, '2', 3, '4']]"); [EOL]     fold("x = new Array(Object(), Array(\"abc\", Object(), Array(Array())))", "x = [{}, [\"abc\", {}, [[]]]]"); [EOL]     fold("x = new Array(Object(), Array(\"abc\", Object(), Array(Array())))", "x = [{}, [\"abc\", {}, [[]]]]"); [EOL]     disableNormalize(); [EOL]     foldSame("x = new Array"); [EOL]     foldSame("x = new Array()"); [EOL]     foldSame("x = Array()"); [EOL]     foldSame("x = new Array(0)"); [EOL]     foldSame("x = Array(0)"); [EOL]     foldSame("x = new Array(\"a\")"); [EOL]     foldSame("x = Array(\"a\")"); [EOL]     foldSame("x = new Array(7)"); [EOL]     foldSame("x = Array(7)"); [EOL]     foldSame("x = new Array(foo())"); [EOL]     foldSame("x = Array(foo())"); [EOL]     foldSame("x = new Array(1, 2, 3, 4)"); [EOL]     foldSame("x = Array(1, 2, 3, 4)"); [EOL]     foldSame("x = new Array('a', 1, 2, 'bc', 3, {}, 'abc')"); [EOL]     foldSame("x = Array('a', 1, 2, 'bc', 3, {}, 'abc')"); [EOL]     foldSame("x = new Array(Array(1, '2', 3, '4'))"); [EOL]     foldSame("x = Array(Array(1, '2', 3, '4'))"); [EOL]     foldSame("x = new Array(" + "Object(), Array(\"abc\", Object(), Array(Array())))"); [EOL]     foldSame("x = new Array(" + "Object(), Array(\"abc\", Object(), Array(Array())))"); [EOL] } <line_num>: 412,473
public void testMinimizeExprCondition() { [EOL]     fold("(x ? true : false) && y()", "x&&y()"); [EOL]     fold("(x ? false : true) && y()", "(!x)&&y()"); [EOL]     fold("(x ? true : y) && y()", "(x || y)&&y()"); [EOL]     fold("(x ? y : false) && y()", "(x && y)&&y()"); [EOL]     fold("(x && true) && y()", "x && y()"); [EOL]     fold("(x && false) && y()", "0&&y()"); [EOL]     fold("(x || true) && y()", "1&&y()"); [EOL]     fold("(x || false) && y()", "x&&y()"); [EOL] } <line_num>: 475,484
public void testMinimizeWhileCondition() { [EOL]     fold("while(!!true) foo()", "while(1) foo()"); [EOL]     fold("while(!!x) foo()", "while(x) foo()"); [EOL]     fold("while(!(!x&&!y)) foo()", "while(x||y) foo()"); [EOL]     fold("while(x||!!y) foo()", "while(x||y) foo()"); [EOL]     fold("while(!(!!x&&y)) foo()", "while(!x||!y) foo()"); [EOL]     fold("while(!(!x&&y)) foo()", "while(x||!y) foo()"); [EOL]     fold("while(!(x||!y)) foo()", "while(!x&&y) foo()"); [EOL]     fold("while(!(x||y)) foo()", "while(!x&&!y) foo()"); [EOL]     fold("while(!(!x||y-z)) foo()", "while(x&&!(y-z)) foo()"); [EOL]     fold("while(!(!(x/y)||z+w)) foo()", "while(x/y&&!(z+w)) foo()"); [EOL]     foldSame("while(!(x+y||z)) foo()"); [EOL]     foldSame("while(!(x&&y*z)) foo()"); [EOL]     fold("while(!(!!x&&y)) foo()", "while(!x||!y) foo()"); [EOL]     fold("while(x&&!0) foo()", "while(x) foo()"); [EOL]     fold("while(x||!1) foo()", "while(x) foo()"); [EOL]     fold("while(!((x,y)&&z)) foo()", "while(!(x,y)||!z) foo()"); [EOL] } <line_num>: 486,505
public void testMinimizeForCondition() { [EOL]     fold("for(;!!true;) foo()", "for(;1;) foo()"); [EOL]     fold("for(!!true;;) foo()", "for(!0;;) foo()"); [EOL]     fold("for(;!!x;) foo()", "for(;x;) foo()"); [EOL]     foldSame("for(a in b) foo()"); [EOL]     foldSame("for(a in {}) foo()"); [EOL]     foldSame("for(a in []) foo()"); [EOL]     fold("for(a in !!true) foo()", "for(a in !0) foo()"); [EOL] } <line_num>: 507,522
public void testMinimizeCondition_example1() { [EOL]     fold("if(!!(f() > 20)) {foo();foo()}", "if(f() > 20){foo();foo()}"); [EOL] } <line_num>: 524,527
public void testFoldLoopBreakLate() { [EOL]     late = true; [EOL]     fold("for(;;) if (a) break", "for(;!a;);"); [EOL]     foldSame("for(;;) if (a) { f(); break }"); [EOL]     fold("for(;;) if (a) break; else f()", "for(;!a;) { { f(); } }"); [EOL]     fold("for(;a;) if (b) break", "for(;a && !b;);"); [EOL]     fold("for(;a;) { if (b) break; if (c) break; }", "for(;(a && !b);) if (c) break;"); [EOL]     fold("for(;(a && !b);) if (c) break;", "for(;(a && !b) && !c;);"); [EOL]     enableNormalize(true); [EOL]     fold("while(true) if (a) break", "for(;1&&!a;);"); [EOL] } <line_num>: 529,542
public void testFoldLoopBreakEarly() { [EOL]     late = false; [EOL]     foldSame("for(;;) if (a) break"); [EOL]     foldSame("for(;;) if (a) { f(); break }"); [EOL]     foldSame("for(;;) if (a) break; else f()"); [EOL]     foldSame("for(;a;) if (b) break"); [EOL]     foldSame("for(;a;) { if (b) break; if (c) break; }"); [EOL]     foldSame("while(1) if (a) break"); [EOL]     enableNormalize(true); [EOL]     foldSame("while(1) if (a) break"); [EOL] } <line_num>: 544,555
public void testFoldConditionalVarDeclaration() { [EOL]     fold("if(x) var y=1;else y=2", "var y=x?1:2"); [EOL]     fold("if(x) y=1;else var y=2", "var y=x?1:2"); [EOL]     foldSame("if(x) var y = 1; z = 2"); [EOL]     foldSame("if(x||y) y = 1; var z = 2"); [EOL]     foldSame("if(x) { var y = 1; print(y)} else y = 2 "); [EOL]     foldSame("if(x) var y = 1; else {y = 2; print(y)}"); [EOL] } <line_num>: 557,566
public void testFoldReturnResult() { [EOL]     fold("function f(){return false;}", "function f(){return !1}"); [EOL]     foldSame("function f(){return null;}"); [EOL]     fold("function f(){return void 0;}", "function f(){return}"); [EOL]     fold("function f(){return;}", "function f(){}"); [EOL]     foldSame("function f(){return void foo();}"); [EOL]     fold("function f(){return undefined;}", "function f(){return}"); [EOL]     fold("function f(){if(a()){return undefined;}}", "function f(){if(a()){return}}"); [EOL] } <line_num>: 568,580
public void testFoldStandardConstructors() { [EOL]     foldSame("new Foo('a')"); [EOL]     foldSame("var x = new goog.Foo(1)"); [EOL]     foldSame("var x = new String(1)"); [EOL]     foldSame("var x = new Number(1)"); [EOL]     foldSame("var x = new Boolean(1)"); [EOL]     enableNormalize(); [EOL]     fold("var x = new Object('a')", "var x = Object('a')"); [EOL]     fold("var x = new RegExp('')", "var x = RegExp('')"); [EOL]     fold("var x = new Error('20')", "var x = Error(\"20\")"); [EOL]     fold("var x = new Array(20)", "var x = Array(20)"); [EOL] } <line_num>: 582,595
public void testSubsituteReturn() { [EOL]     fold("function f() { while(x) { return }}", "function f() { while(x) { break }}"); [EOL]     foldSame("function f() { while(x) { return 5 } }"); [EOL]     foldSame("function f() { a: { return 5 } }"); [EOL]     fold("function f() { while(x) { return 5}  return 5}", "function f() { while(x) { break }    return 5}"); [EOL]     fold("function f() { while(x) { return x}  return x}", "function f() { while(x) { break }    return x}"); [EOL]     fold("function f() { while(x) { if (y) { return }}}", "function f() { while(x) { if (y) { break  }}}"); [EOL]     fold("function f() { while(x) { if (y) { return }} return}", "function f() { while(x) { if (y) { break  }}}"); [EOL]     fold("function f() { while(x) { if (y) { return 5 }} return 5}", "function f() { while(x) { if (y) { break    }} return 5}"); [EOL]     fold("function f() { while(x) { if (y) { return x } x = 1} return x}", "function f() { while(x) { if (y) { break    } x = 1} return x}"); [EOL]     fold("function f() { while(x) { if (y) { return x } return x} return x}", "function f() { while(x) { if (y) {} break }return x}"); [EOL]     foldSame("function f() { while(x) { while (y) { return } } }"); [EOL]     foldSame("function f() { while(1) { return 7}  return 5}"); [EOL]     foldSame("function f() {" + "  try { while(x) {return f()}} catch (e) { } return f()}"); [EOL]     foldSame("function f() {" + "  try { while(x) {return f()}} finally {alert(1)} return f()}"); [EOL]     fold("function f() {" + "  try { while(x) { return f() } return f() } catch (e) { } }", "function f() {" + "  try { while(x) { break } return f() } catch (e) { } }"); [EOL]     foldSame("function f() {" + "  try { while(x) { return foo() } } finally { alert(1) } " + "  return foo()}"); [EOL]     fold("function f() {" + "  try { while(x) { return 1 } } finally { alert(1) } return 1}", "function f() {" + "  try { while(x) { break    } } finally { alert(1) } return 1}"); [EOL]     foldSame("function f() { try{ return a } finally { a = 2 } return a; }"); [EOL]     fold("function f() { switch(a){ case 1: return a; default: g();} return a;}", "function f() { switch(a){ case 1: break; default: g();} return a; }"); [EOL] } <line_num>: 597,666
public void testSubsituteBreakForThrow() { [EOL]     foldSame("function f() { while(x) { throw Error }}"); [EOL]     fold("function f() { while(x) { throw Error } throw Error }", "function f() { while(x) { break } throw Error}"); [EOL]     foldSame("function f() { while(x) { throw Error(1) } throw Error(2)}"); [EOL]     foldSame("function f() { while(x) { throw Error(1) } return Error(2)}"); [EOL]     foldSame("function f() { while(x) { throw 5 } }"); [EOL]     foldSame("function f() { a: { throw 5 } }"); [EOL]     fold("function f() { while(x) { throw 5}  throw 5}", "function f() { while(x) { break }   throw 5}"); [EOL]     fold("function f() { while(x) { throw x}  throw x}", "function f() { while(x) { break }   throw x}"); [EOL]     foldSame("function f() { while(x) { if (y) { throw Error }}}"); [EOL]     fold("function f() { while(x) { if (y) { throw Error }} throw Error}", "function f() { while(x) { if (y) { break }} throw Error}"); [EOL]     fold("function f() { while(x) { if (y) { throw 5 }} throw 5}", "function f() { while(x) { if (y) { break    }} throw 5}"); [EOL]     fold("function f() { while(x) { if (y) { throw x } x = 1} throw x}", "function f() { while(x) { if (y) { break    } x = 1} throw x}"); [EOL]     fold("function f() { while(x) { if (y) { throw x } throw x} throw x}", "function f() { while(x) { if (y) {} break }throw x}"); [EOL]     foldSame("function f() { while(x) { while (y) { throw Error } } }"); [EOL]     foldSame("function f() { while(1) { throw 7}  throw 5}"); [EOL]     foldSame("function f() {" + "  try { while(x) {throw f()}} catch (e) { } throw f()}"); [EOL]     foldSame("function f() {" + "  try { while(x) {throw f()}} finally {alert(1)} throw f()}"); [EOL]     fold("function f() {" + "  try { while(x) { throw f() } throw f() } catch (e) { } }", "function f() {" + "  try { while(x) { break } throw f() } catch (e) { } }"); [EOL]     foldSame("function f() {" + "  try { while(x) { throw foo() } } finally { alert(1) } " + "  throw foo()}"); [EOL]     fold("function f() {" + "  try { while(x) { throw 1 } } finally { alert(1) } throw 1}", "function f() {" + "  try { while(x) { break    } } finally { alert(1) } throw 1}"); [EOL]     foldSame("function f() { try{ throw a } finally { a = 2 } throw a; }"); [EOL]     fold("function f() { switch(a){ case 1: throw a; default: g();} throw a;}", "function f() { switch(a){ case 1: break; default: g();} throw a; }"); [EOL] } <line_num>: 668,740
public void testRemoveDuplicateReturn() { [EOL]     fold("function f() { return; }", "function f(){}"); [EOL]     foldSame("function f() { return a; }"); [EOL]     fold("function f() { if (x) { return a } return a; }", "function f() { if (x) {} return a; }"); [EOL]     foldSame("function f() { try { if (x) { return a } } catch(e) {} return a; }"); [EOL]     foldSame("function f() { try { if (x) {} } catch(e) {} return 1; }"); [EOL]     foldSame("function f() { try { if (x) { return a } } finally { a++ } return a; }"); [EOL]     fold("function f() { try { if (x) { return 1 } } finally {} return 1; }", "function f() { try { if (x) {} } finally {} return 1; }"); [EOL]     fold("function f() { switch(a){ case 1: return a; } return a; }", "function f() { switch(a){ case 1: } return a; }"); [EOL]     fold("function f() { switch(a){ " + "  case 1: return a; case 2: return a; } return a; }", "function f() { switch(a){ " + "  case 1: break; case 2: } return a; }"); [EOL] } <line_num>: 743,769
public void testRemoveDuplicateThrow() { [EOL]     foldSame("function f() { throw a; }"); [EOL]     fold("function f() { if (x) { throw a } throw a; }", "function f() { if (x) {} throw a; }"); [EOL]     foldSame("function f() { try { if (x) {throw a} } catch(e) {} throw a; }"); [EOL]     foldSame("function f() { try { if (x) {throw 1} } catch(e) {f()} throw 1; }"); [EOL]     foldSame("function f() { try { if (x) {throw 1} } catch(e) {f()} throw 1; }"); [EOL]     foldSame("function f() { try { if (x) {throw 1} } catch(e) {throw 1}}"); [EOL]     fold("function f() { try { if (x) {throw 1} } catch(e) {throw 1} throw 1; }", "function f() { try { if (x) {throw 1} } catch(e) {} throw 1; }"); [EOL]     foldSame("function f() { try { if (x) { throw a } } finally { a++ } throw a; }"); [EOL]     fold("function f() { try { if (x) { throw 1 } } finally {} throw 1; }", "function f() { try { if (x) {} } finally {} throw 1; }"); [EOL]     fold("function f() { switch(a){ case 1: throw a; } throw a; }", "function f() { switch(a){ case 1: } throw a; }"); [EOL]     fold("function f() { switch(a){ " + "case 1: throw a; case 2: throw a; } throw a; }", "function f() { switch(a){ case 1: break; case 2: } throw a; }"); [EOL] } <line_num>: 771,801
public void testNestedIfCombine() { [EOL]     fold("if(x)if(y){while(1){}}", "if(x&&y){while(1){}}"); [EOL]     fold("if(x||z)if(y){while(1){}}", "if((x||z)&&y){while(1){}}"); [EOL]     fold("if(x)if(y||z){while(1){}}", "if((x)&&(y||z)){while(1){}}"); [EOL]     foldSame("if(x||z)if(y||z){while(1){}}"); [EOL]     fold("if(x)if(y){if(z){while(1){}}}", "if(x&&y&&z){while(1){}}"); [EOL] } <line_num>: 803,809
public void testFoldTrueFalse() { [EOL]     fold("x = true", "x = !0"); [EOL]     fold("x = false", "x = !1"); [EOL] } <line_num>: 811,814
public void testIssue291() { [EOL]     fold("if (true) { f.onchange(); }", "if (1) f.onchange();"); [EOL]     foldSame("if (f) { f.onchange(); }"); [EOL]     foldSame("if (f) { f.bar(); } else { f.onchange(); }"); [EOL]     fold("if (f) { f.bonchange(); }", "f && f.bonchange();"); [EOL]     foldSame("if (f) { f['x'](); }"); [EOL] } <line_num>: 816,822
public void testUndefined() { [EOL]     foldSame("var x = undefined"); [EOL]     foldSame("function f(f) {var undefined=2;var x = undefined;}"); [EOL]     this.enableNormalize(); [EOL]     fold("var x = undefined", "var x=void 0"); [EOL]     foldSame("var undefined = 1;" + "function f() {var undefined=2;var x = undefined;}"); [EOL]     foldSame("function f(undefined) {}"); [EOL]     foldSame("try {} catch(undefined) {}"); [EOL]     foldSame("for (undefined in {}) {}"); [EOL]     foldSame("undefined++;"); [EOL]     fold("undefined += undefined;", "undefined += void 0;"); [EOL] } <line_num>: 823,836
public void testSplitCommaExpressions() { [EOL]     late = false; [EOL]     foldSame("while (foo(), !0) boo()"); [EOL]     foldSame("var a = (foo(), !0);"); [EOL]     foldSame("a = (foo(), !0);"); [EOL]     foldSame("a:a(),b()"); [EOL]     fold("(x=2), foo()", "x=2; foo()"); [EOL]     fold("foo(), boo();", "foo(); boo()"); [EOL]     fold("(a(), b()), (c(), d());", "a(); b(); (c(), d());"); [EOL]     fold("a(); b(); (c(), d());", "a(); b(); c(); d();"); [EOL]     fold("foo(), true", "foo();true"); [EOL]     fold("foo();true", "foo();1"); [EOL]     fold("function x(){foo(), !0}", "function x(){foo(); !0}"); [EOL]     fold("function x(){foo(); !0}", "function x(){foo(); 1}"); [EOL] } <line_num>: 838,856
public void testComma1() { [EOL]     late = false; [EOL]     fold("1, 2", "1; 2"); [EOL]     fold("1; 2", "1; 1"); [EOL]     late = true; [EOL]     foldSame("1, 2"); [EOL] } <line_num>: 858,864
public void testComma2() { [EOL]     late = false; [EOL]     test("1, a()", "1; a()"); [EOL]     late = true; [EOL]     foldSame("1, a()"); [EOL] } <line_num>: 866,871
public void testComma3() { [EOL]     late = false; [EOL]     test("1, a(), b()", "1; a(); b()"); [EOL]     late = true; [EOL]     foldSame("1, a(), b()"); [EOL] } <line_num>: 873,878
public void testComma4() { [EOL]     late = false; [EOL]     test("a(), b()", "a();b()"); [EOL]     late = true; [EOL]     foldSame("a(), b()"); [EOL] } <line_num>: 880,885
public void testComma5() { [EOL]     late = false; [EOL]     test("a(), b(), 1", "a();b();1"); [EOL]     late = true; [EOL]     foldSame("a(), b(), 1"); [EOL] } <line_num>: 887,892
public void testObjectLiteral() { [EOL]     test("({})", "1"); [EOL]     test("({a:1})", "1"); [EOL]     testSame("({a:foo()})"); [EOL]     testSame("({'a':foo()})"); [EOL] } <line_num>: 894,899
public void testArrayLiteral() { [EOL]     test("([])", "1"); [EOL]     test("([1])", "1"); [EOL]     test("([a])", "1"); [EOL]     testSame("([foo()])"); [EOL] } <line_num>: 901,906
public void testStringArraySplitting() { [EOL]     testSame("var x=['1','2','3','4']"); [EOL]     testSame("var x=['1','2','3','4','5']"); [EOL]     test("var x=['1','2','3','4','5','6']", "var x='123456'.split('')"); [EOL]     test("var x=['1','2','3','4','5','00']", "var x='1 2 3 4 5 00'.split(' ')"); [EOL]     test("var x=['1','2','3','4','5','6','7']", "var x='1234567'.split('')"); [EOL]     test("var x=['1','2','3','4','5','6','00']", "var x='1 2 3 4 5 6 00'.split(' ')"); [EOL]     test("var x=[' ,',',',',',',',',',',']", "var x=' ,;,;,;,;,;,'.split(';')"); [EOL]     test("var x=[',,',' ',',',',',',',',']", "var x=',,; ;,;,;,;,'.split(';')"); [EOL]     test("var x=['a,',' ',',',',',',',',']", "var x='a,; ;,;,;,;,'.split(';')"); [EOL]     testSame("var x=[',', ' ', ';', '{', '}']"); [EOL] } <line_num>: 908,928
public void testRemoveElseCause() { [EOL]     test("function f() {" + " if(x) return 1;" + " else if(x) return 2;" + " else if(x) return 3 }", "function f() {" + " if(x) return 1;" + "{ if(x) return 2;" + "{ if(x) return 3 } } }"); [EOL] } <line_num>: 930,939
public void testRemoveElseCause1() { [EOL]     test("function f() { if (x) throw 1; else f() }", "function f() { if (x) throw 1; { f() } }"); [EOL] } <line_num>: 942,945
public void testRemoveElseCause2() { [EOL]     test("function f() { if (x) return 1; else f() }", "function f() { if (x) return 1; { f() } }"); [EOL]     test("function f() { if (x) return; else f() }", "function f() { if (x) {} else { f() } }"); [EOL]     testSame("function f() { if (x) return; f() }"); [EOL] } <line_num>: 947,954
public void testRemoveElseCause3() { [EOL]     testSame("function f() { a:{if (x) break a; else f() } }"); [EOL]     testSame("function f() { if (x) { a:{ break a } } else f() }"); [EOL]     testSame("function f() { if (x) a:{ break a } else f() }"); [EOL] } <line_num>: 956,960
public void testRemoveElseCause4() { [EOL]     testSame("function f() { if (x) { if (y) { return 1; } } else f() }"); [EOL] } <line_num>: 962,964
public void testBindToCall1() { [EOL]     test("(goog.bind(f))()", "f()"); [EOL]     test("(goog.bind(f,a))()", "f.call(a)"); [EOL]     test("(goog.bind(f,a,b))()", "f.call(a,b)"); [EOL]     test("(goog.bind(f))(a)", "f(a)"); [EOL]     test("(goog.bind(f,a))(b)", "f.call(a,b)"); [EOL]     test("(goog.bind(f,a,b))(c)", "f.call(a,b,c)"); [EOL]     test("(goog.partial(f))()", "f()"); [EOL]     test("(goog.partial(f,a))()", "f(a)"); [EOL]     test("(goog.partial(f,a,b))()", "f(a,b)"); [EOL]     test("(goog.partial(f))(a)", "f(a)"); [EOL]     test("(goog.partial(f,a))(b)", "f(a,b)"); [EOL]     test("(goog.partial(f,a,b))(c)", "f(a,b,c)"); [EOL]     test("((function(){}).bind())()", "((function(){}))()"); [EOL]     test("((function(){}).bind(a))()", "((function(){})).call(a)"); [EOL]     test("((function(){}).bind(a,b))()", "((function(){})).call(a,b)"); [EOL]     test("((function(){}).bind())(a)", "((function(){}))(a)"); [EOL]     test("((function(){}).bind(a))(b)", "((function(){})).call(a,b)"); [EOL]     test("((function(){}).bind(a,b))(c)", "((function(){})).call(a,b,c)"); [EOL]     testSame("(f.bind())()"); [EOL]     testSame("(f.bind(a))()"); [EOL]     testSame("(f.bind())(a)"); [EOL]     testSame("(f.bind(a))(b)"); [EOL]     testSame("(goog.bind(f)).call(g)"); [EOL] } <line_num>: 966,999
public void testBindToCall2() { [EOL]     test("(goog$bind(f))()", "f()"); [EOL]     test("(goog$bind(f,a))()", "f.call(a)"); [EOL]     test("(goog$bind(f,a,b))()", "f.call(a,b)"); [EOL]     test("(goog$bind(f))(a)", "f(a)"); [EOL]     test("(goog$bind(f,a))(b)", "f.call(a,b)"); [EOL]     test("(goog$bind(f,a,b))(c)", "f.call(a,b,c)"); [EOL]     test("(goog$partial(f))()", "f()"); [EOL]     test("(goog$partial(f,a))()", "f(a)"); [EOL]     test("(goog$partial(f,a,b))()", "f(a,b)"); [EOL]     test("(goog$partial(f))(a)", "f(a)"); [EOL]     test("(goog$partial(f,a))(b)", "f(a,b)"); [EOL]     test("(goog$partial(f,a,b))(c)", "f(a,b,c)"); [EOL]     testSame("(goog$bind(f)).call(g)"); [EOL] } <line_num>: 1001,1020
public void testBindToCall3() { [EOL]     new StringCompareTestCase().testBindToCall3(); [EOL] } <line_num>: 1022,1030
public void testSimpleFunctionCall() { [EOL]     test("var a = String(23)", "var a = '' + 23"); [EOL]     test("var a = String('hello')", "var a = '' + 'hello'"); [EOL]     testSame("var a = String('hello', bar());"); [EOL]     testSame("var a = String({valueOf: function() { return 1; }});"); [EOL] } <line_num>: 1032,1037
@Override [EOL] protected CompilerPass getProcessor(Compiler compiler) { [EOL]     CompilerPass peepholePass = new PeepholeOptimizationsPass(compiler, new PeepholeSubstituteAlternateSyntax(false)); [EOL]     return peepholePass; [EOL] } <line_num>: 1045,1051
public void testBindToCall3() { [EOL]     test("(goog.bind(f.m))()", "(0,f.m)()"); [EOL]     test("(goog.bind(f.m,a))()", "f.m.call(a)"); [EOL]     test("(goog.bind(f.m))(a)", "(0,f.m)(a)"); [EOL]     test("(goog.bind(f.m,a))(b)", "f.m.call(a,b)"); [EOL]     test("(goog.partial(f.m))()", "(0,f.m)()"); [EOL]     test("(goog.partial(f.m,a))()", "(0,f.m)(a)"); [EOL]     test("(goog.partial(f.m))(a)", "(0,f.m)(a)"); [EOL]     test("(goog.partial(f.m,a))(b)", "(0,f.m)(a,b)"); [EOL]     testSame("f.m.bind()()"); [EOL]     testSame("f.m.bind(a)()"); [EOL]     testSame("f.m.bind()(a)"); [EOL]     testSame("f.m.bind(a)(b)"); [EOL]     testSame("goog.bind(f.m).call(g)"); [EOL] } <line_num>: 1053,1074
