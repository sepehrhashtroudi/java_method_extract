@Override [EOL] public CompilerPass getProcessor(Compiler compiler) { [EOL]     return new OptimizeParameters(compiler); [EOL] } <line_num>: 25,28
@Override [EOL] public void setUp() { [EOL]     super.enableNormalize(); [EOL]     super.enableLineNumberCheck(false); [EOL] } <line_num>: 30,34
public void testNoRemoval() { [EOL]     testSame("function foo(p1) { } foo(1); foo(2)"); [EOL]     testSame("function foo(p1) { } foo(1,2); foo(3,4)"); [EOL] } <line_num>: 36,39
public void testSimpleRemoval() { [EOL]     test("function foo(p1) { } foo(); foo()", "function foo() {var p1;} foo(); foo()"); [EOL]     test("function foo(p1) { } foo(1); foo(1)", "function foo() {var p1 = 1;} foo(); foo()"); [EOL]     test("function foo(p1) { } foo(1,2); foo(1,4)", "function foo() {var p1 = 1;} foo(2); foo(4)"); [EOL] } <line_num>: 41,48
public void testNotAFunction() { [EOL]     testSame("var x = 1; x; x = 2"); [EOL] } <line_num>: 50,52
public void testRemoveOneOptionalNamedFunction() { [EOL]     test("function foo(p1) { } foo()", "function foo() {var p1} foo()"); [EOL] } <line_num>: 54,56
public void testDifferentScopes() { [EOL]     test("function f(a, b) {} f(1, 2); f(1, 3); " + "function h() {function g(a) {} g(4); g(5);} f(1, 2);", "function f(b) {var a = 1} f(2); f(3); " + "function h() {function g(a) {} g(4); g(5);} f(2);"); [EOL] } <line_num>: 58,63
public void testOptimizeOnlyImmutableValues() { [EOL]     test("function foo(a) {}; foo(undefined);", "function foo() {var a = undefined}; foo()"); [EOL]     test("function foo(a) {}; foo(null);", "function foo() {var a = null}; foo()"); [EOL]     test("function foo(a) {}; foo(1);", "function foo() {var a = 1}; foo()"); [EOL]     test("function foo(a) {}; foo('abc');", "function foo() {var a = 'abc'}; foo()"); [EOL]     test("var foo = function(a) {}; foo(undefined);", "var foo = function() {var a = undefined}; foo()"); [EOL]     test("var foo = function(a) {}; foo(null);", "var foo = function() {var a = null}; foo()"); [EOL]     test("var foo = function(a) {}; foo(1);", "var foo = function() {var a = 1}; foo()"); [EOL]     test("var foo = function(a) {}; foo('abc');", "var foo = function() {var a = 'abc'}; foo()"); [EOL] } <line_num>: 65,83
public void testRemoveOneOptionalVarAssignment() { [EOL]     test("var foo = function (p1) { }; foo()", "var foo = function () {var p1}; foo()"); [EOL] } <line_num>: 85,88
public void testDoOptimizeCall() { [EOL]     testSame("var foo = function () {}; foo(); foo.call();"); [EOL]     testSame("var foo = function () {}; foo(); foo.call(this);"); [EOL]     testSame("var foo = function (a, b) {}; foo(1); foo.call(this, 1);"); [EOL]     testSame("var foo = function () {}; foo(); foo.call(null);"); [EOL]     testSame("var foo = function (a, b) {}; foo(1); foo.call(null, 1);"); [EOL]     testSame("var foo = function () {}; foo.call();"); [EOL]     testSame("var foo = function () {}; foo.call(this);"); [EOL]     testSame("var foo = function (a, b) {}; foo.call(this, 1);"); [EOL]     testSame("var foo = function () {}; foo.call(null);"); [EOL]     testSame("var foo = function (a, b) {}; foo.call(null, 1);"); [EOL] } <line_num>: 90,104
public void testDoOptimizeApply() { [EOL]     testSame("var foo = function () {}; foo(); foo.apply();"); [EOL]     testSame("var foo = function () {}; foo(); foo.apply(this);"); [EOL]     testSame("var foo = function (a, b) {}; foo(1); foo.apply(this, 1);"); [EOL]     testSame("var foo = function () {}; foo(); foo.apply(null);"); [EOL]     testSame("var foo = function (a, b) {}; foo(1); foo.apply(null, []);"); [EOL]     testSame("var foo = function () {}; foo.apply();"); [EOL]     testSame("var foo = function () {}; foo.apply(this);"); [EOL]     testSame("var foo = function (a, b) {}; foo.apply(this, 1);"); [EOL]     testSame("var foo = function () {}; foo.apply(null);"); [EOL]     testSame("var foo = function (a, b) {}; foo.apply(null, []);"); [EOL] } <line_num>: 106,118
public void testRemoveOneOptionalExpressionAssign() { [EOL]     testSame("var foo; foo = function (p1) { }; foo()"); [EOL] } <line_num>: 120,124
public void testRemoveOneOptionalOneRequired() { [EOL]     test("function foo(p1, p2) { } foo(1); foo(2)", "function foo(p1) {var p2} foo(1); foo(2)"); [EOL] } <line_num>: 126,129
public void testRemoveOneOptionalMultipleCalls() { [EOL]     test("function foo(p1, p2) { } foo(1); foo(2); foo()", "function foo(p1) {var p2} foo(1); foo(2); foo()"); [EOL] } <line_num>: 131,134
public void testRemoveOneOptionalMultiplePossibleDefinition() { [EOL]     String src = "var goog = {};" + "goog.foo = function (p1, p2) { };" + "goog.foo = function (q1, q2) { };" + "goog.foo = function (r1, r2) { };" + "goog.foo(1); goog.foo(2); goog.foo()"; [EOL]     String expected = "var goog = {};" + "goog.foo = function (p1) { var p2 };" + "goog.foo = function (q1) { var q2 };" + "goog.foo = function (r1) { var r2 };" + "goog.foo(1); goog.foo(2); goog.foo()"; [EOL]     testSame(src); [EOL] } <line_num>: 136,150
public void testRemoveTwoOptionalMultiplePossibleDefinition() { [EOL]     String src = "var goog = {};" + "goog.foo = function (p1, p2, p3, p4) { };" + "goog.foo = function (q1, q2, q3, q4) { };" + "goog.foo = function (r1, r2, r3, r4) { };" + "goog.foo(1,0); goog.foo(2,1); goog.foo()"; [EOL]     String expected = "var goog = {};" + "goog.foo = function(p1, p2) { var p4; var p3};" + "goog.foo = function(q1, q2) { var q4; var q3};" + "goog.foo = function(r1, r2) { var r4; var r3};" + "goog.foo(1,0); goog.foo(2,1); goog.foo()"; [EOL]     testSame(src); [EOL] } <line_num>: 152,166
public void testConstructorOptArgsNotRemoved() { [EOL]     String src = "/** @constructor */" + "var goog = function(){};" + "goog.prototype.foo = function(a,b) {};" + "goog.prototype.bar = function(a) {};" + "goog.bar.inherits(goog.foo);" + "new goog.foo(2,3);" + "new goog.foo(1,2);"; [EOL]     testSame(src); [EOL] } <line_num>: 168,178
public void testMultipleUnknown() { [EOL]     String src = "var goog1 = {};" + "goog1.foo = function () { };" + "var goog2 = {};" + "goog2.foo = function (p1) { };" + "var x = getGoog();" + "x.foo()"; [EOL]     String expected = "var goog1 = {};" + "goog1.foo = function () { };" + "var goog2 = {};" + "goog2.foo = function () { var p1 };" + "var x = getGoog();" + "x.foo()"; [EOL]     testSame(src); [EOL] } <line_num>: 180,196
public void testSingleUnknown() { [EOL]     String src = "var goog2 = {};" + "goog2.foo = function (p1) { };" + "var x = getGoog();" + "x.foo()"; [EOL]     String expected = "var goog2 = {};" + "goog2.foo = function () { var p1 };" + "var x = getGoog();" + "x.foo()"; [EOL]     test(src, expected); [EOL] } <line_num>: 198,211
public void testRemoveVarArg() { [EOL]     test("function foo(p1, var_args) { } foo(1); foo(2)", "function foo(p1) { var var_args } foo(1); foo(2)"); [EOL] } <line_num>: 213,216
public void testAliasMethodsDontGetOptimize() { [EOL]     String src = "var foo = function(a, b) {};" + "var goog = {};" + "goog.foo = foo;" + "goog.prototype.bar = goog.foo;" + "new goog().bar(1,2);" + "foo(2);"; [EOL]     testSame(src); [EOL] } <line_num>: 218,227
public void testAliasMethodsDontGetOptimize2() { [EOL]     String src = "var foo = function(a, b) {};" + "var bar = foo;" + "foo(1);" + "bar(2,3);"; [EOL]     testSame(src); [EOL] } <line_num>: 229,236
public void testAliasMethodsDontGetOptimize3() { [EOL]     String src = "var array = {};" + "array[0] = function(a, b) {};" + "var foo = array[0];" + "foo(1);"; [EOL]     testSame(src); [EOL] } <line_num>: 238,245
public void testAliasMethodsDontGetOptimize4() { [EOL]     test("function foo(bar) {};" + "baz = function(a) {};" + "baz(1);" + "foo(baz);", "function foo() {var bar = baz};" + "baz = function(a) {};" + "baz(1);" + "foo();"); [EOL] } <line_num>: 247,259
public void testMethodsDefinedInArraysDontGetOptimized() { [EOL]     String src = "var array = [true, function (a) {}];" + "array[1](1)"; [EOL]     testSame(src); [EOL] } <line_num>: 261,266
public void testMethodsDefinedInObjectDontGetOptimized() { [EOL]     String src = "var object = { foo: function bar() {} };" + "object.foo(1)"; [EOL]     testSame(src); [EOL]     src = "var object = { foo: function bar() {} };" + "object['foo'](1)"; [EOL]     testSame(src); [EOL] } <line_num>: 268,277
public void testRemoveConstantArgument() { [EOL]     test("function foo(p1, p2) {}; foo(1,2); foo(2,2);", "function foo(p1) {var p2 = 2}; foo(1); foo(2)"); [EOL]     testSame("function foo(p1, p2) {}; foo(1); foo(2,3);"); [EOL]     test("function foo(a,b,c){}; foo(1, 2, 3); foo(1, 2, 4); foo(2, 2, 3)", "function foo(a,c){var b=2}; foo(1, 3); foo(1, 4); foo(2, 3)"); [EOL]     test("function foo(a) {}; foo(1); foo(1.0);", "function foo() {var a = 1;}; foo(); foo();"); [EOL]     String src = "/** @constructor */" + "function Person(){}; Person.prototype.run = function(a, b) {};" + "Person.run(1, 'a'); Person.run(2, 'a')"; [EOL]     String expected = "function Person(){}; Person.prototype.run = " + "function(a) {var b = 'a'};" + "Person.run(1); Person.run(2)"; [EOL]     test(src, expected); [EOL] } <line_num>: 279,306
public void testCanDeleteArgumentsAtAnyPosition() { [EOL]     String src = "function foo(a,b,c,d,e) {};" + "foo(1,2,3,4,5);" + "foo(2,2,4,4,5);"; [EOL]     String expected = "function foo(a,c) {var b=2; var d=4; var e=5;};" + "foo(1,3);" + "foo(2,4);"; [EOL]     test(src, expected); [EOL] } <line_num>: 308,319
public void testNoOptimizationForExternsFunctions() { [EOL]     testSame("function _foo(x, y, z){}; _foo(1);"); [EOL] } <line_num>: 321,323
public void testNoOptimizationForGoogExportSymbol() { [EOL]     testSame("goog.exportSymbol('foo', foo);" + "function foo(x, y, z){}; foo(1);"); [EOL] } <line_num>: 325,328
public void testNoArgumentRemovalNonEqualNodes() { [EOL]     testSame("function foo(a){}; foo('bar'); foo('baz');"); [EOL]     testSame("function foo(a){}; foo(1.0); foo(2.0);"); [EOL]     testSame("function foo(a){}; foo(true); foo(false);"); [EOL]     testSame("var a = 1, b = 2; function foo(a){}; foo(a); foo(b);"); [EOL]     testSame("function foo(a){}; foo(/&/g); foo(/</g);"); [EOL] } <line_num>: 330,336
public void testFunctionPassedAsParam() { [EOL]     String src = "/** @constructor */ function person(){}; " + "person.prototype.run = function(a, b) {};" + "person.prototype.walk = function() {};" + "person.prototype.foo = function() { this.run(this.walk, 0.1)};" + "person.foo();"; [EOL]     String expected = "function person(){}; person.prototype.run = function(a) {" + "  var b = 0.1;};" + "person.prototype.walk = function() {};" + "person.prototype.foo = function() { this.run(this.walk)};" + "person.foo();"; [EOL]     test(src, expected); [EOL] } <line_num>: 338,353
public void testCallIsIgnore() { [EOL]     testSame("var goog;" + "goog.foo = function(a, opt) {};" + "var bar = function(){goog.foo.call(this, 1)};" + "goog.foo(1);"); [EOL] } <line_num>: 355,360
public void testApplyIsIgnore() { [EOL]     testSame("var goog;" + "goog.foo = function(a, opt) {};" + "var bar = function(){goog.foo.apply(this, 1)};" + "goog.foo(1);"); [EOL] } <line_num>: 362,367
public void testFunctionWithReferenceToArgumentsShouldNotBeOptimize() { [EOL]     testSame("function foo(a,b,c) { return arguments.size; };" + "foo(1);"); [EOL]     testSame("var foo = function(a,b,c) { return arguments.size }; foo(1);"); [EOL]     testSame("var foo = function bar(a,b,c) { return arguments.size }; " + "foo(2); bar(2);"); [EOL] } <line_num>: 369,375
public void testFunctionWithTwoNames() { [EOL]     testSame("var foo = function bar(a,b) {};"); [EOL]     testSame("var foo = function bar(a,b) {}; foo(1)"); [EOL]     testSame("var foo = function bar(a,b) {}; bar(1);"); [EOL]     testSame("var foo = function bar(a,b) {}; foo(1); foo(2)"); [EOL]     testSame("var foo = function bar(a,b) {}; foo(1); bar(1)"); [EOL]     testSame("var foo = function bar(a,b) {}; foo(1); bar(2)"); [EOL]     testSame("var foo = function bar(a,b) {}; foo(1,2); bar(2,1)"); [EOL] } <line_num>: 377,385
public void testRecursion() { [EOL]     test("var foo = function (a,b) {foo(1, b)}; foo(1, 2)", "var foo = function (b) {var a=1; foo(b)}; foo(2)"); [EOL] } <line_num>: 387,390
public void testConstantArgumentsToConstructorCanBeOptimized() { [EOL]     String src = "function foo(a) {};" + "var bar = new foo(1);"; [EOL]     String expected = "function foo() {var a=1;};" + "var bar = new foo();"; [EOL]     test(src, expected); [EOL] } <line_num>: 392,398
public void testOptionalArgumentsToConstructorCanBeOptimized() { [EOL]     String src = "function foo(a) {};" + "var bar = new foo();"; [EOL]     String expected = "function foo() {var a;};" + "var bar = new foo();"; [EOL]     test(src, expected); [EOL] } <line_num>: 400,406
public void testRegexesCanBeInlined() { [EOL]     test("function foo(a) {}; foo(/abc/);", "function foo() {var a = /abc/}; foo();"); [EOL] } <line_num>: 408,411
public void testConstructorUsedAsFunctionCanBeOptimized() { [EOL]     String src = "function foo(a) {};" + "var bar = new foo(1);" + "foo(1);"; [EOL]     String expected = "function foo() {var a=1;};" + "var bar = new foo();" + "foo();"; [EOL]     test(src, expected); [EOL] } <line_num>: 413,421
public void testDoNotOptimizeConstructorWhenArgumentsAreNotEqual() { [EOL]     testSame("function Foo(a) {};" + "var bar = new Foo(1);" + "var baz = new Foo(2);"); [EOL] } <line_num>: 423,427
public void testDoNotOptimizeArrayElements() { [EOL]     testSame("var array = [function (a, b) {}];"); [EOL]     testSame("var array = [function f(a, b) {}]"); [EOL]     testSame("var array = [function (a, b) {}];" + "array[0](1, 2);" + "array[0](1);"); [EOL]     testSame("var array = [];" + "function foo(a, b) {};" + "array[0] = foo;"); [EOL] } <line_num>: 429,440
public void testOptimizeThis() { [EOL]     String src = "function foo() {" + "var bar = function (a, b) {};" + "this.bar = function (a, b) {};" + "this.bar(3);" + "bar(2);}"; [EOL]     String expected = "function foo() {" + "var bar = function () {var b; var a = 2;};" + "this.bar = function () {var b; var a = 3;};" + "this.bar();" + "bar();}"; [EOL]     test(src, expected); [EOL] } <line_num>: 442,454
public void testDoNotOptimizeWhenArgumentsPassedAsParameter() { [EOL]     testSame("function foo(a) {}; foo(arguments)"); [EOL]     testSame("function foo(a) {}; foo(arguments[0])"); [EOL]     test("function foo(a, b) {}; foo(arguments, 1)", "function foo(a) {var b = 1}; foo(arguments)"); [EOL]     test("function foo(a, b) {}; foo(arguments)", "function foo(a) {var b}; foo(arguments)"); [EOL] } <line_num>: 456,465
public void testDoNotOptimizeGoogExportFunctions() { [EOL]     testSame("function foo(a, b) {}; foo(); goog.export_function(foo);"); [EOL] } <line_num>: 467,469
public void testDoNotOptimizeJSCompiler_renameProperty() { [EOL]     testSame("function JSCompiler_renameProperty(a) {return a};" + "JSCompiler_renameProperty('a');"); [EOL] } <line_num>: 471,474
public void testDoNotOptimizeJSCompiler_ObjectPropertyString() { [EOL]     testSame("function JSCompiler_ObjectPropertyString(a, b) {return a[b]};" + "JSCompiler_renameProperty(window,'b');"); [EOL] } <line_num>: 476,479
public void testMutableValues1() { [EOL]     test("function foo(p1) {} foo()", "function foo() {var p1} foo()"); [EOL]     test("function foo(p1) {} foo(1)", "function foo() {var p1=1} foo()"); [EOL]     test("function foo(p1) {} foo([])", "function foo() {var p1=[]} foo()"); [EOL]     test("function foo(p1) {} foo({})", "function foo() {var p1={}} foo()"); [EOL]     test("var x;function foo(p1) {} foo(x)", "var x;function foo() {var p1=x} foo()"); [EOL]     test("var x;function foo(p1) {} foo(x())", "var x;function foo() {var p1=x()} foo()"); [EOL]     test("var x;function foo(p1) {} foo(new x())", "var x;function foo() {var p1=new x()} foo()"); [EOL]     test("var x;function foo(p1) {} foo('' + x)", "var x;function foo() {var p1='' + x} foo()"); [EOL]     testSame("function foo(p1) {} foo(this)"); [EOL]     testSame("function foo(p1) {} foo(arguments)"); [EOL]     testSame("function foo(p1) {} foo(function(){})"); [EOL]     testSame("function foo(p1) {} (function () {var x;foo(x)})()"); [EOL] } <line_num>: 481,503
public void testMutableValues2() { [EOL]     test("function foo(p1, p2) {} foo(1, 2)", "function foo() {var p1=1; var p2 = 2} foo()"); [EOL]     test("var x; var y; function foo(p1, p2) {} foo(x(), y())", "var x; var y; function foo() {var p1=x(); var p2 = y()} foo()"); [EOL] } <line_num>: 505,510
public void testMutableValues3() { [EOL]     test("var x; var y; var z;" + "function foo(p1, p2) {}" + "foo(x(), y()); foo(x(),y())", "var x; var y; var z;" + "function foo() {var p1=x(); var p2=y()}" + "foo(); foo()"); [EOL] } <line_num>: 512,520
public void testMutableValues4() { [EOL]     testSame("var x; var y; var z;" + "function foo(p1, p2, p3) {}" + "foo(x(), y(), z()); foo(x(),y(),3)"); [EOL]     testSame("var x; var y; var z;" + "function foo(p1, p2, p3) {}" + "foo(x, y(), z()); foo(x,y(),3)"); [EOL]     test("var x; var y; var z;" + "function foo(p1, p2, p3) {}" + "foo([], y(), z()); foo([],y(),3)", "var x; var y; var z;" + "function foo(p2, p3) {var p1=[]}" + "foo(y(), z()); foo(y(),3)"); [EOL] } <line_num>: 522,547
public void testMutableValues5() { [EOL]     test("var x; var y; var z;" + "function foo(p1, p2) {}" + "new foo(new x(), y()); new foo(new x(),y())", "var x; var y; var z;" + "function foo() {var p1=new x(); var p2=y()}" + "new foo(); new foo()"); [EOL]     test("var x; var y; var z;" + "function foo(p1, p2) {}" + "new foo(x(), y()); new foo(x(),y())", "var x; var y; var z;" + "function foo() {var p1=x(); var p2=y()}" + "new foo(); new foo()"); [EOL]     testSame("var x; var y; var z;" + "function foo(p1, p2, p3) {}" + "new foo(x(), y(), z()); new foo(x(),y(),3)"); [EOL]     testSame("var x; var y; var z;" + "function foo(p1, p2, p3) {}" + "new foo(x, y(), z()); new foo(x,y(),3)"); [EOL]     test("var x; var y; var z;" + "function foo(p1, p2, p3) {}" + "new foo([], y(), z()); new foo([],y(),3)", "var x; var y; var z;" + "function foo(p2, p3) {var p1=[]}" + "new foo(y(), z()); new foo(y(),3)"); [EOL] } <line_num>: 549,583
public void testShadows() { [EOL]     testSame("function foo(a) {}" + "var x;" + "function f() {" + "  var x;" + "  function g() {" + "    foo(x());" + "  }" + "};" + "foo(x())"); [EOL] } <line_num>: 585,595
public void testCrash() { [EOL]     test("function foo(a) {}" + "foo({o:1});" + "foo({o:1})", "function foo() {var a = {o:1}}" + "foo();" + "foo()"); [EOL] } <line_num>: 597,605
public void testGlobalCatch() { [EOL]     testSame("function foo(a) {} try {} catch (e) {foo(e)}"); [EOL] } <line_num>: 607,609
public void testNamelessParameter1() { [EOL]     test("f(g()); function f(){}", "f(); function f(){g()}"); [EOL] } <line_num>: 611,614
public void testNamelessParameter2() { [EOL]     test("f(g(),h()); function f(){}", "f(); function f(){g();h()}"); [EOL] } <line_num>: 616,619
