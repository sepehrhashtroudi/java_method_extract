public void testFindModifiedParameters1() { [EOL]     assertEquals(Sets.newHashSet(), FunctionArgumentInjector.findModifiedParameters(parseFunction("function f(a){ return a==0; }"))); [EOL] } <line_num>: 41,45
public void testFindModifiedParameters2() { [EOL]     assertEquals(Sets.newHashSet(), FunctionArgumentInjector.findModifiedParameters(parseFunction("function f(a){ b=a }"))); [EOL] } <line_num>: 47,51
public void testFindModifiedParameters3() { [EOL]     assertEquals(Sets.newHashSet("a"), FunctionArgumentInjector.findModifiedParameters(parseFunction("function f(a){ a=0 }"))); [EOL] } <line_num>: 53,57
public void testFindModifiedParameters4() { [EOL]     assertEquals(Sets.newHashSet("a", "b"), FunctionArgumentInjector.findModifiedParameters(parseFunction("function f(a,b){ a=0;b=0 }"))); [EOL] } <line_num>: 59,63
public void testFindModifiedParameters5() { [EOL]     assertEquals(Sets.newHashSet("b"), FunctionArgumentInjector.findModifiedParameters(parseFunction("function f(a,b){ a; if (a) b=0 }"))); [EOL] } <line_num>: 65,69
public void testFindModifiedParameters6() { [EOL]     assertEquals(Sets.newHashSet("a", "b"), FunctionArgumentInjector.findModifiedParameters(parseFunction("function f(a,b){ function f(){ a;b; } }"))); [EOL] } <line_num>: 71,75
public void testFindModifiedParameters7() { [EOL]     assertEquals(Sets.newHashSet("b"), FunctionArgumentInjector.findModifiedParameters(parseFunction("function f(a,b){ a; function f(){ b; } }"))); [EOL] } <line_num>: 77,81
public void testFindModifiedParameters8() { [EOL]     assertEquals(Sets.newHashSet("b"), FunctionArgumentInjector.findModifiedParameters(parseFunction("function f(a,b){ " + "a; function f(){ function g() { b; } } }"))); [EOL] } <line_num>: 83,89
public void testFindModifiedParameters9() { [EOL]     assertEquals(Sets.newHashSet("a", "b"), FunctionArgumentInjector.findModifiedParameters(parseFunction("function f(a,b){ (function(){ a;b; }) }"))); [EOL] } <line_num>: 91,95
public void testFindModifiedParameters10() { [EOL]     assertEquals(Sets.newHashSet("b"), FunctionArgumentInjector.findModifiedParameters(parseFunction("function f(a,b){ a; (function (){ b; }) }"))); [EOL] } <line_num>: 97,101
public void testFindModifiedParameters11() { [EOL]     assertEquals(Sets.newHashSet("b"), FunctionArgumentInjector.findModifiedParameters(parseFunction("function f(a,b){ " + "a; (function(){ (function () { b; }) }) }"))); [EOL] } <line_num>: 103,109
public void testMaybeAddTempsForCallArguments1() { [EOL]     testNeededTemps("function foo(a,b){}; foo(goo(),goo());", "foo", Sets.newHashSet("a", "b")); [EOL] } <line_num>: 111,118
public void testMaybeAddTempsForCallArguments2() { [EOL]     testNeededTemps("function foo(a,b){}; foo(1,2);", "foo", EMPTY_STRING_SET); [EOL] } <line_num>: 120,127
public void testMaybeAddTempsForCallArguments3() { [EOL]     testNeededTemps("function foo(a,b){a;b;}; foo(x,y);", "foo", EMPTY_STRING_SET); [EOL] } <line_num>: 129,136
public void testMaybeAddTempsForCallArguments4() { [EOL]     testNeededTemps("function foo(a,b){a;goo();b;}; foo(x,y);", "foo", Sets.newHashSet("b")); [EOL] } <line_num>: 138,145
public void testMaybeAddTempsForCallArguments5() { [EOL]     testNeededTemps("function foo(a,b){x = b; y = a;}; foo(x,y);", "foo", Sets.newHashSet("a")); [EOL] } <line_num>: 147,154
public void testMaybeAddTempsForCallArguments6() { [EOL]     testNeededTemps("function foo(a){x++;a;}; foo(x);", "foo", Sets.newHashSet("a")); [EOL] } <line_num>: 156,163
public void testMaybeAddTempsForCallArguments7() { [EOL]     testNeededTemps("function foo(a){var c; c=0; a;}; foo(x);", "foo", EMPTY_STRING_SET); [EOL] } <line_num>: 165,171
public void testMaybeAddTempsForCallArguments8() { [EOL]     testNeededTemps("function foo(a){var c = {}; c.goo=0; a;}; foo(x);", "foo", Sets.newHashSet("a")); [EOL] } <line_num>: 173,179
public void testMaybeAddTempsForCallArguments9() { [EOL]     testNeededTemps("function foo(a,b){while(true){a;goo();b;}}; foo(x,y);", "foo", Sets.newHashSet("a", "b")); [EOL] } <line_num>: 181,188
public void testMaybeAddTempsForCallArguments10() { [EOL]     testNeededTemps("function foo(a,b){while(true){a;true;b;}}; foo(x,y);", "foo", EMPTY_STRING_SET); [EOL] } <line_num>: 190,196
public void testMaybeAddTempsForCallArguments11() { [EOL]     testNeededTemps("function foo(a,b){do{a;b;}while(goo());}; foo(x,y);", "foo", Sets.newHashSet("a", "b")); [EOL] } <line_num>: 198,205
public void testMaybeAddTempsForCallArguments12() { [EOL]     testNeededTemps("function foo(a,b){for(;;){a;b;goo();}}; foo(x,y);", "foo", Sets.newHashSet("a", "b")); [EOL] } <line_num>: 207,214
public void testMaybeAddTempsForCallArguments13() { [EOL]     testNeededTemps("function foo(a,b){for(;;){for(;;){a;b;}goo();}}; foo(x,y);", "foo", Sets.newHashSet("a", "b")); [EOL] } <line_num>: 216,223
public void testMaybeAddTempsForCallArguments14() { [EOL]     testNeededTemps("function foo(a,b){goo();for(;;){a;b;}}; foo(x,y);", "foo", Sets.newHashSet("a", "b")); [EOL] } <line_num>: 225,232
public void testMaybeAddTempsForCallArguments20() { [EOL]     testNeededTemps("function foo(a){a;a;}; foo(\"blah blah\");", "foo", Sets.newHashSet("a")); [EOL] } <line_num>: 234,240
public void testMaybeAddTempsForCallArguments21() { [EOL]     testNeededTemps("function foo(a){a;a;}; foo(\"\");", "foo", EMPTY_STRING_SET); [EOL] } <line_num>: 242,248
public void testMaybeAddTempsForCallArguments22() { [EOL]     testNeededTemps("function foo(a){}; foo({x:1});", "foo", EMPTY_STRING_SET); [EOL]     testNeededTemps("function foo(a){a;}; foo({x:1});", "foo", Sets.newHashSet("a")); [EOL]     testNeededTemps("function foo(a){a;a;}; foo({x:1});", "foo", Sets.newHashSet("a")); [EOL] } <line_num>: 250,266
public void testMaybeAddTempsForCallArguments23() { [EOL]     testNeededTemps("function foo(a){}; foo([1,2]);", "foo", EMPTY_STRING_SET); [EOL]     testNeededTemps("function foo(a){a;}; foo([1,2]);", "foo", Sets.newHashSet("a")); [EOL]     testNeededTemps("function foo(a){a;a;}; foo([1,2]);", "foo", Sets.newHashSet("a")); [EOL] } <line_num>: 268,284
public void testMaybeAddTempsForCallArguments24() { [EOL]     testNeededTemps("function foo(a){}; foo(/mac/);", "foo", EMPTY_STRING_SET); [EOL]     testNeededTemps("function foo(a){a;}; foo(/mac/);", "foo", Sets.newHashSet("a")); [EOL]     testNeededTemps("function foo(a){a;a;}; foo(/mac/);", "foo", Sets.newHashSet("a")); [EOL] } <line_num>: 286,302
public void testMaybeAddTempsForCallArguments25() { [EOL]     testNeededTemps("function foo(a){}; foo(new Date());", "foo", EMPTY_STRING_SET); [EOL]     testNeededTemps("function foo(a){a;}; foo(new Date());", "foo", Sets.newHashSet("a")); [EOL]     testNeededTemps("function foo(a){a;a;}; foo(new Date());", "foo", Sets.newHashSet("a")); [EOL] } <line_num>: 304,321
public void testMaybeAddTempsForCallArguments26() { [EOL]     testNeededTemps("function foo(a){}; foo(new Bar());", "foo", Sets.newHashSet("a")); [EOL]     testNeededTemps("function foo(a){a;}; foo(new Bar());", "foo", Sets.newHashSet("a")); [EOL]     testNeededTemps("function foo(a){a;a;}; foo(new Bar());", "foo", Sets.newHashSet("a")); [EOL] } <line_num>: 323,339
public void testMaybeAddTempsForCallArguments27() { [EOL]     testNeededTemps("function foo(a,b,c){}; foo.call(this,1,goo(),2);", "foo", Sets.newHashSet("b")); [EOL] } <line_num>: 341,348
public void testMaybeAddTempsForCallArguments28() { [EOL]     testNeededTemps("function foo(a){a;a;}; foo(true);", "foo", EMPTY_STRING_SET); [EOL] } <line_num>: 350,356
public void testMaybeAddTempsForCallArguments29() { [EOL]     testNeededTemps("function foo(a){a;a;}; foo(false);", "foo", EMPTY_STRING_SET); [EOL] } <line_num>: 358,364
public void testMaybeAddTempsForCallArguments30() { [EOL]     testNeededTemps("function foo(a){a;a;}; foo(!0);", "foo", EMPTY_STRING_SET); [EOL] } <line_num>: 366,372
public void testMaybeAddTempsForCallArguments31() { [EOL]     testNeededTemps("function foo(a){a;a;}; foo(!1);", "foo", EMPTY_STRING_SET); [EOL] } <line_num>: 374,380
public void testMaybeAddTempsForCallArguments32() { [EOL]     testNeededTemps("function foo(a){a;a;}; foo(void 0);", "foo", EMPTY_STRING_SET); [EOL] } <line_num>: 382,388
public void testMaybeAddTempsForCallArgumentsInLoops() { [EOL]     testNeededTemps("function foo(a){for(;;)a;}; foo(new Bar());", "foo", Sets.newHashSet("a")); [EOL]     testNeededTemps("function foo(a){while(true)a;}; foo(new Bar());", "foo", Sets.newHashSet("a")); [EOL]     testNeededTemps("function foo(a){do{a;}while(true)}; foo(new Bar());", "foo", Sets.newHashSet("a")); [EOL] } <line_num>: 390,407
private void testNeededTemps(String code, String fnName, Set<String> expectedTemps) { [EOL]     Node n = parse(code); [EOL]     Node fn = findFunction(n, fnName); [EOL]     assertNotNull(fn); [EOL]     Node call = findCall(n, fnName); [EOL]     assertNotNull(call); [EOL]     Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap(fn, call, getNameSupplier()); [EOL]     Set<String> actualTemps = Sets.newHashSet(); [EOL]     FunctionArgumentInjector.maybeAddTempsForCallArguments(fn, args, actualTemps, new ClosureCodingConvention()); [EOL]     assertEquals(expectedTemps, actualTemps); [EOL] } <line_num>: 409,425
@Override [EOL] public String get() { [EOL]     return String.valueOf(i++); [EOL] } <line_num>: 430,433
private static Supplier<String> getNameSupplier() { [EOL]     return new Supplier<String>() { [EOL]  [EOL]         int i = 0; [EOL]  [EOL]         @Override [EOL]         public String get() { [EOL]             return String.valueOf(i++); [EOL]         } [EOL]     }; [EOL] } <line_num>: 427,435
private static Node findCall(Node n, String name) { [EOL]     if (n.isCall()) { [EOL]         Node callee; [EOL]         if (NodeUtil.isGet(n.getFirstChild())) { [EOL]             callee = n.getFirstChild().getFirstChild(); [EOL]             Node prop = callee.getNext(); [EOL]             Preconditions.checkArgument(prop.isString() && prop.getString().equals("call")); [EOL]         } else { [EOL]             callee = n.getFirstChild(); [EOL]         } [EOL]         if (callee.isName() && callee.getString().equals(name)) { [EOL]             return n; [EOL]         } [EOL]     } [EOL]     for (Node c : n.children()) { [EOL]         Node result = findCall(c, name); [EOL]         if (result != null) { [EOL]             return result; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 437,464
private static Node findFunction(Node n, String name) { [EOL]     if (n.isFunction()) { [EOL]         if (n.getFirstChild().getString().equals(name)) { [EOL]             return n; [EOL]         } [EOL]     } [EOL]     for (Node c : n.children()) { [EOL]         Node result = findFunction(c, name); [EOL]         if (result != null) { [EOL]             return result; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 466,481
private static Node parseFunction(String js) { [EOL]     return parse(js).getFirstChild(); [EOL] } <line_num>: 483,485
private static Node parse(String js) { [EOL]     Compiler compiler = new Compiler(); [EOL]     Node n = compiler.parseTestCode(js); [EOL]     assertEquals(0, compiler.getErrorCount()); [EOL]     return n; [EOL] } <line_num>: 487,492
