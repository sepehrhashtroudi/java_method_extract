@Override [EOL] protected void setUp() { [EOL]     List<JSModule> modulesInDepOrder = new ArrayList<JSModule>(); [EOL]     mod1 = new JSModule("mod1"); [EOL]     modulesInDepOrder.add(mod1); [EOL]     mod2 = new JSModule("mod2"); [EOL]     mod2.addDependency(mod1); [EOL]     modulesInDepOrder.add(mod2); [EOL]     mod3 = new JSModule("mod3"); [EOL]     mod3.addDependency(mod1); [EOL]     modulesInDepOrder.add(mod3); [EOL]     mod4 = new JSModule("mod4"); [EOL]     mod4.addDependency(mod2); [EOL]     mod4.addDependency(mod3); [EOL]     modulesInDepOrder.add(mod4); [EOL]     mod5 = new JSModule("mod5"); [EOL]     mod5.addDependency(mod1); [EOL]     modulesInDepOrder.add(mod5); [EOL] } <line_num>: 38,61
public void testDependencies() { [EOL]     assertEquals(ImmutableSet.of(), mod1.getAllDependencies()); [EOL]     assertEquals(ImmutableSet.of(mod1), mod2.getAllDependencies()); [EOL]     assertEquals(ImmutableSet.of(mod1), mod3.getAllDependencies()); [EOL]     assertEquals(ImmutableSet.of(mod1, mod2, mod3), mod4.getAllDependencies()); [EOL]     assertEquals(ImmutableSet.of(mod1), mod1.getThisAndAllDependencies()); [EOL]     assertEquals(ImmutableSet.of(mod1, mod2), mod2.getThisAndAllDependencies()); [EOL]     assertEquals(ImmutableSet.of(mod1, mod3), mod3.getThisAndAllDependencies()); [EOL]     assertEquals(ImmutableSet.of(mod1, mod2, mod3, mod4), mod4.getThisAndAllDependencies()); [EOL] } <line_num>: 63,74
public void testSortInputs() throws Exception { [EOL]     CompilerInput a = new CompilerInput(SourceFile.fromCode("a.js", "goog.require('b');goog.require('c')")); [EOL]     CompilerInput b = new CompilerInput(SourceFile.fromCode("b.js", "goog.provide('b');goog.require('d')")); [EOL]     CompilerInput c = new CompilerInput(SourceFile.fromCode("c.js", "goog.provide('c');goog.require('d')")); [EOL]     CompilerInput d = new CompilerInput(SourceFile.fromCode("d.js", "goog.provide('d')")); [EOL]     CompilerInput e = new CompilerInput(SourceFile.fromCode("e.js", "goog.provide('e')")); [EOL]     CompilerInput f = new CompilerInput(SourceFile.fromCode("f.js", "goog.provide('f')")); [EOL]     assertSortedInputs(ImmutableList.of(d, b, c, a), ImmutableList.of(a, b, c, d)); [EOL]     assertSortedInputs(ImmutableList.of(d, b, c, a), ImmutableList.of(d, b, c, a)); [EOL]     assertSortedInputs(ImmutableList.of(d, c, b, a), ImmutableList.of(d, c, b, a)); [EOL]     assertSortedInputs(ImmutableList.of(d, b, c, a), ImmutableList.of(d, a, b, c)); [EOL] } <line_num>: 76,110
private void assertSortedInputs(List<CompilerInput> expected, List<CompilerInput> shuffled) throws Exception { [EOL]     JSModule mod = new JSModule("mod"); [EOL]     for (CompilerInput input : shuffled) { [EOL]         input.setModule(null); [EOL]         mod.add(input); [EOL]     } [EOL]     Compiler compiler = new Compiler(System.err); [EOL]     compiler.initCompilerOptionsIfTesting(); [EOL]     mod.sortInputsByDeps(compiler); [EOL]     assertEquals(expected, mod.getInputs()); [EOL] } <line_num>: 112,125
public void testSortJsModules() throws Exception { [EOL]     assertEquals(ImmutableList.of(mod1, mod2, mod3, mod4), Arrays.asList(JSModule.sortJsModules(ImmutableList.of(mod1, mod2, mod3, mod4)))); [EOL]     assertEquals(ImmutableList.of(mod1, mod3, mod2, mod4), Arrays.asList(JSModule.sortJsModules(ImmutableList.of(mod1, mod3, mod2, mod4)))); [EOL]     assertEquals(ImmutableList.of(mod1, mod3, mod2, mod4), Arrays.asList(JSModule.sortJsModules(ImmutableList.of(mod4, mod3, mod2, mod1)))); [EOL]     assertEquals(ImmutableList.of(mod1, mod3, mod2, mod4), Arrays.asList(JSModule.sortJsModules(ImmutableList.of(mod3, mod1, mod2, mod4)))); [EOL]     assertEquals(ImmutableList.of(mod1, mod3, mod2, mod4), Arrays.asList(JSModule.sortJsModules(ImmutableList.of(mod4, mod3, mod1, mod2)))); [EOL] } <line_num>: 127,148
