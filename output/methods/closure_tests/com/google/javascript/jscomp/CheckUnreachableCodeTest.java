@Override [EOL] protected CompilerPass getProcessor(Compiler compiler) { [EOL]     return new CombinedCompilerPass(compiler, new CheckUnreachableCode(compiler, CheckLevel.ERROR)); [EOL] } <line_num>: 26,30
public void testCorrectSimple() { [EOL]     testSame("var x"); [EOL]     testSame("var x = 1"); [EOL]     testSame("var x = 1; x = 2;"); [EOL]     testSame("if (x) { var x = 1 }"); [EOL]     testSame("if (x) { var x = 1 } else { var y = 2 }"); [EOL]     testSame("while(x) {}"); [EOL] } <line_num>: 32,39
public void testIncorrectSimple() { [EOL]     assertUnreachable("function f() { return; x=1; }"); [EOL]     assertUnreachable("function f() { return; x=1; x=1; }"); [EOL]     assertUnreachable("function f() { return; var x = 1; }"); [EOL] } <line_num>: 41,45
public void testCorrectIfReturns() { [EOL]     testSame("function f() { if (x) { return } }"); [EOL]     testSame("function f() { if (x) { return } return }"); [EOL]     testSame("function f() { if (x) { if (y) { return } } else { return }}"); [EOL]     testSame("function f()" + "{ if (x) { if (y) { return } return } else { return }}"); [EOL] } <line_num>: 47,53
public void testInCorrectIfReturns() { [EOL]     assertUnreachable("function f() { if (x) { return } else { return } return }"); [EOL] } <line_num>: 55,58
public void testCorrectSwitchReturn() { [EOL]     testSame("function f() { switch(x) { default: return; case 1: x++; }}"); [EOL]     testSame("function f() {" + "switch(x) { default: return; case 1: x++; } return }"); [EOL]     testSame("function f() {" + "switch(x) { default: return; case 1: return; }}"); [EOL]     testSame("function f() {" + "switch(x) { case 1: return; } return }"); [EOL]     testSame("function f() {" + "switch(x) { case 1: case 2: return; } return }"); [EOL]     testSame("function f() {" + "switch(x) { case 1: return; case 2: return; } return }"); [EOL]     testSame("function f() {" + "switch(x) { case 1 : return; case 2: return; } return }"); [EOL] } <line_num>: 60,74
public void testInCorrectSwitchReturn() { [EOL]     assertUnreachable("function f() {" + "switch(x) { default: return; case 1: return; } return }"); [EOL]     assertUnreachable("function f() {" + "switch(x) { default: return; return; case 1: return; } }"); [EOL] } <line_num>: 76,81
public void testCorrectLoopBreaksAndContinues() { [EOL]     testSame("while(1) { foo(); break }"); [EOL]     testSame("while(1) { foo(); continue }"); [EOL]     testSame("for(;;) { foo(); break }"); [EOL]     testSame("for(;;) { foo(); continue }"); [EOL]     testSame("for(;;) { if (x) { break } }"); [EOL]     testSame("for(;;) { if (x) { continue } }"); [EOL]     testSame("do { foo(); continue} while(1)"); [EOL] } <line_num>: 83,91
public void testInCorrectLoopBreaksAndContinues() { [EOL]     assertUnreachable("while(1) { foo(); break; bar()}"); [EOL]     assertUnreachable("while(1) { foo(); continue; bar() }"); [EOL]     assertUnreachable("for(;;) { foo(); break; bar() }"); [EOL]     assertUnreachable("for(;;) { foo(); continue; bar() }"); [EOL]     assertUnreachable("for(;;) { if (x) { break; bar() } }"); [EOL]     assertUnreachable("for(;;) { if (x) { continue; bar() } }"); [EOL]     assertUnreachable("do { foo(); continue; bar()} while(1)"); [EOL] } <line_num>: 93,101
public void testUncheckedWhileInDo() { [EOL]     assertUnreachable("do { foo(); break} while(1)"); [EOL] } <line_num>: 103,105
public void testUncheckedConditionInFor() { [EOL]     assertUnreachable("for(var x = 0; x < 100; x++) { break };"); [EOL] } <line_num>: 107,109
public void testFunctionDeclaration() { [EOL]     testSame("function f() { return; function ff() { }}"); [EOL] } <line_num>: 111,114
public void testVarDeclaration() { [EOL]     assertUnreachable("function f() { return; var x = 1 }"); [EOL]     assertUnreachable("function f() { return; var x }"); [EOL] } <line_num>: 116,120
public void testReachableTryCatchFinally() { [EOL]     testSame("try { } finally {  }"); [EOL]     testSame("try { foo(); } finally bar(); "); [EOL]     testSame("try { foo() } finally { bar() }"); [EOL]     testSame("try { foo(); } catch (e) {e()} finally bar(); "); [EOL]     testSame("try { foo() } catch (e) {e()} finally { bar() }"); [EOL] } <line_num>: 122,128
public void testUnreachableCatch() { [EOL]     assertUnreachable("try { var x = 0 } catch (e) { }"); [EOL] } <line_num>: 130,132
public void testSpuriousBreak() { [EOL]     testSame("switch (x) { default: throw x; break; }"); [EOL] } <line_num>: 134,136
public void testInstanceOfThrowsException() { [EOL]     testSame("function f() {try { if (value instanceof type) return true; } " + "catch (e) { }}"); [EOL] } <line_num>: 138,141
public void testFalseCondition() { [EOL]     assertUnreachable("if(false) { }"); [EOL]     assertUnreachable("if(0) { }"); [EOL] } <line_num>: 143,146
public void testUnreachableLoop() { [EOL]     assertUnreachable("while(false) {}"); [EOL] } <line_num>: 148,150
public void testInfiniteLoop() { [EOL]     testSame("while (true) { foo(); break; }"); [EOL]     assertUnreachable("while(true) {} foo()"); [EOL] } <line_num>: 152,157
public void testSuppression() { [EOL]     assertUnreachable("if(false) { }"); [EOL]     testSame("/** @fileoverview\n" + " * @suppress {uselessCode}\n" + " */\n" + "if(false) { }"); [EOL]     testSame("/** @fileoverview\n" + " * @suppress {uselessCode}\n" + " */\n" + "function f() { if(false) { } }"); [EOL]     testSame("/**\n" + " * @suppress {uselessCode}\n" + " */\n" + "function f() { if(false) { } }"); [EOL]     assertUnreachable("/**\n" + " * @suppress {uselessCode}\n" + " */\n" + "function f() { if(false) { } }\n" + "function g() { if(false) { } }\n"); [EOL]     testSame("/**\n" + " * @suppress {uselessCode}\n" + " */\n" + "function f() {\n" + "  function g() { if(false) { } }\n" + "  if(false) { } }\n"); [EOL]     assertUnreachable("function f() {\n" + "  /**\n" + "   * @suppress {uselessCode}\n" + "   */\n" + "  function g() { if(false) { } }\n" + "  if(false) { } }\n"); [EOL]     testSame("function f() {\n" + "  /**\n" + "   * @suppress {uselessCode}\n" + "   */\n" + "  function g() { if(false) { } }\n" + "}\n"); [EOL] } <line_num>: 159,210
private void assertUnreachable(String js) { [EOL]     test(js, js, CheckUnreachableCode.UNREACHABLE_CODE); [EOL] } <line_num>: 212,214
