public FunctionNamesTest() { [EOL]     this.functionNames = null; [EOL] } <line_num>: 30,32
@Override [EOL] protected CompilerPass getProcessor(Compiler compiler) { [EOL]     functionNames = new FunctionNames(compiler); [EOL]     return functionNames; [EOL] } <line_num>: 34,38
public void testFunctionsNamesAndIds() { [EOL]     final String jsSource = "goog.widget = function(str) {\n" + "  this.member_fn = function() {};\n" + "  local_fn = function() {};\n" + "  (function(a){})(1);\n" + "}\n" + "function foo() {\n" + "  function bar() {}\n" + "}\n" + "literal = {f1 : function(){}, f2 : function(){}};\n" + "goog.array.map(arr, function named(){});\n" + "goog.array.map(arr, function(){});\n" + "named_twice = function quax(){};\n" + "recliteral = {l1 : {l2 : function(){}}};\n" + "namedliteral = {n1 : function litnamed(){}};\n" + "namedrecliteral = {n1 : {n2 : function reclitnamed(){}}};\n" + "numliteral = {1 : function(){}};\n" + "recnumliteral = {1 : {a : function(){}}};\n"; [EOL]     testSame(jsSource); [EOL]     final Map<Integer, String> idNameMap = Maps.newLinkedHashMap(); [EOL]     int count = 0; [EOL]     for (Node f : functionNames.getFunctionNodeList()) { [EOL]         int id = functionNames.getFunctionId(f); [EOL]         String name = functionNames.getFunctionName(f); [EOL]         idNameMap.put(id, name); [EOL]         count++; [EOL]     } [EOL]     assertEquals("Unexpected number of functions", 16, count); [EOL]     final Map<Integer, String> expectedMap = Maps.newLinkedHashMap(); [EOL]     expectedMap.put(0, "goog.widget.member_fn"); [EOL]     expectedMap.put(1, "goog.widget::local_fn"); [EOL]     expectedMap.put(2, "goog.widget::<anonymous>"); [EOL]     expectedMap.put(3, "goog.widget"); [EOL]     expectedMap.put(4, "foo::bar"); [EOL]     expectedMap.put(5, "foo"); [EOL]     expectedMap.put(6, "literal.f1"); [EOL]     expectedMap.put(7, "literal.f2"); [EOL]     expectedMap.put(8, "named"); [EOL]     expectedMap.put(9, "<anonymous>"); [EOL]     expectedMap.put(10, "quax"); [EOL]     expectedMap.put(11, "recliteral.l1.l2"); [EOL]     expectedMap.put(12, "litnamed"); [EOL]     expectedMap.put(13, "reclitnamed"); [EOL]     expectedMap.put(14, "numliteral.__2"); [EOL]     expectedMap.put(15, "recnumliteral.__3.a"); [EOL]     assertEquals("Function id/name mismatch", expectedMap, idNameMap); [EOL] } <line_num>: 40,93
