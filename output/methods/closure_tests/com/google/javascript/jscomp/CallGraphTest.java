@Override [EOL] protected CompilerPass getProcessor(Compiler compiler) { [EOL]     currentProcessor = new CallGraph(compiler, createForwardCallGraph, createBackwardCallGraph); [EOL]     return currentProcessor; [EOL] } <line_num>: 43,50
public void testGetFunctionForAstNode() { [EOL]     String source = "function A() {};\n"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     CallGraph.Function functionA = callgraph.getUniqueFunctionWithName("A"); [EOL]     Node functionANode = functionA.getAstNode(); [EOL]     assertEquals(functionA, callgraph.getFunctionForAstNode(functionANode)); [EOL] } <line_num>: 57,67
public void testGetAllFunctions() { [EOL]     String source = "function A() {}\n" + "var B = function() {\n" + "(function C(){A()})()\n" + "};\n"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     Collection<CallGraph.Function> functions = callgraph.getAllFunctions(); [EOL]     assertEquals(4, functions.size()); [EOL]     CallGraph.Function functionA = callgraph.getUniqueFunctionWithName("A"); [EOL]     CallGraph.Function functionB = callgraph.getUniqueFunctionWithName("B"); [EOL]     CallGraph.Function functionC = callgraph.getUniqueFunctionWithName("C"); [EOL]     assertEquals("A", NodeUtil.getFunctionName(functionA.getAstNode())); [EOL]     assertEquals("B", NodeUtil.getFunctionName(functionB.getAstNode())); [EOL]     assertEquals("C", NodeUtil.getFunctionName(functionC.getAstNode())); [EOL] } <line_num>: 69,93
public void testGetAllFunctionsContainsNormalFunction() { [EOL]     String source = "function A(){}\n"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     Collection<CallGraph.Function> allFunctions = callgraph.getAllFunctions(); [EOL]     assertEquals(2, allFunctions.size()); [EOL]     assertTrue(allFunctions.contains(callgraph.getUniqueFunctionWithName("A"))); [EOL]     assertTrue(allFunctions.contains(callgraph.getMainFunction())); [EOL] } <line_num>: 95,107
public void testGetAllFunctionsContainsVarAssignedLiteralFunction() { [EOL]     String source = "var A = function(){}\n"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     Collection<CallGraph.Function> allFunctions = callgraph.getAllFunctions(); [EOL]     assertEquals(2, allFunctions.size()); [EOL]     Function functionA = callgraph.getUniqueFunctionWithName("A"); [EOL]     assertTrue(allFunctions.contains(functionA)); [EOL]     assertTrue(allFunctions.contains(callgraph.getMainFunction())); [EOL] } <line_num>: 109,122
public void testGetAllFunctionsContainsNamespaceAssignedLiteralFunction() { [EOL]     String source = "var namespace = {};\n" + "namespace.A = function(){};\n"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     Collection<CallGraph.Function> allFunctions = callgraph.getAllFunctions(); [EOL]     assertEquals(2, allFunctions.size()); [EOL]     assertTrue(allFunctions.contains(callgraph.getUniqueFunctionWithName("namespace.A"))); [EOL]     assertTrue(allFunctions.contains(callgraph.getMainFunction())); [EOL] } <line_num>: 124,139
public void testGetAllFunctionsContainsLocalFunction() { [EOL]     String source = "var A = function(){var B = function(){}};\n"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     Collection<CallGraph.Function> allFunctions = callgraph.getAllFunctions(); [EOL]     assertEquals(3, allFunctions.size()); [EOL]     assertTrue(allFunctions.contains(callgraph.getUniqueFunctionWithName("A"))); [EOL]     assertTrue(allFunctions.contains(callgraph.getUniqueFunctionWithName("B"))); [EOL]     assertTrue(allFunctions.contains(callgraph.getMainFunction())); [EOL] } <line_num>: 141,155
public void testGetAllFunctionsContainsAnonymousFunction() { [EOL]     String source = "var A = function(){(function(){})();};\n"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     Collection<CallGraph.Function> allFunctions = callgraph.getAllFunctions(); [EOL]     assertEquals(3, allFunctions.size()); [EOL]     assertTrue(allFunctions.contains(callgraph.getUniqueFunctionWithName("A"))); [EOL]     assertTrue(allFunctions.contains(callgraph.getUniqueFunctionWithName(null))); [EOL]     assertTrue(allFunctions.contains(callgraph.getMainFunction())); [EOL] } <line_num>: 157,172
public void testGetCallsiteForAstNode() { [EOL]     String source = "function A() {B()};\n" + "function B(){};\n"; [EOL]     CallGraph callgraph = compileAndRunBackward(source); [EOL]     CallGraph.Function functionA = callgraph.getUniqueFunctionWithName("A"); [EOL]     CallGraph.Callsite callToB = functionA.getCallsitesInFunction().iterator().next(); [EOL]     Node callsiteNode = callToB.getAstNode(); [EOL]     assertEquals(callToB, callgraph.getCallsiteForAstNode(callsiteNode)); [EOL] } <line_num>: 174,188
public void testFunctionGetCallsites() { [EOL]     String source = "function A() {var x; x()}\n" + "var B = function() {\n" + "(function C(){A()})()\n" + "};\n"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     CallGraph.Function functionA = callgraph.getUniqueFunctionWithName("A"); [EOL]     Collection<CallGraph.Callsite> callsitesInA = functionA.getCallsitesInFunction(); [EOL]     assertEquals(1, callsitesInA.size()); [EOL]     CallGraph.Callsite firstCallsiteInA = callsitesInA.iterator().next(); [EOL]     Node aTargetExpression = firstCallsiteInA.getAstNode().getFirstChild(); [EOL]     assertEquals(Token.NAME, aTargetExpression.getType()); [EOL]     assertEquals("x", aTargetExpression.getString()); [EOL]     CallGraph.Function functionB = callgraph.getUniqueFunctionWithName("B"); [EOL]     Collection<CallGraph.Callsite> callsitesInB = functionB.getCallsitesInFunction(); [EOL]     assertEquals(1, callsitesInB.size()); [EOL]     CallGraph.Callsite firstCallsiteInB = callsitesInB.iterator().next(); [EOL]     Node bTargetExpression = firstCallsiteInB.getAstNode().getFirstChild(); [EOL]     assertEquals(Token.FUNCTION, bTargetExpression.getType()); [EOL]     assertEquals("C", NodeUtil.getFunctionName(bTargetExpression)); [EOL]     CallGraph.Function functionC = callgraph.getUniqueFunctionWithName("C"); [EOL]     Collection<CallGraph.Callsite> callsitesInC = functionC.getCallsitesInFunction(); [EOL]     assertEquals(1, callsitesInC.size()); [EOL]     CallGraph.Callsite firstCallsiteInC = callsitesInC.iterator().next(); [EOL]     Node cTargetExpression = firstCallsiteInC.getAstNode().getFirstChild(); [EOL]     assertEquals(Token.NAME, aTargetExpression.getType()); [EOL]     assertEquals("A", cTargetExpression.getString()); [EOL] } <line_num>: 190,240
public void testFindNewInFunction() { [EOL]     String source = "function A() {var x; new x(1,2)}\n;"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     CallGraph.Function functionA = callgraph.getUniqueFunctionWithName("A"); [EOL]     Collection<CallGraph.Callsite> callsitesInA = functionA.getCallsitesInFunction(); [EOL]     assertEquals(1, callsitesInA.size()); [EOL]     Node callsiteInA = callsitesInA.iterator().next().getAstNode(); [EOL]     assertEquals(Token.NEW, callsiteInA.getType()); [EOL]     Node aTargetExpression = callsiteInA.getFirstChild(); [EOL]     assertEquals(Token.NAME, aTargetExpression.getType()); [EOL]     assertEquals("x", aTargetExpression.getString()); [EOL] } <line_num>: 242,259
public void testFindCallsiteTargetGlobalName() { [EOL]     String source = "function A() {}\n" + "function B() {}\n" + "function C() {A()}\n"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     CallGraph.Function functionC = callgraph.getUniqueFunctionWithName("C"); [EOL]     assertNotNull(functionC); [EOL]     CallGraph.Callsite callsiteInC = functionC.getCallsitesInFunction().iterator().next(); [EOL]     assertNotNull(callsiteInC); [EOL]     Collection<CallGraph.Function> targetsOfCallsiteInC = callsiteInC.getPossibleTargets(); [EOL]     assertNotNull(targetsOfCallsiteInC); [EOL]     assertEquals(1, targetsOfCallsiteInC.size()); [EOL] } <line_num>: 261,282
public void testFindCallsiteTargetAliasedGlobalProperty() { [EOL]     String source = "var namespace = {};\n" + "namespace.A = function() {};\n" + "function C() {namespace.A()}\n"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     CallGraph.Function functionC = callgraph.getUniqueFunctionWithName("C"); [EOL]     assertNotNull(functionC); [EOL]     CallGraph.Callsite callsiteInC = functionC.getCallsitesInFunction().iterator().next(); [EOL]     assertNotNull(callsiteInC); [EOL]     Collection<CallGraph.Function> targetsOfCallsiteInC = callsiteInC.getPossibleTargets(); [EOL]     assertNotNull(targetsOfCallsiteInC); [EOL]     assertEquals(1, targetsOfCallsiteInC.size()); [EOL] } <line_num>: 284,306
public void testGetAllCallsitesContainsMultiple() { [EOL]     String source = "function A() {}\n" + "var B = function() {\n" + "(function (){A()})()\n" + "};\n" + "A();\n" + "B();\n"; [EOL]     CallGraph callgraph = compileAndRunBackward(source); [EOL]     Collection<CallGraph.Callsite> allCallsites = callgraph.getAllCallsites(); [EOL]     assertEquals(4, allCallsites.size()); [EOL] } <line_num>: 308,322
public void testGetAllCallsitesContainsGlobalSite() { [EOL]     String source = "function A(){}\n" + "A();\n"; [EOL]     CallGraph callgraph = compileAndRunBackward(source); [EOL]     Collection<CallGraph.Callsite> allCallsites = callgraph.getAllCallsites(); [EOL]     assertEquals(1, allCallsites.size()); [EOL]     Node callsiteNode = allCallsites.iterator().next().getAstNode(); [EOL]     assertEquals(Token.CALL, callsiteNode.getType()); [EOL]     assertEquals("A", callsiteNode.getFirstChild().getString()); [EOL] } <line_num>: 324,337
public void testGetAllCallsitesContainsLocalSite() { [EOL]     String source = "function A(){}\n" + "function B(){A();}\n"; [EOL]     CallGraph callgraph = compileAndRunBackward(source); [EOL]     Collection<CallGraph.Callsite> allCallsites = callgraph.getAllCallsites(); [EOL]     assertEquals(1, allCallsites.size()); [EOL]     Node callsiteNode = allCallsites.iterator().next().getAstNode(); [EOL]     assertEquals(Token.CALL, callsiteNode.getType()); [EOL]     assertEquals("A", callsiteNode.getFirstChild().getString()); [EOL] } <line_num>: 339,352
public void testGetAllCallsitesContainsLiteralSite() { [EOL]     String source = "function A(){(function(a){})();}\n"; [EOL]     CallGraph callgraph = compileAndRunBackward(source); [EOL]     Collection<CallGraph.Callsite> allCallsites = callgraph.getAllCallsites(); [EOL]     assertEquals(1, allCallsites.size()); [EOL]     Node callsiteNode = allCallsites.iterator().next().getAstNode(); [EOL]     assertEquals(Token.CALL, callsiteNode.getType()); [EOL]     assertEquals(Token.FUNCTION, callsiteNode.getFirstChild().getType()); [EOL] } <line_num>: 354,365
public void testGetAllCallsitesContainsConstructorSite() { [EOL]     String source = "function A(){}\n" + "function B(){new A();}\n"; [EOL]     CallGraph callgraph = compileAndRunBackward(source); [EOL]     Collection<CallGraph.Callsite> allCallsites = callgraph.getAllCallsites(); [EOL]     assertEquals(1, allCallsites.size()); [EOL]     Node callsiteNode = allCallsites.iterator().next().getAstNode(); [EOL]     assertEquals(Token.NEW, callsiteNode.getType()); [EOL]     assertEquals("A", callsiteNode.getFirstChild().getString()); [EOL] } <line_num>: 367,380
@Override [EOL] public boolean traverseEdge(Function callee, Callsite callsite, Function caller) { [EOL]     boolean changed; [EOL]     if (poisonedFunctions.contains(callee)) { [EOL]         changed = poisonedFunctions.add(caller); [EOL]     } else { [EOL]         changed = false; [EOL]     } [EOL]     return changed; [EOL] } <line_num>: 414,426
public void testGetDirectedGraph_backwardOnBackward() { [EOL]     String source = "function A(){};\n" + "function B(){ExternalFunction(6); C(); D();}\n" + "function C(){B(); A();};\n" + "function D(){A();};\n" + "function E(){C()};\n" + "A();\n"; [EOL]     CallGraph callgraph = compileAndRunBackward(source); [EOL]     final Set<Function> poisonedFunctions = Sets.newHashSet(); [EOL]     for (Callsite callsite : callgraph.getAllCallsites()) { [EOL]         if (callsite.hasExternTarget()) { [EOL]             poisonedFunctions.add(callsite.getContainingFunction()); [EOL]         } [EOL]     } [EOL]     EdgeCallback<CallGraph.Function, CallGraph.Callsite> edgeCallback = new EdgeCallback<CallGraph.Function, CallGraph.Callsite>() { [EOL]  [EOL]         @Override [EOL]         public boolean traverseEdge(Function callee, Callsite callsite, Function caller) { [EOL]             boolean changed; [EOL]             if (poisonedFunctions.contains(callee)) { [EOL]                 changed = poisonedFunctions.add(caller); [EOL]             } else { [EOL]                 changed = false; [EOL]             } [EOL]             return changed; [EOL]         } [EOL]     }; [EOL]     FixedPointGraphTraversal.newTraversal(edgeCallback).computeFixedPoint(callgraph.getBackwardDirectedGraph()); [EOL]     assertEquals(3, poisonedFunctions.size()); [EOL]     assertTrue(poisonedFunctions.contains(callgraph.getUniqueFunctionWithName("B"))); [EOL]     assertTrue(poisonedFunctions.contains(callgraph.getUniqueFunctionWithName("C"))); [EOL]     assertTrue(poisonedFunctions.contains(callgraph.getUniqueFunctionWithName("E"))); [EOL] } <line_num>: 386,441
@Override [EOL] public boolean traverseEdge(Function callee, Callsite callsite, Function caller) { [EOL]     boolean changed; [EOL]     if (poisonedFunctions.contains(callee)) { [EOL]         changed = poisonedFunctions.add(caller); [EOL]     } else { [EOL]         changed = false; [EOL]     } [EOL]     return changed; [EOL] } <line_num>: 475,487
public void testGetDirectedGraph_backwardOnForward() { [EOL]     String source = "function A(){};\n" + "function B(){ExternalFunction(6); C(); D();}\n" + "function C(){B(); A();};\n" + "function D(){A();};\n" + "function E(){C()};\n" + "A();\n"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     final Set<Function> poisonedFunctions = Sets.newHashSet(); [EOL]     for (Callsite callsite : callgraph.getAllCallsites()) { [EOL]         if (callsite.hasExternTarget()) { [EOL]             poisonedFunctions.add(callsite.getContainingFunction()); [EOL]         } [EOL]     } [EOL]     EdgeCallback<CallGraph.Function, CallGraph.Callsite> edgeCallback = new EdgeCallback<CallGraph.Function, CallGraph.Callsite>() { [EOL]  [EOL]         @Override [EOL]         public boolean traverseEdge(Function callee, Callsite callsite, Function caller) { [EOL]             boolean changed; [EOL]             if (poisonedFunctions.contains(callee)) { [EOL]                 changed = poisonedFunctions.add(caller); [EOL]             } else { [EOL]                 changed = false; [EOL]             } [EOL]             return changed; [EOL]         } [EOL]     }; [EOL]     FixedPointGraphTraversal.newTraversal(edgeCallback).computeFixedPoint(callgraph.getBackwardDirectedGraph()); [EOL]     assertEquals(3, poisonedFunctions.size()); [EOL]     assertTrue(poisonedFunctions.contains(callgraph.getUniqueFunctionWithName("B"))); [EOL]     assertTrue(poisonedFunctions.contains(callgraph.getUniqueFunctionWithName("C"))); [EOL]     assertTrue(poisonedFunctions.contains(callgraph.getUniqueFunctionWithName("E"))); [EOL] } <line_num>: 447,502
@Override [EOL] public boolean traverseEdge(Function caller, Callsite callsite, Function callee) { [EOL]     boolean changed; [EOL]     if (reachableFunctions.contains(caller)) { [EOL]         changed = reachableFunctions.add(callee); [EOL]     } else { [EOL]         changed = false; [EOL]     } [EOL]     return changed; [EOL] } <line_num>: 536,548
public void testGetDirectedGraph_forwardOnForward() { [EOL]     String source = "function A(){B()};\n" + "function B(){C();D()}\n" + "function C(){B()};\n" + "function D(){};\n" + "function E(){C()};\n" + "function X(){Y()};\n" + "function Y(){Z()};\n" + "function Z(){};" + "B();\n"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     final Set<Function> reachableFunctions = Sets.newHashSet(); [EOL]     reachableFunctions.add(callgraph.getMainFunction()); [EOL]     reachableFunctions.add(callgraph.getUniqueFunctionWithName("X")); [EOL]     EdgeCallback<CallGraph.Function, CallGraph.Callsite> edgeCallback = new EdgeCallback<CallGraph.Function, CallGraph.Callsite>() { [EOL]  [EOL]         @Override [EOL]         public boolean traverseEdge(Function caller, Callsite callsite, Function callee) { [EOL]             boolean changed; [EOL]             if (reachableFunctions.contains(caller)) { [EOL]                 changed = reachableFunctions.add(callee); [EOL]             } else { [EOL]                 changed = false; [EOL]             } [EOL]             return changed; [EOL]         } [EOL]     }; [EOL]     FixedPointGraphTraversal.newTraversal(edgeCallback).computeFixedPoint(callgraph.getForwardDirectedGraph()); [EOL]     assertEquals(7, reachableFunctions.size()); [EOL]     assertTrue(reachableFunctions.contains(callgraph.getUniqueFunctionWithName("B"))); [EOL]     assertTrue(reachableFunctions.contains(callgraph.getUniqueFunctionWithName("C"))); [EOL]     assertTrue(reachableFunctions.contains(callgraph.getUniqueFunctionWithName("D"))); [EOL]     assertTrue(reachableFunctions.contains(callgraph.getUniqueFunctionWithName("X"))); [EOL]     assertTrue(reachableFunctions.contains(callgraph.getUniqueFunctionWithName("Y"))); [EOL]     assertTrue(reachableFunctions.contains(callgraph.getUniqueFunctionWithName("Z"))); [EOL]     assertTrue(reachableFunctions.contains(callgraph.getMainFunction())); [EOL]     assertFalse(reachableFunctions.contains(callgraph.getUniqueFunctionWithName("A"))); [EOL]     assertFalse(reachableFunctions.contains(callgraph.getUniqueFunctionWithName("E"))); [EOL] } <line_num>: 508,578
@Override [EOL] public boolean traverseEdge(Function caller, Callsite callsite, Function callee) { [EOL]     boolean changed; [EOL]     if (reachableFunctions.contains(caller)) { [EOL]         changed = reachableFunctions.add(callee); [EOL]     } else { [EOL]         changed = false; [EOL]     } [EOL]     return changed; [EOL] } <line_num>: 612,624
public void testGetDirectedGraph_forwardOnBackward() { [EOL]     String source = "function A(){B()};\n" + "function B(){C();D()}\n" + "function C(){B()};\n" + "function D(){};\n" + "function E(){C()};\n" + "function X(){Y()};\n" + "function Y(){Z()};\n" + "function Z(){};" + "B();\n"; [EOL]     CallGraph callgraph = compileAndRunBackward(source); [EOL]     final Set<Function> reachableFunctions = Sets.newHashSet(); [EOL]     reachableFunctions.add(callgraph.getMainFunction()); [EOL]     reachableFunctions.add(callgraph.getUniqueFunctionWithName("X")); [EOL]     EdgeCallback<CallGraph.Function, CallGraph.Callsite> edgeCallback = new EdgeCallback<CallGraph.Function, CallGraph.Callsite>() { [EOL]  [EOL]         @Override [EOL]         public boolean traverseEdge(Function caller, Callsite callsite, Function callee) { [EOL]             boolean changed; [EOL]             if (reachableFunctions.contains(caller)) { [EOL]                 changed = reachableFunctions.add(callee); [EOL]             } else { [EOL]                 changed = false; [EOL]             } [EOL]             return changed; [EOL]         } [EOL]     }; [EOL]     FixedPointGraphTraversal.newTraversal(edgeCallback).computeFixedPoint(callgraph.getForwardDirectedGraph()); [EOL]     assertEquals(7, reachableFunctions.size()); [EOL]     assertTrue(reachableFunctions.contains(callgraph.getUniqueFunctionWithName("B"))); [EOL]     assertTrue(reachableFunctions.contains(callgraph.getUniqueFunctionWithName("C"))); [EOL]     assertTrue(reachableFunctions.contains(callgraph.getUniqueFunctionWithName("D"))); [EOL]     assertTrue(reachableFunctions.contains(callgraph.getUniqueFunctionWithName("X"))); [EOL]     assertTrue(reachableFunctions.contains(callgraph.getUniqueFunctionWithName("Y"))); [EOL]     assertTrue(reachableFunctions.contains(callgraph.getUniqueFunctionWithName("Z"))); [EOL]     assertTrue(reachableFunctions.contains(callgraph.getMainFunction())); [EOL]     assertFalse(reachableFunctions.contains(callgraph.getUniqueFunctionWithName("A"))); [EOL]     assertFalse(reachableFunctions.contains(callgraph.getUniqueFunctionWithName("E"))); [EOL] } <line_num>: 584,654
public void testFunctionIsMain() { [EOL]     String source = "function A(){};\n" + "A();\n"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     CallGraph.Function mainFunction = callgraph.getMainFunction(); [EOL]     assertTrue(mainFunction.isMain()); [EOL]     assertNotNull(mainFunction.getBodyNode()); [EOL]     assertTrue(mainFunction.getBodyNode().isBlock()); [EOL]     CallGraph.Function functionA = callgraph.getUniqueFunctionWithName("A"); [EOL]     assertFalse(functionA.isMain()); [EOL] } <line_num>: 656,672
public void testFunctionGetAstNode() { [EOL]     String source = "function A(){};\n" + "A();\n"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     CallGraph.Function mainFunction = callgraph.getMainFunction(); [EOL]     assertTrue(mainFunction.getAstNode().isBlock()); [EOL]     CallGraph.Function functionA = callgraph.getUniqueFunctionWithName("A"); [EOL]     assertTrue(functionA.getAstNode().isFunction()); [EOL]     assertEquals("A", NodeUtil.getFunctionName(functionA.getAstNode())); [EOL] } <line_num>: 674,691
public void testFunctionGetBodyNode() { [EOL]     String source = "function A(){};\n" + "A();\n"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     CallGraph.Function mainFunction = callgraph.getMainFunction(); [EOL]     assertEquals(mainFunction.getAstNode(), mainFunction.getBodyNode()); [EOL]     CallGraph.Function functionA = callgraph.getUniqueFunctionWithName("A"); [EOL]     assertTrue(functionA.getBodyNode().isBlock()); [EOL]     assertEquals(NodeUtil.getFunctionBody(functionA.getAstNode()), functionA.getBodyNode()); [EOL] } <line_num>: 693,711
public void testFunctionGetName() { [EOL]     String source = "function A(){};\n" + "A();\n"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     CallGraph.Function mainFunction = callgraph.getMainFunction(); [EOL]     assertEquals(CallGraph.MAIN_FUNCTION_NAME, mainFunction.getName()); [EOL]     CallGraph.Function functionA = callgraph.getUniqueFunctionWithName("A"); [EOL]     assertEquals(NodeUtil.getFunctionName(functionA.getAstNode()), functionA.getName()); [EOL] } <line_num>: 713,730
public void testFunctionGetCallsitesInFunction() { [EOL]     String source = "function A(){};\n" + "function B(){A()};\n" + "A();\n" + "B();\n"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     CallGraph.Function mainFunction = callgraph.getMainFunction(); [EOL]     List<String> callsiteNamesInMain = getCallsiteTargetNames(mainFunction.getCallsitesInFunction()); [EOL]     assertEquals(2, callsiteNamesInMain.size()); [EOL]     assertTrue(callsiteNamesInMain.contains("A")); [EOL]     assertTrue(callsiteNamesInMain.contains("B")); [EOL]     CallGraph.Function functionA = callgraph.getUniqueFunctionWithName("A"); [EOL]     assertEquals(0, functionA.getCallsitesInFunction().size()); [EOL]     CallGraph.Function functionB = callgraph.getUniqueFunctionWithName("B"); [EOL]     List<String> callsiteNamesInB = getCallsiteTargetNames(functionB.getCallsitesInFunction()); [EOL]     assertEquals(1, callsiteNamesInB.size()); [EOL]     assertTrue(callsiteNamesInMain.contains("A")); [EOL] } <line_num>: 732,761
public void testFunctionGetCallsitesInFunction_ignoreInnerFunction() { [EOL]     String source = "function A(){var B = function(){C();}};\n" + "function C(){};\n"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     CallGraph.Function functionA = callgraph.getUniqueFunctionWithName("A"); [EOL]     assertEquals(0, functionA.getCallsitesInFunction().size()); [EOL] } <line_num>: 763,773
public void testFunctionGetCallsitesPossiblyTargetingFunction() { [EOL]     String source = "function A(){B()};\n" + "function B(){C();C();};\n" + "function C(){C()};\n" + "A();\n"; [EOL]     CallGraph callgraph = compileAndRunBackward(source); [EOL]     Function main = callgraph.getMainFunction(); [EOL]     Function functionA = callgraph.getUniqueFunctionWithName("A"); [EOL]     Function functionB = callgraph.getUniqueFunctionWithName("B"); [EOL]     Function functionC = callgraph.getUniqueFunctionWithName("C"); [EOL]     assertEquals(0, main.getCallsitesPossiblyTargetingFunction().size()); [EOL]     Collection<Callsite> callsitesTargetingA = functionA.getCallsitesPossiblyTargetingFunction(); [EOL]     assertEquals(1, callsitesTargetingA.size()); [EOL]     assertEquals(main, callsitesTargetingA.iterator().next().getContainingFunction()); [EOL]     Collection<Callsite> callsitesTargetingB = functionB.getCallsitesPossiblyTargetingFunction(); [EOL]     assertEquals(1, callsitesTargetingB.size()); [EOL]     assertEquals(functionA, callsitesTargetingB.iterator().next().getContainingFunction()); [EOL]     Collection<Callsite> callsitesTargetingC = functionC.getCallsitesPossiblyTargetingFunction(); [EOL]     assertEquals(3, callsitesTargetingC.size()); [EOL]     Collection<Callsite> expectedFunctionsCallingC = Sets.newHashSet(functionB.getCallsitesInFunction()); [EOL]     expectedFunctionsCallingC.addAll(functionC.getCallsitesInFunction()); [EOL]     assertTrue(callsitesTargetingC.containsAll(expectedFunctionsCallingC)); [EOL] } <line_num>: 775,818
public void testFunctionGetCallsitesInFunction_newIsCallsite() { [EOL]     String source = "function A(){};\n" + "function C(){new A()};\n"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     CallGraph.Function functionC = callgraph.getUniqueFunctionWithName("C"); [EOL]     assertEquals(1, functionC.getCallsitesInFunction().size()); [EOL] } <line_num>: 820,830
public void testFunctionGetIsAliased() { [EOL]     String source = "function A(){};\n" + "var ns = {};\n" + "ns.B = function() {};\n" + "var C = function() {}\n" + "var D = function() {}\n" + "var aliasA = A;\n" + "var aliasB = ns.B;\n" + "var aliasC = C;\n" + "D();"; [EOL]     compileAndRunForward(source); [EOL]     assertFunctionAliased(true, "A"); [EOL]     assertFunctionAliased(true, "ns.B"); [EOL]     assertFunctionAliased(true, "C"); [EOL]     assertFunctionAliased(false, "D"); [EOL]     source = "function A(){};\n" + "var ns = {};\n" + "ns.B = function() {};\n" + "var C = function() {}\n" + "ns.D = function() {}\n" + "var aliasA;\n" + "aliasA = A;\n" + "var aliasB = {};\n" + "aliasB.foo = ns.B;\n" + "var aliasC;\n" + "aliasC = C;\n" + "ns.D();"; [EOL]     compileAndRunForward(source); [EOL]     assertFunctionAliased(true, "A"); [EOL]     assertFunctionAliased(true, "ns.B"); [EOL]     assertFunctionAliased(true, "C"); [EOL]     assertFunctionAliased(false, "ns.D"); [EOL]     source = "function A(){};\n" + "var ns = {};\n" + "ns.B = function() {};\n" + "var C = function() {}\n" + "function D() {}\n" + "var foo = function(a) {}\n" + "foo(A);\n" + "foo(ns.B)\n" + "foo(C);\n" + "D();"; [EOL]     compileAndRunForward(source); [EOL]     assertFunctionAliased(true, "A"); [EOL]     assertFunctionAliased(true, "ns.B"); [EOL]     assertFunctionAliased(true, "C"); [EOL]     assertFunctionAliased(false, "D"); [EOL]     source = "function A(){};\n" + "var ns = {};\n" + "ns.B = function() {};\n" + "var C = function() {}\n" + "A();\n" + "ns.B();\n" + "C();\n"; [EOL]     compileAndRunForward(source); [EOL]     assertFunctionAliased(false, "A"); [EOL]     assertFunctionAliased(false, "ns.B"); [EOL]     assertFunctionAliased(false, "C"); [EOL]     source = "function A(){};\n" + "var ns = {};\n" + "ns.B = function() {};\n" + "var C = function() {}\n" + "A.foo;\n" + "ns.B.prototype;\n" + "C[0];\n"; [EOL]     compileAndRunForward(source); [EOL]     assertFunctionAliased(false, "A"); [EOL]     assertFunctionAliased(false, "ns.B"); [EOL]     assertFunctionAliased(false, "C"); [EOL] } <line_num>: 832,925
public void testFunctionGetIsExposedToCallOrApply() { [EOL]     String source = "function A(){};\n" + "function B(){};\n" + "function C(){};\n" + "var x;\n" + "A.call(x);\n" + "B.apply(x);\n" + "C();\n"; [EOL]     CallGraph callGraph = compileAndRunForward(source); [EOL]     Function functionA = callGraph.getUniqueFunctionWithName("A"); [EOL]     Function functionB = callGraph.getUniqueFunctionWithName("B"); [EOL]     Function functionC = callGraph.getUniqueFunctionWithName("C"); [EOL]     assertTrue(functionA.isExposedToCallOrApply()); [EOL]     assertTrue(functionB.isExposedToCallOrApply()); [EOL]     assertFalse(functionC.isExposedToCallOrApply()); [EOL] } <line_num>: 927,947
public void testCallsiteGetAstNode() { [EOL]     String source = "function A(){B()};\n" + "function B(){};\n"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     Function functionA = callgraph.getUniqueFunctionWithName("A"); [EOL]     Callsite callToB = functionA.getCallsitesInFunction().iterator().next(); [EOL]     assertTrue(callToB.getAstNode().isCall()); [EOL] } <line_num>: 949,960
public void testCallsiteGetContainingFunction() { [EOL]     String source = "function A(){B()};\n" + "function B(){};\n" + "A();\n"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     Function mainFunction = callgraph.getMainFunction(); [EOL]     Callsite callToA = mainFunction.getCallsitesInFunction().iterator().next(); [EOL]     assertEquals(mainFunction, callToA.getContainingFunction()); [EOL]     Function functionA = callgraph.getUniqueFunctionWithName("A"); [EOL]     Callsite callToB = functionA.getCallsitesInFunction().iterator().next(); [EOL]     assertEquals(functionA, callToB.getContainingFunction()); [EOL] } <line_num>: 962,977
public void testCallsiteGetKnownTargets() { [EOL]     String source = "function A(){B()};\n" + "function B(){};\n" + "A();\n"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     Function mainFunction = callgraph.getMainFunction(); [EOL]     Function functionA = callgraph.getUniqueFunctionWithName("A"); [EOL]     Function functionB = callgraph.getUniqueFunctionWithName("B"); [EOL]     Callsite callInMain = mainFunction.getCallsitesInFunction().iterator().next(); [EOL]     Collection<Function> targetsOfCallInMain = callInMain.getPossibleTargets(); [EOL]     assertEquals(1, targetsOfCallInMain.size()); [EOL]     assertTrue(targetsOfCallInMain.contains(functionA)); [EOL]     Callsite callInA = functionA.getCallsitesInFunction().iterator().next(); [EOL]     Collection<Function> targetsOfCallInA = callInA.getPossibleTargets(); [EOL]     assertTrue(targetsOfCallInA.contains(functionB)); [EOL] } <line_num>: 979,1003
public void testCallsiteHasUnknownTarget() { [EOL]     String source = "var A = externalnamespace.prop;\n" + "function B(){A();};\n" + "B();\n"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     Function mainFunction = callgraph.getMainFunction(); [EOL]     Function functionB = callgraph.getUniqueFunctionWithName("B"); [EOL]     Callsite callInMain = mainFunction.getCallsitesInFunction().iterator().next(); [EOL]     assertFalse(callInMain.hasUnknownTarget()); [EOL]     assertEquals("B", callInMain.getAstNode().getFirstChild().getString()); [EOL]     Callsite callInB = functionB.getCallsitesInFunction().iterator().next(); [EOL]     assertTrue(callInB.hasUnknownTarget()); [EOL]     assertEquals(0, callInB.getPossibleTargets().size()); [EOL] } <line_num>: 1005,1028
public void testCallsiteHasExternTarget() { [EOL]     String source = "var A = function(){}\n" + "function B(){ExternalFunction(6);};\n" + "A();\n"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     Function mainFunction = callgraph.getMainFunction(); [EOL]     Function functionB = callgraph.getUniqueFunctionWithName("B"); [EOL]     Callsite callInMain = mainFunction.getCallsitesInFunction().iterator().next(); [EOL]     assertFalse(callInMain.hasExternTarget()); [EOL]     Callsite callInB = functionB.getCallsitesInFunction().iterator().next(); [EOL]     assertEquals("ExternalFunction", callInB.getAstNode().getFirstChild().getString()); [EOL]     assertTrue(callInB.hasExternTarget()); [EOL]     assertEquals(0, callInB.getPossibleTargets().size()); [EOL] } <line_num>: 1030,1055
public void testThrowForBackwardOpOnForwardGraph() { [EOL]     String source = "function A(){B()};\n" + "function B(){C();C();};\n" + "function C(){C()};\n" + "A();\n"; [EOL]     CallGraph callgraph = compileAndRunForward(source); [EOL]     Function functionA = callgraph.getUniqueFunctionWithName("A"); [EOL]     UnsupportedOperationException caughtException = null; [EOL]     try { [EOL]         functionA.getCallsitesPossiblyTargetingFunction(); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         caughtException = e; [EOL]     } [EOL]     assertNotNull(caughtException); [EOL] } <line_num>: 1057,1077
public void testThrowForForwardOpOnBackwardGraph() { [EOL]     String source = "function A(){B()};\n" + "function B(){};\n" + "A();\n"; [EOL]     CallGraph callgraph = compileAndRunBackward(source); [EOL]     Function mainFunction = callgraph.getMainFunction(); [EOL]     Function functionA = callgraph.getUniqueFunctionWithName("A"); [EOL]     Callsite callInMain = mainFunction.getCallsitesInFunction().iterator().next(); [EOL]     UnsupportedOperationException caughtException = null; [EOL]     try { [EOL]         callInMain.getPossibleTargets(); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         return; [EOL]     } [EOL]     fail(); [EOL] } <line_num>: 1079,1101
private List<String> getCallsiteTargetNames(Collection<Callsite> callsites) { [EOL]     List<String> result = Lists.newArrayList(); [EOL]     for (Callsite callsite : callsites) { [EOL]         Node targetExpressionNode = callsite.getAstNode().getFirstChild(); [EOL]         if (targetExpressionNode.isName()) { [EOL]             result.add(targetExpressionNode.getString()); [EOL]         } else { [EOL]             throw new IllegalStateException("Called getCallsiteTargetNames() on " + "a complex callsite."); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1114,1129
private void assertFunctionAliased(boolean aliased, String name) { [EOL]     Function function = currentProcessor.getUniqueFunctionWithName(name); [EOL]     assertEquals(aliased, function.isAliased()); [EOL] } <line_num>: 1131,1135
private CallGraph compileAndRunBackward(String js) { [EOL]     return compileAndRun(SHARED_EXTERNS, js, false, true); [EOL] } <line_num>: 1137,1139
private CallGraph compileAndRunForward(String js) { [EOL]     return compileAndRun(SHARED_EXTERNS, js, true, false); [EOL] } <line_num>: 1141,1143
private CallGraph compileAndRun(String externs, String js, boolean forward, boolean backward) { [EOL]     createBackwardCallGraph = backward; [EOL]     createForwardCallGraph = forward; [EOL]     testSame(externs, js, null); [EOL]     return currentProcessor; [EOL] } <line_num>: 1145,1156
