private CollectMessages(Compiler compiler) { [EOL]     super(compiler, true, Style.getFromParams(true, allowLegacyMessages), null); [EOL] } <line_num>: 562,565
private DummyJsVisitor(Style style) { [EOL]     super(null, true, style, null); [EOL] } <line_num>: 576,578
@Override [EOL] protected void setUp() throws Exception { [EOL]     messages = Lists.newLinkedList(); [EOL]     allowLegacyMessages = true; [EOL] } <line_num>: 44,48
public void testJsMessageOnVar() { [EOL]     extractMessagesSafely("/** @desc Hello */ var MSG_HELLO = goog.getMsg('a')"); [EOL]     assertEquals(0, compiler.getWarningCount()); [EOL]     assertEquals(1, messages.size()); [EOL]     JsMessage msg = messages.get(0); [EOL]     assertEquals("MSG_HELLO", msg.getKey()); [EOL]     assertEquals("Hello", msg.getDesc()); [EOL] } <line_num>: 50,59
public void testJsMessageOnProperty() { [EOL]     extractMessagesSafely("/** @desc a */ " + "pint.sub.MSG_MENU_MARK_AS_UNREAD = goog.getMsg('a')"); [EOL]     assertEquals(0, compiler.getWarningCount()); [EOL]     assertEquals(1, messages.size()); [EOL]     JsMessage msg = messages.get(0); [EOL]     assertEquals("MSG_MENU_MARK_AS_UNREAD", msg.getKey()); [EOL]     assertEquals("a", msg.getDesc()); [EOL] } <line_num>: 61,70
public void testOrphanedJsMessage() { [EOL]     extractMessagesSafely("goog.getMsg('a')"); [EOL]     assertEquals(1, compiler.getWarningCount()); [EOL]     assertEquals(0, messages.size()); [EOL]     JSError warn = compiler.getWarnings()[0]; [EOL]     assertEquals(JsMessageVisitor.MESSAGE_NODE_IS_ORPHANED, warn.getType()); [EOL] } <line_num>: 72,79
public void testMessageWithoutDescription() { [EOL]     extractMessagesSafely("var MSG_HELLO = goog.getMsg('a')"); [EOL]     assertEquals(1, compiler.getWarningCount()); [EOL]     assertEquals(1, messages.size()); [EOL]     JsMessage msg = messages.get(0); [EOL]     assertEquals("MSG_HELLO", msg.getKey()); [EOL]     assertEquals(JsMessageVisitor.MESSAGE_HAS_NO_DESCRIPTION, compiler.getWarnings()[0].getType()); [EOL] } <line_num>: 81,91
public void testIncorrectMessageReporting() { [EOL]     extractMessages("var MSG_HELLO = goog.getMsg('a' + + 'b')"); [EOL]     assertEquals(1, compiler.getErrorCount()); [EOL]     assertEquals(0, compiler.getWarningCount()); [EOL]     assertEquals(0, messages.size()); [EOL]     JSError mailformedTreeError = compiler.getErrors()[0]; [EOL]     assertEquals(JsMessageVisitor.MESSAGE_TREE_MALFORMED, mailformedTreeError.getType()); [EOL]     assertEquals("Message parse tree malformed. " + "STRING or ADD node expected; found: POS", mailformedTreeError.description); [EOL] } <line_num>: 93,105
public void testEmptyMessage() { [EOL]     extractMessagesSafely("var MSG_EMPTY = '';"); [EOL]     assertEquals(1, messages.size()); [EOL]     JsMessage msg = messages.get(0); [EOL]     assertEquals("MSG_EMPTY", msg.getKey()); [EOL]     assertEquals("", msg.toString()); [EOL] } <line_num>: 107,115
public void testConcatOfStrings() { [EOL]     extractMessagesSafely("var MSG_NOTEMPTY = 'aa' + 'bbb' \n + ' ccc';"); [EOL]     assertEquals(1, messages.size()); [EOL]     JsMessage msg = messages.get(0); [EOL]     assertEquals("MSG_NOTEMPTY", msg.getKey()); [EOL]     assertEquals("aabbb ccc", msg.toString()); [EOL] } <line_num>: 117,124
public void testLegacyFormatDescription() { [EOL]     extractMessagesSafely("var MSG_SILLY = 'silly test message';\n" + "var MSG_SILLY_HELP = 'help text';"); [EOL]     assertEquals(1, messages.size()); [EOL]     JsMessage msg = messages.get(0); [EOL]     assertEquals("MSG_SILLY", msg.getKey()); [EOL]     assertEquals("help text", msg.getDesc()); [EOL]     assertEquals("silly test message", msg.toString()); [EOL] } <line_num>: 126,135
public void testLegacyFormatParametizedFunction() { [EOL]     extractMessagesSafely("var MSG_SILLY = function(one, two) {" + "  return one + ', ' + two + ', buckle my shoe';" + "};"); [EOL]     assertEquals(1, messages.size()); [EOL]     JsMessage msg = messages.get(0); [EOL]     assertEquals("MSG_SILLY", msg.getKey()); [EOL]     assertEquals(null, msg.getDesc()); [EOL]     assertEquals("{$one}, {$two}, buckle my shoe", msg.toString()); [EOL] } <line_num>: 137,147
public void testLegacyMessageWithDescAnnotation() { [EOL]     extractMessagesSafely("/** @desc The description */ var MSG_A = 'The Message';"); [EOL]     assertEquals(1, messages.size()); [EOL]     assertEquals(1, compiler.getWarningCount()); [EOL]     JsMessage msg = messages.get(0); [EOL]     assertEquals("MSG_A", msg.getKey()); [EOL]     assertEquals("The Message", msg.toString()); [EOL]     assertEquals("The description", msg.getDesc()); [EOL] } <line_num>: 149,161
public void testLegacyMessageWithDescAnnotationAndHelpVar() { [EOL]     extractMessagesSafely("var MSG_A_HELP = 'This is a help var';\n" + "/** @desc The description in @desc*/ var MSG_A = 'The Message';"); [EOL]     assertEquals(1, messages.size()); [EOL]     assertEquals(1, compiler.getWarningCount()); [EOL]     JsMessage msg = messages.get(0); [EOL]     assertEquals("MSG_A", msg.getKey()); [EOL]     assertEquals("The Message", msg.toString()); [EOL]     assertEquals("The description in @desc", msg.getDesc()); [EOL] } <line_num>: 163,176
public void testClosureMessageWithHelpPostfix() { [EOL]     extractMessagesSafely("/** @desc help text */\n" + "var MSG_FOO_HELP = goog.getMsg('Help!');"); [EOL]     assertEquals(1, messages.size()); [EOL]     JsMessage msg = messages.get(0); [EOL]     assertEquals("MSG_FOO_HELP", msg.getKey()); [EOL]     assertEquals("help text", msg.getDesc()); [EOL]     assertEquals("Help!", msg.toString()); [EOL] } <line_num>: 178,187
public void testClosureMessageWithoutGoogGetmsg() { [EOL]     allowLegacyMessages = false; [EOL]     extractMessages("var MSG_FOO_HELP = 'I am a bad message';"); [EOL]     assertEquals(1, messages.size()); [EOL]     assertEquals(1, compiler.getErrors().length); [EOL]     JSError error = compiler.getErrors()[0]; [EOL]     assertEquals(JsMessageVisitor.MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, error.getType()); [EOL] } <line_num>: 189,199
public void testClosureFormatParametizedFunction() { [EOL]     extractMessagesSafely("/** @desc help text */" + "var MSG_SILLY = goog.getMsg('{$adjective} ' + 'message', " + "{'adjective': 'silly'});"); [EOL]     assertEquals(1, messages.size()); [EOL]     JsMessage msg = messages.get(0); [EOL]     assertEquals("MSG_SILLY", msg.getKey()); [EOL]     assertEquals("help text", msg.getDesc()); [EOL]     assertEquals("{$adjective} message", msg.toString()); [EOL] } <line_num>: 201,211
public void testHugeMessage() { [EOL]     extractMessagesSafely("/**" + " * @desc A message with lots of stuff.\n" + " * @hidden\n" + " */" + "var MSG_HUGE = goog.getMsg(" + "    '{$startLink_1}Google{$endLink}' +" + "    '{$startLink_2}blah{$endLink}{$boo}{$foo_001}{$boo}' +" + "    '{$foo_002}{$xxx_001}{$image}{$image_001}{$xxx_002}'," + "    {'startLink_1': '<a href=http://www.google.com/>'," + "     'endLink': '</a>'," + "     'startLink_2': '<a href=\"' + opt_data.url + '\">'," + "     'boo': opt_data.boo," + "     'foo_001': opt_data.foo," + "     'foo_002': opt_data.boo.foo," + "     'xxx_001': opt_data.boo + opt_data.foo," + "     'image': htmlTag7," + "     'image_001': opt_data.image," + "     'xxx_002': foo.callWithOnlyTopLevelKeys(" + "         bogusFn, opt_data, null, 'bogusKey1'," + "         opt_data.moo, 'bogusKey2', param10)});"); [EOL]     assertEquals(1, messages.size()); [EOL]     JsMessage msg = messages.get(0); [EOL]     assertEquals("MSG_HUGE", msg.getKey()); [EOL]     assertEquals("A message with lots of stuff.", msg.getDesc()); [EOL]     assertTrue(msg.isHidden()); [EOL]     assertEquals("{$startLink_1}Google{$endLink}{$startLink_2}blah{$endLink}" + "{$boo}{$foo_001}{$boo}{$foo_002}{$xxx_001}{$image}" + "{$image_001}{$xxx_002}", msg.toString()); [EOL] } <line_num>: 213,243
public void testUnnamedGoogleMessage() { [EOL]     extractMessagesSafely("var MSG_UNNAMED_2 = goog.getMsg('Hullo');"); [EOL]     assertEquals(1, messages.size()); [EOL]     JsMessage msg = messages.get(0); [EOL]     assertEquals(null, msg.getDesc()); [EOL]     assertEquals("MSG_16LJMYKCXT84X", msg.getKey()); [EOL]     assertEquals("MSG_16LJMYKCXT84X", msg.getId()); [EOL] } <line_num>: 245,253
public void testEmptyTextMessage() { [EOL]     extractMessagesSafely("/** @desc text */ var MSG_FOO = goog.getMsg('');"); [EOL]     assertEquals(1, messages.size()); [EOL]     assertEquals(1, compiler.getWarningCount()); [EOL]     assertEquals("Message value of MSG_FOO is just an empty string. " + "Empty messages are forbidden.", compiler.getWarnings()[0].description); [EOL] } <line_num>: 255,263
public void testEmptyTextComplexMessage() { [EOL]     extractMessagesSafely("/** @desc text */ var MSG_BAR = goog.getMsg(" + "'' + '' + ''     + ''\n+'');"); [EOL]     assertEquals(1, messages.size()); [EOL]     assertEquals(1, compiler.getWarningCount()); [EOL]     assertEquals("Message value of MSG_BAR is just an empty string. " + "Empty messages are forbidden.", compiler.getWarnings()[0].description); [EOL] } <line_num>: 265,274
public void testMessageIsNoUnnamed() { [EOL]     extractMessagesSafely("var MSG_UNNAMED_ITEM = goog.getMsg('Hullo');"); [EOL]     assertEquals(1, messages.size()); [EOL]     JsMessage msg = messages.get(0); [EOL]     assertEquals("MSG_UNNAMED_ITEM", msg.getKey()); [EOL]     assertFalse(msg.isHidden()); [EOL] } <line_num>: 276,283
public void testMsgVarWithoutAssignment() { [EOL]     extractMessages("var MSG_SILLY;"); [EOL]     assertEquals(1, compiler.getErrors().length); [EOL]     JSError error = compiler.getErrors()[0]; [EOL]     assertEquals(JsMessageVisitor.MESSAGE_HAS_NO_VALUE, error.getType()); [EOL] } <line_num>: 285,291
public void testRegularVarWithoutAssignment() { [EOL]     extractMessagesSafely("var SILLY;"); [EOL]     assertTrue(messages.isEmpty()); [EOL] } <line_num>: 293,297
public void itIsNotImplementedYet_testMsgPropertyWithoutAssignment() { [EOL]     extractMessages("goog.message.MSG_SILLY_PROP;"); [EOL]     assertEquals(1, compiler.getErrors().length); [EOL]     JSError error = compiler.getErrors()[0]; [EOL]     assertEquals("Message MSG_SILLY_PROP has no value", error.description); [EOL] } <line_num>: 299,305
public void testMsgVarWithIncorrectRightSide() { [EOL]     extractMessages("var MSG_SILLY = 0;"); [EOL]     assertEquals(1, compiler.getErrors().length); [EOL]     JSError error = compiler.getErrors()[0]; [EOL]     assertEquals("Message parse tree malformed. Cannot parse value of " + "message MSG_SILLY", error.description); [EOL] } <line_num>: 307,314
public void testIncorrectMessage() { [EOL]     extractMessages("DP_DatePicker.MSG_DATE_SELECTION = {};"); [EOL]     assertEquals(0, messages.size()); [EOL]     assertEquals(1, compiler.getErrors().length); [EOL]     JSError error = compiler.getErrors()[0]; [EOL]     assertEquals("Message parse tree malformed. " + "Message must be initialized using goog.getMsg function.", error.description); [EOL] } <line_num>: 316,325
public void testUnrecognizedFunction() { [EOL]     allowLegacyMessages = false; [EOL]     extractMessages("DP_DatePicker.MSG_DATE_SELECTION = somefunc('a')"); [EOL]     assertEquals(0, messages.size()); [EOL]     assertEquals(1, compiler.getErrors().length); [EOL]     JSError error = compiler.getErrors()[0]; [EOL]     assertEquals("Message parse tree malformed. " + "Message initialized using unrecognized function. " + "Please use goog.getMsg() instead.", error.description); [EOL] } <line_num>: 327,338
public void testExtractPropertyMessage() { [EOL]     extractMessagesSafely("/**" + " * @desc A message that demonstrates placeholders\n" + " * @hidden\n" + " */" + "a.b.MSG_SILLY = goog.getMsg(\n" + "    '{$adjective} ' + '{$someNoun}',\n" + "    {'adjective': adj, 'someNoun': noun});"); [EOL]     assertEquals(1, messages.size()); [EOL]     JsMessage msg = messages.get(0); [EOL]     assertEquals("MSG_SILLY", msg.getKey()); [EOL]     assertEquals("{$adjective} {$someNoun}", msg.toString()); [EOL]     assertEquals("A message that demonstrates placeholders", msg.getDesc()); [EOL]     assertTrue(msg.isHidden()); [EOL] } <line_num>: 340,355
public void testAlmostButNotExternalMessage() { [EOL]     extractMessagesSafely("/** @desc External */ var MSG_EXTERNAL = goog.getMsg('External');"); [EOL]     assertEquals(0, compiler.getWarningCount()); [EOL]     assertEquals(1, messages.size()); [EOL]     assertFalse(messages.get(0).isExternal()); [EOL]     assertEquals("MSG_EXTERNAL", messages.get(0).getKey()); [EOL] } <line_num>: 357,364
public void testExternalMessage() { [EOL]     extractMessagesSafely("var MSG_EXTERNAL_111 = goog.getMsg('Hello World');"); [EOL]     assertEquals(0, compiler.getWarningCount()); [EOL]     assertEquals(1, messages.size()); [EOL]     assertTrue(messages.get(0).isExternal()); [EOL]     assertEquals("111", messages.get(0).getId()); [EOL] } <line_num>: 366,372
public void testIsValidMessageNameStrict() { [EOL]     JsMessageVisitor visitor = new DummyJsVisitor(CLOSURE); [EOL]     assertTrue(visitor.isMessageName("MSG_HELLO", true)); [EOL]     assertTrue(visitor.isMessageName("MSG_", true)); [EOL]     assertTrue(visitor.isMessageName("MSG_HELP", true)); [EOL]     assertTrue(visitor.isMessageName("MSG_FOO_HELP", true)); [EOL]     assertFalse(visitor.isMessageName("_FOO_HELP", true)); [EOL]     assertFalse(visitor.isMessageName("MSGFOOP", true)); [EOL] } <line_num>: 374,384
public void testIsValidMessageNameRelax() { [EOL]     JsMessageVisitor visitor = new DummyJsVisitor(RELAX); [EOL]     assertFalse(visitor.isMessageName("MSG_HELP", false)); [EOL]     assertFalse(visitor.isMessageName("MSG_FOO_HELP", false)); [EOL] } <line_num>: 386,391
public void testIsValidMessageNameLegacy() { [EOL]     theseAreLegacyMessageNames(new DummyJsVisitor(RELAX)); [EOL]     theseAreLegacyMessageNames(new DummyJsVisitor(LEGACY)); [EOL] } <line_num>: 393,396
private void theseAreLegacyMessageNames(JsMessageVisitor visitor) { [EOL]     assertTrue(visitor.isMessageName("MSG_HELLO", false)); [EOL]     assertTrue(visitor.isMessageName("MSG_", false)); [EOL]     assertFalse(visitor.isMessageName("MSG_HELP", false)); [EOL]     assertFalse(visitor.isMessageName("MSG_FOO_HELP", false)); [EOL]     assertFalse(visitor.isMessageName("_FOO_HELP", false)); [EOL]     assertFalse(visitor.isMessageName("MSGFOOP", false)); [EOL] } <line_num>: 398,406
public void testUnexistedPlaceholders() { [EOL]     extractMessages("var MSG_FOO = goog.getMsg('{$foo}:', {});"); [EOL]     assertEquals(0, messages.size()); [EOL]     JSError[] errors = compiler.getErrors(); [EOL]     assertEquals(1, errors.length); [EOL]     JSError error = errors[0]; [EOL]     assertEquals(JsMessageVisitor.MESSAGE_TREE_MALFORMED, error.getType()); [EOL]     assertEquals("Message parse tree malformed. Unrecognized message " + "placeholder referenced: foo", error.description); [EOL] } <line_num>: 408,418
public void testUnusedReferenesAreNotOK() { [EOL]     extractMessages("/** @desc AA */ " + "var MSG_FOO = goog.getMsg('lalala:', {foo:1});"); [EOL]     assertEquals(0, messages.size()); [EOL]     JSError[] errors = compiler.getErrors(); [EOL]     assertEquals(1, errors.length); [EOL]     JSError error = errors[0]; [EOL]     assertEquals(JsMessageVisitor.MESSAGE_TREE_MALFORMED, error.getType()); [EOL]     assertEquals("Message parse tree malformed. Unused message placeholder: " + "foo", error.description); [EOL] } <line_num>: 420,430
public void testDuplicatePlaceHoldersAreBad() { [EOL]     extractMessages("var MSG_FOO = goog.getMsg(" + "'{$foo}:', {'foo': 1, 'foo' : 2});"); [EOL]     assertEquals(0, messages.size()); [EOL]     JSError[] errors = compiler.getErrors(); [EOL]     assertEquals(1, errors.length); [EOL]     JSError error = errors[0]; [EOL]     assertEquals(JsMessageVisitor.MESSAGE_TREE_MALFORMED, error.getType()); [EOL]     assertEquals("Message parse tree malformed. Duplicate placeholder " + "name: foo", error.description); [EOL] } <line_num>: 432,443
public void testDuplicatePlaceholderReferencesAreOk() { [EOL]     extractMessagesSafely("var MSG_FOO = goog.getMsg(" + "'{$foo}:, {$foo}', {'foo': 1});"); [EOL]     assertEquals(1, messages.size()); [EOL]     JsMessage msg = messages.get(0); [EOL]     assertEquals("{$foo}:, {$foo}", msg.toString()); [EOL] } <line_num>: 445,452
public void testCamelcasePlaceholderNamesAreOk() { [EOL]     extractMessagesSafely("var MSG_WITH_CAMELCASE = goog.getMsg(" + "'Slide {$slideNumber}:', {'slideNumber': opt_index + 1});"); [EOL]     assertEquals(1, messages.size()); [EOL]     JsMessage msg = messages.get(0); [EOL]     assertEquals("MSG_WITH_CAMELCASE", msg.getKey()); [EOL]     assertEquals("Slide {$slideNumber}:", msg.toString()); [EOL]     List<CharSequence> parts = msg.parts(); [EOL]     assertEquals(3, parts.size()); [EOL]     assertEquals("slideNumber", ((JsMessage.PlaceholderReference) parts.get(1)).getName()); [EOL] } <line_num>: 454,466
public void testWithNonCamelcasePlaceholderNamesAreNotOk() { [EOL]     extractMessages("var MSG_WITH_CAMELCASE = goog.getMsg(" + "'Slide {$slide_number}:', {'slide_number': opt_index + 1});"); [EOL]     assertEquals(0, messages.size()); [EOL]     JSError[] errors = compiler.getErrors(); [EOL]     assertEquals(1, errors.length); [EOL]     JSError error = errors[0]; [EOL]     assertEquals(JsMessageVisitor.MESSAGE_TREE_MALFORMED, error.getType()); [EOL]     assertEquals("Message parse tree malformed. Placeholder name not in " + "lowerCamelCase: slide_number", error.description); [EOL] } <line_num>: 468,479
public void testUnquotedPlaceholdersAreOk() { [EOL]     extractMessagesSafely("/** @desc Hello */ " + "var MSG_FOO = goog.getMsg('foo {$unquoted}:', {unquoted: 12});"); [EOL]     assertEquals(1, messages.size()); [EOL]     assertEquals(0, compiler.getWarningCount()); [EOL] } <line_num>: 481,487
public void testIsLowerCamelCaseWithNumericSuffixes() { [EOL]     assertTrue(isLowerCamelCaseWithNumericSuffixes("name")); [EOL]     assertFalse(isLowerCamelCaseWithNumericSuffixes("NAME")); [EOL]     assertFalse(isLowerCamelCaseWithNumericSuffixes("Name")); [EOL]     assertTrue(isLowerCamelCaseWithNumericSuffixes("a4Letter")); [EOL]     assertFalse(isLowerCamelCaseWithNumericSuffixes("A4_LETTER")); [EOL]     assertTrue(isLowerCamelCaseWithNumericSuffixes("startSpan_1_23")); [EOL]     assertFalse(isLowerCamelCaseWithNumericSuffixes("startSpan_1_23b")); [EOL]     assertFalse(isLowerCamelCaseWithNumericSuffixes("START_SPAN_1_23")); [EOL]     assertFalse(isLowerCamelCaseWithNumericSuffixes("")); [EOL] } <line_num>: 489,502
public void testToLowerCamelCaseWithNumericSuffixes() { [EOL]     assertEquals("name", toLowerCamelCaseWithNumericSuffixes("NAME")); [EOL]     assertEquals("a4Letter", toLowerCamelCaseWithNumericSuffixes("A4_LETTER")); [EOL]     assertEquals("startSpan_1_23", toLowerCamelCaseWithNumericSuffixes("START_SPAN_1_23")); [EOL] } <line_num>: 504,509
public void testDuplicateMessageError() { [EOL]     extractMessages("(function () {/** @desc Hello */ var MSG_HELLO = goog.getMsg('a')})" + "(function () {/** @desc Hello2 */ var MSG_HELLO = goog.getMsg('a')})"); [EOL]     assertEquals(0, compiler.getWarningCount()); [EOL]     assertOneError(JsMessageVisitor.MESSAGE_DUPLICATE_KEY); [EOL] } <line_num>: 511,518
public void testNoDuplicateErrorOnExternMessage() { [EOL]     extractMessagesSafely("(function () {/** @desc Hello */ " + "var MSG_EXTERNAL_2 = goog.getMsg('a')})" + "(function () {/** @desc Hello2 */ " + "var MSG_EXTERNAL_2 = goog.getMsg('a')})"); [EOL] } <line_num>: 520,526
public void testErrorWhenUsingMsgPrefixWithFallback() { [EOL]     extractMessages("/** @desc Hello */ var MSG_HELLO_1 = goog.getMsg('hello');\n" + "/** @desc Hello */ var MSG_HELLO_2 = goog.getMsg('hello');\n" + "/** @desc Hello */ " + "var MSG_HELLO_3 = goog.getMsgWithFallback(MSG_HELLO_1, MSG_HELLO_2);"); [EOL]     assertOneError(JsMessageVisitor.MESSAGE_TREE_MALFORMED); [EOL] } <line_num>: 528,535
private void assertOneError(DiagnosticType type) { [EOL]     String errors = Joiner.on("\n").join(compiler.getErrors()); [EOL]     assertEquals("There should be one error. " + errors, 1, compiler.getErrorCount()); [EOL]     JSError error = compiler.getErrors()[0]; [EOL]     assertEquals(type, error.getType()); [EOL] } <line_num>: 537,543
private void extractMessagesSafely(String input) { [EOL]     extractMessages(input); [EOL]     JSError[] errors = compiler.getErrors(); [EOL]     assertEquals("Unexpected error(s): " + Joiner.on("\n").join(compiler.getErrors()), 0, compiler.getErrorCount()); [EOL] } <line_num>: 545,551
private void extractMessages(String input) { [EOL]     compiler = new Compiler(); [EOL]     Node root = compiler.parseTestCode(input); [EOL]     JsMessageVisitor visitor = new CollectMessages(compiler); [EOL]     visitor.process(null, root); [EOL] } <line_num>: 553,558
@Override [EOL] protected void processJsMessage(JsMessage message, JsMessageDefinition definition) { [EOL]     messages.add(message); [EOL] } <line_num>: 567,571
@Override [EOL] protected void processJsMessage(JsMessage message, JsMessageDefinition definition) { [EOL] } <line_num>: 580,584
