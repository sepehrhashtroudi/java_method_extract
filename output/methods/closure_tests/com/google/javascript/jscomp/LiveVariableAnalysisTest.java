public void testStraightLine() { [EOL]     assertNotLiveBeforeX("X:var a;", "a"); [EOL]     assertNotLiveAfterX("X:var a;", "a"); [EOL]     assertNotLiveAfterX("X:var a=1;", "a"); [EOL]     assertLiveAfterX("X:var a=1; a()", "a"); [EOL]     assertNotLiveBeforeX("X:var a=1; a()", "a"); [EOL]     assertLiveBeforeX("var a;X:a;", "a"); [EOL]     assertLiveBeforeX("var a;X:a=a+1;", "a"); [EOL]     assertLiveBeforeX("var a;X:a+=1;", "a"); [EOL]     assertLiveBeforeX("var a;X:a++;", "a"); [EOL]     assertNotLiveAfterX("var a,b;X:b();", "a"); [EOL]     assertNotLiveBeforeX("var a,b;X:b();", "a"); [EOL]     assertLiveBeforeX("var a,b;X:b(a);", "a"); [EOL]     assertLiveBeforeX("var a,b;X:b(1,2,3,b(a + 1));", "a"); [EOL]     assertNotLiveBeforeX("var a,b;X:a=1;b(a)", "a"); [EOL]     assertNotLiveAfterX("var a,b;X:b(a);b()", "a"); [EOL]     assertLiveBeforeX("var a,b;X:b();b=1;a()", "b"); [EOL]     assertLiveAfterX("X:a();var a;a()", "a"); [EOL]     assertNotLiveAfterX("X:a();var a=1;a()", "a"); [EOL]     assertLiveBeforeX("var a,b;X:a,b=1", "a"); [EOL] } <line_num>: 36,57
public void testProperties() { [EOL]     assertLiveBeforeX("var a,b;X:a.P;", "a"); [EOL]     assertLiveBeforeX("var a,b;X:a.P=1;b()", "a"); [EOL]     assertLiveBeforeX("var a,b;X:a.P.Q=1;b()", "a"); [EOL]     assertNotLiveAfterX("var a,b;X:b.P.Q.a=1;", "a"); [EOL]     assertLiveBeforeX("var a,b;X:b.P.Q=a;", "a"); [EOL] } <line_num>: 59,71
public void testConditions() { [EOL]     assertLiveBeforeX("var a,b;X:if(a){}", "a"); [EOL]     assertLiveBeforeX("var a,b;X:if(a||b) {}", "a"); [EOL]     assertLiveBeforeX("var a,b;X:if(b||a) {}", "a"); [EOL]     assertLiveBeforeX("var a,b;X:if(b||b(a)) {}", "a"); [EOL]     assertNotLiveAfterX("var a,b;X:b();if(a) {}", "b"); [EOL]     assertNotLiveAfterX("var a,b;X:a();if(a=b){}a()", "a"); [EOL]     assertNotLiveAfterX("var a,b;X:a();while(a=b){}a()", "a"); [EOL]     assertNotLiveAfterX("var a,b;X:a();if((a=b)&&b){}a()", "a"); [EOL]     assertNotLiveAfterX("var a,b;X:a();while((a=b)&&b){}a()", "a"); [EOL]     assertLiveBeforeX("var a,b;a();X:if(b&&(a=b)){}a()", "a"); [EOL]     assertLiveBeforeX("var a,b;a();X:if(a&&(a=b)){}a()", "a"); [EOL]     assertLiveBeforeX("var a,b;a();X:while(b&&(a=b)){}a()", "a"); [EOL]     assertLiveBeforeX("var a,b;a();X:while(a&&(a=b)){}a()", "a"); [EOL] } <line_num>: 73,92
public void testArrays() { [EOL]     assertLiveBeforeX("var a;X:a[1]", "a"); [EOL]     assertLiveBeforeX("var a,b;X:b[a]", "a"); [EOL]     assertLiveBeforeX("var a,b;X:b[1,2,3,4,b(a)]", "a"); [EOL]     assertLiveBeforeX("var a,b;X:b=[a,'a']", "a"); [EOL]     assertNotLiveBeforeX("var a,b;X:a=[];b(a)", "a"); [EOL]     assertLiveBeforeX("var a;X:a[1]=1", "a"); [EOL] } <line_num>: 94,103
public void testTwoPaths() { [EOL]     assertLiveBeforeX("var a,b;X:if(b){b(a)}else{b(a)};", "a"); [EOL]     assertLiveBeforeX("var a,b;X:if(b){b(b)}else{b(a)};", "a"); [EOL]     assertLiveBeforeX("var a,b;X:if(b){b(a)}else{b(b)};", "a"); [EOL]     assertNotLiveAfterX("var a,b;X:if(b){b(b)}else{b(b)};", "a"); [EOL]     assertLiveBeforeX("var a,b;X:if(b){b(b)}else{b(b)}a();", "a"); [EOL]     assertLiveBeforeX("var a;X:while(param1){a()};", "a"); [EOL]     assertLiveBeforeX("var a;X:while(param1){a=1};a()", "a"); [EOL]     assertLiveBeforeX("var a;X:if(param1){a()};", "a"); [EOL]     assertLiveBeforeX("var a;X:if(param1){a=1};a()", "a"); [EOL]     assertNotLiveAfterX("X:var a;do{a=1}while(param1);a()", "a"); [EOL] } <line_num>: 105,130
public void testThreePaths() { [EOL]     assertLiveBeforeX("var a;X:if(1){}else if(2){}else{a()};", "a"); [EOL]     assertLiveBeforeX("var a;X:if(1){}else if(2){a()}else{};", "a"); [EOL]     assertLiveBeforeX("var a;X:if(1){a()}else if(2){}else{};", "a"); [EOL]     assertLiveBeforeX("var a;X:if(1){}else if(2){}else{};a()", "a"); [EOL] } <line_num>: 132,137
public void testHooks() { [EOL]     assertLiveBeforeX("var a;X:1?a=1:1;a()", "a"); [EOL]     assertLiveBeforeX("var a,b;X:b=1?a:2", "a"); [EOL] } <line_num>: 139,146
public void testForLoops() { [EOL]     assertNotLiveBeforeX("var a,b;for(a=0;a<9;a++){b(a)};X:b", "a"); [EOL]     assertNotLiveBeforeX("var a,b;for(a in b){a()};X:b", "a"); [EOL]     assertNotLiveBeforeX("var a,b;for(a in b){a()};X:a", "b"); [EOL]     assertLiveBeforeX("var b;for(var a in b){X:a()};", "a"); [EOL]     assertLiveBeforeX("var a,b;for(a=0;a<9;a++){X:1}", "a"); [EOL]     assertLiveAfterX("var a,b;for(a in b){X:b};", "a"); [EOL]     assertLiveBeforeX("var a,b; X:for(a in b){ }", "a"); [EOL]     assertLiveBeforeX("var a,b;X:a();b();for(a in b){a()};", "a"); [EOL]     assertLiveBeforeX("var a,b;X:b;for(b=a;;){};", "a"); [EOL]     assertNotLiveBeforeX("var a,b;X:a;for(b=a;;){b()};b();", "b"); [EOL] } <line_num>: 148,171
public void testNestedLoops() { [EOL]     assertLiveBeforeX("var a;X:while(1){while(1){a()}}", "a"); [EOL]     assertLiveBeforeX("var a;X:while(1){while(1){while(1){a()}}}", "a"); [EOL]     assertLiveBeforeX("var a;X:while(1){while(1){a()};a=1}", "a"); [EOL]     assertLiveAfterX("var a;while(1){while(1){a()};X:a=1;}", "a"); [EOL]     assertLiveAfterX("var a;while(1){X:a=1;while(1){a()}}", "a"); [EOL]     assertNotLiveBeforeX("var a;X:1;do{do{do{a=1;}while(1)}while(1)}while(1);a()", "a"); [EOL] } <line_num>: 173,181
public void testSwitches() { [EOL]     assertLiveBeforeX("var a,b;X:switch(a){}", "a"); [EOL]     assertLiveBeforeX("var a,b;X:switch(b){case(a):break;}", "a"); [EOL]     assertLiveBeforeX("var a,b;X:switch(b){case(b):case(a):break;}", "a"); [EOL]     assertNotLiveBeforeX("var a,b;X:switch(b){case 1:a=1;break;default:a=2;break};a()", "a"); [EOL]     assertLiveBeforeX("var a,b;X:switch(b){default:a();break;}", "a"); [EOL] } <line_num>: 183,191
public void testAssignAndReadInCondition() { [EOL]     assertLiveBeforeX("var a, b; X: if ((a = this) && (b = a)) {}", "a"); [EOL]     assertNotLiveBeforeX("var a, b; X: a = 1, b = 1;", "a"); [EOL]     assertNotLiveBeforeX("var a; X: a = 1, a = 1;", "a"); [EOL] } <line_num>: 193,200
public void testParam() { [EOL]     assertNotLiveAfterX("var a;X:a()", "param1"); [EOL]     assertLiveBeforeX("var a;X:a(param1)", "param1"); [EOL]     assertNotLiveAfterX("var a;X:a();a(param2)", "param1"); [EOL] } <line_num>: 202,207
public void testExpressionInForIn() { [EOL]     assertLiveBeforeX("var a = [0]; X:for (a[1] in foo) { }", "a"); [EOL] } <line_num>: 209,211
public void testArgumentsArray() { [EOL]     assertEscaped("arguments[0]", "param1"); [EOL]     assertEscaped("arguments[0]", "param2"); [EOL]     assertEscaped("var args = arguments", "param1"); [EOL]     assertEscaped("var args = arguments", "param2"); [EOL]     assertNotEscaped("arguments = []", "param1"); [EOL]     assertNotEscaped("arguments = []", "param2"); [EOL]     assertEscaped("arguments[0] = 1", "param1"); [EOL]     assertEscaped("arguments[0] = 1", "param2"); [EOL]     assertEscaped("arguments[arguments[0]] = 1", "param1"); [EOL]     assertEscaped("arguments[arguments[0]] = 1", "param2"); [EOL] } <line_num>: 213,226
public void testTryCatchFinally() { [EOL]     assertLiveAfterX("var a; try {X:a=1} finally {a}", "a"); [EOL]     assertLiveAfterX("var a; try {a()} catch(e) {X:a=1} finally {a}", "a"); [EOL]     assertNotLiveAfterX("var a = 1; try {" + "try {a()} catch(e) {X:1} } catch(E) {a}", "a"); [EOL]     assertLiveAfterX("var a; while(1) { try {X:a=1;break} finally {a}}", "a"); [EOL] } <line_num>: 228,236
public void testForInAssignment() { [EOL]     assertLiveBeforeX("var a,b; for (var y in a = b) { X:a[y] }", "a"); [EOL]     assertNotLiveBeforeX("var a,b; for (var y in a = b) { X:a[y] }", "b"); [EOL]     assertLiveBeforeX("var a,b; for (var y in a = b) { X:a[y] }", "y"); [EOL]     assertLiveAfterX("var a,b; for (var y in a = b) { a[y]; X: y();}", "a"); [EOL] } <line_num>: 238,244
public void testExceptionThrowingAssignments() { [EOL]     assertLiveBeforeX("try{var a; X:a=foo();a} catch(e) {e()}", "a"); [EOL]     assertLiveBeforeX("try{X:var a=foo();a} catch(e) {e()}", "a"); [EOL]     assertLiveBeforeX("try{X:var a=foo()} catch(e) {e(a)}", "a"); [EOL] } <line_num>: 246,250
public void testInnerFunctions() { [EOL]     assertLiveBeforeX("function a() {}; X: a()", "a"); [EOL]     assertNotLiveBeforeX("X: function a() {}", "a"); [EOL]     assertLiveBeforeX("a = function(){}; function a() {}; X: a()", "a"); [EOL]     assertLiveAfterX("X: a = function(){}; function a() {}; a()", "a"); [EOL]     assertNotLiveBeforeX("X: a = function(){}; function a() {}; a()", "a"); [EOL] } <line_num>: 252,260
public void testEscaped() { [EOL]     assertEscaped("var a;function b(){a()}", "a"); [EOL]     assertEscaped("var a;function b(){param1()}", "param1"); [EOL]     assertEscaped("var a;function b(){function c(){a()}}", "a"); [EOL]     assertEscaped("var a;function b(){param1.x = function() {a()}}", "a"); [EOL]     assertEscaped("try{} catch(e){}", "e"); [EOL]     assertNotEscaped("var a;function b(){var c; c()}", "c"); [EOL]     assertNotEscaped("var a;function f(){function b(){var c;c()}}", "c"); [EOL]     assertNotEscaped("var a;function b(){};a()", "a"); [EOL]     assertNotEscaped("var a;function f(){function b(){}}a()", "a"); [EOL]     assertNotEscaped("var a;function b(){var a;a()};a()", "a"); [EOL]     assertEscaped("var _x", "_x"); [EOL] } <line_num>: 262,276
public void testEscapedLiveness() { [EOL]     assertNotLiveBeforeX("var a;X:a();function b(){a()}", "a"); [EOL] } <line_num>: 278,280
public void testBug1449316() { [EOL]     assertLiveBeforeX("try {var x=[]; X:var y=x[0]} finally {foo()}", "x"); [EOL] } <line_num>: 282,284
private void assertLiveBeforeX(String src, String var) { [EOL]     FlowState<LiveVariablesAnalysis.LiveVariableLattice> state = getFlowStateAtX(src); [EOL]     assertNotNull(src + " should contain a label 'X:'", state); [EOL]     assertTrue("Variable" + var + " should be live before X", state.getIn().isLive(liveness.getVarIndex(var))); [EOL] } <line_num>: 286,292
private void assertLiveAfterX(String src, String var) { [EOL]     FlowState<LiveVariablesAnalysis.LiveVariableLattice> state = getFlowStateAtX(src); [EOL]     assertTrue("Label X should be in the input program.", state != null); [EOL]     assertTrue("Variable" + var + " should be live after X", state.getOut().isLive(liveness.getVarIndex(var))); [EOL] } <line_num>: 294,300
private void assertNotLiveAfterX(String src, String var) { [EOL]     FlowState<LiveVariablesAnalysis.LiveVariableLattice> state = getFlowStateAtX(src); [EOL]     assertTrue("Label X should be in the input program.", state != null); [EOL]     assertTrue("Variable" + var + " should not be live after X", !state.getOut().isLive(liveness.getVarIndex(var))); [EOL] } <line_num>: 302,308
private void assertNotLiveBeforeX(String src, String var) { [EOL]     FlowState<LiveVariablesAnalysis.LiveVariableLattice> state = getFlowStateAtX(src); [EOL]     assertTrue("Label X should be in the input program.", state != null); [EOL]     assertTrue("Variable" + var + " should not be live before X", !state.getIn().isLive(liveness.getVarIndex(var))); [EOL] } <line_num>: 310,316
private FlowState<LiveVariablesAnalysis.LiveVariableLattice> getFlowStateAtX(String src) { [EOL]     liveness = computeLiveness(src); [EOL]     return getFlowStateAtX(liveness.getCfg().getEntry().getValue(), liveness.getCfg()); [EOL] } <line_num>: 318,323
private FlowState<LiveVariablesAnalysis.LiveVariableLattice> getFlowStateAtX(Node node, ControlFlowGraph<Node> cfg) { [EOL]     if (node.isLabel()) { [EOL]         if (node.getFirstChild().getString().equals("X")) { [EOL]             return cfg.getNode(node.getLastChild()).getAnnotation(); [EOL]         } [EOL]     } [EOL]     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) { [EOL]         FlowState<LiveVariablesAnalysis.LiveVariableLattice> state = getFlowStateAtX(c, cfg); [EOL]         if (state != null) { [EOL]             return state; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 325,340
private static void assertEscaped(String src, String name) { [EOL]     for (Var var : computeLiveness(src).getEscapedLocals()) { [EOL]         if (var.name.equals(name)) { [EOL]             return; [EOL]         } [EOL]     } [EOL]     fail("Variable " + name + " should be in the escaped local list."); [EOL] } <line_num>: 342,349
private static void assertNotEscaped(String src, String name) { [EOL]     for (Var var : computeLiveness(src).getEscapedLocals()) { [EOL]         assertFalse(var.name.equals(name)); [EOL]     } [EOL] } <line_num>: 351,355
private static LiveVariablesAnalysis computeLiveness(String src) { [EOL]     Compiler compiler = new Compiler(); [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     options.setCodingConvention(new GoogleCodingConvention()); [EOL]     compiler.initOptions(options); [EOL]     src = "function _FUNCTION(param1, param2){" + src + "}"; [EOL]     Node n = compiler.parseTestCode(src).removeFirstChild(); [EOL]     Node script = new Node(Token.SCRIPT, n); [EOL]     script.setInputId(new InputId("test")); [EOL]     assertEquals(0, compiler.getErrorCount()); [EOL]     Scope scope = new SyntacticScopeCreator(compiler).createScope(n, Scope.createGlobalScope(script)); [EOL]     ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true); [EOL]     cfa.process(null, n); [EOL]     ControlFlowGraph<Node> cfg = cfa.getCfg(); [EOL]     LiveVariablesAnalysis analysis = new LiveVariablesAnalysis(cfg, scope, compiler); [EOL]     analysis.analyze(); [EOL]     return analysis; [EOL] } <line_num>: 357,376
