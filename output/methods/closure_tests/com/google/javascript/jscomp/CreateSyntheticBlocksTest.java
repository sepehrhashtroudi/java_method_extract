public CreateSyntheticBlocksTest() { [EOL]     super("", false); [EOL] } <line_num>: 28,31
@Override [EOL] public void setUp() { [EOL]     super.enableLineNumberCheck(false); [EOL] } <line_num>: 33,36
@Override [EOL] public void process(Node externs, Node js) { [EOL]     new CreateSyntheticBlocks(compiler, START_MARKER, END_MARKER).process(externs, js); [EOL]     NodeTraversal.traverse(compiler, js, new MinimizeExitPoints(compiler)); [EOL]     new PeepholeOptimizationsPass(compiler, new PeepholeRemoveDeadCode(), new PeepholeSubstituteAlternateSyntax(true), new PeepholeFoldConstants(true)).process(externs, js); [EOL]     new MinimizeExitPoints(compiler).process(externs, js); [EOL]     new Denormalize(compiler).process(externs, js); [EOL] } <line_num>: 41,55
@Override [EOL] protected CompilerPass getProcessor(final Compiler compiler) { [EOL]     return new CompilerPass() { [EOL]  [EOL]         @Override [EOL]         public void process(Node externs, Node js) { [EOL]             new CreateSyntheticBlocks(compiler, START_MARKER, END_MARKER).process(externs, js); [EOL]             NodeTraversal.traverse(compiler, js, new MinimizeExitPoints(compiler)); [EOL]             new PeepholeOptimizationsPass(compiler, new PeepholeRemoveDeadCode(), new PeepholeSubstituteAlternateSyntax(true), new PeepholeFoldConstants(true)).process(externs, js); [EOL]             new MinimizeExitPoints(compiler).process(externs, js); [EOL]             new Denormalize(compiler).process(externs, js); [EOL]         } [EOL]     }; [EOL] } <line_num>: 38,57
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 59,62
public void testFold1() { [EOL]     test("function f() { if (x) return; y(); }", "function f(){x||y()}"); [EOL] } <line_num>: 66,69
public void testFoldWithMarkers1() { [EOL]     testSame("function f(){startMarker();if(x)return;endMarker();y()}"); [EOL] } <line_num>: 71,73
public void testFoldWithMarkers1a() { [EOL]     testSame("function f(){startMarker();if(x)return;endMarker()}"); [EOL] } <line_num>: 75,77
public void testFold2() { [EOL]     test("function f() { if (x) return; y(); if (a) return; b(); }", "function f(){if(!x){y();a||b()}}"); [EOL] } <line_num>: 79,82
public void testFoldWithMarkers2() { [EOL]     testSame("function f(){startMarker(\"FOO\");startMarker(\"BAR\");" + "if(x)return;endMarker(\"BAR\");y();if(a)return;" + "endMarker(\"FOO\");b()}"); [EOL] } <line_num>: 84,88
public void testUnmatchedStartMarker() { [EOL]     testSame("startMarker()", CreateSyntheticBlocks.UNMATCHED_START_MARKER); [EOL] } <line_num>: 90,92
public void testUnmatchedEndMarker1() { [EOL]     testSame("endMarker()", CreateSyntheticBlocks.UNMATCHED_END_MARKER); [EOL] } <line_num>: 94,96
public void testUnmatchedEndMarker2() { [EOL]     test("if(y){startMarker();x()}endMarker()", "if(y){startMarker();x()}endMarker()", null, CreateSyntheticBlocks.UNMATCHED_END_MARKER); [EOL] } <line_num>: 98,102
public void testInvalid1() { [EOL]     test("startMarker() && true", "startMarker()", null, CreateSyntheticBlocks.INVALID_MARKER_USAGE); [EOL] } <line_num>: 104,108
public void testInvalid2() { [EOL]     test("false && endMarker()", "", null, CreateSyntheticBlocks.INVALID_MARKER_USAGE); [EOL] } <line_num>: 110,114
public void testDenormalize() { [EOL]     testSame("startMarker();for(;;);endMarker()"); [EOL] } <line_num>: 117,119
public void testNonMarkingUse() { [EOL]     testSame("function foo(endMarker){}"); [EOL]     testSame("function foo(){startMarker:foo()}"); [EOL] } <line_num>: 121,124
public void testContainingBlockPreservation() { [EOL]     testSame("if(y){startMarker();x();endMarker()}"); [EOL] } <line_num>: 126,128
