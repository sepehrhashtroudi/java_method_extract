public CheckRegExpTest() { [EOL]     super("var RegExp;", true); [EOL] } <line_num>: 25,27
@Override [EOL] protected CompilerPass getProcessor(Compiler compiler) { [EOL]     compiler.options.setWarningLevel(DiagnosticGroups.CHECK_REGEXP, CheckLevel.WARNING); [EOL]     last = new CheckRegExp(compiler); [EOL]     return last; [EOL] } <line_num>: 29,35
private void testReference(String code, boolean expected) { [EOL]     testSame(code, (expected) ? CheckRegExp.REGEXP_REFERENCE : null); [EOL]     assertEquals(expected, last.isGlobalRegExpPropertiesUsed()); [EOL] } <line_num>: 37,40
public void testRegExp() { [EOL]     testReference("RegExp();", false); [EOL]     testReference("var x = RegExp();", false); [EOL]     testReference("new RegExp();", false); [EOL]     testReference("var x = new RegExp();", false); [EOL]     testReference("x instanceof RegExp;", false); [EOL]     testReference("RegExp.test();", true); [EOL]     testReference("var x = RegExp.test();", true); [EOL]     testReference("RegExp.exec();", true); [EOL]     testReference("RegExp.$1;", true); [EOL]     testReference("RegExp.foobar;", true); [EOL]     testReference("delete RegExp;", true); [EOL]     testReference("var x = RegExp;", true); [EOL]     testReference("f(RegExp);", true); [EOL]     testReference("new f(RegExp);", true); [EOL]     testReference("var x = RegExp; x.test()", true); [EOL]     testReference("var x;", false); [EOL]     testReference("function f() {var RegExp; RegExp.test();}", false); [EOL] } <line_num>: 42,71
