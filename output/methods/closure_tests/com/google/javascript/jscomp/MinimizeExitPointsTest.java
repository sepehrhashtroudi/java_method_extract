@Override [EOL] public void setUp() { [EOL]     super.enableLineNumberCheck(true); [EOL] } <line_num>: 26,29
@Override [EOL] public void process(Node externs, Node js) { [EOL]     NodeTraversal.traverse(compiler, js, new MinimizeExitPoints(compiler)); [EOL] } <line_num>: 34,37
@Override [EOL] protected CompilerPass getProcessor(final Compiler compiler) { [EOL]     return new CompilerPass() { [EOL]  [EOL]         @Override [EOL]         public void process(Node externs, Node js) { [EOL]             NodeTraversal.traverse(compiler, js, new MinimizeExitPoints(compiler)); [EOL]         } [EOL]     }; [EOL] } <line_num>: 31,39
@Override [EOL] protected int getNumRepetitions() { [EOL]     return 1; [EOL] } <line_num>: 41,44
void foldSame(String js) { [EOL]     testSame(js); [EOL] } <line_num>: 46,48
void fold(String js, String expected) { [EOL]     test(js, expected); [EOL] } <line_num>: 50,52
void fold(String js, String expected, DiagnosticType warning) { [EOL]     test(js, expected, warning); [EOL] } <line_num>: 54,56
public void testBreakOptimization() throws Exception { [EOL]     fold("f:{if(true){a();break f;}else;b();}", "f:{if(true){a()}else{b()}}"); [EOL]     fold("f:{if(false){a();break f;}else;b();break f;}", "f:{if(false){a()}else{b()}}"); [EOL]     fold("f:{if(a()){b();break f;}else;c();}", "f:{if(a()){b();}else{c();}}"); [EOL]     fold("f:{if(a()){b()}else{c();break f;}}", "f:{if(a()){b()}else{c();}}"); [EOL]     fold("f:{if(a()){b();break f;}else;}", "f:{if(a()){b();}else;}"); [EOL]     fold("f:{if(a()){break f;}else;}", "f:{if(a()){}else;}"); [EOL]     fold("f:while(a())break f;", "f:while(a())break f"); [EOL]     foldSame("f:for(x in a())break f"); [EOL]     fold("f:{while(a())break;}", "f:{while(a())break;}"); [EOL]     foldSame("f:{for(x in a())break}"); [EOL]     fold("f:try{break f;}catch(e){break f;}", "f:try{}catch(e){}"); [EOL]     fold("f:try{if(a()){break f;}else{break f;} break f;}catch(e){}", "f:try{if(a()){}else{}}catch(e){}"); [EOL]     fold("f:g:break f", ""); [EOL]     fold("f:g:{if(a()){break f;}else{break f;} break f;}", "f:g:{if(a()){}else{}}"); [EOL] } <line_num>: 58,89
public void testFunctionReturnOptimization() throws Exception { [EOL]     fold("function f(){if(a()){b();if(c())return;}}", "function f(){if(a()){b();if(c());}}"); [EOL]     fold("function f(){if(x)return; x=3; return; }", "function f(){if(x); else x=3}"); [EOL]     fold("function f(){if(true){a();return;}else;b();}", "function f(){if(true){a();}else{b();}}"); [EOL]     fold("function f(){if(false){a();return;}else;b();return;}", "function f(){if(false){a();}else{b();}}"); [EOL]     fold("function f(){if(a()){b();return;}else;c();}", "function f(){if(a()){b();}else{c();}}"); [EOL]     fold("function f(){if(a()){b()}else{c();return;}}", "function f(){if(a()){b()}else{c();}}"); [EOL]     fold("function f(){if(a()){b();return;}else;}", "function f(){if(a()){b();}else;}"); [EOL]     fold("function f(){if(a()){return;}else{return;} return;}", "function f(){if(a()){}else{}}"); [EOL]     fold("function f(){if(a()){return;}else{return;} b();}", "function f(){if(a()){}else{return;b()}}"); [EOL]     fold("function f(){while(a())return;}", "function f(){while(a())return}"); [EOL]     foldSame("function f(){for(x in a())return}"); [EOL]     fold("function f(){while(a())break;}", "function f(){while(a())break}"); [EOL]     foldSame("function f(){for(x in a())break}"); [EOL]     fold("function f(){try{return;}catch(e){return;}finally{return}}", "function f(){try{}catch(e){}finally{}}"); [EOL]     fold("function f(){try{return;}catch(e){return;}}", "function f(){try{}catch(e){}}"); [EOL]     fold("function f(){try{return;}finally{return;}}", "function f(){try{}finally{}}"); [EOL]     fold("function f(){try{if(a()){return;}else{return;} return;}catch(e){}}", "function f(){try{if(a()){}else{}}catch(e){}}"); [EOL]     fold("function f(){g:return}", "function f(){}"); [EOL]     fold("function f(){g:if(a()){return;}else{return;} return;}", "function f(){g:if(a()){}else{}}"); [EOL]     fold("function f(){try{g:if(a()){} return;}finally{return}}", "function f(){try{g:if(a()){}}finally{}}"); [EOL] } <line_num>: 91,134
public void testWhileContinueOptimization() throws Exception { [EOL]     fold("while(true){if(x)continue; x=3; continue; }", "while(true)if(x);else x=3"); [EOL]     foldSame("while(true){a();continue;b();}"); [EOL]     fold("while(true){if(true){a();continue;}else;b();}", "while(true){if(true){a();}else{b()}}"); [EOL]     fold("while(true){if(false){a();continue;}else;b();continue;}", "while(true){if(false){a()}else{b();}}"); [EOL]     fold("while(true){if(a()){b();continue;}else;c();}", "while(true){if(a()){b();}else{c();}}"); [EOL]     fold("while(true){if(a()){b();}else{c();continue;}}", "while(true){if(a()){b();}else{c();}}"); [EOL]     fold("while(true){if(a()){b();continue;}else;}", "while(true){if(a()){b();}else;}"); [EOL]     fold("while(true){if(a()){continue;}else{continue;} continue;}", "while(true){if(a()){}else{}}"); [EOL]     fold("while(true){if(a()){continue;}else{continue;} b();}", "while(true){if(a()){}else{continue;b();}}"); [EOL]     fold("while(true)while(a())continue;", "while(true)while(a());"); [EOL]     fold("while(true)for(x in a())continue", "while(true)for(x in a());"); [EOL]     fold("while(true)while(a())break;", "while(true)while(a())break"); [EOL]     fold("while(true)for(x in a())break", "while(true)for(x in a())break"); [EOL]     fold("while(true){try{continue;}catch(e){continue;}}", "while(true){try{}catch(e){}}"); [EOL]     fold("while(true){try{if(a()){continue;}else{continue;}" + "continue;}catch(e){}}", "while(true){try{if(a()){}else{}}catch(e){}}"); [EOL]     fold("while(true){g:continue}", "while(true){}"); [EOL]     fold("while(true){g:if(a()){continue;}else{continue;} continue;}", "while(true){g:if(a());else;}"); [EOL] } <line_num>: 136,176
public void testDoContinueOptimization() throws Exception { [EOL]     fold("do{if(x)continue; x=3; continue; }while(true)", "do if(x); else x=3; while(true)"); [EOL]     foldSame("do{a();continue;b()}while(true)"); [EOL]     fold("do{if(true){a();continue;}else;b();}while(true)", "do{if(true){a();}else{b();}}while(true)"); [EOL]     fold("do{if(false){a();continue;}else;b();continue;}while(true)", "do{if(false){a();}else{b();}}while(true)"); [EOL]     fold("do{if(a()){b();continue;}else;c();}while(true)", "do{if(a()){b();}else{c()}}while(true)"); [EOL]     fold("do{if(a()){b();}else{c();continue;}}while(true)", "do{if(a()){b();}else{c();}}while(true)"); [EOL]     fold("do{if(a()){b();continue;}else;}while(true)", "do{if(a()){b();}else;}while(true)"); [EOL]     fold("do{if(a()){continue;}else{continue;} continue;}while(true)", "do{if(a()){}else{}}while(true)"); [EOL]     fold("do{if(a()){continue;}else{continue;} b();}while(true)", "do{if(a()){}else{continue; b();}}while(true)"); [EOL]     fold("do{while(a())continue;}while(true)", "do while(a());while(true)"); [EOL]     fold("do{for(x in a())continue}while(true)", "do for(x in a());while(true)"); [EOL]     fold("do{while(a())break;}while(true)", "do while(a())break;while(true)"); [EOL]     fold("do for(x in a())break;while(true)", "do for(x in a())break;while(true)"); [EOL]     fold("do{try{continue;}catch(e){continue;}}while(true)", "do{try{}catch(e){}}while(true)"); [EOL]     fold("do{try{if(a()){continue;}else{continue;}" + "continue;}catch(e){}}while(true)", "do{try{if(a()){}else{}}catch(e){}}while(true)"); [EOL]     fold("do{g:continue}while(true)", "do{}while(true)"); [EOL]     fold("do{g:if(a()){continue;}else{continue;} continue;}while(true)", "do{g:if(a());else;}while(true)"); [EOL]     fold("do { foo(); continue; } while(false)", "do { foo(); } while(false)"); [EOL]     fold("do { foo(); break; } while(false)", "do { foo(); } while(false)"); [EOL] } <line_num>: 178,223
public void testForContinueOptimization() throws Exception { [EOL]     fold("for(x in y){if(x)continue; x=3; continue; }", "for(x in y)if(x);else x=3"); [EOL]     foldSame("for(x in y){a();continue;b()}"); [EOL]     fold("for(x in y){if(true){a();continue;}else;b();}", "for(x in y){if(true)a();else b();}"); [EOL]     fold("for(x in y){if(false){a();continue;}else;b();continue;}", "for(x in y){if(false){a();}else{b()}}"); [EOL]     fold("for(x in y){if(a()){b();continue;}else;c();}", "for(x in y){if(a()){b();}else{c();}}"); [EOL]     fold("for(x in y){if(a()){b();}else{c();continue;}}", "for(x in y){if(a()){b();}else{c();}}"); [EOL]     fold("for(x=0;x<y;x++){if(a()){b();continue;}else;}", "for(x=0;x<y;x++){if(a()){b();}else;}"); [EOL]     fold("for(x=0;x<y;x++){if(a()){continue;}else{continue;} continue;}", "for(x=0;x<y;x++){if(a()){}else{}}"); [EOL]     fold("for(x=0;x<y;x++){if(a()){continue;}else{continue;} b();}", "for(x=0;x<y;x++){if(a()){}else{continue; b();}}"); [EOL]     fold("for(x=0;x<y;x++)while(a())continue;", "for(x=0;x<y;x++)while(a());"); [EOL]     fold("for(x=0;x<y;x++)for(x in a())continue", "for(x=0;x<y;x++)for(x in a());"); [EOL]     fold("for(x=0;x<y;x++)while(a())break;", "for(x=0;x<y;x++)while(a())break"); [EOL]     foldSame("for(x=0;x<y;x++)for(x in a())break"); [EOL]     fold("for(x=0;x<y;x++){try{continue;}catch(e){continue;}}", "for(x=0;x<y;x++){try{}catch(e){}}"); [EOL]     fold("for(x=0;x<y;x++){try{if(a()){continue;}else{continue;}" + "continue;}catch(e){}}", "for(x=0;x<y;x++){try{if(a()){}else{}}catch(e){}}"); [EOL]     fold("for(x=0;x<y;x++){g:continue}", "for(x=0;x<y;x++){}"); [EOL]     fold("for(x=0;x<y;x++){g:if(a()){continue;}else{continue;} continue;}", "for(x=0;x<y;x++){g:if(a());else;}"); [EOL] } <line_num>: 225,264
public void testCodeMotionDoesntBreakFunctionHoisting() throws Exception { [EOL]     fold("function f() { if (x) return; foo(); function foo() {} }", "function f() { if (x); else { function foo() {} foo(); } }"); [EOL] } <line_num>: 266,269
