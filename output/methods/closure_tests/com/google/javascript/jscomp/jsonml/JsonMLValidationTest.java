private void testValidation(String jsonml) throws Exception { [EOL]     JsonML jsonMLRoot = JsonMLUtil.parseString(jsonml); [EOL]     String msg = Validator.validate(jsonMLRoot); [EOL]     if (msg != null) { [EOL]         String errorMsg = String.format("Validation error for %s.\n Received: %s\n", jsonml, msg); [EOL]     } [EOL] } <line_num>: 35,42
private void testValidation(String jsonml, String expected) throws Exception { [EOL]     JsonML jsonMLRoot = JsonMLUtil.parseString(jsonml); [EOL]     String msg = Validator.validate(jsonMLRoot); [EOL]     if (!msg.equals(expected)) { [EOL]         String errorMsg = String.format("Validation error for %s.\n Received: %s\n Expected: %s\n", jsonml, msg, expected); [EOL]         assertEquals(errorMsg, expected, msg); [EOL]     } [EOL] } <line_num>: 44,54
private void testNotEnoughChildrenValidation(String jsonml, TagType type, int expected, int actual) throws Exception { [EOL]     testValidation(jsonml, String.format(Validator.NOT_ENOUGH_CHILDREN_FMT, type, expected, actual)); [EOL] } <line_num>: 56,61
private void testTooManyChildrenValidation(String jsonml, TagType type, int expected, int actual) throws Exception { [EOL]     testValidation(jsonml, String.format(Validator.TOO_MANY_CHILDREN_FMT, type, expected, actual)); [EOL] } <line_num>: 63,68
private void testWrongChildTypeValidation(String jsonml, TagType type, TagType expected, TagType actual, int index) throws Exception { [EOL]     testWrongChildTypeValidation(jsonml, type, new TagType[] { expected }, actual, index); [EOL] } <line_num>: 70,74
private void testWrongChildTypeValidation(String jsonml, TagType type, TagType[] expected, TagType actual, int index) throws Exception { [EOL]     testValidation(jsonml, String.format(Validator.WRONG_CHILD_TYPE_FMT, index, type, Validator.printList(expected), actual)); [EOL] } <line_num>: 76,81
private void testMissingArgument(String jsonml, TagAttr attr, TagType type) throws Exception { [EOL]     testValidation(jsonml, String.format(Validator.MISSING_ARGUMENT, attr, type)); [EOL] } <line_num>: 83,87
public void testAssignExpr() throws Exception { [EOL]     testValidation("" + "['AssignExpr',{'op':'='}," + "['IdExpr',{'name':'x'}]," + "['LiteralExpr',{'type':'number','value':1}]]"); [EOL]     testNotEnoughChildrenValidation("" + "['AssignExpr',{'op':'='}," + "['IdExpr',{'name':'x'}]]", TagType.AssignExpr, 2, 1); [EOL]     testTooManyChildrenValidation("" + "['AssignExpr',{'op':'='}," + "['IdExpr',{'name':'x'}]," + "['IdExpr',{'name':'y'}]," + "['IdExpr',{'name':'z'}]]", TagType.AssignExpr, 2, 3); [EOL]     testMissingArgument("" + "['AssignExpr',{}," + "['IdExpr',{'name':'x'}]," + "['LiteralExpr',{'type':'number','value':1}]]", TagAttr.OP, TagType.AssignExpr); [EOL] } <line_num>: 89,112
public void testBinaryExpr() throws Exception { [EOL]     testValidation("" + "['BinaryExpr',{'op':'+'}," + "['IdExpr',{'name':'a'}]," + "['LiteralExpr',{'type':'number','value':1}]]"); [EOL]     testNotEnoughChildrenValidation("" + "['BinaryExpr',{'op':'+'}," + "['IdExpr',{'name':'a'}]]", TagType.BinaryExpr, 2, 1); [EOL]     testTooManyChildrenValidation("" + "['BinaryExpr',{'op':'&&'}," + "['IdExpr',{'name':'a'}]," + "['IdExpr',{'name':'b'}]," + "['IdExpr',{'name':'c'}]]", TagType.BinaryExpr, 2, 3); [EOL]     testMissingArgument("" + "['BinaryExpr',{}," + "['IdExpr',{'name':'a'}]," + "['LiteralExpr',{'type':'number','value':1}]]", TagAttr.OP, TagType.BinaryExpr); [EOL] } <line_num>: 114,137
public void testCaseValidation() throws Exception { [EOL]     testValidation("" + "['Case',{}," + "['IdExpr',{'name':'a'}]]"); [EOL]     testValidation("" + "['Case',{}," + "['IdExpr',{'name':'a'}]," + "['CallExpr',{}," + "['IdExpr',{'name':'foo'}]]]"); [EOL]     testNotEnoughChildrenValidation("" + "['Case',{}]", TagType.Case, 1, 0); [EOL] } <line_num>: 139,153
public void testCatchValidation() throws Exception { [EOL]     testValidation("" + "['CatchClause',{}," + "['IdPatt',{'name':'e'}]," + "['BlockStmt',{}]]"); [EOL]     testNotEnoughChildrenValidation("" + "['CatchClause',{}," + "['IdPatt',{'name':'e'}]]", TagType.CatchClause, 2, 1); [EOL]     testWrongChildTypeValidation("" + "['CatchClause',{}," + "['IdExpr',{'name':'e'}]," + "['BlockStmt',{}]]", TagType.CatchClause, TagType.IdPatt, TagType.IdExpr, 0); [EOL] } <line_num>: 155,172
public void testConditionalExprValidation() throws Exception { [EOL]     testValidation("" + "['ConditionalExpr',{}," + "['BinaryExpr',{'op':'=='}," + "['IdExpr',{'name':'x'}]," + "['LiteralExpr',{'type':'number','value':0}]]," + "['LiteralExpr',{'type':'number','value':0}]," + "['LiteralExpr',{'type':'number','value':1}]]"); [EOL]     testNotEnoughChildrenValidation("" + "['ConditionalExpr',{}," + "['BinaryExpr',{'op':'=='}," + "['IdExpr',{'name':'x'}]," + "['LiteralExpr',{'type':'number','value':0}]]]", TagType.ConditionalExpr, 3, 1); [EOL]     testNotEnoughChildrenValidation("" + "['ConditionalExpr',{}," + "['BinaryExpr',{'op':'=='}," + "['IdExpr',{'name':'x'}]," + "['LiteralExpr',{'type':'number','value':0}]]," + "['LiteralExpr',{'type':'number','value':1}]]", TagType.ConditionalExpr, 3, 2); [EOL] } <line_num>: 174,197
public void testCountExprValidation() throws Exception { [EOL]     testValidation("" + "['CountExpr',{'isPrefix':false,'op':'++'}," + "['IdExpr',{'name':'x'}]]"); [EOL]     testTooManyChildrenValidation("" + "['CountExpr',{'isPrefix':false,'op':'++'}," + "['IdExpr',{'name':'x'}]," + "['IdExpr',{'name':'y'}]]", TagType.CountExpr, 1, 2); [EOL]     testMissingArgument("" + "['CountExpr',{'op':'++'}," + "['IdExpr',{'name':'x'}]]", TagAttr.IS_PREFIX, TagType.CountExpr); [EOL]     testMissingArgument("" + "['CountExpr',{'isPrefix':false}," + "['IdExpr',{'name':'x'}]]", TagAttr.OP, TagType.CountExpr); [EOL] } <line_num>: 199,219
public void testDataProp() throws Exception { [EOL]     testValidation("" + "['DataProp',{'name':'x'}," + "['LiteralExpr',{'type':'number','value':1}]]"); [EOL]     testNotEnoughChildrenValidation("" + "['DataProp',{'name':'x'}]", TagType.DataProp, 1, 0); [EOL]     testMissingArgument("" + "['DataProp', {}," + "['LiteralExpr',{'type':'number','value':1}]]", TagAttr.NAME, TagType.DataProp); [EOL] } <line_num>: 221,235
public void testDeleteExpr() throws Exception { [EOL]     testValidation("" + "['DeleteExpr',{}," + "['IdExpr',{'name':'x'}]]"); [EOL]     testNotEnoughChildrenValidation("" + "['DeleteExpr',{}]", TagType.DeleteExpr, 1, 0); [EOL]     testTooManyChildrenValidation("" + "['DeleteExpr',{}," + "['IdExpr',{'name':'x'}]," + "['IdExpr',{'name':'y'}]]", TagType.DeleteExpr, 1, 2); [EOL] } <line_num>: 237,251
public void testDoWhileStmtValidation() throws Exception { [EOL]     testValidation("" + "['DoWhileStmt',{}," + "['BlockStmt',{}]," + "['LiteralExpr',{'type':'boolean','value':true}]]"); [EOL]     testNotEnoughChildrenValidation("" + "['DoWhileStmt',{}]", TagType.DoWhileStmt, 2, 0); [EOL]     testTooManyChildrenValidation("" + "['DoWhileStmt',{}," + "['BlockStmt',{}]," + "['BlockStmt',{}]," + "['LiteralExpr',{'type':'boolean','value':true}]]", TagType.DoWhileStmt, 2, 3); [EOL] } <line_num>: 253,269
public void testEmptyStmtValidation() throws Exception { [EOL]     testValidation("" + "['EmptyStmt',{}]"); [EOL]     testTooManyChildrenValidation("" + "['EmptyStmt',{}," + "['BlockStmt',{}]]", TagType.EmptyStmt, 0, 1); [EOL] } <line_num>: 271,280
public void testForInStmtValidation() throws Exception { [EOL]     testValidation("" + "['ForInStmt',{}," + "['IdExpr',{'name':'x'}]," + "['ObjectExpr',{}]," + "['BlockStmt',{}]]"); [EOL]     testNotEnoughChildrenValidation("" + "['ForInStmt',{}," + "['IdExpr',{'name':'x'}]," + "['ObjectExpr',{}]],", TagType.ForInStmt, 3, 2); [EOL]     testTooManyChildrenValidation("" + "['ForInStmt',{}," + "['IdExpr',{'name':'x'}]," + "['ObjectExpr',{}]," + "['BlockStmt',{}]," + "['BlockStmt',{}]]", TagType.ForInStmt, 3, 4); [EOL] } <line_num>: 282,302
public void testForStmtValidation() throws Exception { [EOL]     testValidation("" + "['ForStmt',{}," + "['AssignExpr',{'op':'='}," + "['IdExpr',{'name':'i'}]," + "['LiteralExpr',{'type':'number','value':0}]]," + "['BinaryExpr',{'op':'<'}," + "['IdExpr',{'name':'i'}]," + "['IdExpr',{'name':'n'}]]," + "['CountExpr',{'isPrefix':true,'op':'++'}," + "['IdExpr',{'name':'i'}]]," + "['BlockStmt',{}]]"); [EOL]     testNotEnoughChildrenValidation("" + "['ForStmt',{}," + "['BinaryExpr',{'op':'<'}," + "['IdExpr',{'name':'i'}]," + "['IdExpr',{'name':'n'}]]," + "['CountExpr',{'isPrefix':true,'op':'++'}," + "['IdExpr',{'name':'i'}]]," + "['BlockStmt',{}]]", TagType.ForStmt, 4, 3); [EOL]     testTooManyChildrenValidation("" + "['ForStmt',{}," + "['AssignExpr',{'op':'='}," + "['IdExpr',{'name':'i'}]," + "['LiteralExpr',{'type':'number','value':0}]]," + "['BinaryExpr',{'op':'<'}," + "['IdExpr',{'name':'i'}]," + "['IdExpr',{'name':'n'}]]," + "['CountExpr',{'isPrefix':true,'op':'++'}," + "['IdExpr',{'name':'i'}]]," + "['BlockStmt',{}]," + "['BlockStmt',{}]]", TagType.ForStmt, 4, 5); [EOL] } <line_num>: 304,340
public void testFunctionDeclValidation() throws Exception { [EOL]     testValidation("" + "['FunctionDecl',{}," + "['IdPatt',{'name':'f'}]," + "['ParamDecl',{}]]"); [EOL]     testValidation("" + "['FunctionDecl',{}," + "['IdPatt',{'name':'f'}]," + "['ParamDecl',{}]," + "['IdExpr',{'name':'foo'}]]"); [EOL]     testNotEnoughChildrenValidation("" + "['FunctionDecl',{}," + "['IdPatt',{'name':'f'}]]", TagType.FunctionDecl, 2, 1); [EOL]     testWrongChildTypeValidation("" + "['FunctionDecl',{}," + "['Empty', {}]," + "['ParamDecl',{}]]", TagType.FunctionDecl, TagType.IdPatt, TagType.Empty, 0); [EOL]     testWrongChildTypeValidation("" + "['FunctionDecl',{}," + "['IdPatt',{'name':'f'}]," + "['Empty',{}]]", TagType.FunctionDecl, TagType.ParamDecl, TagType.Empty, 1); [EOL] } <line_num>: 342,370
public void testFunctionExprValidation() throws Exception { [EOL]     testValidation("" + "['FunctionExpr',{}," + "['IdPatt',{'name':'f'}]," + "['ParamDecl',{}]]"); [EOL]     testValidation("" + "['FunctionExpr',{}," + "['IdPatt',{'name':'f'}]," + "['ParamDecl',{}]," + "['IdExpr',{'name':'foo'}]]"); [EOL]     testValidation("" + "['FunctionExpr',{}," + "['Empty', {}]," + "['ParamDecl',{}]]"); [EOL] } <line_num>: 372,387
public void testIdExprValidation() throws Exception { [EOL]     testValidation("" + "['IdExpr',{'name':'x'}]"); [EOL]     testTooManyChildrenValidation("" + "['IdExpr',{'name':'x'}," + "['BlockStmt',{}]]", TagType.IdExpr, 0, 1); [EOL]     testMissingArgument("" + "['IdExpr', {}]", TagAttr.NAME, TagType.IdExpr); [EOL] } <line_num>: 389,402
public void testIdPattValidation() throws Exception { [EOL]     testValidation("" + "['IdPatt',{'name':'x'}]"); [EOL]     testTooManyChildrenValidation("" + "['IdPatt',{'name':'x'}," + "['BlockStmt',{}]]", TagType.IdPatt, 0, 1); [EOL]     testMissingArgument("" + "['IdPatt', {}]", TagAttr.NAME, TagType.IdPatt); [EOL] } <line_num>: 404,417
public void testIfStmtValidation() throws Exception { [EOL]     testValidation("" + "['IfStmt',{}," + "['LiteralExpr',{'type':'boolean','value':true}]," + "['BlockStmt',{}]," + "['EmptyStmt',{}]]"); [EOL]     testValidation("" + "['IfStmt',{}," + "['LiteralExpr',{'type':'boolean','value':true}]," + "['BlockStmt',{}]," + "['BlockStmt',{}]]"); [EOL]     testNotEnoughChildrenValidation("" + "['IfStmt',{}," + "['LiteralExpr',{'type':'boolean','value':true}]," + "['BlockStmt',{}]]", TagType.IfStmt, 3, 2); [EOL] } <line_num>: 419,437
public void testInvokeExprValidation() throws Exception { [EOL]     testValidation("" + "['InvokeExpr',{'op':'.'}," + "['IdExpr',{'name':'x'}]," + "['LiteralExpr',{'type':'string','value':'foo'}]]"); [EOL]     testNotEnoughChildrenValidation("" + "['InvokeExpr',{'op':'[]'}," + "['IdExpr',{'name':'x'}]]", TagType.InvokeExpr, 2, 1); [EOL]     testMissingArgument("" + "['InvokeExpr',{}," + "['IdExpr',{'name':'x'}]," + "['LiteralExpr',{'type':'string','value':'foo'}]]", TagAttr.OP, TagType.InvokeExpr); [EOL] } <line_num>: 439,456
public void testJmpStmtValidation() throws Exception { [EOL]     testValidation("" + "['BreakStmt',{}]"); [EOL]     testValidation("" + "['BreakStmt',{'label':'s'}]"); [EOL]     testValidation("" + "['ContinueStmt',{}]"); [EOL]     testValidation("" + "['ContinueStmt',{'label':'s'}]"); [EOL]     testTooManyChildrenValidation("" + "['BreakStmt',{}," + "['IdExpr',{'name':'s'}]]", TagType.BreakStmt, 0, 1); [EOL]     testTooManyChildrenValidation("" + "['ContinueStmt',{}," + "['IdExpr',{'name':'s'}]]", TagType.ContinueStmt, 0, 1); [EOL] } <line_num>: 458,477
public void testLabelledStmtValidation() throws Exception { [EOL]     testValidation("" + "['LabelledStmt',{'label':'s'}," + "['IdExpr',{'name':'x'}]]"); [EOL]     testNotEnoughChildrenValidation("" + "['LabelledStmt',{'label':'s'}]", TagType.LabelledStmt, 1, 0); [EOL]     testTooManyChildrenValidation("" + "['LabelledStmt',{'label':'s'}," + "['IdExpr',{'name':'x'}]," + "['IdExpr',{'name':'y'}]]", TagType.LabelledStmt, 1, 2); [EOL]     testMissingArgument("" + "['LabelledStmt',{}," + "['IdExpr',{'name':'x'}]]", TagAttr.LABEL, TagType.LabelledStmt); [EOL] } <line_num>: 479,498
public void testLiteralExprValidation() throws Exception { [EOL]     testValidation("" + "['LiteralExpr',{'type':'string','value':'x'}]"); [EOL]     testValidation("" + "['LiteralExpr',{'type':'boolean','value':'true'}]"); [EOL]     testValidation("" + "['LiteralExpr',{'type':'number','value':'1.0'}]"); [EOL]     testTooManyChildrenValidation("" + "['LiteralExpr',{'type':'number','value':'1.0'}," + "['BlockStmt',{}]]", TagType.LiteralExpr, 0, 1); [EOL]     testMissingArgument("" + "['LiteralExpr',{'type':'string'}]", TagAttr.VALUE, TagType.LiteralExpr); [EOL]     testMissingArgument("" + "['LiteralExpr',{'value':'1.0'}]", TagAttr.TYPE, TagType.LiteralExpr); [EOL] } <line_num>: 500,520
public void testLogicalExprValidation() throws Exception { [EOL]     testValidation("" + "['LogicalAndExpr',{}," + "['IdExpr',{'name':'a'}]," + "['IdExpr',{'name':'b'}]]"); [EOL]     testValidation("" + "['LogicalOrExpr',{}," + "['IdExpr',{'name':'a'}]," + "['IdExpr',{'name':'b'}]]"); [EOL]     testTooManyChildrenValidation("" + "['LogicalAndExpr',{}," + "['IdExpr',{'name':'a'}]," + "['IdExpr',{'name':'b'}]," + "['IdExpr',{'name':'c'}]]", TagType.LogicalAndExpr, 2, 3); [EOL]     testNotEnoughChildrenValidation("" + "['LogicalAndExpr',{}," + "['IdExpr',{'name':'a'}]]", TagType.LogicalAndExpr, 2, 1); [EOL] } <line_num>: 522,543
public void testNewExprValidation() throws Exception { [EOL]     testValidation("" + "['NewExpr',{}," + "['IdExpr',{'name':'A'}]," + "['IdExpr',{'name':'x'}]]"); [EOL]     testNotEnoughChildrenValidation("" + "['NewExpr',{}]", TagType.NewExpr, 1, 0); [EOL] } <line_num>: 545,555
public void testObjectExprValidation() throws Exception { [EOL]     testValidation("" + "['ObjectExpr',{}]"); [EOL]     testValidation("" + "['ObjectExpr',{}," + "['DataProp',{'name':'x'}," + "['LiteralExpr',{'type':'number','value':1}]]," + "['DataProp',{'name':'y'}," + "['LiteralExpr',{'type':'number','value':2}]]]"); [EOL]     TagType[] tags = { TagType.DataProp, TagType.GetterProp, TagType.SetterProp }; [EOL]     testWrongChildTypeValidation("" + "['ObjectExpr',{}," + "['DataProp',{'name':'x'}," + "['LiteralExpr',{'type':'number','value':1}]]," + "['IdExpr',{'name':'y'}]]", TagType.ObjectExpr, tags, TagType.IdExpr, 1); [EOL] } <line_num>: 557,576
public void testParamDeclValidation() throws Exception { [EOL]     testValidation("" + "['ParamDecl',{}]"); [EOL]     testValidation("" + "['ParamDecl',{}," + "['IdPatt',{'name':'x'}]," + "['IdPatt',{'name':'y'}]]"); [EOL]     testWrongChildTypeValidation("" + "['ParamDecl',{}," + "['IdPatt',{'name':'x'}]," + "['IdExpr',{'name':'y'}]]", TagType.ParamDecl, TagType.IdPatt, TagType.IdExpr, 1); [EOL] } <line_num>: 578,592
public void testRegExpExprValidation() throws Exception { [EOL]     testValidation("" + "['RegExpExpr',{'body':'abc','flags':''}]"); [EOL]     testValidation("" + "['RegExpExpr',{'body':'abc','flags':'g'}]"); [EOL]     testTooManyChildrenValidation("" + "['RegExpExpr',{'body':'abc','flags':'g'}," + "['IdExpr',{'name':'a'}]]", TagType.RegExpExpr, 0, 1); [EOL]     testMissingArgument("" + "['RegExpExpr',{'body':'abc'}]", TagAttr.FLAGS, TagType.RegExpExpr); [EOL]     testMissingArgument("" + "['RegExpExpr',{'flags':'g'}]", TagAttr.BODY, TagType.RegExpExpr); [EOL] } <line_num>: 594,612
public void testReturnStmtValidation() throws Exception { [EOL]     testValidation("" + "['ReturnStmt',{}]"); [EOL]     testValidation("" + "['ReturnStmt',{}," + "['LiteralExpr',{'type':'number','value':1}]]"); [EOL]     testTooManyChildrenValidation("" + "['ReturnStmt',{}," + "['IdExpr',{'name':'a'}]," + "['IdExpr',{'name':'b'}]]", TagType.ReturnStmt, 1, 2); [EOL] } <line_num>: 614,627
public void testSwitchStmtValidation() throws Exception { [EOL]     testValidation("" + "['SwitchStmt',{}," + "['IdExpr',{'name':'x'}]," + "['Case',{}," + "['LiteralExpr',{'type':'number','value':1}]," + "['CallExpr',{}," + "['IdExpr',{'name':'foo'}]]]," + "['DefaultCase',{}," + "['CallExpr',{}," + "['IdExpr',{'name':'bar'}]]]]"); [EOL]     testValidation("" + "['SwitchStmt',{}," + "['IdExpr',{'name':'x'}]]"); [EOL]     testNotEnoughChildrenValidation("" + "['SwitchStmt',{}]", TagType.SwitchStmt, 1, 0); [EOL]     testWrongChildTypeValidation("" + "['SwitchStmt',{}," + "['IdExpr',{'name':'x'}]," + "['AssignExpr',{'op': '='}," + "['LiteralExpr',{'type':'number','value':1}]," + "['CallExpr',{}," + "['IdExpr',{'name':'foo'}]]]," + "['DefaultCase',{}," + "['CallExpr',{}," + "['IdExpr',{'name':'bar'}]]]]", TagType.SwitchStmt, new TagType[] { TagType.Case, TagType.DefaultCase }, TagType.AssignExpr, 1); [EOL]     testWrongChildTypeValidation("" + "['SwitchStmt',{}," + "['IdExpr',{'name':'x'}]," + "['DefaultCase',{}," + "['CallExpr',{}," + "['IdExpr',{'name':'foo'}]]]," + "['DefaultCase',{}," + "['CallExpr',{}," + "['IdExpr',{'name':'bar'}]]]]", TagType.SwitchStmt, TagType.Case, TagType.DefaultCase, 2); [EOL] } <line_num>: 629,672
public void testThisExprValidation() throws Exception { [EOL]     testValidation("" + "['ThisExpr',{}]"); [EOL]     testTooManyChildrenValidation("" + "['ThisExpr',{}," + "['IdExpr',{'name':'a'}]]", TagType.ThisExpr, 0, 1); [EOL] } <line_num>: 674,683
public void testThrowStmtValidation() throws Exception { [EOL]     testValidation("" + "['ThrowStmt',{}," + "['IdExpr',{'name':'e'}]]"); [EOL]     testTooManyChildrenValidation("" + "['ThrowStmt',{}," + "['IdExpr',{'name':'a'}]," + "['IdExpr',{'name':'b'}]]", TagType.ThrowStmt, 1, 2); [EOL] } <line_num>: 685,696
public void testTryStmtValidation() throws Exception { [EOL]     testValidation("" + "['TryStmt',{}," + "['BlockStmt',{}]," + "['CatchClause',{}," + "['IdPatt',{'name':'e'}]," + "['BlockStmt',{}]]]"); [EOL]     testValidation("" + "['TryStmt',{}," + "['BlockStmt',{}]," + "['CatchClause',{}," + "['IdPatt',{'name':'e'}]," + "['BlockStmt',{}]]," + "['BlockStmt',{}]]"); [EOL]     testNotEnoughChildrenValidation("" + "['TryStmt',{}," + "['CatchClause',{}," + "['IdPatt',{'name':'e'}]," + "['BlockStmt',{}]]]", TagType.TryStmt, 2, 1); [EOL]     testTooManyChildrenValidation("" + "['TryStmt',{}," + "['BlockStmt',{}]," + "['CatchClause',{}," + "['IdPatt',{'name':'e'}]," + "['BlockStmt',{}]]," + "['BlockStmt',{}]," + "['BlockStmt',{}]]", TagType.TryStmt, 3, 4); [EOL]     testWrongChildTypeValidation("" + "['TryStmt',{}," + "['BlockStmt',{}]," + "['BlockStmt',{}," + "['IdPatt',{'name':'e'}]," + "['BlockStmt',{}]]," + "['BlockStmt',{}]]", TagType.TryStmt, new TagType[] { TagType.CatchClause, TagType.Empty }, TagType.BlockStmt, 1); [EOL]     testWrongChildTypeValidation("" + "['TryStmt',{}," + "['BlockStmt',{}]," + "['CatchClause',{}," + "['IdPatt',{'name':'e'}]," + "['BlockStmt',{}]]," + "['IdExpr',{'name': 'x'}]]", TagType.TryStmt, TagType.BlockStmt, TagType.IdExpr, 2); [EOL] } <line_num>: 698,748
public void testUnaryExprValidation() throws Exception { [EOL]     testValidation("" + "['UnaryExpr',{'op':'-'}," + "['IdExpr',{'name':'x'}]]"); [EOL]     testValidation("" + "['UnaryExpr',{'op':'!'}," + "['CallExpr',{}," + "['IdExpr',{'name':'f'}]," + "['IdExpr',{'name':'x'}]]]"); [EOL]     testNotEnoughChildrenValidation("" + "['UnaryExpr',{'op':'-'}]", TagType.UnaryExpr, 1, 0); [EOL]     testTooManyChildrenValidation("" + "['UnaryExpr',{'op':'+'}," + "['IdExpr',{'name':'x'}]," + "['IdExpr',{'name':'y'}]]", TagType.UnaryExpr, 1, 2); [EOL]     testMissingArgument("" + "['UnaryExpr',{}," + "['IdExpr',{'name':'x'}]]", TagAttr.OP, TagType.UnaryExpr); [EOL] } <line_num>: 750,774
public void testVarDeclValidation() throws Exception { [EOL]     testValidation("" + "['VarDecl',{}," + "['IdPatt',{'name':'x'}]]"); [EOL]     testValidation("" + "['VarDecl',{}," + "['InitPatt',{}," + "['IdPatt',{'name':'x'}]," + "['LiteralExpr',{'type':'number','value':0}]]]"); [EOL]     testValidation("" + "['VarDecl',{}," + "['InitPatt',{}," + "['IdPatt',{'name':'x'}]," + "['LiteralExpr',{'type':'number','value':0}]]," + "['IdPatt',{'name':'y'}]]"); [EOL]     testNotEnoughChildrenValidation("" + "['VarDecl',{}]", TagType.VarDecl, 1, 0); [EOL]     testWrongChildTypeValidation("" + "['VarDecl',{}," + "['InitPatt',{}," + "['IdPatt',{'name':'x'}]," + "['LiteralExpr',{'type':'number','value':0}]]," + "['IdExpr',{'name':'y'}]," + "['IdPatt',{'name':'z'}]]", TagType.VarDecl, new TagType[] { TagType.InitPatt, TagType.IdPatt }, TagType.IdExpr, 1); [EOL] } <line_num>: 776,807
public void testWhileStmtValidation() throws Exception { [EOL]     testValidation("" + "['WhileStmt',{}," + "['LiteralExpr',{'type':'boolean','value':true}]," + "['BlockStmt',{}]]"); [EOL]     testValidation("" + "['WhileStmt',{}," + "['LiteralExpr',{'type':'boolean','value':true}]," + "['IdExpr',{'name':'x'}]]"); [EOL]     testNotEnoughChildrenValidation("" + "['WhileStmt',{}," + "['BlockStmt',{}]]", TagType.WhileStmt, 2, 1); [EOL]     testTooManyChildrenValidation("" + "['WhileStmt',{}," + "['LiteralExpr',{'type':'boolean','value':true}]," + "['IdExpr',{'name':'x'}]," + "['IdExpr',{'name':'y'}]]", TagType.WhileStmt, 2, 3); [EOL] } <line_num>: 809,830
public void testWithStmtValidation() throws Exception { [EOL]     testValidation("" + "['WithStmt',{}," + "['IdExpr',{'name':'x'}]," + "['BlockStmt',{}]]"); [EOL]     testNotEnoughChildrenValidation("" + "['WithStmt',{}," + "['BlockStmt',{}]]", TagType.WithStmt, 2, 1); [EOL]     testTooManyChildrenValidation("" + "['WithStmt',{}," + "['IdExpr',{'name':'A'}]," + "['IdExpr',{'name':'x'}]," + "['IdExpr',{'name':'y'}]]", TagType.WithStmt, 2, 3); [EOL] } <line_num>: 832,849
