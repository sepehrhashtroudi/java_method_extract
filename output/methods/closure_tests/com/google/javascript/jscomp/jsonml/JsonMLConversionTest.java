@Override [EOL] public CompilerPass getProcessor(Compiler compiler) { [EOL]     return null; [EOL] } <line_num>: 40,43
@Override [EOL] public void setUp() { [EOL]     enableEcmaScript5(true); [EOL] } <line_num>: 45,48
private void testJsonMLToAstConversion(String js) throws Exception { [EOL]     JsonML jsonml = JsonMLParser.parse(js); [EOL]     Node root = parseExpectedJs(js); [EOL]     Node ast = root.getFirstChild(); [EOL]     Preconditions.checkState(ast.getType() == Token.SCRIPT); [EOL]     testJsonMLToAstConversion(ast, jsonml, js); [EOL] } <line_num>: 50,57
private void testJsonMLToAstConversion(Node astRoot, JsonML jsonmlRoot, String js) { [EOL]     Compiler compiler = new Compiler(); [EOL]     JsonMLAst ast = new JsonMLAst(jsonmlRoot); [EOL]     Node resultAstRoot = ast.getAstRoot(compiler); [EOL]     String explanation = resultAstRoot.checkTreeEquals(astRoot); [EOL]     assertNull("JsonML -> AST converter returned incorect result for " + js + "\n" + explanation, explanation); [EOL] } <line_num>: 59,68
private void testAstToJsonMLConverstion(Node astRoot, JsonML jsonmlRoot, String js) { [EOL]     JsonML resultJsonMLRoot = (new Writer()).processAst(astRoot); [EOL]     String explanation = JsonMLUtil.compare(resultJsonMLRoot, jsonmlRoot); [EOL]     assertNull("AST -> JsonML converter returned incorrect result for " + js + "\n" + explanation, explanation); [EOL] } <line_num>: 70,76
private void testConversion(String js) throws Exception { [EOL]     JsonML jsonml = JsonMLParser.parse(js); [EOL]     Node root = parseExpectedJs(js); [EOL]     Node ast = root.getFirstChild(); [EOL]     Preconditions.checkState(ast.getType() == Token.SCRIPT); [EOL]     testJsonMLToAstConversion(ast, jsonml, js); [EOL]     jsonml = JsonMLParser.parse(js); [EOL]     testAstToJsonMLConverstion(ast, jsonml, js); [EOL] } <line_num>: 78,88
public void testArray() throws Exception { [EOL]     testConversion("[,]"); [EOL]     testConversion("[]"); [EOL]     testConversion("[function (x) {}]"); [EOL]     testConversion("[[], [a, [], [[[]], 1], f([a])], 1];"); [EOL]     testConversion("x = [1, 2, 3]"); [EOL]     testConversion("var x = [1, 2, 3]"); [EOL]     testConversion("[, 1, Object(), , , 2]"); [EOL]     testConversion("[{x: 'abc', y: 1}]"); [EOL] } <line_num>: 90,99
public void testArray1() throws Exception { [EOL]     testConversion("[,]"); [EOL] } <line_num>: 101,103
public void testAssignOperators() throws Exception { [EOL]     testConversion("x += 1, x -= 1, x *= 1, x /= 1, x %= 1"); [EOL]     testConversion("x |= 1, x ^= x, x &= 0"); [EOL]     testConversion("x <<= 1, x >>= 1, x >>>= 1"); [EOL]     testConversion("y = x += 1"); [EOL] } <line_num>: 105,110
public void testCalls() throws Exception { [EOL]     testConversion("f()"); [EOL]     testConversion("f(1)"); [EOL]     testConversion("f('a')"); [EOL]     testConversion("f(true)"); [EOL]     testConversion("f(null)"); [EOL]     testConversion("f(undefined)"); [EOL]     testConversion("f(a + b)"); [EOL]     testConversion("f(g(h(a)) * h(g(u(z('a')))))"); [EOL]     testConversion("x = f()"); [EOL]     testConversion("x = f(1)"); [EOL]     testConversion("x = f(a + b)"); [EOL]     testConversion("x = f(g(h(a)) * h(g(u(z('a')))))"); [EOL]     testConversion("String('a')"); [EOL]     testConversion("Number(1)"); [EOL]     testConversion("Boolean(0)"); [EOL]     testConversion("Object()"); [EOL]     testConversion("Array('a', 1, false, null, Object(), String('a'))"); [EOL]     testConversion("(function() {})()"); [EOL]     testConversion("(function(x) {})(x)"); [EOL]     testConversion("(function(x) {var y = x << 1; return y})(x)"); [EOL]     testConversion("(function(x) {y = x << 1; return y})(x)"); [EOL]     testConversion("var x = (function(x) {y = x << 1; return y})(x)"); [EOL]     testConversion("var x = (function(x) {return x << 1})(x)"); [EOL]     testConversion("eval()"); [EOL]     testConversion("eval('x')"); [EOL]     testConversion("x = eval('x')"); [EOL]     testConversion("var x = eval('x')"); [EOL]     testConversion("eval(Template('foo${bar}baz')); var Template;"); [EOL]     testConversion("a.x()"); [EOL]     testConversion("a[x]()"); [EOL]     testConversion("z = a.x()"); [EOL]     testConversion("var z = a.x()"); [EOL]     testConversion("z = a[x]()"); [EOL]     testConversion("z = a['x']()"); [EOL]     testConversion("var z = a[x]()"); [EOL]     testConversion("var z = a['x']()"); [EOL]     testConversion("a.x(y)"); [EOL]     testConversion("a[x](y)"); [EOL]     testConversion("a['x'](y)"); [EOL]     testConversion("a[x](y, z, 'a', null, true, f(y))"); [EOL]     testConversion("a['x'](y, z, 'a', null, true, f(y))"); [EOL]     testConversion("a[b[c[d]]()].x"); [EOL]     testConversion("(f())()"); [EOL]     testConversion("(f(x))(y)"); [EOL]     testConversion("(f = getFn())()"); [EOL] } <line_num>: 112,165
public void testConditionals() throws Exception { [EOL]     testConversion("x ? y : z"); [EOL]     testConversion("result = x ? y : z"); [EOL] } <line_num>: 167,170
public void testDecIncOperators() throws Exception { [EOL]     testConversion("x--"); [EOL]     testConversion("--x"); [EOL]     testConversion("x++"); [EOL]     testConversion("++x"); [EOL]     testConversion("var y=x++, z=++x; var s=y--, r=++y;"); [EOL] } <line_num>: 171,177
public void testDelete() throws Exception { [EOL]     testConversion("delete a"); [EOL]     testConversion("delete a.x"); [EOL]     testConversion("delete a[0]"); [EOL]     testConversion("delete a.x[0]"); [EOL] } <line_num>: 179,184
public void testDirectives() throws Exception { [EOL]     testConversion("'use strict'"); [EOL]     testConversion("function foo() {'use strict'}"); [EOL]     testConversion("'use strict'; function foo() {'use strict'}"); [EOL] } <line_num>: 186,190
public void testDoWhile() throws Exception { [EOL]     testConversion("do {} while (true)"); [EOL]     testConversion("do {;} while (true)"); [EOL]     testConversion("do {} while (f(x, y))"); [EOL]     testConversion("do {} while (f(f(f(x, y))))"); [EOL]     testConversion("do {} while ((f(f(f(x, y))))())"); [EOL]     testConversion("do {2 + 3; q = 2 + 3; var v = y * z;" + "g = function(a) {true; var b = a + 1; return a * a}} while (--x)"); [EOL] } <line_num>: 192,201
public void testFor() throws Exception { [EOL]     testConversion("for (;true;) {;}"); [EOL]     testJsonMLToAstConversion("for (i = 0; i < 10; ++i) x++"); [EOL]     testConversion("for (i = 0; i < 10; ++i) {x++}"); [EOL]     testConversion("for (i = 0; i < 10; ++i) {2 + 3; q = 2 + 3; " + "var v = y * z; g = function(a) {true; var b = a + 1;" + "return a * a}}"); [EOL]     testConversion("for(;true;) {break}"); [EOL]     testConversion("for(i = 0; i < 10; ++i) {if (i > 5) {break}}"); [EOL]     testConversion("s: for(i = 0; i < 10; ++i) {if (i > 5) {break s}}"); [EOL]     testConversion("for (i = 0;true; ++i) {" + "if (i % 2) {continue} else {var x = i / 3; f(x)}}"); [EOL] } <line_num>: 203,216
public void testForIn() throws Exception { [EOL]     testConversion("for (var i in x) {}"); [EOL]     testConversion("for (var i in x) {;}"); [EOL]     testConversion("for (var i in x) {f(x)}"); [EOL]     testConversion("s: for(var i in x) {if (i > 5) {break s}}"); [EOL]     testConversion("for (var i in x) {if (i % 2) {" + "continue} else {var x = i / 3; f(x)}}"); [EOL]     testConversion("for (var i in x) {2 + 3; q = 2 + 3; var v = y * z; " + "g = function(a) {true; var b = a + 1; return a * a}}"); [EOL]     testConversion("for (i in x) {}"); [EOL]     testConversion("for (i in x) {;}"); [EOL]     testConversion("for (i in x) {f(x)}"); [EOL]     testConversion("s: for (i in x) {if (i > 5) {break s}}"); [EOL]     testConversion("for (i in x) {if (i % 2) {" + "continue} else {var x = i / 3; f(x)}}"); [EOL]     testConversion("for (i in x) {2 + 3; q = 2 + 3; var v = y * z; " + "g = function(a) {true; var b = a + 1; return a * a}}"); [EOL] } <line_num>: 218,237
public void testFunctions() throws Exception { [EOL]     testConversion("(function () {})"); [EOL]     testConversion("(function (x, y) {})"); [EOL]     testConversion("(function () {})()"); [EOL]     testConversion("(function (x, y) {})()"); [EOL]     testConversion("[ function f() {} ]"); [EOL]     testConversion("var f = function f() {};"); [EOL]     testConversion("for (function f() {};true;) {}"); [EOL]     testConversion("x = (function (x, y) {})"); [EOL]     testConversion("function f() {}"); [EOL]     testConversion("for (;true;) { function f() {} }"); [EOL]     testConversion("function f() {;}"); [EOL]     testConversion("function f() {x}"); [EOL]     testConversion("function f() {x;y;z}"); [EOL]     testConversion("function f() {{}}"); [EOL] } <line_num>: 239,256
public void testIfElse1() throws Exception { [EOL]     testConversion("if (true) {x = 1}"); [EOL]     testConversion("if (true) {x = 1} else {x = 2}"); [EOL]     testConversion("if (f(f(f()))) {x = 1} else {x = 2}"); [EOL]     testConversion("if ((f(f(f())))()) {x = 1} else {x = 2}"); [EOL]     testConversion("if (true) {x = 1}; x = 1;"); [EOL] } <line_num>: 258,264
public void testLabels() throws Exception { [EOL]     testConversion("s: ;"); [EOL]     testConversion("s: {;}"); [EOL]     testConversion("s: while(true) {;}"); [EOL]     testConversion("s: switch (x) {case 'a': break s;}"); [EOL] } <line_num>: 266,271
public void testLogicalExpr() throws Exception { [EOL]     testConversion("a && b"); [EOL]     testConversion("a || b"); [EOL]     testConversion("a && b || c"); [EOL]     testConversion("a && (b || c)"); [EOL]     testConversion("f(x) && (function (x) {" + "return x % 2 == 0 })(z) || z % 3 == 0 ? true : false"); [EOL] } <line_num>: 273,280
public void testMathExpr() throws Exception { [EOL]     testConversion("2 + 3 * 4"); [EOL]     testConversion("(2 + 3) * 4"); [EOL]     testConversion("2 * (3 + 4)"); [EOL] } <line_num>: 282,286
public void testMember() throws Exception { [EOL]     testConversion("o.x"); [EOL]     testConversion("a.b.c"); [EOL]     testConversion("a.b.c.d"); [EOL]     testConversion("o[x]"); [EOL]     testConversion("o[0]"); [EOL]     testConversion("o[2 + 3 * 4]"); [EOL]     testConversion("o[(function (x){var y = g(x) << 1; return y * x})()]"); [EOL]     testConversion("o[o.x]"); [EOL]     testConversion("o.x[x]"); [EOL]     testConversion("a.b[o.x]"); [EOL]     testConversion("a.b[1]"); [EOL]     testConversion("a[b[c[d]]].x"); [EOL] } <line_num>: 288,301
public void testNew() throws Exception { [EOL]     testConversion("new A"); [EOL]     testConversion("new A()"); [EOL]     testConversion("new A(x, y, z)"); [EOL]     testConversion("new A(f(x), g(y), h(z))"); [EOL]     testConversion("new A(x, new B(x, y), z)"); [EOL]     testConversion("new A(1), new B()"); [EOL]     testConversion("new A, B"); [EOL]     testConversion("x = new A(a)"); [EOL]     testConversion("var x = new A(a, b)"); [EOL]     testConversion("var x = new A(1), y = new B()"); [EOL] } <line_num>: 303,316
public void testObject0() throws Exception { [EOL] } <line_num>: 318,323
public void testObject() throws Exception { [EOL]     testConversion("x = {}"); [EOL]     testConversion("var x = {}"); [EOL]     testConversion("x = {x: 1, y: 2}"); [EOL]     testConversion("x = {x: null}"); [EOL]     testConversion("x = {a: function f() {}}"); [EOL]     testConversion("x = {a: f()}"); [EOL]     testConversion("x = {a: function f() {2 + 3; q = 2 + 3; var v = y * z; " + "g = function(a) {true; var b = a + 1; return a * a}}}"); [EOL]     testConversion("x = {get a() {return 1}}"); [EOL]     testConversion("x = {set a(b) {}}"); [EOL] } <line_num>: 325,342
public void testOperators() throws Exception { [EOL]     testConversion("x instanceof Null"); [EOL]     testConversion("!x instanceof A"); [EOL]     testConversion("!(x instanceof A)"); [EOL]     testConversion("'a' in x"); [EOL]     testConversion("if('a' in x) {f(x)}"); [EOL]     testConversion("undefined in A"); [EOL]     testConversion("!(Number(1) in [2, 3, 4])"); [EOL]     testConversion("true ? x : y"); [EOL]     testConversion("(function() {var y = 2 + 3 * 4; return y >> 1})() ? x : y"); [EOL] } <line_num>: 344,356
public void testReturnStatement() throws Exception { [EOL]     testConversion("x = function f() {return}"); [EOL]     testConversion("x = function f() {return 1}"); [EOL]     testConversion("x = function f() {return 2 + 3 / 4}"); [EOL]     testConversion("x = function f() {return function() {}}"); [EOL]     testConversion("x = function f() {var y = 2; " + "return function() {return y * 3}}"); [EOL]     testConversion("x = function f() {z = 2 + 3; " + "return (function(z) {return z * y})(z)}"); [EOL] } <line_num>: 358,367
public void testRegExp() throws Exception { [EOL]     testConversion("/ab/"); [EOL]     testConversion("/ab/g"); [EOL]     testConversion("x = /ab/"); [EOL]     testConversion("x = /ab/g"); [EOL]     testConversion("var x = /ab/"); [EOL]     testConversion("var x = /ab/g"); [EOL]     testConversion("function f() {" + "/ab/; var x = /ab/; (function g() {/ab/; var x = /ab/})()}"); [EOL]     testConversion("var f = function () {return /ab/g;}"); [EOL] } <line_num>: 369,379
public void testSimplePrograms() throws Exception { [EOL]     testConversion(";"); [EOL]     testConversion("1"); [EOL]     testConversion("x"); [EOL]     testConversion("x=1"); [EOL]     testConversion("{}"); [EOL]     testConversion("{;}"); [EOL]     testConversion("{x=1}"); [EOL]     testConversion("x='a'"); [EOL]     testConversion("true"); [EOL]     testConversion("false"); [EOL]     testConversion("x=true"); [EOL]     testConversion("x=false"); [EOL]     testConversion("undefined"); [EOL]     testConversion("x=undefined"); [EOL]     testConversion("null"); [EOL]     testConversion("x = null"); [EOL]     testConversion("this"); [EOL]     testConversion("2 + 3; q = 2 + 3; var v = y * z; " + "g = function(a) {true; var b = a + 1; return a * a}"); [EOL]     testConversion("a; b"); [EOL]     testConversion("a; b; c; d"); [EOL]     testConversion("x = function () {}"); [EOL]     testConversion("x = function f() {}"); [EOL]     testConversion("x = function (arg1, arg2) {}"); [EOL]     testConversion("x = function f(arg1, arg2) {}"); [EOL]     testConversion("x = function f(arg1, arg2) {1}"); [EOL]     testConversion("x = function f(arg1, arg2) {x}"); [EOL]     testConversion("x = function f(arg1, arg2) {x = 1 + 1}"); [EOL]     testConversion("var re = new RegExp(document.a.b.c);" + "var m = re.exec(document.a.b.c);"); [EOL] } <line_num>: 381,423
public void testSwitch() throws Exception { [EOL]     testConversion("switch (x) {}"); [EOL]     testConversion("switch (x) {case 'a':}"); [EOL]     testConversion("switch (x) {case 'a':case 'b':}"); [EOL]     testConversion("switch (x) {case 'a':case 'b': x}"); [EOL]     testConversion("switch (x) {case 'a':case 'b': {;}}"); [EOL]     testConversion("switch (x) {case 'a':case 'b': f()}"); [EOL]     testConversion("switch (x) {case 'x': case 'y': {;} case 'a':case 'b': f()}"); [EOL]     testConversion("switch (x) {case 'a': f(x)}"); [EOL]     testConversion("switch (x) {case 'a': {f()} {g(x)}}"); [EOL]     testConversion("switch (x) {case 'a': f(); g(x)}"); [EOL]     testConversion("switch (x) {default: ;}"); [EOL]     testConversion("switch (x) {default:case 'a': ;}"); [EOL]     testConversion("switch (x) {case 'a':case'b':default: f()}"); [EOL]     testConversion("switch (x) {default:f(x); g(); case 'a': ; case 'b': g(x)}"); [EOL]     testConversion("switch (x) {case 'a': default: {f(x); g(z)} case 'b': g(x)}"); [EOL]     testConversion("switch (x) {case x: {;}}"); [EOL] } <line_num>: 425,442
public void testType() throws Exception { [EOL]     testConversion("undefined"); [EOL]     testConversion("null"); [EOL]     testConversion("0"); [EOL]     testConversion("+0"); [EOL]     testConversion("0.0"); [EOL]     testConversion("3.14"); [EOL]     testConversion("+3.14"); [EOL]     testConversion("true"); [EOL]     testConversion("false"); [EOL] } <line_num>: 444,457
public void testThis() throws Exception { [EOL]     testConversion("this"); [EOL]     testConversion("var x = this"); [EOL]     testConversion("this.foo()"); [EOL]     testConversion("var x = this.foo()"); [EOL]     testConversion("this.bar"); [EOL]     testConversion("var x = this.bar()"); [EOL]     testConversion("switch(this) {}"); [EOL]     testConversion("x + this"); [EOL] } <line_num>: 459,468
public void testThrow() throws Exception { [EOL]     testConversion("throw e"); [EOL]     testConversion("throw 2 + 3 * 4"); [EOL]     testConversion("throw (function () {2 + 3; q = 2 + 3; var v = y * z; " + "g = function(a) {true; var b = a + 1; return a * a}})()"); [EOL]     testConversion("throw f(x)"); [EOL]     testConversion("throw f(f(f(x)))"); [EOL]     testConversion("throw (f(f(x), y))()"); [EOL] } <line_num>: 470,478
public void testTry() throws Exception { [EOL]     testConversion("try {} catch (e) {}"); [EOL]     testConversion("try {;} catch (e) {;}"); [EOL]     testConversion("try {var x = 0; y / x} catch (e) {f(e)}"); [EOL]     testConversion("try {2 + 3; q = 2 + 3; var v = y * z; " + "g = function(a) {true; var b = a + 1; h(q); return a * a}; " + "h(q)} catch (e) {f(x)}"); [EOL]     testConversion("try {} finally {}"); [EOL]     testConversion("try {;} finally {;}"); [EOL]     testConversion("try {var x = 0; y / x} finally {f(y)}"); [EOL]     testConversion("try {2 + 3; q = 2 + 3; var v = y * z; " + "g = function(a) {true; var b = a + 1; h(q); return a * a}; " + "h(q)} finally {f(x)}"); [EOL]     testConversion("try {} catch (e) {} finally {}"); [EOL]     testConversion("try {;} catch (e) {;} finally {;}"); [EOL]     testConversion("try {var x = 0; y / x} catch (e) {;} finally {;}"); [EOL]     testConversion("try {2 + 3; q = 2 + 3; var v = y * z; " + "g = function(a) {true; var b = a + 1; h(q); return a * a}; h(q)} " + "catch (e) {f(x)} finally {f(x)}"); [EOL] } <line_num>: 480,501
public void testTypeof() throws Exception { [EOL]     testConversion("typeof undefined"); [EOL]     testConversion("typeof null"); [EOL]     testConversion("typeof 1"); [EOL]     testConversion("typeof 'a'"); [EOL]     testConversion("typeof false"); [EOL]     testConversion("typeof Null()"); [EOL]     testConversion("typeof Number(1)"); [EOL]     testConversion("typeof String('a')"); [EOL]     testConversion("typeof Boolean(0)"); [EOL]     testConversion("typeof x"); [EOL]     testConversion("typeof new A()"); [EOL]     testConversion("typeof new A(x)"); [EOL]     testConversion("typeof f(x)"); [EOL]     testConversion("typeof (function() {})()"); [EOL]     testConversion("typeof 2 + 3 * 4"); [EOL]     testConversion("typeof typeof x"); [EOL]     testConversion("typeof typeof typeof x"); [EOL] } <line_num>: 503,524
public void testUnaryExpressions() throws Exception { [EOL]     testConversion("!x"); [EOL]     testConversion("!null"); [EOL]     testConversion("!3.14"); [EOL]     testConversion("!true"); [EOL]     testConversion("~x"); [EOL]     testConversion("~null"); [EOL]     testConversion("~3.14"); [EOL]     testConversion("~true"); [EOL]     testConversion("+x"); [EOL]     testConversion("+null"); [EOL]     testConversion("+3.14"); [EOL]     testConversion("+true"); [EOL]     testConversion("-x"); [EOL]     testConversion("-null"); [EOL]     testConversion("-true"); [EOL]     testConversion("!~+-z"); [EOL]     testConversion("void x"); [EOL]     testConversion("void null"); [EOL]     testConversion("void void !x"); [EOL]     testConversion("void (x + 1)"); [EOL] } <line_num>: 526,551
public void testVarDeclarations() throws Exception { [EOL]     testConversion("var x"); [EOL]     testConversion("var x = 1"); [EOL]     testConversion("var x = 1 + 1"); [EOL]     testConversion("var x = 'a' + 'b'"); [EOL]     testConversion("var x, y, z"); [EOL]     testConversion("var x = 2, y = 2 * x, z"); [EOL]     testConversion("var x = function () {}"); [EOL]     testConversion("var x = function f() {}"); [EOL]     testConversion("var x = function f(arg1, arg2) {}"); [EOL]     testConversion("var x = function f(arg1, arg2) {1}"); [EOL]     testConversion("var x = function f(arg1, arg2) {x}"); [EOL]     testConversion("var x = function f(arg1, arg2) {x = 2 * 3}"); [EOL]     testConversion("var x = function f() {var x}"); [EOL]     testConversion("var x = function f() {var y = (z + 2) * q}"); [EOL]     testConversion("var x = function f(a, b) {" + "var y = function g(a, b) {z = a + b}}"); [EOL] } <line_num>: 553,575
public void testWhile() throws Exception { [EOL]     testConversion("while (true) {;}"); [EOL]     testConversion("while (true) {f()}"); [EOL]     testConversion("while (f(x, y)) {break;}"); [EOL]     testConversion("while (f(f(f(x, y)))) {}"); [EOL]     testConversion("while ((f(f(f(x, y))))()) {}"); [EOL]     testConversion("while (x--) {2 + 3; q = 2 + 3; var v = y * z; " + "g = function(a) {true; var b = a + 1; return a * a}}"); [EOL] } <line_num>: 577,586
public void testWith() throws Exception { [EOL]     testConversion("with ({}) {}"); [EOL]     testConversion("with ({}) {;}"); [EOL]     testConversion("with (x) {}"); [EOL]     testConversion("with (x) {f(x)}"); [EOL]     testConversion("with ({a: function f() {}}) {f(1)}"); [EOL]     testConversion("with ({z: function f() {2 + 3; q = 2 + 3; var v = y * z;" + "g = function(a) {true; var b = a + 1; return a * a}}}) {f(1)}"); [EOL]     testConversion("with (x in X) {x++}"); [EOL] } <line_num>: 588,597
