public StrBuilder() { [EOL]     this(CAPACITY); [EOL] } <line_num>: 102,104
public StrBuilder(int initialCapacity) { [EOL]     super(); [EOL]     if (initialCapacity <= 0) { [EOL]         initialCapacity = CAPACITY; [EOL]     } [EOL]     buffer = new char[initialCapacity]; [EOL] } <line_num>: 111,117
public StrBuilder(final String str) { [EOL]     super(); [EOL]     if (str == null) { [EOL]         buffer = new char[CAPACITY]; [EOL]     } else { [EOL]         buffer = new char[str.length() + CAPACITY]; [EOL]         append(str); [EOL]     } [EOL] } <line_num>: 125,133
StrBuilderTokenizer() { [EOL]     super(); [EOL] } <line_num>: 2810,2812
StrBuilderReader() { [EOL]     super(); [EOL] } <line_num>: 2847,2849
StrBuilderWriter() { [EOL]     super(); [EOL] } <line_num>: 2934,2936
public String getNewLineText() { [EOL]     return newLine; [EOL] } <line_num>: 141,143
public StrBuilder setNewLineText(final String newLine) { [EOL]     this.newLine = newLine; [EOL]     return this; [EOL] } <line_num>: 151,154
public String getNullText() { [EOL]     return nullText; [EOL] } <line_num>: 162,164
public StrBuilder setNullText(String nullText) { [EOL]     if (nullText != null && nullText.isEmpty()) { [EOL]         nullText = null; [EOL]     } [EOL]     this.nullText = nullText; [EOL]     return this; [EOL] } <line_num>: 172,178
@Override [EOL] public int length() { [EOL]     return size; [EOL] } <line_num>: 186,189
public StrBuilder setLength(final int length) { [EOL]     if (length < 0) { [EOL]         throw new StringIndexOutOfBoundsException(length); [EOL]     } [EOL]     if (length < size) { [EOL]         size = length; [EOL]     } else if (length > size) { [EOL]         ensureCapacity(length); [EOL]         final int oldEnd = size; [EOL]         final int newEnd = length; [EOL]         size = length; [EOL]         for (int i = oldEnd; i < newEnd; i++) { [EOL]             buffer[i] = '\0'; [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 199,215
public int capacity() { [EOL]     return buffer.length; [EOL] } <line_num>: 223,225
public StrBuilder ensureCapacity(final int capacity) { [EOL]     if (capacity > buffer.length) { [EOL]         final char[] old = buffer; [EOL]         buffer = new char[capacity * 2]; [EOL]         System.arraycopy(old, 0, buffer, 0, size); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 233,240
public StrBuilder minimizeCapacity() { [EOL]     if (buffer.length > length()) { [EOL]         final char[] old = buffer; [EOL]         buffer = new char[length()]; [EOL]         System.arraycopy(old, 0, buffer, 0, size); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 247,254
public int size() { [EOL]     return size; [EOL] } <line_num>: 265,267
public boolean isEmpty() { [EOL]     return size == 0; [EOL] } <line_num>: 277,279
public StrBuilder clear() { [EOL]     size = 0; [EOL]     return this; [EOL] } <line_num>: 292,295
@Override [EOL] public char charAt(final int index) { [EOL]     if (index < 0 || index >= length()) { [EOL]         throw new StringIndexOutOfBoundsException(index); [EOL]     } [EOL]     return buffer[index]; [EOL] } <line_num>: 307,313
public StrBuilder setCharAt(final int index, final char ch) { [EOL]     if (index < 0 || index >= length()) { [EOL]         throw new StringIndexOutOfBoundsException(index); [EOL]     } [EOL]     buffer[index] = ch; [EOL]     return this; [EOL] } <line_num>: 325,331
public StrBuilder deleteCharAt(final int index) { [EOL]     if (index < 0 || index >= size) { [EOL]         throw new StringIndexOutOfBoundsException(index); [EOL]     } [EOL]     deleteImpl(index, index + 1, 1); [EOL]     return this; [EOL] } <line_num>: 342,348
public char[] toCharArray() { [EOL]     if (size == 0) { [EOL]         return ArrayUtils.EMPTY_CHAR_ARRAY; [EOL]     } [EOL]     final char[] chars = new char[size]; [EOL]     System.arraycopy(buffer, 0, chars, 0, size); [EOL]     return chars; [EOL] } <line_num>: 356,363
public char[] toCharArray(final int startIndex, int endIndex) { [EOL]     endIndex = validateRange(startIndex, endIndex); [EOL]     final int len = endIndex - startIndex; [EOL]     if (len == 0) { [EOL]         return ArrayUtils.EMPTY_CHAR_ARRAY; [EOL]     } [EOL]     final char[] chars = new char[len]; [EOL]     System.arraycopy(buffer, startIndex, chars, 0, len); [EOL]     return chars; [EOL] } <line_num>: 375,384
public char[] getChars(char[] destination) { [EOL]     final int len = length(); [EOL]     if (destination == null || destination.length < len) { [EOL]         destination = new char[len]; [EOL]     } [EOL]     System.arraycopy(buffer, 0, destination, 0, len); [EOL]     return destination; [EOL] } <line_num>: 392,399
public void getChars(final int startIndex, final int endIndex, final char[] destination, final int destinationIndex) { [EOL]     if (startIndex < 0) { [EOL]         throw new StringIndexOutOfBoundsException(startIndex); [EOL]     } [EOL]     if (endIndex < 0 || endIndex > length()) { [EOL]         throw new StringIndexOutOfBoundsException(endIndex); [EOL]     } [EOL]     if (startIndex > endIndex) { [EOL]         throw new StringIndexOutOfBoundsException("end < start"); [EOL]     } [EOL]     System.arraycopy(buffer, startIndex, destination, destinationIndex, endIndex - startIndex); [EOL] } <line_num>: 411,422
public StrBuilder appendNewLine() { [EOL]     if (newLine == null) { [EOL]         append(SystemUtils.LINE_SEPARATOR); [EOL]         return this; [EOL]     } [EOL]     return append(newLine); [EOL] } <line_num>: 434,440
public StrBuilder appendNull() { [EOL]     if (nullText == null) { [EOL]         return this; [EOL]     } [EOL]     return append(nullText); [EOL] } <line_num>: 447,452
public StrBuilder append(final Object obj) { [EOL]     if (obj == null) { [EOL]         return appendNull(); [EOL]     } [EOL]     return append(obj.toString()); [EOL] } <line_num>: 461,466
@Override [EOL] public StrBuilder append(final CharSequence seq) { [EOL]     if (seq == null) { [EOL]         return appendNull(); [EOL]     } [EOL]     return append(seq.toString()); [EOL] } <line_num>: 476,482
@Override [EOL] public StrBuilder append(final CharSequence seq, final int startIndex, final int length) { [EOL]     if (seq == null) { [EOL]         return appendNull(); [EOL]     } [EOL]     return append(seq.toString(), startIndex, length); [EOL] } <line_num>: 494,500
public StrBuilder append(final String str) { [EOL]     if (str == null) { [EOL]         return appendNull(); [EOL]     } [EOL]     final int strLen = str.length(); [EOL]     if (strLen > 0) { [EOL]         final int len = length(); [EOL]         ensureCapacity(len + strLen); [EOL]         str.getChars(0, strLen, buffer, len); [EOL]         size += strLen; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 509,521
public StrBuilder append(final String str, final int startIndex, final int length) { [EOL]     if (str == null) { [EOL]         return appendNull(); [EOL]     } [EOL]     if (startIndex < 0 || startIndex > str.length()) { [EOL]         throw new StringIndexOutOfBoundsException("startIndex must be valid"); [EOL]     } [EOL]     if (length < 0 || (startIndex + length) > str.length()) { [EOL]         throw new StringIndexOutOfBoundsException("length must be valid"); [EOL]     } [EOL]     if (length > 0) { [EOL]         final int len = length(); [EOL]         ensureCapacity(len + length); [EOL]         str.getChars(startIndex, startIndex + length, buffer, len); [EOL]         size += length; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 533,550
public StrBuilder append(final String format, final Object... objs) { [EOL]     return append(String.format(format, objs)); [EOL] } <line_num>: 561,563
public StrBuilder append(final StringBuffer str) { [EOL]     if (str == null) { [EOL]         return appendNull(); [EOL]     } [EOL]     final int strLen = str.length(); [EOL]     if (strLen > 0) { [EOL]         final int len = length(); [EOL]         ensureCapacity(len + strLen); [EOL]         str.getChars(0, strLen, buffer, len); [EOL]         size += strLen; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 572,584
public StrBuilder append(final StringBuffer str, final int startIndex, final int length) { [EOL]     if (str == null) { [EOL]         return appendNull(); [EOL]     } [EOL]     if (startIndex < 0 || startIndex > str.length()) { [EOL]         throw new StringIndexOutOfBoundsException("startIndex must be valid"); [EOL]     } [EOL]     if (length < 0 || (startIndex + length) > str.length()) { [EOL]         throw new StringIndexOutOfBoundsException("length must be valid"); [EOL]     } [EOL]     if (length > 0) { [EOL]         final int len = length(); [EOL]         ensureCapacity(len + length); [EOL]         str.getChars(startIndex, startIndex + length, buffer, len); [EOL]         size += length; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 595,612
public StrBuilder append(final StringBuilder str) { [EOL]     if (str == null) { [EOL]         return appendNull(); [EOL]     } [EOL]     final int strLen = str.length(); [EOL]     if (strLen > 0) { [EOL]         final int len = length(); [EOL]         ensureCapacity(len + strLen); [EOL]         str.getChars(0, strLen, buffer, len); [EOL]         size += strLen; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 622,634
public StrBuilder append(final StringBuilder str, final int startIndex, final int length) { [EOL]     if (str == null) { [EOL]         return appendNull(); [EOL]     } [EOL]     if (startIndex < 0 || startIndex > str.length()) { [EOL]         throw new StringIndexOutOfBoundsException("startIndex must be valid"); [EOL]     } [EOL]     if (length < 0 || (startIndex + length) > str.length()) { [EOL]         throw new StringIndexOutOfBoundsException("length must be valid"); [EOL]     } [EOL]     if (length > 0) { [EOL]         final int len = length(); [EOL]         ensureCapacity(len + length); [EOL]         str.getChars(startIndex, startIndex + length, buffer, len); [EOL]         size += length; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 646,663
public StrBuilder append(final StrBuilder str) { [EOL]     if (str == null) { [EOL]         return appendNull(); [EOL]     } [EOL]     final int strLen = str.length(); [EOL]     if (strLen > 0) { [EOL]         final int len = length(); [EOL]         ensureCapacity(len + strLen); [EOL]         System.arraycopy(str.buffer, 0, buffer, len, strLen); [EOL]         size += strLen; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 672,684
public StrBuilder append(final StrBuilder str, final int startIndex, final int length) { [EOL]     if (str == null) { [EOL]         return appendNull(); [EOL]     } [EOL]     if (startIndex < 0 || startIndex > str.length()) { [EOL]         throw new StringIndexOutOfBoundsException("startIndex must be valid"); [EOL]     } [EOL]     if (length < 0 || (startIndex + length) > str.length()) { [EOL]         throw new StringIndexOutOfBoundsException("length must be valid"); [EOL]     } [EOL]     if (length > 0) { [EOL]         final int len = length(); [EOL]         ensureCapacity(len + length); [EOL]         str.getChars(startIndex, startIndex + length, buffer, len); [EOL]         size += length; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 695,712
public StrBuilder append(final char[] chars) { [EOL]     if (chars == null) { [EOL]         return appendNull(); [EOL]     } [EOL]     final int strLen = chars.length; [EOL]     if (strLen > 0) { [EOL]         final int len = length(); [EOL]         ensureCapacity(len + strLen); [EOL]         System.arraycopy(chars, 0, buffer, len, strLen); [EOL]         size += strLen; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 721,733
public StrBuilder append(final char[] chars, final int startIndex, final int length) { [EOL]     if (chars == null) { [EOL]         return appendNull(); [EOL]     } [EOL]     if (startIndex < 0 || startIndex > chars.length) { [EOL]         throw new StringIndexOutOfBoundsException("Invalid startIndex: " + length); [EOL]     } [EOL]     if (length < 0 || (startIndex + length) > chars.length) { [EOL]         throw new StringIndexOutOfBoundsException("Invalid length: " + length); [EOL]     } [EOL]     if (length > 0) { [EOL]         final int len = length(); [EOL]         ensureCapacity(len + length); [EOL]         System.arraycopy(chars, startIndex, buffer, len, length); [EOL]         size += length; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 744,761
public StrBuilder append(final boolean value) { [EOL]     if (value) { [EOL]         ensureCapacity(size + 4); [EOL]         buffer[size++] = 't'; [EOL]         buffer[size++] = 'r'; [EOL]         buffer[size++] = 'u'; [EOL]         buffer[size++] = 'e'; [EOL]     } else { [EOL]         ensureCapacity(size + 5); [EOL]         buffer[size++] = 'f'; [EOL]         buffer[size++] = 'a'; [EOL]         buffer[size++] = 'l'; [EOL]         buffer[size++] = 's'; [EOL]         buffer[size++] = 'e'; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 769,785
@Override [EOL] public StrBuilder append(final char ch) { [EOL]     final int len = length(); [EOL]     ensureCapacity(len + 1); [EOL]     buffer[size++] = ch; [EOL]     return this; [EOL] } <line_num>: 794,800
public StrBuilder append(final int value) { [EOL]     return append(String.valueOf(value)); [EOL] } <line_num>: 808,810
public StrBuilder append(final long value) { [EOL]     return append(String.valueOf(value)); [EOL] } <line_num>: 818,820
public StrBuilder append(final float value) { [EOL]     return append(String.valueOf(value)); [EOL] } <line_num>: 828,830
public StrBuilder append(final double value) { [EOL]     return append(String.valueOf(value)); [EOL] } <line_num>: 838,840
public StrBuilder appendln(final Object obj) { [EOL]     return append(obj).appendNewLine(); [EOL] } <line_num>: 851,853
public StrBuilder appendln(final String str) { [EOL]     return append(str).appendNewLine(); [EOL] } <line_num>: 863,865
public StrBuilder appendln(final String str, final int startIndex, final int length) { [EOL]     return append(str, startIndex, length).appendNewLine(); [EOL] } <line_num>: 877,879
public StrBuilder appendln(final String format, final Object... objs) { [EOL]     return append(format, objs).appendNewLine(); [EOL] } <line_num>: 890,892
public StrBuilder appendln(final StringBuffer str) { [EOL]     return append(str).appendNewLine(); [EOL] } <line_num>: 902,904
public StrBuilder appendln(final StringBuilder str) { [EOL]     return append(str).appendNewLine(); [EOL] } <line_num>: 914,916
public StrBuilder appendln(final StringBuilder str, final int startIndex, final int length) { [EOL]     return append(str, startIndex, length).appendNewLine(); [EOL] } <line_num>: 928,930
public StrBuilder appendln(final StringBuffer str, final int startIndex, final int length) { [EOL]     return append(str, startIndex, length).appendNewLine(); [EOL] } <line_num>: 942,944
public StrBuilder appendln(final StrBuilder str) { [EOL]     return append(str).appendNewLine(); [EOL] } <line_num>: 954,956
public StrBuilder appendln(final StrBuilder str, final int startIndex, final int length) { [EOL]     return append(str, startIndex, length).appendNewLine(); [EOL] } <line_num>: 968,970
public StrBuilder appendln(final char[] chars) { [EOL]     return append(chars).appendNewLine(); [EOL] } <line_num>: 980,982
public StrBuilder appendln(final char[] chars, final int startIndex, final int length) { [EOL]     return append(chars, startIndex, length).appendNewLine(); [EOL] } <line_num>: 994,996
public StrBuilder appendln(final boolean value) { [EOL]     return append(value).appendNewLine(); [EOL] } <line_num>: 1005,1007
public StrBuilder appendln(final char ch) { [EOL]     return append(ch).appendNewLine(); [EOL] } <line_num>: 1016,1018
public StrBuilder appendln(final int value) { [EOL]     return append(value).appendNewLine(); [EOL] } <line_num>: 1027,1029
public StrBuilder appendln(final long value) { [EOL]     return append(value).appendNewLine(); [EOL] } <line_num>: 1038,1040
public StrBuilder appendln(final float value) { [EOL]     return append(value).appendNewLine(); [EOL] } <line_num>: 1049,1051
public StrBuilder appendln(final double value) { [EOL]     return append(value).appendNewLine(); [EOL] } <line_num>: 1060,1062
public <T> StrBuilder appendAll(final T... array) { [EOL]     if (array != null && array.length > 0) { [EOL]         for (final Object element : array) { [EOL]             append(element); [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1075,1082
public StrBuilder appendAll(final Iterable<?> iterable) { [EOL]     if (iterable != null) { [EOL]         for (final Object o : iterable) { [EOL]             append(o); [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1093,1100
public StrBuilder appendAll(final Iterator<?> it) { [EOL]     if (it != null) { [EOL]         while (it.hasNext()) { [EOL]             append(it.next()); [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1111,1118
public StrBuilder appendWithSeparators(final Object[] array, String separator) { [EOL]     if (array != null && array.length > 0) { [EOL]         separator = ObjectUtils.toString(separator); [EOL]         append(array[0]); [EOL]         for (int i = 1; i < array.length; i++) { [EOL]             append(separator); [EOL]             append(array[i]); [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1131,1141
public StrBuilder appendWithSeparators(final Iterable<?> iterable, String separator) { [EOL]     if (iterable != null) { [EOL]         separator = ObjectUtils.toString(separator); [EOL]         final Iterator<?> it = iterable.iterator(); [EOL]         while (it.hasNext()) { [EOL]             append(it.next()); [EOL]             if (it.hasNext()) { [EOL]                 append(separator); [EOL]             } [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1153,1165
public StrBuilder appendWithSeparators(final Iterator<?> it, String separator) { [EOL]     if (it != null) { [EOL]         separator = ObjectUtils.toString(separator); [EOL]         while (it.hasNext()) { [EOL]             append(it.next()); [EOL]             if (it.hasNext()) { [EOL]                 append(separator); [EOL]             } [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1177,1188
public StrBuilder appendSeparator(final String separator) { [EOL]     return appendSeparator(separator, null); [EOL] } <line_num>: 1211,1213
public StrBuilder appendSeparator(final String standard, final String defaultIfEmpty) { [EOL]     final String str = isEmpty() ? defaultIfEmpty : standard; [EOL]     if (str != null) { [EOL]         append(str); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1242,1248
public StrBuilder appendSeparator(final char separator) { [EOL]     if (size() > 0) { [EOL]         append(separator); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1269,1274
public StrBuilder appendSeparator(final char standard, final char defaultIfEmpty) { [EOL]     if (size() > 0) { [EOL]         append(standard); [EOL]     } else { [EOL]         append(defaultIfEmpty); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1287,1294
public StrBuilder appendSeparator(final String separator, final int loopIndex) { [EOL]     if (separator != null && loopIndex > 0) { [EOL]         append(separator); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1316,1321
public StrBuilder appendSeparator(final char separator, final int loopIndex) { [EOL]     if (loopIndex > 0) { [EOL]         append(separator); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1343,1348
public StrBuilder appendPadding(final int length, final char padChar) { [EOL]     if (length >= 0) { [EOL]         ensureCapacity(size + length); [EOL]         for (int i = 0; i < length; i++) { [EOL]             buffer[size++] = padChar; [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1358,1366
public StrBuilder appendFixedWidthPadLeft(final Object obj, final int width, final char padChar) { [EOL]     if (width > 0) { [EOL]         ensureCapacity(size + width); [EOL]         String str = (obj == null ? getNullText() : obj.toString()); [EOL]         if (str == null) { [EOL]             str = ""; [EOL]         } [EOL]         final int strLen = str.length(); [EOL]         if (strLen >= width) { [EOL]             str.getChars(strLen - width, strLen, buffer, size); [EOL]         } else { [EOL]             final int padLen = width - strLen; [EOL]             for (int i = 0; i < padLen; i++) { [EOL]                 buffer[size + i] = padChar; [EOL]             } [EOL]             str.getChars(0, strLen, buffer, size + padLen); [EOL]         } [EOL]         size += width; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1380,1400
public StrBuilder appendFixedWidthPadLeft(final int value, final int width, final char padChar) { [EOL]     return appendFixedWidthPadLeft(String.valueOf(value), width, padChar); [EOL] } <line_num>: 1412,1414
public StrBuilder appendFixedWidthPadRight(final Object obj, final int width, final char padChar) { [EOL]     if (width > 0) { [EOL]         ensureCapacity(size + width); [EOL]         String str = (obj == null ? getNullText() : obj.toString()); [EOL]         if (str == null) { [EOL]             str = ""; [EOL]         } [EOL]         final int strLen = str.length(); [EOL]         if (strLen >= width) { [EOL]             str.getChars(0, width, buffer, size); [EOL]         } else { [EOL]             final int padLen = width - strLen; [EOL]             str.getChars(0, strLen, buffer, size); [EOL]             for (int i = 0; i < padLen; i++) { [EOL]                 buffer[size + strLen + i] = padChar; [EOL]             } [EOL]         } [EOL]         size += width; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1427,1447
public StrBuilder appendFixedWidthPadRight(final int value, final int width, final char padChar) { [EOL]     return appendFixedWidthPadRight(String.valueOf(value), width, padChar); [EOL] } <line_num>: 1459,1461
public StrBuilder insert(final int index, final Object obj) { [EOL]     if (obj == null) { [EOL]         return insert(index, nullText); [EOL]     } [EOL]     return insert(index, obj.toString()); [EOL] } <line_num>: 1473,1478
public StrBuilder insert(final int index, String str) { [EOL]     validateIndex(index); [EOL]     if (str == null) { [EOL]         str = nullText; [EOL]     } [EOL]     if (str != null) { [EOL]         final int strLen = str.length(); [EOL]         if (strLen > 0) { [EOL]             final int newSize = size + strLen; [EOL]             ensureCapacity(newSize); [EOL]             System.arraycopy(buffer, index, buffer, index + strLen, size - index); [EOL]             size = newSize; [EOL]             str.getChars(0, strLen, buffer, index); [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1489,1505
public StrBuilder insert(final int index, final char[] chars) { [EOL]     validateIndex(index); [EOL]     if (chars == null) { [EOL]         return insert(index, nullText); [EOL]     } [EOL]     final int len = chars.length; [EOL]     if (len > 0) { [EOL]         ensureCapacity(size + len); [EOL]         System.arraycopy(buffer, index, buffer, index + len, size - index); [EOL]         System.arraycopy(chars, 0, buffer, index, len); [EOL]         size += len; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1516,1529
public StrBuilder insert(final int index, final char[] chars, final int offset, final int length) { [EOL]     validateIndex(index); [EOL]     if (chars == null) { [EOL]         return insert(index, nullText); [EOL]     } [EOL]     if (offset < 0 || offset > chars.length) { [EOL]         throw new StringIndexOutOfBoundsException("Invalid offset: " + offset); [EOL]     } [EOL]     if (length < 0 || offset + length > chars.length) { [EOL]         throw new StringIndexOutOfBoundsException("Invalid length: " + length); [EOL]     } [EOL]     if (length > 0) { [EOL]         ensureCapacity(size + length); [EOL]         System.arraycopy(buffer, index, buffer, index + length, size - index); [EOL]         System.arraycopy(chars, offset, buffer, index, length); [EOL]         size += length; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1542,1560
public StrBuilder insert(int index, final boolean value) { [EOL]     validateIndex(index); [EOL]     if (value) { [EOL]         ensureCapacity(size + 4); [EOL]         System.arraycopy(buffer, index, buffer, index + 4, size - index); [EOL]         buffer[index++] = 't'; [EOL]         buffer[index++] = 'r'; [EOL]         buffer[index++] = 'u'; [EOL]         buffer[index] = 'e'; [EOL]         size += 4; [EOL]     } else { [EOL]         ensureCapacity(size + 5); [EOL]         System.arraycopy(buffer, index, buffer, index + 5, size - index); [EOL]         buffer[index++] = 'f'; [EOL]         buffer[index++] = 'a'; [EOL]         buffer[index++] = 'l'; [EOL]         buffer[index++] = 's'; [EOL]         buffer[index] = 'e'; [EOL]         size += 5; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1570,1591
public StrBuilder insert(final int index, final char value) { [EOL]     validateIndex(index); [EOL]     ensureCapacity(size + 1); [EOL]     System.arraycopy(buffer, index, buffer, index + 1, size - index); [EOL]     buffer[index] = value; [EOL]     size++; [EOL]     return this; [EOL] } <line_num>: 1601,1608
public StrBuilder insert(final int index, final int value) { [EOL]     return insert(index, String.valueOf(value)); [EOL] } <line_num>: 1618,1620
public StrBuilder insert(final int index, final long value) { [EOL]     return insert(index, String.valueOf(value)); [EOL] } <line_num>: 1630,1632
public StrBuilder insert(final int index, final float value) { [EOL]     return insert(index, String.valueOf(value)); [EOL] } <line_num>: 1642,1644
public StrBuilder insert(final int index, final double value) { [EOL]     return insert(index, String.valueOf(value)); [EOL] } <line_num>: 1654,1656
private void deleteImpl(final int startIndex, final int endIndex, final int len) { [EOL]     System.arraycopy(buffer, endIndex, buffer, startIndex, size - endIndex); [EOL]     size -= len; [EOL] } <line_num>: 1667,1670
public StrBuilder delete(final int startIndex, int endIndex) { [EOL]     endIndex = validateRange(startIndex, endIndex); [EOL]     final int len = endIndex - startIndex; [EOL]     if (len > 0) { [EOL]         deleteImpl(startIndex, endIndex, len); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1681,1688
public StrBuilder deleteAll(final char ch) { [EOL]     for (int i = 0; i < size; i++) { [EOL]         if (buffer[i] == ch) { [EOL]             final int start = i; [EOL]             while (++i < size) { [EOL]                 if (buffer[i] != ch) { [EOL]                     break; [EOL]                 } [EOL]             } [EOL]             final int len = i - start; [EOL]             deleteImpl(start, i, len); [EOL]             i -= len; [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1697,1712
public StrBuilder deleteFirst(final char ch) { [EOL]     for (int i = 0; i < size; i++) { [EOL]         if (buffer[i] == ch) { [EOL]             deleteImpl(i, i + 1, 1); [EOL]             break; [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1720,1728
public StrBuilder deleteAll(final String str) { [EOL]     final int len = (str == null ? 0 : str.length()); [EOL]     if (len > 0) { [EOL]         int index = indexOf(str, 0); [EOL]         while (index >= 0) { [EOL]             deleteImpl(index, index + len, len); [EOL]             index = indexOf(str, index); [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1737,1747
public StrBuilder deleteFirst(final String str) { [EOL]     final int len = (str == null ? 0 : str.length()); [EOL]     if (len > 0) { [EOL]         final int index = indexOf(str, 0); [EOL]         if (index >= 0) { [EOL]             deleteImpl(index, index + len, len); [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1755,1764
public StrBuilder deleteAll(final StrMatcher matcher) { [EOL]     return replace(matcher, null, 0, size, -1); [EOL] } <line_num>: 1777,1779
public StrBuilder deleteFirst(final StrMatcher matcher) { [EOL]     return replace(matcher, null, 0, size, 1); [EOL] } <line_num>: 1791,1793
private void replaceImpl(final int startIndex, final int endIndex, final int removeLen, final String insertStr, final int insertLen) { [EOL]     final int newSize = size - removeLen + insertLen; [EOL]     if (insertLen != removeLen) { [EOL]         ensureCapacity(newSize); [EOL]         System.arraycopy(buffer, endIndex, buffer, startIndex + insertLen, size - endIndex); [EOL]         size = newSize; [EOL]     } [EOL]     if (insertLen > 0) { [EOL]         insertStr.getChars(0, insertLen, buffer, startIndex); [EOL]     } [EOL] } <line_num>: 1806,1816
public StrBuilder replace(final int startIndex, int endIndex, final String replaceStr) { [EOL]     endIndex = validateRange(startIndex, endIndex); [EOL]     final int insertLen = (replaceStr == null ? 0 : replaceStr.length()); [EOL]     replaceImpl(startIndex, endIndex, endIndex - startIndex, replaceStr, insertLen); [EOL]     return this; [EOL] } <line_num>: 1829,1834
public StrBuilder replaceAll(final char search, final char replace) { [EOL]     if (search != replace) { [EOL]         for (int i = 0; i < size; i++) { [EOL]             if (buffer[i] == search) { [EOL]                 buffer[i] = replace; [EOL]             } [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1845,1854
public StrBuilder replaceFirst(final char search, final char replace) { [EOL]     if (search != replace) { [EOL]         for (int i = 0; i < size; i++) { [EOL]             if (buffer[i] == search) { [EOL]                 buffer[i] = replace; [EOL]                 break; [EOL]             } [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1864,1874
public StrBuilder replaceAll(final String searchStr, final String replaceStr) { [EOL]     final int searchLen = (searchStr == null ? 0 : searchStr.length()); [EOL]     if (searchLen > 0) { [EOL]         final int replaceLen = (replaceStr == null ? 0 : replaceStr.length()); [EOL]         int index = indexOf(searchStr, 0); [EOL]         while (index >= 0) { [EOL]             replaceImpl(index, index + searchLen, searchLen, replaceStr, replaceLen); [EOL]             index = indexOf(searchStr, index + replaceLen); [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1884,1895
public StrBuilder replaceFirst(final String searchStr, final String replaceStr) { [EOL]     final int searchLen = (searchStr == null ? 0 : searchStr.length()); [EOL]     if (searchLen > 0) { [EOL]         final int index = indexOf(searchStr, 0); [EOL]         if (index >= 0) { [EOL]             final int replaceLen = (replaceStr == null ? 0 : replaceStr.length()); [EOL]             replaceImpl(index, index + searchLen, searchLen, replaceStr, replaceLen); [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1904,1914
public StrBuilder replaceAll(final StrMatcher matcher, final String replaceStr) { [EOL]     return replace(matcher, replaceStr, 0, size, -1); [EOL] } <line_num>: 1928,1930
public StrBuilder replaceFirst(final StrMatcher matcher, final String replaceStr) { [EOL]     return replace(matcher, replaceStr, 0, size, 1); [EOL] } <line_num>: 1943,1945
public StrBuilder replace(final StrMatcher matcher, final String replaceStr, final int startIndex, int endIndex, final int replaceCount) { [EOL]     endIndex = validateRange(startIndex, endIndex); [EOL]     return replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount); [EOL] } <line_num>: 1964,1969
private StrBuilder replaceImpl(final StrMatcher matcher, final String replaceStr, final int from, int to, int replaceCount) { [EOL]     if (matcher == null || size == 0) { [EOL]         return this; [EOL]     } [EOL]     final int replaceLen = (replaceStr == null ? 0 : replaceStr.length()); [EOL]     final char[] buf = buffer; [EOL]     for (int i = from; i < to && replaceCount != 0; i++) { [EOL]         final int removeLen = matcher.isMatch(buf, i, from, to); [EOL]         if (removeLen > 0) { [EOL]             replaceImpl(i, i + removeLen, removeLen, replaceStr, replaceLen); [EOL]             to = to - removeLen + replaceLen; [EOL]             i = i + replaceLen - 1; [EOL]             if (replaceCount > 0) { [EOL]                 replaceCount--; [EOL]             } [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 1986,2006
public StrBuilder reverse() { [EOL]     if (size == 0) { [EOL]         return this; [EOL]     } [EOL]     final int half = size / 2; [EOL]     final char[] buf = buffer; [EOL]     for (int leftIdx = 0, rightIdx = size - 1; leftIdx < half; leftIdx++, rightIdx--) { [EOL]         final char swap = buf[leftIdx]; [EOL]         buf[leftIdx] = buf[rightIdx]; [EOL]         buf[rightIdx] = swap; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 2014,2027
public StrBuilder trim() { [EOL]     if (size == 0) { [EOL]         return this; [EOL]     } [EOL]     int len = size; [EOL]     final char[] buf = buffer; [EOL]     int pos = 0; [EOL]     while (pos < len && buf[pos] <= ' ') { [EOL]         pos++; [EOL]     } [EOL]     while (pos < len && buf[len - 1] <= ' ') { [EOL]         len--; [EOL]     } [EOL]     if (len < size) { [EOL]         delete(len, size); [EOL]     } [EOL]     if (pos > 0) { [EOL]         delete(0, pos); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 2036,2056
public boolean startsWith(final String str) { [EOL]     if (str == null) { [EOL]         return false; [EOL]     } [EOL]     final int len = str.length(); [EOL]     if (len == 0) { [EOL]         return true; [EOL]     } [EOL]     if (len > size) { [EOL]         return false; [EOL]     } [EOL]     for (int i = 0; i < len; i++) { [EOL]         if (buffer[i] != str.charAt(i)) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 2067,2084
public boolean endsWith(final String str) { [EOL]     if (str == null) { [EOL]         return false; [EOL]     } [EOL]     final int len = str.length(); [EOL]     if (len == 0) { [EOL]         return true; [EOL]     } [EOL]     if (len > size) { [EOL]         return false; [EOL]     } [EOL]     int pos = size - len; [EOL]     for (int i = 0; i < len; i++, pos++) { [EOL]         if (buffer[pos] != str.charAt(i)) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 2094,2112
@Override [EOL] public CharSequence subSequence(final int startIndex, final int endIndex) { [EOL]     if (startIndex < 0) { [EOL]         throw new StringIndexOutOfBoundsException(startIndex); [EOL]     } [EOL]     if (endIndex > size) { [EOL]         throw new StringIndexOutOfBoundsException(endIndex); [EOL]     } [EOL]     if (startIndex > endIndex) { [EOL]         throw new StringIndexOutOfBoundsException(endIndex - startIndex); [EOL]     } [EOL]     return substring(startIndex, endIndex); [EOL] } <line_num>: 2119,2131
public String substring(final int start) { [EOL]     return substring(start, size); [EOL] } <line_num>: 2140,2142
public String substring(final int startIndex, int endIndex) { [EOL]     endIndex = validateRange(startIndex, endIndex); [EOL]     return new String(buffer, startIndex, endIndex - startIndex); [EOL] } <line_num>: 2157,2160
public String leftString(final int length) { [EOL]     if (length <= 0) { [EOL]         return ""; [EOL]     } else if (length >= size) { [EOL]         return new String(buffer, 0, size); [EOL]     } else { [EOL]         return new String(buffer, 0, length); [EOL]     } [EOL] } <line_num>: 2174,2182
public String rightString(final int length) { [EOL]     if (length <= 0) { [EOL]         return ""; [EOL]     } else if (length >= size) { [EOL]         return new String(buffer, 0, size); [EOL]     } else { [EOL]         return new String(buffer, size - length, length); [EOL]     } [EOL] } <line_num>: 2196,2204
public String midString(int index, final int length) { [EOL]     if (index < 0) { [EOL]         index = 0; [EOL]     } [EOL]     if (length <= 0 || index >= size) { [EOL]         return ""; [EOL]     } [EOL]     if (size <= index + length) { [EOL]         return new String(buffer, index, size - index); [EOL]     } [EOL]     return new String(buffer, index, length); [EOL] } <line_num>: 2222,2233
public boolean contains(final char ch) { [EOL]     final char[] thisBuf = buffer; [EOL]     for (int i = 0; i < this.size; i++) { [EOL]         if (thisBuf[i] == ch) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 2242,2250
public boolean contains(final String str) { [EOL]     return indexOf(str, 0) >= 0; [EOL] } <line_num>: 2258,2260
public boolean contains(final StrMatcher matcher) { [EOL]     return indexOf(matcher, 0) >= 0; [EOL] } <line_num>: 2273,2275
public int indexOf(final char ch) { [EOL]     return indexOf(ch, 0); [EOL] } <line_num>: 2284,2286
public int indexOf(final char ch, int startIndex) { [EOL]     startIndex = (startIndex < 0 ? 0 : startIndex); [EOL]     if (startIndex >= size) { [EOL]         return -1; [EOL]     } [EOL]     final char[] thisBuf = buffer; [EOL]     for (int i = startIndex; i < size; i++) { [EOL]         if (thisBuf[i] == ch) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return -1; [EOL] } <line_num>: 2295,2307
public int indexOf(final String str) { [EOL]     return indexOf(str, 0); [EOL] } <line_num>: 2317,2319
public int indexOf(final String str, int startIndex) { [EOL]     startIndex = (startIndex < 0 ? 0 : startIndex); [EOL]     if (str == null || startIndex >= size) { [EOL]         return -1; [EOL]     } [EOL]     final int strLen = str.length(); [EOL]     if (strLen == 1) { [EOL]         return indexOf(str.charAt(0), startIndex); [EOL]     } [EOL]     if (strLen == 0) { [EOL]         return startIndex; [EOL]     } [EOL]     if (strLen > size) { [EOL]         return -1; [EOL]     } [EOL]     final char[] thisBuf = buffer; [EOL]     final int len = size - strLen + 1; [EOL]     outer: for (int i = startIndex; i < len; i++) { [EOL]         for (int j = 0; j < strLen; j++) { [EOL]             if (str.charAt(j) != thisBuf[i + j]) { [EOL]                 continue outer; [EOL]             } [EOL]         } [EOL]         return i; [EOL]     } [EOL]     return -1; [EOL] } <line_num>: 2331,2358
public int indexOf(final StrMatcher matcher) { [EOL]     return indexOf(matcher, 0); [EOL] } <line_num>: 2370,2372
public int indexOf(final StrMatcher matcher, int startIndex) { [EOL]     startIndex = (startIndex < 0 ? 0 : startIndex); [EOL]     if (matcher == null || startIndex >= size) { [EOL]         return -1; [EOL]     } [EOL]     final int len = size; [EOL]     final char[] buf = buffer; [EOL]     for (int i = startIndex; i < len; i++) { [EOL]         if (matcher.isMatch(buf, i, startIndex, len) > 0) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return -1; [EOL] } <line_num>: 2386,2399
public int lastIndexOf(final char ch) { [EOL]     return lastIndexOf(ch, size - 1); [EOL] } <line_num>: 2408,2410
public int lastIndexOf(final char ch, int startIndex) { [EOL]     startIndex = (startIndex >= size ? size - 1 : startIndex); [EOL]     if (startIndex < 0) { [EOL]         return -1; [EOL]     } [EOL]     for (int i = startIndex; i >= 0; i--) { [EOL]         if (buffer[i] == ch) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return -1; [EOL] } <line_num>: 2419,2430
public int lastIndexOf(final String str) { [EOL]     return lastIndexOf(str, size - 1); [EOL] } <line_num>: 2440,2442
public int lastIndexOf(final String str, int startIndex) { [EOL]     startIndex = (startIndex >= size ? size - 1 : startIndex); [EOL]     if (str == null || startIndex < 0) { [EOL]         return -1; [EOL]     } [EOL]     final int strLen = str.length(); [EOL]     if (strLen > 0 && strLen <= size) { [EOL]         if (strLen == 1) { [EOL]             return lastIndexOf(str.charAt(0), startIndex); [EOL]         } [EOL]         outer: for (int i = startIndex - strLen + 1; i >= 0; i--) { [EOL]             for (int j = 0; j < strLen; j++) { [EOL]                 if (str.charAt(j) != buffer[i + j]) { [EOL]                     continue outer; [EOL]                 } [EOL]             } [EOL]             return i; [EOL]         } [EOL]     } else if (strLen == 0) { [EOL]         return startIndex; [EOL]     } [EOL]     return -1; [EOL] } <line_num>: 2454,2479
public int lastIndexOf(final StrMatcher matcher) { [EOL]     return lastIndexOf(matcher, size); [EOL] } <line_num>: 2491,2493
public int lastIndexOf(final StrMatcher matcher, int startIndex) { [EOL]     startIndex = (startIndex >= size ? size - 1 : startIndex); [EOL]     if (matcher == null || startIndex < 0) { [EOL]         return -1; [EOL]     } [EOL]     final char[] buf = buffer; [EOL]     final int endIndex = startIndex + 1; [EOL]     for (int i = startIndex; i >= 0; i--) { [EOL]         if (matcher.isMatch(buf, i, 0, endIndex) > 0) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return -1; [EOL] } <line_num>: 2507,2520
public StrTokenizer asTokenizer() { [EOL]     return new StrBuilderTokenizer(); [EOL] } <line_num>: 2555,2557
public Reader asReader() { [EOL]     return new StrBuilderReader(); [EOL] } <line_num>: 2579,2581
public Writer asWriter() { [EOL]     return new StrBuilderWriter(); [EOL] } <line_num>: 2604,2606
public boolean equalsIgnoreCase(final StrBuilder other) { [EOL]     if (this == other) { [EOL]         return true; [EOL]     } [EOL]     if (this.size != other.size) { [EOL]         return false; [EOL]     } [EOL]     final char[] thisBuf = this.buffer; [EOL]     final char[] otherBuf = other.buffer; [EOL]     for (int i = size - 1; i >= 0; i--) { [EOL]         final char c1 = thisBuf[i]; [EOL]         final char c2 = otherBuf[i]; [EOL]         if (c1 != c2 && Character.toUpperCase(c1) != Character.toUpperCase(c2)) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 2646,2663
public boolean equals(final StrBuilder other) { [EOL]     if (this == other) { [EOL]         return true; [EOL]     } [EOL]     if (this.size != other.size) { [EOL]         return false; [EOL]     } [EOL]     final char[] thisBuf = this.buffer; [EOL]     final char[] otherBuf = other.buffer; [EOL]     for (int i = size - 1; i >= 0; i--) { [EOL]         if (thisBuf[i] != otherBuf[i]) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 2672,2687
@Override [EOL] public boolean equals(final Object obj) { [EOL]     if (obj instanceof StrBuilder) { [EOL]         return equals((StrBuilder) obj); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 2696,2702
@Override [EOL] public int hashCode() { [EOL]     final char[] buf = buffer; [EOL]     int hash = 0; [EOL]     for (int i = size - 1; i >= 0; i--) { [EOL]         hash = 31 * hash + buf[i]; [EOL]     } [EOL]     return hash; [EOL] } <line_num>: 2709,2717
@Override [EOL] public String toString() { [EOL]     return new String(buffer, 0, size); [EOL] } <line_num>: 2729,2732
public StringBuffer toStringBuffer() { [EOL]     return new StringBuffer(size).append(buffer, 0, size); [EOL] } <line_num>: 2740,2742
public StringBuilder toStringBuilder() { [EOL]     return new StringBuilder(size).append(buffer, 0, size); [EOL] } <line_num>: 2751,2753
@Override [EOL] public String build() { [EOL]     return toString(); [EOL] } <line_num>: 2761,2764
protected int validateRange(final int startIndex, int endIndex) { [EOL]     if (startIndex < 0) { [EOL]         throw new StringIndexOutOfBoundsException(startIndex); [EOL]     } [EOL]     if (endIndex > size) { [EOL]         endIndex = size; [EOL]     } [EOL]     if (startIndex > endIndex) { [EOL]         throw new StringIndexOutOfBoundsException("end < start"); [EOL]     } [EOL]     return endIndex; [EOL] } <line_num>: 2776,2787
protected void validateIndex(final int index) { [EOL]     if (index < 0 || index > size) { [EOL]         throw new StringIndexOutOfBoundsException(index); [EOL]     } [EOL] } <line_num>: 2795,2799
@Override [EOL] protected List<String> tokenize(final char[] chars, final int offset, final int count) { [EOL]     if (chars == null) { [EOL]         return super.tokenize(StrBuilder.this.buffer, 0, StrBuilder.this.size()); [EOL]     } [EOL]     return super.tokenize(chars, offset, count); [EOL] } <line_num>: 2815,2821
@Override [EOL] public String getContent() { [EOL]     final String str = super.getContent(); [EOL]     if (str == null) { [EOL]         return StrBuilder.this.toString(); [EOL]     } [EOL]     return str; [EOL] } <line_num>: 2824,2831
@Override [EOL] public void close() { [EOL] } <line_num>: 2852,2855
@Override [EOL] public int read() { [EOL]     if (ready() == false) { [EOL]         return -1; [EOL]     } [EOL]     return StrBuilder.this.charAt(pos++); [EOL] } <line_num>: 2858,2864
@Override [EOL] public int read(final char[] b, final int off, int len) { [EOL]     if (off < 0 || len < 0 || off > b.length || (off + len) > b.length || (off + len) < 0) { [EOL]         throw new IndexOutOfBoundsException(); [EOL]     } [EOL]     if (len == 0) { [EOL]         return 0; [EOL]     } [EOL]     if (pos >= StrBuilder.this.size()) { [EOL]         return -1; [EOL]     } [EOL]     if (pos + len > size()) { [EOL]         len = StrBuilder.this.size() - pos; [EOL]     } [EOL]     StrBuilder.this.getChars(pos, pos + len, b, off); [EOL]     pos += len; [EOL]     return len; [EOL] } <line_num>: 2867,2885
@Override [EOL] public long skip(long n) { [EOL]     if (pos + n > StrBuilder.this.size()) { [EOL]         n = StrBuilder.this.size() - pos; [EOL]     } [EOL]     if (n < 0) { [EOL]         return 0; [EOL]     } [EOL]     pos += n; [EOL]     return n; [EOL] } <line_num>: 2888,2898
@Override [EOL] public boolean ready() { [EOL]     return pos < StrBuilder.this.size(); [EOL] } <line_num>: 2901,2904
@Override [EOL] public boolean markSupported() { [EOL]     return true; [EOL] } <line_num>: 2907,2910
@Override [EOL] public void mark(final int readAheadLimit) { [EOL]     mark = pos; [EOL] } <line_num>: 2913,2916
@Override [EOL] public void reset() { [EOL]     pos = mark; [EOL] } <line_num>: 2919,2922
@Override [EOL] public void close() { [EOL] } <line_num>: 2939,2942
@Override [EOL] public void flush() { [EOL] } <line_num>: 2945,2948
@Override [EOL] public void write(final int c) { [EOL]     StrBuilder.this.append((char) c); [EOL] } <line_num>: 2951,2954
@Override [EOL] public void write(final char[] cbuf) { [EOL]     StrBuilder.this.append(cbuf); [EOL] } <line_num>: 2957,2960
@Override [EOL] public void write(final char[] cbuf, final int off, final int len) { [EOL]     StrBuilder.this.append(cbuf, off, len); [EOL] } <line_num>: 2963,2966
@Override [EOL] public void write(final String str) { [EOL]     StrBuilder.this.append(str); [EOL] } <line_num>: 2969,2972
@Override [EOL] public void write(final String str, final int off, final int len) { [EOL]     StrBuilder.this.append(str, off, len); [EOL] } <line_num>: 2975,2978
