public StrSubstitutor() { [EOL]     this((StrLookup<?>) null, DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ESCAPE); [EOL] } <line_num>: 208,210
public <V> StrSubstitutor(final Map<String, V> valueMap) { [EOL]     this(StrLookup.mapLookup(valueMap), DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ESCAPE); [EOL] } <line_num>: 219,221
public <V> StrSubstitutor(final Map<String, V> valueMap, final String prefix, final String suffix) { [EOL]     this(StrLookup.mapLookup(valueMap), prefix, suffix, DEFAULT_ESCAPE); [EOL] } <line_num>: 232,234
public <V> StrSubstitutor(final Map<String, V> valueMap, final String prefix, final String suffix, final char escape) { [EOL]     this(StrLookup.mapLookup(valueMap), prefix, suffix, escape); [EOL] } <line_num>: 246,248
public StrSubstitutor(final StrLookup<?> variableResolver) { [EOL]     this(variableResolver, DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ESCAPE); [EOL] } <line_num>: 255,257
public StrSubstitutor(final StrLookup<?> variableResolver, final String prefix, final String suffix, final char escape) { [EOL]     this.setVariableResolver(variableResolver); [EOL]     this.setVariablePrefix(prefix); [EOL]     this.setVariableSuffix(suffix); [EOL]     this.setEscapeChar(escape); [EOL] } <line_num>: 268,273
public StrSubstitutor(final StrLookup<?> variableResolver, final StrMatcher prefixMatcher, final StrMatcher suffixMatcher, final char escape) { [EOL]     this.setVariableResolver(variableResolver); [EOL]     this.setVariablePrefixMatcher(prefixMatcher); [EOL]     this.setVariableSuffixMatcher(suffixMatcher); [EOL]     this.setEscapeChar(escape); [EOL] } <line_num>: 284,290
public static <V> String replace(final Object source, final Map<String, V> valueMap) { [EOL]     return new StrSubstitutor(valueMap).replace(source); [EOL] } <line_num>: 149,151
public static <V> String replace(final Object source, final Map<String, V> valueMap, final String prefix, final String suffix) { [EOL]     return new StrSubstitutor(valueMap, prefix, suffix).replace(source); [EOL] } <line_num>: 166,168
public static String replace(final Object source, final Properties valueProperties) { [EOL]     if (valueProperties == null) { [EOL]         return source.toString(); [EOL]     } [EOL]     final Map<String, String> valueMap = new HashMap<String, String>(); [EOL]     final Enumeration<?> propNames = valueProperties.propertyNames(); [EOL]     while (propNames.hasMoreElements()) { [EOL]         final String propName = (String) propNames.nextElement(); [EOL]         final String propValue = valueProperties.getProperty(propName); [EOL]         valueMap.put(propName, propValue); [EOL]     } [EOL]     return StrSubstitutor.replace(source, valueMap); [EOL] } <line_num>: 178,190
public static String replaceSystemProperties(final Object source) { [EOL]     return new StrSubstitutor(StrLookup.systemPropertiesLookup()).replace(source); [EOL] } <line_num>: 199,201
public String replace(final String source) { [EOL]     if (source == null) { [EOL]         return null; [EOL]     } [EOL]     final StrBuilder buf = new StrBuilder(source); [EOL]     if (substitute(buf, 0, source.length()) == false) { [EOL]         return source; [EOL]     } [EOL]     return buf.toString(); [EOL] } <line_num>: 300,309
public String replace(final String source, final int offset, final int length) { [EOL]     if (source == null) { [EOL]         return null; [EOL]     } [EOL]     final StrBuilder buf = new StrBuilder(length).append(source, offset, length); [EOL]     if (substitute(buf, 0, length) == false) { [EOL]         return source.substring(offset, offset + length); [EOL]     } [EOL]     return buf.toString(); [EOL] } <line_num>: 323,332
public String replace(final char[] source) { [EOL]     if (source == null) { [EOL]         return null; [EOL]     } [EOL]     final StrBuilder buf = new StrBuilder(source.length).append(source); [EOL]     substitute(buf, 0, source.length); [EOL]     return buf.toString(); [EOL] } <line_num>: 343,350
public String replace(final char[] source, final int offset, final int length) { [EOL]     if (source == null) { [EOL]         return null; [EOL]     } [EOL]     final StrBuilder buf = new StrBuilder(length).append(source, offset, length); [EOL]     substitute(buf, 0, length); [EOL]     return buf.toString(); [EOL] } <line_num>: 365,372
public String replace(final StringBuffer source) { [EOL]     if (source == null) { [EOL]         return null; [EOL]     } [EOL]     final StrBuilder buf = new StrBuilder(source.length()).append(source); [EOL]     substitute(buf, 0, buf.length()); [EOL]     return buf.toString(); [EOL] } <line_num>: 383,390
public String replace(final StringBuffer source, final int offset, final int length) { [EOL]     if (source == null) { [EOL]         return null; [EOL]     } [EOL]     final StrBuilder buf = new StrBuilder(length).append(source, offset, length); [EOL]     substitute(buf, 0, length); [EOL]     return buf.toString(); [EOL] } <line_num>: 405,412
public String replace(CharSequence source) { [EOL]     if (source == null) { [EOL]         return null; [EOL]     } [EOL]     return replace(source, 0, source.length()); [EOL] } <line_num>: 423,428
public String replace(CharSequence source, int offset, int length) { [EOL]     if (source == null) { [EOL]         return null; [EOL]     } [EOL]     StrBuilder buf = new StrBuilder(length).append(source, offset, length); [EOL]     substitute(buf, 0, length); [EOL]     return buf.toString(); [EOL] } <line_num>: 444,451
public String replace(final StrBuilder source) { [EOL]     if (source == null) { [EOL]         return null; [EOL]     } [EOL]     final StrBuilder buf = new StrBuilder(source.length()).append(source); [EOL]     substitute(buf, 0, buf.length()); [EOL]     return buf.toString(); [EOL] } <line_num>: 462,469
public String replace(final StrBuilder source, final int offset, final int length) { [EOL]     if (source == null) { [EOL]         return null; [EOL]     } [EOL]     final StrBuilder buf = new StrBuilder(length).append(source, offset, length); [EOL]     substitute(buf, 0, length); [EOL]     return buf.toString(); [EOL] } <line_num>: 484,491
public String replace(final Object source) { [EOL]     if (source == null) { [EOL]         return null; [EOL]     } [EOL]     final StrBuilder buf = new StrBuilder().append(source); [EOL]     substitute(buf, 0, buf.length()); [EOL]     return buf.toString(); [EOL] } <line_num>: 502,509
public boolean replaceIn(final StringBuffer source) { [EOL]     if (source == null) { [EOL]         return false; [EOL]     } [EOL]     return replaceIn(source, 0, source.length()); [EOL] } <line_num>: 520,525
public boolean replaceIn(final StringBuffer source, final int offset, final int length) { [EOL]     if (source == null) { [EOL]         return false; [EOL]     } [EOL]     final StrBuilder buf = new StrBuilder(length).append(source, offset, length); [EOL]     if (substitute(buf, 0, length) == false) { [EOL]         return false; [EOL]     } [EOL]     source.replace(offset, offset + length, buf.toString()); [EOL]     return true; [EOL] } <line_num>: 540,550
public boolean replaceIn(StringBuilder source) { [EOL]     if (source == null) { [EOL]         return false; [EOL]     } [EOL]     return replaceIn(source, 0, source.length()); [EOL] } <line_num>: 562,567
public boolean replaceIn(StringBuilder source, int offset, int length) { [EOL]     if (source == null) { [EOL]         return false; [EOL]     } [EOL]     StrBuilder buf = new StrBuilder(length).append(source, offset, length); [EOL]     if (substitute(buf, 0, length) == false) { [EOL]         return false; [EOL]     } [EOL]     source.replace(offset, offset + length, buf.toString()); [EOL]     return true; [EOL] } <line_num>: 583,593
public boolean replaceIn(final StrBuilder source) { [EOL]     if (source == null) { [EOL]         return false; [EOL]     } [EOL]     return substitute(source, 0, source.length()); [EOL] } <line_num>: 603,608
public boolean replaceIn(final StrBuilder source, final int offset, final int length) { [EOL]     if (source == null) { [EOL]         return false; [EOL]     } [EOL]     return substitute(source, offset, length); [EOL] } <line_num>: 622,627
protected boolean substitute(final StrBuilder buf, final int offset, final int length) { [EOL]     return substitute(buf, offset, length, null) > 0; [EOL] } <line_num>: 644,646
private int substitute(final StrBuilder buf, final int offset, final int length, List<String> priorVariables) { [EOL]     final StrMatcher prefixMatcher = getVariablePrefixMatcher(); [EOL]     final StrMatcher suffixMatcher = getVariableSuffixMatcher(); [EOL]     final char escape = getEscapeChar(); [EOL]     final boolean top = priorVariables == null; [EOL]     boolean altered = false; [EOL]     int lengthChange = 0; [EOL]     char[] chars = buf.buffer; [EOL]     int bufEnd = offset + length; [EOL]     int pos = offset; [EOL]     while (pos < bufEnd) { [EOL]         final int startMatchLen = prefixMatcher.isMatch(chars, pos, offset, bufEnd); [EOL]         if (startMatchLen == 0) { [EOL]             pos++; [EOL]         } else { [EOL]             if (pos > offset && chars[pos - 1] == escape) { [EOL]                 buf.deleteCharAt(pos - 1); [EOL]                 chars = buf.buffer; [EOL]                 lengthChange--; [EOL]                 altered = true; [EOL]                 bufEnd--; [EOL]             } else { [EOL]                 final int startPos = pos; [EOL]                 pos += startMatchLen; [EOL]                 int endMatchLen = 0; [EOL]                 int nestedVarCount = 0; [EOL]                 while (pos < bufEnd) { [EOL]                     if (isEnableSubstitutionInVariables() && (endMatchLen = prefixMatcher.isMatch(chars, pos, offset, bufEnd)) != 0) { [EOL]                         nestedVarCount++; [EOL]                         pos += endMatchLen; [EOL]                         continue; [EOL]                     } [EOL]                     endMatchLen = suffixMatcher.isMatch(chars, pos, offset, bufEnd); [EOL]                     if (endMatchLen == 0) { [EOL]                         pos++; [EOL]                     } else { [EOL]                         if (nestedVarCount == 0) { [EOL]                             String varName = new String(chars, startPos + startMatchLen, pos - startPos - startMatchLen); [EOL]                             if (isEnableSubstitutionInVariables()) { [EOL]                                 final StrBuilder bufName = new StrBuilder(varName); [EOL]                                 substitute(bufName, 0, bufName.length()); [EOL]                                 varName = bufName.toString(); [EOL]                             } [EOL]                             pos += endMatchLen; [EOL]                             final int endPos = pos; [EOL]                             if (priorVariables == null) { [EOL]                                 priorVariables = new ArrayList<String>(); [EOL]                                 priorVariables.add(new String(chars, offset, length)); [EOL]                             } [EOL]                             checkCyclicSubstitution(varName, priorVariables); [EOL]                             priorVariables.add(varName); [EOL]                             final String varValue = resolveVariable(varName, buf, startPos, endPos); [EOL]                             if (varValue != null) { [EOL]                                 final int varLen = varValue.length(); [EOL]                                 buf.replace(startPos, endPos, varValue); [EOL]                                 altered = true; [EOL]                                 int change = substitute(buf, startPos, varLen, priorVariables); [EOL]                                 change = change + varLen - (endPos - startPos); [EOL]                                 pos += change; [EOL]                                 bufEnd += change; [EOL]                                 lengthChange += change; [EOL]                                 chars = buf.buffer; [EOL]                             } [EOL]                             priorVariables.remove(priorVariables.size() - 1); [EOL]                             break; [EOL]                         } else { [EOL]                             nestedVarCount--; [EOL]                             pos += endMatchLen; [EOL]                         } [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     if (top) { [EOL]         return altered ? 1 : 0; [EOL]     } [EOL]     return lengthChange; [EOL] } <line_num>: 660,766
private void checkCyclicSubstitution(final String varName, final List<String> priorVariables) { [EOL]     if (priorVariables.contains(varName) == false) { [EOL]         return; [EOL]     } [EOL]     final StrBuilder buf = new StrBuilder(256); [EOL]     buf.append("Infinite loop in property interpolation of "); [EOL]     buf.append(priorVariables.remove(0)); [EOL]     buf.append(": "); [EOL]     buf.appendWithSeparators(priorVariables, "->"); [EOL]     throw new IllegalStateException(buf.toString()); [EOL] } <line_num>: 774,784
protected String resolveVariable(final String variableName, final StrBuilder buf, final int startPos, final int endPos) { [EOL]     final StrLookup<?> resolver = getVariableResolver(); [EOL]     if (resolver == null) { [EOL]         return null; [EOL]     } [EOL]     return resolver.lookup(variableName); [EOL] } <line_num>: 803,809
public char getEscapeChar() { [EOL]     return this.escapeChar; [EOL] } <line_num>: 818,820
public void setEscapeChar(final char escapeCharacter) { [EOL]     this.escapeChar = escapeCharacter; [EOL] } <line_num>: 829,831
public StrMatcher getVariablePrefixMatcher() { [EOL]     return prefixMatcher; [EOL] } <line_num>: 844,846
public StrSubstitutor setVariablePrefixMatcher(final StrMatcher prefixMatcher) { [EOL]     if (prefixMatcher == null) { [EOL]         throw new IllegalArgumentException("Variable prefix matcher must not be null!"); [EOL]     } [EOL]     this.prefixMatcher = prefixMatcher; [EOL]     return this; [EOL] } <line_num>: 859,865
public StrSubstitutor setVariablePrefix(final char prefix) { [EOL]     return setVariablePrefixMatcher(StrMatcher.charMatcher(prefix)); [EOL] } <line_num>: 877,879
public StrSubstitutor setVariablePrefix(final String prefix) { [EOL]     if (prefix == null) { [EOL]         throw new IllegalArgumentException("Variable prefix must not be null!"); [EOL]     } [EOL]     return setVariablePrefixMatcher(StrMatcher.stringMatcher(prefix)); [EOL] } <line_num>: 891,896
public StrMatcher getVariableSuffixMatcher() { [EOL]     return suffixMatcher; [EOL] } <line_num>: 909,911
public StrSubstitutor setVariableSuffixMatcher(final StrMatcher suffixMatcher) { [EOL]     if (suffixMatcher == null) { [EOL]         throw new IllegalArgumentException("Variable suffix matcher must not be null!"); [EOL]     } [EOL]     this.suffixMatcher = suffixMatcher; [EOL]     return this; [EOL] } <line_num>: 924,930
public StrSubstitutor setVariableSuffix(final char suffix) { [EOL]     return setVariableSuffixMatcher(StrMatcher.charMatcher(suffix)); [EOL] } <line_num>: 942,944
public StrSubstitutor setVariableSuffix(final String suffix) { [EOL]     if (suffix == null) { [EOL]         throw new IllegalArgumentException("Variable suffix must not be null!"); [EOL]     } [EOL]     return setVariableSuffixMatcher(StrMatcher.stringMatcher(suffix)); [EOL] } <line_num>: 956,961
public StrLookup<?> getVariableResolver() { [EOL]     return this.variableResolver; [EOL] } <line_num>: 970,972
public void setVariableResolver(final StrLookup<?> variableResolver) { [EOL]     this.variableResolver = variableResolver; [EOL] } <line_num>: 979,981
public boolean isEnableSubstitutionInVariables() { [EOL]     return enableSubstitutionInVariables; [EOL] } <line_num>: 991,993
public void setEnableSubstitutionInVariables(final boolean enableSubstitutionInVariables) { [EOL]     this.enableSubstitutionInVariables = enableSubstitutionInVariables; [EOL] } <line_num>: 1004,1007
