public LocaleUtils() { [EOL]     super(); [EOL] } <line_num>: 56,58
public static Locale toLocale(final String str) { [EOL]     if (str == null) { [EOL]         return null; [EOL]     } [EOL]     if (str.contains("#")) { [EOL]         throw new IllegalArgumentException("Invalid locale format: " + str); [EOL]     } [EOL]     final int len = str.length(); [EOL]     if (len < 2) { [EOL]         throw new IllegalArgumentException("Invalid locale format: " + str); [EOL]     } [EOL]     final char ch0 = str.charAt(0); [EOL]     if (ch0 == '_') { [EOL]         if (len < 3) { [EOL]             throw new IllegalArgumentException("Invalid locale format: " + str); [EOL]         } [EOL]         final char ch1 = str.charAt(1); [EOL]         final char ch2 = str.charAt(2); [EOL]         if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) { [EOL]             throw new IllegalArgumentException("Invalid locale format: " + str); [EOL]         } [EOL]         if (len == 3) { [EOL]             return new Locale("", str.substring(1, 3)); [EOL]         } [EOL]         if (len < 5) { [EOL]             throw new IllegalArgumentException("Invalid locale format: " + str); [EOL]         } [EOL]         if (str.charAt(3) != '_') { [EOL]             throw new IllegalArgumentException("Invalid locale format: " + str); [EOL]         } [EOL]         return new Locale("", str.substring(1, 3), str.substring(4)); [EOL]     } [EOL]     final char ch1 = str.charAt(1); [EOL]     if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) { [EOL]         throw new IllegalArgumentException("Invalid locale format: " + str); [EOL]     } [EOL]     if (len == 2) { [EOL]         return new Locale(str); [EOL]     } [EOL]     if (len < 5) { [EOL]         throw new IllegalArgumentException("Invalid locale format: " + str); [EOL]     } [EOL]     if (str.charAt(2) != '_') { [EOL]         throw new IllegalArgumentException("Invalid locale format: " + str); [EOL]     } [EOL]     final char ch3 = str.charAt(3); [EOL]     if (ch3 == '_') { [EOL]         return new Locale(str.substring(0, 2), "", str.substring(4)); [EOL]     } [EOL]     final char ch4 = str.charAt(4); [EOL]     if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) { [EOL]         throw new IllegalArgumentException("Invalid locale format: " + str); [EOL]     } [EOL]     if (len == 5) { [EOL]         return new Locale(str.substring(0, 2), str.substring(3, 5)); [EOL]     } [EOL]     if (len < 7) { [EOL]         throw new IllegalArgumentException("Invalid locale format: " + str); [EOL]     } [EOL]     if (str.charAt(5) != '_') { [EOL]         throw new IllegalArgumentException("Invalid locale format: " + str); [EOL]     } [EOL]     return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6)); [EOL] } <line_num>: 88,151
public static List<Locale> localeLookupList(final Locale locale) { [EOL]     return localeLookupList(locale, locale); [EOL] } <line_num>: 166,168
public static List<Locale> localeLookupList(final Locale locale, final Locale defaultLocale) { [EOL]     final List<Locale> list = new ArrayList<Locale>(4); [EOL]     if (locale != null) { [EOL]         list.add(locale); [EOL]         if (locale.getVariant().length() > 0) { [EOL]             list.add(new Locale(locale.getLanguage(), locale.getCountry())); [EOL]         } [EOL]         if (locale.getCountry().length() > 0) { [EOL]             list.add(new Locale(locale.getLanguage(), "")); [EOL]         } [EOL]         if (list.contains(defaultLocale) == false) { [EOL]             list.add(defaultLocale); [EOL]         } [EOL]     } [EOL]     return Collections.unmodifiableList(list); [EOL] } <line_num>: 188,203
public static List<Locale> availableLocaleList() { [EOL]     return SyncAvoid.AVAILABLE_LOCALE_LIST; [EOL] } <line_num>: 215,217
public static Set<Locale> availableLocaleSet() { [EOL]     return SyncAvoid.AVAILABLE_LOCALE_SET; [EOL] } <line_num>: 229,231
public static boolean isAvailableLocale(final Locale locale) { [EOL]     return availableLocaleList().contains(locale); [EOL] } <line_num>: 240,242
public static List<Locale> languagesByCountry(final String countryCode) { [EOL]     if (countryCode == null) { [EOL]         return Collections.emptyList(); [EOL]     } [EOL]     List<Locale> langs = cLanguagesByCountry.get(countryCode); [EOL]     if (langs == null) { [EOL]         langs = new ArrayList<Locale>(); [EOL]         final List<Locale> locales = availableLocaleList(); [EOL]         for (int i = 0; i < locales.size(); i++) { [EOL]             final Locale locale = locales.get(i); [EOL]             if (countryCode.equals(locale.getCountry()) && locale.getVariant().isEmpty()) { [EOL]                 langs.add(locale); [EOL]             } [EOL]         } [EOL]         langs = Collections.unmodifiableList(langs); [EOL]         cLanguagesByCountry.putIfAbsent(countryCode, langs); [EOL]         langs = cLanguagesByCountry.get(countryCode); [EOL]     } [EOL]     return langs; [EOL] } <line_num>: 254,274
public static List<Locale> countriesByLanguage(final String languageCode) { [EOL]     if (languageCode == null) { [EOL]         return Collections.emptyList(); [EOL]     } [EOL]     List<Locale> countries = cCountriesByLanguage.get(languageCode); [EOL]     if (countries == null) { [EOL]         countries = new ArrayList<Locale>(); [EOL]         final List<Locale> locales = availableLocaleList(); [EOL]         for (int i = 0; i < locales.size(); i++) { [EOL]             final Locale locale = locales.get(i); [EOL]             if (languageCode.equals(locale.getLanguage()) && locale.getCountry().length() != 0 && locale.getVariant().isEmpty()) { [EOL]                 countries.add(locale); [EOL]             } [EOL]         } [EOL]         countries = Collections.unmodifiableList(countries); [EOL]         cCountriesByLanguage.putIfAbsent(languageCode, countries); [EOL]         countries = cCountriesByLanguage.get(languageCode); [EOL]     } [EOL]     return countries; [EOL] } <line_num>: 286,307
