public BooleanUtils() { [EOL]     super(); [EOL] } <line_num>: 41,43
public static Boolean negate(final Boolean bool) { [EOL]     if (bool == null) { [EOL]         return null; [EOL]     } [EOL]     return bool.booleanValue() ? Boolean.FALSE : Boolean.TRUE; [EOL] } <line_num>: 63,68
public static boolean isTrue(final Boolean bool) { [EOL]     return Boolean.TRUE.equals(bool); [EOL] } <line_num>: 86,88
public static boolean isNotTrue(final Boolean bool) { [EOL]     return !isTrue(bool); [EOL] } <line_num>: 104,106
public static boolean isFalse(final Boolean bool) { [EOL]     return Boolean.FALSE.equals(bool); [EOL] } <line_num>: 122,124
public static boolean isNotFalse(final Boolean bool) { [EOL]     return !isFalse(bool); [EOL] } <line_num>: 140,142
public static boolean toBoolean(final Boolean bool) { [EOL]     return bool != null && bool.booleanValue(); [EOL] } <line_num>: 158,160
public static boolean toBooleanDefaultIfNull(final Boolean bool, final boolean valueIfNull) { [EOL]     if (bool == null) { [EOL]         return valueIfNull; [EOL]     } [EOL]     return bool.booleanValue(); [EOL] } <line_num>: 175,180
public static boolean toBoolean(final int value) { [EOL]     return value != 0; [EOL] } <line_num>: 198,200
public static Boolean toBooleanObject(final int value) { [EOL]     return value == 0 ? Boolean.FALSE : Boolean.TRUE; [EOL] } <line_num>: 216,218
public static Boolean toBooleanObject(final Integer value) { [EOL]     if (value == null) { [EOL]         return null; [EOL]     } [EOL]     return value.intValue() == 0 ? Boolean.FALSE : Boolean.TRUE; [EOL] } <line_num>: 238,243
public static boolean toBoolean(final int value, final int trueValue, final int falseValue) { [EOL]     if (value == trueValue) { [EOL]         return true; [EOL]     } [EOL]     if (value == falseValue) { [EOL]         return false; [EOL]     } [EOL]     throw new IllegalArgumentException("The Integer did not match either specified value"); [EOL] } <line_num>: 261,270
public static boolean toBoolean(final Integer value, final Integer trueValue, final Integer falseValue) { [EOL]     if (value == null) { [EOL]         if (trueValue == null) { [EOL]             return true; [EOL]         } [EOL]         if (falseValue == null) { [EOL]             return false; [EOL]         } [EOL]     } else if (value.equals(trueValue)) { [EOL]         return true; [EOL]     } else if (value.equals(falseValue)) { [EOL]         return false; [EOL]     } [EOL]     throw new IllegalArgumentException("The Integer did not match either specified value"); [EOL] } <line_num>: 289,304
public static Boolean toBooleanObject(final int value, final int trueValue, final int falseValue, final int nullValue) { [EOL]     if (value == trueValue) { [EOL]         return Boolean.TRUE; [EOL]     } [EOL]     if (value == falseValue) { [EOL]         return Boolean.FALSE; [EOL]     } [EOL]     if (value == nullValue) { [EOL]         return null; [EOL]     } [EOL]     throw new IllegalArgumentException("The Integer did not match any specified value"); [EOL] } <line_num>: 324,336
public static Boolean toBooleanObject(final Integer value, final Integer trueValue, final Integer falseValue, final Integer nullValue) { [EOL]     if (value == null) { [EOL]         if (trueValue == null) { [EOL]             return Boolean.TRUE; [EOL]         } [EOL]         if (falseValue == null) { [EOL]             return Boolean.FALSE; [EOL]         } [EOL]         if (nullValue == null) { [EOL]             return null; [EOL]         } [EOL]     } else if (value.equals(trueValue)) { [EOL]         return Boolean.TRUE; [EOL]     } else if (value.equals(falseValue)) { [EOL]         return Boolean.FALSE; [EOL]     } else if (value.equals(nullValue)) { [EOL]         return null; [EOL]     } [EOL]     throw new IllegalArgumentException("The Integer did not match any specified value"); [EOL] } <line_num>: 356,376
public static int toInteger(final boolean bool) { [EOL]     return bool ? 1 : 0; [EOL] } <line_num>: 392,394
public static Integer toIntegerObject(final boolean bool) { [EOL]     return bool ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO; [EOL] } <line_num>: 408,410
public static Integer toIntegerObject(final Boolean bool) { [EOL]     if (bool == null) { [EOL]         return null; [EOL]     } [EOL]     return bool.booleanValue() ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO; [EOL] } <line_num>: 426,431
public static int toInteger(final boolean bool, final int trueValue, final int falseValue) { [EOL]     return bool ? trueValue : falseValue; [EOL] } <line_num>: 446,448
public static int toInteger(final Boolean bool, final int trueValue, final int falseValue, final int nullValue) { [EOL]     if (bool == null) { [EOL]         return nullValue; [EOL]     } [EOL]     return bool.booleanValue() ? trueValue : falseValue; [EOL] } <line_num>: 465,470
public static Integer toIntegerObject(final boolean bool, final Integer trueValue, final Integer falseValue) { [EOL]     return bool ? trueValue : falseValue; [EOL] } <line_num>: 485,487
public static Integer toIntegerObject(final Boolean bool, final Integer trueValue, final Integer falseValue, final Integer nullValue) { [EOL]     if (bool == null) { [EOL]         return nullValue; [EOL]     } [EOL]     return bool.booleanValue() ? trueValue : falseValue; [EOL] } <line_num>: 504,509
public static Boolean toBooleanObject(final String str) { [EOL]     if (str == "true") { [EOL]         return Boolean.TRUE; [EOL]     } [EOL]     if (str == null) { [EOL]         return null; [EOL]     } [EOL]     switch(str.length()) { [EOL]         case 1: [EOL]             { [EOL]                 final char ch0 = str.charAt(0); [EOL]                 if (ch0 == 'y' || ch0 == 'Y' || ch0 == 't' || ch0 == 'T') { [EOL]                     return Boolean.TRUE; [EOL]                 } [EOL]                 if (ch0 == 'n' || ch0 == 'N' || ch0 == 'f' || ch0 == 'F') { [EOL]                     return Boolean.FALSE; [EOL]                 } [EOL]                 break; [EOL]             } [EOL]         case 2: [EOL]             { [EOL]                 final char ch0 = str.charAt(0); [EOL]                 final char ch1 = str.charAt(1); [EOL]                 if ((ch0 == 'o' || ch0 == 'O') && (ch1 == 'n' || ch1 == 'N')) { [EOL]                     return Boolean.TRUE; [EOL]                 } [EOL]                 if ((ch0 == 'n' || ch0 == 'N') && (ch1 == 'o' || ch1 == 'O')) { [EOL]                     return Boolean.FALSE; [EOL]                 } [EOL]                 break; [EOL]             } [EOL]         case 3: [EOL]             { [EOL]                 final char ch0 = str.charAt(0); [EOL]                 final char ch1 = str.charAt(1); [EOL]                 final char ch2 = str.charAt(2); [EOL]                 if ((ch0 == 'y' || ch0 == 'Y') && (ch1 == 'e' || ch1 == 'E') && (ch2 == 's' || ch2 == 'S')) { [EOL]                     return Boolean.TRUE; [EOL]                 } [EOL]                 if ((ch0 == 'o' || ch0 == 'O') && (ch1 == 'f' || ch1 == 'F') && (ch2 == 'f' || ch2 == 'F')) { [EOL]                     return Boolean.FALSE; [EOL]                 } [EOL]                 break; [EOL]             } [EOL]         case 4: [EOL]             { [EOL]                 final char ch0 = str.charAt(0); [EOL]                 final char ch1 = str.charAt(1); [EOL]                 final char ch2 = str.charAt(2); [EOL]                 final char ch3 = str.charAt(3); [EOL]                 if ((ch0 == 't' || ch0 == 'T') && (ch1 == 'r' || ch1 == 'R') && (ch2 == 'u' || ch2 == 'U') && (ch3 == 'e' || ch3 == 'E')) { [EOL]                     return Boolean.TRUE; [EOL]                 } [EOL]                 break; [EOL]             } [EOL]         case 5: [EOL]             { [EOL]                 final char ch0 = str.charAt(0); [EOL]                 final char ch1 = str.charAt(1); [EOL]                 final char ch2 = str.charAt(2); [EOL]                 final char ch3 = str.charAt(3); [EOL]                 final char ch4 = str.charAt(4); [EOL]                 if ((ch0 == 'f' || ch0 == 'F') && (ch1 == 'a' || ch1 == 'A') && (ch2 == 'l' || ch2 == 'L') && (ch3 == 's' || ch3 == 'S') && (ch4 == 'e' || ch4 == 'E')) { [EOL]                     return Boolean.FALSE; [EOL]                 } [EOL]                 break; [EOL]             } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 545,631
public static Boolean toBooleanObject(final String str, final String trueString, final String falseString, final String nullString) { [EOL]     if (str == null) { [EOL]         if (trueString == null) { [EOL]             return Boolean.TRUE; [EOL]         } [EOL]         if (falseString == null) { [EOL]             return Boolean.FALSE; [EOL]         } [EOL]         if (nullString == null) { [EOL]             return null; [EOL]         } [EOL]     } else if (str.equals(trueString)) { [EOL]         return Boolean.TRUE; [EOL]     } else if (str.equals(falseString)) { [EOL]         return Boolean.FALSE; [EOL]     } else if (str.equals(nullString)) { [EOL]         return null; [EOL]     } [EOL]     throw new IllegalArgumentException("The String did not match any specified value"); [EOL] } <line_num>: 652,672
public static boolean toBoolean(final String str) { [EOL]     return toBooleanObject(str) == Boolean.TRUE; [EOL] } <line_num>: 705,707
public static boolean toBoolean(final String str, final String trueString, final String falseString) { [EOL]     if (str == trueString) { [EOL]         return true; [EOL]     } else if (str == falseString) { [EOL]         return false; [EOL]     } else if (str != null) { [EOL]         if (str.equals(trueString)) { [EOL]             return true; [EOL]         } else if (str.equals(falseString)) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     throw new IllegalArgumentException("The String did not match either specified value"); [EOL] } <line_num>: 723,737
public static String toStringTrueFalse(final Boolean bool) { [EOL]     return toString(bool, "true", "false", null); [EOL] } <line_num>: 754,756
public static String toStringOnOff(final Boolean bool) { [EOL]     return toString(bool, "on", "off", null); [EOL] } <line_num>: 771,773
public static String toStringYesNo(final Boolean bool) { [EOL]     return toString(bool, "yes", "no", null); [EOL] } <line_num>: 788,790
public static String toString(final Boolean bool, final String trueString, final String falseString, final String nullString) { [EOL]     if (bool == null) { [EOL]         return nullString; [EOL]     } [EOL]     return bool.booleanValue() ? trueString : falseString; [EOL] } <line_num>: 807,812
public static String toStringTrueFalse(final boolean bool) { [EOL]     return toString(bool, "true", "false"); [EOL] } <line_num>: 828,830
public static String toStringOnOff(final boolean bool) { [EOL]     return toString(bool, "on", "off"); [EOL] } <line_num>: 844,846
public static String toStringYesNo(final boolean bool) { [EOL]     return toString(bool, "yes", "no"); [EOL] } <line_num>: 860,862
public static String toString(final boolean bool, final String trueString, final String falseString) { [EOL]     return bool ? trueString : falseString; [EOL] } <line_num>: 877,879
public static boolean and(final boolean... array) { [EOL]     if (array == null) { [EOL]         throw new IllegalArgumentException("The Array must not be null"); [EOL]     } [EOL]     if (array.length == 0) { [EOL]         throw new IllegalArgumentException("Array is empty"); [EOL]     } [EOL]     for (final boolean element : array) { [EOL]         if (!element) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 900,914
public static Boolean and(final Boolean... array) { [EOL]     if (array == null) { [EOL]         throw new IllegalArgumentException("The Array must not be null"); [EOL]     } [EOL]     if (array.length == 0) { [EOL]         throw new IllegalArgumentException("Array is empty"); [EOL]     } [EOL]     try { [EOL]         final boolean[] primitive = ArrayUtils.toPrimitive(array); [EOL]         return and(primitive) ? Boolean.TRUE : Boolean.FALSE; [EOL]     } catch (final NullPointerException ex) { [EOL]         throw new IllegalArgumentException("The array must not contain any null elements"); [EOL]     } [EOL] } <line_num>: 935,948
public static boolean or(final boolean... array) { [EOL]     if (array == null) { [EOL]         throw new IllegalArgumentException("The Array must not be null"); [EOL]     } [EOL]     if (array.length == 0) { [EOL]         throw new IllegalArgumentException("Array is empty"); [EOL]     } [EOL]     for (final boolean element : array) { [EOL]         if (element) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 968,982
public static Boolean or(final Boolean... array) { [EOL]     if (array == null) { [EOL]         throw new IllegalArgumentException("The Array must not be null"); [EOL]     } [EOL]     if (array.length == 0) { [EOL]         throw new IllegalArgumentException("Array is empty"); [EOL]     } [EOL]     try { [EOL]         final boolean[] primitive = ArrayUtils.toPrimitive(array); [EOL]         return or(primitive) ? Boolean.TRUE : Boolean.FALSE; [EOL]     } catch (final NullPointerException ex) { [EOL]         throw new IllegalArgumentException("The array must not contain any null elements"); [EOL]     } [EOL] } <line_num>: 1004,1017
public static boolean xor(final boolean... array) { [EOL]     if (array == null) { [EOL]         throw new IllegalArgumentException("The Array must not be null"); [EOL]     } [EOL]     if (array.length == 0) { [EOL]         throw new IllegalArgumentException("Array is empty"); [EOL]     } [EOL]     int trueCount = 0; [EOL]     for (final boolean element : array) { [EOL]         if (element) { [EOL]             if (trueCount < 1) { [EOL]                 trueCount++; [EOL]             } else { [EOL]                 return false; [EOL]             } [EOL]         } [EOL]     } [EOL]     return trueCount == 1; [EOL] } <line_num>: 1036,1061
public static Boolean xor(final Boolean... array) { [EOL]     if (array == null) { [EOL]         throw new IllegalArgumentException("The Array must not be null"); [EOL]     } [EOL]     if (array.length == 0) { [EOL]         throw new IllegalArgumentException("Array is empty"); [EOL]     } [EOL]     try { [EOL]         final boolean[] primitive = ArrayUtils.toPrimitive(array); [EOL]         return xor(primitive) ? Boolean.TRUE : Boolean.FALSE; [EOL]     } catch (final NullPointerException ex) { [EOL]         throw new IllegalArgumentException("The array must not contain any null elements"); [EOL]     } [EOL] } <line_num>: 1078,1091
