public LookupTranslator(final CharSequence[]... lookup) { [EOL]     lookupMap = new HashMap<String, CharSequence>(); [EOL]     int _shortest = Integer.MAX_VALUE; [EOL]     int _longest = 0; [EOL]     if (lookup != null) { [EOL]         for (final CharSequence[] seq : lookup) { [EOL]             this.lookupMap.put(seq[0].toString(), seq[1]); [EOL]             final int sz = seq[0].length(); [EOL]             if (sz < _shortest) { [EOL]                 _shortest = sz; [EOL]             } [EOL]             if (sz > _longest) { [EOL]                 _longest = sz; [EOL]             } [EOL]         } [EOL]     } [EOL]     shortest = _shortest; [EOL]     longest = _longest; [EOL] } <line_num>: 45,63
@Override [EOL] public int translate(final CharSequence input, final int index, final Writer out) throws IOException { [EOL]     int max = longest; [EOL]     if (index + longest > input.length()) { [EOL]         max = input.length() - index; [EOL]     } [EOL]     for (int i = max; i >= shortest; i--) { [EOL]         final CharSequence subSeq = input.subSequence(index, index + i); [EOL]         final CharSequence result = lookupMap.get(subSeq.toString()); [EOL]         if (result != null) { [EOL]             out.write(result.toString()); [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return 0; [EOL] } <line_num>: 68,84
