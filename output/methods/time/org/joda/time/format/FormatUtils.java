private FormatUtils() { [EOL] } <line_num>: 36,37
public static void appendPaddedInteger(StringBuffer buf, int value, int size) { [EOL]     if (value < 0) { [EOL]         buf.append('-'); [EOL]         if (value != Integer.MIN_VALUE) { [EOL]             value = -value; [EOL]         } else { [EOL]             for (; size > 10; size--) { [EOL]                 buf.append('0'); [EOL]             } [EOL]             buf.append("" + -(long) Integer.MIN_VALUE); [EOL]             return; [EOL]         } [EOL]     } [EOL]     if (value < 10) { [EOL]         for (; size > 1; size--) { [EOL]             buf.append('0'); [EOL]         } [EOL]         buf.append((char) (value + '0')); [EOL]     } else if (value < 100) { [EOL]         for (; size > 2; size--) { [EOL]             buf.append('0'); [EOL]         } [EOL]         int d = ((value + 1) * 13421772) >> 27; [EOL]         buf.append((char) (d + '0')); [EOL]         buf.append((char) (value - (d << 3) - (d << 1) + '0')); [EOL]     } else { [EOL]         int digits; [EOL]         if (value < 1000) { [EOL]             digits = 3; [EOL]         } else if (value < 10000) { [EOL]             digits = 4; [EOL]         } else { [EOL]             digits = (int) (Math.log(value) / LOG_10) + 1; [EOL]         } [EOL]         for (; size > digits; size--) { [EOL]             buf.append('0'); [EOL]         } [EOL]         buf.append(Integer.toString(value)); [EOL]     } [EOL] } <line_num>: 49,92
public static void appendPaddedInteger(StringBuffer buf, long value, int size) { [EOL]     int intValue = (int) value; [EOL]     if (intValue == value) { [EOL]         appendPaddedInteger(buf, intValue, size); [EOL]     } else if (size <= 19) { [EOL]         buf.append(Long.toString(value)); [EOL]     } else { [EOL]         if (value < 0) { [EOL]             buf.append('-'); [EOL]             if (value != Long.MIN_VALUE) { [EOL]                 value = -value; [EOL]             } else { [EOL]                 for (; size > 19; size--) { [EOL]                     buf.append('0'); [EOL]                 } [EOL]                 buf.append("9223372036854775808"); [EOL]                 return; [EOL]             } [EOL]         } [EOL]         int digits = (int) (Math.log(value) / LOG_10) + 1; [EOL]         for (; size > digits; size--) { [EOL]             buf.append('0'); [EOL]         } [EOL]         buf.append(Long.toString(value)); [EOL]     } [EOL] } <line_num>: 104,129
public static void writePaddedInteger(Writer out, int value, int size) throws IOException { [EOL]     if (value < 0) { [EOL]         out.write('-'); [EOL]         if (value != Integer.MIN_VALUE) { [EOL]             value = -value; [EOL]         } else { [EOL]             for (; size > 10; size--) { [EOL]                 out.write('0'); [EOL]             } [EOL]             out.write("" + -(long) Integer.MIN_VALUE); [EOL]             return; [EOL]         } [EOL]     } [EOL]     if (value < 10) { [EOL]         for (; size > 1; size--) { [EOL]             out.write('0'); [EOL]         } [EOL]         out.write(value + '0'); [EOL]     } else if (value < 100) { [EOL]         for (; size > 2; size--) { [EOL]             out.write('0'); [EOL]         } [EOL]         int d = ((value + 1) * 13421772) >> 27; [EOL]         out.write(d + '0'); [EOL]         out.write(value - (d << 3) - (d << 1) + '0'); [EOL]     } else { [EOL]         int digits; [EOL]         if (value < 1000) { [EOL]             digits = 3; [EOL]         } else if (value < 10000) { [EOL]             digits = 4; [EOL]         } else { [EOL]             digits = (int) (Math.log(value) / LOG_10) + 1; [EOL]         } [EOL]         for (; size > digits; size--) { [EOL]             out.write('0'); [EOL]         } [EOL]         out.write(Integer.toString(value)); [EOL]     } [EOL] } <line_num>: 141,186
public static void writePaddedInteger(Writer out, long value, int size) throws IOException { [EOL]     int intValue = (int) value; [EOL]     if (intValue == value) { [EOL]         writePaddedInteger(out, intValue, size); [EOL]     } else if (size <= 19) { [EOL]         out.write(Long.toString(value)); [EOL]     } else { [EOL]         if (value < 0) { [EOL]             out.write('-'); [EOL]             if (value != Long.MIN_VALUE) { [EOL]                 value = -value; [EOL]             } else { [EOL]                 for (; size > 19; size--) { [EOL]                     out.write('0'); [EOL]                 } [EOL]                 out.write("9223372036854775808"); [EOL]                 return; [EOL]             } [EOL]         } [EOL]         int digits = (int) (Math.log(value) / LOG_10) + 1; [EOL]         for (; size > digits; size--) { [EOL]             out.write('0'); [EOL]         } [EOL]         out.write(Long.toString(value)); [EOL]     } [EOL] } <line_num>: 198,225
public static void appendUnpaddedInteger(StringBuffer buf, int value) { [EOL]     if (value < 0) { [EOL]         buf.append('-'); [EOL]         if (value != Integer.MIN_VALUE) { [EOL]             value = -value; [EOL]         } else { [EOL]             buf.append("" + -(long) Integer.MIN_VALUE); [EOL]             return; [EOL]         } [EOL]     } [EOL]     if (value < 10) { [EOL]         buf.append((char) (value + '0')); [EOL]     } else if (value < 100) { [EOL]         int d = ((value + 1) * 13421772) >> 27; [EOL]         buf.append((char) (d + '0')); [EOL]         buf.append((char) (value - (d << 3) - (d << 1) + '0')); [EOL]     } else { [EOL]         buf.append(Integer.toString(value)); [EOL]     } [EOL] } <line_num>: 235,258
public static void appendUnpaddedInteger(StringBuffer buf, long value) { [EOL]     int intValue = (int) value; [EOL]     if (intValue == value) { [EOL]         appendUnpaddedInteger(buf, intValue); [EOL]     } else { [EOL]         buf.append(Long.toString(value)); [EOL]     } [EOL] } <line_num>: 268,275
public static void writeUnpaddedInteger(Writer out, int value) throws IOException { [EOL]     if (value < 0) { [EOL]         out.write('-'); [EOL]         if (value != Integer.MIN_VALUE) { [EOL]             value = -value; [EOL]         } else { [EOL]             out.write("" + -(long) Integer.MIN_VALUE); [EOL]             return; [EOL]         } [EOL]     } [EOL]     if (value < 10) { [EOL]         out.write(value + '0'); [EOL]     } else if (value < 100) { [EOL]         int d = ((value + 1) * 13421772) >> 27; [EOL]         out.write(d + '0'); [EOL]         out.write(value - (d << 3) - (d << 1) + '0'); [EOL]     } else { [EOL]         out.write(Integer.toString(value)); [EOL]     } [EOL] } <line_num>: 285,310
public static void writeUnpaddedInteger(Writer out, long value) throws IOException { [EOL]     int intValue = (int) value; [EOL]     if (intValue == value) { [EOL]         writeUnpaddedInteger(out, intValue); [EOL]     } else { [EOL]         out.write(Long.toString(value)); [EOL]     } [EOL] } <line_num>: 320,329
public static int calculateDigitCount(long value) { [EOL]     if (value < 0) { [EOL]         if (value != Long.MIN_VALUE) { [EOL]             return calculateDigitCount(-value) + 1; [EOL]         } else { [EOL]             return 20; [EOL]         } [EOL]     } [EOL]     return (value < 10 ? 1 : (value < 100 ? 2 : (value < 1000 ? 3 : (value < 10000 ? 4 : ((int) (Math.log(value) / LOG_10) + 1))))); [EOL] } <line_num>: 335,349
static int parseTwoDigits(String text, int position) { [EOL]     int value = text.charAt(position) - '0'; [EOL]     return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0'; [EOL] } <line_num>: 351,354
static String createErrorMessage(final String text, final int errorPos) { [EOL]     int sampleLen = errorPos + 32; [EOL]     String sampleText; [EOL]     if (text.length() <= sampleLen + 3) { [EOL]         sampleText = text; [EOL]     } else { [EOL]         sampleText = text.substring(0, sampleLen).concat("..."); [EOL]     } [EOL]     if (errorPos <= 0) { [EOL]         return "Invalid format: \"" + sampleText + '"'; [EOL]     } [EOL]     if (errorPos >= text.length()) { [EOL]         return "Invalid format: \"" + sampleText + "\" is too short"; [EOL]     } [EOL]     return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring(errorPos) + '"'; [EOL] } <line_num>: 356,375
