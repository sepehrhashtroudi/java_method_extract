public PeriodFormatterBuilder() { [EOL]     clear(); [EOL] } <line_num>: 101,103
SimpleAffix(String text) { [EOL]     iText = text; [EOL] } <line_num>: 859,861
PluralAffix(String singularText, String pluralText) { [EOL]     iSingularText = singularText; [EOL]     iPluralText = pluralText; [EOL] } <line_num>: 916,919
CompositeAffix(PeriodFieldAffix left, PeriodFieldAffix right) { [EOL]     iLeft = left; [EOL]     iRight = right; [EOL] } <line_num>: 991,994
FieldFormatter(int minPrintedDigits, int printZeroSetting, int maxParsedDigits, boolean rejectSignedValues, int fieldType, FieldFormatter[] fieldFormatters, PeriodFieldAffix prefix, PeriodFieldAffix suffix) { [EOL]     iMinPrintedDigits = minPrintedDigits; [EOL]     iPrintZeroSetting = printZeroSetting; [EOL]     iMaxParsedDigits = maxParsedDigits; [EOL]     iRejectSignedValues = rejectSignedValues; [EOL]     iFieldType = fieldType; [EOL]     iFieldFormatters = fieldFormatters; [EOL]     iPrefix = prefix; [EOL]     iSuffix = suffix; [EOL] } <line_num>: 1050,1062
FieldFormatter(FieldFormatter field, PeriodFieldAffix suffix) { [EOL]     iMinPrintedDigits = field.iMinPrintedDigits; [EOL]     iPrintZeroSetting = field.iPrintZeroSetting; [EOL]     iMaxParsedDigits = field.iMaxParsedDigits; [EOL]     iRejectSignedValues = field.iRejectSignedValues; [EOL]     iFieldType = field.iFieldType; [EOL]     iFieldFormatters = field.iFieldFormatters; [EOL]     iPrefix = field.iPrefix; [EOL]     if (field.iSuffix != null) { [EOL]         suffix = new CompositeAffix(field.iSuffix, suffix); [EOL]     } [EOL]     iSuffix = suffix; [EOL] } <line_num>: 1064,1076
Literal(String text) { [EOL]     iText = text; [EOL] } <line_num>: 1548,1550
Separator(String text, String finalText, String[] variants, PeriodPrinter beforePrinter, PeriodParser beforeParser, boolean useBefore, boolean useAfter) { [EOL]     iText = text; [EOL]     iFinalText = finalText; [EOL]     if ((finalText == null || text.equals(finalText)) && (variants == null || variants.length == 0)) { [EOL]         iParsedForms = new String[] { text }; [EOL]     } else { [EOL]         TreeSet<String> parsedSet = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER); [EOL]         parsedSet.add(text); [EOL]         parsedSet.add(finalText); [EOL]         if (variants != null) { [EOL]             for (int i = variants.length; --i >= 0; ) { [EOL]                 parsedSet.add(variants[i]); [EOL]             } [EOL]         } [EOL]         ArrayList<String> parsedList = new ArrayList<String>(parsedSet); [EOL]         Collections.reverse(parsedList); [EOL]         iParsedForms = parsedList.toArray(new String[parsedList.size()]); [EOL]     } [EOL]     iBeforePrinter = beforePrinter; [EOL]     iBeforeParser = beforeParser; [EOL]     iUseBefore = useBefore; [EOL]     iUseAfter = useAfter; [EOL] } <line_num>: 1597,1626
Composite(List<Object> elementPairs) { [EOL]     List<Object> printerList = new ArrayList<Object>(); [EOL]     List<Object> parserList = new ArrayList<Object>(); [EOL]     decompose(elementPairs, printerList, parserList); [EOL]     if (printerList.size() <= 0) { [EOL]         iPrinters = null; [EOL]     } else { [EOL]         iPrinters = printerList.toArray(new PeriodPrinter[printerList.size()]); [EOL]     } [EOL]     if (parserList.size() <= 0) { [EOL]         iParsers = null; [EOL]     } else { [EOL]         iParsers = parserList.toArray(new PeriodParser[parserList.size()]); [EOL]     } [EOL] } <line_num>: 1772,1791
public PeriodFormatter toFormatter() { [EOL]     PeriodFormatter formatter = toFormatter(iElementPairs, iNotPrinter, iNotParser); [EOL]     iFieldFormatters = (FieldFormatter[]) iFieldFormatters.clone(); [EOL]     return formatter; [EOL] } <line_num>: 122,126
public PeriodPrinter toPrinter() { [EOL]     if (iNotPrinter) { [EOL]         return null; [EOL]     } [EOL]     return toFormatter().getPrinter(); [EOL] } <line_num>: 140,145
public PeriodParser toParser() { [EOL]     if (iNotParser) { [EOL]         return null; [EOL]     } [EOL]     return toFormatter().getParser(); [EOL] } <line_num>: 159,164
public void clear() { [EOL]     iMinPrintedDigits = 1; [EOL]     iPrintZeroSetting = PRINT_ZERO_RARELY_LAST; [EOL]     iMaxParsedDigits = 10; [EOL]     iRejectSignedValues = false; [EOL]     iPrefix = null; [EOL]     if (iElementPairs == null) { [EOL]         iElementPairs = new ArrayList<Object>(); [EOL]     } else { [EOL]         iElementPairs.clear(); [EOL]     } [EOL]     iNotPrinter = false; [EOL]     iNotParser = false; [EOL]     iFieldFormatters = new FieldFormatter[10]; [EOL] } <line_num>: 170,184
public PeriodFormatterBuilder append(PeriodFormatter formatter) { [EOL]     if (formatter == null) { [EOL]         throw new IllegalArgumentException("No formatter supplied"); [EOL]     } [EOL]     clearPrefix(); [EOL]     append0(formatter.getPrinter(), formatter.getParser()); [EOL]     return this; [EOL] } <line_num>: 191,198
public PeriodFormatterBuilder append(PeriodPrinter printer, PeriodParser parser) { [EOL]     if (printer == null && parser == null) { [EOL]         throw new IllegalArgumentException("No printer or parser supplied"); [EOL]     } [EOL]     clearPrefix(); [EOL]     append0(printer, parser); [EOL]     return this; [EOL] } <line_num>: 211,218
public PeriodFormatterBuilder appendLiteral(String text) { [EOL]     if (text == null) { [EOL]         throw new IllegalArgumentException("Literal must not be null"); [EOL]     } [EOL]     clearPrefix(); [EOL]     Literal literal = new Literal(text); [EOL]     append0(literal, literal); [EOL]     return this; [EOL] } <line_num>: 227,235
public PeriodFormatterBuilder minimumPrintedDigits(int minDigits) { [EOL]     iMinPrintedDigits = minDigits; [EOL]     return this; [EOL] } <line_num>: 244,247
public PeriodFormatterBuilder maximumParsedDigits(int maxDigits) { [EOL]     iMaxParsedDigits = maxDigits; [EOL]     return this; [EOL] } <line_num>: 255,258
public PeriodFormatterBuilder rejectSignedValues(boolean v) { [EOL]     iRejectSignedValues = v; [EOL]     return this; [EOL] } <line_num>: 265,268
public PeriodFormatterBuilder printZeroRarelyLast() { [EOL]     iPrintZeroSetting = PRINT_ZERO_RARELY_LAST; [EOL]     return this; [EOL] } <line_num>: 279,282
public PeriodFormatterBuilder printZeroRarelyFirst() { [EOL]     iPrintZeroSetting = PRINT_ZERO_RARELY_FIRST; [EOL]     return this; [EOL] } <line_num>: 291,294
public PeriodFormatterBuilder printZeroIfSupported() { [EOL]     iPrintZeroSetting = PRINT_ZERO_IF_SUPPORTED; [EOL]     return this; [EOL] } <line_num>: 302,305
public PeriodFormatterBuilder printZeroAlways() { [EOL]     iPrintZeroSetting = PRINT_ZERO_ALWAYS; [EOL]     return this; [EOL] } <line_num>: 314,317
public PeriodFormatterBuilder printZeroNever() { [EOL]     iPrintZeroSetting = PRINT_ZERO_NEVER; [EOL]     return this; [EOL] } <line_num>: 328,331
public PeriodFormatterBuilder appendPrefix(String text) { [EOL]     if (text == null) { [EOL]         throw new IllegalArgumentException(); [EOL]     } [EOL]     return appendPrefix(new SimpleAffix(text)); [EOL] } <line_num>: 342,347
public PeriodFormatterBuilder appendPrefix(String singularText, String pluralText) { [EOL]     if (singularText == null || pluralText == null) { [EOL]         throw new IllegalArgumentException(); [EOL]     } [EOL]     return appendPrefix(new PluralAffix(singularText, pluralText)); [EOL] } <line_num>: 361,367
private PeriodFormatterBuilder appendPrefix(PeriodFieldAffix prefix) { [EOL]     if (prefix == null) { [EOL]         throw new IllegalArgumentException(); [EOL]     } [EOL]     if (iPrefix != null) { [EOL]         prefix = new CompositeAffix(iPrefix, prefix); [EOL]     } [EOL]     iPrefix = prefix; [EOL]     return this; [EOL] } <line_num>: 377,386
public PeriodFormatterBuilder appendYears() { [EOL]     appendField(YEARS); [EOL]     return this; [EOL] } <line_num>: 397,400
public PeriodFormatterBuilder appendMonths() { [EOL]     appendField(MONTHS); [EOL]     return this; [EOL] } <line_num>: 410,413
public PeriodFormatterBuilder appendWeeks() { [EOL]     appendField(WEEKS); [EOL]     return this; [EOL] } <line_num>: 423,426
public PeriodFormatterBuilder appendDays() { [EOL]     appendField(DAYS); [EOL]     return this; [EOL] } <line_num>: 436,439
public PeriodFormatterBuilder appendHours() { [EOL]     appendField(HOURS); [EOL]     return this; [EOL] } <line_num>: 449,452
public PeriodFormatterBuilder appendMinutes() { [EOL]     appendField(MINUTES); [EOL]     return this; [EOL] } <line_num>: 462,465
public PeriodFormatterBuilder appendSeconds() { [EOL]     appendField(SECONDS); [EOL]     return this; [EOL] } <line_num>: 475,478
public PeriodFormatterBuilder appendSecondsWithMillis() { [EOL]     appendField(SECONDS_MILLIS); [EOL]     return this; [EOL] } <line_num>: 487,490
public PeriodFormatterBuilder appendSecondsWithOptionalMillis() { [EOL]     appendField(SECONDS_OPTIONAL_MILLIS); [EOL]     return this; [EOL] } <line_num>: 499,502
public PeriodFormatterBuilder appendMillis() { [EOL]     appendField(MILLIS); [EOL]     return this; [EOL] } <line_num>: 512,515
public PeriodFormatterBuilder appendMillis3Digit() { [EOL]     appendField(7, 3); [EOL]     return this; [EOL] } <line_num>: 524,527
private void appendField(int type) { [EOL]     appendField(type, iMinPrintedDigits); [EOL] } <line_num>: 529,531
private void appendField(int type, int minPrinted) { [EOL]     FieldFormatter field = new FieldFormatter(minPrinted, iPrintZeroSetting, iMaxParsedDigits, iRejectSignedValues, type, iFieldFormatters, iPrefix, null); [EOL]     append0(field, field); [EOL]     iFieldFormatters[type] = field; [EOL]     iPrefix = null; [EOL] } <line_num>: 533,539
public PeriodFormatterBuilder appendSuffix(String text) { [EOL]     if (text == null) { [EOL]         throw new IllegalArgumentException(); [EOL]     } [EOL]     return appendSuffix(new SimpleAffix(text)); [EOL] } <line_num>: 551,556
public PeriodFormatterBuilder appendSuffix(String singularText, String pluralText) { [EOL]     if (singularText == null || pluralText == null) { [EOL]         throw new IllegalArgumentException(); [EOL]     } [EOL]     return appendSuffix(new PluralAffix(singularText, pluralText)); [EOL] } <line_num>: 571,577
private PeriodFormatterBuilder appendSuffix(PeriodFieldAffix suffix) { [EOL]     final Object originalPrinter; [EOL]     final Object originalParser; [EOL]     if (iElementPairs.size() > 0) { [EOL]         originalPrinter = iElementPairs.get(iElementPairs.size() - 2); [EOL]         originalParser = iElementPairs.get(iElementPairs.size() - 1); [EOL]     } else { [EOL]         originalPrinter = null; [EOL]         originalParser = null; [EOL]     } [EOL]     if (originalPrinter == null || originalParser == null || originalPrinter != originalParser || !(originalPrinter instanceof FieldFormatter)) { [EOL]         throw new IllegalStateException("No field to apply suffix to"); [EOL]     } [EOL]     clearPrefix(); [EOL]     FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix); [EOL]     iElementPairs.set(iElementPairs.size() - 2, newField); [EOL]     iElementPairs.set(iElementPairs.size() - 1, newField); [EOL]     iFieldFormatters[newField.getFieldType()] = newField; [EOL]     return this; [EOL] } <line_num>: 588,612
public PeriodFormatterBuilder appendSeparator(String text) { [EOL]     return appendSeparator(text, text, null, true, true); [EOL] } <line_num>: 631,633
public PeriodFormatterBuilder appendSeparatorIfFieldsAfter(String text) { [EOL]     return appendSeparator(text, text, null, false, true); [EOL] } <line_num>: 651,653
public PeriodFormatterBuilder appendSeparatorIfFieldsBefore(String text) { [EOL]     return appendSeparator(text, text, null, true, false); [EOL] } <line_num>: 671,673
public PeriodFormatterBuilder appendSeparator(String text, String finalText) { [EOL]     return appendSeparator(text, finalText, null, true, true); [EOL] } <line_num>: 696,698
public PeriodFormatterBuilder appendSeparator(String text, String finalText, String[] variants) { [EOL]     return appendSeparator(text, finalText, variants, true, true); [EOL] } <line_num>: 722,725
private PeriodFormatterBuilder appendSeparator(String text, String finalText, String[] variants, boolean useBefore, boolean useAfter) { [EOL]     if (text == null || finalText == null) { [EOL]         throw new IllegalArgumentException(); [EOL]     } [EOL]     clearPrefix(); [EOL]     List<Object> pairs = iElementPairs; [EOL]     if (pairs.size() == 0) { [EOL]         if (useAfter && useBefore == false) { [EOL]             Separator separator = new Separator(text, finalText, variants, Literal.EMPTY, Literal.EMPTY, useBefore, useAfter); [EOL]             append0(separator, separator); [EOL]         } [EOL]         return this; [EOL]     } [EOL]     int i; [EOL]     Separator lastSeparator = null; [EOL]     for (i = pairs.size(); --i >= 0; ) { [EOL]         if (pairs.get(i) instanceof Separator) { [EOL]             lastSeparator = (Separator) pairs.get(i); [EOL]             pairs = pairs.subList(i + 1, pairs.size()); [EOL]             break; [EOL]         } [EOL]         i--; [EOL]     } [EOL]     if (lastSeparator != null && pairs.size() == 0) { [EOL]         throw new IllegalStateException("Cannot have two adjacent separators"); [EOL]     } else { [EOL]         Object[] comp = createComposite(pairs); [EOL]         pairs.clear(); [EOL]         Separator separator = new Separator(text, finalText, variants, (PeriodPrinter) comp[0], (PeriodParser) comp[1], useBefore, useAfter); [EOL]         pairs.add(separator); [EOL]         pairs.add(separator); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 727,775
private void clearPrefix() throws IllegalStateException { [EOL]     if (iPrefix != null) { [EOL]         throw new IllegalStateException("Prefix not followed by field"); [EOL]     } [EOL]     iPrefix = null; [EOL] } <line_num>: 778,783
private PeriodFormatterBuilder append0(PeriodPrinter printer, PeriodParser parser) { [EOL]     iElementPairs.add(printer); [EOL]     iElementPairs.add(parser); [EOL]     iNotPrinter |= (printer == null); [EOL]     iNotParser |= (parser == null); [EOL]     return this; [EOL] } <line_num>: 785,791
private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) { [EOL]     if (notPrinter && notParser) { [EOL]         throw new IllegalStateException("Builder has created neither a printer nor a parser"); [EOL]     } [EOL]     int size = elementPairs.size(); [EOL]     if (size >= 2 && elementPairs.get(0) instanceof Separator) { [EOL]         Separator sep = (Separator) elementPairs.get(0); [EOL]         if (sep.iAfterParser == null && sep.iAfterPrinter == null) { [EOL]             PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser); [EOL]             sep = sep.finish(f.getPrinter(), f.getParser()); [EOL]             return new PeriodFormatter(sep, sep); [EOL]         } [EOL]     } [EOL]     Object[] comp = createComposite(elementPairs); [EOL]     if (notPrinter) { [EOL]         return new PeriodFormatter(null, (PeriodParser) comp[1]); [EOL]     } else if (notParser) { [EOL]         return new PeriodFormatter((PeriodPrinter) comp[0], null); [EOL]     } else { [EOL]         return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]); [EOL]     } [EOL] } <line_num>: 794,815
private static Object[] createComposite(List<Object> elementPairs) { [EOL]     switch(elementPairs.size()) { [EOL]         case 0: [EOL]             return new Object[] { Literal.EMPTY, Literal.EMPTY }; [EOL]         case 1: [EOL]             return new Object[] { elementPairs.get(0), elementPairs.get(1) }; [EOL]         default: [EOL]             Composite comp = new Composite(elementPairs); [EOL]             return new Object[] { comp, comp }; [EOL]     } [EOL] } <line_num>: 817,827
int calculatePrintedLength(int value); <line_num>: 835,835
void printTo(StringBuffer buf, int value); <line_num>: 837,837
void printTo(Writer out, int value) throws IOException; <line_num>: 839,839
int parse(String periodStr, int position); <line_num>: 844,844
int scan(String periodStr, int position); <line_num>: 849,849
public int calculatePrintedLength(int value) { [EOL]     return iText.length(); [EOL] } <line_num>: 863,865
public void printTo(StringBuffer buf, int value) { [EOL]     buf.append(iText); [EOL] } <line_num>: 867,869
public void printTo(Writer out, int value) throws IOException { [EOL]     out.write(iText); [EOL] } <line_num>: 871,873
public int parse(String periodStr, int position) { [EOL]     String text = iText; [EOL]     int textLength = text.length(); [EOL]     if (periodStr.regionMatches(true, position, text, 0, textLength)) { [EOL]         return position + textLength; [EOL]     } [EOL]     return ~position; [EOL] } <line_num>: 875,882
public int scan(String periodStr, final int position) { [EOL]     String text = iText; [EOL]     int textLength = text.length(); [EOL]     int sourceLength = periodStr.length(); [EOL]     search: for (int pos = position; pos < sourceLength; pos++) { [EOL]         if (periodStr.regionMatches(true, pos, text, 0, textLength)) { [EOL]             return pos; [EOL]         } [EOL]         switch(periodStr.charAt(pos)) { [EOL]             case '0': [EOL]             case '1': [EOL]             case '2': [EOL]             case '3': [EOL]             case '4': [EOL]             case '5': [EOL]             case '6': [EOL]             case '7': [EOL]             case '8': [EOL]             case '9': [EOL]             case '.': [EOL]             case ',': [EOL]             case '+': [EOL]             case '-': [EOL]                 break; [EOL]             default: [EOL]                 break search; [EOL]         } [EOL]     } [EOL]     return ~position; [EOL] } <line_num>: 884,904
public int calculatePrintedLength(int value) { [EOL]     return (value == 1 ? iSingularText : iPluralText).length(); [EOL] } <line_num>: 921,923
public void printTo(StringBuffer buf, int value) { [EOL]     buf.append(value == 1 ? iSingularText : iPluralText); [EOL] } <line_num>: 925,927
public void printTo(Writer out, int value) throws IOException { [EOL]     out.write(value == 1 ? iSingularText : iPluralText); [EOL] } <line_num>: 929,931
public int parse(String periodStr, int position) { [EOL]     String text1 = iPluralText; [EOL]     String text2 = iSingularText; [EOL]     if (text1.length() < text2.length()) { [EOL]         String temp = text1; [EOL]         text1 = text2; [EOL]         text2 = temp; [EOL]     } [EOL]     if (periodStr.regionMatches(true, position, text1, 0, text1.length())) { [EOL]         return position + text1.length(); [EOL]     } [EOL]     if (periodStr.regionMatches(true, position, text2, 0, text2.length())) { [EOL]         return position + text2.length(); [EOL]     } [EOL]     return ~position; [EOL] } <line_num>: 933,954
public int scan(String periodStr, final int position) { [EOL]     String text1 = iPluralText; [EOL]     String text2 = iSingularText; [EOL]     if (text1.length() < text2.length()) { [EOL]         String temp = text1; [EOL]         text1 = text2; [EOL]         text2 = temp; [EOL]     } [EOL]     int textLength1 = text1.length(); [EOL]     int textLength2 = text2.length(); [EOL]     int sourceLength = periodStr.length(); [EOL]     for (int pos = position; pos < sourceLength; pos++) { [EOL]         if (periodStr.regionMatches(true, pos, text1, 0, textLength1)) { [EOL]             return pos; [EOL]         } [EOL]         if (periodStr.regionMatches(true, pos, text2, 0, textLength2)) { [EOL]             return pos; [EOL]         } [EOL]     } [EOL]     return ~position; [EOL] } <line_num>: 956,980
public int calculatePrintedLength(int value) { [EOL]     return iLeft.calculatePrintedLength(value) + iRight.calculatePrintedLength(value); [EOL] } <line_num>: 996,999
public void printTo(StringBuffer buf, int value) { [EOL]     iLeft.printTo(buf, value); [EOL]     iRight.printTo(buf, value); [EOL] } <line_num>: 1001,1004
public void printTo(Writer out, int value) throws IOException { [EOL]     iLeft.printTo(out, value); [EOL]     iRight.printTo(out, value); [EOL] } <line_num>: 1006,1009
public int parse(String periodStr, int position) { [EOL]     position = iLeft.parse(periodStr, position); [EOL]     if (position >= 0) { [EOL]         position = iRight.parse(periodStr, position); [EOL]     } [EOL]     return position; [EOL] } <line_num>: 1011,1017
public int scan(String periodStr, final int position) { [EOL]     int pos = iLeft.scan(periodStr, position); [EOL]     if (pos >= 0) { [EOL]         return iRight.scan(periodStr, pos); [EOL]     } [EOL]     return ~position; [EOL] } <line_num>: 1019,1025
public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) { [EOL]     if (stopAt <= 0) { [EOL]         return 0; [EOL]     } [EOL]     if (iPrintZeroSetting == PRINT_ZERO_ALWAYS || getFieldValue(period) != Long.MAX_VALUE) { [EOL]         return 1; [EOL]     } [EOL]     return 0; [EOL] } <line_num>: 1078,1086
public int calculatePrintedLength(ReadablePeriod period, Locale locale) { [EOL]     long valueLong = getFieldValue(period); [EOL]     if (valueLong == Long.MAX_VALUE) { [EOL]         return 0; [EOL]     } [EOL]     int sum = Math.max(FormatUtils.calculateDigitCount(valueLong), iMinPrintedDigits); [EOL]     if (iFieldType >= SECONDS_MILLIS) { [EOL]         sum = (valueLong < 0 ? Math.max(sum, 5) : Math.max(sum, 4)); [EOL]         sum++; [EOL]         if (iFieldType == SECONDS_OPTIONAL_MILLIS && (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND) == 0) { [EOL]             sum -= 4; [EOL]         } [EOL]         valueLong = valueLong / DateTimeConstants.MILLIS_PER_SECOND; [EOL]     } [EOL]     int value = (int) valueLong; [EOL]     if (iPrefix != null) { [EOL]         sum += iPrefix.calculatePrintedLength(value); [EOL]     } [EOL]     if (iSuffix != null) { [EOL]         sum += iSuffix.calculatePrintedLength(value); [EOL]     } [EOL]     return sum; [EOL] } <line_num>: 1088,1118
public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) { [EOL]     long valueLong = getFieldValue(period); [EOL]     if (valueLong == Long.MAX_VALUE) { [EOL]         return; [EOL]     } [EOL]     int value = (int) valueLong; [EOL]     if (iFieldType >= SECONDS_MILLIS) { [EOL]         value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND); [EOL]     } [EOL]     if (iPrefix != null) { [EOL]         iPrefix.printTo(buf, value); [EOL]     } [EOL]     int bufLen = buf.length(); [EOL]     int minDigits = iMinPrintedDigits; [EOL]     if (minDigits <= 1) { [EOL]         FormatUtils.appendUnpaddedInteger(buf, value); [EOL]     } else { [EOL]         FormatUtils.appendPaddedInteger(buf, value, minDigits); [EOL]     } [EOL]     if (iFieldType >= SECONDS_MILLIS) { [EOL]         int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND); [EOL]         if (iFieldType == SECONDS_MILLIS || dp > 0) { [EOL]             if (valueLong < 0 && valueLong > -DateTimeConstants.MILLIS_PER_SECOND) { [EOL]                 buf.insert(bufLen, '-'); [EOL]             } [EOL]             buf.append('.'); [EOL]             FormatUtils.appendPaddedInteger(buf, dp, 3); [EOL]         } [EOL]     } [EOL]     if (iSuffix != null) { [EOL]         iSuffix.printTo(buf, value); [EOL]     } [EOL] } <line_num>: 1120,1153
public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException { [EOL]     long valueLong = getFieldValue(period); [EOL]     if (valueLong == Long.MAX_VALUE) { [EOL]         return; [EOL]     } [EOL]     int value = (int) valueLong; [EOL]     if (iFieldType >= SECONDS_MILLIS) { [EOL]         value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND); [EOL]     } [EOL]     if (iPrefix != null) { [EOL]         iPrefix.printTo(out, value); [EOL]     } [EOL]     int minDigits = iMinPrintedDigits; [EOL]     if (minDigits <= 1) { [EOL]         FormatUtils.writeUnpaddedInteger(out, value); [EOL]     } else { [EOL]         FormatUtils.writePaddedInteger(out, value, minDigits); [EOL]     } [EOL]     if (iFieldType >= SECONDS_MILLIS) { [EOL]         int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND); [EOL]         if (iFieldType == SECONDS_MILLIS || dp > 0) { [EOL]             out.write('.'); [EOL]             FormatUtils.writePaddedInteger(out, dp, 3); [EOL]         } [EOL]     } [EOL]     if (iSuffix != null) { [EOL]         iSuffix.printTo(out, value); [EOL]     } [EOL] } <line_num>: 1155,1184
public int parseInto(ReadWritablePeriod period, String text, int position, Locale locale) { [EOL]     boolean mustParse = (iPrintZeroSetting == PRINT_ZERO_ALWAYS); [EOL]     if (position >= text.length()) { [EOL]         return mustParse ? ~position : position; [EOL]     } [EOL]     if (iPrefix != null) { [EOL]         position = iPrefix.parse(text, position); [EOL]         if (position >= 0) { [EOL]             mustParse = true; [EOL]         } else { [EOL]             if (!mustParse) { [EOL]                 return ~position; [EOL]             } [EOL]             return position; [EOL]         } [EOL]     } [EOL]     int suffixPos = -1; [EOL]     if (iSuffix != null && !mustParse) { [EOL]         suffixPos = iSuffix.scan(text, position); [EOL]         if (suffixPos >= 0) { [EOL]             mustParse = true; [EOL]         } else { [EOL]             if (!mustParse) { [EOL]                 return ~suffixPos; [EOL]             } [EOL]             return suffixPos; [EOL]         } [EOL]     } [EOL]     if (!mustParse && !isSupported(period.getPeriodType(), iFieldType)) { [EOL]         return position; [EOL]     } [EOL]     int limit; [EOL]     if (suffixPos > 0) { [EOL]         limit = Math.min(iMaxParsedDigits, suffixPos - position); [EOL]     } else { [EOL]         limit = Math.min(iMaxParsedDigits, text.length() - position); [EOL]     } [EOL]     int length = 0; [EOL]     int fractPos = -1; [EOL]     boolean hasDigits = false; [EOL]     while (length < limit) { [EOL]         char c = text.charAt(position + length); [EOL]         if (length == 0 && (c == '-' || c == '+') && !iRejectSignedValues) { [EOL]             boolean negative = c == '-'; [EOL]             if (length + 1 >= limit || (c = text.charAt(position + length + 1)) < '0' || c > '9') { [EOL]                 break; [EOL]             } [EOL]             if (negative) { [EOL]                 length++; [EOL]             } else { [EOL]                 position++; [EOL]             } [EOL]             limit = Math.min(limit + 1, text.length() - position); [EOL]             continue; [EOL]         } [EOL]         if (c >= '0' && c <= '9') { [EOL]             hasDigits = true; [EOL]         } else { [EOL]             if ((c == '.' || c == ',') && (iFieldType == SECONDS_MILLIS || iFieldType == SECONDS_OPTIONAL_MILLIS)) { [EOL]                 if (fractPos >= 0) { [EOL]                     break; [EOL]                 } [EOL]                 fractPos = position + length + 1; [EOL]                 limit = Math.min(limit + 1, text.length() - position); [EOL]             } else { [EOL]                 break; [EOL]             } [EOL]         } [EOL]         length++; [EOL]     } [EOL]     if (!hasDigits) { [EOL]         return ~position; [EOL]     } [EOL]     if (suffixPos >= 0 && position + length != suffixPos) { [EOL]         return position; [EOL]     } [EOL]     if (iFieldType != SECONDS_MILLIS && iFieldType != SECONDS_OPTIONAL_MILLIS) { [EOL]         setFieldValue(period, iFieldType, parseInt(text, position, length)); [EOL]     } else if (fractPos < 0) { [EOL]         setFieldValue(period, SECONDS, parseInt(text, position, length)); [EOL]         setFieldValue(period, MILLIS, 0); [EOL]     } else { [EOL]         int wholeValue = parseInt(text, position, fractPos - position - 1); [EOL]         setFieldValue(period, SECONDS, wholeValue); [EOL]         int fractLen = position + length - fractPos; [EOL]         int fractValue; [EOL]         if (fractLen <= 0) { [EOL]             fractValue = 0; [EOL]         } else { [EOL]             if (fractLen >= 3) { [EOL]                 fractValue = parseInt(text, fractPos, 3); [EOL]             } else { [EOL]                 fractValue = parseInt(text, fractPos, fractLen); [EOL]                 if (fractLen == 1) { [EOL]                     fractValue *= 100; [EOL]                 } else { [EOL]                     fractValue *= 10; [EOL]                 } [EOL]             } [EOL]             if (wholeValue < 0) { [EOL]                 fractValue = -fractValue; [EOL]             } [EOL]         } [EOL]         setFieldValue(period, MILLIS, fractValue); [EOL]     } [EOL]     position += length; [EOL]     if (position >= 0 && iSuffix != null) { [EOL]         position = iSuffix.parse(text, position); [EOL]     } [EOL]     return position; [EOL] } <line_num>: 1186,1346
private int parseInt(String text, int position, int length) { [EOL]     if (length >= 10) { [EOL]         return Integer.parseInt(text.substring(position, position + length)); [EOL]     } [EOL]     if (length <= 0) { [EOL]         return 0; [EOL]     } [EOL]     int value = text.charAt(position++); [EOL]     length--; [EOL]     boolean negative; [EOL]     if (value == '-') { [EOL]         if (--length < 0) { [EOL]             return 0; [EOL]         } [EOL]         negative = true; [EOL]         value = text.charAt(position++); [EOL]     } else { [EOL]         negative = false; [EOL]     } [EOL]     value -= '0'; [EOL]     while (length-- > 0) { [EOL]         value = ((value << 3) + (value << 1)) + text.charAt(position++) - '0'; [EOL]     } [EOL]     return negative ? -value : value; [EOL] } <line_num>: 1354,1379
long getFieldValue(ReadablePeriod period) { [EOL]     PeriodType type; [EOL]     if (iPrintZeroSetting == PRINT_ZERO_ALWAYS) { [EOL]         type = null; [EOL]     } else { [EOL]         type = period.getPeriodType(); [EOL]     } [EOL]     if (type != null && isSupported(type, iFieldType) == false) { [EOL]         return Long.MAX_VALUE; [EOL]     } [EOL]     long value; [EOL]     switch(iFieldType) { [EOL]         default: [EOL]             return Long.MAX_VALUE; [EOL]         case YEARS: [EOL]             value = period.get(DurationFieldType.years()); [EOL]             break; [EOL]         case MONTHS: [EOL]             value = period.get(DurationFieldType.months()); [EOL]             break; [EOL]         case WEEKS: [EOL]             value = period.get(DurationFieldType.weeks()); [EOL]             break; [EOL]         case DAYS: [EOL]             value = period.get(DurationFieldType.days()); [EOL]             break; [EOL]         case HOURS: [EOL]             value = period.get(DurationFieldType.hours()); [EOL]             break; [EOL]         case MINUTES: [EOL]             value = period.get(DurationFieldType.minutes()); [EOL]             break; [EOL]         case SECONDS: [EOL]             value = period.get(DurationFieldType.seconds()); [EOL]             break; [EOL]         case MILLIS: [EOL]             value = period.get(DurationFieldType.millis()); [EOL]             break; [EOL]         case SECONDS_MILLIS: [EOL]         case SECONDS_OPTIONAL_MILLIS: [EOL]             int seconds = period.get(DurationFieldType.seconds()); [EOL]             int millis = period.get(DurationFieldType.millis()); [EOL]             value = (seconds * (long) DateTimeConstants.MILLIS_PER_SECOND) + millis; [EOL]             break; [EOL]     } [EOL]     if (value == 0) { [EOL]         switch(iPrintZeroSetting) { [EOL]             case PRINT_ZERO_NEVER: [EOL]                 return Long.MAX_VALUE; [EOL]             case PRINT_ZERO_RARELY_LAST: [EOL]                 if (isZero(period) && iFieldFormatters[iFieldType] == this) { [EOL]                     for (int i = iFieldType + 1; i <= MAX_FIELD; i++) { [EOL]                         if (isSupported(type, i) && iFieldFormatters[i] != null) { [EOL]                             return Long.MAX_VALUE; [EOL]                         } [EOL]                     } [EOL]                 } else { [EOL]                     return Long.MAX_VALUE; [EOL]                 } [EOL]                 break; [EOL]             case PRINT_ZERO_RARELY_FIRST: [EOL]                 if (isZero(period) && iFieldFormatters[iFieldType] == this) { [EOL]                     int i = Math.min(iFieldType, 8); [EOL]                     i--; [EOL]                     for (; i >= 0 && i <= MAX_FIELD; i--) { [EOL]                         if (isSupported(type, i) && iFieldFormatters[i] != null) { [EOL]                             return Long.MAX_VALUE; [EOL]                         } [EOL]                     } [EOL]                 } else { [EOL]                     return Long.MAX_VALUE; [EOL]                 } [EOL]                 break; [EOL]         } [EOL]     } [EOL]     return value; [EOL] } <line_num>: 1384,1465
boolean isZero(ReadablePeriod period) { [EOL]     for (int i = 0, isize = period.size(); i < isize; i++) { [EOL]         if (period.getValue(i) != 0) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 1467,1474
boolean isSupported(PeriodType type, int field) { [EOL]     switch(field) { [EOL]         default: [EOL]             return false; [EOL]         case YEARS: [EOL]             return type.isSupported(DurationFieldType.years()); [EOL]         case MONTHS: [EOL]             return type.isSupported(DurationFieldType.months()); [EOL]         case WEEKS: [EOL]             return type.isSupported(DurationFieldType.weeks()); [EOL]         case DAYS: [EOL]             return type.isSupported(DurationFieldType.days()); [EOL]         case HOURS: [EOL]             return type.isSupported(DurationFieldType.hours()); [EOL]         case MINUTES: [EOL]             return type.isSupported(DurationFieldType.minutes()); [EOL]         case SECONDS: [EOL]             return type.isSupported(DurationFieldType.seconds()); [EOL]         case MILLIS: [EOL]             return type.isSupported(DurationFieldType.millis()); [EOL]         case SECONDS_MILLIS: [EOL]         case SECONDS_OPTIONAL_MILLIS: [EOL]             return type.isSupported(DurationFieldType.seconds()) || type.isSupported(DurationFieldType.millis()); [EOL]     } [EOL] } <line_num>: 1476,1501
void setFieldValue(ReadWritablePeriod period, int field, int value) { [EOL]     switch(field) { [EOL]         default: [EOL]             break; [EOL]         case YEARS: [EOL]             period.setYears(value); [EOL]             break; [EOL]         case MONTHS: [EOL]             period.setMonths(value); [EOL]             break; [EOL]         case WEEKS: [EOL]             period.setWeeks(value); [EOL]             break; [EOL]         case DAYS: [EOL]             period.setDays(value); [EOL]             break; [EOL]         case HOURS: [EOL]             period.setHours(value); [EOL]             break; [EOL]         case MINUTES: [EOL]             period.setMinutes(value); [EOL]             break; [EOL]         case SECONDS: [EOL]             period.setSeconds(value); [EOL]             break; [EOL]         case MILLIS: [EOL]             period.setMillis(value); [EOL]             break; [EOL]     } [EOL] } <line_num>: 1503,1532
int getFieldType() { [EOL]     return iFieldType; [EOL] } <line_num>: 1534,1536
public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) { [EOL]     return 0; [EOL] } <line_num>: 1552,1554
public int calculatePrintedLength(ReadablePeriod period, Locale locale) { [EOL]     return iText.length(); [EOL] } <line_num>: 1556,1558
public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) { [EOL]     buf.append(iText); [EOL] } <line_num>: 1560,1562
public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException { [EOL]     out.write(iText); [EOL] } <line_num>: 1564,1566
public int parseInto(ReadWritablePeriod period, String periodStr, int position, Locale locale) { [EOL]     if (periodStr.regionMatches(true, position, iText, 0, iText.length())) { [EOL]         return position + iText.length(); [EOL]     } [EOL]     return ~position; [EOL] } <line_num>: 1568,1575
public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) { [EOL]     int sum = iBeforePrinter.countFieldsToPrint(period, stopAt, locale); [EOL]     if (sum < stopAt) { [EOL]         sum += iAfterPrinter.countFieldsToPrint(period, stopAt, locale); [EOL]     } [EOL]     return sum; [EOL] } <line_num>: 1628,1634
public int calculatePrintedLength(ReadablePeriod period, Locale locale) { [EOL]     PeriodPrinter before = iBeforePrinter; [EOL]     PeriodPrinter after = iAfterPrinter; [EOL]     int sum = before.calculatePrintedLength(period, locale) + after.calculatePrintedLength(period, locale); [EOL]     if (iUseBefore) { [EOL]         if (before.countFieldsToPrint(period, 1, locale) > 0) { [EOL]             if (iUseAfter) { [EOL]                 int afterCount = after.countFieldsToPrint(period, 2, locale); [EOL]                 if (afterCount > 0) { [EOL]                     sum += (afterCount > 1 ? iText : iFinalText).length(); [EOL]                 } [EOL]             } else { [EOL]                 sum += iText.length(); [EOL]             } [EOL]         } [EOL]     } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) { [EOL]         sum += iText.length(); [EOL]     } [EOL]     return sum; [EOL] } <line_num>: 1636,1659
public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) { [EOL]     PeriodPrinter before = iBeforePrinter; [EOL]     PeriodPrinter after = iAfterPrinter; [EOL]     before.printTo(buf, period, locale); [EOL]     if (iUseBefore) { [EOL]         if (before.countFieldsToPrint(period, 1, locale) > 0) { [EOL]             if (iUseAfter) { [EOL]                 int afterCount = after.countFieldsToPrint(period, 2, locale); [EOL]                 if (afterCount > 0) { [EOL]                     buf.append(afterCount > 1 ? iText : iFinalText); [EOL]                 } [EOL]             } else { [EOL]                 buf.append(iText); [EOL]             } [EOL]         } [EOL]     } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) { [EOL]         buf.append(iText); [EOL]     } [EOL]     after.printTo(buf, period, locale); [EOL] } <line_num>: 1661,1681
public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException { [EOL]     PeriodPrinter before = iBeforePrinter; [EOL]     PeriodPrinter after = iAfterPrinter; [EOL]     before.printTo(out, period, locale); [EOL]     if (iUseBefore) { [EOL]         if (before.countFieldsToPrint(period, 1, locale) > 0) { [EOL]             if (iUseAfter) { [EOL]                 int afterCount = after.countFieldsToPrint(period, 2, locale); [EOL]                 if (afterCount > 0) { [EOL]                     out.write(afterCount > 1 ? iText : iFinalText); [EOL]                 } [EOL]             } else { [EOL]                 out.write(iText); [EOL]             } [EOL]         } [EOL]     } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) { [EOL]         out.write(iText); [EOL]     } [EOL]     after.printTo(out, period, locale); [EOL] } <line_num>: 1683,1703
public int parseInto(ReadWritablePeriod period, String periodStr, int position, Locale locale) { [EOL]     int oldPos = position; [EOL]     position = iBeforeParser.parseInto(period, periodStr, position, locale); [EOL]     if (position < 0) { [EOL]         return position; [EOL]     } [EOL]     boolean found = false; [EOL]     int parsedFormLength = -1; [EOL]     if (position > oldPos) { [EOL]         String[] parsedForms = iParsedForms; [EOL]         int length = parsedForms.length; [EOL]         for (int i = 0; i < length; i++) { [EOL]             String parsedForm = parsedForms[i]; [EOL]             if ((parsedForm == null || parsedForm.length() == 0) || periodStr.regionMatches(true, position, parsedForm, 0, parsedForm.length())) { [EOL]                 parsedFormLength = (parsedForm == null ? 0 : parsedForm.length()); [EOL]                 position += parsedFormLength; [EOL]                 found = true; [EOL]                 break; [EOL]             } [EOL]         } [EOL]     } [EOL]     oldPos = position; [EOL]     position = iAfterParser.parseInto(period, periodStr, position, locale); [EOL]     if (position < 0) { [EOL]         return position; [EOL]     } [EOL]     if (found && position == oldPos && parsedFormLength > 0) { [EOL]         return ~oldPos; [EOL]     } [EOL]     if (position > oldPos && !found && !iUseBefore) { [EOL]         return ~oldPos; [EOL]     } [EOL]     return position; [EOL] } <line_num>: 1705,1753
Separator finish(PeriodPrinter afterPrinter, PeriodParser afterParser) { [EOL]     iAfterPrinter = afterPrinter; [EOL]     iAfterParser = afterParser; [EOL]     return this; [EOL] } <line_num>: 1755,1759
public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) { [EOL]     int sum = 0; [EOL]     PeriodPrinter[] printers = iPrinters; [EOL]     for (int i = printers.length; sum < stopAt && --i >= 0; ) { [EOL]         sum += printers[i].countFieldsToPrint(period, Integer.MAX_VALUE, locale); [EOL]     } [EOL]     return sum; [EOL] } <line_num>: 1793,1800
public int calculatePrintedLength(ReadablePeriod period, Locale locale) { [EOL]     int sum = 0; [EOL]     PeriodPrinter[] printers = iPrinters; [EOL]     for (int i = printers.length; --i >= 0; ) { [EOL]         sum += printers[i].calculatePrintedLength(period, locale); [EOL]     } [EOL]     return sum; [EOL] } <line_num>: 1802,1809
public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) { [EOL]     PeriodPrinter[] printers = iPrinters; [EOL]     int len = printers.length; [EOL]     for (int i = 0; i < len; i++) { [EOL]         printers[i].printTo(buf, period, locale); [EOL]     } [EOL] } <line_num>: 1811,1817
public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException { [EOL]     PeriodPrinter[] printers = iPrinters; [EOL]     int len = printers.length; [EOL]     for (int i = 0; i < len; i++) { [EOL]         printers[i].printTo(out, period, locale); [EOL]     } [EOL] } <line_num>: 1819,1825
public int parseInto(ReadWritablePeriod period, String periodStr, int position, Locale locale) { [EOL]     PeriodParser[] parsers = iParsers; [EOL]     if (parsers == null) { [EOL]         throw new UnsupportedOperationException(); [EOL]     } [EOL]     int len = parsers.length; [EOL]     for (int i = 0; i < len && position >= 0; i++) { [EOL]         position = parsers[i].parseInto(period, periodStr, position, locale); [EOL]     } [EOL]     return position; [EOL] } <line_num>: 1827,1840
private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) { [EOL]     int size = elementPairs.size(); [EOL]     for (int i = 0; i < size; i += 2) { [EOL]         Object element = elementPairs.get(i); [EOL]         if (element instanceof PeriodPrinter) { [EOL]             if (element instanceof Composite) { [EOL]                 addArrayToList(printerList, ((Composite) element).iPrinters); [EOL]             } else { [EOL]                 printerList.add(element); [EOL]             } [EOL]         } [EOL]         element = elementPairs.get(i + 1); [EOL]         if (element instanceof PeriodParser) { [EOL]             if (element instanceof Composite) { [EOL]                 addArrayToList(parserList, ((Composite) element).iParsers); [EOL]             } else { [EOL]                 parserList.add(element); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 1842,1863
private void addArrayToList(List<Object> list, Object[] array) { [EOL]     if (array != null) { [EOL]         for (int i = 0; i < array.length; i++) { [EOL]             list.add(array[i]); [EOL]         } [EOL]     } [EOL] } <line_num>: 1865,1871
