public LocalDateTime() { [EOL]     this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance()); [EOL] } <line_num>: 263,265
public LocalDateTime(DateTimeZone zone) { [EOL]     this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone)); [EOL] } <line_num>: 277,279
public LocalDateTime(Chronology chronology) { [EOL]     this(DateTimeUtils.currentTimeMillis(), chronology); [EOL] } <line_num>: 291,293
public LocalDateTime(long instant) { [EOL]     this(instant, ISOChronology.getInstance()); [EOL] } <line_num>: 304,306
public LocalDateTime(long instant, DateTimeZone zone) { [EOL]     this(instant, ISOChronology.getInstance(zone)); [EOL] } <line_num>: 318,320
public LocalDateTime(long instant, Chronology chronology) { [EOL]     chronology = DateTimeUtils.getChronology(chronology); [EOL]     long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant); [EOL]     iLocalMillis = localMillis; [EOL]     iChronology = chronology.withUTC(); [EOL] } <line_num>: 332,338
public LocalDateTime(Object instant) { [EOL]     this(instant, (Chronology) null); [EOL] } <line_num>: 357,359
public LocalDateTime(Object instant, DateTimeZone zone) { [EOL]     PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant); [EOL]     Chronology chronology = converter.getChronology(instant, zone); [EOL]     chronology = DateTimeUtils.getChronology(chronology); [EOL]     iChronology = chronology.withUTC(); [EOL]     int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser()); [EOL]     iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], values[3]); [EOL] } <line_num>: 379,386
public LocalDateTime(Object instant, Chronology chronology) { [EOL]     PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant); [EOL]     chronology = converter.getChronology(instant, chronology); [EOL]     chronology = DateTimeUtils.getChronology(chronology); [EOL]     iChronology = chronology.withUTC(); [EOL]     int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser()); [EOL]     iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], values[3]); [EOL] } <line_num>: 409,416
public LocalDateTime(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour) { [EOL]     this(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, 0, 0, ISOChronology.getInstanceUTC()); [EOL] } <line_num>: 429,437
public LocalDateTime(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute) { [EOL]     this(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, 0, ISOChronology.getInstanceUTC()); [EOL] } <line_num>: 450,459
public LocalDateTime(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) { [EOL]     this(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, ISOChronology.getInstanceUTC()); [EOL] } <line_num>: 473,483
public LocalDateTime(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond, Chronology chronology) { [EOL]     super(); [EOL]     chronology = DateTimeUtils.getChronology(chronology).withUTC(); [EOL]     long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond); [EOL]     iChronology = chronology; [EOL]     iLocalMillis = instant; [EOL] } <line_num>: 500,515
Property(LocalDateTime instant, DateTimeField field) { [EOL]     super(); [EOL]     iInstant = instant; [EOL]     iField = field; [EOL] } <line_num>: 2154,2158
public static LocalDateTime now() { [EOL]     return new LocalDateTime(); [EOL] } <line_num>: 110,112
public static LocalDateTime now(DateTimeZone zone) { [EOL]     if (zone == null) { [EOL]         throw new NullPointerException("Zone must not be null"); [EOL]     } [EOL]     return new LocalDateTime(zone); [EOL] } <line_num>: 123,128
public static LocalDateTime now(Chronology chronology) { [EOL]     if (chronology == null) { [EOL]         throw new NullPointerException("Chronology must not be null"); [EOL]     } [EOL]     return new LocalDateTime(chronology); [EOL] } <line_num>: 139,144
@FromString [EOL] public static LocalDateTime parse(String str) { [EOL]     return parse(str, ISODateTimeFormat.localDateOptionalTimeParser()); [EOL] } <line_num>: 155,158
public static LocalDateTime parse(String str, DateTimeFormatter formatter) { [EOL]     return formatter.parseLocalDateTime(str); [EOL] } <line_num>: 167,169
public static LocalDateTime fromCalendarFields(Calendar calendar) { [EOL]     if (calendar == null) { [EOL]         throw new IllegalArgumentException("The calendar must not be null"); [EOL]     } [EOL]     int era = calendar.get(Calendar.ERA); [EOL]     int yearOfEra = calendar.get(Calendar.YEAR); [EOL]     return new LocalDateTime((era == GregorianCalendar.AD ? yearOfEra : 1 - yearOfEra), calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH), calendar.get(Calendar.HOUR_OF_DAY), calendar.get(Calendar.MINUTE), calendar.get(Calendar.SECOND), calendar.get(Calendar.MILLISECOND)); [EOL] } <line_num>: 195,210
@SuppressWarnings("deprecation") [EOL] public static LocalDateTime fromDateFields(Date date) { [EOL]     if (date == null) { [EOL]         throw new IllegalArgumentException("The date must not be null"); [EOL]     } [EOL]     if (date.getTime() < 0) { [EOL]         GregorianCalendar cal = new GregorianCalendar(); [EOL]         cal.setTime(date); [EOL]         return fromCalendarFields(cal); [EOL]     } [EOL]     return new LocalDateTime(date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), (((int) (date.getTime() % 1000)) + 1000) % 1000); [EOL] } <line_num>: 232,252
private Object readResolve() { [EOL]     if (iChronology == null) { [EOL]         return new LocalDateTime(iLocalMillis, ISOChronology.getInstanceUTC()); [EOL]     } [EOL]     if (DateTimeZone.UTC.equals(iChronology.getZone()) == false) { [EOL]         return new LocalDateTime(iLocalMillis, iChronology.withUTC()); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 521,529
public int size() { [EOL]     return 4; [EOL] } <line_num>: 538,540
protected DateTimeField getField(int index, Chronology chrono) { [EOL]     switch(index) { [EOL]         case YEAR: [EOL]             return chrono.year(); [EOL]         case MONTH_OF_YEAR: [EOL]             return chrono.monthOfYear(); [EOL]         case DAY_OF_MONTH: [EOL]             return chrono.dayOfMonth(); [EOL]         case MILLIS_OF_DAY: [EOL]             return chrono.millisOfDay(); [EOL]         default: [EOL]             throw new IndexOutOfBoundsException("Invalid index: " + index); [EOL]     } [EOL] } <line_num>: 551,564
public int getValue(int index) { [EOL]     switch(index) { [EOL]         case YEAR: [EOL]             return getChronology().year().get(getLocalMillis()); [EOL]         case MONTH_OF_YEAR: [EOL]             return getChronology().monthOfYear().get(getLocalMillis()); [EOL]         case DAY_OF_MONTH: [EOL]             return getChronology().dayOfMonth().get(getLocalMillis()); [EOL]         case MILLIS_OF_DAY: [EOL]             return getChronology().millisOfDay().get(getLocalMillis()); [EOL]         default: [EOL]             throw new IndexOutOfBoundsException("Invalid index: " + index); [EOL]     } [EOL] } <line_num>: 576,589
public int get(DateTimeFieldType type) { [EOL]     if (type == null) { [EOL]         throw new IllegalArgumentException("The DateTimeFieldType must not be null"); [EOL]     } [EOL]     return type.getField(getChronology()).get(getLocalMillis()); [EOL] } <line_num>: 606,611
public boolean isSupported(DateTimeFieldType type) { [EOL]     if (type == null) { [EOL]         return false; [EOL]     } [EOL]     return type.getField(getChronology()).isSupported(); [EOL] } <line_num>: 621,626
public boolean isSupported(DurationFieldType type) { [EOL]     if (type == null) { [EOL]         return false; [EOL]     } [EOL]     return type.getField(getChronology()).isSupported(); [EOL] } <line_num>: 635,640
protected long getLocalMillis() { [EOL]     return iLocalMillis; [EOL] } <line_num>: 650,652
public Chronology getChronology() { [EOL]     return iChronology; [EOL] } <line_num>: 659,661
public boolean equals(Object partial) { [EOL]     if (this == partial) { [EOL]         return true; [EOL]     } [EOL]     if (partial instanceof LocalDateTime) { [EOL]         LocalDateTime other = (LocalDateTime) partial; [EOL]         if (iChronology.equals(other.iChronology)) { [EOL]             return iLocalMillis == other.iLocalMillis; [EOL]         } [EOL]     } [EOL]     return super.equals(partial); [EOL] } <line_num>: 671,683
public int compareTo(ReadablePartial partial) { [EOL]     if (this == partial) { [EOL]         return 0; [EOL]     } [EOL]     if (partial instanceof LocalDateTime) { [EOL]         LocalDateTime other = (LocalDateTime) partial; [EOL]         if (iChronology.equals(other.iChronology)) { [EOL]             return (iLocalMillis < other.iLocalMillis ? -1 : (iLocalMillis == other.iLocalMillis ? 0 : 1)); [EOL]         } [EOL]     } [EOL]     return super.compareTo(partial); [EOL] } <line_num>: 701,715
public DateTime toDateTime() { [EOL]     return toDateTime((DateTimeZone) null); [EOL] } <line_num>: 726,728
public DateTime toDateTime(DateTimeZone zone) { [EOL]     zone = DateTimeUtils.getZone(zone); [EOL]     Chronology chrono = iChronology.withZone(zone); [EOL]     return new DateTime(getYear(), getMonthOfYear(), getDayOfMonth(), getHourOfDay(), getMinuteOfHour(), getSecondOfMinute(), getMillisOfSecond(), chrono); [EOL] } <line_num>: 739,746
public LocalDate toLocalDate() { [EOL]     return new LocalDate(getLocalMillis(), getChronology()); [EOL] } <line_num>: 754,756
public LocalTime toLocalTime() { [EOL]     return new LocalTime(getLocalMillis(), getChronology()); [EOL] } <line_num>: 763,765
@SuppressWarnings("deprecation") [EOL] public Date toDate() { [EOL]     int dom = getDayOfMonth(); [EOL]     Date date = new Date(getYear() - 1900, getMonthOfYear() - 1, dom, getHourOfDay(), getMinuteOfHour(), getSecondOfMinute()); [EOL]     date.setTime(date.getTime() + getMillisOfSecond()); [EOL]     return correctDstTransition(date, TimeZone.getDefault()); [EOL] } <line_num>: 785,792
public Date toDate(final TimeZone timeZone) { [EOL]     final Calendar calendar = Calendar.getInstance(timeZone); [EOL]     calendar.clear(); [EOL]     calendar.set(getYear(), getMonthOfYear() - 1, getDayOfMonth(), getHourOfDay(), getMinuteOfHour(), getSecondOfMinute()); [EOL]     Date date = calendar.getTime(); [EOL]     date.setTime(date.getTime() + getMillisOfSecond()); [EOL]     return correctDstTransition(date, timeZone); [EOL] } <line_num>: 815,823
private Date correctDstTransition(Date date, final TimeZone timeZone) { [EOL]     Calendar calendar = Calendar.getInstance(timeZone); [EOL]     calendar.setTime(date); [EOL]     LocalDateTime check = LocalDateTime.fromCalendarFields(calendar); [EOL]     if (check.isBefore(this)) { [EOL]         while (check.isBefore(this)) { [EOL]             calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000); [EOL]             check = LocalDateTime.fromCalendarFields(calendar); [EOL]         } [EOL]         while (check.isBefore(this) == false) { [EOL]             calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000); [EOL]             check = LocalDateTime.fromCalendarFields(calendar); [EOL]         } [EOL]         calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000); [EOL]     } else if (check.equals(this)) { [EOL]         final Calendar earlier = Calendar.getInstance(timeZone); [EOL]         earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings()); [EOL]         check = LocalDateTime.fromCalendarFields(earlier); [EOL]         if (check.equals(this)) { [EOL]             calendar = earlier; [EOL]         } [EOL]     } [EOL]     return calendar.getTime(); [EOL] } <line_num>: 840,867
LocalDateTime withLocalMillis(long newMillis) { [EOL]     return (newMillis == getLocalMillis() ? this : new LocalDateTime(newMillis, getChronology())); [EOL] } <line_num>: 880,882
public LocalDateTime withDate(int year, int monthOfYear, int dayOfMonth) { [EOL]     Chronology chrono = getChronology(); [EOL]     long instant = getLocalMillis(); [EOL]     instant = chrono.year().set(instant, year); [EOL]     instant = chrono.monthOfYear().set(instant, monthOfYear); [EOL]     instant = chrono.dayOfMonth().set(instant, dayOfMonth); [EOL]     return withLocalMillis(instant); [EOL] } <line_num>: 902,909
public LocalDateTime withTime(int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) { [EOL]     Chronology chrono = getChronology(); [EOL]     long instant = getLocalMillis(); [EOL]     instant = chrono.hourOfDay().set(instant, hourOfDay); [EOL]     instant = chrono.minuteOfHour().set(instant, minuteOfHour); [EOL]     instant = chrono.secondOfMinute().set(instant, secondOfMinute); [EOL]     instant = chrono.millisOfSecond().set(instant, millisOfSecond); [EOL]     return withLocalMillis(instant); [EOL] } <line_num>: 929,937
public LocalDateTime withFields(ReadablePartial partial) { [EOL]     if (partial == null) { [EOL]         return this; [EOL]     } [EOL]     return withLocalMillis(getChronology().set(partial, getLocalMillis())); [EOL] } <line_num>: 952,957
public LocalDateTime withField(DateTimeFieldType fieldType, int value) { [EOL]     if (fieldType == null) { [EOL]         throw new IllegalArgumentException("Field must not be null"); [EOL]     } [EOL]     long instant = fieldType.getField(getChronology()).set(getLocalMillis(), value); [EOL]     return withLocalMillis(instant); [EOL] } <line_num>: 978,984
public LocalDateTime withFieldAdded(DurationFieldType fieldType, int amount) { [EOL]     if (fieldType == null) { [EOL]         throw new IllegalArgumentException("Field must not be null"); [EOL]     } [EOL]     if (amount == 0) { [EOL]         return this; [EOL]     } [EOL]     long instant = fieldType.getField(getChronology()).add(getLocalMillis(), amount); [EOL]     return withLocalMillis(instant); [EOL] } <line_num>: 1005,1014
public LocalDateTime withDurationAdded(ReadableDuration durationToAdd, int scalar) { [EOL]     if (durationToAdd == null || scalar == 0) { [EOL]         return this; [EOL]     } [EOL]     long instant = getChronology().add(getLocalMillis(), durationToAdd.getMillis(), scalar); [EOL]     return withLocalMillis(instant); [EOL] } <line_num>: 1027,1033
public LocalDateTime withPeriodAdded(ReadablePeriod period, int scalar) { [EOL]     if (period == null || scalar == 0) { [EOL]         return this; [EOL]     } [EOL]     long instant = getChronology().add(period, getLocalMillis(), scalar); [EOL]     return withLocalMillis(instant); [EOL] } <line_num>: 1050,1056
public LocalDateTime plus(ReadableDuration duration) { [EOL]     return withDurationAdded(duration, 1); [EOL] } <line_num>: 1068,1070
public LocalDateTime plus(ReadablePeriod period) { [EOL]     return withPeriodAdded(period, 1); [EOL] } <line_num>: 1085,1087
public LocalDateTime plusYears(int years) { [EOL]     if (years == 0) { [EOL]         return this; [EOL]     } [EOL]     long instant = getChronology().years().add(getLocalMillis(), years); [EOL]     return withLocalMillis(instant); [EOL] } <line_num>: 1105,1111
public LocalDateTime plusMonths(int months) { [EOL]     if (months == 0) { [EOL]         return this; [EOL]     } [EOL]     long instant = getChronology().months().add(getLocalMillis(), months); [EOL]     return withLocalMillis(instant); [EOL] } <line_num>: 1128,1134
public LocalDateTime plusWeeks(int weeks) { [EOL]     if (weeks == 0) { [EOL]         return this; [EOL]     } [EOL]     long instant = getChronology().weeks().add(getLocalMillis(), weeks); [EOL]     return withLocalMillis(instant); [EOL] } <line_num>: 1151,1157
public LocalDateTime plusDays(int days) { [EOL]     if (days == 0) { [EOL]         return this; [EOL]     } [EOL]     long instant = getChronology().days().add(getLocalMillis(), days); [EOL]     return withLocalMillis(instant); [EOL] } <line_num>: 1174,1180
public LocalDateTime plusHours(int hours) { [EOL]     if (hours == 0) { [EOL]         return this; [EOL]     } [EOL]     long instant = getChronology().hours().add(getLocalMillis(), hours); [EOL]     return withLocalMillis(instant); [EOL] } <line_num>: 1198,1204
public LocalDateTime plusMinutes(int minutes) { [EOL]     if (minutes == 0) { [EOL]         return this; [EOL]     } [EOL]     long instant = getChronology().minutes().add(getLocalMillis(), minutes); [EOL]     return withLocalMillis(instant); [EOL] } <line_num>: 1221,1227
public LocalDateTime plusSeconds(int seconds) { [EOL]     if (seconds == 0) { [EOL]         return this; [EOL]     } [EOL]     long instant = getChronology().seconds().add(getLocalMillis(), seconds); [EOL]     return withLocalMillis(instant); [EOL] } <line_num>: 1244,1250
public LocalDateTime plusMillis(int millis) { [EOL]     if (millis == 0) { [EOL]         return this; [EOL]     } [EOL]     long instant = getChronology().millis().add(getLocalMillis(), millis); [EOL]     return withLocalMillis(instant); [EOL] } <line_num>: 1267,1273
public LocalDateTime minus(ReadableDuration duration) { [EOL]     return withDurationAdded(duration, -1); [EOL] } <line_num>: 1285,1287
public LocalDateTime minus(ReadablePeriod period) { [EOL]     return withPeriodAdded(period, -1); [EOL] } <line_num>: 1302,1304
public LocalDateTime minusYears(int years) { [EOL]     if (years == 0) { [EOL]         return this; [EOL]     } [EOL]     long instant = getChronology().years().subtract(getLocalMillis(), years); [EOL]     return withLocalMillis(instant); [EOL] } <line_num>: 1322,1328
public LocalDateTime minusMonths(int months) { [EOL]     if (months == 0) { [EOL]         return this; [EOL]     } [EOL]     long instant = getChronology().months().subtract(getLocalMillis(), months); [EOL]     return withLocalMillis(instant); [EOL] } <line_num>: 1345,1351
public LocalDateTime minusWeeks(int weeks) { [EOL]     if (weeks == 0) { [EOL]         return this; [EOL]     } [EOL]     long instant = getChronology().weeks().subtract(getLocalMillis(), weeks); [EOL]     return withLocalMillis(instant); [EOL] } <line_num>: 1368,1374
public LocalDateTime minusDays(int days) { [EOL]     if (days == 0) { [EOL]         return this; [EOL]     } [EOL]     long instant = getChronology().days().subtract(getLocalMillis(), days); [EOL]     return withLocalMillis(instant); [EOL] } <line_num>: 1391,1397
public LocalDateTime minusHours(int hours) { [EOL]     if (hours == 0) { [EOL]         return this; [EOL]     } [EOL]     long instant = getChronology().hours().subtract(getLocalMillis(), hours); [EOL]     return withLocalMillis(instant); [EOL] } <line_num>: 1415,1421
public LocalDateTime minusMinutes(int minutes) { [EOL]     if (minutes == 0) { [EOL]         return this; [EOL]     } [EOL]     long instant = getChronology().minutes().subtract(getLocalMillis(), minutes); [EOL]     return withLocalMillis(instant); [EOL] } <line_num>: 1438,1444
public LocalDateTime minusSeconds(int seconds) { [EOL]     if (seconds == 0) { [EOL]         return this; [EOL]     } [EOL]     long instant = getChronology().seconds().subtract(getLocalMillis(), seconds); [EOL]     return withLocalMillis(instant); [EOL] } <line_num>: 1461,1467
public LocalDateTime minusMillis(int millis) { [EOL]     if (millis == 0) { [EOL]         return this; [EOL]     } [EOL]     long instant = getChronology().millis().subtract(getLocalMillis(), millis); [EOL]     return withLocalMillis(instant); [EOL] } <line_num>: 1484,1490
public Property property(DateTimeFieldType fieldType) { [EOL]     if (fieldType == null) { [EOL]         throw new IllegalArgumentException("The DateTimeFieldType must not be null"); [EOL]     } [EOL]     if (isSupported(fieldType) == false) { [EOL]         throw new IllegalArgumentException("Field '" + fieldType + "' is not supported"); [EOL]     } [EOL]     return new Property(this, fieldType.getField(getChronology())); [EOL] } <line_num>: 1501,1509
public int getEra() { [EOL]     return getChronology().era().get(getLocalMillis()); [EOL] } <line_num>: 1517,1519
public int getCenturyOfEra() { [EOL]     return getChronology().centuryOfEra().get(getLocalMillis()); [EOL] } <line_num>: 1526,1528
public int getYearOfEra() { [EOL]     return getChronology().yearOfEra().get(getLocalMillis()); [EOL] } <line_num>: 1535,1537
public int getYearOfCentury() { [EOL]     return getChronology().yearOfCentury().get(getLocalMillis()); [EOL] } <line_num>: 1544,1546
public int getYear() { [EOL]     return getChronology().year().get(getLocalMillis()); [EOL] } <line_num>: 1553,1555
public int getWeekyear() { [EOL]     return getChronology().weekyear().get(getLocalMillis()); [EOL] } <line_num>: 1568,1570
public int getMonthOfYear() { [EOL]     return getChronology().monthOfYear().get(getLocalMillis()); [EOL] } <line_num>: 1577,1579
public int getWeekOfWeekyear() { [EOL]     return getChronology().weekOfWeekyear().get(getLocalMillis()); [EOL] } <line_num>: 1591,1593
public int getDayOfYear() { [EOL]     return getChronology().dayOfYear().get(getLocalMillis()); [EOL] } <line_num>: 1600,1602
public int getDayOfMonth() { [EOL]     return getChronology().dayOfMonth().get(getLocalMillis()); [EOL] } <line_num>: 1611,1613
public int getDayOfWeek() { [EOL]     return getChronology().dayOfWeek().get(getLocalMillis()); [EOL] } <line_num>: 1622,1624
public int getHourOfDay() { [EOL]     return getChronology().hourOfDay().get(getLocalMillis()); [EOL] } <line_num>: 1632,1634
public int getMinuteOfHour() { [EOL]     return getChronology().minuteOfHour().get(getLocalMillis()); [EOL] } <line_num>: 1641,1643
public int getSecondOfMinute() { [EOL]     return getChronology().secondOfMinute().get(getLocalMillis()); [EOL] } <line_num>: 1650,1652
public int getMillisOfSecond() { [EOL]     return getChronology().millisOfSecond().get(getLocalMillis()); [EOL] } <line_num>: 1659,1661
public int getMillisOfDay() { [EOL]     return getChronology().millisOfDay().get(getLocalMillis()); [EOL] } <line_num>: 1668,1670
public LocalDateTime withEra(int era) { [EOL]     return withLocalMillis(getChronology().era().set(getLocalMillis(), era)); [EOL] } <line_num>: 1684,1686
public LocalDateTime withCenturyOfEra(int centuryOfEra) { [EOL]     return withLocalMillis(getChronology().centuryOfEra().set(getLocalMillis(), centuryOfEra)); [EOL] } <line_num>: 1699,1701
public LocalDateTime withYearOfEra(int yearOfEra) { [EOL]     return withLocalMillis(getChronology().yearOfEra().set(getLocalMillis(), yearOfEra)); [EOL] } <line_num>: 1714,1716
public LocalDateTime withYearOfCentury(int yearOfCentury) { [EOL]     return withLocalMillis(getChronology().yearOfCentury().set(getLocalMillis(), yearOfCentury)); [EOL] } <line_num>: 1729,1731
public LocalDateTime withYear(int year) { [EOL]     return withLocalMillis(getChronology().year().set(getLocalMillis(), year)); [EOL] } <line_num>: 1744,1746
public LocalDateTime withWeekyear(int weekyear) { [EOL]     return withLocalMillis(getChronology().weekyear().set(getLocalMillis(), weekyear)); [EOL] } <line_num>: 1765,1767
public LocalDateTime withMonthOfYear(int monthOfYear) { [EOL]     return withLocalMillis(getChronology().monthOfYear().set(getLocalMillis(), monthOfYear)); [EOL] } <line_num>: 1780,1782
public LocalDateTime withWeekOfWeekyear(int weekOfWeekyear) { [EOL]     return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear)); [EOL] } <line_num>: 1800,1802
public LocalDateTime withDayOfYear(int dayOfYear) { [EOL]     return withLocalMillis(getChronology().dayOfYear().set(getLocalMillis(), dayOfYear)); [EOL] } <line_num>: 1815,1817
public LocalDateTime withDayOfMonth(int dayOfMonth) { [EOL]     return withLocalMillis(getChronology().dayOfMonth().set(getLocalMillis(), dayOfMonth)); [EOL] } <line_num>: 1830,1832
public LocalDateTime withDayOfWeek(int dayOfWeek) { [EOL]     return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek)); [EOL] } <line_num>: 1845,1847
public LocalDateTime withHourOfDay(int hour) { [EOL]     return withLocalMillis(getChronology().hourOfDay().set(getLocalMillis(), hour)); [EOL] } <line_num>: 1861,1863
public LocalDateTime withMinuteOfHour(int minute) { [EOL]     return withLocalMillis(getChronology().minuteOfHour().set(getLocalMillis(), minute)); [EOL] } <line_num>: 1876,1878
public LocalDateTime withSecondOfMinute(int second) { [EOL]     return withLocalMillis(getChronology().secondOfMinute().set(getLocalMillis(), second)); [EOL] } <line_num>: 1891,1893
public LocalDateTime withMillisOfSecond(int millis) { [EOL]     return withLocalMillis(getChronology().millisOfSecond().set(getLocalMillis(), millis)); [EOL] } <line_num>: 1906,1908
public LocalDateTime withMillisOfDay(int millis) { [EOL]     return withLocalMillis(getChronology().millisOfDay().set(getLocalMillis(), millis)); [EOL] } <line_num>: 1921,1923
public Property era() { [EOL]     return new Property(this, getChronology().era()); [EOL] } <line_num>: 1931,1933
public Property centuryOfEra() { [EOL]     return new Property(this, getChronology().centuryOfEra()); [EOL] } <line_num>: 1940,1942
public Property yearOfCentury() { [EOL]     return new Property(this, getChronology().yearOfCentury()); [EOL] } <line_num>: 1949,1951
public Property yearOfEra() { [EOL]     return new Property(this, getChronology().yearOfEra()); [EOL] } <line_num>: 1958,1960
public Property year() { [EOL]     return new Property(this, getChronology().year()); [EOL] } <line_num>: 1967,1969
public Property weekyear() { [EOL]     return new Property(this, getChronology().weekyear()); [EOL] } <line_num>: 1976,1978
public Property monthOfYear() { [EOL]     return new Property(this, getChronology().monthOfYear()); [EOL] } <line_num>: 1985,1987
public Property weekOfWeekyear() { [EOL]     return new Property(this, getChronology().weekOfWeekyear()); [EOL] } <line_num>: 1994,1996
public Property dayOfYear() { [EOL]     return new Property(this, getChronology().dayOfYear()); [EOL] } <line_num>: 2003,2005
public Property dayOfMonth() { [EOL]     return new Property(this, getChronology().dayOfMonth()); [EOL] } <line_num>: 2012,2014
public Property dayOfWeek() { [EOL]     return new Property(this, getChronology().dayOfWeek()); [EOL] } <line_num>: 2021,2023
public Property hourOfDay() { [EOL]     return new Property(this, getChronology().hourOfDay()); [EOL] } <line_num>: 2031,2033
public Property minuteOfHour() { [EOL]     return new Property(this, getChronology().minuteOfHour()); [EOL] } <line_num>: 2040,2042
public Property secondOfMinute() { [EOL]     return new Property(this, getChronology().secondOfMinute()); [EOL] } <line_num>: 2049,2051
public Property millisOfSecond() { [EOL]     return new Property(this, getChronology().millisOfSecond()); [EOL] } <line_num>: 2058,2060
public Property millisOfDay() { [EOL]     return new Property(this, getChronology().millisOfDay()); [EOL] } <line_num>: 2067,2069
@ToString [EOL] public String toString() { [EOL]     return ISODateTimeFormat.dateTime().print(this); [EOL] } <line_num>: 2077,2080
public String toString(String pattern) { [EOL]     if (pattern == null) { [EOL]         return toString(); [EOL]     } [EOL]     return DateTimeFormat.forPattern(pattern).print(this); [EOL] } <line_num>: 2088,2093
public String toString(String pattern, Locale locale) throws IllegalArgumentException { [EOL]     if (pattern == null) { [EOL]         return toString(); [EOL]     } [EOL]     return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this); [EOL] } <line_num>: 2102,2107
private void writeObject(ObjectOutputStream oos) throws IOException { [EOL]     oos.writeObject(iInstant); [EOL]     oos.writeObject(iField.getType()); [EOL] } <line_num>: 2163,2166
private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException { [EOL]     iInstant = (LocalDateTime) oos.readObject(); [EOL]     DateTimeFieldType type = (DateTimeFieldType) oos.readObject(); [EOL]     iField = type.getField(iInstant.getChronology()); [EOL] } <line_num>: 2171,2175
public DateTimeField getField() { [EOL]     return iField; [EOL] } <line_num>: 2183,2185
protected long getMillis() { [EOL]     return iInstant.getLocalMillis(); [EOL] } <line_num>: 2192,2194
protected Chronology getChronology() { [EOL]     return iInstant.getChronology(); [EOL] } <line_num>: 2202,2204
public LocalDateTime getLocalDateTime() { [EOL]     return iInstant; [EOL] } <line_num>: 2211,2213
public LocalDateTime addToCopy(int value) { [EOL]     return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value)); [EOL] } <line_num>: 2225,2227
public LocalDateTime addToCopy(long value) { [EOL]     return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value)); [EOL] } <line_num>: 2238,2240
public LocalDateTime addWrapFieldToCopy(int value) { [EOL]     return iInstant.withLocalMillis(iField.addWrapField(iInstant.getLocalMillis(), value)); [EOL] } <line_num>: 2253,2255
public LocalDateTime setCopy(int value) { [EOL]     return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), value)); [EOL] } <line_num>: 2267,2269
public LocalDateTime setCopy(String text, Locale locale) { [EOL]     return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), text, locale)); [EOL] } <line_num>: 2281,2283
public LocalDateTime setCopy(String text) { [EOL]     return setCopy(text, null); [EOL] } <line_num>: 2294,2296
public LocalDateTime withMaximumValue() { [EOL]     return setCopy(getMaximumValue()); [EOL] } <line_num>: 2313,2315
public LocalDateTime withMinimumValue() { [EOL]     return setCopy(getMinimumValue()); [EOL] } <line_num>: 2325,2327
public LocalDateTime roundFloorCopy() { [EOL]     return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis())); [EOL] } <line_num>: 2340,2342
public LocalDateTime roundCeilingCopy() { [EOL]     return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis())); [EOL] } <line_num>: 2354,2356
public LocalDateTime roundHalfFloorCopy() { [EOL]     return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis())); [EOL] } <line_num>: 2364,2366
public LocalDateTime roundHalfCeilingCopy() { [EOL]     return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis())); [EOL] } <line_num>: 2374,2376
public LocalDateTime roundHalfEvenCopy() { [EOL]     return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis())); [EOL] } <line_num>: 2385,2387
