public Interval(long startInstant, long endInstant) { [EOL]     super(startInstant, endInstant, null); [EOL] } <line_num>: 81,83
public Interval(long startInstant, long endInstant, DateTimeZone zone) { [EOL]     super(startInstant, endInstant, ISOChronology.getInstance(zone)); [EOL] } <line_num>: 95,97
public Interval(long startInstant, long endInstant, Chronology chronology) { [EOL]     super(startInstant, endInstant, chronology); [EOL] } <line_num>: 108,110
public Interval(ReadableInstant start, ReadableInstant end) { [EOL]     super(start, end); [EOL] } <line_num>: 121,123
public Interval(ReadableInstant start, ReadableDuration duration) { [EOL]     super(start, duration); [EOL] } <line_num>: 133,135
public Interval(ReadableDuration duration, ReadableInstant end) { [EOL]     super(duration, end); [EOL] } <line_num>: 145,147
public Interval(ReadableInstant start, ReadablePeriod period) { [EOL]     super(start, period); [EOL] } <line_num>: 160,162
public Interval(ReadablePeriod period, ReadableInstant end) { [EOL]     super(period, end); [EOL] } <line_num>: 175,177
public Interval(Object interval) { [EOL]     super(interval, null); [EOL] } <line_num>: 192,194
public Interval(Object interval, Chronology chronology) { [EOL]     super(interval, chronology); [EOL] } <line_num>: 211,213
public static Interval parse(String str) { [EOL]     return new Interval(str); [EOL] } <line_num>: 68,70
public Interval toInterval() { [EOL]     return this; [EOL] } <line_num>: 222,224
public Interval overlap(ReadableInterval interval) { [EOL]     interval = DateTimeUtils.getReadableInterval(interval); [EOL]     if (overlaps(interval) == false) { [EOL]         return null; [EOL]     } [EOL]     long start = Math.max(getStartMillis(), interval.getStartMillis()); [EOL]     long end = Math.min(getEndMillis(), interval.getEndMillis()); [EOL]     return new Interval(start, end, getChronology()); [EOL] } <line_num>: 250,258
public Interval gap(ReadableInterval interval) { [EOL]     interval = DateTimeUtils.getReadableInterval(interval); [EOL]     long otherStart = interval.getStartMillis(); [EOL]     long otherEnd = interval.getEndMillis(); [EOL]     long thisStart = getStartMillis(); [EOL]     long thisEnd = getEndMillis(); [EOL]     if (thisStart > otherEnd) { [EOL]         return new Interval(otherEnd, thisStart, getChronology()); [EOL]     } else if (otherStart > thisEnd) { [EOL]         return new Interval(thisEnd, otherStart, getChronology()); [EOL]     } else { [EOL]         return null; [EOL]     } [EOL] } <line_num>: 285,298
public boolean abuts(ReadableInterval interval) { [EOL]     if (interval == null) { [EOL]         long now = DateTimeUtils.currentTimeMillis(); [EOL]         return (getStartMillis() == now || getEndMillis() == now); [EOL]     } else { [EOL]         return (interval.getEndMillis() == getStartMillis() || getEndMillis() == interval.getStartMillis()); [EOL]     } [EOL] } <line_num>: 337,345
public Interval withChronology(Chronology chronology) { [EOL]     if (getChronology() == chronology) { [EOL]         return this; [EOL]     } [EOL]     return new Interval(getStartMillis(), getEndMillis(), chronology); [EOL] } <line_num>: 354,359
public Interval withStartMillis(long startInstant) { [EOL]     if (startInstant == getStartMillis()) { [EOL]         return this; [EOL]     } [EOL]     return new Interval(startInstant, getEndMillis(), getChronology()); [EOL] } <line_num>: 368,373
public Interval withStart(ReadableInstant start) { [EOL]     long startMillis = DateTimeUtils.getInstantMillis(start); [EOL]     return withStartMillis(startMillis); [EOL] } <line_num>: 382,385
public Interval withEndMillis(long endInstant) { [EOL]     if (endInstant == getEndMillis()) { [EOL]         return this; [EOL]     } [EOL]     return new Interval(getStartMillis(), endInstant, getChronology()); [EOL] } <line_num>: 394,399
public Interval withEnd(ReadableInstant end) { [EOL]     long endMillis = DateTimeUtils.getInstantMillis(end); [EOL]     return withEndMillis(endMillis); [EOL] } <line_num>: 408,411
public Interval withDurationAfterStart(ReadableDuration duration) { [EOL]     long durationMillis = DateTimeUtils.getDurationMillis(duration); [EOL]     if (durationMillis == toDurationMillis()) { [EOL]         return this; [EOL]     } [EOL]     Chronology chrono = getChronology(); [EOL]     long startMillis = getStartMillis(); [EOL]     long endMillis = chrono.add(startMillis, durationMillis, 1); [EOL]     return new Interval(startMillis, endMillis, chrono); [EOL] } <line_num>: 421,430
public Interval withDurationBeforeEnd(ReadableDuration duration) { [EOL]     long durationMillis = DateTimeUtils.getDurationMillis(duration); [EOL]     if (durationMillis == toDurationMillis()) { [EOL]         return this; [EOL]     } [EOL]     Chronology chrono = getChronology(); [EOL]     long endMillis = getEndMillis(); [EOL]     long startMillis = chrono.add(endMillis, durationMillis, -1); [EOL]     return new Interval(startMillis, endMillis, chrono); [EOL] } <line_num>: 439,448
public Interval withPeriodAfterStart(ReadablePeriod period) { [EOL]     if (period == null) { [EOL]         return withDurationAfterStart(null); [EOL]     } [EOL]     Chronology chrono = getChronology(); [EOL]     long startMillis = getStartMillis(); [EOL]     long endMillis = chrono.add(period, startMillis, 1); [EOL]     return new Interval(startMillis, endMillis, chrono); [EOL] } <line_num>: 458,466
public Interval withPeriodBeforeEnd(ReadablePeriod period) { [EOL]     if (period == null) { [EOL]         return withDurationBeforeEnd(null); [EOL]     } [EOL]     Chronology chrono = getChronology(); [EOL]     long endMillis = getEndMillis(); [EOL]     long startMillis = chrono.add(period, endMillis, -1); [EOL]     return new Interval(startMillis, endMillis, chrono); [EOL] } <line_num>: 475,483
