protected BaseSingleFieldPeriod(int period) { [EOL]     super(); [EOL]     iPeriod = period; [EOL] } <line_num>: 156,159
protected static int between(ReadableInstant start, ReadableInstant end, DurationFieldType field) { [EOL]     if (start == null || end == null) { [EOL]         throw new IllegalArgumentException("ReadableInstant objects must not be null"); [EOL]     } [EOL]     Chronology chrono = DateTimeUtils.getInstantChronology(start); [EOL]     int amount = field.getField(chrono).getDifference(end.getMillis(), start.getMillis()); [EOL]     return amount; [EOL] } <line_num>: 67,74
protected static int between(ReadablePartial start, ReadablePartial end, ReadablePeriod zeroInstance) { [EOL]     if (start == null || end == null) { [EOL]         throw new IllegalArgumentException("ReadablePartial objects must not be null"); [EOL]     } [EOL]     if (start.size() != end.size()) { [EOL]         throw new IllegalArgumentException("ReadablePartial objects must have the same set of fields"); [EOL]     } [EOL]     for (int i = 0, isize = start.size(); i < isize; i++) { [EOL]         if (start.getFieldType(i) != end.getFieldType(i)) { [EOL]             throw new IllegalArgumentException("ReadablePartial objects must have the same set of fields"); [EOL]         } [EOL]     } [EOL]     if (DateTimeUtils.isContiguous(start) == false) { [EOL]         throw new IllegalArgumentException("ReadablePartial objects must be contiguous"); [EOL]     } [EOL]     Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC(); [EOL]     int[] values = chrono.get(zeroInstance, chrono.set(start, START_1972), chrono.set(end, START_1972)); [EOL]     return values[0]; [EOL] } <line_num>: 89,107
protected static int standardPeriodIn(ReadablePeriod period, long millisPerUnit) { [EOL]     if (period == null) { [EOL]         return 0; [EOL]     } [EOL]     Chronology iso = ISOChronology.getInstanceUTC(); [EOL]     long duration = 0L; [EOL]     for (int i = 0; i < period.size(); i++) { [EOL]         int value = period.getValue(i); [EOL]         if (value != 0) { [EOL]             DurationField field = period.getFieldType(i).getField(iso); [EOL]             if (field.isPrecise() == false) { [EOL]                 throw new IllegalArgumentException("Cannot convert period to duration as " + field.getName() + " is not precise in the period " + period); [EOL]             } [EOL]             duration = FieldUtils.safeAdd(duration, FieldUtils.safeMultiply(field.getUnitMillis(), value)); [EOL]         } [EOL]     } [EOL]     return FieldUtils.safeToInt(duration / millisPerUnit); [EOL] } <line_num>: 129,148
protected int getValue() { [EOL]     return iPeriod; [EOL] } <line_num>: 167,169
protected void setValue(int value) { [EOL]     iPeriod = value; [EOL] } <line_num>: 177,179
public abstract DurationFieldType getFieldType(); <line_num>: 187,187
public abstract PeriodType getPeriodType(); <line_num>: 194,194
public int size() { [EOL]     return 1; [EOL] } <line_num>: 202,204
public DurationFieldType getFieldType(int index) { [EOL]     if (index != 0) { [EOL]         throw new IndexOutOfBoundsException(String.valueOf(index)); [EOL]     } [EOL]     return getFieldType(); [EOL] } <line_num>: 216,221
public int getValue(int index) { [EOL]     if (index != 0) { [EOL]         throw new IndexOutOfBoundsException(String.valueOf(index)); [EOL]     } [EOL]     return getValue(); [EOL] } <line_num>: 232,237
public int get(DurationFieldType type) { [EOL]     if (type == getFieldType()) { [EOL]         return getValue(); [EOL]     } [EOL]     return 0; [EOL] } <line_num>: 248,253
public boolean isSupported(DurationFieldType type) { [EOL]     return (type == getFieldType()); [EOL] } <line_num>: 261,263
public Period toPeriod() { [EOL]     return Period.ZERO.withFields(this); [EOL] } <line_num>: 272,274
public MutablePeriod toMutablePeriod() { [EOL]     MutablePeriod period = new MutablePeriod(); [EOL]     period.add(this); [EOL]     return period; [EOL] } <line_num>: 284,288
public boolean equals(Object period) { [EOL]     if (this == period) { [EOL]         return true; [EOL]     } [EOL]     if (period instanceof ReadablePeriod == false) { [EOL]         return false; [EOL]     } [EOL]     ReadablePeriod other = (ReadablePeriod) period; [EOL]     return (other.getPeriodType() == getPeriodType() && other.getValue(0) == getValue()); [EOL] } <line_num>: 300,309
public int hashCode() { [EOL]     int total = 17; [EOL]     total = 27 * total + getValue(); [EOL]     total = 27 * total + getFieldType().hashCode(); [EOL]     return total; [EOL] } <line_num>: 316,321
public int compareTo(BaseSingleFieldPeriod other) { [EOL]     if (other.getClass() != getClass()) { [EOL]         throw new ClassCastException(getClass() + " cannot be compared to " + other.getClass()); [EOL]     } [EOL]     int otherValue = other.getValue(); [EOL]     int thisValue = getValue(); [EOL]     if (thisValue > otherValue) { [EOL]         return 1; [EOL]     } [EOL]     if (thisValue < otherValue) { [EOL]         return -1; [EOL]     } [EOL]     return 0; [EOL] } <line_num>: 331,344
