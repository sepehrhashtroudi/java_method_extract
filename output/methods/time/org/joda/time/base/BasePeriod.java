protected BasePeriod(int years, int months, int weeks, int days, int hours, int minutes, int seconds, int millis, PeriodType type) { [EOL]     super(); [EOL]     type = checkPeriodType(type); [EOL]     iType = type; [EOL]     iValues = setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); [EOL] } <line_num>: 87,94
protected BasePeriod(long startInstant, long endInstant, PeriodType type, Chronology chrono) { [EOL]     super(); [EOL]     type = checkPeriodType(type); [EOL]     chrono = DateTimeUtils.getChronology(chrono); [EOL]     iType = type; [EOL]     iValues = chrono.get(this, startInstant, endInstant); [EOL] } <line_num>: 105,111
protected BasePeriod(ReadableInstant startInstant, ReadableInstant endInstant, PeriodType type) { [EOL]     super(); [EOL]     type = checkPeriodType(type); [EOL]     if (startInstant == null && endInstant == null) { [EOL]         iType = type; [EOL]         iValues = new int[size()]; [EOL]     } else { [EOL]         long startMillis = DateTimeUtils.getInstantMillis(startInstant); [EOL]         long endMillis = DateTimeUtils.getInstantMillis(endInstant); [EOL]         Chronology chrono = DateTimeUtils.getIntervalChronology(startInstant, endInstant); [EOL]         iType = type; [EOL]         iValues = chrono.get(this, startMillis, endMillis); [EOL]     } [EOL] } <line_num>: 121,134
protected BasePeriod(ReadablePartial start, ReadablePartial end, PeriodType type) { [EOL]     super(); [EOL]     if (start == null || end == null) { [EOL]         throw new IllegalArgumentException("ReadablePartial objects must not be null"); [EOL]     } [EOL]     if (start instanceof BaseLocal && end instanceof BaseLocal && start.getClass() == end.getClass()) { [EOL]         type = checkPeriodType(type); [EOL]         long startMillis = ((BaseLocal) start).getLocalMillis(); [EOL]         long endMillis = ((BaseLocal) end).getLocalMillis(); [EOL]         Chronology chrono = start.getChronology(); [EOL]         chrono = DateTimeUtils.getChronology(chrono); [EOL]         iType = type; [EOL]         iValues = chrono.get(this, startMillis, endMillis); [EOL]     } else { [EOL]         if (start.size() != end.size()) { [EOL]             throw new IllegalArgumentException("ReadablePartial objects must have the same set of fields"); [EOL]         } [EOL]         for (int i = 0, isize = start.size(); i < isize; i++) { [EOL]             if (start.getFieldType(i) != end.getFieldType(i)) { [EOL]                 throw new IllegalArgumentException("ReadablePartial objects must have the same set of fields"); [EOL]             } [EOL]         } [EOL]         if (DateTimeUtils.isContiguous(start) == false) { [EOL]             throw new IllegalArgumentException("ReadablePartial objects must be contiguous"); [EOL]         } [EOL]         iType = checkPeriodType(type); [EOL]         Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC(); [EOL]         iValues = chrono.get(this, chrono.set(start, 0L), chrono.set(end, 0L)); [EOL]     } [EOL] } <line_num>: 154,184
protected BasePeriod(ReadableInstant startInstant, ReadableDuration duration, PeriodType type) { [EOL]     super(); [EOL]     type = checkPeriodType(type); [EOL]     long startMillis = DateTimeUtils.getInstantMillis(startInstant); [EOL]     long durationMillis = DateTimeUtils.getDurationMillis(duration); [EOL]     long endMillis = FieldUtils.safeAdd(startMillis, durationMillis); [EOL]     Chronology chrono = DateTimeUtils.getInstantChronology(startInstant); [EOL]     iType = type; [EOL]     iValues = chrono.get(this, startMillis, endMillis); [EOL] } <line_num>: 193,202
protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, PeriodType type) { [EOL]     super(); [EOL]     type = checkPeriodType(type); [EOL]     long durationMillis = DateTimeUtils.getDurationMillis(duration); [EOL]     long endMillis = DateTimeUtils.getInstantMillis(endInstant); [EOL]     long startMillis = FieldUtils.safeSubtract(endMillis, durationMillis); [EOL]     Chronology chrono = DateTimeUtils.getInstantChronology(endInstant); [EOL]     iType = type; [EOL]     iValues = chrono.get(this, startMillis, endMillis); [EOL] } <line_num>: 211,220
protected BasePeriod(long duration) { [EOL]     super(); [EOL]     iType = PeriodType.standard(); [EOL]     int[] values = ISOChronology.getInstanceUTC().get(DUMMY_PERIOD, duration); [EOL]     iValues = new int[8]; [EOL]     System.arraycopy(values, 0, iValues, 4, 4); [EOL] } <line_num>: 230,239
protected BasePeriod(long duration, PeriodType type, Chronology chrono) { [EOL]     super(); [EOL]     type = checkPeriodType(type); [EOL]     chrono = DateTimeUtils.getChronology(chrono); [EOL]     iType = type; [EOL]     iValues = chrono.get(this, duration); [EOL] } <line_num>: 253,259
protected BasePeriod(Object period, PeriodType type, Chronology chrono) { [EOL]     super(); [EOL]     PeriodConverter converter = ConverterManager.getInstance().getPeriodConverter(period); [EOL]     type = (type == null ? converter.getPeriodType(period) : type); [EOL]     type = checkPeriodType(type); [EOL]     iType = type; [EOL]     if (this instanceof ReadWritablePeriod) { [EOL]         iValues = new int[size()]; [EOL]         chrono = DateTimeUtils.getChronology(chrono); [EOL]         converter.setInto((ReadWritablePeriod) this, period, chrono); [EOL]     } else { [EOL]         iValues = new MutablePeriod(period, type, chrono).getValues(); [EOL]     } [EOL] } <line_num>: 270,283
protected BasePeriod(int[] values, PeriodType type) { [EOL]     super(); [EOL]     iType = type; [EOL]     iValues = values; [EOL] } <line_num>: 292,296
public int getValue(int index) { [EOL]     return 0; [EOL] } <line_num>: 58,60
public PeriodType getPeriodType() { [EOL]     return PeriodType.time(); [EOL] } <line_num>: 61,63
protected PeriodType checkPeriodType(PeriodType type) { [EOL]     return DateTimeUtils.getPeriodType(type); [EOL] } <line_num>: 307,309
public PeriodType getPeriodType() { [EOL]     return iType; [EOL] } <line_num>: 317,319
public int getValue(int index) { [EOL]     return iValues[index]; [EOL] } <line_num>: 328,330
public Duration toDurationFrom(ReadableInstant startInstant) { [EOL]     long startMillis = DateTimeUtils.getInstantMillis(startInstant); [EOL]     Chronology chrono = DateTimeUtils.getInstantChronology(startInstant); [EOL]     long endMillis = chrono.add(this, startMillis, 1); [EOL]     return new Duration(startMillis, endMillis); [EOL] } <line_num>: 349,354
public Duration toDurationTo(ReadableInstant endInstant) { [EOL]     long endMillis = DateTimeUtils.getInstantMillis(endInstant); [EOL]     Chronology chrono = DateTimeUtils.getInstantChronology(endInstant); [EOL]     long startMillis = chrono.add(this, endMillis, -1); [EOL]     return new Duration(startMillis, endMillis); [EOL] } <line_num>: 373,378
private void checkAndUpdate(DurationFieldType type, int[] values, int newValue) { [EOL]     int index = indexOf(type); [EOL]     if (index == -1) { [EOL]         if (newValue != 0) { [EOL]             throw new IllegalArgumentException("Period does not support field '" + type.getName() + "'"); [EOL]         } [EOL]     } else { [EOL]         values[index] = newValue; [EOL]     } [EOL] } <line_num>: 389,399
protected void setPeriod(ReadablePeriod period) { [EOL]     if (period == null) { [EOL]         setValues(new int[size()]); [EOL]     } else { [EOL]         setPeriodInternal(period); [EOL]     } [EOL] } <line_num>: 408,414
private void setPeriodInternal(ReadablePeriod period) { [EOL]     int[] newValues = new int[size()]; [EOL]     for (int i = 0, isize = period.size(); i < isize; i++) { [EOL]         DurationFieldType type = period.getFieldType(i); [EOL]         int value = period.getValue(i); [EOL]         checkAndUpdate(type, newValues, value); [EOL]     } [EOL]     setValues(newValues); [EOL] } <line_num>: 419,427
protected void setPeriod(int years, int months, int weeks, int days, int hours, int minutes, int seconds, int millis) { [EOL]     int[] newValues = setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); [EOL]     setValues(newValues); [EOL] } <line_num>: 442,446
private int[] setPeriodInternal(int years, int months, int weeks, int days, int hours, int minutes, int seconds, int millis) { [EOL]     int[] newValues = new int[size()]; [EOL]     checkAndUpdate(DurationFieldType.years(), newValues, years); [EOL]     checkAndUpdate(DurationFieldType.months(), newValues, months); [EOL]     checkAndUpdate(DurationFieldType.weeks(), newValues, weeks); [EOL]     checkAndUpdate(DurationFieldType.days(), newValues, days); [EOL]     checkAndUpdate(DurationFieldType.hours(), newValues, hours); [EOL]     checkAndUpdate(DurationFieldType.minutes(), newValues, minutes); [EOL]     checkAndUpdate(DurationFieldType.seconds(), newValues, seconds); [EOL]     checkAndUpdate(DurationFieldType.millis(), newValues, millis); [EOL]     return newValues; [EOL] } <line_num>: 451,463
protected void setField(DurationFieldType field, int value) { [EOL]     setFieldInto(iValues, field, value); [EOL] } <line_num>: 473,475
protected void setFieldInto(int[] values, DurationFieldType field, int value) { [EOL]     int index = indexOf(field); [EOL]     if (index == -1) { [EOL]         if (value != 0 || field == null) { [EOL]             throw new IllegalArgumentException("Period does not support field '" + field + "'"); [EOL]         } [EOL]     } else { [EOL]         values[index] = value; [EOL]     } [EOL] } <line_num>: 485,495
protected void addField(DurationFieldType field, int value) { [EOL]     addFieldInto(iValues, field, value); [EOL] } <line_num>: 504,506
protected void addFieldInto(int[] values, DurationFieldType field, int value) { [EOL]     int index = indexOf(field); [EOL]     if (index == -1) { [EOL]         if (value != 0 || field == null) { [EOL]             throw new IllegalArgumentException("Period does not support field '" + field + "'"); [EOL]         } [EOL]     } else { [EOL]         values[index] = FieldUtils.safeAdd(values[index], value); [EOL]     } [EOL] } <line_num>: 516,526
protected void mergePeriod(ReadablePeriod period) { [EOL]     if (period != null) { [EOL]         setValues(mergePeriodInto(getValues(), period)); [EOL]     } [EOL] } <line_num>: 534,538
protected int[] mergePeriodInto(int[] values, ReadablePeriod period) { [EOL]     for (int i = 0, isize = period.size(); i < isize; i++) { [EOL]         DurationFieldType type = period.getFieldType(i); [EOL]         int value = period.getValue(i); [EOL]         checkAndUpdate(type, values, value); [EOL]     } [EOL]     return values; [EOL] } <line_num>: 548,555
protected void addPeriod(ReadablePeriod period) { [EOL]     if (period != null) { [EOL]         setValues(addPeriodInto(getValues(), period)); [EOL]     } [EOL] } <line_num>: 563,567
protected int[] addPeriodInto(int[] values, ReadablePeriod period) { [EOL]     for (int i = 0, isize = period.size(); i < isize; i++) { [EOL]         DurationFieldType type = period.getFieldType(i); [EOL]         int value = period.getValue(i); [EOL]         if (value != 0) { [EOL]             int index = indexOf(type); [EOL]             if (index == -1) { [EOL]                 throw new IllegalArgumentException("Period does not support field '" + type.getName() + "'"); [EOL]             } else { [EOL]                 values[index] = FieldUtils.safeAdd(getValue(index), value); [EOL]             } [EOL]         } [EOL]     } [EOL]     return values; [EOL] } <line_num>: 577,592
protected void setValue(int index, int value) { [EOL]     iValues[index] = value; [EOL] } <line_num>: 602,604
protected void setValues(int[] values) { [EOL]     System.arraycopy(values, 0, iValues, 0, iValues.length); [EOL] } <line_num>: 615,617
