public Partial() { [EOL]     this((Chronology) null); [EOL] } <line_num>: 102,104
public Partial(Chronology chrono) { [EOL]     super(); [EOL]     iChronology = DateTimeUtils.getChronology(chrono).withUTC(); [EOL]     iTypes = new DateTimeFieldType[0]; [EOL]     iValues = new int[0]; [EOL] } <line_num>: 122,127
public Partial(DateTimeFieldType type, int value) { [EOL]     this(type, value, null); [EOL] } <line_num>: 138,140
public Partial(DateTimeFieldType type, int value, Chronology chronology) { [EOL]     super(); [EOL]     chronology = DateTimeUtils.getChronology(chronology).withUTC(); [EOL]     iChronology = chronology; [EOL]     if (type == null) { [EOL]         throw new IllegalArgumentException("The field type must not be null"); [EOL]     } [EOL]     iTypes = new DateTimeFieldType[] { type }; [EOL]     iValues = new int[] { value }; [EOL]     chronology.validate(this, iValues); [EOL] } <line_num>: 152,162
public Partial(DateTimeFieldType[] types, int[] values) { [EOL]     this(types, values, null); [EOL] } <line_num>: 174,176
public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) { [EOL]     super(); [EOL]     chronology = DateTimeUtils.getChronology(chronology).withUTC(); [EOL]     iChronology = chronology; [EOL]     if (types == null) { [EOL]         throw new IllegalArgumentException("Types array must not be null"); [EOL]     } [EOL]     if (values == null) { [EOL]         throw new IllegalArgumentException("Values array must not be null"); [EOL]     } [EOL]     if (values.length != types.length) { [EOL]         throw new IllegalArgumentException("Values array must be the same length as the types array"); [EOL]     } [EOL]     if (types.length == 0) { [EOL]         iTypes = types; [EOL]         iValues = values; [EOL]         return; [EOL]     } [EOL]     for (int i = 0; i < types.length; i++) { [EOL]         if (types[i] == null) { [EOL]             throw new IllegalArgumentException("Types array must not contain null: index " + i); [EOL]         } [EOL]     } [EOL]     DurationField lastUnitField = null; [EOL]     for (int i = 0; i < types.length; i++) { [EOL]         DateTimeFieldType loopType = types[i]; [EOL]         DurationField loopUnitField = loopType.getDurationType().getField(iChronology); [EOL]         if (i > 0) { [EOL]             if (loopUnitField.isSupported() == false) { [EOL]                 if (lastUnitField.isSupported()) { [EOL]                     throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); [EOL]                 } else { [EOL]                     throw new IllegalArgumentException("Types array must not contain duplicate unsupported: " + types[i - 1].getName() + " and " + loopType.getName()); [EOL]                 } [EOL]             } [EOL]             int compare = lastUnitField.compareTo(loopUnitField); [EOL]             if (compare < 0) { [EOL]                 throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); [EOL]             } else if (compare == 0 && lastUnitField.equals(loopUnitField)) { [EOL]                 if (types[i - 1].getRangeDurationType() == null) { [EOL]                     if (loopType.getRangeDurationType() == null) { [EOL]                         throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); [EOL]                     } [EOL]                 } else { [EOL]                     if (loopType.getRangeDurationType() == null) { [EOL]                         throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); [EOL]                     } [EOL]                     DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology); [EOL]                     DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); [EOL]                     if (lastRangeField.compareTo(loopRangeField) < 0) { [EOL]                         throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); [EOL]                     } [EOL]                     if (lastRangeField.compareTo(loopRangeField) == 0) { [EOL]                         throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]         lastUnitField = loopUnitField; [EOL]     } [EOL]     iTypes = (DateTimeFieldType[]) types.clone(); [EOL]     chronology.validate(this, values); [EOL]     iValues = (int[]) values.clone(); [EOL] } <line_num>: 189,260
public Partial(ReadablePartial partial) { [EOL]     super(); [EOL]     if (partial == null) { [EOL]         throw new IllegalArgumentException("The partial must not be null"); [EOL]     } [EOL]     iChronology = DateTimeUtils.getChronology(partial.getChronology()).withUTC(); [EOL]     iTypes = new DateTimeFieldType[partial.size()]; [EOL]     iValues = new int[partial.size()]; [EOL]     for (int i = 0; i < partial.size(); i++) { [EOL]         iTypes[i] = partial.getFieldType(i); [EOL]         iValues[i] = partial.getValue(i); [EOL]     } [EOL] } <line_num>: 268,280
Partial(Partial partial, int[] values) { [EOL]     super(); [EOL]     iChronology = partial.iChronology; [EOL]     iTypes = partial.iTypes; [EOL]     iValues = values; [EOL] } <line_num>: 290,295
Partial(Chronology chronology, DateTimeFieldType[] types, int[] values) { [EOL]     super(); [EOL]     iChronology = chronology; [EOL]     iTypes = types; [EOL]     iValues = values; [EOL] } <line_num>: 306,311
Property(Partial partial, int fieldIndex) { [EOL]     super(); [EOL]     iPartial = partial; [EOL]     iFieldIndex = fieldIndex; [EOL] } <line_num>: 846,850
public int size() { [EOL]     return iTypes.length; [EOL] } <line_num>: 319,321
public Chronology getChronology() { [EOL]     return iChronology; [EOL] } <line_num>: 331,333
protected DateTimeField getField(int index, Chronology chrono) { [EOL]     return iTypes[index].getField(chrono); [EOL] } <line_num>: 343,345
public DateTimeFieldType getFieldType(int index) { [EOL]     return iTypes[index]; [EOL] } <line_num>: 354,356
public DateTimeFieldType[] getFieldTypes() { [EOL]     return (DateTimeFieldType[]) iTypes.clone(); [EOL] } <line_num>: 366,368
public int getValue(int index) { [EOL]     return iValues[index]; [EOL] } <line_num>: 378,380
public int[] getValues() { [EOL]     return (int[]) iValues.clone(); [EOL] } <line_num>: 391,393
public Partial withChronologyRetainFields(Chronology newChronology) { [EOL]     newChronology = DateTimeUtils.getChronology(newChronology); [EOL]     newChronology = newChronology.withUTC(); [EOL]     if (newChronology == getChronology()) { [EOL]         return this; [EOL]     } else { [EOL]         Partial newPartial = new Partial(newChronology, iTypes, iValues); [EOL]         newChronology.validate(newPartial, iValues); [EOL]         return newPartial; [EOL]     } [EOL] } <line_num>: 410,420
public Partial with(DateTimeFieldType fieldType, int value) { [EOL]     if (fieldType == null) { [EOL]         throw new IllegalArgumentException("The field type must not be null"); [EOL]     } [EOL]     int index = indexOf(fieldType); [EOL]     if (index == -1) { [EOL]         DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1]; [EOL]         int[] newValues = new int[newTypes.length]; [EOL]         int i = 0; [EOL]         DurationField unitField = fieldType.getDurationType().getField(iChronology); [EOL]         if (unitField.isSupported()) { [EOL]             for (; i < iTypes.length; i++) { [EOL]                 DateTimeFieldType loopType = iTypes[i]; [EOL]                 DurationField loopUnitField = loopType.getDurationType().getField(iChronology); [EOL]                 if (loopUnitField.isSupported()) { [EOL]                     int compare = unitField.compareTo(loopUnitField); [EOL]                     if (compare > 0) { [EOL]                         break; [EOL]                     } else if (compare == 0) { [EOL]                         if (fieldType.getRangeDurationType() == null) { [EOL]                             break; [EOL]                         } [EOL]                         DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology); [EOL]                         DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); [EOL]                         if (rangeField.compareTo(loopRangeField) > 0) { [EOL]                             break; [EOL]                         } [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]         System.arraycopy(iTypes, 0, newTypes, 0, i); [EOL]         System.arraycopy(iValues, 0, newValues, 0, i); [EOL]         newTypes[i] = fieldType; [EOL]         newValues[i] = value; [EOL]         System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1); [EOL]         System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1); [EOL]         Partial newPartial = new Partial(newTypes, newValues, iChronology); [EOL]         iChronology.validate(newPartial, newValues); [EOL]         return newPartial; [EOL]     } [EOL]     if (value == getValue(index)) { [EOL]         return this; [EOL]     } [EOL]     int[] newValues = getValues(); [EOL]     newValues = getField(index).set(this, index, newValues, value); [EOL]     return new Partial(this, newValues); [EOL] } <line_num>: 437,488
public Partial without(DateTimeFieldType fieldType) { [EOL]     int index = indexOf(fieldType); [EOL]     if (index != -1) { [EOL]         DateTimeFieldType[] newTypes = new DateTimeFieldType[size() - 1]; [EOL]         int[] newValues = new int[size() - 1]; [EOL]         System.arraycopy(iTypes, 0, newTypes, 0, index); [EOL]         System.arraycopy(iTypes, index + 1, newTypes, index, newTypes.length - index); [EOL]         System.arraycopy(iValues, 0, newValues, 0, index); [EOL]         System.arraycopy(iValues, index + 1, newValues, index, newValues.length - index); [EOL]         Partial newPartial = new Partial(iChronology, newTypes, newValues); [EOL]         iChronology.validate(newPartial, newValues); [EOL]         return newPartial; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 498,512
public Partial withField(DateTimeFieldType fieldType, int value) { [EOL]     int index = indexOfSupported(fieldType); [EOL]     if (value == getValue(index)) { [EOL]         return this; [EOL]     } [EOL]     int[] newValues = getValues(); [EOL]     newValues = getField(index).set(this, index, newValues, value); [EOL]     return new Partial(this, newValues); [EOL] } <line_num>: 529,537
public Partial withFieldAdded(DurationFieldType fieldType, int amount) { [EOL]     int index = indexOfSupported(fieldType); [EOL]     if (amount == 0) { [EOL]         return this; [EOL]     } [EOL]     int[] newValues = getValues(); [EOL]     newValues = getField(index).add(this, index, newValues, amount); [EOL]     return new Partial(this, newValues); [EOL] } <line_num>: 553,561
public Partial withFieldAddWrapped(DurationFieldType fieldType, int amount) { [EOL]     int index = indexOfSupported(fieldType); [EOL]     if (amount == 0) { [EOL]         return this; [EOL]     } [EOL]     int[] newValues = getValues(); [EOL]     newValues = getField(index).addWrapPartial(this, index, newValues, amount); [EOL]     return new Partial(this, newValues); [EOL] } <line_num>: 577,585
public Partial withPeriodAdded(ReadablePeriod period, int scalar) { [EOL]     if (period == null || scalar == 0) { [EOL]         return this; [EOL]     } [EOL]     int[] newValues = getValues(); [EOL]     for (int i = 0; i < period.size(); i++) { [EOL]         DurationFieldType fieldType = period.getFieldType(i); [EOL]         int index = indexOf(fieldType); [EOL]         if (index >= 0) { [EOL]             newValues = getField(index).add(this, index, newValues, FieldUtils.safeMultiply(period.getValue(i), scalar)); [EOL]         } [EOL]     } [EOL]     return new Partial(this, newValues); [EOL] } <line_num>: 602,616
public Partial plus(ReadablePeriod period) { [EOL]     return withPeriodAdded(period, 1); [EOL] } <line_num>: 627,629
public Partial minus(ReadablePeriod period) { [EOL]     return withPeriodAdded(period, -1); [EOL] } <line_num>: 640,642
public Property property(DateTimeFieldType type) { [EOL]     return new Property(this, indexOfSupported(type)); [EOL] } <line_num>: 655,657
public boolean isMatch(ReadableInstant instant) { [EOL]     long millis = DateTimeUtils.getInstantMillis(instant); [EOL]     Chronology chrono = DateTimeUtils.getInstantChronology(instant); [EOL]     for (int i = 0; i < iTypes.length; i++) { [EOL]         int value = iTypes[i].getField(chrono).get(millis); [EOL]         if (value != iValues[i]) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 669,679
public boolean isMatch(ReadablePartial partial) { [EOL]     if (partial == null) { [EOL]         throw new IllegalArgumentException("The partial must not be null"); [EOL]     } [EOL]     for (int i = 0; i < iTypes.length; i++) { [EOL]         int value = partial.get(iTypes[i]); [EOL]         if (value != iValues[i]) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 693,704
public DateTimeFormatter getFormatter() { [EOL]     DateTimeFormatter[] f = iFormatter; [EOL]     if (f == null) { [EOL]         if (size() == 0) { [EOL]             return null; [EOL]         } [EOL]         f = new DateTimeFormatter[2]; [EOL]         try { [EOL]             List<DateTimeFieldType> list = new ArrayList<DateTimeFieldType>(Arrays.asList(iTypes)); [EOL]             f[0] = ISODateTimeFormat.forFields(list, true, false); [EOL]             if (list.size() == 0) { [EOL]                 f[1] = f[0]; [EOL]             } [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]         iFormatter = f; [EOL]     } [EOL]     return f[0]; [EOL] } <line_num>: 718,737
public String toString() { [EOL]     DateTimeFormatter[] f = iFormatter; [EOL]     if (f == null) { [EOL]         getFormatter(); [EOL]         f = iFormatter; [EOL]         if (f == null) { [EOL]             return toStringList(); [EOL]         } [EOL]     } [EOL]     DateTimeFormatter f1 = f[1]; [EOL]     if (f1 == null) { [EOL]         return toStringList(); [EOL]     } [EOL]     return f1.print(this); [EOL] } <line_num>: 751,765
public String toStringList() { [EOL]     int size = size(); [EOL]     StringBuilder buf = new StringBuilder(20 * size); [EOL]     buf.append('['); [EOL]     for (int i = 0; i < size; i++) { [EOL]         if (i > 0) { [EOL]             buf.append(',').append(' '); [EOL]         } [EOL]         buf.append(iTypes[i].getName()); [EOL]         buf.append('='); [EOL]         buf.append(iValues[i]); [EOL]     } [EOL]     buf.append(']'); [EOL]     return buf.toString(); [EOL] } <line_num>: 776,790
public String toString(String pattern) { [EOL]     if (pattern == null) { [EOL]         return toString(); [EOL]     } [EOL]     return DateTimeFormat.forPattern(pattern).print(this); [EOL] } <line_num>: 799,804
public String toString(String pattern, Locale locale) { [EOL]     if (pattern == null) { [EOL]         return toString(); [EOL]     } [EOL]     return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this); [EOL] } <line_num>: 814,819
public DateTimeField getField() { [EOL]     return iPartial.getField(iFieldIndex); [EOL] } <line_num>: 857,859
protected ReadablePartial getReadablePartial() { [EOL]     return iPartial; [EOL] } <line_num>: 866,868
public Partial getPartial() { [EOL]     return iPartial; [EOL] } <line_num>: 875,877
public int get() { [EOL]     return iPartial.getValue(iFieldIndex); [EOL] } <line_num>: 884,886
public Partial addToCopy(int valueToAdd) { [EOL]     int[] newValues = iPartial.getValues(); [EOL]     newValues = getField().add(iPartial, iFieldIndex, newValues, valueToAdd); [EOL]     return new Partial(iPartial, newValues); [EOL] } <line_num>: 906,910
public Partial addWrapFieldToCopy(int valueToAdd) { [EOL]     int[] newValues = iPartial.getValues(); [EOL]     newValues = getField().addWrapField(iPartial, iFieldIndex, newValues, valueToAdd); [EOL]     return new Partial(iPartial, newValues); [EOL] } <line_num>: 930,934
public Partial setCopy(int value) { [EOL]     int[] newValues = iPartial.getValues(); [EOL]     newValues = getField().set(iPartial, iFieldIndex, newValues, value); [EOL]     return new Partial(iPartial, newValues); [EOL] } <line_num>: 947,951
public Partial setCopy(String text, Locale locale) { [EOL]     int[] newValues = iPartial.getValues(); [EOL]     newValues = getField().set(iPartial, iFieldIndex, newValues, text, locale); [EOL]     return new Partial(iPartial, newValues); [EOL] } <line_num>: 964,968
public Partial setCopy(String text) { [EOL]     return setCopy(text, null); [EOL] } <line_num>: 980,982
public Partial withMaximumValue() { [EOL]     return setCopy(getMaximumValue()); [EOL] } <line_num>: 994,996
public Partial withMinimumValue() { [EOL]     return setCopy(getMinimumValue()); [EOL] } <line_num>: 1007,1009
