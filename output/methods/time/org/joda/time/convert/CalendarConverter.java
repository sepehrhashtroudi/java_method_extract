protected CalendarConverter() { [EOL]     super(); [EOL] } <line_num>: 48,50
public Chronology getChronology(Object object, Chronology chrono) { [EOL]     if (chrono != null) { [EOL]         return chrono; [EOL]     } [EOL]     Calendar cal = (Calendar) object; [EOL]     DateTimeZone zone = null; [EOL]     try { [EOL]         zone = DateTimeZone.forTimeZone(cal.getTimeZone()); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         zone = DateTimeZone.getDefault(); [EOL]     } [EOL]     return getChronology(cal, zone); [EOL] } <line_num>: 67,80
public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]     if (object.getClass().getName().endsWith(".BuddhistCalendar")) { [EOL]         return BuddhistChronology.getInstance(zone); [EOL]     } else if (object instanceof GregorianCalendar) { [EOL]         GregorianCalendar gc = (GregorianCalendar) object; [EOL]         long cutover = gc.getGregorianChange().getTime(); [EOL]         if (cutover == Long.MIN_VALUE) { [EOL]             return GregorianChronology.getInstance(zone); [EOL]         } else if (cutover == Long.MAX_VALUE) { [EOL]             return JulianChronology.getInstance(zone); [EOL]         } else { [EOL]             return GJChronology.getInstance(zone, cutover, 4); [EOL]         } [EOL]     } else { [EOL]         return ISOChronology.getInstance(zone); [EOL]     } [EOL] } <line_num>: 93,109
public long getInstantMillis(Object object, Chronology chrono) { [EOL]     Calendar calendar = (Calendar) object; [EOL]     return calendar.getTime().getTime(); [EOL] } <line_num>: 120,123
public Class<?> getSupportedType() { [EOL]     return Calendar.class; [EOL] } <line_num>: 131,133
