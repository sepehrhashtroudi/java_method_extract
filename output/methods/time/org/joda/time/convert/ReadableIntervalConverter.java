protected ReadableIntervalConverter() { [EOL]     super(); [EOL] } <line_num>: 41,43
public long getDurationMillis(Object object) { [EOL]     return (((ReadableInterval) object)).toDurationMillis(); [EOL] } <line_num>: 51,53
public void setInto(ReadWritablePeriod writablePeriod, Object object, Chronology chrono) { [EOL]     ReadableInterval interval = (ReadableInterval) object; [EOL]     chrono = (chrono != null ? chrono : DateTimeUtils.getIntervalChronology(interval)); [EOL]     long start = interval.getStartMillis(); [EOL]     long end = interval.getEndMillis(); [EOL]     int[] values = chrono.get(writablePeriod, start, end); [EOL]     for (int i = 0; i < values.length; i++) { [EOL]         writablePeriod.setValue(i, values[i]); [EOL]     } [EOL] } <line_num>: 63,72
public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]     return true; [EOL] } <line_num>: 85,87
public void setInto(ReadWritableInterval writableInterval, Object object, Chronology chrono) { [EOL]     ReadableInterval input = (ReadableInterval) object; [EOL]     writableInterval.setInterval(input); [EOL]     if (chrono != null) { [EOL]         writableInterval.setChronology(chrono); [EOL]     } else { [EOL]         writableInterval.setChronology(input.getChronology()); [EOL]     } [EOL] } <line_num>: 98,106
public Class<?> getSupportedType() { [EOL]     return ReadableInterval.class; [EOL] } <line_num>: 112,114
