private Hours(int hours) { [EOL]     super(hours); [EOL] } <line_num>: 217,219
public static Hours hours(int hours) { [EOL]     switch(hours) { [EOL]         case 0: [EOL]             return ZERO; [EOL]         case 1: [EOL]             return ONE; [EOL]         case 2: [EOL]             return TWO; [EOL]         case 3: [EOL]             return THREE; [EOL]         case 4: [EOL]             return FOUR; [EOL]         case 5: [EOL]             return FIVE; [EOL]         case 6: [EOL]             return SIX; [EOL]         case 7: [EOL]             return SEVEN; [EOL]         case 8: [EOL]             return EIGHT; [EOL]         case Integer.MAX_VALUE: [EOL]             return MAX_VALUE; [EOL]         case Integer.MIN_VALUE: [EOL]             return MIN_VALUE; [EOL]         default: [EOL]             return new Hours(hours); [EOL]     } [EOL] } <line_num>: 81,108
public static Hours hoursBetween(ReadableInstant start, ReadableInstant end) { [EOL]     int amount = BaseSingleFieldPeriod.between(start, end, DurationFieldType.hours()); [EOL]     return Hours.hours(amount); [EOL] } <line_num>: 120,123
public static Hours hoursBetween(ReadablePartial start, ReadablePartial end) { [EOL]     if (start instanceof LocalTime && end instanceof LocalTime) { [EOL]         Chronology chrono = DateTimeUtils.getChronology(start.getChronology()); [EOL]         int hours = chrono.hours().getDifference(((LocalTime) end).getLocalMillis(), ((LocalTime) start).getLocalMillis()); [EOL]         return Hours.hours(hours); [EOL]     } [EOL]     int amount = BaseSingleFieldPeriod.between(start, end, ZERO); [EOL]     return Hours.hours(amount); [EOL] } <line_num>: 137,146
public static Hours hoursIn(ReadableInterval interval) { [EOL]     if (interval == null) { [EOL]         return Hours.ZERO; [EOL]     } [EOL]     int amount = BaseSingleFieldPeriod.between(interval.getStart(), interval.getEnd(), DurationFieldType.hours()); [EOL]     return Hours.hours(amount); [EOL] } <line_num>: 156,162
public static Hours standardHoursIn(ReadablePeriod period) { [EOL]     int amount = BaseSingleFieldPeriod.standardPeriodIn(period, DateTimeConstants.MILLIS_PER_HOUR); [EOL]     return Hours.hours(amount); [EOL] } <line_num>: 184,187
@FromString [EOL] public static Hours parseHours(String periodStr) { [EOL]     if (periodStr == null) { [EOL]         return Hours.ZERO; [EOL]     } [EOL]     Period p = PARSER.parsePeriod(periodStr); [EOL]     return Hours.hours(p.getHours()); [EOL] } <line_num>: 200,207
private Object readResolve() { [EOL]     return Hours.hours(getValue()); [EOL] } <line_num>: 226,228
public DurationFieldType getFieldType() { [EOL]     return DurationFieldType.hours(); [EOL] } <line_num>: 236,238
public PeriodType getPeriodType() { [EOL]     return PeriodType.hours(); [EOL] } <line_num>: 245,247
public Weeks toStandardWeeks() { [EOL]     return Weeks.weeks(getValue() / DateTimeConstants.HOURS_PER_WEEK); [EOL] } <line_num>: 263,265
public Days toStandardDays() { [EOL]     return Days.days(getValue() / DateTimeConstants.HOURS_PER_DAY); [EOL] } <line_num>: 279,281
public Minutes toStandardMinutes() { [EOL]     return Minutes.minutes(FieldUtils.safeMultiply(getValue(), DateTimeConstants.MINUTES_PER_HOUR)); [EOL] } <line_num>: 295,297
public Seconds toStandardSeconds() { [EOL]     return Seconds.seconds(FieldUtils.safeMultiply(getValue(), DateTimeConstants.SECONDS_PER_HOUR)); [EOL] } <line_num>: 312,314
public Duration toStandardDuration() { [EOL]     long hours = getValue(); [EOL]     return new Duration(hours * DateTimeConstants.MILLIS_PER_HOUR); [EOL] } <line_num>: 330,333
public int getHours() { [EOL]     return getValue(); [EOL] } <line_num>: 341,343
public Hours plus(int hours) { [EOL]     if (hours == 0) { [EOL]         return this; [EOL]     } [EOL]     return Hours.hours(FieldUtils.safeAdd(getValue(), hours)); [EOL] } <line_num>: 355,360
public Hours plus(Hours hours) { [EOL]     if (hours == null) { [EOL]         return this; [EOL]     } [EOL]     return plus(hours.getValue()); [EOL] } <line_num>: 371,376
public Hours minus(int hours) { [EOL]     return plus(FieldUtils.safeNegate(hours)); [EOL] } <line_num>: 388,390
public Hours minus(Hours hours) { [EOL]     if (hours == null) { [EOL]         return this; [EOL]     } [EOL]     return minus(hours.getValue()); [EOL] } <line_num>: 401,406
public Hours multipliedBy(int scalar) { [EOL]     return Hours.hours(FieldUtils.safeMultiply(getValue(), scalar)); [EOL] } <line_num>: 418,420
public Hours dividedBy(int divisor) { [EOL]     if (divisor == 1) { [EOL]         return this; [EOL]     } [EOL]     return Hours.hours(getValue() / divisor); [EOL] } <line_num>: 432,437
public Hours negated() { [EOL]     return Hours.hours(FieldUtils.safeNegate(getValue())); [EOL] } <line_num>: 446,448
public boolean isGreaterThan(Hours other) { [EOL]     if (other == null) { [EOL]         return getValue() > 0; [EOL]     } [EOL]     return getValue() > other.getValue(); [EOL] } <line_num>: 457,462
public boolean isLessThan(Hours other) { [EOL]     if (other == null) { [EOL]         return getValue() < 0; [EOL]     } [EOL]     return getValue() < other.getValue(); [EOL] } <line_num>: 470,475
@ToString [EOL] public String toString() { [EOL]     return "PT" + String.valueOf(getValue()) + "H"; [EOL] } <line_num>: 485,488
