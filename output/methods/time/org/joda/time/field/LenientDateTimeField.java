protected LenientDateTimeField(DateTimeField field, Chronology base) { [EOL]     super(field); [EOL]     iBase = base; [EOL] } <line_num>: 56,59
public static DateTimeField getInstance(DateTimeField field, Chronology base) { [EOL]     if (field == null) { [EOL]         return null; [EOL]     } [EOL]     if (field instanceof StrictDateTimeField) { [EOL]         field = ((StrictDateTimeField) field).getWrappedField(); [EOL]     } [EOL]     if (field.isLenient()) { [EOL]         return field; [EOL]     } [EOL]     return new LenientDateTimeField(field, base); [EOL] } <line_num>: 43,54
public final boolean isLenient() { [EOL]     return true; [EOL] } <line_num>: 61,63
public long set(long instant, int value) { [EOL]     long localInstant = iBase.getZone().convertUTCToLocal(instant); [EOL]     long difference = FieldUtils.safeSubtract(value, get(instant)); [EOL]     localInstant = getType().getField(iBase.withUTC()).add(localInstant, difference); [EOL]     return iBase.getZone().convertLocalToUTC(localInstant, false, instant); [EOL] } <line_num>: 69,76
