protected BaseDateTimeField(DateTimeFieldType type) { [EOL]     super(); [EOL]     if (type == null) { [EOL]         throw new IllegalArgumentException("The type must not be null"); [EOL]     } [EOL]     iType = type; [EOL] } <line_num>: 49,55
public final DateTimeFieldType getType() { [EOL]     return iType; [EOL] } <line_num>: 57,59
public final String getName() { [EOL]     return iType.getName(); [EOL] } <line_num>: 61,63
public final boolean isSupported() { [EOL]     return true; [EOL] } <line_num>: 68,70
public abstract int get(long instant); <line_num>: 80,80
public String getAsText(long instant, Locale locale) { [EOL]     return getAsText(get(instant), locale); [EOL] } <line_num>: 93,95
public final String getAsText(long instant) { [EOL]     return getAsText(instant, null); [EOL] } <line_num>: 105,107
public String getAsText(ReadablePartial partial, int fieldValue, Locale locale) { [EOL]     return getAsText(fieldValue, locale); [EOL] } <line_num>: 120,122
public final String getAsText(ReadablePartial partial, Locale locale) { [EOL]     return getAsText(partial, partial.get(getType()), locale); [EOL] } <line_num>: 135,137
public String getAsText(int fieldValue, Locale locale) { [EOL]     return Integer.toString(fieldValue); [EOL] } <line_num>: 152,154
public String getAsShortText(long instant, Locale locale) { [EOL]     return getAsShortText(get(instant), locale); [EOL] } <line_num>: 167,169
public final String getAsShortText(long instant) { [EOL]     return getAsShortText(instant, null); [EOL] } <line_num>: 179,181
public String getAsShortText(ReadablePartial partial, int fieldValue, Locale locale) { [EOL]     return getAsShortText(fieldValue, locale); [EOL] } <line_num>: 194,196
public final String getAsShortText(ReadablePartial partial, Locale locale) { [EOL]     return getAsShortText(partial, partial.get(getType()), locale); [EOL] } <line_num>: 209,211
public String getAsShortText(int fieldValue, Locale locale) { [EOL]     return getAsText(fieldValue, locale); [EOL] } <line_num>: 226,228
public long add(long instant, int value) { [EOL]     return getDurationField().add(instant, value); [EOL] } <line_num>: 252,254
public long add(long instant, long value) { [EOL]     return getDurationField().add(instant, value); [EOL] } <line_num>: 266,268
public int[] add(ReadablePartial instant, int fieldIndex, int[] values, int valueToAdd) { [EOL]     if (valueToAdd == 0) { [EOL]         return values; [EOL]     } [EOL]     DateTimeField nextField = null; [EOL]     while (valueToAdd > 0) { [EOL]         int max = getMaximumValue(instant, values); [EOL]         long proposed = values[fieldIndex] + valueToAdd; [EOL]         if (proposed <= max) { [EOL]             values[fieldIndex] = (int) proposed; [EOL]             break; [EOL]         } [EOL]         if (nextField == null) { [EOL]             if (fieldIndex == 0) { [EOL]                 throw new IllegalArgumentException("Maximum value exceeded for add"); [EOL]             } [EOL]             nextField = instant.getField(fieldIndex - 1); [EOL]             if (getRangeDurationField().getType() != nextField.getDurationField().getType()) { [EOL]                 throw new IllegalArgumentException("Fields invalid for add"); [EOL]             } [EOL]         } [EOL]         valueToAdd -= (max + 1) - values[fieldIndex]; [EOL]         values = nextField.add(instant, fieldIndex - 1, values, 1); [EOL]         values[fieldIndex] = getMinimumValue(instant, values); [EOL]     } [EOL]     while (valueToAdd < 0) { [EOL]         int min = getMinimumValue(instant, values); [EOL]         long proposed = values[fieldIndex] + valueToAdd; [EOL]         if (proposed >= min) { [EOL]             values[fieldIndex] = (int) proposed; [EOL]             break; [EOL]         } [EOL]         if (nextField == null) { [EOL]             if (fieldIndex == 0) { [EOL]                 throw new IllegalArgumentException("Maximum value exceeded for add"); [EOL]             } [EOL]             nextField = instant.getField(fieldIndex - 1); [EOL]             if (getRangeDurationField().getType() != nextField.getDurationField().getType()) { [EOL]                 throw new IllegalArgumentException("Fields invalid for add"); [EOL]             } [EOL]         } [EOL]         valueToAdd -= (min - 1) - values[fieldIndex]; [EOL]         values = nextField.add(instant, fieldIndex - 1, values, -1); [EOL]         values[fieldIndex] = getMaximumValue(instant, values); [EOL]     } [EOL]     return set(instant, fieldIndex, values, values[fieldIndex]); [EOL] } <line_num>: 297,349
public int[] addWrapPartial(ReadablePartial instant, int fieldIndex, int[] values, int valueToAdd) { [EOL]     if (valueToAdd == 0) { [EOL]         return values; [EOL]     } [EOL]     DateTimeField nextField = null; [EOL]     while (valueToAdd > 0) { [EOL]         int max = getMaximumValue(instant, values); [EOL]         long proposed = values[fieldIndex] + valueToAdd; [EOL]         if (proposed <= max) { [EOL]             values[fieldIndex] = (int) proposed; [EOL]             break; [EOL]         } [EOL]         if (nextField == null) { [EOL]             if (fieldIndex == 0) { [EOL]                 valueToAdd -= (max + 1) - values[fieldIndex]; [EOL]                 values[fieldIndex] = getMinimumValue(instant, values); [EOL]                 continue; [EOL]             } [EOL]             nextField = instant.getField(fieldIndex - 1); [EOL]             if (getRangeDurationField().getType() != nextField.getDurationField().getType()) { [EOL]                 throw new IllegalArgumentException("Fields invalid for add"); [EOL]             } [EOL]         } [EOL]         valueToAdd -= (max + 1) - values[fieldIndex]; [EOL]         values = nextField.addWrapPartial(instant, fieldIndex - 1, values, 1); [EOL]         values[fieldIndex] = getMinimumValue(instant, values); [EOL]     } [EOL]     while (valueToAdd < 0) { [EOL]         int min = getMinimumValue(instant, values); [EOL]         long proposed = values[fieldIndex] + valueToAdd; [EOL]         if (proposed >= min) { [EOL]             values[fieldIndex] = (int) proposed; [EOL]             break; [EOL]         } [EOL]         if (nextField == null) { [EOL]             if (fieldIndex == 0) { [EOL]                 valueToAdd -= (min - 1) - values[fieldIndex]; [EOL]                 values[fieldIndex] = getMaximumValue(instant, values); [EOL]                 continue; [EOL]             } [EOL]             nextField = instant.getField(fieldIndex - 1); [EOL]             if (getRangeDurationField().getType() != nextField.getDurationField().getType()) { [EOL]                 throw new IllegalArgumentException("Fields invalid for add"); [EOL]             } [EOL]         } [EOL]         valueToAdd -= (min - 1) - values[fieldIndex]; [EOL]         values = nextField.addWrapPartial(instant, fieldIndex - 1, values, -1); [EOL]         values[fieldIndex] = getMaximumValue(instant, values); [EOL]     } [EOL]     return set(instant, fieldIndex, values, values[fieldIndex]); [EOL] } <line_num>: 378,434
public long addWrapField(long instant, int value) { [EOL]     int current = get(instant); [EOL]     int wrapped = FieldUtils.getWrappedValue(current, value, getMinimumValue(instant), getMaximumValue(instant)); [EOL]     return set(instant, wrapped); [EOL] } <line_num>: 460,465
public int[] addWrapField(ReadablePartial instant, int fieldIndex, int[] values, int valueToAdd) { [EOL]     int current = values[fieldIndex]; [EOL]     int wrapped = FieldUtils.getWrappedValue(current, valueToAdd, getMinimumValue(instant), getMaximumValue(instant)); [EOL]     return set(instant, fieldIndex, values, wrapped); [EOL] } <line_num>: 494,499
public int getDifference(long minuendInstant, long subtrahendInstant) { [EOL]     return getDurationField().getDifference(minuendInstant, subtrahendInstant); [EOL] } <line_num>: 521,523
public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) { [EOL]     return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant); [EOL] } <line_num>: 544,546
public abstract long set(long instant, int value); <line_num>: 564,564
public int[] set(ReadablePartial partial, int fieldIndex, int[] values, int newValue) { [EOL]     FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(partial, values), getMaximumValue(partial, values)); [EOL]     values[fieldIndex] = newValue; [EOL]     for (int i = fieldIndex + 1; i < partial.size(); i++) { [EOL]         DateTimeField field = partial.getField(i); [EOL]         if (values[i] > field.getMaximumValue(partial, values)) { [EOL]             values[i] = field.getMaximumValue(partial, values); [EOL]         } [EOL]         if (values[i] < field.getMinimumValue(partial, values)) { [EOL]             values[i] = field.getMinimumValue(partial, values); [EOL]         } [EOL]     } [EOL]     return values; [EOL] } <line_num>: 584,599
public long set(long instant, String text, Locale locale) { [EOL]     int value = convertText(text, locale); [EOL]     return set(instant, value); [EOL] } <line_num>: 617,620
public final long set(long instant, String text) { [EOL]     return set(instant, text, null); [EOL] } <line_num>: 634,636
public int[] set(ReadablePartial instant, int fieldIndex, int[] values, String text, Locale locale) { [EOL]     int value = convertText(text, locale); [EOL]     return set(instant, fieldIndex, values, value); [EOL] } <line_num>: 653,656
protected int convertText(String text, Locale locale) { [EOL]     try { [EOL]         return Integer.parseInt(text); [EOL]     } catch (NumberFormatException ex) { [EOL]         throw new IllegalFieldValueException(getType(), text); [EOL]     } [EOL] } <line_num>: 666,672
public abstract DurationField getDurationField(); <line_num>: 683,683
public abstract DurationField getRangeDurationField(); <line_num>: 691,691
public boolean isLeap(long instant) { [EOL]     return false; [EOL] } <line_num>: 703,705
public int getLeapAmount(long instant) { [EOL]     return 0; [EOL] } <line_num>: 715,717
public DurationField getLeapDurationField() { [EOL]     return null; [EOL] } <line_num>: 725,727
public abstract int getMinimumValue(); <line_num>: 735,735
public int getMinimumValue(long instant) { [EOL]     return getMinimumValue(); [EOL] } <line_num>: 745,747
public int getMinimumValue(ReadablePartial instant) { [EOL]     return getMinimumValue(); [EOL] } <line_num>: 757,759
public int getMinimumValue(ReadablePartial instant, int[] values) { [EOL]     return getMinimumValue(instant); [EOL] } <line_num>: 771,773
public abstract int getMaximumValue(); <line_num>: 781,781
public int getMaximumValue(long instant) { [EOL]     return getMaximumValue(); [EOL] } <line_num>: 791,793
public int getMaximumValue(ReadablePartial instant) { [EOL]     return getMaximumValue(); [EOL] } <line_num>: 803,805
public int getMaximumValue(ReadablePartial instant, int[] values) { [EOL]     return getMaximumValue(instant); [EOL] } <line_num>: 817,819
public int getMaximumTextLength(Locale locale) { [EOL]     int max = getMaximumValue(); [EOL]     if (max >= 0) { [EOL]         if (max < 10) { [EOL]             return 1; [EOL]         } else if (max < 100) { [EOL]             return 2; [EOL]         } else if (max < 1000) { [EOL]             return 3; [EOL]         } [EOL]     } [EOL]     return Integer.toString(max).length(); [EOL] } <line_num>: 828,840
public int getMaximumShortTextLength(Locale locale) { [EOL]     return getMaximumTextLength(locale); [EOL] } <line_num>: 849,851
public abstract long roundFloor(long instant); <line_num>: 867,867
public long roundCeiling(long instant) { [EOL]     long newInstant = roundFloor(instant); [EOL]     if (newInstant != instant) { [EOL]         instant = add(newInstant, 1); [EOL]     } [EOL]     return instant; [EOL] } <line_num>: 885,891
public long roundHalfFloor(long instant) { [EOL]     long floor = roundFloor(instant); [EOL]     long ceiling = roundCeiling(instant); [EOL]     long diffFromFloor = instant - floor; [EOL]     long diffToCeiling = ceiling - instant; [EOL]     if (diffFromFloor <= diffToCeiling) { [EOL]         return floor; [EOL]     } else { [EOL]         return ceiling; [EOL]     } [EOL] } <line_num>: 902,915
public long roundHalfCeiling(long instant) { [EOL]     long floor = roundFloor(instant); [EOL]     long ceiling = roundCeiling(instant); [EOL]     long diffFromFloor = instant - floor; [EOL]     long diffToCeiling = ceiling - instant; [EOL]     if (diffToCeiling <= diffFromFloor) { [EOL]         return ceiling; [EOL]     } else { [EOL]         return floor; [EOL]     } [EOL] } <line_num>: 926,939
public long roundHalfEven(long instant) { [EOL]     long floor = roundFloor(instant); [EOL]     long ceiling = roundCeiling(instant); [EOL]     long diffFromFloor = instant - floor; [EOL]     long diffToCeiling = ceiling - instant; [EOL]     if (diffFromFloor < diffToCeiling) { [EOL]         return floor; [EOL]     } else if (diffToCeiling < diffFromFloor) { [EOL]         return ceiling; [EOL]     } else { [EOL]         if ((get(ceiling) & 1) == 0) { [EOL]             return ceiling; [EOL]         } [EOL]         return floor; [EOL]     } [EOL] } <line_num>: 954,975
public long remainder(long instant) { [EOL]     return instant - roundFloor(instant); [EOL] } <line_num>: 993,995
public String toString() { [EOL]     return "DateTimeField[" + getName() + ']'; [EOL] } <line_num>: 1002,1004
