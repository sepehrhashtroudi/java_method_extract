public PreciseDateTimeField(DateTimeFieldType type, DurationField unit, DurationField range) { [EOL]     super(type, unit); [EOL]     if (!range.isPrecise()) { [EOL]         throw new IllegalArgumentException("Range duration field must be precise"); [EOL]     } [EOL]     long rangeMillis = range.getUnitMillis(); [EOL]     iRange = (int) (rangeMillis / getUnitMillis()); [EOL]     if (iRange < 2) { [EOL]         throw new IllegalArgumentException("The effective range must be at least 2"); [EOL]     } [EOL]     iRangeField = range; [EOL] } <line_num>: 56,71
public int get(long instant) { [EOL]     if (instant >= 0) { [EOL]         return (int) ((instant / getUnitMillis()) % iRange); [EOL]     } else { [EOL]         return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange); [EOL]     } [EOL] } <line_num>: 79,85
public long addWrapField(long instant, int amount) { [EOL]     int thisValue = get(instant); [EOL]     int wrappedValue = FieldUtils.getWrappedValue(thisValue, amount, getMinimumValue(), getMaximumValue()); [EOL]     return instant + (wrappedValue - thisValue) * getUnitMillis(); [EOL] } <line_num>: 95,101
public long set(long instant, int value) { [EOL]     FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue()); [EOL]     return instant + (value - get(instant)) * iUnitMillis; [EOL] } <line_num>: 111,114
public DurationField getRangeDurationField() { [EOL]     return iRangeField; [EOL] } <line_num>: 122,124
public int getMaximumValue() { [EOL]     return iRange - 1; [EOL] } <line_num>: 131,133
public int getRange() { [EOL]     return iRange; [EOL] } <line_num>: 143,145
