protected DateTimeUtils() { [EOL]     super(); [EOL] } <line_num>: 74,76
FixedMillisProvider(long fixedMillis) { [EOL]     iMillis = fixedMillis; [EOL] } <line_num>: 547,549
OffsetMillisProvider(long offsetMillis) { [EOL]     iMillis = offsetMillis; [EOL] } <line_num>: 571,573
private static void put(Map<String, DateTimeZone> map, String name, String id) { [EOL]     try { [EOL]         map.put(name, DateTimeZone.forID(id)); [EOL]     } catch (RuntimeException ex) { [EOL]     } [EOL] } <line_num>: 63,69
public static final long currentTimeMillis() { [EOL]     return cMillisProvider.getMillis(); [EOL] } <line_num>: 87,89
public static final void setCurrentMillisSystem() throws SecurityException { [EOL]     checkPermission(); [EOL]     cMillisProvider = SYSTEM_MILLIS_PROVIDER; [EOL] } <line_num>: 99,102
public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException { [EOL]     checkPermission(); [EOL]     cMillisProvider = new FixedMillisProvider(fixedMillis); [EOL] } <line_num>: 113,116
public static final void setCurrentMillisOffset(long offsetMillis) throws SecurityException { [EOL]     checkPermission(); [EOL]     if (offsetMillis == 0) { [EOL]         cMillisProvider = SYSTEM_MILLIS_PROVIDER; [EOL]     } else { [EOL]         cMillisProvider = new OffsetMillisProvider(offsetMillis); [EOL]     } [EOL] } <line_num>: 128,135
public static final void setCurrentMillisProvider(MillisProvider millisProvider) throws SecurityException { [EOL]     if (millisProvider == null) { [EOL]         throw new IllegalArgumentException("The MillisProvider must not be null"); [EOL]     } [EOL]     checkPermission(); [EOL]     cMillisProvider = millisProvider; [EOL] } <line_num>: 147,153
private static void checkPermission() throws SecurityException { [EOL]     SecurityManager sm = System.getSecurityManager(); [EOL]     if (sm != null) { [EOL]         sm.checkPermission(new JodaTimePermission("CurrentTime.setProvider")); [EOL]     } [EOL] } <line_num>: 160,165
public static final long getInstantMillis(ReadableInstant instant) { [EOL]     if (instant == null) { [EOL]         return DateTimeUtils.currentTimeMillis(); [EOL]     } [EOL]     return instant.getMillis(); [EOL] } <line_num>: 177,182
public static final Chronology getInstantChronology(ReadableInstant instant) { [EOL]     if (instant == null) { [EOL]         return ISOChronology.getInstance(); [EOL]     } [EOL]     Chronology chrono = instant.getChronology(); [EOL]     if (chrono == null) { [EOL]         return ISOChronology.getInstance(); [EOL]     } [EOL]     return chrono; [EOL] } <line_num>: 195,204
public static final Chronology getIntervalChronology(ReadableInstant start, ReadableInstant end) { [EOL]     Chronology chrono = null; [EOL]     if (start != null) { [EOL]         chrono = start.getChronology(); [EOL]     } else if (end != null) { [EOL]         chrono = end.getChronology(); [EOL]     } [EOL]     if (chrono == null) { [EOL]         chrono = ISOChronology.getInstance(); [EOL]     } [EOL]     return chrono; [EOL] } <line_num>: 218,229
public static final Chronology getIntervalChronology(ReadableInterval interval) { [EOL]     if (interval == null) { [EOL]         return ISOChronology.getInstance(); [EOL]     } [EOL]     Chronology chrono = interval.getChronology(); [EOL]     if (chrono == null) { [EOL]         return ISOChronology.getInstance(); [EOL]     } [EOL]     return chrono; [EOL] } <line_num>: 242,251
public static final ReadableInterval getReadableInterval(ReadableInterval interval) { [EOL]     if (interval == null) { [EOL]         long now = DateTimeUtils.currentTimeMillis(); [EOL]         interval = new Interval(now, now); [EOL]     } [EOL]     return interval; [EOL] } <line_num>: 265,271
public static final Chronology getChronology(Chronology chrono) { [EOL]     if (chrono == null) { [EOL]         return ISOChronology.getInstance(); [EOL]     } [EOL]     return chrono; [EOL] } <line_num>: 283,288
public static final DateTimeZone getZone(DateTimeZone zone) { [EOL]     if (zone == null) { [EOL]         return DateTimeZone.getDefault(); [EOL]     } [EOL]     return zone; [EOL] } <line_num>: 300,305
public static final PeriodType getPeriodType(PeriodType type) { [EOL]     if (type == null) { [EOL]         return PeriodType.standard(); [EOL]     } [EOL]     return type; [EOL] } <line_num>: 317,322
public static final long getDurationMillis(ReadableDuration duration) { [EOL]     if (duration == null) { [EOL]         return 0L; [EOL]     } [EOL]     return duration.getMillis(); [EOL] } <line_num>: 334,339
public static final boolean isContiguous(ReadablePartial partial) { [EOL]     if (partial == null) { [EOL]         throw new IllegalArgumentException("Partial must not be null"); [EOL]     } [EOL]     DurationFieldType lastType = null; [EOL]     for (int i = 0; i < partial.size(); i++) { [EOL]         DateTimeField loopField = partial.getField(i); [EOL]         if (i > 0) { [EOL]             if (loopField.getRangeDurationField() == null || loopField.getRangeDurationField().getType() != lastType) { [EOL]                 return false; [EOL]             } [EOL]         } [EOL]         lastType = loopField.getDurationField().getType(); [EOL]     } [EOL]     return true; [EOL] } <line_num>: 365,380
public static final DateFormatSymbols getDateFormatSymbols(Locale locale) { [EOL]     try { [EOL]         Method method = DateFormatSymbols.class.getMethod("getInstance", new Class[] { Locale.class }); [EOL]         return (DateFormatSymbols) method.invoke(null, new Object[] { locale }); [EOL]     } catch (Exception ex) { [EOL]         return new DateFormatSymbols(locale); [EOL]     } [EOL] } <line_num>: 395,402
public static final Map<String, DateTimeZone> getDefaultTimeZoneNames() { [EOL]     return cZoneNames; [EOL] } <line_num>: 428,430
public static final void setDefaultTimeZoneNames(Map<String, DateTimeZone> names) { [EOL]     cZoneNames = Collections.unmodifiableMap(new HashMap<String, DateTimeZone>(names)); [EOL] } <line_num>: 440,442
public static final double toJulianDay(long epochMillis) { [EOL]     double epochDay = epochMillis / 86400000d; [EOL]     return epochDay + 2440587.5d; [EOL] } <line_num>: 462,470
public static final long toJulianDayNumber(long epochMillis) { [EOL]     return (long) Math.floor(toJulianDay(epochMillis) + 0.5d); [EOL] } <line_num>: 487,489
public static final long fromJulianDay(double julianDay) { [EOL]     double epochDay = julianDay - 2440587.5d; [EOL]     return (long) (epochDay * 86400000d); [EOL] } <line_num>: 500,503
long getMillis(); <line_num>: 520,520
public long getMillis() { [EOL]     return System.currentTimeMillis(); [EOL] } <line_num>: 531,533
public long getMillis() { [EOL]     return iMillis; [EOL] } <line_num>: 555,557
public long getMillis() { [EOL]     return System.currentTimeMillis() + iMillis; [EOL] } <line_num>: 579,581
