protected PeriodType(String name, DurationFieldType[] types, int[] indices) { [EOL]     super(); [EOL]     iName = name; [EOL]     iTypes = types; [EOL]     iIndices = indices; [EOL] } <line_num>: 594,599
public static PeriodType standard() { [EOL]     PeriodType type = cStandard; [EOL]     if (type == null) { [EOL]         type = new PeriodType("Standard", new DurationFieldType[] { DurationFieldType.years(), DurationFieldType.months(), DurationFieldType.weeks(), DurationFieldType.days(), DurationFieldType.hours(), DurationFieldType.minutes(), DurationFieldType.seconds(), DurationFieldType.millis() }, new int[] { 0, 1, 2, 3, 4, 5, 6, 7 }); [EOL]         cStandard = type; [EOL]     } [EOL]     return type; [EOL] } <line_num>: 101,117
public static PeriodType yearMonthDayTime() { [EOL]     PeriodType type = cYMDTime; [EOL]     if (type == null) { [EOL]         type = new PeriodType("YearMonthDayTime", new DurationFieldType[] { DurationFieldType.years(), DurationFieldType.months(), DurationFieldType.days(), DurationFieldType.hours(), DurationFieldType.minutes(), DurationFieldType.seconds(), DurationFieldType.millis() }, new int[] { 0, 1, -1, 2, 3, 4, 5, 6 }); [EOL]         cYMDTime = type; [EOL]     } [EOL]     return type; [EOL] } <line_num>: 133,149
public static PeriodType yearMonthDay() { [EOL]     PeriodType type = cYMD; [EOL]     if (type == null) { [EOL]         type = new PeriodType("YearMonthDay", new DurationFieldType[] { DurationFieldType.years(), DurationFieldType.months(), DurationFieldType.days() }, new int[] { 0, 1, -1, 2, -1, -1, -1, -1 }); [EOL]         cYMD = type; [EOL]     } [EOL]     return type; [EOL] } <line_num>: 162,176
public static PeriodType yearWeekDayTime() { [EOL]     PeriodType type = cYWDTime; [EOL]     if (type == null) { [EOL]         type = new PeriodType("YearWeekDayTime", new DurationFieldType[] { DurationFieldType.years(), DurationFieldType.weeks(), DurationFieldType.days(), DurationFieldType.hours(), DurationFieldType.minutes(), DurationFieldType.seconds(), DurationFieldType.millis() }, new int[] { 0, -1, 1, 2, 3, 4, 5, 6 }); [EOL]         cYWDTime = type; [EOL]     } [EOL]     return type; [EOL] } <line_num>: 192,208
public static PeriodType yearWeekDay() { [EOL]     PeriodType type = cYWD; [EOL]     if (type == null) { [EOL]         type = new PeriodType("YearWeekDay", new DurationFieldType[] { DurationFieldType.years(), DurationFieldType.weeks(), DurationFieldType.days() }, new int[] { 0, -1, 1, 2, -1, -1, -1, -1 }); [EOL]         cYWD = type; [EOL]     } [EOL]     return type; [EOL] } <line_num>: 221,235
public static PeriodType yearDayTime() { [EOL]     PeriodType type = cYDTime; [EOL]     if (type == null) { [EOL]         type = new PeriodType("YearDayTime", new DurationFieldType[] { DurationFieldType.years(), DurationFieldType.days(), DurationFieldType.hours(), DurationFieldType.minutes(), DurationFieldType.seconds(), DurationFieldType.millis() }, new int[] { 0, -1, -1, 1, 2, 3, 4, 5 }); [EOL]         cYDTime = type; [EOL]     } [EOL]     return type; [EOL] } <line_num>: 250,265
public static PeriodType yearDay() { [EOL]     PeriodType type = cYD; [EOL]     if (type == null) { [EOL]         type = new PeriodType("YearDay", new DurationFieldType[] { DurationFieldType.years(), DurationFieldType.days() }, new int[] { 0, -1, -1, 1, -1, -1, -1, -1 }); [EOL]         cYD = type; [EOL]     } [EOL]     return type; [EOL] } <line_num>: 277,290
public static PeriodType dayTime() { [EOL]     PeriodType type = cDTime; [EOL]     if (type == null) { [EOL]         type = new PeriodType("DayTime", new DurationFieldType[] { DurationFieldType.days(), DurationFieldType.hours(), DurationFieldType.minutes(), DurationFieldType.seconds(), DurationFieldType.millis() }, new int[] { -1, -1, -1, 0, 1, 2, 3, 4 }); [EOL]         cDTime = type; [EOL]     } [EOL]     return type; [EOL] } <line_num>: 304,319
public static PeriodType time() { [EOL]     PeriodType type = cTime; [EOL]     if (type == null) { [EOL]         type = new PeriodType("Time", new DurationFieldType[] { DurationFieldType.hours(), DurationFieldType.minutes(), DurationFieldType.seconds(), DurationFieldType.millis() }, new int[] { -1, -1, -1, -1, 0, 1, 2, 3 }); [EOL]         cTime = type; [EOL]     } [EOL]     return type; [EOL] } <line_num>: 332,346
public static PeriodType years() { [EOL]     PeriodType type = cYears; [EOL]     if (type == null) { [EOL]         type = new PeriodType("Years", new DurationFieldType[] { DurationFieldType.years() }, new int[] { 0, -1, -1, -1, -1, -1, -1, -1 }); [EOL]         cYears = type; [EOL]     } [EOL]     return type; [EOL] } <line_num>: 353,364
public static PeriodType months() { [EOL]     PeriodType type = cMonths; [EOL]     if (type == null) { [EOL]         type = new PeriodType("Months", new DurationFieldType[] { DurationFieldType.months() }, new int[] { -1, 0, -1, -1, -1, -1, -1, -1 }); [EOL]         cMonths = type; [EOL]     } [EOL]     return type; [EOL] } <line_num>: 371,382
public static PeriodType weeks() { [EOL]     PeriodType type = cWeeks; [EOL]     if (type == null) { [EOL]         type = new PeriodType("Weeks", new DurationFieldType[] { DurationFieldType.weeks() }, new int[] { -1, -1, 0, -1, -1, -1, -1, -1 }); [EOL]         cWeeks = type; [EOL]     } [EOL]     return type; [EOL] } <line_num>: 389,400
public static PeriodType days() { [EOL]     PeriodType type = cDays; [EOL]     if (type == null) { [EOL]         type = new PeriodType("Days", new DurationFieldType[] { DurationFieldType.days() }, new int[] { -1, -1, -1, 0, -1, -1, -1, -1 }); [EOL]         cDays = type; [EOL]     } [EOL]     return type; [EOL] } <line_num>: 407,418
public static PeriodType hours() { [EOL]     PeriodType type = cHours; [EOL]     if (type == null) { [EOL]         type = new PeriodType("Hours", new DurationFieldType[] { DurationFieldType.hours() }, new int[] { -1, -1, -1, -1, 0, -1, -1, -1 }); [EOL]         cHours = type; [EOL]     } [EOL]     return type; [EOL] } <line_num>: 425,436
public static PeriodType minutes() { [EOL]     PeriodType type = cMinutes; [EOL]     if (type == null) { [EOL]         type = new PeriodType("Minutes", new DurationFieldType[] { DurationFieldType.minutes() }, new int[] { -1, -1, -1, -1, -1, 0, -1, -1 }); [EOL]         cMinutes = type; [EOL]     } [EOL]     return type; [EOL] } <line_num>: 443,454
public static PeriodType seconds() { [EOL]     PeriodType type = cSeconds; [EOL]     if (type == null) { [EOL]         type = new PeriodType("Seconds", new DurationFieldType[] { DurationFieldType.seconds() }, new int[] { -1, -1, -1, -1, -1, -1, 0, -1 }); [EOL]         cSeconds = type; [EOL]     } [EOL]     return type; [EOL] } <line_num>: 461,472
public static PeriodType millis() { [EOL]     PeriodType type = cMillis; [EOL]     if (type == null) { [EOL]         type = new PeriodType("Millis", new DurationFieldType[] { DurationFieldType.millis() }, new int[] { -1, -1, -1, -1, -1, -1, -1, 0 }); [EOL]         cMillis = type; [EOL]     } [EOL]     return type; [EOL] } <line_num>: 479,490
public static synchronized PeriodType forFields(DurationFieldType[] types) { [EOL]     if (types == null || types.length == 0) { [EOL]         throw new IllegalArgumentException("Types array must not be null or empty"); [EOL]     } [EOL]     for (int i = 0; i < types.length; i++) { [EOL]         if (types[i] == null) { [EOL]             throw new IllegalArgumentException("Types array must not contain null"); [EOL]         } [EOL]     } [EOL]     Map<PeriodType, Object> cache = cTypes; [EOL]     if (cache.isEmpty()) { [EOL]         cache.put(standard(), standard()); [EOL]         cache.put(yearMonthDayTime(), yearMonthDayTime()); [EOL]         cache.put(yearMonthDay(), yearMonthDay()); [EOL]         cache.put(yearWeekDayTime(), yearWeekDayTime()); [EOL]         cache.put(yearWeekDay(), yearWeekDay()); [EOL]         cache.put(yearDayTime(), yearDayTime()); [EOL]         cache.put(yearDay(), yearDay()); [EOL]         cache.put(dayTime(), dayTime()); [EOL]         cache.put(time(), time()); [EOL]         cache.put(years(), years()); [EOL]         cache.put(months(), months()); [EOL]         cache.put(weeks(), weeks()); [EOL]         cache.put(days(), days()); [EOL]         cache.put(hours(), hours()); [EOL]         cache.put(minutes(), minutes()); [EOL]         cache.put(seconds(), seconds()); [EOL]         cache.put(millis(), millis()); [EOL]     } [EOL]     PeriodType inPartType = new PeriodType(null, types, null); [EOL]     Object cached = cache.get(inPartType); [EOL]     if (cached instanceof PeriodType) { [EOL]         return (PeriodType) cached; [EOL]     } [EOL]     if (cached != null) { [EOL]         throw new IllegalArgumentException("PeriodType does not support fields: " + cached); [EOL]     } [EOL]     PeriodType type = standard(); [EOL]     List<DurationFieldType> list = new ArrayList<DurationFieldType>(Arrays.asList(types)); [EOL]     if (list.remove(DurationFieldType.years()) == false) { [EOL]         type = type.withYearsRemoved(); [EOL]     } [EOL]     if (list.remove(DurationFieldType.months()) == false) { [EOL]         type = type.withMonthsRemoved(); [EOL]     } [EOL]     if (list.remove(DurationFieldType.weeks()) == false) { [EOL]         type = type.withWeeksRemoved(); [EOL]     } [EOL]     if (list.remove(DurationFieldType.days()) == false) { [EOL]         type = type.withDaysRemoved(); [EOL]     } [EOL]     if (list.remove(DurationFieldType.hours()) == false) { [EOL]         type = type.withHoursRemoved(); [EOL]     } [EOL]     if (list.remove(DurationFieldType.minutes()) == false) { [EOL]         type = type.withMinutesRemoved(); [EOL]     } [EOL]     if (list.remove(DurationFieldType.seconds()) == false) { [EOL]         type = type.withSecondsRemoved(); [EOL]     } [EOL]     if (list.remove(DurationFieldType.millis()) == false) { [EOL]         type = type.withMillisRemoved(); [EOL]     } [EOL]     if (list.size() > 0) { [EOL]         cache.put(inPartType, list); [EOL]         throw new IllegalArgumentException("PeriodType does not support fields: " + list); [EOL]     } [EOL]     PeriodType checkPartType = new PeriodType(null, type.iTypes, null); [EOL]     PeriodType checkedType = (PeriodType) cache.get(checkPartType); [EOL]     if (checkedType != null) { [EOL]         cache.put(checkPartType, checkedType); [EOL]         return checkedType; [EOL]     } [EOL]     cache.put(checkPartType, type); [EOL]     return type; [EOL] } <line_num>: 501,577
public String getName() { [EOL]     return iName; [EOL] } <line_num>: 607,609
public int size() { [EOL]     return iTypes.length; [EOL] } <line_num>: 616,618
public DurationFieldType getFieldType(int index) { [EOL]     return iTypes[index]; [EOL] } <line_num>: 627,629
public boolean isSupported(DurationFieldType type) { [EOL]     return (indexOf(type) >= 0); [EOL] } <line_num>: 637,639
public int indexOf(DurationFieldType type) { [EOL]     for (int i = 0, isize = size(); i < isize; i++) { [EOL]         if (iTypes[i] == type) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return -1; [EOL] } <line_num>: 647,654
public String toString() { [EOL]     return "PeriodType[" + getName() + "]"; [EOL] } <line_num>: 661,663
int getIndexedField(ReadablePeriod period, int index) { [EOL]     int realIndex = iIndices[index]; [EOL]     return (realIndex == -1 ? 0 : period.getValue(realIndex)); [EOL] } <line_num>: 673,676
boolean setIndexedField(ReadablePeriod period, int index, int[] values, int newValue) { [EOL]     int realIndex = iIndices[index]; [EOL]     if (realIndex == -1) { [EOL]         throw new UnsupportedOperationException("Field is not supported"); [EOL]     } [EOL]     values[realIndex] = newValue; [EOL]     return true; [EOL] } <line_num>: 687,694
boolean addIndexedField(ReadablePeriod period, int index, int[] values, int valueToAdd) { [EOL]     if (valueToAdd == 0) { [EOL]         return false; [EOL]     } [EOL]     int realIndex = iIndices[index]; [EOL]     if (realIndex == -1) { [EOL]         throw new UnsupportedOperationException("Field is not supported"); [EOL]     } [EOL]     values[realIndex] = FieldUtils.safeAdd(values[realIndex], valueToAdd); [EOL]     return true; [EOL] } <line_num>: 706,716
public PeriodType withYearsRemoved() { [EOL]     return withFieldRemoved(0, "NoYears"); [EOL] } <line_num>: 724,726
public PeriodType withMonthsRemoved() { [EOL]     return withFieldRemoved(1, "NoMonths"); [EOL] } <line_num>: 733,735
public PeriodType withWeeksRemoved() { [EOL]     return withFieldRemoved(2, "NoWeeks"); [EOL] } <line_num>: 742,744
public PeriodType withDaysRemoved() { [EOL]     return withFieldRemoved(3, "NoDays"); [EOL] } <line_num>: 751,753
public PeriodType withHoursRemoved() { [EOL]     return withFieldRemoved(4, "NoHours"); [EOL] } <line_num>: 760,762
public PeriodType withMinutesRemoved() { [EOL]     return withFieldRemoved(5, "NoMinutes"); [EOL] } <line_num>: 769,771
public PeriodType withSecondsRemoved() { [EOL]     return withFieldRemoved(6, "NoSeconds"); [EOL] } <line_num>: 778,780
public PeriodType withMillisRemoved() { [EOL]     return withFieldRemoved(7, "NoMillis"); [EOL] } <line_num>: 787,789
private PeriodType withFieldRemoved(int indicesIndex, String name) { [EOL]     int fieldIndex = iIndices[indicesIndex]; [EOL]     if (fieldIndex == -1) { [EOL]         return this; [EOL]     } [EOL]     DurationFieldType[] types = new DurationFieldType[size() - 1]; [EOL]     for (int i = 0; i < iTypes.length; i++) { [EOL]         if (i < fieldIndex) { [EOL]             types[i] = iTypes[i]; [EOL]         } else if (i > fieldIndex) { [EOL]             types[i - 1] = iTypes[i]; [EOL]         } [EOL]     } [EOL]     int[] indices = new int[8]; [EOL]     for (int i = 0; i < indices.length; i++) { [EOL]         if (i < indicesIndex) { [EOL]             indices[i] = iIndices[i]; [EOL]         } else if (i > indicesIndex) { [EOL]             indices[i] = (iIndices[i] == -1 ? -1 : iIndices[i] - 1); [EOL]         } else { [EOL]             indices[i] = -1; [EOL]         } [EOL]     } [EOL]     return new PeriodType(getName() + name, types, indices); [EOL] } <line_num>: 798,824
public boolean equals(Object obj) { [EOL]     if (this == obj) { [EOL]         return true; [EOL]     } [EOL]     if (obj instanceof PeriodType == false) { [EOL]         return false; [EOL]     } [EOL]     PeriodType other = (PeriodType) obj; [EOL]     return (Arrays.equals(iTypes, other.iTypes)); [EOL] } <line_num>: 834,843
public int hashCode() { [EOL]     int hash = 0; [EOL]     for (int i = 0; i < iTypes.length; i++) { [EOL]         hash += iTypes[i].hashCode(); [EOL]     } [EOL]     return hash; [EOL] } <line_num>: 850,856
