private Months(int months) { [EOL]     super(months); [EOL] } <line_num>: 210,212
public static Months months(int months) { [EOL]     switch(months) { [EOL]         case 0: [EOL]             return ZERO; [EOL]         case 1: [EOL]             return ONE; [EOL]         case 2: [EOL]             return TWO; [EOL]         case 3: [EOL]             return THREE; [EOL]         case 4: [EOL]             return FOUR; [EOL]         case 5: [EOL]             return FIVE; [EOL]         case 6: [EOL]             return SIX; [EOL]         case 7: [EOL]             return SEVEN; [EOL]         case 8: [EOL]             return EIGHT; [EOL]         case 9: [EOL]             return NINE; [EOL]         case 10: [EOL]             return TEN; [EOL]         case 11: [EOL]             return ELEVEN; [EOL]         case 12: [EOL]             return TWELVE; [EOL]         case Integer.MAX_VALUE: [EOL]             return MAX_VALUE; [EOL]         case Integer.MIN_VALUE: [EOL]             return MIN_VALUE; [EOL]         default: [EOL]             return new Months(months); [EOL]     } [EOL] } <line_num>: 89,124
public static Months monthsBetween(ReadableInstant start, ReadableInstant end) { [EOL]     int amount = BaseSingleFieldPeriod.between(start, end, DurationFieldType.months()); [EOL]     return Months.months(amount); [EOL] } <line_num>: 137,140
public static Months monthsBetween(ReadablePartial start, ReadablePartial end) { [EOL]     if (start instanceof LocalDate && end instanceof LocalDate) { [EOL]         Chronology chrono = DateTimeUtils.getChronology(start.getChronology()); [EOL]         int months = chrono.months().getDifference(((LocalDate) end).getLocalMillis(), ((LocalDate) start).getLocalMillis()); [EOL]         return Months.months(months); [EOL]     } [EOL]     int amount = BaseSingleFieldPeriod.between(start, end, ZERO); [EOL]     return Months.months(amount); [EOL] } <line_num>: 154,163
public static Months monthsIn(ReadableInterval interval) { [EOL]     if (interval == null) { [EOL]         return Months.ZERO; [EOL]     } [EOL]     int amount = BaseSingleFieldPeriod.between(interval.getStart(), interval.getEnd(), DurationFieldType.months()); [EOL]     return Months.months(amount); [EOL] } <line_num>: 174,180
@FromString [EOL] public static Months parseMonths(String periodStr) { [EOL]     if (periodStr == null) { [EOL]         return Months.ZERO; [EOL]     } [EOL]     Period p = PARSER.parsePeriod(periodStr); [EOL]     return Months.months(p.getMonths()); [EOL] } <line_num>: 193,200
private Object readResolve() { [EOL]     return Months.months(getValue()); [EOL] } <line_num>: 219,221
public DurationFieldType getFieldType() { [EOL]     return DurationFieldType.months(); [EOL] } <line_num>: 229,231
public PeriodType getPeriodType() { [EOL]     return PeriodType.months(); [EOL] } <line_num>: 238,240
public int getMonths() { [EOL]     return getValue(); [EOL] } <line_num>: 248,250
public Months plus(int months) { [EOL]     if (months == 0) { [EOL]         return this; [EOL]     } [EOL]     return Months.months(FieldUtils.safeAdd(getValue(), months)); [EOL] } <line_num>: 262,267
public Months plus(Months months) { [EOL]     if (months == null) { [EOL]         return this; [EOL]     } [EOL]     return plus(months.getValue()); [EOL] } <line_num>: 278,283
public Months minus(int months) { [EOL]     return plus(FieldUtils.safeNegate(months)); [EOL] } <line_num>: 295,297
public Months minus(Months months) { [EOL]     if (months == null) { [EOL]         return this; [EOL]     } [EOL]     return minus(months.getValue()); [EOL] } <line_num>: 308,313
public Months multipliedBy(int scalar) { [EOL]     return Months.months(FieldUtils.safeMultiply(getValue(), scalar)); [EOL] } <line_num>: 325,327
public Months dividedBy(int divisor) { [EOL]     if (divisor == 1) { [EOL]         return this; [EOL]     } [EOL]     return Months.months(getValue() / divisor); [EOL] } <line_num>: 339,344
public Months negated() { [EOL]     return Months.months(FieldUtils.safeNegate(getValue())); [EOL] } <line_num>: 353,355
public boolean isGreaterThan(Months other) { [EOL]     if (other == null) { [EOL]         return getValue() > 0; [EOL]     } [EOL]     return getValue() > other.getValue(); [EOL] } <line_num>: 364,369
public boolean isLessThan(Months other) { [EOL]     if (other == null) { [EOL]         return getValue() < 0; [EOL]     } [EOL]     return getValue() < other.getValue(); [EOL] } <line_num>: 377,382
@ToString [EOL] public String toString() { [EOL]     return "P" + String.valueOf(getValue()) + "M"; [EOL] } <line_num>: 392,395
