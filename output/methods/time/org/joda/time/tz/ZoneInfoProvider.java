public ZoneInfoProvider(File fileDir) throws IOException { [EOL]     if (fileDir == null) { [EOL]         throw new IllegalArgumentException("No file directory provided"); [EOL]     } [EOL]     if (!fileDir.exists()) { [EOL]         throw new IOException("File directory doesn't exist: " + fileDir); [EOL]     } [EOL]     if (!fileDir.isDirectory()) { [EOL]         throw new IOException("File doesn't refer to a directory: " + fileDir); [EOL]     } [EOL]     iFileDir = fileDir; [EOL]     iResourcePath = null; [EOL]     iLoader = null; [EOL]     iZoneInfoMap = loadZoneInfoMap(openResource("ZoneInfoMap")); [EOL] } <line_num>: 56,72
public ZoneInfoProvider(String resourcePath) throws IOException { [EOL]     this(resourcePath, null, false); [EOL] } <line_num>: 81,83
public ZoneInfoProvider(String resourcePath, ClassLoader loader) throws IOException { [EOL]     this(resourcePath, loader, true); [EOL] } <line_num>: 93,97
private ZoneInfoProvider(String resourcePath, ClassLoader loader, boolean favorSystemLoader) throws IOException { [EOL]     if (resourcePath == null) { [EOL]         throw new IllegalArgumentException("No resource path provided"); [EOL]     } [EOL]     if (!resourcePath.endsWith("/")) { [EOL]         resourcePath += '/'; [EOL]     } [EOL]     iFileDir = null; [EOL]     iResourcePath = resourcePath; [EOL]     if (loader == null && !favorSystemLoader) { [EOL]         loader = getClass().getClassLoader(); [EOL]     } [EOL]     iLoader = loader; [EOL]     iZoneInfoMap = loadZoneInfoMap(openResource("ZoneInfoMap")); [EOL] } <line_num>: 103,124
public DateTimeZone getZone(String id) { [EOL]     if (id == null) { [EOL]         return null; [EOL]     } [EOL]     Object obj = iZoneInfoMap.get(id); [EOL]     if (obj == null) { [EOL]         return null; [EOL]     } [EOL]     if (id.equals(obj)) { [EOL]         return loadZoneData(id); [EOL]     } [EOL]     if (obj instanceof SoftReference<?>) { [EOL]         @SuppressWarnings("unchecked") [EOL]         SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj; [EOL]         DateTimeZone tz = ref.get(); [EOL]         if (tz != null) { [EOL]             return tz; [EOL]         } [EOL]         return loadZoneData(id); [EOL]     } [EOL]     return getZone((String) obj); [EOL] } <line_num>: 134,162
public Set<String> getAvailableIDs() { [EOL]     return new TreeSet<String>(iZoneInfoMap.keySet()); [EOL] } <line_num>: 169,174
protected void uncaughtException(Exception ex) { [EOL]     ex.printStackTrace(); [EOL] } <line_num>: 181,183
@SuppressWarnings("resource") [EOL] private InputStream openResource(String name) throws IOException { [EOL]     InputStream in; [EOL]     if (iFileDir != null) { [EOL]         in = new FileInputStream(new File(iFileDir, name)); [EOL]     } else { [EOL]         String path = iResourcePath.concat(name); [EOL]         if (iLoader != null) { [EOL]             in = iLoader.getResourceAsStream(path); [EOL]         } else { [EOL]             in = ClassLoader.getSystemResourceAsStream(path); [EOL]         } [EOL]         if (in == null) { [EOL]             StringBuilder buf = new StringBuilder(40).append("Resource not found: \"").append(path).append("\" ClassLoader: ").append(iLoader != null ? iLoader.toString() : "system"); [EOL]             throw new IOException(buf.toString()); [EOL]         } [EOL]     } [EOL]     return in; [EOL] } <line_num>: 192,214
private DateTimeZone loadZoneData(String id) { [EOL]     InputStream in = null; [EOL]     try { [EOL]         in = openResource(id); [EOL]         DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id); [EOL]         iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz)); [EOL]         return tz; [EOL]     } catch (IOException ex) { [EOL]         uncaughtException(ex); [EOL]         iZoneInfoMap.remove(id); [EOL]         return null; [EOL]     } finally { [EOL]         try { [EOL]             if (in != null) { [EOL]                 in.close(); [EOL]             } [EOL]         } catch (IOException ex) { [EOL]         } [EOL]     } [EOL] } <line_num>: 222,241
private static Map<String, Object> loadZoneInfoMap(InputStream in) throws IOException { [EOL]     Map<String, Object> map = new ConcurrentHashMap<String, Object>(); [EOL]     DataInputStream din = new DataInputStream(in); [EOL]     try { [EOL]         readZoneInfoMap(din, map); [EOL]     } finally { [EOL]         try { [EOL]             din.close(); [EOL]         } catch (IOException ex) { [EOL]         } [EOL]     } [EOL]     map.put("UTC", new SoftReference<DateTimeZone>(DateTimeZone.UTC)); [EOL]     return map; [EOL] } <line_num>: 250,263
private static void readZoneInfoMap(DataInputStream din, Map<String, Object> zimap) throws IOException { [EOL]     int size = din.readUnsignedShort(); [EOL]     String[] pool = new String[size]; [EOL]     for (int i = 0; i < size; i++) { [EOL]         pool[i] = din.readUTF().intern(); [EOL]     } [EOL]     size = din.readUnsignedShort(); [EOL]     for (int i = 0; i < size; i++) { [EOL]         try { [EOL]             zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]); [EOL]         } catch (ArrayIndexOutOfBoundsException ex) { [EOL]             throw new IOException("Corrupt zone info map"); [EOL]         } [EOL]     } [EOL] } <line_num>: 271,288
