BasicMonthOfYearDateTimeField(BasicChronology chronology, int leapMonth) { [EOL]     super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth()); [EOL]     iChronology = chronology; [EOL]     iMax = iChronology.getMaxMonth(); [EOL]     iLeapMonth = leapMonth; [EOL] } <line_num>: 51,56
public boolean isLenient() { [EOL]     return false; [EOL] } <line_num>: 59,61
public int get(long instant) { [EOL]     return iChronology.getMonthOfYear(instant); [EOL] } <line_num>: 72,74
public long add(long instant, int months) { [EOL]     if (months == 0) { [EOL]         return instant; [EOL]     } [EOL]     long timePart = iChronology.getMillisOfDay(instant); [EOL]     int thisYear = iChronology.getYear(instant); [EOL]     int thisMonth = iChronology.getMonthOfYear(instant, thisYear); [EOL]     int yearToUse; [EOL]     int monthToUse = thisMonth - 1 + months; [EOL]     if (monthToUse >= 0) { [EOL]         yearToUse = thisYear + (monthToUse / iMax); [EOL]         monthToUse = (monthToUse % iMax) + 1; [EOL]     } else { [EOL]         yearToUse = thisYear + (monthToUse / iMax) - 1; [EOL]         monthToUse = Math.abs(monthToUse); [EOL]         int remMonthToUse = monthToUse % iMax; [EOL]         if (remMonthToUse == 0) { [EOL]             remMonthToUse = iMax; [EOL]         } [EOL]         monthToUse = iMax - remMonthToUse + 1; [EOL]         if (monthToUse == 1) { [EOL]             yearToUse += 1; [EOL]         } [EOL]     } [EOL]     int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth); [EOL]     int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse); [EOL]     if (dayToUse > maxDay) { [EOL]         dayToUse = maxDay; [EOL]     } [EOL]     long datePart = iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse); [EOL]     return datePart + timePart; [EOL] } <line_num>: 92,148
public long add(long instant, long months) { [EOL]     int i_months = (int) months; [EOL]     if (i_months == months) { [EOL]         return add(instant, i_months); [EOL]     } [EOL]     long timePart = iChronology.getMillisOfDay(instant); [EOL]     int thisYear = iChronology.getYear(instant); [EOL]     int thisMonth = iChronology.getMonthOfYear(instant, thisYear); [EOL]     long yearToUse; [EOL]     long monthToUse = thisMonth - 1 + months; [EOL]     if (monthToUse >= 0) { [EOL]         yearToUse = thisYear + (monthToUse / iMax); [EOL]         monthToUse = (monthToUse % iMax) + 1; [EOL]     } else { [EOL]         yearToUse = thisYear + (monthToUse / iMax) - 1; [EOL]         monthToUse = Math.abs(monthToUse); [EOL]         int remMonthToUse = (int) (monthToUse % iMax); [EOL]         if (remMonthToUse == 0) { [EOL]             remMonthToUse = iMax; [EOL]         } [EOL]         monthToUse = iMax - remMonthToUse + 1; [EOL]         if (monthToUse == 1) { [EOL]             yearToUse += 1; [EOL]         } [EOL]     } [EOL]     if (yearToUse < iChronology.getMinYear() || yearToUse > iChronology.getMaxYear()) { [EOL]         throw new IllegalArgumentException("Magnitude of add amount is too large: " + months); [EOL]     } [EOL]     int i_yearToUse = (int) yearToUse; [EOL]     int i_monthToUse = (int) monthToUse; [EOL]     int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth); [EOL]     int maxDay = iChronology.getDaysInYearMonth(i_yearToUse, i_monthToUse); [EOL]     if (dayToUse > maxDay) { [EOL]         dayToUse = maxDay; [EOL]     } [EOL]     long datePart = iChronology.getYearMonthDayMillis(i_yearToUse, i_monthToUse, dayToUse); [EOL]     return datePart + timePart; [EOL] } <line_num>: 151,201
public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) { [EOL]     if (valueToAdd == 0) { [EOL]         return values; [EOL]     } [EOL]     if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && fieldIndex == 0) { [EOL]         int curMonth0 = partial.getValue(0) - 1; [EOL]         int newMonth = ((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1; [EOL]         return set(partial, 0, values, newMonth); [EOL]     } [EOL]     if (DateTimeUtils.isContiguous(partial)) { [EOL]         long instant = 0L; [EOL]         for (int i = 0, isize = partial.size(); i < isize; i++) { [EOL]             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]); [EOL]         } [EOL]         instant = add(instant, valueToAdd); [EOL]         return iChronology.get(partial, instant); [EOL]     } else { [EOL]         return super.add(partial, fieldIndex, values, valueToAdd); [EOL]     } [EOL] } <line_num>: 204,226
public long addWrapField(long instant, int months) { [EOL]     return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax)); [EOL] } <line_num>: 238,240
public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) { [EOL]     if (minuendInstant < subtrahendInstant) { [EOL]         return -getDifference(subtrahendInstant, minuendInstant); [EOL]     } [EOL]     int minuendYear = iChronology.getYear(minuendInstant); [EOL]     int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear); [EOL]     int subtrahendYear = iChronology.getYear(subtrahendInstant); [EOL]     int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear); [EOL]     long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth; [EOL]     int minuendDom = iChronology.getDayOfMonth(minuendInstant, minuendYear, minuendMonth); [EOL]     if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) { [EOL]         int subtrahendDom = iChronology.getDayOfMonth(subtrahendInstant, subtrahendYear, subtrahendMonth); [EOL]         if (subtrahendDom > minuendDom) { [EOL]             subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom); [EOL]         } [EOL]     } [EOL]     long minuendRem = minuendInstant - iChronology.getYearMonthMillis(minuendYear, minuendMonth); [EOL]     long subtrahendRem = subtrahendInstant - iChronology.getYearMonthMillis(subtrahendYear, subtrahendMonth); [EOL]     if (minuendRem < subtrahendRem) { [EOL]         difference--; [EOL]     } [EOL]     return difference; [EOL] } <line_num>: 243,282
public long set(long instant, int month) { [EOL]     FieldUtils.verifyValueBounds(this, month, MIN, iMax); [EOL]     int thisYear = iChronology.getYear(instant); [EOL]     int thisDom = iChronology.getDayOfMonth(instant, thisYear); [EOL]     int maxDom = iChronology.getDaysInYearMonth(thisYear, month); [EOL]     if (thisDom > maxDom) { [EOL]         thisDom = maxDom; [EOL]     } [EOL]     return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) + iChronology.getMillisOfDay(instant); [EOL] } <line_num>: 298,312
public DurationField getRangeDurationField() { [EOL]     return iChronology.years(); [EOL] } <line_num>: 315,317
public boolean isLeap(long instant) { [EOL]     int thisYear = iChronology.getYear(instant); [EOL]     if (iChronology.isLeapYear(thisYear)) { [EOL]         return (iChronology.getMonthOfYear(instant, thisYear) == iLeapMonth); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 320,326
public int getLeapAmount(long instant) { [EOL]     return isLeap(instant) ? 1 : 0; [EOL] } <line_num>: 329,331
public DurationField getLeapDurationField() { [EOL]     return iChronology.days(); [EOL] } <line_num>: 334,336
public int getMinimumValue() { [EOL]     return MIN; [EOL] } <line_num>: 339,341
public int getMaximumValue() { [EOL]     return iMax; [EOL] } <line_num>: 344,346
public long roundFloor(long instant) { [EOL]     int year = iChronology.getYear(instant); [EOL]     int month = iChronology.getMonthOfYear(instant, year); [EOL]     return iChronology.getYearMonthMillis(year, month); [EOL] } <line_num>: 349,353
public long remainder(long instant) { [EOL]     return instant - roundFloor(instant); [EOL] } <line_num>: 356,358
private Object readResolve() { [EOL]     return iChronology.monthOfYear(); [EOL] } <line_num>: 364,366
