private GJChronology(JulianChronology julian, GregorianChronology gregorian, Instant cutoverInstant) { [EOL]     super(null, new Object[] { julian, gregorian, cutoverInstant }); [EOL] } <line_num>: 271,275
private GJChronology(Chronology base, JulianChronology julian, GregorianChronology gregorian, Instant cutoverInstant) { [EOL]     super(base, new Object[] { julian, gregorian, cutoverInstant }); [EOL] } <line_num>: 280,285
CutoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverMillis) { [EOL]     this(julianField, gregorianField, cutoverMillis, false); [EOL] } <line_num>: 626,628
CutoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverMillis, boolean convertByWeekyear) { [EOL]     this(julianField, gregorianField, null, cutoverMillis, convertByWeekyear); [EOL] } <line_num>: 636,639
CutoverField(DateTimeField julianField, DateTimeField gregorianField, DurationField rangeField, long cutoverMillis, boolean convertByWeekyear) { [EOL]     super(gregorianField.getType()); [EOL]     iJulianField = julianField; [EOL]     iGregorianField = gregorianField; [EOL]     iCutover = cutoverMillis; [EOL]     iConvertByWeekyear = convertByWeekyear; [EOL]     iDurationField = gregorianField.getDurationField(); [EOL]     if (rangeField == null) { [EOL]         rangeField = gregorianField.getRangeDurationField(); [EOL]         if (rangeField == null) { [EOL]             rangeField = julianField.getRangeDurationField(); [EOL]         } [EOL]     } [EOL]     iRangeDurationField = rangeField; [EOL] } <line_num>: 648,665
ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverMillis) { [EOL]     this(julianField, gregorianField, null, cutoverMillis, false); [EOL] } <line_num>: 962,964
ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField, DurationField durationField, long cutoverMillis) { [EOL]     this(julianField, gregorianField, durationField, cutoverMillis, false); [EOL] } <line_num>: 971,975
ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField, DurationField durationField, DurationField rangeDurationField, long cutoverMillis) { [EOL]     this(julianField, gregorianField, durationField, cutoverMillis, false); [EOL]     iRangeDurationField = rangeDurationField; [EOL] } <line_num>: 982,987
ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField, DurationField durationField, long cutoverMillis, boolean convertByWeekyear) { [EOL]     super(julianField, gregorianField, cutoverMillis, convertByWeekyear); [EOL]     if (durationField == null) { [EOL]         durationField = new LinkedDurationField(iDurationField, this); [EOL]     } [EOL]     iDurationField = durationField; [EOL] } <line_num>: 994,1003
LinkedDurationField(DurationField durationField, ImpreciseCutoverField dateTimeField) { [EOL]     super(durationField, durationField.getType()); [EOL]     iField = dateTimeField; [EOL] } <line_num>: 1147,1150
private static long convertByYear(long instant, Chronology from, Chronology to) { [EOL]     return to.getDateTimeMillis(from.year().get(instant), from.monthOfYear().get(instant), from.dayOfMonth().get(instant), from.millisOfDay().get(instant)); [EOL] } <line_num>: 83,89
private static long convertByWeekyear(final long instant, Chronology from, Chronology to) { [EOL]     long newInstant; [EOL]     newInstant = to.weekyear().set(0, from.weekyear().get(instant)); [EOL]     newInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant)); [EOL]     newInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant)); [EOL]     newInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant)); [EOL]     return newInstant; [EOL] } <line_num>: 94,101
public static GJChronology getInstanceUTC() { [EOL]     return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4); [EOL] } <line_num>: 123,125
public static GJChronology getInstance() { [EOL]     return getInstance(DateTimeZone.getDefault(), DEFAULT_CUTOVER, 4); [EOL] } <line_num>: 139,141
public static GJChronology getInstance(DateTimeZone zone) { [EOL]     return getInstance(zone, DEFAULT_CUTOVER, 4); [EOL] } <line_num>: 155,157
public static GJChronology getInstance(DateTimeZone zone, ReadableInstant gregorianCutover) { [EOL]     return getInstance(zone, gregorianCutover, 4); [EOL] } <line_num>: 170,175
public static synchronized GJChronology getInstance(DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { [EOL]     zone = DateTimeUtils.getZone(zone); [EOL]     Instant cutoverInstant; [EOL]     if (gregorianCutover == null) { [EOL]         cutoverInstant = DEFAULT_CUTOVER; [EOL]     } else { [EOL]         cutoverInstant = gregorianCutover.toInstant(); [EOL]         LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone)); [EOL]         if (cutoverDate.getYear() <= 0) { [EOL]             throw new IllegalArgumentException("Cutover too early. Must be on or after 0001-01-01."); [EOL]         } [EOL]     } [EOL]     GJChronology chrono; [EOL]     synchronized (cCache) { [EOL]         ArrayList<GJChronology> chronos = cCache.get(zone); [EOL]         if (chronos == null) { [EOL]             chronos = new ArrayList<GJChronology>(2); [EOL]             cCache.put(zone, chronos); [EOL]         } else { [EOL]             for (int i = chronos.size(); --i >= 0; ) { [EOL]                 chrono = chronos.get(i); [EOL]                 if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { [EOL]                     return chrono; [EOL]                 } [EOL]             } [EOL]         } [EOL]         if (zone == DateTimeZone.UTC) { [EOL]             chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); [EOL]         } else { [EOL]             chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); [EOL]             chrono = new GJChronology(ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); [EOL]         } [EOL]         chronos.add(chrono); [EOL]     } [EOL]     return chrono; [EOL] } <line_num>: 185,234
public static GJChronology getInstance(DateTimeZone zone, long gregorianCutover, int minDaysInFirstWeek) { [EOL]     Instant cutoverInstant; [EOL]     if (gregorianCutover == DEFAULT_CUTOVER.getMillis()) { [EOL]         cutoverInstant = null; [EOL]     } else { [EOL]         cutoverInstant = new Instant(gregorianCutover); [EOL]     } [EOL]     return getInstance(zone, cutoverInstant, minDaysInFirstWeek); [EOL] } <line_num>: 244,256
private Object readResolve() { [EOL]     return getInstance(getZone(), iCutoverInstant, getMinimumDaysInFirstWeek()); [EOL] } <line_num>: 290,292
public DateTimeZone getZone() { [EOL]     Chronology base; [EOL]     if ((base = getBase()) != null) { [EOL]         return base.getZone(); [EOL]     } [EOL]     return DateTimeZone.UTC; [EOL] } <line_num>: 294,300
public Chronology withUTC() { [EOL]     return withZone(DateTimeZone.UTC); [EOL] } <line_num>: 309,311
public Chronology withZone(DateTimeZone zone) { [EOL]     if (zone == null) { [EOL]         zone = DateTimeZone.getDefault(); [EOL]     } [EOL]     if (zone == getZone()) { [EOL]         return this; [EOL]     } [EOL]     return getInstance(zone, iCutoverInstant, getMinimumDaysInFirstWeek()); [EOL] } <line_num>: 319,327
public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay) throws IllegalArgumentException { [EOL]     Chronology base; [EOL]     if ((base = getBase()) != null) { [EOL]         return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay); [EOL]     } [EOL]     long instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay); [EOL]     if (instant < iCutoverMillis) { [EOL]         instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay); [EOL]         if (instant >= iCutoverMillis) { [EOL]             throw new IllegalArgumentException("Specified date does not exist"); [EOL]         } [EOL]     } [EOL]     return instant; [EOL] } <line_num>: 329,351
public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException { [EOL]     Chronology base; [EOL]     if ((base = getBase()) != null) { [EOL]         return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond); [EOL]     } [EOL]     long instant; [EOL]     try { [EOL]         instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond); [EOL]     } catch (IllegalFieldValueException ex) { [EOL]         if (monthOfYear != 2 || dayOfMonth != 29) { [EOL]             throw ex; [EOL]         } [EOL]         instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, 28, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond); [EOL]         if (instant >= iCutoverMillis) { [EOL]             throw ex; [EOL]         } [EOL]     } [EOL]     if (instant < iCutoverMillis) { [EOL]         instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond); [EOL]         if (instant >= iCutoverMillis) { [EOL]             throw new IllegalArgumentException("Specified date does not exist"); [EOL]         } [EOL]     } [EOL]     return instant; [EOL] } <line_num>: 353,393
public Instant getGregorianCutover() { [EOL]     return iCutoverInstant; [EOL] } <line_num>: 399,401
public int getMinimumDaysInFirstWeek() { [EOL]     return iGregorianChronology.getMinimumDaysInFirstWeek(); [EOL] } <line_num>: 408,410
public boolean equals(Object obj) { [EOL]     if (this == obj) { [EOL]         return true; [EOL]     } [EOL]     if (obj instanceof GJChronology) { [EOL]         GJChronology chrono = (GJChronology) obj; [EOL]         return iCutoverMillis == chrono.iCutoverMillis && getMinimumDaysInFirstWeek() == chrono.getMinimumDaysInFirstWeek() && getZone().equals(chrono.getZone()); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 420,431
public int hashCode() { [EOL]     return "GJ".hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek() + iCutoverInstant.hashCode(); [EOL] } <line_num>: 439,442
public String toString() { [EOL]     StringBuffer sb = new StringBuffer(60); [EOL]     sb.append("GJChronology"); [EOL]     sb.append('['); [EOL]     sb.append(getZone().getID()); [EOL]     if (iCutoverMillis != DEFAULT_CUTOVER.getMillis()) { [EOL]         sb.append(",cutover="); [EOL]         DateTimeFormatter printer; [EOL]         if (withUTC().dayOfYear().remainder(iCutoverMillis) == 0) { [EOL]             printer = ISODateTimeFormat.date(); [EOL]         } else { [EOL]             printer = ISODateTimeFormat.dateTime(); [EOL]         } [EOL]         printer.withChronology(withUTC()).printTo(sb, iCutoverMillis); [EOL]     } [EOL]     if (getMinimumDaysInFirstWeek() != 4) { [EOL]         sb.append(",mdfw="); [EOL]         sb.append(getMinimumDaysInFirstWeek()); [EOL]     } [EOL]     sb.append(']'); [EOL]     return sb.toString(); [EOL] } <line_num>: 451,475
protected void assemble(Fields fields) { [EOL]     Object[] params = (Object[]) getParam(); [EOL]     JulianChronology julian = (JulianChronology) params[0]; [EOL]     GregorianChronology gregorian = (GregorianChronology) params[1]; [EOL]     Instant cutoverInstant = (Instant) params[2]; [EOL]     iCutoverMillis = cutoverInstant.getMillis(); [EOL]     iJulianChronology = julian; [EOL]     iGregorianChronology = gregorian; [EOL]     iCutoverInstant = cutoverInstant; [EOL]     if (getBase() != null) { [EOL]         return; [EOL]     } [EOL]     if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) { [EOL]         throw new IllegalArgumentException(); [EOL]     } [EOL]     iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis); [EOL]     fields.copyFieldsFrom(gregorian); [EOL]     if (gregorian.millisOfDay().get(iCutoverMillis) == 0) { [EOL]         fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis); [EOL]         fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis); [EOL]         fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis); [EOL]         fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis); [EOL]         fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis); [EOL]         fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis); [EOL]         fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis); [EOL]         fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis); [EOL]         fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis); [EOL]         fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(), fields.clockhourOfHalfday, iCutoverMillis); [EOL]         fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis); [EOL]     } [EOL]     { [EOL]         fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis); [EOL]     } [EOL]     { [EOL]         fields.year = new ImpreciseCutoverField(julian.year(), fields.year, iCutoverMillis); [EOL]         fields.years = fields.year.getDurationField(); [EOL]         fields.yearOfEra = new ImpreciseCutoverField(julian.yearOfEra(), fields.yearOfEra, fields.years, iCutoverMillis); [EOL]         fields.centuryOfEra = new ImpreciseCutoverField(julian.centuryOfEra(), fields.centuryOfEra, iCutoverMillis); [EOL]         fields.centuries = fields.centuryOfEra.getDurationField(); [EOL]         fields.yearOfCentury = new ImpreciseCutoverField(julian.yearOfCentury(), fields.yearOfCentury, fields.years, fields.centuries, iCutoverMillis); [EOL]         fields.monthOfYear = new ImpreciseCutoverField(julian.monthOfYear(), fields.monthOfYear, null, fields.years, iCutoverMillis); [EOL]         fields.months = fields.monthOfYear.getDurationField(); [EOL]         fields.weekyear = new ImpreciseCutoverField(julian.weekyear(), fields.weekyear, null, iCutoverMillis, true); [EOL]         fields.weekyears = fields.weekyear.getDurationField(); [EOL]         fields.weekyearOfCentury = new ImpreciseCutoverField(julian.weekyearOfCentury(), fields.weekyearOfCentury, fields.weekyears, fields.centuries, iCutoverMillis); [EOL]     } [EOL]     { [EOL]         long cutover = gregorian.year().roundCeiling(iCutoverMillis); [EOL]         fields.dayOfYear = new CutoverField(julian.dayOfYear(), fields.dayOfYear, fields.years, cutover, false); [EOL]     } [EOL]     { [EOL]         long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis); [EOL]         fields.weekOfWeekyear = new CutoverField(julian.weekOfWeekyear(), fields.weekOfWeekyear, fields.weekyears, cutover, true); [EOL]     } [EOL]     { [EOL]         CutoverField cf = new CutoverField(julian.dayOfMonth(), fields.dayOfMonth, iCutoverMillis); [EOL]         cf.iRangeDurationField = fields.months; [EOL]         fields.dayOfMonth = cf; [EOL]     } [EOL] } <line_num>: 477,586
long julianToGregorianByYear(long instant) { [EOL]     return convertByYear(instant, iJulianChronology, iGregorianChronology); [EOL] } <line_num>: 588,590
long gregorianToJulianByYear(long instant) { [EOL]     return convertByYear(instant, iGregorianChronology, iJulianChronology); [EOL] } <line_num>: 592,594
long julianToGregorianByWeekyear(long instant) { [EOL]     return convertByWeekyear(instant, iJulianChronology, iGregorianChronology); [EOL] } <line_num>: 596,598
long gregorianToJulianByWeekyear(long instant) { [EOL]     return convertByWeekyear(instant, iGregorianChronology, iJulianChronology); [EOL] } <line_num>: 600,602
public boolean isLenient() { [EOL]     return false; [EOL] } <line_num>: 667,669
public int get(long instant) { [EOL]     if (instant >= iCutover) { [EOL]         return iGregorianField.get(instant); [EOL]     } else { [EOL]         return iJulianField.get(instant); [EOL]     } [EOL] } <line_num>: 671,677
public String getAsText(long instant, Locale locale) { [EOL]     if (instant >= iCutover) { [EOL]         return iGregorianField.getAsText(instant, locale); [EOL]     } else { [EOL]         return iJulianField.getAsText(instant, locale); [EOL]     } [EOL] } <line_num>: 679,685
public String getAsText(int fieldValue, Locale locale) { [EOL]     return iGregorianField.getAsText(fieldValue, locale); [EOL] } <line_num>: 687,689
public String getAsShortText(long instant, Locale locale) { [EOL]     if (instant >= iCutover) { [EOL]         return iGregorianField.getAsShortText(instant, locale); [EOL]     } else { [EOL]         return iJulianField.getAsShortText(instant, locale); [EOL]     } [EOL] } <line_num>: 691,697
public String getAsShortText(int fieldValue, Locale locale) { [EOL]     return iGregorianField.getAsShortText(fieldValue, locale); [EOL] } <line_num>: 699,701
public long add(long instant, int value) { [EOL]     return iGregorianField.add(instant, value); [EOL] } <line_num>: 703,705
public long add(long instant, long value) { [EOL]     return iGregorianField.add(instant, value); [EOL] } <line_num>: 707,709
public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) { [EOL]     if (valueToAdd == 0) { [EOL]         return values; [EOL]     } [EOL]     if (DateTimeUtils.isContiguous(partial)) { [EOL]         long instant = 0L; [EOL]         for (int i = 0, isize = partial.size(); i < isize; i++) { [EOL]             instant = partial.getFieldType(i).getField(GJChronology.this).set(instant, values[i]); [EOL]         } [EOL]         instant = add(instant, valueToAdd); [EOL]         return GJChronology.this.get(partial, instant); [EOL]     } else { [EOL]         return super.add(partial, fieldIndex, values, valueToAdd); [EOL]     } [EOL] } <line_num>: 711,727
public int getDifference(long minuendInstant, long subtrahendInstant) { [EOL]     return iGregorianField.getDifference(minuendInstant, subtrahendInstant); [EOL] } <line_num>: 729,731
public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) { [EOL]     return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant); [EOL] } <line_num>: 733,735
public long set(long instant, int value) { [EOL]     if (instant >= iCutover) { [EOL]         instant = iGregorianField.set(instant, value); [EOL]         if (instant < iCutover) { [EOL]             if (instant + iGapDuration < iCutover) { [EOL]                 instant = gregorianToJulian(instant); [EOL]             } [EOL]             if (get(instant) != value) { [EOL]                 throw new IllegalFieldValueException(iGregorianField.getType(), Integer.valueOf(value), null, null); [EOL]             } [EOL]         } [EOL]     } else { [EOL]         instant = iJulianField.set(instant, value); [EOL]         if (instant >= iCutover) { [EOL]             if (instant - iGapDuration >= iCutover) { [EOL]                 instant = julianToGregorian(instant); [EOL]             } [EOL]             if (get(instant) != value) { [EOL]                 throw new IllegalFieldValueException(iJulianField.getType(), Integer.valueOf(value), null, null); [EOL]             } [EOL]         } [EOL]     } [EOL]     return instant; [EOL] } <line_num>: 737,766
public long set(long instant, String text, Locale locale) { [EOL]     if (instant >= iCutover) { [EOL]         instant = iGregorianField.set(instant, text, locale); [EOL]         if (instant < iCutover) { [EOL]             if (instant + iGapDuration < iCutover) { [EOL]                 instant = gregorianToJulian(instant); [EOL]             } [EOL]         } [EOL]     } else { [EOL]         instant = iJulianField.set(instant, text, locale); [EOL]         if (instant >= iCutover) { [EOL]             if (instant - iGapDuration >= iCutover) { [EOL]                 instant = julianToGregorian(instant); [EOL]             } [EOL]         } [EOL]     } [EOL]     return instant; [EOL] } <line_num>: 768,789
public DurationField getDurationField() { [EOL]     return iDurationField; [EOL] } <line_num>: 791,793
public DurationField getRangeDurationField() { [EOL]     return iRangeDurationField; [EOL] } <line_num>: 795,797
public boolean isLeap(long instant) { [EOL]     if (instant >= iCutover) { [EOL]         return iGregorianField.isLeap(instant); [EOL]     } else { [EOL]         return iJulianField.isLeap(instant); [EOL]     } [EOL] } <line_num>: 799,805
public int getLeapAmount(long instant) { [EOL]     if (instant >= iCutover) { [EOL]         return iGregorianField.getLeapAmount(instant); [EOL]     } else { [EOL]         return iJulianField.getLeapAmount(instant); [EOL]     } [EOL] } <line_num>: 807,813
public DurationField getLeapDurationField() { [EOL]     return iGregorianField.getLeapDurationField(); [EOL] } <line_num>: 815,817
public int getMinimumValue() { [EOL]     return iJulianField.getMinimumValue(); [EOL] } <line_num>: 820,824
public int getMinimumValue(ReadablePartial partial) { [EOL]     return iJulianField.getMinimumValue(partial); [EOL] } <line_num>: 826,828
public int getMinimumValue(ReadablePartial partial, int[] values) { [EOL]     return iJulianField.getMinimumValue(partial, values); [EOL] } <line_num>: 830,832
public int getMinimumValue(long instant) { [EOL]     if (instant < iCutover) { [EOL]         return iJulianField.getMinimumValue(instant); [EOL]     } [EOL]     int min = iGregorianField.getMinimumValue(instant); [EOL]     instant = iGregorianField.set(instant, min); [EOL]     if (instant < iCutover) { [EOL]         min = iGregorianField.get(iCutover); [EOL]     } [EOL]     return min; [EOL] } <line_num>: 834,849
public int getMaximumValue() { [EOL]     return iGregorianField.getMaximumValue(); [EOL] } <line_num>: 851,855
public int getMaximumValue(long instant) { [EOL]     if (instant >= iCutover) { [EOL]         return iGregorianField.getMaximumValue(instant); [EOL]     } [EOL]     int max = iJulianField.getMaximumValue(instant); [EOL]     instant = iJulianField.set(instant, max); [EOL]     if (instant >= iCutover) { [EOL]         max = iJulianField.get(iJulianField.add(iCutover, -1)); [EOL]     } [EOL]     return max; [EOL] } <line_num>: 857,872
public int getMaximumValue(ReadablePartial partial) { [EOL]     long instant = GJChronology.getInstanceUTC().set(partial, 0L); [EOL]     return getMaximumValue(instant); [EOL] } <line_num>: 874,877
public int getMaximumValue(ReadablePartial partial, int[] values) { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     long instant = 0L; [EOL]     for (int i = 0, isize = partial.size(); i < isize; i++) { [EOL]         DateTimeField field = partial.getFieldType(i).getField(chrono); [EOL]         if (values[i] <= field.getMaximumValue(instant)) { [EOL]             instant = field.set(instant, values[i]); [EOL]         } [EOL]     } [EOL]     return getMaximumValue(instant); [EOL] } <line_num>: 879,889
public long roundFloor(long instant) { [EOL]     if (instant >= iCutover) { [EOL]         instant = iGregorianField.roundFloor(instant); [EOL]         if (instant < iCutover) { [EOL]             if (instant + iGapDuration < iCutover) { [EOL]                 instant = gregorianToJulian(instant); [EOL]             } [EOL]         } [EOL]     } else { [EOL]         instant = iJulianField.roundFloor(instant); [EOL]     } [EOL]     return instant; [EOL] } <line_num>: 891,904
public long roundCeiling(long instant) { [EOL]     if (instant >= iCutover) { [EOL]         instant = iGregorianField.roundCeiling(instant); [EOL]     } else { [EOL]         instant = iJulianField.roundCeiling(instant); [EOL]         if (instant >= iCutover) { [EOL]             if (instant - iGapDuration >= iCutover) { [EOL]                 instant = julianToGregorian(instant); [EOL]             } [EOL]         } [EOL]     } [EOL]     return instant; [EOL] } <line_num>: 906,919
public int getMaximumTextLength(Locale locale) { [EOL]     return Math.max(iJulianField.getMaximumTextLength(locale), iGregorianField.getMaximumTextLength(locale)); [EOL] } <line_num>: 921,924
public int getMaximumShortTextLength(Locale locale) { [EOL]     return Math.max(iJulianField.getMaximumShortTextLength(locale), iGregorianField.getMaximumShortTextLength(locale)); [EOL] } <line_num>: 926,929
protected long julianToGregorian(long instant) { [EOL]     if (iConvertByWeekyear) { [EOL]         return julianToGregorianByWeekyear(instant); [EOL]     } else { [EOL]         return julianToGregorianByYear(instant); [EOL]     } [EOL] } <line_num>: 931,937
protected long gregorianToJulian(long instant) { [EOL]     if (iConvertByWeekyear) { [EOL]         return gregorianToJulianByWeekyear(instant); [EOL]     } else { [EOL]         return gregorianToJulianByYear(instant); [EOL]     } [EOL] } <line_num>: 939,945
public long add(long instant, int value) { [EOL]     if (instant >= iCutover) { [EOL]         instant = iGregorianField.add(instant, value); [EOL]         if (instant < iCutover) { [EOL]             if (instant + iGapDuration < iCutover) { [EOL]                 if (iConvertByWeekyear) { [EOL]                     int wyear = iGregorianChronology.weekyear().get(instant); [EOL]                     if (wyear <= 0) { [EOL]                         instant = iGregorianChronology.weekyear().add(instant, -1); [EOL]                     } [EOL]                 } else { [EOL]                     int year = iGregorianChronology.year().get(instant); [EOL]                     if (year <= 0) { [EOL]                         instant = iGregorianChronology.year().add(instant, -1); [EOL]                     } [EOL]                 } [EOL]                 instant = gregorianToJulian(instant); [EOL]             } [EOL]         } [EOL]     } else { [EOL]         instant = iJulianField.add(instant, value); [EOL]         if (instant >= iCutover) { [EOL]             if (instant - iGapDuration >= iCutover) { [EOL]                 instant = julianToGregorian(instant); [EOL]             } [EOL]         } [EOL]     } [EOL]     return instant; [EOL] } <line_num>: 1005,1036
public long add(long instant, long value) { [EOL]     if (instant >= iCutover) { [EOL]         instant = iGregorianField.add(instant, value); [EOL]         if (instant < iCutover) { [EOL]             if (instant + iGapDuration < iCutover) { [EOL]                 if (iConvertByWeekyear) { [EOL]                     int wyear = iGregorianChronology.weekyear().get(instant); [EOL]                     if (wyear <= 0) { [EOL]                         instant = iGregorianChronology.weekyear().add(instant, -1); [EOL]                     } [EOL]                 } else { [EOL]                     int year = iGregorianChronology.year().get(instant); [EOL]                     if (year <= 0) { [EOL]                         instant = iGregorianChronology.year().add(instant, -1); [EOL]                     } [EOL]                 } [EOL]                 instant = gregorianToJulian(instant); [EOL]             } [EOL]         } [EOL]     } else { [EOL]         instant = iJulianField.add(instant, value); [EOL]         if (instant >= iCutover) { [EOL]             if (instant - iGapDuration >= iCutover) { [EOL]                 instant = julianToGregorian(instant); [EOL]             } [EOL]         } [EOL]     } [EOL]     return instant; [EOL] } <line_num>: 1038,1069
public int getDifference(long minuendInstant, long subtrahendInstant) { [EOL]     if (minuendInstant >= iCutover) { [EOL]         if (subtrahendInstant >= iCutover) { [EOL]             return iGregorianField.getDifference(minuendInstant, subtrahendInstant); [EOL]         } [EOL]         minuendInstant = gregorianToJulian(minuendInstant); [EOL]         return iJulianField.getDifference(minuendInstant, subtrahendInstant); [EOL]     } else { [EOL]         if (subtrahendInstant < iCutover) { [EOL]             return iJulianField.getDifference(minuendInstant, subtrahendInstant); [EOL]         } [EOL]         minuendInstant = julianToGregorian(minuendInstant); [EOL]         return iGregorianField.getDifference(minuendInstant, subtrahendInstant); [EOL]     } [EOL] } <line_num>: 1071,1089
public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) { [EOL]     if (minuendInstant >= iCutover) { [EOL]         if (subtrahendInstant >= iCutover) { [EOL]             return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant); [EOL]         } [EOL]         minuendInstant = gregorianToJulian(minuendInstant); [EOL]         return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant); [EOL]     } else { [EOL]         if (subtrahendInstant < iCutover) { [EOL]             return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant); [EOL]         } [EOL]         minuendInstant = julianToGregorian(minuendInstant); [EOL]         return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant); [EOL]     } [EOL] } <line_num>: 1091,1109
public int getMinimumValue(long instant) { [EOL]     if (instant >= iCutover) { [EOL]         return iGregorianField.getMinimumValue(instant); [EOL]     } else { [EOL]         return iJulianField.getMinimumValue(instant); [EOL]     } [EOL] } <line_num>: 1121,1127
public int getMaximumValue(long instant) { [EOL]     if (instant >= iCutover) { [EOL]         return iGregorianField.getMaximumValue(instant); [EOL]     } else { [EOL]         return iJulianField.getMaximumValue(instant); [EOL]     } [EOL] } <line_num>: 1129,1135
public long add(long instant, int value) { [EOL]     return iField.add(instant, value); [EOL] } <line_num>: 1152,1154
public long add(long instant, long value) { [EOL]     return iField.add(instant, value); [EOL] } <line_num>: 1156,1158
public int getDifference(long minuendInstant, long subtrahendInstant) { [EOL]     return iField.getDifference(minuendInstant, subtrahendInstant); [EOL] } <line_num>: 1160,1162
public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) { [EOL]     return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant); [EOL] } <line_num>: 1164,1166
