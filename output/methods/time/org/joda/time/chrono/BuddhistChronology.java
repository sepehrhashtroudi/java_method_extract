private BuddhistChronology(Chronology base, Object param) { [EOL]     super(base, param); [EOL] } <line_num>: 132,134
public static BuddhistChronology getInstanceUTC() { [EOL]     return INSTANCE_UTC; [EOL] } <line_num>: 85,87
public static BuddhistChronology getInstance() { [EOL]     return getInstance(DateTimeZone.getDefault()); [EOL] } <line_num>: 94,96
public static synchronized BuddhistChronology getInstance(DateTimeZone zone) { [EOL]     if (zone == null) { [EOL]         zone = DateTimeZone.getDefault(); [EOL]     } [EOL]     BuddhistChronology chrono; [EOL]     synchronized (cCache) { [EOL]         chrono = cCache.get(zone); [EOL]         if (chrono == null) { [EOL]             chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null); [EOL]             DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono); [EOL]             chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), ""); [EOL]             cCache.put(zone, chrono); [EOL]         } [EOL]     } [EOL]     return chrono; [EOL] } <line_num>: 105,122
private Object readResolve() { [EOL]     Chronology base = getBase(); [EOL]     return base == null ? getInstanceUTC() : getInstance(base.getZone()); [EOL] } <line_num>: 139,142
public Chronology withUTC() { [EOL]     return INSTANCE_UTC; [EOL] } <line_num>: 151,153
public Chronology withZone(DateTimeZone zone) { [EOL]     if (zone == null) { [EOL]         zone = DateTimeZone.getDefault(); [EOL]     } [EOL]     if (zone == getZone()) { [EOL]         return this; [EOL]     } [EOL]     return getInstance(zone); [EOL] } <line_num>: 161,169
public boolean equals(Object obj) { [EOL]     if (this == obj) { [EOL]         return true; [EOL]     } [EOL]     if (obj instanceof BuddhistChronology) { [EOL]         BuddhistChronology chrono = (BuddhistChronology) obj; [EOL]         return getZone().equals(chrono.getZone()); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 179,188
public int hashCode() { [EOL]     return "Buddhist".hashCode() * 11 + getZone().hashCode(); [EOL] } <line_num>: 196,198
public String toString() { [EOL]     String str = "BuddhistChronology"; [EOL]     DateTimeZone zone = getZone(); [EOL]     if (zone != null) { [EOL]         str = str + '[' + zone.getID() + ']'; [EOL]     } [EOL]     return str; [EOL] } <line_num>: 207,214
protected void assemble(Fields fields) { [EOL]     if (getParam() == null) { [EOL]         fields.eras = UnsupportedDurationField.getInstance(DurationFieldType.eras()); [EOL]         DateTimeField field = fields.year; [EOL]         fields.year = new OffsetDateTimeField(new SkipUndoDateTimeField(this, field), BUDDHIST_OFFSET); [EOL]         field = fields.yearOfEra; [EOL]         fields.yearOfEra = new DelegatedDateTimeField(fields.year, fields.eras, DateTimeFieldType.yearOfEra()); [EOL]         field = fields.weekyear; [EOL]         fields.weekyear = new OffsetDateTimeField(new SkipUndoDateTimeField(this, field), BUDDHIST_OFFSET); [EOL]         field = new OffsetDateTimeField(fields.yearOfEra, 99); [EOL]         fields.centuryOfEra = new DividedDateTimeField(field, fields.eras, DateTimeFieldType.centuryOfEra(), 100); [EOL]         fields.centuries = fields.centuryOfEra.getDurationField(); [EOL]         field = new RemainderDateTimeField((DividedDateTimeField) fields.centuryOfEra); [EOL]         fields.yearOfCentury = new OffsetDateTimeField(field, DateTimeFieldType.yearOfCentury(), 1); [EOL]         field = new RemainderDateTimeField(fields.weekyear, fields.centuries, DateTimeFieldType.weekyearOfCentury(), 100); [EOL]         fields.weekyearOfCentury = new OffsetDateTimeField(field, DateTimeFieldType.weekyearOfCentury(), 1); [EOL]         fields.era = ERA_FIELD; [EOL]     } [EOL] } <line_num>: 216,253
