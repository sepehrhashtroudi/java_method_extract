BasicGJChronology(Chronology base, Object param, int minDaysInFirstWeek) { [EOL]     super(base, param, minDaysInFirstWeek); [EOL] } <line_num>: 74,76
int getMonthOfYear(long millis, int year) { [EOL]     int i = (int) ((millis - getYearMillis(year)) >> 10); [EOL]     return (isLeapYear(year)) ? ((i < 182 * 84375) ? ((i < 91 * 84375) ? ((i < 31 * 84375) ? 1 : (i < 60 * 84375) ? 2 : 3) : ((i < 121 * 84375) ? 4 : (i < 152 * 84375) ? 5 : 6)) : ((i < 274 * 84375) ? ((i < 213 * 84375) ? 7 : (i < 244 * 84375) ? 8 : 9) : ((i < 305 * 84375) ? 10 : (i < 335 * 84375) ? 11 : 12))) : ((i < 181 * 84375) ? ((i < 90 * 84375) ? ((i < 31 * 84375) ? 1 : (i < 59 * 84375) ? 2 : 3) : ((i < 120 * 84375) ? 4 : (i < 151 * 84375) ? 5 : 6)) : ((i < 273 * 84375) ? ((i < 212 * 84375) ? 7 : (i < 243 * 84375) ? 8 : 9) : ((i < 304 * 84375) ? 10 : (i < 334 * 84375) ? 11 : 12))); [EOL] } <line_num>: 79,109
int getDaysInYearMonth(int year, int month) { [EOL]     if (isLeapYear(year)) { [EOL]         return MAX_DAYS_PER_MONTH_ARRAY[month - 1]; [EOL]     } else { [EOL]         return MIN_DAYS_PER_MONTH_ARRAY[month - 1]; [EOL]     } [EOL] } <line_num>: 119,125
int getDaysInMonthMax(int month) { [EOL]     return MAX_DAYS_PER_MONTH_ARRAY[month - 1]; [EOL] } <line_num>: 128,130
int getDaysInMonthMaxForSet(long instant, int value) { [EOL]     return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28); [EOL] } <line_num>: 133,135
long getTotalMillisByYearMonth(int year, int month) { [EOL]     if (isLeapYear(year)) { [EOL]         return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1]; [EOL]     } else { [EOL]         return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1]; [EOL]     } [EOL] } <line_num>: 138,144
long getYearDifference(long minuendInstant, long subtrahendInstant) { [EOL]     int minuendYear = getYear(minuendInstant); [EOL]     int subtrahendYear = getYear(subtrahendInstant); [EOL]     long minuendRem = minuendInstant - getYearMillis(minuendYear); [EOL]     long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear); [EOL]     if (subtrahendRem >= FEB_29) { [EOL]         if (isLeapYear(subtrahendYear)) { [EOL]             if (!isLeapYear(minuendYear)) { [EOL]                 subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY; [EOL]             } [EOL]         } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) { [EOL]             minuendRem -= DateTimeConstants.MILLIS_PER_DAY; [EOL]         } [EOL]     } [EOL]     int difference = minuendYear - subtrahendYear; [EOL]     if (minuendRem < subtrahendRem) { [EOL]         difference--; [EOL]     } [EOL]     return difference; [EOL] } <line_num>: 147,171
long setYear(long instant, int year) { [EOL]     int thisYear = getYear(instant); [EOL]     int dayOfYear = getDayOfYear(instant, thisYear); [EOL]     int millisOfDay = getMillisOfDay(instant); [EOL]     if (dayOfYear > (31 + 28)) { [EOL]         if (isLeapYear(thisYear)) { [EOL]             if (!isLeapYear(year)) { [EOL]                 dayOfYear--; [EOL]             } [EOL]         } else { [EOL]             if (isLeapYear(year)) { [EOL]                 dayOfYear++; [EOL]             } [EOL]         } [EOL]     } [EOL]     instant = getYearMonthDayMillis(year, 1, dayOfYear); [EOL]     instant += millisOfDay; [EOL]     return instant; [EOL] } <line_num>: 174,199
