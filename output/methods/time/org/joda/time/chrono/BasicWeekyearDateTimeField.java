BasicWeekyearDateTimeField(BasicChronology chronology) { [EOL]     super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear()); [EOL]     iChronology = chronology; [EOL] } <line_num>: 44,47
public boolean isLenient() { [EOL]     return false; [EOL] } <line_num>: 49,51
public int get(long instant) { [EOL]     return iChronology.getWeekyear(instant); [EOL] } <line_num>: 60,62
public long add(long instant, int years) { [EOL]     if (years == 0) { [EOL]         return instant; [EOL]     } [EOL]     return set(instant, get(instant) + years); [EOL] } <line_num>: 72,77
public long add(long instant, long value) { [EOL]     return add(instant, FieldUtils.safeToInt(value)); [EOL] } <line_num>: 79,81
public long addWrapField(long instant, int years) { [EOL]     return add(instant, years); [EOL] } <line_num>: 92,94
public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) { [EOL]     if (minuendInstant < subtrahendInstant) { [EOL]         return -getDifference(subtrahendInstant, minuendInstant); [EOL]     } [EOL]     int minuendWeekyear = get(minuendInstant); [EOL]     int subtrahendWeekyear = get(subtrahendInstant); [EOL]     long minuendRem = remainder(minuendInstant); [EOL]     long subtrahendRem = remainder(subtrahendInstant); [EOL]     if (subtrahendRem >= WEEK_53 && iChronology.getWeeksInYear(minuendWeekyear) <= 52) { [EOL]         subtrahendRem -= DateTimeConstants.MILLIS_PER_WEEK; [EOL]     } [EOL]     int difference = minuendWeekyear - subtrahendWeekyear; [EOL]     if (minuendRem < subtrahendRem) { [EOL]         difference--; [EOL]     } [EOL]     return difference; [EOL] } <line_num>: 96,117
public long set(long instant, int year) { [EOL]     FieldUtils.verifyValueBounds(this, Math.abs(year), iChronology.getMinYear(), iChronology.getMaxYear()); [EOL]     int thisWeekyear = get(instant); [EOL]     if (thisWeekyear == year) { [EOL]         return instant; [EOL]     } [EOL]     int thisDow = iChronology.getDayOfWeek(instant); [EOL]     int weeksInFromYear = iChronology.getWeeksInYear(thisWeekyear); [EOL]     int weeksInToYear = iChronology.getWeeksInYear(year); [EOL]     int maxOutWeeks = (weeksInToYear < weeksInFromYear) ? weeksInToYear : weeksInFromYear; [EOL]     int setToWeek = iChronology.getWeekOfWeekyear(instant); [EOL]     if (setToWeek > maxOutWeeks) { [EOL]         setToWeek = maxOutWeeks; [EOL]     } [EOL]     long workInstant = instant; [EOL]     workInstant = iChronology.setYear(workInstant, year); [EOL]     int workWoyYear = get(workInstant); [EOL]     if (workWoyYear < year) { [EOL]         workInstant += DateTimeConstants.MILLIS_PER_WEEK; [EOL]     } else if (workWoyYear > year) { [EOL]         workInstant -= DateTimeConstants.MILLIS_PER_WEEK; [EOL]     } [EOL]     int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant); [EOL]     workInstant = workInstant + (setToWeek - currentWoyWeek) * (long) DateTimeConstants.MILLIS_PER_WEEK; [EOL]     workInstant = iChronology.dayOfWeek().set(workInstant, thisDow); [EOL]     return workInstant; [EOL] } <line_num>: 128,206
public DurationField getRangeDurationField() { [EOL]     return null; [EOL] } <line_num>: 208,210
public boolean isLeap(long instant) { [EOL]     return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) > 52; [EOL] } <line_num>: 212,214
public int getLeapAmount(long instant) { [EOL]     return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) - 52; [EOL] } <line_num>: 216,218
public DurationField getLeapDurationField() { [EOL]     return iChronology.weeks(); [EOL] } <line_num>: 220,222
public int getMinimumValue() { [EOL]     return iChronology.getMinYear(); [EOL] } <line_num>: 224,226
public int getMaximumValue() { [EOL]     return iChronology.getMaxYear(); [EOL] } <line_num>: 228,230
public long roundFloor(long instant) { [EOL]     instant = iChronology.weekOfWeekyear().roundFloor(instant); [EOL]     int wow = iChronology.getWeekOfWeekyear(instant); [EOL]     if (wow > 1) { [EOL]         instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1); [EOL]     } [EOL]     return instant; [EOL] } <line_num>: 232,241
public long remainder(long instant) { [EOL]     return instant - roundFloor(instant); [EOL] } <line_num>: 243,245
private Object readResolve() { [EOL]     return iChronology.weekyear(); [EOL] } <line_num>: 250,252
