private ISOChronology(Chronology base) { [EOL]     super(base, null); [EOL] } <line_num>: 121,123
Stub(DateTimeZone zone) { [EOL]     iZone = zone; [EOL] } <line_num>: 225,227
public static ISOChronology getInstanceUTC() { [EOL]     return INSTANCE_UTC; [EOL] } <line_num>: 76,78
public static ISOChronology getInstance() { [EOL]     return getInstance(DateTimeZone.getDefault()); [EOL] } <line_num>: 85,87
public static ISOChronology getInstance(DateTimeZone zone) { [EOL]     if (zone == null) { [EOL]         zone = DateTimeZone.getDefault(); [EOL]     } [EOL]     int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1); [EOL]     ISOChronology chrono = cFastCache[index]; [EOL]     if (chrono != null && chrono.getZone() == zone) { [EOL]         return chrono; [EOL]     } [EOL]     synchronized (cCache) { [EOL]         chrono = cCache.get(zone); [EOL]         if (chrono == null) { [EOL]             chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone)); [EOL]             cCache.put(zone, chrono); [EOL]         } [EOL]     } [EOL]     cFastCache[index] = chrono; [EOL]     return chrono; [EOL] } <line_num>: 95,113
public Chronology withUTC() { [EOL]     return INSTANCE_UTC; [EOL] } <line_num>: 132,134
public Chronology withZone(DateTimeZone zone) { [EOL]     if (zone == null) { [EOL]         zone = DateTimeZone.getDefault(); [EOL]     } [EOL]     if (zone == getZone()) { [EOL]         return this; [EOL]     } [EOL]     return getInstance(zone); [EOL] } <line_num>: 142,150
public String toString() { [EOL]     String str = "ISOChronology"; [EOL]     DateTimeZone zone = getZone(); [EOL]     if (zone != null) { [EOL]         str = str + '[' + zone.getID() + ']'; [EOL]     } [EOL]     return str; [EOL] } <line_num>: 159,166
protected void assemble(Fields fields) { [EOL]     if (getBase().getZone() == DateTimeZone.UTC) { [EOL]         fields.centuryOfEra = new DividedDateTimeField(ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra(), 100); [EOL]         fields.centuries = fields.centuryOfEra.getDurationField(); [EOL]         fields.yearOfCentury = new RemainderDateTimeField((DividedDateTimeField) fields.centuryOfEra, DateTimeFieldType.yearOfCentury()); [EOL]         fields.weekyearOfCentury = new RemainderDateTimeField((DividedDateTimeField) fields.centuryOfEra, fields.weekyears, DateTimeFieldType.weekyearOfCentury()); [EOL]     } [EOL] } <line_num>: 168,180
public boolean equals(Object obj) { [EOL]     if (this == obj) { [EOL]         return true; [EOL]     } [EOL]     if (obj instanceof ISOChronology) { [EOL]         ISOChronology chrono = (ISOChronology) obj; [EOL]         return getZone().equals(chrono.getZone()); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 190,199
public int hashCode() { [EOL]     return "ISO".hashCode() * 11 + getZone().hashCode(); [EOL] } <line_num>: 207,209
private Object writeReplace() { [EOL]     return new Stub(getZone()); [EOL] } <line_num>: 216,218
private Object readResolve() { [EOL]     return ISOChronology.getInstance(iZone); [EOL] } <line_num>: 229,231
private void writeObject(ObjectOutputStream out) throws IOException { [EOL]     out.writeObject(iZone); [EOL] } <line_num>: 233,235
private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { [EOL]     iZone = (DateTimeZone) in.readObject(); [EOL] } <line_num>: 237,241
