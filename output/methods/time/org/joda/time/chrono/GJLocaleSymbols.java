private GJLocaleSymbols(Locale locale) { [EOL]     iLocale = new WeakReference<Locale>(locale); [EOL]     DateFormatSymbols dfs = DateTimeUtils.getDateFormatSymbols(locale); [EOL]     iEras = dfs.getEras(); [EOL]     iDaysOfWeek = realignDaysOfWeek(dfs.getWeekdays()); [EOL]     iShortDaysOfWeek = realignDaysOfWeek(dfs.getShortWeekdays()); [EOL]     iMonths = realignMonths(dfs.getMonths()); [EOL]     iShortMonths = realignMonths(dfs.getShortMonths()); [EOL]     iHalfday = dfs.getAmPmStrings(); [EOL]     Integer[] integers = new Integer[13]; [EOL]     for (int i = 0; i < 13; i++) { [EOL]         integers[i] = Integer.valueOf(i); [EOL]     } [EOL]     iParseEras = new TreeMap<String, Integer>(String.CASE_INSENSITIVE_ORDER); [EOL]     addSymbols(iParseEras, iEras, integers); [EOL]     if ("en".equals(locale.getLanguage())) { [EOL]         iParseEras.put("BCE", integers[0]); [EOL]         iParseEras.put("CE", integers[1]); [EOL]     } [EOL]     iParseDaysOfWeek = new TreeMap<String, Integer>(String.CASE_INSENSITIVE_ORDER); [EOL]     addSymbols(iParseDaysOfWeek, iDaysOfWeek, integers); [EOL]     addSymbols(iParseDaysOfWeek, iShortDaysOfWeek, integers); [EOL]     addNumerals(iParseDaysOfWeek, 1, 7, integers); [EOL]     iParseMonths = new TreeMap<String, Integer>(String.CASE_INSENSITIVE_ORDER); [EOL]     addSymbols(iParseMonths, iMonths, integers); [EOL]     addSymbols(iParseMonths, iShortMonths, integers); [EOL]     addNumerals(iParseMonths, 1, 12, integers); [EOL]     iMaxEraLength = maxLength(iEras); [EOL]     iMaxDayOfWeekLength = maxLength(iDaysOfWeek); [EOL]     iMaxShortDayOfWeekLength = maxLength(iShortDaysOfWeek); [EOL]     iMaxMonthLength = maxLength(iMonths); [EOL]     iMaxShortMonthLength = maxLength(iShortMonths); [EOL]     iMaxHalfdayLength = maxLength(iHalfday); [EOL] } <line_num>: 129,172
public static GJLocaleSymbols forLocale(Locale locale) { [EOL]     if (locale == null) { [EOL]         locale = Locale.getDefault(); [EOL]     } [EOL]     int index = System.identityHashCode(locale) & (FAST_CACHE_SIZE - 1); [EOL]     GJLocaleSymbols symbols = cFastCache[index]; [EOL]     if (symbols != null && symbols.iLocale.get() == locale) { [EOL]         return symbols; [EOL]     } [EOL]     synchronized (cCache) { [EOL]         symbols = cCache.get(locale); [EOL]         if (symbols == null) { [EOL]             symbols = new GJLocaleSymbols(locale); [EOL]             cCache.put(locale, symbols); [EOL]         } [EOL]     } [EOL]     cFastCache[index] = symbols; [EOL]     return symbols; [EOL] } <line_num>: 41,59
private static String[] realignMonths(String[] months) { [EOL]     String[] a = new String[13]; [EOL]     for (int i = 1; i < 13; i++) { [EOL]         a[i] = months[i - 1]; [EOL]     } [EOL]     return a; [EOL] } <line_num>: 61,67
private static String[] realignDaysOfWeek(String[] daysOfWeek) { [EOL]     String[] a = new String[8]; [EOL]     for (int i = 1; i < 8; i++) { [EOL]         a[i] = daysOfWeek[(i < 7) ? i + 1 : 1]; [EOL]     } [EOL]     return a; [EOL] } <line_num>: 69,75
private static void addSymbols(TreeMap<String, Integer> map, String[] symbols, Integer[] integers) { [EOL]     for (int i = symbols.length; --i >= 0; ) { [EOL]         String symbol = symbols[i]; [EOL]         if (symbol != null) { [EOL]             map.put(symbol, integers[i]); [EOL]         } [EOL]     } [EOL] } <line_num>: 77,84
private static void addNumerals(TreeMap<String, Integer> map, int start, int end, Integer[] integers) { [EOL]     for (int i = start; i <= end; i++) { [EOL]         map.put(String.valueOf(i).intern(), integers[i]); [EOL]     } [EOL] } <line_num>: 86,90
private static int maxLength(String[] a) { [EOL]     int max = 0; [EOL]     for (int i = a.length; --i >= 0; ) { [EOL]         String s = a[i]; [EOL]         if (s != null) { [EOL]             int len = s.length(); [EOL]             if (len > max) { [EOL]                 max = len; [EOL]             } [EOL]         } [EOL]     } [EOL]     return max; [EOL] } <line_num>: 92,104
public String eraValueToText(int value) { [EOL]     return iEras[value]; [EOL] } <line_num>: 174,176
public int eraTextToValue(String text) { [EOL]     Integer era = iParseEras.get(text); [EOL]     if (era != null) { [EOL]         return era.intValue(); [EOL]     } [EOL]     throw new IllegalFieldValueException(DateTimeFieldType.era(), text); [EOL] } <line_num>: 178,184
public int getEraMaxTextLength() { [EOL]     return iMaxEraLength; [EOL] } <line_num>: 186,188
public String monthOfYearValueToText(int value) { [EOL]     return iMonths[value]; [EOL] } <line_num>: 190,192
public String monthOfYearValueToShortText(int value) { [EOL]     return iShortMonths[value]; [EOL] } <line_num>: 194,196
public int monthOfYearTextToValue(String text) { [EOL]     Integer month = iParseMonths.get(text); [EOL]     if (month != null) { [EOL]         return month.intValue(); [EOL]     } [EOL]     throw new IllegalFieldValueException(DateTimeFieldType.monthOfYear(), text); [EOL] } <line_num>: 198,204
public int getMonthMaxTextLength() { [EOL]     return iMaxMonthLength; [EOL] } <line_num>: 206,208
public int getMonthMaxShortTextLength() { [EOL]     return iMaxShortMonthLength; [EOL] } <line_num>: 210,212
public String dayOfWeekValueToText(int value) { [EOL]     return iDaysOfWeek[value]; [EOL] } <line_num>: 214,216
public String dayOfWeekValueToShortText(int value) { [EOL]     return iShortDaysOfWeek[value]; [EOL] } <line_num>: 218,220
public int dayOfWeekTextToValue(String text) { [EOL]     Integer day = iParseDaysOfWeek.get(text); [EOL]     if (day != null) { [EOL]         return day.intValue(); [EOL]     } [EOL]     throw new IllegalFieldValueException(DateTimeFieldType.dayOfWeek(), text); [EOL] } <line_num>: 222,228
public int getDayOfWeekMaxTextLength() { [EOL]     return iMaxDayOfWeekLength; [EOL] } <line_num>: 230,232
public int getDayOfWeekMaxShortTextLength() { [EOL]     return iMaxShortDayOfWeekLength; [EOL] } <line_num>: 234,236
public String halfdayValueToText(int value) { [EOL]     return iHalfday[value]; [EOL] } <line_num>: 238,240
public int halfdayTextToValue(String text) { [EOL]     String[] halfday = iHalfday; [EOL]     for (int i = halfday.length; --i >= 0; ) { [EOL]         if (halfday[i].equalsIgnoreCase(text)) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     throw new IllegalFieldValueException(DateTimeFieldType.halfdayOfDay(), text); [EOL] } <line_num>: 242,250
public int getHalfdayMaxTextLength() { [EOL]     return iMaxHalfdayLength; [EOL] } <line_num>: 252,254
