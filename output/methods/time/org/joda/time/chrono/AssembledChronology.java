protected AssembledChronology(Chronology base, Object param) { [EOL]     iBase = base; [EOL]     iParam = param; [EOL]     setFields(); [EOL] } <line_num>: 99,103
Fields() { [EOL] } <line_num>: 436,437
public DateTimeZone getZone() { [EOL]     Chronology base; [EOL]     if ((base = iBase) != null) { [EOL]         return base.getZone(); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 105,111
public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay) throws IllegalArgumentException { [EOL]     Chronology base; [EOL]     if ((base = iBase) != null && (iBaseFlags & 6) == 6) { [EOL]         return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay); [EOL]     } [EOL]     return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay); [EOL] } <line_num>: 113,123
public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException { [EOL]     Chronology base; [EOL]     if ((base = iBase) != null && (iBaseFlags & 5) == 5) { [EOL]         return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond); [EOL]     } [EOL]     return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond); [EOL] } <line_num>: 125,138
public long getDateTimeMillis(long instant, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException { [EOL]     Chronology base; [EOL]     if ((base = iBase) != null && (iBaseFlags & 1) == 1) { [EOL]         return base.getDateTimeMillis(instant, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond); [EOL]     } [EOL]     return super.getDateTimeMillis(instant, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond); [EOL] } <line_num>: 140,153
public final DurationField millis() { [EOL]     return iMillis; [EOL] } <line_num>: 155,157
public final DateTimeField millisOfSecond() { [EOL]     return iMillisOfSecond; [EOL] } <line_num>: 159,161
public final DateTimeField millisOfDay() { [EOL]     return iMillisOfDay; [EOL] } <line_num>: 163,165
public final DurationField seconds() { [EOL]     return iSeconds; [EOL] } <line_num>: 167,169
public final DateTimeField secondOfMinute() { [EOL]     return iSecondOfMinute; [EOL] } <line_num>: 171,173
public final DateTimeField secondOfDay() { [EOL]     return iSecondOfDay; [EOL] } <line_num>: 175,177
public final DurationField minutes() { [EOL]     return iMinutes; [EOL] } <line_num>: 179,181
public final DateTimeField minuteOfHour() { [EOL]     return iMinuteOfHour; [EOL] } <line_num>: 183,185
public final DateTimeField minuteOfDay() { [EOL]     return iMinuteOfDay; [EOL] } <line_num>: 187,189
public final DurationField hours() { [EOL]     return iHours; [EOL] } <line_num>: 191,193
public final DateTimeField hourOfDay() { [EOL]     return iHourOfDay; [EOL] } <line_num>: 195,197
public final DateTimeField clockhourOfDay() { [EOL]     return iClockhourOfDay; [EOL] } <line_num>: 199,201
public final DurationField halfdays() { [EOL]     return iHalfdays; [EOL] } <line_num>: 203,205
public final DateTimeField hourOfHalfday() { [EOL]     return iHourOfHalfday; [EOL] } <line_num>: 207,209
public final DateTimeField clockhourOfHalfday() { [EOL]     return iClockhourOfHalfday; [EOL] } <line_num>: 211,213
public final DateTimeField halfdayOfDay() { [EOL]     return iHalfdayOfDay; [EOL] } <line_num>: 215,217
public final DurationField days() { [EOL]     return iDays; [EOL] } <line_num>: 219,221
public final DateTimeField dayOfWeek() { [EOL]     return iDayOfWeek; [EOL] } <line_num>: 223,225
public final DateTimeField dayOfMonth() { [EOL]     return iDayOfMonth; [EOL] } <line_num>: 227,229
public final DateTimeField dayOfYear() { [EOL]     return iDayOfYear; [EOL] } <line_num>: 231,233
public final DurationField weeks() { [EOL]     return iWeeks; [EOL] } <line_num>: 235,237
public final DateTimeField weekOfWeekyear() { [EOL]     return iWeekOfWeekyear; [EOL] } <line_num>: 239,241
public final DurationField weekyears() { [EOL]     return iWeekyears; [EOL] } <line_num>: 243,245
public final DateTimeField weekyear() { [EOL]     return iWeekyear; [EOL] } <line_num>: 247,249
public final DateTimeField weekyearOfCentury() { [EOL]     return iWeekyearOfCentury; [EOL] } <line_num>: 251,253
public final DurationField months() { [EOL]     return iMonths; [EOL] } <line_num>: 255,257
public final DateTimeField monthOfYear() { [EOL]     return iMonthOfYear; [EOL] } <line_num>: 259,261
public final DurationField years() { [EOL]     return iYears; [EOL] } <line_num>: 263,265
public final DateTimeField year() { [EOL]     return iYear; [EOL] } <line_num>: 267,269
public final DateTimeField yearOfEra() { [EOL]     return iYearOfEra; [EOL] } <line_num>: 271,273
public final DateTimeField yearOfCentury() { [EOL]     return iYearOfCentury; [EOL] } <line_num>: 275,277
public final DurationField centuries() { [EOL]     return iCenturies; [EOL] } <line_num>: 279,281
public final DateTimeField centuryOfEra() { [EOL]     return iCenturyOfEra; [EOL] } <line_num>: 283,285
public final DurationField eras() { [EOL]     return iEras; [EOL] } <line_num>: 287,289
public final DateTimeField era() { [EOL]     return iEra; [EOL] } <line_num>: 291,293
protected abstract void assemble(Fields fields); <line_num>: 302,302
protected final Chronology getBase() { [EOL]     return iBase; [EOL] } <line_num>: 307,309
protected final Object getParam() { [EOL]     return iParam; [EOL] } <line_num>: 314,316
private void setFields() { [EOL]     Fields fields = new Fields(); [EOL]     if (iBase != null) { [EOL]         fields.copyFieldsFrom(iBase); [EOL]     } [EOL]     assemble(fields); [EOL]     { [EOL]         DurationField f; [EOL]         iMillis = (f = fields.millis) != null ? f : super.millis(); [EOL]         iSeconds = (f = fields.seconds) != null ? f : super.seconds(); [EOL]         iMinutes = (f = fields.minutes) != null ? f : super.minutes(); [EOL]         iHours = (f = fields.hours) != null ? f : super.hours(); [EOL]         iHalfdays = (f = fields.halfdays) != null ? f : super.halfdays(); [EOL]         iDays = (f = fields.days) != null ? f : super.days(); [EOL]         iWeeks = (f = fields.weeks) != null ? f : super.weeks(); [EOL]         iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears(); [EOL]         iMonths = (f = fields.months) != null ? f : super.months(); [EOL]         iYears = (f = fields.years) != null ? f : super.years(); [EOL]         iCenturies = (f = fields.centuries) != null ? f : super.centuries(); [EOL]         iEras = (f = fields.eras) != null ? f : super.eras(); [EOL]     } [EOL]     { [EOL]         DateTimeField f; [EOL]         iMillisOfSecond = (f = fields.millisOfSecond) != null ? f : super.millisOfSecond(); [EOL]         iMillisOfDay = (f = fields.millisOfDay) != null ? f : super.millisOfDay(); [EOL]         iSecondOfMinute = (f = fields.secondOfMinute) != null ? f : super.secondOfMinute(); [EOL]         iSecondOfDay = (f = fields.secondOfDay) != null ? f : super.secondOfDay(); [EOL]         iMinuteOfHour = (f = fields.minuteOfHour) != null ? f : super.minuteOfHour(); [EOL]         iMinuteOfDay = (f = fields.minuteOfDay) != null ? f : super.minuteOfDay(); [EOL]         iHourOfDay = (f = fields.hourOfDay) != null ? f : super.hourOfDay(); [EOL]         iClockhourOfDay = (f = fields.clockhourOfDay) != null ? f : super.clockhourOfDay(); [EOL]         iHourOfHalfday = (f = fields.hourOfHalfday) != null ? f : super.hourOfHalfday(); [EOL]         iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday(); [EOL]         iHalfdayOfDay = (f = fields.halfdayOfDay) != null ? f : super.halfdayOfDay(); [EOL]         iDayOfWeek = (f = fields.dayOfWeek) != null ? f : super.dayOfWeek(); [EOL]         iDayOfMonth = (f = fields.dayOfMonth) != null ? f : super.dayOfMonth(); [EOL]         iDayOfYear = (f = fields.dayOfYear) != null ? f : super.dayOfYear(); [EOL]         iWeekOfWeekyear = (f = fields.weekOfWeekyear) != null ? f : super.weekOfWeekyear(); [EOL]         iWeekyear = (f = fields.weekyear) != null ? f : super.weekyear(); [EOL]         iWeekyearOfCentury = (f = fields.weekyearOfCentury) != null ? f : super.weekyearOfCentury(); [EOL]         iMonthOfYear = (f = fields.monthOfYear) != null ? f : super.monthOfYear(); [EOL]         iYear = (f = fields.year) != null ? f : super.year(); [EOL]         iYearOfEra = (f = fields.yearOfEra) != null ? f : super.yearOfEra(); [EOL]         iYearOfCentury = (f = fields.yearOfCentury) != null ? f : super.yearOfCentury(); [EOL]         iCenturyOfEra = (f = fields.centuryOfEra) != null ? f : super.centuryOfEra(); [EOL]         iEra = (f = fields.era) != null ? f : super.era(); [EOL]     } [EOL]     int flags; [EOL]     if (iBase == null) { [EOL]         flags = 0; [EOL]     } else { [EOL]         flags = ((iHourOfDay == iBase.hourOfDay() && iMinuteOfHour == iBase.minuteOfHour() && iSecondOfMinute == iBase.secondOfMinute() && iMillisOfSecond == iBase.millisOfSecond()) ? 1 : 0) | ((iMillisOfDay == iBase.millisOfDay()) ? 2 : 0) | ((iYear == iBase.year() && iMonthOfYear == iBase.monthOfYear() && iDayOfMonth == iBase.dayOfMonth()) ? 4 : 0); [EOL]     } [EOL]     iBaseFlags = flags; [EOL] } <line_num>: 318,386
private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { [EOL]     in.defaultReadObject(); [EOL]     setFields(); [EOL] } <line_num>: 388,391
public void copyFieldsFrom(Chronology chrono) { [EOL]     { [EOL]         DurationField f; [EOL]         if (isSupported(f = chrono.millis())) { [EOL]             millis = f; [EOL]         } [EOL]         if (isSupported(f = chrono.seconds())) { [EOL]             seconds = f; [EOL]         } [EOL]         if (isSupported(f = chrono.minutes())) { [EOL]             minutes = f; [EOL]         } [EOL]         if (isSupported(f = chrono.hours())) { [EOL]             hours = f; [EOL]         } [EOL]         if (isSupported(f = chrono.halfdays())) { [EOL]             halfdays = f; [EOL]         } [EOL]         if (isSupported(f = chrono.days())) { [EOL]             days = f; [EOL]         } [EOL]         if (isSupported(f = chrono.weeks())) { [EOL]             weeks = f; [EOL]         } [EOL]         if (isSupported(f = chrono.weekyears())) { [EOL]             weekyears = f; [EOL]         } [EOL]         if (isSupported(f = chrono.months())) { [EOL]             months = f; [EOL]         } [EOL]         if (isSupported(f = chrono.years())) { [EOL]             years = f; [EOL]         } [EOL]         if (isSupported(f = chrono.centuries())) { [EOL]             centuries = f; [EOL]         } [EOL]         if (isSupported(f = chrono.eras())) { [EOL]             eras = f; [EOL]         } [EOL]     } [EOL]     { [EOL]         DateTimeField f; [EOL]         if (isSupported(f = chrono.millisOfSecond())) { [EOL]             millisOfSecond = f; [EOL]         } [EOL]         if (isSupported(f = chrono.millisOfDay())) { [EOL]             millisOfDay = f; [EOL]         } [EOL]         if (isSupported(f = chrono.secondOfMinute())) { [EOL]             secondOfMinute = f; [EOL]         } [EOL]         if (isSupported(f = chrono.secondOfDay())) { [EOL]             secondOfDay = f; [EOL]         } [EOL]         if (isSupported(f = chrono.minuteOfHour())) { [EOL]             minuteOfHour = f; [EOL]         } [EOL]         if (isSupported(f = chrono.minuteOfDay())) { [EOL]             minuteOfDay = f; [EOL]         } [EOL]         if (isSupported(f = chrono.hourOfDay())) { [EOL]             hourOfDay = f; [EOL]         } [EOL]         if (isSupported(f = chrono.clockhourOfDay())) { [EOL]             clockhourOfDay = f; [EOL]         } [EOL]         if (isSupported(f = chrono.hourOfHalfday())) { [EOL]             hourOfHalfday = f; [EOL]         } [EOL]         if (isSupported(f = chrono.clockhourOfHalfday())) { [EOL]             clockhourOfHalfday = f; [EOL]         } [EOL]         if (isSupported(f = chrono.halfdayOfDay())) { [EOL]             halfdayOfDay = f; [EOL]         } [EOL]         if (isSupported(f = chrono.dayOfWeek())) { [EOL]             dayOfWeek = f; [EOL]         } [EOL]         if (isSupported(f = chrono.dayOfMonth())) { [EOL]             dayOfMonth = f; [EOL]         } [EOL]         if (isSupported(f = chrono.dayOfYear())) { [EOL]             dayOfYear = f; [EOL]         } [EOL]         if (isSupported(f = chrono.weekOfWeekyear())) { [EOL]             weekOfWeekyear = f; [EOL]         } [EOL]         if (isSupported(f = chrono.weekyear())) { [EOL]             weekyear = f; [EOL]         } [EOL]         if (isSupported(f = chrono.weekyearOfCentury())) { [EOL]             weekyearOfCentury = f; [EOL]         } [EOL]         if (isSupported(f = chrono.monthOfYear())) { [EOL]             monthOfYear = f; [EOL]         } [EOL]         if (isSupported(f = chrono.year())) { [EOL]             year = f; [EOL]         } [EOL]         if (isSupported(f = chrono.yearOfEra())) { [EOL]             yearOfEra = f; [EOL]         } [EOL]         if (isSupported(f = chrono.yearOfCentury())) { [EOL]             yearOfCentury = f; [EOL]         } [EOL]         if (isSupported(f = chrono.centuryOfEra())) { [EOL]             centuryOfEra = f; [EOL]         } [EOL]         if (isSupported(f = chrono.era())) { [EOL]             era = f; [EOL]         } [EOL]     } [EOL] } <line_num>: 442,555
private static boolean isSupported(DurationField field) { [EOL]     return field == null ? false : field.isSupported(); [EOL] } <line_num>: 557,559
private static boolean isSupported(DateTimeField field) { [EOL]     return field == null ? false : field.isSupported(); [EOL] } <line_num>: 561,563
