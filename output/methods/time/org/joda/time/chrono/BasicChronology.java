BasicChronology(Chronology base, Object param, int minDaysInFirstWeek) { [EOL]     super(base, param); [EOL]     if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) { [EOL]         throw new IllegalArgumentException("Invalid min days in first week: " + minDaysInFirstWeek); [EOL]     } [EOL]     iMinDaysInFirstWeek = minDaysInFirstWeek; [EOL] } <line_num>: 130,139
HalfdayField() { [EOL]     super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField); [EOL] } <line_num>: 758,760
YearInfo(int year, long firstDayMillis) { [EOL]     iYear = year; [EOL]     iFirstDayMillis = firstDayMillis; [EOL] } <line_num>: 779,782
public DateTimeZone getZone() { [EOL]     Chronology base; [EOL]     if ((base = getBase()) != null) { [EOL]         return base.getZone(); [EOL]     } [EOL]     return DateTimeZone.UTC; [EOL] } <line_num>: 141,147
public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay) throws IllegalArgumentException { [EOL]     Chronology base; [EOL]     if ((base = getBase()) != null) { [EOL]         return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay); [EOL]     } [EOL]     FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfDay(), millisOfDay, 0, DateTimeConstants.MILLIS_PER_DAY - 1); [EOL]     return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay; [EOL] } <line_num>: 149,160
public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException { [EOL]     Chronology base; [EOL]     if ((base = getBase()) != null) { [EOL]         return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond); [EOL]     } [EOL]     FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23); [EOL]     FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59); [EOL]     FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59); [EOL]     FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999); [EOL]     return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + hourOfDay * DateTimeConstants.MILLIS_PER_HOUR + minuteOfHour * DateTimeConstants.MILLIS_PER_MINUTE + secondOfMinute * DateTimeConstants.MILLIS_PER_SECOND + millisOfSecond; [EOL] } <line_num>: 162,182
public int getMinimumDaysInFirstWeek() { [EOL]     return iMinDaysInFirstWeek; [EOL] } <line_num>: 184,186
public boolean equals(Object obj) { [EOL]     if (this == obj) { [EOL]         return true; [EOL]     } [EOL]     if (obj != null && getClass() == obj.getClass()) { [EOL]         BasicChronology chrono = (BasicChronology) obj; [EOL]         return getMinimumDaysInFirstWeek() == chrono.getMinimumDaysInFirstWeek() && getZone().equals(chrono.getZone()); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 196,206
public int hashCode() { [EOL]     return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek(); [EOL] } <line_num>: 214,216
public String toString() { [EOL]     StringBuilder sb = new StringBuilder(60); [EOL]     String name = getClass().getName(); [EOL]     int index = name.lastIndexOf('.'); [EOL]     if (index >= 0) { [EOL]         name = name.substring(index + 1); [EOL]     } [EOL]     sb.append(name); [EOL]     sb.append('['); [EOL]     DateTimeZone zone = getZone(); [EOL]     if (zone != null) { [EOL]         sb.append(zone.getID()); [EOL]     } [EOL]     if (getMinimumDaysInFirstWeek() != 4) { [EOL]         sb.append(",mdfw="); [EOL]         sb.append(getMinimumDaysInFirstWeek()); [EOL]     } [EOL]     sb.append(']'); [EOL]     return sb.toString(); [EOL] } <line_num>: 225,244
protected void assemble(Fields fields) { [EOL]     fields.millis = cMillisField; [EOL]     fields.seconds = cSecondsField; [EOL]     fields.minutes = cMinutesField; [EOL]     fields.hours = cHoursField; [EOL]     fields.halfdays = cHalfdaysField; [EOL]     fields.days = cDaysField; [EOL]     fields.weeks = cWeeksField; [EOL]     fields.millisOfSecond = cMillisOfSecondField; [EOL]     fields.millisOfDay = cMillisOfDayField; [EOL]     fields.secondOfMinute = cSecondOfMinuteField; [EOL]     fields.secondOfDay = cSecondOfDayField; [EOL]     fields.minuteOfHour = cMinuteOfHourField; [EOL]     fields.minuteOfDay = cMinuteOfDayField; [EOL]     fields.hourOfDay = cHourOfDayField; [EOL]     fields.hourOfHalfday = cHourOfHalfdayField; [EOL]     fields.clockhourOfDay = cClockhourOfDayField; [EOL]     fields.clockhourOfHalfday = cClockhourOfHalfdayField; [EOL]     fields.halfdayOfDay = cHalfdayOfDayField; [EOL]     fields.year = new BasicYearDateTimeField(this); [EOL]     fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this); [EOL]     DateTimeField field = new OffsetDateTimeField(fields.yearOfEra, 99); [EOL]     fields.centuryOfEra = new DividedDateTimeField(field, DateTimeFieldType.centuryOfEra(), 100); [EOL]     fields.centuries = fields.centuryOfEra.getDurationField(); [EOL]     field = new RemainderDateTimeField((DividedDateTimeField) fields.centuryOfEra); [EOL]     fields.yearOfCentury = new OffsetDateTimeField(field, DateTimeFieldType.yearOfCentury(), 1); [EOL]     fields.era = new GJEraDateTimeField(this); [EOL]     fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days); [EOL]     fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days); [EOL]     fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days); [EOL]     fields.monthOfYear = new GJMonthOfYearDateTimeField(this); [EOL]     fields.weekyear = new BasicWeekyearDateTimeField(this); [EOL]     fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks); [EOL]     field = new RemainderDateTimeField(fields.weekyear, fields.centuries, DateTimeFieldType.weekyearOfCentury(), 100); [EOL]     fields.weekyearOfCentury = new OffsetDateTimeField(field, DateTimeFieldType.weekyearOfCentury(), 1); [EOL]     fields.years = fields.year.getDurationField(); [EOL]     fields.months = fields.monthOfYear.getDurationField(); [EOL]     fields.weekyears = fields.weekyear.getDurationField(); [EOL] } <line_num>: 246,306
int getDaysInYearMax() { [EOL]     return 366; [EOL] } <line_num>: 314,316
int getDaysInYear(int year) { [EOL]     return isLeapYear(year) ? 366 : 365; [EOL] } <line_num>: 324,326
int getWeeksInYear(int year) { [EOL]     long firstWeekMillis1 = getFirstWeekOfYearMillis(year); [EOL]     long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1); [EOL]     return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK); [EOL] } <line_num>: 334,338
long getFirstWeekOfYearMillis(int year) { [EOL]     long jan1millis = getYearMillis(year); [EOL]     int jan1dayOfWeek = getDayOfWeek(jan1millis); [EOL]     if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) { [EOL]         return jan1millis + (8 - jan1dayOfWeek) * (long) DateTimeConstants.MILLIS_PER_DAY; [EOL]     } else { [EOL]         return jan1millis - (jan1dayOfWeek - 1) * (long) DateTimeConstants.MILLIS_PER_DAY; [EOL]     } [EOL] } <line_num>: 346,359
long getYearMillis(int year) { [EOL]     return getYearInfo(year).iFirstDayMillis; [EOL] } <line_num>: 367,369
long getYearMonthMillis(int year, int month) { [EOL]     long millis = getYearMillis(year); [EOL]     millis += getTotalMillisByYearMonth(year, month); [EOL]     return millis; [EOL] } <line_num>: 378,382
long getYearMonthDayMillis(int year, int month, int dayOfMonth) { [EOL]     long millis = getYearMillis(year); [EOL]     millis += getTotalMillisByYearMonth(year, month); [EOL]     return millis + (dayOfMonth - 1) * (long) DateTimeConstants.MILLIS_PER_DAY; [EOL] } <line_num>: 392,396
int getYear(long instant) { [EOL]     long unitMillis = getAverageMillisPerYearDividedByTwo(); [EOL]     long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo(); [EOL]     if (i2 < 0) { [EOL]         i2 = i2 - unitMillis + 1; [EOL]     } [EOL]     int year = (int) (i2 / unitMillis); [EOL]     long yearStart = getYearMillis(year); [EOL]     long diff = instant - yearStart; [EOL]     if (diff < 0) { [EOL]         year--; [EOL]     } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) { [EOL]         long oneYear; [EOL]         if (isLeapYear(year)) { [EOL]             oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L; [EOL]         } else { [EOL]             oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L; [EOL]         } [EOL]         yearStart += oneYear; [EOL]         if (yearStart <= instant) { [EOL]             year++; [EOL]         } [EOL]     } [EOL]     return year; [EOL] } <line_num>: 401,437
int getMonthOfYear(long millis) { [EOL]     return getMonthOfYear(millis, getYear(millis)); [EOL] } <line_num>: 442,444
abstract int getMonthOfYear(long millis, int year); <line_num>: 450,450
int getDayOfMonth(long millis) { [EOL]     int year = getYear(millis); [EOL]     int month = getMonthOfYear(millis, year); [EOL]     return getDayOfMonth(millis, year, month); [EOL] } <line_num>: 455,459
int getDayOfMonth(long millis, int year) { [EOL]     int month = getMonthOfYear(millis, year); [EOL]     return getDayOfMonth(millis, year, month); [EOL] } <line_num>: 465,468
int getDayOfMonth(long millis, int year, int month) { [EOL]     long dateMillis = getYearMillis(year); [EOL]     dateMillis += getTotalMillisByYearMonth(year, month); [EOL]     return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1; [EOL] } <line_num>: 475,479
int getDayOfYear(long instant) { [EOL]     return getDayOfYear(instant, getYear(instant)); [EOL] } <line_num>: 484,486
int getDayOfYear(long instant, int year) { [EOL]     long yearStart = getYearMillis(year); [EOL]     return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1; [EOL] } <line_num>: 492,495
int getWeekyear(long instant) { [EOL]     int year = getYear(instant); [EOL]     int week = getWeekOfWeekyear(instant, year); [EOL]     if (week == 1) { [EOL]         return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK); [EOL]     } else if (week > 51) { [EOL]         return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK)); [EOL]     } else { [EOL]         return year; [EOL]     } [EOL] } <line_num>: 500,510
int getWeekOfWeekyear(long instant) { [EOL]     return getWeekOfWeekyear(instant, getYear(instant)); [EOL] } <line_num>: 515,517
int getWeekOfWeekyear(long instant, int year) { [EOL]     long firstWeekMillis1 = getFirstWeekOfYearMillis(year); [EOL]     if (instant < firstWeekMillis1) { [EOL]         return getWeeksInYear(year - 1); [EOL]     } [EOL]     long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1); [EOL]     if (instant >= firstWeekMillis2) { [EOL]         return 1; [EOL]     } [EOL]     return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1; [EOL] } <line_num>: 523,533
int getDayOfWeek(long instant) { [EOL]     long daysSince19700101; [EOL]     if (instant >= 0) { [EOL]         daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY; [EOL]     } else { [EOL]         daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)) / DateTimeConstants.MILLIS_PER_DAY; [EOL]         if (daysSince19700101 < -3) { [EOL]             return 7 + (int) ((daysSince19700101 + 4) % 7); [EOL]         } [EOL]     } [EOL]     return 1 + (int) ((daysSince19700101 + 3) % 7); [EOL] } <line_num>: 538,553
int getMillisOfDay(long instant) { [EOL]     if (instant >= 0) { [EOL]         return (int) (instant % DateTimeConstants.MILLIS_PER_DAY); [EOL]     } else { [EOL]         return (DateTimeConstants.MILLIS_PER_DAY - 1) + (int) ((instant + 1) % DateTimeConstants.MILLIS_PER_DAY); [EOL]     } [EOL] } <line_num>: 558,565
int getDaysInMonthMax() { [EOL]     return 31; [EOL] } <line_num>: 572,574
int getDaysInMonthMax(long instant) { [EOL]     int thisYear = getYear(instant); [EOL]     int thisMonth = getMonthOfYear(instant, thisYear); [EOL]     return getDaysInYearMonth(thisYear, thisMonth); [EOL] } <line_num>: 582,586
int getDaysInMonthMaxForSet(long instant, int value) { [EOL]     return getDaysInMonthMax(instant); [EOL] } <line_num>: 597,599
long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) { [EOL]     FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear()); [EOL]     FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year)); [EOL]     FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear)); [EOL]     return getYearMonthDayMillis(year, monthOfYear, dayOfMonth); [EOL] } <line_num>: 610,615
abstract long getYearDifference(long minuendInstant, long subtrahendInstant); <line_num>: 624,624
abstract boolean isLeapYear(int year); <line_num>: 632,632
abstract int getDaysInYearMonth(int year, int month); <line_num>: 641,641
abstract int getDaysInMonthMax(int month); <line_num>: 649,649
abstract long getTotalMillisByYearMonth(int year, int month); <line_num>: 659,659
abstract long calculateFirstDayOfYearMillis(int year); <line_num>: 666,666
abstract int getMinYear(); <line_num>: 673,673
abstract int getMaxYear(); <line_num>: 680,680
int getMaxMonth(int year) { [EOL]     return getMaxMonth(); [EOL] } <line_num>: 689,691
int getMaxMonth() { [EOL]     return 12; [EOL] } <line_num>: 698,700
abstract long getAverageMillisPerYear(); <line_num>: 707,707
abstract long getAverageMillisPerYearDividedByTwo(); <line_num>: 714,714
abstract long getAverageMillisPerMonth(); <line_num>: 721,721
abstract long getApproxMillisAtEpochDividedByTwo(); <line_num>: 732,732
abstract long setYear(long instant, int year); <line_num>: 741,741
private YearInfo getYearInfo(int year) { [EOL]     YearInfo info = iYearInfoCache[year & CACHE_MASK]; [EOL]     if (info == null || info.iYear != year) { [EOL]         info = new YearInfo(year, calculateFirstDayOfYearMillis(year)); [EOL]         iYearInfoCache[year & CACHE_MASK] = info; [EOL]     } [EOL]     return info; [EOL] } <line_num>: 745,752
public String getAsText(int fieldValue, Locale locale) { [EOL]     return GJLocaleSymbols.forLocale(locale).halfdayValueToText(fieldValue); [EOL] } <line_num>: 762,764
public long set(long millis, String text, Locale locale) { [EOL]     return set(millis, GJLocaleSymbols.forLocale(locale).halfdayTextToValue(text)); [EOL] } <line_num>: 766,768
public int getMaximumTextLength(Locale locale) { [EOL]     return GJLocaleSymbols.forLocale(locale).getHalfdayMaxTextLength(); [EOL] } <line_num>: 770,772
