private ZonedChronology(Chronology base, DateTimeZone zone) { [EOL]     super(base, zone); [EOL] } <line_num>: 80,82
ZonedDurationField(DurationField field, DateTimeZone zone) { [EOL]     super(field.getType()); [EOL]     if (!field.isSupported()) { [EOL]         throw new IllegalArgumentException(); [EOL]     } [EOL]     iField = field; [EOL]     iTimeField = useTimeArithmetic(field); [EOL]     iZone = zone; [EOL] } <line_num>: 280,288
ZonedDateTimeField(DateTimeField field, DateTimeZone zone, DurationField durationField, DurationField rangeDurationField, DurationField leapDurationField) { [EOL]     super(field.getType()); [EOL]     if (!field.isSupported()) { [EOL]         throw new IllegalArgumentException(); [EOL]     } [EOL]     iField = field; [EOL]     iZone = zone; [EOL]     iDurationField = durationField; [EOL]     iTimeField = useTimeArithmetic(durationField); [EOL]     iRangeDurationField = rangeDurationField; [EOL]     iLeapDurationField = leapDurationField; [EOL] } <line_num>: 399,414
public static ZonedChronology getInstance(Chronology base, DateTimeZone zone) { [EOL]     if (base == null) { [EOL]         throw new IllegalArgumentException("Must supply a chronology"); [EOL]     } [EOL]     base = base.withUTC(); [EOL]     if (base == null) { [EOL]         throw new IllegalArgumentException("UTC chronology must not be null"); [EOL]     } [EOL]     if (zone == null) { [EOL]         throw new IllegalArgumentException("DateTimeZone must not be null"); [EOL]     } [EOL]     return new ZonedChronology(base, zone); [EOL] } <line_num>: 54,66
static boolean useTimeArithmetic(DurationField field) { [EOL]     return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12; [EOL] } <line_num>: 68,72
public DateTimeZone getZone() { [EOL]     return (DateTimeZone) getParam(); [EOL] } <line_num>: 84,86
public Chronology withUTC() { [EOL]     return getBase(); [EOL] } <line_num>: 88,90
public Chronology withZone(DateTimeZone zone) { [EOL]     if (zone == null) { [EOL]         zone = DateTimeZone.getDefault(); [EOL]     } [EOL]     if (zone == getParam()) { [EOL]         return this; [EOL]     } [EOL]     if (zone == DateTimeZone.UTC) { [EOL]         return getBase(); [EOL]     } [EOL]     return new ZonedChronology(getBase(), zone); [EOL] } <line_num>: 92,103
public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay) throws IllegalArgumentException { [EOL]     return localToUTC(getBase().getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay)); [EOL] } <line_num>: 105,111
public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException { [EOL]     return localToUTC(getBase().getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond)); [EOL] } <line_num>: 113,121
public long getDateTimeMillis(long instant, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException { [EOL]     return localToUTC(getBase().getDateTimeMillis(instant + getZone().getOffset(instant), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond)); [EOL] } <line_num>: 123,131
private long localToUTC(long localInstant) { [EOL]     DateTimeZone zone = getZone(); [EOL]     int offset = zone.getOffsetFromLocal(localInstant); [EOL]     localInstant -= offset; [EOL]     if (offset != zone.getOffset(localInstant)) { [EOL]         throw new IllegalInstantException(localInstant, zone.getID()); [EOL]     } [EOL]     return localInstant; [EOL] } <line_num>: 137,145
protected void assemble(Fields fields) { [EOL]     HashMap<Object, Object> converted = new HashMap<Object, Object>(); [EOL]     fields.eras = convertField(fields.eras, converted); [EOL]     fields.centuries = convertField(fields.centuries, converted); [EOL]     fields.years = convertField(fields.years, converted); [EOL]     fields.months = convertField(fields.months, converted); [EOL]     fields.weekyears = convertField(fields.weekyears, converted); [EOL]     fields.weeks = convertField(fields.weeks, converted); [EOL]     fields.days = convertField(fields.days, converted); [EOL]     fields.halfdays = convertField(fields.halfdays, converted); [EOL]     fields.hours = convertField(fields.hours, converted); [EOL]     fields.minutes = convertField(fields.minutes, converted); [EOL]     fields.seconds = convertField(fields.seconds, converted); [EOL]     fields.millis = convertField(fields.millis, converted); [EOL]     fields.year = convertField(fields.year, converted); [EOL]     fields.yearOfEra = convertField(fields.yearOfEra, converted); [EOL]     fields.yearOfCentury = convertField(fields.yearOfCentury, converted); [EOL]     fields.centuryOfEra = convertField(fields.centuryOfEra, converted); [EOL]     fields.era = convertField(fields.era, converted); [EOL]     fields.dayOfWeek = convertField(fields.dayOfWeek, converted); [EOL]     fields.dayOfMonth = convertField(fields.dayOfMonth, converted); [EOL]     fields.dayOfYear = convertField(fields.dayOfYear, converted); [EOL]     fields.monthOfYear = convertField(fields.monthOfYear, converted); [EOL]     fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted); [EOL]     fields.weekyear = convertField(fields.weekyear, converted); [EOL]     fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted); [EOL]     fields.millisOfSecond = convertField(fields.millisOfSecond, converted); [EOL]     fields.millisOfDay = convertField(fields.millisOfDay, converted); [EOL]     fields.secondOfMinute = convertField(fields.secondOfMinute, converted); [EOL]     fields.secondOfDay = convertField(fields.secondOfDay, converted); [EOL]     fields.minuteOfHour = convertField(fields.minuteOfHour, converted); [EOL]     fields.minuteOfDay = convertField(fields.minuteOfDay, converted); [EOL]     fields.hourOfDay = convertField(fields.hourOfDay, converted); [EOL]     fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted); [EOL]     fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted); [EOL]     fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted); [EOL]     fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted); [EOL] } <line_num>: 147,194
private DurationField convertField(DurationField field, HashMap<Object, Object> converted) { [EOL]     if (field == null || !field.isSupported()) { [EOL]         return field; [EOL]     } [EOL]     if (converted.containsKey(field)) { [EOL]         return (DurationField) converted.get(field); [EOL]     } [EOL]     ZonedDurationField zonedField = new ZonedDurationField(field, getZone()); [EOL]     converted.put(field, zonedField); [EOL]     return zonedField; [EOL] } <line_num>: 196,206
private DateTimeField convertField(DateTimeField field, HashMap<Object, Object> converted) { [EOL]     if (field == null || !field.isSupported()) { [EOL]         return field; [EOL]     } [EOL]     if (converted.containsKey(field)) { [EOL]         return (DateTimeField) converted.get(field); [EOL]     } [EOL]     ZonedDateTimeField zonedField = new ZonedDateTimeField(field, getZone(), convertField(field.getDurationField(), converted), convertField(field.getRangeDurationField(), converted), convertField(field.getLeapDurationField(), converted)); [EOL]     converted.put(field, zonedField); [EOL]     return zonedField; [EOL] } <line_num>: 208,222
public boolean equals(Object obj) { [EOL]     if (this == obj) { [EOL]         return true; [EOL]     } [EOL]     if (obj instanceof ZonedChronology == false) { [EOL]         return false; [EOL]     } [EOL]     ZonedChronology chrono = (ZonedChronology) obj; [EOL]     return getBase().equals(chrono.getBase()) && getZone().equals(chrono.getZone()); [EOL] } <line_num>: 233,244
public int hashCode() { [EOL]     return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7; [EOL] } <line_num>: 252,254
public String toString() { [EOL]     return "ZonedChronology[" + getBase() + ", " + getZone().getID() + ']'; [EOL] } <line_num>: 261,263
public boolean isPrecise() { [EOL]     return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed(); [EOL] } <line_num>: 290,292
public long getUnitMillis() { [EOL]     return iField.getUnitMillis(); [EOL] } <line_num>: 294,296
public int getValue(long duration, long instant) { [EOL]     return iField.getValue(duration, addOffset(instant)); [EOL] } <line_num>: 298,300
public long getValueAsLong(long duration, long instant) { [EOL]     return iField.getValueAsLong(duration, addOffset(instant)); [EOL] } <line_num>: 302,304
public long getMillis(int value, long instant) { [EOL]     return iField.getMillis(value, addOffset(instant)); [EOL] } <line_num>: 306,308
public long getMillis(long value, long instant) { [EOL]     return iField.getMillis(value, addOffset(instant)); [EOL] } <line_num>: 310,312
public long add(long instant, int value) { [EOL]     int offset = getOffsetToAdd(instant); [EOL]     instant = iField.add(instant + offset, value); [EOL]     return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant)); [EOL] } <line_num>: 314,318
public long add(long instant, long value) { [EOL]     int offset = getOffsetToAdd(instant); [EOL]     instant = iField.add(instant + offset, value); [EOL]     return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant)); [EOL] } <line_num>: 320,324
public int getDifference(long minuendInstant, long subtrahendInstant) { [EOL]     int offset = getOffsetToAdd(subtrahendInstant); [EOL]     return iField.getDifference(minuendInstant + (iTimeField ? offset : getOffsetToAdd(minuendInstant)), subtrahendInstant + offset); [EOL] } <line_num>: 326,331
public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) { [EOL]     int offset = getOffsetToAdd(subtrahendInstant); [EOL]     return iField.getDifferenceAsLong(minuendInstant + (iTimeField ? offset : getOffsetToAdd(minuendInstant)), subtrahendInstant + offset); [EOL] } <line_num>: 333,338
private int getOffsetToAdd(long instant) { [EOL]     int offset = this.iZone.getOffset(instant); [EOL]     long sum = instant + offset; [EOL]     if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) { [EOL]         throw new ArithmeticException("Adding time zone offset caused overflow"); [EOL]     } [EOL]     return offset; [EOL] } <line_num>: 340,348
private int getOffsetFromLocalToSubtract(long instant) { [EOL]     int offset = this.iZone.getOffsetFromLocal(instant); [EOL]     long diff = instant - offset; [EOL]     if ((instant ^ diff) < 0 && (instant ^ offset) < 0) { [EOL]         throw new ArithmeticException("Subtracting time zone offset caused overflow"); [EOL]     } [EOL]     return offset; [EOL] } <line_num>: 350,358
private long addOffset(long instant) { [EOL]     return iZone.convertUTCToLocal(instant); [EOL] } <line_num>: 360,362
@Override [EOL] public boolean equals(Object obj) { [EOL]     if (this == obj) { [EOL]         return true; [EOL]     } else if (obj instanceof ZonedDurationField) { [EOL]         ZonedDurationField other = (ZonedDurationField) obj; [EOL]         return iField.equals(other.iField) && iZone.equals(other.iZone); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 364,374
@Override [EOL] public int hashCode() { [EOL]     return iField.hashCode() ^ iZone.hashCode(); [EOL] } <line_num>: 376,379
public boolean isLenient() { [EOL]     return iField.isLenient(); [EOL] } <line_num>: 416,418
public int get(long instant) { [EOL]     long localInstant = iZone.convertUTCToLocal(instant); [EOL]     return iField.get(localInstant); [EOL] } <line_num>: 420,423
public String getAsText(long instant, Locale locale) { [EOL]     long localInstant = iZone.convertUTCToLocal(instant); [EOL]     return iField.getAsText(localInstant, locale); [EOL] } <line_num>: 425,428
public String getAsShortText(long instant, Locale locale) { [EOL]     long localInstant = iZone.convertUTCToLocal(instant); [EOL]     return iField.getAsShortText(localInstant, locale); [EOL] } <line_num>: 430,433
public String getAsText(int fieldValue, Locale locale) { [EOL]     return iField.getAsText(fieldValue, locale); [EOL] } <line_num>: 435,437
public String getAsShortText(int fieldValue, Locale locale) { [EOL]     return iField.getAsShortText(fieldValue, locale); [EOL] } <line_num>: 439,441
public long add(long instant, int value) { [EOL]     if (iTimeField) { [EOL]         int offset = getOffsetToAdd(instant); [EOL]         long localInstant = iField.add(instant + offset, value); [EOL]         return localInstant - offset; [EOL]     } else { [EOL]         long localInstant = iZone.convertUTCToLocal(instant); [EOL]         localInstant = iField.add(localInstant, value); [EOL]         return iZone.convertLocalToUTC(localInstant, false, instant); [EOL]     } [EOL] } <line_num>: 443,453
public long add(long instant, long value) { [EOL]     if (iTimeField) { [EOL]         int offset = getOffsetToAdd(instant); [EOL]         long localInstant = iField.add(instant + offset, value); [EOL]         return localInstant - offset; [EOL]     } else { [EOL]         long localInstant = iZone.convertUTCToLocal(instant); [EOL]         localInstant = iField.add(localInstant, value); [EOL]         return iZone.convertLocalToUTC(localInstant, false, instant); [EOL]     } [EOL] } <line_num>: 455,465
public long addWrapField(long instant, int value) { [EOL]     if (iTimeField) { [EOL]         int offset = getOffsetToAdd(instant); [EOL]         long localInstant = iField.addWrapField(instant + offset, value); [EOL]         return localInstant - offset; [EOL]     } else { [EOL]         long localInstant = iZone.convertUTCToLocal(instant); [EOL]         localInstant = iField.addWrapField(localInstant, value); [EOL]         return iZone.convertLocalToUTC(localInstant, false, instant); [EOL]     } [EOL] } <line_num>: 467,477
public long set(long instant, int value) { [EOL]     long localInstant = iZone.convertUTCToLocal(instant); [EOL]     localInstant = iField.set(localInstant, value); [EOL]     long result = iZone.convertLocalToUTC(localInstant, false, instant); [EOL]     if (get(result) != value) { [EOL]         IllegalInstantException cause = new IllegalInstantException(localInstant, iZone.getID()); [EOL]         IllegalFieldValueException ex = new IllegalFieldValueException(iField.getType(), Integer.valueOf(value), cause.getMessage()); [EOL]         ex.initCause(cause); [EOL]         throw ex; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 479,490
public long set(long instant, String text, Locale locale) { [EOL]     long localInstant = iZone.convertUTCToLocal(instant); [EOL]     localInstant = iField.set(localInstant, text, locale); [EOL]     return iZone.convertLocalToUTC(localInstant, false, instant); [EOL] } <line_num>: 492,497
public int getDifference(long minuendInstant, long subtrahendInstant) { [EOL]     int offset = getOffsetToAdd(subtrahendInstant); [EOL]     return iField.getDifference(minuendInstant + (iTimeField ? offset : getOffsetToAdd(minuendInstant)), subtrahendInstant + offset); [EOL] } <line_num>: 499,504
public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) { [EOL]     int offset = getOffsetToAdd(subtrahendInstant); [EOL]     return iField.getDifferenceAsLong(minuendInstant + (iTimeField ? offset : getOffsetToAdd(minuendInstant)), subtrahendInstant + offset); [EOL] } <line_num>: 506,511
public final DurationField getDurationField() { [EOL]     return iDurationField; [EOL] } <line_num>: 513,515
public final DurationField getRangeDurationField() { [EOL]     return iRangeDurationField; [EOL] } <line_num>: 517,519
public boolean isLeap(long instant) { [EOL]     long localInstant = iZone.convertUTCToLocal(instant); [EOL]     return iField.isLeap(localInstant); [EOL] } <line_num>: 521,524
public int getLeapAmount(long instant) { [EOL]     long localInstant = iZone.convertUTCToLocal(instant); [EOL]     return iField.getLeapAmount(localInstant); [EOL] } <line_num>: 526,529
public final DurationField getLeapDurationField() { [EOL]     return iLeapDurationField; [EOL] } <line_num>: 531,533
public long roundFloor(long instant) { [EOL]     if (iTimeField) { [EOL]         int offset = getOffsetToAdd(instant); [EOL]         instant = iField.roundFloor(instant + offset); [EOL]         return instant - offset; [EOL]     } else { [EOL]         long localInstant = iZone.convertUTCToLocal(instant); [EOL]         localInstant = iField.roundFloor(localInstant); [EOL]         return iZone.convertLocalToUTC(localInstant, false, instant); [EOL]     } [EOL] } <line_num>: 535,545
public long roundCeiling(long instant) { [EOL]     if (iTimeField) { [EOL]         int offset = getOffsetToAdd(instant); [EOL]         instant = iField.roundCeiling(instant + offset); [EOL]         return instant - offset; [EOL]     } else { [EOL]         long localInstant = iZone.convertUTCToLocal(instant); [EOL]         localInstant = iField.roundCeiling(localInstant); [EOL]         return iZone.convertLocalToUTC(localInstant, false, instant); [EOL]     } [EOL] } <line_num>: 547,557
public long remainder(long instant) { [EOL]     long localInstant = iZone.convertUTCToLocal(instant); [EOL]     return iField.remainder(localInstant); [EOL] } <line_num>: 559,562
public int getMinimumValue() { [EOL]     return iField.getMinimumValue(); [EOL] } <line_num>: 564,566
public int getMinimumValue(long instant) { [EOL]     long localInstant = iZone.convertUTCToLocal(instant); [EOL]     return iField.getMinimumValue(localInstant); [EOL] } <line_num>: 568,571
public int getMinimumValue(ReadablePartial instant) { [EOL]     return iField.getMinimumValue(instant); [EOL] } <line_num>: 573,575
public int getMinimumValue(ReadablePartial instant, int[] values) { [EOL]     return iField.getMinimumValue(instant, values); [EOL] } <line_num>: 577,579
public int getMaximumValue() { [EOL]     return iField.getMaximumValue(); [EOL] } <line_num>: 581,583
public int getMaximumValue(long instant) { [EOL]     long localInstant = iZone.convertUTCToLocal(instant); [EOL]     return iField.getMaximumValue(localInstant); [EOL] } <line_num>: 585,588
public int getMaximumValue(ReadablePartial instant) { [EOL]     return iField.getMaximumValue(instant); [EOL] } <line_num>: 590,592
public int getMaximumValue(ReadablePartial instant, int[] values) { [EOL]     return iField.getMaximumValue(instant, values); [EOL] } <line_num>: 594,596
public int getMaximumTextLength(Locale locale) { [EOL]     return iField.getMaximumTextLength(locale); [EOL] } <line_num>: 598,600
public int getMaximumShortTextLength(Locale locale) { [EOL]     return iField.getMaximumShortTextLength(locale); [EOL] } <line_num>: 602,604
private int getOffsetToAdd(long instant) { [EOL]     int offset = this.iZone.getOffset(instant); [EOL]     long sum = instant + offset; [EOL]     if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) { [EOL]         throw new ArithmeticException("Adding time zone offset caused overflow"); [EOL]     } [EOL]     return offset; [EOL] } <line_num>: 606,614
@Override [EOL] public boolean equals(Object obj) { [EOL]     if (this == obj) { [EOL]         return true; [EOL]     } else if (obj instanceof ZonedDateTimeField) { [EOL]         ZonedDateTimeField other = (ZonedDateTimeField) obj; [EOL]         return iField.equals(other.iField) && iZone.equals(other.iZone) && iDurationField.equals(other.iDurationField) && iRangeDurationField.equals(other.iRangeDurationField); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 616,628
@Override [EOL] public int hashCode() { [EOL]     return iField.hashCode() ^ iZone.hashCode(); [EOL] } <line_num>: 630,633
