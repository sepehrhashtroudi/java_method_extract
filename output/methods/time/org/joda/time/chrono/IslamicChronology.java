IslamicChronology(Chronology base, Object param, LeapYearPatternType leapYears) { [EOL]     super(base, param, 4); [EOL]     this.iLeapYears = leapYears; [EOL] } <line_num>: 228,231
LeapYearPatternType(int index, int pattern) { [EOL]     super(); [EOL]     this.index = (byte) index; [EOL]     this.pattern = pattern; [EOL] } <line_num>: 528,532
public static IslamicChronology getInstanceUTC() { [EOL]     return INSTANCE_UTC; [EOL] } <line_num>: 161,163
public static IslamicChronology getInstance() { [EOL]     return getInstance(DateTimeZone.getDefault(), LEAP_YEAR_16_BASED); [EOL] } <line_num>: 170,172
public static IslamicChronology getInstance(DateTimeZone zone) { [EOL]     return getInstance(zone, LEAP_YEAR_16_BASED); [EOL] } <line_num>: 180,182
public static IslamicChronology getInstance(DateTimeZone zone, LeapYearPatternType leapYears) { [EOL]     if (zone == null) { [EOL]         zone = DateTimeZone.getDefault(); [EOL]     } [EOL]     IslamicChronology chrono; [EOL]     synchronized (cCache) { [EOL]         IslamicChronology[] chronos = cCache.get(zone); [EOL]         if (chronos == null) { [EOL]             chronos = new IslamicChronology[4]; [EOL]             cCache.put(zone, chronos); [EOL]         } [EOL]         chrono = chronos[leapYears.index]; [EOL]         if (chrono == null) { [EOL]             if (zone == DateTimeZone.UTC) { [EOL]                 chrono = new IslamicChronology(null, null, leapYears); [EOL]                 DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono); [EOL]                 chrono = new IslamicChronology(LimitChronology.getInstance(chrono, lowerLimit, null), null, leapYears); [EOL]             } else { [EOL]                 chrono = getInstance(DateTimeZone.UTC, leapYears); [EOL]                 chrono = new IslamicChronology(ZonedChronology.getInstance(chrono, zone), null, leapYears); [EOL]             } [EOL]             chronos[leapYears.index] = chrono; [EOL]         } [EOL]     } [EOL]     return chrono; [EOL] } <line_num>: 191,221
private Object readResolve() { [EOL]     Chronology base = getBase(); [EOL]     return base == null ? getInstanceUTC() : getInstance(base.getZone()); [EOL] } <line_num>: 236,239
public LeapYearPatternType getLeapYearPatternType() { [EOL]     return iLeapYears; [EOL] } <line_num>: 247,249
public Chronology withUTC() { [EOL]     return INSTANCE_UTC; [EOL] } <line_num>: 258,260
public Chronology withZone(DateTimeZone zone) { [EOL]     if (zone == null) { [EOL]         zone = DateTimeZone.getDefault(); [EOL]     } [EOL]     if (zone == getZone()) { [EOL]         return this; [EOL]     } [EOL]     return getInstance(zone); [EOL] } <line_num>: 268,276
public boolean equals(Object obj) { [EOL]     if (this == obj) { [EOL]         return true; [EOL]     } [EOL]     if (obj instanceof IslamicChronology) { [EOL]         IslamicChronology chrono = (IslamicChronology) obj; [EOL]         return getLeapYearPatternType().index == chrono.getLeapYearPatternType().index && super.equals(obj); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 286,296
public int hashCode() { [EOL]     return super.hashCode() * 13 + getLeapYearPatternType().hashCode(); [EOL] } <line_num>: 304,306
int getYear(long instant) { [EOL]     long millisIslamic = instant - MILLIS_YEAR_1; [EOL]     long cycles = millisIslamic / MILLIS_PER_CYCLE; [EOL]     long cycleRemainder = millisIslamic % MILLIS_PER_CYCLE; [EOL]     int year = (int) ((cycles * CYCLE) + 1L); [EOL]     long yearMillis = (isLeapYear(year) ? MILLIS_PER_LONG_YEAR : MILLIS_PER_SHORT_YEAR); [EOL]     while (cycleRemainder >= yearMillis) { [EOL]         cycleRemainder -= yearMillis; [EOL]         yearMillis = (isLeapYear(++year) ? MILLIS_PER_LONG_YEAR : MILLIS_PER_SHORT_YEAR); [EOL]     } [EOL]     return year; [EOL] } <line_num>: 309,321
long setYear(long instant, int year) { [EOL]     int thisYear = getYear(instant); [EOL]     int dayOfYear = getDayOfYear(instant, thisYear); [EOL]     int millisOfDay = getMillisOfDay(instant); [EOL]     if (dayOfYear > 354) { [EOL]         if (!isLeapYear(year)) { [EOL]             dayOfYear--; [EOL]         } [EOL]     } [EOL]     instant = getYearMonthDayMillis(year, 1, dayOfYear); [EOL]     instant += millisOfDay; [EOL]     return instant; [EOL] } <line_num>: 323,340
long getYearDifference(long minuendInstant, long subtrahendInstant) { [EOL]     int minuendYear = getYear(minuendInstant); [EOL]     int subtrahendYear = getYear(subtrahendInstant); [EOL]     long minuendRem = minuendInstant - getYearMillis(minuendYear); [EOL]     long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear); [EOL]     int difference = minuendYear - subtrahendYear; [EOL]     if (minuendRem < subtrahendRem) { [EOL]         difference--; [EOL]     } [EOL]     return difference; [EOL] } <line_num>: 343,357
long getTotalMillisByYearMonth(int year, int month) { [EOL]     if (--month % 2 == 1) { [EOL]         month /= 2; [EOL]         return month * MILLIS_PER_MONTH_PAIR + MILLIS_PER_LONG_MONTH; [EOL]     } else { [EOL]         month /= 2; [EOL]         return month * MILLIS_PER_MONTH_PAIR; [EOL]     } [EOL] } <line_num>: 360,368
int getDayOfMonth(long millis) { [EOL]     int doy = getDayOfYear(millis) - 1; [EOL]     if (doy == 354) { [EOL]         return 30; [EOL]     } [EOL]     return (doy % MONTH_PAIR_LENGTH) % LONG_MONTH_LENGTH + 1; [EOL] } <line_num>: 371,378
boolean isLeapYear(int year) { [EOL]     return iLeapYears.isLeapYear(year); [EOL] } <line_num>: 381,383
int getDaysInYearMax() { [EOL]     return 355; [EOL] } <line_num>: 386,388
int getDaysInYear(int year) { [EOL]     return isLeapYear(year) ? 355 : 354; [EOL] } <line_num>: 391,393
int getDaysInYearMonth(int year, int month) { [EOL]     if (month == 12 && isLeapYear(year)) { [EOL]         return LONG_MONTH_LENGTH; [EOL]     } [EOL]     return (--month % 2 == 0 ? LONG_MONTH_LENGTH : SHORT_MONTH_LENGTH); [EOL] } <line_num>: 396,401
int getDaysInMonthMax() { [EOL]     return LONG_MONTH_LENGTH; [EOL] } <line_num>: 404,406
int getDaysInMonthMax(int month) { [EOL]     if (month == 12) { [EOL]         return LONG_MONTH_LENGTH; [EOL]     } [EOL]     return (--month % 2 == 0 ? LONG_MONTH_LENGTH : SHORT_MONTH_LENGTH); [EOL] } <line_num>: 409,414
int getMonthOfYear(long millis, int year) { [EOL]     int doyZeroBased = (int) ((millis - getYearMillis(year)) / DateTimeConstants.MILLIS_PER_DAY); [EOL]     if (doyZeroBased == 354) { [EOL]         return 12; [EOL]     } [EOL]     return ((doyZeroBased * 2) / MONTH_PAIR_LENGTH) + 1; [EOL] } <line_num>: 417,428
long getAverageMillisPerYear() { [EOL]     return MILLIS_PER_YEAR; [EOL] } <line_num>: 431,433
long getAverageMillisPerYearDividedByTwo() { [EOL]     return MILLIS_PER_YEAR / 2; [EOL] } <line_num>: 436,438
long getAverageMillisPerMonth() { [EOL]     return MILLIS_PER_MONTH; [EOL] } <line_num>: 441,443
long calculateFirstDayOfYearMillis(int year) { [EOL]     if (year > MAX_YEAR) { [EOL]         throw new ArithmeticException("Year is too large: " + year + " > " + MAX_YEAR); [EOL]     } [EOL]     if (year < MIN_YEAR) { [EOL]         throw new ArithmeticException("Year is too small: " + year + " < " + MIN_YEAR); [EOL]     } [EOL]     year--; [EOL]     long cycle = year / CYCLE; [EOL]     long millis = MILLIS_YEAR_1 + cycle * MILLIS_PER_CYCLE; [EOL]     int cycleRemainder = (year % CYCLE) + 1; [EOL]     for (int i = 1; i < cycleRemainder; i++) { [EOL]         millis += (isLeapYear(i) ? MILLIS_PER_LONG_YEAR : MILLIS_PER_SHORT_YEAR); [EOL]     } [EOL]     return millis; [EOL] } <line_num>: 446,468
int getMinYear() { [EOL]     return 1; [EOL] } <line_num>: 471,473
int getMaxYear() { [EOL]     return MAX_YEAR; [EOL] } <line_num>: 476,478
long getApproxMillisAtEpochDividedByTwo() { [EOL]     return (-MILLIS_YEAR_1) / 2; [EOL] } <line_num>: 481,484
protected void assemble(Fields fields) { [EOL]     if (getBase() == null) { [EOL]         super.assemble(fields); [EOL]         fields.era = ERA_FIELD; [EOL]         fields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 12); [EOL]         fields.months = fields.monthOfYear.getDurationField(); [EOL]     } [EOL] } <line_num>: 487,495
boolean isLeapYear(int year) { [EOL]     int key = 1 << (year % 30); [EOL]     return ((pattern & key) > 0); [EOL] } <line_num>: 539,542
private Object readResolve() { [EOL]     switch(index) { [EOL]         case 0: [EOL]             return LEAP_YEAR_15_BASED; [EOL]         case 1: [EOL]             return LEAP_YEAR_16_BASED; [EOL]         case 2: [EOL]             return LEAP_YEAR_INDIAN; [EOL]         case 3: [EOL]             return LEAP_YEAR_HABASH_AL_HASIB; [EOL]         default: [EOL]             return this; [EOL]     } [EOL] } <line_num>: 548,561
@Override [EOL] public boolean equals(Object obj) { [EOL]     if (obj instanceof LeapYearPatternType) { [EOL]         return index == ((LeapYearPatternType) obj).index; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 563,569
@Override [EOL] public int hashCode() { [EOL]     return index; [EOL] } <line_num>: 571,574
