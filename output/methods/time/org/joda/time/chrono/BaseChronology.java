protected BaseChronology() { [EOL]     super(); [EOL] } <line_num>: 53,55
public abstract DateTimeZone getZone(); <line_num>: 63,63
public abstract Chronology withUTC(); <line_num>: 72,72
public abstract Chronology withZone(DateTimeZone zone); <line_num>: 81,81
public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay) throws IllegalArgumentException { [EOL]     long instant = year().set(0, year); [EOL]     instant = monthOfYear().set(instant, monthOfYear); [EOL]     instant = dayOfMonth().set(instant, dayOfMonth); [EOL]     return millisOfDay().set(instant, millisOfDay); [EOL] } <line_num>: 98,106
public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException { [EOL]     long instant = year().set(0, year); [EOL]     instant = monthOfYear().set(instant, monthOfYear); [EOL]     instant = dayOfMonth().set(instant, dayOfMonth); [EOL]     instant = hourOfDay().set(instant, hourOfDay); [EOL]     instant = minuteOfHour().set(instant, minuteOfHour); [EOL]     instant = secondOfMinute().set(instant, secondOfMinute); [EOL]     return millisOfSecond().set(instant, millisOfSecond); [EOL] } <line_num>: 127,139
public long getDateTimeMillis(long instant, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException { [EOL]     instant = hourOfDay().set(instant, hourOfDay); [EOL]     instant = minuteOfHour().set(instant, minuteOfHour); [EOL]     instant = secondOfMinute().set(instant, secondOfMinute); [EOL]     return millisOfSecond().set(instant, millisOfSecond); [EOL] } <line_num>: 158,167
public void validate(ReadablePartial partial, int[] values) { [EOL]     int size = partial.size(); [EOL]     for (int i = 0; i < size; i++) { [EOL]         int value = values[i]; [EOL]         DateTimeField field = partial.getField(i); [EOL]         if (value < field.getMinimumValue()) { [EOL]             throw new IllegalFieldValueException(field.getType(), Integer.valueOf(value), Integer.valueOf(field.getMinimumValue()), null); [EOL]         } [EOL]         if (value > field.getMaximumValue()) { [EOL]             throw new IllegalFieldValueException(field.getType(), Integer.valueOf(value), null, Integer.valueOf(field.getMaximumValue())); [EOL]         } [EOL]     } [EOL]     for (int i = 0; i < size; i++) { [EOL]         int value = values[i]; [EOL]         DateTimeField field = partial.getField(i); [EOL]         if (value < field.getMinimumValue(partial, values)) { [EOL]             throw new IllegalFieldValueException(field.getType(), Integer.valueOf(value), Integer.valueOf(field.getMinimumValue(partial, values)), null); [EOL]         } [EOL]         if (value > field.getMaximumValue(partial, values)) { [EOL]             throw new IllegalFieldValueException(field.getType(), Integer.valueOf(value), null, Integer.valueOf(field.getMaximumValue(partial, values))); [EOL]         } [EOL]     } [EOL] } <line_num>: 180,213
public int[] get(ReadablePartial partial, long instant) { [EOL]     int size = partial.size(); [EOL]     int[] values = new int[size]; [EOL]     for (int i = 0; i < size; i++) { [EOL]         values[i] = partial.getFieldType(i).getField(this).get(instant); [EOL]     } [EOL]     return values; [EOL] } <line_num>: 222,229
public long set(ReadablePartial partial, long instant) { [EOL]     for (int i = 0, isize = partial.size(); i < isize; i++) { [EOL]         instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i)); [EOL]     } [EOL]     return instant; [EOL] } <line_num>: 238,243
public int[] get(ReadablePeriod period, long startInstant, long endInstant) { [EOL]     int size = period.size(); [EOL]     int[] values = new int[size]; [EOL]     if (startInstant != endInstant) { [EOL]         for (int i = 0; i < size; i++) { [EOL]             DurationField field = period.getFieldType(i).getField(this); [EOL]             int value = field.getDifference(endInstant, startInstant); [EOL]             startInstant = field.add(startInstant, value); [EOL]             values[i] = value; [EOL]         } [EOL]     } [EOL]     return values; [EOL] } <line_num>: 254,266
public int[] get(ReadablePeriod period, long duration) { [EOL]     int size = period.size(); [EOL]     int[] values = new int[size]; [EOL]     if (duration != 0) { [EOL]         long current = 0; [EOL]         for (int i = 0; i < size; i++) { [EOL]             DurationField field = period.getFieldType(i).getField(this); [EOL]             if (field.isPrecise()) { [EOL]                 int value = field.getDifference(duration, current); [EOL]                 current = field.add(current, value); [EOL]                 values[i] = value; [EOL]             } [EOL]         } [EOL]     } [EOL]     return values; [EOL] } <line_num>: 275,290
public long add(ReadablePeriod period, long instant, int scalar) { [EOL]     if (scalar != 0 && period != null) { [EOL]         for (int i = 0, isize = period.size(); i < isize; i++) { [EOL]             long value = period.getValue(i); [EOL]             if (value != 0) { [EOL]                 instant = period.getFieldType(i).getField(this).add(instant, value * scalar); [EOL]             } [EOL]         } [EOL]     } [EOL]     return instant; [EOL] } <line_num>: 300,310
public long add(long instant, long duration, int scalar) { [EOL]     if (duration == 0 || scalar == 0) { [EOL]         return instant; [EOL]     } [EOL]     long add = FieldUtils.safeMultiply(duration, scalar); [EOL]     return FieldUtils.safeAdd(instant, add); [EOL] } <line_num>: 321,327
public DurationField millis() { [EOL]     return UnsupportedDurationField.getInstance(DurationFieldType.millis()); [EOL] } <line_num>: 336,338
public DateTimeField millisOfSecond() { [EOL]     return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis()); [EOL] } <line_num>: 345,347
public DateTimeField millisOfDay() { [EOL]     return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis()); [EOL] } <line_num>: 354,356
public DurationField seconds() { [EOL]     return UnsupportedDurationField.getInstance(DurationFieldType.seconds()); [EOL] } <line_num>: 365,367
public DateTimeField secondOfMinute() { [EOL]     return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds()); [EOL] } <line_num>: 374,376
public DateTimeField secondOfDay() { [EOL]     return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds()); [EOL] } <line_num>: 383,385
public DurationField minutes() { [EOL]     return UnsupportedDurationField.getInstance(DurationFieldType.minutes()); [EOL] } <line_num>: 394,396
public DateTimeField minuteOfHour() { [EOL]     return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes()); [EOL] } <line_num>: 403,405
public DateTimeField minuteOfDay() { [EOL]     return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes()); [EOL] } <line_num>: 412,414
public DurationField hours() { [EOL]     return UnsupportedDurationField.getInstance(DurationFieldType.hours()); [EOL] } <line_num>: 423,425
public DateTimeField hourOfDay() { [EOL]     return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours()); [EOL] } <line_num>: 432,434
public DateTimeField clockhourOfDay() { [EOL]     return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours()); [EOL] } <line_num>: 441,443
public DurationField halfdays() { [EOL]     return UnsupportedDurationField.getInstance(DurationFieldType.halfdays()); [EOL] } <line_num>: 452,454
public DateTimeField hourOfHalfday() { [EOL]     return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours()); [EOL] } <line_num>: 461,463
public DateTimeField clockhourOfHalfday() { [EOL]     return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours()); [EOL] } <line_num>: 470,472
public DateTimeField halfdayOfDay() { [EOL]     return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays()); [EOL] } <line_num>: 479,481
public DurationField days() { [EOL]     return UnsupportedDurationField.getInstance(DurationFieldType.days()); [EOL] } <line_num>: 490,492
public DateTimeField dayOfWeek() { [EOL]     return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days()); [EOL] } <line_num>: 503,505
public DateTimeField dayOfMonth() { [EOL]     return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days()); [EOL] } <line_num>: 512,514
public DateTimeField dayOfYear() { [EOL]     return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days()); [EOL] } <line_num>: 521,523
public DurationField weeks() { [EOL]     return UnsupportedDurationField.getInstance(DurationFieldType.weeks()); [EOL] } <line_num>: 532,534
public DateTimeField weekOfWeekyear() { [EOL]     return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks()); [EOL] } <line_num>: 541,543
public DurationField weekyears() { [EOL]     return UnsupportedDurationField.getInstance(DurationFieldType.weekyears()); [EOL] } <line_num>: 552,554
public DateTimeField weekyear() { [EOL]     return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears()); [EOL] } <line_num>: 561,563
public DateTimeField weekyearOfCentury() { [EOL]     return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears()); [EOL] } <line_num>: 570,572
public DurationField months() { [EOL]     return UnsupportedDurationField.getInstance(DurationFieldType.months()); [EOL] } <line_num>: 581,583
public DateTimeField monthOfYear() { [EOL]     return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months()); [EOL] } <line_num>: 590,592
public DurationField years() { [EOL]     return UnsupportedDurationField.getInstance(DurationFieldType.years()); [EOL] } <line_num>: 601,603
public DateTimeField year() { [EOL]     return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years()); [EOL] } <line_num>: 610,612
public DateTimeField yearOfEra() { [EOL]     return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years()); [EOL] } <line_num>: 619,621
public DateTimeField yearOfCentury() { [EOL]     return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years()); [EOL] } <line_num>: 628,630
public DurationField centuries() { [EOL]     return UnsupportedDurationField.getInstance(DurationFieldType.centuries()); [EOL] } <line_num>: 639,641
public DateTimeField centuryOfEra() { [EOL]     return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries()); [EOL] } <line_num>: 648,650
public DurationField eras() { [EOL]     return UnsupportedDurationField.getInstance(DurationFieldType.eras()); [EOL] } <line_num>: 659,661
public DateTimeField era() { [EOL]     return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras()); [EOL] } <line_num>: 668,670
public abstract String toString(); <line_num>: 678,678
