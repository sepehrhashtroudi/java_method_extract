protected DateTimeFieldType(String name) { [EOL]     super(); [EOL]     iName = name; [EOL] } <line_num>: 152,155
StandardDateTimeFieldType(String name, byte ordinal, DurationFieldType unitType, DurationFieldType rangeType) { [EOL]     super(name); [EOL]     iOrdinal = ordinal; [EOL]     iUnitType = unitType; [EOL]     iRangeType = rangeType; [EOL] } <line_num>: 442,448
public static DateTimeFieldType millisOfSecond() { [EOL]     return MILLIS_OF_SECOND_TYPE; [EOL] } <line_num>: 163,165
public static DateTimeFieldType millisOfDay() { [EOL]     return MILLIS_OF_DAY_TYPE; [EOL] } <line_num>: 172,174
public static DateTimeFieldType secondOfMinute() { [EOL]     return SECOND_OF_MINUTE_TYPE; [EOL] } <line_num>: 181,183
public static DateTimeFieldType secondOfDay() { [EOL]     return SECOND_OF_DAY_TYPE; [EOL] } <line_num>: 190,192
public static DateTimeFieldType minuteOfHour() { [EOL]     return MINUTE_OF_HOUR_TYPE; [EOL] } <line_num>: 199,201
public static DateTimeFieldType minuteOfDay() { [EOL]     return MINUTE_OF_DAY_TYPE; [EOL] } <line_num>: 208,210
public static DateTimeFieldType hourOfDay() { [EOL]     return HOUR_OF_DAY_TYPE; [EOL] } <line_num>: 217,219
public static DateTimeFieldType clockhourOfDay() { [EOL]     return CLOCKHOUR_OF_DAY_TYPE; [EOL] } <line_num>: 226,228
public static DateTimeFieldType hourOfHalfday() { [EOL]     return HOUR_OF_HALFDAY_TYPE; [EOL] } <line_num>: 235,237
public static DateTimeFieldType clockhourOfHalfday() { [EOL]     return CLOCKHOUR_OF_HALFDAY_TYPE; [EOL] } <line_num>: 244,246
public static DateTimeFieldType halfdayOfDay() { [EOL]     return HALFDAY_OF_DAY_TYPE; [EOL] } <line_num>: 253,255
public static DateTimeFieldType dayOfWeek() { [EOL]     return DAY_OF_WEEK_TYPE; [EOL] } <line_num>: 263,265
public static DateTimeFieldType dayOfMonth() { [EOL]     return DAY_OF_MONTH_TYPE; [EOL] } <line_num>: 272,274
public static DateTimeFieldType dayOfYear() { [EOL]     return DAY_OF_YEAR_TYPE; [EOL] } <line_num>: 281,283
public static DateTimeFieldType weekOfWeekyear() { [EOL]     return WEEK_OF_WEEKYEAR_TYPE; [EOL] } <line_num>: 290,292
public static DateTimeFieldType weekyear() { [EOL]     return WEEKYEAR_TYPE; [EOL] } <line_num>: 299,301
public static DateTimeFieldType weekyearOfCentury() { [EOL]     return WEEKYEAR_OF_CENTURY_TYPE; [EOL] } <line_num>: 308,310
public static DateTimeFieldType monthOfYear() { [EOL]     return MONTH_OF_YEAR_TYPE; [EOL] } <line_num>: 317,319
public static DateTimeFieldType year() { [EOL]     return YEAR_TYPE; [EOL] } <line_num>: 326,328
public static DateTimeFieldType yearOfEra() { [EOL]     return YEAR_OF_ERA_TYPE; [EOL] } <line_num>: 335,337
public static DateTimeFieldType yearOfCentury() { [EOL]     return YEAR_OF_CENTURY_TYPE; [EOL] } <line_num>: 344,346
public static DateTimeFieldType centuryOfEra() { [EOL]     return CENTURY_OF_ERA_TYPE; [EOL] } <line_num>: 353,355
public static DateTimeFieldType era() { [EOL]     return ERA_TYPE; [EOL] } <line_num>: 362,364
public String getName() { [EOL]     return iName; [EOL] } <line_num>: 377,379
public abstract DurationFieldType getDurationType(); <line_num>: 386,386
public abstract DurationFieldType getRangeDurationType(); <line_num>: 393,393
public abstract DateTimeField getField(Chronology chronology); <line_num>: 401,401
public boolean isSupported(Chronology chronology) { [EOL]     return getField(chronology).isSupported(); [EOL] } <line_num>: 409,411
public String toString() { [EOL]     return getName(); [EOL] } <line_num>: 418,420
public DurationFieldType getDurationType() { [EOL]     return iUnitType; [EOL] } <line_num>: 451,453
public DurationFieldType getRangeDurationType() { [EOL]     return iRangeType; [EOL] } <line_num>: 456,458
@Override [EOL] public boolean equals(Object obj) { [EOL]     if (this == obj) { [EOL]         return true; [EOL]     } [EOL]     if (obj instanceof StandardDateTimeFieldType) { [EOL]         return iOrdinal == ((StandardDateTimeFieldType) obj).iOrdinal; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 461,470
@Override [EOL] public int hashCode() { [EOL]     return (1 << iOrdinal); [EOL] } <line_num>: 473,476
public DateTimeField getField(Chronology chronology) { [EOL]     chronology = DateTimeUtils.getChronology(chronology); [EOL]     switch(iOrdinal) { [EOL]         case ERA: [EOL]             return chronology.era(); [EOL]         case YEAR_OF_ERA: [EOL]             return chronology.yearOfEra(); [EOL]         case CENTURY_OF_ERA: [EOL]             return chronology.centuryOfEra(); [EOL]         case YEAR_OF_CENTURY: [EOL]             return chronology.yearOfCentury(); [EOL]         case YEAR: [EOL]             return chronology.year(); [EOL]         case DAY_OF_YEAR: [EOL]             return chronology.dayOfYear(); [EOL]         case MONTH_OF_YEAR: [EOL]             return chronology.monthOfYear(); [EOL]         case DAY_OF_MONTH: [EOL]             return chronology.dayOfMonth(); [EOL]         case WEEKYEAR_OF_CENTURY: [EOL]             return chronology.weekyearOfCentury(); [EOL]         case WEEKYEAR: [EOL]             return chronology.weekyear(); [EOL]         case WEEK_OF_WEEKYEAR: [EOL]             return chronology.weekOfWeekyear(); [EOL]         case DAY_OF_WEEK: [EOL]             return chronology.dayOfWeek(); [EOL]         case HALFDAY_OF_DAY: [EOL]             return chronology.halfdayOfDay(); [EOL]         case HOUR_OF_HALFDAY: [EOL]             return chronology.hourOfHalfday(); [EOL]         case CLOCKHOUR_OF_HALFDAY: [EOL]             return chronology.clockhourOfHalfday(); [EOL]         case CLOCKHOUR_OF_DAY: [EOL]             return chronology.clockhourOfDay(); [EOL]         case HOUR_OF_DAY: [EOL]             return chronology.hourOfDay(); [EOL]         case MINUTE_OF_DAY: [EOL]             return chronology.minuteOfDay(); [EOL]         case MINUTE_OF_HOUR: [EOL]             return chronology.minuteOfHour(); [EOL]         case SECOND_OF_DAY: [EOL]             return chronology.secondOfDay(); [EOL]         case SECOND_OF_MINUTE: [EOL]             return chronology.secondOfMinute(); [EOL]         case MILLIS_OF_DAY: [EOL]             return chronology.millisOfDay(); [EOL]         case MILLIS_OF_SECOND: [EOL]             return chronology.millisOfSecond(); [EOL]         default: [EOL]             throw new InternalError(); [EOL]     } [EOL] } <line_num>: 479,533
private Object readResolve() { [EOL]     switch(iOrdinal) { [EOL]         case ERA: [EOL]             return ERA_TYPE; [EOL]         case YEAR_OF_ERA: [EOL]             return YEAR_OF_ERA_TYPE; [EOL]         case CENTURY_OF_ERA: [EOL]             return CENTURY_OF_ERA_TYPE; [EOL]         case YEAR_OF_CENTURY: [EOL]             return YEAR_OF_CENTURY_TYPE; [EOL]         case YEAR: [EOL]             return YEAR_TYPE; [EOL]         case DAY_OF_YEAR: [EOL]             return DAY_OF_YEAR_TYPE; [EOL]         case MONTH_OF_YEAR: [EOL]             return MONTH_OF_YEAR_TYPE; [EOL]         case DAY_OF_MONTH: [EOL]             return DAY_OF_MONTH_TYPE; [EOL]         case WEEKYEAR_OF_CENTURY: [EOL]             return WEEKYEAR_OF_CENTURY_TYPE; [EOL]         case WEEKYEAR: [EOL]             return WEEKYEAR_TYPE; [EOL]         case WEEK_OF_WEEKYEAR: [EOL]             return WEEK_OF_WEEKYEAR_TYPE; [EOL]         case DAY_OF_WEEK: [EOL]             return DAY_OF_WEEK_TYPE; [EOL]         case HALFDAY_OF_DAY: [EOL]             return HALFDAY_OF_DAY_TYPE; [EOL]         case HOUR_OF_HALFDAY: [EOL]             return HOUR_OF_HALFDAY_TYPE; [EOL]         case CLOCKHOUR_OF_HALFDAY: [EOL]             return CLOCKHOUR_OF_HALFDAY_TYPE; [EOL]         case CLOCKHOUR_OF_DAY: [EOL]             return CLOCKHOUR_OF_DAY_TYPE; [EOL]         case HOUR_OF_DAY: [EOL]             return HOUR_OF_DAY_TYPE; [EOL]         case MINUTE_OF_DAY: [EOL]             return MINUTE_OF_DAY_TYPE; [EOL]         case MINUTE_OF_HOUR: [EOL]             return MINUTE_OF_HOUR_TYPE; [EOL]         case SECOND_OF_DAY: [EOL]             return SECOND_OF_DAY_TYPE; [EOL]         case SECOND_OF_MINUTE: [EOL]             return SECOND_OF_MINUTE_TYPE; [EOL]         case MILLIS_OF_DAY: [EOL]             return MILLIS_OF_DAY_TYPE; [EOL]         case MILLIS_OF_SECOND: [EOL]             return MILLIS_OF_SECOND_TYPE; [EOL]         default: [EOL]             return this; [EOL]     } [EOL] } <line_num>: 540,592
