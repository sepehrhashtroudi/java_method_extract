public HexTest(String name) { [EOL]     super(name); [EOL] } <line_num>: 37,39
public void testDecodeArrayOddCharacters() { [EOL]     try { [EOL]         new Hex().decode(new byte[] { 65 }); [EOL]         fail("An exception wasn't thrown when trying to decode an odd number of characters"); [EOL]     } catch (DecoderException e) { [EOL]     } [EOL] } <line_num>: 41,49
public void testDecodeBadCharacterPos0() { [EOL]     try { [EOL]         new Hex().decode("q0"); [EOL]         fail("An exception wasn't thrown when trying to decode an illegal character"); [EOL]     } catch (DecoderException e) { [EOL]     } [EOL] } <line_num>: 51,59
public void testDecodeBadCharacterPos1() { [EOL]     try { [EOL]         new Hex().decode("0q"); [EOL]         fail("An exception wasn't thrown when trying to decode an illegal character"); [EOL]     } catch (DecoderException e) { [EOL]     } [EOL] } <line_num>: 61,69
public void testDecodeClassCastException() { [EOL]     try { [EOL]         new Hex().decode(new int[] { 65 }); [EOL]         fail("An exception wasn't thrown when trying to decode."); [EOL]     } catch (DecoderException e) { [EOL]     } [EOL] } <line_num>: 71,79
public void testDecodeHexOddCharacters() { [EOL]     try { [EOL]         Hex.decodeHex(new char[] { 'A' }); [EOL]         fail("An exception wasn't thrown when trying to decode an odd number of characters"); [EOL]     } catch (DecoderException e) { [EOL]     } [EOL] } <line_num>: 81,89
public void testDecodeStringOddCharacters() { [EOL]     try { [EOL]         new Hex().decode("6"); [EOL]         fail("An exception wasn't thrown when trying to decode an odd number of characters"); [EOL]     } catch (DecoderException e) { [EOL]     } [EOL] } <line_num>: 91,99
public void testDencodeEmpty() throws DecoderException { [EOL]     assertTrue(Arrays.equals(new byte[0], Hex.decodeHex(new char[0]))); [EOL]     assertTrue(Arrays.equals(new byte[0], new Hex().decode(new byte[0]))); [EOL]     assertTrue(Arrays.equals(new byte[0], (byte[]) new Hex().decode(""))); [EOL] } <line_num>: 101,105
public void testEncodeClassCastException() { [EOL]     try { [EOL]         new Hex().encode(new int[] { 65 }); [EOL]         fail("An exception wasn't thrown when trying to encode."); [EOL]     } catch (EncoderException e) { [EOL]     } [EOL] } <line_num>: 107,115
public void testEncodeDecodeRandom() throws DecoderException, EncoderException { [EOL]     Random random = new Random(); [EOL]     Hex hex = new Hex(); [EOL]     for (int i = 5; i > 0; i--) { [EOL]         byte[] data = new byte[random.nextInt(10000) + 1]; [EOL]         random.nextBytes(data); [EOL]         char[] encodedChars = Hex.encodeHex(data); [EOL]         byte[] decodedBytes = Hex.decodeHex(encodedChars); [EOL]         assertTrue(Arrays.equals(data, decodedBytes)); [EOL]         byte[] encodedStringBytes = hex.encode(data); [EOL]         decodedBytes = hex.decode(encodedStringBytes); [EOL]         assertTrue(Arrays.equals(data, decodedBytes)); [EOL]         String dataString = new String(encodedChars); [EOL]         char[] encodedStringChars = (char[]) hex.encode(dataString); [EOL]         decodedBytes = (byte[]) hex.decode(encodedStringChars); [EOL]         assertTrue(Arrays.equals(dataString.getBytes(), decodedBytes)); [EOL]         dataString = new String(encodedChars); [EOL]         encodedStringChars = (char[]) hex.encode(dataString); [EOL]         decodedBytes = (byte[]) hex.decode(new String(encodedStringChars)); [EOL]         assertTrue(Arrays.equals(dataString.getBytes(), decodedBytes)); [EOL]     } [EOL] } <line_num>: 117,147
public void testEncodeEmpty() throws EncoderException { [EOL]     assertTrue(Arrays.equals(new char[0], Hex.encodeHex(new byte[0]))); [EOL]     assertTrue(Arrays.equals(new byte[0], new Hex().encode(new byte[0]))); [EOL]     assertTrue(Arrays.equals(new char[0], (char[]) new Hex().encode(""))); [EOL] } <line_num>: 149,153
public void testEncodeZeroes() { [EOL]     char[] c = Hex.encodeHex(new byte[36]); [EOL]     assertEquals("000000000000000000000000000000000000" + "000000000000000000000000000000000000", new String(c)); [EOL] } <line_num>: 155,161
public void testHelloWorld() { [EOL]     byte[] b = "Hello World".getBytes(); [EOL]     char[] c = Hex.encodeHex(b); [EOL]     assertEquals("48656c6c6f20576f726c64", new String(c)); [EOL] } <line_num>: 163,167
