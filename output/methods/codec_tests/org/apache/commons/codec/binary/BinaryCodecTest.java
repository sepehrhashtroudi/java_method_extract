public BinaryCodecTest(String arg0) { [EOL]     super(arg0); [EOL] } <line_num>: 80,82
protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     this.instance = new BinaryCodec(); [EOL] } <line_num>: 62,65
protected void tearDown() throws Exception { [EOL]     super.tearDown(); [EOL]     this.instance = null; [EOL] } <line_num>: 70,73
public void testDecodeObjectException() { [EOL]     try { [EOL]         this.instance.decode(new Object()); [EOL]     } catch (DecoderException e) { [EOL]         return; [EOL]     } [EOL]     fail("Expected DecoderException"); [EOL] } <line_num>: 92,100
public void testDecodeObject() throws Exception { [EOL]     byte[] bits; [EOL]     bits = new byte[1]; [EOL]     assertDecodeObject(bits, "00000000"); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0; [EOL]     assertDecodeObject(bits, "00000001"); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1; [EOL]     assertDecodeObject(bits, "00000011"); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2; [EOL]     assertDecodeObject(bits, "00000111"); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3; [EOL]     assertDecodeObject(bits, "00001111"); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4; [EOL]     assertDecodeObject(bits, "00011111"); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5; [EOL]     assertDecodeObject(bits, "00111111"); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6; [EOL]     assertDecodeObject(bits, "01111111"); [EOL]     bits = new byte[1]; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     assertDecodeObject(bits, "11111111"); [EOL]     bits = new byte[2]; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     assertDecodeObject(bits, "0000000011111111"); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     assertDecodeObject(bits, "0000000111111111"); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     assertDecodeObject(bits, "0000001111111111"); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     assertDecodeObject(bits, "0000011111111111"); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     assertDecodeObject(bits, "0000111111111111"); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     assertDecodeObject(bits, "0001111111111111"); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     assertDecodeObject(bits, "0011111111111111"); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     assertDecodeObject(bits, "0111111111111111"); [EOL]     bits = new byte[2]; [EOL]     bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     assertDecodeObject(bits, "1111111111111111"); [EOL]     assertDecodeObject(new byte[0], null); [EOL] } <line_num>: 105,171
void assertDecodeObject(byte[] bits, String encodeMe) throws DecoderException { [EOL]     byte[] decoded; [EOL]     decoded = (byte[]) instance.decode(encodeMe); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     if (encodeMe == null) { [EOL]         decoded = instance.decode((byte[]) null); [EOL]     } else { [EOL]         decoded = (byte[]) instance.decode((Object) encodeMe.getBytes()); [EOL]     } [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     if (encodeMe == null) { [EOL]         decoded = (byte[]) instance.decode((char[]) null); [EOL]     } else { [EOL]         decoded = (byte[]) instance.decode(encodeMe.toCharArray()); [EOL]     } [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL] } <line_num>: 186,202
public void testDecodebyteArray() { [EOL]     byte[] bits = new byte[1]; [EOL]     byte[] decoded = instance.decode("00000000".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0; [EOL]     decoded = instance.decode("00000001".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1; [EOL]     decoded = instance.decode("00000011".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2; [EOL]     decoded = instance.decode("00000111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3; [EOL]     decoded = instance.decode("00001111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4; [EOL]     decoded = instance.decode("00011111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5; [EOL]     decoded = instance.decode("00111111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6; [EOL]     decoded = instance.decode("01111111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = instance.decode("11111111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = instance.decode("0000000011111111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = instance.decode("0000000111111111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = instance.decode("0000001111111111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = instance.decode("0000011111111111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = instance.decode("0000111111111111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = instance.decode("0001111111111111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = instance.decode("0011111111111111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = instance.decode("0111111111111111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = instance.decode("1111111111111111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL] } <line_num>: 207,289
public void testToByteArrayFromString() { [EOL]     byte[] bits = new byte[1]; [EOL]     byte[] decoded = instance.toByteArray("00000000"); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0; [EOL]     decoded = instance.toByteArray("00000001"); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1; [EOL]     decoded = instance.toByteArray("00000011"); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2; [EOL]     decoded = instance.toByteArray("00000111"); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3; [EOL]     decoded = instance.toByteArray("00001111"); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4; [EOL]     decoded = instance.toByteArray("00011111"); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5; [EOL]     decoded = instance.toByteArray("00111111"); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6; [EOL]     decoded = instance.toByteArray("01111111"); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = instance.toByteArray("11111111"); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = instance.toByteArray("0000000011111111"); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = instance.toByteArray("0000000111111111"); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = instance.toByteArray("0000001111111111"); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = instance.toByteArray("0000011111111111"); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = instance.toByteArray("0000111111111111"); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = instance.toByteArray("0001111111111111"); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = instance.toByteArray("0011111111111111"); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = instance.toByteArray("0111111111111111"); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = instance.toByteArray("1111111111111111"); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     assertEquals(0, instance.toByteArray((String) null).length); [EOL] } <line_num>: 299,382
public void testFromAsciicharArray() { [EOL]     byte[] bits = new byte[1]; [EOL]     byte[] decoded = BinaryCodec.fromAscii("00000000".toCharArray()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0; [EOL]     decoded = BinaryCodec.fromAscii("00000001".toCharArray()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1; [EOL]     decoded = BinaryCodec.fromAscii("00000011".toCharArray()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2; [EOL]     decoded = BinaryCodec.fromAscii("00000111".toCharArray()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3; [EOL]     decoded = BinaryCodec.fromAscii("00001111".toCharArray()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4; [EOL]     decoded = BinaryCodec.fromAscii("00011111".toCharArray()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5; [EOL]     decoded = BinaryCodec.fromAscii("00111111".toCharArray()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6; [EOL]     decoded = BinaryCodec.fromAscii("01111111".toCharArray()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = BinaryCodec.fromAscii("11111111".toCharArray()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = BinaryCodec.fromAscii("0000000011111111".toCharArray()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = BinaryCodec.fromAscii("0000000111111111".toCharArray()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = BinaryCodec.fromAscii("0000001111111111".toCharArray()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = BinaryCodec.fromAscii("0000011111111111".toCharArray()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = BinaryCodec.fromAscii("0000111111111111".toCharArray()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = BinaryCodec.fromAscii("0001111111111111".toCharArray()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = BinaryCodec.fromAscii("0011111111111111".toCharArray()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = BinaryCodec.fromAscii("0111111111111111".toCharArray()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = BinaryCodec.fromAscii("1111111111111111".toCharArray()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     assertEquals(0, BinaryCodec.fromAscii((char[]) null).length); [EOL] } <line_num>: 392,475
public void testFromAsciibyteArray() { [EOL]     byte[] bits = new byte[1]; [EOL]     byte[] decoded = BinaryCodec.fromAscii("00000000".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0; [EOL]     decoded = BinaryCodec.fromAscii("00000001".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1; [EOL]     decoded = BinaryCodec.fromAscii("00000011".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2; [EOL]     decoded = BinaryCodec.fromAscii("00000111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3; [EOL]     decoded = BinaryCodec.fromAscii("00001111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4; [EOL]     decoded = BinaryCodec.fromAscii("00011111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5; [EOL]     decoded = BinaryCodec.fromAscii("00111111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6; [EOL]     decoded = BinaryCodec.fromAscii("01111111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[1]; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = BinaryCodec.fromAscii("11111111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = BinaryCodec.fromAscii("0000000011111111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = BinaryCodec.fromAscii("0000000111111111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = BinaryCodec.fromAscii("0000001111111111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = BinaryCodec.fromAscii("0000011111111111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = BinaryCodec.fromAscii("0000111111111111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = BinaryCodec.fromAscii("0001111111111111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = BinaryCodec.fromAscii("0011111111111111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = BinaryCodec.fromAscii("0111111111111111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     bits = new byte[2]; [EOL]     bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     decoded = BinaryCodec.fromAscii("1111111111111111".getBytes()); [EOL]     assertEquals(new String(bits), new String(decoded)); [EOL]     assertEquals(0, BinaryCodec.fromAscii((byte[]) null).length); [EOL] } <line_num>: 485,568
public void testEncodebyteArray() { [EOL]     byte[] bits = new byte[1]; [EOL]     String l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("00000000", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0; [EOL]     l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("00000001", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1; [EOL]     l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("00000011", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2; [EOL]     l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("00000111", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3; [EOL]     l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("00001111", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4; [EOL]     l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("00011111", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5; [EOL]     l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("00111111", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6; [EOL]     l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("01111111", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("11111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("0000000000000000", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0; [EOL]     l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("0000000000000001", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1; [EOL]     l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("0000000000000011", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2; [EOL]     l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("0000000000000111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3; [EOL]     l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("0000000000001111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4; [EOL]     l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("0000000000011111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5; [EOL]     l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("0000000000111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6; [EOL]     l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("0000000001111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("0000000011111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("0000000111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("0000001111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("0000011111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("0000111111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("0001111111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("0011111111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("0111111111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(instance.encode(bits)); [EOL]     assertEquals("1111111111111111", l_encoded); [EOL]     assertEquals(0, instance.encode((byte[]) null).length); [EOL] } <line_num>: 578,693
public void testToAsciiBytes() { [EOL]     byte[] bits = new byte[1]; [EOL]     String l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("00000000", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0; [EOL]     l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("00000001", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1; [EOL]     l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("00000011", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2; [EOL]     l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("00000111", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3; [EOL]     l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("00001111", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4; [EOL]     l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("00011111", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5; [EOL]     l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("00111111", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6; [EOL]     l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("01111111", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("11111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("0000000000000000", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0; [EOL]     l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("0000000000000001", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1; [EOL]     l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("0000000000000011", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2; [EOL]     l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("0000000000000111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3; [EOL]     l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("0000000000001111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4; [EOL]     l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("0000000000011111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5; [EOL]     l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("0000000000111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6; [EOL]     l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("0000000001111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("0000000011111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("0000000111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("0000001111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("0000011111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("0000111111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("0001111111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("0011111111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("0111111111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(BinaryCodec.toAsciiBytes(bits)); [EOL]     assertEquals("1111111111111111", l_encoded); [EOL]     assertEquals(0, BinaryCodec.toAsciiBytes((byte[]) null).length); [EOL] } <line_num>: 700,815
public void testToAsciiChars() { [EOL]     byte[] bits = new byte[1]; [EOL]     String l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("00000000", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0; [EOL]     l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("00000001", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1; [EOL]     l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("00000011", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2; [EOL]     l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("00000111", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3; [EOL]     l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("00001111", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4; [EOL]     l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("00011111", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5; [EOL]     l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("00111111", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6; [EOL]     l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("01111111", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("11111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("0000000000000000", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0; [EOL]     l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("0000000000000001", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1; [EOL]     l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("0000000000000011", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2; [EOL]     l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("0000000000000111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3; [EOL]     l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("0000000000001111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4; [EOL]     l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("0000000000011111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5; [EOL]     l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("0000000000111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6; [EOL]     l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("0000000001111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("0000000011111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("0000000111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("0000001111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("0000011111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("0000111111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("0001111111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("0011111111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("0111111111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String(BinaryCodec.toAsciiChars(bits)); [EOL]     assertEquals("1111111111111111", l_encoded); [EOL]     assertEquals(0, BinaryCodec.toAsciiChars((byte[]) null).length); [EOL] } <line_num>: 822,937
public void testToAsciiString() { [EOL]     byte[] bits = new byte[1]; [EOL]     String l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("00000000", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0; [EOL]     l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("00000001", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1; [EOL]     l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("00000011", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2; [EOL]     l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("00000111", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3; [EOL]     l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("00001111", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4; [EOL]     l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("00011111", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5; [EOL]     l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("00111111", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6; [EOL]     l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("01111111", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("11111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("0000000000000000", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0; [EOL]     l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("0000000000000001", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1; [EOL]     l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("0000000000000011", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2; [EOL]     l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("0000000000000111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3; [EOL]     l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("0000000000001111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4; [EOL]     l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("0000000000011111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5; [EOL]     l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("0000000000111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6; [EOL]     l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("0000000001111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("0000000011111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("0000000111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("0000001111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("0000011111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("0000111111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("0001111111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("0011111111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("0111111111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = BinaryCodec.toAsciiString(bits); [EOL]     assertEquals("1111111111111111", l_encoded); [EOL] } <line_num>: 947,1061
public void testEncodeObjectNull() throws Exception { [EOL]     Object obj = new byte[0]; [EOL]     assertEquals(0, ((char[]) instance.encode(obj)).length); [EOL] } <line_num>: 1071,1074
public void testEncodeObjectException() { [EOL]     try { [EOL]         instance.encode(""); [EOL]     } catch (EncoderException e) { [EOL]         return; [EOL]     } [EOL]     fail("Expected EncoderException"); [EOL] } <line_num>: 1079,1087
public void testEncodeObject() throws Exception { [EOL]     byte[] bits = new byte[1]; [EOL]     String l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("00000000", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0; [EOL]     l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("00000001", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1; [EOL]     l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("00000011", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2; [EOL]     l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("00000111", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3; [EOL]     l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("00001111", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4; [EOL]     l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("00011111", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5; [EOL]     l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("00111111", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6; [EOL]     l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("01111111", l_encoded); [EOL]     bits = new byte[1]; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("11111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("0000000000000000", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0; [EOL]     l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("0000000000000001", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1; [EOL]     l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("0000000000000011", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2; [EOL]     l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("0000000000000111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3; [EOL]     l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("0000000000001111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4; [EOL]     l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("0000000000011111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5; [EOL]     l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("0000000000111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6; [EOL]     l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("0000000001111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("0000000011111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("0000000111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("0000001111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("0000011111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("0000111111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("0001111111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("0011111111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("0111111111111111", l_encoded); [EOL]     bits = new byte[2]; [EOL]     bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7); [EOL]     l_encoded = new String((char[]) instance.encode((Object) bits)); [EOL]     assertEquals("1111111111111111", l_encoded); [EOL] } <line_num>: 1092,1206
