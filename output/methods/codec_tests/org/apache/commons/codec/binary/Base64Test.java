public Base64Test(String name) { [EOL]     super(name); [EOL] } <line_num>: 37,39
public void testBase64() { [EOL]     String content = "Hello World"; [EOL]     String encodedContent; [EOL]     encodedContent = new String(Base64.encodeBase64(content.getBytes())); [EOL]     assertTrue("encoding hello world", encodedContent.equals("SGVsbG8gV29ybGQ=")); [EOL] } <line_num>: 45,50
public void testDecodePadMarkerIndex2() { [EOL]     assertEquals("A", new String(Base64.decodeBase64("QQ==".getBytes()))); [EOL] } <line_num>: 55,57
public void testDecodePadMarkerIndex3() { [EOL]     assertEquals("AA", new String(Base64.decodeBase64("QUE=".getBytes()))); [EOL]     assertEquals("AAA", new String(Base64.decodeBase64("QUFB".getBytes()))); [EOL] } <line_num>: 62,65
public void testDecodePadOnly() { [EOL]     assertTrue(Base64.decodeBase64("====".getBytes()).length == 0); [EOL]     assertEquals("", new String(Base64.decodeBase64("====".getBytes()))); [EOL] } <line_num>: 67,70
public void testDecodePadOnlyChunked() { [EOL]     assertTrue(Base64.decodeBase64("====\n".getBytes()).length == 0); [EOL]     assertEquals("", new String(Base64.decodeBase64("====\n".getBytes()))); [EOL] } <line_num>: 72,75
public void testEncodeDecodeSmall() { [EOL]     for (int i = 0; i < 12; i++) { [EOL]         byte[] data = new byte[i]; [EOL]         this.getRandom().nextBytes(data); [EOL]         byte[] enc = Base64.encodeBase64(data); [EOL]         assertTrue("\"" + (new String(enc)) + "\" is Base64 data.", Base64.isArrayByteBase64(enc)); [EOL]         byte[] data2 = Base64.decodeBase64(enc); [EOL]         assertTrue(toString(data) + " equals " + toString(data2), Arrays.equals(data, data2)); [EOL]     } [EOL] } <line_num>: 78,87
public void testEncodeDecodeRandom() { [EOL]     for (int i = 1; i < 5; i++) { [EOL]         byte[] data = new byte[this.getRandom().nextInt(10000) + 1]; [EOL]         this.getRandom().nextBytes(data); [EOL]         byte[] enc = Base64.encodeBase64(data); [EOL]         assertTrue(Base64.isArrayByteBase64(enc)); [EOL]         byte[] data2 = Base64.decodeBase64(enc); [EOL]         assertTrue(Arrays.equals(data, data2)); [EOL]     } [EOL] } <line_num>: 90,99
public void testRfc2045Section2Dot1CrLfDefinition() { [EOL]     assertTrue(Arrays.equals(new byte[] { 13, 10 }, Base64.CHUNK_SEPARATOR)); [EOL] } <line_num>: 104,106
public void testRfc2045Section6Dot8ChunkSizeDefinition() { [EOL]     assertEquals(76, Base64.CHUNK_SIZE); [EOL] } <line_num>: 111,113
public void testSingletons() { [EOL]     assertEquals("AA==", new String(Base64.encodeBase64(new byte[] { (byte) 0 }))); [EOL]     assertEquals("AQ==", new String(Base64.encodeBase64(new byte[] { (byte) 1 }))); [EOL]     assertEquals("Ag==", new String(Base64.encodeBase64(new byte[] { (byte) 2 }))); [EOL]     assertEquals("Aw==", new String(Base64.encodeBase64(new byte[] { (byte) 3 }))); [EOL]     assertEquals("BA==", new String(Base64.encodeBase64(new byte[] { (byte) 4 }))); [EOL]     assertEquals("BQ==", new String(Base64.encodeBase64(new byte[] { (byte) 5 }))); [EOL]     assertEquals("Bg==", new String(Base64.encodeBase64(new byte[] { (byte) 6 }))); [EOL]     assertEquals("Bw==", new String(Base64.encodeBase64(new byte[] { (byte) 7 }))); [EOL]     assertEquals("CA==", new String(Base64.encodeBase64(new byte[] { (byte) 8 }))); [EOL]     assertEquals("CQ==", new String(Base64.encodeBase64(new byte[] { (byte) 9 }))); [EOL]     assertEquals("Cg==", new String(Base64.encodeBase64(new byte[] { (byte) 10 }))); [EOL]     assertEquals("Cw==", new String(Base64.encodeBase64(new byte[] { (byte) 11 }))); [EOL]     assertEquals("DA==", new String(Base64.encodeBase64(new byte[] { (byte) 12 }))); [EOL]     assertEquals("DQ==", new String(Base64.encodeBase64(new byte[] { (byte) 13 }))); [EOL]     assertEquals("Dg==", new String(Base64.encodeBase64(new byte[] { (byte) 14 }))); [EOL]     assertEquals("Dw==", new String(Base64.encodeBase64(new byte[] { (byte) 15 }))); [EOL]     assertEquals("EA==", new String(Base64.encodeBase64(new byte[] { (byte) 16 }))); [EOL]     assertEquals("EQ==", new String(Base64.encodeBase64(new byte[] { (byte) 17 }))); [EOL]     assertEquals("Eg==", new String(Base64.encodeBase64(new byte[] { (byte) 18 }))); [EOL]     assertEquals("Ew==", new String(Base64.encodeBase64(new byte[] { (byte) 19 }))); [EOL]     assertEquals("FA==", new String(Base64.encodeBase64(new byte[] { (byte) 20 }))); [EOL]     assertEquals("FQ==", new String(Base64.encodeBase64(new byte[] { (byte) 21 }))); [EOL]     assertEquals("Fg==", new String(Base64.encodeBase64(new byte[] { (byte) 22 }))); [EOL]     assertEquals("Fw==", new String(Base64.encodeBase64(new byte[] { (byte) 23 }))); [EOL]     assertEquals("GA==", new String(Base64.encodeBase64(new byte[] { (byte) 24 }))); [EOL]     assertEquals("GQ==", new String(Base64.encodeBase64(new byte[] { (byte) 25 }))); [EOL]     assertEquals("Gg==", new String(Base64.encodeBase64(new byte[] { (byte) 26 }))); [EOL]     assertEquals("Gw==", new String(Base64.encodeBase64(new byte[] { (byte) 27 }))); [EOL]     assertEquals("HA==", new String(Base64.encodeBase64(new byte[] { (byte) 28 }))); [EOL]     assertEquals("HQ==", new String(Base64.encodeBase64(new byte[] { (byte) 29 }))); [EOL]     assertEquals("Hg==", new String(Base64.encodeBase64(new byte[] { (byte) 30 }))); [EOL]     assertEquals("Hw==", new String(Base64.encodeBase64(new byte[] { (byte) 31 }))); [EOL]     assertEquals("IA==", new String(Base64.encodeBase64(new byte[] { (byte) 32 }))); [EOL]     assertEquals("IQ==", new String(Base64.encodeBase64(new byte[] { (byte) 33 }))); [EOL]     assertEquals("Ig==", new String(Base64.encodeBase64(new byte[] { (byte) 34 }))); [EOL]     assertEquals("Iw==", new String(Base64.encodeBase64(new byte[] { (byte) 35 }))); [EOL]     assertEquals("JA==", new String(Base64.encodeBase64(new byte[] { (byte) 36 }))); [EOL]     assertEquals("JQ==", new String(Base64.encodeBase64(new byte[] { (byte) 37 }))); [EOL]     assertEquals("Jg==", new String(Base64.encodeBase64(new byte[] { (byte) 38 }))); [EOL]     assertEquals("Jw==", new String(Base64.encodeBase64(new byte[] { (byte) 39 }))); [EOL]     assertEquals("KA==", new String(Base64.encodeBase64(new byte[] { (byte) 40 }))); [EOL]     assertEquals("KQ==", new String(Base64.encodeBase64(new byte[] { (byte) 41 }))); [EOL]     assertEquals("Kg==", new String(Base64.encodeBase64(new byte[] { (byte) 42 }))); [EOL]     assertEquals("Kw==", new String(Base64.encodeBase64(new byte[] { (byte) 43 }))); [EOL]     assertEquals("LA==", new String(Base64.encodeBase64(new byte[] { (byte) 44 }))); [EOL]     assertEquals("LQ==", new String(Base64.encodeBase64(new byte[] { (byte) 45 }))); [EOL]     assertEquals("Lg==", new String(Base64.encodeBase64(new byte[] { (byte) 46 }))); [EOL]     assertEquals("Lw==", new String(Base64.encodeBase64(new byte[] { (byte) 47 }))); [EOL]     assertEquals("MA==", new String(Base64.encodeBase64(new byte[] { (byte) 48 }))); [EOL]     assertEquals("MQ==", new String(Base64.encodeBase64(new byte[] { (byte) 49 }))); [EOL]     assertEquals("Mg==", new String(Base64.encodeBase64(new byte[] { (byte) 50 }))); [EOL]     assertEquals("Mw==", new String(Base64.encodeBase64(new byte[] { (byte) 51 }))); [EOL]     assertEquals("NA==", new String(Base64.encodeBase64(new byte[] { (byte) 52 }))); [EOL]     assertEquals("NQ==", new String(Base64.encodeBase64(new byte[] { (byte) 53 }))); [EOL]     assertEquals("Ng==", new String(Base64.encodeBase64(new byte[] { (byte) 54 }))); [EOL]     assertEquals("Nw==", new String(Base64.encodeBase64(new byte[] { (byte) 55 }))); [EOL]     assertEquals("OA==", new String(Base64.encodeBase64(new byte[] { (byte) 56 }))); [EOL]     assertEquals("OQ==", new String(Base64.encodeBase64(new byte[] { (byte) 57 }))); [EOL]     assertEquals("Og==", new String(Base64.encodeBase64(new byte[] { (byte) 58 }))); [EOL]     assertEquals("Ow==", new String(Base64.encodeBase64(new byte[] { (byte) 59 }))); [EOL]     assertEquals("PA==", new String(Base64.encodeBase64(new byte[] { (byte) 60 }))); [EOL]     assertEquals("PQ==", new String(Base64.encodeBase64(new byte[] { (byte) 61 }))); [EOL]     assertEquals("Pg==", new String(Base64.encodeBase64(new byte[] { (byte) 62 }))); [EOL]     assertEquals("Pw==", new String(Base64.encodeBase64(new byte[] { (byte) 63 }))); [EOL]     assertEquals("QA==", new String(Base64.encodeBase64(new byte[] { (byte) 64 }))); [EOL]     assertEquals("QQ==", new String(Base64.encodeBase64(new byte[] { (byte) 65 }))); [EOL]     assertEquals("Qg==", new String(Base64.encodeBase64(new byte[] { (byte) 66 }))); [EOL]     assertEquals("Qw==", new String(Base64.encodeBase64(new byte[] { (byte) 67 }))); [EOL]     assertEquals("RA==", new String(Base64.encodeBase64(new byte[] { (byte) 68 }))); [EOL]     assertEquals("RQ==", new String(Base64.encodeBase64(new byte[] { (byte) 69 }))); [EOL]     assertEquals("Rg==", new String(Base64.encodeBase64(new byte[] { (byte) 70 }))); [EOL]     assertEquals("Rw==", new String(Base64.encodeBase64(new byte[] { (byte) 71 }))); [EOL]     assertEquals("SA==", new String(Base64.encodeBase64(new byte[] { (byte) 72 }))); [EOL]     assertEquals("SQ==", new String(Base64.encodeBase64(new byte[] { (byte) 73 }))); [EOL]     assertEquals("Sg==", new String(Base64.encodeBase64(new byte[] { (byte) 74 }))); [EOL]     assertEquals("Sw==", new String(Base64.encodeBase64(new byte[] { (byte) 75 }))); [EOL]     assertEquals("TA==", new String(Base64.encodeBase64(new byte[] { (byte) 76 }))); [EOL]     assertEquals("TQ==", new String(Base64.encodeBase64(new byte[] { (byte) 77 }))); [EOL]     assertEquals("Tg==", new String(Base64.encodeBase64(new byte[] { (byte) 78 }))); [EOL]     assertEquals("Tw==", new String(Base64.encodeBase64(new byte[] { (byte) 79 }))); [EOL]     assertEquals("UA==", new String(Base64.encodeBase64(new byte[] { (byte) 80 }))); [EOL]     assertEquals("UQ==", new String(Base64.encodeBase64(new byte[] { (byte) 81 }))); [EOL]     assertEquals("Ug==", new String(Base64.encodeBase64(new byte[] { (byte) 82 }))); [EOL]     assertEquals("Uw==", new String(Base64.encodeBase64(new byte[] { (byte) 83 }))); [EOL]     assertEquals("VA==", new String(Base64.encodeBase64(new byte[] { (byte) 84 }))); [EOL]     assertEquals("VQ==", new String(Base64.encodeBase64(new byte[] { (byte) 85 }))); [EOL]     assertEquals("Vg==", new String(Base64.encodeBase64(new byte[] { (byte) 86 }))); [EOL]     assertEquals("Vw==", new String(Base64.encodeBase64(new byte[] { (byte) 87 }))); [EOL]     assertEquals("WA==", new String(Base64.encodeBase64(new byte[] { (byte) 88 }))); [EOL]     assertEquals("WQ==", new String(Base64.encodeBase64(new byte[] { (byte) 89 }))); [EOL]     assertEquals("Wg==", new String(Base64.encodeBase64(new byte[] { (byte) 90 }))); [EOL]     assertEquals("Ww==", new String(Base64.encodeBase64(new byte[] { (byte) 91 }))); [EOL]     assertEquals("XA==", new String(Base64.encodeBase64(new byte[] { (byte) 92 }))); [EOL]     assertEquals("XQ==", new String(Base64.encodeBase64(new byte[] { (byte) 93 }))); [EOL]     assertEquals("Xg==", new String(Base64.encodeBase64(new byte[] { (byte) 94 }))); [EOL]     assertEquals("Xw==", new String(Base64.encodeBase64(new byte[] { (byte) 95 }))); [EOL]     assertEquals("YA==", new String(Base64.encodeBase64(new byte[] { (byte) 96 }))); [EOL]     assertEquals("YQ==", new String(Base64.encodeBase64(new byte[] { (byte) 97 }))); [EOL]     assertEquals("Yg==", new String(Base64.encodeBase64(new byte[] { (byte) 98 }))); [EOL]     assertEquals("Yw==", new String(Base64.encodeBase64(new byte[] { (byte) 99 }))); [EOL]     assertEquals("ZA==", new String(Base64.encodeBase64(new byte[] { (byte) 100 }))); [EOL]     assertEquals("ZQ==", new String(Base64.encodeBase64(new byte[] { (byte) 101 }))); [EOL]     assertEquals("Zg==", new String(Base64.encodeBase64(new byte[] { (byte) 102 }))); [EOL]     assertEquals("Zw==", new String(Base64.encodeBase64(new byte[] { (byte) 103 }))); [EOL]     assertEquals("aA==", new String(Base64.encodeBase64(new byte[] { (byte) 104 }))); [EOL] } <line_num>: 115,221
public void testSingletonsChunked() { [EOL]     assertEquals("AA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0 }))); [EOL]     assertEquals("AQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 1 }))); [EOL]     assertEquals("Ag==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 2 }))); [EOL]     assertEquals("Aw==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 3 }))); [EOL]     assertEquals("BA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 4 }))); [EOL]     assertEquals("BQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 5 }))); [EOL]     assertEquals("Bg==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 6 }))); [EOL]     assertEquals("Bw==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 7 }))); [EOL]     assertEquals("CA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 8 }))); [EOL]     assertEquals("CQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 9 }))); [EOL]     assertEquals("Cg==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 10 }))); [EOL]     assertEquals("Cw==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 11 }))); [EOL]     assertEquals("DA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 12 }))); [EOL]     assertEquals("DQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 13 }))); [EOL]     assertEquals("Dg==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 14 }))); [EOL]     assertEquals("Dw==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 15 }))); [EOL]     assertEquals("EA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 16 }))); [EOL]     assertEquals("EQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 17 }))); [EOL]     assertEquals("Eg==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 18 }))); [EOL]     assertEquals("Ew==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 19 }))); [EOL]     assertEquals("FA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 20 }))); [EOL]     assertEquals("FQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 21 }))); [EOL]     assertEquals("Fg==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 22 }))); [EOL]     assertEquals("Fw==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 23 }))); [EOL]     assertEquals("GA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 24 }))); [EOL]     assertEquals("GQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 25 }))); [EOL]     assertEquals("Gg==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 26 }))); [EOL]     assertEquals("Gw==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 27 }))); [EOL]     assertEquals("HA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 28 }))); [EOL]     assertEquals("HQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 29 }))); [EOL]     assertEquals("Hg==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 30 }))); [EOL]     assertEquals("Hw==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 31 }))); [EOL]     assertEquals("IA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 32 }))); [EOL]     assertEquals("IQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 33 }))); [EOL]     assertEquals("Ig==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 34 }))); [EOL]     assertEquals("Iw==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 35 }))); [EOL]     assertEquals("JA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 36 }))); [EOL]     assertEquals("JQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 37 }))); [EOL]     assertEquals("Jg==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 38 }))); [EOL]     assertEquals("Jw==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 39 }))); [EOL]     assertEquals("KA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 40 }))); [EOL]     assertEquals("KQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 41 }))); [EOL]     assertEquals("Kg==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 42 }))); [EOL]     assertEquals("Kw==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 43 }))); [EOL]     assertEquals("LA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 44 }))); [EOL]     assertEquals("LQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 45 }))); [EOL]     assertEquals("Lg==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 46 }))); [EOL]     assertEquals("Lw==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 47 }))); [EOL]     assertEquals("MA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 48 }))); [EOL]     assertEquals("MQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 49 }))); [EOL]     assertEquals("Mg==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 50 }))); [EOL]     assertEquals("Mw==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 51 }))); [EOL]     assertEquals("NA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 52 }))); [EOL]     assertEquals("NQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 53 }))); [EOL]     assertEquals("Ng==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 54 }))); [EOL]     assertEquals("Nw==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 55 }))); [EOL]     assertEquals("OA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 56 }))); [EOL]     assertEquals("OQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 57 }))); [EOL]     assertEquals("Og==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 58 }))); [EOL]     assertEquals("Ow==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 59 }))); [EOL]     assertEquals("PA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 60 }))); [EOL]     assertEquals("PQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 61 }))); [EOL]     assertEquals("Pg==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 62 }))); [EOL]     assertEquals("Pw==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 63 }))); [EOL]     assertEquals("QA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 64 }))); [EOL]     assertEquals("QQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 65 }))); [EOL]     assertEquals("Qg==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 66 }))); [EOL]     assertEquals("Qw==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 67 }))); [EOL]     assertEquals("RA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 68 }))); [EOL]     assertEquals("RQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 69 }))); [EOL]     assertEquals("Rg==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 70 }))); [EOL]     assertEquals("Rw==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 71 }))); [EOL]     assertEquals("SA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 72 }))); [EOL]     assertEquals("SQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 73 }))); [EOL]     assertEquals("Sg==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 74 }))); [EOL]     assertEquals("Sw==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 75 }))); [EOL]     assertEquals("TA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 76 }))); [EOL]     assertEquals("TQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 77 }))); [EOL]     assertEquals("Tg==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 78 }))); [EOL]     assertEquals("Tw==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 79 }))); [EOL]     assertEquals("UA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 80 }))); [EOL]     assertEquals("UQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 81 }))); [EOL]     assertEquals("Ug==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 82 }))); [EOL]     assertEquals("Uw==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 83 }))); [EOL]     assertEquals("VA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 84 }))); [EOL]     assertEquals("VQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 85 }))); [EOL]     assertEquals("Vg==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 86 }))); [EOL]     assertEquals("Vw==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 87 }))); [EOL]     assertEquals("WA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 88 }))); [EOL]     assertEquals("WQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 89 }))); [EOL]     assertEquals("Wg==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 90 }))); [EOL]     assertEquals("Ww==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 91 }))); [EOL]     assertEquals("XA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 92 }))); [EOL]     assertEquals("XQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 93 }))); [EOL]     assertEquals("Xg==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 94 }))); [EOL]     assertEquals("Xw==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 95 }))); [EOL]     assertEquals("YA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 96 }))); [EOL]     assertEquals("YQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 97 }))); [EOL]     assertEquals("Yg==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 98 }))); [EOL]     assertEquals("Yw==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 99 }))); [EOL]     assertEquals("ZA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 100 }))); [EOL]     assertEquals("ZQ==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 101 }))); [EOL]     assertEquals("Zg==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 102 }))); [EOL]     assertEquals("Zw==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 103 }))); [EOL]     assertEquals("aA==\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 104 }))); [EOL] } <line_num>: 223,329
public void testTriplets() { [EOL]     assertEquals("AAAA", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 0 }))); [EOL]     assertEquals("AAAB", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 1 }))); [EOL]     assertEquals("AAAC", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 2 }))); [EOL]     assertEquals("AAAD", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 3 }))); [EOL]     assertEquals("AAAE", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 4 }))); [EOL]     assertEquals("AAAF", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 5 }))); [EOL]     assertEquals("AAAG", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 6 }))); [EOL]     assertEquals("AAAH", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 7 }))); [EOL]     assertEquals("AAAI", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 8 }))); [EOL]     assertEquals("AAAJ", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 9 }))); [EOL]     assertEquals("AAAK", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 10 }))); [EOL]     assertEquals("AAAL", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 11 }))); [EOL]     assertEquals("AAAM", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 12 }))); [EOL]     assertEquals("AAAN", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 13 }))); [EOL]     assertEquals("AAAO", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 14 }))); [EOL]     assertEquals("AAAP", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 15 }))); [EOL]     assertEquals("AAAQ", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 16 }))); [EOL]     assertEquals("AAAR", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 17 }))); [EOL]     assertEquals("AAAS", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 18 }))); [EOL]     assertEquals("AAAT", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 19 }))); [EOL]     assertEquals("AAAU", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 20 }))); [EOL]     assertEquals("AAAV", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 21 }))); [EOL]     assertEquals("AAAW", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 22 }))); [EOL]     assertEquals("AAAX", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 23 }))); [EOL]     assertEquals("AAAY", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 24 }))); [EOL]     assertEquals("AAAZ", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 25 }))); [EOL]     assertEquals("AAAa", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 26 }))); [EOL]     assertEquals("AAAb", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 27 }))); [EOL]     assertEquals("AAAc", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 28 }))); [EOL]     assertEquals("AAAd", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 29 }))); [EOL]     assertEquals("AAAe", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 30 }))); [EOL]     assertEquals("AAAf", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 31 }))); [EOL]     assertEquals("AAAg", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 32 }))); [EOL]     assertEquals("AAAh", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 33 }))); [EOL]     assertEquals("AAAi", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 34 }))); [EOL]     assertEquals("AAAj", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 35 }))); [EOL]     assertEquals("AAAk", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 36 }))); [EOL]     assertEquals("AAAl", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 37 }))); [EOL]     assertEquals("AAAm", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 38 }))); [EOL]     assertEquals("AAAn", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 39 }))); [EOL]     assertEquals("AAAo", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 40 }))); [EOL]     assertEquals("AAAp", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 41 }))); [EOL]     assertEquals("AAAq", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 42 }))); [EOL]     assertEquals("AAAr", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 43 }))); [EOL]     assertEquals("AAAs", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 44 }))); [EOL]     assertEquals("AAAt", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 45 }))); [EOL]     assertEquals("AAAu", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 46 }))); [EOL]     assertEquals("AAAv", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 47 }))); [EOL]     assertEquals("AAAw", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 48 }))); [EOL]     assertEquals("AAAx", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 49 }))); [EOL]     assertEquals("AAAy", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 50 }))); [EOL]     assertEquals("AAAz", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 51 }))); [EOL]     assertEquals("AAA0", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 52 }))); [EOL]     assertEquals("AAA1", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 53 }))); [EOL]     assertEquals("AAA2", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 54 }))); [EOL]     assertEquals("AAA3", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 55 }))); [EOL]     assertEquals("AAA4", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 56 }))); [EOL]     assertEquals("AAA5", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 57 }))); [EOL]     assertEquals("AAA6", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 58 }))); [EOL]     assertEquals("AAA7", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 59 }))); [EOL]     assertEquals("AAA8", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 60 }))); [EOL]     assertEquals("AAA9", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 61 }))); [EOL]     assertEquals("AAA+", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 62 }))); [EOL]     assertEquals("AAA/", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 63 }))); [EOL] } <line_num>: 331,396
public void testTripletsChunked() { [EOL]     assertEquals("AAAA\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 0 }))); [EOL]     assertEquals("AAAB\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 1 }))); [EOL]     assertEquals("AAAC\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 2 }))); [EOL]     assertEquals("AAAD\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 3 }))); [EOL]     assertEquals("AAAE\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 4 }))); [EOL]     assertEquals("AAAF\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 5 }))); [EOL]     assertEquals("AAAG\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 6 }))); [EOL]     assertEquals("AAAH\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 7 }))); [EOL]     assertEquals("AAAI\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 8 }))); [EOL]     assertEquals("AAAJ\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 9 }))); [EOL]     assertEquals("AAAK\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 10 }))); [EOL]     assertEquals("AAAL\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 11 }))); [EOL]     assertEquals("AAAM\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 12 }))); [EOL]     assertEquals("AAAN\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 13 }))); [EOL]     assertEquals("AAAO\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 14 }))); [EOL]     assertEquals("AAAP\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 15 }))); [EOL]     assertEquals("AAAQ\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 16 }))); [EOL]     assertEquals("AAAR\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 17 }))); [EOL]     assertEquals("AAAS\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 18 }))); [EOL]     assertEquals("AAAT\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 19 }))); [EOL]     assertEquals("AAAU\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 20 }))); [EOL]     assertEquals("AAAV\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 21 }))); [EOL]     assertEquals("AAAW\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 22 }))); [EOL]     assertEquals("AAAX\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 23 }))); [EOL]     assertEquals("AAAY\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 24 }))); [EOL]     assertEquals("AAAZ\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 25 }))); [EOL]     assertEquals("AAAa\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 26 }))); [EOL]     assertEquals("AAAb\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 27 }))); [EOL]     assertEquals("AAAc\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 28 }))); [EOL]     assertEquals("AAAd\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 29 }))); [EOL]     assertEquals("AAAe\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 30 }))); [EOL]     assertEquals("AAAf\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 31 }))); [EOL]     assertEquals("AAAg\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 32 }))); [EOL]     assertEquals("AAAh\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 33 }))); [EOL]     assertEquals("AAAi\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 34 }))); [EOL]     assertEquals("AAAj\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 35 }))); [EOL]     assertEquals("AAAk\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 36 }))); [EOL]     assertEquals("AAAl\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 37 }))); [EOL]     assertEquals("AAAm\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 38 }))); [EOL]     assertEquals("AAAn\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 39 }))); [EOL]     assertEquals("AAAo\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 40 }))); [EOL]     assertEquals("AAAp\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 41 }))); [EOL]     assertEquals("AAAq\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 42 }))); [EOL]     assertEquals("AAAr\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 43 }))); [EOL]     assertEquals("AAAs\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 44 }))); [EOL]     assertEquals("AAAt\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 45 }))); [EOL]     assertEquals("AAAu\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 46 }))); [EOL]     assertEquals("AAAv\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 47 }))); [EOL]     assertEquals("AAAw\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 48 }))); [EOL]     assertEquals("AAAx\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 49 }))); [EOL]     assertEquals("AAAy\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 50 }))); [EOL]     assertEquals("AAAz\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 51 }))); [EOL]     assertEquals("AAA0\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 52 }))); [EOL]     assertEquals("AAA1\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 53 }))); [EOL]     assertEquals("AAA2\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 54 }))); [EOL]     assertEquals("AAA3\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 55 }))); [EOL]     assertEquals("AAA4\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 56 }))); [EOL]     assertEquals("AAA5\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 57 }))); [EOL]     assertEquals("AAA6\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 58 }))); [EOL]     assertEquals("AAA7\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 59 }))); [EOL]     assertEquals("AAA8\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 60 }))); [EOL]     assertEquals("AAA9\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 61 }))); [EOL]     assertEquals("AAA+\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 62 }))); [EOL]     assertEquals("AAA/\r\n", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 63 }))); [EOL] } <line_num>: 398,463
public void testKnownEncodings() { [EOL]     assertEquals("VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==", new String(Base64.encodeBase64("The quick brown fox jumped over the lazy dogs.".getBytes()))); [EOL]     assertEquals("YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\r\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\r\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\r\nbGFoIGJsYWg=\r\n", new String(Base64.encodeBase64Chunked("blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah".getBytes()))); [EOL]     assertEquals("SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==", new String(Base64.encodeBase64("It was the best of times, it was the worst of times.".getBytes()))); [EOL]     assertEquals("aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==", new String(Base64.encodeBase64("http://jakarta.apache.org/commmons".getBytes()))); [EOL]     assertEquals("QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==", new String(Base64.encodeBase64("AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz".getBytes()))); [EOL]     assertEquals("eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=", new String(Base64.encodeBase64("{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }".getBytes()))); [EOL]     assertEquals("eHl6enkh", new String(Base64.encodeBase64("xyzzy!".getBytes()))); [EOL] } <line_num>: 465,473
public void testKnownDecodings() { [EOL]     assertEquals("The quick brown fox jumped over the lazy dogs.", new String(Base64.decodeBase64("VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==".getBytes()))); [EOL]     assertEquals("It was the best of times, it was the worst of times.", new String(Base64.decodeBase64("SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==".getBytes()))); [EOL]     assertEquals("http://jakarta.apache.org/commmons", new String(Base64.decodeBase64("aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==".getBytes()))); [EOL]     assertEquals("AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz", new String(Base64.decodeBase64("QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==".getBytes()))); [EOL]     assertEquals("{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }", new String(Base64.decodeBase64("eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=".getBytes()))); [EOL]     assertEquals("xyzzy!", new String(Base64.decodeBase64("eHl6enkh".getBytes()))); [EOL] } <line_num>: 475,482
public void testNonBase64Test() throws Exception { [EOL]     byte[] bArray = { '%' }; [EOL]     assertFalse("Invalid Base64 array was incorrectly validated as " + "an array of Base64 encoded data", Base64.isArrayByteBase64(bArray)); [EOL]     boolean exceptionThrown = false; [EOL]     try { [EOL]         Base64 b64 = new Base64(); [EOL]         byte[] result = b64.decode(bArray); [EOL]         assertTrue("The result should be empty as the test encoded content did " + "not contain any valid base 64 characters", result.length == 0); [EOL]     } catch (Exception e) { [EOL]         exceptionThrown = true; [EOL]     } [EOL]     assertFalse("Exception was thrown when trying to decode " + "invalid base64 encoded data - RFC 2045 requires that all " + "non base64 character be discarded, an exception should not" + " have been thrown", exceptionThrown); [EOL] } <line_num>: 484,511
public void testIgnoringNonBase64InDecode() throws Exception { [EOL]     assertEquals("The quick brown fox jumped over the lazy dogs.", new String(Base64.decodeBase64("VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\n\r\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==".getBytes()))); [EOL] } <line_num>: 513,515
public void testIsArrayByteBase64() { [EOL]     assertFalse(Base64.isArrayByteBase64(new byte[] { Byte.MIN_VALUE })); [EOL]     assertFalse(Base64.isArrayByteBase64(new byte[] { -125 })); [EOL]     assertFalse(Base64.isArrayByteBase64(new byte[] { -10 })); [EOL]     assertFalse(Base64.isArrayByteBase64(new byte[] { 0 })); [EOL]     assertFalse(Base64.isArrayByteBase64(new byte[] { 64, Byte.MAX_VALUE })); [EOL]     assertFalse(Base64.isArrayByteBase64(new byte[] { Byte.MAX_VALUE })); [EOL]     assertTrue(Base64.isArrayByteBase64(new byte[] { 'A' })); [EOL]     assertFalse(Base64.isArrayByteBase64(new byte[] { 'A', Byte.MIN_VALUE })); [EOL] } <line_num>: 517,526
public void testObjectDecodeWithInvalidParameter() throws Exception { [EOL]     boolean exceptionThrown = false; [EOL]     Base64 b64 = new Base64(); [EOL]     try { [EOL]         Object o = new String("Yadayadayada"); [EOL]         b64.decode(o); [EOL]     } catch (Exception e) { [EOL]         exceptionThrown = true; [EOL]     } [EOL]     assertTrue("decode(Object) didn't throw an exception when passed a " + "String object", exceptionThrown); [EOL] } <line_num>: 528,542
public void testObjectDecodeWithValidParameter() throws Exception { [EOL]     String original = "Hello World!"; [EOL]     byte[] bArray = Base64.encodeBase64((new String(original)).getBytes()); [EOL]     Object o = bArray; [EOL]     Base64 b64 = new Base64(); [EOL]     Object oDecoded = b64.decode(o); [EOL]     byte[] baDecoded = (byte[]) oDecoded; [EOL]     String dest = new String(baDecoded); [EOL]     assertTrue("dest string down not equal original", dest.equals(original)); [EOL] } <line_num>: 544,558
public void testObjectEncodeWithInvalidParameter() throws Exception { [EOL]     boolean exceptionThrown = false; [EOL]     Base64 b64 = new Base64(); [EOL]     try { [EOL]         Object o = new String("Yadayadayada"); [EOL]         b64.encode(o); [EOL]     } catch (Exception e) { [EOL]         exceptionThrown = true; [EOL]     } [EOL]     assertTrue("encode(Object) didn't throw an exception when passed a " + "String object", exceptionThrown); [EOL] } <line_num>: 560,574
public void testObjectEncodeWithValidParameter() throws Exception { [EOL]     String original = "Hello World!"; [EOL]     byte[] origBytes = original.getBytes(); [EOL]     Object origObj = origBytes; [EOL]     Base64 b64 = new Base64(); [EOL]     Object oEncoded = b64.encode(origObj); [EOL]     byte[] bArray = Base64.decodeBase64((byte[]) oEncoded); [EOL]     String dest = new String(bArray); [EOL]     assertTrue("dest string down not equal original", dest.equals(original)); [EOL] } <line_num>: 576,590
public void testDecodeWithWhitespace() throws Exception { [EOL]     String orig = "I am a late night coder."; [EOL]     byte[] encodedArray = Base64.encodeBase64(orig.getBytes()); [EOL]     StringBuffer intermediate = new StringBuffer(new String(encodedArray)); [EOL]     intermediate.insert(2, ' '); [EOL]     intermediate.insert(5, '\t'); [EOL]     intermediate.insert(10, '\r'); [EOL]     intermediate.insert(15, '\n'); [EOL]     byte[] encodedWithWS = intermediate.toString().getBytes(); [EOL]     byte[] decodedWithWS = Base64.decodeBase64(encodedWithWS); [EOL]     String dest = new String(decodedWithWS); [EOL]     assertTrue("Dest string doesn't equals the original", dest.equals(orig)); [EOL] } <line_num>: 592,612
public void testDiscardWhitespace() throws Exception { [EOL]     String orig = "I am a late night coder."; [EOL]     byte[] encodedArray = Base64.encodeBase64(orig.getBytes()); [EOL]     StringBuffer intermediate = new StringBuffer(new String(encodedArray)); [EOL]     intermediate.insert(2, ' '); [EOL]     intermediate.insert(5, '\t'); [EOL]     intermediate.insert(10, '\r'); [EOL]     intermediate.insert(15, '\n'); [EOL]     byte[] encodedWithWS = intermediate.toString().getBytes(); [EOL]     byte[] encodedNoWS = Base64.discardWhitespace(encodedWithWS); [EOL]     byte[] decodedWithWS = Base64.decodeBase64(encodedWithWS); [EOL]     byte[] decodedNoWS = Base64.decodeBase64(encodedNoWS); [EOL]     String destFromWS = new String(decodedWithWS); [EOL]     String destFromNoWS = new String(decodedNoWS); [EOL]     assertTrue("Dest string doesn't eausl original", destFromWS.equals(orig)); [EOL]     assertTrue("Dest string doesn't eausl original", destFromNoWS.equals(orig)); [EOL] } <line_num>: 614,639
public void testCodeInteger1() { [EOL]     String encodedInt1 = "li7dzDacuo67Jg7mtqEm2TRuOMU="; [EOL]     BigInteger bigInt1 = new BigInteger("85739377120809420210425962799" + "0318636601332086981"); [EOL]     assertEquals(encodedInt1, new String(Base64.encodeInteger(bigInt1))); [EOL]     assertEquals(bigInt1, Base64.decodeInteger(encodedInt1.getBytes())); [EOL] } <line_num>: 641,648
public void testCodeInteger2() { [EOL]     String encodedInt2 = "9B5ypLY9pMOmtxCeTDHgwdNFeGs="; [EOL]     BigInteger bigInt2 = new BigInteger("13936727572861167254666467268" + "91466679477132949611"); [EOL]     assertEquals(encodedInt2, new String(Base64.encodeInteger(bigInt2))); [EOL]     assertEquals(bigInt2, Base64.decodeInteger(encodedInt2.getBytes())); [EOL] } <line_num>: 650,657
public void testCodeInteger3() { [EOL]     String encodedInt3 = "FKIhdgaG5LGKiEtF1vHy4f3y700zaD6QwDS3IrNVGzNp2" + "rY+1LFWTK6D44AyiC1n8uWz1itkYMZF0/aKDK0Yjg=="; [EOL]     BigInteger bigInt3 = new BigInteger("10806548154093873461951748545" + "1196989136416448805819079363524309897749044958112417136240557" + "4495062430572478766856090958495998158114332651671116876320938126"); [EOL]     assertEquals(encodedInt3, new String(Base64.encodeInteger(bigInt3))); [EOL]     assertEquals(bigInt3, Base64.decodeInteger(encodedInt3.getBytes())); [EOL] } <line_num>: 659,668
public void testCodeInteger4() { [EOL]     String encodedInt4 = "ctA8YGxrtngg/zKVvqEOefnwmViFztcnPBYPlJsvh6yKI" + "4iDm68fnp4Mi3RrJ6bZAygFrUIQLxLjV+OJtgJAEto0xAs+Mehuq1DkSFEpP3o" + "DzCTOsrOiS1DwQe4oIb7zVk/9l7aPtJMHW0LVlMdwZNFNNJoqMcT2ZfCPrfvYv" + "Q0="; [EOL]     BigInteger bigInt4 = new BigInteger("80624726256040348115552042320" + "6968135001872753709424419772586693950232350200555646471175944" + "519297087885987040810778908507262272892702303774422853675597" + "748008534040890923814202286633163248086055216976551456088015" + "338880713818192088877057717530169381044092839402438015097654" + "53542091716518238707344493641683483917"); [EOL]     assertEquals(encodedInt4, new String(Base64.encodeInteger(bigInt4))); [EOL]     assertEquals(bigInt4, Base64.decodeInteger(encodedInt4.getBytes())); [EOL] } <line_num>: 670,684
public void testCodeIntegerEdgeCases() { [EOL] } <line_num>: 686,688
private String toString(byte[] data) { [EOL]     StringBuffer buf = new StringBuffer(); [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         buf.append(data[i]); [EOL]         if (i != data.length - 1) { [EOL]             buf.append(","); [EOL]         } [EOL]     } [EOL]     return buf.toString(); [EOL] } <line_num>: 692,701
public Random getRandom() { [EOL]     return this._random; [EOL] } <line_num>: 710,712
