public RefinedSoundexTest(String name) { [EOL]     super(name); [EOL] } <line_num>: 41,43
public static Test suite() { [EOL]     return new TestSuite(RefinedSoundexTest.class); [EOL] } <line_num>: 35,37
private RefinedSoundex getEncoder() { [EOL]     return this.encoder; [EOL] } <line_num>: 48,50
protected StringEncoder makeEncoder() { [EOL]     return new RefinedSoundex(); [EOL] } <line_num>: 52,54
private void setEncoder(RefinedSoundex encoder) { [EOL]     this.encoder = encoder; [EOL] } <line_num>: 60,62
public void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     this.setEncoder(new RefinedSoundex()); [EOL] } <line_num>: 64,67
public void tearDown() throws Exception { [EOL]     super.tearDown(); [EOL]     this.setEncoder(null); [EOL] } <line_num>: 69,72
public void testDifference() throws EncoderException { [EOL]     assertEquals(0, this.getEncoder().difference(null, null)); [EOL]     assertEquals(0, this.getEncoder().difference("", "")); [EOL]     assertEquals(0, this.getEncoder().difference(" ", " ")); [EOL]     assertEquals(6, this.getEncoder().difference("Smith", "Smythe")); [EOL]     assertEquals(3, this.getEncoder().difference("Ann", "Andrew")); [EOL]     assertEquals(1, this.getEncoder().difference("Margaret", "Andrew")); [EOL]     assertEquals(1, this.getEncoder().difference("Janet", "Margaret")); [EOL]     assertEquals(5, this.getEncoder().difference("Green", "Greene")); [EOL]     assertEquals(1, this.getEncoder().difference("Blotchet-Halls", "Greene")); [EOL]     assertEquals(6, this.getEncoder().difference("Smith", "Smythe")); [EOL]     assertEquals(8, this.getEncoder().difference("Smithers", "Smythers")); [EOL]     assertEquals(5, this.getEncoder().difference("Anothers", "Brothers")); [EOL] } <line_num>: 74,93
public void testEncode() { [EOL]     assertEquals("T6036084", this.getEncoder().encode("testing")); [EOL]     assertEquals("T6036084", this.getEncoder().encode("TESTING")); [EOL]     assertEquals("T60", this.getEncoder().encode("The")); [EOL]     assertEquals("Q503", this.getEncoder().encode("quick")); [EOL]     assertEquals("B1908", this.getEncoder().encode("brown")); [EOL]     assertEquals("F205", this.getEncoder().encode("fox")); [EOL]     assertEquals("J408106", this.getEncoder().encode("jumped")); [EOL]     assertEquals("O0209", this.getEncoder().encode("over")); [EOL]     assertEquals("T60", this.getEncoder().encode("the")); [EOL]     assertEquals("L7050", this.getEncoder().encode("lazy")); [EOL]     assertEquals("D6043", this.getEncoder().encode("dogs")); [EOL]     assertEquals("D6043", RefinedSoundex.US_ENGLISH.encode("dogs")); [EOL] } <line_num>: 95,110
public void testGetMappingCodeNonLetter() { [EOL]     char code = this.getEncoder().getMappingCode('#'); [EOL]     assertEquals("Code does not equals zero", 0, code); [EOL] } <line_num>: 112,115
