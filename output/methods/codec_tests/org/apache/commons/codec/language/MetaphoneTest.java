public MetaphoneTest(String name) { [EOL]     super(name); [EOL] } <line_num>: 38,40
public static Test suite() { [EOL]     return new TestSuite(MetaphoneTest.class); [EOL] } <line_num>: 32,34
public void assertIsMetaphoneEqual(String source, String[] matches) { [EOL]     for (int i = 0; i < matches.length; i++) { [EOL]         assertTrue("Source: " + source + ", should have same Metaphone as: " + matches[i], this.getMetaphone().isMetaphoneEqual(source, matches[i])); [EOL]     } [EOL]     for (int i = 0; i < matches.length; i++) { [EOL]         for (int j = 0; j < matches.length; j++) { [EOL]             assertTrue(this.getMetaphone().isMetaphoneEqual(matches[i], matches[j])); [EOL]         } [EOL]     } [EOL] } <line_num>: 42,54
public void assertMetaphoneEqual(String[][] pairs) { [EOL]     this.validateFixture(pairs); [EOL]     for (int i = 0; i < pairs.length; i++) { [EOL]         String name0 = pairs[i][0]; [EOL]         String name1 = pairs[i][1]; [EOL]         String failMsg = "Expected match between " + name0 + " and " + name1; [EOL]         assertTrue(failMsg, this.getMetaphone().isMetaphoneEqual(name0, name1)); [EOL]         assertTrue(failMsg, this.getMetaphone().isMetaphoneEqual(name1, name0)); [EOL]     } [EOL] } <line_num>: 56,65
private Metaphone getMetaphone() { [EOL]     return this.metaphone; [EOL] } <line_num>: 69,71
protected StringEncoder makeEncoder() { [EOL]     return new Metaphone(); [EOL] } <line_num>: 73,75
private void setMetaphone(Metaphone metaphone) { [EOL]     this.metaphone = metaphone; [EOL] } <line_num>: 81,83
public void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     this.setMetaphone(new Metaphone()); [EOL] } <line_num>: 85,88
public void tearDown() throws Exception { [EOL]     super.tearDown(); [EOL]     this.setMetaphone(null); [EOL] } <line_num>: 90,93
public void testIsMetaphoneEqual1() { [EOL]     this.assertMetaphoneEqual(new String[][] { { "Case", "case" }, { "CASE", "Case" }, { "caSe", "cAsE" }, { "quick", "cookie" } }); [EOL] } <line_num>: 95,101
public void testIsMetaphoneEqual2() { [EOL]     this.assertMetaphoneEqual(new String[][] { { "Lawrence", "Lorenza" }, { "Gary", "Cahra" } }); [EOL] } <line_num>: 106,109
public void testIsMetaphoneEqualAero() { [EOL]     this.assertIsMetaphoneEqual("Aero", new String[] { "Eure" }); [EOL] } <line_num>: 116,118
public void testIsMetaphoneEqualWhite() { [EOL]     this.assertIsMetaphoneEqual("White", new String[] { "Wade", "Wait", "Waite", "Wat", "Whit", "Wiatt", "Wit", "Wittie", "Witty", "Wood", "Woodie", "Woody" }); [EOL] } <line_num>: 125,129
public void testIsMetaphoneEqualAlbert() { [EOL]     this.assertIsMetaphoneEqual("Albert", new String[] { "Ailbert", "Alberik", "Albert", "Alberto", "Albrecht" }); [EOL] } <line_num>: 136,138
public void testIsMetaphoneEqualGary() { [EOL]     this.assertIsMetaphoneEqual("Gary", new String[] { "Cahra", "Cara", "Carey", "Cari", "Caria", "Carie", "Caro", "Carree", "Carri", "Carrie", "Carry", "Cary", "Cora", "Corey", "Cori", "Corie", "Correy", "Corri", "Corrie", "Corry", "Cory", "Gray", "Kara", "Kare", "Karee", "Kari", "Karia", "Karie", "Karrah", "Karrie", "Karry", "Kary", "Keri", "Kerri", "Kerrie", "Kerry", "Kira", "Kiri", "Kora", "Kore", "Kori", "Korie", "Korrie", "Korry" }); [EOL] } <line_num>: 143,191
public void testIsMetaphoneEqualJohn() { [EOL]     this.assertIsMetaphoneEqual("John", new String[] { "Gena", "Gene", "Genia", "Genna", "Genni", "Gennie", "Genny", "Giana", "Gianna", "Gina", "Ginni", "Ginnie", "Ginny", "Jaine", "Jan", "Jana", "Jane", "Janey", "Jania", "Janie", "Janna", "Jany", "Jayne", "Jean", "Jeana", "Jeane", "Jeanie", "Jeanna", "Jeanne", "Jeannie", "Jen", "Jena", "Jeni", "Jenn", "Jenna", "Jennee", "Jenni", "Jennie", "Jenny", "Jinny", "Jo Ann", "Jo-Ann", "Jo-Anne", "Joan", "Joana", "Joane", "Joanie", "Joann", "Joanna", "Joanne", "Joeann", "Johna", "Johnna", "Joni", "Jonie", "Juana", "June", "Junia", "Junie" }); [EOL] } <line_num>: 196,259
public void testIsMetaphoneEqualKnight() { [EOL]     this.assertIsMetaphoneEqual("Knight", new String[] { "Hynda", "Nada", "Nadia", "Nady", "Nat", "Nata", "Natty", "Neda", "Nedda", "Nedi", "Netta", "Netti", "Nettie", "Netty", "Nita", "Nydia" }); [EOL] } <line_num>: 266,286
public void testIsMetaphoneEqualMary() { [EOL]     this.assertIsMetaphoneEqual("Mary", new String[] { "Mair", "Maire", "Mara", "Mareah", "Mari", "Maria", "Marie", "Mary", "Maura", "Maure", "Meara", "Merrie", "Merry", "Mira", "Moira", "Mora", "Moria", "Moyra", "Muire", "Myra", "Myrah" }); [EOL] } <line_num>: 290,315
public void testIsMetaphoneEqualParis() { [EOL]     this.assertIsMetaphoneEqual("Paris", new String[] { "Pearcy", "Perris", "Piercy", "Pierz", "Pryse" }); [EOL] } <line_num>: 320,322
public void testIsMetaphoneEqualPeter() { [EOL]     this.assertIsMetaphoneEqual("Peter", new String[] { "Peadar", "Peder", "Pedro", "Peter", "Petr", "Peyter", "Pieter", "Pietro", "Piotr" }); [EOL] } <line_num>: 327,331
public void testIsMetaphoneEqualRay() { [EOL]     this.assertIsMetaphoneEqual("Ray", new String[] { "Ray", "Rey", "Roi", "Roy", "Ruy" }); [EOL] } <line_num>: 336,338
public void testIsMetaphoneEqualSusan() { [EOL]     this.assertIsMetaphoneEqual("Susan", new String[] { "Siusan", "Sosanna", "Susan", "Susana", "Susann", "Susanna", "Susannah", "Susanne", "Suzann", "Suzanna", "Suzanne", "Zuzana" }); [EOL] } <line_num>: 343,359
public void testIsMetaphoneEqualWright() { [EOL]     this.assertIsMetaphoneEqual("Wright", new String[] { "Rota", "Rudd", "Ryde" }); [EOL] } <line_num>: 366,368
public void testIsMetaphoneEqualXalan() { [EOL]     this.assertIsMetaphoneEqual("Xalan", new String[] { "Celene", "Celina", "Celine", "Selena", "Selene", "Selina", "Seline", "Suellen", "Xylina" }); [EOL] } <line_num>: 373,377
public void testMetaphone() { [EOL]     assertEquals("HL", this.getMetaphone().metaphone("howl")); [EOL]     assertEquals("TSTN", this.getMetaphone().metaphone("testing")); [EOL]     assertEquals("0", this.getMetaphone().metaphone("The")); [EOL]     assertEquals("KK", this.getMetaphone().metaphone("quick")); [EOL]     assertEquals("BRN", this.getMetaphone().metaphone("brown")); [EOL]     assertEquals("FKS", this.getMetaphone().metaphone("fox")); [EOL]     assertEquals("JMPT", this.getMetaphone().metaphone("jumped")); [EOL]     assertEquals("OFR", this.getMetaphone().metaphone("over")); [EOL]     assertEquals("0", this.getMetaphone().metaphone("the")); [EOL]     assertEquals("LS", this.getMetaphone().metaphone("lazy")); [EOL]     assertEquals("TKS", this.getMetaphone().metaphone("dogs")); [EOL] } <line_num>: 379,391
public void testWordEndingInMB() { [EOL]     assertEquals("KM", this.getMetaphone().metaphone("COMB")); [EOL]     assertEquals("TM", this.getMetaphone().metaphone("TOMB")); [EOL]     assertEquals("WM", this.getMetaphone().metaphone("WOMB")); [EOL] } <line_num>: 393,397
public void testDiscardOfSCEOrSCIOrSCY() { [EOL]     assertEquals("SNS", this.getMetaphone().metaphone("SCIENCE")); [EOL]     assertEquals("SN", this.getMetaphone().metaphone("SCENE")); [EOL]     assertEquals("S", this.getMetaphone().metaphone("SCY")); [EOL] } <line_num>: 399,403
public void testWhy() { [EOL]     assertEquals("", this.getMetaphone().metaphone("WHY")); [EOL] } <line_num>: 408,411
public void testWordsWithCIA() { [EOL]     assertEquals("XP", this.getMetaphone().metaphone("CIAPO")); [EOL] } <line_num>: 413,415
public void testTranslateOfSCHAndCH() { [EOL]     assertEquals("SKTL", this.getMetaphone().metaphone("SCHEDULE")); [EOL]     assertEquals("SKMT", this.getMetaphone().metaphone("SCHEMATIC")); [EOL]     assertEquals("KRKT", this.getMetaphone().metaphone("CHARACTER")); [EOL]     assertEquals("TX", this.getMetaphone().metaphone("TEACH")); [EOL] } <line_num>: 417,423
public void testTranslateToJOfDGEOrDGIOrDGY() { [EOL]     assertEquals("TJ", this.getMetaphone().metaphone("DODGY")); [EOL]     assertEquals("TJ", this.getMetaphone().metaphone("DODGE")); [EOL]     assertEquals("AJMT", this.getMetaphone().metaphone("ADGIEMTI")); [EOL] } <line_num>: 425,429
public void testDiscardOfSilentHAfterG() { [EOL]     assertEquals("KNT", this.getMetaphone().metaphone("GHENT")); [EOL]     assertEquals("B", this.getMetaphone().metaphone("BAUGH")); [EOL] } <line_num>: 431,434
public void testDiscardOfSilentGN() { [EOL]     assertEquals("N", this.getMetaphone().metaphone("GNU")); [EOL]     assertEquals("SNT", this.getMetaphone().metaphone("SIGNED")); [EOL] } <line_num>: 436,439
public void testPHTOF() { [EOL]     assertEquals("FX", this.getMetaphone().metaphone("PHISH")); [EOL] } <line_num>: 441,443
public void testSHAndSIOAndSIAToX() { [EOL]     assertEquals("XT", this.getMetaphone().metaphone("SHOT")); [EOL]     assertEquals("OTXN", this.getMetaphone().metaphone("ODSIAN")); [EOL]     assertEquals("PLXN", this.getMetaphone().metaphone("PULSION")); [EOL] } <line_num>: 445,449
public void testTIOAndTIAToX() { [EOL]     assertEquals("OX", this.getMetaphone().metaphone("OTIA")); [EOL]     assertEquals("PRXN", this.getMetaphone().metaphone("PORTION")); [EOL] } <line_num>: 451,454
public void testTCH() { [EOL]     assertEquals("RX", this.getMetaphone().metaphone("RETCH")); [EOL]     assertEquals("WX", this.getMetaphone().metaphone("WATCH")); [EOL] } <line_num>: 456,459
public void testExceedLength() { [EOL]     assertEquals("AKSK", this.getMetaphone().metaphone("AXEAXE")); [EOL] } <line_num>: 461,464
public void testSetMaxLengthWithTruncation() { [EOL]     this.getMetaphone().setMaxCodeLen(6); [EOL]     assertEquals("AKSKSK", this.getMetaphone().metaphone("AXEAXEAXE")); [EOL] } <line_num>: 466,470
public void validateFixture(String[][] pairs) { [EOL]     if (pairs.length == 0) { [EOL]         fail("Test fixture is empty"); [EOL]     } [EOL]     for (int i = 0; i < pairs.length; i++) { [EOL]         if (pairs[i].length != 2) { [EOL]             fail("Error in test fixture in the data array at index " + i); [EOL]         } [EOL]     } [EOL] } <line_num>: 472,481
