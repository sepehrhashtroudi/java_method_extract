public DoubleMetaphoneTest(String name) { [EOL]     super(name); [EOL] } <line_num>: 1010,1012
public static Test suite() { [EOL]     return new TestSuite(DoubleMetaphoneTest.class); [EOL] } <line_num>: 1004,1006
private void assertDoubleMetaphone(String expected, String source) { [EOL]     assertEquals(expected, this.getDoubleMetaphone().encode(source)); [EOL]     try { [EOL]         assertEquals(expected, this.getDoubleMetaphone().encode((Object) source)); [EOL]     } catch (EncoderException e) { [EOL]         fail("Unexpected expection: " + e); [EOL]     } [EOL]     assertEquals(expected, this.getDoubleMetaphone().doubleMetaphone(source)); [EOL]     assertEquals(expected, this.getDoubleMetaphone().doubleMetaphone(source, false)); [EOL] } <line_num>: 1017,1026
public void assertDoubleMetaphoneAlt(String expected, String source) { [EOL]     assertEquals(expected, this.getDoubleMetaphone().doubleMetaphone(source, true)); [EOL] } <line_num>: 1031,1033
public void doubleMetaphoneEqualTest(String[][] pairs, boolean useAlternate) { [EOL]     this.validateFixture(pairs); [EOL]     for (int i = 0; i < pairs.length; i++) { [EOL]         String name0 = pairs[i][0]; [EOL]         String name1 = pairs[i][1]; [EOL]         String failMsg = "Expected match between " + name0 + " and " + name1 + " (use alternate: " + useAlternate + ")"; [EOL]         assertTrue(failMsg, this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0, name1, useAlternate)); [EOL]         assertTrue(failMsg, this.getDoubleMetaphone().isDoubleMetaphoneEqual(name1, name0, useAlternate)); [EOL]         if (!useAlternate) { [EOL]             assertTrue(failMsg, this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0, name1)); [EOL]             assertTrue(failMsg, this.getDoubleMetaphone().isDoubleMetaphoneEqual(name1, name0)); [EOL]         } [EOL]     } [EOL] } <line_num>: 1035,1048
public void doubleMetaphoneNotEqualTest(boolean alternate) { [EOL]     assertFalse(this.getDoubleMetaphone().isDoubleMetaphoneEqual("Brain", "Band", alternate)); [EOL]     assertFalse(this.getDoubleMetaphone().isDoubleMetaphoneEqual("Band", "Brain", alternate)); [EOL]     if (!alternate) { [EOL]         assertFalse(this.getDoubleMetaphone().isDoubleMetaphoneEqual("Brain", "Band")); [EOL]         assertFalse(this.getDoubleMetaphone().isDoubleMetaphoneEqual("Band", "Brain")); [EOL]     } [EOL] } <line_num>: 1050,1058
private DoubleMetaphone getDoubleMetaphone() { [EOL]     return this.doubleMetaphone; [EOL] } <line_num>: 1060,1062
protected StringEncoder makeEncoder() { [EOL]     return new Metaphone(); [EOL] } <line_num>: 1064,1066
private void setDoubleMetaphone(DoubleMetaphone doubleMetaphone) { [EOL]     this.doubleMetaphone = doubleMetaphone; [EOL] } <line_num>: 1068,1070
public void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     this.setDoubleMetaphone(new DoubleMetaphone()); [EOL] } <line_num>: 1072,1075
public void tearDown() throws Exception { [EOL]     super.tearDown(); [EOL]     this.setDoubleMetaphone(null); [EOL] } <line_num>: 1077,1080
public void testDoubleMetaphone() { [EOL]     assertDoubleMetaphone("TSTN", "testing"); [EOL]     assertDoubleMetaphone("0", "The"); [EOL]     assertDoubleMetaphone("KK", "quick"); [EOL]     assertDoubleMetaphone("PRN", "brown"); [EOL]     assertDoubleMetaphone("FKS", "fox"); [EOL]     assertDoubleMetaphone("JMPT", "jumped"); [EOL]     assertDoubleMetaphone("AFR", "over"); [EOL]     assertDoubleMetaphone("0", "the"); [EOL]     assertDoubleMetaphone("LS", "lazy"); [EOL]     assertDoubleMetaphone("TKS", "dogs"); [EOL]     assertDoubleMetaphone("MKFR", "MacCafferey"); [EOL]     assertDoubleMetaphone("STFN", "Stephan"); [EOL]     assertDoubleMetaphone("KSSK", "Kuczewski"); [EOL]     assertDoubleMetaphoneAlt("TSTN", "testing"); [EOL]     assertDoubleMetaphoneAlt("T", "The"); [EOL]     assertDoubleMetaphoneAlt("KK", "quick"); [EOL]     assertDoubleMetaphoneAlt("PRN", "brown"); [EOL]     assertDoubleMetaphoneAlt("FKS", "fox"); [EOL]     assertDoubleMetaphoneAlt("AMPT", "jumped"); [EOL]     assertDoubleMetaphoneAlt("AFR", "over"); [EOL]     assertDoubleMetaphoneAlt("T", "the"); [EOL]     assertDoubleMetaphoneAlt("LS", "lazy"); [EOL]     assertDoubleMetaphoneAlt("TKS", "dogs"); [EOL]     assertDoubleMetaphoneAlt("MKFR", "MacCafferey"); [EOL]     assertDoubleMetaphoneAlt("STFN", "Stephan"); [EOL]     assertDoubleMetaphoneAlt("KXFS", "Kutchefski"); [EOL] } <line_num>: 1082,1110
public void testEmpty() { [EOL]     assertEquals(null, this.getDoubleMetaphone().doubleMetaphone(null)); [EOL]     assertEquals(null, this.getDoubleMetaphone().doubleMetaphone("")); [EOL]     assertEquals(null, this.getDoubleMetaphone().doubleMetaphone(" ")); [EOL]     assertEquals(null, this.getDoubleMetaphone().doubleMetaphone("\t\n\r ")); [EOL] } <line_num>: 1112,1117
public void testIsDoubleMetaphoneEqualBasic() { [EOL]     String[][] testFixture = new String[][] { { "Case", "case" }, { "CASE", "Case" }, { "caSe", "cAsE" }, { "cookie", "quick" }, { "quick", "cookie" }, { "Brian", "Bryan" }, { "Auto", "Otto" }, { "Steven", "Stefan" }, { "Philipowitz", "Filipowicz" } }; [EOL]     doubleMetaphoneEqualTest(testFixture, false); [EOL]     doubleMetaphoneEqualTest(testFixture, true); [EOL] } <line_num>: 1119,1132
public void testIsDoubleMetaphoneEqualExtended1() { [EOL] } <line_num>: 1137,1142
public void testIsDoubleMetaphoneEqualExtended2() { [EOL]     String[][] testFixture = new String[][] { { "Jablonski", "Yablonsky" } }; [EOL]     doubleMetaphoneEqualTest(testFixture, true); [EOL] } <line_num>: 1144,1149
public void testIsDoubleMetaphoneEqualExtended3() { [EOL]     this.validateFixture(FIXTURE); [EOL]     StringBuffer failures = new StringBuffer(); [EOL]     StringBuffer matches = new StringBuffer(); [EOL]     String cr = System.getProperty("line.separator"); [EOL]     matches.append("private static final String[][] MATCHES = {" + cr); [EOL]     int failCount = 0; [EOL]     for (int i = 0; i < FIXTURE.length; i++) { [EOL]         String name0 = FIXTURE[i][0]; [EOL]         String name1 = FIXTURE[i][1]; [EOL]         boolean match1 = this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0, name1, false); [EOL]         boolean match2 = this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0, name1, true); [EOL]         if (match1 == false && match2 == false) { [EOL]             String failMsg = "[" + i + "] " + name0 + " and " + name1 + cr; [EOL]             failures.append(failMsg); [EOL]             failCount++; [EOL]         } else { [EOL]             matches.append("{\"" + name0 + "\", \"" + name1 + "\"}," + cr); [EOL]         } [EOL]     } [EOL]     String msg = failures.toString(); [EOL]     matches.append("};"); [EOL]     if (msg.length() > 0) { [EOL]     } [EOL] } <line_num>: 1155,1184
public void testIsDoubleMetaphoneEqualWithMATCHES() { [EOL]     this.validateFixture(MATCHES); [EOL]     for (int i = 0; i < MATCHES.length; i++) { [EOL]         String name0 = MATCHES[i][0]; [EOL]         String name1 = MATCHES[i][1]; [EOL]         boolean match1 = this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0, name1, false); [EOL]         boolean match2 = this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0, name1, true); [EOL]         if (match1 == false && match2 == false) { [EOL]             fail("Expected match [" + i + "] " + name0 + " and " + name1); [EOL]         } [EOL]     } [EOL] } <line_num>: 1186,1197
public void testIsDoubleMetaphoneNotEqual() { [EOL]     doubleMetaphoneNotEqualTest(false); [EOL]     doubleMetaphoneNotEqualTest(true); [EOL] } <line_num>: 1199,1202
public void testCCedilla() { [EOL]     this.getDoubleMetaphone().isDoubleMetaphoneEqual("ç", "S"); [EOL] } <line_num>: 1204,1206
public void testNTilde() { [EOL]     this.getDoubleMetaphone().isDoubleMetaphoneEqual("ñ", "N"); [EOL] } <line_num>: 1208,1210
public void validateFixture(String[][] pairs) { [EOL]     if (pairs.length == 0) { [EOL]         fail("Test fixture is empty"); [EOL]     } [EOL]     for (int i = 0; i < pairs.length; i++) { [EOL]         if (pairs[i].length != 2) { [EOL]             fail("Error in test fixture in the data array at index " + i); [EOL]         } [EOL]     } [EOL] } <line_num>: 1212,1221
