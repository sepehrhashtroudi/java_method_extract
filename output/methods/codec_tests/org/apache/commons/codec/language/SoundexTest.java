public SoundexTest(String name) { [EOL]     super(name); [EOL] } <line_num>: 42,44
public static Test suite() { [EOL]     return new TestSuite(SoundexTest.class); [EOL] } <line_num>: 36,38
void encodeAll(String[] strings, String expectedEncoding) { [EOL]     for (int i = 0; i < strings.length; i++) { [EOL]         assertEquals(expectedEncoding, this.getEncoder().encode(strings[i])); [EOL]     } [EOL] } <line_num>: 46,50
public Soundex getEncoder() { [EOL]     return this.encoder; [EOL] } <line_num>: 55,57
protected StringEncoder makeEncoder() { [EOL]     return new Soundex(); [EOL] } <line_num>: 59,61
public void setEncoder(Soundex encoder) { [EOL]     this.encoder = encoder; [EOL] } <line_num>: 67,69
public void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     this.setEncoder(new Soundex()); [EOL] } <line_num>: 71,74
public void tearDown() throws Exception { [EOL]     super.tearDown(); [EOL]     this.setEncoder(null); [EOL] } <line_num>: 76,79
public void testB650() { [EOL]     this.encodeAll(new String[] { "BARHAM", "BARONE", "BARRON", "BERNA", "BIRNEY", "BIRNIE", "BOOROM", "BOREN", "BORN", "BOURN", "BOURNE", "BOWRON", "BRAIN", "BRAME", "BRANN", "BRAUN", "BREEN", "BRIEN", "BRIM", "BRIMM", "BRINN", "BRION", "BROOM", "BROOME", "BROWN", "BROWNE", "BRUEN", "BRUHN", "BRUIN", "BRUMM", "BRUN", "BRUNO", "BRYAN", "BURIAN", "BURN", "BURNEY", "BYRAM", "BYRNE", "BYRON", "BYRUM" }, "B650"); [EOL] } <line_num>: 81,125
public void testDifference() throws EncoderException { [EOL]     assertEquals(0, this.getEncoder().difference(null, null)); [EOL]     assertEquals(0, this.getEncoder().difference("", "")); [EOL]     assertEquals(0, this.getEncoder().difference(" ", " ")); [EOL]     assertEquals(4, this.getEncoder().difference("Smith", "Smythe")); [EOL]     assertEquals(2, this.getEncoder().difference("Ann", "Andrew")); [EOL]     assertEquals(1, this.getEncoder().difference("Margaret", "Andrew")); [EOL]     assertEquals(0, this.getEncoder().difference("Janet", "Margaret")); [EOL]     assertEquals(4, this.getEncoder().difference("Green", "Greene")); [EOL]     assertEquals(0, this.getEncoder().difference("Blotchet-Halls", "Greene")); [EOL]     assertEquals(4, this.getEncoder().difference("Smith", "Smythe")); [EOL]     assertEquals(4, this.getEncoder().difference("Smithers", "Smythers")); [EOL]     assertEquals(2, this.getEncoder().difference("Anothers", "Brothers")); [EOL] } <line_num>: 127,144
public void testEncodeBasic() { [EOL]     assertEquals("T235", this.getEncoder().encode("testing")); [EOL]     assertEquals("T000", this.getEncoder().encode("The")); [EOL]     assertEquals("Q200", this.getEncoder().encode("quick")); [EOL]     assertEquals("B650", this.getEncoder().encode("brown")); [EOL]     assertEquals("F200", this.getEncoder().encode("fox")); [EOL]     assertEquals("J513", this.getEncoder().encode("jumped")); [EOL]     assertEquals("O160", this.getEncoder().encode("over")); [EOL]     assertEquals("T000", this.getEncoder().encode("the")); [EOL]     assertEquals("L200", this.getEncoder().encode("lazy")); [EOL]     assertEquals("D200", this.getEncoder().encode("dogs")); [EOL] } <line_num>: 146,157
public void testEncodeBatch2() { [EOL]     assertEquals("A462", this.getEncoder().encode("Allricht")); [EOL]     assertEquals("E166", this.getEncoder().encode("Eberhard")); [EOL]     assertEquals("E521", this.getEncoder().encode("Engebrethson")); [EOL]     assertEquals("H512", this.getEncoder().encode("Heimbach")); [EOL]     assertEquals("H524", this.getEncoder().encode("Hanselmann")); [EOL]     assertEquals("H431", this.getEncoder().encode("Hildebrand")); [EOL]     assertEquals("K152", this.getEncoder().encode("Kavanagh")); [EOL]     assertEquals("L530", this.getEncoder().encode("Lind")); [EOL]     assertEquals("L222", this.getEncoder().encode("Lukaschowsky")); [EOL]     assertEquals("M235", this.getEncoder().encode("McDonnell")); [EOL]     assertEquals("M200", this.getEncoder().encode("McGee")); [EOL]     assertEquals("O155", this.getEncoder().encode("Opnian")); [EOL]     assertEquals("O155", this.getEncoder().encode("Oppenheimer")); [EOL]     assertEquals("R355", this.getEncoder().encode("Riedemanas")); [EOL]     assertEquals("Z300", this.getEncoder().encode("Zita")); [EOL]     assertEquals("Z325", this.getEncoder().encode("Zitzmeinn")); [EOL] } <line_num>: 163,180
public void testEncodeBatch3() { [EOL]     assertEquals("W252", this.getEncoder().encode("Washington")); [EOL]     assertEquals("L000", this.getEncoder().encode("Lee")); [EOL]     assertEquals("G362", this.getEncoder().encode("Gutierrez")); [EOL]     assertEquals("P236", this.getEncoder().encode("Pfister")); [EOL]     assertEquals("J250", this.getEncoder().encode("Jackson")); [EOL]     assertEquals("T522", this.getEncoder().encode("Tymczak")); [EOL]     assertEquals("V532", this.getEncoder().encode("VanDeusen")); [EOL] } <line_num>: 186,196
public void testEncodeBatch4() { [EOL]     assertEquals("H452", this.getEncoder().encode("HOLMES")); [EOL]     assertEquals("A355", this.getEncoder().encode("ADOMOMI")); [EOL]     assertEquals("V536", this.getEncoder().encode("VONDERLEHR")); [EOL]     assertEquals("B400", this.getEncoder().encode("BALL")); [EOL]     assertEquals("S000", this.getEncoder().encode("SHAW")); [EOL]     assertEquals("J250", this.getEncoder().encode("JACKSON")); [EOL]     assertEquals("S545", this.getEncoder().encode("SCANLON")); [EOL]     assertEquals("S532", this.getEncoder().encode("SAINTJOHN")); [EOL] } <line_num>: 201,211
public void testBadCharacters() { [EOL]     assertEquals("H452", this.getEncoder().encode("HOL>MES")); [EOL] } <line_num>: 213,216
public void testEncodeIgnoreApostrophes() { [EOL]     this.encodeAll(new String[] { "OBrien", "'OBrien", "O'Brien", "OB'rien", "OBr'ien", "OBri'en", "OBrie'n", "OBrien'" }, "O165"); [EOL] } <line_num>: 218,220
public void testEncodeIgnoreHyphens() { [EOL]     this.encodeAll(new String[] { "KINGSMITH", "-KINGSMITH", "K-INGSMITH", "KI-NGSMITH", "KIN-GSMITH", "KING-SMITH", "KINGS-MITH", "KINGSM-ITH", "KINGSMI-TH", "KINGSMIT-H", "KINGSMITH-" }, "K525"); [EOL] } <line_num>: 225,240
public void testEncodeIgnoreTrimmable() { [EOL]     assertEquals("W252", this.getEncoder().encode(" \t\n\r Washington \t\n\r ")); [EOL] } <line_num>: 242,244
public void testHWRuleEx1() { [EOL]     assertEquals("A261", this.getEncoder().encode("Ashcraft")); [EOL] } <line_num>: 250,256
public void testHWRuleEx2() { [EOL]     assertEquals("B312", this.getEncoder().encode("BOOTHDAVIS")); [EOL]     assertEquals("B312", this.getEncoder().encode("BOOTH-DAVIS")); [EOL] } <line_num>: 264,267
public void testHWRuleEx3() { [EOL]     assertEquals("S460", this.getEncoder().encode("Sgler")); [EOL]     assertEquals("S460", this.getEncoder().encode("Swhgler")); [EOL]     this.encodeAll(new String[] { "SAILOR", "SALYER", "SAYLOR", "SCHALLER", "SCHELLER", "SCHILLER", "SCHOOLER", "SCHULER", "SCHUYLER", "SEILER", "SEYLER", "SHOLAR", "SHULER", "SILAR", "SILER", "SILLER" }, "S460"); [EOL] } <line_num>: 273,296
public void testMaxLength() throws Exception { [EOL]     Soundex soundex = new Soundex(); [EOL]     soundex.setMaxLength(soundex.getMaxLength()); [EOL]     assertEquals("S460", this.getEncoder().encode("Sgler")); [EOL] } <line_num>: 298,302
public void testMaxLengthLessThan3Fix() throws Exception { [EOL]     Soundex soundex = new Soundex(); [EOL]     soundex.setMaxLength(2); [EOL]     assertEquals("S460", soundex.encode("SCHELLER")); [EOL] } <line_num>: 304,308
public void testMsSqlServer1() { [EOL]     assertEquals("S530", this.getEncoder().encode("Smith")); [EOL]     assertEquals("S530", this.getEncoder().encode("Smythe")); [EOL] } <line_num>: 314,317
public void testMsSqlServer2() { [EOL]     this.encodeAll(new String[] { "Erickson", "Erickson", "Erikson", "Ericson", "Ericksen", "Ericsen" }, "E625"); [EOL] } <line_num>: 323,325
public void testMsSqlServer3() { [EOL]     assertEquals("A500", this.getEncoder().encode("Ann")); [EOL]     assertEquals("A536", this.getEncoder().encode("Andrew")); [EOL]     assertEquals("J530", this.getEncoder().encode("Janet")); [EOL]     assertEquals("M626", this.getEncoder().encode("Margaret")); [EOL]     assertEquals("S315", this.getEncoder().encode("Steven")); [EOL]     assertEquals("M240", this.getEncoder().encode("Michael")); [EOL]     assertEquals("R163", this.getEncoder().encode("Robert")); [EOL]     assertEquals("L600", this.getEncoder().encode("Laura")); [EOL]     assertEquals("A500", this.getEncoder().encode("Anne")); [EOL] } <line_num>: 330,340
public void testUsMappingOWithDiaeresis() { [EOL]     assertEquals("O000", this.getEncoder().encode("o")); [EOL]     if (Character.isLetter('ö')) { [EOL]         try { [EOL]             assertEquals("Ö000", this.getEncoder().encode("ö")); [EOL]             fail("Expected IllegalArgumentException not thrown"); [EOL]         } catch (IllegalArgumentException e) { [EOL]         } [EOL]     } else { [EOL]         assertEquals("", this.getEncoder().encode("ö")); [EOL]     } [EOL] } <line_num>: 347,359
public void testUsMappingEWithAcute() { [EOL]     assertEquals("E000", this.getEncoder().encode("e")); [EOL]     if (Character.isLetter('é')) { [EOL]         try { [EOL]             assertEquals("É000", this.getEncoder().encode("é")); [EOL]             fail("Expected IllegalArgumentException not thrown"); [EOL]         } catch (IllegalArgumentException e) { [EOL]         } [EOL]     } else { [EOL]         assertEquals("", this.getEncoder().encode("é")); [EOL]     } [EOL] } <line_num>: 366,378
public void testUsEnglishStatic() { [EOL]     assertEquals(Soundex.US_ENGLISH.soundex("Williams"), "W452"); [EOL] } <line_num>: 384,386
public void testNewInstance() { [EOL]     assertEquals(new Soundex().soundex("Williams"), "W452"); [EOL] } <line_num>: 392,394
