public QuotedPrintableCodecTest(String name) { [EOL]     super(name); [EOL] } <line_num>: 42,44
private String constructString(int[] unicodeChars) { [EOL]     StringBuffer buffer = new StringBuffer(); [EOL]     if (unicodeChars != null) { [EOL]         for (int i = 0; i < unicodeChars.length; i++) { [EOL]             buffer.append((char) unicodeChars[i]); [EOL]         } [EOL]     } [EOL]     return buffer.toString(); [EOL] } <line_num>: 46,54
public void testUTF8RoundTrip() throws Exception { [EOL]     String ru_msg = constructString(RUSSIAN_STUFF_UNICODE); [EOL]     String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE); [EOL]     QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(); [EOL]     assertEquals("=D0=92=D1=81=D0=B5=D0=BC_=D0=BF=D1=80=D0=B8=D0=B2=D0=B5=D1=82", qpcodec.encode(ru_msg, "UTF-8")); [EOL]     assertEquals("Gr=C3=BCezi_z=C3=A4m=C3=A4", qpcodec.encode(ch_msg, "UTF-8")); [EOL]     assertEquals(ru_msg, qpcodec.decode(qpcodec.encode(ru_msg, "UTF-8"), "UTF-8")); [EOL]     assertEquals(ch_msg, qpcodec.decode(qpcodec.encode(ch_msg, "UTF-8"), "UTF-8")); [EOL] } <line_num>: 56,71
public void testBasicEncodeDecode() throws Exception { [EOL]     QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(); [EOL]     String plain = "= Hello there =\r\n"; [EOL]     String encoded = qpcodec.encode(plain); [EOL]     assertEquals("Basic quoted-printable encoding test", "=3D Hello there =3D=0D=0A", encoded); [EOL]     assertEquals("Basic quoted-printable decoding test", plain, qpcodec.decode(encoded)); [EOL] } <line_num>: 73,81
public void testSafeCharEncodeDecode() throws Exception { [EOL]     QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(); [EOL]     String plain = "abc123_-.*~!@#$%^&()+{}\"\\;:`,/[]"; [EOL]     String encoded = qpcodec.encode(plain); [EOL]     assertEquals("Safe chars quoted-printable encoding test", plain, encoded); [EOL]     assertEquals("Safe chars quoted-printable decoding test", plain, qpcodec.decode(encoded)); [EOL] } <line_num>: 83,91
public void testUnsafeEncodeDecode() throws Exception { [EOL]     QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(); [EOL]     String plain = "=\r\n"; [EOL]     String encoded = qpcodec.encode(plain); [EOL]     assertEquals("Unsafe chars quoted-printable encoding test", "=3D=0D=0A", encoded); [EOL]     assertEquals("Unsafe chars quoted-printable decoding test", plain, qpcodec.decode(encoded)); [EOL] } <line_num>: 94,102
public void testEncodeDecodeNull() throws Exception { [EOL]     QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(); [EOL]     assertNull("Null string quoted-printable encoding test", qpcodec.encode((String) null)); [EOL]     assertNull("Null string quoted-printable decoding test", qpcodec.decode((String) null)); [EOL] } <line_num>: 104,110
public void testDecodeInvalid() throws Exception { [EOL]     QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(); [EOL]     try { [EOL]         qpcodec.decode("="); [EOL]         fail("DecoderException should have been thrown"); [EOL]     } catch (DecoderException e) { [EOL]     } [EOL]     try { [EOL]         qpcodec.decode("=A"); [EOL]         fail("DecoderException should have been thrown"); [EOL]     } catch (DecoderException e) { [EOL]     } [EOL]     try { [EOL]         qpcodec.decode("=WW"); [EOL]         fail("DecoderException should have been thrown"); [EOL]     } catch (DecoderException e) { [EOL]     } [EOL] } <line_num>: 113,133
public void testEncodeNull() throws Exception { [EOL]     QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(); [EOL]     byte[] plain = null; [EOL]     byte[] encoded = qpcodec.encode(plain); [EOL]     assertEquals("Encoding a null string should return null", null, encoded); [EOL] } <line_num>: 135,141
public void testEncodeUrlWithNullBitSet() throws Exception { [EOL]     QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(); [EOL]     String plain = "1+1 = 2"; [EOL]     String encoded = new String(QuotedPrintableCodec.encodeQuotedPrintable(null, plain.getBytes())); [EOL]     assertEquals("Basic quoted-printable encoding test", "1+1 =3D 2", encoded); [EOL]     assertEquals("Basic quoted-printable decoding test", plain, qpcodec.decode(encoded)); [EOL] } <line_num>: 143,153
public void testDecodeWithNullArray() throws Exception { [EOL]     byte[] plain = null; [EOL]     byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(plain); [EOL]     assertEquals("Result should be null", null, result); [EOL] } <line_num>: 155,159
public void testEncodeStringWithNull() throws Exception { [EOL]     QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(); [EOL]     String test = null; [EOL]     String result = qpcodec.encode(test, "charset"); [EOL]     assertEquals("Result should be null", null, result); [EOL] } <line_num>: 161,166
public void testDecodeStringWithNull() throws Exception { [EOL]     QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(); [EOL]     String test = null; [EOL]     String result = qpcodec.decode(test, "charset"); [EOL]     assertEquals("Result should be null", null, result); [EOL] } <line_num>: 168,173
public void testEncodeObjects() throws Exception { [EOL]     QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(); [EOL]     String plain = "1+1 = 2"; [EOL]     String encoded = (String) qpcodec.encode((Object) plain); [EOL]     assertEquals("Basic quoted-printable encoding test", "1+1 =3D 2", encoded); [EOL]     byte[] plainBA = plain.getBytes(); [EOL]     byte[] encodedBA = (byte[]) qpcodec.encode((Object) plainBA); [EOL]     encoded = new String(encodedBA); [EOL]     assertEquals("Basic quoted-printable encoding test", "1+1 =3D 2", encoded); [EOL]     Object result = qpcodec.encode((Object) null); [EOL]     assertEquals("Encoding a null Object should return null", null, result); [EOL]     try { [EOL]         Object dObj = new Double(3.0); [EOL]         qpcodec.encode(dObj); [EOL]         fail("Trying to url encode a Double object should cause an exception."); [EOL]     } catch (EncoderException ee) { [EOL]     } [EOL] } <line_num>: 175,198
public void testInvalidEncoding() { [EOL]     QuotedPrintableCodec qpcodec = new QuotedPrintableCodec("NONSENSE"); [EOL]     String plain = "Hello there!"; [EOL]     try { [EOL]         qpcodec.encode(plain); [EOL]         fail("We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked."); [EOL]     } catch (EncoderException ee) { [EOL]     } [EOL]     try { [EOL]         qpcodec.decode(plain); [EOL]         fail("We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked."); [EOL]     } catch (DecoderException ee) { [EOL]     } [EOL] } <line_num>: 200,215
public void testDecodeObjects() throws Exception { [EOL]     QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(); [EOL]     String plain = "1+1 =3D 2"; [EOL]     String decoded = (String) qpcodec.decode((Object) plain); [EOL]     assertEquals("Basic quoted-printable decoding test", "1+1 = 2", decoded); [EOL]     byte[] plainBA = plain.getBytes(); [EOL]     byte[] decodedBA = (byte[]) qpcodec.decode((Object) plainBA); [EOL]     decoded = new String(decodedBA); [EOL]     assertEquals("Basic quoted-printable decoding test", "1+1 = 2", decoded); [EOL]     Object result = qpcodec.decode((Object) null); [EOL]     assertEquals("Decoding a null Object should return null", null, result); [EOL]     try { [EOL]         Object dObj = new Double(3.0); [EOL]         qpcodec.decode(dObj); [EOL]         fail("Trying to url encode a Double object should cause an exception."); [EOL]     } catch (DecoderException ee) { [EOL]     } [EOL] } <line_num>: 217,240
public void testDefaultEncoding() throws Exception { [EOL]     String plain = "Hello there!"; [EOL]     QuotedPrintableCodec qpcodec = new QuotedPrintableCodec("UnicodeBig"); [EOL]     qpcodec.encode(plain); [EOL]     String encoded1 = qpcodec.encode(plain, "UnicodeBig"); [EOL]     String encoded2 = qpcodec.encode(plain); [EOL]     assertEquals(encoded1, encoded2); [EOL] } <line_num>: 242,249
