public QCodecTest(String name) { [EOL]     super(name); [EOL] } <line_num>: 43,45
private String constructString(int[] unicodeChars) { [EOL]     StringBuffer buffer = new StringBuffer(); [EOL]     if (unicodeChars != null) { [EOL]         for (int i = 0; i < unicodeChars.length; i++) { [EOL]             buffer.append((char) unicodeChars[i]); [EOL]         } [EOL]     } [EOL]     return buffer.toString(); [EOL] } <line_num>: 47,55
public void testNullInput() throws Exception { [EOL]     QCodec qcodec = new QCodec(); [EOL]     assertNull(qcodec.doDecoding(null)); [EOL]     assertNull(qcodec.doEncoding(null)); [EOL] } <line_num>: 57,61
public void testUTF8RoundTrip() throws Exception { [EOL]     String ru_msg = constructString(RUSSIAN_STUFF_UNICODE); [EOL]     String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE); [EOL]     QCodec qcodec = new QCodec("UTF-8"); [EOL]     assertEquals("=?UTF-8?Q?=D0=92=D1=81=D0=B5=D0=BC=5F=D0=BF=D1=80=D0=B8=D0=B2=D0=B5=D1=82?=", qcodec.encode(ru_msg)); [EOL]     assertEquals("=?UTF-8?Q?Gr=C3=BCezi=5Fz=C3=A4m=C3=A4?=", qcodec.encode(ch_msg)); [EOL]     assertEquals(ru_msg, qcodec.decode(qcodec.encode(ru_msg))); [EOL]     assertEquals(ch_msg, qcodec.decode(qcodec.encode(ch_msg))); [EOL] } <line_num>: 63,78
public void testBasicEncodeDecode() throws Exception { [EOL]     QCodec qcodec = new QCodec(); [EOL]     String plain = "= Hello there =\r\n"; [EOL]     String encoded = qcodec.encode(plain); [EOL]     assertEquals("Basic Q encoding test", "=?UTF-8?Q?=3D Hello there =3D=0D=0A?=", encoded); [EOL]     assertEquals("Basic Q decoding test", plain, qcodec.decode(encoded)); [EOL] } <line_num>: 81,89
public void testUnsafeEncodeDecode() throws Exception { [EOL]     QCodec qcodec = new QCodec(); [EOL]     String plain = "?_=\r\n"; [EOL]     String encoded = qcodec.encode(plain); [EOL]     assertEquals("Unsafe chars Q encoding test", "=?UTF-8?Q?=3F=5F=3D=0D=0A?=", encoded); [EOL]     assertEquals("Unsafe chars Q decoding test", plain, qcodec.decode(encoded)); [EOL] } <line_num>: 91,99
public void testEncodeDecodeNull() throws Exception { [EOL]     QCodec qcodec = new QCodec(); [EOL]     assertNull("Null string Q encoding test", qcodec.encode((String) null)); [EOL]     assertNull("Null string Q decoding test", qcodec.decode((String) null)); [EOL] } <line_num>: 101,107
public void testEncodeStringWithNull() throws Exception { [EOL]     QCodec qcodec = new QCodec(); [EOL]     String test = null; [EOL]     String result = qcodec.encode(test, "charset"); [EOL]     assertEquals("Result should be null", null, result); [EOL] } <line_num>: 109,114
public void testDecodeStringWithNull() throws Exception { [EOL]     QCodec qcodec = new QCodec(); [EOL]     String test = null; [EOL]     String result = qcodec.decode(test); [EOL]     assertEquals("Result should be null", null, result); [EOL] } <line_num>: 116,121
public void testEncodeObjects() throws Exception { [EOL]     QCodec qcodec = new QCodec(); [EOL]     String plain = "1+1 = 2"; [EOL]     String encoded = (String) qcodec.encode((Object) plain); [EOL]     assertEquals("Basic Q encoding test", "=?UTF-8?Q?1+1 =3D 2?=", encoded); [EOL]     Object result = qcodec.encode((Object) null); [EOL]     assertEquals("Encoding a null Object should return null", null, result); [EOL]     try { [EOL]         Object dObj = new Double(3.0); [EOL]         qcodec.encode(dObj); [EOL]         fail("Trying to url encode a Double object should cause an exception."); [EOL]     } catch (EncoderException ee) { [EOL]     } [EOL] } <line_num>: 124,141
public void testInvalidEncoding() { [EOL]     QCodec qcodec = new QCodec("NONSENSE"); [EOL]     try { [EOL]         qcodec.encode("Hello there!"); [EOL]         fail("We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked."); [EOL]     } catch (EncoderException ee) { [EOL]     } [EOL]     try { [EOL]         qcodec.decode("=?NONSENSE?Q?Hello there!?="); [EOL]         fail("We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked."); [EOL]     } catch (DecoderException ee) { [EOL]     } [EOL] } <line_num>: 144,158
public void testDecodeObjects() throws Exception { [EOL]     QCodec qcodec = new QCodec(); [EOL]     String decoded = "=?UTF-8?Q?1+1 =3D 2?="; [EOL]     String plain = (String) qcodec.decode((Object) decoded); [EOL]     assertEquals("Basic Q decoding test", "1+1 = 2", plain); [EOL]     Object result = qcodec.decode((Object) null); [EOL]     assertEquals("Decoding a null Object should return null", null, result); [EOL]     try { [EOL]         Object dObj = new Double(3.0); [EOL]         qcodec.decode(dObj); [EOL]         fail("Trying to url encode a Double object should cause an exception."); [EOL]     } catch (DecoderException ee) { [EOL]     } [EOL] } <line_num>: 160,177
public void testEncodeDecodeBlanks() throws Exception { [EOL]     String plain = "Mind those pesky blanks"; [EOL]     String encoded1 = "=?UTF-8?Q?Mind those pesky blanks?="; [EOL]     String encoded2 = "=?UTF-8?Q?Mind_those_pesky_blanks?="; [EOL]     QCodec qcodec = new QCodec(); [EOL]     qcodec.setEncodeBlanks(false); [EOL]     String s = qcodec.encode(plain); [EOL]     assertEquals("Blanks encoding with the Q codec test", encoded1, s); [EOL]     qcodec.setEncodeBlanks(true); [EOL]     s = qcodec.encode(plain); [EOL]     assertEquals("Blanks encoding with the Q codec test", encoded2, s); [EOL]     s = qcodec.decode(encoded1); [EOL]     assertEquals("Blanks decoding with the Q codec test", plain, s); [EOL]     s = qcodec.decode(encoded2); [EOL]     assertEquals("Blanks decoding with the Q codec test", plain, s); [EOL] } <line_num>: 180,195
public void testLetUsMakeCloverHappy() throws Exception { [EOL]     QCodec qcodec = new QCodec(); [EOL]     qcodec.setEncodeBlanks(true); [EOL]     assertTrue(qcodec.isEncodeBlanks()); [EOL]     qcodec.setEncodeBlanks(false); [EOL]     assertFalse(qcodec.isEncodeBlanks()); [EOL] } <line_num>: 198,204
