public URLCodecTest(String name) { [EOL]     super(name); [EOL] } <line_num>: 44,46
private void validateState(URLCodec urlCodec) { [EOL]     assertEquals(urlCodec.getEncoding(), urlCodec.getDefaultCharset()); [EOL] } <line_num>: 48,50
private String constructString(int[] unicodeChars) { [EOL]     StringBuffer buffer = new StringBuffer(); [EOL]     if (unicodeChars != null) { [EOL]         for (int i = 0; i < unicodeChars.length; i++) { [EOL]             buffer.append((char) unicodeChars[i]); [EOL]         } [EOL]     } [EOL]     return buffer.toString(); [EOL] } <line_num>: 52,60
public void testUTF8RoundTrip() throws Exception { [EOL]     String ru_msg = constructString(RUSSIAN_STUFF_UNICODE); [EOL]     String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE); [EOL]     URLCodec urlCodec = new URLCodec(); [EOL]     this.validateState(urlCodec); [EOL]     assertEquals("%D0%92%D1%81%D0%B5%D0%BC_%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82", urlCodec.encode(ru_msg, "UTF-8")); [EOL]     assertEquals("Gr%C3%BCezi_z%C3%A4m%C3%A4", urlCodec.encode(ch_msg, "UTF-8")); [EOL]     assertEquals(ru_msg, urlCodec.decode(urlCodec.encode(ru_msg, "UTF-8"), "UTF-8")); [EOL]     assertEquals(ch_msg, urlCodec.decode(urlCodec.encode(ch_msg, "UTF-8"), "UTF-8")); [EOL]     this.validateState(urlCodec); [EOL] } <line_num>: 62,79
public void testBasicEncodeDecode() throws Exception { [EOL]     URLCodec urlCodec = new URLCodec(); [EOL]     String plain = "Hello there!"; [EOL]     String encoded = urlCodec.encode(plain); [EOL]     assertEquals("Basic URL encoding test", "Hello+there%21", encoded); [EOL]     assertEquals("Basic URL decoding test", plain, urlCodec.decode(encoded)); [EOL]     this.validateState(urlCodec); [EOL] } <line_num>: 81,90
public void testSafeCharEncodeDecode() throws Exception { [EOL]     URLCodec urlCodec = new URLCodec(); [EOL]     String plain = "abc123_-.*"; [EOL]     String encoded = urlCodec.encode(plain); [EOL]     assertEquals("Safe chars URL encoding test", plain, encoded); [EOL]     assertEquals("Safe chars URL decoding test", plain, urlCodec.decode(encoded)); [EOL]     this.validateState(urlCodec); [EOL] } <line_num>: 93,102
public void testUnsafeEncodeDecode() throws Exception { [EOL]     URLCodec urlCodec = new URLCodec(); [EOL]     String plain = "~!@#$%^&()+{}\"\\;:`,/[]"; [EOL]     String encoded = urlCodec.encode(plain); [EOL]     assertEquals("Unsafe chars URL encoding test", "%7E%21%40%23%24%25%5E%26%28%29%2B%7B%7D%22%5C%3B%3A%60%2C%2F%5B%5D", encoded); [EOL]     assertEquals("Unsafe chars URL decoding test", plain, urlCodec.decode(encoded)); [EOL]     this.validateState(urlCodec); [EOL] } <line_num>: 105,114
public void testEncodeDecodeNull() throws Exception { [EOL]     URLCodec urlCodec = new URLCodec(); [EOL]     assertNull("Null string URL encoding test", urlCodec.encode((String) null)); [EOL]     assertNull("Null string URL decoding test", urlCodec.decode((String) null)); [EOL]     this.validateState(urlCodec); [EOL] } <line_num>: 117,124
public void testDecodeInvalid() throws Exception { [EOL]     URLCodec urlCodec = new URLCodec(); [EOL]     try { [EOL]         urlCodec.decode("%"); [EOL]         fail("DecoderException should have been thrown"); [EOL]     } catch (DecoderException e) { [EOL]     } [EOL]     try { [EOL]         urlCodec.decode("%A"); [EOL]         fail("DecoderException should have been thrown"); [EOL]     } catch (DecoderException e) { [EOL]     } [EOL]     try { [EOL]         urlCodec.decode("%WW"); [EOL]         fail("DecoderException should have been thrown"); [EOL]     } catch (DecoderException e) { [EOL]     } [EOL]     this.validateState(urlCodec); [EOL] } <line_num>: 127,148
public void testDecodeInvalidContent() throws UnsupportedEncodingException, DecoderException { [EOL]     String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE); [EOL]     URLCodec urlCodec = new URLCodec(); [EOL]     byte[] input = ch_msg.getBytes("ISO-8859-1"); [EOL]     byte[] output = urlCodec.decode(input); [EOL]     assertEquals(input.length, output.length); [EOL]     for (int i = 0; i < input.length; i++) { [EOL]         assertEquals(input[i], output[i]); [EOL]     } [EOL]     this.validateState(urlCodec); [EOL] } <line_num>: 150,160
public void testEncodeNull() throws Exception { [EOL]     URLCodec urlCodec = new URLCodec(); [EOL]     byte[] plain = null; [EOL]     byte[] encoded = urlCodec.encode(plain); [EOL]     assertEquals("Encoding a null string should return null", null, encoded); [EOL]     this.validateState(urlCodec); [EOL] } <line_num>: 162,169
public void testEncodeUrlWithNullBitSet() throws Exception { [EOL]     URLCodec urlCodec = new URLCodec(); [EOL]     String plain = "Hello there!"; [EOL]     String encoded = new String(URLCodec.encodeUrl(null, plain.getBytes())); [EOL]     assertEquals("Basic URL encoding test", "Hello+there%21", encoded); [EOL]     assertEquals("Basic URL decoding test", plain, urlCodec.decode(encoded)); [EOL]     this.validateState(urlCodec); [EOL] } <line_num>: 171,180
public void testDecodeWithNullArray() throws Exception { [EOL]     byte[] plain = null; [EOL]     byte[] result = URLCodec.decodeUrl(plain); [EOL]     assertEquals("Result should be null", null, result); [EOL] } <line_num>: 182,186
public void testEncodeStringWithNull() throws Exception { [EOL]     URLCodec urlCodec = new URLCodec(); [EOL]     String test = null; [EOL]     String result = urlCodec.encode(test, "charset"); [EOL]     assertEquals("Result should be null", null, result); [EOL] } <line_num>: 188,193
public void testDecodeStringWithNull() throws Exception { [EOL]     URLCodec urlCodec = new URLCodec(); [EOL]     String test = null; [EOL]     String result = urlCodec.decode(test, "charset"); [EOL]     assertEquals("Result should be null", null, result); [EOL] } <line_num>: 195,200
public void testEncodeObjects() throws Exception { [EOL]     URLCodec urlCodec = new URLCodec(); [EOL]     String plain = "Hello there!"; [EOL]     String encoded = (String) urlCodec.encode((Object) plain); [EOL]     assertEquals("Basic URL encoding test", "Hello+there%21", encoded); [EOL]     byte[] plainBA = plain.getBytes(); [EOL]     byte[] encodedBA = (byte[]) urlCodec.encode((Object) plainBA); [EOL]     encoded = new String(encodedBA); [EOL]     assertEquals("Basic URL encoding test", "Hello+there%21", encoded); [EOL]     Object result = urlCodec.encode((Object) null); [EOL]     assertEquals("Encoding a null Object should return null", null, result); [EOL]     try { [EOL]         Object dObj = new Double(3.0); [EOL]         urlCodec.encode(dObj); [EOL]         fail("Trying to url encode a Double object should cause an exception."); [EOL]     } catch (EncoderException ee) { [EOL]     } [EOL]     this.validateState(urlCodec); [EOL] } <line_num>: 202,226
public void testInvalidEncoding() { [EOL]     URLCodec urlCodec = new URLCodec("NONSENSE"); [EOL]     String plain = "Hello there!"; [EOL]     try { [EOL]         urlCodec.encode(plain); [EOL]         fail("We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked."); [EOL]     } catch (EncoderException ee) { [EOL]     } [EOL]     try { [EOL]         urlCodec.decode(plain); [EOL]         fail("We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked."); [EOL]     } catch (DecoderException ee) { [EOL]     } [EOL]     this.validateState(urlCodec); [EOL] } <line_num>: 228,244
public void testDecodeObjects() throws Exception { [EOL]     URLCodec urlCodec = new URLCodec(); [EOL]     String plain = "Hello+there%21"; [EOL]     String decoded = (String) urlCodec.decode((Object) plain); [EOL]     assertEquals("Basic URL decoding test", "Hello there!", decoded); [EOL]     byte[] plainBA = plain.getBytes(); [EOL]     byte[] decodedBA = (byte[]) urlCodec.decode((Object) plainBA); [EOL]     decoded = new String(decodedBA); [EOL]     assertEquals("Basic URL decoding test", "Hello there!", decoded); [EOL]     Object result = urlCodec.decode((Object) null); [EOL]     assertEquals("Decoding a null Object should return null", null, result); [EOL]     try { [EOL]         Object dObj = new Double(3.0); [EOL]         urlCodec.decode(dObj); [EOL]         fail("Trying to url encode a Double object should cause an exception."); [EOL]     } catch (DecoderException ee) { [EOL]     } [EOL]     this.validateState(urlCodec); [EOL] } <line_num>: 246,270
public void testDefaultEncoding() throws Exception { [EOL]     String plain = "Hello there!"; [EOL]     URLCodec urlCodec = new URLCodec("UnicodeBig"); [EOL]     urlCodec.encode(plain); [EOL]     String encoded1 = urlCodec.encode(plain, "UnicodeBig"); [EOL]     String encoded2 = urlCodec.encode(plain); [EOL]     assertEquals(encoded1, encoded2); [EOL]     this.validateState(urlCodec); [EOL] } <line_num>: 272,280
