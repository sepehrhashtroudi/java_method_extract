private Selector(String query, Element root) { [EOL]     Validate.notNull(query); [EOL]     query = query.trim(); [EOL]     Validate.notEmpty(query); [EOL]     Validate.notNull(root); [EOL]     this.elements = new LinkedHashSet<Element>(); [EOL]     this.query = query; [EOL]     this.root = root; [EOL]     this.tq = new TokenQueue(query); [EOL] } <line_num>: 54,64
public SelectorParseException(String s) { [EOL]     super(s); [EOL] } <line_num>: 332,334
public static Elements select(String query, Element root) { [EOL]     return new Selector(query, root).select(); [EOL] } <line_num>: 72,74
public static Elements select(String query, Iterable<Element> roots) { [EOL]     Validate.notEmpty(query); [EOL]     Validate.notNull(roots); [EOL]     LinkedHashSet<Element> elements = new LinkedHashSet<Element>(); [EOL]     for (Element root : roots) { [EOL]         elements.addAll(select(query, root)); [EOL]     } [EOL]     return new Elements(elements); [EOL] } <line_num>: 82,91
private Elements select() { [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchesAny(combinators)) { [EOL]         elements.add(root); [EOL]         combinator(tq.consume().toString()); [EOL]     } else { [EOL]         addElements(findElements()); [EOL]     } [EOL]     while (!tq.isEmpty()) { [EOL]         boolean seenWhite = tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(",")) { [EOL]             while (!tq.isEmpty()) { [EOL]                 String subQuery = tq.chompTo(","); [EOL]                 elements.addAll(select(subQuery, root)); [EOL]             } [EOL]         } else if (tq.matchesAny(combinators)) { [EOL]             combinator(tq.consume().toString()); [EOL]         } else if (seenWhite) { [EOL]             combinator(" "); [EOL]         } else { [EOL]             Elements candidates = findElements(); [EOL]             intersectElements(filterForSelf(elements, candidates)); [EOL]         } [EOL]     } [EOL]     return new Elements(elements); [EOL] } <line_num>: 93,122
private void combinator(String combinator) { [EOL]     tq.consumeWhitespace(); [EOL]     String subQuery = tq.consumeToAny(combinators); [EOL]     Elements output; [EOL]     if (combinator.equals(">")) [EOL]         output = filterForChildren(elements, select(subQuery, elements)); [EOL]     else if (combinator.equals(" ")) [EOL]         output = filterForDescendants(elements, select(subQuery, elements)); [EOL]     else if (combinator.equals("+")) [EOL]         output = filterForAdjacentSiblings(elements, select(subQuery, root)); [EOL]     else if (combinator.equals("~")) [EOL]         output = filterForGeneralSiblings(elements, select(subQuery, root)); [EOL]     else [EOL]         throw new IllegalStateException("Unknown combinator: " + combinator); [EOL]     elements.clear(); [EOL]     elements.addAll(output); [EOL] } <line_num>: 124,141
private Elements findElements() { [EOL]     if (tq.matchChomp("#")) { [EOL]         return byId(); [EOL]     } else if (tq.matchChomp(".")) { [EOL]         return byClass(); [EOL]     } else if (tq.matchesWord()) { [EOL]         return byTag(); [EOL]     } else if (tq.matchChomp("[")) { [EOL]         return byAttribute(); [EOL]     } else if (tq.matchChomp("*")) { [EOL]         return allElements(); [EOL]     } else if (tq.matchChomp(":lt(")) { [EOL]         return indexLessThan(); [EOL]     } else if (tq.matchChomp(":gt(")) { [EOL]         return indexGreaterThan(); [EOL]     } else if (tq.matchChomp(":eq(")) { [EOL]         return indexEquals(); [EOL]     } else { [EOL]         throw new SelectorParseException("Could not parse query " + query); [EOL]     } [EOL] } <line_num>: 143,163
private void addElements(Collection<Element> add) { [EOL]     elements.addAll(add); [EOL] } <line_num>: 165,167
private void intersectElements(Collection<Element> intersect) { [EOL]     elements.retainAll(intersect); [EOL] } <line_num>: 169,171
private Elements byId() { [EOL]     String id = tq.consumeCssIdentifier(); [EOL]     Validate.notEmpty(id); [EOL]     Element found = root.getElementById(id); [EOL]     Elements byId = new Elements(); [EOL]     if (found != null) [EOL]         byId.add(found); [EOL]     return byId; [EOL] } <line_num>: 173,182
private Elements byClass() { [EOL]     String className = tq.consumeCssIdentifier(); [EOL]     Validate.notEmpty(className); [EOL]     return root.getElementsByClass(className); [EOL] } <line_num>: 184,189
private Elements byTag() { [EOL]     String tagName = tq.consumeWord(); [EOL]     Validate.notEmpty(tagName); [EOL]     return root.getElementsByTag(tagName); [EOL] } <line_num>: 191,196
private Elements byAttribute() { [EOL]     String key = tq.consumeToAny("=", "!=", "^=", "$=", "*=", "]"); [EOL]     Validate.notEmpty(key); [EOL]     if (tq.matchChomp("]")) { [EOL]         return root.getElementsByAttribute(key); [EOL]     } else { [EOL]         if (tq.matchChomp("=")) [EOL]             return root.getElementsByAttributeValue(key, tq.chompTo("]")); [EOL]         else if (tq.matchChomp("!=")) [EOL]             return root.getElementsByAttributeValueNot(key, tq.chompTo("]")); [EOL]         else if (tq.matchChomp("^=")) [EOL]             return root.getElementsByAttributeValueStarting(key, tq.chompTo("]")); [EOL]         else if (tq.matchChomp("$=")) [EOL]             return root.getElementsByAttributeValueEnding(key, tq.chompTo("]")); [EOL]         else if (tq.matchChomp("*=")) [EOL]             return root.getElementsByAttributeValueContaining(key, tq.chompTo("]")); [EOL]         else [EOL]             throw new SelectorParseException("Could not parse attribute query " + query); [EOL]     } [EOL] } <line_num>: 198,223
private Elements allElements() { [EOL]     return root.getAllElements(); [EOL] } <line_num>: 225,227
private Elements indexLessThan() { [EOL]     return root.getElementsByIndexLessThan(consumeIndex()); [EOL] } <line_num>: 230,232
private Elements indexGreaterThan() { [EOL]     return root.getElementsByIndexGreaterThan(consumeIndex()); [EOL] } <line_num>: 234,236
private Elements indexEquals() { [EOL]     return root.getElementsByIndexEquals(consumeIndex()); [EOL] } <line_num>: 238,240
private int consumeIndex() { [EOL]     String indexS = tq.chompTo(")").trim(); [EOL]     Validate.isTrue(StringUtils.isNumeric(indexS), "Index must be numeric"); [EOL]     int index = Integer.parseInt(indexS); [EOL]     return index; [EOL] } <line_num>: 242,248
private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         for (Element p : parents) { [EOL]             if (c.parent() != null && c.parent().equals(p)) { [EOL]                 children.add(c); [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]     } [EOL]     return children; [EOL] } <line_num>: 251,262
private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         boolean found = false; [EOL]         for (Element p : parents) { [EOL]             if (c.equals(p)) { [EOL]                 found = true; [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]         if (!found) [EOL]             children.add(c); [EOL]     } [EOL]     return children; [EOL] } <line_num>: 266,280
private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates) { [EOL]     Elements siblings = new Elements(); [EOL]     SIBLING: for (Element c : candidates) { [EOL]         for (Element e : elements) { [EOL]             if (!e.parent().equals(c.parent())) [EOL]                 continue; [EOL]             Element previousSib = c.previousElementSibling(); [EOL]             if (previousSib != null && previousSib.equals(e)) { [EOL]                 siblings.add(c); [EOL]                 continue SIBLING; [EOL]             } [EOL]         } [EOL]     } [EOL]     return siblings; [EOL] } <line_num>: 283,297
private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates) { [EOL]     Elements output = new Elements(); [EOL]     SIBLING: for (Element c : candidates) { [EOL]         for (Element e : elements) { [EOL]             if (!e.parent().equals(c.parent())) [EOL]                 continue; [EOL]             int ePos = e.elementSiblingIndex(); [EOL]             int cPos = c.elementSiblingIndex(); [EOL]             if (cPos > ePos) { [EOL]                 output.add(c); [EOL]                 continue SIBLING; [EOL]             } [EOL]         } [EOL]     } [EOL]     return output; [EOL] } <line_num>: 300,315
private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         for (Element p : parents) { [EOL]             if (c.equals(p)) { [EOL]                 children.add(c); [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]     } [EOL]     return children; [EOL] } <line_num>: 318,329
