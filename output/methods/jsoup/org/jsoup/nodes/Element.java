public Element(Tag tag, String baseUri, Attributes attributes) { [EOL]     super(baseUri, attributes); [EOL]     Validate.notNull(tag); [EOL]     this.tag = tag; [EOL] } <line_num>: 34,39
public Element(Tag tag, String baseUri) { [EOL]     this(tag, baseUri, new Attributes()); [EOL] } <line_num>: 49,51
@Override [EOL] public String nodeName() { [EOL]     return tag.getName(); [EOL] } <line_num>: 53,56
public String tagName() { [EOL]     return tag.getName(); [EOL] } <line_num>: 63,65
public Tag tag() { [EOL]     return tag; [EOL] } <line_num>: 72,74
public boolean isBlock() { [EOL]     return tag.isBlock(); [EOL] } <line_num>: 82,84
public String id() { [EOL]     String id = attr("id"); [EOL]     return id == null ? "" : id; [EOL] } <line_num>: 91,94
public Element attr(String attributeKey, String attributeValue) { [EOL]     super.attr(attributeKey, attributeValue); [EOL]     return this; [EOL] } <line_num>: 102,105
@Override [EOL] public Element parent() { [EOL]     return (Element) super.parent(); [EOL] } <line_num>: 107,110
public Element child(int index) { [EOL]     return children().get(index); [EOL] } <line_num>: 122,124
public Elements children() { [EOL]     List<Element> elements = new ArrayList<Element>(); [EOL]     for (Node node : childNodes) { [EOL]         if (node instanceof Element) [EOL]             elements.add((Element) node); [EOL]     } [EOL]     return new Elements(elements); [EOL] } <line_num>: 134,142
public Elements select(String query) { [EOL]     return Selector.select(query, this); [EOL] } <line_num>: 161,163
public Element appendChild(Node child) { [EOL]     Validate.notNull(child); [EOL]     child.setParentNode(this); [EOL]     childNodes.add(child); [EOL]     return this; [EOL] } <line_num>: 171,177
public Element prependChild(Node child) { [EOL]     Validate.notNull(child); [EOL]     child.setParentNode(this); [EOL]     childNodes.add(0, child); [EOL]     return this; [EOL] } <line_num>: 185,191
public Element appendElement(String tagName) { [EOL]     Element child = new Element(Tag.valueOf(tagName), baseUri()); [EOL]     appendChild(child); [EOL]     return child; [EOL] } <line_num>: 200,204
public Element prependElement(String tagName) { [EOL]     Element child = new Element(Tag.valueOf(tagName), baseUri()); [EOL]     prependChild(child); [EOL]     return child; [EOL] } <line_num>: 213,217
public Element appendText(String text) { [EOL]     TextNode node = new TextNode(text, baseUri()); [EOL]     appendChild(node); [EOL]     return this; [EOL] } <line_num>: 225,229
public Element prependText(String text) { [EOL]     TextNode node = new TextNode(text, baseUri()); [EOL]     prependChild(node); [EOL]     return this; [EOL] } <line_num>: 237,241
public Element append(String html) { [EOL]     Validate.notNull(html); [EOL]     Element fragment = Parser.parseBodyFragment(html, baseUri).body(); [EOL]     for (Node node : fragment.childNodes()) { [EOL]         node.parentNode = null; [EOL]         appendChild(node); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 249,259
public Element prepend(String html) { [EOL]     Validate.notNull(html); [EOL]     Element fragment = Parser.parseBodyFragment(html, baseUri).body(); [EOL]     List<Node> nodes = fragment.childNodes(); [EOL]     for (int i = nodes.size() - 1; i >= 0; i--) { [EOL]         Node node = nodes.get(i); [EOL]         node.parentNode = null; [EOL]         prependChild(node); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 267,279
public Element empty() { [EOL]     childNodes.clear(); [EOL]     return this; [EOL] } <line_num>: 285,288
public Element wrap(String html) { [EOL]     Validate.notEmpty(html); [EOL]     Element wrapBody = Parser.parseBodyFragment(html, baseUri).body(); [EOL]     Elements wrapChildren = wrapBody.children(); [EOL]     Element wrap = wrapChildren.first(); [EOL]     if (wrap == null) [EOL]         return null; [EOL]     Element deepest = getDeepChild(wrap); [EOL]     parentNode.replaceChild(this, wrap); [EOL]     deepest.addChild(this); [EOL]     if (wrapChildren.size() > 1) { [EOL]         for (int i = 1; i < wrapChildren.size(); i++) { [EOL]             Element remainder = wrapChildren.get(i); [EOL]             remainder.parentNode.removeChild(remainder); [EOL]             wrap.appendChild(remainder); [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 295,317
private Element getDeepChild(Element el) { [EOL]     List<Element> children = el.children(); [EOL]     if (children.size() > 0) [EOL]         return getDeepChild(children.get(0)); [EOL]     else [EOL]         return el; [EOL] } <line_num>: 319,325
public Elements siblingElements() { [EOL]     return parent().children(); [EOL] } <line_num>: 331,333
public Element nextElementSibling() { [EOL]     List<Element> siblings = parent().children(); [EOL]     Integer index = indexInList(this, siblings); [EOL]     Validate.notNull(index); [EOL]     if (siblings.size() > index + 1) [EOL]         return siblings.get(index + 1); [EOL]     else [EOL]         return null; [EOL] } <line_num>: 343,351
public Element previousElementSibling() { [EOL]     List<Element> siblings = parent().children(); [EOL]     Integer index = indexInList(this, siblings); [EOL]     Validate.notNull(index); [EOL]     if (index > 0) [EOL]         return siblings.get(index - 1); [EOL]     else [EOL]         return null; [EOL] } <line_num>: 358,366
public Element firstElementSibling() { [EOL]     List<Element> siblings = parent().children(); [EOL]     return siblings.size() > 1 ? siblings.get(0) : null; [EOL] } <line_num>: 372,376
public Integer elementSiblingIndex() { [EOL]     if (parent() == null) [EOL]         return 0; [EOL]     return indexInList(this, parent().children()); [EOL] } <line_num>: 383,386
public Element lastElementSibling() { [EOL]     List<Element> siblings = parent().children(); [EOL]     return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null; [EOL] } <line_num>: 392,395
public Elements getElementsByTag(String tagName) { [EOL]     Validate.notEmpty(tagName); [EOL]     tagName = tagName.toLowerCase().trim(); [EOL]     return Collector.collect(new Evaluator.Tag(tagName), this); [EOL] } <line_num>: 404,409
public Element getElementById(String id) { [EOL]     Validate.notEmpty(id); [EOL]     Elements elements = Collector.collect(new Evaluator.Id(id), this); [EOL]     if (elements.size() > 0) [EOL]         return elements.get(0); [EOL]     else [EOL]         return null; [EOL] } <line_num>: 420,428
public Elements getElementsByClass(String className) { [EOL]     Validate.notEmpty(className); [EOL]     return Collector.collect(new Evaluator.Class(className), this); [EOL] } <line_num>: 441,445
public Elements getElementsByAttribute(String key) { [EOL]     Validate.notEmpty(key); [EOL]     key = key.trim().toLowerCase(); [EOL]     return Collector.collect(new Evaluator.Attribute(key), this); [EOL] } <line_num>: 453,458
public Elements getElementsByAttributeValue(String key, String value) { [EOL]     return Collector.collect(new Evaluator.AttributeWithValue(key, value), this); [EOL] } <line_num>: 467,469
public Elements getElementsByAttributeValueNot(String key, String value) { [EOL]     return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this); [EOL] } <line_num>: 478,480
public Elements getElementsByAttributeValueStarting(String key, String valuePrefix) { [EOL]     return Collector.collect(new Evaluator.AttributeWithValueStarting(key, valuePrefix), this); [EOL] } <line_num>: 489,491
public Elements getElementsByAttributeValueEnding(String key, String valueSuffix) { [EOL]     return Collector.collect(new Evaluator.AttributeWithValueEnding(key, valueSuffix), this); [EOL] } <line_num>: 500,502
public Elements getElementsByAttributeValueContaining(String key, String match) { [EOL]     return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this); [EOL] } <line_num>: 511,513
public Elements getElementsByIndexLessThan(int index) { [EOL]     return Collector.collect(new Evaluator.IndexLessThan(index), this); [EOL] } <line_num>: 520,522
public Elements getElementsByIndexGreaterThan(int index) { [EOL]     return Collector.collect(new Evaluator.IndexGreaterThan(index), this); [EOL] } <line_num>: 529,531
public Elements getElementsByIndexEquals(int index) { [EOL]     return Collector.collect(new Evaluator.IndexEquals(index), this); [EOL] } <line_num>: 538,540
public Elements getAllElements() { [EOL]     return Collector.collect(new Evaluator.AllElements(), this); [EOL] } <line_num>: 547,549
public String text() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     text(sb); [EOL]     return sb.toString().trim(); [EOL] } <line_num>: 556,560
private void text(StringBuilder accum) { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             String text = textNode.getWholeText(); [EOL]             if (!preserveWhitespace()) { [EOL]                 text = TextNode.normaliseWhitespace(text); [EOL]                 if (TextNode.lastCharIsWhitespace(accum)) [EOL]                     text = TextNode.stripLeadingWhitespace(text); [EOL]             } [EOL]             accum.append(text); [EOL]         } else if (child instanceof Element) { [EOL]             Element element = (Element) child; [EOL]             if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum)) [EOL]                 accum.append(" "); [EOL]             element.text(accum); [EOL]         } [EOL]     } [EOL] } <line_num>: 562,582
boolean preserveWhitespace() { [EOL]     return tag.preserveWhitespace() || parent() != null && parent().preserveWhitespace(); [EOL] } <line_num>: 584,586
public Element text(String text) { [EOL]     Validate.notNull(text); [EOL]     empty(); [EOL]     TextNode textNode = new TextNode(text, baseUri); [EOL]     appendChild(textNode); [EOL]     return this; [EOL] } <line_num>: 593,601
public boolean hasText() { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             if (!textNode.isBlank()) [EOL]                 return true; [EOL]         } else if (child instanceof Element) { [EOL]             Element el = (Element) child; [EOL]             if (el.hasText()) [EOL]                 return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 607,620
public String data() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Node childNode : childNodes) { [EOL]         if (childNode instanceof DataNode) { [EOL]             DataNode data = (DataNode) childNode; [EOL]             sb.append(data.getWholeData()); [EOL]         } else if (childNode instanceof Element) { [EOL]             Element element = (Element) childNode; [EOL]             String elementData = element.data(); [EOL]             sb.append(elementData); [EOL]         } [EOL]     } [EOL]     return sb.toString(); [EOL] } <line_num>: 626,640
public String className() { [EOL]     return attributes.hasKey("class") ? attributes.get("class") : ""; [EOL] } <line_num>: 647,649
public Set<String> classNames() { [EOL]     if (classNames == null) { [EOL]         String[] names = className().split("\\s+"); [EOL]         classNames = new LinkedHashSet<String>(Arrays.asList(names)); [EOL]     } [EOL]     return classNames; [EOL] } <line_num>: 657,663
public Element classNames(Set<String> classNames) { [EOL]     Validate.notNull(classNames); [EOL]     attributes.put("class", StringUtils.join(classNames, " ")); [EOL]     return this; [EOL] } <line_num>: 670,674
public boolean hasClass(String className) { [EOL]     return classNames().contains(className); [EOL] } <line_num>: 681,683
public Element addClass(String className) { [EOL]     Validate.notNull(className); [EOL]     Set<String> classes = classNames(); [EOL]     classes.add(className); [EOL]     classNames(classes); [EOL]     return this; [EOL] } <line_num>: 690,698
public Element removeClass(String className) { [EOL]     Validate.notNull(className); [EOL]     Set<String> classes = classNames(); [EOL]     classes.remove(className); [EOL]     classNames(classes); [EOL]     return this; [EOL] } <line_num>: 705,713
public Element toggleClass(String className) { [EOL]     Validate.notNull(className); [EOL]     Set<String> classes = classNames(); [EOL]     if (classes.contains(className)) [EOL]         classes.remove(className); [EOL]     else [EOL]         classes.add(className); [EOL]     classNames(classes); [EOL]     return this; [EOL] } <line_num>: 720,731
public String val() { [EOL]     if (tagName().equals("textarea")) [EOL]         return text(); [EOL]     else [EOL]         return attr("value"); [EOL] } <line_num>: 737,742
public Element val(String value) { [EOL]     if (tagName().equals("textarea")) [EOL]         text(value); [EOL]     else [EOL]         attr("value", value); [EOL]     return this; [EOL] } <line_num>: 749,755
void outerHtml(StringBuilder accum) { [EOL]     if (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0)) [EOL]         indent(accum); [EOL]     accum.append("<").append(tagName()).append(attributes.html()); [EOL]     if (childNodes.isEmpty() && tag.isEmpty()) { [EOL]         accum.append(" />"); [EOL]     } else { [EOL]         accum.append(">"); [EOL]         html(accum); [EOL]         if (tag.canContainBlock()) [EOL]             indent(accum); [EOL]         accum.append("</").append(tagName()).append(">"); [EOL]     } [EOL] } <line_num>: 757,773
public String html() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     html(accum); [EOL]     return accum.toString().trim(); [EOL] } <line_num>: 782,786
private void html(StringBuilder accum) { [EOL]     for (Node node : childNodes) node.outerHtml(accum); [EOL] } <line_num>: 788,791
public Element html(String html) { [EOL]     empty(); [EOL]     append(html); [EOL]     return this; [EOL] } <line_num>: 799,803
public String toString() { [EOL]     return outerHtml(); [EOL] } <line_num>: 805,807
@Override [EOL] public boolean equals(Object o) { [EOL]     if (this == o) [EOL]         return true; [EOL]     if (!(o instanceof Element)) [EOL]         return false; [EOL]     if (!super.equals(o)) [EOL]         return false; [EOL]     Element element = (Element) o; [EOL]     if (tag != null ? !tag.equals(element.tag) : element.tag != null) [EOL]         return false; [EOL]     return true; [EOL] } <line_num>: 809,820
@Override [EOL] public int hashCode() { [EOL]     int result = super.hashCode(); [EOL]     result = 31 * result + (tag != null ? tag.hashCode() : 0); [EOL]     return result; [EOL] } <line_num>: 822,827
