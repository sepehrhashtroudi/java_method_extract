public Whitelist() { [EOL]     tagNames = new HashSet<TagName>(); [EOL]     attributes = new HashMap<TagName, Set<AttributeKey>>(); [EOL]     enforcedAttributes = new HashMap<TagName, Map<AttributeKey, AttributeValue>>(); [EOL]     protocols = new HashMap<TagName, Map<AttributeKey, Set<Protocol>>>(); [EOL] } <line_num>: 169,174
TagName(String value) { [EOL]     super(value); [EOL] } <line_num>: 347,349
AttributeKey(String value) { [EOL]     super(value); [EOL] } <line_num>: 357,359
AttributeValue(String value) { [EOL]     super(value); [EOL] } <line_num>: 367,369
Protocol(String value) { [EOL]     super(value); [EOL] } <line_num>: 377,379
TypedValue(String value) { [EOL]     Validate.notNull(value); [EOL]     this.value = value; [EOL] } <line_num>: 389,392
public static Whitelist none() { [EOL]     return new Whitelist(); [EOL] } <line_num>: 61,63
public static Whitelist simpleText() { [EOL]     return new Whitelist().addTags("b", "em", "i", "strong", "u"); [EOL] } <line_num>: 71,75
public static Whitelist basic() { [EOL]     return new Whitelist().addTags("a", "b", "blockquote", "br", "cite", "code", "dd", "dl", "dt", "em", "i", "li", "ol", "p", "pre", "q", "small", "strike", "strong", "sub", "sup", "u", "ul").addAttributes("a", "href").addAttributes("blockquote", "cite").addAttributes("q", "cite").addProtocols("a", "href", "ftp", "http", "https", "mailto").addProtocols("blockquote", "cite", "http", "https").addProtocols("cite", "cite", "http", "https").addEnforcedAttribute("a", "rel", "nofollow"); [EOL] } <line_num>: 88,106
public static Whitelist basicWithImages() { [EOL]     return basic().addTags("img").addAttributes("img", "align", "alt", "height", "src", "title", "width").addProtocols("img", "src", "http", "https"); [EOL] } <line_num>: 114,120
public static Whitelist relaxed() { [EOL]     return new Whitelist().addTags("a", "b", "blockquote", "br", "caption", "cite", "code", "col", "colgroup", "dd", "div", "dl", "dt", "em", "h1", "h2", "h3", "h4", "h5", "h6", "i", "img", "li", "ol", "p", "pre", "q", "small", "strike", "strong", "sub", "sup", "table", "tbody", "td", "tfoot", "th", "thead", "tr", "u", "ul").addAttributes("a", "href", "title").addAttributes("blockquote", "cite").addAttributes("col", "span", "width").addAttributes("colgroup", "span", "width").addAttributes("img", "align", "alt", "height", "src", "title", "width").addAttributes("ol", "start", "type").addAttributes("q", "cite").addAttributes("table", "summary", "width").addAttributes("td", "abbr", "axis", "colspan", "rowspan", "width").addAttributes("th", "abbr", "axis", "colspan", "rowspan", "scope", "width").addAttributes("ul", "type").addProtocols("a", "href", "ftp", "http", "https", "mailto").addProtocols("blockquote", "cite", "http", "https").addProtocols("img", "src", "http", "https").addProtocols("q", "cite", "http", "https"); [EOL] } <line_num>: 131,159
public Whitelist addTags(String... tags) { [EOL]     Validate.notNull(tags); [EOL]     for (String tagName : tags) { [EOL]         Validate.notEmpty(tagName); [EOL]         tagNames.add(TagName.valueOf(tagName)); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 182,190
public Whitelist addAttributes(String tag, String... keys) { [EOL]     Validate.notEmpty(tag); [EOL]     Validate.notNull(keys); [EOL]     TagName tagName = TagName.valueOf(tag); [EOL]     Set<AttributeKey> attributeSet = new HashSet<AttributeKey>(); [EOL]     for (String key : keys) { [EOL]         Validate.notEmpty(key); [EOL]         attributeSet.add(AttributeKey.valueOf(key)); [EOL]     } [EOL]     if (attributes.containsKey(tagName)) { [EOL]         Set<AttributeKey> currentSet = attributes.get(tagName); [EOL]         currentSet.addAll(attributeSet); [EOL]     } else { [EOL]         attributes.put(tagName, attributeSet); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 202,219
public Whitelist addEnforcedAttribute(String tag, String key, String value) { [EOL]     Validate.notEmpty(tag); [EOL]     Validate.notEmpty(key); [EOL]     Validate.notEmpty(value); [EOL]     TagName tagName = TagName.valueOf(tag); [EOL]     AttributeKey attrKey = AttributeKey.valueOf(key); [EOL]     AttributeValue attrVal = AttributeValue.valueOf(value); [EOL]     if (enforcedAttributes.containsKey(tagName)) { [EOL]         enforcedAttributes.get(tagName).put(attrKey, attrVal); [EOL]     } else { [EOL]         Map<AttributeKey, AttributeValue> attrMap = new HashMap<AttributeKey, AttributeValue>(); [EOL]         attrMap.put(attrKey, attrVal); [EOL]         enforcedAttributes.put(tagName, attrMap); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 233,250
public Whitelist addProtocols(String tag, String key, String... protocols) { [EOL]     Validate.notEmpty(tag); [EOL]     Validate.notEmpty(key); [EOL]     Validate.notNull(protocols); [EOL]     TagName tagName = TagName.valueOf(tag); [EOL]     AttributeKey attrKey = AttributeKey.valueOf(key); [EOL]     Map<AttributeKey, Set<Protocol>> attrMap; [EOL]     Set<Protocol> protSet; [EOL]     if (this.protocols.containsKey(tagName)) { [EOL]         attrMap = this.protocols.get(tagName); [EOL]     } else { [EOL]         attrMap = new HashMap<AttributeKey, Set<Protocol>>(); [EOL]         this.protocols.put(tagName, attrMap); [EOL]     } [EOL]     if (attrMap.containsKey(attrKey)) { [EOL]         protSet = attrMap.get(attrKey); [EOL]     } else { [EOL]         protSet = new HashSet<Protocol>(); [EOL]         attrMap.put(attrKey, protSet); [EOL]     } [EOL]     for (String protocol : protocols) { [EOL]         Validate.notEmpty(protocol); [EOL]         Protocol prot = Protocol.valueOf(protocol); [EOL]         protSet.add(prot); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 263,291
boolean isSafeTag(String tag) { [EOL]     return tagNames.contains(TagName.valueOf(tag)); [EOL] } <line_num>: 293,295
boolean isSafeAttribute(String tagName, Element el, Attribute attr) { [EOL]     TagName tag = TagName.valueOf(tagName); [EOL]     AttributeKey key = AttributeKey.valueOf(attr.getKey()); [EOL]     if (attributes.containsKey(tag)) { [EOL]         if (attributes.get(tag).contains(key)) { [EOL]             if (protocols.containsKey(tag)) { [EOL]                 Map<AttributeKey, Set<Protocol>> attrProts = protocols.get(tag); [EOL]                 return !attrProts.containsKey(key) || testValidProtocol(el, attr, attrProts.get(key)); [EOL]             } else { [EOL]                 return true; [EOL]             } [EOL]         } [EOL]     } else { [EOL]         return !tagName.equals(":all") && isSafeAttribute(":all", el, attr); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 297,315
private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) { [EOL]     String value = el.absUrl(attr.getKey()); [EOL]     attr.setValue(value); [EOL]     for (Protocol protocol : protocols) { [EOL]         String prot = protocol.toString() + ":"; [EOL]         if (value.toString().toLowerCase().startsWith(prot)) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 317,330
Attributes getEnforcedAttributes(String tagName) { [EOL]     Attributes attrs = new Attributes(); [EOL]     TagName tag = TagName.valueOf(tagName); [EOL]     if (enforcedAttributes.containsKey(tag)) { [EOL]         Map<AttributeKey, AttributeValue> keyVals = enforcedAttributes.get(tag); [EOL]         for (Map.Entry<AttributeKey, AttributeValue> entry : keyVals.entrySet()) { [EOL]             attrs.put(entry.getKey().toString(), entry.getValue().toString()); [EOL]         } [EOL]     } [EOL]     return attrs; [EOL] } <line_num>: 332,342
static TagName valueOf(String value) { [EOL]     return new TagName(value); [EOL] } <line_num>: 351,353
static AttributeKey valueOf(String value) { [EOL]     return new AttributeKey(value); [EOL] } <line_num>: 361,363
static AttributeValue valueOf(String value) { [EOL]     return new AttributeValue(value); [EOL] } <line_num>: 371,373
static Protocol valueOf(String value) { [EOL]     return new Protocol(value); [EOL] } <line_num>: 381,383
@Override [EOL] public int hashCode() { [EOL]     final int prime = 31; [EOL]     int result = 1; [EOL]     result = prime * result + ((value == null) ? 0 : value.hashCode()); [EOL]     return result; [EOL] } <line_num>: 394,400
@Override [EOL] public boolean equals(Object obj) { [EOL]     if (this == obj) [EOL]         return true; [EOL]     if (obj == null) [EOL]         return false; [EOL]     if (getClass() != obj.getClass()) [EOL]         return false; [EOL]     TypedValue other = (TypedValue) obj; [EOL]     if (value == null) { [EOL]         if (other.value != null) [EOL]             return false; [EOL]     } else if (!value.equals(other.value)) [EOL]         return false; [EOL]     return true; [EOL] } <line_num>: 402,412
@Override [EOL] public String toString() { [EOL]     return value; [EOL] } <line_num>: 414,417
