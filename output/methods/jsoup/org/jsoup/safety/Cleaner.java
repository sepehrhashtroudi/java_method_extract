public Cleaner(Whitelist whitelist) { [EOL]     Validate.notNull(whitelist); [EOL]     this.whitelist = whitelist; [EOL] } <line_num>: 28,31
ElementMeta(Element el, int numAttribsDiscarded) { [EOL]     this.el = el; [EOL]     this.numAttribsDiscarded = numAttribsDiscarded; [EOL] } <line_num>: 123,126
public Document clean(Document dirtyDocument) { [EOL]     Validate.notNull(dirtyDocument); [EOL]     Document clean = Document.createShell(dirtyDocument.baseUri()); [EOL]     copySafeNodes(dirtyDocument.body(), clean.body()); [EOL]     return clean; [EOL] } <line_num>: 39,46
public boolean isValid(Document dirtyDocument) { [EOL]     Validate.notNull(dirtyDocument); [EOL]     Document clean = Document.createShell(dirtyDocument.baseUri()); [EOL]     int numDiscarded = copySafeNodes(dirtyDocument.body(), clean.body()); [EOL]     return numDiscarded == 0; [EOL] } <line_num>: 58,64
private int copySafeNodes(Element source, Element dest) { [EOL]     List<Node> sourceChildren = source.childNodes(); [EOL]     int numDiscarded = 0; [EOL]     for (Node sourceChild : sourceChildren) { [EOL]         if (sourceChild instanceof Element) { [EOL]             Element sourceEl = (Element) sourceChild; [EOL]             if (whitelist.isSafeTag(sourceEl.tagName())) { [EOL]                 ElementMeta meta = createSafeElement(sourceEl); [EOL]                 Element destChild = meta.el; [EOL]                 dest.appendChild(destChild); [EOL]                 numDiscarded += meta.numAttribsDiscarded; [EOL]                 numDiscarded += copySafeNodes(sourceEl, destChild); [EOL]             } else { [EOL]                 numDiscarded++; [EOL]                 numDiscarded += copySafeNodes(sourceEl, dest); [EOL]             } [EOL]         } else if (sourceChild instanceof TextNode) { [EOL]             TextNode sourceText = (TextNode) sourceChild; [EOL]             TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri()); [EOL]             dest.appendChild(destText); [EOL]         } [EOL]     } [EOL]     return numDiscarded; [EOL] } <line_num>: 72,98
private ElementMeta createSafeElement(Element sourceEl) { [EOL]     String sourceTag = sourceEl.tagName(); [EOL]     Attributes destAttrs = new Attributes(); [EOL]     Element dest = new Element(Tag.valueOf(sourceTag), sourceEl.baseUri(), destAttrs); [EOL]     int numDiscarded = 0; [EOL]     Attributes sourceAttrs = sourceEl.attributes(); [EOL]     for (Attribute sourceAttr : sourceAttrs) { [EOL]         if (whitelist.isSafeAttribute(sourceTag, sourceEl, sourceAttr)) [EOL]             destAttrs.put(sourceAttr); [EOL]         else [EOL]             numDiscarded++; [EOL]     } [EOL]     Attributes enforcedAttrs = whitelist.getEnforcedAttributes(sourceTag); [EOL]     destAttrs.addAll(enforcedAttrs); [EOL]     return new ElementMeta(dest, numDiscarded); [EOL] } <line_num>: 100,117
