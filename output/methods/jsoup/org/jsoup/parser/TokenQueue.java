public TokenQueue(String data) { [EOL]     Validate.notNull(data); [EOL]     queue = new LinkedList<Character>(); [EOL]     char[] chars = data.toCharArray(); [EOL]     for (char c : chars) { [EOL]         queue.add(c); [EOL]     } [EOL] } <line_num>: 20,28
public boolean isEmpty() { [EOL]     return queue.isEmpty(); [EOL] } <line_num>: 34,36
public Character peek() { [EOL]     return queue.peek(); [EOL] } <line_num>: 42,44
public void addFirst(Character c) { [EOL]     queue.addFirst(c); [EOL] } <line_num>: 50,52
public void addFirst(String seq) { [EOL]     char[] chars = seq.toCharArray(); [EOL]     for (int i = chars.length - 1; i >= 0; i--) { [EOL]         addFirst(chars[i]); [EOL]     } [EOL] } <line_num>: 58,63
public boolean matches(String seq) { [EOL]     int len = seq.length(); [EOL]     if (len > queue.size()) [EOL]         return false; [EOL]     List<Character> chars = queue.subList(0, len); [EOL]     char[] seqChars = seq.toCharArray(); [EOL]     for (int i = 0; i < len; i++) { [EOL]         Character found = Character.toLowerCase(chars.get(i)); [EOL]         Character check = Character.toLowerCase(seqChars[i]); [EOL]         if (!found.equals(check)) [EOL]             return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 70,83
public boolean matchesAny(String... seq) { [EOL]     for (String s : seq) { [EOL]         if (matches(s)) [EOL]             return true; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 90,96
public boolean matchChomp(String seq) { [EOL]     if (matches(seq)) { [EOL]         consume(seq); [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 104,111
public boolean matchesWhitespace() { [EOL]     return !queue.isEmpty() && Character.isWhitespace(queue.peek()); [EOL] } <line_num>: 117,119
public boolean matchesWord() { [EOL]     return !queue.isEmpty() && Character.isLetterOrDigit(queue.peek()); [EOL] } <line_num>: 125,127
public Character consume() { [EOL]     return queue.removeFirst(); [EOL] } <line_num>: 133,135
public void consume(String seq) { [EOL]     if (!matches(seq)) [EOL]         throw new IllegalStateException("Queue did not match expected sequence"); [EOL]     int len = seq.length(); [EOL]     if (len > queue.size()) [EOL]         throw new IllegalStateException("Queue not long enough to consume sequence"); [EOL]     for (int i = 0; i < len; i++) { [EOL]         consume(); [EOL]     } [EOL] } <line_num>: 144,153
public String consumeTo(String seq) { [EOL]     return consumeToAny(seq); [EOL] } <line_num>: 160,162
public String consumeToAny(String... seq) { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     while (!queue.isEmpty() && !matchesAny(seq)) accum.append(consume()); [EOL]     return accum.toString(); [EOL] } <line_num>: 169,175
public String chompTo(String seq) { [EOL]     String data = consumeTo(seq); [EOL]     matchChomp(seq); [EOL]     return data; [EOL] } <line_num>: 185,189
public boolean consumeWhitespace() { [EOL]     boolean seen = false; [EOL]     while (!queue.isEmpty() && Character.isWhitespace(queue.peek())) { [EOL]         consume(); [EOL]         seen = true; [EOL]     } [EOL]     return seen; [EOL] } <line_num>: 194,201
public String consumeWord() { [EOL]     StringBuilder wordAccum = new StringBuilder(); [EOL]     while (!queue.isEmpty() && Character.isLetterOrDigit(queue.peek())) { [EOL]         wordAccum.append(queue.removeFirst()); [EOL]     } [EOL]     return wordAccum.toString(); [EOL] } <line_num>: 207,213
public String consumeCssIdentifier() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     Character c = queue.peek(); [EOL]     while (!queue.isEmpty() && (Character.isLetterOrDigit(c) || c.equals('-') || c.equals('_'))) { [EOL]         accum.append(queue.removeFirst()); [EOL]         c = queue.peek(); [EOL]     } [EOL]     return accum.toString(); [EOL] } <line_num>: 220,228
public String consumeAttributeKey() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     while (!queue.isEmpty() && (Character.isLetterOrDigit(queue.peek()) || matchesAny("-", "_", ":"))) { [EOL]         accum.append(queue.removeFirst()); [EOL]     } [EOL]     return accum.toString(); [EOL] } <line_num>: 234,240
public String remainder() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     while (!queue.isEmpty()) { [EOL]         accum.append(consume()); [EOL]     } [EOL]     return accum.toString(); [EOL] } <line_num>: 246,252
public String toString() { [EOL]     return queue.toString(); [EOL] } <line_num>: 254,256
