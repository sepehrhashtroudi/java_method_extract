private Tag(String tagName) { [EOL]     this.tagName = tagName.toLowerCase(); [EOL] } <line_num>: 29,31
public String getName() { [EOL]     return tagName; [EOL] } <line_num>: 33,35
public static Tag valueOf(String tagName) { [EOL]     Validate.notNull(tagName); [EOL]     tagName = tagName.trim().toLowerCase(); [EOL]     Validate.notEmpty(tagName); [EOL]     synchronized (tags) { [EOL]         Tag tag = tags.get(tagName); [EOL]         if (tag == null) { [EOL]             tag = new Tag(tagName); [EOL]             tag.setAncestor(defaultAncestor.tagName); [EOL]             tag.isBlock = false; [EOL]             tag.canContainBlock = true; [EOL]         } [EOL]         return tag; [EOL]     } [EOL] } <line_num>: 44,60
boolean canContain(Tag child) { [EOL]     Validate.notNull(child); [EOL]     if (child.isBlock && !this.canContainBlock) [EOL]         return false; [EOL]     if (!child.isBlock && !this.canContainInline) [EOL]         return false; [EOL]     if (this.optionalClosing && this.equals(child)) [EOL]         return false; [EOL]     if (this.empty || this.isData()) [EOL]         return false; [EOL]     if (this.tagName.equals("head")) { [EOL]         if (child.tagName.equals("base") || child.tagName.equals("script") || child.tagName.equals("noscript") || child.tagName.equals("link") || child.tagName.equals("meta") || child.tagName.equals("title") || child.tagName.equals("style") || child.tagName.equals("object")) { [EOL]             return true; [EOL]         } [EOL]         return false; [EOL]     } [EOL]     if (this.tagName.equals("dt") && child.tagName.equals("dd")) [EOL]         return false; [EOL]     if (this.tagName.equals("dd") && child.tagName.equals("dt")) [EOL]         return false; [EOL]     return true; [EOL] } <line_num>: 67,99
public boolean isBlock() { [EOL]     return isBlock; [EOL] } <line_num>: 105,107
public boolean canContainBlock() { [EOL]     return canContainBlock; [EOL] } <line_num>: 113,115
public boolean isInline() { [EOL]     return !isBlock; [EOL] } <line_num>: 121,123
public boolean isData() { [EOL]     return !canContainInline && !isEmpty(); [EOL] } <line_num>: 129,131
public boolean isEmpty() { [EOL]     return empty; [EOL] } <line_num>: 137,139
public boolean preserveWhitespace() { [EOL]     return preserveWhitespace; [EOL] } <line_num>: 145,147
Tag getImplicitParent() { [EOL]     return (!ancestors.isEmpty()) ? ancestors.get(0) : null; [EOL] } <line_num>: 149,151
boolean isValidParent(Tag child) { [EOL]     if (child.ancestors.isEmpty()) [EOL]         return true; [EOL]     for (Tag tag : child.ancestors) { [EOL]         if (this.equals(tag)) [EOL]             return true; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 153,162
@Override [EOL] public boolean equals(Object o) { [EOL]     if (this == o) [EOL]         return true; [EOL]     if (o == null || getClass() != o.getClass()) [EOL]         return false; [EOL]     Tag tag = (Tag) o; [EOL]     if (canContainBlock != tag.canContainBlock) [EOL]         return false; [EOL]     if (canContainInline != tag.canContainInline) [EOL]         return false; [EOL]     if (empty != tag.empty) [EOL]         return false; [EOL]     if (isBlock != tag.isBlock) [EOL]         return false; [EOL]     if (optionalClosing != tag.optionalClosing) [EOL]         return false; [EOL]     if (tagName != null ? !tagName.equals(tag.tagName) : tag.tagName != null) [EOL]         return false; [EOL]     return true; [EOL] } <line_num>: 164,179
@Override [EOL] public int hashCode() { [EOL]     int result = tagName != null ? tagName.hashCode() : 0; [EOL]     result = 31 * result + (isBlock ? 1 : 0); [EOL]     result = 31 * result + (canContainBlock ? 1 : 0); [EOL]     result = 31 * result + (canContainInline ? 1 : 0); [EOL]     result = 31 * result + (optionalClosing ? 1 : 0); [EOL]     result = 31 * result + (empty ? 1 : 0); [EOL]     return result; [EOL] } <line_num>: 181,190
public String toString() { [EOL]     return tagName; [EOL] } <line_num>: 192,194
private static Tag createBlock(String tagName) { [EOL]     return register(new Tag(tagName)); [EOL] } <line_num>: 314,316
private static Tag createInline(String tagName) { [EOL]     Tag inline = new Tag(tagName); [EOL]     inline.isBlock = false; [EOL]     inline.canContainBlock = false; [EOL]     return register(inline); [EOL] } <line_num>: 318,323
private static Tag register(Tag tag) { [EOL]     tag.setAncestor(defaultAncestor.tagName); [EOL]     synchronized (tags) { [EOL]         tags.put(tag.tagName, tag); [EOL]     } [EOL]     return tag; [EOL] } <line_num>: 325,331
private Tag setContainInlineOnly() { [EOL]     canContainBlock = false; [EOL]     canContainInline = true; [EOL]     return this; [EOL] } <line_num>: 333,337
private Tag setContainDataOnly() { [EOL]     canContainBlock = false; [EOL]     canContainInline = false; [EOL]     preserveWhitespace = true; [EOL]     return this; [EOL] } <line_num>: 339,344
private Tag setEmpty() { [EOL]     canContainBlock = false; [EOL]     canContainInline = false; [EOL]     empty = true; [EOL]     return this; [EOL] } <line_num>: 346,351
private Tag setOptionalClosing() { [EOL]     optionalClosing = true; [EOL]     return this; [EOL] } <line_num>: 353,356
private Tag setPreserveWhitespace() { [EOL]     preserveWhitespace = true; [EOL]     return this; [EOL] } <line_num>: 358,361
private Tag setAncestor(String... tagNames) { [EOL]     if (tagNames == null) { [EOL]         ancestors = Collections.emptyList(); [EOL]     } else { [EOL]         ancestors = new ArrayList<Tag>(tagNames.length); [EOL]         for (String name : tagNames) { [EOL]             ancestors.add(Tag.valueOf(name)); [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 363,373
