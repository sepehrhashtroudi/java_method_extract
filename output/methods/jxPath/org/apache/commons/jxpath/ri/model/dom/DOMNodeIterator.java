public DOMNodeIterator(NodePointer parent, NodeTest nodeTest, boolean reverse, NodePointer startWith) { [EOL]     this.parent = parent; [EOL]     this.node = (Node) parent.getNode(); [EOL]     if (startWith != null) { [EOL]         this.child = (Node) startWith.getNode(); [EOL]     } [EOL]     this.nodeTest = nodeTest; [EOL]     this.reverse = reverse; [EOL] } <line_num>: 38,51
public NodePointer getNodePointer() { [EOL]     if (position == 0) { [EOL]         setPosition(1); [EOL]     } [EOL]     if (child == null) { [EOL]         return null; [EOL]     } [EOL]     return new DOMNodePointer(parent, child); [EOL] } <line_num>: 53,61
public int getPosition() { [EOL]     return position; [EOL] } <line_num>: 63,65
public boolean setPosition(int position) { [EOL]     while (this.position < position) { [EOL]         if (!next()) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     while (this.position > position) { [EOL]         if (!previous()) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 67,79
private boolean previous() { [EOL]     position--; [EOL]     if (!reverse) { [EOL]         if (position == 0) { [EOL]             child = null; [EOL]         } else if (child == null) { [EOL]             child = node.getLastChild(); [EOL]         } else { [EOL]             child = child.getPreviousSibling(); [EOL]         } [EOL]         while (child != null && !testChild()) { [EOL]             child = child.getPreviousSibling(); [EOL]         } [EOL]     } else { [EOL]         child = child.getNextSibling(); [EOL]         while (child != null && !testChild()) { [EOL]             child = child.getNextSibling(); [EOL]         } [EOL]     } [EOL]     return child != null; [EOL] } <line_num>: 81,104
private boolean next() { [EOL]     position++; [EOL]     if (!reverse) { [EOL]         if (position == 1) { [EOL]             if (child == null) { [EOL]                 child = node.getFirstChild(); [EOL]             } else { [EOL]                 child = child.getNextSibling(); [EOL]             } [EOL]         } else { [EOL]             child = child.getNextSibling(); [EOL]         } [EOL]         while (child != null && !testChild()) { [EOL]             child = child.getNextSibling(); [EOL]         } [EOL]     } else { [EOL]         if (position == 1) { [EOL]             if (child == null) { [EOL]                 child = node.getLastChild(); [EOL]             } else { [EOL]                 child = child.getPreviousSibling(); [EOL]             } [EOL]         } else { [EOL]             child = child.getPreviousSibling(); [EOL]         } [EOL]         while (child != null && !testChild()) { [EOL]             child = child.getPreviousSibling(); [EOL]         } [EOL]     } [EOL]     return child != null; [EOL] } <line_num>: 106,141
private boolean testChild() { [EOL]     return DOMNodePointer.testNode(child, nodeTest); [EOL] } <line_num>: 143,145
