protected Step(int axis, NodeTest nodeTest, Expression[] predicates) { [EOL]     this.axis = axis; [EOL]     this.nodeTest = nodeTest; [EOL]     this.predicates = predicates; [EOL] } <line_num>: 30,34
public int getAxis() { [EOL]     return axis; [EOL] } <line_num>: 36,38
public NodeTest getNodeTest() { [EOL]     return nodeTest; [EOL] } <line_num>: 40,42
public Expression[] getPredicates() { [EOL]     return predicates; [EOL] } <line_num>: 44,46
public boolean isContextDependent() { [EOL]     if (predicates != null) { [EOL]         for (int i = 0; i < predicates.length; i++) { [EOL]             if (predicates[i].isContextDependent()) { [EOL]                 return true; [EOL]             } [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 48,57
public String toString() { [EOL]     StringBuffer buffer = new StringBuffer(); [EOL]     int axis = getAxis(); [EOL]     if (axis == Compiler.AXIS_CHILD) { [EOL]         buffer.append(nodeTest); [EOL]     } else if (axis == Compiler.AXIS_ATTRIBUTE) { [EOL]         buffer.append('@'); [EOL]         buffer.append(nodeTest); [EOL]     } else if (axis == Compiler.AXIS_SELF && nodeTest instanceof NodeTypeTest && ((NodeTypeTest) nodeTest).getNodeType() == Compiler.NODE_TYPE_NODE) { [EOL]         buffer.append("."); [EOL]     } else if (axis == Compiler.AXIS_PARENT && nodeTest instanceof NodeTypeTest && ((NodeTypeTest) nodeTest).getNodeType() == Compiler.NODE_TYPE_NODE) { [EOL]         buffer.append(".."); [EOL]     } else if (axis == Compiler.AXIS_DESCENDANT_OR_SELF && nodeTest instanceof NodeTypeTest && ((NodeTypeTest) nodeTest).getNodeType() == Compiler.NODE_TYPE_NODE && (predicates == null || predicates.length == 0)) { [EOL]         buffer.append(""); [EOL]     } else { [EOL]         buffer.append(axisToString(axis)); [EOL]         buffer.append("::"); [EOL]         buffer.append(nodeTest); [EOL]     } [EOL]     Expression[] predicates = getPredicates(); [EOL]     if (predicates != null) { [EOL]         for (int i = 0; i < predicates.length; i++) { [EOL]             buffer.append('['); [EOL]             buffer.append(predicates[i]); [EOL]             buffer.append(']'); [EOL]         } [EOL]     } [EOL]     return buffer.toString(); [EOL] } <line_num>: 59,102
public static String axisToString(int axis) { [EOL]     switch(axis) { [EOL]         case Compiler.AXIS_SELF: [EOL]             return "self"; [EOL]         case Compiler.AXIS_CHILD: [EOL]             return "child"; [EOL]         case Compiler.AXIS_PARENT: [EOL]             return "parent"; [EOL]         case Compiler.AXIS_ANCESTOR: [EOL]             return "ancestor"; [EOL]         case Compiler.AXIS_ATTRIBUTE: [EOL]             return "attribute"; [EOL]         case Compiler.AXIS_NAMESPACE: [EOL]             return "namespace"; [EOL]         case Compiler.AXIS_PRECEDING: [EOL]             return "preceding"; [EOL]         case Compiler.AXIS_FOLLOWING: [EOL]             return "following"; [EOL]         case Compiler.AXIS_DESCENDANT: [EOL]             return "descendant"; [EOL]         case Compiler.AXIS_ANCESTOR_OR_SELF: [EOL]             return "ancestor-or-self"; [EOL]         case Compiler.AXIS_FOLLOWING_SIBLING: [EOL]             return "following-sibling"; [EOL]         case Compiler.AXIS_PRECEDING_SIBLING: [EOL]             return "preceding-sibling"; [EOL]         case Compiler.AXIS_DESCENDANT_OR_SELF: [EOL]             return "descendant-or-self"; [EOL]     } [EOL]     return "UNKNOWN"; [EOL] } <line_num>: 104,134
