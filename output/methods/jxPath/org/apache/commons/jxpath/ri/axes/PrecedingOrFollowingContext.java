public PrecedingOrFollowingContext(EvalContext parentContext, NodeTest nodeTest, boolean reverse) { [EOL]     super(parentContext); [EOL]     this.nodeTest = nodeTest; [EOL]     this.reverse = reverse; [EOL] } <line_num>: 43,51
public NodePointer getCurrentNodePointer() { [EOL]     return currentNodePointer; [EOL] } <line_num>: 53,55
public int getDocumentOrder() { [EOL]     return reverse ? -1 : 1; [EOL] } <line_num>: 57,59
public void reset() { [EOL]     super.reset(); [EOL]     stack = new Stack(); [EOL]     setStarted = false; [EOL] } <line_num>: 61,65
public boolean setPosition(int position) { [EOL]     if (position < this.position) { [EOL]         reset(); [EOL]     } [EOL]     while (this.position < position) { [EOL]         if (!nextNode()) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 67,78
public boolean nextNode() { [EOL]     if (!setStarted) { [EOL]         setStarted = true; [EOL]         currentRootLocation = parentContext.getCurrentNodePointer(); [EOL]         NodePointer parent = currentRootLocation.getParent(); [EOL]         if (parent != null) { [EOL]             stack.push(parent.childIterator(null, reverse, currentRootLocation)); [EOL]         } [EOL]     } [EOL]     while (true) { [EOL]         if (stack.isEmpty()) { [EOL]             currentRootLocation = currentRootLocation.getParent(); [EOL]             if (currentRootLocation == null || currentRootLocation.isRoot()) { [EOL]                 break; [EOL]             } [EOL]             NodePointer parent = currentRootLocation.getParent(); [EOL]             if (parent != null) { [EOL]                 stack.push(parent.childIterator(null, reverse, currentRootLocation)); [EOL]             } [EOL]         } [EOL]         while (!stack.isEmpty()) { [EOL]             if (!reverse) { [EOL]                 NodeIterator it = (NodeIterator) stack.peek(); [EOL]                 if (it.setPosition(it.getPosition() + 1)) { [EOL]                     currentNodePointer = it.getNodePointer(); [EOL]                     if (!currentNodePointer.isLeaf()) { [EOL]                         stack.push(currentNodePointer.childIterator(null, reverse, null)); [EOL]                     } [EOL]                     if (currentNodePointer.testNode(nodeTest)) { [EOL]                         super.setPosition(getCurrentPosition() + 1); [EOL]                         return true; [EOL]                     } [EOL]                 } else { [EOL]                     stack.pop(); [EOL]                 } [EOL]             } else { [EOL]                 NodeIterator it = (NodeIterator) stack.peek(); [EOL]                 if (it.setPosition(it.getPosition() + 1)) { [EOL]                     currentNodePointer = it.getNodePointer(); [EOL]                     if (!currentNodePointer.isLeaf()) { [EOL]                         stack.push(currentNodePointer.childIterator(null, reverse, null)); [EOL]                     } else if (currentNodePointer.testNode(nodeTest)) { [EOL]                         super.setPosition(getCurrentPosition() + 1); [EOL]                         return true; [EOL]                     } [EOL]                 } else { [EOL]                     stack.pop(); [EOL]                     if (!stack.isEmpty()) { [EOL]                         it = (PropertyIterator) stack.peek(); [EOL]                         currentNodePointer = it.getNodePointer(); [EOL]                         if (currentNodePointer.testNode(nodeTest)) { [EOL]                             super.setPosition(getCurrentPosition() + 1); [EOL]                             return true; [EOL]                         } [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 80,165
