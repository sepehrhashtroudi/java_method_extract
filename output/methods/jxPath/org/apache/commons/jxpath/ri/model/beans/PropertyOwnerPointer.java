protected PropertyOwnerPointer(NodePointer parent, Locale locale) { [EOL]     super(parent, locale); [EOL] } <line_num>: 84,86
protected PropertyOwnerPointer(NodePointer parent) { [EOL]     super(parent); [EOL] } <line_num>: 88,90
public NodeIterator childIterator(NodeTest test, boolean reverse, NodePointer startWith) { [EOL]     if (test == null) { [EOL]         return createNodeIterator(null, reverse, startWith); [EOL]     } else if (test instanceof NodeNameTest) { [EOL]         NodeNameTest nodeNameTest = (NodeNameTest) test; [EOL]         QName testName = nodeNameTest.getNodeName(); [EOL]         String property; [EOL]         if (!isDefaultNamespace(testName.getPrefix())) { [EOL]             return null; [EOL]         } else if (nodeNameTest.isWildcard()) { [EOL]             property = null; [EOL]         } else { [EOL]             property = testName.getName(); [EOL]         } [EOL]         return createNodeIterator(property, reverse, startWith); [EOL]     } else if (test instanceof NodeTypeTest) { [EOL]         if (((NodeTypeTest) test).getNodeType() == Compiler.NODE_TYPE_NODE) { [EOL]             return createNodeIterator(null, reverse, startWith); [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 40,70
public NodeIterator createNodeIterator(String property, boolean reverse, NodePointer startWith) { [EOL]     return new PropertyIterator(this, property, reverse, startWith); [EOL] } <line_num>: 72,78
public NodeIterator attributeIterator(QName name) { [EOL]     return new BeanAttributeIterator(this, name); [EOL] } <line_num>: 80,82
public void setIndex(int index) { [EOL]     if (this.index != index) { [EOL]         super.setIndex(index); [EOL]         value = UNINITIALIZED; [EOL]     } [EOL] } <line_num>: 92,97
public Object getImmediateNode() { [EOL]     if (value == UNINITIALIZED) { [EOL]         if (index == WHOLE_COLLECTION) { [EOL]             value = ValueUtils.getValue(getBaseValue()); [EOL]         } else { [EOL]             value = ValueUtils.getValue(getBaseValue(), index); [EOL]         } [EOL]     } [EOL]     return value; [EOL] } <line_num>: 102,112
public abstract QName getName(); <line_num>: 114,114
public void setValue(Object value) { [EOL]     this.value = value; [EOL]     if (parent.isContainer()) { [EOL]         parent.setValue(value); [EOL]     } else if (parent != null) { [EOL]         if (index == WHOLE_COLLECTION) { [EOL]             throw new UnsupportedOperationException("Cannot setValue of an object that is not " + "some other object's property"); [EOL]         } else { [EOL]             throw new JXPathInvalidAccessException("The specified collection element does not exist: " + this); [EOL]         } [EOL]     } else { [EOL]         throw new UnsupportedOperationException("Cannot replace the root object"); [EOL]     } [EOL] } <line_num>: 120,140
public void remove() { [EOL]     this.value = null; [EOL]     if (parent != null) { [EOL]         parent.remove(); [EOL]     } else { [EOL]         throw new UnsupportedOperationException("Cannot remove an object that is not " + "some other object's property or a collection element"); [EOL]     } [EOL] } <line_num>: 146,156
public abstract PropertyPointer getPropertyPointer(); <line_num>: 158,158
public boolean isDynamicPropertyDeclarationSupported() { [EOL]     return false; [EOL] } <line_num>: 165,167
public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) { [EOL]     int r = pointer1.getName().toString().compareTo(pointer2.getName().toString()); [EOL]     if (r != 0) { [EOL]         return r; [EOL]     } [EOL]     return pointer1.getIndex() - pointer2.getIndex(); [EOL] } <line_num>: 169,180
