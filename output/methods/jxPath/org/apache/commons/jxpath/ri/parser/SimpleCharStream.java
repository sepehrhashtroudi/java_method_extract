public SimpleCharStream(java.io.Reader dstream, int startline, int startcolumn, int buffersize) { [EOL]     inputStream = dstream; [EOL]     line = startline; [EOL]     column = startcolumn - 1; [EOL]     available = bufsize = buffersize; [EOL]     buffer = new char[buffersize]; [EOL]     bufline = new int[buffersize]; [EOL]     bufcolumn = new int[buffersize]; [EOL] } <line_num>: 237,248
public SimpleCharStream(java.io.Reader dstream, int startline, int startcolumn) { [EOL]     this(dstream, startline, startcolumn, 4096); [EOL] } <line_num>: 250,254
public SimpleCharStream(java.io.Reader dstream) { [EOL]     this(dstream, 1, 1, 4096); [EOL] } <line_num>: 256,259
public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) { [EOL]     this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096); [EOL] } <line_num>: 289,293
public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn) { [EOL]     this(dstream, startline, startcolumn, 4096); [EOL] } <line_num>: 295,299
public SimpleCharStream(java.io.InputStream dstream) { [EOL]     this(dstream, 1, 1, 4096); [EOL] } <line_num>: 301,304
protected void ExpandBuff(boolean wrapAround) { [EOL]     char[] newbuffer = new char[bufsize + 2048]; [EOL]     int[] newbufline = new int[bufsize + 2048]; [EOL]     int[] newbufcolumn = new int[bufsize + 2048]; [EOL]     try { [EOL]         if (wrapAround) { [EOL]             System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin); [EOL]             System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos); [EOL]             buffer = newbuffer; [EOL]             System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin); [EOL]             System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos); [EOL]             bufline = newbufline; [EOL]             System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin); [EOL]             System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos); [EOL]             bufcolumn = newbufcolumn; [EOL]             maxNextCharInd = (bufpos += (bufsize - tokenBegin)); [EOL]         } else { [EOL]             System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin); [EOL]             buffer = newbuffer; [EOL]             System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin); [EOL]             bufline = newbufline; [EOL]             System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin); [EOL]             bufcolumn = newbufcolumn; [EOL]             maxNextCharInd = (bufpos -= tokenBegin); [EOL]         } [EOL]     } catch (Throwable t) { [EOL]         throw new Error(t.getMessage()); [EOL]     } [EOL]     bufsize += 2048; [EOL]     available = bufsize; [EOL]     tokenBegin = 0; [EOL] } <line_num>: 31,79
protected void FillBuff() throws java.io.IOException { [EOL]     if (maxNextCharInd == available) { [EOL]         if (available == bufsize) { [EOL]             if (tokenBegin > 2048) { [EOL]                 bufpos = maxNextCharInd = 0; [EOL]                 available = tokenBegin; [EOL]             } else if (tokenBegin < 0) [EOL]                 bufpos = maxNextCharInd = 0; [EOL]             else [EOL]                 ExpandBuff(false); [EOL]         } else if (available > tokenBegin) [EOL]             available = bufsize; [EOL]         else if ((tokenBegin - available) < 2048) [EOL]             ExpandBuff(true); [EOL]         else [EOL]             available = tokenBegin; [EOL]     } [EOL]     int i; [EOL]     try { [EOL]         if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) { [EOL]             inputStream.close(); [EOL]             throw new java.io.IOException(); [EOL]         } else [EOL]             maxNextCharInd += i; [EOL]         return; [EOL]     } catch (java.io.IOException e) { [EOL]         --bufpos; [EOL]         backup(0); [EOL]         if (tokenBegin == -1) [EOL]             tokenBegin = bufpos; [EOL]         throw e; [EOL]     } [EOL] } <line_num>: 81,124
public char BeginToken() throws java.io.IOException { [EOL]     tokenBegin = -1; [EOL]     char c = readChar(); [EOL]     tokenBegin = bufpos; [EOL]     return c; [EOL] } <line_num>: 126,133
protected void UpdateLineColumn(char c) { [EOL]     column++; [EOL]     if (prevCharIsLF) { [EOL]         prevCharIsLF = false; [EOL]         line += (column = 1); [EOL]     } else if (prevCharIsCR) { [EOL]         prevCharIsCR = false; [EOL]         if (c == '\n') { [EOL]             prevCharIsLF = true; [EOL]         } else [EOL]             line += (column = 1); [EOL]     } [EOL]     switch(c) { [EOL]         case '\r': [EOL]             prevCharIsCR = true; [EOL]             break; [EOL]         case '\n': [EOL]             prevCharIsLF = true; [EOL]             break; [EOL]         case '\t': [EOL]             column--; [EOL]             column += (8 - (column & 07)); [EOL]             break; [EOL]         default: [EOL]             break; [EOL]     } [EOL]     bufline[bufpos] = line; [EOL]     bufcolumn[bufpos] = column; [EOL] } <line_num>: 135,173
public char readChar() throws java.io.IOException { [EOL]     if (inBuf > 0) { [EOL]         --inBuf; [EOL]         if (++bufpos == bufsize) [EOL]             bufpos = 0; [EOL]         return buffer[bufpos]; [EOL]     } [EOL]     if (++bufpos >= maxNextCharInd) [EOL]         FillBuff(); [EOL]     char c = buffer[bufpos]; [EOL]     UpdateLineColumn(c); [EOL]     return (c); [EOL] } <line_num>: 175,194
public int getColumn() { [EOL]     return bufcolumn[bufpos]; [EOL] } <line_num>: 201,203
public int getLine() { [EOL]     return bufline[bufpos]; [EOL] } <line_num>: 210,212
public int getEndColumn() { [EOL]     return bufcolumn[bufpos]; [EOL] } <line_num>: 214,216
public int getEndLine() { [EOL]     return bufline[bufpos]; [EOL] } <line_num>: 218,220
public int getBeginColumn() { [EOL]     return bufcolumn[tokenBegin]; [EOL] } <line_num>: 222,224
public int getBeginLine() { [EOL]     return bufline[tokenBegin]; [EOL] } <line_num>: 226,228
public void backup(int amount) { [EOL]     inBuf += amount; [EOL]     if ((bufpos -= amount) < 0) [EOL]         bufpos += bufsize; [EOL] } <line_num>: 230,235
public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) { [EOL]     inputStream = dstream; [EOL]     line = startline; [EOL]     column = startcolumn - 1; [EOL]     if (buffer == null || buffersize != buffer.length) { [EOL]         available = bufsize = buffersize; [EOL]         buffer = new char[buffersize]; [EOL]         bufline = new int[buffersize]; [EOL]         bufcolumn = new int[buffersize]; [EOL]     } [EOL]     prevCharIsLF = prevCharIsCR = false; [EOL]     tokenBegin = inBuf = maxNextCharInd = 0; [EOL]     bufpos = -1; [EOL] } <line_num>: 260,277
public void ReInit(java.io.Reader dstream, int startline, int startcolumn) { [EOL]     ReInit(dstream, startline, startcolumn, 4096); [EOL] } <line_num>: 279,283
public void ReInit(java.io.Reader dstream) { [EOL]     ReInit(dstream, 1, 1, 4096); [EOL] } <line_num>: 285,288
public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) { [EOL]     ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096); [EOL] } <line_num>: 306,310
public void ReInit(java.io.InputStream dstream) { [EOL]     ReInit(dstream, 1, 1, 4096); [EOL] } <line_num>: 312,315
public void ReInit(java.io.InputStream dstream, int startline, int startcolumn) { [EOL]     ReInit(dstream, startline, startcolumn, 4096); [EOL] } <line_num>: 316,320
public String GetImage() { [EOL]     if (bufpos >= tokenBegin) [EOL]         return new String(buffer, tokenBegin, bufpos - tokenBegin + 1); [EOL]     else [EOL]         return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1); [EOL] } <line_num>: 321,328
public char[] GetSuffix(int len) { [EOL]     char[] ret = new char[len]; [EOL]     if ((bufpos + 1) >= len) [EOL]         System.arraycopy(buffer, bufpos - len + 1, ret, 0, len); [EOL]     else { [EOL]         System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0, len - bufpos - 1); [EOL]         System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1); [EOL]     } [EOL]     return ret; [EOL] } <line_num>: 330,344
public void Done() { [EOL]     buffer = null; [EOL]     bufline = null; [EOL]     bufcolumn = null; [EOL] } <line_num>: 346,351
public void adjustBeginLineColumn(int newLine, int newCol) { [EOL]     int start = tokenBegin; [EOL]     int len; [EOL]     if (bufpos >= tokenBegin) { [EOL]         len = bufpos - tokenBegin + inBuf + 1; [EOL]     } else { [EOL]         len = bufsize - tokenBegin + bufpos + 1 + inBuf; [EOL]     } [EOL]     int i = 0, j = 0, k = 0; [EOL]     int nextColDiff = 0, columnDiff = 0; [EOL]     while (i < len && bufline[j = start % bufsize] == bufline[k = ++start % bufsize]) { [EOL]         bufline[j] = newLine; [EOL]         nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j]; [EOL]         bufcolumn[j] = newCol + columnDiff; [EOL]         columnDiff = nextColDiff; [EOL]         i++; [EOL]     } [EOL]     if (i < len) { [EOL]         bufline[j] = newLine++; [EOL]         bufcolumn[j] = newCol + columnDiff; [EOL]         while (i++ < len) { [EOL]             if (bufline[j = start % bufsize] != bufline[++start % bufsize]) [EOL]                 bufline[j] = newLine++; [EOL]             else [EOL]                 bufline[j] = newLine; [EOL]         } [EOL]     } [EOL]     line = bufline[j]; [EOL]     column = bufcolumn[j]; [EOL] } <line_num>: 356,399
