public Path(Step[] steps) { [EOL]     this.steps = steps; [EOL] } <line_num>: 47,49
public Step[] getSteps() { [EOL]     return steps; [EOL] } <line_num>: 51,53
public boolean computeContextDependent() { [EOL]     if (steps != null) { [EOL]         for (int i = 0; i < steps.length; i++) { [EOL]             if (steps[i].isContextDependent()) { [EOL]                 return true; [EOL]             } [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 55,65
public boolean isSimplePath() { [EOL]     if (!basicKnown) { [EOL]         basicKnown = true; [EOL]         basic = true; [EOL]         Step[] steps = getSteps(); [EOL]         for (int i = 0; i < steps.length; i++) { [EOL]             if (!isSimpleStep(steps[i])) { [EOL]                 basic = false; [EOL]                 break; [EOL]             } [EOL]         } [EOL]     } [EOL]     return basic; [EOL] } <line_num>: 72,85
protected boolean isSimpleStep(Step step) { [EOL]     if (step.getAxis() == Compiler.AXIS_SELF) { [EOL]         NodeTest nodeTest = step.getNodeTest(); [EOL]         if (!(nodeTest instanceof NodeTypeTest)) { [EOL]             return false; [EOL]         } [EOL]         int nodeType = ((NodeTypeTest) nodeTest).getNodeType(); [EOL]         if (nodeType != Compiler.NODE_TYPE_NODE) { [EOL]             return false; [EOL]         } [EOL]         return areBasicPredicates(step.getPredicates()); [EOL]     } else if (step.getAxis() == Compiler.AXIS_CHILD || step.getAxis() == Compiler.AXIS_ATTRIBUTE) { [EOL]         NodeTest nodeTest = step.getNodeTest(); [EOL]         if (!(nodeTest instanceof NodeNameTest)) { [EOL]             return false; [EOL]         } [EOL]         if (((NodeNameTest) nodeTest).isWildcard()) { [EOL]             return false; [EOL]         } [EOL]         return areBasicPredicates(step.getPredicates()); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 92,117
protected boolean areBasicPredicates(Expression[] predicates) { [EOL]     if (predicates != null && predicates.length != 0) { [EOL]         boolean firstIndex = true; [EOL]         for (int i = 0; i < predicates.length; i++) { [EOL]             if (predicates[i] instanceof NameAttributeTest) { [EOL]                 if (((NameAttributeTest) predicates[i]).getNameTestExpression().isContextDependent()) { [EOL]                     return false; [EOL]                 } [EOL]             } else if (predicates[i].isContextDependent()) { [EOL]                 return false; [EOL]             } else { [EOL]                 if (!firstIndex) { [EOL]                     return false; [EOL]                 } [EOL]                 firstIndex = false; [EOL]             } [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 119,142
protected Pointer getSingleNodePointerForSteps(EvalContext context) { [EOL]     if (steps.length == 0) { [EOL]         return context.getSingleNodePointer(); [EOL]     } [EOL]     if (isSimplePath()) { [EOL]         NodePointer ptr = (NodePointer) context.getSingleNodePointer(); [EOL]         return SimplePathInterpreter.interpretSimpleLocationPath(context, ptr, steps); [EOL]     } else { [EOL]         return searchForPath(context); [EOL]     } [EOL] } <line_num>: 148,163
private Pointer searchForPath(EvalContext context) { [EOL]     EvalContext ctx = buildContextChain(context, steps.length, true); [EOL]     Pointer pointer = ctx.getSingleNodePointer(); [EOL]     if (pointer != null) { [EOL]         return pointer; [EOL]     } [EOL]     for (int i = steps.length; --i > 0; ) { [EOL]         if (!isSimpleStep(steps[i])) { [EOL]             return null; [EOL]         } [EOL]         ctx = buildContextChain(context, i, true); [EOL]         if (ctx.hasNext()) { [EOL]             Pointer partial = (Pointer) ctx.next(); [EOL]             if (ctx.hasNext()) { [EOL]                 return null; [EOL]             } [EOL]             if (partial instanceof NodePointer) { [EOL]                 return SimplePathInterpreter.createNullPointer(context, (NodePointer) partial, steps, i); [EOL]             } [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 183,213
protected EvalContext evalSteps(EvalContext context) { [EOL]     return buildContextChain(context, steps.length, false); [EOL] } <line_num>: 219,221
private EvalContext buildContextChain(EvalContext context, int stepCount, boolean createInitialContext) { [EOL]     if (createInitialContext) { [EOL]         context = new InitialContext(context); [EOL]     } [EOL]     if (steps.length == 0) { [EOL]         return context; [EOL]     } [EOL]     for (int i = 0; i < stepCount; i++) { [EOL]         context = createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest()); [EOL]         Expression[] predicates = steps[i].getPredicates(); [EOL]         if (predicates != null) { [EOL]             for (int j = 0; j < predicates.length; j++) { [EOL]                 if (j != 0) { [EOL]                     context = new UnionContext(context, new EvalContext[] { context }); [EOL]                 } [EOL]                 context = new PredicateContext(context, predicates[j]); [EOL]             } [EOL]         } [EOL]     } [EOL]     return context; [EOL] } <line_num>: 223,251
protected EvalContext createContextForStep(EvalContext context, int axis, NodeTest nodeTest) { [EOL]     if (nodeTest instanceof NodeNameTest) { [EOL]         QName qname = ((NodeNameTest) nodeTest).getNodeName(); [EOL]         String prefix = qname.getPrefix(); [EOL]         String namespaceURI = prefix != null ? context.getJXPathContext().getNamespaceURI(prefix) : context.getJXPathContext().getDefaultNamespaceURI(); [EOL]         if (namespaceURI != null) { [EOL]             nodeTest = new NodeNameTest(qname, namespaceURI); [EOL]         } [EOL]     } [EOL]     switch(axis) { [EOL]         case Compiler.AXIS_ANCESTOR: [EOL]             return new AncestorContext(context, false, nodeTest); [EOL]         case Compiler.AXIS_ANCESTOR_OR_SELF: [EOL]             return new AncestorContext(context, true, nodeTest); [EOL]         case Compiler.AXIS_ATTRIBUTE: [EOL]             return new AttributeContext(context, nodeTest); [EOL]         case Compiler.AXIS_CHILD: [EOL]             return new ChildContext(context, nodeTest, false, false); [EOL]         case Compiler.AXIS_DESCENDANT: [EOL]             return new DescendantContext(context, false, nodeTest); [EOL]         case Compiler.AXIS_DESCENDANT_OR_SELF: [EOL]             return new DescendantContext(context, true, nodeTest); [EOL]         case Compiler.AXIS_FOLLOWING: [EOL]             return new PrecedingOrFollowingContext(context, nodeTest, false); [EOL]         case Compiler.AXIS_FOLLOWING_SIBLING: [EOL]             return new ChildContext(context, nodeTest, true, false); [EOL]         case Compiler.AXIS_NAMESPACE: [EOL]             return new NamespaceContext(context, nodeTest); [EOL]         case Compiler.AXIS_PARENT: [EOL]             return new ParentContext(context, nodeTest); [EOL]         case Compiler.AXIS_PRECEDING: [EOL]             return new PrecedingOrFollowingContext(context, nodeTest, true); [EOL]         case Compiler.AXIS_PRECEDING_SIBLING: [EOL]             return new ChildContext(context, nodeTest, true, true); [EOL]         case Compiler.AXIS_SELF: [EOL]             return new SelfContext(context, nodeTest); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 257,302
