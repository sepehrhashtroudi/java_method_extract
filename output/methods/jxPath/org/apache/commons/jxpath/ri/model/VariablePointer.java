public VariablePointer(Variables variables, QName name) { [EOL]     super(null); [EOL]     this.variables = variables; [EOL]     this.name = name; [EOL]     actual = true; [EOL] } <line_num>: 43,48
public VariablePointer(QName name) { [EOL]     super(null); [EOL]     this.name = name; [EOL]     actual = false; [EOL] } <line_num>: 50,54
public boolean isContainer() { [EOL]     return true; [EOL] } <line_num>: 56,58
public QName getName() { [EOL]     return name; [EOL] } <line_num>: 60,62
public Object getBaseValue() { [EOL]     if (!actual) { [EOL]         throw new JXPathException("Undefined variable: " + name); [EOL]     } [EOL]     return variables.getVariable(name.toString()); [EOL] } <line_num>: 64,69
public boolean isLeaf() { [EOL]     Object value = getNode(); [EOL]     return value == null || JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic(); [EOL] } <line_num>: 71,75
public boolean isCollection() { [EOL]     Object value = getBaseValue(); [EOL]     return value != null && ValueUtils.isCollection(value); [EOL] } <line_num>: 77,80
public Object getImmediateNode() { [EOL]     Object value = getBaseValue(); [EOL]     if (index != WHOLE_COLLECTION) { [EOL]         return ValueUtils.getValue(value, index); [EOL]     } else { [EOL]         return ValueUtils.getValue(value); [EOL]     } [EOL] } <line_num>: 82,90
public void setValue(Object value) { [EOL]     if (!actual) { [EOL]         throw new JXPathException("Cannot set undefined variable: " + name); [EOL]     } [EOL]     valuePointer = null; [EOL]     if (index != WHOLE_COLLECTION) { [EOL]         Object collection = getBaseValue(); [EOL]         ValueUtils.setValue(collection, index, value); [EOL]     } else { [EOL]         variables.declareVariable(name.toString(), value); [EOL]     } [EOL] } <line_num>: 92,104
public boolean isActual() { [EOL]     return actual; [EOL] } <line_num>: 106,108
public void setIndex(int index) { [EOL]     super.setIndex(index); [EOL]     valuePointer = null; [EOL] } <line_num>: 110,113
public Object getImmediateNode() { [EOL]     throw new JXPathException("Undefined variable: " + name); [EOL] } <line_num>: 125,128
public NodePointer getImmediateValuePointer() { [EOL]     if (valuePointer == null) { [EOL]         Object value = null; [EOL]         if (actual) { [EOL]             value = getImmediateNode(); [EOL]             valuePointer = NodePointer.newChildNodePointer(this, null, value); [EOL]         } else { [EOL]             return new NullPointer(this, getName()) { [EOL]  [EOL]                 public Object getImmediateNode() { [EOL]                     throw new JXPathException("Undefined variable: " + name); [EOL]                 } [EOL]             }; [EOL]         } [EOL]     } [EOL]     return valuePointer; [EOL] } <line_num>: 115,133
public int getLength() { [EOL]     if (actual) { [EOL]         Object value = getBaseValue(); [EOL]         if (value == null) { [EOL]             return 1; [EOL]         } [EOL]         return ValueUtils.getLength(value); [EOL]     } [EOL]     return 0; [EOL] } <line_num>: 135,144
public NodePointer createPath(JXPathContext context, Object value) { [EOL]     if (actual) { [EOL]         setValue(value); [EOL]         return this; [EOL]     } [EOL]     NodePointer ptr = createPath(context); [EOL]     ptr.setValue(value); [EOL]     return ptr; [EOL] } <line_num>: 146,154
public NodePointer createPath(JXPathContext context) { [EOL]     if (!actual) { [EOL]         AbstractFactory factory = getAbstractFactory(context); [EOL]         if (!factory.declareVariable(context, name.toString())) { [EOL]             throw new JXPathAbstractFactoryException("Factory cannot define variable '" + name + "' for path: " + asPath()); [EOL]         } [EOL]         findVariables(context); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 156,168
public NodePointer createChild(JXPathContext context, QName name, int index) { [EOL]     Object collection = createCollection(context, index); [EOL]     if (!isActual() || (index != 0 && index != WHOLE_COLLECTION)) { [EOL]         AbstractFactory factory = getAbstractFactory(context); [EOL]         boolean success = factory.createObject(context, this, collection, getName().toString(), index); [EOL]         if (!success) { [EOL]             throw new JXPathAbstractFactoryException("Factory could not create object path: " + asPath()); [EOL]         } [EOL]         NodePointer cln = (NodePointer) clone(); [EOL]         cln.setIndex(index); [EOL]         return cln; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 170,194
public NodePointer createChild(JXPathContext context, QName name, int index, Object value) { [EOL]     Object collection = createCollection(context, index); [EOL]     ValueUtils.setValue(collection, index, value); [EOL]     NodePointer cl = (NodePointer) clone(); [EOL]     cl.setIndex(index); [EOL]     return cl; [EOL] } <line_num>: 196,207
private Object createCollection(JXPathContext context, int index) { [EOL]     createPath(context); [EOL]     Object collection = getBaseValue(); [EOL]     if (collection == null) { [EOL]         throw new JXPathAbstractFactoryException("Factory did not assign a collection to variable '" + name + "' for path: " + asPath()); [EOL]     } [EOL]     if (index == WHOLE_COLLECTION) { [EOL]         index = 0; [EOL]     } else if (index < 0) { [EOL]         throw new JXPathInvalidAccessException("Index is less than 1: " + asPath()); [EOL]     } [EOL]     if (index >= getLength()) { [EOL]         collection = ValueUtils.expandCollection(collection, index + 1); [EOL]         variables.declareVariable(name.toString(), collection); [EOL]     } [EOL]     return collection; [EOL] } <line_num>: 209,235
public void remove() { [EOL]     if (actual) { [EOL]         if (index == WHOLE_COLLECTION) { [EOL]             variables.undeclareVariable(name.toString()); [EOL]         } else { [EOL]             if (index < 0) { [EOL]                 throw new JXPathInvalidAccessException("Index is less than 1: " + asPath()); [EOL]             } [EOL]             Object collection = getBaseValue(); [EOL]             if (collection != null && index < getLength()) { [EOL]                 collection = ValueUtils.remove(collection, index); [EOL]                 variables.declareVariable(name.toString(), collection); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 237,255
protected void findVariables(JXPathContext context) { [EOL]     valuePointer = null; [EOL]     JXPathContext varCtx = context; [EOL]     while (varCtx != null) { [EOL]         variables = varCtx.getVariables(); [EOL]         if (variables.isDeclaredVariable(name.toString())) { [EOL]             actual = true; [EOL]             break; [EOL]         } [EOL]         varCtx = varCtx.getParentContext(); [EOL]         variables = null; [EOL]     } [EOL] } <line_num>: 257,269
public int hashCode() { [EOL]     return (actual ? System.identityHashCode(variables) : 0) + name.hashCode() + index; [EOL] } <line_num>: 271,275
public boolean equals(Object object) { [EOL]     if (object == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(object instanceof VariablePointer)) { [EOL]         return false; [EOL]     } [EOL]     VariablePointer other = (VariablePointer) object; [EOL]     return variables == other.variables && name.equals(other.name) && index == other.index; [EOL] } <line_num>: 277,290
public String asPath() { [EOL]     StringBuffer buffer = new StringBuffer(); [EOL]     buffer.append('$'); [EOL]     buffer.append(name); [EOL]     if (!actual) { [EOL]         if (index != WHOLE_COLLECTION) { [EOL]             buffer.append('[').append(index + 1).append(']'); [EOL]         } [EOL]     } else if (index != WHOLE_COLLECTION && (getNode() == null || isCollection())) { [EOL]         buffer.append('[').append(index + 1).append(']'); [EOL]     } [EOL]     return buffer.toString(); [EOL] } <line_num>: 292,307
public NodeIterator childIterator(NodeTest test, boolean reverse, NodePointer startWith) { [EOL]     return getValuePointer().childIterator(test, reverse, startWith); [EOL] } <line_num>: 309,315
public NodeIterator attributeIterator(QName name) { [EOL]     return getValuePointer().attributeIterator(name); [EOL] } <line_num>: 317,319
public NodeIterator namespaceIterator() { [EOL]     return getValuePointer().namespaceIterator(); [EOL] } <line_num>: 321,323
public NodePointer namespacePointer(String name) { [EOL]     return getValuePointer().namespacePointer(name); [EOL] } <line_num>: 325,327
public boolean testNode(NodeTest nodeTest) { [EOL]     return getValuePointer().testNode(nodeTest); [EOL] } <line_num>: 329,331
private AbstractFactory getAbstractFactory(JXPathContext context) { [EOL]     AbstractFactory factory = context.getFactory(); [EOL]     if (factory == null) { [EOL]         throw new JXPathException("Factory is not set on the JXPathContext - cannot create path: " + asPath()); [EOL]     } [EOL]     return factory; [EOL] } <line_num>: 333,341
public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) { [EOL]     return pointer1.getIndex() - pointer2.getIndex(); [EOL] } <line_num>: 343,348
