public XPathParser(java.io.InputStream stream) { [EOL]     jj_input_stream = new SimpleCharStream(stream, 1, 1); [EOL]     token_source = new XPathParserTokenManager(jj_input_stream); [EOL]     token = new Token(); [EOL]     token.next = jj_nt = token_source.getNextToken(); [EOL]     jj_gen = 0; [EOL]     for (int i = 0; i < 39; i++) jj_la1[i] = -1; [EOL]     for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls(); [EOL] } <line_num>: 3538,3546
public XPathParser(java.io.Reader stream) { [EOL]     jj_input_stream = new SimpleCharStream(stream, 1, 1); [EOL]     token_source = new XPathParserTokenManager(jj_input_stream); [EOL]     token = new Token(); [EOL]     token.next = jj_nt = token_source.getNextToken(); [EOL]     jj_gen = 0; [EOL]     for (int i = 0; i < 39; i++) jj_la1[i] = -1; [EOL]     for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls(); [EOL] } <line_num>: 3558,3566
public XPathParser(XPathParserTokenManager tm) { [EOL]     token_source = tm; [EOL]     token = new Token(); [EOL]     token.next = jj_nt = token_source.getNextToken(); [EOL]     jj_gen = 0; [EOL]     for (int i = 0; i < 39; i++) jj_la1[i] = -1; [EOL]     for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls(); [EOL] } <line_num>: 3578,3585
public void setCompiler(Compiler compiler) { [EOL]     this.compiler = compiler; [EOL] } <line_num>: 10,12
private String unescape(String string) { [EOL]     int index = string.indexOf("&apos;"); [EOL]     while (index != -1) { [EOL]         string = string.substring(0, index) + "\'" + string.substring(index + 6); [EOL]         index = string.indexOf("&apos;"); [EOL]     } [EOL]     index = string.indexOf("&quot;"); [EOL]     while (index != -1) { [EOL]         string = string.substring(0, index) + "\"" + string.substring(index + 6); [EOL]         index = string.indexOf("&quot;"); [EOL]     } [EOL]     return string; [EOL] } <line_num>: 14,26
final public String NCName() throws ParseException { [EOL]     switch(jj_nt.kind) { [EOL]         case OR: [EOL]         case AND: [EOL]         case MOD: [EOL]         case DIV: [EOL]         case NCName: [EOL]             NCName_Without_CoreFunctions(); [EOL]             break; [EOL]         case NODE: [EOL]             jj_consume_token(NODE); [EOL]             break; [EOL]         case TEXT: [EOL]             jj_consume_token(TEXT); [EOL]             break; [EOL]         case COMMENT: [EOL]             jj_consume_token(COMMENT); [EOL]             break; [EOL]         case PI: [EOL]             jj_consume_token(PI); [EOL]             break; [EOL]         case FUNCTION_LAST: [EOL]             jj_consume_token(FUNCTION_LAST); [EOL]             break; [EOL]         case FUNCTION_POSITION: [EOL]             jj_consume_token(FUNCTION_POSITION); [EOL]             break; [EOL]         case FUNCTION_COUNT: [EOL]             jj_consume_token(FUNCTION_COUNT); [EOL]             break; [EOL]         case FUNCTION_ID: [EOL]             jj_consume_token(FUNCTION_ID); [EOL]             break; [EOL]         case FUNCTION_LOCAL_NAME: [EOL]             jj_consume_token(FUNCTION_LOCAL_NAME); [EOL]             break; [EOL]         case FUNCTION_NAMESPACE_URI: [EOL]             jj_consume_token(FUNCTION_NAMESPACE_URI); [EOL]             break; [EOL]         case FUNCTION_NAME: [EOL]             jj_consume_token(FUNCTION_NAME); [EOL]             break; [EOL]         case FUNCTION_STRING: [EOL]             jj_consume_token(FUNCTION_STRING); [EOL]             break; [EOL]         case FUNCTION_CONCAT: [EOL]             jj_consume_token(FUNCTION_CONCAT); [EOL]             break; [EOL]         case FUNCTION_STARTS_WITH: [EOL]             jj_consume_token(FUNCTION_STARTS_WITH); [EOL]             break; [EOL]         case FUNCTION_CONTAINS: [EOL]             jj_consume_token(FUNCTION_CONTAINS); [EOL]             break; [EOL]         case FUNCTION_SUBSTRING_BEFORE: [EOL]             jj_consume_token(FUNCTION_SUBSTRING_BEFORE); [EOL]             break; [EOL]         case FUNCTION_SUBSTRING_AFTER: [EOL]             jj_consume_token(FUNCTION_SUBSTRING_AFTER); [EOL]             break; [EOL]         case FUNCTION_SUBSTRING: [EOL]             jj_consume_token(FUNCTION_SUBSTRING); [EOL]             break; [EOL]         case FUNCTION_STRING_LENGTH: [EOL]             jj_consume_token(FUNCTION_STRING_LENGTH); [EOL]             break; [EOL]         case FUNCTION_NORMALIZE_SPACE: [EOL]             jj_consume_token(FUNCTION_NORMALIZE_SPACE); [EOL]             break; [EOL]         case FUNCTION_TRANSLATE: [EOL]             jj_consume_token(FUNCTION_TRANSLATE); [EOL]             break; [EOL]         case FUNCTION_BOOLEAN: [EOL]             jj_consume_token(FUNCTION_BOOLEAN); [EOL]             break; [EOL]         case FUNCTION_NOT: [EOL]             jj_consume_token(FUNCTION_NOT); [EOL]             break; [EOL]         case FUNCTION_TRUE: [EOL]             jj_consume_token(FUNCTION_TRUE); [EOL]             break; [EOL]         case FUNCTION_FALSE: [EOL]             jj_consume_token(FUNCTION_FALSE); [EOL]             break; [EOL]         case FUNCTION_NULL: [EOL]             jj_consume_token(FUNCTION_NULL); [EOL]             break; [EOL]         case FUNCTION_LANG: [EOL]             jj_consume_token(FUNCTION_LANG); [EOL]             break; [EOL]         case FUNCTION_NUMBER: [EOL]             jj_consume_token(FUNCTION_NUMBER); [EOL]             break; [EOL]         case FUNCTION_SUM: [EOL]             jj_consume_token(FUNCTION_SUM); [EOL]             break; [EOL]         case FUNCTION_FLOOR: [EOL]             jj_consume_token(FUNCTION_FLOOR); [EOL]             break; [EOL]         case FUNCTION_CEILING: [EOL]             jj_consume_token(FUNCTION_CEILING); [EOL]             break; [EOL]         case FUNCTION_ROUND: [EOL]             jj_consume_token(FUNCTION_ROUND); [EOL]             break; [EOL]         case FUNCTION_KEY: [EOL]             jj_consume_token(FUNCTION_KEY); [EOL]             break; [EOL]         case FUNCTION_FORMAT_NUMBER: [EOL]             jj_consume_token(FUNCTION_FORMAT_NUMBER); [EOL]             break; [EOL]         default: [EOL]             jj_la1[0] = jj_gen; [EOL]             jj_consume_token(-1); [EOL]             throw new ParseException(); [EOL]     } [EOL]     { [EOL]         if (true) [EOL]             return token.image; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 29,147
final public String NCName_Without_CoreFunctions() throws ParseException { [EOL]     switch(jj_nt.kind) { [EOL]         case NCName: [EOL]             jj_consume_token(NCName); [EOL]             break; [EOL]         case OR: [EOL]             jj_consume_token(OR); [EOL]             break; [EOL]         case AND: [EOL]             jj_consume_token(AND); [EOL]             break; [EOL]         case MOD: [EOL]             jj_consume_token(MOD); [EOL]             break; [EOL]         case DIV: [EOL]             jj_consume_token(DIV); [EOL]             break; [EOL]         default: [EOL]             jj_la1[1] = jj_gen; [EOL]             jj_consume_token(-1); [EOL]             throw new ParseException(); [EOL]     } [EOL]     { [EOL]         if (true) [EOL]             return token.image; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 149,173
final public int CoreFunctionName() throws ParseException { [EOL]     int code; [EOL]     switch(jj_nt.kind) { [EOL]         case FUNCTION_LAST: [EOL]             jj_consume_token(FUNCTION_LAST); [EOL]             code = Compiler.FUNCTION_LAST; [EOL]             break; [EOL]         case FUNCTION_POSITION: [EOL]             jj_consume_token(FUNCTION_POSITION); [EOL]             code = Compiler.FUNCTION_POSITION; [EOL]             break; [EOL]         case FUNCTION_COUNT: [EOL]             jj_consume_token(FUNCTION_COUNT); [EOL]             code = Compiler.FUNCTION_COUNT; [EOL]             break; [EOL]         case FUNCTION_ID: [EOL]             jj_consume_token(FUNCTION_ID); [EOL]             code = Compiler.FUNCTION_ID; [EOL]             break; [EOL]         case FUNCTION_LOCAL_NAME: [EOL]             jj_consume_token(FUNCTION_LOCAL_NAME); [EOL]             code = Compiler.FUNCTION_LOCAL_NAME; [EOL]             break; [EOL]         case FUNCTION_NAMESPACE_URI: [EOL]             jj_consume_token(FUNCTION_NAMESPACE_URI); [EOL]             code = Compiler.FUNCTION_NAMESPACE_URI; [EOL]             break; [EOL]         case FUNCTION_NAME: [EOL]             jj_consume_token(FUNCTION_NAME); [EOL]             code = Compiler.FUNCTION_NAME; [EOL]             break; [EOL]         case FUNCTION_STRING: [EOL]             jj_consume_token(FUNCTION_STRING); [EOL]             code = Compiler.FUNCTION_STRING; [EOL]             break; [EOL]         case FUNCTION_CONCAT: [EOL]             jj_consume_token(FUNCTION_CONCAT); [EOL]             code = Compiler.FUNCTION_CONCAT; [EOL]             break; [EOL]         case FUNCTION_STARTS_WITH: [EOL]             jj_consume_token(FUNCTION_STARTS_WITH); [EOL]             code = Compiler.FUNCTION_STARTS_WITH; [EOL]             break; [EOL]         case FUNCTION_CONTAINS: [EOL]             jj_consume_token(FUNCTION_CONTAINS); [EOL]             code = Compiler.FUNCTION_CONTAINS; [EOL]             break; [EOL]         case FUNCTION_SUBSTRING_BEFORE: [EOL]             jj_consume_token(FUNCTION_SUBSTRING_BEFORE); [EOL]             code = Compiler.FUNCTION_SUBSTRING_BEFORE; [EOL]             break; [EOL]         case FUNCTION_SUBSTRING_AFTER: [EOL]             jj_consume_token(FUNCTION_SUBSTRING_AFTER); [EOL]             code = Compiler.FUNCTION_SUBSTRING_AFTER; [EOL]             break; [EOL]         case FUNCTION_SUBSTRING: [EOL]             jj_consume_token(FUNCTION_SUBSTRING); [EOL]             code = Compiler.FUNCTION_SUBSTRING; [EOL]             break; [EOL]         case FUNCTION_STRING_LENGTH: [EOL]             jj_consume_token(FUNCTION_STRING_LENGTH); [EOL]             code = Compiler.FUNCTION_STRING_LENGTH; [EOL]             break; [EOL]         case FUNCTION_NORMALIZE_SPACE: [EOL]             jj_consume_token(FUNCTION_NORMALIZE_SPACE); [EOL]             code = Compiler.FUNCTION_NORMALIZE_SPACE; [EOL]             break; [EOL]         case FUNCTION_TRANSLATE: [EOL]             jj_consume_token(FUNCTION_TRANSLATE); [EOL]             code = Compiler.FUNCTION_TRANSLATE; [EOL]             break; [EOL]         case FUNCTION_BOOLEAN: [EOL]             jj_consume_token(FUNCTION_BOOLEAN); [EOL]             code = Compiler.FUNCTION_BOOLEAN; [EOL]             break; [EOL]         case FUNCTION_NOT: [EOL]             jj_consume_token(FUNCTION_NOT); [EOL]             code = Compiler.FUNCTION_NOT; [EOL]             break; [EOL]         case FUNCTION_TRUE: [EOL]             jj_consume_token(FUNCTION_TRUE); [EOL]             code = Compiler.FUNCTION_TRUE; [EOL]             break; [EOL]         case FUNCTION_FALSE: [EOL]             jj_consume_token(FUNCTION_FALSE); [EOL]             code = Compiler.FUNCTION_FALSE; [EOL]             break; [EOL]         case FUNCTION_NULL: [EOL]             jj_consume_token(FUNCTION_NULL); [EOL]             code = Compiler.FUNCTION_NULL; [EOL]             break; [EOL]         case FUNCTION_LANG: [EOL]             jj_consume_token(FUNCTION_LANG); [EOL]             code = Compiler.FUNCTION_LANG; [EOL]             break; [EOL]         case FUNCTION_NUMBER: [EOL]             jj_consume_token(FUNCTION_NUMBER); [EOL]             code = Compiler.FUNCTION_NUMBER; [EOL]             break; [EOL]         case FUNCTION_SUM: [EOL]             jj_consume_token(FUNCTION_SUM); [EOL]             code = Compiler.FUNCTION_SUM; [EOL]             break; [EOL]         case FUNCTION_FLOOR: [EOL]             jj_consume_token(FUNCTION_FLOOR); [EOL]             code = Compiler.FUNCTION_FLOOR; [EOL]             break; [EOL]         case FUNCTION_CEILING: [EOL]             jj_consume_token(FUNCTION_CEILING); [EOL]             code = Compiler.FUNCTION_CEILING; [EOL]             break; [EOL]         case FUNCTION_ROUND: [EOL]             jj_consume_token(FUNCTION_ROUND); [EOL]             code = Compiler.FUNCTION_ROUND; [EOL]             break; [EOL]         case FUNCTION_KEY: [EOL]             jj_consume_token(FUNCTION_KEY); [EOL]             code = Compiler.FUNCTION_KEY; [EOL]             break; [EOL]         case FUNCTION_FORMAT_NUMBER: [EOL]             jj_consume_token(FUNCTION_FORMAT_NUMBER); [EOL]             code = Compiler.FUNCTION_FORMAT_NUMBER; [EOL]             break; [EOL]         default: [EOL]             jj_la1[2] = jj_gen; [EOL]             jj_consume_token(-1); [EOL]             throw new ParseException(); [EOL]     } [EOL]     { [EOL]         if (true) [EOL]             return code; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 175,305
final public Object QName() throws ParseException { [EOL]     String nc1, nc2 = null; [EOL]     nc1 = NCName(); [EOL]     switch(jj_nt.kind) { [EOL]         case 79: [EOL]             jj_consume_token(79); [EOL]             nc2 = NCName(); [EOL]             break; [EOL]         default: [EOL]             jj_la1[3] = jj_gen; [EOL]             ; [EOL]     } [EOL]     if (nc2 == null) { [EOL]         { [EOL]             if (true) [EOL]                 return compiler.qname(null, nc1); [EOL]         } [EOL]     } else { [EOL]         { [EOL]             if (true) [EOL]                 return compiler.qname(nc1, nc2); [EOL]         } [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 307,326
final public Object QName_Without_CoreFunctions() throws ParseException { [EOL]     String nc1, nc2 = null; [EOL]     if (jj_2_1(2147483647)) { [EOL]         nc1 = NCName(); [EOL]         jj_consume_token(79); [EOL]         nc2 = NCName(); [EOL]     } else { [EOL]         switch(jj_nt.kind) { [EOL]             case OR: [EOL]             case AND: [EOL]             case MOD: [EOL]             case DIV: [EOL]             case NCName: [EOL]                 nc1 = NCName_Without_CoreFunctions(); [EOL]                 break; [EOL]             default: [EOL]                 jj_la1[4] = jj_gen; [EOL]                 jj_consume_token(-1); [EOL]                 throw new ParseException(); [EOL]         } [EOL]     } [EOL]     if (nc2 == null) { [EOL]         { [EOL]             if (true) [EOL]                 return compiler.qname(null, nc1); [EOL]         } [EOL]     } else { [EOL]         { [EOL]             if (true) [EOL]                 return compiler.qname(nc1, nc2); [EOL]         } [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 328,356
final public Object parseExpression() throws ParseException { [EOL]     Object ex; [EOL]     ex = Expression(); [EOL]     jj_consume_token(0); [EOL]     { [EOL]         if (true) [EOL]             return ex; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 358,364
final public Object LocationPath() throws ParseException { [EOL]     Object ex = null; [EOL]     switch(jj_nt.kind) { [EOL]         case OR: [EOL]         case AND: [EOL]         case MOD: [EOL]         case DIV: [EOL]         case NODE: [EOL]         case TEXT: [EOL]         case COMMENT: [EOL]         case PI: [EOL]         case AXIS_SELF: [EOL]         case AXIS_CHILD: [EOL]         case AXIS_PARENT: [EOL]         case AXIS_ANCESTOR: [EOL]         case AXIS_ATTRIBUTE: [EOL]         case AXIS_NAMESPACE: [EOL]         case AXIS_PRECEDING: [EOL]         case AXIS_FOLLOWING: [EOL]         case AXIS_DESCENDANT: [EOL]         case AXIS_ANCESTOR_OR_SELF: [EOL]         case AXIS_FOLLOWING_SIBLING: [EOL]         case AXIS_PRECEDING_SIBLING: [EOL]         case AXIS_DESCENDANT_OR_SELF: [EOL]         case FUNCTION_LAST: [EOL]         case FUNCTION_POSITION: [EOL]         case FUNCTION_COUNT: [EOL]         case FUNCTION_ID: [EOL]         case FUNCTION_KEY: [EOL]         case FUNCTION_LOCAL_NAME: [EOL]         case FUNCTION_NAMESPACE_URI: [EOL]         case FUNCTION_NAME: [EOL]         case FUNCTION_STRING: [EOL]         case FUNCTION_CONCAT: [EOL]         case FUNCTION_STARTS_WITH: [EOL]         case FUNCTION_CONTAINS: [EOL]         case FUNCTION_SUBSTRING_BEFORE: [EOL]         case FUNCTION_SUBSTRING_AFTER: [EOL]         case FUNCTION_SUBSTRING: [EOL]         case FUNCTION_STRING_LENGTH: [EOL]         case FUNCTION_NORMALIZE_SPACE: [EOL]         case FUNCTION_TRANSLATE: [EOL]         case FUNCTION_BOOLEAN: [EOL]         case FUNCTION_NOT: [EOL]         case FUNCTION_TRUE: [EOL]         case FUNCTION_FALSE: [EOL]         case FUNCTION_NULL: [EOL]         case FUNCTION_LANG: [EOL]         case FUNCTION_NUMBER: [EOL]         case FUNCTION_SUM: [EOL]         case FUNCTION_FLOOR: [EOL]         case FUNCTION_CEILING: [EOL]         case FUNCTION_ROUND: [EOL]         case FUNCTION_FORMAT_NUMBER: [EOL]         case NCName: [EOL]         case 82: [EOL]         case 83: [EOL]         case 86: [EOL]         case 88: [EOL]             ex = RelativeLocationPath(); [EOL]             break; [EOL]         case SLASH: [EOL]         case SLASHSLASH: [EOL]             ex = AbsoluteLocationPath(); [EOL]             break; [EOL]         default: [EOL]             jj_la1[5] = jj_gen; [EOL]             jj_consume_token(-1); [EOL]             throw new ParseException(); [EOL]     } [EOL]     { [EOL]         if (true) [EOL]             return ex; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 437,509
final public Object AbsoluteLocationPath() throws ParseException { [EOL]     ArrayList steps = new ArrayList(); [EOL]     if (jj_2_2(2147483647)) { [EOL]         LocationStep(steps); [EOL]         label_1: while (true) { [EOL]             switch(jj_nt.kind) { [EOL]                 case SLASH: [EOL]                 case SLASHSLASH: [EOL]                     ; [EOL]                     break; [EOL]                 default: [EOL]                     jj_la1[6] = jj_gen; [EOL]                     break label_1; [EOL]             } [EOL]             LocationStep(steps); [EOL]         } [EOL]     } else { [EOL]         switch(jj_nt.kind) { [EOL]             case SLASH: [EOL]                 jj_consume_token(SLASH); [EOL]                 break; [EOL]             default: [EOL]                 jj_la1[7] = jj_gen; [EOL]                 jj_consume_token(-1); [EOL]                 throw new ParseException(); [EOL]         } [EOL]     } [EOL]     { [EOL]         if (true) [EOL]             return compiler.locationPath(true, steps.toArray()); [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 513,543
final public Object RelativeLocationPath() throws ParseException { [EOL]     ArrayList steps = new ArrayList(); [EOL]     NodeTest(steps); [EOL]     label_2: while (true) { [EOL]         switch(jj_nt.kind) { [EOL]             case SLASH: [EOL]             case SLASHSLASH: [EOL]                 ; [EOL]                 break; [EOL]             default: [EOL]                 jj_la1[8] = jj_gen; [EOL]                 break label_2; [EOL]         } [EOL]         LocationStep(steps); [EOL]     } [EOL]     { [EOL]         if (true) [EOL]             return compiler.locationPath(false, steps.toArray()); [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 546,564
final public void LocationStep(ArrayList steps) throws ParseException { [EOL]     Object t; [EOL]     Object s; [EOL]     switch(jj_nt.kind) { [EOL]         case SLASH: [EOL]             jj_consume_token(SLASH); [EOL]             break; [EOL]         case SLASHSLASH: [EOL]             jj_consume_token(SLASHSLASH); [EOL]             t = compiler.nodeTypeTest(Compiler.NODE_TYPE_NODE); [EOL]             steps.add(compiler.step(Compiler.AXIS_DESCENDANT_OR_SELF, t, null)); [EOL]             break; [EOL]         default: [EOL]             jj_la1[9] = jj_gen; [EOL]             jj_consume_token(-1); [EOL]             throw new ParseException(); [EOL]     } [EOL]     NodeTest(steps); [EOL] } <line_num>: 575,594
final public void NodeTest(ArrayList steps) throws ParseException { [EOL]     int axis; [EOL]     int type = -1; [EOL]     String instruction = null; [EOL]     Object name = null; [EOL]     Object s; [EOL]     Object p; [EOL]     ArrayList ps = new ArrayList(); [EOL]     switch(jj_nt.kind) { [EOL]         case OR: [EOL]         case AND: [EOL]         case MOD: [EOL]         case DIV: [EOL]         case NODE: [EOL]         case TEXT: [EOL]         case COMMENT: [EOL]         case PI: [EOL]         case AXIS_SELF: [EOL]         case AXIS_CHILD: [EOL]         case AXIS_PARENT: [EOL]         case AXIS_ANCESTOR: [EOL]         case AXIS_ATTRIBUTE: [EOL]         case AXIS_NAMESPACE: [EOL]         case AXIS_PRECEDING: [EOL]         case AXIS_FOLLOWING: [EOL]         case AXIS_DESCENDANT: [EOL]         case AXIS_ANCESTOR_OR_SELF: [EOL]         case AXIS_FOLLOWING_SIBLING: [EOL]         case AXIS_PRECEDING_SIBLING: [EOL]         case AXIS_DESCENDANT_OR_SELF: [EOL]         case FUNCTION_LAST: [EOL]         case FUNCTION_POSITION: [EOL]         case FUNCTION_COUNT: [EOL]         case FUNCTION_ID: [EOL]         case FUNCTION_KEY: [EOL]         case FUNCTION_LOCAL_NAME: [EOL]         case FUNCTION_NAMESPACE_URI: [EOL]         case FUNCTION_NAME: [EOL]         case FUNCTION_STRING: [EOL]         case FUNCTION_CONCAT: [EOL]         case FUNCTION_STARTS_WITH: [EOL]         case FUNCTION_CONTAINS: [EOL]         case FUNCTION_SUBSTRING_BEFORE: [EOL]         case FUNCTION_SUBSTRING_AFTER: [EOL]         case FUNCTION_SUBSTRING: [EOL]         case FUNCTION_STRING_LENGTH: [EOL]         case FUNCTION_NORMALIZE_SPACE: [EOL]         case FUNCTION_TRANSLATE: [EOL]         case FUNCTION_BOOLEAN: [EOL]         case FUNCTION_NOT: [EOL]         case FUNCTION_TRUE: [EOL]         case FUNCTION_FALSE: [EOL]         case FUNCTION_NULL: [EOL]         case FUNCTION_LANG: [EOL]         case FUNCTION_NUMBER: [EOL]         case FUNCTION_SUM: [EOL]         case FUNCTION_FLOOR: [EOL]         case FUNCTION_CEILING: [EOL]         case FUNCTION_ROUND: [EOL]         case FUNCTION_FORMAT_NUMBER: [EOL]         case NCName: [EOL]         case 86: [EOL]         case 88: [EOL]             axis = AxisSpecifier(); [EOL]             if (jj_2_3(2147483647)) { [EOL]                 type = NodeType(); [EOL]                 jj_consume_token(80); [EOL]                 jj_consume_token(81); [EOL]             } else if (jj_2_4(2147483647)) { [EOL]                 jj_consume_token(PI); [EOL]                 jj_consume_token(80); [EOL]                 jj_consume_token(Literal); [EOL]                 instruction = unescape(token.image.substring(1, token.image.length() - 1)); [EOL]                 jj_consume_token(81); [EOL]             } else { [EOL]                 switch(jj_nt.kind) { [EOL]                     case OR: [EOL]                     case AND: [EOL]                     case MOD: [EOL]                     case DIV: [EOL]                     case NODE: [EOL]                     case TEXT: [EOL]                     case COMMENT: [EOL]                     case PI: [EOL]                     case FUNCTION_LAST: [EOL]                     case FUNCTION_POSITION: [EOL]                     case FUNCTION_COUNT: [EOL]                     case FUNCTION_ID: [EOL]                     case FUNCTION_KEY: [EOL]                     case FUNCTION_LOCAL_NAME: [EOL]                     case FUNCTION_NAMESPACE_URI: [EOL]                     case FUNCTION_NAME: [EOL]                     case FUNCTION_STRING: [EOL]                     case FUNCTION_CONCAT: [EOL]                     case FUNCTION_STARTS_WITH: [EOL]                     case FUNCTION_CONTAINS: [EOL]                     case FUNCTION_SUBSTRING_BEFORE: [EOL]                     case FUNCTION_SUBSTRING_AFTER: [EOL]                     case FUNCTION_SUBSTRING: [EOL]                     case FUNCTION_STRING_LENGTH: [EOL]                     case FUNCTION_NORMALIZE_SPACE: [EOL]                     case FUNCTION_TRANSLATE: [EOL]                     case FUNCTION_BOOLEAN: [EOL]                     case FUNCTION_NOT: [EOL]                     case FUNCTION_TRUE: [EOL]                     case FUNCTION_FALSE: [EOL]                     case FUNCTION_NULL: [EOL]                     case FUNCTION_LANG: [EOL]                     case FUNCTION_NUMBER: [EOL]                     case FUNCTION_SUM: [EOL]                     case FUNCTION_FLOOR: [EOL]                     case FUNCTION_CEILING: [EOL]                     case FUNCTION_ROUND: [EOL]                     case FUNCTION_FORMAT_NUMBER: [EOL]                     case NCName: [EOL]                     case 88: [EOL]                         name = WildcardName(); [EOL]                         break; [EOL]                     default: [EOL]                         jj_la1[10] = jj_gen; [EOL]                         jj_consume_token(-1); [EOL]                         throw new ParseException(); [EOL]                 } [EOL]             } [EOL]             break; [EOL]         case 82: [EOL]             jj_consume_token(82); [EOL]             axis = Compiler.AXIS_SELF; [EOL]             type = Compiler.NODE_TYPE_NODE; [EOL]             break; [EOL]         case 83: [EOL]             jj_consume_token(83); [EOL]             axis = Compiler.AXIS_PARENT; [EOL]             type = Compiler.NODE_TYPE_NODE; [EOL]             break; [EOL]         default: [EOL]             jj_la1[11] = jj_gen; [EOL]             jj_consume_token(-1); [EOL]             throw new ParseException(); [EOL]     } [EOL]     label_3: while (true) { [EOL]         switch(jj_nt.kind) { [EOL]             case 84: [EOL]                 ; [EOL]                 break; [EOL]             default: [EOL]                 jj_la1[12] = jj_gen; [EOL]                 break label_3; [EOL]         } [EOL]         p = Predicate(); [EOL]         ps.add(p); [EOL]     } [EOL]     if (name != null) { [EOL]         s = compiler.nodeNameTest(name); [EOL]     } else if (instruction != null) { [EOL]         s = compiler.processingInstructionTest(instruction); [EOL]     } else { [EOL]         s = compiler.nodeTypeTest(type); [EOL]     } [EOL]     steps.add(compiler.step(axis, s, ps.toArray())); [EOL] } <line_num>: 597,760
final public int AxisSpecifier() throws ParseException { [EOL]     int axis; [EOL]     switch(jj_nt.kind) { [EOL]         case AXIS_SELF: [EOL]         case AXIS_CHILD: [EOL]         case AXIS_PARENT: [EOL]         case AXIS_ANCESTOR: [EOL]         case AXIS_ATTRIBUTE: [EOL]         case AXIS_NAMESPACE: [EOL]         case AXIS_PRECEDING: [EOL]         case AXIS_FOLLOWING: [EOL]         case AXIS_DESCENDANT: [EOL]         case AXIS_ANCESTOR_OR_SELF: [EOL]         case AXIS_FOLLOWING_SIBLING: [EOL]         case AXIS_PRECEDING_SIBLING: [EOL]         case AXIS_DESCENDANT_OR_SELF: [EOL]             axis = AxisName(); [EOL]             break; [EOL]         default: [EOL]             jj_la1[13] = jj_gen; [EOL]             axis = AbbreviatedAxisSpecifier(); [EOL]     } [EOL]     { [EOL]         if (true) [EOL]             return axis; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 763,787
final public int AxisName() throws ParseException { [EOL]     int axis = 0; [EOL]     switch(jj_nt.kind) { [EOL]         case AXIS_SELF: [EOL]             jj_consume_token(AXIS_SELF); [EOL]             axis = Compiler.AXIS_SELF; [EOL]             break; [EOL]         case AXIS_CHILD: [EOL]             jj_consume_token(AXIS_CHILD); [EOL]             axis = Compiler.AXIS_CHILD; [EOL]             break; [EOL]         case AXIS_PARENT: [EOL]             jj_consume_token(AXIS_PARENT); [EOL]             axis = Compiler.AXIS_PARENT; [EOL]             break; [EOL]         case AXIS_ANCESTOR: [EOL]             jj_consume_token(AXIS_ANCESTOR); [EOL]             axis = Compiler.AXIS_ANCESTOR; [EOL]             break; [EOL]         case AXIS_ATTRIBUTE: [EOL]             jj_consume_token(AXIS_ATTRIBUTE); [EOL]             axis = Compiler.AXIS_ATTRIBUTE; [EOL]             break; [EOL]         case AXIS_NAMESPACE: [EOL]             jj_consume_token(AXIS_NAMESPACE); [EOL]             axis = Compiler.AXIS_NAMESPACE; [EOL]             break; [EOL]         case AXIS_PRECEDING: [EOL]             jj_consume_token(AXIS_PRECEDING); [EOL]             axis = Compiler.AXIS_PRECEDING; [EOL]             break; [EOL]         case AXIS_FOLLOWING: [EOL]             jj_consume_token(AXIS_FOLLOWING); [EOL]             axis = Compiler.AXIS_FOLLOWING; [EOL]             break; [EOL]         case AXIS_DESCENDANT: [EOL]             jj_consume_token(AXIS_DESCENDANT); [EOL]             axis = Compiler.AXIS_DESCENDANT; [EOL]             break; [EOL]         case AXIS_ANCESTOR_OR_SELF: [EOL]             jj_consume_token(AXIS_ANCESTOR_OR_SELF); [EOL]             axis = Compiler.AXIS_ANCESTOR_OR_SELF; [EOL]             break; [EOL]         case AXIS_FOLLOWING_SIBLING: [EOL]             jj_consume_token(AXIS_FOLLOWING_SIBLING); [EOL]             axis = Compiler.AXIS_FOLLOWING_SIBLING; [EOL]             break; [EOL]         case AXIS_PRECEDING_SIBLING: [EOL]             jj_consume_token(AXIS_PRECEDING_SIBLING); [EOL]             axis = Compiler.AXIS_PRECEDING_SIBLING; [EOL]             break; [EOL]         case AXIS_DESCENDANT_OR_SELF: [EOL]             jj_consume_token(AXIS_DESCENDANT_OR_SELF); [EOL]             axis = Compiler.AXIS_DESCENDANT_OR_SELF; [EOL]             break; [EOL]         default: [EOL]             jj_la1[14] = jj_gen; [EOL]             jj_consume_token(-1); [EOL]             throw new ParseException(); [EOL]     } [EOL]     { [EOL]         if (true) [EOL]             return axis; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 797,859
final public Object Predicate() throws ParseException { [EOL]     Object ex; [EOL]     jj_consume_token(84); [EOL]     ex = Expression(); [EOL]     jj_consume_token(85); [EOL]     { [EOL]         if (true) [EOL]             return ex; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 871,878
final public int AbbreviatedAxisSpecifier() throws ParseException { [EOL]     int axis = Compiler.AXIS_CHILD; [EOL]     switch(jj_nt.kind) { [EOL]         case 86: [EOL]             jj_consume_token(86); [EOL]             axis = Compiler.AXIS_ATTRIBUTE; [EOL]             break; [EOL]         default: [EOL]             jj_la1[15] = jj_gen; [EOL]             ; [EOL]     } [EOL]     { [EOL]         if (true) [EOL]             return axis; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 883,896
final public Object Expression() throws ParseException { [EOL]     Object ex; [EOL]     ex = OrExpr(); [EOL]     { [EOL]         if (true) [EOL]             return ex; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 917,922
final public Object PrimaryExpr() throws ParseException { [EOL]     Object ex = null; [EOL]     switch(jj_nt.kind) { [EOL]         case VARIABLE: [EOL]             ex = VariableReference(); [EOL]             break; [EOL]         case 80: [EOL]             jj_consume_token(80); [EOL]             ex = Expression(); [EOL]             jj_consume_token(81); [EOL]             break; [EOL]         case Literal: [EOL]             jj_consume_token(Literal); [EOL]             ex = compiler.literal(unescape(token.image.substring(1, token.image.length() - 1))); [EOL]             break; [EOL]         case Number: [EOL]             jj_consume_token(Number); [EOL]             ex = compiler.number(token.image); [EOL]             break; [EOL]         default: [EOL]             jj_la1[16] = jj_gen; [EOL]             if (jj_2_5(2147483647)) { [EOL]                 ex = CoreFunctionCall(); [EOL]             } else { [EOL]                 switch(jj_nt.kind) { [EOL]                     case OR: [EOL]                     case AND: [EOL]                     case MOD: [EOL]                     case DIV: [EOL]                     case NODE: [EOL]                     case TEXT: [EOL]                     case COMMENT: [EOL]                     case PI: [EOL]                     case FUNCTION_LAST: [EOL]                     case FUNCTION_POSITION: [EOL]                     case FUNCTION_COUNT: [EOL]                     case FUNCTION_ID: [EOL]                     case FUNCTION_KEY: [EOL]                     case FUNCTION_LOCAL_NAME: [EOL]                     case FUNCTION_NAMESPACE_URI: [EOL]                     case FUNCTION_NAME: [EOL]                     case FUNCTION_STRING: [EOL]                     case FUNCTION_CONCAT: [EOL]                     case FUNCTION_STARTS_WITH: [EOL]                     case FUNCTION_CONTAINS: [EOL]                     case FUNCTION_SUBSTRING_BEFORE: [EOL]                     case FUNCTION_SUBSTRING_AFTER: [EOL]                     case FUNCTION_SUBSTRING: [EOL]                     case FUNCTION_STRING_LENGTH: [EOL]                     case FUNCTION_NORMALIZE_SPACE: [EOL]                     case FUNCTION_TRANSLATE: [EOL]                     case FUNCTION_BOOLEAN: [EOL]                     case FUNCTION_NOT: [EOL]                     case FUNCTION_TRUE: [EOL]                     case FUNCTION_FALSE: [EOL]                     case FUNCTION_NULL: [EOL]                     case FUNCTION_LANG: [EOL]                     case FUNCTION_NUMBER: [EOL]                     case FUNCTION_SUM: [EOL]                     case FUNCTION_FLOOR: [EOL]                     case FUNCTION_CEILING: [EOL]                     case FUNCTION_ROUND: [EOL]                     case FUNCTION_FORMAT_NUMBER: [EOL]                     case NCName: [EOL]                         ex = FunctionCall(); [EOL]                         break; [EOL]                     default: [EOL]                         jj_la1[17] = jj_gen; [EOL]                         jj_consume_token(-1); [EOL]                         throw new ParseException(); [EOL]                 } [EOL]             } [EOL]     } [EOL]     { [EOL]         if (true) [EOL]             return ex; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 925,1000
final public Object FunctionCall() throws ParseException { [EOL]     Object name; [EOL]     ArrayList args; [EOL]     name = FunctionName(); [EOL]     args = ArgumentList(); [EOL]     if (args == null) { [EOL]         { [EOL]             if (true) [EOL]                 return compiler.function(name, null); [EOL]         } [EOL]     } else { [EOL]         { [EOL]             if (true) [EOL]                 return compiler.function(name, args.toArray()); [EOL]         } [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 1007,1019
final public Object CoreFunctionCall() throws ParseException { [EOL]     int code = 0; [EOL]     ArrayList args; [EOL]     code = CoreFunctionName(); [EOL]     args = ArgumentList(); [EOL]     if (args == null) { [EOL]         { [EOL]             if (true) [EOL]                 return compiler.function(code, null); [EOL]         } [EOL]     } else { [EOL]         { [EOL]             if (true) [EOL]                 return compiler.function(code, args.toArray()); [EOL]         } [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 1021,1033
final public ArrayList ArgumentList() throws ParseException { [EOL]     ArrayList args = null; [EOL]     Object arg; [EOL]     jj_consume_token(80); [EOL]     switch(jj_nt.kind) { [EOL]         case SLASH: [EOL]         case SLASHSLASH: [EOL]         case MINUS: [EOL]         case VARIABLE: [EOL]         case Literal: [EOL]         case Number: [EOL]         case OR: [EOL]         case AND: [EOL]         case MOD: [EOL]         case DIV: [EOL]         case NODE: [EOL]         case TEXT: [EOL]         case COMMENT: [EOL]         case PI: [EOL]         case AXIS_SELF: [EOL]         case AXIS_CHILD: [EOL]         case AXIS_PARENT: [EOL]         case AXIS_ANCESTOR: [EOL]         case AXIS_ATTRIBUTE: [EOL]         case AXIS_NAMESPACE: [EOL]         case AXIS_PRECEDING: [EOL]         case AXIS_FOLLOWING: [EOL]         case AXIS_DESCENDANT: [EOL]         case AXIS_ANCESTOR_OR_SELF: [EOL]         case AXIS_FOLLOWING_SIBLING: [EOL]         case AXIS_PRECEDING_SIBLING: [EOL]         case AXIS_DESCENDANT_OR_SELF: [EOL]         case FUNCTION_LAST: [EOL]         case FUNCTION_POSITION: [EOL]         case FUNCTION_COUNT: [EOL]         case FUNCTION_ID: [EOL]         case FUNCTION_KEY: [EOL]         case FUNCTION_LOCAL_NAME: [EOL]         case FUNCTION_NAMESPACE_URI: [EOL]         case FUNCTION_NAME: [EOL]         case FUNCTION_STRING: [EOL]         case FUNCTION_CONCAT: [EOL]         case FUNCTION_STARTS_WITH: [EOL]         case FUNCTION_CONTAINS: [EOL]         case FUNCTION_SUBSTRING_BEFORE: [EOL]         case FUNCTION_SUBSTRING_AFTER: [EOL]         case FUNCTION_SUBSTRING: [EOL]         case FUNCTION_STRING_LENGTH: [EOL]         case FUNCTION_NORMALIZE_SPACE: [EOL]         case FUNCTION_TRANSLATE: [EOL]         case FUNCTION_BOOLEAN: [EOL]         case FUNCTION_NOT: [EOL]         case FUNCTION_TRUE: [EOL]         case FUNCTION_FALSE: [EOL]         case FUNCTION_NULL: [EOL]         case FUNCTION_LANG: [EOL]         case FUNCTION_NUMBER: [EOL]         case FUNCTION_SUM: [EOL]         case FUNCTION_FLOOR: [EOL]         case FUNCTION_CEILING: [EOL]         case FUNCTION_ROUND: [EOL]         case FUNCTION_FORMAT_NUMBER: [EOL]         case NCName: [EOL]         case 80: [EOL]         case 82: [EOL]         case 83: [EOL]         case 86: [EOL]         case 88: [EOL]             arg = Argument(); [EOL]             args = new ArrayList(); [EOL]             args.add(arg); [EOL]             label_4: while (true) { [EOL]                 switch(jj_nt.kind) { [EOL]                     case 87: [EOL]                         ; [EOL]                         break; [EOL]                     default: [EOL]                         jj_la1[18] = jj_gen; [EOL]                         break label_4; [EOL]                 } [EOL]                 jj_consume_token(87); [EOL]                 arg = Argument(); [EOL]                 args.add(arg); [EOL]             } [EOL]             break; [EOL]         default: [EOL]             jj_la1[19] = jj_gen; [EOL]             ; [EOL]     } [EOL]     jj_consume_token(81); [EOL]     { [EOL]         if (true) [EOL]             return args; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 1035,1127
final public Object Argument() throws ParseException { [EOL]     Object ex; [EOL]     ex = Expression(); [EOL]     { [EOL]         if (true) [EOL]             return ex; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 1130,1135
final public Object UnionExpr() throws ParseException { [EOL]     Object ex, r; [EOL]     ArrayList list = null; [EOL]     ex = PathExpr(); [EOL]     label_5: while (true) { [EOL]         switch(jj_nt.kind) { [EOL]             case UNION: [EOL]                 ; [EOL]                 break; [EOL]             default: [EOL]                 jj_la1[20] = jj_gen; [EOL]                 break label_5; [EOL]         } [EOL]         jj_consume_token(UNION); [EOL]         r = PathExpr(); [EOL]         if (list == null) { [EOL]             list = new ArrayList(); [EOL]             list.add(ex); [EOL]         } [EOL]         list.add(r); [EOL]     } [EOL]     if (list != null) { [EOL]         ex = compiler.union(list.toArray()); [EOL]     } [EOL]     { [EOL]         if (true) [EOL]             return ex; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 1142,1169
final public Object PathExpr() throws ParseException { [EOL]     Object ex = null; [EOL]     Object[] steps; [EOL]     if (jj_2_6(2147483647)) { [EOL]         ex = FilterExpr(); [EOL]     } else { [EOL]         switch(jj_nt.kind) { [EOL]             case SLASH: [EOL]             case SLASHSLASH: [EOL]             case OR: [EOL]             case AND: [EOL]             case MOD: [EOL]             case DIV: [EOL]             case NODE: [EOL]             case TEXT: [EOL]             case COMMENT: [EOL]             case PI: [EOL]             case AXIS_SELF: [EOL]             case AXIS_CHILD: [EOL]             case AXIS_PARENT: [EOL]             case AXIS_ANCESTOR: [EOL]             case AXIS_ATTRIBUTE: [EOL]             case AXIS_NAMESPACE: [EOL]             case AXIS_PRECEDING: [EOL]             case AXIS_FOLLOWING: [EOL]             case AXIS_DESCENDANT: [EOL]             case AXIS_ANCESTOR_OR_SELF: [EOL]             case AXIS_FOLLOWING_SIBLING: [EOL]             case AXIS_PRECEDING_SIBLING: [EOL]             case AXIS_DESCENDANT_OR_SELF: [EOL]             case FUNCTION_LAST: [EOL]             case FUNCTION_POSITION: [EOL]             case FUNCTION_COUNT: [EOL]             case FUNCTION_ID: [EOL]             case FUNCTION_KEY: [EOL]             case FUNCTION_LOCAL_NAME: [EOL]             case FUNCTION_NAMESPACE_URI: [EOL]             case FUNCTION_NAME: [EOL]             case FUNCTION_STRING: [EOL]             case FUNCTION_CONCAT: [EOL]             case FUNCTION_STARTS_WITH: [EOL]             case FUNCTION_CONTAINS: [EOL]             case FUNCTION_SUBSTRING_BEFORE: [EOL]             case FUNCTION_SUBSTRING_AFTER: [EOL]             case FUNCTION_SUBSTRING: [EOL]             case FUNCTION_STRING_LENGTH: [EOL]             case FUNCTION_NORMALIZE_SPACE: [EOL]             case FUNCTION_TRANSLATE: [EOL]             case FUNCTION_BOOLEAN: [EOL]             case FUNCTION_NOT: [EOL]             case FUNCTION_TRUE: [EOL]             case FUNCTION_FALSE: [EOL]             case FUNCTION_NULL: [EOL]             case FUNCTION_LANG: [EOL]             case FUNCTION_NUMBER: [EOL]             case FUNCTION_SUM: [EOL]             case FUNCTION_FLOOR: [EOL]             case FUNCTION_CEILING: [EOL]             case FUNCTION_ROUND: [EOL]             case FUNCTION_FORMAT_NUMBER: [EOL]             case NCName: [EOL]             case 82: [EOL]             case 83: [EOL]             case 86: [EOL]             case 88: [EOL]                 ex = LocationPath(); [EOL]                 break; [EOL]             default: [EOL]                 jj_la1[21] = jj_gen; [EOL]                 jj_consume_token(-1); [EOL]                 throw new ParseException(); [EOL]         } [EOL]     } [EOL]     { [EOL]         if (true) [EOL]             return ex; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 1172,1247
final public Object FilterExpr() throws ParseException { [EOL]     Object ex, p; [EOL]     ArrayList ps = new ArrayList(); [EOL]     boolean path = false; [EOL]     ArrayList steps = new ArrayList(); [EOL]     ex = PrimaryExpr(); [EOL]     label_6: while (true) { [EOL]         switch(jj_nt.kind) { [EOL]             case 84: [EOL]                 ; [EOL]                 break; [EOL]             default: [EOL]                 jj_la1[22] = jj_gen; [EOL]                 break label_6; [EOL]         } [EOL]         p = Predicate(); [EOL]         path = true; [EOL]         ps.add(p); [EOL]     } [EOL]     label_7: while (true) { [EOL]         switch(jj_nt.kind) { [EOL]             case SLASH: [EOL]             case SLASHSLASH: [EOL]                 ; [EOL]                 break; [EOL]             default: [EOL]                 jj_la1[23] = jj_gen; [EOL]                 break label_7; [EOL]         } [EOL]         LocationStep(steps); [EOL]         path = true; [EOL]     } [EOL]     if (path) { [EOL]         { [EOL]             if (true) [EOL]                 return compiler.expressionPath(ex, ps.toArray(), steps.toArray()); [EOL]         } [EOL]     } else { [EOL]         { [EOL]             if (true) [EOL]                 return ex; [EOL]         } [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 1250,1291
final public Object OrExpr() throws ParseException { [EOL]     Object ex, r; [EOL]     ArrayList list = null; [EOL]     ex = AndExpr(); [EOL]     label_8: while (true) { [EOL]         switch(jj_nt.kind) { [EOL]             case OR: [EOL]                 ; [EOL]                 break; [EOL]             default: [EOL]                 jj_la1[24] = jj_gen; [EOL]                 break label_8; [EOL]         } [EOL]         jj_consume_token(OR); [EOL]         r = AndExpr(); [EOL]         if (list == null) { [EOL]             list = new ArrayList(); [EOL]             list.add(ex); [EOL]         } [EOL]         list.add(r); [EOL]     } [EOL]     if (list != null) { [EOL]         ex = compiler.or(list.toArray()); [EOL]     } [EOL]     { [EOL]         if (true) [EOL]             return ex; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 1298,1325
final public Object AndExpr() throws ParseException { [EOL]     Object ex, r; [EOL]     ArrayList list = null; [EOL]     ex = EqualityExpr(); [EOL]     label_9: while (true) { [EOL]         switch(jj_nt.kind) { [EOL]             case AND: [EOL]                 ; [EOL]                 break; [EOL]             default: [EOL]                 jj_la1[25] = jj_gen; [EOL]                 break label_9; [EOL]         } [EOL]         jj_consume_token(AND); [EOL]         r = EqualityExpr(); [EOL]         if (list == null) { [EOL]             list = new ArrayList(); [EOL]             list.add(ex); [EOL]         } [EOL]         list.add(r); [EOL]     } [EOL]     if (list != null) { [EOL]         ex = compiler.and(list.toArray()); [EOL]     } [EOL]     { [EOL]         if (true) [EOL]             return ex; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 1328,1355
final public Object EqualityExpr() throws ParseException { [EOL]     Object ex, r; [EOL]     ex = RelationalExpr(); [EOL]     label_10: while (true) { [EOL]         switch(jj_nt.kind) { [EOL]             case EQ: [EOL]             case NEQ: [EOL]                 ; [EOL]                 break; [EOL]             default: [EOL]                 jj_la1[26] = jj_gen; [EOL]                 break label_10; [EOL]         } [EOL]         switch(jj_nt.kind) { [EOL]             case EQ: [EOL]                 jj_consume_token(EQ); [EOL]                 r = RelationalExpr(); [EOL]                 ex = compiler.equal(ex, r); [EOL]                 break; [EOL]             case NEQ: [EOL]                 jj_consume_token(NEQ); [EOL]                 r = RelationalExpr(); [EOL]                 ex = compiler.notEqual(ex, r); [EOL]                 break; [EOL]             default: [EOL]                 jj_la1[27] = jj_gen; [EOL]                 jj_consume_token(-1); [EOL]                 throw new ParseException(); [EOL]         } [EOL]     } [EOL]     { [EOL]         if (true) [EOL]             return ex; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 1358,1391
final public Object RelationalExpr() throws ParseException { [EOL]     Object ex, r; [EOL]     ex = AdditiveExpr(); [EOL]     label_11: while (true) { [EOL]         switch(jj_nt.kind) { [EOL]             case LT: [EOL]             case LTE: [EOL]             case GT: [EOL]             case GTE: [EOL]                 ; [EOL]                 break; [EOL]             default: [EOL]                 jj_la1[28] = jj_gen; [EOL]                 break label_11; [EOL]         } [EOL]         switch(jj_nt.kind) { [EOL]             case LT: [EOL]                 jj_consume_token(LT); [EOL]                 r = AdditiveExpr(); [EOL]                 ex = compiler.lessThan(ex, r); [EOL]                 break; [EOL]             case GT: [EOL]                 jj_consume_token(GT); [EOL]                 r = AdditiveExpr(); [EOL]                 ex = compiler.greaterThan(ex, r); [EOL]                 break; [EOL]             case LTE: [EOL]                 jj_consume_token(LTE); [EOL]                 r = AdditiveExpr(); [EOL]                 ex = compiler.lessThanOrEqual(ex, r); [EOL]                 break; [EOL]             case GTE: [EOL]                 jj_consume_token(GTE); [EOL]                 r = AdditiveExpr(); [EOL]                 ex = compiler.greaterThanOrEqual(ex, r); [EOL]                 break; [EOL]             default: [EOL]                 jj_la1[29] = jj_gen; [EOL]                 jj_consume_token(-1); [EOL]                 throw new ParseException(); [EOL]         } [EOL]     } [EOL]     { [EOL]         if (true) [EOL]             return ex; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 1395,1440
final public Object AdditiveExpr() throws ParseException { [EOL]     Object ex, r; [EOL]     ArrayList list = null; [EOL]     ex = SubtractiveExpr(); [EOL]     label_12: while (true) { [EOL]         switch(jj_nt.kind) { [EOL]             case PLUS: [EOL]                 ; [EOL]                 break; [EOL]             default: [EOL]                 jj_la1[30] = jj_gen; [EOL]                 break label_12; [EOL]         } [EOL]         jj_consume_token(PLUS); [EOL]         r = SubtractiveExpr(); [EOL]         if (list == null) { [EOL]             list = new ArrayList(); [EOL]             list.add(ex); [EOL]         } [EOL]         list.add(r); [EOL]     } [EOL]     if (list != null) { [EOL]         ex = compiler.sum(list.toArray()); [EOL]     } [EOL]     { [EOL]         if (true) [EOL]             return ex; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 1447,1474
final public Object SubtractiveExpr() throws ParseException { [EOL]     Object ex, r = null; [EOL]     ex = MultiplicativeExpr(); [EOL]     label_13: while (true) { [EOL]         switch(jj_nt.kind) { [EOL]             case MINUS: [EOL]                 ; [EOL]                 break; [EOL]             default: [EOL]                 jj_la1[31] = jj_gen; [EOL]                 break label_13; [EOL]         } [EOL]         jj_consume_token(MINUS); [EOL]         r = MultiplicativeExpr(); [EOL]         ex = compiler.minus(ex, r); [EOL]     } [EOL]     { [EOL]         if (true) [EOL]             return ex; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 1476,1495
final public Object MultiplicativeExpr() throws ParseException { [EOL]     Object ex, r; [EOL]     ex = UnaryExpr(); [EOL]     label_14: while (true) { [EOL]         switch(jj_nt.kind) { [EOL]             case MOD: [EOL]             case DIV: [EOL]             case 88: [EOL]                 ; [EOL]                 break; [EOL]             default: [EOL]                 jj_la1[32] = jj_gen; [EOL]                 break label_14; [EOL]         } [EOL]         switch(jj_nt.kind) { [EOL]             case 88: [EOL]                 jj_consume_token(88); [EOL]                 r = UnaryExpr(); [EOL]                 ex = compiler.multiply(ex, r); [EOL]                 break; [EOL]             case DIV: [EOL]                 jj_consume_token(DIV); [EOL]                 r = UnaryExpr(); [EOL]                 ex = compiler.divide(ex, r); [EOL]                 break; [EOL]             case MOD: [EOL]                 jj_consume_token(MOD); [EOL]                 r = UnaryExpr(); [EOL]                 ex = compiler.mod(ex, r); [EOL]                 break; [EOL]             default: [EOL]                 jj_la1[33] = jj_gen; [EOL]                 jj_consume_token(-1); [EOL]                 throw new ParseException(); [EOL]         } [EOL]     } [EOL]     { [EOL]         if (true) [EOL]             return ex; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 1499,1538
final public Object UnaryExpr() throws ParseException { [EOL]     Object ex; [EOL]     switch(jj_nt.kind) { [EOL]         case SLASH: [EOL]         case SLASHSLASH: [EOL]         case VARIABLE: [EOL]         case Literal: [EOL]         case Number: [EOL]         case OR: [EOL]         case AND: [EOL]         case MOD: [EOL]         case DIV: [EOL]         case NODE: [EOL]         case TEXT: [EOL]         case COMMENT: [EOL]         case PI: [EOL]         case AXIS_SELF: [EOL]         case AXIS_CHILD: [EOL]         case AXIS_PARENT: [EOL]         case AXIS_ANCESTOR: [EOL]         case AXIS_ATTRIBUTE: [EOL]         case AXIS_NAMESPACE: [EOL]         case AXIS_PRECEDING: [EOL]         case AXIS_FOLLOWING: [EOL]         case AXIS_DESCENDANT: [EOL]         case AXIS_ANCESTOR_OR_SELF: [EOL]         case AXIS_FOLLOWING_SIBLING: [EOL]         case AXIS_PRECEDING_SIBLING: [EOL]         case AXIS_DESCENDANT_OR_SELF: [EOL]         case FUNCTION_LAST: [EOL]         case FUNCTION_POSITION: [EOL]         case FUNCTION_COUNT: [EOL]         case FUNCTION_ID: [EOL]         case FUNCTION_KEY: [EOL]         case FUNCTION_LOCAL_NAME: [EOL]         case FUNCTION_NAMESPACE_URI: [EOL]         case FUNCTION_NAME: [EOL]         case FUNCTION_STRING: [EOL]         case FUNCTION_CONCAT: [EOL]         case FUNCTION_STARTS_WITH: [EOL]         case FUNCTION_CONTAINS: [EOL]         case FUNCTION_SUBSTRING_BEFORE: [EOL]         case FUNCTION_SUBSTRING_AFTER: [EOL]         case FUNCTION_SUBSTRING: [EOL]         case FUNCTION_STRING_LENGTH: [EOL]         case FUNCTION_NORMALIZE_SPACE: [EOL]         case FUNCTION_TRANSLATE: [EOL]         case FUNCTION_BOOLEAN: [EOL]         case FUNCTION_NOT: [EOL]         case FUNCTION_TRUE: [EOL]         case FUNCTION_FALSE: [EOL]         case FUNCTION_NULL: [EOL]         case FUNCTION_LANG: [EOL]         case FUNCTION_NUMBER: [EOL]         case FUNCTION_SUM: [EOL]         case FUNCTION_FLOOR: [EOL]         case FUNCTION_CEILING: [EOL]         case FUNCTION_ROUND: [EOL]         case FUNCTION_FORMAT_NUMBER: [EOL]         case NCName: [EOL]         case 80: [EOL]         case 82: [EOL]         case 83: [EOL]         case 86: [EOL]         case 88: [EOL]             ex = UnionExpr(); [EOL]             break; [EOL]         case MINUS: [EOL]             jj_consume_token(MINUS); [EOL]             ex = UnaryExpr(); [EOL]             ex = compiler.minus(ex); [EOL]             break; [EOL]         default: [EOL]             jj_la1[34] = jj_gen; [EOL]             jj_consume_token(-1); [EOL]             throw new ParseException(); [EOL]     } [EOL]     { [EOL]         if (true) [EOL]             return ex; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 1541,1620
final public Object FunctionName() throws ParseException { [EOL]     Object qname; [EOL]     qname = QName_Without_CoreFunctions(); [EOL]     { [EOL]         if (true) [EOL]             return qname; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 1656,1661
final public Object VariableReference() throws ParseException { [EOL]     Object ex; [EOL]     jj_consume_token(VARIABLE); [EOL]     ex = QName(); [EOL]     { [EOL]         if (true) [EOL]             return compiler.variableReference(ex); [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 1664,1670
final public Object WildcardName() throws ParseException { [EOL]     Object qn; [EOL]     String nc1, nc2 = null; [EOL]     switch(jj_nt.kind) { [EOL]         case 88: [EOL]             jj_consume_token(88); [EOL]             break; [EOL]         case OR: [EOL]         case AND: [EOL]         case MOD: [EOL]         case DIV: [EOL]         case NODE: [EOL]         case TEXT: [EOL]         case COMMENT: [EOL]         case PI: [EOL]         case FUNCTION_LAST: [EOL]         case FUNCTION_POSITION: [EOL]         case FUNCTION_COUNT: [EOL]         case FUNCTION_ID: [EOL]         case FUNCTION_KEY: [EOL]         case FUNCTION_LOCAL_NAME: [EOL]         case FUNCTION_NAMESPACE_URI: [EOL]         case FUNCTION_NAME: [EOL]         case FUNCTION_STRING: [EOL]         case FUNCTION_CONCAT: [EOL]         case FUNCTION_STARTS_WITH: [EOL]         case FUNCTION_CONTAINS: [EOL]         case FUNCTION_SUBSTRING_BEFORE: [EOL]         case FUNCTION_SUBSTRING_AFTER: [EOL]         case FUNCTION_SUBSTRING: [EOL]         case FUNCTION_STRING_LENGTH: [EOL]         case FUNCTION_NORMALIZE_SPACE: [EOL]         case FUNCTION_TRANSLATE: [EOL]         case FUNCTION_BOOLEAN: [EOL]         case FUNCTION_NOT: [EOL]         case FUNCTION_TRUE: [EOL]         case FUNCTION_FALSE: [EOL]         case FUNCTION_NULL: [EOL]         case FUNCTION_LANG: [EOL]         case FUNCTION_NUMBER: [EOL]         case FUNCTION_SUM: [EOL]         case FUNCTION_FLOOR: [EOL]         case FUNCTION_CEILING: [EOL]         case FUNCTION_ROUND: [EOL]         case FUNCTION_FORMAT_NUMBER: [EOL]         case NCName: [EOL]             NCName(); [EOL]             break; [EOL]         default: [EOL]             jj_la1[35] = jj_gen; [EOL]             jj_consume_token(-1); [EOL]             throw new ParseException(); [EOL]     } [EOL]     nc1 = token.image; [EOL]     switch(jj_nt.kind) { [EOL]         case 79: [EOL]             jj_consume_token(79); [EOL]             switch(jj_nt.kind) { [EOL]                 case 88: [EOL]                     jj_consume_token(88); [EOL]                     break; [EOL]                 case OR: [EOL]                 case AND: [EOL]                 case MOD: [EOL]                 case DIV: [EOL]                 case NODE: [EOL]                 case TEXT: [EOL]                 case COMMENT: [EOL]                 case PI: [EOL]                 case FUNCTION_LAST: [EOL]                 case FUNCTION_POSITION: [EOL]                 case FUNCTION_COUNT: [EOL]                 case FUNCTION_ID: [EOL]                 case FUNCTION_KEY: [EOL]                 case FUNCTION_LOCAL_NAME: [EOL]                 case FUNCTION_NAMESPACE_URI: [EOL]                 case FUNCTION_NAME: [EOL]                 case FUNCTION_STRING: [EOL]                 case FUNCTION_CONCAT: [EOL]                 case FUNCTION_STARTS_WITH: [EOL]                 case FUNCTION_CONTAINS: [EOL]                 case FUNCTION_SUBSTRING_BEFORE: [EOL]                 case FUNCTION_SUBSTRING_AFTER: [EOL]                 case FUNCTION_SUBSTRING: [EOL]                 case FUNCTION_STRING_LENGTH: [EOL]                 case FUNCTION_NORMALIZE_SPACE: [EOL]                 case FUNCTION_TRANSLATE: [EOL]                 case FUNCTION_BOOLEAN: [EOL]                 case FUNCTION_NOT: [EOL]                 case FUNCTION_TRUE: [EOL]                 case FUNCTION_FALSE: [EOL]                 case FUNCTION_NULL: [EOL]                 case FUNCTION_LANG: [EOL]                 case FUNCTION_NUMBER: [EOL]                 case FUNCTION_SUM: [EOL]                 case FUNCTION_FLOOR: [EOL]                 case FUNCTION_CEILING: [EOL]                 case FUNCTION_ROUND: [EOL]                 case FUNCTION_FORMAT_NUMBER: [EOL]                 case NCName: [EOL]                     NCName(); [EOL]                     break; [EOL]                 default: [EOL]                     jj_la1[36] = jj_gen; [EOL]                     jj_consume_token(-1); [EOL]                     throw new ParseException(); [EOL]             } [EOL]             nc2 = token.image; [EOL]             break; [EOL]         default: [EOL]             jj_la1[37] = jj_gen; [EOL]             ; [EOL]     } [EOL]     if (nc2 != null) { [EOL]         qn = compiler.qname(nc1, nc2); [EOL]     } else { [EOL]         qn = compiler.qname(null, nc1); [EOL]     } [EOL]     { [EOL]         if (true) [EOL]             return qn; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 1673,1794
final public int NodeType() throws ParseException { [EOL]     int type; [EOL]     switch(jj_nt.kind) { [EOL]         case TEXT: [EOL]             jj_consume_token(TEXT); [EOL]             type = Compiler.NODE_TYPE_TEXT; [EOL]             break; [EOL]         case NODE: [EOL]             jj_consume_token(NODE); [EOL]             type = Compiler.NODE_TYPE_NODE; [EOL]             break; [EOL]         case COMMENT: [EOL]             jj_consume_token(COMMENT); [EOL]             type = Compiler.NODE_TYPE_COMMENT; [EOL]             break; [EOL]         case PI: [EOL]             jj_consume_token(PI); [EOL]             type = Compiler.NODE_TYPE_PI; [EOL]             break; [EOL]         default: [EOL]             jj_la1[38] = jj_gen; [EOL]             jj_consume_token(-1); [EOL]             throw new ParseException(); [EOL]     } [EOL]     { [EOL]         if (true) [EOL]             return type; [EOL]     } [EOL]     throw new Error("Missing return statement in function"); [EOL] } <line_num>: 1797,1823
final private boolean jj_2_1(int xla) { [EOL]     jj_la = xla; [EOL]     jj_lastpos = jj_scanpos = token; [EOL]     boolean retval = !jj_3_1(); [EOL]     jj_save(0, xla); [EOL]     return retval; [EOL] } <line_num>: 1825,1830
final private boolean jj_2_2(int xla) { [EOL]     jj_la = xla; [EOL]     jj_lastpos = jj_scanpos = token; [EOL]     boolean retval = !jj_3_2(); [EOL]     jj_save(1, xla); [EOL]     return retval; [EOL] } <line_num>: 1832,1837
final private boolean jj_2_3(int xla) { [EOL]     jj_la = xla; [EOL]     jj_lastpos = jj_scanpos = token; [EOL]     boolean retval = !jj_3_3(); [EOL]     jj_save(2, xla); [EOL]     return retval; [EOL] } <line_num>: 1839,1844
final private boolean jj_2_4(int xla) { [EOL]     jj_la = xla; [EOL]     jj_lastpos = jj_scanpos = token; [EOL]     boolean retval = !jj_3_4(); [EOL]     jj_save(3, xla); [EOL]     return retval; [EOL] } <line_num>: 1846,1851
final private boolean jj_2_5(int xla) { [EOL]     jj_la = xla; [EOL]     jj_lastpos = jj_scanpos = token; [EOL]     boolean retval = !jj_3_5(); [EOL]     jj_save(4, xla); [EOL]     return retval; [EOL] } <line_num>: 1853,1858
final private boolean jj_2_6(int xla) { [EOL]     jj_la = xla; [EOL]     jj_lastpos = jj_scanpos = token; [EOL]     boolean retval = !jj_3_6(); [EOL]     jj_save(5, xla); [EOL]     return retval; [EOL] } <line_num>: 1860,1865
final private boolean jj_3R_65() { [EOL]     if (jj_scan_token(FUNCTION_ID)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 1867,1871
final private boolean jj_3R_104() { [EOL]     if (jj_3R_118()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 1873,1877
final private boolean jj_3R_64() { [EOL]     if (jj_scan_token(FUNCTION_COUNT)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 1879,1883
final private boolean jj_3R_63() { [EOL]     if (jj_scan_token(FUNCTION_POSITION)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 1885,1889
final private boolean jj_3R_62() { [EOL]     if (jj_scan_token(FUNCTION_LAST)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 1891,1895
final private boolean jj_3R_18() { [EOL]     Token xsp; [EOL]     xsp = jj_scanpos; [EOL]     if (jj_3R_62()) { [EOL]         jj_scanpos = xsp; [EOL]         if (jj_3R_63()) { [EOL]             jj_scanpos = xsp; [EOL]             if (jj_3R_64()) { [EOL]                 jj_scanpos = xsp; [EOL]                 if (jj_3R_65()) { [EOL]                     jj_scanpos = xsp; [EOL]                     if (jj_3R_66()) { [EOL]                         jj_scanpos = xsp; [EOL]                         if (jj_3R_67()) { [EOL]                             jj_scanpos = xsp; [EOL]                             if (jj_3R_68()) { [EOL]                                 jj_scanpos = xsp; [EOL]                                 if (jj_3R_69()) { [EOL]                                     jj_scanpos = xsp; [EOL]                                     if (jj_3R_70()) { [EOL]                                         jj_scanpos = xsp; [EOL]                                         if (jj_3R_71()) { [EOL]                                             jj_scanpos = xsp; [EOL]                                             if (jj_3R_72()) { [EOL]                                                 jj_scanpos = xsp; [EOL]                                                 if (jj_3R_73()) { [EOL]                                                     jj_scanpos = xsp; [EOL]                                                     if (jj_3R_74()) { [EOL]                                                         jj_scanpos = xsp; [EOL]                                                         if (jj_3R_75()) { [EOL]                                                             jj_scanpos = xsp; [EOL]                                                             if (jj_3R_76()) { [EOL]                                                                 jj_scanpos = xsp; [EOL]                                                                 if (jj_3R_77()) { [EOL]                                                                     jj_scanpos = xsp; [EOL]                                                                     if (jj_3R_78()) { [EOL]                                                                         jj_scanpos = xsp; [EOL]                                                                         if (jj_3R_79()) { [EOL]                                                                             jj_scanpos = xsp; [EOL]                                                                             if (jj_3R_80()) { [EOL]                                                                                 jj_scanpos = xsp; [EOL]                                                                                 if (jj_3R_81()) { [EOL]                                                                                     jj_scanpos = xsp; [EOL]                                                                                     if (jj_3R_82()) { [EOL]                                                                                         jj_scanpos = xsp; [EOL]                                                                                         if (jj_3R_83()) { [EOL]                                                                                             jj_scanpos = xsp; [EOL]                                                                                             if (jj_3R_84()) { [EOL]                                                                                                 jj_scanpos = xsp; [EOL]                                                                                                 if (jj_3R_85()) { [EOL]                                                                                                     jj_scanpos = xsp; [EOL]                                                                                                     if (jj_3R_86()) { [EOL]                                                                                                         jj_scanpos = xsp; [EOL]                                                                                                         if (jj_3R_87()) { [EOL]                                                                                                             jj_scanpos = xsp; [EOL]                                                                                                             if (jj_3R_88()) { [EOL]                                                                                                                 jj_scanpos = xsp; [EOL]                                                                                                                 if (jj_3R_89()) { [EOL]                                                                                                                     jj_scanpos = xsp; [EOL]                                                                                                                     if (jj_3R_90()) { [EOL]                                                                                                                         jj_scanpos = xsp; [EOL]                                                                                                                         if (jj_3R_91()) [EOL]                                                                                                                             return true; [EOL]                                                                                                                         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                                                             return false; [EOL]                                                                                                                     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                                                         return false; [EOL]                                                                                                                 } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                                                     return false; [EOL]                                                                                                             } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                                                 return false; [EOL]                                                                                                         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                                             return false; [EOL]                                                                                                     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                                         return false; [EOL]                                                                                                 } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                                     return false; [EOL]                                                                                             } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                                 return false; [EOL]                                                                                         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                             return false; [EOL]                                                                                     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                         return false; [EOL]                                                                                 } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                     return false; [EOL]                                                                             } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                 return false; [EOL]                                                                         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                             return false; [EOL]                                                                     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                         return false; [EOL]                                                                 } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                     return false; [EOL]                                                             } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                 return false; [EOL]                                                         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                             return false; [EOL]                                                     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                         return false; [EOL]                                                 } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                     return false; [EOL]                                             } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                 return false; [EOL]                                         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                             return false; [EOL]                                     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                         return false; [EOL]                                 } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                     return false; [EOL]                             } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                 return false; [EOL]                         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                             return false; [EOL]                     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                         return false; [EOL]                 } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                     return false; [EOL]             } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                 return false; [EOL]         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 1897,1990
final private boolean jj_3R_111() { [EOL]     if (jj_scan_token(DIV)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 1992,1996
final private boolean jj_3R_110() { [EOL]     if (jj_scan_token(MOD)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 1998,2002
final private boolean jj_3R_109() { [EOL]     if (jj_scan_token(AND)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2004,2008
final private boolean jj_3R_108() { [EOL]     if (jj_scan_token(OR)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2010,2014
final private boolean jj_3R_107() { [EOL]     if (jj_scan_token(NCName)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2016,2020
final private boolean jj_3R_173() { [EOL]     if (jj_scan_token(MINUS)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_3R_170()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2022,2028
final private boolean jj_3R_98() { [EOL]     Token xsp; [EOL]     xsp = jj_scanpos; [EOL]     if (jj_3R_107()) { [EOL]         jj_scanpos = xsp; [EOL]         if (jj_3R_108()) { [EOL]             jj_scanpos = xsp; [EOL]             if (jj_3R_109()) { [EOL]                 jj_scanpos = xsp; [EOL]                 if (jj_3R_110()) { [EOL]                     jj_scanpos = xsp; [EOL]                     if (jj_3R_111()) [EOL]                         return true; [EOL]                     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                         return false; [EOL]                 } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                     return false; [EOL]             } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                 return false; [EOL]         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2030,2048
final private boolean jj_3R_171() { [EOL]     Token xsp; [EOL]     xsp = jj_scanpos; [EOL]     if (jj_3R_174()) { [EOL]         jj_scanpos = xsp; [EOL]         if (jj_3R_175()) { [EOL]             jj_scanpos = xsp; [EOL]             if (jj_3R_176()) [EOL]                 return true; [EOL]             if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                 return false; [EOL]         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2050,2062
final private boolean jj_3R_172() { [EOL]     if (jj_3R_177()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2064,2068
final private boolean jj_3R_153() { [EOL]     if (jj_scan_token(86)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2070,2074
final private boolean jj_3R_130() { [EOL]     Token xsp; [EOL]     xsp = jj_scanpos; [EOL]     if (jj_3R_153()) [EOL]         jj_scanpos = xsp; [EOL]     else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2076,2082
final private boolean jj_3R_54() { [EOL]     if (jj_scan_token(FUNCTION_FORMAT_NUMBER)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2084,2088
final private boolean jj_3R_170() { [EOL]     Token xsp; [EOL]     xsp = jj_scanpos; [EOL]     if (jj_3R_172()) { [EOL]         jj_scanpos = xsp; [EOL]         if (jj_3R_173()) [EOL]             return true; [EOL]         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2090,2099
final private boolean jj_3R_53() { [EOL]     if (jj_scan_token(FUNCTION_KEY)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2101,2105
final private boolean jj_3R_52() { [EOL]     if (jj_scan_token(FUNCTION_ROUND)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2107,2111
final private boolean jj_3R_51() { [EOL]     if (jj_scan_token(FUNCTION_CEILING)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2113,2117
final private boolean jj_3R_50() { [EOL]     if (jj_scan_token(FUNCTION_FLOOR)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2119,2123
final private boolean jj_3R_49() { [EOL]     if (jj_scan_token(FUNCTION_SUM)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2125,2129
final private boolean jj_3R_48() { [EOL]     if (jj_scan_token(FUNCTION_NUMBER)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2131,2135
final private boolean jj_3R_176() { [EOL]     if (jj_scan_token(MOD)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_3R_170()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2137,2143
final private boolean jj_3R_47() { [EOL]     if (jj_scan_token(FUNCTION_LANG)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2145,2149
final private boolean jj_3R_175() { [EOL]     if (jj_scan_token(DIV)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_3R_170()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2151,2157
final private boolean jj_3R_46() { [EOL]     if (jj_scan_token(FUNCTION_NULL)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2159,2163
final private boolean jj_3R_174() { [EOL]     if (jj_scan_token(88)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_3R_170()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2165,2171
final private boolean jj_3R_45() { [EOL]     if (jj_scan_token(FUNCTION_FALSE)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2173,2177
final private boolean jj_3R_44() { [EOL]     if (jj_scan_token(FUNCTION_TRUE)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2179,2183
final private boolean jj_3R_43() { [EOL]     if (jj_scan_token(FUNCTION_NOT)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2185,2189
final private boolean jj_3R_42() { [EOL]     if (jj_scan_token(FUNCTION_BOOLEAN)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2191,2195
final private boolean jj_3R_41() { [EOL]     if (jj_scan_token(FUNCTION_TRANSLATE)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2197,2201
final private boolean jj_3R_116() { [EOL]     if (jj_scan_token(84)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_3R_104()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_scan_token(85)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2203,2211
final private boolean jj_3R_40() { [EOL]     if (jj_scan_token(FUNCTION_NORMALIZE_SPACE)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2213,2217
final private boolean jj_3R_39() { [EOL]     if (jj_scan_token(FUNCTION_STRING_LENGTH)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2219,2223
final private boolean jj_3R_38() { [EOL]     if (jj_scan_token(FUNCTION_SUBSTRING)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2225,2229
final private boolean jj_3R_37() { [EOL]     if (jj_scan_token(FUNCTION_SUBSTRING_AFTER)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2231,2235
final private boolean jj_3R_36() { [EOL]     if (jj_scan_token(FUNCTION_SUBSTRING_BEFORE)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2237,2241
final private boolean jj_3R_168() { [EOL]     if (jj_3R_170()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     Token xsp; [EOL]     while (true) { [EOL]         xsp = jj_scanpos; [EOL]         if (jj_3R_171()) { [EOL]             jj_scanpos = xsp; [EOL]             break; [EOL]         } [EOL]         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 2243,2253
final private boolean jj_3R_35() { [EOL]     if (jj_scan_token(FUNCTION_CONTAINS)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2255,2259
final private boolean jj_3R_34() { [EOL]     if (jj_scan_token(FUNCTION_STARTS_WITH)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2261,2265
final private boolean jj_3R_33() { [EOL]     if (jj_scan_token(FUNCTION_CONCAT)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2267,2271
final private boolean jj_3R_32() { [EOL]     if (jj_scan_token(FUNCTION_STRING)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2273,2277
final private boolean jj_3R_31() { [EOL]     if (jj_scan_token(FUNCTION_NAME)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2279,2283
final private boolean jj_3R_30() { [EOL]     if (jj_scan_token(FUNCTION_NAMESPACE_URI)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2285,2289
final private boolean jj_3R_29() { [EOL]     if (jj_scan_token(FUNCTION_LOCAL_NAME)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2291,2295
final private boolean jj_3R_169() { [EOL]     if (jj_scan_token(MINUS)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_3R_168()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2297,2303
final private boolean jj_3R_28() { [EOL]     if (jj_scan_token(FUNCTION_ID)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2305,2309
final private boolean jj_3R_27() { [EOL]     if (jj_scan_token(FUNCTION_COUNT)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2311,2315
final private boolean jj_3R_152() { [EOL]     if (jj_scan_token(AXIS_DESCENDANT_OR_SELF)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2317,2321
final private boolean jj_3R_26() { [EOL]     if (jj_scan_token(FUNCTION_POSITION)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2323,2327
final private boolean jj_3R_25() { [EOL]     if (jj_scan_token(FUNCTION_LAST)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2329,2333
final private boolean jj_3R_151() { [EOL]     if (jj_scan_token(AXIS_PRECEDING_SIBLING)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2335,2339
final private boolean jj_3R_24() { [EOL]     if (jj_scan_token(PI)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2341,2345
final private boolean jj_3R_150() { [EOL]     if (jj_scan_token(AXIS_FOLLOWING_SIBLING)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2347,2351
final private boolean jj_3R_23() { [EOL]     if (jj_scan_token(COMMENT)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2353,2357
final private boolean jj_3R_149() { [EOL]     if (jj_scan_token(AXIS_ANCESTOR_OR_SELF)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2359,2363
final private boolean jj_3R_163() { [EOL]     if (jj_scan_token(PLUS)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_3R_162()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2365,2371
final private boolean jj_3R_22() { [EOL]     if (jj_scan_token(TEXT)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2373,2377
final private boolean jj_3R_148() { [EOL]     if (jj_scan_token(AXIS_DESCENDANT)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2379,2383
final private boolean jj_3R_21() { [EOL]     if (jj_scan_token(NODE)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2385,2389
final private boolean jj_3R_147() { [EOL]     if (jj_scan_token(AXIS_FOLLOWING)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2391,2395
final private boolean jj_3R_20() { [EOL]     if (jj_3R_98()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2397,2401
final private boolean jj_3R_146() { [EOL]     if (jj_scan_token(AXIS_PRECEDING)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2403,2407
final private boolean jj_3R_145() { [EOL]     if (jj_scan_token(AXIS_NAMESPACE)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2409,2413
final private boolean jj_3R_162() { [EOL]     if (jj_3R_168()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     Token xsp; [EOL]     while (true) { [EOL]         xsp = jj_scanpos; [EOL]         if (jj_3R_169()) { [EOL]             jj_scanpos = xsp; [EOL]             break; [EOL]         } [EOL]         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 2415,2425
final private boolean jj_3R_144() { [EOL]     if (jj_scan_token(AXIS_ATTRIBUTE)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2427,2431
final private boolean jj_3R_143() { [EOL]     if (jj_scan_token(AXIS_ANCESTOR)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2433,2437
final private boolean jj_3R_142() { [EOL]     if (jj_scan_token(AXIS_PARENT)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2439,2443
final private boolean jj_3R_15() { [EOL]     Token xsp; [EOL]     xsp = jj_scanpos; [EOL]     if (jj_3R_20()) { [EOL]         jj_scanpos = xsp; [EOL]         if (jj_3R_21()) { [EOL]             jj_scanpos = xsp; [EOL]             if (jj_3R_22()) { [EOL]                 jj_scanpos = xsp; [EOL]                 if (jj_3R_23()) { [EOL]                     jj_scanpos = xsp; [EOL]                     if (jj_3R_24()) { [EOL]                         jj_scanpos = xsp; [EOL]                         if (jj_3R_25()) { [EOL]                             jj_scanpos = xsp; [EOL]                             if (jj_3R_26()) { [EOL]                                 jj_scanpos = xsp; [EOL]                                 if (jj_3R_27()) { [EOL]                                     jj_scanpos = xsp; [EOL]                                     if (jj_3R_28()) { [EOL]                                         jj_scanpos = xsp; [EOL]                                         if (jj_3R_29()) { [EOL]                                             jj_scanpos = xsp; [EOL]                                             if (jj_3R_30()) { [EOL]                                                 jj_scanpos = xsp; [EOL]                                                 if (jj_3R_31()) { [EOL]                                                     jj_scanpos = xsp; [EOL]                                                     if (jj_3R_32()) { [EOL]                                                         jj_scanpos = xsp; [EOL]                                                         if (jj_3R_33()) { [EOL]                                                             jj_scanpos = xsp; [EOL]                                                             if (jj_3R_34()) { [EOL]                                                                 jj_scanpos = xsp; [EOL]                                                                 if (jj_3R_35()) { [EOL]                                                                     jj_scanpos = xsp; [EOL]                                                                     if (jj_3R_36()) { [EOL]                                                                         jj_scanpos = xsp; [EOL]                                                                         if (jj_3R_37()) { [EOL]                                                                             jj_scanpos = xsp; [EOL]                                                                             if (jj_3R_38()) { [EOL]                                                                                 jj_scanpos = xsp; [EOL]                                                                                 if (jj_3R_39()) { [EOL]                                                                                     jj_scanpos = xsp; [EOL]                                                                                     if (jj_3R_40()) { [EOL]                                                                                         jj_scanpos = xsp; [EOL]                                                                                         if (jj_3R_41()) { [EOL]                                                                                             jj_scanpos = xsp; [EOL]                                                                                             if (jj_3R_42()) { [EOL]                                                                                                 jj_scanpos = xsp; [EOL]                                                                                                 if (jj_3R_43()) { [EOL]                                                                                                     jj_scanpos = xsp; [EOL]                                                                                                     if (jj_3R_44()) { [EOL]                                                                                                         jj_scanpos = xsp; [EOL]                                                                                                         if (jj_3R_45()) { [EOL]                                                                                                             jj_scanpos = xsp; [EOL]                                                                                                             if (jj_3R_46()) { [EOL]                                                                                                                 jj_scanpos = xsp; [EOL]                                                                                                                 if (jj_3R_47()) { [EOL]                                                                                                                     jj_scanpos = xsp; [EOL]                                                                                                                     if (jj_3R_48()) { [EOL]                                                                                                                         jj_scanpos = xsp; [EOL]                                                                                                                         if (jj_3R_49()) { [EOL]                                                                                                                             jj_scanpos = xsp; [EOL]                                                                                                                             if (jj_3R_50()) { [EOL]                                                                                                                                 jj_scanpos = xsp; [EOL]                                                                                                                                 if (jj_3R_51()) { [EOL]                                                                                                                                     jj_scanpos = xsp; [EOL]                                                                                                                                     if (jj_3R_52()) { [EOL]                                                                                                                                         jj_scanpos = xsp; [EOL]                                                                                                                                         if (jj_3R_53()) { [EOL]                                                                                                                                             jj_scanpos = xsp; [EOL]                                                                                                                                             if (jj_3R_54()) [EOL]                                                                                                                                                 return true; [EOL]                                                                                                                                             if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                                                                                 return false; [EOL]                                                                                                                                         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                                                                             return false; [EOL]                                                                                                                                     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                                                                         return false; [EOL]                                                                                                                                 } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                                                                     return false; [EOL]                                                                                                                             } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                                                                 return false; [EOL]                                                                                                                         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                                                             return false; [EOL]                                                                                                                     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                                                         return false; [EOL]                                                                                                                 } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                                                     return false; [EOL]                                                                                                             } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                                                 return false; [EOL]                                                                                                         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                                             return false; [EOL]                                                                                                     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                                         return false; [EOL]                                                                                                 } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                                     return false; [EOL]                                                                                             } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                                 return false; [EOL]                                                                                         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                             return false; [EOL]                                                                                     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                         return false; [EOL]                                                                                 } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                     return false; [EOL]                                                                             } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                                 return false; [EOL]                                                                         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                             return false; [EOL]                                                                     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                         return false; [EOL]                                                                 } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                     return false; [EOL]                                                             } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                                 return false; [EOL]                                                         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                             return false; [EOL]                                                     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                         return false; [EOL]                                                 } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                     return false; [EOL]                                             } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                 return false; [EOL]                                         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                             return false; [EOL]                                     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                         return false; [EOL]                                 } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                     return false; [EOL]                             } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                 return false; [EOL]                         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                             return false; [EOL]                     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                         return false; [EOL]                 } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                     return false; [EOL]             } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                 return false; [EOL]         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2445,2553
final private boolean jj_3R_141() { [EOL]     if (jj_scan_token(AXIS_CHILD)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2555,2559
final private boolean jj_3R_140() { [EOL]     if (jj_scan_token(AXIS_SELF)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2561,2565
final private boolean jj_3R_129() { [EOL]     Token xsp; [EOL]     xsp = jj_scanpos; [EOL]     if (jj_3R_140()) { [EOL]         jj_scanpos = xsp; [EOL]         if (jj_3R_141()) { [EOL]             jj_scanpos = xsp; [EOL]             if (jj_3R_142()) { [EOL]                 jj_scanpos = xsp; [EOL]                 if (jj_3R_143()) { [EOL]                     jj_scanpos = xsp; [EOL]                     if (jj_3R_144()) { [EOL]                         jj_scanpos = xsp; [EOL]                         if (jj_3R_145()) { [EOL]                             jj_scanpos = xsp; [EOL]                             if (jj_3R_146()) { [EOL]                                 jj_scanpos = xsp; [EOL]                                 if (jj_3R_147()) { [EOL]                                     jj_scanpos = xsp; [EOL]                                     if (jj_3R_148()) { [EOL]                                         jj_scanpos = xsp; [EOL]                                         if (jj_3R_149()) { [EOL]                                             jj_scanpos = xsp; [EOL]                                             if (jj_3R_150()) { [EOL]                                                 jj_scanpos = xsp; [EOL]                                                 if (jj_3R_151()) { [EOL]                                                     jj_scanpos = xsp; [EOL]                                                     if (jj_3R_152()) [EOL]                                                         return true; [EOL]                                                     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                         return false; [EOL]                                                 } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                     return false; [EOL]                                             } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                                 return false; [EOL]                                         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                             return false; [EOL]                                     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                         return false; [EOL]                                 } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                     return false; [EOL]                             } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                                 return false; [EOL]                         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                             return false; [EOL]                     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                         return false; [EOL]                 } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                     return false; [EOL]             } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                 return false; [EOL]         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2567,2609
final private boolean jj_3R_159() { [EOL]     Token xsp; [EOL]     xsp = jj_scanpos; [EOL]     if (jj_3R_164()) { [EOL]         jj_scanpos = xsp; [EOL]         if (jj_3R_165()) { [EOL]             jj_scanpos = xsp; [EOL]             if (jj_3R_166()) { [EOL]                 jj_scanpos = xsp; [EOL]                 if (jj_3R_167()) [EOL]                     return true; [EOL]                 if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                     return false; [EOL]             } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                 return false; [EOL]         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2611,2626
final private boolean jj_3R_158() { [EOL]     if (jj_3R_162()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     Token xsp; [EOL]     while (true) { [EOL]         xsp = jj_scanpos; [EOL]         if (jj_3R_163()) { [EOL]             jj_scanpos = xsp; [EOL]             break; [EOL]         } [EOL]         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 2628,2638
final private boolean jj_3R_122() { [EOL]     if (jj_3R_130()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2640,2644
final private boolean jj_3R_121() { [EOL]     if (jj_3R_129()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2646,2650
final private boolean jj_3R_167() { [EOL]     if (jj_scan_token(GTE)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_3R_158()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2652,2658
final private boolean jj_3R_112() { [EOL]     Token xsp; [EOL]     xsp = jj_scanpos; [EOL]     if (jj_3R_121()) { [EOL]         jj_scanpos = xsp; [EOL]         if (jj_3R_122()) [EOL]             return true; [EOL]         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2660,2669
final private boolean jj_3R_166() { [EOL]     if (jj_scan_token(LTE)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_3R_158()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2671,2677
final private boolean jj_3R_165() { [EOL]     if (jj_scan_token(GT)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_3R_158()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2679,2685
final private boolean jj_3R_157() { [EOL]     Token xsp; [EOL]     xsp = jj_scanpos; [EOL]     if (jj_3R_160()) { [EOL]         jj_scanpos = xsp; [EOL]         if (jj_3R_161()) [EOL]             return true; [EOL]         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2687,2696
final private boolean jj_3R_164() { [EOL]     if (jj_scan_token(LT)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_3R_158()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2698,2704
final private boolean jj_3R_156() { [EOL]     if (jj_3R_158()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     Token xsp; [EOL]     while (true) { [EOL]         xsp = jj_scanpos; [EOL]         if (jj_3R_159()) { [EOL]             jj_scanpos = xsp; [EOL]             break; [EOL]         } [EOL]         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 2706,2716
final private boolean jj_3R_161() { [EOL]     if (jj_scan_token(NEQ)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_3R_156()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2718,2724
final private boolean jj_3R_160() { [EOL]     if (jj_scan_token(EQ)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_3R_156()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2726,2732
final private boolean jj_3R_102() { [EOL]     if (jj_3R_116()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2734,2738
final private boolean jj_3_4() { [EOL]     if (jj_scan_token(PI)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2740,2744
final private boolean jj_3_3() { [EOL]     if (jj_3R_17()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_scan_token(80)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_scan_token(81)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2746,2754
final private boolean jj_3R_101() { [EOL]     if (jj_scan_token(83)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2756,2760
final private boolean jj_3R_100() { [EOL]     if (jj_scan_token(82)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2762,2766
final private boolean jj_3R_115() { [EOL]     if (jj_3R_123()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2768,2772
final private boolean jj_3R_134() { [EOL]     if (jj_3R_156()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     Token xsp; [EOL]     while (true) { [EOL]         xsp = jj_scanpos; [EOL]         if (jj_3R_157()) { [EOL]             jj_scanpos = xsp; [EOL]             break; [EOL]         } [EOL]         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 2774,2784
final private boolean jj_3R_114() { [EOL]     if (jj_scan_token(PI)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_scan_token(80)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_scan_token(Literal)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_scan_token(81)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2786,2796
final private boolean jj_3R_113() { [EOL]     if (jj_3R_17()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_scan_token(80)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_scan_token(81)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2798,2806
final private boolean jj_3R_99() { [EOL]     if (jj_3R_112()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     Token xsp; [EOL]     xsp = jj_scanpos; [EOL]     if (jj_3R_113()) { [EOL]         jj_scanpos = xsp; [EOL]         if (jj_3R_114()) { [EOL]             jj_scanpos = xsp; [EOL]             if (jj_3R_115()) [EOL]                 return true; [EOL]             if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                 return false; [EOL]         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2808,2822
final private boolean jj_3R_135() { [EOL]     if (jj_scan_token(AND)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_3R_134()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2824,2830
final private boolean jj_3R_57() { [EOL]     Token xsp; [EOL]     xsp = jj_scanpos; [EOL]     if (jj_3R_99()) { [EOL]         jj_scanpos = xsp; [EOL]         if (jj_3R_100()) { [EOL]             jj_scanpos = xsp; [EOL]             if (jj_3R_101()) [EOL]                 return true; [EOL]             if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                 return false; [EOL]         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     while (true) { [EOL]         xsp = jj_scanpos; [EOL]         if (jj_3R_102()) { [EOL]             jj_scanpos = xsp; [EOL]             break; [EOL]         } [EOL]         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 2832,2849
final private boolean jj_3R_125() { [EOL]     if (jj_3R_134()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     Token xsp; [EOL]     while (true) { [EOL]         xsp = jj_scanpos; [EOL]         if (jj_3R_135()) { [EOL]             jj_scanpos = xsp; [EOL]             break; [EOL]         } [EOL]         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 2851,2861
final private boolean jj_3R_193() { [EOL]     if (jj_3R_16()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2863,2867
final private boolean jj_3R_56() { [EOL]     if (jj_scan_token(SLASHSLASH)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2869,2873
final private boolean jj_3R_55() { [EOL]     if (jj_scan_token(SLASH)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2875,2879
final private boolean jj_3R_126() { [EOL]     if (jj_scan_token(OR)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_3R_125()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2881,2887
final private boolean jj_3R_16() { [EOL]     Token xsp; [EOL]     xsp = jj_scanpos; [EOL]     if (jj_3R_55()) { [EOL]         jj_scanpos = xsp; [EOL]         if (jj_3R_56()) [EOL]             return true; [EOL]         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_3R_57()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2889,2900
final private boolean jj_3R_190() { [EOL]     if (jj_3R_16()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2902,2906
final private boolean jj_3R_118() { [EOL]     if (jj_3R_125()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     Token xsp; [EOL]     while (true) { [EOL]         xsp = jj_scanpos; [EOL]         if (jj_3R_126()) { [EOL]             jj_scanpos = xsp; [EOL]             break; [EOL]         } [EOL]         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 2908,2918
final private boolean jj_3R_188() { [EOL]     if (jj_3R_57()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     Token xsp; [EOL]     while (true) { [EOL]         xsp = jj_scanpos; [EOL]         if (jj_3R_190()) { [EOL]             jj_scanpos = xsp; [EOL]             break; [EOL]         } [EOL]         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 2920,2930
final private boolean jj_3_2() { [EOL]     if (jj_3R_16()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2932,2936
final private boolean jj_3R_185() { [EOL]     if (jj_3R_16()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2938,2942
final private boolean jj_3R_192() { [EOL]     if (jj_scan_token(SLASH)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2944,2948
final private boolean jj_3R_191() { [EOL]     if (jj_3R_16()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     Token xsp; [EOL]     while (true) { [EOL]         xsp = jj_scanpos; [EOL]         if (jj_3R_193()) { [EOL]             jj_scanpos = xsp; [EOL]             break; [EOL]         } [EOL]         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 2950,2960
final private boolean jj_3R_184() { [EOL]     if (jj_3R_116()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2962,2966
final private boolean jj_3R_189() { [EOL]     Token xsp; [EOL]     xsp = jj_scanpos; [EOL]     if (jj_3R_191()) { [EOL]         jj_scanpos = xsp; [EOL]         if (jj_3R_192()) [EOL]             return true; [EOL]         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2968,2977
final private boolean jj_3R_182() { [EOL]     if (jj_3R_19()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     Token xsp; [EOL]     while (true) { [EOL]         xsp = jj_scanpos; [EOL]         if (jj_3R_184()) { [EOL]             jj_scanpos = xsp; [EOL]             break; [EOL]         } [EOL]         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } [EOL]     while (true) { [EOL]         xsp = jj_scanpos; [EOL]         if (jj_3R_185()) { [EOL]             jj_scanpos = xsp; [EOL]             break; [EOL]         } [EOL]         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 2979,2994
final private boolean jj_3_6() { [EOL]     if (jj_3R_19()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 2996,3000
final private boolean jj_3R_187() { [EOL]     if (jj_3R_189()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3002,3006
final private boolean jj_3R_186() { [EOL]     if (jj_3R_188()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3008,3012
final private boolean jj_3R_183() { [EOL]     Token xsp; [EOL]     xsp = jj_scanpos; [EOL]     if (jj_3R_186()) { [EOL]         jj_scanpos = xsp; [EOL]         if (jj_3R_187()) [EOL]             return true; [EOL]         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3014,3023
final private boolean jj_3R_181() { [EOL]     if (jj_3R_183()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3025,3029
final private boolean jj_3R_180() { [EOL]     if (jj_3R_182()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3031,3035
final private boolean jj_3R_178() { [EOL]     Token xsp; [EOL]     xsp = jj_scanpos; [EOL]     if (jj_3R_180()) { [EOL]         jj_scanpos = xsp; [EOL]         if (jj_3R_181()) [EOL]             return true; [EOL]         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3037,3046
final private boolean jj_3R_179() { [EOL]     if (jj_scan_token(UNION)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_3R_178()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3048,3054
final private boolean jj_3R_177() { [EOL]     if (jj_3R_178()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     Token xsp; [EOL]     while (true) { [EOL]         xsp = jj_scanpos; [EOL]         if (jj_3R_179()) { [EOL]             jj_scanpos = xsp; [EOL]             break; [EOL]         } [EOL]         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 3056,3066
final private boolean jj_3R_136() { [EOL]     if (jj_3R_104()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3068,3072
final private boolean jj_3R_137() { [EOL]     if (jj_scan_token(87)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_3R_136()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3074,3080
final private boolean jj_3R_127() { [EOL]     if (jj_3R_136()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     Token xsp; [EOL]     while (true) { [EOL]         xsp = jj_scanpos; [EOL]         if (jj_3R_137()) { [EOL]             jj_scanpos = xsp; [EOL]             break; [EOL]         } [EOL]         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 3082,3092
final private boolean jj_3R_119() { [EOL]     if (jj_scan_token(80)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     Token xsp; [EOL]     xsp = jj_scanpos; [EOL]     if (jj_3R_127()) [EOL]         jj_scanpos = xsp; [EOL]     else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_scan_token(81)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3094,3104
final private boolean jj_3R_61() { [EOL]     if (jj_scan_token(PI)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3106,3110
final private boolean jj_3R_60() { [EOL]     if (jj_scan_token(COMMENT)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3112,3116
final private boolean jj_3R_59() { [EOL]     if (jj_scan_token(NODE)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3118,3122
final private boolean jj_3R_58() { [EOL]     if (jj_scan_token(TEXT)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3124,3128
final private boolean jj_3_1() { [EOL]     if (jj_3R_15()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_scan_token(79)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3130,3136
final private boolean jj_3R_17() { [EOL]     Token xsp; [EOL]     xsp = jj_scanpos; [EOL]     if (jj_3R_58()) { [EOL]         jj_scanpos = xsp; [EOL]         if (jj_3R_59()) { [EOL]             jj_scanpos = xsp; [EOL]             if (jj_3R_60()) { [EOL]                 jj_scanpos = xsp; [EOL]                 if (jj_3R_61()) [EOL]                     return true; [EOL]                 if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                     return false; [EOL]             } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                 return false; [EOL]         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3138,3153
final private boolean jj_3R_155() { [EOL]     if (jj_3R_15()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3155,3159
final private boolean jj_3R_139() { [EOL]     if (jj_3R_98()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3161,3165
final private boolean jj_3R_138() { [EOL]     if (jj_3R_15()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_scan_token(79)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_3R_15()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3167,3175
final private boolean jj_3R_154() { [EOL]     if (jj_scan_token(88)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3177,3181
final private boolean jj_3R_132() { [EOL]     if (jj_3R_15()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3183,3187
final private boolean jj_3R_105() { [EOL]     if (jj_3R_18()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_3R_119()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3189,3195
final private boolean jj_3R_124() { [EOL]     if (jj_scan_token(79)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_3R_15()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3197,3203
final private boolean jj_3R_133() { [EOL]     if (jj_scan_token(79)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     Token xsp; [EOL]     xsp = jj_scanpos; [EOL]     if (jj_3R_154()) { [EOL]         jj_scanpos = xsp; [EOL]         if (jj_3R_155()) [EOL]             return true; [EOL]         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3205,3216
final private boolean jj_3R_128() { [EOL]     Token xsp; [EOL]     xsp = jj_scanpos; [EOL]     if (jj_3R_138()) { [EOL]         jj_scanpos = xsp; [EOL]         if (jj_3R_139()) [EOL]             return true; [EOL]         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3218,3227
final private boolean jj_3R_131() { [EOL]     if (jj_scan_token(88)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3229,3233
final private boolean jj_3R_123() { [EOL]     Token xsp; [EOL]     xsp = jj_scanpos; [EOL]     if (jj_3R_131()) { [EOL]         jj_scanpos = xsp; [EOL]         if (jj_3R_132()) [EOL]             return true; [EOL]         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     xsp = jj_scanpos; [EOL]     if (jj_3R_133()) [EOL]         jj_scanpos = xsp; [EOL]     else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3235,3247
final private boolean jj_3R_106() { [EOL]     if (jj_3R_120()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_3R_119()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3249,3255
final private boolean jj_3R_117() { [EOL]     if (jj_3R_15()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     Token xsp; [EOL]     xsp = jj_scanpos; [EOL]     if (jj_3R_124()) [EOL]         jj_scanpos = xsp; [EOL]     else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3257,3265
final private boolean jj_3_5() { [EOL]     if (jj_3R_18()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_scan_token(80)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3267,3273
final private boolean jj_3R_103() { [EOL]     if (jj_scan_token(VARIABLE)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_3R_117()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3275,3281
final private boolean jj_3R_91() { [EOL]     if (jj_scan_token(FUNCTION_FORMAT_NUMBER)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3283,3287
final private boolean jj_3R_90() { [EOL]     if (jj_scan_token(FUNCTION_KEY)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3289,3293
final private boolean jj_3R_89() { [EOL]     if (jj_scan_token(FUNCTION_ROUND)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3295,3299
final private boolean jj_3R_88() { [EOL]     if (jj_scan_token(FUNCTION_CEILING)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3301,3305
final private boolean jj_3R_97() { [EOL]     if (jj_3R_106()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3307,3311
final private boolean jj_3R_87() { [EOL]     if (jj_scan_token(FUNCTION_FLOOR)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3313,3317
final private boolean jj_3R_96() { [EOL]     if (jj_3R_105()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3319,3323
final private boolean jj_3R_86() { [EOL]     if (jj_scan_token(FUNCTION_SUM)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3325,3329
final private boolean jj_3R_95() { [EOL]     if (jj_scan_token(Number)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3331,3335
final private boolean jj_3R_85() { [EOL]     if (jj_scan_token(FUNCTION_NUMBER)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3337,3341
final private boolean jj_3R_94() { [EOL]     if (jj_scan_token(Literal)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3343,3347
final private boolean jj_3R_84() { [EOL]     if (jj_scan_token(FUNCTION_LANG)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3349,3353
final private boolean jj_3R_93() { [EOL]     if (jj_scan_token(80)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_3R_104()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     if (jj_scan_token(81)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3355,3363
final private boolean jj_3R_83() { [EOL]     if (jj_scan_token(FUNCTION_NULL)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3365,3369
final private boolean jj_3R_92() { [EOL]     if (jj_3R_103()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3371,3375
final private boolean jj_3R_82() { [EOL]     if (jj_scan_token(FUNCTION_FALSE)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3377,3381
final private boolean jj_3R_81() { [EOL]     if (jj_scan_token(FUNCTION_TRUE)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3383,3387
final private boolean jj_3R_120() { [EOL]     if (jj_3R_128()) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3389,3393
final private boolean jj_3R_80() { [EOL]     if (jj_scan_token(FUNCTION_NOT)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3395,3399
final private boolean jj_3R_79() { [EOL]     if (jj_scan_token(FUNCTION_BOOLEAN)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3401,3405
final private boolean jj_3R_78() { [EOL]     if (jj_scan_token(FUNCTION_TRANSLATE)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3407,3411
final private boolean jj_3R_77() { [EOL]     if (jj_scan_token(FUNCTION_NORMALIZE_SPACE)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3413,3417
final private boolean jj_3R_19() { [EOL]     Token xsp; [EOL]     xsp = jj_scanpos; [EOL]     if (jj_3R_92()) { [EOL]         jj_scanpos = xsp; [EOL]         if (jj_3R_93()) { [EOL]             jj_scanpos = xsp; [EOL]             if (jj_3R_94()) { [EOL]                 jj_scanpos = xsp; [EOL]                 if (jj_3R_95()) { [EOL]                     jj_scanpos = xsp; [EOL]                     if (jj_3R_96()) { [EOL]                         jj_scanpos = xsp; [EOL]                         if (jj_3R_97()) [EOL]                             return true; [EOL]                         if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                             return false; [EOL]                     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                         return false; [EOL]                 } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                     return false; [EOL]             } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]                 return false; [EOL]         } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]             return false; [EOL]     } else if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3419,3440
final private boolean jj_3R_76() { [EOL]     if (jj_scan_token(FUNCTION_STRING_LENGTH)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3442,3446
final private boolean jj_3R_75() { [EOL]     if (jj_scan_token(FUNCTION_SUBSTRING)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3448,3452
final private boolean jj_3R_74() { [EOL]     if (jj_scan_token(FUNCTION_SUBSTRING_AFTER)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3454,3458
final private boolean jj_3R_73() { [EOL]     if (jj_scan_token(FUNCTION_SUBSTRING_BEFORE)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3460,3464
final private boolean jj_3R_72() { [EOL]     if (jj_scan_token(FUNCTION_CONTAINS)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3466,3470
final private boolean jj_3R_71() { [EOL]     if (jj_scan_token(FUNCTION_STARTS_WITH)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3472,3476
final private boolean jj_3R_70() { [EOL]     if (jj_scan_token(FUNCTION_CONCAT)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3478,3482
final private boolean jj_3R_69() { [EOL]     if (jj_scan_token(FUNCTION_STRING)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3484,3488
final private boolean jj_3R_68() { [EOL]     if (jj_scan_token(FUNCTION_NAME)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3490,3494
final private boolean jj_3R_67() { [EOL]     if (jj_scan_token(FUNCTION_NAMESPACE_URI)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3496,3500
final private boolean jj_3R_66() { [EOL]     if (jj_scan_token(FUNCTION_LOCAL_NAME)) [EOL]         return true; [EOL]     if (jj_la == 0 && jj_scanpos == jj_lastpos) [EOL]         return false; [EOL]     return false; [EOL] } <line_num>: 3502,3506
private static void jj_la1_0() { [EOL]     jj_la1_0 = new int[] { 0xf8000000, 0x78000000, 0x0, 0x0, 0x78000000, 0xf80000c0, 0xc0, 0x40, 0xc0, 0xc0, 0xf8000000, 0xf8000000, 0x0, 0x0, 0x0, 0x0, 0x160000, 0xf8000000, 0x0, 0xf81604c0, 0x100, 0xf80000c0, 0x0, 0xc0, 0x8000000, 0x10000000, 0x1800, 0x1800, 0x1e000, 0x1e000, 0x200, 0x400, 0x60000000, 0x60000000, 0xf81604c0, 0xf8000000, 0xf8000000, 0x0, 0x80000000 }; [EOL] } <line_num>: 3525,3527
private static void jj_la1_1() { [EOL]     jj_la1_1 = new int[] { 0xffff0007, 0x0, 0xffff0000, 0x0, 0x0, 0xffffffff, 0x0, 0x0, 0x0, 0x0, 0xffff0007, 0xffffffff, 0x0, 0xfff8, 0xfff8, 0x0, 0x0, 0xffff0007, 0x0, 0xffffffff, 0x0, 0xffffffff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffff, 0xffff0007, 0xffff0007, 0x0, 0x7 }; [EOL] } <line_num>: 3528,3530
private static void jj_la1_2() { [EOL]     jj_la1_2 = new int[] { 0x7fff, 0x4000, 0x3fff, 0x8000, 0x4000, 0x14c7fff, 0x0, 0x0, 0x0, 0x0, 0x1007fff, 0x14c7fff, 0x100000, 0x0, 0x0, 0x400000, 0x10000, 0x7fff, 0x800000, 0x14d7fff, 0x0, 0x14c7fff, 0x100000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1000000, 0x1000000, 0x14d7fff, 0x1007fff, 0x1007fff, 0x8000, 0x0 }; [EOL] } <line_num>: 3531,3533
public void ReInit(java.io.InputStream stream) { [EOL]     jj_input_stream.ReInit(stream, 1, 1); [EOL]     token_source.ReInit(jj_input_stream); [EOL]     token = new Token(); [EOL]     token.next = jj_nt = token_source.getNextToken(); [EOL]     jj_gen = 0; [EOL]     for (int i = 0; i < 39; i++) jj_la1[i] = -1; [EOL]     for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls(); [EOL] } <line_num>: 3548,3556
public void ReInit(java.io.Reader stream) { [EOL]     jj_input_stream.ReInit(stream, 1, 1); [EOL]     token_source.ReInit(jj_input_stream); [EOL]     token = new Token(); [EOL]     token.next = jj_nt = token_source.getNextToken(); [EOL]     jj_gen = 0; [EOL]     for (int i = 0; i < 39; i++) jj_la1[i] = -1; [EOL]     for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls(); [EOL] } <line_num>: 3568,3576
public void ReInit(XPathParserTokenManager tm) { [EOL]     token_source = tm; [EOL]     token = new Token(); [EOL]     token.next = jj_nt = token_source.getNextToken(); [EOL]     jj_gen = 0; [EOL]     for (int i = 0; i < 39; i++) jj_la1[i] = -1; [EOL]     for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls(); [EOL] } <line_num>: 3587,3594
final private Token jj_consume_token(int kind) throws ParseException { [EOL]     Token oldToken = token; [EOL]     if ((token = jj_nt).next != null) [EOL]         jj_nt = jj_nt.next; [EOL]     else [EOL]         jj_nt = jj_nt.next = token_source.getNextToken(); [EOL]     if (token.kind == kind) { [EOL]         jj_gen++; [EOL]         if (++jj_gc > 100) { [EOL]             jj_gc = 0; [EOL]             for (int i = 0; i < jj_2_rtns.length; i++) { [EOL]                 JJCalls c = jj_2_rtns[i]; [EOL]                 while (c != null) { [EOL]                     if (c.gen < jj_gen) [EOL]                         c.first = null; [EOL]                     c = c.next; [EOL]                 } [EOL]             } [EOL]         } [EOL]         return token; [EOL]     } [EOL]     jj_nt = token; [EOL]     token = oldToken; [EOL]     jj_kind = kind; [EOL]     throw generateParseException(); [EOL] } <line_num>: 3596,3618
final private boolean jj_scan_token(int kind) { [EOL]     if (jj_scanpos == jj_lastpos) { [EOL]         jj_la--; [EOL]         if (jj_scanpos.next == null) { [EOL]             jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken(); [EOL]         } else { [EOL]             jj_lastpos = jj_scanpos = jj_scanpos.next; [EOL]         } [EOL]     } else { [EOL]         jj_scanpos = jj_scanpos.next; [EOL]     } [EOL]     if (jj_rescan) { [EOL]         int i = 0; [EOL]         Token tok = token; [EOL]         while (tok != null && tok != jj_scanpos) { [EOL]             i++; [EOL]             tok = tok.next; [EOL]         } [EOL]         if (tok != null) [EOL]             jj_add_error_token(kind, i); [EOL]     } [EOL]     return (jj_scanpos.kind != kind); [EOL] } <line_num>: 3620,3637
final public Token getNextToken() { [EOL]     if ((token = jj_nt).next != null) [EOL]         jj_nt = jj_nt.next; [EOL]     else [EOL]         jj_nt = jj_nt.next = token_source.getNextToken(); [EOL]     jj_gen++; [EOL]     return token; [EOL] } <line_num>: 3639,3644
final public Token getToken(int index) { [EOL]     Token t = lookingAhead ? jj_scanpos : token; [EOL]     for (int i = 0; i < index; i++) { [EOL]         if (t.next != null) [EOL]             t = t.next; [EOL]         else [EOL]             t = t.next = token_source.getNextToken(); [EOL]     } [EOL]     return t; [EOL] } <line_num>: 3646,3653
private void jj_add_error_token(int kind, int pos) { [EOL]     if (pos >= 100) [EOL]         return; [EOL]     if (pos == jj_endpos + 1) { [EOL]         jj_lasttokens[jj_endpos++] = kind; [EOL]     } else if (jj_endpos != 0) { [EOL]         jj_expentry = new int[jj_endpos]; [EOL]         for (int i = 0; i < jj_endpos; i++) { [EOL]             jj_expentry[i] = jj_lasttokens[i]; [EOL]         } [EOL]         boolean exists = false; [EOL]         for (java.util.Enumeration en = jj_expentries.elements(); en.hasMoreElements(); ) { [EOL]             int[] oldentry = (int[]) (en.nextElement()); [EOL]             if (oldentry.length == jj_expentry.length) { [EOL]                 exists = true; [EOL]                 for (int i = 0; i < jj_expentry.length; i++) { [EOL]                     if (oldentry[i] != jj_expentry[i]) { [EOL]                         exists = false; [EOL]                         break; [EOL]                     } [EOL]                 } [EOL]                 if (exists) [EOL]                     break; [EOL]             } [EOL]         } [EOL]         if (!exists) [EOL]             jj_expentries.addElement(jj_expentry); [EOL]         if (pos != 0) [EOL]             jj_lasttokens[(jj_endpos = pos) - 1] = kind; [EOL]     } [EOL] } <line_num>: 3661,3687
public ParseException generateParseException() { [EOL]     jj_expentries.removeAllElements(); [EOL]     boolean[] la1tokens = new boolean[89]; [EOL]     for (int i = 0; i < 89; i++) { [EOL]         la1tokens[i] = false; [EOL]     } [EOL]     if (jj_kind >= 0) { [EOL]         la1tokens[jj_kind] = true; [EOL]         jj_kind = -1; [EOL]     } [EOL]     for (int i = 0; i < 39; i++) { [EOL]         if (jj_la1[i] == jj_gen) { [EOL]             for (int j = 0; j < 32; j++) { [EOL]                 if ((jj_la1_0[i] & (1 << j)) != 0) { [EOL]                     la1tokens[j] = true; [EOL]                 } [EOL]                 if ((jj_la1_1[i] & (1 << j)) != 0) { [EOL]                     la1tokens[32 + j] = true; [EOL]                 } [EOL]                 if ((jj_la1_2[i] & (1 << j)) != 0) { [EOL]                     la1tokens[64 + j] = true; [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     for (int i = 0; i < 89; i++) { [EOL]         if (la1tokens[i]) { [EOL]             jj_expentry = new int[1]; [EOL]             jj_expentry[0] = i; [EOL]             jj_expentries.addElement(jj_expentry); [EOL]         } [EOL]     } [EOL]     jj_endpos = 0; [EOL]     jj_rescan_token(); [EOL]     jj_add_error_token(0, 0); [EOL]     int[][] exptokseq = new int[jj_expentries.size()][]; [EOL]     for (int i = 0; i < jj_expentries.size(); i++) { [EOL]         exptokseq[i] = (int[]) jj_expentries.elementAt(i); [EOL]     } [EOL]     return new ParseException(token, exptokseq, tokenImage); [EOL] } <line_num>: 3689,3729
final public void enable_tracing() { [EOL] } <line_num>: 3731,3732
final public void disable_tracing() { [EOL] } <line_num>: 3734,3735
final private void jj_rescan_token() { [EOL]     jj_rescan = true; [EOL]     for (int i = 0; i < 6; i++) { [EOL]         JJCalls p = jj_2_rtns[i]; [EOL]         do { [EOL]             if (p.gen > jj_gen) { [EOL]                 jj_la = p.arg; [EOL]                 jj_lastpos = jj_scanpos = p.first; [EOL]                 switch(i) { [EOL]                     case 0: [EOL]                         jj_3_1(); [EOL]                         break; [EOL]                     case 1: [EOL]                         jj_3_2(); [EOL]                         break; [EOL]                     case 2: [EOL]                         jj_3_3(); [EOL]                         break; [EOL]                     case 3: [EOL]                         jj_3_4(); [EOL]                         break; [EOL]                     case 4: [EOL]                         jj_3_5(); [EOL]                         break; [EOL]                     case 5: [EOL]                         jj_3_6(); [EOL]                         break; [EOL]                 } [EOL]             } [EOL]             p = p.next; [EOL]         } while (p != null); [EOL]     } [EOL]     jj_rescan = false; [EOL] } <line_num>: 3737,3757
final private void jj_save(int index, int xla) { [EOL]     JJCalls p = jj_2_rtns[index]; [EOL]     while (p.gen > jj_gen) { [EOL]         if (p.next == null) { [EOL]             p = p.next = new JJCalls(); [EOL]             break; [EOL]         } [EOL]         p = p.next; [EOL]     } [EOL]     p.gen = jj_gen + xla - jj_la; [EOL]     p.first = token; [EOL]     p.arg = xla; [EOL] } <line_num>: 3759,3766
