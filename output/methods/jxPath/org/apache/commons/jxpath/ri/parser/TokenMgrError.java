public TokenMgrError() { [EOL] } <line_num>: 125,126
public TokenMgrError(String message, int reason) { [EOL]     super(message); [EOL]     errorCode = reason; [EOL] } <line_num>: 128,131
public TokenMgrError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int reason) { [EOL]     this(LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason); [EOL]     position = errorColumn - 1; [EOL]     character = curChar; [EOL] } <line_num>: 133,139
public static final String addEscapes(String str) { [EOL]     StringBuffer retval = new StringBuffer(); [EOL]     char ch; [EOL]     for (int i = 0; i < str.length(); i++) { [EOL]         switch(str.charAt(i)) { [EOL]             case 0: [EOL]                 continue; [EOL]             case '\b': [EOL]                 retval.append("\\b"); [EOL]                 continue; [EOL]             case '\t': [EOL]                 retval.append("\\t"); [EOL]                 continue; [EOL]             case '\n': [EOL]                 retval.append("\\n"); [EOL]                 continue; [EOL]             case '\f': [EOL]                 retval.append("\\f"); [EOL]                 continue; [EOL]             case '\r': [EOL]                 retval.append("\\r"); [EOL]                 continue; [EOL]             case '\"': [EOL]                 retval.append("\\\""); [EOL]                 continue; [EOL]             case '\'': [EOL]                 retval.append("\\\'"); [EOL]                 continue; [EOL]             case '\\': [EOL]                 retval.append("\\\\"); [EOL]                 continue; [EOL]             default: [EOL]                 if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) { [EOL]                     String s = "0000" + Integer.toString(ch, 16); [EOL]                     retval.append("\\u" + s.substring(s.length() - 4, s.length())); [EOL]                 } else { [EOL]                     retval.append(ch); [EOL]                 } [EOL]                 continue; [EOL]         } [EOL]     } [EOL]     return retval.toString(); [EOL] } <line_num>: 43,86
protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) { [EOL]     return ("Lexical error at line " + errorLine + ", column " + errorColumn + ".  Encountered: " + (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int) curChar + "), ") + "after : \"" + addEscapes(errorAfter) + "\""); [EOL] } <line_num>: 100,106
public String getMessage() { [EOL]     return super.getMessage(); [EOL] } <line_num>: 117,119
public int getPosition() { [EOL]     return position; [EOL] } <line_num>: 146,148
public char getCharacter() { [EOL]     return character; [EOL] } <line_num>: 150,152
