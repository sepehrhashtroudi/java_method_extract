public PredicateContext(EvalContext parentContext, Expression expression) { [EOL]     super(parentContext); [EOL]     this.expression = expression; [EOL]     if (expression instanceof NameAttributeTest) { [EOL]         nameTestExpression = ((NameAttributeTest) expression).getNameTestExpression(); [EOL]     } [EOL] } <line_num>: 41,48
public boolean nextNode() { [EOL]     if (done) { [EOL]         return false; [EOL]     } [EOL]     while (parentContext.nextNode()) { [EOL]         if (setupDynamicPropertyPointer()) { [EOL]             Object pred = nameTestExpression.computeValue(parentContext); [EOL]             String propertyName = InfoSetUtil.stringValue(pred); [EOL]             boolean ok = false; [EOL]             String[] names = dynamicPropertyPointer.getPropertyNames(); [EOL]             for (int i = 0; i < names.length; i++) { [EOL]                 if (names[i].equals(propertyName)) { [EOL]                     ok = true; [EOL]                     break; [EOL]                 } [EOL]             } [EOL]             if (ok) { [EOL]                 dynamicPropertyPointer.setPropertyName(propertyName); [EOL]                 position++; [EOL]                 return true; [EOL]             } [EOL]         } else { [EOL]             Object pred = expression.computeValue(parentContext); [EOL]             if (pred instanceof Iterator) { [EOL]                 if (!((Iterator) pred).hasNext()) { [EOL]                     return false; [EOL]                 } [EOL]                 pred = ((Iterator) pred).next(); [EOL]             } [EOL]             if (pred instanceof NodePointer) { [EOL]                 pred = ((NodePointer) pred).getNode(); [EOL]             } [EOL]             if (pred instanceof Number) { [EOL]                 int pos = (int) InfoSetUtil.doubleValue(pred); [EOL]                 position++; [EOL]                 done = true; [EOL]                 return parentContext.setPosition(pos); [EOL]             } else if (InfoSetUtil.booleanValue(pred)) { [EOL]                 position++; [EOL]                 return true; [EOL]             } [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 50,107
private boolean setupDynamicPropertyPointer() { [EOL]     if (nameTestExpression == null) { [EOL]         return false; [EOL]     } [EOL]     NodePointer parent = parentContext.getCurrentNodePointer(); [EOL]     if (parent == null) { [EOL]         return false; [EOL]     } [EOL]     parent = parent.getValuePointer(); [EOL]     if (!(parent instanceof PropertyOwnerPointer)) { [EOL]         return false; [EOL]     } [EOL]     dynamicPropertyPointer = (PropertyPointer) ((PropertyOwnerPointer) parent).getPropertyPointer().clone(); [EOL]     return true; [EOL] } <line_num>: 113,131
public boolean setPosition(int position) { [EOL]     if (nameTestExpression == null) { [EOL]         return setPositionStandard(position); [EOL]     } else { [EOL]         if (dynamicPropertyPointer == null) { [EOL]             if (!setupDynamicPropertyPointer()) { [EOL]                 return setPositionStandard(position); [EOL]             } [EOL]         } [EOL]         if (position < 1 || position > dynamicPropertyPointer.getLength()) { [EOL]             return false; [EOL]         } [EOL]         dynamicPropertyPointer.setIndex(position - 1); [EOL]         return true; [EOL]     } [EOL] } <line_num>: 133,150
public NodePointer getCurrentNodePointer() { [EOL]     if (position == 0) { [EOL]         if (!setPosition(1)) { [EOL]             return null; [EOL]         } [EOL]     } [EOL]     if (dynamicPropertyPointer != null) { [EOL]         return dynamicPropertyPointer.getValuePointer(); [EOL]     } else { [EOL]         return parentContext.getCurrentNodePointer(); [EOL]     } [EOL] } <line_num>: 152,164
public void reset() { [EOL]     super.reset(); [EOL]     parentContext.reset(); [EOL]     done = false; [EOL] } <line_num>: 166,170
public boolean nextSet() { [EOL]     reset(); [EOL]     return parentContext.nextSet(); [EOL] } <line_num>: 172,175
private boolean setPositionStandard(int position) { [EOL]     if (this.position > position) { [EOL]         reset(); [EOL]     } [EOL]     while (this.position < position) { [EOL]         if (!nextNode()) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 177,188
