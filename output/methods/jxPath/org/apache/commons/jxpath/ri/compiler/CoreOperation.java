public CoreOperation(Expression[] args) { [EOL]     super(args); [EOL] } <line_num>: 30,32
public Object compute(EvalContext context) { [EOL]     return computeValue(context); [EOL] } <line_num>: 34,36
public abstract Object computeValue(EvalContext context); <line_num>: 38,38
public abstract String getSymbol(); <line_num>: 43,43
protected abstract boolean isSymmetric(); <line_num>: 49,49
protected abstract int getPrecedence(); <line_num>: 54,54
public String toString() { [EOL]     if (args.length == 1) { [EOL]         return getSymbol() + parenthesize(args[0], false); [EOL]     } else { [EOL]         StringBuffer buffer = new StringBuffer(); [EOL]         for (int i = 0; i < args.length; i++) { [EOL]             if (i > 0) { [EOL]                 buffer.append(' '); [EOL]                 buffer.append(getSymbol()); [EOL]                 buffer.append(' '); [EOL]             } [EOL]             buffer.append(parenthesize(args[i], i == 0)); [EOL]         } [EOL]         return buffer.toString(); [EOL]     } [EOL] } <line_num>: 56,72
private String parenthesize(Expression expression, boolean left) { [EOL]     if (!(expression instanceof CoreOperation)) { [EOL]         return expression.toString(); [EOL]     } [EOL]     CoreOperation op = (CoreOperation) expression; [EOL]     int myPrecedence = getPrecedence(); [EOL]     int thePrecedence = op.getPrecedence(); [EOL]     boolean needParens = true; [EOL]     if (myPrecedence < thePrecedence) { [EOL]         needParens = false; [EOL]     } else if (myPrecedence == thePrecedence) { [EOL]         if (isSymmetric()) { [EOL]             needParens = false; [EOL]         } else { [EOL]             needParens = !left; [EOL]         } [EOL]     } [EOL]     if (needParens) { [EOL]         return "(" + expression.toString() + ")"; [EOL]     } else { [EOL]         return expression.toString(); [EOL]     } [EOL] } <line_num>: 74,101
