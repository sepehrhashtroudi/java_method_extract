public BeanPropertyPointer(NodePointer parent, JXPathBeanInfo beanInfo) { [EOL]     super(parent); [EOL]     this.beanInfo = beanInfo; [EOL] } <line_num>: 45,48
public boolean isContainer() { [EOL]     return true; [EOL] } <line_num>: 53,55
public int getPropertyCount() { [EOL]     if (beanInfo.isAtomic()) { [EOL]         return 0; [EOL]     } [EOL]     return getPropertyDescriptors().length; [EOL] } <line_num>: 60,65
public String[] getPropertyNames() { [EOL]     if (names == null) { [EOL]         PropertyDescriptor[] pds = getPropertyDescriptors(); [EOL]         names = new String[pds.length]; [EOL]         for (int i = 0; i < names.length; i++) { [EOL]             names[i] = pds[i].getName(); [EOL]         } [EOL]     } [EOL]     return names; [EOL] } <line_num>: 70,79
public void setPropertyName(String propertyName) { [EOL]     setPropertyIndex(UNSPECIFIED_PROPERTY); [EOL]     this.propertyName = propertyName; [EOL] } <line_num>: 84,87
public void setPropertyIndex(int index) { [EOL]     if (propertyIndex != index) { [EOL]         super.setPropertyIndex(index); [EOL]         propertyName = null; [EOL]         propertyDescriptor = null; [EOL]         baseValue = UNINITIALIZED; [EOL]         value = UNINITIALIZED; [EOL]     } [EOL] } <line_num>: 92,100
public Object getBaseValue() { [EOL]     if (baseValue == UNINITIALIZED) { [EOL]         PropertyDescriptor pd = getPropertyDescriptor(); [EOL]         if (pd == null) { [EOL]             return null; [EOL]         } [EOL]         baseValue = ValueUtils.getValue(getBean(), pd); [EOL]     } [EOL]     return baseValue; [EOL] } <line_num>: 105,114
public void setIndex(int index) { [EOL]     if (this.index != index) { [EOL]         if (this.index != WHOLE_COLLECTION || index != 0 || isCollection()) { [EOL]             super.setIndex(index); [EOL]             value = UNINITIALIZED; [EOL]         } [EOL]     } [EOL] } <line_num>: 116,127
public Object getImmediateNode() { [EOL]     if (value == UNINITIALIZED) { [EOL]         if (index == WHOLE_COLLECTION) { [EOL]             value = ValueUtils.getValue(getBaseValue()); [EOL]         } else { [EOL]             PropertyDescriptor pd = getPropertyDescriptor(); [EOL]             if (pd == null) { [EOL]                 value = null; [EOL]             } else { [EOL]                 value = ValueUtils.getValue(getBean(), pd, index); [EOL]             } [EOL]         } [EOL]     } [EOL]     return value; [EOL] } <line_num>: 135,151
protected boolean isActualProperty() { [EOL]     return getPropertyDescriptor() != null; [EOL] } <line_num>: 153,155
public boolean isCollection() { [EOL]     PropertyDescriptor pd = getPropertyDescriptor(); [EOL]     if (pd == null) { [EOL]         return false; [EOL]     } [EOL]     if (pd instanceof IndexedPropertyDescriptor) { [EOL]         return true; [EOL]     } [EOL]     int hint = ValueUtils.getCollectionHint(pd.getPropertyType()); [EOL]     if (hint == -1) { [EOL]         return false; [EOL]     } [EOL]     if (hint == 1) { [EOL]         return true; [EOL]     } [EOL]     Object value = getBaseValue(); [EOL]     return value != null && ValueUtils.isCollection(value); [EOL] } <line_num>: 157,177
public int getLength() { [EOL]     PropertyDescriptor pd = getPropertyDescriptor(); [EOL]     if (pd == null) { [EOL]         return 1; [EOL]     } [EOL]     if (pd instanceof IndexedPropertyDescriptor) { [EOL]         return ValueUtils.getIndexedPropertyLength(getBean(), (IndexedPropertyDescriptor) pd); [EOL]     } [EOL]     int hint = ValueUtils.getCollectionHint(pd.getPropertyType()); [EOL]     if (hint == -1) { [EOL]         return 1; [EOL]     } [EOL]     return ValueUtils.getLength(getBaseValue()); [EOL] } <line_num>: 183,200
public void setValue(Object value) { [EOL]     PropertyDescriptor pd = getPropertyDescriptor(); [EOL]     if (pd == null) { [EOL]         throw new JXPathInvalidAccessException("Cannot set property: " + asPath() + " - no such property"); [EOL]     } [EOL]     if (index == WHOLE_COLLECTION) { [EOL]         ValueUtils.setValue(getBean(), pd, value); [EOL]     } else { [EOL]         ValueUtils.setValue(getBean(), pd, index, value); [EOL]     } [EOL]     this.value = value; [EOL] } <line_num>: 207,221
public NodePointer createPath(JXPathContext context) { [EOL]     if (getImmediateNode() == null) { [EOL]         super.createPath(context); [EOL]         baseValue = UNINITIALIZED; [EOL]         value = UNINITIALIZED; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 226,233
public void remove() { [EOL]     if (index == WHOLE_COLLECTION) { [EOL]         setValue(null); [EOL]     } else if (isCollection()) { [EOL]         Object collection = ValueUtils.remove(getBaseValue(), index); [EOL]         ValueUtils.setValue(getBean(), getPropertyDescriptor(), collection); [EOL]     } else if (index == 0) { [EOL]         index = WHOLE_COLLECTION; [EOL]         setValue(null); [EOL]     } [EOL] } <line_num>: 235,247
public String getPropertyName() { [EOL]     if (propertyName == null) { [EOL]         PropertyDescriptor pd = getPropertyDescriptor(); [EOL]         if (pd != null) { [EOL]             propertyName = pd.getName(); [EOL]         } [EOL]     } [EOL]     return propertyName != null ? propertyName : "*"; [EOL] } <line_num>: 252,260
private PropertyDescriptor getPropertyDescriptor() { [EOL]     if (propertyDescriptor == null) { [EOL]         int inx = getPropertyIndex(); [EOL]         if (inx == UNSPECIFIED_PROPERTY) { [EOL]             propertyDescriptor = beanInfo.getPropertyDescriptor(propertyName); [EOL]         } else { [EOL]             PropertyDescriptor[] propertyDescriptors = getPropertyDescriptors(); [EOL]             if (inx >= 0 && inx < propertyDescriptors.length) { [EOL]                 propertyDescriptor = propertyDescriptors[inx]; [EOL]             } else { [EOL]                 propertyDescriptor = null; [EOL]             } [EOL]         } [EOL]     } [EOL]     return propertyDescriptor; [EOL] } <line_num>: 266,285
protected PropertyDescriptor[] getPropertyDescriptors() { [EOL]     if (propertyDescriptors == null) { [EOL]         propertyDescriptors = beanInfo.getPropertyDescriptors(); [EOL]     } [EOL]     return propertyDescriptors; [EOL] } <line_num>: 287,292
