public DynaBeanPropertyPointer(NodePointer parent, DynaBean dynaBean) { [EOL]     super(parent); [EOL]     this.dynaBean = dynaBean; [EOL] } <line_num>: 41,44
public Object getBaseValue() { [EOL]     return dynaBean.get(getPropertyName()); [EOL] } <line_num>: 46,48
public boolean isContainer() { [EOL]     return true; [EOL] } <line_num>: 53,55
public int getPropertyCount() { [EOL]     return getPropertyNames().length; [EOL] } <line_num>: 60,62
public String[] getPropertyNames() { [EOL]     if (names == null) { [EOL]         DynaClass dynaClass = dynaBean.getDynaClass(); [EOL]         DynaProperty[] properties = dynaClass.getDynaProperties(); [EOL]         int count = properties.length; [EOL]         boolean hasClass = dynaClass.getDynaProperty("class") != null; [EOL]         if (hasClass) { [EOL]             count--; [EOL]         } [EOL]         names = new String[count]; [EOL]         for (int i = 0, j = 0; i < properties.length; i++) { [EOL]             String name = properties[i].getName(); [EOL]             if (!hasClass || !name.equals("class")) { [EOL]                 names[j++] = name; [EOL]             } [EOL]         } [EOL]         Arrays.sort(names); [EOL]     } [EOL]     return names; [EOL] } <line_num>: 69,88
public String getPropertyName() { [EOL]     if (name == null) { [EOL]         String[] names = getPropertyNames(); [EOL]         if (propertyIndex >= 0 && propertyIndex < names.length) { [EOL]             name = names[propertyIndex]; [EOL]         } else { [EOL]             name = "*"; [EOL]         } [EOL]     } [EOL]     return name; [EOL] } <line_num>: 94,105
public void setPropertyName(String propertyName) { [EOL]     setPropertyIndex(UNSPECIFIED_PROPERTY); [EOL]     this.name = propertyName; [EOL] } <line_num>: 110,113
public int getPropertyIndex() { [EOL]     if (propertyIndex == UNSPECIFIED_PROPERTY) { [EOL]         String[] names = getPropertyNames(); [EOL]         for (int i = 0; i < names.length; i++) { [EOL]             if (names[i].equals(name)) { [EOL]                 propertyIndex = i; [EOL]                 name = null; [EOL]                 break; [EOL]             } [EOL]         } [EOL]     } [EOL]     return super.getPropertyIndex(); [EOL] } <line_num>: 119,131
public void setPropertyIndex(int index) { [EOL]     if (propertyIndex != index) { [EOL]         super.setPropertyIndex(index); [EOL]         name = null; [EOL]     } [EOL] } <line_num>: 137,142
public Object getImmediateNode() { [EOL]     String name = getPropertyName(); [EOL]     if (name.equals("*")) { [EOL]         return null; [EOL]     } [EOL]     Object value; [EOL]     if (index == WHOLE_COLLECTION) { [EOL]         value = ValueUtils.getValue(dynaBean.get(name)); [EOL]     } else if (isIndexedProperty()) { [EOL]         try { [EOL]             value = ValueUtils.getValue(dynaBean.get(name, index)); [EOL]         } catch (ArrayIndexOutOfBoundsException ex) { [EOL]             value = null; [EOL]         } catch (IllegalArgumentException ex) { [EOL]             value = dynaBean.get(name); [EOL]             value = ValueUtils.getValue(value, index); [EOL]         } [EOL]     } else { [EOL]         value = dynaBean.get(name); [EOL]         if (ValueUtils.isCollection(value)) { [EOL]             value = ValueUtils.getValue(value, index); [EOL]         } else if (index != 0) { [EOL]             value = null; [EOL]         } [EOL]     } [EOL]     return value; [EOL] } <line_num>: 150,186
protected boolean isActualProperty() { [EOL]     DynaClass dynaClass = dynaBean.getDynaClass(); [EOL]     return dynaClass.getDynaProperty(getPropertyName()) != null; [EOL] } <line_num>: 191,194
protected boolean isIndexedProperty() { [EOL]     DynaClass dynaClass = dynaBean.getDynaClass(); [EOL]     DynaProperty property = dynaClass.getDynaProperty(name); [EOL]     return property.isIndexed(); [EOL] } <line_num>: 196,200
public void setValue(Object value) { [EOL]     setValue(index, value); [EOL] } <line_num>: 207,209
public void remove() { [EOL]     if (index == WHOLE_COLLECTION) { [EOL]         dynaBean.set(getPropertyName(), null); [EOL]     } else if (isIndexedProperty()) { [EOL]         dynaBean.set(getPropertyName(), index, null); [EOL]     } else if (isCollection()) { [EOL]         Object collection = ValueUtils.remove(getBaseValue(), index); [EOL]         dynaBean.set(getPropertyName(), collection); [EOL]     } else if (index == 0) { [EOL]         dynaBean.set(getPropertyName(), null); [EOL]     } [EOL] } <line_num>: 211,225
private void setValue(int index, Object value) { [EOL]     if (index == WHOLE_COLLECTION) { [EOL]         dynaBean.set(getPropertyName(), convert(value, false)); [EOL]     } else if (isIndexedProperty()) { [EOL]         dynaBean.set(getPropertyName(), index, convert(value, true)); [EOL]     } else { [EOL]         Object baseValue = dynaBean.get(getPropertyName()); [EOL]         ValueUtils.setValue(baseValue, index, value); [EOL]     } [EOL] } <line_num>: 227,238
private Object convert(Object value, boolean element) { [EOL]     DynaClass dynaClass = (DynaClass) dynaBean.getDynaClass(); [EOL]     DynaProperty property = dynaClass.getDynaProperty(getPropertyName()); [EOL]     Class type = property.getType(); [EOL]     if (element) { [EOL]         if (type.isArray()) { [EOL]             type = type.getComponentType(); [EOL]         } else { [EOL]             return value; [EOL]         } [EOL]     } [EOL]     try { [EOL]         return TypeUtils.convert(value, type); [EOL]     } catch (Exception ex) { [EOL]         String string = value == null ? "null" : value.getClass().getName(); [EOL]         throw new JXPathTypeConversionException("Cannot convert value of class " + string + " to type " + type, ex); [EOL]     } [EOL] } <line_num>: 241,263
