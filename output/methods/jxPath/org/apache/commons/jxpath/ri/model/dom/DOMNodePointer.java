public DOMNodePointer(Node node, Locale locale) { [EOL]     super(null, locale); [EOL]     this.node = node; [EOL] } <line_num>: 67,70
public DOMNodePointer(Node node, Locale locale, String id) { [EOL]     super(null, locale); [EOL]     this.node = node; [EOL]     this.id = id; [EOL] } <line_num>: 72,76
public DOMNodePointer(NodePointer parent, Node node) { [EOL]     super(parent); [EOL]     this.node = node; [EOL] } <line_num>: 78,81
public boolean testNode(NodeTest test) { [EOL]     return testNode(node, test); [EOL] } <line_num>: 83,85
public static boolean testNode(Node node, NodeTest test) { [EOL]     if (test == null) { [EOL]         return true; [EOL]     } else if (test instanceof NodeNameTest) { [EOL]         if (node.getNodeType() != Node.ELEMENT_NODE) { [EOL]             return false; [EOL]         } [EOL]         NodeNameTest nodeNameTest = (NodeNameTest) test; [EOL]         QName testName = nodeNameTest.getNodeName(); [EOL]         String namespaceURI = nodeNameTest.getNamespaceURI(); [EOL]         boolean wildcard = nodeNameTest.isWildcard(); [EOL]         String testPrefix = testName.getPrefix(); [EOL]         if (wildcard && testPrefix == null) { [EOL]             return true; [EOL]         } [EOL]         if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) { [EOL]             String nodeNS = DOMNodePointer.getNamespaceURI(node); [EOL]             return equalStrings(namespaceURI, nodeNS); [EOL]         } [EOL]     } else if (test instanceof NodeTypeTest) { [EOL]         int nodeType = node.getNodeType(); [EOL]         switch(((NodeTypeTest) test).getNodeType()) { [EOL]             case Compiler.NODE_TYPE_NODE: [EOL]                 return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE; [EOL]             case Compiler.NODE_TYPE_TEXT: [EOL]                 return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; [EOL]             case Compiler.NODE_TYPE_COMMENT: [EOL]                 return nodeType == Node.COMMENT_NODE; [EOL]             case Compiler.NODE_TYPE_PI: [EOL]                 return nodeType == Node.PROCESSING_INSTRUCTION_NODE; [EOL]         } [EOL]         return false; [EOL]     } else if (test instanceof ProcessingInstructionTest) { [EOL]         if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { [EOL]             String testPI = ((ProcessingInstructionTest) test).getTarget(); [EOL]             String nodePI = ((ProcessingInstruction) node).getTarget(); [EOL]             return testPI.equals(nodePI); [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 87,136
private static boolean equalStrings(String s1, String s2) { [EOL]     if (s1 == null) { [EOL]         return s2 == null || s2.trim().length() == 0; [EOL]     } [EOL]     if (s2 == null) { [EOL]         return s1 == null || s1.trim().length() == 0; [EOL]     } [EOL]     if (s1 != null && !s1.trim().equals(s2.trim())) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 138,152
public QName getName() { [EOL]     String ln = null; [EOL]     String ns = null; [EOL]     int type = node.getNodeType(); [EOL]     if (type == Node.ELEMENT_NODE) { [EOL]         ns = DOMNodePointer.getPrefix(node); [EOL]         ln = DOMNodePointer.getLocalName(node); [EOL]     } else if (type == Node.PROCESSING_INSTRUCTION_NODE) { [EOL]         ln = ((ProcessingInstruction) node).getTarget(); [EOL]     } [EOL]     return new QName(ns, ln); [EOL] } <line_num>: 154,166
public String getNamespaceURI() { [EOL]     return getNamespaceURI(node); [EOL] } <line_num>: 168,170
public NodeIterator childIterator(NodeTest test, boolean reverse, NodePointer startWith) { [EOL]     return new DOMNodeIterator(this, test, reverse, startWith); [EOL] } <line_num>: 172,178
public NodeIterator attributeIterator(QName name) { [EOL]     return new DOMAttributeIterator(this, name); [EOL] } <line_num>: 180,182
public NodePointer namespacePointer(String prefix) { [EOL]     return new NamespacePointer(this, prefix); [EOL] } <line_num>: 184,186
public NodeIterator namespaceIterator() { [EOL]     return new DOMNamespaceIterator(this); [EOL] } <line_num>: 188,190
public String getNamespaceURI(String prefix) { [EOL]     if (prefix == null || prefix.equals("")) { [EOL]         return getDefaultNamespaceURI(); [EOL]     } [EOL]     if (prefix.equals("xml")) { [EOL]         return XML_NAMESPACE_URI; [EOL]     } [EOL]     if (prefix.equals("xmlns")) { [EOL]         return XMLNS_NAMESPACE_URI; [EOL]     } [EOL]     String namespace = null; [EOL]     if (namespaces == null) { [EOL]         namespaces = new HashMap(); [EOL]     } else { [EOL]         namespace = (String) namespaces.get(prefix); [EOL]     } [EOL]     if (namespace == null) { [EOL]         String qname = "xmlns:" + prefix; [EOL]         Node aNode = node; [EOL]         if (aNode instanceof Document) { [EOL]             aNode = ((Document) aNode).getDocumentElement(); [EOL]         } [EOL]         while (aNode != null) { [EOL]             if (aNode.getNodeType() == Node.ELEMENT_NODE) { [EOL]                 Attr attr = ((Element) aNode).getAttributeNode(qname); [EOL]                 if (attr != null) { [EOL]                     namespace = attr.getValue(); [EOL]                     break; [EOL]                 } [EOL]             } [EOL]             aNode = aNode.getParentNode(); [EOL]         } [EOL]         if (namespace == null || namespace.equals("")) { [EOL]             namespace = NodePointer.UNKNOWN_NAMESPACE; [EOL]         } [EOL]     } [EOL]     namespaces.put(prefix, namespace); [EOL]     if (namespace == UNKNOWN_NAMESPACE) { [EOL]         return null; [EOL]     } [EOL]     return namespace; [EOL] } <line_num>: 192,241
public String getDefaultNamespaceURI() { [EOL]     if (defaultNamespace == null) { [EOL]         Node aNode = node; [EOL]         if (aNode instanceof Document) { [EOL]             aNode = ((Document) aNode).getDocumentElement(); [EOL]         } [EOL]         while (aNode != null) { [EOL]             if (aNode.getNodeType() == Node.ELEMENT_NODE) { [EOL]                 Attr attr = ((Element) aNode).getAttributeNode("xmlns"); [EOL]                 if (attr != null) { [EOL]                     defaultNamespace = attr.getValue(); [EOL]                     break; [EOL]                 } [EOL]             } [EOL]             aNode = aNode.getParentNode(); [EOL]         } [EOL]     } [EOL]     if (defaultNamespace == null) { [EOL]         defaultNamespace = ""; [EOL]     } [EOL]     return defaultNamespace.equals("") ? null : defaultNamespace; [EOL] } <line_num>: 243,265
public Object getBaseValue() { [EOL]     return node; [EOL] } <line_num>: 267,269
public Object getImmediateNode() { [EOL]     return node; [EOL] } <line_num>: 271,273
public boolean isActual() { [EOL]     return true; [EOL] } <line_num>: 275,277
public boolean isCollection() { [EOL]     return false; [EOL] } <line_num>: 279,281
public int getLength() { [EOL]     return 1; [EOL] } <line_num>: 283,285
public boolean isLeaf() { [EOL]     return !node.hasChildNodes(); [EOL] } <line_num>: 287,289
public boolean isLanguage(String lang) { [EOL]     String current = getLanguage(); [EOL]     if (current == null) { [EOL]         return super.isLanguage(lang); [EOL]     } [EOL]     return current.toUpperCase().startsWith(lang.toUpperCase()); [EOL] } <line_num>: 296,302
protected String getLanguage() { [EOL]     Node n = node; [EOL]     while (n != null) { [EOL]         if (n.getNodeType() == Node.ELEMENT_NODE) { [EOL]             Element e = (Element) n; [EOL]             String attr = e.getAttribute("xml:lang"); [EOL]             if (attr != null && !attr.equals("")) { [EOL]                 return attr; [EOL]             } [EOL]         } [EOL]         n = n.getParentNode(); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 304,317
public void setValue(Object value) { [EOL]     if (node.getNodeType() == Node.TEXT_NODE || node.getNodeType() == Node.CDATA_SECTION_NODE) { [EOL]         String string = (String) TypeUtils.convert(value, String.class); [EOL]         if (string != null && !string.equals("")) { [EOL]             node.setNodeValue(string); [EOL]         } else { [EOL]             node.getParentNode().removeChild(node); [EOL]         } [EOL]     } else { [EOL]         NodeList children = node.getChildNodes(); [EOL]         int count = children.getLength(); [EOL]         for (int i = count; --i >= 0; ) { [EOL]             Node child = children.item(i); [EOL]             node.removeChild(child); [EOL]         } [EOL]         if (value instanceof Node) { [EOL]             Node valueNode = (Node) value; [EOL]             if (valueNode instanceof Element || valueNode instanceof Document) { [EOL]                 children = valueNode.getChildNodes(); [EOL]                 for (int i = 0; i < children.getLength(); i++) { [EOL]                     Node child = children.item(i); [EOL]                     node.appendChild(child.cloneNode(true)); [EOL]                 } [EOL]             } else { [EOL]                 node.appendChild(valueNode.cloneNode(true)); [EOL]             } [EOL]         } else { [EOL]             String string = (String) TypeUtils.convert(value, String.class); [EOL]             if (string != null && !string.equals("")) { [EOL]                 Node textNode = node.getOwnerDocument().createTextNode(string); [EOL]                 node.appendChild(textNode); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 325,367
public NodePointer createChild(JXPathContext context, QName name, int index) { [EOL]     if (index == WHOLE_COLLECTION) { [EOL]         index = 0; [EOL]     } [EOL]     boolean success = getAbstractFactory(context).createObject(context, this, node, name.toString(), index); [EOL]     if (success) { [EOL]         NodeTest nodeTest; [EOL]         String prefix = name.getPrefix(); [EOL]         String namespaceURI = prefix != null ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI(); [EOL]         nodeTest = new NodeNameTest(name, namespaceURI); [EOL]         NodeIterator it = childIterator(nodeTest, false, null); [EOL]         if (it != null && it.setPosition(index + 1)) { [EOL]             return it.getNodePointer(); [EOL]         } [EOL]     } [EOL]     throw new JXPathAbstractFactoryException("Factory could not create a child node for path: " + asPath() + "/" + name + "[" + (index + 1) + "]"); [EOL] } <line_num>: 369,400
public NodePointer createChild(JXPathContext context, QName name, int index, Object value) { [EOL]     NodePointer ptr = createChild(context, name, index); [EOL]     ptr.setValue(value); [EOL]     return ptr; [EOL] } <line_num>: 402,408
public NodePointer createAttribute(JXPathContext context, QName name) { [EOL]     if (!(node instanceof Element)) { [EOL]         return super.createAttribute(context, name); [EOL]     } [EOL]     Element element = (Element) node; [EOL]     String prefix = name.getPrefix(); [EOL]     if (prefix != null) { [EOL]         String ns = getNamespaceURI(prefix); [EOL]         if (ns == null) { [EOL]             throw new JXPathException("Unknown namespace prefix: " + prefix); [EOL]         } [EOL]         element.setAttributeNS(ns, name.toString(), ""); [EOL]     } else { [EOL]         if (!element.hasAttribute(name.getName())) { [EOL]             element.setAttribute(name.getName(), ""); [EOL]         } [EOL]     } [EOL]     NodeIterator it = attributeIterator(name); [EOL]     it.setPosition(1); [EOL]     return it.getNodePointer(); [EOL] } <line_num>: 410,432
public void remove() { [EOL]     Node parent = node.getParentNode(); [EOL]     if (parent == null) { [EOL]         throw new JXPathException("Cannot remove root DOM node"); [EOL]     } [EOL]     parent.removeChild(node); [EOL] } <line_num>: 434,440
public String asPath() { [EOL]     if (id != null) { [EOL]         return "id('" + escape(id) + "')"; [EOL]     } [EOL]     StringBuffer buffer = new StringBuffer(); [EOL]     if (parent != null) { [EOL]         buffer.append(parent.asPath()); [EOL]     } [EOL]     switch(node.getNodeType()) { [EOL]         case Node.ELEMENT_NODE: [EOL]             if (parent instanceof DOMNodePointer) { [EOL]                 if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') { [EOL]                     buffer.append('/'); [EOL]                 } [EOL]                 String ln = DOMNodePointer.getLocalName(node); [EOL]                 String nsURI = getNamespaceURI(); [EOL]                 if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) { [EOL]                     buffer.append(ln); [EOL]                     buffer.append('['); [EOL]                     buffer.append(getRelativePositionByName()).append(']'); [EOL]                 } else { [EOL]                     String prefix = getNamespaceResolver().getPrefix(nsURI); [EOL]                     if (prefix != null) { [EOL]                         buffer.append(prefix); [EOL]                         buffer.append(':'); [EOL]                         buffer.append(ln); [EOL]                         buffer.append('['); [EOL]                         buffer.append(getRelativePositionByName()); [EOL]                         buffer.append(']'); [EOL]                     } else { [EOL]                         buffer.append("node()"); [EOL]                         buffer.append('['); [EOL]                         buffer.append(getRelativePositionOfElement()); [EOL]                         buffer.append(']'); [EOL]                     } [EOL]                 } [EOL]             } [EOL]             break; [EOL]         case Node.TEXT_NODE: [EOL]         case Node.CDATA_SECTION_NODE: [EOL]             buffer.append("/text()"); [EOL]             buffer.append('['); [EOL]             buffer.append(getRelativePositionOfTextNode()).append(']'); [EOL]             break; [EOL]         case Node.PROCESSING_INSTRUCTION_NODE: [EOL]             String target = ((ProcessingInstruction) node).getTarget(); [EOL]             buffer.append("/processing-instruction(\'"); [EOL]             buffer.append(target).append("')"); [EOL]             buffer.append('['); [EOL]             buffer.append(getRelativePositionOfPI(target)).append(']'); [EOL]             break; [EOL]         case Node.DOCUMENT_NODE: [EOL]     } [EOL]     return buffer.toString(); [EOL] } <line_num>: 442,505
private String escape(String string) { [EOL]     int index = string.indexOf('\''); [EOL]     while (index != -1) { [EOL]         string = string.substring(0, index) + "&apos;" + string.substring(index + 1); [EOL]         index = string.indexOf('\''); [EOL]     } [EOL]     index = string.indexOf('\"'); [EOL]     while (index != -1) { [EOL]         string = string.substring(0, index) + "&quot;" + string.substring(index + 1); [EOL]         index = string.indexOf('\"'); [EOL]     } [EOL]     return string; [EOL] } <line_num>: 507,525
private int getRelativePositionByName() { [EOL]     int count = 1; [EOL]     Node n = node.getPreviousSibling(); [EOL]     while (n != null) { [EOL]         if (n.getNodeType() == Node.ELEMENT_NODE) { [EOL]             String nm = n.getNodeName(); [EOL]             if (nm.equals(node.getNodeName())) { [EOL]                 count++; [EOL]             } [EOL]         } [EOL]         n = n.getPreviousSibling(); [EOL]     } [EOL]     return count; [EOL] } <line_num>: 527,540
private int getRelativePositionOfElement() { [EOL]     int count = 1; [EOL]     Node n = node.getPreviousSibling(); [EOL]     while (n != null) { [EOL]         if (n.getNodeType() == Node.ELEMENT_NODE) { [EOL]             count++; [EOL]         } [EOL]         n = n.getPreviousSibling(); [EOL]     } [EOL]     return count; [EOL] } <line_num>: 542,552
private int getRelativePositionOfTextNode() { [EOL]     int count = 1; [EOL]     Node n = node.getPreviousSibling(); [EOL]     while (n != null) { [EOL]         if (n.getNodeType() == Node.TEXT_NODE || n.getNodeType() == Node.CDATA_SECTION_NODE) { [EOL]             count++; [EOL]         } [EOL]         n = n.getPreviousSibling(); [EOL]     } [EOL]     return count; [EOL] } <line_num>: 554,565
private int getRelativePositionOfPI(String target) { [EOL]     int count = 1; [EOL]     Node n = node.getPreviousSibling(); [EOL]     while (n != null) { [EOL]         if (n.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE && ((ProcessingInstruction) n).getTarget().equals(target)) { [EOL]             count++; [EOL]         } [EOL]         n = n.getPreviousSibling(); [EOL]     } [EOL]     return count; [EOL] } <line_num>: 567,578
public int hashCode() { [EOL]     return System.identityHashCode(node); [EOL] } <line_num>: 580,582
public boolean equals(Object object) { [EOL]     if (object == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(object instanceof DOMNodePointer)) { [EOL]         return false; [EOL]     } [EOL]     DOMNodePointer other = (DOMNodePointer) object; [EOL]     return node == other.node; [EOL] } <line_num>: 584,595
public static String getPrefix(Node node) { [EOL]     String prefix = node.getPrefix(); [EOL]     if (prefix != null) { [EOL]         return prefix; [EOL]     } [EOL]     String name = node.getNodeName(); [EOL]     int index = name.lastIndexOf(':'); [EOL]     if (index == -1) { [EOL]         return null; [EOL]     } [EOL]     return name.substring(0, index); [EOL] } <line_num>: 597,610
public static String getLocalName(Node node) { [EOL]     String localName = node.getLocalName(); [EOL]     if (localName != null) { [EOL]         return localName; [EOL]     } [EOL]     String name = node.getNodeName(); [EOL]     int index = name.lastIndexOf(':'); [EOL]     if (index == -1) { [EOL]         return name; [EOL]     } [EOL]     return name.substring(index + 1); [EOL] } <line_num>: 612,625
public static String getNamespaceURI(Node node) { [EOL]     if (node instanceof Document) { [EOL]         node = ((Document) node).getDocumentElement(); [EOL]     } [EOL]     Element element = (Element) node; [EOL]     String uri = element.getNamespaceURI(); [EOL]     if (uri != null) { [EOL]         return uri; [EOL]     } [EOL]     String qname; [EOL]     String prefix = getPrefix(node); [EOL]     if (prefix == null) { [EOL]         qname = "xmlns"; [EOL]     } else { [EOL]         qname = "xmlns:" + prefix; [EOL]     } [EOL]     Node aNode = node; [EOL]     while (aNode != null) { [EOL]         if (aNode.getNodeType() == Node.ELEMENT_NODE) { [EOL]             Attr attr = ((Element) aNode).getAttributeNode(qname); [EOL]             if (attr != null) { [EOL]                 return attr.getValue(); [EOL]             } [EOL]         } [EOL]         aNode = aNode.getParentNode(); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 627,659
public Object getValue() { [EOL]     return stringValue(node); [EOL] } <line_num>: 661,663
private String stringValue(Node node) { [EOL]     int nodeType = node.getNodeType(); [EOL]     if (nodeType == Node.COMMENT_NODE) { [EOL]         String text = ((Comment) node).getData(); [EOL]         return text == null ? "" : text.trim(); [EOL]     } else if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE) { [EOL]         String text = node.getNodeValue(); [EOL]         return text == null ? "" : text.trim(); [EOL]     } else if (nodeType == Node.PROCESSING_INSTRUCTION_NODE) { [EOL]         String text = ((ProcessingInstruction) node).getData(); [EOL]         return text == null ? "" : text.trim(); [EOL]     } else { [EOL]         NodeList list = node.getChildNodes(); [EOL]         StringBuffer buf = new StringBuffer(16); [EOL]         for (int i = 0; i < list.getLength(); i++) { [EOL]             Node child = list.item(i); [EOL]             if (child.getNodeType() == Node.TEXT_NODE) { [EOL]                 buf.append(child.getNodeValue()); [EOL]             } else { [EOL]                 buf.append(stringValue(child)); [EOL]             } [EOL]         } [EOL]         return buf.toString().trim(); [EOL]     } [EOL] } <line_num>: 665,695
public Pointer getPointerByID(JXPathContext context, String id) { [EOL]     Document document; [EOL]     if (node.getNodeType() == Node.DOCUMENT_NODE) { [EOL]         document = (Document) node; [EOL]     } else { [EOL]         document = node.getOwnerDocument(); [EOL]     } [EOL]     Element element = document.getElementById(id); [EOL]     if (element != null) { [EOL]         return new DOMNodePointer(element, getLocale(), id); [EOL]     } else { [EOL]         return new NullPointer(getLocale(), id); [EOL]     } [EOL] } <line_num>: 700,715
private AbstractFactory getAbstractFactory(JXPathContext context) { [EOL]     AbstractFactory factory = context.getFactory(); [EOL]     if (factory == null) { [EOL]         throw new JXPathException("Factory is not set on the JXPathContext - " + "cannot create path: " + asPath()); [EOL]     } [EOL]     return factory; [EOL] } <line_num>: 717,726
public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) { [EOL]     Node node1 = (Node) pointer1.getBaseValue(); [EOL]     Node node2 = (Node) pointer2.getBaseValue(); [EOL]     if (node1 == node2) { [EOL]         return 0; [EOL]     } [EOL]     int t1 = node1.getNodeType(); [EOL]     int t2 = node2.getNodeType(); [EOL]     if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE) { [EOL]         return -1; [EOL]     } else if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) { [EOL]         return 1; [EOL]     } else if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) { [EOL]         NamedNodeMap map = ((Node) getNode()).getAttributes(); [EOL]         int length = map.getLength(); [EOL]         for (int i = 0; i < length; i++) { [EOL]             Node n = map.item(i); [EOL]             if (n == node1) { [EOL]                 return -1; [EOL]             } else if (n == node2) { [EOL]                 return 1; [EOL]             } [EOL]         } [EOL]         return 0; [EOL]     } [EOL]     Node current = node.getFirstChild(); [EOL]     while (current != null) { [EOL]         if (current == node1) { [EOL]             return -1; [EOL]         } else if (current == node2) { [EOL]             return 1; [EOL]         } [EOL]         current = current.getNextSibling(); [EOL]     } [EOL]     return 0; [EOL] } <line_num>: 728,772
