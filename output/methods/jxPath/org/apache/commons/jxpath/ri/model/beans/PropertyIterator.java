public PropertyIterator(PropertyOwnerPointer pointer, String name, boolean reverse, NodePointer startWith) { [EOL]     propertyNodePointer = (PropertyPointer) pointer.getPropertyPointer().clone(); [EOL]     this.name = name; [EOL]     this.reverse = reverse; [EOL]     this.includeStart = true; [EOL]     if (reverse) { [EOL]         this.startPropertyIndex = PropertyPointer.UNSPECIFIED_PROPERTY; [EOL]         this.startIndex = -1; [EOL]     } [EOL]     if (startWith != null) { [EOL]         while (startWith != null && startWith.getImmediateParentPointer() != pointer) { [EOL]             startWith = startWith.getImmediateParentPointer(); [EOL]         } [EOL]         if (startWith == null) { [EOL]             throw new JXPathException("PropertyIerator startWith parameter is " + "not a child of the supplied parent"); [EOL]         } [EOL]         this.startPropertyIndex = ((PropertyPointer) startWith).getPropertyIndex(); [EOL]         this.startIndex = startWith.getIndex(); [EOL]         if (this.startIndex == NodePointer.WHOLE_COLLECTION) { [EOL]             this.startIndex = 0; [EOL]         } [EOL]         this.includeStart = false; [EOL]         if (reverse && startIndex == -1) { [EOL]             this.includeStart = true; [EOL]         } [EOL]     } [EOL] } <line_num>: 43,79
protected NodePointer getPropertyPointer() { [EOL]     return propertyNodePointer; [EOL] } <line_num>: 81,83
public void reset() { [EOL]     position = 0; [EOL]     targetReady = false; [EOL] } <line_num>: 85,88
public NodePointer getNodePointer() { [EOL]     if (position == 0) { [EOL]         if (name != null) { [EOL]             if (!targetReady) { [EOL]                 prepareForIndividualProperty(name); [EOL]             } [EOL]             if (empty) { [EOL]                 return null; [EOL]             } [EOL]         } else { [EOL]             if (!setPosition(1)) { [EOL]                 return null; [EOL]             } [EOL]             reset(); [EOL]         } [EOL]     } [EOL]     try { [EOL]         return propertyNodePointer.getValuePointer(); [EOL]     } catch (Throwable ex) { [EOL]         NullPropertyPointer npp = new NullPropertyPointer(propertyNodePointer.getImmediateParentPointer()); [EOL]         npp.setPropertyName(propertyNodePointer.getPropertyName()); [EOL]         npp.setIndex(propertyNodePointer.getIndex()); [EOL]         return npp.getValuePointer(); [EOL]     } [EOL] } <line_num>: 90,120
public int getPosition() { [EOL]     return position; [EOL] } <line_num>: 122,124
public boolean setPosition(int position) { [EOL]     if (name != null) { [EOL]         return setPositionIndividualProperty(position); [EOL]     } else { [EOL]         return setPositionAllProperties(position); [EOL]     } [EOL] } <line_num>: 126,133
private boolean setPositionIndividualProperty(int position) { [EOL]     this.position = position; [EOL]     if (position < 1) { [EOL]         return false; [EOL]     } [EOL]     if (!targetReady) { [EOL]         prepareForIndividualProperty(name); [EOL]     } [EOL]     if (empty) { [EOL]         return false; [EOL]     } [EOL]     int length = getLength(); [EOL]     int index; [EOL]     if (!reverse) { [EOL]         index = position + startIndex; [EOL]         if (!includeStart) { [EOL]             index++; [EOL]         } [EOL]         if (index > length) { [EOL]             return false; [EOL]         } [EOL]     } else { [EOL]         int end = startIndex; [EOL]         if (end == -1) { [EOL]             end = length - 1; [EOL]         } [EOL]         index = end - position + 2; [EOL]         if (!includeStart) { [EOL]             index--; [EOL]         } [EOL]         if (index < 1) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     propertyNodePointer.setIndex(index - 1); [EOL]     return true; [EOL] } <line_num>: 135,175
private boolean setPositionAllProperties(int position) { [EOL]     this.position = position; [EOL]     if (position < 1) { [EOL]         return false; [EOL]     } [EOL]     int offset; [EOL]     int count = propertyNodePointer.getPropertyCount(); [EOL]     if (!reverse) { [EOL]         int index = 1; [EOL]         for (int i = startPropertyIndex; i < count; i++) { [EOL]             propertyNodePointer.setPropertyIndex(i); [EOL]             int length = getLength(); [EOL]             if (i == startPropertyIndex) { [EOL]                 length -= startIndex; [EOL]                 if (!includeStart) { [EOL]                     length--; [EOL]                 } [EOL]                 offset = startIndex + position - index; [EOL]                 if (!includeStart) { [EOL]                     offset++; [EOL]                 } [EOL]             } else { [EOL]                 offset = position - index; [EOL]             } [EOL]             if (index <= position && position < index + length) { [EOL]                 propertyNodePointer.setIndex(offset); [EOL]                 return true; [EOL]             } [EOL]             index += length; [EOL]         } [EOL]     } else { [EOL]         int index = 1; [EOL]         int start = startPropertyIndex; [EOL]         if (start == PropertyPointer.UNSPECIFIED_PROPERTY) { [EOL]             start = count - 1; [EOL]         } [EOL]         for (int i = start; i >= 0; i--) { [EOL]             propertyNodePointer.setPropertyIndex(i); [EOL]             int length = getLength(); [EOL]             if (i == startPropertyIndex) { [EOL]                 int end = startIndex; [EOL]                 if (end == -1) { [EOL]                     end = length - 1; [EOL]                 } [EOL]                 length = end + 1; [EOL]                 offset = end - position + 1; [EOL]                 if (!includeStart) { [EOL]                     offset--; [EOL]                     length--; [EOL]                 } [EOL]             } else { [EOL]                 offset = length - (position - index) - 1; [EOL]             } [EOL]             if (index <= position && position < index + length) { [EOL]                 propertyNodePointer.setIndex(offset); [EOL]                 return true; [EOL]             } [EOL]             index += length; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 177,243
protected void prepareForIndividualProperty(String name) { [EOL]     targetReady = true; [EOL]     empty = true; [EOL]     String[] names = propertyNodePointer.getPropertyNames(); [EOL]     if (!reverse) { [EOL]         if (startPropertyIndex == PropertyPointer.UNSPECIFIED_PROPERTY) { [EOL]             startPropertyIndex = 0; [EOL]         } [EOL]         if (startIndex == NodePointer.WHOLE_COLLECTION) { [EOL]             startIndex = 0; [EOL]         } [EOL]         for (int i = startPropertyIndex; i < names.length; i++) { [EOL]             if (names[i].equals(name)) { [EOL]                 propertyNodePointer.setPropertyIndex(i); [EOL]                 if (i != startPropertyIndex) { [EOL]                     startIndex = 0; [EOL]                     includeStart = true; [EOL]                 } [EOL]                 empty = false; [EOL]                 break; [EOL]             } [EOL]         } [EOL]     } else { [EOL]         if (startPropertyIndex == PropertyPointer.UNSPECIFIED_PROPERTY) { [EOL]             startPropertyIndex = names.length - 1; [EOL]         } [EOL]         if (startIndex == NodePointer.WHOLE_COLLECTION) { [EOL]             startIndex = -1; [EOL]         } [EOL]         for (int i = startPropertyIndex; i >= 0; i--) { [EOL]             if (names[i].equals(name)) { [EOL]                 propertyNodePointer.setPropertyIndex(i); [EOL]                 if (i != startPropertyIndex) { [EOL]                     startIndex = -1; [EOL]                     includeStart = true; [EOL]                 } [EOL]                 empty = false; [EOL]                 break; [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 245,288
private int getLength() { [EOL]     int length; [EOL]     try { [EOL]         length = propertyNodePointer.getLength(); [EOL]     } catch (Throwable t) { [EOL]         length = 0; [EOL]     } [EOL]     return length; [EOL] } <line_num>: 293,303
