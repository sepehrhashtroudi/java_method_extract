public MethodFunction(Method method) { [EOL]     this.method = ValueUtils.getAccessibleMethod(method); [EOL] } <line_num>: 40,42
public Object invoke(ExpressionContext context, Object[] parameters) { [EOL]     try { [EOL]         Object target; [EOL]         Object[] args; [EOL]         if (Modifier.isStatic(method.getModifiers())) { [EOL]             target = null; [EOL]             if (parameters == null) { [EOL]                 parameters = EMPTY_ARRAY; [EOL]             } [EOL]             int pi = 0; [EOL]             Class[] types = method.getParameterTypes(); [EOL]             if (types.length >= 1 && ExpressionContext.class.isAssignableFrom(types[0])) { [EOL]                 pi = 1; [EOL]             } [EOL]             args = new Object[parameters.length + pi]; [EOL]             if (pi == 1) { [EOL]                 args[0] = context; [EOL]             } [EOL]             for (int i = 0; i < parameters.length; i++) { [EOL]                 args[i + pi] = TypeUtils.convert(parameters[i], types[i + pi]); [EOL]             } [EOL]         } else { [EOL]             int pi = 0; [EOL]             Class[] types = method.getParameterTypes(); [EOL]             if (types.length >= 1 && ExpressionContext.class.isAssignableFrom(types[0])) { [EOL]                 pi = 1; [EOL]             } [EOL]             target = TypeUtils.convert(parameters[0], method.getDeclaringClass()); [EOL]             args = new Object[parameters.length - 1 + pi]; [EOL]             if (pi == 1) { [EOL]                 args[0] = context; [EOL]             } [EOL]             for (int i = 1; i < parameters.length; i++) { [EOL]                 args[pi + i - 1] = TypeUtils.convert(parameters[i], types[i + pi - 1]); [EOL]             } [EOL]         } [EOL]         return method.invoke(target, args); [EOL]     } catch (Throwable ex) { [EOL]         if (ex instanceof InvocationTargetException) { [EOL]             ex = ((InvocationTargetException) ex).getTargetException(); [EOL]         } [EOL]         throw new JXPathInvalidAccessException("Cannot invoke " + method, ex); [EOL]     } [EOL] } <line_num>: 44,98
public String toString() { [EOL]     return method.toString(); [EOL] } <line_num>: 100,102
