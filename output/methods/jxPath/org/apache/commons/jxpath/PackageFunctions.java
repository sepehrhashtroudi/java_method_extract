public PackageFunctions(String classPrefix, String namespace) { [EOL]     this.classPrefix = classPrefix; [EOL]     this.namespace = namespace; [EOL] } <line_num>: 76,79
public Set getUsedNamespaces() { [EOL]     return Collections.singleton(namespace); [EOL] } <line_num>: 84,86
public Function getFunction(String namespace, String name, Object[] parameters) { [EOL]     if ((namespace == null && this.namespace != null) || (namespace != null && !namespace.equals(this.namespace))) { [EOL]         return null; [EOL]     } [EOL]     if (parameters == null) { [EOL]         parameters = EMPTY_ARRAY; [EOL]     } [EOL]     if (parameters.length >= 1) { [EOL]         Object target = TypeUtils.convert(parameters[0], Object.class); [EOL]         if (target != null) { [EOL]             Method method = MethodLookupUtils.lookupMethod(target.getClass(), name, parameters); [EOL]             if (method != null) { [EOL]                 return new MethodFunction(method); [EOL]             } [EOL]             if (target instanceof NodeSet) { [EOL]                 target = ((NodeSet) target).getPointers(); [EOL]             } [EOL]             method = MethodLookupUtils.lookupMethod(target.getClass(), name, parameters); [EOL]             if (method != null) { [EOL]                 return new MethodFunction(method); [EOL]             } [EOL]             if (target instanceof Collection) { [EOL]                 Iterator iter = ((Collection) target).iterator(); [EOL]                 if (iter.hasNext()) { [EOL]                     target = iter.next(); [EOL]                     if (target instanceof Pointer) { [EOL]                         target = ((Pointer) target).getValue(); [EOL]                     } [EOL]                 } else { [EOL]                     target = null; [EOL]                 } [EOL]             } [EOL]         } [EOL]         if (target != null) { [EOL]             Method method = MethodLookupUtils.lookupMethod(target.getClass(), name, parameters); [EOL]             if (method != null) { [EOL]                 return new MethodFunction(method); [EOL]             } [EOL]         } [EOL]     } [EOL]     String fullName = classPrefix + name; [EOL]     int inx = fullName.lastIndexOf('.'); [EOL]     if (inx == -1) { [EOL]         return null; [EOL]     } [EOL]     String className = fullName.substring(0, inx); [EOL]     String methodName = fullName.substring(inx + 1); [EOL]     Class functionClass; [EOL]     try { [EOL]         functionClass = Class.forName(className); [EOL]     } catch (ClassNotFoundException ex) { [EOL]         throw new JXPathException("Cannot invoke extension function " + (namespace != null ? namespace + ":" + name : name), ex); [EOL]     } [EOL]     if (methodName.equals("new")) { [EOL]         Constructor constructor = MethodLookupUtils.lookupConstructor(functionClass, parameters); [EOL]         if (constructor != null) { [EOL]             return new ConstructorFunction(constructor); [EOL]         } [EOL]     } else { [EOL]         Method method = MethodLookupUtils.lookupStaticMethod(functionClass, methodName, parameters); [EOL]         if (method != null) { [EOL]             return new MethodFunction(method); [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 109,211
