public JXPathBasicBeanInfo(Class clazz) { [EOL]     this.clazz = clazz; [EOL] } <line_num>: 43,45
public JXPathBasicBeanInfo(Class clazz, boolean atomic) { [EOL]     this.clazz = clazz; [EOL]     this.atomic = atomic; [EOL] } <line_num>: 47,50
public JXPathBasicBeanInfo(Class clazz, Class dynamicPropertyHandlerClass) { [EOL]     this.clazz = clazz; [EOL]     this.atomic = false; [EOL]     this.dynamicPropertyHandlerClass = dynamicPropertyHandlerClass; [EOL] } <line_num>: 52,56
public boolean isAtomic() { [EOL]     return atomic; [EOL] } <line_num>: 62,64
public boolean isDynamic() { [EOL]     return dynamicPropertyHandlerClass != null; [EOL] } <line_num>: 69,71
public int compare(Object left, Object right) { [EOL]     return ((PropertyDescriptor) left).getName().compareTo(((PropertyDescriptor) right).getName()); [EOL] } <line_num>: 87,90
public PropertyDescriptor[] getPropertyDescriptors() { [EOL]     if (propertyDescriptors == null) { [EOL]         try { [EOL]             BeanInfo bi = null; [EOL]             if (clazz.isInterface()) { [EOL]                 bi = Introspector.getBeanInfo(clazz); [EOL]             } else { [EOL]                 bi = Introspector.getBeanInfo(clazz, Object.class); [EOL]             } [EOL]             PropertyDescriptor[] pds = bi.getPropertyDescriptors(); [EOL]             PropertyDescriptor[] descriptors = new PropertyDescriptor[pds.length]; [EOL]             System.arraycopy(pds, 0, descriptors, 0, pds.length); [EOL]             Arrays.sort(descriptors, new Comparator() { [EOL]  [EOL]                 public int compare(Object left, Object right) { [EOL]                     return ((PropertyDescriptor) left).getName().compareTo(((PropertyDescriptor) right).getName()); [EOL]                 } [EOL]             }); [EOL]             propertyDescriptors = descriptors; [EOL]         } catch (IntrospectionException ex) { [EOL]             ex.printStackTrace(); [EOL]         } [EOL]     } [EOL]     return propertyDescriptors; [EOL] } <line_num>: 73,99
public PropertyDescriptor getPropertyDescriptor(String propertyName) { [EOL]     if (propertyNames == null) { [EOL]         PropertyDescriptor[] pds = getPropertyDescriptors(); [EOL]         String[] names = new String[pds.length]; [EOL]         for (int i = 0; i < pds.length; i++) { [EOL]             names[i] = pds[i].getName(); [EOL]         } [EOL]         propertyNames = names; [EOL]     } [EOL]     for (int i = 0; i < propertyNames.length; i++) { [EOL]         if (propertyNames[i] == propertyName) { [EOL]             return propertyDescriptors[i]; [EOL]         } [EOL]     } [EOL]     for (int i = 0; i < propertyNames.length; i++) { [EOL]         if (propertyNames[i].equals(propertyName)) { [EOL]             return propertyDescriptors[i]; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 101,123
public Class getDynamicPropertyHandlerClass() { [EOL]     return dynamicPropertyHandlerClass; [EOL] } <line_num>: 129,131
public String toString() { [EOL]     StringBuffer buffer = new StringBuffer(); [EOL]     buffer.append("BeanInfo [class = "); [EOL]     buffer.append(clazz.getName()); [EOL]     if (isDynamic()) { [EOL]         buffer.append(", dynamic"); [EOL]     } [EOL]     if (isAtomic()) { [EOL]         buffer.append(", atomic"); [EOL]     } [EOL]     buffer.append(", properties = "); [EOL]     PropertyDescriptor[] jpds = getPropertyDescriptors(); [EOL]     for (int i = 0; i < jpds.length; i++) { [EOL]         buffer.append("\n    "); [EOL]         buffer.append(jpds[i].getPropertyType()); [EOL]         buffer.append(": "); [EOL]         buffer.append(jpds[i].getName()); [EOL]     } [EOL]     buffer.append("]"); [EOL]     return buffer.toString(); [EOL] } <line_num>: 133,153
