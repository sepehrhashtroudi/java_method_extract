public ValueNodeSet(List values) { [EOL]     this.values = values; [EOL] } <line_num>: 440,442
public ValuePointer(Object object) { [EOL]     this.bean = object; [EOL] } <line_num>: 467,469
public boolean canConvert(Object object, Class toType) { [EOL]     if (object == null) { [EOL]         return true; [EOL]     } [EOL]     if (toType == Object.class) { [EOL]         return true; [EOL]     } [EOL]     Class fromType = object.getClass(); [EOL]     if (fromType.equals(toType)) { [EOL]         return true; [EOL]     } [EOL]     if (toType.isAssignableFrom(fromType)) { [EOL]         return true; [EOL]     } [EOL]     if (toType == String.class) { [EOL]         return true; [EOL]     } [EOL]     if (object instanceof Boolean) { [EOL]         if (toType == boolean.class || Number.class.isAssignableFrom(toType)) { [EOL]             return true; [EOL]         } [EOL]     } else if (object instanceof Number) { [EOL]         if (toType.isPrimitive() || Number.class.isAssignableFrom(toType)) { [EOL]             return true; [EOL]         } [EOL]     } else if (object instanceof Character) { [EOL]         if (toType == char.class) { [EOL]             return true; [EOL]         } [EOL]     } else if (object instanceof String) { [EOL]         if (toType.isPrimitive()) { [EOL]             return true; [EOL]         } [EOL]         if (toType == Boolean.class || toType == Character.class || toType == Byte.class || toType == Short.class || toType == Integer.class || toType == Long.class || toType == Float.class || toType == Double.class) { [EOL]             return true; [EOL]         } [EOL]     } else if (fromType.isArray()) { [EOL]         if (toType.isArray()) { [EOL]             Class cType = toType.getComponentType(); [EOL]             int length = Array.getLength(object); [EOL]             for (int i = 0; i < length; i++) { [EOL]                 Object value = Array.get(object, i); [EOL]                 if (!canConvert(value, cType)) { [EOL]                     return false; [EOL]                 } [EOL]             } [EOL]             return true; [EOL]         } else if (Collection.class.isAssignableFrom(toType)) { [EOL]             return canCreateCollection(toType); [EOL]         } else { [EOL]             if (Array.getLength(object) > 0) { [EOL]                 Object value = Array.get(object, 0); [EOL]                 return canConvert(value, toType); [EOL]             } else { [EOL]                 return canConvert("", toType); [EOL]             } [EOL]         } [EOL]     } else if (object instanceof Collection) { [EOL]         if (toType.isArray()) { [EOL]             Class cType = toType.getComponentType(); [EOL]             Iterator it = ((Collection) object).iterator(); [EOL]             while (it.hasNext()) { [EOL]                 Object value = it.next(); [EOL]                 if (!canConvert(value, cType)) { [EOL]                     return false; [EOL]                 } [EOL]             } [EOL]             return true; [EOL]         } else if (Collection.class.isAssignableFrom(toType)) { [EOL]             return canCreateCollection(toType); [EOL]         } else { [EOL]             if (((Collection) object).size() > 0) { [EOL]                 Object value; [EOL]                 if (object instanceof List) { [EOL]                     value = ((List) object).get(0); [EOL]                 } else { [EOL]                     Iterator it = ((Collection) object).iterator(); [EOL]                     value = it.next(); [EOL]                 } [EOL]                 return canConvert(value, toType); [EOL]             } else { [EOL]                 return canConvert("", toType); [EOL]             } [EOL]         } [EOL]     } else if (object instanceof NodeSet) { [EOL]         return canConvert(((NodeSet) object).getValues(), toType); [EOL]     } else if (object instanceof Pointer) { [EOL]         return canConvert(((Pointer) object).getValue(), toType); [EOL]     } [EOL]     return ConvertUtils.lookup(toType) != null; [EOL] } <line_num>: 48,168
public Object convert(Object object, Class toType) { [EOL]     if (object == null) { [EOL]         if (toType.isPrimitive()) { [EOL]             return convertNullToPrimitive(toType); [EOL]         } [EOL]         return null; [EOL]     } [EOL]     if (toType == Object.class) { [EOL]         if (object instanceof NodeSet) { [EOL]             return convert(((NodeSet) object).getValues(), toType); [EOL]         } else if (object instanceof Pointer) { [EOL]             return convert(((Pointer) object).getValue(), toType); [EOL]         } [EOL]         return object; [EOL]     } [EOL]     Class fromType = object.getClass(); [EOL]     if (fromType.equals(toType) || toType.isAssignableFrom(fromType)) { [EOL]         return object; [EOL]     } [EOL]     if (fromType.isArray()) { [EOL]         int length = Array.getLength(object); [EOL]         if (toType.isArray()) { [EOL]             Class cType = toType.getComponentType(); [EOL]             Object array = Array.newInstance(cType, length); [EOL]             for (int i = 0; i < length; i++) { [EOL]                 Object value = Array.get(object, i); [EOL]                 Array.set(array, i, convert(value, cType)); [EOL]             } [EOL]             return array; [EOL]         } else if (Collection.class.isAssignableFrom(toType)) { [EOL]             Collection collection = allocateCollection(toType); [EOL]             for (int i = 0; i < length; i++) { [EOL]                 collection.add(Array.get(object, i)); [EOL]             } [EOL]             return unmodifiableCollection(collection); [EOL]         } else { [EOL]             if (length > 0) { [EOL]                 Object value = Array.get(object, 0); [EOL]                 return convert(value, toType); [EOL]             } else { [EOL]                 return convert("", toType); [EOL]             } [EOL]         } [EOL]     } else if (object instanceof Collection) { [EOL]         int length = ((Collection) object).size(); [EOL]         if (toType.isArray()) { [EOL]             Class cType = toType.getComponentType(); [EOL]             Object array = Array.newInstance(cType, length); [EOL]             Iterator it = ((Collection) object).iterator(); [EOL]             for (int i = 0; i < length; i++) { [EOL]                 Object value = it.next(); [EOL]                 Array.set(array, i, convert(value, cType)); [EOL]             } [EOL]             return array; [EOL]         } else if (Collection.class.isAssignableFrom(toType)) { [EOL]             Collection collection = allocateCollection(toType); [EOL]             collection.addAll((Collection) object); [EOL]             return unmodifiableCollection(collection); [EOL]         } else { [EOL]             if (length > 0) { [EOL]                 Object value; [EOL]                 if (object instanceof List) { [EOL]                     value = ((List) object).get(0); [EOL]                 } else { [EOL]                     Iterator it = ((Collection) object).iterator(); [EOL]                     value = it.next(); [EOL]                 } [EOL]                 return convert(value, toType); [EOL]             } else { [EOL]                 return convert("", toType); [EOL]             } [EOL]         } [EOL]     } else if (object instanceof NodeSet) { [EOL]         return convert(((NodeSet) object).getValues(), toType); [EOL]     } else if (object instanceof Pointer) { [EOL]         return convert(((Pointer) object).getValue(), toType); [EOL]     } else if (toType == String.class) { [EOL]         return object.toString(); [EOL]     } else if (object instanceof Boolean) { [EOL]         if (toType == boolean.class) { [EOL]             return object; [EOL]         } [EOL]         boolean value = ((Boolean) object).booleanValue(); [EOL]         return allocateNumber(toType, value ? 1 : 0); [EOL]     } else if (object instanceof Number) { [EOL]         double value = ((Number) object).doubleValue(); [EOL]         if (toType == boolean.class || toType == Boolean.class) { [EOL]             return value == 0.0 ? Boolean.FALSE : Boolean.TRUE; [EOL]         } [EOL]         if (toType.isPrimitive() || Number.class.isAssignableFrom(toType)) { [EOL]             return allocateNumber(toType, value); [EOL]         } [EOL]     } else if (object instanceof Character) { [EOL]         if (toType == char.class) { [EOL]             return object; [EOL]         } [EOL]     } else if (object instanceof String) { [EOL]         Object value = convertStringToPrimitive(object, toType); [EOL]         if (value != null) { [EOL]             return value; [EOL]         } [EOL]     } [EOL]     Converter converter = ConvertUtils.lookup(toType); [EOL]     if (converter != null) { [EOL]         return converter.convert(toType, object); [EOL]     } [EOL]     throw new JXPathTypeConversionException("Cannot convert " + object.getClass() + " to " + toType); [EOL] } <line_num>: 175,306
protected Object convertNullToPrimitive(Class toType) { [EOL]     if (toType == boolean.class) { [EOL]         return Boolean.FALSE; [EOL]     } [EOL]     if (toType == char.class) { [EOL]         return new Character('\0'); [EOL]     } [EOL]     if (toType == byte.class) { [EOL]         return new Byte((byte) 0); [EOL]     } [EOL]     if (toType == short.class) { [EOL]         return new Short((short) 0); [EOL]     } [EOL]     if (toType == int.class) { [EOL]         return new Integer(0); [EOL]     } [EOL]     if (toType == long.class) { [EOL]         return new Long(0L); [EOL]     } [EOL]     if (toType == float.class) { [EOL]         return new Float(0.0f); [EOL]     } [EOL]     if (toType == double.class) { [EOL]         return new Double(0.0); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 308,334
protected Object convertStringToPrimitive(Object object, Class toType) { [EOL]     if (toType == boolean.class || toType == Boolean.class) { [EOL]         return Boolean.valueOf((String) object); [EOL]     } [EOL]     if (toType == char.class || toType == Character.class) { [EOL]         return new Character(((String) object).charAt(0)); [EOL]     } [EOL]     if (toType == byte.class || toType == Byte.class) { [EOL]         return new Byte((String) object); [EOL]     } [EOL]     if (toType == short.class || toType == Short.class) { [EOL]         return new Short((String) object); [EOL]     } [EOL]     if (toType == int.class || toType == Integer.class) { [EOL]         return new Integer((String) object); [EOL]     } [EOL]     if (toType == long.class || toType == Long.class) { [EOL]         return new Long((String) object); [EOL]     } [EOL]     if (toType == float.class || toType == Float.class) { [EOL]         return new Float((String) object); [EOL]     } [EOL]     if (toType == double.class || toType == Double.class) { [EOL]         return new Double((String) object); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 336,362
protected Number allocateNumber(Class type, double value) { [EOL]     if (type == Byte.class || type == byte.class) { [EOL]         return new Byte((byte) value); [EOL]     } [EOL]     if (type == Short.class || type == short.class) { [EOL]         return new Short((short) value); [EOL]     } [EOL]     if (type == Integer.class || type == int.class) { [EOL]         return new Integer((int) value); [EOL]     } [EOL]     if (type == Long.class || type == long.class) { [EOL]         return new Long((long) value); [EOL]     } [EOL]     if (type == Float.class || type == float.class) { [EOL]         return new Float((float) value); [EOL]     } [EOL]     if (type == Double.class || type == double.class) { [EOL]         return new Double(value); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 364,384
protected boolean canCreateCollection(Class type) { [EOL]     if (!type.isInterface() && ((type.getModifiers() & Modifier.ABSTRACT) == 0)) { [EOL]         return true; [EOL]     } [EOL]     if (type == List.class) { [EOL]         return true; [EOL]     } [EOL]     if (type == Set.class) { [EOL]         return true; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 386,400
protected Collection allocateCollection(Class type) { [EOL]     if (!type.isInterface() && ((type.getModifiers() & Modifier.ABSTRACT) == 0)) { [EOL]         try { [EOL]             return (Collection) type.newInstance(); [EOL]         } catch (Exception ex) { [EOL]             throw new JXPathInvalidAccessException("Cannot create collection of type: " + type, ex); [EOL]         } [EOL]     } [EOL]     if (type == List.class) { [EOL]         return new ArrayList(); [EOL]     } [EOL]     if (type == Set.class) { [EOL]         return new HashSet(); [EOL]     } [EOL]     throw new JXPathInvalidAccessException("Cannot create collection of type: " + type); [EOL] } <line_num>: 402,422
protected Collection unmodifiableCollection(Collection collection) { [EOL]     if (collection instanceof List) { [EOL]         return Collections.unmodifiableList((List) collection); [EOL]     } else if (collection instanceof Set) { [EOL]         return Collections.unmodifiableSet((Set) collection); [EOL]     } [EOL]     return collection; [EOL] } <line_num>: 424,434
public List getValues() { [EOL]     return Collections.unmodifiableList(values); [EOL] } <line_num>: 444,446
public List getNodes() { [EOL]     return Collections.unmodifiableList(values); [EOL] } <line_num>: 448,450
public List getPointers() { [EOL]     if (pointers == null) { [EOL]         pointers = new ArrayList(); [EOL]         for (int i = 0; i < values.size(); i++) { [EOL]             pointers.add(new ValuePointer(values.get(i))); [EOL]         } [EOL]         pointers = Collections.unmodifiableList(pointers); [EOL]     } [EOL]     return pointers; [EOL] } <line_num>: 452,461
public Object getValue() { [EOL]     return bean; [EOL] } <line_num>: 471,473
public Object getNode() { [EOL]     return bean; [EOL] } <line_num>: 475,477
public Object getRootNode() { [EOL]     return bean; [EOL] } <line_num>: 479,481
public void setValue(Object value) { [EOL]     throw new UnsupportedOperationException(); [EOL] } <line_num>: 483,485
public Object clone() { [EOL]     return this; [EOL] } <line_num>: 487,489
public int compareTo(Object object) { [EOL]     return 0; [EOL] } <line_num>: 491,493
public String asPath() { [EOL]     if (bean == null) { [EOL]         return "null()"; [EOL]     } else if (bean instanceof Number) { [EOL]         String string = bean.toString(); [EOL]         if (string.endsWith(".0")) { [EOL]             string = string.substring(0, string.length() - 2); [EOL]         } [EOL]         return string; [EOL]     } else if (bean instanceof Boolean) { [EOL]         return ((Boolean) bean).booleanValue() ? "true()" : "false()"; [EOL]     } else if (bean instanceof String) { [EOL]         return "'" + bean + "'"; [EOL]     } [EOL]     return "{object of type " + bean.getClass().getName() + "}"; [EOL] } <line_num>: 495,513
