public DocumentContainer(URL xmlURL) { [EOL]     this(xmlURL, MODEL_DOM); [EOL] } <line_num>: 81,83
public DocumentContainer(URL xmlURL, String model) { [EOL]     this.xmlURL = xmlURL; [EOL]     if (xmlURL == null) { [EOL]         throw new JXPathException("XML URL is null"); [EOL]     } [EOL]     this.model = model; [EOL] } <line_num>: 92,98
public static void registerXMLParser(String model, XMLParser parser) { [EOL]     parsers.put(model, parser); [EOL] } <line_num>: 62,64
public static void registerXMLParser(String model, String parserClassName) { [EOL]     parserClasses.put(model, parserClassName); [EOL] } <line_num>: 70,72
public Object getValue() { [EOL]     if (document == null) { [EOL]         try { [EOL]             InputStream stream = null; [EOL]             try { [EOL]                 if (xmlURL != null) { [EOL]                     stream = xmlURL.openStream(); [EOL]                 } [EOL]                 document = parseXML(stream); [EOL]             } finally { [EOL]                 if (stream != null) { [EOL]                     stream.close(); [EOL]                 } [EOL]             } [EOL]         } catch (Exception ex) { [EOL]             throw new JXPathException("Cannot read XML from: " + xmlURL.toString(), ex); [EOL]         } [EOL]     } [EOL]     return document; [EOL] } <line_num>: 103,126
public Object parseXML(InputStream stream) { [EOL]     XMLParser parser = getParser(model); [EOL]     if (parser instanceof XMLParser2) { [EOL]         XMLParser2 parser2 = (XMLParser2) parser; [EOL]         parser2.setValidating(isValidating()); [EOL]         parser2.setNamespaceAware(isNamespaceAware()); [EOL]         parser2.setIgnoringElementContentWhitespace(isIgnoringElementContentWhitespace()); [EOL]         parser2.setExpandEntityReferences(isExpandEntityReferences()); [EOL]         parser2.setIgnoringComments(isIgnoringComments()); [EOL]         parser2.setCoalescing(isCoalescing()); [EOL]     } [EOL]     return parser.parseXML(stream); [EOL] } <line_num>: 131,144
public void setValue(Object value) { [EOL]     throw new UnsupportedOperationException(); [EOL] } <line_num>: 149,151
private static final XMLParser getParser(String model) { [EOL]     XMLParser parser = (XMLParser) parsers.get(model); [EOL]     if (parser == null) { [EOL]         String className = (String) parserClasses.get(model); [EOL]         if (className == null) { [EOL]             throw new JXPathException("Unsupported XML model: " + model); [EOL]         } [EOL]         try { [EOL]             Class clazz = Class.forName(className); [EOL]             parser = (XMLParser) clazz.newInstance(); [EOL]         } catch (Exception ex) { [EOL]             throw new JXPathException("Cannot allocate XMLParser: " + className); [EOL]         } [EOL]         parsers.put(model, parser); [EOL]     } [EOL]     return parser; [EOL] } <line_num>: 156,174
