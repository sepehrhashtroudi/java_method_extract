public KeyedObjects() { [EOL]     this.data = new java.util.ArrayList(); [EOL] } <line_num>: 72,74
public int getItemCount() { [EOL]     return this.data.size(); [EOL] } <line_num>: 81,83
public Object getObject(int item) { [EOL]     Object result = null; [EOL]     KeyedObject kobj = (KeyedObject) this.data.get(item); [EOL]     if (kobj != null) { [EOL]         result = kobj.getObject(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 94,101
public Comparable getKey(int index) { [EOL]     Comparable result = null; [EOL]     KeyedObject item = (KeyedObject) this.data.get(index); [EOL]     if (item != null) { [EOL]         result = item.getKey(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 114,121
public int getIndex(Comparable key) { [EOL]     if (key == null) { [EOL]         throw new IllegalArgumentException("Null 'key' argument."); [EOL]     } [EOL]     int i = 0; [EOL]     Iterator iterator = this.data.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         KeyedObject ko = (KeyedObject) iterator.next(); [EOL]         if (ko.getKey().equals(key)) { [EOL]             return i; [EOL]         } [EOL]         i++; [EOL]     } [EOL]     return -1; [EOL] } <line_num>: 132,146
public List getKeys() { [EOL]     List result = new java.util.ArrayList(); [EOL]     Iterator iterator = this.data.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         KeyedObject ko = (KeyedObject) iterator.next(); [EOL]         result.add(ko.getKey()); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 153,161
public Object getObject(Comparable key) { [EOL]     int index = getIndex(key); [EOL]     if (index < 0) { [EOL]         throw new UnknownKeyException("The key (" + key + ") is not recognised."); [EOL]     } [EOL]     return getObject(index); [EOL] } <line_num>: 172,179
public void addObject(Comparable key, Object object) { [EOL]     setObject(key, object); [EOL] } <line_num>: 190,192
public void setObject(Comparable key, Object object) { [EOL]     int keyIndex = getIndex(key); [EOL]     if (keyIndex >= 0) { [EOL]         KeyedObject ko = (KeyedObject) this.data.get(keyIndex); [EOL]         ko.setObject(object); [EOL]     } else { [EOL]         KeyedObject ko = new KeyedObject(key, object); [EOL]         this.data.add(ko); [EOL]     } [EOL] } <line_num>: 204,214
public void insertValue(int position, Comparable key, Object value) { [EOL]     if (position < 0 || position > this.data.size()) { [EOL]         throw new IllegalArgumentException("'position' out of bounds."); [EOL]     } [EOL]     if (key == null) { [EOL]         throw new IllegalArgumentException("Null 'key' argument."); [EOL]     } [EOL]     int pos = getIndex(key); [EOL]     if (pos >= 0) { [EOL]         this.data.remove(pos); [EOL]     } [EOL]     KeyedObject item = new KeyedObject(key, value); [EOL]     if (position <= this.data.size()) { [EOL]         this.data.add(position, item); [EOL]     } else { [EOL]         this.data.add(item); [EOL]     } [EOL] } <line_num>: 228,246
public void removeValue(int index) { [EOL]     this.data.remove(index); [EOL] } <line_num>: 255,257
public void removeValue(Comparable key) { [EOL]     int index = getIndex(key); [EOL]     if (index < 0) { [EOL]         throw new UnknownKeyException("The key (" + key.toString() + ") is not recognised."); [EOL]     } [EOL]     removeValue(index); [EOL] } <line_num>: 268,276
public void clear() { [EOL]     this.data.clear(); [EOL] } <line_num>: 283,285
public void sortByKeys(SortOrder order) { [EOL]     Comparator comparator = new KeyedObjectComparator(KeyedObjectComparatorType.BY_KEY, order); [EOL]     Collections.sort(this.data, comparator); [EOL] } <line_num>: 294,298
public void sortByObjects(SortOrder order) { [EOL]     Comparator comparator = new KeyedObjectComparator(KeyedObjectComparatorType.BY_VALUE, order); [EOL]     Collections.sort(this.data, comparator); [EOL] } <line_num>: 309,313
public Object clone() throws CloneNotSupportedException { [EOL]     KeyedObjects clone = (KeyedObjects) super.clone(); [EOL]     clone.data = new java.util.ArrayList(); [EOL]     Iterator iterator = this.data.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         KeyedObject ko = (KeyedObject) iterator.next(); [EOL]         clone.data.add(ko.clone()); [EOL]     } [EOL]     return clone; [EOL] } <line_num>: 324,333
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof KeyedObjects)) { [EOL]         return false; [EOL]     } [EOL]     KeyedObjects that = (KeyedObjects) obj; [EOL]     int count = getItemCount(); [EOL]     if (count != that.getItemCount()) { [EOL]         return false; [EOL]     } [EOL]     for (int i = 0; i < count; i++) { [EOL]         Comparable k1 = getKey(i); [EOL]         Comparable k2 = that.getKey(i); [EOL]         if (!k1.equals(k2)) { [EOL]             return false; [EOL]         } [EOL]         Object o1 = getObject(i); [EOL]         Object o2 = that.getObject(i); [EOL]         if (o1 == null) { [EOL]             if (o2 != null) { [EOL]                 return false; [EOL]             } [EOL]         } else { [EOL]             if (!o1.equals(o2)) { [EOL]                 return false; [EOL]             } [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 342,377
public int hashCode() { [EOL]     return (this.data != null ? this.data.hashCode() : 0); [EOL] } <line_num>: 384,386
