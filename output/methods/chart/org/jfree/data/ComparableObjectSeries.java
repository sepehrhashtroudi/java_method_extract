public ComparableObjectSeries(Comparable key) { [EOL]     this(key, true, true); [EOL] } <line_num>: 82,84
public ComparableObjectSeries(Comparable key, boolean autoSort, boolean allowDuplicateXValues) { [EOL]     super(key); [EOL]     this.data = new java.util.ArrayList(); [EOL]     this.autoSort = autoSort; [EOL]     this.allowDuplicateXValues = allowDuplicateXValues; [EOL] } <line_num>: 96,102
public boolean getAutoSort() { [EOL]     return this.autoSort; [EOL] } <line_num>: 111,113
public boolean getAllowDuplicateXValues() { [EOL]     return this.allowDuplicateXValues; [EOL] } <line_num>: 121,123
public int getItemCount() { [EOL]     return this.data.size(); [EOL] } <line_num>: 130,132
public int getMaximumItemCount() { [EOL]     return this.maximumItemCount; [EOL] } <line_num>: 141,143
public void setMaximumItemCount(int maximum) { [EOL]     this.maximumItemCount = maximum; [EOL]     boolean dataRemoved = false; [EOL]     while (this.data.size() > maximum) { [EOL]         this.data.remove(0); [EOL]         dataRemoved = true; [EOL]     } [EOL]     if (dataRemoved) { [EOL]         fireSeriesChanged(); [EOL]     } [EOL] } <line_num>: 159,169
protected void add(Comparable x, Object y) { [EOL]     add(x, y, true); [EOL] } <line_num>: 181,184
protected void add(Comparable x, Object y, boolean notify) { [EOL]     ComparableObjectItem item = new ComparableObjectItem(x, y); [EOL]     add(item, notify); [EOL] } <line_num>: 199,203
protected void add(ComparableObjectItem item, boolean notify) { [EOL]     if (item == null) { [EOL]         throw new IllegalArgumentException("Null 'item' argument."); [EOL]     } [EOL]     if (this.autoSort) { [EOL]         int index = Collections.binarySearch(this.data, item); [EOL]         if (index < 0) { [EOL]             this.data.add(-index - 1, item); [EOL]         } else { [EOL]             if (this.allowDuplicateXValues) { [EOL]                 int size = this.data.size(); [EOL]                 while (index < size && item.compareTo(this.data.get(index)) == 0) { [EOL]                     index++; [EOL]                 } [EOL]                 if (index < this.data.size()) { [EOL]                     this.data.add(index, item); [EOL]                 } else { [EOL]                     this.data.add(item); [EOL]                 } [EOL]             } else { [EOL]                 throw new SeriesException("X-value already exists."); [EOL]             } [EOL]         } [EOL]     } else { [EOL]         if (!this.allowDuplicateXValues) { [EOL]             int index = indexOf(item.getComparable()); [EOL]             if (index >= 0) { [EOL]                 throw new SeriesException("X-value already exists."); [EOL]             } [EOL]         } [EOL]         this.data.add(item); [EOL]     } [EOL]     if (getItemCount() > this.maximumItemCount) { [EOL]         this.data.remove(0); [EOL]     } [EOL]     if (notify) { [EOL]         fireSeriesChanged(); [EOL]     } [EOL] } <line_num>: 214,262
public int indexOf(Comparable x) { [EOL]     if (this.autoSort) { [EOL]         return Collections.binarySearch(this.data, new ComparableObjectItem(x, null)); [EOL]     } else { [EOL]         for (int i = 0; i < this.data.size(); i++) { [EOL]             ComparableObjectItem item = (ComparableObjectItem) this.data.get(i); [EOL]             if (item.getComparable().equals(x)) { [EOL]                 return i; [EOL]             } [EOL]         } [EOL]         return -1; [EOL]     } [EOL] } <line_num>: 274,289
protected void update(Comparable x, Object y) { [EOL]     int index = indexOf(x); [EOL]     if (index < 0) { [EOL]         throw new SeriesException("No observation for x = " + x); [EOL]     } else { [EOL]         ComparableObjectItem item = getDataItem(index); [EOL]         item.setObject(y); [EOL]         fireSeriesChanged(); [EOL]     } [EOL] } <line_num>: 300,310
protected void updateByIndex(int index, Object y) { [EOL]     ComparableObjectItem item = getDataItem(index); [EOL]     item.setObject(y); [EOL]     fireSeriesChanged(); [EOL] } <line_num>: 319,323
protected ComparableObjectItem getDataItem(int index) { [EOL]     return (ComparableObjectItem) this.data.get(index); [EOL] } <line_num>: 332,334
protected void delete(int start, int end) { [EOL]     for (int i = start; i <= end; i++) { [EOL]         this.data.remove(start); [EOL]     } [EOL]     fireSeriesChanged(); [EOL] } <line_num>: 343,348
public void clear() { [EOL]     if (this.data.size() > 0) { [EOL]         this.data.clear(); [EOL]         fireSeriesChanged(); [EOL]     } [EOL] } <line_num>: 355,360
protected ComparableObjectItem remove(int index) { [EOL]     ComparableObjectItem result = (ComparableObjectItem) this.data.remove(index); [EOL]     fireSeriesChanged(); [EOL]     return result; [EOL] } <line_num>: 370,375
public ComparableObjectItem remove(Comparable x) { [EOL]     return remove(indexOf(x)); [EOL] } <line_num>: 385,387
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof ComparableObjectSeries)) { [EOL]         return false; [EOL]     } [EOL]     if (!super.equals(obj)) { [EOL]         return false; [EOL]     } [EOL]     ComparableObjectSeries that = (ComparableObjectSeries) obj; [EOL]     if (this.maximumItemCount != that.maximumItemCount) { [EOL]         return false; [EOL]     } [EOL]     if (this.autoSort != that.autoSort) { [EOL]         return false; [EOL]     } [EOL]     if (this.allowDuplicateXValues != that.allowDuplicateXValues) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.data, that.data)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 397,421
public int hashCode() { [EOL]     int result = super.hashCode(); [EOL]     int count = getItemCount(); [EOL]     if (count > 0) { [EOL]         ComparableObjectItem item = getDataItem(0); [EOL]         result = 29 * result + item.hashCode(); [EOL]     } [EOL]     if (count > 1) { [EOL]         ComparableObjectItem item = getDataItem(count - 1); [EOL]         result = 29 * result + item.hashCode(); [EOL]     } [EOL]     if (count > 2) { [EOL]         ComparableObjectItem item = getDataItem(count / 2); [EOL]         result = 29 * result + item.hashCode(); [EOL]     } [EOL]     result = 29 * result + this.maximumItemCount; [EOL]     result = 29 * result + (this.autoSort ? 1 : 0); [EOL]     result = 29 * result + (this.allowDuplicateXValues ? 1 : 0); [EOL]     return result; [EOL] } <line_num>: 428,449
