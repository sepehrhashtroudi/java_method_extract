public DefaultKeyedValues2D() { [EOL]     this(false); [EOL] } <line_num>: 95,97
public DefaultKeyedValues2D(boolean sortRowKeys) { [EOL]     this.rowKeys = new java.util.ArrayList(); [EOL]     this.columnKeys = new java.util.ArrayList(); [EOL]     this.rows = new java.util.ArrayList(); [EOL]     this.sortRowKeys = sortRowKeys; [EOL] } <line_num>: 104,109
public int getRowCount() { [EOL]     return this.rowKeys.size(); [EOL] } <line_num>: 118,120
public int getColumnCount() { [EOL]     return this.columnKeys.size(); [EOL] } <line_num>: 129,131
public Number getValue(int row, int column) { [EOL]     Number result = null; [EOL]     DefaultKeyedValues rowData = (DefaultKeyedValues) this.rows.get(row); [EOL]     if (rowData != null) { [EOL]         Comparable columnKey = (Comparable) this.columnKeys.get(column); [EOL]         int index = rowData.getIndex(columnKey); [EOL]         if (index >= 0) { [EOL]             result = rowData.getValue(index); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 143,156
public Comparable getRowKey(int row) { [EOL]     return (Comparable) this.rowKeys.get(row); [EOL] } <line_num>: 168,170
public int getRowIndex(Comparable key) { [EOL]     if (key == null) { [EOL]         throw new IllegalArgumentException("Null 'key' argument."); [EOL]     } [EOL]     if (this.sortRowKeys) { [EOL]         return Collections.binarySearch(this.rowKeys, key); [EOL]     } else { [EOL]         return this.rowKeys.indexOf(key); [EOL]     } [EOL] } <line_num>: 182,192
public List getRowKeys() { [EOL]     return Collections.unmodifiableList(this.rowKeys); [EOL] } <line_num>: 201,203
public Comparable getColumnKey(int column) { [EOL]     return (Comparable) this.columnKeys.get(column); [EOL] } <line_num>: 216,218
public int getColumnIndex(Comparable key) { [EOL]     if (key == null) { [EOL]         throw new IllegalArgumentException("Null 'key' argument."); [EOL]     } [EOL]     return this.columnKeys.indexOf(key); [EOL] } <line_num>: 230,235
public List getColumnKeys() { [EOL]     return Collections.unmodifiableList(this.columnKeys); [EOL] } <line_num>: 244,246
public Number getValue(Comparable rowKey, Comparable columnKey) { [EOL]     if (rowKey == null) { [EOL]         throw new IllegalArgumentException("Null 'rowKey' argument."); [EOL]     } [EOL]     if (columnKey == null) { [EOL]         throw new IllegalArgumentException("Null 'columnKey' argument."); [EOL]     } [EOL]     if (!(this.columnKeys.contains(columnKey))) { [EOL]         throw new UnknownKeyException("Unrecognised columnKey: " + columnKey); [EOL]     } [EOL]     int row = getRowIndex(rowKey); [EOL]     if (row >= 0) { [EOL]         DefaultKeyedValues rowData = (DefaultKeyedValues) this.rows.get(row); [EOL]         int col = rowData.getIndex(columnKey); [EOL]         return (col >= 0 ? rowData.getValue(col) : null); [EOL]     } else { [EOL]         throw new UnknownKeyException("Unrecognised rowKey: " + rowKey); [EOL]     } [EOL] } <line_num>: 261,288
public void addValue(Number value, Comparable rowKey, Comparable columnKey) { [EOL]     setValue(value, rowKey, columnKey); [EOL] } <line_num>: 301,305
public void setValue(Number value, Comparable rowKey, Comparable columnKey) { [EOL]     DefaultKeyedValues row; [EOL]     int rowIndex = getRowIndex(rowKey); [EOL]     if (rowIndex >= 0) { [EOL]         row = (DefaultKeyedValues) this.rows.get(rowIndex); [EOL]     } else { [EOL]         row = new DefaultKeyedValues(); [EOL]         if (this.sortRowKeys) { [EOL]             rowIndex = -rowIndex - 1; [EOL]             this.rowKeys.add(rowIndex, rowKey); [EOL]             this.rows.add(rowIndex, row); [EOL]         } else { [EOL]             this.rowKeys.add(rowKey); [EOL]             this.rows.add(row); [EOL]         } [EOL]     } [EOL]     row.setValue(columnKey, value); [EOL]     int columnIndex = this.columnKeys.indexOf(columnKey); [EOL]     if (columnIndex < 0) { [EOL]         this.columnKeys.add(columnKey); [EOL]     } [EOL] } <line_num>: 317,344
public void removeValue(Comparable rowKey, Comparable columnKey) { [EOL]     setValue(null, rowKey, columnKey); [EOL]     boolean allNull = true; [EOL]     int rowIndex = getRowIndex(rowKey); [EOL]     DefaultKeyedValues row = (DefaultKeyedValues) this.rows.get(rowIndex); [EOL]     for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) { [EOL]         if (row.getValue(item) != null) { [EOL]             allNull = false; [EOL]             break; [EOL]         } [EOL]     } [EOL]     if (allNull) { [EOL]         this.rowKeys.remove(rowIndex); [EOL]         this.rows.remove(rowIndex); [EOL]     } [EOL]     allNull = true; [EOL]     for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) { [EOL]         row = (DefaultKeyedValues) this.rows.get(item); [EOL]         int columnIndex = row.getIndex(columnKey); [EOL]         if (columnIndex >= 0 && row.getValue(columnIndex) != null) { [EOL]             allNull = false; [EOL]             break; [EOL]         } [EOL]     } [EOL]     if (allNull) { [EOL]         for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) { [EOL]             row = (DefaultKeyedValues) this.rows.get(item); [EOL]             int columnIndex = row.getIndex(columnKey); [EOL]             if (columnIndex >= 0) { [EOL]                 row.removeValue(columnIndex); [EOL]             } [EOL]         } [EOL]         this.columnKeys.remove(columnKey); [EOL]     } [EOL] } <line_num>: 356,402
public void removeRow(int rowIndex) { [EOL]     this.rowKeys.remove(rowIndex); [EOL]     this.rows.remove(rowIndex); [EOL] } <line_num>: 412,415
public void removeRow(Comparable rowKey) { [EOL]     if (rowKey == null) { [EOL]         throw new IllegalArgumentException("Null 'rowKey' argument."); [EOL]     } [EOL]     int index = getRowIndex(rowKey); [EOL]     if (index >= 0) { [EOL]         removeRow(index); [EOL]     } else { [EOL]         throw new UnknownKeyException("Unknown key: " + rowKey); [EOL]     } [EOL] } <line_num>: 428,439
public void removeColumn(int columnIndex) { [EOL]     Comparable columnKey = getColumnKey(columnIndex); [EOL]     removeColumn(columnKey); [EOL] } <line_num>: 449,452
public void removeColumn(Comparable columnKey) { [EOL]     if (columnKey == null) { [EOL]         throw new IllegalArgumentException("Null 'columnKey' argument."); [EOL]     } [EOL]     if (!this.columnKeys.contains(columnKey)) { [EOL]         throw new UnknownKeyException("Unknown key: " + columnKey); [EOL]     } [EOL]     Iterator iterator = this.rows.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         DefaultKeyedValues rowData = (DefaultKeyedValues) iterator.next(); [EOL]         int index = rowData.getIndex(columnKey); [EOL]         if (index >= 0) { [EOL]             rowData.removeValue(columnKey); [EOL]         } [EOL]     } [EOL]     this.columnKeys.remove(columnKey); [EOL] } <line_num>: 467,483
public void clear() { [EOL]     this.rowKeys.clear(); [EOL]     this.columnKeys.clear(); [EOL]     this.rows.clear(); [EOL] } <line_num>: 488,492
public boolean equals(Object o) { [EOL]     if (o == null) { [EOL]         return false; [EOL]     } [EOL]     if (o == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(o instanceof KeyedValues2D)) { [EOL]         return false; [EOL]     } [EOL]     KeyedValues2D kv2D = (KeyedValues2D) o; [EOL]     if (!getRowKeys().equals(kv2D.getRowKeys())) { [EOL]         return false; [EOL]     } [EOL]     if (!getColumnKeys().equals(kv2D.getColumnKeys())) { [EOL]         return false; [EOL]     } [EOL]     int rowCount = getRowCount(); [EOL]     if (rowCount != kv2D.getRowCount()) { [EOL]         return false; [EOL]     } [EOL]     int colCount = getColumnCount(); [EOL]     if (colCount != kv2D.getColumnCount()) { [EOL]         return false; [EOL]     } [EOL]     for (int r = 0; r < rowCount; r++) { [EOL]         for (int c = 0; c < colCount; c++) { [EOL]             Number v1 = getValue(r, c); [EOL]             Number v2 = kv2D.getValue(r, c); [EOL]             if (v1 == null) { [EOL]                 if (v2 != null) { [EOL]                     return false; [EOL]                 } [EOL]             } else { [EOL]                 if (!v1.equals(v2)) { [EOL]                     return false; [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 501,547
public int hashCode() { [EOL]     int result; [EOL]     result = this.rowKeys.hashCode(); [EOL]     result = 29 * result + this.columnKeys.hashCode(); [EOL]     result = 29 * result + this.rows.hashCode(); [EOL]     return result; [EOL] } <line_num>: 554,560
public Object clone() throws CloneNotSupportedException { [EOL]     DefaultKeyedValues2D clone = (DefaultKeyedValues2D) super.clone(); [EOL]     clone.columnKeys = new java.util.ArrayList(this.columnKeys); [EOL]     clone.rowKeys = new java.util.ArrayList(this.rowKeys); [EOL]     clone.rows = (List) ObjectUtilities.deepClone(this.rows); [EOL]     return clone; [EOL] } <line_num>: 570,580
