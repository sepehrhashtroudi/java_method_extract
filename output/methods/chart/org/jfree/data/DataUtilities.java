public static boolean equal(double[][] a, double[][] b) { [EOL]     if (a == null) { [EOL]         return (b == null); [EOL]     } [EOL]     if (b == null) { [EOL]         return false; [EOL]     } [EOL]     if (a.length != b.length) { [EOL]         return false; [EOL]     } [EOL]     for (int i = 0; i < a.length; i++) { [EOL]         if (!Arrays.equals(a[i], b[i])) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 72,88
public static double[][] clone(double[][] source) { [EOL]     if (source == null) { [EOL]         throw new IllegalArgumentException("Null 'source' argument."); [EOL]     } [EOL]     double[][] clone = new double[source.length][]; [EOL]     for (int i = 0; i < source.length; i++) { [EOL]         if (source[i] != null) { [EOL]             double[] row = new double[source[i].length]; [EOL]             System.arraycopy(source[i], 0, row, 0, source[i].length); [EOL]             clone[i] = row; [EOL]         } [EOL]     } [EOL]     return clone; [EOL] } <line_num>: 99,112
public static double calculateColumnTotal(Values2D data, int column) { [EOL]     if (data == null) { [EOL]         throw new IllegalArgumentException("Null 'data' argument."); [EOL]     } [EOL]     double total = 0.0; [EOL]     int rowCount = data.getRowCount(); [EOL]     for (int r = 0; r < rowCount; r++) { [EOL]         Number n = data.getValue(r, column); [EOL]         if (n != null) { [EOL]             total += n.doubleValue(); [EOL]         } [EOL]     } [EOL]     return total; [EOL] } <line_num>: 123,136
public static double calculateColumnTotal(Values2D data, int column, int[] validRows) { [EOL]     if (data == null) { [EOL]         throw new IllegalArgumentException("Null 'data' argument."); [EOL]     } [EOL]     double total = 0.0; [EOL]     int rowCount = data.getRowCount(); [EOL]     for (int v = 0; v < validRows.length; v++) { [EOL]         int row = validRows[v]; [EOL]         if (row < rowCount) { [EOL]             Number n = data.getValue(row, column); [EOL]             if (n != null) { [EOL]                 total += n.doubleValue(); [EOL]             } [EOL]         } [EOL]     } [EOL]     return total; [EOL] } <line_num>: 150,167
public static double calculateRowTotal(Values2D data, int row) { [EOL]     if (data == null) { [EOL]         throw new IllegalArgumentException("Null 'data' argument."); [EOL]     } [EOL]     double total = 0.0; [EOL]     int columnCount = data.getColumnCount(); [EOL]     for (int c = 0; c < columnCount; c++) { [EOL]         Number n = data.getValue(row, c); [EOL]         if (n != null) { [EOL]             total += n.doubleValue(); [EOL]         } [EOL]     } [EOL]     return total; [EOL] } <line_num>: 178,191
public static double calculateRowTotal(Values2D data, int row, int[] validCols) { [EOL]     if (data == null) { [EOL]         throw new IllegalArgumentException("Null 'data' argument."); [EOL]     } [EOL]     double total = 0.0; [EOL]     int colCount = data.getColumnCount(); [EOL]     for (int v = 0; v < validCols.length; v++) { [EOL]         int col = validCols[v]; [EOL]         if (col < colCount) { [EOL]             Number n = data.getValue(row, col); [EOL]             if (n != null) { [EOL]                 total += n.doubleValue(); [EOL]             } [EOL]         } [EOL]     } [EOL]     return total; [EOL] } <line_num>: 205,222
public static Number[] createNumberArray(double[] data) { [EOL]     if (data == null) { [EOL]         throw new IllegalArgumentException("Null 'data' argument."); [EOL]     } [EOL]     Number[] result = new Number[data.length]; [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         result[i] = new Double(data[i]); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 232,241
public static Number[][] createNumberArray2D(double[][] data) { [EOL]     if (data == null) { [EOL]         throw new IllegalArgumentException("Null 'data' argument."); [EOL]     } [EOL]     int l1 = data.length; [EOL]     Number[][] result = new Number[l1][]; [EOL]     for (int i = 0; i < l1; i++) { [EOL]         result[i] = createNumberArray(data[i]); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 251,261
public static KeyedValues getCumulativePercentages(KeyedValues data) { [EOL]     if (data == null) { [EOL]         throw new IllegalArgumentException("Null 'data' argument."); [EOL]     } [EOL]     DefaultKeyedValues result = new DefaultKeyedValues(); [EOL]     double total = 0.0; [EOL]     for (int i = 0; i < data.getItemCount(); i++) { [EOL]         Number v = data.getValue(i); [EOL]         if (v != null) { [EOL]             total = total + v.doubleValue(); [EOL]         } [EOL]     } [EOL]     double runningTotal = 0.0; [EOL]     for (int i = 0; i < data.getItemCount(); i++) { [EOL]         Number v = data.getValue(i); [EOL]         if (v != null) { [EOL]             runningTotal = runningTotal + v.doubleValue(); [EOL]         } [EOL]         result.addValue(data.getKey(i), new Double(runningTotal / total)); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 273,294
