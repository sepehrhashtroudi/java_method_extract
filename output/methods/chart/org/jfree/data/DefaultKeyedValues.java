public DefaultKeyedValues() { [EOL]     this.keys = new ArrayList(); [EOL]     this.values = new ArrayList(); [EOL]     this.indexMap = new HashMap(); [EOL] } <line_num>: 97,101
public int getItemCount() { [EOL]     return this.indexMap.size(); [EOL] } <line_num>: 108,110
public Number getValue(int item) { [EOL]     return (Number) this.values.get(item); [EOL] } <line_num>: 121,123
public Comparable getKey(int index) { [EOL]     return (Comparable) this.keys.get(index); [EOL] } <line_num>: 134,136
public int getIndex(Comparable key) { [EOL]     if (key == null) { [EOL]         throw new IllegalArgumentException("Null 'key' argument."); [EOL]     } [EOL]     final Integer i = (Integer) this.indexMap.get(key); [EOL]     if (i == null) { [EOL]         return -1; [EOL]     } [EOL]     return i.intValue(); [EOL] } <line_num>: 148,157
public List getKeys() { [EOL]     return (List) this.keys.clone(); [EOL] } <line_num>: 164,166
public Number getValue(Comparable key) { [EOL]     int index = getIndex(key); [EOL]     if (index < 0) { [EOL]         throw new UnknownKeyException("Key not found: " + key); [EOL]     } [EOL]     return getValue(index); [EOL] } <line_num>: 179,185
public void addValue(Comparable key, double value) { [EOL]     addValue(key, new Double(value)); [EOL] } <line_num>: 195,197
public void addValue(Comparable key, Number value) { [EOL]     setValue(key, value); [EOL] } <line_num>: 207,209
public void setValue(Comparable key, double value) { [EOL]     setValue(key, new Double(value)); [EOL] } <line_num>: 217,219
public void setValue(Comparable key, Number value) { [EOL]     if (key == null) { [EOL]         throw new IllegalArgumentException("Null 'key' argument."); [EOL]     } [EOL]     int keyIndex = getIndex(key); [EOL]     if (keyIndex >= 0) { [EOL]         this.keys.set(keyIndex, key); [EOL]         this.values.set(keyIndex, value); [EOL]     } else { [EOL]         this.keys.add(key); [EOL]         this.values.add(value); [EOL]         this.indexMap.put(key, new Integer(this.keys.size() - 1)); [EOL]     } [EOL] } <line_num>: 227,241
public void insertValue(int position, Comparable key, double value) { [EOL]     insertValue(position, key, new Double(value)); [EOL] } <line_num>: 254,256
public void insertValue(int position, Comparable key, Number value) { [EOL]     if (position < 0 || position > getItemCount()) { [EOL]         throw new IllegalArgumentException("'position' out of bounds."); [EOL]     } [EOL]     if (key == null) { [EOL]         throw new IllegalArgumentException("Null 'key' argument."); [EOL]     } [EOL]     int pos = getIndex(key); [EOL]     if (pos == position) { [EOL]         this.keys.set(pos, key); [EOL]         this.values.set(pos, value); [EOL]     } else { [EOL]         if (pos >= 0) { [EOL]             this.keys.remove(pos); [EOL]             this.values.remove(pos); [EOL]         } [EOL]         this.keys.add(position, key); [EOL]         this.values.add(position, value); [EOL]         rebuildIndex(); [EOL]     } [EOL] } <line_num>: 269,291
private void rebuildIndex() { [EOL]     this.indexMap.clear(); [EOL]     for (int i = 0; i < this.keys.size(); i++) { [EOL]         final Object key = this.keys.get(i); [EOL]         this.indexMap.put(key, new Integer(i)); [EOL]     } [EOL] } <line_num>: 297,303
public void removeValue(int index) { [EOL]     this.keys.remove(index); [EOL]     this.values.remove(index); [EOL]     rebuildIndex(); [EOL] } <line_num>: 314,318
public void removeValue(Comparable key) { [EOL]     int index = getIndex(key); [EOL]     if (index < 0) { [EOL]         throw new UnknownKeyException("The key (" + key + ") is not recognised."); [EOL]     } [EOL]     removeValue(index); [EOL] } <line_num>: 329,336
public void clear() { [EOL]     this.keys.clear(); [EOL]     this.values.clear(); [EOL]     this.indexMap.clear(); [EOL] } <line_num>: 343,347
public void sortByKeys(SortOrder order) { [EOL]     final int size = this.keys.size(); [EOL]     final DefaultKeyedValue[] data = new DefaultKeyedValue[size]; [EOL]     for (int i = 0; i < size; i++) { [EOL]         data[i] = new DefaultKeyedValue((Comparable) this.keys.get(i), (Number) this.values.get(i)); [EOL]     } [EOL]     Comparator comparator = new KeyedValueComparator(KeyedValueComparatorType.BY_KEY, order); [EOL]     Arrays.sort(data, comparator); [EOL]     clear(); [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         final DefaultKeyedValue value = data[i]; [EOL]         addValue(value.getKey(), value.getValue()); [EOL]     } [EOL] } <line_num>: 354,372
public void sortByValues(SortOrder order) { [EOL]     final int size = this.keys.size(); [EOL]     final DefaultKeyedValue[] data = new DefaultKeyedValue[size]; [EOL]     for (int i = 0; i < size; i++) { [EOL]         data[i] = new DefaultKeyedValue((Comparable) this.keys.get(i), (Number) this.values.get(i)); [EOL]     } [EOL]     Comparator comparator = new KeyedValueComparator(KeyedValueComparatorType.BY_VALUE, order); [EOL]     Arrays.sort(data, comparator); [EOL]     clear(); [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         final DefaultKeyedValue value = data[i]; [EOL]         addValue(value.getKey(), value.getValue()); [EOL]     } [EOL] } <line_num>: 381,398
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof KeyedValues)) { [EOL]         return false; [EOL]     } [EOL]     KeyedValues that = (KeyedValues) obj; [EOL]     int count = getItemCount(); [EOL]     if (count != that.getItemCount()) { [EOL]         return false; [EOL]     } [EOL]     for (int i = 0; i < count; i++) { [EOL]         Comparable k1 = getKey(i); [EOL]         Comparable k2 = that.getKey(i); [EOL]         if (!k1.equals(k2)) { [EOL]             return false; [EOL]         } [EOL]         Number v1 = getValue(i); [EOL]         Number v2 = that.getValue(i); [EOL]         if (v1 == null) { [EOL]             if (v2 != null) { [EOL]                 return false; [EOL]             } [EOL]         } else { [EOL]             if (!v1.equals(v2)) { [EOL]                 return false; [EOL]             } [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 407,442
public int hashCode() { [EOL]     return (this.keys != null ? this.keys.hashCode() : 0); [EOL] } <line_num>: 449,451
public Object clone() throws CloneNotSupportedException { [EOL]     DefaultKeyedValues clone = (DefaultKeyedValues) super.clone(); [EOL]     clone.keys = (ArrayList) this.keys.clone(); [EOL]     clone.values = (ArrayList) this.values.clone(); [EOL]     clone.indexMap = (HashMap) this.indexMap.clone(); [EOL]     return clone; [EOL] } <line_num>: 461,467
