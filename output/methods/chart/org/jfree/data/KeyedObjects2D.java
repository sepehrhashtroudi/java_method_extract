public KeyedObjects2D() { [EOL]     this.rowKeys = new java.util.ArrayList(); [EOL]     this.columnKeys = new java.util.ArrayList(); [EOL]     this.rows = new java.util.ArrayList(); [EOL] } <line_num>: 73,77
public int getRowCount() { [EOL]     return this.rowKeys.size(); [EOL] } <line_num>: 86,88
public int getColumnCount() { [EOL]     return this.columnKeys.size(); [EOL] } <line_num>: 97,99
public Object getObject(int row, int column) { [EOL]     Object result = null; [EOL]     KeyedObjects rowData = (KeyedObjects) this.rows.get(row); [EOL]     if (rowData != null) { [EOL]         Comparable columnKey = (Comparable) this.columnKeys.get(column); [EOL]         if (columnKey != null) { [EOL]             int index = rowData.getIndex(columnKey); [EOL]             if (index >= 0) { [EOL]                 result = rowData.getObject(columnKey); [EOL]             } [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 111,124
public Comparable getRowKey(int row) { [EOL]     return (Comparable) this.rowKeys.get(row); [EOL] } <line_num>: 135,137
public int getRowIndex(Comparable key) { [EOL]     if (key == null) { [EOL]         throw new IllegalArgumentException("Null 'key' argument."); [EOL]     } [EOL]     return this.rowKeys.indexOf(key); [EOL] } <line_num>: 149,154
public List getRowKeys() { [EOL]     return Collections.unmodifiableList(this.rowKeys); [EOL] } <line_num>: 163,165
public Comparable getColumnKey(int column) { [EOL]     return (Comparable) this.columnKeys.get(column); [EOL] } <line_num>: 176,178
public int getColumnIndex(Comparable key) { [EOL]     if (key == null) { [EOL]         throw new IllegalArgumentException("Null 'key' argument."); [EOL]     } [EOL]     return this.columnKeys.indexOf(key); [EOL] } <line_num>: 190,195
public List getColumnKeys() { [EOL]     return Collections.unmodifiableList(this.columnKeys); [EOL] } <line_num>: 204,206
public Object getObject(Comparable rowKey, Comparable columnKey) { [EOL]     if (rowKey == null) { [EOL]         throw new IllegalArgumentException("Null 'rowKey' argument."); [EOL]     } [EOL]     if (columnKey == null) { [EOL]         throw new IllegalArgumentException("Null 'columnKey' argument."); [EOL]     } [EOL]     int row = this.rowKeys.indexOf(rowKey); [EOL]     if (row < 0) { [EOL]         throw new UnknownKeyException("Row key (" + rowKey + ") not recognised."); [EOL]     } [EOL]     int column = this.columnKeys.indexOf(columnKey); [EOL]     if (column < 0) { [EOL]         throw new UnknownKeyException("Column key (" + columnKey + ") not recognised."); [EOL]     } [EOL]     KeyedObjects rowData = (KeyedObjects) this.rows.get(row); [EOL]     int index = rowData.getIndex(columnKey); [EOL]     if (index >= 0) { [EOL]         return rowData.getObject(index); [EOL]     } else { [EOL]         return null; [EOL]     } [EOL] } <line_num>: 221,246
public void addObject(Object object, Comparable rowKey, Comparable columnKey) { [EOL]     setObject(object, rowKey, columnKey); [EOL] } <line_num>: 255,258
public void setObject(Object object, Comparable rowKey, Comparable columnKey) { [EOL]     if (rowKey == null) { [EOL]         throw new IllegalArgumentException("Null 'rowKey' argument."); [EOL]     } [EOL]     if (columnKey == null) { [EOL]         throw new IllegalArgumentException("Null 'columnKey' argument."); [EOL]     } [EOL]     KeyedObjects row; [EOL]     int rowIndex = this.rowKeys.indexOf(rowKey); [EOL]     if (rowIndex >= 0) { [EOL]         row = (KeyedObjects) this.rows.get(rowIndex); [EOL]     } else { [EOL]         this.rowKeys.add(rowKey); [EOL]         row = new KeyedObjects(); [EOL]         this.rows.add(row); [EOL]     } [EOL]     row.setObject(columnKey, object); [EOL]     int columnIndex = this.columnKeys.indexOf(columnKey); [EOL]     if (columnIndex < 0) { [EOL]         this.columnKeys.add(columnKey); [EOL]     } [EOL] } <line_num>: 267,292
public void removeObject(Comparable rowKey, Comparable columnKey) { [EOL]     int rowIndex = getRowIndex(rowKey); [EOL]     if (rowIndex < 0) { [EOL]         throw new UnknownKeyException("Row key (" + rowKey + ") not recognised."); [EOL]     } [EOL]     int columnIndex = getColumnIndex(columnKey); [EOL]     if (columnIndex < 0) { [EOL]         throw new UnknownKeyException("Column key (" + columnKey + ") not recognised."); [EOL]     } [EOL]     setObject(null, rowKey, columnKey); [EOL]     boolean allNull = true; [EOL]     KeyedObjects row = (KeyedObjects) this.rows.get(rowIndex); [EOL]     for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) { [EOL]         if (row.getObject(item) != null) { [EOL]             allNull = false; [EOL]             break; [EOL]         } [EOL]     } [EOL]     if (allNull) { [EOL]         this.rowKeys.remove(rowIndex); [EOL]         this.rows.remove(rowIndex); [EOL]     } [EOL]     allNull = true; [EOL]     for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) { [EOL]         row = (KeyedObjects) this.rows.get(item); [EOL]         int colIndex = row.getIndex(columnKey); [EOL]         if (colIndex >= 0 && row.getObject(colIndex) != null) { [EOL]             allNull = false; [EOL]             break; [EOL]         } [EOL]     } [EOL]     if (allNull) { [EOL]         for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) { [EOL]             row = (KeyedObjects) this.rows.get(item); [EOL]             int colIndex = row.getIndex(columnKey); [EOL]             if (colIndex >= 0) { [EOL]                 row.removeValue(colIndex); [EOL]             } [EOL]         } [EOL]         this.columnKeys.remove(columnKey); [EOL]     } [EOL] } <line_num>: 304,358
public void removeRow(int rowIndex) { [EOL]     this.rowKeys.remove(rowIndex); [EOL]     this.rows.remove(rowIndex); [EOL] } <line_num>: 367,370
public void removeRow(Comparable rowKey) { [EOL]     int index = getRowIndex(rowKey); [EOL]     if (index < 0) { [EOL]         throw new UnknownKeyException("Row key (" + rowKey + ") not recognised."); [EOL]     } [EOL]     removeRow(index); [EOL] } <line_num>: 381,388
public void removeColumn(int columnIndex) { [EOL]     Comparable columnKey = getColumnKey(columnIndex); [EOL]     removeColumn(columnKey); [EOL] } <line_num>: 397,400
public void removeColumn(Comparable columnKey) { [EOL]     int index = getColumnIndex(columnKey); [EOL]     if (index < 0) { [EOL]         throw new UnknownKeyException("Column key (" + columnKey + ") not recognised."); [EOL]     } [EOL]     Iterator iterator = this.rows.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         KeyedObjects rowData = (KeyedObjects) iterator.next(); [EOL]         int i = rowData.getIndex(columnKey); [EOL]         if (i >= 0) { [EOL]             rowData.removeValue(i); [EOL]         } [EOL]     } [EOL]     this.columnKeys.remove(columnKey); [EOL] } <line_num>: 411,426
public void clear() { [EOL]     this.rowKeys.clear(); [EOL]     this.columnKeys.clear(); [EOL]     this.rows.clear(); [EOL] } <line_num>: 433,437
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof KeyedObjects2D)) { [EOL]         return false; [EOL]     } [EOL]     KeyedObjects2D that = (KeyedObjects2D) obj; [EOL]     if (!getRowKeys().equals(that.getRowKeys())) { [EOL]         return false; [EOL]     } [EOL]     if (!getColumnKeys().equals(that.getColumnKeys())) { [EOL]         return false; [EOL]     } [EOL]     int rowCount = getRowCount(); [EOL]     if (rowCount != that.getRowCount()) { [EOL]         return false; [EOL]     } [EOL]     int colCount = getColumnCount(); [EOL]     if (colCount != that.getColumnCount()) { [EOL]         return false; [EOL]     } [EOL]     for (int r = 0; r < rowCount; r++) { [EOL]         for (int c = 0; c < colCount; c++) { [EOL]             Object v1 = getObject(r, c); [EOL]             Object v2 = that.getObject(r, c); [EOL]             if (v1 == null) { [EOL]                 if (v2 != null) { [EOL]                     return false; [EOL]                 } [EOL]             } else { [EOL]                 if (!v1.equals(v2)) { [EOL]                     return false; [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 446,486
public int hashCode() { [EOL]     int result; [EOL]     result = this.rowKeys.hashCode(); [EOL]     result = 29 * result + this.columnKeys.hashCode(); [EOL]     result = 29 * result + this.rows.hashCode(); [EOL]     return result; [EOL] } <line_num>: 493,499
public Object clone() throws CloneNotSupportedException { [EOL]     KeyedObjects2D clone = (KeyedObjects2D) super.clone(); [EOL]     clone.columnKeys = new java.util.ArrayList(this.columnKeys); [EOL]     clone.rowKeys = new java.util.ArrayList(this.rowKeys); [EOL]     clone.rows = new java.util.ArrayList(this.rows.size()); [EOL]     Iterator iterator = this.rows.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         KeyedObjects row = (KeyedObjects) iterator.next(); [EOL]         clone.rows.add(row.clone()); [EOL]     } [EOL]     return clone; [EOL] } <line_num>: 509,520
