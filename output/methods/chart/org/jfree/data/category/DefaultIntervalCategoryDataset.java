public DefaultIntervalCategoryDataset(double[][] starts, double[][] ends) { [EOL]     this(DataUtilities.createNumberArray2D(starts), DataUtilities.createNumberArray2D(ends)); [EOL] } <line_num>: 92,95
public DefaultIntervalCategoryDataset(Number[][] starts, Number[][] ends) { [EOL]     this(null, null, starts, ends); [EOL] } <line_num>: 108,110
public DefaultIntervalCategoryDataset(String[] seriesNames, Number[][] starts, Number[][] ends) { [EOL]     this(seriesNames, null, starts, ends); [EOL] } <line_num>: 124,130
public DefaultIntervalCategoryDataset(Comparable[] seriesKeys, Comparable[] categoryKeys, Number[][] starts, Number[][] ends) { [EOL]     this.startData = starts; [EOL]     this.endData = ends; [EOL]     if (starts != null && ends != null) { [EOL]         String baseName = "org.jfree.data.resources.DataPackageResources"; [EOL]         ResourceBundle resources = ResourceBundleWrapper.getBundle(baseName); [EOL]         int seriesCount = starts.length; [EOL]         if (seriesCount != ends.length) { [EOL]             String errMsg = "DefaultIntervalCategoryDataset: the number " + "of series in the start value dataset does " + "not match the number of series in the end " + "value dataset."; [EOL]             throw new IllegalArgumentException(errMsg); [EOL]         } [EOL]         if (seriesCount > 0) { [EOL]             if (seriesKeys != null) { [EOL]                 if (seriesKeys.length != seriesCount) { [EOL]                     throw new IllegalArgumentException("The number of series keys does not " + "match the number of series in the data."); [EOL]                 } [EOL]                 this.seriesKeys = seriesKeys; [EOL]             } else { [EOL]                 String prefix = resources.getString("series.default-prefix") + " "; [EOL]                 this.seriesKeys = generateKeys(seriesCount, prefix); [EOL]             } [EOL]             int categoryCount = starts[0].length; [EOL]             if (categoryCount != ends[0].length) { [EOL]                 String errMsg = "DefaultIntervalCategoryDataset: the " + "number of categories in the start value " + "dataset does not match the number of " + "categories in the end value dataset."; [EOL]                 throw new IllegalArgumentException(errMsg); [EOL]             } [EOL]             if (categoryKeys != null) { [EOL]                 if (categoryKeys.length != categoryCount) { [EOL]                     throw new IllegalArgumentException("The number of category keys does not match " + "the number of categories in the data."); [EOL]                 } [EOL]                 this.categoryKeys = categoryKeys; [EOL]             } else { [EOL]                 String prefix = resources.getString("categories.default-prefix") + " "; [EOL]                 this.categoryKeys = generateKeys(categoryCount, prefix); [EOL]             } [EOL]         } else { [EOL]             this.seriesKeys = new Comparable[0]; [EOL]             this.categoryKeys = new Comparable[0]; [EOL]         } [EOL]     } [EOL] } <line_num>: 144,215
public int getSeriesCount() { [EOL]     int result = 0; [EOL]     if (this.startData != null) { [EOL]         result = this.startData.length; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 225,231
public int getSeriesIndex(Comparable seriesKey) { [EOL]     int result = -1; [EOL]     for (int i = 0; i < this.seriesKeys.length; i++) { [EOL]         if (seriesKey.equals(this.seriesKeys[i])) { [EOL]             result = i; [EOL]             break; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 243,252
public Comparable getSeriesKey(int series) { [EOL]     if ((series >= getSeriesCount()) || (series < 0)) { [EOL]         throw new IllegalArgumentException("No such series : " + series); [EOL]     } [EOL]     return this.seriesKeys[series]; [EOL] } <line_num>: 263,268
public void setSeriesKeys(Comparable[] seriesKeys) { [EOL]     if (seriesKeys == null) { [EOL]         throw new IllegalArgumentException("Null 'seriesKeys' argument."); [EOL]     } [EOL]     if (seriesKeys.length != getSeriesCount()) { [EOL]         throw new IllegalArgumentException("The number of series keys does not match the data."); [EOL]     } [EOL]     this.seriesKeys = seriesKeys; [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 279,290
public int getCategoryCount() { [EOL]     int result = 0; [EOL]     if (this.startData != null) { [EOL]         if (getSeriesCount() > 0) { [EOL]             result = this.startData[0].length; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 299,307
public List getColumnKeys() { [EOL]     if (this.categoryKeys == null) { [EOL]         return new ArrayList(); [EOL]     } else { [EOL]         return Collections.unmodifiableList(Arrays.asList(this.categoryKeys)); [EOL]     } [EOL] } <line_num>: 317,327
public void setCategoryKeys(Comparable[] categoryKeys) { [EOL]     if (categoryKeys == null) { [EOL]         throw new IllegalArgumentException("Null 'categoryKeys' argument."); [EOL]     } [EOL]     if (categoryKeys.length != getCategoryCount()) { [EOL]         throw new IllegalArgumentException("The number of categories does not match the data."); [EOL]     } [EOL]     for (int i = 0; i < categoryKeys.length; i++) { [EOL]         if (categoryKeys[i] == null) { [EOL]             throw new IllegalArgumentException("DefaultIntervalCategoryDataset.setCategoryKeys(): " + "null category not permitted."); [EOL]         } [EOL]     } [EOL]     this.categoryKeys = categoryKeys; [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 338,356
public Number getValue(Comparable series, Comparable category) { [EOL]     int seriesIndex = getSeriesIndex(series); [EOL]     if (seriesIndex < 0) { [EOL]         throw new UnknownKeyException("Unknown 'series' key."); [EOL]     } [EOL]     int itemIndex = getColumnIndex(category); [EOL]     if (itemIndex < 0) { [EOL]         throw new UnknownKeyException("Unknown 'category' key."); [EOL]     } [EOL]     return getValue(seriesIndex, itemIndex); [EOL] } <line_num>: 371,381
public Number getValue(int series, int category) { [EOL]     return getEndValue(series, category); [EOL] } <line_num>: 396,398
public Number getStartValue(Comparable series, Comparable category) { [EOL]     int seriesIndex = getSeriesIndex(series); [EOL]     if (seriesIndex < 0) { [EOL]         throw new UnknownKeyException("Unknown 'series' key."); [EOL]     } [EOL]     int itemIndex = getColumnIndex(category); [EOL]     if (itemIndex < 0) { [EOL]         throw new UnknownKeyException("Unknown 'category' key."); [EOL]     } [EOL]     return getStartValue(seriesIndex, itemIndex); [EOL] } <line_num>: 411,421
public Number getStartValue(int series, int category) { [EOL]     if ((series < 0) || (series >= getSeriesCount())) { [EOL]         throw new IllegalArgumentException("DefaultIntervalCategoryDataset.getValue(): " + "series index out of range."); [EOL]     } [EOL]     if ((category < 0) || (category >= getCategoryCount())) { [EOL]         throw new IllegalArgumentException("DefaultIntervalCategoryDataset.getValue(): " + "category index out of range."); [EOL]     } [EOL]     return this.startData[series][category]; [EOL] } <line_num>: 434,452
public Number getEndValue(Comparable series, Comparable category) { [EOL]     int seriesIndex = getSeriesIndex(series); [EOL]     if (seriesIndex < 0) { [EOL]         throw new UnknownKeyException("Unknown 'series' key."); [EOL]     } [EOL]     int itemIndex = getColumnIndex(category); [EOL]     if (itemIndex < 0) { [EOL]         throw new UnknownKeyException("Unknown 'category' key."); [EOL]     } [EOL]     return getEndValue(seriesIndex, itemIndex); [EOL] } <line_num>: 464,474
public Number getEndValue(int series, int category) { [EOL]     if ((series < 0) || (series >= getSeriesCount())) { [EOL]         throw new IllegalArgumentException("DefaultIntervalCategoryDataset.getValue(): " + "series index out of range."); [EOL]     } [EOL]     if ((category < 0) || (category >= getCategoryCount())) { [EOL]         throw new IllegalArgumentException("DefaultIntervalCategoryDataset.getValue(): " + "category index out of range."); [EOL]     } [EOL]     return this.endData[series][category]; [EOL] } <line_num>: 486,500
public void setStartValue(int series, Comparable category, Number value) { [EOL]     if ((series < 0) || (series > getSeriesCount() - 1)) { [EOL]         throw new IllegalArgumentException("DefaultIntervalCategoryDataset.setValue: " + "series outside valid range."); [EOL]     } [EOL]     int categoryIndex = getCategoryIndex(category); [EOL]     if (categoryIndex < 0) { [EOL]         throw new IllegalArgumentException("DefaultIntervalCategoryDataset.setValue: " + "unrecognised category."); [EOL]     } [EOL]     this.startData[series][categoryIndex] = value; [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 512,534
public void setEndValue(int series, Comparable category, Number value) { [EOL]     if ((series < 0) || (series > getSeriesCount() - 1)) { [EOL]         throw new IllegalArgumentException("DefaultIntervalCategoryDataset.setValue: " + "series outside valid range."); [EOL]     } [EOL]     int categoryIndex = getCategoryIndex(category); [EOL]     if (categoryIndex < 0) { [EOL]         throw new IllegalArgumentException("DefaultIntervalCategoryDataset.setValue: " + "unrecognised category."); [EOL]     } [EOL]     this.endData[series][categoryIndex] = value; [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 546,568
public int getCategoryIndex(Comparable category) { [EOL]     int result = -1; [EOL]     for (int i = 0; i < this.categoryKeys.length; i++) { [EOL]         if (category.equals(this.categoryKeys[i])) { [EOL]             result = i; [EOL]             break; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 579,588
private Comparable[] generateKeys(int count, String prefix) { [EOL]     Comparable[] result = new Comparable[count]; [EOL]     String name; [EOL]     for (int i = 0; i < count; i++) { [EOL]         name = prefix + (i + 1); [EOL]         result[i] = name; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 599,607
public Comparable getColumnKey(int column) { [EOL]     return this.categoryKeys[column]; [EOL] } <line_num>: 618,620
public int getColumnIndex(Comparable columnKey) { [EOL]     if (columnKey == null) { [EOL]         throw new IllegalArgumentException("Null 'columnKey' argument."); [EOL]     } [EOL]     return getCategoryIndex(columnKey); [EOL] } <line_num>: 631,636
public int getRowIndex(Comparable rowKey) { [EOL]     return getSeriesIndex(rowKey); [EOL] } <line_num>: 647,649
public List getRowKeys() { [EOL]     if (this.seriesKeys == null) { [EOL]         return new java.util.ArrayList(); [EOL]     } else { [EOL]         return Collections.unmodifiableList(Arrays.asList(this.seriesKeys)); [EOL]     } [EOL] } <line_num>: 659,668
public Comparable getRowKey(int row) { [EOL]     if ((row >= getRowCount()) || (row < 0)) { [EOL]         throw new IllegalArgumentException("The 'row' argument is out of bounds."); [EOL]     } [EOL]     return this.seriesKeys[row]; [EOL] } <line_num>: 679,685
public int getColumnCount() { [EOL]     return this.categoryKeys.length; [EOL] } <line_num>: 696,698
public int getRowCount() { [EOL]     return this.seriesKeys.length; [EOL] } <line_num>: 708,710
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof DefaultIntervalCategoryDataset)) { [EOL]         return false; [EOL]     } [EOL]     DefaultIntervalCategoryDataset that = (DefaultIntervalCategoryDataset) obj; [EOL]     if (!Arrays.equals(this.seriesKeys, that.seriesKeys)) { [EOL]         return false; [EOL]     } [EOL]     if (!Arrays.equals(this.categoryKeys, that.categoryKeys)) { [EOL]         return false; [EOL]     } [EOL]     if (!equal(this.startData, that.startData)) { [EOL]         return false; [EOL]     } [EOL]     if (!equal(this.endData, that.endData)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 719,742
public Object clone() throws CloneNotSupportedException { [EOL]     DefaultIntervalCategoryDataset clone = (DefaultIntervalCategoryDataset) super.clone(); [EOL]     clone.categoryKeys = (Comparable[]) this.categoryKeys.clone(); [EOL]     clone.seriesKeys = (Comparable[]) this.seriesKeys.clone(); [EOL]     clone.startData = clone(this.startData); [EOL]     clone.endData = clone(this.endData); [EOL]     return clone; [EOL] } <line_num>: 752,760
private static boolean equal(Number[][] array1, Number[][] array2) { [EOL]     if (array1 == null) { [EOL]         return (array2 == null); [EOL]     } [EOL]     if (array2 == null) { [EOL]         return false; [EOL]     } [EOL]     if (array1.length != array2.length) { [EOL]         return false; [EOL]     } [EOL]     for (int i = 0; i < array1.length; i++) { [EOL]         if (!Arrays.equals(array1[i], array2[i])) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 770,786
private static Number[][] clone(Number[][] array) { [EOL]     if (array == null) { [EOL]         throw new IllegalArgumentException("Null 'array' argument."); [EOL]     } [EOL]     Number[][] result = new Number[array.length][]; [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         Number[] child = array[i]; [EOL]         Number[] copychild = new Number[child.length]; [EOL]         System.arraycopy(child, 0, copychild, 0, child.length); [EOL]         result[i] = copychild; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 795,807
