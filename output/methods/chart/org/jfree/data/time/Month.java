public Month() { [EOL]     this(new Date()); [EOL] } <line_num>: 99,101
public Month(int month, int year) { [EOL]     if ((month < 1) || (month > 12)) { [EOL]         throw new IllegalArgumentException("Month outside valid range."); [EOL]     } [EOL]     this.month = month; [EOL]     this.year = year; [EOL]     peg(Calendar.getInstance()); [EOL] } <line_num>: 109,116
public Month(int month, Year year) { [EOL]     if ((month < 1) || (month > 12)) { [EOL]         throw new IllegalArgumentException("Month outside valid range."); [EOL]     } [EOL]     this.month = month; [EOL]     this.year = year.getYear(); [EOL]     peg(Calendar.getInstance()); [EOL] } <line_num>: 124,131
public Month(Date time) { [EOL]     this(time, TimeZone.getDefault()); [EOL] } <line_num>: 141,143
public Month(Date time, TimeZone zone) { [EOL]     this(time, zone, Locale.getDefault()); [EOL] } <line_num>: 156,158
public Month(Date time, TimeZone zone, Locale locale) { [EOL]     Calendar calendar = Calendar.getInstance(zone, locale); [EOL]     calendar.setTime(time); [EOL]     this.month = calendar.get(Calendar.MONTH) + 1; [EOL]     this.year = calendar.get(Calendar.YEAR); [EOL]     peg(calendar); [EOL] } <line_num>: 170,176
public Year getYear() { [EOL]     return new Year(this.year); [EOL] } <line_num>: 183,185
public int getYearValue() { [EOL]     return this.year; [EOL] } <line_num>: 192,194
public int getMonth() { [EOL]     return this.month; [EOL] } <line_num>: 201,203
public long getFirstMillisecond() { [EOL]     return this.firstMillisecond; [EOL] } <line_num>: 215,217
public long getLastMillisecond() { [EOL]     return this.lastMillisecond; [EOL] } <line_num>: 229,231
public void peg(Calendar calendar) { [EOL]     this.firstMillisecond = getFirstMillisecond(calendar); [EOL]     this.lastMillisecond = getLastMillisecond(calendar); [EOL] } <line_num>: 241,244
public RegularTimePeriod previous() { [EOL]     Month result; [EOL]     if (this.month != MonthConstants.JANUARY) { [EOL]         result = new Month(this.month - 1, this.year); [EOL]     } else { [EOL]         if (this.year > 1900) { [EOL]             result = new Month(MonthConstants.DECEMBER, this.year - 1); [EOL]         } else { [EOL]             result = null; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 254,268
public RegularTimePeriod next() { [EOL]     Month result; [EOL]     if (this.month != MonthConstants.DECEMBER) { [EOL]         result = new Month(this.month + 1, this.year); [EOL]     } else { [EOL]         if (this.year < 9999) { [EOL]             result = new Month(MonthConstants.JANUARY, this.year + 1); [EOL]         } else { [EOL]             result = null; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 278,292
public long getSerialIndex() { [EOL]     return this.year * 12L + this.month; [EOL] } <line_num>: 299,301
public String toString() { [EOL]     return SerialDate.monthCodeToString(this.month) + " " + this.year; [EOL] } <line_num>: 310,312
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof Month)) { [EOL]         return false; [EOL]     } [EOL]     Month that = (Month) obj; [EOL]     if (this.month != that.month) { [EOL]         return false; [EOL]     } [EOL]     if (this.year != that.year) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 324,339
public int hashCode() { [EOL]     int result = 17; [EOL]     result = 37 * result + this.month; [EOL]     result = 37 * result + this.year; [EOL]     return result; [EOL] } <line_num>: 350,355
public int compareTo(Object o1) { [EOL]     int result; [EOL]     if (o1 instanceof Month) { [EOL]         Month m = (Month) o1; [EOL]         result = this.year - m.getYearValue(); [EOL]         if (result == 0) { [EOL]             result = this.month - m.getMonth(); [EOL]         } [EOL]     } else if (o1 instanceof RegularTimePeriod) { [EOL]         result = 0; [EOL]     } else { [EOL]         result = 1; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 366,396
public long getFirstMillisecond(Calendar calendar) { [EOL]     calendar.set(this.year, this.month - 1, 1, 0, 0, 0); [EOL]     calendar.set(Calendar.MILLISECOND, 0); [EOL]     return calendar.getTime().getTime(); [EOL] } <line_num>: 409,415
public long getLastMillisecond(Calendar calendar) { [EOL]     int eom = SerialDate.lastDayOfMonth(this.month, this.year); [EOL]     calendar.set(this.year, this.month - 1, eom, 23, 59, 59); [EOL]     calendar.set(Calendar.MILLISECOND, 999); [EOL]     return calendar.getTime().getTime(); [EOL] } <line_num>: 428,435
public static Month parseMonth(String s) { [EOL]     Month result = null; [EOL]     if (s == null) { [EOL]         return result; [EOL]     } [EOL]     s = s.trim(); [EOL]     int i = Month.findSeparator(s); [EOL]     String s1, s2; [EOL]     boolean yearIsFirst; [EOL]     if (i == -1) { [EOL]         yearIsFirst = true; [EOL]         s1 = s.substring(0, 5); [EOL]         s2 = s.substring(5); [EOL]     } else { [EOL]         s1 = s.substring(0, i).trim(); [EOL]         s2 = s.substring(i + 1, s.length()).trim(); [EOL]         Year y1 = Month.evaluateAsYear(s1); [EOL]         if (y1 == null) { [EOL]             yearIsFirst = false; [EOL]         } else { [EOL]             Year y2 = Month.evaluateAsYear(s2); [EOL]             if (y2 == null) { [EOL]                 yearIsFirst = true; [EOL]             } else { [EOL]                 yearIsFirst = (s1.length() > s2.length()); [EOL]             } [EOL]         } [EOL]     } [EOL]     Year year; [EOL]     int month; [EOL]     if (yearIsFirst) { [EOL]         year = Month.evaluateAsYear(s1); [EOL]         month = SerialDate.stringToMonthCode(s2); [EOL]     } else { [EOL]         year = Month.evaluateAsYear(s2); [EOL]         month = SerialDate.stringToMonthCode(s1); [EOL]     } [EOL]     if (month == -1) { [EOL]         throw new TimePeriodFormatException("Can't evaluate the month."); [EOL]     } [EOL]     if (year == null) { [EOL]         throw new TimePeriodFormatException("Can't evaluate the year."); [EOL]     } [EOL]     result = new Month(month, year); [EOL]     return result; [EOL] } <line_num>: 447,500
private static int findSeparator(String s) { [EOL]     int result = s.indexOf('-'); [EOL]     if (result == -1) { [EOL]         result = s.indexOf(','); [EOL]     } [EOL]     if (result == -1) { [EOL]         result = s.indexOf(' '); [EOL]     } [EOL]     if (result == -1) { [EOL]         result = s.indexOf('.'); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 511,523
private static Year evaluateAsYear(String s) { [EOL]     Year result = null; [EOL]     try { [EOL]         result = Year.parseYear(s); [EOL]     } catch (TimePeriodFormatException e) { [EOL]     } [EOL]     return result; [EOL] } <line_num>: 534,543
