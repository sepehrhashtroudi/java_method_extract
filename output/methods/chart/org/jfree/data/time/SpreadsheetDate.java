public SpreadsheetDate(final int day, final int month, final int year) { [EOL]     if ((year >= 1900) && (year <= 9999)) { [EOL]         this.year = year; [EOL]     } else { [EOL]         throw new IllegalArgumentException("The 'year' argument must be in range 1900 to 9999."); [EOL]     } [EOL]     if ((month >= MonthConstants.JANUARY) && (month <= MonthConstants.DECEMBER)) { [EOL]         this.month = month; [EOL]     } else { [EOL]         throw new IllegalArgumentException("The 'month' argument must be in the range 1 to 12."); [EOL]     } [EOL]     if ((day >= 1) && (day <= SerialDate.lastDayOfMonth(month, year))) { [EOL]         this.day = day; [EOL]     } else { [EOL]         throw new IllegalArgumentException("Invalid 'day' argument."); [EOL]     } [EOL]     this.serial = calcSerial(day, month, year); [EOL] } <line_num>: 107,138
public SpreadsheetDate(final int serial) { [EOL]     if ((serial >= SERIAL_LOWER_BOUND) && (serial <= SERIAL_UPPER_BOUND)) { [EOL]         this.serial = serial; [EOL]     } else { [EOL]         throw new IllegalArgumentException("SpreadsheetDate: Serial must be in range 2 to 2958465."); [EOL]     } [EOL]     final int days = this.serial - SERIAL_LOWER_BOUND; [EOL]     final int overestimatedYYYY = 1900 + (days / 365); [EOL]     final int leaps = SerialDate.leapYearCount(overestimatedYYYY); [EOL]     final int nonleapdays = days - leaps; [EOL]     int underestimatedYYYY = 1900 + (nonleapdays / 365); [EOL]     if (underestimatedYYYY == overestimatedYYYY) { [EOL]         this.year = underestimatedYYYY; [EOL]     } else { [EOL]         int ss1 = calcSerial(1, 1, underestimatedYYYY); [EOL]         while (ss1 <= this.serial) { [EOL]             underestimatedYYYY = underestimatedYYYY + 1; [EOL]             ss1 = calcSerial(1, 1, underestimatedYYYY); [EOL]         } [EOL]         this.year = underestimatedYYYY - 1; [EOL]     } [EOL]     final int ss2 = calcSerial(1, 1, this.year); [EOL]     int[] daysToEndOfPrecedingMonth = AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH; [EOL]     if (isLeapYear(this.year)) { [EOL]         daysToEndOfPrecedingMonth = LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH; [EOL]     } [EOL]     int mm = 1; [EOL]     int sss = ss2 + daysToEndOfPrecedingMonth[mm] - 1; [EOL]     while (sss < this.serial) { [EOL]         mm = mm + 1; [EOL]         sss = ss2 + daysToEndOfPrecedingMonth[mm] - 1; [EOL]     } [EOL]     this.month = mm - 1; [EOL]     this.day = this.serial - ss2 - daysToEndOfPrecedingMonth[this.month] + 1; [EOL] } <line_num>: 146,201
public int toSerial() { [EOL]     return this.serial; [EOL] } <line_num>: 210,212
public Date toDate() { [EOL]     final Calendar calendar = Calendar.getInstance(); [EOL]     calendar.set(getYYYY(), getMonth() - 1, getDayOfMonth(), 0, 0, 0); [EOL]     return calendar.getTime(); [EOL] } <line_num>: 219,223
public int getYYYY() { [EOL]     return this.year; [EOL] } <line_num>: 230,232
public int getMonth() { [EOL]     return this.month; [EOL] } <line_num>: 239,241
public int getDayOfMonth() { [EOL]     return this.day; [EOL] } <line_num>: 248,250
public int getDayOfWeek() { [EOL]     return (this.serial + 6) % 7 + 1; [EOL] } <line_num>: 262,264
public boolean equals(final Object object) { [EOL]     if (object instanceof SerialDate) { [EOL]         final SerialDate s = (SerialDate) object; [EOL]         return (s.toSerial() == this.toSerial()); [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 277,287
public int hashCode() { [EOL]     return toSerial(); [EOL] } <line_num>: 294,296
public int compare(final SerialDate other) { [EOL]     return this.serial - other.toSerial(); [EOL] } <line_num>: 307,309
public int compareTo(final Object other) { [EOL]     return compare((SerialDate) other); [EOL] } <line_num>: 319,321
public boolean isOn(final SerialDate other) { [EOL]     return (this.serial == other.toSerial()); [EOL] } <line_num>: 332,334
public boolean isBefore(final SerialDate other) { [EOL]     return (this.serial < other.toSerial()); [EOL] } <line_num>: 345,347
public boolean isOnOrBefore(final SerialDate other) { [EOL]     return (this.serial <= other.toSerial()); [EOL] } <line_num>: 358,360
public boolean isAfter(final SerialDate other) { [EOL]     return (this.serial > other.toSerial()); [EOL] } <line_num>: 371,373
public boolean isOnOrAfter(final SerialDate other) { [EOL]     return (this.serial >= other.toSerial()); [EOL] } <line_num>: 384,386
public boolean isInRange(final SerialDate d1, final SerialDate d2) { [EOL]     return isInRange(d1, d2, SerialDate.INCLUDE_BOTH); [EOL] } <line_num>: 398,400
public boolean isInRange(final SerialDate d1, final SerialDate d2, final int include) { [EOL]     final int s1 = d1.toSerial(); [EOL]     final int s2 = d2.toSerial(); [EOL]     final int start = Math.min(s1, s2); [EOL]     final int end = Math.max(s1, s2); [EOL]     final int s = toSerial(); [EOL]     if (include == SerialDate.INCLUDE_BOTH) { [EOL]         return (s >= start && s <= end); [EOL]     } else if (include == SerialDate.INCLUDE_FIRST) { [EOL]         return (s >= start && s < end); [EOL]     } else if (include == SerialDate.INCLUDE_SECOND) { [EOL]         return (s > start && s <= end); [EOL]     } else { [EOL]         return (s > start && s < end); [EOL]     } [EOL] } <line_num>: 415,435
private int calcSerial(final int d, final int m, final int y) { [EOL]     final int yy = ((y - 1900) * 365) + SerialDate.leapYearCount(y - 1); [EOL]     int mm = SerialDate.AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH[m]; [EOL]     if (m > MonthConstants.FEBRUARY) { [EOL]         if (SerialDate.isLeapYear(y)) { [EOL]             mm = mm + 1; [EOL]         } [EOL]     } [EOL]     final int dd = d; [EOL]     return yy + mm + dd + 1; [EOL] } <line_num>: 448,458
