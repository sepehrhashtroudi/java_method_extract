public Minute() { [EOL]     this(new Date()); [EOL] } <line_num>: 105,107
public Minute(int minute, Hour hour) { [EOL]     if (hour == null) { [EOL]         throw new IllegalArgumentException("Null 'hour' argument."); [EOL]     } [EOL]     this.minute = (byte) minute; [EOL]     this.hour = (byte) hour.getHour(); [EOL]     this.day = hour.getDay(); [EOL]     peg(Calendar.getInstance()); [EOL] } <line_num>: 115,123
public Minute(Date time) { [EOL]     this(time, TimeZone.getDefault()); [EOL] } <line_num>: 133,136
public Minute(Date time, TimeZone zone) { [EOL]     if (time == null) { [EOL]         throw new IllegalArgumentException("Null 'time' argument."); [EOL]     } [EOL]     if (zone == null) { [EOL]         throw new IllegalArgumentException("Null 'zone' argument."); [EOL]     } [EOL]     Calendar calendar = Calendar.getInstance(zone); [EOL]     calendar.setTime(time); [EOL]     int min = calendar.get(Calendar.MINUTE); [EOL]     this.minute = (byte) min; [EOL]     this.hour = (byte) calendar.get(Calendar.HOUR_OF_DAY); [EOL]     this.day = new Day(time, zone); [EOL]     peg(calendar); [EOL] } <line_num>: 144,159
public Minute(int minute, int hour, int day, int month, int year) { [EOL]     this(minute, new Hour(hour, new Day(day, month, year))); [EOL] } <line_num>: 170,176
public Day getDay() { [EOL]     return this.day; [EOL] } <line_num>: 185,187
public Hour getHour() { [EOL]     return new Hour(this.hour, this.day); [EOL] } <line_num>: 194,196
public int getHourValue() { [EOL]     return this.hour; [EOL] } <line_num>: 205,207
public int getMinute() { [EOL]     return this.minute; [EOL] } <line_num>: 214,216
public long getFirstMillisecond() { [EOL]     return this.firstMillisecond; [EOL] } <line_num>: 228,230
public long getLastMillisecond() { [EOL]     return this.lastMillisecond; [EOL] } <line_num>: 242,244
public void peg(Calendar calendar) { [EOL]     this.firstMillisecond = getFirstMillisecond(calendar); [EOL]     this.lastMillisecond = getLastMillisecond(calendar); [EOL] } <line_num>: 254,257
public RegularTimePeriod previous() { [EOL]     Minute result; [EOL]     if (this.minute != FIRST_MINUTE_IN_HOUR) { [EOL]         result = new Minute(this.minute - 1, getHour()); [EOL]     } else { [EOL]         Hour h = (Hour) getHour().previous(); [EOL]         if (h != null) { [EOL]             result = new Minute(LAST_MINUTE_IN_HOUR, h); [EOL]         } else { [EOL]             result = null; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 264,279
public RegularTimePeriod next() { [EOL]     Minute result; [EOL]     if (this.minute != LAST_MINUTE_IN_HOUR) { [EOL]         result = new Minute(this.minute + 1, getHour()); [EOL]     } else { [EOL]         Hour nextHour = (Hour) getHour().next(); [EOL]         if (nextHour != null) { [EOL]             result = new Minute(FIRST_MINUTE_IN_HOUR, nextHour); [EOL]         } else { [EOL]             result = null; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 286,303
public long getSerialIndex() { [EOL]     long hourIndex = this.day.getSerialIndex() * 24L + this.hour; [EOL]     return hourIndex * 60L + this.minute; [EOL] } <line_num>: 310,313
public long getFirstMillisecond(Calendar calendar) { [EOL]     int year = this.day.getYear(); [EOL]     int month = this.day.getMonth() - 1; [EOL]     int day = this.day.getDayOfMonth(); [EOL]     calendar.clear(); [EOL]     calendar.set(year, month, day, this.hour, this.minute, 0); [EOL]     calendar.set(Calendar.MILLISECOND, 0); [EOL]     return calendar.getTime().getTime(); [EOL] } <line_num>: 326,339
public long getLastMillisecond(Calendar calendar) { [EOL]     int year = this.day.getYear(); [EOL]     int month = this.day.getMonth() - 1; [EOL]     int day = this.day.getDayOfMonth(); [EOL]     calendar.clear(); [EOL]     calendar.set(year, month, day, this.hour, this.minute, 59); [EOL]     calendar.set(Calendar.MILLISECOND, 999); [EOL]     return calendar.getTime().getTime(); [EOL] } <line_num>: 352,365
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof Minute)) { [EOL]         return false; [EOL]     } [EOL]     Minute that = (Minute) obj; [EOL]     if (this.minute != that.minute) { [EOL]         return false; [EOL]     } [EOL]     if (this.hour != that.hour) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 378,393
public int hashCode() { [EOL]     int result = 17; [EOL]     result = 37 * result + this.minute; [EOL]     result = 37 * result + this.hour; [EOL]     result = 37 * result + this.day.hashCode(); [EOL]     return result; [EOL] } <line_num>: 404,410
public int compareTo(Object o1) { [EOL]     int result; [EOL]     if (o1 instanceof Minute) { [EOL]         Minute m = (Minute) o1; [EOL]         result = getHour().compareTo(m.getHour()); [EOL]         if (result == 0) { [EOL]             result = this.minute - m.getMinute(); [EOL]         } [EOL]     } else if (o1 instanceof RegularTimePeriod) { [EOL]         result = 0; [EOL]     } else { [EOL]         result = 1; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 422,452
public static Minute parseMinute(String s) { [EOL]     Minute result = null; [EOL]     s = s.trim(); [EOL]     String daystr = s.substring(0, Math.min(10, s.length())); [EOL]     Day day = Day.parseDay(daystr); [EOL]     if (day != null) { [EOL]         String hmstr = s.substring(Math.min(daystr.length() + 1, s.length()), s.length()); [EOL]         hmstr = hmstr.trim(); [EOL]         String hourstr = hmstr.substring(0, Math.min(2, hmstr.length())); [EOL]         int hour = Integer.parseInt(hourstr); [EOL]         if ((hour >= 0) && (hour <= 23)) { [EOL]             String minstr = hmstr.substring(Math.min(hourstr.length() + 1, hmstr.length()), hmstr.length()); [EOL]             int minute = Integer.parseInt(minstr); [EOL]             if ((minute >= 0) && (minute <= 59)) { [EOL]                 result = new Minute(minute, new Hour(hour, day)); [EOL]             } [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 464,494
