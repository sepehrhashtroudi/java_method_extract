public static TimeSeriesCollection createMovingAverage(TimeSeriesCollection source, String suffix, int periodCount, int skip) { [EOL]     if (source == null) { [EOL]         throw new IllegalArgumentException("Null 'source' argument."); [EOL]     } [EOL]     if (periodCount < 1) { [EOL]         throw new IllegalArgumentException("periodCount must be greater " + "than or equal to 1."); [EOL]     } [EOL]     TimeSeriesCollection result = new TimeSeriesCollection(); [EOL]     for (int i = 0; i < source.getSeriesCount(); i++) { [EOL]         TimeSeries sourceSeries = source.getSeries(i); [EOL]         TimeSeries maSeries = createMovingAverage(sourceSeries, sourceSeries.getKey() + suffix, periodCount, skip); [EOL]         result.addSeries(maSeries); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 74,95
public static TimeSeries createMovingAverage(TimeSeries source, String name, int periodCount, int skip) { [EOL]     if (source == null) { [EOL]         throw new IllegalArgumentException("Null source."); [EOL]     } [EOL]     if (periodCount < 1) { [EOL]         throw new IllegalArgumentException("periodCount must be greater " + "than or equal to 1."); [EOL]     } [EOL]     TimeSeries result = new TimeSeries(name); [EOL]     if (source.getItemCount() > 0) { [EOL]         long firstSerial = source.getTimePeriod(0).getSerialIndex() + skip; [EOL]         for (int i = source.getItemCount() - 1; i >= 0; i--) { [EOL]             RegularTimePeriod period = source.getTimePeriod(i); [EOL]             long serial = period.getSerialIndex(); [EOL]             if (serial >= firstSerial) { [EOL]                 int n = 0; [EOL]                 double sum = 0.0; [EOL]                 long serialLimit = period.getSerialIndex() - periodCount; [EOL]                 int offset = 0; [EOL]                 boolean finished = false; [EOL]                 while ((offset < periodCount) && (!finished)) { [EOL]                     if ((i - offset) >= 0) { [EOL]                         TimeSeriesDataItem item = source.getRawDataItem(i - offset); [EOL]                         RegularTimePeriod p = item.getPeriod(); [EOL]                         Number v = item.getValue(); [EOL]                         long currentIndex = p.getSerialIndex(); [EOL]                         if (currentIndex > serialLimit) { [EOL]                             if (v != null) { [EOL]                                 sum = sum + v.doubleValue(); [EOL]                                 n = n + 1; [EOL]                             } [EOL]                         } else { [EOL]                             finished = true; [EOL]                         } [EOL]                     } [EOL]                     offset = offset + 1; [EOL]                 } [EOL]                 if (n > 0) { [EOL]                     result.add(period, sum / n); [EOL]                 } else { [EOL]                     result.add(period, null); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 110,177
public static TimeSeries createPointMovingAverage(TimeSeries source, String name, int pointCount) { [EOL]     if (source == null) { [EOL]         throw new IllegalArgumentException("Null 'source'."); [EOL]     } [EOL]     if (pointCount < 2) { [EOL]         throw new IllegalArgumentException("periodCount must be greater " + "than or equal to 2."); [EOL]     } [EOL]     TimeSeries result = new TimeSeries(name); [EOL]     double rollingSumForPeriod = 0.0; [EOL]     for (int i = 0; i < source.getItemCount(); i++) { [EOL]         TimeSeriesDataItem current = source.getRawDataItem(i); [EOL]         RegularTimePeriod period = current.getPeriod(); [EOL]         rollingSumForPeriod += current.getValue().doubleValue(); [EOL]         if (i > pointCount - 1) { [EOL]             TimeSeriesDataItem startOfMovingAvg = source.getRawDataItem(i - pointCount); [EOL]             rollingSumForPeriod -= startOfMovingAvg.getValue().doubleValue(); [EOL]             result.add(period, rollingSumForPeriod / pointCount); [EOL]         } else if (i == pointCount - 1) { [EOL]             result.add(period, rollingSumForPeriod / pointCount); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 194,227
public static XYDataset createMovingAverage(XYDataset source, String suffix, long period, long skip) { [EOL]     return createMovingAverage(source, suffix, (double) period, (double) skip); [EOL] } <line_num>: 241,247
public static XYDataset createMovingAverage(XYDataset source, String suffix, double period, double skip) { [EOL]     if (source == null) { [EOL]         throw new IllegalArgumentException("Null source (XYDataset)."); [EOL]     } [EOL]     XYSeriesCollection result = new XYSeriesCollection(); [EOL]     for (int i = 0; i < source.getSeriesCount(); i++) { [EOL]         XYSeries s = createMovingAverage(source, i, source.getSeriesKey(i) + suffix, period, skip); [EOL]         result.addSeries(s); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 262,279
public static XYSeries createMovingAverage(XYDataset source, int series, String name, double period, double skip) { [EOL]     if (source == null) { [EOL]         throw new IllegalArgumentException("Null source (XYDataset)."); [EOL]     } [EOL]     if (period < Double.MIN_VALUE) { [EOL]         throw new IllegalArgumentException("period must be positive."); [EOL]     } [EOL]     if (skip < 0.0) { [EOL]         throw new IllegalArgumentException("skip must be >= 0.0."); [EOL]     } [EOL]     XYSeries result = new XYSeries(name); [EOL]     if (source.getItemCount(series) > 0) { [EOL]         double first = source.getXValue(series, 0) + skip; [EOL]         for (int i = source.getItemCount(series) - 1; i >= 0; i--) { [EOL]             double x = source.getXValue(series, i); [EOL]             if (x >= first) { [EOL]                 int n = 0; [EOL]                 double sum = 0.0; [EOL]                 double limit = x - period; [EOL]                 int offset = 0; [EOL]                 boolean finished = false; [EOL]                 while (!finished) { [EOL]                     if ((i - offset) >= 0) { [EOL]                         double xx = source.getXValue(series, i - offset); [EOL]                         Number yy = source.getY(series, i - offset); [EOL]                         if (xx > limit) { [EOL]                             if (yy != null) { [EOL]                                 sum = sum + yy.doubleValue(); [EOL]                                 n = n + 1; [EOL]                             } [EOL]                         } else { [EOL]                             finished = true; [EOL]                         } [EOL]                     } else { [EOL]                         finished = true; [EOL]                     } [EOL]                     offset = offset + 1; [EOL]                 } [EOL]                 if (n > 0) { [EOL]                     result.add(x, sum / n); [EOL]                 } else { [EOL]                     result.add(x, null); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 293,359
