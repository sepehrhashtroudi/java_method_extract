public Second() { [EOL]     this(new Date()); [EOL] } <line_num>: 103,105
public Second(int second, Minute minute) { [EOL]     if (minute == null) { [EOL]         throw new IllegalArgumentException("Null 'minute' argument."); [EOL]     } [EOL]     this.day = minute.getDay(); [EOL]     this.hour = (byte) minute.getHourValue(); [EOL]     this.minute = (byte) minute.getMinute(); [EOL]     this.second = (byte) second; [EOL]     peg(Calendar.getInstance()); [EOL] } <line_num>: 113,122
public Second(int second, int minute, int hour, int day, int month, int year) { [EOL]     this(second, new Minute(minute, hour, day, month, year)); [EOL] } <line_num>: 134,137
public Second(Date time) { [EOL]     this(time, TimeZone.getDefault()); [EOL] } <line_num>: 147,149
public Second(Date time, TimeZone zone) { [EOL]     Calendar calendar = Calendar.getInstance(zone); [EOL]     calendar.setTime(time); [EOL]     this.second = (byte) calendar.get(Calendar.SECOND); [EOL]     this.minute = (byte) calendar.get(Calendar.MINUTE); [EOL]     this.hour = (byte) calendar.get(Calendar.HOUR_OF_DAY); [EOL]     this.day = new Day(time, zone); [EOL]     peg(calendar); [EOL] } <line_num>: 157,166
public int getSecond() { [EOL]     return this.second; [EOL] } <line_num>: 173,175
public Minute getMinute() { [EOL]     return new Minute(this.minute, new Hour(this.hour, this.day)); [EOL] } <line_num>: 182,184
public long getFirstMillisecond() { [EOL]     return this.firstMillisecond; [EOL] } <line_num>: 196,198
public long getLastMillisecond() { [EOL]     return this.firstMillisecond + 999L; [EOL] } <line_num>: 210,212
public void peg(Calendar calendar) { [EOL]     this.firstMillisecond = getFirstMillisecond(calendar); [EOL] } <line_num>: 222,224
public RegularTimePeriod previous() { [EOL]     Second result = null; [EOL]     if (this.second != FIRST_SECOND_IN_MINUTE) { [EOL]         result = new Second(this.second - 1, getMinute()); [EOL]     } else { [EOL]         Minute previous = (Minute) getMinute().previous(); [EOL]         if (previous != null) { [EOL]             result = new Second(LAST_SECOND_IN_MINUTE, previous); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 231,245
public RegularTimePeriod next() { [EOL]     Second result = null; [EOL]     if (this.second != LAST_SECOND_IN_MINUTE) { [EOL]         result = new Second(this.second + 1, getMinute()); [EOL]     } else { [EOL]         Minute next = (Minute) getMinute().next(); [EOL]         if (next != null) { [EOL]             result = new Second(FIRST_SECOND_IN_MINUTE, next); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 252,266
public long getSerialIndex() { [EOL]     long hourIndex = this.day.getSerialIndex() * 24L + this.hour; [EOL]     long minuteIndex = hourIndex * 60L + this.minute; [EOL]     return minuteIndex * 60L + this.second; [EOL] } <line_num>: 273,277
public long getFirstMillisecond(Calendar calendar) { [EOL]     int year = this.day.getYear(); [EOL]     int month = this.day.getMonth() - 1; [EOL]     int day = this.day.getDayOfMonth(); [EOL]     calendar.clear(); [EOL]     calendar.set(year, month, day, this.hour, this.minute, this.second); [EOL]     calendar.set(Calendar.MILLISECOND, 0); [EOL]     return calendar.getTime().getTime(); [EOL] } <line_num>: 289,298
public long getLastMillisecond(Calendar calendar) { [EOL]     return getFirstMillisecond(calendar) + 999L; [EOL] } <line_num>: 310,312
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof Second)) { [EOL]         return false; [EOL]     } [EOL]     Second that = (Second) obj; [EOL]     if (this.second != that.second) { [EOL]         return false; [EOL]     } [EOL]     if (this.minute != that.minute) { [EOL]         return false; [EOL]     } [EOL]     if (this.hour != that.hour) { [EOL]         return false; [EOL]     } [EOL]     if (!this.day.equals(that.day)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 325,346
public int hashCode() { [EOL]     int result = 17; [EOL]     result = 37 * result + this.second; [EOL]     result = 37 * result + this.minute; [EOL]     result = 37 * result + this.hour; [EOL]     result = 37 * result + this.day.hashCode(); [EOL]     return result; [EOL] } <line_num>: 357,364
public int compareTo(Object o1) { [EOL]     int result; [EOL]     if (o1 instanceof Second) { [EOL]         Second s = (Second) o1; [EOL]         if (this.firstMillisecond < s.firstMillisecond) { [EOL]             return -1; [EOL]         } else if (this.firstMillisecond > s.firstMillisecond) { [EOL]             return 1; [EOL]         } else { [EOL]             return 0; [EOL]         } [EOL]     } else if (o1 instanceof RegularTimePeriod) { [EOL]         result = 0; [EOL]     } else { [EOL]         result = 1; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 375,410
public static Second parseSecond(String s) { [EOL]     Second result = null; [EOL]     s = s.trim(); [EOL]     String daystr = s.substring(0, Math.min(10, s.length())); [EOL]     Day day = Day.parseDay(daystr); [EOL]     if (day != null) { [EOL]         String hmsstr = s.substring(Math.min(daystr.length() + 1, s.length()), s.length()); [EOL]         hmsstr = hmsstr.trim(); [EOL]         int l = hmsstr.length(); [EOL]         String hourstr = hmsstr.substring(0, Math.min(2, l)); [EOL]         String minstr = hmsstr.substring(Math.min(3, l), Math.min(5, l)); [EOL]         String secstr = hmsstr.substring(Math.min(6, l), Math.min(8, l)); [EOL]         int hour = Integer.parseInt(hourstr); [EOL]         if ((hour >= 0) && (hour <= 23)) { [EOL]             int minute = Integer.parseInt(minstr); [EOL]             if ((minute >= 0) && (minute <= 59)) { [EOL]                 Minute m = new Minute(minute, new Hour(hour, day)); [EOL]                 int second = Integer.parseInt(secstr); [EOL]                 if ((second >= 0) && (second <= 59)) { [EOL]                     result = new Second(second, m); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 421,456
