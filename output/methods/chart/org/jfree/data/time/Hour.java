public Hour() { [EOL]     this(new Date()); [EOL] } <line_num>: 101,103
public Hour(int hour, Day day) { [EOL]     if (day == null) { [EOL]         throw new IllegalArgumentException("Null 'day' argument."); [EOL]     } [EOL]     this.hour = (byte) hour; [EOL]     this.day = day; [EOL]     peg(Calendar.getInstance()); [EOL] } <line_num>: 111,118
public Hour(int hour, int day, int month, int year) { [EOL]     this(hour, new Day(day, month, year)); [EOL] } <line_num>: 128,130
public Hour(Date time) { [EOL]     this(time, TimeZone.getDefault()); [EOL] } <line_num>: 140,143
public Hour(Date time, TimeZone zone) { [EOL]     if (time == null) { [EOL]         throw new IllegalArgumentException("Null 'time' argument."); [EOL]     } [EOL]     if (zone == null) { [EOL]         throw new IllegalArgumentException("Null 'zone' argument."); [EOL]     } [EOL]     Calendar calendar = Calendar.getInstance(zone); [EOL]     calendar.setTime(time); [EOL]     this.hour = (byte) calendar.get(Calendar.HOUR_OF_DAY); [EOL]     this.day = new Day(time, zone); [EOL]     peg(calendar); [EOL] } <line_num>: 152,165
public int getHour() { [EOL]     return this.hour; [EOL] } <line_num>: 172,174
public Day getDay() { [EOL]     return this.day; [EOL] } <line_num>: 181,183
public int getYear() { [EOL]     return this.day.getYear(); [EOL] } <line_num>: 190,192
public int getMonth() { [EOL]     return this.day.getMonth(); [EOL] } <line_num>: 199,201
public int getDayOfMonth() { [EOL]     return this.day.getDayOfMonth(); [EOL] } <line_num>: 208,210
public long getFirstMillisecond() { [EOL]     return this.firstMillisecond; [EOL] } <line_num>: 222,224
public long getLastMillisecond() { [EOL]     return this.lastMillisecond; [EOL] } <line_num>: 236,238
public void peg(Calendar calendar) { [EOL]     this.firstMillisecond = getFirstMillisecond(calendar); [EOL]     this.lastMillisecond = getLastMillisecond(calendar); [EOL] } <line_num>: 248,251
public RegularTimePeriod previous() { [EOL]     Hour result; [EOL]     if (this.hour != FIRST_HOUR_IN_DAY) { [EOL]         result = new Hour(this.hour - 1, this.day); [EOL]     } else { [EOL]         Day prevDay = (Day) this.day.previous(); [EOL]         if (prevDay != null) { [EOL]             result = new Hour(LAST_HOUR_IN_DAY, prevDay); [EOL]         } else { [EOL]             result = null; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 258,275
public RegularTimePeriod next() { [EOL]     Hour result; [EOL]     if (this.hour != LAST_HOUR_IN_DAY) { [EOL]         result = new Hour(this.hour + 1, this.day); [EOL]     } else { [EOL]         Day nextDay = (Day) this.day.next(); [EOL]         if (nextDay != null) { [EOL]             result = new Hour(FIRST_HOUR_IN_DAY, nextDay); [EOL]         } else { [EOL]             result = null; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 282,299
public long getSerialIndex() { [EOL]     return this.day.getSerialIndex() * 24L + this.hour; [EOL] } <line_num>: 306,308
public long getFirstMillisecond(Calendar calendar) { [EOL]     int year = this.day.getYear(); [EOL]     int month = this.day.getMonth() - 1; [EOL]     int dom = this.day.getDayOfMonth(); [EOL]     calendar.set(year, month, dom, this.hour, 0, 0); [EOL]     calendar.set(Calendar.MILLISECOND, 0); [EOL]     return calendar.getTime().getTime(); [EOL] } <line_num>: 320,328
public long getLastMillisecond(Calendar calendar) { [EOL]     int year = this.day.getYear(); [EOL]     int month = this.day.getMonth() - 1; [EOL]     int dom = this.day.getDayOfMonth(); [EOL]     calendar.set(year, month, dom, this.hour, 59, 59); [EOL]     calendar.set(Calendar.MILLISECOND, 999); [EOL]     return calendar.getTime().getTime(); [EOL] } <line_num>: 340,348
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof Hour)) { [EOL]         return false; [EOL]     } [EOL]     Hour that = (Hour) obj; [EOL]     if (this.hour != that.hour) { [EOL]         return false; [EOL]     } [EOL]     if (!this.day.equals(that.day)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 361,376
public String toString() { [EOL]     return "[" + this.hour + "," + getDayOfMonth() + "/" + getMonth() + "/" + getYear() + "]"; [EOL] } <line_num>: 384,387
public int hashCode() { [EOL]     int result = 17; [EOL]     result = 37 * result + this.hour; [EOL]     result = 37 * result + this.day.hashCode(); [EOL]     return result; [EOL] } <line_num>: 398,403
public int compareTo(Object o1) { [EOL]     int result; [EOL]     if (o1 instanceof Hour) { [EOL]         Hour h = (Hour) o1; [EOL]         result = getDay().compareTo(h.getDay()); [EOL]         if (result == 0) { [EOL]             result = this.hour - h.getHour(); [EOL]         } [EOL]     } else if (o1 instanceof RegularTimePeriod) { [EOL]         result = 0; [EOL]     } else { [EOL]         result = 1; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 415,445
public static Hour parseHour(String s) { [EOL]     Hour result = null; [EOL]     s = s.trim(); [EOL]     String daystr = s.substring(0, Math.min(10, s.length())); [EOL]     Day day = Day.parseDay(daystr); [EOL]     if (day != null) { [EOL]         String hourstr = s.substring(Math.min(daystr.length() + 1, s.length()), s.length()); [EOL]         hourstr = hourstr.trim(); [EOL]         int hour = Integer.parseInt(hourstr); [EOL]         if ((hour >= FIRST_HOUR_IN_DAY) && (hour <= LAST_HOUR_IN_DAY)) { [EOL]             result = new Hour(hour, day); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 457,478
