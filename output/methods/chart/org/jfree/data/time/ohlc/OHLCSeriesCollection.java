public OHLCSeriesCollection() { [EOL]     this.data = new java.util.ArrayList(); [EOL] } <line_num>: 78,80
public TimePeriodAnchor getXPosition() { [EOL]     return this.xPosition; [EOL] } <line_num>: 90,92
public void setXPosition(TimePeriodAnchor anchor) { [EOL]     if (anchor == null) { [EOL]         throw new IllegalArgumentException("Null 'anchor' argument."); [EOL]     } [EOL]     this.xPosition = anchor; [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 103,110
public void addSeries(OHLCSeries series) { [EOL]     if (series == null) { [EOL]         throw new IllegalArgumentException("Null 'series' argument."); [EOL]     } [EOL]     this.data.add(series); [EOL]     series.addChangeListener(this); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 118,126
public int getSeriesCount() { [EOL]     return this.data.size(); [EOL] } <line_num>: 133,135
public OHLCSeries getSeries(int series) { [EOL]     if ((series < 0) || (series >= getSeriesCount())) { [EOL]         throw new IllegalArgumentException("Series index out of bounds"); [EOL]     } [EOL]     return (OHLCSeries) this.data.get(series); [EOL] } <line_num>: 147,152
public Comparable getSeriesKey(int series) { [EOL]     return getSeries(series).getKey(); [EOL] } <line_num>: 165,168
public int getItemCount(int series) { [EOL]     return getSeries(series).getItemCount(); [EOL] } <line_num>: 180,183
protected synchronized long getX(RegularTimePeriod period) { [EOL]     long result = 0L; [EOL]     if (this.xPosition == TimePeriodAnchor.START) { [EOL]         result = period.getFirstMillisecond(); [EOL]     } else if (this.xPosition == TimePeriodAnchor.MIDDLE) { [EOL]         result = period.getMiddleMillisecond(); [EOL]     } else if (this.xPosition == TimePeriodAnchor.END) { [EOL]         result = period.getLastMillisecond(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 192,204
public double getXValue(int series, int item) { [EOL]     OHLCSeries s = (OHLCSeries) this.data.get(series); [EOL]     OHLCItem di = (OHLCItem) s.getDataItem(item); [EOL]     RegularTimePeriod period = di.getPeriod(); [EOL]     return getX(period); [EOL] } <line_num>: 214,219
public Number getX(int series, int item) { [EOL]     return new Double(getXValue(series, item)); [EOL] } <line_num>: 229,231
public Number getY(int series, int item) { [EOL]     OHLCSeries s = (OHLCSeries) this.data.get(series); [EOL]     OHLCItem di = (OHLCItem) s.getDataItem(item); [EOL]     return new Double(di.getYValue()); [EOL] } <line_num>: 241,245
public double getOpenValue(int series, int item) { [EOL]     OHLCSeries s = (OHLCSeries) this.data.get(series); [EOL]     OHLCItem di = (OHLCItem) s.getDataItem(item); [EOL]     return di.getOpenValue(); [EOL] } <line_num>: 255,259
public Number getOpen(int series, int item) { [EOL]     return new Double(getOpenValue(series, item)); [EOL] } <line_num>: 269,271
public double getCloseValue(int series, int item) { [EOL]     OHLCSeries s = (OHLCSeries) this.data.get(series); [EOL]     OHLCItem di = (OHLCItem) s.getDataItem(item); [EOL]     return di.getCloseValue(); [EOL] } <line_num>: 281,285
public Number getClose(int series, int item) { [EOL]     return new Double(getCloseValue(series, item)); [EOL] } <line_num>: 295,297
public double getHighValue(int series, int item) { [EOL]     OHLCSeries s = (OHLCSeries) this.data.get(series); [EOL]     OHLCItem di = (OHLCItem) s.getDataItem(item); [EOL]     return di.getHighValue(); [EOL] } <line_num>: 307,311
public Number getHigh(int series, int item) { [EOL]     return new Double(getHighValue(series, item)); [EOL] } <line_num>: 321,323
public double getLowValue(int series, int item) { [EOL]     OHLCSeries s = (OHLCSeries) this.data.get(series); [EOL]     OHLCItem di = (OHLCItem) s.getDataItem(item); [EOL]     return di.getLowValue(); [EOL] } <line_num>: 333,337
public Number getLow(int series, int item) { [EOL]     return new Double(getLowValue(series, item)); [EOL] } <line_num>: 347,349
public Number getVolume(int series, int item) { [EOL]     return null; [EOL] } <line_num>: 360,362
public double getVolumeValue(int series, int item) { [EOL]     return Double.NaN; [EOL] } <line_num>: 373,375
public void removeSeries(int index) { [EOL]     OHLCSeries series = getSeries(index); [EOL]     if (series != null) { [EOL]         removeSeries(series); [EOL]     } [EOL] } <line_num>: 385,390
public boolean removeSeries(OHLCSeries series) { [EOL]     if (series == null) { [EOL]         throw new IllegalArgumentException("Null 'series' argument."); [EOL]     } [EOL]     boolean removed = this.data.remove(series); [EOL]     if (removed) { [EOL]         series.removeChangeListener(this); [EOL]         fireDatasetChanged(new DatasetChangeInfo()); [EOL]     } [EOL]     return removed; [EOL] } <line_num>: 403,414
public void removeAllSeries() { [EOL]     if (this.data.size() == 0) { [EOL]         return; [EOL]     } [EOL]     for (int i = 0; i < this.data.size(); i++) { [EOL]         OHLCSeries series = (OHLCSeries) this.data.get(i); [EOL]         series.removeChangeListener(this); [EOL]     } [EOL]     this.data.clear(); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 422,440
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof OHLCSeriesCollection)) { [EOL]         return false; [EOL]     } [EOL]     OHLCSeriesCollection that = (OHLCSeriesCollection) obj; [EOL]     if (!this.xPosition.equals(that.xPosition)) { [EOL]         return false; [EOL]     } [EOL]     return ObjectUtilities.equal(this.data, that.data); [EOL] } <line_num>: 449,461
public int hashCode() { [EOL]     int result = 137; [EOL]     result = HashUtilities.hashCode(result, this.xPosition); [EOL]     for (int i = 0; i < this.data.size(); i++) { [EOL]         result = HashUtilities.hashCode(result, this.data.get(i)); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 468,475
public Object clone() throws CloneNotSupportedException { [EOL]     OHLCSeriesCollection clone = (OHLCSeriesCollection) super.clone(); [EOL]     clone.data = (List) ObjectUtilities.deepClone(this.data); [EOL]     return clone; [EOL] } <line_num>: 484,489
