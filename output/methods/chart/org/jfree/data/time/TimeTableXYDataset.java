public TimeTableXYDataset() { [EOL]     this(TimeZone.getDefault(), Locale.getDefault()); [EOL] } <line_num>: 118,121
public TimeTableXYDataset(TimeZone zone) { [EOL]     this(zone, Locale.getDefault()); [EOL] } <line_num>: 128,131
public TimeTableXYDataset(TimeZone zone, Locale locale) { [EOL]     if (zone == null) { [EOL]         throw new IllegalArgumentException("Null 'zone' argument."); [EOL]     } [EOL]     if (locale == null) { [EOL]         throw new IllegalArgumentException("Null 'locale' argument."); [EOL]     } [EOL]     this.values = new DefaultKeyedValues2D(true); [EOL]     this.workingCalendar = Calendar.getInstance(zone, locale); [EOL]     this.xPosition = TimePeriodAnchor.START; [EOL] } <line_num>: 139,149
public boolean getDomainIsPointsInTime() { [EOL]     return this.domainIsPointsInTime; [EOL] } <line_num>: 164,166
public void setDomainIsPointsInTime(boolean flag) { [EOL]     this.domainIsPointsInTime = flag; [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 177,181
public TimePeriodAnchor getXPosition() { [EOL]     return this.xPosition; [EOL] } <line_num>: 191,193
public void setXPosition(TimePeriodAnchor anchor) { [EOL]     if (anchor == null) { [EOL]         throw new IllegalArgumentException("Null 'anchor' argument."); [EOL]     } [EOL]     this.xPosition = anchor; [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 203,210
public void add(TimePeriod period, double y, Comparable seriesName) { [EOL]     add(period, new Double(y), seriesName, true); [EOL] } <line_num>: 222,224
public void add(TimePeriod period, Number y, Comparable seriesName, boolean notify) { [EOL]     if (period instanceof RegularTimePeriod) { [EOL]         RegularTimePeriod p = (RegularTimePeriod) period; [EOL]         p.peg(this.workingCalendar); [EOL]     } [EOL]     this.values.addValue(y, period, seriesName); [EOL]     if (notify) { [EOL]         fireDatasetChanged(new DatasetChangeInfo()); [EOL]     } [EOL] } <line_num>: 238,253
public void remove(TimePeriod period, Comparable seriesName) { [EOL]     remove(period, seriesName, true); [EOL] } <line_num>: 265,267
public void remove(TimePeriod period, Comparable seriesName, boolean notify) { [EOL]     this.values.removeValue(period, seriesName); [EOL]     if (notify) { [EOL]         fireDatasetChanged(new DatasetChangeInfo()); [EOL]     } [EOL] } <line_num>: 281,288
public void clear() { [EOL]     if (this.values.getRowCount() > 0) { [EOL]         this.values.clear(); [EOL]         fireDatasetChanged(new DatasetChangeInfo()); [EOL]     } [EOL] } <line_num>: 296,302
public TimePeriod getTimePeriod(int item) { [EOL]     return (TimePeriod) this.values.getRowKey(item); [EOL] } <line_num>: 312,314
public int getItemCount() { [EOL]     return this.values.getRowCount(); [EOL] } <line_num>: 321,323
public int getItemCount(int series) { [EOL]     return getItemCount(); [EOL] } <line_num>: 334,336
public int getSeriesCount() { [EOL]     return this.values.getColumnCount(); [EOL] } <line_num>: 343,345
public Comparable getSeriesKey(int series) { [EOL]     return this.values.getColumnKey(series); [EOL] } <line_num>: 354,356
public Number getX(int series, int item) { [EOL]     return new Double(getXValue(series, item)); [EOL] } <line_num>: 368,370
public double getXValue(int series, int item) { [EOL]     TimePeriod period = (TimePeriod) this.values.getRowKey(item); [EOL]     return getXValue(period); [EOL] } <line_num>: 380,383
public Number getStartX(int series, int item) { [EOL]     return new Double(getStartXValue(series, item)); [EOL] } <line_num>: 395,397
public double getStartXValue(int series, int item) { [EOL]     TimePeriod period = (TimePeriod) this.values.getRowKey(item); [EOL]     return period.getStart().getTime(); [EOL] } <line_num>: 408,411
public Number getEndX(int series, int item) { [EOL]     return new Double(getEndXValue(series, item)); [EOL] } <line_num>: 423,425
public double getEndXValue(int series, int item) { [EOL]     TimePeriod period = (TimePeriod) this.values.getRowKey(item); [EOL]     return period.getEnd().getTime(); [EOL] } <line_num>: 436,439
public Number getY(int series, int item) { [EOL]     return this.values.getValue(item, series); [EOL] } <line_num>: 449,451
public Number getStartY(int series, int item) { [EOL]     return getY(series, item); [EOL] } <line_num>: 461,463
public Number getEndY(int series, int item) { [EOL]     return getY(series, item); [EOL] } <line_num>: 473,475
private long getXValue(TimePeriod period) { [EOL]     long result = 0L; [EOL]     if (this.xPosition == TimePeriodAnchor.START) { [EOL]         result = period.getStart().getTime(); [EOL]     } else if (this.xPosition == TimePeriodAnchor.MIDDLE) { [EOL]         long t0 = period.getStart().getTime(); [EOL]         long t1 = period.getEnd().getTime(); [EOL]         result = t0 + (t1 - t0) / 2L; [EOL]     } else if (this.xPosition == TimePeriodAnchor.END) { [EOL]         result = period.getEnd().getTime(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 484,498
public double getDomainLowerBound(boolean includeInterval) { [EOL]     double result = Double.NaN; [EOL]     Range r = getDomainBounds(includeInterval); [EOL]     if (r != null) { [EOL]         result = r.getLowerBound(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 508,515
public double getDomainUpperBound(boolean includeInterval) { [EOL]     double result = Double.NaN; [EOL]     Range r = getDomainBounds(includeInterval); [EOL]     if (r != null) { [EOL]         result = r.getUpperBound(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 525,532
public Range getDomainBounds(boolean includeInterval) { [EOL]     List keys = this.values.getRowKeys(); [EOL]     if (keys.isEmpty()) { [EOL]         return null; [EOL]     } [EOL]     TimePeriod first = (TimePeriod) keys.get(0); [EOL]     TimePeriod last = (TimePeriod) keys.get(keys.size() - 1); [EOL]     if (!includeInterval || this.domainIsPointsInTime) { [EOL]         return new Range(getXValue(first), getXValue(last)); [EOL]     } else { [EOL]         return new Range(first.getStart().getTime(), last.getEnd().getTime()); [EOL]     } [EOL] } <line_num>: 542,558
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof TimeTableXYDataset)) { [EOL]         return false; [EOL]     } [EOL]     TimeTableXYDataset that = (TimeTableXYDataset) obj; [EOL]     if (this.domainIsPointsInTime != that.domainIsPointsInTime) { [EOL]         return false; [EOL]     } [EOL]     if (this.xPosition != that.xPosition) { [EOL]         return false; [EOL]     } [EOL]     if (!this.workingCalendar.getTimeZone().equals(that.workingCalendar.getTimeZone())) { [EOL]         return false; [EOL]     } [EOL]     if (!this.values.equals(that.values)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 567,590
public Object clone() throws CloneNotSupportedException { [EOL]     TimeTableXYDataset clone = (TimeTableXYDataset) super.clone(); [EOL]     clone.values = (DefaultKeyedValues2D) this.values.clone(); [EOL]     clone.workingCalendar = (Calendar) this.workingCalendar.clone(); [EOL]     return clone; [EOL] } <line_num>: 599,604
