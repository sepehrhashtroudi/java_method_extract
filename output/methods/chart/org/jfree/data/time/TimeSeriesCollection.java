public TimeSeriesCollection() { [EOL]     this(null, TimeZone.getDefault()); [EOL] } <line_num>: 144,146
public TimeSeriesCollection(TimeZone zone) { [EOL]     this(null, zone); [EOL] } <line_num>: 154,157
public TimeSeriesCollection(TimeSeries series) { [EOL]     this(series, TimeZone.getDefault()); [EOL] } <line_num>: 165,167
public TimeSeriesCollection(TimeSeries series, TimeZone zone) { [EOL]     super(); [EOL]     if (zone == null) { [EOL]         zone = TimeZone.getDefault(); [EOL]     } [EOL]     this.workingCalendar = Calendar.getInstance(zone); [EOL]     this.data = new ArrayList(); [EOL]     if (series != null) { [EOL]         this.data.add(series); [EOL]         series.addChangeListener(this); [EOL]     } [EOL]     this.xPosition = TimePeriodAnchor.START; [EOL]     setSelectionState(this); [EOL] } <line_num>: 178,192
public DomainOrder getDomainOrder() { [EOL]     return DomainOrder.ASCENDING; [EOL] } <line_num>: 199,201
public TimePeriodAnchor getXPosition() { [EOL]     return this.xPosition; [EOL] } <line_num>: 210,212
public void setXPosition(TimePeriodAnchor anchor) { [EOL]     if (anchor == null) { [EOL]         throw new IllegalArgumentException("Null 'anchor' argument."); [EOL]     } [EOL]     this.xPosition = anchor; [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 221,228
public List getSeries() { [EOL]     return Collections.unmodifiableList(this.data); [EOL] } <line_num>: 235,237
public int getSeriesCount() { [EOL]     return this.data.size(); [EOL] } <line_num>: 244,246
public int indexOf(TimeSeries series) { [EOL]     if (series == null) { [EOL]         throw new IllegalArgumentException("Null 'series' argument."); [EOL]     } [EOL]     return this.data.indexOf(series); [EOL] } <line_num>: 258,263
public TimeSeries getSeries(int series) { [EOL]     if ((series < 0) || (series >= getSeriesCount())) { [EOL]         throw new IllegalArgumentException("The 'series' argument is out of bounds (" + series + ")."); [EOL]     } [EOL]     return (TimeSeries) this.data.get(series); [EOL] } <line_num>: 272,278
public TimeSeries getSeries(Comparable key) { [EOL]     TimeSeries result = null; [EOL]     Iterator iterator = this.data.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         TimeSeries series = (TimeSeries) iterator.next(); [EOL]         Comparable k = series.getKey(); [EOL]         if (k != null && k.equals(key)) { [EOL]             result = series; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 288,299
public Comparable getSeriesKey(int series) { [EOL]     return getSeries(series).getKey(); [EOL] } <line_num>: 308,312
public void addSeries(TimeSeries series) { [EOL]     if (series == null) { [EOL]         throw new IllegalArgumentException("Null 'series' argument."); [EOL]     } [EOL]     this.data.add(series); [EOL]     series.addChangeListener(this); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 320,328
public void removeSeries(TimeSeries series) { [EOL]     if (series == null) { [EOL]         throw new IllegalArgumentException("Null 'series' argument."); [EOL]     } [EOL]     this.data.remove(series); [EOL]     series.removeChangeListener(this); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 336,344
public void removeSeries(int index) { [EOL]     TimeSeries series = getSeries(index); [EOL]     if (series != null) { [EOL]         removeSeries(series); [EOL]     } [EOL] } <line_num>: 351,356
public void removeAllSeries() { [EOL]     for (int i = 0; i < this.data.size(); i++) { [EOL]         TimeSeries series = (TimeSeries) this.data.get(i); [EOL]         series.removeChangeListener(this); [EOL]     } [EOL]     this.data.clear(); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 362,376
public int getItemCount(int series) { [EOL]     return getSeries(series).getItemCount(); [EOL] } <line_num>: 386,388
public double getXValue(int series, int item) { [EOL]     TimeSeries s = (TimeSeries) this.data.get(series); [EOL]     RegularTimePeriod period = s.getTimePeriod(item); [EOL]     return getX(period); [EOL] } <line_num>: 398,402
public Number getX(int series, int item) { [EOL]     TimeSeries ts = (TimeSeries) this.data.get(series); [EOL]     RegularTimePeriod period = ts.getTimePeriod(item); [EOL]     return new Long(getX(period)); [EOL] } <line_num>: 412,416
protected synchronized long getX(RegularTimePeriod period) { [EOL]     long result = 0L; [EOL]     if (this.xPosition == TimePeriodAnchor.START) { [EOL]         result = period.getFirstMillisecond(this.workingCalendar); [EOL]     } else if (this.xPosition == TimePeriodAnchor.MIDDLE) { [EOL]         result = period.getMiddleMillisecond(this.workingCalendar); [EOL]     } else if (this.xPosition == TimePeriodAnchor.END) { [EOL]         result = period.getLastMillisecond(this.workingCalendar); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 425,437
public synchronized Number getStartX(int series, int item) { [EOL]     TimeSeries ts = (TimeSeries) this.data.get(series); [EOL]     return new Long(ts.getTimePeriod(item).getFirstMillisecond(this.workingCalendar)); [EOL] } <line_num>: 447,451
public synchronized Number getEndX(int series, int item) { [EOL]     TimeSeries ts = (TimeSeries) this.data.get(series); [EOL]     return new Long(ts.getTimePeriod(item).getLastMillisecond(this.workingCalendar)); [EOL] } <line_num>: 461,465
public Number getY(int series, int item) { [EOL]     TimeSeries ts = (TimeSeries) this.data.get(series); [EOL]     return ts.getValue(item); [EOL] } <line_num>: 475,478
public Number getStartY(int series, int item) { [EOL]     return getY(series, item); [EOL] } <line_num>: 488,490
public Number getEndY(int series, int item) { [EOL]     return getY(series, item); [EOL] } <line_num>: 500,502
public boolean isSelected(int series, int item) { [EOL]     TimeSeries s = getSeries(series); [EOL]     TimeSeriesDataItem i = s.getRawDataItem(item); [EOL]     return i.isSelected(); [EOL] } <line_num>: 515,519
public void setSelected(int series, int item, boolean selected) { [EOL]     setSelected(series, item, selected, true); [EOL] } <line_num>: 531,533
public void setSelected(int series, int item, boolean selected, boolean notify) { [EOL]     TimeSeries s = getSeries(series); [EOL]     TimeSeriesDataItem i = s.getRawDataItem(item); [EOL]     i.setSelected(selected); [EOL]     if (notify) { [EOL]         fireSelectionEvent(); [EOL]     } [EOL] } <line_num>: 546,554
public void clearSelection() { [EOL]     int seriesCount = getSeriesCount(); [EOL]     for (int s = 0; s < seriesCount; s++) { [EOL]         int itemCount = getItemCount(s); [EOL]         for (int i = 0; i < itemCount; i++) { [EOL]             setSelected(s, i, false, false); [EOL]         } [EOL]     } [EOL] } <line_num>: 561,569
public void fireSelectionEvent() { [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 577,580
public int[] getSurroundingItems(int series, long milliseconds) { [EOL]     int[] result = new int[] { -1, -1 }; [EOL]     TimeSeries timeSeries = getSeries(series); [EOL]     for (int i = 0; i < timeSeries.getItemCount(); i++) { [EOL]         Number x = getX(series, i); [EOL]         long m = x.longValue(); [EOL]         if (m <= milliseconds) { [EOL]             result[0] = i; [EOL]         } [EOL]         if (m >= milliseconds) { [EOL]             result[1] = i; [EOL]             break; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 592,607
public double getDomainLowerBound(boolean includeInterval) { [EOL]     double result = Double.NaN; [EOL]     Range r = getDomainBounds(includeInterval); [EOL]     if (r != null) { [EOL]         result = r.getLowerBound(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 617,624
public double getDomainUpperBound(boolean includeInterval) { [EOL]     double result = Double.NaN; [EOL]     Range r = getDomainBounds(includeInterval); [EOL]     if (r != null) { [EOL]         result = r.getUpperBound(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 634,641
public Range getDomainBounds(boolean includeInterval) { [EOL]     Range result = null; [EOL]     Iterator iterator = this.data.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         TimeSeries series = (TimeSeries) iterator.next(); [EOL]         int count = series.getItemCount(); [EOL]         if (count > 0) { [EOL]             RegularTimePeriod start = series.getTimePeriod(0); [EOL]             RegularTimePeriod end = series.getTimePeriod(count - 1); [EOL]             Range temp; [EOL]             if (!includeInterval) { [EOL]                 temp = new Range(getX(start), getX(end)); [EOL]             } else { [EOL]                 temp = new Range(start.getFirstMillisecond(this.workingCalendar), end.getLastMillisecond(this.workingCalendar)); [EOL]             } [EOL]             result = Range.combine(result, temp); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 651,673
public Range getDomainBounds(List visibleSeriesKeys, boolean includeInterval) { [EOL]     Range result = null; [EOL]     Iterator iterator = visibleSeriesKeys.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         Comparable seriesKey = (Comparable) iterator.next(); [EOL]         TimeSeries series = getSeries(seriesKey); [EOL]         int count = series.getItemCount(); [EOL]         if (count > 0) { [EOL]             RegularTimePeriod start = series.getTimePeriod(0); [EOL]             RegularTimePeriod end = series.getTimePeriod(count - 1); [EOL]             Range temp; [EOL]             if (!includeInterval) { [EOL]                 temp = new Range(getX(start), getX(end)); [EOL]             } else { [EOL]                 temp = new Range(start.getFirstMillisecond(this.workingCalendar), end.getLastMillisecond(this.workingCalendar)); [EOL]             } [EOL]             result = Range.combine(result, temp); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 685,709
public Range getRangeBounds(List visibleSeriesKeys, Range xRange, boolean includeInterval) { [EOL]     Range result = null; [EOL]     Iterator iterator = visibleSeriesKeys.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         Comparable seriesKey = (Comparable) iterator.next(); [EOL]         TimeSeries series = getSeries(seriesKey); [EOL]         Range r = null; [EOL]         r = new Range(series.getMinY(), series.getMaxY()); [EOL]         result = Range.combine(result, r); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 722,735
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof TimeSeriesCollection)) { [EOL]         return false; [EOL]     } [EOL]     TimeSeriesCollection that = (TimeSeriesCollection) obj; [EOL]     if (this.xPosition != that.xPosition) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.data, that.data)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 744,759
public int hashCode() { [EOL]     int result; [EOL]     result = this.data.hashCode(); [EOL]     result = 29 * result + (this.workingCalendar != null ? this.workingCalendar.hashCode() : 0); [EOL]     result = 29 * result + (this.xPosition != null ? this.xPosition.hashCode() : 0); [EOL]     return result; [EOL] } <line_num>: 766,774
public Object clone() throws CloneNotSupportedException { [EOL]     TimeSeriesCollection clone = (TimeSeriesCollection) super.clone(); [EOL]     clone.data = (List) ObjectUtilities.deepClone(this.data); [EOL]     clone.workingCalendar = (Calendar) this.workingCalendar.clone(); [EOL]     return clone; [EOL] } <line_num>: 783,788
