public Millisecond() { [EOL]     this(new Date()); [EOL] } <line_num>: 104,106
public Millisecond(int millisecond, Second second) { [EOL]     this.millisecond = millisecond; [EOL]     this.second = (byte) second.getSecond(); [EOL]     this.minute = (byte) second.getMinute().getMinute(); [EOL]     this.hour = (byte) second.getMinute().getHourValue(); [EOL]     this.day = second.getMinute().getDay(); [EOL]     peg(Calendar.getInstance()); [EOL] } <line_num>: 114,121
public Millisecond(int millisecond, int second, int minute, int hour, int day, int month, int year) { [EOL]     this(millisecond, new Second(second, minute, hour, day, month, year)); [EOL] } <line_num>: 134,139
public Millisecond(Date time) { [EOL]     this(time, TimeZone.getDefault()); [EOL] } <line_num>: 148,150
public Millisecond(Date time, TimeZone zone) { [EOL]     Calendar calendar = Calendar.getInstance(zone); [EOL]     calendar.setTime(time); [EOL]     this.millisecond = calendar.get(Calendar.MILLISECOND); [EOL]     this.second = (byte) calendar.get(Calendar.SECOND); [EOL]     this.minute = (byte) calendar.get(Calendar.MINUTE); [EOL]     this.hour = (byte) calendar.get(Calendar.HOUR_OF_DAY); [EOL]     this.day = new Day(time, zone); [EOL]     peg(calendar); [EOL] } <line_num>: 158,168
public Second getSecond() { [EOL]     return new Second(this.second, this.minute, this.hour, this.day.getDayOfMonth(), this.day.getMonth(), this.day.getYear()); [EOL] } <line_num>: 175,179
public long getMillisecond() { [EOL]     return this.millisecond; [EOL] } <line_num>: 186,188
public long getFirstMillisecond() { [EOL]     return this.firstMillisecond; [EOL] } <line_num>: 200,202
public long getLastMillisecond() { [EOL]     return this.firstMillisecond; [EOL] } <line_num>: 214,216
public void peg(Calendar calendar) { [EOL]     this.firstMillisecond = getFirstMillisecond(calendar); [EOL] } <line_num>: 226,228
public RegularTimePeriod previous() { [EOL]     RegularTimePeriod result = null; [EOL]     if (this.millisecond != FIRST_MILLISECOND_IN_SECOND) { [EOL]         result = new Millisecond(this.millisecond - 1, getSecond()); [EOL]     } else { [EOL]         Second previous = (Second) getSecond().previous(); [EOL]         if (previous != null) { [EOL]             result = new Millisecond(LAST_MILLISECOND_IN_SECOND, previous); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 235,250
public RegularTimePeriod next() { [EOL]     RegularTimePeriod result = null; [EOL]     if (this.millisecond != LAST_MILLISECOND_IN_SECOND) { [EOL]         result = new Millisecond(this.millisecond + 1, getSecond()); [EOL]     } else { [EOL]         Second next = (Second) getSecond().next(); [EOL]         if (next != null) { [EOL]             result = new Millisecond(FIRST_MILLISECOND_IN_SECOND, next); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 257,271
public long getSerialIndex() { [EOL]     long hourIndex = this.day.getSerialIndex() * 24L + this.hour; [EOL]     long minuteIndex = hourIndex * 60L + this.minute; [EOL]     long secondIndex = minuteIndex * 60L + this.second; [EOL]     return secondIndex * 1000L + this.millisecond; [EOL] } <line_num>: 278,283
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof Millisecond)) { [EOL]         return false; [EOL]     } [EOL]     Millisecond that = (Millisecond) obj; [EOL]     if (this.millisecond != that.millisecond) { [EOL]         return false; [EOL]     } [EOL]     if (this.second != that.second) { [EOL]         return false; [EOL]     } [EOL]     if (this.minute != that.minute) { [EOL]         return false; [EOL]     } [EOL]     if (this.hour != that.hour) { [EOL]         return false; [EOL]     } [EOL]     if (!this.day.equals(that.day)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 296,320
public int hashCode() { [EOL]     int result = 17; [EOL]     result = 37 * result + this.millisecond; [EOL]     result = 37 * result + getSecond().hashCode(); [EOL]     return result; [EOL] } <line_num>: 331,336
public int compareTo(Object obj) { [EOL]     int result; [EOL]     long difference; [EOL]     if (obj instanceof Millisecond) { [EOL]         Millisecond ms = (Millisecond) obj; [EOL]         difference = getFirstMillisecond() - ms.getFirstMillisecond(); [EOL]         if (difference > 0) { [EOL]             result = 1; [EOL]         } else { [EOL]             if (difference < 0) { [EOL]                 result = -1; [EOL]             } else { [EOL]                 result = 0; [EOL]             } [EOL]         } [EOL]     } else if (obj instanceof RegularTimePeriod) { [EOL]         RegularTimePeriod rtp = (RegularTimePeriod) obj; [EOL]         final long thisVal = this.getFirstMillisecond(); [EOL]         final long anotherVal = rtp.getFirstMillisecond(); [EOL]         result = (thisVal < anotherVal ? -1 : (thisVal == anotherVal ? 0 : 1)); [EOL]     } else { [EOL]         result = 1; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 348,390
public long getFirstMillisecond(Calendar calendar) { [EOL]     int year = this.day.getYear(); [EOL]     int month = this.day.getMonth() - 1; [EOL]     int day = this.day.getDayOfMonth(); [EOL]     calendar.clear(); [EOL]     calendar.set(year, month, day, this.hour, this.minute, this.second); [EOL]     calendar.set(Calendar.MILLISECOND, this.millisecond); [EOL]     return calendar.getTime().getTime(); [EOL] } <line_num>: 402,411
public long getLastMillisecond(Calendar calendar) { [EOL]     return getFirstMillisecond(calendar); [EOL] } <line_num>: 423,425
