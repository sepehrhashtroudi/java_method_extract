public ValueSequence() { [EOL]     this(DynamicTimeSeriesCollection.this.maximumItemCount); [EOL] } <line_num>: 132,134
public ValueSequence(int length) { [EOL]     this.dataPoints = new float[length]; [EOL]     for (int i = 0; i < length; i++) { [EOL]         this.dataPoints[i] = 0.0f; [EOL]     } [EOL] } <line_num>: 141,146
public DynamicTimeSeriesCollection(int nSeries, int nMoments) { [EOL]     this(nSeries, nMoments, new Millisecond(), TimeZone.getDefault()); [EOL]     this.newestAt = nMoments - 1; [EOL] } <line_num>: 228,233
public DynamicTimeSeriesCollection(int nSeries, int nMoments, TimeZone zone) { [EOL]     this(nSeries, nMoments, new Millisecond(), zone); [EOL]     this.newestAt = nMoments - 1; [EOL] } <line_num>: 242,246
public DynamicTimeSeriesCollection(int nSeries, int nMoments, RegularTimePeriod timeSample) { [EOL]     this(nSeries, nMoments, timeSample, TimeZone.getDefault()); [EOL] } <line_num>: 255,259
public DynamicTimeSeriesCollection(int nSeries, int nMoments, RegularTimePeriod timeSample, TimeZone zone) { [EOL]     this.maximumItemCount = nMoments; [EOL]     this.historyCount = nMoments; [EOL]     this.seriesKeys = new Comparable[nSeries]; [EOL]     for (int i = 0; i < nSeries; i++) { [EOL]         this.seriesKeys[i] = ""; [EOL]     } [EOL]     this.newestAt = nMoments - 1; [EOL]     this.valueHistory = new ValueSequence[nSeries]; [EOL]     this.timePeriodClass = timeSample.getClass(); [EOL]     if (this.timePeriodClass == Second.class) { [EOL]         this.pointsInTime = new Second[nMoments]; [EOL]     } else if (this.timePeriodClass == Minute.class) { [EOL]         this.pointsInTime = new Minute[nMoments]; [EOL]     } else if (this.timePeriodClass == Hour.class) { [EOL]         this.pointsInTime = new Hour[nMoments]; [EOL]     } [EOL]     this.workingCalendar = Calendar.getInstance(zone); [EOL]     this.position = START; [EOL]     this.domainIsPointsInTime = true; [EOL] } <line_num>: 269,300
public void enterData(int index, float value) { [EOL]     this.dataPoints[index] = value; [EOL] } <line_num>: 154,156
public float getData(int index) { [EOL]     return this.dataPoints[index]; [EOL] } <line_num>: 165,167
public synchronized long setTimeBase(RegularTimePeriod start) { [EOL]     if (this.pointsInTime[0] == null) { [EOL]         this.pointsInTime[0] = start; [EOL]         for (int i = 1; i < this.historyCount; i++) { [EOL]             this.pointsInTime[i] = this.pointsInTime[i - 1].next(); [EOL]         } [EOL]     } [EOL]     long oldestL = this.pointsInTime[0].getFirstMillisecond(this.workingCalendar); [EOL]     long nextL = this.pointsInTime[1].getFirstMillisecond(this.workingCalendar); [EOL]     this.deltaTime = nextL - oldestL; [EOL]     this.oldestAt = 0; [EOL]     this.newestAt = this.historyCount - 1; [EOL]     findDomainLimits(); [EOL]     return this.deltaTime; [EOL] } <line_num>: 313,333
protected void findDomainLimits() { [EOL]     long startL = getOldestTime().getFirstMillisecond(this.workingCalendar); [EOL]     long endL; [EOL]     if (this.domainIsPointsInTime) { [EOL]         endL = getNewestTime().getFirstMillisecond(this.workingCalendar); [EOL]     } else { [EOL]         endL = getNewestTime().getLastMillisecond(this.workingCalendar); [EOL]     } [EOL]     this.domainStart = new Long(startL); [EOL]     this.domainEnd = new Long(endL); [EOL]     this.domainRange = new Range(startL, endL); [EOL] } <line_num>: 339,353
public int getPosition() { [EOL]     return this.position; [EOL] } <line_num>: 360,362
public void setPosition(int position) { [EOL]     this.position = position; [EOL] } <line_num>: 369,371
public void addSeries(float[] values, int seriesNumber, Comparable seriesKey) { [EOL]     invalidateRangeInfo(); [EOL]     int i; [EOL]     if (values == null) { [EOL]         throw new IllegalArgumentException("TimeSeriesDataset.addSeries(): " + "cannot add null array of values."); [EOL]     } [EOL]     if (seriesNumber >= this.valueHistory.length) { [EOL]         throw new IllegalArgumentException("TimeSeriesDataset.addSeries(): " + "cannot add more series than specified in c'tor"); [EOL]     } [EOL]     if (this.valueHistory[seriesNumber] == null) { [EOL]         this.valueHistory[seriesNumber] = new ValueSequence(this.historyCount); [EOL]         this.seriesCount++; [EOL]     } [EOL]     int srcLength = values.length; [EOL]     int copyLength = this.historyCount; [EOL]     boolean fillNeeded = false; [EOL]     if (srcLength < this.historyCount) { [EOL]         fillNeeded = true; [EOL]         copyLength = srcLength; [EOL]     } [EOL]     for (i = 0; i < copyLength; i++) { [EOL]         this.valueHistory[seriesNumber].enterData(i, values[i]); [EOL]     } [EOL]     if (fillNeeded) { [EOL]         for (i = copyLength; i < this.historyCount; i++) { [EOL]             this.valueHistory[seriesNumber].enterData(i, 0.0f); [EOL]         } [EOL]     } [EOL]     if (seriesKey != null) { [EOL]         this.seriesKeys[seriesNumber] = seriesKey; [EOL]     } [EOL]     fireSeriesChanged(); [EOL] } <line_num>: 384,428
public void setSeriesKey(int seriesNumber, Comparable key) { [EOL]     this.seriesKeys[seriesNumber] = key; [EOL] } <line_num>: 436,438
public void addValue(int seriesNumber, int index, float value) { [EOL]     invalidateRangeInfo(); [EOL]     if (seriesNumber >= this.valueHistory.length) { [EOL]         throw new IllegalArgumentException("TimeSeriesDataset.addValue(): series #" + seriesNumber + "unspecified in c'tor"); [EOL]     } [EOL]     if (this.valueHistory[seriesNumber] == null) { [EOL]         this.valueHistory[seriesNumber] = new ValueSequence(this.historyCount); [EOL]         this.seriesCount++; [EOL]     } [EOL]     this.valueHistory[seriesNumber].enterData(index, value); [EOL]     fireSeriesChanged(); [EOL] } <line_num>: 447,467
public int getSeriesCount() { [EOL]     return this.seriesCount; [EOL] } <line_num>: 474,476
public int getItemCount(int series) { [EOL]     return this.historyCount; [EOL] } <line_num>: 487,490
protected int translateGet(int toFetch) { [EOL]     if (this.oldestAt == 0) { [EOL]         return toFetch; [EOL]     } [EOL]     int newIndex = toFetch + this.oldestAt; [EOL]     if (newIndex >= this.historyCount) { [EOL]         newIndex -= this.historyCount; [EOL]     } [EOL]     return newIndex; [EOL] } <line_num>: 501,511
public int offsetFromNewest(int delta) { [EOL]     return wrapOffset(this.newestAt + delta); [EOL] } <line_num>: 520,522
public int offsetFromOldest(int delta) { [EOL]     return wrapOffset(this.oldestAt + delta); [EOL] } <line_num>: 531,533
protected int wrapOffset(int protoIndex) { [EOL]     int tmp = protoIndex; [EOL]     if (tmp >= this.historyCount) { [EOL]         tmp -= this.historyCount; [EOL]     } else if (tmp < 0) { [EOL]         tmp += this.historyCount; [EOL]     } [EOL]     return tmp; [EOL] } <line_num>: 542,551
public synchronized RegularTimePeriod advanceTime() { [EOL]     RegularTimePeriod nextInstant = this.pointsInTime[this.newestAt].next(); [EOL]     this.newestAt = this.oldestAt; [EOL]     boolean extremaChanged = false; [EOL]     float oldMax = 0.0f; [EOL]     if (this.maxValue != null) { [EOL]         oldMax = this.maxValue.floatValue(); [EOL]     } [EOL]     for (int s = 0; s < getSeriesCount(); s++) { [EOL]         if (this.valueHistory[s].getData(this.oldestAt) == oldMax) { [EOL]             extremaChanged = true; [EOL]         } [EOL]         if (extremaChanged) { [EOL]             break; [EOL]         } [EOL]     } [EOL]     if (extremaChanged) { [EOL]         invalidateRangeInfo(); [EOL]     } [EOL]     float wiper = (float) 0.0; [EOL]     for (int s = 0; s < getSeriesCount(); s++) { [EOL]         this.valueHistory[s].enterData(this.newestAt, wiper); [EOL]     } [EOL]     this.pointsInTime[this.newestAt] = nextInstant; [EOL]     this.oldestAt++; [EOL]     if (this.oldestAt >= this.historyCount) { [EOL]         this.oldestAt = 0; [EOL]     } [EOL]     long startL = this.domainStart.longValue(); [EOL]     this.domainStart = new Long(startL + this.deltaTime); [EOL]     long endL = this.domainEnd.longValue(); [EOL]     this.domainEnd = new Long(endL + this.deltaTime); [EOL]     this.domainRange = new Range(startL, endL); [EOL]     fireSeriesChanged(); [EOL]     return nextInstant; [EOL] } <line_num>: 560,605
public void invalidateRangeInfo() { [EOL]     this.maxValue = null; [EOL]     this.valueRange = null; [EOL] } <line_num>: 612,615
protected double findMaxValue() { [EOL]     double max = 0.0f; [EOL]     for (int s = 0; s < getSeriesCount(); s++) { [EOL]         for (int i = 0; i < this.historyCount; i++) { [EOL]             double tmp = getYValue(s, i); [EOL]             if (tmp > max) { [EOL]                 max = tmp; [EOL]             } [EOL]         } [EOL]     } [EOL]     return max; [EOL] } <line_num>: 622,633
public int getOldestIndex() { [EOL]     return this.oldestAt; [EOL] } <line_num>: 642,644
public int getNewestIndex() { [EOL]     return this.newestAt; [EOL] } <line_num>: 651,653
public void appendData(float[] newData) { [EOL]     int nDataPoints = newData.length; [EOL]     if (nDataPoints > this.valueHistory.length) { [EOL]         throw new IllegalArgumentException("More data than series to put them in"); [EOL]     } [EOL]     int s; [EOL]     for (s = 0; s < nDataPoints; s++) { [EOL]         if (this.valueHistory[s] == null) { [EOL]             this.valueHistory[s] = new ValueSequence(this.historyCount); [EOL]         } [EOL]         this.valueHistory[s].enterData(this.newestAt, newData[s]); [EOL]     } [EOL]     fireSeriesChanged(); [EOL] } <line_num>: 662,679
public void appendData(float[] newData, int insertionIndex, int refresh) { [EOL]     int nDataPoints = newData.length; [EOL]     if (nDataPoints > this.valueHistory.length) { [EOL]         throw new IllegalArgumentException("More data than series to put them " + "in"); [EOL]     } [EOL]     for (int s = 0; s < nDataPoints; s++) { [EOL]         if (this.valueHistory[s] == null) { [EOL]             this.valueHistory[s] = new ValueSequence(this.historyCount); [EOL]         } [EOL]         this.valueHistory[s].enterData(insertionIndex, newData[s]); [EOL]     } [EOL]     if (refresh > 0) { [EOL]         insertionIndex++; [EOL]         if (insertionIndex % refresh == 0) { [EOL]             fireSeriesChanged(); [EOL]         } [EOL]     } [EOL] } <line_num>: 689,708
public RegularTimePeriod getNewestTime() { [EOL]     return this.pointsInTime[this.newestAt]; [EOL] } <line_num>: 715,717
public RegularTimePeriod getOldestTime() { [EOL]     return this.pointsInTime[this.oldestAt]; [EOL] } <line_num>: 724,726
public Number getX(int series, int item) { [EOL]     RegularTimePeriod tp = this.pointsInTime[translateGet(item)]; [EOL]     return new Long(getX(tp)); [EOL] } <line_num>: 738,741
public double getYValue(int series, int item) { [EOL]     ValueSequence values = this.valueHistory[series]; [EOL]     return values.getData(translateGet(item)); [EOL] } <line_num>: 751,756
public Number getY(int series, int item) { [EOL]     return new Float(getYValue(series, item)); [EOL] } <line_num>: 766,768
public Number getStartX(int series, int item) { [EOL]     RegularTimePeriod tp = this.pointsInTime[translateGet(item)]; [EOL]     return new Long(tp.getFirstMillisecond(this.workingCalendar)); [EOL] } <line_num>: 778,781
public Number getEndX(int series, int item) { [EOL]     RegularTimePeriod tp = this.pointsInTime[translateGet(item)]; [EOL]     return new Long(tp.getLastMillisecond(this.workingCalendar)); [EOL] } <line_num>: 791,794
public Number getStartY(int series, int item) { [EOL]     return getY(series, item); [EOL] } <line_num>: 804,806
public Number getEndY(int series, int item) { [EOL]     return getY(series, item); [EOL] } <line_num>: 816,818
public Comparable getSeriesKey(int series) { [EOL]     return this.seriesKeys[series]; [EOL] } <line_num>: 838,840
protected void fireSeriesChanged() { [EOL]     seriesChanged(new SeriesChangeEvent(this)); [EOL] } <line_num>: 845,847
public double getDomainLowerBound(boolean includeInterval) { [EOL]     return this.domainStart.doubleValue(); [EOL] } <line_num>: 862,865
public double getDomainUpperBound(boolean includeInterval) { [EOL]     return this.domainEnd.doubleValue(); [EOL] } <line_num>: 875,878
public Range getDomainBounds(boolean includeInterval) { [EOL]     if (this.domainRange == null) { [EOL]         findDomainLimits(); [EOL]     } [EOL]     return this.domainRange; [EOL] } <line_num>: 888,893
private long getX(RegularTimePeriod period) { [EOL]     switch(this.position) { [EOL]         case (START): [EOL]             return period.getFirstMillisecond(this.workingCalendar); [EOL]         case (MIDDLE): [EOL]             return period.getMiddleMillisecond(this.workingCalendar); [EOL]         case (END): [EOL]             return period.getLastMillisecond(this.workingCalendar); [EOL]         default: [EOL]             return period.getMiddleMillisecond(this.workingCalendar); [EOL]     } [EOL] } <line_num>: 902,913
public double getRangeLowerBound(boolean includeInterval) { [EOL]     double result = Double.NaN; [EOL]     if (this.minValue != null) { [EOL]         result = this.minValue.doubleValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 929,935
public double getRangeUpperBound(boolean includeInterval) { [EOL]     double result = Double.NaN; [EOL]     if (this.maxValue != null) { [EOL]         result = this.maxValue.doubleValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 945,951
public Range getRangeBounds(boolean includeInterval) { [EOL]     if (this.valueRange == null) { [EOL]         double max = getRangeUpperBound(includeInterval); [EOL]         this.valueRange = new Range(0.0, max); [EOL]     } [EOL]     return this.valueRange; [EOL] } <line_num>: 961,967
