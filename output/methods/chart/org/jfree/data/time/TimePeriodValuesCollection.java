public TimePeriodValuesCollection() { [EOL]     this((TimePeriodValues) null); [EOL] } <line_num>: 91,93
public TimePeriodValuesCollection(TimePeriodValues series) { [EOL]     this.data = new java.util.ArrayList(); [EOL]     this.xPosition = TimePeriodAnchor.MIDDLE; [EOL]     if (series != null) { [EOL]         this.data.add(series); [EOL]         series.addChangeListener(this); [EOL]     } [EOL] } <line_num>: 101,108
public TimePeriodAnchor getXPosition() { [EOL]     return this.xPosition; [EOL] } <line_num>: 117,119
public void setXPosition(TimePeriodAnchor position) { [EOL]     if (position == null) { [EOL]         throw new IllegalArgumentException("Null 'position' argument."); [EOL]     } [EOL]     this.xPosition = position; [EOL] } <line_num>: 128,133
public int getSeriesCount() { [EOL]     return this.data.size(); [EOL] } <line_num>: 140,142
public TimePeriodValues getSeries(int series) { [EOL]     if ((series < 0) || (series >= getSeriesCount())) { [EOL]         throw new IllegalArgumentException("Index 'series' out of range."); [EOL]     } [EOL]     return (TimePeriodValues) this.data.get(series); [EOL] } <line_num>: 151,156
public Comparable getSeriesKey(int series) { [EOL]     return getSeries(series).getKey(); [EOL] } <line_num>: 165,168
public void addSeries(TimePeriodValues series) { [EOL]     if (series == null) { [EOL]         throw new IllegalArgumentException("Null 'series' argument."); [EOL]     } [EOL]     this.data.add(series); [EOL]     series.addChangeListener(this); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 177,188
public void removeSeries(TimePeriodValues series) { [EOL]     if (series == null) { [EOL]         throw new IllegalArgumentException("Null 'series' argument."); [EOL]     } [EOL]     this.data.remove(series); [EOL]     series.removeChangeListener(this); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 195,205
public void removeSeries(int index) { [EOL]     TimePeriodValues series = getSeries(index); [EOL]     if (series != null) { [EOL]         removeSeries(series); [EOL]     } [EOL] } <line_num>: 212,217
public int getItemCount(int series) { [EOL]     return getSeries(series).getItemCount(); [EOL] } <line_num>: 228,230
public Number getX(int series, int item) { [EOL]     TimePeriodValues ts = (TimePeriodValues) this.data.get(series); [EOL]     TimePeriodValue dp = ts.getDataItem(item); [EOL]     TimePeriod period = dp.getPeriod(); [EOL]     return new Long(getX(period)); [EOL] } <line_num>: 240,245
private long getX(TimePeriod period) { [EOL]     if (this.xPosition == TimePeriodAnchor.START) { [EOL]         return period.getStart().getTime(); [EOL]     } else if (this.xPosition == TimePeriodAnchor.MIDDLE) { [EOL]         return period.getStart().getTime() / 2 + period.getEnd().getTime() / 2; [EOL]     } else if (this.xPosition == TimePeriodAnchor.END) { [EOL]         return period.getEnd().getTime(); [EOL]     } else { [EOL]         throw new IllegalStateException("TimePeriodAnchor unknown."); [EOL]     } [EOL] } <line_num>: 254,270
public Number getStartX(int series, int item) { [EOL]     TimePeriodValues ts = (TimePeriodValues) this.data.get(series); [EOL]     TimePeriodValue dp = ts.getDataItem(item); [EOL]     return new Long(dp.getPeriod().getStart().getTime()); [EOL] } <line_num>: 280,284
public Number getEndX(int series, int item) { [EOL]     TimePeriodValues ts = (TimePeriodValues) this.data.get(series); [EOL]     TimePeriodValue dp = ts.getDataItem(item); [EOL]     return new Long(dp.getPeriod().getEnd().getTime()); [EOL] } <line_num>: 294,298
public Number getY(int series, int item) { [EOL]     TimePeriodValues ts = (TimePeriodValues) this.data.get(series); [EOL]     TimePeriodValue dp = ts.getDataItem(item); [EOL]     return dp.getValue(); [EOL] } <line_num>: 308,312
public Number getStartY(int series, int item) { [EOL]     return getY(series, item); [EOL] } <line_num>: 322,324
public Number getEndY(int series, int item) { [EOL]     return getY(series, item); [EOL] } <line_num>: 334,336
public double getDomainLowerBound(boolean includeInterval) { [EOL]     double result = Double.NaN; [EOL]     Range r = getDomainBounds(includeInterval); [EOL]     if (r != null) { [EOL]         result = r.getLowerBound(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 346,353
public double getDomainUpperBound(boolean includeInterval) { [EOL]     double result = Double.NaN; [EOL]     Range r = getDomainBounds(includeInterval); [EOL]     if (r != null) { [EOL]         result = r.getUpperBound(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 363,370
public Range getDomainBounds(boolean includeInterval) { [EOL]     Range result = null; [EOL]     Range temp = null; [EOL]     Iterator iterator = this.data.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         TimePeriodValues series = (TimePeriodValues) iterator.next(); [EOL]         int count = series.getItemCount(); [EOL]         if (count > 0) { [EOL]             TimePeriod start = series.getTimePeriod(series.getMinStartIndex()); [EOL]             TimePeriod end = series.getTimePeriod(series.getMaxEndIndex()); [EOL]             if (!includeInterval) { [EOL]                 if (this.xPosition == TimePeriodAnchor.START) { [EOL]                     TimePeriod maxStart = series.getTimePeriod(series.getMaxStartIndex()); [EOL]                     temp = new Range(start.getStart().getTime(), maxStart.getStart().getTime()); [EOL]                 } else if (this.xPosition == TimePeriodAnchor.MIDDLE) { [EOL]                     TimePeriod minMiddle = series.getTimePeriod(series.getMinMiddleIndex()); [EOL]                     long s1 = minMiddle.getStart().getTime(); [EOL]                     long e1 = minMiddle.getEnd().getTime(); [EOL]                     TimePeriod maxMiddle = series.getTimePeriod(series.getMaxMiddleIndex()); [EOL]                     long s2 = maxMiddle.getStart().getTime(); [EOL]                     long e2 = maxMiddle.getEnd().getTime(); [EOL]                     temp = new Range(s1 + (e1 - s1) / 2, s2 + (e2 - s2) / 2); [EOL]                 } else if (this.xPosition == TimePeriodAnchor.END) { [EOL]                     TimePeriod minEnd = series.getTimePeriod(series.getMinEndIndex()); [EOL]                     temp = new Range(minEnd.getEnd().getTime(), end.getEnd().getTime()); [EOL]                 } [EOL]             } else { [EOL]                 temp = new Range(start.getStart().getTime(), end.getEnd().getTime()); [EOL]             } [EOL]             result = Range.combine(result, temp); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 380,425
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof TimePeriodValuesCollection)) { [EOL]         return false; [EOL]     } [EOL]     TimePeriodValuesCollection that = (TimePeriodValuesCollection) obj; [EOL]     if (this.xPosition != that.xPosition) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.data, that.data)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 434,449
