public SimpleTimePeriod(long start, long end) { [EOL]     if (start > end) { [EOL]         throw new IllegalArgumentException("Requires start <= end."); [EOL]     } [EOL]     this.start = start; [EOL]     this.end = end; [EOL] } <line_num>: 76,82
public SimpleTimePeriod(Date start, Date end) { [EOL]     this(start.getTime(), end.getTime()); [EOL] } <line_num>: 90,92
public Date getStart() { [EOL]     return new Date(this.start); [EOL] } <line_num>: 99,101
public long getStartMillis() { [EOL]     return this.start; [EOL] } <line_num>: 110,112
public Date getEnd() { [EOL]     return new Date(this.end); [EOL] } <line_num>: 119,121
public long getEndMillis() { [EOL]     return this.end; [EOL] } <line_num>: 130,132
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof TimePeriod)) { [EOL]         return false; [EOL]     } [EOL]     TimePeriod that = (TimePeriod) obj; [EOL]     if (!this.getStart().equals(that.getStart())) { [EOL]         return false; [EOL]     } [EOL]     if (!this.getEnd().equals(that.getEnd())) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 143,158
public int compareTo(Object obj) { [EOL]     TimePeriod that = (TimePeriod) obj; [EOL]     long t0 = getStart().getTime(); [EOL]     long t1 = getEnd().getTime(); [EOL]     long m0 = t0 + (t1 - t0) / 2L; [EOL]     long t2 = that.getStart().getTime(); [EOL]     long t3 = that.getEnd().getTime(); [EOL]     long m1 = t2 + (t3 - t2) / 2L; [EOL]     if (m0 < m1) { [EOL]         return -1; [EOL]     } else if (m0 > m1) { [EOL]         return 1; [EOL]     } else { [EOL]         if (t0 < t2) { [EOL]             return -1; [EOL]         } else if (t0 > t2) { [EOL]             return 1; [EOL]         } else { [EOL]             if (t1 < t3) { [EOL]                 return -1; [EOL]             } else if (t1 > t3) { [EOL]                 return 1; [EOL]             } else { [EOL]                 return 0; [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 171,204
public int hashCode() { [EOL]     int result = 17; [EOL]     result = 37 * result + (int) this.start; [EOL]     result = 37 * result + (int) this.end; [EOL]     return result; [EOL] } <line_num>: 215,220
