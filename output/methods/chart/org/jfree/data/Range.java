public Range(double lower, double upper) { [EOL]     if (lower > upper) { [EOL]         String msg = "Range(double, double): require lower (" + lower + ") <= upper (" + upper + ")."; [EOL]         throw new IllegalArgumentException(msg); [EOL]     } [EOL]     this.lower = lower; [EOL]     this.upper = upper; [EOL] } <line_num>: 86,94
public double getLowerBound() { [EOL]     return this.lower; [EOL] } <line_num>: 101,103
public double getUpperBound() { [EOL]     return this.upper; [EOL] } <line_num>: 110,112
public double getLength() { [EOL]     return this.upper - this.lower; [EOL] } <line_num>: 119,121
public double getCentralValue() { [EOL]     return this.lower / 2.0 + this.upper / 2.0; [EOL] } <line_num>: 128,130
public boolean contains(double value) { [EOL]     return (value >= this.lower && value <= this.upper); [EOL] } <line_num>: 140,142
public boolean intersects(double b0, double b1) { [EOL]     if (b0 <= this.lower) { [EOL]         return (b1 > this.lower); [EOL]     } else { [EOL]         return (b0 < this.upper && b1 >= b0); [EOL]     } [EOL] } <line_num>: 153,160
public boolean intersects(Range range) { [EOL]     return intersects(range.getLowerBound(), range.getUpperBound()); [EOL] } <line_num>: 172,174
public double constrain(double value) { [EOL]     double result = value; [EOL]     if (!contains(value)) { [EOL]         if (value > this.upper) { [EOL]             result = this.upper; [EOL]         } else if (value < this.lower) { [EOL]             result = this.lower; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 184,195
public static Range combine(Range range1, Range range2) { [EOL]     if (range1 == null) { [EOL]         return range2; [EOL]     } else { [EOL]         if (range2 == null) { [EOL]             return range1; [EOL]         } else { [EOL]             double l = Math.min(range1.getLowerBound(), range2.getLowerBound()); [EOL]             double u = Math.max(range1.getUpperBound(), range2.getUpperBound()); [EOL]             return new Range(l, u); [EOL]         } [EOL]     } [EOL] } <line_num>: 213,229
public static Range expandToInclude(Range range, double value) { [EOL]     if (range == null) { [EOL]         return new Range(value, value); [EOL]     } [EOL]     if (value < range.getLowerBound()) { [EOL]         return new Range(value, range.getUpperBound()); [EOL]     } else if (value > range.getUpperBound()) { [EOL]         return new Range(range.getLowerBound(), value); [EOL]     } else { [EOL]         return range; [EOL]     } [EOL] } <line_num>: 242,255
public static Range expand(Range range, double lowerMargin, double upperMargin) { [EOL]     if (range == null) { [EOL]         throw new IllegalArgumentException("Null 'range' argument."); [EOL]     } [EOL]     double length = range.getLength(); [EOL]     double lower = range.getLowerBound() - length * lowerMargin; [EOL]     double upper = range.getUpperBound() + length * upperMargin; [EOL]     if (lower > upper) { [EOL]         lower = lower / 2.0 + upper / 2.0; [EOL]         upper = lower; [EOL]     } [EOL]     return new Range(lower, upper); [EOL] } <line_num>: 268,281
public static Range shift(Range base, double delta) { [EOL]     return shift(base, delta, false); [EOL] } <line_num>: 291,293
public static Range shift(Range base, double delta, boolean allowZeroCrossing) { [EOL]     if (base == null) { [EOL]         throw new IllegalArgumentException("Null 'base' argument."); [EOL]     } [EOL]     if (allowZeroCrossing) { [EOL]         return new Range(base.getLowerBound() + delta, base.getUpperBound() + delta); [EOL]     } else { [EOL]         return new Range(shiftWithNoZeroCrossing(base.getLowerBound(), delta), shiftWithNoZeroCrossing(base.getUpperBound(), delta)); [EOL]     } [EOL] } <line_num>: 306,320
private static double shiftWithNoZeroCrossing(double value, double delta) { [EOL]     if (value > 0.0) { [EOL]         return Math.max(value + delta, 0.0); [EOL]     } else if (value < 0.0) { [EOL]         return Math.min(value + delta, 0.0); [EOL]     } else { [EOL]         return value + delta; [EOL]     } [EOL] } <line_num>: 331,341
public static Range scale(Range base, double factor) { [EOL]     if (base == null) { [EOL]         throw new IllegalArgumentException("Null 'base' argument."); [EOL]     } [EOL]     if (factor < 0) { [EOL]         throw new IllegalArgumentException("Negative 'factor' argument."); [EOL]     } [EOL]     return new Range(base.getLowerBound() * factor, base.getUpperBound() * factor); [EOL] } <line_num>: 353,362
public boolean equals(Object obj) { [EOL]     if (!(obj instanceof Range)) { [EOL]         return false; [EOL]     } [EOL]     Range range = (Range) obj; [EOL]     if (!(this.lower == range.lower)) { [EOL]         return false; [EOL]     } [EOL]     if (!(this.upper == range.upper)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 371,383
public int hashCode() { [EOL]     int result; [EOL]     long temp; [EOL]     temp = Double.doubleToLongBits(this.lower); [EOL]     result = (int) (temp ^ (temp >>> 32)); [EOL]     temp = Double.doubleToLongBits(this.upper); [EOL]     result = 29 * result + (int) (temp ^ (temp >>> 32)); [EOL]     return result; [EOL] } <line_num>: 390,398
public String toString() { [EOL]     return ("Range[" + this.lower + "," + this.upper + "]"); [EOL] } <line_num>: 406,408
