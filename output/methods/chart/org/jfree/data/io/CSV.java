public CSV() { [EOL]     this(',', '"'); [EOL] } <line_num>: 68,70
public CSV(char fieldDelimiter, char textDelimiter) { [EOL]     this.fieldDelimiter = fieldDelimiter; [EOL]     this.textDelimiter = textDelimiter; [EOL] } <line_num>: 80,83
public CategoryDataset readCategoryDataset(Reader in) throws IOException { [EOL]     DefaultCategoryDataset dataset = new DefaultCategoryDataset(); [EOL]     BufferedReader reader = new BufferedReader(in); [EOL]     List columnKeys = null; [EOL]     int lineIndex = 0; [EOL]     String line = reader.readLine(); [EOL]     while (line != null) { [EOL]         if (lineIndex == 0) { [EOL]             columnKeys = extractColumnKeys(line); [EOL]         } else { [EOL]             extractRowKeyAndData(line, dataset, columnKeys); [EOL]         } [EOL]         line = reader.readLine(); [EOL]         lineIndex++; [EOL]     } [EOL]     return dataset; [EOL] } <line_num>: 94,113
private List extractColumnKeys(String line) { [EOL]     List keys = new java.util.ArrayList(); [EOL]     int fieldIndex = 0; [EOL]     int start = 0; [EOL]     for (int i = 0; i < line.length(); i++) { [EOL]         if (line.charAt(i) == this.fieldDelimiter) { [EOL]             if (fieldIndex > 0) { [EOL]                 String key = line.substring(start, i); [EOL]                 keys.add(removeStringDelimiters(key)); [EOL]             } [EOL]             start = i + 1; [EOL]             fieldIndex++; [EOL]         } [EOL]     } [EOL]     String key = line.substring(start, line.length()); [EOL]     keys.add(removeStringDelimiters(key)); [EOL]     return keys; [EOL] } <line_num>: 122,140
private void extractRowKeyAndData(String line, DefaultCategoryDataset dataset, List columnKeys) { [EOL]     Comparable rowKey = null; [EOL]     int fieldIndex = 0; [EOL]     int start = 0; [EOL]     for (int i = 0; i < line.length(); i++) { [EOL]         if (line.charAt(i) == this.fieldDelimiter) { [EOL]             if (fieldIndex == 0) { [EOL]                 String key = line.substring(start, i); [EOL]                 rowKey = removeStringDelimiters(key); [EOL]             } else { [EOL]                 Double value = Double.valueOf(removeStringDelimiters(line.substring(start, i))); [EOL]                 dataset.addValue(value, rowKey, (Comparable) columnKeys.get(fieldIndex - 1)); [EOL]             } [EOL]             start = i + 1; [EOL]             fieldIndex++; [EOL]         } [EOL]     } [EOL]     Double value = Double.valueOf(removeStringDelimiters(line.substring(start, line.length()))); [EOL]     dataset.addValue(value, rowKey, (Comparable) columnKeys.get(fieldIndex - 1)); [EOL] } <line_num>: 149,180
private String removeStringDelimiters(String key) { [EOL]     String k = key.trim(); [EOL]     if (k.charAt(0) == this.textDelimiter) { [EOL]         k = k.substring(1); [EOL]     } [EOL]     if (k.charAt(k.length() - 1) == this.textDelimiter) { [EOL]         k = k.substring(0, k.length() - 1); [EOL]     } [EOL]     return k; [EOL] } <line_num>: 190,199
