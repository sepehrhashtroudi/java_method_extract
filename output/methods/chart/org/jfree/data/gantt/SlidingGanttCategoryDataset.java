public SlidingGanttCategoryDataset(GanttCategoryDataset underlying, int firstColumn, int maxColumns) { [EOL]     this.underlying = underlying; [EOL]     this.firstCategoryIndex = firstColumn; [EOL]     this.maximumCategoryCount = maxColumns; [EOL] } <line_num>: 81,86
public GanttCategoryDataset getUnderlyingDataset() { [EOL]     return this.underlying; [EOL] } <line_num>: 93,95
public int getFirstCategoryIndex() { [EOL]     return this.firstCategoryIndex; [EOL] } <line_num>: 104,106
public void setFirstCategoryIndex(int first) { [EOL]     if (first < 0 || first >= this.underlying.getColumnCount()) { [EOL]         throw new IllegalArgumentException("Invalid index."); [EOL]     } [EOL]     this.firstCategoryIndex = first; [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 117,124
public int getMaximumCategoryCount() { [EOL]     return this.maximumCategoryCount; [EOL] } <line_num>: 133,135
public void setMaximumCategoryCount(int max) { [EOL]     if (max < 0) { [EOL]         throw new IllegalArgumentException("Requires 'max' >= 0."); [EOL]     } [EOL]     this.maximumCategoryCount = max; [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 145,152
private int lastCategoryIndex() { [EOL]     if (this.maximumCategoryCount == 0) { [EOL]         return -1; [EOL]     } [EOL]     return Math.min(this.firstCategoryIndex + this.maximumCategoryCount, this.underlying.getColumnCount()) - 1; [EOL] } <line_num>: 159,165
public int getColumnIndex(Comparable key) { [EOL]     int index = this.underlying.getColumnIndex(key); [EOL]     if (index >= this.firstCategoryIndex && index <= lastCategoryIndex()) { [EOL]         return index - this.firstCategoryIndex; [EOL]     } [EOL]     return -1; [EOL] } <line_num>: 174,180
public Comparable getColumnKey(int column) { [EOL]     return this.underlying.getColumnKey(column + this.firstCategoryIndex); [EOL] } <line_num>: 191,193
public List getColumnKeys() { [EOL]     List result = new java.util.ArrayList(); [EOL]     int last = lastCategoryIndex(); [EOL]     for (int i = this.firstCategoryIndex; i < last; i++) { [EOL]         result.add(this.underlying.getColumnKey(i)); [EOL]     } [EOL]     return Collections.unmodifiableList(result); [EOL] } <line_num>: 202,209
public int getRowIndex(Comparable key) { [EOL]     return this.underlying.getRowIndex(key); [EOL] } <line_num>: 218,220
public Comparable getRowKey(int row) { [EOL]     return this.underlying.getRowKey(row); [EOL] } <line_num>: 231,233
public List getRowKeys() { [EOL]     return this.underlying.getRowKeys(); [EOL] } <line_num>: 240,242
public Number getValue(Comparable rowKey, Comparable columnKey) { [EOL]     int r = getRowIndex(rowKey); [EOL]     int c = getColumnIndex(columnKey); [EOL]     if (c != -1) { [EOL]         return this.underlying.getValue(r, c + this.firstCategoryIndex); [EOL]     } else { [EOL]         throw new UnknownKeyException("Unknown columnKey: " + columnKey); [EOL]     } [EOL] } <line_num>: 254,263
public int getColumnCount() { [EOL]     int last = lastCategoryIndex(); [EOL]     if (last == -1) { [EOL]         return 0; [EOL]     } else { [EOL]         return Math.max(last - this.firstCategoryIndex + 1, 0); [EOL]     } [EOL] } <line_num>: 270,278
public int getRowCount() { [EOL]     return this.underlying.getRowCount(); [EOL] } <line_num>: 285,287
public Number getValue(int row, int column) { [EOL]     return this.underlying.getValue(row, column + this.firstCategoryIndex); [EOL] } <line_num>: 297,299
public Number getPercentComplete(Comparable rowKey, Comparable columnKey) { [EOL]     int r = getRowIndex(rowKey); [EOL]     int c = getColumnIndex(columnKey); [EOL]     if (c != -1) { [EOL]         return this.underlying.getPercentComplete(r, c + this.firstCategoryIndex); [EOL]     } else { [EOL]         throw new UnknownKeyException("Unknown columnKey: " + columnKey); [EOL]     } [EOL] } <line_num>: 309,319
public Number getPercentComplete(Comparable rowKey, Comparable columnKey, int subinterval) { [EOL]     int r = getRowIndex(rowKey); [EOL]     int c = getColumnIndex(columnKey); [EOL]     if (c != -1) { [EOL]         return this.underlying.getPercentComplete(r, c + this.firstCategoryIndex, subinterval); [EOL]     } else { [EOL]         throw new UnknownKeyException("Unknown columnKey: " + columnKey); [EOL]     } [EOL] } <line_num>: 332,343
public Number getEndValue(Comparable rowKey, Comparable columnKey, int subinterval) { [EOL]     int r = getRowIndex(rowKey); [EOL]     int c = getColumnIndex(columnKey); [EOL]     if (c != -1) { [EOL]         return this.underlying.getEndValue(r, c + this.firstCategoryIndex, subinterval); [EOL]     } else { [EOL]         throw new UnknownKeyException("Unknown columnKey: " + columnKey); [EOL]     } [EOL] } <line_num>: 356,367
public Number getEndValue(int row, int column, int subinterval) { [EOL]     return this.underlying.getEndValue(row, column + this.firstCategoryIndex, subinterval); [EOL] } <line_num>: 380,383
public Number getPercentComplete(int series, int category) { [EOL]     return this.underlying.getPercentComplete(series, category + this.firstCategoryIndex); [EOL] } <line_num>: 393,396
public Number getPercentComplete(int row, int column, int subinterval) { [EOL]     return this.underlying.getPercentComplete(row, column + this.firstCategoryIndex, subinterval); [EOL] } <line_num>: 409,412
public Number getStartValue(Comparable rowKey, Comparable columnKey, int subinterval) { [EOL]     int r = getRowIndex(rowKey); [EOL]     int c = getColumnIndex(columnKey); [EOL]     if (c != -1) { [EOL]         return this.underlying.getStartValue(r, c + this.firstCategoryIndex, subinterval); [EOL]     } else { [EOL]         throw new UnknownKeyException("Unknown columnKey: " + columnKey); [EOL]     } [EOL] } <line_num>: 425,436
public Number getStartValue(int row, int column, int subinterval) { [EOL]     return this.underlying.getStartValue(row, column + this.firstCategoryIndex, subinterval); [EOL] } <line_num>: 449,452
public int getSubIntervalCount(Comparable rowKey, Comparable columnKey) { [EOL]     int r = getRowIndex(rowKey); [EOL]     int c = getColumnIndex(columnKey); [EOL]     if (c != -1) { [EOL]         return this.underlying.getSubIntervalCount(r, c + this.firstCategoryIndex); [EOL]     } else { [EOL]         throw new UnknownKeyException("Unknown columnKey: " + columnKey); [EOL]     } [EOL] } <line_num>: 464,474
public int getSubIntervalCount(int row, int column) { [EOL]     return this.underlying.getSubIntervalCount(row, column + this.firstCategoryIndex); [EOL] } <line_num>: 486,489
public Number getStartValue(Comparable rowKey, Comparable columnKey) { [EOL]     int r = getRowIndex(rowKey); [EOL]     int c = getColumnIndex(columnKey); [EOL]     if (c != -1) { [EOL]         return this.underlying.getStartValue(r, c + this.firstCategoryIndex); [EOL]     } else { [EOL]         throw new UnknownKeyException("Unknown columnKey: " + columnKey); [EOL]     } [EOL] } <line_num>: 501,510
public Number getStartValue(int row, int column) { [EOL]     return this.underlying.getStartValue(row, column + this.firstCategoryIndex); [EOL] } <line_num>: 522,525
public Number getEndValue(Comparable rowKey, Comparable columnKey) { [EOL]     int r = getRowIndex(rowKey); [EOL]     int c = getColumnIndex(columnKey); [EOL]     if (c != -1) { [EOL]         return this.underlying.getEndValue(r, c + this.firstCategoryIndex); [EOL]     } else { [EOL]         throw new UnknownKeyException("Unknown columnKey: " + columnKey); [EOL]     } [EOL] } <line_num>: 537,546
public Number getEndValue(int series, int category) { [EOL]     return this.underlying.getEndValue(series, category + this.firstCategoryIndex); [EOL] } <line_num>: 556,559
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof SlidingGanttCategoryDataset)) { [EOL]         return false; [EOL]     } [EOL]     SlidingGanttCategoryDataset that = (SlidingGanttCategoryDataset) obj; [EOL]     if (this.firstCategoryIndex != that.firstCategoryIndex) { [EOL]         return false; [EOL]     } [EOL]     if (this.maximumCategoryCount != that.maximumCategoryCount) { [EOL]         return false; [EOL]     } [EOL]     if (!this.underlying.equals(that.underlying)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 569,587
public Object clone() throws CloneNotSupportedException { [EOL]     SlidingGanttCategoryDataset clone = (SlidingGanttCategoryDataset) super.clone(); [EOL]     if (this.underlying instanceof PublicCloneable) { [EOL]         PublicCloneable pc = (PublicCloneable) this.underlying; [EOL]         clone.underlying = (GanttCategoryDataset) pc.clone(); [EOL]     } [EOL]     return clone; [EOL] } <line_num>: 603,611
