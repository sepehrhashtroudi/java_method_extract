public TaskSeriesCollection() { [EOL]     this.keys = new java.util.ArrayList(); [EOL]     this.data = new java.util.ArrayList(); [EOL] } <line_num>: 88,91
public TaskSeries getSeries(Comparable key) { [EOL]     if (key == null) { [EOL]         throw new NullPointerException("Null 'key' argument."); [EOL]     } [EOL]     TaskSeries result = null; [EOL]     int index = getRowIndex(key); [EOL]     if (index >= 0) { [EOL]         result = getSeries(index); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 102,112
public TaskSeries getSeries(int series) { [EOL]     if ((series < 0) || (series >= getSeriesCount())) { [EOL]         throw new IllegalArgumentException("Series index out of bounds"); [EOL]     } [EOL]     return (TaskSeries) this.data.get(series); [EOL] } <line_num>: 123,128
public int getSeriesCount() { [EOL]     return getRowCount(); [EOL] } <line_num>: 135,137
public Comparable getSeriesKey(int series) { [EOL]     TaskSeries ts = (TaskSeries) this.data.get(series); [EOL]     return ts.getKey(); [EOL] } <line_num>: 146,149
public int getRowCount() { [EOL]     return this.data.size(); [EOL] } <line_num>: 156,158
public List getRowKeys() { [EOL]     return this.data; [EOL] } <line_num>: 165,167
public int getColumnCount() { [EOL]     return this.keys.size(); [EOL] } <line_num>: 174,176
public List getColumnKeys() { [EOL]     return this.keys; [EOL] } <line_num>: 183,185
public Comparable getColumnKey(int index) { [EOL]     return (Comparable) this.keys.get(index); [EOL] } <line_num>: 194,196
public int getColumnIndex(Comparable columnKey) { [EOL]     if (columnKey == null) { [EOL]         throw new IllegalArgumentException("Null 'columnKey' argument."); [EOL]     } [EOL]     return this.keys.indexOf(columnKey); [EOL] } <line_num>: 205,210
public int getRowIndex(Comparable rowKey) { [EOL]     int result = -1; [EOL]     int count = this.data.size(); [EOL]     for (int i = 0; i < count; i++) { [EOL]         TaskSeries s = (TaskSeries) this.data.get(i); [EOL]         if (s.getKey().equals(rowKey)) { [EOL]             result = i; [EOL]             break; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 219,230
public Comparable getRowKey(int index) { [EOL]     TaskSeries series = (TaskSeries) this.data.get(index); [EOL]     return series.getKey(); [EOL] } <line_num>: 239,242
public void add(TaskSeries series) { [EOL]     if (series == null) { [EOL]         throw new IllegalArgumentException("Null 'series' argument."); [EOL]     } [EOL]     this.data.add(series); [EOL]     series.addChangeListener(this); [EOL]     Iterator iterator = series.getTasks().iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         Task task = (Task) iterator.next(); [EOL]         String key = task.getDescription(); [EOL]         int index = this.keys.indexOf(key); [EOL]         if (index < 0) { [EOL]             this.keys.add(key); [EOL]         } [EOL]     } [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 251,270
public void remove(TaskSeries series) { [EOL]     if (series == null) { [EOL]         throw new IllegalArgumentException("Null 'series' argument."); [EOL]     } [EOL]     if (this.data.contains(series)) { [EOL]         series.removeChangeListener(this); [EOL]         this.data.remove(series); [EOL]         fireDatasetChanged(new DatasetChangeInfo()); [EOL]     } [EOL] } <line_num>: 279,289
public void remove(int series) { [EOL]     if ((series < 0) || (series >= getSeriesCount())) { [EOL]         throw new IllegalArgumentException("TaskSeriesCollection.remove(): index outside valid range."); [EOL]     } [EOL]     TaskSeries ts = (TaskSeries) this.data.get(series); [EOL]     ts.removeChangeListener(this); [EOL]     this.data.remove(series); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 298,311
public void removeAll() { [EOL]     Iterator iterator = this.data.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         TaskSeries series = (TaskSeries) iterator.next(); [EOL]         series.removeChangeListener(this); [EOL]     } [EOL]     this.data.clear(); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 318,333
public Number getValue(Comparable rowKey, Comparable columnKey) { [EOL]     return getStartValue(rowKey, columnKey); [EOL] } <line_num>: 343,345
public Number getValue(int row, int column) { [EOL]     return getStartValue(row, column); [EOL] } <line_num>: 355,357
public Number getStartValue(Comparable rowKey, Comparable columnKey) { [EOL]     Number result = null; [EOL]     int row = getRowIndex(rowKey); [EOL]     TaskSeries series = (TaskSeries) this.data.get(row); [EOL]     Task task = series.get(columnKey.toString()); [EOL]     if (task != null) { [EOL]         TimePeriod duration = task.getDuration(); [EOL]         if (duration != null) { [EOL]             result = new Long(duration.getStart().getTime()); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 368,380
public Number getStartValue(int row, int column) { [EOL]     Comparable rowKey = getRowKey(row); [EOL]     Comparable columnKey = getColumnKey(column); [EOL]     return getStartValue(rowKey, columnKey); [EOL] } <line_num>: 390,394
public Number getEndValue(Comparable rowKey, Comparable columnKey) { [EOL]     Number result = null; [EOL]     int row = getRowIndex(rowKey); [EOL]     TaskSeries series = (TaskSeries) this.data.get(row); [EOL]     Task task = series.get(columnKey.toString()); [EOL]     if (task != null) { [EOL]         TimePeriod duration = task.getDuration(); [EOL]         if (duration != null) { [EOL]             result = new Long(duration.getEnd().getTime()); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 405,417
public Number getEndValue(int row, int column) { [EOL]     Comparable rowKey = getRowKey(row); [EOL]     Comparable columnKey = getColumnKey(column); [EOL]     return getEndValue(rowKey, columnKey); [EOL] } <line_num>: 427,431
public Number getPercentComplete(int row, int column) { [EOL]     Comparable rowKey = getRowKey(row); [EOL]     Comparable columnKey = getColumnKey(column); [EOL]     return getPercentComplete(rowKey, columnKey); [EOL] } <line_num>: 441,445
public Number getPercentComplete(Comparable rowKey, Comparable columnKey) { [EOL]     Number result = null; [EOL]     int row = getRowIndex(rowKey); [EOL]     TaskSeries series = (TaskSeries) this.data.get(row); [EOL]     Task task = series.get(columnKey.toString()); [EOL]     if (task != null) { [EOL]         result = task.getPercentComplete(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 455,464
public int getSubIntervalCount(int row, int column) { [EOL]     Comparable rowKey = getRowKey(row); [EOL]     Comparable columnKey = getColumnKey(column); [EOL]     return getSubIntervalCount(rowKey, columnKey); [EOL] } <line_num>: 474,478
public int getSubIntervalCount(Comparable rowKey, Comparable columnKey) { [EOL]     int result = 0; [EOL]     int row = getRowIndex(rowKey); [EOL]     TaskSeries series = (TaskSeries) this.data.get(row); [EOL]     Task task = series.get(columnKey.toString()); [EOL]     if (task != null) { [EOL]         result = task.getSubtaskCount(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 488,497
public Number getStartValue(int row, int column, int subinterval) { [EOL]     Comparable rowKey = getRowKey(row); [EOL]     Comparable columnKey = getColumnKey(column); [EOL]     return getStartValue(rowKey, columnKey, subinterval); [EOL] } <line_num>: 508,512
public Number getStartValue(Comparable rowKey, Comparable columnKey, int subinterval) { [EOL]     Number result = null; [EOL]     int row = getRowIndex(rowKey); [EOL]     TaskSeries series = (TaskSeries) this.data.get(row); [EOL]     Task task = series.get(columnKey.toString()); [EOL]     if (task != null) { [EOL]         Task sub = task.getSubtask(subinterval); [EOL]         if (sub != null) { [EOL]             TimePeriod duration = sub.getDuration(); [EOL]             result = new Long(duration.getStart().getTime()); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 523,537
public Number getEndValue(int row, int column, int subinterval) { [EOL]     Comparable rowKey = getRowKey(row); [EOL]     Comparable columnKey = getColumnKey(column); [EOL]     return getEndValue(rowKey, columnKey, subinterval); [EOL] } <line_num>: 548,552
public Number getEndValue(Comparable rowKey, Comparable columnKey, int subinterval) { [EOL]     Number result = null; [EOL]     int row = getRowIndex(rowKey); [EOL]     TaskSeries series = (TaskSeries) this.data.get(row); [EOL]     Task task = series.get(columnKey.toString()); [EOL]     if (task != null) { [EOL]         Task sub = task.getSubtask(subinterval); [EOL]         if (sub != null) { [EOL]             TimePeriod duration = sub.getDuration(); [EOL]             result = new Long(duration.getEnd().getTime()); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 563,577
public Number getPercentComplete(int row, int column, int subinterval) { [EOL]     Comparable rowKey = getRowKey(row); [EOL]     Comparable columnKey = getColumnKey(column); [EOL]     return getPercentComplete(rowKey, columnKey, subinterval); [EOL] } <line_num>: 588,592
public Number getPercentComplete(Comparable rowKey, Comparable columnKey, int subinterval) { [EOL]     Number result = null; [EOL]     int row = getRowIndex(rowKey); [EOL]     TaskSeries series = (TaskSeries) this.data.get(row); [EOL]     Task task = series.get(columnKey.toString()); [EOL]     if (task != null) { [EOL]         Task sub = task.getSubtask(subinterval); [EOL]         if (sub != null) { [EOL]             result = sub.getPercentComplete(); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 603,616
public void seriesChanged(SeriesChangeEvent event) { [EOL]     refreshKeys(); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 623,627
private void refreshKeys() { [EOL]     this.keys.clear(); [EOL]     for (int i = 0; i < getSeriesCount(); i++) { [EOL]         TaskSeries series = (TaskSeries) this.data.get(i); [EOL]         Iterator iterator = series.getTasks().iterator(); [EOL]         while (iterator.hasNext()) { [EOL]             Task task = (Task) iterator.next(); [EOL]             String key = task.getDescription(); [EOL]             int index = this.keys.indexOf(key); [EOL]             if (index < 0) { [EOL]                 this.keys.add(key); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 632,649
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof TaskSeriesCollection)) { [EOL]         return false; [EOL]     } [EOL]     TaskSeriesCollection that = (TaskSeriesCollection) obj; [EOL]     if (!ObjectUtilities.equal(this.data, that.data)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 658,670
public Object clone() throws CloneNotSupportedException { [EOL]     TaskSeriesCollection clone = (TaskSeriesCollection) super.clone(); [EOL]     clone.data = (List) ObjectUtilities.deepClone(this.data); [EOL]     clone.keys = new java.util.ArrayList(this.keys); [EOL]     return clone; [EOL] } <line_num>: 680,685
