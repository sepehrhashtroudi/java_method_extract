public DefaultWindDataset() { [EOL]     this.seriesKeys = new java.util.ArrayList(); [EOL]     this.allSeriesData = new java.util.ArrayList(); [EOL] } <line_num>: 74,77
public DefaultWindDataset(Object[][][] data) { [EOL]     this(seriesNameListFromDataArray(data), data); [EOL] } <line_num>: 86,88
public DefaultWindDataset(String[] seriesNames, Object[][][] data) { [EOL]     this(Arrays.asList(seriesNames), data); [EOL] } <line_num>: 100,102
public DefaultWindDataset(List seriesKeys, Object[][][] data) { [EOL]     if (seriesKeys == null) { [EOL]         throw new IllegalArgumentException("Null 'seriesKeys' argument."); [EOL]     } [EOL]     if (seriesKeys.size() != data.length) { [EOL]         throw new IllegalArgumentException("The number of series keys does " + "not match the number of series in the data array."); [EOL]     } [EOL]     this.seriesKeys = seriesKeys; [EOL]     int seriesCount = data.length; [EOL]     this.allSeriesData = new java.util.ArrayList(seriesCount); [EOL]     for (int seriesIndex = 0; seriesIndex < seriesCount; seriesIndex++) { [EOL]         List oneSeriesData = new java.util.ArrayList(); [EOL]         int maxItemCount = data[seriesIndex].length; [EOL]         for (int itemIndex = 0; itemIndex < maxItemCount; itemIndex++) { [EOL]             Object xObject = data[seriesIndex][itemIndex][0]; [EOL]             if (xObject != null) { [EOL]                 Number xNumber; [EOL]                 if (xObject instanceof Number) { [EOL]                     xNumber = (Number) xObject; [EOL]                 } else { [EOL]                     if (xObject instanceof Date) { [EOL]                         Date xDate = (Date) xObject; [EOL]                         xNumber = new Long(xDate.getTime()); [EOL]                     } else { [EOL]                         xNumber = new Integer(0); [EOL]                     } [EOL]                 } [EOL]                 Number windDir = (Number) data[seriesIndex][itemIndex][1]; [EOL]                 Number windForce = (Number) data[seriesIndex][itemIndex][2]; [EOL]                 oneSeriesData.add(new WindDataItem(xNumber, windDir, windForce)); [EOL]             } [EOL]         } [EOL]         Collections.sort(oneSeriesData); [EOL]         this.allSeriesData.add(seriesIndex, oneSeriesData); [EOL]     } [EOL] } <line_num>: 128,169
public WindDataItem(Number x, Number windDir, Number windForce) { [EOL]     this.x = x; [EOL]     this.windDir = windDir; [EOL]     this.windForce = windForce; [EOL] } <line_num>: 346,350
public int getSeriesCount() { [EOL]     return this.allSeriesData.size(); [EOL] } <line_num>: 176,178
public int getItemCount(int series) { [EOL]     if (series < 0 || series >= getSeriesCount()) { [EOL]         throw new IllegalArgumentException("Invalid series index: " + series); [EOL]     } [EOL]     List oneSeriesData = (List) this.allSeriesData.get(series); [EOL]     return oneSeriesData.size(); [EOL] } <line_num>: 187,194
public Comparable getSeriesKey(int series) { [EOL]     if (series < 0 || series >= getSeriesCount()) { [EOL]         throw new IllegalArgumentException("Invalid series index: " + series); [EOL]     } [EOL]     return (Comparable) this.seriesKeys.get(series); [EOL] } <line_num>: 203,209
public Number getX(int series, int item) { [EOL]     List oneSeriesData = (List) this.allSeriesData.get(series); [EOL]     WindDataItem windItem = (WindDataItem) oneSeriesData.get(item); [EOL]     return windItem.getX(); [EOL] } <line_num>: 221,225
public Number getY(int series, int item) { [EOL]     return getWindForce(series, item); [EOL] } <line_num>: 237,239
public Number getWindDirection(int series, int item) { [EOL]     List oneSeriesData = (List) this.allSeriesData.get(series); [EOL]     WindDataItem windItem = (WindDataItem) oneSeriesData.get(item); [EOL]     return windItem.getWindDirection(); [EOL] } <line_num>: 250,254
public Number getWindForce(int series, int item) { [EOL]     List oneSeriesData = (List) this.allSeriesData.get(series); [EOL]     WindDataItem windItem = (WindDataItem) oneSeriesData.get(item); [EOL]     return windItem.getWindForce(); [EOL] } <line_num>: 265,269
public static List seriesNameListFromDataArray(Object[][] data) { [EOL]     int seriesCount = data.length; [EOL]     List seriesNameList = new java.util.ArrayList(seriesCount); [EOL]     for (int i = 0; i < seriesCount; i++) { [EOL]         seriesNameList.add("Series " + (i + 1)); [EOL]     } [EOL]     return seriesNameList; [EOL] } <line_num>: 280,289
public boolean equals(Object obj) { [EOL]     if (this == obj) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof DefaultWindDataset)) { [EOL]         return false; [EOL]     } [EOL]     DefaultWindDataset that = (DefaultWindDataset) obj; [EOL]     if (!this.seriesKeys.equals(that.seriesKeys)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.allSeriesData.equals(that.allSeriesData)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 306,321
public Number getX() { [EOL]     return this.x; [EOL] } <line_num>: 357,359
public Number getWindDirection() { [EOL]     return this.windDir; [EOL] } <line_num>: 366,368
public Number getWindForce() { [EOL]     return this.windForce; [EOL] } <line_num>: 375,377
public int compareTo(Object object) { [EOL]     if (object instanceof WindDataItem) { [EOL]         WindDataItem item = (WindDataItem) object; [EOL]         if (this.x.doubleValue() > item.x.doubleValue()) { [EOL]             return 1; [EOL]         } else if (this.x.equals(item.x)) { [EOL]             return 0; [EOL]         } else { [EOL]             return -1; [EOL]         } [EOL]     } else { [EOL]         throw new ClassCastException("WindDataItem.compareTo(error)"); [EOL]     } [EOL] } <line_num>: 386,402
public boolean equals(Object obj) { [EOL]     if (this == obj) { [EOL]         return false; [EOL]     } [EOL]     if (!(obj instanceof WindDataItem)) { [EOL]         return false; [EOL]     } [EOL]     WindDataItem that = (WindDataItem) obj; [EOL]     if (!this.x.equals(that.x)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.windDir.equals(that.windDir)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.windForce.equals(that.windForce)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 412,430
