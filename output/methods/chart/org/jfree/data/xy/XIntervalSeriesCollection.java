public XIntervalSeriesCollection() { [EOL]     this.data = new java.util.ArrayList(); [EOL] } <line_num>: 71,73
public void addSeries(XIntervalSeries series) { [EOL]     if (series == null) { [EOL]         throw new IllegalArgumentException("Null 'series' argument."); [EOL]     } [EOL]     this.data.add(series); [EOL]     series.addChangeListener(this); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 81,89
public int getSeriesCount() { [EOL]     return this.data.size(); [EOL] } <line_num>: 96,98
public XIntervalSeries getSeries(int series) { [EOL]     if ((series < 0) || (series >= getSeriesCount())) { [EOL]         throw new IllegalArgumentException("Series index out of bounds"); [EOL]     } [EOL]     return (XIntervalSeries) this.data.get(series); [EOL] } <line_num>: 110,115
public Comparable getSeriesKey(int series) { [EOL]     return getSeries(series).getKey(); [EOL] } <line_num>: 128,131
public int getItemCount(int series) { [EOL]     return getSeries(series).getItemCount(); [EOL] } <line_num>: 143,146
public Number getX(int series, int item) { [EOL]     XIntervalSeries s = (XIntervalSeries) this.data.get(series); [EOL]     XIntervalDataItem di = (XIntervalDataItem) s.getDataItem(item); [EOL]     return di.getX(); [EOL] } <line_num>: 156,160
public double getStartXValue(int series, int item) { [EOL]     XIntervalSeries s = (XIntervalSeries) this.data.get(series); [EOL]     return s.getXLowValue(item); [EOL] } <line_num>: 171,174
public double getEndXValue(int series, int item) { [EOL]     XIntervalSeries s = (XIntervalSeries) this.data.get(series); [EOL]     return s.getXHighValue(item); [EOL] } <line_num>: 185,188
public double getYValue(int series, int item) { [EOL]     XIntervalSeries s = (XIntervalSeries) this.data.get(series); [EOL]     return s.getYValue(item); [EOL] } <line_num>: 199,202
public Number getY(int series, int item) { [EOL]     XIntervalSeries s = (XIntervalSeries) this.data.get(series); [EOL]     XIntervalDataItem di = (XIntervalDataItem) s.getDataItem(item); [EOL]     return new Double(di.getYValue()); [EOL] } <line_num>: 212,216
public Number getStartX(int series, int item) { [EOL]     XIntervalSeries s = (XIntervalSeries) this.data.get(series); [EOL]     XIntervalDataItem di = (XIntervalDataItem) s.getDataItem(item); [EOL]     return new Double(di.getXLowValue()); [EOL] } <line_num>: 226,230
public Number getEndX(int series, int item) { [EOL]     XIntervalSeries s = (XIntervalSeries) this.data.get(series); [EOL]     XIntervalDataItem di = (XIntervalDataItem) s.getDataItem(item); [EOL]     return new Double(di.getXHighValue()); [EOL] } <line_num>: 240,244
public Number getStartY(int series, int item) { [EOL]     return getY(series, item); [EOL] } <line_num>: 255,257
public Number getEndY(int series, int item) { [EOL]     return getY(series, item); [EOL] } <line_num>: 268,270
public void removeSeries(int series) { [EOL]     if ((series < 0) || (series >= getSeriesCount())) { [EOL]         throw new IllegalArgumentException("Series index out of bounds."); [EOL]     } [EOL]     XIntervalSeries ts = (XIntervalSeries) this.data.get(series); [EOL]     ts.removeChangeListener(this); [EOL]     this.data.remove(series); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 280,289
public void removeSeries(XIntervalSeries series) { [EOL]     if (series == null) { [EOL]         throw new IllegalArgumentException("Null 'series' argument."); [EOL]     } [EOL]     if (this.data.contains(series)) { [EOL]         series.removeChangeListener(this); [EOL]         this.data.remove(series); [EOL]         fireDatasetChanged(new DatasetChangeInfo()); [EOL]     } [EOL] } <line_num>: 299,309
public void removeAllSeries() { [EOL]     for (int i = 0; i < this.data.size(); i++) { [EOL]         XIntervalSeries series = (XIntervalSeries) this.data.get(i); [EOL]         series.removeChangeListener(this); [EOL]     } [EOL]     this.data.clear(); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 317,327
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof XIntervalSeriesCollection)) { [EOL]         return false; [EOL]     } [EOL]     XIntervalSeriesCollection that = (XIntervalSeriesCollection) obj; [EOL]     return ObjectUtilities.equal(this.data, that.data); [EOL] } <line_num>: 336,345
public Object clone() throws CloneNotSupportedException { [EOL]     XIntervalSeriesCollection clone = (XIntervalSeriesCollection) super.clone(); [EOL]     clone.data = (List) ObjectUtilities.deepClone(this.data); [EOL]     return clone; [EOL] } <line_num>: 354,359
