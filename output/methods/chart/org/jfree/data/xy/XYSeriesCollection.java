public XYSeriesCollection() { [EOL]     this(null); [EOL] } <line_num>: 105,107
public XYSeriesCollection(XYSeries series) { [EOL]     this.data = new java.util.ArrayList(); [EOL]     this.intervalDelegate = new IntervalXYDelegate(this, false); [EOL]     addChangeListener(this.intervalDelegate); [EOL]     if (series != null) { [EOL]         this.data.add(series); [EOL]         series.addChangeListener(this); [EOL]     } [EOL]     setSelectionState(this); [EOL] } <line_num>: 114,123
public DomainOrder getDomainOrder() { [EOL]     int seriesCount = getSeriesCount(); [EOL]     for (int i = 0; i < seriesCount; i++) { [EOL]         XYSeries s = getSeries(i); [EOL]         if (!s.getAutoSort()) { [EOL]             return DomainOrder.NONE; [EOL]         } [EOL]     } [EOL]     return DomainOrder.ASCENDING; [EOL] } <line_num>: 130,139
public void addSeries(XYSeries series) { [EOL]     if (series == null) { [EOL]         throw new IllegalArgumentException("Null 'series' argument."); [EOL]     } [EOL]     this.data.add(series); [EOL]     series.addChangeListener(this); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 147,155
public void removeSeries(int series) { [EOL]     if ((series < 0) || (series >= getSeriesCount())) { [EOL]         throw new IllegalArgumentException("Series index out of bounds."); [EOL]     } [EOL]     XYSeries ts = (XYSeries) this.data.get(series); [EOL]     ts.removeChangeListener(this); [EOL]     this.data.remove(series); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 163,174
public void removeSeries(XYSeries series) { [EOL]     if (series == null) { [EOL]         throw new IllegalArgumentException("Null 'series' argument."); [EOL]     } [EOL]     if (this.data.contains(series)) { [EOL]         series.removeChangeListener(this); [EOL]         this.data.remove(series); [EOL]         fireDatasetChanged(new DatasetChangeInfo()); [EOL]     } [EOL] } <line_num>: 182,192
public void removeAllSeries() { [EOL]     for (int i = 0; i < this.data.size(); i++) { [EOL]         XYSeries series = (XYSeries) this.data.get(i); [EOL]         series.removeChangeListener(this); [EOL]     } [EOL]     this.data.clear(); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 198,210
public int getSeriesCount() { [EOL]     return this.data.size(); [EOL] } <line_num>: 217,219
public List getSeries() { [EOL]     return Collections.unmodifiableList(this.data); [EOL] } <line_num>: 226,228
public int indexOf(XYSeries series) { [EOL]     if (series == null) { [EOL]         throw new IllegalArgumentException("Null 'series' argument."); [EOL]     } [EOL]     return this.data.indexOf(series); [EOL] } <line_num>: 240,245
public XYSeries getSeries(int series) { [EOL]     if ((series < 0) || (series >= getSeriesCount())) { [EOL]         throw new IllegalArgumentException("Series index out of bounds"); [EOL]     } [EOL]     return (XYSeries) this.data.get(series); [EOL] } <line_num>: 257,262
public XYSeries getSeries(Comparable key) { [EOL]     if (key == null) { [EOL]         throw new IllegalArgumentException("Null 'key' argument."); [EOL]     } [EOL]     Iterator iterator = this.data.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         XYSeries series = (XYSeries) iterator.next(); [EOL]         if (key.equals(series.getKey())) { [EOL]             return series; [EOL]         } [EOL]     } [EOL]     throw new UnknownKeyException("Key not found: " + key); [EOL] } <line_num>: 276,288
public Comparable getSeriesKey(int series) { [EOL]     return getSeries(series).getKey(); [EOL] } <line_num>: 301,304
public int getItemCount(int series) { [EOL]     return getSeries(series).getItemCount(); [EOL] } <line_num>: 316,319
public Number getX(int series, int item) { [EOL]     XYSeries s = (XYSeries) this.data.get(series); [EOL]     return s.getX(item); [EOL] } <line_num>: 329,332
public Number getStartX(int series, int item) { [EOL]     return this.intervalDelegate.getStartX(series, item); [EOL] } <line_num>: 342,344
public Number getEndX(int series, int item) { [EOL]     return this.intervalDelegate.getEndX(series, item); [EOL] } <line_num>: 354,356
public Number getY(int series, int index) { [EOL]     XYSeries s = (XYSeries) this.data.get(series); [EOL]     return s.getY(index); [EOL] } <line_num>: 366,369
public Number getStartY(int series, int item) { [EOL]     return getY(series, item); [EOL] } <line_num>: 379,381
public Number getEndY(int series, int item) { [EOL]     return getY(series, item); [EOL] } <line_num>: 391,393
public boolean isSelected(int series, int item) { [EOL]     XYSeries s = getSeries(series); [EOL]     XYDataItem i = s.getRawDataItem(item); [EOL]     return i.isSelected(); [EOL] } <line_num>: 406,410
public void setSelected(int series, int item, boolean selected) { [EOL]     setSelected(series, item, selected, true); [EOL] } <line_num>: 422,424
public void setSelected(int series, int item, boolean selected, boolean notify) { [EOL]     XYSeries s = getSeries(series); [EOL]     XYDataItem i = s.getRawDataItem(item); [EOL]     i.setSelected(selected); [EOL]     if (notify) { [EOL]         fireSelectionEvent(); [EOL]     } [EOL] } <line_num>: 437,445
public void clearSelection() { [EOL]     int seriesCount = getSeriesCount(); [EOL]     for (int s = 0; s < seriesCount; s++) { [EOL]         int itemCount = getItemCount(s); [EOL]         for (int i = 0; i < itemCount; i++) { [EOL]             setSelected(s, i, false, false); [EOL]         } [EOL]     } [EOL] } <line_num>: 452,460
public void fireSelectionEvent() { [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 467,471
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof XYSeriesCollection)) { [EOL]         return false; [EOL]     } [EOL]     XYSeriesCollection that = (XYSeriesCollection) obj; [EOL]     if (!this.intervalDelegate.equals(that.intervalDelegate)) { [EOL]         return false; [EOL]     } [EOL]     return ObjectUtilities.equal(this.data, that.data); [EOL] } <line_num>: 480,492
public Object clone() throws CloneNotSupportedException { [EOL]     XYSeriesCollection clone = (XYSeriesCollection) super.clone(); [EOL]     clone.data = (List) ObjectUtilities.deepClone(this.data); [EOL]     clone.intervalDelegate = (IntervalXYDelegate) this.intervalDelegate.clone(); [EOL]     return clone; [EOL] } <line_num>: 501,507
public int hashCode() { [EOL]     int hash = 5; [EOL]     hash = HashUtilities.hashCode(hash, this.intervalDelegate); [EOL]     hash = HashUtilities.hashCode(hash, this.data); [EOL]     return hash; [EOL] } <line_num>: 514,519
public double getDomainLowerBound(boolean includeInterval) { [EOL]     if (includeInterval) { [EOL]         return this.intervalDelegate.getDomainLowerBound(includeInterval); [EOL]     } else { [EOL]         double result = Double.NaN; [EOL]         int seriesCount = getSeriesCount(); [EOL]         for (int s = 0; s < seriesCount; s++) { [EOL]             XYSeries series = getSeries(s); [EOL]             double lowX = series.getMinX(); [EOL]             if (Double.isNaN(result)) { [EOL]                 result = lowX; [EOL]             } else { [EOL]                 if (!Double.isNaN(lowX)) { [EOL]                     result = Math.min(result, lowX); [EOL]                 } [EOL]             } [EOL]         } [EOL]         return result; [EOL]     } [EOL] } <line_num>: 529,550
public double getDomainUpperBound(boolean includeInterval) { [EOL]     if (includeInterval) { [EOL]         return this.intervalDelegate.getDomainUpperBound(includeInterval); [EOL]     } else { [EOL]         double result = Double.NaN; [EOL]         int seriesCount = getSeriesCount(); [EOL]         for (int s = 0; s < seriesCount; s++) { [EOL]             XYSeries series = getSeries(s); [EOL]             double hiX = series.getMaxX(); [EOL]             if (Double.isNaN(result)) { [EOL]                 result = hiX; [EOL]             } else { [EOL]                 if (!Double.isNaN(hiX)) { [EOL]                     result = Math.max(result, hiX); [EOL]                 } [EOL]             } [EOL]         } [EOL]         return result; [EOL]     } [EOL] } <line_num>: 560,581
public Range getDomainBounds(boolean includeInterval) { [EOL]     if (includeInterval) { [EOL]         return this.intervalDelegate.getDomainBounds(includeInterval); [EOL]     } else { [EOL]         double lower = Double.POSITIVE_INFINITY; [EOL]         double upper = Double.NEGATIVE_INFINITY; [EOL]         int seriesCount = getSeriesCount(); [EOL]         for (int s = 0; s < seriesCount; s++) { [EOL]             XYSeries series = getSeries(s); [EOL]             double minX = series.getMinX(); [EOL]             if (!Double.isNaN(minX)) { [EOL]                 lower = Math.min(lower, minX); [EOL]             } [EOL]             double maxX = series.getMaxX(); [EOL]             if (!Double.isNaN(maxX)) { [EOL]                 upper = Math.max(upper, maxX); [EOL]             } [EOL]         } [EOL]         if (lower > upper) { [EOL]             return null; [EOL]         } else { [EOL]             return new Range(lower, upper); [EOL]         } [EOL]     } [EOL] } <line_num>: 592,618
public double getIntervalWidth() { [EOL]     return this.intervalDelegate.getIntervalWidth(); [EOL] } <line_num>: 626,628
public void setIntervalWidth(double width) { [EOL]     if (width < 0.0) { [EOL]         throw new IllegalArgumentException("Negative 'width' argument."); [EOL]     } [EOL]     this.intervalDelegate.setFixedIntervalWidth(width); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 636,643
public double getIntervalPositionFactor() { [EOL]     return this.intervalDelegate.getIntervalPositionFactor(); [EOL] } <line_num>: 650,652
public void setIntervalPositionFactor(double factor) { [EOL]     this.intervalDelegate.setIntervalPositionFactor(factor); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 661,665
public boolean isAutoWidth() { [EOL]     return this.intervalDelegate.isAutoWidth(); [EOL] } <line_num>: 672,674
public void setAutoWidth(boolean b) { [EOL]     this.intervalDelegate.setAutoWidth(b); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 682,686
public Range getRangeBounds(boolean includeInterval) { [EOL]     double lower = Double.POSITIVE_INFINITY; [EOL]     double upper = Double.NEGATIVE_INFINITY; [EOL]     int seriesCount = getSeriesCount(); [EOL]     for (int s = 0; s < seriesCount; s++) { [EOL]         XYSeries series = getSeries(s); [EOL]         double minY = series.getMinY(); [EOL]         if (!Double.isNaN(minY)) { [EOL]             lower = Math.min(lower, minY); [EOL]         } [EOL]         double maxY = series.getMaxY(); [EOL]         if (!Double.isNaN(maxY)) { [EOL]             upper = Math.max(upper, maxY); [EOL]         } [EOL]     } [EOL]     if (lower > upper) { [EOL]         return null; [EOL]     } else { [EOL]         return new Range(lower, upper); [EOL]     } [EOL] } <line_num>: 696,717
public double getRangeLowerBound(boolean includeInterval) { [EOL]     double result = Double.NaN; [EOL]     int seriesCount = getSeriesCount(); [EOL]     for (int s = 0; s < seriesCount; s++) { [EOL]         XYSeries series = getSeries(s); [EOL]         double lowY = series.getMinY(); [EOL]         if (Double.isNaN(result)) { [EOL]             result = lowY; [EOL]         } else { [EOL]             if (!Double.isNaN(lowY)) { [EOL]                 result = Math.min(result, lowY); [EOL]             } [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 727,743
public double getRangeUpperBound(boolean includeInterval) { [EOL]     double result = Double.NaN; [EOL]     int seriesCount = getSeriesCount(); [EOL]     for (int s = 0; s < seriesCount; s++) { [EOL]         XYSeries series = getSeries(s); [EOL]         double hiY = series.getMaxY(); [EOL]         if (Double.isNaN(result)) { [EOL]             result = hiY; [EOL]         } else { [EOL]             if (!Double.isNaN(hiY)) { [EOL]                 result = Math.max(result, hiY); [EOL]             } [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 753,769
