public DefaultTableXYDataset() { [EOL]     this(false); [EOL] } <line_num>: 109,111
public DefaultTableXYDataset(boolean autoPrune) { [EOL]     this.autoPrune = autoPrune; [EOL]     this.data = new ArrayList(); [EOL]     this.xPoints = new HashSet(); [EOL]     this.intervalDelegate = new IntervalXYDelegate(this, false); [EOL]     addChangeListener(this.intervalDelegate); [EOL] } <line_num>: 120,126
public boolean isAutoPrune() { [EOL]     return this.autoPrune; [EOL] } <line_num>: 134,136
public void addSeries(XYSeries series) { [EOL]     if (series == null) { [EOL]         throw new IllegalArgumentException("Null 'series' argument."); [EOL]     } [EOL]     if (series.getAllowDuplicateXValues()) { [EOL]         throw new IllegalArgumentException("Cannot accept XYSeries that allow duplicate values. " + "Use XYSeries(seriesName, <sort>, false) constructor."); [EOL]     } [EOL]     updateXPoints(series); [EOL]     this.data.add(series); [EOL]     series.addChangeListener(this); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 145,160
private void updateXPoints(XYSeries series) { [EOL]     if (series == null) { [EOL]         throw new IllegalArgumentException("Null 'series' not permitted."); [EOL]     } [EOL]     HashSet seriesXPoints = new HashSet(); [EOL]     boolean savedState = this.propagateEvents; [EOL]     this.propagateEvents = false; [EOL]     for (int itemNo = 0; itemNo < series.getItemCount(); itemNo++) { [EOL]         Number xValue = series.getX(itemNo); [EOL]         seriesXPoints.add(xValue); [EOL]         if (!this.xPoints.contains(xValue)) { [EOL]             this.xPoints.add(xValue); [EOL]             int seriesCount = this.data.size(); [EOL]             for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) { [EOL]                 XYSeries dataSeries = (XYSeries) this.data.get(seriesNo); [EOL]                 if (!dataSeries.equals(series)) { [EOL]                     dataSeries.add(xValue, null); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     Iterator iterator = this.xPoints.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         Number xPoint = (Number) iterator.next(); [EOL]         if (!seriesXPoints.contains(xPoint)) { [EOL]             series.add(xPoint, null); [EOL]         } [EOL]     } [EOL]     this.propagateEvents = savedState; [EOL] } <line_num>: 168,197
public void updateXPoints() { [EOL]     this.propagateEvents = false; [EOL]     for (int s = 0; s < this.data.size(); s++) { [EOL]         updateXPoints((XYSeries) this.data.get(s)); [EOL]     } [EOL]     if (this.autoPrune) { [EOL]         prune(); [EOL]     } [EOL]     this.propagateEvents = true; [EOL] } <line_num>: 202,211
public int getSeriesCount() { [EOL]     return this.data.size(); [EOL] } <line_num>: 218,220
public int getItemCount() { [EOL]     if (this.xPoints == null) { [EOL]         return 0; [EOL]     } else { [EOL]         return this.xPoints.size(); [EOL]     } [EOL] } <line_num>: 227,234
public XYSeries getSeries(int series) { [EOL]     if ((series < 0) || (series >= getSeriesCount())) { [EOL]         throw new IllegalArgumentException("Index outside valid range."); [EOL]     } [EOL]     return (XYSeries) this.data.get(series); [EOL] } <line_num>: 243,248
public Comparable getSeriesKey(int series) { [EOL]     return getSeries(series).getKey(); [EOL] } <line_num>: 257,260
public int getItemCount(int series) { [EOL]     return getSeries(series).getItemCount(); [EOL] } <line_num>: 269,272
public Number getX(int series, int item) { [EOL]     XYSeries s = (XYSeries) this.data.get(series); [EOL]     return s.getX(item); [EOL] } <line_num>: 282,285
public Number getStartX(int series, int item) { [EOL]     return this.intervalDelegate.getStartX(series, item); [EOL] } <line_num>: 295,297
public Number getEndX(int series, int item) { [EOL]     return this.intervalDelegate.getEndX(series, item); [EOL] } <line_num>: 307,309
public Number getY(int series, int index) { [EOL]     XYSeries s = (XYSeries) this.data.get(series); [EOL]     return s.getY(index); [EOL] } <line_num>: 320,323
public Number getStartY(int series, int item) { [EOL]     return getY(series, item); [EOL] } <line_num>: 333,335
public Number getEndY(int series, int item) { [EOL]     return getY(series, item); [EOL] } <line_num>: 345,347
public void removeAllSeries() { [EOL]     for (int i = 0; i < this.data.size(); i++) { [EOL]         XYSeries series = (XYSeries) this.data.get(i); [EOL]         series.removeChangeListener(this); [EOL]     } [EOL]     this.data.clear(); [EOL]     this.xPoints.clear(); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 353,367
public void removeSeries(XYSeries series) { [EOL]     if (series == null) { [EOL]         throw new IllegalArgumentException("Null 'series' argument."); [EOL]     } [EOL]     if (this.data.contains(series)) { [EOL]         series.removeChangeListener(this); [EOL]         this.data.remove(series); [EOL]         if (this.data.size() == 0) { [EOL]             this.xPoints.clear(); [EOL]         } [EOL]         fireDatasetChanged(new DatasetChangeInfo()); [EOL]     } [EOL] } <line_num>: 375,393
public void removeSeries(int series) { [EOL]     if ((series < 0) || (series > getSeriesCount())) { [EOL]         throw new IllegalArgumentException("Index outside valid range."); [EOL]     } [EOL]     XYSeries s = (XYSeries) this.data.get(series); [EOL]     s.removeChangeListener(this); [EOL]     this.data.remove(series); [EOL]     if (this.data.size() == 0) { [EOL]         this.xPoints.clear(); [EOL]     } else if (this.autoPrune) { [EOL]         prune(); [EOL]     } [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 401,421
public void removeAllValuesForX(Number x) { [EOL]     if (x == null) { [EOL]         throw new IllegalArgumentException("Null 'x' argument."); [EOL]     } [EOL]     boolean savedState = this.propagateEvents; [EOL]     this.propagateEvents = false; [EOL]     for (int s = 0; s < this.data.size(); s++) { [EOL]         XYSeries series = (XYSeries) this.data.get(s); [EOL]         series.remove(x); [EOL]     } [EOL]     this.propagateEvents = savedState; [EOL]     this.xPoints.remove(x); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 428,442
protected boolean canPrune(Number x) { [EOL]     for (int s = 0; s < this.data.size(); s++) { [EOL]         XYSeries series = (XYSeries) this.data.get(s); [EOL]         if (series.getY(series.indexOf(x)) != null) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 452,460
public void prune() { [EOL]     HashSet hs = (HashSet) this.xPoints.clone(); [EOL]     Iterator iterator = hs.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         Number x = (Number) iterator.next(); [EOL]         if (canPrune(x)) { [EOL]             removeAllValuesForX(x); [EOL]         } [EOL]     } [EOL] } <line_num>: 465,474
public void seriesChanged(SeriesChangeEvent event) { [EOL]     if (this.propagateEvents) { [EOL]         updateXPoints(); [EOL]         fireDatasetChanged(new DatasetChangeInfo()); [EOL]     } [EOL] } <line_num>: 483,489
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof DefaultTableXYDataset)) { [EOL]         return false; [EOL]     } [EOL]     DefaultTableXYDataset that = (DefaultTableXYDataset) obj; [EOL]     if (this.autoPrune != that.autoPrune) { [EOL]         return false; [EOL]     } [EOL]     if (this.propagateEvents != that.propagateEvents) { [EOL]         return false; [EOL]     } [EOL]     if (!this.intervalDelegate.equals(that.intervalDelegate)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.data, that.data)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 498,519
public int hashCode() { [EOL]     int result; [EOL]     result = (this.data != null ? this.data.hashCode() : 0); [EOL]     result = 29 * result + (this.xPoints != null ? this.xPoints.hashCode() : 0); [EOL]     result = 29 * result + (this.propagateEvents ? 1 : 0); [EOL]     result = 29 * result + (this.autoPrune ? 1 : 0); [EOL]     return result; [EOL] } <line_num>: 526,534
public Object clone() throws CloneNotSupportedException { [EOL]     DefaultTableXYDataset clone = (DefaultTableXYDataset) super.clone(); [EOL]     int seriesCount = this.data.size(); [EOL]     clone.data = new java.util.ArrayList(seriesCount); [EOL]     for (int i = 0; i < seriesCount; i++) { [EOL]         XYSeries series = (XYSeries) this.data.get(i); [EOL]         clone.data.add(series.clone()); [EOL]     } [EOL]     clone.intervalDelegate = new IntervalXYDelegate(clone); [EOL]     clone.intervalDelegate.setFixedIntervalWidth(getIntervalWidth()); [EOL]     clone.intervalDelegate.setAutoWidth(isAutoWidth()); [EOL]     clone.intervalDelegate.setIntervalPositionFactor(getIntervalPositionFactor()); [EOL]     clone.updateXPoints(); [EOL]     return clone; [EOL] } <line_num>: 544,561
public double getDomainLowerBound(boolean includeInterval) { [EOL]     return this.intervalDelegate.getDomainLowerBound(includeInterval); [EOL] } <line_num>: 571,573
public double getDomainUpperBound(boolean includeInterval) { [EOL]     return this.intervalDelegate.getDomainUpperBound(includeInterval); [EOL] } <line_num>: 583,585
public Range getDomainBounds(boolean includeInterval) { [EOL]     if (includeInterval) { [EOL]         return this.intervalDelegate.getDomainBounds(includeInterval); [EOL]     } else { [EOL]         return DatasetUtilities.iterateDomainBounds(this, includeInterval); [EOL]     } [EOL] } <line_num>: 595,602
public double getIntervalPositionFactor() { [EOL]     return this.intervalDelegate.getIntervalPositionFactor(); [EOL] } <line_num>: 609,611
public void setIntervalPositionFactor(double d) { [EOL]     this.intervalDelegate.setIntervalPositionFactor(d); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 621,625
public double getIntervalWidth() { [EOL]     return this.intervalDelegate.getIntervalWidth(); [EOL] } <line_num>: 632,634
public void setIntervalWidth(double d) { [EOL]     this.intervalDelegate.setFixedIntervalWidth(d); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 642,646
public boolean isAutoWidth() { [EOL]     return this.intervalDelegate.isAutoWidth(); [EOL] } <line_num>: 654,656
public void setAutoWidth(boolean b) { [EOL]     this.intervalDelegate.setAutoWidth(b); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 664,668
