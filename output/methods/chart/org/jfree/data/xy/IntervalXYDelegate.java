public IntervalXYDelegate(XYDataset dataset) { [EOL]     this(dataset, true); [EOL] } <line_num>: 121,123
public IntervalXYDelegate(XYDataset dataset, boolean autoWidth) { [EOL]     if (dataset == null) { [EOL]         throw new IllegalArgumentException("Null 'dataset' argument."); [EOL]     } [EOL]     this.dataset = dataset; [EOL]     this.autoWidth = autoWidth; [EOL]     this.intervalPositionFactor = 0.5; [EOL]     this.autoIntervalWidth = Double.POSITIVE_INFINITY; [EOL]     this.fixedIntervalWidth = 1.0; [EOL] } <line_num>: 132,141
public boolean isAutoWidth() { [EOL]     return this.autoWidth; [EOL] } <line_num>: 149,151
public void setAutoWidth(boolean b) { [EOL]     this.autoWidth = b; [EOL]     if (b) { [EOL]         this.autoIntervalWidth = recalculateInterval(); [EOL]     } [EOL] } <line_num>: 164,169
public double getIntervalPositionFactor() { [EOL]     return this.intervalPositionFactor; [EOL] } <line_num>: 176,178
public void setIntervalPositionFactor(double d) { [EOL]     if (d < 0.0 || 1.0 < d) { [EOL]         throw new IllegalArgumentException("Argument 'd' outside valid range."); [EOL]     } [EOL]     this.intervalPositionFactor = d; [EOL] } <line_num>: 196,202
public double getFixedIntervalWidth() { [EOL]     return this.fixedIntervalWidth; [EOL] } <line_num>: 209,211
public void setFixedIntervalWidth(double w) { [EOL]     if (w < 0.0) { [EOL]         throw new IllegalArgumentException("Negative 'w' argument."); [EOL]     } [EOL]     this.fixedIntervalWidth = w; [EOL]     this.autoWidth = false; [EOL] } <line_num>: 224,230
public double getIntervalWidth() { [EOL]     if (isAutoWidth() && !Double.isInfinite(this.autoIntervalWidth)) { [EOL]         return this.autoIntervalWidth; [EOL]     } else { [EOL]         return this.fixedIntervalWidth; [EOL]     } [EOL] } <line_num>: 239,249
public Number getStartX(int series, int item) { [EOL]     Number startX = null; [EOL]     Number x = this.dataset.getX(series, item); [EOL]     if (x != null) { [EOL]         startX = new Double(x.doubleValue() - (getIntervalPositionFactor() * getIntervalWidth())); [EOL]     } [EOL]     return startX; [EOL] } <line_num>: 261,269
public double getStartXValue(int series, int item) { [EOL]     return this.dataset.getXValue(series, item) - getIntervalPositionFactor() * getIntervalWidth(); [EOL] } <line_num>: 281,284
public Number getEndX(int series, int item) { [EOL]     Number endX = null; [EOL]     Number x = this.dataset.getX(series, item); [EOL]     if (x != null) { [EOL]         endX = new Double(x.doubleValue() + ((1.0 - getIntervalPositionFactor()) * getIntervalWidth())); [EOL]     } [EOL]     return endX; [EOL] } <line_num>: 296,304
public double getEndXValue(int series, int item) { [EOL]     return this.dataset.getXValue(series, item) + (1.0 - getIntervalPositionFactor()) * getIntervalWidth(); [EOL] } <line_num>: 316,319
public double getDomainLowerBound(boolean includeInterval) { [EOL]     double result = Double.NaN; [EOL]     Range r = getDomainBounds(includeInterval); [EOL]     if (r != null) { [EOL]         result = r.getLowerBound(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 329,336
public double getDomainUpperBound(boolean includeInterval) { [EOL]     double result = Double.NaN; [EOL]     Range r = getDomainBounds(includeInterval); [EOL]     if (r != null) { [EOL]         result = r.getUpperBound(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 346,353
public Range getDomainBounds(boolean includeInterval) { [EOL]     Range range = DatasetUtilities.findDomainBounds(this.dataset, false); [EOL]     if (includeInterval && range != null) { [EOL]         double lowerAdj = getIntervalWidth() * getIntervalPositionFactor(); [EOL]         double upperAdj = getIntervalWidth() - lowerAdj; [EOL]         range = new Range(range.getLowerBound() - lowerAdj, range.getUpperBound() + upperAdj); [EOL]     } [EOL]     return range; [EOL] } <line_num>: 364,375
public void datasetChanged(DatasetChangeEvent e) { [EOL]     if (this.autoWidth) { [EOL]         this.autoIntervalWidth = recalculateInterval(); [EOL]     } [EOL] } <line_num>: 383,392
private double recalculateInterval() { [EOL]     double result = Double.POSITIVE_INFINITY; [EOL]     int seriesCount = this.dataset.getSeriesCount(); [EOL]     for (int series = 0; series < seriesCount; series++) { [EOL]         result = Math.min(result, calculateIntervalForSeries(series)); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 399,406
private double calculateIntervalForSeries(int series) { [EOL]     double result = Double.POSITIVE_INFINITY; [EOL]     int itemCount = this.dataset.getItemCount(series); [EOL]     if (itemCount > 1) { [EOL]         double prev = this.dataset.getXValue(series, 0); [EOL]         for (int item = 1; item < itemCount; item++) { [EOL]             double x = this.dataset.getXValue(series, item); [EOL]             result = Math.min(result, x - prev); [EOL]             prev = x; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 415,427
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof IntervalXYDelegate)) { [EOL]         return false; [EOL]     } [EOL]     IntervalXYDelegate that = (IntervalXYDelegate) obj; [EOL]     if (this.autoWidth != that.autoWidth) { [EOL]         return false; [EOL]     } [EOL]     if (this.intervalPositionFactor != that.intervalPositionFactor) { [EOL]         return false; [EOL]     } [EOL]     if (this.fixedIntervalWidth != that.fixedIntervalWidth) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 440,458
public Object clone() throws CloneNotSupportedException { [EOL]     return super.clone(); [EOL] } <line_num>: 465,467
public int hashCode() { [EOL]     int hash = 5; [EOL]     hash = HashUtilities.hashCode(hash, this.autoWidth); [EOL]     hash = HashUtilities.hashCode(hash, this.intervalPositionFactor); [EOL]     hash = HashUtilities.hashCode(hash, this.fixedIntervalWidth); [EOL]     return hash; [EOL] } <line_num>: 474,480
