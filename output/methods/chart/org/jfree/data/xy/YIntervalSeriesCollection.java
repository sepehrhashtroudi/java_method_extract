public YIntervalSeriesCollection() { [EOL]     this.data = new java.util.ArrayList(); [EOL] } <line_num>: 73,75
public void addSeries(YIntervalSeries series) { [EOL]     if (series == null) { [EOL]         throw new IllegalArgumentException("Null 'series' argument."); [EOL]     } [EOL]     this.data.add(series); [EOL]     series.addChangeListener(this); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 83,91
public int getSeriesCount() { [EOL]     return this.data.size(); [EOL] } <line_num>: 98,100
public YIntervalSeries getSeries(int series) { [EOL]     if ((series < 0) || (series >= getSeriesCount())) { [EOL]         throw new IllegalArgumentException("Series index out of bounds"); [EOL]     } [EOL]     return (YIntervalSeries) this.data.get(series); [EOL] } <line_num>: 112,117
public Comparable getSeriesKey(int series) { [EOL]     return getSeries(series).getKey(); [EOL] } <line_num>: 130,133
public int getItemCount(int series) { [EOL]     return getSeries(series).getItemCount(); [EOL] } <line_num>: 145,148
public Number getX(int series, int item) { [EOL]     YIntervalSeries s = (YIntervalSeries) this.data.get(series); [EOL]     return s.getX(item); [EOL] } <line_num>: 158,161
public double getYValue(int series, int item) { [EOL]     YIntervalSeries s = (YIntervalSeries) this.data.get(series); [EOL]     return s.getYValue(item); [EOL] } <line_num>: 172,175
public double getStartYValue(int series, int item) { [EOL]     YIntervalSeries s = (YIntervalSeries) this.data.get(series); [EOL]     return s.getYLowValue(item); [EOL] } <line_num>: 186,189
public double getEndYValue(int series, int item) { [EOL]     YIntervalSeries s = (YIntervalSeries) this.data.get(series); [EOL]     return s.getYHighValue(item); [EOL] } <line_num>: 200,203
public Number getY(int series, int item) { [EOL]     YIntervalSeries s = (YIntervalSeries) this.data.get(series); [EOL]     return new Double(s.getYValue(item)); [EOL] } <line_num>: 213,216
public Number getStartX(int series, int item) { [EOL]     return getX(series, item); [EOL] } <line_num>: 227,229
public Number getEndX(int series, int item) { [EOL]     return getX(series, item); [EOL] } <line_num>: 240,242
public Number getStartY(int series, int item) { [EOL]     YIntervalSeries s = (YIntervalSeries) this.data.get(series); [EOL]     return new Double(s.getYLowValue(item)); [EOL] } <line_num>: 252,255
public Number getEndY(int series, int item) { [EOL]     YIntervalSeries s = (YIntervalSeries) this.data.get(series); [EOL]     return new Double(s.getYHighValue(item)); [EOL] } <line_num>: 265,268
public void removeSeries(int series) { [EOL]     if ((series < 0) || (series >= getSeriesCount())) { [EOL]         throw new IllegalArgumentException("Series index out of bounds."); [EOL]     } [EOL]     YIntervalSeries ts = (YIntervalSeries) this.data.get(series); [EOL]     ts.removeChangeListener(this); [EOL]     this.data.remove(series); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 278,287
public void removeSeries(YIntervalSeries series) { [EOL]     if (series == null) { [EOL]         throw new IllegalArgumentException("Null 'series' argument."); [EOL]     } [EOL]     if (this.data.contains(series)) { [EOL]         series.removeChangeListener(this); [EOL]         this.data.remove(series); [EOL]         fireDatasetChanged(new DatasetChangeInfo()); [EOL]     } [EOL] } <line_num>: 297,307
public void removeAllSeries() { [EOL]     for (int i = 0; i < this.data.size(); i++) { [EOL]         YIntervalSeries series = (YIntervalSeries) this.data.get(i); [EOL]         series.removeChangeListener(this); [EOL]     } [EOL]     this.data.clear(); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 315,325
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof YIntervalSeriesCollection)) { [EOL]         return false; [EOL]     } [EOL]     YIntervalSeriesCollection that = (YIntervalSeriesCollection) obj; [EOL]     return ObjectUtilities.equal(this.data, that.data); [EOL] } <line_num>: 334,343
public Object clone() throws CloneNotSupportedException { [EOL]     YIntervalSeriesCollection clone = (YIntervalSeriesCollection) super.clone(); [EOL]     clone.data = (List) ObjectUtilities.deepClone(this.data); [EOL]     return clone; [EOL] } <line_num>: 352,357
