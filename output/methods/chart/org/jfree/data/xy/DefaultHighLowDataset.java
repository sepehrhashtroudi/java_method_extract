public DefaultHighLowDataset(Comparable seriesKey, Date[] date, double[] high, double[] low, double[] open, double[] close, double[] volume) { [EOL]     if (seriesKey == null) { [EOL]         throw new IllegalArgumentException("Null 'series' argument."); [EOL]     } [EOL]     if (date == null) { [EOL]         throw new IllegalArgumentException("Null 'date' argument."); [EOL]     } [EOL]     this.seriesKey = seriesKey; [EOL]     this.date = date; [EOL]     this.selected = new boolean[this.date.length]; [EOL]     this.high = createNumberArray(high); [EOL]     this.low = createNumberArray(low); [EOL]     this.open = createNumberArray(open); [EOL]     this.close = createNumberArray(close); [EOL]     this.volume = createNumberArray(volume); [EOL]     setSelectionState(this); [EOL] } <line_num>: 104,124
public Comparable getSeriesKey(int series) { [EOL]     return this.seriesKey; [EOL] } <line_num>: 134,136
public Number getX(int series, int item) { [EOL]     return new Long(this.date[item].getTime()); [EOL] } <line_num>: 152,154
public Date getXDate(int series, int item) { [EOL]     return this.date[item]; [EOL] } <line_num>: 168,170
public Number getY(int series, int item) { [EOL]     return getClose(series, item); [EOL] } <line_num>: 185,187
public Number getHigh(int series, int item) { [EOL]     return this.high[item]; [EOL] } <line_num>: 199,201
public double getHighValue(int series, int item) { [EOL]     double result = Double.NaN; [EOL]     Number n = getHigh(series, item); [EOL]     if (n != null) { [EOL]         result = n.doubleValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 214,221
public Number getLow(int series, int item) { [EOL]     return this.low[item]; [EOL] } <line_num>: 233,235
public double getLowValue(int series, int item) { [EOL]     double result = Double.NaN; [EOL]     Number low = getLow(series, item); [EOL]     if (low != null) { [EOL]         result = low.doubleValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 248,255
public Number getOpen(int series, int item) { [EOL]     return this.open[item]; [EOL] } <line_num>: 267,269
public double getOpenValue(int series, int item) { [EOL]     double result = Double.NaN; [EOL]     Number open = getOpen(series, item); [EOL]     if (open != null) { [EOL]         result = open.doubleValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 282,289
public Number getClose(int series, int item) { [EOL]     return this.close[item]; [EOL] } <line_num>: 301,303
public double getCloseValue(int series, int item) { [EOL]     double result = Double.NaN; [EOL]     Number close = getClose(series, item); [EOL]     if (close != null) { [EOL]         result = close.doubleValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 316,323
public Number getVolume(int series, int item) { [EOL]     return this.volume[item]; [EOL] } <line_num>: 335,337
public double getVolumeValue(int series, int item) { [EOL]     double result = Double.NaN; [EOL]     Number volume = getVolume(series, item); [EOL]     if (volume != null) { [EOL]         result = volume.doubleValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 350,357
public int getSeriesCount() { [EOL]     return 1; [EOL] } <line_num>: 366,368
public int getItemCount(int series) { [EOL]     return this.date.length; [EOL] } <line_num>: 377,379
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof DefaultHighLowDataset)) { [EOL]         return false; [EOL]     } [EOL]     DefaultHighLowDataset that = (DefaultHighLowDataset) obj; [EOL]     if (!this.seriesKey.equals(that.seriesKey)) { [EOL]         return false; [EOL]     } [EOL]     if (!Arrays.equals(this.date, that.date)) { [EOL]         return false; [EOL]     } [EOL]     if (!Arrays.equals(this.open, that.open)) { [EOL]         return false; [EOL]     } [EOL]     if (!Arrays.equals(this.high, that.high)) { [EOL]         return false; [EOL]     } [EOL]     if (!Arrays.equals(this.low, that.low)) { [EOL]         return false; [EOL]     } [EOL]     if (!Arrays.equals(this.close, that.close)) { [EOL]         return false; [EOL]     } [EOL]     if (!Arrays.equals(this.volume, that.volume)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 388,418
public static Number[] createNumberArray(double[] data) { [EOL]     Number[] result = new Number[data.length]; [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         result[i] = new Double(data[i]); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 428,434
public boolean isSelected(int series, int item) { [EOL]     return this.selected[item]; [EOL] } <line_num>: 436,438
public void setSelected(int series, int item, boolean selected) { [EOL]     setSelected(series, item, selected, true); [EOL] } <line_num>: 440,442
public void setSelected(int series, int item, boolean selected, boolean notify) { [EOL]     if (series != 0) { [EOL]         throw new IllegalArgumentException("Invalid series: " + series); [EOL]     } [EOL]     this.selected[item] = selected; [EOL]     if (notify) { [EOL]         fireSelectionEvent(); [EOL]     } [EOL] } <line_num>: 444,453
public void fireSelectionEvent() { [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 455,457
public void clearSelection() { [EOL]     Arrays.fill(this.selected, false); [EOL]     fireSelectionEvent(); [EOL] } <line_num>: 459,462
