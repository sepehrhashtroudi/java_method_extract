public DefaultMultiValueCategoryDataset() { [EOL]     this.data = new KeyedObjects2D(); [EOL]     this.minimumRangeValue = null; [EOL]     this.maximumRangeValue = null; [EOL]     this.rangeBounds = new Range(0.0, 0.0); [EOL] } <line_num>: 88,93
public void add(List values, Comparable rowKey, Comparable columnKey) { [EOL]     if (values == null) { [EOL]         throw new IllegalArgumentException("Null 'values' argument."); [EOL]     } [EOL]     if (rowKey == null) { [EOL]         throw new IllegalArgumentException("Null 'rowKey' argument."); [EOL]     } [EOL]     if (columnKey == null) { [EOL]         throw new IllegalArgumentException("Null 'columnKey' argument."); [EOL]     } [EOL]     List vlist = new ArrayList(values.size()); [EOL]     Iterator iterator = values.listIterator(); [EOL]     while (iterator.hasNext()) { [EOL]         Object obj = iterator.next(); [EOL]         if (obj instanceof Number) { [EOL]             Number n = (Number) obj; [EOL]             double v = n.doubleValue(); [EOL]             if (!Double.isNaN(v)) { [EOL]                 vlist.add(n); [EOL]             } [EOL]         } [EOL]     } [EOL]     Collections.sort(vlist); [EOL]     this.data.addObject(vlist, rowKey, columnKey); [EOL]     if (vlist.size() > 0) { [EOL]         double maxval = Double.NEGATIVE_INFINITY; [EOL]         double minval = Double.POSITIVE_INFINITY; [EOL]         for (int i = 0; i < vlist.size(); i++) { [EOL]             Number n = (Number) vlist.get(i); [EOL]             double v = n.doubleValue(); [EOL]             minval = Math.min(minval, v); [EOL]             maxval = Math.max(maxval, v); [EOL]         } [EOL]         if (this.maximumRangeValue == null) { [EOL]             this.maximumRangeValue = new Double(maxval); [EOL]         } else if (maxval > this.maximumRangeValue.doubleValue()) { [EOL]             this.maximumRangeValue = new Double(maxval); [EOL]         } [EOL]         if (this.minimumRangeValue == null) { [EOL]             this.minimumRangeValue = new Double(minval); [EOL]         } else if (minval < this.minimumRangeValue.doubleValue()) { [EOL]             this.minimumRangeValue = new Double(minval); [EOL]         } [EOL]         this.rangeBounds = new Range(this.minimumRangeValue.doubleValue(), this.maximumRangeValue.doubleValue()); [EOL]     } [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 104,160
public List getValues(int row, int column) { [EOL]     List values = (List) this.data.getObject(row, column); [EOL]     if (values != null) { [EOL]         return Collections.unmodifiableList(values); [EOL]     } else { [EOL]         return Collections.EMPTY_LIST; [EOL]     } [EOL] } <line_num>: 171,179
public List getValues(Comparable rowKey, Comparable columnKey) { [EOL]     return Collections.unmodifiableList((List) this.data.getObject(rowKey, columnKey)); [EOL] } <line_num>: 190,193
public Number getValue(Comparable row, Comparable column) { [EOL]     List l = (List) this.data.getObject(row, column); [EOL]     double average = 0.0d; [EOL]     int count = 0; [EOL]     if (l != null && l.size() > 0) { [EOL]         for (int i = 0; i < l.size(); i++) { [EOL]             Number n = (Number) l.get(i); [EOL]             average += n.doubleValue(); [EOL]             count += 1; [EOL]         } [EOL]         if (count > 0) { [EOL]             average = average / count; [EOL]         } [EOL]     } [EOL]     if (count == 0) { [EOL]         return null; [EOL]     } [EOL]     return new Double(average); [EOL] } <line_num>: 203,221
public Number getValue(int row, int column) { [EOL]     List l = (List) this.data.getObject(row, column); [EOL]     double average = 0.0d; [EOL]     int count = 0; [EOL]     if (l != null && l.size() > 0) { [EOL]         for (int i = 0; i < l.size(); i++) { [EOL]             Number n = (Number) l.get(i); [EOL]             average += n.doubleValue(); [EOL]             count += 1; [EOL]         } [EOL]         if (count > 0) { [EOL]             average = average / count; [EOL]         } [EOL]     } [EOL]     if (count == 0) { [EOL]         return null; [EOL]     } [EOL]     return new Double(average); [EOL] } <line_num>: 231,249
public int getColumnIndex(Comparable key) { [EOL]     return this.data.getColumnIndex(key); [EOL] } <line_num>: 258,260
public Comparable getColumnKey(int column) { [EOL]     return this.data.getColumnKey(column); [EOL] } <line_num>: 269,271
public List getColumnKeys() { [EOL]     return this.data.getColumnKeys(); [EOL] } <line_num>: 278,280
public int getRowIndex(Comparable key) { [EOL]     return this.data.getRowIndex(key); [EOL] } <line_num>: 289,291
public Comparable getRowKey(int row) { [EOL]     return this.data.getRowKey(row); [EOL] } <line_num>: 300,302
public List getRowKeys() { [EOL]     return this.data.getRowKeys(); [EOL] } <line_num>: 309,311
public int getRowCount() { [EOL]     return this.data.getRowCount(); [EOL] } <line_num>: 318,320
public int getColumnCount() { [EOL]     return this.data.getColumnCount(); [EOL] } <line_num>: 327,329
public double getRangeLowerBound(boolean includeInterval) { [EOL]     double result = Double.NaN; [EOL]     if (this.minimumRangeValue != null) { [EOL]         result = this.minimumRangeValue.doubleValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 339,345
public double getRangeUpperBound(boolean includeInterval) { [EOL]     double result = Double.NaN; [EOL]     if (this.maximumRangeValue != null) { [EOL]         result = this.maximumRangeValue.doubleValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 355,361
public Range getRangeBounds(boolean includeInterval) { [EOL]     return this.rangeBounds; [EOL] } <line_num>: 370,372
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof DefaultMultiValueCategoryDataset)) { [EOL]         return false; [EOL]     } [EOL]     DefaultMultiValueCategoryDataset that = (DefaultMultiValueCategoryDataset) obj; [EOL]     return this.data.equals(that.data); [EOL] } <line_num>: 381,391
public Object clone() throws CloneNotSupportedException { [EOL]     DefaultMultiValueCategoryDataset clone = (DefaultMultiValueCategoryDataset) super.clone(); [EOL]     clone.data = (KeyedObjects2D) this.data.clone(); [EOL]     return clone; [EOL] } <line_num>: 400,405
