public DefaultBoxAndWhiskerXYDataset(Comparable seriesKey) { [EOL]     this.seriesKey = seriesKey; [EOL]     this.dates = new ArrayList(); [EOL]     this.items = new ArrayList(); [EOL]     this.minimumRangeValue = null; [EOL]     this.maximumRangeValue = null; [EOL]     this.rangeBounds = null; [EOL] } <line_num>: 123,130
public double getOutlierCoefficient() { [EOL]     return this.outlierCoefficient; [EOL] } <line_num>: 144,146
public void setOutlierCoefficient(double outlierCoefficient) { [EOL]     this.outlierCoefficient = outlierCoefficient; [EOL] } <line_num>: 156,158
public double getFaroutCoefficient() { [EOL]     return this.faroutCoefficient; [EOL] } <line_num>: 169,171
public void setFaroutCoefficient(double faroutCoefficient) { [EOL]     if (faroutCoefficient > getOutlierCoefficient()) { [EOL]         this.faroutCoefficient = faroutCoefficient; [EOL]     } else { [EOL]         throw new IllegalArgumentException("Farout value must be greater " + "than the outlier value, which is currently set at: (" + getOutlierCoefficient() + ")"); [EOL]     } [EOL] } <line_num>: 182,192
public int getSeriesCount() { [EOL]     return 1; [EOL] } <line_num>: 201,203
public int getItemCount(int series) { [EOL]     return this.dates.size(); [EOL] } <line_num>: 212,214
public void add(Date date, BoxAndWhiskerItem item) { [EOL]     this.dates.add(date); [EOL]     this.items.add(item); [EOL]     if (this.minimumRangeValue == null) { [EOL]         this.minimumRangeValue = item.getMinRegularValue(); [EOL]     } else { [EOL]         if (item.getMinRegularValue().doubleValue() < this.minimumRangeValue.doubleValue()) { [EOL]             this.minimumRangeValue = item.getMinRegularValue(); [EOL]         } [EOL]     } [EOL]     if (this.maximumRangeValue == null) { [EOL]         this.maximumRangeValue = item.getMaxRegularValue(); [EOL]     } else { [EOL]         if (item.getMaxRegularValue().doubleValue() > this.maximumRangeValue.doubleValue()) { [EOL]             this.maximumRangeValue = item.getMaxRegularValue(); [EOL]         } [EOL]     } [EOL]     this.rangeBounds = new Range(this.minimumRangeValue.doubleValue(), this.maximumRangeValue.doubleValue()); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 223,248
public Comparable getSeriesKey(int i) { [EOL]     return this.seriesKey; [EOL] } <line_num>: 257,259
public BoxAndWhiskerItem getItem(int series, int item) { [EOL]     return (BoxAndWhiskerItem) this.items.get(item); [EOL] } <line_num>: 270,272
public Number getX(int series, int item) { [EOL]     return new Long(((Date) this.dates.get(item)).getTime()); [EOL] } <line_num>: 285,287
public Date getXDate(int series, int item) { [EOL]     return (Date) this.dates.get(item); [EOL] } <line_num>: 299,301
public Number getY(int series, int item) { [EOL]     return getMeanValue(series, item); [EOL] } <line_num>: 314,316
public Number getMeanValue(int series, int item) { [EOL]     Number result = null; [EOL]     BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item); [EOL]     if (stats != null) { [EOL]         result = stats.getMean(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 326,333
public Number getMedianValue(int series, int item) { [EOL]     Number result = null; [EOL]     BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item); [EOL]     if (stats != null) { [EOL]         result = stats.getMedian(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 343,350
public Number getQ1Value(int series, int item) { [EOL]     Number result = null; [EOL]     BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item); [EOL]     if (stats != null) { [EOL]         result = stats.getQ1(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 360,367
public Number getQ3Value(int series, int item) { [EOL]     Number result = null; [EOL]     BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item); [EOL]     if (stats != null) { [EOL]         result = stats.getQ3(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 377,384
public Number getMinRegularValue(int series, int item) { [EOL]     Number result = null; [EOL]     BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item); [EOL]     if (stats != null) { [EOL]         result = stats.getMinRegularValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 394,401
public Number getMaxRegularValue(int series, int item) { [EOL]     Number result = null; [EOL]     BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item); [EOL]     if (stats != null) { [EOL]         result = stats.getMaxRegularValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 411,418
public Number getMinOutlier(int series, int item) { [EOL]     Number result = null; [EOL]     BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item); [EOL]     if (stats != null) { [EOL]         result = stats.getMinOutlier(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 427,434
public Number getMaxOutlier(int series, int item) { [EOL]     Number result = null; [EOL]     BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item); [EOL]     if (stats != null) { [EOL]         result = stats.getMaxOutlier(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 445,452
public List getOutliers(int series, int item) { [EOL]     List result = null; [EOL]     BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item); [EOL]     if (stats != null) { [EOL]         result = stats.getOutliers(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 462,469
public double getRangeLowerBound(boolean includeInterval) { [EOL]     double result = Double.NaN; [EOL]     if (this.minimumRangeValue != null) { [EOL]         result = this.minimumRangeValue.doubleValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 479,485
public double getRangeUpperBound(boolean includeInterval) { [EOL]     double result = Double.NaN; [EOL]     if (this.maximumRangeValue != null) { [EOL]         result = this.maximumRangeValue.doubleValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 495,501
public Range getRangeBounds(boolean includeInterval) { [EOL]     return this.rangeBounds; [EOL] } <line_num>: 511,513
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof DefaultBoxAndWhiskerXYDataset)) { [EOL]         return false; [EOL]     } [EOL]     DefaultBoxAndWhiskerXYDataset that = (DefaultBoxAndWhiskerXYDataset) obj; [EOL]     if (!ObjectUtilities.equal(this.seriesKey, that.seriesKey)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.dates.equals(that.dates)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.items.equals(that.items)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 522,541
public Object clone() throws CloneNotSupportedException { [EOL]     DefaultBoxAndWhiskerXYDataset clone = (DefaultBoxAndWhiskerXYDataset) super.clone(); [EOL]     clone.dates = new java.util.ArrayList(this.dates); [EOL]     clone.items = new java.util.ArrayList(this.items); [EOL]     return clone; [EOL] } <line_num>: 550,556
