public SimpleHistogramDataset(Comparable key) { [EOL]     if (key == null) { [EOL]         throw new IllegalArgumentException("Null 'key' argument."); [EOL]     } [EOL]     this.key = key; [EOL]     this.bins = new ArrayList(); [EOL]     this.adjustForBinSize = true; [EOL]     setSelectionState(this); [EOL] } <line_num>: 95,103
public boolean getAdjustForBinSize() { [EOL]     return this.adjustForBinSize; [EOL] } <line_num>: 113,115
public void setAdjustForBinSize(boolean adjust) { [EOL]     this.adjustForBinSize = adjust; [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 126,130
public int getSeriesCount() { [EOL]     return 1; [EOL] } <line_num>: 137,139
public Comparable getSeriesKey(int series) { [EOL]     return this.key; [EOL] } <line_num>: 149,151
public DomainOrder getDomainOrder() { [EOL]     return DomainOrder.ASCENDING; [EOL] } <line_num>: 158,160
public int getItemCount(int series) { [EOL]     return this.bins.size(); [EOL] } <line_num>: 170,172
public void addBin(SimpleHistogramBin bin) { [EOL]     Iterator iterator = this.bins.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         SimpleHistogramBin existingBin = (SimpleHistogramBin) iterator.next(); [EOL]         if (bin.overlapsWith(existingBin)) { [EOL]             throw new RuntimeException("Overlapping bin"); [EOL]         } [EOL]     } [EOL]     this.bins.add(bin); [EOL]     Collections.sort(this.bins); [EOL] } <line_num>: 182,194
public void addObservation(double value) { [EOL]     addObservation(value, true); [EOL] } <line_num>: 203,205
public void addObservation(double value, boolean notify) { [EOL]     boolean placed = false; [EOL]     Iterator iterator = this.bins.iterator(); [EOL]     while (iterator.hasNext() && !placed) { [EOL]         SimpleHistogramBin bin = (SimpleHistogramBin) iterator.next(); [EOL]         if (bin.accepts(value)) { [EOL]             bin.setItemCount(bin.getItemCount() + 1); [EOL]             placed = true; [EOL]         } [EOL]     } [EOL]     if (!placed) { [EOL]         throw new RuntimeException("No bin."); [EOL]     } [EOL]     if (notify) { [EOL]         fireDatasetChanged(new DatasetChangeInfo()); [EOL]     } [EOL] } <line_num>: 215,232
public void addObservations(double[] values) { [EOL]     for (int i = 0; i < values.length; i++) { [EOL]         addObservation(values[i], false); [EOL]     } [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 242,248
public void clearObservations() { [EOL]     Iterator iterator = this.bins.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         SimpleHistogramBin bin = (SimpleHistogramBin) iterator.next(); [EOL]         bin.setItemCount(0); [EOL]     } [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 259,267
public void removeAllBins() { [EOL]     this.bins = new ArrayList(); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 277,281
public Number getX(int series, int item) { [EOL]     return new Double(getXValue(series, item)); [EOL] } <line_num>: 293,295
public double getXValue(int series, int item) { [EOL]     SimpleHistogramBin bin = (SimpleHistogramBin) this.bins.get(item); [EOL]     return (bin.getLowerBound() + bin.getUpperBound()) / 2.0; [EOL] } <line_num>: 305,308
public Number getY(int series, int item) { [EOL]     return new Double(getYValue(series, item)); [EOL] } <line_num>: 318,320
public double getYValue(int series, int item) { [EOL]     SimpleHistogramBin bin = (SimpleHistogramBin) this.bins.get(item); [EOL]     if (this.adjustForBinSize) { [EOL]         return bin.getItemCount() / (bin.getUpperBound() - bin.getLowerBound()); [EOL]     } else { [EOL]         return bin.getItemCount(); [EOL]     } [EOL] } <line_num>: 332,341
public Number getStartX(int series, int item) { [EOL]     return new Double(getStartXValue(series, item)); [EOL] } <line_num>: 351,353
public double getStartXValue(int series, int item) { [EOL]     SimpleHistogramBin bin = (SimpleHistogramBin) this.bins.get(item); [EOL]     return bin.getLowerBound(); [EOL] } <line_num>: 364,367
public Number getEndX(int series, int item) { [EOL]     return new Double(getEndXValue(series, item)); [EOL] } <line_num>: 377,379
public double getEndXValue(int series, int item) { [EOL]     SimpleHistogramBin bin = (SimpleHistogramBin) this.bins.get(item); [EOL]     return bin.getUpperBound(); [EOL] } <line_num>: 390,393
public Number getStartY(int series, int item) { [EOL]     return getY(series, item); [EOL] } <line_num>: 403,405
public double getStartYValue(int series, int item) { [EOL]     return getYValue(series, item); [EOL] } <line_num>: 416,418
public Number getEndY(int series, int item) { [EOL]     return getY(series, item); [EOL] } <line_num>: 428,430
public double getEndYValue(int series, int item) { [EOL]     return getYValue(series, item); [EOL] } <line_num>: 441,443
public boolean isSelected(int series, int item) { [EOL]     SimpleHistogramBin bin = (SimpleHistogramBin) this.bins.get(item); [EOL]     return bin.isSelected(); [EOL] } <line_num>: 454,457
public void setSelected(int series, int item, boolean selected) { [EOL]     setSelected(series, item, selected, true); [EOL] } <line_num>: 465,467
public void setSelected(int series, int item, boolean selected, boolean notify) { [EOL]     SimpleHistogramBin bin = (SimpleHistogramBin) this.bins.get(item); [EOL]     bin.setSelected(selected); [EOL]     if (notify) { [EOL]         fireSelectionEvent(); [EOL]     } [EOL] } <line_num>: 480,488
public void clearSelection() { [EOL]     Iterator iterator = this.bins.iterator(); [EOL]     boolean changed = false; [EOL]     while (iterator.hasNext()) { [EOL]         SimpleHistogramBin bin = (SimpleHistogramBin) iterator.next(); [EOL]         if (bin.isSelected()) { [EOL]             bin.setSelected(false); [EOL]             changed = true; [EOL]         } [EOL]     } [EOL]     if (changed) { [EOL]         fireSelectionEvent(); [EOL]     } [EOL] } <line_num>: 496,509
public void fireSelectionEvent() { [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 517,520
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof SimpleHistogramDataset)) { [EOL]         return false; [EOL]     } [EOL]     SimpleHistogramDataset that = (SimpleHistogramDataset) obj; [EOL]     if (!this.key.equals(that.key)) { [EOL]         return false; [EOL]     } [EOL]     if (this.adjustForBinSize != that.adjustForBinSize) { [EOL]         return false; [EOL]     } [EOL]     if (!this.bins.equals(that.bins)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 529,547
public Object clone() throws CloneNotSupportedException { [EOL]     SimpleHistogramDataset clone = (SimpleHistogramDataset) super.clone(); [EOL]     clone.bins = (List) ObjectUtilities.deepClone(this.bins); [EOL]     return clone; [EOL] } <line_num>: 557,561
