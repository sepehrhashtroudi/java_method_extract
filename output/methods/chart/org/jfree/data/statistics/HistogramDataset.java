public HistogramDataset() { [EOL]     this.list = new ArrayList(); [EOL]     this.type = HistogramType.FREQUENCY; [EOL] } <line_num>: 97,100
public HistogramType getType() { [EOL]     return this.type; [EOL] } <line_num>: 107,109
public void setType(HistogramType type) { [EOL]     if (type == null) { [EOL]         throw new IllegalArgumentException("Null 'type' argument"); [EOL]     } [EOL]     this.type = type; [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 117,124
public void addSeries(Comparable key, double[] values, int bins) { [EOL]     double minimum = getMinimum(values); [EOL]     double maximum = getMaximum(values); [EOL]     addSeries(key, values, bins, minimum, maximum); [EOL] } <line_num>: 133,138
public void addSeries(Comparable key, double[] values, int bins, double minimum, double maximum) { [EOL]     if (key == null) { [EOL]         throw new IllegalArgumentException("Null 'key' argument."); [EOL]     } [EOL]     if (values == null) { [EOL]         throw new IllegalArgumentException("Null 'values' argument."); [EOL]     } else if (bins < 1) { [EOL]         throw new IllegalArgumentException("The 'bins' value must be at least 1."); [EOL]     } [EOL]     double binWidth = (maximum - minimum) / bins; [EOL]     double lower = minimum; [EOL]     double upper; [EOL]     List binList = new ArrayList(bins); [EOL]     for (int i = 0; i < bins; i++) { [EOL]         HistogramBin bin; [EOL]         if (i == bins - 1) { [EOL]             bin = new HistogramBin(lower, maximum); [EOL]         } else { [EOL]             upper = minimum + (i + 1) * binWidth; [EOL]             bin = new HistogramBin(lower, upper); [EOL]             lower = upper; [EOL]         } [EOL]         binList.add(bin); [EOL]     } [EOL]     for (int i = 0; i < values.length; i++) { [EOL]         int binIndex = bins - 1; [EOL]         if (values[i] < maximum) { [EOL]             double fraction = (values[i] - minimum) / (maximum - minimum); [EOL]             if (fraction < 0.0) { [EOL]                 fraction = 0.0; [EOL]             } [EOL]             binIndex = (int) (fraction * bins); [EOL]             if (binIndex >= bins) { [EOL]                 binIndex = bins - 1; [EOL]             } [EOL]         } [EOL]         HistogramBin bin = (HistogramBin) binList.get(binIndex); [EOL]         bin.incrementCount(); [EOL]     } [EOL]     Map map = new HashMap(); [EOL]     map.put("key", key); [EOL]     map.put("bins", binList); [EOL]     map.put("values.length", new Integer(values.length)); [EOL]     map.put("bin width", new Double(binWidth)); [EOL]     this.list.add(map); [EOL] } <line_num>: 152,214
private double getMinimum(double[] values) { [EOL]     if (values == null || values.length < 1) { [EOL]         throw new IllegalArgumentException("Null or zero length 'values' argument."); [EOL]     } [EOL]     double min = Double.MAX_VALUE; [EOL]     for (int i = 0; i < values.length; i++) { [EOL]         if (values[i] < min) { [EOL]             min = values[i]; [EOL]         } [EOL]     } [EOL]     return min; [EOL] } <line_num>: 224,236
private double getMaximum(double[] values) { [EOL]     if (values == null || values.length < 1) { [EOL]         throw new IllegalArgumentException("Null or zero length 'values' argument."); [EOL]     } [EOL]     double max = -Double.MAX_VALUE; [EOL]     for (int i = 0; i < values.length; i++) { [EOL]         if (values[i] > max) { [EOL]             max = values[i]; [EOL]         } [EOL]     } [EOL]     return max; [EOL] } <line_num>: 246,258
List getBins(int series) { [EOL]     Map map = (Map) this.list.get(series); [EOL]     return (List) map.get("bins"); [EOL] } <line_num>: 271,274
private int getTotal(int series) { [EOL]     Map map = (Map) this.list.get(series); [EOL]     return ((Integer) map.get("values.length")).intValue(); [EOL] } <line_num>: 283,286
private double getBinWidth(int series) { [EOL]     Map map = (Map) this.list.get(series); [EOL]     return ((Double) map.get("bin width")).doubleValue(); [EOL] } <line_num>: 295,298
public int getSeriesCount() { [EOL]     return this.list.size(); [EOL] } <line_num>: 305,307
public Comparable getSeriesKey(int series) { [EOL]     Map map = (Map) this.list.get(series); [EOL]     return (Comparable) map.get("key"); [EOL] } <line_num>: 320,323
public int getItemCount(int series) { [EOL]     return getBins(series).size(); [EOL] } <line_num>: 336,338
public Number getX(int series, int item) { [EOL]     List bins = getBins(series); [EOL]     HistogramBin bin = (HistogramBin) bins.get(item); [EOL]     double x = (bin.getStartBoundary() + bin.getEndBoundary()) / 2.; [EOL]     return new Double(x); [EOL] } <line_num>: 355,360
public Number getY(int series, int item) { [EOL]     List bins = getBins(series); [EOL]     HistogramBin bin = (HistogramBin) bins.get(item); [EOL]     double total = getTotal(series); [EOL]     double binWidth = getBinWidth(series); [EOL]     if (this.type == HistogramType.FREQUENCY) { [EOL]         return new Double(bin.getCount()); [EOL]     } else if (this.type == HistogramType.RELATIVE_FREQUENCY) { [EOL]         return new Double(bin.getCount() / total); [EOL]     } else if (this.type == HistogramType.SCALE_AREA_TO_1) { [EOL]         return new Double(bin.getCount() / (binWidth * total)); [EOL]     } else { [EOL]         throw new IllegalStateException(); [EOL]     } [EOL] } <line_num>: 375,393
public Number getStartX(int series, int item) { [EOL]     List bins = getBins(series); [EOL]     HistogramBin bin = (HistogramBin) bins.get(item); [EOL]     return new Double(bin.getStartBoundary()); [EOL] } <line_num>: 407,411
public Number getEndX(int series, int item) { [EOL]     List bins = getBins(series); [EOL]     HistogramBin bin = (HistogramBin) bins.get(item); [EOL]     return new Double(bin.getEndBoundary()); [EOL] } <line_num>: 425,429
public Number getStartY(int series, int item) { [EOL]     return getY(series, item); [EOL] } <line_num>: 445,447
public Number getEndY(int series, int item) { [EOL]     return getY(series, item); [EOL] } <line_num>: 463,465
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof HistogramDataset)) { [EOL]         return false; [EOL]     } [EOL]     HistogramDataset that = (HistogramDataset) obj; [EOL]     if (!ObjectUtilities.equal(this.type, that.type)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.list, that.list)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 474,489
public Object clone() throws CloneNotSupportedException { [EOL]     HistogramDataset clone = (HistogramDataset) super.clone(); [EOL]     int seriesCount = getSeriesCount(); [EOL]     clone.list = new java.util.ArrayList(seriesCount); [EOL]     for (int i = 0; i < seriesCount; i++) { [EOL]         clone.list.add(new HashMap((Map) this.list.get(i))); [EOL]     } [EOL]     return clone; [EOL] } <line_num>: 498,506
