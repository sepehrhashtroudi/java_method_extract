public DefaultBoxAndWhiskerCategoryDataset() { [EOL]     this.data = new KeyedObjects2D(); [EOL]     this.minimumRangeValue = Double.NaN; [EOL]     this.minimumRangeValueRow = -1; [EOL]     this.minimumRangeValueColumn = -1; [EOL]     this.maximumRangeValue = Double.NaN; [EOL]     this.maximumRangeValueRow = -1; [EOL]     this.maximumRangeValueColumn = -1; [EOL] } <line_num>: 105,113
public void add(List list, Comparable rowKey, Comparable columnKey) { [EOL]     BoxAndWhiskerItem item = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics(list); [EOL]     add(item, rowKey, columnKey); [EOL] } <line_num>: 126,130
public void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey) { [EOL]     this.data.addObject(item, rowKey, columnKey); [EOL]     int r = this.data.getRowIndex(rowKey); [EOL]     int c = this.data.getColumnIndex(columnKey); [EOL]     if ((this.maximumRangeValueRow == r && this.maximumRangeValueColumn == c) || (this.minimumRangeValueRow == r && this.minimumRangeValueColumn == c)) { [EOL]         updateBounds(); [EOL]     } else { [EOL]         double minval = Double.NaN; [EOL]         if (item.getMinOutlier() != null) { [EOL]             minval = item.getMinOutlier().doubleValue(); [EOL]         } [EOL]         double maxval = Double.NaN; [EOL]         if (item.getMaxOutlier() != null) { [EOL]             maxval = item.getMaxOutlier().doubleValue(); [EOL]         } [EOL]         if (Double.isNaN(this.maximumRangeValue)) { [EOL]             this.maximumRangeValue = maxval; [EOL]             this.maximumRangeValueRow = r; [EOL]             this.maximumRangeValueColumn = c; [EOL]         } else if (maxval > this.maximumRangeValue) { [EOL]             this.maximumRangeValue = maxval; [EOL]             this.maximumRangeValueRow = r; [EOL]             this.maximumRangeValueColumn = c; [EOL]         } [EOL]         if (Double.isNaN(this.minimumRangeValue)) { [EOL]             this.minimumRangeValue = minval; [EOL]             this.minimumRangeValueRow = r; [EOL]             this.minimumRangeValueColumn = c; [EOL]         } else if (minval < this.minimumRangeValue) { [EOL]             this.minimumRangeValue = minval; [EOL]             this.minimumRangeValueRow = r; [EOL]             this.minimumRangeValueColumn = c; [EOL]         } [EOL]     } [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 142,192
public void remove(Comparable rowKey, Comparable columnKey) { [EOL]     int r = getRowIndex(rowKey); [EOL]     int c = getColumnIndex(columnKey); [EOL]     this.data.removeObject(rowKey, columnKey); [EOL]     if ((this.maximumRangeValueRow == r && this.maximumRangeValueColumn == c) || (this.minimumRangeValueRow == r && this.minimumRangeValueColumn == c)) { [EOL]         updateBounds(); [EOL]     } [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 205,221
public void removeRow(int rowIndex) { [EOL]     this.data.removeRow(rowIndex); [EOL]     updateBounds(); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 233,238
public void removeRow(Comparable rowKey) { [EOL]     this.data.removeRow(rowKey); [EOL]     updateBounds(); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 250,255
public void removeColumn(int columnIndex) { [EOL]     this.data.removeColumn(columnIndex); [EOL]     updateBounds(); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 267,272
public void removeColumn(Comparable columnKey) { [EOL]     this.data.removeColumn(columnKey); [EOL]     updateBounds(); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 284,289
public void clear() { [EOL]     this.data.clear(); [EOL]     updateBounds(); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 297,302
public BoxAndWhiskerItem getItem(int row, int column) { [EOL]     return (BoxAndWhiskerItem) this.data.getObject(row, column); [EOL] } <line_num>: 312,314
public Number getValue(int row, int column) { [EOL]     return getMedianValue(row, column); [EOL] } <line_num>: 327,329
public Number getValue(Comparable rowKey, Comparable columnKey) { [EOL]     return getMedianValue(rowKey, columnKey); [EOL] } <line_num>: 342,344
public Number getMeanValue(int row, int column) { [EOL]     Number result = null; [EOL]     BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column); [EOL]     if (item != null) { [EOL]         result = item.getMean(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 356,364
public Number getMeanValue(Comparable rowKey, Comparable columnKey) { [EOL]     Number result = null; [EOL]     BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(rowKey, columnKey); [EOL]     if (item != null) { [EOL]         result = item.getMean(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 376,384
public Number getMedianValue(int row, int column) { [EOL]     Number result = null; [EOL]     BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column); [EOL]     if (item != null) { [EOL]         result = item.getMedian(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 396,404
public Number getMedianValue(Comparable rowKey, Comparable columnKey) { [EOL]     Number result = null; [EOL]     BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(rowKey, columnKey); [EOL]     if (item != null) { [EOL]         result = item.getMedian(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 416,424
public Number getQ1Value(int row, int column) { [EOL]     Number result = null; [EOL]     BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column); [EOL]     if (item != null) { [EOL]         result = item.getQ1(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 436,444
public Number getQ1Value(Comparable rowKey, Comparable columnKey) { [EOL]     Number result = null; [EOL]     BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(rowKey, columnKey); [EOL]     if (item != null) { [EOL]         result = item.getQ1(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 456,464
public Number getQ3Value(int row, int column) { [EOL]     Number result = null; [EOL]     BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column); [EOL]     if (item != null) { [EOL]         result = item.getQ3(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 476,484
public Number getQ3Value(Comparable rowKey, Comparable columnKey) { [EOL]     Number result = null; [EOL]     BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(rowKey, columnKey); [EOL]     if (item != null) { [EOL]         result = item.getQ3(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 496,504
public int getColumnIndex(Comparable key) { [EOL]     return this.data.getColumnIndex(key); [EOL] } <line_num>: 515,517
public Comparable getColumnKey(int column) { [EOL]     return this.data.getColumnKey(column); [EOL] } <line_num>: 528,530
public List getColumnKeys() { [EOL]     return this.data.getColumnKeys(); [EOL] } <line_num>: 539,541
public int getRowIndex(Comparable key) { [EOL]     return this.data.getRowIndex(key); [EOL] } <line_num>: 552,555
public Comparable getRowKey(int row) { [EOL]     return this.data.getRowKey(row); [EOL] } <line_num>: 566,568
public List getRowKeys() { [EOL]     return this.data.getRowKeys(); [EOL] } <line_num>: 577,579
public int getRowCount() { [EOL]     return this.data.getRowCount(); [EOL] } <line_num>: 588,590
public int getColumnCount() { [EOL]     return this.data.getColumnCount(); [EOL] } <line_num>: 599,601
public double getRangeLowerBound(boolean includeInterval) { [EOL]     return this.minimumRangeValue; [EOL] } <line_num>: 613,615
public double getRangeUpperBound(boolean includeInterval) { [EOL]     return this.maximumRangeValue; [EOL] } <line_num>: 627,629
public Range getRangeBounds(boolean includeInterval) { [EOL]     return new Range(this.minimumRangeValue, this.maximumRangeValue); [EOL] } <line_num>: 639,641
public Number getMinRegularValue(int row, int column) { [EOL]     Number result = null; [EOL]     BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column); [EOL]     if (item != null) { [EOL]         result = item.getMinRegularValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 653,661
public Number getMinRegularValue(Comparable rowKey, Comparable columnKey) { [EOL]     Number result = null; [EOL]     BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(rowKey, columnKey); [EOL]     if (item != null) { [EOL]         result = item.getMinRegularValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 673,681
public Number getMaxRegularValue(int row, int column) { [EOL]     Number result = null; [EOL]     BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column); [EOL]     if (item != null) { [EOL]         result = item.getMaxRegularValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 693,701
public Number getMaxRegularValue(Comparable rowKey, Comparable columnKey) { [EOL]     Number result = null; [EOL]     BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(rowKey, columnKey); [EOL]     if (item != null) { [EOL]         result = item.getMaxRegularValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 713,721
public Number getMinOutlier(int row, int column) { [EOL]     Number result = null; [EOL]     BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column); [EOL]     if (item != null) { [EOL]         result = item.getMinOutlier(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 733,741
public Number getMinOutlier(Comparable rowKey, Comparable columnKey) { [EOL]     Number result = null; [EOL]     BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(rowKey, columnKey); [EOL]     if (item != null) { [EOL]         result = item.getMinOutlier(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 753,761
public Number getMaxOutlier(int row, int column) { [EOL]     Number result = null; [EOL]     BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column); [EOL]     if (item != null) { [EOL]         result = item.getMaxOutlier(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 773,781
public Number getMaxOutlier(Comparable rowKey, Comparable columnKey) { [EOL]     Number result = null; [EOL]     BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(rowKey, columnKey); [EOL]     if (item != null) { [EOL]         result = item.getMaxOutlier(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 793,801
public List getOutliers(int row, int column) { [EOL]     List result = null; [EOL]     BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column); [EOL]     if (item != null) { [EOL]         result = item.getOutliers(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 813,821
public List getOutliers(Comparable rowKey, Comparable columnKey) { [EOL]     List result = null; [EOL]     BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(rowKey, columnKey); [EOL]     if (item != null) { [EOL]         result = item.getOutliers(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 833,841
private void updateBounds() { [EOL]     this.minimumRangeValue = Double.NaN; [EOL]     this.minimumRangeValueRow = -1; [EOL]     this.minimumRangeValueColumn = -1; [EOL]     this.maximumRangeValue = Double.NaN; [EOL]     this.maximumRangeValueRow = -1; [EOL]     this.maximumRangeValueColumn = -1; [EOL]     int rowCount = getRowCount(); [EOL]     int columnCount = getColumnCount(); [EOL]     for (int r = 0; r < rowCount; r++) { [EOL]         for (int c = 0; c < columnCount; c++) { [EOL]             BoxAndWhiskerItem item = getItem(r, c); [EOL]             if (item != null) { [EOL]                 Number min = item.getMinOutlier(); [EOL]                 if (min != null) { [EOL]                     double minv = min.doubleValue(); [EOL]                     if (!Double.isNaN(minv)) { [EOL]                         if (minv < this.minimumRangeValue || Double.isNaN(this.minimumRangeValue)) { [EOL]                             this.minimumRangeValue = minv; [EOL]                             this.minimumRangeValueRow = r; [EOL]                             this.minimumRangeValueColumn = c; [EOL]                         } [EOL]                     } [EOL]                 } [EOL]                 Number max = item.getMaxOutlier(); [EOL]                 if (max != null) { [EOL]                     double maxv = max.doubleValue(); [EOL]                     if (!Double.isNaN(maxv)) { [EOL]                         if (maxv > this.maximumRangeValue || Double.isNaN(this.maximumRangeValue)) { [EOL]                             this.maximumRangeValue = maxv; [EOL]                             this.maximumRangeValueRow = r; [EOL]                             this.maximumRangeValueColumn = c; [EOL]                         } [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 847,887
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (obj instanceof DefaultBoxAndWhiskerCategoryDataset) { [EOL]         DefaultBoxAndWhiskerCategoryDataset dataset = (DefaultBoxAndWhiskerCategoryDataset) obj; [EOL]         return ObjectUtilities.equal(this.data, dataset.data); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 896,906
public Object clone() throws CloneNotSupportedException { [EOL]     DefaultBoxAndWhiskerCategoryDataset clone = (DefaultBoxAndWhiskerCategoryDataset) super.clone(); [EOL]     clone.data = (KeyedObjects2D) this.data.clone(); [EOL]     return clone; [EOL] } <line_num>: 915,920
