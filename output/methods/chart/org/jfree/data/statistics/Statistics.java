public static double calculateMean(Number[] values) { [EOL]     return calculateMean(values, true); [EOL] } <line_num>: 70,72
public static double calculateMean(Number[] values, boolean includeNullAndNaN) { [EOL]     if (values == null) { [EOL]         throw new IllegalArgumentException("Null 'values' argument."); [EOL]     } [EOL]     double sum = 0.0; [EOL]     double current; [EOL]     int counter = 0; [EOL]     for (int i = 0; i < values.length; i++) { [EOL]         if (values[i] != null) { [EOL]             current = values[i].doubleValue(); [EOL]         } else { [EOL]             current = Double.NaN; [EOL]         } [EOL]         if (includeNullAndNaN || !Double.isNaN(current)) { [EOL]             sum = sum + current; [EOL]             counter++; [EOL]         } [EOL]     } [EOL]     double result = (sum / counter); [EOL]     return result; [EOL] } <line_num>: 87,112
public static double calculateMean(Collection values) { [EOL]     return calculateMean(values, true); [EOL] } <line_num>: 121,123
public static double calculateMean(Collection values, boolean includeNullAndNaN) { [EOL]     if (values == null) { [EOL]         throw new IllegalArgumentException("Null 'values' argument."); [EOL]     } [EOL]     int count = 0; [EOL]     double total = 0.0; [EOL]     Iterator iterator = values.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         Object object = iterator.next(); [EOL]         if (object == null) { [EOL]             if (includeNullAndNaN) { [EOL]                 return Double.NaN; [EOL]             } [EOL]         } else { [EOL]             if (object instanceof Number) { [EOL]                 Number number = (Number) object; [EOL]                 double value = number.doubleValue(); [EOL]                 if (Double.isNaN(value)) { [EOL]                     if (includeNullAndNaN) { [EOL]                         return Double.NaN; [EOL]                     } [EOL]                 } else { [EOL]                     total = total + number.doubleValue(); [EOL]                     count = count + 1; [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return total / count; [EOL] } <line_num>: 138,171
public static double calculateMedian(List values) { [EOL]     return calculateMedian(values, true); [EOL] } <line_num>: 184,186
public static double calculateMedian(List values, boolean copyAndSort) { [EOL]     double result = Double.NaN; [EOL]     if (values != null) { [EOL]         if (copyAndSort) { [EOL]             int itemCount = values.size(); [EOL]             List copy = new ArrayList(itemCount); [EOL]             for (int i = 0; i < itemCount; i++) { [EOL]                 copy.add(i, values.get(i)); [EOL]             } [EOL]             Collections.sort(copy); [EOL]             values = copy; [EOL]         } [EOL]         int count = values.size(); [EOL]         if (count > 0) { [EOL]             if (count % 2 == 1) { [EOL]                 if (count > 1) { [EOL]                     Number value = (Number) values.get((count - 1) / 2); [EOL]                     result = value.doubleValue(); [EOL]                 } else { [EOL]                     Number value = (Number) values.get(0); [EOL]                     result = value.doubleValue(); [EOL]                 } [EOL]             } else { [EOL]                 Number value1 = (Number) values.get(count / 2 - 1); [EOL]                 Number value2 = (Number) values.get(count / 2); [EOL]                 result = (value1.doubleValue() + value2.doubleValue()) / 2.0; [EOL]             } [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 199,233
public static double calculateMedian(List values, int start, int end) { [EOL]     return calculateMedian(values, start, end, true); [EOL] } <line_num>: 246,248
public static double calculateMedian(List values, int start, int end, boolean copyAndSort) { [EOL]     double result = Double.NaN; [EOL]     if (copyAndSort) { [EOL]         List working = new ArrayList(end - start + 1); [EOL]         for (int i = start; i <= end; i++) { [EOL]             working.add(values.get(i)); [EOL]         } [EOL]         Collections.sort(working); [EOL]         result = calculateMedian(working, false); [EOL]     } else { [EOL]         int count = end - start + 1; [EOL]         if (count > 0) { [EOL]             if (count % 2 == 1) { [EOL]                 if (count > 1) { [EOL]                     Number value = (Number) values.get(start + (count - 1) / 2); [EOL]                     result = value.doubleValue(); [EOL]                 } else { [EOL]                     Number value = (Number) values.get(start); [EOL]                     result = value.doubleValue(); [EOL]                 } [EOL]             } else { [EOL]                 Number value1 = (Number) values.get(start + count / 2 - 1); [EOL]                 Number value2 = (Number) values.get(start + count / 2); [EOL]                 result = (value1.doubleValue() + value2.doubleValue()) / 2.0; [EOL]             } [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 263,299
public static double getStdDev(Number[] data) { [EOL]     if (data == null) { [EOL]         throw new IllegalArgumentException("Null 'data' array."); [EOL]     } [EOL]     if (data.length == 0) { [EOL]         throw new IllegalArgumentException("Zero length 'data' array."); [EOL]     } [EOL]     double avg = calculateMean(data); [EOL]     double sum = 0.0; [EOL]     for (int counter = 0; counter < data.length; counter++) { [EOL]         double diff = data[counter].doubleValue() - avg; [EOL]         sum = sum + diff * diff; [EOL]     } [EOL]     return Math.sqrt(sum / (data.length - 1)); [EOL] } <line_num>: 309,324
public static double[] getLinearFit(Number[] xData, Number[] yData) { [EOL]     if (xData == null) { [EOL]         throw new IllegalArgumentException("Null 'xData' argument."); [EOL]     } [EOL]     if (yData == null) { [EOL]         throw new IllegalArgumentException("Null 'yData' argument."); [EOL]     } [EOL]     if (xData.length != yData.length) { [EOL]         throw new IllegalArgumentException("Statistics.getLinearFit(): array lengths must be equal."); [EOL]     } [EOL]     double[] result = new double[2]; [EOL]     result[1] = getSlope(xData, yData); [EOL]     result[0] = calculateMean(yData) - result[1] * calculateMean(xData); [EOL]     return result; [EOL] } <line_num>: 335,356
public static double getSlope(Number[] xData, Number[] yData) { [EOL]     if (xData == null) { [EOL]         throw new IllegalArgumentException("Null 'xData' argument."); [EOL]     } [EOL]     if (yData == null) { [EOL]         throw new IllegalArgumentException("Null 'yData' argument."); [EOL]     } [EOL]     if (xData.length != yData.length) { [EOL]         throw new IllegalArgumentException("Array lengths must be equal."); [EOL]     } [EOL]     double sx = 0.0, sxx = 0.0, sxy = 0.0, sy = 0.0; [EOL]     int counter; [EOL]     for (counter = 0; counter < xData.length; counter++) { [EOL]         sx = sx + xData[counter].doubleValue(); [EOL]         sxx = sxx + Math.pow(xData[counter].doubleValue(), 2); [EOL]         sxy = sxy + yData[counter].doubleValue() * xData[counter].doubleValue(); [EOL]         sy = sy + yData[counter].doubleValue(); [EOL]     } [EOL]     return (sxy - (sx * sy) / counter) / (sxx - (sx * sx) / counter); [EOL] } <line_num>: 366,398
public static double getCorrelation(Number[] data1, Number[] data2) { [EOL]     if (data1 == null) { [EOL]         throw new IllegalArgumentException("Null 'data1' argument."); [EOL]     } [EOL]     if (data2 == null) { [EOL]         throw new IllegalArgumentException("Null 'data2' argument."); [EOL]     } [EOL]     if (data1.length != data2.length) { [EOL]         throw new IllegalArgumentException("'data1' and 'data2' arrays must have same length."); [EOL]     } [EOL]     int n = data1.length; [EOL]     double sumX = 0.0; [EOL]     double sumY = 0.0; [EOL]     double sumX2 = 0.0; [EOL]     double sumY2 = 0.0; [EOL]     double sumXY = 0.0; [EOL]     for (int i = 0; i < n; i++) { [EOL]         double x = 0.0; [EOL]         if (data1[i] != null) { [EOL]             x = data1[i].doubleValue(); [EOL]         } [EOL]         double y = 0.0; [EOL]         if (data2[i] != null) { [EOL]             y = data2[i].doubleValue(); [EOL]         } [EOL]         sumX = sumX + x; [EOL]         sumY = sumY + y; [EOL]         sumXY = sumXY + (x * y); [EOL]         sumX2 = sumX2 + (x * x); [EOL]         sumY2 = sumY2 + (y * y); [EOL]     } [EOL]     return (n * sumXY - sumX * sumY) / Math.pow((n * sumX2 - sumX * sumX) * (n * sumY2 - sumY * sumY), 0.5); [EOL] } <line_num>: 413,448
public static double[][] getMovingAverage(Number[] xData, Number[] yData, int period) { [EOL]     if (xData.length != yData.length) { [EOL]         throw new IllegalArgumentException("Array lengths must be equal."); [EOL]     } [EOL]     if (period > xData.length) { [EOL]         throw new IllegalArgumentException("Period can't be longer than dataset."); [EOL]     } [EOL]     double[][] result = new double[xData.length - period][2]; [EOL]     for (int i = 0; i < result.length; i++) { [EOL]         result[i][0] = xData[i + period].doubleValue(); [EOL]         double sum = 0.0; [EOL]         for (int j = 0; j < period; j++) { [EOL]             sum += yData[i + j].doubleValue(); [EOL]         } [EOL]         sum = sum / period; [EOL]         result[i][1] = sum; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 460,488
