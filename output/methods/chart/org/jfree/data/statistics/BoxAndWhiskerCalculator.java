public static BoxAndWhiskerItem calculateBoxAndWhiskerStatistics(List values) { [EOL]     return calculateBoxAndWhiskerStatistics(values, true); [EOL] } <line_num>: 72,75
public static BoxAndWhiskerItem calculateBoxAndWhiskerStatistics(List values, boolean stripNullAndNaNItems) { [EOL]     if (values == null) { [EOL]         throw new IllegalArgumentException("Null 'values' argument."); [EOL]     } [EOL]     List vlist; [EOL]     if (stripNullAndNaNItems) { [EOL]         vlist = new ArrayList(values.size()); [EOL]         Iterator iterator = values.listIterator(); [EOL]         while (iterator.hasNext()) { [EOL]             Object obj = iterator.next(); [EOL]             if (obj instanceof Number) { [EOL]                 Number n = (Number) obj; [EOL]                 double v = n.doubleValue(); [EOL]                 if (!Double.isNaN(v)) { [EOL]                     vlist.add(n); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } else { [EOL]         vlist = values; [EOL]     } [EOL]     Collections.sort(vlist); [EOL]     double mean = Statistics.calculateMean(vlist, false); [EOL]     double median = Statistics.calculateMedian(vlist, false); [EOL]     double q1 = calculateQ1(vlist); [EOL]     double q3 = calculateQ3(vlist); [EOL]     double interQuartileRange = q3 - q1; [EOL]     double upperOutlierThreshold = q3 + (interQuartileRange * 1.5); [EOL]     double lowerOutlierThreshold = q1 - (interQuartileRange * 1.5); [EOL]     double upperFaroutThreshold = q3 + (interQuartileRange * 2.0); [EOL]     double lowerFaroutThreshold = q1 - (interQuartileRange * 2.0); [EOL]     double minRegularValue = Double.POSITIVE_INFINITY; [EOL]     double maxRegularValue = Double.NEGATIVE_INFINITY; [EOL]     double minOutlier = Double.POSITIVE_INFINITY; [EOL]     double maxOutlier = Double.NEGATIVE_INFINITY; [EOL]     List outliers = new ArrayList(); [EOL]     Iterator iterator = vlist.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         Number number = (Number) iterator.next(); [EOL]         double value = number.doubleValue(); [EOL]         if (value > upperOutlierThreshold) { [EOL]             outliers.add(number); [EOL]             if (value > maxOutlier && value <= upperFaroutThreshold) { [EOL]                 maxOutlier = value; [EOL]             } [EOL]         } else if (value < lowerOutlierThreshold) { [EOL]             outliers.add(number); [EOL]             if (value < minOutlier && value >= lowerFaroutThreshold) { [EOL]                 minOutlier = value; [EOL]             } [EOL]         } else { [EOL]             minRegularValue = Math.min(minRegularValue, value); [EOL]             maxRegularValue = Math.max(maxRegularValue, value); [EOL]         } [EOL]         minOutlier = Math.min(minOutlier, minRegularValue); [EOL]         maxOutlier = Math.max(maxOutlier, maxRegularValue); [EOL]     } [EOL]     return new BoxAndWhiskerItem(new Double(mean), new Double(median), new Double(q1), new Double(q3), new Double(minRegularValue), new Double(maxRegularValue), new Double(minOutlier), new Double(maxOutlier), outliers); [EOL] } <line_num>: 92,167
public static double calculateQ1(List values) { [EOL]     if (values == null) { [EOL]         throw new IllegalArgumentException("Null 'values' argument."); [EOL]     } [EOL]     double result = Double.NaN; [EOL]     int count = values.size(); [EOL]     if (count > 0) { [EOL]         if (count % 2 == 1) { [EOL]             if (count > 1) { [EOL]                 result = Statistics.calculateMedian(values, 0, count / 2); [EOL]             } else { [EOL]                 result = Statistics.calculateMedian(values, 0, 0); [EOL]             } [EOL]         } else { [EOL]             result = Statistics.calculateMedian(values, 0, count / 2 - 1); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 181,203
public static double calculateQ3(List values) { [EOL]     if (values == null) { [EOL]         throw new IllegalArgumentException("Null 'values' argument."); [EOL]     } [EOL]     double result = Double.NaN; [EOL]     int count = values.size(); [EOL]     if (count > 0) { [EOL]         if (count % 2 == 1) { [EOL]             if (count > 1) { [EOL]                 result = Statistics.calculateMedian(values, count / 2, count - 1); [EOL]             } else { [EOL]                 result = Statistics.calculateMedian(values, 0, 0); [EOL]             } [EOL]         } else { [EOL]             result = Statistics.calculateMedian(values, count / 2, count - 1); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 216,238
