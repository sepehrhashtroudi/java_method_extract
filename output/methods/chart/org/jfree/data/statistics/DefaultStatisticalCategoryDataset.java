public DefaultStatisticalCategoryDataset() { [EOL]     this.data = new KeyedObjects2D(); [EOL]     this.minimumRangeValue = Double.NaN; [EOL]     this.minimumRangeValueRow = -1; [EOL]     this.minimumRangeValueColumn = -1; [EOL]     this.maximumRangeValue = Double.NaN; [EOL]     this.maximumRangeValueRow = -1; [EOL]     this.maximumRangeValueColumn = -1; [EOL]     this.minimumRangeValueIncStdDev = Double.NaN; [EOL]     this.minimumRangeValueIncStdDevRow = -1; [EOL]     this.minimumRangeValueIncStdDevColumn = -1; [EOL]     this.maximumRangeValueIncStdDev = Double.NaN; [EOL]     this.maximumRangeValueIncStdDevRow = -1; [EOL]     this.maximumRangeValueIncStdDevColumn = -1; [EOL] } <line_num>: 128,142
public Number getMeanValue(int row, int column) { [EOL]     Number result = null; [EOL]     MeanAndStandardDeviation masd = (MeanAndStandardDeviation) this.data.getObject(row, column); [EOL]     if (masd != null) { [EOL]         result = masd.getMean(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 152,160
public Number getValue(int row, int column) { [EOL]     return getMeanValue(row, column); [EOL] } <line_num>: 171,173
public Number getValue(Comparable rowKey, Comparable columnKey) { [EOL]     return getMeanValue(rowKey, columnKey); [EOL] } <line_num>: 184,186
public Number getMeanValue(Comparable rowKey, Comparable columnKey) { [EOL]     Number result = null; [EOL]     MeanAndStandardDeviation masd = (MeanAndStandardDeviation) this.data.getObject(rowKey, columnKey); [EOL]     if (masd != null) { [EOL]         result = masd.getMean(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 196,204
public Number getStdDevValue(int row, int column) { [EOL]     Number result = null; [EOL]     MeanAndStandardDeviation masd = (MeanAndStandardDeviation) this.data.getObject(row, column); [EOL]     if (masd != null) { [EOL]         result = masd.getStandardDeviation(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 214,222
public Number getStdDevValue(Comparable rowKey, Comparable columnKey) { [EOL]     Number result = null; [EOL]     MeanAndStandardDeviation masd = (MeanAndStandardDeviation) this.data.getObject(rowKey, columnKey); [EOL]     if (masd != null) { [EOL]         result = masd.getStandardDeviation(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 232,240
public int getColumnIndex(Comparable key) { [EOL]     return this.data.getColumnIndex(key); [EOL] } <line_num>: 249,252
public Comparable getColumnKey(int column) { [EOL]     return this.data.getColumnKey(column); [EOL] } <line_num>: 261,263
public List getColumnKeys() { [EOL]     return this.data.getColumnKeys(); [EOL] } <line_num>: 270,272
public int getRowIndex(Comparable key) { [EOL]     return this.data.getRowIndex(key); [EOL] } <line_num>: 281,284
public Comparable getRowKey(int row) { [EOL]     return this.data.getRowKey(row); [EOL] } <line_num>: 293,295
public List getRowKeys() { [EOL]     return this.data.getRowKeys(); [EOL] } <line_num>: 302,304
public int getRowCount() { [EOL]     return this.data.getRowCount(); [EOL] } <line_num>: 313,315
public int getColumnCount() { [EOL]     return this.data.getColumnCount(); [EOL] } <line_num>: 324,326
public void add(double mean, double standardDeviation, Comparable rowKey, Comparable columnKey) { [EOL]     add(new Double(mean), new Double(standardDeviation), rowKey, columnKey); [EOL] } <line_num>: 336,339
public void add(Number mean, Number standardDeviation, Comparable rowKey, Comparable columnKey) { [EOL]     MeanAndStandardDeviation item = new MeanAndStandardDeviation(mean, standardDeviation); [EOL]     this.data.addObject(item, rowKey, columnKey); [EOL]     double m = Double.NaN; [EOL]     double sd = Double.NaN; [EOL]     if (mean != null) { [EOL]         m = mean.doubleValue(); [EOL]     } [EOL]     if (standardDeviation != null) { [EOL]         sd = standardDeviation.doubleValue(); [EOL]     } [EOL]     int r = this.data.getColumnIndex(columnKey); [EOL]     int c = this.data.getRowIndex(rowKey); [EOL]     if ((r == this.maximumRangeValueRow && c == this.maximumRangeValueColumn) || (r == this.maximumRangeValueIncStdDevRow && c == this.maximumRangeValueIncStdDevColumn) || (r == this.minimumRangeValueRow && c == this.minimumRangeValueColumn) || (r == this.minimumRangeValueIncStdDevRow && c == this.minimumRangeValueIncStdDevColumn)) { [EOL]         updateBounds(); [EOL]     } else { [EOL]         if (!Double.isNaN(m)) { [EOL]             if (Double.isNaN(this.maximumRangeValue) || m > this.maximumRangeValue) { [EOL]                 this.maximumRangeValue = m; [EOL]                 this.maximumRangeValueRow = r; [EOL]                 this.maximumRangeValueColumn = c; [EOL]             } [EOL]         } [EOL]         if (!Double.isNaN(m + sd)) { [EOL]             if (Double.isNaN(this.maximumRangeValueIncStdDev) || (m + sd) > this.maximumRangeValueIncStdDev) { [EOL]                 this.maximumRangeValueIncStdDev = m + sd; [EOL]                 this.maximumRangeValueIncStdDevRow = r; [EOL]                 this.maximumRangeValueIncStdDevColumn = c; [EOL]             } [EOL]         } [EOL]         if (!Double.isNaN(m)) { [EOL]             if (Double.isNaN(this.minimumRangeValue) || m < this.minimumRangeValue) { [EOL]                 this.minimumRangeValue = m; [EOL]                 this.minimumRangeValueRow = r; [EOL]                 this.minimumRangeValueColumn = c; [EOL]             } [EOL]         } [EOL]         if (!Double.isNaN(m - sd)) { [EOL]             if (Double.isNaN(this.minimumRangeValueIncStdDev) || (m - sd) < this.minimumRangeValueIncStdDev) { [EOL]                 this.minimumRangeValueIncStdDev = m - sd; [EOL]                 this.minimumRangeValueIncStdDevRow = r; [EOL]                 this.minimumRangeValueIncStdDevColumn = c; [EOL]             } [EOL]         } [EOL]     } [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 349,418
public void remove(Comparable rowKey, Comparable columnKey) { [EOL]     int r = getRowIndex(rowKey); [EOL]     int c = getColumnIndex(columnKey); [EOL]     this.data.removeObject(rowKey, columnKey); [EOL]     if ((r == this.maximumRangeValueRow && c == this.maximumRangeValueColumn) || (r == this.maximumRangeValueIncStdDevRow && c == this.maximumRangeValueIncStdDevColumn) || (r == this.minimumRangeValueRow && c == this.minimumRangeValueColumn) || (r == this.minimumRangeValueIncStdDevRow && c == this.minimumRangeValueIncStdDevColumn)) { [EOL]         updateBounds(); [EOL]     } [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 431,454
public void removeRow(int rowIndex) { [EOL]     this.data.removeRow(rowIndex); [EOL]     updateBounds(); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 467,472
public void removeRow(Comparable rowKey) { [EOL]     this.data.removeRow(rowKey); [EOL]     updateBounds(); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 484,489
public void removeColumn(int columnIndex) { [EOL]     this.data.removeColumn(columnIndex); [EOL]     updateBounds(); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 501,506
public void removeColumn(Comparable columnKey) { [EOL]     this.data.removeColumn(columnKey); [EOL]     updateBounds(); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 518,523
public void clear() { [EOL]     this.data.clear(); [EOL]     updateBounds(); [EOL]     fireDatasetChanged(new DatasetChangeInfo()); [EOL] } <line_num>: 531,536
private void updateBounds() { [EOL]     this.maximumRangeValue = Double.NaN; [EOL]     this.maximumRangeValueRow = -1; [EOL]     this.maximumRangeValueColumn = -1; [EOL]     this.minimumRangeValue = Double.NaN; [EOL]     this.minimumRangeValueRow = -1; [EOL]     this.minimumRangeValueColumn = -1; [EOL]     this.maximumRangeValueIncStdDev = Double.NaN; [EOL]     this.maximumRangeValueIncStdDevRow = -1; [EOL]     this.maximumRangeValueIncStdDevColumn = -1; [EOL]     this.minimumRangeValueIncStdDev = Double.NaN; [EOL]     this.minimumRangeValueIncStdDevRow = -1; [EOL]     this.minimumRangeValueIncStdDevColumn = -1; [EOL]     int rowCount = this.data.getRowCount(); [EOL]     int columnCount = this.data.getColumnCount(); [EOL]     for (int r = 0; r < rowCount; r++) { [EOL]         for (int c = 0; c < columnCount; c++) { [EOL]             double m = Double.NaN; [EOL]             double sd = Double.NaN; [EOL]             MeanAndStandardDeviation masd = (MeanAndStandardDeviation) this.data.getObject(r, c); [EOL]             if (masd == null) { [EOL]                 continue; [EOL]             } [EOL]             m = masd.getMeanValue(); [EOL]             sd = masd.getStandardDeviationValue(); [EOL]             if (!Double.isNaN(m)) { [EOL]                 if (Double.isNaN(this.maximumRangeValue)) { [EOL]                     this.maximumRangeValue = m; [EOL]                     this.maximumRangeValueRow = r; [EOL]                     this.maximumRangeValueColumn = c; [EOL]                 } else { [EOL]                     if (m > this.maximumRangeValue) { [EOL]                         this.maximumRangeValue = m; [EOL]                         this.maximumRangeValueRow = r; [EOL]                         this.maximumRangeValueColumn = c; [EOL]                     } [EOL]                 } [EOL]                 if (Double.isNaN(this.minimumRangeValue)) { [EOL]                     this.minimumRangeValue = m; [EOL]                     this.minimumRangeValueRow = r; [EOL]                     this.minimumRangeValueColumn = c; [EOL]                 } else { [EOL]                     if (m < this.minimumRangeValue) { [EOL]                         this.minimumRangeValue = m; [EOL]                         this.minimumRangeValueRow = r; [EOL]                         this.minimumRangeValueColumn = c; [EOL]                     } [EOL]                 } [EOL]                 if (!Double.isNaN(sd)) { [EOL]                     if (Double.isNaN(this.maximumRangeValueIncStdDev)) { [EOL]                         this.maximumRangeValueIncStdDev = m + sd; [EOL]                         this.maximumRangeValueIncStdDevRow = r; [EOL]                         this.maximumRangeValueIncStdDevColumn = c; [EOL]                     } else { [EOL]                         if (m + sd > this.maximumRangeValueIncStdDev) { [EOL]                             this.maximumRangeValueIncStdDev = m + sd; [EOL]                             this.maximumRangeValueIncStdDevRow = r; [EOL]                             this.maximumRangeValueIncStdDevColumn = c; [EOL]                         } [EOL]                     } [EOL]                     if (Double.isNaN(this.minimumRangeValueIncStdDev)) { [EOL]                         this.minimumRangeValueIncStdDev = m - sd; [EOL]                         this.minimumRangeValueIncStdDevRow = r; [EOL]                         this.minimumRangeValueIncStdDevColumn = c; [EOL]                     } else { [EOL]                         if (m - sd < this.minimumRangeValueIncStdDev) { [EOL]                             this.minimumRangeValueIncStdDev = m - sd; [EOL]                             this.minimumRangeValueIncStdDevRow = r; [EOL]                             this.minimumRangeValueIncStdDevColumn = c; [EOL]                         } [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 541,631
public double getRangeLowerBound(boolean includeInterval) { [EOL]     if (includeInterval) { [EOL]         return this.minimumRangeValueIncStdDev; [EOL]     } else { [EOL]         return this.minimumRangeValue; [EOL]     } [EOL] } <line_num>: 643,650
public double getRangeUpperBound(boolean includeInterval) { [EOL]     if (includeInterval) { [EOL]         return this.maximumRangeValueIncStdDev; [EOL]     } else { [EOL]         return this.maximumRangeValue; [EOL]     } [EOL] } <line_num>: 662,669
public Range getRangeBounds(boolean includeInterval) { [EOL]     Range result = null; [EOL]     if (includeInterval) { [EOL]         if (!Double.isNaN(this.minimumRangeValueIncStdDev) && !Double.isNaN(this.maximumRangeValueIncStdDev)) { [EOL]             result = new Range(this.minimumRangeValueIncStdDev, this.maximumRangeValueIncStdDev); [EOL]         } [EOL]     } else { [EOL]         if (!Double.isNaN(this.minimumRangeValue) && !Double.isNaN(this.maximumRangeValue)) { [EOL]             result = new Range(this.minimumRangeValue, this.maximumRangeValue); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 679,696
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof DefaultStatisticalCategoryDataset)) { [EOL]         return false; [EOL]     } [EOL]     DefaultStatisticalCategoryDataset that = (DefaultStatisticalCategoryDataset) obj; [EOL]     if (!this.data.equals(that.data)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 705,718
public Object clone() throws CloneNotSupportedException { [EOL]     DefaultStatisticalCategoryDataset clone = (DefaultStatisticalCategoryDataset) super.clone(); [EOL]     clone.data = (KeyedObjects2D) this.data.clone(); [EOL]     return clone; [EOL] } <line_num>: 727,732
