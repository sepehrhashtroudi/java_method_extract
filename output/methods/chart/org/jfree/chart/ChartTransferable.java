public ChartTransferable(JFreeChart chart, int width, int height) { [EOL]     this(chart, width, height, true); [EOL] } <line_num>: 113,115
public ChartTransferable(JFreeChart chart, int width, int height, boolean cloneData) { [EOL]     this(chart, width, height, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, true); [EOL] } <line_num>: 125,129
public ChartTransferable(JFreeChart chart, int width, int height, int minDrawW, int minDrawH, int maxDrawW, int maxDrawH, boolean cloneData) { [EOL]     try { [EOL]         this.chart = (JFreeChart) chart.clone(); [EOL]     } catch (CloneNotSupportedException e) { [EOL]         this.chart = chart; [EOL]     } [EOL]     this.width = width; [EOL]     this.height = height; [EOL]     this.minDrawWidth = minDrawW; [EOL]     this.minDrawHeight = minDrawH; [EOL]     this.maxDrawWidth = maxDrawW; [EOL]     this.maxDrawHeight = maxDrawH; [EOL] } <line_num>: 147,168
public DataFlavor[] getTransferDataFlavors() { [EOL]     return new DataFlavor[] { this.imageFlavor }; [EOL] } <line_num>: 175,177
public boolean isDataFlavorSupported(DataFlavor flavor) { [EOL]     return this.imageFlavor.equals(flavor); [EOL] } <line_num>: 186,188
public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException { [EOL]     if (this.imageFlavor.equals(flavor)) { [EOL]         return createBufferedImage(this.chart, this.width, this.height, this.minDrawWidth, this.minDrawHeight, this.maxDrawWidth, this.maxDrawHeight); [EOL]     } else { [EOL]         throw new UnsupportedFlavorException(flavor); [EOL]     } [EOL] } <line_num>: 200,211
private BufferedImage createBufferedImage(JFreeChart chart, int w, int h, int minDrawW, int minDrawH, int maxDrawW, int maxDrawH) { [EOL]     BufferedImage image = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB); [EOL]     Graphics2D g2 = image.createGraphics(); [EOL]     boolean scale = false; [EOL]     double drawWidth = w; [EOL]     double drawHeight = h; [EOL]     double scaleX = 1.0; [EOL]     double scaleY = 1.0; [EOL]     if (drawWidth < minDrawW) { [EOL]         scaleX = drawWidth / minDrawW; [EOL]         drawWidth = minDrawW; [EOL]         scale = true; [EOL]     } else if (drawWidth > maxDrawW) { [EOL]         scaleX = drawWidth / maxDrawW; [EOL]         drawWidth = maxDrawW; [EOL]         scale = true; [EOL]     } [EOL]     if (drawHeight < minDrawH) { [EOL]         scaleY = drawHeight / minDrawH; [EOL]         drawHeight = minDrawH; [EOL]         scale = true; [EOL]     } else if (drawHeight > maxDrawH) { [EOL]         scaleY = drawHeight / maxDrawH; [EOL]         drawHeight = maxDrawH; [EOL]         scale = true; [EOL]     } [EOL]     Rectangle2D chartArea = new Rectangle2D.Double(0.0, 0.0, drawWidth, drawHeight); [EOL]     if (scale) { [EOL]         AffineTransform st = AffineTransform.getScaleInstance(scaleX, scaleY); [EOL]         g2.transform(st); [EOL]     } [EOL]     chart.draw(g2, chartArea, null, null); [EOL]     g2.dispose(); [EOL]     return image; [EOL] } <line_num>: 228,273
