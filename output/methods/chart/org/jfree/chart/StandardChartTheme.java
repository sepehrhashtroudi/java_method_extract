public StandardChartTheme(String name) { [EOL]     if (name == null) { [EOL]         throw new IllegalArgumentException("Null 'name' argument."); [EOL]     } [EOL]     this.name = name; [EOL]     this.extraLargeFont = new Font("Tahoma", Font.BOLD, 20); [EOL]     this.largeFont = new Font("Tahoma", Font.BOLD, 14); [EOL]     this.regularFont = new Font("Tahoma", Font.PLAIN, 12); [EOL]     this.smallFont = new Font("Tahoma", Font.PLAIN, 10); [EOL]     this.titlePaint = Color.black; [EOL]     this.subtitlePaint = Color.black; [EOL]     this.legendBackgroundPaint = Color.white; [EOL]     this.legendItemPaint = Color.darkGray; [EOL]     this.chartBackgroundPaint = Color.white; [EOL]     this.drawingSupplier = new DefaultDrawingSupplier(); [EOL]     this.plotBackgroundPaint = Color.lightGray; [EOL]     this.plotOutlinePaint = Color.black; [EOL]     this.labelLinkPaint = Color.black; [EOL]     this.labelLinkStyle = PieLabelLinkStyle.CUBIC_CURVE; [EOL]     this.axisOffset = new RectangleInsets(4, 4, 4, 4); [EOL]     this.domainGridlinePaint = Color.white; [EOL]     this.rangeGridlinePaint = Color.white; [EOL]     this.baselinePaint = Color.black; [EOL]     this.crosshairPaint = Color.blue; [EOL]     this.axisLabelPaint = Color.darkGray; [EOL]     this.tickLabelPaint = Color.darkGray; [EOL]     this.barPainter = new GradientBarPainter(); [EOL]     this.xyBarPainter = new GradientXYBarPainter(); [EOL]     this.shadowVisible = true; [EOL]     this.shadowPaint = Color.gray; [EOL]     this.itemLabelPaint = Color.black; [EOL]     this.thermometerPaint = Color.white; [EOL]     this.wallPaint = BarRenderer3D.DEFAULT_WALL_PAINT; [EOL]     this.errorIndicatorPaint = Color.black; [EOL] } <line_num>: 303,337
public static ChartTheme createJFreeTheme() { [EOL]     return new StandardChartTheme("JFree"); [EOL] } <line_num>: 238,240
public static ChartTheme createDarknessTheme() { [EOL]     StandardChartTheme theme = new StandardChartTheme("Darkness"); [EOL]     theme.titlePaint = Color.white; [EOL]     theme.subtitlePaint = Color.white; [EOL]     theme.legendBackgroundPaint = Color.black; [EOL]     theme.legendItemPaint = Color.white; [EOL]     theme.chartBackgroundPaint = Color.black; [EOL]     theme.plotBackgroundPaint = Color.black; [EOL]     theme.plotOutlinePaint = Color.yellow; [EOL]     theme.baselinePaint = Color.white; [EOL]     theme.crosshairPaint = Color.red; [EOL]     theme.labelLinkPaint = Color.lightGray; [EOL]     theme.tickLabelPaint = Color.white; [EOL]     theme.axisLabelPaint = Color.white; [EOL]     theme.shadowPaint = Color.darkGray; [EOL]     theme.itemLabelPaint = Color.white; [EOL]     theme.drawingSupplier = new DefaultDrawingSupplier(new Paint[] { Color.decode("0xFFFF00"), Color.decode("0x0036CC"), Color.decode("0xFF0000"), Color.decode("0xFFFF7F"), Color.decode("0x6681CC"), Color.decode("0xFF7F7F"), Color.decode("0xFFFFBF"), Color.decode("0x99A6CC"), Color.decode("0xFFBFBF"), Color.decode("0xA9A938"), Color.decode("0x2D4587") }, new Paint[] { Color.decode("0xFFFF00"), Color.decode("0x0036CC") }, new Stroke[] { new BasicStroke(2.0f) }, new Stroke[] { new BasicStroke(0.5f) }, DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE); [EOL]     theme.wallPaint = Color.darkGray; [EOL]     theme.errorIndicatorPaint = Color.lightGray; [EOL]     theme.gridBandPaint = new Color(255, 255, 255, 20); [EOL]     theme.gridBandAlternatePaint = new Color(255, 255, 255, 40); [EOL]     return theme; [EOL] } <line_num>: 248,281
public void apply(JFreeChart chart) { [EOL] } <line_num>: 291,293
public static ChartTheme createLegacyTheme() { [EOL]     StandardChartTheme theme = new StandardChartTheme("Legacy") { [EOL]  [EOL]         public void apply(JFreeChart chart) { [EOL]         } [EOL]     }; [EOL]     return theme; [EOL] } <line_num>: 289,296
public Font getExtraLargeFont() { [EOL]     return this.extraLargeFont; [EOL] } <line_num>: 346,348
public void setExtraLargeFont(Font font) { [EOL]     if (font == null) { [EOL]         throw new IllegalArgumentException("Null 'font' argument."); [EOL]     } [EOL]     this.extraLargeFont = font; [EOL] } <line_num>: 357,362
public Font getLargeFont() { [EOL]     return this.largeFont; [EOL] } <line_num>: 371,373
public void setLargeFont(Font font) { [EOL]     if (font == null) { [EOL]         throw new IllegalArgumentException("Null 'font' argument."); [EOL]     } [EOL]     this.largeFont = font; [EOL] } <line_num>: 382,387
public Font getRegularFont() { [EOL]     return this.regularFont; [EOL] } <line_num>: 396,398
public void setRegularFont(Font font) { [EOL]     if (font == null) { [EOL]         throw new IllegalArgumentException("Null 'font' argument."); [EOL]     } [EOL]     this.regularFont = font; [EOL] } <line_num>: 407,412
public Font getSmallFont() { [EOL]     return this.smallFont; [EOL] } <line_num>: 423,425
public void setSmallFont(Font font) { [EOL]     if (font == null) { [EOL]         throw new IllegalArgumentException("Null 'font' argument."); [EOL]     } [EOL]     this.smallFont = font; [EOL] } <line_num>: 436,441
public Paint getTitlePaint() { [EOL]     return this.titlePaint; [EOL] } <line_num>: 450,452
public void setTitlePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.titlePaint = paint; [EOL] } <line_num>: 461,466
public Paint getSubtitlePaint() { [EOL]     return this.subtitlePaint; [EOL] } <line_num>: 475,477
public void setSubtitlePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.subtitlePaint = paint; [EOL] } <line_num>: 486,491
public Paint getChartBackgroundPaint() { [EOL]     return this.chartBackgroundPaint; [EOL] } <line_num>: 500,502
public void setChartBackgroundPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.chartBackgroundPaint = paint; [EOL] } <line_num>: 511,516
public Paint getLegendBackgroundPaint() { [EOL]     return this.legendBackgroundPaint; [EOL] } <line_num>: 525,527
public void setLegendBackgroundPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.legendBackgroundPaint = paint; [EOL] } <line_num>: 536,541
public Paint getLegendItemPaint() { [EOL]     return this.legendItemPaint; [EOL] } <line_num>: 550,552
public void setLegendItemPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.legendItemPaint = paint; [EOL] } <line_num>: 561,566
public Paint getPlotBackgroundPaint() { [EOL]     return this.plotBackgroundPaint; [EOL] } <line_num>: 575,577
public void setPlotBackgroundPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.plotBackgroundPaint = paint; [EOL] } <line_num>: 586,591
public Paint getPlotOutlinePaint() { [EOL]     return this.plotOutlinePaint; [EOL] } <line_num>: 600,602
public void setPlotOutlinePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.plotOutlinePaint = paint; [EOL] } <line_num>: 611,616
public PieLabelLinkStyle getLabelLinkStyle() { [EOL]     return this.labelLinkStyle; [EOL] } <line_num>: 625,627
public void setLabelLinkStyle(PieLabelLinkStyle style) { [EOL]     if (style == null) { [EOL]         throw new IllegalArgumentException("Null 'style' argument."); [EOL]     } [EOL]     this.labelLinkStyle = style; [EOL] } <line_num>: 636,641
public Paint getLabelLinkPaint() { [EOL]     return this.labelLinkPaint; [EOL] } <line_num>: 650,652
public void setLabelLinkPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.labelLinkPaint = paint; [EOL] } <line_num>: 661,666
public Paint getDomainGridlinePaint() { [EOL]     return this.domainGridlinePaint; [EOL] } <line_num>: 675,677
public void setDomainGridlinePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.domainGridlinePaint = paint; [EOL] } <line_num>: 686,691
public Paint getRangeGridlinePaint() { [EOL]     return this.rangeGridlinePaint; [EOL] } <line_num>: 700,702
public void setRangeGridlinePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.rangeGridlinePaint = paint; [EOL] } <line_num>: 711,716
public Paint getBaselinePaint() { [EOL]     return this.baselinePaint; [EOL] } <line_num>: 725,727
public void setBaselinePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.baselinePaint = paint; [EOL] } <line_num>: 736,741
public Paint getCrosshairPaint() { [EOL]     return this.crosshairPaint; [EOL] } <line_num>: 748,750
public void setCrosshairPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.crosshairPaint = paint; [EOL] } <line_num>: 757,762
public RectangleInsets getAxisOffset() { [EOL]     return this.axisOffset; [EOL] } <line_num>: 771,773
public void setAxisOffset(RectangleInsets offset) { [EOL]     if (offset == null) { [EOL]         throw new IllegalArgumentException("Null 'offset' argument."); [EOL]     } [EOL]     this.axisOffset = offset; [EOL] } <line_num>: 782,787
public Paint getAxisLabelPaint() { [EOL]     return this.axisLabelPaint; [EOL] } <line_num>: 796,798
public void setAxisLabelPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.axisLabelPaint = paint; [EOL] } <line_num>: 807,812
public Paint getTickLabelPaint() { [EOL]     return this.tickLabelPaint; [EOL] } <line_num>: 821,823
public void setTickLabelPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.tickLabelPaint = paint; [EOL] } <line_num>: 832,837
public Paint getItemLabelPaint() { [EOL]     return this.itemLabelPaint; [EOL] } <line_num>: 846,848
public void setItemLabelPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.itemLabelPaint = paint; [EOL] } <line_num>: 857,862
public boolean isShadowVisible() { [EOL]     return this.shadowVisible; [EOL] } <line_num>: 871,873
public void setShadowVisible(boolean visible) { [EOL]     this.shadowVisible = visible; [EOL] } <line_num>: 882,884
public Paint getShadowPaint() { [EOL]     return this.shadowPaint; [EOL] } <line_num>: 893,895
public void setShadowPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.shadowPaint = paint; [EOL] } <line_num>: 904,909
public BarPainter getBarPainter() { [EOL]     return this.barPainter; [EOL] } <line_num>: 918,920
public void setBarPainter(BarPainter painter) { [EOL]     if (painter == null) { [EOL]         throw new IllegalArgumentException("Null 'painter' argument."); [EOL]     } [EOL]     this.barPainter = painter; [EOL] } <line_num>: 929,934
public XYBarPainter getXYBarPainter() { [EOL]     return this.xyBarPainter; [EOL] } <line_num>: 943,945
public void setXYBarPainter(XYBarPainter painter) { [EOL]     if (painter == null) { [EOL]         throw new IllegalArgumentException("Null 'painter' argument."); [EOL]     } [EOL]     this.xyBarPainter = painter; [EOL] } <line_num>: 954,959
public Paint getThermometerPaint() { [EOL]     return this.thermometerPaint; [EOL] } <line_num>: 968,970
public void setThermometerPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.thermometerPaint = paint; [EOL] } <line_num>: 979,984
public Paint getWallPaint() { [EOL]     return this.wallPaint; [EOL] } <line_num>: 993,995
public void setWallPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.wallPaint = paint; [EOL] } <line_num>: 1004,1009
public Paint getErrorIndicatorPaint() { [EOL]     return this.errorIndicatorPaint; [EOL] } <line_num>: 1018,1020
public void setErrorIndicatorPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.errorIndicatorPaint = paint; [EOL] } <line_num>: 1029,1034
public Paint getGridBandPaint() { [EOL]     return this.gridBandPaint; [EOL] } <line_num>: 1043,1045
public void setGridBandPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.gridBandPaint = paint; [EOL] } <line_num>: 1054,1059
public Paint getGridBandAlternatePaint() { [EOL]     return this.gridBandAlternatePaint; [EOL] } <line_num>: 1068,1070
public void setGridBandAlternatePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.gridBandAlternatePaint = paint; [EOL] } <line_num>: 1079,1084
public String getName() { [EOL]     return this.name; [EOL] } <line_num>: 1091,1093
public DrawingSupplier getDrawingSupplier() { [EOL]     DrawingSupplier result = null; [EOL]     if (this.drawingSupplier instanceof PublicCloneable) { [EOL]         PublicCloneable pc = (PublicCloneable) this.drawingSupplier; [EOL]         try { [EOL]             result = (DrawingSupplier) pc.clone(); [EOL]         } catch (CloneNotSupportedException e) { [EOL]             e.printStackTrace(); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1100,1112
public void setDrawingSupplier(DrawingSupplier supplier) { [EOL]     if (supplier == null) { [EOL]         throw new IllegalArgumentException("Null 'supplier' argument."); [EOL]     } [EOL]     this.drawingSupplier = supplier; [EOL] } <line_num>: 1121,1126
public void apply(JFreeChart chart) { [EOL]     if (chart == null) { [EOL]         throw new IllegalArgumentException("Null 'chart' argument."); [EOL]     } [EOL]     TextTitle title = chart.getTitle(); [EOL]     if (title != null) { [EOL]         title.setFont(this.extraLargeFont); [EOL]         title.setPaint(this.titlePaint); [EOL]     } [EOL]     int subtitleCount = chart.getSubtitleCount(); [EOL]     for (int i = 0; i < subtitleCount; i++) { [EOL]         applyToTitle(chart.getSubtitle(i)); [EOL]     } [EOL]     chart.setBackgroundPaint(this.chartBackgroundPaint); [EOL]     Plot plot = chart.getPlot(); [EOL]     if (plot != null) { [EOL]         applyToPlot(plot); [EOL]     } [EOL] } <line_num>: 1133,1155
protected void applyToTitle(Title title) { [EOL]     if (title instanceof TextTitle) { [EOL]         TextTitle tt = (TextTitle) title; [EOL]         tt.setFont(this.largeFont); [EOL]         tt.setPaint(this.subtitlePaint); [EOL]     } else if (title instanceof LegendTitle) { [EOL]         LegendTitle lt = (LegendTitle) title; [EOL]         if (lt.getBackgroundPaint() != null) { [EOL]             lt.setBackgroundPaint(this.legendBackgroundPaint); [EOL]         } [EOL]         lt.setItemFont(this.regularFont); [EOL]         lt.setItemPaint(this.legendItemPaint); [EOL]         if (lt.getWrapper() != null) { [EOL]             applyToBlockContainer(lt.getWrapper()); [EOL]         } [EOL]     } else if (title instanceof PaintScaleLegend) { [EOL]         PaintScaleLegend psl = (PaintScaleLegend) title; [EOL]         psl.setBackgroundPaint(this.legendBackgroundPaint); [EOL]         ValueAxis axis = psl.getAxis(); [EOL]         if (axis != null) { [EOL]             applyToValueAxis(axis); [EOL]         } [EOL]     } else if (title instanceof CompositeTitle) { [EOL]         CompositeTitle ct = (CompositeTitle) title; [EOL]         BlockContainer bc = ct.getContainer(); [EOL]         List blocks = bc.getBlocks(); [EOL]         Iterator iterator = blocks.iterator(); [EOL]         while (iterator.hasNext()) { [EOL]             Block b = (Block) iterator.next(); [EOL]             if (b instanceof Title) { [EOL]                 applyToTitle((Title) b); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 1162,1199
protected void applyToBlockContainer(BlockContainer bc) { [EOL]     Iterator iterator = bc.getBlocks().iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         Block b = (Block) iterator.next(); [EOL]         applyToBlock(b); [EOL]     } [EOL] } <line_num>: 1206,1212
protected void applyToBlock(Block b) { [EOL]     if (b instanceof Title) { [EOL]         applyToTitle((Title) b); [EOL]     } else if (b instanceof LabelBlock) { [EOL]         LabelBlock lb = (LabelBlock) b; [EOL]         lb.setFont(this.regularFont); [EOL]         lb.setPaint(this.legendItemPaint); [EOL]     } [EOL] } <line_num>: 1219,1228
protected void applyToPlot(Plot plot) { [EOL]     if (plot == null) { [EOL]         throw new IllegalArgumentException("Null 'plot' argument."); [EOL]     } [EOL]     if (plot.getDrawingSupplier() != null) { [EOL]         plot.setDrawingSupplier(getDrawingSupplier()); [EOL]     } [EOL]     if (plot.getBackgroundPaint() != null) { [EOL]         plot.setBackgroundPaint(this.plotBackgroundPaint); [EOL]     } [EOL]     plot.setOutlinePaint(this.plotOutlinePaint); [EOL]     if (plot instanceof PiePlot) { [EOL]         applyToPiePlot((PiePlot) plot); [EOL]     } else if (plot instanceof MultiplePiePlot) { [EOL]         applyToMultiplePiePlot((MultiplePiePlot) plot); [EOL]     } else if (plot instanceof CategoryPlot) { [EOL]         applyToCategoryPlot((CategoryPlot) plot); [EOL]     } else if (plot instanceof XYPlot) { [EOL]         applyToXYPlot((XYPlot) plot); [EOL]     } else if (plot instanceof FastScatterPlot) { [EOL]         applyToFastScatterPlot((FastScatterPlot) plot); [EOL]     } else if (plot instanceof MeterPlot) { [EOL]         applyToMeterPlot((MeterPlot) plot); [EOL]     } else if (plot instanceof ThermometerPlot) { [EOL]         applyToThermometerPlot((ThermometerPlot) plot); [EOL]     } else if (plot instanceof SpiderWebPlot) { [EOL]         applyToSpiderWebPlot((SpiderWebPlot) plot); [EOL]     } else if (plot instanceof PolarPlot) { [EOL]         applyToPolarPlot((PolarPlot) plot); [EOL]     } [EOL] } <line_num>: 1235,1278
protected void applyToPiePlot(PiePlot plot) { [EOL]     plot.setLabelLinkPaint(this.labelLinkPaint); [EOL]     plot.setLabelLinkStyle(this.labelLinkStyle); [EOL]     plot.setLabelFont(this.regularFont); [EOL]     if (plot.getAutoPopulateSectionPaint()) { [EOL]         plot.clearSectionPaints(false); [EOL]     } [EOL]     if (plot.getAutoPopulateSectionOutlinePaint()) { [EOL]         plot.clearSectionOutlinePaints(false); [EOL]     } [EOL]     if (plot.getAutoPopulateSectionOutlineStroke()) { [EOL]         plot.clearSectionOutlineStrokes(false); [EOL]     } [EOL] } <line_num>: 1287,1303
protected void applyToMultiplePiePlot(MultiplePiePlot plot) { [EOL]     apply(plot.getPieChart()); [EOL] } <line_num>: 1310,1312
protected void applyToCategoryPlot(CategoryPlot plot) { [EOL]     plot.setAxisOffset(this.axisOffset); [EOL]     plot.setDomainGridlinePaint(this.domainGridlinePaint); [EOL]     plot.setRangeGridlinePaint(this.rangeGridlinePaint); [EOL]     plot.setRangeZeroBaselinePaint(this.baselinePaint); [EOL]     int domainAxisCount = plot.getDomainAxisCount(); [EOL]     for (int i = 0; i < domainAxisCount; i++) { [EOL]         CategoryAxis axis = plot.getDomainAxis(i); [EOL]         if (axis != null) { [EOL]             applyToCategoryAxis(axis); [EOL]         } [EOL]     } [EOL]     int rangeAxisCount = plot.getRangeAxisCount(); [EOL]     for (int i = 0; i < rangeAxisCount; i++) { [EOL]         ValueAxis axis = (ValueAxis) plot.getRangeAxis(i); [EOL]         if (axis != null) { [EOL]             applyToValueAxis(axis); [EOL]         } [EOL]     } [EOL]     int rendererCount = plot.getRendererCount(); [EOL]     for (int i = 0; i < rendererCount; i++) { [EOL]         CategoryItemRenderer r = plot.getRenderer(i); [EOL]         if (r != null) { [EOL]             applyToCategoryItemRenderer(r); [EOL]         } [EOL]     } [EOL]     if (plot instanceof CombinedDomainCategoryPlot) { [EOL]         CombinedDomainCategoryPlot cp = (CombinedDomainCategoryPlot) plot; [EOL]         Iterator iterator = cp.getSubplots().iterator(); [EOL]         while (iterator.hasNext()) { [EOL]             CategoryPlot subplot = (CategoryPlot) iterator.next(); [EOL]             if (subplot != null) { [EOL]                 applyToPlot(subplot); [EOL]             } [EOL]         } [EOL]     } [EOL]     if (plot instanceof CombinedRangeCategoryPlot) { [EOL]         CombinedRangeCategoryPlot cp = (CombinedRangeCategoryPlot) plot; [EOL]         Iterator iterator = cp.getSubplots().iterator(); [EOL]         while (iterator.hasNext()) { [EOL]             CategoryPlot subplot = (CategoryPlot) iterator.next(); [EOL]             if (subplot != null) { [EOL]                 applyToPlot(subplot); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 1319,1372
protected void applyToXYPlot(XYPlot plot) { [EOL]     plot.setAxisOffset(this.axisOffset); [EOL]     plot.setDomainZeroBaselinePaint(this.baselinePaint); [EOL]     plot.setRangeZeroBaselinePaint(this.baselinePaint); [EOL]     plot.setDomainGridlinePaint(this.domainGridlinePaint); [EOL]     plot.setRangeGridlinePaint(this.rangeGridlinePaint); [EOL]     plot.setDomainCrosshairPaint(this.crosshairPaint); [EOL]     plot.setRangeCrosshairPaint(this.crosshairPaint); [EOL]     int domainAxisCount = plot.getDomainAxisCount(); [EOL]     for (int i = 0; i < domainAxisCount; i++) { [EOL]         ValueAxis axis = plot.getDomainAxis(i); [EOL]         if (axis != null) { [EOL]             applyToValueAxis(axis); [EOL]         } [EOL]     } [EOL]     int rangeAxisCount = plot.getRangeAxisCount(); [EOL]     for (int i = 0; i < rangeAxisCount; i++) { [EOL]         ValueAxis axis = (ValueAxis) plot.getRangeAxis(i); [EOL]         if (axis != null) { [EOL]             applyToValueAxis(axis); [EOL]         } [EOL]     } [EOL]     int rendererCount = plot.getRendererCount(); [EOL]     for (int i = 0; i < rendererCount; i++) { [EOL]         XYItemRenderer r = plot.getRenderer(i); [EOL]         if (r != null) { [EOL]             applyToXYItemRenderer(r); [EOL]         } [EOL]     } [EOL]     Iterator iter = plot.getAnnotations().iterator(); [EOL]     while (iter.hasNext()) { [EOL]         XYAnnotation a = (XYAnnotation) iter.next(); [EOL]         applyToXYAnnotation(a); [EOL]     } [EOL]     if (plot instanceof CombinedDomainXYPlot) { [EOL]         CombinedDomainXYPlot cp = (CombinedDomainXYPlot) plot; [EOL]         Iterator iterator = cp.getSubplots().iterator(); [EOL]         while (iterator.hasNext()) { [EOL]             XYPlot subplot = (XYPlot) iterator.next(); [EOL]             if (subplot != null) { [EOL]                 applyToPlot(subplot); [EOL]             } [EOL]         } [EOL]     } [EOL]     if (plot instanceof CombinedRangeXYPlot) { [EOL]         CombinedRangeXYPlot cp = (CombinedRangeXYPlot) plot; [EOL]         Iterator iterator = cp.getSubplots().iterator(); [EOL]         while (iterator.hasNext()) { [EOL]             XYPlot subplot = (XYPlot) iterator.next(); [EOL]             if (subplot != null) { [EOL]                 applyToPlot(subplot); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 1379,1441
protected void applyToFastScatterPlot(FastScatterPlot plot) { [EOL]     plot.setDomainGridlinePaint(this.domainGridlinePaint); [EOL]     plot.setRangeGridlinePaint(this.rangeGridlinePaint); [EOL]     ValueAxis xAxis = plot.getDomainAxis(); [EOL]     if (xAxis != null) { [EOL]         applyToValueAxis(xAxis); [EOL]     } [EOL]     ValueAxis yAxis = plot.getRangeAxis(); [EOL]     if (yAxis != null) { [EOL]         applyToValueAxis(yAxis); [EOL]     } [EOL] } <line_num>: 1447,1459
protected void applyToPolarPlot(PolarPlot plot) { [EOL]     plot.setAngleLabelFont(this.regularFont); [EOL]     plot.setAngleLabelPaint(this.tickLabelPaint); [EOL]     plot.setAngleGridlinePaint(this.domainGridlinePaint); [EOL]     plot.setRadiusGridlinePaint(this.rangeGridlinePaint); [EOL]     ValueAxis axis = plot.getAxis(); [EOL]     if (axis != null) { [EOL]         applyToValueAxis(axis); [EOL]     } [EOL] } <line_num>: 1467,1476
protected void applyToSpiderWebPlot(SpiderWebPlot plot) { [EOL]     plot.setLabelFont(this.regularFont); [EOL]     plot.setLabelPaint(this.axisLabelPaint); [EOL]     plot.setAxisLinePaint(this.axisLabelPaint); [EOL] } <line_num>: 1483,1487
protected void applyToMeterPlot(MeterPlot plot) { [EOL]     plot.setDialBackgroundPaint(this.plotBackgroundPaint); [EOL]     plot.setValueFont(this.largeFont); [EOL]     plot.setValuePaint(this.axisLabelPaint); [EOL]     plot.setDialOutlinePaint(this.plotOutlinePaint); [EOL]     plot.setNeedlePaint(this.thermometerPaint); [EOL]     plot.setTickLabelFont(this.regularFont); [EOL]     plot.setTickLabelPaint(this.tickLabelPaint); [EOL] } <line_num>: 1494,1502
protected void applyToThermometerPlot(ThermometerPlot plot) { [EOL]     plot.setValueFont(this.largeFont); [EOL]     plot.setThermometerPaint(this.thermometerPaint); [EOL]     ValueAxis axis = plot.getRangeAxis(); [EOL]     if (axis != null) { [EOL]         applyToValueAxis(axis); [EOL]     } [EOL] } <line_num>: 1510,1517
protected void applyToCategoryAxis(CategoryAxis axis) { [EOL]     axis.setLabelFont(this.largeFont); [EOL]     axis.setLabelPaint(this.axisLabelPaint); [EOL]     axis.setTickLabelFont(this.regularFont); [EOL]     axis.setTickLabelPaint(this.tickLabelPaint); [EOL]     if (axis instanceof SubCategoryAxis) { [EOL]         SubCategoryAxis sca = (SubCategoryAxis) axis; [EOL]         sca.setSubLabelFont(this.regularFont); [EOL]         sca.setSubLabelPaint(this.tickLabelPaint); [EOL]     } [EOL] } <line_num>: 1524,1534
protected void applyToValueAxis(ValueAxis axis) { [EOL]     axis.setLabelFont(this.largeFont); [EOL]     axis.setLabelPaint(this.axisLabelPaint); [EOL]     axis.setTickLabelFont(this.regularFont); [EOL]     axis.setTickLabelPaint(this.tickLabelPaint); [EOL]     if (axis instanceof SymbolAxis) { [EOL]         applyToSymbolAxis((SymbolAxis) axis); [EOL]     } [EOL]     if (axis instanceof PeriodAxis) { [EOL]         applyToPeriodAxis((PeriodAxis) axis); [EOL]     } [EOL] } <line_num>: 1541,1552
protected void applyToSymbolAxis(SymbolAxis axis) { [EOL]     axis.setGridBandPaint(this.gridBandPaint); [EOL]     axis.setGridBandAlternatePaint(this.gridBandAlternatePaint); [EOL] } <line_num>: 1559,1562
protected void applyToPeriodAxis(PeriodAxis axis) { [EOL]     PeriodAxisLabelInfo[] info = axis.getLabelInfo(); [EOL]     for (int i = 0; i < info.length; i++) { [EOL]         PeriodAxisLabelInfo e = info[i]; [EOL]         PeriodAxisLabelInfo n = new PeriodAxisLabelInfo(e.getPeriodClass(), e.getDateFormat(), e.getPadding(), this.regularFont, this.tickLabelPaint, e.getDrawDividers(), e.getDividerStroke(), e.getDividerPaint()); [EOL]         info[i] = n; [EOL]     } [EOL]     axis.setLabelInfo(info); [EOL] } <line_num>: 1569,1580
protected void applyToAbstractRenderer(AbstractRenderer renderer) { [EOL]     if (renderer.getAutoPopulateSeriesPaint()) { [EOL]         renderer.clearSeriesPaints(false); [EOL]     } [EOL]     if (renderer.getAutoPopulateSeriesStroke()) { [EOL]         renderer.clearSeriesStrokes(false); [EOL]     } [EOL] } <line_num>: 1587,1594
protected void applyToCategoryItemRenderer(CategoryItemRenderer renderer) { [EOL]     if (renderer == null) { [EOL]         throw new IllegalArgumentException("Null 'renderer' argument."); [EOL]     } [EOL]     if (renderer instanceof AbstractRenderer) { [EOL]         applyToAbstractRenderer((AbstractRenderer) renderer); [EOL]     } [EOL]     renderer.setBaseItemLabelFont(this.regularFont); [EOL]     renderer.setBaseItemLabelPaint(this.itemLabelPaint); [EOL]     if (renderer instanceof BarRenderer) { [EOL]         BarRenderer br = (BarRenderer) renderer; [EOL]         br.setBarPainter(this.barPainter); [EOL]         br.setShadowVisible(this.shadowVisible); [EOL]         br.setShadowPaint(this.shadowPaint); [EOL]     } [EOL]     if (renderer instanceof BarRenderer3D) { [EOL]         BarRenderer3D br3d = (BarRenderer3D) renderer; [EOL]         br3d.setWallPaint(this.wallPaint); [EOL]     } [EOL]     if (renderer instanceof LineRenderer3D) { [EOL]         LineRenderer3D lr3d = (LineRenderer3D) renderer; [EOL]         lr3d.setWallPaint(this.wallPaint); [EOL]     } [EOL]     if (renderer instanceof StatisticalBarRenderer) { [EOL]         StatisticalBarRenderer sbr = (StatisticalBarRenderer) renderer; [EOL]         sbr.setErrorIndicatorPaint(this.errorIndicatorPaint); [EOL]     } [EOL]     if (renderer instanceof MinMaxCategoryRenderer) { [EOL]         MinMaxCategoryRenderer mmcr = (MinMaxCategoryRenderer) renderer; [EOL]         mmcr.setGroupPaint(this.errorIndicatorPaint); [EOL]     } [EOL] } <line_num>: 1601,1646
protected void applyToXYItemRenderer(XYItemRenderer renderer) { [EOL]     if (renderer == null) { [EOL]         throw new IllegalArgumentException("Null 'renderer' argument."); [EOL]     } [EOL]     if (renderer instanceof AbstractRenderer) { [EOL]         applyToAbstractRenderer((AbstractRenderer) renderer); [EOL]     } [EOL]     renderer.setBaseItemLabelFont(this.regularFont); [EOL]     renderer.setBaseItemLabelPaint(this.itemLabelPaint); [EOL]     if (renderer instanceof XYBarRenderer) { [EOL]         XYBarRenderer br = (XYBarRenderer) renderer; [EOL]         br.setBarPainter(this.xyBarPainter); [EOL]         br.setShadowVisible(this.shadowVisible); [EOL]     } [EOL] } <line_num>: 1653,1667
protected void applyToXYAnnotation(XYAnnotation annotation) { [EOL]     if (annotation == null) { [EOL]         throw new IllegalArgumentException("Null 'annotation' argument."); [EOL]     } [EOL]     if (annotation instanceof XYTextAnnotation) { [EOL]         XYTextAnnotation xyta = (XYTextAnnotation) annotation; [EOL]         xyta.setFont(this.smallFont); [EOL]         xyta.setPaint(this.itemLabelPaint); [EOL]     } [EOL] } <line_num>: 1674,1683
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof StandardChartTheme)) { [EOL]         return false; [EOL]     } [EOL]     StandardChartTheme that = (StandardChartTheme) obj; [EOL]     if (!this.name.equals(that.name)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.extraLargeFont.equals(that.extraLargeFont)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.largeFont.equals(that.largeFont)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.regularFont.equals(that.regularFont)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.smallFont.equals(that.smallFont)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.titlePaint, that.titlePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.subtitlePaint, that.subtitlePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.chartBackgroundPaint, that.chartBackgroundPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.legendBackgroundPaint, that.legendBackgroundPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.legendItemPaint, that.legendItemPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.drawingSupplier.equals(that.drawingSupplier)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.plotBackgroundPaint, that.plotBackgroundPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.plotOutlinePaint, that.plotOutlinePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.labelLinkStyle.equals(that.labelLinkStyle)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.labelLinkPaint, that.labelLinkPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.domainGridlinePaint, that.domainGridlinePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.rangeGridlinePaint, that.rangeGridlinePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.crosshairPaint, that.crosshairPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.axisOffset.equals(that.axisOffset)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.axisLabelPaint, that.axisLabelPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.tickLabelPaint, that.tickLabelPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.itemLabelPaint, that.itemLabelPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (this.shadowVisible != that.shadowVisible) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.shadowPaint, that.shadowPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.barPainter.equals(that.barPainter)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.xyBarPainter.equals(that.xyBarPainter)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.thermometerPaint, that.thermometerPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.errorIndicatorPaint, that.errorIndicatorPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.gridBandPaint, that.gridBandPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.gridBandAlternatePaint, that.gridBandAlternatePaint)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 1692,1803
public Object clone() throws CloneNotSupportedException { [EOL]     return super.clone(); [EOL] } <line_num>: 1812,1814
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.titlePaint, stream); [EOL]     SerialUtilities.writePaint(this.subtitlePaint, stream); [EOL]     SerialUtilities.writePaint(this.chartBackgroundPaint, stream); [EOL]     SerialUtilities.writePaint(this.legendBackgroundPaint, stream); [EOL]     SerialUtilities.writePaint(this.legendItemPaint, stream); [EOL]     SerialUtilities.writePaint(this.plotBackgroundPaint, stream); [EOL]     SerialUtilities.writePaint(this.plotOutlinePaint, stream); [EOL]     SerialUtilities.writePaint(this.labelLinkPaint, stream); [EOL]     SerialUtilities.writePaint(this.baselinePaint, stream); [EOL]     SerialUtilities.writePaint(this.domainGridlinePaint, stream); [EOL]     SerialUtilities.writePaint(this.rangeGridlinePaint, stream); [EOL]     SerialUtilities.writePaint(this.crosshairPaint, stream); [EOL]     SerialUtilities.writePaint(this.axisLabelPaint, stream); [EOL]     SerialUtilities.writePaint(this.tickLabelPaint, stream); [EOL]     SerialUtilities.writePaint(this.itemLabelPaint, stream); [EOL]     SerialUtilities.writePaint(this.shadowPaint, stream); [EOL]     SerialUtilities.writePaint(this.thermometerPaint, stream); [EOL]     SerialUtilities.writePaint(this.wallPaint, stream); [EOL]     SerialUtilities.writePaint(this.errorIndicatorPaint, stream); [EOL]     SerialUtilities.writePaint(this.gridBandPaint, stream); [EOL]     SerialUtilities.writePaint(this.gridBandAlternatePaint, stream); [EOL] } <line_num>: 1823,1846
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.titlePaint = SerialUtilities.readPaint(stream); [EOL]     this.subtitlePaint = SerialUtilities.readPaint(stream); [EOL]     this.chartBackgroundPaint = SerialUtilities.readPaint(stream); [EOL]     this.legendBackgroundPaint = SerialUtilities.readPaint(stream); [EOL]     this.legendItemPaint = SerialUtilities.readPaint(stream); [EOL]     this.plotBackgroundPaint = SerialUtilities.readPaint(stream); [EOL]     this.plotOutlinePaint = SerialUtilities.readPaint(stream); [EOL]     this.labelLinkPaint = SerialUtilities.readPaint(stream); [EOL]     this.baselinePaint = SerialUtilities.readPaint(stream); [EOL]     this.domainGridlinePaint = SerialUtilities.readPaint(stream); [EOL]     this.rangeGridlinePaint = SerialUtilities.readPaint(stream); [EOL]     this.crosshairPaint = SerialUtilities.readPaint(stream); [EOL]     this.axisLabelPaint = SerialUtilities.readPaint(stream); [EOL]     this.tickLabelPaint = SerialUtilities.readPaint(stream); [EOL]     this.itemLabelPaint = SerialUtilities.readPaint(stream); [EOL]     this.shadowPaint = SerialUtilities.readPaint(stream); [EOL]     this.thermometerPaint = SerialUtilities.readPaint(stream); [EOL]     this.wallPaint = SerialUtilities.readPaint(stream); [EOL]     this.errorIndicatorPaint = SerialUtilities.readPaint(stream); [EOL]     this.gridBandPaint = SerialUtilities.readPaint(stream); [EOL]     this.gridBandAlternatePaint = SerialUtilities.readPaint(stream); [EOL] } <line_num>: 1856,1880
