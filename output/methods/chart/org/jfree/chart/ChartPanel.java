public ChartPanel(JFreeChart chart) { [EOL]     this(chart, DEFAULT_WIDTH, DEFAULT_HEIGHT, DEFAULT_MINIMUM_DRAW_WIDTH, DEFAULT_MINIMUM_DRAW_HEIGHT, DEFAULT_MAXIMUM_DRAW_WIDTH, DEFAULT_MAXIMUM_DRAW_HEIGHT, DEFAULT_BUFFER_USED, true, true, true, true, true); [EOL] } <line_num>: 591,609
public ChartPanel(JFreeChart chart, boolean useBuffer) { [EOL]     this(chart, DEFAULT_WIDTH, DEFAULT_HEIGHT, DEFAULT_MINIMUM_DRAW_WIDTH, DEFAULT_MINIMUM_DRAW_HEIGHT, DEFAULT_MAXIMUM_DRAW_WIDTH, DEFAULT_MAXIMUM_DRAW_HEIGHT, useBuffer, true, true, true, true, true); [EOL] } <line_num>: 627,639
public ChartPanel(JFreeChart chart, boolean properties, boolean save, boolean print, boolean zoom, boolean tooltips) { [EOL]     this(chart, DEFAULT_WIDTH, DEFAULT_HEIGHT, DEFAULT_MINIMUM_DRAW_WIDTH, DEFAULT_MINIMUM_DRAW_HEIGHT, DEFAULT_MAXIMUM_DRAW_WIDTH, DEFAULT_MAXIMUM_DRAW_HEIGHT, DEFAULT_BUFFER_USED, properties, save, print, zoom, tooltips); [EOL] } <line_num>: 656,678
public ChartPanel(JFreeChart chart, int width, int height, int minimumDrawWidth, int minimumDrawHeight, int maximumDrawWidth, int maximumDrawHeight, boolean useBuffer, boolean properties, boolean save, boolean print, boolean zoom, boolean tooltips) { [EOL]     this(chart, width, height, minimumDrawWidth, minimumDrawHeight, maximumDrawWidth, maximumDrawHeight, useBuffer, properties, true, save, print, zoom, tooltips); [EOL] } <line_num>: 704,712
public ChartPanel(JFreeChart chart, int width, int height, int minimumDrawWidth, int minimumDrawHeight, int maximumDrawWidth, int maximumDrawHeight, boolean useBuffer, boolean properties, boolean copy, boolean save, boolean print, boolean zoom, boolean tooltips) { [EOL]     setChart(chart); [EOL]     this.chartMouseListeners = new EventListenerList(); [EOL]     this.info = new ChartRenderingInfo(); [EOL]     this.info.setRenderingSource(this); [EOL]     setPreferredSize(new Dimension(width, height)); [EOL]     this.useBuffer = useBuffer; [EOL]     this.refreshBuffer = false; [EOL]     this.minimumDrawWidth = minimumDrawWidth; [EOL]     this.minimumDrawHeight = minimumDrawHeight; [EOL]     this.maximumDrawWidth = maximumDrawWidth; [EOL]     this.maximumDrawHeight = maximumDrawHeight; [EOL]     this.zoomTriggerDistance = DEFAULT_ZOOM_TRIGGER_DISTANCE; [EOL]     this.popup = null; [EOL]     if (properties || copy || save || print || zoom) { [EOL]         this.popup = createPopupMenu(properties, copy, save, print, zoom); [EOL]     } [EOL]     enableEvents(AWTEvent.MOUSE_EVENT_MASK); [EOL]     enableEvents(AWTEvent.MOUSE_MOTION_EVENT_MASK); [EOL]     setDisplayToolTips(tooltips); [EOL]     addMouseListener(this); [EOL]     addMouseMotionListener(this); [EOL]     this.defaultDirectoryForSaveAs = null; [EOL]     this.enforceFileExtensions = true; [EOL]     ToolTipManager ttm = ToolTipManager.sharedInstance(); [EOL]     this.ownToolTipInitialDelay = ttm.getInitialDelay(); [EOL]     this.ownToolTipDismissDelay = ttm.getDismissDelay(); [EOL]     this.ownToolTipReshowDelay = ttm.getReshowDelay(); [EOL]     this.zoomAroundAnchor = false; [EOL]     this.zoomOutlinePaint = Color.blue; [EOL]     this.zoomFillPaint = new Color(0, 0, 255, 63); [EOL]     this.overlays = new java.util.ArrayList(); [EOL]     this.availableMouseHandlers = new java.util.ArrayList(); [EOL]     this.zoomHandler = new ZoomHandler(); [EOL]     this.availableMouseHandlers.add(zoomHandler); [EOL]     PanHandler panHandler = new PanHandler(); [EOL]     int panMask = InputEvent.CTRL_MASK; [EOL]     String osName = System.getProperty("os.name").toLowerCase(); [EOL]     if (osName.startsWith("mac os x")) { [EOL]         panMask = InputEvent.ALT_MASK; [EOL]     } [EOL]     panHandler.setModifier(panMask); [EOL]     this.availableMouseHandlers.add(panHandler); [EOL]     this.auxiliaryMouseHandlers = new java.util.ArrayList(); [EOL] } <line_num>: 742,805
public JFreeChart getChart() { [EOL]     return this.chart; [EOL] } <line_num>: 812,814
public void setChart(JFreeChart chart) { [EOL]     if (this.chart != null) { [EOL]         this.chart.removeChangeListener(this); [EOL]         this.chart.removeProgressListener(this); [EOL]     } [EOL]     this.chart = chart; [EOL]     if (chart != null) { [EOL]         this.chart.addChangeListener(this); [EOL]         this.chart.addProgressListener(this); [EOL]         Plot plot = chart.getPlot(); [EOL]         this.domainZoomable = false; [EOL]         this.rangeZoomable = false; [EOL]         if (plot instanceof Zoomable) { [EOL]             Zoomable z = (Zoomable) plot; [EOL]             this.domainZoomable = z.isDomainZoomable(); [EOL]             this.rangeZoomable = z.isRangeZoomable(); [EOL]             this.orientation = z.getOrientation(); [EOL]         } [EOL]     } else { [EOL]         this.domainZoomable = false; [EOL]         this.rangeZoomable = false; [EOL]     } [EOL]     if (this.useBuffer) { [EOL]         this.refreshBuffer = true; [EOL]     } [EOL]     repaint(); [EOL] } <line_num>: 821,853
public int getMinimumDrawWidth() { [EOL]     return this.minimumDrawWidth; [EOL] } <line_num>: 863,865
public void setMinimumDrawWidth(int width) { [EOL]     this.minimumDrawWidth = width; [EOL] } <line_num>: 876,878
public int getMaximumDrawWidth() { [EOL]     return this.maximumDrawWidth; [EOL] } <line_num>: 888,890
public void setMaximumDrawWidth(int width) { [EOL]     this.maximumDrawWidth = width; [EOL] } <line_num>: 901,903
public int getMinimumDrawHeight() { [EOL]     return this.minimumDrawHeight; [EOL] } <line_num>: 913,915
public void setMinimumDrawHeight(int height) { [EOL]     this.minimumDrawHeight = height; [EOL] } <line_num>: 926,928
public int getMaximumDrawHeight() { [EOL]     return this.maximumDrawHeight; [EOL] } <line_num>: 938,940
public void setMaximumDrawHeight(int height) { [EOL]     this.maximumDrawHeight = height; [EOL] } <line_num>: 951,953
public double getScaleX() { [EOL]     return this.scaleX; [EOL] } <line_num>: 961,963
public double getScaleY() { [EOL]     return this.scaleY; [EOL] } <line_num>: 971,973
public Point2D getAnchor() { [EOL]     return this.anchor; [EOL] } <line_num>: 980,982
protected void setAnchor(Point2D anchor) { [EOL]     this.anchor = anchor; [EOL] } <line_num>: 990,992
public JPopupMenu getPopupMenu() { [EOL]     return this.popup; [EOL] } <line_num>: 999,1001
public void setPopupMenu(JPopupMenu popup) { [EOL]     this.popup = popup; [EOL] } <line_num>: 1008,1010
public ChartRenderingInfo getChartRenderingInfo() { [EOL]     return this.info; [EOL] } <line_num>: 1017,1019
public void setMouseZoomable(boolean flag) { [EOL]     setMouseZoomable(flag, true); [EOL] } <line_num>: 1027,1029
public void setMouseZoomable(boolean flag, boolean fillRectangle) { [EOL]     setDomainZoomable(flag); [EOL]     setRangeZoomable(flag); [EOL]     setFillZoomRectangle(fillRectangle); [EOL] } <line_num>: 1038,1042
public boolean isDomainZoomable() { [EOL]     return this.domainZoomable; [EOL] } <line_num>: 1050,1052
public void setDomainZoomable(boolean flag) { [EOL]     if (flag) { [EOL]         Plot plot = this.chart.getPlot(); [EOL]         if (plot instanceof Zoomable) { [EOL]             Zoomable z = (Zoomable) plot; [EOL]             this.domainZoomable = flag && (z.isDomainZoomable()); [EOL]         } [EOL]     } else { [EOL]         this.domainZoomable = false; [EOL]     } [EOL] } <line_num>: 1061,1072
public boolean isRangeZoomable() { [EOL]     return this.rangeZoomable; [EOL] } <line_num>: 1080,1082
public void setRangeZoomable(boolean flag) { [EOL]     if (flag) { [EOL]         Plot plot = this.chart.getPlot(); [EOL]         if (plot instanceof Zoomable) { [EOL]             Zoomable z = (Zoomable) plot; [EOL]             this.rangeZoomable = flag && (z.isRangeZoomable()); [EOL]         } [EOL]     } else { [EOL]         this.rangeZoomable = false; [EOL]     } [EOL] } <line_num>: 1089,1100
public boolean getFillZoomRectangle() { [EOL]     return this.fillZoomRectangle; [EOL] } <line_num>: 1108,1110
public void setFillZoomRectangle(boolean flag) { [EOL]     this.fillZoomRectangle = flag; [EOL] } <line_num>: 1118,1120
public int getZoomTriggerDistance() { [EOL]     return this.zoomTriggerDistance; [EOL] } <line_num>: 1128,1130
public void setZoomTriggerDistance(int distance) { [EOL]     this.zoomTriggerDistance = distance; [EOL] } <line_num>: 1138,1140
public File getDefaultDirectoryForSaveAs() { [EOL]     return this.defaultDirectoryForSaveAs; [EOL] } <line_num>: 1149,1151
public void setDefaultDirectoryForSaveAs(File directory) { [EOL]     if (directory != null) { [EOL]         if (!directory.isDirectory()) { [EOL]             throw new IllegalArgumentException("The 'directory' argument is not a directory."); [EOL]         } [EOL]     } [EOL]     this.defaultDirectoryForSaveAs = directory; [EOL] } <line_num>: 1161,1169
public boolean isEnforceFileExtensions() { [EOL]     return this.enforceFileExtensions; [EOL] } <line_num>: 1179,1181
public void setEnforceFileExtensions(boolean enforce) { [EOL]     this.enforceFileExtensions = enforce; [EOL] } <line_num>: 1190,1192
public boolean getZoomAroundAnchor() { [EOL]     return this.zoomAroundAnchor; [EOL] } <line_num>: 1204,1206
public void setZoomAroundAnchor(boolean zoomAroundAnchor) { [EOL]     this.zoomAroundAnchor = zoomAroundAnchor; [EOL] } <line_num>: 1218,1220
public Paint getZoomFillPaint() { [EOL]     return this.zoomFillPaint; [EOL] } <line_num>: 1232,1234
public void setZoomFillPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.zoomFillPaint = paint; [EOL] } <line_num>: 1246,1251
public Paint getZoomOutlinePaint() { [EOL]     return this.zoomOutlinePaint; [EOL] } <line_num>: 1263,1265
public void setZoomOutlinePaint(Paint paint) { [EOL]     this.zoomOutlinePaint = paint; [EOL] } <line_num>: 1277,1279
public boolean isMouseWheelEnabled() { [EOL]     return this.mouseWheelHandler != null; [EOL] } <line_num>: 1294,1296
public void setMouseWheelEnabled(boolean flag) { [EOL]     if (flag && this.mouseWheelHandler == null) { [EOL]         this.mouseWheelHandler = new MouseWheelHandler(this); [EOL]     } else if (!flag && this.mouseWheelHandler != null) { [EOL]         removeMouseWheelListener(this.mouseWheelHandler); [EOL]         this.mouseWheelHandler = null; [EOL]     } [EOL] } <line_num>: 1308,1316
public void addOverlay(Overlay overlay) { [EOL]     if (overlay == null) { [EOL]         throw new IllegalArgumentException("Null 'overlay' argument."); [EOL]     } [EOL]     this.overlays.add(overlay); [EOL]     overlay.addChangeListener(this); [EOL]     repaint(); [EOL] } <line_num>: 1325,1332
public void removeOverlay(Overlay overlay) { [EOL]     if (overlay == null) { [EOL]         throw new IllegalArgumentException("Null 'overlay' argument."); [EOL]     } [EOL]     boolean removed = this.overlays.remove(overlay); [EOL]     if (removed) { [EOL]         overlay.removeChangeListener(this); [EOL]         repaint(); [EOL]     } [EOL] } <line_num>: 1341,1350
public void overlayChanged(OverlayChangeEvent event) { [EOL]     repaint(); [EOL] } <line_num>: 1359,1361
public boolean getUseBuffer() { [EOL]     return this.useBuffer; [EOL] } <line_num>: 1371,1373
public PlotOrientation getOrientation() { [EOL]     return this.orientation; [EOL] } <line_num>: 1382,1384
public void addMouseHandler(AbstractMouseHandler handler) { [EOL]     if (handler == null) { [EOL]         throw new IllegalArgumentException("Null 'handler' argument."); [EOL]     } [EOL]     this.availableMouseHandlers.add(handler); [EOL] } <line_num>: 1395,1400
public boolean removeMouseHandler(AbstractMouseHandler handler) { [EOL]     if (handler == null) { [EOL]         throw new IllegalArgumentException("Null 'handler' argument."); [EOL]     } [EOL]     return this.availableMouseHandlers.remove(handler); [EOL] } <line_num>: 1413,1418
public void clearLiveMouseHandler() { [EOL]     this.liveMouseHandler = null; [EOL] } <line_num>: 1426,1428
public ZoomHandler getZoomHandler() { [EOL]     return this.zoomHandler; [EOL] } <line_num>: 1437,1439
public Rectangle2D getZoomRectangle() { [EOL]     return this.zoomRectangle; [EOL] } <line_num>: 1448,1450
public void setZoomRectangle(Rectangle2D rect) { [EOL]     this.zoomRectangle = rect; [EOL] } <line_num>: 1459,1461
public void setDisplayToolTips(boolean flag) { [EOL]     if (flag) { [EOL]         ToolTipManager.sharedInstance().registerComponent(this); [EOL]     } else { [EOL]         ToolTipManager.sharedInstance().unregisterComponent(this); [EOL]     } [EOL] } <line_num>: 1471,1478
public String getToolTipText(MouseEvent e) { [EOL]     String result = null; [EOL]     if (this.info != null) { [EOL]         EntityCollection entities = this.info.getEntityCollection(); [EOL]         if (entities != null) { [EOL]             Insets insets = getInsets(); [EOL]             ChartEntity entity = entities.getEntity((int) ((e.getX() - insets.left) / this.scaleX), (int) ((e.getY() - insets.top) / this.scaleY)); [EOL]             if (entity != null) { [EOL]                 result = entity.getToolTipText(); [EOL]             } [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1487,1504
public Point translateJava2DToScreen(Point2D java2DPoint) { [EOL]     Insets insets = getInsets(); [EOL]     int x = (int) (java2DPoint.getX() * this.scaleX + insets.left); [EOL]     int y = (int) (java2DPoint.getY() * this.scaleY + insets.top); [EOL]     return new Point(x, y); [EOL] } <line_num>: 1513,1518
public Point2D translateScreenToJava2D(Point screenPoint) { [EOL]     Insets insets = getInsets(); [EOL]     double x = (screenPoint.getX() - insets.left) / this.scaleX; [EOL]     double y = (screenPoint.getY() - insets.top) / this.scaleY; [EOL]     return new Point2D.Double(x, y); [EOL] } <line_num>: 1528,1533
public Rectangle2D scale(Rectangle2D rect) { [EOL]     Insets insets = getInsets(); [EOL]     double x = rect.getX() * getScaleX() + insets.left; [EOL]     double y = rect.getY() * getScaleY() + insets.top; [EOL]     double w = rect.getWidth() * getScaleX(); [EOL]     double h = rect.getHeight() * getScaleY(); [EOL]     return new Rectangle2D.Double(x, y, w, h); [EOL] } <line_num>: 1543,1550
public ChartEntity getEntityForPoint(int viewX, int viewY) { [EOL]     ChartEntity result = null; [EOL]     if (this.info != null) { [EOL]         Insets insets = getInsets(); [EOL]         double x = (viewX - insets.left) / this.scaleX; [EOL]         double y = (viewY - insets.top) / this.scaleY; [EOL]         EntityCollection entities = this.info.getEntityCollection(); [EOL]         result = entities != null ? entities.getEntity(x, y) : null; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1563,1575
public boolean getRefreshBuffer() { [EOL]     return this.refreshBuffer; [EOL] } <line_num>: 1583,1585
public void setRefreshBuffer(boolean flag) { [EOL]     this.refreshBuffer = flag; [EOL] } <line_num>: 1594,1596
public void paintComponent(Graphics g) { [EOL]     super.paintComponent(g); [EOL]     if (this.chart == null) { [EOL]         return; [EOL]     } [EOL]     Graphics2D g2 = (Graphics2D) g.create(); [EOL]     Dimension size = getSize(); [EOL]     Insets insets = getInsets(); [EOL]     Rectangle2D available = new Rectangle2D.Double(insets.left, insets.top, size.getWidth() - insets.left - insets.right, size.getHeight() - insets.top - insets.bottom); [EOL]     boolean scale = false; [EOL]     double drawWidth = available.getWidth(); [EOL]     double drawHeight = available.getHeight(); [EOL]     this.scaleX = 1.0; [EOL]     this.scaleY = 1.0; [EOL]     if (drawWidth < this.minimumDrawWidth) { [EOL]         this.scaleX = drawWidth / this.minimumDrawWidth; [EOL]         drawWidth = this.minimumDrawWidth; [EOL]         scale = true; [EOL]     } else if (drawWidth > this.maximumDrawWidth) { [EOL]         this.scaleX = drawWidth / this.maximumDrawWidth; [EOL]         drawWidth = this.maximumDrawWidth; [EOL]         scale = true; [EOL]     } [EOL]     if (drawHeight < this.minimumDrawHeight) { [EOL]         this.scaleY = drawHeight / this.minimumDrawHeight; [EOL]         drawHeight = this.minimumDrawHeight; [EOL]         scale = true; [EOL]     } else if (drawHeight > this.maximumDrawHeight) { [EOL]         this.scaleY = drawHeight / this.maximumDrawHeight; [EOL]         drawHeight = this.maximumDrawHeight; [EOL]         scale = true; [EOL]     } [EOL]     Rectangle2D chartArea = new Rectangle2D.Double(0.0, 0.0, drawWidth, drawHeight); [EOL]     if (this.useBuffer) { [EOL]         if ((this.chartBuffer == null) || (this.chartBufferWidth != available.getWidth()) || (this.chartBufferHeight != available.getHeight())) { [EOL]             this.chartBufferWidth = (int) available.getWidth(); [EOL]             this.chartBufferHeight = (int) available.getHeight(); [EOL]             GraphicsConfiguration gc = g2.getDeviceConfiguration(); [EOL]             this.chartBuffer = gc.createCompatibleImage(this.chartBufferWidth, this.chartBufferHeight, Transparency.TRANSLUCENT); [EOL]             this.refreshBuffer = true; [EOL]         } [EOL]         if (this.refreshBuffer) { [EOL]             this.refreshBuffer = false; [EOL]             Rectangle2D bufferArea = new Rectangle2D.Double(0, 0, this.chartBufferWidth, this.chartBufferHeight); [EOL]             Graphics2D bufferG2 = (Graphics2D) this.chartBuffer.getGraphics(); [EOL]             Composite savedComposite = bufferG2.getComposite(); [EOL]             bufferG2.setComposite(AlphaComposite.getInstance(AlphaComposite.CLEAR, 0.0f)); [EOL]             Rectangle r = new Rectangle(0, 0, this.chartBufferWidth, this.chartBufferHeight); [EOL]             bufferG2.fill(r); [EOL]             bufferG2.setComposite(savedComposite); [EOL]             if (scale) { [EOL]                 AffineTransform saved = bufferG2.getTransform(); [EOL]                 AffineTransform st = AffineTransform.getScaleInstance(this.scaleX, this.scaleY); [EOL]                 bufferG2.transform(st); [EOL]                 this.chart.draw(bufferG2, chartArea, this.anchor, this.info); [EOL]                 bufferG2.setTransform(saved); [EOL]             } else { [EOL]                 this.chart.draw(bufferG2, bufferArea, this.anchor, this.info); [EOL]             } [EOL]         } [EOL]         g2.drawImage(this.chartBuffer, insets.left, insets.top, this); [EOL]     } else { [EOL]         AffineTransform saved = g2.getTransform(); [EOL]         g2.translate(insets.left, insets.top); [EOL]         if (scale) { [EOL]             AffineTransform st = AffineTransform.getScaleInstance(this.scaleX, this.scaleY); [EOL]             g2.transform(st); [EOL]         } [EOL]         this.chart.draw(g2, chartArea, this.anchor, this.info); [EOL]         g2.setTransform(saved); [EOL]     } [EOL]     Iterator iterator = this.overlays.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         Overlay overlay = (Overlay) iterator.next(); [EOL]         overlay.paintOverlay(g2, this); [EOL]     } [EOL]     drawZoomRectangle(g2, !this.useBuffer); [EOL]     drawSelectionShape(g2, !this.useBuffer); [EOL]     g2.dispose(); [EOL]     this.anchor = null; [EOL] } <line_num>: 1606,1738
public void chartChanged(ChartChangeEvent event) { [EOL]     this.refreshBuffer = true; [EOL]     Plot plot = this.chart.getPlot(); [EOL]     if (plot instanceof Zoomable) { [EOL]         Zoomable z = (Zoomable) plot; [EOL]         this.orientation = z.getOrientation(); [EOL]     } [EOL]     repaint(); [EOL] } <line_num>: 1745,1753
public void chartProgress(ChartProgressEvent event) { [EOL] } <line_num>: 1760,1762
public void actionPerformed(ActionEvent event) { [EOL]     String command = event.getActionCommand(); [EOL]     double screenX = -1.0; [EOL]     double screenY = -1.0; [EOL]     if (this.zoomPoint != null) { [EOL]         screenX = this.zoomPoint.getX(); [EOL]         screenY = this.zoomPoint.getY(); [EOL]     } [EOL]     if (command.equals(PROPERTIES_COMMAND)) { [EOL]         doEditChartProperties(); [EOL]     } else if (command.equals(COPY_COMMAND)) { [EOL]         doCopy(); [EOL]     } else if (command.equals(SAVE_COMMAND)) { [EOL]         try { [EOL]             doSaveAs(); [EOL]         } catch (IOException e) { [EOL]             e.printStackTrace(); [EOL]         } [EOL]     } else if (command.equals(PRINT_COMMAND)) { [EOL]         createChartPrintJob(); [EOL]     } else if (command.equals(ZOOM_IN_BOTH_COMMAND)) { [EOL]         zoomInBoth(screenX, screenY); [EOL]     } else if (command.equals(ZOOM_IN_DOMAIN_COMMAND)) { [EOL]         zoomInDomain(screenX, screenY); [EOL]     } else if (command.equals(ZOOM_IN_RANGE_COMMAND)) { [EOL]         zoomInRange(screenX, screenY); [EOL]     } else if (command.equals(ZOOM_OUT_BOTH_COMMAND)) { [EOL]         zoomOutBoth(screenX, screenY); [EOL]     } else if (command.equals(ZOOM_OUT_DOMAIN_COMMAND)) { [EOL]         zoomOutDomain(screenX, screenY); [EOL]     } else if (command.equals(ZOOM_OUT_RANGE_COMMAND)) { [EOL]         zoomOutRange(screenX, screenY); [EOL]     } else if (command.equals(ZOOM_RESET_BOTH_COMMAND)) { [EOL]         restoreAutoBounds(); [EOL]     } else if (command.equals(ZOOM_RESET_DOMAIN_COMMAND)) { [EOL]         restoreAutoDomainBounds(); [EOL]     } else if (command.equals(ZOOM_RESET_RANGE_COMMAND)) { [EOL]         restoreAutoRangeBounds(); [EOL]     } [EOL] } <line_num>: 1769,1828
public void mouseEntered(MouseEvent e) { [EOL]     if (!this.ownToolTipDelaysActive) { [EOL]         ToolTipManager ttm = ToolTipManager.sharedInstance(); [EOL]         this.originalToolTipInitialDelay = ttm.getInitialDelay(); [EOL]         ttm.setInitialDelay(this.ownToolTipInitialDelay); [EOL]         this.originalToolTipReshowDelay = ttm.getReshowDelay(); [EOL]         ttm.setReshowDelay(this.ownToolTipReshowDelay); [EOL]         this.originalToolTipDismissDelay = ttm.getDismissDelay(); [EOL]         ttm.setDismissDelay(this.ownToolTipDismissDelay); [EOL]         this.ownToolTipDelaysActive = true; [EOL]     } [EOL]     if (this.liveMouseHandler != null) { [EOL]         this.liveMouseHandler.mouseEntered(e); [EOL]     } [EOL]     Iterator iterator = this.auxiliaryMouseHandlers.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         AbstractMouseHandler h = (AbstractMouseHandler) iterator.next(); [EOL]         h.mouseEntered(e); [EOL]     } [EOL] } <line_num>: 1837,1861
public void mouseExited(MouseEvent e) { [EOL]     if (this.ownToolTipDelaysActive) { [EOL]         ToolTipManager ttm = ToolTipManager.sharedInstance(); [EOL]         ttm.setInitialDelay(this.originalToolTipInitialDelay); [EOL]         ttm.setReshowDelay(this.originalToolTipReshowDelay); [EOL]         ttm.setDismissDelay(this.originalToolTipDismissDelay); [EOL]         this.ownToolTipDelaysActive = false; [EOL]     } [EOL]     if (this.liveMouseHandler != null) { [EOL]         this.liveMouseHandler.mouseExited(e); [EOL]     } [EOL]     Iterator iterator = this.auxiliaryMouseHandlers.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         AbstractMouseHandler h = (AbstractMouseHandler) iterator.next(); [EOL]         h.mouseExited(e); [EOL]     } [EOL] } <line_num>: 1870,1888
public void mousePressed(MouseEvent e) { [EOL]     if (this.chart == null) { [EOL]         return; [EOL]     } [EOL]     int mods = e.getModifiers(); [EOL]     if (e.isPopupTrigger()) { [EOL]         if (this.popup != null) { [EOL]             displayPopupMenu(e.getX(), e.getY()); [EOL]         } [EOL]         return; [EOL]     } [EOL]     if (this.liveMouseHandler != null) { [EOL]         this.liveMouseHandler.mousePressed(e); [EOL]     } else { [EOL]         AbstractMouseHandler h = null; [EOL]         boolean found = false; [EOL]         Iterator iterator = this.availableMouseHandlers.iterator(); [EOL]         AbstractMouseHandler nomod = null; [EOL]         while (iterator.hasNext() && !found) { [EOL]             h = (AbstractMouseHandler) iterator.next(); [EOL]             if (h.getModifier() == 0 && nomod == null) { [EOL]                 nomod = h; [EOL]             } else { [EOL]                 found = (mods & h.getModifier()) == h.getModifier(); [EOL]             } [EOL]         } [EOL]         if (!found && nomod != null) { [EOL]             h = nomod; [EOL]             found = true; [EOL]         } [EOL]         if (found) { [EOL]             this.liveMouseHandler = h; [EOL]             this.liveMouseHandler.mousePressed(e); [EOL]         } [EOL]     } [EOL]     Iterator iterator = this.auxiliaryMouseHandlers.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         AbstractMouseHandler handler = (AbstractMouseHandler) iterator.next(); [EOL]         handler.mousePressed(e); [EOL]     } [EOL] } <line_num>: 1898,1946
public void mouseDragged(MouseEvent e) { [EOL]     if (this.popup != null && this.popup.isShowing()) { [EOL]         return; [EOL]     } [EOL]     if (this.liveMouseHandler != null) { [EOL]         this.liveMouseHandler.mouseDragged(e); [EOL]     } [EOL]     Iterator iterator = this.auxiliaryMouseHandlers.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         AbstractMouseHandler handler = (AbstractMouseHandler) iterator.next(); [EOL]         handler.mouseDragged(e); [EOL]     } [EOL] } <line_num>: 1953,1971
public void mouseReleased(MouseEvent e) { [EOL]     if (e.isPopupTrigger()) { [EOL]         if (this.popup != null) { [EOL]             displayPopupMenu(e.getX(), e.getY()); [EOL]         } [EOL]         return; [EOL]     } [EOL]     if (this.liveMouseHandler != null) { [EOL]         this.liveMouseHandler.mouseReleased(e); [EOL]     } [EOL]     Iterator iterator = this.auxiliaryMouseHandlers.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         AbstractMouseHandler mh = (AbstractMouseHandler) iterator.next(); [EOL]         mh.mouseReleased(e); [EOL]     } [EOL] } <line_num>: 1980,1999
public void mouseClicked(MouseEvent event) { [EOL]     if (this.liveMouseHandler != null) { [EOL]         this.liveMouseHandler.mouseClicked(event); [EOL]     } [EOL]     Iterator iterator = this.auxiliaryMouseHandlers.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         AbstractMouseHandler mh = (AbstractMouseHandler) iterator.next(); [EOL]         mh.mouseClicked(event); [EOL]     } [EOL] } <line_num>: 2007,2048
public void mouseMoved(MouseEvent e) { [EOL]     Object[] listeners = this.chartMouseListeners.getListeners(ChartMouseListener.class); [EOL]     if (listeners.length == 0) { [EOL]         return; [EOL]     } [EOL]     Insets insets = getInsets(); [EOL]     int x = (int) ((e.getX() - insets.left) / this.scaleX); [EOL]     int y = (int) ((e.getY() - insets.top) / this.scaleY); [EOL]     ChartEntity entity = null; [EOL]     if (this.info != null) { [EOL]         EntityCollection entities = this.info.getEntityCollection(); [EOL]         if (entities != null) { [EOL]             entity = entities.getEntity(x, y); [EOL]         } [EOL]     } [EOL]     if (this.chart != null) { [EOL]         ChartMouseEvent event = new ChartMouseEvent(getChart(), e, entity); [EOL]         for (int i = listeners.length - 1; i >= 0; i -= 1) { [EOL]             ((ChartMouseListener) listeners[i]).chartMouseMoved(event); [EOL]         } [EOL]     } [EOL] } <line_num>: 2055,2083
public void zoomInBoth(double x, double y) { [EOL]     Plot plot = this.chart.getPlot(); [EOL]     if (plot == null) { [EOL]         return; [EOL]     } [EOL]     boolean savedNotify = plot.isNotify(); [EOL]     plot.setNotify(false); [EOL]     zoomInDomain(x, y); [EOL]     zoomInRange(x, y); [EOL]     plot.setNotify(savedNotify); [EOL] } <line_num>: 2091,2104
public void zoomInDomain(double x, double y) { [EOL]     Plot plot = this.chart.getPlot(); [EOL]     if (plot instanceof Zoomable) { [EOL]         boolean savedNotify = plot.isNotify(); [EOL]         plot.setNotify(false); [EOL]         Zoomable z = (Zoomable) plot; [EOL]         z.zoomDomainAxes(this.zoomInFactor, this.info.getPlotInfo(), translateScreenToJava2D(new Point((int) x, (int) y)), this.zoomAroundAnchor); [EOL]         plot.setNotify(savedNotify); [EOL]     } [EOL] } <line_num>: 2114,2128
public void zoomInRange(double x, double y) { [EOL]     Plot plot = this.chart.getPlot(); [EOL]     if (plot instanceof Zoomable) { [EOL]         boolean savedNotify = plot.isNotify(); [EOL]         plot.setNotify(false); [EOL]         Zoomable z = (Zoomable) plot; [EOL]         z.zoomRangeAxes(this.zoomInFactor, this.info.getPlotInfo(), translateScreenToJava2D(new Point((int) x, (int) y)), this.zoomAroundAnchor); [EOL]         plot.setNotify(savedNotify); [EOL]     } [EOL] } <line_num>: 2138,2152
public void zoomOutBoth(double x, double y) { [EOL]     Plot plot = this.chart.getPlot(); [EOL]     if (plot == null) { [EOL]         return; [EOL]     } [EOL]     boolean savedNotify = plot.isNotify(); [EOL]     plot.setNotify(false); [EOL]     zoomOutDomain(x, y); [EOL]     zoomOutRange(x, y); [EOL]     plot.setNotify(savedNotify); [EOL] } <line_num>: 2160,2173
public void zoomOutDomain(double x, double y) { [EOL]     Plot plot = this.chart.getPlot(); [EOL]     if (plot instanceof Zoomable) { [EOL]         boolean savedNotify = plot.isNotify(); [EOL]         plot.setNotify(false); [EOL]         Zoomable z = (Zoomable) plot; [EOL]         z.zoomDomainAxes(this.zoomOutFactor, this.info.getPlotInfo(), translateScreenToJava2D(new Point((int) x, (int) y)), this.zoomAroundAnchor); [EOL]         plot.setNotify(savedNotify); [EOL]     } [EOL] } <line_num>: 2183,2197
public void zoomOutRange(double x, double y) { [EOL]     Plot plot = this.chart.getPlot(); [EOL]     if (plot instanceof Zoomable) { [EOL]         boolean savedNotify = plot.isNotify(); [EOL]         plot.setNotify(false); [EOL]         Zoomable z = (Zoomable) plot; [EOL]         z.zoomRangeAxes(this.zoomOutFactor, this.info.getPlotInfo(), translateScreenToJava2D(new Point((int) x, (int) y)), this.zoomAroundAnchor); [EOL]         plot.setNotify(savedNotify); [EOL]     } [EOL] } <line_num>: 2207,2221
public void zoom(Rectangle2D selection) { [EOL]     Point2D selectOrigin = translateScreenToJava2D(new Point((int) Math.ceil(selection.getX()), (int) Math.ceil(selection.getY()))); [EOL]     PlotRenderingInfo plotInfo = this.info.getPlotInfo(); [EOL]     Rectangle2D scaledDataArea = getScreenDataArea((int) selection.getCenterX(), (int) selection.getCenterY()); [EOL]     if ((selection.getHeight() > 0) && (selection.getWidth() > 0)) { [EOL]         double hLower = (selection.getMinX() - scaledDataArea.getMinX()) / scaledDataArea.getWidth(); [EOL]         double hUpper = (selection.getMaxX() - scaledDataArea.getMinX()) / scaledDataArea.getWidth(); [EOL]         double vLower = (scaledDataArea.getMaxY() - selection.getMaxY()) / scaledDataArea.getHeight(); [EOL]         double vUpper = (scaledDataArea.getMaxY() - selection.getMinY()) / scaledDataArea.getHeight(); [EOL]         Plot p = this.chart.getPlot(); [EOL]         if (p instanceof Zoomable) { [EOL]             boolean savedNotify = p.isNotify(); [EOL]             p.setNotify(false); [EOL]             Zoomable z = (Zoomable) p; [EOL]             if (z.getOrientation() == PlotOrientation.HORIZONTAL) { [EOL]                 z.zoomDomainAxes(vLower, vUpper, plotInfo, selectOrigin); [EOL]                 z.zoomRangeAxes(hLower, hUpper, plotInfo, selectOrigin); [EOL]             } else { [EOL]                 z.zoomDomainAxes(hLower, hUpper, plotInfo, selectOrigin); [EOL]                 z.zoomRangeAxes(vLower, vUpper, plotInfo, selectOrigin); [EOL]             } [EOL]             p.setNotify(savedNotify); [EOL]         } [EOL]     } [EOL] } <line_num>: 2228,2270
public void restoreAutoBounds() { [EOL]     Plot plot = this.chart.getPlot(); [EOL]     if (plot == null) { [EOL]         return; [EOL]     } [EOL]     boolean savedNotify = plot.isNotify(); [EOL]     plot.setNotify(false); [EOL]     restoreAutoDomainBounds(); [EOL]     restoreAutoRangeBounds(); [EOL]     plot.setNotify(savedNotify); [EOL] } <line_num>: 2275,2288
public void restoreAutoDomainBounds() { [EOL]     Plot plot = this.chart.getPlot(); [EOL]     if (plot instanceof Zoomable) { [EOL]         Zoomable z = (Zoomable) plot; [EOL]         boolean savedNotify = plot.isNotify(); [EOL]         plot.setNotify(false); [EOL]         Point2D zp = (this.zoomPoint != null ? this.zoomPoint : new Point()); [EOL]         z.zoomDomainAxes(0.0, this.info.getPlotInfo(), zp); [EOL]         plot.setNotify(savedNotify); [EOL]     } [EOL] } <line_num>: 2293,2308
public void restoreAutoRangeBounds() { [EOL]     Plot plot = this.chart.getPlot(); [EOL]     if (plot instanceof Zoomable) { [EOL]         Zoomable z = (Zoomable) plot; [EOL]         boolean savedNotify = plot.isNotify(); [EOL]         plot.setNotify(false); [EOL]         Point2D zp = (this.zoomPoint != null ? this.zoomPoint : new Point()); [EOL]         z.zoomRangeAxes(0.0, this.info.getPlotInfo(), zp); [EOL]         plot.setNotify(savedNotify); [EOL]     } [EOL] } <line_num>: 2313,2328
public Rectangle2D getScreenDataArea() { [EOL]     Rectangle2D dataArea = this.info.getPlotInfo().getDataArea(); [EOL]     Insets insets = getInsets(); [EOL]     double x = dataArea.getX() * this.scaleX + insets.left; [EOL]     double y = dataArea.getY() * this.scaleY + insets.top; [EOL]     double w = dataArea.getWidth() * this.scaleX; [EOL]     double h = dataArea.getHeight() * this.scaleY; [EOL]     return new Rectangle2D.Double(x, y, w, h); [EOL] } <line_num>: 2336,2344
public Rectangle2D getScreenDataArea(int x, int y) { [EOL]     PlotRenderingInfo plotInfo = this.info.getPlotInfo(); [EOL]     Rectangle2D result; [EOL]     if (plotInfo.getSubplotCount() == 0) { [EOL]         result = getScreenDataArea(); [EOL]     } else { [EOL]         Point2D selectOrigin = translateScreenToJava2D(new Point(x, y)); [EOL]         int subplotIndex = plotInfo.getSubplotIndex(selectOrigin); [EOL]         if (subplotIndex == -1) { [EOL]             return null; [EOL]         } [EOL]         result = scale(plotInfo.getSubplotInfo(subplotIndex).getDataArea()); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 2355,2372
public int getInitialDelay() { [EOL]     return this.ownToolTipInitialDelay; [EOL] } <line_num>: 2381,2383
public int getReshowDelay() { [EOL]     return this.ownToolTipReshowDelay; [EOL] } <line_num>: 2392,2394
public int getDismissDelay() { [EOL]     return this.ownToolTipDismissDelay; [EOL] } <line_num>: 2404,2406
public void setInitialDelay(int delay) { [EOL]     this.ownToolTipInitialDelay = delay; [EOL] } <line_num>: 2416,2418
public void setReshowDelay(int delay) { [EOL]     this.ownToolTipReshowDelay = delay; [EOL] } <line_num>: 2428,2430
public void setDismissDelay(int delay) { [EOL]     this.ownToolTipDismissDelay = delay; [EOL] } <line_num>: 2440,2442
public double getZoomInFactor() { [EOL]     return this.zoomInFactor; [EOL] } <line_num>: 2451,2453
public void setZoomInFactor(double factor) { [EOL]     this.zoomInFactor = factor; [EOL] } <line_num>: 2462,2464
public double getZoomOutFactor() { [EOL]     return this.zoomOutFactor; [EOL] } <line_num>: 2473,2475
public void setZoomOutFactor(double factor) { [EOL]     this.zoomOutFactor = factor; [EOL] } <line_num>: 2484,2486
private void drawZoomRectangle(Graphics2D g2, boolean xor) { [EOL]     if (this.zoomRectangle != null) { [EOL]         if (xor) { [EOL]             g2.setXORMode(Color.gray); [EOL]         } [EOL]         if (this.fillZoomRectangle) { [EOL]             g2.setPaint(this.zoomFillPaint); [EOL]             g2.fill(this.zoomRectangle); [EOL]         } else { [EOL]             g2.setPaint(this.zoomOutlinePaint); [EOL]             g2.draw(this.zoomRectangle); [EOL]         } [EOL]         if (xor) { [EOL]             g2.setPaintMode(); [EOL]         } [EOL]     } [EOL] } <line_num>: 2498,2517
private void drawSelectionShape(Graphics2D g2, boolean xor) { [EOL]     if (this.selectionShape != null) { [EOL]         if (xor) { [EOL]             g2.setXORMode(Color.gray); [EOL]         } [EOL]         if (this.selectionFillPaint != null) { [EOL]             g2.setPaint(this.selectionFillPaint); [EOL]             g2.fill(this.selectionShape); [EOL]         } [EOL]         g2.setPaint(this.selectionOutlinePaint); [EOL]         g2.setStroke(this.selectionOutlineStroke); [EOL]         GeneralPath pp = new GeneralPath(this.selectionShape); [EOL]         pp.closePath(); [EOL]         g2.draw(pp); [EOL]         if (xor) { [EOL]             g2.setPaintMode(); [EOL]         } [EOL]     } [EOL] } <line_num>: 2529,2549
public void doEditChartProperties() { [EOL]     ChartEditor editor = ChartEditorManager.getChartEditor(this.chart); [EOL]     int result = JOptionPane.showConfirmDialog(this, editor, localizationResources.getString("Chart_Properties"), JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE); [EOL]     if (result == JOptionPane.OK_OPTION) { [EOL]         editor.updateChart(this.chart); [EOL]     } [EOL] } <line_num>: 2557,2567
public void doCopy() { [EOL]     Clipboard systemClipboard = Toolkit.getDefaultToolkit().getSystemClipboard(); [EOL]     Insets insets = getInsets(); [EOL]     int w = getWidth() - insets.left - insets.right; [EOL]     int h = getHeight() - insets.top - insets.bottom; [EOL]     ChartTransferable selection = new ChartTransferable(this.chart, w, h, getMinimumDrawWidth(), getMinimumDrawHeight(), getMaximumDrawWidth(), getMaximumDrawHeight(), true); [EOL]     systemClipboard.setContents(selection, null); [EOL] } <line_num>: 2574,2584
public void doSaveAs() throws IOException { [EOL]     JFileChooser fileChooser = new JFileChooser(); [EOL]     fileChooser.setCurrentDirectory(this.defaultDirectoryForSaveAs); [EOL]     ExtensionFileFilter filter = new ExtensionFileFilter(localizationResources.getString("PNG_Image_Files"), ".png"); [EOL]     fileChooser.addChoosableFileFilter(filter); [EOL]     int option = fileChooser.showSaveDialog(this); [EOL]     if (option == JFileChooser.APPROVE_OPTION) { [EOL]         String filename = fileChooser.getSelectedFile().getPath(); [EOL]         if (isEnforceFileExtensions()) { [EOL]             if (!filename.endsWith(".png")) { [EOL]                 filename = filename + ".png"; [EOL]             } [EOL]         } [EOL]         ChartUtilities.saveChartAsPNG(new File(filename), this.chart, getWidth(), getHeight()); [EOL]     } [EOL] } <line_num>: 2592,2612
public void createChartPrintJob() { [EOL]     PrinterJob job = PrinterJob.getPrinterJob(); [EOL]     PageFormat pf = job.defaultPage(); [EOL]     PageFormat pf2 = job.pageDialog(pf); [EOL]     if (pf2 != pf) { [EOL]         job.setPrintable(this, pf2); [EOL]         if (job.printDialog()) { [EOL]             try { [EOL]                 job.print(); [EOL]             } catch (PrinterException e) { [EOL]                 JOptionPane.showMessageDialog(this, e); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 2617,2634
public int print(Graphics g, PageFormat pf, int pageIndex) { [EOL]     if (pageIndex != 0) { [EOL]         return NO_SUCH_PAGE; [EOL]     } [EOL]     Graphics2D g2 = (Graphics2D) g; [EOL]     double x = pf.getImageableX(); [EOL]     double y = pf.getImageableY(); [EOL]     double w = pf.getImageableWidth(); [EOL]     double h = pf.getImageableHeight(); [EOL]     this.chart.draw(g2, new Rectangle2D.Double(x, y, w, h), this.anchor, null); [EOL]     return PAGE_EXISTS; [EOL] } <line_num>: 2646,2660
public void addChartMouseListener(ChartMouseListener listener) { [EOL]     if (listener == null) { [EOL]         throw new IllegalArgumentException("Null 'listener' argument."); [EOL]     } [EOL]     this.chartMouseListeners.add(ChartMouseListener.class, listener); [EOL] } <line_num>: 2667,2672
public void removeChartMouseListener(ChartMouseListener listener) { [EOL]     this.chartMouseListeners.remove(ChartMouseListener.class, listener); [EOL] } <line_num>: 2680,2682
public EventListener[] getListeners(Class listenerType) { [EOL]     if (listenerType == ChartMouseListener.class) { [EOL]         return this.chartMouseListeners.getListeners(listenerType); [EOL]     } else { [EOL]         return super.getListeners(listenerType); [EOL]     } [EOL] } <line_num>: 2692,2700
protected JPopupMenu createPopupMenu(boolean properties, boolean save, boolean print, boolean zoom) { [EOL]     return createPopupMenu(properties, false, save, print, zoom); [EOL] } <line_num>: 2712,2715
protected JPopupMenu createPopupMenu(boolean properties, boolean copy, boolean save, boolean print, boolean zoom) { [EOL]     JPopupMenu result = new JPopupMenu("Chart:"); [EOL]     boolean separator = false; [EOL]     if (properties) { [EOL]         JMenuItem propertiesItem = new JMenuItem(localizationResources.getString("Properties...")); [EOL]         propertiesItem.setActionCommand(PROPERTIES_COMMAND); [EOL]         propertiesItem.addActionListener(this); [EOL]         result.add(propertiesItem); [EOL]         separator = true; [EOL]     } [EOL]     if (copy) { [EOL]         if (separator) { [EOL]             result.addSeparator(); [EOL]             separator = false; [EOL]         } [EOL]         JMenuItem copyItem = new JMenuItem(localizationResources.getString("Copy")); [EOL]         copyItem.setActionCommand(COPY_COMMAND); [EOL]         copyItem.addActionListener(this); [EOL]         result.add(copyItem); [EOL]         separator = !save; [EOL]     } [EOL]     if (save) { [EOL]         if (separator) { [EOL]             result.addSeparator(); [EOL]             separator = false; [EOL]         } [EOL]         JMenuItem saveItem = new JMenuItem(localizationResources.getString("Save_as...")); [EOL]         saveItem.setActionCommand(SAVE_COMMAND); [EOL]         saveItem.addActionListener(this); [EOL]         result.add(saveItem); [EOL]         separator = true; [EOL]     } [EOL]     if (print) { [EOL]         if (separator) { [EOL]             result.addSeparator(); [EOL]             separator = false; [EOL]         } [EOL]         JMenuItem printItem = new JMenuItem(localizationResources.getString("Print...")); [EOL]         printItem.setActionCommand(PRINT_COMMAND); [EOL]         printItem.addActionListener(this); [EOL]         result.add(printItem); [EOL]         separator = true; [EOL]     } [EOL]     if (zoom) { [EOL]         if (separator) { [EOL]             result.addSeparator(); [EOL]             separator = false; [EOL]         } [EOL]         JMenu zoomInMenu = new JMenu(localizationResources.getString("Zoom_In")); [EOL]         this.zoomInBothMenuItem = new JMenuItem(localizationResources.getString("All_Axes")); [EOL]         this.zoomInBothMenuItem.setActionCommand(ZOOM_IN_BOTH_COMMAND); [EOL]         this.zoomInBothMenuItem.addActionListener(this); [EOL]         zoomInMenu.add(this.zoomInBothMenuItem); [EOL]         zoomInMenu.addSeparator(); [EOL]         this.zoomInDomainMenuItem = new JMenuItem(localizationResources.getString("Domain_Axis")); [EOL]         this.zoomInDomainMenuItem.setActionCommand(ZOOM_IN_DOMAIN_COMMAND); [EOL]         this.zoomInDomainMenuItem.addActionListener(this); [EOL]         zoomInMenu.add(this.zoomInDomainMenuItem); [EOL]         this.zoomInRangeMenuItem = new JMenuItem(localizationResources.getString("Range_Axis")); [EOL]         this.zoomInRangeMenuItem.setActionCommand(ZOOM_IN_RANGE_COMMAND); [EOL]         this.zoomInRangeMenuItem.addActionListener(this); [EOL]         zoomInMenu.add(this.zoomInRangeMenuItem); [EOL]         result.add(zoomInMenu); [EOL]         JMenu zoomOutMenu = new JMenu(localizationResources.getString("Zoom_Out")); [EOL]         this.zoomOutBothMenuItem = new JMenuItem(localizationResources.getString("All_Axes")); [EOL]         this.zoomOutBothMenuItem.setActionCommand(ZOOM_OUT_BOTH_COMMAND); [EOL]         this.zoomOutBothMenuItem.addActionListener(this); [EOL]         zoomOutMenu.add(this.zoomOutBothMenuItem); [EOL]         zoomOutMenu.addSeparator(); [EOL]         this.zoomOutDomainMenuItem = new JMenuItem(localizationResources.getString("Domain_Axis")); [EOL]         this.zoomOutDomainMenuItem.setActionCommand(ZOOM_OUT_DOMAIN_COMMAND); [EOL]         this.zoomOutDomainMenuItem.addActionListener(this); [EOL]         zoomOutMenu.add(this.zoomOutDomainMenuItem); [EOL]         this.zoomOutRangeMenuItem = new JMenuItem(localizationResources.getString("Range_Axis")); [EOL]         this.zoomOutRangeMenuItem.setActionCommand(ZOOM_OUT_RANGE_COMMAND); [EOL]         this.zoomOutRangeMenuItem.addActionListener(this); [EOL]         zoomOutMenu.add(this.zoomOutRangeMenuItem); [EOL]         result.add(zoomOutMenu); [EOL]         JMenu autoRangeMenu = new JMenu(localizationResources.getString("Auto_Range")); [EOL]         this.zoomResetBothMenuItem = new JMenuItem(localizationResources.getString("All_Axes")); [EOL]         this.zoomResetBothMenuItem.setActionCommand(ZOOM_RESET_BOTH_COMMAND); [EOL]         this.zoomResetBothMenuItem.addActionListener(this); [EOL]         autoRangeMenu.add(this.zoomResetBothMenuItem); [EOL]         autoRangeMenu.addSeparator(); [EOL]         this.zoomResetDomainMenuItem = new JMenuItem(localizationResources.getString("Domain_Axis")); [EOL]         this.zoomResetDomainMenuItem.setActionCommand(ZOOM_RESET_DOMAIN_COMMAND); [EOL]         this.zoomResetDomainMenuItem.addActionListener(this); [EOL]         autoRangeMenu.add(this.zoomResetDomainMenuItem); [EOL]         this.zoomResetRangeMenuItem = new JMenuItem(localizationResources.getString("Range_Axis")); [EOL]         this.zoomResetRangeMenuItem.setActionCommand(ZOOM_RESET_RANGE_COMMAND); [EOL]         this.zoomResetRangeMenuItem.addActionListener(this); [EOL]         autoRangeMenu.add(this.zoomResetRangeMenuItem); [EOL]         result.addSeparator(); [EOL]         result.add(autoRangeMenu); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 2730,2873
protected void displayPopupMenu(int x, int y) { [EOL]     if (this.popup != null) { [EOL]         Plot plot = this.chart.getPlot(); [EOL]         boolean isDomainZoomable = false; [EOL]         boolean isRangeZoomable = false; [EOL]         if (plot instanceof Zoomable) { [EOL]             Zoomable z = (Zoomable) plot; [EOL]             isDomainZoomable = z.isDomainZoomable(); [EOL]             isRangeZoomable = z.isRangeZoomable(); [EOL]         } [EOL]         if (this.zoomInDomainMenuItem != null) { [EOL]             this.zoomInDomainMenuItem.setEnabled(isDomainZoomable); [EOL]         } [EOL]         if (this.zoomOutDomainMenuItem != null) { [EOL]             this.zoomOutDomainMenuItem.setEnabled(isDomainZoomable); [EOL]         } [EOL]         if (this.zoomResetDomainMenuItem != null) { [EOL]             this.zoomResetDomainMenuItem.setEnabled(isDomainZoomable); [EOL]         } [EOL]         if (this.zoomInRangeMenuItem != null) { [EOL]             this.zoomInRangeMenuItem.setEnabled(isRangeZoomable); [EOL]         } [EOL]         if (this.zoomOutRangeMenuItem != null) { [EOL]             this.zoomOutRangeMenuItem.setEnabled(isRangeZoomable); [EOL]         } [EOL]         if (this.zoomResetRangeMenuItem != null) { [EOL]             this.zoomResetRangeMenuItem.setEnabled(isRangeZoomable); [EOL]         } [EOL]         if (this.zoomInBothMenuItem != null) { [EOL]             this.zoomInBothMenuItem.setEnabled(isDomainZoomable && isRangeZoomable); [EOL]         } [EOL]         if (this.zoomOutBothMenuItem != null) { [EOL]             this.zoomOutBothMenuItem.setEnabled(isDomainZoomable && isRangeZoomable); [EOL]         } [EOL]         if (this.zoomResetBothMenuItem != null) { [EOL]             this.zoomResetBothMenuItem.setEnabled(isDomainZoomable && isRangeZoomable); [EOL]         } [EOL]         this.popup.show(this, x, y); [EOL]     } [EOL] } <line_num>: 2882,2934
public void updateUI() { [EOL]     if (this.popup != null) { [EOL]         SwingUtilities.updateComponentTreeUI(this.popup); [EOL]     } [EOL]     super.updateUI(); [EOL] } <line_num>: 2939,2946
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.zoomFillPaint, stream); [EOL]     SerialUtilities.writePaint(this.zoomOutlinePaint, stream); [EOL] } <line_num>: 2955,2959
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.zoomFillPaint = SerialUtilities.readPaint(stream); [EOL]     this.zoomOutlinePaint = SerialUtilities.readPaint(stream); [EOL]     this.chartMouseListeners = new EventListenerList(); [EOL]     if (this.chart != null) { [EOL]         this.chart.addChangeListener(this); [EOL]     } [EOL] } <line_num>: 2969,2983
public Shape getSelectionShape() { [EOL]     return this.selectionShape; [EOL] } <line_num>: 2994,2996
public void setSelectionShape(Shape shape) { [EOL]     this.selectionShape = shape; [EOL] } <line_num>: 3007,3009
public Paint getSelectionFillPaint() { [EOL]     return this.selectionFillPaint; [EOL] } <line_num>: 3020,3022
public void setSelectionFillPaint(Paint paint) { [EOL]     this.selectionFillPaint = paint; [EOL] } <line_num>: 3033,3035
public Paint getSelectionOutlinePaint() { [EOL]     return this.selectionOutlinePaint; [EOL] } <line_num>: 3044,3046
public void setSelectionOutlinePaint(Paint paint) { [EOL]     this.selectionOutlinePaint = paint; [EOL] } <line_num>: 3053,3055
public Stroke getSelectionOutlineStroke() { [EOL]     return this.selectionOutlineStroke; [EOL] } <line_num>: 3064,3066
public void setSelectionOutlineStroke(Stroke stroke) { [EOL]     this.selectionOutlineStroke = stroke; [EOL] } <line_num>: 3075,3077
public DatasetSelectionState getSelectionState(Dataset dataset) { [EOL]     Iterator iterator = this.selectionStates.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         DatasetAndSelection das = (DatasetAndSelection) iterator.next(); [EOL]         if (das.getDataset() == dataset) { [EOL]             return das.getSelection(); [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 3088,3098
public void putSelectionState(Dataset dataset, DatasetSelectionState state) { [EOL]     this.selectionStates.add(new DatasetAndSelection(dataset, state)); [EOL] } <line_num>: 3110,3113
public Graphics2D createGraphics2D() { [EOL]     return (Graphics2D) getGraphics().create(); [EOL] } <line_num>: 3123,3125
