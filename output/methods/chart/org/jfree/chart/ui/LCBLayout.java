public LCBLayout(int maxrows) { [EOL]     this.labelGap = 10; [EOL]     this.buttonGap = 6; [EOL]     this.vGap = 2; [EOL]     this.colWidth = new int[COLUMNS]; [EOL]     this.rowHeight = new int[maxrows]; [EOL] } <line_num>: 82,88
public Dimension preferredLayoutSize(Container parent) { [EOL]     synchronized (parent.getTreeLock()) { [EOL]         Insets insets = parent.getInsets(); [EOL]         int ncomponents = parent.getComponentCount(); [EOL]         int nrows = ncomponents / COLUMNS; [EOL]         for (int c = 0; c < COLUMNS; c++) { [EOL]             for (int r = 0; r < nrows; r++) { [EOL]                 Component component = parent.getComponent(r * COLUMNS + c); [EOL]                 Dimension d = component.getPreferredSize(); [EOL]                 if (this.colWidth[c] < d.width) { [EOL]                     this.colWidth[c] = d.width; [EOL]                 } [EOL]                 if (this.rowHeight[r] < d.height) { [EOL]                     this.rowHeight[r] = d.height; [EOL]                 } [EOL]             } [EOL]         } [EOL]         int totalHeight = this.vGap * (nrows - 1); [EOL]         for (int r = 0; r < nrows; r++) { [EOL]             totalHeight = totalHeight + this.rowHeight[r]; [EOL]         } [EOL]         int totalWidth = this.colWidth[0] + this.labelGap + this.colWidth[1] + this.buttonGap + this.colWidth[2]; [EOL]         return new Dimension(insets.left + insets.right + totalWidth + this.labelGap + this.buttonGap, insets.top + insets.bottom + totalHeight + this.vGap); [EOL]     } [EOL] } <line_num>: 97,126
public Dimension minimumLayoutSize(Container parent) { [EOL]     synchronized (parent.getTreeLock()) { [EOL]         Insets insets = parent.getInsets(); [EOL]         int ncomponents = parent.getComponentCount(); [EOL]         int nrows = ncomponents / COLUMNS; [EOL]         for (int c = 0; c < COLUMNS; c++) { [EOL]             for (int r = 0; r < nrows; r++) { [EOL]                 Component component = parent.getComponent(r * COLUMNS + c); [EOL]                 Dimension d = component.getMinimumSize(); [EOL]                 if (this.colWidth[c] < d.width) { [EOL]                     this.colWidth[c] = d.width; [EOL]                 } [EOL]                 if (this.rowHeight[r] < d.height) { [EOL]                     this.rowHeight[r] = d.height; [EOL]                 } [EOL]             } [EOL]         } [EOL]         int totalHeight = this.vGap * (nrows - 1); [EOL]         for (int r = 0; r < nrows; r++) { [EOL]             totalHeight = totalHeight + this.rowHeight[r]; [EOL]         } [EOL]         int totalWidth = this.colWidth[0] + this.labelGap + this.colWidth[1] + this.buttonGap + this.colWidth[2]; [EOL]         return new Dimension(insets.left + insets.right + totalWidth + this.labelGap + this.buttonGap, insets.top + insets.bottom + totalHeight + this.vGap); [EOL]     } [EOL] } <line_num>: 135,164
public void layoutContainer(Container parent) { [EOL]     synchronized (parent.getTreeLock()) { [EOL]         Insets insets = parent.getInsets(); [EOL]         int ncomponents = parent.getComponentCount(); [EOL]         int nrows = ncomponents / COLUMNS; [EOL]         for (int c = 0; c < COLUMNS; c++) { [EOL]             for (int r = 0; r < nrows; r++) { [EOL]                 Component component = parent.getComponent(r * COLUMNS + c); [EOL]                 Dimension d = component.getPreferredSize(); [EOL]                 if (this.colWidth[c] < d.width) { [EOL]                     this.colWidth[c] = d.width; [EOL]                 } [EOL]                 if (this.rowHeight[r] < d.height) { [EOL]                     this.rowHeight[r] = d.height; [EOL]                 } [EOL]             } [EOL]         } [EOL]         int totalHeight = this.vGap * (nrows - 1); [EOL]         for (int r = 0; r < nrows; r++) { [EOL]             totalHeight = totalHeight + this.rowHeight[r]; [EOL]         } [EOL]         int totalWidth = this.colWidth[0] + this.colWidth[1] + this.colWidth[2]; [EOL]         int available = parent.getWidth() - insets.left - insets.right - this.labelGap - this.buttonGap; [EOL]         this.colWidth[1] = this.colWidth[1] + (available - totalWidth); [EOL]         int x = insets.left; [EOL]         for (int c = 0; c < COLUMNS; c++) { [EOL]             int y = insets.top; [EOL]             for (int r = 0; r < nrows; r++) { [EOL]                 int i = r * COLUMNS + c; [EOL]                 if (i < ncomponents) { [EOL]                     Component component = parent.getComponent(i); [EOL]                     Dimension d = component.getPreferredSize(); [EOL]                     int h = d.height; [EOL]                     int adjust = (this.rowHeight[r] - h) / 2; [EOL]                     parent.getComponent(i).setBounds(x, y + adjust, this.colWidth[c], h); [EOL]                 } [EOL]                 y = y + this.rowHeight[r] + this.vGap; [EOL]             } [EOL]             x = x + this.colWidth[c]; [EOL]             if (c == 0) { [EOL]                 x = x + this.labelGap; [EOL]             } [EOL]             if (c == 1) { [EOL]                 x = x + this.buttonGap; [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 171,228
public void addLayoutComponent(Component comp) { [EOL] } <line_num>: 235,237
public void removeLayoutComponent(Component comp) { [EOL] } <line_num>: 244,246
public void addLayoutComponent(String name, Component comp) { [EOL] } <line_num>: 254,256
public void removeLayoutComponent(String name, Component comp) { [EOL] } <line_num>: 264,266
