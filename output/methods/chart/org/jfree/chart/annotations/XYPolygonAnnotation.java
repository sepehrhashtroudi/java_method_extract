public XYPolygonAnnotation(double[] polygon) { [EOL]     this(polygon, new BasicStroke(1.0f), Color.black); [EOL] } <line_num>: 100,102
public XYPolygonAnnotation(double[] polygon, Stroke stroke, Paint outlinePaint) { [EOL]     this(polygon, stroke, outlinePaint, null); [EOL] } <line_num>: 116,119
public XYPolygonAnnotation(double[] polygon, Stroke stroke, Paint outlinePaint, Paint fillPaint) { [EOL]     super(); [EOL]     if (polygon == null) { [EOL]         throw new IllegalArgumentException("Null 'polygon' argument."); [EOL]     } [EOL]     if (polygon.length % 2 != 0) { [EOL]         throw new IllegalArgumentException("The 'polygon' array must " + "contain an even number of items."); [EOL]     } [EOL]     this.polygon = (double[]) polygon.clone(); [EOL]     this.stroke = stroke; [EOL]     this.outlinePaint = outlinePaint; [EOL]     this.fillPaint = fillPaint; [EOL] } <line_num>: 134,149
public double[] getPolygonCoordinates() { [EOL]     return (double[]) this.polygon.clone(); [EOL] } <line_num>: 160,162
public Paint getFillPaint() { [EOL]     return this.fillPaint; [EOL] } <line_num>: 171,173
public Stroke getOutlineStroke() { [EOL]     return this.stroke; [EOL] } <line_num>: 182,184
public Paint getOutlinePaint() { [EOL]     return this.outlinePaint; [EOL] } <line_num>: 193,195
public void draw(Graphics2D g2, XYPlot plot, Rectangle2D dataArea, ValueAxis domainAxis, ValueAxis rangeAxis, int rendererIndex, PlotRenderingInfo info) { [EOL]     if (this.polygon.length < 4) { [EOL]         return; [EOL]     } [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     RectangleEdge domainEdge = Plot.resolveDomainAxisLocation(plot.getDomainAxisLocation(), orientation); [EOL]     RectangleEdge rangeEdge = Plot.resolveRangeAxisLocation(plot.getRangeAxisLocation(), orientation); [EOL]     GeneralPath area = new GeneralPath(); [EOL]     double x = domainAxis.valueToJava2D(this.polygon[0], dataArea, domainEdge); [EOL]     double y = rangeAxis.valueToJava2D(this.polygon[1], dataArea, rangeEdge); [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         area.moveTo((float) y, (float) x); [EOL]         for (int i = 2; i < this.polygon.length; i += 2) { [EOL]             x = domainAxis.valueToJava2D(this.polygon[i], dataArea, domainEdge); [EOL]             y = rangeAxis.valueToJava2D(this.polygon[i + 1], dataArea, rangeEdge); [EOL]             area.lineTo((float) y, (float) x); [EOL]         } [EOL]         area.closePath(); [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         area.moveTo((float) x, (float) y); [EOL]         for (int i = 2; i < this.polygon.length; i += 2) { [EOL]             x = domainAxis.valueToJava2D(this.polygon[i], dataArea, domainEdge); [EOL]             y = rangeAxis.valueToJava2D(this.polygon[i + 1], dataArea, rangeEdge); [EOL]             area.lineTo((float) x, (float) y); [EOL]         } [EOL]         area.closePath(); [EOL]     } [EOL]     if (this.fillPaint != null) { [EOL]         g2.setPaint(this.fillPaint); [EOL]         g2.fill(area); [EOL]     } [EOL]     if (this.stroke != null && this.outlinePaint != null) { [EOL]         g2.setPaint(this.outlinePaint); [EOL]         g2.setStroke(this.stroke); [EOL]         g2.draw(area); [EOL]     } [EOL]     addEntity(info, area, rendererIndex, getToolTipText(), getURL()); [EOL] } <line_num>: 209,264
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!super.equals(obj)) { [EOL]         return false; [EOL]     } [EOL]     if (!(obj instanceof XYPolygonAnnotation)) { [EOL]         return false; [EOL]     } [EOL]     XYPolygonAnnotation that = (XYPolygonAnnotation) obj; [EOL]     if (!Arrays.equals(this.polygon, that.polygon)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.stroke, that.stroke)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.fillPaint, that.fillPaint)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 273,299
public int hashCode() { [EOL]     int result = 193; [EOL]     result = 37 * result + HashUtilities.hashCodeForDoubleArray(this.polygon); [EOL]     result = 37 * result + HashUtilities.hashCodeForPaint(this.fillPaint); [EOL]     result = 37 * result + HashUtilities.hashCodeForPaint(this.outlinePaint); [EOL]     if (this.stroke != null) { [EOL]         result = 37 * result + this.stroke.hashCode(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 306,317
public Object clone() throws CloneNotSupportedException { [EOL]     return super.clone(); [EOL] } <line_num>: 327,329
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writeStroke(this.stroke, stream); [EOL]     SerialUtilities.writePaint(this.outlinePaint, stream); [EOL]     SerialUtilities.writePaint(this.fillPaint, stream); [EOL] } <line_num>: 338,343
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.stroke = SerialUtilities.readStroke(stream); [EOL]     this.outlinePaint = SerialUtilities.readPaint(stream); [EOL]     this.fillPaint = SerialUtilities.readPaint(stream); [EOL] } <line_num>: 353,359
