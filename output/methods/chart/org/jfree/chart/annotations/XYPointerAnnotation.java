public XYPointerAnnotation(String label, double x, double y, double angle) { [EOL]     super(label, x, y); [EOL]     this.angle = angle; [EOL]     this.tipRadius = DEFAULT_TIP_RADIUS; [EOL]     this.baseRadius = DEFAULT_BASE_RADIUS; [EOL]     this.arrowLength = DEFAULT_ARROW_LENGTH; [EOL]     this.arrowWidth = DEFAULT_ARROW_WIDTH; [EOL]     this.labelOffset = DEFAULT_LABEL_OFFSET; [EOL]     this.arrowStroke = new BasicStroke(1.0f); [EOL]     this.arrowPaint = Color.black; [EOL] } <line_num>: 155,167
public double getAngle() { [EOL]     return this.angle; [EOL] } <line_num>: 176,178
public void setAngle(double angle) { [EOL]     this.angle = angle; [EOL]     fireAnnotationChanged(); [EOL] } <line_num>: 188,191
public double getTipRadius() { [EOL]     return this.tipRadius; [EOL] } <line_num>: 200,202
public void setTipRadius(double radius) { [EOL]     this.tipRadius = radius; [EOL]     fireAnnotationChanged(); [EOL] } <line_num>: 212,215
public double getBaseRadius() { [EOL]     return this.baseRadius; [EOL] } <line_num>: 224,226
public void setBaseRadius(double radius) { [EOL]     this.baseRadius = radius; [EOL]     fireAnnotationChanged(); [EOL] } <line_num>: 236,239
public double getLabelOffset() { [EOL]     return this.labelOffset; [EOL] } <line_num>: 248,250
public void setLabelOffset(double offset) { [EOL]     this.labelOffset = offset; [EOL]     fireAnnotationChanged(); [EOL] } <line_num>: 261,264
public double getArrowLength() { [EOL]     return this.arrowLength; [EOL] } <line_num>: 273,275
public void setArrowLength(double length) { [EOL]     this.arrowLength = length; [EOL]     fireAnnotationChanged(); [EOL] } <line_num>: 285,288
public double getArrowWidth() { [EOL]     return this.arrowWidth; [EOL] } <line_num>: 297,299
public void setArrowWidth(double width) { [EOL]     this.arrowWidth = width; [EOL]     fireAnnotationChanged(); [EOL] } <line_num>: 309,312
public Stroke getArrowStroke() { [EOL]     return this.arrowStroke; [EOL] } <line_num>: 321,323
public void setArrowStroke(Stroke stroke) { [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' not permitted."); [EOL]     } [EOL]     this.arrowStroke = stroke; [EOL]     fireAnnotationChanged(); [EOL] } <line_num>: 333,339
public Paint getArrowPaint() { [EOL]     return this.arrowPaint; [EOL] } <line_num>: 348,350
public void setArrowPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.arrowPaint = paint; [EOL]     fireAnnotationChanged(); [EOL] } <line_num>: 360,366
public void draw(Graphics2D g2, XYPlot plot, Rectangle2D dataArea, ValueAxis domainAxis, ValueAxis rangeAxis, int rendererIndex, PlotRenderingInfo info) { [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     RectangleEdge domainEdge = Plot.resolveDomainAxisLocation(plot.getDomainAxisLocation(), orientation); [EOL]     RectangleEdge rangeEdge = Plot.resolveRangeAxisLocation(plot.getRangeAxisLocation(), orientation); [EOL]     double j2DX = domainAxis.valueToJava2D(getX(), dataArea, domainEdge); [EOL]     double j2DY = rangeAxis.valueToJava2D(getY(), dataArea, rangeEdge); [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         double temp = j2DX; [EOL]         j2DX = j2DY; [EOL]         j2DY = temp; [EOL]     } [EOL]     double startX = j2DX + Math.cos(this.angle) * this.baseRadius; [EOL]     double startY = j2DY + Math.sin(this.angle) * this.baseRadius; [EOL]     double endX = j2DX + Math.cos(this.angle) * this.tipRadius; [EOL]     double endY = j2DY + Math.sin(this.angle) * this.tipRadius; [EOL]     double arrowBaseX = endX + Math.cos(this.angle) * this.arrowLength; [EOL]     double arrowBaseY = endY + Math.sin(this.angle) * this.arrowLength; [EOL]     double arrowLeftX = arrowBaseX + Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth; [EOL]     double arrowLeftY = arrowBaseY + Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth; [EOL]     double arrowRightX = arrowBaseX - Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth; [EOL]     double arrowRightY = arrowBaseY - Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth; [EOL]     GeneralPath arrow = new GeneralPath(); [EOL]     arrow.moveTo((float) endX, (float) endY); [EOL]     arrow.lineTo((float) arrowLeftX, (float) arrowLeftY); [EOL]     arrow.lineTo((float) arrowRightX, (float) arrowRightY); [EOL]     arrow.closePath(); [EOL]     g2.setStroke(this.arrowStroke); [EOL]     g2.setPaint(this.arrowPaint); [EOL]     Line2D line = new Line2D.Double(startX, startY, arrowBaseX, arrowBaseY); [EOL]     g2.draw(line); [EOL]     g2.fill(arrow); [EOL]     double labelX = j2DX + Math.cos(this.angle) * (this.baseRadius + this.labelOffset); [EOL]     double labelY = j2DY + Math.sin(this.angle) * (this.baseRadius + this.labelOffset); [EOL]     g2.setFont(getFont()); [EOL]     Shape hotspot = TextUtilities.calculateRotatedStringBounds(getText(), g2, (float) labelX, (float) labelY, getTextAnchor(), getRotationAngle(), getRotationAnchor()); [EOL]     if (getBackgroundPaint() != null) { [EOL]         g2.setPaint(getBackgroundPaint()); [EOL]         g2.fill(hotspot); [EOL]     } [EOL]     g2.setPaint(getPaint()); [EOL]     TextUtilities.drawRotatedString(getText(), g2, (float) labelX, (float) labelY, getTextAnchor(), getRotationAngle(), getRotationAnchor()); [EOL]     if (isOutlineVisible()) { [EOL]         g2.setStroke(getOutlineStroke()); [EOL]         g2.setPaint(getOutlinePaint()); [EOL]         g2.draw(hotspot); [EOL]     } [EOL]     String toolTip = getToolTipText(); [EOL]     String url = getURL(); [EOL]     if (toolTip != null || url != null) { [EOL]         addEntity(info, hotspot, rendererIndex, toolTip, url); [EOL]     } [EOL] } <line_num>: 379,456
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof XYPointerAnnotation)) { [EOL]         return false; [EOL]     } [EOL]     XYPointerAnnotation that = (XYPointerAnnotation) obj; [EOL]     if (this.angle != that.angle) { [EOL]         return false; [EOL]     } [EOL]     if (this.tipRadius != that.tipRadius) { [EOL]         return false; [EOL]     } [EOL]     if (this.baseRadius != that.baseRadius) { [EOL]         return false; [EOL]     } [EOL]     if (this.arrowLength != that.arrowLength) { [EOL]         return false; [EOL]     } [EOL]     if (this.arrowWidth != that.arrowWidth) { [EOL]         return false; [EOL]     } [EOL]     if (!this.arrowPaint.equals(that.arrowPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.arrowStroke, that.arrowStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (this.labelOffset != that.labelOffset) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 465,498
public int hashCode() { [EOL]     int result = super.hashCode(); [EOL]     long temp = Double.doubleToLongBits(this.angle); [EOL]     result = 37 * result + (int) (temp ^ (temp >>> 32)); [EOL]     temp = Double.doubleToLongBits(this.tipRadius); [EOL]     result = 37 * result + (int) (temp ^ (temp >>> 32)); [EOL]     temp = Double.doubleToLongBits(this.baseRadius); [EOL]     result = 37 * result + (int) (temp ^ (temp >>> 32)); [EOL]     temp = Double.doubleToLongBits(this.arrowLength); [EOL]     result = 37 * result + (int) (temp ^ (temp >>> 32)); [EOL]     temp = Double.doubleToLongBits(this.arrowWidth); [EOL]     result = 37 * result + (int) (temp ^ (temp >>> 32)); [EOL]     result = result * 37 + HashUtilities.hashCodeForPaint(this.arrowPaint); [EOL]     result = result * 37 + this.arrowStroke.hashCode(); [EOL]     temp = Double.doubleToLongBits(this.labelOffset); [EOL]     result = 37 * result + (int) (temp ^ (temp >>> 32)); [EOL]     return result; [EOL] } <line_num>: 505,522
public Object clone() throws CloneNotSupportedException { [EOL]     return super.clone(); [EOL] } <line_num>: 531,533
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.arrowPaint, stream); [EOL]     SerialUtilities.writeStroke(this.arrowStroke, stream); [EOL] } <line_num>: 542,546
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.arrowPaint = SerialUtilities.readPaint(stream); [EOL]     this.arrowStroke = SerialUtilities.readStroke(stream); [EOL] } <line_num>: 556,561
