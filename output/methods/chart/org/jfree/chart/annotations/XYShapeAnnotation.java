public XYShapeAnnotation(Shape shape) { [EOL]     this(shape, new BasicStroke(1.0f), Color.black); [EOL] } <line_num>: 112,114
public XYShapeAnnotation(Shape shape, Stroke stroke, Paint outlinePaint) { [EOL]     this(shape, stroke, outlinePaint, null); [EOL] } <line_num>: 124,126
public XYShapeAnnotation(Shape shape, Stroke stroke, Paint outlinePaint, Paint fillPaint) { [EOL]     super(); [EOL]     if (shape == null) { [EOL]         throw new IllegalArgumentException("Null 'shape' argument."); [EOL]     } [EOL]     this.shape = shape; [EOL]     this.stroke = stroke; [EOL]     this.outlinePaint = outlinePaint; [EOL]     this.fillPaint = fillPaint; [EOL] } <line_num>: 137,147
public void draw(Graphics2D g2, XYPlot plot, Rectangle2D dataArea, ValueAxis domainAxis, ValueAxis rangeAxis, int rendererIndex, PlotRenderingInfo info) { [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     RectangleEdge domainEdge = Plot.resolveDomainAxisLocation(plot.getDomainAxisLocation(), orientation); [EOL]     RectangleEdge rangeEdge = Plot.resolveRangeAxisLocation(plot.getRangeAxisLocation(), orientation); [EOL]     Rectangle2D bounds = this.shape.getBounds2D(); [EOL]     double x0 = bounds.getMinX(); [EOL]     double x1 = bounds.getMaxX(); [EOL]     double xx0 = domainAxis.valueToJava2D(x0, dataArea, domainEdge); [EOL]     double xx1 = domainAxis.valueToJava2D(x1, dataArea, domainEdge); [EOL]     double m00 = (xx1 - xx0) / (x1 - x0); [EOL]     double m02 = xx0 - x0 * m00; [EOL]     double y0 = bounds.getMaxY(); [EOL]     double y1 = bounds.getMinY(); [EOL]     double yy0 = rangeAxis.valueToJava2D(y0, dataArea, rangeEdge); [EOL]     double yy1 = rangeAxis.valueToJava2D(y1, dataArea, rangeEdge); [EOL]     double m11 = (yy1 - yy0) / (y1 - y0); [EOL]     double m12 = yy0 - m11 * y0; [EOL]     Shape s = null; [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         AffineTransform t1 = new AffineTransform(0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f); [EOL]         AffineTransform t2 = new AffineTransform(m11, 0.0f, 0.0f, m00, m12, m02); [EOL]         s = t1.createTransformedShape(this.shape); [EOL]         s = t2.createTransformedShape(s); [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         AffineTransform t = new AffineTransform(m00, 0, 0, m11, m02, m12); [EOL]         s = t.createTransformedShape(this.shape); [EOL]     } [EOL]     if (this.fillPaint != null) { [EOL]         g2.setPaint(this.fillPaint); [EOL]         g2.fill(s); [EOL]     } [EOL]     if (this.stroke != null && this.outlinePaint != null) { [EOL]         g2.setPaint(this.outlinePaint); [EOL]         g2.setStroke(this.stroke); [EOL]         g2.draw(s); [EOL]     } [EOL]     addEntity(info, s, rendererIndex, getToolTipText(), getURL()); [EOL] } <line_num>: 161,216
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!super.equals(obj)) { [EOL]         return false; [EOL]     } [EOL]     if (!(obj instanceof XYShapeAnnotation)) { [EOL]         return false; [EOL]     } [EOL]     XYShapeAnnotation that = (XYShapeAnnotation) obj; [EOL]     if (!this.shape.equals(that.shape)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.stroke, that.stroke)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.fillPaint, that.fillPaint)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 225,251
public int hashCode() { [EOL]     int result = 193; [EOL]     result = 37 * result + this.shape.hashCode(); [EOL]     if (this.stroke != null) { [EOL]         result = 37 * result + this.stroke.hashCode(); [EOL]     } [EOL]     result = 37 * result + HashUtilities.hashCodeForPaint(this.outlinePaint); [EOL]     result = 37 * result + HashUtilities.hashCodeForPaint(this.fillPaint); [EOL]     return result; [EOL] } <line_num>: 258,268
public Object clone() throws CloneNotSupportedException { [EOL]     return super.clone(); [EOL] } <line_num>: 277,279
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writeShape(this.shape, stream); [EOL]     SerialUtilities.writeStroke(this.stroke, stream); [EOL]     SerialUtilities.writePaint(this.outlinePaint, stream); [EOL]     SerialUtilities.writePaint(this.fillPaint, stream); [EOL] } <line_num>: 288,294
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.shape = SerialUtilities.readShape(stream); [EOL]     this.stroke = SerialUtilities.readStroke(stream); [EOL]     this.outlinePaint = SerialUtilities.readPaint(stream); [EOL]     this.fillPaint = SerialUtilities.readPaint(stream); [EOL] } <line_num>: 304,311
