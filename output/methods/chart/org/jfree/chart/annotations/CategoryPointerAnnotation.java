public CategoryPointerAnnotation(String label, Comparable key, double value, double angle) { [EOL]     super(label, key, value); [EOL]     this.angle = angle; [EOL]     this.tipRadius = DEFAULT_TIP_RADIUS; [EOL]     this.baseRadius = DEFAULT_BASE_RADIUS; [EOL]     this.arrowLength = DEFAULT_ARROW_LENGTH; [EOL]     this.arrowWidth = DEFAULT_ARROW_WIDTH; [EOL]     this.labelOffset = DEFAULT_LABEL_OFFSET; [EOL]     this.arrowStroke = new BasicStroke(1.0f); [EOL]     this.arrowPaint = Color.black; [EOL] } <line_num>: 146,159
public double getAngle() { [EOL]     return this.angle; [EOL] } <line_num>: 168,170
public void setAngle(double angle) { [EOL]     this.angle = angle; [EOL]     fireAnnotationChanged(); [EOL] } <line_num>: 180,183
public double getTipRadius() { [EOL]     return this.tipRadius; [EOL] } <line_num>: 192,194
public void setTipRadius(double radius) { [EOL]     this.tipRadius = radius; [EOL]     fireAnnotationChanged(); [EOL] } <line_num>: 204,207
public double getBaseRadius() { [EOL]     return this.baseRadius; [EOL] } <line_num>: 216,218
public void setBaseRadius(double radius) { [EOL]     this.baseRadius = radius; [EOL]     fireAnnotationChanged(); [EOL] } <line_num>: 228,231
public double getLabelOffset() { [EOL]     return this.labelOffset; [EOL] } <line_num>: 240,242
public void setLabelOffset(double offset) { [EOL]     this.labelOffset = offset; [EOL]     fireAnnotationChanged(); [EOL] } <line_num>: 253,256
public double getArrowLength() { [EOL]     return this.arrowLength; [EOL] } <line_num>: 265,267
public void setArrowLength(double length) { [EOL]     this.arrowLength = length; [EOL] } <line_num>: 277,279
public double getArrowWidth() { [EOL]     return this.arrowWidth; [EOL] } <line_num>: 288,290
public void setArrowWidth(double width) { [EOL]     this.arrowWidth = width; [EOL]     fireAnnotationChanged(); [EOL] } <line_num>: 300,303
public Stroke getArrowStroke() { [EOL]     return this.arrowStroke; [EOL] } <line_num>: 312,314
public void setArrowStroke(Stroke stroke) { [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' not permitted."); [EOL]     } [EOL]     this.arrowStroke = stroke; [EOL]     fireAnnotationChanged(); [EOL] } <line_num>: 324,330
public Paint getArrowPaint() { [EOL]     return this.arrowPaint; [EOL] } <line_num>: 339,341
public void setArrowPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.arrowPaint = paint; [EOL]     fireAnnotationChanged(); [EOL] } <line_num>: 351,357
public void draw(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea, CategoryAxis domainAxis, ValueAxis rangeAxis) { [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     RectangleEdge domainEdge = Plot.resolveDomainAxisLocation(plot.getDomainAxisLocation(), orientation); [EOL]     RectangleEdge rangeEdge = Plot.resolveRangeAxisLocation(plot.getRangeAxisLocation(), orientation); [EOL]     CategoryDataset dataset = plot.getDataset(); [EOL]     int catIndex = dataset.getColumnIndex(getCategory()); [EOL]     int catCount = dataset.getColumnCount(); [EOL]     double j2DX = domainAxis.getCategoryMiddle(catIndex, catCount, dataArea, domainEdge); [EOL]     double j2DY = rangeAxis.valueToJava2D(getValue(), dataArea, rangeEdge); [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         double temp = j2DX; [EOL]         j2DX = j2DY; [EOL]         j2DY = temp; [EOL]     } [EOL]     double startX = j2DX + Math.cos(this.angle) * this.baseRadius; [EOL]     double startY = j2DY + Math.sin(this.angle) * this.baseRadius; [EOL]     double endX = j2DX + Math.cos(this.angle) * this.tipRadius; [EOL]     double endY = j2DY + Math.sin(this.angle) * this.tipRadius; [EOL]     double arrowBaseX = endX + Math.cos(this.angle) * this.arrowLength; [EOL]     double arrowBaseY = endY + Math.sin(this.angle) * this.arrowLength; [EOL]     double arrowLeftX = arrowBaseX + Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth; [EOL]     double arrowLeftY = arrowBaseY + Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth; [EOL]     double arrowRightX = arrowBaseX - Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth; [EOL]     double arrowRightY = arrowBaseY - Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth; [EOL]     GeneralPath arrow = new GeneralPath(); [EOL]     arrow.moveTo((float) endX, (float) endY); [EOL]     arrow.lineTo((float) arrowLeftX, (float) arrowLeftY); [EOL]     arrow.lineTo((float) arrowRightX, (float) arrowRightY); [EOL]     arrow.closePath(); [EOL]     g2.setStroke(this.arrowStroke); [EOL]     g2.setPaint(this.arrowPaint); [EOL]     Line2D line = new Line2D.Double(startX, startY, endX, endY); [EOL]     g2.draw(line); [EOL]     g2.fill(arrow); [EOL]     g2.setFont(getFont()); [EOL]     g2.setPaint(getPaint()); [EOL]     double labelX = j2DX + Math.cos(this.angle) * (this.baseRadius + this.labelOffset); [EOL]     double labelY = j2DY + Math.sin(this.angle) * (this.baseRadius + this.labelOffset); [EOL]     TextUtilities.drawAlignedString(getText(), g2, (float) labelX, (float) labelY, getTextAnchor()); [EOL] } <line_num>: 368,429
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof CategoryPointerAnnotation)) { [EOL]         return false; [EOL]     } [EOL]     if (!super.equals(obj)) { [EOL]         return false; [EOL]     } [EOL]     CategoryPointerAnnotation that = (CategoryPointerAnnotation) obj; [EOL]     if (this.angle != that.angle) { [EOL]         return false; [EOL]     } [EOL]     if (this.tipRadius != that.tipRadius) { [EOL]         return false; [EOL]     } [EOL]     if (this.baseRadius != that.baseRadius) { [EOL]         return false; [EOL]     } [EOL]     if (this.arrowLength != that.arrowLength) { [EOL]         return false; [EOL]     } [EOL]     if (this.arrowWidth != that.arrowWidth) { [EOL]         return false; [EOL]     } [EOL]     if (!this.arrowPaint.equals(that.arrowPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.arrowStroke, that.arrowStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (this.labelOffset != that.labelOffset) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 438,475
public int hashCode() { [EOL]     int result = 193; [EOL]     long temp = Double.doubleToLongBits(this.angle); [EOL]     result = 37 * result + (int) (temp ^ (temp >>> 32)); [EOL]     temp = Double.doubleToLongBits(this.tipRadius); [EOL]     result = 37 * result + (int) (temp ^ (temp >>> 32)); [EOL]     temp = Double.doubleToLongBits(this.baseRadius); [EOL]     result = 37 * result + (int) (temp ^ (temp >>> 32)); [EOL]     temp = Double.doubleToLongBits(this.arrowLength); [EOL]     result = 37 * result + (int) (temp ^ (temp >>> 32)); [EOL]     temp = Double.doubleToLongBits(this.arrowWidth); [EOL]     result = 37 * result + (int) (temp ^ (temp >>> 32)); [EOL]     result = 37 * result + HashUtilities.hashCodeForPaint(this.arrowPaint); [EOL]     result = 37 * result + this.arrowStroke.hashCode(); [EOL]     temp = Double.doubleToLongBits(this.labelOffset); [EOL]     result = 37 * result + (int) (temp ^ (temp >>> 32)); [EOL]     return result; [EOL] } <line_num>: 482,499
public Object clone() throws CloneNotSupportedException { [EOL]     return super.clone(); [EOL] } <line_num>: 508,510
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.arrowPaint, stream); [EOL]     SerialUtilities.writeStroke(this.arrowStroke, stream); [EOL] } <line_num>: 519,523
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.arrowPaint = SerialUtilities.readPaint(stream); [EOL]     this.arrowStroke = SerialUtilities.readStroke(stream); [EOL] } <line_num>: 533,538
