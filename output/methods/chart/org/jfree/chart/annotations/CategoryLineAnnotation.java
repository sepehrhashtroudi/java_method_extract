public CategoryLineAnnotation(Comparable category1, double value1, Comparable category2, double value2, Paint paint, Stroke stroke) { [EOL]     super(); [EOL]     if (category1 == null) { [EOL]         throw new IllegalArgumentException("Null 'category1' argument."); [EOL]     } [EOL]     if (category2 == null) { [EOL]         throw new IllegalArgumentException("Null 'category2' argument."); [EOL]     } [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' argument."); [EOL]     } [EOL]     this.category1 = category1; [EOL]     this.value1 = value1; [EOL]     this.category2 = category2; [EOL]     this.value2 = value2; [EOL]     this.paint = paint; [EOL]     this.stroke = stroke; [EOL] } <line_num>: 114,136
public Comparable getCategory1() { [EOL]     return this.category1; [EOL] } <line_num>: 145,147
public void setCategory1(Comparable category) { [EOL]     if (category == null) { [EOL]         throw new IllegalArgumentException("Null 'category' argument."); [EOL]     } [EOL]     this.category1 = category; [EOL]     fireAnnotationChanged(); [EOL] } <line_num>: 157,163
public double getValue1() { [EOL]     return this.value1; [EOL] } <line_num>: 172,174
public void setValue1(double value) { [EOL]     this.value1 = value; [EOL]     fireAnnotationChanged(); [EOL] } <line_num>: 184,187
public Comparable getCategory2() { [EOL]     return this.category2; [EOL] } <line_num>: 196,198
public void setCategory2(Comparable category) { [EOL]     if (category == null) { [EOL]         throw new IllegalArgumentException("Null 'category' argument."); [EOL]     } [EOL]     this.category2 = category; [EOL]     fireAnnotationChanged(); [EOL] } <line_num>: 208,214
public double getValue2() { [EOL]     return this.value2; [EOL] } <line_num>: 223,225
public void setValue2(double value) { [EOL]     this.value2 = value; [EOL]     fireAnnotationChanged(); [EOL] } <line_num>: 235,238
public Paint getPaint() { [EOL]     return this.paint; [EOL] } <line_num>: 247,249
public void setPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.paint = paint; [EOL]     fireAnnotationChanged(); [EOL] } <line_num>: 259,265
public Stroke getStroke() { [EOL]     return this.stroke; [EOL] } <line_num>: 274,276
public void setStroke(Stroke stroke) { [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' argument."); [EOL]     } [EOL]     this.stroke = stroke; [EOL]     fireAnnotationChanged(); [EOL] } <line_num>: 286,292
public void draw(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea, CategoryAxis domainAxis, ValueAxis rangeAxis, int rendererIndex, PlotRenderingInfo info) { [EOL]     CategoryDataset dataset = plot.getDataset(); [EOL]     int catIndex1 = dataset.getColumnIndex(this.category1); [EOL]     int catIndex2 = dataset.getColumnIndex(this.category2); [EOL]     int catCount = dataset.getColumnCount(); [EOL]     double lineX1 = 0.0f; [EOL]     double lineY1 = 0.0f; [EOL]     double lineX2 = 0.0f; [EOL]     double lineY2 = 0.0f; [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     RectangleEdge domainEdge = Plot.resolveDomainAxisLocation(plot.getDomainAxisLocation(), orientation); [EOL]     RectangleEdge rangeEdge = Plot.resolveRangeAxisLocation(plot.getRangeAxisLocation(), orientation); [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         lineY1 = domainAxis.getCategoryJava2DCoordinate(CategoryAnchor.MIDDLE, catIndex1, catCount, dataArea, domainEdge); [EOL]         lineX1 = rangeAxis.valueToJava2D(this.value1, dataArea, rangeEdge); [EOL]         lineY2 = domainAxis.getCategoryJava2DCoordinate(CategoryAnchor.MIDDLE, catIndex2, catCount, dataArea, domainEdge); [EOL]         lineX2 = rangeAxis.valueToJava2D(this.value2, dataArea, rangeEdge); [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         lineX1 = domainAxis.getCategoryJava2DCoordinate(CategoryAnchor.MIDDLE, catIndex1, catCount, dataArea, domainEdge); [EOL]         lineY1 = rangeAxis.valueToJava2D(this.value1, dataArea, rangeEdge); [EOL]         lineX2 = domainAxis.getCategoryJava2DCoordinate(CategoryAnchor.MIDDLE, catIndex2, catCount, dataArea, domainEdge); [EOL]         lineY2 = rangeAxis.valueToJava2D(this.value2, dataArea, rangeEdge); [EOL]     } [EOL]     g2.setPaint(this.paint); [EOL]     g2.setStroke(this.stroke); [EOL]     g2.drawLine((int) lineX1, (int) lineY1, (int) lineX2, (int) lineY2); [EOL] } <line_num>: 305,347
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof CategoryLineAnnotation)) { [EOL]         return false; [EOL]     } [EOL]     CategoryLineAnnotation that = (CategoryLineAnnotation) obj; [EOL]     if (!this.category1.equals(that.getCategory1())) { [EOL]         return false; [EOL]     } [EOL]     if (this.value1 != that.getValue1()) { [EOL]         return false; [EOL]     } [EOL]     if (!this.category2.equals(that.getCategory2())) { [EOL]         return false; [EOL]     } [EOL]     if (this.value2 != that.getValue2()) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.paint, that.paint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.stroke, that.stroke)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 356,383
public int hashCode() { [EOL]     int result = 193; [EOL]     result = 37 * result + this.category1.hashCode(); [EOL]     long temp = Double.doubleToLongBits(this.value1); [EOL]     result = 37 * result + (int) (temp ^ (temp >>> 32)); [EOL]     result = 37 * result + this.category2.hashCode(); [EOL]     temp = Double.doubleToLongBits(this.value2); [EOL]     result = 37 * result + (int) (temp ^ (temp >>> 32)); [EOL]     result = 37 * result + HashUtilities.hashCodeForPaint(this.paint); [EOL]     result = 37 * result + this.stroke.hashCode(); [EOL]     return result; [EOL] } <line_num>: 390,401
public Object clone() throws CloneNotSupportedException { [EOL]     return super.clone(); [EOL] } <line_num>: 411,413
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.paint, stream); [EOL]     SerialUtilities.writeStroke(this.stroke, stream); [EOL] } <line_num>: 422,426
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.paint = SerialUtilities.readPaint(stream); [EOL]     this.stroke = SerialUtilities.readStroke(stream); [EOL] } <line_num>: 436,441
