public XYLineAnnotation(double x1, double y1, double x2, double y2) { [EOL]     this(x1, y1, x2, y2, new BasicStroke(1.0f), Color.black); [EOL] } <line_num>: 115,117
public XYLineAnnotation(double x1, double y1, double x2, double y2, Stroke stroke, Paint paint) { [EOL]     super(); [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' argument."); [EOL]     } [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.x1 = x1; [EOL]     this.y1 = y1; [EOL]     this.x2 = x2; [EOL]     this.y2 = y2; [EOL]     this.stroke = stroke; [EOL]     this.paint = paint; [EOL] } <line_num>: 131,148
public void draw(Graphics2D g2, XYPlot plot, Rectangle2D dataArea, ValueAxis domainAxis, ValueAxis rangeAxis, int rendererIndex, PlotRenderingInfo info) { [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     RectangleEdge domainEdge = Plot.resolveDomainAxisLocation(plot.getDomainAxisLocation(), orientation); [EOL]     RectangleEdge rangeEdge = Plot.resolveRangeAxisLocation(plot.getRangeAxisLocation(), orientation); [EOL]     float j2DX1 = 0.0f; [EOL]     float j2DX2 = 0.0f; [EOL]     float j2DY1 = 0.0f; [EOL]     float j2DY2 = 0.0f; [EOL]     if (orientation == PlotOrientation.VERTICAL) { [EOL]         j2DX1 = (float) domainAxis.valueToJava2D(this.x1, dataArea, domainEdge); [EOL]         j2DY1 = (float) rangeAxis.valueToJava2D(this.y1, dataArea, rangeEdge); [EOL]         j2DX2 = (float) domainAxis.valueToJava2D(this.x2, dataArea, domainEdge); [EOL]         j2DY2 = (float) rangeAxis.valueToJava2D(this.y2, dataArea, rangeEdge); [EOL]     } else if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         j2DY1 = (float) domainAxis.valueToJava2D(this.x1, dataArea, domainEdge); [EOL]         j2DX1 = (float) rangeAxis.valueToJava2D(this.y1, dataArea, rangeEdge); [EOL]         j2DY2 = (float) domainAxis.valueToJava2D(this.x2, dataArea, domainEdge); [EOL]         j2DX2 = (float) rangeAxis.valueToJava2D(this.y2, dataArea, rangeEdge); [EOL]     } [EOL]     g2.setPaint(this.paint); [EOL]     g2.setStroke(this.stroke); [EOL]     Line2D line = new Line2D.Float(j2DX1, j2DY1, j2DX2, j2DY2); [EOL]     boolean visible = ShapeUtilities.clipLine(line, dataArea); [EOL]     if (visible) { [EOL]         g2.draw(line); [EOL]     } [EOL]     String toolTip = getToolTipText(); [EOL]     String url = getURL(); [EOL]     if (toolTip != null || url != null) { [EOL]         addEntity(info, ShapeUtilities.createLineRegion(line, 1.0f), rendererIndex, toolTip, url); [EOL]     } [EOL] } <line_num>: 163,213
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!super.equals(obj)) { [EOL]         return false; [EOL]     } [EOL]     if (!(obj instanceof XYLineAnnotation)) { [EOL]         return false; [EOL]     } [EOL]     XYLineAnnotation that = (XYLineAnnotation) obj; [EOL]     if (this.x1 != that.x1) { [EOL]         return false; [EOL]     } [EOL]     if (this.y1 != that.y1) { [EOL]         return false; [EOL]     } [EOL]     if (this.x2 != that.x2) { [EOL]         return false; [EOL]     } [EOL]     if (this.y2 != that.y2) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.paint, that.paint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.stroke, that.stroke)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 222,253
public int hashCode() { [EOL]     int result; [EOL]     long temp; [EOL]     temp = Double.doubleToLongBits(this.x1); [EOL]     result = (int) (temp ^ (temp >>> 32)); [EOL]     temp = Double.doubleToLongBits(this.x2); [EOL]     result = 29 * result + (int) (temp ^ (temp >>> 32)); [EOL]     temp = Double.doubleToLongBits(this.y1); [EOL]     result = 29 * result + (int) (temp ^ (temp >>> 32)); [EOL]     temp = Double.doubleToLongBits(this.y2); [EOL]     result = 29 * result + (int) (temp ^ (temp >>> 32)); [EOL]     return result; [EOL] } <line_num>: 260,272
public Object clone() throws CloneNotSupportedException { [EOL]     return super.clone(); [EOL] } <line_num>: 281,283
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.paint, stream); [EOL]     SerialUtilities.writeStroke(this.stroke, stream); [EOL] } <line_num>: 292,296
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.paint = SerialUtilities.readPaint(stream); [EOL]     this.stroke = SerialUtilities.readStroke(stream); [EOL] } <line_num>: 306,311
