public PaintScaleLegend(PaintScale scale, ValueAxis axis) { [EOL]     if (axis == null) { [EOL]         throw new IllegalArgumentException("Null 'axis' argument."); [EOL]     } [EOL]     this.scale = scale; [EOL]     this.axis = axis; [EOL]     this.axis.addChangeListener(this); [EOL]     this.axisLocation = AxisLocation.BOTTOM_OR_LEFT; [EOL]     this.axisOffset = 0.0; [EOL]     this.axis.setRange(scale.getLowerBound(), scale.getUpperBound()); [EOL]     this.stripWidth = 15.0; [EOL]     this.stripOutlineVisible = true; [EOL]     this.stripOutlinePaint = Color.gray; [EOL]     this.stripOutlineStroke = new BasicStroke(0.5f); [EOL]     this.backgroundPaint = Color.white; [EOL]     this.subdivisions = 100; [EOL] } <line_num>: 134,150
public PaintScale getScale() { [EOL]     return this.scale; [EOL] } <line_num>: 159,161
public void setScale(PaintScale scale) { [EOL]     if (scale == null) { [EOL]         throw new IllegalArgumentException("Null 'scale' argument."); [EOL]     } [EOL]     this.scale = scale; [EOL]     notifyListeners(new TitleChangeEvent(this)); [EOL] } <line_num>: 171,177
public ValueAxis getAxis() { [EOL]     return this.axis; [EOL] } <line_num>: 186,188
public void setAxis(ValueAxis axis) { [EOL]     if (axis == null) { [EOL]         throw new IllegalArgumentException("Null 'axis' argument."); [EOL]     } [EOL]     this.axis.removeChangeListener(this); [EOL]     this.axis = axis; [EOL]     this.axis.addChangeListener(this); [EOL]     notifyListeners(new TitleChangeEvent(this)); [EOL] } <line_num>: 198,206
public AxisLocation getAxisLocation() { [EOL]     return this.axisLocation; [EOL] } <line_num>: 215,217
public void setAxisLocation(AxisLocation location) { [EOL]     if (location == null) { [EOL]         throw new IllegalArgumentException("Null 'location' argument."); [EOL]     } [EOL]     this.axisLocation = location; [EOL]     notifyListeners(new TitleChangeEvent(this)); [EOL] } <line_num>: 227,233
public double getAxisOffset() { [EOL]     return this.axisOffset; [EOL] } <line_num>: 242,244
public void setAxisOffset(double offset) { [EOL]     this.axisOffset = offset; [EOL]     notifyListeners(new TitleChangeEvent(this)); [EOL] } <line_num>: 252,255
public double getStripWidth() { [EOL]     return this.stripWidth; [EOL] } <line_num>: 264,266
public void setStripWidth(double width) { [EOL]     this.stripWidth = width; [EOL]     notifyListeners(new TitleChangeEvent(this)); [EOL] } <line_num>: 276,279
public boolean isStripOutlineVisible() { [EOL]     return this.stripOutlineVisible; [EOL] } <line_num>: 289,291
public void setStripOutlineVisible(boolean visible) { [EOL]     this.stripOutlineVisible = visible; [EOL]     notifyListeners(new TitleChangeEvent(this)); [EOL] } <line_num>: 302,305
public Paint getStripOutlinePaint() { [EOL]     return this.stripOutlinePaint; [EOL] } <line_num>: 314,316
public void setStripOutlinePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.stripOutlinePaint = paint; [EOL]     notifyListeners(new TitleChangeEvent(this)); [EOL] } <line_num>: 326,332
public Stroke getStripOutlineStroke() { [EOL]     return this.stripOutlineStroke; [EOL] } <line_num>: 341,343
public void setStripOutlineStroke(Stroke stroke) { [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' argument."); [EOL]     } [EOL]     this.stripOutlineStroke = stroke; [EOL]     notifyListeners(new TitleChangeEvent(this)); [EOL] } <line_num>: 353,359
public Paint getBackgroundPaint() { [EOL]     return this.backgroundPaint; [EOL] } <line_num>: 366,368
public void setBackgroundPaint(Paint paint) { [EOL]     this.backgroundPaint = paint; [EOL]     notifyListeners(new TitleChangeEvent(this)); [EOL] } <line_num>: 376,379
public int getSubdivisionCount() { [EOL]     return this.subdivisions; [EOL] } <line_num>: 388,390
public void setSubdivisionCount(int count) { [EOL]     if (count <= 0) { [EOL]         throw new IllegalArgumentException("Requires 'count' > 0."); [EOL]     } [EOL]     this.subdivisions = count; [EOL]     notifyListeners(new TitleChangeEvent(this)); [EOL] } <line_num>: 400,406
public void axisChanged(AxisChangeEvent event) { [EOL]     if (this.axis == event.getAxis()) { [EOL]         notifyListeners(new TitleChangeEvent(this)); [EOL]     } [EOL] } <line_num>: 416,420
public Size2D arrange(Graphics2D g2, RectangleConstraint constraint) { [EOL]     RectangleConstraint cc = toContentConstraint(constraint); [EOL]     LengthConstraintType w = cc.getWidthConstraintType(); [EOL]     LengthConstraintType h = cc.getHeightConstraintType(); [EOL]     Size2D contentSize = null; [EOL]     if (w == LengthConstraintType.NONE) { [EOL]         if (h == LengthConstraintType.NONE) { [EOL]             contentSize = new Size2D(getWidth(), getHeight()); [EOL]         } else if (h == LengthConstraintType.RANGE) { [EOL]             throw new RuntimeException("Not yet implemented."); [EOL]         } else if (h == LengthConstraintType.FIXED) { [EOL]             throw new RuntimeException("Not yet implemented."); [EOL]         } [EOL]     } else if (w == LengthConstraintType.RANGE) { [EOL]         if (h == LengthConstraintType.NONE) { [EOL]             throw new RuntimeException("Not yet implemented."); [EOL]         } else if (h == LengthConstraintType.RANGE) { [EOL]             contentSize = arrangeRR(g2, cc.getWidthRange(), cc.getHeightRange()); [EOL]         } else if (h == LengthConstraintType.FIXED) { [EOL]             throw new RuntimeException("Not yet implemented."); [EOL]         } [EOL]     } else if (w == LengthConstraintType.FIXED) { [EOL]         if (h == LengthConstraintType.NONE) { [EOL]             throw new RuntimeException("Not yet implemented."); [EOL]         } else if (h == LengthConstraintType.RANGE) { [EOL]             throw new RuntimeException("Not yet implemented."); [EOL]         } else if (h == LengthConstraintType.FIXED) { [EOL]             throw new RuntimeException("Not yet implemented."); [EOL]         } [EOL]     } [EOL]     return new Size2D(calculateTotalWidth(contentSize.getWidth()), calculateTotalHeight(contentSize.getHeight())); [EOL] } <line_num>: 431,472
protected Size2D arrangeRR(Graphics2D g2, Range widthRange, Range heightRange) { [EOL]     RectangleEdge position = getPosition(); [EOL]     if (position == RectangleEdge.TOP || position == RectangleEdge.BOTTOM) { [EOL]         float maxWidth = (float) widthRange.getUpperBound(); [EOL]         AxisSpace space = this.axis.reserveSpace(g2, null, new Rectangle2D.Double(0, 0, maxWidth, 100), RectangleEdge.BOTTOM, null); [EOL]         return new Size2D(maxWidth, this.stripWidth + this.axisOffset + space.getTop() + space.getBottom()); [EOL]     } else if (position == RectangleEdge.LEFT || position == RectangleEdge.RIGHT) { [EOL]         float maxHeight = (float) heightRange.getUpperBound(); [EOL]         AxisSpace space = this.axis.reserveSpace(g2, null, new Rectangle2D.Double(0, 0, 100, maxHeight), RectangleEdge.RIGHT, null); [EOL]         return new Size2D(this.stripWidth + this.axisOffset + space.getLeft() + space.getRight(), maxHeight); [EOL]     } else { [EOL]         throw new RuntimeException("Unrecognised position."); [EOL]     } [EOL] } <line_num>: 485,514
public void draw(Graphics2D g2, Rectangle2D area) { [EOL]     draw(g2, area, null); [EOL] } <line_num>: 522,524
public Object draw(Graphics2D g2, Rectangle2D area, Object params) { [EOL]     Rectangle2D target = (Rectangle2D) area.clone(); [EOL]     target = trimMargin(target); [EOL]     if (this.backgroundPaint != null) { [EOL]         g2.setPaint(this.backgroundPaint); [EOL]         g2.fill(target); [EOL]     } [EOL]     getFrame().draw(g2, target); [EOL]     getFrame().getInsets().trim(target); [EOL]     target = trimPadding(target); [EOL]     double base = this.axis.getLowerBound(); [EOL]     double increment = this.axis.getRange().getLength() / this.subdivisions; [EOL]     Rectangle2D r = new Rectangle2D.Double(); [EOL]     if (RectangleEdge.isTopOrBottom(getPosition())) { [EOL]         RectangleEdge axisEdge = Plot.resolveRangeAxisLocation(this.axisLocation, PlotOrientation.HORIZONTAL); [EOL]         if (axisEdge == RectangleEdge.TOP) { [EOL]             for (int i = 0; i < this.subdivisions; i++) { [EOL]                 double v = base + (i * increment); [EOL]                 Paint p = this.scale.getPaint(v); [EOL]                 double vv0 = this.axis.valueToJava2D(v, target, RectangleEdge.TOP); [EOL]                 double vv1 = this.axis.valueToJava2D(v + increment, target, RectangleEdge.TOP); [EOL]                 double ww = Math.abs(vv1 - vv0) + 1.0; [EOL]                 r.setRect(Math.min(vv0, vv1), target.getMaxY() - this.stripWidth, ww, this.stripWidth); [EOL]                 g2.setPaint(p); [EOL]                 g2.fill(r); [EOL]             } [EOL]             if (isStripOutlineVisible()) { [EOL]                 g2.setPaint(this.stripOutlinePaint); [EOL]                 g2.setStroke(this.stripOutlineStroke); [EOL]                 g2.draw(new Rectangle2D.Double(target.getMinX(), target.getMaxY() - this.stripWidth, target.getWidth(), this.stripWidth)); [EOL]             } [EOL]             this.axis.draw(g2, target.getMaxY() - this.stripWidth - this.axisOffset, target, target, RectangleEdge.TOP, null); [EOL]         } else if (axisEdge == RectangleEdge.BOTTOM) { [EOL]             for (int i = 0; i < this.subdivisions; i++) { [EOL]                 double v = base + (i * increment); [EOL]                 Paint p = this.scale.getPaint(v); [EOL]                 double vv0 = this.axis.valueToJava2D(v, target, RectangleEdge.BOTTOM); [EOL]                 double vv1 = this.axis.valueToJava2D(v + increment, target, RectangleEdge.BOTTOM); [EOL]                 double ww = Math.abs(vv1 - vv0) + 1.0; [EOL]                 r.setRect(Math.min(vv0, vv1), target.getMinY(), ww, this.stripWidth); [EOL]                 g2.setPaint(p); [EOL]                 g2.fill(r); [EOL]             } [EOL]             if (isStripOutlineVisible()) { [EOL]                 g2.setPaint(this.stripOutlinePaint); [EOL]                 g2.setStroke(this.stripOutlineStroke); [EOL]                 g2.draw(new Rectangle2D.Double(target.getMinX(), target.getMinY(), target.getWidth(), this.stripWidth)); [EOL]             } [EOL]             this.axis.draw(g2, target.getMinY() + this.stripWidth + this.axisOffset, target, target, RectangleEdge.BOTTOM, null); [EOL]         } [EOL]     } else { [EOL]         RectangleEdge axisEdge = Plot.resolveRangeAxisLocation(this.axisLocation, PlotOrientation.VERTICAL); [EOL]         if (axisEdge == RectangleEdge.LEFT) { [EOL]             for (int i = 0; i < this.subdivisions; i++) { [EOL]                 double v = base + (i * increment); [EOL]                 Paint p = this.scale.getPaint(v); [EOL]                 double vv0 = this.axis.valueToJava2D(v, target, RectangleEdge.LEFT); [EOL]                 double vv1 = this.axis.valueToJava2D(v + increment, target, RectangleEdge.LEFT); [EOL]                 double hh = Math.abs(vv1 - vv0) + 1.0; [EOL]                 r.setRect(target.getMaxX() - this.stripWidth, Math.min(vv0, vv1), this.stripWidth, hh); [EOL]                 g2.setPaint(p); [EOL]                 g2.fill(r); [EOL]             } [EOL]             if (isStripOutlineVisible()) { [EOL]                 g2.setPaint(this.stripOutlinePaint); [EOL]                 g2.setStroke(this.stripOutlineStroke); [EOL]                 g2.draw(new Rectangle2D.Double(target.getMaxX() - this.stripWidth, target.getMinY(), this.stripWidth, target.getHeight())); [EOL]             } [EOL]             this.axis.draw(g2, target.getMaxX() - this.stripWidth - this.axisOffset, target, target, RectangleEdge.LEFT, null); [EOL]         } else if (axisEdge == RectangleEdge.RIGHT) { [EOL]             for (int i = 0; i < this.subdivisions; i++) { [EOL]                 double v = base + (i * increment); [EOL]                 Paint p = this.scale.getPaint(v); [EOL]                 double vv0 = this.axis.valueToJava2D(v, target, RectangleEdge.LEFT); [EOL]                 double vv1 = this.axis.valueToJava2D(v + increment, target, RectangleEdge.LEFT); [EOL]                 double hh = Math.abs(vv1 - vv0) + 1.0; [EOL]                 r.setRect(target.getMinX(), Math.min(vv0, vv1), this.stripWidth, hh); [EOL]                 g2.setPaint(p); [EOL]                 g2.fill(r); [EOL]             } [EOL]             if (isStripOutlineVisible()) { [EOL]                 g2.setPaint(this.stripOutlinePaint); [EOL]                 g2.setStroke(this.stripOutlineStroke); [EOL]                 g2.draw(new Rectangle2D.Double(target.getMinX(), target.getMinY(), this.stripWidth, target.getHeight())); [EOL]             } [EOL]             this.axis.draw(g2, target.getMinX() + this.stripWidth + this.axisOffset, target, target, RectangleEdge.RIGHT, null); [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 535,659
public boolean equals(Object obj) { [EOL]     if (!(obj instanceof PaintScaleLegend)) { [EOL]         return false; [EOL]     } [EOL]     PaintScaleLegend that = (PaintScaleLegend) obj; [EOL]     if (!this.scale.equals(that.scale)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.axis.equals(that.axis)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.axisLocation.equals(that.axisLocation)) { [EOL]         return false; [EOL]     } [EOL]     if (this.axisOffset != that.axisOffset) { [EOL]         return false; [EOL]     } [EOL]     if (this.stripWidth != that.stripWidth) { [EOL]         return false; [EOL]     } [EOL]     if (this.stripOutlineVisible != that.stripOutlineVisible) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.stripOutlinePaint, that.stripOutlinePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.stripOutlineStroke.equals(that.stripOutlineStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.backgroundPaint, that.backgroundPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (this.subdivisions != that.subdivisions) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 668,705
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.backgroundPaint, stream); [EOL]     SerialUtilities.writePaint(this.stripOutlinePaint, stream); [EOL]     SerialUtilities.writeStroke(this.stripOutlineStroke, stream); [EOL] } <line_num>: 714,719
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.backgroundPaint = SerialUtilities.readPaint(stream); [EOL]     this.stripOutlinePaint = SerialUtilities.readPaint(stream); [EOL]     this.stripOutlineStroke = SerialUtilities.readStroke(stream); [EOL] } <line_num>: 729,735
