public LegendGraphic(Shape shape, Paint fillPaint) { [EOL]     if (shape == null) { [EOL]         throw new IllegalArgumentException("Null 'shape' argument."); [EOL]     } [EOL]     if (fillPaint == null) { [EOL]         throw new IllegalArgumentException("Null 'fillPaint' argument."); [EOL]     } [EOL]     this.shapeVisible = true; [EOL]     this.shape = shape; [EOL]     this.shapeAnchor = RectangleAnchor.CENTER; [EOL]     this.shapeLocation = RectangleAnchor.CENTER; [EOL]     this.shapeFilled = true; [EOL]     this.fillPaint = fillPaint; [EOL]     this.fillPaintTransformer = new StandardGradientPaintTransformer(); [EOL]     setPadding(2.0, 2.0, 2.0, 2.0); [EOL] } <line_num>: 155,170
public boolean isShapeVisible() { [EOL]     return this.shapeVisible; [EOL] } <line_num>: 180,182
public void setShapeVisible(boolean visible) { [EOL]     this.shapeVisible = visible; [EOL] } <line_num>: 192,194
public Shape getShape() { [EOL]     return this.shape; [EOL] } <line_num>: 203,205
public void setShape(Shape shape) { [EOL]     this.shape = shape; [EOL] } <line_num>: 214,216
public boolean isShapeFilled() { [EOL]     return this.shapeFilled; [EOL] } <line_num>: 226,228
public void setShapeFilled(boolean filled) { [EOL]     this.shapeFilled = filled; [EOL] } <line_num>: 238,240
public Paint getFillPaint() { [EOL]     return this.fillPaint; [EOL] } <line_num>: 249,251
public void setFillPaint(Paint paint) { [EOL]     this.fillPaint = paint; [EOL] } <line_num>: 260,262
public GradientPaintTransformer getFillPaintTransformer() { [EOL]     return this.fillPaintTransformer; [EOL] } <line_num>: 274,276
public void setFillPaintTransformer(GradientPaintTransformer transformer) { [EOL]     if (transformer == null) { [EOL]         throw new IllegalArgumentException("Null 'transformer' argument."); [EOL]     } [EOL]     this.fillPaintTransformer = transformer; [EOL] } <line_num>: 288,293
public boolean isShapeOutlineVisible() { [EOL]     return this.shapeOutlineVisible; [EOL] } <line_num>: 302,304
public void setShapeOutlineVisible(boolean visible) { [EOL]     this.shapeOutlineVisible = visible; [EOL] } <line_num>: 314,316
public Paint getOutlinePaint() { [EOL]     return this.outlinePaint; [EOL] } <line_num>: 325,327
public void setOutlinePaint(Paint paint) { [EOL]     this.outlinePaint = paint; [EOL] } <line_num>: 336,338
public Stroke getOutlineStroke() { [EOL]     return this.outlineStroke; [EOL] } <line_num>: 347,349
public void setOutlineStroke(Stroke stroke) { [EOL]     this.outlineStroke = stroke; [EOL] } <line_num>: 358,360
public RectangleAnchor getShapeAnchor() { [EOL]     return this.shapeAnchor; [EOL] } <line_num>: 369,371
public void setShapeAnchor(RectangleAnchor anchor) { [EOL]     if (anchor == null) { [EOL]         throw new IllegalArgumentException("Null 'anchor' argument."); [EOL]     } [EOL]     this.shapeAnchor = anchor; [EOL] } <line_num>: 381,386
public RectangleAnchor getShapeLocation() { [EOL]     return this.shapeLocation; [EOL] } <line_num>: 395,397
public void setShapeLocation(RectangleAnchor location) { [EOL]     if (location == null) { [EOL]         throw new IllegalArgumentException("Null 'location' argument."); [EOL]     } [EOL]     this.shapeLocation = location; [EOL] } <line_num>: 407,412
public boolean isLineVisible() { [EOL]     return this.lineVisible; [EOL] } <line_num>: 421,423
public void setLineVisible(boolean visible) { [EOL]     this.lineVisible = visible; [EOL] } <line_num>: 432,434
public Shape getLine() { [EOL]     return this.line; [EOL] } <line_num>: 443,445
public void setLine(Shape line) { [EOL]     this.line = line; [EOL] } <line_num>: 455,457
public Paint getLinePaint() { [EOL]     return this.linePaint; [EOL] } <line_num>: 466,468
public void setLinePaint(Paint paint) { [EOL]     this.linePaint = paint; [EOL] } <line_num>: 477,479
public Stroke getLineStroke() { [EOL]     return this.lineStroke; [EOL] } <line_num>: 488,490
public void setLineStroke(Stroke stroke) { [EOL]     this.lineStroke = stroke; [EOL] } <line_num>: 499,501
public Size2D arrange(Graphics2D g2, RectangleConstraint constraint) { [EOL]     RectangleConstraint contentConstraint = toContentConstraint(constraint); [EOL]     LengthConstraintType w = contentConstraint.getWidthConstraintType(); [EOL]     LengthConstraintType h = contentConstraint.getHeightConstraintType(); [EOL]     Size2D contentSize = null; [EOL]     if (w == LengthConstraintType.NONE) { [EOL]         if (h == LengthConstraintType.NONE) { [EOL]             contentSize = arrangeNN(g2); [EOL]         } else if (h == LengthConstraintType.RANGE) { [EOL]             throw new RuntimeException("Not yet implemented."); [EOL]         } else if (h == LengthConstraintType.FIXED) { [EOL]             throw new RuntimeException("Not yet implemented."); [EOL]         } [EOL]     } else if (w == LengthConstraintType.RANGE) { [EOL]         if (h == LengthConstraintType.NONE) { [EOL]             throw new RuntimeException("Not yet implemented."); [EOL]         } else if (h == LengthConstraintType.RANGE) { [EOL]             throw new RuntimeException("Not yet implemented."); [EOL]         } else if (h == LengthConstraintType.FIXED) { [EOL]             throw new RuntimeException("Not yet implemented."); [EOL]         } [EOL]     } else if (w == LengthConstraintType.FIXED) { [EOL]         if (h == LengthConstraintType.NONE) { [EOL]             throw new RuntimeException("Not yet implemented."); [EOL]         } else if (h == LengthConstraintType.RANGE) { [EOL]             throw new RuntimeException("Not yet implemented."); [EOL]         } else if (h == LengthConstraintType.FIXED) { [EOL]             contentSize = new Size2D(contentConstraint.getWidth(), contentConstraint.getHeight()); [EOL]         } [EOL]     } [EOL]     return new Size2D(calculateTotalWidth(contentSize.getWidth()), calculateTotalHeight(contentSize.getHeight())); [EOL] } <line_num>: 512,557
protected Size2D arrangeNN(Graphics2D g2) { [EOL]     Rectangle2D contentSize = new Rectangle2D.Double(); [EOL]     if (this.line != null) { [EOL]         contentSize.setRect(this.line.getBounds2D()); [EOL]     } [EOL]     if (this.shape != null) { [EOL]         contentSize = contentSize.createUnion(this.shape.getBounds2D()); [EOL]     } [EOL]     return new Size2D(contentSize.getWidth(), contentSize.getHeight()); [EOL] } <line_num>: 568,577
public void draw(Graphics2D g2, Rectangle2D area) { [EOL]     area = trimMargin(area); [EOL]     drawBorder(g2, area); [EOL]     area = trimBorder(area); [EOL]     area = trimPadding(area); [EOL]     if (this.lineVisible) { [EOL]         Point2D location = RectangleAnchor.coordinates(area, this.shapeLocation); [EOL]         Shape aLine = ShapeUtilities.createTranslatedShape(getLine(), this.shapeAnchor, location.getX(), location.getY()); [EOL]         g2.setPaint(this.linePaint); [EOL]         g2.setStroke(this.lineStroke); [EOL]         g2.draw(aLine); [EOL]     } [EOL]     if (this.shapeVisible) { [EOL]         Point2D location = RectangleAnchor.coordinates(area, this.shapeLocation); [EOL]         Shape s = ShapeUtilities.createTranslatedShape(this.shape, this.shapeAnchor, location.getX(), location.getY()); [EOL]         if (this.shapeFilled) { [EOL]             Paint p = this.fillPaint; [EOL]             if (p instanceof GradientPaint) { [EOL]                 GradientPaint gp = (GradientPaint) this.fillPaint; [EOL]                 p = this.fillPaintTransformer.transform(gp, s); [EOL]             } [EOL]             g2.setPaint(p); [EOL]             g2.fill(s); [EOL]         } [EOL]         if (this.shapeOutlineVisible) { [EOL]             g2.setPaint(this.outlinePaint); [EOL]             g2.setStroke(this.outlineStroke); [EOL]             g2.draw(s); [EOL]         } [EOL]     } [EOL] } <line_num>: 585,624
public Object draw(Graphics2D g2, Rectangle2D area, Object params) { [EOL]     draw(g2, area); [EOL]     return null; [EOL] } <line_num>: 635,638
public boolean equals(Object obj) { [EOL]     if (!(obj instanceof LegendGraphic)) { [EOL]         return false; [EOL]     } [EOL]     LegendGraphic that = (LegendGraphic) obj; [EOL]     if (this.shapeVisible != that.shapeVisible) { [EOL]         return false; [EOL]     } [EOL]     if (!ShapeUtilities.equal(this.shape, that.shape)) { [EOL]         return false; [EOL]     } [EOL]     if (this.shapeFilled != that.shapeFilled) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.fillPaint, that.fillPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.fillPaintTransformer, that.fillPaintTransformer)) { [EOL]         return false; [EOL]     } [EOL]     if (this.shapeOutlineVisible != that.shapeOutlineVisible) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.outlineStroke, that.outlineStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (this.shapeAnchor != that.shapeAnchor) { [EOL]         return false; [EOL]     } [EOL]     if (this.shapeLocation != that.shapeLocation) { [EOL]         return false; [EOL]     } [EOL]     if (this.lineVisible != that.lineVisible) { [EOL]         return false; [EOL]     } [EOL]     if (!ShapeUtilities.equal(this.line, that.line)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.linePaint, that.linePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.lineStroke, that.lineStroke)) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 648,697
public int hashCode() { [EOL]     int result = 193; [EOL]     result = 37 * result + ObjectUtilities.hashCode(this.fillPaint); [EOL]     return result; [EOL] } <line_num>: 704,709
public Object clone() throws CloneNotSupportedException { [EOL]     LegendGraphic clone = (LegendGraphic) super.clone(); [EOL]     clone.shape = ShapeUtilities.clone(this.shape); [EOL]     clone.line = ShapeUtilities.clone(this.line); [EOL]     return clone; [EOL] } <line_num>: 718,723
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writeShape(this.shape, stream); [EOL]     SerialUtilities.writePaint(this.fillPaint, stream); [EOL]     SerialUtilities.writePaint(this.outlinePaint, stream); [EOL]     SerialUtilities.writeStroke(this.outlineStroke, stream); [EOL]     SerialUtilities.writeShape(this.line, stream); [EOL]     SerialUtilities.writePaint(this.linePaint, stream); [EOL]     SerialUtilities.writeStroke(this.lineStroke, stream); [EOL] } <line_num>: 732,741
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.shape = SerialUtilities.readShape(stream); [EOL]     this.fillPaint = SerialUtilities.readPaint(stream); [EOL]     this.outlinePaint = SerialUtilities.readPaint(stream); [EOL]     this.outlineStroke = SerialUtilities.readStroke(stream); [EOL]     this.line = SerialUtilities.readShape(stream); [EOL]     this.linePaint = SerialUtilities.readPaint(stream); [EOL]     this.lineStroke = SerialUtilities.readStroke(stream); [EOL] } <line_num>: 751,761
