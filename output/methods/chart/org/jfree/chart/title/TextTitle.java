public TextTitle() { [EOL]     this(""); [EOL] } <line_num>: 179,181
public TextTitle(String text) { [EOL]     this(text, TextTitle.DEFAULT_FONT, TextTitle.DEFAULT_TEXT_PAINT, Title.DEFAULT_POSITION, Title.DEFAULT_HORIZONTAL_ALIGNMENT, Title.DEFAULT_VERTICAL_ALIGNMENT, Title.DEFAULT_PADDING); [EOL] } <line_num>: 188,192
public TextTitle(String text, Font font) { [EOL]     this(text, font, TextTitle.DEFAULT_TEXT_PAINT, Title.DEFAULT_POSITION, Title.DEFAULT_HORIZONTAL_ALIGNMENT, Title.DEFAULT_VERTICAL_ALIGNMENT, Title.DEFAULT_PADDING); [EOL] } <line_num>: 200,204
public TextTitle(String text, Font font, Paint paint, RectangleEdge position, HorizontalAlignment horizontalAlignment, VerticalAlignment verticalAlignment, RectangleInsets padding) { [EOL]     super(position, horizontalAlignment, verticalAlignment, padding); [EOL]     if (text == null) { [EOL]         throw new NullPointerException("Null 'text' argument."); [EOL]     } [EOL]     if (font == null) { [EOL]         throw new NullPointerException("Null 'font' argument."); [EOL]     } [EOL]     if (paint == null) { [EOL]         throw new NullPointerException("Null 'paint' argument."); [EOL]     } [EOL]     this.text = text; [EOL]     this.font = font; [EOL]     this.paint = paint; [EOL]     this.textAlignment = horizontalAlignment; [EOL]     this.backgroundPaint = null; [EOL]     this.content = null; [EOL]     this.toolTipText = null; [EOL]     this.urlText = null; [EOL] } <line_num>: 219,248
public String getText() { [EOL]     return this.text; [EOL] } <line_num>: 257,259
public void setText(String text) { [EOL]     if (text == null) { [EOL]         throw new IllegalArgumentException("Null 'text' argument."); [EOL]     } [EOL]     if (!this.text.equals(text)) { [EOL]         this.text = text; [EOL]         notifyListeners(new TitleChangeEvent(this)); [EOL]     } [EOL] } <line_num>: 267,275
public HorizontalAlignment getTextAlignment() { [EOL]     return this.textAlignment; [EOL] } <line_num>: 285,287
public void setTextAlignment(HorizontalAlignment alignment) { [EOL]     if (alignment == null) { [EOL]         throw new IllegalArgumentException("Null 'alignment' argument."); [EOL]     } [EOL]     this.textAlignment = alignment; [EOL]     notifyListeners(new TitleChangeEvent(this)); [EOL] } <line_num>: 295,301
public Font getFont() { [EOL]     return this.font; [EOL] } <line_num>: 310,312
public void setFont(Font font) { [EOL]     if (font == null) { [EOL]         throw new IllegalArgumentException("Null 'font' argument."); [EOL]     } [EOL]     if (!this.font.equals(font)) { [EOL]         this.font = font; [EOL]         notifyListeners(new TitleChangeEvent(this)); [EOL]     } [EOL] } <line_num>: 322,330
public Paint getPaint() { [EOL]     return this.paint; [EOL] } <line_num>: 339,341
public void setPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     if (!this.paint.equals(paint)) { [EOL]         this.paint = paint; [EOL]         notifyListeners(new TitleChangeEvent(this)); [EOL]     } [EOL] } <line_num>: 351,359
public Paint getBackgroundPaint() { [EOL]     return this.backgroundPaint; [EOL] } <line_num>: 366,368
public void setBackgroundPaint(Paint paint) { [EOL]     this.backgroundPaint = paint; [EOL]     notifyListeners(new TitleChangeEvent(this)); [EOL] } <line_num>: 377,380
public String getToolTipText() { [EOL]     return this.toolTipText; [EOL] } <line_num>: 387,389
public void setToolTipText(String text) { [EOL]     this.toolTipText = text; [EOL]     notifyListeners(new TitleChangeEvent(this)); [EOL] } <line_num>: 397,400
public String getURLText() { [EOL]     return this.urlText; [EOL] } <line_num>: 407,409
public void setURLText(String text) { [EOL]     this.urlText = text; [EOL]     notifyListeners(new TitleChangeEvent(this)); [EOL] } <line_num>: 417,420
public boolean getExpandToFitSpace() { [EOL]     return this.expandToFitSpace; [EOL] } <line_num>: 428,430
public void setExpandToFitSpace(boolean expand) { [EOL]     this.expandToFitSpace = expand; [EOL]     notifyListeners(new TitleChangeEvent(this)); [EOL] } <line_num>: 439,442
public int getMaximumLinesToDisplay() { [EOL]     return this.maximumLinesToDisplay; [EOL] } <line_num>: 453,455
public void setMaximumLinesToDisplay(int max) { [EOL]     this.maximumLinesToDisplay = max; [EOL]     notifyListeners(new TitleChangeEvent(this)); [EOL] } <line_num>: 467,470
public Size2D arrange(Graphics2D g2, RectangleConstraint constraint) { [EOL]     RectangleConstraint cc = toContentConstraint(constraint); [EOL]     LengthConstraintType w = cc.getWidthConstraintType(); [EOL]     LengthConstraintType h = cc.getHeightConstraintType(); [EOL]     Size2D contentSize = null; [EOL]     if (w == LengthConstraintType.NONE) { [EOL]         if (h == LengthConstraintType.NONE) { [EOL]             contentSize = arrangeNN(g2); [EOL]         } else if (h == LengthConstraintType.RANGE) { [EOL]             throw new RuntimeException("Not yet implemented."); [EOL]         } else if (h == LengthConstraintType.FIXED) { [EOL]             throw new RuntimeException("Not yet implemented."); [EOL]         } [EOL]     } else if (w == LengthConstraintType.RANGE) { [EOL]         if (h == LengthConstraintType.NONE) { [EOL]             contentSize = arrangeRN(g2, cc.getWidthRange()); [EOL]         } else if (h == LengthConstraintType.RANGE) { [EOL]             contentSize = arrangeRR(g2, cc.getWidthRange(), cc.getHeightRange()); [EOL]         } else if (h == LengthConstraintType.FIXED) { [EOL]             throw new RuntimeException("Not yet implemented."); [EOL]         } [EOL]     } else if (w == LengthConstraintType.FIXED) { [EOL]         if (h == LengthConstraintType.NONE) { [EOL]             contentSize = arrangeFN(g2, cc.getWidth()); [EOL]         } else if (h == LengthConstraintType.RANGE) { [EOL]             throw new RuntimeException("Not yet implemented."); [EOL]         } else if (h == LengthConstraintType.FIXED) { [EOL]             throw new RuntimeException("Not yet implemented."); [EOL]         } [EOL]     } [EOL]     return new Size2D(calculateTotalWidth(contentSize.getWidth()), calculateTotalHeight(contentSize.getHeight())); [EOL] } <line_num>: 481,522
protected Size2D arrangeNN(Graphics2D g2) { [EOL]     Range max = new Range(0.0, Float.MAX_VALUE); [EOL]     return arrangeRR(g2, max, max); [EOL] } <line_num>: 536,539
protected Size2D arrangeFN(Graphics2D g2, double w) { [EOL]     RectangleEdge position = getPosition(); [EOL]     if (position == RectangleEdge.TOP || position == RectangleEdge.BOTTOM) { [EOL]         float maxWidth = (float) w; [EOL]         g2.setFont(this.font); [EOL]         this.content = TextUtilities.createTextBlock(this.text, this.font, this.paint, maxWidth, this.maximumLinesToDisplay, new G2TextMeasurer(g2)); [EOL]         this.content.setLineAlignment(this.textAlignment); [EOL]         Size2D contentSize = this.content.calculateDimensions(g2); [EOL]         if (this.expandToFitSpace) { [EOL]             return new Size2D(maxWidth, contentSize.getHeight()); [EOL]         } else { [EOL]             return contentSize; [EOL]         } [EOL]     } else if (position == RectangleEdge.LEFT || position == RectangleEdge.RIGHT) { [EOL]         float maxWidth = Float.MAX_VALUE; [EOL]         g2.setFont(this.font); [EOL]         this.content = TextUtilities.createTextBlock(this.text, this.font, this.paint, maxWidth, this.maximumLinesToDisplay, new G2TextMeasurer(g2)); [EOL]         this.content.setLineAlignment(this.textAlignment); [EOL]         Size2D contentSize = this.content.calculateDimensions(g2); [EOL]         if (this.expandToFitSpace) { [EOL]             return new Size2D(contentSize.getHeight(), maxWidth); [EOL]         } else { [EOL]             return new Size2D(contentSize.height, contentSize.width); [EOL]         } [EOL]     } else { [EOL]         throw new RuntimeException("Unrecognised exception."); [EOL]     } [EOL] } <line_num>: 554,592
protected Size2D arrangeRN(Graphics2D g2, Range widthRange) { [EOL]     Size2D s = arrangeNN(g2); [EOL]     if (widthRange.contains(s.getWidth())) { [EOL]         return s; [EOL]     } [EOL]     double ww = widthRange.constrain(s.getWidth()); [EOL]     return arrangeFN(g2, ww); [EOL] } <line_num>: 607,614
protected Size2D arrangeRR(Graphics2D g2, Range widthRange, Range heightRange) { [EOL]     RectangleEdge position = getPosition(); [EOL]     if (position == RectangleEdge.TOP || position == RectangleEdge.BOTTOM) { [EOL]         float maxWidth = (float) widthRange.getUpperBound(); [EOL]         g2.setFont(this.font); [EOL]         this.content = TextUtilities.createTextBlock(this.text, this.font, this.paint, maxWidth, this.maximumLinesToDisplay, new G2TextMeasurer(g2)); [EOL]         this.content.setLineAlignment(this.textAlignment); [EOL]         Size2D contentSize = this.content.calculateDimensions(g2); [EOL]         if (this.expandToFitSpace) { [EOL]             return new Size2D(maxWidth, contentSize.getHeight()); [EOL]         } else { [EOL]             return contentSize; [EOL]         } [EOL]     } else if (position == RectangleEdge.LEFT || position == RectangleEdge.RIGHT) { [EOL]         float maxWidth = (float) heightRange.getUpperBound(); [EOL]         g2.setFont(this.font); [EOL]         this.content = TextUtilities.createTextBlock(this.text, this.font, this.paint, maxWidth, this.maximumLinesToDisplay, new G2TextMeasurer(g2)); [EOL]         this.content.setLineAlignment(this.textAlignment); [EOL]         Size2D contentSize = this.content.calculateDimensions(g2); [EOL]         if (this.expandToFitSpace) { [EOL]             return new Size2D(contentSize.getHeight(), maxWidth); [EOL]         } else { [EOL]             return new Size2D(contentSize.height, contentSize.width); [EOL]         } [EOL]     } else { [EOL]         throw new RuntimeException("Unrecognised exception."); [EOL]     } [EOL] } <line_num>: 627,666
public void draw(Graphics2D g2, Rectangle2D area) { [EOL]     draw(g2, area, null); [EOL] } <line_num>: 675,677
public Object draw(Graphics2D g2, Rectangle2D area, Object params) { [EOL]     if (this.content == null) { [EOL]         return null; [EOL]     } [EOL]     area = trimMargin(area); [EOL]     drawBorder(g2, area); [EOL]     if (this.text.equals("")) { [EOL]         return null; [EOL]     } [EOL]     ChartEntity entity = null; [EOL]     if (params instanceof EntityBlockParams) { [EOL]         EntityBlockParams p = (EntityBlockParams) params; [EOL]         if (p.getGenerateEntities()) { [EOL]             entity = new TitleEntity(area, this, this.toolTipText, this.urlText); [EOL]         } [EOL]     } [EOL]     area = trimBorder(area); [EOL]     if (this.backgroundPaint != null) { [EOL]         g2.setPaint(this.backgroundPaint); [EOL]         g2.fill(area); [EOL]     } [EOL]     area = trimPadding(area); [EOL]     RectangleEdge position = getPosition(); [EOL]     if (position == RectangleEdge.TOP || position == RectangleEdge.BOTTOM) { [EOL]         drawHorizontal(g2, area); [EOL]     } else if (position == RectangleEdge.LEFT || position == RectangleEdge.RIGHT) { [EOL]         drawVertical(g2, area); [EOL]     } [EOL]     BlockResult result = new BlockResult(); [EOL]     if (entity != null) { [EOL]         StandardEntityCollection sec = new StandardEntityCollection(); [EOL]         sec.add(entity); [EOL]         result.setEntityCollection(sec); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 691,729
protected void drawHorizontal(Graphics2D g2, Rectangle2D area) { [EOL]     Rectangle2D titleArea = (Rectangle2D) area.clone(); [EOL]     g2.setFont(this.font); [EOL]     g2.setPaint(this.paint); [EOL]     TextBlockAnchor anchor = null; [EOL]     float x = 0.0f; [EOL]     HorizontalAlignment horizontalAlignment = getHorizontalAlignment(); [EOL]     if (horizontalAlignment == HorizontalAlignment.LEFT) { [EOL]         x = (float) titleArea.getX(); [EOL]         anchor = TextBlockAnchor.TOP_LEFT; [EOL]     } else if (horizontalAlignment == HorizontalAlignment.RIGHT) { [EOL]         x = (float) titleArea.getMaxX(); [EOL]         anchor = TextBlockAnchor.TOP_RIGHT; [EOL]     } else if (horizontalAlignment == HorizontalAlignment.CENTER) { [EOL]         x = (float) titleArea.getCenterX(); [EOL]         anchor = TextBlockAnchor.TOP_CENTER; [EOL]     } [EOL]     float y = 0.0f; [EOL]     RectangleEdge position = getPosition(); [EOL]     if (position == RectangleEdge.TOP) { [EOL]         y = (float) titleArea.getY(); [EOL]     } else if (position == RectangleEdge.BOTTOM) { [EOL]         y = (float) titleArea.getMaxY(); [EOL]         if (horizontalAlignment == HorizontalAlignment.LEFT) { [EOL]             anchor = TextBlockAnchor.BOTTOM_LEFT; [EOL]         } else if (horizontalAlignment == HorizontalAlignment.CENTER) { [EOL]             anchor = TextBlockAnchor.BOTTOM_CENTER; [EOL]         } else if (horizontalAlignment == HorizontalAlignment.RIGHT) { [EOL]             anchor = TextBlockAnchor.BOTTOM_RIGHT; [EOL]         } [EOL]     } [EOL]     this.content.draw(g2, x, y, anchor); [EOL] } <line_num>: 739,776
protected void drawVertical(Graphics2D g2, Rectangle2D area) { [EOL]     Rectangle2D titleArea = (Rectangle2D) area.clone(); [EOL]     g2.setFont(this.font); [EOL]     g2.setPaint(this.paint); [EOL]     TextBlockAnchor anchor = null; [EOL]     float y = 0.0f; [EOL]     VerticalAlignment verticalAlignment = getVerticalAlignment(); [EOL]     if (verticalAlignment == VerticalAlignment.TOP) { [EOL]         y = (float) titleArea.getY(); [EOL]         anchor = TextBlockAnchor.TOP_RIGHT; [EOL]     } else if (verticalAlignment == VerticalAlignment.BOTTOM) { [EOL]         y = (float) titleArea.getMaxY(); [EOL]         anchor = TextBlockAnchor.TOP_LEFT; [EOL]     } else if (verticalAlignment == VerticalAlignment.CENTER) { [EOL]         y = (float) titleArea.getCenterY(); [EOL]         anchor = TextBlockAnchor.TOP_CENTER; [EOL]     } [EOL]     float x = 0.0f; [EOL]     RectangleEdge position = getPosition(); [EOL]     if (position == RectangleEdge.LEFT) { [EOL]         x = (float) titleArea.getX(); [EOL]     } else if (position == RectangleEdge.RIGHT) { [EOL]         x = (float) titleArea.getMaxX(); [EOL]         if (verticalAlignment == VerticalAlignment.TOP) { [EOL]             anchor = TextBlockAnchor.BOTTOM_RIGHT; [EOL]         } else if (verticalAlignment == VerticalAlignment.CENTER) { [EOL]             anchor = TextBlockAnchor.BOTTOM_CENTER; [EOL]         } else if (verticalAlignment == VerticalAlignment.BOTTOM) { [EOL]             anchor = TextBlockAnchor.BOTTOM_LEFT; [EOL]         } [EOL]     } [EOL]     this.content.draw(g2, x, y, anchor, x, y, -Math.PI / 2.0); [EOL] } <line_num>: 786,823
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof TextTitle)) { [EOL]         return false; [EOL]     } [EOL]     TextTitle that = (TextTitle) obj; [EOL]     if (!ObjectUtilities.equal(this.text, that.text)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.font, that.font)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.paint, that.paint)) { [EOL]         return false; [EOL]     } [EOL]     if (this.textAlignment != that.textAlignment) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.backgroundPaint, that.backgroundPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (this.maximumLinesToDisplay != that.maximumLinesToDisplay) { [EOL]         return false; [EOL]     } [EOL]     if (this.expandToFitSpace != that.expandToFitSpace) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.toolTipText, that.toolTipText)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.urlText, that.urlText)) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 832,868
public int hashCode() { [EOL]     int result = super.hashCode(); [EOL]     result = 29 * result + (this.text != null ? this.text.hashCode() : 0); [EOL]     result = 29 * result + (this.font != null ? this.font.hashCode() : 0); [EOL]     result = 29 * result + (this.paint != null ? this.paint.hashCode() : 0); [EOL]     result = 29 * result + (this.backgroundPaint != null ? this.backgroundPaint.hashCode() : 0); [EOL]     return result; [EOL] } <line_num>: 875,883
public Object clone() throws CloneNotSupportedException { [EOL]     return super.clone(); [EOL] } <line_num>: 892,894
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.paint, stream); [EOL]     SerialUtilities.writePaint(this.backgroundPaint, stream); [EOL] } <line_num>: 903,907
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.paint = SerialUtilities.readPaint(stream); [EOL]     this.backgroundPaint = SerialUtilities.readPaint(stream); [EOL] } <line_num>: 917,922
