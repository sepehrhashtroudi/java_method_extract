public ImageTitle(Image image) { [EOL]     this(image, image.getHeight(null), image.getWidth(null), Title.DEFAULT_POSITION, Title.DEFAULT_HORIZONTAL_ALIGNMENT, Title.DEFAULT_VERTICAL_ALIGNMENT, Title.DEFAULT_PADDING); [EOL] } <line_num>: 100,104
public ImageTitle(Image image, RectangleEdge position, HorizontalAlignment horizontalAlignment, VerticalAlignment verticalAlignment) { [EOL]     this(image, image.getHeight(null), image.getWidth(null), position, horizontalAlignment, verticalAlignment, Title.DEFAULT_PADDING); [EOL] } <line_num>: 114,121
public ImageTitle(Image image, int height, int width, RectangleEdge position, HorizontalAlignment horizontalAlignment, VerticalAlignment verticalAlignment, RectangleInsets padding) { [EOL]     super(position, horizontalAlignment, verticalAlignment, padding); [EOL]     if (image == null) { [EOL]         throw new NullPointerException("Null 'image' argument."); [EOL]     } [EOL]     this.image = image; [EOL]     setHeight(height); [EOL]     setWidth(width); [EOL] } <line_num>: 136,150
public Image getImage() { [EOL]     return this.image; [EOL] } <line_num>: 157,159
public void setImage(Image image) { [EOL]     if (image == null) { [EOL]         throw new NullPointerException("Null 'image' argument."); [EOL]     } [EOL]     this.image = image; [EOL]     notifyListeners(new TitleChangeEvent(this)); [EOL] } <line_num>: 167,173
public Size2D arrange(Graphics2D g2, RectangleConstraint constraint) { [EOL]     Size2D s = new Size2D(this.image.getWidth(null), this.image.getHeight(null)); [EOL]     return new Size2D(calculateTotalWidth(s.getWidth()), calculateTotalHeight(s.getHeight())); [EOL] } <line_num>: 184,189
public void draw(Graphics2D g2, Rectangle2D area) { [EOL]     RectangleEdge position = getPosition(); [EOL]     if (position == RectangleEdge.TOP || position == RectangleEdge.BOTTOM) { [EOL]         drawHorizontal(g2, area); [EOL]     } else if (position == RectangleEdge.LEFT || position == RectangleEdge.RIGHT) { [EOL]         drawVertical(g2, area); [EOL]     } else { [EOL]         throw new RuntimeException("Invalid title position."); [EOL]     } [EOL] } <line_num>: 198,210
protected Size2D drawHorizontal(Graphics2D g2, Rectangle2D chartArea) { [EOL]     double startY = 0.0; [EOL]     double topSpace = 0.0; [EOL]     double bottomSpace = 0.0; [EOL]     double leftSpace = 0.0; [EOL]     double rightSpace = 0.0; [EOL]     double w = getWidth(); [EOL]     double h = getHeight(); [EOL]     RectangleInsets padding = getPadding(); [EOL]     topSpace = padding.calculateTopOutset(h); [EOL]     bottomSpace = padding.calculateBottomOutset(h); [EOL]     leftSpace = padding.calculateLeftOutset(w); [EOL]     rightSpace = padding.calculateRightOutset(w); [EOL]     if (getPosition() == RectangleEdge.TOP) { [EOL]         startY = chartArea.getY() + topSpace; [EOL]     } else { [EOL]         startY = chartArea.getY() + chartArea.getHeight() - bottomSpace - h; [EOL]     } [EOL]     HorizontalAlignment horizontalAlignment = getHorizontalAlignment(); [EOL]     double startX = 0.0; [EOL]     if (horizontalAlignment == HorizontalAlignment.CENTER) { [EOL]         startX = chartArea.getX() + leftSpace + chartArea.getWidth() / 2.0 - w / 2.0; [EOL]     } else if (horizontalAlignment == HorizontalAlignment.LEFT) { [EOL]         startX = chartArea.getX() + leftSpace; [EOL]     } else if (horizontalAlignment == HorizontalAlignment.RIGHT) { [EOL]         startX = chartArea.getX() + chartArea.getWidth() - rightSpace - w; [EOL]     } [EOL]     g2.drawImage(this.image, (int) startX, (int) startY, (int) w, (int) h, null); [EOL]     return new Size2D(chartArea.getWidth() + leftSpace + rightSpace, h + topSpace + bottomSpace); [EOL] } <line_num>: 222,264
protected Size2D drawVertical(Graphics2D g2, Rectangle2D chartArea) { [EOL]     double startX = 0.0; [EOL]     double topSpace = 0.0; [EOL]     double bottomSpace = 0.0; [EOL]     double leftSpace = 0.0; [EOL]     double rightSpace = 0.0; [EOL]     double w = getWidth(); [EOL]     double h = getHeight(); [EOL]     RectangleInsets padding = getPadding(); [EOL]     if (padding != null) { [EOL]         topSpace = padding.calculateTopOutset(h); [EOL]         bottomSpace = padding.calculateBottomOutset(h); [EOL]         leftSpace = padding.calculateLeftOutset(w); [EOL]         rightSpace = padding.calculateRightOutset(w); [EOL]     } [EOL]     if (getPosition() == RectangleEdge.LEFT) { [EOL]         startX = chartArea.getX() + leftSpace; [EOL]     } else { [EOL]         startX = chartArea.getMaxX() - rightSpace - w; [EOL]     } [EOL]     VerticalAlignment alignment = getVerticalAlignment(); [EOL]     double startY = 0.0; [EOL]     if (alignment == VerticalAlignment.CENTER) { [EOL]         startY = chartArea.getMinY() + topSpace + chartArea.getHeight() / 2.0 - h / 2.0; [EOL]     } else if (alignment == VerticalAlignment.TOP) { [EOL]         startY = chartArea.getMinY() + topSpace; [EOL]     } else if (alignment == VerticalAlignment.BOTTOM) { [EOL]         startY = chartArea.getMaxY() - bottomSpace - h; [EOL]     } [EOL]     g2.drawImage(this.image, (int) startX, (int) startY, (int) w, (int) h, null); [EOL]     return new Size2D(chartArea.getWidth() + leftSpace + rightSpace, h + topSpace + bottomSpace); [EOL] } <line_num>: 276,322
public Object draw(Graphics2D g2, Rectangle2D area, Object params) { [EOL]     draw(g2, area); [EOL]     return null; [EOL] } <line_num>: 333,336
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof ImageTitle)) { [EOL]         return false; [EOL]     } [EOL]     ImageTitle that = (ImageTitle) obj; [EOL]     if (!ObjectUtilities.equal(this.image, that.image)) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 352,364
