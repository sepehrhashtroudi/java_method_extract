public AxisSpace() { [EOL]     this.top = 0.0; [EOL]     this.bottom = 0.0; [EOL]     this.left = 0.0; [EOL]     this.right = 0.0; [EOL] } <line_num>: 79,84
public double getTop() { [EOL]     return this.top; [EOL] } <line_num>: 91,93
public void setTop(double space) { [EOL]     this.top = space; [EOL] } <line_num>: 100,102
public double getBottom() { [EOL]     return this.bottom; [EOL] } <line_num>: 109,111
public void setBottom(double space) { [EOL]     this.bottom = space; [EOL] } <line_num>: 118,120
public double getLeft() { [EOL]     return this.left; [EOL] } <line_num>: 127,129
public void setLeft(double space) { [EOL]     this.left = space; [EOL] } <line_num>: 136,138
public double getRight() { [EOL]     return this.right; [EOL] } <line_num>: 145,147
public void setRight(double space) { [EOL]     this.right = space; [EOL] } <line_num>: 154,156
public void add(double space, RectangleEdge edge) { [EOL]     if (edge == null) { [EOL]         throw new IllegalArgumentException("Null 'edge' argument."); [EOL]     } [EOL]     if (edge == RectangleEdge.TOP) { [EOL]         this.top += space; [EOL]     } else if (edge == RectangleEdge.BOTTOM) { [EOL]         this.bottom += space; [EOL]     } else if (edge == RectangleEdge.LEFT) { [EOL]         this.left += space; [EOL]     } else if (edge == RectangleEdge.RIGHT) { [EOL]         this.right += space; [EOL]     } else { [EOL]         throw new IllegalStateException("Unrecognised 'edge' argument."); [EOL]     } [EOL] } <line_num>: 164,183
public void ensureAtLeast(AxisSpace space) { [EOL]     this.top = Math.max(this.top, space.top); [EOL]     this.bottom = Math.max(this.bottom, space.bottom); [EOL]     this.left = Math.max(this.left, space.left); [EOL]     this.right = Math.max(this.right, space.right); [EOL] } <line_num>: 190,195
public void ensureAtLeast(double space, RectangleEdge edge) { [EOL]     if (edge == RectangleEdge.TOP) { [EOL]         if (this.top < space) { [EOL]             this.top = space; [EOL]         } [EOL]     } else if (edge == RectangleEdge.BOTTOM) { [EOL]         if (this.bottom < space) { [EOL]             this.bottom = space; [EOL]         } [EOL]     } else if (edge == RectangleEdge.LEFT) { [EOL]         if (this.left < space) { [EOL]             this.left = space; [EOL]         } [EOL]     } else if (edge == RectangleEdge.RIGHT) { [EOL]         if (this.right < space) { [EOL]             this.right = space; [EOL]         } [EOL]     } else { [EOL]         throw new IllegalStateException("AxisSpace.ensureAtLeast(): unrecognised AxisLocation."); [EOL]     } [EOL] } <line_num>: 204,230
public Rectangle2D shrink(Rectangle2D area, Rectangle2D result) { [EOL]     if (result == null) { [EOL]         result = new Rectangle2D.Double(); [EOL]     } [EOL]     result.setRect(area.getX() + this.left, area.getY() + this.top, area.getWidth() - this.left - this.right, area.getHeight() - this.top - this.bottom); [EOL]     return result; [EOL] } <line_num>: 240,251
public Rectangle2D expand(Rectangle2D area, Rectangle2D result) { [EOL]     if (result == null) { [EOL]         result = new Rectangle2D.Double(); [EOL]     } [EOL]     result.setRect(area.getX() - this.left, area.getY() - this.top, area.getWidth() + this.left + this.right, area.getHeight() + this.top + this.bottom); [EOL]     return result; [EOL] } <line_num>: 261,272
public Rectangle2D reserved(Rectangle2D area, RectangleEdge edge) { [EOL]     Rectangle2D result = null; [EOL]     if (edge == RectangleEdge.TOP) { [EOL]         result = new Rectangle2D.Double(area.getX(), area.getY(), area.getWidth(), this.top); [EOL]     } else if (edge == RectangleEdge.BOTTOM) { [EOL]         result = new Rectangle2D.Double(area.getX(), area.getMaxY() - this.top, area.getWidth(), this.bottom); [EOL]     } else if (edge == RectangleEdge.LEFT) { [EOL]         result = new Rectangle2D.Double(area.getX(), area.getY(), this.left, area.getHeight()); [EOL]     } else if (edge == RectangleEdge.RIGHT) { [EOL]         result = new Rectangle2D.Double(area.getMaxX() - this.right, area.getY(), this.right, area.getHeight()); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 282,307
public Object clone() throws CloneNotSupportedException { [EOL]     return super.clone(); [EOL] } <line_num>: 317,319
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof AxisSpace)) { [EOL]         return false; [EOL]     } [EOL]     AxisSpace that = (AxisSpace) obj; [EOL]     if (this.top != that.top) { [EOL]         return false; [EOL]     } [EOL]     if (this.bottom != that.bottom) { [EOL]         return false; [EOL]     } [EOL]     if (this.left != that.left) { [EOL]         return false; [EOL]     } [EOL]     if (this.right != that.right) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 328,349
public int hashCode() { [EOL]     int result = 23; [EOL]     long l = Double.doubleToLongBits(this.top); [EOL]     result = 37 * result + (int) (l ^ (l >>> 32)); [EOL]     l = Double.doubleToLongBits(this.bottom); [EOL]     result = 37 * result + (int) (l ^ (l >>> 32)); [EOL]     l = Double.doubleToLongBits(this.left); [EOL]     result = 37 * result + (int) (l ^ (l >>> 32)); [EOL]     l = Double.doubleToLongBits(this.right); [EOL]     result = 37 * result + (int) (l ^ (l >>> 32)); [EOL]     return result; [EOL] } <line_num>: 356,367
public String toString() { [EOL]     return super.toString() + "[left=" + this.left + ",right=" + this.right + ",top=" + this.top + ",bottom=" + this.bottom + "]"; [EOL] } <line_num>: 374,377
