public LogAxis() { [EOL]     this(null); [EOL] } <line_num>: 113,115
public LogAxis(String label) { [EOL]     super(label, createLogTickUnits(Locale.getDefault())); [EOL]     setDefaultAutoRange(new Range(0.01, 1.0)); [EOL]     this.tickUnit = new NumberTickUnit(1.0, new DecimalFormat("0.#"), 9); [EOL] } <line_num>: 122,126
public double getBase() { [EOL]     return this.base; [EOL] } <line_num>: 135,137
public void setBase(double base) { [EOL]     if (base <= 1.0) { [EOL]         throw new IllegalArgumentException("Requires 'base' > 1.0."); [EOL]     } [EOL]     this.base = base; [EOL]     this.baseLog = Math.log(base); [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 147,154
public double getSmallestValue() { [EOL]     return this.smallestValue; [EOL] } <line_num>: 163,165
public void setSmallestValue(double value) { [EOL]     if (value <= 0.0) { [EOL]         throw new IllegalArgumentException("Requires 'value' > 0.0."); [EOL]     } [EOL]     this.smallestValue = value; [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 175,181
public NumberTickUnit getTickUnit() { [EOL]     return this.tickUnit; [EOL] } <line_num>: 190,192
public void setTickUnit(NumberTickUnit unit) { [EOL]     setTickUnit(unit, true, true); [EOL] } <line_num>: 205,208
public void setTickUnit(NumberTickUnit unit, boolean notify, boolean turnOffAutoSelect) { [EOL]     if (unit == null) { [EOL]         throw new IllegalArgumentException("Null 'unit' argument."); [EOL]     } [EOL]     this.tickUnit = unit; [EOL]     if (turnOffAutoSelect) { [EOL]         setAutoTickUnitSelection(false, false); [EOL]     } [EOL]     if (notify) { [EOL]         notifyListeners(new AxisChangeEvent(this)); [EOL]     } [EOL] } <line_num>: 223,237
public NumberFormat getNumberFormatOverride() { [EOL]     return this.numberFormatOverride; [EOL] } <line_num>: 247,249
public void setNumberFormatOverride(NumberFormat formatter) { [EOL]     this.numberFormatOverride = formatter; [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 259,262
public double calculateLog(double value) { [EOL]     return Math.log(value) / this.baseLog; [EOL] } <line_num>: 274,276
public double calculateValue(double log) { [EOL]     return Math.pow(this.base, log); [EOL] } <line_num>: 288,290
public double java2DToValue(double java2DValue, Rectangle2D area, RectangleEdge edge) { [EOL]     Range range = getRange(); [EOL]     double axisMin = calculateLog(range.getLowerBound()); [EOL]     double axisMax = calculateLog(range.getUpperBound()); [EOL]     double min = 0.0; [EOL]     double max = 0.0; [EOL]     if (RectangleEdge.isTopOrBottom(edge)) { [EOL]         min = area.getX(); [EOL]         max = area.getMaxX(); [EOL]     } else if (RectangleEdge.isLeftOrRight(edge)) { [EOL]         min = area.getMaxY(); [EOL]         max = area.getY(); [EOL]     } [EOL]     double log = 0.0; [EOL]     if (isInverted()) { [EOL]         log = axisMax - (java2DValue - min) / (max - min) * (axisMax - axisMin); [EOL]     } else { [EOL]         log = axisMin + (java2DValue - min) / (max - min) * (axisMax - axisMin); [EOL]     } [EOL]     return calculateValue(log); [EOL] } <line_num>: 302,329
public double valueToJava2D(double value, Rectangle2D area, RectangleEdge edge) { [EOL]     Range range = getRange(); [EOL]     double axisMin = calculateLog(range.getLowerBound()); [EOL]     double axisMax = calculateLog(range.getUpperBound()); [EOL]     value = calculateLog(value); [EOL]     double min = 0.0; [EOL]     double max = 0.0; [EOL]     if (RectangleEdge.isTopOrBottom(edge)) { [EOL]         min = area.getX(); [EOL]         max = area.getMaxX(); [EOL]     } else if (RectangleEdge.isLeftOrRight(edge)) { [EOL]         max = area.getMinY(); [EOL]         min = area.getMaxY(); [EOL]     } [EOL]     if (isInverted()) { [EOL]         return max - ((value - axisMin) / (axisMax - axisMin)) * (max - min); [EOL]     } else { [EOL]         return min + ((value - axisMin) / (axisMax - axisMin)) * (max - min); [EOL]     } [EOL] } <line_num>: 342,368
public void configure() { [EOL]     if (isAutoRange()) { [EOL]         autoAdjustRange(); [EOL]     } [EOL] } <line_num>: 374,378
protected void autoAdjustRange() { [EOL]     Plot plot = getPlot(); [EOL]     if (plot == null) { [EOL]         return; [EOL]     } [EOL]     if (plot instanceof ValueAxisPlot) { [EOL]         ValueAxisPlot vap = (ValueAxisPlot) plot; [EOL]         Range r = vap.getDataRange(this); [EOL]         if (r == null) { [EOL]             r = getDefaultAutoRange(); [EOL]         } [EOL]         double upper = r.getUpperBound(); [EOL]         double lower = Math.max(r.getLowerBound(), this.smallestValue); [EOL]         double range = upper - lower; [EOL]         double fixedAutoRange = getFixedAutoRange(); [EOL]         if (fixedAutoRange > 0.0) { [EOL]             lower = Math.max(upper - fixedAutoRange, this.smallestValue); [EOL]         } else { [EOL]             double minRange = getAutoRangeMinimumSize(); [EOL]             if (range < minRange) { [EOL]                 double expand = (minRange - range) / 2; [EOL]                 upper = upper + expand; [EOL]                 lower = lower - expand; [EOL]             } [EOL]             double logUpper = calculateLog(upper); [EOL]             double logLower = calculateLog(lower); [EOL]             double logRange = logUpper - logLower; [EOL]             logUpper = logUpper + getUpperMargin() * logRange; [EOL]             logLower = logLower - getLowerMargin() * logRange; [EOL]             upper = calculateValue(logUpper); [EOL]             lower = calculateValue(logLower); [EOL]         } [EOL]         setRange(new Range(lower, upper), false, false); [EOL]     } [EOL] } <line_num>: 384,429
public AxisState draw(Graphics2D g2, double cursor, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, PlotRenderingInfo plotState) { [EOL]     AxisState state = null; [EOL]     if (!isVisible()) { [EOL]         state = new AxisState(cursor); [EOL]         List ticks = refreshTicks(g2, state, dataArea, edge); [EOL]         state.setTicks(ticks); [EOL]         return state; [EOL]     } [EOL]     state = drawTickMarksAndLabels(g2, cursor, plotArea, dataArea, edge, plotState); [EOL]     state = drawLabel(getLabel(), g2, plotArea, dataArea, edge, state, plotState); [EOL]     createAndAddEntity(cursor, state, dataArea, edge, plotState); [EOL]     return state; [EOL] } <line_num>: 445,465
public List refreshTicks(Graphics2D g2, AxisState state, Rectangle2D dataArea, RectangleEdge edge) { [EOL]     List result = new java.util.ArrayList(); [EOL]     if (RectangleEdge.isTopOrBottom(edge)) { [EOL]         result = refreshTicksHorizontal(g2, dataArea, edge); [EOL]     } else if (RectangleEdge.isLeftOrRight(edge)) { [EOL]         result = refreshTicksVertical(g2, dataArea, edge); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 479,491
protected List refreshTicksHorizontal(Graphics2D g2, Rectangle2D dataArea, RectangleEdge edge) { [EOL]     Range range = getRange(); [EOL]     List ticks = new ArrayList(); [EOL]     Font tickLabelFont = getTickLabelFont(); [EOL]     g2.setFont(tickLabelFont); [EOL]     TextAnchor textAnchor; [EOL]     if (edge == RectangleEdge.TOP) { [EOL]         textAnchor = TextAnchor.BOTTOM_CENTER; [EOL]     } else { [EOL]         textAnchor = TextAnchor.TOP_CENTER; [EOL]     } [EOL]     if (isAutoTickUnitSelection()) { [EOL]         selectAutoTickUnit(g2, dataArea, edge); [EOL]     } [EOL]     int minorTickCount = this.tickUnit.getMinorTickCount(); [EOL]     double start = Math.floor(calculateLog(getLowerBound())); [EOL]     double end = Math.ceil(calculateLog(getUpperBound())); [EOL]     double current = start; [EOL]     while (current <= end) { [EOL]         double v = calculateValue(current); [EOL]         if (range.contains(v)) { [EOL]             ticks.add(new NumberTick(TickType.MAJOR, v, createTickLabel(v), textAnchor, TextAnchor.CENTER, 0.0)); [EOL]         } [EOL]         double next = Math.pow(this.base, current + this.tickUnit.getSize()); [EOL]         for (int i = 1; i < minorTickCount; i++) { [EOL]             double minorV = v + i * ((next - v) / minorTickCount); [EOL]             if (range.contains(minorV)) { [EOL]                 ticks.add(new NumberTick(TickType.MINOR, minorV, "", textAnchor, TextAnchor.CENTER, 0.0)); [EOL]             } [EOL]         } [EOL]         current = current + this.tickUnit.getSize(); [EOL]     } [EOL]     return ticks; [EOL] } <line_num>: 502,543
protected List refreshTicksVertical(Graphics2D g2, Rectangle2D dataArea, RectangleEdge edge) { [EOL]     Range range = getRange(); [EOL]     List ticks = new ArrayList(); [EOL]     Font tickLabelFont = getTickLabelFont(); [EOL]     g2.setFont(tickLabelFont); [EOL]     TextAnchor textAnchor; [EOL]     if (edge == RectangleEdge.RIGHT) { [EOL]         textAnchor = TextAnchor.CENTER_LEFT; [EOL]     } else { [EOL]         textAnchor = TextAnchor.CENTER_RIGHT; [EOL]     } [EOL]     if (isAutoTickUnitSelection()) { [EOL]         selectAutoTickUnit(g2, dataArea, edge); [EOL]     } [EOL]     int minorTickCount = this.tickUnit.getMinorTickCount(); [EOL]     double start = Math.floor(calculateLog(getLowerBound())); [EOL]     double end = Math.ceil(calculateLog(getUpperBound())); [EOL]     double current = start; [EOL]     while (current <= end) { [EOL]         double v = calculateValue(current); [EOL]         if (range.contains(v)) { [EOL]             ticks.add(new NumberTick(TickType.MAJOR, v, createTickLabel(v), textAnchor, TextAnchor.CENTER, 0.0)); [EOL]         } [EOL]         double next = Math.pow(this.base, current + this.tickUnit.getSize()); [EOL]         for (int i = 1; i < minorTickCount; i++) { [EOL]             double minorV = v + i * ((next - v) / minorTickCount); [EOL]             if (range.contains(minorV)) { [EOL]                 ticks.add(new NumberTick(TickType.MINOR, minorV, "", textAnchor, TextAnchor.CENTER, 0.0)); [EOL]             } [EOL]         } [EOL]         current = current + this.tickUnit.getSize(); [EOL]     } [EOL]     return ticks; [EOL] } <line_num>: 554,595
protected void selectAutoTickUnit(Graphics2D g2, Rectangle2D dataArea, RectangleEdge edge) { [EOL]     if (RectangleEdge.isTopOrBottom(edge)) { [EOL]         selectHorizontalAutoTickUnit(g2, dataArea, edge); [EOL]     } else if (RectangleEdge.isLeftOrRight(edge)) { [EOL]         selectVerticalAutoTickUnit(g2, dataArea, edge); [EOL]     } [EOL] } <line_num>: 608,618
protected void selectHorizontalAutoTickUnit(Graphics2D g2, Rectangle2D dataArea, RectangleEdge edge) { [EOL]     double tickLabelWidth = estimateMaximumTickLabelWidth(g2, getTickUnit()); [EOL]     TickUnitSource tickUnits = getStandardTickUnits(); [EOL]     TickUnit unit1 = tickUnits.getCeilingTickUnit(getTickUnit()); [EOL]     double unit1Width = exponentLengthToJava2D(unit1.getSize(), dataArea, edge); [EOL]     double guess = (tickLabelWidth / unit1Width) * unit1.getSize(); [EOL]     NumberTickUnit unit2 = (NumberTickUnit) tickUnits.getCeilingTickUnit(guess); [EOL]     double unit2Width = exponentLengthToJava2D(unit2.getSize(), dataArea, edge); [EOL]     tickLabelWidth = estimateMaximumTickLabelWidth(g2, unit2); [EOL]     if (tickLabelWidth > unit2Width) { [EOL]         unit2 = (NumberTickUnit) tickUnits.getLargerTickUnit(unit2); [EOL]     } [EOL]     setTickUnit(unit2, false, false); [EOL] } <line_num>: 631,658
public double exponentLengthToJava2D(double length, Rectangle2D area, RectangleEdge edge) { [EOL]     double one = valueToJava2D(calculateValue(1.0), area, edge); [EOL]     double l = valueToJava2D(calculateValue(length + 1.0), area, edge); [EOL]     return Math.abs(l - one); [EOL] } <line_num>: 672,677
protected void selectVerticalAutoTickUnit(Graphics2D g2, Rectangle2D dataArea, RectangleEdge edge) { [EOL]     double tickLabelHeight = estimateMaximumTickLabelHeight(g2); [EOL]     TickUnitSource tickUnits = getStandardTickUnits(); [EOL]     TickUnit unit1 = tickUnits.getCeilingTickUnit(getTickUnit()); [EOL]     double unitHeight = exponentLengthToJava2D(unit1.getSize(), dataArea, edge); [EOL]     double guess = (tickLabelHeight / unitHeight) * unit1.getSize(); [EOL]     NumberTickUnit unit2 = (NumberTickUnit) tickUnits.getCeilingTickUnit(guess); [EOL]     double unit2Height = exponentLengthToJava2D(unit2.getSize(), dataArea, edge); [EOL]     tickLabelHeight = estimateMaximumTickLabelHeight(g2); [EOL]     if (tickLabelHeight > unit2Height) { [EOL]         unit2 = (NumberTickUnit) tickUnits.getLargerTickUnit(unit2); [EOL]     } [EOL]     setTickUnit(unit2, false, false); [EOL] } <line_num>: 690,717
protected double estimateMaximumTickLabelHeight(Graphics2D g2) { [EOL]     RectangleInsets tickLabelInsets = getTickLabelInsets(); [EOL]     double result = tickLabelInsets.getTop() + tickLabelInsets.getBottom(); [EOL]     Font tickLabelFont = getTickLabelFont(); [EOL]     FontRenderContext frc = g2.getFontRenderContext(); [EOL]     result += tickLabelFont.getLineMetrics("123", frc).getHeight(); [EOL]     return result; [EOL] } <line_num>: 728,738
protected double estimateMaximumTickLabelWidth(Graphics2D g2, TickUnit unit) { [EOL]     RectangleInsets tickLabelInsets = getTickLabelInsets(); [EOL]     double result = tickLabelInsets.getLeft() + tickLabelInsets.getRight(); [EOL]     if (isVerticalTickLabels()) { [EOL]         FontRenderContext frc = g2.getFontRenderContext(); [EOL]         LineMetrics lm = getTickLabelFont().getLineMetrics("0", frc); [EOL]         result += lm.getHeight(); [EOL]     } else { [EOL]         FontMetrics fm = g2.getFontMetrics(getTickLabelFont()); [EOL]         Range range = getRange(); [EOL]         double lower = range.getLowerBound(); [EOL]         double upper = range.getUpperBound(); [EOL]         String lowerStr = ""; [EOL]         String upperStr = ""; [EOL]         NumberFormat formatter = getNumberFormatOverride(); [EOL]         if (formatter != null) { [EOL]             lowerStr = formatter.format(lower); [EOL]             upperStr = formatter.format(upper); [EOL]         } else { [EOL]             lowerStr = unit.valueToString(lower); [EOL]             upperStr = unit.valueToString(upper); [EOL]         } [EOL]         double w1 = fm.stringWidth(lowerStr); [EOL]         double w2 = fm.stringWidth(upperStr); [EOL]         result += Math.max(w1, w2); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 755,792
public void zoomRange(double lowerPercent, double upperPercent) { [EOL]     Range range = getRange(); [EOL]     double start = range.getLowerBound(); [EOL]     double end = range.getUpperBound(); [EOL]     double log1 = calculateLog(start); [EOL]     double log2 = calculateLog(end); [EOL]     double length = log2 - log1; [EOL]     Range adjusted = null; [EOL]     if (isInverted()) { [EOL]         double logA = log1 + length * (1 - upperPercent); [EOL]         double logB = log1 + length * (1 - lowerPercent); [EOL]         adjusted = new Range(calculateValue(logA), calculateValue(logB)); [EOL]     } else { [EOL]         double logA = log1 + length * lowerPercent; [EOL]         double logB = log1 + length * upperPercent; [EOL]         adjusted = new Range(calculateValue(logA), calculateValue(logB)); [EOL]     } [EOL]     setRange(adjusted); [EOL] } <line_num>: 800,819
public void pan(double percent) { [EOL]     Range range = getRange(); [EOL]     double lower = range.getLowerBound(); [EOL]     double upper = range.getUpperBound(); [EOL]     double log1 = calculateLog(lower); [EOL]     double log2 = calculateLog(upper); [EOL]     double length = log2 - log1; [EOL]     double adj = length * percent; [EOL]     log1 = log1 + adj; [EOL]     log2 = log2 + adj; [EOL]     setRange(calculateValue(log1), calculateValue(log2)); [EOL] } <line_num>: 828,839
protected String createTickLabel(double value) { [EOL]     if (this.numberFormatOverride != null) { [EOL]         return this.numberFormatOverride.format(value); [EOL]     } else { [EOL]         return this.tickUnit.valueToString(value); [EOL]     } [EOL] } <line_num>: 851,858
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof LogAxis)) { [EOL]         return false; [EOL]     } [EOL]     LogAxis that = (LogAxis) obj; [EOL]     if (this.base != that.base) { [EOL]         return false; [EOL]     } [EOL]     if (this.smallestValue != that.smallestValue) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 867,882
public int hashCode() { [EOL]     int result = 193; [EOL]     long temp = Double.doubleToLongBits(this.base); [EOL]     result = 37 * result + (int) (temp ^ (temp >>> 32)); [EOL]     temp = Double.doubleToLongBits(this.smallestValue); [EOL]     result = 37 * result + (int) (temp ^ (temp >>> 32)); [EOL]     if (this.numberFormatOverride != null) { [EOL]         result = 37 * result + this.numberFormatOverride.hashCode(); [EOL]     } [EOL]     result = 37 * result + this.tickUnit.hashCode(); [EOL]     return result; [EOL] } <line_num>: 889,900
public static TickUnitSource createLogTickUnits(Locale locale) { [EOL]     TickUnits units = new TickUnits(); [EOL]     NumberFormat numberFormat = new LogFormat(); [EOL]     units.add(new NumberTickUnit(0.05, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(0.1, numberFormat, 10)); [EOL]     units.add(new NumberTickUnit(0.2, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(0.5, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(1, numberFormat, 10)); [EOL]     units.add(new NumberTickUnit(2, numberFormat, 10)); [EOL]     units.add(new NumberTickUnit(3, numberFormat, 15)); [EOL]     units.add(new NumberTickUnit(4, numberFormat, 20)); [EOL]     units.add(new NumberTickUnit(5, numberFormat, 25)); [EOL]     units.add(new NumberTickUnit(6, numberFormat)); [EOL]     units.add(new NumberTickUnit(7, numberFormat)); [EOL]     units.add(new NumberTickUnit(8, numberFormat)); [EOL]     units.add(new NumberTickUnit(9, numberFormat)); [EOL]     units.add(new NumberTickUnit(10, numberFormat)); [EOL]     return units; [EOL] } <line_num>: 912,930
