public MonthDateFormat() { [EOL]     this(TimeZone.getDefault()); [EOL] } <line_num>: 76,78
public MonthDateFormat(TimeZone zone) { [EOL]     this(zone, Locale.getDefault(), 1, true, false); [EOL] } <line_num>: 85,87
public MonthDateFormat(Locale locale) { [EOL]     this(TimeZone.getDefault(), locale, 1, true, false); [EOL] } <line_num>: 95,97
public MonthDateFormat(TimeZone zone, int chars) { [EOL]     this(zone, Locale.getDefault(), chars, true, false); [EOL] } <line_num>: 108,110
public MonthDateFormat(Locale locale, int chars) { [EOL]     this(TimeZone.getDefault(), locale, chars, true, false); [EOL] } <line_num>: 121,123
public MonthDateFormat(TimeZone zone, Locale locale, int chars, boolean showYearForJan, boolean showYearForDec) { [EOL]     this(zone, locale, chars, new boolean[] { showYearForJan, false, false, false, false, false, false, false, false, false, false, false, showYearForDec }, new SimpleDateFormat("yy")); [EOL] } <line_num>: 142,147
public MonthDateFormat(TimeZone zone, Locale locale, int chars, boolean[] showYear, DateFormat yearFormatter) { [EOL]     if (locale == null) { [EOL]         throw new IllegalArgumentException("Null 'locale' argument."); [EOL]     } [EOL]     DateFormatSymbols dfs = new DateFormatSymbols(locale); [EOL]     String[] monthsFromLocale = dfs.getMonths(); [EOL]     this.months = new String[12]; [EOL]     for (int i = 0; i < 12; i++) { [EOL]         if (chars > 0) { [EOL]             this.months[i] = monthsFromLocale[i].substring(0, Math.min(chars, monthsFromLocale[i].length())); [EOL]         } else { [EOL]             this.months[i] = monthsFromLocale[i]; [EOL]         } [EOL]     } [EOL]     this.calendar = new GregorianCalendar(zone); [EOL]     this.showYear = showYear; [EOL]     this.yearFormatter = yearFormatter; [EOL]     this.numberFormat = NumberFormat.getNumberInstance(); [EOL] } <line_num>: 163,188
public StringBuffer format(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition) { [EOL]     this.calendar.setTime(date); [EOL]     int month = this.calendar.get(Calendar.MONTH); [EOL]     toAppendTo.append(this.months[month]); [EOL]     if (this.showYear[month]) { [EOL]         toAppendTo.append(this.yearFormatter.format(date)); [EOL]     } [EOL]     return toAppendTo; [EOL] } <line_num>: 199,208
public Date parse(String source, ParsePosition pos) { [EOL]     return null; [EOL] } <line_num>: 218,220
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof MonthDateFormat)) { [EOL]         return false; [EOL]     } [EOL]     if (!super.equals(obj)) { [EOL]         return false; [EOL]     } [EOL]     MonthDateFormat that = (MonthDateFormat) obj; [EOL]     if (!Arrays.equals(this.months, that.months)) { [EOL]         return false; [EOL]     } [EOL]     if (!Arrays.equals(this.showYear, that.showYear)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.yearFormatter.equals(that.yearFormatter)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 229,250
public static void main(String[] args) { [EOL]     MonthDateFormat mdf = new MonthDateFormat(Locale.UK, 2); [EOL]     System.out.println("UK:"); [EOL]     System.out.println(mdf.format(new Month(1, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(2, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(3, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(4, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(5, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(6, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(7, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(8, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(9, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(10, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(11, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(12, 2005).getStart())); [EOL]     System.out.println(); [EOL]     mdf = new MonthDateFormat(Locale.GERMANY, 2); [EOL]     System.out.println("GERMANY:"); [EOL]     System.out.println(mdf.format(new Month(1, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(2, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(3, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(4, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(5, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(6, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(7, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(8, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(9, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(10, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(11, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(12, 2005).getStart())); [EOL]     System.out.println(); [EOL]     mdf = new MonthDateFormat(Locale.FRANCE, 2); [EOL]     System.out.println("FRANCE:"); [EOL]     System.out.println(mdf.format(new Month(1, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(2, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(3, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(4, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(5, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(6, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(7, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(8, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(9, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(10, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(11, 2005).getStart())); [EOL]     System.out.println(mdf.format(new Month(12, 2005).getStart())); [EOL]     System.out.println(); [EOL]     SimpleDateFormat sdf = new SimpleDateFormat("yyyy"); [EOL]     sdf.setNumberFormat(null); [EOL]     System.out.println(sdf.equals("X")); [EOL] } <line_num>: 257,309
