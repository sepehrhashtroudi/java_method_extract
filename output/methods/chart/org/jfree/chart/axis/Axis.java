protected Axis(String label) { [EOL]     this.label = label; [EOL]     this.visible = DEFAULT_AXIS_VISIBLE; [EOL]     this.labelFont = DEFAULT_AXIS_LABEL_FONT; [EOL]     this.labelPaint = DEFAULT_AXIS_LABEL_PAINT; [EOL]     this.labelInsets = DEFAULT_AXIS_LABEL_INSETS; [EOL]     this.labelAngle = 0.0; [EOL]     this.labelToolTip = null; [EOL]     this.labelURL = null; [EOL]     this.axisLineVisible = true; [EOL]     this.axisLinePaint = DEFAULT_AXIS_LINE_PAINT; [EOL]     this.axisLineStroke = DEFAULT_AXIS_LINE_STROKE; [EOL]     this.tickLabelsVisible = DEFAULT_TICK_LABELS_VISIBLE; [EOL]     this.tickLabelFont = DEFAULT_TICK_LABEL_FONT; [EOL]     this.tickLabelPaint = DEFAULT_TICK_LABEL_PAINT; [EOL]     this.tickLabelInsets = DEFAULT_TICK_LABEL_INSETS; [EOL]     this.tickMarksVisible = DEFAULT_TICK_MARKS_VISIBLE; [EOL]     this.tickMarkStroke = DEFAULT_TICK_MARK_STROKE; [EOL]     this.tickMarkPaint = DEFAULT_TICK_MARK_PAINT; [EOL]     this.tickMarkInsideLength = DEFAULT_TICK_MARK_INSIDE_LENGTH; [EOL]     this.tickMarkOutsideLength = DEFAULT_TICK_MARK_OUTSIDE_LENGTH; [EOL]     this.minorTickMarksVisible = false; [EOL]     this.minorTickMarkInsideLength = 0.0f; [EOL]     this.minorTickMarkOutsideLength = 2.0f; [EOL]     this.plot = null; [EOL]     this.listenerList = new EventListenerList(); [EOL] } <line_num>: 307,341
public boolean isVisible() { [EOL]     return this.visible; [EOL] } <line_num>: 351,353
public void setVisible(boolean flag) { [EOL]     if (flag != this.visible) { [EOL]         this.visible = flag; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 363,368
public String getLabel() { [EOL]     return this.label; [EOL] } <line_num>: 379,381
public void setLabel(String label) { [EOL]     String existing = this.label; [EOL]     if (existing != null) { [EOL]         if (!existing.equals(label)) { [EOL]             this.label = label; [EOL]             fireChangeEvent(); [EOL]         } [EOL]     } else { [EOL]         if (label != null) { [EOL]             this.label = label; [EOL]             fireChangeEvent(); [EOL]         } [EOL]     } [EOL] } <line_num>: 393,409
public Font getLabelFont() { [EOL]     return this.labelFont; [EOL] } <line_num>: 418,420
public void setLabelFont(Font font) { [EOL]     if (font == null) { [EOL]         throw new IllegalArgumentException("Null 'font' argument."); [EOL]     } [EOL]     if (!this.labelFont.equals(font)) { [EOL]         this.labelFont = font; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 430,438
public Paint getLabelPaint() { [EOL]     return this.labelPaint; [EOL] } <line_num>: 447,449
public void setLabelPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.labelPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 459,465
public RectangleInsets getLabelInsets() { [EOL]     return this.labelInsets; [EOL] } <line_num>: 475,477
public void setLabelInsets(RectangleInsets insets) { [EOL]     setLabelInsets(insets, true); [EOL] } <line_num>: 487,489
public void setLabelInsets(RectangleInsets insets, boolean notify) { [EOL]     if (insets == null) { [EOL]         throw new IllegalArgumentException("Null 'insets' argument."); [EOL]     } [EOL]     if (!insets.equals(this.labelInsets)) { [EOL]         this.labelInsets = insets; [EOL]         if (notify) { [EOL]             fireChangeEvent(); [EOL]         } [EOL]     } [EOL] } <line_num>: 500,510
public double getLabelAngle() { [EOL]     return this.labelAngle; [EOL] } <line_num>: 519,521
public void setLabelAngle(double angle) { [EOL]     this.labelAngle = angle; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 531,534
public String getLabelToolTip() { [EOL]     return this.labelToolTip; [EOL] } <line_num>: 545,547
public void setLabelToolTip(String text) { [EOL]     this.labelToolTip = text; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 559,562
public String getLabelURL() { [EOL]     return this.labelURL; [EOL] } <line_num>: 573,575
public void setLabelURL(String url) { [EOL]     this.labelURL = url; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 587,590
public boolean isAxisLineVisible() { [EOL]     return this.axisLineVisible; [EOL] } <line_num>: 601,603
public void setAxisLineVisible(boolean visible) { [EOL]     this.axisLineVisible = visible; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 615,618
public Paint getAxisLinePaint() { [EOL]     return this.axisLinePaint; [EOL] } <line_num>: 627,629
public void setAxisLinePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.axisLinePaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 639,645
public Stroke getAxisLineStroke() { [EOL]     return this.axisLineStroke; [EOL] } <line_num>: 654,656
public void setAxisLineStroke(Stroke stroke) { [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' argument."); [EOL]     } [EOL]     this.axisLineStroke = stroke; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 666,672
public boolean isTickLabelsVisible() { [EOL]     return this.tickLabelsVisible; [EOL] } <line_num>: 683,685
public void setTickLabelsVisible(boolean flag) { [EOL]     if (flag != this.tickLabelsVisible) { [EOL]         this.tickLabelsVisible = flag; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 698,705
public boolean isMinorTickMarksVisible() { [EOL]     return this.minorTickMarksVisible; [EOL] } <line_num>: 718,720
public void setMinorTickMarksVisible(boolean flag) { [EOL]     if (flag != this.minorTickMarksVisible) { [EOL]         this.minorTickMarksVisible = flag; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 733,738
public Font getTickLabelFont() { [EOL]     return this.tickLabelFont; [EOL] } <line_num>: 747,749
public void setTickLabelFont(Font font) { [EOL]     if (font == null) { [EOL]         throw new IllegalArgumentException("Null 'font' argument."); [EOL]     } [EOL]     if (!this.tickLabelFont.equals(font)) { [EOL]         this.tickLabelFont = font; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 759,770
public Paint getTickLabelPaint() { [EOL]     return this.tickLabelPaint; [EOL] } <line_num>: 779,781
public void setTickLabelPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.tickLabelPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 791,797
public RectangleInsets getTickLabelInsets() { [EOL]     return this.tickLabelInsets; [EOL] } <line_num>: 806,808
public void setTickLabelInsets(RectangleInsets insets) { [EOL]     if (insets == null) { [EOL]         throw new IllegalArgumentException("Null 'insets' argument."); [EOL]     } [EOL]     if (!this.tickLabelInsets.equals(insets)) { [EOL]         this.tickLabelInsets = insets; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 818,826
public boolean isTickMarksVisible() { [EOL]     return this.tickMarksVisible; [EOL] } <line_num>: 837,839
public void setTickMarksVisible(boolean flag) { [EOL]     if (flag != this.tickMarksVisible) { [EOL]         this.tickMarksVisible = flag; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 849,854
public float getTickMarkInsideLength() { [EOL]     return this.tickMarkInsideLength; [EOL] } <line_num>: 864,866
public void setTickMarkInsideLength(float length) { [EOL]     this.tickMarkInsideLength = length; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 876,879
public float getTickMarkOutsideLength() { [EOL]     return this.tickMarkOutsideLength; [EOL] } <line_num>: 889,891
public void setTickMarkOutsideLength(float length) { [EOL]     this.tickMarkOutsideLength = length; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 901,904
public Stroke getTickMarkStroke() { [EOL]     return this.tickMarkStroke; [EOL] } <line_num>: 913,915
public void setTickMarkStroke(Stroke stroke) { [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' argument."); [EOL]     } [EOL]     if (!this.tickMarkStroke.equals(stroke)) { [EOL]         this.tickMarkStroke = stroke; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 925,933
public Paint getTickMarkPaint() { [EOL]     return this.tickMarkPaint; [EOL] } <line_num>: 942,944
public void setTickMarkPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.tickMarkPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 954,960
public float getMinorTickMarkInsideLength() { [EOL]     return this.minorTickMarkInsideLength; [EOL] } <line_num>: 972,974
public void setMinorTickMarkInsideLength(float length) { [EOL]     this.minorTickMarkInsideLength = length; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 986,989
public float getMinorTickMarkOutsideLength() { [EOL]     return this.minorTickMarkOutsideLength; [EOL] } <line_num>: 1001,1003
public void setMinorTickMarkOutsideLength(float length) { [EOL]     this.minorTickMarkOutsideLength = length; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 1015,1018
public Plot getPlot() { [EOL]     return this.plot; [EOL] } <line_num>: 1029,1031
public void setPlot(Plot plot) { [EOL]     this.plot = plot; [EOL]     configure(); [EOL] } <line_num>: 1042,1045
public double getFixedDimension() { [EOL]     return this.fixedDimension; [EOL] } <line_num>: 1054,1056
public void setFixedDimension(double dimension) { [EOL]     this.fixedDimension = dimension; [EOL] } <line_num>: 1071,1073
public abstract void configure(); <line_num>: 1079,1079
public abstract AxisSpace reserveSpace(Graphics2D g2, Plot plot, Rectangle2D plotArea, RectangleEdge edge, AxisSpace space); <line_num>: 1094,1097
public abstract AxisState draw(Graphics2D g2, double cursor, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, PlotRenderingInfo plotState); <line_num>: 1113,1118
public abstract List refreshTicks(Graphics2D g2, AxisState state, Rectangle2D dataArea, RectangleEdge edge); <line_num>: 1131,1132
protected void createAndAddEntity(double cursor, AxisState state, Rectangle2D dataArea, RectangleEdge edge, PlotRenderingInfo plotState) { [EOL]     if (plotState == null || plotState.getOwner() == null) { [EOL]         return; [EOL]     } [EOL]     Rectangle2D hotspot = null; [EOL]     if (edge.equals(RectangleEdge.TOP)) { [EOL]         hotspot = new Rectangle2D.Double(dataArea.getX(), state.getCursor(), dataArea.getWidth(), cursor - state.getCursor()); [EOL]     } else if (edge.equals(RectangleEdge.BOTTOM)) { [EOL]         hotspot = new Rectangle2D.Double(dataArea.getX(), cursor, dataArea.getWidth(), state.getCursor() - cursor); [EOL]     } else if (edge.equals(RectangleEdge.LEFT)) { [EOL]         hotspot = new Rectangle2D.Double(state.getCursor(), dataArea.getY(), cursor - state.getCursor(), dataArea.getHeight()); [EOL]     } else if (edge.equals(RectangleEdge.RIGHT)) { [EOL]         hotspot = new Rectangle2D.Double(cursor, dataArea.getY(), state.getCursor() - cursor, dataArea.getHeight()); [EOL]     } [EOL]     EntityCollection e = plotState.getOwner().getEntityCollection(); [EOL]     if (e != null) { [EOL]         e.add(new AxisEntity(hotspot, this)); [EOL]     } [EOL] } <line_num>: 1147,1177
public void addChangeListener(AxisChangeListener listener) { [EOL]     this.listenerList.add(AxisChangeListener.class, listener); [EOL] } <line_num>: 1186,1188
public void removeChangeListener(AxisChangeListener listener) { [EOL]     this.listenerList.remove(AxisChangeListener.class, listener); [EOL] } <line_num>: 1197,1199
public boolean hasListener(EventListener listener) { [EOL]     List list = Arrays.asList(this.listenerList.getListenerList()); [EOL]     return list.contains(listener); [EOL] } <line_num>: 1210,1213
protected void notifyListeners(AxisChangeEvent event) { [EOL]     Object[] listeners = this.listenerList.getListenerList(); [EOL]     for (int i = listeners.length - 2; i >= 0; i -= 2) { [EOL]         if (listeners[i] == AxisChangeListener.class) { [EOL]             ((AxisChangeListener) listeners[i + 1]).axisChanged(event); [EOL]         } [EOL]     } [EOL] } <line_num>: 1221,1228
protected void fireChangeEvent() { [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 1235,1237
protected Rectangle2D getLabelEnclosure(Graphics2D g2, RectangleEdge edge) { [EOL]     Rectangle2D result = new Rectangle2D.Double(); [EOL]     String axisLabel = getLabel(); [EOL]     if (axisLabel != null && !axisLabel.equals("")) { [EOL]         FontMetrics fm = g2.getFontMetrics(getLabelFont()); [EOL]         Rectangle2D bounds = TextUtilities.getTextBounds(axisLabel, g2, fm); [EOL]         RectangleInsets insets = getLabelInsets(); [EOL]         bounds = insets.createOutsetRectangle(bounds); [EOL]         double angle = getLabelAngle(); [EOL]         if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) { [EOL]             angle = angle - Math.PI / 2.0; [EOL]         } [EOL]         double x = bounds.getCenterX(); [EOL]         double y = bounds.getCenterY(); [EOL]         AffineTransform transformer = AffineTransform.getRotateInstance(angle, x, y); [EOL]         Shape labelBounds = transformer.createTransformedShape(bounds); [EOL]         result = labelBounds.getBounds2D(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1248,1271
protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) { [EOL]     if (state == null) { [EOL]         throw new IllegalArgumentException("Null 'state' argument."); [EOL]     } [EOL]     if ((label == null) || (label.equals(""))) { [EOL]         return state; [EOL]     } [EOL]     Font font = getLabelFont(); [EOL]     RectangleInsets insets = getLabelInsets(); [EOL]     g2.setFont(font); [EOL]     g2.setPaint(getLabelPaint()); [EOL]     FontMetrics fm = g2.getFontMetrics(); [EOL]     Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm); [EOL]     Shape hotspot = null; [EOL]     if (edge == RectangleEdge.TOP) { [EOL]         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY()); [EOL]         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds); [EOL]         labelBounds = rotatedLabelBounds.getBounds2D(); [EOL]         float w = (float) labelBounds.getWidth(); [EOL]         float h = (float) labelBounds.getHeight(); [EOL]         float labelx = (float) dataArea.getCenterX(); [EOL]         float labely = (float) (state.getCursor() - insets.getBottom() - h / 2.0); [EOL]         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER); [EOL]         hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h); [EOL]         state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom()); [EOL]     } else if (edge == RectangleEdge.BOTTOM) { [EOL]         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY()); [EOL]         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds); [EOL]         labelBounds = rotatedLabelBounds.getBounds2D(); [EOL]         float w = (float) labelBounds.getWidth(); [EOL]         float h = (float) labelBounds.getHeight(); [EOL]         float labelx = (float) dataArea.getCenterX(); [EOL]         float labely = (float) (state.getCursor() + insets.getTop() + h / 2.0); [EOL]         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER); [EOL]         hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h); [EOL]         state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom()); [EOL]     } else if (edge == RectangleEdge.LEFT) { [EOL]         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY()); [EOL]         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds); [EOL]         labelBounds = rotatedLabelBounds.getBounds2D(); [EOL]         float w = (float) labelBounds.getWidth(); [EOL]         float h = (float) labelBounds.getHeight(); [EOL]         float labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0); [EOL]         float labely = (float) dataArea.getCenterY(); [EOL]         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER); [EOL]         hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h); [EOL]         state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight()); [EOL]     } else if (edge == RectangleEdge.RIGHT) { [EOL]         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY()); [EOL]         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds); [EOL]         labelBounds = rotatedLabelBounds.getBounds2D(); [EOL]         float w = (float) labelBounds.getWidth(); [EOL]         float h = (float) labelBounds.getHeight(); [EOL]         float labelx = (float) (state.getCursor() + insets.getLeft() + w / 2.0); [EOL]         float labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0); [EOL]         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER); [EOL]         hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h); [EOL]         state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight()); [EOL]     } [EOL]     if (plotState != null && hotspot != null) { [EOL]         ChartRenderingInfo owner = plotState.getOwner(); [EOL]         if (owner != null) { [EOL]             EntityCollection entities = owner.getEntityCollection(); [EOL]             if (entities != null) { [EOL]                 entities.add(new AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL)); [EOL]             } [EOL]         } [EOL]     } [EOL]     return state; [EOL] } <line_num>: 1286,1396
protected void drawAxisLine(Graphics2D g2, double cursor, Rectangle2D dataArea, RectangleEdge edge) { [EOL]     Line2D axisLine = null; [EOL]     if (edge == RectangleEdge.TOP) { [EOL]         axisLine = new Line2D.Double(dataArea.getX(), cursor, dataArea.getMaxX(), cursor); [EOL]     } else if (edge == RectangleEdge.BOTTOM) { [EOL]         axisLine = new Line2D.Double(dataArea.getX(), cursor, dataArea.getMaxX(), cursor); [EOL]     } else if (edge == RectangleEdge.LEFT) { [EOL]         axisLine = new Line2D.Double(cursor, dataArea.getY(), cursor, dataArea.getMaxY()); [EOL]     } else if (edge == RectangleEdge.RIGHT) { [EOL]         axisLine = new Line2D.Double(cursor, dataArea.getY(), cursor, dataArea.getMaxY()); [EOL]     } [EOL]     g2.setPaint(this.axisLinePaint); [EOL]     g2.setStroke(this.axisLineStroke); [EOL]     g2.draw(axisLine); [EOL] } <line_num>: 1406,1430
public Object clone() throws CloneNotSupportedException { [EOL]     Axis clone = (Axis) super.clone(); [EOL]     clone.plot = null; [EOL]     clone.listenerList = new EventListenerList(); [EOL]     return clone; [EOL] } <line_num>: 1440,1446
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof Axis)) { [EOL]         return false; [EOL]     } [EOL]     Axis that = (Axis) obj; [EOL]     if (this.visible != that.visible) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.label, that.label)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.labelFont, that.labelFont)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.labelPaint, that.labelPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.labelInsets, that.labelInsets)) { [EOL]         return false; [EOL]     } [EOL]     if (this.labelAngle != that.labelAngle) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.labelToolTip, that.labelToolTip)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.labelURL, that.labelURL)) { [EOL]         return false; [EOL]     } [EOL]     if (this.axisLineVisible != that.axisLineVisible) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.axisLineStroke, that.axisLineStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.axisLinePaint, that.axisLinePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (this.tickLabelsVisible != that.tickLabelsVisible) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.tickLabelFont, that.tickLabelFont)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.tickLabelPaint, that.tickLabelPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.tickLabelInsets, that.tickLabelInsets)) { [EOL]         return false; [EOL]     } [EOL]     if (this.tickMarksVisible != that.tickMarksVisible) { [EOL]         return false; [EOL]     } [EOL]     if (this.tickMarkInsideLength != that.tickMarkInsideLength) { [EOL]         return false; [EOL]     } [EOL]     if (this.tickMarkOutsideLength != that.tickMarkOutsideLength) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.tickMarkPaint, that.tickMarkPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.tickMarkStroke, that.tickMarkStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (this.minorTickMarksVisible != that.minorTickMarksVisible) { [EOL]         return false; [EOL]     } [EOL]     if (this.minorTickMarkInsideLength != that.minorTickMarkInsideLength) { [EOL]         return false; [EOL]     } [EOL]     if (this.minorTickMarkOutsideLength != that.minorTickMarkOutsideLength) { [EOL]         return false; [EOL]     } [EOL]     if (this.fixedDimension != that.fixedDimension) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 1455,1539
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.labelPaint, stream); [EOL]     SerialUtilities.writePaint(this.tickLabelPaint, stream); [EOL]     SerialUtilities.writeStroke(this.axisLineStroke, stream); [EOL]     SerialUtilities.writePaint(this.axisLinePaint, stream); [EOL]     SerialUtilities.writeStroke(this.tickMarkStroke, stream); [EOL]     SerialUtilities.writePaint(this.tickMarkPaint, stream); [EOL] } <line_num>: 1548,1556
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.labelPaint = SerialUtilities.readPaint(stream); [EOL]     this.tickLabelPaint = SerialUtilities.readPaint(stream); [EOL]     this.axisLineStroke = SerialUtilities.readStroke(stream); [EOL]     this.axisLinePaint = SerialUtilities.readPaint(stream); [EOL]     this.tickMarkStroke = SerialUtilities.readStroke(stream); [EOL]     this.tickMarkPaint = SerialUtilities.readPaint(stream); [EOL]     this.listenerList = new EventListenerList(); [EOL] } <line_num>: 1566,1576
