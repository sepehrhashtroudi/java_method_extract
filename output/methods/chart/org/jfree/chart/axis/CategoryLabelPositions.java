public CategoryLabelPositions() { [EOL]     this.positionForAxisAtTop = new CategoryLabelPosition(); [EOL]     this.positionForAxisAtBottom = new CategoryLabelPosition(); [EOL]     this.positionForAxisAtLeft = new CategoryLabelPosition(); [EOL]     this.positionForAxisAtRight = new CategoryLabelPosition(); [EOL] } <line_num>: 234,239
public CategoryLabelPositions(CategoryLabelPosition top, CategoryLabelPosition bottom, CategoryLabelPosition left, CategoryLabelPosition right) { [EOL]     if (top == null) { [EOL]         throw new IllegalArgumentException("Null 'top' argument."); [EOL]     } [EOL]     if (bottom == null) { [EOL]         throw new IllegalArgumentException("Null 'bottom' argument."); [EOL]     } [EOL]     if (left == null) { [EOL]         throw new IllegalArgumentException("Null 'left' argument."); [EOL]     } [EOL]     if (right == null) { [EOL]         throw new IllegalArgumentException("Null 'right' argument."); [EOL]     } [EOL]     this.positionForAxisAtTop = top; [EOL]     this.positionForAxisAtBottom = bottom; [EOL]     this.positionForAxisAtLeft = left; [EOL]     this.positionForAxisAtRight = right; [EOL] } <line_num>: 253,276
public static CategoryLabelPositions createUpRotationLabelPositions(double angle) { [EOL]     return new CategoryLabelPositions(new CategoryLabelPosition(RectangleAnchor.BOTTOM, TextBlockAnchor.BOTTOM_LEFT, TextAnchor.BOTTOM_LEFT, -angle, CategoryLabelWidthType.RANGE, 0.50f), new CategoryLabelPosition(RectangleAnchor.TOP, TextBlockAnchor.TOP_RIGHT, TextAnchor.TOP_RIGHT, -angle, CategoryLabelWidthType.RANGE, 0.50f), new CategoryLabelPosition(RectangleAnchor.RIGHT, TextBlockAnchor.BOTTOM_RIGHT, TextAnchor.BOTTOM_RIGHT, -angle, CategoryLabelWidthType.RANGE, 0.50f), new CategoryLabelPosition(RectangleAnchor.LEFT, TextBlockAnchor.TOP_LEFT, TextAnchor.TOP_LEFT, -angle, CategoryLabelWidthType.RANGE, 0.50f)); [EOL] } <line_num>: 147,171
public static CategoryLabelPositions createDownRotationLabelPositions(double angle) { [EOL]     return new CategoryLabelPositions(new CategoryLabelPosition(RectangleAnchor.BOTTOM, TextBlockAnchor.BOTTOM_RIGHT, TextAnchor.BOTTOM_RIGHT, angle, CategoryLabelWidthType.RANGE, 0.50f), new CategoryLabelPosition(RectangleAnchor.TOP, TextBlockAnchor.TOP_LEFT, TextAnchor.TOP_LEFT, angle, CategoryLabelWidthType.RANGE, 0.50f), new CategoryLabelPosition(RectangleAnchor.RIGHT, TextBlockAnchor.TOP_RIGHT, TextAnchor.TOP_RIGHT, angle, CategoryLabelWidthType.RANGE, 0.50f), new CategoryLabelPosition(RectangleAnchor.LEFT, TextBlockAnchor.BOTTOM_LEFT, TextAnchor.BOTTOM_LEFT, angle, CategoryLabelWidthType.RANGE, 0.50f)); [EOL] } <line_num>: 181,205
public CategoryLabelPosition getLabelPosition(RectangleEdge edge) { [EOL]     CategoryLabelPosition result = null; [EOL]     if (edge == RectangleEdge.TOP) { [EOL]         result = this.positionForAxisAtTop; [EOL]     } else if (edge == RectangleEdge.BOTTOM) { [EOL]         result = this.positionForAxisAtBottom; [EOL]     } else if (edge == RectangleEdge.LEFT) { [EOL]         result = this.positionForAxisAtLeft; [EOL]     } else if (edge == RectangleEdge.RIGHT) { [EOL]         result = this.positionForAxisAtRight; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 286,301
public static CategoryLabelPositions replaceTopPosition(CategoryLabelPositions base, CategoryLabelPosition top) { [EOL]     if (base == null) { [EOL]         throw new IllegalArgumentException("Null 'base' argument."); [EOL]     } [EOL]     if (top == null) { [EOL]         throw new IllegalArgumentException("Null 'top' argument."); [EOL]     } [EOL]     return new CategoryLabelPositions(top, base.getLabelPosition(RectangleEdge.BOTTOM), base.getLabelPosition(RectangleEdge.LEFT), base.getLabelPosition(RectangleEdge.RIGHT)); [EOL] } <line_num>: 312,328
public static CategoryLabelPositions replaceBottomPosition(CategoryLabelPositions base, CategoryLabelPosition bottom) { [EOL]     if (base == null) { [EOL]         throw new IllegalArgumentException("Null 'base' argument."); [EOL]     } [EOL]     if (bottom == null) { [EOL]         throw new IllegalArgumentException("Null 'bottom' argument."); [EOL]     } [EOL]     return new CategoryLabelPositions(base.getLabelPosition(RectangleEdge.TOP), bottom, base.getLabelPosition(RectangleEdge.LEFT), base.getLabelPosition(RectangleEdge.RIGHT)); [EOL] } <line_num>: 339,355
public static CategoryLabelPositions replaceLeftPosition(CategoryLabelPositions base, CategoryLabelPosition left) { [EOL]     if (base == null) { [EOL]         throw new IllegalArgumentException("Null 'base' argument."); [EOL]     } [EOL]     if (left == null) { [EOL]         throw new IllegalArgumentException("Null 'left' argument."); [EOL]     } [EOL]     return new CategoryLabelPositions(base.getLabelPosition(RectangleEdge.TOP), base.getLabelPosition(RectangleEdge.BOTTOM), left, base.getLabelPosition(RectangleEdge.RIGHT)); [EOL] } <line_num>: 366,382
public static CategoryLabelPositions replaceRightPosition(CategoryLabelPositions base, CategoryLabelPosition right) { [EOL]     if (base == null) { [EOL]         throw new IllegalArgumentException("Null 'base' argument."); [EOL]     } [EOL]     if (right == null) { [EOL]         throw new IllegalArgumentException("Null 'right' argument."); [EOL]     } [EOL]     return new CategoryLabelPositions(base.getLabelPosition(RectangleEdge.TOP), base.getLabelPosition(RectangleEdge.BOTTOM), base.getLabelPosition(RectangleEdge.LEFT), right); [EOL] } <line_num>: 393,409
public boolean equals(Object obj) { [EOL]     if (this == obj) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof CategoryLabelPositions)) { [EOL]         return false; [EOL]     } [EOL]     CategoryLabelPositions that = (CategoryLabelPositions) obj; [EOL]     if (!this.positionForAxisAtTop.equals(that.positionForAxisAtTop)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.positionForAxisAtBottom.equals(that.positionForAxisAtBottom)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.positionForAxisAtLeft.equals(that.positionForAxisAtLeft)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.positionForAxisAtRight.equals(that.positionForAxisAtRight)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 419,445
public int hashCode() { [EOL]     int result = 19; [EOL]     result = 37 * result + this.positionForAxisAtTop.hashCode(); [EOL]     result = 37 * result + this.positionForAxisAtBottom.hashCode(); [EOL]     result = 37 * result + this.positionForAxisAtLeft.hashCode(); [EOL]     result = 37 * result + this.positionForAxisAtRight.hashCode(); [EOL]     return result; [EOL] } <line_num>: 452,459
