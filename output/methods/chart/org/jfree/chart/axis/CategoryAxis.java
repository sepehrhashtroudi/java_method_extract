public CategoryAxis() { [EOL]     this(null); [EOL] } <line_num>: 199,201
public CategoryAxis(String label) { [EOL]     super(label); [EOL]     this.lowerMargin = DEFAULT_AXIS_MARGIN; [EOL]     this.upperMargin = DEFAULT_AXIS_MARGIN; [EOL]     this.categoryMargin = DEFAULT_CATEGORY_MARGIN; [EOL]     this.maximumCategoryLabelLines = 1; [EOL]     this.maximumCategoryLabelWidthRatio = 0.0f; [EOL]     this.categoryLabelPositionOffset = 4; [EOL]     this.categoryLabelPositions = CategoryLabelPositions.STANDARD; [EOL]     this.tickLabelFontMap = new HashMap(); [EOL]     this.tickLabelPaintMap = new HashMap(); [EOL]     this.categoryLabelToolTips = new HashMap(); [EOL] } <line_num>: 208,224
public double getLowerMargin() { [EOL]     return this.lowerMargin; [EOL] } <line_num>: 234,236
public void setLowerMargin(double margin) { [EOL]     this.lowerMargin = margin; [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 247,250
public double getUpperMargin() { [EOL]     return this.upperMargin; [EOL] } <line_num>: 260,262
public void setUpperMargin(double margin) { [EOL]     this.upperMargin = margin; [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 273,276
public double getCategoryMargin() { [EOL]     return this.categoryMargin; [EOL] } <line_num>: 285,287
public void setCategoryMargin(double margin) { [EOL]     this.categoryMargin = margin; [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 299,302
public int getMaximumCategoryLabelLines() { [EOL]     return this.maximumCategoryLabelLines; [EOL] } <line_num>: 311,313
public void setMaximumCategoryLabelLines(int lines) { [EOL]     this.maximumCategoryLabelLines = lines; [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 323,326
public float getMaximumCategoryLabelWidthRatio() { [EOL]     return this.maximumCategoryLabelWidthRatio; [EOL] } <line_num>: 335,337
public void setMaximumCategoryLabelWidthRatio(float ratio) { [EOL]     this.maximumCategoryLabelWidthRatio = ratio; [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 347,350
public int getCategoryLabelPositionOffset() { [EOL]     return this.categoryLabelPositionOffset; [EOL] } <line_num>: 360,362
public void setCategoryLabelPositionOffset(int offset) { [EOL]     this.categoryLabelPositionOffset = offset; [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 372,375
public CategoryLabelPositions getCategoryLabelPositions() { [EOL]     return this.categoryLabelPositions; [EOL] } <line_num>: 385,387
public void setCategoryLabelPositions(CategoryLabelPositions positions) { [EOL]     if (positions == null) { [EOL]         throw new IllegalArgumentException("Null 'positions' argument."); [EOL]     } [EOL]     this.categoryLabelPositions = positions; [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 397,403
public Font getTickLabelFont(Comparable category) { [EOL]     if (category == null) { [EOL]         throw new IllegalArgumentException("Null 'category' argument."); [EOL]     } [EOL]     Font result = (Font) this.tickLabelFontMap.get(category); [EOL]     if (result == null) { [EOL]         result = getTickLabelFont(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 414,424
public void setTickLabelFont(Comparable category, Font font) { [EOL]     if (category == null) { [EOL]         throw new IllegalArgumentException("Null 'category' argument."); [EOL]     } [EOL]     if (font == null) { [EOL]         this.tickLabelFontMap.remove(category); [EOL]     } else { [EOL]         this.tickLabelFontMap.put(category, font); [EOL]     } [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 435,446
public Paint getTickLabelPaint(Comparable category) { [EOL]     if (category == null) { [EOL]         throw new IllegalArgumentException("Null 'category' argument."); [EOL]     } [EOL]     Paint result = (Paint) this.tickLabelPaintMap.get(category); [EOL]     if (result == null) { [EOL]         result = getTickLabelPaint(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 457,467
public void setTickLabelPaint(Comparable category, Paint paint) { [EOL]     if (category == null) { [EOL]         throw new IllegalArgumentException("Null 'category' argument."); [EOL]     } [EOL]     if (paint == null) { [EOL]         this.tickLabelPaintMap.remove(category); [EOL]     } else { [EOL]         this.tickLabelPaintMap.put(category, paint); [EOL]     } [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 478,489
public void addCategoryLabelToolTip(Comparable category, String tooltip) { [EOL]     if (category == null) { [EOL]         throw new IllegalArgumentException("Null 'category' argument."); [EOL]     } [EOL]     this.categoryLabelToolTips.put(category, tooltip); [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 500,506
public String getCategoryLabelToolTip(Comparable category) { [EOL]     if (category == null) { [EOL]         throw new IllegalArgumentException("Null 'category' argument."); [EOL]     } [EOL]     return (String) this.categoryLabelToolTips.get(category); [EOL] } <line_num>: 519,524
public void removeCategoryLabelToolTip(Comparable category) { [EOL]     if (category == null) { [EOL]         throw new IllegalArgumentException("Null 'category' argument."); [EOL]     } [EOL]     this.categoryLabelToolTips.remove(category); [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 535,541
public void clearCategoryLabelToolTips() { [EOL]     this.categoryLabelToolTips.clear(); [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 550,553
public double getCategoryJava2DCoordinate(CategoryAnchor anchor, int category, int categoryCount, Rectangle2D area, RectangleEdge edge) { [EOL]     double result = 0.0; [EOL]     if (anchor == CategoryAnchor.START) { [EOL]         result = getCategoryStart(category, categoryCount, area, edge); [EOL]     } else if (anchor == CategoryAnchor.MIDDLE) { [EOL]         result = getCategoryMiddle(category, categoryCount, area, edge); [EOL]     } else if (anchor == CategoryAnchor.END) { [EOL]         result = getCategoryEnd(category, categoryCount, area, edge); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 566,584
public double getCategoryStart(int category, int categoryCount, Rectangle2D area, RectangleEdge edge) { [EOL]     double result = 0.0; [EOL]     if ((edge == RectangleEdge.TOP) || (edge == RectangleEdge.BOTTOM)) { [EOL]         result = area.getX() + area.getWidth() * getLowerMargin(); [EOL]     } else if ((edge == RectangleEdge.LEFT) || (edge == RectangleEdge.RIGHT)) { [EOL]         result = area.getMinY() + area.getHeight() * getLowerMargin(); [EOL]     } [EOL]     double categorySize = calculateCategorySize(categoryCount, area, edge); [EOL]     double categoryGapWidth = calculateCategoryGapSize(categoryCount, area, edge); [EOL]     result = result + category * (categorySize + categoryGapWidth); [EOL]     return result; [EOL] } <line_num>: 599,619
public double getCategoryMiddle(int category, int categoryCount, Rectangle2D area, RectangleEdge edge) { [EOL]     if (category < 0 || category >= categoryCount) { [EOL]         throw new IllegalArgumentException("Invalid category index: " + category); [EOL]     } [EOL]     return getCategoryStart(category, categoryCount, area, edge) + calculateCategorySize(categoryCount, area, edge) / 2; [EOL] } <line_num>: 634,644
public double getCategoryEnd(int category, int categoryCount, Rectangle2D area, RectangleEdge edge) { [EOL]     return getCategoryStart(category, categoryCount, area, edge) + calculateCategorySize(categoryCount, area, edge); [EOL] } <line_num>: 659,665
public double getCategoryMiddle(Comparable category, List categories, Rectangle2D area, RectangleEdge edge) { [EOL]     if (categories == null) { [EOL]         throw new IllegalArgumentException("Null 'categories' argument."); [EOL]     } [EOL]     int categoryIndex = categories.indexOf(category); [EOL]     int categoryCount = categories.size(); [EOL]     return getCategoryMiddle(categoryIndex, categoryCount, area, edge); [EOL] } <line_num>: 684,692
public double getCategorySeriesMiddle(Comparable category, Comparable seriesKey, CategoryDataset dataset, double itemMargin, Rectangle2D area, RectangleEdge edge) { [EOL]     int categoryIndex = dataset.getColumnIndex(category); [EOL]     int categoryCount = dataset.getColumnCount(); [EOL]     int seriesIndex = dataset.getRowIndex(seriesKey); [EOL]     int seriesCount = dataset.getRowCount(); [EOL]     double start = getCategoryStart(categoryIndex, categoryCount, area, edge); [EOL]     double end = getCategoryEnd(categoryIndex, categoryCount, area, edge); [EOL]     double width = end - start; [EOL]     if (seriesCount == 1) { [EOL]         return start + width / 2.0; [EOL]     } else { [EOL]         double gap = (width * itemMargin) / (seriesCount - 1); [EOL]         double ww = (width * (1 - itemMargin)) / seriesCount; [EOL]         return start + (seriesIndex * (ww + gap)) + ww / 2.0; [EOL]     } [EOL] } <line_num>: 709,729
public double getCategorySeriesMiddle(int categoryIndex, int categoryCount, int seriesIndex, int seriesCount, double itemMargin, Rectangle2D area, RectangleEdge edge) { [EOL]     double start = getCategoryStart(categoryIndex, categoryCount, area, edge); [EOL]     double end = getCategoryEnd(categoryIndex, categoryCount, area, edge); [EOL]     double width = end - start; [EOL]     if (seriesCount == 1) { [EOL]         return start + width / 2.0; [EOL]     } else { [EOL]         double gap = (width * itemMargin) / (seriesCount - 1); [EOL]         double ww = (width * (1 - itemMargin)) / seriesCount; [EOL]         return start + (seriesIndex * (ww + gap)) + ww / 2.0; [EOL]     } [EOL] } <line_num>: 747,763
protected double calculateCategorySize(int categoryCount, Rectangle2D area, RectangleEdge edge) { [EOL]     double result = 0.0; [EOL]     double available = 0.0; [EOL]     if ((edge == RectangleEdge.TOP) || (edge == RectangleEdge.BOTTOM)) { [EOL]         available = area.getWidth(); [EOL]     } else if ((edge == RectangleEdge.LEFT) || (edge == RectangleEdge.RIGHT)) { [EOL]         available = area.getHeight(); [EOL]     } [EOL]     if (categoryCount > 1) { [EOL]         result = available * (1 - getLowerMargin() - getUpperMargin() - getCategoryMargin()); [EOL]         result = result / categoryCount; [EOL]     } else { [EOL]         result = available * (1 - getLowerMargin() - getUpperMargin()); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 775,798
protected double calculateCategoryGapSize(int categoryCount, Rectangle2D area, RectangleEdge edge) { [EOL]     double result = 0.0; [EOL]     double available = 0.0; [EOL]     if ((edge == RectangleEdge.TOP) || (edge == RectangleEdge.BOTTOM)) { [EOL]         available = area.getWidth(); [EOL]     } else if ((edge == RectangleEdge.LEFT) || (edge == RectangleEdge.RIGHT)) { [EOL]         available = area.getHeight(); [EOL]     } [EOL]     if (categoryCount > 1) { [EOL]         result = available * getCategoryMargin() / (categoryCount - 1); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 810,831
public AxisSpace reserveSpace(Graphics2D g2, Plot plot, Rectangle2D plotArea, RectangleEdge edge, AxisSpace space) { [EOL]     if (space == null) { [EOL]         space = new AxisSpace(); [EOL]     } [EOL]     if (!isVisible()) { [EOL]         return space; [EOL]     } [EOL]     double tickLabelHeight = 0.0; [EOL]     double tickLabelWidth = 0.0; [EOL]     if (isTickLabelsVisible()) { [EOL]         g2.setFont(getTickLabelFont()); [EOL]         AxisState state = new AxisState(); [EOL]         refreshTicks(g2, state, plotArea, edge); [EOL]         if (edge == RectangleEdge.TOP) { [EOL]             tickLabelHeight = state.getMax(); [EOL]         } else if (edge == RectangleEdge.BOTTOM) { [EOL]             tickLabelHeight = state.getMax(); [EOL]         } else if (edge == RectangleEdge.LEFT) { [EOL]             tickLabelWidth = state.getMax(); [EOL]         } else if (edge == RectangleEdge.RIGHT) { [EOL]             tickLabelWidth = state.getMax(); [EOL]         } [EOL]     } [EOL]     Rectangle2D labelEnclosure = getLabelEnclosure(g2, edge); [EOL]     double labelHeight = 0.0; [EOL]     double labelWidth = 0.0; [EOL]     if (RectangleEdge.isTopOrBottom(edge)) { [EOL]         labelHeight = labelEnclosure.getHeight(); [EOL]         space.add(labelHeight + tickLabelHeight + this.categoryLabelPositionOffset, edge); [EOL]     } else if (RectangleEdge.isLeftOrRight(edge)) { [EOL]         labelWidth = labelEnclosure.getWidth(); [EOL]         space.add(labelWidth + tickLabelWidth + this.categoryLabelPositionOffset, edge); [EOL]     } [EOL]     return space; [EOL] } <line_num>: 844,896
public void configure() { [EOL] } <line_num>: 901,903
public AxisState draw(Graphics2D g2, double cursor, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, PlotRenderingInfo plotState) { [EOL]     if (!isVisible()) { [EOL]         return new AxisState(cursor); [EOL]     } [EOL]     if (isAxisLineVisible()) { [EOL]         drawAxisLine(g2, cursor, dataArea, edge); [EOL]     } [EOL]     AxisState state = new AxisState(cursor); [EOL]     if (isTickMarksVisible()) { [EOL]         drawTickMarks(g2, cursor, dataArea, edge, state); [EOL]     } [EOL]     createAndAddEntity(cursor, state, dataArea, edge, plotState); [EOL]     state = drawCategoryLabels(g2, plotArea, dataArea, edge, state, plotState); [EOL]     state = drawLabel(getLabel(), g2, plotArea, dataArea, edge, state, plotState); [EOL]     return state; [EOL] } <line_num>: 921,947
protected AxisState drawCategoryLabels(Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) { [EOL]     if (state == null) { [EOL]         throw new IllegalArgumentException("Null 'state' argument."); [EOL]     } [EOL]     if (isTickLabelsVisible()) { [EOL]         List ticks = refreshTicks(g2, state, plotArea, edge); [EOL]         state.setTicks(ticks); [EOL]         int categoryIndex = 0; [EOL]         Iterator iterator = ticks.iterator(); [EOL]         while (iterator.hasNext()) { [EOL]             CategoryTick tick = (CategoryTick) iterator.next(); [EOL]             g2.setFont(getTickLabelFont(tick.getCategory())); [EOL]             g2.setPaint(getTickLabelPaint(tick.getCategory())); [EOL]             CategoryLabelPosition position = this.categoryLabelPositions.getLabelPosition(edge); [EOL]             double x0 = 0.0; [EOL]             double x1 = 0.0; [EOL]             double y0 = 0.0; [EOL]             double y1 = 0.0; [EOL]             if (edge == RectangleEdge.TOP) { [EOL]                 x0 = getCategoryStart(categoryIndex, ticks.size(), dataArea, edge); [EOL]                 x1 = getCategoryEnd(categoryIndex, ticks.size(), dataArea, edge); [EOL]                 y1 = state.getCursor() - this.categoryLabelPositionOffset; [EOL]                 y0 = y1 - state.getMax(); [EOL]             } else if (edge == RectangleEdge.BOTTOM) { [EOL]                 x0 = getCategoryStart(categoryIndex, ticks.size(), dataArea, edge); [EOL]                 x1 = getCategoryEnd(categoryIndex, ticks.size(), dataArea, edge); [EOL]                 y0 = state.getCursor() + this.categoryLabelPositionOffset; [EOL]                 y1 = y0 + state.getMax(); [EOL]             } else if (edge == RectangleEdge.LEFT) { [EOL]                 y0 = getCategoryStart(categoryIndex, ticks.size(), dataArea, edge); [EOL]                 y1 = getCategoryEnd(categoryIndex, ticks.size(), dataArea, edge); [EOL]                 x1 = state.getCursor() - this.categoryLabelPositionOffset; [EOL]                 x0 = x1 - state.getMax(); [EOL]             } else if (edge == RectangleEdge.RIGHT) { [EOL]                 y0 = getCategoryStart(categoryIndex, ticks.size(), dataArea, edge); [EOL]                 y1 = getCategoryEnd(categoryIndex, ticks.size(), dataArea, edge); [EOL]                 x0 = state.getCursor() + this.categoryLabelPositionOffset; [EOL]                 x1 = x0 - state.getMax(); [EOL]             } [EOL]             Rectangle2D area = new Rectangle2D.Double(x0, y0, (x1 - x0), (y1 - y0)); [EOL]             Point2D anchorPoint = RectangleAnchor.coordinates(area, position.getCategoryAnchor()); [EOL]             TextBlock block = tick.getLabel(); [EOL]             block.draw(g2, (float) anchorPoint.getX(), (float) anchorPoint.getY(), position.getLabelAnchor(), (float) anchorPoint.getX(), (float) anchorPoint.getY(), position.getAngle()); [EOL]             Shape bounds = block.calculateBounds(g2, (float) anchorPoint.getX(), (float) anchorPoint.getY(), position.getLabelAnchor(), (float) anchorPoint.getX(), (float) anchorPoint.getY(), position.getAngle()); [EOL]             if (plotState != null && plotState.getOwner() != null) { [EOL]                 EntityCollection entities = plotState.getOwner().getEntityCollection(); [EOL]                 if (entities != null) { [EOL]                     String tooltip = getCategoryLabelToolTip(tick.getCategory()); [EOL]                     entities.add(new CategoryLabelEntity(tick.getCategory(), bounds, tooltip, null)); [EOL]                 } [EOL]             } [EOL]             categoryIndex++; [EOL]         } [EOL]         if (edge.equals(RectangleEdge.TOP)) { [EOL]             double h = state.getMax() + this.categoryLabelPositionOffset; [EOL]             state.cursorUp(h); [EOL]         } else if (edge.equals(RectangleEdge.BOTTOM)) { [EOL]             double h = state.getMax() + this.categoryLabelPositionOffset; [EOL]             state.cursorDown(h); [EOL]         } else if (edge == RectangleEdge.LEFT) { [EOL]             double w = state.getMax() + this.categoryLabelPositionOffset; [EOL]             state.cursorLeft(w); [EOL]         } else if (edge == RectangleEdge.RIGHT) { [EOL]             double w = state.getMax() + this.categoryLabelPositionOffset; [EOL]             state.cursorRight(w); [EOL]         } [EOL]     } [EOL]     return state; [EOL] } <line_num>: 965,1070
public List refreshTicks(Graphics2D g2, AxisState state, Rectangle2D dataArea, RectangleEdge edge) { [EOL]     List ticks = new java.util.ArrayList(); [EOL]     if (dataArea.getHeight() <= 0.0 || dataArea.getWidth() < 0.0) { [EOL]         return ticks; [EOL]     } [EOL]     CategoryPlot plot = (CategoryPlot) getPlot(); [EOL]     List categories = plot.getCategoriesForAxis(this); [EOL]     double max = 0.0; [EOL]     if (categories != null) { [EOL]         CategoryLabelPosition position = this.categoryLabelPositions.getLabelPosition(edge); [EOL]         float r = this.maximumCategoryLabelWidthRatio; [EOL]         if (r <= 0.0) { [EOL]             r = position.getWidthRatio(); [EOL]         } [EOL]         float l = 0.0f; [EOL]         if (position.getWidthType() == CategoryLabelWidthType.CATEGORY) { [EOL]             l = (float) calculateCategorySize(categories.size(), dataArea, edge); [EOL]         } else { [EOL]             if (RectangleEdge.isLeftOrRight(edge)) { [EOL]                 l = (float) dataArea.getWidth(); [EOL]             } else { [EOL]                 l = (float) dataArea.getHeight(); [EOL]             } [EOL]         } [EOL]         int categoryIndex = 0; [EOL]         Iterator iterator = categories.iterator(); [EOL]         while (iterator.hasNext()) { [EOL]             Comparable category = (Comparable) iterator.next(); [EOL]             g2.setFont(getTickLabelFont(category)); [EOL]             TextBlock label = createLabel(category, l * r, edge, g2); [EOL]             if (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM) { [EOL]                 max = Math.max(max, calculateTextBlockHeight(label, position, g2)); [EOL]             } else if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) { [EOL]                 max = Math.max(max, calculateTextBlockWidth(label, position, g2)); [EOL]             } [EOL]             Tick tick = new CategoryTick(category, label, position.getLabelAnchor(), position.getRotationAnchor(), position.getAngle()); [EOL]             ticks.add(tick); [EOL]             categoryIndex = categoryIndex + 1; [EOL]         } [EOL]     } [EOL]     state.setMax(max); [EOL]     return ticks; [EOL] } <line_num>: 1082,1144
public void drawTickMarks(Graphics2D g2, double cursor, Rectangle2D dataArea, RectangleEdge edge, AxisState state) { [EOL]     Plot p = getPlot(); [EOL]     if (p == null) { [EOL]         return; [EOL]     } [EOL]     CategoryPlot plot = (CategoryPlot) p; [EOL]     double il = getTickMarkInsideLength(); [EOL]     double ol = getTickMarkOutsideLength(); [EOL]     Line2D line = new Line2D.Double(); [EOL]     List categories = plot.getCategoriesForAxis(this); [EOL]     g2.setPaint(getTickMarkPaint()); [EOL]     g2.setStroke(getTickMarkStroke()); [EOL]     if (edge.equals(RectangleEdge.TOP)) { [EOL]         Iterator iterator = categories.iterator(); [EOL]         while (iterator.hasNext()) { [EOL]             Comparable key = (Comparable) iterator.next(); [EOL]             double x = getCategoryMiddle(key, categories, dataArea, edge); [EOL]             line.setLine(x, cursor, x, cursor + il); [EOL]             g2.draw(line); [EOL]             line.setLine(x, cursor, x, cursor - ol); [EOL]             g2.draw(line); [EOL]         } [EOL]         state.cursorUp(ol); [EOL]     } else if (edge.equals(RectangleEdge.BOTTOM)) { [EOL]         Iterator iterator = categories.iterator(); [EOL]         while (iterator.hasNext()) { [EOL]             Comparable key = (Comparable) iterator.next(); [EOL]             double x = getCategoryMiddle(key, categories, dataArea, edge); [EOL]             line.setLine(x, cursor, x, cursor - il); [EOL]             g2.draw(line); [EOL]             line.setLine(x, cursor, x, cursor + ol); [EOL]             g2.draw(line); [EOL]         } [EOL]         state.cursorDown(ol); [EOL]     } else if (edge.equals(RectangleEdge.LEFT)) { [EOL]         Iterator iterator = categories.iterator(); [EOL]         while (iterator.hasNext()) { [EOL]             Comparable key = (Comparable) iterator.next(); [EOL]             double y = getCategoryMiddle(key, categories, dataArea, edge); [EOL]             line.setLine(cursor, y, cursor + il, y); [EOL]             g2.draw(line); [EOL]             line.setLine(cursor, y, cursor - ol, y); [EOL]             g2.draw(line); [EOL]         } [EOL]         state.cursorLeft(ol); [EOL]     } else if (edge.equals(RectangleEdge.RIGHT)) { [EOL]         Iterator iterator = categories.iterator(); [EOL]         while (iterator.hasNext()) { [EOL]             Comparable key = (Comparable) iterator.next(); [EOL]             double y = getCategoryMiddle(key, categories, dataArea, edge); [EOL]             line.setLine(cursor, y, cursor - il, y); [EOL]             g2.draw(line); [EOL]             line.setLine(cursor, y, cursor + ol, y); [EOL]             g2.draw(line); [EOL]         } [EOL]         state.cursorRight(ol); [EOL]     } [EOL] } <line_num>: 1151,1213
protected TextBlock createLabel(Comparable category, float width, RectangleEdge edge, Graphics2D g2) { [EOL]     TextBlock label = TextUtilities.createTextBlock(category.toString(), getTickLabelFont(category), getTickLabelPaint(category), width, this.maximumCategoryLabelLines, new G2TextMeasurer(g2)); [EOL]     return label; [EOL] } <line_num>: 1225,1231
protected double calculateTextBlockWidth(TextBlock block, CategoryLabelPosition position, Graphics2D g2) { [EOL]     RectangleInsets insets = getTickLabelInsets(); [EOL]     Size2D size = block.calculateDimensions(g2); [EOL]     Rectangle2D box = new Rectangle2D.Double(0.0, 0.0, size.getWidth(), size.getHeight()); [EOL]     Shape rotatedBox = ShapeUtilities.rotateShape(box, position.getAngle(), 0.0f, 0.0f); [EOL]     double w = rotatedBox.getBounds2D().getWidth() + insets.getLeft() + insets.getRight(); [EOL]     return w; [EOL] } <line_num>: 1242,1255
protected double calculateTextBlockHeight(TextBlock block, CategoryLabelPosition position, Graphics2D g2) { [EOL]     RectangleInsets insets = getTickLabelInsets(); [EOL]     Size2D size = block.calculateDimensions(g2); [EOL]     Rectangle2D box = new Rectangle2D.Double(0.0, 0.0, size.getWidth(), size.getHeight()); [EOL]     Shape rotatedBox = ShapeUtilities.rotateShape(box, position.getAngle(), 0.0f, 0.0f); [EOL]     double h = rotatedBox.getBounds2D().getHeight() + insets.getTop() + insets.getBottom(); [EOL]     return h; [EOL] } <line_num>: 1266,1280
public Object clone() throws CloneNotSupportedException { [EOL]     CategoryAxis clone = (CategoryAxis) super.clone(); [EOL]     clone.tickLabelFontMap = new HashMap(this.tickLabelFontMap); [EOL]     clone.tickLabelPaintMap = new HashMap(this.tickLabelPaintMap); [EOL]     clone.categoryLabelToolTips = new HashMap(this.categoryLabelToolTips); [EOL]     return clone; [EOL] } <line_num>: 1290,1296
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof CategoryAxis)) { [EOL]         return false; [EOL]     } [EOL]     if (!super.equals(obj)) { [EOL]         return false; [EOL]     } [EOL]     CategoryAxis that = (CategoryAxis) obj; [EOL]     if (that.lowerMargin != this.lowerMargin) { [EOL]         return false; [EOL]     } [EOL]     if (that.upperMargin != this.upperMargin) { [EOL]         return false; [EOL]     } [EOL]     if (that.categoryMargin != this.categoryMargin) { [EOL]         return false; [EOL]     } [EOL]     if (that.maximumCategoryLabelWidthRatio != this.maximumCategoryLabelWidthRatio) { [EOL]         return false; [EOL]     } [EOL]     if (that.categoryLabelPositionOffset != this.categoryLabelPositionOffset) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(that.categoryLabelPositions, this.categoryLabelPositions)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(that.categoryLabelToolTips, this.categoryLabelToolTips)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.tickLabelFontMap, that.tickLabelFontMap)) { [EOL]         return false; [EOL]     } [EOL]     if (!equalPaintMaps(this.tickLabelPaintMap, that.tickLabelPaintMap)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 1305,1349
public int hashCode() { [EOL]     if (getLabel() != null) { [EOL]         return getLabel().hashCode(); [EOL]     } else { [EOL]         return 0; [EOL]     } [EOL] } <line_num>: 1356,1363
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     writePaintMap(this.tickLabelPaintMap, stream); [EOL] } <line_num>: 1372,1375
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.tickLabelPaintMap = readPaintMap(stream); [EOL] } <line_num>: 1385,1389
private Map readPaintMap(ObjectInputStream in) throws IOException, ClassNotFoundException { [EOL]     boolean isNull = in.readBoolean(); [EOL]     if (isNull) { [EOL]         return null; [EOL]     } [EOL]     Map result = new HashMap(); [EOL]     int count = in.readInt(); [EOL]     for (int i = 0; i < count; i++) { [EOL]         Comparable category = (Comparable) in.readObject(); [EOL]         Paint paint = SerialUtilities.readPaint(in); [EOL]         result.put(category, paint); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1404,1418
private void writePaintMap(Map map, ObjectOutputStream out) throws IOException { [EOL]     if (map == null) { [EOL]         out.writeBoolean(true); [EOL]     } else { [EOL]         out.writeBoolean(false); [EOL]         Set keys = map.keySet(); [EOL]         int count = keys.size(); [EOL]         out.writeInt(count); [EOL]         Iterator iterator = keys.iterator(); [EOL]         while (iterator.hasNext()) { [EOL]             Comparable key = (Comparable) iterator.next(); [EOL]             out.writeObject(key); [EOL]             SerialUtilities.writePaint((Paint) map.get(key), out); [EOL]         } [EOL]     } [EOL] } <line_num>: 1431,1448
private boolean equalPaintMaps(Map map1, Map map2) { [EOL]     if (map1.size() != map2.size()) { [EOL]         return false; [EOL]     } [EOL]     Set entries = map1.entrySet(); [EOL]     Iterator iterator = entries.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         Map.Entry entry = (Map.Entry) iterator.next(); [EOL]         Paint p1 = (Paint) entry.getValue(); [EOL]         Paint p2 = (Paint) map2.get(entry.getKey()); [EOL]         if (!PaintUtilities.equal(p1, p2)) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 1459,1474
