protected ValueAxis(String label, TickUnitSource standardTickUnits) { [EOL]     super(label); [EOL]     this.positiveArrowVisible = false; [EOL]     this.negativeArrowVisible = false; [EOL]     this.range = DEFAULT_RANGE; [EOL]     this.autoRange = DEFAULT_AUTO_RANGE; [EOL]     this.defaultAutoRange = DEFAULT_RANGE; [EOL]     this.inverted = DEFAULT_INVERTED; [EOL]     this.autoRangeMinimumSize = DEFAULT_AUTO_RANGE_MINIMUM_SIZE; [EOL]     this.lowerMargin = DEFAULT_LOWER_MARGIN; [EOL]     this.upperMargin = DEFAULT_UPPER_MARGIN; [EOL]     this.fixedAutoRange = 0.0; [EOL]     this.autoTickUnitSelection = DEFAULT_AUTO_TICK_UNIT_SELECTION; [EOL]     this.standardTickUnits = standardTickUnits; [EOL]     Polygon p1 = new Polygon(); [EOL]     p1.addPoint(0, 0); [EOL]     p1.addPoint(-2, 2); [EOL]     p1.addPoint(2, 2); [EOL]     this.upArrow = p1; [EOL]     Polygon p2 = new Polygon(); [EOL]     p2.addPoint(0, 0); [EOL]     p2.addPoint(-2, -2); [EOL]     p2.addPoint(2, -2); [EOL]     this.downArrow = p2; [EOL]     Polygon p3 = new Polygon(); [EOL]     p3.addPoint(0, 0); [EOL]     p3.addPoint(-2, -2); [EOL]     p3.addPoint(-2, 2); [EOL]     this.rightArrow = p3; [EOL]     Polygon p4 = new Polygon(); [EOL]     p4.addPoint(0, 0); [EOL]     p4.addPoint(2, -2); [EOL]     p4.addPoint(2, 2); [EOL]     this.leftArrow = p4; [EOL]     this.verticalTickLabels = false; [EOL]     this.minorTickCount = 0; [EOL] } <line_num>: 275,328
public boolean isVerticalTickLabels() { [EOL]     return this.verticalTickLabels; [EOL] } <line_num>: 338,340
public void setVerticalTickLabels(boolean flag) { [EOL]     if (this.verticalTickLabels != flag) { [EOL]         this.verticalTickLabels = flag; [EOL]         notifyListeners(new AxisChangeEvent(this)); [EOL]     } [EOL] } <line_num>: 352,357
public boolean isPositiveArrowVisible() { [EOL]     return this.positiveArrowVisible; [EOL] } <line_num>: 367,369
public void setPositiveArrowVisible(boolean visible) { [EOL]     this.positiveArrowVisible = visible; [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 380,383
public boolean isNegativeArrowVisible() { [EOL]     return this.negativeArrowVisible; [EOL] } <line_num>: 393,395
public void setNegativeArrowVisible(boolean visible) { [EOL]     this.negativeArrowVisible = visible; [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 406,409
public Shape getUpArrow() { [EOL]     return this.upArrow; [EOL] } <line_num>: 419,421
public void setUpArrow(Shape arrow) { [EOL]     if (arrow == null) { [EOL]         throw new IllegalArgumentException("Null 'arrow' argument."); [EOL]     } [EOL]     this.upArrow = arrow; [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 432,438
public Shape getDownArrow() { [EOL]     return this.downArrow; [EOL] } <line_num>: 448,450
public void setDownArrow(Shape arrow) { [EOL]     if (arrow == null) { [EOL]         throw new IllegalArgumentException("Null 'arrow' argument."); [EOL]     } [EOL]     this.downArrow = arrow; [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 461,467
public Shape getLeftArrow() { [EOL]     return this.leftArrow; [EOL] } <line_num>: 477,479
public void setLeftArrow(Shape arrow) { [EOL]     if (arrow == null) { [EOL]         throw new IllegalArgumentException("Null 'arrow' argument."); [EOL]     } [EOL]     this.leftArrow = arrow; [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 490,496
public Shape getRightArrow() { [EOL]     return this.rightArrow; [EOL] } <line_num>: 506,508
public void setRightArrow(Shape arrow) { [EOL]     if (arrow == null) { [EOL]         throw new IllegalArgumentException("Null 'arrow' argument."); [EOL]     } [EOL]     this.rightArrow = arrow; [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 519,525
protected void drawAxisLine(Graphics2D g2, double cursor, Rectangle2D dataArea, RectangleEdge edge) { [EOL]     Line2D axisLine = null; [EOL]     if (edge == RectangleEdge.TOP) { [EOL]         axisLine = new Line2D.Double(dataArea.getX(), cursor, dataArea.getMaxX(), cursor); [EOL]     } else if (edge == RectangleEdge.BOTTOM) { [EOL]         axisLine = new Line2D.Double(dataArea.getX(), cursor, dataArea.getMaxX(), cursor); [EOL]     } else if (edge == RectangleEdge.LEFT) { [EOL]         axisLine = new Line2D.Double(cursor, dataArea.getY(), cursor, dataArea.getMaxY()); [EOL]     } else if (edge == RectangleEdge.RIGHT) { [EOL]         axisLine = new Line2D.Double(cursor, dataArea.getY(), cursor, dataArea.getMaxY()); [EOL]     } [EOL]     g2.setPaint(getAxisLinePaint()); [EOL]     g2.setStroke(getAxisLineStroke()); [EOL]     g2.draw(axisLine); [EOL]     boolean drawUpOrRight = false; [EOL]     boolean drawDownOrLeft = false; [EOL]     if (this.positiveArrowVisible) { [EOL]         if (this.inverted) { [EOL]             drawDownOrLeft = true; [EOL]         } else { [EOL]             drawUpOrRight = true; [EOL]         } [EOL]     } [EOL]     if (this.negativeArrowVisible) { [EOL]         if (this.inverted) { [EOL]             drawUpOrRight = true; [EOL]         } else { [EOL]             drawDownOrLeft = true; [EOL]         } [EOL]     } [EOL]     if (drawUpOrRight) { [EOL]         double x = 0.0; [EOL]         double y = 0.0; [EOL]         Shape arrow = null; [EOL]         if (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM) { [EOL]             x = dataArea.getMaxX(); [EOL]             y = cursor; [EOL]             arrow = this.rightArrow; [EOL]         } else if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) { [EOL]             x = cursor; [EOL]             y = dataArea.getMinY(); [EOL]             arrow = this.upArrow; [EOL]         } [EOL]         AffineTransform transformer = new AffineTransform(); [EOL]         transformer.setToTranslation(x, y); [EOL]         Shape shape = transformer.createTransformedShape(arrow); [EOL]         g2.fill(shape); [EOL]         g2.draw(shape); [EOL]     } [EOL]     if (drawDownOrLeft) { [EOL]         double x = 0.0; [EOL]         double y = 0.0; [EOL]         Shape arrow = null; [EOL]         if (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM) { [EOL]             x = dataArea.getMinX(); [EOL]             y = cursor; [EOL]             arrow = this.leftArrow; [EOL]         } else if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) { [EOL]             x = cursor; [EOL]             y = dataArea.getMaxY(); [EOL]             arrow = this.downArrow; [EOL]         } [EOL]         AffineTransform transformer = new AffineTransform(); [EOL]         transformer.setToTranslation(x, y); [EOL]         Shape shape = transformer.createTransformedShape(arrow); [EOL]         g2.fill(shape); [EOL]         g2.draw(shape); [EOL]     } [EOL] } <line_num>: 535,624
protected float[] calculateAnchorPoint(ValueTick tick, double cursor, Rectangle2D dataArea, RectangleEdge edge) { [EOL]     RectangleInsets insets = getTickLabelInsets(); [EOL]     float[] result = new float[2]; [EOL]     if (edge == RectangleEdge.TOP) { [EOL]         result[0] = (float) valueToJava2D(tick.getValue(), dataArea, edge); [EOL]         result[1] = (float) (cursor - insets.getBottom() - 2.0); [EOL]     } else if (edge == RectangleEdge.BOTTOM) { [EOL]         result[0] = (float) valueToJava2D(tick.getValue(), dataArea, edge); [EOL]         result[1] = (float) (cursor + insets.getTop() + 2.0); [EOL]     } else if (edge == RectangleEdge.LEFT) { [EOL]         result[0] = (float) (cursor - insets.getLeft() - 2.0); [EOL]         result[1] = (float) valueToJava2D(tick.getValue(), dataArea, edge); [EOL]     } else if (edge == RectangleEdge.RIGHT) { [EOL]         result[0] = (float) (cursor + insets.getRight() + 2.0); [EOL]         result[1] = (float) valueToJava2D(tick.getValue(), dataArea, edge); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 636,660
protected AxisState drawTickMarksAndLabels(Graphics2D g2, double cursor, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, PlotRenderingInfo info) { [EOL]     AxisState state = new AxisState(cursor); [EOL]     if (isAxisLineVisible()) { [EOL]         drawAxisLine(g2, cursor, dataArea, edge); [EOL]     } [EOL]     List ticks = refreshTicks(g2, state, dataArea, edge); [EOL]     state.setTicks(ticks); [EOL]     g2.setFont(getTickLabelFont()); [EOL]     Iterator iterator = ticks.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         ValueTick tick = (ValueTick) iterator.next(); [EOL]         if (isTickLabelsVisible()) { [EOL]             g2.setPaint(getTickLabelPaint()); [EOL]             float[] anchorPoint = calculateAnchorPoint(tick, cursor, dataArea, edge); [EOL]             TextUtilities.drawRotatedString(tick.getText(), g2, anchorPoint[0], anchorPoint[1], tick.getTextAnchor(), tick.getAngle(), tick.getRotationAnchor()); [EOL]         } [EOL]         if ((isTickMarksVisible() && tick.getTickType().equals(TickType.MAJOR)) || (isMinorTickMarksVisible() && tick.getTickType().equals(TickType.MINOR))) { [EOL]             double ol = (tick.getTickType().equals(TickType.MINOR)) ? getMinorTickMarkOutsideLength() : getTickMarkOutsideLength(); [EOL]             double il = (tick.getTickType().equals(TickType.MINOR)) ? getMinorTickMarkInsideLength() : getTickMarkInsideLength(); [EOL]             float xx = (float) valueToJava2D(tick.getValue(), dataArea, edge); [EOL]             Line2D mark = null; [EOL]             g2.setStroke(getTickMarkStroke()); [EOL]             g2.setPaint(getTickMarkPaint()); [EOL]             if (edge == RectangleEdge.LEFT) { [EOL]                 mark = new Line2D.Double(cursor - ol, xx, cursor + il, xx); [EOL]             } else if (edge == RectangleEdge.RIGHT) { [EOL]                 mark = new Line2D.Double(cursor + ol, xx, cursor - il, xx); [EOL]             } else if (edge == RectangleEdge.TOP) { [EOL]                 mark = new Line2D.Double(xx, cursor - ol, xx, cursor + il); [EOL]             } else if (edge == RectangleEdge.BOTTOM) { [EOL]                 mark = new Line2D.Double(xx, cursor + ol, xx, cursor - il); [EOL]             } [EOL]             g2.draw(mark); [EOL]         } [EOL]     } [EOL]     double used = 0.0; [EOL]     if (isTickLabelsVisible()) { [EOL]         if (edge == RectangleEdge.LEFT) { [EOL]             used += findMaximumTickLabelWidth(ticks, g2, plotArea, isVerticalTickLabels()); [EOL]             state.cursorLeft(used); [EOL]         } else if (edge == RectangleEdge.RIGHT) { [EOL]             used = findMaximumTickLabelWidth(ticks, g2, plotArea, isVerticalTickLabels()); [EOL]             state.cursorRight(used); [EOL]         } else if (edge == RectangleEdge.TOP) { [EOL]             used = findMaximumTickLabelHeight(ticks, g2, plotArea, isVerticalTickLabels()); [EOL]             state.cursorUp(used); [EOL]         } else if (edge == RectangleEdge.BOTTOM) { [EOL]             used = findMaximumTickLabelHeight(ticks, g2, plotArea, isVerticalTickLabels()); [EOL]             state.cursorDown(used); [EOL]         } [EOL]     } [EOL]     return state; [EOL] } <line_num>: 674,757
public AxisSpace reserveSpace(Graphics2D g2, Plot plot, Rectangle2D plotArea, RectangleEdge edge, AxisSpace space) { [EOL]     if (space == null) { [EOL]         space = new AxisSpace(); [EOL]     } [EOL]     if (!isVisible()) { [EOL]         return space; [EOL]     } [EOL]     double dimension = getFixedDimension(); [EOL]     if (dimension > 0.0) { [EOL]         space.ensureAtLeast(dimension, edge); [EOL]     } [EOL]     double tickLabelHeight = 0.0; [EOL]     double tickLabelWidth = 0.0; [EOL]     if (isTickLabelsVisible()) { [EOL]         g2.setFont(getTickLabelFont()); [EOL]         List ticks = refreshTicks(g2, new AxisState(), plotArea, edge); [EOL]         if (RectangleEdge.isTopOrBottom(edge)) { [EOL]             tickLabelHeight = findMaximumTickLabelHeight(ticks, g2, plotArea, isVerticalTickLabels()); [EOL]         } else if (RectangleEdge.isLeftOrRight(edge)) { [EOL]             tickLabelWidth = findMaximumTickLabelWidth(ticks, g2, plotArea, isVerticalTickLabels()); [EOL]         } [EOL]     } [EOL]     Rectangle2D labelEnclosure = getLabelEnclosure(g2, edge); [EOL]     double labelHeight = 0.0; [EOL]     double labelWidth = 0.0; [EOL]     if (RectangleEdge.isTopOrBottom(edge)) { [EOL]         labelHeight = labelEnclosure.getHeight(); [EOL]         space.add(labelHeight + tickLabelHeight, edge); [EOL]     } else if (RectangleEdge.isLeftOrRight(edge)) { [EOL]         labelWidth = labelEnclosure.getWidth(); [EOL]         space.add(labelWidth + tickLabelWidth, edge); [EOL]     } [EOL]     return space; [EOL] } <line_num>: 771,822
protected double findMaximumTickLabelHeight(List ticks, Graphics2D g2, Rectangle2D drawArea, boolean vertical) { [EOL]     RectangleInsets insets = getTickLabelInsets(); [EOL]     Font font = getTickLabelFont(); [EOL]     double maxHeight = 0.0; [EOL]     if (vertical) { [EOL]         FontMetrics fm = g2.getFontMetrics(font); [EOL]         Iterator iterator = ticks.iterator(); [EOL]         while (iterator.hasNext()) { [EOL]             Tick tick = (Tick) iterator.next(); [EOL]             Rectangle2D labelBounds = TextUtilities.getTextBounds(tick.getText(), g2, fm); [EOL]             if (labelBounds.getWidth() + insets.getTop() + insets.getBottom() > maxHeight) { [EOL]                 maxHeight = labelBounds.getWidth() + insets.getTop() + insets.getBottom(); [EOL]             } [EOL]         } [EOL]     } else { [EOL]         LineMetrics metrics = font.getLineMetrics("ABCxyz", g2.getFontRenderContext()); [EOL]         maxHeight = metrics.getHeight() + insets.getTop() + insets.getBottom(); [EOL]     } [EOL]     return maxHeight; [EOL] } <line_num>: 835,865
protected double findMaximumTickLabelWidth(List ticks, Graphics2D g2, Rectangle2D drawArea, boolean vertical) { [EOL]     RectangleInsets insets = getTickLabelInsets(); [EOL]     Font font = getTickLabelFont(); [EOL]     double maxWidth = 0.0; [EOL]     if (!vertical) { [EOL]         FontMetrics fm = g2.getFontMetrics(font); [EOL]         Iterator iterator = ticks.iterator(); [EOL]         while (iterator.hasNext()) { [EOL]             Tick tick = (Tick) iterator.next(); [EOL]             Rectangle2D labelBounds = TextUtilities.getTextBounds(tick.getText(), g2, fm); [EOL]             if (labelBounds.getWidth() + insets.getLeft() + insets.getRight() > maxWidth) { [EOL]                 maxWidth = labelBounds.getWidth() + insets.getLeft() + insets.getRight(); [EOL]             } [EOL]         } [EOL]     } else { [EOL]         LineMetrics metrics = font.getLineMetrics("ABCxyz", g2.getFontRenderContext()); [EOL]         maxWidth = metrics.getHeight() + insets.getTop() + insets.getBottom(); [EOL]     } [EOL]     return maxWidth; [EOL] } <line_num>: 878,908
public boolean isInverted() { [EOL]     return this.inverted; [EOL] } <line_num>: 921,923
public void setInverted(boolean flag) { [EOL]     if (this.inverted != flag) { [EOL]         this.inverted = flag; [EOL]         notifyListeners(new AxisChangeEvent(this)); [EOL]     } [EOL] } <line_num>: 933,940
public boolean isAutoRange() { [EOL]     return this.autoRange; [EOL] } <line_num>: 950,952
public void setAutoRange(boolean auto) { [EOL]     setAutoRange(auto, true); [EOL] } <line_num>: 963,965
protected void setAutoRange(boolean auto, boolean notify) { [EOL]     if (this.autoRange != auto) { [EOL]         this.autoRange = auto; [EOL]         if (this.autoRange) { [EOL]             autoAdjustRange(); [EOL]         } [EOL]         if (notify) { [EOL]             notifyListeners(new AxisChangeEvent(this)); [EOL]         } [EOL]     } [EOL] } <line_num>: 976,986
public double getAutoRangeMinimumSize() { [EOL]     return this.autoRangeMinimumSize; [EOL] } <line_num>: 996,998
public void setAutoRangeMinimumSize(double size) { [EOL]     setAutoRangeMinimumSize(size, true); [EOL] } <line_num>: 1008,1010
public void setAutoRangeMinimumSize(double size, boolean notify) { [EOL]     if (size <= 0.0) { [EOL]         throw new IllegalArgumentException("NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0."); [EOL]     } [EOL]     if (this.autoRangeMinimumSize != size) { [EOL]         this.autoRangeMinimumSize = size; [EOL]         if (this.autoRange) { [EOL]             autoAdjustRange(); [EOL]         } [EOL]         if (notify) { [EOL]             notifyListeners(new AxisChangeEvent(this)); [EOL]         } [EOL]     } [EOL] } <line_num>: 1022,1037
public Range getDefaultAutoRange() { [EOL]     return this.defaultAutoRange; [EOL] } <line_num>: 1048,1050
public void setDefaultAutoRange(Range range) { [EOL]     if (range == null) { [EOL]         throw new IllegalArgumentException("Null 'range' argument."); [EOL]     } [EOL]     this.defaultAutoRange = range; [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 1062,1068
public double getLowerMargin() { [EOL]     return this.lowerMargin; [EOL] } <line_num>: 1080,1082
public void setLowerMargin(double margin) { [EOL]     this.lowerMargin = margin; [EOL]     if (isAutoRange()) { [EOL]         autoAdjustRange(); [EOL]     } [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 1095,1101
public double getUpperMargin() { [EOL]     return this.upperMargin; [EOL] } <line_num>: 1113,1115
public void setUpperMargin(double margin) { [EOL]     this.upperMargin = margin; [EOL]     if (isAutoRange()) { [EOL]         autoAdjustRange(); [EOL]     } [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 1128,1134
public double getFixedAutoRange() { [EOL]     return this.fixedAutoRange; [EOL] } <line_num>: 1143,1145
public void setFixedAutoRange(double length) { [EOL]     this.fixedAutoRange = length; [EOL]     if (isAutoRange()) { [EOL]         autoAdjustRange(); [EOL]     } [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 1154,1160
public double getLowerBound() { [EOL]     return this.range.getLowerBound(); [EOL] } <line_num>: 1169,1171
public void setLowerBound(double min) { [EOL]     if (this.range.getUpperBound() > min) { [EOL]         setRange(new Range(min, this.range.getUpperBound())); [EOL]     } else { [EOL]         setRange(new Range(min, min + 1.0)); [EOL]     } [EOL] } <line_num>: 1181,1188
public double getUpperBound() { [EOL]     return this.range.getUpperBound(); [EOL] } <line_num>: 1197,1199
public void setUpperBound(double max) { [EOL]     if (this.range.getLowerBound() < max) { [EOL]         setRange(new Range(this.range.getLowerBound(), max)); [EOL]     } else { [EOL]         setRange(max - 1.0, max); [EOL]     } [EOL] } <line_num>: 1209,1216
public Range getRange() { [EOL]     return this.range; [EOL] } <line_num>: 1225,1227
public void setRange(Range range) { [EOL]     setRange(range, true, true); [EOL] } <line_num>: 1238,1241
public void setRange(Range range, boolean turnOffAutoRange, boolean notify) { [EOL]     if (range == null) { [EOL]         throw new IllegalArgumentException("Null 'range' argument."); [EOL]     } [EOL]     if (turnOffAutoRange) { [EOL]         this.autoRange = false; [EOL]     } [EOL]     this.range = range; [EOL]     if (notify) { [EOL]         notifyListeners(new AxisChangeEvent(this)); [EOL]     } [EOL] } <line_num>: 1256,1268
public void setRange(double lower, double upper) { [EOL]     setRange(new Range(lower, upper)); [EOL] } <line_num>: 1281,1283
public void setRangeWithMargins(Range range) { [EOL]     setRangeWithMargins(range, true, true); [EOL] } <line_num>: 1292,1294
public void setRangeWithMargins(Range range, boolean turnOffAutoRange, boolean notify) { [EOL]     if (range == null) { [EOL]         throw new IllegalArgumentException("Null 'range' argument."); [EOL]     } [EOL]     setRange(Range.expand(range, getLowerMargin(), getUpperMargin()), turnOffAutoRange, notify); [EOL] } <line_num>: 1309,1316
public void setRangeWithMargins(double lower, double upper) { [EOL]     setRangeWithMargins(new Range(lower, upper)); [EOL] } <line_num>: 1326,1328
public void setRangeAboutValue(double value, double length) { [EOL]     setRange(new Range(value - length / 2, value + length / 2)); [EOL] } <line_num>: 1337,1339
public boolean isAutoTickUnitSelection() { [EOL]     return this.autoTickUnitSelection; [EOL] } <line_num>: 1350,1352
public void setAutoTickUnitSelection(boolean flag) { [EOL]     setAutoTickUnitSelection(flag, true); [EOL] } <line_num>: 1363,1365
public void setAutoTickUnitSelection(boolean flag, boolean notify) { [EOL]     if (this.autoTickUnitSelection != flag) { [EOL]         this.autoTickUnitSelection = flag; [EOL]         if (notify) { [EOL]             notifyListeners(new AxisChangeEvent(this)); [EOL]         } [EOL]     } [EOL] } <line_num>: 1376,1384
public TickUnitSource getStandardTickUnits() { [EOL]     return this.standardTickUnits; [EOL] } <line_num>: 1393,1395
public void setStandardTickUnits(TickUnitSource source) { [EOL]     this.standardTickUnits = source; [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 1409,1412
public int getMinorTickCount() { [EOL]     return this.minorTickCount; [EOL] } <line_num>: 1423,1425
public void setMinorTickCount(int count) { [EOL]     this.minorTickCount = count; [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 1437,1440
public abstract double valueToJava2D(double value, Rectangle2D area, RectangleEdge edge); <line_num>: 1456,1457
public double lengthToJava2D(double length, Rectangle2D area, RectangleEdge edge) { [EOL]     double zero = valueToJava2D(0.0, area, edge); [EOL]     double l = valueToJava2D(length, area, edge); [EOL]     return Math.abs(l - zero); [EOL] } <line_num>: 1469,1474
public abstract double java2DToValue(double java2DValue, Rectangle2D area, RectangleEdge edge); <line_num>: 1488,1490
protected abstract void autoAdjustRange(); <line_num>: 1498,1498
public void centerRange(double value) { [EOL]     double central = this.range.getCentralValue(); [EOL]     Range adjusted = new Range(this.range.getLowerBound() + value - central, this.range.getUpperBound() + value - central); [EOL]     setRange(adjusted); [EOL] } <line_num>: 1506,1513
public void resizeRange(double percent) { [EOL]     resizeRange(percent, this.range.getCentralValue()); [EOL] } <line_num>: 1527,1529
public void resizeRange(double percent, double anchorValue) { [EOL]     if (percent > 0.0) { [EOL]         double halfLength = this.range.getLength() * percent / 2; [EOL]         Range adjusted = new Range(anchorValue - halfLength, anchorValue + halfLength); [EOL]         setRange(adjusted); [EOL]     } else { [EOL]         setAutoRange(true); [EOL]     } [EOL] } <line_num>: 1544,1554
public void resizeRange2(double percent, double anchorValue) { [EOL]     if (percent > 0.0) { [EOL]         double left = anchorValue - getLowerBound(); [EOL]         double right = getUpperBound() - anchorValue; [EOL]         Range adjusted = new Range(anchorValue - left * percent, anchorValue + right * percent); [EOL]         setRange(adjusted); [EOL]     } else { [EOL]         setAutoRange(true); [EOL]     } [EOL] } <line_num>: 1571,1582
public void zoomRange(double lowerPercent, double upperPercent) { [EOL]     double start = this.range.getLowerBound(); [EOL]     double length = this.range.getLength(); [EOL]     Range adjusted = null; [EOL]     if (isInverted()) { [EOL]         adjusted = new Range(start + (length * (1 - upperPercent)), start + (length * (1 - lowerPercent))); [EOL]     } else { [EOL]         adjusted = new Range(start + length * lowerPercent, start + length * upperPercent); [EOL]     } [EOL]     setRange(adjusted); [EOL] } <line_num>: 1590,1603
public void pan(double percent) { [EOL]     Range range = getRange(); [EOL]     double length = range.getLength(); [EOL]     double adj = length * percent; [EOL]     double lower = range.getLowerBound() + adj; [EOL]     double upper = range.getUpperBound() + adj; [EOL]     setRange(lower, upper); [EOL] } <line_num>: 1612,1619
protected int getAutoTickIndex() { [EOL]     return this.autoTickIndex; [EOL] } <line_num>: 1628,1630
protected void setAutoTickIndex(int index) { [EOL]     this.autoTickIndex = index; [EOL] } <line_num>: 1639,1641
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof ValueAxis)) { [EOL]         return false; [EOL]     } [EOL]     ValueAxis that = (ValueAxis) obj; [EOL]     if (this.positiveArrowVisible != that.positiveArrowVisible) { [EOL]         return false; [EOL]     } [EOL]     if (this.negativeArrowVisible != that.negativeArrowVisible) { [EOL]         return false; [EOL]     } [EOL]     if (this.inverted != that.inverted) { [EOL]         return false; [EOL]     } [EOL]     if (!this.autoRange && !ObjectUtilities.equal(this.range, that.range)) { [EOL]         return false; [EOL]     } [EOL]     if (this.autoRange != that.autoRange) { [EOL]         return false; [EOL]     } [EOL]     if (this.autoRangeMinimumSize != that.autoRangeMinimumSize) { [EOL]         return false; [EOL]     } [EOL]     if (!this.defaultAutoRange.equals(that.defaultAutoRange)) { [EOL]         return false; [EOL]     } [EOL]     if (this.upperMargin != that.upperMargin) { [EOL]         return false; [EOL]     } [EOL]     if (this.lowerMargin != that.lowerMargin) { [EOL]         return false; [EOL]     } [EOL]     if (this.fixedAutoRange != that.fixedAutoRange) { [EOL]         return false; [EOL]     } [EOL]     if (this.autoTickUnitSelection != that.autoTickUnitSelection) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.standardTickUnits, that.standardTickUnits)) { [EOL]         return false; [EOL]     } [EOL]     if (this.verticalTickLabels != that.verticalTickLabels) { [EOL]         return false; [EOL]     } [EOL]     if (this.minorTickCount != that.minorTickCount) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 1650,1703
public Object clone() throws CloneNotSupportedException { [EOL]     ValueAxis clone = (ValueAxis) super.clone(); [EOL]     return clone; [EOL] } <line_num>: 1713,1716
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writeShape(this.upArrow, stream); [EOL]     SerialUtilities.writeShape(this.downArrow, stream); [EOL]     SerialUtilities.writeShape(this.leftArrow, stream); [EOL]     SerialUtilities.writeShape(this.rightArrow, stream); [EOL] } <line_num>: 1725,1731
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.upArrow = SerialUtilities.readShape(stream); [EOL]     this.downArrow = SerialUtilities.readShape(stream); [EOL]     this.leftArrow = SerialUtilities.readShape(stream); [EOL]     this.rightArrow = SerialUtilities.readShape(stream); [EOL] } <line_num>: 1741,1749
