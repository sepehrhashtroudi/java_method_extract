public SubCategoryAxis(String label) { [EOL]     super(label); [EOL]     this.subCategories = new java.util.ArrayList(); [EOL] } <line_num>: 101,104
public void addSubCategory(Comparable subCategory) { [EOL]     if (subCategory == null) { [EOL]         throw new IllegalArgumentException("Null 'subcategory' axis."); [EOL]     } [EOL]     this.subCategories.add(subCategory); [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 112,118
public Font getSubLabelFont() { [EOL]     return this.subLabelFont; [EOL] } <line_num>: 127,129
public void setSubLabelFont(Font font) { [EOL]     if (font == null) { [EOL]         throw new IllegalArgumentException("Null 'font' argument."); [EOL]     } [EOL]     this.subLabelFont = font; [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 139,145
public Paint getSubLabelPaint() { [EOL]     return this.subLabelPaint; [EOL] } <line_num>: 154,156
public void setSubLabelPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.subLabelPaint = paint; [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 166,172
public AxisSpace reserveSpace(Graphics2D g2, Plot plot, Rectangle2D plotArea, RectangleEdge edge, AxisSpace space) { [EOL]     if (space == null) { [EOL]         space = new AxisSpace(); [EOL]     } [EOL]     if (!isVisible()) { [EOL]         return space; [EOL]     } [EOL]     space = super.reserveSpace(g2, plot, plotArea, edge, space); [EOL]     double maxdim = getMaxDim(g2, edge); [EOL]     if (RectangleEdge.isTopOrBottom(edge)) { [EOL]         space.add(maxdim, edge); [EOL]     } else if (RectangleEdge.isLeftOrRight(edge)) { [EOL]         space.add(maxdim, edge); [EOL]     } [EOL]     return space; [EOL] } <line_num>: 185,208
private double getMaxDim(Graphics2D g2, RectangleEdge edge) { [EOL]     double result = 0.0; [EOL]     g2.setFont(this.subLabelFont); [EOL]     FontMetrics fm = g2.getFontMetrics(); [EOL]     Iterator iterator = this.subCategories.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         Comparable subcategory = (Comparable) iterator.next(); [EOL]         String label = subcategory.toString(); [EOL]         Rectangle2D bounds = TextUtilities.getTextBounds(label, g2, fm); [EOL]         double dim = 0.0; [EOL]         if (RectangleEdge.isLeftOrRight(edge)) { [EOL]             dim = bounds.getWidth(); [EOL]         } else { [EOL]             dim = bounds.getHeight(); [EOL]         } [EOL]         result = Math.max(result, dim); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 219,238
public AxisState draw(Graphics2D g2, double cursor, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, PlotRenderingInfo plotState) { [EOL]     if (!isVisible()) { [EOL]         return new AxisState(cursor); [EOL]     } [EOL]     if (isAxisLineVisible()) { [EOL]         drawAxisLine(g2, cursor, dataArea, edge); [EOL]     } [EOL]     AxisState state = new AxisState(cursor); [EOL]     state = drawSubCategoryLabels(g2, plotArea, dataArea, edge, state, plotState); [EOL]     state = drawCategoryLabels(g2, plotArea, dataArea, edge, state, plotState); [EOL]     state = drawLabel(getLabel(), g2, plotArea, dataArea, edge, state, plotState); [EOL]     return state; [EOL] } <line_num>: 256,283
protected AxisState drawSubCategoryLabels(Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) { [EOL]     if (state == null) { [EOL]         throw new IllegalArgumentException("Null 'state' argument."); [EOL]     } [EOL]     g2.setFont(this.subLabelFont); [EOL]     g2.setPaint(this.subLabelPaint); [EOL]     CategoryPlot plot = (CategoryPlot) getPlot(); [EOL]     int categoryCount = 0; [EOL]     CategoryDataset dataset = plot.getDataset(); [EOL]     if (dataset != null) { [EOL]         categoryCount = dataset.getColumnCount(); [EOL]     } [EOL]     double maxdim = getMaxDim(g2, edge); [EOL]     for (int categoryIndex = 0; categoryIndex < categoryCount; categoryIndex++) { [EOL]         double x0 = 0.0; [EOL]         double x1 = 0.0; [EOL]         double y0 = 0.0; [EOL]         double y1 = 0.0; [EOL]         if (edge == RectangleEdge.TOP) { [EOL]             x0 = getCategoryStart(categoryIndex, categoryCount, dataArea, edge); [EOL]             x1 = getCategoryEnd(categoryIndex, categoryCount, dataArea, edge); [EOL]             y1 = state.getCursor(); [EOL]             y0 = y1 - maxdim; [EOL]         } else if (edge == RectangleEdge.BOTTOM) { [EOL]             x0 = getCategoryStart(categoryIndex, categoryCount, dataArea, edge); [EOL]             x1 = getCategoryEnd(categoryIndex, categoryCount, dataArea, edge); [EOL]             y0 = state.getCursor(); [EOL]             y1 = y0 + maxdim; [EOL]         } else if (edge == RectangleEdge.LEFT) { [EOL]             y0 = getCategoryStart(categoryIndex, categoryCount, dataArea, edge); [EOL]             y1 = getCategoryEnd(categoryIndex, categoryCount, dataArea, edge); [EOL]             x1 = state.getCursor(); [EOL]             x0 = x1 - maxdim; [EOL]         } else if (edge == RectangleEdge.RIGHT) { [EOL]             y0 = getCategoryStart(categoryIndex, categoryCount, dataArea, edge); [EOL]             y1 = getCategoryEnd(categoryIndex, categoryCount, dataArea, edge); [EOL]             x0 = state.getCursor(); [EOL]             x1 = x0 + maxdim; [EOL]         } [EOL]         Rectangle2D area = new Rectangle2D.Double(x0, y0, (x1 - x0), (y1 - y0)); [EOL]         int subCategoryCount = this.subCategories.size(); [EOL]         float width = (float) ((x1 - x0) / subCategoryCount); [EOL]         float height = (float) ((y1 - y0) / subCategoryCount); [EOL]         float xx = 0.0f; [EOL]         float yy = 0.0f; [EOL]         for (int i = 0; i < subCategoryCount; i++) { [EOL]             if (RectangleEdge.isTopOrBottom(edge)) { [EOL]                 xx = (float) (x0 + (i + 0.5) * width); [EOL]                 yy = (float) area.getCenterY(); [EOL]             } else { [EOL]                 xx = (float) area.getCenterX(); [EOL]                 yy = (float) (y0 + (i + 0.5) * height); [EOL]             } [EOL]             String label = this.subCategories.get(i).toString(); [EOL]             TextUtilities.drawRotatedString(label, g2, xx, yy, TextAnchor.CENTER, 0.0, TextAnchor.CENTER); [EOL]         } [EOL]     } [EOL]     if (edge.equals(RectangleEdge.TOP)) { [EOL]         double h = maxdim; [EOL]         state.cursorUp(h); [EOL]     } else if (edge.equals(RectangleEdge.BOTTOM)) { [EOL]         double h = maxdim; [EOL]         state.cursorDown(h); [EOL]     } else if (edge == RectangleEdge.LEFT) { [EOL]         double w = maxdim; [EOL]         state.cursorLeft(w); [EOL]     } else if (edge == RectangleEdge.RIGHT) { [EOL]         double w = maxdim; [EOL]         state.cursorRight(w); [EOL]     } [EOL]     return state; [EOL] } <line_num>: 299,398
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (obj instanceof SubCategoryAxis && super.equals(obj)) { [EOL]         SubCategoryAxis axis = (SubCategoryAxis) obj; [EOL]         if (!this.subCategories.equals(axis.subCategories)) { [EOL]             return false; [EOL]         } [EOL]         if (!this.subLabelFont.equals(axis.subLabelFont)) { [EOL]             return false; [EOL]         } [EOL]         if (!this.subLabelPaint.equals(axis.subLabelPaint)) { [EOL]             return false; [EOL]         } [EOL]         return true; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 407,425
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.subLabelPaint, stream); [EOL] } <line_num>: 434,437
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.subLabelPaint = SerialUtilities.readPaint(stream); [EOL] } <line_num>: 447,451
