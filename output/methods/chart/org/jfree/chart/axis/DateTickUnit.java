public DateTickUnit(DateTickUnitType unitType, int multiple) { [EOL]     this(unitType, multiple, DateFormat.getDateInstance(DateFormat.SHORT)); [EOL] } <line_num>: 107,109
public DateTickUnit(DateTickUnitType unitType, int multiple, DateFormat formatter) { [EOL]     this(unitType, multiple, unitType, multiple, formatter); [EOL] } <line_num>: 120,123
public DateTickUnit(DateTickUnitType unitType, int multiple, DateTickUnitType rollUnitType, int rollMultiple, DateFormat formatter) { [EOL]     super(DateTickUnit.getMillisecondCount(unitType, multiple)); [EOL]     if (formatter == null) { [EOL]         throw new IllegalArgumentException("Null 'formatter' argument."); [EOL]     } [EOL]     if (multiple <= 0) { [EOL]         throw new IllegalArgumentException("Requires 'multiple' > 0."); [EOL]     } [EOL]     if (rollMultiple <= 0) { [EOL]         throw new IllegalArgumentException("Requires 'rollMultiple' > 0."); [EOL]     } [EOL]     this.unitType = unitType; [EOL]     this.count = multiple; [EOL]     this.rollUnitType = rollUnitType; [EOL]     this.rollCount = rollMultiple; [EOL]     this.formatter = formatter; [EOL] } <line_num>: 136,154
public DateTickUnitType getUnitType() { [EOL]     return this.unitType; [EOL] } <line_num>: 163,165
public int getMultiple() { [EOL]     return this.count; [EOL] } <line_num>: 172,174
public DateTickUnitType getRollUnitType() { [EOL]     return this.rollUnitType; [EOL] } <line_num>: 183,185
public int getRollMultiple() { [EOL]     return this.rollCount; [EOL] } <line_num>: 194,196
public String valueToString(double milliseconds) { [EOL]     return this.formatter.format(new Date((long) milliseconds)); [EOL] } <line_num>: 205,207
public String dateToString(Date date) { [EOL]     return this.formatter.format(date); [EOL] } <line_num>: 216,218
public Date addToDate(Date base, TimeZone zone) { [EOL]     Calendar calendar = Calendar.getInstance(zone); [EOL]     calendar.setTime(base); [EOL]     calendar.add(this.unitType.getCalendarField(), this.count); [EOL]     return calendar.getTime(); [EOL] } <line_num>: 230,239
public Date rollDate(Date base) { [EOL]     return rollDate(base, TimeZone.getDefault()); [EOL] } <line_num>: 251,253
public Date rollDate(Date base, TimeZone zone) { [EOL]     Calendar calendar = Calendar.getInstance(zone); [EOL]     calendar.setTime(base); [EOL]     calendar.add(this.rollUnitType.getCalendarField(), this.rollCount); [EOL]     return calendar.getTime(); [EOL] } <line_num>: 266,275
public int getCalendarField() { [EOL]     return this.unitType.getCalendarField(); [EOL] } <line_num>: 283,285
private static long getMillisecondCount(DateTickUnitType unit, int count) { [EOL]     if (unit.equals(DateTickUnitType.YEAR)) { [EOL]         return (365L * 24L * 60L * 60L * 1000L) * count; [EOL]     } else if (unit.equals(DateTickUnitType.MONTH)) { [EOL]         return (31L * 24L * 60L * 60L * 1000L) * count; [EOL]     } else if (unit.equals(DateTickUnitType.DAY)) { [EOL]         return (24L * 60L * 60L * 1000L) * count; [EOL]     } else if (unit.equals(DateTickUnitType.HOUR)) { [EOL]         return (60L * 60L * 1000L) * count; [EOL]     } else if (unit.equals(DateTickUnitType.MINUTE)) { [EOL]         return (60L * 1000L) * count; [EOL]     } else if (unit.equals(DateTickUnitType.SECOND)) { [EOL]         return 1000L * count; [EOL]     } else if (unit.equals(DateTickUnitType.MILLISECOND)) { [EOL]         return count; [EOL]     } else { [EOL]         throw new IllegalArgumentException("The 'unit' argument has a " + "value that is not recognised."); [EOL]     } [EOL] } <line_num>: 301,329
private static DateFormat notNull(DateFormat formatter) { [EOL]     if (formatter == null) { [EOL]         return DateFormat.getDateInstance(DateFormat.SHORT); [EOL]     } else { [EOL]         return formatter; [EOL]     } [EOL] } <line_num>: 339,346
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof DateTickUnit)) { [EOL]         return false; [EOL]     } [EOL]     if (!super.equals(obj)) { [EOL]         return false; [EOL]     } [EOL]     DateTickUnit that = (DateTickUnit) obj; [EOL]     if (!(this.unitType.equals(that.unitType))) { [EOL]         return false; [EOL]     } [EOL]     if (this.count != that.count) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.formatter, that.formatter)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 355,376
public int hashCode() { [EOL]     int result = 19; [EOL]     result = 37 * result + this.unitType.hashCode(); [EOL]     result = 37 * result + this.count; [EOL]     result = 37 * result + this.formatter.hashCode(); [EOL]     return result; [EOL] } <line_num>: 383,389
public String toString() { [EOL]     return "DateTickUnit[" + this.unitType.toString() + ", " + this.count + "]"; [EOL] } <line_num>: 397,400
