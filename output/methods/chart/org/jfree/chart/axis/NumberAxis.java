public NumberAxis() { [EOL]     this(null); [EOL] } <line_num>: 191,193
public NumberAxis(String label) { [EOL]     super(label, NumberAxis.createStandardTickUnits()); [EOL]     this.rangeType = RangeType.FULL; [EOL]     this.autoRangeIncludesZero = DEFAULT_AUTO_RANGE_INCLUDES_ZERO; [EOL]     this.autoRangeStickyZero = DEFAULT_AUTO_RANGE_STICKY_ZERO; [EOL]     this.tickUnit = DEFAULT_TICK_UNIT; [EOL]     this.numberFormatOverride = null; [EOL]     this.markerBand = null; [EOL] } <line_num>: 200,208
public RangeType getRangeType() { [EOL]     return this.rangeType; [EOL] } <line_num>: 217,219
public void setRangeType(RangeType rangeType) { [EOL]     if (rangeType == null) { [EOL]         throw new IllegalArgumentException("Null 'rangeType' argument."); [EOL]     } [EOL]     this.rangeType = rangeType; [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 228,234
public boolean getAutoRangeIncludesZero() { [EOL]     return this.autoRangeIncludesZero; [EOL] } <line_num>: 242,244
public void setAutoRangeIncludesZero(boolean flag) { [EOL]     if (this.autoRangeIncludesZero != flag) { [EOL]         this.autoRangeIncludesZero = flag; [EOL]         if (isAutoRange()) { [EOL]             autoAdjustRange(); [EOL]         } [EOL]         notifyListeners(new AxisChangeEvent(this)); [EOL]     } [EOL] } <line_num>: 259,267
public boolean getAutoRangeStickyZero() { [EOL]     return this.autoRangeStickyZero; [EOL] } <line_num>: 277,279
public void setAutoRangeStickyZero(boolean flag) { [EOL]     if (this.autoRangeStickyZero != flag) { [EOL]         this.autoRangeStickyZero = flag; [EOL]         if (isAutoRange()) { [EOL]             autoAdjustRange(); [EOL]         } [EOL]         notifyListeners(new AxisChangeEvent(this)); [EOL]     } [EOL] } <line_num>: 289,297
public NumberTickUnit getTickUnit() { [EOL]     return this.tickUnit; [EOL] } <line_num>: 312,314
public void setTickUnit(NumberTickUnit unit) { [EOL]     setTickUnit(unit, true, true); [EOL] } <line_num>: 328,331
public void setTickUnit(NumberTickUnit unit, boolean notify, boolean turnOffAutoSelect) { [EOL]     if (unit == null) { [EOL]         throw new IllegalArgumentException("Null 'unit' argument."); [EOL]     } [EOL]     this.tickUnit = unit; [EOL]     if (turnOffAutoSelect) { [EOL]         setAutoTickUnitSelection(false, false); [EOL]     } [EOL]     if (notify) { [EOL]         notifyListeners(new AxisChangeEvent(this)); [EOL]     } [EOL] } <line_num>: 344,358
public NumberFormat getNumberFormatOverride() { [EOL]     return this.numberFormatOverride; [EOL] } <line_num>: 368,370
public void setNumberFormatOverride(NumberFormat formatter) { [EOL]     this.numberFormatOverride = formatter; [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 380,383
public MarkerAxisBand getMarkerBand() { [EOL]     return this.markerBand; [EOL] } <line_num>: 392,394
public void setMarkerBand(MarkerAxisBand band) { [EOL]     this.markerBand = band; [EOL]     notifyListeners(new AxisChangeEvent(this)); [EOL] } <line_num>: 406,409
public void configure() { [EOL]     if (isAutoRange()) { [EOL]         autoAdjustRange(); [EOL]     } [EOL] } <line_num>: 415,419
protected void autoAdjustRange() { [EOL]     Plot plot = getPlot(); [EOL]     if (plot == null) { [EOL]         return; [EOL]     } [EOL]     if (plot instanceof ValueAxisPlot) { [EOL]         ValueAxisPlot vap = (ValueAxisPlot) plot; [EOL]         Range r = vap.getDataRange(this); [EOL]         if (r == null) { [EOL]             r = getDefaultAutoRange(); [EOL]         } [EOL]         double upper = r.getUpperBound(); [EOL]         double lower = r.getLowerBound(); [EOL]         if (this.rangeType == RangeType.POSITIVE) { [EOL]             lower = Math.max(0.0, lower); [EOL]             upper = Math.max(0.0, upper); [EOL]         } else if (this.rangeType == RangeType.NEGATIVE) { [EOL]             lower = Math.min(0.0, lower); [EOL]             upper = Math.min(0.0, upper); [EOL]         } [EOL]         if (getAutoRangeIncludesZero()) { [EOL]             lower = Math.min(lower, 0.0); [EOL]             upper = Math.max(upper, 0.0); [EOL]         } [EOL]         double range = upper - lower; [EOL]         double fixedAutoRange = getFixedAutoRange(); [EOL]         if (fixedAutoRange > 0.0) { [EOL]             lower = upper - fixedAutoRange; [EOL]         } else { [EOL]             double minRange = getAutoRangeMinimumSize(); [EOL]             if (range < minRange) { [EOL]                 double expand = (minRange - range) / 2; [EOL]                 upper = upper + expand; [EOL]                 lower = lower - expand; [EOL]                 if (lower == upper) { [EOL]                     double adjust = Math.abs(lower) / 10.0; [EOL]                     lower = lower - adjust; [EOL]                     upper = upper + adjust; [EOL]                 } [EOL]                 if (this.rangeType == RangeType.POSITIVE) { [EOL]                     if (lower < 0.0) { [EOL]                         upper = upper - lower; [EOL]                         lower = 0.0; [EOL]                     } [EOL]                 } else if (this.rangeType == RangeType.NEGATIVE) { [EOL]                     if (upper > 0.0) { [EOL]                         lower = lower - upper; [EOL]                         upper = 0.0; [EOL]                     } [EOL]                 } [EOL]             } [EOL]             if (getAutoRangeStickyZero()) { [EOL]                 if (upper <= 0.0) { [EOL]                     upper = Math.min(0.0, upper + getUpperMargin() * range); [EOL]                 } else { [EOL]                     upper = upper + getUpperMargin() * range; [EOL]                 } [EOL]                 if (lower >= 0.0) { [EOL]                     lower = Math.max(0.0, lower - getLowerMargin() * range); [EOL]                 } else { [EOL]                     lower = lower - getLowerMargin() * range; [EOL]                 } [EOL]             } else { [EOL]                 upper = upper + getUpperMargin() * range; [EOL]                 lower = lower - getLowerMargin() * range; [EOL]             } [EOL]         } [EOL]         setRange(new Range(lower, upper), false, false); [EOL]     } [EOL] } <line_num>: 424,510
public double valueToJava2D(double value, Rectangle2D area, RectangleEdge edge) { [EOL]     Range range = getRange(); [EOL]     double axisMin = range.getLowerBound(); [EOL]     double axisMax = range.getUpperBound(); [EOL]     double min = 0.0; [EOL]     double max = 0.0; [EOL]     if (RectangleEdge.isTopOrBottom(edge)) { [EOL]         min = area.getX(); [EOL]         max = area.getMaxX(); [EOL]     } else if (RectangleEdge.isLeftOrRight(edge)) { [EOL]         max = area.getMinY(); [EOL]         min = area.getMaxY(); [EOL]     } [EOL]     if (isInverted()) { [EOL]         return max - ((value - axisMin) / (axisMax - axisMin)) * (max - min); [EOL]     } else { [EOL]         return min + ((value - axisMin) / (axisMax - axisMin)) * (max - min); [EOL]     } [EOL] } <line_num>: 526,552
public double java2DToValue(double java2DValue, Rectangle2D area, RectangleEdge edge) { [EOL]     Range range = getRange(); [EOL]     double axisMin = range.getLowerBound(); [EOL]     double axisMax = range.getUpperBound(); [EOL]     double min = 0.0; [EOL]     double max = 0.0; [EOL]     if (RectangleEdge.isTopOrBottom(edge)) { [EOL]         min = area.getX(); [EOL]         max = area.getMaxX(); [EOL]     } else if (RectangleEdge.isLeftOrRight(edge)) { [EOL]         min = area.getMaxY(); [EOL]         max = area.getY(); [EOL]     } [EOL]     if (isInverted()) { [EOL]         return axisMax - (java2DValue - min) / (max - min) * (axisMax - axisMin); [EOL]     } else { [EOL]         return axisMin + (java2DValue - min) / (max - min) * (axisMax - axisMin); [EOL]     } [EOL] } <line_num>: 566,592
protected double calculateLowestVisibleTickValue() { [EOL]     double unit = getTickUnit().getSize(); [EOL]     double index = Math.ceil(getRange().getLowerBound() / unit); [EOL]     return index * unit; [EOL] } <line_num>: 601,607
protected double calculateHighestVisibleTickValue() { [EOL]     double unit = getTickUnit().getSize(); [EOL]     double index = Math.floor(getRange().getUpperBound() / unit); [EOL]     return index * unit; [EOL] } <line_num>: 616,622
protected int calculateVisibleTickCount() { [EOL]     double unit = getTickUnit().getSize(); [EOL]     Range range = getRange(); [EOL]     return (int) (Math.floor(range.getUpperBound() / unit) - Math.ceil(range.getLowerBound() / unit) + 1); [EOL] } <line_num>: 629,636
public AxisState draw(Graphics2D g2, double cursor, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, PlotRenderingInfo plotState) { [EOL]     AxisState state = null; [EOL]     if (!isVisible()) { [EOL]         state = new AxisState(cursor); [EOL]         List ticks = refreshTicks(g2, state, dataArea, edge); [EOL]         state.setTicks(ticks); [EOL]         return state; [EOL]     } [EOL]     state = drawTickMarksAndLabels(g2, cursor, plotArea, dataArea, edge, plotState); [EOL]     state = drawLabel(getLabel(), g2, plotArea, dataArea, edge, state, plotState); [EOL]     createAndAddEntity(cursor, state, dataArea, edge, plotState); [EOL]     return state; [EOL] } <line_num>: 654,687
public static TickUnitSource createStandardTickUnits() { [EOL]     TickUnits units = new TickUnits(); [EOL]     DecimalFormat df000 = new DecimalFormat("0.0000000000"); [EOL]     DecimalFormat df00 = new DecimalFormat("0.000000000"); [EOL]     DecimalFormat df0 = new DecimalFormat("0.00000000"); [EOL]     DecimalFormat df1 = new DecimalFormat("0.0000000"); [EOL]     DecimalFormat df2 = new DecimalFormat("0.000000"); [EOL]     DecimalFormat df3 = new DecimalFormat("0.00000"); [EOL]     DecimalFormat df4 = new DecimalFormat("0.0000"); [EOL]     DecimalFormat df5 = new DecimalFormat("0.000"); [EOL]     DecimalFormat df6 = new DecimalFormat("0.00"); [EOL]     DecimalFormat df7 = new DecimalFormat("0.0"); [EOL]     DecimalFormat df8 = new DecimalFormat("#,##0"); [EOL]     DecimalFormat df9 = new DecimalFormat("#,###,##0"); [EOL]     DecimalFormat df10 = new DecimalFormat("#,###,###,##0"); [EOL]     units.add(new NumberTickUnit(0.000000001, df00, 2)); [EOL]     units.add(new NumberTickUnit(0.00000001, df0, 2)); [EOL]     units.add(new NumberTickUnit(0.0000001, df1, 2)); [EOL]     units.add(new NumberTickUnit(0.000001, df2, 2)); [EOL]     units.add(new NumberTickUnit(0.00001, df3, 2)); [EOL]     units.add(new NumberTickUnit(0.0001, df4, 2)); [EOL]     units.add(new NumberTickUnit(0.001, df5, 2)); [EOL]     units.add(new NumberTickUnit(0.01, df6, 2)); [EOL]     units.add(new NumberTickUnit(0.1, df7, 2)); [EOL]     units.add(new NumberTickUnit(1, df8, 2)); [EOL]     units.add(new NumberTickUnit(10, df8, 2)); [EOL]     units.add(new NumberTickUnit(100, df8, 2)); [EOL]     units.add(new NumberTickUnit(1000, df8, 2)); [EOL]     units.add(new NumberTickUnit(10000, df8, 2)); [EOL]     units.add(new NumberTickUnit(100000, df8, 2)); [EOL]     units.add(new NumberTickUnit(1000000, df9, 2)); [EOL]     units.add(new NumberTickUnit(10000000, df9, 2)); [EOL]     units.add(new NumberTickUnit(100000000, df9, 2)); [EOL]     units.add(new NumberTickUnit(1000000000, df10, 2)); [EOL]     units.add(new NumberTickUnit(10000000000.0, df10, 2)); [EOL]     units.add(new NumberTickUnit(100000000000.0, df10, 2)); [EOL]     units.add(new NumberTickUnit(0.0000000025, df000, 5)); [EOL]     units.add(new NumberTickUnit(0.000000025, df00, 5)); [EOL]     units.add(new NumberTickUnit(0.00000025, df0, 5)); [EOL]     units.add(new NumberTickUnit(0.0000025, df1, 5)); [EOL]     units.add(new NumberTickUnit(0.000025, df2, 5)); [EOL]     units.add(new NumberTickUnit(0.00025, df3, 5)); [EOL]     units.add(new NumberTickUnit(0.0025, df4, 5)); [EOL]     units.add(new NumberTickUnit(0.025, df5, 5)); [EOL]     units.add(new NumberTickUnit(0.25, df6, 5)); [EOL]     units.add(new NumberTickUnit(2.5, df7, 5)); [EOL]     units.add(new NumberTickUnit(25, df8, 5)); [EOL]     units.add(new NumberTickUnit(250, df8, 5)); [EOL]     units.add(new NumberTickUnit(2500, df8, 5)); [EOL]     units.add(new NumberTickUnit(25000, df8, 5)); [EOL]     units.add(new NumberTickUnit(250000, df8, 5)); [EOL]     units.add(new NumberTickUnit(2500000, df9, 5)); [EOL]     units.add(new NumberTickUnit(25000000, df9, 5)); [EOL]     units.add(new NumberTickUnit(250000000, df9, 5)); [EOL]     units.add(new NumberTickUnit(2500000000.0, df10, 5)); [EOL]     units.add(new NumberTickUnit(25000000000.0, df10, 5)); [EOL]     units.add(new NumberTickUnit(250000000000.0, df10, 5)); [EOL]     units.add(new NumberTickUnit(0.000000005, df00, 5)); [EOL]     units.add(new NumberTickUnit(0.00000005, df0, 5)); [EOL]     units.add(new NumberTickUnit(0.0000005, df1, 5)); [EOL]     units.add(new NumberTickUnit(0.000005, df2, 5)); [EOL]     units.add(new NumberTickUnit(0.00005, df3, 5)); [EOL]     units.add(new NumberTickUnit(0.0005, df4, 5)); [EOL]     units.add(new NumberTickUnit(0.005, df5, 5)); [EOL]     units.add(new NumberTickUnit(0.05, df6, 5)); [EOL]     units.add(new NumberTickUnit(0.5, df7, 5)); [EOL]     units.add(new NumberTickUnit(5L, df8, 5)); [EOL]     units.add(new NumberTickUnit(50L, df8, 5)); [EOL]     units.add(new NumberTickUnit(500L, df8, 5)); [EOL]     units.add(new NumberTickUnit(5000L, df8, 5)); [EOL]     units.add(new NumberTickUnit(50000L, df8, 5)); [EOL]     units.add(new NumberTickUnit(500000L, df8, 5)); [EOL]     units.add(new NumberTickUnit(5000000L, df9, 5)); [EOL]     units.add(new NumberTickUnit(50000000L, df9, 5)); [EOL]     units.add(new NumberTickUnit(500000000L, df9, 5)); [EOL]     units.add(new NumberTickUnit(5000000000L, df10, 5)); [EOL]     units.add(new NumberTickUnit(50000000000L, df10, 5)); [EOL]     units.add(new NumberTickUnit(500000000000L, df10, 5)); [EOL]     return units; [EOL] } <line_num>: 701,788
public static TickUnitSource createIntegerTickUnits() { [EOL]     TickUnits units = new TickUnits(); [EOL]     DecimalFormat df0 = new DecimalFormat("0"); [EOL]     DecimalFormat df1 = new DecimalFormat("#,##0"); [EOL]     units.add(new NumberTickUnit(1, df0, 2)); [EOL]     units.add(new NumberTickUnit(2, df0, 2)); [EOL]     units.add(new NumberTickUnit(5, df0, 5)); [EOL]     units.add(new NumberTickUnit(10, df0, 2)); [EOL]     units.add(new NumberTickUnit(20, df0, 2)); [EOL]     units.add(new NumberTickUnit(50, df0, 5)); [EOL]     units.add(new NumberTickUnit(100, df0, 2)); [EOL]     units.add(new NumberTickUnit(200, df0, 2)); [EOL]     units.add(new NumberTickUnit(500, df0, 5)); [EOL]     units.add(new NumberTickUnit(1000, df1, 2)); [EOL]     units.add(new NumberTickUnit(2000, df1, 2)); [EOL]     units.add(new NumberTickUnit(5000, df1, 5)); [EOL]     units.add(new NumberTickUnit(10000, df1, 2)); [EOL]     units.add(new NumberTickUnit(20000, df1, 2)); [EOL]     units.add(new NumberTickUnit(50000, df1, 5)); [EOL]     units.add(new NumberTickUnit(100000, df1, 2)); [EOL]     units.add(new NumberTickUnit(200000, df1, 2)); [EOL]     units.add(new NumberTickUnit(500000, df1, 5)); [EOL]     units.add(new NumberTickUnit(1000000, df1, 2)); [EOL]     units.add(new NumberTickUnit(2000000, df1, 2)); [EOL]     units.add(new NumberTickUnit(5000000, df1, 5)); [EOL]     units.add(new NumberTickUnit(10000000, df1, 2)); [EOL]     units.add(new NumberTickUnit(20000000, df1, 2)); [EOL]     units.add(new NumberTickUnit(50000000, df1, 5)); [EOL]     units.add(new NumberTickUnit(100000000, df1, 2)); [EOL]     units.add(new NumberTickUnit(200000000, df1, 2)); [EOL]     units.add(new NumberTickUnit(500000000, df1, 5)); [EOL]     units.add(new NumberTickUnit(1000000000, df1, 2)); [EOL]     units.add(new NumberTickUnit(2000000000, df1, 2)); [EOL]     units.add(new NumberTickUnit(5000000000.0, df1, 5)); [EOL]     units.add(new NumberTickUnit(10000000000.0, df1, 2)); [EOL]     return units; [EOL] } <line_num>: 798,834
public static TickUnitSource createStandardTickUnits(Locale locale) { [EOL]     TickUnits units = new TickUnits(); [EOL]     NumberFormat numberFormat = NumberFormat.getNumberInstance(locale); [EOL]     units.add(new NumberTickUnit(0.0000001, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(0.000001, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(0.00001, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(0.0001, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(0.001, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(0.01, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(0.1, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(1, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(10, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(100, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(1000, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(10000, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(100000, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(1000000, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(10000000, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(100000000, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(1000000000, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(10000000000.0, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(0.00000025, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(0.0000025, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(0.000025, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(0.00025, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(0.0025, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(0.025, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(0.25, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(2.5, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(25, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(250, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(2500, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(25000, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(250000, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(2500000, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(25000000, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(250000000, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(2500000000.0, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(25000000000.0, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(0.0000005, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(0.000005, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(0.00005, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(0.0005, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(0.005, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(0.05, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(0.5, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(5L, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(50L, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(500L, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(5000L, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(50000L, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(500000L, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(5000000L, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(50000000L, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(500000000L, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(5000000000L, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(50000000000L, numberFormat, 5)); [EOL]     return units; [EOL] } <line_num>: 851,916
public static TickUnitSource createIntegerTickUnits(Locale locale) { [EOL]     TickUnits units = new TickUnits(); [EOL]     NumberFormat numberFormat = NumberFormat.getNumberInstance(locale); [EOL]     units.add(new NumberTickUnit(1, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(2, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(5, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(10, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(20, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(50, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(100, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(200, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(500, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(1000, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(2000, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(5000, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(10000, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(20000, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(50000, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(100000, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(200000, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(500000, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(1000000, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(2000000, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(5000000, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(10000000, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(20000000, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(50000000, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(100000000, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(200000000, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(500000000, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(1000000000, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(2000000000, numberFormat, 2)); [EOL]     units.add(new NumberTickUnit(5000000000.0, numberFormat, 5)); [EOL]     units.add(new NumberTickUnit(10000000000.0, numberFormat, 2)); [EOL]     return units; [EOL] } <line_num>: 928,963
protected double estimateMaximumTickLabelHeight(Graphics2D g2) { [EOL]     RectangleInsets tickLabelInsets = getTickLabelInsets(); [EOL]     double result = tickLabelInsets.getTop() + tickLabelInsets.getBottom(); [EOL]     Font tickLabelFont = getTickLabelFont(); [EOL]     FontRenderContext frc = g2.getFontRenderContext(); [EOL]     result += tickLabelFont.getLineMetrics("123", frc).getHeight(); [EOL]     return result; [EOL] } <line_num>: 972,982
protected double estimateMaximumTickLabelWidth(Graphics2D g2, TickUnit unit) { [EOL]     RectangleInsets tickLabelInsets = getTickLabelInsets(); [EOL]     double result = tickLabelInsets.getLeft() + tickLabelInsets.getRight(); [EOL]     if (isVerticalTickLabels()) { [EOL]         FontRenderContext frc = g2.getFontRenderContext(); [EOL]         LineMetrics lm = getTickLabelFont().getLineMetrics("0", frc); [EOL]         result += lm.getHeight(); [EOL]     } else { [EOL]         FontMetrics fm = g2.getFontMetrics(getTickLabelFont()); [EOL]         Range range = getRange(); [EOL]         double lower = range.getLowerBound(); [EOL]         double upper = range.getUpperBound(); [EOL]         String lowerStr = ""; [EOL]         String upperStr = ""; [EOL]         NumberFormat formatter = getNumberFormatOverride(); [EOL]         if (formatter != null) { [EOL]             lowerStr = formatter.format(lower); [EOL]             upperStr = formatter.format(upper); [EOL]         } else { [EOL]             lowerStr = unit.valueToString(lower); [EOL]             upperStr = unit.valueToString(upper); [EOL]         } [EOL]         double w1 = fm.stringWidth(lowerStr); [EOL]         double w2 = fm.stringWidth(upperStr); [EOL]         result += Math.max(w1, w2); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 997,1034
protected void selectAutoTickUnit(Graphics2D g2, Rectangle2D dataArea, RectangleEdge edge) { [EOL]     if (RectangleEdge.isTopOrBottom(edge)) { [EOL]         selectHorizontalAutoTickUnit(g2, dataArea, edge); [EOL]     } else if (RectangleEdge.isLeftOrRight(edge)) { [EOL]         selectVerticalAutoTickUnit(g2, dataArea, edge); [EOL]     } [EOL] } <line_num>: 1045,1056
protected void selectHorizontalAutoTickUnit(Graphics2D g2, Rectangle2D dataArea, RectangleEdge edge) { [EOL]     double tickLabelWidth = estimateMaximumTickLabelWidth(g2, getTickUnit()); [EOL]     TickUnitSource tickUnits = getStandardTickUnits(); [EOL]     TickUnit unit1 = tickUnits.getCeilingTickUnit(getTickUnit()); [EOL]     double unit1Width = lengthToJava2D(unit1.getSize(), dataArea, edge); [EOL]     double guess = (tickLabelWidth / unit1Width) * unit1.getSize(); [EOL]     NumberTickUnit unit2 = (NumberTickUnit) tickUnits.getCeilingTickUnit(guess); [EOL]     double unit2Width = lengthToJava2D(unit2.getSize(), dataArea, edge); [EOL]     tickLabelWidth = estimateMaximumTickLabelWidth(g2, unit2); [EOL]     if (tickLabelWidth > unit2Width) { [EOL]         unit2 = (NumberTickUnit) tickUnits.getLargerTickUnit(unit2); [EOL]     } [EOL]     setTickUnit(unit2, false, false); [EOL] } <line_num>: 1067,1093
protected void selectVerticalAutoTickUnit(Graphics2D g2, Rectangle2D dataArea, RectangleEdge edge) { [EOL]     double tickLabelHeight = estimateMaximumTickLabelHeight(g2); [EOL]     TickUnitSource tickUnits = getStandardTickUnits(); [EOL]     TickUnit unit1 = tickUnits.getCeilingTickUnit(getTickUnit()); [EOL]     double unitHeight = lengthToJava2D(unit1.getSize(), dataArea, edge); [EOL]     double guess = (tickLabelHeight / unitHeight) * unit1.getSize(); [EOL]     NumberTickUnit unit2 = (NumberTickUnit) tickUnits.getCeilingTickUnit(guess); [EOL]     double unit2Height = lengthToJava2D(unit2.getSize(), dataArea, edge); [EOL]     tickLabelHeight = estimateMaximumTickLabelHeight(g2); [EOL]     if (tickLabelHeight > unit2Height) { [EOL]         unit2 = (NumberTickUnit) tickUnits.getLargerTickUnit(unit2); [EOL]     } [EOL]     setTickUnit(unit2, false, false); [EOL] } <line_num>: 1104,1129
public List refreshTicks(Graphics2D g2, AxisState state, Rectangle2D dataArea, RectangleEdge edge) { [EOL]     List result = new java.util.ArrayList(); [EOL]     if (RectangleEdge.isTopOrBottom(edge)) { [EOL]         result = refreshTicksHorizontal(g2, dataArea, edge); [EOL]     } else if (RectangleEdge.isLeftOrRight(edge)) { [EOL]         result = refreshTicksVertical(g2, dataArea, edge); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1143,1157
protected List refreshTicksHorizontal(Graphics2D g2, Rectangle2D dataArea, RectangleEdge edge) { [EOL]     List result = new java.util.ArrayList(); [EOL]     Font tickLabelFont = getTickLabelFont(); [EOL]     g2.setFont(tickLabelFont); [EOL]     if (isAutoTickUnitSelection()) { [EOL]         selectAutoTickUnit(g2, dataArea, edge); [EOL]     } [EOL]     TickUnit tu = getTickUnit(); [EOL]     double size = tu.getSize(); [EOL]     int count = calculateVisibleTickCount(); [EOL]     double lowestTickValue = calculateLowestVisibleTickValue(); [EOL]     if (count <= ValueAxis.MAXIMUM_TICK_COUNT) { [EOL]         int minorTickSpaces = getMinorTickCount(); [EOL]         if (minorTickSpaces <= 0) { [EOL]             minorTickSpaces = tu.getMinorTickCount(); [EOL]         } [EOL]         for (int minorTick = 1; minorTick < minorTickSpaces; minorTick++) { [EOL]             double minorTickValue = lowestTickValue - size * minorTick / minorTickSpaces; [EOL]             if (getRange().contains(minorTickValue)) { [EOL]                 result.add(new NumberTick(TickType.MINOR, minorTickValue, "", TextAnchor.TOP_CENTER, TextAnchor.CENTER, 0.0)); [EOL]             } [EOL]         } [EOL]         for (int i = 0; i < count; i++) { [EOL]             double currentTickValue = lowestTickValue + (i * size); [EOL]             String tickLabel; [EOL]             NumberFormat formatter = getNumberFormatOverride(); [EOL]             if (formatter != null) { [EOL]                 tickLabel = formatter.format(currentTickValue); [EOL]             } else { [EOL]                 tickLabel = getTickUnit().valueToString(currentTickValue); [EOL]             } [EOL]             TextAnchor anchor = null; [EOL]             TextAnchor rotationAnchor = null; [EOL]             double angle = 0.0; [EOL]             if (isVerticalTickLabels()) { [EOL]                 anchor = TextAnchor.CENTER_RIGHT; [EOL]                 rotationAnchor = TextAnchor.CENTER_RIGHT; [EOL]                 if (edge == RectangleEdge.TOP) { [EOL]                     angle = Math.PI / 2.0; [EOL]                 } else { [EOL]                     angle = -Math.PI / 2.0; [EOL]                 } [EOL]             } else { [EOL]                 if (edge == RectangleEdge.TOP) { [EOL]                     anchor = TextAnchor.BOTTOM_CENTER; [EOL]                     rotationAnchor = TextAnchor.BOTTOM_CENTER; [EOL]                 } else { [EOL]                     anchor = TextAnchor.TOP_CENTER; [EOL]                     rotationAnchor = TextAnchor.TOP_CENTER; [EOL]                 } [EOL]             } [EOL]             Tick tick = new NumberTick(new Double(currentTickValue), tickLabel, anchor, rotationAnchor, angle); [EOL]             result.add(tick); [EOL]             double nextTickValue = lowestTickValue + ((i + 1) * size); [EOL]             for (int minorTick = 1; minorTick < minorTickSpaces; minorTick++) { [EOL]                 double minorTickValue = currentTickValue + (nextTickValue - currentTickValue) * minorTick / minorTickSpaces; [EOL]                 if (getRange().contains(minorTickValue)) { [EOL]                     result.add(new NumberTick(TickType.MINOR, minorTickValue, "", TextAnchor.TOP_CENTER, TextAnchor.CENTER, 0.0)); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1169,1253
protected List refreshTicksVertical(Graphics2D g2, Rectangle2D dataArea, RectangleEdge edge) { [EOL]     List result = new java.util.ArrayList(); [EOL]     result.clear(); [EOL]     Font tickLabelFont = getTickLabelFont(); [EOL]     g2.setFont(tickLabelFont); [EOL]     if (isAutoTickUnitSelection()) { [EOL]         selectAutoTickUnit(g2, dataArea, edge); [EOL]     } [EOL]     TickUnit tu = getTickUnit(); [EOL]     double size = tu.getSize(); [EOL]     int count = calculateVisibleTickCount(); [EOL]     double lowestTickValue = calculateLowestVisibleTickValue(); [EOL]     if (count <= ValueAxis.MAXIMUM_TICK_COUNT) { [EOL]         int minorTickSpaces = getMinorTickCount(); [EOL]         if (minorTickSpaces <= 0) { [EOL]             minorTickSpaces = tu.getMinorTickCount(); [EOL]         } [EOL]         for (int minorTick = 1; minorTick < minorTickSpaces; minorTick++) { [EOL]             double minorTickValue = lowestTickValue - size * minorTick / minorTickSpaces; [EOL]             if (getRange().contains(minorTickValue)) { [EOL]                 result.add(new NumberTick(TickType.MINOR, minorTickValue, "", TextAnchor.TOP_CENTER, TextAnchor.CENTER, 0.0)); [EOL]             } [EOL]         } [EOL]         for (int i = 0; i < count; i++) { [EOL]             double currentTickValue = lowestTickValue + (i * size); [EOL]             String tickLabel; [EOL]             NumberFormat formatter = getNumberFormatOverride(); [EOL]             if (formatter != null) { [EOL]                 tickLabel = formatter.format(currentTickValue); [EOL]             } else { [EOL]                 tickLabel = getTickUnit().valueToString(currentTickValue); [EOL]             } [EOL]             TextAnchor anchor = null; [EOL]             TextAnchor rotationAnchor = null; [EOL]             double angle = 0.0; [EOL]             if (isVerticalTickLabels()) { [EOL]                 if (edge == RectangleEdge.LEFT) { [EOL]                     anchor = TextAnchor.BOTTOM_CENTER; [EOL]                     rotationAnchor = TextAnchor.BOTTOM_CENTER; [EOL]                     angle = -Math.PI / 2.0; [EOL]                 } else { [EOL]                     anchor = TextAnchor.BOTTOM_CENTER; [EOL]                     rotationAnchor = TextAnchor.BOTTOM_CENTER; [EOL]                     angle = Math.PI / 2.0; [EOL]                 } [EOL]             } else { [EOL]                 if (edge == RectangleEdge.LEFT) { [EOL]                     anchor = TextAnchor.CENTER_RIGHT; [EOL]                     rotationAnchor = TextAnchor.CENTER_RIGHT; [EOL]                 } else { [EOL]                     anchor = TextAnchor.CENTER_LEFT; [EOL]                     rotationAnchor = TextAnchor.CENTER_LEFT; [EOL]                 } [EOL]             } [EOL]             Tick tick = new NumberTick(new Double(currentTickValue), tickLabel, anchor, rotationAnchor, angle); [EOL]             result.add(tick); [EOL]             double nextTickValue = lowestTickValue + ((i + 1) * size); [EOL]             for (int minorTick = 1; minorTick < minorTickSpaces; minorTick++) { [EOL]                 double minorTickValue = currentTickValue + (nextTickValue - currentTickValue) * minorTick / minorTickSpaces; [EOL]                 if (getRange().contains(minorTickValue)) { [EOL]                     result.add(new NumberTick(TickType.MINOR, minorTickValue, "", TextAnchor.TOP_CENTER, TextAnchor.CENTER, 0.0)); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1265,1354
public Object clone() throws CloneNotSupportedException { [EOL]     NumberAxis clone = (NumberAxis) super.clone(); [EOL]     if (this.numberFormatOverride != null) { [EOL]         clone.numberFormatOverride = (NumberFormat) this.numberFormatOverride.clone(); [EOL]     } [EOL]     return clone; [EOL] } <line_num>: 1364,1371
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof NumberAxis)) { [EOL]         return false; [EOL]     } [EOL]     NumberAxis that = (NumberAxis) obj; [EOL]     if (this.autoRangeIncludesZero != that.autoRangeIncludesZero) { [EOL]         return false; [EOL]     } [EOL]     if (this.autoRangeStickyZero != that.autoRangeStickyZero) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.tickUnit, that.tickUnit)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.numberFormatOverride, that.numberFormatOverride)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.rangeType.equals(that.rangeType)) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 1380,1405
public int hashCode() { [EOL]     if (getLabel() != null) { [EOL]         return getLabel().hashCode(); [EOL]     } else { [EOL]         return 0; [EOL]     } [EOL] } <line_num>: 1412,1419
