public PeriodAxisLabelInfo(Class periodClass, DateFormat dateFormat) { [EOL]     this(periodClass, dateFormat, DEFAULT_INSETS, DEFAULT_FONT, DEFAULT_LABEL_PAINT, true, DEFAULT_DIVIDER_STROKE, DEFAULT_DIVIDER_PAINT); [EOL] } <line_num>: 129,135
public PeriodAxisLabelInfo(Class periodClass, DateFormat dateFormat, RectangleInsets padding, Font labelFont, Paint labelPaint, boolean drawDividers, Stroke dividerStroke, Paint dividerPaint) { [EOL]     if (periodClass == null) { [EOL]         throw new IllegalArgumentException("Null 'periodClass' argument."); [EOL]     } [EOL]     if (dateFormat == null) { [EOL]         throw new IllegalArgumentException("Null 'dateFormat' argument."); [EOL]     } [EOL]     if (padding == null) { [EOL]         throw new IllegalArgumentException("Null 'padding' argument."); [EOL]     } [EOL]     if (labelFont == null) { [EOL]         throw new IllegalArgumentException("Null 'labelFont' argument."); [EOL]     } [EOL]     if (labelPaint == null) { [EOL]         throw new IllegalArgumentException("Null 'labelPaint' argument."); [EOL]     } [EOL]     if (dividerStroke == null) { [EOL]         throw new IllegalArgumentException("Null 'dividerStroke' argument."); [EOL]     } [EOL]     if (dividerPaint == null) { [EOL]         throw new IllegalArgumentException("Null 'dividerPaint' argument."); [EOL]     } [EOL]     this.periodClass = periodClass; [EOL]     this.dateFormat = dateFormat; [EOL]     this.padding = padding; [EOL]     this.labelFont = labelFont; [EOL]     this.labelPaint = labelPaint; [EOL]     this.drawDividers = drawDividers; [EOL]     this.dividerStroke = dividerStroke; [EOL]     this.dividerPaint = dividerPaint; [EOL] } <line_num>: 153,188
public Class getPeriodClass() { [EOL]     return this.periodClass; [EOL] } <line_num>: 196,198
public DateFormat getDateFormat() { [EOL]     return this.dateFormat; [EOL] } <line_num>: 205,207
public RectangleInsets getPadding() { [EOL]     return this.padding; [EOL] } <line_num>: 214,216
public Font getLabelFont() { [EOL]     return this.labelFont; [EOL] } <line_num>: 223,225
public Paint getLabelPaint() { [EOL]     return this.labelPaint; [EOL] } <line_num>: 232,234
public boolean getDrawDividers() { [EOL]     return this.drawDividers; [EOL] } <line_num>: 241,243
public Stroke getDividerStroke() { [EOL]     return this.dividerStroke; [EOL] } <line_num>: 250,252
public Paint getDividerPaint() { [EOL]     return this.dividerPaint; [EOL] } <line_num>: 259,261
public RegularTimePeriod createInstance(Date millisecond, TimeZone zone, Locale locale) { [EOL]     RegularTimePeriod result = null; [EOL]     try { [EOL]         Constructor c = this.periodClass.getDeclaredConstructor(new Class[] { Date.class, TimeZone.class, Locale.class }); [EOL]         result = (RegularTimePeriod) c.newInstance(new Object[] { millisecond, zone, locale }); [EOL]     } catch (Exception e) { [EOL]     } [EOL]     return result; [EOL] } <line_num>: 275,288
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (obj instanceof PeriodAxisLabelInfo) { [EOL]         PeriodAxisLabelInfo info = (PeriodAxisLabelInfo) obj; [EOL]         if (!info.periodClass.equals(this.periodClass)) { [EOL]             return false; [EOL]         } [EOL]         if (!info.dateFormat.equals(this.dateFormat)) { [EOL]             return false; [EOL]         } [EOL]         if (!info.padding.equals(this.padding)) { [EOL]             return false; [EOL]         } [EOL]         if (!info.labelFont.equals(this.labelFont)) { [EOL]             return false; [EOL]         } [EOL]         if (!info.labelPaint.equals(this.labelPaint)) { [EOL]             return false; [EOL]         } [EOL]         if (info.drawDividers != this.drawDividers) { [EOL]             return false; [EOL]         } [EOL]         if (!info.dividerStroke.equals(this.dividerStroke)) { [EOL]             return false; [EOL]         } [EOL]         if (!info.dividerPaint.equals(this.dividerPaint)) { [EOL]             return false; [EOL]         } [EOL]         return true; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 297,330
public int hashCode() { [EOL]     int result = 41; [EOL]     result = 37 * this.periodClass.hashCode(); [EOL]     result = 37 * this.dateFormat.hashCode(); [EOL]     return result; [EOL] } <line_num>: 337,342
public Object clone() throws CloneNotSupportedException { [EOL]     return super.clone(); [EOL] } <line_num>: 351,353
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.labelPaint, stream); [EOL]     SerialUtilities.writeStroke(this.dividerStroke, stream); [EOL]     SerialUtilities.writePaint(this.dividerPaint, stream); [EOL] } <line_num>: 362,367
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.labelPaint = SerialUtilities.readPaint(stream); [EOL]     this.dividerStroke = SerialUtilities.readStroke(stream); [EOL]     this.dividerPaint = SerialUtilities.readPaint(stream); [EOL] } <line_num>: 377,383
