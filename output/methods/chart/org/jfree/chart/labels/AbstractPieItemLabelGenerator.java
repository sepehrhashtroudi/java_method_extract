protected AbstractPieItemLabelGenerator(String labelFormat, NumberFormat numberFormat, NumberFormat percentFormat) { [EOL]     if (labelFormat == null) { [EOL]         throw new IllegalArgumentException("Null 'labelFormat' argument."); [EOL]     } [EOL]     if (numberFormat == null) { [EOL]         throw new IllegalArgumentException("Null 'numberFormat' argument."); [EOL]     } [EOL]     if (percentFormat == null) { [EOL]         throw new IllegalArgumentException("Null 'percentFormat' argument."); [EOL]     } [EOL]     this.labelFormat = labelFormat; [EOL]     this.numberFormat = numberFormat; [EOL]     this.percentFormat = percentFormat; [EOL] } <line_num>: 82,100
public String getLabelFormat() { [EOL]     return this.labelFormat; [EOL] } <line_num>: 107,109
public NumberFormat getNumberFormat() { [EOL]     return this.numberFormat; [EOL] } <line_num>: 116,118
public NumberFormat getPercentFormat() { [EOL]     return this.percentFormat; [EOL] } <line_num>: 125,127
protected Object[] createItemArray(PieDataset dataset, Comparable key) { [EOL]     Object[] result = new Object[4]; [EOL]     double total = DatasetUtilities.calculatePieDatasetTotal(dataset); [EOL]     result[0] = key.toString(); [EOL]     Number value = dataset.getValue(key); [EOL]     if (value != null) { [EOL]         result[1] = this.numberFormat.format(value); [EOL]     } else { [EOL]         result[1] = "null"; [EOL]     } [EOL]     double percent = 0.0; [EOL]     if (value != null) { [EOL]         double v = value.doubleValue(); [EOL]         if (v > 0.0) { [EOL]             percent = v / total; [EOL]         } [EOL]     } [EOL]     result[2] = this.percentFormat.format(percent); [EOL]     result[3] = this.numberFormat.format(total); [EOL]     return result; [EOL] } <line_num>: 145,166
protected String generateSectionLabel(PieDataset dataset, Comparable key) { [EOL]     String result = null; [EOL]     if (dataset != null) { [EOL]         Object[] items = createItemArray(dataset, key); [EOL]         result = MessageFormat.format(this.labelFormat, items); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 176,183
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof AbstractPieItemLabelGenerator)) { [EOL]         return false; [EOL]     } [EOL]     AbstractPieItemLabelGenerator that = (AbstractPieItemLabelGenerator) obj; [EOL]     if (!this.labelFormat.equals(that.labelFormat)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.numberFormat.equals(that.numberFormat)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.percentFormat.equals(that.percentFormat)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 192,213
public int hashCode() { [EOL]     int result = 127; [EOL]     result = HashUtilities.hashCode(result, this.labelFormat); [EOL]     result = HashUtilities.hashCode(result, this.numberFormat); [EOL]     result = HashUtilities.hashCode(result, this.percentFormat); [EOL]     return result; [EOL] } <line_num>: 220,226
public Object clone() throws CloneNotSupportedException { [EOL]     AbstractPieItemLabelGenerator clone = (AbstractPieItemLabelGenerator) super.clone(); [EOL]     if (this.numberFormat != null) { [EOL]         clone.numberFormat = (NumberFormat) this.numberFormat.clone(); [EOL]     } [EOL]     if (this.percentFormat != null) { [EOL]         clone.percentFormat = (NumberFormat) this.percentFormat.clone(); [EOL]     } [EOL]     return clone; [EOL] } <line_num>: 235,245
