public ChartEntity(Shape area) { [EOL]     this(area, null); [EOL] } <line_num>: 113,116
public ChartEntity(Shape area, String toolTipText) { [EOL]     this(area, toolTipText, null); [EOL] } <line_num>: 124,127
public ChartEntity(Shape area, String toolTipText, String urlText) { [EOL]     if (area == null) { [EOL]         throw new IllegalArgumentException("Null 'area' argument."); [EOL]     } [EOL]     this.area = area; [EOL]     this.toolTipText = toolTipText; [EOL]     this.urlText = urlText; [EOL] } <line_num>: 137,144
public Shape getArea() { [EOL]     return this.area; [EOL] } <line_num>: 151,153
public void setArea(Shape area) { [EOL]     if (area == null) { [EOL]         throw new IllegalArgumentException("Null 'area' argument."); [EOL]     } [EOL]     this.area = area; [EOL] } <line_num>: 164,169
public String getToolTipText() { [EOL]     return this.toolTipText; [EOL] } <line_num>: 179,181
public void setToolTipText(String text) { [EOL]     this.toolTipText = text; [EOL] } <line_num>: 188,190
public String getURLText() { [EOL]     return this.urlText; [EOL] } <line_num>: 199,201
public void setURLText(String text) { [EOL]     this.urlText = text; [EOL] } <line_num>: 208,210
public String getShapeType() { [EOL]     if (this.area instanceof Rectangle2D) { [EOL]         return "rect"; [EOL]     } else { [EOL]         return "poly"; [EOL]     } [EOL] } <line_num>: 218,225
public String getShapeCoords() { [EOL]     if (this.area instanceof Rectangle2D) { [EOL]         return getRectCoords((Rectangle2D) this.area); [EOL]     } else { [EOL]         return getPolyCoords(this.area); [EOL]     } [EOL] } <line_num>: 232,239
private String getRectCoords(Rectangle2D rectangle) { [EOL]     if (rectangle == null) { [EOL]         throw new IllegalArgumentException("Null 'rectangle' argument."); [EOL]     } [EOL]     int x1 = (int) rectangle.getX(); [EOL]     int y1 = (int) rectangle.getY(); [EOL]     int x2 = x1 + (int) rectangle.getWidth(); [EOL]     int y2 = y1 + (int) rectangle.getHeight(); [EOL]     if (x2 == x1) { [EOL]         x2++; [EOL]     } [EOL]     if (y2 == y1) { [EOL]         y2++; [EOL]     } [EOL]     return x1 + "," + y1 + "," + x2 + "," + y2; [EOL] } <line_num>: 249,266
private String getPolyCoords(Shape shape) { [EOL]     if (shape == null) { [EOL]         throw new IllegalArgumentException("Null 'shape' argument."); [EOL]     } [EOL]     StringBuffer result = new StringBuffer(); [EOL]     boolean first = true; [EOL]     float[] coords = new float[6]; [EOL]     PathIterator pi = shape.getPathIterator(null, 1.0); [EOL]     while (!pi.isDone()) { [EOL]         pi.currentSegment(coords); [EOL]         if (first) { [EOL]             first = false; [EOL]             result.append((int) coords[0]); [EOL]             result.append(",").append((int) coords[1]); [EOL]         } else { [EOL]             result.append(","); [EOL]             result.append((int) coords[0]); [EOL]             result.append(","); [EOL]             result.append((int) coords[1]); [EOL]         } [EOL]         pi.next(); [EOL]     } [EOL]     return result.toString(); [EOL] } <line_num>: 276,300
public String getImageMapAreaTag(ToolTipTagFragmentGenerator toolTipTagFragmentGenerator, URLTagFragmentGenerator urlTagFragmentGenerator) { [EOL]     StringBuffer tag = new StringBuffer(); [EOL]     boolean hasURL = (this.urlText == null ? false : !this.urlText.equals("")); [EOL]     boolean hasToolTip = (this.toolTipText == null ? false : !this.toolTipText.equals("")); [EOL]     if (hasURL || hasToolTip) { [EOL]         tag.append("<area shape=\"" + getShapeType() + "\"" + " coords=\"" + getShapeCoords() + "\""); [EOL]         if (hasToolTip) { [EOL]             tag.append(toolTipTagFragmentGenerator.generateToolTipFragment(this.toolTipText)); [EOL]         } [EOL]         if (hasURL) { [EOL]             tag.append(urlTagFragmentGenerator.generateURLFragment(this.urlText)); [EOL]         } else { [EOL]             tag.append(" nohref=\"nohref\""); [EOL]         } [EOL]         if (!hasToolTip) { [EOL]             tag.append(" alt=\"\""); [EOL]         } [EOL]         tag.append("/>"); [EOL]     } [EOL]     return tag.toString(); [EOL] } <line_num>: 315,346
public String toString() { [EOL]     StringBuffer buf = new StringBuffer("ChartEntity: "); [EOL]     buf.append("tooltip = "); [EOL]     buf.append(this.toolTipText); [EOL]     return buf.toString(); [EOL] } <line_num>: 354,359
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof ChartEntity)) { [EOL]         return false; [EOL]     } [EOL]     ChartEntity that = (ChartEntity) obj; [EOL]     if (!this.area.equals(that.area)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.toolTipText, that.toolTipText)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.urlText, that.urlText)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 368,386
public int hashCode() { [EOL]     int result = 37; [EOL]     result = HashUtilities.hashCode(result, this.toolTipText); [EOL]     result = HashUtilities.hashCode(result, this.urlText); [EOL]     return result; [EOL] } <line_num>: 393,398
public Object clone() throws CloneNotSupportedException { [EOL]     return super.clone(); [EOL] } <line_num>: 408,410
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writeShape(this.area, stream); [EOL] } <line_num>: 419,422
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.area = SerialUtilities.readShape(stream); [EOL] } <line_num>: 432,436
