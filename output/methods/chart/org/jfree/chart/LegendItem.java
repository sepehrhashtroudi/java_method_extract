public LegendItem(String label) { [EOL]     this(label, Color.black); [EOL] } <line_num>: 212,214
public LegendItem(String label, Paint paint) { [EOL]     this(label, null, null, null, new Rectangle2D.Double(-4.0, -4.0, 8.0, 8.0), paint); [EOL] } <line_num>: 225,228
public LegendItem(String label, String description, String toolTipText, String urlText, Shape shape, Paint fillPaint) { [EOL]     this(label, description, toolTipText, urlText, true, shape, true, fillPaint, false, Color.black, UNUSED_STROKE, false, UNUSED_SHAPE, UNUSED_STROKE, Color.black); [EOL] } <line_num>: 242,253
public LegendItem(String label, String description, String toolTipText, String urlText, Shape shape, Paint fillPaint, Stroke outlineStroke, Paint outlinePaint) { [EOL]     this(label, description, toolTipText, urlText, true, shape, true, fillPaint, true, outlinePaint, outlineStroke, false, UNUSED_SHAPE, UNUSED_STROKE, Color.black); [EOL] } <line_num>: 270,282
public LegendItem(String label, String description, String toolTipText, String urlText, Shape line, Stroke lineStroke, Paint linePaint) { [EOL]     this(label, description, toolTipText, urlText, false, UNUSED_SHAPE, false, Color.black, false, Color.black, UNUSED_STROKE, true, line, lineStroke, linePaint); [EOL] } <line_num>: 295,304
public LegendItem(String label, String description, String toolTipText, String urlText, boolean shapeVisible, Shape shape, boolean shapeFilled, Paint fillPaint, boolean shapeOutlineVisible, Paint outlinePaint, Stroke outlineStroke, boolean lineVisible, Shape line, Stroke lineStroke, Paint linePaint) { [EOL]     if (label == null) { [EOL]         throw new IllegalArgumentException("Null 'label' argument."); [EOL]     } [EOL]     if (fillPaint == null) { [EOL]         throw new IllegalArgumentException("Null 'fillPaint' argument."); [EOL]     } [EOL]     if (lineStroke == null) { [EOL]         throw new IllegalArgumentException("Null 'lineStroke' argument."); [EOL]     } [EOL]     if (outlinePaint == null) { [EOL]         throw new IllegalArgumentException("Null 'outlinePaint' argument."); [EOL]     } [EOL]     if (outlineStroke == null) { [EOL]         throw new IllegalArgumentException("Null 'outlineStroke' argument."); [EOL]     } [EOL]     this.label = label; [EOL]     this.labelPaint = null; [EOL]     this.attributedLabel = null; [EOL]     this.description = description; [EOL]     this.shapeVisible = shapeVisible; [EOL]     this.shape = shape; [EOL]     this.shapeFilled = shapeFilled; [EOL]     this.fillPaint = fillPaint; [EOL]     this.fillPaintTransformer = new StandardGradientPaintTransformer(); [EOL]     this.shapeOutlineVisible = shapeOutlineVisible; [EOL]     this.outlinePaint = outlinePaint; [EOL]     this.outlineStroke = outlineStroke; [EOL]     this.lineVisible = lineVisible; [EOL]     this.line = line; [EOL]     this.lineStroke = lineStroke; [EOL]     this.linePaint = linePaint; [EOL]     this.toolTipText = toolTipText; [EOL]     this.urlText = urlText; [EOL] } <line_num>: 331,374
public LegendItem(AttributedString label, String description, String toolTipText, String urlText, Shape shape, Paint fillPaint) { [EOL]     this(label, description, toolTipText, urlText, true, shape, true, fillPaint, false, Color.black, UNUSED_STROKE, false, UNUSED_SHAPE, UNUSED_STROKE, Color.black); [EOL] } <line_num>: 388,399
public LegendItem(AttributedString label, String description, String toolTipText, String urlText, Shape shape, Paint fillPaint, Stroke outlineStroke, Paint outlinePaint) { [EOL]     this(label, description, toolTipText, urlText, true, shape, true, fillPaint, true, outlinePaint, outlineStroke, false, UNUSED_SHAPE, UNUSED_STROKE, Color.black); [EOL] } <line_num>: 416,427
public LegendItem(AttributedString label, String description, String toolTipText, String urlText, Shape line, Stroke lineStroke, Paint linePaint) { [EOL]     this(label, description, toolTipText, urlText, false, UNUSED_SHAPE, false, Color.black, false, Color.black, UNUSED_STROKE, true, line, lineStroke, linePaint); [EOL] } <line_num>: 440,449
public LegendItem(AttributedString label, String description, String toolTipText, String urlText, boolean shapeVisible, Shape shape, boolean shapeFilled, Paint fillPaint, boolean shapeOutlineVisible, Paint outlinePaint, Stroke outlineStroke, boolean lineVisible, Shape line, Stroke lineStroke, Paint linePaint) { [EOL]     if (label == null) { [EOL]         throw new IllegalArgumentException("Null 'label' argument."); [EOL]     } [EOL]     if (fillPaint == null) { [EOL]         throw new IllegalArgumentException("Null 'fillPaint' argument."); [EOL]     } [EOL]     if (lineStroke == null) { [EOL]         throw new IllegalArgumentException("Null 'lineStroke' argument."); [EOL]     } [EOL]     if (line == null) { [EOL]         throw new IllegalArgumentException("Null 'line' argument."); [EOL]     } [EOL]     if (linePaint == null) { [EOL]         throw new IllegalArgumentException("Null 'linePaint' argument."); [EOL]     } [EOL]     if (outlinePaint == null) { [EOL]         throw new IllegalArgumentException("Null 'outlinePaint' argument."); [EOL]     } [EOL]     if (outlineStroke == null) { [EOL]         throw new IllegalArgumentException("Null 'outlineStroke' argument."); [EOL]     } [EOL]     this.label = characterIteratorToString(label.getIterator()); [EOL]     this.attributedLabel = label; [EOL]     this.description = description; [EOL]     this.shapeVisible = shapeVisible; [EOL]     this.shape = shape; [EOL]     this.shapeFilled = shapeFilled; [EOL]     this.fillPaint = fillPaint; [EOL]     this.fillPaintTransformer = new StandardGradientPaintTransformer(); [EOL]     this.shapeOutlineVisible = shapeOutlineVisible; [EOL]     this.outlinePaint = outlinePaint; [EOL]     this.outlineStroke = outlineStroke; [EOL]     this.lineVisible = lineVisible; [EOL]     this.line = line; [EOL]     this.lineStroke = lineStroke; [EOL]     this.linePaint = linePaint; [EOL]     this.toolTipText = toolTipText; [EOL]     this.urlText = urlText; [EOL] } <line_num>: 476,524
private String characterIteratorToString(CharacterIterator iterator) { [EOL]     int endIndex = iterator.getEndIndex(); [EOL]     int beginIndex = iterator.getBeginIndex(); [EOL]     int count = endIndex - beginIndex; [EOL]     if (count <= 0) { [EOL]         return ""; [EOL]     } [EOL]     char[] chars = new char[count]; [EOL]     int i = 0; [EOL]     char c = iterator.first(); [EOL]     while (c != CharacterIterator.DONE) { [EOL]         chars[i] = c; [EOL]         i++; [EOL]         c = iterator.next(); [EOL]     } [EOL]     return new String(chars); [EOL] } <line_num>: 533,549
public Dataset getDataset() { [EOL]     return this.dataset; [EOL] } <line_num>: 560,562
public void setDataset(Dataset dataset) { [EOL]     this.dataset = dataset; [EOL] } <line_num>: 571,573
public int getDatasetIndex() { [EOL]     return this.datasetIndex; [EOL] } <line_num>: 585,587
public void setDatasetIndex(int index) { [EOL]     this.datasetIndex = index; [EOL] } <line_num>: 598,600
public Comparable getSeriesKey() { [EOL]     return this.seriesKey; [EOL] } <line_num>: 611,613
public void setSeriesKey(Comparable key) { [EOL]     this.seriesKey = key; [EOL] } <line_num>: 622,624
public int getSeriesIndex() { [EOL]     return this.series; [EOL] } <line_num>: 633,635
public void setSeriesIndex(int index) { [EOL]     this.series = index; [EOL] } <line_num>: 644,646
public String getLabel() { [EOL]     return this.label; [EOL] } <line_num>: 653,655
public Font getLabelFont() { [EOL]     return this.labelFont; [EOL] } <line_num>: 664,666
public void setLabelFont(Font font) { [EOL]     this.labelFont = font; [EOL] } <line_num>: 675,677
public Paint getLabelPaint() { [EOL]     return this.labelPaint; [EOL] } <line_num>: 686,688
public void setLabelPaint(Paint paint) { [EOL]     this.labelPaint = paint; [EOL] } <line_num>: 697,699
public AttributedString getAttributedLabel() { [EOL]     return this.attributedLabel; [EOL] } <line_num>: 706,708
public String getDescription() { [EOL]     return this.description; [EOL] } <line_num>: 717,719
public void setDescription(String text) { [EOL]     this.description = text; [EOL] } <line_num>: 729,731
public String getToolTipText() { [EOL]     return this.toolTipText; [EOL] } <line_num>: 740,742
public void setToolTipText(String text) { [EOL]     this.toolTipText = text; [EOL] } <line_num>: 752,754
public String getURLText() { [EOL]     return this.urlText; [EOL] } <line_num>: 763,765
public void setURLText(String text) { [EOL]     this.urlText = text; [EOL] } <line_num>: 776,778
public boolean isShapeVisible() { [EOL]     return this.shapeVisible; [EOL] } <line_num>: 787,789
public void setShapeVisible(boolean visible) { [EOL]     this.shapeVisible = visible; [EOL] } <line_num>: 801,803
public Shape getShape() { [EOL]     return this.shape; [EOL] } <line_num>: 813,815
public void setShape(Shape shape) { [EOL]     if (shape == null) { [EOL]         throw new IllegalArgumentException("Null 'shape' argument."); [EOL]     } [EOL]     this.shape = shape; [EOL] } <line_num>: 825,830
public boolean isShapeFilled() { [EOL]     return this.shapeFilled; [EOL] } <line_num>: 837,839
public Paint getFillPaint() { [EOL]     return this.fillPaint; [EOL] } <line_num>: 846,848
public void setFillPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.fillPaint = paint; [EOL] } <line_num>: 857,862
public boolean isShapeOutlineVisible() { [EOL]     return this.shapeOutlineVisible; [EOL] } <line_num>: 870,872
public Stroke getLineStroke() { [EOL]     return this.lineStroke; [EOL] } <line_num>: 879,881
public Paint getLinePaint() { [EOL]     return this.linePaint; [EOL] } <line_num>: 888,890
public void setLinePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.linePaint = paint; [EOL] } <line_num>: 899,904
public Paint getOutlinePaint() { [EOL]     return this.outlinePaint; [EOL] } <line_num>: 911,913
public void setOutlinePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.outlinePaint = paint; [EOL] } <line_num>: 922,927
public Stroke getOutlineStroke() { [EOL]     return this.outlineStroke; [EOL] } <line_num>: 936,938
public void setOutlineStroke(Stroke stroke) { [EOL]     this.outlineStroke = stroke; [EOL] } <line_num>: 949,951
public boolean isLineVisible() { [EOL]     return this.lineVisible; [EOL] } <line_num>: 960,962
public void setLineVisible(boolean visible) { [EOL]     this.lineVisible = visible; [EOL] } <line_num>: 973,975
public Shape getLine() { [EOL]     return this.line; [EOL] } <line_num>: 985,987
public void setLine(Shape line) { [EOL]     if (line == null) { [EOL]         throw new IllegalArgumentException("Null 'line' argument."); [EOL]     } [EOL]     this.line = line; [EOL] } <line_num>: 997,1002
public GradientPaintTransformer getFillPaintTransformer() { [EOL]     return this.fillPaintTransformer; [EOL] } <line_num>: 1014,1016
public void setFillPaintTransformer(GradientPaintTransformer transformer) { [EOL]     if (transformer == null) { [EOL]         throw new IllegalArgumentException("Null 'transformer' attribute."); [EOL]     } [EOL]     this.fillPaintTransformer = transformer; [EOL] } <line_num>: 1028,1033
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof LegendItem)) { [EOL]         return false; [EOL]     } [EOL]     LegendItem that = (LegendItem) obj; [EOL]     if (this.datasetIndex != that.datasetIndex) { [EOL]         return false; [EOL]     } [EOL]     if (this.series != that.series) { [EOL]         return false; [EOL]     } [EOL]     if (!this.label.equals(that.label)) { [EOL]         return false; [EOL]     } [EOL]     if (!AttributedStringUtilities.equal(this.attributedLabel, that.attributedLabel)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.description, that.description)) { [EOL]         return false; [EOL]     } [EOL]     if (this.shapeVisible != that.shapeVisible) { [EOL]         return false; [EOL]     } [EOL]     if (!ShapeUtilities.equal(this.shape, that.shape)) { [EOL]         return false; [EOL]     } [EOL]     if (this.shapeFilled != that.shapeFilled) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.fillPaint, that.fillPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.fillPaintTransformer, that.fillPaintTransformer)) { [EOL]         return false; [EOL]     } [EOL]     if (this.shapeOutlineVisible != that.shapeOutlineVisible) { [EOL]         return false; [EOL]     } [EOL]     if (!this.outlineStroke.equals(that.outlineStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.lineVisible == that.lineVisible) { [EOL]         return false; [EOL]     } [EOL]     if (!ShapeUtilities.equal(this.line, that.line)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.lineStroke.equals(that.lineStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.linePaint, that.linePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.labelFont, that.labelFont)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.labelPaint, that.labelPaint)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 1042,1110
public Object clone() throws CloneNotSupportedException { [EOL]     LegendItem clone = (LegendItem) super.clone(); [EOL]     if (this.seriesKey instanceof PublicCloneable) { [EOL]         PublicCloneable pc = (PublicCloneable) this.seriesKey; [EOL]         clone.seriesKey = (Comparable) pc.clone(); [EOL]     } [EOL]     clone.shape = ShapeUtilities.clone(this.shape); [EOL]     if (this.fillPaintTransformer instanceof PublicCloneable) { [EOL]         PublicCloneable pc = (PublicCloneable) this.fillPaintTransformer; [EOL]         clone.fillPaintTransformer = (GradientPaintTransformer) pc.clone(); [EOL]     } [EOL]     clone.line = ShapeUtilities.clone(this.line); [EOL]     return clone; [EOL] } <line_num>: 1123,1138
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writeAttributedString(this.attributedLabel, stream); [EOL]     SerialUtilities.writeShape(this.shape, stream); [EOL]     SerialUtilities.writePaint(this.fillPaint, stream); [EOL]     SerialUtilities.writeStroke(this.outlineStroke, stream); [EOL]     SerialUtilities.writePaint(this.outlinePaint, stream); [EOL]     SerialUtilities.writeShape(this.line, stream); [EOL]     SerialUtilities.writeStroke(this.lineStroke, stream); [EOL]     SerialUtilities.writePaint(this.linePaint, stream); [EOL]     SerialUtilities.writePaint(this.labelPaint, stream); [EOL] } <line_num>: 1147,1158
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.attributedLabel = SerialUtilities.readAttributedString(stream); [EOL]     this.shape = SerialUtilities.readShape(stream); [EOL]     this.fillPaint = SerialUtilities.readPaint(stream); [EOL]     this.outlineStroke = SerialUtilities.readStroke(stream); [EOL]     this.outlinePaint = SerialUtilities.readPaint(stream); [EOL]     this.line = SerialUtilities.readShape(stream); [EOL]     this.lineStroke = SerialUtilities.readStroke(stream); [EOL]     this.linePaint = SerialUtilities.readPaint(stream); [EOL]     this.labelPaint = SerialUtilities.readPaint(stream); [EOL] } <line_num>: 1168,1180
