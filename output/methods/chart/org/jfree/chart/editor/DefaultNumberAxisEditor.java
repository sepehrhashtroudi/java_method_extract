public DefaultNumberAxisEditor(NumberAxis axis) { [EOL]     super(axis); [EOL]     this.autoRange = axis.isAutoRange(); [EOL]     this.minimumValue = axis.getLowerBound(); [EOL]     this.maximumValue = axis.getUpperBound(); [EOL]     this.gridPaintSample = new PaintSample(Color.blue); [EOL]     this.gridStrokeSample = new StrokeSample(new BasicStroke(1.0f)); [EOL]     this.availableStrokeSamples = new StrokeSample[3]; [EOL]     this.availableStrokeSamples[0] = new StrokeSample(new BasicStroke(1.0f)); [EOL]     this.availableStrokeSamples[1] = new StrokeSample(new BasicStroke(2.0f)); [EOL]     this.availableStrokeSamples[2] = new StrokeSample(new BasicStroke(3.0f)); [EOL]     JTabbedPane other = getOtherTabs(); [EOL]     JPanel range = new JPanel(new LCBLayout(3)); [EOL]     range.setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4)); [EOL]     range.add(new JPanel()); [EOL]     this.autoRangeCheckBox = new JCheckBox(localizationResources.getString("Auto-adjust_range"), this.autoRange); [EOL]     this.autoRangeCheckBox.setActionCommand("AutoRangeOnOff"); [EOL]     this.autoRangeCheckBox.addActionListener(this); [EOL]     range.add(this.autoRangeCheckBox); [EOL]     range.add(new JPanel()); [EOL]     range.add(new JLabel(localizationResources.getString("Minimum_range_value"))); [EOL]     this.minimumRangeValue = new JTextField(Double.toString(this.minimumValue)); [EOL]     this.minimumRangeValue.setEnabled(!this.autoRange); [EOL]     this.minimumRangeValue.setActionCommand("MinimumRange"); [EOL]     this.minimumRangeValue.addActionListener(this); [EOL]     this.minimumRangeValue.addFocusListener(this); [EOL]     range.add(this.minimumRangeValue); [EOL]     range.add(new JPanel()); [EOL]     range.add(new JLabel(localizationResources.getString("Maximum_range_value"))); [EOL]     this.maximumRangeValue = new JTextField(Double.toString(this.maximumValue)); [EOL]     this.maximumRangeValue.setEnabled(!this.autoRange); [EOL]     this.maximumRangeValue.setActionCommand("MaximumRange"); [EOL]     this.maximumRangeValue.addActionListener(this); [EOL]     this.maximumRangeValue.addFocusListener(this); [EOL]     range.add(this.maximumRangeValue); [EOL]     range.add(new JPanel()); [EOL]     other.add(localizationResources.getString("Range"), range); [EOL] } <line_num>: 119,175
public boolean isAutoRange() { [EOL]     return this.autoRange; [EOL] } <line_num>: 182,184
public double getMinimumValue() { [EOL]     return this.minimumValue; [EOL] } <line_num>: 191,193
public double getMaximumValue() { [EOL]     return this.maximumValue; [EOL] } <line_num>: 200,202
public void actionPerformed(ActionEvent event) { [EOL]     String command = event.getActionCommand(); [EOL]     if (command.equals("GridStroke")) { [EOL]         attemptGridStrokeSelection(); [EOL]     } else if (command.equals("GridPaint")) { [EOL]         attemptGridPaintSelection(); [EOL]     } else if (command.equals("AutoRangeOnOff")) { [EOL]         toggleAutoRange(); [EOL]     } else if (command.equals("MinimumRange")) { [EOL]         validateMinimum(); [EOL]     } else if (command.equals("MaximumRange")) { [EOL]         validateMaximum(); [EOL]     } else { [EOL]         super.actionPerformed(event); [EOL]     } [EOL] } <line_num>: 208,229
private void attemptGridStrokeSelection() { [EOL]     StrokeChooserPanel panel = new StrokeChooserPanel(this.gridStrokeSample, this.availableStrokeSamples); [EOL]     int result = JOptionPane.showConfirmDialog(this, panel, localizationResources.getString("Stroke_Selection"), JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE); [EOL]     if (result == JOptionPane.OK_OPTION) { [EOL]         this.gridStrokeSample.setStroke(panel.getSelectedStroke()); [EOL]     } [EOL] } <line_num>: 234,244
private void attemptGridPaintSelection() { [EOL]     Color c; [EOL]     c = JColorChooser.showDialog(this, localizationResources.getString("Grid_Color"), Color.blue); [EOL]     if (c != null) { [EOL]         this.gridPaintSample.setPaint(c); [EOL]     } [EOL] } <line_num>: 249,256
public void focusGained(FocusEvent event) { [EOL] } <line_num>: 263,265
public void focusLost(FocusEvent event) { [EOL]     if (event.getSource() == this.minimumRangeValue) { [EOL]         validateMinimum(); [EOL]     } else if (event.getSource() == this.maximumRangeValue) { [EOL]         validateMaximum(); [EOL]     } [EOL] } <line_num>: 272,279
public void toggleAutoRange() { [EOL]     this.autoRange = this.autoRangeCheckBox.isSelected(); [EOL]     if (this.autoRange) { [EOL]         this.minimumRangeValue.setText(Double.toString(this.minimumValue)); [EOL]         this.minimumRangeValue.setEnabled(false); [EOL]         this.maximumRangeValue.setText(Double.toString(this.maximumValue)); [EOL]         this.maximumRangeValue.setEnabled(false); [EOL]     } else { [EOL]         this.minimumRangeValue.setEnabled(true); [EOL]         this.maximumRangeValue.setEnabled(true); [EOL]     } [EOL] } <line_num>: 284,296
public void validateMinimum() { [EOL]     double newMin; [EOL]     try { [EOL]         newMin = Double.parseDouble(this.minimumRangeValue.getText()); [EOL]         if (newMin >= this.maximumValue) { [EOL]             newMin = this.minimumValue; [EOL]         } [EOL]     } catch (NumberFormatException e) { [EOL]         newMin = this.minimumValue; [EOL]     } [EOL]     this.minimumValue = newMin; [EOL]     this.minimumRangeValue.setText(Double.toString(this.minimumValue)); [EOL] } <line_num>: 301,315
public void validateMaximum() { [EOL]     double newMax; [EOL]     try { [EOL]         newMax = Double.parseDouble(this.maximumRangeValue.getText()); [EOL]         if (newMax <= this.minimumValue) { [EOL]             newMax = this.maximumValue; [EOL]         } [EOL]     } catch (NumberFormatException e) { [EOL]         newMax = this.maximumValue; [EOL]     } [EOL]     this.maximumValue = newMax; [EOL]     this.maximumRangeValue.setText(Double.toString(this.maximumValue)); [EOL] } <line_num>: 320,334
public void setAxisProperties(Axis axis) { [EOL]     super.setAxisProperties(axis); [EOL]     NumberAxis numberAxis = (NumberAxis) axis; [EOL]     numberAxis.setAutoRange(this.autoRange); [EOL]     if (!this.autoRange) { [EOL]         numberAxis.setRange(this.minimumValue, this.maximumValue); [EOL]     } [EOL] } <line_num>: 342,349
