public CrosshairOverlay() { [EOL]     super(); [EOL]     this.xCrosshairs = new java.util.ArrayList(); [EOL]     this.yCrosshairs = new java.util.ArrayList(); [EOL] } <line_num>: 89,93
public void addDomainCrosshair(Crosshair crosshair) { [EOL]     if (crosshair == null) { [EOL]         throw new IllegalArgumentException("Null 'crosshair' argument."); [EOL]     } [EOL]     this.xCrosshairs.add(crosshair); [EOL]     crosshair.addPropertyChangeListener(this); [EOL]     fireOverlayChanged(); [EOL] } <line_num>: 104,111
public void removeDomainCrosshair(Crosshair crosshair) { [EOL]     if (crosshair == null) { [EOL]         throw new IllegalArgumentException("Null 'crosshair' argument."); [EOL]     } [EOL]     if (this.xCrosshairs.remove(crosshair)) { [EOL]         crosshair.removePropertyChangeListener(this); [EOL]         fireOverlayChanged(); [EOL]     } [EOL] } <line_num>: 121,129
public void clearDomainCrosshairs() { [EOL]     if (this.xCrosshairs.isEmpty()) { [EOL]         return; [EOL]     } [EOL]     List crosshairs = getDomainCrosshairs(); [EOL]     for (int i = 0; i < crosshairs.size(); i++) { [EOL]         Crosshair c = (Crosshair) crosshairs.get(i); [EOL]         this.xCrosshairs.remove(c); [EOL]         c.removePropertyChangeListener(this); [EOL]     } [EOL]     fireOverlayChanged(); [EOL] } <line_num>: 135,146
public List getDomainCrosshairs() { [EOL]     return new ArrayList(this.xCrosshairs); [EOL] } <line_num>: 153,155
public void addRangeCrosshair(Crosshair crosshair) { [EOL]     if (crosshair == null) { [EOL]         throw new IllegalArgumentException("Null 'crosshair' argument."); [EOL]     } [EOL]     this.yCrosshairs.add(crosshair); [EOL]     crosshair.addPropertyChangeListener(this); [EOL]     fireOverlayChanged(); [EOL] } <line_num>: 163,170
public void removeRangeCrosshair(Crosshair crosshair) { [EOL]     if (crosshair == null) { [EOL]         throw new IllegalArgumentException("Null 'crosshair' argument."); [EOL]     } [EOL]     if (this.yCrosshairs.remove(crosshair)) { [EOL]         crosshair.removePropertyChangeListener(this); [EOL]         fireOverlayChanged(); [EOL]     } [EOL] } <line_num>: 180,188
public void clearRangeCrosshairs() { [EOL]     if (this.yCrosshairs.isEmpty()) { [EOL]         return; [EOL]     } [EOL]     List crosshairs = getRangeCrosshairs(); [EOL]     for (int i = 0; i < crosshairs.size(); i++) { [EOL]         Crosshair c = (Crosshair) crosshairs.get(i); [EOL]         this.yCrosshairs.remove(c); [EOL]         c.removePropertyChangeListener(this); [EOL]     } [EOL]     fireOverlayChanged(); [EOL] } <line_num>: 194,205
public List getRangeCrosshairs() { [EOL]     return new ArrayList(this.yCrosshairs); [EOL] } <line_num>: 212,214
public void propertyChange(PropertyChangeEvent e) { [EOL]     fireOverlayChanged(); [EOL] } <line_num>: 222,224
public void paintOverlay(Graphics2D g2, ChartPanel chartPanel) { [EOL]     Shape savedClip = g2.getClip(); [EOL]     Rectangle2D dataArea = chartPanel.getScreenDataArea(); [EOL]     g2.clip(dataArea); [EOL]     JFreeChart chart = chartPanel.getChart(); [EOL]     XYPlot plot = (XYPlot) chart.getPlot(); [EOL]     ValueAxis xAxis = plot.getDomainAxis(); [EOL]     RectangleEdge xAxisEdge = plot.getDomainAxisEdge(); [EOL]     Iterator iterator = this.xCrosshairs.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         Crosshair ch = (Crosshair) iterator.next(); [EOL]         if (ch.isVisible()) { [EOL]             double x = ch.getValue(); [EOL]             double xx = xAxis.valueToJava2D(x, dataArea, xAxisEdge); [EOL]             if (plot.getOrientation() == PlotOrientation.VERTICAL) { [EOL]                 drawVerticalCrosshair(g2, dataArea, xx, ch); [EOL]             } else { [EOL]                 drawHorizontalCrosshair(g2, dataArea, xx, ch); [EOL]             } [EOL]         } [EOL]     } [EOL]     ValueAxis yAxis = plot.getRangeAxis(); [EOL]     RectangleEdge yAxisEdge = plot.getRangeAxisEdge(); [EOL]     iterator = this.yCrosshairs.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         Crosshair ch = (Crosshair) iterator.next(); [EOL]         if (ch.isVisible()) { [EOL]             double y = ch.getValue(); [EOL]             double yy = yAxis.valueToJava2D(y, dataArea, yAxisEdge); [EOL]             if (plot.getOrientation() == PlotOrientation.VERTICAL) { [EOL]                 drawHorizontalCrosshair(g2, dataArea, yy, ch); [EOL]             } else { [EOL]                 drawVerticalCrosshair(g2, dataArea, yy, ch); [EOL]             } [EOL]         } [EOL]     } [EOL]     g2.setClip(savedClip); [EOL] } <line_num>: 232,271
protected void drawHorizontalCrosshair(Graphics2D g2, Rectangle2D dataArea, double y, Crosshair crosshair) { [EOL]     if (y >= dataArea.getMinY() && y <= dataArea.getMaxY()) { [EOL]         Line2D line = new Line2D.Double(dataArea.getMinX(), y, dataArea.getMaxX(), y); [EOL]         Paint savedPaint = g2.getPaint(); [EOL]         Stroke savedStroke = g2.getStroke(); [EOL]         g2.setPaint(crosshair.getPaint()); [EOL]         g2.setStroke(crosshair.getStroke()); [EOL]         g2.draw(line); [EOL]         if (crosshair.isLabelVisible()) { [EOL]             String label = crosshair.getLabelGenerator().generateLabel(crosshair); [EOL]             RectangleAnchor anchor = crosshair.getLabelAnchor(); [EOL]             Point2D pt = calculateLabelPoint(line, anchor, 5, 5); [EOL]             float xx = (float) pt.getX(); [EOL]             float yy = (float) pt.getY(); [EOL]             TextAnchor alignPt = textAlignPtForLabelAnchorH(anchor); [EOL]             Shape hotspot = TextUtilities.calculateRotatedStringBounds(label, g2, xx, yy, alignPt, 0.0, TextAnchor.CENTER); [EOL]             if (!dataArea.contains(hotspot.getBounds2D())) { [EOL]                 anchor = flipAnchorV(anchor); [EOL]                 pt = calculateLabelPoint(line, anchor, 5, 5); [EOL]                 xx = (float) pt.getX(); [EOL]                 yy = (float) pt.getY(); [EOL]                 alignPt = textAlignPtForLabelAnchorH(anchor); [EOL]                 hotspot = TextUtilities.calculateRotatedStringBounds(label, g2, xx, yy, alignPt, 0.0, TextAnchor.CENTER); [EOL]             } [EOL]             g2.setPaint(crosshair.getLabelBackgroundPaint()); [EOL]             g2.fill(hotspot); [EOL]             g2.setPaint(crosshair.getLabelOutlinePaint()); [EOL]             g2.draw(hotspot); [EOL]             TextUtilities.drawAlignedString(label, g2, xx, yy, alignPt); [EOL]         } [EOL]         g2.setPaint(savedPaint); [EOL]         g2.setStroke(savedStroke); [EOL]     } [EOL] } <line_num>: 281,321
protected void drawVerticalCrosshair(Graphics2D g2, Rectangle2D dataArea, double x, Crosshair crosshair) { [EOL]     if (x >= dataArea.getMinX() && x <= dataArea.getMaxX()) { [EOL]         Line2D line = new Line2D.Double(x, dataArea.getMinY(), x, dataArea.getMaxY()); [EOL]         Paint savedPaint = g2.getPaint(); [EOL]         Stroke savedStroke = g2.getStroke(); [EOL]         g2.setPaint(crosshair.getPaint()); [EOL]         g2.setStroke(crosshair.getStroke()); [EOL]         g2.draw(line); [EOL]         if (crosshair.isLabelVisible()) { [EOL]             String label = crosshair.getLabelGenerator().generateLabel(crosshair); [EOL]             RectangleAnchor anchor = crosshair.getLabelAnchor(); [EOL]             Point2D pt = calculateLabelPoint(line, anchor, 5, 5); [EOL]             float xx = (float) pt.getX(); [EOL]             float yy = (float) pt.getY(); [EOL]             TextAnchor alignPt = textAlignPtForLabelAnchorV(anchor); [EOL]             Shape hotspot = TextUtilities.calculateRotatedStringBounds(label, g2, xx, yy, alignPt, 0.0, TextAnchor.CENTER); [EOL]             if (!dataArea.contains(hotspot.getBounds2D())) { [EOL]                 anchor = flipAnchorH(anchor); [EOL]                 pt = calculateLabelPoint(line, anchor, 5, 5); [EOL]                 xx = (float) pt.getX(); [EOL]                 yy = (float) pt.getY(); [EOL]                 alignPt = textAlignPtForLabelAnchorV(anchor); [EOL]                 hotspot = TextUtilities.calculateRotatedStringBounds(label, g2, xx, yy, alignPt, 0.0, TextAnchor.CENTER); [EOL]             } [EOL]             g2.setPaint(crosshair.getLabelBackgroundPaint()); [EOL]             g2.fill(hotspot); [EOL]             g2.setPaint(crosshair.getLabelOutlinePaint()); [EOL]             g2.draw(hotspot); [EOL]             TextUtilities.drawAlignedString(label, g2, xx, yy, alignPt); [EOL]         } [EOL]         g2.setPaint(savedPaint); [EOL]         g2.setStroke(savedStroke); [EOL]     } [EOL] } <line_num>: 331,370
private Point2D calculateLabelPoint(Line2D line, RectangleAnchor anchor, double deltaX, double deltaY) { [EOL]     double x = 0.0; [EOL]     double y = 0.0; [EOL]     boolean left = (anchor == RectangleAnchor.BOTTOM_LEFT || anchor == RectangleAnchor.LEFT || anchor == RectangleAnchor.TOP_LEFT); [EOL]     boolean right = (anchor == RectangleAnchor.BOTTOM_RIGHT || anchor == RectangleAnchor.RIGHT || anchor == RectangleAnchor.TOP_RIGHT); [EOL]     boolean top = (anchor == RectangleAnchor.TOP_LEFT || anchor == RectangleAnchor.TOP || anchor == RectangleAnchor.TOP_RIGHT); [EOL]     boolean bottom = (anchor == RectangleAnchor.BOTTOM_LEFT || anchor == RectangleAnchor.BOTTOM || anchor == RectangleAnchor.BOTTOM_RIGHT); [EOL]     Rectangle rect = line.getBounds(); [EOL]     if (line.getX1() == line.getX2()) { [EOL]         x = line.getX1(); [EOL]         y = (line.getY1() + line.getY2()) / 2.0; [EOL]         if (left) { [EOL]             x = x - deltaX; [EOL]         } [EOL]         if (right) { [EOL]             x = x + deltaX; [EOL]         } [EOL]         if (top) { [EOL]             y = Math.min(line.getY1(), line.getY2()) + deltaY; [EOL]         } [EOL]         if (bottom) { [EOL]             y = Math.max(line.getY1(), line.getY2()) - deltaY; [EOL]         } [EOL]     } else { [EOL]         x = (line.getX1() + line.getX2()) / 2.0; [EOL]         y = line.getY1(); [EOL]         if (left) { [EOL]             x = Math.min(line.getX1(), line.getX2()) + deltaX; [EOL]         } [EOL]         if (right) { [EOL]             x = Math.max(line.getX1(), line.getX2()) - deltaX; [EOL]         } [EOL]         if (top) { [EOL]             y = y - deltaY; [EOL]         } [EOL]         if (bottom) { [EOL]             y = y + deltaY; [EOL]         } [EOL]     } [EOL]     return new Point2D.Double(x, y); [EOL] } <line_num>: 382,434
private TextAnchor textAlignPtForLabelAnchorV(RectangleAnchor anchor) { [EOL]     TextAnchor result = TextAnchor.CENTER; [EOL]     if (anchor.equals(RectangleAnchor.TOP_LEFT)) { [EOL]         result = TextAnchor.TOP_RIGHT; [EOL]     } else if (anchor.equals(RectangleAnchor.TOP)) { [EOL]         result = TextAnchor.TOP_CENTER; [EOL]     } else if (anchor.equals(RectangleAnchor.TOP_RIGHT)) { [EOL]         result = TextAnchor.TOP_LEFT; [EOL]     } else if (anchor.equals(RectangleAnchor.LEFT)) { [EOL]         result = TextAnchor.HALF_ASCENT_RIGHT; [EOL]     } else if (anchor.equals(RectangleAnchor.RIGHT)) { [EOL]         result = TextAnchor.HALF_ASCENT_LEFT; [EOL]     } else if (anchor.equals(RectangleAnchor.BOTTOM_LEFT)) { [EOL]         result = TextAnchor.BOTTOM_RIGHT; [EOL]     } else if (anchor.equals(RectangleAnchor.BOTTOM)) { [EOL]         result = TextAnchor.BOTTOM_CENTER; [EOL]     } else if (anchor.equals(RectangleAnchor.BOTTOM_RIGHT)) { [EOL]         result = TextAnchor.BOTTOM_LEFT; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 444,471
private TextAnchor textAlignPtForLabelAnchorH(RectangleAnchor anchor) { [EOL]     TextAnchor result = TextAnchor.CENTER; [EOL]     if (anchor.equals(RectangleAnchor.TOP_LEFT)) { [EOL]         result = TextAnchor.BOTTOM_LEFT; [EOL]     } else if (anchor.equals(RectangleAnchor.TOP)) { [EOL]         result = TextAnchor.BOTTOM_CENTER; [EOL]     } else if (anchor.equals(RectangleAnchor.TOP_RIGHT)) { [EOL]         result = TextAnchor.BOTTOM_RIGHT; [EOL]     } else if (anchor.equals(RectangleAnchor.LEFT)) { [EOL]         result = TextAnchor.HALF_ASCENT_LEFT; [EOL]     } else if (anchor.equals(RectangleAnchor.RIGHT)) { [EOL]         result = TextAnchor.HALF_ASCENT_RIGHT; [EOL]     } else if (anchor.equals(RectangleAnchor.BOTTOM_LEFT)) { [EOL]         result = TextAnchor.TOP_LEFT; [EOL]     } else if (anchor.equals(RectangleAnchor.BOTTOM)) { [EOL]         result = TextAnchor.TOP_CENTER; [EOL]     } else if (anchor.equals(RectangleAnchor.BOTTOM_RIGHT)) { [EOL]         result = TextAnchor.TOP_RIGHT; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 481,508
private RectangleAnchor flipAnchorH(RectangleAnchor anchor) { [EOL]     RectangleAnchor result = anchor; [EOL]     if (anchor.equals(RectangleAnchor.TOP_LEFT)) { [EOL]         result = RectangleAnchor.TOP_RIGHT; [EOL]     } else if (anchor.equals(RectangleAnchor.TOP_RIGHT)) { [EOL]         result = RectangleAnchor.TOP_LEFT; [EOL]     } else if (anchor.equals(RectangleAnchor.LEFT)) { [EOL]         result = RectangleAnchor.RIGHT; [EOL]     } else if (anchor.equals(RectangleAnchor.RIGHT)) { [EOL]         result = RectangleAnchor.LEFT; [EOL]     } else if (anchor.equals(RectangleAnchor.BOTTOM_LEFT)) { [EOL]         result = RectangleAnchor.BOTTOM_RIGHT; [EOL]     } else if (anchor.equals(RectangleAnchor.BOTTOM_RIGHT)) { [EOL]         result = RectangleAnchor.BOTTOM_LEFT; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 510,531
private RectangleAnchor flipAnchorV(RectangleAnchor anchor) { [EOL]     RectangleAnchor result = anchor; [EOL]     if (anchor.equals(RectangleAnchor.TOP_LEFT)) { [EOL]         result = RectangleAnchor.BOTTOM_LEFT; [EOL]     } else if (anchor.equals(RectangleAnchor.TOP_RIGHT)) { [EOL]         result = RectangleAnchor.BOTTOM_RIGHT; [EOL]     } else if (anchor.equals(RectangleAnchor.TOP)) { [EOL]         result = RectangleAnchor.BOTTOM; [EOL]     } else if (anchor.equals(RectangleAnchor.BOTTOM)) { [EOL]         result = RectangleAnchor.TOP; [EOL]     } else if (anchor.equals(RectangleAnchor.BOTTOM_LEFT)) { [EOL]         result = RectangleAnchor.TOP_LEFT; [EOL]     } else if (anchor.equals(RectangleAnchor.BOTTOM_RIGHT)) { [EOL]         result = RectangleAnchor.TOP_RIGHT; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 533,554
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof CrosshairOverlay)) { [EOL]         return false; [EOL]     } [EOL]     CrosshairOverlay that = (CrosshairOverlay) obj; [EOL]     if (!this.xCrosshairs.equals(that.xCrosshairs)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.yCrosshairs.equals(that.yCrosshairs)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 563,578
public Object clone() throws CloneNotSupportedException { [EOL]     CrosshairOverlay clone = (CrosshairOverlay) super.clone(); [EOL]     clone.xCrosshairs = (List) ObjectUtilities.deepClone(this.xCrosshairs); [EOL]     clone.yCrosshairs = (List) ObjectUtilities.deepClone(this.yCrosshairs); [EOL]     return clone; [EOL] } <line_num>: 588,593
