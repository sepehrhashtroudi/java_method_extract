public static void applyCurrentTheme(JFreeChart chart) { [EOL]     ChartFactory.getChartTheme().apply(chart); [EOL] } <line_num>: 119,121
public static void writeChartAsPNG(OutputStream out, JFreeChart chart, int width, int height) throws IOException { [EOL]     writeChartAsPNG(out, chart, width, height, null); [EOL] } <line_num>: 133,139
public static void writeChartAsPNG(OutputStream out, JFreeChart chart, int width, int height, boolean encodeAlpha, int compression) throws IOException { [EOL]     ChartUtilities.writeChartAsPNG(out, chart, width, height, null, encodeAlpha, compression); [EOL] } <line_num>: 153,161
public static void writeChartAsPNG(OutputStream out, JFreeChart chart, int width, int height, ChartRenderingInfo info) throws IOException { [EOL]     if (chart == null) { [EOL]         throw new IllegalArgumentException("Null 'chart' argument."); [EOL]     } [EOL]     BufferedImage bufferedImage = chart.createBufferedImage(width, height, info); [EOL]     EncoderUtil.writeBufferedImage(bufferedImage, ImageFormat.PNG, out); [EOL] } <line_num>: 177,187
public static void writeChartAsPNG(OutputStream out, JFreeChart chart, int width, int height, ChartRenderingInfo info, boolean encodeAlpha, int compression) throws IOException { [EOL]     if (out == null) { [EOL]         throw new IllegalArgumentException("Null 'out' argument."); [EOL]     } [EOL]     if (chart == null) { [EOL]         throw new IllegalArgumentException("Null 'chart' argument."); [EOL]     } [EOL]     BufferedImage chartImage = chart.createBufferedImage(width, height, BufferedImage.TYPE_INT_ARGB, info); [EOL]     ChartUtilities.writeBufferedImageAsPNG(out, chartImage, encodeAlpha, compression); [EOL] } <line_num>: 206,221
public static void writeScaledChartAsPNG(OutputStream out, JFreeChart chart, int width, int height, int widthScaleFactor, int heightScaleFactor) throws IOException { [EOL]     if (out == null) { [EOL]         throw new IllegalArgumentException("Null 'out' argument."); [EOL]     } [EOL]     if (chart == null) { [EOL]         throw new IllegalArgumentException("Null 'chart' argument."); [EOL]     } [EOL]     double desiredWidth = width * widthScaleFactor; [EOL]     double desiredHeight = height * heightScaleFactor; [EOL]     double defaultWidth = width; [EOL]     double defaultHeight = height; [EOL]     boolean scale = false; [EOL]     if ((widthScaleFactor != 1) || (heightScaleFactor != 1)) { [EOL]         scale = true; [EOL]     } [EOL]     double scaleX = desiredWidth / defaultWidth; [EOL]     double scaleY = desiredHeight / defaultHeight; [EOL]     BufferedImage image = new BufferedImage((int) desiredWidth, (int) desiredHeight, BufferedImage.TYPE_INT_ARGB); [EOL]     Graphics2D g2 = image.createGraphics(); [EOL]     if (scale) { [EOL]         AffineTransform saved = g2.getTransform(); [EOL]         g2.transform(AffineTransform.getScaleInstance(scaleX, scaleY)); [EOL]         chart.draw(g2, new Rectangle2D.Double(0, 0, defaultWidth, defaultHeight), null, null); [EOL]         g2.setTransform(saved); [EOL]         g2.dispose(); [EOL]     } else { [EOL]         chart.draw(g2, new Rectangle2D.Double(0, 0, defaultWidth, defaultHeight), null, null); [EOL]     } [EOL]     out.write(encodeAsPNG(image)); [EOL] } <line_num>: 235,278
public static void saveChartAsPNG(File file, JFreeChart chart, int width, int height) throws IOException { [EOL]     saveChartAsPNG(file, chart, width, height, null); [EOL] } <line_num>: 290,296
public static void saveChartAsPNG(File file, JFreeChart chart, int width, int height, ChartRenderingInfo info) throws IOException { [EOL]     if (file == null) { [EOL]         throw new IllegalArgumentException("Null 'file' argument."); [EOL]     } [EOL]     OutputStream out = new BufferedOutputStream(new FileOutputStream(file)); [EOL]     try { [EOL]         ChartUtilities.writeChartAsPNG(out, chart, width, height, info); [EOL]     } finally { [EOL]         out.close(); [EOL]     } [EOL] } <line_num>: 312,326
public static void saveChartAsPNG(File file, JFreeChart chart, int width, int height, ChartRenderingInfo info, boolean encodeAlpha, int compression) throws IOException { [EOL]     if (file == null) { [EOL]         throw new IllegalArgumentException("Null 'file' argument."); [EOL]     } [EOL]     if (chart == null) { [EOL]         throw new IllegalArgumentException("Null 'chart' argument."); [EOL]     } [EOL]     OutputStream out = new BufferedOutputStream(new FileOutputStream(file)); [EOL]     try { [EOL]         writeChartAsPNG(out, chart, width, height, info, encodeAlpha, compression); [EOL]     } finally { [EOL]         out.close(); [EOL]     } [EOL] } <line_num>: 344,364
public static void writeChartAsJPEG(OutputStream out, JFreeChart chart, int width, int height) throws IOException { [EOL]     writeChartAsJPEG(out, chart, width, height, null); [EOL] } <line_num>: 377,383
public static void writeChartAsJPEG(OutputStream out, float quality, JFreeChart chart, int width, int height) throws IOException { [EOL]     ChartUtilities.writeChartAsJPEG(out, quality, chart, width, height, null); [EOL] } <line_num>: 397,404
public static void writeChartAsJPEG(OutputStream out, JFreeChart chart, int width, int height, ChartRenderingInfo info) throws IOException { [EOL]     if (chart == null) { [EOL]         throw new IllegalArgumentException("Null 'chart' argument."); [EOL]     } [EOL]     BufferedImage image = chart.createBufferedImage(width, height, BufferedImage.TYPE_INT_RGB, info); [EOL]     EncoderUtil.writeBufferedImage(image, ImageFormat.JPEG, out); [EOL] } <line_num>: 420,431
public static void writeChartAsJPEG(OutputStream out, float quality, JFreeChart chart, int width, int height, ChartRenderingInfo info) throws IOException { [EOL]     if (chart == null) { [EOL]         throw new IllegalArgumentException("Null 'chart' argument."); [EOL]     } [EOL]     BufferedImage image = chart.createBufferedImage(width, height, BufferedImage.TYPE_INT_RGB, info); [EOL]     EncoderUtil.writeBufferedImage(image, ImageFormat.JPEG, out, quality); [EOL] } <line_num>: 448,459
public static void saveChartAsJPEG(File file, JFreeChart chart, int width, int height) throws IOException { [EOL]     saveChartAsJPEG(file, chart, width, height, null); [EOL] } <line_num>: 471,477
public static void saveChartAsJPEG(File file, float quality, JFreeChart chart, int width, int height) throws IOException { [EOL]     saveChartAsJPEG(file, quality, chart, width, height, null); [EOL] } <line_num>: 490,496
public static void saveChartAsJPEG(File file, JFreeChart chart, int width, int height, ChartRenderingInfo info) throws IOException { [EOL]     if (file == null) { [EOL]         throw new IllegalArgumentException("Null 'file' argument."); [EOL]     } [EOL]     if (chart == null) { [EOL]         throw new IllegalArgumentException("Null 'chart' argument."); [EOL]     } [EOL]     OutputStream out = new BufferedOutputStream(new FileOutputStream(file)); [EOL]     try { [EOL]         writeChartAsJPEG(out, chart, width, height, info); [EOL]     } finally { [EOL]         out.close(); [EOL]     } [EOL] } <line_num>: 512,529
public static void saveChartAsJPEG(File file, float quality, JFreeChart chart, int width, int height, ChartRenderingInfo info) throws IOException { [EOL]     if (file == null) { [EOL]         throw new IllegalArgumentException("Null 'file' argument."); [EOL]     } [EOL]     if (chart == null) { [EOL]         throw new IllegalArgumentException("Null 'chart' argument."); [EOL]     } [EOL]     OutputStream out = new BufferedOutputStream(new FileOutputStream(file)); [EOL]     try { [EOL]         writeChartAsJPEG(out, quality, chart, width, height, info); [EOL]     } finally { [EOL]         out.close(); [EOL]     } [EOL] } <line_num>: 546,566
public static void writeBufferedImageAsJPEG(OutputStream out, BufferedImage image) throws IOException { [EOL]     writeBufferedImageAsJPEG(out, 0.75f, image); [EOL] } <line_num>: 576,582
public static void writeBufferedImageAsJPEG(OutputStream out, float quality, BufferedImage image) throws IOException { [EOL]     EncoderUtil.writeBufferedImage(image, ImageFormat.JPEG, out, quality); [EOL] } <line_num>: 593,598
public static void writeBufferedImageAsPNG(OutputStream out, BufferedImage image) throws IOException { [EOL]     EncoderUtil.writeBufferedImage(image, ImageFormat.PNG, out); [EOL] } <line_num>: 608,613
public static void writeBufferedImageAsPNG(OutputStream out, BufferedImage image, boolean encodeAlpha, int compression) throws IOException { [EOL]     EncoderUtil.writeBufferedImage(image, ImageFormat.PNG, out, compression, encodeAlpha); [EOL] } <line_num>: 625,631
public static byte[] encodeAsPNG(BufferedImage image) throws IOException { [EOL]     return EncoderUtil.encode(image, ImageFormat.PNG); [EOL] } <line_num>: 642,644
public static byte[] encodeAsPNG(BufferedImage image, boolean encodeAlpha, int compression) throws IOException { [EOL]     return EncoderUtil.encode(image, ImageFormat.PNG, compression, encodeAlpha); [EOL] } <line_num>: 657,662
public static void writeImageMap(PrintWriter writer, String name, ChartRenderingInfo info, boolean useOverLibForToolTips) throws IOException { [EOL]     ToolTipTagFragmentGenerator toolTipTagFragmentGenerator = null; [EOL]     if (useOverLibForToolTips) { [EOL]         toolTipTagFragmentGenerator = new OverLIBToolTipTagFragmentGenerator(); [EOL]     } else { [EOL]         toolTipTagFragmentGenerator = new StandardToolTipTagFragmentGenerator(); [EOL]     } [EOL]     ImageMapUtilities.writeImageMap(writer, name, info, toolTipTagFragmentGenerator, new StandardURLTagFragmentGenerator()); [EOL] } <line_num>: 675,694
public static void writeImageMap(PrintWriter writer, String name, ChartRenderingInfo info, ToolTipTagFragmentGenerator toolTipTagFragmentGenerator, URLTagFragmentGenerator urlTagFragmentGenerator) throws IOException { [EOL]     writer.println(ImageMapUtilities.getImageMap(name, info, toolTipTagFragmentGenerator, urlTagFragmentGenerator)); [EOL] } <line_num>: 711,719
public static String getImageMap(String name, ChartRenderingInfo info) { [EOL]     return ImageMapUtilities.getImageMap(name, info, new StandardToolTipTagFragmentGenerator(), new StandardURLTagFragmentGenerator()); [EOL] } <line_num>: 732,736
public static String getImageMap(String name, ChartRenderingInfo info, ToolTipTagFragmentGenerator toolTipTagFragmentGenerator, URLTagFragmentGenerator urlTagFragmentGenerator) { [EOL]     return ImageMapUtilities.getImageMap(name, info, toolTipTagFragmentGenerator, urlTagFragmentGenerator); [EOL] } <line_num>: 754,761
