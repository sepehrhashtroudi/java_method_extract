public LogFormat() { [EOL]     this(10.0, "10", true); [EOL] } <line_num>: 87,89
public LogFormat(double base, String baseLabel, boolean showBase) { [EOL]     this(base, baseLabel, "^", showBase); [EOL] } <line_num>: 99,101
public LogFormat(double base, String baseLabel, String powerLabel, boolean showBase) { [EOL]     if (baseLabel == null) { [EOL]         throw new IllegalArgumentException("Null 'baseLabel' argument."); [EOL]     } [EOL]     if (powerLabel == null) { [EOL]         throw new IllegalArgumentException("Null 'powerLabel' argument."); [EOL]     } [EOL]     this.base = base; [EOL]     this.baseLog = Math.log(this.base); [EOL]     this.baseLabel = baseLabel; [EOL]     this.showBase = showBase; [EOL]     this.powerLabel = powerLabel; [EOL] } <line_num>: 114,127
public NumberFormat getExponentFormat() { [EOL]     return (NumberFormat) this.formatter.clone(); [EOL] } <line_num>: 136,138
public void setExponentFormat(NumberFormat format) { [EOL]     if (format == null) { [EOL]         throw new IllegalArgumentException("Null 'format' argument."); [EOL]     } [EOL]     this.formatter = format; [EOL] } <line_num>: 147,152
private double calculateLog(double value) { [EOL]     return Math.log(value) / this.baseLog; [EOL] } <line_num>: 161,163
public StringBuffer format(double number, StringBuffer toAppendTo, FieldPosition pos) { [EOL]     StringBuffer result = new StringBuffer(); [EOL]     if (this.showBase) { [EOL]         result.append(this.baseLabel); [EOL]         result.append(this.powerLabel); [EOL]     } [EOL]     result.append(this.formatter.format(calculateLog(number))); [EOL]     return result; [EOL] } <line_num>: 174,183
public StringBuffer format(long number, StringBuffer toAppendTo, FieldPosition pos) { [EOL]     StringBuffer result = new StringBuffer(); [EOL]     if (this.showBase) { [EOL]         result.append(this.baseLabel); [EOL]         result.append("^"); [EOL]     } [EOL]     result.append(this.formatter.format(calculateLog(number))); [EOL]     return result; [EOL] } <line_num>: 195,204
public Number parse(String source, ParsePosition parsePosition) { [EOL]     return null; [EOL] } <line_num>: 215,217
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof LogFormat)) { [EOL]         return false; [EOL]     } [EOL]     LogFormat that = (LogFormat) obj; [EOL]     if (this.base != that.base) { [EOL]         return false; [EOL]     } [EOL]     if (!this.baseLabel.equals(that.baseLabel)) { [EOL]         return false; [EOL]     } [EOL]     if (this.baseLog != that.baseLog) { [EOL]         return false; [EOL]     } [EOL]     if (this.showBase != that.showBase) { [EOL]         return false; [EOL]     } [EOL]     if (!this.formatter.equals(that.formatter)) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 226,250
public Object clone() { [EOL]     LogFormat clone = (LogFormat) super.clone(); [EOL]     clone.formatter = (NumberFormat) this.formatter.clone(); [EOL]     return clone; [EOL] } <line_num>: 257,261
