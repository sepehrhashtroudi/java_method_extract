private PaintUtilities() { [EOL] } <line_num>: 60,61
public static boolean equal(Paint p1, Paint p2) { [EOL]     if (p1 == null) { [EOL]         return (p2 == null); [EOL]     } [EOL]     if (p2 == null) { [EOL]         return false; [EOL]     } [EOL]     boolean result = false; [EOL]     if (p1 instanceof GradientPaint && p2 instanceof GradientPaint) { [EOL]         GradientPaint gp1 = (GradientPaint) p1; [EOL]         GradientPaint gp2 = (GradientPaint) p2; [EOL]         result = gp1.getColor1().equals(gp2.getColor1()) && gp1.getColor2().equals(gp2.getColor2()) && gp1.getPoint1().equals(gp2.getPoint1()) && gp1.getPoint2().equals(gp2.getPoint2()) && gp1.isCyclic() == gp2.isCyclic() && gp1.getTransparency() == gp1.getTransparency(); [EOL]     } else { [EOL]         result = p1.equals(p2); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 73,100
public static String colorToString(Color c) { [EOL]     try { [EOL]         Field[] fields = Color.class.getFields(); [EOL]         for (int i = 0; i < fields.length; i++) { [EOL]             Field f = fields[i]; [EOL]             if (Modifier.isPublic(f.getModifiers()) && Modifier.isFinal(f.getModifiers()) && Modifier.isStatic(f.getModifiers())) { [EOL]                 String name = f.getName(); [EOL]                 Object oColor = f.get(null); [EOL]                 if (oColor instanceof Color) { [EOL]                     if (c.equals(oColor)) { [EOL]                         return name; [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } catch (Exception e) { [EOL]     } [EOL]     String color = Integer.toHexString(c.getRGB() & 0x00ffffff); [EOL]     StringBuffer retval = new StringBuffer(7); [EOL]     retval.append("#"); [EOL]     int fillUp = 6 - color.length(); [EOL]     for (int i = 0; i < fillUp; i++) { [EOL]         retval.append("0"); [EOL]     } [EOL]     retval.append(color); [EOL]     return retval.toString(); [EOL] } <line_num>: 110,145
public static Color stringToColor(String value) { [EOL]     if (value == null) { [EOL]         return Color.black; [EOL]     } [EOL]     try { [EOL]         return Color.decode(value); [EOL]     } catch (NumberFormatException nfe) { [EOL]         try { [EOL]             final Field f = Color.class.getField(value); [EOL]             return (Color) f.get(null); [EOL]         } catch (Exception ce) { [EOL]             return Color.black; [EOL]         } [EOL]     } [EOL] } <line_num>: 153,175
