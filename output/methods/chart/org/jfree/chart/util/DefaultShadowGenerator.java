public DefaultShadowGenerator() { [EOL]     this(5, Color.black, 0.5f, 5, -Math.PI / 4); [EOL] } <line_num>: 77,79
public DefaultShadowGenerator(int size, Color color, float opacity, int distance, double angle) { [EOL]     if (color == null) { [EOL]         throw new IllegalArgumentException("Null 'color' argument."); [EOL]     } [EOL]     this.shadowSize = size; [EOL]     this.shadowColor = color; [EOL]     this.shadowOpacity = opacity; [EOL]     this.distance = distance; [EOL]     this.angle = angle; [EOL] } <line_num>: 90,100
public int getShadowSize() { [EOL]     return this.shadowSize; [EOL] } <line_num>: 107,109
public Color getShadowColor() { [EOL]     return this.shadowColor; [EOL] } <line_num>: 116,118
public float getShadowOpacity() { [EOL]     return this.shadowOpacity; [EOL] } <line_num>: 125,127
public int getDistance() { [EOL]     return this.distance; [EOL] } <line_num>: 134,136
public double getAngle() { [EOL]     return this.angle; [EOL] } <line_num>: 143,145
public int calculateOffsetX() { [EOL]     return (int) (Math.cos(this.angle) * this.distance) - this.shadowSize; [EOL] } <line_num>: 153,155
public int calculateOffsetY() { [EOL]     return -(int) (Math.sin(this.angle) * this.distance) - this.shadowSize; [EOL] } <line_num>: 163,165
public BufferedImage createDropShadow(BufferedImage source) { [EOL]     BufferedImage subject = new BufferedImage(source.getWidth() + this.shadowSize * 2, source.getHeight() + this.shadowSize * 2, BufferedImage.TYPE_INT_ARGB); [EOL]     Graphics2D g2 = subject.createGraphics(); [EOL]     g2.drawImage(source, null, shadowSize, shadowSize); [EOL]     g2.dispose(); [EOL]     applyShadow(subject); [EOL]     return subject; [EOL] } <line_num>: 175,186
protected void applyShadow(BufferedImage image) { [EOL]     int dstWidth = image.getWidth(); [EOL]     int dstHeight = image.getHeight(); [EOL]     int left = (shadowSize - 1) >> 1; [EOL]     int right = shadowSize - left; [EOL]     int xStart = left; [EOL]     int xStop = dstWidth - right; [EOL]     int yStart = left; [EOL]     int yStop = dstHeight - right; [EOL]     int shadowRgb = shadowColor.getRGB() & 0x00FFFFFF; [EOL]     int[] aHistory = new int[shadowSize]; [EOL]     int historyIdx = 0; [EOL]     int aSum; [EOL]     int[] dataBuffer = ((DataBufferInt) image.getRaster().getDataBuffer()).getData(); [EOL]     int lastPixelOffset = right * dstWidth; [EOL]     float sumDivider = shadowOpacity / shadowSize; [EOL]     for (int y = 0, bufferOffset = 0; y < dstHeight; y++, bufferOffset = y * dstWidth) { [EOL]         aSum = 0; [EOL]         historyIdx = 0; [EOL]         for (int x = 0; x < shadowSize; x++, bufferOffset++) { [EOL]             int a = dataBuffer[bufferOffset] >>> 24; [EOL]             aHistory[x] = a; [EOL]             aSum += a; [EOL]         } [EOL]         bufferOffset -= right; [EOL]         for (int x = xStart; x < xStop; x++, bufferOffset++) { [EOL]             int a = (int) (aSum * sumDivider); [EOL]             dataBuffer[bufferOffset] = a << 24 | shadowRgb; [EOL]             aSum -= aHistory[historyIdx]; [EOL]             a = dataBuffer[bufferOffset + right] >>> 24; [EOL]             aHistory[historyIdx] = a; [EOL]             aSum += a; [EOL]             if (++historyIdx >= shadowSize) { [EOL]                 historyIdx -= shadowSize; [EOL]             } [EOL]         } [EOL]     } [EOL]     for (int x = 0, bufferOffset = 0; x < dstWidth; x++, bufferOffset = x) { [EOL]         aSum = 0; [EOL]         historyIdx = 0; [EOL]         for (int y = 0; y < shadowSize; y++, bufferOffset += dstWidth) { [EOL]             int a = dataBuffer[bufferOffset] >>> 24; [EOL]             aHistory[y] = a; [EOL]             aSum += a; [EOL]         } [EOL]         bufferOffset -= lastPixelOffset; [EOL]         for (int y = yStart; y < yStop; y++, bufferOffset += dstWidth) { [EOL]             int a = (int) (aSum * sumDivider); [EOL]             dataBuffer[bufferOffset] = a << 24 | shadowRgb; [EOL]             aSum -= aHistory[historyIdx]; [EOL]             a = dataBuffer[bufferOffset + lastPixelOffset] >>> 24; [EOL]             aHistory[historyIdx] = a; [EOL]             aSum += a; [EOL]             if (++historyIdx >= shadowSize) { [EOL]                 historyIdx -= shadowSize; [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 193,275
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof DefaultShadowGenerator)) { [EOL]         return false; [EOL]     } [EOL]     DefaultShadowGenerator that = (DefaultShadowGenerator) obj; [EOL]     if (this.shadowSize != that.shadowSize) { [EOL]         return false; [EOL]     } [EOL]     if (!this.shadowColor.equals(that.shadowColor)) { [EOL]         return false; [EOL]     } [EOL]     if (this.shadowOpacity != that.shadowOpacity) { [EOL]         return false; [EOL]     } [EOL]     if (this.distance != that.distance) { [EOL]         return false; [EOL]     } [EOL]     if (this.angle != that.angle) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 284,308
public int hashCode() { [EOL]     int hash = HashUtilities.hashCode(17, this.shadowSize); [EOL]     hash = HashUtilities.hashCode(hash, this.shadowColor); [EOL]     hash = HashUtilities.hashCode(hash, this.shadowOpacity); [EOL]     hash = HashUtilities.hashCode(hash, this.distance); [EOL]     hash = HashUtilities.hashCode(hash, this.angle); [EOL]     return hash; [EOL] } <line_num>: 315,322
