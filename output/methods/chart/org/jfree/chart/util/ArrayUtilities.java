private ArrayUtilities() { [EOL] } <line_num>: 55,56
public static float[][] clone(float[][] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } [EOL]     float[][] result = new float[array.length][]; [EOL]     System.arraycopy(array, 0, result, 0, array.length); [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         float[] child = array[i]; [EOL]         float[] copychild = new float[child.length]; [EOL]         System.arraycopy(child, 0, copychild, 0, child.length); [EOL]         result[i] = copychild; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 65,82
public static boolean equalReferencesInArrays(Object[] array1, Object[] array2) { [EOL]     if (array1 == null) { [EOL]         return (array2 == null); [EOL]     } [EOL]     if (array2 == null) { [EOL]         return false; [EOL]     } [EOL]     if (array1.length != array2.length) { [EOL]         return false; [EOL]     } [EOL]     for (int i = 0; i < array1.length; i++) { [EOL]         if (array1[i] == null) { [EOL]             if (array2[i] != null) { [EOL]                 return false; [EOL]             } [EOL]         } [EOL]         if (array2[i] == null) { [EOL]             if (array1[i] != null) { [EOL]                 return false; [EOL]             } [EOL]         } [EOL]         if (array1[i] != array2[i]) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 94,121
public static boolean equal(float[][] array1, float[][] array2) { [EOL]     if (array1 == null) { [EOL]         return (array2 == null); [EOL]     } [EOL]     if (array2 == null) { [EOL]         return false; [EOL]     } [EOL]     if (array1.length != array2.length) { [EOL]         return false; [EOL]     } [EOL]     for (int i = 0; i < array1.length; i++) { [EOL]         if (!Arrays.equals(array1[i], array2[i])) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 131,150
public static boolean hasDuplicateItems(Object[] array) { [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         for (int j = 0; j < i; j++) { [EOL]             Object o1 = array[i]; [EOL]             Object o2 = array[j]; [EOL]             if (o1 != null && o2 != null) { [EOL]                 if (o1.equals(o2)) { [EOL]                     return true; [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 160,173
public static int compareVersionArrays(Comparable[] a1, Comparable[] a2) { [EOL]     int length = Math.min(a1.length, a2.length); [EOL]     for (int i = 0; i < length; i++) { [EOL]         Comparable o1 = a1[i]; [EOL]         Comparable o2 = a2[i]; [EOL]         if (o1 == null && o2 == null) { [EOL]             continue; [EOL]         } [EOL]         if (o1 == null) { [EOL]             return 1; [EOL]         } [EOL]         if (o2 == null) { [EOL]             return -1; [EOL]         } [EOL]         int retval = o1.compareTo(o2); [EOL]         if (retval != 0) { [EOL]             return retval; [EOL]         } [EOL]     } [EOL]     return 0; [EOL] } <line_num>: 183,204
