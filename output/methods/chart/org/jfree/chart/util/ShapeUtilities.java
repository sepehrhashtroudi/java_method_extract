private ShapeUtilities() { [EOL] } <line_num>: 85,86
public static Shape clone(Shape shape) { [EOL]     if (shape instanceof Cloneable) { [EOL]         try { [EOL]             return (Shape) ObjectUtilities.clone(shape); [EOL]         } catch (CloneNotSupportedException cnse) { [EOL]         } [EOL]     } [EOL]     Shape result = null; [EOL]     return result; [EOL] } <line_num>: 103,113
public static boolean equal(Shape s1, Shape s2) { [EOL]     if (s1 instanceof Line2D && s2 instanceof Line2D) { [EOL]         return equal((Line2D) s1, (Line2D) s2); [EOL]     } else if (s1 instanceof Ellipse2D && s2 instanceof Ellipse2D) { [EOL]         return equal((Ellipse2D) s1, (Ellipse2D) s2); [EOL]     } else if (s1 instanceof Arc2D && s2 instanceof Arc2D) { [EOL]         return equal((Arc2D) s1, (Arc2D) s2); [EOL]     } else if (s1 instanceof Polygon && s2 instanceof Polygon) { [EOL]         return equal((Polygon) s1, (Polygon) s2); [EOL]     } else if (s1 instanceof GeneralPath && s2 instanceof GeneralPath) { [EOL]         return equal((GeneralPath) s1, (GeneralPath) s2); [EOL]     } else { [EOL]         return ObjectUtilities.equal(s1, s2); [EOL]     } [EOL] } <line_num>: 128,148
public static boolean equal(Line2D l1, Line2D l2) { [EOL]     if (l1 == null) { [EOL]         return (l2 == null); [EOL]     } [EOL]     if (l2 == null) { [EOL]         return false; [EOL]     } [EOL]     if (!l1.getP1().equals(l2.getP1())) { [EOL]         return false; [EOL]     } [EOL]     if (!l1.getP2().equals(l2.getP2())) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 159,173
public static boolean equal(Ellipse2D e1, Ellipse2D e2) { [EOL]     if (e1 == null) { [EOL]         return (e2 == null); [EOL]     } [EOL]     if (e2 == null) { [EOL]         return false; [EOL]     } [EOL]     if (!e1.getFrame().equals(e2.getFrame())) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 184,195
public static boolean equal(Arc2D a1, Arc2D a2) { [EOL]     if (a1 == null) { [EOL]         return (a2 == null); [EOL]     } [EOL]     if (a2 == null) { [EOL]         return false; [EOL]     } [EOL]     if (!a1.getFrame().equals(a2.getFrame())) { [EOL]         return false; [EOL]     } [EOL]     if (a1.getAngleStart() != a2.getAngleStart()) { [EOL]         return false; [EOL]     } [EOL]     if (a1.getAngleExtent() != a2.getAngleExtent()) { [EOL]         return false; [EOL]     } [EOL]     if (a1.getArcType() != a2.getArcType()) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 206,226
public static boolean equal(Polygon p1, Polygon p2) { [EOL]     if (p1 == null) { [EOL]         return (p2 == null); [EOL]     } [EOL]     if (p2 == null) { [EOL]         return false; [EOL]     } [EOL]     if (p1.npoints != p2.npoints) { [EOL]         return false; [EOL]     } [EOL]     if (!Arrays.equals(p1.xpoints, p2.xpoints)) { [EOL]         return false; [EOL]     } [EOL]     if (!Arrays.equals(p1.ypoints, p2.ypoints)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 237,254
public static boolean equal(GeneralPath p1, GeneralPath p2) { [EOL]     if (p1 == null) { [EOL]         return (p2 == null); [EOL]     } [EOL]     if (p2 == null) { [EOL]         return false; [EOL]     } [EOL]     if (p1.getWindingRule() != p2.getWindingRule()) { [EOL]         return false; [EOL]     } [EOL]     PathIterator iterator1 = p1.getPathIterator(null); [EOL]     PathIterator iterator2 = p2.getPathIterator(null); [EOL]     double[] d1 = new double[6]; [EOL]     double[] d2 = new double[6]; [EOL]     boolean done = iterator1.isDone() && iterator2.isDone(); [EOL]     while (!done) { [EOL]         if (iterator1.isDone() != iterator2.isDone()) { [EOL]             return false; [EOL]         } [EOL]         int seg1 = iterator1.currentSegment(d1); [EOL]         int seg2 = iterator2.currentSegment(d2); [EOL]         if (seg1 != seg2) { [EOL]             return false; [EOL]         } [EOL]         if (!Arrays.equals(d1, d2)) { [EOL]             return false; [EOL]         } [EOL]         iterator1.next(); [EOL]         iterator2.next(); [EOL]         done = iterator1.isDone() && iterator2.isDone(); [EOL]     } [EOL]     return true; [EOL] } <line_num>: 265,297
public static Shape createTranslatedShape(Shape shape, double transX, double transY) { [EOL]     if (shape == null) { [EOL]         throw new IllegalArgumentException("Null 'shape' argument."); [EOL]     } [EOL]     AffineTransform transform = AffineTransform.getTranslateInstance(transX, transY); [EOL]     return transform.createTransformedShape(shape); [EOL] } <line_num>: 308,317
public static Shape createTranslatedShape(Shape shape, RectangleAnchor anchor, double locationX, double locationY) { [EOL]     if (shape == null) { [EOL]         throw new IllegalArgumentException("Null 'shape' argument."); [EOL]     } [EOL]     if (anchor == null) { [EOL]         throw new IllegalArgumentException("Null 'anchor' argument."); [EOL]     } [EOL]     Point2D anchorPoint = RectangleAnchor.coordinates(shape.getBounds2D(), anchor); [EOL]     AffineTransform transform = AffineTransform.getTranslateInstance(locationX - anchorPoint.getX(), locationY - anchorPoint.getY()); [EOL]     return transform.createTransformedShape(shape); [EOL] } <line_num>: 331,346
public static Shape rotateShape(Shape base, double angle, float x, float y) { [EOL]     if (base == null) { [EOL]         return null; [EOL]     } [EOL]     AffineTransform rotate = AffineTransform.getRotateInstance(angle, x, y); [EOL]     Shape result = rotate.createTransformedShape(base); [EOL]     return result; [EOL] } <line_num>: 359,367
public static void drawRotatedShape(Graphics2D g2, Shape shape, double angle, float x, float y) { [EOL]     AffineTransform saved = g2.getTransform(); [EOL]     AffineTransform rotate = AffineTransform.getRotateInstance(angle, x, y); [EOL]     g2.transform(rotate); [EOL]     g2.draw(shape); [EOL]     g2.setTransform(saved); [EOL] } <line_num>: 378,387
public static Shape createDiagonalCross(float l, float t) { [EOL]     GeneralPath p0 = new GeneralPath(); [EOL]     p0.moveTo(-l - t, -l + t); [EOL]     p0.lineTo(-l + t, -l - t); [EOL]     p0.lineTo(0.0f, -t * SQRT2); [EOL]     p0.lineTo(l - t, -l - t); [EOL]     p0.lineTo(l + t, -l + t); [EOL]     p0.lineTo(t * SQRT2, 0.0f); [EOL]     p0.lineTo(l + t, l - t); [EOL]     p0.lineTo(l - t, l + t); [EOL]     p0.lineTo(0.0f, t * SQRT2); [EOL]     p0.lineTo(-l + t, l + t); [EOL]     p0.lineTo(-l - t, l - t); [EOL]     p0.lineTo(-t * SQRT2, 0.0f); [EOL]     p0.closePath(); [EOL]     return p0; [EOL] } <line_num>: 400,416
public static Shape createRegularCross(float l, float t) { [EOL]     GeneralPath p0 = new GeneralPath(); [EOL]     p0.moveTo(-l, t); [EOL]     p0.lineTo(-t, t); [EOL]     p0.lineTo(-t, l); [EOL]     p0.lineTo(t, l); [EOL]     p0.lineTo(t, t); [EOL]     p0.lineTo(l, t); [EOL]     p0.lineTo(l, -t); [EOL]     p0.lineTo(t, -t); [EOL]     p0.lineTo(t, -l); [EOL]     p0.lineTo(-t, -l); [EOL]     p0.lineTo(-t, -t); [EOL]     p0.lineTo(-l, -t); [EOL]     p0.closePath(); [EOL]     return p0; [EOL] } <line_num>: 426,442
public static Shape createDiamond(float s) { [EOL]     GeneralPath p0 = new GeneralPath(); [EOL]     p0.moveTo(0.0f, -s); [EOL]     p0.lineTo(s, 0.0f); [EOL]     p0.lineTo(0.0f, s); [EOL]     p0.lineTo(-s, 0.0f); [EOL]     p0.closePath(); [EOL]     return p0; [EOL] } <line_num>: 451,459
public static Shape createUpTriangle(float s) { [EOL]     GeneralPath p0 = new GeneralPath(); [EOL]     p0.moveTo(0.0f, -s); [EOL]     p0.lineTo(s, s); [EOL]     p0.lineTo(-s, s); [EOL]     p0.closePath(); [EOL]     return p0; [EOL] } <line_num>: 468,475
public static Shape createDownTriangle(float s) { [EOL]     GeneralPath p0 = new GeneralPath(); [EOL]     p0.moveTo(0.0f, s); [EOL]     p0.lineTo(s, -s); [EOL]     p0.lineTo(-s, -s); [EOL]     p0.closePath(); [EOL]     return p0; [EOL] } <line_num>: 484,491
public static Shape createLineRegion(Line2D line, float width) { [EOL]     GeneralPath result = new GeneralPath(); [EOL]     float x1 = (float) line.getX1(); [EOL]     float x2 = (float) line.getX2(); [EOL]     float y1 = (float) line.getY1(); [EOL]     float y2 = (float) line.getY2(); [EOL]     if ((x2 - x1) != 0.0) { [EOL]         double theta = Math.atan((y2 - y1) / (x2 - x1)); [EOL]         float dx = (float) Math.sin(theta) * width; [EOL]         float dy = (float) Math.cos(theta) * width; [EOL]         result.moveTo(x1 - dx, y1 + dy); [EOL]         result.lineTo(x1 + dx, y1 - dy); [EOL]         result.lineTo(x2 + dx, y2 - dy); [EOL]         result.lineTo(x2 - dx, y2 + dy); [EOL]         result.closePath(); [EOL]     } else { [EOL]         result.moveTo(x1 - width / 2.0f, y1); [EOL]         result.lineTo(x1 + width / 2.0f, y1); [EOL]         result.lineTo(x2 + width / 2.0f, y2); [EOL]         result.lineTo(x2 - width / 2.0f, y2); [EOL]         result.closePath(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 503,528
public static Point2D getPointInRectangle(double x, double y, Rectangle2D area) { [EOL]     x = Math.max(area.getMinX(), Math.min(x, area.getMaxX())); [EOL]     y = Math.max(area.getMinY(), Math.min(y, area.getMaxY())); [EOL]     return new Point2D.Double(x, y); [EOL] } <line_num>: 543,550
public static boolean contains(Rectangle2D rect1, Rectangle2D rect2) { [EOL]     double x0 = rect1.getX(); [EOL]     double y0 = rect1.getY(); [EOL]     double x = rect2.getX(); [EOL]     double y = rect2.getY(); [EOL]     double w = rect2.getWidth(); [EOL]     double h = rect2.getHeight(); [EOL]     return ((x >= x0) && (y >= y0) && ((x + w) <= (x0 + rect1.getWidth())) && ((y + h) <= (y0 + rect1.getHeight()))); [EOL] } <line_num>: 561,574
public static boolean intersects(Rectangle2D rect1, Rectangle2D rect2) { [EOL]     double x0 = rect1.getX(); [EOL]     double y0 = rect1.getY(); [EOL]     double x = rect2.getX(); [EOL]     double width = rect2.getWidth(); [EOL]     double y = rect2.getY(); [EOL]     double height = rect2.getHeight(); [EOL]     return (x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth() && y <= y0 + rect1.getHeight()); [EOL] } <line_num>: 586,597
public static boolean isPointInRect(double x, double y, Rectangle2D rect) { [EOL]     return (x >= rect.getMinX() && x <= rect.getMaxX() && y >= rect.getMinY() && y <= rect.getMaxY()); [EOL] } <line_num>: 611,614
public static boolean clipLine(Line2D line, Rectangle2D rect) { [EOL]     double x1 = line.getX1(); [EOL]     double y1 = line.getY1(); [EOL]     double x2 = line.getX2(); [EOL]     double y2 = line.getY2(); [EOL]     double minX = rect.getMinX(); [EOL]     double maxX = rect.getMaxX(); [EOL]     double minY = rect.getMinY(); [EOL]     double maxY = rect.getMaxY(); [EOL]     int f1 = rect.outcode(x1, y1); [EOL]     int f2 = rect.outcode(x2, y2); [EOL]     while ((f1 | f2) != 0) { [EOL]         if ((f1 & f2) != 0) { [EOL]             return false; [EOL]         } [EOL]         double dx = (x2 - x1); [EOL]         double dy = (y2 - y1); [EOL]         if (f1 != 0) { [EOL]             if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT && dx != 0.0) { [EOL]                 y1 = y1 + (minX - x1) * dy / dx; [EOL]                 x1 = minX; [EOL]             } else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT && dx != 0.0) { [EOL]                 y1 = y1 + (maxX - x1) * dy / dx; [EOL]                 x1 = maxX; [EOL]             } else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM && dy != 0.0) { [EOL]                 x1 = x1 + (maxY - y1) * dx / dy; [EOL]                 y1 = maxY; [EOL]             } else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP && dy != 0.0) { [EOL]                 x1 = x1 + (minY - y1) * dx / dy; [EOL]                 y1 = minY; [EOL]             } [EOL]             f1 = rect.outcode(x1, y1); [EOL]         } else if (f2 != 0) { [EOL]             if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT && dx != 0.0) { [EOL]                 y2 = y2 + (minX - x2) * dy / dx; [EOL]                 x2 = minX; [EOL]             } else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT && dx != 0.0) { [EOL]                 y2 = y2 + (maxX - x2) * dy / dx; [EOL]                 x2 = maxX; [EOL]             } else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM && dy != 0.0) { [EOL]                 x2 = x2 + (maxY - y2) * dx / dy; [EOL]                 y2 = maxY; [EOL]             } else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP && dy != 0.0) { [EOL]                 x2 = x2 + (minY - y2) * dx / dy; [EOL]                 y2 = minY; [EOL]             } [EOL]             f2 = rect.outcode(x2, y2); [EOL]         } [EOL]     } [EOL]     line.setLine(x1, y1, x2, y2); [EOL]     return true; [EOL] } <line_num>: 627,706
