private SerialUtilities() { [EOL] } <line_num>: 89,90
public static boolean isSerializable(Class c) { [EOL]     return Serializable.class.isAssignableFrom(c); [EOL] } <line_num>: 100,102
public static Paint readPaint(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     if (stream == null) { [EOL]         throw new IllegalArgumentException("Null 'stream' argument."); [EOL]     } [EOL]     Paint result = null; [EOL]     boolean isNull = stream.readBoolean(); [EOL]     if (!isNull) { [EOL]         Class c = (Class) stream.readObject(); [EOL]         if (isSerializable(c)) { [EOL]             result = (Paint) stream.readObject(); [EOL]         } else if (c.equals(GradientPaint.class)) { [EOL]             float x1 = stream.readFloat(); [EOL]             float y1 = stream.readFloat(); [EOL]             Color c1 = (Color) stream.readObject(); [EOL]             float x2 = stream.readFloat(); [EOL]             float y2 = stream.readFloat(); [EOL]             Color c2 = (Color) stream.readObject(); [EOL]             boolean isCyclic = stream.readBoolean(); [EOL]             result = new GradientPaint(x1, y1, c1, x2, y2, c2, isCyclic); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 115,141
public static void writePaint(Paint paint, ObjectOutputStream stream) throws IOException { [EOL]     if (stream == null) { [EOL]         throw new IllegalArgumentException("Null 'stream' argument."); [EOL]     } [EOL]     if (paint != null) { [EOL]         stream.writeBoolean(false); [EOL]         stream.writeObject(paint.getClass()); [EOL]         if (paint instanceof Serializable) { [EOL]             stream.writeObject(paint); [EOL]         } else if (paint instanceof GradientPaint) { [EOL]             GradientPaint gp = (GradientPaint) paint; [EOL]             stream.writeFloat((float) gp.getPoint1().getX()); [EOL]             stream.writeFloat((float) gp.getPoint1().getY()); [EOL]             stream.writeObject(gp.getColor1()); [EOL]             stream.writeFloat((float) gp.getPoint2().getX()); [EOL]             stream.writeFloat((float) gp.getPoint2().getY()); [EOL]             stream.writeObject(gp.getColor2()); [EOL]             stream.writeBoolean(gp.isCyclic()); [EOL]         } [EOL]     } else { [EOL]         stream.writeBoolean(true); [EOL]     } [EOL] } <line_num>: 151,178
public static Stroke readStroke(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     if (stream == null) { [EOL]         throw new IllegalArgumentException("Null 'stream' argument."); [EOL]     } [EOL]     Stroke result = null; [EOL]     boolean isNull = stream.readBoolean(); [EOL]     if (!isNull) { [EOL]         Class c = (Class) stream.readObject(); [EOL]         if (c.equals(BasicStroke.class)) { [EOL]             float width = stream.readFloat(); [EOL]             int cap = stream.readInt(); [EOL]             int join = stream.readInt(); [EOL]             float miterLimit = stream.readFloat(); [EOL]             float[] dash = (float[]) stream.readObject(); [EOL]             float dashPhase = stream.readFloat(); [EOL]             result = new BasicStroke(width, cap, join, miterLimit, dash, dashPhase); [EOL]         } else { [EOL]             result = (Stroke) stream.readObject(); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 191,217
public static void writeStroke(Stroke stroke, ObjectOutputStream stream) throws IOException { [EOL]     if (stream == null) { [EOL]         throw new IllegalArgumentException("Null 'stream' argument."); [EOL]     } [EOL]     if (stroke != null) { [EOL]         stream.writeBoolean(false); [EOL]         if (stroke instanceof BasicStroke) { [EOL]             BasicStroke s = (BasicStroke) stroke; [EOL]             stream.writeObject(BasicStroke.class); [EOL]             stream.writeFloat(s.getLineWidth()); [EOL]             stream.writeInt(s.getEndCap()); [EOL]             stream.writeInt(s.getLineJoin()); [EOL]             stream.writeFloat(s.getMiterLimit()); [EOL]             stream.writeObject(s.getDashArray()); [EOL]             stream.writeFloat(s.getDashPhase()); [EOL]         } else { [EOL]             stream.writeObject(stroke.getClass()); [EOL]             stream.writeObject(stroke); [EOL]         } [EOL]     } else { [EOL]         stream.writeBoolean(true); [EOL]     } [EOL] } <line_num>: 230,256
public static Shape readShape(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     if (stream == null) { [EOL]         throw new IllegalArgumentException("Null 'stream' argument."); [EOL]     } [EOL]     Shape result = null; [EOL]     boolean isNull = stream.readBoolean(); [EOL]     if (!isNull) { [EOL]         Class c = (Class) stream.readObject(); [EOL]         if (c.equals(Line2D.class)) { [EOL]             double x1 = stream.readDouble(); [EOL]             double y1 = stream.readDouble(); [EOL]             double x2 = stream.readDouble(); [EOL]             double y2 = stream.readDouble(); [EOL]             result = new Line2D.Double(x1, y1, x2, y2); [EOL]         } else if (c.equals(Rectangle2D.class)) { [EOL]             double x = stream.readDouble(); [EOL]             double y = stream.readDouble(); [EOL]             double w = stream.readDouble(); [EOL]             double h = stream.readDouble(); [EOL]             result = new Rectangle2D.Double(x, y, w, h); [EOL]         } else if (c.equals(Ellipse2D.class)) { [EOL]             double x = stream.readDouble(); [EOL]             double y = stream.readDouble(); [EOL]             double w = stream.readDouble(); [EOL]             double h = stream.readDouble(); [EOL]             result = new Ellipse2D.Double(x, y, w, h); [EOL]         } else if (c.equals(Arc2D.class)) { [EOL]             double x = stream.readDouble(); [EOL]             double y = stream.readDouble(); [EOL]             double w = stream.readDouble(); [EOL]             double h = stream.readDouble(); [EOL]             double as = stream.readDouble(); [EOL]             double ae = stream.readDouble(); [EOL]             int at = stream.readInt(); [EOL]             result = new Arc2D.Double(x, y, w, h, as, ae, at); [EOL]         } else if (c.equals(GeneralPath.class)) { [EOL]             GeneralPath gp = new GeneralPath(); [EOL]             float[] args = new float[6]; [EOL]             boolean hasNext = stream.readBoolean(); [EOL]             while (!hasNext) { [EOL]                 int type = stream.readInt(); [EOL]                 for (int i = 0; i < 6; i++) { [EOL]                     args[i] = stream.readFloat(); [EOL]                 } [EOL]                 switch(type) { [EOL]                     case PathIterator.SEG_MOVETO: [EOL]                         gp.moveTo(args[0], args[1]); [EOL]                         break; [EOL]                     case PathIterator.SEG_LINETO: [EOL]                         gp.lineTo(args[0], args[1]); [EOL]                         break; [EOL]                     case PathIterator.SEG_CUBICTO: [EOL]                         gp.curveTo(args[0], args[1], args[2], args[3], args[4], args[5]); [EOL]                         break; [EOL]                     case PathIterator.SEG_QUADTO: [EOL]                         gp.quadTo(args[0], args[1], args[2], args[3]); [EOL]                         break; [EOL]                     case PathIterator.SEG_CLOSE: [EOL]                         gp.closePath(); [EOL]                         break; [EOL]                     default: [EOL]                         throw new RuntimeException("JFreeChart - No path exists"); [EOL]                 } [EOL]                 gp.setWindingRule(stream.readInt()); [EOL]                 hasNext = stream.readBoolean(); [EOL]             } [EOL]             result = gp; [EOL]         } else { [EOL]             result = (Shape) stream.readObject(); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 269,351
public static void writeShape(Shape shape, ObjectOutputStream stream) throws IOException { [EOL]     if (stream == null) { [EOL]         throw new IllegalArgumentException("Null 'stream' argument."); [EOL]     } [EOL]     if (shape != null) { [EOL]         stream.writeBoolean(false); [EOL]         if (shape instanceof Line2D) { [EOL]             Line2D line = (Line2D) shape; [EOL]             stream.writeObject(Line2D.class); [EOL]             stream.writeDouble(line.getX1()); [EOL]             stream.writeDouble(line.getY1()); [EOL]             stream.writeDouble(line.getX2()); [EOL]             stream.writeDouble(line.getY2()); [EOL]         } else if (shape instanceof Rectangle2D) { [EOL]             Rectangle2D rectangle = (Rectangle2D) shape; [EOL]             stream.writeObject(Rectangle2D.class); [EOL]             stream.writeDouble(rectangle.getX()); [EOL]             stream.writeDouble(rectangle.getY()); [EOL]             stream.writeDouble(rectangle.getWidth()); [EOL]             stream.writeDouble(rectangle.getHeight()); [EOL]         } else if (shape instanceof Ellipse2D) { [EOL]             Ellipse2D ellipse = (Ellipse2D) shape; [EOL]             stream.writeObject(Ellipse2D.class); [EOL]             stream.writeDouble(ellipse.getX()); [EOL]             stream.writeDouble(ellipse.getY()); [EOL]             stream.writeDouble(ellipse.getWidth()); [EOL]             stream.writeDouble(ellipse.getHeight()); [EOL]         } else if (shape instanceof Arc2D) { [EOL]             Arc2D arc = (Arc2D) shape; [EOL]             stream.writeObject(Arc2D.class); [EOL]             stream.writeDouble(arc.getX()); [EOL]             stream.writeDouble(arc.getY()); [EOL]             stream.writeDouble(arc.getWidth()); [EOL]             stream.writeDouble(arc.getHeight()); [EOL]             stream.writeDouble(arc.getAngleStart()); [EOL]             stream.writeDouble(arc.getAngleExtent()); [EOL]             stream.writeInt(arc.getArcType()); [EOL]         } else if (shape instanceof GeneralPath) { [EOL]             stream.writeObject(GeneralPath.class); [EOL]             PathIterator pi = shape.getPathIterator(null); [EOL]             float[] args = new float[6]; [EOL]             stream.writeBoolean(pi.isDone()); [EOL]             while (!pi.isDone()) { [EOL]                 int type = pi.currentSegment(args); [EOL]                 stream.writeInt(type); [EOL]                 for (int i = 0; i < 6; i++) { [EOL]                     stream.writeFloat(args[i]); [EOL]                 } [EOL]                 stream.writeInt(pi.getWindingRule()); [EOL]                 pi.next(); [EOL]                 stream.writeBoolean(pi.isDone()); [EOL]             } [EOL]         } else { [EOL]             stream.writeObject(shape.getClass()); [EOL]             stream.writeObject(shape); [EOL]         } [EOL]     } else { [EOL]         stream.writeBoolean(true); [EOL]     } [EOL] } <line_num>: 361,430
public static Point2D readPoint2D(ObjectInputStream stream) throws IOException { [EOL]     if (stream == null) { [EOL]         throw new IllegalArgumentException("Null 'stream' argument."); [EOL]     } [EOL]     Point2D result = null; [EOL]     boolean isNull = stream.readBoolean(); [EOL]     if (!isNull) { [EOL]         double x = stream.readDouble(); [EOL]         double y = stream.readDouble(); [EOL]         result = new Point2D.Double(x, y); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 442,457
public static void writePoint2D(Point2D p, ObjectOutputStream stream) throws IOException { [EOL]     if (stream == null) { [EOL]         throw new IllegalArgumentException("Null 'stream' argument."); [EOL]     } [EOL]     if (p != null) { [EOL]         stream.writeBoolean(false); [EOL]         stream.writeDouble(p.getX()); [EOL]         stream.writeDouble(p.getY()); [EOL]     } else { [EOL]         stream.writeBoolean(true); [EOL]     } [EOL] } <line_num>: 467,481
public static AttributedString readAttributedString(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     if (stream == null) { [EOL]         throw new IllegalArgumentException("Null 'stream' argument."); [EOL]     } [EOL]     AttributedString result = null; [EOL]     boolean isNull = stream.readBoolean(); [EOL]     if (!isNull) { [EOL]         String plainStr = (String) stream.readObject(); [EOL]         result = new AttributedString(plainStr); [EOL]         char c = stream.readChar(); [EOL]         int start = 0; [EOL]         while (c != CharacterIterator.DONE) { [EOL]             int limit = stream.readInt(); [EOL]             Map atts = (Map) stream.readObject(); [EOL]             result.addAttributes(atts, start, limit); [EOL]             start = limit; [EOL]             c = stream.readChar(); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 495,519
public static void writeAttributedString(AttributedString as, ObjectOutputStream stream) throws IOException { [EOL]     if (stream == null) { [EOL]         throw new IllegalArgumentException("Null 'stream' argument."); [EOL]     } [EOL]     if (as != null) { [EOL]         stream.writeBoolean(false); [EOL]         AttributedCharacterIterator aci = as.getIterator(); [EOL]         StringBuffer plainStr = new StringBuffer(); [EOL]         char current = aci.first(); [EOL]         while (current != CharacterIterator.DONE) { [EOL]             plainStr = plainStr.append(current); [EOL]             current = aci.next(); [EOL]         } [EOL]         stream.writeObject(plainStr.toString()); [EOL]         current = aci.first(); [EOL]         int begin = aci.getBeginIndex(); [EOL]         while (current != CharacterIterator.DONE) { [EOL]             stream.writeChar(current); [EOL]             int limit = aci.getRunLimit(); [EOL]             stream.writeInt(limit - begin); [EOL]             Map atts = new HashMap(aci.getAttributes()); [EOL]             stream.writeObject(atts); [EOL]             current = aci.setIndex(limit); [EOL]         } [EOL]         stream.writeChar(CharacterIterator.DONE); [EOL]     } else { [EOL]         stream.writeBoolean(true); [EOL]     } [EOL] } <line_num>: 529,575
public static Image readImage(ObjectInputStream stream) throws IOException { [EOL]     if (stream == null) { [EOL]         throw new IllegalArgumentException("Null 'stream' argument."); [EOL]     } [EOL]     BufferedImage result = null; [EOL]     boolean isNull = stream.readBoolean(); [EOL]     if (!isNull) { [EOL]         result = ImageIO.read(stream); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 592,603
public static void writeImage(Image image, ObjectOutputStream stream) throws IOException { [EOL]     BufferedImage bi = null; [EOL]     if (image instanceof BufferedImage) { [EOL]         bi = (BufferedImage) image; [EOL]     } else { [EOL]         bi = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_ARGB); [EOL]         Graphics2D g2 = bi.createGraphics(); [EOL]         g2.drawImage(image, 0, 0, null); [EOL]         g2.dispose(); [EOL]     } [EOL]     EncoderUtil.writeBufferedImage(bi, ImageFormat.PNG, stream); [EOL] } <line_num>: 615,629
