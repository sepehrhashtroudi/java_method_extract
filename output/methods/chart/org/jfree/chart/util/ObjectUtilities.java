private ObjectUtilities() { [EOL] } <line_num>: 89,90
public static String getClassLoaderSource() { [EOL]     return classLoaderSource; [EOL] } <line_num>: 98,100
public static void setClassLoaderSource(final String classLoaderSource) { [EOL]     ObjectUtilities.classLoaderSource = classLoaderSource; [EOL] } <line_num>: 112,114
public static boolean equal(final Object o1, final Object o2) { [EOL]     if (o1 == o2) { [EOL]         return true; [EOL]     } [EOL]     if (o1 != null) { [EOL]         return o1.equals(o2); [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 124,134
public static int hashCode(final Object object) { [EOL]     int result = 0; [EOL]     if (object != null) { [EOL]         result = object.hashCode(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 144,150
public static Object clone(final Object object) throws CloneNotSupportedException { [EOL]     if (object == null) { [EOL]         throw new IllegalArgumentException("Null 'object' argument."); [EOL]     } [EOL]     if (object instanceof PublicCloneable) { [EOL]         final PublicCloneable pc = (PublicCloneable) object; [EOL]         return pc.clone(); [EOL]     } else { [EOL]         try { [EOL]             final Method method = object.getClass().getMethod("clone", (Class[]) null); [EOL]             if (Modifier.isPublic(method.getModifiers())) { [EOL]                 return method.invoke(object, (Object[]) null); [EOL]             } [EOL]         } catch (NoSuchMethodException e) { [EOL]             e.printStackTrace(); [EOL]         } catch (IllegalAccessException e) { [EOL]             e.printStackTrace(); [EOL]         } catch (InvocationTargetException e) { [EOL]             e.printStackTrace(); [EOL]         } [EOL]     } [EOL]     throw new CloneNotSupportedException("Failed to clone."); [EOL] } <line_num>: 160,188
public static Collection deepClone(final Collection collection) throws CloneNotSupportedException { [EOL]     if (collection == null) { [EOL]         throw new IllegalArgumentException("Null 'collection' argument."); [EOL]     } [EOL]     final Collection result = (Collection) ObjectUtilities.clone(collection); [EOL]     result.clear(); [EOL]     final Iterator iterator = collection.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         final Object item = iterator.next(); [EOL]         if (item != null) { [EOL]             result.add(clone(item)); [EOL]         } else { [EOL]             result.add(null); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 200,223
public synchronized static void setClassLoader(final ClassLoader classLoader) { [EOL]     ObjectUtilities.classLoader = classLoader; [EOL] } <line_num>: 230,233
public static ClassLoader getClassLoader() { [EOL]     return classLoader; [EOL] } <line_num>: 240,242
public synchronized static ClassLoader getClassLoader(final Class c) { [EOL]     if (classLoader != null) { [EOL]         return classLoader; [EOL]     } [EOL]     if ("ThreadContext".equals(classLoaderSource)) { [EOL]         final ClassLoader threadLoader = Thread.currentThread().getContextClassLoader(); [EOL]         if (threadLoader != null) { [EOL]             return threadLoader; [EOL]         } [EOL]     } [EOL]     final ClassLoader applicationCL = c.getClassLoader(); [EOL]     if (applicationCL == null) { [EOL]         return ClassLoader.getSystemClassLoader(); [EOL]     } else { [EOL]         return applicationCL; [EOL]     } [EOL] } <line_num>: 254,274
public static URL getResource(final String name, final Class c) { [EOL]     final ClassLoader cl = getClassLoader(c); [EOL]     if (cl == null) { [EOL]         return null; [EOL]     } [EOL]     return cl.getResource(name); [EOL] } <line_num>: 284,290
public static URL getResourceRelative(final String name, final Class c) { [EOL]     final ClassLoader cl = getClassLoader(c); [EOL]     final String cname = convertName(name, c); [EOL]     if (cl == null) { [EOL]         return null; [EOL]     } [EOL]     return cl.getResource(cname); [EOL] } <line_num>: 299,306
private static String convertName(final String name, Class c) { [EOL]     if (name.startsWith("/")) { [EOL]         return name.substring(1); [EOL]     } [EOL]     while (c.isArray()) { [EOL]         c = c.getComponentType(); [EOL]     } [EOL]     final String baseName = c.getName(); [EOL]     final int index = baseName.lastIndexOf('.'); [EOL]     if (index == -1) { [EOL]         return name; [EOL]     } [EOL]     final String pkgName = baseName.substring(0, index); [EOL]     return pkgName.replace('.', '/') + "/" + name; [EOL] } <line_num>: 318,337
public static InputStream getResourceAsStream(final String name, final Class context) { [EOL]     final URL url = getResource(name, context); [EOL]     if (url == null) { [EOL]         return null; [EOL]     } [EOL]     try { [EOL]         return url.openStream(); [EOL]     } catch (IOException e) { [EOL]         return null; [EOL]     } [EOL] } <line_num>: 347,360
public static InputStream getResourceRelativeAsStream(final String name, final Class context) { [EOL]     final URL url = getResourceRelative(name, context); [EOL]     if (url == null) { [EOL]         return null; [EOL]     } [EOL]     try { [EOL]         return url.openStream(); [EOL]     } catch (IOException e) { [EOL]         return null; [EOL]     } [EOL] } <line_num>: 370,383
public static Object loadAndInstantiate(final String className, final Class source) { [EOL]     try { [EOL]         final ClassLoader loader = getClassLoader(source); [EOL]         final Class c = loader.loadClass(className); [EOL]         return c.newInstance(); [EOL]     } catch (Exception e) { [EOL]         return null; [EOL]     } [EOL] } <line_num>: 393,403
public static Object loadAndInstantiate(String className, Class source, Class type) { [EOL]     try { [EOL]         ClassLoader loader = getClassLoader(source); [EOL]         Class c = loader.loadClass(className); [EOL]         if (type.isAssignableFrom(c)) { [EOL]             return c.newInstance(); [EOL]         } [EOL]     } catch (Exception e) { [EOL]         return null; [EOL]     } [EOL]     return null; [EOL] } <line_num>: 417,431
public static boolean isJDK14() { [EOL]     ClassLoader loader = getClassLoader(ObjectUtilities.class); [EOL]     if (loader != null) { [EOL]         try { [EOL]             loader.loadClass("java.util.RandomAccess"); [EOL]             return true; [EOL]         } catch (ClassNotFoundException e) { [EOL]             return false; [EOL]         } catch (Exception e) { [EOL]         } [EOL]     } [EOL]     try { [EOL]         String version = System.getProperty("java.vm.specification.version"); [EOL]         if (version == null) { [EOL]             return false; [EOL]         } [EOL]         String[] versions = parseVersions(version); [EOL]         String[] target = new String[] { "1", "4" }; [EOL]         return (ArrayUtilities.compareVersionArrays(versions, target) >= 0); [EOL]     } catch (Exception e) { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 438,469
private static String[] parseVersions(String version) { [EOL]     if (version == null) { [EOL]         return new String[0]; [EOL]     } [EOL]     ArrayList versions = new ArrayList(); [EOL]     StringTokenizer strtok = new StringTokenizer(version, "."); [EOL]     while (strtok.hasMoreTokens()) { [EOL]         versions.add(strtok.nextToken()); [EOL]     } [EOL]     return (String[]) versions.toArray(new String[versions.size()]); [EOL] } <line_num>: 471,482
