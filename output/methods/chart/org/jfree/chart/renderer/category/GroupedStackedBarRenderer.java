public GroupedStackedBarRenderer() { [EOL]     super(); [EOL]     this.seriesToGroupMap = new KeyToGroupMap(); [EOL] } <line_num>: 92,95
public void setSeriesToGroupMap(KeyToGroupMap map) { [EOL]     if (map == null) { [EOL]         throw new IllegalArgumentException("Null 'map' argument."); [EOL]     } [EOL]     this.seriesToGroupMap = map; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 103,109
public Range findRangeBounds(CategoryDataset dataset) { [EOL]     if (dataset == null) { [EOL]         return null; [EOL]     } [EOL]     Range r = DatasetUtilities.findStackedRangeBounds(dataset, this.seriesToGroupMap); [EOL]     return r; [EOL] } <line_num>: 120,127
protected void calculateBarWidth(CategoryPlot plot, Rectangle2D dataArea, int rendererIndex, CategoryItemRendererState state) { [EOL]     CategoryAxis xAxis = plot.getDomainAxisForDataset(rendererIndex); [EOL]     CategoryDataset data = plot.getDataset(rendererIndex); [EOL]     if (data != null) { [EOL]         PlotOrientation orientation = plot.getOrientation(); [EOL]         double space = 0.0; [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             space = dataArea.getHeight(); [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             space = dataArea.getWidth(); [EOL]         } [EOL]         double maxWidth = space * getMaximumBarWidth(); [EOL]         int groups = this.seriesToGroupMap.getGroupCount(); [EOL]         int categories = data.getColumnCount(); [EOL]         int columns = groups * categories; [EOL]         double categoryMargin = 0.0; [EOL]         double itemMargin = 0.0; [EOL]         if (categories > 1) { [EOL]             categoryMargin = xAxis.getCategoryMargin(); [EOL]         } [EOL]         if (groups > 1) { [EOL]             itemMargin = getItemMargin(); [EOL]         } [EOL]         double used = space * (1 - xAxis.getLowerMargin() - xAxis.getUpperMargin() - categoryMargin - itemMargin); [EOL]         if (columns > 0) { [EOL]             state.setBarWidth(Math.min(used / columns, maxWidth)); [EOL]         } else { [EOL]             state.setBarWidth(Math.min(used, maxWidth)); [EOL]         } [EOL]     } [EOL] } <line_num>: 139,180
protected double calculateBarW0(CategoryPlot plot, PlotOrientation orientation, Rectangle2D dataArea, CategoryAxis domainAxis, CategoryItemRendererState state, int row, int column) { [EOL]     double space = 0.0; [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         space = dataArea.getHeight(); [EOL]     } else { [EOL]         space = dataArea.getWidth(); [EOL]     } [EOL]     double barW0 = domainAxis.getCategoryStart(column, getColumnCount(), dataArea, plot.getDomainAxisEdge()); [EOL]     int groupCount = this.seriesToGroupMap.getGroupCount(); [EOL]     int groupIndex = this.seriesToGroupMap.getGroupIndex(this.seriesToGroupMap.getGroup(plot.getDataset(plot.getIndexOf(this)).getRowKey(row))); [EOL]     int categoryCount = getColumnCount(); [EOL]     if (groupCount > 1) { [EOL]         double groupGap = space * getItemMargin() / (categoryCount * (groupCount - 1)); [EOL]         double groupW = calculateSeriesWidth(space, domainAxis, categoryCount, groupCount); [EOL]         barW0 = barW0 + groupIndex * (groupW + groupGap) + (groupW / 2.0) - (state.getBarWidth() / 2.0); [EOL]     } else { [EOL]         barW0 = domainAxis.getCategoryMiddle(column, getColumnCount(), dataArea, plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0; [EOL]     } [EOL]     return barW0; [EOL] } <line_num>: 197,233
public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, int pass) { [EOL]     Number dataValue = dataset.getValue(row, column); [EOL]     if (dataValue == null) { [EOL]         return; [EOL]     } [EOL]     double value = dataValue.doubleValue(); [EOL]     Comparable group = this.seriesToGroupMap.getGroup(dataset.getRowKey(row)); [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     double barW0 = calculateBarW0(plot, orientation, dataArea, domainAxis, state, row, column); [EOL]     double positiveBase = 0.0; [EOL]     double negativeBase = 0.0; [EOL]     for (int i = 0; i < row; i++) { [EOL]         if (group.equals(this.seriesToGroupMap.getGroup(dataset.getRowKey(i)))) { [EOL]             Number v = dataset.getValue(i, column); [EOL]             if (v != null) { [EOL]                 double d = v.doubleValue(); [EOL]                 if (d > 0) { [EOL]                     positiveBase = positiveBase + d; [EOL]                 } else { [EOL]                     negativeBase = negativeBase + d; [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     double translatedBase; [EOL]     double translatedValue; [EOL]     boolean positive = (value > 0.0); [EOL]     boolean inverted = rangeAxis.isInverted(); [EOL]     RectangleEdge barBase; [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         if (positive && inverted || !positive && !inverted) { [EOL]             barBase = RectangleEdge.RIGHT; [EOL]         } else { [EOL]             barBase = RectangleEdge.LEFT; [EOL]         } [EOL]     } else { [EOL]         if (positive && !inverted || !positive && inverted) { [EOL]             barBase = RectangleEdge.BOTTOM; [EOL]         } else { [EOL]             barBase = RectangleEdge.TOP; [EOL]         } [EOL]     } [EOL]     RectangleEdge location = plot.getRangeAxisEdge(); [EOL]     if (value > 0.0) { [EOL]         translatedBase = rangeAxis.valueToJava2D(positiveBase, dataArea, location); [EOL]         translatedValue = rangeAxis.valueToJava2D(positiveBase + value, dataArea, location); [EOL]     } else { [EOL]         translatedBase = rangeAxis.valueToJava2D(negativeBase, dataArea, location); [EOL]         translatedValue = rangeAxis.valueToJava2D(negativeBase + value, dataArea, location); [EOL]     } [EOL]     double barL0 = Math.min(translatedBase, translatedValue); [EOL]     double barLength = Math.max(Math.abs(translatedValue - translatedBase), getMinimumBarLength()); [EOL]     Rectangle2D bar = null; [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         bar = new Rectangle2D.Double(barL0, barW0, barLength, state.getBarWidth()); [EOL]     } else { [EOL]         bar = new Rectangle2D.Double(barW0, barL0, state.getBarWidth(), barLength); [EOL]     } [EOL]     getBarPainter().paintBar(g2, this, row, column, selected, bar, barBase); [EOL]     CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column, selected); [EOL]     if (generator != null && isItemLabelVisible(row, column, selected)) { [EOL]         drawItemLabelForBar(g2, plot, dataset, row, column, selected, generator, bar, (value < 0.0)); [EOL]     } [EOL]     EntityCollection entities = state.getEntityCollection(); [EOL]     if (entities != null) { [EOL]         addEntity(entities, bar, dataset, row, column, selected); [EOL]     } [EOL] } <line_num>: 249,349
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof GroupedStackedBarRenderer)) { [EOL]         return false; [EOL]     } [EOL]     GroupedStackedBarRenderer that = (GroupedStackedBarRenderer) obj; [EOL]     if (!this.seriesToGroupMap.equals(that.seriesToGroupMap)) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 358,370
