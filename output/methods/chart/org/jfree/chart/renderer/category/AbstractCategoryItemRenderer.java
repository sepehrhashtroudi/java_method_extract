protected AbstractCategoryItemRenderer() { [EOL]     this.itemLabelGeneratorList = new ObjectList(); [EOL]     this.toolTipGeneratorList = new ObjectList(); [EOL]     this.urlGeneratorList = new ObjectList(); [EOL]     this.legendItemLabelGenerator = new StandardCategorySeriesLabelGenerator(); [EOL]     this.backgroundAnnotations = new ArrayList(); [EOL]     this.foregroundAnnotations = new ArrayList(); [EOL] } <line_num>: 249,257
public int getPassCount() { [EOL]     return 1; [EOL] } <line_num>: 266,268
public CategoryPlot getPlot() { [EOL]     return this.plot; [EOL] } <line_num>: 279,281
public void setPlot(CategoryPlot plot) { [EOL]     if (plot == null) { [EOL]         throw new IllegalArgumentException("Null 'plot' argument."); [EOL]     } [EOL]     this.plot = plot; [EOL] } <line_num>: 292,297
public CategoryItemLabelGenerator getItemLabelGenerator(int row, int column, boolean selected) { [EOL]     CategoryItemLabelGenerator generator = (CategoryItemLabelGenerator) this.itemLabelGeneratorList.get(row); [EOL]     if (generator == null) { [EOL]         generator = this.baseItemLabelGenerator; [EOL]     } [EOL]     return generator; [EOL] } <line_num>: 315,323
public CategoryItemLabelGenerator getSeriesItemLabelGenerator(int series) { [EOL]     return (CategoryItemLabelGenerator) this.itemLabelGeneratorList.get(series); [EOL] } <line_num>: 334,337
public void setSeriesItemLabelGenerator(int series, CategoryItemLabelGenerator generator) { [EOL]     setSeriesItemLabelGenerator(series, generator, true); [EOL] } <line_num>: 348,351
public void setSeriesItemLabelGenerator(int series, CategoryItemLabelGenerator generator, boolean notify) { [EOL]     this.itemLabelGeneratorList.set(series, generator); [EOL]     if (notify) { [EOL]         notifyListeners(new RendererChangeEvent(this)); [EOL]     } [EOL] } <line_num>: 365,371
public CategoryItemLabelGenerator getBaseItemLabelGenerator() { [EOL]     return this.baseItemLabelGenerator; [EOL] } <line_num>: 380,382
public void setBaseItemLabelGenerator(CategoryItemLabelGenerator generator) { [EOL]     setBaseItemLabelGenerator(generator, true); [EOL] } <line_num>: 392,395
public void setBaseItemLabelGenerator(CategoryItemLabelGenerator generator, boolean notify) { [EOL]     this.baseItemLabelGenerator = generator; [EOL]     if (notify) { [EOL]         notifyListeners(new RendererChangeEvent(this)); [EOL]     } [EOL] } <line_num>: 408,414
public CategoryToolTipGenerator getToolTipGenerator(int row, int column, boolean selected) { [EOL]     CategoryToolTipGenerator result = null; [EOL]     result = getSeriesToolTipGenerator(row); [EOL]     if (result == null) { [EOL]         result = this.baseToolTipGenerator; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 431,440
public CategoryToolTipGenerator getSeriesToolTipGenerator(int series) { [EOL]     return (CategoryToolTipGenerator) this.toolTipGeneratorList.get(series); [EOL] } <line_num>: 452,454
public void setSeriesToolTipGenerator(int series, CategoryToolTipGenerator generator) { [EOL]     setSeriesToolTipGenerator(series, generator, true); [EOL] } <line_num>: 465,468
public void setSeriesToolTipGenerator(int series, CategoryToolTipGenerator generator, boolean notify) { [EOL]     this.toolTipGeneratorList.set(series, generator); [EOL]     if (notify) { [EOL]         notifyListeners(new RendererChangeEvent(this)); [EOL]     } [EOL] } <line_num>: 483,489
public CategoryToolTipGenerator getBaseToolTipGenerator() { [EOL]     return this.baseToolTipGenerator; [EOL] } <line_num>: 498,500
public void setBaseToolTipGenerator(CategoryToolTipGenerator generator) { [EOL]     setBaseToolTipGenerator(generator, true); [EOL] } <line_num>: 510,512
public void setBaseToolTipGenerator(CategoryToolTipGenerator generator, boolean notify) { [EOL]     this.baseToolTipGenerator = generator; [EOL]     if (notify) { [EOL]         notifyListeners(new RendererChangeEvent(this)); [EOL]     } [EOL] } <line_num>: 525,531
public CategoryURLGenerator getURLGenerator(int row, int column, boolean selected) { [EOL]     CategoryURLGenerator generator = (CategoryURLGenerator) this.urlGeneratorList.get(row); [EOL]     if (generator == null) { [EOL]         generator = this.baseURLGenerator; [EOL]     } [EOL]     return generator; [EOL] } <line_num>: 546,554
public CategoryURLGenerator getSeriesURLGenerator(int series) { [EOL]     return (CategoryURLGenerator) this.urlGeneratorList.get(series); [EOL] } <line_num>: 565,567
public void setSeriesURLGenerator(int series, CategoryURLGenerator generator) { [EOL]     setSeriesURLGenerator(series, generator, true); [EOL] } <line_num>: 578,581
public void setSeriesURLGenerator(int series, CategoryURLGenerator generator, boolean notify) { [EOL]     this.urlGeneratorList.set(series, generator); [EOL]     if (notify) { [EOL]         notifyListeners(new RendererChangeEvent(this)); [EOL]     } [EOL] } <line_num>: 595,601
public CategoryURLGenerator getBaseURLGenerator() { [EOL]     return this.baseURLGenerator; [EOL] } <line_num>: 610,612
public void setBaseURLGenerator(CategoryURLGenerator generator) { [EOL]     setBaseURLGenerator(generator, true); [EOL] } <line_num>: 621,623
public void setBaseURLGenerator(CategoryURLGenerator generator, boolean notify) { [EOL]     this.baseURLGenerator = generator; [EOL]     if (notify) { [EOL]         notifyListeners(new RendererChangeEvent(this)); [EOL]     } [EOL] } <line_num>: 635,641
public void addAnnotation(CategoryAnnotation annotation) { [EOL]     addAnnotation(annotation, Layer.FOREGROUND); [EOL] } <line_num>: 654,657
public void addAnnotation(CategoryAnnotation annotation, Layer layer) { [EOL]     if (annotation == null) { [EOL]         throw new IllegalArgumentException("Null 'annotation' argument."); [EOL]     } [EOL]     if (layer.equals(Layer.FOREGROUND)) { [EOL]         this.foregroundAnnotations.add(annotation); [EOL]         notifyListeners(new RendererChangeEvent(this)); [EOL]     } else if (layer.equals(Layer.BACKGROUND)) { [EOL]         this.backgroundAnnotations.add(annotation); [EOL]         notifyListeners(new RendererChangeEvent(this)); [EOL]     } else { [EOL]         throw new RuntimeException("Unknown layer."); [EOL]     } [EOL] } <line_num>: 667,683
public boolean removeAnnotation(CategoryAnnotation annotation) { [EOL]     boolean removed = this.foregroundAnnotations.remove(annotation); [EOL]     removed = removed & this.backgroundAnnotations.remove(annotation); [EOL]     notifyListeners(new RendererChangeEvent(this)); [EOL]     return removed; [EOL] } <line_num>: 696,701
public void removeAnnotations() { [EOL]     this.foregroundAnnotations.clear(); [EOL]     this.backgroundAnnotations.clear(); [EOL]     notifyListeners(new RendererChangeEvent(this)); [EOL] } <line_num>: 709,713
public CategorySeriesLabelGenerator getLegendItemLabelGenerator() { [EOL]     return this.legendItemLabelGenerator; [EOL] } <line_num>: 722,724
public void setLegendItemLabelGenerator(CategorySeriesLabelGenerator generator) { [EOL]     if (generator == null) { [EOL]         throw new IllegalArgumentException("Null 'generator' argument."); [EOL]     } [EOL]     this.legendItemLabelGenerator = generator; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 734,741
public CategorySeriesLabelGenerator getLegendItemToolTipGenerator() { [EOL]     return this.legendItemToolTipGenerator; [EOL] } <line_num>: 750,752
public void setLegendItemToolTipGenerator(CategorySeriesLabelGenerator generator) { [EOL]     this.legendItemToolTipGenerator = generator; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 762,766
public CategorySeriesLabelGenerator getLegendItemURLGenerator() { [EOL]     return this.legendItemURLGenerator; [EOL] } <line_num>: 775,777
public void setLegendItemURLGenerator(CategorySeriesLabelGenerator generator) { [EOL]     this.legendItemURLGenerator = generator; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 787,791
public int getRowCount() { [EOL]     return this.rowCount; [EOL] } <line_num>: 799,801
public int getColumnCount() { [EOL]     return this.columnCount; [EOL] } <line_num>: 809,811
protected CategoryItemRendererState createState(PlotRenderingInfo info) { [EOL]     CategoryItemRendererState state = new CategoryItemRendererState(info); [EOL]     int[] visibleSeriesTemp = new int[this.rowCount]; [EOL]     int visibleSeriesCount = 0; [EOL]     for (int row = 0; row < this.rowCount; row++) { [EOL]         if (isSeriesVisible(row)) { [EOL]             visibleSeriesTemp[visibleSeriesCount] = row; [EOL]             visibleSeriesCount++; [EOL]         } [EOL]     } [EOL]     int[] visibleSeries = new int[visibleSeriesCount]; [EOL]     System.arraycopy(visibleSeriesTemp, 0, visibleSeries, 0, visibleSeriesCount); [EOL]     state.setVisibleSeriesArray(visibleSeries); [EOL]     return state; [EOL] } <line_num>: 825,840
public CategoryItemRendererState initialise(Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryDataset dataset, PlotRenderingInfo info) { [EOL]     setPlot(plot); [EOL]     if (dataset != null) { [EOL]         this.rowCount = dataset.getRowCount(); [EOL]         this.columnCount = dataset.getColumnCount(); [EOL]     } else { [EOL]         this.rowCount = 0; [EOL]         this.columnCount = 0; [EOL]     } [EOL]     CategoryItemRendererState state = createState(info); [EOL]     CategoryDatasetSelectionState selectionState = null; [EOL]     if (dataset instanceof SelectableCategoryDataset) { [EOL]         SelectableCategoryDataset scd = (SelectableCategoryDataset) dataset; [EOL]         selectionState = scd.getSelectionState(); [EOL]     } [EOL]     if (selectionState == null && info != null) { [EOL]         ChartRenderingInfo cri = info.getOwner(); [EOL]         if (cri != null) { [EOL]             RenderingSource rs = cri.getRenderingSource(); [EOL]             selectionState = (CategoryDatasetSelectionState) rs.getSelectionState(dataset); [EOL]         } [EOL]     } [EOL]     state.setSelectionState(selectionState); [EOL]     return state; [EOL] } <line_num>: 856,890
public Range findRangeBounds(CategoryDataset dataset) { [EOL]     return findRangeBounds(dataset, false); [EOL] } <line_num>: 901,903
protected Range findRangeBounds(CategoryDataset dataset, boolean includeInterval) { [EOL]     if (dataset == null) { [EOL]         return null; [EOL]     } [EOL]     if (getDataBoundsIncludesVisibleSeriesOnly()) { [EOL]         List visibleSeriesKeys = new ArrayList(); [EOL]         int seriesCount = dataset.getRowCount(); [EOL]         for (int s = 0; s < seriesCount; s++) { [EOL]             if (isSeriesVisible(s)) { [EOL]                 visibleSeriesKeys.add(dataset.getRowKey(s)); [EOL]             } [EOL]         } [EOL]         return DatasetUtilities.findRangeBounds(dataset, visibleSeriesKeys, includeInterval); [EOL]     } else { [EOL]         return DatasetUtilities.findRangeBounds(dataset, includeInterval); [EOL]     } [EOL] } <line_num>: 917,936
public double getItemMiddle(Comparable rowKey, Comparable columnKey, CategoryDataset dataset, CategoryAxis axis, Rectangle2D area, RectangleEdge edge) { [EOL]     return axis.getCategoryMiddle(columnKey, dataset.getColumnKeys(), area, edge); [EOL] } <line_num>: 952,957
public void drawBackground(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea) { [EOL]     plot.drawBackground(g2, dataArea); [EOL] } <line_num>: 968,974
public void drawOutline(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea) { [EOL]     plot.drawOutline(g2, dataArea); [EOL] } <line_num>: 985,991
public void drawDomainLine(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea, double value, Paint paint, Stroke stroke) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' argument."); [EOL]     } [EOL]     Line2D line = null; [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         line = new Line2D.Double(dataArea.getMinX(), value, dataArea.getMaxX(), value); [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         line = new Line2D.Double(value, dataArea.getMinY(), value, dataArea.getMaxY()); [EOL]     } [EOL]     g2.setPaint(paint); [EOL]     g2.setStroke(stroke); [EOL]     g2.draw(line); [EOL] } <line_num>: 1013,1038
public void drawRangeLine(Graphics2D g2, CategoryPlot plot, ValueAxis axis, Rectangle2D dataArea, double value, Paint paint, Stroke stroke) { [EOL]     Range range = axis.getRange(); [EOL]     if (!range.contains(value)) { [EOL]         return; [EOL]     } [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     Line2D line = null; [EOL]     double v = axis.valueToJava2D(value, dataArea, plot.getRangeAxisEdge()); [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         line = new Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY()); [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         line = new Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v); [EOL]     } [EOL]     g2.setPaint(paint); [EOL]     g2.setStroke(stroke); [EOL]     g2.draw(line); [EOL] } <line_num>: 1056,1080
public void drawDomainMarker(Graphics2D g2, CategoryPlot plot, CategoryAxis axis, CategoryMarker marker, Rectangle2D dataArea) { [EOL]     Comparable category = marker.getKey(); [EOL]     CategoryDataset dataset = plot.getDataset(plot.getIndexOf(this)); [EOL]     int columnIndex = dataset.getColumnIndex(category); [EOL]     if (columnIndex < 0) { [EOL]         return; [EOL]     } [EOL]     final Composite savedComposite = g2.getComposite(); [EOL]     g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, marker.getAlpha())); [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     Rectangle2D bounds = null; [EOL]     if (marker.getDrawAsLine()) { [EOL]         double v = axis.getCategoryMiddle(columnIndex, dataset.getColumnCount(), dataArea, plot.getDomainAxisEdge()); [EOL]         Line2D line = null; [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             line = new Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v); [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             line = new Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY()); [EOL]         } [EOL]         g2.setPaint(marker.getPaint()); [EOL]         g2.setStroke(marker.getStroke()); [EOL]         g2.draw(line); [EOL]         bounds = line.getBounds2D(); [EOL]     } else { [EOL]         double v0 = axis.getCategoryStart(columnIndex, dataset.getColumnCount(), dataArea, plot.getDomainAxisEdge()); [EOL]         double v1 = axis.getCategoryEnd(columnIndex, dataset.getColumnCount(), dataArea, plot.getDomainAxisEdge()); [EOL]         Rectangle2D area = null; [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             area = new Rectangle2D.Double(dataArea.getMinX(), v0, dataArea.getWidth(), (v1 - v0)); [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             area = new Rectangle2D.Double(v0, dataArea.getMinY(), (v1 - v0), dataArea.getHeight()); [EOL]         } [EOL]         g2.setPaint(marker.getPaint()); [EOL]         g2.fill(area); [EOL]         bounds = area; [EOL]     } [EOL]     String label = marker.getLabel(); [EOL]     RectangleAnchor anchor = marker.getLabelAnchor(); [EOL]     if (label != null) { [EOL]         Font labelFont = marker.getLabelFont(); [EOL]         g2.setFont(labelFont); [EOL]         g2.setPaint(marker.getLabelPaint()); [EOL]         Point2D coordinates = calculateDomainMarkerTextAnchorPoint(g2, orientation, dataArea, bounds, marker.getLabelOffset(), marker.getLabelOffsetType(), anchor); [EOL]         TextUtilities.drawAlignedString(label, g2, (float) coordinates.getX(), (float) coordinates.getY(), marker.getLabelTextAnchor()); [EOL]     } [EOL]     g2.setComposite(savedComposite); [EOL] } <line_num>: 1094,1166
public void drawRangeMarker(Graphics2D g2, CategoryPlot plot, ValueAxis axis, Marker marker, Rectangle2D dataArea) { [EOL]     if (marker instanceof ValueMarker) { [EOL]         ValueMarker vm = (ValueMarker) marker; [EOL]         double value = vm.getValue(); [EOL]         Range range = axis.getRange(); [EOL]         if (!range.contains(value)) { [EOL]             return; [EOL]         } [EOL]         final Composite savedComposite = g2.getComposite(); [EOL]         g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, marker.getAlpha())); [EOL]         PlotOrientation orientation = plot.getOrientation(); [EOL]         double v = axis.valueToJava2D(value, dataArea, plot.getRangeAxisEdge()); [EOL]         Line2D line = null; [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             line = new Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY()); [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             line = new Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v); [EOL]         } [EOL]         g2.setPaint(marker.getPaint()); [EOL]         g2.setStroke(marker.getStroke()); [EOL]         g2.draw(line); [EOL]         String label = marker.getLabel(); [EOL]         RectangleAnchor anchor = marker.getLabelAnchor(); [EOL]         if (label != null) { [EOL]             Font labelFont = marker.getLabelFont(); [EOL]             g2.setFont(labelFont); [EOL]             g2.setPaint(marker.getLabelPaint()); [EOL]             Point2D coordinates = calculateRangeMarkerTextAnchorPoint(g2, orientation, dataArea, line.getBounds2D(), marker.getLabelOffset(), LengthAdjustmentType.EXPAND, anchor); [EOL]             TextUtilities.drawAlignedString(label, g2, (float) coordinates.getX(), (float) coordinates.getY(), marker.getLabelTextAnchor()); [EOL]         } [EOL]         g2.setComposite(savedComposite); [EOL]     } else if (marker instanceof IntervalMarker) { [EOL]         IntervalMarker im = (IntervalMarker) marker; [EOL]         double start = im.getStartValue(); [EOL]         double end = im.getEndValue(); [EOL]         Range range = axis.getRange(); [EOL]         if (!(range.intersects(start, end))) { [EOL]             return; [EOL]         } [EOL]         final Composite savedComposite = g2.getComposite(); [EOL]         g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, marker.getAlpha())); [EOL]         double start2d = axis.valueToJava2D(start, dataArea, plot.getRangeAxisEdge()); [EOL]         double end2d = axis.valueToJava2D(end, dataArea, plot.getRangeAxisEdge()); [EOL]         double low = Math.min(start2d, end2d); [EOL]         double high = Math.max(start2d, end2d); [EOL]         PlotOrientation orientation = plot.getOrientation(); [EOL]         Rectangle2D rect = null; [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             low = Math.max(low, dataArea.getMinX()); [EOL]             high = Math.min(high, dataArea.getMaxX()); [EOL]             rect = new Rectangle2D.Double(low, dataArea.getMinY(), high - low, dataArea.getHeight()); [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             low = Math.max(low, dataArea.getMinY()); [EOL]             high = Math.min(high, dataArea.getMaxY()); [EOL]             rect = new Rectangle2D.Double(dataArea.getMinX(), low, dataArea.getWidth(), high - low); [EOL]         } [EOL]         Paint p = marker.getPaint(); [EOL]         if (p instanceof GradientPaint) { [EOL]             GradientPaint gp = (GradientPaint) p; [EOL]             GradientPaintTransformer t = im.getGradientPaintTransformer(); [EOL]             if (t != null) { [EOL]                 gp = t.transform(gp, rect); [EOL]             } [EOL]             g2.setPaint(gp); [EOL]         } else { [EOL]             g2.setPaint(p); [EOL]         } [EOL]         g2.fill(rect); [EOL]         if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) { [EOL]             if (orientation == PlotOrientation.VERTICAL) { [EOL]                 Line2D line = new Line2D.Double(); [EOL]                 double x0 = dataArea.getMinX(); [EOL]                 double x1 = dataArea.getMaxX(); [EOL]                 g2.setPaint(im.getOutlinePaint()); [EOL]                 g2.setStroke(im.getOutlineStroke()); [EOL]                 if (range.contains(start)) { [EOL]                     line.setLine(x0, start2d, x1, start2d); [EOL]                     g2.draw(line); [EOL]                 } [EOL]                 if (range.contains(end)) { [EOL]                     line.setLine(x0, end2d, x1, end2d); [EOL]                     g2.draw(line); [EOL]                 } [EOL]             } else { [EOL]                 Line2D line = new Line2D.Double(); [EOL]                 double y0 = dataArea.getMinY(); [EOL]                 double y1 = dataArea.getMaxY(); [EOL]                 g2.setPaint(im.getOutlinePaint()); [EOL]                 g2.setStroke(im.getOutlineStroke()); [EOL]                 if (range.contains(start)) { [EOL]                     line.setLine(start2d, y0, start2d, y1); [EOL]                     g2.draw(line); [EOL]                 } [EOL]                 if (range.contains(end)) { [EOL]                     line.setLine(end2d, y0, end2d, y1); [EOL]                     g2.draw(line); [EOL]                 } [EOL]             } [EOL]         } [EOL]         String label = marker.getLabel(); [EOL]         RectangleAnchor anchor = marker.getLabelAnchor(); [EOL]         if (label != null) { [EOL]             Font labelFont = marker.getLabelFont(); [EOL]             g2.setFont(labelFont); [EOL]             g2.setPaint(marker.getLabelPaint()); [EOL]             Point2D coordinates = calculateRangeMarkerTextAnchorPoint(g2, orientation, dataArea, rect, marker.getLabelOffset(), marker.getLabelOffsetType(), anchor); [EOL]             TextUtilities.drawAlignedString(label, g2, (float) coordinates.getX(), (float) coordinates.getY(), marker.getLabelTextAnchor()); [EOL]         } [EOL]         g2.setComposite(savedComposite); [EOL]     } [EOL] } <line_num>: 1180,1334
protected Point2D calculateDomainMarkerTextAnchorPoint(Graphics2D g2, PlotOrientation orientation, Rectangle2D dataArea, Rectangle2D markerArea, RectangleInsets markerOffset, LengthAdjustmentType labelOffsetType, RectangleAnchor anchor) { [EOL]     Rectangle2D anchorRect = null; [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         anchorRect = markerOffset.createAdjustedRectangle(markerArea, LengthAdjustmentType.CONTRACT, labelOffsetType); [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         anchorRect = markerOffset.createAdjustedRectangle(markerArea, labelOffsetType, LengthAdjustmentType.CONTRACT); [EOL]     } [EOL]     return RectangleAnchor.coordinates(anchorRect, anchor); [EOL] } <line_num>: 1350,1369
protected Point2D calculateRangeMarkerTextAnchorPoint(Graphics2D g2, PlotOrientation orientation, Rectangle2D dataArea, Rectangle2D markerArea, RectangleInsets markerOffset, LengthAdjustmentType labelOffsetType, RectangleAnchor anchor) { [EOL]     Rectangle2D anchorRect = null; [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         anchorRect = markerOffset.createAdjustedRectangle(markerArea, labelOffsetType, LengthAdjustmentType.CONTRACT); [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         anchorRect = markerOffset.createAdjustedRectangle(markerArea, LengthAdjustmentType.CONTRACT, labelOffsetType); [EOL]     } [EOL]     return RectangleAnchor.coordinates(anchorRect, anchor); [EOL] } <line_num>: 1384,1403
public LegendItem getLegendItem(int datasetIndex, int series) { [EOL]     CategoryPlot p = getPlot(); [EOL]     if (p == null) { [EOL]         return null; [EOL]     } [EOL]     if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series)) { [EOL]         return null; [EOL]     } [EOL]     CategoryDataset dataset = p.getDataset(datasetIndex); [EOL]     String label = this.legendItemLabelGenerator.generateLabel(dataset, series); [EOL]     String description = label; [EOL]     String toolTipText = null; [EOL]     if (this.legendItemToolTipGenerator != null) { [EOL]         toolTipText = this.legendItemToolTipGenerator.generateLabel(dataset, series); [EOL]     } [EOL]     String urlText = null; [EOL]     if (this.legendItemURLGenerator != null) { [EOL]         urlText = this.legendItemURLGenerator.generateLabel(dataset, series); [EOL]     } [EOL]     Shape shape = lookupLegendShape(series); [EOL]     Paint paint = lookupSeriesPaint(series); [EOL]     Paint outlinePaint = lookupSeriesOutlinePaint(series); [EOL]     Stroke outlineStroke = lookupSeriesOutlineStroke(series); [EOL]     LegendItem item = new LegendItem(label, description, toolTipText, urlText, shape, paint, outlineStroke, outlinePaint); [EOL]     item.setLabelFont(lookupLegendTextFont(series)); [EOL]     Paint labelPaint = lookupLegendTextPaint(series); [EOL]     if (labelPaint != null) { [EOL]         item.setLabelPaint(labelPaint); [EOL]     } [EOL]     item.setSeriesKey(dataset.getRowKey(series)); [EOL]     item.setSeriesIndex(series); [EOL]     item.setDataset(dataset); [EOL]     item.setDatasetIndex(datasetIndex); [EOL]     return item; [EOL] } <line_num>: 1417,1460
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof AbstractCategoryItemRenderer)) { [EOL]         return false; [EOL]     } [EOL]     AbstractCategoryItemRenderer that = (AbstractCategoryItemRenderer) obj; [EOL]     if (!ObjectUtilities.equal(this.itemLabelGeneratorList, that.itemLabelGeneratorList)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.baseItemLabelGenerator, that.baseItemLabelGenerator)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.toolTipGeneratorList, that.toolTipGeneratorList)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.baseToolTipGenerator, that.baseToolTipGenerator)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.urlGeneratorList, that.urlGeneratorList)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.baseURLGenerator, that.baseURLGenerator)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.legendItemLabelGenerator, that.legendItemLabelGenerator)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.legendItemToolTipGenerator, that.legendItemToolTipGenerator)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.legendItemURLGenerator, that.legendItemURLGenerator)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.backgroundAnnotations, that.backgroundAnnotations)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.foregroundAnnotations, that.foregroundAnnotations)) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 1469,1524
public int hashCode() { [EOL]     int result = super.hashCode(); [EOL]     return result; [EOL] } <line_num>: 1531,1534
public DrawingSupplier getDrawingSupplier() { [EOL]     DrawingSupplier result = null; [EOL]     CategoryPlot cp = getPlot(); [EOL]     if (cp != null) { [EOL]         result = cp.getDrawingSupplier(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1541,1548
protected void updateCrosshairValues(CategoryCrosshairState crosshairState, Comparable rowKey, Comparable columnKey, double value, int datasetIndex, double transX, double transY, PlotOrientation orientation) { [EOL]     if (orientation == null) { [EOL]         throw new IllegalArgumentException("Null 'orientation' argument."); [EOL]     } [EOL]     if (crosshairState != null) { [EOL]         if (this.plot.isRangeCrosshairLockedOnData()) { [EOL]             crosshairState.updateCrosshairPoint(rowKey, columnKey, value, datasetIndex, transX, transY, orientation); [EOL]         } else { [EOL]             crosshairState.updateCrosshairX(rowKey, columnKey, datasetIndex, transX, orientation); [EOL]         } [EOL]     } [EOL] } <line_num>: 1568,1588
protected void drawItemLabel(Graphics2D g2, PlotOrientation orientation, CategoryDataset dataset, int row, int column, boolean selected, double x, double y, boolean negative) { [EOL]     CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column, selected); [EOL]     if (generator != null) { [EOL]         Font labelFont = getItemLabelFont(row, column, selected); [EOL]         Paint paint = getItemLabelPaint(row, column, selected); [EOL]         g2.setFont(labelFont); [EOL]         g2.setPaint(paint); [EOL]         String label = generator.generateLabel(dataset, row, column); [EOL]         ItemLabelPosition position = null; [EOL]         if (!negative) { [EOL]             position = getPositiveItemLabelPosition(row, column, selected); [EOL]         } else { [EOL]             position = getNegativeItemLabelPosition(row, column, selected); [EOL]         } [EOL]         Point2D anchorPoint = calculateLabelAnchorPoint(position.getItemLabelAnchor(), x, y, orientation); [EOL]         TextUtilities.drawRotatedString(label, g2, (float) anchorPoint.getX(), (float) anchorPoint.getY(), position.getTextAnchor(), position.getAngle(), position.getRotationAnchor()); [EOL]     } [EOL] } <line_num>: 1606,1633
public void drawAnnotations(Graphics2D g2, Rectangle2D dataArea, CategoryAxis domainAxis, ValueAxis rangeAxis, Layer layer, PlotRenderingInfo info) { [EOL]     Iterator iterator = null; [EOL]     if (layer.equals(Layer.FOREGROUND)) { [EOL]         iterator = this.foregroundAnnotations.iterator(); [EOL]     } else if (layer.equals(Layer.BACKGROUND)) { [EOL]         iterator = this.backgroundAnnotations.iterator(); [EOL]     } else { [EOL]         throw new RuntimeException("Unknown layer."); [EOL]     } [EOL]     while (iterator.hasNext()) { [EOL]         CategoryAnnotation annotation = (CategoryAnnotation) iterator.next(); [EOL]         annotation.draw(g2, this.plot, dataArea, domainAxis, rangeAxis, 0, info); [EOL]     } [EOL] } <line_num>: 1647,1668
public Object clone() throws CloneNotSupportedException { [EOL]     AbstractCategoryItemRenderer clone = (AbstractCategoryItemRenderer) super.clone(); [EOL]     if (this.itemLabelGeneratorList != null) { [EOL]         clone.itemLabelGeneratorList = (ObjectList) this.itemLabelGeneratorList.clone(); [EOL]     } [EOL]     if (this.baseItemLabelGenerator != null) { [EOL]         if (this.baseItemLabelGenerator instanceof PublicCloneable) { [EOL]             PublicCloneable pc = (PublicCloneable) this.baseItemLabelGenerator; [EOL]             clone.baseItemLabelGenerator = (CategoryItemLabelGenerator) pc.clone(); [EOL]         } else { [EOL]             throw new CloneNotSupportedException("ItemLabelGenerator not cloneable."); [EOL]         } [EOL]     } [EOL]     if (this.toolTipGeneratorList != null) { [EOL]         clone.toolTipGeneratorList = (ObjectList) this.toolTipGeneratorList.clone(); [EOL]     } [EOL]     if (this.baseToolTipGenerator != null) { [EOL]         if (this.baseToolTipGenerator instanceof PublicCloneable) { [EOL]             PublicCloneable pc = (PublicCloneable) this.baseToolTipGenerator; [EOL]             clone.baseToolTipGenerator = (CategoryToolTipGenerator) pc.clone(); [EOL]         } else { [EOL]             throw new CloneNotSupportedException("Base tool tip generator not cloneable."); [EOL]         } [EOL]     } [EOL]     if (this.urlGeneratorList != null) { [EOL]         clone.urlGeneratorList = (ObjectList) this.urlGeneratorList.clone(); [EOL]     } [EOL]     if (this.baseURLGenerator != null) { [EOL]         if (this.baseURLGenerator instanceof PublicCloneable) { [EOL]             PublicCloneable pc = (PublicCloneable) this.baseURLGenerator; [EOL]             clone.baseURLGenerator = (CategoryURLGenerator) pc.clone(); [EOL]         } else { [EOL]             throw new CloneNotSupportedException("Base item URL generator not cloneable."); [EOL]         } [EOL]     } [EOL]     if (this.legendItemLabelGenerator instanceof PublicCloneable) { [EOL]         clone.legendItemLabelGenerator = (CategorySeriesLabelGenerator) ObjectUtilities.clone(this.legendItemLabelGenerator); [EOL]     } [EOL]     if (this.legendItemToolTipGenerator instanceof PublicCloneable) { [EOL]         clone.legendItemToolTipGenerator = (CategorySeriesLabelGenerator) ObjectUtilities.clone(this.legendItemToolTipGenerator); [EOL]     } [EOL]     if (this.legendItemURLGenerator instanceof PublicCloneable) { [EOL]         clone.legendItemURLGenerator = (CategorySeriesLabelGenerator) ObjectUtilities.clone(this.legendItemURLGenerator); [EOL]     } [EOL]     return clone; [EOL] } <line_num>: 1680,1750
protected CategoryAxis getDomainAxis(CategoryPlot plot, CategoryDataset dataset) { [EOL]     int datasetIndex = plot.indexOf(dataset); [EOL]     return plot.getDomainAxisForDataset(datasetIndex); [EOL] } <line_num>: 1760,1764
protected ValueAxis getRangeAxis(CategoryPlot plot, int index) { [EOL]     ValueAxis result = plot.getRangeAxis(index); [EOL]     if (result == null) { [EOL]         result = plot.getRangeAxis(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1774,1780
public LegendItemCollection getLegendItems() { [EOL]     LegendItemCollection result = new LegendItemCollection(); [EOL]     if (this.plot == null) { [EOL]         return result; [EOL]     } [EOL]     int index = this.plot.getIndexOf(this); [EOL]     CategoryDataset dataset = this.plot.getDataset(index); [EOL]     if (dataset == null) { [EOL]         return result; [EOL]     } [EOL]     int seriesCount = dataset.getRowCount(); [EOL]     if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) { [EOL]         for (int i = 0; i < seriesCount; i++) { [EOL]             if (isSeriesVisibleInLegend(i)) { [EOL]                 LegendItem item = getLegendItem(index, i); [EOL]                 if (item != null) { [EOL]                     result.add(item); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } else { [EOL]         for (int i = seriesCount - 1; i >= 0; i--) { [EOL]             if (isSeriesVisibleInLegend(i)) { [EOL]                 LegendItem item = getLegendItem(index, i); [EOL]                 if (item != null) { [EOL]                     result.add(item); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1790,1822
protected void addEntity(EntityCollection entities, Shape hotspot, CategoryDataset dataset, int row, int column, boolean selected) { [EOL]     if (hotspot == null) { [EOL]         throw new IllegalArgumentException("Null 'hotspot' argument."); [EOL]     } [EOL]     addEntity(entities, hotspot, dataset, row, column, selected, 0.0, 0.0); [EOL] } <line_num>: 1836,1843
protected void addEntity(EntityCollection entities, Shape hotspot, CategoryDataset dataset, int row, int column, boolean selected, double entityX, double entityY) { [EOL]     if (!getItemCreateEntity(row, column, selected)) { [EOL]         return; [EOL]     } [EOL]     Shape s = hotspot; [EOL]     if (hotspot == null) { [EOL]         double r = getDefaultEntityRadius(); [EOL]         double w = r * 2; [EOL]         if (getPlot().getOrientation() == PlotOrientation.VERTICAL) { [EOL]             s = new Ellipse2D.Double(entityX - r, entityY - r, w, w); [EOL]         } else { [EOL]             s = new Ellipse2D.Double(entityY - r, entityX - r, w, w); [EOL]         } [EOL]     } [EOL]     String tip = null; [EOL]     CategoryToolTipGenerator generator = getToolTipGenerator(row, column, selected); [EOL]     if (generator != null) { [EOL]         tip = generator.generateToolTip(dataset, row, column); [EOL]     } [EOL]     String url = null; [EOL]     CategoryURLGenerator urlster = getURLGenerator(row, column, selected); [EOL]     if (urlster != null) { [EOL]         url = urlster.generateURL(dataset, row, column); [EOL]     } [EOL]     CategoryItemEntity entity = new CategoryItemEntity(s, tip, url, dataset, dataset.getRowKey(row), dataset.getColumnKey(column)); [EOL]     entities.add(entity); [EOL] } <line_num>: 1862,1893
public Shape createHotSpotShape(Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, CategoryItemRendererState state) { [EOL]     throw new RuntimeException("Not implemented."); [EOL] } <line_num>: 1912,1917
public Rectangle2D createHotSpotBounds(Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, CategoryItemRendererState state, Rectangle2D result) { [EOL]     if (result == null) { [EOL]         result = new Rectangle(); [EOL]     } [EOL]     Comparable key = dataset.getColumnKey(column); [EOL]     Number y = dataset.getValue(row, column); [EOL]     if (y == null) { [EOL]         return null; [EOL]     } [EOL]     double xx = domainAxis.getCategoryMiddle(key, plot.getCategoriesForAxis(domainAxis), dataArea, plot.getDomainAxisEdge()); [EOL]     double yy = rangeAxis.valueToJava2D(y.doubleValue(), dataArea, plot.getRangeAxisEdge()); [EOL]     result.setRect(xx - 2, yy - 2, 4, 4); [EOL]     return result; [EOL] } <line_num>: 1937,1956
public boolean hitTest(double xx, double yy, Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, CategoryItemRendererState state) { [EOL]     Rectangle2D bounds = createHotSpotBounds(g2, dataArea, plot, domainAxis, rangeAxis, dataset, row, column, selected, state, null); [EOL]     if (bounds == null) { [EOL]         return false; [EOL]     } [EOL]     return bounds.contains(xx, yy); [EOL] } <line_num>: 1979,1992
