public BoxAndWhiskerRenderer() { [EOL]     this.artifactPaint = Color.black; [EOL]     this.fillBox = true; [EOL]     this.itemMargin = 0.20; [EOL]     this.maximumBarWidth = 1.0; [EOL]     this.medianVisible = true; [EOL]     this.meanVisible = false; [EOL]     setBaseLegendShape(new Rectangle2D.Double(-4.0, -4.0, 8.0, 8.0)); [EOL] } <line_num>: 167,175
public Paint getArtifactPaint() { [EOL]     return this.artifactPaint; [EOL] } <line_num>: 185,187
public void setArtifactPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.artifactPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 197,203
public boolean getFillBox() { [EOL]     return this.fillBox; [EOL] } <line_num>: 212,214
public void setFillBox(boolean flag) { [EOL]     this.fillBox = flag; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 224,227
public double getItemMargin() { [EOL]     return this.itemMargin; [EOL] } <line_num>: 237,239
public void setItemMargin(double margin) { [EOL]     this.itemMargin = margin; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 249,252
public double getMaximumBarWidth() { [EOL]     return this.maximumBarWidth; [EOL] } <line_num>: 264,266
public void setMaximumBarWidth(double percent) { [EOL]     this.maximumBarWidth = percent; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 279,282
public boolean isMeanVisible() { [EOL]     return this.meanVisible; [EOL] } <line_num>: 294,296
public void setMeanVisible(boolean visible) { [EOL]     if (this.meanVisible == visible) { [EOL]         return; [EOL]     } [EOL]     this.meanVisible = visible; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 309,315
public boolean isMedianVisible() { [EOL]     return this.medianVisible; [EOL] } <line_num>: 327,329
public void setMedianVisible(boolean visible) { [EOL]     this.medianVisible = visible; [EOL] } <line_num>: 342,344
public LegendItem getLegendItem(int datasetIndex, int series) { [EOL]     CategoryPlot cp = getPlot(); [EOL]     if (cp == null) { [EOL]         return null; [EOL]     } [EOL]     if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series)) { [EOL]         return null; [EOL]     } [EOL]     CategoryDataset dataset = cp.getDataset(datasetIndex); [EOL]     String label = getLegendItemLabelGenerator().generateLabel(dataset, series); [EOL]     String description = label; [EOL]     String toolTipText = null; [EOL]     if (getLegendItemToolTipGenerator() != null) { [EOL]         toolTipText = getLegendItemToolTipGenerator().generateLabel(dataset, series); [EOL]     } [EOL]     String urlText = null; [EOL]     if (getLegendItemURLGenerator() != null) { [EOL]         urlText = getLegendItemURLGenerator().generateLabel(dataset, series); [EOL]     } [EOL]     Shape shape = lookupLegendShape(series); [EOL]     Paint paint = lookupSeriesPaint(series); [EOL]     Paint outlinePaint = lookupSeriesOutlinePaint(series); [EOL]     Stroke outlineStroke = lookupSeriesOutlineStroke(series); [EOL]     LegendItem result = new LegendItem(label, description, toolTipText, urlText, shape, paint, outlineStroke, outlinePaint); [EOL]     result.setLabelFont(lookupLegendTextFont(series)); [EOL]     Paint labelPaint = lookupLegendTextPaint(series); [EOL]     if (labelPaint != null) { [EOL]         result.setLabelPaint(labelPaint); [EOL]     } [EOL]     result.setDataset(dataset); [EOL]     result.setDatasetIndex(datasetIndex); [EOL]     result.setSeriesKey(dataset.getRowKey(series)); [EOL]     result.setSeriesIndex(series); [EOL]     return result; [EOL] } <line_num>: 354,397
public CategoryItemRendererState initialise(Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryDataset dataset, PlotRenderingInfo info) { [EOL]     CategoryItemRendererState state = super.initialise(g2, dataArea, plot, dataset, info); [EOL]     CategoryAxis domainAxis = getDomainAxis(plot, dataset); [EOL]     if (dataset != null) { [EOL]         int columns = dataset.getColumnCount(); [EOL]         int rows = dataset.getRowCount(); [EOL]         double space = 0.0; [EOL]         PlotOrientation orientation = plot.getOrientation(); [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             space = dataArea.getHeight(); [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             space = dataArea.getWidth(); [EOL]         } [EOL]         double maxWidth = space * getMaximumBarWidth(); [EOL]         double categoryMargin = 0.0; [EOL]         double currentItemMargin = 0.0; [EOL]         if (columns > 1) { [EOL]             categoryMargin = domainAxis.getCategoryMargin(); [EOL]         } [EOL]         if (rows > 1) { [EOL]             currentItemMargin = getItemMargin(); [EOL]         } [EOL]         double used = space * (1 - domainAxis.getLowerMargin() - domainAxis.getUpperMargin() - categoryMargin - currentItemMargin); [EOL]         if ((rows * columns) > 0) { [EOL]             state.setBarWidth(Math.min(used / (dataset.getColumnCount() * dataset.getRowCount()), maxWidth)); [EOL]         } else { [EOL]             state.setBarWidth(Math.min(used, maxWidth)); [EOL]         } [EOL]     } [EOL]     return state; [EOL] } <line_num>: 410,454
public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, int pass) { [EOL]     if (!getItemVisible(row, column)) { [EOL]         return; [EOL]     } [EOL]     if (!(dataset instanceof BoxAndWhiskerCategoryDataset)) { [EOL]         throw new IllegalArgumentException("BoxAndWhiskerRenderer.drawItem() : the data should be " + "of type BoxAndWhiskerCategoryDataset only."); [EOL]     } [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         drawHorizontalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, dataset, row, column, selected, pass); [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, dataset, row, column, selected, pass); [EOL]     } [EOL] } <line_num>: 471,498
protected void drawHorizontalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, int pass) { [EOL]     BoxAndWhiskerCategoryDataset bawDataset = (BoxAndWhiskerCategoryDataset) dataset; [EOL]     double categoryEnd = domainAxis.getCategoryEnd(column, getColumnCount(), dataArea, plot.getDomainAxisEdge()); [EOL]     double categoryStart = domainAxis.getCategoryStart(column, getColumnCount(), dataArea, plot.getDomainAxisEdge()); [EOL]     double categoryWidth = Math.abs(categoryEnd - categoryStart); [EOL]     double yy = categoryStart; [EOL]     int seriesCount = getRowCount(); [EOL]     int categoryCount = getColumnCount(); [EOL]     if (seriesCount > 1) { [EOL]         double seriesGap = dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1)); [EOL]         double usedWidth = (state.getBarWidth() * seriesCount) + (seriesGap * (seriesCount - 1)); [EOL]         double offset = (categoryWidth - usedWidth) / 2; [EOL]         yy = yy + offset + (row * (state.getBarWidth() + seriesGap)); [EOL]     } else { [EOL]         double offset = (categoryWidth - state.getBarWidth()) / 2; [EOL]         yy = yy + offset; [EOL]     } [EOL]     g2.setPaint(getItemPaint(row, column, selected)); [EOL]     Stroke s = getItemStroke(row, column, selected); [EOL]     g2.setStroke(s); [EOL]     RectangleEdge location = plot.getRangeAxisEdge(); [EOL]     Number xQ1 = bawDataset.getQ1Value(row, column); [EOL]     Number xQ3 = bawDataset.getQ3Value(row, column); [EOL]     Number xMax = bawDataset.getMaxRegularValue(row, column); [EOL]     Number xMin = bawDataset.getMinRegularValue(row, column); [EOL]     Shape box = null; [EOL]     if (xQ1 != null && xQ3 != null && xMax != null && xMin != null) { [EOL]         double xxQ1 = rangeAxis.valueToJava2D(xQ1.doubleValue(), dataArea, location); [EOL]         double xxQ3 = rangeAxis.valueToJava2D(xQ3.doubleValue(), dataArea, location); [EOL]         double xxMax = rangeAxis.valueToJava2D(xMax.doubleValue(), dataArea, location); [EOL]         double xxMin = rangeAxis.valueToJava2D(xMin.doubleValue(), dataArea, location); [EOL]         double yymid = yy + state.getBarWidth() / 2.0; [EOL]         g2.draw(new Line2D.Double(xxMax, yymid, xxQ3, yymid)); [EOL]         g2.draw(new Line2D.Double(xxMax, yy, xxMax, yy + state.getBarWidth())); [EOL]         g2.draw(new Line2D.Double(xxMin, yymid, xxQ1, yymid)); [EOL]         g2.draw(new Line2D.Double(xxMin, yy, xxMin, yy + state.getBarWidth())); [EOL]         box = new Rectangle2D.Double(Math.min(xxQ1, xxQ3), yy, Math.abs(xxQ1 - xxQ3), state.getBarWidth()); [EOL]         if (this.fillBox) { [EOL]             g2.fill(box); [EOL]         } [EOL]         g2.setStroke(getItemOutlineStroke(row, column, selected)); [EOL]         g2.setPaint(getItemOutlinePaint(row, column, selected)); [EOL]         g2.draw(box); [EOL]     } [EOL]     g2.setPaint(this.artifactPaint); [EOL]     double aRadius = 0; [EOL]     if (this.meanVisible) { [EOL]         Number xMean = bawDataset.getMeanValue(row, column); [EOL]         if (xMean != null) { [EOL]             double xxMean = rangeAxis.valueToJava2D(xMean.doubleValue(), dataArea, location); [EOL]             aRadius = state.getBarWidth() / 4; [EOL]             if ((xxMean > (dataArea.getMinX() - aRadius)) && (xxMean < (dataArea.getMaxX() + aRadius))) { [EOL]                 Ellipse2D.Double avgEllipse = new Ellipse2D.Double(xxMean - aRadius, yy + aRadius, aRadius * 2, aRadius * 2); [EOL]                 g2.fill(avgEllipse); [EOL]                 g2.draw(avgEllipse); [EOL]             } [EOL]         } [EOL]     } [EOL]     if (this.medianVisible) { [EOL]         Number xMedian = bawDataset.getMedianValue(row, column); [EOL]         if (xMedian != null) { [EOL]             double xxMedian = rangeAxis.valueToJava2D(xMedian.doubleValue(), dataArea, location); [EOL]             g2.draw(new Line2D.Double(xxMedian, yy, xxMedian, yy + state.getBarWidth())); [EOL]         } [EOL]     } [EOL]     if (state.getInfo() != null && box != null) { [EOL]         EntityCollection entities = state.getEntityCollection(); [EOL]         if (entities != null) { [EOL]             addEntity(entities, box, dataset, row, column, selected); [EOL]         } [EOL]     } [EOL] } <line_num>: 520,641
protected void drawVerticalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, int pass) { [EOL]     BoxAndWhiskerCategoryDataset bawDataset = (BoxAndWhiskerCategoryDataset) dataset; [EOL]     double categoryEnd = domainAxis.getCategoryEnd(column, getColumnCount(), dataArea, plot.getDomainAxisEdge()); [EOL]     double categoryStart = domainAxis.getCategoryStart(column, getColumnCount(), dataArea, plot.getDomainAxisEdge()); [EOL]     double categoryWidth = categoryEnd - categoryStart; [EOL]     double xx = categoryStart; [EOL]     int seriesCount = getRowCount(); [EOL]     int categoryCount = getColumnCount(); [EOL]     if (seriesCount > 1) { [EOL]         double seriesGap = dataArea.getWidth() * getItemMargin() / (categoryCount * (seriesCount - 1)); [EOL]         double usedWidth = (state.getBarWidth() * seriesCount) + (seriesGap * (seriesCount - 1)); [EOL]         double offset = (categoryWidth - usedWidth) / 2; [EOL]         xx = xx + offset + (row * (state.getBarWidth() + seriesGap)); [EOL]     } else { [EOL]         double offset = (categoryWidth - state.getBarWidth()) / 2; [EOL]         xx = xx + offset; [EOL]     } [EOL]     double yyAverage = 0.0; [EOL]     double yyOutlier; [EOL]     Paint itemPaint = getItemPaint(row, column, selected); [EOL]     g2.setPaint(itemPaint); [EOL]     Stroke s = getItemStroke(row, column, selected); [EOL]     g2.setStroke(s); [EOL]     double aRadius = 0; [EOL]     RectangleEdge location = plot.getRangeAxisEdge(); [EOL]     Number yQ1 = bawDataset.getQ1Value(row, column); [EOL]     Number yQ3 = bawDataset.getQ3Value(row, column); [EOL]     Number yMax = bawDataset.getMaxRegularValue(row, column); [EOL]     Number yMin = bawDataset.getMinRegularValue(row, column); [EOL]     Shape box = null; [EOL]     if (yQ1 != null && yQ3 != null && yMax != null && yMin != null) { [EOL]         double yyQ1 = rangeAxis.valueToJava2D(yQ1.doubleValue(), dataArea, location); [EOL]         double yyQ3 = rangeAxis.valueToJava2D(yQ3.doubleValue(), dataArea, location); [EOL]         double yyMax = rangeAxis.valueToJava2D(yMax.doubleValue(), dataArea, location); [EOL]         double yyMin = rangeAxis.valueToJava2D(yMin.doubleValue(), dataArea, location); [EOL]         double xxmid = xx + state.getBarWidth() / 2.0; [EOL]         g2.draw(new Line2D.Double(xxmid, yyMax, xxmid, yyQ3)); [EOL]         g2.draw(new Line2D.Double(xx, yyMax, xx + state.getBarWidth(), yyMax)); [EOL]         g2.draw(new Line2D.Double(xxmid, yyMin, xxmid, yyQ1)); [EOL]         g2.draw(new Line2D.Double(xx, yyMin, xx + state.getBarWidth(), yyMin)); [EOL]         box = new Rectangle2D.Double(xx, Math.min(yyQ1, yyQ3), state.getBarWidth(), Math.abs(yyQ1 - yyQ3)); [EOL]         if (this.fillBox) { [EOL]             g2.fill(box); [EOL]         } [EOL]         g2.setStroke(getItemOutlineStroke(row, column, selected)); [EOL]         g2.setPaint(getItemOutlinePaint(row, column, selected)); [EOL]         g2.draw(box); [EOL]     } [EOL]     g2.setPaint(this.artifactPaint); [EOL]     if (this.meanVisible) { [EOL]         Number yMean = bawDataset.getMeanValue(row, column); [EOL]         if (yMean != null) { [EOL]             yyAverage = rangeAxis.valueToJava2D(yMean.doubleValue(), dataArea, location); [EOL]             aRadius = state.getBarWidth() / 4; [EOL]             if ((yyAverage > (dataArea.getMinY() - aRadius)) && (yyAverage < (dataArea.getMaxY() + aRadius))) { [EOL]                 Ellipse2D.Double avgEllipse = new Ellipse2D.Double(xx + aRadius, yyAverage - aRadius, aRadius * 2, aRadius * 2); [EOL]                 g2.fill(avgEllipse); [EOL]                 g2.draw(avgEllipse); [EOL]             } [EOL]         } [EOL]     } [EOL]     if (this.medianVisible) { [EOL]         Number yMedian = bawDataset.getMedianValue(row, column); [EOL]         if (yMedian != null) { [EOL]             double yyMedian = rangeAxis.valueToJava2D(yMedian.doubleValue(), dataArea, location); [EOL]             g2.draw(new Line2D.Double(xx, yyMedian, xx + state.getBarWidth(), yyMedian)); [EOL]         } [EOL]     } [EOL]     double maxAxisValue = rangeAxis.valueToJava2D(rangeAxis.getUpperBound(), dataArea, location) + aRadius; [EOL]     double minAxisValue = rangeAxis.valueToJava2D(rangeAxis.getLowerBound(), dataArea, location) - aRadius; [EOL]     g2.setPaint(itemPaint); [EOL]     double oRadius = state.getBarWidth() / 3; [EOL]     List outliers = new ArrayList(); [EOL]     OutlierListCollection outlierListCollection = new OutlierListCollection(); [EOL]     List yOutliers = bawDataset.getOutliers(row, column); [EOL]     if (yOutliers != null) { [EOL]         for (int i = 0; i < yOutliers.size(); i++) { [EOL]             double outlier = ((Number) yOutliers.get(i)).doubleValue(); [EOL]             Number minOutlier = bawDataset.getMinOutlier(row, column); [EOL]             Number maxOutlier = bawDataset.getMaxOutlier(row, column); [EOL]             Number minRegular = bawDataset.getMinRegularValue(row, column); [EOL]             Number maxRegular = bawDataset.getMaxRegularValue(row, column); [EOL]             if (outlier > maxOutlier.doubleValue()) { [EOL]                 outlierListCollection.setHighFarOut(true); [EOL]             } else if (outlier < minOutlier.doubleValue()) { [EOL]                 outlierListCollection.setLowFarOut(true); [EOL]             } else if (outlier > maxRegular.doubleValue()) { [EOL]                 yyOutlier = rangeAxis.valueToJava2D(outlier, dataArea, location); [EOL]                 outliers.add(new Outlier(xx + state.getBarWidth() / 2.0, yyOutlier, oRadius)); [EOL]             } else if (outlier < minRegular.doubleValue()) { [EOL]                 yyOutlier = rangeAxis.valueToJava2D(outlier, dataArea, location); [EOL]                 outliers.add(new Outlier(xx + state.getBarWidth() / 2.0, yyOutlier, oRadius)); [EOL]             } [EOL]             Collections.sort(outliers); [EOL]         } [EOL]         for (Iterator iterator = outliers.iterator(); iterator.hasNext(); ) { [EOL]             Outlier outlier = (Outlier) iterator.next(); [EOL]             outlierListCollection.add(outlier); [EOL]         } [EOL]         for (Iterator iterator = outlierListCollection.iterator(); iterator.hasNext(); ) { [EOL]             OutlierList list = (OutlierList) iterator.next(); [EOL]             Outlier outlier = list.getAveragedOutlier(); [EOL]             Point2D point = outlier.getPoint(); [EOL]             if (list.isMultiple()) { [EOL]                 drawMultipleEllipse(point, state.getBarWidth(), oRadius, g2); [EOL]             } else { [EOL]                 drawEllipse(point, oRadius, g2); [EOL]             } [EOL]         } [EOL]         if (outlierListCollection.isHighFarOut()) { [EOL]             drawHighFarOut(aRadius / 2.0, g2, xx + state.getBarWidth() / 2.0, maxAxisValue); [EOL]         } [EOL]         if (outlierListCollection.isLowFarOut()) { [EOL]             drawLowFarOut(aRadius / 2.0, g2, xx + state.getBarWidth() / 2.0, minAxisValue); [EOL]         } [EOL]     } [EOL]     if (state.getInfo() != null && box != null) { [EOL]         EntityCollection entities = state.getEntityCollection(); [EOL]         if (entities != null) { [EOL]             addEntity(entities, box, dataset, row, column, selected); [EOL]         } [EOL]     } [EOL] } <line_num>: 663,869
private void drawEllipse(Point2D point, double oRadius, Graphics2D g2) { [EOL]     Ellipse2D dot = new Ellipse2D.Double(point.getX() + oRadius / 2, point.getY(), oRadius, oRadius); [EOL]     g2.draw(dot); [EOL] } <line_num>: 878,882
private void drawMultipleEllipse(Point2D point, double boxWidth, double oRadius, Graphics2D g2) { [EOL]     Ellipse2D dot1 = new Ellipse2D.Double(point.getX() - (boxWidth / 2) + oRadius, point.getY(), oRadius, oRadius); [EOL]     Ellipse2D dot2 = new Ellipse2D.Double(point.getX() + (boxWidth / 2), point.getY(), oRadius, oRadius); [EOL]     g2.draw(dot1); [EOL]     g2.draw(dot2); [EOL] } <line_num>: 892,901
private void drawHighFarOut(double aRadius, Graphics2D g2, double xx, double m) { [EOL]     double side = aRadius * 2; [EOL]     g2.draw(new Line2D.Double(xx - side, m + side, xx + side, m + side)); [EOL]     g2.draw(new Line2D.Double(xx - side, m + side, xx, m)); [EOL]     g2.draw(new Line2D.Double(xx + side, m + side, xx, m)); [EOL] } <line_num>: 911,917
private void drawLowFarOut(double aRadius, Graphics2D g2, double xx, double m) { [EOL]     double side = aRadius * 2; [EOL]     g2.draw(new Line2D.Double(xx - side, m - side, xx + side, m - side)); [EOL]     g2.draw(new Line2D.Double(xx - side, m - side, xx, m)); [EOL]     g2.draw(new Line2D.Double(xx + side, m - side, xx, m)); [EOL] } <line_num>: 927,933
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof BoxAndWhiskerRenderer)) { [EOL]         return false; [EOL]     } [EOL]     BoxAndWhiskerRenderer that = (BoxAndWhiskerRenderer) obj; [EOL]     if (this.fillBox != that.fillBox) { [EOL]         return false; [EOL]     } [EOL]     if (this.itemMargin != that.itemMargin) { [EOL]         return false; [EOL]     } [EOL]     if (this.maximumBarWidth != that.maximumBarWidth) { [EOL]         return false; [EOL]     } [EOL]     if (this.meanVisible != that.meanVisible) { [EOL]         return false; [EOL]     } [EOL]     if (this.medianVisible != that.medianVisible) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.artifactPaint, that.artifactPaint)) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 942,969
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.artifactPaint, stream); [EOL] } <line_num>: 978,981
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.artifactPaint = SerialUtilities.readPaint(stream); [EOL] } <line_num>: 991,995
