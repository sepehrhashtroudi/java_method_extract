public LineAndShapeRenderer() { [EOL]     this(true, true); [EOL] } <line_num>: 200,202
public LineAndShapeRenderer(boolean lines, boolean shapes) { [EOL]     super(); [EOL]     this.seriesLinesVisible = new BooleanList(); [EOL]     this.baseLinesVisible = lines; [EOL]     this.seriesShapesVisible = new BooleanList(); [EOL]     this.baseShapesVisible = shapes; [EOL]     this.seriesShapesFilled = new BooleanList(); [EOL]     this.baseShapesFilled = true; [EOL]     this.useFillPaint = false; [EOL]     this.drawOutlines = true; [EOL]     this.useOutlinePaint = false; [EOL]     this.useSeriesOffset = false; [EOL]     this.itemMargin = 0.0; [EOL] } <line_num>: 210,223
public boolean getItemLineVisible(int series, int item) { [EOL]     Boolean flag = getSeriesLinesVisible(series); [EOL]     if (flag != null) { [EOL]         return flag.booleanValue(); [EOL]     } else { [EOL]         return this.baseLinesVisible; [EOL]     } [EOL] } <line_num>: 236,244
public Boolean getSeriesLinesVisible(int series) { [EOL]     return this.seriesLinesVisible.getBoolean(series); [EOL] } <line_num>: 256,258
public void setSeriesLinesVisible(int series, Boolean flag) { [EOL]     this.seriesLinesVisible.setBoolean(series, flag); [EOL]     fireChangeEvent(); [EOL] } <line_num>: 269,272
public void setSeriesLinesVisible(int series, boolean visible) { [EOL]     setSeriesLinesVisible(series, Boolean.valueOf(visible)); [EOL] } <line_num>: 283,285
public boolean getBaseLinesVisible() { [EOL]     return this.baseLinesVisible; [EOL] } <line_num>: 294,296
public void setBaseLinesVisible(boolean flag) { [EOL]     this.baseLinesVisible = flag; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 306,309
public boolean getItemShapeVisible(int series, int item) { [EOL]     Boolean flag = getSeriesShapesVisible(series); [EOL]     if (flag != null) { [EOL]         return flag.booleanValue(); [EOL]     } else { [EOL]         return this.baseShapesVisible; [EOL]     } [EOL] } <line_num>: 322,330
public Boolean getSeriesShapesVisible(int series) { [EOL]     return this.seriesShapesVisible.getBoolean(series); [EOL] } <line_num>: 342,344
public void setSeriesShapesVisible(int series, boolean visible) { [EOL]     setSeriesShapesVisible(series, Boolean.valueOf(visible)); [EOL] } <line_num>: 355,357
public void setSeriesShapesVisible(int series, Boolean flag) { [EOL]     this.seriesShapesVisible.setBoolean(series, flag); [EOL]     fireChangeEvent(); [EOL] } <line_num>: 368,371
public boolean getBaseShapesVisible() { [EOL]     return this.baseShapesVisible; [EOL] } <line_num>: 380,382
public void setBaseShapesVisible(boolean flag) { [EOL]     this.baseShapesVisible = flag; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 392,395
public boolean getDrawOutlines() { [EOL]     return this.drawOutlines; [EOL] } <line_num>: 405,407
public void setDrawOutlines(boolean flag) { [EOL]     this.drawOutlines = flag; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 421,424
public boolean getUseOutlinePaint() { [EOL]     return this.useOutlinePaint; [EOL] } <line_num>: 434,436
public void setUseOutlinePaint(boolean use) { [EOL]     this.useOutlinePaint = use; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 447,450
public boolean getItemShapeFilled(int series, int item) { [EOL]     Boolean flag = getSeriesShapesFilled(series); [EOL]     if (flag != null) { [EOL]         return flag.booleanValue(); [EOL]     } else { [EOL]         return this.baseShapesFilled; [EOL]     } [EOL] } <line_num>: 465,473
public Boolean getSeriesShapesFilled(int series) { [EOL]     return this.seriesShapesFilled.getBoolean(series); [EOL] } <line_num>: 485,487
public void setSeriesShapesFilled(int series, Boolean filled) { [EOL]     this.seriesShapesFilled.setBoolean(series, filled); [EOL]     fireChangeEvent(); [EOL] } <line_num>: 498,501
public void setSeriesShapesFilled(int series, boolean filled) { [EOL]     setSeriesShapesFilled(series, Boolean.valueOf(filled)); [EOL] } <line_num>: 512,515
public boolean getBaseShapesFilled() { [EOL]     return this.baseShapesFilled; [EOL] } <line_num>: 524,526
public void setBaseShapesFilled(boolean flag) { [EOL]     this.baseShapesFilled = flag; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 536,539
public boolean getUseFillPaint() { [EOL]     return this.useFillPaint; [EOL] } <line_num>: 550,552
public void setUseFillPaint(boolean flag) { [EOL]     this.useFillPaint = flag; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 563,566
public boolean getUseSeriesOffset() { [EOL]     return this.useSeriesOffset; [EOL] } <line_num>: 578,580
public void setUseSeriesOffset(boolean offset) { [EOL]     this.useSeriesOffset = offset; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 593,596
public double getItemMargin() { [EOL]     return this.itemMargin; [EOL] } <line_num>: 611,613
public void setItemMargin(double margin) { [EOL]     if (margin < 0.0 || margin >= 1.0) { [EOL]         throw new IllegalArgumentException("Requires 0.0 <= margin < 1.0."); [EOL]     } [EOL]     this.itemMargin = margin; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 627,633
public LegendItem getLegendItem(int datasetIndex, int series) { [EOL]     CategoryPlot cp = getPlot(); [EOL]     if (cp == null) { [EOL]         return null; [EOL]     } [EOL]     if (isSeriesVisible(series) && isSeriesVisibleInLegend(series)) { [EOL]         CategoryDataset dataset = cp.getDataset(datasetIndex); [EOL]         String label = getLegendItemLabelGenerator().generateLabel(dataset, series); [EOL]         String description = label; [EOL]         String toolTipText = null; [EOL]         if (getLegendItemToolTipGenerator() != null) { [EOL]             toolTipText = getLegendItemToolTipGenerator().generateLabel(dataset, series); [EOL]         } [EOL]         String urlText = null; [EOL]         if (getLegendItemURLGenerator() != null) { [EOL]             urlText = getLegendItemURLGenerator().generateLabel(dataset, series); [EOL]         } [EOL]         Shape shape = lookupLegendShape(series); [EOL]         Paint paint = lookupSeriesPaint(series); [EOL]         Paint fillPaint = (this.useFillPaint ? getItemFillPaint(series, 0, false) : paint); [EOL]         boolean shapeOutlineVisible = this.drawOutlines; [EOL]         Paint outlinePaint = (this.useOutlinePaint ? getItemOutlinePaint(series, 0, false) : paint); [EOL]         Stroke outlineStroke = lookupSeriesOutlineStroke(series); [EOL]         boolean lineVisible = getItemLineVisible(series, 0); [EOL]         boolean shapeVisible = getItemShapeVisible(series, 0); [EOL]         LegendItem result = new LegendItem(label, description, toolTipText, urlText, shapeVisible, shape, getItemShapeFilled(series, 0), fillPaint, shapeOutlineVisible, outlinePaint, outlineStroke, lineVisible, new Line2D.Double(-7.0, 0.0, 7.0, 0.0), getItemStroke(series, 0, false), getItemPaint(series, 0, false)); [EOL]         result.setLabelFont(lookupLegendTextFont(series)); [EOL]         Paint labelPaint = lookupLegendTextPaint(series); [EOL]         if (labelPaint != null) { [EOL]             result.setLabelPaint(labelPaint); [EOL]         } [EOL]         result.setDataset(dataset); [EOL]         result.setDatasetIndex(datasetIndex); [EOL]         result.setSeriesKey(dataset.getRowKey(series)); [EOL]         result.setSeriesIndex(series); [EOL]         return result; [EOL]     } [EOL]     return null; [EOL] } <line_num>: 643,694
public int getPassCount() { [EOL]     return 2; [EOL] } <line_num>: 701,703
public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, int pass) { [EOL]     if (!getItemVisible(row, column)) { [EOL]         return; [EOL]     } [EOL]     if (!getItemLineVisible(row, column) && !getItemShapeVisible(row, column)) { [EOL]         return; [EOL]     } [EOL]     Number v = dataset.getValue(row, column); [EOL]     if (v == null) { [EOL]         return; [EOL]     } [EOL]     int visibleRow = state.getVisibleSeriesIndex(row); [EOL]     if (visibleRow < 0) { [EOL]         return; [EOL]     } [EOL]     int visibleRowCount = state.getVisibleSeriesCount(); [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     double x1; [EOL]     if (this.useSeriesOffset) { [EOL]         x1 = domainAxis.getCategorySeriesMiddle(column, dataset.getColumnCount(), visibleRow, visibleRowCount, this.itemMargin, dataArea, plot.getDomainAxisEdge()); [EOL]     } else { [EOL]         x1 = domainAxis.getCategoryMiddle(column, getColumnCount(), dataArea, plot.getDomainAxisEdge()); [EOL]     } [EOL]     double value = v.doubleValue(); [EOL]     double y1 = rangeAxis.valueToJava2D(value, dataArea, plot.getRangeAxisEdge()); [EOL]     if (pass == 0 && getItemLineVisible(row, column)) { [EOL]         if (column != 0) { [EOL]             Number previousValue = dataset.getValue(row, column - 1); [EOL]             if (previousValue != null) { [EOL]                 double previous = previousValue.doubleValue(); [EOL]                 double x0; [EOL]                 if (this.useSeriesOffset) { [EOL]                     x0 = domainAxis.getCategorySeriesMiddle(column - 1, dataset.getColumnCount(), visibleRow, visibleRowCount, this.itemMargin, dataArea, plot.getDomainAxisEdge()); [EOL]                 } else { [EOL]                     x0 = domainAxis.getCategoryMiddle(column - 1, getColumnCount(), dataArea, plot.getDomainAxisEdge()); [EOL]                 } [EOL]                 double y0 = rangeAxis.valueToJava2D(previous, dataArea, plot.getRangeAxisEdge()); [EOL]                 Line2D line = null; [EOL]                 if (orientation == PlotOrientation.HORIZONTAL) { [EOL]                     line = new Line2D.Double(y0, x0, y1, x1); [EOL]                 } else if (orientation == PlotOrientation.VERTICAL) { [EOL]                     line = new Line2D.Double(x0, y0, x1, y1); [EOL]                 } [EOL]                 g2.setPaint(getItemPaint(row, column, selected)); [EOL]                 g2.setStroke(getItemStroke(row, column, selected)); [EOL]                 g2.draw(line); [EOL]             } [EOL]         } [EOL]     } [EOL]     if (pass == 1) { [EOL]         Shape shape = getItemShape(row, column, selected); [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             shape = ShapeUtilities.createTranslatedShape(shape, y1, x1); [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             shape = ShapeUtilities.createTranslatedShape(shape, x1, y1); [EOL]         } [EOL]         if (getItemShapeVisible(row, column)) { [EOL]             if (getItemShapeFilled(row, column)) { [EOL]                 if (this.useFillPaint) { [EOL]                     g2.setPaint(getItemFillPaint(row, column, selected)); [EOL]                 } else { [EOL]                     g2.setPaint(getItemPaint(row, column, selected)); [EOL]                 } [EOL]                 g2.fill(shape); [EOL]             } [EOL]             if (this.drawOutlines) { [EOL]                 if (this.useOutlinePaint) { [EOL]                     g2.setPaint(getItemOutlinePaint(row, column, selected)); [EOL]                 } else { [EOL]                     g2.setPaint(getItemPaint(row, column, selected)); [EOL]                 } [EOL]                 g2.setStroke(getItemOutlineStroke(row, column, selected)); [EOL]                 g2.draw(shape); [EOL]             } [EOL]         } [EOL]         if (isItemLabelVisible(row, column, selected)) { [EOL]             if (orientation == PlotOrientation.HORIZONTAL) { [EOL]                 drawItemLabel(g2, orientation, dataset, row, column, selected, y1, x1, (value < 0.0)); [EOL]             } else if (orientation == PlotOrientation.VERTICAL) { [EOL]                 drawItemLabel(g2, orientation, dataset, row, column, selected, x1, y1, (value < 0.0)); [EOL]             } [EOL]         } [EOL]         int datasetIndex = plot.indexOf(dataset); [EOL]         updateCrosshairValues(state.getCrosshairState(), dataset.getRowKey(row), dataset.getColumnKey(column), value, datasetIndex, x1, y1, orientation); [EOL]         EntityCollection entities = state.getEntityCollection(); [EOL]         if (entities != null) { [EOL]             addEntity(entities, shape, dataset, row, column, selected); [EOL]         } [EOL]     } [EOL] } <line_num>: 720,858
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof LineAndShapeRenderer)) { [EOL]         return false; [EOL]     } [EOL]     LineAndShapeRenderer that = (LineAndShapeRenderer) obj; [EOL]     if (this.baseLinesVisible != that.baseLinesVisible) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.seriesLinesVisible, that.seriesLinesVisible)) { [EOL]         return false; [EOL]     } [EOL]     if (this.baseShapesVisible != that.baseShapesVisible) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.seriesShapesVisible, that.seriesShapesVisible)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.seriesShapesFilled, that.seriesShapesFilled)) { [EOL]         return false; [EOL]     } [EOL]     if (this.baseShapesFilled != that.baseShapesFilled) { [EOL]         return false; [EOL]     } [EOL]     if (this.useOutlinePaint != that.useOutlinePaint) { [EOL]         return false; [EOL]     } [EOL]     if (this.useSeriesOffset != that.useSeriesOffset) { [EOL]         return false; [EOL]     } [EOL]     if (this.itemMargin != that.itemMargin) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 867,908
public Object clone() throws CloneNotSupportedException { [EOL]     LineAndShapeRenderer clone = (LineAndShapeRenderer) super.clone(); [EOL]     clone.seriesLinesVisible = (BooleanList) this.seriesLinesVisible.clone(); [EOL]     clone.seriesShapesVisible = (BooleanList) this.seriesShapesVisible.clone(); [EOL]     clone.seriesShapesFilled = (BooleanList) this.seriesShapesFilled.clone(); [EOL]     return clone; [EOL] } <line_num>: 917,926
