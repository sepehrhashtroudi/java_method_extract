public ScatterRenderer() { [EOL]     this.seriesShapesFilled = new BooleanList(); [EOL]     this.baseShapesFilled = true; [EOL]     this.useFillPaint = false; [EOL]     this.drawOutlines = false; [EOL]     this.useOutlinePaint = false; [EOL]     this.useSeriesOffset = true; [EOL]     this.itemMargin = 0.20; [EOL] } <line_num>: 132,140
public boolean getUseSeriesOffset() { [EOL]     return this.useSeriesOffset; [EOL] } <line_num>: 150,152
public void setUseSeriesOffset(boolean offset) { [EOL]     this.useSeriesOffset = offset; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 163,166
public double getItemMargin() { [EOL]     return this.itemMargin; [EOL] } <line_num>: 179,181
public void setItemMargin(double margin) { [EOL]     if (margin < 0.0 || margin >= 1.0) { [EOL]         throw new IllegalArgumentException("Requires 0.0 <= margin < 1.0."); [EOL]     } [EOL]     this.itemMargin = margin; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 193,199
public boolean getDrawOutlines() { [EOL]     return this.drawOutlines; [EOL] } <line_num>: 209,211
public void setDrawOutlines(boolean flag) { [EOL]     this.drawOutlines = flag; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 225,228
public boolean getUseOutlinePaint() { [EOL]     return this.useOutlinePaint; [EOL] } <line_num>: 238,240
public void setUseOutlinePaint(boolean use) { [EOL]     this.useOutlinePaint = use; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 251,254
public boolean getItemShapeFilled(int series, int item) { [EOL]     return getSeriesShapesFilled(series); [EOL] } <line_num>: 268,270
public boolean getSeriesShapesFilled(int series) { [EOL]     Boolean flag = this.seriesShapesFilled.getBoolean(series); [EOL]     if (flag != null) { [EOL]         return flag.booleanValue(); [EOL]     } else { [EOL]         return this.baseShapesFilled; [EOL]     } [EOL] } <line_num>: 279,288
public void setSeriesShapesFilled(int series, Boolean filled) { [EOL]     this.seriesShapesFilled.setBoolean(series, filled); [EOL]     fireChangeEvent(); [EOL] } <line_num>: 297,300
public void setSeriesShapesFilled(int series, boolean filled) { [EOL]     this.seriesShapesFilled.setBoolean(series, Boolean.valueOf(filled)); [EOL]     fireChangeEvent(); [EOL] } <line_num>: 309,312
public boolean getBaseShapesFilled() { [EOL]     return this.baseShapesFilled; [EOL] } <line_num>: 319,321
public void setBaseShapesFilled(boolean flag) { [EOL]     this.baseShapesFilled = flag; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 329,332
public boolean getUseFillPaint() { [EOL]     return this.useFillPaint; [EOL] } <line_num>: 341,343
public void setUseFillPaint(boolean flag) { [EOL]     this.useFillPaint = flag; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 352,355
public Range findRangeBounds(CategoryDataset dataset) { [EOL]     return findRangeBounds(dataset, true); [EOL] } <line_num>: 367,369
public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, int pass) { [EOL]     if (!getItemVisible(row, column)) { [EOL]         return; [EOL]     } [EOL]     int visibleRow = state.getVisibleSeriesIndex(row); [EOL]     if (visibleRow < 0) { [EOL]         return; [EOL]     } [EOL]     int visibleRowCount = state.getVisibleSeriesCount(); [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     MultiValueCategoryDataset d = (MultiValueCategoryDataset) dataset; [EOL]     List values = d.getValues(row, column); [EOL]     if (values == null) { [EOL]         return; [EOL]     } [EOL]     int valueCount = values.size(); [EOL]     for (int i = 0; i < valueCount; i++) { [EOL]         double x1; [EOL]         if (this.useSeriesOffset) { [EOL]             x1 = domainAxis.getCategorySeriesMiddle(column, dataset.getColumnCount(), visibleRow, visibleRowCount, this.itemMargin, dataArea, plot.getDomainAxisEdge()); [EOL]         } else { [EOL]             x1 = domainAxis.getCategoryMiddle(column, getColumnCount(), dataArea, plot.getDomainAxisEdge()); [EOL]         } [EOL]         Number n = (Number) values.get(i); [EOL]         double value = n.doubleValue(); [EOL]         double y1 = rangeAxis.valueToJava2D(value, dataArea, plot.getRangeAxisEdge()); [EOL]         Shape shape = getItemShape(row, column, selected); [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             shape = ShapeUtilities.createTranslatedShape(shape, y1, x1); [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             shape = ShapeUtilities.createTranslatedShape(shape, x1, y1); [EOL]         } [EOL]         if (getItemShapeFilled(row, column)) { [EOL]             if (this.useFillPaint) { [EOL]                 g2.setPaint(getItemFillPaint(row, column, selected)); [EOL]             } else { [EOL]                 g2.setPaint(getItemPaint(row, column, selected)); [EOL]             } [EOL]             g2.fill(shape); [EOL]         } [EOL]         if (this.drawOutlines) { [EOL]             if (this.useOutlinePaint) { [EOL]                 g2.setPaint(getItemOutlinePaint(row, column, selected)); [EOL]             } else { [EOL]                 g2.setPaint(getItemPaint(row, column, selected)); [EOL]             } [EOL]             g2.setStroke(getItemOutlineStroke(row, column, selected)); [EOL]             g2.draw(shape); [EOL]         } [EOL]     } [EOL] } <line_num>: 386,454
public LegendItem getLegendItem(int datasetIndex, int series) { [EOL]     CategoryPlot cp = getPlot(); [EOL]     if (cp == null) { [EOL]         return null; [EOL]     } [EOL]     if (isSeriesVisible(series) && isSeriesVisibleInLegend(series)) { [EOL]         CategoryDataset dataset = cp.getDataset(datasetIndex); [EOL]         String label = getLegendItemLabelGenerator().generateLabel(dataset, series); [EOL]         String description = label; [EOL]         String toolTipText = null; [EOL]         if (getLegendItemToolTipGenerator() != null) { [EOL]             toolTipText = getLegendItemToolTipGenerator().generateLabel(dataset, series); [EOL]         } [EOL]         String urlText = null; [EOL]         if (getLegendItemURLGenerator() != null) { [EOL]             urlText = getLegendItemURLGenerator().generateLabel(dataset, series); [EOL]         } [EOL]         Shape shape = lookupLegendShape(series); [EOL]         Paint paint = lookupSeriesPaint(series); [EOL]         Paint fillPaint = (this.useFillPaint ? getItemFillPaint(series, 0, false) : paint); [EOL]         boolean shapeOutlineVisible = this.drawOutlines; [EOL]         Paint outlinePaint = (this.useOutlinePaint ? getItemOutlinePaint(series, 0, false) : paint); [EOL]         Stroke outlineStroke = lookupSeriesOutlineStroke(series); [EOL]         LegendItem result = new LegendItem(label, description, toolTipText, urlText, true, shape, getItemShapeFilled(series, 0), fillPaint, shapeOutlineVisible, outlinePaint, outlineStroke, false, new Line2D.Double(-7.0, 0.0, 7.0, 0.0), getItemStroke(series, 0, false), getItemPaint(series, 0, false)); [EOL]         result.setLabelFont(lookupLegendTextFont(series)); [EOL]         Paint labelPaint = lookupLegendTextPaint(series); [EOL]         if (labelPaint != null) { [EOL]             result.setLabelPaint(labelPaint); [EOL]         } [EOL]         result.setDataset(dataset); [EOL]         result.setDatasetIndex(datasetIndex); [EOL]         result.setSeriesKey(dataset.getRowKey(series)); [EOL]         result.setSeriesIndex(series); [EOL]         return result; [EOL]     } [EOL]     return null; [EOL] } <line_num>: 464,513
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof ScatterRenderer)) { [EOL]         return false; [EOL]     } [EOL]     ScatterRenderer that = (ScatterRenderer) obj; [EOL]     if (!ObjectUtilities.equal(this.seriesShapesFilled, that.seriesShapesFilled)) { [EOL]         return false; [EOL]     } [EOL]     if (this.baseShapesFilled != that.baseShapesFilled) { [EOL]         return false; [EOL]     } [EOL]     if (this.useFillPaint != that.useFillPaint) { [EOL]         return false; [EOL]     } [EOL]     if (this.drawOutlines != that.drawOutlines) { [EOL]         return false; [EOL]     } [EOL]     if (this.useOutlinePaint != that.useOutlinePaint) { [EOL]         return false; [EOL]     } [EOL]     if (this.useSeriesOffset != that.useSeriesOffset) { [EOL]         return false; [EOL]     } [EOL]     if (this.itemMargin != that.itemMargin) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 521,552
public Object clone() throws CloneNotSupportedException { [EOL]     ScatterRenderer clone = (ScatterRenderer) super.clone(); [EOL]     clone.seriesShapesFilled = (BooleanList) this.seriesShapesFilled.clone(); [EOL]     return clone; [EOL] } <line_num>: 561,566
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL] } <line_num>: 574,577
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL] } <line_num>: 586,590
