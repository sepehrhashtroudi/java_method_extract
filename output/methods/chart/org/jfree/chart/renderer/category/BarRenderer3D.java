public BarRenderer3D() { [EOL]     this(DEFAULT_X_OFFSET, DEFAULT_Y_OFFSET); [EOL] } <line_num>: 178,180
public BarRenderer3D(double xOffset, double yOffset) { [EOL]     super(); [EOL]     this.xOffset = xOffset; [EOL]     this.yOffset = yOffset; [EOL]     this.wallPaint = DEFAULT_WALL_PAINT; [EOL]     ItemLabelPosition p1 = new ItemLabelPosition(ItemLabelAnchor.INSIDE12, TextAnchor.TOP_CENTER); [EOL]     setBasePositiveItemLabelPosition(p1); [EOL]     ItemLabelPosition p2 = new ItemLabelPosition(ItemLabelAnchor.INSIDE12, TextAnchor.TOP_CENTER); [EOL]     setBaseNegativeItemLabelPosition(p2); [EOL] } <line_num>: 188,202
public double getXOffset() { [EOL]     return this.xOffset; [EOL] } <line_num>: 211,213
public double getYOffset() { [EOL]     return this.yOffset; [EOL] } <line_num>: 220,222
public Paint getWallPaint() { [EOL]     return this.wallPaint; [EOL] } <line_num>: 232,234
public void setWallPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.wallPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 245,251
public CategoryItemRendererState initialise(Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryDataset dataset, PlotRenderingInfo info) { [EOL]     Rectangle2D adjusted = new Rectangle2D.Double(dataArea.getX(), dataArea.getY() + getYOffset(), dataArea.getWidth() - getXOffset(), dataArea.getHeight() - getYOffset()); [EOL]     CategoryItemRendererState state = super.initialise(g2, adjusted, plot, dataset, info); [EOL]     return state; [EOL] } <line_num>: 267,280
public void drawBackground(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea) { [EOL]     float x0 = (float) dataArea.getX(); [EOL]     float x1 = x0 + (float) Math.abs(this.xOffset); [EOL]     float x3 = (float) dataArea.getMaxX(); [EOL]     float x2 = x3 - (float) Math.abs(this.xOffset); [EOL]     float y0 = (float) dataArea.getMaxY(); [EOL]     float y1 = y0 - (float) Math.abs(this.yOffset); [EOL]     float y3 = (float) dataArea.getMinY(); [EOL]     float y2 = y3 + (float) Math.abs(this.yOffset); [EOL]     GeneralPath clip = new GeneralPath(); [EOL]     clip.moveTo(x0, y0); [EOL]     clip.lineTo(x0, y2); [EOL]     clip.lineTo(x1, y3); [EOL]     clip.lineTo(x3, y3); [EOL]     clip.lineTo(x3, y1); [EOL]     clip.lineTo(x2, y0); [EOL]     clip.closePath(); [EOL]     Composite originalComposite = g2.getComposite(); [EOL]     g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, plot.getBackgroundAlpha())); [EOL]     Paint backgroundPaint = plot.getBackgroundPaint(); [EOL]     if (backgroundPaint != null) { [EOL]         g2.setPaint(backgroundPaint); [EOL]         g2.fill(clip); [EOL]     } [EOL]     GeneralPath leftWall = new GeneralPath(); [EOL]     leftWall.moveTo(x0, y0); [EOL]     leftWall.lineTo(x0, y2); [EOL]     leftWall.lineTo(x1, y3); [EOL]     leftWall.lineTo(x1, y1); [EOL]     leftWall.closePath(); [EOL]     g2.setPaint(getWallPaint()); [EOL]     g2.fill(leftWall); [EOL]     GeneralPath bottomWall = new GeneralPath(); [EOL]     bottomWall.moveTo(x0, y0); [EOL]     bottomWall.lineTo(x1, y1); [EOL]     bottomWall.lineTo(x3, y1); [EOL]     bottomWall.lineTo(x2, y0); [EOL]     bottomWall.closePath(); [EOL]     g2.setPaint(getWallPaint()); [EOL]     g2.fill(bottomWall); [EOL]     g2.setPaint(Color.lightGray); [EOL]     Line2D corner = new Line2D.Double(x0, y0, x1, y1); [EOL]     g2.draw(corner); [EOL]     corner.setLine(x1, y1, x1, y3); [EOL]     g2.draw(corner); [EOL]     corner.setLine(x1, y1, x3, y1); [EOL]     g2.draw(corner); [EOL]     Image backgroundImage = plot.getBackgroundImage(); [EOL]     if (backgroundImage != null) { [EOL]         Rectangle2D adjusted = new Rectangle2D.Double(dataArea.getX() + getXOffset(), dataArea.getY(), dataArea.getWidth() - getXOffset(), dataArea.getHeight() - getYOffset()); [EOL]         plot.drawBackgroundImage(g2, adjusted); [EOL]     } [EOL]     g2.setComposite(originalComposite); [EOL] } <line_num>: 289,361
public void drawOutline(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea) { [EOL]     float x0 = (float) dataArea.getX(); [EOL]     float x1 = x0 + (float) Math.abs(this.xOffset); [EOL]     float x3 = (float) dataArea.getMaxX(); [EOL]     float x2 = x3 - (float) Math.abs(this.xOffset); [EOL]     float y0 = (float) dataArea.getMaxY(); [EOL]     float y1 = y0 - (float) Math.abs(this.yOffset); [EOL]     float y3 = (float) dataArea.getMinY(); [EOL]     float y2 = y3 + (float) Math.abs(this.yOffset); [EOL]     GeneralPath clip = new GeneralPath(); [EOL]     clip.moveTo(x0, y0); [EOL]     clip.lineTo(x0, y2); [EOL]     clip.lineTo(x1, y3); [EOL]     clip.lineTo(x3, y3); [EOL]     clip.lineTo(x3, y1); [EOL]     clip.lineTo(x2, y0); [EOL]     clip.closePath(); [EOL]     Stroke outlineStroke = plot.getOutlineStroke(); [EOL]     Paint outlinePaint = plot.getOutlinePaint(); [EOL]     if ((outlineStroke != null) && (outlinePaint != null)) { [EOL]         g2.setStroke(outlineStroke); [EOL]         g2.setPaint(outlinePaint); [EOL]         g2.draw(clip); [EOL]     } [EOL] } <line_num>: 370,401
public void drawDomainGridline(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea, double value) { [EOL]     Line2D line1 = null; [EOL]     Line2D line2 = null; [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         double y0 = value; [EOL]         double y1 = value - getYOffset(); [EOL]         double x0 = dataArea.getMinX(); [EOL]         double x1 = x0 + getXOffset(); [EOL]         double x2 = dataArea.getMaxX(); [EOL]         line1 = new Line2D.Double(x0, y0, x1, y1); [EOL]         line2 = new Line2D.Double(x1, y1, x2, y1); [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         double x0 = value; [EOL]         double x1 = value + getXOffset(); [EOL]         double y0 = dataArea.getMaxY(); [EOL]         double y1 = y0 - getYOffset(); [EOL]         double y2 = dataArea.getMinY(); [EOL]         line1 = new Line2D.Double(x0, y0, x1, y1); [EOL]         line2 = new Line2D.Double(x1, y1, x1, y2); [EOL]     } [EOL]     Paint paint = plot.getDomainGridlinePaint(); [EOL]     Stroke stroke = plot.getDomainGridlineStroke(); [EOL]     g2.setPaint(paint != null ? paint : Plot.DEFAULT_OUTLINE_PAINT); [EOL]     g2.setStroke(stroke != null ? stroke : Plot.DEFAULT_OUTLINE_STROKE); [EOL]     g2.draw(line1); [EOL]     g2.draw(line2); [EOL] } <line_num>: 413,446
public void drawRangeGridline(Graphics2D g2, CategoryPlot plot, ValueAxis axis, Rectangle2D dataArea, double value) { [EOL]     Range range = axis.getRange(); [EOL]     if (!range.contains(value)) { [EOL]         return; [EOL]     } [EOL]     Rectangle2D adjusted = new Rectangle2D.Double(dataArea.getX(), dataArea.getY() + getYOffset(), dataArea.getWidth() - getXOffset(), dataArea.getHeight() - getYOffset()); [EOL]     Line2D line1 = null; [EOL]     Line2D line2 = null; [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         double x0 = axis.valueToJava2D(value, adjusted, plot.getRangeAxisEdge()); [EOL]         double x1 = x0 + getXOffset(); [EOL]         double y0 = dataArea.getMaxY(); [EOL]         double y1 = y0 - getYOffset(); [EOL]         double y2 = dataArea.getMinY(); [EOL]         line1 = new Line2D.Double(x0, y0, x1, y1); [EOL]         line2 = new Line2D.Double(x1, y1, x1, y2); [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         double y0 = axis.valueToJava2D(value, adjusted, plot.getRangeAxisEdge()); [EOL]         double y1 = y0 - getYOffset(); [EOL]         double x0 = dataArea.getMinX(); [EOL]         double x1 = x0 + getXOffset(); [EOL]         double x2 = dataArea.getMaxX(); [EOL]         line1 = new Line2D.Double(x0, y0, x1, y1); [EOL]         line2 = new Line2D.Double(x1, y1, x2, y1); [EOL]     } [EOL]     Paint paint = plot.getRangeGridlinePaint(); [EOL]     Stroke stroke = plot.getRangeGridlineStroke(); [EOL]     g2.setPaint(paint != null ? paint : Plot.DEFAULT_OUTLINE_PAINT); [EOL]     g2.setStroke(stroke != null ? stroke : Plot.DEFAULT_OUTLINE_STROKE); [EOL]     g2.draw(line1); [EOL]     g2.draw(line2); [EOL] } <line_num>: 459,502
public void drawRangeLine(Graphics2D g2, CategoryPlot plot, ValueAxis axis, Rectangle2D dataArea, double value, Paint paint, Stroke stroke) { [EOL]     Range range = axis.getRange(); [EOL]     if (!range.contains(value)) { [EOL]         return; [EOL]     } [EOL]     Rectangle2D adjusted = new Rectangle2D.Double(dataArea.getX(), dataArea.getY() + getYOffset(), dataArea.getWidth() - getXOffset(), dataArea.getHeight() - getYOffset()); [EOL]     Line2D line1 = null; [EOL]     Line2D line2 = null; [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         double x0 = axis.valueToJava2D(value, adjusted, plot.getRangeAxisEdge()); [EOL]         double x1 = x0 + getXOffset(); [EOL]         double y0 = dataArea.getMaxY(); [EOL]         double y1 = y0 - getYOffset(); [EOL]         double y2 = dataArea.getMinY(); [EOL]         line1 = new Line2D.Double(x0, y0, x1, y1); [EOL]         line2 = new Line2D.Double(x1, y1, x1, y2); [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         double y0 = axis.valueToJava2D(value, adjusted, plot.getRangeAxisEdge()); [EOL]         double y1 = y0 - getYOffset(); [EOL]         double x0 = dataArea.getMinX(); [EOL]         double x1 = x0 + getXOffset(); [EOL]         double x2 = dataArea.getMaxX(); [EOL]         line1 = new Line2D.Double(x0, y0, x1, y1); [EOL]         line2 = new Line2D.Double(x1, y1, x2, y1); [EOL]     } [EOL]     g2.setPaint(paint); [EOL]     g2.setStroke(stroke); [EOL]     g2.draw(line1); [EOL]     g2.draw(line2); [EOL] } <line_num>: 520,560
public void drawRangeMarker(Graphics2D g2, CategoryPlot plot, ValueAxis axis, Marker marker, Rectangle2D dataArea) { [EOL]     Rectangle2D adjusted = new Rectangle2D.Double(dataArea.getX(), dataArea.getY() + getYOffset(), dataArea.getWidth() - getXOffset(), dataArea.getHeight() - getYOffset()); [EOL]     if (marker instanceof ValueMarker) { [EOL]         ValueMarker vm = (ValueMarker) marker; [EOL]         double value = vm.getValue(); [EOL]         Range range = axis.getRange(); [EOL]         if (!range.contains(value)) { [EOL]             return; [EOL]         } [EOL]         GeneralPath path = null; [EOL]         PlotOrientation orientation = plot.getOrientation(); [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             float x = (float) axis.valueToJava2D(value, adjusted, plot.getRangeAxisEdge()); [EOL]             float y = (float) adjusted.getMaxY(); [EOL]             path = new GeneralPath(); [EOL]             path.moveTo(x, y); [EOL]             path.lineTo((float) (x + getXOffset()), y - (float) getYOffset()); [EOL]             path.lineTo((float) (x + getXOffset()), (float) (adjusted.getMinY() - getYOffset())); [EOL]             path.lineTo(x, (float) adjusted.getMinY()); [EOL]             path.closePath(); [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             float y = (float) axis.valueToJava2D(value, adjusted, plot.getRangeAxisEdge()); [EOL]             float x = (float) dataArea.getX(); [EOL]             path = new GeneralPath(); [EOL]             path.moveTo(x, y); [EOL]             path.lineTo(x + (float) this.xOffset, y - (float) this.yOffset); [EOL]             path.lineTo((float) (adjusted.getMaxX() + this.xOffset), y - (float) this.yOffset); [EOL]             path.lineTo((float) (adjusted.getMaxX()), y); [EOL]             path.closePath(); [EOL]         } [EOL]         g2.setPaint(marker.getPaint()); [EOL]         g2.fill(path); [EOL]         g2.setPaint(marker.getOutlinePaint()); [EOL]         g2.draw(path); [EOL]         String label = marker.getLabel(); [EOL]         RectangleAnchor anchor = marker.getLabelAnchor(); [EOL]         if (label != null) { [EOL]             Font labelFont = marker.getLabelFont(); [EOL]             g2.setFont(labelFont); [EOL]             g2.setPaint(marker.getLabelPaint()); [EOL]             Point2D coordinates = calculateRangeMarkerTextAnchorPoint(g2, orientation, dataArea, path.getBounds2D(), marker.getLabelOffset(), LengthAdjustmentType.EXPAND, anchor); [EOL]             TextUtilities.drawAlignedString(label, g2, (float) coordinates.getX(), (float) coordinates.getY(), marker.getLabelTextAnchor()); [EOL]         } [EOL]     } else { [EOL]         super.drawRangeMarker(g2, plot, axis, marker, adjusted); [EOL]     } [EOL] } <line_num>: 571,641
public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, int pass) { [EOL]     Number dataValue = dataset.getValue(row, column); [EOL]     if (dataValue == null) { [EOL]         return; [EOL]     } [EOL]     double value = dataValue.doubleValue(); [EOL]     Rectangle2D adjusted = new Rectangle2D.Double(dataArea.getX(), dataArea.getY() + getYOffset(), dataArea.getWidth() - getXOffset(), dataArea.getHeight() - getYOffset()); [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     double barW0 = calculateBarW0(plot, orientation, adjusted, domainAxis, state, row, column); [EOL]     double[] barL0L1 = calculateBarL0L1(value, rangeAxis.getLowerBound(), rangeAxis.getUpperBound()); [EOL]     if (barL0L1 == null) { [EOL]         return; [EOL]     } [EOL]     RectangleEdge edge = plot.getRangeAxisEdge(); [EOL]     double transL0 = rangeAxis.valueToJava2D(barL0L1[0], adjusted, edge); [EOL]     double transL1 = rangeAxis.valueToJava2D(barL0L1[1], adjusted, edge); [EOL]     double barL0 = Math.min(transL0, transL1); [EOL]     double barLength = Math.abs(transL1 - transL0); [EOL]     Rectangle2D bar = null; [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         bar = new Rectangle2D.Double(barL0, barW0, barLength, state.getBarWidth()); [EOL]     } else { [EOL]         bar = new Rectangle2D.Double(barW0, barL0, state.getBarWidth(), barLength); [EOL]     } [EOL]     Paint itemPaint = getItemPaint(row, column, selected); [EOL]     g2.setPaint(itemPaint); [EOL]     g2.fill(bar); [EOL]     double x0 = bar.getMinX(); [EOL]     double x1 = x0 + getXOffset(); [EOL]     double x2 = bar.getMaxX(); [EOL]     double x3 = x2 + getXOffset(); [EOL]     double y0 = bar.getMinY() - getYOffset(); [EOL]     double y1 = bar.getMinY(); [EOL]     double y2 = bar.getMaxY() - getYOffset(); [EOL]     double y3 = bar.getMaxY(); [EOL]     GeneralPath bar3dRight = null; [EOL]     GeneralPath bar3dTop = null; [EOL]     if (barLength > 0.0) { [EOL]         bar3dRight = new GeneralPath(); [EOL]         bar3dRight.moveTo((float) x2, (float) y3); [EOL]         bar3dRight.lineTo((float) x2, (float) y1); [EOL]         bar3dRight.lineTo((float) x3, (float) y0); [EOL]         bar3dRight.lineTo((float) x3, (float) y2); [EOL]         bar3dRight.closePath(); [EOL]         if (itemPaint instanceof Color) { [EOL]             g2.setPaint(((Color) itemPaint).darker()); [EOL]         } [EOL]         g2.fill(bar3dRight); [EOL]     } [EOL]     bar3dTop = new GeneralPath(); [EOL]     bar3dTop.moveTo((float) x0, (float) y1); [EOL]     bar3dTop.lineTo((float) x1, (float) y0); [EOL]     bar3dTop.lineTo((float) x3, (float) y0); [EOL]     bar3dTop.lineTo((float) x2, (float) y1); [EOL]     bar3dTop.closePath(); [EOL]     g2.fill(bar3dTop); [EOL]     if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) { [EOL]         g2.setStroke(getItemOutlineStroke(row, column, selected)); [EOL]         g2.setPaint(getItemOutlinePaint(row, column, selected)); [EOL]         g2.draw(bar); [EOL]         if (bar3dRight != null) { [EOL]             g2.draw(bar3dRight); [EOL]         } [EOL]         if (bar3dTop != null) { [EOL]             g2.draw(bar3dTop); [EOL]         } [EOL]     } [EOL]     CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column, selected); [EOL]     if (generator != null && isItemLabelVisible(row, column, selected)) { [EOL]         drawItemLabelForBar(g2, plot, dataset, row, column, selected, generator, bar, (value < 0.0)); [EOL]     } [EOL]     EntityCollection entities = state.getEntityCollection(); [EOL]     if (entities != null) { [EOL]         GeneralPath barOutline = new GeneralPath(); [EOL]         barOutline.moveTo((float) x0, (float) y3); [EOL]         barOutline.lineTo((float) x0, (float) y1); [EOL]         barOutline.lineTo((float) x1, (float) y0); [EOL]         barOutline.lineTo((float) x3, (float) y0); [EOL]         barOutline.lineTo((float) x3, (float) y2); [EOL]         barOutline.lineTo((float) x2, (float) y3); [EOL]         barOutline.closePath(); [EOL]         addEntity(entities, barOutline, dataset, row, column, selected); [EOL]     } [EOL] } <line_num>: 660,776
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof BarRenderer3D)) { [EOL]         return false; [EOL]     } [EOL]     BarRenderer3D that = (BarRenderer3D) obj; [EOL]     if (this.xOffset != that.xOffset) { [EOL]         return false; [EOL]     } [EOL]     if (this.yOffset != that.yOffset) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 785,803
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.wallPaint, stream); [EOL] } <line_num>: 812,815
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.wallPaint = SerialUtilities.readPaint(stream); [EOL] } <line_num>: 825,829
