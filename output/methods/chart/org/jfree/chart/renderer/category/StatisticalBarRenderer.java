public StatisticalBarRenderer() { [EOL]     super(); [EOL]     this.errorIndicatorPaint = Color.gray; [EOL]     this.errorIndicatorStroke = new BasicStroke(0.5f); [EOL] } <line_num>: 126,130
public Paint getErrorIndicatorPaint() { [EOL]     return this.errorIndicatorPaint; [EOL] } <line_num>: 140,142
public void setErrorIndicatorPaint(Paint paint) { [EOL]     this.errorIndicatorPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 153,156
public Stroke getErrorIndicatorStroke() { [EOL]     return this.errorIndicatorStroke; [EOL] } <line_num>: 168,170
public void setErrorIndicatorStroke(Stroke stroke) { [EOL]     this.errorIndicatorStroke = stroke; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 184,187
public Range findRangeBounds(CategoryDataset dataset) { [EOL]     return findRangeBounds(dataset, true); [EOL] } <line_num>: 199,201
public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, int pass) { [EOL]     int visibleRow = state.getVisibleSeriesIndex(row); [EOL]     if (visibleRow < 0) { [EOL]         return; [EOL]     } [EOL]     if (!(dataset instanceof StatisticalCategoryDataset)) { [EOL]         throw new IllegalArgumentException("Requires StatisticalCategoryDataset."); [EOL]     } [EOL]     StatisticalCategoryDataset statDataset = (StatisticalCategoryDataset) dataset; [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         drawHorizontalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statDataset, visibleRow, row, column, selected); [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statDataset, visibleRow, row, column, selected); [EOL]     } [EOL] } <line_num>: 219,245
protected void drawHorizontalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int visibleRow, int row, int column, boolean selected) { [EOL]     RectangleEdge xAxisLocation = plot.getDomainAxisEdge(); [EOL]     double rectY = domainAxis.getCategoryStart(column, getColumnCount(), dataArea, xAxisLocation); [EOL]     int seriesCount = state.getVisibleSeriesCount() >= 0 ? state.getVisibleSeriesCount() : getRowCount(); [EOL]     int categoryCount = getColumnCount(); [EOL]     if (seriesCount > 1) { [EOL]         double seriesGap = dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1)); [EOL]         rectY = rectY + visibleRow * (state.getBarWidth() + seriesGap); [EOL]     } else { [EOL]         rectY = rectY + visibleRow * state.getBarWidth(); [EOL]     } [EOL]     Number meanValue = dataset.getMeanValue(row, column); [EOL]     if (meanValue == null) { [EOL]         return; [EOL]     } [EOL]     double value = meanValue.doubleValue(); [EOL]     double base = 0.0; [EOL]     double lclip = rangeAxis.getLowerBound(); [EOL]     double uclip = rangeAxis.getUpperBound(); [EOL]     if (uclip <= 0.0) { [EOL]         if (value >= uclip) { [EOL]             return; [EOL]         } [EOL]         base = uclip; [EOL]         if (value <= lclip) { [EOL]             value = lclip; [EOL]         } [EOL]     } else if (lclip <= 0.0) { [EOL]         if (value >= uclip) { [EOL]             value = uclip; [EOL]         } else { [EOL]             if (value <= lclip) { [EOL]                 value = lclip; [EOL]             } [EOL]         } [EOL]     } else { [EOL]         if (value <= lclip) { [EOL]             return; [EOL]         } [EOL]         base = rangeAxis.getLowerBound(); [EOL]         if (value >= uclip) { [EOL]             value = uclip; [EOL]         } [EOL]     } [EOL]     RectangleEdge yAxisLocation = plot.getRangeAxisEdge(); [EOL]     double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation); [EOL]     double transY2 = rangeAxis.valueToJava2D(value, dataArea, yAxisLocation); [EOL]     double rectX = Math.min(transY2, transY1); [EOL]     double rectHeight = state.getBarWidth(); [EOL]     double rectWidth = Math.abs(transY2 - transY1); [EOL]     Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight); [EOL]     Paint itemPaint = getItemPaint(row, column, selected); [EOL]     GradientPaintTransformer t = getGradientPaintTransformer(); [EOL]     if (t != null && itemPaint instanceof GradientPaint) { [EOL]         itemPaint = t.transform((GradientPaint) itemPaint, bar); [EOL]     } [EOL]     g2.setPaint(itemPaint); [EOL]     g2.fill(bar); [EOL]     if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) { [EOL]         Stroke stroke = getItemOutlineStroke(row, column, selected); [EOL]         Paint paint = getItemOutlinePaint(row, column, selected); [EOL]         if (stroke != null && paint != null) { [EOL]             g2.setStroke(stroke); [EOL]             g2.setPaint(paint); [EOL]             g2.draw(bar); [EOL]         } [EOL]     } [EOL]     Number n = dataset.getStdDevValue(row, column); [EOL]     if (n != null) { [EOL]         double valueDelta = n.doubleValue(); [EOL]         double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, yAxisLocation); [EOL]         double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, yAxisLocation); [EOL]         if (this.errorIndicatorPaint != null) { [EOL]             g2.setPaint(this.errorIndicatorPaint); [EOL]         } else { [EOL]             g2.setPaint(getItemOutlinePaint(row, column, selected)); [EOL]         } [EOL]         if (this.errorIndicatorStroke != null) { [EOL]             g2.setStroke(this.errorIndicatorStroke); [EOL]         } else { [EOL]             g2.setStroke(getItemOutlineStroke(row, column, selected)); [EOL]         } [EOL]         Line2D line = null; [EOL]         line = new Line2D.Double(lowVal, rectY + rectHeight / 2.0d, highVal, rectY + rectHeight / 2.0d); [EOL]         g2.draw(line); [EOL]         line = new Line2D.Double(highVal, rectY + rectHeight * 0.25, highVal, rectY + rectHeight * 0.75); [EOL]         g2.draw(line); [EOL]         line = new Line2D.Double(lowVal, rectY + rectHeight * 0.25, lowVal, rectY + rectHeight * 0.75); [EOL]         g2.draw(line); [EOL]     } [EOL]     CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column, selected); [EOL]     if (generator != null && isItemLabelVisible(row, column, selected)) { [EOL]         drawItemLabelForBar(g2, plot, dataset, row, column, selected, generator, bar, (value < 0.0)); [EOL]     } [EOL]     EntityCollection entities = state.getEntityCollection(); [EOL]     if (entities != null) { [EOL]         addEntity(entities, bar, dataset, row, column, selected); [EOL]     } [EOL] } <line_num>: 264,404
protected void drawVerticalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int visibleRow, int row, int column, boolean selected) { [EOL]     RectangleEdge xAxisLocation = plot.getDomainAxisEdge(); [EOL]     double rectX = domainAxis.getCategoryStart(column, getColumnCount(), dataArea, xAxisLocation); [EOL]     int seriesCount = state.getVisibleSeriesCount() >= 0 ? state.getVisibleSeriesCount() : getRowCount(); [EOL]     int categoryCount = getColumnCount(); [EOL]     if (seriesCount > 1) { [EOL]         double seriesGap = dataArea.getWidth() * getItemMargin() / (categoryCount * (seriesCount - 1)); [EOL]         rectX = rectX + visibleRow * (state.getBarWidth() + seriesGap); [EOL]     } else { [EOL]         rectX = rectX + visibleRow * state.getBarWidth(); [EOL]     } [EOL]     Number meanValue = dataset.getMeanValue(row, column); [EOL]     if (meanValue == null) { [EOL]         return; [EOL]     } [EOL]     double value = meanValue.doubleValue(); [EOL]     double base = 0.0; [EOL]     double lclip = rangeAxis.getLowerBound(); [EOL]     double uclip = rangeAxis.getUpperBound(); [EOL]     if (uclip <= 0.0) { [EOL]         if (value >= uclip) { [EOL]             return; [EOL]         } [EOL]         base = uclip; [EOL]         if (value <= lclip) { [EOL]             value = lclip; [EOL]         } [EOL]     } else if (lclip <= 0.0) { [EOL]         if (value >= uclip) { [EOL]             value = uclip; [EOL]         } else { [EOL]             if (value <= lclip) { [EOL]                 value = lclip; [EOL]             } [EOL]         } [EOL]     } else { [EOL]         if (value <= lclip) { [EOL]             return; [EOL]         } [EOL]         base = rangeAxis.getLowerBound(); [EOL]         if (value >= uclip) { [EOL]             value = uclip; [EOL]         } [EOL]     } [EOL]     RectangleEdge yAxisLocation = plot.getRangeAxisEdge(); [EOL]     double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation); [EOL]     double transY2 = rangeAxis.valueToJava2D(value, dataArea, yAxisLocation); [EOL]     double rectY = Math.min(transY2, transY1); [EOL]     double rectWidth = state.getBarWidth(); [EOL]     double rectHeight = Math.abs(transY2 - transY1); [EOL]     Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight); [EOL]     Paint itemPaint = getItemPaint(row, column, selected); [EOL]     GradientPaintTransformer t = getGradientPaintTransformer(); [EOL]     if (t != null && itemPaint instanceof GradientPaint) { [EOL]         itemPaint = t.transform((GradientPaint) itemPaint, bar); [EOL]     } [EOL]     g2.setPaint(itemPaint); [EOL]     g2.fill(bar); [EOL]     if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) { [EOL]         Stroke stroke = getItemOutlineStroke(row, column, selected); [EOL]         Paint paint = getItemOutlinePaint(row, column, selected); [EOL]         if (stroke != null && paint != null) { [EOL]             g2.setStroke(stroke); [EOL]             g2.setPaint(paint); [EOL]             g2.draw(bar); [EOL]         } [EOL]     } [EOL]     Number n = dataset.getStdDevValue(row, column); [EOL]     if (n != null) { [EOL]         double valueDelta = n.doubleValue(); [EOL]         double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, yAxisLocation); [EOL]         double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, yAxisLocation); [EOL]         if (this.errorIndicatorPaint != null) { [EOL]             g2.setPaint(this.errorIndicatorPaint); [EOL]         } else { [EOL]             g2.setPaint(getItemOutlinePaint(row, column, selected)); [EOL]         } [EOL]         if (this.errorIndicatorStroke != null) { [EOL]             g2.setStroke(this.errorIndicatorStroke); [EOL]         } else { [EOL]             g2.setStroke(getItemOutlineStroke(row, column, selected)); [EOL]         } [EOL]         Line2D line = null; [EOL]         line = new Line2D.Double(rectX + rectWidth / 2.0d, lowVal, rectX + rectWidth / 2.0d, highVal); [EOL]         g2.draw(line); [EOL]         line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, highVal, rectX + rectWidth / 2.0d + 5.0d, highVal); [EOL]         g2.draw(line); [EOL]         line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, lowVal, rectX + rectWidth / 2.0d + 5.0d, lowVal); [EOL]         g2.draw(line); [EOL]     } [EOL]     CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column, selected); [EOL]     if (generator != null && isItemLabelVisible(row, column, selected)) { [EOL]         drawItemLabelForBar(g2, plot, dataset, row, column, selected, generator, bar, (value < 0.0)); [EOL]     } [EOL]     EntityCollection entities = state.getEntityCollection(); [EOL]     if (entities != null) { [EOL]         addEntity(entities, bar, dataset, row, column, selected); [EOL]     } [EOL] } <line_num>: 423,563
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof StatisticalBarRenderer)) { [EOL]         return false; [EOL]     } [EOL]     StatisticalBarRenderer that = (StatisticalBarRenderer) obj; [EOL]     if (!PaintUtilities.equal(this.errorIndicatorPaint, that.errorIndicatorPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.errorIndicatorStroke, that.errorIndicatorStroke)) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 572,589
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.errorIndicatorPaint, stream); [EOL]     SerialUtilities.writeStroke(this.errorIndicatorStroke, stream); [EOL] } <line_num>: 598,602
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.errorIndicatorPaint = SerialUtilities.readPaint(stream); [EOL]     this.errorIndicatorStroke = SerialUtilities.readStroke(stream); [EOL] } <line_num>: 612,617
