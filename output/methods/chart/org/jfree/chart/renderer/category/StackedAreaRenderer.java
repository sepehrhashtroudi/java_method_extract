public StackedAreaRenderer() { [EOL]     this(false); [EOL] } <line_num>: 106,108
public StackedAreaRenderer(boolean renderAsPercentages) { [EOL]     super(); [EOL]     this.renderAsPercentages = renderAsPercentages; [EOL] } <line_num>: 116,119
public boolean getRenderAsPercentages() { [EOL]     return this.renderAsPercentages; [EOL] } <line_num>: 130,132
public void setRenderAsPercentages(boolean asPercentages) { [EOL]     this.renderAsPercentages = asPercentages; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 143,146
public int getPassCount() { [EOL]     return 2; [EOL] } <line_num>: 155,157
public Range findRangeBounds(CategoryDataset dataset) { [EOL]     if (this.renderAsPercentages) { [EOL]         return new Range(0.0, 1.0); [EOL]     } else { [EOL]         return DatasetUtilities.findStackedRangeBounds(dataset); [EOL]     } [EOL] } <line_num>: 167,174
public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, int pass) { [EOL]     Shape entityArea = null; [EOL]     EntityCollection entities = state.getEntityCollection(); [EOL]     double y1 = 0.0; [EOL]     Number n = dataset.getValue(row, column); [EOL]     if (n != null) { [EOL]         y1 = n.doubleValue(); [EOL]     } [EOL]     double[] stack1 = getStackValues(dataset, row, column); [EOL]     double xx1 = domainAxis.getCategoryMiddle(column, getColumnCount(), dataArea, plot.getDomainAxisEdge()); [EOL]     double y0 = 0.0; [EOL]     n = dataset.getValue(row, Math.max(column - 1, 0)); [EOL]     if (n != null) { [EOL]         y0 = n.doubleValue(); [EOL]     } [EOL]     double[] stack0 = getStackValues(dataset, row, Math.max(column - 1, 0)); [EOL]     double xx0 = domainAxis.getCategoryStart(column, getColumnCount(), dataArea, plot.getDomainAxisEdge()); [EOL]     int itemCount = dataset.getColumnCount(); [EOL]     double y2 = 0.0; [EOL]     n = dataset.getValue(row, Math.min(column + 1, itemCount - 1)); [EOL]     if (n != null) { [EOL]         y2 = n.doubleValue(); [EOL]     } [EOL]     double[] stack2 = getStackValues(dataset, row, Math.min(column + 1, itemCount - 1)); [EOL]     double xx2 = domainAxis.getCategoryEnd(column, getColumnCount(), dataArea, plot.getDomainAxisEdge()); [EOL]     double xxLeft = xx0; [EOL]     double xxRight = xx2; [EOL]     double[] stackLeft = averageStackValues(stack0, stack1); [EOL]     double[] stackRight = averageStackValues(stack1, stack2); [EOL]     double[] adjStackLeft = adjustedStackValues(stack0, stack1); [EOL]     double[] adjStackRight = adjustedStackValues(stack1, stack2); [EOL]     float transY1; [EOL]     RectangleEdge edge1 = plot.getRangeAxisEdge(); [EOL]     GeneralPath left = new GeneralPath(); [EOL]     GeneralPath right = new GeneralPath(); [EOL]     if (y1 >= 0.0) { [EOL]         transY1 = (float) rangeAxis.valueToJava2D(y1 + stack1[1], dataArea, edge1); [EOL]         float transStack1 = (float) rangeAxis.valueToJava2D(stack1[1], dataArea, edge1); [EOL]         float transStackLeft = (float) rangeAxis.valueToJava2D(adjStackLeft[1], dataArea, edge1); [EOL]         if (y0 >= 0.0) { [EOL]             double yleft = (y0 + y1) / 2.0 + stackLeft[1]; [EOL]             float transYLeft = (float) rangeAxis.valueToJava2D(yleft, dataArea, edge1); [EOL]             left.moveTo((float) xx1, transY1); [EOL]             left.lineTo((float) xx1, transStack1); [EOL]             left.lineTo((float) xxLeft, transStackLeft); [EOL]             left.lineTo((float) xxLeft, transYLeft); [EOL]             left.closePath(); [EOL]         } else { [EOL]             left.moveTo((float) xx1, transStack1); [EOL]             left.lineTo((float) xx1, transY1); [EOL]             left.lineTo((float) xxLeft, transStackLeft); [EOL]             left.closePath(); [EOL]         } [EOL]         float transStackRight = (float) rangeAxis.valueToJava2D(adjStackRight[1], dataArea, edge1); [EOL]         if (y2 >= 0.0) { [EOL]             double yright = (y1 + y2) / 2.0 + stackRight[1]; [EOL]             float transYRight = (float) rangeAxis.valueToJava2D(yright, dataArea, edge1); [EOL]             right.moveTo((float) xx1, transStack1); [EOL]             right.lineTo((float) xx1, transY1); [EOL]             right.lineTo((float) xxRight, transYRight); [EOL]             right.lineTo((float) xxRight, transStackRight); [EOL]             right.closePath(); [EOL]         } else { [EOL]             right.moveTo((float) xx1, transStack1); [EOL]             right.lineTo((float) xx1, transY1); [EOL]             right.lineTo((float) xxRight, transStackRight); [EOL]             right.closePath(); [EOL]         } [EOL]     } else { [EOL]         transY1 = (float) rangeAxis.valueToJava2D(y1 + stack1[0], dataArea, edge1); [EOL]         float transStack1 = (float) rangeAxis.valueToJava2D(stack1[0], dataArea, edge1); [EOL]         float transStackLeft = (float) rangeAxis.valueToJava2D(adjStackLeft[0], dataArea, edge1); [EOL]         if (y0 >= 0.0) { [EOL]             left.moveTo((float) xx1, transStack1); [EOL]             left.lineTo((float) xx1, transY1); [EOL]             left.lineTo((float) xxLeft, transStackLeft); [EOL]             left.clone(); [EOL]         } else { [EOL]             double yleft = (y0 + y1) / 2.0 + stackLeft[0]; [EOL]             float transYLeft = (float) rangeAxis.valueToJava2D(yleft, dataArea, edge1); [EOL]             left.moveTo((float) xx1, transY1); [EOL]             left.lineTo((float) xx1, transStack1); [EOL]             left.lineTo((float) xxLeft, transStackLeft); [EOL]             left.lineTo((float) xxLeft, transYLeft); [EOL]             left.closePath(); [EOL]         } [EOL]         float transStackRight = (float) rangeAxis.valueToJava2D(adjStackRight[0], dataArea, edge1); [EOL]         if (y2 >= 0.0) { [EOL]             right.moveTo((float) xx1, transStack1); [EOL]             right.lineTo((float) xx1, transY1); [EOL]             right.lineTo((float) xxRight, transStackRight); [EOL]             right.closePath(); [EOL]         } else { [EOL]             double yright = (y1 + y2) / 2.0 + stackRight[0]; [EOL]             float transYRight = (float) rangeAxis.valueToJava2D(yright, dataArea, edge1); [EOL]             right.moveTo((float) xx1, transStack1); [EOL]             right.lineTo((float) xx1, transY1); [EOL]             right.lineTo((float) xxRight, transYRight); [EOL]             right.lineTo((float) xxRight, transStackRight); [EOL]             right.closePath(); [EOL]         } [EOL]     } [EOL]     g2.setPaint(getItemPaint(row, column, selected)); [EOL]     g2.setStroke(getItemStroke(row, column, selected)); [EOL]     Paint itemPaint = getItemPaint(row, column, selected); [EOL]     if (pass == 0) { [EOL]         g2.setPaint(itemPaint); [EOL]         g2.fill(left); [EOL]         g2.fill(right); [EOL]     } [EOL]     if (entities != null) { [EOL]         GeneralPath gp = new GeneralPath(left); [EOL]         gp.append(right, false); [EOL]         entityArea = gp; [EOL]         addEntity(entities, entityArea, dataset, row, column, selected); [EOL]     } [EOL] } <line_num>: 190,366
protected double getPreviousHeight(CategoryDataset dataset, int series, int category) { [EOL]     double result = 0.0; [EOL]     Number n; [EOL]     double total = 0.0; [EOL]     if (this.renderAsPercentages) { [EOL]         total = DataUtilities.calculateColumnTotal(dataset, category); [EOL]     } [EOL]     for (int i = 0; i < series; i++) { [EOL]         n = dataset.getValue(i, category); [EOL]         if (n != null) { [EOL]             double v = n.doubleValue(); [EOL]             if (this.renderAsPercentages) { [EOL]                 v = v / total; [EOL]             } [EOL]             result += v; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 381,402
protected double[] getStackValues(CategoryDataset dataset, int series, int index) { [EOL]     double[] result = new double[2]; [EOL]     for (int i = 0; i < series; i++) { [EOL]         if (isSeriesVisible(i)) { [EOL]             double v = 0.0; [EOL]             Number n = dataset.getValue(i, index); [EOL]             if (n != null) { [EOL]                 v = n.doubleValue(); [EOL]             } [EOL]             if (!Double.isNaN(v)) { [EOL]                 if (v >= 0.0) { [EOL]                     result[1] += v; [EOL]                 } else { [EOL]                     result[0] += v; [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 417,438
private double[] averageStackValues(double[] stack1, double[] stack2) { [EOL]     double[] result = new double[2]; [EOL]     result[0] = (stack1[0] + stack2[0]) / 2.0; [EOL]     result[1] = (stack1[1] + stack2[1]) / 2.0; [EOL]     return result; [EOL] } <line_num>: 449,454
private double[] adjustedStackValues(double[] stack1, double[] stack2) { [EOL]     double[] result = new double[2]; [EOL]     if (stack1[0] == 0.0 || stack2[0] == 0.0) { [EOL]         result[0] = 0.0; [EOL]     } else { [EOL]         result[0] = (stack1[0] + stack2[0]) / 2.0; [EOL]     } [EOL]     if (stack1[1] == 0.0 || stack2[1] == 0.0) { [EOL]         result[1] = 0.0; [EOL]     } else { [EOL]         result[1] = (stack1[1] + stack2[1]) / 2.0; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 466,481
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof StackedAreaRenderer)) { [EOL]         return false; [EOL]     } [EOL]     StackedAreaRenderer that = (StackedAreaRenderer) obj; [EOL]     if (this.renderAsPercentages != that.renderAsPercentages) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 490,502
