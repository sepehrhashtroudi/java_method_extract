public WaterfallBarRenderer() { [EOL]     this(new GradientPaint(0.0f, 0.0f, new Color(0x22, 0x22, 0xFF), 0.0f, 0.0f, new Color(0x66, 0x66, 0xFF)), new GradientPaint(0.0f, 0.0f, new Color(0x22, 0xFF, 0x22), 0.0f, 0.0f, new Color(0x66, 0xFF, 0x66)), new GradientPaint(0.0f, 0.0f, new Color(0xFF, 0x22, 0x22), 0.0f, 0.0f, new Color(0xFF, 0x66, 0x66)), new GradientPaint(0.0f, 0.0f, new Color(0xFF, 0xFF, 0x22), 0.0f, 0.0f, new Color(0xFF, 0xFF, 0x66))); [EOL] } <line_num>: 126,135
public WaterfallBarRenderer(Paint firstBarPaint, Paint positiveBarPaint, Paint negativeBarPaint, Paint lastBarPaint) { [EOL]     super(); [EOL]     if (firstBarPaint == null) { [EOL]         throw new IllegalArgumentException("Null 'firstBarPaint' argument"); [EOL]     } [EOL]     if (positiveBarPaint == null) { [EOL]         throw new IllegalArgumentException("Null 'positiveBarPaint' argument"); [EOL]     } [EOL]     if (negativeBarPaint == null) { [EOL]         throw new IllegalArgumentException("Null 'negativeBarPaint' argument"); [EOL]     } [EOL]     if (lastBarPaint == null) { [EOL]         throw new IllegalArgumentException("Null 'lastBarPaint' argument"); [EOL]     } [EOL]     this.firstBarPaint = firstBarPaint; [EOL]     this.lastBarPaint = lastBarPaint; [EOL]     this.positiveBarPaint = positiveBarPaint; [EOL]     this.negativeBarPaint = negativeBarPaint; [EOL]     setGradientPaintTransformer(new StandardGradientPaintTransformer(GradientPaintTransformType.CENTER_VERTICAL)); [EOL]     setMinimumBarLength(1.0); [EOL] } <line_num>: 149,175
public Paint getFirstBarPaint() { [EOL]     return this.firstBarPaint; [EOL] } <line_num>: 182,184
public void setFirstBarPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument"); [EOL]     } [EOL]     this.firstBarPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 192,198
public Paint getLastBarPaint() { [EOL]     return this.lastBarPaint; [EOL] } <line_num>: 205,207
public void setLastBarPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument"); [EOL]     } [EOL]     this.lastBarPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 215,221
public Paint getPositiveBarPaint() { [EOL]     return this.positiveBarPaint; [EOL] } <line_num>: 228,230
public void setPositiveBarPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument"); [EOL]     } [EOL]     this.positiveBarPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 237,243
public Paint getNegativeBarPaint() { [EOL]     return this.negativeBarPaint; [EOL] } <line_num>: 250,252
public void setNegativeBarPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument"); [EOL]     } [EOL]     this.negativeBarPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 260,266
public Range findRangeBounds(CategoryDataset dataset) { [EOL]     if (dataset == null) { [EOL]         return null; [EOL]     } [EOL]     boolean allItemsNull = true; [EOL]     double minimum = 0.0; [EOL]     double maximum = 0.0; [EOL]     int columnCount = dataset.getColumnCount(); [EOL]     for (int row = 0; row < dataset.getRowCount(); row++) { [EOL]         double runningTotal = 0.0; [EOL]         for (int column = 0; column <= columnCount - 1; column++) { [EOL]             Number n = dataset.getValue(row, column); [EOL]             if (n != null) { [EOL]                 allItemsNull = false; [EOL]                 double value = n.doubleValue(); [EOL]                 if (column == columnCount - 1) { [EOL]                     runningTotal = value; [EOL]                 } else { [EOL]                     runningTotal = runningTotal + value; [EOL]                 } [EOL]                 minimum = Math.min(minimum, runningTotal); [EOL]                 maximum = Math.max(maximum, runningTotal); [EOL]             } [EOL]         } [EOL]     } [EOL]     if (!allItemsNull) { [EOL]         return new Range(minimum, maximum); [EOL]     } else { [EOL]         return null; [EOL]     } [EOL] } <line_num>: 276,312
public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, int pass) { [EOL]     double previous = state.getSeriesRunningTotal(); [EOL]     if (column == dataset.getColumnCount() - 1) { [EOL]         previous = 0.0; [EOL]     } [EOL]     double current = 0.0; [EOL]     Number n = dataset.getValue(row, column); [EOL]     if (n != null) { [EOL]         current = previous + n.doubleValue(); [EOL]     } [EOL]     state.setSeriesRunningTotal(current); [EOL]     int categoryCount = getColumnCount(); [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     double rectX = 0.0; [EOL]     double rectY = 0.0; [EOL]     RectangleEdge rangeAxisLocation = plot.getRangeAxisEdge(); [EOL]     double j2dy0 = rangeAxis.valueToJava2D(previous, dataArea, rangeAxisLocation); [EOL]     double j2dy1 = rangeAxis.valueToJava2D(current, dataArea, rangeAxisLocation); [EOL]     double valDiff = current - previous; [EOL]     if (j2dy1 < j2dy0) { [EOL]         double temp = j2dy1; [EOL]         j2dy1 = j2dy0; [EOL]         j2dy0 = temp; [EOL]     } [EOL]     double rectWidth = state.getBarWidth(); [EOL]     double rectHeight = Math.max(getMinimumBarLength(), Math.abs(j2dy1 - j2dy0)); [EOL]     Comparable seriesKey = dataset.getRowKey(row); [EOL]     Comparable categoryKey = dataset.getColumnKey(column); [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         rectY = domainAxis.getCategorySeriesMiddle(categoryKey, seriesKey, dataset, getItemMargin(), dataArea, RectangleEdge.LEFT); [EOL]         rectX = j2dy0; [EOL]         rectHeight = state.getBarWidth(); [EOL]         rectY = rectY - rectHeight / 2.0; [EOL]         rectWidth = Math.max(getMinimumBarLength(), Math.abs(j2dy1 - j2dy0)); [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         rectX = domainAxis.getCategorySeriesMiddle(categoryKey, seriesKey, dataset, getItemMargin(), dataArea, RectangleEdge.TOP); [EOL]         rectX = rectX - rectWidth / 2.0; [EOL]         rectY = j2dy0; [EOL]     } [EOL]     Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight); [EOL]     Paint seriesPaint = getFirstBarPaint(); [EOL]     if (column == 0) { [EOL]         seriesPaint = getFirstBarPaint(); [EOL]     } else if (column == categoryCount - 1) { [EOL]         seriesPaint = getLastBarPaint(); [EOL]     } else { [EOL]         if (valDiff < 0.0) { [EOL]             seriesPaint = getNegativeBarPaint(); [EOL]         } else if (valDiff > 0.0) { [EOL]             seriesPaint = getPositiveBarPaint(); [EOL]         } else { [EOL]             seriesPaint = getLastBarPaint(); [EOL]         } [EOL]     } [EOL]     if (getGradientPaintTransformer() != null && seriesPaint instanceof GradientPaint) { [EOL]         GradientPaint gp = (GradientPaint) seriesPaint; [EOL]         seriesPaint = getGradientPaintTransformer().transform(gp, bar); [EOL]     } [EOL]     g2.setPaint(seriesPaint); [EOL]     g2.fill(bar); [EOL]     if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) { [EOL]         Stroke stroke = getItemOutlineStroke(row, column, selected); [EOL]         Paint paint = getItemOutlinePaint(row, column, selected); [EOL]         if (stroke != null && paint != null) { [EOL]             g2.setStroke(stroke); [EOL]             g2.setPaint(paint); [EOL]             g2.draw(bar); [EOL]         } [EOL]     } [EOL]     CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column, selected); [EOL]     if (generator != null && isItemLabelVisible(row, column, selected)) { [EOL]         drawItemLabelForBar(g2, plot, dataset, row, column, selected, generator, bar, (valDiff < 0.0)); [EOL]     } [EOL]     EntityCollection entities = state.getEntityCollection(); [EOL]     if (entities != null) { [EOL]         addEntity(entities, bar, dataset, row, column, selected); [EOL]     } [EOL] } <line_num>: 329,447
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!super.equals(obj)) { [EOL]         return false; [EOL]     } [EOL]     if (!(obj instanceof WaterfallBarRenderer)) { [EOL]         return false; [EOL]     } [EOL]     WaterfallBarRenderer that = (WaterfallBarRenderer) obj; [EOL]     if (!PaintUtilities.equal(this.firstBarPaint, that.firstBarPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.lastBarPaint, that.lastBarPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.positiveBarPaint, that.positiveBarPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.negativeBarPaint, that.negativeBarPaint)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 456,484
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.firstBarPaint, stream); [EOL]     SerialUtilities.writePaint(this.lastBarPaint, stream); [EOL]     SerialUtilities.writePaint(this.positiveBarPaint, stream); [EOL]     SerialUtilities.writePaint(this.negativeBarPaint, stream); [EOL] } <line_num>: 493,499
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.firstBarPaint = SerialUtilities.readPaint(stream); [EOL]     this.lastBarPaint = SerialUtilities.readPaint(stream); [EOL]     this.positiveBarPaint = SerialUtilities.readPaint(stream); [EOL]     this.negativeBarPaint = SerialUtilities.readPaint(stream); [EOL] } <line_num>: 509,516
