public BarRenderer() { [EOL]     super(); [EOL]     this.base = 0.0; [EOL]     this.includeBaseInRange = true; [EOL]     this.itemMargin = DEFAULT_ITEM_MARGIN; [EOL]     this.drawBarOutline = false; [EOL]     this.maximumBarWidth = 1.0; [EOL]     this.positiveItemLabelPositionFallback = null; [EOL]     this.negativeItemLabelPositionFallback = null; [EOL]     this.gradientPaintTransformer = new StandardGradientPaintTransformer(); [EOL]     this.minimumBarLength = 0.0; [EOL]     setBaseLegendShape(new Rectangle2D.Double(-4.0, -4.0, 8.0, 8.0)); [EOL]     this.barPainter = getDefaultBarPainter(); [EOL]     this.shadowsVisible = getDefaultShadowsVisible(); [EOL]     this.shadowPaint = Color.gray; [EOL]     this.shadowXOffset = 4.0; [EOL]     this.shadowYOffset = 4.0; [EOL] } <line_num>: 299,317
public static BarPainter getDefaultBarPainter() { [EOL]     return BarRenderer.defaultBarPainter; [EOL] } <line_num>: 173,175
public static void setDefaultBarPainter(BarPainter painter) { [EOL]     if (painter == null) { [EOL]         throw new IllegalArgumentException("Null 'painter' argument."); [EOL]     } [EOL]     BarRenderer.defaultBarPainter = painter; [EOL] } <line_num>: 184,189
public static boolean getDefaultShadowsVisible() { [EOL]     return BarRenderer.defaultShadowsVisible; [EOL] } <line_num>: 205,207
public static void setDefaultShadowsVisible(boolean visible) { [EOL]     BarRenderer.defaultShadowsVisible = visible; [EOL] } <line_num>: 218,220
public double getBase() { [EOL]     return this.base; [EOL] } <line_num>: 327,329
public void setBase(double base) { [EOL]     this.base = base; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 339,342
public double getItemMargin() { [EOL]     return this.itemMargin; [EOL] } <line_num>: 352,354
public void setItemMargin(double percent) { [EOL]     this.itemMargin = percent; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 366,369
public boolean isDrawBarOutline() { [EOL]     return this.drawBarOutline; [EOL] } <line_num>: 378,380
public void setDrawBarOutline(boolean draw) { [EOL]     this.drawBarOutline = draw; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 390,393
public double getMaximumBarWidth() { [EOL]     return this.maximumBarWidth; [EOL] } <line_num>: 403,405
public void setMaximumBarWidth(double percent) { [EOL]     this.maximumBarWidth = percent; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 416,419
public double getMinimumBarLength() { [EOL]     return this.minimumBarLength; [EOL] } <line_num>: 429,431
public void setMinimumBarLength(double min) { [EOL]     if (min < 0.0) { [EOL]         throw new IllegalArgumentException("Requires 'min' >= 0.0"); [EOL]     } [EOL]     this.minimumBarLength = min; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 447,453
public GradientPaintTransformer getGradientPaintTransformer() { [EOL]     return this.gradientPaintTransformer; [EOL] } <line_num>: 463,465
public void setGradientPaintTransformer(GradientPaintTransformer transformer) { [EOL]     this.gradientPaintTransformer = transformer; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 475,479
public ItemLabelPosition getPositiveItemLabelPositionFallback() { [EOL]     return this.positiveItemLabelPositionFallback; [EOL] } <line_num>: 489,491
public void setPositiveItemLabelPositionFallback(ItemLabelPosition position) { [EOL]     this.positiveItemLabelPositionFallback = position; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 502,506
public ItemLabelPosition getNegativeItemLabelPositionFallback() { [EOL]     return this.negativeItemLabelPositionFallback; [EOL] } <line_num>: 516,518
public void setNegativeItemLabelPositionFallback(ItemLabelPosition position) { [EOL]     this.negativeItemLabelPositionFallback = position; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 529,533
public boolean getIncludeBaseInRange() { [EOL]     return this.includeBaseInRange; [EOL] } <line_num>: 547,549
public void setIncludeBaseInRange(boolean include) { [EOL]     if (this.includeBaseInRange != include) { [EOL]         this.includeBaseInRange = include; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 563,568
public BarPainter getBarPainter() { [EOL]     return this.barPainter; [EOL] } <line_num>: 579,581
public void setBarPainter(BarPainter painter) { [EOL]     if (painter == null) { [EOL]         throw new IllegalArgumentException("Null 'painter' argument."); [EOL]     } [EOL]     this.barPainter = painter; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 593,599
public boolean getShadowsVisible() { [EOL]     return this.shadowsVisible; [EOL] } <line_num>: 609,611
public void setShadowVisible(boolean visible) { [EOL]     this.shadowsVisible = visible; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 621,624
public Paint getShadowPaint() { [EOL]     return this.shadowPaint; [EOL] } <line_num>: 635,637
public void setShadowPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.shadowPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 649,655
public double getShadowXOffset() { [EOL]     return this.shadowXOffset; [EOL] } <line_num>: 664,666
public void setShadowXOffset(double offset) { [EOL]     this.shadowXOffset = offset; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 676,679
public double getShadowYOffset() { [EOL]     return this.shadowYOffset; [EOL] } <line_num>: 688,690
public void setShadowYOffset(double offset) { [EOL]     this.shadowYOffset = offset; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 700,703
public CategoryItemRendererState initialise(Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryDataset dataset, PlotRenderingInfo info) { [EOL]     CategoryItemRendererState state = super.initialise(g2, dataArea, plot, dataset, info); [EOL]     calculateBarWidth(plot, dataArea, dataset, state); [EOL]     return state; [EOL] } <line_num>: 718,728
protected void calculateBarWidth(CategoryPlot plot, Rectangle2D dataArea, CategoryDataset dataset, CategoryItemRendererState state) { [EOL]     CategoryAxis domainAxis = getDomainAxis(plot, dataset); [EOL]     if (dataset != null) { [EOL]         int columns = dataset.getColumnCount(); [EOL]         int rows = state.getVisibleSeriesCount() >= 0 ? state.getVisibleSeriesCount() : dataset.getRowCount(); [EOL]         double space = 0.0; [EOL]         PlotOrientation orientation = plot.getOrientation(); [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             space = dataArea.getHeight(); [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             space = dataArea.getWidth(); [EOL]         } [EOL]         double maxWidth = space * getMaximumBarWidth(); [EOL]         double categoryMargin = 0.0; [EOL]         double currentItemMargin = 0.0; [EOL]         if (columns > 1) { [EOL]             categoryMargin = domainAxis.getCategoryMargin(); [EOL]         } [EOL]         if (rows > 1) { [EOL]             currentItemMargin = getItemMargin(); [EOL]         } [EOL]         double used = space * (1 - domainAxis.getLowerMargin() - domainAxis.getUpperMargin() - categoryMargin - currentItemMargin); [EOL]         if ((rows * columns) > 0) { [EOL]             state.setBarWidth(Math.min(used / (rows * columns), maxWidth)); [EOL]         } else { [EOL]             state.setBarWidth(Math.min(used, maxWidth)); [EOL]         } [EOL]     } [EOL] } <line_num>: 738,775
protected double calculateBarW0(CategoryPlot plot, PlotOrientation orientation, Rectangle2D dataArea, CategoryAxis domainAxis, CategoryItemRendererState state, int row, int column) { [EOL]     double space = 0.0; [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         space = dataArea.getHeight(); [EOL]     } else { [EOL]         space = dataArea.getWidth(); [EOL]     } [EOL]     double barW0 = domainAxis.getCategoryStart(column, getColumnCount(), dataArea, plot.getDomainAxisEdge()); [EOL]     int seriesCount = state.getVisibleSeriesCount() >= 0 ? state.getVisibleSeriesCount() : getRowCount(); [EOL]     int categoryCount = getColumnCount(); [EOL]     if (seriesCount > 1) { [EOL]         double seriesGap = space * getItemMargin() / (categoryCount * (seriesCount - 1)); [EOL]         double seriesW = calculateSeriesWidth(space, domainAxis, categoryCount, seriesCount); [EOL]         barW0 = barW0 + row * (seriesW + seriesGap) + (seriesW / 2.0) - (state.getBarWidth() / 2.0); [EOL]     } else { [EOL]         barW0 = domainAxis.getCategoryMiddle(column, getColumnCount(), dataArea, plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0; [EOL]     } [EOL]     return barW0; [EOL] } <line_num>: 792,826
protected double[] calculateBarL0L1(double value, double min, double max) { [EOL]     double barLow = Math.min(this.base, value); [EOL]     double barHigh = Math.max(this.base, value); [EOL]     if (barHigh < min) { [EOL]         return null; [EOL]     } [EOL]     if (barLow > max) { [EOL]         return null; [EOL]     } [EOL]     barLow = Math.max(barLow, min); [EOL]     barHigh = Math.min(barHigh, max); [EOL]     return new double[] { barLow, barHigh }; [EOL] } <line_num>: 838,850
public Range findRangeBounds(CategoryDataset dataset, boolean includeInterval) { [EOL]     if (dataset == null) { [EOL]         return null; [EOL]     } [EOL]     Range result = super.findRangeBounds(dataset, includeInterval); [EOL]     if (result != null) { [EOL]         if (this.includeBaseInRange) { [EOL]             result = Range.expandToInclude(result, this.base); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 864,876
public LegendItem getLegendItem(int datasetIndex, int series) { [EOL]     CategoryPlot cp = getPlot(); [EOL]     if (cp == null) { [EOL]         return null; [EOL]     } [EOL]     if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series)) { [EOL]         return null; [EOL]     } [EOL]     CategoryDataset dataset = cp.getDataset(datasetIndex); [EOL]     String label = getLegendItemLabelGenerator().generateLabel(dataset, series); [EOL]     String description = label; [EOL]     String toolTipText = null; [EOL]     if (getLegendItemToolTipGenerator() != null) { [EOL]         toolTipText = getLegendItemToolTipGenerator().generateLabel(dataset, series); [EOL]     } [EOL]     String urlText = null; [EOL]     if (getLegendItemURLGenerator() != null) { [EOL]         urlText = getLegendItemURLGenerator().generateLabel(dataset, series); [EOL]     } [EOL]     Shape shape = lookupLegendShape(series); [EOL]     Paint paint = lookupSeriesPaint(series); [EOL]     Paint outlinePaint = lookupSeriesOutlinePaint(series); [EOL]     Stroke outlineStroke = lookupSeriesOutlineStroke(series); [EOL]     LegendItem result = new LegendItem(label, description, toolTipText, urlText, true, shape, true, paint, isDrawBarOutline(), outlinePaint, outlineStroke, false, new Line2D.Float(), new BasicStroke(1.0f), Color.black); [EOL]     result.setLabelFont(lookupLegendTextFont(series)); [EOL]     Paint labelPaint = lookupLegendTextPaint(series); [EOL]     if (labelPaint != null) { [EOL]         result.setLabelPaint(labelPaint); [EOL]     } [EOL]     result.setDataset(dataset); [EOL]     result.setDatasetIndex(datasetIndex); [EOL]     result.setSeriesKey(dataset.getRowKey(series)); [EOL]     result.setSeriesIndex(series); [EOL]     if (this.gradientPaintTransformer != null) { [EOL]         result.setFillPaintTransformer(this.gradientPaintTransformer); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 886,934
public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, int pass) { [EOL]     int visibleRow = state.getVisibleSeriesIndex(row); [EOL]     if (visibleRow < 0) { [EOL]         return; [EOL]     } [EOL]     Number dataValue = dataset.getValue(row, column); [EOL]     if (dataValue == null) { [EOL]         return; [EOL]     } [EOL]     final double value = dataValue.doubleValue(); [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     double barW0 = calculateBarW0(plot, orientation, dataArea, domainAxis, state, visibleRow, column); [EOL]     double[] barL0L1 = calculateBarL0L1(value, rangeAxis.getLowerBound(), rangeAxis.getUpperBound()); [EOL]     if (barL0L1 == null) { [EOL]         return; [EOL]     } [EOL]     RectangleEdge edge = plot.getRangeAxisEdge(); [EOL]     double transL0 = rangeAxis.valueToJava2D(barL0L1[0], dataArea, edge); [EOL]     double transL1 = rangeAxis.valueToJava2D(barL0L1[1], dataArea, edge); [EOL]     boolean positive = (value >= this.base); [EOL]     boolean inverted = rangeAxis.isInverted(); [EOL]     double barL0 = Math.min(transL0, transL1); [EOL]     double barLength = Math.abs(transL1 - transL0); [EOL]     double barLengthAdj = 0.0; [EOL]     if (barLength > 0.0 && barLength < getMinimumBarLength()) { [EOL]         barLengthAdj = getMinimumBarLength() - barLength; [EOL]     } [EOL]     double barL0Adj = 0.0; [EOL]     RectangleEdge barBase; [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         if (positive && inverted || !positive && !inverted) { [EOL]             barL0Adj = barLengthAdj; [EOL]             barBase = RectangleEdge.RIGHT; [EOL]         } else { [EOL]             barBase = RectangleEdge.LEFT; [EOL]         } [EOL]     } else { [EOL]         if (positive && !inverted || !positive && inverted) { [EOL]             barL0Adj = barLengthAdj; [EOL]             barBase = RectangleEdge.BOTTOM; [EOL]         } else { [EOL]             barBase = RectangleEdge.TOP; [EOL]         } [EOL]     } [EOL]     Rectangle2D bar = null; [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         bar = new Rectangle2D.Double(barL0 - barL0Adj, barW0, barLength + barLengthAdj, state.getBarWidth()); [EOL]     } else { [EOL]         bar = new Rectangle2D.Double(barW0, barL0 - barL0Adj, state.getBarWidth(), barLength + barLengthAdj); [EOL]     } [EOL]     if (getShadowsVisible()) { [EOL]         this.barPainter.paintBarShadow(g2, this, row, column, selected, bar, barBase, true); [EOL]     } [EOL]     this.barPainter.paintBar(g2, this, row, column, selected, bar, barBase); [EOL]     CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column, selected); [EOL]     if (generator != null && isItemLabelVisible(row, column, selected)) { [EOL]         drawItemLabelForBar(g2, plot, dataset, row, column, selected, generator, bar, (value < 0.0)); [EOL]     } [EOL]     int datasetIndex = plot.indexOf(dataset); [EOL]     updateCrosshairValues(state.getCrosshairState(), dataset.getRowKey(row), dataset.getColumnKey(column), value, datasetIndex, barW0, barL0, orientation); [EOL]     EntityCollection entities = state.getEntityCollection(); [EOL]     if (entities != null) { [EOL]         addEntity(entities, bar, dataset, row, column, selected); [EOL]     } [EOL] } <line_num>: 951,1054
protected double calculateSeriesWidth(double space, CategoryAxis axis, int categories, int series) { [EOL]     double factor = 1.0 - getItemMargin() - axis.getLowerMargin() - axis.getUpperMargin(); [EOL]     if (categories > 1) { [EOL]         factor = factor - axis.getCategoryMargin(); [EOL]     } [EOL]     return (space * factor) / (categories * series); [EOL] } <line_num>: 1066,1074
protected void drawItemLabelForBar(Graphics2D g2, CategoryPlot plot, CategoryDataset dataset, int row, int column, boolean selected, CategoryItemLabelGenerator generator, Rectangle2D bar, boolean negative) { [EOL]     String label = generator.generateLabel(dataset, row, column); [EOL]     if (label == null) { [EOL]         return; [EOL]     } [EOL]     Font labelFont = getItemLabelFont(row, column, selected); [EOL]     g2.setFont(labelFont); [EOL]     Paint paint = getItemLabelPaint(row, column, selected); [EOL]     g2.setPaint(paint); [EOL]     ItemLabelPosition position = null; [EOL]     if (!negative) { [EOL]         position = getPositiveItemLabelPosition(row, column, selected); [EOL]     } else { [EOL]         position = getNegativeItemLabelPosition(row, column, selected); [EOL]     } [EOL]     Point2D anchorPoint = calculateLabelAnchorPoint(position.getItemLabelAnchor(), bar, plot.getOrientation()); [EOL]     if (isInternalAnchor(position.getItemLabelAnchor())) { [EOL]         Shape bounds = TextUtilities.calculateRotatedStringBounds(label, g2, (float) anchorPoint.getX(), (float) anchorPoint.getY(), position.getTextAnchor(), position.getAngle(), position.getRotationAnchor()); [EOL]         if (bounds != null) { [EOL]             if (!bar.contains(bounds.getBounds2D())) { [EOL]                 if (!negative) { [EOL]                     position = getPositiveItemLabelPositionFallback(); [EOL]                 } else { [EOL]                     position = getNegativeItemLabelPositionFallback(); [EOL]                 } [EOL]                 if (position != null) { [EOL]                     anchorPoint = calculateLabelAnchorPoint(position.getItemLabelAnchor(), bar, plot.getOrientation()); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     if (position != null) { [EOL]         TextUtilities.drawRotatedString(label, g2, (float) anchorPoint.getX(), (float) anchorPoint.getY(), position.getTextAnchor(), position.getAngle(), position.getRotationAnchor()); [EOL]     } [EOL] } <line_num>: 1093,1151
private Point2D calculateLabelAnchorPoint(ItemLabelAnchor anchor, Rectangle2D bar, PlotOrientation orientation) { [EOL]     Point2D result = null; [EOL]     double offset = getItemLabelAnchorOffset(); [EOL]     double x0 = bar.getX() - offset; [EOL]     double x1 = bar.getX(); [EOL]     double x2 = bar.getX() + offset; [EOL]     double x3 = bar.getCenterX(); [EOL]     double x4 = bar.getMaxX() - offset; [EOL]     double x5 = bar.getMaxX(); [EOL]     double x6 = bar.getMaxX() + offset; [EOL]     double y0 = bar.getMaxY() + offset; [EOL]     double y1 = bar.getMaxY(); [EOL]     double y2 = bar.getMaxY() - offset; [EOL]     double y3 = bar.getCenterY(); [EOL]     double y4 = bar.getMinY() + offset; [EOL]     double y5 = bar.getMinY(); [EOL]     double y6 = bar.getMinY() - offset; [EOL]     if (anchor == ItemLabelAnchor.CENTER) { [EOL]         result = new Point2D.Double(x3, y3); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE1) { [EOL]         result = new Point2D.Double(x4, y4); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE2) { [EOL]         result = new Point2D.Double(x4, y4); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE3) { [EOL]         result = new Point2D.Double(x4, y3); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE4) { [EOL]         result = new Point2D.Double(x4, y2); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE5) { [EOL]         result = new Point2D.Double(x4, y2); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE6) { [EOL]         result = new Point2D.Double(x3, y2); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE7) { [EOL]         result = new Point2D.Double(x2, y2); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE8) { [EOL]         result = new Point2D.Double(x2, y2); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE9) { [EOL]         result = new Point2D.Double(x2, y3); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE10) { [EOL]         result = new Point2D.Double(x2, y4); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE11) { [EOL]         result = new Point2D.Double(x2, y4); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE12) { [EOL]         result = new Point2D.Double(x3, y4); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE1) { [EOL]         result = new Point2D.Double(x5, y6); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE2) { [EOL]         result = new Point2D.Double(x6, y5); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE3) { [EOL]         result = new Point2D.Double(x6, y3); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE4) { [EOL]         result = new Point2D.Double(x6, y1); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE5) { [EOL]         result = new Point2D.Double(x5, y0); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE6) { [EOL]         result = new Point2D.Double(x3, y0); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE7) { [EOL]         result = new Point2D.Double(x1, y0); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE8) { [EOL]         result = new Point2D.Double(x0, y1); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE9) { [EOL]         result = new Point2D.Double(x0, y3); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE10) { [EOL]         result = new Point2D.Double(x0, y5); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE11) { [EOL]         result = new Point2D.Double(x1, y6); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE12) { [EOL]         result = new Point2D.Double(x3, y6); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1162,1262
private boolean isInternalAnchor(ItemLabelAnchor anchor) { [EOL]     return anchor == ItemLabelAnchor.CENTER || anchor == ItemLabelAnchor.INSIDE1 || anchor == ItemLabelAnchor.INSIDE2 || anchor == ItemLabelAnchor.INSIDE3 || anchor == ItemLabelAnchor.INSIDE4 || anchor == ItemLabelAnchor.INSIDE5 || anchor == ItemLabelAnchor.INSIDE6 || anchor == ItemLabelAnchor.INSIDE7 || anchor == ItemLabelAnchor.INSIDE8 || anchor == ItemLabelAnchor.INSIDE9 || anchor == ItemLabelAnchor.INSIDE10 || anchor == ItemLabelAnchor.INSIDE11 || anchor == ItemLabelAnchor.INSIDE12; [EOL] } <line_num>: 1271,1285
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof BarRenderer)) { [EOL]         return false; [EOL]     } [EOL]     BarRenderer that = (BarRenderer) obj; [EOL]     if (this.base != that.base) { [EOL]         return false; [EOL]     } [EOL]     if (this.itemMargin != that.itemMargin) { [EOL]         return false; [EOL]     } [EOL]     if (this.drawBarOutline != that.drawBarOutline) { [EOL]         return false; [EOL]     } [EOL]     if (this.maximumBarWidth != that.maximumBarWidth) { [EOL]         return false; [EOL]     } [EOL]     if (this.minimumBarLength != that.minimumBarLength) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.gradientPaintTransformer, that.gradientPaintTransformer)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.positiveItemLabelPositionFallback, that.positiveItemLabelPositionFallback)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.negativeItemLabelPositionFallback, that.negativeItemLabelPositionFallback)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.barPainter.equals(that.barPainter)) { [EOL]         return false; [EOL]     } [EOL]     if (this.shadowsVisible != that.shadowsVisible) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.shadowPaint, that.shadowPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (this.shadowXOffset != that.shadowXOffset) { [EOL]         return false; [EOL]     } [EOL]     if (this.shadowYOffset != that.shadowYOffset) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 1294,1345
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.shadowPaint, stream); [EOL] } <line_num>: 1354,1357
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.shadowPaint = SerialUtilities.readPaint(stream); [EOL] } <line_num>: 1367,1371
public Rectangle2D createHotSpotBounds(Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, CategoryItemRendererState state, Rectangle2D result) { [EOL]     int visibleRow = state.getVisibleSeriesIndex(row); [EOL]     if (visibleRow < 0) { [EOL]         return null; [EOL]     } [EOL]     if (!this.getItemVisible(row, column)) { [EOL]         return null; [EOL]     } [EOL]     Number dataValue = dataset.getValue(row, column); [EOL]     if (dataValue == null) { [EOL]         return null; [EOL]     } [EOL]     final double value = dataValue.doubleValue(); [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     double barW0 = calculateBarW0(plot, orientation, dataArea, domainAxis, state, visibleRow, column); [EOL]     double[] barL0L1 = calculateBarL0L1(value, rangeAxis.getLowerBound(), rangeAxis.getUpperBound()); [EOL]     if (barL0L1 == null) { [EOL]         return null; [EOL]     } [EOL]     RectangleEdge edge = plot.getRangeAxisEdge(); [EOL]     double transL0 = rangeAxis.valueToJava2D(barL0L1[0], dataArea, edge); [EOL]     double transL1 = rangeAxis.valueToJava2D(barL0L1[1], dataArea, edge); [EOL]     boolean positive = (value >= this.base); [EOL]     boolean inverted = rangeAxis.isInverted(); [EOL]     double barL0 = Math.min(transL0, transL1); [EOL]     double barLength = Math.abs(transL1 - transL0); [EOL]     double barLengthAdj = 0.0; [EOL]     if (barLength > 0.0 && barLength < getMinimumBarLength()) { [EOL]         barLengthAdj = getMinimumBarLength() - barLength; [EOL]     } [EOL]     double barL0Adj = 0.0; [EOL]     RectangleEdge barBase; [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         if (positive && inverted || !positive && !inverted) { [EOL]             barL0Adj = barLengthAdj; [EOL]             barBase = RectangleEdge.RIGHT; [EOL]         } else { [EOL]             barBase = RectangleEdge.LEFT; [EOL]         } [EOL]     } else { [EOL]         if (positive && !inverted || !positive && inverted) { [EOL]             barL0Adj = barLengthAdj; [EOL]             barBase = RectangleEdge.BOTTOM; [EOL]         } else { [EOL]             barBase = RectangleEdge.TOP; [EOL]         } [EOL]     } [EOL]     Rectangle2D bar = null; [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         bar = new Rectangle2D.Double(barL0 - barL0Adj, barW0, barLength + barLengthAdj, state.getBarWidth()); [EOL]     } else { [EOL]         bar = new Rectangle2D.Double(barW0, barL0 - barL0Adj, state.getBarWidth(), barLength + barLengthAdj); [EOL]     } [EOL]     return bar; [EOL] } <line_num>: 1373,1454
