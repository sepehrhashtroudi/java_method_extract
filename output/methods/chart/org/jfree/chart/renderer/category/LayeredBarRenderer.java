public LayeredBarRenderer() { [EOL]     super(); [EOL]     this.seriesBarWidthList = new ObjectList(); [EOL] } <line_num>: 95,98
public double getSeriesBarWidth(int series) { [EOL]     double result = Double.NaN; [EOL]     Number n = (Number) this.seriesBarWidthList.get(series); [EOL]     if (n != null) { [EOL]         result = n.doubleValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 108,115
public void setSeriesBarWidth(int series, double width) { [EOL]     this.seriesBarWidthList.set(series, new Double(width)); [EOL] } <line_num>: 124,126
protected void calculateBarWidth(CategoryPlot plot, Rectangle2D dataArea, CategoryDataset dataset, CategoryItemRendererState state) { [EOL]     CategoryAxis domainAxis = getDomainAxis(plot, dataset); [EOL]     if (dataset != null) { [EOL]         int columns = dataset.getColumnCount(); [EOL]         int rows = dataset.getRowCount(); [EOL]         double space = 0.0; [EOL]         PlotOrientation orientation = plot.getOrientation(); [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             space = dataArea.getHeight(); [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             space = dataArea.getWidth(); [EOL]         } [EOL]         double maxWidth = space * getMaximumBarWidth(); [EOL]         double categoryMargin = 0.0; [EOL]         if (columns > 1) { [EOL]             categoryMargin = domainAxis.getCategoryMargin(); [EOL]         } [EOL]         double used = space * (1 - domainAxis.getLowerMargin() - domainAxis.getUpperMargin() - categoryMargin); [EOL]         if ((rows * columns) > 0) { [EOL]             state.setBarWidth(Math.min(used / (dataset.getColumnCount()), maxWidth)); [EOL]         } else { [EOL]             state.setBarWidth(Math.min(used, maxWidth)); [EOL]         } [EOL]     } [EOL] } <line_num>: 136,172
public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, int pass) { [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         drawHorizontalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, dataset, row, column, selected); [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, dataset, row, column, selected); [EOL]     } [EOL] } <line_num>: 188,203
protected void drawHorizontalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected) { [EOL]     Number dataValue = dataset.getValue(row, column); [EOL]     if (dataValue == null) { [EOL]         return; [EOL]     } [EOL]     double value = dataValue.doubleValue(); [EOL]     double base = 0.0; [EOL]     double lclip = rangeAxis.getLowerBound(); [EOL]     double uclip = rangeAxis.getUpperBound(); [EOL]     if (uclip <= 0.0) { [EOL]         if (value >= uclip) { [EOL]             return; [EOL]         } [EOL]         base = uclip; [EOL]         if (value <= lclip) { [EOL]             value = lclip; [EOL]         } [EOL]     } else if (lclip <= 0.0) { [EOL]         if (value >= uclip) { [EOL]             value = uclip; [EOL]         } else { [EOL]             if (value <= lclip) { [EOL]                 value = lclip; [EOL]             } [EOL]         } [EOL]     } else { [EOL]         if (value <= lclip) { [EOL]             return; [EOL]         } [EOL]         base = lclip; [EOL]         if (value >= uclip) { [EOL]             value = uclip; [EOL]         } [EOL]     } [EOL]     RectangleEdge edge = plot.getRangeAxisEdge(); [EOL]     double transX1 = rangeAxis.valueToJava2D(base, dataArea, edge); [EOL]     double transX2 = rangeAxis.valueToJava2D(value, dataArea, edge); [EOL]     double rectX = Math.min(transX1, transX2); [EOL]     double rectWidth = Math.abs(transX2 - transX1); [EOL]     double rectY = domainAxis.getCategoryMiddle(column, getColumnCount(), dataArea, plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0; [EOL]     int seriesCount = getRowCount(); [EOL]     double shift = 0.0; [EOL]     double rectHeight = 0.0; [EOL]     double widthFactor = 1.0; [EOL]     double seriesBarWidth = getSeriesBarWidth(row); [EOL]     if (!Double.isNaN(seriesBarWidth)) { [EOL]         widthFactor = seriesBarWidth; [EOL]     } [EOL]     rectHeight = widthFactor * state.getBarWidth(); [EOL]     rectY = rectY + (1 - widthFactor) * state.getBarWidth() / 2.0; [EOL]     if (seriesCount > 1) { [EOL]         shift = rectHeight * 0.20 / (seriesCount - 1); [EOL]     } [EOL]     Rectangle2D bar = new Rectangle2D.Double(rectX, (rectY + ((seriesCount - 1 - row) * shift)), rectWidth, (rectHeight - (seriesCount - 1 - row) * shift * 2)); [EOL]     Paint itemPaint = getItemPaint(row, column, selected); [EOL]     GradientPaintTransformer t = getGradientPaintTransformer(); [EOL]     if (t != null && itemPaint instanceof GradientPaint) { [EOL]         itemPaint = t.transform((GradientPaint) itemPaint, bar); [EOL]     } [EOL]     g2.setPaint(itemPaint); [EOL]     g2.fill(bar); [EOL]     if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) { [EOL]         Stroke stroke = getItemOutlineStroke(row, column, selected); [EOL]         Paint paint = getItemOutlinePaint(row, column, selected); [EOL]         if (stroke != null && paint != null) { [EOL]             g2.setStroke(stroke); [EOL]             g2.setPaint(paint); [EOL]             g2.draw(bar); [EOL]         } [EOL]     } [EOL]     CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column, selected); [EOL]     if (generator != null && isItemLabelVisible(row, column, selected)) { [EOL]         drawItemLabelForBar(g2, plot, dataset, row, column, selected, generator, bar, (transX1 > transX2)); [EOL]     } [EOL]     EntityCollection entities = state.getEntityCollection(); [EOL]     if (entities != null) { [EOL]         addEntity(entities, bar, dataset, row, column, selected); [EOL]     } [EOL] } <line_num>: 221,328
protected void drawVerticalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected) { [EOL]     Number dataValue = dataset.getValue(row, column); [EOL]     if (dataValue == null) { [EOL]         return; [EOL]     } [EOL]     double rectX = domainAxis.getCategoryMiddle(column, getColumnCount(), dataArea, plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0; [EOL]     int seriesCount = getRowCount(); [EOL]     double value = dataValue.doubleValue(); [EOL]     double base = 0.0; [EOL]     double lclip = rangeAxis.getLowerBound(); [EOL]     double uclip = rangeAxis.getUpperBound(); [EOL]     if (uclip <= 0.0) { [EOL]         if (value >= uclip) { [EOL]             return; [EOL]         } [EOL]         base = uclip; [EOL]         if (value <= lclip) { [EOL]             value = lclip; [EOL]         } [EOL]     } else if (lclip <= 0.0) { [EOL]         if (value >= uclip) { [EOL]             value = uclip; [EOL]         } else { [EOL]             if (value <= lclip) { [EOL]                 value = lclip; [EOL]             } [EOL]         } [EOL]     } else { [EOL]         if (value <= lclip) { [EOL]             return; [EOL]         } [EOL]         base = rangeAxis.getLowerBound(); [EOL]         if (value >= uclip) { [EOL]             value = uclip; [EOL]         } [EOL]     } [EOL]     RectangleEdge edge = plot.getRangeAxisEdge(); [EOL]     double transY1 = rangeAxis.valueToJava2D(base, dataArea, edge); [EOL]     double transY2 = rangeAxis.valueToJava2D(value, dataArea, edge); [EOL]     double rectY = Math.min(transY2, transY1); [EOL]     double rectWidth = state.getBarWidth(); [EOL]     double rectHeight = Math.abs(transY2 - transY1); [EOL]     double shift = 0.0; [EOL]     rectWidth = 0.0; [EOL]     double widthFactor = 1.0; [EOL]     double seriesBarWidth = getSeriesBarWidth(row); [EOL]     if (!Double.isNaN(seriesBarWidth)) { [EOL]         widthFactor = seriesBarWidth; [EOL]     } [EOL]     rectWidth = widthFactor * state.getBarWidth(); [EOL]     rectX = rectX + (1 - widthFactor) * state.getBarWidth() / 2.0; [EOL]     if (seriesCount > 1) { [EOL]         shift = rectWidth * 0.20 / (seriesCount - 1); [EOL]     } [EOL]     Rectangle2D bar = new Rectangle2D.Double((rectX + ((seriesCount - 1 - row) * shift)), rectY, (rectWidth - (seriesCount - 1 - row) * shift * 2), rectHeight); [EOL]     Paint itemPaint = getItemPaint(row, column, selected); [EOL]     GradientPaintTransformer t = getGradientPaintTransformer(); [EOL]     if (t != null && itemPaint instanceof GradientPaint) { [EOL]         itemPaint = t.transform((GradientPaint) itemPaint, bar); [EOL]     } [EOL]     g2.setPaint(itemPaint); [EOL]     g2.fill(bar); [EOL]     if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) { [EOL]         Stroke stroke = getItemOutlineStroke(row, column, selected); [EOL]         Paint paint = getItemOutlinePaint(row, column, selected); [EOL]         if (stroke != null && paint != null) { [EOL]             g2.setStroke(stroke); [EOL]             g2.setPaint(paint); [EOL]             g2.draw(bar); [EOL]         } [EOL]     } [EOL]     double transX1 = rangeAxis.valueToJava2D(base, dataArea, edge); [EOL]     double transX2 = rangeAxis.valueToJava2D(value, dataArea, edge); [EOL]     CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column, selected); [EOL]     if (generator != null && isItemLabelVisible(row, column, selected)) { [EOL]         drawItemLabelForBar(g2, plot, dataset, row, column, selected, generator, bar, (transX1 > transX2)); [EOL]     } [EOL]     EntityCollection entities = state.getEntityCollection(); [EOL]     if (entities != null) { [EOL]         addEntity(entities, bar, dataset, row, column, selected); [EOL]     } [EOL] } <line_num>: 346,460
