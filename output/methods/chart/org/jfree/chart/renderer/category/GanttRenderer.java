public GanttRenderer() { [EOL]     super(); [EOL]     setIncludeBaseInRange(false); [EOL]     this.completePaint = Color.green; [EOL]     this.incompletePaint = Color.red; [EOL]     this.startPercent = 0.35; [EOL]     this.endPercent = 0.65; [EOL] } <line_num>: 116,123
public Paint getCompletePaint() { [EOL]     return this.completePaint; [EOL] } <line_num>: 132,134
public void setCompletePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.completePaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 144,150
public Paint getIncompletePaint() { [EOL]     return this.incompletePaint; [EOL] } <line_num>: 159,161
public void setIncompletePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.incompletePaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 171,177
public double getStartPercent() { [EOL]     return this.startPercent; [EOL] } <line_num>: 187,189
public void setStartPercent(double percent) { [EOL]     this.startPercent = percent; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 200,203
public double getEndPercent() { [EOL]     return this.endPercent; [EOL] } <line_num>: 213,215
public void setEndPercent(double percent) { [EOL]     this.endPercent = percent; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 226,229
public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, int pass) { [EOL]     if (dataset instanceof GanttCategoryDataset) { [EOL]         GanttCategoryDataset gcd = (GanttCategoryDataset) dataset; [EOL]         drawTasks(g2, state, dataArea, plot, domainAxis, rangeAxis, gcd, row, column, selected); [EOL]     } else { [EOL]         super.drawItem(g2, state, dataArea, plot, domainAxis, rangeAxis, dataset, row, column, selected, pass); [EOL]     } [EOL] } <line_num>: 245,260
protected void drawTasks(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, GanttCategoryDataset dataset, int row, int column, boolean selected) { [EOL]     int count = dataset.getSubIntervalCount(row, column); [EOL]     if (count == 0) { [EOL]         drawTask(g2, state, dataArea, plot, domainAxis, rangeAxis, dataset, row, column, selected); [EOL]     } [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     for (int subinterval = 0; subinterval < count; subinterval++) { [EOL]         RectangleEdge rangeAxisLocation = plot.getRangeAxisEdge(); [EOL]         Number value0 = dataset.getStartValue(row, column, subinterval); [EOL]         if (value0 == null) { [EOL]             return; [EOL]         } [EOL]         double translatedValue0 = rangeAxis.valueToJava2D(value0.doubleValue(), dataArea, rangeAxisLocation); [EOL]         Number value1 = dataset.getEndValue(row, column, subinterval); [EOL]         if (value1 == null) { [EOL]             return; [EOL]         } [EOL]         double translatedValue1 = rangeAxis.valueToJava2D(value1.doubleValue(), dataArea, rangeAxisLocation); [EOL]         if (translatedValue1 < translatedValue0) { [EOL]             double temp = translatedValue1; [EOL]             translatedValue1 = translatedValue0; [EOL]             translatedValue0 = temp; [EOL]         } [EOL]         double rectStart = calculateBarW0(plot, plot.getOrientation(), dataArea, domainAxis, state, row, column); [EOL]         double rectLength = Math.abs(translatedValue1 - translatedValue0); [EOL]         double rectBreadth = state.getBarWidth(); [EOL]         Rectangle2D bar = null; [EOL]         RectangleEdge barBase = null; [EOL]         if (plot.getOrientation() == PlotOrientation.HORIZONTAL) { [EOL]             bar = new Rectangle2D.Double(translatedValue0, rectStart, rectLength, rectBreadth); [EOL]             barBase = RectangleEdge.LEFT; [EOL]         } else if (plot.getOrientation() == PlotOrientation.VERTICAL) { [EOL]             bar = new Rectangle2D.Double(rectStart, translatedValue0, rectBreadth, rectLength); [EOL]             barBase = RectangleEdge.BOTTOM; [EOL]         } [EOL]         Rectangle2D completeBar = null; [EOL]         Rectangle2D incompleteBar = null; [EOL]         Number percent = dataset.getPercentComplete(row, column, subinterval); [EOL]         double start = getStartPercent(); [EOL]         double end = getEndPercent(); [EOL]         if (percent != null) { [EOL]             double p = percent.doubleValue(); [EOL]             if (orientation == PlotOrientation.HORIZONTAL) { [EOL]                 completeBar = new Rectangle2D.Double(translatedValue0, rectStart + start * rectBreadth, rectLength * p, rectBreadth * (end - start)); [EOL]                 incompleteBar = new Rectangle2D.Double(translatedValue0 + rectLength * p, rectStart + start * rectBreadth, rectLength * (1 - p), rectBreadth * (end - start)); [EOL]             } else if (orientation == PlotOrientation.VERTICAL) { [EOL]                 completeBar = new Rectangle2D.Double(rectStart + start * rectBreadth, translatedValue0 + rectLength * (1 - p), rectBreadth * (end - start), rectLength * p); [EOL]                 incompleteBar = new Rectangle2D.Double(rectStart + start * rectBreadth, translatedValue0, rectBreadth * (end - start), rectLength * (1 - p)); [EOL]             } [EOL]         } [EOL]         if (getShadowsVisible()) { [EOL]             getBarPainter().paintBarShadow(g2, this, row, column, selected, bar, barBase, true); [EOL]         } [EOL]         getBarPainter().paintBar(g2, this, row, column, selected, bar, barBase); [EOL]         if (completeBar != null) { [EOL]             g2.setPaint(getCompletePaint()); [EOL]             g2.fill(completeBar); [EOL]         } [EOL]         if (incompleteBar != null) { [EOL]             g2.setPaint(getIncompletePaint()); [EOL]             g2.fill(incompleteBar); [EOL]         } [EOL]         if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) { [EOL]             g2.setStroke(getItemStroke(row, column, selected)); [EOL]             g2.setPaint(getItemOutlinePaint(row, column, selected)); [EOL]             g2.draw(bar); [EOL]         } [EOL]         if (subinterval == count - 1) { [EOL]             int datasetIndex = plot.indexOf(dataset); [EOL]             Comparable columnKey = dataset.getColumnKey(column); [EOL]             Comparable rowKey = dataset.getRowKey(row); [EOL]             double xx = domainAxis.getCategorySeriesMiddle(columnKey, rowKey, dataset, getItemMargin(), dataArea, plot.getDomainAxisEdge()); [EOL]             updateCrosshairValues(state.getCrosshairState(), dataset.getRowKey(row), dataset.getColumnKey(column), value1.doubleValue(), datasetIndex, xx, translatedValue1, orientation); [EOL]         } [EOL]         if (state.getInfo() != null) { [EOL]             EntityCollection entities = state.getEntityCollection(); [EOL]             if (entities != null) { [EOL]                 addEntity(entities, bar, dataset, row, column, selected); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 276,405
protected void drawTask(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, GanttCategoryDataset dataset, int row, int column, boolean selected) { [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     RectangleEdge rangeAxisLocation = plot.getRangeAxisEdge(); [EOL]     Number value0 = dataset.getEndValue(row, column); [EOL]     if (value0 == null) { [EOL]         return; [EOL]     } [EOL]     double java2dValue0 = rangeAxis.valueToJava2D(value0.doubleValue(), dataArea, rangeAxisLocation); [EOL]     Number value1 = dataset.getStartValue(row, column); [EOL]     if (value1 == null) { [EOL]         return; [EOL]     } [EOL]     double java2dValue1 = rangeAxis.valueToJava2D(value1.doubleValue(), dataArea, rangeAxisLocation); [EOL]     if (java2dValue1 < java2dValue0) { [EOL]         double temp = java2dValue1; [EOL]         java2dValue1 = java2dValue0; [EOL]         java2dValue0 = temp; [EOL]         Number tempNum = value1; [EOL]         value1 = value0; [EOL]         value0 = tempNum; [EOL]     } [EOL]     double rectStart = calculateBarW0(plot, orientation, dataArea, domainAxis, state, row, column); [EOL]     double rectBreadth = state.getBarWidth(); [EOL]     double rectLength = Math.abs(java2dValue1 - java2dValue0); [EOL]     Rectangle2D bar = null; [EOL]     RectangleEdge barBase = null; [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         bar = new Rectangle2D.Double(java2dValue0, rectStart, rectLength, rectBreadth); [EOL]         barBase = RectangleEdge.LEFT; [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         bar = new Rectangle2D.Double(rectStart, java2dValue1, rectBreadth, rectLength); [EOL]         barBase = RectangleEdge.BOTTOM; [EOL]     } [EOL]     Rectangle2D completeBar = null; [EOL]     Rectangle2D incompleteBar = null; [EOL]     Number percent = dataset.getPercentComplete(row, column); [EOL]     double start = getStartPercent(); [EOL]     double end = getEndPercent(); [EOL]     if (percent != null) { [EOL]         double p = percent.doubleValue(); [EOL]         if (plot.getOrientation() == PlotOrientation.HORIZONTAL) { [EOL]             completeBar = new Rectangle2D.Double(java2dValue0, rectStart + start * rectBreadth, rectLength * p, rectBreadth * (end - start)); [EOL]             incompleteBar = new Rectangle2D.Double(java2dValue0 + rectLength * p, rectStart + start * rectBreadth, rectLength * (1 - p), rectBreadth * (end - start)); [EOL]         } else if (plot.getOrientation() == PlotOrientation.VERTICAL) { [EOL]             completeBar = new Rectangle2D.Double(rectStart + start * rectBreadth, java2dValue1 + rectLength * (1 - p), rectBreadth * (end - start), rectLength * p); [EOL]             incompleteBar = new Rectangle2D.Double(rectStart + start * rectBreadth, java2dValue1, rectBreadth * (end - start), rectLength * (1 - p)); [EOL]         } [EOL]     } [EOL]     if (getShadowsVisible()) { [EOL]         getBarPainter().paintBarShadow(g2, this, row, column, selected, bar, barBase, true); [EOL]     } [EOL]     getBarPainter().paintBar(g2, this, row, column, selected, bar, barBase); [EOL]     if (completeBar != null) { [EOL]         g2.setPaint(getCompletePaint()); [EOL]         g2.fill(completeBar); [EOL]     } [EOL]     if (incompleteBar != null) { [EOL]         g2.setPaint(getIncompletePaint()); [EOL]         g2.fill(incompleteBar); [EOL]     } [EOL]     if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) { [EOL]         Stroke stroke = getItemOutlineStroke(row, column, selected); [EOL]         Paint paint = getItemOutlinePaint(row, column, selected); [EOL]         if (stroke != null && paint != null) { [EOL]             g2.setStroke(stroke); [EOL]             g2.setPaint(paint); [EOL]             g2.draw(bar); [EOL]         } [EOL]     } [EOL]     CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column, selected); [EOL]     if (generator != null && isItemLabelVisible(row, column, selected)) { [EOL]         drawItemLabelForBar(g2, plot, dataset, row, column, selected, generator, bar, false); [EOL]     } [EOL]     int datasetIndex = plot.indexOf(dataset); [EOL]     Comparable columnKey = dataset.getColumnKey(column); [EOL]     Comparable rowKey = dataset.getRowKey(row); [EOL]     double xx = domainAxis.getCategorySeriesMiddle(columnKey, rowKey, dataset, getItemMargin(), dataArea, plot.getDomainAxisEdge()); [EOL]     updateCrosshairValues(state.getCrosshairState(), dataset.getRowKey(row), dataset.getColumnKey(column), value1.doubleValue(), datasetIndex, xx, java2dValue1, orientation); [EOL]     EntityCollection entities = state.getEntityCollection(); [EOL]     if (entities != null) { [EOL]         addEntity(entities, bar, dataset, row, column, selected); [EOL]     } [EOL] } <line_num>: 423,550
public double getItemMiddle(Comparable rowKey, Comparable columnKey, CategoryDataset dataset, CategoryAxis axis, Rectangle2D area, RectangleEdge edge) { [EOL]     return axis.getCategorySeriesMiddle(columnKey, rowKey, dataset, getItemMargin(), area, edge); [EOL] } <line_num>: 566,571
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof GanttRenderer)) { [EOL]         return false; [EOL]     } [EOL]     GanttRenderer that = (GanttRenderer) obj; [EOL]     if (!PaintUtilities.equal(this.completePaint, that.completePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.incompletePaint, that.incompletePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (this.startPercent != that.startPercent) { [EOL]         return false; [EOL]     } [EOL]     if (this.endPercent != that.endPercent) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 580,601
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.completePaint, stream); [EOL]     SerialUtilities.writePaint(this.incompletePaint, stream); [EOL] } <line_num>: 610,614
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.completePaint = SerialUtilities.readPaint(stream); [EOL]     this.incompletePaint = SerialUtilities.readPaint(stream); [EOL] } <line_num>: 624,629
