public State(PlotRenderingInfo info) { [EOL]     super(info); [EOL]     this.line = new Line2D.Double(); [EOL] } <line_num>: 103,106
public CategoryStepRenderer() { [EOL]     this(false); [EOL] } <line_num>: 125,127
public CategoryStepRenderer(boolean stagger) { [EOL]     this.stagger = stagger; [EOL]     setBaseLegendShape(new Rectangle2D.Double(-4.0, -3.0, 8.0, 6.0)); [EOL] } <line_num>: 135,138
public boolean getStagger() { [EOL]     return this.stagger; [EOL] } <line_num>: 145,147
public void setStagger(boolean shouldStagger) { [EOL]     this.stagger = shouldStagger; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 156,159
public LegendItem getLegendItem(int datasetIndex, int series) { [EOL]     CategoryPlot p = getPlot(); [EOL]     if (p == null) { [EOL]         return null; [EOL]     } [EOL]     if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series)) { [EOL]         return null; [EOL]     } [EOL]     CategoryDataset dataset = p.getDataset(datasetIndex); [EOL]     String label = getLegendItemLabelGenerator().generateLabel(dataset, series); [EOL]     String description = label; [EOL]     String toolTipText = null; [EOL]     if (getLegendItemToolTipGenerator() != null) { [EOL]         toolTipText = getLegendItemToolTipGenerator().generateLabel(dataset, series); [EOL]     } [EOL]     String urlText = null; [EOL]     if (getLegendItemURLGenerator() != null) { [EOL]         urlText = getLegendItemURLGenerator().generateLabel(dataset, series); [EOL]     } [EOL]     Shape shape = lookupLegendShape(series); [EOL]     Paint paint = lookupSeriesPaint(series); [EOL]     LegendItem item = new LegendItem(label, description, toolTipText, urlText, shape, paint); [EOL]     item.setLabelFont(lookupLegendTextFont(series)); [EOL]     Paint labelPaint = lookupLegendTextPaint(series); [EOL]     if (labelPaint != null) { [EOL]         item.setLabelPaint(labelPaint); [EOL]     } [EOL]     item.setSeriesKey(dataset.getRowKey(series)); [EOL]     item.setSeriesIndex(series); [EOL]     item.setDataset(dataset); [EOL]     item.setDatasetIndex(datasetIndex); [EOL]     return item; [EOL] } <line_num>: 169,210
protected CategoryItemRendererState createState(PlotRenderingInfo info) { [EOL]     return new State(info); [EOL] } <line_num>: 222,224
protected void drawLine(Graphics2D g2, State state, PlotOrientation orientation, double x0, double y0, double x1, double y1) { [EOL]     if (orientation == PlotOrientation.VERTICAL) { [EOL]         state.line.setLine(x0, y0, x1, y1); [EOL]         g2.draw(state.line); [EOL]     } else if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         state.line.setLine(y0, x0, y1, x1); [EOL]         g2.draw(state.line); [EOL]     } [EOL] } <line_num>: 243,256
public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, int pass) { [EOL]     if (!getItemVisible(row, column)) { [EOL]         return; [EOL]     } [EOL]     Number value = dataset.getValue(row, column); [EOL]     if (value == null) { [EOL]         return; [EOL]     } [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     double x1s = domainAxis.getCategoryStart(column, getColumnCount(), dataArea, plot.getDomainAxisEdge()); [EOL]     double x1 = domainAxis.getCategoryMiddle(column, getColumnCount(), dataArea, plot.getDomainAxisEdge()); [EOL]     double x1e = 2 * x1 - x1s; [EOL]     double y1 = rangeAxis.valueToJava2D(value.doubleValue(), dataArea, plot.getRangeAxisEdge()); [EOL]     g2.setPaint(getItemPaint(row, column, selected)); [EOL]     g2.setStroke(getItemStroke(row, column, selected)); [EOL]     if (column != 0) { [EOL]         Number previousValue = dataset.getValue(row, column - 1); [EOL]         if (previousValue != null) { [EOL]             double previous = previousValue.doubleValue(); [EOL]             double x0s = domainAxis.getCategoryStart(column - 1, getColumnCount(), dataArea, plot.getDomainAxisEdge()); [EOL]             double x0 = domainAxis.getCategoryMiddle(column - 1, getColumnCount(), dataArea, plot.getDomainAxisEdge()); [EOL]             double x0e = 2 * x0 - x0s; [EOL]             double y0 = rangeAxis.valueToJava2D(previous, dataArea, plot.getRangeAxisEdge()); [EOL]             if (getStagger()) { [EOL]                 int xStagger = row * STAGGER_WIDTH; [EOL]                 if (xStagger > (x1s - x0e)) { [EOL]                     xStagger = (int) (x1s - x0e); [EOL]                 } [EOL]                 x1s = x0e + xStagger; [EOL]             } [EOL]             drawLine(g2, (State) state, orientation, x0e, y0, x1s, y0); [EOL]             drawLine(g2, (State) state, orientation, x1s, y0, x1s, y1); [EOL]         } [EOL]     } [EOL]     drawLine(g2, (State) state, orientation, x1s, y1, x1e, y1); [EOL]     if (isItemLabelVisible(row, column, selected)) { [EOL]         drawItemLabel(g2, orientation, dataset, row, column, selected, x1, y1, (value.doubleValue() < 0.0)); [EOL]     } [EOL]     EntityCollection entities = state.getEntityCollection(); [EOL]     if (entities != null) { [EOL]         Rectangle2D hotspot = new Rectangle2D.Double(); [EOL]         if (orientation == PlotOrientation.VERTICAL) { [EOL]             hotspot.setRect(x1s, y1, x1e - x1s, 4.0); [EOL]         } else { [EOL]             hotspot.setRect(y1 - 2.0, x1s, 4.0, x1e - x1s); [EOL]         } [EOL]         addEntity(entities, hotspot, dataset, row, column, selected); [EOL]     } [EOL] } <line_num>: 272,347
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof CategoryStepRenderer)) { [EOL]         return false; [EOL]     } [EOL]     CategoryStepRenderer that = (CategoryStepRenderer) obj; [EOL]     if (this.stagger != that.stagger) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 356,368
