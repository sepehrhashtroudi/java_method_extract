public IntervalBarRenderer() { [EOL]     super(); [EOL] } <line_num>: 105,107
public Range findRangeBounds(CategoryDataset dataset) { [EOL]     return findRangeBounds(dataset, true); [EOL] } <line_num>: 119,121
public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, int pass) { [EOL]     if (dataset instanceof IntervalCategoryDataset) { [EOL]         IntervalCategoryDataset d = (IntervalCategoryDataset) dataset; [EOL]         drawInterval(g2, state, dataArea, plot, domainAxis, rangeAxis, d, row, column, selected); [EOL]     } else { [EOL]         super.drawItem(g2, state, dataArea, plot, domainAxis, rangeAxis, dataset, row, column, selected, pass); [EOL]     } [EOL] } <line_num>: 137,152
protected void drawInterval(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, IntervalCategoryDataset dataset, int row, int column, boolean selected) { [EOL]     int visibleRow = state.getVisibleSeriesIndex(row); [EOL]     if (visibleRow < 0) { [EOL]         return; [EOL]     } [EOL]     int seriesCount = state.getVisibleSeriesCount() >= 0 ? state.getVisibleSeriesCount() : getRowCount(); [EOL]     int categoryCount = getColumnCount(); [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     double rectX = 0.0; [EOL]     double rectY = 0.0; [EOL]     RectangleEdge domainAxisLocation = plot.getDomainAxisEdge(); [EOL]     RectangleEdge rangeAxisLocation = plot.getRangeAxisEdge(); [EOL]     Number value0 = dataset.getEndValue(row, column); [EOL]     if (value0 == null) { [EOL]         return; [EOL]     } [EOL]     double java2dValue0 = rangeAxis.valueToJava2D(value0.doubleValue(), dataArea, rangeAxisLocation); [EOL]     Number value1 = dataset.getStartValue(row, column); [EOL]     if (value1 == null) { [EOL]         return; [EOL]     } [EOL]     double java2dValue1 = rangeAxis.valueToJava2D(value1.doubleValue(), dataArea, rangeAxisLocation); [EOL]     if (java2dValue1 < java2dValue0) { [EOL]         double temp = java2dValue1; [EOL]         java2dValue1 = java2dValue0; [EOL]         java2dValue0 = temp; [EOL]     } [EOL]     double rectWidth = state.getBarWidth(); [EOL]     double rectHeight = Math.abs(java2dValue1 - java2dValue0); [EOL]     RectangleEdge barBase = RectangleEdge.LEFT; [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         rectY = domainAxis.getCategoryStart(column, getColumnCount(), dataArea, domainAxisLocation); [EOL]         if (seriesCount > 1) { [EOL]             double seriesGap = dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1)); [EOL]             rectY = rectY + visibleRow * (state.getBarWidth() + seriesGap); [EOL]         } else { [EOL]             rectY = rectY + visibleRow * state.getBarWidth(); [EOL]         } [EOL]         rectX = java2dValue0; [EOL]         rectHeight = state.getBarWidth(); [EOL]         rectWidth = Math.abs(java2dValue1 - java2dValue0); [EOL]         barBase = RectangleEdge.LEFT; [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         rectX = domainAxis.getCategoryStart(column, getColumnCount(), dataArea, domainAxisLocation); [EOL]         if (seriesCount > 1) { [EOL]             double seriesGap = dataArea.getWidth() * getItemMargin() / (categoryCount * (seriesCount - 1)); [EOL]             rectX = rectX + visibleRow * (state.getBarWidth() + seriesGap); [EOL]         } else { [EOL]             rectX = rectX + visibleRow * state.getBarWidth(); [EOL]         } [EOL]         rectY = java2dValue0; [EOL]         barBase = RectangleEdge.BOTTOM; [EOL]     } [EOL]     Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight); [EOL]     BarPainter painter = getBarPainter(); [EOL]     if (getShadowsVisible()) { [EOL]         painter.paintBarShadow(g2, this, row, column, selected, bar, barBase, false); [EOL]     } [EOL]     getBarPainter().paintBar(g2, this, row, column, selected, bar, barBase); [EOL]     CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column, selected); [EOL]     if (generator != null && isItemLabelVisible(row, column, selected)) { [EOL]         drawItemLabelForBar(g2, plot, dataset, row, column, selected, generator, bar, false); [EOL]     } [EOL]     EntityCollection entities = state.getEntityCollection(); [EOL]     if (entities != null) { [EOL]         addEntity(entities, bar, dataset, row, column, selected); [EOL]     } [EOL] } <line_num>: 170,280
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof IntervalBarRenderer)) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 289,298
