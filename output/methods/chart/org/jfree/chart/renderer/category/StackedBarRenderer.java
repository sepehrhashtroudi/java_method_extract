public StackedBarRenderer() { [EOL]     this(false); [EOL] } <line_num>: 143,145
public StackedBarRenderer(boolean renderAsPercentages) { [EOL]     super(); [EOL]     this.renderAsPercentages = renderAsPercentages; [EOL]     ItemLabelPosition p = new ItemLabelPosition(ItemLabelAnchor.CENTER, TextAnchor.CENTER); [EOL]     setBasePositiveItemLabelPosition(p); [EOL]     setBaseNegativeItemLabelPosition(p); [EOL]     setPositiveItemLabelPositionFallback(null); [EOL]     setNegativeItemLabelPositionFallback(null); [EOL] } <line_num>: 153,165
public boolean getRenderAsPercentages() { [EOL]     return this.renderAsPercentages; [EOL] } <line_num>: 176,178
public void setRenderAsPercentages(boolean asPercentages) { [EOL]     this.renderAsPercentages = asPercentages; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 189,192
public int getPassCount() { [EOL]     return 3; [EOL] } <line_num>: 202,204
public Range findRangeBounds(CategoryDataset dataset) { [EOL]     if (dataset == null) { [EOL]         return null; [EOL]     } [EOL]     if (this.renderAsPercentages) { [EOL]         return new Range(0.0, 1.0); [EOL]     } else { [EOL]         return DatasetUtilities.findStackedRangeBounds(dataset, getBase()); [EOL]     } [EOL] } <line_num>: 214,224
protected void calculateBarWidth(CategoryPlot plot, Rectangle2D dataArea, int rendererIndex, CategoryItemRendererState state) { [EOL]     CategoryAxis xAxis = plot.getDomainAxisForDataset(rendererIndex); [EOL]     CategoryDataset data = plot.getDataset(rendererIndex); [EOL]     if (data != null) { [EOL]         PlotOrientation orientation = plot.getOrientation(); [EOL]         double space = 0.0; [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             space = dataArea.getHeight(); [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             space = dataArea.getWidth(); [EOL]         } [EOL]         double maxWidth = space * getMaximumBarWidth(); [EOL]         int columns = data.getColumnCount(); [EOL]         double categoryMargin = 0.0; [EOL]         if (columns > 1) { [EOL]             categoryMargin = xAxis.getCategoryMargin(); [EOL]         } [EOL]         double used = space * (1 - xAxis.getLowerMargin() - xAxis.getUpperMargin() - categoryMargin); [EOL]         if (columns > 0) { [EOL]             state.setBarWidth(Math.min(used / columns, maxWidth)); [EOL]         } else { [EOL]             state.setBarWidth(Math.min(used, maxWidth)); [EOL]         } [EOL]     } [EOL] } <line_num>: 234,269
public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, int pass) { [EOL]     if (!isSeriesVisible(row)) { [EOL]         return; [EOL]     } [EOL]     Number dataValue = dataset.getValue(row, column); [EOL]     if (dataValue == null) { [EOL]         return; [EOL]     } [EOL]     double value = dataValue.doubleValue(); [EOL]     double total = 0.0; [EOL]     if (this.renderAsPercentages) { [EOL]         total = DataUtilities.calculateColumnTotal(dataset, column, state.getVisibleSeriesArray()); [EOL]         value = value / total; [EOL]     } [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     double barW0 = domainAxis.getCategoryMiddle(column, getColumnCount(), dataArea, plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0; [EOL]     double positiveBase = getBase(); [EOL]     double negativeBase = positiveBase; [EOL]     for (int i = 0; i < row; i++) { [EOL]         Number v = dataset.getValue(i, column); [EOL]         if (v != null && isSeriesVisible(i)) { [EOL]             double d = v.doubleValue(); [EOL]             if (this.renderAsPercentages) { [EOL]                 d = d / total; [EOL]             } [EOL]             if (d > 0) { [EOL]                 positiveBase = positiveBase + d; [EOL]             } else { [EOL]                 negativeBase = negativeBase + d; [EOL]             } [EOL]         } [EOL]     } [EOL]     double translatedBase; [EOL]     double translatedValue; [EOL]     boolean positive = (value > 0.0); [EOL]     boolean inverted = rangeAxis.isInverted(); [EOL]     RectangleEdge barBase; [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         if (positive && inverted || !positive && !inverted) { [EOL]             barBase = RectangleEdge.RIGHT; [EOL]         } else { [EOL]             barBase = RectangleEdge.LEFT; [EOL]         } [EOL]     } else { [EOL]         if (positive && !inverted || !positive && inverted) { [EOL]             barBase = RectangleEdge.BOTTOM; [EOL]         } else { [EOL]             barBase = RectangleEdge.TOP; [EOL]         } [EOL]     } [EOL]     RectangleEdge location = plot.getRangeAxisEdge(); [EOL]     if (positive) { [EOL]         translatedBase = rangeAxis.valueToJava2D(positiveBase, dataArea, location); [EOL]         translatedValue = rangeAxis.valueToJava2D(positiveBase + value, dataArea, location); [EOL]     } else { [EOL]         translatedBase = rangeAxis.valueToJava2D(negativeBase, dataArea, location); [EOL]         translatedValue = rangeAxis.valueToJava2D(negativeBase + value, dataArea, location); [EOL]     } [EOL]     double barL0 = Math.min(translatedBase, translatedValue); [EOL]     double barLength = Math.max(Math.abs(translatedValue - translatedBase), getMinimumBarLength()); [EOL]     Rectangle2D bar = null; [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         bar = new Rectangle2D.Double(barL0, barW0, barLength, state.getBarWidth()); [EOL]     } else { [EOL]         bar = new Rectangle2D.Double(barW0, barL0, state.getBarWidth(), barLength); [EOL]     } [EOL]     if (pass == 0) { [EOL]         if (getShadowsVisible()) { [EOL]             boolean pegToBase = (positive && (positiveBase == getBase())) || (!positive && (negativeBase == getBase())); [EOL]             getBarPainter().paintBarShadow(g2, this, row, column, selected, bar, barBase, pegToBase); [EOL]         } [EOL]     } else if (pass == 1) { [EOL]         getBarPainter().paintBar(g2, this, row, column, selected, bar, barBase); [EOL]         EntityCollection entities = state.getEntityCollection(); [EOL]         if (entities != null) { [EOL]             addEntity(entities, bar, dataset, row, column, selected); [EOL]         } [EOL]     } else if (pass == 2) { [EOL]         CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column, selected); [EOL]         if (generator != null && isItemLabelVisible(row, column, selected)) { [EOL]             drawItemLabelForBar(g2, plot, dataset, row, column, selected, generator, bar, (value < 0.0)); [EOL]         } [EOL]     } [EOL] } <line_num>: 285,407
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof StackedBarRenderer)) { [EOL]         return false; [EOL]     } [EOL]     StackedBarRenderer that = (StackedBarRenderer) obj; [EOL]     if (this.renderAsPercentages != that.renderAsPercentages) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 416,428
