public StackedBarRenderer3D() { [EOL]     this(false); [EOL] } <line_num>: 153,155
public StackedBarRenderer3D(double xOffset, double yOffset) { [EOL]     super(xOffset, yOffset); [EOL] } <line_num>: 163,165
public StackedBarRenderer3D(boolean renderAsPercentages) { [EOL]     super(); [EOL]     this.renderAsPercentages = renderAsPercentages; [EOL] } <line_num>: 175,178
public StackedBarRenderer3D(double xOffset, double yOffset, boolean renderAsPercentages) { [EOL]     super(xOffset, yOffset); [EOL]     this.renderAsPercentages = renderAsPercentages; [EOL] } <line_num>: 190,194
public boolean getRenderAsPercentages() { [EOL]     return this.renderAsPercentages; [EOL] } <line_num>: 205,207
public void setRenderAsPercentages(boolean asPercentages) { [EOL]     this.renderAsPercentages = asPercentages; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 218,221
public boolean getIgnoreZeroValues() { [EOL]     return this.ignoreZeroValues; [EOL] } <line_num>: 231,233
public void setIgnoreZeroValues(boolean ignore) { [EOL]     this.ignoreZeroValues = ignore; [EOL]     notifyListeners(new RendererChangeEvent(this)); [EOL] } <line_num>: 244,247
public Range findRangeBounds(CategoryDataset dataset) { [EOL]     if (dataset == null) { [EOL]         return null; [EOL]     } [EOL]     if (this.renderAsPercentages) { [EOL]         return new Range(0.0, 1.0); [EOL]     } else { [EOL]         return DatasetUtilities.findStackedRangeBounds(dataset); [EOL]     } [EOL] } <line_num>: 257,267
protected void calculateBarWidth(CategoryPlot plot, Rectangle2D dataArea, CategoryDataset dataset, CategoryItemRendererState state) { [EOL]     CategoryAxis domainAxis = getDomainAxis(plot, dataset); [EOL]     if (dataset != null) { [EOL]         PlotOrientation orientation = plot.getOrientation(); [EOL]         double space = 0.0; [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             space = dataArea.getHeight(); [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             space = dataArea.getWidth(); [EOL]         } [EOL]         double maxWidth = space * getMaximumBarWidth(); [EOL]         int columns = dataset.getColumnCount(); [EOL]         double categoryMargin = 0.0; [EOL]         if (columns > 1) { [EOL]             categoryMargin = domainAxis.getCategoryMargin(); [EOL]         } [EOL]         double used = space * (1 - domainAxis.getLowerMargin() - domainAxis.getUpperMargin() - categoryMargin); [EOL]         if (columns > 0) { [EOL]             state.setBarWidth(Math.min(used / columns, maxWidth)); [EOL]         } else { [EOL]             state.setBarWidth(Math.min(used, maxWidth)); [EOL]         } [EOL]     } [EOL] } <line_num>: 277,311
protected List createStackedValueList(CategoryDataset dataset, Comparable category, int[] includedRows, double base, boolean asPercentages) { [EOL]     List result = new ArrayList(); [EOL]     double posBase = base; [EOL]     double negBase = base; [EOL]     double total = 0.0; [EOL]     if (asPercentages) { [EOL]         total = DataUtilities.calculateColumnTotal(dataset, dataset.getColumnIndex(category), includedRows); [EOL]     } [EOL]     int baseIndex = -1; [EOL]     int rowCount = includedRows.length; [EOL]     for (int i = 0; i < rowCount; i++) { [EOL]         int r = includedRows[i]; [EOL]         Number n = dataset.getValue(dataset.getRowKey(r), category); [EOL]         if (n == null) { [EOL]             continue; [EOL]         } [EOL]         double v = n.doubleValue(); [EOL]         if (asPercentages) { [EOL]             v = v / total; [EOL]         } [EOL]         if ((v > 0.0) || (!this.ignoreZeroValues && v >= 0.0)) { [EOL]             if (baseIndex < 0) { [EOL]                 result.add(new Object[] { null, new Double(base) }); [EOL]                 baseIndex = 0; [EOL]             } [EOL]             posBase = posBase + v; [EOL]             result.add(new Object[] { new Integer(r), new Double(posBase) }); [EOL]         } else if (v < 0.0) { [EOL]             if (baseIndex < 0) { [EOL]                 result.add(new Object[] { null, new Double(base) }); [EOL]                 baseIndex = 0; [EOL]             } [EOL]             negBase = negBase + v; [EOL]             result.add(0, new Object[] { new Integer(-r - 1), new Double(negBase) }); [EOL]             baseIndex++; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 328,374
public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, int pass) { [EOL]     if (row < dataset.getRowCount() - 1) { [EOL]         return; [EOL]     } [EOL]     Comparable category = dataset.getColumnKey(column); [EOL]     List values = createStackedValueList(dataset, dataset.getColumnKey(column), state.getVisibleSeriesArray(), getBase(), this.renderAsPercentages); [EOL]     Rectangle2D adjusted = new Rectangle2D.Double(dataArea.getX(), dataArea.getY() + getYOffset(), dataArea.getWidth() - getXOffset(), dataArea.getHeight() - getYOffset()); [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         drawStackHorizontal(values, category, g2, state, adjusted, plot, domainAxis, rangeAxis, dataset); [EOL]     } else { [EOL]         drawStackVertical(values, category, g2, state, adjusted, plot, domainAxis, rangeAxis, dataset); [EOL]     } [EOL] } <line_num>: 392,426
protected void drawStackHorizontal(List values, Comparable category, Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset) { [EOL]     int column = dataset.getColumnIndex(category); [EOL]     double barX0 = domainAxis.getCategoryMiddle(column, dataset.getColumnCount(), dataArea, plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0; [EOL]     double barW = state.getBarWidth(); [EOL]     List itemLabelList = new ArrayList(); [EOL]     boolean inverted = rangeAxis.isInverted(); [EOL]     int blockCount = values.size() - 1; [EOL]     for (int k = 0; k < blockCount; k++) { [EOL]         int index = (inverted ? blockCount - k - 1 : k); [EOL]         Object[] prev = (Object[]) values.get(index); [EOL]         Object[] curr = (Object[]) values.get(index + 1); [EOL]         int series = 0; [EOL]         if (curr[0] == null) { [EOL]             series = -((Integer) prev[0]).intValue() - 1; [EOL]         } else { [EOL]             series = ((Integer) curr[0]).intValue(); [EOL]             if (series < 0) { [EOL]                 series = -((Integer) prev[0]).intValue() - 1; [EOL]             } [EOL]         } [EOL]         double v0 = ((Double) prev[1]).doubleValue(); [EOL]         double vv0 = rangeAxis.valueToJava2D(v0, dataArea, plot.getRangeAxisEdge()); [EOL]         double v1 = ((Double) curr[1]).doubleValue(); [EOL]         double vv1 = rangeAxis.valueToJava2D(v1, dataArea, plot.getRangeAxisEdge()); [EOL]         Shape[] faces = createHorizontalBlock(barX0, barW, vv0, vv1, inverted); [EOL]         Paint fillPaint = getItemPaint(series, column, false); [EOL]         Paint fillPaintDark = fillPaint; [EOL]         if (fillPaintDark instanceof Color) { [EOL]             fillPaintDark = ((Color) fillPaint).darker(); [EOL]         } [EOL]         boolean drawOutlines = isDrawBarOutline(); [EOL]         Paint outlinePaint = fillPaint; [EOL]         if (drawOutlines) { [EOL]             outlinePaint = getItemOutlinePaint(series, column, false); [EOL]             g2.setStroke(getItemOutlineStroke(series, column, false)); [EOL]         } [EOL]         for (int f = 0; f < 6; f++) { [EOL]             if (f == 5) { [EOL]                 g2.setPaint(fillPaint); [EOL]             } else { [EOL]                 g2.setPaint(fillPaintDark); [EOL]             } [EOL]             g2.fill(faces[f]); [EOL]             if (drawOutlines) { [EOL]                 g2.setPaint(outlinePaint); [EOL]                 g2.draw(faces[f]); [EOL]             } [EOL]         } [EOL]         itemLabelList.add(new Object[] { new Integer(series), faces[5].getBounds2D(), Boolean.valueOf(v0 < getBase()) }); [EOL]         EntityCollection entities = state.getEntityCollection(); [EOL]         if (entities != null) { [EOL]             addEntity(entities, faces[5], dataset, series, column, false); [EOL]         } [EOL]     } [EOL]     for (int i = 0; i < itemLabelList.size(); i++) { [EOL]         Object[] record = (Object[]) itemLabelList.get(i); [EOL]         int series = ((Integer) record[0]).intValue(); [EOL]         Rectangle2D bar = (Rectangle2D) record[1]; [EOL]         boolean neg = ((Boolean) record[2]).booleanValue(); [EOL]         CategoryItemLabelGenerator generator = getItemLabelGenerator(series, column, false); [EOL]         if (generator != null && isItemLabelVisible(series, column, false)) { [EOL]             drawItemLabelForBar(g2, plot, dataset, series, column, false, generator, bar, neg); [EOL]         } [EOL]     } [EOL] } <line_num>: 443,537
private Shape[] createHorizontalBlock(double x0, double width, double y0, double y1, boolean inverted) { [EOL]     Shape[] result = new Shape[6]; [EOL]     Point2D p00 = new Point2D.Double(y0, x0); [EOL]     Point2D p01 = new Point2D.Double(y0, x0 + width); [EOL]     Point2D p02 = new Point2D.Double(p01.getX() + getXOffset(), p01.getY() - getYOffset()); [EOL]     Point2D p03 = new Point2D.Double(p00.getX() + getXOffset(), p00.getY() - getYOffset()); [EOL]     Point2D p0 = new Point2D.Double(y1, x0); [EOL]     Point2D p1 = new Point2D.Double(y1, x0 + width); [EOL]     Point2D p2 = new Point2D.Double(p1.getX() + getXOffset(), p1.getY() - getYOffset()); [EOL]     Point2D p3 = new Point2D.Double(p0.getX() + getXOffset(), p0.getY() - getYOffset()); [EOL]     GeneralPath bottom = new GeneralPath(); [EOL]     bottom.moveTo((float) p1.getX(), (float) p1.getY()); [EOL]     bottom.lineTo((float) p01.getX(), (float) p01.getY()); [EOL]     bottom.lineTo((float) p02.getX(), (float) p02.getY()); [EOL]     bottom.lineTo((float) p2.getX(), (float) p2.getY()); [EOL]     bottom.closePath(); [EOL]     GeneralPath top = new GeneralPath(); [EOL]     top.moveTo((float) p0.getX(), (float) p0.getY()); [EOL]     top.lineTo((float) p00.getX(), (float) p00.getY()); [EOL]     top.lineTo((float) p03.getX(), (float) p03.getY()); [EOL]     top.lineTo((float) p3.getX(), (float) p3.getY()); [EOL]     top.closePath(); [EOL]     GeneralPath back = new GeneralPath(); [EOL]     back.moveTo((float) p2.getX(), (float) p2.getY()); [EOL]     back.lineTo((float) p02.getX(), (float) p02.getY()); [EOL]     back.lineTo((float) p03.getX(), (float) p03.getY()); [EOL]     back.lineTo((float) p3.getX(), (float) p3.getY()); [EOL]     back.closePath(); [EOL]     GeneralPath front = new GeneralPath(); [EOL]     front.moveTo((float) p0.getX(), (float) p0.getY()); [EOL]     front.lineTo((float) p1.getX(), (float) p1.getY()); [EOL]     front.lineTo((float) p01.getX(), (float) p01.getY()); [EOL]     front.lineTo((float) p00.getX(), (float) p00.getY()); [EOL]     front.closePath(); [EOL]     GeneralPath left = new GeneralPath(); [EOL]     left.moveTo((float) p0.getX(), (float) p0.getY()); [EOL]     left.lineTo((float) p1.getX(), (float) p1.getY()); [EOL]     left.lineTo((float) p2.getX(), (float) p2.getY()); [EOL]     left.lineTo((float) p3.getX(), (float) p3.getY()); [EOL]     left.closePath(); [EOL]     GeneralPath right = new GeneralPath(); [EOL]     right.moveTo((float) p00.getX(), (float) p00.getY()); [EOL]     right.lineTo((float) p01.getX(), (float) p01.getY()); [EOL]     right.lineTo((float) p02.getX(), (float) p02.getY()); [EOL]     right.lineTo((float) p03.getX(), (float) p03.getY()); [EOL]     right.closePath(); [EOL]     result[0] = bottom; [EOL]     result[1] = back; [EOL]     if (inverted) { [EOL]         result[2] = right; [EOL]         result[3] = left; [EOL]     } else { [EOL]         result[2] = left; [EOL]         result[3] = right; [EOL]     } [EOL]     result[4] = top; [EOL]     result[5] = front; [EOL]     return result; [EOL] } <line_num>: 552,623
protected void drawStackVertical(List values, Comparable category, Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset) { [EOL]     int column = dataset.getColumnIndex(category); [EOL]     double barX0 = domainAxis.getCategoryMiddle(column, dataset.getColumnCount(), dataArea, plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0; [EOL]     double barW = state.getBarWidth(); [EOL]     List itemLabelList = new ArrayList(); [EOL]     boolean inverted = rangeAxis.isInverted(); [EOL]     int blockCount = values.size() - 1; [EOL]     for (int k = 0; k < blockCount; k++) { [EOL]         int index = (inverted ? blockCount - k - 1 : k); [EOL]         Object[] prev = (Object[]) values.get(index); [EOL]         Object[] curr = (Object[]) values.get(index + 1); [EOL]         int series = 0; [EOL]         if (curr[0] == null) { [EOL]             series = -((Integer) prev[0]).intValue() - 1; [EOL]         } else { [EOL]             series = ((Integer) curr[0]).intValue(); [EOL]             if (series < 0) { [EOL]                 series = -((Integer) prev[0]).intValue() - 1; [EOL]             } [EOL]         } [EOL]         double v0 = ((Double) prev[1]).doubleValue(); [EOL]         double vv0 = rangeAxis.valueToJava2D(v0, dataArea, plot.getRangeAxisEdge()); [EOL]         double v1 = ((Double) curr[1]).doubleValue(); [EOL]         double vv1 = rangeAxis.valueToJava2D(v1, dataArea, plot.getRangeAxisEdge()); [EOL]         Shape[] faces = createVerticalBlock(barX0, barW, vv0, vv1, inverted); [EOL]         Paint fillPaint = getItemPaint(series, column, false); [EOL]         Paint fillPaintDark = fillPaint; [EOL]         if (fillPaintDark instanceof Color) { [EOL]             fillPaintDark = ((Color) fillPaint).darker(); [EOL]         } [EOL]         boolean drawOutlines = isDrawBarOutline(); [EOL]         Paint outlinePaint = fillPaint; [EOL]         if (drawOutlines) { [EOL]             outlinePaint = getItemOutlinePaint(series, column, false); [EOL]             g2.setStroke(getItemOutlineStroke(series, column, false)); [EOL]         } [EOL]         for (int f = 0; f < 6; f++) { [EOL]             if (f == 5) { [EOL]                 g2.setPaint(fillPaint); [EOL]             } else { [EOL]                 g2.setPaint(fillPaintDark); [EOL]             } [EOL]             g2.fill(faces[f]); [EOL]             if (drawOutlines) { [EOL]                 g2.setPaint(outlinePaint); [EOL]                 g2.draw(faces[f]); [EOL]             } [EOL]         } [EOL]         itemLabelList.add(new Object[] { new Integer(series), faces[5].getBounds2D(), Boolean.valueOf(v0 < getBase()) }); [EOL]         EntityCollection entities = state.getEntityCollection(); [EOL]         if (entities != null) { [EOL]             addEntity(entities, faces[5], dataset, series, column, false); [EOL]         } [EOL]     } [EOL]     for (int i = 0; i < itemLabelList.size(); i++) { [EOL]         Object[] record = (Object[]) itemLabelList.get(i); [EOL]         int series = ((Integer) record[0]).intValue(); [EOL]         Rectangle2D bar = (Rectangle2D) record[1]; [EOL]         boolean neg = ((Boolean) record[2]).booleanValue(); [EOL]         CategoryItemLabelGenerator generator = getItemLabelGenerator(series, column, false); [EOL]         if (generator != null && isItemLabelVisible(series, column, false)) { [EOL]             drawItemLabelForBar(g2, plot, dataset, series, column, false, generator, bar, neg); [EOL]         } [EOL]     } [EOL] } <line_num>: 640,736
private Shape[] createVerticalBlock(double x0, double width, double y0, double y1, boolean inverted) { [EOL]     Shape[] result = new Shape[6]; [EOL]     Point2D p00 = new Point2D.Double(x0, y0); [EOL]     Point2D p01 = new Point2D.Double(x0 + width, y0); [EOL]     Point2D p02 = new Point2D.Double(p01.getX() + getXOffset(), p01.getY() - getYOffset()); [EOL]     Point2D p03 = new Point2D.Double(p00.getX() + getXOffset(), p00.getY() - getYOffset()); [EOL]     Point2D p0 = new Point2D.Double(x0, y1); [EOL]     Point2D p1 = new Point2D.Double(x0 + width, y1); [EOL]     Point2D p2 = new Point2D.Double(p1.getX() + getXOffset(), p1.getY() - getYOffset()); [EOL]     Point2D p3 = new Point2D.Double(p0.getX() + getXOffset(), p0.getY() - getYOffset()); [EOL]     GeneralPath right = new GeneralPath(); [EOL]     right.moveTo((float) p1.getX(), (float) p1.getY()); [EOL]     right.lineTo((float) p01.getX(), (float) p01.getY()); [EOL]     right.lineTo((float) p02.getX(), (float) p02.getY()); [EOL]     right.lineTo((float) p2.getX(), (float) p2.getY()); [EOL]     right.closePath(); [EOL]     GeneralPath left = new GeneralPath(); [EOL]     left.moveTo((float) p0.getX(), (float) p0.getY()); [EOL]     left.lineTo((float) p00.getX(), (float) p00.getY()); [EOL]     left.lineTo((float) p03.getX(), (float) p03.getY()); [EOL]     left.lineTo((float) p3.getX(), (float) p3.getY()); [EOL]     left.closePath(); [EOL]     GeneralPath back = new GeneralPath(); [EOL]     back.moveTo((float) p2.getX(), (float) p2.getY()); [EOL]     back.lineTo((float) p02.getX(), (float) p02.getY()); [EOL]     back.lineTo((float) p03.getX(), (float) p03.getY()); [EOL]     back.lineTo((float) p3.getX(), (float) p3.getY()); [EOL]     back.closePath(); [EOL]     GeneralPath front = new GeneralPath(); [EOL]     front.moveTo((float) p0.getX(), (float) p0.getY()); [EOL]     front.lineTo((float) p1.getX(), (float) p1.getY()); [EOL]     front.lineTo((float) p01.getX(), (float) p01.getY()); [EOL]     front.lineTo((float) p00.getX(), (float) p00.getY()); [EOL]     front.closePath(); [EOL]     GeneralPath top = new GeneralPath(); [EOL]     top.moveTo((float) p0.getX(), (float) p0.getY()); [EOL]     top.lineTo((float) p1.getX(), (float) p1.getY()); [EOL]     top.lineTo((float) p2.getX(), (float) p2.getY()); [EOL]     top.lineTo((float) p3.getX(), (float) p3.getY()); [EOL]     top.closePath(); [EOL]     GeneralPath bottom = new GeneralPath(); [EOL]     bottom.moveTo((float) p00.getX(), (float) p00.getY()); [EOL]     bottom.lineTo((float) p01.getX(), (float) p01.getY()); [EOL]     bottom.lineTo((float) p02.getX(), (float) p02.getY()); [EOL]     bottom.lineTo((float) p03.getX(), (float) p03.getY()); [EOL]     bottom.closePath(); [EOL]     result[0] = bottom; [EOL]     result[1] = back; [EOL]     result[2] = left; [EOL]     result[3] = right; [EOL]     result[4] = top; [EOL]     result[5] = front; [EOL]     if (inverted) { [EOL]         result[0] = top; [EOL]         result[4] = bottom; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 751,822
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof StackedBarRenderer3D)) { [EOL]         return false; [EOL]     } [EOL]     StackedBarRenderer3D that = (StackedBarRenderer3D) obj; [EOL]     if (this.renderAsPercentages != that.getRenderAsPercentages()) { [EOL]         return false; [EOL]     } [EOL]     if (this.ignoreZeroValues != that.ignoreZeroValues) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 831,846
public int hashCode() { [EOL]     int hash = super.hashCode(); [EOL]     hash = HashUtilities.hashCode(hash, this.renderAsPercentages); [EOL]     hash = HashUtilities.hashCode(hash, this.ignoreZeroValues); [EOL]     return hash; [EOL] } <line_num>: 853,858
