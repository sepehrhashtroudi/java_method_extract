public PaintItem(double value, Paint paint) { [EOL]     this.value = value; [EOL]     this.paint = paint; [EOL] } <line_num>: 90,93
public LookupPaintScale() { [EOL]     this(0.0, 1.0, Color.lightGray); [EOL] } <line_num>: 181,183
public LookupPaintScale(double lowerBound, double upperBound, Paint defaultPaint) { [EOL]     if (lowerBound >= upperBound) { [EOL]         throw new IllegalArgumentException("Requires lowerBound < upperBound."); [EOL]     } [EOL]     if (defaultPaint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.lowerBound = lowerBound; [EOL]     this.upperBound = upperBound; [EOL]     this.defaultPaint = defaultPaint; [EOL]     this.lookupTable = new java.util.ArrayList(); [EOL] } <line_num>: 193,206
public int compareTo(Object obj) { [EOL]     PaintItem that = (PaintItem) obj; [EOL]     double d1 = this.value; [EOL]     double d2 = that.value; [EOL]     if (d1 > d2) { [EOL]         return 1; [EOL]     } [EOL]     if (d1 < d2) { [EOL]         return -1; [EOL]     } [EOL]     return 0; [EOL] } <line_num>: 98,109
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof PaintItem)) { [EOL]         return false; [EOL]     } [EOL]     PaintItem that = (PaintItem) obj; [EOL]     if (this.value != that.value) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.paint, that.paint)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 118,133
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.paint, stream); [EOL] } <line_num>: 142,145
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.paint = SerialUtilities.readPaint(stream); [EOL] } <line_num>: 155,159
public Paint getDefaultPaint() { [EOL]     return this.defaultPaint; [EOL] } <line_num>: 213,215
public double getLowerBound() { [EOL]     return this.lowerBound; [EOL] } <line_num>: 224,226
public double getUpperBound() { [EOL]     return this.upperBound; [EOL] } <line_num>: 235,237
public void add(double value, Paint paint) { [EOL]     PaintItem item = new PaintItem(value, paint); [EOL]     int index = Collections.binarySearch(this.lookupTable, item); [EOL]     if (index >= 0) { [EOL]         this.lookupTable.set(index, item); [EOL]     } else { [EOL]         this.lookupTable.add(-(index + 1), item); [EOL]     } [EOL] } <line_num>: 249,258
public Paint getPaint(double value) { [EOL]     if (value < this.lowerBound) { [EOL]         return this.defaultPaint; [EOL]     } [EOL]     if (value > this.upperBound) { [EOL]         return this.defaultPaint; [EOL]     } [EOL]     int count = this.lookupTable.size(); [EOL]     if (count == 0) { [EOL]         return this.defaultPaint; [EOL]     } [EOL]     PaintItem item = (PaintItem) this.lookupTable.get(0); [EOL]     if (value < item.value) { [EOL]         return this.defaultPaint; [EOL]     } [EOL]     int low = 0; [EOL]     int high = this.lookupTable.size() - 1; [EOL]     while (high - low > 1) { [EOL]         int current = (low + high) / 2; [EOL]         item = (PaintItem) this.lookupTable.get(current); [EOL]         if (value >= item.value) { [EOL]             low = current; [EOL]         } else { [EOL]             high = current; [EOL]         } [EOL]     } [EOL]     if (high > low) { [EOL]         item = (PaintItem) this.lookupTable.get(high); [EOL]         if (value < item.value) { [EOL]             item = (PaintItem) this.lookupTable.get(low); [EOL]         } [EOL]     } [EOL]     return (item != null ? item.paint : this.defaultPaint); [EOL] } <line_num>: 269,310
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof LookupPaintScale)) { [EOL]         return false; [EOL]     } [EOL]     LookupPaintScale that = (LookupPaintScale) obj; [EOL]     if (this.lowerBound != that.lowerBound) { [EOL]         return false; [EOL]     } [EOL]     if (this.upperBound != that.upperBound) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.defaultPaint, that.defaultPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.lookupTable.equals(that.lookupTable)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 320,341
public Object clone() throws CloneNotSupportedException { [EOL]     LookupPaintScale clone = (LookupPaintScale) super.clone(); [EOL]     clone.lookupTable = new java.util.ArrayList(this.lookupTable); [EOL]     return clone; [EOL] } <line_num>: 351,355
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.defaultPaint, stream); [EOL] } <line_num>: 364,367
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.defaultPaint = SerialUtilities.readPaint(stream); [EOL] } <line_num>: 377,381
