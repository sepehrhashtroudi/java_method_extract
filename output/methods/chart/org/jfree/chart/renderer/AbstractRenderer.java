public AbstractRenderer() { [EOL]     this.seriesVisibleList = new BooleanList(); [EOL]     this.baseSeriesVisible = true; [EOL]     this.seriesVisibleInLegendList = new BooleanList(); [EOL]     this.baseSeriesVisibleInLegend = true; [EOL]     this.paintList = new PaintList(); [EOL]     this.basePaint = DEFAULT_PAINT; [EOL]     this.autoPopulateSeriesPaint = true; [EOL]     this.fillPaintList = new PaintList(); [EOL]     this.baseFillPaint = Color.white; [EOL]     this.autoPopulateSeriesFillPaint = false; [EOL]     this.outlinePaintList = new PaintList(); [EOL]     this.baseOutlinePaint = DEFAULT_OUTLINE_PAINT; [EOL]     this.autoPopulateSeriesOutlinePaint = false; [EOL]     this.strokeList = new StrokeList(); [EOL]     this.baseStroke = DEFAULT_STROKE; [EOL]     this.autoPopulateSeriesStroke = true; [EOL]     this.outlineStrokeList = new StrokeList(); [EOL]     this.baseOutlineStroke = DEFAULT_OUTLINE_STROKE; [EOL]     this.autoPopulateSeriesOutlineStroke = false; [EOL]     this.shapeList = new ShapeList(); [EOL]     this.baseShape = DEFAULT_SHAPE; [EOL]     this.autoPopulateSeriesShape = true; [EOL]     this.itemLabelsVisibleList = new BooleanList(); [EOL]     this.baseItemLabelsVisible = false; [EOL]     this.itemLabelFontList = new ObjectList(); [EOL]     this.baseItemLabelFont = new Font("Tahoma", Font.PLAIN, 10); [EOL]     this.itemLabelPaintList = new PaintList(); [EOL]     this.baseItemLabelPaint = Color.black; [EOL]     this.positiveItemLabelPositionList = new ObjectList(); [EOL]     this.basePositiveItemLabelPosition = new ItemLabelPosition(ItemLabelAnchor.OUTSIDE12, TextAnchor.BOTTOM_CENTER); [EOL]     this.negativeItemLabelPositionList = new ObjectList(); [EOL]     this.baseNegativeItemLabelPosition = new ItemLabelPosition(ItemLabelAnchor.OUTSIDE6, TextAnchor.TOP_CENTER); [EOL]     this.createEntitiesList = new BooleanList(); [EOL]     this.baseCreateEntities = true; [EOL]     this.defaultEntityRadius = 3; [EOL]     this.legendShapeList = new ShapeList(); [EOL]     this.baseLegendShape = null; [EOL]     this.treatLegendShapeAsLine = false; [EOL]     this.legendTextFont = new ObjectList(); [EOL]     this.baseLegendTextFont = null; [EOL]     this.legendTextPaint = new PaintList(); [EOL]     this.baseLegendTextPaint = null; [EOL]     this.listenerList = new EventListenerList(); [EOL]     this.selectedItemAttributes = new RenderAttributes(); [EOL]     this.selectedItemAttributes.setDefaultFillPaint(Color.WHITE); [EOL] } <line_num>: 396,465
public abstract DrawingSupplier getDrawingSupplier(); <line_num>: 472,472
public RenderAttributes getSelectedItemAttributes() { [EOL]     return this.selectedItemAttributes; [EOL] } <line_num>: 482,484
public boolean getItemVisible(int series, int item) { [EOL]     return isSeriesVisible(series); [EOL] } <line_num>: 497,499
public boolean isSeriesVisible(int series) { [EOL]     boolean result = this.baseSeriesVisible; [EOL]     Boolean b = this.seriesVisibleList.getBoolean(series); [EOL]     if (b != null) { [EOL]         result = b.booleanValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 509,516
public Boolean getSeriesVisible(int series) { [EOL]     return this.seriesVisibleList.getBoolean(series); [EOL] } <line_num>: 527,529
public void setSeriesVisible(int series, Boolean visible) { [EOL]     setSeriesVisible(series, visible, true); [EOL] } <line_num>: 540,542
public void setSeriesVisible(int series, Boolean visible, boolean notify) { [EOL]     this.seriesVisibleList.setBoolean(series, visible); [EOL]     if (notify) { [EOL]         RendererChangeEvent e = new RendererChangeEvent(this, true); [EOL]         notifyListeners(e); [EOL]     } [EOL] } <line_num>: 555,565
public boolean getBaseSeriesVisible() { [EOL]     return this.baseSeriesVisible; [EOL] } <line_num>: 574,576
public void setBaseSeriesVisible(boolean visible) { [EOL]     setBaseSeriesVisible(visible, true); [EOL] } <line_num>: 586,589
public void setBaseSeriesVisible(boolean visible, boolean notify) { [EOL]     this.baseSeriesVisible = visible; [EOL]     if (notify) { [EOL]         RendererChangeEvent e = new RendererChangeEvent(this, true); [EOL]         notifyListeners(e); [EOL]     } [EOL] } <line_num>: 600,610
public boolean isSeriesVisibleInLegend(int series) { [EOL]     boolean result = this.baseSeriesVisibleInLegend; [EOL]     Boolean b = this.seriesVisibleInLegendList.getBoolean(series); [EOL]     if (b != null) { [EOL]         result = b.booleanValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 622,629
public Boolean getSeriesVisibleInLegend(int series) { [EOL]     return this.seriesVisibleInLegendList.getBoolean(series); [EOL] } <line_num>: 643,645
public void setSeriesVisibleInLegend(int series, Boolean visible) { [EOL]     setSeriesVisibleInLegend(series, visible, true); [EOL] } <line_num>: 656,658
public void setSeriesVisibleInLegend(int series, Boolean visible, boolean notify) { [EOL]     this.seriesVisibleInLegendList.setBoolean(series, visible); [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 671,677
public boolean getBaseSeriesVisibleInLegend() { [EOL]     return this.baseSeriesVisibleInLegend; [EOL] } <line_num>: 686,688
public void setBaseSeriesVisibleInLegend(boolean visible) { [EOL]     setBaseSeriesVisibleInLegend(visible, true); [EOL] } <line_num>: 698,701
public void setBaseSeriesVisibleInLegend(boolean visible, boolean notify) { [EOL]     this.baseSeriesVisibleInLegend = visible; [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 712,717
public Paint getItemPaint(int series, int item, boolean selected) { [EOL]     Paint result = null; [EOL]     if (selected) { [EOL]         result = this.selectedItemAttributes.getItemPaint(series, item); [EOL]     } [EOL]     if (result == null) { [EOL]         result = lookupSeriesPaint(series); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 735,744
public Paint lookupSeriesPaint(int series) { [EOL]     Paint seriesPaint = getSeriesPaint(series); [EOL]     if (seriesPaint == null && this.autoPopulateSeriesPaint) { [EOL]         DrawingSupplier supplier = getDrawingSupplier(); [EOL]         if (supplier != null) { [EOL]             seriesPaint = supplier.getNextPaint(); [EOL]             setSeriesPaint(series, seriesPaint, false); [EOL]         } [EOL]     } [EOL]     if (seriesPaint == null) { [EOL]         seriesPaint = this.basePaint; [EOL]     } [EOL]     return seriesPaint; [EOL] } <line_num>: 755,771
public Paint getSeriesPaint(int series) { [EOL]     return this.paintList.getPaint(series); [EOL] } <line_num>: 782,784
public void setSeriesPaint(int series, Paint paint) { [EOL]     setSeriesPaint(series, paint, true); [EOL] } <line_num>: 795,797
public void setSeriesPaint(int series, Paint paint, boolean notify) { [EOL]     this.paintList.setPaint(series, paint); [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 809,814
public void clearSeriesPaints(boolean notify) { [EOL]     this.paintList.clear(); [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 824,829
public Paint getBasePaint() { [EOL]     return this.basePaint; [EOL] } <line_num>: 838,840
public void setBasePaint(Paint paint) { [EOL]     setBasePaint(paint, true); [EOL] } <line_num>: 850,853
public void setBasePaint(Paint paint, boolean notify) { [EOL]     this.basePaint = paint; [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 864,869
public boolean getAutoPopulateSeriesPaint() { [EOL]     return this.autoPopulateSeriesPaint; [EOL] } <line_num>: 881,883
public void setAutoPopulateSeriesPaint(boolean auto) { [EOL]     this.autoPopulateSeriesPaint = auto; [EOL] } <line_num>: 895,897
public Paint getItemFillPaint(int series, int item, boolean selected) { [EOL]     Paint result = null; [EOL]     if (selected) { [EOL]         result = this.selectedItemAttributes.getItemFillPaint(series, item); [EOL]     } [EOL]     if (result == null) { [EOL]         result = lookupSeriesFillPaint(series); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 915,924
public Paint lookupSeriesFillPaint(int series) { [EOL]     Paint seriesFillPaint = getSeriesFillPaint(series); [EOL]     if (seriesFillPaint == null && this.autoPopulateSeriesFillPaint) { [EOL]         DrawingSupplier supplier = getDrawingSupplier(); [EOL]         if (supplier != null) { [EOL]             seriesFillPaint = supplier.getNextFillPaint(); [EOL]             setSeriesFillPaint(series, seriesFillPaint, false); [EOL]         } [EOL]     } [EOL]     if (seriesFillPaint == null) { [EOL]         seriesFillPaint = this.baseFillPaint; [EOL]     } [EOL]     return seriesFillPaint; [EOL] } <line_num>: 935,951
public Paint getSeriesFillPaint(int series) { [EOL]     return this.fillPaintList.getPaint(series); [EOL] } <line_num>: 962,964
public void setSeriesFillPaint(int series, Paint paint) { [EOL]     setSeriesFillPaint(series, paint, true); [EOL] } <line_num>: 975,977
public void setSeriesFillPaint(int series, Paint paint, boolean notify) { [EOL]     this.fillPaintList.setPaint(series, paint); [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 989,994
public Paint getBaseFillPaint() { [EOL]     return this.baseFillPaint; [EOL] } <line_num>: 1003,1005
public void setBaseFillPaint(Paint paint) { [EOL]     setBaseFillPaint(paint, true); [EOL] } <line_num>: 1015,1018
public void setBaseFillPaint(Paint paint, boolean notify) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.baseFillPaint = paint; [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 1029,1037
public boolean getAutoPopulateSeriesFillPaint() { [EOL]     return this.autoPopulateSeriesFillPaint; [EOL] } <line_num>: 1050,1052
public void setAutoPopulateSeriesFillPaint(boolean auto) { [EOL]     this.autoPopulateSeriesFillPaint = auto; [EOL] } <line_num>: 1065,1067
public Paint getItemOutlinePaint(int series, int item, boolean selected) { [EOL]     Paint result = null; [EOL]     if (selected) { [EOL]         result = this.selectedItemAttributes.getItemOutlinePaint(series, item); [EOL]     } [EOL]     if (result == null) { [EOL]         result = lookupSeriesOutlinePaint(series); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1085,1095
public Paint lookupSeriesOutlinePaint(int series) { [EOL]     Paint seriesOutlinePaint = getSeriesOutlinePaint(series); [EOL]     if (seriesOutlinePaint == null && this.autoPopulateSeriesOutlinePaint) { [EOL]         DrawingSupplier supplier = getDrawingSupplier(); [EOL]         if (supplier != null) { [EOL]             seriesOutlinePaint = supplier.getNextOutlinePaint(); [EOL]             setSeriesOutlinePaint(series, seriesOutlinePaint, false); [EOL]         } [EOL]     } [EOL]     if (seriesOutlinePaint == null) { [EOL]         seriesOutlinePaint = this.baseOutlinePaint; [EOL]     } [EOL]     return seriesOutlinePaint; [EOL] } <line_num>: 1106,1122
public Paint getSeriesOutlinePaint(int series) { [EOL]     return this.outlinePaintList.getPaint(series); [EOL] } <line_num>: 1133,1135
public void setSeriesOutlinePaint(int series, Paint paint) { [EOL]     setSeriesOutlinePaint(series, paint, true); [EOL] } <line_num>: 1146,1148
public void setSeriesOutlinePaint(int series, Paint paint, boolean notify) { [EOL]     this.outlinePaintList.setPaint(series, paint); [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 1160,1165
public Paint getBaseOutlinePaint() { [EOL]     return this.baseOutlinePaint; [EOL] } <line_num>: 1174,1176
public void setBaseOutlinePaint(Paint paint) { [EOL]     setBaseOutlinePaint(paint, true); [EOL] } <line_num>: 1186,1189
public void setBaseOutlinePaint(Paint paint, boolean notify) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.baseOutlinePaint = paint; [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 1200,1208
public boolean getAutoPopulateSeriesOutlinePaint() { [EOL]     return this.autoPopulateSeriesOutlinePaint; [EOL] } <line_num>: 1221,1223
public void setAutoPopulateSeriesOutlinePaint(boolean auto) { [EOL]     this.autoPopulateSeriesOutlinePaint = auto; [EOL] } <line_num>: 1236,1238
public Stroke getItemStroke(int series, int item, boolean selected) { [EOL]     return lookupSeriesStroke(series); [EOL] } <line_num>: 1255,1257
public Stroke lookupSeriesStroke(int series) { [EOL]     Stroke result = getSeriesStroke(series); [EOL]     if (result == null && this.autoPopulateSeriesStroke) { [EOL]         DrawingSupplier supplier = getDrawingSupplier(); [EOL]         if (supplier != null) { [EOL]             result = supplier.getNextStroke(); [EOL]             setSeriesStroke(series, result, false); [EOL]         } [EOL]     } [EOL]     if (result == null) { [EOL]         result = this.baseStroke; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1268,1284
public Stroke getSeriesStroke(int series) { [EOL]     return this.strokeList.getStroke(series); [EOL] } <line_num>: 1295,1297
public void setSeriesStroke(int series, Stroke stroke) { [EOL]     setSeriesStroke(series, stroke, true); [EOL] } <line_num>: 1308,1310
public void setSeriesStroke(int series, Stroke stroke, boolean notify) { [EOL]     this.strokeList.setStroke(series, stroke); [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 1322,1327
public void clearSeriesStrokes(boolean notify) { [EOL]     this.strokeList.clear(); [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 1337,1342
public Stroke getBaseStroke() { [EOL]     return this.baseStroke; [EOL] } <line_num>: 1351,1353
public void setBaseStroke(Stroke stroke) { [EOL]     setBaseStroke(stroke, true); [EOL] } <line_num>: 1363,1366
public void setBaseStroke(Stroke stroke, boolean notify) { [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' argument."); [EOL]     } [EOL]     this.baseStroke = stroke; [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 1377,1385
public boolean getAutoPopulateSeriesStroke() { [EOL]     return this.autoPopulateSeriesStroke; [EOL] } <line_num>: 1397,1399
public void setAutoPopulateSeriesStroke(boolean auto) { [EOL]     this.autoPopulateSeriesStroke = auto; [EOL] } <line_num>: 1411,1413
public Stroke getItemOutlineStroke(int series, int item, boolean selected) { [EOL]     return lookupSeriesOutlineStroke(series); [EOL] } <line_num>: 1431,1433
public Stroke lookupSeriesOutlineStroke(int series) { [EOL]     Stroke result = getSeriesOutlineStroke(series); [EOL]     if (result == null && this.autoPopulateSeriesOutlineStroke) { [EOL]         DrawingSupplier supplier = getDrawingSupplier(); [EOL]         if (supplier != null) { [EOL]             result = supplier.getNextOutlineStroke(); [EOL]             setSeriesOutlineStroke(series, result, false); [EOL]         } [EOL]     } [EOL]     if (result == null) { [EOL]         result = this.baseOutlineStroke; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1444,1460
public Stroke getSeriesOutlineStroke(int series) { [EOL]     return this.outlineStrokeList.getStroke(series); [EOL] } <line_num>: 1471,1473
public void setSeriesOutlineStroke(int series, Stroke stroke) { [EOL]     setSeriesOutlineStroke(series, stroke, true); [EOL] } <line_num>: 1484,1486
public void setSeriesOutlineStroke(int series, Stroke stroke, boolean notify) { [EOL]     this.outlineStrokeList.setStroke(series, stroke); [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 1498,1504
public Stroke getBaseOutlineStroke() { [EOL]     return this.baseOutlineStroke; [EOL] } <line_num>: 1513,1515
public void setBaseOutlineStroke(Stroke stroke) { [EOL]     setBaseOutlineStroke(stroke, true); [EOL] } <line_num>: 1525,1527
public void setBaseOutlineStroke(Stroke stroke, boolean notify) { [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' argument."); [EOL]     } [EOL]     this.baseOutlineStroke = stroke; [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 1539,1547
public boolean getAutoPopulateSeriesOutlineStroke() { [EOL]     return this.autoPopulateSeriesOutlineStroke; [EOL] } <line_num>: 1560,1562
public void setAutoPopulateSeriesOutlineStroke(boolean auto) { [EOL]     this.autoPopulateSeriesOutlineStroke = auto; [EOL] } <line_num>: 1575,1577
public Shape getItemShape(int series, int item, boolean selected) { [EOL]     Shape result = null; [EOL]     if (selected) { [EOL]         result = this.selectedItemAttributes.getItemShape(series, item); [EOL]     } [EOL]     if (result == null) { [EOL]         result = lookupSeriesShape(series); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1595,1604
public Shape lookupSeriesShape(int series) { [EOL]     Shape result = getSeriesShape(series); [EOL]     if (result == null && this.autoPopulateSeriesShape) { [EOL]         DrawingSupplier supplier = getDrawingSupplier(); [EOL]         if (supplier != null) { [EOL]             result = supplier.getNextShape(); [EOL]             setSeriesShape(series, result, false); [EOL]         } [EOL]     } [EOL]     if (result == null) { [EOL]         result = this.baseShape; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1615,1631
public Shape getSeriesShape(int series) { [EOL]     return this.shapeList.getShape(series); [EOL] } <line_num>: 1642,1644
public void setSeriesShape(int series, Shape shape) { [EOL]     setSeriesShape(series, shape, true); [EOL] } <line_num>: 1655,1657
public void setSeriesShape(int series, Shape shape, boolean notify) { [EOL]     this.shapeList.setShape(series, shape); [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 1669,1674
public Shape getBaseShape() { [EOL]     return this.baseShape; [EOL] } <line_num>: 1683,1685
public void setBaseShape(Shape shape) { [EOL]     setBaseShape(shape, true); [EOL] } <line_num>: 1695,1698
public void setBaseShape(Shape shape, boolean notify) { [EOL]     if (shape == null) { [EOL]         throw new IllegalArgumentException("Null 'shape' argument."); [EOL]     } [EOL]     this.baseShape = shape; [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 1709,1717
public boolean getAutoPopulateSeriesShape() { [EOL]     return this.autoPopulateSeriesShape; [EOL] } <line_num>: 1729,1731
public void setAutoPopulateSeriesShape(boolean auto) { [EOL]     this.autoPopulateSeriesShape = auto; [EOL] } <line_num>: 1743,1745
public boolean isItemLabelVisible(int series, int item, boolean selected) { [EOL]     return isSeriesItemLabelsVisible(series); [EOL] } <line_num>: 1761,1763
public boolean isSeriesItemLabelsVisible(int series) { [EOL]     Boolean b = this.itemLabelsVisibleList.getBoolean(series); [EOL]     if (b != null) { [EOL]         return b.booleanValue(); [EOL]     } [EOL]     return this.baseItemLabelsVisible; [EOL] } <line_num>: 1773,1779
public Boolean getSeriesItemLabelsVisible(int series) { [EOL]     return this.itemLabelsVisibleList.getBoolean(series); [EOL] } <line_num>: 1793,1795
public void setSeriesItemLabelsVisible(int series, boolean visible) { [EOL]     setSeriesItemLabelsVisible(series, Boolean.valueOf(visible)); [EOL] } <line_num>: 1804,1806
public void setSeriesItemLabelsVisible(int series, Boolean visible) { [EOL]     setSeriesItemLabelsVisible(series, visible, true); [EOL] } <line_num>: 1815,1817
public void setSeriesItemLabelsVisible(int series, Boolean visible, boolean notify) { [EOL]     this.itemLabelsVisibleList.setBoolean(series, visible); [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 1828,1834
public boolean getBaseItemLabelsVisible() { [EOL]     return this.baseItemLabelsVisible; [EOL] } <line_num>: 1844,1846
public void setBaseItemLabelsVisible(boolean visible) { [EOL]     setBaseItemLabelsVisible(visible, true); [EOL] } <line_num>: 1856,1858
public void setBaseItemLabelsVisible(boolean visible, boolean notify) { [EOL]     this.baseItemLabelsVisible = visible; [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 1869,1874
public Font getItemLabelFont(int series, int item, boolean selected) { [EOL]     Font result = getSeriesItemLabelFont(series); [EOL]     if (result == null) { [EOL]         result = this.baseItemLabelFont; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1889,1895
public Font getSeriesItemLabelFont(int series) { [EOL]     return (Font) this.itemLabelFontList.get(series); [EOL] } <line_num>: 1906,1908
public void setSeriesItemLabelFont(int series, Font font) { [EOL]     setSeriesItemLabelFont(series, font, true); [EOL] } <line_num>: 1919,1921
public void setSeriesItemLabelFont(int series, Font font, boolean notify) { [EOL]     this.itemLabelFontList.set(series, font); [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 1934,1939
public Font getBaseItemLabelFont() { [EOL]     return this.baseItemLabelFont; [EOL] } <line_num>: 1949,1951
public void setBaseItemLabelFont(Font font) { [EOL]     if (font == null) { [EOL]         throw new IllegalArgumentException("Null 'font' argument."); [EOL]     } [EOL]     setBaseItemLabelFont(font, true); [EOL] } <line_num>: 1961,1966
public void setBaseItemLabelFont(Font font, boolean notify) { [EOL]     this.baseItemLabelFont = font; [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 1978,1983
public Paint getItemLabelPaint(int series, int item, boolean selected) { [EOL]     Paint result = getSeriesItemLabelPaint(series); [EOL]     if (result == null) { [EOL]         result = this.baseItemLabelPaint; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1998,2004
public Paint getSeriesItemLabelPaint(int series) { [EOL]     return this.itemLabelPaintList.getPaint(series); [EOL] } <line_num>: 2015,2017
public void setSeriesItemLabelPaint(int series, Paint paint) { [EOL]     setSeriesItemLabelPaint(series, paint, true); [EOL] } <line_num>: 2028,2030
public void setSeriesItemLabelPaint(int series, Paint paint, boolean notify) { [EOL]     this.itemLabelPaintList.setPaint(series, paint); [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 2043,2049
public Paint getBaseItemLabelPaint() { [EOL]     return this.baseItemLabelPaint; [EOL] } <line_num>: 2058,2060
public void setBaseItemLabelPaint(Paint paint) { [EOL]     setBaseItemLabelPaint(paint, true); [EOL] } <line_num>: 2070,2073
public void setBaseItemLabelPaint(Paint paint, boolean notify) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.baseItemLabelPaint = paint; [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 2085,2093
public ItemLabelPosition getPositiveItemLabelPosition(int series, int item, boolean selected) { [EOL]     return getSeriesPositiveItemLabelPosition(series); [EOL] } <line_num>: 2108,2111
public ItemLabelPosition getSeriesPositiveItemLabelPosition(int series) { [EOL]     ItemLabelPosition position = (ItemLabelPosition) this.positiveItemLabelPositionList.get(series); [EOL]     if (position == null) { [EOL]         position = this.basePositiveItemLabelPosition; [EOL]     } [EOL]     return position; [EOL] } <line_num>: 2122,2134
public void setSeriesPositiveItemLabelPosition(int series, ItemLabelPosition position) { [EOL]     setSeriesPositiveItemLabelPosition(series, position, true); [EOL] } <line_num>: 2145,2148
public void setSeriesPositiveItemLabelPosition(int series, ItemLabelPosition position, boolean notify) { [EOL]     this.positiveItemLabelPositionList.set(series, position); [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 2161,2168
public ItemLabelPosition getBasePositiveItemLabelPosition() { [EOL]     return this.basePositiveItemLabelPosition; [EOL] } <line_num>: 2177,2179
public void setBasePositiveItemLabelPosition(ItemLabelPosition position) { [EOL]     setBasePositiveItemLabelPosition(position, true); [EOL] } <line_num>: 2188,2191
public void setBasePositiveItemLabelPosition(ItemLabelPosition position, boolean notify) { [EOL]     if (position == null) { [EOL]         throw new IllegalArgumentException("Null 'position' argument."); [EOL]     } [EOL]     this.basePositiveItemLabelPosition = position; [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 2202,2211
public ItemLabelPosition getNegativeItemLabelPosition(int series, int item, boolean selected) { [EOL]     return getSeriesNegativeItemLabelPosition(series); [EOL] } <line_num>: 2230,2233
public ItemLabelPosition getSeriesNegativeItemLabelPosition(int series) { [EOL]     ItemLabelPosition position = (ItemLabelPosition) this.negativeItemLabelPositionList.get(series); [EOL]     if (position == null) { [EOL]         position = this.baseNegativeItemLabelPosition; [EOL]     } [EOL]     return position; [EOL] } <line_num>: 2244,2254
public void setSeriesNegativeItemLabelPosition(int series, ItemLabelPosition position) { [EOL]     setSeriesNegativeItemLabelPosition(series, position, true); [EOL] } <line_num>: 2265,2268
public void setSeriesNegativeItemLabelPosition(int series, ItemLabelPosition position, boolean notify) { [EOL]     this.negativeItemLabelPositionList.set(series, position); [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 2281,2288
public ItemLabelPosition getBaseNegativeItemLabelPosition() { [EOL]     return this.baseNegativeItemLabelPosition; [EOL] } <line_num>: 2297,2299
public void setBaseNegativeItemLabelPosition(ItemLabelPosition position) { [EOL]     setBaseNegativeItemLabelPosition(position, true); [EOL] } <line_num>: 2309,2311
public void setBaseNegativeItemLabelPosition(ItemLabelPosition position, boolean notify) { [EOL]     if (position == null) { [EOL]         throw new IllegalArgumentException("Null 'position' argument."); [EOL]     } [EOL]     this.baseNegativeItemLabelPosition = position; [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 2322,2331
public double getItemLabelAnchorOffset() { [EOL]     return this.itemLabelAnchorOffset; [EOL] } <line_num>: 2340,2342
public void setItemLabelAnchorOffset(double offset) { [EOL]     this.itemLabelAnchorOffset = offset; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 2351,2354
public boolean getItemCreateEntity(int series, int item, boolean selected) { [EOL]     Boolean b = getSeriesCreateEntities(series); [EOL]     if (b != null) { [EOL]         return b.booleanValue(); [EOL]     } else { [EOL]         return this.baseCreateEntities; [EOL]     } [EOL] } <line_num>: 2368,2376
public Boolean getSeriesCreateEntities(int series) { [EOL]     return this.createEntitiesList.getBoolean(series); [EOL] } <line_num>: 2388,2390
public void setSeriesCreateEntities(int series, Boolean create) { [EOL]     setSeriesCreateEntities(series, create, true); [EOL] } <line_num>: 2401,2403
public void setSeriesCreateEntities(int series, Boolean create, boolean notify) { [EOL]     this.createEntitiesList.setBoolean(series, create); [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 2416,2422
public boolean getBaseCreateEntities() { [EOL]     return this.baseCreateEntities; [EOL] } <line_num>: 2431,2433
public void setBaseCreateEntities(boolean create) { [EOL]     setBaseCreateEntities(create, true); [EOL] } <line_num>: 2444,2447
public void setBaseCreateEntities(boolean create, boolean notify) { [EOL]     this.baseCreateEntities = create; [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 2459,2464
public int getDefaultEntityRadius() { [EOL]     return this.defaultEntityRadius; [EOL] } <line_num>: 2474,2476
public void setDefaultEntityRadius(int radius) { [EOL]     this.defaultEntityRadius = radius; [EOL] } <line_num>: 2486,2488
public Shape lookupLegendShape(int series) { [EOL]     Shape result = getLegendShape(series); [EOL]     if (result == null) { [EOL]         result = this.baseLegendShape; [EOL]     } [EOL]     if (result == null) { [EOL]         result = lookupSeriesShape(series); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 2499,2508
public Shape getLegendShape(int series) { [EOL]     return this.legendShapeList.getShape(series); [EOL] } <line_num>: 2522,2524
public void setLegendShape(int series, Shape shape) { [EOL]     this.legendShapeList.setShape(series, shape); [EOL]     fireChangeEvent(); [EOL] } <line_num>: 2535,2538
public Shape getBaseLegendShape() { [EOL]     return this.baseLegendShape; [EOL] } <line_num>: 2547,2549
public void setBaseLegendShape(Shape shape) { [EOL]     this.baseLegendShape = shape; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 2559,2562
protected boolean getTreatLegendShapeAsLine() { [EOL]     return this.treatLegendShapeAsLine; [EOL] } <line_num>: 2572,2574
protected void setTreatLegendShapeAsLine(boolean treatAsLine) { [EOL]     if (this.treatLegendShapeAsLine != treatAsLine) { [EOL]         this.treatLegendShapeAsLine = treatAsLine; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 2584,2589
public Font lookupLegendTextFont(int series) { [EOL]     Font result = getLegendTextFont(series); [EOL]     if (result == null) { [EOL]         result = this.baseLegendTextFont; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 2600,2606
public Font getLegendTextFont(int series) { [EOL]     return (Font) this.legendTextFont.get(series); [EOL] } <line_num>: 2620,2622
public void setLegendTextFont(int series, Font font) { [EOL]     this.legendTextFont.set(series, font); [EOL]     fireChangeEvent(); [EOL] } <line_num>: 2633,2636
public Font getBaseLegendTextFont() { [EOL]     return this.baseLegendTextFont; [EOL] } <line_num>: 2645,2647
public void setBaseLegendTextFont(Font font) { [EOL]     this.baseLegendTextFont = font; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 2657,2660
public Paint lookupLegendTextPaint(int series) { [EOL]     Paint result = getLegendTextPaint(series); [EOL]     if (result == null) { [EOL]         result = this.baseLegendTextPaint; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 2671,2677
public Paint getLegendTextPaint(int series) { [EOL]     return this.legendTextPaint.getPaint(series); [EOL] } <line_num>: 2691,2693
public void setLegendTextPaint(int series, Paint paint) { [EOL]     this.legendTextPaint.setPaint(series, paint); [EOL]     fireChangeEvent(); [EOL] } <line_num>: 2704,2707
public Paint getBaseLegendTextPaint() { [EOL]     return this.baseLegendTextPaint; [EOL] } <line_num>: 2716,2718
public void setBaseLegendTextPaint(Paint paint) { [EOL]     this.baseLegendTextPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 2728,2731
public boolean getDataBoundsIncludesVisibleSeriesOnly() { [EOL]     return this.dataBoundsIncludesVisibleSeriesOnly; [EOL] } <line_num>: 2741,2743
public void setDataBoundsIncludesVisibleSeriesOnly(boolean visibleOnly) { [EOL]     this.dataBoundsIncludesVisibleSeriesOnly = visibleOnly; [EOL]     notifyListeners(new RendererChangeEvent(this, true)); [EOL] } <line_num>: 2754,2757
protected Point2D calculateLabelAnchorPoint(ItemLabelAnchor anchor, double x, double y, PlotOrientation orientation) { [EOL]     Point2D result = null; [EOL]     if (anchor == ItemLabelAnchor.CENTER) { [EOL]         result = new Point2D.Double(x, y); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE1) { [EOL]         result = new Point2D.Double(x + OPP * this.itemLabelAnchorOffset, y - ADJ * this.itemLabelAnchorOffset); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE2) { [EOL]         result = new Point2D.Double(x + ADJ * this.itemLabelAnchorOffset, y - OPP * this.itemLabelAnchorOffset); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE3) { [EOL]         result = new Point2D.Double(x + this.itemLabelAnchorOffset, y); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE4) { [EOL]         result = new Point2D.Double(x + ADJ * this.itemLabelAnchorOffset, y + OPP * this.itemLabelAnchorOffset); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE5) { [EOL]         result = new Point2D.Double(x + OPP * this.itemLabelAnchorOffset, y + ADJ * this.itemLabelAnchorOffset); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE6) { [EOL]         result = new Point2D.Double(x, y + this.itemLabelAnchorOffset); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE7) { [EOL]         result = new Point2D.Double(x - OPP * this.itemLabelAnchorOffset, y + ADJ * this.itemLabelAnchorOffset); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE8) { [EOL]         result = new Point2D.Double(x - ADJ * this.itemLabelAnchorOffset, y + OPP * this.itemLabelAnchorOffset); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE9) { [EOL]         result = new Point2D.Double(x - this.itemLabelAnchorOffset, y); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE10) { [EOL]         result = new Point2D.Double(x - ADJ * this.itemLabelAnchorOffset, y - OPP * this.itemLabelAnchorOffset); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE11) { [EOL]         result = new Point2D.Double(x - OPP * this.itemLabelAnchorOffset, y - ADJ * this.itemLabelAnchorOffset); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE12) { [EOL]         result = new Point2D.Double(x, y - this.itemLabelAnchorOffset); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE1) { [EOL]         result = new Point2D.Double(x + 2.0 * OPP * this.itemLabelAnchorOffset, y - 2.0 * ADJ * this.itemLabelAnchorOffset); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE2) { [EOL]         result = new Point2D.Double(x + 2.0 * ADJ * this.itemLabelAnchorOffset, y - 2.0 * OPP * this.itemLabelAnchorOffset); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE3) { [EOL]         result = new Point2D.Double(x + 2.0 * this.itemLabelAnchorOffset, y); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE4) { [EOL]         result = new Point2D.Double(x + 2.0 * ADJ * this.itemLabelAnchorOffset, y + 2.0 * OPP * this.itemLabelAnchorOffset); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE5) { [EOL]         result = new Point2D.Double(x + 2.0 * OPP * this.itemLabelAnchorOffset, y + 2.0 * ADJ * this.itemLabelAnchorOffset); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE6) { [EOL]         result = new Point2D.Double(x, y + 2.0 * this.itemLabelAnchorOffset); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE7) { [EOL]         result = new Point2D.Double(x - 2.0 * OPP * this.itemLabelAnchorOffset, y + 2.0 * ADJ * this.itemLabelAnchorOffset); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE8) { [EOL]         result = new Point2D.Double(x - 2.0 * ADJ * this.itemLabelAnchorOffset, y + 2.0 * OPP * this.itemLabelAnchorOffset); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE9) { [EOL]         result = new Point2D.Double(x - 2.0 * this.itemLabelAnchorOffset, y); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE10) { [EOL]         result = new Point2D.Double(x - 2.0 * ADJ * this.itemLabelAnchorOffset, y - 2.0 * OPP * this.itemLabelAnchorOffset); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE11) { [EOL]         result = new Point2D.Double(x - 2.0 * OPP * this.itemLabelAnchorOffset, y - 2.0 * ADJ * this.itemLabelAnchorOffset); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE12) { [EOL]         result = new Point2D.Double(x, y - 2.0 * this.itemLabelAnchorOffset); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 2775,2882
public void addChangeListener(RendererChangeListener listener) { [EOL]     if (listener == null) { [EOL]         throw new IllegalArgumentException("Null 'listener' argument."); [EOL]     } [EOL]     this.listenerList.add(RendererChangeListener.class, listener); [EOL] } <line_num>: 2891,2896
public void removeChangeListener(RendererChangeListener listener) { [EOL]     if (listener == null) { [EOL]         throw new IllegalArgumentException("Null 'listener' argument."); [EOL]     } [EOL]     this.listenerList.remove(RendererChangeListener.class, listener); [EOL] } <line_num>: 2906,2911
public boolean hasListener(EventListener listener) { [EOL]     List list = Arrays.asList(this.listenerList.getListenerList()); [EOL]     return list.contains(listener); [EOL] } <line_num>: 2922,2925
protected void fireChangeEvent() { [EOL]     notifyListeners(new RendererChangeEvent(this)); [EOL] } <line_num>: 2932,2944
public void notifyListeners(RendererChangeEvent event) { [EOL]     Object[] ls = this.listenerList.getListenerList(); [EOL]     for (int i = ls.length - 2; i >= 0; i -= 2) { [EOL]         if (ls[i] == RendererChangeListener.class) { [EOL]             ((RendererChangeListener) ls[i + 1]).rendererChanged(event); [EOL]         } [EOL]     } [EOL] } <line_num>: 2951,2958
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof AbstractRenderer)) { [EOL]         return false; [EOL]     } [EOL]     AbstractRenderer that = (AbstractRenderer) obj; [EOL]     if (this.dataBoundsIncludesVisibleSeriesOnly != that.dataBoundsIncludesVisibleSeriesOnly) { [EOL]         return false; [EOL]     } [EOL]     if (this.treatLegendShapeAsLine != that.treatLegendShapeAsLine) { [EOL]         return false; [EOL]     } [EOL]     if (this.defaultEntityRadius != that.defaultEntityRadius) { [EOL]         return false; [EOL]     } [EOL]     if (!this.seriesVisibleList.equals(that.seriesVisibleList)) { [EOL]         return false; [EOL]     } [EOL]     if (this.baseSeriesVisible != that.baseSeriesVisible) { [EOL]         return false; [EOL]     } [EOL]     if (!this.seriesVisibleInLegendList.equals(that.seriesVisibleInLegendList)) { [EOL]         return false; [EOL]     } [EOL]     if (this.baseSeriesVisibleInLegend != that.baseSeriesVisibleInLegend) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.paintList, that.paintList)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.basePaint, that.basePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.fillPaintList, that.fillPaintList)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.baseFillPaint, that.baseFillPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.outlinePaintList, that.outlinePaintList)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.baseOutlinePaint, that.baseOutlinePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.strokeList, that.strokeList)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.baseStroke, that.baseStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.outlineStrokeList, that.outlineStrokeList)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.baseOutlineStroke, that.baseOutlineStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.shapeList, that.shapeList)) { [EOL]         return false; [EOL]     } [EOL]     if (!ShapeUtilities.equal(this.baseShape, that.baseShape)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.itemLabelsVisibleList, that.itemLabelsVisibleList)) { [EOL]         return false; [EOL]     } [EOL]     if (this.baseItemLabelsVisible != that.baseItemLabelsVisible) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.itemLabelFontList, that.itemLabelFontList)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.baseItemLabelFont, that.baseItemLabelFont)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.itemLabelPaintList, that.itemLabelPaintList)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.baseItemLabelPaint, that.baseItemLabelPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.positiveItemLabelPositionList, that.positiveItemLabelPositionList)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.basePositiveItemLabelPosition, that.basePositiveItemLabelPosition)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.negativeItemLabelPositionList, that.negativeItemLabelPositionList)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.baseNegativeItemLabelPosition, that.baseNegativeItemLabelPosition)) { [EOL]         return false; [EOL]     } [EOL]     if (this.itemLabelAnchorOffset != that.itemLabelAnchorOffset) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.createEntitiesList, that.createEntitiesList)) { [EOL]         return false; [EOL]     } [EOL]     if (this.baseCreateEntities != that.baseCreateEntities) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.legendShapeList, that.legendShapeList)) { [EOL]         return false; [EOL]     } [EOL]     if (!ShapeUtilities.equal(this.baseLegendShape, that.baseLegendShape)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.legendTextFont, that.legendTextFont)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.baseLegendTextFont, that.baseLegendTextFont)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.legendTextPaint, that.legendTextPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.baseLegendTextPaint, that.baseLegendTextPaint)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 2967,3112
public int hashCode() { [EOL]     int result = 193; [EOL]     result = HashUtilities.hashCode(result, this.seriesVisibleList); [EOL]     result = HashUtilities.hashCode(result, this.baseSeriesVisible); [EOL]     result = HashUtilities.hashCode(result, this.seriesVisibleInLegendList); [EOL]     result = HashUtilities.hashCode(result, this.baseSeriesVisibleInLegend); [EOL]     result = HashUtilities.hashCode(result, this.paintList); [EOL]     result = HashUtilities.hashCode(result, this.basePaint); [EOL]     result = HashUtilities.hashCode(result, this.fillPaintList); [EOL]     result = HashUtilities.hashCode(result, this.baseFillPaint); [EOL]     result = HashUtilities.hashCode(result, this.outlinePaintList); [EOL]     result = HashUtilities.hashCode(result, this.baseOutlinePaint); [EOL]     result = HashUtilities.hashCode(result, this.strokeList); [EOL]     result = HashUtilities.hashCode(result, this.baseStroke); [EOL]     result = HashUtilities.hashCode(result, this.outlineStrokeList); [EOL]     result = HashUtilities.hashCode(result, this.baseOutlineStroke); [EOL]     result = HashUtilities.hashCode(result, this.itemLabelsVisibleList); [EOL]     result = HashUtilities.hashCode(result, this.baseItemLabelsVisible); [EOL]     return result; [EOL] } <line_num>: 3119,3151
protected Object clone() throws CloneNotSupportedException { [EOL]     AbstractRenderer clone = (AbstractRenderer) super.clone(); [EOL]     if (this.seriesVisibleList != null) { [EOL]         clone.seriesVisibleList = (BooleanList) this.seriesVisibleList.clone(); [EOL]     } [EOL]     if (this.seriesVisibleInLegendList != null) { [EOL]         clone.seriesVisibleInLegendList = (BooleanList) this.seriesVisibleInLegendList.clone(); [EOL]     } [EOL]     if (this.paintList != null) { [EOL]         clone.paintList = (PaintList) this.paintList.clone(); [EOL]     } [EOL]     if (this.fillPaintList != null) { [EOL]         clone.fillPaintList = (PaintList) this.fillPaintList.clone(); [EOL]     } [EOL]     if (this.outlinePaintList != null) { [EOL]         clone.outlinePaintList = (PaintList) this.outlinePaintList.clone(); [EOL]     } [EOL]     if (this.strokeList != null) { [EOL]         clone.strokeList = (StrokeList) this.strokeList.clone(); [EOL]     } [EOL]     if (this.outlineStrokeList != null) { [EOL]         clone.outlineStrokeList = (StrokeList) this.outlineStrokeList.clone(); [EOL]     } [EOL]     if (this.shapeList != null) { [EOL]         clone.shapeList = (ShapeList) this.shapeList.clone(); [EOL]     } [EOL]     if (this.baseShape != null) { [EOL]         clone.baseShape = ShapeUtilities.clone(this.baseShape); [EOL]     } [EOL]     if (this.itemLabelsVisibleList != null) { [EOL]         clone.itemLabelsVisibleList = (BooleanList) this.itemLabelsVisibleList.clone(); [EOL]     } [EOL]     if (this.itemLabelFontList != null) { [EOL]         clone.itemLabelFontList = (ObjectList) this.itemLabelFontList.clone(); [EOL]     } [EOL]     if (this.itemLabelPaintList != null) { [EOL]         clone.itemLabelPaintList = (PaintList) this.itemLabelPaintList.clone(); [EOL]     } [EOL]     if (this.positiveItemLabelPositionList != null) { [EOL]         clone.positiveItemLabelPositionList = (ObjectList) this.positiveItemLabelPositionList.clone(); [EOL]     } [EOL]     if (this.negativeItemLabelPositionList != null) { [EOL]         clone.negativeItemLabelPositionList = (ObjectList) this.negativeItemLabelPositionList.clone(); [EOL]     } [EOL]     if (this.createEntitiesList != null) { [EOL]         clone.createEntitiesList = (BooleanList) this.createEntitiesList.clone(); [EOL]     } [EOL]     if (this.legendShapeList != null) { [EOL]         clone.legendShapeList = (ShapeList) this.legendShapeList.clone(); [EOL]     } [EOL]     if (this.legendTextFont != null) { [EOL]         clone.legendTextFont = (ObjectList) this.legendTextFont.clone(); [EOL]     } [EOL]     if (this.legendTextPaint != null) { [EOL]         clone.legendTextPaint = (PaintList) this.legendTextPaint.clone(); [EOL]     } [EOL]     clone.listenerList = new EventListenerList(); [EOL]     return clone; [EOL] } <line_num>: 3161,3261
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.basePaint, stream); [EOL]     SerialUtilities.writePaint(this.baseFillPaint, stream); [EOL]     SerialUtilities.writePaint(this.baseOutlinePaint, stream); [EOL]     SerialUtilities.writeStroke(this.baseStroke, stream); [EOL]     SerialUtilities.writeStroke(this.baseOutlineStroke, stream); [EOL]     SerialUtilities.writeShape(this.baseShape, stream); [EOL]     SerialUtilities.writePaint(this.baseItemLabelPaint, stream); [EOL]     SerialUtilities.writeShape(this.baseLegendShape, stream); [EOL]     SerialUtilities.writePaint(this.baseLegendTextPaint, stream); [EOL] } <line_num>: 3270,3281
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.basePaint = SerialUtilities.readPaint(stream); [EOL]     this.baseFillPaint = SerialUtilities.readPaint(stream); [EOL]     this.baseOutlinePaint = SerialUtilities.readPaint(stream); [EOL]     this.baseStroke = SerialUtilities.readStroke(stream); [EOL]     this.baseOutlineStroke = SerialUtilities.readStroke(stream); [EOL]     this.baseShape = SerialUtilities.readShape(stream); [EOL]     this.baseItemLabelPaint = SerialUtilities.readPaint(stream); [EOL]     this.baseLegendShape = SerialUtilities.readShape(stream); [EOL]     this.baseLegendTextPaint = SerialUtilities.readPaint(stream); [EOL]     this.listenerList = new EventListenerList(); [EOL] } <line_num>: 3291,3309
