public DefaultPolarItemRenderer() { [EOL]     this.seriesFilled = new BooleanList(); [EOL] } <line_num>: 94,96
public void setPlot(PolarPlot plot) { [EOL]     this.plot = plot; [EOL] } <line_num>: 105,107
public PolarPlot getPlot() { [EOL]     return this.plot; [EOL] } <line_num>: 116,118
public DrawingSupplier getDrawingSupplier() { [EOL]     DrawingSupplier result = null; [EOL]     PolarPlot p = getPlot(); [EOL]     if (p != null) { [EOL]         result = p.getDrawingSupplier(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 125,132
public boolean isSeriesFilled(int series) { [EOL]     boolean result = false; [EOL]     Boolean b = this.seriesFilled.getBoolean(series); [EOL]     if (b != null) { [EOL]         result = b.booleanValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 142,149
public void setSeriesFilled(int series, boolean filled) { [EOL]     this.seriesFilled.setBoolean(series, Boolean.valueOf(filled)); [EOL] } <line_num>: 157,159
public void drawSeries(Graphics2D g2, Rectangle2D dataArea, PlotRenderingInfo info, PolarPlot plot, XYDataset dataset, int seriesIndex) { [EOL]     Polygon poly = new Polygon(); [EOL]     int numPoints = dataset.getItemCount(seriesIndex); [EOL]     for (int i = 0; i < numPoints; i++) { [EOL]         double theta = dataset.getXValue(seriesIndex, i); [EOL]         double radius = dataset.getYValue(seriesIndex, i); [EOL]         Point p = plot.translateValueThetaRadiusToJava2D(theta, radius, dataArea); [EOL]         poly.addPoint(p.x, p.y); [EOL]     } [EOL]     g2.setPaint(lookupSeriesPaint(seriesIndex)); [EOL]     g2.setStroke(lookupSeriesStroke(seriesIndex)); [EOL]     if (isSeriesFilled(seriesIndex)) { [EOL]         Composite savedComposite = g2.getComposite(); [EOL]         g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f)); [EOL]         g2.fill(poly); [EOL]         g2.setComposite(savedComposite); [EOL]     } else { [EOL]         g2.draw(poly); [EOL]     } [EOL] } <line_num>: 171,199
public void drawAngularGridLines(Graphics2D g2, PolarPlot plot, List ticks, Rectangle2D dataArea) { [EOL]     g2.setFont(plot.getAngleLabelFont()); [EOL]     g2.setStroke(plot.getAngleGridlineStroke()); [EOL]     g2.setPaint(plot.getAngleGridlinePaint()); [EOL]     double axisMin = plot.getAxis().getLowerBound(); [EOL]     double maxRadius = plot.getMaxRadius(); [EOL]     Point center = plot.translateValueThetaRadiusToJava2D(axisMin, axisMin, dataArea); [EOL]     Iterator iterator = ticks.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         NumberTick tick = (NumberTick) iterator.next(); [EOL]         Point p = plot.translateValueThetaRadiusToJava2D(tick.getNumber().doubleValue(), maxRadius, dataArea); [EOL]         g2.setPaint(plot.getAngleGridlinePaint()); [EOL]         g2.drawLine(center.x, center.y, p.x, p.y); [EOL]         if (plot.isAngleLabelsVisible()) { [EOL]             int x = p.x; [EOL]             int y = p.y; [EOL]             g2.setPaint(plot.getAngleLabelPaint()); [EOL]             TextUtilities.drawAlignedString(tick.getText(), g2, x, y, TextAnchor.CENTER); [EOL]         } [EOL]     } [EOL] } <line_num>: 209,238
public void drawRadialGridLines(Graphics2D g2, PolarPlot plot, ValueAxis radialAxis, List ticks, Rectangle2D dataArea) { [EOL]     g2.setFont(radialAxis.getTickLabelFont()); [EOL]     g2.setPaint(plot.getRadiusGridlinePaint()); [EOL]     g2.setStroke(plot.getRadiusGridlineStroke()); [EOL]     double axisMin = radialAxis.getLowerBound(); [EOL]     Point center = plot.translateValueThetaRadiusToJava2D(axisMin, axisMin, dataArea); [EOL]     Iterator iterator = ticks.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         NumberTick tick = (NumberTick) iterator.next(); [EOL]         Point p = plot.translateValueThetaRadiusToJava2D(90.0, tick.getNumber().doubleValue(), dataArea); [EOL]         int r = p.x - center.x; [EOL]         int upperLeftX = center.x - r; [EOL]         int upperLeftY = center.y - r; [EOL]         int d = 2 * r; [EOL]         Ellipse2D ring = new Ellipse2D.Double(upperLeftX, upperLeftY, d, d); [EOL]         g2.setPaint(plot.getRadiusGridlinePaint()); [EOL]         g2.draw(ring); [EOL]     } [EOL] } <line_num>: 249,276
public LegendItem getLegendItem(int series) { [EOL]     LegendItem result = null; [EOL]     PolarPlot polarPlot = getPlot(); [EOL]     if (polarPlot != null) { [EOL]         XYDataset dataset = polarPlot.getDataset(); [EOL]         if (dataset != null) { [EOL]             String label = dataset.getSeriesKey(series).toString(); [EOL]             String description = label; [EOL]             Shape shape = lookupSeriesShape(series); [EOL]             Paint paint = lookupSeriesPaint(series); [EOL]             Paint outlinePaint = lookupSeriesOutlinePaint(series); [EOL]             Stroke outlineStroke = lookupSeriesOutlineStroke(series); [EOL]             result = new LegendItem(label, description, null, null, shape, paint, outlineStroke, outlinePaint); [EOL]             result.setDataset(dataset); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 285,303
public boolean equals(Object obj) { [EOL]     if (obj == null) { [EOL]         return false; [EOL]     } [EOL]     if (!(obj instanceof DefaultPolarItemRenderer)) { [EOL]         return false; [EOL]     } [EOL]     DefaultPolarItemRenderer that = (DefaultPolarItemRenderer) obj; [EOL]     if (!this.seriesFilled.equals(that.seriesFilled)) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 313,325
public Object clone() throws CloneNotSupportedException { [EOL]     DefaultPolarItemRenderer clone = (DefaultPolarItemRenderer) super.clone(); [EOL]     clone.seriesFilled = (BooleanList) this.seriesFilled.clone(); [EOL]     return clone; [EOL] } <line_num>: 334,339
