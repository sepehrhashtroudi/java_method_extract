public XYBubbleRenderer() { [EOL]     this(SCALE_ON_BOTH_AXES); [EOL] } <line_num>: 125,127
public XYBubbleRenderer(int scaleType) { [EOL]     super(); [EOL]     if (scaleType < 0 || scaleType > 2) { [EOL]         throw new IllegalArgumentException("Invalid 'scaleType'."); [EOL]     } [EOL]     this.scaleType = scaleType; [EOL]     setBaseLegendShape(new Ellipse2D.Double(-4.0, -4.0, 8.0, 8.0)); [EOL] } <line_num>: 136,143
public int getScaleType() { [EOL]     return this.scaleType; [EOL] } <line_num>: 151,153
public void drawItem(Graphics2D g2, XYItemRendererState state, Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset, int series, int item, boolean selected, int pass) { [EOL]     if (!getItemVisible(series, item)) { [EOL]         return; [EOL]     } [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     double x = dataset.getXValue(series, item); [EOL]     double y = dataset.getYValue(series, item); [EOL]     double z = Double.NaN; [EOL]     if (dataset instanceof XYZDataset) { [EOL]         XYZDataset xyzData = (XYZDataset) dataset; [EOL]         z = xyzData.getZValue(series, item); [EOL]     } [EOL]     if (!Double.isNaN(z)) { [EOL]         RectangleEdge domainAxisLocation = plot.getDomainAxisEdge(); [EOL]         RectangleEdge rangeAxisLocation = plot.getRangeAxisEdge(); [EOL]         double transX = domainAxis.valueToJava2D(x, dataArea, domainAxisLocation); [EOL]         double transY = rangeAxis.valueToJava2D(y, dataArea, rangeAxisLocation); [EOL]         double transDomain = 0.0; [EOL]         double transRange = 0.0; [EOL]         double zero; [EOL]         switch(getScaleType()) { [EOL]             case SCALE_ON_DOMAIN_AXIS: [EOL]                 zero = domainAxis.valueToJava2D(0.0, dataArea, domainAxisLocation); [EOL]                 transDomain = domainAxis.valueToJava2D(z, dataArea, domainAxisLocation) - zero; [EOL]                 transRange = transDomain; [EOL]                 break; [EOL]             case SCALE_ON_RANGE_AXIS: [EOL]                 zero = rangeAxis.valueToJava2D(0.0, dataArea, rangeAxisLocation); [EOL]                 transRange = zero - rangeAxis.valueToJava2D(z, dataArea, rangeAxisLocation); [EOL]                 transDomain = transRange; [EOL]                 break; [EOL]             default: [EOL]                 double zero1 = domainAxis.valueToJava2D(0.0, dataArea, domainAxisLocation); [EOL]                 double zero2 = rangeAxis.valueToJava2D(0.0, dataArea, rangeAxisLocation); [EOL]                 transDomain = domainAxis.valueToJava2D(z, dataArea, domainAxisLocation) - zero1; [EOL]                 transRange = zero2 - rangeAxis.valueToJava2D(z, dataArea, rangeAxisLocation); [EOL]         } [EOL]         transDomain = Math.abs(transDomain); [EOL]         transRange = Math.abs(transRange); [EOL]         Ellipse2D circle = null; [EOL]         if (orientation == PlotOrientation.VERTICAL) { [EOL]             circle = new Ellipse2D.Double(transX - transDomain / 2.0, transY - transRange / 2.0, transDomain, transRange); [EOL]         } else if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             circle = new Ellipse2D.Double(transY - transRange / 2.0, transX - transDomain / 2.0, transRange, transDomain); [EOL]         } [EOL]         g2.setPaint(getItemPaint(series, item, selected)); [EOL]         g2.fill(circle); [EOL]         g2.setStroke(getItemOutlineStroke(series, item, selected)); [EOL]         g2.setPaint(getItemOutlinePaint(series, item, selected)); [EOL]         g2.draw(circle); [EOL]         if (isItemLabelVisible(series, item, selected)) { [EOL]             if (orientation == PlotOrientation.VERTICAL) { [EOL]                 drawItemLabel(g2, orientation, dataset, series, item, selected, transX, transY, false); [EOL]             } else if (orientation == PlotOrientation.HORIZONTAL) { [EOL]                 drawItemLabel(g2, orientation, dataset, series, item, selected, transY, transX, false); [EOL]             } [EOL]         } [EOL]         EntityCollection entities = null; [EOL]         if (state.getInfo() != null) { [EOL]             entities = state.getInfo().getOwner().getEntityCollection(); [EOL]             if (entities != null && circle.intersects(dataArea)) { [EOL]                 addEntity(entities, circle, dataset, series, item, selected, circle.getCenterX(), circle.getCenterY()); [EOL]             } [EOL]         } [EOL]         int domainAxisIndex = plot.getDomainAxisIndex(domainAxis); [EOL]         int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis); [EOL]         XYCrosshairState crosshairState = state.getCrosshairState(); [EOL]         updateCrosshairValues(crosshairState, x, y, domainAxisIndex, rangeAxisIndex, transX, transY, orientation); [EOL]     } [EOL] } <line_num>: 170,273
public LegendItem getLegendItem(int datasetIndex, int series) { [EOL]     LegendItem result = null; [EOL]     XYPlot plot = getPlot(); [EOL]     if (plot == null) { [EOL]         return null; [EOL]     } [EOL]     XYDataset dataset = plot.getDataset(datasetIndex); [EOL]     if (dataset != null) { [EOL]         if (getItemVisible(series, 0)) { [EOL]             String label = getLegendItemLabelGenerator().generateLabel(dataset, series); [EOL]             String description = label; [EOL]             String toolTipText = null; [EOL]             if (getLegendItemToolTipGenerator() != null) { [EOL]                 toolTipText = getLegendItemToolTipGenerator().generateLabel(dataset, series); [EOL]             } [EOL]             String urlText = null; [EOL]             if (getLegendItemURLGenerator() != null) { [EOL]                 urlText = getLegendItemURLGenerator().generateLabel(dataset, series); [EOL]             } [EOL]             Shape shape = lookupLegendShape(series); [EOL]             Paint paint = lookupSeriesPaint(series); [EOL]             Paint outlinePaint = lookupSeriesOutlinePaint(series); [EOL]             Stroke outlineStroke = lookupSeriesOutlineStroke(series); [EOL]             result = new LegendItem(label, description, toolTipText, urlText, shape, paint, outlineStroke, outlinePaint); [EOL]             result.setLabelFont(lookupLegendTextFont(series)); [EOL]             Paint labelPaint = lookupLegendTextPaint(series); [EOL]             if (labelPaint != null) { [EOL]                 result.setLabelPaint(labelPaint); [EOL]             } [EOL]             result.setDataset(dataset); [EOL]             result.setDatasetIndex(datasetIndex); [EOL]             result.setSeriesKey(dataset.getSeriesKey(series)); [EOL]             result.setSeriesIndex(series); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 284,325
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof XYBubbleRenderer)) { [EOL]         return false; [EOL]     } [EOL]     XYBubbleRenderer that = (XYBubbleRenderer) obj; [EOL]     if (this.scaleType != that.scaleType) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 334,346
public Object clone() throws CloneNotSupportedException { [EOL]     return super.clone(); [EOL] } <line_num>: 355,357
