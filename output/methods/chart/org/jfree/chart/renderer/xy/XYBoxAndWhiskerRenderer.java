public XYBoxAndWhiskerRenderer() { [EOL]     this(-1.0); [EOL] } <line_num>: 152,154
public XYBoxAndWhiskerRenderer(double boxWidth) { [EOL]     super(); [EOL]     this.boxWidth = boxWidth; [EOL]     this.boxPaint = Color.green; [EOL]     this.fillBox = true; [EOL]     setBaseToolTipGenerator(new BoxAndWhiskerXYToolTipGenerator()); [EOL] } <line_num>: 164,170
public double getBoxWidth() { [EOL]     return this.boxWidth; [EOL] } <line_num>: 179,181
public void setBoxWidth(double width) { [EOL]     if (width != this.boxWidth) { [EOL]         this.boxWidth = width; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 194,199
public Paint getBoxPaint() { [EOL]     return this.boxPaint; [EOL] } <line_num>: 208,210
public void setBoxPaint(Paint paint) { [EOL]     this.boxPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 220,223
public boolean getFillBox() { [EOL]     return this.fillBox; [EOL] } <line_num>: 232,234
public void setFillBox(boolean flag) { [EOL]     this.fillBox = flag; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 244,247
public Paint getArtifactPaint() { [EOL]     return this.artifactPaint; [EOL] } <line_num>: 257,259
public void setArtifactPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.artifactPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 270,276
public Range findRangeBounds(XYDataset dataset) { [EOL]     return findRangeBounds(dataset, true); [EOL] } <line_num>: 289,291
protected Paint lookupBoxPaint(int series, int item) { [EOL]     Paint p = getBoxPaint(); [EOL]     if (p != null) { [EOL]         return p; [EOL]     } else { [EOL]         return getItemPaint(series, item, false); [EOL]     } [EOL] } <line_num>: 305,315
public void drawItem(Graphics2D g2, XYItemRendererState state, Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset, int series, int item, boolean selected, int pass) { [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         drawHorizontalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, dataset, series, item, selected, pass); [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, dataset, series, item, selected, pass); [EOL]     } [EOL] } <line_num>: 333,349
protected void drawHorizontalItem(Graphics2D g2, XYItemRendererState state, Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset, int series, int item, boolean selected, int pass) { [EOL]     EntityCollection entities = null; [EOL]     if (state.getInfo() != null) { [EOL]         entities = state.getInfo().getOwner().getEntityCollection(); [EOL]     } [EOL]     BoxAndWhiskerXYDataset boxAndWhiskerData = (BoxAndWhiskerXYDataset) dataset; [EOL]     Number x = boxAndWhiskerData.getX(series, item); [EOL]     Number yMax = boxAndWhiskerData.getMaxRegularValue(series, item); [EOL]     Number yMin = boxAndWhiskerData.getMinRegularValue(series, item); [EOL]     Number yMedian = boxAndWhiskerData.getMedianValue(series, item); [EOL]     Number yAverage = boxAndWhiskerData.getMeanValue(series, item); [EOL]     Number yQ1Median = boxAndWhiskerData.getQ1Value(series, item); [EOL]     Number yQ3Median = boxAndWhiskerData.getQ3Value(series, item); [EOL]     double xx = domainAxis.valueToJava2D(x.doubleValue(), dataArea, plot.getDomainAxisEdge()); [EOL]     RectangleEdge location = plot.getRangeAxisEdge(); [EOL]     double yyMax = rangeAxis.valueToJava2D(yMax.doubleValue(), dataArea, location); [EOL]     double yyMin = rangeAxis.valueToJava2D(yMin.doubleValue(), dataArea, location); [EOL]     double yyMedian = rangeAxis.valueToJava2D(yMedian.doubleValue(), dataArea, location); [EOL]     double yyAverage = 0.0; [EOL]     if (yAverage != null) { [EOL]         yyAverage = rangeAxis.valueToJava2D(yAverage.doubleValue(), dataArea, location); [EOL]     } [EOL]     double yyQ1Median = rangeAxis.valueToJava2D(yQ1Median.doubleValue(), dataArea, location); [EOL]     double yyQ3Median = rangeAxis.valueToJava2D(yQ3Median.doubleValue(), dataArea, location); [EOL]     double exactBoxWidth = getBoxWidth(); [EOL]     double width = exactBoxWidth; [EOL]     double dataAreaX = dataArea.getHeight(); [EOL]     double maxBoxPercent = 0.1; [EOL]     double maxBoxWidth = dataAreaX * maxBoxPercent; [EOL]     if (exactBoxWidth <= 0.0) { [EOL]         int itemCount = boxAndWhiskerData.getItemCount(series); [EOL]         exactBoxWidth = dataAreaX / itemCount * 4.5 / 7; [EOL]         if (exactBoxWidth < 3) { [EOL]             width = 3; [EOL]         } else if (exactBoxWidth > maxBoxWidth) { [EOL]             width = maxBoxWidth; [EOL]         } else { [EOL]             width = exactBoxWidth; [EOL]         } [EOL]     } [EOL]     g2.setPaint(getItemPaint(series, item, selected)); [EOL]     Stroke s = getItemStroke(series, item, selected); [EOL]     g2.setStroke(s); [EOL]     g2.draw(new Line2D.Double(yyMax, xx, yyQ3Median, xx)); [EOL]     g2.draw(new Line2D.Double(yyMax, xx - width / 2, yyMax, xx + width / 2)); [EOL]     g2.draw(new Line2D.Double(yyMin, xx, yyQ1Median, xx)); [EOL]     g2.draw(new Line2D.Double(yyMin, xx - width / 2, yyMin, xx + width / 2)); [EOL]     Shape box = null; [EOL]     if (yyQ1Median < yyQ3Median) { [EOL]         box = new Rectangle2D.Double(yyQ1Median, xx - width / 2, yyQ3Median - yyQ1Median, width); [EOL]     } else { [EOL]         box = new Rectangle2D.Double(yyQ3Median, xx - width / 2, yyQ1Median - yyQ3Median, width); [EOL]     } [EOL]     if (this.fillBox) { [EOL]         g2.setPaint(lookupBoxPaint(series, item)); [EOL]         g2.fill(box); [EOL]     } [EOL]     g2.setStroke(getItemOutlineStroke(series, item, selected)); [EOL]     g2.setPaint(getItemOutlinePaint(series, item, selected)); [EOL]     g2.draw(box); [EOL]     g2.setPaint(getArtifactPaint()); [EOL]     g2.draw(new Line2D.Double(yyMedian, xx - width / 2, yyMedian, xx + width / 2)); [EOL]     if (yAverage != null) { [EOL]         double aRadius = width / 4; [EOL]         if ((yyAverage > (dataArea.getMinX() - aRadius)) && (yyAverage < (dataArea.getMaxX() + aRadius))) { [EOL]             Ellipse2D.Double avgEllipse = new Ellipse2D.Double(yyAverage - aRadius, xx - aRadius, aRadius * 2, aRadius * 2); [EOL]             g2.fill(avgEllipse); [EOL]             g2.draw(avgEllipse); [EOL]         } [EOL]     } [EOL]     if (entities != null && box.intersects(dataArea)) { [EOL]         addEntity(entities, box, dataset, series, item, selected, yyAverage, xx); [EOL]     } [EOL] } <line_num>: 370,491
protected void drawVerticalItem(Graphics2D g2, XYItemRendererState state, Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset, int series, int item, boolean selected, int pass) { [EOL]     EntityCollection entities = null; [EOL]     if (state.getInfo() != null) { [EOL]         entities = state.getInfo().getOwner().getEntityCollection(); [EOL]     } [EOL]     BoxAndWhiskerXYDataset boxAndWhiskerData = (BoxAndWhiskerXYDataset) dataset; [EOL]     Number x = boxAndWhiskerData.getX(series, item); [EOL]     Number yMax = boxAndWhiskerData.getMaxRegularValue(series, item); [EOL]     Number yMin = boxAndWhiskerData.getMinRegularValue(series, item); [EOL]     Number yMedian = boxAndWhiskerData.getMedianValue(series, item); [EOL]     Number yAverage = boxAndWhiskerData.getMeanValue(series, item); [EOL]     Number yQ1Median = boxAndWhiskerData.getQ1Value(series, item); [EOL]     Number yQ3Median = boxAndWhiskerData.getQ3Value(series, item); [EOL]     List yOutliers = boxAndWhiskerData.getOutliers(series, item); [EOL]     double xx = domainAxis.valueToJava2D(x.doubleValue(), dataArea, plot.getDomainAxisEdge()); [EOL]     RectangleEdge location = plot.getRangeAxisEdge(); [EOL]     double yyMax = rangeAxis.valueToJava2D(yMax.doubleValue(), dataArea, location); [EOL]     double yyMin = rangeAxis.valueToJava2D(yMin.doubleValue(), dataArea, location); [EOL]     double yyMedian = rangeAxis.valueToJava2D(yMedian.doubleValue(), dataArea, location); [EOL]     double yyAverage = 0.0; [EOL]     if (yAverage != null) { [EOL]         yyAverage = rangeAxis.valueToJava2D(yAverage.doubleValue(), dataArea, location); [EOL]     } [EOL]     double yyQ1Median = rangeAxis.valueToJava2D(yQ1Median.doubleValue(), dataArea, location); [EOL]     double yyQ3Median = rangeAxis.valueToJava2D(yQ3Median.doubleValue(), dataArea, location); [EOL]     double yyOutlier; [EOL]     double exactBoxWidth = getBoxWidth(); [EOL]     double width = exactBoxWidth; [EOL]     double dataAreaX = dataArea.getMaxX() - dataArea.getMinX(); [EOL]     double maxBoxPercent = 0.1; [EOL]     double maxBoxWidth = dataAreaX * maxBoxPercent; [EOL]     if (exactBoxWidth <= 0.0) { [EOL]         int itemCount = boxAndWhiskerData.getItemCount(series); [EOL]         exactBoxWidth = dataAreaX / itemCount * 4.5 / 7; [EOL]         if (exactBoxWidth < 3) { [EOL]             width = 3; [EOL]         } else if (exactBoxWidth > maxBoxWidth) { [EOL]             width = maxBoxWidth; [EOL]         } else { [EOL]             width = exactBoxWidth; [EOL]         } [EOL]     } [EOL]     g2.setPaint(getItemPaint(series, item, selected)); [EOL]     Stroke s = getItemStroke(series, item, selected); [EOL]     g2.setStroke(s); [EOL]     g2.draw(new Line2D.Double(xx, yyMax, xx, yyQ3Median)); [EOL]     g2.draw(new Line2D.Double(xx - width / 2, yyMax, xx + width / 2, yyMax)); [EOL]     g2.draw(new Line2D.Double(xx, yyMin, xx, yyQ1Median)); [EOL]     g2.draw(new Line2D.Double(xx - width / 2, yyMin, xx + width / 2, yyMin)); [EOL]     Shape box = null; [EOL]     if (yyQ1Median > yyQ3Median) { [EOL]         box = new Rectangle2D.Double(xx - width / 2, yyQ3Median, width, yyQ1Median - yyQ3Median); [EOL]     } else { [EOL]         box = new Rectangle2D.Double(xx - width / 2, yyQ1Median, width, yyQ3Median - yyQ1Median); [EOL]     } [EOL]     if (this.fillBox) { [EOL]         g2.setPaint(lookupBoxPaint(series, item)); [EOL]         g2.fill(box); [EOL]     } [EOL]     g2.setStroke(getItemOutlineStroke(series, item, selected)); [EOL]     g2.setPaint(getItemOutlinePaint(series, item, selected)); [EOL]     g2.draw(box); [EOL]     g2.setPaint(getArtifactPaint()); [EOL]     g2.draw(new Line2D.Double(xx - width / 2, yyMedian, xx + width / 2, yyMedian)); [EOL]     double aRadius = 0; [EOL]     double oRadius = width / 3; [EOL]     if (yAverage != null) { [EOL]         aRadius = width / 4; [EOL]         if ((yyAverage > (dataArea.getMinY() - aRadius)) && (yyAverage < (dataArea.getMaxY() + aRadius))) { [EOL]             Ellipse2D.Double avgEllipse = new Ellipse2D.Double(xx - aRadius, yyAverage - aRadius, aRadius * 2, aRadius * 2); [EOL]             g2.fill(avgEllipse); [EOL]             g2.draw(avgEllipse); [EOL]         } [EOL]     } [EOL]     List outliers = new ArrayList(); [EOL]     OutlierListCollection outlierListCollection = new OutlierListCollection(); [EOL]     for (int i = 0; i < yOutliers.size(); i++) { [EOL]         double outlier = ((Number) yOutliers.get(i)).doubleValue(); [EOL]         if (outlier > boxAndWhiskerData.getMaxOutlier(series, item).doubleValue()) { [EOL]             outlierListCollection.setHighFarOut(true); [EOL]         } else if (outlier < boxAndWhiskerData.getMinOutlier(series, item).doubleValue()) { [EOL]             outlierListCollection.setLowFarOut(true); [EOL]         } else if (outlier > boxAndWhiskerData.getMaxRegularValue(series, item).doubleValue()) { [EOL]             yyOutlier = rangeAxis.valueToJava2D(outlier, dataArea, location); [EOL]             outliers.add(new Outlier(xx, yyOutlier, oRadius)); [EOL]         } else if (outlier < boxAndWhiskerData.getMinRegularValue(series, item).doubleValue()) { [EOL]             yyOutlier = rangeAxis.valueToJava2D(outlier, dataArea, location); [EOL]             outliers.add(new Outlier(xx, yyOutlier, oRadius)); [EOL]         } [EOL]         Collections.sort(outliers); [EOL]     } [EOL]     for (Iterator iterator = outliers.iterator(); iterator.hasNext(); ) { [EOL]         Outlier outlier = (Outlier) iterator.next(); [EOL]         outlierListCollection.add(outlier); [EOL]     } [EOL]     double maxAxisValue = rangeAxis.valueToJava2D(rangeAxis.getUpperBound(), dataArea, location) + aRadius; [EOL]     double minAxisValue = rangeAxis.valueToJava2D(rangeAxis.getLowerBound(), dataArea, location) - aRadius; [EOL]     for (Iterator iterator = outlierListCollection.iterator(); iterator.hasNext(); ) { [EOL]         OutlierList list = (OutlierList) iterator.next(); [EOL]         Outlier outlier = list.getAveragedOutlier(); [EOL]         Point2D point = outlier.getPoint(); [EOL]         if (list.isMultiple()) { [EOL]             drawMultipleEllipse(point, width, oRadius, g2); [EOL]         } else { [EOL]             drawEllipse(point, oRadius, g2); [EOL]         } [EOL]     } [EOL]     if (outlierListCollection.isHighFarOut()) { [EOL]         drawHighFarOut(aRadius, g2, xx, maxAxisValue); [EOL]     } [EOL]     if (outlierListCollection.isLowFarOut()) { [EOL]         drawLowFarOut(aRadius, g2, xx, minAxisValue); [EOL]     } [EOL]     if (entities != null && box.intersects(dataArea)) { [EOL]         addEntity(entities, box, dataset, series, item, selected, xx, yyAverage); [EOL]     } [EOL] } <line_num>: 510,705
protected void drawEllipse(Point2D point, double oRadius, Graphics2D g2) { [EOL]     Ellipse2D.Double dot = new Ellipse2D.Double(point.getX() + oRadius / 2, point.getY(), oRadius, oRadius); [EOL]     g2.draw(dot); [EOL] } <line_num>: 714,718
protected void drawMultipleEllipse(Point2D point, double boxWidth, double oRadius, Graphics2D g2) { [EOL]     Ellipse2D.Double dot1 = new Ellipse2D.Double(point.getX() - (boxWidth / 2) + oRadius, point.getY(), oRadius, oRadius); [EOL]     Ellipse2D.Double dot2 = new Ellipse2D.Double(point.getX() + (boxWidth / 2), point.getY(), oRadius, oRadius); [EOL]     g2.draw(dot1); [EOL]     g2.draw(dot2); [EOL] } <line_num>: 728,738
protected void drawHighFarOut(double aRadius, Graphics2D g2, double xx, double m) { [EOL]     double side = aRadius * 2; [EOL]     g2.draw(new Line2D.Double(xx - side, m + side, xx + side, m + side)); [EOL]     g2.draw(new Line2D.Double(xx - side, m + side, xx, m)); [EOL]     g2.draw(new Line2D.Double(xx + side, m + side, xx, m)); [EOL] } <line_num>: 748,754
protected void drawLowFarOut(double aRadius, Graphics2D g2, double xx, double m) { [EOL]     double side = aRadius * 2; [EOL]     g2.draw(new Line2D.Double(xx - side, m - side, xx + side, m - side)); [EOL]     g2.draw(new Line2D.Double(xx - side, m - side, xx, m)); [EOL]     g2.draw(new Line2D.Double(xx + side, m - side, xx, m)); [EOL] } <line_num>: 764,770
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof XYBoxAndWhiskerRenderer)) { [EOL]         return false; [EOL]     } [EOL]     if (!super.equals(obj)) { [EOL]         return false; [EOL]     } [EOL]     XYBoxAndWhiskerRenderer that = (XYBoxAndWhiskerRenderer) obj; [EOL]     if (this.boxWidth != that.getBoxWidth()) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.boxPaint, that.boxPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.artifactPaint, that.artifactPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (this.fillBox != that.fillBox) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 779,804
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.boxPaint, stream); [EOL]     SerialUtilities.writePaint(this.artifactPaint, stream); [EOL] } <line_num>: 813,817
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.boxPaint = SerialUtilities.readPaint(stream); [EOL]     this.artifactPaint = SerialUtilities.readPaint(stream); [EOL] } <line_num>: 827,833
public Object clone() throws CloneNotSupportedException { [EOL]     return super.clone(); [EOL] } <line_num>: 842,844
