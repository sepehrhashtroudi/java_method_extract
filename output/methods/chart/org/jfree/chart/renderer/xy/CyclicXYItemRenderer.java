public CyclicXYItemRenderer() { [EOL]     super(); [EOL] } <line_num>: 85,87
public CyclicXYItemRenderer(int type) { [EOL]     super(type); [EOL] } <line_num>: 94,96
public CyclicXYItemRenderer(int type, XYToolTipGenerator labelGenerator) { [EOL]     super(type, labelGenerator); [EOL] } <line_num>: 104,106
public CyclicXYItemRenderer(int type, XYToolTipGenerator labelGenerator, XYURLGenerator urlGenerator) { [EOL]     super(type, labelGenerator, urlGenerator); [EOL] } <line_num>: 115,119
public OverwriteDataSet(double[] x, double[] y, XYDataset delegateSet) { [EOL]     this.delegateSet = delegateSet; [EOL]     this.x = new Double[x.length]; [EOL]     this.y = new Double[y.length]; [EOL]     for (int i = 0; i < x.length; ++i) { [EOL]         this.x[i] = new Double(x[i]); [EOL]         this.y[i] = new Double(y[i]); [EOL]     } [EOL] } <line_num>: 332,340
public void drawItem(Graphics2D g2, XYItemRendererState state, Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset, int series, int item, boolean selected, int pass) { [EOL]     if ((!getPlotLines()) || ((!(domainAxis instanceof CyclicNumberAxis)) && (!(rangeAxis instanceof CyclicNumberAxis))) || (item <= 0)) { [EOL]         super.drawItem(g2, state, dataArea, plot, domainAxis, rangeAxis, dataset, series, item, selected, pass); [EOL]         return; [EOL]     } [EOL]     double xn = dataset.getXValue(series, item - 1); [EOL]     double yn = dataset.getYValue(series, item - 1); [EOL]     if (Double.isNaN(yn)) { [EOL]         super.drawItem(g2, state, dataArea, plot, domainAxis, rangeAxis, dataset, series, item, selected, pass); [EOL]         return; [EOL]     } [EOL]     double[] x = new double[2]; [EOL]     double[] y = new double[2]; [EOL]     x[0] = xn; [EOL]     y[0] = yn; [EOL]     xn = dataset.getXValue(series, item); [EOL]     yn = dataset.getYValue(series, item); [EOL]     if (Double.isNaN(yn)) { [EOL]         return; [EOL]     } [EOL]     x[1] = xn; [EOL]     y[1] = yn; [EOL]     double xcycleBound = Double.NaN; [EOL]     double ycycleBound = Double.NaN; [EOL]     boolean xBoundMapping = false, yBoundMapping = false; [EOL]     CyclicNumberAxis cnax = null, cnay = null; [EOL]     if (domainAxis instanceof CyclicNumberAxis) { [EOL]         cnax = (CyclicNumberAxis) domainAxis; [EOL]         xcycleBound = cnax.getCycleBound(); [EOL]         xBoundMapping = cnax.isBoundMappedToLastCycle(); [EOL]         if ((x[0] != x[1]) && ((xcycleBound >= x[0]) && (xcycleBound <= x[1]) || (xcycleBound >= x[1]) && (xcycleBound <= x[0]))) { [EOL]             double[] nx = new double[3]; [EOL]             double[] ny = new double[3]; [EOL]             nx[0] = x[0]; [EOL]             nx[2] = x[1]; [EOL]             ny[0] = y[0]; [EOL]             ny[2] = y[1]; [EOL]             nx[1] = xcycleBound; [EOL]             ny[1] = (y[1] - y[0]) * (xcycleBound - x[0]) / (x[1] - x[0]) + y[0]; [EOL]             x = nx; [EOL]             y = ny; [EOL]         } [EOL]     } [EOL]     if (rangeAxis instanceof CyclicNumberAxis) { [EOL]         cnay = (CyclicNumberAxis) rangeAxis; [EOL]         ycycleBound = cnay.getCycleBound(); [EOL]         yBoundMapping = cnay.isBoundMappedToLastCycle(); [EOL]         if ((y[0] != y[1]) && ((ycycleBound >= y[0]) && (ycycleBound <= y[1]) || (ycycleBound >= y[1]) && (ycycleBound <= y[0]))) { [EOL]             double[] nx = new double[x.length + 1]; [EOL]             double[] ny = new double[y.length + 1]; [EOL]             nx[0] = x[0]; [EOL]             nx[2] = x[1]; [EOL]             ny[0] = y[0]; [EOL]             ny[2] = y[1]; [EOL]             ny[1] = ycycleBound; [EOL]             nx[1] = (x[1] - x[0]) * (ycycleBound - y[0]) / (y[1] - y[0]) + x[0]; [EOL]             if (x.length == 3) { [EOL]                 nx[3] = x[2]; [EOL]                 ny[3] = y[2]; [EOL]             } [EOL]             x = nx; [EOL]             y = ny; [EOL]         } else if ((x.length == 3) && (y[1] != y[2]) && ((ycycleBound >= y[1]) && (ycycleBound <= y[2]) || (ycycleBound >= y[2]) && (ycycleBound <= y[1]))) { [EOL]             double[] nx = new double[4]; [EOL]             double[] ny = new double[4]; [EOL]             nx[0] = x[0]; [EOL]             nx[1] = x[1]; [EOL]             nx[3] = x[2]; [EOL]             ny[0] = y[0]; [EOL]             ny[1] = y[1]; [EOL]             ny[3] = y[2]; [EOL]             ny[2] = ycycleBound; [EOL]             nx[2] = (x[2] - x[1]) * (ycycleBound - y[1]) / (y[2] - y[1]) + x[1]; [EOL]             x = nx; [EOL]             y = ny; [EOL]         } [EOL]     } [EOL]     if (x.length == 2) { [EOL]         super.drawItem(g2, state, dataArea, plot, domainAxis, rangeAxis, dataset, series, item, selected, pass); [EOL]         return; [EOL]     } [EOL]     OverwriteDataSet newset = new OverwriteDataSet(x, y, dataset); [EOL]     if (cnax != null) { [EOL]         if (xcycleBound == x[0]) { [EOL]             cnax.setBoundMappedToLastCycle(x[1] <= xcycleBound); [EOL]         } [EOL]         if (xcycleBound == x[1]) { [EOL]             cnax.setBoundMappedToLastCycle(x[0] <= xcycleBound); [EOL]         } [EOL]     } [EOL]     if (cnay != null) { [EOL]         if (ycycleBound == y[0]) { [EOL]             cnay.setBoundMappedToLastCycle(y[1] <= ycycleBound); [EOL]         } [EOL]         if (ycycleBound == y[1]) { [EOL]             cnay.setBoundMappedToLastCycle(y[0] <= ycycleBound); [EOL]         } [EOL]     } [EOL]     super.drawItem(g2, state, dataArea, plot, domainAxis, rangeAxis, newset, series, 1, selected, pass); [EOL]     if (cnax != null) { [EOL]         if (xcycleBound == x[1]) { [EOL]             cnax.setBoundMappedToLastCycle(x[2] <= xcycleBound); [EOL]         } [EOL]         if (xcycleBound == x[2]) { [EOL]             cnax.setBoundMappedToLastCycle(x[1] <= xcycleBound); [EOL]         } [EOL]     } [EOL]     if (cnay != null) { [EOL]         if (ycycleBound == y[1]) { [EOL]             cnay.setBoundMappedToLastCycle(y[2] <= ycycleBound); [EOL]         } [EOL]         if (ycycleBound == y[2]) { [EOL]             cnay.setBoundMappedToLastCycle(y[1] <= ycycleBound); [EOL]         } [EOL]     } [EOL]     super.drawItem(g2, state, dataArea, plot, domainAxis, rangeAxis, newset, series, 2, selected, pass); [EOL]     if (x.length == 4) { [EOL]         if (cnax != null) { [EOL]             if (xcycleBound == x[2]) { [EOL]                 cnax.setBoundMappedToLastCycle(x[3] <= xcycleBound); [EOL]             } [EOL]             if (xcycleBound == x[3]) { [EOL]                 cnax.setBoundMappedToLastCycle(x[2] <= xcycleBound); [EOL]             } [EOL]         } [EOL]         if (cnay != null) { [EOL]             if (ycycleBound == y[2]) { [EOL]                 cnay.setBoundMappedToLastCycle(y[3] <= ycycleBound); [EOL]             } [EOL]             if (ycycleBound == y[3]) { [EOL]                 cnay.setBoundMappedToLastCycle(y[2] <= ycycleBound); [EOL]             } [EOL]         } [EOL]         super.drawItem(g2, state, dataArea, plot, domainAxis, rangeAxis, newset, series, 3, selected, pass); [EOL]     } [EOL]     if (cnax != null) { [EOL]         cnax.setBoundMappedToLastCycle(xBoundMapping); [EOL]     } [EOL]     if (cnay != null) { [EOL]         cnay.setBoundMappedToLastCycle(yBoundMapping); [EOL]     } [EOL] } <line_num>: 140,312
public DomainOrder getDomainOrder() { [EOL]     return DomainOrder.NONE; [EOL] } <line_num>: 347,349
public int getItemCount(int series) { [EOL]     return this.x.length; [EOL] } <line_num>: 358,360
public Number getX(int series, int item) { [EOL]     return this.x[item]; [EOL] } <line_num>: 370,372
public double getXValue(int series, int item) { [EOL]     double result = Double.NaN; [EOL]     Number x = getX(series, item); [EOL]     if (x != null) { [EOL]         result = x.doubleValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 383,390
public Number getY(int series, int item) { [EOL]     return this.y[item]; [EOL] } <line_num>: 400,402
public double getYValue(int series, int item) { [EOL]     double result = Double.NaN; [EOL]     Number y = getY(series, item); [EOL]     if (y != null) { [EOL]         result = y.doubleValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 413,420
public int getSeriesCount() { [EOL]     return this.delegateSet.getSeriesCount(); [EOL] } <line_num>: 427,429
public Comparable getSeriesKey(int series) { [EOL]     return this.delegateSet.getSeriesKey(series); [EOL] } <line_num>: 438,440
public int indexOf(Comparable seriesName) { [EOL]     return this.delegateSet.indexOf(seriesName); [EOL] } <line_num>: 449,451
public void addChangeListener(DatasetChangeListener listener) { [EOL] } <line_num>: 458,460
public void removeChangeListener(DatasetChangeListener listener) { [EOL] } <line_num>: 467,469
public DatasetGroup getGroup() { [EOL]     return this.delegateSet.getGroup(); [EOL] } <line_num>: 476,479
public void setGroup(DatasetGroup group) { [EOL] } <line_num>: 486,488
