public XYLineAndShapeRenderer() { [EOL]     this(true, true); [EOL] } <line_num>: 179,181
public XYLineAndShapeRenderer(boolean lines, boolean shapes) { [EOL]     this.seriesLinesVisible = new BooleanList(); [EOL]     this.baseLinesVisible = lines; [EOL]     this.legendLine = new Line2D.Double(-7.0, 0.0, 7.0, 0.0); [EOL]     this.seriesShapesVisible = new BooleanList(); [EOL]     this.baseShapesVisible = shapes; [EOL]     this.useFillPaint = false; [EOL]     this.seriesShapesFilled = new BooleanList(); [EOL]     this.baseShapesFilled = true; [EOL]     this.drawOutlines = true; [EOL]     this.useOutlinePaint = false; [EOL]     this.drawSeriesLineAsPath = false; [EOL] } <line_num>: 189,206
public State(PlotRenderingInfo info) { [EOL]     super(info); [EOL] } <line_num>: 652,654
public boolean getDrawSeriesLineAsPath() { [EOL]     return this.drawSeriesLineAsPath; [EOL] } <line_num>: 216,218
public void setDrawSeriesLineAsPath(boolean flag) { [EOL]     if (this.drawSeriesLineAsPath != flag) { [EOL]         this.drawSeriesLineAsPath = flag; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 229,234
public int getPassCount() { [EOL]     return 2; [EOL] } <line_num>: 243,245
public boolean getItemLineVisible(int series, int item) { [EOL]     Boolean flag = getSeriesLinesVisible(series); [EOL]     if (flag != null) { [EOL]         return flag.booleanValue(); [EOL]     } else { [EOL]         return this.baseLinesVisible; [EOL]     } [EOL] } <line_num>: 258,266
public Boolean getSeriesLinesVisible(int series) { [EOL]     return this.seriesLinesVisible.getBoolean(series); [EOL] } <line_num>: 278,280
public void setSeriesLinesVisible(int series, Boolean flag) { [EOL]     this.seriesLinesVisible.setBoolean(series, flag); [EOL]     fireChangeEvent(); [EOL] } <line_num>: 291,294
public void setSeriesLinesVisible(int series, boolean visible) { [EOL]     setSeriesLinesVisible(series, Boolean.valueOf(visible)); [EOL] } <line_num>: 305,307
public boolean getBaseLinesVisible() { [EOL]     return this.baseLinesVisible; [EOL] } <line_num>: 316,318
public void setBaseLinesVisible(boolean flag) { [EOL]     this.baseLinesVisible = flag; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 328,331
public Shape getLegendLine() { [EOL]     return this.legendLine; [EOL] } <line_num>: 340,342
public void setLegendLine(Shape line) { [EOL]     if (line == null) { [EOL]         throw new IllegalArgumentException("Null 'line' argument."); [EOL]     } [EOL]     this.legendLine = line; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 352,358
public boolean getItemShapeVisible(int series, int item) { [EOL]     Boolean flag = getSeriesShapesVisible(series); [EOL]     if (flag != null) { [EOL]         return flag.booleanValue(); [EOL]     } else { [EOL]         return this.baseShapesVisible; [EOL]     } [EOL] } <line_num>: 375,383
public Boolean getSeriesShapesVisible(int series) { [EOL]     return this.seriesShapesVisible.getBoolean(series); [EOL] } <line_num>: 395,397
public void setSeriesShapesVisible(int series, boolean visible) { [EOL]     setSeriesShapesVisible(series, Boolean.valueOf(visible)); [EOL] } <line_num>: 408,410
public void setSeriesShapesVisible(int series, Boolean flag) { [EOL]     this.seriesShapesVisible.setBoolean(series, flag); [EOL]     fireChangeEvent(); [EOL] } <line_num>: 421,424
public boolean getBaseShapesVisible() { [EOL]     return this.baseShapesVisible; [EOL] } <line_num>: 433,435
public void setBaseShapesVisible(boolean flag) { [EOL]     this.baseShapesVisible = flag; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 445,448
public boolean getItemShapeFilled(int series, int item) { [EOL]     Boolean flag = getSeriesShapesFilled(series); [EOL]     if (flag != null) { [EOL]         return flag.booleanValue(); [EOL]     } else { [EOL]         return this.baseShapesFilled; [EOL]     } [EOL] } <line_num>: 465,473
public Boolean getSeriesShapesFilled(int series) { [EOL]     return this.seriesShapesFilled.getBoolean(series); [EOL] } <line_num>: 485,487
public void setSeriesShapesFilled(int series, boolean flag) { [EOL]     setSeriesShapesFilled(series, Boolean.valueOf(flag)); [EOL] } <line_num>: 498,500
public void setSeriesShapesFilled(int series, Boolean flag) { [EOL]     this.seriesShapesFilled.setBoolean(series, flag); [EOL]     fireChangeEvent(); [EOL] } <line_num>: 511,514
public boolean getBaseShapesFilled() { [EOL]     return this.baseShapesFilled; [EOL] } <line_num>: 523,525
public void setBaseShapesFilled(boolean flag) { [EOL]     this.baseShapesFilled = flag; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 535,538
public boolean getDrawOutlines() { [EOL]     return this.drawOutlines; [EOL] } <line_num>: 548,550
public void setDrawOutlines(boolean flag) { [EOL]     this.drawOutlines = flag; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 564,567
public boolean getUseFillPaint() { [EOL]     return this.useFillPaint; [EOL] } <line_num>: 582,584
public void setUseFillPaint(boolean flag) { [EOL]     this.useFillPaint = flag; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 595,598
public boolean getUseOutlinePaint() { [EOL]     return this.useOutlinePaint; [EOL] } <line_num>: 610,612
public void setUseOutlinePaint(boolean flag) { [EOL]     this.useOutlinePaint = flag; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 626,629
public boolean isLastPointGood() { [EOL]     return this.lastPointGood; [EOL] } <line_num>: 662,664
public void setLastPointGood(boolean good) { [EOL]     this.lastPointGood = good; [EOL] } <line_num>: 672,674
public void startSeriesPass(XYDataset dataset, int series, int firstItem, int lastItem, int pass, int passCount) { [EOL]     this.seriesPath.reset(); [EOL]     this.lastPointGood = false; [EOL]     super.startSeriesPass(dataset, series, firstItem, lastItem, pass, passCount); [EOL] } <line_num>: 687,693
public XYItemRendererState initialise(Graphics2D g2, Rectangle2D dataArea, XYPlot plot, XYDataset dataset, PlotRenderingInfo info) { [EOL]     State state = new State(info); [EOL]     state.seriesPath = new GeneralPath(); [EOL]     XYDatasetSelectionState selectionState = null; [EOL]     if (dataset instanceof SelectableXYDataset) { [EOL]         SelectableXYDataset sxyd = (SelectableXYDataset) dataset; [EOL]         selectionState = sxyd.getSelectionState(); [EOL]     } [EOL]     if (selectionState == null && info != null) { [EOL]         ChartRenderingInfo cri = info.getOwner(); [EOL]         if (cri != null) { [EOL]             RenderingSource rs = cri.getRenderingSource(); [EOL]             if (rs != null) { [EOL]                 selectionState = (XYDatasetSelectionState) rs.getSelectionState(dataset); [EOL]             } [EOL]         } [EOL]     } [EOL]     state.setSelectionState(selectionState); [EOL]     return state; [EOL] } <line_num>: 713,739
public void drawItem(Graphics2D g2, XYItemRendererState state, Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset, int series, int item, boolean selected, int pass) { [EOL]     if (!getItemVisible(series, item)) { [EOL]         return; [EOL]     } [EOL]     if (isLinePass(pass)) { [EOL]         if (getItemLineVisible(series, item)) { [EOL]             if (this.drawSeriesLineAsPath) { [EOL]                 drawPrimaryLineAsPath(state, g2, plot, dataset, pass, series, item, selected, domainAxis, rangeAxis, dataArea); [EOL]             } else { [EOL]                 drawPrimaryLine(state, g2, plot, dataset, pass, series, item, selected, domainAxis, rangeAxis, dataArea); [EOL]             } [EOL]         } [EOL]     } else if (isItemPass(pass)) { [EOL]         EntityCollection entities = null; [EOL]         if (state.getInfo() != null) { [EOL]             entities = state.getInfo().getOwner().getEntityCollection(); [EOL]         } [EOL]         drawShape2(g2, dataArea, plot, dataset, pass, series, item, selected, domainAxis, rangeAxis, null, entities); [EOL]     } [EOL] } <line_num>: 759,795
protected boolean isLinePass(int pass) { [EOL]     return pass == 0; [EOL] } <line_num>: 805,807
protected boolean isItemPass(int pass) { [EOL]     return pass == 1; [EOL] } <line_num>: 817,819
protected void drawPrimaryLine(XYItemRendererState state, Graphics2D g2, XYPlot plot, XYDataset dataset, int pass, int series, int item, boolean selected, ValueAxis domainAxis, ValueAxis rangeAxis, Rectangle2D dataArea) { [EOL]     if (item == 0) { [EOL]         return; [EOL]     } [EOL]     double x1 = dataset.getXValue(series, item); [EOL]     double y1 = dataset.getYValue(series, item); [EOL]     if (Double.isNaN(y1) || Double.isNaN(x1)) { [EOL]         return; [EOL]     } [EOL]     double x0 = dataset.getXValue(series, item - 1); [EOL]     double y0 = dataset.getYValue(series, item - 1); [EOL]     if (Double.isNaN(y0) || Double.isNaN(x0)) { [EOL]         return; [EOL]     } [EOL]     RectangleEdge xAxisLocation = plot.getDomainAxisEdge(); [EOL]     RectangleEdge yAxisLocation = plot.getRangeAxisEdge(); [EOL]     double transX0 = domainAxis.valueToJava2D(x0, dataArea, xAxisLocation); [EOL]     double transY0 = rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation); [EOL]     double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation); [EOL]     double transY1 = rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation); [EOL]     if (Double.isNaN(transX0) || Double.isNaN(transY0) || Double.isNaN(transX1) || Double.isNaN(transY1)) { [EOL]         return; [EOL]     } [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     boolean visible = false; [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         state.workingLine.setLine(transY0, transX0, transY1, transX1); [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         state.workingLine.setLine(transX0, transY0, transX1, transY1); [EOL]     } [EOL]     visible = LineUtilities.clipLine(state.workingLine, dataArea); [EOL]     if (visible) { [EOL]         drawShape1(g2, pass, series, item, selected, state.workingLine); [EOL]     } [EOL] } <line_num>: 840,889
protected void drawShape1(Graphics2D g2, int pass, int series, int item, boolean selected, Shape shape) { [EOL]     g2.setStroke(getItemStroke(series, item, selected)); [EOL]     g2.setPaint(getItemPaint(series, item, selected)); [EOL]     g2.draw(shape); [EOL] } <line_num>: 903,908
protected void drawPrimaryLineAsPath(XYItemRendererState state, Graphics2D g2, XYPlot plot, XYDataset dataset, int pass, int series, int item, boolean selected, ValueAxis domainAxis, ValueAxis rangeAxis, Rectangle2D dataArea) { [EOL]     RectangleEdge xAxisLocation = plot.getDomainAxisEdge(); [EOL]     RectangleEdge yAxisLocation = plot.getRangeAxisEdge(); [EOL]     double x1 = dataset.getXValue(series, item); [EOL]     double y1 = dataset.getYValue(series, item); [EOL]     double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation); [EOL]     double transY1 = rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation); [EOL]     State s = (State) state; [EOL]     if (!Double.isNaN(transX1) && !Double.isNaN(transY1)) { [EOL]         float x = (float) transX1; [EOL]         float y = (float) transY1; [EOL]         PlotOrientation orientation = plot.getOrientation(); [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             x = (float) transY1; [EOL]             y = (float) transX1; [EOL]         } [EOL]         if (s.isLastPointGood()) { [EOL]             s.seriesPath.lineTo(x, y); [EOL]         } else { [EOL]             s.seriesPath.moveTo(x, y); [EOL]         } [EOL]         s.setLastPointGood(true); [EOL]     } else { [EOL]         s.setLastPointGood(false); [EOL]     } [EOL]     if (item == s.getLastItemIndex()) { [EOL]         drawShape1(g2, pass, series, item, selected, s.seriesPath); [EOL]     } [EOL] } <line_num>: 932,973
protected void drawShape2(Graphics2D g2, Rectangle2D dataArea, XYPlot plot, XYDataset dataset, int pass, int series, int item, boolean selected, ValueAxis domainAxis, ValueAxis rangeAxis, CrosshairState crosshairState, EntityCollection entities) { [EOL]     Shape entityArea = null; [EOL]     double x1 = dataset.getXValue(series, item); [EOL]     double y1 = dataset.getYValue(series, item); [EOL]     if (Double.isNaN(y1) || Double.isNaN(x1)) { [EOL]         return; [EOL]     } [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     RectangleEdge xAxisLocation = plot.getDomainAxisEdge(); [EOL]     RectangleEdge yAxisLocation = plot.getRangeAxisEdge(); [EOL]     double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation); [EOL]     double transY1 = rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation); [EOL]     if (getItemShapeVisible(series, item)) { [EOL]         Shape shape = getItemShape(series, item, selected); [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             shape = ShapeUtilities.createTranslatedShape(shape, transY1, transX1); [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             shape = ShapeUtilities.createTranslatedShape(shape, transX1, transY1); [EOL]         } [EOL]         entityArea = shape; [EOL]         if (shape.intersects(dataArea)) { [EOL]             if (getItemShapeFilled(series, item)) { [EOL]                 if (this.useFillPaint) { [EOL]                     g2.setPaint(getItemFillPaint(series, item, selected)); [EOL]                 } else { [EOL]                     g2.setPaint(getItemPaint(series, item, selected)); [EOL]                 } [EOL]                 g2.fill(shape); [EOL]             } [EOL]             if (this.drawOutlines) { [EOL]                 if (getUseOutlinePaint()) { [EOL]                     g2.setPaint(getItemOutlinePaint(series, item, selected)); [EOL]                 } else { [EOL]                     g2.setPaint(getItemPaint(series, item, selected)); [EOL]                 } [EOL]                 g2.setStroke(getItemOutlineStroke(series, item, selected)); [EOL]                 g2.draw(shape); [EOL]             } [EOL]         } [EOL]     } [EOL]     double xx = transX1; [EOL]     double yy = transY1; [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         xx = transY1; [EOL]         yy = transX1; [EOL]     } [EOL]     if (isItemLabelVisible(series, item, selected)) { [EOL]         drawItemLabel(g2, orientation, dataset, series, item, selected, xx, yy, (y1 < 0.0)); [EOL]     } [EOL]     int domainAxisIndex = plot.getDomainAxisIndex(domainAxis); [EOL]     int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis); [EOL]     updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex, rangeAxisIndex, transX1, transY1, orientation); [EOL]     if (entities != null && ShapeUtilities.isPointInRect(xx, yy, dataArea)) { [EOL]         addEntity(entities, entityArea, dataset, series, item, selected, xx, yy); [EOL]     } [EOL] } <line_num>: 995,1075
public LegendItem getLegendItem(int datasetIndex, int series) { [EOL]     XYPlot plot = getPlot(); [EOL]     if (plot == null) { [EOL]         return null; [EOL]     } [EOL]     LegendItem result = null; [EOL]     XYDataset dataset = plot.getDataset(datasetIndex); [EOL]     if (dataset != null) { [EOL]         if (getItemVisible(series, 0)) { [EOL]             String label = getLegendItemLabelGenerator().generateLabel(dataset, series); [EOL]             String description = label; [EOL]             String toolTipText = null; [EOL]             if (getLegendItemToolTipGenerator() != null) { [EOL]                 toolTipText = getLegendItemToolTipGenerator().generateLabel(dataset, series); [EOL]             } [EOL]             String urlText = null; [EOL]             if (getLegendItemURLGenerator() != null) { [EOL]                 urlText = getLegendItemURLGenerator().generateLabel(dataset, series); [EOL]             } [EOL]             boolean shapeIsVisible = getItemShapeVisible(series, 0); [EOL]             Shape shape = lookupLegendShape(series); [EOL]             boolean shapeIsFilled = getItemShapeFilled(series, 0); [EOL]             Paint fillPaint = (this.useFillPaint ? lookupSeriesFillPaint(series) : lookupSeriesPaint(series)); [EOL]             boolean shapeOutlineVisible = this.drawOutlines; [EOL]             Paint outlinePaint = (this.useOutlinePaint ? lookupSeriesOutlinePaint(series) : lookupSeriesPaint(series)); [EOL]             Stroke outlineStroke = lookupSeriesOutlineStroke(series); [EOL]             boolean lineVisible = getItemLineVisible(series, 0); [EOL]             Stroke lineStroke = lookupSeriesStroke(series); [EOL]             Paint linePaint = lookupSeriesPaint(series); [EOL]             result = new LegendItem(label, description, toolTipText, urlText, shapeIsVisible, shape, shapeIsFilled, fillPaint, shapeOutlineVisible, outlinePaint, outlineStroke, lineVisible, this.legendLine, lineStroke, linePaint); [EOL]             result.setLabelFont(lookupLegendTextFont(series)); [EOL]             Paint labelPaint = lookupLegendTextPaint(series); [EOL]             if (labelPaint != null) { [EOL]                 result.setLabelPaint(labelPaint); [EOL]             } [EOL]             result.setSeriesKey(dataset.getSeriesKey(series)); [EOL]             result.setSeriesIndex(series); [EOL]             result.setDataset(dataset); [EOL]             result.setDatasetIndex(datasetIndex); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1086,1143
public Object clone() throws CloneNotSupportedException { [EOL]     XYLineAndShapeRenderer clone = (XYLineAndShapeRenderer) super.clone(); [EOL]     clone.seriesLinesVisible = (BooleanList) this.seriesLinesVisible.clone(); [EOL]     if (this.legendLine != null) { [EOL]         clone.legendLine = ShapeUtilities.clone(this.legendLine); [EOL]     } [EOL]     clone.seriesShapesVisible = (BooleanList) this.seriesShapesVisible.clone(); [EOL]     clone.seriesShapesFilled = (BooleanList) this.seriesShapesFilled.clone(); [EOL]     return clone; [EOL] } <line_num>: 1152,1164
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof XYLineAndShapeRenderer)) { [EOL]         return false; [EOL]     } [EOL]     if (!super.equals(obj)) { [EOL]         return false; [EOL]     } [EOL]     XYLineAndShapeRenderer that = (XYLineAndShapeRenderer) obj; [EOL]     if (!ObjectUtilities.equal(this.seriesLinesVisible, that.seriesLinesVisible)) { [EOL]         return false; [EOL]     } [EOL]     if (this.baseLinesVisible != that.baseLinesVisible) { [EOL]         return false; [EOL]     } [EOL]     if (!ShapeUtilities.equal(this.legendLine, that.legendLine)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.seriesShapesVisible, that.seriesShapesVisible)) { [EOL]         return false; [EOL]     } [EOL]     if (this.baseShapesVisible != that.baseShapesVisible) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.seriesShapesFilled, that.seriesShapesFilled)) { [EOL]         return false; [EOL]     } [EOL]     if (this.baseShapesFilled != that.baseShapesFilled) { [EOL]         return false; [EOL]     } [EOL]     if (this.drawOutlines != that.drawOutlines) { [EOL]         return false; [EOL]     } [EOL]     if (this.useOutlinePaint != that.useOutlinePaint) { [EOL]         return false; [EOL]     } [EOL]     if (this.useFillPaint != that.useFillPaint) { [EOL]         return false; [EOL]     } [EOL]     if (this.drawSeriesLineAsPath != that.drawSeriesLineAsPath) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 1173,1221
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.legendLine = SerialUtilities.readShape(stream); [EOL] } <line_num>: 1231,1235
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writeShape(this.legendLine, stream); [EOL] } <line_num>: 1244,1247
