public XYBarRendererState(PlotRenderingInfo info) { [EOL]     super(info); [EOL] } <line_num>: 235,237
public XYBarRenderer() { [EOL]     this(0.0); [EOL] } <line_num>: 335,337
public XYBarRenderer(double margin) { [EOL]     super(); [EOL]     this.margin = margin; [EOL]     this.base = 0.0; [EOL]     this.useYInterval = false; [EOL]     this.gradientPaintTransformer = new StandardGradientPaintTransformer(); [EOL]     this.drawBarOutline = false; [EOL]     this.legendBar = new Rectangle2D.Double(-3.0, -5.0, 6.0, 10.0); [EOL]     this.barPainter = getDefaultBarPainter(); [EOL]     this.shadowsVisible = getDefaultShadowsVisible(); [EOL]     this.shadowXOffset = 4.0; [EOL]     this.shadowYOffset = 4.0; [EOL]     this.barAlignmentFactor = -1.0; [EOL] } <line_num>: 344,357
public static XYBarPainter getDefaultBarPainter() { [EOL]     return XYBarRenderer.defaultBarPainter; [EOL] } <line_num>: 173,175
public static void setDefaultBarPainter(XYBarPainter painter) { [EOL]     if (painter == null) { [EOL]         throw new IllegalArgumentException("Null 'painter' argument."); [EOL]     } [EOL]     XYBarRenderer.defaultBarPainter = painter; [EOL] } <line_num>: 184,189
public static boolean getDefaultShadowsVisible() { [EOL]     return XYBarRenderer.defaultShadowsVisible; [EOL] } <line_num>: 205,207
public static void setDefaultShadowsVisible(boolean visible) { [EOL]     XYBarRenderer.defaultShadowsVisible = visible; [EOL] } <line_num>: 218,220
public double getG2Base() { [EOL]     return this.g2Base; [EOL] } <line_num>: 244,246
public void setG2Base(double value) { [EOL]     this.g2Base = value; [EOL] } <line_num>: 253,255
public double getBase() { [EOL]     return this.base; [EOL] } <line_num>: 366,368
public void setBase(double base) { [EOL]     this.base = base; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 380,383
public boolean getUseYInterval() { [EOL]     return this.useYInterval; [EOL] } <line_num>: 393,395
public void setUseYInterval(boolean use) { [EOL]     if (this.useYInterval != use) { [EOL]         this.useYInterval = use; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 406,411
public double getMargin() { [EOL]     return this.margin; [EOL] } <line_num>: 421,423
public void setMargin(double margin) { [EOL]     this.margin = margin; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 433,436
public boolean isDrawBarOutline() { [EOL]     return this.drawBarOutline; [EOL] } <line_num>: 445,447
public void setDrawBarOutline(boolean draw) { [EOL]     this.drawBarOutline = draw; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 457,460
public GradientPaintTransformer getGradientPaintTransformer() { [EOL]     return this.gradientPaintTransformer; [EOL] } <line_num>: 470,472
public void setGradientPaintTransformer(GradientPaintTransformer transformer) { [EOL]     this.gradientPaintTransformer = transformer; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 482,486
public Shape getLegendBar() { [EOL]     return this.legendBar; [EOL] } <line_num>: 496,498
public void setLegendBar(Shape bar) { [EOL]     if (bar == null) { [EOL]         throw new IllegalArgumentException("Null 'bar' argument."); [EOL]     } [EOL]     this.legendBar = bar; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 508,514
public ItemLabelPosition getPositiveItemLabelPositionFallback() { [EOL]     return this.positiveItemLabelPositionFallback; [EOL] } <line_num>: 525,527
public void setPositiveItemLabelPositionFallback(ItemLabelPosition position) { [EOL]     this.positiveItemLabelPositionFallback = position; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 539,543
public ItemLabelPosition getNegativeItemLabelPositionFallback() { [EOL]     return this.negativeItemLabelPositionFallback; [EOL] } <line_num>: 554,556
public void setNegativeItemLabelPositionFallback(ItemLabelPosition position) { [EOL]     this.negativeItemLabelPositionFallback = position; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 568,572
public XYBarPainter getBarPainter() { [EOL]     return this.barPainter; [EOL] } <line_num>: 581,583
public void setBarPainter(XYBarPainter painter) { [EOL]     if (painter == null) { [EOL]         throw new IllegalArgumentException("Null 'painter' argument."); [EOL]     } [EOL]     this.barPainter = painter; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 593,599
public boolean getShadowsVisible() { [EOL]     return this.shadowsVisible; [EOL] } <line_num>: 609,611
public void setShadowVisible(boolean visible) { [EOL]     this.shadowsVisible = visible; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 622,625
public double getShadowXOffset() { [EOL]     return this.shadowXOffset; [EOL] } <line_num>: 634,636
public void setShadowXOffset(double offset) { [EOL]     this.shadowXOffset = offset; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 646,649
public double getShadowYOffset() { [EOL]     return this.shadowYOffset; [EOL] } <line_num>: 658,660
public void setShadowYOffset(double offset) { [EOL]     this.shadowYOffset = offset; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 670,673
public double getBarAlignmentFactor() { [EOL]     return this.barAlignmentFactor; [EOL] } <line_num>: 682,684
public void setBarAlignmentFactor(double factor) { [EOL]     this.barAlignmentFactor = factor; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 695,698
protected XYItemRendererState createState(PlotRenderingInfo info) { [EOL]     return new XYBarRendererState(info); [EOL] } <line_num>: 710,712
public XYItemRendererState initialise(Graphics2D g2, Rectangle2D dataArea, XYPlot plot, XYDataset dataset, PlotRenderingInfo info) { [EOL]     XYBarRendererState state = (XYBarRendererState) super.initialise(g2, dataArea, plot, dataset, info); [EOL]     ValueAxis rangeAxis = plot.getRangeAxisForDataset(plot.indexOf(dataset)); [EOL]     state.setG2Base(rangeAxis.valueToJava2D(this.base, dataArea, plot.getRangeAxisEdge())); [EOL]     return state; [EOL] } <line_num>: 729,740
public LegendItem getLegendItem(int datasetIndex, int series) { [EOL]     LegendItem result = null; [EOL]     XYPlot xyplot = getPlot(); [EOL]     if (xyplot != null) { [EOL]         XYDataset dataset = xyplot.getDataset(datasetIndex); [EOL]         if (dataset != null) { [EOL]             XYSeriesLabelGenerator lg = getLegendItemLabelGenerator(); [EOL]             String label = lg.generateLabel(dataset, series); [EOL]             String description = label; [EOL]             String toolTipText = null; [EOL]             if (getLegendItemToolTipGenerator() != null) { [EOL]                 toolTipText = getLegendItemToolTipGenerator().generateLabel(dataset, series); [EOL]             } [EOL]             String urlText = null; [EOL]             if (getLegendItemURLGenerator() != null) { [EOL]                 urlText = getLegendItemURLGenerator().generateLabel(dataset, series); [EOL]             } [EOL]             Shape shape = this.legendBar; [EOL]             Paint paint = lookupSeriesPaint(series); [EOL]             Paint outlinePaint = lookupSeriesOutlinePaint(series); [EOL]             Stroke outlineStroke = lookupSeriesOutlineStroke(series); [EOL]             if (this.drawBarOutline) { [EOL]                 result = new LegendItem(label, description, toolTipText, urlText, shape, paint, outlineStroke, outlinePaint); [EOL]             } else { [EOL]                 result = new LegendItem(label, description, toolTipText, urlText, shape, paint); [EOL]             } [EOL]             result.setLabelFont(lookupLegendTextFont(series)); [EOL]             Paint labelPaint = lookupLegendTextPaint(series); [EOL]             if (labelPaint != null) { [EOL]                 result.setLabelPaint(labelPaint); [EOL]             } [EOL]             result.setDataset(dataset); [EOL]             result.setDatasetIndex(datasetIndex); [EOL]             result.setSeriesKey(dataset.getSeriesKey(series)); [EOL]             result.setSeriesIndex(series); [EOL]             if (getGradientPaintTransformer() != null) { [EOL]                 result.setFillPaintTransformer(getGradientPaintTransformer()); [EOL]             } [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 751,799
protected Rectangle2D createBar(Graphics2D g2, Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset, int series, int item, boolean selected) { [EOL]     if (!getItemVisible(series, item)) { [EOL]         return null; [EOL]     } [EOL]     IntervalXYDataset ixyd = (IntervalXYDataset) dataset; [EOL]     double value0; [EOL]     double value1; [EOL]     if (this.useYInterval) { [EOL]         value0 = ixyd.getStartYValue(series, item); [EOL]         value1 = ixyd.getEndYValue(series, item); [EOL]     } else { [EOL]         value0 = this.base; [EOL]         value1 = ixyd.getYValue(series, item); [EOL]     } [EOL]     if (Double.isNaN(value0) || Double.isNaN(value1)) { [EOL]         return null; [EOL]     } [EOL]     if (value0 <= value1) { [EOL]         if (!rangeAxis.getRange().intersects(value0, value1)) { [EOL]             return null; [EOL]         } [EOL]     } else { [EOL]         if (!rangeAxis.getRange().intersects(value1, value0)) { [EOL]             return null; [EOL]         } [EOL]     } [EOL]     double translatedValue0 = rangeAxis.valueToJava2D(value0, dataArea, plot.getRangeAxisEdge()); [EOL]     double translatedValue1 = rangeAxis.valueToJava2D(value1, dataArea, plot.getRangeAxisEdge()); [EOL]     double bottom = Math.min(translatedValue0, translatedValue1); [EOL]     double top = Math.max(translatedValue0, translatedValue1); [EOL]     double startX = ixyd.getStartXValue(series, item); [EOL]     if (Double.isNaN(startX)) { [EOL]         return null; [EOL]     } [EOL]     double endX = ixyd.getEndXValue(series, item); [EOL]     if (Double.isNaN(endX)) { [EOL]         return null; [EOL]     } [EOL]     if (startX <= endX) { [EOL]         if (!domainAxis.getRange().intersects(startX, endX)) { [EOL]             return null; [EOL]         } [EOL]     } else { [EOL]         if (!domainAxis.getRange().intersects(endX, startX)) { [EOL]             return null; [EOL]         } [EOL]     } [EOL]     if (this.barAlignmentFactor >= 0.0 && this.barAlignmentFactor <= 1.0) { [EOL]         double x = ixyd.getXValue(series, item); [EOL]         double interval = endX - startX; [EOL]         startX = x - interval * this.barAlignmentFactor; [EOL]         endX = startX + interval; [EOL]     } [EOL]     RectangleEdge location = plot.getDomainAxisEdge(); [EOL]     double translatedStartX = domainAxis.valueToJava2D(startX, dataArea, location); [EOL]     double translatedEndX = domainAxis.valueToJava2D(endX, dataArea, location); [EOL]     double translatedWidth = Math.max(1, Math.abs(translatedEndX - translatedStartX)); [EOL]     double left = Math.min(translatedStartX, translatedEndX); [EOL]     if (getMargin() > 0.0) { [EOL]         double cut = translatedWidth * getMargin(); [EOL]         translatedWidth = translatedWidth - cut; [EOL]         left = left + cut / 2; [EOL]     } [EOL]     Rectangle2D bar = null; [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         bottom = Math.max(bottom, dataArea.getMinX()); [EOL]         top = Math.min(top, dataArea.getMaxX()); [EOL]         bar = new Rectangle2D.Double(bottom, left, top - bottom, translatedWidth); [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         bottom = Math.max(bottom, dataArea.getMinY()); [EOL]         top = Math.min(top, dataArea.getMaxY()); [EOL]         bar = new Rectangle2D.Double(left, bottom, translatedWidth, top - bottom); [EOL]     } [EOL]     return bar; [EOL] } <line_num>: 805,906
public void drawItem(Graphics2D g2, XYItemRendererState state, Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset, int series, int item, boolean selected, int pass) { [EOL]     Rectangle2D bar = createBar(g2, dataArea, plot, domainAxis, rangeAxis, dataset, series, item, selected); [EOL]     if (bar == null) { [EOL]         return; [EOL]     } [EOL]     boolean positive = true; [EOL]     if (this.useYInterval) { [EOL]         positive = dataset.getYValue(series, item) >= 0.0; [EOL]     } else { [EOL]         positive = dataset.getYValue(series, item) >= 0.0; [EOL]     } [EOL]     boolean inverted = rangeAxis.isInverted(); [EOL]     RectangleEdge barBase; [EOL]     if (plot.getOrientation() == PlotOrientation.HORIZONTAL) { [EOL]         if (positive && inverted || !positive && !inverted) { [EOL]             barBase = RectangleEdge.RIGHT; [EOL]         } else { [EOL]             barBase = RectangleEdge.LEFT; [EOL]         } [EOL]     } else { [EOL]         if (positive && !inverted || !positive && inverted) { [EOL]             barBase = RectangleEdge.BOTTOM; [EOL]         } else { [EOL]             barBase = RectangleEdge.TOP; [EOL]         } [EOL]     } [EOL]     if (getShadowsVisible()) { [EOL]         this.barPainter.paintBarShadow(g2, this, series, item, selected, bar, barBase, !this.useYInterval); [EOL]     } [EOL]     this.barPainter.paintBar(g2, this, series, item, selected, bar, barBase); [EOL]     if (isItemLabelVisible(series, item, selected)) { [EOL]         XYItemLabelGenerator generator = getItemLabelGenerator(series, item, selected); [EOL]         drawItemLabelForBar(g2, plot, dataset, series, item, selected, generator, bar, !positive); [EOL]     } [EOL]     double x1 = dataset.getXValue(series, item); [EOL]     double y1 = dataset.getYValue(series, item); [EOL]     double transX1 = domainAxis.valueToJava2D(x1, dataArea, plot.getDomainAxisEdge()); [EOL]     double transY1 = rangeAxis.valueToJava2D(y1, dataArea, plot.getRangeAxisEdge()); [EOL]     int domainAxisIndex = plot.getDomainAxisIndex(domainAxis); [EOL]     int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis); [EOL]     XYCrosshairState crosshairState = state.getCrosshairState(); [EOL]     updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex, rangeAxisIndex, transX1, transY1, plot.getOrientation()); [EOL]     EntityCollection entities = state.getEntityCollection(); [EOL]     if (entities != null) { [EOL]         addEntity(entities, bar, dataset, series, item, selected, 0.0, 0.0); [EOL]     } [EOL] } <line_num>: 923,993
protected void drawItemLabelForBar(Graphics2D g2, XYPlot plot, XYDataset dataset, int series, int item, boolean selected, XYItemLabelGenerator generator, Rectangle2D bar, boolean negative) { [EOL]     if (generator == null) { [EOL]         return; [EOL]     } [EOL]     String label = generator.generateLabel(dataset, series, item); [EOL]     if (label == null) { [EOL]         return; [EOL]     } [EOL]     Font labelFont = getItemLabelFont(series, item, selected); [EOL]     g2.setFont(labelFont); [EOL]     Paint paint = getItemLabelPaint(series, item, selected); [EOL]     g2.setPaint(paint); [EOL]     ItemLabelPosition position = null; [EOL]     if (!negative) { [EOL]         position = getPositiveItemLabelPosition(series, item, selected); [EOL]     } else { [EOL]         position = getNegativeItemLabelPosition(series, item, selected); [EOL]     } [EOL]     Point2D anchorPoint = calculateLabelAnchorPoint(position.getItemLabelAnchor(), bar, plot.getOrientation()); [EOL]     if (isInternalAnchor(position.getItemLabelAnchor())) { [EOL]         Shape bounds = TextUtilities.calculateRotatedStringBounds(label, g2, (float) anchorPoint.getX(), (float) anchorPoint.getY(), position.getTextAnchor(), position.getAngle(), position.getRotationAnchor()); [EOL]         if (bounds != null) { [EOL]             if (!bar.contains(bounds.getBounds2D())) { [EOL]                 if (!negative) { [EOL]                     position = getPositiveItemLabelPositionFallback(); [EOL]                 } else { [EOL]                     position = getNegativeItemLabelPositionFallback(); [EOL]                 } [EOL]                 if (position != null) { [EOL]                     anchorPoint = calculateLabelAnchorPoint(position.getItemLabelAnchor(), bar, plot.getOrientation()); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     if (position != null) { [EOL]         TextUtilities.drawRotatedString(label, g2, (float) anchorPoint.getX(), (float) anchorPoint.getY(), position.getTextAnchor(), position.getAngle(), position.getRotationAnchor()); [EOL]     } [EOL] } <line_num>: 1014,1075
private Point2D calculateLabelAnchorPoint(ItemLabelAnchor anchor, Rectangle2D bar, PlotOrientation orientation) { [EOL]     Point2D result = null; [EOL]     double offset = getItemLabelAnchorOffset(); [EOL]     double x0 = bar.getX() - offset; [EOL]     double x1 = bar.getX(); [EOL]     double x2 = bar.getX() + offset; [EOL]     double x3 = bar.getCenterX(); [EOL]     double x4 = bar.getMaxX() - offset; [EOL]     double x5 = bar.getMaxX(); [EOL]     double x6 = bar.getMaxX() + offset; [EOL]     double y0 = bar.getMaxY() + offset; [EOL]     double y1 = bar.getMaxY(); [EOL]     double y2 = bar.getMaxY() - offset; [EOL]     double y3 = bar.getCenterY(); [EOL]     double y4 = bar.getMinY() + offset; [EOL]     double y5 = bar.getMinY(); [EOL]     double y6 = bar.getMinY() - offset; [EOL]     if (anchor == ItemLabelAnchor.CENTER) { [EOL]         result = new Point2D.Double(x3, y3); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE1) { [EOL]         result = new Point2D.Double(x4, y4); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE2) { [EOL]         result = new Point2D.Double(x4, y4); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE3) { [EOL]         result = new Point2D.Double(x4, y3); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE4) { [EOL]         result = new Point2D.Double(x4, y2); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE5) { [EOL]         result = new Point2D.Double(x4, y2); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE6) { [EOL]         result = new Point2D.Double(x3, y2); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE7) { [EOL]         result = new Point2D.Double(x2, y2); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE8) { [EOL]         result = new Point2D.Double(x2, y2); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE9) { [EOL]         result = new Point2D.Double(x2, y3); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE10) { [EOL]         result = new Point2D.Double(x2, y4); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE11) { [EOL]         result = new Point2D.Double(x2, y4); [EOL]     } else if (anchor == ItemLabelAnchor.INSIDE12) { [EOL]         result = new Point2D.Double(x3, y4); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE1) { [EOL]         result = new Point2D.Double(x5, y6); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE2) { [EOL]         result = new Point2D.Double(x6, y5); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE3) { [EOL]         result = new Point2D.Double(x6, y3); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE4) { [EOL]         result = new Point2D.Double(x6, y1); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE5) { [EOL]         result = new Point2D.Double(x5, y0); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE6) { [EOL]         result = new Point2D.Double(x3, y0); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE7) { [EOL]         result = new Point2D.Double(x1, y0); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE8) { [EOL]         result = new Point2D.Double(x0, y1); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE9) { [EOL]         result = new Point2D.Double(x0, y3); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE10) { [EOL]         result = new Point2D.Double(x0, y5); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE11) { [EOL]         result = new Point2D.Double(x1, y6); [EOL]     } else if (anchor == ItemLabelAnchor.OUTSIDE12) { [EOL]         result = new Point2D.Double(x3, y6); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1086,1185
private boolean isInternalAnchor(ItemLabelAnchor anchor) { [EOL]     return anchor == ItemLabelAnchor.CENTER || anchor == ItemLabelAnchor.INSIDE1 || anchor == ItemLabelAnchor.INSIDE2 || anchor == ItemLabelAnchor.INSIDE3 || anchor == ItemLabelAnchor.INSIDE4 || anchor == ItemLabelAnchor.INSIDE5 || anchor == ItemLabelAnchor.INSIDE6 || anchor == ItemLabelAnchor.INSIDE7 || anchor == ItemLabelAnchor.INSIDE8 || anchor == ItemLabelAnchor.INSIDE9 || anchor == ItemLabelAnchor.INSIDE10 || anchor == ItemLabelAnchor.INSIDE11 || anchor == ItemLabelAnchor.INSIDE12; [EOL] } <line_num>: 1194,1208
public Rectangle2D createHotSpotBounds(Graphics2D g2, Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset, int series, int item, boolean selected, Rectangle2D result) { [EOL]     return createBar(g2, dataArea, plot, domainAxis, rangeAxis, dataset, series, item, selected); [EOL] } <line_num>: 1210,1216
public Range findDomainBounds(XYDataset dataset) { [EOL]     if (dataset != null) { [EOL]         return DatasetUtilities.findDomainBounds(dataset, true); [EOL]     } else { [EOL]         return null; [EOL]     } [EOL] } <line_num>: 1228,1235
public Range findRangeBounds(XYDataset dataset) { [EOL]     if (dataset != null) { [EOL]         return DatasetUtilities.findRangeBounds(dataset, this.useYInterval); [EOL]     } else { [EOL]         return null; [EOL]     } [EOL] } <line_num>: 1247,1255
public Object clone() throws CloneNotSupportedException { [EOL]     XYBarRenderer result = (XYBarRenderer) super.clone(); [EOL]     if (this.gradientPaintTransformer != null) { [EOL]         result.gradientPaintTransformer = (GradientPaintTransformer) ObjectUtilities.clone(this.gradientPaintTransformer); [EOL]     } [EOL]     result.legendBar = ShapeUtilities.clone(this.legendBar); [EOL]     return result; [EOL] } <line_num>: 1264,1272
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof XYBarRenderer)) { [EOL]         return false; [EOL]     } [EOL]     XYBarRenderer that = (XYBarRenderer) obj; [EOL]     if (this.base != that.base) { [EOL]         return false; [EOL]     } [EOL]     if (this.drawBarOutline != that.drawBarOutline) { [EOL]         return false; [EOL]     } [EOL]     if (this.margin != that.margin) { [EOL]         return false; [EOL]     } [EOL]     if (this.useYInterval != that.useYInterval) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.gradientPaintTransformer, that.gradientPaintTransformer)) { [EOL]         return false; [EOL]     } [EOL]     if (!ShapeUtilities.equal(this.legendBar, that.legendBar)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.positiveItemLabelPositionFallback, that.positiveItemLabelPositionFallback)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.negativeItemLabelPositionFallback, that.negativeItemLabelPositionFallback)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.barPainter.equals(that.barPainter)) { [EOL]         return false; [EOL]     } [EOL]     if (this.shadowsVisible != that.shadowsVisible) { [EOL]         return false; [EOL]     } [EOL]     if (this.shadowXOffset != that.shadowXOffset) { [EOL]         return false; [EOL]     } [EOL]     if (this.shadowYOffset != that.shadowYOffset) { [EOL]         return false; [EOL]     } [EOL]     if (this.barAlignmentFactor != that.barAlignmentFactor) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 1281,1332
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.legendBar = SerialUtilities.readShape(stream); [EOL] } <line_num>: 1342,1346
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writeShape(this.legendBar, stream); [EOL] } <line_num>: 1355,1358
