public ClusteredXYBarRenderer() { [EOL]     this(0.0, false); [EOL] } <line_num>: 113,115
public ClusteredXYBarRenderer(double margin, boolean centerBarAtStartValue) { [EOL]     super(margin); [EOL]     this.centerBarAtStartValue = centerBarAtStartValue; [EOL] } <line_num>: 124,128
public int getPassCount() { [EOL]     return 2; [EOL] } <line_num>: 137,139
public Range findDomainBounds(XYDataset dataset) { [EOL]     if (dataset == null) { [EOL]         return null; [EOL]     } [EOL]     if (this.centerBarAtStartValue) { [EOL]         return findDomainBoundsWithOffset((IntervalXYDataset) dataset); [EOL]     } else { [EOL]         return super.findDomainBounds(dataset); [EOL]     } [EOL] } <line_num>: 148,159
protected Range findDomainBoundsWithOffset(IntervalXYDataset dataset) { [EOL]     if (dataset == null) { [EOL]         throw new IllegalArgumentException("Null 'dataset' argument."); [EOL]     } [EOL]     double minimum = Double.POSITIVE_INFINITY; [EOL]     double maximum = Double.NEGATIVE_INFINITY; [EOL]     int seriesCount = dataset.getSeriesCount(); [EOL]     double lvalue; [EOL]     double uvalue; [EOL]     for (int series = 0; series < seriesCount; series++) { [EOL]         int itemCount = dataset.getItemCount(series); [EOL]         for (int item = 0; item < itemCount; item++) { [EOL]             lvalue = dataset.getStartXValue(series, item); [EOL]             uvalue = dataset.getEndXValue(series, item); [EOL]             double offset = (uvalue - lvalue) / 2.0; [EOL]             lvalue = lvalue - offset; [EOL]             uvalue = uvalue - offset; [EOL]             minimum = Math.min(minimum, lvalue); [EOL]             maximum = Math.max(maximum, uvalue); [EOL]         } [EOL]     } [EOL]     if (minimum > maximum) { [EOL]         return null; [EOL]     } else { [EOL]         return new Range(minimum, maximum); [EOL]     } [EOL] } <line_num>: 170,198
public void drawItem(Graphics2D g2, XYItemRendererState state, Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset, int series, int item, boolean selected, int pass) { [EOL]     IntervalXYDataset intervalDataset = (IntervalXYDataset) dataset; [EOL]     double y0; [EOL]     double y1; [EOL]     if (getUseYInterval()) { [EOL]         y0 = intervalDataset.getStartYValue(series, item); [EOL]         y1 = intervalDataset.getEndYValue(series, item); [EOL]     } else { [EOL]         y0 = getBase(); [EOL]         y1 = intervalDataset.getYValue(series, item); [EOL]     } [EOL]     if (Double.isNaN(y0) || Double.isNaN(y1)) { [EOL]         return; [EOL]     } [EOL]     double yy0 = rangeAxis.valueToJava2D(y0, dataArea, plot.getRangeAxisEdge()); [EOL]     double yy1 = rangeAxis.valueToJava2D(y1, dataArea, plot.getRangeAxisEdge()); [EOL]     RectangleEdge xAxisLocation = plot.getDomainAxisEdge(); [EOL]     double x0 = intervalDataset.getStartXValue(series, item); [EOL]     double xx0 = domainAxis.valueToJava2D(x0, dataArea, xAxisLocation); [EOL]     double x1 = intervalDataset.getEndXValue(series, item); [EOL]     double xx1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation); [EOL]     double intervalW = xx1 - xx0; [EOL]     double baseX = xx0; [EOL]     if (this.centerBarAtStartValue) { [EOL]         baseX = baseX - intervalW / 2.0; [EOL]     } [EOL]     double m = getMargin(); [EOL]     if (m > 0.0) { [EOL]         double cut = intervalW * getMargin(); [EOL]         intervalW = intervalW - cut; [EOL]         baseX = baseX + (cut / 2); [EOL]     } [EOL]     double intervalH = Math.abs(yy0 - yy1); [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     int numSeries = dataset.getSeriesCount(); [EOL]     double seriesBarWidth = intervalW / numSeries; [EOL]     Rectangle2D bar = null; [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         double barY0 = baseX + (seriesBarWidth * series); [EOL]         double barY1 = barY0 + seriesBarWidth; [EOL]         double rx = Math.min(yy0, yy1); [EOL]         double rw = intervalH; [EOL]         double ry = Math.min(barY0, barY1); [EOL]         double rh = Math.abs(barY1 - barY0); [EOL]         bar = new Rectangle2D.Double(rx, ry, rw, rh); [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         double barX0 = baseX + (seriesBarWidth * series); [EOL]         double barX1 = barX0 + seriesBarWidth; [EOL]         double rx = Math.min(barX0, barX1); [EOL]         double rw = Math.abs(barX1 - barX0); [EOL]         double ry = Math.min(yy0, yy1); [EOL]         double rh = intervalH; [EOL]         bar = new Rectangle2D.Double(rx, ry, rw, rh); [EOL]     } [EOL]     boolean positive = (y1 > 0.0); [EOL]     boolean inverted = rangeAxis.isInverted(); [EOL]     RectangleEdge barBase; [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         if (positive && inverted || !positive && !inverted) { [EOL]             barBase = RectangleEdge.RIGHT; [EOL]         } else { [EOL]             barBase = RectangleEdge.LEFT; [EOL]         } [EOL]     } else { [EOL]         if (positive && !inverted || !positive && inverted) { [EOL]             barBase = RectangleEdge.BOTTOM; [EOL]         } else { [EOL]             barBase = RectangleEdge.TOP; [EOL]         } [EOL]     } [EOL]     if (pass == 0 && getShadowsVisible()) { [EOL]         getBarPainter().paintBarShadow(g2, this, series, item, selected, bar, barBase, !getUseYInterval()); [EOL]     } [EOL]     if (pass == 1) { [EOL]         getBarPainter().paintBar(g2, this, series, item, selected, bar, barBase); [EOL]         if (isItemLabelVisible(series, item, selected)) { [EOL]             XYItemLabelGenerator generator = getItemLabelGenerator(series, item, selected); [EOL]             drawItemLabelForBar(g2, plot, dataset, series, item, selected, generator, bar, y1 < 0.0); [EOL]         } [EOL]         if (state.getInfo() != null) { [EOL]             EntityCollection entities = state.getInfo().getOwner().getEntityCollection(); [EOL]             if (entities != null) { [EOL]                 addEntity(entities, bar, dataset, series, item, selected, bar.getCenterX(), bar.getCenterY()); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 220,336
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof ClusteredXYBarRenderer)) { [EOL]         return false; [EOL]     } [EOL]     ClusteredXYBarRenderer that = (ClusteredXYBarRenderer) obj; [EOL]     if (this.centerBarAtStartValue != that.centerBarAtStartValue) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 348,360
public Object clone() throws CloneNotSupportedException { [EOL]     return super.clone(); [EOL] } <line_num>: 369,371
