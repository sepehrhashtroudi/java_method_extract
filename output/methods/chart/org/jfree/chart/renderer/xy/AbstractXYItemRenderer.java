protected AbstractXYItemRenderer() { [EOL]     super(); [EOL]     this.itemLabelGeneratorList = new ObjectList(); [EOL]     this.toolTipGeneratorList = new ObjectList(); [EOL]     this.urlGeneratorList = new ObjectList(); [EOL]     this.baseURLGenerator = null; [EOL]     this.backgroundAnnotations = new java.util.ArrayList(); [EOL]     this.foregroundAnnotations = new java.util.ArrayList(); [EOL]     this.legendItemLabelGenerator = new StandardXYSeriesLabelGenerator("{0}"); [EOL] } <line_num>: 244,254
public int getPassCount() { [EOL]     return 1; [EOL] } <line_num>: 263,265
public XYPlot getPlot() { [EOL]     return this.plot; [EOL] } <line_num>: 272,274
public void setPlot(XYPlot plot) { [EOL]     this.plot = plot; [EOL] } <line_num>: 281,283
protected XYItemRendererState createState(PlotRenderingInfo info) { [EOL]     return new XYItemRendererState(info); [EOL] } <line_num>: 295,297
public XYItemRendererState initialise(Graphics2D g2, Rectangle2D dataArea, XYPlot plot, XYDataset dataset, PlotRenderingInfo info) { [EOL]     XYItemRendererState state = createState(info); [EOL]     XYDatasetSelectionState selectionState = null; [EOL]     if (dataset instanceof SelectableXYDataset) { [EOL]         SelectableXYDataset sxyd = (SelectableXYDataset) dataset; [EOL]         selectionState = sxyd.getSelectionState(); [EOL]     } [EOL]     if (selectionState == null && info != null) { [EOL]         ChartRenderingInfo cri = info.getOwner(); [EOL]         if (cri != null) { [EOL]             RenderingSource rs = cri.getRenderingSource(); [EOL]             selectionState = (XYDatasetSelectionState) rs.getSelectionState(dataset); [EOL]         } [EOL]     } [EOL]     state.setSelectionState(selectionState); [EOL]     return state; [EOL] } <line_num>: 316,340
public XYItemLabelGenerator getItemLabelGenerator(int series, int item, boolean selected) { [EOL]     XYItemLabelGenerator generator = (XYItemLabelGenerator) this.itemLabelGeneratorList.get(series); [EOL]     if (generator == null) { [EOL]         generator = this.baseItemLabelGenerator; [EOL]     } [EOL]     return generator; [EOL] } <line_num>: 358,366
public XYItemLabelGenerator getSeriesItemLabelGenerator(int series) { [EOL]     return (XYItemLabelGenerator) this.itemLabelGeneratorList.get(series); [EOL] } <line_num>: 377,379
public void setSeriesItemLabelGenerator(int series, XYItemLabelGenerator generator) { [EOL]     this.itemLabelGeneratorList.set(series, generator); [EOL]     fireChangeEvent(); [EOL] } <line_num>: 390,394
public void setSeriesItemLabelGenerator(int series, XYItemLabelGenerator generator, boolean notify) { [EOL]     this.itemLabelGeneratorList.set(series, generator); [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 409,415
public XYItemLabelGenerator getBaseItemLabelGenerator() { [EOL]     return this.baseItemLabelGenerator; [EOL] } <line_num>: 422,424
public void setBaseItemLabelGenerator(XYItemLabelGenerator generator) { [EOL]     setBaseItemLabelGenerator(generator, true); [EOL] } <line_num>: 432,434
public void setBaseItemLabelGenerator(XYItemLabelGenerator generator, boolean notify) { [EOL]     this.baseItemLabelGenerator = generator; [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 447,453
public XYToolTipGenerator getToolTipGenerator(int series, int item, boolean selected) { [EOL]     XYToolTipGenerator generator = (XYToolTipGenerator) this.toolTipGeneratorList.get(series); [EOL]     if (generator == null) { [EOL]         generator = this.baseToolTipGenerator; [EOL]     } [EOL]     return generator; [EOL] } <line_num>: 470,478
public XYToolTipGenerator getSeriesToolTipGenerator(int series) { [EOL]     return (XYToolTipGenerator) this.toolTipGeneratorList.get(series); [EOL] } <line_num>: 489,491
public void setSeriesToolTipGenerator(int series, XYToolTipGenerator generator) { [EOL]     setSeriesToolTipGenerator(series, generator, true); [EOL] } <line_num>: 500,503
public void setSeriesToolTipGenerator(int series, XYToolTipGenerator generator, boolean notify) { [EOL]     this.toolTipGeneratorList.set(series, generator); [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 515,521
public XYToolTipGenerator getBaseToolTipGenerator() { [EOL]     return this.baseToolTipGenerator; [EOL] } <line_num>: 530,532
public void setBaseToolTipGenerator(XYToolTipGenerator generator) { [EOL]     setBaseToolTipGenerator(generator, true); [EOL] } <line_num>: 542,544
public void setBaseToolTipGenerator(XYToolTipGenerator generator, boolean notify) { [EOL]     this.baseToolTipGenerator = generator; [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 557,563
public XYURLGenerator getURLGenerator(int series, int item, boolean selected) { [EOL]     XYURLGenerator generator = (XYURLGenerator) this.urlGeneratorList.get(series); [EOL]     if (generator == null) { [EOL]         generator = this.baseURLGenerator; [EOL]     } [EOL]     return generator; [EOL] } <line_num>: 578,586
public XYURLGenerator getSeriesURLGenerator(int series) { [EOL]     return (XYURLGenerator) this.urlGeneratorList.get(series); [EOL] } <line_num>: 599,601
public void setSeriesURLGenerator(int series, XYURLGenerator generator) { [EOL]     setSeriesURLGenerator(series, generator, true); [EOL] } <line_num>: 614,616
public void setSeriesURLGenerator(int series, XYURLGenerator generator, boolean notify) { [EOL]     this.toolTipGeneratorList.set(series, generator); [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 630,636
public XYURLGenerator getBaseURLGenerator() { [EOL]     return this.baseURLGenerator; [EOL] } <line_num>: 647,649
public void setBaseURLGenerator(XYURLGenerator generator) { [EOL]     setBaseURLGenerator(generator, true); [EOL] } <line_num>: 661,663
public void setBaseURLGenerator(XYURLGenerator generator, boolean notify) { [EOL]     this.baseURLGenerator = generator; [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 676,681
public void addAnnotation(XYAnnotation annotation) { [EOL]     addAnnotation(annotation, Layer.FOREGROUND); [EOL] } <line_num>: 692,695
public void addAnnotation(XYAnnotation annotation, Layer layer) { [EOL]     if (annotation == null) { [EOL]         throw new IllegalArgumentException("Null 'annotation' argument."); [EOL]     } [EOL]     if (layer.equals(Layer.FOREGROUND)) { [EOL]         this.foregroundAnnotations.add(annotation); [EOL]         annotation.addChangeListener(this); [EOL]         fireChangeEvent(); [EOL]     } else if (layer.equals(Layer.BACKGROUND)) { [EOL]         this.backgroundAnnotations.add(annotation); [EOL]         annotation.addChangeListener(this); [EOL]         fireChangeEvent(); [EOL]     } else { [EOL]         throw new RuntimeException("Unknown layer."); [EOL]     } [EOL] } <line_num>: 704,722
public boolean removeAnnotation(XYAnnotation annotation) { [EOL]     boolean removed = this.foregroundAnnotations.remove(annotation); [EOL]     removed = removed & this.backgroundAnnotations.remove(annotation); [EOL]     annotation.removeChangeListener(this); [EOL]     fireChangeEvent(); [EOL]     return removed; [EOL] } <line_num>: 733,739
public void removeAnnotations() { [EOL]     for (int i = 0; i < this.foregroundAnnotations.size(); i++) { [EOL]         XYAnnotation annotation = (XYAnnotation) this.foregroundAnnotations.get(i); [EOL]         annotation.removeChangeListener(this); [EOL]     } [EOL]     for (int i = 0; i < this.backgroundAnnotations.size(); i++) { [EOL]         XYAnnotation annotation = (XYAnnotation) this.backgroundAnnotations.get(i); [EOL]         annotation.removeChangeListener(this); [EOL]     } [EOL]     this.foregroundAnnotations.clear(); [EOL]     this.backgroundAnnotations.clear(); [EOL]     fireChangeEvent(); [EOL] } <line_num>: 745,759
public void annotationChanged(AnnotationChangeEvent event) { [EOL]     fireChangeEvent(); [EOL] } <line_num>: 769,771
public Collection getAnnotations() { [EOL]     List result = new java.util.ArrayList(this.foregroundAnnotations); [EOL]     result.addAll(this.backgroundAnnotations); [EOL]     return result; [EOL] } <line_num>: 782,786
public XYSeriesLabelGenerator getLegendItemLabelGenerator() { [EOL]     return this.legendItemLabelGenerator; [EOL] } <line_num>: 795,797
public void setLegendItemLabelGenerator(XYSeriesLabelGenerator generator) { [EOL]     if (generator == null) { [EOL]         throw new IllegalArgumentException("Null 'generator' argument."); [EOL]     } [EOL]     this.legendItemLabelGenerator = generator; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 807,813
public XYSeriesLabelGenerator getLegendItemToolTipGenerator() { [EOL]     return this.legendItemToolTipGenerator; [EOL] } <line_num>: 822,824
public void setLegendItemToolTipGenerator(XYSeriesLabelGenerator generator) { [EOL]     this.legendItemToolTipGenerator = generator; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 834,838
public XYSeriesLabelGenerator getLegendItemURLGenerator() { [EOL]     return this.legendItemURLGenerator; [EOL] } <line_num>: 847,849
public void setLegendItemURLGenerator(XYSeriesLabelGenerator generator) { [EOL]     this.legendItemURLGenerator = generator; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 859,862
public Range findDomainBounds(XYDataset dataset) { [EOL]     return findDomainBounds(dataset, false); [EOL] } <line_num>: 875,877
protected Range findDomainBounds(XYDataset dataset, boolean includeInterval) { [EOL]     if (dataset == null) { [EOL]         return null; [EOL]     } [EOL]     if (getDataBoundsIncludesVisibleSeriesOnly()) { [EOL]         List visibleSeriesKeys = new ArrayList(); [EOL]         int seriesCount = dataset.getSeriesCount(); [EOL]         for (int s = 0; s < seriesCount; s++) { [EOL]             if (isSeriesVisible(s)) { [EOL]                 visibleSeriesKeys.add(dataset.getSeriesKey(s)); [EOL]             } [EOL]         } [EOL]         return DatasetUtilities.findDomainBounds(dataset, visibleSeriesKeys, includeInterval); [EOL]     } else { [EOL]         return DatasetUtilities.findDomainBounds(dataset, includeInterval); [EOL]     } [EOL] } <line_num>: 891,910
public Range findRangeBounds(XYDataset dataset) { [EOL]     return findRangeBounds(dataset, false); [EOL] } <line_num>: 923,925
protected Range findRangeBounds(XYDataset dataset, boolean includeInterval) { [EOL]     if (dataset == null) { [EOL]         return null; [EOL]     } [EOL]     if (getDataBoundsIncludesVisibleSeriesOnly()) { [EOL]         List visibleSeriesKeys = new ArrayList(); [EOL]         int seriesCount = dataset.getSeriesCount(); [EOL]         for (int s = 0; s < seriesCount; s++) { [EOL]             if (isSeriesVisible(s)) { [EOL]                 visibleSeriesKeys.add(dataset.getSeriesKey(s)); [EOL]             } [EOL]         } [EOL]         Range xRange = null; [EOL]         XYPlot p = getPlot(); [EOL]         if (p != null) { [EOL]             ValueAxis xAxis = null; [EOL]             int index = p.getIndexOf(this); [EOL]             if (index >= 0) { [EOL]                 xAxis = plot.getDomainAxisForDataset(index); [EOL]             } [EOL]             if (xAxis != null) { [EOL]                 xRange = xAxis.getRange(); [EOL]             } [EOL]         } [EOL]         if (xRange == null) { [EOL]             xRange = new Range(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY); [EOL]         } [EOL]         return DatasetUtilities.findRangeBounds(dataset, visibleSeriesKeys, xRange, includeInterval); [EOL]     } else { [EOL]         return DatasetUtilities.findRangeBounds(dataset, includeInterval); [EOL]     } [EOL] } <line_num>: 939,976
public LegendItemCollection getLegendItems() { [EOL]     if (this.plot == null) { [EOL]         return new LegendItemCollection(); [EOL]     } [EOL]     LegendItemCollection result = new LegendItemCollection(); [EOL]     int index = this.plot.getIndexOf(this); [EOL]     XYDataset dataset = this.plot.getDataset(index); [EOL]     if (dataset != null) { [EOL]         int seriesCount = dataset.getSeriesCount(); [EOL]         for (int i = 0; i < seriesCount; i++) { [EOL]             if (isSeriesVisibleInLegend(i)) { [EOL]                 LegendItem item = getLegendItem(index, i); [EOL]                 if (item != null) { [EOL]                     result.add(item); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 984,1004
public LegendItem getLegendItem(int datasetIndex, int series) { [EOL]     XYPlot xyplot = getPlot(); [EOL]     if (xyplot == null) { [EOL]         return null; [EOL]     } [EOL]     XYDataset dataset = xyplot.getDataset(datasetIndex); [EOL]     if (dataset == null) { [EOL]         return null; [EOL]     } [EOL]     String label = this.legendItemLabelGenerator.generateLabel(dataset, series); [EOL]     String description = label; [EOL]     String toolTipText = null; [EOL]     if (getLegendItemToolTipGenerator() != null) { [EOL]         toolTipText = getLegendItemToolTipGenerator().generateLabel(dataset, series); [EOL]     } [EOL]     String urlText = null; [EOL]     if (getLegendItemURLGenerator() != null) { [EOL]         urlText = getLegendItemURLGenerator().generateLabel(dataset, series); [EOL]     } [EOL]     Shape shape = lookupLegendShape(series); [EOL]     Paint paint = lookupSeriesPaint(series); [EOL]     LegendItem item = new LegendItem(label, paint); [EOL]     item.setToolTipText(toolTipText); [EOL]     item.setURLText(urlText); [EOL]     item.setLabelFont(lookupLegendTextFont(series)); [EOL]     Paint labelPaint = lookupLegendTextPaint(series); [EOL]     if (labelPaint != null) { [EOL]         item.setLabelPaint(labelPaint); [EOL]     } [EOL]     item.setSeriesKey(dataset.getSeriesKey(series)); [EOL]     item.setSeriesIndex(series); [EOL]     item.setDataset(dataset); [EOL]     item.setDatasetIndex(datasetIndex); [EOL]     if (getTreatLegendShapeAsLine()) { [EOL]         item.setLineVisible(true); [EOL]         item.setLine(shape); [EOL]         item.setLinePaint(paint); [EOL]         item.setShapeVisible(false); [EOL]     } else { [EOL]         Paint outlinePaint = lookupSeriesOutlinePaint(series); [EOL]         Stroke outlineStroke = lookupSeriesOutlineStroke(series); [EOL]         item.setOutlinePaint(outlinePaint); [EOL]         item.setOutlineStroke(outlineStroke); [EOL]     } [EOL]     return item; [EOL] } <line_num>: 1015,1065
public Rectangle2D createHotSpotBounds(Graphics2D g2, Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset, int series, int item, boolean selected, XYItemRendererState state, Rectangle2D result) { [EOL]     if (result == null) { [EOL]         result = new Rectangle(); [EOL]     } [EOL]     double x = dataset.getXValue(series, item); [EOL]     double y = dataset.getYValue(series, item); [EOL]     double xx = domainAxis.valueToJava2D(x, dataArea, plot.getDomainAxisEdge()); [EOL]     double yy = rangeAxis.valueToJava2D(y, dataArea, plot.getRangeAxisEdge()); [EOL]     result.setRect(xx - 2, yy - 2, 4, 4); [EOL]     return result; [EOL] } <line_num>: 1067,1082
public Shape createHotSpotShape(Graphics2D g2, Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset, int series, int item, XYItemRendererState state, boolean selected) { [EOL]     return createHotSpotBounds(g2, dataArea, plot, domainAxis, rangeAxis, dataset, series, item, selected, state, null); [EOL] } <line_num>: 1084,1091
public boolean hitTest(double xx, double yy, Graphics2D g2, Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset, int series, int item, XYItemRendererState state, boolean selected) { [EOL]     Rectangle2D bounds = createHotSpotBounds(g2, dataArea, plot, domainAxis, rangeAxis, dataset, series, item, selected, state, null); [EOL]     if (bounds == null) { [EOL]         return false; [EOL]     } [EOL]     return bounds.contains(xx, yy); [EOL] } <line_num>: 1114,1128
public void fillDomainGridBand(Graphics2D g2, XYPlot plot, ValueAxis axis, Rectangle2D dataArea, double start, double end) { [EOL]     double x1 = axis.valueToJava2D(start, dataArea, plot.getDomainAxisEdge()); [EOL]     double x2 = axis.valueToJava2D(end, dataArea, plot.getDomainAxisEdge()); [EOL]     Rectangle2D band; [EOL]     if (plot.getOrientation() == PlotOrientation.VERTICAL) { [EOL]         band = new Rectangle2D.Double(Math.min(x1, x2), dataArea.getMinY(), Math.abs(x2 - x1), dataArea.getWidth()); [EOL]     } else { [EOL]         band = new Rectangle2D.Double(dataArea.getMinX(), Math.min(x1, x2), dataArea.getWidth(), Math.abs(x2 - x1)); [EOL]     } [EOL]     Paint paint = plot.getDomainTickBandPaint(); [EOL]     if (paint != null) { [EOL]         g2.setPaint(paint); [EOL]         g2.fill(band); [EOL]     } [EOL] } <line_num>: 1141,1164
public void fillRangeGridBand(Graphics2D g2, XYPlot plot, ValueAxis axis, Rectangle2D dataArea, double start, double end) { [EOL]     double y1 = axis.valueToJava2D(start, dataArea, plot.getRangeAxisEdge()); [EOL]     double y2 = axis.valueToJava2D(end, dataArea, plot.getRangeAxisEdge()); [EOL]     Rectangle2D band; [EOL]     if (plot.getOrientation() == PlotOrientation.VERTICAL) { [EOL]         band = new Rectangle2D.Double(dataArea.getMinX(), Math.min(y1, y2), dataArea.getWidth(), Math.abs(y2 - y1)); [EOL]     } else { [EOL]         band = new Rectangle2D.Double(Math.min(y1, y2), dataArea.getMinY(), Math.abs(y2 - y1), dataArea.getHeight()); [EOL]     } [EOL]     Paint paint = plot.getRangeTickBandPaint(); [EOL]     if (paint != null) { [EOL]         g2.setPaint(paint); [EOL]         g2.fill(band); [EOL]     } [EOL] } <line_num>: 1177,1199
public void drawDomainGridLine(Graphics2D g2, XYPlot plot, ValueAxis axis, Rectangle2D dataArea, double value) { [EOL]     Range range = axis.getRange(); [EOL]     if (!range.contains(value)) { [EOL]         return; [EOL]     } [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     double v = axis.valueToJava2D(value, dataArea, plot.getDomainAxisEdge()); [EOL]     Line2D line = null; [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         line = new Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v); [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         line = new Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY()); [EOL]     } [EOL]     Paint paint = plot.getDomainGridlinePaint(); [EOL]     Stroke stroke = plot.getDomainGridlineStroke(); [EOL]     g2.setPaint(paint != null ? paint : Plot.DEFAULT_OUTLINE_PAINT); [EOL]     g2.setStroke(stroke != null ? stroke : Plot.DEFAULT_OUTLINE_STROKE); [EOL]     g2.draw(line); [EOL] } <line_num>: 1211,1241
public void drawDomainLine(Graphics2D g2, XYPlot plot, ValueAxis axis, Rectangle2D dataArea, double value, Paint paint, Stroke stroke) { [EOL]     Range range = axis.getRange(); [EOL]     if (!range.contains(value)) { [EOL]         return; [EOL]     } [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     Line2D line = null; [EOL]     double v = axis.valueToJava2D(value, dataArea, plot.getDomainAxisEdge()); [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         line = new Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v); [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         line = new Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY()); [EOL]     } [EOL]     g2.setPaint(paint); [EOL]     g2.setStroke(stroke); [EOL]     g2.draw(line); [EOL] } <line_num>: 1257,1282
public void drawRangeLine(Graphics2D g2, XYPlot plot, ValueAxis axis, Rectangle2D dataArea, double value, Paint paint, Stroke stroke) { [EOL]     Range range = axis.getRange(); [EOL]     if (!range.contains(value)) { [EOL]         return; [EOL]     } [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     Line2D line = null; [EOL]     double v = axis.valueToJava2D(value, dataArea, plot.getRangeAxisEdge()); [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         line = new Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY()); [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         line = new Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v); [EOL]     } [EOL]     g2.setPaint(paint); [EOL]     g2.setStroke(stroke); [EOL]     g2.draw(line); [EOL] } <line_num>: 1296,1325
public void drawDomainMarker(Graphics2D g2, XYPlot plot, ValueAxis domainAxis, Marker marker, Rectangle2D dataArea) { [EOL]     if (marker instanceof ValueMarker) { [EOL]         ValueMarker vm = (ValueMarker) marker; [EOL]         double value = vm.getValue(); [EOL]         Range range = domainAxis.getRange(); [EOL]         if (!range.contains(value)) { [EOL]             return; [EOL]         } [EOL]         double v = domainAxis.valueToJava2D(value, dataArea, plot.getDomainAxisEdge()); [EOL]         PlotOrientation orientation = plot.getOrientation(); [EOL]         Line2D line = null; [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             line = new Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v); [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             line = new Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY()); [EOL]         } [EOL]         final Composite originalComposite = g2.getComposite(); [EOL]         g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, marker.getAlpha())); [EOL]         g2.setPaint(marker.getPaint()); [EOL]         g2.setStroke(marker.getStroke()); [EOL]         g2.draw(line); [EOL]         String label = marker.getLabel(); [EOL]         RectangleAnchor anchor = marker.getLabelAnchor(); [EOL]         if (label != null) { [EOL]             Font labelFont = marker.getLabelFont(); [EOL]             g2.setFont(labelFont); [EOL]             g2.setPaint(marker.getLabelPaint()); [EOL]             Point2D coordinates = calculateDomainMarkerTextAnchorPoint(g2, orientation, dataArea, line.getBounds2D(), marker.getLabelOffset(), LengthAdjustmentType.EXPAND, anchor); [EOL]             TextUtilities.drawAlignedString(label, g2, (float) coordinates.getX(), (float) coordinates.getY(), marker.getLabelTextAnchor()); [EOL]         } [EOL]         g2.setComposite(originalComposite); [EOL]     } else if (marker instanceof IntervalMarker) { [EOL]         IntervalMarker im = (IntervalMarker) marker; [EOL]         double start = im.getStartValue(); [EOL]         double end = im.getEndValue(); [EOL]         Range range = domainAxis.getRange(); [EOL]         if (!(range.intersects(start, end))) { [EOL]             return; [EOL]         } [EOL]         double start2d = domainAxis.valueToJava2D(start, dataArea, plot.getDomainAxisEdge()); [EOL]         double end2d = domainAxis.valueToJava2D(end, dataArea, plot.getDomainAxisEdge()); [EOL]         double low = Math.min(start2d, end2d); [EOL]         double high = Math.max(start2d, end2d); [EOL]         PlotOrientation orientation = plot.getOrientation(); [EOL]         Rectangle2D rect = null; [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             low = Math.max(low, dataArea.getMinY()); [EOL]             high = Math.min(high, dataArea.getMaxY()); [EOL]             rect = new Rectangle2D.Double(dataArea.getMinX(), low, dataArea.getWidth(), high - low); [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             low = Math.max(low, dataArea.getMinX()); [EOL]             high = Math.min(high, dataArea.getMaxX()); [EOL]             rect = new Rectangle2D.Double(low, dataArea.getMinY(), high - low, dataArea.getHeight()); [EOL]         } [EOL]         final Composite originalComposite = g2.getComposite(); [EOL]         g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, marker.getAlpha())); [EOL]         Paint p = marker.getPaint(); [EOL]         if (p instanceof GradientPaint) { [EOL]             GradientPaint gp = (GradientPaint) p; [EOL]             GradientPaintTransformer t = im.getGradientPaintTransformer(); [EOL]             if (t != null) { [EOL]                 gp = t.transform(gp, rect); [EOL]             } [EOL]             g2.setPaint(gp); [EOL]         } else { [EOL]             g2.setPaint(p); [EOL]         } [EOL]         g2.fill(rect); [EOL]         if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) { [EOL]             if (orientation == PlotOrientation.VERTICAL) { [EOL]                 Line2D line = new Line2D.Double(); [EOL]                 double y0 = dataArea.getMinY(); [EOL]                 double y1 = dataArea.getMaxY(); [EOL]                 g2.setPaint(im.getOutlinePaint()); [EOL]                 g2.setStroke(im.getOutlineStroke()); [EOL]                 if (range.contains(start)) { [EOL]                     line.setLine(start2d, y0, start2d, y1); [EOL]                     g2.draw(line); [EOL]                 } [EOL]                 if (range.contains(end)) { [EOL]                     line.setLine(end2d, y0, end2d, y1); [EOL]                     g2.draw(line); [EOL]                 } [EOL]             } else { [EOL]                 Line2D line = new Line2D.Double(); [EOL]                 double x0 = dataArea.getMinX(); [EOL]                 double x1 = dataArea.getMaxX(); [EOL]                 g2.setPaint(im.getOutlinePaint()); [EOL]                 g2.setStroke(im.getOutlineStroke()); [EOL]                 if (range.contains(start)) { [EOL]                     line.setLine(x0, start2d, x1, start2d); [EOL]                     g2.draw(line); [EOL]                 } [EOL]                 if (range.contains(end)) { [EOL]                     line.setLine(x0, end2d, x1, end2d); [EOL]                     g2.draw(line); [EOL]                 } [EOL]             } [EOL]         } [EOL]         String label = marker.getLabel(); [EOL]         RectangleAnchor anchor = marker.getLabelAnchor(); [EOL]         if (label != null) { [EOL]             Font labelFont = marker.getLabelFont(); [EOL]             g2.setFont(labelFont); [EOL]             g2.setPaint(marker.getLabelPaint()); [EOL]             Point2D coordinates = calculateDomainMarkerTextAnchorPoint(g2, orientation, dataArea, rect, marker.getLabelOffset(), marker.getLabelOffsetType(), anchor); [EOL]             TextUtilities.drawAlignedString(label, g2, (float) coordinates.getX(), (float) coordinates.getY(), marker.getLabelTextAnchor()); [EOL]         } [EOL]         g2.setComposite(originalComposite); [EOL]     } [EOL] } <line_num>: 1336,1491
protected Point2D calculateDomainMarkerTextAnchorPoint(Graphics2D g2, PlotOrientation orientation, Rectangle2D dataArea, Rectangle2D markerArea, RectangleInsets markerOffset, LengthAdjustmentType labelOffsetType, RectangleAnchor anchor) { [EOL]     Rectangle2D anchorRect = null; [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         anchorRect = markerOffset.createAdjustedRectangle(markerArea, LengthAdjustmentType.CONTRACT, labelOffsetType); [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         anchorRect = markerOffset.createAdjustedRectangle(markerArea, labelOffsetType, LengthAdjustmentType.CONTRACT); [EOL]     } [EOL]     return RectangleAnchor.coordinates(anchorRect, anchor); [EOL] } <line_num>: 1506,1525
public void drawRangeMarker(Graphics2D g2, XYPlot plot, ValueAxis rangeAxis, Marker marker, Rectangle2D dataArea) { [EOL]     if (marker instanceof ValueMarker) { [EOL]         ValueMarker vm = (ValueMarker) marker; [EOL]         double value = vm.getValue(); [EOL]         Range range = rangeAxis.getRange(); [EOL]         if (!range.contains(value)) { [EOL]             return; [EOL]         } [EOL]         double v = rangeAxis.valueToJava2D(value, dataArea, plot.getRangeAxisEdge()); [EOL]         PlotOrientation orientation = plot.getOrientation(); [EOL]         Line2D line = null; [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             line = new Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY()); [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             line = new Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v); [EOL]         } [EOL]         final Composite originalComposite = g2.getComposite(); [EOL]         g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, marker.getAlpha())); [EOL]         g2.setPaint(marker.getPaint()); [EOL]         g2.setStroke(marker.getStroke()); [EOL]         g2.draw(line); [EOL]         String label = marker.getLabel(); [EOL]         RectangleAnchor anchor = marker.getLabelAnchor(); [EOL]         if (label != null) { [EOL]             Font labelFont = marker.getLabelFont(); [EOL]             g2.setFont(labelFont); [EOL]             g2.setPaint(marker.getLabelPaint()); [EOL]             Point2D coordinates = calculateRangeMarkerTextAnchorPoint(g2, orientation, dataArea, line.getBounds2D(), marker.getLabelOffset(), LengthAdjustmentType.EXPAND, anchor); [EOL]             TextUtilities.drawAlignedString(label, g2, (float) coordinates.getX(), (float) coordinates.getY(), marker.getLabelTextAnchor()); [EOL]         } [EOL]         g2.setComposite(originalComposite); [EOL]     } else if (marker instanceof IntervalMarker) { [EOL]         IntervalMarker im = (IntervalMarker) marker; [EOL]         double start = im.getStartValue(); [EOL]         double end = im.getEndValue(); [EOL]         Range range = rangeAxis.getRange(); [EOL]         if (!(range.intersects(start, end))) { [EOL]             return; [EOL]         } [EOL]         double start2d = rangeAxis.valueToJava2D(start, dataArea, plot.getRangeAxisEdge()); [EOL]         double end2d = rangeAxis.valueToJava2D(end, dataArea, plot.getRangeAxisEdge()); [EOL]         double low = Math.min(start2d, end2d); [EOL]         double high = Math.max(start2d, end2d); [EOL]         PlotOrientation orientation = plot.getOrientation(); [EOL]         Rectangle2D rect = null; [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             low = Math.max(low, dataArea.getMinX()); [EOL]             high = Math.min(high, dataArea.getMaxX()); [EOL]             rect = new Rectangle2D.Double(low, dataArea.getMinY(), high - low, dataArea.getHeight()); [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             low = Math.max(low, dataArea.getMinY()); [EOL]             high = Math.min(high, dataArea.getMaxY()); [EOL]             rect = new Rectangle2D.Double(dataArea.getMinX(), low, dataArea.getWidth(), high - low); [EOL]         } [EOL]         final Composite originalComposite = g2.getComposite(); [EOL]         g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, marker.getAlpha())); [EOL]         Paint p = marker.getPaint(); [EOL]         if (p instanceof GradientPaint) { [EOL]             GradientPaint gp = (GradientPaint) p; [EOL]             GradientPaintTransformer t = im.getGradientPaintTransformer(); [EOL]             if (t != null) { [EOL]                 gp = t.transform(gp, rect); [EOL]             } [EOL]             g2.setPaint(gp); [EOL]         } else { [EOL]             g2.setPaint(p); [EOL]         } [EOL]         g2.fill(rect); [EOL]         if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) { [EOL]             if (orientation == PlotOrientation.VERTICAL) { [EOL]                 Line2D line = new Line2D.Double(); [EOL]                 double x0 = dataArea.getMinX(); [EOL]                 double x1 = dataArea.getMaxX(); [EOL]                 g2.setPaint(im.getOutlinePaint()); [EOL]                 g2.setStroke(im.getOutlineStroke()); [EOL]                 if (range.contains(start)) { [EOL]                     line.setLine(x0, start2d, x1, start2d); [EOL]                     g2.draw(line); [EOL]                 } [EOL]                 if (range.contains(end)) { [EOL]                     line.setLine(x0, end2d, x1, end2d); [EOL]                     g2.draw(line); [EOL]                 } [EOL]             } else { [EOL]                 Line2D line = new Line2D.Double(); [EOL]                 double y0 = dataArea.getMinY(); [EOL]                 double y1 = dataArea.getMaxY(); [EOL]                 g2.setPaint(im.getOutlinePaint()); [EOL]                 g2.setStroke(im.getOutlineStroke()); [EOL]                 if (range.contains(start)) { [EOL]                     line.setLine(start2d, y0, start2d, y1); [EOL]                     g2.draw(line); [EOL]                 } [EOL]                 if (range.contains(end)) { [EOL]                     line.setLine(end2d, y0, end2d, y1); [EOL]                     g2.draw(line); [EOL]                 } [EOL]             } [EOL]         } [EOL]         String label = marker.getLabel(); [EOL]         RectangleAnchor anchor = marker.getLabelAnchor(); [EOL]         if (label != null) { [EOL]             Font labelFont = marker.getLabelFont(); [EOL]             g2.setFont(labelFont); [EOL]             g2.setPaint(marker.getLabelPaint()); [EOL]             Point2D coordinates = calculateRangeMarkerTextAnchorPoint(g2, orientation, dataArea, rect, marker.getLabelOffset(), marker.getLabelOffsetType(), anchor); [EOL]             TextUtilities.drawAlignedString(label, g2, (float) coordinates.getX(), (float) coordinates.getY(), marker.getLabelTextAnchor()); [EOL]         } [EOL]         g2.setComposite(originalComposite); [EOL]     } [EOL] } <line_num>: 1536,1688
private Point2D calculateRangeMarkerTextAnchorPoint(Graphics2D g2, PlotOrientation orientation, Rectangle2D dataArea, Rectangle2D markerArea, RectangleInsets markerOffset, LengthAdjustmentType labelOffsetForRange, RectangleAnchor anchor) { [EOL]     Rectangle2D anchorRect = null; [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         anchorRect = markerOffset.createAdjustedRectangle(markerArea, labelOffsetForRange, LengthAdjustmentType.CONTRACT); [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         anchorRect = markerOffset.createAdjustedRectangle(markerArea, LengthAdjustmentType.CONTRACT, labelOffsetForRange); [EOL]     } [EOL]     return RectangleAnchor.coordinates(anchorRect, anchor); [EOL] } <line_num>: 1703,1722
protected Object clone() throws CloneNotSupportedException { [EOL]     AbstractXYItemRenderer clone = (AbstractXYItemRenderer) super.clone(); [EOL]     clone.itemLabelGeneratorList = (ObjectList) this.itemLabelGeneratorList.clone(); [EOL]     if (this.baseItemLabelGenerator != null && this.baseItemLabelGenerator instanceof PublicCloneable) { [EOL]         PublicCloneable pc = (PublicCloneable) this.baseItemLabelGenerator; [EOL]         clone.baseItemLabelGenerator = (XYItemLabelGenerator) pc.clone(); [EOL]     } [EOL]     clone.toolTipGeneratorList = (ObjectList) this.toolTipGeneratorList.clone(); [EOL]     if (this.baseToolTipGenerator != null && this.baseToolTipGenerator instanceof PublicCloneable) { [EOL]         PublicCloneable pc = (PublicCloneable) this.baseToolTipGenerator; [EOL]         clone.baseToolTipGenerator = (XYToolTipGenerator) pc.clone(); [EOL]     } [EOL]     if (clone.legendItemLabelGenerator instanceof PublicCloneable) { [EOL]         clone.legendItemLabelGenerator = (XYSeriesLabelGenerator) ObjectUtilities.clone(this.legendItemLabelGenerator); [EOL]     } [EOL]     if (clone.legendItemToolTipGenerator instanceof PublicCloneable) { [EOL]         clone.legendItemToolTipGenerator = (XYSeriesLabelGenerator) ObjectUtilities.clone(this.legendItemToolTipGenerator); [EOL]     } [EOL]     if (clone.legendItemURLGenerator instanceof PublicCloneable) { [EOL]         clone.legendItemURLGenerator = (XYSeriesLabelGenerator) ObjectUtilities.clone(this.legendItemURLGenerator); [EOL]     } [EOL]     clone.foregroundAnnotations = (List) ObjectUtilities.deepClone(this.foregroundAnnotations); [EOL]     clone.backgroundAnnotations = (List) ObjectUtilities.deepClone(this.backgroundAnnotations); [EOL]     if (clone.legendItemLabelGenerator instanceof PublicCloneable) { [EOL]         clone.legendItemLabelGenerator = (XYSeriesLabelGenerator) ObjectUtilities.clone(this.legendItemLabelGenerator); [EOL]     } [EOL]     if (clone.legendItemToolTipGenerator instanceof PublicCloneable) { [EOL]         clone.legendItemToolTipGenerator = (XYSeriesLabelGenerator) ObjectUtilities.clone(this.legendItemToolTipGenerator); [EOL]     } [EOL]     if (clone.legendItemURLGenerator instanceof PublicCloneable) { [EOL]         clone.legendItemURLGenerator = (XYSeriesLabelGenerator) ObjectUtilities.clone(this.legendItemURLGenerator); [EOL]     } [EOL]     return clone; [EOL] } <line_num>: 1732,1784
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof AbstractXYItemRenderer)) { [EOL]         return false; [EOL]     } [EOL]     AbstractXYItemRenderer that = (AbstractXYItemRenderer) obj; [EOL]     if (!this.itemLabelGeneratorList.equals(that.itemLabelGeneratorList)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.baseItemLabelGenerator, that.baseItemLabelGenerator)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.toolTipGeneratorList.equals(that.toolTipGeneratorList)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.baseToolTipGenerator, that.baseToolTipGenerator)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.urlGeneratorList.equals(that.urlGeneratorList)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.baseURLGenerator, that.baseURLGenerator)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.foregroundAnnotations.equals(that.foregroundAnnotations)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.backgroundAnnotations.equals(that.backgroundAnnotations)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.legendItemLabelGenerator, that.legendItemLabelGenerator)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.legendItemToolTipGenerator, that.legendItemToolTipGenerator)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.legendItemURLGenerator, that.legendItemURLGenerator)) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 1793,1841
public DrawingSupplier getDrawingSupplier() { [EOL]     DrawingSupplier result = null; [EOL]     XYPlot p = getPlot(); [EOL]     if (p != null) { [EOL]         result = p.getDrawingSupplier(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1848,1855
protected void updateCrosshairValues(CrosshairState crosshairState, double x, double y, int domainAxisIndex, int rangeAxisIndex, double transX, double transY, PlotOrientation orientation) { [EOL]     if (orientation == null) { [EOL]         throw new IllegalArgumentException("Null 'orientation' argument."); [EOL]     } [EOL]     if (crosshairState != null) { [EOL]         if (this.plot.isDomainCrosshairLockedOnData()) { [EOL]             if (this.plot.isRangeCrosshairLockedOnData()) { [EOL]                 crosshairState.updateCrosshairPoint(x, y, domainAxisIndex, rangeAxisIndex, transX, transY, orientation); [EOL]             } else { [EOL]                 crosshairState.updateCrosshairX(x, domainAxisIndex); [EOL]             } [EOL]         } else { [EOL]             if (this.plot.isRangeCrosshairLockedOnData()) { [EOL]                 crosshairState.updateCrosshairY(y, rangeAxisIndex); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 1875,1904
protected void drawItemLabel(Graphics2D g2, PlotOrientation orientation, XYDataset dataset, int series, int item, boolean selected, double x, double y, boolean negative) { [EOL]     XYItemLabelGenerator generator = getItemLabelGenerator(series, item, selected); [EOL]     if (generator != null) { [EOL]         Font labelFont = getItemLabelFont(series, item, selected); [EOL]         Paint paint = getItemLabelPaint(series, item, selected); [EOL]         g2.setFont(labelFont); [EOL]         g2.setPaint(paint); [EOL]         String label = generator.generateLabel(dataset, series, item); [EOL]         ItemLabelPosition position = null; [EOL]         if (!negative) { [EOL]             position = getPositiveItemLabelPosition(series, item, selected); [EOL]         } else { [EOL]             position = getNegativeItemLabelPosition(series, item, selected); [EOL]         } [EOL]         Point2D anchorPoint = calculateLabelAnchorPoint(position.getItemLabelAnchor(), x, y, orientation); [EOL]         TextUtilities.drawRotatedString(label, g2, (float) anchorPoint.getX(), (float) anchorPoint.getY(), position.getTextAnchor(), position.getAngle(), position.getRotationAnchor()); [EOL]     } [EOL] } <line_num>: 1922,1955
public void drawAnnotations(Graphics2D g2, Rectangle2D dataArea, ValueAxis domainAxis, ValueAxis rangeAxis, Layer layer, PlotRenderingInfo info) { [EOL]     Iterator iterator = null; [EOL]     if (layer.equals(Layer.FOREGROUND)) { [EOL]         iterator = this.foregroundAnnotations.iterator(); [EOL]     } else if (layer.equals(Layer.BACKGROUND)) { [EOL]         iterator = this.backgroundAnnotations.iterator(); [EOL]     } else { [EOL]         throw new RuntimeException("Unknown layer."); [EOL]     } [EOL]     while (iterator.hasNext()) { [EOL]         XYAnnotation annotation = (XYAnnotation) iterator.next(); [EOL]         int index = this.plot.getIndexOf(this); [EOL]         annotation.draw(g2, this.plot, dataArea, domainAxis, rangeAxis, index, info); [EOL]     } [EOL] } <line_num>: 1967,1992
protected void addEntity(EntityCollection entities, Shape area, XYDataset dataset, int series, int item, boolean selected, double entityX, double entityY) { [EOL]     if (!getItemCreateEntity(series, item, selected)) { [EOL]         return; [EOL]     } [EOL]     Shape hotspot = area; [EOL]     if (hotspot == null) { [EOL]         double r = getDefaultEntityRadius(); [EOL]         double w = r * 2; [EOL]         if (getPlot().getOrientation() == PlotOrientation.VERTICAL) { [EOL]             hotspot = new Ellipse2D.Double(entityX - r, entityY - r, w, w); [EOL]         } else { [EOL]             hotspot = new Ellipse2D.Double(entityY - r, entityX - r, w, w); [EOL]         } [EOL]     } [EOL]     String tip = null; [EOL]     XYToolTipGenerator generator = getToolTipGenerator(series, item, selected); [EOL]     if (generator != null) { [EOL]         tip = generator.generateToolTip(dataset, series, item); [EOL]     } [EOL]     String url = null; [EOL]     XYURLGenerator urlster = getURLGenerator(series, item, selected); [EOL]     if (urlster != null) { [EOL]         url = urlster.generateURL(dataset, series, item); [EOL]     } [EOL]     XYItemEntity entity = new XYItemEntity(hotspot, dataset, series, item, tip, url); [EOL]     entities.add(entity); [EOL] } <line_num>: 2011,2043
