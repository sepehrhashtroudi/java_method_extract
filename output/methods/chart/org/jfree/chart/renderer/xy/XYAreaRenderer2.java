public XYAreaRenderer2() { [EOL]     this(null, null); [EOL] } <line_num>: 138,140
public XYAreaRenderer2(XYToolTipGenerator labelGenerator, XYURLGenerator urlGenerator) { [EOL]     super(); [EOL]     this.showOutline = false; [EOL]     setBaseToolTipGenerator(labelGenerator); [EOL]     setBaseURLGenerator(urlGenerator); [EOL]     GeneralPath area = new GeneralPath(); [EOL]     area.moveTo(0.0f, -4.0f); [EOL]     area.lineTo(3.0f, -2.0f); [EOL]     area.lineTo(4.0f, 4.0f); [EOL]     area.lineTo(-4.0f, 4.0f); [EOL]     area.lineTo(-3.0f, -2.0f); [EOL]     area.closePath(); [EOL]     this.legendArea = area; [EOL] } <line_num>: 149,163
public boolean isOutline() { [EOL]     return this.showOutline; [EOL] } <line_num>: 173,175
public void setOutline(boolean show) { [EOL]     this.showOutline = show; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 186,189
public Shape getLegendArea() { [EOL]     return this.legendArea; [EOL] } <line_num>: 198,200
public void setLegendArea(Shape area) { [EOL]     if (area == null) { [EOL]         throw new IllegalArgumentException("Null 'area' argument."); [EOL]     } [EOL]     this.legendArea = area; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 210,216
public LegendItem getLegendItem(int datasetIndex, int series) { [EOL]     LegendItem result = null; [EOL]     XYPlot xyplot = getPlot(); [EOL]     if (xyplot != null) { [EOL]         XYDataset dataset = xyplot.getDataset(datasetIndex); [EOL]         if (dataset != null) { [EOL]             XYSeriesLabelGenerator lg = getLegendItemLabelGenerator(); [EOL]             String label = lg.generateLabel(dataset, series); [EOL]             String description = label; [EOL]             String toolTipText = null; [EOL]             if (getLegendItemToolTipGenerator() != null) { [EOL]                 toolTipText = getLegendItemToolTipGenerator().generateLabel(dataset, series); [EOL]             } [EOL]             String urlText = null; [EOL]             if (getLegendItemURLGenerator() != null) { [EOL]                 urlText = getLegendItemURLGenerator().generateLabel(dataset, series); [EOL]             } [EOL]             Paint paint = lookupSeriesPaint(series); [EOL]             result = new LegendItem(label, description, toolTipText, urlText, this.legendArea, paint); [EOL]             result.setLabelFont(lookupLegendTextFont(series)); [EOL]             Paint labelPaint = lookupLegendTextPaint(series); [EOL]             if (labelPaint != null) { [EOL]                 result.setLabelPaint(labelPaint); [EOL]             } [EOL]             result.setDataset(dataset); [EOL]             result.setDatasetIndex(datasetIndex); [EOL]             result.setSeriesKey(dataset.getSeriesKey(series)); [EOL]             result.setSeriesIndex(series); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 227,261
public void drawItem(Graphics2D g2, XYItemRendererState state, Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset, int series, int item, boolean selected, int pass) { [EOL]     if (!getItemVisible(series, item)) { [EOL]         return; [EOL]     } [EOL]     double x1 = dataset.getXValue(series, item); [EOL]     double y1 = dataset.getYValue(series, item); [EOL]     if (Double.isNaN(y1)) { [EOL]         y1 = 0.0; [EOL]     } [EOL]     double transX1 = domainAxis.valueToJava2D(x1, dataArea, plot.getDomainAxisEdge()); [EOL]     double transY1 = rangeAxis.valueToJava2D(y1, dataArea, plot.getRangeAxisEdge()); [EOL]     double x0 = dataset.getXValue(series, Math.max(item - 1, 0)); [EOL]     double y0 = dataset.getYValue(series, Math.max(item - 1, 0)); [EOL]     if (Double.isNaN(y0)) { [EOL]         y0 = 0.0; [EOL]     } [EOL]     double transX0 = domainAxis.valueToJava2D(x0, dataArea, plot.getDomainAxisEdge()); [EOL]     double transY0 = rangeAxis.valueToJava2D(y0, dataArea, plot.getRangeAxisEdge()); [EOL]     int itemCount = dataset.getItemCount(series); [EOL]     double x2 = dataset.getXValue(series, Math.min(item + 1, itemCount - 1)); [EOL]     double y2 = dataset.getYValue(series, Math.min(item + 1, itemCount - 1)); [EOL]     if (Double.isNaN(y2)) { [EOL]         y2 = 0.0; [EOL]     } [EOL]     double transX2 = domainAxis.valueToJava2D(x2, dataArea, plot.getDomainAxisEdge()); [EOL]     double transY2 = rangeAxis.valueToJava2D(y2, dataArea, plot.getRangeAxisEdge()); [EOL]     double transZero = rangeAxis.valueToJava2D(0.0, dataArea, plot.getRangeAxisEdge()); [EOL]     Polygon hotspot = null; [EOL]     if (plot.getOrientation() == PlotOrientation.HORIZONTAL) { [EOL]         hotspot = new Polygon(); [EOL]         hotspot.addPoint((int) transZero, (int) ((transX0 + transX1) / 2.0)); [EOL]         hotspot.addPoint((int) ((transY0 + transY1) / 2.0), (int) ((transX0 + transX1) / 2.0)); [EOL]         hotspot.addPoint((int) transY1, (int) transX1); [EOL]         hotspot.addPoint((int) ((transY1 + transY2) / 2.0), (int) ((transX1 + transX2) / 2.0)); [EOL]         hotspot.addPoint((int) transZero, (int) ((transX1 + transX2) / 2.0)); [EOL]     } else { [EOL]         hotspot = new Polygon(); [EOL]         hotspot.addPoint((int) ((transX0 + transX1) / 2.0), (int) transZero); [EOL]         hotspot.addPoint((int) ((transX0 + transX1) / 2.0), (int) ((transY0 + transY1) / 2.0)); [EOL]         hotspot.addPoint((int) transX1, (int) transY1); [EOL]         hotspot.addPoint((int) ((transX1 + transX2) / 2.0), (int) ((transY1 + transY2) / 2.0)); [EOL]         hotspot.addPoint((int) ((transX1 + transX2) / 2.0), (int) transZero); [EOL]     } [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     Paint paint = getItemPaint(series, item, selected); [EOL]     Stroke stroke = getItemStroke(series, item, selected); [EOL]     g2.setPaint(paint); [EOL]     g2.setStroke(stroke); [EOL]     g2.fill(hotspot); [EOL]     if (isOutline()) { [EOL]         g2.setStroke(lookupSeriesOutlineStroke(series)); [EOL]         g2.setPaint(lookupSeriesOutlinePaint(series)); [EOL]         g2.draw(hotspot); [EOL]     } [EOL]     int domainAxisIndex = plot.getDomainAxisIndex(domainAxis); [EOL]     int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis); [EOL]     XYCrosshairState crosshairState = state.getCrosshairState(); [EOL]     updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex, rangeAxisIndex, transX1, transY1, orientation); [EOL]     EntityCollection entities = state.getEntityCollection(); [EOL]     if (entities != null) { [EOL]         addEntity(entities, hotspot, dataset, series, item, selected, 0.0, 0.0); [EOL]     } [EOL] } <line_num>: 278,379
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof XYAreaRenderer2)) { [EOL]         return false; [EOL]     } [EOL]     XYAreaRenderer2 that = (XYAreaRenderer2) obj; [EOL]     if (this.showOutline != that.showOutline) { [EOL]         return false; [EOL]     } [EOL]     if (!ShapeUtilities.equal(this.legendArea, that.legendArea)) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 388,403
public Object clone() throws CloneNotSupportedException { [EOL]     XYAreaRenderer2 clone = (XYAreaRenderer2) super.clone(); [EOL]     clone.legendArea = ShapeUtilities.clone(this.legendArea); [EOL]     return clone; [EOL] } <line_num>: 412,416
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.legendArea = SerialUtilities.readShape(stream); [EOL] } <line_num>: 426,430
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writeShape(this.legendArea, stream); [EOL] } <line_num>: 439,442
