public XYAreaRendererState(PlotRenderingInfo info) { [EOL]     super(info); [EOL]     this.area = new Polygon(); [EOL]     this.line = new Line2D.Double(); [EOL] } <line_num>: 153,157
public XYAreaRenderer() { [EOL]     this(AREA); [EOL] } <line_num>: 217,219
public XYAreaRenderer(int type) { [EOL]     this(type, null, null); [EOL] } <line_num>: 226,228
public XYAreaRenderer(int type, XYToolTipGenerator toolTipGenerator, XYURLGenerator urlGenerator) { [EOL]     super(); [EOL]     setBaseToolTipGenerator(toolTipGenerator); [EOL]     setBaseURLGenerator(urlGenerator); [EOL]     if (type == SHAPES) { [EOL]         this.plotShapes = true; [EOL]     } [EOL]     if (type == LINES) { [EOL]         this.plotLines = true; [EOL]     } [EOL]     if (type == SHAPES_AND_LINES) { [EOL]         this.plotShapes = true; [EOL]         this.plotLines = true; [EOL]     } [EOL]     if (type == AREA) { [EOL]         this.plotArea = true; [EOL]     } [EOL]     if (type == AREA_AND_SHAPES) { [EOL]         this.plotArea = true; [EOL]         this.plotShapes = true; [EOL]     } [EOL]     this.showOutline = false; [EOL]     GeneralPath area = new GeneralPath(); [EOL]     area.moveTo(0.0f, -4.0f); [EOL]     area.lineTo(3.0f, -2.0f); [EOL]     area.lineTo(4.0f, 4.0f); [EOL]     area.lineTo(-4.0f, 4.0f); [EOL]     area.lineTo(-3.0f, -2.0f); [EOL]     area.closePath(); [EOL]     this.legendArea = area; [EOL]     this.useFillPaint = false; [EOL]     this.gradientTransformer = new StandardGradientPaintTransformer(); [EOL] } <line_num>: 241,276
public boolean getPlotShapes() { [EOL]     return this.plotShapes; [EOL] } <line_num>: 283,285
public boolean getPlotLines() { [EOL]     return this.plotLines; [EOL] } <line_num>: 292,294
public boolean getPlotArea() { [EOL]     return this.plotArea; [EOL] } <line_num>: 301,303
public boolean isOutline() { [EOL]     return this.showOutline; [EOL] } <line_num>: 313,315
public void setOutline(boolean show) { [EOL]     this.showOutline = show; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 325,328
public Shape getLegendArea() { [EOL]     return this.legendArea; [EOL] } <line_num>: 335,337
public void setLegendArea(Shape area) { [EOL]     if (area == null) { [EOL]         throw new IllegalArgumentException("Null 'area' argument."); [EOL]     } [EOL]     this.legendArea = area; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 345,351
public boolean getUseFillPaint() { [EOL]     return this.useFillPaint; [EOL] } <line_num>: 361,363
public void setUseFillPaint(boolean use) { [EOL]     this.useFillPaint = use; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 374,377
public GradientPaintTransformer getGradientTransformer() { [EOL]     return this.gradientTransformer; [EOL] } <line_num>: 386,388
public void setGradientTransformer(GradientPaintTransformer transformer) { [EOL]     if (transformer == null) { [EOL]         throw new IllegalArgumentException("Null 'transformer' argument."); [EOL]     } [EOL]     this.gradientTransformer = transformer; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 398,404
public XYItemRendererState initialise(Graphics2D g2, Rectangle2D dataArea, XYPlot plot, XYDataset data, PlotRenderingInfo info) { [EOL]     XYAreaRendererState state = new XYAreaRendererState(info); [EOL]     state.setProcessVisibleItemsOnly(false); [EOL]     return state; [EOL] } <line_num>: 419,427
public LegendItem getLegendItem(int datasetIndex, int series) { [EOL]     LegendItem result = null; [EOL]     XYPlot xyplot = getPlot(); [EOL]     if (xyplot != null) { [EOL]         XYDataset dataset = xyplot.getDataset(datasetIndex); [EOL]         if (dataset != null) { [EOL]             XYSeriesLabelGenerator lg = getLegendItemLabelGenerator(); [EOL]             String label = lg.generateLabel(dataset, series); [EOL]             String description = label; [EOL]             String toolTipText = null; [EOL]             if (getLegendItemToolTipGenerator() != null) { [EOL]                 toolTipText = getLegendItemToolTipGenerator().generateLabel(dataset, series); [EOL]             } [EOL]             String urlText = null; [EOL]             if (getLegendItemURLGenerator() != null) { [EOL]                 urlText = getLegendItemURLGenerator().generateLabel(dataset, series); [EOL]             } [EOL]             Paint paint = lookupSeriesPaint(series); [EOL]             result = new LegendItem(label, description, toolTipText, urlText, this.legendArea, paint); [EOL]             result.setLabelFont(lookupLegendTextFont(series)); [EOL]             Paint labelPaint = lookupLegendTextPaint(series); [EOL]             if (labelPaint != null) { [EOL]                 result.setLabelPaint(labelPaint); [EOL]             } [EOL]             result.setDataset(dataset); [EOL]             result.setDatasetIndex(datasetIndex); [EOL]             result.setSeriesKey(dataset.getSeriesKey(series)); [EOL]             result.setSeriesIndex(series); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 438,472
public void drawItem(Graphics2D g2, XYItemRendererState state, Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset, int series, int item, boolean selected, int pass) { [EOL]     if (!getItemVisible(series, item)) { [EOL]         return; [EOL]     } [EOL]     XYAreaRendererState areaState = (XYAreaRendererState) state; [EOL]     double x1 = dataset.getXValue(series, item); [EOL]     double y1 = dataset.getYValue(series, item); [EOL]     if (Double.isNaN(y1)) { [EOL]         y1 = 0.0; [EOL]     } [EOL]     double transX1 = domainAxis.valueToJava2D(x1, dataArea, plot.getDomainAxisEdge()); [EOL]     double transY1 = rangeAxis.valueToJava2D(y1, dataArea, plot.getRangeAxisEdge()); [EOL]     int itemCount = dataset.getItemCount(series); [EOL]     double x0 = dataset.getXValue(series, Math.max(item - 1, 0)); [EOL]     double y0 = dataset.getYValue(series, Math.max(item - 1, 0)); [EOL]     if (Double.isNaN(y0)) { [EOL]         y0 = 0.0; [EOL]     } [EOL]     double transX0 = domainAxis.valueToJava2D(x0, dataArea, plot.getDomainAxisEdge()); [EOL]     double transY0 = rangeAxis.valueToJava2D(y0, dataArea, plot.getRangeAxisEdge()); [EOL]     double x2 = dataset.getXValue(series, Math.min(item + 1, itemCount - 1)); [EOL]     double y2 = dataset.getYValue(series, Math.min(item + 1, itemCount - 1)); [EOL]     if (Double.isNaN(y2)) { [EOL]         y2 = 0.0; [EOL]     } [EOL]     double transX2 = domainAxis.valueToJava2D(x2, dataArea, plot.getDomainAxisEdge()); [EOL]     double transY2 = rangeAxis.valueToJava2D(y2, dataArea, plot.getRangeAxisEdge()); [EOL]     double transZero = rangeAxis.valueToJava2D(0.0, dataArea, plot.getRangeAxisEdge()); [EOL]     Polygon hotspot = null; [EOL]     if (plot.getOrientation() == PlotOrientation.HORIZONTAL) { [EOL]         hotspot = new Polygon(); [EOL]         hotspot.addPoint((int) transZero, (int) ((transX0 + transX1) / 2.0)); [EOL]         hotspot.addPoint((int) ((transY0 + transY1) / 2.0), (int) ((transX0 + transX1) / 2.0)); [EOL]         hotspot.addPoint((int) transY1, (int) transX1); [EOL]         hotspot.addPoint((int) ((transY1 + transY2) / 2.0), (int) ((transX1 + transX2) / 2.0)); [EOL]         hotspot.addPoint((int) transZero, (int) ((transX1 + transX2) / 2.0)); [EOL]     } else { [EOL]         hotspot = new Polygon(); [EOL]         hotspot.addPoint((int) ((transX0 + transX1) / 2.0), (int) transZero); [EOL]         hotspot.addPoint((int) ((transX0 + transX1) / 2.0), (int) ((transY0 + transY1) / 2.0)); [EOL]         hotspot.addPoint((int) transX1, (int) transY1); [EOL]         hotspot.addPoint((int) ((transX1 + transX2) / 2.0), (int) ((transY1 + transY2) / 2.0)); [EOL]         hotspot.addPoint((int) ((transX1 + transX2) / 2.0), (int) transZero); [EOL]     } [EOL]     if (item == 0) { [EOL]         areaState.area = new Polygon(); [EOL]         double zero = rangeAxis.valueToJava2D(0.0, dataArea, plot.getRangeAxisEdge()); [EOL]         if (plot.getOrientation() == PlotOrientation.VERTICAL) { [EOL]             areaState.area.addPoint((int) transX1, (int) zero); [EOL]         } else if (plot.getOrientation() == PlotOrientation.HORIZONTAL) { [EOL]             areaState.area.addPoint((int) zero, (int) transX1); [EOL]         } [EOL]     } [EOL]     if (plot.getOrientation() == PlotOrientation.VERTICAL) { [EOL]         areaState.area.addPoint((int) transX1, (int) transY1); [EOL]     } else if (plot.getOrientation() == PlotOrientation.HORIZONTAL) { [EOL]         areaState.area.addPoint((int) transY1, (int) transX1); [EOL]     } [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     Paint paint = getItemPaint(series, item, selected); [EOL]     Stroke stroke = getItemStroke(series, item, selected); [EOL]     g2.setPaint(paint); [EOL]     g2.setStroke(stroke); [EOL]     Shape shape = null; [EOL]     if (getPlotShapes()) { [EOL]         shape = getItemShape(series, item, selected); [EOL]         if (orientation == PlotOrientation.VERTICAL) { [EOL]             shape = ShapeUtilities.createTranslatedShape(shape, transX1, transY1); [EOL]         } else if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             shape = ShapeUtilities.createTranslatedShape(shape, transY1, transX1); [EOL]         } [EOL]         g2.draw(shape); [EOL]     } [EOL]     if (getPlotLines()) { [EOL]         if (item > 0) { [EOL]             if (plot.getOrientation() == PlotOrientation.VERTICAL) { [EOL]                 areaState.line.setLine(transX0, transY0, transX1, transY1); [EOL]             } else if (plot.getOrientation() == PlotOrientation.HORIZONTAL) { [EOL]                 areaState.line.setLine(transY0, transX0, transY1, transX1); [EOL]             } [EOL]             g2.draw(areaState.line); [EOL]         } [EOL]     } [EOL]     if (getPlotArea() && item > 0 && item == (itemCount - 1)) { [EOL]         if (orientation == PlotOrientation.VERTICAL) { [EOL]             areaState.area.addPoint((int) transX1, (int) transZero); [EOL]         } else if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             areaState.area.addPoint((int) transZero, (int) transX1); [EOL]         } [EOL]         if (this.useFillPaint) { [EOL]             paint = lookupSeriesFillPaint(series); [EOL]         } [EOL]         if (paint instanceof GradientPaint) { [EOL]             GradientPaint gp = (GradientPaint) paint; [EOL]             GradientPaint adjGP = this.gradientTransformer.transform(gp, dataArea); [EOL]             g2.setPaint(adjGP); [EOL]         } [EOL]         g2.fill(areaState.area); [EOL]         if (isOutline()) { [EOL]             Shape area = areaState.area; [EOL]             Stroke outlineStroke = lookupSeriesOutlineStroke(series); [EOL]             if (outlineStroke instanceof BasicStroke) { [EOL]                 BasicStroke bs = (BasicStroke) outlineStroke; [EOL]                 if (bs.getDashArray() != null) { [EOL]                     Area poly = new Area(areaState.area); [EOL]                     Area clip = new Area(new Rectangle2D.Double(dataArea.getX() - 5.0, dataArea.getY() - 5.0, dataArea.getWidth() + 10.0, dataArea.getHeight() + 10.0)); [EOL]                     poly.intersect(clip); [EOL]                     area = poly; [EOL]                 } [EOL]             } [EOL]             g2.setStroke(outlineStroke); [EOL]             g2.setPaint(lookupSeriesOutlinePaint(series)); [EOL]             g2.draw(area); [EOL]         } [EOL]     } [EOL]     int domainAxisIndex = plot.getDomainAxisIndex(domainAxis); [EOL]     int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis); [EOL]     XYCrosshairState crosshairState = state.getCrosshairState(); [EOL]     updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex, rangeAxisIndex, transX1, transY1, orientation); [EOL]     EntityCollection entities = state.getEntityCollection(); [EOL]     if (entities != null && hotspot != null) { [EOL]         addEntity(entities, hotspot, dataset, series, item, selected, 0.0, 0.0); [EOL]     } [EOL] } <line_num>: 489,685
public Object clone() throws CloneNotSupportedException { [EOL]     XYAreaRenderer clone = (XYAreaRenderer) super.clone(); [EOL]     clone.legendArea = ShapeUtilities.clone(this.legendArea); [EOL]     return clone; [EOL] } <line_num>: 694,698
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof XYAreaRenderer)) { [EOL]         return false; [EOL]     } [EOL]     XYAreaRenderer that = (XYAreaRenderer) obj; [EOL]     if (this.plotArea != that.plotArea) { [EOL]         return false; [EOL]     } [EOL]     if (this.plotLines != that.plotLines) { [EOL]         return false; [EOL]     } [EOL]     if (this.plotShapes != that.plotShapes) { [EOL]         return false; [EOL]     } [EOL]     if (this.showOutline != that.showOutline) { [EOL]         return false; [EOL]     } [EOL]     if (this.useFillPaint != that.useFillPaint) { [EOL]         return false; [EOL]     } [EOL]     if (!this.gradientTransformer.equals(that.gradientTransformer)) { [EOL]         return false; [EOL]     } [EOL]     if (!ShapeUtilities.equal(this.legendArea, that.legendArea)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 707,737
public int hashCode() { [EOL]     int result = super.hashCode(); [EOL]     result = HashUtilities.hashCode(result, this.plotArea); [EOL]     result = HashUtilities.hashCode(result, this.plotLines); [EOL]     result = HashUtilities.hashCode(result, this.plotShapes); [EOL]     result = HashUtilities.hashCode(result, this.useFillPaint); [EOL]     return result; [EOL] } <line_num>: 744,751
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.legendArea = SerialUtilities.readShape(stream); [EOL] } <line_num>: 761,765
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writeShape(this.legendArea, stream); [EOL] } <line_num>: 774,777
