public StackedXYBarRenderer() { [EOL]     this(0.0); [EOL] } <line_num>: 105,107
public StackedXYBarRenderer(double margin) { [EOL]     super(margin); [EOL]     this.renderAsPercentages = false; [EOL]     ItemLabelPosition p = new ItemLabelPosition(ItemLabelAnchor.CENTER, TextAnchor.CENTER); [EOL]     setBasePositiveItemLabelPosition(p); [EOL]     setBaseNegativeItemLabelPosition(p); [EOL]     setPositiveItemLabelPositionFallback(null); [EOL]     setNegativeItemLabelPositionFallback(null); [EOL] } <line_num>: 114,126
public boolean getRenderAsPercentages() { [EOL]     return this.renderAsPercentages; [EOL] } <line_num>: 139,141
public void setRenderAsPercentages(boolean asPercentages) { [EOL]     this.renderAsPercentages = asPercentages; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 154,157
public int getPassCount() { [EOL]     return 3; [EOL] } <line_num>: 167,169
public XYItemRendererState initialise(Graphics2D g2, Rectangle2D dataArea, XYPlot plot, XYDataset data, PlotRenderingInfo info) { [EOL]     return new XYBarRendererState(info); [EOL] } <line_num>: 185,191
public Range findRangeBounds(XYDataset dataset) { [EOL]     if (dataset != null) { [EOL]         if (this.renderAsPercentages) { [EOL]             return new Range(0.0, 1.0); [EOL]         } else { [EOL]             return DatasetUtilities.findStackedRangeBounds((TableXYDataset) dataset); [EOL]         } [EOL]     } else { [EOL]         return null; [EOL]     } [EOL] } <line_num>: 202,215
public void drawItem(Graphics2D g2, XYItemRendererState state, Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset, int series, int item, boolean selected, int pass) { [EOL]     if (!(dataset instanceof IntervalXYDataset && dataset instanceof TableXYDataset)) { [EOL]         String message = "dataset (type " + dataset.getClass().getName() + ") has wrong type:"; [EOL]         boolean and = false; [EOL]         if (!IntervalXYDataset.class.isAssignableFrom(dataset.getClass())) { [EOL]             message += " it is no IntervalXYDataset"; [EOL]             and = true; [EOL]         } [EOL]         if (!TableXYDataset.class.isAssignableFrom(dataset.getClass())) { [EOL]             if (and) { [EOL]                 message += " and"; [EOL]             } [EOL]             message += " it is no TableXYDataset"; [EOL]         } [EOL]         throw new IllegalArgumentException(message); [EOL]     } [EOL]     IntervalXYDataset intervalDataset = (IntervalXYDataset) dataset; [EOL]     double value = intervalDataset.getYValue(series, item); [EOL]     if (Double.isNaN(value)) { [EOL]         return; [EOL]     } [EOL]     double total = 0.0; [EOL]     if (this.renderAsPercentages) { [EOL]         total = DatasetUtilities.calculateStackTotal((TableXYDataset) dataset, item); [EOL]         value = value / total; [EOL]     } [EOL]     double positiveBase = 0.0; [EOL]     double negativeBase = 0.0; [EOL]     for (int i = 0; i < series; i++) { [EOL]         double v = dataset.getYValue(i, item); [EOL]         if (!Double.isNaN(v)) { [EOL]             if (this.renderAsPercentages) { [EOL]                 v = v / total; [EOL]             } [EOL]             if (v > 0) { [EOL]                 positiveBase = positiveBase + v; [EOL]             } else { [EOL]                 negativeBase = negativeBase + v; [EOL]             } [EOL]         } [EOL]     } [EOL]     double translatedBase; [EOL]     double translatedValue; [EOL]     RectangleEdge edgeR = plot.getRangeAxisEdge(); [EOL]     if (value > 0.0) { [EOL]         translatedBase = rangeAxis.valueToJava2D(positiveBase, dataArea, edgeR); [EOL]         translatedValue = rangeAxis.valueToJava2D(positiveBase + value, dataArea, edgeR); [EOL]     } else { [EOL]         translatedBase = rangeAxis.valueToJava2D(negativeBase, dataArea, edgeR); [EOL]         translatedValue = rangeAxis.valueToJava2D(negativeBase + value, dataArea, edgeR); [EOL]     } [EOL]     RectangleEdge edgeD = plot.getDomainAxisEdge(); [EOL]     double startX = intervalDataset.getStartXValue(series, item); [EOL]     if (Double.isNaN(startX)) { [EOL]         return; [EOL]     } [EOL]     double translatedStartX = domainAxis.valueToJava2D(startX, dataArea, edgeD); [EOL]     double endX = intervalDataset.getEndXValue(series, item); [EOL]     if (Double.isNaN(endX)) { [EOL]         return; [EOL]     } [EOL]     double translatedEndX = domainAxis.valueToJava2D(endX, dataArea, edgeD); [EOL]     double translatedWidth = Math.max(1, Math.abs(translatedEndX - translatedStartX)); [EOL]     double translatedHeight = Math.abs(translatedValue - translatedBase); [EOL]     if (getMargin() > 0.0) { [EOL]         double cut = translatedWidth * getMargin(); [EOL]         translatedWidth = translatedWidth - cut; [EOL]         translatedStartX = translatedStartX + cut / 2; [EOL]     } [EOL]     Rectangle2D bar = null; [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         bar = new Rectangle2D.Double(Math.min(translatedBase, translatedValue), translatedEndX, translatedHeight, translatedWidth); [EOL]     } else if (orientation == PlotOrientation.VERTICAL) { [EOL]         bar = new Rectangle2D.Double(translatedStartX, Math.min(translatedBase, translatedValue), translatedWidth, translatedHeight); [EOL]     } [EOL]     boolean positive = (value > 0.0); [EOL]     boolean inverted = rangeAxis.isInverted(); [EOL]     RectangleEdge barBase; [EOL]     if (orientation == PlotOrientation.HORIZONTAL) { [EOL]         if (positive && inverted || !positive && !inverted) { [EOL]             barBase = RectangleEdge.RIGHT; [EOL]         } else { [EOL]             barBase = RectangleEdge.LEFT; [EOL]         } [EOL]     } else { [EOL]         if (positive && !inverted || !positive && inverted) { [EOL]             barBase = RectangleEdge.BOTTOM; [EOL]         } else { [EOL]             barBase = RectangleEdge.TOP; [EOL]         } [EOL]     } [EOL]     if (pass == 0) { [EOL]         if (getShadowsVisible()) { [EOL]             getBarPainter().paintBarShadow(g2, this, series, item, selected, bar, barBase, false); [EOL]         } [EOL]     } else if (pass == 1) { [EOL]         getBarPainter().paintBar(g2, this, series, item, selected, bar, barBase); [EOL]         if (state.getInfo() != null) { [EOL]             EntityCollection entities = state.getInfo().getOwner().getEntityCollection(); [EOL]             if (entities != null) { [EOL]                 addEntity(entities, bar, dataset, series, item, selected, bar.getCenterX(), bar.getCenterY()); [EOL]             } [EOL]         } [EOL]     } else if (pass == 2) { [EOL]         if (isItemLabelVisible(series, item, selected)) { [EOL]             XYItemLabelGenerator generator = getItemLabelGenerator(series, item, selected); [EOL]             drawItemLabelForBar(g2, plot, dataset, series, item, selected, generator, bar, value < 0.0); [EOL]         } [EOL]     } [EOL] } <line_num>: 232,396
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof StackedXYBarRenderer)) { [EOL]         return false; [EOL]     } [EOL]     StackedXYBarRenderer that = (StackedXYBarRenderer) obj; [EOL]     if (this.renderAsPercentages != that.renderAsPercentages) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 405,417
public int hashCode() { [EOL]     int result = super.hashCode(); [EOL]     result = result * 37 + (this.renderAsPercentages ? 1 : 0); [EOL]     return result; [EOL] } <line_num>: 424,428
