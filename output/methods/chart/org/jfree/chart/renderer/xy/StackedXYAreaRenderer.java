public StackedXYAreaRendererState(PlotRenderingInfo info) { [EOL]     super(info); [EOL]     this.seriesArea = null; [EOL]     this.line = new Line2D.Double(); [EOL]     this.lastSeriesPoints = new Stack(); [EOL]     this.currentSeriesPoints = new Stack(); [EOL] } <line_num>: 148,154
public StackedXYAreaRenderer() { [EOL]     this(AREA); [EOL] } <line_num>: 235,237
public StackedXYAreaRenderer(int type) { [EOL]     this(type, null, null); [EOL] } <line_num>: 244,246
public StackedXYAreaRenderer(int type, XYToolTipGenerator labelGenerator, XYURLGenerator urlGenerator) { [EOL]     super(type, labelGenerator, urlGenerator); [EOL] } <line_num>: 259,264
public Polygon getSeriesArea() { [EOL]     return this.seriesArea; [EOL] } <line_num>: 161,163
public void setSeriesArea(Polygon area) { [EOL]     this.seriesArea = area; [EOL] } <line_num>: 170,172
public Line2D getLine() { [EOL]     return this.line; [EOL] } <line_num>: 179,181
public Stack getCurrentSeriesPoints() { [EOL]     return this.currentSeriesPoints; [EOL] } <line_num>: 188,190
public void setCurrentSeriesPoints(Stack points) { [EOL]     this.currentSeriesPoints = points; [EOL] } <line_num>: 197,199
public Stack getLastSeriesPoints() { [EOL]     return this.lastSeriesPoints; [EOL] } <line_num>: 206,208
public void setLastSeriesPoints(Stack points) { [EOL]     this.lastSeriesPoints = points; [EOL] } <line_num>: 215,217
public Paint getShapePaint() { [EOL]     return this.shapePaint; [EOL] } <line_num>: 274,276
public void setShapePaint(Paint shapePaint) { [EOL]     this.shapePaint = shapePaint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 286,289
public Stroke getShapeStroke() { [EOL]     return this.shapeStroke; [EOL] } <line_num>: 299,301
public void setShapeStroke(Stroke shapeStroke) { [EOL]     this.shapeStroke = shapeStroke; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 311,314
public XYItemRendererState initialise(Graphics2D g2, Rectangle2D dataArea, XYPlot plot, XYDataset data, PlotRenderingInfo info) { [EOL]     XYItemRendererState state = new StackedXYAreaRendererState(info); [EOL]     state.setProcessVisibleItemsOnly(false); [EOL]     return state; [EOL] } <line_num>: 331,342
public int getPassCount() { [EOL]     return 2; [EOL] } <line_num>: 349,351
public Range findRangeBounds(XYDataset dataset) { [EOL]     if (dataset != null) { [EOL]         return DatasetUtilities.findStackedRangeBounds((TableXYDataset) dataset); [EOL]     } else { [EOL]         return null; [EOL]     } [EOL] } <line_num>: 365,373
public void drawItem(Graphics2D g2, XYItemRendererState state, Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset, int series, int item, boolean selected, int pass) { [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     StackedXYAreaRendererState areaState = (StackedXYAreaRendererState) state; [EOL]     TableXYDataset tdataset = (TableXYDataset) dataset; [EOL]     int itemCount = tdataset.getItemCount(); [EOL]     double x1 = dataset.getXValue(series, item); [EOL]     double y1 = dataset.getYValue(series, item); [EOL]     boolean nullPoint = false; [EOL]     if (Double.isNaN(y1)) { [EOL]         y1 = 0.0; [EOL]         nullPoint = true; [EOL]     } [EOL]     double ph1 = getPreviousHeight(tdataset, series, item); [EOL]     double transX1 = domainAxis.valueToJava2D(x1, dataArea, plot.getDomainAxisEdge()); [EOL]     double transY1 = rangeAxis.valueToJava2D(y1 + ph1, dataArea, plot.getRangeAxisEdge()); [EOL]     Paint seriesPaint = getItemPaint(series, item, selected); [EOL]     Stroke seriesStroke = getItemStroke(series, item, selected); [EOL]     if (pass == 0) { [EOL]         if (item == 0) { [EOL]             areaState.setSeriesArea(new Polygon()); [EOL]             areaState.setLastSeriesPoints(areaState.getCurrentSeriesPoints()); [EOL]             areaState.setCurrentSeriesPoints(new Stack()); [EOL]             double transY2 = rangeAxis.valueToJava2D(ph1, dataArea, plot.getRangeAxisEdge()); [EOL]             if (orientation == PlotOrientation.VERTICAL) { [EOL]                 areaState.getSeriesArea().addPoint((int) transX1, (int) transY2); [EOL]             } else if (orientation == PlotOrientation.HORIZONTAL) { [EOL]                 areaState.getSeriesArea().addPoint((int) transY2, (int) transX1); [EOL]             } [EOL]         } [EOL]         if (orientation == PlotOrientation.VERTICAL) { [EOL]             Point point = new Point((int) transX1, (int) transY1); [EOL]             areaState.getSeriesArea().addPoint((int) point.getX(), (int) point.getY()); [EOL]             areaState.getCurrentSeriesPoints().push(point); [EOL]         } else if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             areaState.getSeriesArea().addPoint((int) transY1, (int) transX1); [EOL]         } [EOL]         if (getPlotLines()) { [EOL]             if (item > 0) { [EOL]                 double x0 = dataset.getXValue(series, item - 1); [EOL]                 double y0 = dataset.getYValue(series, item - 1); [EOL]                 double ph0 = getPreviousHeight(tdataset, series, item - 1); [EOL]                 double transX0 = domainAxis.valueToJava2D(x0, dataArea, plot.getDomainAxisEdge()); [EOL]                 double transY0 = rangeAxis.valueToJava2D(y0 + ph0, dataArea, plot.getRangeAxisEdge()); [EOL]                 if (orientation == PlotOrientation.VERTICAL) { [EOL]                     areaState.getLine().setLine(transX0, transY0, transX1, transY1); [EOL]                 } else if (orientation == PlotOrientation.HORIZONTAL) { [EOL]                     areaState.getLine().setLine(transY0, transX0, transY1, transX1); [EOL]                 } [EOL]                 g2.draw(areaState.getLine()); [EOL]             } [EOL]         } [EOL]         if (getPlotArea() && item > 0 && item == (itemCount - 1)) { [EOL]             double transY2 = rangeAxis.valueToJava2D(ph1, dataArea, plot.getRangeAxisEdge()); [EOL]             if (orientation == PlotOrientation.VERTICAL) { [EOL]                 areaState.getSeriesArea().addPoint((int) transX1, (int) transY2); [EOL]             } else if (orientation == PlotOrientation.HORIZONTAL) { [EOL]                 areaState.getSeriesArea().addPoint((int) transY2, (int) transX1); [EOL]             } [EOL]             if (series != 0) { [EOL]                 Stack points = areaState.getLastSeriesPoints(); [EOL]                 while (!points.empty()) { [EOL]                     Point point = (Point) points.pop(); [EOL]                     areaState.getSeriesArea().addPoint((int) point.getX(), (int) point.getY()); [EOL]                 } [EOL]             } [EOL]             g2.setPaint(seriesPaint); [EOL]             g2.setStroke(seriesStroke); [EOL]             g2.fill(areaState.getSeriesArea()); [EOL]             if (isOutline()) { [EOL]                 g2.setStroke(lookupSeriesOutlineStroke(series)); [EOL]                 g2.setPaint(lookupSeriesOutlinePaint(series)); [EOL]                 g2.draw(areaState.getSeriesArea()); [EOL]             } [EOL]         } [EOL]         int domainAxisIndex = plot.getDomainAxisIndex(domainAxis); [EOL]         int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis); [EOL]         XYCrosshairState crosshairState = state.getCrosshairState(); [EOL]         updateCrosshairValues(crosshairState, x1, ph1 + y1, domainAxisIndex, rangeAxisIndex, transX1, transY1, orientation); [EOL]     } else if (pass == 1) { [EOL]         Shape shape = null; [EOL]         if (getPlotShapes()) { [EOL]             shape = getItemShape(series, item, selected); [EOL]             if (plot.getOrientation() == PlotOrientation.VERTICAL) { [EOL]                 shape = ShapeUtilities.createTranslatedShape(shape, transX1, transY1); [EOL]             } else if (plot.getOrientation() == PlotOrientation.HORIZONTAL) { [EOL]                 shape = ShapeUtilities.createTranslatedShape(shape, transY1, transX1); [EOL]             } [EOL]             if (!nullPoint) { [EOL]                 if (getShapePaint() != null) { [EOL]                     g2.setPaint(getShapePaint()); [EOL]                 } else { [EOL]                     g2.setPaint(seriesPaint); [EOL]                 } [EOL]                 if (getShapeStroke() != null) { [EOL]                     g2.setStroke(getShapeStroke()); [EOL]                 } else { [EOL]                     g2.setStroke(seriesStroke); [EOL]                 } [EOL]                 g2.draw(shape); [EOL]             } [EOL]         } else { [EOL]             if (plot.getOrientation() == PlotOrientation.VERTICAL) { [EOL]                 shape = new Rectangle2D.Double(transX1 - 3, transY1 - 3, 6.0, 6.0); [EOL]             } else if (plot.getOrientation() == PlotOrientation.HORIZONTAL) { [EOL]                 shape = new Rectangle2D.Double(transY1 - 3, transX1 - 3, 6.0, 6.0); [EOL]             } [EOL]         } [EOL]         EntityCollection entities = state.getEntityCollection(); [EOL]         if (entities != null) { [EOL]             addEntity(entities, shape, dataset, series, item, selected, 0.0, 0.0); [EOL]         } [EOL]     } [EOL] } <line_num>: 394,583
protected double getPreviousHeight(TableXYDataset dataset, int series, int index) { [EOL]     double result = 0.0; [EOL]     for (int i = 0; i < series; i++) { [EOL]         double value = dataset.getYValue(i, index); [EOL]         if (!Double.isNaN(value)) { [EOL]             result += value; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 597,607
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof StackedXYAreaRenderer) || !super.equals(obj)) { [EOL]         return false; [EOL]     } [EOL]     StackedXYAreaRenderer that = (StackedXYAreaRenderer) obj; [EOL]     if (!PaintUtilities.equal(this.shapePaint, that.shapePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.shapeStroke, that.shapeStroke)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 616,631
public Object clone() throws CloneNotSupportedException { [EOL]     return super.clone(); [EOL] } <line_num>: 640,642
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.shapePaint = SerialUtilities.readPaint(stream); [EOL]     this.shapeStroke = SerialUtilities.readStroke(stream); [EOL] } <line_num>: 652,657
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.shapePaint, stream); [EOL]     SerialUtilities.writeStroke(this.shapeStroke, stream); [EOL] } <line_num>: 666,670
