public VectorRenderer() { [EOL] } <line_num>: 90,91
public Range findDomainBounds(XYDataset dataset) { [EOL]     if (dataset == null) { [EOL]         throw new IllegalArgumentException("Null 'dataset' argument."); [EOL]     } [EOL]     double minimum = Double.POSITIVE_INFINITY; [EOL]     double maximum = Double.NEGATIVE_INFINITY; [EOL]     int seriesCount = dataset.getSeriesCount(); [EOL]     double lvalue; [EOL]     double uvalue; [EOL]     if (dataset instanceof VectorXYDataset) { [EOL]         VectorXYDataset vdataset = (VectorXYDataset) dataset; [EOL]         for (int series = 0; series < seriesCount; series++) { [EOL]             int itemCount = dataset.getItemCount(series); [EOL]             for (int item = 0; item < itemCount; item++) { [EOL]                 double delta = vdataset.getVectorXValue(series, item); [EOL]                 if (delta < 0.0) { [EOL]                     uvalue = vdataset.getXValue(series, item); [EOL]                     lvalue = uvalue + delta; [EOL]                 } else { [EOL]                     lvalue = vdataset.getXValue(series, item); [EOL]                     uvalue = lvalue + delta; [EOL]                 } [EOL]                 minimum = Math.min(minimum, lvalue); [EOL]                 maximum = Math.max(maximum, uvalue); [EOL]             } [EOL]         } [EOL]     } else { [EOL]         for (int series = 0; series < seriesCount; series++) { [EOL]             int itemCount = dataset.getItemCount(series); [EOL]             for (int item = 0; item < itemCount; item++) { [EOL]                 lvalue = dataset.getXValue(series, item); [EOL]                 uvalue = lvalue; [EOL]                 minimum = Math.min(minimum, lvalue); [EOL]                 maximum = Math.max(maximum, uvalue); [EOL]             } [EOL]         } [EOL]     } [EOL]     if (minimum > maximum) { [EOL]         return null; [EOL]     } else { [EOL]         return new Range(minimum, maximum); [EOL]     } [EOL] } <line_num>: 102,147
public Range findRangeBounds(XYDataset dataset) { [EOL]     if (dataset == null) { [EOL]         throw new IllegalArgumentException("Null 'dataset' argument."); [EOL]     } [EOL]     double minimum = Double.POSITIVE_INFINITY; [EOL]     double maximum = Double.NEGATIVE_INFINITY; [EOL]     int seriesCount = dataset.getSeriesCount(); [EOL]     double lvalue; [EOL]     double uvalue; [EOL]     if (dataset instanceof VectorXYDataset) { [EOL]         VectorXYDataset vdataset = (VectorXYDataset) dataset; [EOL]         for (int series = 0; series < seriesCount; series++) { [EOL]             int itemCount = dataset.getItemCount(series); [EOL]             for (int item = 0; item < itemCount; item++) { [EOL]                 double delta = vdataset.getVectorYValue(series, item); [EOL]                 if (delta < 0.0) { [EOL]                     uvalue = vdataset.getYValue(series, item); [EOL]                     lvalue = uvalue + delta; [EOL]                 } else { [EOL]                     lvalue = vdataset.getYValue(series, item); [EOL]                     uvalue = lvalue + delta; [EOL]                 } [EOL]                 minimum = Math.min(minimum, lvalue); [EOL]                 maximum = Math.max(maximum, uvalue); [EOL]             } [EOL]         } [EOL]     } else { [EOL]         for (int series = 0; series < seriesCount; series++) { [EOL]             int itemCount = dataset.getItemCount(series); [EOL]             for (int item = 0; item < itemCount; item++) { [EOL]                 lvalue = dataset.getYValue(series, item); [EOL]                 uvalue = lvalue; [EOL]                 minimum = Math.min(minimum, lvalue); [EOL]                 maximum = Math.max(maximum, uvalue); [EOL]             } [EOL]         } [EOL]     } [EOL]     if (minimum > maximum) { [EOL]         return null; [EOL]     } else { [EOL]         return new Range(minimum, maximum); [EOL]     } [EOL] } <line_num>: 158,203
public void drawItem(Graphics2D g2, XYItemRendererState state, Rectangle2D dataArea, XYPlot plot, ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset, int series, int item, boolean selected, int pass) { [EOL]     double x = dataset.getXValue(series, item); [EOL]     double y = dataset.getYValue(series, item); [EOL]     double dx = 0.0; [EOL]     double dy = 0.0; [EOL]     if (dataset instanceof VectorXYDataset) { [EOL]         dx = ((VectorXYDataset) dataset).getVectorXValue(series, item); [EOL]         dy = ((VectorXYDataset) dataset).getVectorYValue(series, item); [EOL]     } [EOL]     double xx0 = domainAxis.valueToJava2D(x, dataArea, plot.getDomainAxisEdge()); [EOL]     double yy0 = rangeAxis.valueToJava2D(y, dataArea, plot.getRangeAxisEdge()); [EOL]     double xx1 = domainAxis.valueToJava2D(x + dx, dataArea, plot.getDomainAxisEdge()); [EOL]     double yy1 = rangeAxis.valueToJava2D(y + dy, dataArea, plot.getRangeAxisEdge()); [EOL]     Line2D line; [EOL]     PlotOrientation orientation = plot.getOrientation(); [EOL]     if (orientation.equals(PlotOrientation.HORIZONTAL)) { [EOL]         line = new Line2D.Double(yy0, xx0, yy1, xx1); [EOL]     } else { [EOL]         line = new Line2D.Double(xx0, yy0, xx1, yy1); [EOL]     } [EOL]     g2.setPaint(getItemPaint(series, item, selected)); [EOL]     g2.setStroke(getItemStroke(series, item, selected)); [EOL]     g2.draw(line); [EOL]     double dxx = (xx1 - xx0); [EOL]     double dyy = (yy1 - yy0); [EOL]     double bx = xx0 + (1.0 - this.baseLength) * dxx; [EOL]     double by = yy0 + (1.0 - this.baseLength) * dyy; [EOL]     double cx = xx0 + (1.0 - this.headLength) * dxx; [EOL]     double cy = yy0 + (1.0 - this.headLength) * dyy; [EOL]     double angle = 0.0; [EOL]     if (dxx != 0.0) { [EOL]         angle = Math.PI / 2.0 - Math.atan(dyy / dxx); [EOL]     } [EOL]     double deltaX = 2.0 * Math.cos(angle); [EOL]     double deltaY = 2.0 * Math.sin(angle); [EOL]     double leftx = cx + deltaX; [EOL]     double lefty = cy - deltaY; [EOL]     double rightx = cx - deltaX; [EOL]     double righty = cy + deltaY; [EOL]     GeneralPath p = new GeneralPath(); [EOL]     if (orientation == PlotOrientation.VERTICAL) { [EOL]         p.moveTo((float) xx1, (float) yy1); [EOL]         p.lineTo((float) rightx, (float) righty); [EOL]         p.lineTo((float) bx, (float) by); [EOL]         p.lineTo((float) leftx, (float) lefty); [EOL]     } else { [EOL]         p.moveTo((float) yy1, (float) xx1); [EOL]         p.lineTo((float) righty, (float) rightx); [EOL]         p.lineTo((float) by, (float) bx); [EOL]         p.lineTo((float) lefty, (float) leftx); [EOL]     } [EOL]     p.closePath(); [EOL]     g2.draw(p); [EOL]     EntityCollection entities = null; [EOL]     if (state.getInfo() != null) { [EOL]         entities = state.getInfo().getOwner().getEntityCollection(); [EOL]         if (entities != null) { [EOL]             addEntity(entities, line.getBounds(), dataset, series, item, selected, 0.0, 0.0); [EOL]         } [EOL]     } [EOL] } <line_num>: 219,299
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof VectorRenderer)) { [EOL]         return false; [EOL]     } [EOL]     VectorRenderer that = (VectorRenderer) obj; [EOL]     if (this.baseLength != that.baseLength) { [EOL]         return false; [EOL]     } [EOL]     if (this.headLength != that.headLength) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 315,330
public Object clone() throws CloneNotSupportedException { [EOL]     return super.clone(); [EOL] } <line_num>: 340,342
