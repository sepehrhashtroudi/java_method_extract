public ColumnArrangement() { [EOL] } <line_num>: 78,79
public ColumnArrangement(HorizontalAlignment hAlign, VerticalAlignment vAlign, double hGap, double vGap) { [EOL]     this.horizontalAlignment = hAlign; [EOL]     this.verticalAlignment = vAlign; [EOL]     this.horizontalGap = hGap; [EOL]     this.verticalGap = vGap; [EOL] } <line_num>: 89,96
public void add(Block block, Object key) { [EOL] } <line_num>: 106,109
public Size2D arrange(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     LengthConstraintType w = constraint.getWidthConstraintType(); [EOL]     LengthConstraintType h = constraint.getHeightConstraintType(); [EOL]     if (w == LengthConstraintType.NONE) { [EOL]         if (h == LengthConstraintType.NONE) { [EOL]             return arrangeNN(container, g2); [EOL]         } else if (h == LengthConstraintType.FIXED) { [EOL]             throw new RuntimeException("Not implemented."); [EOL]         } else if (h == LengthConstraintType.RANGE) { [EOL]             throw new RuntimeException("Not implemented."); [EOL]         } [EOL]     } else if (w == LengthConstraintType.FIXED) { [EOL]         if (h == LengthConstraintType.NONE) { [EOL]             throw new RuntimeException("Not implemented."); [EOL]         } else if (h == LengthConstraintType.FIXED) { [EOL]             return arrangeFF(container, g2, constraint); [EOL]         } else if (h == LengthConstraintType.RANGE) { [EOL]             throw new RuntimeException("Not implemented."); [EOL]         } [EOL]     } else if (w == LengthConstraintType.RANGE) { [EOL]         if (h == LengthConstraintType.NONE) { [EOL]             throw new RuntimeException("Not implemented."); [EOL]         } else if (h == LengthConstraintType.FIXED) { [EOL]             return arrangeRF(container, g2, constraint); [EOL]         } else if (h == LengthConstraintType.RANGE) { [EOL]             return arrangeRR(container, g2, constraint); [EOL]         } [EOL]     } [EOL]     return new Size2D(); [EOL] } <line_num>: 123,163
protected Size2D arrangeFF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     return arrangeNF(container, g2, constraint); [EOL] } <line_num>: 177,181
protected Size2D arrangeNF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     List blocks = container.getBlocks(); [EOL]     double height = constraint.getHeight(); [EOL]     if (height <= 0.0) { [EOL]         height = Double.POSITIVE_INFINITY; [EOL]     } [EOL]     double x = 0.0; [EOL]     double y = 0.0; [EOL]     double maxWidth = 0.0; [EOL]     List itemsInColumn = new ArrayList(); [EOL]     for (int i = 0; i < blocks.size(); i++) { [EOL]         Block block = (Block) blocks.get(i); [EOL]         Size2D size = block.arrange(g2, RectangleConstraint.NONE); [EOL]         if (y + size.height <= height) { [EOL]             itemsInColumn.add(block); [EOL]             block.setBounds(new Rectangle2D.Double(x, y, size.width, size.height)); [EOL]             y = y + size.height + this.verticalGap; [EOL]             maxWidth = Math.max(maxWidth, size.width); [EOL]         } else { [EOL]             if (itemsInColumn.isEmpty()) { [EOL]                 block.setBounds(new Rectangle2D.Double(x, y, size.width, Math.min(size.height, height - y))); [EOL]                 y = 0.0; [EOL]                 x = x + size.width + this.horizontalGap; [EOL]             } else { [EOL]                 itemsInColumn.clear(); [EOL]                 x = x + maxWidth + this.horizontalGap; [EOL]                 y = 0.0; [EOL]                 maxWidth = size.width; [EOL]                 block.setBounds(new Rectangle2D.Double(x, y, size.width, Math.min(size.height, height))); [EOL]                 y = size.height + this.verticalGap; [EOL]                 itemsInColumn.add(block); [EOL]             } [EOL]         } [EOL]     } [EOL]     return new Size2D(x + maxWidth, constraint.getHeight()); [EOL] } <line_num>: 195,248
protected Size2D arrangeRR(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     Size2D s1 = arrangeNN(container, g2); [EOL]     if (constraint.getHeightRange().contains(s1.height)) { [EOL]         return s1; [EOL]     } else { [EOL]         RectangleConstraint c = constraint.toFixedHeight(constraint.getHeightRange().getUpperBound()); [EOL]         return arrangeRF(container, g2, c); [EOL]     } [EOL] } <line_num>: 260,275
protected Size2D arrangeRF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     Size2D s = arrangeNF(container, g2, constraint); [EOL]     if (constraint.getWidthRange().contains(s.width)) { [EOL]         return s; [EOL]     } else { [EOL]         RectangleConstraint c = constraint.toFixedWidth(constraint.getWidthRange().constrain(s.getWidth())); [EOL]         return arrangeFF(container, g2, c); [EOL]     } [EOL] } <line_num>: 287,300
protected Size2D arrangeNN(BlockContainer container, Graphics2D g2) { [EOL]     double y = 0.0; [EOL]     double height = 0.0; [EOL]     double maxWidth = 0.0; [EOL]     List blocks = container.getBlocks(); [EOL]     int blockCount = blocks.size(); [EOL]     if (blockCount > 0) { [EOL]         Size2D[] sizes = new Size2D[blocks.size()]; [EOL]         for (int i = 0; i < blocks.size(); i++) { [EOL]             Block block = (Block) blocks.get(i); [EOL]             sizes[i] = block.arrange(g2, RectangleConstraint.NONE); [EOL]             height = height + sizes[i].getHeight(); [EOL]             maxWidth = Math.max(sizes[i].width, maxWidth); [EOL]             block.setBounds(new Rectangle2D.Double(0.0, y, sizes[i].width, sizes[i].height)); [EOL]             y = y + sizes[i].height + this.verticalGap; [EOL]         } [EOL]         if (blockCount > 1) { [EOL]             height = height + this.verticalGap * (blockCount - 1); [EOL]         } [EOL]         if (this.horizontalAlignment != HorizontalAlignment.LEFT) { [EOL]             for (int i = 0; i < blocks.size(); i++) { [EOL]                 if (this.horizontalAlignment == HorizontalAlignment.CENTER) { [EOL]                 } else if (this.horizontalAlignment == HorizontalAlignment.RIGHT) { [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return new Size2D(maxWidth, height); [EOL] } <line_num>: 311,349
public void clear() { [EOL] } <line_num>: 354,356
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof ColumnArrangement)) { [EOL]         return false; [EOL]     } [EOL]     ColumnArrangement that = (ColumnArrangement) obj; [EOL]     if (this.horizontalAlignment != that.horizontalAlignment) { [EOL]         return false; [EOL]     } [EOL]     if (this.verticalAlignment != that.verticalAlignment) { [EOL]         return false; [EOL]     } [EOL]     if (this.horizontalGap != that.horizontalGap) { [EOL]         return false; [EOL]     } [EOL]     if (this.verticalGap != that.verticalGap) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 365,386
