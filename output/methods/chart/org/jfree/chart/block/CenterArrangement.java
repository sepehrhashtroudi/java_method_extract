public CenterArrangement() { [EOL] } <line_num>: 64,65
public void add(Block block, Object key) { [EOL] } <line_num>: 75,78
public Size2D arrange(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     LengthConstraintType w = constraint.getWidthConstraintType(); [EOL]     LengthConstraintType h = constraint.getHeightConstraintType(); [EOL]     if (w == LengthConstraintType.NONE) { [EOL]         if (h == LengthConstraintType.NONE) { [EOL]             return arrangeNN(container, g2); [EOL]         } else if (h == LengthConstraintType.FIXED) { [EOL]             throw new RuntimeException("Not implemented."); [EOL]         } else if (h == LengthConstraintType.RANGE) { [EOL]             throw new RuntimeException("Not implemented."); [EOL]         } [EOL]     } else if (w == LengthConstraintType.FIXED) { [EOL]         if (h == LengthConstraintType.NONE) { [EOL]             return arrangeFN(container, g2, constraint); [EOL]         } else if (h == LengthConstraintType.FIXED) { [EOL]             throw new RuntimeException("Not implemented."); [EOL]         } else if (h == LengthConstraintType.RANGE) { [EOL]             throw new RuntimeException("Not implemented."); [EOL]         } [EOL]     } else if (w == LengthConstraintType.RANGE) { [EOL]         if (h == LengthConstraintType.NONE) { [EOL]             return arrangeRN(container, g2, constraint); [EOL]         } else if (h == LengthConstraintType.FIXED) { [EOL]             return arrangeRF(container, g2, constraint); [EOL]         } else if (h == LengthConstraintType.RANGE) { [EOL]             return arrangeRR(container, g2, constraint); [EOL]         } [EOL]     } [EOL]     throw new IllegalArgumentException("Unknown LengthConstraintType."); [EOL] } <line_num>: 92,132
protected Size2D arrangeFN(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     List blocks = container.getBlocks(); [EOL]     Block b = (Block) blocks.get(0); [EOL]     Size2D s = b.arrange(g2, RectangleConstraint.NONE); [EOL]     double width = constraint.getWidth(); [EOL]     Rectangle2D bounds = new Rectangle2D.Double((width - s.width) / 2.0, 0.0, s.width, s.height); [EOL]     b.setBounds(bounds); [EOL]     return new Size2D((width - s.width) / 2.0, s.height); [EOL] } <line_num>: 144,155
protected Size2D arrangeFR(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     Size2D s = arrangeFN(container, g2, constraint); [EOL]     if (constraint.getHeightRange().contains(s.height)) { [EOL]         return s; [EOL]     } else { [EOL]         RectangleConstraint c = constraint.toFixedHeight(constraint.getHeightRange().constrain(s.getHeight())); [EOL]         return arrangeFF(container, g2, c); [EOL]     } [EOL] } <line_num>: 167,179
protected Size2D arrangeFF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     return arrangeFN(container, g2, constraint); [EOL] } <line_num>: 191,196
protected Size2D arrangeRR(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     Size2D s1 = arrangeNN(container, g2); [EOL]     if (constraint.getWidthRange().contains(s1.width)) { [EOL]         return s1; [EOL]     } else { [EOL]         RectangleConstraint c = constraint.toFixedWidth(constraint.getWidthRange().getUpperBound()); [EOL]         return arrangeFR(container, g2, c); [EOL]     } [EOL] } <line_num>: 208,222
protected Size2D arrangeRF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     Size2D s = arrangeNF(container, g2, constraint); [EOL]     if (constraint.getWidthRange().contains(s.width)) { [EOL]         return s; [EOL]     } else { [EOL]         RectangleConstraint c = constraint.toFixedWidth(constraint.getWidthRange().constrain(s.getWidth())); [EOL]         return arrangeFF(container, g2, c); [EOL]     } [EOL] } <line_num>: 234,246
protected Size2D arrangeRN(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     Size2D s1 = arrangeNN(container, g2); [EOL]     if (constraint.getWidthRange().contains(s1.width)) { [EOL]         return s1; [EOL]     } else { [EOL]         RectangleConstraint c = constraint.toFixedWidth(constraint.getWidthRange().getUpperBound()); [EOL]         return arrangeFN(container, g2, c); [EOL]     } [EOL] } <line_num>: 258,271
protected Size2D arrangeNN(BlockContainer container, Graphics2D g2) { [EOL]     List blocks = container.getBlocks(); [EOL]     Block b = (Block) blocks.get(0); [EOL]     Size2D s = b.arrange(g2, RectangleConstraint.NONE); [EOL]     b.setBounds(new Rectangle2D.Double(0.0, 0.0, s.width, s.height)); [EOL]     return new Size2D(s.width, s.height); [EOL] } <line_num>: 282,288
protected Size2D arrangeNF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     return arrangeNN(container, g2); [EOL] } <line_num>: 300,304
public void clear() { [EOL] } <line_num>: 309,311
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof CenterArrangement)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 320,328
