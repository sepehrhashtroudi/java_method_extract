public BorderArrangement() { [EOL] } <line_num>: 86,87
public void add(Block block, Object key) { [EOL]     if (key == null) { [EOL]         this.centerBlock = block; [EOL]     } else { [EOL]         RectangleEdge edge = (RectangleEdge) key; [EOL]         if (edge == RectangleEdge.TOP) { [EOL]             this.topBlock = block; [EOL]         } else if (edge == RectangleEdge.BOTTOM) { [EOL]             this.bottomBlock = block; [EOL]         } else if (edge == RectangleEdge.LEFT) { [EOL]             this.leftBlock = block; [EOL]         } else if (edge == RectangleEdge.RIGHT) { [EOL]             this.rightBlock = block; [EOL]         } [EOL]     } [EOL] } <line_num>: 96,116
public Size2D arrange(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     RectangleConstraint contentConstraint = container.toContentConstraint(constraint); [EOL]     Size2D contentSize = null; [EOL]     LengthConstraintType w = contentConstraint.getWidthConstraintType(); [EOL]     LengthConstraintType h = contentConstraint.getHeightConstraintType(); [EOL]     if (w == LengthConstraintType.NONE) { [EOL]         if (h == LengthConstraintType.NONE) { [EOL]             contentSize = arrangeNN(container, g2); [EOL]         } else if (h == LengthConstraintType.FIXED) { [EOL]             throw new RuntimeException("Not implemented."); [EOL]         } else if (h == LengthConstraintType.RANGE) { [EOL]             throw new RuntimeException("Not implemented."); [EOL]         } [EOL]     } else if (w == LengthConstraintType.FIXED) { [EOL]         if (h == LengthConstraintType.NONE) { [EOL]             contentSize = arrangeFN(container, g2, constraint.getWidth()); [EOL]         } else if (h == LengthConstraintType.FIXED) { [EOL]             contentSize = arrangeFF(container, g2, constraint); [EOL]         } else if (h == LengthConstraintType.RANGE) { [EOL]             contentSize = arrangeFR(container, g2, constraint); [EOL]         } [EOL]     } else if (w == LengthConstraintType.RANGE) { [EOL]         if (h == LengthConstraintType.NONE) { [EOL]             throw new RuntimeException("Not implemented."); [EOL]         } else if (h == LengthConstraintType.FIXED) { [EOL]             throw new RuntimeException("Not implemented."); [EOL]         } else if (h == LengthConstraintType.RANGE) { [EOL]             contentSize = arrangeRR(container, constraint.getWidthRange(), constraint.getHeightRange(), g2); [EOL]         } [EOL]     } [EOL]     return new Size2D(container.calculateTotalWidth(contentSize.getWidth()), container.calculateTotalHeight(contentSize.getHeight())); [EOL] } <line_num>: 128,172
protected Size2D arrangeNN(BlockContainer container, Graphics2D g2) { [EOL]     double[] w = new double[5]; [EOL]     double[] h = new double[5]; [EOL]     if (this.topBlock != null) { [EOL]         Size2D size = this.topBlock.arrange(g2, RectangleConstraint.NONE); [EOL]         w[0] = size.width; [EOL]         h[0] = size.height; [EOL]     } [EOL]     if (this.bottomBlock != null) { [EOL]         Size2D size = this.bottomBlock.arrange(g2, RectangleConstraint.NONE); [EOL]         w[1] = size.width; [EOL]         h[1] = size.height; [EOL]     } [EOL]     if (this.leftBlock != null) { [EOL]         Size2D size = this.leftBlock.arrange(g2, RectangleConstraint.NONE); [EOL]         w[2] = size.width; [EOL]         h[2] = size.height; [EOL]     } [EOL]     if (this.rightBlock != null) { [EOL]         Size2D size = this.rightBlock.arrange(g2, RectangleConstraint.NONE); [EOL]         w[3] = size.width; [EOL]         h[3] = size.height; [EOL]     } [EOL]     h[2] = Math.max(h[2], h[3]); [EOL]     h[3] = h[2]; [EOL]     if (this.centerBlock != null) { [EOL]         Size2D size = this.centerBlock.arrange(g2, RectangleConstraint.NONE); [EOL]         w[4] = size.width; [EOL]         h[4] = size.height; [EOL]     } [EOL]     double width = Math.max(w[0], Math.max(w[1], w[2] + w[4] + w[3])); [EOL]     double centerHeight = Math.max(h[2], Math.max(h[3], h[4])); [EOL]     double height = h[0] + h[1] + centerHeight; [EOL]     if (this.topBlock != null) { [EOL]         this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, width, h[0])); [EOL]     } [EOL]     if (this.bottomBlock != null) { [EOL]         this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, height - h[1], width, h[1])); [EOL]     } [EOL]     if (this.leftBlock != null) { [EOL]         this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], centerHeight)); [EOL]     } [EOL]     if (this.rightBlock != null) { [EOL]         this.rightBlock.setBounds(new Rectangle2D.Double(width - w[3], h[0], w[3], centerHeight)); [EOL]     } [EOL]     if (this.centerBlock != null) { [EOL]         this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], width - w[2] - w[3], centerHeight)); [EOL]     } [EOL]     return new Size2D(width, height); [EOL] } <line_num>: 182,241
protected Size2D arrangeFR(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     Size2D size1 = arrangeFN(container, g2, constraint.getWidth()); [EOL]     if (constraint.getHeightRange().contains(size1.getHeight())) { [EOL]         return size1; [EOL]     } else { [EOL]         double h = constraint.getHeightRange().constrain(size1.getHeight()); [EOL]         RectangleConstraint c2 = constraint.toFixedHeight(h); [EOL]         return arrange(container, g2, c2); [EOL]     } [EOL] } <line_num>: 252,263
protected Size2D arrangeFN(BlockContainer container, Graphics2D g2, double width) { [EOL]     double[] w = new double[5]; [EOL]     double[] h = new double[5]; [EOL]     RectangleConstraint c1 = new RectangleConstraint(width, null, LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE); [EOL]     if (this.topBlock != null) { [EOL]         Size2D size = this.topBlock.arrange(g2, c1); [EOL]         w[0] = size.width; [EOL]         h[0] = size.height; [EOL]     } [EOL]     if (this.bottomBlock != null) { [EOL]         Size2D size = this.bottomBlock.arrange(g2, c1); [EOL]         w[1] = size.width; [EOL]         h[1] = size.height; [EOL]     } [EOL]     RectangleConstraint c2 = new RectangleConstraint(0.0, new Range(0.0, width), LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE); [EOL]     if (this.leftBlock != null) { [EOL]         Size2D size = this.leftBlock.arrange(g2, c2); [EOL]         w[2] = size.width; [EOL]         h[2] = size.height; [EOL]     } [EOL]     if (this.rightBlock != null) { [EOL]         double maxW = Math.max(width - w[2], 0.0); [EOL]         RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(Math.min(w[2], maxW), maxW), LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE); [EOL]         Size2D size = this.rightBlock.arrange(g2, c3); [EOL]         w[3] = size.width; [EOL]         h[3] = size.height; [EOL]     } [EOL]     h[2] = Math.max(h[2], h[3]); [EOL]     h[3] = h[2]; [EOL]     if (this.centerBlock != null) { [EOL]         RectangleConstraint c4 = new RectangleConstraint(width - w[2] - w[3], null, LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE); [EOL]         Size2D size = this.centerBlock.arrange(g2, c4); [EOL]         w[4] = size.width; [EOL]         h[4] = size.height; [EOL]     } [EOL]     double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4])); [EOL]     return arrange(container, g2, new RectangleConstraint(width, height)); [EOL] } <line_num>: 275,324
protected Size2D arrangeRR(BlockContainer container, Range widthRange, Range heightRange, Graphics2D g2) { [EOL]     double[] w = new double[5]; [EOL]     double[] h = new double[5]; [EOL]     if (this.topBlock != null) { [EOL]         RectangleConstraint c1 = new RectangleConstraint(widthRange, heightRange); [EOL]         Size2D size = this.topBlock.arrange(g2, c1); [EOL]         w[0] = size.width; [EOL]         h[0] = size.height; [EOL]     } [EOL]     if (this.bottomBlock != null) { [EOL]         Range heightRange2 = Range.shift(heightRange, -h[0], false); [EOL]         RectangleConstraint c2 = new RectangleConstraint(widthRange, heightRange2); [EOL]         Size2D size = this.bottomBlock.arrange(g2, c2); [EOL]         w[1] = size.width; [EOL]         h[1] = size.height; [EOL]     } [EOL]     Range heightRange3 = Range.shift(heightRange, -(h[0] + h[1])); [EOL]     if (this.leftBlock != null) { [EOL]         RectangleConstraint c3 = new RectangleConstraint(widthRange, heightRange3); [EOL]         Size2D size = this.leftBlock.arrange(g2, c3); [EOL]         w[2] = size.width; [EOL]         h[2] = size.height; [EOL]     } [EOL]     Range widthRange2 = Range.shift(widthRange, -w[2], false); [EOL]     if (this.rightBlock != null) { [EOL]         RectangleConstraint c4 = new RectangleConstraint(widthRange2, heightRange3); [EOL]         Size2D size = this.rightBlock.arrange(g2, c4); [EOL]         w[3] = size.width; [EOL]         h[3] = size.height; [EOL]     } [EOL]     h[2] = Math.max(h[2], h[3]); [EOL]     h[3] = h[2]; [EOL]     Range widthRange3 = Range.shift(widthRange, -(w[2] + w[3]), false); [EOL]     if (this.centerBlock != null) { [EOL]         RectangleConstraint c5 = new RectangleConstraint(widthRange3, heightRange3); [EOL]         Size2D size = this.centerBlock.arrange(g2, c5); [EOL]         w[4] = size.width; [EOL]         h[4] = size.height; [EOL]     } [EOL]     double width = Math.max(w[0], Math.max(w[1], w[2] + w[4] + w[3])); [EOL]     double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4])); [EOL]     if (this.topBlock != null) { [EOL]         this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, width, h[0])); [EOL]     } [EOL]     if (this.bottomBlock != null) { [EOL]         this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, height - h[1], width, h[1])); [EOL]     } [EOL]     if (this.leftBlock != null) { [EOL]         this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2])); [EOL]     } [EOL]     if (this.rightBlock != null) { [EOL]         this.rightBlock.setBounds(new Rectangle2D.Double(width - w[3], h[0], w[3], h[3])); [EOL]     } [EOL]     if (this.centerBlock != null) { [EOL]         this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], width - w[2] - w[3], height - h[0] - h[1])); [EOL]     } [EOL]     return new Size2D(width, height); [EOL] } <line_num>: 337,411
protected Size2D arrangeFF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     double[] w = new double[5]; [EOL]     double[] h = new double[5]; [EOL]     w[0] = constraint.getWidth(); [EOL]     if (this.topBlock != null) { [EOL]         RectangleConstraint c1 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED, 0.0, new Range(0.0, constraint.getHeight()), LengthConstraintType.RANGE); [EOL]         Size2D size = this.topBlock.arrange(g2, c1); [EOL]         h[0] = size.height; [EOL]     } [EOL]     w[1] = w[0]; [EOL]     if (this.bottomBlock != null) { [EOL]         RectangleConstraint c2 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED, 0.0, new Range(0.0, constraint.getHeight() - h[0]), LengthConstraintType.RANGE); [EOL]         Size2D size = this.bottomBlock.arrange(g2, c2); [EOL]         h[1] = size.height; [EOL]     } [EOL]     h[2] = constraint.getHeight() - h[1] - h[0]; [EOL]     if (this.leftBlock != null) { [EOL]         RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth()), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); [EOL]         Size2D size = this.leftBlock.arrange(g2, c3); [EOL]         w[2] = size.width; [EOL]     } [EOL]     h[3] = h[2]; [EOL]     if (this.rightBlock != null) { [EOL]         RectangleConstraint c4 = new RectangleConstraint(0.0, new Range(0.0, Math.max(constraint.getWidth() - w[2], 0.0)), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); [EOL]         Size2D size = this.rightBlock.arrange(g2, c4); [EOL]         w[3] = size.width; [EOL]     } [EOL]     h[4] = h[2]; [EOL]     w[4] = constraint.getWidth() - w[3] - w[2]; [EOL]     RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]); [EOL]     if (this.centerBlock != null) { [EOL]         this.centerBlock.arrange(g2, c5); [EOL]     } [EOL]     if (this.topBlock != null) { [EOL]         this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0])); [EOL]     } [EOL]     if (this.bottomBlock != null) { [EOL]         this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1])); [EOL]     } [EOL]     if (this.leftBlock != null) { [EOL]         this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2])); [EOL]     } [EOL]     if (this.rightBlock != null) { [EOL]         this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3])); [EOL]     } [EOL]     if (this.centerBlock != null) { [EOL]         this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4])); [EOL]     } [EOL]     return new Size2D(constraint.getWidth(), constraint.getHeight()); [EOL] } <line_num>: 422,489
public void clear() { [EOL]     this.centerBlock = null; [EOL]     this.topBlock = null; [EOL]     this.bottomBlock = null; [EOL]     this.leftBlock = null; [EOL]     this.rightBlock = null; [EOL] } <line_num>: 494,500
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof BorderArrangement)) { [EOL]         return false; [EOL]     } [EOL]     BorderArrangement that = (BorderArrangement) obj; [EOL]     if (!ObjectUtilities.equal(this.topBlock, that.topBlock)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.bottomBlock, that.bottomBlock)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.leftBlock, that.leftBlock)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.rightBlock, that.rightBlock)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.centerBlock, that.centerBlock)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 509,533
