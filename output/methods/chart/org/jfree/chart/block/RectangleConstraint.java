public RectangleConstraint(double w, double h) { [EOL]     this(w, null, LengthConstraintType.FIXED, h, null, LengthConstraintType.FIXED); [EOL] } <line_num>: 87,90
public RectangleConstraint(Range w, Range h) { [EOL]     this(0.0, w, LengthConstraintType.RANGE, 0.0, h, LengthConstraintType.RANGE); [EOL] } <line_num>: 98,101
public RectangleConstraint(Range w, double h) { [EOL]     this(0.0, w, LengthConstraintType.RANGE, h, null, LengthConstraintType.FIXED); [EOL] } <line_num>: 110,113
public RectangleConstraint(double w, Range h) { [EOL]     this(w, null, LengthConstraintType.FIXED, 0.0, h, LengthConstraintType.RANGE); [EOL] } <line_num>: 122,125
public RectangleConstraint(double w, Range widthRange, LengthConstraintType widthConstraintType, double h, Range heightRange, LengthConstraintType heightConstraintType) { [EOL]     if (widthConstraintType == null) { [EOL]         throw new IllegalArgumentException("Null 'widthType' argument."); [EOL]     } [EOL]     if (heightConstraintType == null) { [EOL]         throw new IllegalArgumentException("Null 'heightType' argument."); [EOL]     } [EOL]     this.width = w; [EOL]     this.widthRange = widthRange; [EOL]     this.widthConstraintType = widthConstraintType; [EOL]     this.height = h; [EOL]     this.heightRange = heightRange; [EOL]     this.heightConstraintType = heightConstraintType; [EOL] } <line_num>: 137,153
public double getWidth() { [EOL]     return this.width; [EOL] } <line_num>: 160,162
public Range getWidthRange() { [EOL]     return this.widthRange; [EOL] } <line_num>: 169,171
public LengthConstraintType getWidthConstraintType() { [EOL]     return this.widthConstraintType; [EOL] } <line_num>: 178,180
public double getHeight() { [EOL]     return this.height; [EOL] } <line_num>: 187,189
public Range getHeightRange() { [EOL]     return this.heightRange; [EOL] } <line_num>: 196,198
public LengthConstraintType getHeightConstraintType() { [EOL]     return this.heightConstraintType; [EOL] } <line_num>: 205,207
public RectangleConstraint toUnconstrainedWidth() { [EOL]     if (this.widthConstraintType == LengthConstraintType.NONE) { [EOL]         return this; [EOL]     } else { [EOL]         return new RectangleConstraint(this.width, this.widthRange, LengthConstraintType.NONE, this.height, this.heightRange, this.heightConstraintType); [EOL]     } [EOL] } <line_num>: 215,224
public RectangleConstraint toUnconstrainedHeight() { [EOL]     if (this.heightConstraintType == LengthConstraintType.NONE) { [EOL]         return this; [EOL]     } else { [EOL]         return new RectangleConstraint(this.width, this.widthRange, this.widthConstraintType, 0.0, this.heightRange, LengthConstraintType.NONE); [EOL]     } [EOL] } <line_num>: 232,241
public RectangleConstraint toFixedWidth(double width) { [EOL]     return new RectangleConstraint(width, this.widthRange, LengthConstraintType.FIXED, this.height, this.heightRange, this.heightConstraintType); [EOL] } <line_num>: 251,255
public RectangleConstraint toFixedHeight(double height) { [EOL]     return new RectangleConstraint(this.width, this.widthRange, this.widthConstraintType, height, this.heightRange, LengthConstraintType.FIXED); [EOL] } <line_num>: 265,269
public RectangleConstraint toRangeWidth(Range range) { [EOL]     if (range == null) { [EOL]         throw new IllegalArgumentException("Null 'range' argument."); [EOL]     } [EOL]     return new RectangleConstraint(range.getUpperBound(), range, LengthConstraintType.RANGE, this.height, this.heightRange, this.heightConstraintType); [EOL] } <line_num>: 279,286
public RectangleConstraint toRangeHeight(Range range) { [EOL]     if (range == null) { [EOL]         throw new IllegalArgumentException("Null 'range' argument."); [EOL]     } [EOL]     return new RectangleConstraint(this.width, this.widthRange, this.widthConstraintType, range.getUpperBound(), range, LengthConstraintType.RANGE); [EOL] } <line_num>: 296,303
public String toString() { [EOL]     return "RectangleConstraint[" + this.widthConstraintType.toString() + ": width=" + this.width + ", height=" + this.height + "]"; [EOL] } <line_num>: 311,315
public Size2D calculateConstrainedSize(Size2D base) { [EOL]     Size2D result = new Size2D(); [EOL]     if (this.widthConstraintType == LengthConstraintType.NONE) { [EOL]         result.width = base.width; [EOL]         if (this.heightConstraintType == LengthConstraintType.NONE) { [EOL]             result.height = base.height; [EOL]         } else if (this.heightConstraintType == LengthConstraintType.RANGE) { [EOL]             result.height = this.heightRange.constrain(base.height); [EOL]         } else if (this.heightConstraintType == LengthConstraintType.FIXED) { [EOL]             result.height = this.height; [EOL]         } [EOL]     } else if (this.widthConstraintType == LengthConstraintType.RANGE) { [EOL]         result.width = this.widthRange.constrain(base.width); [EOL]         if (this.heightConstraintType == LengthConstraintType.NONE) { [EOL]             result.height = base.height; [EOL]         } else if (this.heightConstraintType == LengthConstraintType.RANGE) { [EOL]             result.height = this.heightRange.constrain(base.height); [EOL]         } else if (this.heightConstraintType == LengthConstraintType.FIXED) { [EOL]             result.height = this.height; [EOL]         } [EOL]     } else if (this.widthConstraintType == LengthConstraintType.FIXED) { [EOL]         result.width = this.width; [EOL]         if (this.heightConstraintType == LengthConstraintType.NONE) { [EOL]             result.height = base.height; [EOL]         } else if (this.heightConstraintType == LengthConstraintType.RANGE) { [EOL]             result.height = this.heightRange.constrain(base.height); [EOL]         } else if (this.heightConstraintType == LengthConstraintType.FIXED) { [EOL]             result.height = this.height; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 325,364
