public GridArrangement(int rows, int columns) { [EOL]     this.rows = rows; [EOL]     this.columns = columns; [EOL] } <line_num>: 74,77
public void add(Block block, Object key) { [EOL] } <line_num>: 88,90
public Size2D arrange(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     LengthConstraintType w = constraint.getWidthConstraintType(); [EOL]     LengthConstraintType h = constraint.getHeightConstraintType(); [EOL]     if (w == LengthConstraintType.NONE) { [EOL]         if (h == LengthConstraintType.NONE) { [EOL]             return arrangeNN(container, g2); [EOL]         } else if (h == LengthConstraintType.FIXED) { [EOL]             return arrangeNF(container, g2, constraint); [EOL]         } else if (h == LengthConstraintType.RANGE) { [EOL]             return arrangeNR(container, g2, constraint); [EOL]         } [EOL]     } else if (w == LengthConstraintType.FIXED) { [EOL]         if (h == LengthConstraintType.NONE) { [EOL]             return arrangeFN(container, g2, constraint); [EOL]         } else if (h == LengthConstraintType.FIXED) { [EOL]             return arrangeFF(container, g2, constraint); [EOL]         } else if (h == LengthConstraintType.RANGE) { [EOL]             return arrangeFR(container, g2, constraint); [EOL]         } [EOL]     } else if (w == LengthConstraintType.RANGE) { [EOL]         if (h == LengthConstraintType.NONE) { [EOL]             return arrangeRN(container, g2, constraint); [EOL]         } else if (h == LengthConstraintType.FIXED) { [EOL]             return arrangeRF(container, g2, constraint); [EOL]         } else if (h == LengthConstraintType.RANGE) { [EOL]             return arrangeRR(container, g2, constraint); [EOL]         } [EOL]     } [EOL]     throw new RuntimeException("Should never get to here!"); [EOL] } <line_num>: 102,146
protected Size2D arrangeNN(BlockContainer container, Graphics2D g2) { [EOL]     double maxW = 0.0; [EOL]     double maxH = 0.0; [EOL]     List blocks = container.getBlocks(); [EOL]     Iterator iterator = blocks.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         Block b = (Block) iterator.next(); [EOL]         if (b != null) { [EOL]             Size2D s = b.arrange(g2, RectangleConstraint.NONE); [EOL]             maxW = Math.max(maxW, s.width); [EOL]             maxH = Math.max(maxH, s.height); [EOL]         } [EOL]     } [EOL]     double width = this.columns * maxW; [EOL]     double height = this.rows * maxH; [EOL]     RectangleConstraint c = new RectangleConstraint(width, height); [EOL]     return arrangeFF(container, g2, c); [EOL] } <line_num>: 156,173
protected Size2D arrangeFF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     double width = constraint.getWidth() / this.columns; [EOL]     double height = constraint.getHeight() / this.rows; [EOL]     List blocks = container.getBlocks(); [EOL]     for (int c = 0; c < this.columns; c++) { [EOL]         for (int r = 0; r < this.rows; r++) { [EOL]             int index = r * this.columns + c; [EOL]             if (index >= blocks.size()) { [EOL]                 break; [EOL]             } [EOL]             Block b = (Block) blocks.get(index); [EOL]             if (b != null) { [EOL]                 b.setBounds(new Rectangle2D.Double(c * width, r * height, width, height)); [EOL]             } [EOL]         } [EOL]     } [EOL]     return new Size2D(this.columns * width, this.rows * height); [EOL] } <line_num>: 184,203
protected Size2D arrangeFR(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     RectangleConstraint c1 = constraint.toUnconstrainedHeight(); [EOL]     Size2D size1 = arrange(container, g2, c1); [EOL]     if (constraint.getHeightRange().contains(size1.getHeight())) { [EOL]         return size1; [EOL]     } else { [EOL]         double h = constraint.getHeightRange().constrain(size1.getHeight()); [EOL]         RectangleConstraint c2 = constraint.toFixedHeight(h); [EOL]         return arrange(container, g2, c2); [EOL]     } [EOL] } <line_num>: 214,228
protected Size2D arrangeRF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     RectangleConstraint c1 = constraint.toUnconstrainedWidth(); [EOL]     Size2D size1 = arrange(container, g2, c1); [EOL]     if (constraint.getWidthRange().contains(size1.getWidth())) { [EOL]         return size1; [EOL]     } else { [EOL]         double w = constraint.getWidthRange().constrain(size1.getWidth()); [EOL]         RectangleConstraint c2 = constraint.toFixedWidth(w); [EOL]         return arrange(container, g2, c2); [EOL]     } [EOL] } <line_num>: 239,253
protected Size2D arrangeRN(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     RectangleConstraint c1 = constraint.toUnconstrainedWidth(); [EOL]     Size2D size1 = arrange(container, g2, c1); [EOL]     if (constraint.getWidthRange().contains(size1.getWidth())) { [EOL]         return size1; [EOL]     } else { [EOL]         double w = constraint.getWidthRange().constrain(size1.getWidth()); [EOL]         RectangleConstraint c2 = constraint.toFixedWidth(w); [EOL]         return arrange(container, g2, c2); [EOL]     } [EOL] } <line_num>: 264,278
protected Size2D arrangeNR(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     RectangleConstraint c1 = constraint.toUnconstrainedHeight(); [EOL]     Size2D size1 = arrange(container, g2, c1); [EOL]     if (constraint.getHeightRange().contains(size1.getHeight())) { [EOL]         return size1; [EOL]     } else { [EOL]         double h = constraint.getHeightRange().constrain(size1.getHeight()); [EOL]         RectangleConstraint c2 = constraint.toFixedHeight(h); [EOL]         return arrange(container, g2, c2); [EOL]     } [EOL] } <line_num>: 289,303
protected Size2D arrangeRR(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     Size2D size1 = arrange(container, g2, RectangleConstraint.NONE); [EOL]     if (constraint.getWidthRange().contains(size1.getWidth())) { [EOL]         if (constraint.getHeightRange().contains(size1.getHeight())) { [EOL]             return size1; [EOL]         } else { [EOL]             double h = constraint.getHeightRange().constrain(size1.getHeight()); [EOL]             RectangleConstraint cc = new RectangleConstraint(size1.getWidth(), h); [EOL]             return arrangeFF(container, g2, cc); [EOL]         } [EOL]     } else { [EOL]         if (constraint.getHeightRange().contains(size1.getHeight())) { [EOL]             double w = constraint.getWidthRange().constrain(size1.getWidth()); [EOL]             RectangleConstraint cc = new RectangleConstraint(w, size1.getHeight()); [EOL]             return arrangeFF(container, g2, cc); [EOL]         } else { [EOL]             double w = constraint.getWidthRange().constrain(size1.getWidth()); [EOL]             double h = constraint.getHeightRange().constrain(size1.getHeight()); [EOL]             RectangleConstraint cc = new RectangleConstraint(w, h); [EOL]             return arrangeFF(container, g2, cc); [EOL]         } [EOL]     } [EOL] } <line_num>: 314,351
protected Size2D arrangeFN(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     double width = constraint.getWidth() / this.columns; [EOL]     RectangleConstraint bc = constraint.toFixedWidth(width); [EOL]     List blocks = container.getBlocks(); [EOL]     double maxH = 0.0; [EOL]     for (int r = 0; r < this.rows; r++) { [EOL]         for (int c = 0; c < this.columns; c++) { [EOL]             int index = r * this.columns + c; [EOL]             if (index >= blocks.size()) { [EOL]                 break; [EOL]             } [EOL]             Block b = (Block) blocks.get(index); [EOL]             if (b != null) { [EOL]                 Size2D s = b.arrange(g2, bc); [EOL]                 maxH = Math.max(maxH, s.getHeight()); [EOL]             } [EOL]         } [EOL]     } [EOL]     RectangleConstraint cc = constraint.toFixedHeight(maxH * this.rows); [EOL]     return arrange(container, g2, cc); [EOL] } <line_num>: 362,384
protected Size2D arrangeNF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     double height = constraint.getHeight() / this.rows; [EOL]     RectangleConstraint bc = constraint.toFixedHeight(height); [EOL]     List blocks = container.getBlocks(); [EOL]     double maxW = 0.0; [EOL]     for (int r = 0; r < this.rows; r++) { [EOL]         for (int c = 0; c < this.columns; c++) { [EOL]             int index = r * this.columns + c; [EOL]             if (index >= blocks.size()) { [EOL]                 break; [EOL]             } [EOL]             Block b = (Block) blocks.get(index); [EOL]             if (b != null) { [EOL]                 Size2D s = b.arrange(g2, bc); [EOL]                 maxW = Math.max(maxW, s.getWidth()); [EOL]             } [EOL]         } [EOL]     } [EOL]     RectangleConstraint cc = constraint.toFixedWidth(maxW * this.columns); [EOL]     return arrange(container, g2, cc); [EOL] } <line_num>: 395,417
public void clear() { [EOL] } <line_num>: 422,424
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof GridArrangement)) { [EOL]         return false; [EOL]     } [EOL]     GridArrangement that = (GridArrangement) obj; [EOL]     if (this.columns != that.columns) { [EOL]         return false; [EOL]     } [EOL]     if (this.rows != that.rows) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 433,448
