public FlowArrangement() { [EOL]     this(HorizontalAlignment.CENTER, VerticalAlignment.CENTER, 2.0, 2.0); [EOL] } <line_num>: 79,81
public FlowArrangement(HorizontalAlignment hAlign, VerticalAlignment vAlign, double hGap, double vGap) { [EOL]     this.horizontalAlignment = hAlign; [EOL]     this.verticalAlignment = vAlign; [EOL]     this.horizontalGap = hGap; [EOL]     this.verticalGap = vGap; [EOL] } <line_num>: 91,97
public void add(Block block, Object key) { [EOL] } <line_num>: 107,110
public Size2D arrange(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     LengthConstraintType w = constraint.getWidthConstraintType(); [EOL]     LengthConstraintType h = constraint.getHeightConstraintType(); [EOL]     if (w == LengthConstraintType.NONE) { [EOL]         if (h == LengthConstraintType.NONE) { [EOL]             return arrangeNN(container, g2); [EOL]         } else if (h == LengthConstraintType.FIXED) { [EOL]             return arrangeNF(container, g2, constraint); [EOL]         } else if (h == LengthConstraintType.RANGE) { [EOL]             throw new RuntimeException("Not implemented."); [EOL]         } [EOL]     } else if (w == LengthConstraintType.FIXED) { [EOL]         if (h == LengthConstraintType.NONE) { [EOL]             return arrangeFN(container, g2, constraint); [EOL]         } else if (h == LengthConstraintType.FIXED) { [EOL]             return arrangeFF(container, g2, constraint); [EOL]         } else if (h == LengthConstraintType.RANGE) { [EOL]             return arrangeFR(container, g2, constraint); [EOL]         } [EOL]     } else if (w == LengthConstraintType.RANGE) { [EOL]         if (h == LengthConstraintType.NONE) { [EOL]             return arrangeRN(container, g2, constraint); [EOL]         } else if (h == LengthConstraintType.FIXED) { [EOL]             return arrangeRF(container, g2, constraint); [EOL]         } else if (h == LengthConstraintType.RANGE) { [EOL]             return arrangeRR(container, g2, constraint); [EOL]         } [EOL]     } [EOL]     throw new RuntimeException("Unrecognised constraint type."); [EOL] } <line_num>: 124,164
protected Size2D arrangeFN(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     List blocks = container.getBlocks(); [EOL]     double width = constraint.getWidth(); [EOL]     double x = 0.0; [EOL]     double y = 0.0; [EOL]     double maxHeight = 0.0; [EOL]     List itemsInRow = new ArrayList(); [EOL]     for (int i = 0; i < blocks.size(); i++) { [EOL]         Block block = (Block) blocks.get(i); [EOL]         Size2D size = block.arrange(g2, RectangleConstraint.NONE); [EOL]         if (x + size.width <= width) { [EOL]             itemsInRow.add(block); [EOL]             block.setBounds(new Rectangle2D.Double(x, y, size.width, size.height)); [EOL]             x = x + size.width + this.horizontalGap; [EOL]             maxHeight = Math.max(maxHeight, size.height); [EOL]         } else { [EOL]             if (itemsInRow.isEmpty()) { [EOL]                 block.setBounds(new Rectangle2D.Double(x, y, Math.min(size.width, width - x), size.height)); [EOL]                 x = 0.0; [EOL]                 y = y + size.height + this.verticalGap; [EOL]             } else { [EOL]                 itemsInRow.clear(); [EOL]                 x = 0.0; [EOL]                 y = y + maxHeight + this.verticalGap; [EOL]                 maxHeight = size.height; [EOL]                 block.setBounds(new Rectangle2D.Double(x, y, Math.min(size.width, width), size.height)); [EOL]                 x = size.width + this.horizontalGap; [EOL]                 itemsInRow.add(block); [EOL]             } [EOL]         } [EOL]     } [EOL]     return new Size2D(constraint.getWidth(), y + maxHeight); [EOL] } <line_num>: 176,225
protected Size2D arrangeFR(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     Size2D s = arrangeFN(container, g2, constraint); [EOL]     if (constraint.getHeightRange().contains(s.height)) { [EOL]         return s; [EOL]     } else { [EOL]         RectangleConstraint c = constraint.toFixedHeight(constraint.getHeightRange().constrain(s.getHeight())); [EOL]         return arrangeFF(container, g2, c); [EOL]     } [EOL] } <line_num>: 237,250
protected Size2D arrangeFF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     return arrangeFN(container, g2, constraint); [EOL] } <line_num>: 262,267
protected Size2D arrangeRR(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     Size2D s1 = arrangeNN(container, g2); [EOL]     if (constraint.getWidthRange().contains(s1.width)) { [EOL]         return s1; [EOL]     } else { [EOL]         RectangleConstraint c = constraint.toFixedWidth(constraint.getWidthRange().getUpperBound()); [EOL]         return arrangeFR(container, g2, c); [EOL]     } [EOL] } <line_num>: 279,294
protected Size2D arrangeRF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     Size2D s = arrangeNF(container, g2, constraint); [EOL]     if (constraint.getWidthRange().contains(s.width)) { [EOL]         return s; [EOL]     } else { [EOL]         RectangleConstraint c = constraint.toFixedWidth(constraint.getWidthRange().constrain(s.getWidth())); [EOL]         return arrangeFF(container, g2, c); [EOL]     } [EOL] } <line_num>: 306,319
protected Size2D arrangeRN(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     Size2D s1 = arrangeNN(container, g2); [EOL]     if (constraint.getWidthRange().contains(s1.width)) { [EOL]         return s1; [EOL]     } else { [EOL]         RectangleConstraint c = constraint.toFixedWidth(constraint.getWidthRange().getUpperBound()); [EOL]         return arrangeFN(container, g2, c); [EOL]     } [EOL] } <line_num>: 331,345
protected Size2D arrangeNN(BlockContainer container, Graphics2D g2) { [EOL]     double x = 0.0; [EOL]     double width = 0.0; [EOL]     double maxHeight = 0.0; [EOL]     List blocks = container.getBlocks(); [EOL]     int blockCount = blocks.size(); [EOL]     if (blockCount > 0) { [EOL]         Size2D[] sizes = new Size2D[blocks.size()]; [EOL]         for (int i = 0; i < blocks.size(); i++) { [EOL]             Block block = (Block) blocks.get(i); [EOL]             sizes[i] = block.arrange(g2, RectangleConstraint.NONE); [EOL]             width = width + sizes[i].getWidth(); [EOL]             maxHeight = Math.max(sizes[i].height, maxHeight); [EOL]             block.setBounds(new Rectangle2D.Double(x, 0.0, sizes[i].width, sizes[i].height)); [EOL]             x = x + sizes[i].width + this.horizontalGap; [EOL]         } [EOL]         if (blockCount > 1) { [EOL]             width = width + this.horizontalGap * (blockCount - 1); [EOL]         } [EOL]         if (this.verticalAlignment != VerticalAlignment.TOP) { [EOL]             for (int i = 0; i < blocks.size(); i++) { [EOL]                 if (this.verticalAlignment == VerticalAlignment.CENTER) { [EOL]                 } else if (this.verticalAlignment == VerticalAlignment.BOTTOM) { [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return new Size2D(width, maxHeight); [EOL] } <line_num>: 356,393
protected Size2D arrangeNF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) { [EOL]     return arrangeNN(container, g2); [EOL] } <line_num>: 405,409
public void clear() { [EOL] } <line_num>: 414,416
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof FlowArrangement)) { [EOL]         return false; [EOL]     } [EOL]     FlowArrangement that = (FlowArrangement) obj; [EOL]     if (this.horizontalAlignment != that.horizontalAlignment) { [EOL]         return false; [EOL]     } [EOL]     if (this.verticalAlignment != that.verticalAlignment) { [EOL]         return false; [EOL]     } [EOL]     if (this.horizontalGap != that.horizontalGap) { [EOL]         return false; [EOL]     } [EOL]     if (this.verticalGap != that.verticalGap) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 425,446
