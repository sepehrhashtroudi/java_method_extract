protected AbstractBlock() { [EOL]     this.id = null; [EOL]     this.width = 0.0; [EOL]     this.height = 0.0; [EOL]     this.bounds = new Rectangle2D.Float(); [EOL]     this.margin = RectangleInsets.ZERO_INSETS; [EOL]     this.frame = BlockBorder.NONE; [EOL]     this.padding = RectangleInsets.ZERO_INSETS; [EOL] } <line_num>: 109,117
public String getID() { [EOL]     return this.id; [EOL] } <line_num>: 126,128
public void setID(String id) { [EOL]     this.id = id; [EOL] } <line_num>: 137,139
public double getWidth() { [EOL]     return this.width; [EOL] } <line_num>: 150,152
public void setWidth(double width) { [EOL]     this.width = width; [EOL] } <line_num>: 161,163
public double getHeight() { [EOL]     return this.height; [EOL] } <line_num>: 174,176
public void setHeight(double height) { [EOL]     this.height = height; [EOL] } <line_num>: 185,187
public RectangleInsets getMargin() { [EOL]     return this.margin; [EOL] } <line_num>: 196,198
public void setMargin(RectangleInsets margin) { [EOL]     if (margin == null) { [EOL]         throw new IllegalArgumentException("Null 'margin' argument."); [EOL]     } [EOL]     this.margin = margin; [EOL] } <line_num>: 208,213
public void setMargin(double top, double left, double bottom, double right) { [EOL]     setMargin(new RectangleInsets(top, left, bottom, right)); [EOL] } <line_num>: 225,228
public BlockFrame getFrame() { [EOL]     return this.frame; [EOL] } <line_num>: 238,240
public void setFrame(BlockFrame frame) { [EOL]     if (frame == null) { [EOL]         throw new IllegalArgumentException("Null 'frame' argument."); [EOL]     } [EOL]     this.frame = frame; [EOL] } <line_num>: 250,255
public RectangleInsets getPadding() { [EOL]     return this.padding; [EOL] } <line_num>: 264,266
public void setPadding(RectangleInsets padding) { [EOL]     if (padding == null) { [EOL]         throw new IllegalArgumentException("Null 'padding' argument."); [EOL]     } [EOL]     this.padding = padding; [EOL] } <line_num>: 276,281
public void setPadding(double top, double left, double bottom, double right) { [EOL]     setPadding(new RectangleInsets(top, left, bottom, right)); [EOL] } <line_num>: 291,294
public double getContentXOffset() { [EOL]     return this.margin.getLeft() + this.frame.getInsets().getLeft() + this.padding.getLeft(); [EOL] } <line_num>: 303,306
public double getContentYOffset() { [EOL]     return this.margin.getTop() + this.frame.getInsets().getTop() + this.padding.getTop(); [EOL] } <line_num>: 315,318
public Size2D arrange(Graphics2D g2) { [EOL]     return arrange(g2, RectangleConstraint.NONE); [EOL] } <line_num>: 328,330
public Size2D arrange(Graphics2D g2, RectangleConstraint constraint) { [EOL]     Size2D base = new Size2D(getWidth(), getHeight()); [EOL]     return constraint.calculateConstrainedSize(base); [EOL] } <line_num>: 341,344
public Rectangle2D getBounds() { [EOL]     return this.bounds; [EOL] } <line_num>: 353,355
public void setBounds(Rectangle2D bounds) { [EOL]     if (bounds == null) { [EOL]         throw new IllegalArgumentException("Null 'bounds' argument."); [EOL]     } [EOL]     this.bounds = bounds; [EOL] } <line_num>: 364,369
protected double trimToContentWidth(double fixedWidth) { [EOL]     double result = this.margin.trimWidth(fixedWidth); [EOL]     result = this.frame.getInsets().trimWidth(result); [EOL]     result = this.padding.trimWidth(result); [EOL]     return Math.max(result, 0.0); [EOL] } <line_num>: 382,387
protected double trimToContentHeight(double fixedHeight) { [EOL]     double result = this.margin.trimHeight(fixedHeight); [EOL]     result = this.frame.getInsets().trimHeight(result); [EOL]     result = this.padding.trimHeight(result); [EOL]     return Math.max(result, 0.0); [EOL] } <line_num>: 400,405
protected RectangleConstraint toContentConstraint(RectangleConstraint c) { [EOL]     if (c == null) { [EOL]         throw new IllegalArgumentException("Null 'c' argument."); [EOL]     } [EOL]     if (c.equals(RectangleConstraint.NONE)) { [EOL]         return c; [EOL]     } [EOL]     double w = c.getWidth(); [EOL]     Range wr = c.getWidthRange(); [EOL]     double h = c.getHeight(); [EOL]     Range hr = c.getHeightRange(); [EOL]     double ww = trimToContentWidth(w); [EOL]     double hh = trimToContentHeight(h); [EOL]     Range wwr = trimToContentWidth(wr); [EOL]     Range hhr = trimToContentHeight(hr); [EOL]     return new RectangleConstraint(ww, wwr, c.getWidthConstraintType(), hh, hhr, c.getHeightConstraintType()); [EOL] } <line_num>: 415,434
private Range trimToContentWidth(Range r) { [EOL]     if (r == null) { [EOL]         return null; [EOL]     } [EOL]     double lowerBound = 0.0; [EOL]     double upperBound = Double.POSITIVE_INFINITY; [EOL]     if (r.getLowerBound() > 0.0) { [EOL]         lowerBound = trimToContentWidth(r.getLowerBound()); [EOL]     } [EOL]     if (r.getUpperBound() < Double.POSITIVE_INFINITY) { [EOL]         upperBound = trimToContentWidth(r.getUpperBound()); [EOL]     } [EOL]     return new Range(lowerBound, upperBound); [EOL] } <line_num>: 436,449
private Range trimToContentHeight(Range r) { [EOL]     if (r == null) { [EOL]         return null; [EOL]     } [EOL]     double lowerBound = 0.0; [EOL]     double upperBound = Double.POSITIVE_INFINITY; [EOL]     if (r.getLowerBound() > 0.0) { [EOL]         lowerBound = trimToContentHeight(r.getLowerBound()); [EOL]     } [EOL]     if (r.getUpperBound() < Double.POSITIVE_INFINITY) { [EOL]         upperBound = trimToContentHeight(r.getUpperBound()); [EOL]     } [EOL]     return new Range(lowerBound, upperBound); [EOL] } <line_num>: 451,464
protected double calculateTotalWidth(double contentWidth) { [EOL]     double result = contentWidth; [EOL]     result = this.padding.extendWidth(result); [EOL]     result = this.frame.getInsets().extendWidth(result); [EOL]     result = this.margin.extendWidth(result); [EOL]     return result; [EOL] } <line_num>: 473,479
protected double calculateTotalHeight(double contentHeight) { [EOL]     double result = contentHeight; [EOL]     result = this.padding.extendHeight(result); [EOL]     result = this.frame.getInsets().extendHeight(result); [EOL]     result = this.margin.extendHeight(result); [EOL]     return result; [EOL] } <line_num>: 488,494
protected Rectangle2D trimMargin(Rectangle2D area) { [EOL]     this.margin.trim(area); [EOL]     return area; [EOL] } <line_num>: 504,508
protected Rectangle2D trimBorder(Rectangle2D area) { [EOL]     this.frame.getInsets().trim(area); [EOL]     return area; [EOL] } <line_num>: 518,522
protected Rectangle2D trimPadding(Rectangle2D area) { [EOL]     this.padding.trim(area); [EOL]     return area; [EOL] } <line_num>: 532,536
protected void drawBorder(Graphics2D g2, Rectangle2D area) { [EOL]     this.frame.draw(g2, area); [EOL] } <line_num>: 544,546
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof AbstractBlock)) { [EOL]         return false; [EOL]     } [EOL]     AbstractBlock that = (AbstractBlock) obj; [EOL]     if (!ObjectUtilities.equal(this.id, that.id)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.frame.equals(that.frame)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.bounds.equals(that.bounds)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.margin.equals(that.margin)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.padding.equals(that.padding)) { [EOL]         return false; [EOL]     } [EOL]     if (this.height != that.height) { [EOL]         return false; [EOL]     } [EOL]     if (this.width != that.width) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 555,585
public Object clone() throws CloneNotSupportedException { [EOL]     AbstractBlock clone = (AbstractBlock) super.clone(); [EOL]     clone.bounds = (Rectangle2D) ShapeUtilities.clone(this.bounds); [EOL]     if (this.frame instanceof PublicCloneable) { [EOL]         PublicCloneable pc = (PublicCloneable) this.frame; [EOL]         clone.frame = (BlockFrame) pc.clone(); [EOL]     } [EOL]     return clone; [EOL] } <line_num>: 595,603
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writeShape(this.bounds, stream); [EOL] } <line_num>: 612,615
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.bounds = (Rectangle2D) SerialUtilities.readShape(stream); [EOL] } <line_num>: 625,629
