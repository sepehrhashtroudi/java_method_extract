public CompassPlot() { [EOL]     this(new DefaultValueDataset()); [EOL] } <line_num>: 179,181
public CompassPlot(ValueDataset dataset) { [EOL]     super(); [EOL]     if (dataset != null) { [EOL]         this.datasets[0] = dataset; [EOL]         dataset.addChangeListener(this); [EOL]     } [EOL]     this.circle1 = new Ellipse2D.Double(); [EOL]     this.circle2 = new Ellipse2D.Double(); [EOL]     this.rect1 = new Rectangle2D.Double(); [EOL]     setSeriesNeedle(0); [EOL] } <line_num>: 188,198
public int getLabelType() { [EOL]     return this.labelType; [EOL] } <line_num>: 208,211
public void setLabelType(int type) { [EOL]     if ((type != NO_LABELS) && (type != VALUE_LABELS)) { [EOL]         throw new IllegalArgumentException("MeterPlot.setLabelType(int): unrecognised type."); [EOL]     } [EOL]     if (this.labelType != type) { [EOL]         this.labelType = type; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 220,230
public Font getLabelFont() { [EOL]     return this.labelFont; [EOL] } <line_num>: 239,242
public void setLabelFont(Font font) { [EOL]     if (font == null) { [EOL]         throw new IllegalArgumentException("Null 'font' not allowed."); [EOL]     } [EOL]     this.labelFont = font; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 252,259
public Paint getRosePaint() { [EOL]     return this.rosePaint; [EOL] } <line_num>: 268,270
public void setRosePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.rosePaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 280,286
public Paint getRoseCenterPaint() { [EOL]     return this.roseCenterPaint; [EOL] } <line_num>: 296,298
public void setRoseCenterPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.roseCenterPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 308,314
public Paint getRoseHighlightPaint() { [EOL]     return this.roseHighlightPaint; [EOL] } <line_num>: 324,326
public void setRoseHighlightPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.roseHighlightPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 336,342
public boolean getDrawBorder() { [EOL]     return this.drawBorder; [EOL] } <line_num>: 351,353
public void setDrawBorder(boolean status) { [EOL]     this.drawBorder = status; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 362,365
public void setSeriesPaint(int series, Paint paint) { [EOL]     if ((series >= 0) && (series < this.seriesNeedle.length)) { [EOL]         this.seriesNeedle[series].setFillPaint(paint); [EOL]     } [EOL] } <line_num>: 375,380
public void setSeriesOutlinePaint(int series, Paint p) { [EOL]     if ((series >= 0) && (series < this.seriesNeedle.length)) { [EOL]         this.seriesNeedle[series].setOutlinePaint(p); [EOL]     } [EOL] } <line_num>: 390,396
public void setSeriesOutlineStroke(int series, Stroke stroke) { [EOL]     if ((series >= 0) && (series < this.seriesNeedle.length)) { [EOL]         this.seriesNeedle[series].setOutlineStroke(stroke); [EOL]     } [EOL] } <line_num>: 406,412
public void setSeriesNeedle(int type) { [EOL]     setSeriesNeedle(0, type); [EOL] } <line_num>: 421,423
public void setSeriesNeedle(int index, int type) { [EOL]     switch(type) { [EOL]         case 0: [EOL]             setSeriesNeedle(index, new ArrowNeedle(true)); [EOL]             setSeriesPaint(index, Color.red); [EOL]             this.seriesNeedle[index].setHighlightPaint(Color.white); [EOL]             break; [EOL]         case 1: [EOL]             setSeriesNeedle(index, new LineNeedle()); [EOL]             break; [EOL]         case 2: [EOL]             MeterNeedle longNeedle = new LongNeedle(); [EOL]             longNeedle.setRotateY(0.5); [EOL]             setSeriesNeedle(index, longNeedle); [EOL]             break; [EOL]         case 3: [EOL]             setSeriesNeedle(index, new PinNeedle()); [EOL]             break; [EOL]         case 4: [EOL]             setSeriesNeedle(index, new PlumNeedle()); [EOL]             break; [EOL]         case 5: [EOL]             setSeriesNeedle(index, new PointerNeedle()); [EOL]             break; [EOL]         case 6: [EOL]             setSeriesPaint(index, null); [EOL]             setSeriesOutlineStroke(index, new BasicStroke(3)); [EOL]             setSeriesNeedle(index, new ShipNeedle()); [EOL]             break; [EOL]         case 7: [EOL]             setSeriesPaint(index, Color.blue); [EOL]             setSeriesNeedle(index, new WindNeedle()); [EOL]             break; [EOL]         case 8: [EOL]             setSeriesNeedle(index, new ArrowNeedle(true)); [EOL]             break; [EOL]         case 9: [EOL]             setSeriesNeedle(index, new MiddlePinNeedle()); [EOL]             break; [EOL]         default: [EOL]             throw new IllegalArgumentException("Unrecognised type."); [EOL]     } [EOL] } <line_num>: 444,488
public void setSeriesNeedle(int index, MeterNeedle needle) { [EOL]     if ((needle != null) && (index < this.seriesNeedle.length)) { [EOL]         this.seriesNeedle[index] = needle; [EOL]     } [EOL]     fireChangeEvent(); [EOL] } <line_num>: 497,502
public ValueDataset[] getDatasets() { [EOL]     return this.datasets; [EOL] } <line_num>: 511,513
public void addDataset(ValueDataset dataset) { [EOL]     addDataset(dataset, null); [EOL] } <line_num>: 522,524
public void addDataset(ValueDataset dataset, MeterNeedle needle) { [EOL]     if (dataset != null) { [EOL]         int i = this.datasets.length + 1; [EOL]         ValueDataset[] t = new ValueDataset[i]; [EOL]         MeterNeedle[] p = new MeterNeedle[i]; [EOL]         i = i - 2; [EOL]         for (; i >= 0; --i) { [EOL]             t[i] = this.datasets[i]; [EOL]             p[i] = this.seriesNeedle[i]; [EOL]         } [EOL]         i = this.datasets.length; [EOL]         t[i] = dataset; [EOL]         p[i] = ((needle != null) ? needle : p[i - 1]); [EOL]         ValueDataset[] a = this.datasets; [EOL]         MeterNeedle[] b = this.seriesNeedle; [EOL]         this.datasets = t; [EOL]         this.seriesNeedle = p; [EOL]         for (--i; i >= 0; --i) { [EOL]             a[i] = null; [EOL]             b[i] = null; [EOL]         } [EOL]         dataset.addChangeListener(this); [EOL]     } [EOL] } <line_num>: 532,558
public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor, PlotState parentState, PlotRenderingInfo info) { [EOL]     int outerRadius = 0; [EOL]     int innerRadius = 0; [EOL]     int x1, y1, x2, y2; [EOL]     double a; [EOL]     if (info != null) { [EOL]         info.setPlotArea(area); [EOL]     } [EOL]     RectangleInsets insets = getInsets(); [EOL]     insets.trim(area); [EOL]     if (this.drawBorder) { [EOL]         drawBackground(g2, area); [EOL]     } [EOL]     int midX = (int) (area.getWidth() / 2); [EOL]     int midY = (int) (area.getHeight() / 2); [EOL]     int radius = midX; [EOL]     if (midY < midX) { [EOL]         radius = midY; [EOL]     } [EOL]     --radius; [EOL]     int diameter = 2 * radius; [EOL]     midX += (int) area.getMinX(); [EOL]     midY += (int) area.getMinY(); [EOL]     this.circle1.setFrame(midX - radius, midY - radius, diameter, diameter); [EOL]     this.circle2.setFrame(midX - radius + 15, midY - radius + 15, diameter - 30, diameter - 30); [EOL]     g2.setPaint(this.rosePaint); [EOL]     this.a1 = new Area(this.circle1); [EOL]     this.a2 = new Area(this.circle2); [EOL]     this.a1.subtract(this.a2); [EOL]     g2.fill(this.a1); [EOL]     g2.setPaint(this.roseCenterPaint); [EOL]     x1 = diameter - 30; [EOL]     g2.fillOval(midX - radius + 15, midY - radius + 15, x1, x1); [EOL]     g2.setPaint(this.roseHighlightPaint); [EOL]     g2.drawOval(midX - radius, midY - radius, diameter, diameter); [EOL]     x1 = diameter - 20; [EOL]     g2.drawOval(midX - radius + 10, midY - radius + 10, x1, x1); [EOL]     x1 = diameter - 30; [EOL]     g2.drawOval(midX - radius + 15, midY - radius + 15, x1, x1); [EOL]     x1 = diameter - 80; [EOL]     g2.drawOval(midX - radius + 40, midY - radius + 40, x1, x1); [EOL]     outerRadius = radius - 20; [EOL]     innerRadius = radius - 32; [EOL]     for (int w = 0; w < 360; w += 15) { [EOL]         a = Math.toRadians(w); [EOL]         x1 = midX - ((int) (Math.sin(a) * innerRadius)); [EOL]         x2 = midX - ((int) (Math.sin(a) * outerRadius)); [EOL]         y1 = midY - ((int) (Math.cos(a) * innerRadius)); [EOL]         y2 = midY - ((int) (Math.cos(a) * outerRadius)); [EOL]         g2.drawLine(x1, y1, x2, y2); [EOL]     } [EOL]     g2.setPaint(this.roseHighlightPaint); [EOL]     innerRadius = radius - 26; [EOL]     outerRadius = 7; [EOL]     for (int w = 45; w < 360; w += 90) { [EOL]         a = Math.toRadians(w); [EOL]         x1 = midX - ((int) (Math.sin(a) * innerRadius)); [EOL]         y1 = midY - ((int) (Math.cos(a) * innerRadius)); [EOL]         g2.fillOval(x1 - outerRadius, y1 - outerRadius, 2 * outerRadius, 2 * outerRadius); [EOL]     } [EOL]     for (int w = 0; w < 360; w += 90) { [EOL]         a = Math.toRadians(w); [EOL]         x1 = midX - ((int) (Math.sin(a) * innerRadius)); [EOL]         y1 = midY - ((int) (Math.cos(a) * innerRadius)); [EOL]         Polygon p = new Polygon(); [EOL]         p.addPoint(x1 - outerRadius, y1); [EOL]         p.addPoint(x1, y1 + outerRadius); [EOL]         p.addPoint(x1 + outerRadius, y1); [EOL]         p.addPoint(x1, y1 - outerRadius); [EOL]         g2.fillPolygon(p); [EOL]     } [EOL]     innerRadius = radius - 42; [EOL]     Font f = getCompassFont(radius); [EOL]     g2.setFont(f); [EOL]     g2.drawString("N", midX - 5, midY - innerRadius + f.getSize()); [EOL]     g2.drawString("S", midX - 5, midY + innerRadius - 5); [EOL]     g2.drawString("W", midX - innerRadius + 5, midY + 5); [EOL]     g2.drawString("E", midX + innerRadius - f.getSize(), midY + 5); [EOL]     y1 = radius / 2; [EOL]     x1 = radius / 6; [EOL]     Rectangle2D needleArea = new Rectangle2D.Double((midX - x1), (midY - y1), (2 * x1), (2 * y1)); [EOL]     int x = this.seriesNeedle.length; [EOL]     int current = 0; [EOL]     double value = 0; [EOL]     int i = (this.datasets.length - 1); [EOL]     for (; i >= 0; --i) { [EOL]         ValueDataset data = this.datasets[i]; [EOL]         if (data != null && data.getValue() != null) { [EOL]             value = (data.getValue().doubleValue()) % this.revolutionDistance; [EOL]             value = value / this.revolutionDistance * 360; [EOL]             current = i % x; [EOL]             this.seriesNeedle[current].draw(g2, needleArea, value); [EOL]         } [EOL]     } [EOL]     if (this.drawBorder) { [EOL]         drawOutline(g2, area); [EOL]     } [EOL] } <line_num>: 570,698
public String getPlotType() { [EOL]     return localizationResources.getString("Compass_Plot"); [EOL] } <line_num>: 705,707
public LegendItemCollection getLegendItems() { [EOL]     return null; [EOL] } <line_num>: 715,717
public void zoom(double percent) { [EOL] } <line_num>: 724,726
protected Font getCompassFont(int radius) { [EOL]     float fontSize = radius / 10.0f; [EOL]     if (fontSize < 8) { [EOL]         fontSize = 8; [EOL]     } [EOL]     Font newFont = this.compassFont.deriveFont(fontSize); [EOL]     return newFont; [EOL] } <line_num>: 735,742
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof CompassPlot)) { [EOL]         return false; [EOL]     } [EOL]     if (!super.equals(obj)) { [EOL]         return false; [EOL]     } [EOL]     CompassPlot that = (CompassPlot) obj; [EOL]     if (this.labelType != that.labelType) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.labelFont, that.labelFont)) { [EOL]         return false; [EOL]     } [EOL]     if (this.drawBorder != that.drawBorder) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.roseHighlightPaint, that.roseHighlightPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.rosePaint, that.rosePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.roseCenterPaint, that.roseCenterPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.compassFont, that.compassFont)) { [EOL]         return false; [EOL]     } [EOL]     if (!Arrays.equals(this.seriesNeedle, that.seriesNeedle)) { [EOL]         return false; [EOL]     } [EOL]     if (getRevolutionDistance() != that.getRevolutionDistance()) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 751,793
public Object clone() throws CloneNotSupportedException { [EOL]     CompassPlot clone = (CompassPlot) super.clone(); [EOL]     if (this.circle1 != null) { [EOL]         clone.circle1 = (Ellipse2D) this.circle1.clone(); [EOL]     } [EOL]     if (this.circle2 != null) { [EOL]         clone.circle2 = (Ellipse2D) this.circle2.clone(); [EOL]     } [EOL]     if (this.a1 != null) { [EOL]         clone.a1 = (Area) this.a1.clone(); [EOL]     } [EOL]     if (this.a2 != null) { [EOL]         clone.a2 = (Area) this.a2.clone(); [EOL]     } [EOL]     if (this.rect1 != null) { [EOL]         clone.rect1 = (Rectangle2D) this.rect1.clone(); [EOL]     } [EOL]     clone.datasets = (ValueDataset[]) this.datasets.clone(); [EOL]     clone.seriesNeedle = (MeterNeedle[]) this.seriesNeedle.clone(); [EOL]     for (int i = 0; i < this.datasets.length; ++i) { [EOL]         if (clone.datasets[i] != null) { [EOL]             clone.datasets[i].addChangeListener(clone); [EOL]         } [EOL]     } [EOL]     return clone; [EOL] } <line_num>: 803,832
public void setRevolutionDistance(double size) { [EOL]     if (size > 0) { [EOL]         this.revolutionDistance = size; [EOL]     } [EOL] } <line_num>: 842,846
public double getRevolutionDistance() { [EOL]     return this.revolutionDistance; [EOL] } <line_num>: 855,857
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.rosePaint, stream); [EOL]     SerialUtilities.writePaint(this.roseCenterPaint, stream); [EOL]     SerialUtilities.writePaint(this.roseHighlightPaint, stream); [EOL] } <line_num>: 866,871
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.rosePaint = SerialUtilities.readPaint(stream); [EOL]     this.roseCenterPaint = SerialUtilities.readPaint(stream); [EOL]     this.roseHighlightPaint = SerialUtilities.readPaint(stream); [EOL] } <line_num>: 881,887
