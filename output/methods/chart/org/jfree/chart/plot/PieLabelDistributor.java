public PieLabelDistributor(int labelCount) { [EOL]     super(); [EOL] } <line_num>: 62,64
public void distributeLabels(double minY, double height) { [EOL]     sort(); [EOL]     if (isOverlap()) { [EOL]         adjustDownwards(minY, height); [EOL]     } [EOL]     if (isOverlap()) { [EOL]         adjustUpwards(minY, height); [EOL]     } [EOL]     if (isOverlap()) { [EOL]         spreadEvenly(minY, height); [EOL]     } [EOL] } <line_num>: 72,89
private boolean isOverlap() { [EOL]     double y = 0.0; [EOL]     for (int i = 0; i < this.labels.size(); i++) { [EOL]         PieLabelRecord plr = getPieLabelRecord(i); [EOL]         if (y > plr.getLowerY()) { [EOL]             return true; [EOL]         } [EOL]         y = plr.getUpperY(); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 97,107
protected void adjustInwards() { [EOL]     int lower = 0; [EOL]     int upper = this.labels.size() - 1; [EOL]     while (upper > lower) { [EOL]         if (lower < upper - 1) { [EOL]             PieLabelRecord r0 = getPieLabelRecord(lower); [EOL]             PieLabelRecord r1 = getPieLabelRecord(lower + 1); [EOL]             if (r1.getLowerY() < r0.getUpperY()) { [EOL]                 double adjust = r0.getUpperY() - r1.getLowerY() + this.minGap; [EOL]                 r1.setAllocatedY(r1.getAllocatedY() + adjust); [EOL]             } [EOL]         } [EOL]         PieLabelRecord r2 = getPieLabelRecord(upper - 1); [EOL]         PieLabelRecord r3 = getPieLabelRecord(upper); [EOL]         if (r2.getUpperY() > r3.getLowerY()) { [EOL]             double adjust = (r2.getUpperY() - r3.getLowerY()) + this.minGap; [EOL]             r3.setAllocatedY(r3.getAllocatedY() + adjust); [EOL]         } [EOL]         lower++; [EOL]         upper--; [EOL]     } [EOL] } <line_num>: 113,135
protected void adjustDownwards(double minY, double height) { [EOL]     for (int i = 0; i < this.labels.size() - 1; i++) { [EOL]         PieLabelRecord record0 = getPieLabelRecord(i); [EOL]         PieLabelRecord record1 = getPieLabelRecord(i + 1); [EOL]         if (record1.getLowerY() < record0.getUpperY()) { [EOL]             record1.setAllocatedY(Math.min(minY + height - record1.getLabelHeight() / 2.0, record0.getUpperY() + this.minGap + record1.getLabelHeight() / 2.0)); [EOL]         } [EOL]     } [EOL] } <line_num>: 144,155
protected void adjustUpwards(double minY, double height) { [EOL]     for (int i = this.labels.size() - 1; i > 0; i--) { [EOL]         PieLabelRecord record0 = getPieLabelRecord(i); [EOL]         PieLabelRecord record1 = getPieLabelRecord(i - 1); [EOL]         if (record1.getUpperY() > record0.getLowerY()) { [EOL]             record1.setAllocatedY(Math.max(minY + record1.getLabelHeight() / 2.0, record0.getLowerY() - this.minGap - record1.getLabelHeight() / 2.0)); [EOL]         } [EOL]     } [EOL] } <line_num>: 164,174
protected void spreadEvenly(double minY, double height) { [EOL]     double y = minY; [EOL]     double sumOfLabelHeights = 0.0; [EOL]     for (int i = 0; i < this.labels.size(); i++) { [EOL]         sumOfLabelHeights += getPieLabelRecord(i).getLabelHeight(); [EOL]     } [EOL]     double gap = height - sumOfLabelHeights; [EOL]     if (this.labels.size() > 1) { [EOL]         gap = gap / (this.labels.size() - 1); [EOL]     } [EOL]     for (int i = 0; i < this.labels.size(); i++) { [EOL]         PieLabelRecord record = getPieLabelRecord(i); [EOL]         y = y + record.getLabelHeight() / 2.0; [EOL]         record.setAllocatedY(y); [EOL]         y = y + record.getLabelHeight() / 2.0 + gap; [EOL]     } [EOL] } <line_num>: 183,199
public void sort() { [EOL]     Collections.sort(this.labels); [EOL] } <line_num>: 204,206
public String toString() { [EOL]     StringBuffer result = new StringBuffer(); [EOL]     for (int i = 0; i < this.labels.size(); i++) { [EOL]         result.append(getPieLabelRecord(i).toString()).append("\n"); [EOL]     } [EOL]     return result.toString(); [EOL] } <line_num>: 214,220
