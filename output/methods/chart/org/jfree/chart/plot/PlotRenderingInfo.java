public PlotRenderingInfo(ChartRenderingInfo owner) { [EOL]     this.owner = owner; [EOL]     this.dataArea = new Rectangle2D.Double(); [EOL]     this.subplotInfo = new java.util.ArrayList(); [EOL] } <line_num>: 89,93
public ChartRenderingInfo getOwner() { [EOL]     return this.owner; [EOL] } <line_num>: 100,102
public Rectangle2D getPlotArea() { [EOL]     return this.plotArea; [EOL] } <line_num>: 111,113
public void setPlotArea(Rectangle2D area) { [EOL]     this.plotArea = area; [EOL] } <line_num>: 123,125
public Rectangle2D getDataArea() { [EOL]     return this.dataArea; [EOL] } <line_num>: 134,136
public void setDataArea(Rectangle2D area) { [EOL]     this.dataArea = area; [EOL] } <line_num>: 146,148
public int getSubplotCount() { [EOL]     return this.subplotInfo.size(); [EOL] } <line_num>: 155,157
public void addSubplotInfo(PlotRenderingInfo info) { [EOL]     this.subplotInfo.add(info); [EOL] } <line_num>: 166,168
public PlotRenderingInfo getSubplotInfo(int index) { [EOL]     return (PlotRenderingInfo) this.subplotInfo.get(index); [EOL] } <line_num>: 179,181
public int getSubplotIndex(Point2D source) { [EOL]     if (source == null) { [EOL]         throw new IllegalArgumentException("Null 'source' argument."); [EOL]     } [EOL]     int subplotCount = getSubplotCount(); [EOL]     for (int i = 0; i < subplotCount; i++) { [EOL]         PlotRenderingInfo info = getSubplotInfo(i); [EOL]         Rectangle2D area = info.getDataArea(); [EOL]         if (area.contains(source)) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return -1; [EOL] } <line_num>: 196,209
public boolean equals(Object obj) { [EOL]     if (this == obj) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof PlotRenderingInfo)) { [EOL]         return false; [EOL]     } [EOL]     PlotRenderingInfo that = (PlotRenderingInfo) obj; [EOL]     if (!ObjectUtilities.equal(this.dataArea, that.dataArea)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.plotArea, that.plotArea)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.subplotInfo, that.subplotInfo)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 218,236
public Object clone() throws CloneNotSupportedException { [EOL]     PlotRenderingInfo clone = (PlotRenderingInfo) super.clone(); [EOL]     if (this.plotArea != null) { [EOL]         clone.plotArea = (Rectangle2D) this.plotArea.clone(); [EOL]     } [EOL]     if (this.dataArea != null) { [EOL]         clone.dataArea = (Rectangle2D) this.dataArea.clone(); [EOL]     } [EOL]     clone.subplotInfo = new java.util.ArrayList(this.subplotInfo.size()); [EOL]     for (int i = 0; i < this.subplotInfo.size(); i++) { [EOL]         PlotRenderingInfo info = (PlotRenderingInfo) this.subplotInfo.get(i); [EOL]         clone.subplotInfo.add(info.clone()); [EOL]     } [EOL]     return clone; [EOL] } <line_num>: 245,260
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writeShape(this.dataArea, stream); [EOL]     SerialUtilities.writeShape(this.plotArea, stream); [EOL] } <line_num>: 269,273
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.dataArea = (Rectangle2D) SerialUtilities.readShape(stream); [EOL]     this.plotArea = (Rectangle2D) SerialUtilities.readShape(stream); [EOL] } <line_num>: 283,288
