protected Plot() { [EOL]     this.parent = null; [EOL]     this.insets = DEFAULT_INSETS; [EOL]     this.backgroundPaint = DEFAULT_BACKGROUND_PAINT; [EOL]     this.backgroundAlpha = DEFAULT_BACKGROUND_ALPHA; [EOL]     this.backgroundImage = null; [EOL]     this.outlineVisible = true; [EOL]     this.outlineStroke = DEFAULT_OUTLINE_STROKE; [EOL]     this.outlinePaint = DEFAULT_OUTLINE_PAINT; [EOL]     this.foregroundAlpha = DEFAULT_FOREGROUND_ALPHA; [EOL]     this.noDataMessage = null; [EOL]     this.noDataMessageFont = new Font("Tahoma", Font.PLAIN, 12); [EOL]     this.noDataMessagePaint = Color.black; [EOL]     this.drawingSupplier = new DefaultDrawingSupplier(); [EOL]     this.notify = true; [EOL]     this.listenerList = new EventListenerList(); [EOL] } <line_num>: 306,327
public DatasetGroup getDatasetGroup() { [EOL]     return this.datasetGroup; [EOL] } <line_num>: 336,338
protected void setDatasetGroup(DatasetGroup group) { [EOL]     this.datasetGroup = group; [EOL] } <line_num>: 347,349
public String getNoDataMessage() { [EOL]     return this.noDataMessage; [EOL] } <line_num>: 361,363
public void setNoDataMessage(String message) { [EOL]     this.noDataMessage = message; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 374,377
public Font getNoDataMessageFont() { [EOL]     return this.noDataMessageFont; [EOL] } <line_num>: 387,389
public void setNoDataMessageFont(Font font) { [EOL]     if (font == null) { [EOL]         throw new IllegalArgumentException("Null 'font' argument."); [EOL]     } [EOL]     this.noDataMessageFont = font; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 399,405
public Paint getNoDataMessagePaint() { [EOL]     return this.noDataMessagePaint; [EOL] } <line_num>: 415,417
public void setNoDataMessagePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.noDataMessagePaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 427,433
public abstract String getPlotType(); <line_num>: 444,444
public Plot getParent() { [EOL]     return this.parent; [EOL] } <line_num>: 455,457
public void setParent(Plot parent) { [EOL]     this.parent = parent; [EOL] } <line_num>: 467,469
public Plot getRootPlot() { [EOL]     Plot p = getParent(); [EOL]     if (p == null) { [EOL]         return this; [EOL]     } else { [EOL]         return p.getRootPlot(); [EOL]     } [EOL] } <line_num>: 478,488
public boolean isSubplot() { [EOL]     return (getParent() != null); [EOL] } <line_num>: 500,502
public RectangleInsets getInsets() { [EOL]     return this.insets; [EOL] } <line_num>: 511,513
public void setInsets(RectangleInsets insets) { [EOL]     setInsets(insets, true); [EOL] } <line_num>: 524,526
public void setInsets(RectangleInsets insets, boolean notify) { [EOL]     if (insets == null) { [EOL]         throw new IllegalArgumentException("Null 'insets' argument."); [EOL]     } [EOL]     if (!this.insets.equals(insets)) { [EOL]         this.insets = insets; [EOL]         if (notify) { [EOL]             fireChangeEvent(); [EOL]         } [EOL]     } [EOL] } <line_num>: 539,550
public Paint getBackgroundPaint() { [EOL]     return this.backgroundPaint; [EOL] } <line_num>: 559,561
public void setBackgroundPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         if (this.backgroundPaint != null) { [EOL]             this.backgroundPaint = null; [EOL]             fireChangeEvent(); [EOL]         } [EOL]     } else { [EOL]         if (this.backgroundPaint != null) { [EOL]             if (this.backgroundPaint.equals(paint)) { [EOL]                 return; [EOL]             } [EOL]         } [EOL]         this.backgroundPaint = paint; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 571,589
public float getBackgroundAlpha() { [EOL]     return this.backgroundAlpha; [EOL] } <line_num>: 598,600
public void setBackgroundAlpha(float alpha) { [EOL]     if (this.backgroundAlpha != alpha) { [EOL]         this.backgroundAlpha = alpha; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 610,615
public DrawingSupplier getDrawingSupplier() { [EOL]     DrawingSupplier result = null; [EOL]     Plot p = getParent(); [EOL]     if (p != null) { [EOL]         result = p.getDrawingSupplier(); [EOL]     } else { [EOL]         result = this.drawingSupplier; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 624,634
public void setDrawingSupplier(DrawingSupplier supplier) { [EOL]     this.drawingSupplier = supplier; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 648,651
public void setDrawingSupplier(DrawingSupplier supplier, boolean notify) { [EOL]     this.drawingSupplier = supplier; [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 668,673
public Image getBackgroundImage() { [EOL]     return this.backgroundImage; [EOL] } <line_num>: 683,685
public void setBackgroundImage(Image image) { [EOL]     this.backgroundImage = image; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 695,698
public int getBackgroundImageAlignment() { [EOL]     return this.backgroundImageAlignment; [EOL] } <line_num>: 708,710
public void setBackgroundImageAlignment(int alignment) { [EOL]     if (this.backgroundImageAlignment != alignment) { [EOL]         this.backgroundImageAlignment = alignment; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 721,726
public float getBackgroundImageAlpha() { [EOL]     return this.backgroundImageAlpha; [EOL] } <line_num>: 737,739
public void setBackgroundImageAlpha(float alpha) { [EOL]     if (alpha < 0.0f || alpha > 1.0f) [EOL]         throw new IllegalArgumentException("The 'alpha' value must be in the range 0.0f to 1.0f."); [EOL]     if (this.backgroundImageAlpha != alpha) { [EOL]         this.backgroundImageAlpha = alpha; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 752,760
public boolean isOutlineVisible() { [EOL]     return this.outlineVisible; [EOL] } <line_num>: 775,777
public void setOutlineVisible(boolean visible) { [EOL]     this.outlineVisible = visible; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 789,792
public Stroke getOutlineStroke() { [EOL]     return this.outlineStroke; [EOL] } <line_num>: 801,803
public void setOutlineStroke(Stroke stroke) { [EOL]     if (stroke == null) { [EOL]         if (this.outlineStroke != null) { [EOL]             this.outlineStroke = null; [EOL]             fireChangeEvent(); [EOL]         } [EOL]     } else { [EOL]         if (this.outlineStroke != null) { [EOL]             if (this.outlineStroke.equals(stroke)) { [EOL]                 return; [EOL]             } [EOL]         } [EOL]         this.outlineStroke = stroke; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 814,830
public Paint getOutlinePaint() { [EOL]     return this.outlinePaint; [EOL] } <line_num>: 839,841
public void setOutlinePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         if (this.outlinePaint != null) { [EOL]             this.outlinePaint = null; [EOL]             fireChangeEvent(); [EOL]         } [EOL]     } else { [EOL]         if (this.outlinePaint != null) { [EOL]             if (this.outlinePaint.equals(paint)) { [EOL]                 return; [EOL]             } [EOL]         } [EOL]         this.outlinePaint = paint; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 852,868
public float getForegroundAlpha() { [EOL]     return this.foregroundAlpha; [EOL] } <line_num>: 877,879
public void setForegroundAlpha(float alpha) { [EOL]     if (this.foregroundAlpha != alpha) { [EOL]         this.foregroundAlpha = alpha; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 889,894
public LegendItemCollection getLegendItems() { [EOL]     return null; [EOL] } <line_num>: 903,905
public boolean isNotify() { [EOL]     return this.notify; [EOL] } <line_num>: 917,919
public void setNotify(boolean notify) { [EOL]     this.notify = notify; [EOL]     if (notify) { [EOL]         notifyListeners(new PlotChangeEvent(this)); [EOL]     } [EOL] } <line_num>: 931,937
public void addChangeListener(PlotChangeListener listener) { [EOL]     this.listenerList.add(PlotChangeListener.class, listener); [EOL] } <line_num>: 946,948
public void removeChangeListener(PlotChangeListener listener) { [EOL]     this.listenerList.remove(PlotChangeListener.class, listener); [EOL] } <line_num>: 957,959
public void notifyListeners(PlotChangeEvent event) { [EOL]     if (!this.notify) { [EOL]         return; [EOL]     } [EOL]     Object[] listeners = this.listenerList.getListenerList(); [EOL]     for (int i = listeners.length - 2; i >= 0; i -= 2) { [EOL]         if (listeners[i] == PlotChangeListener.class) { [EOL]             ((PlotChangeListener) listeners[i + 1]).plotChanged(event); [EOL]         } [EOL]     } [EOL] } <line_num>: 966,978
protected void fireChangeEvent() { [EOL]     notifyListeners(new PlotChangeEvent(this)); [EOL] } <line_num>: 985,987
public abstract void draw(Graphics2D g2, Rectangle2D area, Point2D anchor, PlotState parentState, PlotRenderingInfo info); <line_num>: 1003,1007
public void drawBackground(Graphics2D g2, Rectangle2D area) { [EOL]     fillBackground(g2, area); [EOL]     drawBackgroundImage(g2, area); [EOL] } <line_num>: 1019,1024
protected void fillBackground(Graphics2D g2, Rectangle2D area) { [EOL]     fillBackground(g2, area, PlotOrientation.VERTICAL); [EOL] } <line_num>: 1036,1038
protected void fillBackground(Graphics2D g2, Rectangle2D area, PlotOrientation orientation) { [EOL]     if (orientation == null) { [EOL]         throw new IllegalArgumentException("Null 'orientation' argument."); [EOL]     } [EOL]     if (this.backgroundPaint == null) { [EOL]         return; [EOL]     } [EOL]     Paint p = this.backgroundPaint; [EOL]     if (p instanceof GradientPaint) { [EOL]         GradientPaint gp = (GradientPaint) p; [EOL]         if (orientation == PlotOrientation.VERTICAL) { [EOL]             p = new GradientPaint((float) area.getCenterX(), (float) area.getMaxY(), gp.getColor1(), (float) area.getCenterX(), (float) area.getMinY(), gp.getColor2()); [EOL]         } else if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             p = new GradientPaint((float) area.getMinX(), (float) area.getCenterY(), gp.getColor1(), (float) area.getMaxX(), (float) area.getCenterY(), gp.getColor2()); [EOL]         } [EOL]     } [EOL]     Composite originalComposite = g2.getComposite(); [EOL]     g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, this.backgroundAlpha)); [EOL]     g2.setPaint(p); [EOL]     g2.fill(area); [EOL]     g2.setComposite(originalComposite); [EOL] } <line_num>: 1052,1082
public void drawBackgroundImage(Graphics2D g2, Rectangle2D area) { [EOL]     if (this.backgroundImage == null) { [EOL]         return; [EOL]     } [EOL]     Composite savedComposite = g2.getComposite(); [EOL]     g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, this.backgroundImageAlpha)); [EOL]     Rectangle2D dest = new Rectangle2D.Double(0.0, 0.0, this.backgroundImage.getWidth(null), this.backgroundImage.getHeight(null)); [EOL]     Align.align(dest, area, this.backgroundImageAlignment); [EOL]     Shape savedClip = g2.getClip(); [EOL]     g2.clip(area); [EOL]     g2.drawImage(this.backgroundImage, (int) dest.getX(), (int) dest.getY(), (int) dest.getWidth() + 1, (int) dest.getHeight() + 1, null); [EOL]     g2.setClip(savedClip); [EOL]     g2.setComposite(savedComposite); [EOL] } <line_num>: 1095,1113
public void drawOutline(Graphics2D g2, Rectangle2D area) { [EOL]     if (!this.outlineVisible) { [EOL]         return; [EOL]     } [EOL]     if ((this.outlineStroke != null) && (this.outlinePaint != null)) { [EOL]         g2.setStroke(this.outlineStroke); [EOL]         g2.setPaint(this.outlinePaint); [EOL]         g2.draw(area); [EOL]     } [EOL] } <line_num>: 1124,1133
protected void drawNoDataMessage(Graphics2D g2, Rectangle2D area) { [EOL]     Shape savedClip = g2.getClip(); [EOL]     g2.clip(area); [EOL]     String message = this.noDataMessage; [EOL]     if (message != null) { [EOL]         g2.setFont(this.noDataMessageFont); [EOL]         g2.setPaint(this.noDataMessagePaint); [EOL]         TextBlock block = TextUtilities.createTextBlock(this.noDataMessage, this.noDataMessageFont, this.noDataMessagePaint, 0.9f * (float) area.getWidth(), new G2TextMeasurer(g2)); [EOL]         block.draw(g2, (float) area.getCenterX(), (float) area.getCenterY(), TextBlockAnchor.CENTER); [EOL]     } [EOL]     g2.setClip(savedClip); [EOL] } <line_num>: 1141,1156
protected void createAndAddEntity(Rectangle2D dataArea, PlotRenderingInfo plotState, String toolTip, String urlText) { [EOL]     if (plotState != null && plotState.getOwner() != null) { [EOL]         EntityCollection e = plotState.getOwner().getEntityCollection(); [EOL]         if (e != null) { [EOL]             e.add(new PlotEntity(dataArea, this, toolTip, urlText)); [EOL]         } [EOL]     } [EOL] } <line_num>: 1172,1180
public void handleClick(int x, int y, PlotRenderingInfo info) { [EOL] } <line_num>: 1192,1194
public void zoom(double percent) { [EOL] } <line_num>: 1202,1204
public void annotationChanged(AnnotationChangeEvent event) { [EOL]     fireChangeEvent(); [EOL] } <line_num>: 1214,1216
public void axisChanged(AxisChangeEvent event) { [EOL]     fireChangeEvent(); [EOL] } <line_num>: 1223,1225
public void datasetChanged(DatasetChangeEvent event) { [EOL]     PlotChangeEvent newEvent = new PlotChangeEvent(this); [EOL]     newEvent.setType(ChartChangeEventType.DATASET_UPDATED); [EOL]     notifyListeners(newEvent); [EOL] } <line_num>: 1235,1239
public void markerChanged(MarkerChangeEvent event) { [EOL]     fireChangeEvent(); [EOL] } <line_num>: 1249,1251
protected double getRectX(double x, double w1, double w2, RectangleEdge edge) { [EOL]     double result = x; [EOL]     if (edge == RectangleEdge.LEFT) { [EOL]         result = result + w1; [EOL]     } else if (edge == RectangleEdge.RIGHT) { [EOL]         result = result + w2; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1263,1275
protected double getRectY(double y, double h1, double h2, RectangleEdge edge) { [EOL]     double result = y; [EOL]     if (edge == RectangleEdge.TOP) { [EOL]         result = result + h1; [EOL]     } else if (edge == RectangleEdge.BOTTOM) { [EOL]         result = result + h2; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1287,1299
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof Plot)) { [EOL]         return false; [EOL]     } [EOL]     Plot that = (Plot) obj; [EOL]     if (!ObjectUtilities.equal(this.noDataMessage, that.noDataMessage)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.noDataMessageFont, that.noDataMessageFont)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.noDataMessagePaint, that.noDataMessagePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.insets, that.insets)) { [EOL]         return false; [EOL]     } [EOL]     if (this.outlineVisible != that.outlineVisible) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.outlineStroke, that.outlineStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.backgroundPaint, that.backgroundPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.backgroundImage, that.backgroundImage)) { [EOL]         return false; [EOL]     } [EOL]     if (this.backgroundImageAlignment != that.backgroundImageAlignment) { [EOL]         return false; [EOL]     } [EOL]     if (this.backgroundImageAlpha != that.backgroundImageAlpha) { [EOL]         return false; [EOL]     } [EOL]     if (this.foregroundAlpha != that.foregroundAlpha) { [EOL]         return false; [EOL]     } [EOL]     if (this.backgroundAlpha != that.backgroundAlpha) { [EOL]         return false; [EOL]     } [EOL]     if (!this.drawingSupplier.equals(that.drawingSupplier)) { [EOL]         return false; [EOL]     } [EOL]     if (this.notify != that.notify) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 1308,1366
public Object clone() throws CloneNotSupportedException { [EOL]     Plot clone = (Plot) super.clone(); [EOL]     if (this.datasetGroup != null) { [EOL]         clone.datasetGroup = (DatasetGroup) ObjectUtilities.clone(this.datasetGroup); [EOL]     } [EOL]     clone.drawingSupplier = (DrawingSupplier) ObjectUtilities.clone(this.drawingSupplier); [EOL]     clone.listenerList = new EventListenerList(); [EOL]     return clone; [EOL] } <line_num>: 1376,1390
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.noDataMessagePaint, stream); [EOL]     SerialUtilities.writeStroke(this.outlineStroke, stream); [EOL]     SerialUtilities.writePaint(this.outlinePaint, stream); [EOL]     SerialUtilities.writePaint(this.backgroundPaint, stream); [EOL] } <line_num>: 1399,1406
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.noDataMessagePaint = SerialUtilities.readPaint(stream); [EOL]     this.outlineStroke = SerialUtilities.readStroke(stream); [EOL]     this.outlinePaint = SerialUtilities.readPaint(stream); [EOL]     this.backgroundPaint = SerialUtilities.readPaint(stream); [EOL]     this.listenerList = new EventListenerList(); [EOL] } <line_num>: 1416,1427
public static RectangleEdge resolveDomainAxisLocation(AxisLocation location, PlotOrientation orientation) { [EOL]     if (location == null) { [EOL]         throw new IllegalArgumentException("Null 'location' argument."); [EOL]     } [EOL]     if (orientation == null) { [EOL]         throw new IllegalArgumentException("Null 'orientation' argument."); [EOL]     } [EOL]     RectangleEdge result = null; [EOL]     if (location == AxisLocation.TOP_OR_RIGHT) { [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             result = RectangleEdge.RIGHT; [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             result = RectangleEdge.TOP; [EOL]         } [EOL]     } else if (location == AxisLocation.TOP_OR_LEFT) { [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             result = RectangleEdge.LEFT; [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             result = RectangleEdge.TOP; [EOL]         } [EOL]     } else if (location == AxisLocation.BOTTOM_OR_RIGHT) { [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             result = RectangleEdge.RIGHT; [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             result = RectangleEdge.BOTTOM; [EOL]         } [EOL]     } else if (location == AxisLocation.BOTTOM_OR_LEFT) { [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             result = RectangleEdge.LEFT; [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             result = RectangleEdge.BOTTOM; [EOL]         } [EOL]     } [EOL]     if (result == null) { [EOL]         throw new IllegalStateException("resolveDomainAxisLocation()"); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1437,1487
public static RectangleEdge resolveRangeAxisLocation(AxisLocation location, PlotOrientation orientation) { [EOL]     if (location == null) { [EOL]         throw new IllegalArgumentException("Null 'location' argument."); [EOL]     } [EOL]     if (orientation == null) { [EOL]         throw new IllegalArgumentException("Null 'orientation' argument."); [EOL]     } [EOL]     RectangleEdge result = null; [EOL]     if (location == AxisLocation.TOP_OR_RIGHT) { [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             result = RectangleEdge.TOP; [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             result = RectangleEdge.RIGHT; [EOL]         } [EOL]     } else if (location == AxisLocation.TOP_OR_LEFT) { [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             result = RectangleEdge.TOP; [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             result = RectangleEdge.LEFT; [EOL]         } [EOL]     } else if (location == AxisLocation.BOTTOM_OR_RIGHT) { [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             result = RectangleEdge.BOTTOM; [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             result = RectangleEdge.RIGHT; [EOL]         } [EOL]     } else if (location == AxisLocation.BOTTOM_OR_LEFT) { [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             result = RectangleEdge.BOTTOM; [EOL]         } else if (orientation == PlotOrientation.VERTICAL) { [EOL]             result = RectangleEdge.LEFT; [EOL]         } [EOL]     } [EOL]     if (result == null) { [EOL]         throw new IllegalStateException("resolveRangeAxisLocation()"); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1497,1548
