public RingPlot() { [EOL]     this(null); [EOL] } <line_num>: 122,124
public RingPlot(PieDataset dataset) { [EOL]     super(dataset); [EOL]     this.separatorsVisible = true; [EOL]     this.separatorStroke = new BasicStroke(0.5f); [EOL]     this.separatorPaint = Color.gray; [EOL]     this.innerSeparatorExtension = 0.20; [EOL]     this.outerSeparatorExtension = 0.20; [EOL]     this.sectionDepth = 0.20; [EOL] } <line_num>: 131,139
public boolean getSeparatorsVisible() { [EOL]     return this.separatorsVisible; [EOL] } <line_num>: 149,151
public void setSeparatorsVisible(boolean visible) { [EOL]     this.separatorsVisible = visible; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 162,165
public Stroke getSeparatorStroke() { [EOL]     return this.separatorStroke; [EOL] } <line_num>: 174,176
public void setSeparatorStroke(Stroke stroke) { [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' argument."); [EOL]     } [EOL]     this.separatorStroke = stroke; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 186,192
public Paint getSeparatorPaint() { [EOL]     return this.separatorPaint; [EOL] } <line_num>: 201,203
public void setSeparatorPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.separatorPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 213,219
public double getInnerSeparatorExtension() { [EOL]     return this.innerSeparatorExtension; [EOL] } <line_num>: 230,232
public void setInnerSeparatorExtension(double percent) { [EOL]     this.innerSeparatorExtension = percent; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 245,248
public double getOuterSeparatorExtension() { [EOL]     return this.outerSeparatorExtension; [EOL] } <line_num>: 259,261
public void setOuterSeparatorExtension(double percent) { [EOL]     this.outerSeparatorExtension = percent; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 273,276
public double getSectionDepth() { [EOL]     return this.sectionDepth; [EOL] } <line_num>: 287,289
public void setSectionDepth(double sectionDepth) { [EOL]     this.sectionDepth = sectionDepth; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 300,303
public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea, PiePlot plot, Integer index, PlotRenderingInfo info) { [EOL]     PiePlotState state = super.initialise(g2, plotArea, plot, index, info); [EOL]     state.setPassesRequired(3); [EOL]     return state; [EOL] } <line_num>: 320,327
protected void drawItem(Graphics2D g2, int section, Rectangle2D dataArea, PiePlotState state, int currentPass) { [EOL]     PieDataset dataset = getDataset(); [EOL]     Number n = dataset.getValue(section); [EOL]     if (n == null) { [EOL]         return; [EOL]     } [EOL]     double value = n.doubleValue(); [EOL]     double angle1 = 0.0; [EOL]     double angle2 = 0.0; [EOL]     Rotation direction = getDirection(); [EOL]     if (direction == Rotation.CLOCKWISE) { [EOL]         angle1 = state.getLatestAngle(); [EOL]         angle2 = angle1 - value / state.getTotal() * 360.0; [EOL]     } else if (direction == Rotation.ANTICLOCKWISE) { [EOL]         angle1 = state.getLatestAngle(); [EOL]         angle2 = angle1 + value / state.getTotal() * 360.0; [EOL]     } else { [EOL]         throw new IllegalStateException("Rotation type not recognised."); [EOL]     } [EOL]     double angle = (angle2 - angle1); [EOL]     if (Math.abs(angle) > getMinimumArcAngleToDraw()) { [EOL]         Comparable key = getSectionKey(section); [EOL]         double ep = 0.0; [EOL]         double mep = getMaximumExplodePercent(); [EOL]         if (mep > 0.0) { [EOL]             ep = getExplodePercent(key) / mep; [EOL]         } [EOL]         Rectangle2D arcBounds = getArcBounds(state.getPieArea(), state.getExplodedPieArea(), angle1, angle, ep); [EOL]         Arc2D.Double arc = new Arc2D.Double(arcBounds, angle1, angle, Arc2D.OPEN); [EOL]         double depth = this.sectionDepth / 2.0; [EOL]         RectangleInsets s = new RectangleInsets(UnitType.RELATIVE, depth, depth, depth, depth); [EOL]         Rectangle2D innerArcBounds = new Rectangle2D.Double(); [EOL]         innerArcBounds.setRect(arcBounds); [EOL]         s.trim(innerArcBounds); [EOL]         Arc2D.Double arc2 = new Arc2D.Double(innerArcBounds, angle1 + angle, -angle, Arc2D.OPEN); [EOL]         GeneralPath path = new GeneralPath(); [EOL]         path.moveTo((float) arc.getStartPoint().getX(), (float) arc.getStartPoint().getY()); [EOL]         path.append(arc.getPathIterator(null), false); [EOL]         path.append(arc2.getPathIterator(null), true); [EOL]         path.closePath(); [EOL]         Line2D separator = new Line2D.Double(arc2.getEndPoint(), arc.getStartPoint()); [EOL]         if (currentPass == 0) { [EOL]             Paint shadowPaint = getShadowPaint(); [EOL]             double shadowXOffset = getShadowXOffset(); [EOL]             double shadowYOffset = getShadowYOffset(); [EOL]             if (shadowPaint != null) { [EOL]                 Shape shadowArc = ShapeUtilities.createTranslatedShape(path, (float) shadowXOffset, (float) shadowYOffset); [EOL]                 g2.setPaint(shadowPaint); [EOL]                 g2.fill(shadowArc); [EOL]             } [EOL]         } else if (currentPass == 1) { [EOL]             Paint paint = lookupSectionPaint(key, false); [EOL]             g2.setPaint(paint); [EOL]             g2.fill(path); [EOL]             Paint outlinePaint = lookupSectionOutlinePaint(key, false); [EOL]             Stroke outlineStroke = lookupSectionOutlineStroke(key, false); [EOL]             if (outlinePaint != null && outlineStroke != null) { [EOL]                 g2.setPaint(outlinePaint); [EOL]                 g2.setStroke(outlineStroke); [EOL]                 g2.draw(path); [EOL]             } [EOL]             if (state.getInfo() != null) { [EOL]                 EntityCollection entities = state.getEntityCollection(); [EOL]                 if (entities != null) { [EOL]                     String tip = null; [EOL]                     PieToolTipGenerator toolTipGenerator = getToolTipGenerator(); [EOL]                     if (toolTipGenerator != null) { [EOL]                         tip = toolTipGenerator.generateToolTip(dataset, key); [EOL]                     } [EOL]                     String url = null; [EOL]                     PieURLGenerator urlGenerator = getURLGenerator(); [EOL]                     if (urlGenerator != null) { [EOL]                         url = urlGenerator.generateURL(dataset, key, getPieIndex()); [EOL]                     } [EOL]                     PieSectionEntity entity = new PieSectionEntity(path, dataset, getPieIndex(), section, key, tip, url); [EOL]                     entities.add(entity); [EOL]                 } [EOL]             } [EOL]         } else if (currentPass == 2) { [EOL]             if (this.separatorsVisible) { [EOL]                 Line2D extendedSeparator = extendLine(separator, this.innerSeparatorExtension, this.outerSeparatorExtension); [EOL]                 g2.setStroke(this.separatorStroke); [EOL]                 g2.setPaint(this.separatorPaint); [EOL]                 g2.draw(extendedSeparator); [EOL]             } [EOL]         } [EOL]     } [EOL]     state.setLatestAngle(angle2); [EOL] } <line_num>: 338,459
protected double getLabelLinkDepth() { [EOL]     return Math.min(super.getLabelLinkDepth(), getSectionDepth() / 2); [EOL] } <line_num>: 467,469
public boolean equals(Object obj) { [EOL]     if (this == obj) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof RingPlot)) { [EOL]         return false; [EOL]     } [EOL]     RingPlot that = (RingPlot) obj; [EOL]     if (this.separatorsVisible != that.separatorsVisible) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.separatorStroke, that.separatorStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.separatorPaint, that.separatorPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (this.innerSeparatorExtension != that.innerSeparatorExtension) { [EOL]         return false; [EOL]     } [EOL]     if (this.outerSeparatorExtension != that.outerSeparatorExtension) { [EOL]         return false; [EOL]     } [EOL]     if (this.sectionDepth != that.sectionDepth) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 478,506
private Line2D extendLine(Line2D line, double startPercent, double endPercent) { [EOL]     if (line == null) { [EOL]         throw new IllegalArgumentException("Null 'line' argument."); [EOL]     } [EOL]     double x1 = line.getX1(); [EOL]     double x2 = line.getX2(); [EOL]     double deltaX = x2 - x1; [EOL]     double y1 = line.getY1(); [EOL]     double y2 = line.getY2(); [EOL]     double deltaY = y2 - y1; [EOL]     x1 = x1 - (startPercent * deltaX); [EOL]     y1 = y1 - (startPercent * deltaY); [EOL]     x2 = x2 + (endPercent * deltaX); [EOL]     y2 = y2 + (endPercent * deltaY); [EOL]     return new Line2D.Double(x1, y1, x2, y2); [EOL] } <line_num>: 518,534
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writeStroke(this.separatorStroke, stream); [EOL]     SerialUtilities.writePaint(this.separatorPaint, stream); [EOL] } <line_num>: 543,547
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.separatorStroke = SerialUtilities.readStroke(stream); [EOL]     this.separatorPaint = SerialUtilities.readPaint(stream); [EOL] } <line_num>: 557,562
