public StandardDialScale() { [EOL]     this(0.0, 100.0, 175, -170, 10.0, 4); [EOL] } <line_num>: 185,187
public StandardDialScale(double lowerBound, double upperBound, double startAngle, double extent, double majorTickIncrement, int minorTickCount) { [EOL]     this.startAngle = startAngle; [EOL]     this.extent = extent; [EOL]     this.lowerBound = lowerBound; [EOL]     this.upperBound = upperBound; [EOL]     this.tickRadius = 0.70; [EOL]     this.tickLabelsVisible = true; [EOL]     this.tickLabelFormatter = new DecimalFormat("0.0"); [EOL]     this.firstTickLabelVisible = true; [EOL]     this.tickLabelFont = new Font("Tahoma", Font.BOLD, 16); [EOL]     this.tickLabelPaint = Color.blue; [EOL]     this.tickLabelOffset = 0.10; [EOL]     this.majorTickIncrement = majorTickIncrement; [EOL]     this.majorTickLength = 0.04; [EOL]     this.majorTickPaint = Color.black; [EOL]     this.majorTickStroke = new BasicStroke(3.0f); [EOL]     this.minorTickCount = minorTickCount; [EOL]     this.minorTickLength = 0.02; [EOL]     this.minorTickPaint = Color.black; [EOL]     this.minorTickStroke = new BasicStroke(1.0f); [EOL] } <line_num>: 201,223
public double getLowerBound() { [EOL]     return this.lowerBound; [EOL] } <line_num>: 234,236
public void setLowerBound(double lower) { [EOL]     this.lowerBound = lower; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 248,251
public double getUpperBound() { [EOL]     return this.upperBound; [EOL] } <line_num>: 262,264
public void setUpperBound(double upper) { [EOL]     this.upperBound = upper; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 276,279
public double getStartAngle() { [EOL]     return this.startAngle; [EOL] } <line_num>: 289,291
public void setStartAngle(double angle) { [EOL]     this.startAngle = angle; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 301,304
public double getExtent() { [EOL]     return this.extent; [EOL] } <line_num>: 313,315
public void setExtent(double extent) { [EOL]     this.extent = extent; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 325,328
public double getTickRadius() { [EOL]     return this.tickRadius; [EOL] } <line_num>: 338,340
public void setTickRadius(double radius) { [EOL]     if (radius <= 0.0) { [EOL]         throw new IllegalArgumentException("The 'radius' must be positive."); [EOL]     } [EOL]     this.tickRadius = radius; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 350,357
public double getMajorTickIncrement() { [EOL]     return this.majorTickIncrement; [EOL] } <line_num>: 366,368
public void setMajorTickIncrement(double increment) { [EOL]     if (increment <= 0.0) { [EOL]         throw new IllegalArgumentException("The 'increment' must be positive."); [EOL]     } [EOL]     this.majorTickIncrement = increment; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 378,385
public double getMajorTickLength() { [EOL]     return this.majorTickLength; [EOL] } <line_num>: 396,398
public void setMajorTickLength(double length) { [EOL]     if (length < 0.0) { [EOL]         throw new IllegalArgumentException("Negative 'length' argument."); [EOL]     } [EOL]     this.majorTickLength = length; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 408,414
public Paint getMajorTickPaint() { [EOL]     return this.majorTickPaint; [EOL] } <line_num>: 423,425
public void setMajorTickPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.majorTickPaint = paint; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 435,441
public Stroke getMajorTickStroke() { [EOL]     return this.majorTickStroke; [EOL] } <line_num>: 450,452
public void setMajorTickStroke(Stroke stroke) { [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' argument."); [EOL]     } [EOL]     this.majorTickStroke = stroke; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 462,468
public int getMinorTickCount() { [EOL]     return this.minorTickCount; [EOL] } <line_num>: 477,479
public void setMinorTickCount(int count) { [EOL]     if (count < 0) { [EOL]         throw new IllegalArgumentException("The 'count' cannot be negative."); [EOL]     } [EOL]     this.minorTickCount = count; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 489,496
public double getMinorTickLength() { [EOL]     return this.minorTickLength; [EOL] } <line_num>: 507,509
public void setMinorTickLength(double length) { [EOL]     if (length < 0.0) { [EOL]         throw new IllegalArgumentException("Negative 'length' argument."); [EOL]     } [EOL]     this.minorTickLength = length; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 519,525
public Paint getMinorTickPaint() { [EOL]     return this.minorTickPaint; [EOL] } <line_num>: 534,536
public void setMinorTickPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.minorTickPaint = paint; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 546,552
public Stroke getMinorTickStroke() { [EOL]     return this.minorTickStroke; [EOL] } <line_num>: 563,565
public void setMinorTickStroke(Stroke stroke) { [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' argument."); [EOL]     } [EOL]     this.minorTickStroke = stroke; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 577,583
public double getTickLabelOffset() { [EOL]     return this.tickLabelOffset; [EOL] } <line_num>: 592,594
public void setTickLabelOffset(double offset) { [EOL]     this.tickLabelOffset = offset; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 604,607
public Font getTickLabelFont() { [EOL]     return this.tickLabelFont; [EOL] } <line_num>: 616,618
public void setTickLabelFont(Font font) { [EOL]     if (font == null) { [EOL]         throw new IllegalArgumentException("Null 'font' argument."); [EOL]     } [EOL]     this.tickLabelFont = font; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 628,634
public Paint getTickLabelPaint() { [EOL]     return this.tickLabelPaint; [EOL] } <line_num>: 643,645
public void setTickLabelPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.tickLabelPaint = paint; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 653,659
public boolean getTickLabelsVisible() { [EOL]     return this.tickLabelsVisible; [EOL] } <line_num>: 669,671
public void setTickLabelsVisible(boolean visible) { [EOL]     this.tickLabelsVisible = visible; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 682,685
public NumberFormat getTickLabelFormatter() { [EOL]     return this.tickLabelFormatter; [EOL] } <line_num>: 695,697
public void setTickLabelFormatter(NumberFormat formatter) { [EOL]     if (formatter == null) { [EOL]         throw new IllegalArgumentException("Null 'formatter' argument."); [EOL]     } [EOL]     this.tickLabelFormatter = formatter; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 708,714
public boolean getFirstTickLabelVisible() { [EOL]     return this.firstTickLabelVisible; [EOL] } <line_num>: 724,726
public void setFirstTickLabelVisible(boolean visible) { [EOL]     this.firstTickLabelVisible = visible; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 737,740
public boolean isClippedToWindow() { [EOL]     return true; [EOL] } <line_num>: 748,750
public void draw(Graphics2D g2, DialPlot plot, Rectangle2D frame, Rectangle2D view) { [EOL]     Rectangle2D arcRect = DialPlot.rectangleByRadius(frame, this.tickRadius, this.tickRadius); [EOL]     Rectangle2D arcRectMajor = DialPlot.rectangleByRadius(frame, this.tickRadius - this.majorTickLength, this.tickRadius - this.majorTickLength); [EOL]     Rectangle2D arcRectMinor = arcRect; [EOL]     if (this.minorTickCount > 0 && this.minorTickLength > 0.0) { [EOL]         arcRectMinor = DialPlot.rectangleByRadius(frame, this.tickRadius - this.minorTickLength, this.tickRadius - this.minorTickLength); [EOL]     } [EOL]     Rectangle2D arcRectForLabels = DialPlot.rectangleByRadius(frame, this.tickRadius - this.tickLabelOffset, this.tickRadius - this.tickLabelOffset); [EOL]     boolean firstLabel = true; [EOL]     Arc2D arc = new Arc2D.Double(); [EOL]     Line2D workingLine = new Line2D.Double(); [EOL]     for (double v = this.lowerBound; v <= this.upperBound; v += this.majorTickIncrement) { [EOL]         arc.setArc(arcRect, this.startAngle, valueToAngle(v) - this.startAngle, Arc2D.OPEN); [EOL]         Point2D pt0 = arc.getEndPoint(); [EOL]         arc.setArc(arcRectMajor, this.startAngle, valueToAngle(v) - this.startAngle, Arc2D.OPEN); [EOL]         Point2D pt1 = arc.getEndPoint(); [EOL]         g2.setPaint(this.majorTickPaint); [EOL]         g2.setStroke(this.majorTickStroke); [EOL]         workingLine.setLine(pt0, pt1); [EOL]         g2.draw(workingLine); [EOL]         arc.setArc(arcRectForLabels, this.startAngle, valueToAngle(v) - this.startAngle, Arc2D.OPEN); [EOL]         Point2D pt2 = arc.getEndPoint(); [EOL]         if (this.tickLabelsVisible) { [EOL]             if (!firstLabel || this.firstTickLabelVisible) { [EOL]                 g2.setFont(this.tickLabelFont); [EOL]                 g2.setPaint(this.tickLabelPaint); [EOL]                 TextUtilities.drawAlignedString(this.tickLabelFormatter.format(v), g2, (float) pt2.getX(), (float) pt2.getY(), TextAnchor.CENTER); [EOL]             } [EOL]         } [EOL]         firstLabel = false; [EOL]         if (this.minorTickCount > 0 && this.minorTickLength > 0.0) { [EOL]             double minorTickIncrement = this.majorTickIncrement / (this.minorTickCount + 1); [EOL]             for (int i = 0; i < this.minorTickCount; i++) { [EOL]                 double vv = v + ((i + 1) * minorTickIncrement); [EOL]                 if (vv >= this.upperBound) { [EOL]                     break; [EOL]                 } [EOL]                 double angle = valueToAngle(vv); [EOL]                 arc.setArc(arcRect, this.startAngle, angle - this.startAngle, Arc2D.OPEN); [EOL]                 pt0 = arc.getEndPoint(); [EOL]                 arc.setArc(arcRectMinor, this.startAngle, angle - this.startAngle, Arc2D.OPEN); [EOL]                 Point2D pt3 = arc.getEndPoint(); [EOL]                 g2.setStroke(this.minorTickStroke); [EOL]                 g2.setPaint(this.minorTickPaint); [EOL]                 workingLine.setLine(pt0, pt3); [EOL]                 g2.draw(workingLine); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 762,837
public double valueToAngle(double value) { [EOL]     double range = this.upperBound - this.lowerBound; [EOL]     double unit = this.extent / range; [EOL]     return this.startAngle + unit * (value - this.lowerBound); [EOL] } <line_num>: 849,853
public double angleToValue(double angle) { [EOL]     return Double.NaN; [EOL] } <line_num>: 864,866
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof StandardDialScale)) { [EOL]         return false; [EOL]     } [EOL]     StandardDialScale that = (StandardDialScale) obj; [EOL]     if (this.lowerBound != that.lowerBound) { [EOL]         return false; [EOL]     } [EOL]     if (this.upperBound != that.upperBound) { [EOL]         return false; [EOL]     } [EOL]     if (this.startAngle != that.startAngle) { [EOL]         return false; [EOL]     } [EOL]     if (this.extent != that.extent) { [EOL]         return false; [EOL]     } [EOL]     if (this.tickRadius != that.tickRadius) { [EOL]         return false; [EOL]     } [EOL]     if (this.majorTickIncrement != that.majorTickIncrement) { [EOL]         return false; [EOL]     } [EOL]     if (this.majorTickLength != that.majorTickLength) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.majorTickPaint, that.majorTickPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.majorTickStroke.equals(that.majorTickStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (this.minorTickCount != that.minorTickCount) { [EOL]         return false; [EOL]     } [EOL]     if (this.minorTickLength != that.minorTickLength) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.minorTickPaint, that.minorTickPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.minorTickStroke.equals(that.minorTickStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (this.tickLabelsVisible != that.tickLabelsVisible) { [EOL]         return false; [EOL]     } [EOL]     if (this.tickLabelOffset != that.tickLabelOffset) { [EOL]         return false; [EOL]     } [EOL]     if (!this.tickLabelFont.equals(that.tickLabelFont)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.tickLabelPaint, that.tickLabelPaint)) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 876,936
public int hashCode() { [EOL]     int result = 193; [EOL]     long temp = Double.doubleToLongBits(this.lowerBound); [EOL]     result = 37 * result + (int) (temp ^ (temp >>> 32)); [EOL]     temp = Double.doubleToLongBits(this.upperBound); [EOL]     result = 37 * result + (int) (temp ^ (temp >>> 32)); [EOL]     temp = Double.doubleToLongBits(this.startAngle); [EOL]     result = 37 * result + (int) (temp ^ (temp >>> 32)); [EOL]     temp = Double.doubleToLongBits(this.extent); [EOL]     result = 37 * result + (int) (temp ^ (temp >>> 32)); [EOL]     temp = Double.doubleToLongBits(this.tickRadius); [EOL]     result = 37 * result + (int) (temp ^ (temp >>> 32)); [EOL]     return result; [EOL] } <line_num>: 943,974
public Object clone() throws CloneNotSupportedException { [EOL]     return super.clone(); [EOL] } <line_num>: 983,985
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.majorTickPaint, stream); [EOL]     SerialUtilities.writeStroke(this.majorTickStroke, stream); [EOL]     SerialUtilities.writePaint(this.minorTickPaint, stream); [EOL]     SerialUtilities.writeStroke(this.minorTickStroke, stream); [EOL]     SerialUtilities.writePaint(this.tickLabelPaint, stream); [EOL] } <line_num>: 994,1001
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.majorTickPaint = SerialUtilities.readPaint(stream); [EOL]     this.majorTickStroke = SerialUtilities.readStroke(stream); [EOL]     this.minorTickPaint = SerialUtilities.readPaint(stream); [EOL]     this.minorTickStroke = SerialUtilities.readStroke(stream); [EOL]     this.tickLabelPaint = SerialUtilities.readPaint(stream); [EOL] } <line_num>: 1011,1019
