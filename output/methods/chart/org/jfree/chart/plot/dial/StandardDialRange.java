public StandardDialRange() { [EOL]     this(0.0, 100.0, Color.white); [EOL] } <line_num>: 104,106
public StandardDialRange(double lower, double upper, Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.scaleIndex = 0; [EOL]     this.lowerBound = lower; [EOL]     this.upperBound = upper; [EOL]     this.innerRadius = 0.48; [EOL]     this.outerRadius = 0.52; [EOL]     this.paint = paint; [EOL] } <line_num>: 115,125
public int getScaleIndex() { [EOL]     return this.scaleIndex; [EOL] } <line_num>: 134,136
public void setScaleIndex(int index) { [EOL]     this.scaleIndex = index; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 146,149
public double getLowerBound() { [EOL]     return this.lowerBound; [EOL] } <line_num>: 158,160
public void setLowerBound(double bound) { [EOL]     if (bound >= this.upperBound) { [EOL]         throw new IllegalArgumentException("Lower bound must be less than upper bound."); [EOL]     } [EOL]     this.lowerBound = bound; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 170,177
public double getUpperBound() { [EOL]     return this.upperBound; [EOL] } <line_num>: 186,188
public void setUpperBound(double bound) { [EOL]     if (bound <= this.lowerBound) { [EOL]         throw new IllegalArgumentException("Lower bound must be less than upper bound."); [EOL]     } [EOL]     this.upperBound = bound; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 198,205
public void setBounds(double lower, double upper) { [EOL]     if (lower >= upper) { [EOL]         throw new IllegalArgumentException("Lower must be less than upper."); [EOL]     } [EOL]     this.lowerBound = lower; [EOL]     this.upperBound = upper; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 214,222
public Paint getPaint() { [EOL]     return this.paint; [EOL] } <line_num>: 231,233
public void setPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.paint = paint; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 243,249
public double getInnerRadius() { [EOL]     return this.innerRadius; [EOL] } <line_num>: 258,260
public void setInnerRadius(double radius) { [EOL]     this.innerRadius = radius; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 270,273
public double getOuterRadius() { [EOL]     return this.outerRadius; [EOL] } <line_num>: 282,284
public void setOuterRadius(double radius) { [EOL]     this.outerRadius = radius; [EOL]     notifyListeners(new DialLayerChangeEvent(this)); [EOL] } <line_num>: 294,297
public boolean isClippedToWindow() { [EOL]     return true; [EOL] } <line_num>: 305,307
public void draw(Graphics2D g2, DialPlot plot, Rectangle2D frame, Rectangle2D view) { [EOL]     Rectangle2D arcRectInner = DialPlot.rectangleByRadius(frame, this.innerRadius, this.innerRadius); [EOL]     Rectangle2D arcRectOuter = DialPlot.rectangleByRadius(frame, this.outerRadius, this.outerRadius); [EOL]     DialScale scale = plot.getScale(this.scaleIndex); [EOL]     if (scale == null) { [EOL]         throw new RuntimeException("No scale for scaleIndex = " + this.scaleIndex); [EOL]     } [EOL]     double angleMin = scale.valueToAngle(this.lowerBound); [EOL]     double angleMax = scale.valueToAngle(this.upperBound); [EOL]     Arc2D arcInner = new Arc2D.Double(arcRectInner, angleMin, angleMax - angleMin, Arc2D.OPEN); [EOL]     Arc2D arcOuter = new Arc2D.Double(arcRectOuter, angleMax, angleMin - angleMax, Arc2D.OPEN); [EOL]     g2.setPaint(this.paint); [EOL]     g2.setStroke(new BasicStroke(2.0f)); [EOL]     g2.draw(arcInner); [EOL]     g2.draw(arcOuter); [EOL] } <line_num>: 317,342
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof StandardDialRange)) { [EOL]         return false; [EOL]     } [EOL]     StandardDialRange that = (StandardDialRange) obj; [EOL]     if (this.scaleIndex != that.scaleIndex) { [EOL]         return false; [EOL]     } [EOL]     if (this.lowerBound != that.lowerBound) { [EOL]         return false; [EOL]     } [EOL]     if (this.upperBound != that.upperBound) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.paint, that.paint)) { [EOL]         return false; [EOL]     } [EOL]     if (this.innerRadius != that.innerRadius) { [EOL]         return false; [EOL]     } [EOL]     if (this.outerRadius != that.outerRadius) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 351,378
public int hashCode() { [EOL]     int result = 193; [EOL]     long temp = Double.doubleToLongBits(this.lowerBound); [EOL]     result = 37 * result + (int) (temp ^ (temp >>> 32)); [EOL]     temp = Double.doubleToLongBits(this.upperBound); [EOL]     result = 37 * result + (int) (temp ^ (temp >>> 32)); [EOL]     temp = Double.doubleToLongBits(this.innerRadius); [EOL]     result = 37 * result + (int) (temp ^ (temp >>> 32)); [EOL]     temp = Double.doubleToLongBits(this.outerRadius); [EOL]     result = 37 * result + (int) (temp ^ (temp >>> 32)); [EOL]     result = 37 * result + HashUtilities.hashCodeForPaint(this.paint); [EOL]     return result; [EOL] } <line_num>: 385,397
public Object clone() throws CloneNotSupportedException { [EOL]     return super.clone(); [EOL] } <line_num>: 407,409
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.paint, stream); [EOL] } <line_num>: 418,421
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.paint = SerialUtilities.readPaint(stream); [EOL] } <line_num>: 431,435
