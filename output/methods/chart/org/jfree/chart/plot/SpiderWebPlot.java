public SpiderWebPlot() { [EOL]     this(null); [EOL] } <line_num>: 268,270
public SpiderWebPlot(CategoryDataset dataset) { [EOL]     this(dataset, TableOrder.BY_ROW); [EOL] } <line_num>: 278,280
public SpiderWebPlot(CategoryDataset dataset, TableOrder extract) { [EOL]     super(); [EOL]     if (extract == null) { [EOL]         throw new IllegalArgumentException("Null 'extract' argument."); [EOL]     } [EOL]     this.dataset = dataset; [EOL]     if (dataset != null) { [EOL]         dataset.addChangeListener(this); [EOL]     } [EOL]     this.dataExtractOrder = extract; [EOL]     this.headPercent = DEFAULT_HEAD; [EOL]     this.axisLabelGap = DEFAULT_AXIS_LABEL_GAP; [EOL]     this.axisLinePaint = Color.black; [EOL]     this.axisLineStroke = new BasicStroke(1.0f); [EOL]     this.interiorGap = DEFAULT_INTERIOR_GAP; [EOL]     this.startAngle = DEFAULT_START_ANGLE; [EOL]     this.direction = Rotation.CLOCKWISE; [EOL]     this.maxValue = DEFAULT_MAX_VALUE; [EOL]     this.seriesPaint = null; [EOL]     this.seriesPaintList = new PaintList(); [EOL]     this.baseSeriesPaint = null; [EOL]     this.seriesOutlinePaint = null; [EOL]     this.seriesOutlinePaintList = new PaintList(); [EOL]     this.baseSeriesOutlinePaint = DEFAULT_OUTLINE_PAINT; [EOL]     this.seriesOutlineStroke = null; [EOL]     this.seriesOutlineStrokeList = new StrokeList(); [EOL]     this.baseSeriesOutlineStroke = DEFAULT_OUTLINE_STROKE; [EOL]     this.labelFont = DEFAULT_LABEL_FONT; [EOL]     this.labelPaint = DEFAULT_LABEL_PAINT; [EOL]     this.labelGenerator = new StandardCategoryItemLabelGenerator(); [EOL]     this.legendItemShape = DEFAULT_LEGEND_ITEM_CIRCLE; [EOL] } <line_num>: 289,327
public String getPlotType() { [EOL]     return ("Spider Web Plot"); [EOL] } <line_num>: 334,337
public CategoryDataset getDataset() { [EOL]     return this.dataset; [EOL] } <line_num>: 346,348
public void setDataset(CategoryDataset dataset) { [EOL]     if (this.dataset != null) { [EOL]         this.dataset.removeChangeListener(this); [EOL]     } [EOL]     this.dataset = dataset; [EOL]     if (dataset != null) { [EOL]         setDatasetGroup(dataset.getGroup()); [EOL]         dataset.addChangeListener(this); [EOL]     } [EOL]     datasetChanged(new DatasetChangeEvent(this, dataset, new DatasetChangeInfo())); [EOL] } <line_num>: 358,376
public boolean isWebFilled() { [EOL]     return this.webFilled; [EOL] } <line_num>: 385,387
public void setWebFilled(boolean flag) { [EOL]     this.webFilled = flag; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 397,400
public TableOrder getDataExtractOrder() { [EOL]     return this.dataExtractOrder; [EOL] } <line_num>: 409,411
public void setDataExtractOrder(TableOrder order) { [EOL]     if (order == null) { [EOL]         throw new IllegalArgumentException("Null 'order' argument"); [EOL]     } [EOL]     this.dataExtractOrder = order; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 424,430
public double getHeadPercent() { [EOL]     return this.headPercent; [EOL] } <line_num>: 439,441
public void setHeadPercent(double percent) { [EOL]     this.headPercent = percent; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 451,454
public double getStartAngle() { [EOL]     return this.startAngle; [EOL] } <line_num>: 466,468
public void setStartAngle(double angle) { [EOL]     this.startAngle = angle; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 482,485
public double getMaxValue() { [EOL]     return this.maxValue; [EOL] } <line_num>: 494,496
public void setMaxValue(double value) { [EOL]     this.maxValue = value; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 506,509
public Rotation getDirection() { [EOL]     return this.direction; [EOL] } <line_num>: 519,521
public void setDirection(Rotation direction) { [EOL]     if (direction == null) { [EOL]         throw new IllegalArgumentException("Null 'direction' argument."); [EOL]     } [EOL]     this.direction = direction; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 531,537
public double getInteriorGap() { [EOL]     return this.interiorGap; [EOL] } <line_num>: 547,549
public void setInteriorGap(double percent) { [EOL]     if ((percent < 0.0) || (percent > MAX_INTERIOR_GAP)) { [EOL]         throw new IllegalArgumentException("Percentage outside valid range."); [EOL]     } [EOL]     if (this.interiorGap != percent) { [EOL]         this.interiorGap = percent; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 560,569
public double getAxisLabelGap() { [EOL]     return this.axisLabelGap; [EOL] } <line_num>: 578,580
public void setAxisLabelGap(double gap) { [EOL]     this.axisLabelGap = gap; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 590,593
public Paint getAxisLinePaint() { [EOL]     return this.axisLinePaint; [EOL] } <line_num>: 604,606
public void setAxisLinePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.axisLinePaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 617,623
public Stroke getAxisLineStroke() { [EOL]     return this.axisLineStroke; [EOL] } <line_num>: 634,636
public void setAxisLineStroke(Stroke stroke) { [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' argument."); [EOL]     } [EOL]     this.axisLineStroke = stroke; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 647,653
public Paint getSeriesPaint() { [EOL]     return this.seriesPaint; [EOL] } <line_num>: 664,666
public void setSeriesPaint(Paint paint) { [EOL]     this.seriesPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 677,680
public Paint getSeriesPaint(int series) { [EOL]     if (this.seriesPaint != null) { [EOL]         return this.seriesPaint; [EOL]     } [EOL]     Paint result = this.seriesPaintList.getPaint(series); [EOL]     if (result == null) { [EOL]         DrawingSupplier supplier = getDrawingSupplier(); [EOL]         if (supplier != null) { [EOL]             Paint p = supplier.getNextPaint(); [EOL]             this.seriesPaintList.setPaint(series, p); [EOL]             result = p; [EOL]         } else { [EOL]             result = this.baseSeriesPaint; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 691,713
public void setSeriesPaint(int series, Paint paint) { [EOL]     this.seriesPaintList.setPaint(series, paint); [EOL]     fireChangeEvent(); [EOL] } <line_num>: 724,727
public Paint getBaseSeriesPaint() { [EOL]     return this.baseSeriesPaint; [EOL] } <line_num>: 737,739
public void setBaseSeriesPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.baseSeriesPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 748,754
public Paint getSeriesOutlinePaint() { [EOL]     return this.seriesOutlinePaint; [EOL] } <line_num>: 763,765
public void setSeriesOutlinePaint(Paint paint) { [EOL]     this.seriesOutlinePaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 774,777
public Paint getSeriesOutlinePaint(int series) { [EOL]     if (this.seriesOutlinePaint != null) { [EOL]         return this.seriesOutlinePaint; [EOL]     } [EOL]     Paint result = this.seriesOutlinePaintList.getPaint(series); [EOL]     if (result == null) { [EOL]         result = this.baseSeriesOutlinePaint; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 786,797
public void setSeriesOutlinePaint(int series, Paint paint) { [EOL]     this.seriesOutlinePaintList.setPaint(series, paint); [EOL]     fireChangeEvent(); [EOL] } <line_num>: 806,809
public Paint getBaseSeriesOutlinePaint() { [EOL]     return this.baseSeriesOutlinePaint; [EOL] } <line_num>: 817,819
public void setBaseSeriesOutlinePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.baseSeriesOutlinePaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 826,832
public Stroke getSeriesOutlineStroke() { [EOL]     return this.seriesOutlineStroke; [EOL] } <line_num>: 841,843
public void setSeriesOutlineStroke(Stroke stroke) { [EOL]     this.seriesOutlineStroke = stroke; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 852,855
public Stroke getSeriesOutlineStroke(int series) { [EOL]     if (this.seriesOutlineStroke != null) { [EOL]         return this.seriesOutlineStroke; [EOL]     } [EOL]     Stroke result = this.seriesOutlineStrokeList.getStroke(series); [EOL]     if (result == null) { [EOL]         result = this.baseSeriesOutlineStroke; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 864,878
public void setSeriesOutlineStroke(int series, Stroke stroke) { [EOL]     this.seriesOutlineStrokeList.setStroke(series, stroke); [EOL]     fireChangeEvent(); [EOL] } <line_num>: 887,890
public Stroke getBaseSeriesOutlineStroke() { [EOL]     return this.baseSeriesOutlineStroke; [EOL] } <line_num>: 898,900
public void setBaseSeriesOutlineStroke(Stroke stroke) { [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' argument."); [EOL]     } [EOL]     this.baseSeriesOutlineStroke = stroke; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 907,913
public Shape getLegendItemShape() { [EOL]     return this.legendItemShape; [EOL] } <line_num>: 922,924
public void setLegendItemShape(Shape shape) { [EOL]     if (shape == null) { [EOL]         throw new IllegalArgumentException("Null 'shape' argument."); [EOL]     } [EOL]     this.legendItemShape = shape; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 934,940
public Font getLabelFont() { [EOL]     return this.labelFont; [EOL] } <line_num>: 949,951
public void setLabelFont(Font font) { [EOL]     if (font == null) { [EOL]         throw new IllegalArgumentException("Null 'font' argument."); [EOL]     } [EOL]     this.labelFont = font; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 961,967
public Paint getLabelPaint() { [EOL]     return this.labelPaint; [EOL] } <line_num>: 976,978
public void setLabelPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.labelPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 988,994
public CategoryItemLabelGenerator getLabelGenerator() { [EOL]     return this.labelGenerator; [EOL] } <line_num>: 1003,1005
public void setLabelGenerator(CategoryItemLabelGenerator generator) { [EOL]     if (generator == null) { [EOL]         throw new IllegalArgumentException("Null 'generator' argument."); [EOL]     } [EOL]     this.labelGenerator = generator; [EOL] } <line_num>: 1015,1020
public CategoryToolTipGenerator getToolTipGenerator() { [EOL]     return this.toolTipGenerator; [EOL] } <line_num>: 1031,1033
public void setToolTipGenerator(CategoryToolTipGenerator generator) { [EOL]     this.toolTipGenerator = generator; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 1045,1048
public CategoryURLGenerator getURLGenerator() { [EOL]     return this.urlGenerator; [EOL] } <line_num>: 1059,1061
public void setURLGenerator(CategoryURLGenerator generator) { [EOL]     this.urlGenerator = generator; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 1073,1076
public LegendItemCollection getLegendItems() { [EOL]     LegendItemCollection result = new LegendItemCollection(); [EOL]     if (getDataset() == null) { [EOL]         return result; [EOL]     } [EOL]     List keys = null; [EOL]     if (this.dataExtractOrder == TableOrder.BY_ROW) { [EOL]         keys = this.dataset.getRowKeys(); [EOL]     } else if (this.dataExtractOrder == TableOrder.BY_COLUMN) { [EOL]         keys = this.dataset.getColumnKeys(); [EOL]     } [EOL]     if (keys == null) { [EOL]         return result; [EOL]     } [EOL]     int series = 0; [EOL]     Iterator iterator = keys.iterator(); [EOL]     Shape shape = getLegendItemShape(); [EOL]     while (iterator.hasNext()) { [EOL]         Comparable key = (Comparable) iterator.next(); [EOL]         String label = key.toString(); [EOL]         String description = label; [EOL]         Paint paint = getSeriesPaint(series); [EOL]         Paint outlinePaint = getSeriesOutlinePaint(series); [EOL]         Stroke stroke = getSeriesOutlineStroke(series); [EOL]         LegendItem item = new LegendItem(label, description, null, null, shape, paint, stroke, outlinePaint); [EOL]         item.setDataset(getDataset()); [EOL]         item.setSeriesKey(key); [EOL]         item.setSeriesIndex(series); [EOL]         result.add(item); [EOL]         series++; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1083,1118
protected Point2D getWebPoint(Rectangle2D bounds, double angle, double length) { [EOL]     double angrad = Math.toRadians(angle); [EOL]     double x = Math.cos(angrad) * length * bounds.getWidth() / 2; [EOL]     double y = -Math.sin(angrad) * length * bounds.getHeight() / 2; [EOL]     return new Point2D.Double(bounds.getX() + x + bounds.getWidth() / 2, bounds.getY() + y + bounds.getHeight() / 2); [EOL] } <line_num>: 1129,1138
public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor, PlotState parentState, PlotRenderingInfo info) { [EOL]     RectangleInsets insets = getInsets(); [EOL]     insets.trim(area); [EOL]     if (info != null) { [EOL]         info.setPlotArea(area); [EOL]         info.setDataArea(area); [EOL]     } [EOL]     drawBackground(g2, area); [EOL]     drawOutline(g2, area); [EOL]     Shape savedClip = g2.getClip(); [EOL]     g2.clip(area); [EOL]     Composite originalComposite = g2.getComposite(); [EOL]     g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, getForegroundAlpha())); [EOL]     if (!DatasetUtilities.isEmptyOrNull(this.dataset)) { [EOL]         int seriesCount = 0, catCount = 0; [EOL]         if (this.dataExtractOrder == TableOrder.BY_ROW) { [EOL]             seriesCount = this.dataset.getRowCount(); [EOL]             catCount = this.dataset.getColumnCount(); [EOL]         } else { [EOL]             seriesCount = this.dataset.getColumnCount(); [EOL]             catCount = this.dataset.getRowCount(); [EOL]         } [EOL]         if (this.maxValue == DEFAULT_MAX_VALUE) [EOL]             calculateMaxValue(seriesCount, catCount); [EOL]         double gapHorizontal = area.getWidth() * getInteriorGap(); [EOL]         double gapVertical = area.getHeight() * getInteriorGap(); [EOL]         double X = area.getX() + gapHorizontal / 2; [EOL]         double Y = area.getY() + gapVertical / 2; [EOL]         double W = area.getWidth() - gapHorizontal; [EOL]         double H = area.getHeight() - gapVertical; [EOL]         double headW = area.getWidth() * this.headPercent; [EOL]         double headH = area.getHeight() * this.headPercent; [EOL]         double min = Math.min(W, H) / 2; [EOL]         X = (X + X + W) / 2 - min; [EOL]         Y = (Y + Y + H) / 2 - min; [EOL]         W = 2 * min; [EOL]         H = 2 * min; [EOL]         Point2D centre = new Point2D.Double(X + W / 2, Y + H / 2); [EOL]         Rectangle2D radarArea = new Rectangle2D.Double(X, Y, W, H); [EOL]         for (int cat = 0; cat < catCount; cat++) { [EOL]             double angle = getStartAngle() + (getDirection().getFactor() * cat * 360 / catCount); [EOL]             Point2D endPoint = getWebPoint(radarArea, angle, 1); [EOL]             Line2D line = new Line2D.Double(centre, endPoint); [EOL]             g2.setPaint(this.axisLinePaint); [EOL]             g2.setStroke(this.axisLineStroke); [EOL]             g2.draw(line); [EOL]             drawLabel(g2, radarArea, 0.0, cat, angle, 360.0 / catCount); [EOL]         } [EOL]         for (int series = 0; series < seriesCount; series++) { [EOL]             drawRadarPoly(g2, radarArea, centre, info, series, catCount, headH, headW); [EOL]         } [EOL]     } else { [EOL]         drawNoDataMessage(g2, area); [EOL]     } [EOL]     g2.setClip(savedClip); [EOL]     g2.setComposite(originalComposite); [EOL]     drawOutline(g2, area); [EOL] } <line_num>: 1150,1239
private void calculateMaxValue(int seriesCount, int catCount) { [EOL]     double v = 0; [EOL]     Number nV = null; [EOL]     for (int seriesIndex = 0; seriesIndex < seriesCount; seriesIndex++) { [EOL]         for (int catIndex = 0; catIndex < catCount; catIndex++) { [EOL]             nV = getPlotValue(seriesIndex, catIndex); [EOL]             if (nV != null) { [EOL]                 v = nV.doubleValue(); [EOL]                 if (v > this.maxValue) { [EOL]                     this.maxValue = v; [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 1248,1263
protected void drawRadarPoly(Graphics2D g2, Rectangle2D plotArea, Point2D centre, PlotRenderingInfo info, int series, int catCount, double headH, double headW) { [EOL]     Polygon polygon = new Polygon(); [EOL]     EntityCollection entities = null; [EOL]     if (info != null) { [EOL]         entities = info.getOwner().getEntityCollection(); [EOL]     } [EOL]     for (int cat = 0; cat < catCount; cat++) { [EOL]         Number dataValue = getPlotValue(series, cat); [EOL]         if (dataValue != null) { [EOL]             double value = dataValue.doubleValue(); [EOL]             if (value >= 0) { [EOL]                 double angle = getStartAngle() + (getDirection().getFactor() * cat * 360 / catCount); [EOL]                 Point2D point = getWebPoint(plotArea, angle, value / this.maxValue); [EOL]                 polygon.addPoint((int) point.getX(), (int) point.getY()); [EOL]                 Paint paint = getSeriesPaint(series); [EOL]                 Paint outlinePaint = getSeriesOutlinePaint(series); [EOL]                 Stroke outlineStroke = getSeriesOutlineStroke(series); [EOL]                 Ellipse2D head = new Ellipse2D.Double(point.getX() - headW / 2, point.getY() - headH / 2, headW, headH); [EOL]                 g2.setPaint(paint); [EOL]                 g2.fill(head); [EOL]                 g2.setStroke(outlineStroke); [EOL]                 g2.setPaint(outlinePaint); [EOL]                 g2.draw(head); [EOL]                 if (entities != null) { [EOL]                     int row = 0; [EOL]                     int col = 0; [EOL]                     if (this.dataExtractOrder == TableOrder.BY_ROW) { [EOL]                         row = series; [EOL]                         col = cat; [EOL]                     } else { [EOL]                         row = cat; [EOL]                         col = series; [EOL]                     } [EOL]                     String tip = null; [EOL]                     if (this.toolTipGenerator != null) { [EOL]                         tip = this.toolTipGenerator.generateToolTip(this.dataset, row, col); [EOL]                     } [EOL]                     String url = null; [EOL]                     if (this.urlGenerator != null) { [EOL]                         url = this.urlGenerator.generateURL(this.dataset, row, col); [EOL]                     } [EOL]                     Shape area = new Rectangle((int) (point.getX() - headW), (int) (point.getY() - headH), (int) (headW * 2), (int) (headH * 2)); [EOL]                     CategoryItemEntity entity = new CategoryItemEntity(area, tip, url, this.dataset, this.dataset.getRowKey(row), this.dataset.getColumnKey(col)); [EOL]                     entities.add(entity); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     Paint paint = getSeriesPaint(series); [EOL]     g2.setPaint(paint); [EOL]     g2.setStroke(getSeriesOutlineStroke(series)); [EOL]     g2.draw(polygon); [EOL]     if (this.webFilled) { [EOL]         g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.1f)); [EOL]         g2.fill(polygon); [EOL]         g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, getForegroundAlpha())); [EOL]     } [EOL] } <line_num>: 1277,1388
protected Number getPlotValue(int series, int cat) { [EOL]     Number value = null; [EOL]     if (this.dataExtractOrder == TableOrder.BY_ROW) { [EOL]         value = this.dataset.getValue(series, cat); [EOL]     } else if (this.dataExtractOrder == TableOrder.BY_COLUMN) { [EOL]         value = this.dataset.getValue(cat, series); [EOL]     } [EOL]     return value; [EOL] } <line_num>: 1404,1413
protected void drawLabel(Graphics2D g2, Rectangle2D plotArea, double value, int cat, double startAngle, double extent) { [EOL]     FontRenderContext frc = g2.getFontRenderContext(); [EOL]     String label = null; [EOL]     if (this.dataExtractOrder == TableOrder.BY_ROW) { [EOL]         label = this.labelGenerator.generateColumnLabel(this.dataset, cat); [EOL]     } else { [EOL]         label = this.labelGenerator.generateRowLabel(this.dataset, cat); [EOL]     } [EOL]     Rectangle2D labelBounds = getLabelFont().getStringBounds(label, frc); [EOL]     LineMetrics lm = getLabelFont().getLineMetrics(label, frc); [EOL]     double ascent = lm.getAscent(); [EOL]     Point2D labelLocation = calculateLabelLocation(labelBounds, ascent, plotArea, startAngle); [EOL]     Composite saveComposite = g2.getComposite(); [EOL]     g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0f)); [EOL]     g2.setPaint(getLabelPaint()); [EOL]     g2.setFont(getLabelFont()); [EOL]     g2.drawString(label, (float) labelLocation.getX(), (float) labelLocation.getY()); [EOL]     g2.setComposite(saveComposite); [EOL] } <line_num>: 1425,1455
protected Point2D calculateLabelLocation(Rectangle2D labelBounds, double ascent, Rectangle2D plotArea, double startAngle) { [EOL]     Arc2D arc1 = new Arc2D.Double(plotArea, startAngle, 0, Arc2D.OPEN); [EOL]     Point2D point1 = arc1.getEndPoint(); [EOL]     double deltaX = -(point1.getX() - plotArea.getCenterX()) * this.axisLabelGap; [EOL]     double deltaY = -(point1.getY() - plotArea.getCenterY()) * this.axisLabelGap; [EOL]     double labelX = point1.getX() - deltaX; [EOL]     double labelY = point1.getY() - deltaY; [EOL]     if (labelX < plotArea.getCenterX()) { [EOL]         labelX -= labelBounds.getWidth(); [EOL]     } [EOL]     if (labelX == plotArea.getCenterX()) { [EOL]         labelX -= labelBounds.getWidth() / 2; [EOL]     } [EOL]     if (labelY > plotArea.getCenterY()) { [EOL]         labelY += ascent; [EOL]     } [EOL]     return new Point2D.Double(labelX, labelY); [EOL] } <line_num>: 1467,1496
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof SpiderWebPlot)) { [EOL]         return false; [EOL]     } [EOL]     if (!super.equals(obj)) { [EOL]         return false; [EOL]     } [EOL]     SpiderWebPlot that = (SpiderWebPlot) obj; [EOL]     if (!this.dataExtractOrder.equals(that.dataExtractOrder)) { [EOL]         return false; [EOL]     } [EOL]     if (this.headPercent != that.headPercent) { [EOL]         return false; [EOL]     } [EOL]     if (this.interiorGap != that.interiorGap) { [EOL]         return false; [EOL]     } [EOL]     if (this.startAngle != that.startAngle) { [EOL]         return false; [EOL]     } [EOL]     if (!this.direction.equals(that.direction)) { [EOL]         return false; [EOL]     } [EOL]     if (this.maxValue != that.maxValue) { [EOL]         return false; [EOL]     } [EOL]     if (this.webFilled != that.webFilled) { [EOL]         return false; [EOL]     } [EOL]     if (this.axisLabelGap != that.axisLabelGap) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.axisLinePaint, that.axisLinePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.axisLineStroke.equals(that.axisLineStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (!ShapeUtilities.equal(this.legendItemShape, that.legendItemShape)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.seriesPaint, that.seriesPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.seriesPaintList.equals(that.seriesPaintList)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.baseSeriesPaint, that.baseSeriesPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.seriesOutlinePaint, that.seriesOutlinePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.seriesOutlinePaintList.equals(that.seriesOutlinePaintList)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.baseSeriesOutlinePaint, that.baseSeriesOutlinePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.seriesOutlineStroke, that.seriesOutlineStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.seriesOutlineStrokeList.equals(that.seriesOutlineStrokeList)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.baseSeriesOutlineStroke.equals(that.baseSeriesOutlineStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.labelFont.equals(that.labelFont)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.labelPaint, that.labelPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.labelGenerator.equals(that.labelGenerator)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.toolTipGenerator, that.toolTipGenerator)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.urlGenerator, that.urlGenerator)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 1505,1599
public Object clone() throws CloneNotSupportedException { [EOL]     SpiderWebPlot clone = (SpiderWebPlot) super.clone(); [EOL]     clone.legendItemShape = ShapeUtilities.clone(this.legendItemShape); [EOL]     clone.seriesPaintList = (PaintList) this.seriesPaintList.clone(); [EOL]     clone.seriesOutlinePaintList = (PaintList) this.seriesOutlinePaintList.clone(); [EOL]     clone.seriesOutlineStrokeList = (StrokeList) this.seriesOutlineStrokeList.clone(); [EOL]     return clone; [EOL] } <line_num>: 1609,1618
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writeShape(this.legendItemShape, stream); [EOL]     SerialUtilities.writePaint(this.seriesPaint, stream); [EOL]     SerialUtilities.writePaint(this.baseSeriesPaint, stream); [EOL]     SerialUtilities.writePaint(this.seriesOutlinePaint, stream); [EOL]     SerialUtilities.writePaint(this.baseSeriesOutlinePaint, stream); [EOL]     SerialUtilities.writeStroke(this.seriesOutlineStroke, stream); [EOL]     SerialUtilities.writeStroke(this.baseSeriesOutlineStroke, stream); [EOL]     SerialUtilities.writePaint(this.labelPaint, stream); [EOL]     SerialUtilities.writePaint(this.axisLinePaint, stream); [EOL]     SerialUtilities.writeStroke(this.axisLineStroke, stream); [EOL] } <line_num>: 1627,1640
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.legendItemShape = SerialUtilities.readShape(stream); [EOL]     this.seriesPaint = SerialUtilities.readPaint(stream); [EOL]     this.baseSeriesPaint = SerialUtilities.readPaint(stream); [EOL]     this.seriesOutlinePaint = SerialUtilities.readPaint(stream); [EOL]     this.baseSeriesOutlinePaint = SerialUtilities.readPaint(stream); [EOL]     this.seriesOutlineStroke = SerialUtilities.readStroke(stream); [EOL]     this.baseSeriesOutlineStroke = SerialUtilities.readStroke(stream); [EOL]     this.labelPaint = SerialUtilities.readPaint(stream); [EOL]     this.axisLinePaint = SerialUtilities.readPaint(stream); [EOL]     this.axisLineStroke = SerialUtilities.readStroke(stream); [EOL]     if (this.dataset != null) { [EOL]         this.dataset.addChangeListener(this); [EOL]     } [EOL] } <line_num>: 1650,1667
