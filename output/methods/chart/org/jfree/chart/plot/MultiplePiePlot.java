public MultiplePiePlot() { [EOL]     this(null); [EOL] } <line_num>: 151,153
public MultiplePiePlot(CategoryDataset dataset) { [EOL]     super(); [EOL]     setDataset(dataset); [EOL]     PiePlot piePlot = new PiePlot(null); [EOL]     piePlot.setIgnoreNullValues(true); [EOL]     this.pieChart = new JFreeChart(piePlot); [EOL]     this.pieChart.removeLegend(); [EOL]     this.dataExtractOrder = TableOrder.BY_COLUMN; [EOL]     this.pieChart.setBackgroundPaint(null); [EOL]     TextTitle seriesTitle = new TextTitle("Series Title", new Font("Tahoma", Font.BOLD, 12)); [EOL]     seriesTitle.setPosition(RectangleEdge.BOTTOM); [EOL]     this.pieChart.setTitle(seriesTitle); [EOL]     this.aggregatedItemsKey = "Other"; [EOL]     this.aggregatedItemsPaint = Color.lightGray; [EOL]     this.sectionPaints = new HashMap(); [EOL]     this.legendItemShape = new Ellipse2D.Double(-4.0, -4.0, 8.0, 8.0); [EOL] } <line_num>: 160,177
public CategoryDataset getDataset() { [EOL]     return this.dataset; [EOL] } <line_num>: 184,186
public void setDataset(CategoryDataset dataset) { [EOL]     if (this.dataset != null) { [EOL]         this.dataset.removeChangeListener(this); [EOL]     } [EOL]     this.dataset = dataset; [EOL]     if (dataset != null) { [EOL]         setDatasetGroup(dataset.getGroup()); [EOL]         dataset.addChangeListener(this); [EOL]     } [EOL]     datasetChanged(new DatasetChangeEvent(this, dataset, new DatasetChangeInfo())); [EOL] } <line_num>: 194,212
public JFreeChart getPieChart() { [EOL]     return this.pieChart; [EOL] } <line_num>: 223,225
public void setPieChart(JFreeChart pieChart) { [EOL]     if (pieChart == null) { [EOL]         throw new IllegalArgumentException("Null 'pieChart' argument."); [EOL]     } [EOL]     if (!(pieChart.getPlot() instanceof PiePlot)) { [EOL]         throw new IllegalArgumentException("The 'pieChart' argument must " + "be a chart based on a PiePlot."); [EOL]     } [EOL]     this.pieChart = pieChart; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 235,245
public TableOrder getDataExtractOrder() { [EOL]     return this.dataExtractOrder; [EOL] } <line_num>: 252,254
public void setDataExtractOrder(TableOrder order) { [EOL]     if (order == null) { [EOL]         throw new IllegalArgumentException("Null 'order' argument"); [EOL]     } [EOL]     this.dataExtractOrder = order; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 262,268
public double getLimit() { [EOL]     return this.limit; [EOL] } <line_num>: 276,278
public void setLimit(double limit) { [EOL]     this.limit = limit; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 286,289
public Comparable getAggregatedItemsKey() { [EOL]     return this.aggregatedItemsKey; [EOL] } <line_num>: 299,301
public void setAggregatedItemsKey(Comparable key) { [EOL]     if (key == null) { [EOL]         throw new IllegalArgumentException("Null 'key' argument."); [EOL]     } [EOL]     this.aggregatedItemsKey = key; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 311,317
public Paint getAggregatedItemsPaint() { [EOL]     return this.aggregatedItemsPaint; [EOL] } <line_num>: 327,329
public void setAggregatedItemsPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.aggregatedItemsPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 339,345
public String getPlotType() { [EOL]     return "Multiple Pie Plot"; [EOL] } <line_num>: 352,355
public Shape getLegendItemShape() { [EOL]     return this.legendItemShape; [EOL] } <line_num>: 366,368
public void setLegendItemShape(Shape shape) { [EOL]     if (shape == null) { [EOL]         throw new IllegalArgumentException("Null 'shape' argument."); [EOL]     } [EOL]     this.legendItemShape = shape; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 380,386
public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor, PlotState parentState, PlotRenderingInfo info) { [EOL]     RectangleInsets insets = getInsets(); [EOL]     insets.trim(area); [EOL]     drawBackground(g2, area); [EOL]     drawOutline(g2, area); [EOL]     if (DatasetUtilities.isEmptyOrNull(this.dataset)) { [EOL]         drawNoDataMessage(g2, area); [EOL]         return; [EOL]     } [EOL]     int pieCount = 0; [EOL]     if (this.dataExtractOrder == TableOrder.BY_ROW) { [EOL]         pieCount = this.dataset.getRowCount(); [EOL]     } else { [EOL]         pieCount = this.dataset.getColumnCount(); [EOL]     } [EOL]     int displayCols = (int) Math.ceil(Math.sqrt(pieCount)); [EOL]     int displayRows = (int) Math.ceil((double) pieCount / (double) displayCols); [EOL]     if (displayCols > displayRows && area.getWidth() < area.getHeight()) { [EOL]         int temp = displayCols; [EOL]         displayCols = displayRows; [EOL]         displayRows = temp; [EOL]     } [EOL]     prefetchSectionPaints(); [EOL]     int x = (int) area.getX(); [EOL]     int y = (int) area.getY(); [EOL]     int width = ((int) area.getWidth()) / displayCols; [EOL]     int height = ((int) area.getHeight()) / displayRows; [EOL]     int row = 0; [EOL]     int column = 0; [EOL]     int diff = (displayRows * displayCols) - pieCount; [EOL]     int xoffset = 0; [EOL]     Rectangle rect = new Rectangle(); [EOL]     for (int pieIndex = 0; pieIndex < pieCount; pieIndex++) { [EOL]         rect.setBounds(x + xoffset + (width * column), y + (height * row), width, height); [EOL]         String title = null; [EOL]         if (this.dataExtractOrder == TableOrder.BY_ROW) { [EOL]             title = this.dataset.getRowKey(pieIndex).toString(); [EOL]         } else { [EOL]             title = this.dataset.getColumnKey(pieIndex).toString(); [EOL]         } [EOL]         this.pieChart.setTitle(title); [EOL]         PieDataset piedataset = null; [EOL]         PieDataset dd = new CategoryToPieDataset(this.dataset, this.dataExtractOrder, pieIndex); [EOL]         if (this.limit > 0.0) { [EOL]             piedataset = DatasetUtilities.createConsolidatedPieDataset(dd, this.aggregatedItemsKey, this.limit); [EOL]         } else { [EOL]             piedataset = dd; [EOL]         } [EOL]         PiePlot piePlot = (PiePlot) this.pieChart.getPlot(); [EOL]         piePlot.setDataset(piedataset); [EOL]         piePlot.setPieIndex(pieIndex); [EOL]         for (int i = 0; i < piedataset.getItemCount(); i++) { [EOL]             Comparable key = piedataset.getKey(i); [EOL]             Paint p; [EOL]             if (key.equals(this.aggregatedItemsKey)) { [EOL]                 p = this.aggregatedItemsPaint; [EOL]             } else { [EOL]                 p = (Paint) this.sectionPaints.get(key); [EOL]             } [EOL]             piePlot.setSectionPaint(key, p); [EOL]         } [EOL]         ChartRenderingInfo subinfo = null; [EOL]         if (info != null) { [EOL]             subinfo = new ChartRenderingInfo(); [EOL]         } [EOL]         this.pieChart.draw(g2, rect, subinfo); [EOL]         if (info != null) { [EOL]             info.getOwner().getEntityCollection().addAll(subinfo.getEntityCollection()); [EOL]             info.addSubplotInfo(subinfo.getPlotInfo()); [EOL]         } [EOL]         ++column; [EOL]         if (column == displayCols) { [EOL]             column = 0; [EOL]             ++row; [EOL]             if (row == displayRows - 1 && diff != 0) { [EOL]                 xoffset = (diff * width) / 2; [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 398,511
private void prefetchSectionPaints() { [EOL]     PiePlot piePlot = (PiePlot) getPieChart().getPlot(); [EOL]     if (this.dataExtractOrder == TableOrder.BY_ROW) { [EOL]         for (int c = 0; c < this.dataset.getColumnCount(); c++) { [EOL]             Comparable key = this.dataset.getColumnKey(c); [EOL]             Paint p = piePlot.getSectionPaint(key, false); [EOL]             if (p == null) { [EOL]                 p = (Paint) this.sectionPaints.get(key); [EOL]                 if (p == null) { [EOL]                     p = getDrawingSupplier().getNextPaint(); [EOL]                 } [EOL]             } [EOL]             this.sectionPaints.put(key, p); [EOL]         } [EOL]     } else { [EOL]         for (int r = 0; r < this.dataset.getRowCount(); r++) { [EOL]             Comparable key = this.dataset.getRowKey(r); [EOL]             Paint p = piePlot.getSectionPaint(key, false); [EOL]             if (p == null) { [EOL]                 p = (Paint) this.sectionPaints.get(key); [EOL]                 if (p == null) { [EOL]                     p = getDrawingSupplier().getNextPaint(); [EOL]                 } [EOL]             } [EOL]             this.sectionPaints.put(key, p); [EOL]         } [EOL]     } [EOL] } <line_num>: 519,556
public LegendItemCollection getLegendItems() { [EOL]     LegendItemCollection result = new LegendItemCollection(); [EOL]     if (this.dataset == null) { [EOL]         return result; [EOL]     } [EOL]     List keys = null; [EOL]     prefetchSectionPaints(); [EOL]     if (this.dataExtractOrder == TableOrder.BY_ROW) { [EOL]         keys = this.dataset.getColumnKeys(); [EOL]     } else if (this.dataExtractOrder == TableOrder.BY_COLUMN) { [EOL]         keys = this.dataset.getRowKeys(); [EOL]     } [EOL]     if (keys == null) { [EOL]         return result; [EOL]     } [EOL]     int section = 0; [EOL]     Iterator iterator = keys.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         Comparable key = (Comparable) iterator.next(); [EOL]         String label = key.toString(); [EOL]         String description = label; [EOL]         Paint paint = (Paint) this.sectionPaints.get(key); [EOL]         LegendItem item = new LegendItem(label, description, null, null, getLegendItemShape(), paint, Plot.DEFAULT_OUTLINE_STROKE, paint); [EOL]         item.setSeriesKey(key); [EOL]         item.setSeriesIndex(section); [EOL]         item.setDataset(getDataset()); [EOL]         result.add(item); [EOL]         section++; [EOL]     } [EOL]     if (this.limit > 0.0) { [EOL]         LegendItem a = new LegendItem(this.aggregatedItemsKey.toString(), this.aggregatedItemsKey.toString(), null, null, getLegendItemShape(), this.aggregatedItemsPaint, Plot.DEFAULT_OUTLINE_STROKE, this.aggregatedItemsPaint); [EOL]         result.add(a); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 563,605
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof MultiplePiePlot)) { [EOL]         return false; [EOL]     } [EOL]     MultiplePiePlot that = (MultiplePiePlot) obj; [EOL]     if (this.dataExtractOrder != that.dataExtractOrder) { [EOL]         return false; [EOL]     } [EOL]     if (this.limit != that.limit) { [EOL]         return false; [EOL]     } [EOL]     if (!this.aggregatedItemsKey.equals(that.aggregatedItemsKey)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.aggregatedItemsPaint, that.aggregatedItemsPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.pieChart, that.pieChart)) { [EOL]         return false; [EOL]     } [EOL]     if (!ShapeUtilities.equal(this.legendItemShape, that.legendItemShape)) { [EOL]         return false; [EOL]     } [EOL]     if (!super.equals(obj)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 616,647
public Object clone() throws CloneNotSupportedException { [EOL]     MultiplePiePlot clone = (MultiplePiePlot) super.clone(); [EOL]     clone.pieChart = (JFreeChart) this.pieChart.clone(); [EOL]     clone.sectionPaints = new HashMap(this.sectionPaints); [EOL]     clone.legendItemShape = ShapeUtilities.clone(this.legendItemShape); [EOL]     return clone; [EOL] } <line_num>: 657,663
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.aggregatedItemsPaint, stream); [EOL]     SerialUtilities.writeShape(this.legendItemShape, stream); [EOL] } <line_num>: 672,676
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.aggregatedItemsPaint = SerialUtilities.readPaint(stream); [EOL]     this.legendItemShape = SerialUtilities.readShape(stream); [EOL]     this.sectionPaints = new HashMap(); [EOL] } <line_num>: 686,692
