public PiePlot3D() { [EOL]     this(null); [EOL] } <line_num>: 142,144
public PiePlot3D(PieDataset dataset) { [EOL]     super(dataset); [EOL]     setCircular(false, false); [EOL] } <line_num>: 152,155
public double getDepthFactor() { [EOL]     return this.depthFactor; [EOL] } <line_num>: 164,166
public void setDepthFactor(double factor) { [EOL]     this.depthFactor = factor; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 176,179
public boolean getDarkerSides() { [EOL]     return this.darkerSides; [EOL] } <line_num>: 192,194
public void setDarkerSides(boolean darker) { [EOL]     this.darkerSides = darker; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 209,212
public void draw(Graphics2D g2, Rectangle2D plotArea, Point2D anchor, PlotState parentState, PlotRenderingInfo info) { [EOL]     RectangleInsets insets = getInsets(); [EOL]     insets.trim(plotArea); [EOL]     Rectangle2D originalPlotArea = (Rectangle2D) plotArea.clone(); [EOL]     if (info != null) { [EOL]         info.setPlotArea(plotArea); [EOL]         info.setDataArea(plotArea); [EOL]     } [EOL]     drawBackground(g2, plotArea); [EOL]     Shape savedClip = g2.getClip(); [EOL]     g2.clip(plotArea); [EOL]     double gapPercent = getInteriorGap(); [EOL]     double labelPercent = 0.0; [EOL]     if (getLabelGenerator() != null) { [EOL]         labelPercent = getLabelGap() + getMaximumLabelWidth(); [EOL]     } [EOL]     double gapHorizontal = plotArea.getWidth() * (gapPercent + labelPercent) * 2.0; [EOL]     double gapVertical = plotArea.getHeight() * gapPercent * 2.0; [EOL]     if (DEBUG_DRAW_INTERIOR) { [EOL]         double hGap = plotArea.getWidth() * getInteriorGap(); [EOL]         double vGap = plotArea.getHeight() * getInteriorGap(); [EOL]         double igx1 = plotArea.getX() + hGap; [EOL]         double igx2 = plotArea.getMaxX() - hGap; [EOL]         double igy1 = plotArea.getY() + vGap; [EOL]         double igy2 = plotArea.getMaxY() - vGap; [EOL]         g2.setPaint(Color.lightGray); [EOL]         g2.draw(new Rectangle2D.Double(igx1, igy1, igx2 - igx1, igy2 - igy1)); [EOL]     } [EOL]     double linkX = plotArea.getX() + gapHorizontal / 2; [EOL]     double linkY = plotArea.getY() + gapVertical / 2; [EOL]     double linkW = plotArea.getWidth() - gapHorizontal; [EOL]     double linkH = plotArea.getHeight() - gapVertical; [EOL]     if (isCircular()) { [EOL]         double min = Math.min(linkW, linkH) / 2; [EOL]         linkX = (linkX + linkX + linkW) / 2 - min; [EOL]         linkY = (linkY + linkY + linkH) / 2 - min; [EOL]         linkW = 2 * min; [EOL]         linkH = 2 * min; [EOL]     } [EOL]     PiePlotState state = initialise(g2, plotArea, this, null, info); [EOL]     Rectangle2D linkAreaXX = new Rectangle2D.Double(linkX, linkY, linkW, linkH * (1 - this.depthFactor)); [EOL]     state.setLinkArea(linkAreaXX); [EOL]     if (DEBUG_DRAW_LINK_AREA) { [EOL]         g2.setPaint(Color.blue); [EOL]         g2.draw(linkAreaXX); [EOL]         g2.setPaint(Color.yellow); [EOL]         g2.draw(new Ellipse2D.Double(linkAreaXX.getX(), linkAreaXX.getY(), linkAreaXX.getWidth(), linkAreaXX.getHeight())); [EOL]     } [EOL]     double hh = linkW * getLabelLinkMargin(); [EOL]     double vv = linkH * getLabelLinkMargin(); [EOL]     Rectangle2D explodeArea = new Rectangle2D.Double(linkX + hh / 2.0, linkY + vv / 2.0, linkW - hh, linkH - vv); [EOL]     state.setExplodedPieArea(explodeArea); [EOL]     double maximumExplodePercent = getMaximumExplodePercent(); [EOL]     double percent = maximumExplodePercent / (1.0 + maximumExplodePercent); [EOL]     double h1 = explodeArea.getWidth() * percent; [EOL]     double v1 = explodeArea.getHeight() * percent; [EOL]     Rectangle2D pieArea = new Rectangle2D.Double(explodeArea.getX() + h1 / 2.0, explodeArea.getY() + v1 / 2.0, explodeArea.getWidth() - h1, explodeArea.getHeight() - v1); [EOL]     int depth = (int) (pieArea.getHeight() * this.depthFactor); [EOL]     Rectangle2D linkArea = new Rectangle2D.Double(linkX, linkY, linkW, linkH - depth); [EOL]     state.setLinkArea(linkArea); [EOL]     state.setPieArea(pieArea); [EOL]     state.setPieCenterX(pieArea.getCenterX()); [EOL]     state.setPieCenterY(pieArea.getCenterY() - depth / 2.0); [EOL]     state.setPieWRadius(pieArea.getWidth() / 2.0); [EOL]     state.setPieHRadius((pieArea.getHeight() - depth) / 2.0); [EOL]     PieDataset dataset = getDataset(); [EOL]     if (DatasetUtilities.isEmptyOrNull(getDataset())) { [EOL]         drawNoDataMessage(g2, plotArea); [EOL]         g2.setClip(savedClip); [EOL]         drawOutline(g2, plotArea); [EOL]         return; [EOL]     } [EOL]     if (dataset.getKeys().size() > plotArea.getWidth()) { [EOL]         String text = "Too many elements"; [EOL]         Font sfont = new Font("Tahoma", Font.BOLD, 10); [EOL]         g2.setFont(sfont); [EOL]         FontMetrics fm = g2.getFontMetrics(sfont); [EOL]         int stringWidth = fm.stringWidth(text); [EOL]         g2.drawString(text, (int) (plotArea.getX() + (plotArea.getWidth() - stringWidth) / 2), (int) (plotArea.getY() + (plotArea.getHeight() / 2))); [EOL]         return; [EOL]     } [EOL]     if (isCircular()) { [EOL]         double min = Math.min(plotArea.getWidth(), plotArea.getHeight()) / 2; [EOL]         plotArea = new Rectangle2D.Double(plotArea.getCenterX() - min, plotArea.getCenterY() - min, 2 * min, 2 * min); [EOL]     } [EOL]     List sectionKeys = dataset.getKeys(); [EOL]     if (sectionKeys.size() == 0) { [EOL]         return; [EOL]     } [EOL]     double arcX = pieArea.getX(); [EOL]     double arcY = pieArea.getY(); [EOL]     Composite originalComposite = g2.getComposite(); [EOL]     g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, getForegroundAlpha())); [EOL]     double totalValue = DatasetUtilities.calculatePieDatasetTotal(dataset); [EOL]     double runningTotal = 0; [EOL]     if (depth < 0) { [EOL]         return; [EOL]     } [EOL]     ArrayList arcList = new ArrayList(); [EOL]     Arc2D.Double arc; [EOL]     Paint paint; [EOL]     Paint outlinePaint; [EOL]     Stroke outlineStroke; [EOL]     Iterator iterator = sectionKeys.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         Comparable currentKey = (Comparable) iterator.next(); [EOL]         Number dataValue = dataset.getValue(currentKey); [EOL]         if (dataValue == null) { [EOL]             arcList.add(null); [EOL]             continue; [EOL]         } [EOL]         double value = dataValue.doubleValue(); [EOL]         if (value <= 0) { [EOL]             arcList.add(null); [EOL]             continue; [EOL]         } [EOL]         double startAngle = getStartAngle(); [EOL]         double direction = getDirection().getFactor(); [EOL]         double angle1 = startAngle + (direction * (runningTotal * 360)) / totalValue; [EOL]         double angle2 = startAngle + (direction * (runningTotal + value) * 360) / totalValue; [EOL]         if (Math.abs(angle2 - angle1) > getMinimumArcAngleToDraw()) { [EOL]             arcList.add(new Arc2D.Double(arcX, arcY + depth, pieArea.getWidth(), pieArea.getHeight() - depth, angle1, angle2 - angle1, Arc2D.PIE)); [EOL]         } else { [EOL]             arcList.add(null); [EOL]         } [EOL]         runningTotal += value; [EOL]     } [EOL]     Shape oldClip = g2.getClip(); [EOL]     Ellipse2D top = new Ellipse2D.Double(pieArea.getX(), pieArea.getY(), pieArea.getWidth(), pieArea.getHeight() - depth); [EOL]     Ellipse2D bottom = new Ellipse2D.Double(pieArea.getX(), pieArea.getY() + depth, pieArea.getWidth(), pieArea.getHeight() - depth); [EOL]     Rectangle2D lower = new Rectangle2D.Double(top.getX(), top.getCenterY(), pieArea.getWidth(), bottom.getMaxY() - top.getCenterY()); [EOL]     Rectangle2D upper = new Rectangle2D.Double(pieArea.getX(), top.getY(), pieArea.getWidth(), bottom.getCenterY() - top.getY()); [EOL]     Area a = new Area(top); [EOL]     a.add(new Area(lower)); [EOL]     Area b = new Area(bottom); [EOL]     b.add(new Area(upper)); [EOL]     Area pie = new Area(a); [EOL]     pie.intersect(b); [EOL]     Area front = new Area(pie); [EOL]     front.subtract(new Area(top)); [EOL]     Area back = new Area(pie); [EOL]     back.subtract(new Area(bottom)); [EOL]     int[] xs; [EOL]     int[] ys; [EOL]     arc = new Arc2D.Double(arcX, arcY + depth, pieArea.getWidth(), pieArea.getHeight() - depth, 0, 360, Arc2D.PIE); [EOL]     int categoryCount = arcList.size(); [EOL]     for (int categoryIndex = 0; categoryIndex < categoryCount; categoryIndex++) { [EOL]         arc = (Arc2D.Double) arcList.get(categoryIndex); [EOL]         if (arc == null) { [EOL]             continue; [EOL]         } [EOL]         Comparable key = getSectionKey(categoryIndex); [EOL]         paint = lookupSectionPaint(key, false); [EOL]         outlinePaint = lookupSectionOutlinePaint(key, false); [EOL]         outlineStroke = lookupSectionOutlineStroke(key, false); [EOL]         g2.setPaint(paint); [EOL]         g2.fill(arc); [EOL]         g2.setPaint(outlinePaint); [EOL]         g2.setStroke(outlineStroke); [EOL]         g2.draw(arc); [EOL]         g2.setPaint(paint); [EOL]         Point2D p1 = arc.getStartPoint(); [EOL]         xs = new int[] { (int) arc.getCenterX(), (int) arc.getCenterX(), (int) p1.getX(), (int) p1.getX() }; [EOL]         ys = new int[] { (int) arc.getCenterY(), (int) arc.getCenterY() - depth, (int) p1.getY() - depth, (int) p1.getY() }; [EOL]         Polygon polygon = new Polygon(xs, ys, 4); [EOL]         g2.setPaint(java.awt.Color.lightGray); [EOL]         g2.fill(polygon); [EOL]         g2.setPaint(outlinePaint); [EOL]         g2.setStroke(outlineStroke); [EOL]         g2.draw(polygon); [EOL]         g2.setPaint(paint); [EOL]     } [EOL]     g2.setPaint(Color.gray); [EOL]     g2.fill(back); [EOL]     g2.fill(front); [EOL]     int cat = 0; [EOL]     iterator = arcList.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         Arc2D segment = (Arc2D) iterator.next(); [EOL]         if (segment != null) { [EOL]             Comparable key = getSectionKey(cat); [EOL]             paint = lookupSectionPaint(key, false); [EOL]             outlinePaint = lookupSectionOutlinePaint(key, false); [EOL]             outlineStroke = lookupSectionOutlineStroke(key, false); [EOL]             drawSide(g2, pieArea, segment, front, back, paint, outlinePaint, outlineStroke, false, true); [EOL]         } [EOL]         cat++; [EOL]     } [EOL]     cat = 0; [EOL]     iterator = arcList.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         Arc2D segment = (Arc2D) iterator.next(); [EOL]         if (segment != null) { [EOL]             Comparable key = getSectionKey(cat); [EOL]             paint = lookupSectionPaint(key, false); [EOL]             outlinePaint = lookupSectionOutlinePaint(key, false); [EOL]             outlineStroke = lookupSectionOutlineStroke(key, false); [EOL]             drawSide(g2, pieArea, segment, front, back, paint, outlinePaint, outlineStroke, true, false); [EOL]         } [EOL]         cat++; [EOL]     } [EOL]     g2.setClip(oldClip); [EOL]     Arc2D upperArc; [EOL]     for (int sectionIndex = 0; sectionIndex < categoryCount; sectionIndex++) { [EOL]         arc = (Arc2D.Double) arcList.get(sectionIndex); [EOL]         if (arc == null) { [EOL]             continue; [EOL]         } [EOL]         upperArc = new Arc2D.Double(arcX, arcY, pieArea.getWidth(), pieArea.getHeight() - depth, arc.getAngleStart(), arc.getAngleExtent(), Arc2D.PIE); [EOL]         Comparable currentKey = (Comparable) sectionKeys.get(sectionIndex); [EOL]         paint = lookupSectionPaint(currentKey, true); [EOL]         outlinePaint = lookupSectionOutlinePaint(currentKey, false); [EOL]         outlineStroke = lookupSectionOutlineStroke(currentKey, false); [EOL]         g2.setPaint(paint); [EOL]         g2.fill(upperArc); [EOL]         g2.setStroke(outlineStroke); [EOL]         g2.setPaint(outlinePaint); [EOL]         g2.draw(upperArc); [EOL]         if (info != null) { [EOL]             EntityCollection entities = info.getOwner().getEntityCollection(); [EOL]             if (entities != null) { [EOL]                 String tip = null; [EOL]                 PieToolTipGenerator tipster = getToolTipGenerator(); [EOL]                 if (tipster != null) { [EOL]                     tip = tipster.generateToolTip(dataset, currentKey); [EOL]                 } [EOL]                 String url = null; [EOL]                 if (getURLGenerator() != null) { [EOL]                     url = getURLGenerator().generateURL(dataset, currentKey, getPieIndex()); [EOL]                 } [EOL]                 PieSectionEntity entity = new PieSectionEntity(upperArc, dataset, getPieIndex(), sectionIndex, currentKey, tip, url); [EOL]                 entities.add(entity); [EOL]             } [EOL]         } [EOL]     } [EOL]     List keys = dataset.getKeys(); [EOL]     Rectangle2D adjustedPlotArea = new Rectangle2D.Double(originalPlotArea.getX(), originalPlotArea.getY(), originalPlotArea.getWidth(), originalPlotArea.getHeight() - depth); [EOL]     if (getSimpleLabels()) { [EOL]         drawSimpleLabels(g2, keys, totalValue, adjustedPlotArea, linkArea, state); [EOL]     } else { [EOL]         drawLabels(g2, keys, totalValue, adjustedPlotArea, linkArea, state); [EOL]     } [EOL]     g2.setClip(savedClip); [EOL]     g2.setComposite(originalComposite); [EOL]     drawOutline(g2, originalPlotArea); [EOL] } <line_num>: 227,594
protected void drawSide(Graphics2D g2, Rectangle2D plotArea, Arc2D arc, Area front, Area back, Paint paint, Paint outlinePaint, Stroke outlineStroke, boolean drawFront, boolean drawBack) { [EOL]     if (getDarkerSides()) { [EOL]         if (paint instanceof Color) { [EOL]             Color c = (Color) paint; [EOL]             c = c.darker(); [EOL]             paint = c; [EOL]         } [EOL]     } [EOL]     double start = arc.getAngleStart(); [EOL]     double extent = arc.getAngleExtent(); [EOL]     double end = start + extent; [EOL]     g2.setStroke(outlineStroke); [EOL]     if (extent < 0.0) { [EOL]         if (isAngleAtFront(start)) { [EOL]             if (!isAngleAtBack(end)) { [EOL]                 if (extent > -180.0) { [EOL]                     if (drawFront) { [EOL]                         Area side = new Area(new Rectangle2D.Double(arc.getEndPoint().getX(), plotArea.getY(), arc.getStartPoint().getX() - arc.getEndPoint().getX(), plotArea.getHeight())); [EOL]                         side.intersect(front); [EOL]                         g2.setPaint(paint); [EOL]                         g2.fill(side); [EOL]                         g2.setPaint(outlinePaint); [EOL]                         g2.draw(side); [EOL]                     } [EOL]                 } else { [EOL]                     Area side1 = new Area(new Rectangle2D.Double(plotArea.getX(), plotArea.getY(), arc.getStartPoint().getX() - plotArea.getX(), plotArea.getHeight())); [EOL]                     side1.intersect(front); [EOL]                     Area side2 = new Area(new Rectangle2D.Double(arc.getEndPoint().getX(), plotArea.getY(), plotArea.getMaxX() - arc.getEndPoint().getX(), plotArea.getHeight())); [EOL]                     side2.intersect(front); [EOL]                     g2.setPaint(paint); [EOL]                     if (drawFront) { [EOL]                         g2.fill(side1); [EOL]                         g2.fill(side2); [EOL]                     } [EOL]                     if (drawBack) { [EOL]                         g2.fill(back); [EOL]                     } [EOL]                     g2.setPaint(outlinePaint); [EOL]                     if (drawFront) { [EOL]                         g2.draw(side1); [EOL]                         g2.draw(side2); [EOL]                     } [EOL]                     if (drawBack) { [EOL]                         g2.draw(back); [EOL]                     } [EOL]                 } [EOL]             } else { [EOL]                 if (drawBack) { [EOL]                     Area side2 = new Area(new Rectangle2D.Double(plotArea.getX(), plotArea.getY(), arc.getEndPoint().getX() - plotArea.getX(), plotArea.getHeight())); [EOL]                     side2.intersect(back); [EOL]                     g2.setPaint(paint); [EOL]                     g2.fill(side2); [EOL]                     g2.setPaint(outlinePaint); [EOL]                     g2.draw(side2); [EOL]                 } [EOL]                 if (drawFront) { [EOL]                     Area side1 = new Area(new Rectangle2D.Double(plotArea.getX(), plotArea.getY(), arc.getStartPoint().getX() - plotArea.getX(), plotArea.getHeight())); [EOL]                     side1.intersect(front); [EOL]                     g2.setPaint(paint); [EOL]                     g2.fill(side1); [EOL]                     g2.setPaint(outlinePaint); [EOL]                     g2.draw(side1); [EOL]                 } [EOL]             } [EOL]         } else { [EOL]             if (!isAngleAtFront(end)) { [EOL]                 if (extent > -180.0) { [EOL]                     if (drawBack) { [EOL]                         Area side = new Area(new Rectangle2D.Double(arc.getStartPoint().getX(), plotArea.getY(), arc.getEndPoint().getX() - arc.getStartPoint().getX(), plotArea.getHeight())); [EOL]                         side.intersect(back); [EOL]                         g2.setPaint(paint); [EOL]                         g2.fill(side); [EOL]                         g2.setPaint(outlinePaint); [EOL]                         g2.draw(side); [EOL]                     } [EOL]                 } else { [EOL]                     Area side1 = new Area(new Rectangle2D.Double(arc.getStartPoint().getX(), plotArea.getY(), plotArea.getMaxX() - arc.getStartPoint().getX(), plotArea.getHeight())); [EOL]                     side1.intersect(back); [EOL]                     Area side2 = new Area(new Rectangle2D.Double(plotArea.getX(), plotArea.getY(), arc.getEndPoint().getX() - plotArea.getX(), plotArea.getHeight())); [EOL]                     side2.intersect(back); [EOL]                     g2.setPaint(paint); [EOL]                     if (drawBack) { [EOL]                         g2.fill(side1); [EOL]                         g2.fill(side2); [EOL]                     } [EOL]                     if (drawFront) { [EOL]                         g2.fill(front); [EOL]                     } [EOL]                     g2.setPaint(outlinePaint); [EOL]                     if (drawBack) { [EOL]                         g2.draw(side1); [EOL]                         g2.draw(side2); [EOL]                     } [EOL]                     if (drawFront) { [EOL]                         g2.draw(front); [EOL]                     } [EOL]                 } [EOL]             } else { [EOL]                 if (drawBack) { [EOL]                     Area side1 = new Area(new Rectangle2D.Double(arc.getStartPoint().getX(), plotArea.getY(), plotArea.getMaxX() - arc.getStartPoint().getX(), plotArea.getHeight())); [EOL]                     side1.intersect(back); [EOL]                     g2.setPaint(paint); [EOL]                     g2.fill(side1); [EOL]                     g2.setPaint(outlinePaint); [EOL]                     g2.draw(side1); [EOL]                 } [EOL]                 if (drawFront) { [EOL]                     Area side2 = new Area(new Rectangle2D.Double(arc.getEndPoint().getX(), plotArea.getY(), plotArea.getMaxX() - arc.getEndPoint().getX(), plotArea.getHeight())); [EOL]                     side2.intersect(front); [EOL]                     g2.setPaint(paint); [EOL]                     g2.fill(side2); [EOL]                     g2.setPaint(outlinePaint); [EOL]                     g2.draw(side2); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } else if (extent > 0.0) { [EOL]         if (isAngleAtFront(start)) { [EOL]             if (!isAngleAtBack(end)) { [EOL]                 if (extent < 180.0) { [EOL]                     if (drawFront) { [EOL]                         Area side = new Area(new Rectangle2D.Double(arc.getStartPoint().getX(), plotArea.getY(), arc.getEndPoint().getX() - arc.getStartPoint().getX(), plotArea.getHeight())); [EOL]                         side.intersect(front); [EOL]                         g2.setPaint(paint); [EOL]                         g2.fill(side); [EOL]                         g2.setPaint(outlinePaint); [EOL]                         g2.draw(side); [EOL]                     } [EOL]                 } else { [EOL]                     Area side1 = new Area(new Rectangle2D.Double(arc.getStartPoint().getX(), plotArea.getY(), plotArea.getMaxX() - arc.getStartPoint().getX(), plotArea.getHeight())); [EOL]                     side1.intersect(front); [EOL]                     Area side2 = new Area(new Rectangle2D.Double(plotArea.getX(), plotArea.getY(), arc.getEndPoint().getX() - plotArea.getX(), plotArea.getHeight())); [EOL]                     side2.intersect(front); [EOL]                     g2.setPaint(paint); [EOL]                     if (drawFront) { [EOL]                         g2.fill(side1); [EOL]                         g2.fill(side2); [EOL]                     } [EOL]                     if (drawBack) { [EOL]                         g2.fill(back); [EOL]                     } [EOL]                     g2.setPaint(outlinePaint); [EOL]                     if (drawFront) { [EOL]                         g2.draw(side1); [EOL]                         g2.draw(side2); [EOL]                     } [EOL]                     if (drawBack) { [EOL]                         g2.draw(back); [EOL]                     } [EOL]                 } [EOL]             } else { [EOL]                 if (drawBack) { [EOL]                     Area side2 = new Area(new Rectangle2D.Double(arc.getEndPoint().getX(), plotArea.getY(), plotArea.getMaxX() - arc.getEndPoint().getX(), plotArea.getHeight())); [EOL]                     side2.intersect(back); [EOL]                     g2.setPaint(paint); [EOL]                     g2.fill(side2); [EOL]                     g2.setPaint(outlinePaint); [EOL]                     g2.draw(side2); [EOL]                 } [EOL]                 if (drawFront) { [EOL]                     Area side1 = new Area(new Rectangle2D.Double(arc.getStartPoint().getX(), plotArea.getY(), plotArea.getMaxX() - arc.getStartPoint().getX(), plotArea.getHeight())); [EOL]                     side1.intersect(front); [EOL]                     g2.setPaint(paint); [EOL]                     g2.fill(side1); [EOL]                     g2.setPaint(outlinePaint); [EOL]                     g2.draw(side1); [EOL]                 } [EOL]             } [EOL]         } else { [EOL]             if (!isAngleAtFront(end)) { [EOL]                 if (extent < 180.0) { [EOL]                     if (drawBack) { [EOL]                         Area side = new Area(new Rectangle2D.Double(arc.getEndPoint().getX(), plotArea.getY(), arc.getStartPoint().getX() - arc.getEndPoint().getX(), plotArea.getHeight())); [EOL]                         side.intersect(back); [EOL]                         g2.setPaint(paint); [EOL]                         g2.fill(side); [EOL]                         g2.setPaint(outlinePaint); [EOL]                         g2.draw(side); [EOL]                     } [EOL]                 } else { [EOL]                     Area side1 = new Area(new Rectangle2D.Double(arc.getStartPoint().getX(), plotArea.getY(), plotArea.getX() - arc.getStartPoint().getX(), plotArea.getHeight())); [EOL]                     side1.intersect(back); [EOL]                     Area side2 = new Area(new Rectangle2D.Double(arc.getEndPoint().getX(), plotArea.getY(), plotArea.getMaxX() - arc.getEndPoint().getX(), plotArea.getHeight())); [EOL]                     side2.intersect(back); [EOL]                     g2.setPaint(paint); [EOL]                     if (drawBack) { [EOL]                         g2.fill(side1); [EOL]                         g2.fill(side2); [EOL]                     } [EOL]                     if (drawFront) { [EOL]                         g2.fill(front); [EOL]                     } [EOL]                     g2.setPaint(outlinePaint); [EOL]                     if (drawBack) { [EOL]                         g2.draw(side1); [EOL]                         g2.draw(side2); [EOL]                     } [EOL]                     if (drawFront) { [EOL]                         g2.draw(front); [EOL]                     } [EOL]                 } [EOL]             } else { [EOL]                 if (drawBack) { [EOL]                     Area side1 = new Area(new Rectangle2D.Double(plotArea.getX(), plotArea.getY(), arc.getStartPoint().getX() - plotArea.getX(), plotArea.getHeight())); [EOL]                     side1.intersect(back); [EOL]                     g2.setPaint(paint); [EOL]                     g2.fill(side1); [EOL]                     g2.setPaint(outlinePaint); [EOL]                     g2.draw(side1); [EOL]                 } [EOL]                 if (drawFront) { [EOL]                     Area side2 = new Area(new Rectangle2D.Double(plotArea.getX(), plotArea.getY(), arc.getEndPoint().getX() - plotArea.getX(), plotArea.getHeight())); [EOL]                     side2.intersect(front); [EOL]                     g2.setPaint(paint); [EOL]                     g2.fill(side2); [EOL]                     g2.setPaint(outlinePaint); [EOL]                     g2.draw(side2); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 610,970
public String getPlotType() { [EOL]     return localizationResources.getString("Pie_3D_Plot"); [EOL] } <line_num>: 977,979
private boolean isAngleAtFront(double angle) { [EOL]     return (Math.sin(Math.toRadians(angle)) < 0.0); [EOL] } <line_num>: 990,992
private boolean isAngleAtBack(double angle) { [EOL]     return (Math.sin(Math.toRadians(angle)) > 0.0); [EOL] } <line_num>: 1003,1005
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof PiePlot3D)) { [EOL]         return false; [EOL]     } [EOL]     PiePlot3D that = (PiePlot3D) obj; [EOL]     if (this.depthFactor != that.depthFactor) { [EOL]         return false; [EOL]     } [EOL]     if (this.darkerSides != that.darkerSides) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 1014,1029
