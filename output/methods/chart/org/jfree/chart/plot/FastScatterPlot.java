public FastScatterPlot() { [EOL]     this(null, new NumberAxis("X"), new NumberAxis("Y")); [EOL] } <line_num>: 180,182
public FastScatterPlot(float[][] data, ValueAxis domainAxis, ValueAxis rangeAxis) { [EOL]     super(); [EOL]     if (domainAxis == null) { [EOL]         throw new IllegalArgumentException("Null 'domainAxis' argument."); [EOL]     } [EOL]     if (rangeAxis == null) { [EOL]         throw new IllegalArgumentException("Null 'rangeAxis' argument."); [EOL]     } [EOL]     this.data = data; [EOL]     this.xDataRange = calculateXDataRange(data); [EOL]     this.yDataRange = calculateYDataRange(data); [EOL]     this.domainAxis = domainAxis; [EOL]     this.domainAxis.setPlot(this); [EOL]     this.domainAxis.addChangeListener(this); [EOL]     this.rangeAxis = rangeAxis; [EOL]     this.rangeAxis.setPlot(this); [EOL]     this.rangeAxis.addChangeListener(this); [EOL]     this.paint = Color.red; [EOL]     this.domainGridlinesVisible = true; [EOL]     this.domainGridlinePaint = FastScatterPlot.DEFAULT_GRIDLINE_PAINT; [EOL]     this.domainGridlineStroke = FastScatterPlot.DEFAULT_GRIDLINE_STROKE; [EOL]     this.rangeGridlinesVisible = true; [EOL]     this.rangeGridlinePaint = FastScatterPlot.DEFAULT_GRIDLINE_PAINT; [EOL]     this.rangeGridlineStroke = FastScatterPlot.DEFAULT_GRIDLINE_STROKE; [EOL] } <line_num>: 193,224
public String getPlotType() { [EOL]     return localizationResources.getString("Fast_Scatter_Plot"); [EOL] } <line_num>: 231,233
public float[][] getData() { [EOL]     return this.data; [EOL] } <line_num>: 242,244
public void setData(float[][] data) { [EOL]     this.data = data; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 254,257
public PlotOrientation getOrientation() { [EOL]     return PlotOrientation.VERTICAL; [EOL] } <line_num>: 264,266
public ValueAxis getDomainAxis() { [EOL]     return this.domainAxis; [EOL] } <line_num>: 275,277
public void setDomainAxis(ValueAxis axis) { [EOL]     if (axis == null) { [EOL]         throw new IllegalArgumentException("Null 'axis' argument."); [EOL]     } [EOL]     this.domainAxis = axis; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 289,295
public ValueAxis getRangeAxis() { [EOL]     return this.rangeAxis; [EOL] } <line_num>: 304,306
public void setRangeAxis(ValueAxis axis) { [EOL]     if (axis == null) { [EOL]         throw new IllegalArgumentException("Null 'axis' argument."); [EOL]     } [EOL]     this.rangeAxis = axis; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 318,324
public Paint getPaint() { [EOL]     return this.paint; [EOL] } <line_num>: 334,336
public void setPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.paint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 346,352
public boolean isDomainGridlinesVisible() { [EOL]     return this.domainGridlinesVisible; [EOL] } <line_num>: 363,365
public void setDomainGridlinesVisible(boolean visible) { [EOL]     if (this.domainGridlinesVisible != visible) { [EOL]         this.domainGridlinesVisible = visible; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 376,381
public Stroke getDomainGridlineStroke() { [EOL]     return this.domainGridlineStroke; [EOL] } <line_num>: 391,393
public void setDomainGridlineStroke(Stroke stroke) { [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' argument."); [EOL]     } [EOL]     this.domainGridlineStroke = stroke; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 403,409
public Paint getDomainGridlinePaint() { [EOL]     return this.domainGridlinePaint; [EOL] } <line_num>: 419,421
public void setDomainGridlinePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.domainGridlinePaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 431,437
public boolean isRangeGridlinesVisible() { [EOL]     return this.rangeGridlinesVisible; [EOL] } <line_num>: 447,449
public void setRangeGridlinesVisible(boolean visible) { [EOL]     if (this.rangeGridlinesVisible != visible) { [EOL]         this.rangeGridlinesVisible = visible; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 460,465
public Stroke getRangeGridlineStroke() { [EOL]     return this.rangeGridlineStroke; [EOL] } <line_num>: 475,477
public void setRangeGridlineStroke(Stroke stroke) { [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' argument."); [EOL]     } [EOL]     this.rangeGridlineStroke = stroke; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 487,493
public Paint getRangeGridlinePaint() { [EOL]     return this.rangeGridlinePaint; [EOL] } <line_num>: 503,505
public void setRangeGridlinePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.rangeGridlinePaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 515,521
public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor, PlotState parentState, PlotRenderingInfo info) { [EOL]     if (info != null) { [EOL]         info.setPlotArea(area); [EOL]     } [EOL]     RectangleInsets insets = getInsets(); [EOL]     insets.trim(area); [EOL]     AxisSpace space = new AxisSpace(); [EOL]     space = this.domainAxis.reserveSpace(g2, this, area, RectangleEdge.BOTTOM, space); [EOL]     space = this.rangeAxis.reserveSpace(g2, this, area, RectangleEdge.LEFT, space); [EOL]     Rectangle2D dataArea = space.shrink(area, null); [EOL]     if (info != null) { [EOL]         info.setDataArea(dataArea); [EOL]     } [EOL]     drawBackground(g2, dataArea); [EOL]     AxisState domainAxisState = this.domainAxis.draw(g2, dataArea.getMaxY(), area, dataArea, RectangleEdge.BOTTOM, info); [EOL]     AxisState rangeAxisState = this.rangeAxis.draw(g2, dataArea.getMinX(), area, dataArea, RectangleEdge.LEFT, info); [EOL]     drawDomainGridlines(g2, dataArea, domainAxisState.getTicks()); [EOL]     drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks()); [EOL]     Shape originalClip = g2.getClip(); [EOL]     Composite originalComposite = g2.getComposite(); [EOL]     g2.clip(dataArea); [EOL]     g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, getForegroundAlpha())); [EOL]     render(g2, dataArea, info, null); [EOL]     g2.setClip(originalClip); [EOL]     g2.setComposite(originalComposite); [EOL]     drawOutline(g2, dataArea); [EOL] } <line_num>: 535,582
public void render(Graphics2D g2, Rectangle2D dataArea, PlotRenderingInfo info, CrosshairState crosshairState) { [EOL]     g2.setPaint(this.paint); [EOL]     if (this.data != null) { [EOL]         for (int i = 0; i < this.data[0].length; i++) { [EOL]             float x = this.data[0][i]; [EOL]             float y = this.data[1][i]; [EOL]             int transX = (int) this.domainAxis.valueToJava2D(x, dataArea, RectangleEdge.BOTTOM); [EOL]             int transY = (int) this.rangeAxis.valueToJava2D(y, dataArea, RectangleEdge.LEFT); [EOL]             g2.fillRect(transX, transY, 1, 1); [EOL]         } [EOL]     } [EOL] } <line_num>: 595,634
protected void drawDomainGridlines(Graphics2D g2, Rectangle2D dataArea, List ticks) { [EOL]     if (isDomainGridlinesVisible()) { [EOL]         Iterator iterator = ticks.iterator(); [EOL]         while (iterator.hasNext()) { [EOL]             ValueTick tick = (ValueTick) iterator.next(); [EOL]             double v = this.domainAxis.valueToJava2D(tick.getValue(), dataArea, RectangleEdge.BOTTOM); [EOL]             Line2D line = new Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY()); [EOL]             g2.setPaint(getDomainGridlinePaint()); [EOL]             g2.setStroke(getDomainGridlineStroke()); [EOL]             g2.draw(line); [EOL]         } [EOL]     } [EOL] } <line_num>: 643,660
protected void drawRangeGridlines(Graphics2D g2, Rectangle2D dataArea, List ticks) { [EOL]     if (isRangeGridlinesVisible()) { [EOL]         Iterator iterator = ticks.iterator(); [EOL]         while (iterator.hasNext()) { [EOL]             ValueTick tick = (ValueTick) iterator.next(); [EOL]             double v = this.rangeAxis.valueToJava2D(tick.getValue(), dataArea, RectangleEdge.LEFT); [EOL]             Line2D line = new Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v); [EOL]             g2.setPaint(getRangeGridlinePaint()); [EOL]             g2.setStroke(getRangeGridlineStroke()); [EOL]             g2.draw(line); [EOL]         } [EOL]     } [EOL] } <line_num>: 669,687
public Range getDataRange(ValueAxis axis) { [EOL]     Range result = null; [EOL]     if (axis == this.domainAxis) { [EOL]         result = this.xDataRange; [EOL]     } else if (axis == this.rangeAxis) { [EOL]         result = this.yDataRange; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 698,707
private Range calculateXDataRange(float[][] data) { [EOL]     Range result = null; [EOL]     if (data != null) { [EOL]         float lowest = Float.POSITIVE_INFINITY; [EOL]         float highest = Float.NEGATIVE_INFINITY; [EOL]         for (int i = 0; i < data[0].length; i++) { [EOL]             float v = data[0][i]; [EOL]             if (v < lowest) { [EOL]                 lowest = v; [EOL]             } [EOL]             if (v > highest) { [EOL]                 highest = v; [EOL]             } [EOL]         } [EOL]         if (lowest <= highest) { [EOL]             result = new Range(lowest, highest); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 716,739
private Range calculateYDataRange(float[][] data) { [EOL]     Range result = null; [EOL]     if (data != null) { [EOL]         float lowest = Float.POSITIVE_INFINITY; [EOL]         float highest = Float.NEGATIVE_INFINITY; [EOL]         for (int i = 0; i < data[0].length; i++) { [EOL]             float v = data[1][i]; [EOL]             if (v < lowest) { [EOL]                 lowest = v; [EOL]             } [EOL]             if (v > highest) { [EOL]                 highest = v; [EOL]             } [EOL]         } [EOL]         if (lowest <= highest) { [EOL]             result = new Range(lowest, highest); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 748,770
public void zoomDomainAxes(double factor, PlotRenderingInfo info, Point2D source) { [EOL]     this.domainAxis.resizeRange(factor); [EOL] } <line_num>: 779,782
public void zoomDomainAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) { [EOL]     if (useAnchor) { [EOL]         double sourceX = source.getX(); [EOL]         double anchorX = this.domainAxis.java2DToValue(sourceX, info.getDataArea(), RectangleEdge.BOTTOM); [EOL]         this.domainAxis.resizeRange2(factor, anchorX); [EOL]     } else { [EOL]         this.domainAxis.resizeRange(factor); [EOL]     } [EOL] } <line_num>: 796,811
public void zoomDomainAxes(double lowerPercent, double upperPercent, PlotRenderingInfo info, Point2D source) { [EOL]     this.domainAxis.zoomRange(lowerPercent, upperPercent); [EOL] } <line_num>: 823,826
public void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source) { [EOL]     this.rangeAxis.resizeRange(factor); [EOL] } <line_num>: 835,838
public void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) { [EOL]     if (useAnchor) { [EOL]         double sourceY = source.getY(); [EOL]         double anchorY = this.rangeAxis.java2DToValue(sourceY, info.getDataArea(), RectangleEdge.LEFT); [EOL]         this.rangeAxis.resizeRange2(factor, anchorY); [EOL]     } else { [EOL]         this.rangeAxis.resizeRange(factor); [EOL]     } [EOL] } <line_num>: 852,867
public void zoomRangeAxes(double lowerPercent, double upperPercent, PlotRenderingInfo info, Point2D source) { [EOL]     this.rangeAxis.zoomRange(lowerPercent, upperPercent); [EOL] } <line_num>: 879,882
public boolean isDomainZoomable() { [EOL]     return true; [EOL] } <line_num>: 889,891
public boolean isRangeZoomable() { [EOL]     return true; [EOL] } <line_num>: 898,900
public boolean isDomainPannable() { [EOL]     return this.domainPannable; [EOL] } <line_num>: 910,912
public void setDomainPannable(boolean pannable) { [EOL]     this.domainPannable = pannable; [EOL] } <line_num>: 922,924
public boolean isRangePannable() { [EOL]     return this.rangePannable; [EOL] } <line_num>: 934,936
public void setRangePannable(boolean pannable) { [EOL]     this.rangePannable = pannable; [EOL] } <line_num>: 946,948
public void panDomainAxes(double percent, PlotRenderingInfo info, Point2D source) { [EOL]     if (!isDomainPannable() || this.domainAxis == null) { [EOL]         return; [EOL]     } [EOL]     double length = this.domainAxis.getRange().getLength(); [EOL]     double adj = -percent * length; [EOL]     if (this.domainAxis.isInverted()) { [EOL]         adj = -adj; [EOL]     } [EOL]     this.domainAxis.setRange(this.domainAxis.getLowerBound() + adj, this.domainAxis.getUpperBound() + adj); [EOL] } <line_num>: 959,971
public void panRangeAxes(double percent, PlotRenderingInfo info, Point2D source) { [EOL]     if (!isRangePannable() || this.rangeAxis == null) { [EOL]         return; [EOL]     } [EOL]     double length = this.rangeAxis.getRange().getLength(); [EOL]     double adj = percent * length; [EOL]     if (this.rangeAxis.isInverted()) { [EOL]         adj = -adj; [EOL]     } [EOL]     this.rangeAxis.setRange(this.rangeAxis.getLowerBound() + adj, this.rangeAxis.getUpperBound() + adj); [EOL] } <line_num>: 982,994
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!super.equals(obj)) { [EOL]         return false; [EOL]     } [EOL]     if (!(obj instanceof FastScatterPlot)) { [EOL]         return false; [EOL]     } [EOL]     FastScatterPlot that = (FastScatterPlot) obj; [EOL]     if (this.domainPannable != that.domainPannable) { [EOL]         return false; [EOL]     } [EOL]     if (this.rangePannable != that.rangePannable) { [EOL]         return false; [EOL]     } [EOL]     if (!ArrayUtilities.equal(this.data, that.data)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.domainAxis, that.domainAxis)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.paint, that.paint)) { [EOL]         return false; [EOL]     } [EOL]     if (this.domainGridlinesVisible != that.domainGridlinesVisible) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.domainGridlinePaint, that.domainGridlinePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.domainGridlineStroke, that.domainGridlineStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.rangeGridlinesVisible == that.rangeGridlinesVisible) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.rangeGridlinePaint, that.rangeGridlinePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.rangeGridlineStroke, that.rangeGridlineStroke)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 1006,1058
public Object clone() throws CloneNotSupportedException { [EOL]     FastScatterPlot clone = (FastScatterPlot) super.clone(); [EOL]     if (this.data != null) { [EOL]         clone.data = ArrayUtilities.clone(this.data); [EOL]     } [EOL]     if (this.domainAxis != null) { [EOL]         clone.domainAxis = (ValueAxis) this.domainAxis.clone(); [EOL]         clone.domainAxis.setPlot(clone); [EOL]         clone.domainAxis.addChangeListener(clone); [EOL]     } [EOL]     if (this.rangeAxis != null) { [EOL]         clone.rangeAxis = (ValueAxis) this.rangeAxis.clone(); [EOL]         clone.rangeAxis.setPlot(clone); [EOL]         clone.rangeAxis.addChangeListener(clone); [EOL]     } [EOL]     return clone; [EOL] } <line_num>: 1068,1086
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writePaint(this.paint, stream); [EOL]     SerialUtilities.writeStroke(this.domainGridlineStroke, stream); [EOL]     SerialUtilities.writePaint(this.domainGridlinePaint, stream); [EOL]     SerialUtilities.writeStroke(this.rangeGridlineStroke, stream); [EOL]     SerialUtilities.writePaint(this.rangeGridlinePaint, stream); [EOL] } <line_num>: 1095,1102
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.paint = SerialUtilities.readPaint(stream); [EOL]     this.domainGridlineStroke = SerialUtilities.readStroke(stream); [EOL]     this.domainGridlinePaint = SerialUtilities.readPaint(stream); [EOL]     this.rangeGridlineStroke = SerialUtilities.readStroke(stream); [EOL]     this.rangeGridlinePaint = SerialUtilities.readPaint(stream); [EOL]     if (this.domainAxis != null) { [EOL]         this.domainAxis.addChangeListener(this); [EOL]     } [EOL]     if (this.rangeAxis != null) { [EOL]         this.rangeAxis.addChangeListener(this); [EOL]     } [EOL] } <line_num>: 1112,1130
