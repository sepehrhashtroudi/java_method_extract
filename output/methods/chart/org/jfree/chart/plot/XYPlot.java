public XYPlot() { [EOL]     this(null, null, null, null); [EOL] } <line_num>: 618,620
public XYPlot(XYDataset dataset, ValueAxis domainAxis, ValueAxis rangeAxis, XYItemRenderer renderer) { [EOL]     super(); [EOL]     this.orientation = PlotOrientation.VERTICAL; [EOL]     this.weight = 1; [EOL]     this.axisOffset = new RectangleInsets(4.0, 4.0, 4.0, 4.0); [EOL]     this.domainAxes = new ObjectList(); [EOL]     this.domainAxisLocations = new ObjectList(); [EOL]     this.foregroundDomainMarkers = new HashMap(); [EOL]     this.backgroundDomainMarkers = new HashMap(); [EOL]     this.rangeAxes = new ObjectList(); [EOL]     this.rangeAxisLocations = new ObjectList(); [EOL]     this.foregroundRangeMarkers = new HashMap(); [EOL]     this.backgroundRangeMarkers = new HashMap(); [EOL]     this.datasets = new ObjectList(); [EOL]     this.renderers = new ObjectList(); [EOL]     this.datasetToDomainAxesMap = new TreeMap(); [EOL]     this.datasetToRangeAxesMap = new TreeMap(); [EOL]     this.annotations = new java.util.ArrayList(); [EOL]     this.datasets.set(0, dataset); [EOL]     if (dataset != null) { [EOL]         dataset.addChangeListener(this); [EOL]     } [EOL]     this.renderers.set(0, renderer); [EOL]     if (renderer != null) { [EOL]         renderer.setPlot(this); [EOL]         renderer.addChangeListener(this); [EOL]     } [EOL]     this.domainAxes.set(0, domainAxis); [EOL]     this.mapDatasetToDomainAxis(0, 0); [EOL]     if (domainAxis != null) { [EOL]         domainAxis.setPlot(this); [EOL]         domainAxis.addChangeListener(this); [EOL]     } [EOL]     this.domainAxisLocations.set(0, AxisLocation.BOTTOM_OR_LEFT); [EOL]     this.rangeAxes.set(0, rangeAxis); [EOL]     this.mapDatasetToRangeAxis(0, 0); [EOL]     if (rangeAxis != null) { [EOL]         rangeAxis.setPlot(this); [EOL]         rangeAxis.addChangeListener(this); [EOL]     } [EOL]     this.rangeAxisLocations.set(0, AxisLocation.BOTTOM_OR_LEFT); [EOL]     configureDomainAxes(); [EOL]     configureRangeAxes(); [EOL]     this.domainGridlinesVisible = true; [EOL]     this.domainGridlineStroke = DEFAULT_GRIDLINE_STROKE; [EOL]     this.domainGridlinePaint = DEFAULT_GRIDLINE_PAINT; [EOL]     this.domainMinorGridlinesVisible = false; [EOL]     this.domainMinorGridlineStroke = DEFAULT_GRIDLINE_STROKE; [EOL]     this.domainMinorGridlinePaint = Color.white; [EOL]     this.domainZeroBaselineVisible = false; [EOL]     this.domainZeroBaselinePaint = Color.black; [EOL]     this.domainZeroBaselineStroke = new BasicStroke(0.5f); [EOL]     this.rangeGridlinesVisible = true; [EOL]     this.rangeGridlineStroke = DEFAULT_GRIDLINE_STROKE; [EOL]     this.rangeGridlinePaint = DEFAULT_GRIDLINE_PAINT; [EOL]     this.rangeMinorGridlinesVisible = false; [EOL]     this.rangeMinorGridlineStroke = DEFAULT_GRIDLINE_STROKE; [EOL]     this.rangeMinorGridlinePaint = Color.white; [EOL]     this.rangeZeroBaselineVisible = false; [EOL]     this.rangeZeroBaselinePaint = Color.black; [EOL]     this.rangeZeroBaselineStroke = new BasicStroke(0.5f); [EOL]     this.domainCrosshairVisible = false; [EOL]     this.domainCrosshairValue = 0.0; [EOL]     this.domainCrosshairStroke = DEFAULT_CROSSHAIR_STROKE; [EOL]     this.domainCrosshairPaint = DEFAULT_CROSSHAIR_PAINT; [EOL]     this.rangeCrosshairVisible = false; [EOL]     this.rangeCrosshairValue = 0.0; [EOL]     this.rangeCrosshairStroke = DEFAULT_CROSSHAIR_STROKE; [EOL]     this.rangeCrosshairPaint = DEFAULT_CROSSHAIR_PAINT; [EOL]     this.shadowGenerator = null; [EOL] } <line_num>: 633,727
public String getPlotType() { [EOL]     return localizationResources.getString("XY_Plot"); [EOL] } <line_num>: 734,736
public PlotOrientation getOrientation() { [EOL]     return this.orientation; [EOL] } <line_num>: 745,747
public void setOrientation(PlotOrientation orientation) { [EOL]     if (orientation == null) { [EOL]         throw new IllegalArgumentException("Null 'orientation' argument."); [EOL]     } [EOL]     if (orientation != this.orientation) { [EOL]         this.orientation = orientation; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 757,765
public RectangleInsets getAxisOffset() { [EOL]     return this.axisOffset; [EOL] } <line_num>: 774,776
public void setAxisOffset(RectangleInsets offset) { [EOL]     if (offset == null) { [EOL]         throw new IllegalArgumentException("Null 'offset' argument."); [EOL]     } [EOL]     this.axisOffset = offset; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 786,792
public ValueAxis getDomainAxis() { [EOL]     return getDomainAxis(0); [EOL] } <line_num>: 804,806
public ValueAxis getDomainAxis(int index) { [EOL]     ValueAxis result = null; [EOL]     if (index < this.domainAxes.size()) { [EOL]         result = (ValueAxis) this.domainAxes.get(index); [EOL]     } [EOL]     if (result == null) { [EOL]         Plot parent = getParent(); [EOL]         if (parent instanceof XYPlot) { [EOL]             XYPlot xy = (XYPlot) parent; [EOL]             result = xy.getDomainAxis(index); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 817,830
public void setDomainAxis(ValueAxis axis) { [EOL]     setDomainAxis(0, axis); [EOL] } <line_num>: 841,843
public void setDomainAxis(int index, ValueAxis axis) { [EOL]     setDomainAxis(index, axis, true); [EOL] } <line_num>: 855,857
public void setDomainAxis(int index, ValueAxis axis, boolean notify) { [EOL]     ValueAxis existing = getDomainAxis(index); [EOL]     if (existing != null) { [EOL]         existing.removeChangeListener(this); [EOL]     } [EOL]     if (axis != null) { [EOL]         axis.setPlot(this); [EOL]     } [EOL]     this.domainAxes.set(index, axis); [EOL]     if (axis != null) { [EOL]         axis.configure(); [EOL]         axis.addChangeListener(this); [EOL]     } [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 869,885
public void setDomainAxes(ValueAxis[] axes) { [EOL]     for (int i = 0; i < axes.length; i++) { [EOL]         setDomainAxis(i, axes[i], false); [EOL]     } [EOL]     fireChangeEvent(); [EOL] } <line_num>: 895,900
public AxisLocation getDomainAxisLocation() { [EOL]     return (AxisLocation) this.domainAxisLocations.get(0); [EOL] } <line_num>: 909,911
public void setDomainAxisLocation(AxisLocation location) { [EOL]     setDomainAxisLocation(0, location, true); [EOL] } <line_num>: 921,924
public void setDomainAxisLocation(AxisLocation location, boolean notify) { [EOL]     setDomainAxisLocation(0, location, notify); [EOL] } <line_num>: 935,938
public RectangleEdge getDomainAxisEdge() { [EOL]     return Plot.resolveDomainAxisLocation(getDomainAxisLocation(), this.orientation); [EOL] } <line_num>: 949,952
public int getDomainAxisCount() { [EOL]     return this.domainAxes.size(); [EOL] } <line_num>: 961,963
public void clearDomainAxes() { [EOL]     for (int i = 0; i < this.domainAxes.size(); i++) { [EOL]         ValueAxis axis = (ValueAxis) this.domainAxes.get(i); [EOL]         if (axis != null) { [EOL]             axis.removeChangeListener(this); [EOL]         } [EOL]     } [EOL]     this.domainAxes.clear(); [EOL]     fireChangeEvent(); [EOL] } <line_num>: 971,980
public void configureDomainAxes() { [EOL]     for (int i = 0; i < this.domainAxes.size(); i++) { [EOL]         ValueAxis axis = (ValueAxis) this.domainAxes.get(i); [EOL]         if (axis != null) { [EOL]             axis.configure(); [EOL]         } [EOL]     } [EOL] } <line_num>: 985,992
public AxisLocation getDomainAxisLocation(int index) { [EOL]     AxisLocation result = null; [EOL]     if (index < this.domainAxisLocations.size()) { [EOL]         result = (AxisLocation) this.domainAxisLocations.get(index); [EOL]     } [EOL]     if (result == null) { [EOL]         result = AxisLocation.getOpposite(getDomainAxisLocation()); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1005,1014
public void setDomainAxisLocation(int index, AxisLocation location) { [EOL]     setDomainAxisLocation(index, location, true); [EOL] } <line_num>: 1026,1029
public void setDomainAxisLocation(int index, AxisLocation location, boolean notify) { [EOL]     if (index == 0 && location == null) { [EOL]         throw new IllegalArgumentException("Null 'location' for index 0 not permitted."); [EOL]     } [EOL]     this.domainAxisLocations.set(index, location); [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 1045,1056
public RectangleEdge getDomainAxisEdge(int index) { [EOL]     AxisLocation location = getDomainAxisLocation(index); [EOL]     RectangleEdge result = Plot.resolveDomainAxisLocation(location, this.orientation); [EOL]     if (result == null) { [EOL]         result = RectangleEdge.opposite(getDomainAxisEdge()); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1067,1075
public ValueAxis getRangeAxis() { [EOL]     return getRangeAxis(0); [EOL] } <line_num>: 1087,1089
public void setRangeAxis(ValueAxis axis) { [EOL]     if (axis != null) { [EOL]         axis.setPlot(this); [EOL]     } [EOL]     ValueAxis existing = getRangeAxis(); [EOL]     if (existing != null) { [EOL]         existing.removeChangeListener(this); [EOL]     } [EOL]     this.rangeAxes.set(0, axis); [EOL]     if (axis != null) { [EOL]         axis.configure(); [EOL]         axis.addChangeListener(this); [EOL]     } [EOL]     fireChangeEvent(); [EOL] } <line_num>: 1100,1119
public AxisLocation getRangeAxisLocation() { [EOL]     return (AxisLocation) this.rangeAxisLocations.get(0); [EOL] } <line_num>: 1128,1130
public void setRangeAxisLocation(AxisLocation location) { [EOL]     setRangeAxisLocation(0, location, true); [EOL] } <line_num>: 1140,1143
public void setRangeAxisLocation(AxisLocation location, boolean notify) { [EOL]     setRangeAxisLocation(0, location, notify); [EOL] } <line_num>: 1154,1157
public RectangleEdge getRangeAxisEdge() { [EOL]     return Plot.resolveRangeAxisLocation(getRangeAxisLocation(), this.orientation); [EOL] } <line_num>: 1167,1170
public ValueAxis getRangeAxis(int index) { [EOL]     ValueAxis result = null; [EOL]     if (index < this.rangeAxes.size()) { [EOL]         result = (ValueAxis) this.rangeAxes.get(index); [EOL]     } [EOL]     if (result == null) { [EOL]         Plot parent = getParent(); [EOL]         if (parent instanceof XYPlot) { [EOL]             XYPlot xy = (XYPlot) parent; [EOL]             result = xy.getRangeAxis(index); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1181,1194
public void setRangeAxis(int index, ValueAxis axis) { [EOL]     setRangeAxis(index, axis, true); [EOL] } <line_num>: 1205,1207
public void setRangeAxis(int index, ValueAxis axis, boolean notify) { [EOL]     ValueAxis existing = getRangeAxis(index); [EOL]     if (existing != null) { [EOL]         existing.removeChangeListener(this); [EOL]     } [EOL]     if (axis != null) { [EOL]         axis.setPlot(this); [EOL]     } [EOL]     this.rangeAxes.set(index, axis); [EOL]     if (axis != null) { [EOL]         axis.configure(); [EOL]         axis.addChangeListener(this); [EOL]     } [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 1219,1235
public void setRangeAxes(ValueAxis[] axes) { [EOL]     for (int i = 0; i < axes.length; i++) { [EOL]         setRangeAxis(i, axes[i], false); [EOL]     } [EOL]     fireChangeEvent(); [EOL] } <line_num>: 1245,1250
public int getRangeAxisCount() { [EOL]     return this.rangeAxes.size(); [EOL] } <line_num>: 1259,1261
public void clearRangeAxes() { [EOL]     for (int i = 0; i < this.rangeAxes.size(); i++) { [EOL]         ValueAxis axis = (ValueAxis) this.rangeAxes.get(i); [EOL]         if (axis != null) { [EOL]             axis.removeChangeListener(this); [EOL]         } [EOL]     } [EOL]     this.rangeAxes.clear(); [EOL]     fireChangeEvent(); [EOL] } <line_num>: 1269,1278
public void configureRangeAxes() { [EOL]     for (int i = 0; i < this.rangeAxes.size(); i++) { [EOL]         ValueAxis axis = (ValueAxis) this.rangeAxes.get(i); [EOL]         if (axis != null) { [EOL]             axis.configure(); [EOL]         } [EOL]     } [EOL] } <line_num>: 1285,1292
public AxisLocation getRangeAxisLocation(int index) { [EOL]     AxisLocation result = null; [EOL]     if (index < this.rangeAxisLocations.size()) { [EOL]         result = (AxisLocation) this.rangeAxisLocations.get(index); [EOL]     } [EOL]     if (result == null) { [EOL]         result = AxisLocation.getOpposite(getRangeAxisLocation()); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1305,1314
public void setRangeAxisLocation(int index, AxisLocation location) { [EOL]     setRangeAxisLocation(index, location, true); [EOL] } <line_num>: 1325,1328
public void setRangeAxisLocation(int index, AxisLocation location, boolean notify) { [EOL]     if (index == 0 && location == null) { [EOL]         throw new IllegalArgumentException("Null 'location' for index 0 not permitted."); [EOL]     } [EOL]     this.rangeAxisLocations.set(index, location); [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 1344,1355
public RectangleEdge getRangeAxisEdge(int index) { [EOL]     AxisLocation location = getRangeAxisLocation(index); [EOL]     RectangleEdge result = Plot.resolveRangeAxisLocation(location, this.orientation); [EOL]     if (result == null) { [EOL]         result = RectangleEdge.opposite(getRangeAxisEdge()); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1367,1375
public XYDataset getDataset() { [EOL]     return getDataset(0); [EOL] } <line_num>: 1385,1387
public XYDataset getDataset(int index) { [EOL]     XYDataset result = null; [EOL]     if (this.datasets.size() > index) { [EOL]         result = (XYDataset) this.datasets.get(index); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1398,1404
public void setDataset(XYDataset dataset) { [EOL]     setDataset(0, dataset); [EOL] } <line_num>: 1415,1417
public void setDataset(int index, XYDataset dataset) { [EOL]     XYDataset existing = getDataset(index); [EOL]     if (existing != null) { [EOL]         existing.removeChangeListener(this); [EOL]     } [EOL]     this.datasets.set(index, dataset); [EOL]     if (dataset != null) { [EOL]         dataset.addChangeListener(this); [EOL]     } [EOL]     DatasetChangeEvent event = new DatasetChangeEvent(this, dataset, new DatasetChangeInfo()); [EOL]     datasetChanged(event); [EOL] } <line_num>: 1427,1442
public int getDatasetCount() { [EOL]     return this.datasets.size(); [EOL] } <line_num>: 1449,1451
public int indexOf(XYDataset dataset) { [EOL]     int result = -1; [EOL]     for (int i = 0; i < this.datasets.size(); i++) { [EOL]         if (dataset == this.datasets.get(i)) { [EOL]             result = i; [EOL]             break; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1461,1470
public void mapDatasetToDomainAxis(int index, int axisIndex) { [EOL]     List axisIndices = new java.util.ArrayList(1); [EOL]     axisIndices.add(new Integer(axisIndex)); [EOL]     mapDatasetToDomainAxes(index, axisIndices); [EOL] } <line_num>: 1481,1485
public void mapDatasetToDomainAxes(int index, List axisIndices) { [EOL]     if (index < 0) { [EOL]         throw new IllegalArgumentException("Requires 'index' >= 0."); [EOL]     } [EOL]     checkAxisIndices(axisIndices); [EOL]     Integer key = new Integer(index); [EOL]     this.datasetToDomainAxesMap.put(key, new ArrayList(axisIndices)); [EOL]     datasetChanged(new DatasetChangeEvent(this, getDataset(index), new DatasetChangeInfo())); [EOL] } <line_num>: 1497,1508
public void mapDatasetToRangeAxis(int index, int axisIndex) { [EOL]     List axisIndices = new java.util.ArrayList(1); [EOL]     axisIndices.add(new Integer(axisIndex)); [EOL]     mapDatasetToRangeAxes(index, axisIndices); [EOL] } <line_num>: 1519,1523
public void mapDatasetToRangeAxes(int index, List axisIndices) { [EOL]     if (index < 0) { [EOL]         throw new IllegalArgumentException("Requires 'index' >= 0."); [EOL]     } [EOL]     checkAxisIndices(axisIndices); [EOL]     Integer key = new Integer(index); [EOL]     this.datasetToRangeAxesMap.put(key, new ArrayList(axisIndices)); [EOL]     datasetChanged(new DatasetChangeEvent(this, getDataset(index), new DatasetChangeInfo())); [EOL] } <line_num>: 1535,1546
private void checkAxisIndices(List indices) { [EOL]     if (indices == null) { [EOL]         return; [EOL]     } [EOL]     int count = indices.size(); [EOL]     if (count == 0) { [EOL]         throw new IllegalArgumentException("Empty list not permitted."); [EOL]     } [EOL]     HashSet set = new HashSet(); [EOL]     for (int i = 0; i < count; i++) { [EOL]         Object item = indices.get(i); [EOL]         if (!(item instanceof Integer)) { [EOL]             throw new IllegalArgumentException("Indices must be Integer instances."); [EOL]         } [EOL]         if (set.contains(item)) { [EOL]             throw new IllegalArgumentException("Indices must be unique."); [EOL]         } [EOL]         set.add(item); [EOL]     } [EOL] } <line_num>: 1555,1578
public int getRendererCount() { [EOL]     return this.renderers.size(); [EOL] } <line_num>: 1587,1589
public XYItemRenderer getRenderer() { [EOL]     return getRenderer(0); [EOL] } <line_num>: 1598,1600
public XYItemRenderer getRenderer(int index) { [EOL]     XYItemRenderer result = null; [EOL]     if (this.renderers.size() > index) { [EOL]         result = (XYItemRenderer) this.renderers.get(index); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1611,1618
public void setRenderer(XYItemRenderer renderer) { [EOL]     setRenderer(0, renderer); [EOL] } <line_num>: 1629,1631
public void setRenderer(int index, XYItemRenderer renderer) { [EOL]     setRenderer(index, renderer, true); [EOL] } <line_num>: 1642,1644
public void setRenderer(int index, XYItemRenderer renderer, boolean notify) { [EOL]     XYItemRenderer existing = getRenderer(index); [EOL]     if (existing != null) { [EOL]         existing.removeChangeListener(this); [EOL]     } [EOL]     this.renderers.set(index, renderer); [EOL]     if (renderer != null) { [EOL]         renderer.setPlot(this); [EOL]         renderer.addChangeListener(this); [EOL]     } [EOL]     configureDomainAxes(); [EOL]     configureRangeAxes(); [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 1656,1672
public void setRenderers(XYItemRenderer[] renderers) { [EOL]     for (int i = 0; i < renderers.length; i++) { [EOL]         setRenderer(i, renderers[i], false); [EOL]     } [EOL]     fireChangeEvent(); [EOL] } <line_num>: 1680,1685
public DatasetRenderingOrder getDatasetRenderingOrder() { [EOL]     return this.datasetRenderingOrder; [EOL] } <line_num>: 1694,1696
public void setDatasetRenderingOrder(DatasetRenderingOrder order) { [EOL]     if (order == null) { [EOL]         throw new IllegalArgumentException("Null 'order' argument."); [EOL]     } [EOL]     this.datasetRenderingOrder = order; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 1708,1714
public SeriesRenderingOrder getSeriesRenderingOrder() { [EOL]     return this.seriesRenderingOrder; [EOL] } <line_num>: 1723,1725
public void setSeriesRenderingOrder(SeriesRenderingOrder order) { [EOL]     if (order == null) { [EOL]         throw new IllegalArgumentException("Null 'order' argument."); [EOL]     } [EOL]     this.seriesRenderingOrder = order; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 1737,1743
public int getIndexOf(XYItemRenderer renderer) { [EOL]     return this.renderers.indexOf(renderer); [EOL] } <line_num>: 1753,1755
public XYItemRenderer getRendererForDataset(XYDataset dataset) { [EOL]     XYItemRenderer result = null; [EOL]     for (int i = 0; i < this.datasets.size(); i++) { [EOL]         if (this.datasets.get(i) == dataset) { [EOL]             result = (XYItemRenderer) this.renderers.get(i); [EOL]             if (result == null) { [EOL]                 result = getRenderer(); [EOL]             } [EOL]             break; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1766,1778
public int getWeight() { [EOL]     return this.weight; [EOL] } <line_num>: 1788,1790
public void setWeight(int weight) { [EOL]     this.weight = weight; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 1800,1803
public boolean isDomainGridlinesVisible() { [EOL]     return this.domainGridlinesVisible; [EOL] } <line_num>: 1813,1815
public void setDomainGridlinesVisible(boolean visible) { [EOL]     if (this.domainGridlinesVisible != visible) { [EOL]         this.domainGridlinesVisible = visible; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 1828,1833
public boolean isDomainMinorGridlinesVisible() { [EOL]     return this.domainMinorGridlinesVisible; [EOL] } <line_num>: 1845,1847
public void setDomainMinorGridlinesVisible(boolean visible) { [EOL]     if (this.domainMinorGridlinesVisible != visible) { [EOL]         this.domainMinorGridlinesVisible = visible; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 1862,1867
public Stroke getDomainGridlineStroke() { [EOL]     return this.domainGridlineStroke; [EOL] } <line_num>: 1877,1879
public void setDomainGridlineStroke(Stroke stroke) { [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' argument."); [EOL]     } [EOL]     this.domainGridlineStroke = stroke; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 1892,1898
public Stroke getDomainMinorGridlineStroke() { [EOL]     return this.domainMinorGridlineStroke; [EOL] } <line_num>: 1911,1913
public void setDomainMinorGridlineStroke(Stroke stroke) { [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' argument."); [EOL]     } [EOL]     this.domainMinorGridlineStroke = stroke; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 1928,1934
public Paint getDomainGridlinePaint() { [EOL]     return this.domainGridlinePaint; [EOL] } <line_num>: 1944,1946
public void setDomainGridlinePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.domainGridlinePaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 1959,1965
public Paint getDomainMinorGridlinePaint() { [EOL]     return this.domainMinorGridlinePaint; [EOL] } <line_num>: 1977,1979
public void setDomainMinorGridlinePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.domainMinorGridlinePaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 1994,2000
public boolean isRangeGridlinesVisible() { [EOL]     return this.rangeGridlinesVisible; [EOL] } <line_num>: 2010,2012
public void setRangeGridlinesVisible(boolean visible) { [EOL]     if (this.rangeGridlinesVisible != visible) { [EOL]         this.rangeGridlinesVisible = visible; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 2025,2030
public Stroke getRangeGridlineStroke() { [EOL]     return this.rangeGridlineStroke; [EOL] } <line_num>: 2040,2042
public void setRangeGridlineStroke(Stroke stroke) { [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' argument."); [EOL]     } [EOL]     this.rangeGridlineStroke = stroke; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 2052,2058
public Paint getRangeGridlinePaint() { [EOL]     return this.rangeGridlinePaint; [EOL] } <line_num>: 2068,2070
public void setRangeGridlinePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.rangeGridlinePaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 2080,2086
public boolean isRangeMinorGridlinesVisible() { [EOL]     return this.rangeMinorGridlinesVisible; [EOL] } <line_num>: 2098,2100
public void setRangeMinorGridlinesVisible(boolean visible) { [EOL]     if (this.rangeMinorGridlinesVisible != visible) { [EOL]         this.rangeMinorGridlinesVisible = visible; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 2115,2120
public Stroke getRangeMinorGridlineStroke() { [EOL]     return this.rangeMinorGridlineStroke; [EOL] } <line_num>: 2132,2134
public void setRangeMinorGridlineStroke(Stroke stroke) { [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' argument."); [EOL]     } [EOL]     this.rangeMinorGridlineStroke = stroke; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 2146,2152
public Paint getRangeMinorGridlinePaint() { [EOL]     return this.rangeMinorGridlinePaint; [EOL] } <line_num>: 2164,2166
public void setRangeMinorGridlinePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.rangeMinorGridlinePaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 2178,2184
public boolean isDomainZeroBaselineVisible() { [EOL]     return this.domainZeroBaselineVisible; [EOL] } <line_num>: 2196,2198
public void setDomainZeroBaselineVisible(boolean visible) { [EOL]     this.domainZeroBaselineVisible = visible; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 2211,2214
public Stroke getDomainZeroBaselineStroke() { [EOL]     return this.domainZeroBaselineStroke; [EOL] } <line_num>: 2225,2227
public void setDomainZeroBaselineStroke(Stroke stroke) { [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' argument."); [EOL]     } [EOL]     this.domainZeroBaselineStroke = stroke; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 2239,2245
public Paint getDomainZeroBaselinePaint() { [EOL]     return this.domainZeroBaselinePaint; [EOL] } <line_num>: 2257,2259
public void setDomainZeroBaselinePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.domainZeroBaselinePaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 2271,2277
public boolean isRangeZeroBaselineVisible() { [EOL]     return this.rangeZeroBaselineVisible; [EOL] } <line_num>: 2287,2289
public void setRangeZeroBaselineVisible(boolean visible) { [EOL]     this.rangeZeroBaselineVisible = visible; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 2300,2303
public Stroke getRangeZeroBaselineStroke() { [EOL]     return this.rangeZeroBaselineStroke; [EOL] } <line_num>: 2312,2314
public void setRangeZeroBaselineStroke(Stroke stroke) { [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' argument."); [EOL]     } [EOL]     this.rangeZeroBaselineStroke = stroke; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 2324,2330
public Paint getRangeZeroBaselinePaint() { [EOL]     return this.rangeZeroBaselinePaint; [EOL] } <line_num>: 2340,2342
public void setRangeZeroBaselinePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.rangeZeroBaselinePaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 2352,2358
public Paint getDomainTickBandPaint() { [EOL]     return this.domainTickBandPaint; [EOL] } <line_num>: 2368,2370
public void setDomainTickBandPaint(Paint paint) { [EOL]     this.domainTickBandPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 2379,2382
public Paint getRangeTickBandPaint() { [EOL]     return this.rangeTickBandPaint; [EOL] } <line_num>: 2392,2394
public void setRangeTickBandPaint(Paint paint) { [EOL]     this.rangeTickBandPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 2403,2406
public Point2D getQuadrantOrigin() { [EOL]     return this.quadrantOrigin; [EOL] } <line_num>: 2416,2418
public void setQuadrantOrigin(Point2D origin) { [EOL]     if (origin == null) { [EOL]         throw new IllegalArgumentException("Null 'origin' argument."); [EOL]     } [EOL]     this.quadrantOrigin = origin; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 2428,2434
public Paint getQuadrantPaint(int index) { [EOL]     if (index < 0 || index > 3) { [EOL]         throw new IllegalArgumentException("The index value (" + index + ") should be in the range 0 to 3."); [EOL]     } [EOL]     return this.quadrantPaint[index]; [EOL] } <line_num>: 2445,2451
public void setQuadrantPaint(int index, Paint paint) { [EOL]     if (index < 0 || index > 3) { [EOL]         throw new IllegalArgumentException("The index value (" + index + ") should be in the range 0 to 3."); [EOL]     } [EOL]     this.quadrantPaint[index] = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 2462,2469
public void addDomainMarker(Marker marker) { [EOL]     addDomainMarker(marker, Layer.FOREGROUND); [EOL] } <line_num>: 2483,2486
public void addDomainMarker(Marker marker, Layer layer) { [EOL]     addDomainMarker(0, marker, layer); [EOL] } <line_num>: 2500,2502
public void clearDomainMarkers() { [EOL]     if (this.backgroundDomainMarkers != null) { [EOL]         Set keys = this.backgroundDomainMarkers.keySet(); [EOL]         Iterator iterator = keys.iterator(); [EOL]         while (iterator.hasNext()) { [EOL]             Integer key = (Integer) iterator.next(); [EOL]             clearDomainMarkers(key.intValue()); [EOL]         } [EOL]         this.backgroundDomainMarkers.clear(); [EOL]     } [EOL]     if (this.foregroundDomainMarkers != null) { [EOL]         Set keys = this.foregroundDomainMarkers.keySet(); [EOL]         Iterator iterator = keys.iterator(); [EOL]         while (iterator.hasNext()) { [EOL]             Integer key = (Integer) iterator.next(); [EOL]             clearDomainMarkers(key.intValue()); [EOL]         } [EOL]         this.foregroundDomainMarkers.clear(); [EOL]     } [EOL]     fireChangeEvent(); [EOL] } <line_num>: 2510,2530
public void clearDomainMarkers(int index) { [EOL]     Integer key = new Integer(index); [EOL]     if (this.backgroundDomainMarkers != null) { [EOL]         Collection markers = (Collection) this.backgroundDomainMarkers.get(key); [EOL]         if (markers != null) { [EOL]             Iterator iterator = markers.iterator(); [EOL]             while (iterator.hasNext()) { [EOL]                 Marker m = (Marker) iterator.next(); [EOL]                 m.removeChangeListener(this); [EOL]             } [EOL]             markers.clear(); [EOL]         } [EOL]     } [EOL]     if (this.foregroundRangeMarkers != null) { [EOL]         Collection markers = (Collection) this.foregroundDomainMarkers.get(key); [EOL]         if (markers != null) { [EOL]             Iterator iterator = markers.iterator(); [EOL]             while (iterator.hasNext()) { [EOL]                 Marker m = (Marker) iterator.next(); [EOL]                 m.removeChangeListener(this); [EOL]             } [EOL]             markers.clear(); [EOL]         } [EOL]     } [EOL]     fireChangeEvent(); [EOL] } <line_num>: 2540,2567
public void addDomainMarker(int index, Marker marker, Layer layer) { [EOL]     addDomainMarker(index, marker, layer, true); [EOL] } <line_num>: 2584,2586
public void addDomainMarker(int index, Marker marker, Layer layer, boolean notify) { [EOL]     if (marker == null) { [EOL]         throw new IllegalArgumentException("Null 'marker' not permitted."); [EOL]     } [EOL]     if (layer == null) { [EOL]         throw new IllegalArgumentException("Null 'layer' not permitted."); [EOL]     } [EOL]     Collection markers; [EOL]     if (layer == Layer.FOREGROUND) { [EOL]         markers = (Collection) this.foregroundDomainMarkers.get(new Integer(index)); [EOL]         if (markers == null) { [EOL]             markers = new java.util.ArrayList(); [EOL]             this.foregroundDomainMarkers.put(new Integer(index), markers); [EOL]         } [EOL]         markers.add(marker); [EOL]     } else if (layer == Layer.BACKGROUND) { [EOL]         markers = (Collection) this.backgroundDomainMarkers.get(new Integer(index)); [EOL]         if (markers == null) { [EOL]             markers = new java.util.ArrayList(); [EOL]             this.backgroundDomainMarkers.put(new Integer(index), markers); [EOL]         } [EOL]         markers.add(marker); [EOL]     } [EOL]     marker.addChangeListener(this); [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 2603,2634
public boolean removeDomainMarker(Marker marker) { [EOL]     return removeDomainMarker(marker, Layer.FOREGROUND); [EOL] } <line_num>: 2647,2649
public boolean removeDomainMarker(Marker marker, Layer layer) { [EOL]     return removeDomainMarker(0, marker, layer); [EOL] } <line_num>: 2663,2665
public boolean removeDomainMarker(int index, Marker marker, Layer layer) { [EOL]     return removeDomainMarker(index, marker, layer, true); [EOL] } <line_num>: 2680,2682
public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) { [EOL]     ArrayList markers; [EOL]     if (layer == Layer.FOREGROUND) { [EOL]         markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(index)); [EOL]     } else { [EOL]         markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(index)); [EOL]     } [EOL]     if (markers == null) { [EOL]         return false; [EOL]     } [EOL]     boolean removed = markers.remove(marker); [EOL]     if (removed && notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL]     return removed; [EOL] } <line_num>: 2698,2717
public void addRangeMarker(Marker marker) { [EOL]     addRangeMarker(marker, Layer.FOREGROUND); [EOL] } <line_num>: 2730,2732
public void addRangeMarker(Marker marker, Layer layer) { [EOL]     addRangeMarker(0, marker, layer); [EOL] } <line_num>: 2746,2748
public void clearRangeMarkers() { [EOL]     if (this.backgroundRangeMarkers != null) { [EOL]         Set keys = this.backgroundRangeMarkers.keySet(); [EOL]         Iterator iterator = keys.iterator(); [EOL]         while (iterator.hasNext()) { [EOL]             Integer key = (Integer) iterator.next(); [EOL]             clearRangeMarkers(key.intValue()); [EOL]         } [EOL]         this.backgroundRangeMarkers.clear(); [EOL]     } [EOL]     if (this.foregroundRangeMarkers != null) { [EOL]         Set keys = this.foregroundRangeMarkers.keySet(); [EOL]         Iterator iterator = keys.iterator(); [EOL]         while (iterator.hasNext()) { [EOL]             Integer key = (Integer) iterator.next(); [EOL]             clearRangeMarkers(key.intValue()); [EOL]         } [EOL]         this.foregroundRangeMarkers.clear(); [EOL]     } [EOL]     fireChangeEvent(); [EOL] } <line_num>: 2756,2776
public void addRangeMarker(int index, Marker marker, Layer layer) { [EOL]     addRangeMarker(index, marker, layer, true); [EOL] } <line_num>: 2792,2794
public void addRangeMarker(int index, Marker marker, Layer layer, boolean notify) { [EOL]     Collection markers; [EOL]     if (layer == Layer.FOREGROUND) { [EOL]         markers = (Collection) this.foregroundRangeMarkers.get(new Integer(index)); [EOL]         if (markers == null) { [EOL]             markers = new java.util.ArrayList(); [EOL]             this.foregroundRangeMarkers.put(new Integer(index), markers); [EOL]         } [EOL]         markers.add(marker); [EOL]     } else if (layer == Layer.BACKGROUND) { [EOL]         markers = (Collection) this.backgroundRangeMarkers.get(new Integer(index)); [EOL]         if (markers == null) { [EOL]             markers = new java.util.ArrayList(); [EOL]             this.backgroundRangeMarkers.put(new Integer(index), markers); [EOL]         } [EOL]         markers.add(marker); [EOL]     } [EOL]     marker.addChangeListener(this); [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 2810,2835
public void clearRangeMarkers(int index) { [EOL]     Integer key = new Integer(index); [EOL]     if (this.backgroundRangeMarkers != null) { [EOL]         Collection markers = (Collection) this.backgroundRangeMarkers.get(key); [EOL]         if (markers != null) { [EOL]             Iterator iterator = markers.iterator(); [EOL]             while (iterator.hasNext()) { [EOL]                 Marker m = (Marker) iterator.next(); [EOL]                 m.removeChangeListener(this); [EOL]             } [EOL]             markers.clear(); [EOL]         } [EOL]     } [EOL]     if (this.foregroundRangeMarkers != null) { [EOL]         Collection markers = (Collection) this.foregroundRangeMarkers.get(key); [EOL]         if (markers != null) { [EOL]             Iterator iterator = markers.iterator(); [EOL]             while (iterator.hasNext()) { [EOL]                 Marker m = (Marker) iterator.next(); [EOL]                 m.removeChangeListener(this); [EOL]             } [EOL]             markers.clear(); [EOL]         } [EOL]     } [EOL]     fireChangeEvent(); [EOL] } <line_num>: 2843,2870
public boolean removeRangeMarker(Marker marker) { [EOL]     return removeRangeMarker(marker, Layer.FOREGROUND); [EOL] } <line_num>: 2883,2885
public boolean removeRangeMarker(Marker marker, Layer layer) { [EOL]     return removeRangeMarker(0, marker, layer); [EOL] } <line_num>: 2899,2901
public boolean removeRangeMarker(int index, Marker marker, Layer layer) { [EOL]     return removeRangeMarker(index, marker, layer, true); [EOL] } <line_num>: 2916,2918
public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) { [EOL]     if (marker == null) { [EOL]         throw new IllegalArgumentException("Null 'marker' argument."); [EOL]     } [EOL]     ArrayList markers; [EOL]     if (layer == Layer.FOREGROUND) { [EOL]         markers = (ArrayList) this.foregroundRangeMarkers.get(new Integer(index)); [EOL]     } else { [EOL]         markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(index)); [EOL]     } [EOL]     if (markers == null) { [EOL]         return false; [EOL]     } [EOL]     boolean removed = markers.remove(marker); [EOL]     if (removed && notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL]     return removed; [EOL] } <line_num>: 2934,2956
public void addAnnotation(XYAnnotation annotation) { [EOL]     addAnnotation(annotation, true); [EOL] } <line_num>: 2967,2969
public void addAnnotation(XYAnnotation annotation, boolean notify) { [EOL]     if (annotation == null) { [EOL]         throw new IllegalArgumentException("Null 'annotation' argument."); [EOL]     } [EOL]     this.annotations.add(annotation); [EOL]     annotation.addChangeListener(this); [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 2980,2989
public boolean removeAnnotation(XYAnnotation annotation) { [EOL]     return removeAnnotation(annotation, true); [EOL] } <line_num>: 3002,3004
public boolean removeAnnotation(XYAnnotation annotation, boolean notify) { [EOL]     if (annotation == null) { [EOL]         throw new IllegalArgumentException("Null 'annotation' argument."); [EOL]     } [EOL]     boolean removed = this.annotations.remove(annotation); [EOL]     annotation.removeChangeListener(this); [EOL]     if (removed && notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL]     return removed; [EOL] } <line_num>: 3017,3027
public List getAnnotations() { [EOL]     return new ArrayList(this.annotations); [EOL] } <line_num>: 3038,3040
public void clearAnnotations() { [EOL]     for (int i = 0; i < this.annotations.size(); i++) { [EOL]         XYAnnotation annotation = (XYAnnotation) this.annotations.get(i); [EOL]         annotation.removeChangeListener(this); [EOL]     } [EOL]     this.annotations.clear(); [EOL]     fireChangeEvent(); [EOL] } <line_num>: 3048,3055
public ShadowGenerator getShadowGenerator() { [EOL]     return this.shadowGenerator; [EOL] } <line_num>: 3064,3066
public void setShadowGenerator(ShadowGenerator generator) { [EOL]     this.shadowGenerator = generator; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 3079,3082
protected AxisSpace calculateAxisSpace(Graphics2D g2, Rectangle2D plotArea) { [EOL]     AxisSpace space = new AxisSpace(); [EOL]     space = calculateRangeAxisSpace(g2, plotArea, space); [EOL]     Rectangle2D revPlotArea = space.shrink(plotArea, null); [EOL]     space = calculateDomainAxisSpace(g2, revPlotArea, space); [EOL]     return space; [EOL] } <line_num>: 3092,3099
protected AxisSpace calculateDomainAxisSpace(Graphics2D g2, Rectangle2D plotArea, AxisSpace space) { [EOL]     if (space == null) { [EOL]         space = new AxisSpace(); [EOL]     } [EOL]     if (this.fixedDomainAxisSpace != null) { [EOL]         if (this.orientation == PlotOrientation.HORIZONTAL) { [EOL]             space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(), RectangleEdge.LEFT); [EOL]             space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(), RectangleEdge.RIGHT); [EOL]         } else if (this.orientation == PlotOrientation.VERTICAL) { [EOL]             space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(), RectangleEdge.TOP); [EOL]             space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(), RectangleEdge.BOTTOM); [EOL]         } [EOL]     } else { [EOL]         for (int i = 0; i < this.domainAxes.size(); i++) { [EOL]             Axis axis = (Axis) this.domainAxes.get(i); [EOL]             if (axis != null) { [EOL]                 RectangleEdge edge = getDomainAxisEdge(i); [EOL]                 space = axis.reserveSpace(g2, this, plotArea, edge, space); [EOL]             } [EOL]         } [EOL]     } [EOL]     return space; [EOL] } <line_num>: 3110,3146
protected AxisSpace calculateRangeAxisSpace(Graphics2D g2, Rectangle2D plotArea, AxisSpace space) { [EOL]     if (space == null) { [EOL]         space = new AxisSpace(); [EOL]     } [EOL]     if (this.fixedRangeAxisSpace != null) { [EOL]         if (this.orientation == PlotOrientation.HORIZONTAL) { [EOL]             space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(), RectangleEdge.TOP); [EOL]             space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(), RectangleEdge.BOTTOM); [EOL]         } else if (this.orientation == PlotOrientation.VERTICAL) { [EOL]             space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(), RectangleEdge.LEFT); [EOL]             space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(), RectangleEdge.RIGHT); [EOL]         } [EOL]     } else { [EOL]         for (int i = 0; i < this.rangeAxes.size(); i++) { [EOL]             Axis axis = (Axis) this.rangeAxes.get(i); [EOL]             if (axis != null) { [EOL]                 RectangleEdge edge = getRangeAxisEdge(i); [EOL]                 space = axis.reserveSpace(g2, this, plotArea, edge, space); [EOL]             } [EOL]         } [EOL]     } [EOL]     return space; [EOL] } <line_num>: 3157,3192
private Rectangle integerise(Rectangle2D rect) { [EOL]     int x0 = (int) Math.ceil(rect.getMinX()); [EOL]     int y0 = (int) Math.ceil(rect.getMinY()); [EOL]     int x1 = (int) Math.floor(rect.getMaxX()); [EOL]     int y1 = (int) Math.floor(rect.getMaxY()); [EOL]     return new Rectangle(x0, y0, (x1 - x0), (y1 - y0)); [EOL] } <line_num>: 3201,3207
public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor, PlotState parentState, PlotRenderingInfo info) { [EOL]     boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW); [EOL]     boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW); [EOL]     if (b1 || b2) { [EOL]         return; [EOL]     } [EOL]     if (info != null) { [EOL]         info.setPlotArea(area); [EOL]     } [EOL]     RectangleInsets insets = getInsets(); [EOL]     insets.trim(area); [EOL]     AxisSpace space = calculateAxisSpace(g2, area); [EOL]     Rectangle2D dataArea = space.shrink(area, null); [EOL]     this.axisOffset.trim(dataArea); [EOL]     dataArea = integerise(dataArea); [EOL]     if (dataArea.isEmpty()) { [EOL]         return; [EOL]     } [EOL]     createAndAddEntity((Rectangle2D) dataArea.clone(), info, null, null); [EOL]     if (info != null) { [EOL]         info.setDataArea(dataArea); [EOL]     } [EOL]     drawBackground(g2, dataArea); [EOL]     Map axisStateMap = drawAxes(g2, area, dataArea, info); [EOL]     PlotOrientation orient = getOrientation(); [EOL]     if (anchor != null && !dataArea.contains(anchor)) { [EOL]         anchor = null; [EOL]     } [EOL]     CrosshairState crosshairState = new CrosshairState(); [EOL]     crosshairState.setCrosshairDistance(Double.POSITIVE_INFINITY); [EOL]     crosshairState.setAnchor(anchor); [EOL]     crosshairState.setAnchorX(Double.NaN); [EOL]     crosshairState.setAnchorY(Double.NaN); [EOL]     if (anchor != null) { [EOL]         ValueAxis domainAxis = getDomainAxis(); [EOL]         if (domainAxis != null) { [EOL]             double x; [EOL]             if (orient == PlotOrientation.VERTICAL) { [EOL]                 x = domainAxis.java2DToValue(anchor.getX(), dataArea, getDomainAxisEdge()); [EOL]             } else { [EOL]                 x = domainAxis.java2DToValue(anchor.getY(), dataArea, getDomainAxisEdge()); [EOL]             } [EOL]             crosshairState.setAnchorX(x); [EOL]         } [EOL]         ValueAxis rangeAxis = getRangeAxis(); [EOL]         if (rangeAxis != null) { [EOL]             double y; [EOL]             if (orient == PlotOrientation.VERTICAL) { [EOL]                 y = rangeAxis.java2DToValue(anchor.getY(), dataArea, getRangeAxisEdge()); [EOL]             } else { [EOL]                 y = rangeAxis.java2DToValue(anchor.getX(), dataArea, getRangeAxisEdge()); [EOL]             } [EOL]             crosshairState.setAnchorY(y); [EOL]         } [EOL]     } [EOL]     crosshairState.setCrosshairX(getDomainCrosshairValue()); [EOL]     crosshairState.setCrosshairY(getRangeCrosshairValue()); [EOL]     Shape originalClip = g2.getClip(); [EOL]     Composite originalComposite = g2.getComposite(); [EOL]     g2.clip(dataArea); [EOL]     g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, getForegroundAlpha())); [EOL]     AxisState domainAxisState = (AxisState) axisStateMap.get(getDomainAxis()); [EOL]     if (domainAxisState == null) { [EOL]         if (parentState != null) { [EOL]             domainAxisState = (AxisState) parentState.getSharedAxisStates().get(getDomainAxis()); [EOL]         } [EOL]     } [EOL]     AxisState rangeAxisState = (AxisState) axisStateMap.get(getRangeAxis()); [EOL]     if (rangeAxisState == null) { [EOL]         if (parentState != null) { [EOL]             rangeAxisState = (AxisState) parentState.getSharedAxisStates().get(getRangeAxis()); [EOL]         } [EOL]     } [EOL]     if (domainAxisState != null) { [EOL]         drawDomainTickBands(g2, dataArea, domainAxisState.getTicks()); [EOL]     } [EOL]     if (rangeAxisState != null) { [EOL]         drawRangeTickBands(g2, dataArea, rangeAxisState.getTicks()); [EOL]     } [EOL]     if (domainAxisState != null) { [EOL]         drawDomainGridlines(g2, dataArea, domainAxisState.getTicks()); [EOL]         drawZeroDomainBaseline(g2, dataArea); [EOL]     } [EOL]     if (rangeAxisState != null) { [EOL]         drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks()); [EOL]         drawZeroRangeBaseline(g2, dataArea); [EOL]     } [EOL]     Graphics2D savedG2 = g2; [EOL]     Rectangle2D savedDataArea = dataArea; [EOL]     BufferedImage dataImage = null; [EOL]     if (this.shadowGenerator != null) { [EOL]         dataImage = new BufferedImage((int) dataArea.getWidth(), (int) dataArea.getHeight(), BufferedImage.TYPE_INT_ARGB); [EOL]         g2 = dataImage.createGraphics(); [EOL]         g2.setRenderingHints(savedG2.getRenderingHints()); [EOL]         dataArea = new Rectangle(0, 0, dataImage.getWidth(), dataImage.getHeight()); [EOL]     } [EOL]     for (int i = 0; i < this.renderers.size(); i++) { [EOL]         drawDomainMarkers(g2, dataArea, i, Layer.BACKGROUND); [EOL]     } [EOL]     for (int i = 0; i < this.renderers.size(); i++) { [EOL]         drawRangeMarkers(g2, dataArea, i, Layer.BACKGROUND); [EOL]     } [EOL]     boolean foundData = false; [EOL]     DatasetRenderingOrder order = getDatasetRenderingOrder(); [EOL]     if (order == DatasetRenderingOrder.FORWARD) { [EOL]         int rendererCount = this.renderers.size(); [EOL]         for (int i = 0; i < rendererCount; i++) { [EOL]             XYItemRenderer r = getRenderer(i); [EOL]             if (r != null) { [EOL]                 ValueAxis domainAxis = getDomainAxisForDataset(i); [EOL]                 ValueAxis rangeAxis = getRangeAxisForDataset(i); [EOL]                 r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, Layer.BACKGROUND, info); [EOL]             } [EOL]         } [EOL]         for (int i = 0; i < getDatasetCount(); i++) { [EOL]             foundData = render(g2, dataArea, i, info, crosshairState) || foundData; [EOL]         } [EOL]         for (int i = 0; i < rendererCount; i++) { [EOL]             XYItemRenderer r = getRenderer(i); [EOL]             if (r != null) { [EOL]                 ValueAxis domainAxis = getDomainAxisForDataset(i); [EOL]                 ValueAxis rangeAxis = getRangeAxisForDataset(i); [EOL]                 r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, Layer.FOREGROUND, info); [EOL]             } [EOL]         } [EOL]     } else if (order == DatasetRenderingOrder.REVERSE) { [EOL]         int rendererCount = this.renderers.size(); [EOL]         for (int i = rendererCount - 1; i >= 0; i--) { [EOL]             XYItemRenderer r = getRenderer(i); [EOL]             if (i >= getDatasetCount()) { [EOL]                 continue; [EOL]             } [EOL]             if (r != null) { [EOL]                 ValueAxis domainAxis = getDomainAxisForDataset(i); [EOL]                 ValueAxis rangeAxis = getRangeAxisForDataset(i); [EOL]                 r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, Layer.BACKGROUND, info); [EOL]             } [EOL]         } [EOL]         for (int i = getDatasetCount() - 1; i >= 0; i--) { [EOL]             foundData = render(g2, dataArea, i, info, crosshairState) || foundData; [EOL]         } [EOL]         for (int i = rendererCount - 1; i >= 0; i--) { [EOL]             XYItemRenderer r = getRenderer(i); [EOL]             if (i >= getDatasetCount()) { [EOL]                 continue; [EOL]             } [EOL]             if (r != null) { [EOL]                 ValueAxis domainAxis = getDomainAxisForDataset(i); [EOL]                 ValueAxis rangeAxis = getRangeAxisForDataset(i); [EOL]                 r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, Layer.FOREGROUND, info); [EOL]             } [EOL]         } [EOL]     } [EOL]     int xAxisIndex = crosshairState.getDomainAxisIndex(); [EOL]     ValueAxis xAxis = getDomainAxis(xAxisIndex); [EOL]     RectangleEdge xAxisEdge = getDomainAxisEdge(xAxisIndex); [EOL]     if (!this.domainCrosshairLockedOnData && anchor != null) { [EOL]         double xx; [EOL]         if (orient == PlotOrientation.VERTICAL) { [EOL]             xx = xAxis.java2DToValue(anchor.getX(), dataArea, xAxisEdge); [EOL]         } else { [EOL]             xx = xAxis.java2DToValue(anchor.getY(), dataArea, xAxisEdge); [EOL]         } [EOL]         crosshairState.setCrosshairX(xx); [EOL]     } [EOL]     setDomainCrosshairValue(crosshairState.getCrosshairX(), false); [EOL]     if (isDomainCrosshairVisible()) { [EOL]         double x = getDomainCrosshairValue(); [EOL]         Paint paint = getDomainCrosshairPaint(); [EOL]         Stroke stroke = getDomainCrosshairStroke(); [EOL]         drawDomainCrosshair(g2, dataArea, orient, x, xAxis, stroke, paint); [EOL]     } [EOL]     int yAxisIndex = crosshairState.getRangeAxisIndex(); [EOL]     ValueAxis yAxis = getRangeAxis(yAxisIndex); [EOL]     RectangleEdge yAxisEdge = getRangeAxisEdge(yAxisIndex); [EOL]     if (!this.rangeCrosshairLockedOnData && anchor != null) { [EOL]         double yy; [EOL]         if (orient == PlotOrientation.VERTICAL) { [EOL]             yy = yAxis.java2DToValue(anchor.getY(), dataArea, yAxisEdge); [EOL]         } else { [EOL]             yy = yAxis.java2DToValue(anchor.getX(), dataArea, yAxisEdge); [EOL]         } [EOL]         crosshairState.setCrosshairY(yy); [EOL]     } [EOL]     setRangeCrosshairValue(crosshairState.getCrosshairY(), false); [EOL]     if (isRangeCrosshairVisible()) { [EOL]         double y = getRangeCrosshairValue(); [EOL]         Paint paint = getRangeCrosshairPaint(); [EOL]         Stroke stroke = getRangeCrosshairStroke(); [EOL]         drawRangeCrosshair(g2, dataArea, orient, y, yAxis, stroke, paint); [EOL]     } [EOL]     if (!foundData) { [EOL]         drawNoDataMessage(g2, dataArea); [EOL]     } [EOL]     for (int i = 0; i < this.renderers.size(); i++) { [EOL]         drawDomainMarkers(g2, dataArea, i, Layer.FOREGROUND); [EOL]     } [EOL]     for (int i = 0; i < this.renderers.size(); i++) { [EOL]         drawRangeMarkers(g2, dataArea, i, Layer.FOREGROUND); [EOL]     } [EOL]     drawAnnotations(g2, dataArea, info); [EOL]     if (this.shadowGenerator != null) { [EOL]         BufferedImage shadowImage = this.shadowGenerator.createDropShadow(dataImage); [EOL]         g2 = savedG2; [EOL]         dataArea = savedDataArea; [EOL]         g2.drawImage(shadowImage, (int) savedDataArea.getX() + this.shadowGenerator.calculateOffsetX(), (int) savedDataArea.getY() + this.shadowGenerator.calculateOffsetY(), null); [EOL]         g2.drawImage(dataImage, (int) savedDataArea.getX(), (int) savedDataArea.getY(), null); [EOL]     } [EOL]     g2.setClip(originalClip); [EOL]     g2.setComposite(originalComposite); [EOL]     drawOutline(g2, dataArea); [EOL] } <line_num>: 3221,3503
public void drawBackground(Graphics2D g2, Rectangle2D area) { [EOL]     fillBackground(g2, area, this.orientation); [EOL]     drawQuadrants(g2, area); [EOL]     drawBackgroundImage(g2, area); [EOL] } <line_num>: 3511,3515
protected void drawQuadrants(Graphics2D g2, Rectangle2D area) { [EOL]     boolean somethingToDraw = false; [EOL]     ValueAxis xAxis = getDomainAxis(); [EOL]     if (xAxis == null) { [EOL]         return; [EOL]     } [EOL]     double x = xAxis.getRange().constrain(this.quadrantOrigin.getX()); [EOL]     double xx = xAxis.valueToJava2D(x, area, getDomainAxisEdge()); [EOL]     ValueAxis yAxis = getRangeAxis(); [EOL]     if (yAxis == null) { [EOL]         return; [EOL]     } [EOL]     double y = yAxis.getRange().constrain(this.quadrantOrigin.getY()); [EOL]     double yy = yAxis.valueToJava2D(y, area, getRangeAxisEdge()); [EOL]     double xmin = xAxis.getLowerBound(); [EOL]     double xxmin = xAxis.valueToJava2D(xmin, area, getDomainAxisEdge()); [EOL]     double xmax = xAxis.getUpperBound(); [EOL]     double xxmax = xAxis.valueToJava2D(xmax, area, getDomainAxisEdge()); [EOL]     double ymin = yAxis.getLowerBound(); [EOL]     double yymin = yAxis.valueToJava2D(ymin, area, getRangeAxisEdge()); [EOL]     double ymax = yAxis.getUpperBound(); [EOL]     double yymax = yAxis.valueToJava2D(ymax, area, getRangeAxisEdge()); [EOL]     Rectangle2D[] r = new Rectangle2D[] { null, null, null, null }; [EOL]     if (this.quadrantPaint[0] != null) { [EOL]         if (x > xmin && y < ymax) { [EOL]             if (this.orientation == PlotOrientation.HORIZONTAL) { [EOL]                 r[0] = new Rectangle2D.Double(Math.min(yymax, yy), Math.min(xxmin, xx), Math.abs(yy - yymax), Math.abs(xx - xxmin)); [EOL]             } else { [EOL]                 r[0] = new Rectangle2D.Double(Math.min(xxmin, xx), Math.min(yymax, yy), Math.abs(xx - xxmin), Math.abs(yy - yymax)); [EOL]             } [EOL]             somethingToDraw = true; [EOL]         } [EOL]     } [EOL]     if (this.quadrantPaint[1] != null) { [EOL]         if (x < xmax && y < ymax) { [EOL]             if (this.orientation == PlotOrientation.HORIZONTAL) { [EOL]                 r[1] = new Rectangle2D.Double(Math.min(yymax, yy), Math.min(xxmax, xx), Math.abs(yy - yymax), Math.abs(xx - xxmax)); [EOL]             } else { [EOL]                 r[1] = new Rectangle2D.Double(Math.min(xx, xxmax), Math.min(yymax, yy), Math.abs(xx - xxmax), Math.abs(yy - yymax)); [EOL]             } [EOL]             somethingToDraw = true; [EOL]         } [EOL]     } [EOL]     if (this.quadrantPaint[2] != null) { [EOL]         if (x > xmin && y > ymin) { [EOL]             if (this.orientation == PlotOrientation.HORIZONTAL) { [EOL]                 r[2] = new Rectangle2D.Double(Math.min(yymin, yy), Math.min(xxmin, xx), Math.abs(yy - yymin), Math.abs(xx - xxmin)); [EOL]             } else { [EOL]                 r[2] = new Rectangle2D.Double(Math.min(xxmin, xx), Math.min(yymin, yy), Math.abs(xx - xxmin), Math.abs(yy - yymin)); [EOL]             } [EOL]             somethingToDraw = true; [EOL]         } [EOL]     } [EOL]     if (this.quadrantPaint[3] != null) { [EOL]         if (x < xmax && y > ymin) { [EOL]             if (this.orientation == PlotOrientation.HORIZONTAL) { [EOL]                 r[3] = new Rectangle2D.Double(Math.min(yymin, yy), Math.min(xxmax, xx), Math.abs(yy - yymin), Math.abs(xx - xxmax)); [EOL]             } else { [EOL]                 r[3] = new Rectangle2D.Double(Math.min(xx, xxmax), Math.min(yymin, yy), Math.abs(xx - xxmax), Math.abs(yy - yymin)); [EOL]             } [EOL]             somethingToDraw = true; [EOL]         } [EOL]     } [EOL]     if (somethingToDraw) { [EOL]         Composite originalComposite = g2.getComposite(); [EOL]         g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, getBackgroundAlpha())); [EOL]         for (int i = 0; i < 4; i++) { [EOL]             if (this.quadrantPaint[i] != null && r[i] != null) { [EOL]                 g2.setPaint(this.quadrantPaint[i]); [EOL]                 g2.fill(r[i]); [EOL]             } [EOL]         } [EOL]         g2.setComposite(originalComposite); [EOL]     } [EOL] } <line_num>: 3526,3631
public void drawDomainTickBands(Graphics2D g2, Rectangle2D dataArea, List ticks) { [EOL]     Paint bandPaint = getDomainTickBandPaint(); [EOL]     if (bandPaint != null) { [EOL]         boolean fillBand = false; [EOL]         ValueAxis xAxis = getDomainAxis(); [EOL]         double previous = xAxis.getLowerBound(); [EOL]         Iterator iterator = ticks.iterator(); [EOL]         while (iterator.hasNext()) { [EOL]             ValueTick tick = (ValueTick) iterator.next(); [EOL]             double current = tick.getValue(); [EOL]             if (fillBand) { [EOL]                 getRenderer().fillDomainGridBand(g2, this, xAxis, dataArea, previous, current); [EOL]             } [EOL]             previous = current; [EOL]             fillBand = !fillBand; [EOL]         } [EOL]         double end = xAxis.getUpperBound(); [EOL]         if (fillBand) { [EOL]             getRenderer().fillDomainGridBand(g2, this, xAxis, dataArea, previous, end); [EOL]         } [EOL]     } [EOL] } <line_num>: 3642,3666
public void drawRangeTickBands(Graphics2D g2, Rectangle2D dataArea, List ticks) { [EOL]     Paint bandPaint = getRangeTickBandPaint(); [EOL]     if (bandPaint != null) { [EOL]         boolean fillBand = false; [EOL]         ValueAxis axis = getRangeAxis(); [EOL]         double previous = axis.getLowerBound(); [EOL]         Iterator iterator = ticks.iterator(); [EOL]         while (iterator.hasNext()) { [EOL]             ValueTick tick = (ValueTick) iterator.next(); [EOL]             double current = tick.getValue(); [EOL]             if (fillBand) { [EOL]                 getRenderer().fillRangeGridBand(g2, this, axis, dataArea, previous, current); [EOL]             } [EOL]             previous = current; [EOL]             fillBand = !fillBand; [EOL]         } [EOL]         double end = axis.getUpperBound(); [EOL]         if (fillBand) { [EOL]             getRenderer().fillRangeGridBand(g2, this, axis, dataArea, previous, end); [EOL]         } [EOL]     } [EOL] } <line_num>: 3677,3701
protected Map drawAxes(Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, PlotRenderingInfo plotState) { [EOL]     AxisCollection axisCollection = new AxisCollection(); [EOL]     for (int index = 0; index < this.domainAxes.size(); index++) { [EOL]         ValueAxis axis = (ValueAxis) this.domainAxes.get(index); [EOL]         if (axis != null) { [EOL]             axisCollection.add(axis, getDomainAxisEdge(index)); [EOL]         } [EOL]     } [EOL]     for (int index = 0; index < this.rangeAxes.size(); index++) { [EOL]         ValueAxis yAxis = (ValueAxis) this.rangeAxes.get(index); [EOL]         if (yAxis != null) { [EOL]             axisCollection.add(yAxis, getRangeAxisEdge(index)); [EOL]         } [EOL]     } [EOL]     Map axisStateMap = new HashMap(); [EOL]     double cursor = dataArea.getMinY() - this.axisOffset.calculateTopOutset(dataArea.getHeight()); [EOL]     Iterator iterator = axisCollection.getAxesAtTop().iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         ValueAxis axis = (ValueAxis) iterator.next(); [EOL]         AxisState info = axis.draw(g2, cursor, plotArea, dataArea, RectangleEdge.TOP, plotState); [EOL]         cursor = info.getCursor(); [EOL]         axisStateMap.put(axis, info); [EOL]     } [EOL]     cursor = dataArea.getMaxY() + this.axisOffset.calculateBottomOutset(dataArea.getHeight()); [EOL]     iterator = axisCollection.getAxesAtBottom().iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         ValueAxis axis = (ValueAxis) iterator.next(); [EOL]         AxisState info = axis.draw(g2, cursor, plotArea, dataArea, RectangleEdge.BOTTOM, plotState); [EOL]         cursor = info.getCursor(); [EOL]         axisStateMap.put(axis, info); [EOL]     } [EOL]     cursor = dataArea.getMinX() - this.axisOffset.calculateLeftOutset(dataArea.getWidth()); [EOL]     iterator = axisCollection.getAxesAtLeft().iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         ValueAxis axis = (ValueAxis) iterator.next(); [EOL]         AxisState info = axis.draw(g2, cursor, plotArea, dataArea, RectangleEdge.LEFT, plotState); [EOL]         cursor = info.getCursor(); [EOL]         axisStateMap.put(axis, info); [EOL]     } [EOL]     cursor = dataArea.getMaxX() + this.axisOffset.calculateRightOutset(dataArea.getWidth()); [EOL]     iterator = axisCollection.getAxesAtRight().iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         ValueAxis axis = (ValueAxis) iterator.next(); [EOL]         AxisState info = axis.draw(g2, cursor, plotArea, dataArea, RectangleEdge.RIGHT, plotState); [EOL]         cursor = info.getCursor(); [EOL]         axisStateMap.put(axis, info); [EOL]     } [EOL]     return axisStateMap; [EOL] } <line_num>: 3714,3788
public boolean render(Graphics2D g2, Rectangle2D dataArea, int index, PlotRenderingInfo info, CrosshairState crosshairState) { [EOL]     boolean foundData = false; [EOL]     XYDataset dataset = getDataset(index); [EOL]     if (!DatasetUtilities.isEmptyOrNull(dataset)) { [EOL]         foundData = true; [EOL]         ValueAxis xAxis = getDomainAxisForDataset(index); [EOL]         ValueAxis yAxis = getRangeAxisForDataset(index); [EOL]         if (xAxis == null || yAxis == null) { [EOL]             return foundData; [EOL]         } [EOL]         XYItemRenderer renderer = getRenderer(index); [EOL]         if (renderer == null) { [EOL]             renderer = getRenderer(); [EOL]             if (renderer == null) { [EOL]                 return foundData; [EOL]             } [EOL]         } [EOL]         XYItemRendererState state = renderer.initialise(g2, dataArea, this, dataset, info); [EOL]         XYDatasetSelectionState selectionState = state.getSelectionState(); [EOL]         int passCount = renderer.getPassCount(); [EOL]         SeriesRenderingOrder seriesOrder = getSeriesRenderingOrder(); [EOL]         if (seriesOrder == SeriesRenderingOrder.REVERSE) { [EOL]             for (int pass = 0; pass < passCount; pass++) { [EOL]                 int seriesCount = dataset.getSeriesCount(); [EOL]                 for (int series = seriesCount - 1; series >= 0; series--) { [EOL]                     int firstItem = 0; [EOL]                     int lastItem = dataset.getItemCount(series) - 1; [EOL]                     if (lastItem == -1) { [EOL]                         continue; [EOL]                     } [EOL]                     if (state.getProcessVisibleItemsOnly()) { [EOL]                         int[] itemBounds = RendererUtilities.findLiveItems(dataset, series, xAxis.getLowerBound(), xAxis.getUpperBound()); [EOL]                         firstItem = Math.max(itemBounds[0] - 1, 0); [EOL]                         lastItem = Math.min(itemBounds[1] + 1, lastItem); [EOL]                     } [EOL]                     state.startSeriesPass(dataset, series, firstItem, lastItem, pass, passCount); [EOL]                     for (int item = firstItem; item <= lastItem; item++) { [EOL]                         boolean selected = false; [EOL]                         if (selectionState != null) { [EOL]                             selected = selectionState.isSelected(series, item); [EOL]                         } [EOL]                         renderer.drawItem(g2, state, dataArea, this, xAxis, yAxis, dataset, series, item, selected, pass); [EOL]                     } [EOL]                     state.endSeriesPass(dataset, series, firstItem, lastItem, pass, passCount); [EOL]                 } [EOL]             } [EOL]         } else { [EOL]             for (int pass = 0; pass < passCount; pass++) { [EOL]                 int seriesCount = dataset.getSeriesCount(); [EOL]                 for (int series = 0; series < seriesCount; series++) { [EOL]                     int firstItem = 0; [EOL]                     int lastItem = dataset.getItemCount(series) - 1; [EOL]                     if (state.getProcessVisibleItemsOnly()) { [EOL]                         int[] itemBounds = RendererUtilities.findLiveItems(dataset, series, xAxis.getLowerBound(), xAxis.getUpperBound()); [EOL]                         firstItem = Math.max(itemBounds[0] - 1, 0); [EOL]                         lastItem = Math.min(itemBounds[1] + 1, lastItem); [EOL]                     } [EOL]                     state.startSeriesPass(dataset, series, firstItem, lastItem, pass, passCount); [EOL]                     for (int item = firstItem; item <= lastItem; item++) { [EOL]                         boolean selected = false; [EOL]                         if (selectionState != null) { [EOL]                             selected = selectionState.isSelected(series, item); [EOL]                         } [EOL]                         renderer.drawItem(g2, state, dataArea, this, xAxis, yAxis, dataset, series, item, selected, pass); [EOL]                     } [EOL]                     state.endSeriesPass(dataset, series, firstItem, lastItem, pass, passCount); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return foundData; [EOL] } <line_num>: 3806,3899
public ValueAxis getDomainAxisForDataset(int index) { [EOL]     int upper = Math.max(getDatasetCount(), getRendererCount()); [EOL]     if (index < 0 || index >= upper) { [EOL]         throw new IllegalArgumentException("Index " + index + " out of bounds."); [EOL]     } [EOL]     ValueAxis valueAxis = null; [EOL]     List axisIndices = (List) this.datasetToDomainAxesMap.get(new Integer(index)); [EOL]     if (axisIndices != null) { [EOL]         Integer axisIndex = (Integer) axisIndices.get(0); [EOL]         valueAxis = getDomainAxis(axisIndex.intValue()); [EOL]     } else { [EOL]         valueAxis = getDomainAxis(0); [EOL]     } [EOL]     return valueAxis; [EOL] } <line_num>: 3908,3926
public ValueAxis getRangeAxisForDataset(int index) { [EOL]     int upper = Math.max(getDatasetCount(), getRendererCount()); [EOL]     if (index < 0 || index >= upper) { [EOL]         throw new IllegalArgumentException("Index " + index + " out of bounds."); [EOL]     } [EOL]     ValueAxis valueAxis = null; [EOL]     List axisIndices = (List) this.datasetToRangeAxesMap.get(new Integer(index)); [EOL]     if (axisIndices != null) { [EOL]         Integer axisIndex = (Integer) axisIndices.get(0); [EOL]         valueAxis = getRangeAxis(axisIndex.intValue()); [EOL]     } else { [EOL]         valueAxis = getRangeAxis(0); [EOL]     } [EOL]     return valueAxis; [EOL] } <line_num>: 3935,3953
protected void drawDomainGridlines(Graphics2D g2, Rectangle2D dataArea, List ticks) { [EOL]     if (getRenderer() == null) { [EOL]         return; [EOL]     } [EOL]     if (isDomainGridlinesVisible() || isDomainMinorGridlinesVisible()) { [EOL]         Stroke gridStroke = null; [EOL]         Paint gridPaint = null; [EOL]         Iterator iterator = ticks.iterator(); [EOL]         boolean paintLine = false; [EOL]         while (iterator.hasNext()) { [EOL]             paintLine = false; [EOL]             ValueTick tick = (ValueTick) iterator.next(); [EOL]             if ((tick.getTickType() == TickType.MINOR) && isDomainMinorGridlinesVisible()) { [EOL]                 gridStroke = getDomainMinorGridlineStroke(); [EOL]                 gridPaint = getDomainMinorGridlinePaint(); [EOL]                 paintLine = true; [EOL]             } else if ((tick.getTickType() == TickType.MAJOR) && isDomainGridlinesVisible()) { [EOL]                 gridStroke = getDomainGridlineStroke(); [EOL]                 gridPaint = getDomainGridlinePaint(); [EOL]                 paintLine = true; [EOL]             } [EOL]             XYItemRenderer r = getRenderer(); [EOL]             if ((r instanceof AbstractXYItemRenderer) && paintLine) { [EOL]                 ((AbstractXYItemRenderer) r).drawDomainLine(g2, this, getDomainAxis(), dataArea, tick.getValue(), gridPaint, gridStroke); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 3964,4001
protected void drawRangeGridlines(Graphics2D g2, Rectangle2D area, List ticks) { [EOL]     if (getRenderer() == null) { [EOL]         return; [EOL]     } [EOL]     if (isRangeGridlinesVisible() || isRangeMinorGridlinesVisible()) { [EOL]         Stroke gridStroke = null; [EOL]         Paint gridPaint = null; [EOL]         ValueAxis axis = getRangeAxis(); [EOL]         if (axis != null) { [EOL]             Iterator iterator = ticks.iterator(); [EOL]             boolean paintLine = false; [EOL]             while (iterator.hasNext()) { [EOL]                 paintLine = false; [EOL]                 ValueTick tick = (ValueTick) iterator.next(); [EOL]                 if ((tick.getTickType() == TickType.MINOR) && isRangeMinorGridlinesVisible()) { [EOL]                     gridStroke = getRangeMinorGridlineStroke(); [EOL]                     gridPaint = getRangeMinorGridlinePaint(); [EOL]                     paintLine = true; [EOL]                 } else if ((tick.getTickType() == TickType.MAJOR) && isRangeGridlinesVisible()) { [EOL]                     gridStroke = getRangeGridlineStroke(); [EOL]                     gridPaint = getRangeGridlinePaint(); [EOL]                     paintLine = true; [EOL]                 } [EOL]                 if ((tick.getValue() != 0.0 || !isRangeZeroBaselineVisible()) && paintLine) { [EOL]                     getRenderer().drawRangeLine(g2, this, getRangeAxis(), area, tick.getValue(), gridPaint, gridStroke); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 4013,4052
protected void drawZeroDomainBaseline(Graphics2D g2, Rectangle2D area) { [EOL]     if (isDomainZeroBaselineVisible()) { [EOL]         XYItemRenderer r = getRenderer(); [EOL]         r.drawDomainLine(g2, this, getDomainAxis(), area, 0.0, this.domainZeroBaselinePaint, this.domainZeroBaselineStroke); [EOL]     } [EOL] } <line_num>: 4064,4071
protected void drawZeroRangeBaseline(Graphics2D g2, Rectangle2D area) { [EOL]     if (isRangeZeroBaselineVisible()) { [EOL]         getRenderer().drawRangeLine(g2, this, getRangeAxis(), area, 0.0, this.rangeZeroBaselinePaint, this.rangeZeroBaselineStroke); [EOL]     } [EOL] } <line_num>: 4081,4086
public void drawAnnotations(Graphics2D g2, Rectangle2D dataArea, PlotRenderingInfo info) { [EOL]     Iterator iterator = this.annotations.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         XYAnnotation annotation = (XYAnnotation) iterator.next(); [EOL]         ValueAxis xAxis = getDomainAxis(); [EOL]         ValueAxis yAxis = getRangeAxis(); [EOL]         annotation.draw(g2, this, dataArea, xAxis, yAxis, 0, info); [EOL]     } [EOL] } <line_num>: 4095,4107
protected void drawDomainMarkers(Graphics2D g2, Rectangle2D dataArea, int index, Layer layer) { [EOL]     XYItemRenderer r = getRenderer(index); [EOL]     if (r == null) { [EOL]         return; [EOL]     } [EOL]     if (index >= getDatasetCount()) { [EOL]         return; [EOL]     } [EOL]     Collection markers = getDomainMarkers(index, layer); [EOL]     ValueAxis axis = getDomainAxisForDataset(index); [EOL]     if (markers != null && axis != null) { [EOL]         Iterator iterator = markers.iterator(); [EOL]         while (iterator.hasNext()) { [EOL]             Marker marker = (Marker) iterator.next(); [EOL]             r.drawDomainMarker(g2, this, axis, marker, dataArea); [EOL]         } [EOL]     } [EOL] } <line_num>: 4118,4140
protected void drawRangeMarkers(Graphics2D g2, Rectangle2D dataArea, int index, Layer layer) { [EOL]     XYItemRenderer r = getRenderer(index); [EOL]     if (r == null) { [EOL]         return; [EOL]     } [EOL]     if (index >= getDatasetCount()) { [EOL]         return; [EOL]     } [EOL]     Collection markers = getRangeMarkers(index, layer); [EOL]     ValueAxis axis = getRangeAxisForDataset(index); [EOL]     if (markers != null && axis != null) { [EOL]         Iterator iterator = markers.iterator(); [EOL]         while (iterator.hasNext()) { [EOL]             Marker marker = (Marker) iterator.next(); [EOL]             r.drawRangeMarker(g2, this, axis, marker, dataArea); [EOL]         } [EOL]     } [EOL] } <line_num>: 4151,4172
public Collection getDomainMarkers(Layer layer) { [EOL]     return getDomainMarkers(0, layer); [EOL] } <line_num>: 4183,4185
public Collection getRangeMarkers(Layer layer) { [EOL]     return getRangeMarkers(0, layer); [EOL] } <line_num>: 4196,4198
public Collection getDomainMarkers(int index, Layer layer) { [EOL]     Collection result = null; [EOL]     Integer key = new Integer(index); [EOL]     if (layer == Layer.FOREGROUND) { [EOL]         result = (Collection) this.foregroundDomainMarkers.get(key); [EOL]     } else if (layer == Layer.BACKGROUND) { [EOL]         result = (Collection) this.backgroundDomainMarkers.get(key); [EOL]     } [EOL]     if (result != null) { [EOL]         result = Collections.unmodifiableCollection(result); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 4211,4224
public Collection getRangeMarkers(int index, Layer layer) { [EOL]     Collection result = null; [EOL]     Integer key = new Integer(index); [EOL]     if (layer == Layer.FOREGROUND) { [EOL]         result = (Collection) this.foregroundRangeMarkers.get(key); [EOL]     } else if (layer == Layer.BACKGROUND) { [EOL]         result = (Collection) this.backgroundRangeMarkers.get(key); [EOL]     } [EOL]     if (result != null) { [EOL]         result = Collections.unmodifiableCollection(result); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 4237,4250
protected void drawHorizontalLine(Graphics2D g2, Rectangle2D dataArea, double value, Stroke stroke, Paint paint) { [EOL]     ValueAxis axis = getRangeAxis(); [EOL]     if (getOrientation() == PlotOrientation.HORIZONTAL) { [EOL]         axis = getDomainAxis(); [EOL]     } [EOL]     if (axis.getRange().contains(value)) { [EOL]         double yy = axis.valueToJava2D(value, dataArea, RectangleEdge.LEFT); [EOL]         Line2D line = new Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy); [EOL]         g2.setStroke(stroke); [EOL]         g2.setPaint(paint); [EOL]         g2.draw(line); [EOL]     } [EOL] } <line_num>: 4262,4279
protected void drawDomainCrosshair(Graphics2D g2, Rectangle2D dataArea, PlotOrientation orientation, double value, ValueAxis axis, Stroke stroke, Paint paint) { [EOL]     if (axis.getRange().contains(value)) { [EOL]         Line2D line = null; [EOL]         if (orientation == PlotOrientation.VERTICAL) { [EOL]             double xx = axis.valueToJava2D(value, dataArea, RectangleEdge.BOTTOM); [EOL]             line = new Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY()); [EOL]         } else { [EOL]             double yy = axis.valueToJava2D(value, dataArea, RectangleEdge.LEFT); [EOL]             line = new Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy); [EOL]         } [EOL]         g2.setStroke(stroke); [EOL]         g2.setPaint(paint); [EOL]         g2.draw(line); [EOL]     } [EOL] } <line_num>: 4294,4317
protected void drawVerticalLine(Graphics2D g2, Rectangle2D dataArea, double value, Stroke stroke, Paint paint) { [EOL]     ValueAxis axis = getDomainAxis(); [EOL]     if (getOrientation() == PlotOrientation.HORIZONTAL) { [EOL]         axis = getRangeAxis(); [EOL]     } [EOL]     if (axis.getRange().contains(value)) { [EOL]         double xx = axis.valueToJava2D(value, dataArea, RectangleEdge.BOTTOM); [EOL]         Line2D line = new Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY()); [EOL]         g2.setStroke(stroke); [EOL]         g2.setPaint(paint); [EOL]         g2.draw(line); [EOL]     } [EOL] } <line_num>: 4328,4345
protected void drawRangeCrosshair(Graphics2D g2, Rectangle2D dataArea, PlotOrientation orientation, double value, ValueAxis axis, Stroke stroke, Paint paint) { [EOL]     if (axis.getRange().contains(value)) { [EOL]         Line2D line = null; [EOL]         if (orientation == PlotOrientation.HORIZONTAL) { [EOL]             double xx = axis.valueToJava2D(value, dataArea, RectangleEdge.BOTTOM); [EOL]             line = new Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY()); [EOL]         } else { [EOL]             double yy = axis.valueToJava2D(value, dataArea, RectangleEdge.LEFT); [EOL]             line = new Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy); [EOL]         } [EOL]         g2.setStroke(stroke); [EOL]         g2.setPaint(paint); [EOL]         g2.draw(line); [EOL]     } [EOL] } <line_num>: 4360,4383
public void handleClick(int x, int y, PlotRenderingInfo info) { [EOL]     Rectangle2D dataArea = info.getDataArea(); [EOL]     if (dataArea.contains(x, y)) { [EOL]         ValueAxis xaxis = getDomainAxis(); [EOL]         if (xaxis != null) { [EOL]             double hvalue = xaxis.java2DToValue(x, info.getDataArea(), getDomainAxisEdge()); [EOL]             setDomainCrosshairValue(hvalue); [EOL]         } [EOL]         ValueAxis yaxis = getRangeAxis(); [EOL]         if (yaxis != null) { [EOL]             double vvalue = yaxis.java2DToValue(y, info.getDataArea(), getRangeAxisEdge()); [EOL]             setRangeCrosshairValue(vvalue); [EOL]         } [EOL]     } [EOL] } <line_num>: 4392,4412
private List getDatasetsMappedToDomainAxis(Integer axisIndex) { [EOL]     if (axisIndex == null) { [EOL]         throw new IllegalArgumentException("Null 'axisIndex' argument."); [EOL]     } [EOL]     List result = new ArrayList(); [EOL]     for (int i = 0; i < this.datasets.size(); i++) { [EOL]         List mappedAxes = (List) this.datasetToDomainAxesMap.get(new Integer(i)); [EOL]         if (mappedAxes == null) { [EOL]             if (axisIndex.equals(ZERO)) { [EOL]                 result.add(this.datasets.get(i)); [EOL]             } [EOL]         } else { [EOL]             if (mappedAxes.contains(axisIndex)) { [EOL]                 result.add(this.datasets.get(i)); [EOL]             } [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 4422,4442
private List getDatasetsMappedToRangeAxis(Integer axisIndex) { [EOL]     if (axisIndex == null) { [EOL]         throw new IllegalArgumentException("Null 'axisIndex' argument."); [EOL]     } [EOL]     List result = new ArrayList(); [EOL]     for (int i = 0; i < this.datasets.size(); i++) { [EOL]         List mappedAxes = (List) this.datasetToRangeAxesMap.get(new Integer(i)); [EOL]         if (mappedAxes == null) { [EOL]             if (axisIndex.equals(ZERO)) { [EOL]                 result.add(this.datasets.get(i)); [EOL]             } [EOL]         } else { [EOL]             if (mappedAxes.contains(axisIndex)) { [EOL]                 result.add(this.datasets.get(i)); [EOL]             } [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 4452,4472
public int getDomainAxisIndex(ValueAxis axis) { [EOL]     int result = this.domainAxes.indexOf(axis); [EOL]     if (result < 0) { [EOL]         Plot parent = getParent(); [EOL]         if (parent instanceof XYPlot) { [EOL]             XYPlot p = (XYPlot) parent; [EOL]             result = p.getDomainAxisIndex(axis); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 4483,4494
public int getRangeAxisIndex(ValueAxis axis) { [EOL]     int result = this.rangeAxes.indexOf(axis); [EOL]     if (result < 0) { [EOL]         Plot parent = getParent(); [EOL]         if (parent instanceof XYPlot) { [EOL]             XYPlot p = (XYPlot) parent; [EOL]             result = p.getRangeAxisIndex(axis); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 4505,4516
public Range getDataRange(ValueAxis axis) { [EOL]     Range result = null; [EOL]     List mappedDatasets = new ArrayList(); [EOL]     List includedAnnotations = new ArrayList(); [EOL]     boolean isDomainAxis = true; [EOL]     int domainIndex = getDomainAxisIndex(axis); [EOL]     if (domainIndex >= 0) { [EOL]         isDomainAxis = true; [EOL]         mappedDatasets.addAll(getDatasetsMappedToDomainAxis(new Integer(domainIndex))); [EOL]         if (domainIndex == 0) { [EOL]             Iterator iterator = this.annotations.iterator(); [EOL]             while (iterator.hasNext()) { [EOL]                 XYAnnotation annotation = (XYAnnotation) iterator.next(); [EOL]                 if (annotation instanceof XYAnnotationBoundsInfo) { [EOL]                     includedAnnotations.add(annotation); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     int rangeIndex = getRangeAxisIndex(axis); [EOL]     if (rangeIndex >= 0) { [EOL]         isDomainAxis = false; [EOL]         mappedDatasets.addAll(getDatasetsMappedToRangeAxis(new Integer(rangeIndex))); [EOL]         if (rangeIndex == 0) { [EOL]             Iterator iterator = this.annotations.iterator(); [EOL]             while (iterator.hasNext()) { [EOL]                 XYAnnotation annotation = (XYAnnotation) iterator.next(); [EOL]                 if (annotation instanceof XYAnnotationBoundsInfo) { [EOL]                     includedAnnotations.add(annotation); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     Iterator iterator = mappedDatasets.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         XYDataset d = (XYDataset) iterator.next(); [EOL]         if (d != null) { [EOL]             XYItemRenderer r = getRendererForDataset(d); [EOL]             if (isDomainAxis) { [EOL]                 if (r != null) { [EOL]                     result = Range.combine(result, r.findDomainBounds(d)); [EOL]                 } else { [EOL]                     result = Range.combine(result, DatasetUtilities.findDomainBounds(d)); [EOL]                 } [EOL]             } else { [EOL]                 if (r != null) { [EOL]                     result = Range.combine(result, r.findRangeBounds(d)); [EOL]                 } else { [EOL]                     result = Range.combine(result, DatasetUtilities.findRangeBounds(d)); [EOL]                 } [EOL]             } [EOL]             if (r != null) { [EOL]                 Collection c = r.getAnnotations(); [EOL]                 Iterator i = c.iterator(); [EOL]                 while (i.hasNext()) { [EOL]                     XYAnnotation a = (XYAnnotation) i.next(); [EOL]                     if (a instanceof XYAnnotationBoundsInfo) { [EOL]                         includedAnnotations.add(a); [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     Iterator it = includedAnnotations.iterator(); [EOL]     while (it.hasNext()) { [EOL]         XYAnnotationBoundsInfo xyabi = (XYAnnotationBoundsInfo) it.next(); [EOL]         if (xyabi.getIncludeInDataBounds()) { [EOL]             if (isDomainAxis) { [EOL]                 result = Range.combine(result, xyabi.getXRange()); [EOL]             } else { [EOL]                 result = Range.combine(result, xyabi.getYRange()); [EOL]             } [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 4525,4621
public void annotationChanged(AnnotationChangeEvent event) { [EOL]     if (getParent() != null) { [EOL]         getParent().annotationChanged(event); [EOL]     } else { [EOL]         PlotChangeEvent e = new PlotChangeEvent(this); [EOL]         notifyListeners(e); [EOL]     } [EOL] } <line_num>: 4631,4639
public void datasetChanged(DatasetChangeEvent event) { [EOL]     configureDomainAxes(); [EOL]     configureRangeAxes(); [EOL]     if (getParent() != null) { [EOL]         getParent().datasetChanged(event); [EOL]     } else { [EOL]         PlotChangeEvent e = new PlotChangeEvent(this); [EOL]         e.setType(ChartChangeEventType.DATASET_UPDATED); [EOL]         notifyListeners(e); [EOL]     } [EOL] } <line_num>: 4648,4659
public void rendererChanged(RendererChangeEvent event) { [EOL]     if (event.getSeriesVisibilityChanged()) { [EOL]         configureDomainAxes(); [EOL]         configureRangeAxes(); [EOL]     } [EOL]     fireChangeEvent(); [EOL] } <line_num>: 4666,4674
public boolean isDomainCrosshairVisible() { [EOL]     return this.domainCrosshairVisible; [EOL] } <line_num>: 4683,4685
public void setDomainCrosshairVisible(boolean flag) { [EOL]     if (this.domainCrosshairVisible != flag) { [EOL]         this.domainCrosshairVisible = flag; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 4696,4701
public boolean isDomainCrosshairLockedOnData() { [EOL]     return this.domainCrosshairLockedOnData; [EOL] } <line_num>: 4711,4713
public void setDomainCrosshairLockedOnData(boolean flag) { [EOL]     if (this.domainCrosshairLockedOnData != flag) { [EOL]         this.domainCrosshairLockedOnData = flag; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 4724,4729
public double getDomainCrosshairValue() { [EOL]     return this.domainCrosshairValue; [EOL] } <line_num>: 4738,4740
public void setDomainCrosshairValue(double value) { [EOL]     setDomainCrosshairValue(value, true); [EOL] } <line_num>: 4750,4752
public void setDomainCrosshairValue(double value, boolean notify) { [EOL]     this.domainCrosshairValue = value; [EOL]     if (isDomainCrosshairVisible() && notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 4764,4769
public Stroke getDomainCrosshairStroke() { [EOL]     return this.domainCrosshairStroke; [EOL] } <line_num>: 4780,4782
public void setDomainCrosshairStroke(Stroke stroke) { [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' argument."); [EOL]     } [EOL]     this.domainCrosshairStroke = stroke; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 4793,4799
public Paint getDomainCrosshairPaint() { [EOL]     return this.domainCrosshairPaint; [EOL] } <line_num>: 4810,4812
public void setDomainCrosshairPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.domainCrosshairPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 4822,4828
public boolean isRangeCrosshairVisible() { [EOL]     return this.rangeCrosshairVisible; [EOL] } <line_num>: 4838,4840
public void setRangeCrosshairVisible(boolean flag) { [EOL]     if (this.rangeCrosshairVisible != flag) { [EOL]         this.rangeCrosshairVisible = flag; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 4851,4856
public boolean isRangeCrosshairLockedOnData() { [EOL]     return this.rangeCrosshairLockedOnData; [EOL] } <line_num>: 4866,4868
public void setRangeCrosshairLockedOnData(boolean flag) { [EOL]     if (this.rangeCrosshairLockedOnData != flag) { [EOL]         this.rangeCrosshairLockedOnData = flag; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 4879,4884
public double getRangeCrosshairValue() { [EOL]     return this.rangeCrosshairValue; [EOL] } <line_num>: 4893,4895
public void setRangeCrosshairValue(double value) { [EOL]     setRangeCrosshairValue(value, true); [EOL] } <line_num>: 4907,4909
public void setRangeCrosshairValue(double value, boolean notify) { [EOL]     this.rangeCrosshairValue = value; [EOL]     if (isRangeCrosshairVisible() && notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 4921,4926
public Stroke getRangeCrosshairStroke() { [EOL]     return this.rangeCrosshairStroke; [EOL] } <line_num>: 4937,4939
public void setRangeCrosshairStroke(Stroke stroke) { [EOL]     if (stroke == null) { [EOL]         throw new IllegalArgumentException("Null 'stroke' argument."); [EOL]     } [EOL]     this.rangeCrosshairStroke = stroke; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 4950,4956
public Paint getRangeCrosshairPaint() { [EOL]     return this.rangeCrosshairPaint; [EOL] } <line_num>: 4967,4969
public void setRangeCrosshairPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.rangeCrosshairPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 4979,4985
public AxisSpace getFixedDomainAxisSpace() { [EOL]     return this.fixedDomainAxisSpace; [EOL] } <line_num>: 4994,4996
public void setFixedDomainAxisSpace(AxisSpace space) { [EOL]     setFixedDomainAxisSpace(space, true); [EOL] } <line_num>: 5006,5008
public void setFixedDomainAxisSpace(AxisSpace space, boolean notify) { [EOL]     this.fixedDomainAxisSpace = space; [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 5021,5026
public AxisSpace getFixedRangeAxisSpace() { [EOL]     return this.fixedRangeAxisSpace; [EOL] } <line_num>: 5035,5037
public void setFixedRangeAxisSpace(AxisSpace space) { [EOL]     setFixedRangeAxisSpace(space, true); [EOL] } <line_num>: 5047,5049
public void setFixedRangeAxisSpace(AxisSpace space, boolean notify) { [EOL]     this.fixedRangeAxisSpace = space; [EOL]     if (notify) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 5062,5067
public boolean isDomainPannable() { [EOL]     return this.domainPannable; [EOL] } <line_num>: 5077,5079
public void setDomainPannable(boolean pannable) { [EOL]     this.domainPannable = pannable; [EOL] } <line_num>: 5089,5091
public boolean isRangePannable() { [EOL]     return this.rangePannable; [EOL] } <line_num>: 5101,5103
public void setRangePannable(boolean pannable) { [EOL]     this.rangePannable = pannable; [EOL] } <line_num>: 5113,5115
public void panDomainAxes(double percent, PlotRenderingInfo info, Point2D source) { [EOL]     if (!isDomainPannable()) { [EOL]         return; [EOL]     } [EOL]     int domainAxisCount = getDomainAxisCount(); [EOL]     for (int i = 0; i < domainAxisCount; i++) { [EOL]         ValueAxis axis = getDomainAxis(i); [EOL]         if (axis == null) { [EOL]             continue; [EOL]         } [EOL]         if (axis.isInverted()) { [EOL]             percent = -percent; [EOL]         } [EOL]         axis.pan(percent); [EOL]     } [EOL] } <line_num>: 5126,5142
public void panRangeAxes(double percent, PlotRenderingInfo info, Point2D source) { [EOL]     if (!isRangePannable()) { [EOL]         return; [EOL]     } [EOL]     int rangeAxisCount = getRangeAxisCount(); [EOL]     for (int i = 0; i < rangeAxisCount; i++) { [EOL]         ValueAxis axis = getRangeAxis(i); [EOL]         if (axis == null) { [EOL]             continue; [EOL]         } [EOL]         if (axis.isInverted()) { [EOL]             percent = -percent; [EOL]         } [EOL]         axis.pan(percent); [EOL]     } [EOL] } <line_num>: 5153,5169
public void zoomDomainAxes(double factor, PlotRenderingInfo info, Point2D source) { [EOL]     zoomDomainAxes(factor, info, source, false); [EOL] } <line_num>: 5180,5184
public void zoomDomainAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) { [EOL]     for (int i = 0; i < this.domainAxes.size(); i++) { [EOL]         ValueAxis domainAxis = (ValueAxis) this.domainAxes.get(i); [EOL]         if (domainAxis != null) { [EOL]             if (useAnchor) { [EOL]                 double sourceX = source.getX(); [EOL]                 if (this.orientation == PlotOrientation.HORIZONTAL) { [EOL]                     sourceX = source.getY(); [EOL]                 } [EOL]                 double anchorX = domainAxis.java2DToValue(sourceX, info.getDataArea(), getDomainAxisEdge()); [EOL]                 domainAxis.resizeRange2(factor, anchorX); [EOL]             } else { [EOL]                 domainAxis.resizeRange(factor); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 5198,5221
public void zoomDomainAxes(double lowerPercent, double upperPercent, PlotRenderingInfo info, Point2D source) { [EOL]     for (int i = 0; i < this.domainAxes.size(); i++) { [EOL]         ValueAxis domainAxis = (ValueAxis) this.domainAxes.get(i); [EOL]         if (domainAxis != null) { [EOL]             domainAxis.zoomRange(lowerPercent, upperPercent); [EOL]         } [EOL]     } [EOL] } <line_num>: 5237,5245
public void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source) { [EOL]     zoomRangeAxes(factor, info, source, false); [EOL] } <line_num>: 5256,5260
public void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) { [EOL]     for (int i = 0; i < this.rangeAxes.size(); i++) { [EOL]         ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i); [EOL]         if (rangeAxis != null) { [EOL]             if (useAnchor) { [EOL]                 double sourceY = source.getY(); [EOL]                 if (this.orientation == PlotOrientation.HORIZONTAL) { [EOL]                     sourceY = source.getX(); [EOL]                 } [EOL]                 double anchorY = rangeAxis.java2DToValue(sourceY, info.getDataArea(), getRangeAxisEdge()); [EOL]                 rangeAxis.resizeRange2(factor, anchorY); [EOL]             } else { [EOL]                 rangeAxis.resizeRange(factor); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 5275,5298
public void zoomRangeAxes(double lowerPercent, double upperPercent, PlotRenderingInfo info, Point2D source) { [EOL]     for (int i = 0; i < this.rangeAxes.size(); i++) { [EOL]         ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i); [EOL]         if (rangeAxis != null) { [EOL]             rangeAxis.zoomRange(lowerPercent, upperPercent); [EOL]         } [EOL]     } [EOL] } <line_num>: 5310,5318
public boolean isDomainZoomable() { [EOL]     return true; [EOL] } <line_num>: 5328,5330
public boolean isRangeZoomable() { [EOL]     return true; [EOL] } <line_num>: 5340,5342
public int getSeriesCount() { [EOL]     int result = 0; [EOL]     XYDataset dataset = getDataset(); [EOL]     if (dataset != null) { [EOL]         result = dataset.getSeriesCount(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 5350,5357
public LegendItemCollection getFixedLegendItems() { [EOL]     return this.fixedLegendItems; [EOL] } <line_num>: 5366,5368
public void setFixedLegendItems(LegendItemCollection items) { [EOL]     this.fixedLegendItems = items; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 5379,5382
public LegendItemCollection getLegendItems() { [EOL]     if (this.fixedLegendItems != null) { [EOL]         return this.fixedLegendItems; [EOL]     } [EOL]     LegendItemCollection result = new LegendItemCollection(); [EOL]     int count = this.datasets.size(); [EOL]     for (int datasetIndex = 0; datasetIndex < count; datasetIndex++) { [EOL]         XYDataset dataset = getDataset(datasetIndex); [EOL]         if (dataset != null) { [EOL]             XYItemRenderer renderer = getRenderer(datasetIndex); [EOL]             if (renderer == null) { [EOL]                 renderer = getRenderer(0); [EOL]             } [EOL]             if (renderer != null) { [EOL]                 int seriesCount = dataset.getSeriesCount(); [EOL]                 for (int i = 0; i < seriesCount; i++) { [EOL]                     if (renderer.isSeriesVisible(i) && renderer.isSeriesVisibleInLegend(i)) { [EOL]                         LegendItem item = renderer.getLegendItem(datasetIndex, i); [EOL]                         if (item != null) { [EOL]                             result.add(item); [EOL]                         } [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 5391,5420
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof XYPlot)) { [EOL]         return false; [EOL]     } [EOL]     XYPlot that = (XYPlot) obj; [EOL]     if (this.weight != that.weight) { [EOL]         return false; [EOL]     } [EOL]     if (this.orientation != that.orientation) { [EOL]         return false; [EOL]     } [EOL]     if (!this.domainAxes.equals(that.domainAxes)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.domainAxisLocations.equals(that.domainAxisLocations)) { [EOL]         return false; [EOL]     } [EOL]     if (this.rangeCrosshairLockedOnData != that.rangeCrosshairLockedOnData) { [EOL]         return false; [EOL]     } [EOL]     if (this.domainGridlinesVisible != that.domainGridlinesVisible) { [EOL]         return false; [EOL]     } [EOL]     if (this.rangeGridlinesVisible != that.rangeGridlinesVisible) { [EOL]         return false; [EOL]     } [EOL]     if (this.domainMinorGridlinesVisible != that.domainMinorGridlinesVisible) { [EOL]         return false; [EOL]     } [EOL]     if (this.rangeMinorGridlinesVisible != that.rangeMinorGridlinesVisible) { [EOL]         return false; [EOL]     } [EOL]     if (this.domainZeroBaselineVisible != that.domainZeroBaselineVisible) { [EOL]         return false; [EOL]     } [EOL]     if (this.rangeZeroBaselineVisible != that.rangeZeroBaselineVisible) { [EOL]         return false; [EOL]     } [EOL]     if (this.domainCrosshairVisible != that.domainCrosshairVisible) { [EOL]         return false; [EOL]     } [EOL]     if (this.domainCrosshairValue != that.domainCrosshairValue) { [EOL]         return false; [EOL]     } [EOL]     if (this.domainCrosshairLockedOnData != that.domainCrosshairLockedOnData) { [EOL]         return false; [EOL]     } [EOL]     if (this.rangeCrosshairVisible != that.rangeCrosshairVisible) { [EOL]         return false; [EOL]     } [EOL]     if (this.rangeCrosshairValue != that.rangeCrosshairValue) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.axisOffset, that.axisOffset)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.renderers, that.renderers)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.rangeAxes, that.rangeAxes)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.datasetToDomainAxesMap, that.datasetToDomainAxesMap)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.datasetToRangeAxesMap, that.datasetToRangeAxesMap)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.domainGridlineStroke, that.domainGridlineStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.domainGridlinePaint, that.domainGridlinePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.rangeGridlineStroke, that.rangeGridlineStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.rangeGridlinePaint, that.rangeGridlinePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.domainMinorGridlineStroke, that.domainMinorGridlineStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.domainMinorGridlinePaint, that.domainMinorGridlinePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.rangeMinorGridlineStroke, that.rangeMinorGridlineStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.rangeMinorGridlinePaint, that.rangeMinorGridlinePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.domainZeroBaselinePaint, that.domainZeroBaselinePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.domainZeroBaselineStroke, that.domainZeroBaselineStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.rangeZeroBaselinePaint, that.rangeZeroBaselinePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.rangeZeroBaselineStroke, that.rangeZeroBaselineStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.domainCrosshairStroke, that.domainCrosshairStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.domainCrosshairPaint, that.domainCrosshairPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.rangeCrosshairStroke, that.rangeCrosshairStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.rangeCrosshairPaint, that.rangeCrosshairPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.foregroundDomainMarkers, that.foregroundDomainMarkers)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.backgroundDomainMarkers, that.backgroundDomainMarkers)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.foregroundDomainMarkers, that.foregroundDomainMarkers)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.backgroundDomainMarkers, that.backgroundDomainMarkers)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.annotations, that.annotations)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.fixedLegendItems, that.fixedLegendItems)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.domainTickBandPaint, that.domainTickBandPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.rangeTickBandPaint, that.rangeTickBandPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.quadrantOrigin.equals(that.quadrantOrigin)) { [EOL]         return false; [EOL]     } [EOL]     for (int i = 0; i < 4; i++) { [EOL]         if (!PaintUtilities.equal(this.quadrantPaint[i], that.quadrantPaint[i])) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.shadowGenerator, that.shadowGenerator)) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 5429,5634
public Object clone() throws CloneNotSupportedException { [EOL]     XYPlot clone = (XYPlot) super.clone(); [EOL]     clone.domainAxes = (ObjectList) ObjectUtilities.clone(this.domainAxes); [EOL]     for (int i = 0; i < this.domainAxes.size(); i++) { [EOL]         ValueAxis axis = (ValueAxis) this.domainAxes.get(i); [EOL]         if (axis != null) { [EOL]             ValueAxis clonedAxis = (ValueAxis) axis.clone(); [EOL]             clone.domainAxes.set(i, clonedAxis); [EOL]             clonedAxis.setPlot(clone); [EOL]             clonedAxis.addChangeListener(clone); [EOL]         } [EOL]     } [EOL]     clone.domainAxisLocations = (ObjectList) this.domainAxisLocations.clone(); [EOL]     clone.rangeAxes = (ObjectList) ObjectUtilities.clone(this.rangeAxes); [EOL]     for (int i = 0; i < this.rangeAxes.size(); i++) { [EOL]         ValueAxis axis = (ValueAxis) this.rangeAxes.get(i); [EOL]         if (axis != null) { [EOL]             ValueAxis clonedAxis = (ValueAxis) axis.clone(); [EOL]             clone.rangeAxes.set(i, clonedAxis); [EOL]             clonedAxis.setPlot(clone); [EOL]             clonedAxis.addChangeListener(clone); [EOL]         } [EOL]     } [EOL]     clone.rangeAxisLocations = (ObjectList) ObjectUtilities.clone(this.rangeAxisLocations); [EOL]     clone.datasets = (ObjectList) ObjectUtilities.clone(this.datasets); [EOL]     for (int i = 0; i < clone.datasets.size(); ++i) { [EOL]         XYDataset d = getDataset(i); [EOL]         if (d != null) { [EOL]             d.addChangeListener(clone); [EOL]         } [EOL]     } [EOL]     clone.datasetToDomainAxesMap = new TreeMap(); [EOL]     clone.datasetToDomainAxesMap.putAll(this.datasetToDomainAxesMap); [EOL]     clone.datasetToRangeAxesMap = new TreeMap(); [EOL]     clone.datasetToRangeAxesMap.putAll(this.datasetToRangeAxesMap); [EOL]     clone.renderers = (ObjectList) ObjectUtilities.clone(this.renderers); [EOL]     for (int i = 0; i < this.renderers.size(); i++) { [EOL]         XYItemRenderer renderer2 = (XYItemRenderer) this.renderers.get(i); [EOL]         if (renderer2 instanceof PublicCloneable) { [EOL]             PublicCloneable pc = (PublicCloneable) renderer2; [EOL]             XYItemRenderer rc = (XYItemRenderer) pc.clone(); [EOL]             clone.renderers.set(i, rc); [EOL]             rc.setPlot(clone); [EOL]             rc.addChangeListener(clone); [EOL]         } [EOL]     } [EOL]     clone.foregroundDomainMarkers = (Map) ObjectUtilities.clone(this.foregroundDomainMarkers); [EOL]     clone.backgroundDomainMarkers = (Map) ObjectUtilities.clone(this.backgroundDomainMarkers); [EOL]     clone.foregroundRangeMarkers = (Map) ObjectUtilities.clone(this.foregroundRangeMarkers); [EOL]     clone.backgroundRangeMarkers = (Map) ObjectUtilities.clone(this.backgroundRangeMarkers); [EOL]     clone.annotations = (List) ObjectUtilities.deepClone(this.annotations); [EOL]     if (this.fixedDomainAxisSpace != null) { [EOL]         clone.fixedDomainAxisSpace = (AxisSpace) ObjectUtilities.clone(this.fixedDomainAxisSpace); [EOL]     } [EOL]     if (this.fixedRangeAxisSpace != null) { [EOL]         clone.fixedRangeAxisSpace = (AxisSpace) ObjectUtilities.clone(this.fixedRangeAxisSpace); [EOL]     } [EOL]     if (this.fixedLegendItems != null) { [EOL]         clone.fixedLegendItems = (LegendItemCollection) this.fixedLegendItems.clone(); [EOL]     } [EOL]     clone.quadrantOrigin = (Point2D) ObjectUtilities.clone(this.quadrantOrigin); [EOL]     clone.quadrantPaint = (Paint[]) this.quadrantPaint.clone(); [EOL]     return clone; [EOL] } <line_num>: 5644,5724
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writeStroke(this.domainGridlineStroke, stream); [EOL]     SerialUtilities.writePaint(this.domainGridlinePaint, stream); [EOL]     SerialUtilities.writeStroke(this.rangeGridlineStroke, stream); [EOL]     SerialUtilities.writePaint(this.rangeGridlinePaint, stream); [EOL]     SerialUtilities.writeStroke(this.domainMinorGridlineStroke, stream); [EOL]     SerialUtilities.writePaint(this.domainMinorGridlinePaint, stream); [EOL]     SerialUtilities.writeStroke(this.rangeMinorGridlineStroke, stream); [EOL]     SerialUtilities.writePaint(this.rangeMinorGridlinePaint, stream); [EOL]     SerialUtilities.writeStroke(this.rangeZeroBaselineStroke, stream); [EOL]     SerialUtilities.writePaint(this.rangeZeroBaselinePaint, stream); [EOL]     SerialUtilities.writeStroke(this.domainCrosshairStroke, stream); [EOL]     SerialUtilities.writePaint(this.domainCrosshairPaint, stream); [EOL]     SerialUtilities.writeStroke(this.rangeCrosshairStroke, stream); [EOL]     SerialUtilities.writePaint(this.rangeCrosshairPaint, stream); [EOL]     SerialUtilities.writePaint(this.domainTickBandPaint, stream); [EOL]     SerialUtilities.writePaint(this.rangeTickBandPaint, stream); [EOL]     SerialUtilities.writePoint2D(this.quadrantOrigin, stream); [EOL]     for (int i = 0; i < 4; i++) { [EOL]         SerialUtilities.writePaint(this.quadrantPaint[i], stream); [EOL]     } [EOL]     SerialUtilities.writeStroke(this.domainZeroBaselineStroke, stream); [EOL]     SerialUtilities.writePaint(this.domainZeroBaselinePaint, stream); [EOL] } <line_num>: 5733,5757
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.domainGridlineStroke = SerialUtilities.readStroke(stream); [EOL]     this.domainGridlinePaint = SerialUtilities.readPaint(stream); [EOL]     this.rangeGridlineStroke = SerialUtilities.readStroke(stream); [EOL]     this.rangeGridlinePaint = SerialUtilities.readPaint(stream); [EOL]     this.domainMinorGridlineStroke = SerialUtilities.readStroke(stream); [EOL]     this.domainMinorGridlinePaint = SerialUtilities.readPaint(stream); [EOL]     this.rangeMinorGridlineStroke = SerialUtilities.readStroke(stream); [EOL]     this.rangeMinorGridlinePaint = SerialUtilities.readPaint(stream); [EOL]     this.rangeZeroBaselineStroke = SerialUtilities.readStroke(stream); [EOL]     this.rangeZeroBaselinePaint = SerialUtilities.readPaint(stream); [EOL]     this.domainCrosshairStroke = SerialUtilities.readStroke(stream); [EOL]     this.domainCrosshairPaint = SerialUtilities.readPaint(stream); [EOL]     this.rangeCrosshairStroke = SerialUtilities.readStroke(stream); [EOL]     this.rangeCrosshairPaint = SerialUtilities.readPaint(stream); [EOL]     this.domainTickBandPaint = SerialUtilities.readPaint(stream); [EOL]     this.rangeTickBandPaint = SerialUtilities.readPaint(stream); [EOL]     this.quadrantOrigin = SerialUtilities.readPoint2D(stream); [EOL]     this.quadrantPaint = new Paint[4]; [EOL]     for (int i = 0; i < 4; i++) { [EOL]         this.quadrantPaint[i] = SerialUtilities.readPaint(stream); [EOL]     } [EOL]     this.domainZeroBaselineStroke = SerialUtilities.readStroke(stream); [EOL]     this.domainZeroBaselinePaint = SerialUtilities.readPaint(stream); [EOL]     int domainAxisCount = this.domainAxes.size(); [EOL]     for (int i = 0; i < domainAxisCount; i++) { [EOL]         Axis axis = (Axis) this.domainAxes.get(i); [EOL]         if (axis != null) { [EOL]             axis.setPlot(this); [EOL]             axis.addChangeListener(this); [EOL]         } [EOL]     } [EOL]     int rangeAxisCount = this.rangeAxes.size(); [EOL]     for (int i = 0; i < rangeAxisCount; i++) { [EOL]         Axis axis = (Axis) this.rangeAxes.get(i); [EOL]         if (axis != null) { [EOL]             axis.setPlot(this); [EOL]             axis.addChangeListener(this); [EOL]         } [EOL]     } [EOL]     int datasetCount = this.datasets.size(); [EOL]     for (int i = 0; i < datasetCount; i++) { [EOL]         Dataset dataset = (Dataset) this.datasets.get(i); [EOL]         if (dataset != null) { [EOL]             dataset.addChangeListener(this); [EOL]         } [EOL]     } [EOL]     int rendererCount = this.renderers.size(); [EOL]     for (int i = 0; i < rendererCount; i++) { [EOL]         XYItemRenderer renderer = (XYItemRenderer) this.renderers.get(i); [EOL]         if (renderer != null) { [EOL]             renderer.addChangeListener(this); [EOL]         } [EOL]     } [EOL] } <line_num>: 5767,5829
public boolean canSelectByPoint() { [EOL]     return true; [EOL] } <line_num>: 5840,5842
public boolean canSelectByRegion() { [EOL]     return true; [EOL] } <line_num>: 5852,5854
public void select(double xx, double yy, Rectangle2D dataArea, RenderingSource source) { [EOL]     int datasetCount = this.datasets.size(); [EOL]     for (int d = 0; d < datasetCount; d++) { [EOL]         XYDataset dataset = (XYDataset) this.datasets.get(d); [EOL]         if (dataset == null) { [EOL]             continue; [EOL]         } [EOL]         XYDatasetSelectionState state = findSelectionStateForDataset(dataset, source); [EOL]         if (state == null) { [EOL]             continue; [EOL]         } [EOL]         Graphics2D g2 = source.createGraphics2D(); [EOL]         XYItemRenderer renderer = getRendererForDataset(dataset); [EOL]         XYItemRendererState rs = renderer.initialise(source.createGraphics2D(), dataArea, this, dataset, null); [EOL]         int seriesCount = dataset.getSeriesCount(); [EOL]         for (int s = 0; s < seriesCount; s++) { [EOL]             int itemCount = dataset.getItemCount(s); [EOL]             for (int i = 0; i < itemCount; i++) { [EOL]                 if (renderer.hitTest(xx, yy, g2, dataArea, this, getDomainAxisForDataset(d), getRangeAxisForDataset(d), dataset, s, i, rs, false)) { [EOL]                     state.setSelected(s, i, !state.isSelected(s, i)); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 5867,5899
public void select(GeneralPath region, Rectangle2D dataArea, RenderingSource source) { [EOL]     int datasetCount = this.datasets.size(); [EOL]     for (int d = 0; d < datasetCount; d++) { [EOL]         XYDataset dataset = (XYDataset) this.datasets.get(d); [EOL]         if (dataset == null) { [EOL]             continue; [EOL]         } [EOL]         XYDatasetSelectionState state = findSelectionStateForDataset(dataset, source); [EOL]         if (state == null) { [EOL]             continue; [EOL]         } [EOL]         GeneralPath path = convertToDataSpace(region, dataArea, dataset); [EOL]         int seriesCount = dataset.getSeriesCount(); [EOL]         for (int s = 0; s < seriesCount; s++) { [EOL]             int itemCount = dataset.getItemCount(s); [EOL]             for (int i = 0; i < itemCount; i++) { [EOL]                 double x = dataset.getXValue(s, i); [EOL]                 double y = dataset.getYValue(s, i); [EOL]                 if (path.contains(x, y)) { [EOL]                     state.setSelected(s, i, true, false); [EOL]                 } [EOL]             } [EOL]         } [EOL]         state.fireSelectionEvent(); [EOL]     } [EOL] } <line_num>: 5910,5945
private XYDatasetSelectionState findSelectionStateForDataset(XYDataset dataset, Object source) { [EOL]     if (dataset instanceof SelectableXYDataset) { [EOL]         SelectableXYDataset sd = (SelectableXYDataset) dataset; [EOL]         XYDatasetSelectionState s = sd.getSelectionState(); [EOL]         return s; [EOL]     } [EOL]     throw new RuntimeException(); [EOL] } <line_num>: 5957,5966
private GeneralPath convertToDataSpace(GeneralPath path, Rectangle2D dataArea, XYDataset dataset) { [EOL]     GeneralPath result = new GeneralPath(path.getWindingRule()); [EOL]     int datasetIndex = indexOf(dataset); [EOL]     ValueAxis xAxis = getDomainAxisForDataset(datasetIndex); [EOL]     ValueAxis yAxis = getRangeAxisForDataset(datasetIndex); [EOL]     RectangleEdge xAxisEdge = getDomainAxisEdge(); [EOL]     RectangleEdge yAxisEdge = getRangeAxisEdge(); [EOL]     double[] coords = new double[6]; [EOL]     PathIterator iterator = path.getPathIterator(null); [EOL]     while (!iterator.isDone()) { [EOL]         int segType = iterator.currentSegment(coords); [EOL]         double xx = xAxis.java2DToValue(coords[0], dataArea, xAxisEdge); [EOL]         double yy = yAxis.java2DToValue(coords[1], dataArea, yAxisEdge); [EOL]         if (segType == PathIterator.SEG_MOVETO) { [EOL]             result.moveTo((float) xx, (float) yy); [EOL]         } else if (segType == PathIterator.SEG_LINETO) { [EOL]             result.lineTo((float) xx, (float) yy); [EOL]         } else if (segType == PathIterator.SEG_CLOSE) { [EOL]             result.closePath(); [EOL]         } [EOL]         iterator.next(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 5978,6004
public void clearSelection() { [EOL]     int datasetCount = this.datasets.size(); [EOL]     for (int d = 0; d < datasetCount; d++) { [EOL]         XYDataset dataset = (XYDataset) this.datasets.get(d); [EOL]         if (dataset instanceof AbstractXYDataset) { [EOL]             AbstractXYDataset axyd = (AbstractXYDataset) dataset; [EOL]             if (axyd.getSelectionState() != null) { [EOL]                 XYDatasetSelectionState selState = axyd.getSelectionState(); [EOL]                 selState.clearSelection(); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 6011,6026
