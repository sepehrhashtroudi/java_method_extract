public PolarPlot() { [EOL]     this(null, null, null); [EOL] } <line_num>: 193,195
public PolarPlot(XYDataset dataset, ValueAxis radiusAxis, PolarItemRenderer renderer) { [EOL]     super(); [EOL]     this.dataset = dataset; [EOL]     if (this.dataset != null) { [EOL]         this.dataset.addChangeListener(this); [EOL]     } [EOL]     this.angleTickUnit = new NumberTickUnit(DEFAULT_ANGLE_TICK_UNIT_SIZE); [EOL]     this.axis = radiusAxis; [EOL]     if (this.axis != null) { [EOL]         this.axis.setPlot(this); [EOL]         this.axis.addChangeListener(this); [EOL]     } [EOL]     this.renderer = renderer; [EOL]     if (this.renderer != null) { [EOL]         this.renderer.setPlot(this); [EOL]         this.renderer.addChangeListener(this); [EOL]     } [EOL]     this.angleGridlinesVisible = true; [EOL]     this.angleGridlineStroke = DEFAULT_GRIDLINE_STROKE; [EOL]     this.angleGridlinePaint = DEFAULT_GRIDLINE_PAINT; [EOL]     this.radiusGridlinesVisible = true; [EOL]     this.radiusGridlineStroke = DEFAULT_GRIDLINE_STROKE; [EOL]     this.radiusGridlinePaint = DEFAULT_GRIDLINE_PAINT; [EOL] } <line_num>: 204,235
public void addCornerTextItem(String text) { [EOL]     if (text == null) { [EOL]         throw new IllegalArgumentException("Null 'text' argument."); [EOL]     } [EOL]     this.cornerTextItems.add(text); [EOL]     fireChangeEvent(); [EOL] } <line_num>: 245,251
public void removeCornerTextItem(String text) { [EOL]     boolean removed = this.cornerTextItems.remove(text); [EOL]     if (removed) { [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 261,266
public void clearCornerTextItems() { [EOL]     if (this.cornerTextItems.size() > 0) { [EOL]         this.cornerTextItems.clear(); [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 275,280
public String getPlotType() { [EOL]     return PolarPlot.localizationResources.getString("Polar_Plot"); [EOL] } <line_num>: 287,289
public ValueAxis getAxis() { [EOL]     return this.axis; [EOL] } <line_num>: 298,300
public void setAxis(ValueAxis axis) { [EOL]     if (axis != null) { [EOL]         axis.setPlot(this); [EOL]     } [EOL]     if (this.axis != null) { [EOL]         this.axis.removeChangeListener(this); [EOL]     } [EOL]     this.axis = axis; [EOL]     if (this.axis != null) { [EOL]         this.axis.configure(); [EOL]         this.axis.addChangeListener(this); [EOL]     } [EOL]     fireChangeEvent(); [EOL] } <line_num>: 308,324
public XYDataset getDataset() { [EOL]     return this.dataset; [EOL] } <line_num>: 333,335
public void setDataset(XYDataset dataset) { [EOL]     XYDataset existing = this.dataset; [EOL]     if (existing != null) { [EOL]         existing.removeChangeListener(this); [EOL]     } [EOL]     this.dataset = dataset; [EOL]     if (this.dataset != null) { [EOL]         setDatasetGroup(this.dataset.getGroup()); [EOL]         this.dataset.addChangeListener(this); [EOL]     } [EOL]     DatasetChangeEvent event = new DatasetChangeEvent(this, this.dataset, new DatasetChangeInfo()); [EOL]     datasetChanged(event); [EOL] } <line_num>: 345,365
public PolarItemRenderer getRenderer() { [EOL]     return this.renderer; [EOL] } <line_num>: 374,376
public void setRenderer(PolarItemRenderer renderer) { [EOL]     if (this.renderer != null) { [EOL]         this.renderer.removeChangeListener(this); [EOL]     } [EOL]     this.renderer = renderer; [EOL]     if (this.renderer != null) { [EOL]         this.renderer.setPlot(this); [EOL]     } [EOL]     fireChangeEvent(); [EOL] } <line_num>: 388,399
public TickUnit getAngleTickUnit() { [EOL]     return this.angleTickUnit; [EOL] } <line_num>: 409,411
public void setAngleTickUnit(TickUnit unit) { [EOL]     if (unit == null) { [EOL]         throw new IllegalArgumentException("Null 'unit' argument."); [EOL]     } [EOL]     this.angleTickUnit = unit; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 421,427
public boolean isAngleLabelsVisible() { [EOL]     return this.angleLabelsVisible; [EOL] } <line_num>: 436,438
public void setAngleLabelsVisible(boolean visible) { [EOL]     if (this.angleLabelsVisible != visible) { [EOL]         this.angleLabelsVisible = visible; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 448,453
public Font getAngleLabelFont() { [EOL]     return this.angleLabelFont; [EOL] } <line_num>: 462,464
public void setAngleLabelFont(Font font) { [EOL]     if (font == null) { [EOL]         throw new IllegalArgumentException("Null 'font' argument."); [EOL]     } [EOL]     this.angleLabelFont = font; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 474,480
public Paint getAngleLabelPaint() { [EOL]     return this.angleLabelPaint; [EOL] } <line_num>: 489,491
public void setAngleLabelPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.angleLabelPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 499,505
public boolean isAngleGridlinesVisible() { [EOL]     return this.angleGridlinesVisible; [EOL] } <line_num>: 515,517
public void setAngleGridlinesVisible(boolean visible) { [EOL]     if (this.angleGridlinesVisible != visible) { [EOL]         this.angleGridlinesVisible = visible; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 530,535
public Stroke getAngleGridlineStroke() { [EOL]     return this.angleGridlineStroke; [EOL] } <line_num>: 545,547
public void setAngleGridlineStroke(Stroke stroke) { [EOL]     this.angleGridlineStroke = stroke; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 559,562
public Paint getAngleGridlinePaint() { [EOL]     return this.angleGridlinePaint; [EOL] } <line_num>: 572,574
public void setAngleGridlinePaint(Paint paint) { [EOL]     this.angleGridlinePaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 585,588
public boolean isRadiusGridlinesVisible() { [EOL]     return this.radiusGridlinesVisible; [EOL] } <line_num>: 598,600
public void setRadiusGridlinesVisible(boolean visible) { [EOL]     if (this.radiusGridlinesVisible != visible) { [EOL]         this.radiusGridlinesVisible = visible; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 613,618
public Stroke getRadiusGridlineStroke() { [EOL]     return this.radiusGridlineStroke; [EOL] } <line_num>: 628,630
public void setRadiusGridlineStroke(Stroke stroke) { [EOL]     this.radiusGridlineStroke = stroke; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 642,645
public Paint getRadiusGridlinePaint() { [EOL]     return this.radiusGridlinePaint; [EOL] } <line_num>: 655,657
public void setRadiusGridlinePaint(Paint paint) { [EOL]     this.radiusGridlinePaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 669,672
protected List refreshAngleTicks() { [EOL]     List ticks = new ArrayList(); [EOL]     for (double currentTickVal = 0.0; currentTickVal < 360.0; currentTickVal += this.angleTickUnit.getSize()) { [EOL]         NumberTick tick = new NumberTick(new Double(currentTickVal), this.angleTickUnit.valueToString(currentTickVal), TextAnchor.CENTER, TextAnchor.CENTER, 0.0); [EOL]         ticks.add(tick); [EOL]     } [EOL]     return ticks; [EOL] } <line_num>: 681,691
public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor, PlotState parentState, PlotRenderingInfo info) { [EOL]     boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW); [EOL]     boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW); [EOL]     if (b1 || b2) { [EOL]         return; [EOL]     } [EOL]     if (info != null) { [EOL]         info.setPlotArea(area); [EOL]     } [EOL]     RectangleInsets insets = getInsets(); [EOL]     insets.trim(area); [EOL]     Rectangle2D dataArea = area; [EOL]     if (info != null) { [EOL]         info.setDataArea(dataArea); [EOL]     } [EOL]     drawBackground(g2, dataArea); [EOL]     double h = Math.min(dataArea.getWidth() / 2.0, dataArea.getHeight() / 2.0) - MARGIN; [EOL]     Rectangle2D quadrant = new Rectangle2D.Double(dataArea.getCenterX(), dataArea.getCenterY(), h, h); [EOL]     AxisState state = drawAxis(g2, area, quadrant); [EOL]     if (this.renderer != null) { [EOL]         Shape originalClip = g2.getClip(); [EOL]         Composite originalComposite = g2.getComposite(); [EOL]         g2.clip(dataArea); [EOL]         g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, getForegroundAlpha())); [EOL]         this.angleTicks = refreshAngleTicks(); [EOL]         drawGridlines(g2, dataArea, this.angleTicks, state.getTicks()); [EOL]         render(g2, dataArea, info); [EOL]         g2.setClip(originalClip); [EOL]         g2.setComposite(originalComposite); [EOL]     } [EOL]     drawOutline(g2, dataArea); [EOL]     drawCornerTextItems(g2, dataArea); [EOL] } <line_num>: 713,766
protected void drawCornerTextItems(Graphics2D g2, Rectangle2D area) { [EOL]     if (this.cornerTextItems.isEmpty()) { [EOL]         return; [EOL]     } [EOL]     g2.setColor(Color.black); [EOL]     double width = 0.0; [EOL]     double height = 0.0; [EOL]     for (Iterator it = this.cornerTextItems.iterator(); it.hasNext(); ) { [EOL]         String msg = (String) it.next(); [EOL]         FontMetrics fm = g2.getFontMetrics(); [EOL]         Rectangle2D bounds = TextUtilities.getTextBounds(msg, g2, fm); [EOL]         width = Math.max(width, bounds.getWidth()); [EOL]         height += bounds.getHeight(); [EOL]     } [EOL]     double xadj = ANNOTATION_MARGIN * 2.0; [EOL]     double yadj = ANNOTATION_MARGIN; [EOL]     width += xadj; [EOL]     height += yadj; [EOL]     double x = area.getMaxX() - width; [EOL]     double y = area.getMaxY() - height; [EOL]     g2.drawRect((int) x, (int) y, (int) width, (int) height); [EOL]     x += ANNOTATION_MARGIN; [EOL]     for (Iterator it = this.cornerTextItems.iterator(); it.hasNext(); ) { [EOL]         String msg = (String) it.next(); [EOL]         Rectangle2D bounds = TextUtilities.getTextBounds(msg, g2, g2.getFontMetrics()); [EOL]         y += bounds.getHeight(); [EOL]         g2.drawString(msg, (int) x, (int) y); [EOL]     } [EOL] } <line_num>: 774,806
protected AxisState drawAxis(Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea) { [EOL]     return this.axis.draw(g2, dataArea.getMinY(), plotArea, dataArea, RectangleEdge.TOP, null); [EOL] } <line_num>: 817,821
protected void render(Graphics2D g2, Rectangle2D dataArea, PlotRenderingInfo info) { [EOL]     if (!DatasetUtilities.isEmptyOrNull(this.dataset)) { [EOL]         int seriesCount = this.dataset.getSeriesCount(); [EOL]         for (int series = 0; series < seriesCount; series++) { [EOL]             this.renderer.drawSeries(g2, dataArea, info, this, this.dataset, series); [EOL]         } [EOL]     } else { [EOL]         drawNoDataMessage(g2, dataArea); [EOL]     } [EOL] } <line_num>: 832,848
protected void drawGridlines(Graphics2D g2, Rectangle2D dataArea, List angularTicks, List radialTicks) { [EOL]     if (this.renderer == null) { [EOL]         return; [EOL]     } [EOL]     if (isAngleGridlinesVisible()) { [EOL]         Stroke gridStroke = getAngleGridlineStroke(); [EOL]         Paint gridPaint = getAngleGridlinePaint(); [EOL]         if ((gridStroke != null) && (gridPaint != null)) { [EOL]             this.renderer.drawAngularGridLines(g2, this, angularTicks, dataArea); [EOL]         } [EOL]     } [EOL]     if (isRadiusGridlinesVisible()) { [EOL]         Stroke gridStroke = getRadiusGridlineStroke(); [EOL]         Paint gridPaint = getRadiusGridlinePaint(); [EOL]         if ((gridStroke != null) && (gridPaint != null)) { [EOL]             this.renderer.drawRadialGridLines(g2, this, this.axis, radialTicks, dataArea); [EOL]         } [EOL]     } [EOL] } <line_num>: 858,885
public void zoom(double percent) { [EOL]     if (percent > 0.0) { [EOL]         double radius = getMaxRadius(); [EOL]         double scaledRadius = radius * percent; [EOL]         this.axis.setUpperBound(scaledRadius); [EOL]         getAxis().setAutoRange(false); [EOL]     } else { [EOL]         getAxis().setAutoRange(true); [EOL]     } [EOL] } <line_num>: 892,902
public Range getDataRange(ValueAxis axis) { [EOL]     Range result = null; [EOL]     if (this.dataset != null) { [EOL]         result = Range.combine(result, DatasetUtilities.findRangeBounds(this.dataset)); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 911,918
public void datasetChanged(DatasetChangeEvent event) { [EOL]     if (this.axis != null) { [EOL]         this.axis.configure(); [EOL]     } [EOL]     if (getParent() != null) { [EOL]         getParent().datasetChanged(event); [EOL]     } else { [EOL]         super.datasetChanged(event); [EOL]     } [EOL] } <line_num>: 927,939
public void rendererChanged(RendererChangeEvent event) { [EOL]     fireChangeEvent(); [EOL] } <line_num>: 948,950
public int getSeriesCount() { [EOL]     int result = 0; [EOL]     if (this.dataset != null) { [EOL]         result = this.dataset.getSeriesCount(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 958,965
public LegendItemCollection getLegendItems() { [EOL]     LegendItemCollection result = new LegendItemCollection(); [EOL]     if (this.dataset != null) { [EOL]         if (this.renderer != null) { [EOL]             int seriesCount = this.dataset.getSeriesCount(); [EOL]             for (int i = 0; i < seriesCount; i++) { [EOL]                 LegendItem item = this.renderer.getLegendItem(i); [EOL]                 result.add(item); [EOL]             } [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 974,988
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof PolarPlot)) { [EOL]         return false; [EOL]     } [EOL]     PolarPlot that = (PolarPlot) obj; [EOL]     if (!ObjectUtilities.equal(this.axis, that.axis)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.renderer, that.renderer)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.angleTickUnit.equals(that.angleTickUnit)) { [EOL]         return false; [EOL]     } [EOL]     if (this.angleGridlinesVisible != that.angleGridlinesVisible) { [EOL]         return false; [EOL]     } [EOL]     if (this.angleLabelsVisible != that.angleLabelsVisible) { [EOL]         return false; [EOL]     } [EOL]     if (!this.angleLabelFont.equals(that.angleLabelFont)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.angleLabelPaint, that.angleLabelPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.angleGridlineStroke, that.angleGridlineStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.angleGridlinePaint, that.angleGridlinePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (this.radiusGridlinesVisible != that.radiusGridlinesVisible) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.radiusGridlineStroke, that.radiusGridlineStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.radiusGridlinePaint, that.radiusGridlinePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!this.cornerTextItems.equals(that.cornerTextItems)) { [EOL]         return false; [EOL]     } [EOL]     return super.equals(obj); [EOL] } <line_num>: 997,1050
public Object clone() throws CloneNotSupportedException { [EOL]     PolarPlot clone = (PolarPlot) super.clone(); [EOL]     if (this.axis != null) { [EOL]         clone.axis = (ValueAxis) ObjectUtilities.clone(this.axis); [EOL]         clone.axis.setPlot(clone); [EOL]         clone.axis.addChangeListener(clone); [EOL]     } [EOL]     if (clone.dataset != null) { [EOL]         clone.dataset.addChangeListener(clone); [EOL]     } [EOL]     if (this.renderer != null) { [EOL]         clone.renderer = (PolarItemRenderer) ObjectUtilities.clone(this.renderer); [EOL]     } [EOL]     clone.cornerTextItems = new ArrayList(this.cornerTextItems); [EOL]     return clone; [EOL] } <line_num>: 1060,1081
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writeStroke(this.angleGridlineStroke, stream); [EOL]     SerialUtilities.writePaint(this.angleGridlinePaint, stream); [EOL]     SerialUtilities.writeStroke(this.radiusGridlineStroke, stream); [EOL]     SerialUtilities.writePaint(this.radiusGridlinePaint, stream); [EOL]     SerialUtilities.writePaint(this.angleLabelPaint, stream); [EOL] } <line_num>: 1090,1097
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.angleGridlineStroke = SerialUtilities.readStroke(stream); [EOL]     this.angleGridlinePaint = SerialUtilities.readPaint(stream); [EOL]     this.radiusGridlineStroke = SerialUtilities.readStroke(stream); [EOL]     this.radiusGridlinePaint = SerialUtilities.readPaint(stream); [EOL]     this.angleLabelPaint = SerialUtilities.readPaint(stream); [EOL]     if (this.axis != null) { [EOL]         this.axis.setPlot(this); [EOL]         this.axis.addChangeListener(this); [EOL]     } [EOL]     if (this.dataset != null) { [EOL]         this.dataset.addChangeListener(this); [EOL]     } [EOL] } <line_num>: 1107,1125
public void zoomDomainAxes(double factor, PlotRenderingInfo state, Point2D source) { [EOL] } <line_num>: 1135,1138
public void zoomDomainAxes(double factor, PlotRenderingInfo state, Point2D source, boolean useAnchor) { [EOL] } <line_num>: 1151,1154
public void zoomDomainAxes(double lowerPercent, double upperPercent, PlotRenderingInfo state, Point2D source) { [EOL] } <line_num>: 1165,1168
public void zoomRangeAxes(double factor, PlotRenderingInfo state, Point2D source) { [EOL]     zoom(factor); [EOL] } <line_num>: 1177,1180
public void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) { [EOL]     if (useAnchor) { [EOL]         double sourceX = source.getX(); [EOL]         double anchorX = this.axis.java2DToValue(sourceX, info.getDataArea(), RectangleEdge.BOTTOM); [EOL]         this.axis.resizeRange(factor, anchorX); [EOL]     } else { [EOL]         this.axis.resizeRange(factor); [EOL]     } [EOL] } <line_num>: 1194,1209
public void zoomRangeAxes(double lowerPercent, double upperPercent, PlotRenderingInfo state, Point2D source) { [EOL]     zoom((upperPercent + lowerPercent) / 2.0); [EOL] } <line_num>: 1219,1222
public boolean isDomainZoomable() { [EOL]     return false; [EOL] } <line_num>: 1229,1231
public boolean isRangeZoomable() { [EOL]     return true; [EOL] } <line_num>: 1238,1240
public PlotOrientation getOrientation() { [EOL]     return PlotOrientation.HORIZONTAL; [EOL] } <line_num>: 1247,1249
public double getMaxRadius() { [EOL]     return this.axis.getUpperBound(); [EOL] } <line_num>: 1256,1258
public Point translateValueThetaRadiusToJava2D(double angleDegrees, double radius, Rectangle2D dataArea) { [EOL]     double radians = Math.toRadians(angleDegrees - 90.0); [EOL]     double minx = dataArea.getMinX() + MARGIN; [EOL]     double maxx = dataArea.getMaxX() - MARGIN; [EOL]     double miny = dataArea.getMinY() + MARGIN; [EOL]     double maxy = dataArea.getMaxY() - MARGIN; [EOL]     double lengthX = maxx - minx; [EOL]     double lengthY = maxy - miny; [EOL]     double length = Math.min(lengthX, lengthY); [EOL]     double midX = minx + lengthX / 2.0; [EOL]     double midY = miny + lengthY / 2.0; [EOL]     double axisMin = this.axis.getLowerBound(); [EOL]     double axisMax = getMaxRadius(); [EOL]     double adjustedRadius = Math.max(radius, axisMin); [EOL]     double xv = length / 2.0 * Math.cos(radians); [EOL]     double yv = length / 2.0 * Math.sin(radians); [EOL]     float x = (float) (midX + (xv * (adjustedRadius - axisMin) / (axisMax - axisMin))); [EOL]     float y = (float) (midY + (yv * (adjustedRadius - axisMin) / (axisMax - axisMin))); [EOL]     int ix = Math.round(x); [EOL]     int iy = Math.round(y); [EOL]     Point p = new Point(ix, iy); [EOL]     return p; [EOL] } <line_num>: 1271,1307
