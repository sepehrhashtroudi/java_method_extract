public ThermometerPlot() { [EOL]     this(new DefaultValueDataset()); [EOL] } <line_num>: 387,389
public ThermometerPlot(ValueDataset dataset) { [EOL]     super(); [EOL]     setBackgroundPaint(Color.WHITE); [EOL]     this.padding = new RectangleInsets(UnitType.RELATIVE, 0.05, 0.05, 0.05, 0.05); [EOL]     this.dataset = dataset; [EOL]     if (dataset != null) { [EOL]         dataset.addChangeListener(this); [EOL]     } [EOL]     NumberAxis axis = new NumberAxis(null); [EOL]     axis.setStandardTickUnits(NumberAxis.createIntegerTickUnits()); [EOL]     axis.setAxisLineVisible(false); [EOL]     axis.setPlot(this); [EOL]     axis.addChangeListener(this); [EOL]     this.rangeAxis = axis; [EOL]     setAxisRange(); [EOL] } <line_num>: 396,413
public ValueDataset getDataset() { [EOL]     return this.dataset; [EOL] } <line_num>: 422,424
public void setDataset(ValueDataset dataset) { [EOL]     ValueDataset existing = this.dataset; [EOL]     if (existing != null) { [EOL]         existing.removeChangeListener(this); [EOL]     } [EOL]     this.dataset = dataset; [EOL]     if (dataset != null) { [EOL]         setDatasetGroup(dataset.getGroup()); [EOL]         dataset.addChangeListener(this); [EOL]     } [EOL]     DatasetChangeEvent event = new DatasetChangeEvent(this, dataset, new DatasetChangeInfo()); [EOL]     datasetChanged(event); [EOL] } <line_num>: 434,456
public ValueAxis getRangeAxis() { [EOL]     return this.rangeAxis; [EOL] } <line_num>: 465,467
public void setRangeAxis(ValueAxis axis) { [EOL]     if (axis == null) { [EOL]         throw new IllegalArgumentException("Null 'axis' argument."); [EOL]     } [EOL]     this.rangeAxis.removeChangeListener(this); [EOL]     axis.setPlot(this); [EOL]     axis.addChangeListener(this); [EOL]     this.rangeAxis = axis; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 477,489
public double getLowerBound() { [EOL]     return this.lowerBound; [EOL] } <line_num>: 499,501
public void setLowerBound(double lower) { [EOL]     this.lowerBound = lower; [EOL]     setAxisRange(); [EOL] } <line_num>: 510,513
public double getUpperBound() { [EOL]     return this.upperBound; [EOL] } <line_num>: 523,525
public void setUpperBound(double upper) { [EOL]     this.upperBound = upper; [EOL]     setAxisRange(); [EOL] } <line_num>: 534,537
public void setRange(double lower, double upper) { [EOL]     this.lowerBound = lower; [EOL]     this.upperBound = upper; [EOL]     setAxisRange(); [EOL] } <line_num>: 545,549
public RectangleInsets getPadding() { [EOL]     return this.padding; [EOL] } <line_num>: 559,561
public void setPadding(RectangleInsets padding) { [EOL]     if (padding == null) { [EOL]         throw new IllegalArgumentException("Null 'padding' argument."); [EOL]     } [EOL]     this.padding = padding; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 571,577
public Stroke getThermometerStroke() { [EOL]     return this.thermometerStroke; [EOL] } <line_num>: 587,589
public void setThermometerStroke(Stroke s) { [EOL]     if (s != null) { [EOL]         this.thermometerStroke = s; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 599,604
public Paint getThermometerPaint() { [EOL]     return this.thermometerPaint; [EOL] } <line_num>: 614,616
public void setThermometerPaint(Paint paint) { [EOL]     if (paint != null) { [EOL]         this.thermometerPaint = paint; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 626,631
public int getUnits() { [EOL]     return this.units; [EOL] } <line_num>: 642,644
public void setUnits(int u) { [EOL]     if ((u >= 0) && (u < UNITS.length)) { [EOL]         if (this.units != u) { [EOL]             this.units = u; [EOL]             fireChangeEvent(); [EOL]         } [EOL]     } [EOL] } <line_num>: 661,668
public int getValueLocation() { [EOL]     return this.valueLocation; [EOL] } <line_num>: 677,679
public void setValueLocation(int location) { [EOL]     if ((location >= 0) && (location < 4)) { [EOL]         this.valueLocation = location; [EOL]         fireChangeEvent(); [EOL]     } else { [EOL]         throw new IllegalArgumentException("Location not recognised."); [EOL]     } [EOL] } <line_num>: 693,701
public int getAxisLocation() { [EOL]     return this.axisLocation; [EOL] } <line_num>: 711,713
public void setAxisLocation(int location) { [EOL]     if ((location >= 0) && (location < 3)) { [EOL]         this.axisLocation = location; [EOL]         fireChangeEvent(); [EOL]     } else { [EOL]         throw new IllegalArgumentException("Location not recognised."); [EOL]     } [EOL] } <line_num>: 725,733
public Font getValueFont() { [EOL]     return this.valueFont; [EOL] } <line_num>: 742,744
public void setValueFont(Font f) { [EOL]     if (f == null) { [EOL]         throw new IllegalArgumentException("Null 'font' argument."); [EOL]     } [EOL]     if (!this.valueFont.equals(f)) { [EOL]         this.valueFont = f; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 753,761
public Paint getValuePaint() { [EOL]     return this.valuePaint; [EOL] } <line_num>: 770,772
public void setValuePaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     if (!this.valuePaint.equals(paint)) { [EOL]         this.valuePaint = paint; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 782,790
public void setValueFormat(NumberFormat formatter) { [EOL]     if (formatter == null) { [EOL]         throw new IllegalArgumentException("Null 'formatter' argument."); [EOL]     } [EOL]     this.valueFormat = formatter; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 800,806
public Paint getMercuryPaint() { [EOL]     return this.mercuryPaint; [EOL] } <line_num>: 815,817
public void setMercuryPaint(Paint paint) { [EOL]     if (paint == null) { [EOL]         throw new IllegalArgumentException("Null 'paint' argument."); [EOL]     } [EOL]     this.mercuryPaint = paint; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 827,833
public void setSubrangeInfo(int range, double low, double hi) { [EOL]     setSubrangeInfo(range, low, hi, low, hi); [EOL] } <line_num>: 842,844
public void setSubrangeInfo(int range, double rangeLow, double rangeHigh, double displayLow, double displayHigh) { [EOL]     if ((range >= 0) && (range < 3)) { [EOL]         setSubrange(range, rangeLow, rangeHigh); [EOL]         setDisplayRange(range, displayLow, displayHigh); [EOL]         setAxisRange(); [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 855,866
public void setSubrange(int range, double low, double high) { [EOL]     if ((range >= 0) && (range < 3)) { [EOL]         this.subrangeInfo[range][RANGE_HIGH] = high; [EOL]         this.subrangeInfo[range][RANGE_LOW] = low; [EOL]     } [EOL] } <line_num>: 875,880
public void setDisplayRange(int range, double low, double high) { [EOL]     if ((range >= 0) && (range < this.subrangeInfo.length) && isValidNumber(high) && isValidNumber(low)) { [EOL]         if (high > low) { [EOL]             this.subrangeInfo[range][DISPLAY_HIGH] = high; [EOL]             this.subrangeInfo[range][DISPLAY_LOW] = low; [EOL]         } else { [EOL]             this.subrangeInfo[range][DISPLAY_HIGH] = low; [EOL]             this.subrangeInfo[range][DISPLAY_LOW] = high; [EOL]         } [EOL]     } [EOL] } <line_num>: 889,905
public Paint getSubrangePaint(int range) { [EOL]     if ((range >= 0) && (range < this.subrangePaint.length)) { [EOL]         return this.subrangePaint[range]; [EOL]     } else { [EOL]         return this.mercuryPaint; [EOL]     } [EOL] } <line_num>: 916,923
public void setSubrangePaint(int range, Paint paint) { [EOL]     if ((range >= 0) && (range < this.subrangePaint.length) && (paint != null)) { [EOL]         this.subrangePaint[range] = paint; [EOL]         fireChangeEvent(); [EOL]     } [EOL] } <line_num>: 934,940
public boolean getFollowDataInSubranges() { [EOL]     return this.followDataInSubranges; [EOL] } <line_num>: 948,950
public void setFollowDataInSubranges(boolean flag) { [EOL]     this.followDataInSubranges = flag; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 958,961
public boolean getUseSubrangePaint() { [EOL]     return this.useSubrangePaint; [EOL] } <line_num>: 971,973
public void setUseSubrangePaint(boolean flag) { [EOL]     this.useSubrangePaint = flag; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 982,985
public int getBulbRadius() { [EOL]     return this.bulbRadius; [EOL] } <line_num>: 994,996
public void setBulbRadius(int r) { [EOL]     this.bulbRadius = r; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 1008,1011
public int getBulbDiameter() { [EOL]     return getBulbRadius() * 2; [EOL] } <line_num>: 1021,1023
public int getColumnRadius() { [EOL]     return this.columnRadius; [EOL] } <line_num>: 1034,1036
public void setColumnRadius(int r) { [EOL]     this.columnRadius = r; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 1048,1051
public int getColumnDiameter() { [EOL]     return getColumnRadius() * 2; [EOL] } <line_num>: 1061,1063
public int getGap() { [EOL]     return this.gap; [EOL] } <line_num>: 1075,1077
public void setGap(int gap) { [EOL]     this.gap = gap; [EOL]     fireChangeEvent(); [EOL] } <line_num>: 1090,1093
public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor, PlotState parentState, PlotRenderingInfo info) { [EOL]     RoundRectangle2D outerStem = new RoundRectangle2D.Double(); [EOL]     RoundRectangle2D innerStem = new RoundRectangle2D.Double(); [EOL]     RoundRectangle2D mercuryStem = new RoundRectangle2D.Double(); [EOL]     Ellipse2D outerBulb = new Ellipse2D.Double(); [EOL]     Ellipse2D innerBulb = new Ellipse2D.Double(); [EOL]     String temp = null; [EOL]     FontMetrics metrics = null; [EOL]     if (info != null) { [EOL]         info.setPlotArea(area); [EOL]     } [EOL]     RectangleInsets insets = getInsets(); [EOL]     insets.trim(area); [EOL]     drawBackground(g2, area); [EOL]     Rectangle2D interior = (Rectangle2D) area.clone(); [EOL]     this.padding.trim(interior); [EOL]     int midX = (int) (interior.getX() + (interior.getWidth() / 2)); [EOL]     int midY = (int) (interior.getY() + (interior.getHeight() / 2)); [EOL]     int stemTop = (int) (interior.getMinY() + getBulbRadius()); [EOL]     int stemBottom = (int) (interior.getMaxY() - getBulbDiameter()); [EOL]     Rectangle2D dataArea = new Rectangle2D.Double(midX - getColumnRadius(), stemTop, getColumnRadius(), stemBottom - stemTop); [EOL]     outerBulb.setFrame(midX - getBulbRadius(), stemBottom, getBulbDiameter(), getBulbDiameter()); [EOL]     outerStem.setRoundRect(midX - getColumnRadius(), interior.getMinY(), getColumnDiameter(), stemBottom + getBulbDiameter() - stemTop, getColumnDiameter(), getColumnDiameter()); [EOL]     Area outerThermometer = new Area(outerBulb); [EOL]     Area tempArea = new Area(outerStem); [EOL]     outerThermometer.add(tempArea); [EOL]     innerBulb.setFrame(midX - getBulbRadius() + getGap(), stemBottom + getGap(), getBulbDiameter() - getGap() * 2, getBulbDiameter() - getGap() * 2); [EOL]     innerStem.setRoundRect(midX - getColumnRadius() + getGap(), interior.getMinY() + getGap(), getColumnDiameter() - getGap() * 2, stemBottom + getBulbDiameter() - getGap() * 2 - stemTop, getColumnDiameter() - getGap() * 2, getColumnDiameter() - getGap() * 2); [EOL]     Area innerThermometer = new Area(innerBulb); [EOL]     tempArea = new Area(innerStem); [EOL]     innerThermometer.add(tempArea); [EOL]     if ((this.dataset != null) && (this.dataset.getValue() != null)) { [EOL]         double current = this.dataset.getValue().doubleValue(); [EOL]         double ds = this.rangeAxis.valueToJava2D(current, dataArea, RectangleEdge.LEFT); [EOL]         int i = getColumnDiameter() - getGap() * 2; [EOL]         int j = getColumnRadius() - getGap(); [EOL]         int l = (i / 2); [EOL]         int k = (int) Math.round(ds); [EOL]         if (k < (getGap() + interior.getMinY())) { [EOL]             k = (int) (getGap() + interior.getMinY()); [EOL]             l = getBulbRadius(); [EOL]         } [EOL]         Area mercury = new Area(innerBulb); [EOL]         if (k < (stemBottom + getBulbRadius())) { [EOL]             mercuryStem.setRoundRect(midX - j, k, i, (stemBottom + getBulbRadius()) - k, l, l); [EOL]             tempArea = new Area(mercuryStem); [EOL]             mercury.add(tempArea); [EOL]         } [EOL]         g2.setPaint(getCurrentPaint()); [EOL]         g2.fill(mercury); [EOL]         if (this.subrangeIndicatorsVisible) { [EOL]             g2.setStroke(this.subrangeIndicatorStroke); [EOL]             Range range = this.rangeAxis.getRange(); [EOL]             double value = this.subrangeInfo[NORMAL][RANGE_LOW]; [EOL]             if (range.contains(value)) { [EOL]                 double x = midX + getColumnRadius() + 2; [EOL]                 double y = this.rangeAxis.valueToJava2D(value, dataArea, RectangleEdge.LEFT); [EOL]                 Line2D line = new Line2D.Double(x, y, x + 10, y); [EOL]                 g2.setPaint(this.subrangePaint[NORMAL]); [EOL]                 g2.draw(line); [EOL]             } [EOL]             value = this.subrangeInfo[WARNING][RANGE_LOW]; [EOL]             if (range.contains(value)) { [EOL]                 double x = midX + getColumnRadius() + 2; [EOL]                 double y = this.rangeAxis.valueToJava2D(value, dataArea, RectangleEdge.LEFT); [EOL]                 Line2D line = new Line2D.Double(x, y, x + 10, y); [EOL]                 g2.setPaint(this.subrangePaint[WARNING]); [EOL]                 g2.draw(line); [EOL]             } [EOL]             value = this.subrangeInfo[CRITICAL][RANGE_LOW]; [EOL]             if (range.contains(value)) { [EOL]                 double x = midX + getColumnRadius() + 2; [EOL]                 double y = this.rangeAxis.valueToJava2D(value, dataArea, RectangleEdge.LEFT); [EOL]                 Line2D line = new Line2D.Double(x, y, x + 10, y); [EOL]                 g2.setPaint(this.subrangePaint[CRITICAL]); [EOL]                 g2.draw(line); [EOL]             } [EOL]         } [EOL]         if ((this.rangeAxis != null) && (this.axisLocation != NONE)) { [EOL]             int drawWidth = AXIS_GAP; [EOL]             Rectangle2D drawArea; [EOL]             double cursor = 0; [EOL]             switch(this.axisLocation) { [EOL]                 case RIGHT: [EOL]                     cursor = midX + getColumnRadius(); [EOL]                     drawArea = new Rectangle2D.Double(cursor, stemTop, drawWidth, (stemBottom - stemTop + 1)); [EOL]                     this.rangeAxis.draw(g2, cursor, area, drawArea, RectangleEdge.RIGHT, null); [EOL]                     break; [EOL]                 case LEFT: [EOL]                 default: [EOL]                     cursor = midX - getColumnRadius(); [EOL]                     drawArea = new Rectangle2D.Double(cursor, stemTop, drawWidth, (stemBottom - stemTop + 1)); [EOL]                     this.rangeAxis.draw(g2, cursor, area, drawArea, RectangleEdge.LEFT, null); [EOL]                     break; [EOL]             } [EOL]         } [EOL]         g2.setFont(this.valueFont); [EOL]         g2.setPaint(this.valuePaint); [EOL]         metrics = g2.getFontMetrics(); [EOL]         switch(this.valueLocation) { [EOL]             case RIGHT: [EOL]                 g2.drawString(this.valueFormat.format(current), midX + getColumnRadius() + getGap(), midY); [EOL]                 break; [EOL]             case LEFT: [EOL]                 String valueString = this.valueFormat.format(current); [EOL]                 int stringWidth = metrics.stringWidth(valueString); [EOL]                 g2.drawString(valueString, midX - getColumnRadius() - getGap() - stringWidth, midY); [EOL]                 break; [EOL]             case BULB: [EOL]                 temp = this.valueFormat.format(current); [EOL]                 i = metrics.stringWidth(temp) / 2; [EOL]                 g2.drawString(temp, midX - i, stemBottom + getBulbRadius() + getGap()); [EOL]                 break; [EOL]             default: [EOL]         } [EOL]     } [EOL]     g2.setPaint(this.thermometerPaint); [EOL]     g2.setFont(this.valueFont); [EOL]     metrics = g2.getFontMetrics(); [EOL]     int tickX1 = midX - getColumnRadius() - getGap() * 2 - metrics.stringWidth(UNITS[this.units]); [EOL]     if (tickX1 > area.getMinX()) { [EOL]         g2.drawString(UNITS[this.units], tickX1, (int) (area.getMinY() + 20)); [EOL]     } [EOL]     g2.setStroke(this.thermometerStroke); [EOL]     g2.draw(outerThermometer); [EOL]     g2.draw(innerThermometer); [EOL]     drawOutline(g2, area); [EOL] } <line_num>: 1105,1297
public void zoom(double percent) { [EOL] } <line_num>: 1306,1308
public String getPlotType() { [EOL]     return localizationResources.getString("Thermometer_Plot"); [EOL] } <line_num>: 1315,1317
public void datasetChanged(DatasetChangeEvent event) { [EOL]     if (this.dataset != null) { [EOL]         Number vn = this.dataset.getValue(); [EOL]         if (vn != null) { [EOL]             double value = vn.doubleValue(); [EOL]             if (inSubrange(NORMAL, value)) { [EOL]                 this.subrange = NORMAL; [EOL]             } else if (inSubrange(WARNING, value)) { [EOL]                 this.subrange = WARNING; [EOL]             } else if (inSubrange(CRITICAL, value)) { [EOL]                 this.subrange = CRITICAL; [EOL]             } else { [EOL]                 this.subrange = -1; [EOL]             } [EOL]             setAxisRange(); [EOL]         } [EOL]     } [EOL]     super.datasetChanged(event); [EOL] } <line_num>: 1324,1345
public Range getDataRange(ValueAxis axis) { [EOL]     return new Range(this.lowerBound, this.upperBound); [EOL] } <line_num>: 1354,1356
protected void setAxisRange() { [EOL]     if ((this.subrange >= 0) && (this.followDataInSubranges)) { [EOL]         this.rangeAxis.setRange(new Range(this.subrangeInfo[this.subrange][DISPLAY_LOW], this.subrangeInfo[this.subrange][DISPLAY_HIGH])); [EOL]     } else { [EOL]         this.rangeAxis.setRange(this.lowerBound, this.upperBound); [EOL]     } [EOL] } <line_num>: 1361,1370
public LegendItemCollection getLegendItems() { [EOL]     return null; [EOL] } <line_num>: 1377,1379
public PlotOrientation getOrientation() { [EOL]     return PlotOrientation.VERTICAL; [EOL] } <line_num>: 1386,1388
protected static boolean isValidNumber(double d) { [EOL]     return (!(Double.isNaN(d) || Double.isInfinite(d))); [EOL] } <line_num>: 1398,1400
private boolean inSubrange(int subrange, double value) { [EOL]     return (value > this.subrangeInfo[subrange][RANGE_LOW] && value <= this.subrangeInfo[subrange][RANGE_HIGH]); [EOL] } <line_num>: 1410,1413
private Paint getCurrentPaint() { [EOL]     Paint result = this.mercuryPaint; [EOL]     if (this.useSubrangePaint) { [EOL]         double value = this.dataset.getValue().doubleValue(); [EOL]         if (inSubrange(NORMAL, value)) { [EOL]             result = this.subrangePaint[NORMAL]; [EOL]         } else if (inSubrange(WARNING, value)) { [EOL]             result = this.subrangePaint[WARNING]; [EOL]         } else if (inSubrange(CRITICAL, value)) { [EOL]             result = this.subrangePaint[CRITICAL]; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 1422,1437
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof ThermometerPlot)) { [EOL]         return false; [EOL]     } [EOL]     ThermometerPlot that = (ThermometerPlot) obj; [EOL]     if (!super.equals(obj)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) { [EOL]         return false; [EOL]     } [EOL]     if (this.axisLocation != that.axisLocation) { [EOL]         return false; [EOL]     } [EOL]     if (this.lowerBound != that.lowerBound) { [EOL]         return false; [EOL]     } [EOL]     if (this.upperBound != that.upperBound) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.padding, that.padding)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.thermometerStroke, that.thermometerStroke)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.thermometerPaint, that.thermometerPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (this.units != that.units) { [EOL]         return false; [EOL]     } [EOL]     if (this.valueLocation != that.valueLocation) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) { [EOL]         return false; [EOL]     } [EOL]     if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) { [EOL]         return false; [EOL]     } [EOL]     if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) { [EOL]         return false; [EOL]     } [EOL]     if (this.subrange != that.subrange) { [EOL]         return false; [EOL]     } [EOL]     if (this.followDataInSubranges != that.followDataInSubranges) { [EOL]         return false; [EOL]     } [EOL]     if (!equal(this.subrangeInfo, that.subrangeInfo)) { [EOL]         return false; [EOL]     } [EOL]     if (this.useSubrangePaint != that.useSubrangePaint) { [EOL]         return false; [EOL]     } [EOL]     if (this.bulbRadius != that.bulbRadius) { [EOL]         return false; [EOL]     } [EOL]     if (this.columnRadius != that.columnRadius) { [EOL]         return false; [EOL]     } [EOL]     if (this.gap != that.gap) { [EOL]         return false; [EOL]     } [EOL]     for (int i = 0; i < this.subrangePaint.length; i++) { [EOL]         if (!PaintUtilities.equal(this.subrangePaint[i], that.subrangePaint[i])) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 1447,1527
private static boolean equal(double[][] array1, double[][] array2) { [EOL]     if (array1 == null) { [EOL]         return (array2 == null); [EOL]     } [EOL]     if (array2 == null) { [EOL]         return false; [EOL]     } [EOL]     if (array1.length != array2.length) { [EOL]         return false; [EOL]     } [EOL]     for (int i = 0; i < array1.length; i++) { [EOL]         if (!Arrays.equals(array1[i], array2[i])) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 1537,1553
public Object clone() throws CloneNotSupportedException { [EOL]     ThermometerPlot clone = (ThermometerPlot) super.clone(); [EOL]     if (clone.dataset != null) { [EOL]         clone.dataset.addChangeListener(clone); [EOL]     } [EOL]     clone.rangeAxis = (ValueAxis) ObjectUtilities.clone(this.rangeAxis); [EOL]     if (clone.rangeAxis != null) { [EOL]         clone.rangeAxis.setPlot(clone); [EOL]         clone.rangeAxis.addChangeListener(clone); [EOL]     } [EOL]     clone.valueFormat = (NumberFormat) this.valueFormat.clone(); [EOL]     clone.subrangePaint = (Paint[]) this.subrangePaint.clone(); [EOL]     return clone; [EOL] } <line_num>: 1562,1579
private void writeObject(ObjectOutputStream stream) throws IOException { [EOL]     stream.defaultWriteObject(); [EOL]     SerialUtilities.writeStroke(this.thermometerStroke, stream); [EOL]     SerialUtilities.writePaint(this.thermometerPaint, stream); [EOL]     SerialUtilities.writePaint(this.valuePaint, stream); [EOL]     SerialUtilities.writePaint(this.mercuryPaint, stream); [EOL]     SerialUtilities.writeStroke(this.subrangeIndicatorStroke, stream); [EOL]     SerialUtilities.writeStroke(this.rangeIndicatorStroke, stream); [EOL]     for (int i = 0; i < 3; i++) { [EOL]         SerialUtilities.writePaint(this.subrangePaint[i], stream); [EOL]     } [EOL] } <line_num>: 1588,1599
private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { [EOL]     stream.defaultReadObject(); [EOL]     this.thermometerStroke = SerialUtilities.readStroke(stream); [EOL]     this.thermometerPaint = SerialUtilities.readPaint(stream); [EOL]     this.valuePaint = SerialUtilities.readPaint(stream); [EOL]     this.mercuryPaint = SerialUtilities.readPaint(stream); [EOL]     this.subrangeIndicatorStroke = SerialUtilities.readStroke(stream); [EOL]     this.rangeIndicatorStroke = SerialUtilities.readStroke(stream); [EOL]     this.subrangePaint = new Paint[3]; [EOL]     for (int i = 0; i < 3; i++) { [EOL]         this.subrangePaint[i] = SerialUtilities.readPaint(stream); [EOL]     } [EOL]     if (this.rangeAxis != null) { [EOL]         this.rangeAxis.addChangeListener(this); [EOL]     } [EOL] } <line_num>: 1609,1625
public void zoomDomainAxes(double factor, PlotRenderingInfo state, Point2D source) { [EOL] } <line_num>: 1634,1637
public void zoomDomainAxes(double factor, PlotRenderingInfo state, Point2D source, boolean useAnchor) { [EOL] } <line_num>: 1650,1653
public void zoomRangeAxes(double factor, PlotRenderingInfo state, Point2D source) { [EOL]     this.rangeAxis.resizeRange(factor); [EOL] } <line_num>: 1662,1665
public void zoomRangeAxes(double factor, PlotRenderingInfo state, Point2D source, boolean useAnchor) { [EOL]     double anchorY = this.getRangeAxis().java2DToValue(source.getY(), state.getDataArea(), RectangleEdge.LEFT); [EOL]     this.rangeAxis.resizeRange(factor, anchorY); [EOL] } <line_num>: 1678,1683
public void zoomDomainAxes(double lowerPercent, double upperPercent, PlotRenderingInfo state, Point2D source) { [EOL] } <line_num>: 1693,1696
public void zoomRangeAxes(double lowerPercent, double upperPercent, PlotRenderingInfo state, Point2D source) { [EOL]     this.rangeAxis.zoomRange(lowerPercent, upperPercent); [EOL] } <line_num>: 1706,1709
public boolean isDomainZoomable() { [EOL]     return false; [EOL] } <line_num>: 1716,1718
public boolean isRangeZoomable() { [EOL]     return true; [EOL] } <line_num>: 1725,1727
