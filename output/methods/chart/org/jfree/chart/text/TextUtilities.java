private TextUtilities() { [EOL] } <line_num>: 101,102
public static TextBlock createTextBlock(String text, Font font, Paint paint) { [EOL]     if (text == null) { [EOL]         throw new IllegalArgumentException("Null 'text' argument."); [EOL]     } [EOL]     TextBlock result = new TextBlock(); [EOL]     String input = text; [EOL]     boolean moreInputToProcess = (text.length() > 0); [EOL]     int start = 0; [EOL]     while (moreInputToProcess) { [EOL]         int index = input.indexOf("\n"); [EOL]         if (index > start) { [EOL]             String line = input.substring(start, index); [EOL]             if (index < input.length() - 1) { [EOL]                 result.addLine(line, font, paint); [EOL]                 input = input.substring(index + 1); [EOL]             } else { [EOL]                 moreInputToProcess = false; [EOL]             } [EOL]         } else if (index == start) { [EOL]             if (index < input.length() - 1) { [EOL]                 input = input.substring(index + 1); [EOL]             } else { [EOL]                 moreInputToProcess = false; [EOL]             } [EOL]         } else { [EOL]             result.addLine(input, font, paint); [EOL]             moreInputToProcess = false; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 114,149
public static TextBlock createTextBlock(String text, Font font, Paint paint, float maxWidth, TextMeasurer measurer) { [EOL]     return createTextBlock(text, font, paint, maxWidth, Integer.MAX_VALUE, measurer); [EOL] } <line_num>: 164,169
public static TextBlock createTextBlock(String text, Font font, Paint paint, float maxWidth, int maxLines, TextMeasurer measurer) { [EOL]     TextBlock result = new TextBlock(); [EOL]     BreakIterator iterator = BreakIterator.getLineInstance(); [EOL]     iterator.setText(text); [EOL]     int current = 0; [EOL]     int lines = 0; [EOL]     int length = text.length(); [EOL]     while (current < length && lines < maxLines) { [EOL]         int next = nextLineBreak(text, current, maxWidth, iterator, measurer); [EOL]         if (next == BreakIterator.DONE) { [EOL]             result.addLine(text.substring(current), font, paint); [EOL]             return result; [EOL]         } [EOL]         result.addLine(text.substring(current, next), font, paint); [EOL]         lines++; [EOL]         current = next; [EOL]         while (current < text.length() && text.charAt(current) == '\n') { [EOL]             current++; [EOL]         } [EOL]     } [EOL]     if (current < length) { [EOL]         TextLine lastLine = result.getLastLine(); [EOL]         TextFragment lastFragment = lastLine.getLastTextFragment(); [EOL]         String oldStr = lastFragment.getText(); [EOL]         String newStr = "..."; [EOL]         if (oldStr.length() > 3) { [EOL]             newStr = oldStr.substring(0, oldStr.length() - 3) + "..."; [EOL]         } [EOL]         lastLine.removeFragment(lastFragment); [EOL]         TextFragment newFragment = new TextFragment(newStr, lastFragment.getFont(), lastFragment.getPaint()); [EOL]         lastLine.addFragment(newFragment); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 185,223
private static int nextLineBreak(String text, int start, float width, BreakIterator iterator, TextMeasurer measurer) { [EOL]     int current = start; [EOL]     int end; [EOL]     float x = 0.0f; [EOL]     boolean firstWord = true; [EOL]     int newline = text.indexOf('\n', start); [EOL]     if (newline < 0) { [EOL]         newline = Integer.MAX_VALUE; [EOL]     } [EOL]     while (((end = iterator.next()) != BreakIterator.DONE)) { [EOL]         x += measurer.getStringWidth(text, current, end); [EOL]         if (x > width) { [EOL]             if (firstWord) { [EOL]                 while (measurer.getStringWidth(text, start, end) > width) { [EOL]                     end--; [EOL]                     if (end <= start) { [EOL]                         return end; [EOL]                     } [EOL]                 } [EOL]                 return end; [EOL]             } else { [EOL]                 end = iterator.previous(); [EOL]                 return end; [EOL]             } [EOL]         } else { [EOL]             if (end > newline) { [EOL]                 return newline; [EOL]             } [EOL]         } [EOL]         firstWord = false; [EOL]         current = end; [EOL]     } [EOL]     return BreakIterator.DONE; [EOL] } <line_num>: 236,276
public static Rectangle2D getTextBounds(String text, Graphics2D g2, FontMetrics fm) { [EOL]     final Rectangle2D bounds; [EOL]     if (TextUtilities.useFontMetricsGetStringBounds) { [EOL]         bounds = fm.getStringBounds(text, g2); [EOL]         LineMetrics lm = fm.getFont().getLineMetrics(text, g2.getFontRenderContext()); [EOL]         bounds.setRect(bounds.getX(), bounds.getY(), bounds.getWidth(), lm.getHeight()); [EOL]     } else { [EOL]         double width = fm.stringWidth(text); [EOL]         double height = fm.getHeight(); [EOL]         bounds = new Rectangle2D.Double(0.0, -fm.getAscent(), width, height); [EOL]     } [EOL]     return bounds; [EOL] } <line_num>: 288,309
public static Rectangle2D drawAlignedString(String text, Graphics2D g2, float x, float y, TextAnchor anchor) { [EOL]     Rectangle2D textBounds = new Rectangle2D.Double(); [EOL]     float[] adjust = deriveTextBoundsAnchorOffsets(g2, text, anchor, textBounds); [EOL]     textBounds.setRect(x + adjust[0], y + adjust[1] + adjust[2], textBounds.getWidth(), textBounds.getHeight()); [EOL]     g2.drawString(text, x + adjust[0], y + adjust[1]); [EOL]     return textBounds; [EOL] } <line_num>: 323,334
private static float[] deriveTextBoundsAnchorOffsets(Graphics2D g2, String text, TextAnchor anchor, Rectangle2D textBounds) { [EOL]     float[] result = new float[3]; [EOL]     FontRenderContext frc = g2.getFontRenderContext(); [EOL]     Font f = g2.getFont(); [EOL]     FontMetrics fm = g2.getFontMetrics(f); [EOL]     Rectangle2D bounds = TextUtilities.getTextBounds(text, g2, fm); [EOL]     LineMetrics metrics = f.getLineMetrics(text, frc); [EOL]     float ascent = metrics.getAscent(); [EOL]     result[2] = -ascent; [EOL]     float halfAscent = ascent / 2.0f; [EOL]     float descent = metrics.getDescent(); [EOL]     float leading = metrics.getLeading(); [EOL]     float xAdj = 0.0f; [EOL]     float yAdj = 0.0f; [EOL]     if (anchor == TextAnchor.TOP_CENTER || anchor == TextAnchor.CENTER || anchor == TextAnchor.BOTTOM_CENTER || anchor == TextAnchor.BASELINE_CENTER || anchor == TextAnchor.HALF_ASCENT_CENTER) { [EOL]         xAdj = (float) -bounds.getWidth() / 2.0f; [EOL]     } else if (anchor == TextAnchor.TOP_RIGHT || anchor == TextAnchor.CENTER_RIGHT || anchor == TextAnchor.BOTTOM_RIGHT || anchor == TextAnchor.BASELINE_RIGHT || anchor == TextAnchor.HALF_ASCENT_RIGHT) { [EOL]         xAdj = (float) -bounds.getWidth(); [EOL]     } [EOL]     if (anchor == TextAnchor.TOP_LEFT || anchor == TextAnchor.TOP_CENTER || anchor == TextAnchor.TOP_RIGHT) { [EOL]         yAdj = -descent - leading + (float) bounds.getHeight(); [EOL]     } else if (anchor == TextAnchor.HALF_ASCENT_LEFT || anchor == TextAnchor.HALF_ASCENT_CENTER || anchor == TextAnchor.HALF_ASCENT_RIGHT) { [EOL]         yAdj = halfAscent; [EOL]     } else if (anchor == TextAnchor.CENTER_LEFT || anchor == TextAnchor.CENTER || anchor == TextAnchor.CENTER_RIGHT) { [EOL]         yAdj = -descent - leading + (float) (bounds.getHeight() / 2.0); [EOL]     } else if (anchor == TextAnchor.BASELINE_LEFT || anchor == TextAnchor.BASELINE_CENTER || anchor == TextAnchor.BASELINE_RIGHT) { [EOL]         yAdj = 0.0f; [EOL]     } else if (anchor == TextAnchor.BOTTOM_LEFT || anchor == TextAnchor.BOTTOM_CENTER || anchor == TextAnchor.BOTTOM_RIGHT) { [EOL]         yAdj = -metrics.getDescent() - metrics.getLeading(); [EOL]     } [EOL]     if (textBounds != null) { [EOL]         textBounds.setRect(bounds); [EOL]     } [EOL]     result[0] = xAdj; [EOL]     result[1] = yAdj; [EOL]     return result; [EOL] } <line_num>: 352,430
public static void setUseDrawRotatedStringWorkaround(boolean use) { [EOL]     useDrawRotatedStringWorkaround = use; [EOL] } <line_num>: 441,443
public static void drawRotatedString(String text, Graphics2D g2, double angle, float x, float y) { [EOL]     drawRotatedString(text, g2, x, y, angle, x, y); [EOL] } <line_num>: 457,460
public static void drawRotatedString(String text, Graphics2D g2, float textX, float textY, double angle, float rotateX, float rotateY) { [EOL]     if ((text == null) || (text.equals(""))) { [EOL]         return; [EOL]     } [EOL]     AffineTransform saved = g2.getTransform(); [EOL]     AffineTransform rotate = AffineTransform.getRotateInstance(angle, rotateX, rotateY); [EOL]     g2.transform(rotate); [EOL]     if (useDrawRotatedStringWorkaround) { [EOL]         TextLayout tl = new TextLayout(text, g2.getFont(), g2.getFontRenderContext()); [EOL]         tl.draw(g2, textX, textY); [EOL]     } else { [EOL]         AttributedString as = new AttributedString(text, g2.getFont().getAttributes()); [EOL]         g2.drawString(as.getIterator(), textX, textY); [EOL]     } [EOL]     g2.setTransform(saved); [EOL] } <line_num>: 476,504
public static void drawRotatedString(String text, Graphics2D g2, float x, float y, TextAnchor textAnchor, double angle, float rotationX, float rotationY) { [EOL]     if (text == null || text.equals("")) { [EOL]         return; [EOL]     } [EOL]     float[] textAdj = deriveTextBoundsAnchorOffsets(g2, text, textAnchor); [EOL]     drawRotatedString(text, g2, x + textAdj[0], y + textAdj[1], angle, rotationX, rotationY); [EOL] } <line_num>: 519,529
public static void drawRotatedString(String text, Graphics2D g2, float x, float y, TextAnchor textAnchor, double angle, TextAnchor rotationAnchor) { [EOL]     if (text == null || text.equals("")) { [EOL]         return; [EOL]     } [EOL]     float[] textAdj = deriveTextBoundsAnchorOffsets(g2, text, textAnchor); [EOL]     float[] rotateAdj = deriveRotationAnchorOffsets(g2, text, rotationAnchor); [EOL]     drawRotatedString(text, g2, x + textAdj[0], y + textAdj[1], angle, x + textAdj[0] + rotateAdj[0], y + textAdj[1] + rotateAdj[1]); [EOL] } <line_num>: 543,557
public static Shape calculateRotatedStringBounds(String text, Graphics2D g2, float x, float y, TextAnchor textAnchor, double angle, TextAnchor rotationAnchor) { [EOL]     if (text == null || text.equals("")) { [EOL]         return null; [EOL]     } [EOL]     float[] textAdj = deriveTextBoundsAnchorOffsets(g2, text, textAnchor); [EOL]     float[] rotateAdj = deriveRotationAnchorOffsets(g2, text, rotationAnchor); [EOL]     Shape result = calculateRotatedStringBounds(text, g2, x + textAdj[0], y + textAdj[1], angle, x + textAdj[0] + rotateAdj[0], y + textAdj[1] + rotateAdj[1]); [EOL]     return result; [EOL] } <line_num>: 573,589
private static float[] deriveTextBoundsAnchorOffsets(Graphics2D g2, String text, TextAnchor anchor) { [EOL]     float[] result = new float[2]; [EOL]     FontRenderContext frc = g2.getFontRenderContext(); [EOL]     Font f = g2.getFont(); [EOL]     FontMetrics fm = g2.getFontMetrics(f); [EOL]     Rectangle2D bounds = TextUtilities.getTextBounds(text, g2, fm); [EOL]     LineMetrics metrics = f.getLineMetrics(text, frc); [EOL]     float ascent = metrics.getAscent(); [EOL]     float halfAscent = ascent / 2.0f; [EOL]     float descent = metrics.getDescent(); [EOL]     float leading = metrics.getLeading(); [EOL]     float xAdj = 0.0f; [EOL]     float yAdj = 0.0f; [EOL]     if (anchor == TextAnchor.TOP_CENTER || anchor == TextAnchor.CENTER || anchor == TextAnchor.BOTTOM_CENTER || anchor == TextAnchor.BASELINE_CENTER || anchor == TextAnchor.HALF_ASCENT_CENTER) { [EOL]         xAdj = (float) -bounds.getWidth() / 2.0f; [EOL]     } else if (anchor == TextAnchor.TOP_RIGHT || anchor == TextAnchor.CENTER_RIGHT || anchor == TextAnchor.BOTTOM_RIGHT || anchor == TextAnchor.BASELINE_RIGHT || anchor == TextAnchor.HALF_ASCENT_RIGHT) { [EOL]         xAdj = (float) -bounds.getWidth(); [EOL]     } [EOL]     if (anchor == TextAnchor.TOP_LEFT || anchor == TextAnchor.TOP_CENTER || anchor == TextAnchor.TOP_RIGHT) { [EOL]         yAdj = -descent - leading + (float) bounds.getHeight(); [EOL]     } else if (anchor == TextAnchor.HALF_ASCENT_LEFT || anchor == TextAnchor.HALF_ASCENT_CENTER || anchor == TextAnchor.HALF_ASCENT_RIGHT) { [EOL]         yAdj = halfAscent; [EOL]     } else if (anchor == TextAnchor.CENTER_LEFT || anchor == TextAnchor.CENTER || anchor == TextAnchor.CENTER_RIGHT) { [EOL]         yAdj = -descent - leading + (float) (bounds.getHeight() / 2.0); [EOL]     } else if (anchor == TextAnchor.BASELINE_LEFT || anchor == TextAnchor.BASELINE_CENTER || anchor == TextAnchor.BASELINE_RIGHT) { [EOL]         yAdj = 0.0f; [EOL]     } else if (anchor == TextAnchor.BOTTOM_LEFT || anchor == TextAnchor.BOTTOM_CENTER || anchor == TextAnchor.BOTTOM_RIGHT) { [EOL]         yAdj = -metrics.getDescent() - metrics.getLeading(); [EOL]     } [EOL]     result[0] = xAdj; [EOL]     result[1] = yAdj; [EOL]     return result; [EOL] } <line_num>: 604,678
private static float[] deriveRotationAnchorOffsets(Graphics2D g2, String text, TextAnchor anchor) { [EOL]     float[] result = new float[2]; [EOL]     FontRenderContext frc = g2.getFontRenderContext(); [EOL]     LineMetrics metrics = g2.getFont().getLineMetrics(text, frc); [EOL]     FontMetrics fm = g2.getFontMetrics(); [EOL]     Rectangle2D bounds = TextUtilities.getTextBounds(text, g2, fm); [EOL]     float ascent = metrics.getAscent(); [EOL]     float halfAscent = ascent / 2.0f; [EOL]     float descent = metrics.getDescent(); [EOL]     float leading = metrics.getLeading(); [EOL]     float xAdj = 0.0f; [EOL]     float yAdj = 0.0f; [EOL]     if (anchor == TextAnchor.TOP_LEFT || anchor == TextAnchor.CENTER_LEFT || anchor == TextAnchor.BOTTOM_LEFT || anchor == TextAnchor.BASELINE_LEFT || anchor == TextAnchor.HALF_ASCENT_LEFT) { [EOL]         xAdj = 0.0f; [EOL]     } else if (anchor == TextAnchor.TOP_CENTER || anchor == TextAnchor.CENTER || anchor == TextAnchor.BOTTOM_CENTER || anchor == TextAnchor.BASELINE_CENTER || anchor == TextAnchor.HALF_ASCENT_CENTER) { [EOL]         xAdj = (float) bounds.getWidth() / 2.0f; [EOL]     } else if (anchor == TextAnchor.TOP_RIGHT || anchor == TextAnchor.CENTER_RIGHT || anchor == TextAnchor.BOTTOM_RIGHT || anchor == TextAnchor.BASELINE_RIGHT || anchor == TextAnchor.HALF_ASCENT_RIGHT) { [EOL]         xAdj = (float) bounds.getWidth(); [EOL]     } [EOL]     if (anchor == TextAnchor.TOP_LEFT || anchor == TextAnchor.TOP_CENTER || anchor == TextAnchor.TOP_RIGHT) { [EOL]         yAdj = descent + leading - (float) bounds.getHeight(); [EOL]     } else if (anchor == TextAnchor.CENTER_LEFT || anchor == TextAnchor.CENTER || anchor == TextAnchor.CENTER_RIGHT) { [EOL]         yAdj = descent + leading - (float) (bounds.getHeight() / 2.0); [EOL]     } else if (anchor == TextAnchor.HALF_ASCENT_LEFT || anchor == TextAnchor.HALF_ASCENT_CENTER || anchor == TextAnchor.HALF_ASCENT_RIGHT) { [EOL]         yAdj = -halfAscent; [EOL]     } else if (anchor == TextAnchor.BASELINE_LEFT || anchor == TextAnchor.BASELINE_CENTER || anchor == TextAnchor.BASELINE_RIGHT) { [EOL]         yAdj = 0.0f; [EOL]     } else if (anchor == TextAnchor.BOTTOM_LEFT || anchor == TextAnchor.BOTTOM_CENTER || anchor == TextAnchor.BOTTOM_RIGHT) { [EOL]         yAdj = metrics.getDescent() + metrics.getLeading(); [EOL]     } [EOL]     result[0] = xAdj; [EOL]     result[1] = yAdj; [EOL]     return result; [EOL] } <line_num>: 691,773
public static Shape calculateRotatedStringBounds(String text, Graphics2D g2, float textX, float textY, double angle, float rotateX, float rotateY) { [EOL]     if ((text == null) || (text.equals(""))) { [EOL]         return null; [EOL]     } [EOL]     FontMetrics fm = g2.getFontMetrics(); [EOL]     Rectangle2D bounds = TextUtilities.getTextBounds(text, g2, fm); [EOL]     AffineTransform translate = AffineTransform.getTranslateInstance(textX, textY); [EOL]     Shape translatedBounds = translate.createTransformedShape(bounds); [EOL]     AffineTransform rotate = AffineTransform.getRotateInstance(angle, rotateX, rotateY); [EOL]     Shape result = rotate.createTransformedShape(translatedBounds); [EOL]     return result; [EOL] } <line_num>: 790,807
public static boolean getUseFontMetricsGetStringBounds() { [EOL]     return useFontMetricsGetStringBounds; [EOL] } <line_num>: 816,818
public static void setUseFontMetricsGetStringBounds(final boolean use) { [EOL]     useFontMetricsGetStringBounds = use; [EOL] } <line_num>: 827,829
public static boolean isUseDrawRotatedStringWorkaround() { [EOL]     return useDrawRotatedStringWorkaround; [EOL] } <line_num>: 837,839
