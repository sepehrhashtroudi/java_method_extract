public TextBlock() { [EOL]     this.lines = new java.util.ArrayList(); [EOL]     this.lineAlignment = HorizontalAlignment.CENTER; [EOL] } <line_num>: 85,88
public HorizontalAlignment getLineAlignment() { [EOL]     return this.lineAlignment; [EOL] } <line_num>: 95,97
public void setLineAlignment(HorizontalAlignment alignment) { [EOL]     if (alignment == null) { [EOL]         throw new IllegalArgumentException("Null 'alignment' argument."); [EOL]     } [EOL]     this.lineAlignment = alignment; [EOL] } <line_num>: 104,109
public void addLine(String text, Font font, Paint paint) { [EOL]     addLine(new TextLine(text, font, paint)); [EOL] } <line_num>: 118,120
public void addLine(TextLine line) { [EOL]     this.lines.add(line); [EOL] } <line_num>: 127,129
public TextLine getLastLine() { [EOL]     TextLine last = null; [EOL]     final int index = this.lines.size() - 1; [EOL]     if (index >= 0) { [EOL]         last = (TextLine) this.lines.get(index); [EOL]     } [EOL]     return last; [EOL] } <line_num>: 136,143
public List getLines() { [EOL]     return Collections.unmodifiableList(this.lines); [EOL] } <line_num>: 150,152
public Size2D calculateDimensions(Graphics2D g2) { [EOL]     double width = 0.0; [EOL]     double height = 0.0; [EOL]     Iterator iterator = this.lines.iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         TextLine line = (TextLine) iterator.next(); [EOL]         Size2D dimension = line.calculateDimensions(g2); [EOL]         width = Math.max(width, dimension.getWidth()); [EOL]         height = height + dimension.getHeight(); [EOL]     } [EOL]     return new Size2D(width, height); [EOL] } <line_num>: 161,172
public Shape calculateBounds(Graphics2D g2, float anchorX, float anchorY, TextBlockAnchor anchor, float rotateX, float rotateY, double angle) { [EOL]     Size2D d = calculateDimensions(g2); [EOL]     float[] offsets = calculateOffsets(anchor, d.getWidth(), d.getHeight()); [EOL]     Rectangle2D bounds = new Rectangle2D.Double(anchorX + offsets[0], anchorY + offsets[1], d.getWidth(), d.getHeight()); [EOL]     Shape rotatedBounds = ShapeUtilities.rotateShape(bounds, angle, rotateX, rotateY); [EOL]     return rotatedBounds; [EOL] } <line_num>: 187,199
public void draw(Graphics2D g2, float x, float y, TextBlockAnchor anchor) { [EOL]     draw(g2, x, y, anchor, 0.0f, 0.0f, 0.0); [EOL] } <line_num>: 209,211
public void draw(Graphics2D g2, float anchorX, float anchorY, TextBlockAnchor anchor, float rotateX, float rotateY, double angle) { [EOL]     Size2D d = calculateDimensions(g2); [EOL]     float[] offsets = calculateOffsets(anchor, d.getWidth(), d.getHeight()); [EOL]     Iterator iterator = this.lines.iterator(); [EOL]     float yCursor = 0.0f; [EOL]     while (iterator.hasNext()) { [EOL]         TextLine line = (TextLine) iterator.next(); [EOL]         Size2D dimension = line.calculateDimensions(g2); [EOL]         float lineOffset = 0.0f; [EOL]         if (this.lineAlignment == HorizontalAlignment.CENTER) { [EOL]             lineOffset = (float) (d.getWidth() - dimension.getWidth()) / 2.0f; [EOL]         } else if (this.lineAlignment == HorizontalAlignment.RIGHT) { [EOL]             lineOffset = (float) (d.getWidth() - dimension.getWidth()); [EOL]         } [EOL]         line.draw(g2, anchorX + offsets[0] + lineOffset, anchorY + offsets[1] + yCursor, TextAnchor.TOP_LEFT, rotateX, rotateY, angle); [EOL]         yCursor = yCursor + (float) dimension.getHeight(); [EOL]     } [EOL] } <line_num>: 226,251
private float[] calculateOffsets(TextBlockAnchor anchor, double width, double height) { [EOL]     float[] result = new float[2]; [EOL]     float xAdj = 0.0f; [EOL]     float yAdj = 0.0f; [EOL]     if (anchor == TextBlockAnchor.TOP_CENTER || anchor == TextBlockAnchor.CENTER || anchor == TextBlockAnchor.BOTTOM_CENTER) { [EOL]         xAdj = (float) -width / 2.0f; [EOL]     } else if (anchor == TextBlockAnchor.TOP_RIGHT || anchor == TextBlockAnchor.CENTER_RIGHT || anchor == TextBlockAnchor.BOTTOM_RIGHT) { [EOL]         xAdj = (float) -width; [EOL]     } [EOL]     if (anchor == TextBlockAnchor.TOP_LEFT || anchor == TextBlockAnchor.TOP_CENTER || anchor == TextBlockAnchor.TOP_RIGHT) { [EOL]         yAdj = 0.0f; [EOL]     } else if (anchor == TextBlockAnchor.CENTER_LEFT || anchor == TextBlockAnchor.CENTER || anchor == TextBlockAnchor.CENTER_RIGHT) { [EOL]         yAdj = (float) -height / 2.0f; [EOL]     } else if (anchor == TextBlockAnchor.BOTTOM_LEFT || anchor == TextBlockAnchor.BOTTOM_CENTER || anchor == TextBlockAnchor.BOTTOM_RIGHT) { [EOL]         yAdj = (float) -height; [EOL]     } [EOL]     result[0] = xAdj; [EOL]     result[1] = yAdj; [EOL]     return result; [EOL] } <line_num>: 264,309
public boolean equals(Object obj) { [EOL]     if (obj == this) { [EOL]         return true; [EOL]     } [EOL]     if (obj instanceof TextBlock) { [EOL]         final TextBlock block = (TextBlock) obj; [EOL]         return this.lines.equals(block.lines); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 318,327
public int hashCode() { [EOL]     return (this.lines != null ? this.lines.hashCode() : 0); [EOL] } <line_num>: 334,336
