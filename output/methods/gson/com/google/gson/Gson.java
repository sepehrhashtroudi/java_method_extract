public Gson() { [EOL]     this(DEFAULT_EXCLUSION_STRATEGY, DEFAULT_EXCLUSION_STRATEGY, DEFAULT_NAMING_POLICY, new MappedObjectConstructor(DefaultTypeAdapters.getDefaultInstanceCreators()), false, DefaultTypeAdapters.getDefaultSerializers(), DefaultTypeAdapters.getDefaultDeserializers(), DEFAULT_JSON_NON_EXECUTABLE, true, false); [EOL] } <line_num>: 150,155
Gson(ExclusionStrategy serializationStrategy, ExclusionStrategy deserializationStrategy, FieldNamingStrategy2 fieldNamingPolicy, MappedObjectConstructor objectConstructor, boolean serializeNulls, ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers, ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers, boolean generateNonExecutableGson, boolean htmlSafe, boolean prettyPrinting) { [EOL]     this.serializationStrategy = serializationStrategy; [EOL]     this.deserializationStrategy = deserializationStrategy; [EOL]     this.fieldNamingPolicy = fieldNamingPolicy; [EOL]     this.objectConstructor = objectConstructor; [EOL]     this.serializeNulls = serializeNulls; [EOL]     this.serializers = serializers; [EOL]     this.deserializers = deserializers; [EOL]     this.generateNonExecutableJson = generateNonExecutableGson; [EOL]     this.htmlSafe = htmlSafe; [EOL]     this.prettyPrinting = prettyPrinting; [EOL] } <line_num>: 157,172
private ObjectNavigatorFactory createDefaultObjectNavigatorFactory(ExclusionStrategy strategy) { [EOL]     return new ObjectNavigatorFactory(strategy, fieldNamingPolicy); [EOL] } <line_num>: 174,176
private static ExclusionStrategy createExclusionStrategy(double version) { [EOL]     List<ExclusionStrategy> strategies = new LinkedList<ExclusionStrategy>(); [EOL]     strategies.add(DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY); [EOL]     strategies.add(DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY); [EOL]     strategies.add(DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY); [EOL]     if (version != VersionConstants.IGNORE_VERSIONS) { [EOL]         strategies.add(new VersionExclusionStrategy(version)); [EOL]     } [EOL]     return new DisjunctionExclusionStrategy(strategies); [EOL] } <line_num>: 178,187
public JsonElement toJsonTree(Object src) { [EOL]     if (src == null) { [EOL]         return JsonNull.createJsonNull(); [EOL]     } [EOL]     return toJsonTree(src, src.getClass()); [EOL] } <line_num>: 202,207
public JsonElement toJsonTree(Object src, Type typeOfSrc) { [EOL]     if (src == null) { [EOL]         return JsonNull.createJsonNull(); [EOL]     } [EOL]     JsonSerializationContextDefault context = new JsonSerializationContextDefault(createDefaultObjectNavigatorFactory(serializationStrategy), serializeNulls, serializers); [EOL]     return context.serialize(src, typeOfSrc, true); [EOL] } <line_num>: 225,232
public String toJson(Object src) { [EOL]     if (src == null) { [EOL]         return serializeNulls ? NULL_STRING : ""; [EOL]     } [EOL]     return toJson(src, src.getClass()); [EOL] } <line_num>: 247,252
public String toJson(Object src, Type typeOfSrc) { [EOL]     StringWriter writer = new StringWriter(); [EOL]     toJson(toJsonTree(src, typeOfSrc), writer); [EOL]     return writer.toString(); [EOL] } <line_num>: 269,273
public void toJson(Object src, Appendable writer) { [EOL]     try { [EOL]         if (src != null) { [EOL]             toJson(src, src.getClass(), writer); [EOL]         } else if (serializeNulls) { [EOL]             writeOutNullString(writer); [EOL]         } [EOL]     } catch (IOException ioe) { [EOL]         throw new RuntimeException(ioe); [EOL]     } [EOL] } <line_num>: 288,298
public void toJson(Object src, Type typeOfSrc, Appendable writer) { [EOL]     JsonElement jsonElement = toJsonTree(src, typeOfSrc); [EOL]     toJson(jsonElement, writer); [EOL] } <line_num>: 315,318
public void toJson(Object src, Type typeOfSrc, JsonWriter writer) { [EOL]     toJson(toJsonTree(src, typeOfSrc), writer); [EOL] } <line_num>: 324,326
public String toJson(JsonElement jsonElement) { [EOL]     StringWriter writer = new StringWriter(); [EOL]     toJson(jsonElement, writer); [EOL]     return writer.toString(); [EOL] } <line_num>: 335,339
public void toJson(JsonElement jsonElement, Appendable writer) { [EOL]     try { [EOL]         if (generateNonExecutableJson) { [EOL]             writer.append(JSON_NON_EXECUTABLE_PREFIX); [EOL]         } [EOL]         JsonWriter jsonWriter = new JsonWriter(Streams.writerForAppendable(writer)); [EOL]         if (prettyPrinting) { [EOL]             jsonWriter.setIndent("  "); [EOL]         } [EOL]         toJson(jsonElement, jsonWriter); [EOL]     } catch (IOException e) { [EOL]         throw new RuntimeException(e); [EOL]     } [EOL] } <line_num>: 348,361
public void toJson(JsonElement jsonElement, JsonWriter writer) { [EOL]     boolean oldLenient = writer.isLenient(); [EOL]     writer.setLenient(true); [EOL]     boolean oldHtmlSafe = writer.isHtmlSafe(); [EOL]     writer.setHtmlSafe(htmlSafe); [EOL]     try { [EOL]         Streams.write(jsonElement, serializeNulls, writer); [EOL]     } catch (IOException e) { [EOL]         throw new JsonIOException(e); [EOL]     } finally { [EOL]         writer.setLenient(oldLenient); [EOL]         writer.setHtmlSafe(oldHtmlSafe); [EOL]     } [EOL] } <line_num>: 366,379
@SuppressWarnings("unchecked") [EOL] public <T> T fromJson(String json, Class<T> classOfT) throws JsonParseException { [EOL]     Object object = fromJson(json, (Type) classOfT); [EOL]     return Primitives.wrap(classOfT).cast(object); [EOL] } <line_num>: 398,402
@SuppressWarnings("unchecked") [EOL] public <T> T fromJson(String json, Type typeOfT) throws JsonParseException { [EOL]     if (json == null) { [EOL]         return null; [EOL]     } [EOL]     StringReader reader = new StringReader(json); [EOL]     T target = (T) fromJson(reader, typeOfT); [EOL]     return target; [EOL] } <line_num>: 421,429
public <T> T fromJson(Reader json, Class<T> classOfT) throws JsonParseException { [EOL]     Object object = fromJson(new JsonReader(json), classOfT); [EOL]     return Primitives.wrap(classOfT).cast(object); [EOL] } <line_num>: 449,452
public <T> T fromJson(Reader json, Type typeOfT) throws JsonParseException { [EOL]     return this.<T>fromJson(new JsonReader(json), typeOfT); [EOL] } <line_num>: 472,474
@SuppressWarnings("unchecked") [EOL] public <T> T fromJson(JsonReader reader, Type typeOfT) throws JsonParseException { [EOL]     boolean oldLenient = reader.isLenient(); [EOL]     reader.setLenient(true); [EOL]     try { [EOL]         JsonElement root = Streams.parse(reader); [EOL]         return (T) fromJson(root, typeOfT); [EOL]     } finally { [EOL]         reader.setLenient(oldLenient); [EOL]     } [EOL] } <line_num>: 480,490
public <T> T fromJson(JsonElement json, Class<T> classOfT) throws JsonParseException { [EOL]     Object object = fromJson(json, (Type) classOfT); [EOL]     return Primitives.wrap(classOfT).cast(object); [EOL] } <line_num>: 508,511
@SuppressWarnings("unchecked") [EOL] public <T> T fromJson(JsonElement json, Type typeOfT) throws JsonParseException { [EOL]     if (json == null) { [EOL]         return null; [EOL]     } [EOL]     JsonDeserializationContext context = new JsonDeserializationContextDefault(createDefaultObjectNavigatorFactory(deserializationStrategy), deserializers, objectConstructor); [EOL]     T target = (T) context.deserialize(json, typeOfT); [EOL]     return target; [EOL] } <line_num>: 531,541
private void writeOutNullString(Appendable writer) throws IOException { [EOL]     writer.append(NULL_STRING); [EOL] } <line_num>: 548,550
@Override [EOL] public String toString() { [EOL]     StringBuilder sb = new StringBuilder("{").append("serializeNulls:").append(serializeNulls).append(",serializers:").append(serializers).append(",deserializers:").append(deserializers).append(",instanceCreators:").append(objectConstructor).append("}"); [EOL]     return sb.toString(); [EOL] } <line_num>: 552,565
