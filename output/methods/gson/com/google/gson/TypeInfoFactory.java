private TypeInfoFactory() { [EOL] } <line_num>: 34,36
public static TypeInfoArray getTypeInfoForArray(Type type) { [EOL]     Preconditions.checkArgument(TypeUtils.isArray(type)); [EOL]     return new TypeInfoArray(type); [EOL] } <line_num>: 38,41
public static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF) { [EOL]     Class<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF); [EOL]     Type type = f.getGenericType(); [EOL]     Type actualType = getActualType(type, typeDefiningF, classDefiningF); [EOL]     return new TypeInfo(actualType); [EOL] } <line_num>: 51,56
private static Type getActualType(Type typeToEvaluate, Type parentType, Class<?> rawParentClass) { [EOL]     if (typeToEvaluate instanceof Class<?>) { [EOL]         return typeToEvaluate; [EOL]     } else if (typeToEvaluate instanceof ParameterizedType) { [EOL]         ParameterizedType castedType = (ParameterizedType) typeToEvaluate; [EOL]         Type owner = castedType.getOwnerType(); [EOL]         Type[] actualTypeParameters = extractRealTypes(castedType.getActualTypeArguments(), parentType, rawParentClass); [EOL]         Type rawType = castedType.getRawType(); [EOL]         return new ParameterizedTypeImpl(rawType, actualTypeParameters, owner); [EOL]     } else if (typeToEvaluate instanceof GenericArrayType) { [EOL]         GenericArrayType castedType = (GenericArrayType) typeToEvaluate; [EOL]         Type componentType = castedType.getGenericComponentType(); [EOL]         Type actualType = getActualType(componentType, parentType, rawParentClass); [EOL]         if (componentType.equals(actualType)) { [EOL]             return castedType; [EOL]         } [EOL]         return actualType instanceof Class<?> ? TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType)) : new GenericArrayTypeImpl(actualType); [EOL]     } else if (typeToEvaluate instanceof TypeVariable<?>) { [EOL]         if (parentType instanceof ParameterizedType) { [EOL]             TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate; [EOL]             TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters(); [EOL]             ParameterizedType objParameterizedType = (ParameterizedType) parentType; [EOL]             int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable); [EOL]             Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments(); [EOL]             return actualTypeArguments[indexOfActualTypeArgument]; [EOL]         } else if (typeToEvaluate instanceof TypeVariable<?>) { [EOL]             Type theSearchedType = null; [EOL]             do { [EOL]                 theSearchedType = extractTypeForHierarchy(parentType, (TypeVariable<?>) typeToEvaluate); [EOL]             } while ((theSearchedType != null) && (theSearchedType instanceof TypeVariable<?>)); [EOL]             if (theSearchedType != null) { [EOL]                 return theSearchedType; [EOL]             } [EOL]         } [EOL]         throw new UnsupportedOperationException("Expecting parameterized type, got " + parentType + ".\n Are you missing the use of TypeToken idiom?\n See " + "http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener"); [EOL]     } else if (typeToEvaluate instanceof WildcardType) { [EOL]         WildcardType castedType = (WildcardType) typeToEvaluate; [EOL]         return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass); [EOL]     } else { [EOL]         throw new IllegalArgumentException("Type \'" + typeToEvaluate + "\' is not a Class, " + "ParameterizedType, GenericArrayType or TypeVariable. Can't extract type."); [EOL]     } [EOL] } <line_num>: 58,115
private static Type extractTypeForHierarchy(Type parentType, TypeVariable<?> typeToEvaluate) { [EOL]     Class<?> rawParentType = null; [EOL]     if (parentType instanceof Class<?>) { [EOL]         rawParentType = (Class<?>) parentType; [EOL]     } else if (parentType instanceof ParameterizedType) { [EOL]         ParameterizedType parentTypeAsPT = (ParameterizedType) parentType; [EOL]         rawParentType = (Class<?>) parentTypeAsPT.getRawType(); [EOL]     } else { [EOL]         return null; [EOL]     } [EOL]     Type superClass = rawParentType.getGenericSuperclass(); [EOL]     if (superClass instanceof ParameterizedType && ((ParameterizedType) superClass).getRawType() == typeToEvaluate.getGenericDeclaration()) { [EOL]         TypeVariable<?>[] classTypeVariables = ((Class<?>) ((ParameterizedType) superClass).getRawType()).getTypeParameters(); [EOL]         int indexOfActualTypeArgument = getIndex(classTypeVariables, typeToEvaluate); [EOL]         Type[] actualTypeArguments = null; [EOL]         if (parentType instanceof Class<?>) { [EOL]             actualTypeArguments = ((ParameterizedType) superClass).getActualTypeArguments(); [EOL]         } else if (parentType instanceof ParameterizedType) { [EOL]             actualTypeArguments = ((ParameterizedType) parentType).getActualTypeArguments(); [EOL]         } else { [EOL]             return null; [EOL]         } [EOL]         return actualTypeArguments[indexOfActualTypeArgument]; [EOL]     } [EOL]     Type searchedType = null; [EOL]     if (superClass != null) { [EOL]         searchedType = extractTypeForHierarchy(superClass, typeToEvaluate); [EOL]     } [EOL]     return searchedType; [EOL] } <line_num>: 117,153
private static Type[] extractRealTypes(Type[] actualTypeArguments, Type parentType, Class<?> rawParentClass) { [EOL]     Preconditions.checkNotNull(actualTypeArguments); [EOL]     Type[] retTypes = new Type[actualTypeArguments.length]; [EOL]     for (int i = 0; i < actualTypeArguments.length; ++i) { [EOL]         retTypes[i] = getActualType(actualTypeArguments[i], parentType, rawParentClass); [EOL]     } [EOL]     return retTypes; [EOL] } <line_num>: 155,164
private static int getIndex(TypeVariable<?>[] types, TypeVariable<?> type) { [EOL]     for (int i = 0; i < types.length; ++i) { [EOL]         if (type.equals(types[i])) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     throw new IllegalStateException("How can the type variable not be present in the class declaration!"); [EOL] } <line_num>: 166,174
