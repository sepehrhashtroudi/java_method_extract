@SuppressWarnings("unchecked") [EOL] protected TypeToken() { [EOL]     this.type = getSuperclassTypeParameter(getClass()); [EOL]     this.rawType = (Class<? super T>) getRawType(type); [EOL] } <line_num>: 63,67
@SuppressWarnings({ "unchecked" }) [EOL] private TypeToken(Type type) { [EOL]     this.rawType = (Class<? super T>) getRawType(nonNull(type, "type")); [EOL]     this.type = type; [EOL] } <line_num>: 72,76
public SimpleTypeToken(Type type) { [EOL]     super(type); [EOL] } <line_num>: 371,373
private static <T> T nonNull(T o, String message) { [EOL]     if (o == null) { [EOL]         throw new NullPointerException(message); [EOL]     } [EOL]     return o; [EOL] } <line_num>: 78,83
static Type getSuperclassTypeParameter(Class<?> subclass) { [EOL]     Type superclass = subclass.getGenericSuperclass(); [EOL]     if (superclass instanceof Class<?>) { [EOL]         throw new RuntimeException("Missing type parameter."); [EOL]     } [EOL]     return ((ParameterizedType) superclass).getActualTypeArguments()[0]; [EOL] } <line_num>: 88,94
static TypeToken<?> fromSuperclassTypeParameter(Class<?> subclass) { [EOL]     return new SimpleTypeToken<Object>(subclass); [EOL] } <line_num>: 99,101
private static Class<?> getRawType(Type type) { [EOL]     if (type instanceof Class<?>) { [EOL]         return (Class<?>) type; [EOL]     } else if (type instanceof ParameterizedType) { [EOL]         ParameterizedType parameterizedType = (ParameterizedType) type; [EOL]         Type rawType = parameterizedType.getRawType(); [EOL]         if (rawType instanceof Class<?>) { [EOL]             return (Class<?>) rawType; [EOL]         } [EOL]         throw buildUnexpectedTypeError(rawType, Class.class); [EOL]     } else if (type instanceof GenericArrayType) { [EOL]         GenericArrayType genericArrayType = (GenericArrayType) type; [EOL]         Object rawArrayType = Array.newInstance(getRawType(genericArrayType.getGenericComponentType()), 0); [EOL]         return rawArrayType.getClass(); [EOL]     } else { [EOL]         throw buildUnexpectedTypeError(type, ParameterizedType.class, GenericArrayType.class); [EOL]     } [EOL] } <line_num>: 103,131
public Class<? super T> getRawType() { [EOL]     return rawType; [EOL] } <line_num>: 136,138
public Type getType() { [EOL]     return type; [EOL] } <line_num>: 143,145
public boolean isAssignableFrom(Class<?> cls) { [EOL]     return isAssignableFrom((Type) cls); [EOL] } <line_num>: 150,152
public boolean isAssignableFrom(Type from) { [EOL]     if (from == null) { [EOL]         return false; [EOL]     } [EOL]     if (type.equals(from)) { [EOL]         return true; [EOL]     } [EOL]     if (type instanceof Class<?>) { [EOL]         return rawType.isAssignableFrom(getRawType(from)); [EOL]     } else if (type instanceof ParameterizedType) { [EOL]         return isAssignableFrom(from, (ParameterizedType) type, new HashMap<String, Type>()); [EOL]     } else if (type instanceof GenericArrayType) { [EOL]         return rawType.isAssignableFrom(getRawType(from)) && isAssignableFrom(from, (GenericArrayType) type); [EOL]     } else { [EOL]         throw buildUnexpectedTypeError(type, Class.class, ParameterizedType.class, GenericArrayType.class); [EOL]     } [EOL] } <line_num>: 157,178
public boolean isAssignableFrom(TypeToken<?> token) { [EOL]     return isAssignableFrom(token.getType()); [EOL] } <line_num>: 183,185
private static boolean isAssignableFrom(Type from, GenericArrayType to) { [EOL]     Type toGenericComponentType = to.getGenericComponentType(); [EOL]     if (toGenericComponentType instanceof ParameterizedType) { [EOL]         Type t = from; [EOL]         if (from instanceof GenericArrayType) { [EOL]             t = ((GenericArrayType) from).getGenericComponentType(); [EOL]         } else if (from instanceof Class<?>) { [EOL]             Class<?> classType = (Class<?>) from; [EOL]             while (classType.isArray()) { [EOL]                 classType = classType.getComponentType(); [EOL]             } [EOL]             t = classType; [EOL]         } [EOL]         return isAssignableFrom(t, (ParameterizedType) toGenericComponentType, new HashMap<String, Type>()); [EOL]     } [EOL]     return true; [EOL] } <line_num>: 191,210
private static boolean isAssignableFrom(Type from, ParameterizedType to, Map<String, Type> typeVarMap) { [EOL]     if (from == null) { [EOL]         return false; [EOL]     } [EOL]     if (to.equals(from)) { [EOL]         return true; [EOL]     } [EOL]     Class<?> clazz = getRawType(from); [EOL]     ParameterizedType ptype = null; [EOL]     if (from instanceof ParameterizedType) { [EOL]         ptype = (ParameterizedType) from; [EOL]     } [EOL]     if (ptype != null) { [EOL]         Type[] tArgs = ptype.getActualTypeArguments(); [EOL]         TypeVariable<?>[] tParams = clazz.getTypeParameters(); [EOL]         for (int i = 0; i < tArgs.length; i++) { [EOL]             Type arg = tArgs[i]; [EOL]             TypeVariable<?> var = tParams[i]; [EOL]             while (arg instanceof TypeVariable<?>) { [EOL]                 TypeVariable<?> v = (TypeVariable<?>) arg; [EOL]                 arg = typeVarMap.get(v.getName()); [EOL]             } [EOL]             typeVarMap.put(var.getName(), arg); [EOL]         } [EOL]         if (typeEquals(ptype, to, typeVarMap)) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     for (Type itype : clazz.getGenericInterfaces()) { [EOL]         if (isAssignableFrom(itype, to, new HashMap<String, Type>(typeVarMap))) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     Type sType = clazz.getGenericSuperclass(); [EOL]     if (isAssignableFrom(sType, to, new HashMap<String, Type>(typeVarMap))) { [EOL]         return true; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 216,267
private static boolean typeEquals(ParameterizedType from, ParameterizedType to, Map<String, Type> typeVarMap) { [EOL]     if (from.getRawType().equals(to.getRawType())) { [EOL]         Type[] fromArgs = from.getActualTypeArguments(); [EOL]         Type[] toArgs = to.getActualTypeArguments(); [EOL]         for (int i = 0; i < fromArgs.length; i++) { [EOL]             if (!matches(fromArgs[i], toArgs[i], typeVarMap)) { [EOL]                 return false; [EOL]             } [EOL]         } [EOL]         return true; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 273,286
private static boolean matches(Type from, Type to, Map<String, Type> typeMap) { [EOL]     if (to.equals(from)) [EOL]         return true; [EOL]     if (from instanceof TypeVariable<?>) { [EOL]         return to.equals(typeMap.get(((TypeVariable<?>) from).getName())); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 292,301
@Override [EOL] public int hashCode() { [EOL]     return type.hashCode(); [EOL] } <line_num>: 307,309
@Override [EOL] public boolean equals(Object o) { [EOL]     if (o == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(o instanceof TypeToken<?>)) { [EOL]         return false; [EOL]     } [EOL]     TypeToken<?> t = (TypeToken<?>) o; [EOL]     return type.equals(t.type); [EOL] } <line_num>: 316,325
@Override [EOL] public String toString() { [EOL]     return type instanceof Class<?> ? ((Class<?>) type).getName() : type.toString(); [EOL] } <line_num>: 331,335
private static AssertionError buildUnexpectedTypeError(Type token, Class<?>... expected) { [EOL]     StringBuilder exceptionMessage = new StringBuilder("Unexpected type. Expected one of: "); [EOL]     for (Class<?> clazz : expected) { [EOL]         exceptionMessage.append(clazz.getName()).append(", "); [EOL]     } [EOL]     exceptionMessage.append("but got: ").append(token.getClass().getName()).append(", for type token: ").append(token.toString()).append('.'); [EOL]     return new AssertionError(exceptionMessage.toString()); [EOL] } <line_num>: 337,350
public static TypeToken<?> get(Type type) { [EOL]     return new SimpleTypeToken<Object>(type); [EOL] } <line_num>: 355,357
public static <T> TypeToken<T> get(Class<T> type) { [EOL]     return new SimpleTypeToken<T>(type); [EOL] } <line_num>: 362,364
