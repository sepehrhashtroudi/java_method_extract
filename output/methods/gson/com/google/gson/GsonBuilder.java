public GsonBuilder() { [EOL]     exclusionStrategies.add(Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY); [EOL]     exclusionStrategies.add(Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY); [EOL]     ignoreVersionsAfter = VersionConstants.IGNORE_VERSIONS; [EOL]     serializeInnerClasses = true; [EOL]     prettyPrinting = false; [EOL]     escapeHtmlChars = true; [EOL]     modifierBasedExclusionStrategy = Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY; [EOL]     excludeFieldsWithoutExposeAnnotation = false; [EOL]     longSerializationPolicy = LongSerializationPolicy.DEFAULT; [EOL]     fieldNamingPolicy = Gson.DEFAULT_NAMING_POLICY; [EOL]     instanceCreators = new ParameterizedTypeHandlerMap<InstanceCreator<?>>(); [EOL]     serializers = new ParameterizedTypeHandlerMap<JsonSerializer<?>>(); [EOL]     deserializers = new ParameterizedTypeHandlerMap<JsonDeserializer<?>>(); [EOL]     serializeNulls = false; [EOL]     dateStyle = DateFormat.DEFAULT; [EOL]     timeStyle = DateFormat.DEFAULT; [EOL]     serializeSpecialFloatingPointValues = false; [EOL]     generateNonExecutableJson = false; [EOL] } <line_num>: 91,113
public GsonBuilder setVersion(double ignoreVersionsAfter) { [EOL]     this.ignoreVersionsAfter = ignoreVersionsAfter; [EOL]     return this; [EOL] } <line_num>: 122,125
public GsonBuilder excludeFieldsWithModifiers(int... modifiers) { [EOL]     modifierBasedExclusionStrategy = new ModifierBasedExclusionStrategy(modifiers); [EOL]     return this; [EOL] } <line_num>: 138,141
public GsonBuilder generateNonExecutableJson() { [EOL]     this.generateNonExecutableJson = true; [EOL]     return this; [EOL] } <line_num>: 152,155
public GsonBuilder excludeFieldsWithoutExposeAnnotation() { [EOL]     excludeFieldsWithoutExposeAnnotation = true; [EOL]     return this; [EOL] } <line_num>: 163,166
public GsonBuilder serializeNulls() { [EOL]     this.serializeNulls = true; [EOL]     return this; [EOL] } <line_num>: 175,178
public GsonBuilder disableInnerClassSerialization() { [EOL]     serializeInnerClasses = false; [EOL]     return this; [EOL] } <line_num>: 186,189
public GsonBuilder setLongSerializationPolicy(LongSerializationPolicy serializationPolicy) { [EOL]     this.longSerializationPolicy = serializationPolicy; [EOL]     return this; [EOL] } <line_num>: 199,202
public GsonBuilder setFieldNamingPolicy(FieldNamingPolicy namingConvention) { [EOL]     return setFieldNamingStrategy(namingConvention.getFieldNamingPolicy()); [EOL] } <line_num>: 212,214
public GsonBuilder setFieldNamingStrategy(FieldNamingStrategy fieldNamingStrategy) { [EOL]     return setFieldNamingStrategy(new FieldNamingStrategy2Adapter(fieldNamingStrategy)); [EOL] } <line_num>: 224,226
GsonBuilder setFieldNamingStrategy(FieldNamingStrategy2 fieldNamingStrategy) { [EOL]     this.fieldNamingPolicy = new SerializedNameAnnotationInterceptingNamingPolicy(fieldNamingStrategy); [EOL]     return this; [EOL] } <line_num>: 235,239
public GsonBuilder setExclusionStrategies(ExclusionStrategy... strategies) { [EOL]     for (ExclusionStrategy strategy : strategies) { [EOL]         exclusionStrategies.add(strategy); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 251,256
public GsonBuilder setPrettyPrinting() { [EOL]     prettyPrinting = true; [EOL]     return this; [EOL] } <line_num>: 264,267
public GsonBuilder disableHtmlEscaping() { [EOL]     this.escapeHtmlChars = false; [EOL]     return this; [EOL] } <line_num>: 276,279
public GsonBuilder setDateFormat(String pattern) { [EOL]     this.datePattern = pattern; [EOL]     return this; [EOL] } <line_num>: 294,298
public GsonBuilder setDateFormat(int style) { [EOL]     this.dateStyle = style; [EOL]     this.datePattern = null; [EOL]     return this; [EOL] } <line_num>: 314,318
public GsonBuilder setDateFormat(int dateStyle, int timeStyle) { [EOL]     this.dateStyle = dateStyle; [EOL]     this.timeStyle = timeStyle; [EOL]     this.datePattern = null; [EOL]     return this; [EOL] } <line_num>: 335,340
public GsonBuilder registerTypeAdapter(Type type, Object typeAdapter) { [EOL]     Preconditions.checkArgument(typeAdapter instanceof JsonSerializer<?> || typeAdapter instanceof JsonDeserializer<?> || typeAdapter instanceof InstanceCreator<?>); [EOL]     if (typeAdapter instanceof InstanceCreator<?>) { [EOL]         registerInstanceCreator(type, (InstanceCreator<?>) typeAdapter); [EOL]     } [EOL]     if (typeAdapter instanceof JsonSerializer<?>) { [EOL]         registerSerializer(type, (JsonSerializer<?>) typeAdapter); [EOL]     } [EOL]     if (typeAdapter instanceof JsonDeserializer<?>) { [EOL]         registerDeserializer(type, (JsonDeserializer<?>) typeAdapter); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 355,368
private <T> GsonBuilder registerInstanceCreator(Type typeOfT, InstanceCreator<? extends T> instanceCreator) { [EOL]     instanceCreators.register(typeOfT, instanceCreator); [EOL]     return this; [EOL] } <line_num>: 381,385
private <T> GsonBuilder registerSerializer(Type typeOfT, final JsonSerializer<T> serializer) { [EOL]     serializers.register(typeOfT, serializer); [EOL]     return this; [EOL] } <line_num>: 397,400
private <T> GsonBuilder registerDeserializer(Type typeOfT, JsonDeserializer<T> deserializer) { [EOL]     deserializers.register(typeOfT, new JsonDeserializerExceptionWrapper<T>(deserializer)); [EOL]     return this; [EOL] } <line_num>: 412,415
public GsonBuilder registerTypeHierarchyAdapter(Class<?> baseType, Object typeAdapter) { [EOL]     Preconditions.checkArgument(typeAdapter instanceof JsonSerializer<?> || typeAdapter instanceof JsonDeserializer<?> || typeAdapter instanceof InstanceCreator<?>); [EOL]     if (typeAdapter instanceof InstanceCreator<?>) { [EOL]         registerInstanceCreatorForTypeHierarchy(baseType, (InstanceCreator<?>) typeAdapter); [EOL]     } [EOL]     if (typeAdapter instanceof JsonSerializer<?>) { [EOL]         registerSerializerForTypeHierarchy(baseType, (JsonSerializer<?>) typeAdapter); [EOL]     } [EOL]     if (typeAdapter instanceof JsonDeserializer<?>) { [EOL]         registerDeserializerForTypeHierarchy(baseType, (JsonDeserializer<?>) typeAdapter); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 434,447
private <T> GsonBuilder registerInstanceCreatorForTypeHierarchy(Class<?> classOfT, InstanceCreator<? extends T> instanceCreator) { [EOL]     instanceCreators.registerForTypeHierarchy(classOfT, instanceCreator); [EOL]     return this; [EOL] } <line_num>: 449,453
private <T> GsonBuilder registerSerializerForTypeHierarchy(Class<?> classOfT, final JsonSerializer<T> serializer) { [EOL]     serializers.registerForTypeHierarchy(classOfT, serializer); [EOL]     return this; [EOL] } <line_num>: 455,459
private <T> GsonBuilder registerDeserializerForTypeHierarchy(Class<?> classOfT, JsonDeserializer<T> deserializer) { [EOL]     deserializers.registerForTypeHierarchy(classOfT, new JsonDeserializerExceptionWrapper<T>(deserializer)); [EOL]     return this; [EOL] } <line_num>: 461,466
public GsonBuilder serializeSpecialFloatingPointValues() { [EOL]     this.serializeSpecialFloatingPointValues = true; [EOL]     return this; [EOL] } <line_num>: 488,491
public Gson create() { [EOL]     List<ExclusionStrategy> serializationStrategies = new LinkedList<ExclusionStrategy>(exclusionStrategies); [EOL]     List<ExclusionStrategy> deserializationStrategies = new LinkedList<ExclusionStrategy>(exclusionStrategies); [EOL]     serializationStrategies.add(modifierBasedExclusionStrategy); [EOL]     deserializationStrategies.add(modifierBasedExclusionStrategy); [EOL]     if (!serializeInnerClasses) { [EOL]         serializationStrategies.add(innerClassExclusionStrategy); [EOL]         deserializationStrategies.add(innerClassExclusionStrategy); [EOL]     } [EOL]     if (ignoreVersionsAfter != VersionConstants.IGNORE_VERSIONS) { [EOL]         serializationStrategies.add(new VersionExclusionStrategy(ignoreVersionsAfter)); [EOL]         deserializationStrategies.add(new VersionExclusionStrategy(ignoreVersionsAfter)); [EOL]     } [EOL]     if (excludeFieldsWithoutExposeAnnotation) { [EOL]         serializationStrategies.add(exposeAnnotationSerializationExclusionStrategy); [EOL]         deserializationStrategies.add(exposeAnnotationDeserializationExclusionStrategy); [EOL]     } [EOL]     ExclusionStrategy serializationExclusionStrategy = new DisjunctionExclusionStrategy(serializationStrategies); [EOL]     ExclusionStrategy deserializationExclusionStrategy = new DisjunctionExclusionStrategy(deserializationStrategies); [EOL]     ParameterizedTypeHandlerMap<JsonSerializer<?>> customSerializers = serializers.copyOf(); [EOL]     ParameterizedTypeHandlerMap<JsonDeserializer<?>> customDeserializers = deserializers.copyOf(); [EOL]     addTypeAdaptersForDate(datePattern, dateStyle, timeStyle, customSerializers, customDeserializers); [EOL]     customSerializers.registerIfAbsent(DefaultTypeAdapters.getDefaultSerializers(serializeSpecialFloatingPointValues, longSerializationPolicy)); [EOL]     customDeserializers.registerIfAbsent(DefaultTypeAdapters.getDefaultDeserializers()); [EOL]     ParameterizedTypeHandlerMap<InstanceCreator<?>> customInstanceCreators = instanceCreators.copyOf(); [EOL]     customInstanceCreators.registerIfAbsent(DefaultTypeAdapters.getDefaultInstanceCreators()); [EOL]     customSerializers.makeUnmodifiable(); [EOL]     customDeserializers.makeUnmodifiable(); [EOL]     instanceCreators.makeUnmodifiable(); [EOL]     MappedObjectConstructor objConstructor = new MappedObjectConstructor(customInstanceCreators); [EOL]     Gson gson = new Gson(serializationExclusionStrategy, deserializationExclusionStrategy, fieldNamingPolicy, objConstructor, serializeNulls, customSerializers, customDeserializers, generateNonExecutableJson, escapeHtmlChars, prettyPrinting); [EOL]     return gson; [EOL] } <line_num>: 499,549
private static void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers, ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers) { [EOL]     DefaultDateTypeAdapter dateTypeAdapter = null; [EOL]     if (datePattern != null && !"".equals(datePattern.trim())) { [EOL]         dateTypeAdapter = new DefaultDateTypeAdapter(datePattern); [EOL]     } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) { [EOL]         dateTypeAdapter = new DefaultDateTypeAdapter(dateStyle, timeStyle); [EOL]     } [EOL]     if (dateTypeAdapter != null) { [EOL]         if (!serializers.hasSpecificHandlerFor(Date.class)) { [EOL]             serializers.register(Date.class, dateTypeAdapter); [EOL]         } [EOL]         if (!deserializers.hasSpecificHandlerFor(Date.class)) { [EOL]             deserializers.register(Date.class, dateTypeAdapter); [EOL]         } [EOL]     } [EOL] } <line_num>: 551,569
