JsonObjectDeserializationVisitor(JsonElement json, Type type, ObjectNavigatorFactory factory, ObjectConstructor objectConstructor, ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers, JsonDeserializationContext context) { [EOL]     super(json, type, factory, objectConstructor, deserializers, context); [EOL] } <line_num>: 30,35
@Override [EOL] @SuppressWarnings("unchecked") [EOL] protected T constructTarget() { [EOL]     return (T) objectConstructor.construct(targetType); [EOL] } <line_num>: 37,41
public void startVisitingObject(Object node) { [EOL] } <line_num>: 43,45
public void visitArray(Object array, Type componentType) { [EOL]     throw new JsonParseException("Expecting object but found array: " + array); [EOL] } <line_num>: 47,50
public void visitObjectField(FieldAttributes f, Type typeOfF, Object obj) { [EOL]     try { [EOL]         if (!json.isJsonObject()) { [EOL]             throw new JsonParseException("Expecting object found: " + json); [EOL]         } [EOL]         JsonObject jsonObject = json.getAsJsonObject(); [EOL]         String fName = getFieldName(f); [EOL]         JsonElement jsonChild = jsonObject.get(fName); [EOL]         if (jsonChild != null) { [EOL]             Object child = visitChildAsObject(typeOfF, jsonChild); [EOL]             f.set(obj, child); [EOL]         } else { [EOL]             f.set(obj, null); [EOL]         } [EOL]     } catch (IllegalAccessException e) { [EOL]         throw new RuntimeException(e); [EOL]     } [EOL] } <line_num>: 52,69
public void visitArrayField(FieldAttributes f, Type typeOfF, Object obj) { [EOL]     try { [EOL]         if (!json.isJsonObject()) { [EOL]             throw new JsonParseException("Expecting object found: " + json); [EOL]         } [EOL]         JsonObject jsonObject = json.getAsJsonObject(); [EOL]         String fName = getFieldName(f); [EOL]         JsonArray jsonChild = (JsonArray) jsonObject.get(fName); [EOL]         if (jsonChild != null) { [EOL]             Object array = visitChildAsArray(typeOfF, jsonChild); [EOL]             f.set(obj, array); [EOL]         } else { [EOL]             f.set(obj, null); [EOL]         } [EOL]     } catch (IllegalAccessException e) { [EOL]         throw new RuntimeException(e); [EOL]     } [EOL] } <line_num>: 71,88
private String getFieldName(FieldAttributes f) { [EOL]     FieldNamingStrategy2 namingPolicy = factory.getFieldNamingPolicy(); [EOL]     return namingPolicy.translateName(f); [EOL] } <line_num>: 90,93
public boolean visitFieldUsingCustomHandler(FieldAttributes f, Type declaredTypeOfField, Object parent) { [EOL]     try { [EOL]         String fName = getFieldName(f); [EOL]         if (!json.isJsonObject()) { [EOL]             throw new JsonParseException("Expecting object found: " + json); [EOL]         } [EOL]         JsonElement child = json.getAsJsonObject().get(fName); [EOL]         TypeInfo typeInfo = new TypeInfo(declaredTypeOfField); [EOL]         if (child == null) { [EOL]             return true; [EOL]         } else if (child.isJsonNull()) { [EOL]             if (!typeInfo.isPrimitive()) { [EOL]                 f.set(parent, null); [EOL]             } [EOL]             return true; [EOL]         } [EOL]         ObjectTypePair objTypePair = new ObjectTypePair(null, declaredTypeOfField, false); [EOL]         Pair<JsonDeserializer<?>, ObjectTypePair> pair = objTypePair.getMatchingHandler(deserializers); [EOL]         if (pair == null) { [EOL]             return false; [EOL]         } [EOL]         Object value = invokeCustomDeserializer(child, pair); [EOL]         if (value != null || !typeInfo.isPrimitive()) { [EOL]             f.set(parent, value); [EOL]         } [EOL]         return true; [EOL]     } catch (IllegalAccessException e) { [EOL]         throw new RuntimeException(); [EOL]     } [EOL] } <line_num>: 95,124
@SuppressWarnings("unchecked") [EOL] public void visitPrimitive(Object primitive) { [EOL]     if (!json.isJsonPrimitive()) { [EOL]         throw new JsonParseException("Type information is unavailable, and the target object is not a primitive: " + json); [EOL]     } [EOL]     JsonPrimitive prim = json.getAsJsonPrimitive(); [EOL]     target = (T) prim.getAsObject(); [EOL] } <line_num>: 126,134
