public JsonWriter(Writer out) { [EOL]     if (out == null) { [EOL]         throw new NullPointerException("out == null"); [EOL]     } [EOL]     this.out = out; [EOL] } <line_num>: 153,158
public void setIndent(String indent) { [EOL]     if (indent.length() == 0) { [EOL]         this.indent = null; [EOL]         this.separator = ":"; [EOL]     } else { [EOL]         this.indent = indent; [EOL]         this.separator = ": "; [EOL]     } [EOL] } <line_num>: 168,176
public void setLenient(boolean lenient) { [EOL]     this.lenient = lenient; [EOL] } <line_num>: 190,192
public boolean isLenient() { [EOL]     return lenient; [EOL] } <line_num>: 197,199
public void setHtmlSafe(boolean htmlSafe) { [EOL]     this.htmlSafe = htmlSafe; [EOL] } <line_num>: 208,210
public boolean isHtmlSafe() { [EOL]     return htmlSafe; [EOL] } <line_num>: 216,218
public JsonWriter beginArray() throws IOException { [EOL]     return open(JsonScope.EMPTY_ARRAY, "["); [EOL] } <line_num>: 226,228
public JsonWriter endArray() throws IOException { [EOL]     return close(JsonScope.EMPTY_ARRAY, JsonScope.NONEMPTY_ARRAY, "]"); [EOL] } <line_num>: 235,237
public JsonWriter beginObject() throws IOException { [EOL]     return open(JsonScope.EMPTY_OBJECT, "{"); [EOL] } <line_num>: 245,247
public JsonWriter endObject() throws IOException { [EOL]     return close(JsonScope.EMPTY_OBJECT, JsonScope.NONEMPTY_OBJECT, "}"); [EOL] } <line_num>: 254,256
private JsonWriter open(JsonScope empty, String openBracket) throws IOException { [EOL]     beforeValue(true); [EOL]     stack.add(empty); [EOL]     out.write(openBracket); [EOL]     return this; [EOL] } <line_num>: 262,267
private JsonWriter close(JsonScope empty, JsonScope nonempty, String closeBracket) throws IOException { [EOL]     JsonScope context = peek(); [EOL]     if (context != nonempty && context != empty) { [EOL]         throw new IllegalStateException("Nesting problem: " + stack); [EOL]     } [EOL]     stack.remove(stack.size() - 1); [EOL]     if (context == nonempty) { [EOL]         newline(); [EOL]     } [EOL]     out.write(closeBracket); [EOL]     return this; [EOL] } <line_num>: 273,286
private JsonScope peek() { [EOL]     return stack.get(stack.size() - 1); [EOL] } <line_num>: 291,293
private void replaceTop(JsonScope topOfStack) { [EOL]     stack.set(stack.size() - 1, topOfStack); [EOL] } <line_num>: 298,300
public JsonWriter name(String name) throws IOException { [EOL]     if (name == null) { [EOL]         throw new NullPointerException("name == null"); [EOL]     } [EOL]     beforeName(); [EOL]     string(name); [EOL]     return this; [EOL] } <line_num>: 308,315
public JsonWriter value(String value) throws IOException { [EOL]     if (value == null) { [EOL]         return nullValue(); [EOL]     } [EOL]     beforeValue(false); [EOL]     string(value); [EOL]     return this; [EOL] } <line_num>: 323,330
public JsonWriter nullValue() throws IOException { [EOL]     beforeValue(false); [EOL]     out.write("null"); [EOL]     return this; [EOL] } <line_num>: 337,341
public JsonWriter value(boolean value) throws IOException { [EOL]     beforeValue(false); [EOL]     out.write(value ? "true" : "false"); [EOL]     return this; [EOL] } <line_num>: 348,352
public JsonWriter value(double value) throws IOException { [EOL]     if (Double.isNaN(value) || Double.isInfinite(value)) { [EOL]         throw new IllegalArgumentException("Numeric values must be finite, but was " + value); [EOL]     } [EOL]     beforeValue(false); [EOL]     out.append(Double.toString(value)); [EOL]     return this; [EOL] } <line_num>: 361,368
public JsonWriter value(long value) throws IOException { [EOL]     beforeValue(false); [EOL]     out.write(Long.toString(value)); [EOL]     return this; [EOL] } <line_num>: 375,379
public JsonWriter value(Number value) throws IOException { [EOL]     if (value == null) { [EOL]         return nullValue(); [EOL]     } [EOL]     String string = value.toString(); [EOL]     if (!lenient && (string.equals("-Infinity") || string.equals("Infinity") || string.equals("NaN"))) { [EOL]         throw new IllegalArgumentException("Numeric values must be finite, but was " + value); [EOL]     } [EOL]     beforeValue(false); [EOL]     out.append(string); [EOL]     return this; [EOL] } <line_num>: 388,401
public void flush() throws IOException { [EOL]     out.flush(); [EOL] } <line_num>: 407,409
public void close() throws IOException { [EOL]     out.close(); [EOL]     if (peek() != JsonScope.NONEMPTY_DOCUMENT) { [EOL]         throw new IOException("Incomplete document"); [EOL]     } [EOL] } <line_num>: 416,422
private void string(String value) throws IOException { [EOL]     out.write("\""); [EOL]     for (int i = 0, length = value.length(); i < length; i++) { [EOL]         char c = value.charAt(i); [EOL]         switch(c) { [EOL]             case '"': [EOL]             case '\\': [EOL]                 out.write('\\'); [EOL]                 out.write(c); [EOL]                 break; [EOL]             case '\t': [EOL]                 out.write("\\t"); [EOL]                 break; [EOL]             case '\b': [EOL]                 out.write("\\b"); [EOL]                 break; [EOL]             case '\n': [EOL]                 out.write("\\n"); [EOL]                 break; [EOL]             case '\r': [EOL]                 out.write("\\r"); [EOL]                 break; [EOL]             case '\f': [EOL]                 out.write("\\f"); [EOL]                 break; [EOL]             case '<': [EOL]             case '>': [EOL]             case '&': [EOL]             case '=': [EOL]             case '\'': [EOL]                 if (htmlSafe) { [EOL]                     out.write(String.format("\\u%04x", (int) c)); [EOL]                 } else { [EOL]                     out.write(c); [EOL]                 } [EOL]                 break; [EOL]             default: [EOL]                 if (c <= 0x1F) { [EOL]                     out.write(String.format("\\u%04x", (int) c)); [EOL]                 } else { [EOL]                     out.write(c); [EOL]                 } [EOL]                 break; [EOL]         } [EOL]     } [EOL]     out.write("\""); [EOL] } <line_num>: 424,484
private void newline() throws IOException { [EOL]     if (indent == null) { [EOL]         return; [EOL]     } [EOL]     out.write("\n"); [EOL]     for (int i = 1; i < stack.size(); i++) { [EOL]         out.write(indent); [EOL]     } [EOL] } <line_num>: 486,495
private void beforeName() throws IOException { [EOL]     JsonScope context = peek(); [EOL]     if (context == JsonScope.NONEMPTY_OBJECT) { [EOL]         out.write(','); [EOL]     } else if (context != JsonScope.EMPTY_OBJECT) { [EOL]         throw new IllegalStateException("Nesting problem: " + stack); [EOL]     } [EOL]     newline(); [EOL]     replaceTop(JsonScope.DANGLING_NAME); [EOL] } <line_num>: 501,510
private void beforeValue(boolean root) throws IOException { [EOL]     switch(peek()) { [EOL]         case EMPTY_DOCUMENT: [EOL]             if (!lenient && !root) { [EOL]                 throw new IllegalStateException("JSON must start with an array or an object."); [EOL]             } [EOL]             replaceTop(JsonScope.NONEMPTY_DOCUMENT); [EOL]             break; [EOL]         case EMPTY_ARRAY: [EOL]             replaceTop(JsonScope.NONEMPTY_ARRAY); [EOL]             newline(); [EOL]             break; [EOL]         case NONEMPTY_ARRAY: [EOL]             out.append(','); [EOL]             newline(); [EOL]             break; [EOL]         case DANGLING_NAME: [EOL]             out.append(separator); [EOL]             replaceTop(JsonScope.NONEMPTY_OBJECT); [EOL]             break; [EOL]         case NONEMPTY_DOCUMENT: [EOL]             throw new IllegalStateException("JSON must have only one top-level value."); [EOL]         default: [EOL]             throw new IllegalStateException("Nesting problem: " + stack); [EOL]     } [EOL] } <line_num>: 520,552
