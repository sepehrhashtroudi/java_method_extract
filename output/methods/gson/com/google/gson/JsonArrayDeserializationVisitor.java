JsonArrayDeserializationVisitor(JsonArray jsonArray, Type arrayType, ObjectNavigatorFactory factory, ObjectConstructor objectConstructor, ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers, JsonDeserializationContext context) { [EOL]     super(jsonArray, arrayType, factory, objectConstructor, deserializers, context); [EOL] } <line_num>: 31,36
@Override [EOL] @SuppressWarnings("unchecked") [EOL] protected T constructTarget() { [EOL]     TypeInfo typeInfo = new TypeInfo(targetType); [EOL]     if (!json.isJsonArray()) { [EOL]         throw new JsonParseException("Expecting array found: " + json); [EOL]     } [EOL]     JsonArray jsonArray = json.getAsJsonArray(); [EOL]     if (typeInfo.isArray()) { [EOL]         TypeInfoArray arrayTypeInfo = TypeInfoFactory.getTypeInfoForArray(targetType); [EOL]         return (T) objectConstructor.constructArray(arrayTypeInfo.getSecondLevelType(), jsonArray.size()); [EOL]     } [EOL]     return (T) objectConstructor.construct(typeInfo.getRawClass()); [EOL] } <line_num>: 38,57
public void visitArray(Object array, Type arrayType) { [EOL]     if (!json.isJsonArray()) { [EOL]         throw new JsonParseException("Expecting array found: " + json); [EOL]     } [EOL]     JsonArray jsonArray = json.getAsJsonArray(); [EOL]     TypeInfoArray arrayTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType); [EOL]     for (int i = 0; i < jsonArray.size(); i++) { [EOL]         JsonElement jsonChild = jsonArray.get(i); [EOL]         Object child; [EOL]         if (jsonChild == null || jsonChild.isJsonNull()) { [EOL]             child = null; [EOL]         } else if (jsonChild instanceof JsonObject) { [EOL]             child = visitChildAsObject(arrayTypeInfo.getComponentRawType(), jsonChild); [EOL]         } else if (jsonChild instanceof JsonArray) { [EOL]             child = visitChildAsArray(arrayTypeInfo.getSecondLevelType(), jsonChild.getAsJsonArray()); [EOL]         } else if (jsonChild instanceof JsonPrimitive) { [EOL]             child = visitChildAsObject(arrayTypeInfo.getComponentRawType(), jsonChild.getAsJsonPrimitive()); [EOL]         } else { [EOL]             throw new IllegalStateException(); [EOL]         } [EOL]         Array.set(array, i, child); [EOL]     } [EOL] } <line_num>: 59,83
public void startVisitingObject(Object node) { [EOL]     throw new JsonParseException("Expecting array but found object: " + node); [EOL] } <line_num>: 89,91
public void visitArrayField(FieldAttributes f, Type typeOfF, Object obj) { [EOL]     throw new JsonParseException("Expecting array but found array field " + f.getName() + ": " + obj); [EOL] } <line_num>: 93,96
public void visitObjectField(FieldAttributes f, Type typeOfF, Object obj) { [EOL]     throw new JsonParseException("Expecting array but found object field " + f.getName() + ": " + obj); [EOL] } <line_num>: 98,101
public boolean visitFieldUsingCustomHandler(FieldAttributes f, Type actualTypeOfField, Object parent) { [EOL]     throw new JsonParseException("Expecting array but found field " + f.getName() + ": " + parent); [EOL] } <line_num>: 103,106
public void visitPrimitive(Object primitive) { [EOL]     throw new JsonParseException("Type information is unavailable, and the target is not a primitive: " + json); [EOL] } <line_num>: 108,111
