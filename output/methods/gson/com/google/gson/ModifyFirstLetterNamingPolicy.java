public ModifyFirstLetterNamingPolicy(LetterModifier modifier) { [EOL]     Preconditions.checkNotNull(modifier); [EOL]     this.letterModifier = modifier; [EOL] } <line_num>: 65,68
@Override [EOL] protected String translateName(String target, Type fieldType, Collection<Annotation> annotations) { [EOL]     StringBuilder fieldNameBuilder = new StringBuilder(); [EOL]     int index = 0; [EOL]     char firstCharacter = target.charAt(index); [EOL]     while (index < target.length() - 1) { [EOL]         if (Character.isLetter(firstCharacter)) { [EOL]             break; [EOL]         } [EOL]         fieldNameBuilder.append(firstCharacter); [EOL]         firstCharacter = target.charAt(++index); [EOL]     } [EOL]     if (index == target.length()) { [EOL]         return fieldNameBuilder.toString(); [EOL]     } [EOL]     boolean capitalizeFirstLetter = (letterModifier == LetterModifier.UPPER); [EOL]     if (capitalizeFirstLetter && !Character.isUpperCase(firstCharacter)) { [EOL]         String modifiedTarget = modifyString(Character.toUpperCase(firstCharacter), target, ++index); [EOL]         return fieldNameBuilder.append(modifiedTarget).toString(); [EOL]     } else if (!capitalizeFirstLetter && Character.isUpperCase(firstCharacter)) { [EOL]         String modifiedTarget = modifyString(Character.toLowerCase(firstCharacter), target, ++index); [EOL]         return fieldNameBuilder.append(modifiedTarget).toString(); [EOL]     } else { [EOL]         return target; [EOL]     } [EOL] } <line_num>: 70,100
private String modifyString(char firstCharacter, String srcString, int indexOfSubstring) { [EOL]     return indexOfSubstring < srcString.length() ? firstCharacter + srcString.substring(indexOfSubstring) : String.valueOf(firstCharacter); [EOL] } <line_num>: 102,106
