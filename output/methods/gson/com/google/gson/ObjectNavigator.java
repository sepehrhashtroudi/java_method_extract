ObjectNavigator(ObjectTypePair objTypePair, ExclusionStrategy exclusionStrategy) { [EOL]     Preconditions.checkNotNull(exclusionStrategy); [EOL]     this.objTypePair = objTypePair; [EOL]     this.exclusionStrategy = exclusionStrategy; [EOL] } <line_num>: 90,95
public void start(ObjectTypePair node); <line_num>: 33,33
public void end(ObjectTypePair node); <line_num>: 35,35
void startVisitingObject(Object node); <line_num>: 41,41
void visitArray(Object array, Type componentType); <line_num>: 46,46
void visitObjectField(FieldAttributes f, Type typeOfF, Object obj); <line_num>: 51,51
void visitArrayField(FieldAttributes f, Type typeOfF, Object obj); <line_num>: 56,56
public boolean visitUsingCustomHandler(ObjectTypePair objTypePair); <line_num>: 63,63
public boolean visitFieldUsingCustomHandler(FieldAttributes f, Type actualTypeOfField, Object parent); <line_num>: 69,70
Object getTarget(); <line_num>: 75,75
void visitPrimitive(Object primitive); <line_num>: 77,77
public void accept(Visitor visitor) { [EOL]     TypeInfo objTypeInfo = new TypeInfo(objTypePair.type); [EOL]     if (exclusionStrategy.shouldSkipClass(objTypeInfo.getRawClass())) { [EOL]         return; [EOL]     } [EOL]     boolean visitedWithCustomHandler = visitor.visitUsingCustomHandler(objTypePair); [EOL]     if (!visitedWithCustomHandler) { [EOL]         Object obj = objTypePair.getObject(); [EOL]         Object objectToVisit = (obj == null) ? visitor.getTarget() : obj; [EOL]         if (objectToVisit == null) { [EOL]             return; [EOL]         } [EOL]         objTypePair.setObject(objectToVisit); [EOL]         visitor.start(objTypePair); [EOL]         try { [EOL]             if (objTypeInfo.isArray()) { [EOL]                 visitor.visitArray(objectToVisit, objTypePair.type); [EOL]             } else if (objTypeInfo.getActualType() == Object.class && isPrimitiveOrString(objectToVisit)) { [EOL]                 visitor.visitPrimitive(objectToVisit); [EOL]                 objectToVisit = visitor.getTarget(); [EOL]             } else { [EOL]                 visitor.startVisitingObject(objectToVisit); [EOL]                 ObjectTypePair currObjTypePair = objTypePair.toMoreSpecificType(); [EOL]                 Class<?> topLevelClass = new TypeInfo(currObjTypePair.type).getRawClass(); [EOL]                 for (Class<?> curr = topLevelClass; curr != null && !curr.equals(Object.class); curr = curr.getSuperclass()) { [EOL]                     if (!curr.isSynthetic()) { [EOL]                         navigateClassFields(objectToVisit, curr, visitor); [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } finally { [EOL]             visitor.end(objTypePair); [EOL]         } [EOL]     } [EOL] } <line_num>: 101,139
private boolean isPrimitiveOrString(Object objectToVisit) { [EOL]     Class<?> realClazz = objectToVisit.getClass(); [EOL]     return realClazz == Object.class || realClazz == String.class || Primitives.unwrap(realClazz).isPrimitive(); [EOL] } <line_num>: 141,145
private void navigateClassFields(Object obj, Class<?> clazz, Visitor visitor) { [EOL]     Field[] fields = clazz.getDeclaredFields(); [EOL]     AccessibleObject.setAccessible(fields, true); [EOL]     for (Field f : fields) { [EOL]         FieldAttributes fieldAttributes = new FieldAttributes(clazz, f); [EOL]         if (exclusionStrategy.shouldSkipField(fieldAttributes) || exclusionStrategy.shouldSkipClass(fieldAttributes.getDeclaredClass())) { [EOL]             continue; [EOL]         } [EOL]         TypeInfo fieldTypeInfo = TypeInfoFactory.getTypeInfoForField(f, objTypePair.type); [EOL]         Type declaredTypeOfField = fieldTypeInfo.getActualType(); [EOL]         boolean visitedWithCustomHandler = visitor.visitFieldUsingCustomHandler(fieldAttributes, declaredTypeOfField, obj); [EOL]         if (!visitedWithCustomHandler) { [EOL]             if (fieldTypeInfo.isArray()) { [EOL]                 visitor.visitArrayField(fieldAttributes, declaredTypeOfField, obj); [EOL]             } else { [EOL]                 visitor.visitObjectField(fieldAttributes, declaredTypeOfField, obj); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 147,168
