public JsonPrimitive(Boolean bool) { [EOL]     setValue(bool); [EOL] } <line_num>: 46,48
public JsonPrimitive(Number number) { [EOL]     setValue(number); [EOL] } <line_num>: 55,57
public JsonPrimitive(String string) { [EOL]     setValue(string); [EOL] } <line_num>: 64,66
public JsonPrimitive(Character c) { [EOL]     setValue(c); [EOL] } <line_num>: 74,76
JsonPrimitive(Object primitive) { [EOL]     setValue(primitive); [EOL] } <line_num>: 84,86
void setValue(Object primitive) { [EOL]     if (primitive instanceof Character) { [EOL]         char c = ((Character) primitive).charValue(); [EOL]         this.value = String.valueOf(c); [EOL]     } else { [EOL]         Preconditions.checkArgument(primitive instanceof Number || isPrimitiveOrString(primitive)); [EOL]         this.value = primitive; [EOL]     } [EOL] } <line_num>: 88,99
public boolean isBoolean() { [EOL]     return value instanceof Boolean; [EOL] } <line_num>: 106,108
@Override [EOL] Boolean getAsBooleanWrapper() { [EOL]     return (Boolean) value; [EOL] } <line_num>: 116,119
@Override [EOL] public boolean getAsBoolean() { [EOL]     return isBoolean() ? getAsBooleanWrapper().booleanValue() : Boolean.parseBoolean(getAsString()); [EOL] } <line_num>: 127,130
public boolean isNumber() { [EOL]     return value instanceof Number; [EOL] } <line_num>: 137,139
@Override [EOL] public Number getAsNumber() { [EOL]     return value instanceof String ? stringToNumber((String) value) : (Number) value; [EOL] } <line_num>: 147,150
static Number stringToNumber(String value) { [EOL]     try { [EOL]         long longValue = Long.parseLong(value); [EOL]         if (longValue >= Integer.MIN_VALUE && longValue <= Integer.MAX_VALUE) { [EOL]             return (int) longValue; [EOL]         } [EOL]         return longValue; [EOL]     } catch (NumberFormatException ignored) { [EOL]     } [EOL]     try { [EOL]         return new BigDecimal(value); [EOL]     } catch (NumberFormatException ignored) { [EOL]         return Double.parseDouble(value); [EOL]     } [EOL] } <line_num>: 152,167
public boolean isString() { [EOL]     return value instanceof String; [EOL] } <line_num>: 174,176
@Override [EOL] public String getAsString() { [EOL]     if (isNumber()) { [EOL]         return getAsNumber().toString(); [EOL]     } else if (isBoolean()) { [EOL]         return getAsBooleanWrapper().toString(); [EOL]     } else { [EOL]         return (String) value; [EOL]     } [EOL] } <line_num>: 184,193
@Override [EOL] public double getAsDouble() { [EOL]     return isNumber() ? getAsNumber().doubleValue() : Double.parseDouble(getAsString()); [EOL] } <line_num>: 201,204
@Override [EOL] public BigDecimal getAsBigDecimal() { [EOL]     return value instanceof BigDecimal ? (BigDecimal) value : new BigDecimal(value.toString()); [EOL] } <line_num>: 212,215
@Override [EOL] public BigInteger getAsBigInteger() { [EOL]     return value instanceof BigInteger ? (BigInteger) value : new BigInteger(value.toString()); [EOL] } <line_num>: 223,226
@Override [EOL] public float getAsFloat() { [EOL]     return isNumber() ? getAsNumber().floatValue() : Float.parseFloat(getAsString()); [EOL] } <line_num>: 234,237
@Override [EOL] public long getAsLong() { [EOL]     return isNumber() ? getAsNumber().longValue() : Long.parseLong(getAsString()); [EOL] } <line_num>: 245,248
@Override [EOL] public short getAsShort() { [EOL]     return isNumber() ? getAsNumber().shortValue() : Short.parseShort(getAsString()); [EOL] } <line_num>: 256,259
@Override [EOL] public int getAsInt() { [EOL]     return isNumber() ? getAsNumber().intValue() : Integer.parseInt(getAsString()); [EOL] } <line_num>: 267,270
@Override [EOL] public byte getAsByte() { [EOL]     return isNumber() ? getAsNumber().byteValue() : Byte.parseByte(getAsString()); [EOL] } <line_num>: 272,275
@Override [EOL] public char getAsCharacter() { [EOL]     return getAsString().charAt(0); [EOL] } <line_num>: 277,280
@Override [EOL] Object getAsObject() { [EOL]     if (value instanceof BigInteger) { [EOL]         BigInteger big = (BigInteger) value; [EOL]         if (big.compareTo(INTEGER_MAX) < 0) { [EOL]             return big.intValue(); [EOL]         } else if (big.compareTo(LONG_MAX) < 0) { [EOL]             return big.longValue(); [EOL]         } [EOL]     } [EOL]     return value; [EOL] } <line_num>: 287,299
@Override [EOL] protected void toString(Appendable sb, Escaper escaper) throws IOException { [EOL]     if (isString()) { [EOL]         sb.append('"'); [EOL]         sb.append(escaper.escapeJsonString(value.toString())); [EOL]         sb.append('"'); [EOL]     } else { [EOL]         sb.append(value.toString()); [EOL]     } [EOL] } <line_num>: 301,310
private static boolean isPrimitiveOrString(Object target) { [EOL]     if (target instanceof String) { [EOL]         return true; [EOL]     } [EOL]     Class<?> classOfPrimitive = target.getClass(); [EOL]     for (Class<?> standardPrimitive : PRIMITIVE_TYPES) { [EOL]         if (standardPrimitive.isAssignableFrom(classOfPrimitive)) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 312,324
@Override [EOL] public int hashCode() { [EOL]     if (value == null) { [EOL]         return 31; [EOL]     } [EOL]     if (isIntegral(this)) { [EOL]         long value = getAsNumber().longValue(); [EOL]         return (int) (value ^ (value >>> 32)); [EOL]     } [EOL]     if (isFloatingPoint(this)) { [EOL]         long value = Double.doubleToLongBits(getAsNumber().doubleValue()); [EOL]         return (int) (value ^ (value >>> 32)); [EOL]     } [EOL]     return value.hashCode(); [EOL] } <line_num>: 326,341
@Override [EOL] public boolean equals(Object obj) { [EOL]     if (this == obj) { [EOL]         return true; [EOL]     } [EOL]     if (obj == null || getClass() != obj.getClass()) { [EOL]         return false; [EOL]     } [EOL]     JsonPrimitive other = (JsonPrimitive) obj; [EOL]     if (value == null) { [EOL]         return other.value == null; [EOL]     } [EOL]     if (isIntegral(this) && isIntegral(other)) { [EOL]         return getAsNumber().longValue() == other.getAsNumber().longValue(); [EOL]     } [EOL]     if (isFloatingPoint(this) && isFloatingPoint(other)) { [EOL]         return getAsNumber().doubleValue() == other.getAsNumber().doubleValue(); [EOL]     } [EOL]     return value.equals(other.value); [EOL] } <line_num>: 343,362
private static boolean isIntegral(JsonPrimitive primitive) { [EOL]     if (primitive.value instanceof Number) { [EOL]         Number number = (Number) primitive.value; [EOL]         return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 368,375
private static boolean isFloatingPoint(JsonPrimitive primitive) { [EOL]     if (primitive.value instanceof Number) { [EOL]         Number number = (Number) primitive.value; [EOL]         return number instanceof BigDecimal || number instanceof Double || number instanceof Float; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 380,386
