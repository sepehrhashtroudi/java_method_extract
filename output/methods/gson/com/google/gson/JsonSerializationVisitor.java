JsonSerializationVisitor(ObjectNavigatorFactory factory, boolean serializeNulls, ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers, JsonSerializationContext context, MemoryRefStack ancestors) { [EOL]     this.factory = factory; [EOL]     this.serializeNulls = serializeNulls; [EOL]     this.serializers = serializers; [EOL]     this.context = context; [EOL]     this.ancestors = ancestors; [EOL] } <line_num>: 37,45
public Object getTarget() { [EOL]     return null; [EOL] } <line_num>: 47,49
public void start(ObjectTypePair node) { [EOL]     if (node == null) { [EOL]         return; [EOL]     } [EOL]     if (ancestors.contains(node)) { [EOL]         throw new CircularReferenceException(node); [EOL]     } [EOL]     ancestors.push(node); [EOL] } <line_num>: 51,59
public void end(ObjectTypePair node) { [EOL]     if (node != null) { [EOL]         ancestors.pop(); [EOL]     } [EOL] } <line_num>: 61,65
public void startVisitingObject(Object node) { [EOL]     assignToRoot(new JsonObject()); [EOL] } <line_num>: 67,69
public void visitArray(Object array, Type arrayType) { [EOL]     assignToRoot(new JsonArray()); [EOL]     int length = Array.getLength(array); [EOL]     TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType); [EOL]     Type componentType = fieldTypeInfo.getSecondLevelType(); [EOL]     for (int i = 0; i < length; ++i) { [EOL]         Object child = Array.get(array, i); [EOL]         Type childType = componentType; [EOL]         addAsArrayElement(new ObjectTypePair(child, childType, false)); [EOL]     } [EOL] } <line_num>: 71,84
public void visitArrayField(FieldAttributes f, Type typeOfF, Object obj) { [EOL]     try { [EOL]         if (isFieldNull(f, obj)) { [EOL]             if (serializeNulls) { [EOL]                 addChildAsElement(f, JsonNull.createJsonNull()); [EOL]             } [EOL]         } else { [EOL]             Object array = getFieldValue(f, obj); [EOL]             addAsChildOfObject(f, new ObjectTypePair(array, typeOfF, false)); [EOL]         } [EOL]     } catch (CircularReferenceException e) { [EOL]         throw e.createDetailedException(f); [EOL]     } [EOL] } <line_num>: 86,99
public void visitObjectField(FieldAttributes f, Type typeOfF, Object obj) { [EOL]     try { [EOL]         if (isFieldNull(f, obj)) { [EOL]             if (serializeNulls) { [EOL]                 addChildAsElement(f, JsonNull.createJsonNull()); [EOL]             } [EOL]         } else { [EOL]             Object fieldValue = getFieldValue(f, obj); [EOL]             addAsChildOfObject(f, new ObjectTypePair(fieldValue, typeOfF, false)); [EOL]         } [EOL]     } catch (CircularReferenceException e) { [EOL]         throw e.createDetailedException(f); [EOL]     } [EOL] } <line_num>: 101,117
public void visitPrimitive(Object obj) { [EOL]     JsonElement json = obj == null ? JsonNull.createJsonNull() : new JsonPrimitive(obj); [EOL]     assignToRoot(json); [EOL] } <line_num>: 119,122
private void addAsChildOfObject(FieldAttributes f, ObjectTypePair fieldValuePair) { [EOL]     JsonElement childElement = getJsonElementForChild(fieldValuePair); [EOL]     addChildAsElement(f, childElement); [EOL] } <line_num>: 124,127
private void addChildAsElement(FieldAttributes f, JsonElement childElement) { [EOL]     FieldNamingStrategy2 namingPolicy = factory.getFieldNamingPolicy(); [EOL]     root.getAsJsonObject().add(namingPolicy.translateName(f), childElement); [EOL] } <line_num>: 129,132
private void addAsArrayElement(ObjectTypePair elementTypePair) { [EOL]     if (elementTypePair.getObject() == null) { [EOL]         root.getAsJsonArray().add(JsonNull.createJsonNull()); [EOL]     } else { [EOL]         JsonElement childElement = getJsonElementForChild(elementTypePair); [EOL]         root.getAsJsonArray().add(childElement); [EOL]     } [EOL] } <line_num>: 134,141
private JsonElement getJsonElementForChild(ObjectTypePair fieldValueTypePair) { [EOL]     ObjectNavigator on = factory.create(fieldValueTypePair); [EOL]     JsonSerializationVisitor childVisitor = new JsonSerializationVisitor(factory, serializeNulls, serializers, context, ancestors); [EOL]     on.accept(childVisitor); [EOL]     return childVisitor.getJsonElement(); [EOL] } <line_num>: 143,149
public boolean visitUsingCustomHandler(ObjectTypePair objTypePair) { [EOL]     try { [EOL]         Object obj = objTypePair.getObject(); [EOL]         if (obj == null) { [EOL]             if (serializeNulls) { [EOL]                 assignToRoot(JsonNull.createJsonNull()); [EOL]             } [EOL]             return true; [EOL]         } [EOL]         JsonElement element = findAndInvokeCustomSerializer(objTypePair); [EOL]         if (element != null) { [EOL]             assignToRoot(element); [EOL]             return true; [EOL]         } [EOL]         return false; [EOL]     } catch (CircularReferenceException e) { [EOL]         throw e.createDetailedException(null); [EOL]     } [EOL] } <line_num>: 151,169
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] private JsonElement findAndInvokeCustomSerializer(ObjectTypePair objTypePair) { [EOL]     Pair<JsonSerializer<?>, ObjectTypePair> pair = objTypePair.getMatchingHandler(serializers); [EOL]     if (pair == null) { [EOL]         return null; [EOL]     } [EOL]     JsonSerializer serializer = pair.first; [EOL]     objTypePair = pair.second; [EOL]     start(objTypePair); [EOL]     try { [EOL]         JsonElement element = serializer.serialize(objTypePair.getObject(), objTypePair.getType(), context); [EOL]         return element == null ? JsonNull.createJsonNull() : element; [EOL]     } finally { [EOL]         end(objTypePair); [EOL]     } [EOL] } <line_num>: 174,190
public boolean visitFieldUsingCustomHandler(FieldAttributes f, Type declaredTypeOfField, Object parent) { [EOL]     try { [EOL]         Preconditions.checkState(root.isJsonObject()); [EOL]         Object obj = f.get(parent); [EOL]         if (obj == null) { [EOL]             if (serializeNulls) { [EOL]                 addChildAsElement(f, JsonNull.createJsonNull()); [EOL]             } [EOL]             return true; [EOL]         } [EOL]         ObjectTypePair objTypePair = new ObjectTypePair(obj, declaredTypeOfField, false); [EOL]         JsonElement child = findAndInvokeCustomSerializer(objTypePair); [EOL]         if (child != null) { [EOL]             addChildAsElement(f, child); [EOL]             return true; [EOL]         } [EOL]         return false; [EOL]     } catch (IllegalAccessException e) { [EOL]         throw new RuntimeException(); [EOL]     } catch (CircularReferenceException e) { [EOL]         throw e.createDetailedException(f); [EOL]     } [EOL] } <line_num>: 192,214
private void assignToRoot(JsonElement newRoot) { [EOL]     Preconditions.checkNotNull(newRoot); [EOL]     root = newRoot; [EOL] } <line_num>: 216,219
private boolean isFieldNull(FieldAttributes f, Object obj) { [EOL]     return getFieldValue(f, obj) == null; [EOL] } <line_num>: 221,223
private Object getFieldValue(FieldAttributes f, Object obj) { [EOL]     try { [EOL]         return f.get(obj); [EOL]     } catch (IllegalAccessException e) { [EOL]         throw new RuntimeException(e); [EOL]     } [EOL] } <line_num>: 225,231
public JsonElement getJsonElement() { [EOL]     return root; [EOL] } <line_num>: 233,235
