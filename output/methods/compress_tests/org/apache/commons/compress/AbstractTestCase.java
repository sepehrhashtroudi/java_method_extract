protected void setUp() throws Exception { [EOL]     dir = File.createTempFile("dir", ""); [EOL]     dir.delete(); [EOL]     dir.mkdir(); [EOL] } <line_num>: 43,47
protected File getFile(String path) { [EOL]     return new File("src/test/resources", path); [EOL] } <line_num>: 49,51
protected void tearDown() throws Exception { [EOL]     dir.delete(); [EOL]     dir = null; [EOL] } <line_num>: 53,56
protected File createArchive(String archivename) throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     try { [EOL]         File temp = File.createTempFile("test", "." + archivename); [EOL]         final OutputStream stream = new FileOutputStream(temp); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(archivename, stream); [EOL]         final File file1 = getFile("test1.xml"); [EOL]         final File file2 = getFile("test2.xml"); [EOL]         final File file3 = getFile("test3.xml"); [EOL]         final File file4 = getFile("test4.xml"); [EOL]         final File file5 = getFile("test.txt"); [EOL]         final File file6 = getFile("test with spaces.txt"); [EOL]         ZipArchiveEntry entry = new ZipArchiveEntry("testdata/test1.xml"); [EOL]         entry.setSize(file1.length()); [EOL]         out.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), out); [EOL]         out.closeArchiveEntry(); [EOL]         entry = new ZipArchiveEntry("testdata/test2.xml"); [EOL]         entry.setSize(file2.length()); [EOL]         out.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file2), out); [EOL]         out.closeArchiveEntry(); [EOL]         entry = new ZipArchiveEntry("test/test3.xml"); [EOL]         entry.setSize(file3.length()); [EOL]         out.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file3), out); [EOL]         out.closeArchiveEntry(); [EOL]         entry = new ZipArchiveEntry("bla/test4.xml"); [EOL]         entry.setSize(file4.length()); [EOL]         out.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file4), out); [EOL]         out.closeArchiveEntry(); [EOL]         entry = new ZipArchiveEntry("bla/test5.xml"); [EOL]         entry.setSize(file4.length()); [EOL]         out.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file4), out); [EOL]         out.closeArchiveEntry(); [EOL]         entry = new ZipArchiveEntry("bla/blubber/test6.xml"); [EOL]         entry.setSize(file4.length()); [EOL]         out.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file4), out); [EOL]         out.closeArchiveEntry(); [EOL]         entry = new ZipArchiveEntry("test.txt"); [EOL]         entry.setSize(file5.length()); [EOL]         out.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file5), out); [EOL]         out.closeArchiveEntry(); [EOL]         entry = new ZipArchiveEntry("something/bla"); [EOL]         entry.setSize(file6.length()); [EOL]         out.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file6), out); [EOL]         out.closeArchiveEntry(); [EOL]         entry = new ZipArchiveEntry("test with spaces.txt"); [EOL]         entry.setSize(file6.length()); [EOL]         out.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file6), out); [EOL]         out.closeArchiveEntry(); [EOL]         return temp; [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]     } [EOL] } <line_num>: 80,155
protected void checkArchiveContent(File archive, List expected) throws Exception { [EOL]     final InputStream is = new FileInputStream(archive); [EOL]     final BufferedInputStream buf = new BufferedInputStream(is); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(buf); [EOL]     this.checkArchiveContent(in, expected); [EOL] } <line_num>: 166,173
protected void checkArchiveContent(ArchiveInputStream in, List expected) throws Exception { [EOL]     File result = File.createTempFile("dir-result", ""); [EOL]     result.delete(); [EOL]     result.mkdir(); [EOL]     ArchiveEntry entry = null; [EOL]     while ((entry = in.getNextEntry()) != null) { [EOL]         File outfile = new File(result.getCanonicalPath() + "/result/" + entry.getName()); [EOL]         outfile.getParentFile().mkdirs(); [EOL]         OutputStream out = new FileOutputStream(outfile); [EOL]         IOUtils.copy(in, out); [EOL]         out.close(); [EOL]         if (!outfile.exists()) { [EOL]             fail("extraction failed: " + entry.getName()); [EOL]         } [EOL]         if (!expected.remove(entry.getName())) { [EOL]             fail("unexpected entry: " + entry.getName()); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     if (expected.size() > 0) { [EOL]         for (Iterator iterator = expected.iterator(); iterator.hasNext(); ) { [EOL]             String name = (String) iterator.next(); [EOL]             fail("Expected entry: " + name); [EOL]         } [EOL]     } [EOL]     assertEquals(0, expected.size()); [EOL] } <line_num>: 175,205
