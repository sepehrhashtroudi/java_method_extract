public void testDeleteDir() throws Exception { [EOL]     File input = this.createArchive("zip"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile("test", ".zip"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("zip", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("zip", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("bla"); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("testdata/test1.xml"); [EOL]     expected.add("testdata/test2.xml"); [EOL]     expected.add("test/test3.xml"); [EOL]     expected.add("test.txt"); [EOL]     expected.add("something/bla"); [EOL]     expected.add("test with spaces.txt"); [EOL]     this.checkArchiveContent(result, expected); [EOL] } <line_num>: 50,85
public void testDeleteFile() throws Exception { [EOL]     File input = this.createArchive("zip"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile("test", ".zip"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("zip", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("zip", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("bla/test5.xml"); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("testdata/test1.xml"); [EOL]     expected.add("testdata/test2.xml"); [EOL]     expected.add("test/test3.xml"); [EOL]     expected.add("test.txt"); [EOL]     expected.add("something/bla"); [EOL]     expected.add("test with spaces.txt"); [EOL]     expected.add("bla/test4.xml"); [EOL]     expected.add("bla/blubber/test6.xml"); [EOL]     this.checkArchiveContent(result, expected); [EOL] } <line_num>: 93,129
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive("zip"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile("test", ".zip"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("zip", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("zip", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("bla"); [EOL]         final File file1 = getFile("test.txt"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry("bla/test.txt"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("testdata/test1.xml"); [EOL]     expected.add("testdata/test2.xml"); [EOL]     expected.add("test/test3.xml"); [EOL]     expected.add("test.txt"); [EOL]     expected.add("something/bla"); [EOL]     expected.add("bla/test.txt"); [EOL]     expected.add("test with spaces.txt"); [EOL]     this.checkArchiveContent(result, expected); [EOL] } <line_num>: 138,179
public void testDeleteFromAndAddToZip() throws Exception { [EOL]     File input = this.createArchive("zip"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile("test", ".zip"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("zip", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("zip", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         final File file1 = getFile("test.txt"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry("blub/test.txt"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.delete("testdata/test1.xml"); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("testdata/test2.xml"); [EOL]     expected.add("test/test3.xml"); [EOL]     expected.add("blub/test.txt"); [EOL]     expected.add("bla/test5.xml"); [EOL]     expected.add("bla/blubber/test6.xml"); [EOL]     expected.add("test.txt"); [EOL]     expected.add("something/bla"); [EOL]     expected.add("bla/test4.xml"); [EOL]     expected.add("test with spaces.txt"); [EOL]     this.checkArchiveContent(result, expected); [EOL] } <line_num>: 186,229
public void testAddDeleteAdd() throws Exception { [EOL]     File input = this.createArchive("zip"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile("test", ".zip"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("zip", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("zip", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         final File file1 = getFile("test.txt"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry("blub/test.txt"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.delete("blub"); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("testdata/test1.xml"); [EOL]     expected.add("testdata/test2.xml"); [EOL]     expected.add("test/test3.xml"); [EOL]     expected.add("test.txt"); [EOL]     expected.add("bla/test5.xml"); [EOL]     expected.add("bla/blubber/test6.xml"); [EOL]     expected.add("something/bla"); [EOL]     expected.add("bla/test4.xml"); [EOL]     expected.add("test with spaces.txt"); [EOL]     this.checkArchiveContent(result, expected); [EOL] } <line_num>: 237,280
public void testDeleteAddDelete() throws Exception { [EOL]     File input = this.createArchive("zip"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile("test", ".zip"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("zip", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("zip", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("bla"); [EOL]         final File file1 = getFile("test.txt"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry("bla/test.txt"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.delete("bla"); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("testdata/test1.xml"); [EOL]     expected.add("testdata/test2.xml"); [EOL]     expected.add("test/test3.xml"); [EOL]     expected.add("test.txt"); [EOL]     expected.add("something/bla"); [EOL]     expected.add("test with spaces.txt"); [EOL]     this.checkArchiveContent(result, expected); [EOL] } <line_num>: 288,330
public void testDeleteFromZip() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("test2.xml"); [EOL]         final File input = getFile("bla.zip"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("zip", is); [EOL]         temp = File.createTempFile("test", ".zip"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("zip", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("test1.xml"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] } <line_num>: 337,366
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("test2.xml"); [EOL]         final File input = getFile("bla.tar"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("tar", is); [EOL]         temp = new File(dir, "bla.tar"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("tar", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("test1.xml"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] } <line_num>: 373,400
public void testDeleteFromJar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("test2.xml"); [EOL]         changes.delete("META-INF"); [EOL]         changes.delete(".classpath"); [EOL]         changes.delete(".project"); [EOL]         final File input = getFile("bla.jar"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("jar", is); [EOL]         temp = new File(dir, "bla.jar"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("jar", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("test1.xml"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] } <line_num>: 407,437
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("test2.xml"); [EOL]         final File file1 = getFile("test.txt"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry("testdata/test.txt"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName("avalon"); [EOL]         entry.setGroupName("excalibur"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile("bla.tar"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("tar", is); [EOL]         temp = new File(dir, "bla.tar"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("tar", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("test1.xml"); [EOL]     expected.add("testdata/test.txt"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream("tar", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] } <line_num>: 439,484
public void testDeleteFromAndAddToJar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("test2.xml"); [EOL]         changes.delete("META-INF"); [EOL]         changes.delete(".classpath"); [EOL]         changes.delete(".project"); [EOL]         final File file1 = getFile("test.txt"); [EOL]         JarArchiveEntry entry = new JarArchiveEntry("testdata/test.txt"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile("bla.jar"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("jar", is); [EOL]         temp = new File(dir, "bla.jar"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("jar", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("test1.xml"); [EOL]     expected.add("testdata/test.txt"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] } <line_num>: 491,526
public void XtestDeleteFromAr() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("test2.xml"); [EOL]         final File input = getFile("bla.ar"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("ar", is); [EOL]         temp = new File(dir, "bla.ar"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("ar", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("test1.xml"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] } <line_num>: 533,562
public void XtestDeleteFromAndAddToAr() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("test2.xml"); [EOL]         final File file1 = getFile("test.txt"); [EOL]         final ArArchiveEntry entry = new ArArchiveEntry("test.txt", file1.length()); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile("bla.ar"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("ar", is); [EOL]         temp = new File(dir, "bla.ar"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("ar", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     System.out.println(temp.getAbsolutePath()); [EOL]     List expected = new ArrayList(); [EOL]     expected.add("test1.xml"); [EOL]     expected.add("test.txt"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] } <line_num>: 569,604
public void testRenameAndDelete() throws Exception { [EOL] } <line_num>: 614,615
public void testAddMoveDelete() throws Exception { [EOL] } <line_num>: 627,628
