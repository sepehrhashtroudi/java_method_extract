public ZipUtilTest(String name) { [EOL]     super(name); [EOL] } <line_num>: 34,36
protected void setUp() throws Exception { [EOL]     time = new Date(); [EOL]     Calendar cal = Calendar.getInstance(); [EOL]     cal.setTime(time); [EOL]     int year = cal.get(Calendar.YEAR); [EOL]     int month = cal.get(Calendar.MONTH) + 1; [EOL]     long value = ((year - 1980) << 25) | (month << 21) | (cal.get(Calendar.DAY_OF_MONTH) << 16) | (cal.get(Calendar.HOUR_OF_DAY) << 11) | (cal.get(Calendar.MINUTE) << 5) | (cal.get(Calendar.SECOND) >> 1); [EOL]     byte[] result = new byte[4]; [EOL]     result[0] = (byte) ((value & 0xFF)); [EOL]     result[1] = (byte) ((value & 0xFF00) >> 8); [EOL]     result[2] = (byte) ((value & 0xFF0000) >> 16); [EOL]     result[3] = (byte) ((value & 0xFF000000L) >> 24); [EOL]     zl = new ZipLong(result); [EOL] } <line_num>: 38,57
protected void tearDown() throws Exception { [EOL]     super.tearDown(); [EOL] } <line_num>: 59,61
public void testZipLong() throws Exception { [EOL]     ZipLong test = ZipUtil.toDosTime(time); [EOL]     assertEquals(test.getValue(), zl.getValue()); [EOL] } <line_num>: 63,66
public void testAdjustToLong() { [EOL]     assertEquals(Integer.MAX_VALUE, ZipUtil.adjustToLong(Integer.MAX_VALUE)); [EOL]     assertEquals(((long) Integer.MAX_VALUE) + 1, ZipUtil.adjustToLong(Integer.MAX_VALUE + 1)); [EOL]     assertEquals(2 * ((long) Integer.MAX_VALUE), ZipUtil.adjustToLong(2 * Integer.MAX_VALUE)); [EOL] } <line_num>: 68,75
