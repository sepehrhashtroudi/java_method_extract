public AsiExtraFieldTest(String name) { [EOL]     super(name); [EOL] } <line_num>: 28,30
public void testModes() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     assertEquals("plain file", 0100123, a.getMode()); [EOL]     a.setDirectory(true); [EOL]     assertEquals("directory", 040123, a.getMode()); [EOL]     a.setLinkedFile("test"); [EOL]     assertEquals("symbolic link", 0120123, a.getMode()); [EOL] } <line_num>: 35,43
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals("no link", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals("no link, byte " + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile("test"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals("no link", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals("no link, byte " + i, expect[i], b[i]); [EOL]     } [EOL] } <line_num>: 48,77
public void testReparse() throws Exception { [EOL]     byte[] data = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals("length plain file", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue("plain file, no link", !a.isLink()); [EOL]     assertTrue("plain file, no dir", !a.isDirectory()); [EOL]     assertEquals("mode plain file", FILE_FLAG | 0123, a.getMode()); [EOL]     assertEquals("uid plain file", 5, a.getUserId()); [EOL]     assertEquals("gid plain file", 6, a.getGroupId()); [EOL]     data = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals("length link", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue("link, is link", a.isLink()); [EOL]     assertTrue("link, no dir", !a.isDirectory()); [EOL]     assertEquals("mode link", LINK_FLAG | 0123, a.getMode()); [EOL]     assertEquals("uid link", 5, a.getUserId()); [EOL]     assertEquals("gid link", 6, a.getGroupId()); [EOL]     assertEquals("test", a.getLinkedFile()); [EOL]     data = new byte[] { (byte) 0x8E, 0x01, (byte) 0xBF, (byte) 0x0E, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals("length dir", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue("dir, no link", !a.isLink()); [EOL]     assertTrue("dir, is dir", a.isDirectory()); [EOL]     assertEquals("mode dir", DIR_FLAG | 0123, a.getMode()); [EOL]     assertEquals("uid dir", 5, a.getUserId()); [EOL]     assertEquals("gid dir", 6, a.getGroupId()); [EOL]     data = new byte[] { 0, 0, 0, 0, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     try { [EOL]         a.parseFromLocalFileData(data, 0, data.length); [EOL]         fail("should raise bad CRC exception"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("bad CRC checksum 0 instead of ebf018e", e.getMessage()); [EOL]     } [EOL] } <line_num>: 82,140
public void testClone() { [EOL]     AsiExtraField s1 = new AsiExtraField(); [EOL]     s1.setUserId(42); [EOL]     s1.setGroupId(12); [EOL]     s1.setLinkedFile("foo"); [EOL]     s1.setMode(0644); [EOL]     s1.setDirectory(true); [EOL]     AsiExtraField s2 = (AsiExtraField) s1.clone(); [EOL]     assertNotSame(s1, s2); [EOL]     assertEquals(s1.getUserId(), s2.getUserId()); [EOL]     assertEquals(s1.getGroupId(), s2.getGroupId()); [EOL]     assertEquals(s1.getLinkedFile(), s2.getLinkedFile()); [EOL]     assertEquals(s1.getMode(), s2.getMode()); [EOL]     assertEquals(s1.isDirectory(), s2.isDirectory()); [EOL] } <line_num>: 142,156
