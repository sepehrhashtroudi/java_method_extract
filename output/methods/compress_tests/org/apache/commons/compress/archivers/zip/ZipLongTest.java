public ZipLongTest(String name) { [EOL]     super(name); [EOL] } <line_num>: 29,31
public void testToBytes() { [EOL]     ZipLong zl = new ZipLong(0x12345678); [EOL]     byte[] result = zl.getBytes(); [EOL]     assertEquals("length getBytes", 4, result.length); [EOL]     assertEquals("first byte getBytes", 0x78, result[0]); [EOL]     assertEquals("second byte getBytes", 0x56, result[1]); [EOL]     assertEquals("third byte getBytes", 0x34, result[2]); [EOL]     assertEquals("fourth byte getBytes", 0x12, result[3]); [EOL] } <line_num>: 36,44
public void testFromBytes() { [EOL]     byte[] val = new byte[] { 0x78, 0x56, 0x34, 0x12 }; [EOL]     ZipLong zl = new ZipLong(val); [EOL]     assertEquals("value from bytes", 0x12345678, zl.getValue()); [EOL] } <line_num>: 49,53
public void testEquals() { [EOL]     ZipLong zl = new ZipLong(0x12345678); [EOL]     ZipLong zl2 = new ZipLong(0x12345678); [EOL]     ZipLong zl3 = new ZipLong(0x87654321); [EOL]     assertTrue("reflexive", zl.equals(zl)); [EOL]     assertTrue("works", zl.equals(zl2)); [EOL]     assertTrue("works, part two", !zl.equals(zl3)); [EOL]     assertTrue("symmetric", zl2.equals(zl)); [EOL]     assertTrue("null handling", !zl.equals(null)); [EOL]     assertTrue("non ZipLong handling", !zl.equals(new Integer(0x1234))); [EOL] } <line_num>: 58,72
public void testSign() { [EOL]     ZipLong zl = new ZipLong(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }); [EOL]     assertEquals(0x00000000FFFFFFFFl, zl.getValue()); [EOL] } <line_num>: 77,80
public void testClone() { [EOL]     ZipLong s1 = new ZipLong(42); [EOL]     ZipLong s2 = (ZipLong) s1.clone(); [EOL]     assertNotSame(s1, s2); [EOL]     assertEquals(s1, s2); [EOL]     assertEquals(s1.getValue(), s2.getValue()); [EOL] } <line_num>: 82,88
