protected <T1, T2> void test(ObjectMapper mapper1, String desc1, T1 inputValue1, Class<T1> inputClass1, ObjectMapper mapper2, String desc2, T2 inputValue2, Class<T2> inputClass2) throws Exception { [EOL]     final byte[] byteInput1 = mapper1.writeValueAsBytes(inputValue1); [EOL]     final byte[] byteInput2 = mapper2.writeValueAsBytes(inputValue2); [EOL]     desc1 = String.format("%s (%d bytes)", desc1, byteInput1.length); [EOL]     desc2 = String.format("%s (%d bytes)", desc2, byteInput2.length); [EOL]     { [EOL]         mapper1.readValue(byteInput1, inputClass1); [EOL]         mapper2.readValue(byteInput2, inputClass2); [EOL]         System.out.println("Input successfully round-tripped for both styles..."); [EOL]     } [EOL]     final int REPS = (int) ((double) (8 * 1000 * 1000) / (double) byteInput1.length); [EOL]     System.out.printf("Read %d bytes to bind (%d as array); will do %d repetitions\n", byteInput1.length, byteInput2.length, REPS); [EOL]     final ObjectReader jsonReader = mapper1.reader().with(DeserializationFeature.EAGER_DESERIALIZER_FETCH).withType(inputClass1); [EOL]     final ObjectReader arrayReader = mapper2.reader().with(DeserializationFeature.EAGER_DESERIALIZER_FETCH).withType(inputClass2); [EOL]     int i = 0; [EOL]     int roundsDone = 0; [EOL]     final int TYPES = 2; [EOL]     final int WARMUP_ROUNDS = 5; [EOL]     final long[] times = new long[TYPES]; [EOL]     while (true) { [EOL]         try { [EOL]             Thread.sleep(100L); [EOL]         } catch (InterruptedException ie) { [EOL]         } [EOL]         int round = (i++ % TYPES); [EOL]         String msg; [EOL]         boolean lf = (round == 0); [EOL]         long msecs; [EOL]         switch(round) { [EOL]             case 0: [EOL]                 msg = desc1; [EOL]                 msecs = testDeser(REPS, byteInput1, jsonReader); [EOL]                 break; [EOL]             case 1: [EOL]                 msg = desc2; [EOL]                 msecs = testDeser(REPS, byteInput2, arrayReader); [EOL]                 break; [EOL]             default: [EOL]                 throw new Error(); [EOL]         } [EOL]         if (roundsDone >= WARMUP_ROUNDS) { [EOL]             times[round] += msecs; [EOL]         } [EOL]         System.out.printf("Test '%s' [hash: 0x%s] -> %d msecs\n", msg, this.hash, msecs); [EOL]         if (lf) { [EOL]             ++roundsDone; [EOL]             if ((roundsDone % 3) == 0 && roundsDone > WARMUP_ROUNDS) { [EOL]                 double den = (double) (roundsDone - WARMUP_ROUNDS); [EOL]                 System.out.printf("Averages after %d rounds (Object / Array): %.1f / %.1f msecs\n", (int) den, times[0] / den, times[1] / den); [EOL]             } [EOL]             System.out.println(); [EOL]         } [EOL]         if ((i % 17) == 0) { [EOL]             System.out.println("[GC]"); [EOL]             Thread.sleep(100L); [EOL]             System.gc(); [EOL]             Thread.sleep(100L); [EOL]         } [EOL]     } [EOL] } <line_num>: 9,94
private final long testDeser(int REPS, byte[] input, ObjectReader reader) throws Exception { [EOL]     long start = System.currentTimeMillis(); [EOL]     Object result = null; [EOL]     while (--REPS >= 0) { [EOL]         result = reader.readValue(input); [EOL]     } [EOL]     hash = result.hashCode(); [EOL]     return System.currentTimeMillis() - start; [EOL] } <line_num>: 96,105
