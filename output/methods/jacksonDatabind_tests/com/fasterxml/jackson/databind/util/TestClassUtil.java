BaseClass(String str) { [EOL] } <line_num>: 26,26
protected Inner() { [EOL]     throw new IllegalStateException("test"); [EOL] } <line_num>: 38,40
SubClass() { [EOL]     super("x"); [EOL] } <line_num>: 46,46
public void testSuperTypes() { [EOL]     Collection<Class<?>> result = ClassUtil.findSuperTypes(SubClass.class, null); [EOL]     Class<?>[] classes = result.toArray(new Class<?>[result.size()]); [EOL]     Class<?>[] exp = new Class[] { SubInt.class, BaseInt.class, BaseClass.class, Comparable.class }; [EOL]     assertArrayEquals(exp, classes); [EOL] } <line_num>: 55,65
public void testSuperInterfaces() { [EOL]     Collection<Class<?>> result = ClassUtil.findSuperTypes(SubInt.class, null); [EOL]     Class<?>[] classes = result.toArray(new Class<?>[result.size()]); [EOL]     Class<?>[] exp = new Class[] { BaseInt.class }; [EOL]     assertArrayEquals(exp, classes); [EOL] } <line_num>: 67,75
public void testIsConcrete() { [EOL]     assertTrue(ClassUtil.isConcrete(getClass())); [EOL]     assertFalse(ClassUtil.isConcrete(BaseClass.class)); [EOL]     assertFalse(ClassUtil.isConcrete(BaseInt.class)); [EOL] } <line_num>: 77,82
public void testCanBeABeanType() { [EOL]     assertEquals("annotation", ClassUtil.canBeABeanType(java.lang.annotation.Retention.class)); [EOL]     assertEquals("array", ClassUtil.canBeABeanType(String[].class)); [EOL]     assertEquals("enum", ClassUtil.canBeABeanType(TestEnum.class)); [EOL]     assertEquals("primitive", ClassUtil.canBeABeanType(Integer.TYPE)); [EOL]     assertNull(ClassUtil.canBeABeanType(Integer.class)); [EOL]     assertEquals("non-static member class", ClassUtil.isLocalType(InnerNonStatic.class, false)); [EOL]     assertNull(ClassUtil.isLocalType(Integer.class, false)); [EOL] } <line_num>: 84,94
public void testExceptionHelpers() { [EOL]     RuntimeException e = new RuntimeException("test"); [EOL]     RuntimeException wrapper = new RuntimeException(e); [EOL]     assertSame(e, ClassUtil.getRootCause(wrapper)); [EOL]     try { [EOL]         ClassUtil.throwAsIAE(e); [EOL]         fail("Shouldn't get this far"); [EOL]     } catch (RuntimeException e2) { [EOL]         assertSame(e, e2); [EOL]     } [EOL]     try { [EOL]         ClassUtil.unwrapAndThrowAsIAE(wrapper); [EOL]         fail("Shouldn't get this far"); [EOL]     } catch (RuntimeException e2) { [EOL]         assertSame(e, e2); [EOL]     } [EOL] } <line_num>: 96,116
public void testFailedCreateInstance() { [EOL]     try { [EOL]         ClassUtil.createInstance(BaseClass.class, true); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "has no default"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "is not accessible"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, true); [EOL]     } catch (IllegalStateException e) { [EOL]         verifyException(e, "test"); [EOL]     } [EOL] } <line_num>: 118,139
