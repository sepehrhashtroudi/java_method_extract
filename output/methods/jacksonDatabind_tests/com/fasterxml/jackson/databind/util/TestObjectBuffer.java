public void testUntyped() { [EOL]     _testObjectBuffer(null); [EOL] } <line_num>: 13,16
public void testTyped() { [EOL]     _testObjectBuffer(Integer.class); [EOL] } <line_num>: 18,21
private void _testObjectBuffer(Class<?> clz) { [EOL]     int[] SIZES = new int[] { 3, 19, 99, 1007, 79000, 256001 }; [EOL]     for (int reuse = 0; reuse < 2; ++reuse) { [EOL]         ObjectBuffer buf = (reuse == 0) ? null : new ObjectBuffer(); [EOL]         for (int sizeIndex = 0; sizeIndex < SIZES.length; ++sizeIndex) { [EOL]             int size = SIZES[sizeIndex]; [EOL]             Random r = new Random(size); [EOL]             ObjectBuffer thisBuf = (buf == null) ? new ObjectBuffer() : buf; [EOL]             Object[] chunk = thisBuf.resetAndStart(); [EOL]             int ix = 0; [EOL]             for (int i = 0; i < size; ++i) { [EOL]                 if (ix >= chunk.length) { [EOL]                     chunk = thisBuf.appendCompletedChunk(chunk); [EOL]                     ix = 0; [EOL]                 } [EOL]                 chunk[ix++] = Integer.valueOf(r.nextInt()); [EOL]             } [EOL]             Object[] result; [EOL]             if (clz == null) { [EOL]                 result = thisBuf.completeAndClearBuffer(chunk, ix); [EOL]             } else { [EOL]                 result = thisBuf.completeAndClearBuffer(chunk, ix, clz); [EOL]             } [EOL]             assertEquals(size, result.length); [EOL]             r = new Random(size); [EOL]             for (int i = 0; i < size; ++i) { [EOL]                 assertEquals(r.nextInt(), ((Integer) result[i]).intValue()); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 29,70
