public void testSimpleWrites() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     JsonParser jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.writeString("abc"); [EOL]     jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     assertEquals("abc", jp.getText()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.writeNumber(13); [EOL]     jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals(13, jp.getIntValue()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL] } <line_num>: 19,50
public void testSimpleArray() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     buf.writeStartArray(); [EOL]     assertTrue(buf.getOutputContext().inArray()); [EOL]     buf.writeEndArray(); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     JsonParser jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inArray()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeStartArray(); [EOL]     buf.writeBoolean(true); [EOL]     buf.writeNull(); [EOL]     buf.writeEndArray(); [EOL]     jp = buf.asParser(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeStartArray(); [EOL]     buf.writeStartArray(); [EOL]     buf.writeBinary(new byte[3]); [EOL]     buf.writeEndArray(); [EOL]     buf.writeEndArray(); [EOL]     jp = buf.asParser(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_EMBEDDED_OBJECT, jp.nextToken()); [EOL]     Object ob = jp.getEmbeddedObject(); [EOL]     assertNotNull(ob); [EOL]     assertTrue(ob instanceof byte[]); [EOL]     assertEquals(3, ((byte[]) ob).length); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL] } <line_num>: 52,111
public void testSimpleObject() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     buf.writeStartObject(); [EOL]     assertTrue(buf.getOutputContext().inObject()); [EOL]     buf.writeEndObject(); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     JsonParser jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inObject()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeStartObject(); [EOL]     buf.writeNumberField("num", 1.25); [EOL]     buf.writeEndObject(); [EOL]     jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("num", jp.getCurrentName()); [EOL]     jp.overrideCurrentName("bah"); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertEquals(1.25, jp.getDoubleValue()); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL] } <line_num>: 113,161
public void testWithJSONSampleDoc() throws Exception { [EOL]     JsonParser jp = createParserUsingReader(SAMPLE_DOC_JSON_SPEC); [EOL]     TokenBuffer tb = new TokenBuffer(null); [EOL]     while (jp.nextToken() != null) { [EOL]         tb.copyCurrentEvent(jp); [EOL]     } [EOL]     verifyJsonSpecSampleDoc(tb.asParser(), false); [EOL]     verifyJsonSpecSampleDoc(tb.asParser(), true); [EOL]     tb.close(); [EOL] } <line_num>: 167,182
public void testAppend() throws IOException { [EOL]     TokenBuffer buf1 = new TokenBuffer(null); [EOL]     buf1.writeStartObject(); [EOL]     buf1.writeFieldName("a"); [EOL]     buf1.writeBoolean(true); [EOL]     TokenBuffer buf2 = new TokenBuffer(null); [EOL]     buf2.writeFieldName("b"); [EOL]     buf2.writeNumber(13); [EOL]     buf2.writeEndObject(); [EOL]     buf1.append(buf2); [EOL]     JsonParser jp = buf1.asParser(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("b", jp.getCurrentName()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals(13, jp.getIntValue()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     jp.close(); [EOL]     buf1.close(); [EOL] } <line_num>: 184,211
public void testWithJsonParserSequenceSimple() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeStartArray(); [EOL]     buf.writeString("test"); [EOL]     JsonParser jp = createParserUsingReader("[ true, null ]"); [EOL]     JsonParserSequence seq = JsonParserSequence.createFlattened(buf.asParser(), jp); [EOL]     assertEquals(2, seq.containedParsersCount()); [EOL]     assertFalse(jp.isClosed()); [EOL]     assertFalse(seq.hasCurrentToken()); [EOL]     assertNull(seq.getCurrentToken()); [EOL]     assertNull(seq.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, seq.nextToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, seq.nextToken()); [EOL]     assertEquals("test", seq.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, seq.nextToken()); [EOL]     assertToken(JsonToken.VALUE_TRUE, seq.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NULL, seq.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, seq.nextToken()); [EOL]     assertNull(seq.nextToken()); [EOL]     assertNull(seq.nextToken()); [EOL]     assertTrue(jp.isClosed()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL] } <line_num>: 219,261
public void testWithMultipleJsonParserSequences() throws IOException { [EOL]     TokenBuffer buf1 = new TokenBuffer(null); [EOL]     buf1.writeStartArray(); [EOL]     TokenBuffer buf2 = new TokenBuffer(null); [EOL]     buf2.writeString("a"); [EOL]     TokenBuffer buf3 = new TokenBuffer(null); [EOL]     buf3.writeNumber(13); [EOL]     TokenBuffer buf4 = new TokenBuffer(null); [EOL]     buf4.writeEndArray(); [EOL]     JsonParserSequence seq1 = JsonParserSequence.createFlattened(buf1.asParser(), buf2.asParser()); [EOL]     assertEquals(2, seq1.containedParsersCount()); [EOL]     JsonParserSequence seq2 = JsonParserSequence.createFlattened(buf3.asParser(), buf4.asParser()); [EOL]     assertEquals(2, seq2.containedParsersCount()); [EOL]     JsonParserSequence combo = JsonParserSequence.createFlattened(seq1, seq2); [EOL]     assertEquals(4, combo.containedParsersCount()); [EOL]     assertToken(JsonToken.START_ARRAY, combo.nextToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, combo.nextToken()); [EOL]     assertEquals("a", combo.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, combo.nextToken()); [EOL]     assertEquals(13, combo.getIntValue()); [EOL]     assertToken(JsonToken.END_ARRAY, combo.nextToken()); [EOL]     assertNull(combo.nextToken()); [EOL]     buf1.close(); [EOL]     buf2.close(); [EOL]     buf3.close(); [EOL]     buf4.close(); [EOL] } <line_num>: 267,297
