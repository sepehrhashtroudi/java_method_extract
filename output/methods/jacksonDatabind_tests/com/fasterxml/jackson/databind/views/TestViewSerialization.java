@JsonView(ViewB.class) [EOL] public String getB() { [EOL]     return "3"; [EOL] } <line_num>: 37,38
public String getB() { [EOL]     return "2"; [EOL] } <line_num>: 51,51
@JsonView(WebView.class) [EOL] public int getFoo() { [EOL]     return 3; [EOL] } <line_num>: 75,76
@SuppressWarnings("unchecked") [EOL] public void testSimple() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Bean bean = new Bean(); [EOL]     Map<String, Object> map = writeAndMap(mapper, bean); [EOL]     assertEquals(3, map.size()); [EOL]     sw = new StringWriter(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     sw = new StringWriter(); [EOL]     mapper.writerWithView(ViewAA.class).writeValue(sw, bean); [EOL]     map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("aa")); [EOL]     String json = mapper.writerWithView(ViewB.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("2", map.get("aa")); [EOL]     assertEquals("3", map.get("b")); [EOL]     json = mapper.writerWithView(ViewBB.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("2", map.get("aa")); [EOL]     assertEquals("3", map.get("b")); [EOL] } <line_num>: 85,123
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] } <line_num>: 131,154
public void testImplicitAutoDetection() throws Exception { [EOL]     assertEquals("{\"a\":1}", serializeAsString(new ImplicitBean())); [EOL] } <line_num>: 160,163
public void testVisibility() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     VisibilityBean bean = new VisibilityBean(); [EOL]     String json = mapper.writerWithView(Object.class).writeValueAsString(bean); [EOL]     assertEquals("{\"id\":\"id\"}", json); [EOL] } <line_num>: 165,173
public void test() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setSerializationInclusion(JsonInclude.Include.NON_DEFAULT); [EOL]     String json = mapper.writerWithView(OtherView.class).writeValueAsString(new Foo()); [EOL]     assertEquals(json, "{}"); [EOL] } <line_num>: 176,182
