public MyBean(String s, boolean bogus) { [EOL]     _secret = s; [EOL] } <line_num>: 21,23
public MysteryBean(Object v) { [EOL]     value = v; [EOL] } <line_num>: 30,30
protected CreatorBean(String s) { [EOL]     _secret = s; [EOL] } <line_num>: 39,41
public MyList(boolean b) { [EOL]     super(); [EOL] } <line_num>: 65,65
public MyMap(boolean b) { [EOL]     super(); [EOL] } <line_num>: 71,71
public MyMap(String name) { [EOL]     super(); [EOL]     put(name, name); [EOL] } <line_num>: 72,75
public AnnotatedBean(String a, int b) { [EOL]     this.a = a; [EOL]     this.b = b; [EOL] } <line_num>: 250,253
public MyModule(Class<?> cls, ValueInstantiator inst) { [EOL]     super("Test", Version.unknownVersion()); [EOL]     this.addValueInstantiator(cls, inst); [EOL] } <line_num>: 275,279
@Override [EOL] public String getValueTypeDesc() { [EOL]     return "UNKNOWN"; [EOL] } <line_num>: 46,49
@Override [EOL] public boolean canCreateUsingDelegate() { [EOL]     return false; [EOL] } <line_num>: 51,52
@Override [EOL] public String getValueTypeDesc() { [EOL]     return MyBean.class.getName(); [EOL] } <line_num>: 80,83
@Override [EOL] public boolean canCreateUsingDefault() { [EOL]     return true; [EOL] } <line_num>: 85,86
@Override [EOL] public MyBean createUsingDefault(DeserializationContext ctxt) { [EOL]     return new MyBean("secret!", true); [EOL] } <line_num>: 88,91
@Override [EOL] public String getValueTypeDesc() { [EOL]     return Object.class.getName(); [EOL] } <line_num>: 101,104
@Override [EOL] public boolean canCreateFromObjectWith() { [EOL]     return true; [EOL] } <line_num>: 106,107
@Override [EOL] public CreatorProperty[] getFromObjectArguments(DeserializationConfig config) { [EOL]     return new CreatorProperty[] { new CreatorProperty("type", config.constructType(Class.class), null, null, null, null, 0, null, true) }; [EOL] } <line_num>: 109,115
@Override [EOL] public Object createFromObjectWith(DeserializationContext ctxt, Object[] args) { [EOL]     try { [EOL]         Class<?> cls = (Class<?>) args[0]; [EOL]         return cls.newInstance(); [EOL]     } catch (Exception e) { [EOL]         throw new RuntimeException(e); [EOL]     } [EOL] } <line_num>: 117,125
@Override [EOL] public String getValueTypeDesc() { [EOL]     return MyMap.class.getName(); [EOL] } <line_num>: 130,133
@Override [EOL] public boolean canCreateFromObjectWith() { [EOL]     return true; [EOL] } <line_num>: 135,136
@Override [EOL] public CreatorProperty[] getFromObjectArguments(DeserializationConfig config) { [EOL]     return new CreatorProperty[] { new CreatorProperty("name", config.constructType(String.class), null, null, null, null, 0, null, true) }; [EOL] } <line_num>: 138,144
@Override [EOL] public Object createFromObjectWith(DeserializationContext ctxt, Object[] args) { [EOL]     return new MyMap((String) args[0]); [EOL] } <line_num>: 146,149
@Override [EOL] public String getValueTypeDesc() { [EOL]     return "xxx"; [EOL] } <line_num>: 154,155
@Override [EOL] public boolean canCreateUsingDelegate() { [EOL]     return true; [EOL] } <line_num>: 157,158
@Override [EOL] public JavaType getDelegateType(DeserializationConfig config) { [EOL]     return config.constructType(Object.class); [EOL] } <line_num>: 160,163
@Override [EOL] public Object createUsingDelegate(DeserializationContext ctxt, Object delegate) { [EOL]     return new MyBean("" + delegate, true); [EOL] } <line_num>: 165,168
@Override [EOL] public String getValueTypeDesc() { [EOL]     return MyList.class.getName(); [EOL] } <line_num>: 173,176
@Override [EOL] public boolean canCreateUsingDefault() { [EOL]     return true; [EOL] } <line_num>: 178,179
@Override [EOL] public MyList createUsingDefault(DeserializationContext ctxt) { [EOL]     return new MyList(true); [EOL] } <line_num>: 181,184
@Override [EOL] public String getValueTypeDesc() { [EOL]     return "xxx"; [EOL] } <line_num>: 189,190
@Override [EOL] public boolean canCreateUsingDelegate() { [EOL]     return true; [EOL] } <line_num>: 192,193
@Override [EOL] public JavaType getDelegateType(DeserializationConfig config) { [EOL]     return config.constructType(Object.class); [EOL] } <line_num>: 195,198
@Override [EOL] public Object createUsingDelegate(DeserializationContext ctxt, Object delegate) { [EOL]     MyList list = new MyList(true); [EOL]     list.add(delegate); [EOL]     return list; [EOL] } <line_num>: 200,205
@Override [EOL] public String getValueTypeDesc() { [EOL]     return MyMap.class.getName(); [EOL] } <line_num>: 210,213
@Override [EOL] public boolean canCreateUsingDefault() { [EOL]     return true; [EOL] } <line_num>: 215,216
@Override [EOL] public MyMap createUsingDefault(DeserializationContext ctxt) { [EOL]     return new MyMap(true); [EOL] } <line_num>: 218,221
@Override [EOL] public String getValueTypeDesc() { [EOL]     return "xxx"; [EOL] } <line_num>: 226,227
@Override [EOL] public boolean canCreateUsingDelegate() { [EOL]     return true; [EOL] } <line_num>: 229,230
@Override [EOL] public JavaType getDelegateType(DeserializationConfig config) { [EOL]     return TypeFactory.defaultInstance().constructType(Object.class); [EOL] } <line_num>: 232,235
@Override [EOL] public Object createUsingDelegate(DeserializationContext ctxt, Object delegate) { [EOL]     MyMap map = new MyMap(true); [EOL]     map.put("value", delegate); [EOL]     return map; [EOL] } <line_num>: 237,242
@Override [EOL] public String getValueTypeDesc() { [EOL]     return MyMap.class.getName(); [EOL] } <line_num>: 258,261
@Override [EOL] public boolean canCreateUsingDefault() { [EOL]     return true; [EOL] } <line_num>: 263,264
@Override [EOL] public AnnotatedBean createUsingDefault(DeserializationContext ctxt) { [EOL]     return new AnnotatedBean("foo", 3); [EOL] } <line_num>: 266,269
public void testCustomBeanInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyBean.class, new MyBeanInstantiator())); [EOL]     MyBean bean = mapper.readValue("{}", MyBean.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("secret!", bean._secret); [EOL] } <line_num>: 288,295
public void testCustomListInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyList.class, new MyListInstantiator())); [EOL]     MyList result = mapper.readValue("[]", MyList.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(MyList.class, result.getClass()); [EOL]     assertEquals(0, result.size()); [EOL] } <line_num>: 297,305
public void testCustomMapInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyMap.class, new MyMapInstantiator())); [EOL]     MyMap result = mapper.readValue("{ \"a\":\"b\" }", MyMap.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(MyMap.class, result.getClass()); [EOL]     assertEquals(1, result.size()); [EOL] } <line_num>: 307,315
public void testDelegateBeanInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyBean.class, new MyDelegateBeanInstantiator())); [EOL]     MyBean bean = mapper.readValue("123", MyBean.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("123", bean._secret); [EOL] } <line_num>: 323,330
public void testDelegateListInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyList.class, new MyDelegateListInstantiator())); [EOL]     MyList result = mapper.readValue("123", MyList.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(123), result.get(0)); [EOL] } <line_num>: 332,340
public void testDelegateMapInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyMap.class, new MyDelegateMapInstantiator())); [EOL]     MyMap result = mapper.readValue("123", MyMap.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(123), result.values().iterator().next()); [EOL] } <line_num>: 342,350
@Override [EOL] public boolean canCreateFromObjectWith() { [EOL]     return true; [EOL] } <line_num>: 363,364
@Override [EOL] public CreatorProperty[] getFromObjectArguments(DeserializationConfig config) { [EOL]     return new CreatorProperty[] { new CreatorProperty("secret", config.constructType(String.class), null, null, null, null, 0, null, true) }; [EOL] } <line_num>: 366,372
@Override [EOL] public Object createFromObjectWith(DeserializationContext ctxt, Object[] args) { [EOL]     return new CreatorBean((String) args[0]); [EOL] } <line_num>: 374,377
public void testPropertyBasedBeanInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(CreatorBean.class, new InstantiatorBase() { [EOL]  [EOL]         @Override [EOL]         public boolean canCreateFromObjectWith() { [EOL]             return true; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public CreatorProperty[] getFromObjectArguments(DeserializationConfig config) { [EOL]             return new CreatorProperty[] { new CreatorProperty("secret", config.constructType(String.class), null, null, null, null, 0, null, true) }; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object createFromObjectWith(DeserializationContext ctxt, Object[] args) { [EOL]             return new CreatorBean((String) args[0]); [EOL]         } [EOL]     })); [EOL]     CreatorBean bean = mapper.readValue("{\"secret\":123,\"value\":37}", CreatorBean.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("123", bean._secret); [EOL] } <line_num>: 358,382
public void testPropertyBasedMapInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyMap.class, new CreatorMapInstantiator())); [EOL]     MyMap result = mapper.readValue("{\"name\":\"bob\", \"x\":\"y\"}", MyMap.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("bob", result.get("bob")); [EOL]     assertEquals("y", result.get("x")); [EOL] } <line_num>: 384,393
@Override [EOL] public boolean canCreateFromString() { [EOL]     return true; [EOL] } <line_num>: 406,407
@Override [EOL] public Object createFromString(DeserializationContext ctxt, String value) { [EOL]     return new MysteryBean(value); [EOL] } <line_num>: 409,412
public void testBeanFromString() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MysteryBean.class, new InstantiatorBase() { [EOL]  [EOL]         @Override [EOL]         public boolean canCreateFromString() { [EOL]             return true; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object createFromString(DeserializationContext ctxt, String value) { [EOL]             return new MysteryBean(value); [EOL]         } [EOL]     })); [EOL]     MysteryBean result = mapper.readValue(quote("abc"), MysteryBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals("abc", result.value); [EOL] } <line_num>: 401,417
@Override [EOL] public boolean canCreateFromInt() { [EOL]     return true; [EOL] } <line_num>: 424,425
@Override [EOL] public Object createFromInt(DeserializationContext ctxt, int value) { [EOL]     return new MysteryBean(value + 1); [EOL] } <line_num>: 427,430
public void testBeanFromInt() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MysteryBean.class, new InstantiatorBase() { [EOL]  [EOL]         @Override [EOL]         public boolean canCreateFromInt() { [EOL]             return true; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object createFromInt(DeserializationContext ctxt, int value) { [EOL]             return new MysteryBean(value + 1); [EOL]         } [EOL]     })); [EOL]     MysteryBean result = mapper.readValue("37", MysteryBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(Integer.valueOf(38), result.value); [EOL] } <line_num>: 419,435
@Override [EOL] public boolean canCreateFromLong() { [EOL]     return true; [EOL] } <line_num>: 442,443
@Override [EOL] public Object createFromLong(DeserializationContext ctxt, long value) { [EOL]     return new MysteryBean(value + 1L); [EOL] } <line_num>: 445,448
public void testBeanFromLong() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MysteryBean.class, new InstantiatorBase() { [EOL]  [EOL]         @Override [EOL]         public boolean canCreateFromLong() { [EOL]             return true; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object createFromLong(DeserializationContext ctxt, long value) { [EOL]             return new MysteryBean(value + 1L); [EOL]         } [EOL]     })); [EOL]     MysteryBean result = mapper.readValue("9876543210", MysteryBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(Long.valueOf(9876543211L), result.value); [EOL] } <line_num>: 437,453
@Override [EOL] public boolean canCreateFromDouble() { [EOL]     return true; [EOL] } <line_num>: 460,461
@Override [EOL] public Object createFromDouble(DeserializationContext ctxt, double value) { [EOL]     return new MysteryBean(2.0 * value); [EOL] } <line_num>: 463,466
public void testBeanFromDouble() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MysteryBean.class, new InstantiatorBase() { [EOL]  [EOL]         @Override [EOL]         public boolean canCreateFromDouble() { [EOL]             return true; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object createFromDouble(DeserializationContext ctxt, double value) { [EOL]             return new MysteryBean(2.0 * value); [EOL]         } [EOL]     })); [EOL]     MysteryBean result = mapper.readValue("0.25", MysteryBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(Double.valueOf(0.5), result.value); [EOL] } <line_num>: 455,471
@Override [EOL] public boolean canCreateFromBoolean() { [EOL]     return true; [EOL] } <line_num>: 478,479
@Override [EOL] public Object createFromBoolean(DeserializationContext ctxt, boolean value) { [EOL]     return new MysteryBean(Boolean.valueOf(value)); [EOL] } <line_num>: 481,484
public void testBeanFromBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MysteryBean.class, new InstantiatorBase() { [EOL]  [EOL]         @Override [EOL]         public boolean canCreateFromBoolean() { [EOL]             return true; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object createFromBoolean(DeserializationContext ctxt, boolean value) { [EOL]             return new MysteryBean(Boolean.valueOf(value)); [EOL]         } [EOL]     })); [EOL]     MysteryBean result = mapper.readValue("true", MysteryBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL] } <line_num>: 473,489
public void testPolymorphicCreatorBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(PolymorphicBeanBase.class, new PolymorphicBeanInstantiator())); [EOL]     String JSON = "{\"type\":" + quote(PolymorphicBean.class.getName()) + ",\"name\":\"Axel\"}"; [EOL]     PolymorphicBeanBase result = mapper.readValue(JSON, PolymorphicBeanBase.class); [EOL]     assertNotNull(result); [EOL]     assertSame(PolymorphicBean.class, result.getClass()); [EOL]     assertEquals("Axel", ((PolymorphicBean) result).name); [EOL] } <line_num>: 502,511
public void testJackson633() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AnnotatedBean bean = mapper.readValue("{}", AnnotatedBean.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("foo", bean.a); [EOL]     assertEquals(3, bean.b); [EOL] } <line_num>: 513,520
