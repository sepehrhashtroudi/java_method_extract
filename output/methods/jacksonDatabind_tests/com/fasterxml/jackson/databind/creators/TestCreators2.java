@JsonCreator [EOL] public HashTest(@JsonProperty("bytes") @JsonDeserialize(using = BytesDeserializer.class) final byte[] bytes, @JsonProperty("type") final String type) { [EOL]     this.bytes = bytes; [EOL]     this.type = type; [EOL] } <line_num>: 28,34
@JsonCreator [EOL] public Primitives(@JsonProperty("x") int x, @JsonProperty("d") double d, @JsonProperty("b") boolean b) { [EOL]     this.x = x; [EOL]     this.d = d; [EOL]     this.b = b; [EOL] } <line_num>: 52,60
@JsonCreator [EOL] public Test431Container(@JsonProperty("items") final List<Item431> i) { [EOL]     items = i; [EOL] } <line_num>: 66,69
@JsonCreator [EOL] public Item431(@JsonProperty("id") String id) { [EOL]     this.id = id; [EOL] } <line_num>: 76,79
@JsonCreator [EOL] public BeanFor438(@JsonProperty("name") String s) { [EOL]     throw new IllegalArgumentException("I don't like that name!"); [EOL] } <line_num>: 84,87
@JsonCreator [EOL] public MapBean(Map<String, Long> map) { [EOL]     this.map = map; [EOL] } <line_num>: 95,98
@JsonCreator [EOL] public BrokenCreatorBean(@JsonProperty("bar") String bar1, @JsonProperty("bar") String bar2) { [EOL]     bar = "" + bar1 + "/" + bar2; [EOL] } <line_num>: 106,109
public AutoDetectConstructorBean(@JsonProperty("bar") String bar, @JsonProperty("foo") String foo) { [EOL]     this.bar = bar; [EOL]     this.foo = foo; [EOL] } <line_num>: 118,121
@JsonCreator [EOL] BustedCtor(@JsonProperty("a") String value) { [EOL]     throw new IllegalArgumentException("foobar"); [EOL] } <line_num>: 125,128
@JsonIgnore [EOL] public IgnoredCtor(String arg) { [EOL]     throw new RuntimeException("Should never use this constructor"); [EOL] } <line_num>: 134,137
public IgnoredCtor() { [EOL] } <line_num>: 139,139
public AbstractBaseImpl(Map<String, Object> props) { [EOL]     this.props = props; [EOL] } <line_num>: 154,156
@JsonCreator [EOL] public Issue700Bean(@JsonProperty("item") String item) { [EOL] } <line_num>: 165,166
@Override [EOL] public byte[] deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException { [EOL]     String str = jp.getText(); [EOL]     return str.getBytes("UTF-8"); [EOL] } <line_num>: 39,43
@JsonCreator [EOL] public static AbstractBase create(Map<String, Object> props) { [EOL]     return new AbstractBaseImpl(props); [EOL] } <line_num>: 143,147
public String getItem() { [EOL]     return null; [EOL] } <line_num>: 168,168
public void testExceptionFromConstructor() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue("{}", BustedCtor.class); [EOL]         fail("Expected exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, ": foobar"); [EOL]         Throwable t = e.getCause(); [EOL]         assertNotNull(t); [EOL]         assertEquals(IllegalArgumentException.class, t.getClass()); [EOL]         assertEquals("foobar", t.getMessage()); [EOL]     } [EOL] } <line_num>: 180,193
public void testSimpleConstructor() throws Exception { [EOL]     HashTest test = MAPPER.readValue("{\"type\":\"custom\",\"bytes\":\"abc\" }", HashTest.class); [EOL]     assertEquals("custom", test.type); [EOL]     assertEquals("abc", new String(test.bytes, "UTF-8")); [EOL] } <line_num>: 195,200
public void testMissingPrimitives() throws Exception { [EOL]     Primitives p = MAPPER.readValue("{}", Primitives.class); [EOL]     assertFalse(p.b); [EOL]     assertEquals(0, p.x); [EOL]     assertEquals(0.0, p.d); [EOL] } <line_num>: 203,209
public void testJackson431() throws Exception { [EOL]     final Test431Container foo = MAPPER.readValue("{\"items\":\n" + "[{\"bar\": 0,\n" + "\"id\": \"id123\",\n" + "\"foo\": 1\n" + "}]}", Test431Container.class); [EOL]     assertNotNull(foo); [EOL] } <line_num>: 211,221
public void testJackson438() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue("{ \"name\":\"foobar\" }", BeanFor438.class); [EOL]         fail("Should have failed"); [EOL]     } catch (Exception e) { [EOL]         if (!(e instanceof JsonMappingException)) { [EOL]             fail("Should have received JsonMappingException, caught " + e.getClass().getName()); [EOL]         } [EOL]         verifyException(e, "don't like that name"); [EOL]         Throwable t = e.getCause(); [EOL]         assertNotNull(t); [EOL]         assertEquals(IllegalArgumentException.class, t.getClass()); [EOL]         verifyException(e, "don't like that name"); [EOL]     } [EOL] } <line_num>: 224,240
@SuppressWarnings("unchecked") [EOL] public void testIssue465() throws Exception { [EOL]     final String JSON = "{\"A\":12}"; [EOL]     Map<String, Long> map = MAPPER.readValue(JSON, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(12), map.get("A")); [EOL]     MapBean bean = MAPPER.readValue(JSON, MapBean.class); [EOL]     assertEquals(1, bean.map.size()); [EOL]     assertEquals(Long.valueOf(12L), bean.map.get("A")); [EOL]     final String EMPTY_JSON = "{}"; [EOL]     map = MAPPER.readValue(EMPTY_JSON, Map.class); [EOL]     assertEquals(0, map.size()); [EOL]     bean = MAPPER.readValue(EMPTY_JSON, MapBean.class); [EOL]     assertEquals(0, bean.map.size()); [EOL] } <line_num>: 242,264
public void testCreatorWithDupNames() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue("{\"bar\":\"x\"}", BrokenCreatorBean.class); [EOL]         fail("Should have caught duplicate creator parameters"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "duplicate creator property \"bar\""); [EOL]     } [EOL] } <line_num>: 266,274
public void testCreatorMultipleArgumentWithoutAnnotation() throws Exception { [EOL]     AutoDetectConstructorBean value = MAPPER.readValue("{\"bar\":\"bar\",\"foo\":\"foo\"}", AutoDetectConstructorBean.class); [EOL]     assertEquals("bar", value.bar); [EOL]     assertEquals("foo", value.foo); [EOL] } <line_num>: 276,280
public void testIgnoredSingleArgCtor() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("abc"), IgnoredCtor.class); [EOL]         fail("Should have caught missing constructor problem"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "no single-String constructor/factory method"); [EOL]     } [EOL] } <line_num>: 283,291
public void testAbstractFactory() throws Exception { [EOL]     AbstractBase bean = MAPPER.readValue("{\"a\":3}", AbstractBase.class); [EOL]     assertNotNull(bean); [EOL]     AbstractBaseImpl impl = (AbstractBaseImpl) bean; [EOL]     assertEquals(1, impl.props.size()); [EOL]     assertEquals(Integer.valueOf(3), impl.props.get("a")); [EOL] } <line_num>: 293,300
public void testCreatorProperties() throws Exception { [EOL]     Issue700Bean value = MAPPER.readValue("{ \"item\" : \"foo\" }", Issue700Bean.class); [EOL]     assertNotNull(value); [EOL] } <line_num>: 303,307
