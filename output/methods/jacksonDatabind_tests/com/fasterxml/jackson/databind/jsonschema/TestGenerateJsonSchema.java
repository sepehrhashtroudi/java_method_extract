public int getProperty1() { [EOL]     return property1; [EOL] } <line_num>: 37,40
public void setProperty1(int property1) { [EOL]     this.property1 = property1; [EOL] } <line_num>: 42,45
public String getProperty2() { [EOL]     return property2; [EOL] } <line_num>: 47,50
public void setProperty2(String property2) { [EOL]     this.property2 = property2; [EOL] } <line_num>: 52,55
public String[] getProperty3() { [EOL]     return property3; [EOL] } <line_num>: 57,60
public void setProperty3(String[] property3) { [EOL]     this.property3 = property3; [EOL] } <line_num>: 62,65
public Collection<Float> getProperty4() { [EOL]     return property4; [EOL] } <line_num>: 67,70
public void setProperty4(Collection<Float> property4) { [EOL]     this.property4 = property4; [EOL] } <line_num>: 72,75
public String getProperty5() { [EOL]     return property5; [EOL] } <line_num>: 77,80
public void setProperty5(String property5) { [EOL]     this.property5 = property5; [EOL] } <line_num>: 82,85
public void testGeneratingJsonSchema() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     assertNotNull(jsonSchema); [EOL]     assertTrue(jsonSchema.equals(jsonSchema)); [EOL]     assertFalse(jsonSchema.equals(null)); [EOL]     assertFalse(jsonSchema.equals("foo")); [EOL]     assertNotNull(jsonSchema.toString()); [EOL]     assertNotNull(JsonSchema.getDefaultSchemaNode()); [EOL]     ObjectNode root = jsonSchema.getSchemaNode(); [EOL]     assertEquals("object", root.get("type").asText()); [EOL]     assertEquals(false, root.path("required").booleanValue()); [EOL]     JsonNode propertiesSchema = root.get("properties"); [EOL]     assertNotNull(propertiesSchema); [EOL]     JsonNode property1Schema = propertiesSchema.get("property1"); [EOL]     assertNotNull(property1Schema); [EOL]     assertEquals("integer", property1Schema.get("type").asText()); [EOL]     assertEquals(false, property1Schema.path("required").booleanValue()); [EOL]     JsonNode property2Schema = propertiesSchema.get("property2"); [EOL]     assertNotNull(property2Schema); [EOL]     assertEquals("string", property2Schema.get("type").asText()); [EOL]     assertEquals(false, property2Schema.path("required").booleanValue()); [EOL]     JsonNode property3Schema = propertiesSchema.get("property3"); [EOL]     assertNotNull(property3Schema); [EOL]     assertEquals("array", property3Schema.get("type").asText()); [EOL]     assertEquals(false, property3Schema.path("required").booleanValue()); [EOL]     assertEquals("string", property3Schema.get("items").get("type").asText()); [EOL]     JsonNode property4Schema = propertiesSchema.get("property4"); [EOL]     assertNotNull(property4Schema); [EOL]     assertEquals("array", property4Schema.get("type").asText()); [EOL]     assertEquals(false, property4Schema.path("required").booleanValue()); [EOL]     assertEquals("number", property4Schema.get("items").get("type").asText()); [EOL] } <line_num>: 108,147
public String getSecret() { [EOL]     return secret; [EOL] } <line_num>: 158,158
public void setSecret(String s) { [EOL]     secret = s; [EOL] } <line_num>: 159,159
public String getObvious() { [EOL]     return obvious; [EOL] } <line_num>: 161,161
public void setObvious(String s) { [EOL]     obvious = s; [EOL] } <line_num>: 162,162
public void testGeneratingJsonSchemaWithFilters() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setFilters(secretFilterProvider); [EOL]     JsonSchema schema = mapper.generateJsonSchema(FilteredBean.class); [EOL]     JsonNode node = schema.getSchemaNode().get("properties"); [EOL]     assertTrue(node.has("obvious")); [EOL]     assertFalse(node.has("secret")); [EOL] } <line_num>: 168,175
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] } <line_num>: 181,192
public void testInvalidCall() throws Exception { [EOL]     try { [EOL]         MAPPER.generateJsonSchema(null); [EOL]         fail("Should have failed"); [EOL]     } catch (IllegalArgumentException iae) { [EOL]         verifyException(iae, "class must be provided"); [EOL]     } [EOL] } <line_num>: 194,204
public void testThatObjectsHaveNoItems() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(TrivialBean.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','properties':{'name':{'type':'string'}}}", json); [EOL] } <line_num>: 209,217
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] } <line_num>: 219,225
