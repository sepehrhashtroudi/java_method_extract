@Override [EOL] public void serialize(Bean value, JsonGenerator jgen, SerializerProvider provider) { [EOL]     throw new IllegalArgumentException("test string"); [EOL] } <line_num>: 34,38
public void testCatchAndRethrow() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test-exceptions", Version.unknownVersion()); [EOL]     module.addSerializer(Bean.class, new SerializerWithErrors()); [EOL]     mapper.registerModule(module); [EOL]     try { [EOL]         StringWriter sw = new StringWriter(); [EOL]         Bean[] b = { new Bean() }; [EOL]         List<Bean[]> l = new ArrayList<Bean[]>(); [EOL]         l.add(b); [EOL]         mapper.writeValue(sw, l); [EOL]         fail("Should have gotten an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "test string"); [EOL]         Throwable root = e.getCause(); [EOL]         assertNotNull(root); [EOL]         if (!(root instanceof IllegalArgumentException)) { [EOL]             fail("Wrapped exception not IAE, but " + root.getClass()); [EOL]         } [EOL]     } [EOL] } <line_num>: 51,78
public void testExceptionWithSimpleMapper() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         BrokenStringWriter sw = new BrokenStringWriter("TEST"); [EOL]         mapper.writeValue(sw, createLongObject()); [EOL]         fail("Should have gotten an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, IOException.class, "TEST"); [EOL]     } [EOL] } <line_num>: 84,95
public void testExceptionWithMapperAndGenerator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonFactory f = new MappingJsonFactory(); [EOL]     BrokenStringWriter sw = new BrokenStringWriter("TEST"); [EOL]     JsonGenerator jg = f.createGenerator(sw); [EOL]     try { [EOL]         mapper.writeValue(jg, createLongObject()); [EOL]         fail("Should have gotten an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, IOException.class, "TEST"); [EOL]     } [EOL] } <line_num>: 97,111
public void testExceptionWithGeneratorMapping() throws Exception { [EOL]     JsonFactory f = new MappingJsonFactory(); [EOL]     JsonGenerator jg = f.createGenerator(new BrokenStringWriter("TEST")); [EOL]     try { [EOL]         jg.writeObject(createLongObject()); [EOL]         fail("Should have gotten an exception"); [EOL]     } catch (Exception e) { [EOL]         verifyException(e, IOException.class, "TEST"); [EOL]     } [EOL] } <line_num>: 113,124
void verifyException(Exception e, Class<?> expType, String expMsg) throws Exception { [EOL]     if (e.getClass() != expType) { [EOL]         fail("Expected exception of type " + expType.getName() + ", got " + e.getClass().getName()); [EOL]     } [EOL]     if (expMsg != null) { [EOL]         verifyException(e, expMsg); [EOL]     } [EOL] } <line_num>: 132,141
Object createLongObject() { [EOL]     List<Object> leaf = new ArrayList<Object>(); [EOL]     for (int i = 0; i < 256; ++i) { [EOL]         leaf.add(Integer.valueOf(i)); [EOL]     } [EOL]     List<Object> root = new ArrayList<Object>(256); [EOL]     for (int i = 0; i < 256; ++i) { [EOL]         root.add(leaf); [EOL]     } [EOL]     return root; [EOL] } <line_num>: 143,154
