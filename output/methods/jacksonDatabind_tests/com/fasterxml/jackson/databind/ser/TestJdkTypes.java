public void testBigDecimal() throws Exception { [EOL]     Map<String, Object> map = new HashMap<String, Object>(); [EOL]     String PI_STR = "3.14159265"; [EOL]     map.put("pi", new BigDecimal(PI_STR)); [EOL]     String str = MAPPER.writeValueAsString(map); [EOL]     assertEquals("{\"pi\":3.14159265}", str); [EOL] } <line_num>: 24,32
public void testBigDecimalAsPlainString() throws Exception { [EOL]     MAPPER.enable(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN); [EOL]     Map<String, Object> map = new HashMap<String, Object>(); [EOL]     String PI_STR = "3.00000000"; [EOL]     map.put("pi", new BigDecimal(PI_STR)); [EOL]     String str = MAPPER.writeValueAsString(map); [EOL]     assertEquals("{\"pi\":3.00000000}", str); [EOL] } <line_num>: 34,43
public void testFile() throws IOException { [EOL]     File f = new File(new File("/tmp"), "foo.text"); [EOL]     String str = MAPPER.writeValueAsString(f); [EOL]     String escapedAbsPath = f.getAbsolutePath().replaceAll("\\\\", "\\\\\\\\"); [EOL]     assertEquals(quote(escapedAbsPath), str); [EOL] } <line_num>: 48,56
public void testRegexps() throws IOException { [EOL]     final String PATTERN_STR = "\\s+([a-b]+)\\w?"; [EOL]     Pattern p = Pattern.compile(PATTERN_STR); [EOL]     Map<String, Object> input = new HashMap<String, Object>(); [EOL]     input.put("p", p); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, input); [EOL]     assertEquals(p.pattern(), result.get("p")); [EOL] } <line_num>: 58,66
public void testCurrency() throws IOException { [EOL]     Currency usd = Currency.getInstance("USD"); [EOL]     assertEquals(quote("USD"), MAPPER.writeValueAsString(usd)); [EOL] } <line_num>: 68,72
public void testLocale() throws IOException { [EOL]     assertEquals(quote("en"), MAPPER.writeValueAsString(new Locale("en"))); [EOL]     assertEquals(quote("es_ES"), MAPPER.writeValueAsString(new Locale("es", "ES"))); [EOL]     assertEquals(quote("fi_FI_savo"), MAPPER.writeValueAsString(new Locale("FI", "fi", "savo"))); [EOL] } <line_num>: 74,79
public void testInetAddress() throws IOException { [EOL]     assertEquals(quote("127.0.0.1"), MAPPER.writeValueAsString(InetAddress.getByName("127.0.0.1"))); [EOL]     assertEquals(quote("ning.com"), MAPPER.writeValueAsString(InetAddress.getByName("ning.com"))); [EOL] } <line_num>: 82,86
public void testClass() throws IOException { [EOL]     assertEquals(quote("java.lang.String"), MAPPER.writeValueAsString(String.class)); [EOL]     assertEquals(quote("int"), MAPPER.writeValueAsString(Integer.TYPE)); [EOL]     assertEquals(quote("boolean"), MAPPER.writeValueAsString(Boolean.TYPE)); [EOL]     assertEquals(quote("void"), MAPPER.writeValueAsString(Void.TYPE)); [EOL] } <line_num>: 89,95
public void testCharset() throws IOException { [EOL]     assertEquals(quote("UTF-8"), MAPPER.writeValueAsString(Charset.forName("UTF-8"))); [EOL] } <line_num>: 98,101
