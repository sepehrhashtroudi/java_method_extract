public String getA() { [EOL]     return "a"; [EOL] } <line_num>: 30,30
protected String getB() { [EOL]     return "b"; [EOL] } <line_num>: 31,31
@SuppressWarnings("unused") [EOL] private String getC() { [EOL]     return "c"; [EOL] } <line_num>: 32,33
public void testDefaults() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals("{\"p1\":\"public\"}", m.writeValueAsString(new FieldBean())); [EOL]     assertEquals("{\"a\":\"a\"}", m.writeValueAsString(new MethodBean())); [EOL] } <line_num>: 45,53
public void testProtectedViaAnnotations() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new ProtFieldBean()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("public", result.get("p1")); [EOL]     assertEquals("protected", result.get("p2")); [EOL]     assertNull(result.get("p3")); [EOL]     result = writeAndMap(m, new ProtMethodBean()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals("b", result.get("b")); [EOL]     assertNull(result.get("c")); [EOL] } <line_num>: 55,70
public void testPrivateUsingGlobals() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     VisibilityChecker<?> vc = m.getVisibilityChecker(); [EOL]     vc = vc.withFieldVisibility(JsonAutoDetect.Visibility.ANY); [EOL]     m.setVisibilityChecker(vc); [EOL]     Map<String, Object> result = writeAndMap(m, new FieldBean()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("public", result.get("p1")); [EOL]     assertEquals("protected", result.get("p2")); [EOL]     assertEquals("private", result.get("p3")); [EOL]     m = new ObjectMapper(); [EOL]     vc = m.getVisibilityChecker(); [EOL]     vc = vc.withGetterVisibility(JsonAutoDetect.Visibility.ANY); [EOL]     m.setVisibilityChecker(vc); [EOL]     result = writeAndMap(m, new MethodBean()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("a", result.get("a")); [EOL]     assertEquals("b", result.get("b")); [EOL]     assertEquals("c", result.get("c")); [EOL] } <line_num>: 72,94
public void testBasicSetup() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     VisibilityChecker<?> vc = m.getVisibilityChecker(); [EOL]     vc = vc.with(JsonAutoDetect.Visibility.ANY); [EOL]     m.setVisibilityChecker(vc); [EOL]     Map<String, Object> result = writeAndMap(m, new FieldBean()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("public", result.get("p1")); [EOL]     assertEquals("protected", result.get("p2")); [EOL]     assertEquals("private", result.get("p3")); [EOL] } <line_num>: 97,109
public void testMapperShortcutMethods() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY); [EOL]     Map<String, Object> result = writeAndMap(m, new FieldBean()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("public", result.get("p1")); [EOL]     assertEquals("protected", result.get("p2")); [EOL]     assertEquals("private", result.get("p3")); [EOL] } <line_num>: 112,122
