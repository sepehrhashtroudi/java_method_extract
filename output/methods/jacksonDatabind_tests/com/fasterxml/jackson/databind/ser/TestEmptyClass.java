public NonZero(int i) { [EOL]     nr = i; [EOL] } <line_num>: 23,23
public NonZeroWrapper(int i) { [EOL]     value = new NonZero(i); [EOL] } <line_num>: 30,32
@Override [EOL] public void serialize(NonZero value, JsonGenerator jgen, SerializerProvider provider) throws IOException { [EOL]     jgen.writeNumber(value.nr); [EOL] } <line_num>: 37,41
@Override [EOL] public boolean isEmpty(NonZero value) { [EOL]     if (value == null) [EOL]         return true; [EOL]     return (value.nr == 0); [EOL] } <line_num>: 43,47
public void testEmptyWithAnnotations() throws Exception { [EOL]     try { [EOL]         serializeAsString(mapper, new Empty()); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "No serializer found for class"); [EOL]     } [EOL]     assertEquals("{}", serializeAsString(mapper, new EmptyWithAnno())); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.addMixInAnnotations(Empty.class, EmptyWithAnno.class); [EOL]     assertEquals("{}", m2.writeValueAsString(new Empty())); [EOL] } <line_num>: 62,78
public void testEmptyWithFeature() throws Exception { [EOL]     assertTrue(mapper.getSerializationConfig().isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS)); [EOL]     mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false); [EOL]     assertEquals("{}", serializeAsString(mapper, new Empty())); [EOL] } <line_num>: 84,90
public void testCustomNoEmpty() throws Exception { [EOL]     assertEquals("{\"value\":123}", mapper.writeValueAsString(new NonZeroWrapper(123))); [EOL]     assertEquals("{}", mapper.writeValueAsString(new NonZeroWrapper(0))); [EOL] } <line_num>: 93,99
