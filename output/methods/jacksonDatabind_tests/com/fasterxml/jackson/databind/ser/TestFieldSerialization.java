public OkDupFieldBean(int x, int y) { [EOL]     this.myX = x; [EOL]     this.y = y; [EOL] } <line_num>: 95,98
@JsonProperty("z") [EOL] public int getZ() { [EOL]     return z + 1; [EOL] } <line_num>: 110,110
public void testSimpleAutoDetect() throws Exception { [EOL]     SimpleFieldBean bean = new SimpleFieldBean(); [EOL]     bean.x = 13; [EOL]     Map<String, Object> result = writeAndMap(MAPPER, bean); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Integer.valueOf(13), result.get("x")); [EOL]     assertEquals(Integer.valueOf(0), result.get("y")); [EOL] } <line_num>: 121,130
@SuppressWarnings("unchecked") [EOL] public void testSimpleAnnotation() throws Exception { [EOL]     SimpleFieldBean2 bean = new SimpleFieldBean2(); [EOL]     bean.values = new String[] { "a", "b" }; [EOL]     Map<String, Object> result = writeAndMap(MAPPER, bean); [EOL]     assertEquals(1, result.size()); [EOL]     List<String> values = (List<String>) result.get("values"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("a", values.get(0)); [EOL]     assertEquals("b", values.get(1)); [EOL] } <line_num>: 132,143
public void testTransientAndStatic() throws Exception { [EOL]     TransientBean bean = new TransientBean(); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(0), result.get("a")); [EOL] } <line_num>: 145,151
public void testNoAutoDetect() throws Exception { [EOL]     NoAutoDetectBean bean = new NoAutoDetectBean(); [EOL]     bean._z = -4; [EOL]     Map<String, Object> result = writeAndMap(MAPPER, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(-4), result.get("z")); [EOL] } <line_num>: 153,160
public void testMethodPrecedence() throws Exception { [EOL]     FieldAndMethodBean bean = new FieldAndMethodBean(); [EOL]     bean.z = 9; [EOL]     assertEquals(10, bean.getZ()); [EOL]     assertEquals("{\"z\":10}", MAPPER.writeValueAsString(bean)); [EOL] } <line_num>: 167,173
public void testOkDupFields() throws Exception { [EOL]     OkDupFieldBean bean = new OkDupFieldBean(1, 2); [EOL]     Map<String, Object> json = writeAndMap(MAPPER, bean); [EOL]     assertEquals(2, json.size()); [EOL]     assertEquals(Integer.valueOf(1), json.get("x")); [EOL]     assertEquals(Integer.valueOf(2), json.get("y")); [EOL] } <line_num>: 179,186
public void testFailureDueToDups() throws Exception { [EOL]     try { [EOL]         writeAndMap(MAPPER, new DupFieldBean()); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Multiple fields representing"); [EOL]     } [EOL] } <line_num>: 194,201
public void testFailureDueToDupField() throws Exception { [EOL]     try { [EOL]         writeAndMap(MAPPER, new DupFieldBean2()); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Multiple fields representing"); [EOL]     } [EOL] } <line_num>: 203,210
