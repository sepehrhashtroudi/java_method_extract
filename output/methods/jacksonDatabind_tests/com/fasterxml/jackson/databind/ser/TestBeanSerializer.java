public ModuleImpl(BeanSerializerModifier modifier) { [EOL]     super("test", Version.unknownVersion()); [EOL]     this.modifier = modifier; [EOL] } <line_num>: 39,43
public RemovingModifier(String remove) { [EOL]     _removedProperty = remove; [EOL] } <line_num>: 65,65
public ReplacingModifier(JsonSerializer<?> s) { [EOL]     _serializer = s; [EOL] } <line_num>: 99,99
public BuilderModifier(JsonSerializer<?> ser) { [EOL]     _serializer = ser; [EOL] } <line_num>: 112,114
public BogusSerializerBuilder(BeanSerializerBuilder src, JsonSerializer<?> ser) { [EOL]     super(src); [EOL]     _serializer = ser; [EOL] } <line_num>: 127,131
public BogusBeanSerializer(int v) { [EOL]     _value = v; [EOL] } <line_num>: 143,143
@Override [EOL] public void setupModule(SetupContext context) { [EOL]     super.setupModule(context); [EOL]     if (modifier != null) { [EOL]         context.addBeanSerializerModifier(modifier); [EOL]     } [EOL] } <line_num>: 45,52
@Override [EOL] public List<BeanPropertyWriter> changeProperties(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyWriter> beanProperties) { [EOL]     Iterator<BeanPropertyWriter> it = beanProperties.iterator(); [EOL]     while (it.hasNext()) { [EOL]         BeanPropertyWriter bpw = it.next(); [EOL]         if (bpw.getName().equals(_removedProperty)) { [EOL]             it.remove(); [EOL]         } [EOL]     } [EOL]     return beanProperties; [EOL] } <line_num>: 67,79
@Override [EOL] public List<BeanPropertyWriter> orderProperties(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyWriter> beanProperties) { [EOL]     TreeMap<String, BeanPropertyWriter> props = new TreeMap<String, BeanPropertyWriter>(); [EOL]     for (BeanPropertyWriter bpw : beanProperties) { [EOL]         props.put(bpw.getName(), bpw); [EOL]     } [EOL]     return new ArrayList<BeanPropertyWriter>(props.values()); [EOL] } <line_num>: 84,92
@Override [EOL] public JsonSerializer<?> modifySerializer(SerializationConfig config, BeanDescription beanDesc, JsonSerializer<?> serializer) { [EOL]     return _serializer; [EOL] } <line_num>: 101,105
@Override [EOL] public BeanSerializerBuilder updateBuilder(SerializationConfig config, BeanDescription beanDesc, BeanSerializerBuilder builder) { [EOL]     return new BogusSerializerBuilder(builder, _serializer); [EOL] } <line_num>: 116,120
@Override [EOL] public JsonSerializer<?> build() { [EOL]     return _serializer; [EOL] } <line_num>: 133,136
@Override [EOL] public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException { [EOL]     jgen.writeNumber(_value); [EOL] } <line_num>: 145,149
@Override [EOL] public List<BeanPropertyWriter> changeProperties(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyWriter> beanProperties) { [EOL]     JavaType strType = config.constructType(String.class); [EOL]     POJOPropertyBuilder prop = new POJOPropertyBuilder("bogus", null, true); [EOL]     try { [EOL]         AnnotatedField f = new AnnotatedField(EmptyBean.class.getDeclaredField("name"), null); [EOL]         beanProperties.add(new BeanPropertyWriter(prop, f, null, strType, null, null, strType, false, null)); [EOL]     } catch (NoSuchFieldException e) { [EOL]         throw new IllegalStateException(e.getMessage()); [EOL]     } [EOL]     return beanProperties; [EOL] } <line_num>: 161,178
public int getX() { [EOL]     return 3; [EOL] } <line_num>: 184,184
public boolean isX() { [EOL]     return false; [EOL] } <line_num>: 185,185
@Override [EOL] public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException { [EOL]     jgen.writeNumber(123); [EOL] } <line_num>: 195,197
@Override [EOL] public JsonSerializer<?> modifyArraySerializer(SerializationConfig config, ArrayType valueType, BeanDescription beanDesc, JsonSerializer<?> serializer) { [EOL]     return new StdSerializer<Object>(Object.class) { [EOL]  [EOL]         @Override [EOL]         public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException { [EOL]             jgen.writeNumber(123); [EOL]         } [EOL]     }; [EOL] } <line_num>: 191,199
@Override [EOL] public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException { [EOL]     jgen.writeNumber(123); [EOL] } <line_num>: 207,209
@Override [EOL] public JsonSerializer<?> modifyCollectionSerializer(SerializationConfig config, CollectionType valueType, BeanDescription beanDesc, JsonSerializer<?> serializer) { [EOL]     return new StdSerializer<Object>(Object.class) { [EOL]  [EOL]         @Override [EOL]         public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException { [EOL]             jgen.writeNumber(123); [EOL]         } [EOL]     }; [EOL] } <line_num>: 203,211
@Override [EOL] public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException { [EOL]     jgen.writeNumber(123); [EOL] } <line_num>: 219,221
@Override [EOL] public JsonSerializer<?> modifyMapSerializer(SerializationConfig config, MapType valueType, BeanDescription beanDesc, JsonSerializer<?> serializer) { [EOL]     return new StdSerializer<Object>(Object.class) { [EOL]  [EOL]         @Override [EOL]         public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException { [EOL]             jgen.writeNumber(123); [EOL]         } [EOL]     }; [EOL] } <line_num>: 215,223
@Override [EOL] public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException { [EOL]     jgen.writeNumber(123); [EOL] } <line_num>: 231,233
@Override [EOL] public JsonSerializer<?> modifyEnumSerializer(SerializationConfig config, JavaType valueType, BeanDescription beanDesc, JsonSerializer<?> serializer) { [EOL]     return new StdSerializer<Object>(Object.class) { [EOL]  [EOL]         @Override [EOL]         public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException { [EOL]             jgen.writeNumber(123); [EOL]         } [EOL]     }; [EOL] } <line_num>: 227,235
@Override [EOL] public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException { [EOL]     jgen.writeFieldName("foo"); [EOL] } <line_num>: 243,245
@Override [EOL] public JsonSerializer<?> modifyKeySerializer(SerializationConfig config, JavaType valueType, BeanDescription beanDesc, JsonSerializer<?> serializer) { [EOL]     return new StdSerializer<Object>(Object.class) { [EOL]  [EOL]         @Override [EOL]         public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException { [EOL]             jgen.writeFieldName("foo"); [EOL]         } [EOL]     }; [EOL] } <line_num>: 239,247
public void testPropertyRemoval() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new RemovingModifier("a"))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writeValueAsString(bean)); [EOL] } <line_num>: 258,264
public void testPropertyReorder() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new ReorderingModifier())); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", mapper.writeValueAsString(bean)); [EOL] } <line_num>: 266,272
public void testBuilderReplacement() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new BuilderModifier(new BogusBeanSerializer(17)))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("17", mapper.writeValueAsString(bean)); [EOL] } <line_num>: 274,280
public void testSerializerReplacement() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new ReplacingModifier(new BogusBeanSerializer(123)))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("123", mapper.writeValueAsString(bean)); [EOL] } <line_num>: 281,287
@Override [EOL] public void setupModule(SetupContext context) { [EOL]     super.setupModule(context); [EOL]     context.addBeanSerializerModifier(new EmptyBeanModifier()); [EOL] } <line_num>: 294,299
public void testEmptyBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test", Version.unknownVersion()) { [EOL]  [EOL]         @Override [EOL]         public void setupModule(SetupContext context) { [EOL]             super.setupModule(context); [EOL]             context.addBeanSerializerModifier(new EmptyBeanModifier()); [EOL]         } [EOL]     }); [EOL]     String json = mapper.writeValueAsString(new EmptyBean()); [EOL]     assertEquals("{\"bogus\":\"foo\"}", json); [EOL] } <line_num>: 290,303
public void testModifyArraySerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new ArraySerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(new Integer[] { 1, 2 })); [EOL] } <line_num>: 307,313
public void testModifyCollectionSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new CollectionSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(new ArrayList<Integer>())); [EOL] } <line_num>: 315,321
public void testModifyMapSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new MapSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(new HashMap<String, String>())); [EOL] } <line_num>: 323,329
public void testModifyEnumSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new EnumSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(EnumABC.C)); [EOL] } <line_num>: 331,337
public void testModifyKeySerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new KeySerializerModifier())); [EOL]     Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]     map.put("x", 3); [EOL]     assertEquals("{\"foo\":3}", mapper.writeValueAsString(map)); [EOL] } <line_num>: 339,347
public void testFailWithDupProps() throws Exception { [EOL]     BeanWithConflict bean = new BeanWithConflict(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         String json = mapper.writeValueAsString(bean); [EOL]         fail("Should have failed due to conflicting accessor definitions; got JSON = " + json); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "Conflicting getter definitions"); [EOL]     } [EOL] } <line_num>: 356,366
