public int getX() { [EOL]     return 3; [EOL] } <line_num>: 27,27
@JsonAnyGetter [EOL] public Map<String, Boolean> getExtra() { [EOL]     return extra; [EOL] } <line_num>: 29,30
@JsonAnyGetter [EOL] public Map<String, Integer> any() { [EOL]     HashMap<String, Integer> map = new HashMap<String, Integer>(); [EOL]     map.put("a", 3); [EOL]     return map; [EOL] } <line_num>: 35,40
public void testSimpleJsonValue() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json = serializeAsString(m, new Bean()); [EOL]     Map<?, ?> map = m.readValue(json, Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals(Integer.valueOf(3), map.get("x")); [EOL]     assertEquals(Boolean.TRUE, map.get("a")); [EOL] } <line_num>: 49,57
public void testAnyOnly() throws Exception { [EOL]     ObjectMapper m; [EOL]     m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, true); [EOL]     String json = serializeAsString(m, new AnyOnlyBean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false); [EOL]     json = serializeAsString(m, new AnyOnlyBean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL] } <line_num>: 60,75
