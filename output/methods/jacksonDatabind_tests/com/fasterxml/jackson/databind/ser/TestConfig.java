public int getX() { [EOL]     return 1; [EOL] } <line_num>: 31,31
@JsonProperty("y") [EOL] private int getY() { [EOL]     return 2; [EOL] } <line_num>: 32,33
public void testEnumIndexes() { [EOL]     int max = 0; [EOL]     for (SerializationFeature f : SerializationFeature.values()) { [EOL]         max = Math.max(max, f.ordinal()); [EOL]     } [EOL]     if (max >= 31) { [EOL]         fail("Max number of SerializationFeature enums reached: " + max); [EOL]     } [EOL] } <line_num>: 56,66
public void testDefaults() { [EOL]     SerializationConfig cfg = MAPPER.getSerializationConfig(); [EOL]     assertTrue(cfg.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     assertTrue(cfg.isEnabled(MapperFeature.AUTO_DETECT_GETTERS)); [EOL]     assertTrue(cfg.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)); [EOL]     assertTrue(cfg.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)); [EOL]     assertFalse(cfg.isEnabled(SerializationFeature.INDENT_OUTPUT)); [EOL]     assertFalse(cfg.isEnabled(MapperFeature.USE_STATIC_TYPING)); [EOL]     assertTrue(cfg.isEnabled(MapperFeature.AUTO_DETECT_IS_GETTERS)); [EOL]     assertTrue(cfg.isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS)); [EOL]     assertTrue(cfg.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)); [EOL] } <line_num>: 68,90
public void testOverrideIntrospectors() { [EOL]     SerializationConfig cfg = MAPPER.getSerializationConfig(); [EOL]     cfg = cfg.with((ClassIntrospector) null); [EOL]     cfg = cfg.with((AnnotationIntrospector) null); [EOL]     assertNull(cfg.getAnnotationIntrospector()); [EOL] } <line_num>: 92,99
public void testMisc() { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.setDateFormat(null); [EOL]     assertNotNull(m.getSerializationConfig().toString()); [EOL] } <line_num>: 101,106
public void testIndentation() throws Exception { [EOL]     Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]     map.put("a", Integer.valueOf(2)); [EOL]     String result = MAPPER.writer().with(SerializationFeature.INDENT_OUTPUT).writeValueAsString(map); [EOL]     String lf = getLF(); [EOL]     assertEquals("{" + lf + "  \"a\" : 2" + lf + "}", result); [EOL] } <line_num>: 108,117
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] } <line_num>: 119,130
public void testProviderConfig() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     DefaultSerializerProvider prov = (DefaultSerializerProvider) mapper.getSerializerProvider(); [EOL]     assertEquals(0, prov.cachedSerializersCount()); [EOL]     Map<String, Object> result = this.writeAndMap(mapper, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Integer.valueOf(1), result.get("x")); [EOL]     assertEquals(Integer.valueOf(2), result.get("y")); [EOL]     int count = prov.cachedSerializersCount(); [EOL]     if (count < 2) { [EOL]         fail("Should have at least 2 cached serializers, got " + count); [EOL]     } [EOL]     prov.flushCachedSerializers(); [EOL]     assertEquals(0, prov.cachedSerializersCount()); [EOL] } <line_num>: 135,158
public void testIndentWithPassedGenerator() throws Exception { [EOL]     Indentable input = new Indentable(); [EOL]     assertEquals("{\"a\":3}", MAPPER.writeValueAsString(input)); [EOL]     String LF = getLF(); [EOL]     String INDENTED = "{" + LF + "  \"a\" : 3" + LF + "}"; [EOL]     final ObjectWriter indentWriter = MAPPER.writer().with(SerializationFeature.INDENT_OUTPUT); [EOL]     assertEquals(INDENTED, indentWriter.writeValueAsString(input)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jgen = MAPPER.getFactory().createGenerator(sw); [EOL]     indentWriter.writeValue(jgen, input); [EOL]     jgen.close(); [EOL]     assertEquals(INDENTED, sw.toString()); [EOL]     sw = new StringWriter(); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     jgen = m2.getFactory().createGenerator(sw); [EOL]     m2.writeValue(jgen, input); [EOL]     jgen.close(); [EOL]     assertEquals(INDENTED, sw.toString()); [EOL] } <line_num>: 161,185
public void testNoAccessOverrides() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.disable(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS); [EOL]     assertEquals("{\"x\":1}", m.writeValueAsString(new SimpleBean())); [EOL] } <line_num>: 187,192
private final static String getLF() { [EOL]     return System.getProperty("line.separator"); [EOL] } <line_num>: 194,196
