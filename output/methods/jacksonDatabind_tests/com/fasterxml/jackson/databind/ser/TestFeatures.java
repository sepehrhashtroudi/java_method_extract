public StringListBean(Collection<String> v) { [EOL]     values = v; [EOL] } <line_num>: 87,87
@JsonProperty("x") [EOL] public int getX() { [EOL]     return -2; [EOL] } <line_num>: 31,31
public int getY() { [EOL]     return 1; [EOL] } <line_num>: 32,32
@JsonProperty("x") [EOL] public int getX() { [EOL]     return -2; [EOL] } <line_num>: 41,41
public int getY() { [EOL]     return 1; [EOL] } <line_num>: 42,42
@JsonProperty("x") [EOL] public int getX() { [EOL]     return -2; [EOL] } <line_num>: 51,51
public int getY() { [EOL]     return 1; [EOL] } <line_num>: 52,52
public boolean isOk() { [EOL]     return true; [EOL] } <line_num>: 55,55
public int getY() { [EOL]     return 1; [EOL] } <line_num>: 65,65
public boolean isOk() { [EOL]     return true; [EOL] } <line_num>: 68,68
@Override [EOL] public void close() throws IOException { [EOL]     wasClosed = true; [EOL] } <line_num>: 77,80
public void testGlobalAutoDetection() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new GetterClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Integer.valueOf(-2), result.get("x")); [EOL]     assertEquals(Integer.valueOf(1), result.get("y")); [EOL]     m = new ObjectMapper(); [EOL]     m.configure(MapperFeature.AUTO_DETECT_GETTERS, false); [EOL]     result = writeAndMap(m, new GetterClass()); [EOL]     assertEquals(1, result.size()); [EOL]     assertTrue(result.containsKey("x")); [EOL] } <line_num>: 96,112
public void testPerClassAutoDetection() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new DisabledGetterClass()); [EOL]     assertEquals(1, result.size()); [EOL]     assertTrue(result.containsKey("x")); [EOL]     m.configure(MapperFeature.AUTO_DETECT_GETTERS, false); [EOL]     result = writeAndMap(m, new EnabledGetterClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey("x")); [EOL]     assertTrue(result.containsKey("y")); [EOL] } <line_num>: 114,128
public void testPerClassAutoDetectionForIsGetter() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(MapperFeature.AUTO_DETECT_GETTERS, true); [EOL]     m.configure(MapperFeature.AUTO_DETECT_IS_GETTERS, false); [EOL]     Map<String, Object> result = writeAndMap(m, new EnabledIsGetterClass()); [EOL]     assertEquals(1, result.size()); [EOL]     assertTrue(result.containsKey("ok")); [EOL]     assertEquals(Boolean.TRUE, result.get("ok")); [EOL] } <line_num>: 130,140
public void testConfigChainability() { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(MapperFeature.AUTO_DETECT_SETTERS)); [EOL]     assertTrue(m.isEnabled(MapperFeature.AUTO_DETECT_GETTERS)); [EOL]     m.configure(MapperFeature.AUTO_DETECT_SETTERS, false).configure(MapperFeature.AUTO_DETECT_GETTERS, false); [EOL]     assertFalse(m.isEnabled(MapperFeature.AUTO_DETECT_SETTERS)); [EOL]     assertFalse(m.isEnabled(MapperFeature.AUTO_DETECT_GETTERS)); [EOL] } <line_num>: 143,152
public void testCloseCloseable() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     CloseableBean bean = new CloseableBean(); [EOL]     m.writeValueAsString(bean); [EOL]     assertFalse(bean.wasClosed); [EOL]     m.configure(SerializationFeature.CLOSE_CLOSEABLE, true); [EOL]     bean = new CloseableBean(); [EOL]     m.writeValueAsString(bean); [EOL]     assertTrue(bean.wasClosed); [EOL]     bean = new CloseableBean(); [EOL]     m.writerWithType(CloseableBean.class).writeValueAsString(bean); [EOL]     assertTrue(bean.wasClosed); [EOL] } <line_num>: 155,173
public void testCharArrays() throws IOException { [EOL]     char[] chars = new char[] { 'a', 'b', 'c' }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals(quote("abc"), m.writeValueAsString(chars)); [EOL]     m.configure(SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS, true); [EOL]     assertEquals("[\"a\",\"b\",\"c\"]", m.writeValueAsString(chars)); [EOL] } <line_num>: 176,186
public void testFlushingAutomatic() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertTrue(mapper.getSerializationConfig().isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jgen = mapper.getFactory().createGenerator(sw); [EOL]     mapper.writeValue(jgen, Integer.valueOf(13)); [EOL]     assertEquals("13", sw.toString()); [EOL]     jgen.close(); [EOL]     sw = new StringWriter(); [EOL]     jgen = mapper.getFactory().createGenerator(sw); [EOL]     ObjectWriter ow = mapper.writer(); [EOL]     ow.writeValue(jgen, Integer.valueOf(99)); [EOL]     assertEquals("99", sw.toString()); [EOL]     jgen.close(); [EOL] } <line_num>: 189,207
public void testFlushingNotAutomatic() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.FLUSH_AFTER_WRITE_VALUE, false); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jgen = mapper.getFactory().createGenerator(sw); [EOL]     mapper.writeValue(jgen, Integer.valueOf(13)); [EOL]     assertEquals("", sw.toString()); [EOL]     jgen.flush(); [EOL]     assertEquals("13", sw.toString()); [EOL]     jgen.close(); [EOL]     sw = new StringWriter(); [EOL]     jgen = mapper.getFactory().createGenerator(sw); [EOL]     ObjectWriter ow = mapper.writer(); [EOL]     ow.writeValue(jgen, Integer.valueOf(99)); [EOL]     assertEquals("", sw.toString()); [EOL]     jgen.flush(); [EOL]     assertEquals("99", sw.toString()); [EOL]     jgen.close(); [EOL] } <line_num>: 210,235
public void testSingleElementCollections() throws IOException { [EOL]     final ObjectWriter writer = objectWriter().with(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     ArrayList<String> strs = new ArrayList<String>(); [EOL]     strs.add("xyz"); [EOL]     assertEquals(quote("xyz"), writer.writeValueAsString(strs)); [EOL]     ArrayList<Integer> ints = new ArrayList<Integer>(); [EOL]     ints.add(13); [EOL]     assertEquals("13", writer.writeValueAsString(ints)); [EOL]     HashSet<Long> longs = new HashSet<Long>(); [EOL]     longs.add(42L); [EOL]     assertEquals("42", writer.writeValueAsString(longs)); [EOL]     final String EXP_STRINGS = "{\"values\":\"foo\"}"; [EOL]     assertEquals(EXP_STRINGS, writer.writeValueAsString(new StringListBean(Collections.singletonList("foo")))); [EOL]     final Set<String> SET = new HashSet<String>(); [EOL]     SET.add("foo"); [EOL]     assertEquals(EXP_STRINGS, writer.writeValueAsString(new StringListBean(SET))); [EOL]     assertEquals("true", writer.writeValueAsString(new boolean[] { true })); [EOL]     assertEquals("true", writer.writeValueAsString(new Boolean[] { Boolean.TRUE })); [EOL]     assertEquals("3", writer.writeValueAsString(new int[] { 3 })); [EOL]     assertEquals(quote("foo"), writer.writeValueAsString(new String[] { "foo" })); [EOL] } <line_num>: 238,268
