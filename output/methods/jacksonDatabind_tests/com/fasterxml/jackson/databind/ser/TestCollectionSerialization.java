public CollectionBean(Collection<Object> c) { [EOL]     values = c; [EOL] } <line_num>: 29,29
public EnumMapBean(EnumMap<Key, String> m) { [EOL]     _map = m; [EOL] } <line_num>: 36,39
public IterableWrapper(int[] values) { [EOL]     for (int i : values) { [EOL]         _ints.add(Integer.valueOf(i)); [EOL]     } [EOL] } <line_num>: 49,53
public PseudoList(String... values) { [EOL]     super(Arrays.asList(values)); [EOL] } <line_num>: 68,70
public IntIterator(int first, int last) { [EOL]     i = first; [EOL]     this.last = last; [EOL] } <line_num>: 117,120
public EnumMap<Key, String> getMap() { [EOL]     return _map; [EOL] } <line_num>: 41,41
@Override [EOL] public Iterator<Integer> iterator() { [EOL]     return _ints.iterator(); [EOL] } <line_num>: 55,58
@Override [EOL] public void serialize(List<String> value, JsonGenerator jgen, SerializerProvider provider) throws IOException { [EOL]     jgen.writeString(value.toString()); [EOL] } <line_num>: 75,83
public Iterable<String> getValues() { [EOL]     return values; [EOL] } <line_num>: 102,102
@Override [EOL] public Iterator<Integer> iterator() { [EOL]     return new IntIterator(1, 3); [EOL] } <line_num>: 107,110
@Override [EOL] public boolean hasNext() { [EOL]     return i <= last; [EOL] } <line_num>: 122,125
@Override [EOL] public Integer next() { [EOL]     return i++; [EOL] } <line_num>: 127,130
@Override [EOL] public void remove() { [EOL] } <line_num>: 132,133
public int getX() { [EOL]     return 13; [EOL] } <line_num>: 135,135
public void testCollections() throws IOException { [EOL]     final int entryLen = 98; [EOL]     for (int type = 0; type < 4; ++type) { [EOL]         Object value; [EOL]         if (type == 0) { [EOL]             int[] ints = new int[entryLen]; [EOL]             for (int i = 0; i < entryLen; ++i) { [EOL]                 ints[i] = Integer.valueOf(i); [EOL]             } [EOL]             value = ints; [EOL]         } else { [EOL]             Collection<Integer> c; [EOL]             switch(type) { [EOL]                 case 1: [EOL]                     c = new LinkedList<Integer>(); [EOL]                     break; [EOL]                 case 2: [EOL]                     c = new TreeSet<Integer>(); [EOL]                     break; [EOL]                 default: [EOL]                     c = new ArrayList<Integer>(); [EOL]                     break; [EOL]             } [EOL]             for (int i = 0; i < entryLen; ++i) { [EOL]                 c.add(Integer.valueOf(i)); [EOL]             } [EOL]             value = c; [EOL]         } [EOL]         String json = MAPPER.writeValueAsString(value); [EOL]         JsonParser jp = new JsonFactory().createParser(json); [EOL]         assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]         for (int i = 0; i < entryLen; ++i) { [EOL]             assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]             assertEquals(i, jp.getIntValue()); [EOL]         } [EOL]         assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     } [EOL] } <line_num>: 146,191
public void testBigCollection() throws IOException { [EOL]     final int COUNT = 9999; [EOL]     ArrayList<Integer> value = new ArrayList<Integer>(); [EOL]     for (int i = 0; i <= COUNT; ++i) { [EOL]         value.add(i); [EOL]     } [EOL]     for (int mode = 0; mode < 3; ++mode) { [EOL]         JsonParser jp = null; [EOL]         switch(mode) { [EOL]             case 0: [EOL]                 { [EOL]                     byte[] data = MAPPER.writeValueAsBytes(value); [EOL]                     jp = new JsonFactory().createParser(data); [EOL]                 } [EOL]                 break; [EOL]             case 1: [EOL]                 { [EOL]                     StringWriter sw = new StringWriter(value.size()); [EOL]                     MAPPER.writeValue(sw, value); [EOL]                     jp = createParserUsingReader(sw.toString()); [EOL]                 } [EOL]                 break; [EOL]             case 2: [EOL]                 { [EOL]                     String str = MAPPER.writeValueAsString(value); [EOL]                     jp = createParserUsingReader(str); [EOL]                 } [EOL]                 break; [EOL]         } [EOL]         assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]         for (int i = 0; i <= COUNT; ++i) { [EOL]             assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]             assertEquals(i, jp.getIntValue()); [EOL]         } [EOL]         assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]         jp.close(); [EOL]     } [EOL] } <line_num>: 193,235
public void testEnumMap() throws IOException { [EOL]     EnumMap<Key, String> map = new EnumMap<Key, String>(Key.class); [EOL]     map.put(Key.B, "xyz"); [EOL]     map.put(Key.C, "abc"); [EOL]     String json = MAPPER.writeValueAsString(map); [EOL]     assertEquals("{\"B\":\"xyz\",\"C\":\"abc\"}", json.trim()); [EOL] } <line_num>: 237,246
public void testIterator() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ArrayList<Integer> l = new ArrayList<Integer>(); [EOL]     l.add(1); [EOL]     l.add(-9); [EOL]     l.add(0); [EOL]     MAPPER.writeValue(sw, l.iterator()); [EOL]     assertEquals("[1,-9,0]", sw.toString().trim()); [EOL] } <line_num>: 248,258
public void testIterable() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 })); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] } <line_num>: 260,266
@SuppressWarnings("unchecked") [EOL] public void testEmptyBeanCollection() throws IOException { [EOL]     Collection<Object> x = new ArrayList<Object>(); [EOL]     x.add("foobar"); [EOL]     CollectionBean cb = new CollectionBean(x); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, cb); [EOL]     assertEquals(1, result.size()); [EOL]     assertTrue(result.containsKey("values")); [EOL]     Collection<Object> x2 = (Collection<Object>) result.get("values"); [EOL]     assertNotNull(x2); [EOL]     assertEquals(x, x2); [EOL] } <line_num>: 270,283
public void testNullBeanCollection() throws IOException { [EOL]     CollectionBean cb = new CollectionBean(null); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, cb); [EOL]     assertEquals(1, result.size()); [EOL]     assertTrue(result.containsKey("values")); [EOL]     assertNull(result.get("values")); [EOL] } <line_num>: 285,293
@SuppressWarnings("unchecked") [EOL] public void testEmptyBeanEnumMap() throws IOException { [EOL]     EnumMap<Key, String> map = new EnumMap<Key, String>(Key.class); [EOL]     EnumMapBean b = new EnumMapBean(map); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, b); [EOL]     assertEquals(1, result.size()); [EOL]     assertTrue(result.containsKey("map")); [EOL]     Map<Object, Object> map2 = (Map<Object, Object>) result.get("map"); [EOL]     assertNotNull(map2); [EOL]     assertEquals(0, map2.size()); [EOL] } <line_num>: 295,309
public void testNullBeanEnumMap() throws IOException { [EOL]     EnumMapBean b = new EnumMapBean(null); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, b); [EOL]     assertEquals(1, result.size()); [EOL]     assertTrue(result.containsKey("map")); [EOL]     assertNull(result.get("map")); [EOL] } <line_num>: 312,321
public void testListSerializer() throws IOException { [EOL]     assertEquals("\"[ab, cd, ef]\"", MAPPER.writeValueAsString(new PseudoList("ab", "cd", "ef"))); [EOL] } <line_num>: 324,328
public void testEmptyListOrArray() throws IOException { [EOL]     EmptyListBean list = new EmptyListBean(); [EOL]     EmptyArrayBean array = new EmptyArrayBean(); [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(list)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(array)); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS, false); [EOL]     assertEquals("{}", m.writeValueAsString(list)); [EOL]     assertEquals("{}", m.writeValueAsString(array)); [EOL] } <line_num>: 331,345
public void testWithIterable() throws IOException { [EOL]     assertEquals("{\"values\":[\"value\"]}", MAPPER.writeValueAsString(new BeanWithIterable())); [EOL]     assertEquals("[1,2,3]", MAPPER.writeValueAsString(new IntIterable())); [EOL] } <line_num>: 348,356
