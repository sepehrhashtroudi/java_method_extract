public Foo294() { [EOL] } <line_num>: 97,97
public Foo294(String id, String id2) { [EOL]     this.id = id; [EOL]     bar = new Bar294(id2); [EOL] } <line_num>: 98,101
public Bar294() { [EOL] } <line_num>: 108,108
public Bar294(String id) { [EOL]     this.id = id; [EOL] } <line_num>: 109,111
public int getX(); <line_num>: 26,26
@Override [EOL] public int getX() { [EOL]     return 3; [EOL] } <line_num>: 32,33
public int getY() { [EOL]     return 5; [EOL] } <line_num>: 34,34
@JsonSerialize(as = ValueInterface.class) [EOL] public ValueClass getValue() { [EOL]     return new ValueClass(); [EOL] } <line_num>: 43,46
public ValueInterface getValue() { [EOL]     return new ValueClass(); [EOL] } <line_num>: 53,55
@JsonSerialize(typing = JsonSerialize.Typing.STATIC) [EOL] public ValueInterface getStaticValue() { [EOL]     return new ValueClass(); [EOL] } <line_num>: 60,63
@JsonSerialize(typing = JsonSerialize.Typing.DYNAMIC) [EOL] public ValueInterface getDynamicValue() { [EOL]     return new ValueClass(); [EOL] } <line_num>: 65,68
@JsonSerialize(as = String.class) [EOL] public Long getValue() { [EOL]     return Long.valueOf(4L); [EOL] } <line_num>: 77,80
public String getId() { [EOL]     return id; [EOL] } <line_num>: 113,113
public String getName() { [EOL]     return name; [EOL] } <line_num>: 114,114
@Override [EOL] public void serialize(Bar294 bar, JsonGenerator jgen, SerializerProvider provider) throws IOException { [EOL]     jgen.writeString(bar.id); [EOL] } <line_num>: 119,124
@SuppressWarnings("unchecked") [EOL] public void testSimpleValueDefinition() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new WrapperClassForAs()); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.get("value"); [EOL]     result = (Map<String, Object>) ob; [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(3), result.get("x")); [EOL] } <line_num>: 133,144
public void testBrokenAnnotation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     try { [EOL]         serializeAsString(m, new BrokenClass()); [EOL]     } catch (Exception e) { [EOL]         verifyException(e, "not a super-type of"); [EOL]     } [EOL] } <line_num>: 146,154
@SuppressWarnings("unchecked") [EOL] public void testStaticTypingForClass() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new WrapperClassForStaticTyping()); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.get("value"); [EOL]     result = (Map<String, Object>) ob; [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(3), result.get("x")); [EOL] } <line_num>: 156,167
@SuppressWarnings("unchecked") [EOL] public void testMixedTypingForClass() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new WrapperClassForStaticTyping2()); [EOL]     assertEquals(2, result.size()); [EOL]     Object obStatic = result.get("staticValue"); [EOL]     Map<String, Object> stat = (Map<String, Object>) obStatic; [EOL]     assertEquals(1, stat.size()); [EOL]     assertEquals(Integer.valueOf(3), stat.get("x")); [EOL]     Object obDynamic = result.get("dynamicValue"); [EOL]     Map<String, Object> dyn = (Map<String, Object>) obDynamic; [EOL]     assertEquals(2, dyn.size()); [EOL]     assertEquals(Integer.valueOf(3), dyn.get("x")); [EOL]     assertEquals(Integer.valueOf(5), dyn.get("y")); [EOL] } <line_num>: 169,188
public void testStaticTypingWithMap() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(MapperFeature.USE_STATIC_TYPING, true); [EOL]     ValueMap map = new ValueMap(); [EOL]     map.put("a", new ValueClass()); [EOL]     assertEquals("{\"a\":{\"x\":3}}", serializeAsString(m, map)); [EOL] } <line_num>: 190,197
public void testStaticTypingWithArrayList() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(MapperFeature.USE_STATIC_TYPING, true); [EOL]     ValueList list = new ValueList(); [EOL]     list.add(new ValueClass()); [EOL]     assertEquals("[{\"x\":3}]", m.writeValueAsString(list)); [EOL] } <line_num>: 199,206
public void testStaticTypingWithLinkedList() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(MapperFeature.USE_STATIC_TYPING, true); [EOL]     ValueLinkedList list = new ValueLinkedList(); [EOL]     list.add(new ValueClass()); [EOL]     assertEquals("[{\"x\":3}]", serializeAsString(m, list)); [EOL] } <line_num>: 208,215
public void testStaticTypingWithArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(MapperFeature.USE_STATIC_TYPING, true); [EOL]     ValueInterface[] array = new ValueInterface[] { new ValueClass() }; [EOL]     assertEquals("[{\"x\":3}]", serializeAsString(m, array)); [EOL] } <line_num>: 217,223
public void testProblem294() throws Exception { [EOL]     assertEquals("{\"id\":\"fooId\",\"bar\":\"barId\"}", new ObjectMapper().writeValueAsString(new Foo294("fooId", "barId"))); [EOL] } <line_num>: 225,229
