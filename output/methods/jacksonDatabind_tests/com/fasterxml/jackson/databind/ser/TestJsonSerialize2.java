public SimpleKey(String str) { [EOL]     key = str; [EOL] } <line_num>: 23,23
public SimpleValue(String str) { [EOL]     value = str; [EOL] } <line_num>: 31,31
public ActualValue(String str) { [EOL]     super(str); [EOL] } <line_num>: 39,39
public ListWrapperSimple(String value) { [EOL]     values.add(new ActualValue(value)); [EOL] } <line_num>: 75,77
public ListWrapperWithSerializer(String value) { [EOL]     values.add(new ActualValue(value)); [EOL] } <line_num>: 85,87
public MapWrapperSimple(String key, String value) { [EOL]     values.put(new SimpleKey(key), new ActualValue(value)); [EOL] } <line_num>: 95,97
public MapWrapperWithSerializer(String key, String value) { [EOL]     values.put(new SimpleKey(key), new ActualValue(value)); [EOL] } <line_num>: 105,107
@Override [EOL] public String toString() { [EOL]     return "toString:" + key; [EOL] } <line_num>: 25,25
@Override [EOL] public void serialize(SimpleKey key, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]     jgen.writeFieldName("key " + key.key); [EOL] } <line_num>: 43,47
@Override [EOL] public void serialize(SimpleValue value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]     jgen.writeString("value " + value.value); [EOL] } <line_num>: 51,55
public void testSerializedAsListWithClassAnnotations() throws IOException { [EOL]     SimpleValueList list = new SimpleValueList(); [EOL]     list.add(new ActualValue("foo")); [EOL]     assertEquals("[{\"value\":\"foo\"}]", MAPPER.writeValueAsString(list)); [EOL] } <line_num>: 125,130
public void testSerializedAsMapWithClassAnnotations() throws IOException { [EOL]     SimpleValueMap map = new SimpleValueMap(); [EOL]     map.put(new SimpleKey("x"), new ActualValue("y")); [EOL]     assertEquals("{\"toString:x\":{\"value\":\"y\"}}", MAPPER.writeValueAsString(map)); [EOL] } <line_num>: 133,138
public void testSerializedAsListWithClassSerializer() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     SimpleValueListWithSerializer list = new SimpleValueListWithSerializer(); [EOL]     list.add(new ActualValue("foo")); [EOL]     assertEquals("[\"value foo\"]", m.writeValueAsString(list)); [EOL] } <line_num>: 141,147
public void testSerializedAsListWithPropertyAnnotations() throws IOException { [EOL]     ListWrapperSimple input = new ListWrapperSimple("bar"); [EOL]     assertEquals("{\"values\":[{\"value\":\"bar\"}]}", MAPPER.writeValueAsString(input)); [EOL] } <line_num>: 150,154
public void testSerializedAsMapWithClassSerializer() throws IOException { [EOL]     SimpleValueMapWithSerializer map = new SimpleValueMapWithSerializer(); [EOL]     map.put(new SimpleKey("abc"), new ActualValue("123")); [EOL]     assertEquals("{\"key abc\":\"value 123\"}", MAPPER.writeValueAsString(map)); [EOL] } <line_num>: 157,162
public void testSerializedAsMapWithPropertyAnnotations() throws IOException { [EOL]     MapWrapperSimple input = new MapWrapperSimple("a", "b"); [EOL]     assertEquals("{\"values\":{\"toString:a\":{\"value\":\"b\"}}}", MAPPER.writeValueAsString(input)); [EOL] } <line_num>: 165,170
public void testSerializedAsListWithPropertyAnnotations2() throws IOException { [EOL]     ListWrapperWithSerializer input = new ListWrapperWithSerializer("abc"); [EOL]     assertEquals("{\"values\":[\"value abc\"]}", MAPPER.writeValueAsString(input)); [EOL] } <line_num>: 172,176
public void testSerializedAsMapWithPropertyAnnotations2() throws IOException { [EOL]     MapWrapperWithSerializer input = new MapWrapperWithSerializer("foo", "b"); [EOL]     assertEquals("{\"values\":{\"key foo\":\"value b\"}}", MAPPER.writeValueAsString(input)); [EOL] } <line_num>: 178,182
public void testEmptyInclusion() throws IOException { [EOL]     ObjectMapper defMapper = MAPPER; [EOL]     ObjectMapper inclMapper = new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_EMPTY); [EOL]     StringWrapper str = new StringWrapper(""); [EOL]     assertEquals("{\"str\":\"\"}", defMapper.writeValueAsString(str)); [EOL]     assertEquals("{}", inclMapper.writeValueAsString(str)); [EOL]     assertEquals("{}", inclMapper.writeValueAsString(new StringWrapper())); [EOL]     ListWrapper<String> list = new ListWrapper<String>(); [EOL]     assertEquals("{\"list\":[]}", defMapper.writeValueAsString(list)); [EOL]     assertEquals("{}", inclMapper.writeValueAsString(list)); [EOL]     assertEquals("{}", inclMapper.writeValueAsString(new ListWrapper<String>())); [EOL]     MapWrapper<String, Integer> map = new MapWrapper<String, Integer>(new HashMap<String, Integer>()); [EOL]     assertEquals("{\"map\":{}}", defMapper.writeValueAsString(map)); [EOL]     assertEquals("{}", inclMapper.writeValueAsString(map)); [EOL]     assertEquals("{}", inclMapper.writeValueAsString(new MapWrapper<String, Integer>(null))); [EOL]     ArrayWrapper<Integer> array = new ArrayWrapper<Integer>(new Integer[0]); [EOL]     assertEquals("{\"array\":[]}", defMapper.writeValueAsString(array)); [EOL]     assertEquals("{}", inclMapper.writeValueAsString(array)); [EOL]     assertEquals("{}", inclMapper.writeValueAsString(new ArrayWrapper<Integer>(null))); [EOL] } <line_num>: 185,209
public void testNullSerializer() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new NullBean()); [EOL]     assertEquals("{\"value\":null}", json); [EOL] } <line_num>: 212,216
