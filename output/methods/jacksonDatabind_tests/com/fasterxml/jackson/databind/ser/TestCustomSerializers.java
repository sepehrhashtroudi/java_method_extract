@Override [EOL] public void serialize(Element value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]     jgen.writeString("element"); [EOL] } <line_num>: 36,39
protected int x() { [EOL]     return 3; [EOL] } <line_num>: 46,46
protected int y() { [EOL]     return 7; [EOL] } <line_num>: 47,47
public void testCustomization() throws Exception { [EOL]     ObjectMapper objectMapper = new ObjectMapper(); [EOL]     objectMapper.addMixInAnnotations(Element.class, ElementMixin.class); [EOL]     Element element = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument().createElement("el"); [EOL]     StringWriter sw = new StringWriter(); [EOL]     objectMapper.writeValue(sw, element); [EOL]     assertEquals(sw.toString(), "\"element\""); [EOL] } <line_num>: 56,64
@Override [EOL] public void serialize(Collection value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]     if (value.size() != 0) { [EOL]         collectionSerializer.serialize(value, jgen, provider); [EOL]     } else { [EOL]         jgen.writeNull(); [EOL]     } [EOL] } <line_num>: 75,83
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public void testCustomLists() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     JsonSerializer<?> ser = new CollectionSerializer(null, false, null, null, null); [EOL]     final JsonSerializer<Object> collectionSerializer = (JsonSerializer<Object>) ser; [EOL]     module.addSerializer(Collection.class, new JsonSerializer<Collection>() { [EOL]  [EOL]         @Override [EOL]         public void serialize(Collection value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]             if (value.size() != 0) { [EOL]                 collectionSerializer.serialize(value, jgen, provider); [EOL]             } else { [EOL]                 jgen.writeNull(); [EOL]             } [EOL]         } [EOL]     }); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("null", mapper.writeValueAsString(new ArrayList<Object>())); [EOL] } <line_num>: 66,87
@Override [EOL] public Map<String, Integer> convert(Immutable value) { [EOL]     HashMap<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]     map.put("x", value.x()); [EOL]     map.put("y", value.y()); [EOL]     return map; [EOL] } <line_num>: 96,103
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(new StdDelegatingSerializer(Immutable.class, new StdConverter<Immutable, Map<String, Integer>>() { [EOL]  [EOL]         @Override [EOL]         public Map<String, Integer> convert(Immutable value) { [EOL]             HashMap<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]             map.put("x", value.x()); [EOL]             map.put("y", value.y()); [EOL]             return map; [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("{\"x\":3,\"y\":7}", mapper.writeValueAsString(new Immutable())); [EOL] } <line_num>: 90,107
