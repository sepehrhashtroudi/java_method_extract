public String getX() { [EOL]     return "y"; [EOL] } <line_num>: 20,20
public int getY() { [EOL]     return 13; [EOL] } <line_num>: 21,21
@SuppressWarnings("unchecked") [EOL] public void testSimpleViaObjectMapper() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectNode n = mapper.getNodeFactory().objectNode(); [EOL]     n.put("number", 15); [EOL]     n.put("string", "abc"); [EOL]     ObjectNode n2 = n.putObject("ob"); [EOL]     n2.putArray("arr"); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jg = mapper.getFactory().createGenerator(sw); [EOL]     mapper.writeTree(jg, n); [EOL]     Map<String, Object> result = (Map<String, Object>) mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("abc", result.get("string")); [EOL]     assertEquals(Integer.valueOf(15), result.get("number")); [EOL]     Map<String, Object> ob = (Map<String, Object>) result.get("ob"); [EOL]     assertEquals(1, ob.size()); [EOL]     List<Object> list = (List<Object>) ob.get("arr"); [EOL]     assertEquals(0, list.size()); [EOL] } <line_num>: 24,48
@SuppressWarnings("unchecked") [EOL] public void testPOJOString() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectNode n = mapper.getNodeFactory().objectNode(); [EOL]     n.set("pojo", mapper.getNodeFactory().POJONode("abc")); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jg = mapper.getFactory().createGenerator(sw); [EOL]     mapper.writeTree(jg, n); [EOL]     Map<String, Object> result = (Map<String, Object>) mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("abc", result.get("pojo")); [EOL] } <line_num>: 54,68
@SuppressWarnings("unchecked") [EOL] public void testPOJOIntArray() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectNode n = mapper.getNodeFactory().objectNode(); [EOL]     n.set("pojo", mapper.getNodeFactory().POJONode(new int[] { 1, 2, 3 })); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jg = mapper.getFactory().createGenerator(sw); [EOL]     mapper.writeTree(jg, n); [EOL]     Map<String, Object> result = (Map<String, Object>) mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     List<Object> list = (List<Object>) result.get("pojo"); [EOL]     assertEquals(3, list.size()); [EOL]     for (int i = 0; i < 3; ++i) { [EOL]         assertEquals(Integer.valueOf(i + 1), list.get(i)); [EOL]     } [EOL] } <line_num>: 70,90
@SuppressWarnings("unchecked") [EOL] public void testPOJOBean() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectNode n = mapper.getNodeFactory().objectNode(); [EOL]     n.set("pojo", mapper.getNodeFactory().POJONode(new Bean())); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jg = mapper.getFactory().createGenerator(sw); [EOL]     mapper.writeTree(jg, n); [EOL]     Map<String, Object> result = (Map<String, Object>) mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     Map<String, Object> bean = (Map<String, Object>) result.get("pojo"); [EOL]     assertEquals(2, bean.size()); [EOL]     assertEquals("y", bean.get("x")); [EOL]     assertEquals(Integer.valueOf(13), bean.get("y")); [EOL] } <line_num>: 92,111
