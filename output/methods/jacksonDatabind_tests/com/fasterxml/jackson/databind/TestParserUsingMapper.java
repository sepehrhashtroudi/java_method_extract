public MyEscapes() { [EOL]     _asciiEscapes = standardAsciiEscapesForJSON(); [EOL]     _asciiEscapes['a'] = 'A'; [EOL]     _asciiEscapes['b'] = CharacterEscapes.ESCAPE_STANDARD; [EOL]     _asciiEscapes['d'] = CharacterEscapes.ESCAPE_CUSTOM; [EOL] } <line_num>: 42,47
public void setX(int x) { [EOL]     _x = x; [EOL] } <line_num>: 24,24
@Override [EOL] public int[] getEscapeCodesForAscii() { [EOL]     return _asciiEscapes; [EOL] } <line_num>: 49,52
@Override [EOL] public SerializableString getEscapeSequence(int ch) { [EOL]     if (ch == 'd') { [EOL]         return new SerializedString("[D]"); [EOL]     } [EOL]     if (ch == TWO_BYTE_ESCAPED) { [EOL]         return TWO_BYTE_ESCAPED_STRING; [EOL]     } [EOL]     if (ch == THREE_BYTE_ESCAPED) { [EOL]         return THREE_BYTE_ESCAPED_STRING; [EOL]     } [EOL]     return null; [EOL] } <line_num>: 54,67
public void testReadingArrayAsTree() throws IOException { [EOL]     JsonFactory jf = new MappingJsonFactory(); [EOL]     final String JSON = "[ 1, 2, false ]"; [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         JsonParser jp = jf.createParser(new StringReader(JSON)); [EOL]         if (i == 0) { [EOL]             assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]         } [EOL]         JsonNode root = (JsonNode) jp.readValueAsTree(); [EOL]         jp.close(); [EOL]         assertTrue(root.isArray()); [EOL]         assertEquals(3, root.size()); [EOL]         assertEquals(1, root.get(0).intValue()); [EOL]         assertEquals(2, root.get(1).intValue()); [EOL]         assertFalse(root.get(2).booleanValue()); [EOL]     } [EOL] } <line_num>: 76,95
public void testPojoReading() throws IOException { [EOL]     JsonFactory jf = new MappingJsonFactory(); [EOL]     final String JSON = "{ \"x\" : 9 }"; [EOL]     JsonParser jp = jf.createParser(new StringReader(JSON)); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     Pojo p = jp.readValueAs(Pojo.class); [EOL]     assertEquals(9, p._x); [EOL]     jp.close(); [EOL]     jp = jf.createParser(new StringReader(JSON)); [EOL]     p = jp.readValueAs(Pojo.class); [EOL]     assertEquals(9, p._x); [EOL]     jp.close(); [EOL] } <line_num>: 97,114
public void testIncrementalPojoReading() throws IOException { [EOL]     JsonFactory jf = new MappingJsonFactory(); [EOL]     final String JSON = "[ 1, true, null, \"abc\" ]"; [EOL]     JsonParser jp = jf.createParser(new StringReader(JSON)); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals(Integer.valueOf(1), jp.readValueAs(Integer.class)); [EOL]     assertEquals(Boolean.TRUE, jp.readValueAs(Boolean.class)); [EOL]     assertNull(jp.readValueAs(Object.class)); [EOL]     assertEquals(JsonToken.VALUE_NULL, jp.getLastClearedToken()); [EOL]     assertEquals("abc", jp.readValueAs(String.class)); [EOL]     assertNull(jp.readValueAs(Object.class)); [EOL]     assertEquals(JsonToken.END_ARRAY, jp.getLastClearedToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL] } <line_num>: 119,150
public void testPojoReadingFailing() throws IOException { [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     try { [EOL]         final String JSON = "{ \"x\" : 9 }"; [EOL]         JsonParser jp = jf.createParser(new StringReader(JSON)); [EOL]         Pojo p = jp.readValueAs(Pojo.class); [EOL]         fail("Expected an exception: got " + p); [EOL]     } catch (IllegalStateException e) { [EOL]         verifyException(e, "No ObjectCodec defined"); [EOL]     } [EOL] } <line_num>: 152,165
public void testEscapingUsingMapper() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(JsonGenerator.Feature.ESCAPE_NON_ASCII, true); [EOL]     assertEquals(quote("\\u0101"), mapper.writeValueAsString(String.valueOf((char) 257))); [EOL] } <line_num>: 168,173
