public int getX() { [EOL]     return 4; [EOL] } <line_num>: 15,15
public void testPojoWriting() throws IOException { [EOL]     JsonFactory jf = new MappingJsonFactory(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator gen = jf.createGenerator(sw); [EOL]     gen.writeObject(new Pojo()); [EOL]     gen.close(); [EOL]     String act = sw.toString().trim(); [EOL]     assertEquals("{\"x\":4}", act); [EOL] } <line_num>: 24,35
public void testPojoWritingFailing() throws IOException { [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     try { [EOL]         StringWriter sw = new StringWriter(); [EOL]         JsonGenerator gen = jf.createGenerator(sw); [EOL]         gen.writeObject(new Pojo()); [EOL]         gen.close(); [EOL]         fail("Expected an exception: got sw '" + sw.toString() + "'"); [EOL]     } catch (IllegalStateException e) { [EOL]         verifyException(e, "No ObjectCodec defined"); [EOL]     } [EOL] } <line_num>: 37,51
@Override [EOL] public int[] getEscapeCodesForAscii() { [EOL]     return standardAsciiEscapesForJSON(); [EOL] } <line_num>: 68,71
@Override [EOL] public SerializableString getEscapeSequence(final int ch) { [EOL]     return null; [EOL] } <line_num>: 73,76
public void testIssue820() throws IOException { [EOL]     StringBuffer sb = new StringBuffer(); [EOL]     while (sb.length() <= 5000) { [EOL]         sb.append("Yet another line of text...\n"); [EOL]     } [EOL]     String sampleText = sb.toString(); [EOL]     assertTrue("Sanity check so I don't mess up the sample text later.", sampleText.contains("\n")); [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     final CharacterEscapes defaultCharacterEscapes = new CharacterEscapes() { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public int[] getEscapeCodesForAscii() { [EOL]             return standardAsciiEscapesForJSON(); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public SerializableString getEscapeSequence(final int ch) { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     mapper.getFactory().setCharacterEscapes(defaultCharacterEscapes); [EOL]     String jacksonJson = mapper.writeValueAsString(sampleText); [EOL]     boolean hasLFs = jacksonJson.indexOf('\n') > 0; [EOL]     assertFalse("Should NOT contain linefeeds, should have been escaped", hasLFs); [EOL] } <line_num>: 53,83
