public TestBean() { [EOL] } <line_num>: 33,33
public IgnoreSome() { [EOL] } <line_num>: 69,69
public void setA(int a) { [EOL]     _a = a; [EOL] } <line_num>: 35,35
public void setB(int b) { [EOL]     _b = b; [EOL] } <line_num>: 36,36
public void markUnknown(String unk) { [EOL]     _unknown = unk; [EOL] } <line_num>: 38,38
@Override [EOL] public boolean handleUnknownProperty(DeserializationContext ctxt, JsonParser jp, JsonDeserializer<?> deserializer, Object bean, String propertyName) throws IOException, JsonProcessingException { [EOL]     ((TestBean) bean).markUnknown(propertyName + ":" + jp.getCurrentToken().toString()); [EOL]     jp.skipChildren(); [EOL]     return true; [EOL] } <line_num>: 49,60
public String c() { [EOL]     return c; [EOL] } <line_num>: 71,71
public void setC(String value) { [EOL]     c = value; [EOL] } <line_num>: 72,72
public String d() { [EOL]     return d; [EOL] } <line_num>: 73,73
public void setD(String value) { [EOL]     d = value; [EOL] } <line_num>: 74,74
@JsonIgnore [EOL] public void setB(int b) { [EOL] } <line_num>: 88,88
public void testUnknownHandlingDefault() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     } catch (JsonMappingException jex) { [EOL]         verifyException(jex, "Unrecognized field \"foo\""); [EOL]     } [EOL] } <line_num>: 130,138
public void testUnknownHandlingIgnoreWithHandler() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     mapper.addHandler(new MyHandler()); [EOL]     TestBean result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] } <line_num>: 144,155
public void testUnknownHandlingIgnoreWithHandlerAndObjectReader() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     TestBean result = mapper.reader(TestBean.class).withHandler(new MyHandler()).readValue(new StringReader(JSON_UNKNOWN_FIELD)); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] } <line_num>: 161,171
public void testUnknownHandlingIgnoreWithFeature() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false); [EOL]     TestBean result = null; [EOL]     try { [EOL]         result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     } catch (JsonMappingException jex) { [EOL]         fail("Did not expect a problem, got: " + jex.getMessage()); [EOL]     } [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertNull(result._unknown); [EOL]     assertEquals(-1, result._b); [EOL] } <line_num>: 177,192
public void testWithClassIgnore() throws Exception { [EOL]     IgnoreSome result = MAPPER.readValue("{ \"a\":1,\"b\":2,\"c\":\"x\",\"d\":\"y\"}", IgnoreSome.class); [EOL]     assertEquals(1, result.a); [EOL]     assertEquals("y", result.d()); [EOL]     assertEquals(0, result.b); [EOL]     assertNull(result.c()); [EOL] } <line_num>: 194,205
public void testClassIgnoreWithMap() throws Exception { [EOL]     IgnoreMap result = MAPPER.readValue("{ \"a\":[ 1],\n" + "\"b\":2,\n" + "\"c\": \"x\",\n" + "\"d\":false }", IgnoreMap.class); [EOL]     assertEquals(2, result.size()); [EOL]     Object ob = result.get("b"); [EOL]     assertEquals(Integer.class, ob.getClass()); [EOL]     assertEquals(Integer.valueOf(2), ob); [EOL]     assertEquals("x", result.get("c")); [EOL]     assertFalse(result.containsKey("a")); [EOL]     assertFalse(result.containsKey("d")); [EOL] } <line_num>: 208,223
public void testClassWithIgnoreUnknown() throws Exception { [EOL]     IgnoreUnknown result = MAPPER.readValue("{\"b\":3,\"c\":[1,2],\"x\":{ },\"a\":-3}", IgnoreUnknown.class); [EOL]     assertEquals(-3, result.a); [EOL] } <line_num>: 225,230
public void testClassWithUnknownAndIgnore() throws Exception { [EOL]     ImplicitIgnores result = MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3 }", ImplicitIgnores.class); [EOL]     assertEquals(3, result.c); [EOL]     try { [EOL]         MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3,\"d\":4 }", ImplicitIgnores.class); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unrecognized field \"d\""); [EOL]     } [EOL] } <line_num>: 236,249
public void testPropertyIgnoral() throws Exception { [EOL]     XYZWrapper1 result = MAPPER.readValue("{\"value\":{\"y\":2,\"x\":1,\"z\":3}}", XYZWrapper1.class); [EOL]     assertEquals(2, result.value.y); [EOL]     assertEquals(3, result.value.z); [EOL] } <line_num>: 251,256
public void testPropertyIgnoralWithClass() throws Exception { [EOL]     XYZWrapper2 result = MAPPER.readValue("{\"value\":{\"y\":2,\"x\":1,\"z\":3}}", XYZWrapper2.class); [EOL]     assertEquals(1, result.value.x); [EOL] } <line_num>: 258,262
public void testPropertyIgnoralForMap() throws Exception { [EOL]     MapWithoutX result = MAPPER.readValue("{\"values\":{\"x\":1,\"y\":2}}", MapWithoutX.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(Integer.valueOf(2), result.values.get("y")); [EOL] } <line_num>: 264,270
