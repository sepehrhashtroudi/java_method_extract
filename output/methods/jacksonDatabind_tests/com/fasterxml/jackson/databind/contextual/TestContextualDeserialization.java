public StringValue(String v) { [EOL]     value = v; [EOL] } <line_num>: 44,44
@JsonCreator [EOL] public ContextualCtorBean(@Name("CtorA") @JsonProperty("a") StringValue a, @Name("CtorB") @JsonProperty("b") StringValue b) { [EOL]     this.a = a.value; [EOL]     this.b = b.value; [EOL] } <line_num>: 59,66
public MyContextualDeserializer() { [EOL]     this(""); [EOL] } <line_num>: 102,102
public MyContextualDeserializer(String fieldName) { [EOL]     _fieldName = fieldName; [EOL] } <line_num>: 103,105
public AnnotatedContextualDeserializer() { [EOL]     this(""); [EOL] } <line_num>: 132,132
public AnnotatedContextualDeserializer(String fieldName) { [EOL]     _fieldName = fieldName; [EOL] } <line_num>: 133,135
@Override [EOL] public StringValue deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException { [EOL]     return new StringValue("" + _fieldName + "=" + jp.getText()); [EOL] } <line_num>: 107,111
@Override [EOL] public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException { [EOL]     String name = (property == null) ? "NULL" : property.getName(); [EOL]     return new MyContextualDeserializer(name); [EOL] } <line_num>: 113,120
@Override [EOL] public StringValue deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException { [EOL]     return new StringValue("" + _fieldName + "=" + jp.getText()); [EOL] } <line_num>: 137,141
@Override [EOL] public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException { [EOL]     Name ann = property.getAnnotation(Name.class); [EOL]     if (ann == null) { [EOL]         ann = property.getContextAnnotation(Name.class); [EOL]     } [EOL]     String propertyName = (ann == null) ? "UNKNOWN" : ann.value(); [EOL]     return new MyContextualDeserializer(propertyName); [EOL] } <line_num>: 143,154
public void testSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(StringValue.class, new MyContextualDeserializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualBean bean = mapper.readValue("{\"a\":\"1\",\"b\":\"2\"}", ContextualBean.class); [EOL]     assertEquals("a=1", bean.a.value); [EOL]     assertEquals("b=2", bean.b.value); [EOL]     bean = mapper.readValue("{\"a\":\"3\",\"b\":\"4\"}", ContextualBean.class); [EOL]     assertEquals("a=3", bean.a.value); [EOL]     assertEquals("b=4", bean.b.value); [EOL] } <line_num>: 163,177
public void testSimpleWithAnnotations() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualBean bean = mapper.readValue("{\"a\":\"1\",\"b\":\"2\"}", ContextualBean.class); [EOL]     assertEquals("NameA=1", bean.a.value); [EOL]     assertEquals("NameB=2", bean.b.value); [EOL]     bean = mapper.readValue("{\"a\":\"x\",\"b\":\"y\"}", ContextualBean.class); [EOL]     assertEquals("NameA=x", bean.a.value); [EOL]     assertEquals("NameB=y", bean.b.value); [EOL] } <line_num>: 179,190
public void testSimpleWithClassAnnotations() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualClassBean bean = mapper.readValue("{\"a\":\"1\",\"b\":\"2\"}", ContextualClassBean.class); [EOL]     assertEquals("Class=1", bean.a.value); [EOL]     assertEquals("NameB=2", bean.b.value); [EOL]     bean = mapper.readValue("{\"a\":\"123\",\"b\":\"345\"}", ContextualClassBean.class); [EOL]     assertEquals("Class=123", bean.a.value); [EOL]     assertEquals("NameB=345", bean.b.value); [EOL] } <line_num>: 192,202
public void testAnnotatedCtor() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualCtorBean bean = mapper.readValue("{\"a\":\"foo\",\"b\":\"bar\"}", ContextualCtorBean.class); [EOL]     assertEquals("CtorA=foo", bean.a); [EOL]     assertEquals("CtorB=bar", bean.b); [EOL]     bean = mapper.readValue("{\"a\":\"1\",\"b\":\"0\"}", ContextualCtorBean.class); [EOL]     assertEquals("CtorA=1", bean.a); [EOL]     assertEquals("CtorB=0", bean.b); [EOL] } <line_num>: 204,214
public void testAnnotatedArray() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualArrayBean bean = mapper.readValue("{\"beans\":[\"x\"]}", ContextualArrayBean.class); [EOL]     assertEquals(1, bean.beans.length); [EOL]     assertEquals("array=x", bean.beans[0].value); [EOL]     bean = mapper.readValue("{\"beans\":[\"a\",\"b\"]}", ContextualArrayBean.class); [EOL]     assertEquals(2, bean.beans.length); [EOL]     assertEquals("array=a", bean.beans[0].value); [EOL]     assertEquals("array=b", bean.beans[1].value); [EOL] } <line_num>: 216,227
public void testAnnotatedList() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualListBean bean = mapper.readValue("{\"beans\":[\"x\"]}", ContextualListBean.class); [EOL]     assertEquals(1, bean.beans.size()); [EOL]     assertEquals("list=x", bean.beans.get(0).value); [EOL]     bean = mapper.readValue("{\"beans\":[\"x\",\"y\",\"z\"]}", ContextualListBean.class); [EOL]     assertEquals(3, bean.beans.size()); [EOL]     assertEquals("list=x", bean.beans.get(0).value); [EOL]     assertEquals("list=y", bean.beans.get(1).value); [EOL]     assertEquals("list=z", bean.beans.get(2).value); [EOL] } <line_num>: 229,241
public void testAnnotatedMap() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualMapBean bean = mapper.readValue("{\"beans\":{\"a\":\"b\"}}", ContextualMapBean.class); [EOL]     assertEquals(1, bean.beans.size()); [EOL]     Map.Entry<String, StringValue> entry = bean.beans.entrySet().iterator().next(); [EOL]     assertEquals("a", entry.getKey()); [EOL]     assertEquals("map=b", entry.getValue().value); [EOL]     bean = mapper.readValue("{\"beans\":{\"x\":\"y\",\"1\":\"2\"}}", ContextualMapBean.class); [EOL]     assertEquals(2, bean.beans.size()); [EOL]     Iterator<Map.Entry<String, StringValue>> it = bean.beans.entrySet().iterator(); [EOL]     entry = it.next(); [EOL]     assertEquals("x", entry.getKey()); [EOL]     assertEquals("map=y", entry.getValue().value); [EOL]     entry = it.next(); [EOL]     assertEquals("1", entry.getKey()); [EOL]     assertEquals("map=2", entry.getValue().value); [EOL] } <line_num>: 243,261
private ObjectMapper _mapperWithAnnotatedContextual() { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(StringValue.class, new AnnotatedContextualDeserializer()); [EOL]     mapper.registerModule(module); [EOL]     return mapper; [EOL] } <line_num>: 269,276
