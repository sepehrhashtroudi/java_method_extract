public void testComplexObject() throws Exception { [EOL]     FixtureObject aTestObj = new FixtureObject(); [EOL]     ObjectMapper aMapper = new ObjectMapper(); [EOL]     StringWriter aWriter = new StringWriter(); [EOL]     JsonGenerator aGen = new JsonFactory().createGenerator(aWriter); [EOL]     aMapper.writeValue(aGen, aTestObj); [EOL]     aGen.close(); [EOL]     JsonParser jp = new JsonFactory().createParser(new StringReader(aWriter.toString())); [EOL]     assertEquals(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     while (jp.nextToken() != JsonToken.END_OBJECT) { [EOL]         assertEquals(JsonToken.FIELD_NAME, jp.getCurrentToken()); [EOL]         String name = jp.getCurrentName(); [EOL]         JsonToken t = jp.nextToken(); [EOL]         if (name.equals("uri")) { [EOL]             assertToken(JsonToken.VALUE_STRING, t); [EOL]             assertEquals(FixtureObject.VALUE_URSTR, getAndVerifyText(jp)); [EOL]         } else if (name.equals("url")) { [EOL]             assertToken(JsonToken.VALUE_STRING, t); [EOL]             assertEquals(FixtureObject.VALUE_URSTR, getAndVerifyText(jp)); [EOL]         } else if (name.equals("testNull")) { [EOL]             assertToken(JsonToken.VALUE_NULL, t); [EOL]         } else if (name.equals("testString")) { [EOL]             assertToken(JsonToken.VALUE_STRING, t); [EOL]             assertEquals(FixtureObject.VALUE_STRING, getAndVerifyText(jp)); [EOL]         } else if (name.equals("testBoolean")) { [EOL]             assertToken(JsonToken.VALUE_TRUE, t); [EOL]         } else if (name.equals("testEnum")) { [EOL]             assertToken(JsonToken.VALUE_STRING, t); [EOL]             assertEquals(FixtureObject.VALUE_ENUM.toString(), getAndVerifyText(jp)); [EOL]         } else if (name.equals("testInteger")) { [EOL]             assertToken(JsonToken.VALUE_NUMBER_INT, t); [EOL]             assertEquals(jp.getIntValue(), FixtureObject.VALUE_INT); [EOL]         } else if (name.equals("testLong")) { [EOL]             assertToken(JsonToken.VALUE_NUMBER_INT, t); [EOL]             assertEquals(jp.getLongValue(), FixtureObject.VALUE_LONG); [EOL]         } else if (name.equals("testBigInteger")) { [EOL]             assertToken(JsonToken.VALUE_NUMBER_INT, t); [EOL]             assertEquals(jp.getLongValue(), FixtureObject.VALUE_BIGINT.longValue()); [EOL]         } else if (name.equals("testBigDecimal")) { [EOL]             assertToken(JsonToken.VALUE_NUMBER_FLOAT, t); [EOL]             assertEquals(jp.getText(), FixtureObject.VALUE_BIGDEC.toString()); [EOL]         } else if (name.equals("testCharacter")) { [EOL]             assertToken(JsonToken.VALUE_STRING, t); [EOL]             assertEquals(String.valueOf(FixtureObject.VALUE_CHAR), getAndVerifyText(jp)); [EOL]         } else if (name.equals("testShort")) { [EOL]             assertToken(JsonToken.VALUE_NUMBER_INT, t); [EOL]             assertEquals(jp.getIntValue(), FixtureObject.VALUE_SHORT); [EOL]         } else if (name.equals("testByte")) { [EOL]             assertToken(JsonToken.VALUE_NUMBER_INT, t); [EOL]             assertEquals(jp.getIntValue(), FixtureObject.VALUE_BYTE); [EOL]         } else if (name.equals("testFloat")) { [EOL]             assertToken(JsonToken.VALUE_NUMBER_FLOAT, t); [EOL]             assertEquals(jp.getDecimalValue().floatValue(), FixtureObject.VALUE_FLOAT); [EOL]         } else if (name.equals("testDouble")) { [EOL]             assertToken(JsonToken.VALUE_NUMBER_FLOAT, t); [EOL]             assertEquals(jp.getDoubleValue(), FixtureObject.VALUE_DBL); [EOL]         } else if (name.equals("testStringBuffer")) { [EOL]             assertToken(JsonToken.VALUE_STRING, t); [EOL]             assertEquals(FixtureObject.VALUE_STRING, getAndVerifyText(jp)); [EOL]         } else if (name.equals("testError")) { [EOL]             assertToken(JsonToken.START_OBJECT, t); [EOL]             while (jp.nextToken() == JsonToken.FIELD_NAME) { [EOL]                 name = jp.getCurrentName(); [EOL]                 if (name.equals("cause")) { [EOL]                     assertEquals(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]                 } else if (name.equals("message")) { [EOL]                     assertEquals(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]                     assertEquals(FixtureObject.VALUE_ERRTXT, getAndVerifyText(jp)); [EOL]                 } else if (name.equals("localizedMessage")) { [EOL]                     assertEquals(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]                 } else if (name.equals("stackTrace")) { [EOL]                     assertEquals(JsonToken.START_ARRAY, jp.nextToken()); [EOL]                     int i = 0; [EOL]                     while (jp.nextToken() != JsonToken.END_ARRAY) { [EOL]                         if (i >= 100000) { [EOL]                             assertTrue("Probably run away loop in test. StackTrack Array was not properly closed.", false); [EOL]                         } [EOL]                     } [EOL]                 } else if (name.equals("suppressed")) { [EOL]                     assertEquals(JsonToken.START_ARRAY, jp.nextToken()); [EOL]                     assertEquals(JsonToken.END_ARRAY, jp.nextToken()); [EOL]                 } else { [EOL]                     fail("Unexpected field name '" + name + "'"); [EOL]                 } [EOL]             } [EOL]             assertEquals(JsonToken.END_OBJECT, jp.getCurrentToken()); [EOL]         } else { [EOL]             fail("Unexpected field, name '" + name + "'"); [EOL]         } [EOL]     } [EOL]     assertNull(jp.nextToken()); [EOL] } <line_num>: 25,129
public URL getURL() throws IOException { [EOL]     return new URL(VALUE_URSTR); [EOL] } <line_num>: 158,161
public URI getURI() throws IOException { [EOL]     try { [EOL]         return new URI(VALUE_URSTR); [EOL]     } catch (Exception e) { [EOL]         throw new IllegalArgumentException(e); [EOL]     } [EOL] } <line_num>: 163,170
public String getTestNull() { [EOL]     return null; [EOL] } <line_num>: 171,174
public String getTestString() { [EOL]     return VALUE_STRING; [EOL] } <line_num>: 175,178
public boolean getTestBoolean() { [EOL]     return true; [EOL] } <line_num>: 179,182
public EFixtureEnum getTestEnum() { [EOL]     return VALUE_ENUM; [EOL] } <line_num>: 183,186
public int getTestInteger() { [EOL]     return VALUE_INT; [EOL] } <line_num>: 187,190
public long getTestLong() { [EOL]     return VALUE_LONG; [EOL] } <line_num>: 191,194
public BigInteger getTestBigInteger() { [EOL]     return VALUE_BIGINT; [EOL] } <line_num>: 195,198
public BigDecimal getTestBigDecimal() { [EOL]     return VALUE_BIGDEC; [EOL] } <line_num>: 199,202
public char getTestCharacter() { [EOL]     return VALUE_CHAR; [EOL] } <line_num>: 203,206
public short getTestShort() { [EOL]     return VALUE_SHORT; [EOL] } <line_num>: 207,210
public byte getTestByte() { [EOL]     return VALUE_BYTE; [EOL] } <line_num>: 211,214
public float getTestFloat() { [EOL]     return VALUE_FLOAT; [EOL] } <line_num>: 215,218
public double getTestDouble() { [EOL]     return VALUE_DBL; [EOL] } <line_num>: 219,222
public StringBuffer getTestStringBuffer() { [EOL]     return new StringBuffer(VALUE_STRING); [EOL] } <line_num>: 223,226
public Exception getTestError() { [EOL]     return new Exception(VALUE_ERRTXT); [EOL] } <line_num>: 232,235
