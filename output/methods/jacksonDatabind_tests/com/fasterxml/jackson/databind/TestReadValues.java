public void testRootBeans() throws Exception { [EOL]     final String JSON = "{\"a\":3}{\"a\":27}  "; [EOL]     Iterator<Bean> it = MAPPER.reader(Bean.class).readValues(JSON); [EOL]     assertNotNull(((MappingIterator<?>) it).getCurrentLocation()); [EOL]     assertTrue(it.hasNext()); [EOL]     Bean b = it.next(); [EOL]     assertEquals(3, b.a); [EOL]     assertTrue(it.hasNext()); [EOL]     b = it.next(); [EOL]     assertEquals(27, b.a); [EOL]     assertFalse(it.hasNext()); [EOL] } <line_num>: 29,42
public void testRootMaps() throws Exception { [EOL]     final String JSON = "{\"a\":3}{\"a\":27}  "; [EOL]     Iterator<Map<?, ?>> it = MAPPER.reader(Map.class).readValues(JSON); [EOL]     assertNotNull(((MappingIterator<?>) it).getCurrentLocation()); [EOL]     assertTrue(it.hasNext()); [EOL]     Map<?, ?> map = it.next(); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(3), map.get("a")); [EOL]     assertTrue(it.hasNext()); [EOL]     assertNotNull(((MappingIterator<?>) it).getCurrentLocation()); [EOL]     map = it.next(); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(27), map.get("a")); [EOL]     assertFalse(it.hasNext()); [EOL] } <line_num>: 44,60
public void testRootBeansWithParser() throws Exception { [EOL]     final String JSON = "{\"a\":3}{\"a\":27}  "; [EOL]     JsonParser jp = MAPPER.getFactory().createParser(JSON); [EOL]     Iterator<Bean> it = jp.readValuesAs(Bean.class); [EOL]     assertTrue(it.hasNext()); [EOL]     Bean b = it.next(); [EOL]     assertEquals(3, b.a); [EOL]     assertTrue(it.hasNext()); [EOL]     b = it.next(); [EOL]     assertEquals(27, b.a); [EOL]     assertFalse(it.hasNext()); [EOL] } <line_num>: 68,82
public void testRootArraysWithParser() throws Exception { [EOL]     final String JSON = "[1][3]"; [EOL]     JsonParser jp = MAPPER.getFactory().createParser(JSON); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     Iterator<int[]> it = MAPPER.reader(int[].class).readValues(jp); [EOL]     assertTrue(it.hasNext()); [EOL]     int[] array = it.next(); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(1, array[0]); [EOL]     assertTrue(it.hasNext()); [EOL]     array = it.next(); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(3, array[0]); [EOL]     assertFalse(it.hasNext()); [EOL] } <line_num>: 84,103
public void testHasNextWithEndArray() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     JsonParser jp = MAPPER.getFactory().createParser(JSON); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     jp.nextToken(); [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(jp); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] } <line_num>: 105,123
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] } <line_num>: 125,137
public void testNonRootBeans() throws Exception { [EOL]     final String JSON = "{\"leaf\":[{\"a\":3},{\"a\":27}]}"; [EOL]     JsonParser jp = MAPPER.getFactory().createParser(JSON); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     Iterator<Bean> it = MAPPER.reader(Bean.class).readValues(jp); [EOL]     assertTrue(it.hasNext()); [EOL]     Bean b = it.next(); [EOL]     assertEquals(3, b.a); [EOL]     assertTrue(it.hasNext()); [EOL]     b = it.next(); [EOL]     assertEquals(27, b.a); [EOL]     assertFalse(it.hasNext()); [EOL]     jp.close(); [EOL] } <line_num>: 145,167
public void testNonRootMapsWithParser() throws Exception { [EOL]     final String JSON = "[{\"a\":3},{\"a\":27}]"; [EOL]     JsonParser jp = MAPPER.getFactory().createParser(JSON); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     jp.clearCurrentToken(); [EOL]     Iterator<Map<?, ?>> it = MAPPER.reader(Map.class).readValues(jp); [EOL]     assertTrue(it.hasNext()); [EOL]     Map<?, ?> map = it.next(); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(3), map.get("a")); [EOL]     assertTrue(it.hasNext()); [EOL]     map = it.next(); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(27), map.get("a")); [EOL]     assertFalse(it.hasNext()); [EOL]     jp.close(); [EOL] } <line_num>: 169,192
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] } <line_num>: 194,211
public void testNonRootArraysUsingParser() throws Exception { [EOL]     final String JSON = "[[1],[3]]"; [EOL]     JsonParser jp = MAPPER.getFactory().createParser(JSON); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     Iterator<int[]> it = MAPPER.readValues(jp, int[].class); [EOL]     assertTrue(it.hasNext()); [EOL]     int[] array = it.next(); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(1, array[0]); [EOL]     assertTrue(it.hasNext()); [EOL]     array = it.next(); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(3, array[0]); [EOL]     assertFalse(it.hasNext()); [EOL]     jp.close(); [EOL] } <line_num>: 213,236
