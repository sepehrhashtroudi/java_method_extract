public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong()); [EOL] } <line_num>: 18,40
public void testInt() { [EOL]     IntNode n = IntNode.valueOf(1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(IntNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(IntNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(IntNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(IntNode.valueOf(0).canConvertToLong()); [EOL]     assertTrue(IntNode.valueOf(Integer.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(IntNode.valueOf(Integer.MIN_VALUE).canConvertToLong()); [EOL] } <line_num>: 42,64
public void testLong() { [EOL]     LongNode n = LongNode.valueOf(1L); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.LONG, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(LongNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(LongNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(LongNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(LongNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] } <line_num>: 66,92
public void testDouble() { [EOL]     DoubleNode n = DoubleNode.valueOf(0.25); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.DOUBLE, n.numberType()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0.25, n.doubleValue()); [EOL]     assertNotNull(n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals("0.25", n.asText()); [EOL]     assertNodeNumbers(DoubleNode.valueOf(4.5), 4, 4.5); [EOL]     assertTrue(DoubleNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] } <line_num>: 94,119
public void testFloat() { [EOL]     FloatNode n = FloatNode.valueOf(0.25f); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.FLOAT, n.numberType()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0.25, n.doubleValue()); [EOL]     assertEquals(0.25f, n.floatValue()); [EOL]     assertNotNull(n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals("0.25", n.asText()); [EOL]     assertNodeNumbers(FloatNode.valueOf(4.5f), 4, 4.5f); [EOL]     assertTrue(FloatNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(FloatNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(FloatNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(FloatNode.valueOf(1000L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(FloatNode.valueOf(-1000L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(FloatNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(FloatNode.valueOf(Integer.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(FloatNode.valueOf(Integer.MIN_VALUE).canConvertToLong()); [EOL] } <line_num>: 122,150
public void testDecimalNode() throws Exception { [EOL]     DecimalNode n = DecimalNode.valueOf(BigDecimal.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new DecimalNode(BigDecimal.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_DECIMAL, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertFalse(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigDecimal()); [EOL]     assertEquals(BigDecimal.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] } <line_num>: 152,180
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] } <line_num>: 182,224
