public void testFromArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode root = mapper.createArrayNode(); [EOL]     root.add(TEXT1); [EOL]     root.add(3); [EOL]     ObjectNode obj = root.addObject(); [EOL]     obj.put(FIELD1, true); [EOL]     obj.putArray(FIELD2); [EOL]     root.add(false); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         StringWriter sw = new StringWriter(); [EOL]         if (i == 0) { [EOL]             JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]             root.serialize(gen, null); [EOL]             gen.close(); [EOL]         } else { [EOL]             mapper.writeValue(sw, root); [EOL]         } [EOL]         verifyFromArray(sw.toString()); [EOL]     } [EOL]     verifyFromArray(root.toString()); [EOL] } <line_num>: 28,58
public void testFromMap() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put(FIELD4, TEXT2); [EOL]     root.put(FIELD3, -1); [EOL]     root.putArray(FIELD2); [EOL]     root.put(FIELD1, DOUBLE_VALUE); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         StringWriter sw = new StringWriter(); [EOL]         if (i == 0) { [EOL]             JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]             root.serialize(gen, null); [EOL]             gen.close(); [EOL]         } else { [EOL]             mapper.writeValue(sw, root); [EOL]         } [EOL]         verifyFromMap(sw.toString()); [EOL]     } [EOL]     verifyFromMap(root.toString()); [EOL] } <line_num>: 60,88
public void testSmallNumbers() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode root = mapper.createArrayNode(); [EOL]     for (int i = -20; i <= 20; ++i) { [EOL]         JsonNode n = root.numberNode(i); [EOL]         root.add(n); [EOL]         assertEquals(String.valueOf(i), n.toString()); [EOL]     } [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         StringWriter sw = new StringWriter(); [EOL]         if (type == 0) { [EOL]             JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]             root.serialize(gen, null); [EOL]             gen.close(); [EOL]         } else { [EOL]             mapper.writeValue(sw, root); [EOL]         } [EOL]         String doc = sw.toString(); [EOL]         JsonParser jp = new JsonFactory().createParser(new StringReader(doc)); [EOL]         assertEquals(JsonToken.START_ARRAY, jp.nextToken()); [EOL]         for (int i = -20; i <= 20; ++i) { [EOL]             assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]             assertEquals(i, jp.getIntValue()); [EOL]             assertEquals("" + i, jp.getText()); [EOL]         } [EOL]         assertEquals(JsonToken.END_ARRAY, jp.nextToken()); [EOL]         jp.close(); [EOL]     } [EOL] } <line_num>: 93,128
public void testNull() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     mapper.writeValue(sw, NullNode.instance); [EOL]     assertEquals("null", sw.toString()); [EOL] } <line_num>: 130,136
public void testBinary() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final int LENGTH = 13045; [EOL]     byte[] data = new byte[LENGTH]; [EOL]     for (int i = 0; i < LENGTH; ++i) { [EOL]         data[i] = (byte) i; [EOL]     } [EOL]     StringWriter sw = new StringWriter(); [EOL]     mapper.writeValue(sw, BinaryNode.valueOf(data)); [EOL]     JsonParser jp = new JsonFactory().createParser(sw.toString()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     assertArrayEquals(data, jp.getBinaryValue()); [EOL]     jp.close(); [EOL] } <line_num>: 138,155
private void verifyFromArray(String input) throws Exception { [EOL]     JsonParser jp = new JsonFactory().createParser(new StringReader(input)); [EOL]     assertEquals(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     assertEquals(TEXT1, getAndVerifyText(jp)); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals(3, jp.getIntValue()); [EOL]     assertEquals(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertEquals(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals(FIELD1, getAndVerifyText(jp)); [EOL]     assertEquals(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertEquals(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals(FIELD2, getAndVerifyText(jp)); [EOL]     assertEquals(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertEquals(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertEquals(JsonToken.VALUE_FALSE, jp.nextToken()); [EOL]     assertEquals(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL] } <line_num>: 163,192
private void verifyFromMap(String input) throws Exception { [EOL]     JsonParser jp = new JsonFactory().createParser(new StringReader(input)); [EOL]     assertEquals(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertEquals(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals(FIELD4, getAndVerifyText(jp)); [EOL]     assertEquals(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     assertEquals(TEXT2, getAndVerifyText(jp)); [EOL]     assertEquals(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals(FIELD3, getAndVerifyText(jp)); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals(-1, jp.getIntValue()); [EOL]     assertEquals(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals(FIELD2, getAndVerifyText(jp)); [EOL]     assertEquals(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertEquals(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals(FIELD1, getAndVerifyText(jp)); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertEquals(DOUBLE_VALUE, jp.getDoubleValue(), 0); [EOL]     assertEquals(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL] } <line_num>: 194,222
