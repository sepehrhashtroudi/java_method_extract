public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertEquals(JsonToken.VALUE_TRUE.asString(), jp.getText()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL] } <line_num>: 41,107
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] } <line_num>: 109,133
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] } <line_num>: 135,164
public void testSpecDoc() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(SAMPLE_DOC_JSON_SPEC); [EOL]     JsonParser jp = tree.traverse(); [EOL]     verifyJsonSpecSampleDoc(jp, true); [EOL] } <line_num>: 170,177
public void testBinaryPojo() throws Exception { [EOL]     byte[] inputBinary = new byte[] { 1, 2, 100 }; [EOL]     POJONode n = new POJONode(inputBinary); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_EMBEDDED_OBJECT, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(inputBinary, data); [EOL]     Object pojo = jp.getEmbeddedObject(); [EOL]     assertSame(data, pojo); [EOL] } <line_num>: 179,192
public void testBinaryNode() throws Exception { [EOL]     byte[] inputBinary = new byte[] { 0, -5 }; [EOL]     BinaryNode n = new BinaryNode(inputBinary); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_EMBEDDED_OBJECT, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(inputBinary, data); [EOL]     assertEquals("APs=", jp.getText()); [EOL]     assertNull(jp.nextToken()); [EOL] } <line_num>: 194,211
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] } <line_num>: 213,236
public void testDataBind() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree("{ \"name\" : \"Tatu\", \n" + "\"magicNumber\" : 42," + "\"kids\" : [ \"Leo\", \"Lila\", \"Leia\" ] \n" + "}"); [EOL]     Person tatu = m.treeToValue(tree, Person.class); [EOL]     assertNotNull(tatu); [EOL]     assertEquals(42, tatu.magicNumber); [EOL]     assertEquals("Tatu", tatu.name); [EOL]     assertNotNull(tatu.kids); [EOL]     assertEquals(3, tatu.kids.size()); [EOL]     assertEquals("Leo", tatu.kids.get(0)); [EOL]     assertEquals("Lila", tatu.kids.get(1)); [EOL]     assertEquals("Leia", tatu.kids.get(2)); [EOL] } <line_num>: 242,259
public void testSkipChildrenWrt370() throws Exception { [EOL]     ObjectMapper o = new ObjectMapper(); [EOL]     ObjectNode n = o.createObjectNode(); [EOL]     n.putObject("inner").put("value", "test"); [EOL]     n.putObject("unknown").putNull("inner"); [EOL]     Jackson370Bean obj = o.readValue(n.traverse(), Jackson370Bean.class); [EOL]     assertNotNull(obj.inner); [EOL]     assertEquals("test", obj.inner.value); [EOL] } <line_num>: 262,271
