public void testNonMatching() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     assertNull(root.findValue("boogaboo")); [EOL]     assertNull(root.findParent("boogaboo")); [EOL]     JsonNode n = root.findPath("boogaboo"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertTrue(root.findValues("boogaboo").isEmpty()); [EOL]     assertTrue(root.findParents("boogaboo").isEmpty()); [EOL] } <line_num>: 13,25
public void testMatchingSingle() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     JsonNode node = root.findValue("b"); [EOL]     assertNotNull(node); [EOL]     assertEquals(3, node.intValue()); [EOL]     node = root.findParent("b"); [EOL]     assertNotNull(node); [EOL]     assertTrue(node.isObject()); [EOL]     assertEquals(1, ((ObjectNode) node).size()); [EOL]     assertEquals(3, node.path("b").intValue()); [EOL] } <line_num>: 27,39
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] } <line_num>: 41,64
private JsonNode _buildTree() throws Exception { [EOL]     final String SAMPLE = "{ \"a\" : { \"value\" : 3 }," + "\"array\" : [ { \"b\" : 3 }, {\"value\" : 42}, { \"other\" : true } ]" + "}"; [EOL]     return new ObjectMapper().readTree(SAMPLE); [EOL] } <line_num>: 66,72
