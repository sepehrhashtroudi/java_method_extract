public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 19,94
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] } <line_num>: 96,113
public void testDouble() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     double value = 3.04; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertType(result, DoubleNode.class); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isDouble()); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.doubleValue()); [EOL]     assertEquals(value, result.numberValue().doubleValue()); [EOL]     assertEquals((int) value, result.intValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals(result, DoubleNode.valueOf(value)); [EOL] } <line_num>: 115,140
public void testInt() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     int value = -90184; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertTrue(result.isIntegralNumber()); [EOL]     assertTrue(result.isInt()); [EOL]     assertType(result, IntNode.class); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue().intValue()); [EOL]     assertEquals(value, result.intValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals((double) value, result.doubleValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(result, IntNode.valueOf(value)); [EOL] } <line_num>: 142,167
public void testLong() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     long value = 12345678L << 32; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertTrue(result.isIntegralNumber()); [EOL]     assertTrue(result.isLong()); [EOL]     assertType(result, LongNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue().longValue()); [EOL]     assertEquals(value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals((double) value, result.doubleValue()); [EOL]     assertEquals(result, LongNode.valueOf(value)); [EOL] } <line_num>: 169,194
public void testNull() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("   null "); [EOL]     assertNotNull(result); [EOL]     assertTrue(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertEquals("null", result.asText()); [EOL]     assertEquals(result, NullNode.instance); [EOL] } <line_num>: 196,210
public void testDecimalNode() throws Exception { [EOL]     BigDecimal value = new BigDecimal("0.1"); [EOL]     JsonNode result = DecimalNode.valueOf(value); [EOL]     assertFalse(result.isArray()); [EOL]     assertFalse(result.isObject()); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isLong()); [EOL]     assertType(result, DecimalNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isBigDecimal()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, DecimalNode.valueOf(value)); [EOL] } <line_num>: 212,238
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] } <line_num>: 240,290
public void testEOF() throws Exception { [EOL]     String JSON = "{ \"key\": [ { \"a\" : { \"name\": \"foo\",  \"type\": 1\n" + "},  \"type\": 3, \"url\": \"http://www.google.com\" } ],\n" + "\"name\": \"xyz\", \"type\": 1, \"url\" : null }\n  "; [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonParser jp = jf.createParser(new StringReader(JSON)); [EOL]     JsonNode result = mapper.readTree(jp); [EOL]     assertTrue(result.isObject()); [EOL]     assertEquals(4, result.size()); [EOL]     assertNull(mapper.readTree(jp)); [EOL] } <line_num>: 296,312
public void testMultiple() throws Exception { [EOL]     String JSON = "12  \"string\" [ 1, 2, 3 ]"; [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonParser jp = jf.createParser(new StringReader(JSON)); [EOL]     JsonNode result = mapper.readTree(jp); [EOL]     assertTrue(result.isIntegralNumber()); [EOL]     assertTrue(result.isInt()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertEquals(12, result.intValue()); [EOL]     result = mapper.readTree(jp); [EOL]     assertTrue(result.isTextual()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isInt()); [EOL]     assertEquals("string", result.textValue()); [EOL]     result = mapper.readTree(jp); [EOL]     assertTrue(result.isArray()); [EOL]     assertEquals(3, result.size()); [EOL]     assertNull(mapper.readTree(jp)); [EOL] } <line_num>: 314,338
@SuppressWarnings("unused") [EOL] public void testMissingNode() throws Exception { [EOL]     String JSON = "[ { }, [ ] ]"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree(new StringReader(JSON)); [EOL]     assertTrue(result.isContainerNode()); [EOL]     assertTrue(result.isArray()); [EOL]     assertEquals(2, result.size()); [EOL]     int count = 0; [EOL]     for (JsonNode node : result) { [EOL]         ++count; [EOL]     } [EOL]     assertEquals(2, count); [EOL]     Iterator<JsonNode> it = result.iterator(); [EOL]     JsonNode onode = it.next(); [EOL]     assertTrue(onode.isContainerNode()); [EOL]     assertTrue(onode.isObject()); [EOL]     assertEquals(0, onode.size()); [EOL]     assertFalse(onode.isMissingNode()); [EOL]     assertNull(onode.textValue()); [EOL]     assertNull(onode.get(0)); [EOL]     JsonNode dummyNode = onode.path(0); [EOL]     assertNotNull(dummyNode); [EOL]     assertTrue(dummyNode.isMissingNode()); [EOL]     assertNull(dummyNode.get(3)); [EOL]     assertNull(dummyNode.get("whatever")); [EOL]     JsonNode dummyNode2 = dummyNode.path(98); [EOL]     assertNotNull(dummyNode2); [EOL]     assertTrue(dummyNode2.isMissingNode()); [EOL]     JsonNode dummyNode3 = dummyNode.path("field"); [EOL]     assertNotNull(dummyNode3); [EOL]     assertTrue(dummyNode3.isMissingNode()); [EOL]     JsonNode anode = it.next(); [EOL]     assertTrue(anode.isContainerNode()); [EOL]     assertTrue(anode.isArray()); [EOL]     assertFalse(anode.isMissingNode()); [EOL]     assertEquals(0, anode.size()); [EOL]     assertNull(anode.get(0)); [EOL]     dummyNode = anode.path(0); [EOL]     assertNotNull(dummyNode); [EOL]     assertTrue(dummyNode.isMissingNode()); [EOL]     assertNull(dummyNode.get(0)); [EOL]     assertNull(dummyNode.get("myfield")); [EOL]     dummyNode2 = dummyNode.path(98); [EOL]     assertNotNull(dummyNode2); [EOL]     assertTrue(dummyNode2.isMissingNode()); [EOL]     dummyNode3 = dummyNode.path("f"); [EOL]     assertNotNull(dummyNode3); [EOL]     assertTrue(dummyNode3.isMissingNode()); [EOL] } <line_num>: 344,405
public void testArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final String JSON = "[[[-0.027512,51.503221],[-0.008497,51.503221],[-0.008497,51.509744],[-0.027512,51.509744]]]"; [EOL]     JsonNode n = mapper.readTree(JSON); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isArray()); [EOL]     ArrayNode an = (ArrayNode) n; [EOL]     assertEquals(1, an.size()); [EOL]     ArrayNode an2 = (ArrayNode) n.get(0); [EOL]     assertTrue(an2.isArray()); [EOL]     assertEquals(4, an2.size()); [EOL] } <line_num>: 407,420
private int calcLength(Iterator<JsonNode> it) { [EOL]     int count = 0; [EOL]     while (it.hasNext()) { [EOL]         it.next(); [EOL]         ++count; [EOL]     } [EOL]     return count; [EOL] } <line_num>: 428,436
