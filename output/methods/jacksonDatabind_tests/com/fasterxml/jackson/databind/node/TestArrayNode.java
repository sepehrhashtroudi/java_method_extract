public void testBasics() throws IOException { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.add(text); [EOL]     assertEquals(1, n.size()); [EOL]     assertFalse(0 == n.hashCode()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("x")); [EOL]     assertTrue(n.path("x").isMissingNode()); [EOL]     assertSame(text, n.get(0)); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.hasNonNull("field")); [EOL]     assertTrue(n.has(0)); [EOL]     assertTrue(n.hasNonNull(0)); [EOL]     assertFalse(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.add((JsonNode) null); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(1).isNull()); [EOL]     assertTrue(n.has(1)); [EOL]     assertFalse(n.hasNonNull(1)); [EOL]     n.set(1, text); [EOL]     assertSame(text, n.get(1)); [EOL]     n.set(0, null); [EOL]     assertTrue(n.get(0).isNull()); [EOL]     ArrayNode n2 = new ArrayNode(JsonNodeFactory.instance); [EOL]     n2.add("foobar"); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.addAll(n2); [EOL]     assertEquals(3, n.size()); [EOL]     assertFalse(n.get(0).isTextual()); [EOL]     assertNotNull(n.remove(0)); [EOL]     assertEquals(2, n.size()); [EOL]     assertTrue(n.get(0).isTextual()); [EOL]     ArrayList<JsonNode> nodes = new ArrayList<JsonNode>(); [EOL]     nodes.add(text); [EOL]     n.addAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     assertNull(n.get(10000)); [EOL]     assertNull(n.remove(-4)); [EOL]     TextNode text2 = TextNode.valueOf("b"); [EOL]     n.insert(0, text2); [EOL]     assertEquals(4, n.size()); [EOL]     assertSame(text2, n.get(0)); [EOL]     assertNotNull(n.addArray()); [EOL]     assertEquals(5, n.size()); [EOL]     n.addPOJO("foo"); [EOL]     assertEquals(6, n.size()); [EOL]     JsonGenerator jg = new MappingJsonFactory().createGenerator(new StringWriter()); [EOL]     n.serialize(jg, null); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] } <line_num>: 20,92
public void testAdds() { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertNotNull(n.addArray()); [EOL]     assertNotNull(n.addObject()); [EOL]     n.addPOJO("foobar"); [EOL]     n.add(1); [EOL]     n.add(1L); [EOL]     n.add(0.5); [EOL]     n.add(0.5f); [EOL]     assertEquals(7, n.size()); [EOL]     assertNotNull(n.insertArray(0)); [EOL]     assertNotNull(n.insertObject(0)); [EOL]     n.insertPOJO(2, "xxx"); [EOL]     assertEquals(10, n.size()); [EOL] } <line_num>: 94,110
public void testNullChecking() { [EOL]     ArrayNode a1 = JsonNodeFactory.instance.arrayNode(); [EOL]     ArrayNode a2 = JsonNodeFactory.instance.arrayNode(); [EOL]     a1.addAll(a2); [EOL]     assertEquals(0, a1.size()); [EOL]     assertEquals(0, a2.size()); [EOL]     a2.addAll(a1); [EOL]     assertEquals(0, a1.size()); [EOL]     assertEquals(0, a2.size()); [EOL] } <line_num>: 115,127
public void testNullChecking2() { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode src = mapper.createArrayNode(); [EOL]     ArrayNode dest = mapper.createArrayNode(); [EOL]     src.add("element"); [EOL]     dest.addAll(src); [EOL] } <line_num>: 132,139
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] } <line_num>: 141,166
