public void testBasics() { [EOL]     ObjectNode n = new ObjectNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fields().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("a")); [EOL]     assertTrue(n.path("a").isMissingNode()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.set("a", text); [EOL]     assertEquals(1, n.size()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertTrue(n.fields().hasNext()); [EOL]     assertTrue(n.fieldNames().hasNext()); [EOL]     assertSame(text, n.get("a")); [EOL]     assertSame(text, n.path("a")); [EOL]     assertNull(n.get("b")); [EOL]     assertNull(n.get(0)); [EOL]     assertFalse(n.has(0)); [EOL]     assertFalse(n.hasNonNull(0)); [EOL]     assertTrue(n.has("a")); [EOL]     assertTrue(n.hasNonNull("a")); [EOL]     assertFalse(n.has("b")); [EOL]     assertFalse(n.hasNonNull("b")); [EOL]     ObjectNode n2 = new ObjectNode(JsonNodeFactory.instance); [EOL]     n2.put("b", 13); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.setAll(n2); [EOL]     assertEquals(2, n.size()); [EOL]     n.set("null", (JsonNode) null); [EOL]     assertEquals(3, n.size()); [EOL]     assertTrue(n.has("null")); [EOL]     assertFalse(n.hasNonNull("null")); [EOL]     n.put("null", "notReallNull"); [EOL]     assertEquals(3, n.size()); [EOL]     assertNotNull(n.remove("null")); [EOL]     assertEquals(2, n.size()); [EOL]     Map<String, JsonNode> nodes = new HashMap<String, JsonNode>(); [EOL]     nodes.put("d", text); [EOL]     n.setAll(nodes); [EOL]     assertEquals(3, n.size()); [EOL]     n.removeAll(); [EOL]     assertEquals(0, n.size()); [EOL] } <line_num>: 16,69
public void testNullChecking() { [EOL]     ObjectNode o1 = JsonNodeFactory.instance.objectNode(); [EOL]     ObjectNode o2 = JsonNodeFactory.instance.objectNode(); [EOL]     o1.setAll(o2); [EOL]     assertEquals(0, o1.size()); [EOL]     assertEquals(0, o2.size()); [EOL]     o1.set("x", null); [EOL]     JsonNode n = o1.get("x"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL]     o1.put("str", (String) null); [EOL]     n = o1.get("str"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL]     o1.put("d", (BigDecimal) null); [EOL]     n = o1.get("d"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL] } <line_num>: 74,98
public void testNullChecking2() { [EOL]     ObjectNode src = MAPPER.createObjectNode(); [EOL]     ObjectNode dest = MAPPER.createObjectNode(); [EOL]     src.put("a", "b"); [EOL]     dest.setAll(src); [EOL] } <line_num>: 103,109
public void testRemove() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.without(Arrays.asList("a", "c"))); [EOL]     assertEquals(1, ob.size()); [EOL]     assertEquals("b", ob.get("b").textValue()); [EOL] } <line_num>: 111,121
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] } <line_num>: 123,135
public void testValidWith() throws Exception { [EOL]     ObjectNode root = MAPPER.createObjectNode(); [EOL]     assertEquals("{}", MAPPER.writeValueAsString(root)); [EOL]     JsonNode child = root.with("prop"); [EOL]     assertTrue(child instanceof ObjectNode); [EOL]     assertEquals("{\"prop\":{}}", MAPPER.writeValueAsString(root)); [EOL] } <line_num>: 137,144
public void testValidWithArray() throws Exception { [EOL]     ObjectNode root = MAPPER.createObjectNode(); [EOL]     assertEquals("{}", MAPPER.writeValueAsString(root)); [EOL]     JsonNode child = root.withArray("arr"); [EOL]     assertTrue(child instanceof ArrayNode); [EOL]     assertEquals("{\"arr\":[]}", MAPPER.writeValueAsString(root)); [EOL] } <line_num>: 146,153
public void testInvalidWith() throws Exception { [EOL]     JsonNode root = MAPPER.createArrayNode(); [EOL]     try { [EOL]         root.with("prop"); [EOL]         fail("Expected exception"); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         verifyException(e, "not of type ObjectNode"); [EOL]     } [EOL]     ObjectNode root2 = MAPPER.createObjectNode(); [EOL]     root2.put("prop", 13); [EOL]     try { [EOL]         root2.with("prop"); [EOL]         fail("Expected exception"); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         verifyException(e, "has value that is not"); [EOL]     } [EOL] } <line_num>: 155,173
public void testInvalidWithArray() throws Exception { [EOL]     JsonNode root = MAPPER.createArrayNode(); [EOL]     try { [EOL]         root.withArray("prop"); [EOL]         fail("Expected exception"); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         verifyException(e, "not of type ObjectNode"); [EOL]     } [EOL]     ObjectNode root2 = MAPPER.createObjectNode(); [EOL]     root2.put("prop", 13); [EOL]     try { [EOL]         root2.withArray("prop"); [EOL]         fail("Expected exception"); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         verifyException(e, "has value that is not"); [EOL]     } [EOL] } <line_num>: 175,193
public void testSetAll() throws Exception { [EOL]     ObjectNode root = MAPPER.createObjectNode(); [EOL]     assertEquals(0, root.size()); [EOL]     HashMap<String, JsonNode> map = new HashMap<String, JsonNode>(); [EOL]     map.put("a", root.numberNode(1)); [EOL]     root.setAll(map); [EOL]     assertEquals(1, root.size()); [EOL]     assertTrue(root.has("a")); [EOL]     assertFalse(root.has("b")); [EOL]     map.put("b", root.numberNode(2)); [EOL]     root.setAll(map); [EOL]     assertEquals(2, root.size()); [EOL]     assertTrue(root.has("a")); [EOL]     assertTrue(root.has("b")); [EOL]     assertEquals(2, root.path("b").intValue()); [EOL]     ObjectNode root2 = MAPPER.createObjectNode(); [EOL]     root2.setAll(root); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, root2.size()); [EOL]     root2.setAll(root); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, root2.size()); [EOL]     ObjectNode root3 = MAPPER.createObjectNode(); [EOL]     root3.put("a", 2); [EOL]     root3.put("c", 3); [EOL]     assertEquals(2, root3.path("a").intValue()); [EOL]     root3.setAll(root2); [EOL]     assertEquals(3, root3.size()); [EOL]     assertEquals(1, root3.path("a").intValue()); [EOL] } <line_num>: 196,231
