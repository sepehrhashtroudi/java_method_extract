public Leaf() { [EOL] } <line_num>: 28,28
public Leaf(int v) { [EOL]     value = v; [EOL] } <line_num>: 29,29
public void testAsInt() throws Exception { [EOL]     assertEquals(9, IntNode.valueOf(9).asInt()); [EOL]     assertEquals(7, LongNode.valueOf(7L).asInt()); [EOL]     assertEquals(13, new TextNode("13").asInt()); [EOL]     assertEquals(0, new TextNode("foobar").asInt()); [EOL]     assertEquals(27, new TextNode("foobar").asInt(27)); [EOL]     assertEquals(1, BooleanNode.TRUE.asInt()); [EOL] } <line_num>: 46,54
public void testAsBoolean() throws Exception { [EOL]     assertEquals(false, BooleanNode.FALSE.asBoolean()); [EOL]     assertEquals(true, BooleanNode.TRUE.asBoolean()); [EOL]     assertEquals(false, IntNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, IntNode.valueOf(1).asBoolean()); [EOL]     assertEquals(false, LongNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, LongNode.valueOf(-34L).asBoolean()); [EOL]     assertEquals(true, new TextNode("true").asBoolean()); [EOL]     assertEquals(false, new TextNode("false").asBoolean()); [EOL]     assertEquals(false, new TextNode("barf").asBoolean()); [EOL]     assertEquals(true, new TextNode("barf").asBoolean(true)); [EOL]     assertEquals(true, new POJONode(Boolean.TRUE).asBoolean()); [EOL] } <line_num>: 56,70
@Override [EOL] public Leaf deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     JsonNode tree = (JsonNode) jp.readValueAsTree(); [EOL]     Leaf leaf = new Leaf(); [EOL]     leaf.value = tree.get("value").intValue(); [EOL]     return leaf; [EOL] } <line_num>: 75,83
public void testTreeToValue() throws Exception { [EOL]     String JSON = "{\"leaf\":{\"value\":13}}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(Leaf.class, LeafMixIn.class); [EOL]     JsonNode root = mapper.readTree(JSON); [EOL]     Root r1 = mapper.treeToValue(root, Root.class); [EOL]     assertNotNull(r1); [EOL]     assertEquals(13, r1.leaf.value); [EOL] } <line_num>: 87,97
public void testBase64Text() throws Exception { [EOL]     final int[] LENS = { 1, 2, 3, 4, 7, 9, 32, 33, 34, 35 }; [EOL]     final Base64Variant[] VARIANTS = { Base64Variants.MIME, Base64Variants.MIME_NO_LINEFEEDS, Base64Variants.MODIFIED_FOR_URL, Base64Variants.PEM }; [EOL]     for (int len : LENS) { [EOL]         byte[] input = new byte[len]; [EOL]         for (int i = 0; i < input.length; ++i) { [EOL]             input[i] = (byte) i; [EOL]         } [EOL]         for (Base64Variant variant : VARIANTS) { [EOL]             TextNode n = new TextNode(variant.encode(input)); [EOL]             byte[] data = null; [EOL]             try { [EOL]                 data = n.getBinaryValue(variant); [EOL]             } catch (Exception e) { [EOL]                 throw new IOException("Failed (variant " + variant + ", data length " + len + "): " + e.getMessage()); [EOL]             } [EOL]             assertNotNull(data); [EOL]             assertArrayEquals(data, input); [EOL]         } [EOL]     } [EOL] } <line_num>: 100,129
public void testIssue709() throws Exception { [EOL]     byte[] inputData = new byte[] { 1, 2, 3 }; [EOL]     ObjectNode node = MAPPER.createObjectNode(); [EOL]     node.put("data", inputData); [EOL]     Issue709Bean result = MAPPER.treeToValue(node, Issue709Bean.class); [EOL]     String json = MAPPER.writeValueAsString(node); [EOL]     Issue709Bean resultFromString = MAPPER.readValue(json, Issue709Bean.class); [EOL]     Issue709Bean resultFromConvert = MAPPER.convertValue(node, Issue709Bean.class); [EOL]     Assert.assertArrayEquals(inputData, resultFromString.data); [EOL]     Assert.assertArrayEquals(inputData, resultFromConvert.data); [EOL]     Assert.assertArrayEquals(inputData, result.data); [EOL] } <line_num>: 139,153
public void testEmbeddedObject() throws Exception { [EOL]     TokenBuffer buf = new TokenBuffer(MAPPER); [EOL]     buf.writeObject(new byte[3]); [EOL]     JsonNode node = MAPPER.readTree(buf.asParser()); [EOL]     buf.close(); [EOL]     assertTrue(node.isBinary()); [EOL]     byte[] data = node.binaryValue(); [EOL]     assertNotNull(data); [EOL]     assertEquals(3, data.length); [EOL] } <line_num>: 155,165
public void testEmbeddedObjectInArray() throws Exception { [EOL]     TokenBuffer buf = new TokenBuffer(MAPPER); [EOL]     buf.writeStartArray(); [EOL]     buf.writeObject(MARKER); [EOL]     buf.writeEndArray(); [EOL]     JsonNode node = MAPPER.readTree(buf.asParser()); [EOL]     buf.close(); [EOL]     assertTrue(node.isArray()); [EOL]     assertEquals(1, node.size()); [EOL]     JsonNode n = node.get(0); [EOL]     assertTrue(n.isPojo()); [EOL]     assertSame(MARKER, ((POJONode) n).getPojo()); [EOL] } <line_num>: 169,182
public void testEmbeddedObjectInObject() throws Exception { [EOL]     TokenBuffer buf = new TokenBuffer(MAPPER); [EOL]     buf.writeStartObject(); [EOL]     buf.writeFieldName("pojo"); [EOL]     buf.writeObject(MARKER); [EOL]     buf.writeEndObject(); [EOL]     JsonNode node = MAPPER.readTree(buf.asParser()); [EOL]     buf.close(); [EOL]     assertTrue(node.isObject()); [EOL]     assertEquals(1, node.size()); [EOL]     JsonNode n = node.get("pojo"); [EOL]     assertTrue(n.isPojo()); [EOL]     assertSame(MARKER, ((POJONode) n).getPojo()); [EOL] } <line_num>: 184,198
