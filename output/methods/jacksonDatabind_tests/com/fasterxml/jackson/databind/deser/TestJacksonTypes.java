public void testJsonLocation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonLocation loc = new JsonLocation("whatever", -1, -1, 100, 13); [EOL]     String ser = serializeAsString(m, loc); [EOL]     JsonLocation result = m.readValue(ser, JsonLocation.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(loc.getSourceRef(), result.getSourceRef()); [EOL]     assertEquals(loc.getByteOffset(), result.getByteOffset()); [EOL]     assertEquals(loc.getCharOffset(), result.getCharOffset()); [EOL]     assertEquals(loc.getColumnNr(), result.getColumnNr()); [EOL]     assertEquals(loc.getLineNr(), result.getLineNr()); [EOL] } <line_num>: 17,31
public void testJsonLocationProps() { [EOL]     JsonLocation loc = new JsonLocation(null, -1, -1, 100, 13); [EOL]     assertTrue(loc.equals(loc)); [EOL]     assertFalse(loc.equals(null)); [EOL]     assertFalse(loc.equals("abx")); [EOL]     loc.hashCode(); [EOL] } <line_num>: 34,43
public void testTokenBufferWithSample() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     TokenBuffer result = m.readValue(SAMPLE_DOC_JSON_SPEC, TokenBuffer.class); [EOL]     verifyJsonSpecSampleDoc(result.asParser(), true); [EOL] } <line_num>: 49,55
public void testTokenBufferWithSequence() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = createParserUsingReader("[ 32, [ 1 ], \"abc\", { \"a\" : true } ]"); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     TokenBuffer buf = m.readValue(jp, TokenBuffer.class); [EOL]     JsonParser bufParser = buf.asParser(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, bufParser.nextToken()); [EOL]     assertEquals(32, bufParser.getIntValue()); [EOL]     assertNull(bufParser.nextToken()); [EOL]     buf = m.readValue(jp, TokenBuffer.class); [EOL]     bufParser = buf.asParser(); [EOL]     assertToken(JsonToken.START_ARRAY, bufParser.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, bufParser.nextToken()); [EOL]     assertEquals(1, bufParser.getIntValue()); [EOL]     assertToken(JsonToken.END_ARRAY, bufParser.nextToken()); [EOL]     assertNull(bufParser.nextToken()); [EOL]     buf = m.readValue(jp, TokenBuffer.class); [EOL]     String str = m.readValue(buf.asParser(), String.class); [EOL]     assertEquals("abc", str); [EOL]     buf = m.readValue(jp, TokenBuffer.class); [EOL]     Map<?, ?> map = m.readValue(buf.asParser(), Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Boolean.TRUE, map.get("a")); [EOL]     assertEquals(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL] } <line_num>: 57,95
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] } <line_num>: 97,108
