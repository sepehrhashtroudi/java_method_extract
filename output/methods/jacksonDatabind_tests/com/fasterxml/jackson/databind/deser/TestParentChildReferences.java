public SimpleTreeNode() { [EOL]     this(null); [EOL] } <line_num>: 37,37
public SimpleTreeNode(String n) { [EOL]     name = n; [EOL] } <line_num>: 38,38
public SimpleTreeNode2() { [EOL]     this(null); [EOL] } <line_num>: 47,47
public SimpleTreeNode2(String n) { [EOL]     name = n; [EOL] } <line_num>: 48,48
public FullTreeNode() { [EOL]     this(null); [EOL] } <line_num>: 79,79
public FullTreeNode(String name) { [EOL]     this.name = name; [EOL] } <line_num>: 80,82
public ArrayNode() { [EOL]     this(null); [EOL] } <line_num>: 101,101
public ArrayNode(String n) { [EOL]     name = n; [EOL] } <line_num>: 102,102
public NodeForList() { [EOL]     this(null); [EOL] } <line_num>: 121,121
public NodeForList(String n) { [EOL]     name = n; [EOL] } <line_num>: 122,122
public NodeForMap() { [EOL]     this(null); [EOL] } <line_num>: 138,138
public NodeForMap(String n) { [EOL]     name = n; [EOL] } <line_num>: 139,139
public Child(@JsonProperty("value") String value) { [EOL]     this.value = value; [EOL] } <line_num>: 155,155
public ConcreteNode() { [EOL] } <line_num>: 179,179
public ConcreteNode(String id) { [EOL]     this.id = id; [EOL] } <line_num>: 180,180
@JsonBackReference [EOL] public SimpleTreeNode2 getParent() { [EOL]     return parent; [EOL] } <line_num>: 50,51
public void setParent(SimpleTreeNode2 p) { [EOL]     parent = p; [EOL] } <line_num>: 52,52
@JsonManagedReference [EOL] public SimpleTreeNode2 getChild() { [EOL]     return child; [EOL] } <line_num>: 54,55
public void setChild(SimpleTreeNode2 c) { [EOL]     child = c; [EOL] } <line_num>: 56,56
public List<Child> getChildren() { [EOL]     return children; [EOL] } <line_num>: 146,146
public void addChild(Child child) { [EOL]     children.add(child); [EOL]     child.setParent(this); [EOL] } <line_num>: 148,148
public String getValue() { [EOL]     return value; [EOL] } <line_num>: 157,157
@JsonBackReference [EOL] public Parent getParent() { [EOL]     return parent; [EOL] } <line_num>: 159,160
public void setParent(Parent parent) { [EOL]     this.parent = parent; [EOL] } <line_num>: 162,162
public void testSimpleRefs() throws Exception { [EOL]     SimpleTreeNode root = new SimpleTreeNode("root"); [EOL]     SimpleTreeNode child = new SimpleTreeNode("kid"); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     root.child = child; [EOL]     child.parent = root; [EOL]     String json = mapper.writeValueAsString(root); [EOL]     SimpleTreeNode resultNode = mapper.readValue(json, SimpleTreeNode.class); [EOL]     assertEquals("root", resultNode.name); [EOL]     SimpleTreeNode resultChild = resultNode.child; [EOL]     assertNotNull(resultChild); [EOL]     assertEquals("kid", resultChild.name); [EOL]     assertSame(resultChild.parent, resultNode); [EOL] } <line_num>: 202,218
public void testSimpleRefsWithGetter() throws Exception { [EOL]     SimpleTreeNode2 root = new SimpleTreeNode2("root"); [EOL]     SimpleTreeNode2 child = new SimpleTreeNode2("kid"); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     root.child = child; [EOL]     child.parent = root; [EOL]     String json = mapper.writeValueAsString(root); [EOL]     SimpleTreeNode2 resultNode = mapper.readValue(json, SimpleTreeNode2.class); [EOL]     assertEquals("root", resultNode.name); [EOL]     SimpleTreeNode2 resultChild = resultNode.child; [EOL]     assertNotNull(resultChild); [EOL]     assertEquals("kid", resultChild.name); [EOL]     assertSame(resultChild.parent, resultNode); [EOL] } <line_num>: 221,237
public void testFullRefs() throws Exception { [EOL]     FullTreeNode root = new FullTreeNode("root"); [EOL]     FullTreeNode child1 = new FullTreeNode("kid1"); [EOL]     FullTreeNode child2 = new FullTreeNode("kid2"); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     root.firstChild = child1; [EOL]     child1.parent = root; [EOL]     child1.next = child2; [EOL]     child2.prev = child1; [EOL]     String json = mapper.writeValueAsString(root); [EOL]     FullTreeNode resultNode = mapper.readValue(json, FullTreeNode.class); [EOL]     assertEquals("root", resultNode.name); [EOL]     FullTreeNode resultChild = resultNode.firstChild; [EOL]     assertNotNull(resultChild); [EOL]     assertEquals("kid1", resultChild.name); [EOL]     assertSame(resultChild.parent, resultNode); [EOL]     assertNull(resultChild.prev); [EOL]     FullTreeNode resultChild2 = resultChild.next; [EOL]     assertNotNull(resultChild2); [EOL]     assertEquals("kid2", resultChild2.name); [EOL]     assertSame(resultChild, resultChild2.prev); [EOL]     assertNull(resultChild2.next); [EOL] } <line_num>: 239,266
public void testArrayOfRefs() throws Exception { [EOL]     NodeArray root = new NodeArray(); [EOL]     ArrayNode node1 = new ArrayNode("a"); [EOL]     ArrayNode node2 = new ArrayNode("b"); [EOL]     root.nodes = new ArrayNode[] { node1, node2 }; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(root); [EOL]     NodeArray result = mapper.readValue(json, NodeArray.class); [EOL]     ArrayNode[] kids = result.nodes; [EOL]     assertNotNull(kids); [EOL]     assertEquals(2, kids.length); [EOL]     assertEquals("a", kids[0].name); [EOL]     assertEquals("b", kids[1].name); [EOL]     assertSame(result, kids[0].parent); [EOL]     assertSame(result, kids[1].parent); [EOL] } <line_num>: 268,285
public void testListOfRefs() throws Exception { [EOL]     NodeList root = new NodeList(); [EOL]     NodeForList node1 = new NodeForList("a"); [EOL]     NodeForList node2 = new NodeForList("b"); [EOL]     root.nodes = Arrays.asList(node1, node2); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(root); [EOL]     NodeList result = mapper.readValue(json, NodeList.class); [EOL]     List<NodeForList> kids = result.nodes; [EOL]     assertNotNull(kids); [EOL]     assertEquals(2, kids.size()); [EOL]     assertEquals("a", kids.get(0).name); [EOL]     assertEquals("b", kids.get(1).name); [EOL]     assertSame(result, kids.get(0).parent); [EOL]     assertSame(result, kids.get(1).parent); [EOL] } <line_num>: 287,304
public void testMapOfRefs() throws Exception { [EOL]     NodeMap root = new NodeMap(); [EOL]     NodeForMap node1 = new NodeForMap("a"); [EOL]     NodeForMap node2 = new NodeForMap("b"); [EOL]     Map<String, NodeForMap> nodes = new HashMap<String, NodeForMap>(); [EOL]     nodes.put("a1", node1); [EOL]     nodes.put("b2", node2); [EOL]     root.nodes = nodes; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(root); [EOL]     NodeMap result = mapper.readValue(json, NodeMap.class); [EOL]     Map<String, NodeForMap> kids = result.nodes; [EOL]     assertNotNull(kids); [EOL]     assertEquals(2, kids.size()); [EOL]     assertNotNull(kids.get("a1")); [EOL]     assertNotNull(kids.get("b2")); [EOL]     assertEquals("a", kids.get("a1").name); [EOL]     assertEquals("b", kids.get("b2").name); [EOL]     assertSame(result, kids.get("a1").parent); [EOL]     assertSame(result, kids.get("b2").parent); [EOL] } <line_num>: 306,328
public void testAbstract368() throws Exception { [EOL]     AbstractNode parent = new ConcreteNode("p"); [EOL]     AbstractNode child = new ConcreteNode("c"); [EOL]     parent.next = child; [EOL]     child.prev = parent; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(parent); [EOL]     AbstractNode root = mapper.readValue(json, AbstractNode.class); [EOL]     assertEquals(ConcreteNode.class, root.getClass()); [EOL]     assertEquals("p", root.id); [EOL]     assertNull(root.prev); [EOL]     AbstractNode leaf = root.next; [EOL]     assertNotNull(leaf); [EOL]     assertEquals("c", leaf.id); [EOL]     assertSame(root, leaf.prev); [EOL] } <line_num>: 331,351
public void testIssue693() throws Exception { [EOL]     Parent parent = new Parent(); [EOL]     parent.addChild(new Child("foo")); [EOL]     parent.addChild(new Child("bar")); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     byte[] bytes = mapper.writeValueAsBytes(parent); [EOL]     Parent value = mapper.readValue(bytes, Parent.class); [EOL]     for (Child child : value.children) { [EOL]         assertEquals(value, child.getParent()); [EOL]     } [EOL] } <line_num>: 353,364
public void testIssue708() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Advertisement708 ad = mapper.readValue("{\"title\":\"Hroch\",\"photos\":[{\"id\":3}]}", Advertisement708.class); [EOL]     assertNotNull(ad); [EOL] } <line_num>: 366,371
