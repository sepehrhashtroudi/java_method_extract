public void testIntAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 123 "), Number.class); [EOL]     assertEquals(Integer.valueOf(123), result); [EOL] } <line_num>: 17,24
public void testLongAsNumber() throws Exception { [EOL]     long exp = 1234567890123L; [EOL]     Number result = new ObjectMapper().readValue(String.valueOf(exp), Number.class); [EOL]     assertEquals(Long.valueOf(exp), result); [EOL] } <line_num>: 26,32
public void testBigIntAsNumber() throws Exception { [EOL]     BigInteger biggie = new BigInteger("1234567890123456789012345678901234567890"); [EOL]     Number result = new ObjectMapper().readValue(biggie.toString(), Number.class); [EOL]     assertEquals(BigInteger.class, biggie.getClass()); [EOL]     assertEquals(biggie, result); [EOL] } <line_num>: 34,41
public void testIntTypeOverride() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enable(DeserializationFeature.USE_BIG_INTEGER_FOR_INTS); [EOL]     BigInteger exp = BigInteger.valueOf(123L); [EOL]     Number result = m.readValue(new StringReader(" 123 "), Number.class); [EOL]     assertEquals(BigInteger.class, result.getClass()); [EOL]     assertEquals(exp, result); [EOL]     m.readValue(new StringReader("123"), Object.class); [EOL]     assertEquals(BigInteger.class, result.getClass()); [EOL]     assertEquals(exp, result); [EOL] } <line_num>: 43,61
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] } <line_num>: 67,71
public void testFpTypeOverrideSimple() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enable(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS); [EOL]     BigDecimal dec = new BigDecimal("0.1"); [EOL]     Number result = m.readValue(dec.toString(), Number.class); [EOL]     assertEquals(BigDecimal.class, result.getClass()); [EOL]     assertEquals(dec, result); [EOL]     Object value = m.readValue(dec.toString(), Object.class); [EOL]     assertEquals(BigDecimal.class, result.getClass()); [EOL]     assertEquals(dec, value); [EOL] } <line_num>: 76,91
public void testFpTypeOverrideStructured() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BigDecimal dec = new BigDecimal("-19.37"); [EOL]     m.enable(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS); [EOL]     @SuppressWarnings("unchecked") [EOL]     List<Object> list = (List<Object>) m.readValue("[ " + dec.toString() + " ]", List.class); [EOL]     assertEquals(1, list.size()); [EOL]     Object val = list.get(0); [EOL]     assertEquals(BigDecimal.class, val.getClass()); [EOL]     assertEquals(dec, val); [EOL]     Map<?, ?> map = m.readValue("{ \"a\" : " + dec.toString() + " }", Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     val = map.get("a"); [EOL]     assertEquals(BigDecimal.class, val.getClass()); [EOL]     assertEquals(dec, val); [EOL] } <line_num>: 93,114
