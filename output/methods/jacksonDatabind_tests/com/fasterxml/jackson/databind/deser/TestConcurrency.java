@Override [EOL] public Bean deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     if (!resolved) { [EOL]         throw new IOException("Deserializer not yet completely resolved"); [EOL]     } [EOL]     Bean b = new Bean(); [EOL]     b.value = 13; [EOL]     return b; [EOL] } <line_num>: 43,52
@Override [EOL] public void resolve(DeserializationContext ctxt) throws JsonMappingException { [EOL]     try { [EOL]         Thread.sleep(100L); [EOL]     } catch (Exception e) { [EOL]     } [EOL]     resolved = true; [EOL] } <line_num>: 54,61
@Override [EOL] public void run() { [EOL]     try { [EOL]         mapper.readValue(JSON, Bean.class); [EOL]     } catch (Exception e) { [EOL]     } [EOL] } <line_num>: 80,85
public void testDeserializerResolution() throws Exception { [EOL]     final String JSON = "{\"value\":42}"; [EOL]     for (int i = 0; i < 5; ++i) { [EOL]         final ObjectMapper mapper = new ObjectMapper(); [EOL]         Runnable r = new Runnable() { [EOL]  [EOL]             @Override [EOL]             public void run() { [EOL]                 try { [EOL]                     mapper.readValue(JSON, Bean.class); [EOL]                 } catch (Exception e) { [EOL]                 } [EOL]             } [EOL]         }; [EOL]         Thread t = new Thread(r); [EOL]         t.start(); [EOL]         Thread.sleep(10L); [EOL]         Bean b = mapper.readValue(JSON, Bean.class); [EOL]         assertEquals(13, b.value); [EOL]         t.join(); [EOL]     } [EOL] } <line_num>: 70,97
