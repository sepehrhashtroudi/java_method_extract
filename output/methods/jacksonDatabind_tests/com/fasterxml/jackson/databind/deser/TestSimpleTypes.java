void setV(boolean v) { [EOL]     _v = v; [EOL] } <line_num>: 27,27
void setV(int v) { [EOL]     _v = v; [EOL] } <line_num>: 32,32
void setV(double v) { [EOL]     _v = v; [EOL] } <line_num>: 37,37
void setV(float v) { [EOL]     _v = v; [EOL] } <line_num>: 42,42
@Override [EOL] void setV(int v2) { [EOL]     super.setV(v2 + 1); [EOL] } <line_num>: 51,52
public void testBooleanPrimitive() throws Exception { [EOL]     BooleanBean result = MAPPER.readValue(new StringReader("{\"v\":true}"), BooleanBean.class); [EOL]     assertTrue(result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), BooleanBean.class); [EOL]     assertNotNull(result); [EOL]     assertFalse(result._v); [EOL]     boolean[] array = MAPPER.readValue(new StringReader("[ null ]"), boolean[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertFalse(array[0]); [EOL] } <line_num>: 63,78
public void testIntPrimitive() throws Exception { [EOL]     IntBean result = MAPPER.readValue(new StringReader("{\"v\":3}"), IntBean.class); [EOL]     assertEquals(3, result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), IntBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(0, result._v); [EOL]     int[] array = MAPPER.readValue(new StringReader("[ null ]"), int[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(0, array[0]); [EOL] } <line_num>: 80,95
public void testDoublePrimitive() throws Exception { [EOL]     double value = 0.016; [EOL]     DoubleBean result = MAPPER.readValue(new StringReader("{\"v\":" + value + "}"), DoubleBean.class); [EOL]     assertEquals(value, result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), DoubleBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(0.0, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ null ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(0.0, array[0]); [EOL] } <line_num>: 97,114
public void testDoublePrimitiveNonNumeric() throws Exception { [EOL]     double value = Double.POSITIVE_INFINITY; [EOL]     DoubleBean result = MAPPER.readValue(new StringReader("{\"v\":\"" + value + "\"}"), DoubleBean.class); [EOL]     assertEquals(value, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ \"Infinity\" ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(Double.POSITIVE_INFINITY, array[0]); [EOL] } <line_num>: 116,129
public void testFloatPrimitiveNonNumeric() throws Exception { [EOL]     float value = Float.POSITIVE_INFINITY; [EOL]     FloatBean result = MAPPER.readValue(new StringReader("{\"v\":\"" + value + "\"}"), FloatBean.class); [EOL]     assertEquals(value, result._v); [EOL]     float[] array = MAPPER.readValue(new StringReader("[ \"Infinity\" ]"), float[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(Float.POSITIVE_INFINITY, array[0]); [EOL] } <line_num>: 131,143
public void testIntWithOverride() throws Exception { [EOL]     IntBean2 result = MAPPER.readValue(new StringReader("{\"v\":8}"), IntBean2.class); [EOL]     assertEquals(9, result._v); [EOL] } <line_num>: 149,153
public void testBooleanWrapper() throws Exception { [EOL]     Boolean result = MAPPER.readValue(new StringReader("true"), Boolean.class); [EOL]     assertEquals(Boolean.TRUE, result); [EOL]     result = MAPPER.readValue(new StringReader("false"), Boolean.class); [EOL]     assertEquals(Boolean.FALSE, result); [EOL]     result = MAPPER.readValue(new StringReader("0"), Boolean.class); [EOL]     assertEquals(Boolean.FALSE, result); [EOL]     result = MAPPER.readValue(new StringReader("1"), Boolean.class); [EOL]     assertEquals(Boolean.TRUE, result); [EOL] } <line_num>: 165,177
public void testByteWrapper() throws Exception { [EOL]     Byte result = MAPPER.readValue(new StringReader("   -42\t"), Byte.class); [EOL]     assertEquals(Byte.valueOf((byte) -42), result); [EOL]     result = MAPPER.readValue(new StringReader(" \"-12\""), Byte.class); [EOL]     assertEquals(Byte.valueOf((byte) -12), result); [EOL]     result = MAPPER.readValue(new StringReader(" 39.07"), Byte.class); [EOL]     assertEquals(Byte.valueOf((byte) 39), result); [EOL] } <line_num>: 179,190
public void testShortWrapper() throws Exception { [EOL]     Short result = MAPPER.readValue(new StringReader("37"), Short.class); [EOL]     assertEquals(Short.valueOf((short) 37), result); [EOL]     result = MAPPER.readValue(new StringReader(" \"-1009\""), Short.class); [EOL]     assertEquals(Short.valueOf((short) -1009), result); [EOL]     result = MAPPER.readValue(new StringReader("-12.9"), Short.class); [EOL]     assertEquals(Short.valueOf((short) -12), result); [EOL] } <line_num>: 192,203
public void testCharacterWrapper() throws Exception { [EOL]     Character result = MAPPER.readValue(new StringReader("\"a\""), Character.class); [EOL]     assertEquals(Character.valueOf('a'), result); [EOL]     result = MAPPER.readValue(new StringReader(" " + ((int) 'X')), Character.class); [EOL]     assertEquals(Character.valueOf('X'), result); [EOL] } <line_num>: 205,214
public void testIntWrapper() throws Exception { [EOL]     Integer result = MAPPER.readValue(new StringReader("   -42\t"), Integer.class); [EOL]     assertEquals(Integer.valueOf(-42), result); [EOL]     result = MAPPER.readValue(new StringReader(" \"-1200\""), Integer.class); [EOL]     assertEquals(Integer.valueOf(-1200), result); [EOL]     result = MAPPER.readValue(new StringReader(" 39.07"), Integer.class); [EOL]     assertEquals(Integer.valueOf(39), result); [EOL] } <line_num>: 216,227
public void testLongWrapper() throws Exception { [EOL]     Long result = MAPPER.readValue(new StringReader("12345678901"), Long.class); [EOL]     assertEquals(Long.valueOf(12345678901L), result); [EOL]     result = MAPPER.readValue(new StringReader(" \"-9876\""), Long.class); [EOL]     assertEquals(Long.valueOf(-9876), result); [EOL]     result = MAPPER.readValue(new StringReader("1918.3"), Long.class); [EOL]     assertEquals(Long.valueOf(1918), result); [EOL] } <line_num>: 229,240
public void testFloatWrapper() throws Exception { [EOL]     String[] STRS = new String[] { "1.0", "0.0", "-0.3", "0.7", "42.012", "-999.0", NAN_STRING }; [EOL]     for (String str : STRS) { [EOL]         Float exp = Float.valueOf(str); [EOL]         Float result; [EOL]         if (NAN_STRING != str) { [EOL]             result = MAPPER.readValue(new StringReader(str), Float.class); [EOL]             assertEquals(exp, result); [EOL]         } [EOL]         result = MAPPER.readValue(new StringReader(" \"" + str + "\""), Float.class); [EOL]         assertEquals(exp, result); [EOL]     } [EOL] } <line_num>: 247,268
public void testDoubleWrapper() throws Exception { [EOL]     String[] STRS = new String[] { "1.0", "0.0", "-0.3", "0.7", "42.012", "-999.0", NAN_STRING }; [EOL]     for (String str : STRS) { [EOL]         Double exp = Double.valueOf(str); [EOL]         Double result; [EOL]         if (NAN_STRING != str) { [EOL]             result = MAPPER.readValue(new StringReader(str), Double.class); [EOL]             assertEquals(exp, result); [EOL]         } [EOL]         result = MAPPER.readValue(new StringReader(" \"" + str + "\""), Double.class); [EOL]         assertEquals(exp, result); [EOL]     } [EOL] } <line_num>: 270,290
public void testBase64Variants() throws Exception { [EOL]     final byte[] INPUT = "abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890X".getBytes("UTF-8"); [EOL]     Assert.assertArrayEquals(INPUT, MAPPER.readValue(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA=="), byte[].class)); [EOL]     ObjectReader reader = MAPPER.reader(byte[].class); [EOL]     Assert.assertArrayEquals(INPUT, (byte[]) reader.with(Base64Variants.MIME_NO_LINEFEEDS).readValue(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA=="))); [EOL]     Assert.assertArrayEquals(INPUT, (byte[]) reader.with(Base64Variants.MIME).readValue(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1\\ndnd4eXoxMjM0NTY3ODkwWA=="))); [EOL]     Assert.assertArrayEquals(INPUT, (byte[]) reader.with(Base64Variants.MODIFIED_FOR_URL).readValue(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA"))); [EOL]     Assert.assertArrayEquals(INPUT, (byte[]) reader.with(Base64Variants.PEM).readValue(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamts\\nbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA=="))); [EOL] } <line_num>: 293,317
public void testSingleString() throws Exception { [EOL]     String value = "FOO!"; [EOL]     String result = MAPPER.readValue(new StringReader("\"" + value + "\""), String.class); [EOL]     assertEquals(value, result); [EOL] } <line_num>: 324,329
public void testNull() throws Exception { [EOL]     Object result = MAPPER.readValue("   null", Object.class); [EOL]     assertNull(result); [EOL] } <line_num>: 331,336
public void testClass() throws Exception { [EOL]     Class<?> result = MAPPER.readValue("\"java.lang.String\"", Class.class); [EOL]     assertEquals(String.class, result); [EOL] } <line_num>: 338,342
public void testBigDecimal() throws Exception { [EOL]     BigDecimal value = new BigDecimal("0.001"); [EOL]     BigDecimal result = MAPPER.readValue(new StringReader(value.toString()), BigDecimal.class); [EOL]     assertEquals(value, result); [EOL] } <line_num>: 344,349
public void testBigInteger() throws Exception { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     BigInteger result = MAPPER.readValue(new StringReader(value.toString()), BigInteger.class); [EOL]     assertEquals(value, result); [EOL] } <line_num>: 351,356
public void testUUID() throws Exception { [EOL]     UUID value = UUID.fromString("76e6d183-5f68-4afa-b94a-922c1fdb83f8"); [EOL]     assertEquals(value, MAPPER.readValue("\"" + value.toString() + "\"", UUID.class)); [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeObject(null); [EOL]     assertNull(MAPPER.readValue(buf.asParser(), UUID.class)); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeObject(value); [EOL]     assertSame(value, MAPPER.readValue(buf.asParser(), UUID.class)); [EOL]     ByteArrayOutputStream bytes = new ByteArrayOutputStream(); [EOL]     DataOutputStream out = new DataOutputStream(bytes); [EOL]     out.writeLong(value.getMostSignificantBits()); [EOL]     out.writeLong(value.getLeastSignificantBits()); [EOL]     byte[] data = bytes.toByteArray(); [EOL]     assertEquals(16, data.length); [EOL]     buf.writeObject(data); [EOL]     UUID value2 = MAPPER.readValue(buf.asParser(), UUID.class); [EOL]     assertEquals(value, value2); [EOL]     buf.close(); [EOL] } <line_num>: 358,391
public void testURL() throws Exception { [EOL]     URL value = new URL("http://foo.com"); [EOL]     assertEquals(value, MAPPER.readValue("\"" + value.toString() + "\"", URL.class)); [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeObject(null); [EOL]     assertNull(MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeObject(value); [EOL]     assertSame(value, MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL] } <line_num>: 393,409
public void testURI() throws Exception { [EOL]     URI value = new URI("http://foo.com"); [EOL]     assertEquals(value, MAPPER.readValue("\"" + value.toString() + "\"", URI.class)); [EOL] } <line_num>: 411,415
public void testSequenceOfInts() throws Exception { [EOL]     final int NR_OF_INTS = 100; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (int i = 0; i < NR_OF_INTS; ++i) { [EOL]         sb.append(" "); [EOL]         sb.append(i); [EOL]     } [EOL]     JsonParser jp = MAPPER.getFactory().createParser(sb.toString()); [EOL]     for (int i = 0; i < NR_OF_INTS; ++i) { [EOL]         Integer result = MAPPER.readValue(jp, Integer.class); [EOL]         assertEquals(Integer.valueOf(i), result); [EOL]     } [EOL] } <line_num>: 427,441
