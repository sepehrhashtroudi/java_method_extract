public void testDateUtil() throws Exception { [EOL]     long now = 123456789L; [EOL]     java.util.Date value = new java.util.Date(now); [EOL]     assertEquals(value, MAPPER.readValue("" + now, java.util.Date.class)); [EOL]     String dateStr = dateToString(value); [EOL]     java.util.Date result = MAPPER.readValue("\"" + dateStr + "\"", java.util.Date.class); [EOL]     assertEquals("Date: expect " + value + " (" + value.getTime() + "), got " + result + " (" + result.getTime() + ")", value.getTime(), result.getTime()); [EOL] } <line_num>: 41,55
public void testDateUtilWithStringTimestamp() throws Exception { [EOL]     long now = 1321992375446L; [EOL]     String json = quote(String.valueOf(now)); [EOL]     java.util.Date value = MAPPER.readValue(json, java.util.Date.class); [EOL]     assertEquals(now, value.getTime()); [EOL] } <line_num>: 57,66
public void testDateUtilRFC1123() throws Exception { [EOL]     DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US); [EOL]     String inputStr = "Sat, 17 Jan 2009 06:13:58 +0000"; [EOL]     java.util.Date inputDate = fmt.parse(inputStr); [EOL]     assertEquals(inputDate, MAPPER.readValue("\"" + inputStr + "\"", java.util.Date.class)); [EOL] } <line_num>: 68,75
public void testDateUtilRFC1123OnNonUSLocales() throws Exception { [EOL]     Locale old = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.GERMAN); [EOL]     DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US); [EOL]     String inputStr = "Sat, 17 Jan 2009 06:13:58 +0000"; [EOL]     java.util.Date inputDate = fmt.parse(inputStr); [EOL]     assertEquals(inputDate, MAPPER.readValue("\"" + inputStr + "\"", java.util.Date.class)); [EOL]     Locale.setDefault(old); [EOL] } <line_num>: 77,87
public void testDateUtilISO8601() throws Exception { [EOL]     String inputStr = "1972-12-28T00:00:00.000+0000"; [EOL]     Date inputDate = MAPPER.readValue("\"" + inputStr + "\"", java.util.Date.class); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     c.setTime(inputDate); [EOL]     assertEquals(1972, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.DECEMBER, c.get(Calendar.MONTH)); [EOL]     assertEquals(28, c.get(Calendar.DAY_OF_MONTH)); [EOL]     inputStr = "1972-12-28T00:00:00.000Z"; [EOL]     inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class); [EOL]     c.setTime(inputDate); [EOL]     assertEquals(1972, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.DECEMBER, c.get(Calendar.MONTH)); [EOL]     assertEquals(28, c.get(Calendar.DAY_OF_MONTH)); [EOL]     inputStr = "1972-12-28T00:00:00.000+00:00"; [EOL]     inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class); [EOL]     c.setTime(inputDate); [EOL]     assertEquals(1972, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.DECEMBER, c.get(Calendar.MONTH)); [EOL]     assertEquals(28, c.get(Calendar.DAY_OF_MONTH)); [EOL]     inputStr = "1972-12-28T00:00:00.000+00"; [EOL]     inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class); [EOL]     c.setTime(inputDate); [EOL]     assertEquals(1972, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.DECEMBER, c.get(Calendar.MONTH)); [EOL]     assertEquals(28, c.get(Calendar.DAY_OF_MONTH)); [EOL]     inputStr = "1984-11-30T00:00:00.000Z"; [EOL]     inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class); [EOL]     c.setTime(inputDate); [EOL]     assertEquals(1984, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.NOVEMBER, c.get(Calendar.MONTH)); [EOL]     assertEquals(30, c.get(Calendar.DAY_OF_MONTH)); [EOL] } <line_num>: 92,135
public void testDateUtilISO8601NoTimezone() throws Exception { [EOL]     String inputStr = "1984-11-13T00:00:09"; [EOL]     Date inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     c.setTime(inputDate); [EOL]     assertEquals(1984, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.NOVEMBER, c.get(Calendar.MONTH)); [EOL]     assertEquals(13, c.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(0, c.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(0, c.get(Calendar.MINUTE)); [EOL]     assertEquals(9, c.get(Calendar.SECOND)); [EOL]     assertEquals(0, c.get(Calendar.MILLISECOND)); [EOL] } <line_num>: 137,151
public void testDateUtilISO8601JustDate() throws Exception { [EOL]     String inputStr = "1972-12-28"; [EOL]     Date inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     c.setTime(inputDate); [EOL]     assertEquals(1972, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.DECEMBER, c.get(Calendar.MONTH)); [EOL]     assertEquals(28, c.get(Calendar.DAY_OF_MONTH)); [EOL] } <line_num>: 153,163
@SuppressWarnings("deprecation") [EOL] public void testDateSql() throws Exception { [EOL]     java.sql.Date value = new java.sql.Date(0L); [EOL]     value.setYear(99); [EOL]     value.setDate(19); [EOL]     value.setMonth(Calendar.APRIL); [EOL]     long now = value.getTime(); [EOL]     assertEquals(value, MAPPER.readValue(String.valueOf(now), java.sql.Date.class)); [EOL]     java.sql.Date result = MAPPER.readValue(quote(value.toString()), java.sql.Date.class); [EOL]     Calendar c = gmtCalendar(result.getTime()); [EOL]     assertEquals(1999, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.APRIL, c.get(Calendar.MONTH)); [EOL]     assertEquals(19, c.get(Calendar.DAY_OF_MONTH)); [EOL]     String expStr = "1981-07-13"; [EOL]     result = MAPPER.readValue(quote(expStr), java.sql.Date.class); [EOL]     c.setTimeInMillis(result.getTime()); [EOL]     assertEquals(1981, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.JULY, c.get(Calendar.MONTH)); [EOL]     assertEquals(13, c.get(Calendar.DAY_OF_MONTH)); [EOL] } <line_num>: 165,201
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] } <line_num>: 203,220
public void testCustom() throws Exception { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     DateFormat df = new SimpleDateFormat("yyyy-MM-dd'X'HH:mm:ss"); [EOL]     df.setTimeZone(TimeZone.getTimeZone("PST")); [EOL]     mapper.setDateFormat(df); [EOL]     String dateStr = "1972-12-28X15:45:00"; [EOL]     java.util.Date exp = df.parse(dateStr); [EOL]     java.util.Date result = mapper.readValue("\"" + dateStr + "\"", java.util.Date.class); [EOL]     assertEquals(exp, result); [EOL] } <line_num>: 222,233
public void testDatesWithEmptyStrings() throws Exception { [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Date.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Calendar.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.sql.Date.class)); [EOL] } <line_num>: 239,244
public void test8601DateTimeNoMilliSecs() throws Exception { [EOL]     for (String inputStr : new String[] { "2010-06-28T23:34:22Z", "2010-06-28T23:34:22+0000", "2010-06-28T23:34:22+00" }) { [EOL]         Date inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class); [EOL]         Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]         c.setTime(inputDate); [EOL]         assertEquals(2010, c.get(Calendar.YEAR)); [EOL]         assertEquals(Calendar.JUNE, c.get(Calendar.MONTH)); [EOL]         assertEquals(28, c.get(Calendar.DAY_OF_MONTH)); [EOL]         assertEquals(23, c.get(Calendar.HOUR_OF_DAY)); [EOL]         assertEquals(34, c.get(Calendar.MINUTE)); [EOL]         assertEquals(22, c.get(Calendar.SECOND)); [EOL]         assertEquals(0, c.get(Calendar.MILLISECOND)); [EOL]     } [EOL] } <line_num>: 247,266
public void testTimeZone() throws Exception { [EOL]     TimeZone result = MAPPER.readValue(quote("PST"), TimeZone.class); [EOL]     assertEquals("PST", result.getID()); [EOL] } <line_num>: 268,272
public void testCustomDateWithAnnotation() throws Exception { [EOL]     DateAsStringBean result = MAPPER.readValue("{\"date\":\"/2005/05/25/\"}", DateAsStringBean.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.date); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     long l = result.date.getTime(); [EOL]     if (l == 0L) { [EOL]         fail("Should not get null date"); [EOL]     } [EOL]     c.setTimeInMillis(l); [EOL]     assertEquals(2005, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.MAY, c.get(Calendar.MONTH)); [EOL]     assertEquals(25, c.get(Calendar.DAY_OF_MONTH)); [EOL] } <line_num>: 274,288
public void testCustomCalendarWithAnnotation() throws Exception { [EOL]     CalendarAsStringBean cbean = MAPPER.readValue("{\"cal\":\";2007/07/13;\"}", CalendarAsStringBean.class); [EOL]     assertNotNull(cbean); [EOL]     assertNotNull(cbean.cal); [EOL]     Calendar c = cbean.cal; [EOL]     assertEquals(2007, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.JULY, c.get(Calendar.MONTH)); [EOL]     assertEquals(13, c.get(Calendar.DAY_OF_MONTH)); [EOL] } <line_num>: 290,300
public void testCustomCalendarWithTimeZone() throws Exception { [EOL]     DateInCETBean cet = MAPPER.readValue("{\"date\":\"2001-01-01,10\"}", DateInCETBean.class); [EOL]     Calendar c = Calendar.getInstance(getUTCTimeZone()); [EOL]     c.setTimeInMillis(cet.date.getTime()); [EOL]     assertEquals(2001, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.JANUARY, c.get(Calendar.MONTH)); [EOL]     assertEquals(1, c.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(9, c.get(Calendar.HOUR_OF_DAY)); [EOL] } <line_num>: 302,314
public void testInvalidFormat() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("foobar"), Date.class); [EOL]         fail("Should have failed with an exception"); [EOL]     } catch (InvalidFormatException e) { [EOL]         verifyException(e, "Can not construct instance"); [EOL]         assertEquals("foobar", e.getValue()); [EOL]         assertEquals(Date.class, e.getTargetType()); [EOL]     } catch (Exception e) { [EOL]         fail("Wrong type of exception (" + e.getClass().getName() + "), should get " + InvalidFormatException.class.getName()); [EOL]     } [EOL] } <line_num>: 322,335
private String dateToString(java.util.Date value) { [EOL]     DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ"); [EOL]     return df.format(value); [EOL] } <line_num>: 343,350
private static Calendar gmtCalendar(long time) { [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     c.setTimeInMillis(time); [EOL]     return c; [EOL] } <line_num>: 352,357
