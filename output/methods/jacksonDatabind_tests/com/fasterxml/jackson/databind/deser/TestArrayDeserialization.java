@SuppressWarnings("unused") [EOL] private Bean1() { [EOL] } <line_num>: 35,36
public Bean1(int x, int y, List<Bean2> beans) { [EOL]     _x = x; [EOL]     _y = y; [EOL]     _beans = beans; [EOL] } <line_num>: 38,43
public Bean2(String d) { [EOL]     _desc = d; [EOL] } <line_num>: 73,76
public NonDeserializable(String v, boolean bogus) { [EOL]     value = v; [EOL] } <line_num>: 124,126
public int getX() { [EOL]     return _x; [EOL] } <line_num>: 45,45
public int getY() { [EOL]     return _y; [EOL] } <line_num>: 46,46
public List<Bean2> getBeans() { [EOL]     return _beans; [EOL] } <line_num>: 47,47
public void setX(int x) { [EOL]     _x = x; [EOL] } <line_num>: 49,49
public void setY(int y) { [EOL]     _y = y; [EOL] } <line_num>: 50,50
public void setBeans(List<Bean2> b) { [EOL]     _beans = b; [EOL] } <line_num>: 51,51
@Override [EOL] public boolean equals(Object o) { [EOL]     if (!(o instanceof Bean1)) [EOL]         return false; [EOL]     Bean1 other = (Bean1) o; [EOL]     return (_x == other._x) && (_y == other._y) && _beans.equals(other._beans); [EOL] } <line_num>: 53,60
@Override [EOL] public void serialize(JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { [EOL]     jgen.writeString(_desc); [EOL] } <line_num>: 78,83
@Override [EOL] public String toString() { [EOL]     return _desc; [EOL] } <line_num>: 85,85
@Override [EOL] public boolean equals(Object o) { [EOL]     if (!(o instanceof Bean2)) [EOL]         return false; [EOL]     Bean2 other = (Bean2) o; [EOL]     return _desc.equals(other._desc); [EOL] } <line_num>: 87,91
@Override [EOL] public void serializeWithType(JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException, JsonProcessingException { [EOL] } <line_num>: 93,97
@Override [EOL] public NonDeserializable[] deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException { [EOL]     List<NonDeserializable> list = new ArrayList<NonDeserializable>(); [EOL]     while (jp.nextToken() != JsonToken.END_ARRAY) { [EOL]         list.add(new NonDeserializable(jp.getText(), false)); [EOL]     } [EOL]     return list.toArray(new NonDeserializable[list.size()]); [EOL] } <line_num>: 110,118
public void testUntypedArray() throws Exception { [EOL]     String JSON = "[ 1, null, \"x\", true, 2.0 ]"; [EOL]     Object[] result = MAPPER.readValue(JSON, Object[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(5, result.length); [EOL]     assertEquals(Integer.valueOf(1), result[0]); [EOL]     assertNull(result[1]); [EOL]     assertEquals("x", result[2]); [EOL]     assertEquals(Boolean.TRUE, result[3]); [EOL]     assertEquals(Double.valueOf(2.0), result[4]); [EOL] } <line_num>: 147,163
public void testIntegerArray() throws Exception { [EOL]     final int LEN = 90000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i); [EOL]     } [EOL]     sb.append(']'); [EOL]     Integer[] result = MAPPER.readValue(sb.toString(), Integer[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         assertEquals(i, result[i].intValue()); [EOL]     } [EOL] } <line_num>: 165,188
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] } <line_num>: 191,198
public void testFromEmptyString2() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     m.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     Product p = m.readValue("{\"thelist\":\"\"}", Product.class); [EOL]     assertNotNull(p); [EOL]     assertNull(p.thelist); [EOL] } <line_num>: 201,209
public void testUntypedArrayOfArrays() throws Exception { [EOL]     final String JSON = "[[[-0.027512,51.503221],[-0.008497,51.503221],[-0.008497,51.509744],[-0.027512,51.509744]]]"; [EOL]     Object result = MAPPER.readValue(JSON, Object.class); [EOL]     assertEquals(ArrayList.class, result.getClass()); [EOL]     assertNotNull(result); [EOL]     Object[] array = MAPPER.readValue(JSON, Object[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(Object[].class, array.getClass()); [EOL]     ObjectWrapper w = MAPPER.readValue("{\"wrapped\":" + JSON + "}", ObjectWrapper.class); [EOL]     assertNotNull(w); [EOL]     assertNotNull(w.wrapped); [EOL]     assertEquals(ArrayList.class, w.wrapped.getClass()); [EOL]     ObjectArrayWrapper aw = MAPPER.readValue("{\"wrapped\":" + JSON + "}", ObjectArrayWrapper.class); [EOL]     assertNotNull(aw); [EOL]     assertNotNull(aw.wrapped); [EOL] } <line_num>: 217,241
public void testStringArray() throws Exception { [EOL]     final String[] STRS = new String[] { "a", "b", "abcd", "", "???", "\"quoted\"", "lf: \n" }; [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jg = new JsonFactory().createGenerator(sw); [EOL]     jg.writeStartArray(); [EOL]     for (String str : STRS) { [EOL]         jg.writeString(str); [EOL]     } [EOL]     jg.writeEndArray(); [EOL]     jg.close(); [EOL]     String[] result = MAPPER.readValue(sw.toString(), String[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(STRS.length, result.length); [EOL]     for (int i = 0; i < STRS.length; ++i) { [EOL]         assertEquals(STRS[i], result[i]); [EOL]     } [EOL] } <line_num>: 249,270
public void testCharArray() throws Exception { [EOL]     final String TEST_STR = "Let's just test it? Ok!"; [EOL]     char[] result = MAPPER.readValue("\"" + TEST_STR + "\"", char[].class); [EOL]     assertEquals(TEST_STR, new String(result)); [EOL]     result = MAPPER.readValue("[\"a\",\"b\",\"c\"]", char[].class); [EOL]     assertEquals("abc", new String(result)); [EOL] } <line_num>: 272,281
public void testBooleanArray() throws Exception { [EOL]     boolean[] result = MAPPER.readValue("[ true, false, false ]", boolean[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(3, result.length); [EOL]     assertTrue(result[0]); [EOL]     assertFalse(result[1]); [EOL]     assertFalse(result[2]); [EOL] } <line_num>: 289,297
public void testByteArrayAsNumbers() throws Exception { [EOL]     final int LEN = 37000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         int value = i - 128; [EOL]         sb.append((value < 256) ? value : (value & 0x7F)); [EOL]         sb.append(','); [EOL]     } [EOL]     sb.append("0]"); [EOL]     byte[] result = MAPPER.readValue(sb.toString(), byte[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN + 1, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         int value = i - 128; [EOL]         byte exp = (byte) ((value < 256) ? value : (value & 0x7F)); [EOL]         if (exp != result[i]) { [EOL]             fail("At offset #" + i + " (" + result.length + "), expected " + exp + ", got " + result[i]); [EOL]         } [EOL]         assertEquals(exp, result[i]); [EOL]     } [EOL]     assertEquals(0, result[LEN]); [EOL] } <line_num>: 299,322
public void testByteArrayAsBase64() throws Exception { [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     int LEN = 9000; [EOL]     byte[] TEST = new byte[LEN]; [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         TEST[i] = (byte) i; [EOL]     } [EOL]     JsonGenerator jg = jf.createGenerator(sw); [EOL]     jg.writeBinary(TEST); [EOL]     jg.close(); [EOL]     String inputData = sw.toString(); [EOL]     byte[] result = MAPPER.readValue(inputData, byte[].class); [EOL]     assertNotNull(result); [EOL]     assertArrayEquals(TEST, result); [EOL] } <line_num>: 324,347
public void testByteArraysAsBase64() throws Exception { [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     StringWriter sw = new StringWriter(1000); [EOL]     final int entryCount = 15; [EOL]     JsonGenerator jg = jf.createGenerator(sw); [EOL]     jg.writeStartArray(); [EOL]     byte[][] entries = new byte[entryCount][]; [EOL]     for (int i = 0; i < entryCount; ++i) { [EOL]         byte[] b = new byte[1000 - i * 20]; [EOL]         for (int x = 0; x < b.length; ++x) { [EOL]             b[x] = (byte) (i + x); [EOL]         } [EOL]         entries[i] = b; [EOL]         jg.writeBinary(b); [EOL]     } [EOL]     jg.writeEndArray(); [EOL]     jg.close(); [EOL]     String inputData = sw.toString(); [EOL]     byte[][] result = MAPPER.readValue(inputData, byte[][].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(entryCount, result.length); [EOL]     for (int i = 0; i < entryCount; ++i) { [EOL]         byte[] b = result[i]; [EOL]         assertArrayEquals("Comparing entry #" + i + "/" + entryCount, entries[i], b); [EOL]     } [EOL] } <line_num>: 353,385
public void testByteArraysWith763() throws Exception { [EOL]     String[] input = new String[] { "YQ==", "Yg==", "Yw==" }; [EOL]     byte[][] data = MAPPER.convertValue(input, byte[][].class); [EOL]     assertEquals("a", new String(data[0], "US-ASCII")); [EOL]     assertEquals("b", new String(data[1], "US-ASCII")); [EOL]     assertEquals("c", new String(data[2], "US-ASCII")); [EOL] } <line_num>: 388,395
public void testShortArray() throws Exception { [EOL]     final int LEN = 31001; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i); [EOL]     } [EOL]     sb.append(']'); [EOL]     short[] result = MAPPER.readValue(sb.toString(), short[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         short exp = (short) i; [EOL]         assertEquals(exp, result[i]); [EOL]     } [EOL] } <line_num>: 397,418
public void testIntArray() throws Exception { [EOL]     final int LEN = 70000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(-i); [EOL]     } [EOL]     sb.append(']'); [EOL]     int[] result = MAPPER.readValue(sb.toString(), int[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         assertEquals(-i, result[i]); [EOL]     } [EOL] } <line_num>: 420,443
public void testLongArray() throws Exception { [EOL]     final int LEN = 12300; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i); [EOL]     } [EOL]     sb.append(']'); [EOL]     long[] result = MAPPER.readValue(sb.toString(), long[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         long exp = (long) i; [EOL]         assertEquals(exp, result[i]); [EOL]     } [EOL] } <line_num>: 445,466
public void testDoubleArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     double[] result = MAPPER.readValue(sb.toString(), double[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         String actStr = String.valueOf(result[i]); [EOL]         if (!expStr.equals(actStr)) { [EOL]             fail("Entry #" + i + "/" + LEN + "; exp '" + expStr + "', got '" + actStr + "'"); [EOL]         } [EOL]     } [EOL] } <line_num>: 468,493
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] } <line_num>: 495,517
public void testBeanArray() throws Exception { [EOL]     List<Bean1> src = new ArrayList<Bean1>(); [EOL]     List<Bean2> b2 = new ArrayList<Bean2>(); [EOL]     b2.add(new Bean2("a")); [EOL]     b2.add(new Bean2("foobar")); [EOL]     src.add(new Bean1(1, 2, b2)); [EOL]     b2 = new ArrayList<Bean2>(); [EOL]     b2.add(null); [EOL]     src.add(new Bean1(4, 5, b2)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, src); [EOL]     List<Bean1> result = MAPPER.readValue(sw.toString(), new TypeReference<List<Bean1>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(src, result); [EOL] } <line_num>: 525,548
public void testCustomDeserializers() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule testModule = new SimpleModule("test", Version.unknownVersion()); [EOL]     testModule.addDeserializer(NonDeserializable[].class, new CustomNonDeserArrayDeserializer()); [EOL]     mapper.registerModule(testModule); [EOL]     NonDeserializable[] result = mapper.readValue("[\"a\"]", NonDeserializable[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.length); [EOL]     assertEquals("a", result[0].value); [EOL] } <line_num>: 556,567
