public Concrete(String v) { [EOL]     value = v; [EOL] } <line_num>: 81,81
public void testSimpleAutoDetect() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     SimpleFieldBean result = m.readValue("{ \"x\" : -13 }", SimpleFieldBean.class); [EOL]     assertEquals(-13, result.x); [EOL]     assertEquals(0, result.y); [EOL] } <line_num>: 95,102
public void testSimpleAnnotation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     SimpleFieldBean2 bean = m.readValue("{ \"values\" : [ \"x\", \"y\" ] }", SimpleFieldBean2.class); [EOL]     String[] values = bean.values; [EOL]     assertNotNull(values); [EOL]     assertEquals(2, values.length); [EOL]     assertEquals("x", values[0]); [EOL]     assertEquals("y", values[1]); [EOL] } <line_num>: 104,114
public void testNoAutoDetect() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     NoAutoDetectBean bean = m.readValue("{ \"z\" : 7 }", NoAutoDetectBean.class); [EOL]     assertEquals(7, bean._z); [EOL] } <line_num>: 116,122
public void testTypeAnnotation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     AbstractWrapper w = m.readValue("{ \"value\" : \"abc\" }", AbstractWrapper.class); [EOL]     Abstract bean = w.value; [EOL]     assertNotNull(bean); [EOL]     assertEquals(Concrete.class, bean.getClass()); [EOL]     assertEquals("abc", ((Concrete) bean).value); [EOL] } <line_num>: 124,133
public void testFailureDueToDups() throws Exception { [EOL]     try { [EOL]         writeAndMap(new ObjectMapper(), new DupFieldBean()); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Multiple fields representing property"); [EOL]     } [EOL] } <line_num>: 135,142
public void testFailureDueToDups2() throws Exception { [EOL]     try { [EOL]         writeAndMap(new ObjectMapper(), new DupFieldBean2()); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Multiple fields representing property"); [EOL]     } [EOL] } <line_num>: 144,151
public void testOkFieldOverride() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     OkDupFieldBean result = m.readValue("{ \"x\" : 1, \"y\" : 2 }", OkDupFieldBean.class); [EOL]     assertEquals(1, result.myX); [EOL]     assertEquals(2, result.y); [EOL] } <line_num>: 154,161
