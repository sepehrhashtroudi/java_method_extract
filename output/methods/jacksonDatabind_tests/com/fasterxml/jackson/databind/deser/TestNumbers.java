public MyBeanValue() { [EOL]     this(null); [EOL] } <line_num>: 36,36
public MyBeanValue(BigDecimal d) { [EOL]     this.decimal = d; [EOL] } <line_num>: 37,37
@Override [EOL] public MyBeanValue deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException { [EOL]     return new MyBeanValue(jp.getDecimalValue()); [EOL] } <line_num>: 48,53
public void testFloatNaN() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Float result = m.readValue(" \"NaN\"", Float.class); [EOL]     assertEquals(Float.valueOf(Float.NaN), result); [EOL] } <line_num>: 62,67
public void testDoubleInf() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Double result = m.readValue(" \"" + Double.POSITIVE_INFINITY + "\"", Double.class); [EOL]     assertEquals(Double.valueOf(Double.POSITIVE_INFINITY), result); [EOL]     result = m.readValue(" \"" + Double.NEGATIVE_INFINITY + "\"", Double.class); [EOL]     assertEquals(Double.valueOf(Double.NEGATIVE_INFINITY), result); [EOL] } <line_num>: 69,77
public void testEmptyAsNumber() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertNull(m.readValue(quote(""), Integer.class)); [EOL]     assertNull(m.readValue(quote(""), Long.class)); [EOL]     assertNull(m.readValue(quote(""), Float.class)); [EOL]     assertNull(m.readValue(quote(""), Double.class)); [EOL]     assertNull(m.readValue(quote(""), BigInteger.class)); [EOL]     assertNull(m.readValue(quote(""), BigDecimal.class)); [EOL] } <line_num>: 80,89
public void testDeserializeDecimalHappyPath() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"defaultValue\": { \"value\": 123 } }"; [EOL]     MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]     assertEquals(BigDecimal.valueOf(123), result.defaultValue.value.decimal); [EOL] } <line_num>: 93,98
public void testDeserializeDecimalProperException() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception"); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] } <line_num>: 100,109
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] } <line_num>: 111,120
