public ValueClass(int a, int b) { [EOL]     _a = a; [EOL] } <line_num>: 37,39
public ValueDeserializer() { [EOL]     super(ValueClass.class); [EOL] } <line_num>: 92,92
public IntsDeserializer() { [EOL]     super(int[].class); [EOL] } <line_num>: 104,104
@JsonDeserialize(using = IntsDeserializer.class) [EOL] public void setInts(int[] i) { [EOL]     _ints = i; [EOL] } <line_num>: 54,57
@Override [EOL] public ValueClass deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     int i = jp.getIntValue(); [EOL]     return new ValueClass(i, i); [EOL] } <line_num>: 93,99
@Override [EOL] public int[] deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     return new int[] { jp.getIntValue() }; [EOL] } <line_num>: 105,110
@Override [EOL] public Object deserializeKey(String key, DeserializationContext ctxt) { [EOL]     return new String[] { key }; [EOL] } <line_num>: 115,119
public void testClassDeserializer() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     ValueClass result = m.readValue("  123  ", ValueClass.class); [EOL]     assertEquals(123, result._a); [EOL] } <line_num>: 130,135
public void testMethodDeserializer() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MethodBean result = m.readValue(" { \"ints\" : 3 } ", MethodBean.class); [EOL]     assertNotNull(result); [EOL]     int[] ints = result._ints; [EOL]     assertNotNull(ints); [EOL]     assertEquals(1, ints.length); [EOL]     assertEquals(3, ints[0]); [EOL] } <line_num>: 139,149
public void testArrayContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     ArrayBean result = m.readValue(" { \"values\" : [ 1, 2, 3 ] } ", ArrayBean.class); [EOL]     assertNotNull(result); [EOL]     Object[] obs = result.values; [EOL]     assertNotNull(obs); [EOL]     assertEquals(3, obs.length); [EOL]     assertEquals(ValueClass.class, obs[0].getClass()); [EOL]     assertEquals(1, ((ValueClass) obs[0])._a); [EOL]     assertEquals(ValueClass.class, obs[1].getClass()); [EOL]     assertEquals(2, ((ValueClass) obs[1])._a); [EOL]     assertEquals(ValueClass.class, obs[2].getClass()); [EOL]     assertEquals(3, ((ValueClass) obs[2])._a); [EOL] } <line_num>: 157,171
public void testListContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     ListBean result = m.readValue(" { \"values\" : [ 1, 2, 3 ] } ", ListBean.class); [EOL]     assertNotNull(result); [EOL]     List<Object> obs = result.values; [EOL]     assertNotNull(obs); [EOL]     assertEquals(3, obs.size()); [EOL]     assertEquals(ValueClass.class, obs.get(0).getClass()); [EOL]     assertEquals(1, ((ValueClass) obs.get(0))._a); [EOL]     assertEquals(ValueClass.class, obs.get(1).getClass()); [EOL]     assertEquals(2, ((ValueClass) obs.get(1))._a); [EOL]     assertEquals(ValueClass.class, obs.get(2).getClass()); [EOL]     assertEquals(3, ((ValueClass) obs.get(2))._a); [EOL] } <line_num>: 173,187
public void testMapContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapBean result = m.readValue(" { \"values\" : { \"a\": 1, \"b\":2 } } ", MapBean.class); [EOL]     assertNotNull(result); [EOL]     Map<String, Object> map = result.values; [EOL]     assertNotNull(map); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals(ValueClass.class, map.get("a").getClass()); [EOL]     assertEquals(1, ((ValueClass) map.get("a"))._a); [EOL]     assertEquals(ValueClass.class, map.get("b").getClass()); [EOL]     assertEquals(2, ((ValueClass) map.get("b"))._a); [EOL] } <line_num>: 189,201
public void testMapKeyUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapKeyBean result = m.readValue(" { \"values\" : { \"a\": true } } ", MapKeyBean.class); [EOL]     assertNotNull(result); [EOL]     Map<Object, Object> map = result.values; [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<Object, Object> en = map.entrySet().iterator().next(); [EOL]     assertEquals(String[].class, en.getKey().getClass()); [EOL]     assertEquals(Boolean.TRUE, en.getValue()); [EOL] } <line_num>: 203,214
public void testRootValueWithCustomKey() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapKeyMap result = m.readValue(" { \"a\": 13 } ", MapKeyMap.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Map.Entry<Object, Object> en = result.entrySet().iterator().next(); [EOL]     assertEquals(ValueClass.class, en.getValue().getClass()); [EOL]     assertEquals(13, ((ValueClass) en.getValue())._a); [EOL]     assertEquals(String[].class, en.getKey().getClass()); [EOL] } <line_num>: 217,228
