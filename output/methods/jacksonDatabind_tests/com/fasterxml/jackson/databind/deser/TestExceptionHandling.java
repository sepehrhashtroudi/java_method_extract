public void testHandlingOfUnrecognized() throws Exception { [EOL]     UnrecognizedPropertyException exc = null; [EOL]     try { [EOL]         new ObjectMapper().readValue("{\"bar\":3}", Bean.class); [EOL]     } catch (UnrecognizedPropertyException e) { [EOL]         exc = e; [EOL]     } [EOL]     if (exc == null) { [EOL]         fail("Should have failed binding"); [EOL]     } [EOL]     assertEquals("bar", exc.getUnrecognizedPropertyName()); [EOL]     assertEquals(Bean.class, exc.getReferringClass()); [EOL]     verifyException(exc, "propX"); [EOL] } <line_num>: 32,47
public void testExceptionWithEmpty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         Object result = mapper.readValue("    ", Object.class); [EOL]         fail("Expected an exception, but got result value: " + result); [EOL]     } catch (Exception e) { [EOL]         verifyException(e, JsonMappingException.class, "No content"); [EOL]     } [EOL] } <line_num>: 54,63
public void testExceptionWithIncomplete() throws Exception { [EOL]     BrokenStringReader r = new BrokenStringReader("[ 1, ", "TEST"); [EOL]     JsonFactory f = new JsonFactory(); [EOL]     JsonParser jp = f.createParser(r); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         Object ob = mapper.readValue(jp, Object.class); [EOL]         fail("Should have gotten an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, IOException.class, "TEST"); [EOL]     } [EOL] } <line_num>: 65,82
public void testExceptionWithEOF() throws Exception { [EOL]     StringReader r = new StringReader("  3"); [EOL]     JsonFactory f = new JsonFactory(); [EOL]     JsonParser jp = f.createParser(r); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Integer I = mapper.readValue(jp, Integer.class); [EOL]     assertEquals(3, I.intValue()); [EOL]     try { [EOL]         I = mapper.readValue(jp, Integer.class); [EOL]         fail("Should have gotten an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, JsonMappingException.class, "No content"); [EOL]     } [EOL]     JsonToken t = jp.getCurrentToken(); [EOL]     if (t != null) { [EOL]         fail("Expected current token to be null after end-of-stream, was: " + t); [EOL]     } [EOL] } <line_num>: 84,107
void verifyException(Exception e, Class<?> expType, String expMsg) throws Exception { [EOL]     if (e.getClass() != expType) { [EOL]         fail("Expected exception of type " + expType.getName() + ", got " + e.getClass().getName()); [EOL]     } [EOL]     if (expMsg != null) { [EOL]         verifyException(e, expMsg); [EOL]     } [EOL] } <line_num>: 115,124
