public DummySerializer() { [EOL]     super(Object.class); [EOL] } <line_num>: 38,38
private LowerCaseEnum() { [EOL] } <line_num>: 59,59
private EnumWithJsonValue(String n) { [EOL]     name = n; [EOL] } <line_num>: 68,70
private TestEnumFor834(int id) { [EOL]     this.id = id; [EOL] } <line_num>: 88,90
@Override [EOL] public Object deserialize(JsonParser jp, DeserializationContext ctxt) { [EOL]     return AnnotatedTestEnum.OK; [EOL] } <line_num>: 39,43
@JsonCreator [EOL] public static EnumWithCreator fromEnum(String str) { [EOL]     if ("enumA".equals(str)) [EOL]         return A; [EOL]     if ("enumB".equals(str)) [EOL]         return B; [EOL]     return null; [EOL] } <line_num>: 49,54
@Override [EOL] public String toString() { [EOL]     return name().toLowerCase(); [EOL] } <line_num>: 60,61
@JsonValue [EOL] @Override [EOL] public String toString() { [EOL]     return name; [EOL] } <line_num>: 71,73
@JsonCreator [EOL] public static TestEnumFor834 fromId(int id) { [EOL]     for (TestEnumFor834 e : values()) { [EOL]         if (e.id == id) [EOL]             return e; [EOL]     } [EOL]     return null; [EOL] } <line_num>: 92,97
public void testSimple() throws Exception { [EOL]     String JSON = "\"OK\" \"RULES\"  null"; [EOL]     JsonParser jp = MAPPER.getFactory().createParser(JSON); [EOL]     assertEquals(TestEnum.OK, MAPPER.readValue(jp, TestEnum.class)); [EOL]     assertEquals(TestEnum.RULES, MAPPER.readValue(jp, TestEnum.class)); [EOL]     assertNull(MAPPER.readValue(jp, TestEnum.class)); [EOL]     assertFalse(jp.hasCurrentToken()); [EOL]     assertEquals(TestEnum.JACKSON, MAPPER.readValue(" 0 ", TestEnum.class)); [EOL]     try { [EOL]         MAPPER.readValue("\"NO-SUCH-VALUE\"", TestEnum.class); [EOL]         fail("Expected an exception for bogus enum value..."); [EOL]     } catch (JsonMappingException jex) { [EOL]         verifyException(jex, "value not one of declared"); [EOL]     } [EOL] } <line_num>: 108,138
public void testComplexEnum() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(TimeUnit.SECONDS); [EOL]     assertEquals(quote("SECONDS"), json); [EOL]     TimeUnit result = MAPPER.readValue(json, TimeUnit.class); [EOL]     assertSame(TimeUnit.SECONDS, result); [EOL] } <line_num>: 144,150
public void testAnnotated() throws Exception { [EOL]     AnnotatedTestEnum e = MAPPER.readValue("\"JACKSON\"", AnnotatedTestEnum.class); [EOL]     assertEquals(AnnotatedTestEnum.OK, e); [EOL] } <line_num>: 155,162
public void testEnumMaps() throws Exception { [EOL]     EnumMap<TestEnum, String> value = MAPPER.readValue("{\"OK\":\"value\"}", new TypeReference<EnumMap<TestEnum, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(TestEnum.OK)); [EOL] } <line_num>: 164,169
public void testSubclassedEnums() throws Exception { [EOL]     EnumWithSubClass value = MAPPER.readValue("\"A\"", EnumWithSubClass.class); [EOL]     assertEquals(EnumWithSubClass.A, value); [EOL] } <line_num>: 172,176
public void testCreatorEnums() throws Exception { [EOL]     EnumWithCreator value = MAPPER.readValue("\"enumA\"", EnumWithCreator.class); [EOL]     assertEquals(EnumWithCreator.A, value); [EOL] } <line_num>: 179,183
public void testToStringEnums() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.READ_ENUMS_USING_TO_STRING, true); [EOL]     LowerCaseEnum value = m.readValue("\"c\"", LowerCaseEnum.class); [EOL]     assertEquals(LowerCaseEnum.C, value); [EOL] } <line_num>: 186,193
public void testToStringEnumMaps() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.READ_ENUMS_USING_TO_STRING, true); [EOL]     EnumMap<LowerCaseEnum, String> value = m.readValue("{\"a\":\"value\"}", new TypeReference<EnumMap<LowerCaseEnum, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(LowerCaseEnum.A)); [EOL] } <line_num>: 196,204
public void testNumbersToEnums() throws Exception { [EOL]     assertFalse(MAPPER.getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)); [EOL]     TestEnum value = MAPPER.readValue("1", TestEnum.class); [EOL]     assertSame(TestEnum.RULES, value); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS, true); [EOL]     try { [EOL]         value = m.readValue("1", TestEnum.class); [EOL]         fail("Expected an error"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Not allowed to deserialize Enum value out of JSON number"); [EOL]     } [EOL] } <line_num>: 207,223
public void testEnumsWithIndex() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     String json = m.writeValueAsString(TestEnum.RULES); [EOL]     assertEquals(String.valueOf(TestEnum.RULES.ordinal()), json); [EOL]     TestEnum result = m.readValue(json, TestEnum.class); [EOL]     assertSame(TestEnum.RULES, result); [EOL] } <line_num>: 226,234
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] } <line_num>: 237,259
public void testEnumWithCreatorEnumMaps() throws Exception { [EOL]     EnumMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<EnumMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] } <line_num>: 263,267
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] } <line_num>: 269,273
public void testEnumWithCreatorEnumSets() throws Exception { [EOL]     EnumSet<EnumWithCreator> value = MAPPER.readValue("[\"enumA\"]", new TypeReference<EnumSet<EnumWithCreator>>() { [EOL]     }); [EOL]     assertTrue(value.contains(EnumWithCreator.A)); [EOL] } <line_num>: 275,279
public void testAllowUnknownEnumValuesReadAsNull() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     assertNull(reader.withType(TestEnum.class).readValue("\"NO-SUCH-VALUE\"")); [EOL]     assertNull(reader.withType(TestEnum.class).readValue(" 4343 ")); [EOL] } <line_num>: 283,289
public void testAllowUnknownEnumValuesForEnumSets() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     EnumSet<TestEnum> result = reader.withType(new TypeReference<EnumSet<TestEnum>>() { [EOL]     }).readValue("[\"NO-SUCH-VALUE\"]"); [EOL]     assertEquals(0, result.size()); [EOL] } <line_num>: 291,297
public void testAllowUnknownEnumValuesAsMapKeysReadAsNull() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     ClassWithEnumMapKey result = reader.withType(ClassWithEnumMapKey.class).readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}"); [EOL]     assertTrue(result.map.containsKey(null)); [EOL] } <line_num>: 299,305
public void testDoNotAllowUnknownEnumValuesAsMapKeysWhenReadAsNullDisabled() throws Exception { [EOL]     assertFalse(MAPPER.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)); [EOL]     try { [EOL]         MAPPER.readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}", ClassWithEnumMapKey.class); [EOL]         fail("Expected an exception for bogus enum value..."); [EOL]     } catch (JsonMappingException jex) { [EOL]         verifyException(jex, "Can not construct Map key"); [EOL]     } [EOL] } <line_num>: 307,316
public void testEnumsFromInts() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TestEnumFor834 res = mapper.readValue("1 ", TestEnumFor834.class); [EOL]     assertSame(TestEnumFor834.ENUM_A, res); [EOL] } <line_num>: 319,324
public void testEnumsWithEmpty() throws Exception { [EOL]     final ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     TestEnum result = m.readValue("\"\"", TestEnum.class); [EOL]     assertNull(result); [EOL] } <line_num>: 327,333
