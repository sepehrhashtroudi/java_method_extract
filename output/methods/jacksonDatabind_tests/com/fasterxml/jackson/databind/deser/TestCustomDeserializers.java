public DummyDeserializer(T v, Class<T> cls) { [EOL]     super(cls); [EOL]     value = v; [EOL] } <line_num>: 37,40
public CustomBean(int a, int b) { [EOL]     this.a = a; [EOL]     this.b = b; [EOL] } <line_num>: 62,65
public Immutable(int x0, int y0) { [EOL]     x = x0; [EOL]     y = y0; [EOL] } <line_num>: 102,105
public CustomKey(int id) { [EOL]     this.id = id; [EOL] } <line_num>: 112,112
@JsonCreator [EOL] public Model(@JsonProperty("map") @JsonDeserialize(keyUsing = CustomKeyDeserializer.class) Map<CustomKey, String> map) { [EOL]     this.map = new HashMap<CustomKey, String>(map); [EOL] } <line_num>: 121,125
@Override [EOL] public T deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     jp.skipChildren(); [EOL]     return value; [EOL] } <line_num>: 42,49
@Override [EOL] public CustomBean deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException { [EOL]     int a = 0, b = 0; [EOL]     JsonToken t = jp.getCurrentToken(); [EOL]     if (t == JsonToken.START_OBJECT) { [EOL]         t = jp.nextToken(); [EOL]     } else if (t != JsonToken.FIELD_NAME) { [EOL]         throw new Error(); [EOL]     } [EOL]     while (t == JsonToken.FIELD_NAME) { [EOL]         final String fieldName = jp.getCurrentName(); [EOL]         t = jp.nextToken(); [EOL]         if (t != JsonToken.VALUE_NUMBER_INT) { [EOL]             throw new JsonParseException("expecting number got " + t, jp.getCurrentLocation()); [EOL]         } [EOL]         if (fieldName.equals("a")) { [EOL]             a = jp.getIntValue(); [EOL]         } else if (fieldName.equals("b")) { [EOL]             b = jp.getIntValue(); [EOL]         } else { [EOL]             throw new Error(); [EOL]         } [EOL]         t = jp.nextToken(); [EOL]     } [EOL]     return new CustomBean(a, b); [EOL] } <line_num>: 70,96
public int getId() { [EOL]     return id; [EOL] } <line_num>: 114,114
@JsonProperty [EOL] @JsonSerialize(keyUsing = CustomKeySerializer.class) [EOL] public Map<CustomKey, String> getMap() { [EOL]     return map; [EOL] } <line_num>: 127,131
@Override [EOL] public void serialize(CustomKey value, JsonGenerator jgen, SerializerProvider provider) throws IOException { [EOL]     jgen.writeFieldName(String.valueOf(value.getId())); [EOL] } <line_num>: 135,138
@Override [EOL] public CustomKey deserializeKey(String key, DeserializationContext ctxt) throws IOException { [EOL]     return new CustomKey(Integer.valueOf(key)); [EOL] } <line_num>: 142,145
public void testCustomBeanDeserializer() throws Exception { [EOL]     String json = "{\"beans\":[{\"c\":{\"a\":10,\"b\":20},\"d\":\"hello, tatu\"}]}"; [EOL]     TestBeans beans = MAPPER.readValue(json, TestBeans.class); [EOL]     assertNotNull(beans); [EOL]     List<TestBean> results = beans.beans; [EOL]     assertNotNull(results); [EOL]     assertEquals(1, results.size()); [EOL]     TestBean bean = results.get(0); [EOL]     assertEquals("hello, tatu", bean.d); [EOL]     CustomBean c = bean.c; [EOL]     assertNotNull(c); [EOL]     assertEquals(10, c.a); [EOL]     assertEquals(20, c.b); [EOL]     json = "{\"beans\":[{\"c\":{\"b\":3,\"a\":-4},\"d\":\"\"}," + "{\"d\":\"abc\", \"c\":{\"b\":15}}]}"; [EOL]     beans = MAPPER.readValue(json, TestBeans.class); [EOL]     assertNotNull(beans); [EOL]     results = beans.beans; [EOL]     assertNotNull(results); [EOL]     assertEquals(2, results.size()); [EOL]     bean = results.get(0); [EOL]     assertEquals("", bean.d); [EOL]     c = bean.c; [EOL]     assertNotNull(c); [EOL]     assertEquals(-4, c.a); [EOL]     assertEquals(3, c.b); [EOL]     bean = results.get(1); [EOL]     assertEquals("abc", bean.d); [EOL]     c = bean.c; [EOL]     assertNotNull(c); [EOL]     assertEquals(0, c.a); [EOL]     assertEquals(15, c.b); [EOL] } <line_num>: 156,194
@Override [EOL] public Immutable convert(JsonNode value) { [EOL]     int x = value.path("x").asInt(); [EOL]     int y = value.path("y").asInt(); [EOL]     return new Immutable(x, y); [EOL] } <line_num>: 204,210
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(Immutable.class, new StdDelegatingDeserializer<Immutable>(new StdConverter<JsonNode, Immutable>() { [EOL]  [EOL]         @Override [EOL]         public Immutable convert(JsonNode value) { [EOL]             int x = value.path("x").asInt(); [EOL]             int y = value.path("y").asInt(); [EOL]             return new Immutable(x, y); [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     Immutable imm = mapper.readValue("{\"x\":3,\"y\":7}", Immutable.class); [EOL]     assertEquals(3, imm.x); [EOL]     assertEquals(7, imm.y); [EOL] } <line_num>: 197,218
public void testIssue882() throws Exception { [EOL]     Model original = new Model(Collections.singletonMap(new CustomKey(123), "test")); [EOL]     String json = MAPPER.writeValueAsString(original); [EOL]     Model deserialized = MAPPER.readValue(json, Model.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.map); [EOL]     assertEquals(1, deserialized.map.size()); [EOL] } <line_num>: 220,228
