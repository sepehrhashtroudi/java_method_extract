public MapImitator() { [EOL]     _map = new HashMap<String, Object>(); [EOL] } <line_num>: 26,28
public MapImitatorWithValue() { [EOL]     _map = new HashMap<String, int[]>(); [EOL] } <line_num>: 45,47
@JsonAnySetter [EOL] void addEntry(String key, Object value) { [EOL]     _map.put(key, value); [EOL] } <line_num>: 30,34
@JsonAnySetter [EOL] void addEntry(String key, int[] value) { [EOL]     _map.put(key, value); [EOL] } <line_num>: 49,53
@JsonAnySetter [EOL] void addEntry1(String key, Object value) { [EOL] } <line_num>: 59,60
@JsonAnySetter [EOL] void addEntry2(String key, Object value) { [EOL] } <line_num>: 61,62
@JsonAnySetter [EOL] void addEntry(String key, Object value) { [EOL]     map.put(key, value); [EOL] } <line_num>: 73,77
@JsonAnySetter [EOL] public void addAdditionalProperty(String key, Object value) { [EOL]     if (additionalProperties == null) [EOL]         additionalProperties = new HashMap<String, Object>(); [EOL]     additionalProperties.put(key, value); [EOL] } <line_num>: 84,88
public void setAdditionalProperties(Map<String, Object> additionalProperties) { [EOL]     this.additionalProperties = additionalProperties; [EOL] } <line_num>: 90,92
@JsonAnyGetter [EOL] public Map<String, Object> getAdditionalProperties() { [EOL]     return additionalProperties; [EOL] } <line_num>: 94,95
@JsonIgnore [EOL] public String getName() { [EOL]     return (String) additionalProperties.get("name"); [EOL] } <line_num>: 97,100
@JsonAnyGetter [EOL] public Map<String, JsonNode> getUndefinedProperties() { [EOL]     throw new IllegalStateException("Should not call parent version!"); [EOL] } <line_num>: 105,108
@Override [EOL] public Map<String, JsonNode> getUndefinedProperties() { [EOL]     return new HashMap<String, JsonNode>(); [EOL] } <line_num>: 113,116
public void testSimpleMapImitation() throws Exception { [EOL]     MapImitator mapHolder = MAPPER.readValue("{ \"a\" : 3, \"b\" : true }", MapImitator.class); [EOL]     Map<String, Object> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Integer.valueOf(3), result.get("a")); [EOL]     assertEquals(Boolean.TRUE, result.get("b")); [EOL] } <line_num>: 127,135
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] } <line_num>: 137,145
public void testBrokenWithDoubleAnnotations() throws Exception { [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         Broken b = MAPPER.readValue("{ \"a\" : 3 }", Broken.class); [EOL]         fail("Should have gotten an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Multiple 'any-setters'"); [EOL]     } [EOL] } <line_num>: 147,156
public void testIgnored() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     _testIgnorals(mapper); [EOL] } <line_num>: 159,164
public void testIgnored383() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     _testIgnorals(mapper); [EOL] } <line_num>: 166,171
public void testProblem744() throws Exception { [EOL]     Bean744 bean = MAPPER.readValue("{\"name\":\"Bob\"}", Bean744.class); [EOL]     assertNotNull(bean.additionalProperties); [EOL]     assertEquals(1, bean.additionalProperties.size()); [EOL]     assertEquals("Bob", bean.additionalProperties.get("name")); [EOL] } <line_num>: 173,179
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] } <line_num>: 181,185
private void _testIgnorals(ObjectMapper mapper) throws Exception { [EOL]     Ignored bean = mapper.readValue("{\"name\":\"Bob\", \"bogus\": [ 1, 2, 3], \"dummy\" : 13 }", Ignored.class); [EOL]     assertNull(bean.map.get("dummy")); [EOL]     assertEquals("[1, 2, 3]", "" + bean.map.get("bogus")); [EOL]     assertEquals("Bob", bean.map.get("name")); [EOL]     assertEquals(2, bean.map.size()); [EOL] } <line_num>: 193,201
