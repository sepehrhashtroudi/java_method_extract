public BrokenMap(boolean dummy) { [EOL]     super(); [EOL] } <line_num>: 35,35
public MapDeserializer() { [EOL]     super(CustomMap.class); [EOL] } <line_num>: 43,43
private KeyType(String v, boolean bogus) { [EOL]     value = v; [EOL] } <line_num>: 57,59
@Override [EOL] public CustomMap deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException { [EOL]     CustomMap result = new CustomMap(); [EOL]     result.put("x", jp.getText()); [EOL]     return result; [EOL] } <line_num>: 44,51
@JsonCreator [EOL] public static KeyType create(String v) { [EOL]     return new KeyType(v, true); [EOL] } <line_num>: 61,64
public void testUntypedMap() throws Exception { [EOL]     String JSON = "{ \"foo\" : \"bar\", \"crazy\" : true, \"null\" : null }"; [EOL]     @SuppressWarnings("unchecked") [EOL]     Map<String, Object> result = (Map<String, Object>) MAPPER.readValue(JSON, Object.class); [EOL]     assertNotNull(result); [EOL]     assertTrue(result instanceof Map<?, ?>); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("bar", result.get("foo")); [EOL]     assertEquals(Boolean.TRUE, result.get("crazy")); [EOL]     assertNull(result.get("null")); [EOL]     assertNull(result.get("bar")); [EOL]     assertNull(result.get(3)); [EOL] } <line_num>: 97,117
public void testUntypedMap2() throws Exception { [EOL]     String JSON = "{ \"a\" : \"x\" }"; [EOL]     @SuppressWarnings("unchecked") [EOL]     HashMap<String, Object> result = MAPPER.readValue(JSON, HashMap.class); [EOL]     assertNotNull(result); [EOL]     assertTrue(result instanceof Map<?, ?>); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("x", result.get("a")); [EOL] } <line_num>: 123,136
public void testUntypedMap3() throws Exception { [EOL]     String JSON = "{\"a\":[{\"a\":\"b\"},\"value\"]}"; [EOL]     Map<?, ?> result = MAPPER.readValue(JSON, Map.class); [EOL]     assertTrue(result instanceof Map<?, ?>); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.get("a"); [EOL]     assertNotNull(ob); [EOL]     Collection<?> list = (Collection<?>) ob; [EOL]     assertEquals(2, list.size()); [EOL]     JSON = "{ \"var1\":\"val1\", \"var2\":\"val2\", " + "\"subvars\": [" + " {  \"subvar1\" : \"subvar2\", \"x\" : \"y\" }, " + " { \"a\":1 } ]" + " }"; [EOL]     result = MAPPER.readValue(JSON, Map.class); [EOL]     assertTrue(result instanceof Map<?, ?>); [EOL]     assertEquals(3, result.size()); [EOL] } <line_num>: 141,161
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] } <line_num>: 170,174
public void testGenericMap() throws IOException { [EOL]     final Map<String, ObjectWrapper> map = MAPPER.readValue(UNTYPED_MAP_JSON, new TypeReference<Map<String, ObjectWrapper>>() { [EOL]     }); [EOL]     _doTestUntyped(map); [EOL] } <line_num>: 176,182
private void _doTestUntyped(final Map<String, ObjectWrapper> map) { [EOL]     assertEquals(Double.valueOf(42), map.get("double").getObject()); [EOL]     assertEquals("string", map.get("string").getObject()); [EOL]     assertEquals(Boolean.TRUE, map.get("boolean").getObject()); [EOL]     assertEquals(Collections.singletonList("list0"), map.get("list").getObject()); [EOL]     assertTrue(map.containsKey("null")); [EOL]     assertNull(map.get("null")); [EOL]     assertEquals(5, map.size()); [EOL] } <line_num>: 184,193
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     Map<?, ?> result = m.readValue(quote(""), Map.class); [EOL]     assertNull(result); [EOL] } <line_num>: 196,202
public void testExactStringIntMap() throws Exception { [EOL]     String JSON = "{ \"foo\" : 13, \"bar\" : -39, \n \"\" : 0 }"; [EOL]     Map<String, Integer> result = MAPPER.readValue(JSON, new TypeReference<HashMap<String, Integer>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(HashMap.class, result.getClass()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(13), result.get("foo")); [EOL]     assertEquals(Integer.valueOf(-39), result.get("bar")); [EOL]     assertEquals(Integer.valueOf(0), result.get("")); [EOL]     assertNull(result.get("foobar")); [EOL]     assertNull(result.get(" ")); [EOL] } <line_num>: 210,226
public void testIntBooleanMap() throws Exception { [EOL]     String JSON = "{ \"1\" : true, \"-1\" : false }"; [EOL]     Map<String, Integer> result = MAPPER.readValue(JSON, new TypeReference<HashMap<Integer, Boolean>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(HashMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(Integer.valueOf(1))); [EOL]     assertEquals(Boolean.FALSE, result.get(Integer.valueOf(-1))); [EOL]     assertNull(result.get("foobar")); [EOL]     assertNull(result.get(0)); [EOL] } <line_num>: 232,247
public void testExactStringStringMap() throws Exception { [EOL]     String JSON = "{ \"a\" : \"b\" }"; [EOL]     Map<String, Integer> result = MAPPER.readValue(JSON, new TypeReference<TreeMap<String, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(TreeMap.class, result.getClass()); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("b", result.get("a")); [EOL]     assertNull(result.get("b")); [EOL] } <line_num>: 249,262
public void testGenericStringIntMap() throws Exception { [EOL]     String JSON = "{ \"a\" : 1, \"b\" : 2, \"c\" : -99 }"; [EOL]     Map<String, Integer> result = MAPPER.readValue(JSON, new TypeReference<Map<String, Integer>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertTrue(result instanceof Map<?, ?>); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(-99), result.get("c")); [EOL]     assertEquals(Integer.valueOf(2), result.get("b")); [EOL]     assertEquals(Integer.valueOf(1), result.get("a")); [EOL]     assertNull(result.get("")); [EOL] } <line_num>: 271,286
public void testEnumMap() throws Exception { [EOL]     String JSON = "{ \"KEY1\" : \"\", \"WHATEVER\" : null }"; [EOL]     EnumMap<Key, String> result = MAPPER.readValue(JSON, new TypeReference<EnumMap<Key, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(EnumMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("", result.get(Key.KEY1)); [EOL]     assertTrue(result.containsKey(Key.WHATEVER)); [EOL]     assertNull(result.get(Key.WHATEVER)); [EOL]     assertFalse(result.containsKey(Key.KEY2)); [EOL]     assertNull(result.get(Key.KEY2)); [EOL] } <line_num>: 294,314
public void testMapWithEnums() throws Exception { [EOL]     String JSON = "{ \"KEY2\" : \"WHATEVER\" }"; [EOL]     Map<Enum<?>, Enum<?>> result = MAPPER.readValue(JSON, new TypeReference<Map<Key, Key>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertTrue(result instanceof Map<?, ?>); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Key.WHATEVER, result.get(Key.KEY2)); [EOL]     assertNull(result.get(Key.WHATEVER)); [EOL]     assertNull(result.get(Key.KEY1)); [EOL] } <line_num>: 316,331
public void testEnumPolymorphicSerializationTest() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<ITestType> testTypesList = new ArrayList<ITestType>(); [EOL]     testTypesList.add(ConcreteType.ONE); [EOL]     testTypesList.add(ConcreteType.TWO); [EOL]     ListContainer listContainer = new ListContainer(); [EOL]     listContainer.testTypes = testTypesList; [EOL]     String json = mapper.writeValueAsString(listContainer); [EOL]     listContainer = mapper.readValue(json, ListContainer.class); [EOL]     EnumMapContainer enumMapContainer = new EnumMapContainer(); [EOL]     EnumMap<KeyEnum, ITestType> testTypesMap = new EnumMap<KeyEnum, ITestType>(KeyEnum.class); [EOL]     testTypesMap.put(KeyEnum.A, ConcreteType.ONE); [EOL]     testTypesMap.put(KeyEnum.B, ConcreteType.TWO); [EOL]     enumMapContainer.testTypes = testTypesMap; [EOL]     json = mapper.writeValueAsString(enumMapContainer); [EOL]     enumMapContainer = mapper.readValue(json, EnumMapContainer.class); [EOL] } <line_num>: 333,351
public void testDateMap() throws Exception { [EOL]     Date date1 = new Date(123456000L); [EOL]     DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US); [EOL]     String JSON = "{ \"" + fmt.format(date1) + "\" : \"\", \"" + new Date(0).getTime() + "\" : null }"; [EOL]     HashMap<Date, String> result = MAPPER.readValue(JSON, new TypeReference<HashMap<Date, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(HashMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey(date1)); [EOL]     assertEquals("", result.get(new Date(123456000L))); [EOL]     assertTrue(result.containsKey(new Date(0))); [EOL]     assertNull(result.get(new Date(0))); [EOL] } <line_num>: 358,376
public void testCalendarMap() throws Exception { [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     c.setTimeInMillis(123456000L); [EOL]     DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US); [EOL]     String JSON = "{ \"" + fmt.format(c.getTime()) + "\" : \"\", \"" + new Date(0).getTime() + "\" : null }"; [EOL]     HashMap<Calendar, String> result = MAPPER.readValue(JSON, new TypeReference<HashMap<Calendar, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(HashMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey(c)); [EOL]     assertEquals("", result.get(c)); [EOL]     c.setTimeInMillis(0); [EOL]     assertTrue(result.containsKey(c)); [EOL]     assertNull(result.get(c)); [EOL] } <line_num>: 384,402
public void testUUIDKeyMap() throws Exception { [EOL]     UUID key = UUID.nameUUIDFromBytes("foobar".getBytes("UTF-8")); [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<UUID, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<UUID, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(UUID.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] } <line_num>: 405,416
public void testLocaleKeyMap() throws Exception { [EOL]     Locale key = Locale.CHINA; [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<Locale, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<Locale, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(Locale.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] } <line_num>: 418,429
public void testKeyWithCreator() throws Exception { [EOL]     KeyType key = MAPPER.readValue(quote("abc"), KeyType.class); [EOL]     assertEquals("abc", key.value); [EOL]     Map<KeyType, Integer> map = MAPPER.readValue("{\"foo\":3}", new TypeReference<Map<KeyType, Integer>>() { [EOL]     }); [EOL]     assertEquals(1, map.size()); [EOL]     key = map.keySet().iterator().next(); [EOL]     assertEquals("foo", key.value); [EOL] } <line_num>: 432,442
public void testMapWithDeserializer() throws IOException { [EOL]     CustomMap result = MAPPER.readValue(quote("xyz"), CustomMap.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("xyz", result.get("x")); [EOL] } <line_num>: 454,459
public void testMapError() throws Exception { [EOL]     try { [EOL]         Object result = MAPPER.readValue("[ 1, 2 ]", new TypeReference<Map<String, String>>() { [EOL]         }); [EOL]         fail("Expected an exception, but got result value: " + result); [EOL]     } catch (JsonMappingException jex) { [EOL]         verifyException(jex, "START_ARRAY"); [EOL]     } [EOL] } <line_num>: 467,476
public void testNoCtorMap() throws Exception { [EOL]     try { [EOL]         BrokenMap result = MAPPER.readValue("{ \"a\" : 3 }", BrokenMap.class); [EOL]         assertNull(result); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "no default constructor found"); [EOL]     } [EOL] } <line_num>: 478,488
