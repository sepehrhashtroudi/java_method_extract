public ListDeserializer() { [EOL]     super(CustomList.class); [EOL] } <line_num>: 26,26
@Override [EOL] public CustomList deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException { [EOL]     CustomList result = new CustomList(); [EOL]     result.add(jp.getText()); [EOL]     return result; [EOL] } <line_num>: 28,35
public void testUntypedList() throws Exception { [EOL]     String JSON = "[ \"text!\", true, null, 23 ]"; [EOL]     Object value = MAPPER.readValue(JSON, Object.class); [EOL]     assertNotNull(value); [EOL]     assertTrue(value instanceof ArrayList<?>); [EOL]     List<?> result = (List<?>) value; [EOL]     assertEquals(4, result.size()); [EOL]     assertEquals("text!", result.get(0)); [EOL]     assertEquals(Boolean.TRUE, result.get(1)); [EOL]     assertNull(result.get(2)); [EOL]     assertEquals(Integer.valueOf(23), result.get(3)); [EOL] } <line_num>: 59,77
public void testExactStringCollection() throws Exception { [EOL]     String JSON = "[ \"a\", \"b\" ]"; [EOL]     List<String> result = MAPPER.readValue(JSON, new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(ArrayList.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("a", result.get(0)); [EOL]     assertEquals("b", result.get(1)); [EOL] } <line_num>: 79,91
public void testHashSet() throws Exception { [EOL]     String JSON = "[ \"KEY1\", \"KEY2\" ]"; [EOL]     EnumSet<Key> result = MAPPER.readValue(JSON, new TypeReference<EnumSet<Key>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertTrue(EnumSet.class.isAssignableFrom(result.getClass())); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.contains(Key.KEY1)); [EOL]     assertTrue(result.contains(Key.KEY2)); [EOL]     assertFalse(result.contains(Key.WHATEVER)); [EOL] } <line_num>: 93,105
public void testCustomDeserializer() throws IOException { [EOL]     CustomList result = MAPPER.readValue(quote("abc"), CustomList.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("abc", result.get(0)); [EOL] } <line_num>: 108,113
@SuppressWarnings("unchecked") [EOL] public void testImplicitArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true); [EOL]     List<Integer> ints = mapper.readValue("4", List.class); [EOL]     assertEquals(1, ints.size()); [EOL]     assertEquals(Integer.valueOf(4), ints.get(0)); [EOL]     List<String> strings = mapper.readValue(quote("abc"), new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(1, strings.size()); [EOL]     assertEquals("abc", strings.get(0)); [EOL]     int[] intArray = mapper.readValue("-7", int[].class); [EOL]     assertEquals(1, intArray.length); [EOL]     assertEquals(-7, intArray[0]); [EOL]     String[] stringArray = mapper.readValue(quote("xyz"), String[].class); [EOL]     assertEquals(1, stringArray.length); [EOL]     assertEquals("xyz", stringArray[0]); [EOL]     List<XBean> xbeanList = mapper.readValue("{\"x\":4}", new TypeReference<List<XBean>>() { [EOL]     }); [EOL]     assertEquals(1, xbeanList.size()); [EOL]     assertEquals(XBean.class, xbeanList.get(0).getClass()); [EOL]     Object ob = mapper.readValue("{\"x\":29}", XBean[].class); [EOL]     XBean[] xbeanArray = (XBean[]) ob; [EOL]     assertEquals(1, xbeanArray.length); [EOL]     assertEquals(XBean.class, xbeanArray[0].getClass()); [EOL] } <line_num>: 117,148
public void testFromEmptyString() throws Exception { [EOL]     ObjectReader r = MAPPER.reader(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT); [EOL]     List<?> result = r.withType(List.class).readValue(quote("")); [EOL]     assertNull(result); [EOL] } <line_num>: 151,156
public void testArrayBlockingQueue() throws Exception { [EOL]     ArrayBlockingQueue<?> q = MAPPER.readValue("[1, 2, 3]", ArrayBlockingQueue.class); [EOL]     assertNotNull(q); [EOL]     assertEquals(3, q.size()); [EOL]     assertEquals(Integer.valueOf(1), q.take()); [EOL]     assertEquals(Integer.valueOf(2), q.take()); [EOL]     assertEquals(Integer.valueOf(3), q.take()); [EOL] } <line_num>: 159,168
public void testIterableWithStrings() throws Exception { [EOL]     String JSON = "{ \"values\":[\"a\",\"b\"]}"; [EOL]     ListAsIterable w = MAPPER.readValue(JSON, ListAsIterable.class); [EOL]     assertNotNull(w); [EOL]     assertNotNull(w.values); [EOL]     Iterator<String> it = w.values.iterator(); [EOL]     assertTrue(it.hasNext()); [EOL]     assertEquals("a", it.next()); [EOL]     assertEquals("b", it.next()); [EOL]     assertFalse(it.hasNext()); [EOL] } <line_num>: 171,182
public void testIterableWithBeans() throws Exception { [EOL]     String JSON = "{ \"nums\":[{\"x\":1},{\"x\":2}]}"; [EOL]     ListAsIterableX w = MAPPER.readValue(JSON, ListAsIterableX.class); [EOL]     assertNotNull(w); [EOL]     assertNotNull(w.nums); [EOL]     Iterator<XBean> it = w.nums.iterator(); [EOL]     assertTrue(it.hasNext()); [EOL]     XBean xb = it.next(); [EOL]     assertNotNull(xb); [EOL]     assertEquals(1, xb.x); [EOL]     xb = it.next(); [EOL]     assertEquals(2, xb.x); [EOL]     assertFalse(it.hasNext()); [EOL] } <line_num>: 184,198
