@JsonProperty("y") [EOL] public void setX(int v) { [EOL]     value = v; [EOL] } <line_num>: 23,24
public void testEnumIndexes() { [EOL]     int max = 0; [EOL]     for (DeserializationFeature f : DeserializationFeature.values()) { [EOL]         max = Math.max(max, f.ordinal()); [EOL]     } [EOL]     if (max >= 31) { [EOL]         fail("Max number of DeserializationFeature enums reached: " + max); [EOL]     } [EOL] } <line_num>: 43,53
public void testDefaults() { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     DeserializationConfig cfg = m.getDeserializationConfig(); [EOL]     assertTrue(cfg.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     assertTrue(cfg.isEnabled(MapperFeature.AUTO_DETECT_SETTERS)); [EOL]     assertTrue(cfg.isEnabled(MapperFeature.AUTO_DETECT_CREATORS)); [EOL]     assertTrue(cfg.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)); [EOL]     assertTrue(cfg.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)); [EOL]     assertFalse(cfg.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)); [EOL]     assertFalse(cfg.isEnabled(DeserializationFeature.USE_BIG_INTEGER_FOR_INTS)); [EOL]     assertTrue(cfg.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL] } <line_num>: 55,72
public void testOverrideIntrospectors() { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     DeserializationConfig cfg = m.getDeserializationConfig(); [EOL]     cfg = cfg.with((ClassIntrospector) null); [EOL]     cfg = cfg.with((AnnotationIntrospector) null); [EOL]     assertNull(cfg.getAnnotationIntrospector()); [EOL] } <line_num>: 74,82
public void testAnnotationsDisabled() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.getDeserializationConfig().isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     AnnoBean bean = m.readValue("{ \"y\" : 0 }", AnnoBean.class); [EOL]     assertEquals(0, bean.value); [EOL]     m = new ObjectMapper(); [EOL]     m.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     bean = m.readValue("{ \"x\" : 0 }", AnnoBean.class); [EOL]     assertEquals(0, bean.value); [EOL] } <line_num>: 84,98
public void testEnumsWhenDisabled() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals(Alpha.B, m.readValue(quote("B"), Alpha.class)); [EOL]     m = new ObjectMapper(); [EOL]     m.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     assertEquals(Alpha.B, m.readValue(quote("B"), Alpha.class)); [EOL] } <line_num>: 101,110
public void testNoAccessOverrides() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.disable(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS); [EOL]     SimpleBean bean = m.readValue("{\"x\":1,\"y\":2}", SimpleBean.class); [EOL]     assertEquals(1, bean.x); [EOL]     assertEquals(2, bean.y); [EOL] } <line_num>: 112,119
