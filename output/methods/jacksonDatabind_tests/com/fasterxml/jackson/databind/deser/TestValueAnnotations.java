public RootStringImpl(String x) { [EOL]     _contents = x; [EOL] } <line_num>: 35,35
public RootInterfaceImpl() { [EOL] } <line_num>: 50,50
public RootStringDeserializer() { [EOL]     super(RootString.class); [EOL] } <line_num>: 68,68
public StringWrapper(String s) { [EOL]     _string = s; [EOL] } <line_num>: 156,156
public String contents(); <line_num>: 28,28
@Override [EOL] public String contents() { [EOL]     return _contents; [EOL] } <line_num>: 37,38
public String contents2() { [EOL]     return _contents; [EOL] } <line_num>: 39,39
public String getA(); <line_num>: 44,44
@Override [EOL] public String getA() { [EOL]     return a; [EOL] } <line_num>: 52,53
@Override [EOL] public RootString deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     if (jp.getCurrentToken() == JsonToken.VALUE_STRING) { [EOL]         return new RootStringImpl(jp.getText()); [EOL]     } [EOL]     throw ctxt.mappingException(_valueClass); [EOL] } <line_num>: 70,78
@JsonDeserialize(as = TreeSet.class) [EOL] public void setStrings(Collection<String> s) { [EOL]     _strings = s; [EOL] } <line_num>: 97,101
@JsonDeserialize(as = TreeMap.class) [EOL] public void setStrings(Map<String, String> s) { [EOL]     _data = s; [EOL] } <line_num>: 115,119
@JsonDeserialize(as = String[].class) [EOL] public void setStrings(Object[] o) { [EOL]     _strings = (String[]) o; [EOL] } <line_num>: 129,134
@JsonDeserialize(as = String.class) [EOL] public void setStrings(Collection<String> s) { [EOL] } <line_num>: 142,143
@JsonDeserialize(keyAs = StringWrapper.class) [EOL] public void setMap(Map<Object, String> m) { [EOL]     _map = m; [EOL] } <line_num>: 163,168
@JsonDeserialize(keyAs = Integer.class) [EOL] public void setStrings(Map<String, String> m) { [EOL] } <line_num>: 174,175
@JsonDeserialize(contentAs = StringWrapper.class) [EOL] public void setList(List<?> l) { [EOL]     _list = l; [EOL] } <line_num>: 188,191
@JsonDeserialize(contentAs = String.class) [EOL] public void setValue(Object x) { [EOL] } <line_num>: 202,203
@JsonDeserialize(contentAs = Long.class) [EOL] public void setData(Object[] o) { [EOL]     _data = o; [EOL] } <line_num>: 210,214
@JsonDeserialize(contentAs = Integer.class) [EOL] public void setMap(Map<Object, Object> m) { [EOL]     _map = m; [EOL] } <line_num>: 221,225
public void testOverrideClassValid() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     CollectionHolder result = m.readValue("{ \"strings\" : [ \"test\" ] }", CollectionHolder.class); [EOL]     Collection<String> strs = result._strings; [EOL]     assertEquals(1, strs.size()); [EOL]     assertEquals(TreeSet.class, strs.getClass()); [EOL]     assertEquals("test", strs.iterator().next()); [EOL] } <line_num>: 234,244
public void testOverrideMapValid() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapHolder result = m.readValue("{ \"strings\" :  { \"a\" : 3 } }", MapHolder.class); [EOL]     Map<String, String> strs = result._data; [EOL]     assertEquals(1, strs.size()); [EOL]     assertEquals(TreeMap.class, strs.getClass()); [EOL]     String value = strs.get("a"); [EOL]     assertEquals("3", value); [EOL] } <line_num>: 246,258
public void testOverrideArrayClass() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     ArrayHolder result = m.readValue("{ \"strings\" : [ \"test\" ] }", ArrayHolder.class); [EOL]     String[] strs = result._strings; [EOL]     assertEquals(1, strs.length); [EOL]     assertEquals(String[].class, strs.getClass()); [EOL]     assertEquals("test", strs[0]); [EOL] } <line_num>: 260,270
public void testOverrideClassInvalid() throws Exception { [EOL]     try { [EOL]         BrokenCollectionHolder result = new ObjectMapper().readValue("{ \"strings\" : [ ] }", BrokenCollectionHolder.class); [EOL]         fail("Expected a failure, but got results: " + result); [EOL]     } catch (JsonMappingException jme) { [EOL]         verifyException(jme, "is not assignable to"); [EOL]     } [EOL] } <line_num>: 272,282
public void testRootInterfaceAs() throws Exception { [EOL]     RootInterface value = new ObjectMapper().readValue("{\"a\":\"abc\" }", RootInterface.class); [EOL]     assertTrue(value instanceof RootInterfaceImpl); [EOL]     assertEquals("abc", value.getA()); [EOL] } <line_num>: 290,295
public void testRootInterfaceUsing() throws Exception { [EOL]     RootString value = new ObjectMapper().readValue("\"xxx\"", RootString.class); [EOL]     assertTrue(value instanceof RootString); [EOL]     assertEquals("xxx", value.contents()); [EOL] } <line_num>: 297,302
public void testRootListAs() throws Exception { [EOL]     RootMap value = new ObjectMapper().readValue("{\"a\":\"b\"}", RootMap.class); [EOL]     assertEquals(1, value.size()); [EOL]     Object v2 = value.get("a"); [EOL]     assertEquals(RootStringImpl.class, v2.getClass()); [EOL]     assertEquals("b", ((RootString) v2).contents()); [EOL] } <line_num>: 304,311
public void testRootMapAs() throws Exception { [EOL]     RootList value = new ObjectMapper().readValue("[ \"c\" ]", RootList.class); [EOL]     assertEquals(1, value.size()); [EOL]     Object v2 = value.get(0); [EOL]     assertEquals(RootStringImpl.class, v2.getClass()); [EOL]     assertEquals("c", ((RootString) v2).contents()); [EOL] } <line_num>: 313,320
@SuppressWarnings("unchecked") [EOL] public void testOverrideKeyClassValid() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapKeyHolder result = m.readValue("{ \"map\" : { \"xxx\" : \"yyy\" } }", MapKeyHolder.class); [EOL]     Map<StringWrapper, String> map = (Map<StringWrapper, String>) (Map<?, ?>) result._map; [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<StringWrapper, String> en = map.entrySet().iterator().next(); [EOL]     StringWrapper key = en.getKey(); [EOL]     assertEquals(StringWrapper.class, key.getClass()); [EOL]     assertEquals("xxx", key._string); [EOL]     assertEquals("yyy", en.getValue()); [EOL] } <line_num>: 328,341
public void testOverrideKeyClassInvalid() throws Exception { [EOL]     try { [EOL]         BrokenMapKeyHolder result = new ObjectMapper().readValue("{ \"123\" : \"xxx\" }", BrokenMapKeyHolder.class); [EOL]         fail("Expected a failure, but got results: " + result); [EOL]     } catch (JsonMappingException jme) { [EOL]         verifyException(jme, "is not assignable to"); [EOL]     } [EOL] } <line_num>: 343,353
@SuppressWarnings("unchecked") [EOL] public void testOverrideContentClassValid() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     ListContentHolder result = m.readValue("{ \"list\" : [ \"abc\" ] }", ListContentHolder.class); [EOL]     List<StringWrapper> list = (List<StringWrapper>) result._list; [EOL]     assertEquals(1, list.size()); [EOL]     Object value = list.get(0); [EOL]     assertEquals(StringWrapper.class, value.getClass()); [EOL]     assertEquals("abc", ((StringWrapper) value)._string); [EOL] } <line_num>: 361,371
public void testOverrideArrayContents() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     ArrayContentHolder result = m.readValue("{ \"data\" : [ 1, 2, 3 ] }", ArrayContentHolder.class); [EOL]     Object[] data = result._data; [EOL]     assertEquals(3, data.length); [EOL]     assertEquals(Long[].class, data.getClass()); [EOL]     assertEquals(1L, data[0]); [EOL]     assertEquals(2L, data[1]); [EOL]     assertEquals(3L, data[2]); [EOL] } <line_num>: 373,384
public void testOverrideMapContents() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapContentHolder result = m.readValue("{ \"map\" : { \"a\" : 9 } }", MapContentHolder.class); [EOL]     Map<Object, Object> map = result._map; [EOL]     assertEquals(1, map.size()); [EOL]     Object ob = map.values().iterator().next(); [EOL]     assertEquals(Integer.class, ob.getClass()); [EOL]     assertEquals(Integer.valueOf(9), ob); [EOL] } <line_num>: 386,396
