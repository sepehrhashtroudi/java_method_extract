@JsonCreator [EOL] BooleanWrapper(Boolean value) { [EOL]     b = value; [EOL] } <line_num>: 23,23
@JsonCreator [EOL] StringWrapper(String value) { [EOL]     str = value; [EOL] } <line_num>: 28,30
public StringMap() { [EOL] } <line_num>: 50,50
public KeyTypeCtor(String v) { [EOL]     value = v; [EOL] } <line_num>: 62,62
private KeyTypeFactory(String v, boolean foo) { [EOL]     value = v; [EOL] } <line_num>: 67,67
public abstract Map<K, V> getEntries(); <line_num>: 43,43
@Override [EOL] public Map<String, Long> getEntries() { [EOL]     return entries; [EOL] } <line_num>: 52,53
@JsonCreator [EOL] public static KeyTypeFactory create(String str) { [EOL]     return new KeyTypeFactory(str, true); [EOL] } <line_num>: 69,72
public void testMapSubClass() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     MapSubClass result = mapper.readValue("{\"a\":true }", MapSubClass.class); [EOL]     assertEquals(1, result.size()); [EOL]     Object value = result.get("a"); [EOL]     assertEquals(BooleanWrapper.class, value.getClass()); [EOL]     BooleanWrapper bw = (BooleanWrapper) value; [EOL]     assertEquals(Boolean.TRUE, bw.b); [EOL] } <line_num>: 84,94
public void testMapWrapper() throws Exception { [EOL]     StringMap value = new ObjectMapper().readValue("{\"entries\":{\"a\":9} }", StringMap.class); [EOL]     assertNotNull(value.getEntries()); [EOL]     assertEquals(1, value.getEntries().size()); [EOL]     assertEquals(Long.valueOf(9), value.getEntries().get("a")); [EOL] } <line_num>: 96,103
public void testIntermediateTypes() throws Exception { [EOL]     StringStringWrapperMap result = new ObjectMapper().readValue("{\"a\":\"b\"}", StringStringWrapperMap.class); [EOL]     assertEquals(1, result.size()); [EOL]     Object value = result.get("a"); [EOL]     assertNotNull(value); [EOL]     assertEquals(value.getClass(), StringWrapper.class); [EOL]     assertEquals("b", ((StringWrapper) value).str); [EOL] } <line_num>: 105,114
public void testAnnotatedMap() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AnnotatedMap result = mapper.readValue("{\"a\":true }", AnnotatedMap.class); [EOL]     assertEquals(1, result.size()); [EOL]     Map.Entry<Object, Object> en = result.entrySet().iterator().next(); [EOL]     assertEquals(StringWrapper.class, en.getKey().getClass()); [EOL]     assertEquals(BooleanWrapper.class, en.getValue().getClass()); [EOL]     assertEquals("a", ((StringWrapper) en.getKey()).str); [EOL]     assertEquals(Boolean.TRUE, ((BooleanWrapper) en.getValue()).b); [EOL] } <line_num>: 125,136
public void testKeyViaCtor() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<KeyTypeCtor, Integer> map = mapper.readValue("{\"a\":123}", TypeFactory.defaultInstance().constructMapType(HashMap.class, KeyTypeCtor.class, Integer.class)); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(123), entry.getValue()); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(KeyTypeCtor.class, key.getClass()); [EOL]     assertEquals("a", ((KeyTypeCtor) key).value); [EOL] } <line_num>: 144,155
public void testKeyViaFactory() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<KeyTypeCtor, Integer> map = mapper.readValue("{\"a\":123}", TypeFactory.defaultInstance().constructMapType(HashMap.class, KeyTypeFactory.class, Integer.class)); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(123), entry.getValue()); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(KeyTypeFactory.class, key.getClass()); [EOL]     assertEquals("a", ((KeyTypeFactory) key).value); [EOL] } <line_num>: 157,168
