protected ConvertingBean(int x, int y) { [EOL]     this.x = x; [EOL]     this.y = y; [EOL] } <line_num>: 16,19
public Point(int v1, int v2) { [EOL]     x = v1; [EOL]     y = v2; [EOL] } <line_num>: 26,29
public ConvertingBeanContainer() { [EOL] } <line_num>: 36,36
public ConvertingBeanContainer(ConvertingBean... beans) { [EOL]     values = Arrays.asList(beans); [EOL] } <line_num>: 37,39
protected PointWrapper() { [EOL] } <line_num>: 61,61
public PointWrapper(int x, int y) { [EOL]     value = new Point(x, y); [EOL] } <line_num>: 62,64
@Override [EOL] public ConvertingBean convert(int[] values) { [EOL]     return new ConvertingBean(values[0], values[1]); [EOL] } <line_num>: 44,47
@Override [EOL] public Point convert(int[] value) { [EOL]     return new Point(value[0], value[1]); [EOL] } <line_num>: 52,54
@Override [EOL] public String convert(String value) { [EOL]     return value.toLowerCase(); [EOL] } <line_num>: 84,87
public void testClassAnnotationSimple() throws Exception { [EOL]     ConvertingBean bean = objectReader(ConvertingBean.class).readValue("[1,2]"); [EOL]     assertNotNull(bean); [EOL]     assertEquals(1, bean.x); [EOL]     assertEquals(2, bean.y); [EOL] } <line_num>: 107,113
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] } <line_num>: 115,123
public void testPropertyAnnotationSimple() throws Exception { [EOL]     PointWrapper wrapper = objectReader(PointWrapper.class).readValue("{\"value\":[3,4]}"); [EOL]     assertNotNull(wrapper); [EOL]     assertNotNull(wrapper.value); [EOL]     assertEquals(3, wrapper.value.x); [EOL]     assertEquals(4, wrapper.value.y); [EOL] } <line_num>: 125,132
public void testPropertyAnnotationLowerCasing() throws Exception { [EOL]     LowerCaseText text = objectReader(LowerCaseText.class).readValue("{\"text\":\"Yay!\"}"); [EOL]     assertNotNull(text); [EOL]     assertNotNull(text.text); [EOL]     assertEquals("yay!", text.text); [EOL] } <line_num>: 134,140
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] } <line_num>: 142,149
public void testPropertyAnnotationForArrays() throws Exception { [EOL]     PointListWrapperArray array = objectReader(PointListWrapperArray.class).readValue("{\"values\":[[4,5],[5,4]]}"); [EOL]     assertNotNull(array); [EOL]     assertNotNull(array.values); [EOL]     assertEquals(2, array.values.length); [EOL]     assertEquals(5, array.values[1].x); [EOL] } <line_num>: 151,159
public void testPropertyAnnotationForLists() throws Exception { [EOL]     PointListWrapperList array = objectReader(PointListWrapperList.class).readValue("{\"values\":[[7,8],[8,7]]}"); [EOL]     assertNotNull(array); [EOL]     assertNotNull(array.values); [EOL]     assertEquals(2, array.values.size()); [EOL]     assertEquals(7, array.values.get(0).x); [EOL] } <line_num>: 161,169
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     PointListWrapperMap map = objectReader(PointListWrapperMap.class).readValue("{\"values\":{\"a\":[1,2]}}"); [EOL]     assertNotNull(map); [EOL]     assertNotNull(map.values); [EOL]     assertEquals(1, map.values.size()); [EOL]     Point p = map.values.get("a"); [EOL]     assertNotNull(p); [EOL]     assertEquals(1, p.x); [EOL]     assertEquals(2, p.y); [EOL] } <line_num>: 171,182
