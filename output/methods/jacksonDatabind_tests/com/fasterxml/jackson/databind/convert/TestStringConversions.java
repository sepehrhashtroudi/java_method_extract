public void testSimple() { [EOL]     assertEquals(Boolean.TRUE, MAPPER.convertValue("true", Boolean.class)); [EOL]     assertEquals(Integer.valueOf(-3), MAPPER.convertValue("  -3 ", Integer.class)); [EOL]     assertEquals(Long.valueOf(77), MAPPER.convertValue("77", Long.class)); [EOL]     int[] ints = { 1, 2, 3 }; [EOL]     List<Integer> Ints = new ArrayList<Integer>(); [EOL]     Ints.add(1); [EOL]     Ints.add(2); [EOL]     Ints.add(3); [EOL]     assertArrayEquals(ints, MAPPER.convertValue(Ints, int[].class)); [EOL] } <line_num>: 14,27
public void testStringsToInts() { [EOL]     assertArrayEquals(new int[] { 1, 2, 3, 4, -1, 0 }, MAPPER.convertValue("1  2 3    4  -1 0".split("\\s+"), int[].class)); [EOL] } <line_num>: 29,34
public void testBytesToBase64AndBack() throws Exception { [EOL]     byte[] input = new byte[] { 1, 2, 3, 4, 5, 6, 7 }; [EOL]     String encoded = MAPPER.convertValue(input, String.class); [EOL]     assertNotNull(encoded); [EOL]     byte[] result = MAPPER.convertValue(encoded, byte[].class); [EOL]     assertArrayEquals(input, result); [EOL] } <line_num>: 36,43
public void testBytestoCharArray() throws Exception { [EOL]     byte[] input = new byte[] { 1, 2, 3, 4, 5, 6, 7 }; [EOL]     char[] expEncoded = MAPPER.convertValue(input, String.class).toCharArray(); [EOL]     char[] actEncoded = MAPPER.convertValue(input, char[].class); [EOL]     assertArrayEquals(expEncoded, actEncoded); [EOL] } <line_num>: 45,53
