public void testMapToMap() { [EOL]     Map<String, Integer> input = new LinkedHashMap<String, Integer>(); [EOL]     input.put("A", Integer.valueOf(3)); [EOL]     input.put("B", Integer.valueOf(-4)); [EOL]     Map<AB, String> output = mapper.convertValue(input, new TypeReference<Map<AB, String>>() { [EOL]     }); [EOL]     assertEquals(2, output.size()); [EOL]     assertEquals("3", output.get(AB.A)); [EOL]     assertEquals("-4", output.get(AB.B)); [EOL]     Map<String, Integer> roundtrip = mapper.convertValue(input, new TypeReference<TreeMap<String, Integer>>() { [EOL]     }); [EOL]     assertEquals(2, roundtrip.size()); [EOL]     assertEquals(Integer.valueOf(3), roundtrip.get("A")); [EOL]     assertEquals(Integer.valueOf(-4), roundtrip.get("B")); [EOL] } <line_num>: 24,41
public void testMapToBean() { [EOL]     EnumMap<AB, String> map = new EnumMap<AB, String>(AB.class); [EOL]     map.put(AB.A, "   17"); [EOL]     map.put(AB.B, " -1"); [EOL]     Bean bean = mapper.convertValue(map, Bean.class); [EOL]     assertEquals(Integer.valueOf(17), bean.A); [EOL]     assertEquals(" -1", bean.B); [EOL] } <line_num>: 43,51
public void testBeanToMap() { [EOL]     Bean bean = new Bean(); [EOL]     bean.A = 129; [EOL]     bean.B = "13"; [EOL]     EnumMap<AB, String> result = mapper.convertValue(bean, new TypeReference<EnumMap<AB, String>>() { [EOL]     }); [EOL]     assertEquals("129", result.get(AB.A)); [EOL]     assertEquals("13", result.get(AB.B)); [EOL] } <line_num>: 53,62
