public void testNullXform() throws Exception { [EOL]     assertNull(mapper.convertValue(null, Integer.class)); [EOL]     assertNull(mapper.convertValue(null, String.class)); [EOL]     assertNull(mapper.convertValue(null, byte[].class)); [EOL] } <line_num>: 19,27
public void testArrayIdentityTransforms() throws Exception { [EOL]     verifyByteArrayConversion(bytes(), byte[].class); [EOL]     verifyShortArrayConversion(shorts(), short[].class); [EOL]     verifyIntArrayConversion(ints(), int[].class); [EOL]     verifyLongArrayConversion(longs(), long[].class); [EOL]     verifyFloatArrayConversion(floats(), float[].class); [EOL]     verifyDoubleArrayConversion(doubles(), float[].class); [EOL] } <line_num>: 34,45
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] } <line_num>: 47,56
public void testShortArrayToX() throws Exception { [EOL]     short[] data = shorts(); [EOL]     verifyShortArrayConversion(data, byte[].class); [EOL]     verifyShortArrayConversion(data, int[].class); [EOL]     verifyShortArrayConversion(data, long[].class); [EOL] } <line_num>: 58,64
public void testIntArrayToX() throws Exception { [EOL]     int[] data = ints(); [EOL]     verifyIntArrayConversion(data, byte[].class); [EOL]     verifyIntArrayConversion(data, short[].class); [EOL]     verifyIntArrayConversion(data, long[].class); [EOL]     List<Number> expNums = _numberList(data, data.length); [EOL]     List<Integer> actNums = mapper.convertValue(data, new TypeReference<List<Integer>>() { [EOL]     }); [EOL]     assertEquals(expNums, actNums); [EOL] } <line_num>: 66,77
public void testLongArrayToX() throws Exception { [EOL]     long[] data = longs(); [EOL]     verifyLongArrayConversion(data, byte[].class); [EOL]     verifyLongArrayConversion(data, short[].class); [EOL]     verifyLongArrayConversion(data, int[].class); [EOL]     List<Number> expNums = _numberList(data, data.length); [EOL]     List<Long> actNums = mapper.convertValue(data, new TypeReference<List<Long>>() { [EOL]     }); [EOL]     assertEquals(expNums, actNums); [EOL] } <line_num>: 79,89
public void testOverflows() { [EOL]     try { [EOL]         mapper.convertValue(new int[] { 1000 }, byte[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG_BYTE); [EOL]     } [EOL]     try { [EOL]         mapper.convertValue(new int[] { -99999 }, short[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL]     try { [EOL]         mapper.convertValue(new long[] { Long.MAX_VALUE }, int[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL]     BigInteger biggie = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     biggie.add(BigInteger.ONE); [EOL]     List<BigInteger> l = new ArrayList<BigInteger>(); [EOL]     l.add(biggie); [EOL]     try { [EOL]         mapper.convertValue(l, int[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL] } <line_num>: 91,122
private byte[] bytes() { [EOL]     return new byte[] { 1, -1, 0, 98, 127 }; [EOL] } <line_num>: 132,132
private short[] shorts() { [EOL]     return new short[] { 1, -1, 0, 98, 127 }; [EOL] } <line_num>: 133,133
private int[] ints() { [EOL]     return new int[] { 1, -1, 0, 98, 127 }; [EOL] } <line_num>: 134,134
private long[] longs() { [EOL]     return new long[] { 1, -1, 0, 98, 127 }; [EOL] } <line_num>: 135,135
private double[] doubles() { [EOL]     return new double[] { 0.0, 0.25, -0.125, 10.5, 9875.0 }; [EOL] } <line_num>: 139,139
private float[] floats() { [EOL]     return new float[] { 0.0f, 0.25f, -0.125f, 10.5f, 9875.0f }; [EOL] } <line_num>: 140,142
private <T> void verifyByteArrayConversion(byte[] data, Class<T> arrayType) { [EOL]     T result = _convert(data, arrayType); [EOL]     verifyIntegralArrays(data, result, data.length); [EOL] } <line_num>: 144,147
private <T> void verifyShortArrayConversion(short[] data, Class<T> arrayType) { [EOL]     T result = _convert(data, arrayType); [EOL]     verifyIntegralArrays(data, result, data.length); [EOL] } <line_num>: 148,151
private <T> void verifyIntArrayConversion(int[] data, Class<T> arrayType) { [EOL]     T result = _convert(data, arrayType); [EOL]     verifyIntegralArrays(data, result, data.length); [EOL] } <line_num>: 152,155
private <T> void verifyLongArrayConversion(long[] data, Class<T> arrayType) { [EOL]     T result = _convert(data, arrayType); [EOL]     verifyIntegralArrays(data, result, data.length); [EOL] } <line_num>: 156,159
private <T> void verifyFloatArrayConversion(float[] data, Class<T> arrayType) { [EOL]     T result = _convert(data, arrayType); [EOL]     verifyDoubleArrays(data, result, data.length); [EOL] } <line_num>: 160,163
private <T> void verifyDoubleArrayConversion(double[] data, Class<T> arrayType) { [EOL]     T result = _convert(data, arrayType); [EOL]     verifyDoubleArrays(data, result, data.length); [EOL] } <line_num>: 164,167
private <T> T _convert(Object input, Class<T> outputType) { [EOL]     if (!outputType.isArray()) [EOL]         throw new IllegalArgumentException(); [EOL]     if (!outputType.getComponentType().isPrimitive()) [EOL]         throw new IllegalArgumentException(); [EOL]     T result = mapper.convertValue(input, outputType); [EOL]     assertNotNull(result); [EOL]     assertEquals(outputType, result.getClass()); [EOL]     return result; [EOL] } <line_num>: 169,179
private List<Number> _numberList(Object numberArray, int size) { [EOL]     ArrayList<Number> result = new ArrayList<Number>(size); [EOL]     for (int i = 0; i < size; ++i) { [EOL]         result.add((Number) Array.get(numberArray, i)); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 181,188
private void verifyIntegralArrays(Object inputArray, Object outputArray, int size) { [EOL]     for (int i = 0; i < size; ++i) { [EOL]         Number n1 = (Number) Array.get(inputArray, i); [EOL]         Number n2 = (Number) Array.get(outputArray, i); [EOL]         double value1 = ((Number) n1).longValue(); [EOL]         double value2 = ((Number) n2).longValue(); [EOL]         assertEquals("Entry #" + i + "/" + size + " not equal", value1, value2); [EOL]     } [EOL] } <line_num>: 194,203
private void verifyDoubleArrays(Object inputArray, Object outputArray, int size) { [EOL]     for (int i = 0; i < size; ++i) { [EOL]         Number n1 = (Number) Array.get(inputArray, i); [EOL]         Number n2 = (Number) Array.get(outputArray, i); [EOL]         double value1 = ((Number) n1).doubleValue(); [EOL]         double value2 = ((Number) n2).doubleValue(); [EOL]         assertEquals("Entry #" + i + "/" + size + " not equal", value1, value2); [EOL]     } [EOL] } <line_num>: 205,214
