public int getX(); <line_num>: 28,28
@Override [EOL] public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable { [EOL]     if ("getX".equals(method.getName())) { [EOL]         return Integer.valueOf(13); [EOL]     } [EOL]     return proxy.invokeSuper(obj, args); [EOL] } <line_num>: 42,51
public void testSimpleProxied() throws Exception { [EOL]     Enhancer enh = new Enhancer(); [EOL]     enh.setInterfaces(new Class[] { BeanInterface.class }); [EOL]     enh.setCallback(new MethodInterceptor() { [EOL]  [EOL]         @Override [EOL]         public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable { [EOL]             if ("getX".equals(method.getName())) { [EOL]                 return Integer.valueOf(13); [EOL]             } [EOL]             return proxy.invokeSuper(obj, args); [EOL]         } [EOL]     }); [EOL]     BeanInterface bean = (BeanInterface) enh.create(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(13), result.get("x")); [EOL] } <line_num>: 37,58
@SuppressWarnings("unchecked") [EOL] private Map<String, Object> writeAndMap(ObjectMapper m, Object value) throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     m.writeValue(sw, value); [EOL]     return (Map<String, Object>) m.readValue(sw.toString(), Object.class); [EOL] } <line_num>: 66,73
