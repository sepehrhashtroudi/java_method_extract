public ExternalizableInput(ObjectInput in) { [EOL]     this.in = in; [EOL] } <line_num>: 32,34
public ExternalizableOutput(ObjectOutput out) { [EOL]     this.out = out; [EOL] } <line_num>: 80,82
public MyPojo() { [EOL] } <line_num>: 117,117
public MyPojo(int id, String name, int[] values) { [EOL]     this.id = id; [EOL]     this.name = name; [EOL]     this.values = values; [EOL] } <line_num>: 118,123
public MyPojoNative(int id, String name, int[] values) { [EOL]     this.id = id; [EOL]     this.name = name; [EOL]     this.values = values; [EOL] } <line_num>: 173,178
public static ObjectMapper mapper() { [EOL]     return instance.mapper; [EOL] } <line_num>: 21,21
@Override [EOL] public int available() throws IOException { [EOL]     return in.available(); [EOL] } <line_num>: 36,39
@Override [EOL] public void close() throws IOException { [EOL]     in.close(); [EOL] } <line_num>: 41,44
@Override [EOL] public boolean markSupported() { [EOL]     return false; [EOL] } <line_num>: 46,49
@Override [EOL] public int read() throws IOException { [EOL]     return in.read(); [EOL] } <line_num>: 51,54
@Override [EOL] public int read(byte[] buffer) throws IOException { [EOL]     return in.read(buffer); [EOL] } <line_num>: 56,59
@Override [EOL] public int read(byte[] buffer, int offset, int len) throws IOException { [EOL]     return in.read(buffer, offset, len); [EOL] } <line_num>: 61,64
@Override [EOL] public long skip(long n) throws IOException { [EOL]     return in.skip(n); [EOL] } <line_num>: 66,69
@Override [EOL] public void flush() throws IOException { [EOL]     out.flush(); [EOL] } <line_num>: 84,87
@Override [EOL] public void close() throws IOException { [EOL]     out.close(); [EOL] } <line_num>: 89,92
@Override [EOL] public void write(int ch) throws IOException { [EOL]     out.write(ch); [EOL] } <line_num>: 94,97
@Override [EOL] public void write(byte[] data) throws IOException { [EOL]     out.write(data); [EOL] } <line_num>: 99,102
@Override [EOL] public void write(byte[] data, int offset, int len) throws IOException { [EOL]     out.write(data, offset, len); [EOL] } <line_num>: 104,107
@Override [EOL] public void readExternal(ObjectInput in) throws IOException { [EOL]     MapperHolder.mapper().readerForUpdating(this).readValue(new ExternalizableInput(in)); [EOL] } <line_num>: 125,130
@Override [EOL] public void writeExternal(ObjectOutput oo) throws IOException { [EOL]     MapperHolder.mapper().writeValue(new ExternalizableOutput(oo), this); [EOL] } <line_num>: 132,136
@Override [EOL] public boolean equals(Object o) { [EOL]     if (o == this) [EOL]         return true; [EOL]     if (o == null) [EOL]         return false; [EOL]     if (o.getClass() != getClass()) [EOL]         return false; [EOL]     MyPojo other = (MyPojo) o; [EOL]     if (other.id != id) [EOL]         return false; [EOL]     if (!other.name.equals(name)) [EOL]         return false; [EOL]     if (other.values.length != values.length) [EOL]         return false; [EOL]     for (int i = 0, end = values.length; i < end; ++i) { [EOL]         if (values[i] != other.values[i]) [EOL]             return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 138,155
@SuppressWarnings("unused") [EOL] public void testSerializeAsExternalizable() throws Exception { [EOL]     ByteArrayOutputStream bytes = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream obs = new ObjectOutputStream(bytes); [EOL]     final MyPojo input = new MyPojo(13, "Foobar", new int[] { 1, 2, 3 }); [EOL]     obs.writeObject(input); [EOL]     obs.close(); [EOL]     byte[] ser = bytes.toByteArray(); [EOL]     byte[] json = MapperHolder.mapper().writeValueAsBytes(input); [EOL]     int ix = indexOf(ser, json); [EOL]     if (ix < 0) { [EOL]         fail("Serialization (" + ser.length + ") does NOT contain JSON (of " + json.length + ")"); [EOL]     } [EOL]     if (false) { [EOL]         bytes = new ByteArrayOutputStream(); [EOL]         obs = new ObjectOutputStream(bytes); [EOL]         MyPojoNative p = new MyPojoNative(13, "Foobar", new int[] { 1, 2, 3 }); [EOL]         obs.writeObject(p); [EOL]         obs.close(); [EOL]         System.out.println("Native size: " + bytes.size() + ", vs JSON: " + ser.length); [EOL]     } [EOL]     ObjectInputStream ins = new ObjectInputStream(new ByteArrayInputStream(ser)); [EOL]     MyPojo output = (MyPojo) ins.readObject(); [EOL]     ins.close(); [EOL]     assertNotNull(output); [EOL]     assertEquals(input, output); [EOL] } <line_num>: 181,216
private int indexOf(byte[] full, byte[] fragment) { [EOL]     final byte first = fragment[0]; [EOL]     for (int i = 0, end = full.length - fragment.length; i < end; ++i) { [EOL]         if (full[i] != first) [EOL]             continue; [EOL]         if (matches(full, i, fragment)) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return -1; [EOL] } <line_num>: 224,234
private boolean matches(byte[] full, int index, byte[] fragment) { [EOL]     for (int i = 1, end = fragment.length; i < end; ++i) { [EOL]         if (fragment[i] != full[index + i]) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 236,244
