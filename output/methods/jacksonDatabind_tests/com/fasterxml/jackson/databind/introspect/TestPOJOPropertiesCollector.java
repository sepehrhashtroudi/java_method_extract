@JsonCreator [EOL] public TypeTestBean(@JsonProperty("value") String value) { [EOL] } <line_num>: 109,110
public FoodOrgLocation() { [EOL]     location = new Location(); [EOL] } <line_num>: 133,135
public FoodOrgLocation(final Location foodOrg) { [EOL] } <line_num>: 137,137
public FoodOrgLocation(final Long id, final String name, final Location location) { [EOL] } <line_num>: 139,139
public Location() { [EOL] } <line_num>: 148,148
public Location(final BigDecimal lattitude, final BigDecimal longitude) { [EOL] } <line_num>: 150,150
public Issue701Bean(@JsonProperty int i) { [EOL]     this.i = i; [EOL] } <line_num>: 157,157
@JsonProperty("value") [EOL] public void valueSetter(int v) { [EOL]     value = v; [EOL] } <line_num>: 17,18
@JsonProperty("value") [EOL] public int getFoobar() { [EOL]     return value; [EOL] } <line_num>: 20,21
public int getA() { [EOL]     return 0; [EOL] } <line_num>: 30,30
protected int getB() { [EOL]     return 1; [EOL] } <line_num>: 31,31
@SuppressWarnings("unused") [EOL] private int getC() { [EOL]     return 2; [EOL] } <line_num>: 32,33
public void setValue(int v) { [EOL]     value = v; [EOL] } <line_num>: 40,40
@JsonIgnore [EOL] public int getValue() { [EOL]     return value; [EOL] } <line_num>: 42,43
@JsonIgnore [EOL] public void setValue(int v) { [EOL]     value = v; [EOL] } <line_num>: 50,51
public int getValue() { [EOL]     return value; [EOL] } <line_num>: 53,53
@JsonIgnore [EOL] public void setB(int b) { [EOL] } <line_num>: 58,58
@JsonIgnore [EOL] public void setY(int value) { [EOL] } <line_num>: 64,64
@JsonProperty("y") [EOL] void foobar(int value) { [EOL] } <line_num>: 65,65
public void setValue(int v) { [EOL]     value = v; [EOL] } <line_num>: 73,73
public int getX() { [EOL]     return value; [EOL] } <line_num>: 75,75
@JsonProperty("renamed") [EOL] public int getValue() { [EOL]     return 1; [EOL] } <line_num>: 80,81
public void setValue(int x) { [EOL] } <line_num>: 82,82
@JsonProperty("x") [EOL] public void setFoobar(int v) { [EOL]     x = v; [EOL] } <line_num>: 89,90
public void setD(int value) { [EOL] } <line_num>: 100,100
public void setA(int value) { [EOL] } <line_num>: 101,101
public Integer getValue() { [EOL]     return 0; [EOL] } <line_num>: 113,113
public List<FoodOrgLocation> getLocation() { [EOL]     return location; [EOL] } <line_num>: 124,124
public Location getLocation() { [EOL]     return location; [EOL] } <line_num>: 141,141
public int getX() { [EOL]     return i; [EOL] } <line_num>: 159,159
@JsonAnySetter [EOL] public void addAdditionalProperty(String key, Object value) { [EOL]     if (additionalProperties == null) [EOL]         additionalProperties = new HashMap<String, Object>(); [EOL]     additionalProperties.put(key, value); [EOL] } <line_num>: 166,170
public void setAdditionalProperties(Map<String, Object> additionalProperties) { [EOL]     this.additionalProperties = additionalProperties; [EOL] } <line_num>: 172,174
@JsonAnyGetter [EOL] public Map<String, Object> getAdditionalProperties() { [EOL]     return additionalProperties; [EOL] } <line_num>: 176,177
@JsonIgnore [EOL] public String getName() { [EOL]     return (String) additionalProperties.get("name"); [EOL] } <line_num>: 179,182
public void testSimple() { [EOL]     POJOPropertiesCollector coll = collector(mapper, Simple.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("value"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertTrue(prop.hasField()); [EOL] } <line_num>: 193,204
public void testSimpleFieldVisibility() { [EOL]     POJOPropertiesCollector coll = collector(mapper, SimpleFieldDeser.class, false); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("values"); [EOL]     assertNotNull(prop); [EOL]     assertFalse(prop.hasSetter()); [EOL]     assertFalse(prop.hasGetter()); [EOL]     assertTrue(prop.hasField()); [EOL] } <line_num>: 206,218
public void testSimpleGetterVisibility() { [EOL]     POJOPropertiesCollector coll = collector(mapper, SimpleGetterVisibility.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("a"); [EOL]     assertNotNull(prop); [EOL]     assertFalse(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] } <line_num>: 220,231
public void testEmpty() { [EOL]     POJOPropertiesCollector coll = collector(mapper, Empty.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(0, props.size()); [EOL] } <line_num>: 235,241
public void testPartialIgnore() { [EOL]     POJOPropertiesCollector coll = collector(mapper, IgnoredSetter.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("value"); [EOL]     assertNotNull(prop); [EOL]     assertFalse(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertTrue(prop.hasField()); [EOL] } <line_num>: 246,257
public void testSimpleRenamed() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("x"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertTrue(prop.hasField()); [EOL] } <line_num>: 259,270
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] } <line_num>: 272,283
public void testMergeWithRename() { [EOL]     POJOPropertiesCollector coll = collector(mapper, MergedProperties.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("x"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertFalse(prop.hasGetter()); [EOL]     assertTrue(prop.hasField()); [EOL] } <line_num>: 285,296
public void testSimpleIgnoreAndRename() { [EOL]     POJOPropertiesCollector coll = collector(mapper, IgnoredRenamedSetter.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("y"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertFalse(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] } <line_num>: 298,309
public void testGlobalVisibilityForGetters() { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(MapperFeature.AUTO_DETECT_GETTERS, false); [EOL]     POJOPropertiesCollector coll = collector(m, SimpleGetterVisibility.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(0, props.size()); [EOL] } <line_num>: 311,319
public void testCollectionOfIgnored() { [EOL]     POJOPropertiesCollector coll = collector(mapper, ImplicitIgnores.class, false); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     Collection<String> ign = coll.getIgnoredPropertyNames(); [EOL]     assertEquals(2, ign.size()); [EOL]     assertTrue(ign.contains("a")); [EOL]     assertTrue(ign.contains("b")); [EOL] } <line_num>: 321,332
public void testSimpleOrderingForDeserialization() { [EOL]     POJOPropertiesCollector coll = collector(mapper, SortedProperties.class, false); [EOL]     List<BeanPropertyDefinition> props = coll.getProperties(); [EOL]     assertEquals(4, props.size()); [EOL]     assertEquals("a", props.get(0).getName()); [EOL]     assertEquals("b", props.get(1).getName()); [EOL]     assertEquals("c", props.get(2).getName()); [EOL]     assertEquals("d", props.get(3).getName()); [EOL] } <line_num>: 334,343
public void testSimpleWithType() { [EOL]     POJOPropertiesCollector coll = collector(mapper, TypeTestBean.class, true); [EOL]     List<BeanPropertyDefinition> props = coll.getProperties(); [EOL]     assertEquals(1, props.size()); [EOL]     assertEquals("value", props.get(0).getName()); [EOL]     AnnotatedMember m = props.get(0).getAccessor(); [EOL]     assertTrue(m instanceof AnnotatedMethod); [EOL]     assertEquals(Integer.class, m.getRawType()); [EOL]     coll = collector(mapper, TypeTestBean.class, false); [EOL]     props = coll.getProperties(); [EOL]     assertEquals(1, props.size()); [EOL]     assertEquals("value", props.get(0).getName()); [EOL]     m = props.get(0).getMutator(); [EOL]     assertEquals(AnnotatedParameter.class, m.getClass()); [EOL]     assertEquals(String.class, m.getRawType()); [EOL] } <line_num>: 345,364
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] } <line_num>: 367,376
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] } <line_num>: 378,389
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] } <line_num>: 391,397
protected POJOPropertiesCollector collector(ObjectMapper mapper, Class<?> cls, boolean forSerialization) { [EOL]     BasicClassIntrospector bci = new BasicClassIntrospector(); [EOL]     if (forSerialization) { [EOL]         return bci.collectProperties(mapper.getSerializationConfig(), mapper.constructType(cls), null, true, "set"); [EOL]     } [EOL]     return bci.collectProperties(mapper.getDeserializationConfig(), mapper.constructType(cls), null, false, "set"); [EOL] } <line_num>: 405,416
