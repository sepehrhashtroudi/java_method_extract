public QNameDeserializer() { [EOL]     super(QName.class); [EOL] } <line_num>: 110,110
@JsonSerialize(using = QNameSerializer.class) [EOL] public QName getQname() { [EOL]     return qname; [EOL] } <line_num>: 38,42
@JsonDeserialize(using = QNameDeserializer.class) [EOL] public void setQname(QName qname) { [EOL]     this.qname = qname; [EOL] } <line_num>: 44,48
@JsonProperty("myattribute") [EOL] public String getAttributeProperty() { [EOL]     return attributeProperty; [EOL] } <line_num>: 50,54
@JsonProperty("myattribute") [EOL] public void setAttributeProperty(String attributeProperty) { [EOL]     this.attributeProperty = attributeProperty; [EOL] } <line_num>: 56,60
@JsonProperty("myelement") [EOL] public String getElementProperty() { [EOL]     return elementProperty; [EOL] } <line_num>: 62,66
@JsonProperty("myelement") [EOL] public void setElementProperty(String elementProperty) { [EOL]     this.elementProperty = elementProperty; [EOL] } <line_num>: 68,72
@JsonProperty("mywrapped") [EOL] public List<String> getWrappedElementProperty() { [EOL]     return wrappedElementProperty; [EOL] } <line_num>: 74,78
@JsonProperty("mywrapped") [EOL] public void setWrappedElementProperty(List<String> wrappedElementProperty) { [EOL]     this.wrappedElementProperty = wrappedElementProperty; [EOL] } <line_num>: 80,84
public EnumExample getEnumProperty() { [EOL]     return enumProperty; [EOL] } <line_num>: 86,89
public void setEnumProperty(EnumExample enumProperty) { [EOL]     this.enumProperty = enumProperty; [EOL] } <line_num>: 91,94
@Override [EOL] public void serialize(QName value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]     jgen.writeString(value.toString()); [EOL] } <line_num>: 99,104
@Override [EOL] public QName deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     return QName.valueOf(jp.readValueAs(String.class)); [EOL] } <line_num>: 111,116
@Override [EOL] public String findEnumValue(Enum<?> value) { [EOL]     return value.name().toLowerCase(); [EOL] } <line_num>: 138,142
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] } <line_num>: 154,178
public void testJsonTypeResolver() throws Exception { [EOL]     JacksonAnnotationIntrospector ai = new JacksonAnnotationIntrospector(); [EOL]     AnnotatedClass ac = AnnotatedClass.constructWithoutSuperTypes(TypeResolverBean.class, ai, null); [EOL]     JavaType baseType = TypeFactory.defaultInstance().constructType(TypeResolverBean.class); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> rb = ai.findTypeResolver(mapper.getDeserializationConfig(), ac, baseType); [EOL]     assertNotNull(rb); [EOL]     assertSame(DummyBuilder.class, rb.getClass()); [EOL] } <line_num>: 180,189
public void testIgnoredType() throws Exception { [EOL]     JacksonAnnotationIntrospector ai = new JacksonAnnotationIntrospector(); [EOL]     AnnotatedClass ac = AnnotatedClass.construct(IgnoredType.class, ai, null); [EOL]     assertEquals(Boolean.TRUE, ai.isIgnorableType(ac)); [EOL]     ac = AnnotatedClass.construct(IgnoredSubType.class, ai, null); [EOL]     assertEquals(Boolean.TRUE, ai.isIgnorableType(ac)); [EOL] } <line_num>: 197,206
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] } <line_num>: 208,215
