public void setX(int v) { [EOL]     value = v; [EOL] } <line_num>: 18,18
@Override [EOL] protected DefaultDeserializationContext createDeserializationContext(JsonParser jp, DeserializationConfig cfg) { [EOL]     return super.createDeserializationContext(jp, cfg); [EOL] } <line_num>: 24,28
public void testProps() { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertNotNull(m.getNodeFactory()); [EOL]     JsonNodeFactory nf = JsonNodeFactory.instance; [EOL]     m.setNodeFactory(nf); [EOL]     assertSame(nf, m.getNodeFactory()); [EOL] } <line_num>: 39,47
public void testSupport() { [EOL]     assertTrue(MAPPER.canSerialize(String.class)); [EOL]     assertTrue(MAPPER.canDeserialize(TypeFactory.defaultInstance().constructType(String.class))); [EOL] } <line_num>: 49,53
public void testTreeRead() throws Exception { [EOL]     String JSON = "{ }"; [EOL]     JsonNode n = MAPPER.readTree(JSON); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new StringReader(JSON)); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new ByteArrayInputStream(JSON.getBytes("UTF-8"))); [EOL]     assertTrue(n instanceof ObjectNode); [EOL] } <line_num>: 55,66
public void testConfigForPropertySorting() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertFalse(m.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     SerializationConfig sc = m.getSerializationConfig(); [EOL]     assertFalse(sc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     assertFalse(sc.shouldSortPropertiesAlphabetically()); [EOL]     DeserializationConfig dc = m.getDeserializationConfig(); [EOL]     assertFalse(dc.shouldSortPropertiesAlphabetically()); [EOL]     m.enable(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY); [EOL]     sc = m.getSerializationConfig(); [EOL]     assertTrue(sc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     assertTrue(sc.shouldSortPropertiesAlphabetically()); [EOL]     dc = m.getDeserializationConfig(); [EOL]     assertTrue(dc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)); [EOL]     assertTrue(dc.shouldSortPropertiesAlphabetically()); [EOL] } <line_num>: 69,90
public void testJsonFactoryLinkage() { [EOL]     assertSame(MAPPER, MAPPER.getFactory().getCodec()); [EOL]     JsonFactory f = new JsonFactory(); [EOL]     ObjectMapper m = new ObjectMapper(f); [EOL]     assertSame(f, m.getFactory()); [EOL]     assertSame(m, f.getCodec()); [EOL] } <line_num>: 93,103
public void testProviderConfig() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals(0, m._deserializationContext._cache.cachedDeserializersCount()); [EOL]     Bean bean = m.readValue("{ \"x\" : 3 }", Bean.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(1, m._deserializationContext._cache.cachedDeserializersCount()); [EOL]     m._deserializationContext._cache.flushCachedDeserializers(); [EOL]     assertEquals(0, m._deserializationContext._cache.cachedDeserializersCount()); [EOL] } <line_num>: 108,119
public void testCopy() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     ObjectMapper m2 = m.copy(); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)); [EOL]     assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE); [EOL]     assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE)); [EOL]     assertNotSame(m.getFactory(), m2.getFactory()); [EOL]     assertEquals(0, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL]     m.addMixInAnnotations(String.class, Integer.class); [EOL]     assertEquals(1, m.getSerializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getSerializationConfig().mixInCount()); [EOL]     assertEquals(1, m.getDeserializationConfig().mixInCount()); [EOL]     assertEquals(0, m2.getDeserializationConfig().mixInCount()); [EOL] } <line_num>: 122,160
