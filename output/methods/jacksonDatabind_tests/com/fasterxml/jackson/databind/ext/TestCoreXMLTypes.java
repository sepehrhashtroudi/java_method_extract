public void testQNameSer() throws Exception { [EOL]     QName qn = new QName("http://abc", "tag", "prefix"); [EOL]     assertEquals(quote(qn.toString()), serializeAsString(qn)); [EOL] } <line_num>: 27,31
public void testDurationSer() throws Exception { [EOL]     DatatypeFactory dtf = DatatypeFactory.newInstance(); [EOL]     Duration dur = dtf.newDurationDayTime(false, 15, 19, 58, 1); [EOL]     assertEquals(quote(dur.toString()), serializeAsString(dur)); [EOL] } <line_num>: 33,39
public void testXMLGregorianCalendarSerAndDeser() throws Exception { [EOL]     DatatypeFactory dtf = DatatypeFactory.newInstance(); [EOL]     XMLGregorianCalendar cal = dtf.newXMLGregorianCalendar(1974, 10, 10, 18, 15, 17, 123, 0); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     long timestamp = cal.toGregorianCalendar().getTimeInMillis(); [EOL]     String numStr = String.valueOf(timestamp); [EOL]     assertEquals(numStr, mapper.writeValueAsString(cal)); [EOL]     XMLGregorianCalendar calOut = mapper.readValue(numStr, XMLGregorianCalendar.class); [EOL]     assertNotNull(calOut); [EOL]     assertEquals(timestamp, calOut.toGregorianCalendar().getTimeInMillis()); [EOL]     mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false); [EOL]     String exp = cal.toXMLFormat(); [EOL]     String act = mapper.writeValueAsString(cal); [EOL]     act = act.substring(1, act.length() - 1); [EOL]     exp = removeZ(exp); [EOL]     act = removeZ(act); [EOL]     assertEquals(exp, act); [EOL] } <line_num>: 41,68
private String removeZ(String dateStr) { [EOL]     if (dateStr.endsWith("Z")) { [EOL]         return dateStr.substring(0, dateStr.length() - 1); [EOL]     } [EOL]     if (dateStr.endsWith("+0000")) { [EOL]         return dateStr.substring(0, dateStr.length() - 5); [EOL]     } [EOL]     return dateStr; [EOL] } <line_num>: 70,78
public void testDeserializerLoading() { [EOL]     new CoreXMLDeserializers.DurationDeserializer(); [EOL]     new CoreXMLDeserializers.GregorianCalendarDeserializer(); [EOL]     new CoreXMLDeserializers.QNameDeserializer(); [EOL] } <line_num>: 87,92
public void testQNameDeser() throws Exception { [EOL]     QName qn = new QName("http://abc", "tag", "prefix"); [EOL]     String qstr = qn.toString(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertEquals("Should deserialize to equal QName (exp serialization: '" + qstr + "')", qn, mapper.readValue(quote(qstr), QName.class)); [EOL] } <line_num>: 94,101
public void testCalendarDeser() throws Exception { [EOL]     DatatypeFactory dtf = DatatypeFactory.newInstance(); [EOL]     XMLGregorianCalendar cal = dtf.newXMLGregorianCalendar(1974, 10, 10, 18, 15, 17, 123, 0); [EOL]     String exp = cal.toXMLFormat(); [EOL]     assertEquals("Should deserialize to equal XMLGregorianCalendar ('" + exp + "')", cal, new ObjectMapper().readValue(quote(exp), XMLGregorianCalendar.class)); [EOL] } <line_num>: 103,111
public void testDurationDeser() throws Exception { [EOL]     DatatypeFactory dtf = DatatypeFactory.newInstance(); [EOL]     Duration dur = dtf.newDurationDayTime(true, 27, 5, 15, 59); [EOL]     String exp = dur.toString(); [EOL]     assertEquals("Should deserialize to equal Duration ('" + exp + "')", dur, new ObjectMapper().readValue(quote(exp), Duration.class)); [EOL] } <line_num>: 113,121
