public CustomBean(String s, int i) { [EOL]     str = s; [EOL]     num = i; [EOL] } <line_num>: 34,37
public CustomBeanSerializer() { [EOL]     super(CustomBean.class); [EOL] } <line_num>: 45,45
public SimpleEnumSerializer() { [EOL]     super(SimpleEnum.class); [EOL] } <line_num>: 80,80
public BaseSerializer() { [EOL]     super(Base.class); [EOL] } <line_num>: 121,121
public MySimpleModule(String name, Version version) { [EOL]     super(name, version); [EOL]     _deserializers = new MySimpleDeserializers(); [EOL]     _serializers = new MySimpleSerializers(); [EOL] } <line_num>: 147,151
@Override [EOL] public void serialize(CustomBean value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]     jgen.writeString(value.str + "|" + value.num); [EOL] } <line_num>: 47,53
@Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException { [EOL]     return null; [EOL] } <line_num>: 55,58
@Override [EOL] public CustomBean deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     String text = jp.getText(); [EOL]     int ix = text.indexOf('|'); [EOL]     if (ix < 0) { [EOL]         throw new IOException("Failed to parse String value of \"" + text + "\""); [EOL]     } [EOL]     String str = text.substring(0, ix); [EOL]     int num = Integer.parseInt(text.substring(ix + 1)); [EOL]     return new CustomBean(str, num); [EOL] } <line_num>: 63,75
@Override [EOL] public void serialize(SimpleEnum value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]     jgen.writeString(value.name().toLowerCase()); [EOL] } <line_num>: 82,87
@Override [EOL] public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException { [EOL]     return null; [EOL] } <line_num>: 89,92
@Override [EOL] public SimpleEnum deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException { [EOL]     return SimpleEnum.valueOf(jp.getText().toUpperCase()); [EOL] } <line_num>: 97,102
public String getText(); <line_num>: 106,106
@Override [EOL] public String getText() { [EOL]     return "1"; [EOL] } <line_num>: 110,111
@Override [EOL] public String getText() { [EOL]     return "2"; [EOL] } <line_num>: 115,116
@Override [EOL] public void serialize(Base value, JsonGenerator jgen, SerializerProvider provider) throws IOException { [EOL]     jgen.writeString("Base:" + value.getText()); [EOL] } <line_num>: 123,126
@Override [EOL] public String getModuleName() { [EOL]     return "x"; [EOL] } <line_num>: 156,157
@Override [EOL] public Version version() { [EOL]     return Version.unknownVersion(); [EOL] } <line_num>: 159,160
@Override [EOL] public void setupModule(SetupContext context) { [EOL]     ObjectCodec c = context.getOwner(); [EOL]     assertNotNull(c); [EOL]     assertTrue(c instanceof ObjectMapper); [EOL]     ObjectMapper m = context.getOwner(); [EOL]     assertNotNull(m); [EOL] } <line_num>: 162,170
public void testWithoutModule() { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new CustomBean("foo", 3)); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No serializer found"); [EOL]     } [EOL]     try { [EOL]         mapper.readValue("{\"str\":\"ab\",\"num\":2}", CustomBean.class); [EOL]         fail("Should have caused an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "No suitable constructor found"); [EOL]     } [EOL] } <line_num>: 183,201
public void testSimpleBeanSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addSerializer(new CustomBeanSerializer()); [EOL]     mapper.registerModule(mod); [EOL]     assertEquals(quote("abcde|5"), mapper.writeValueAsString(new CustomBean("abcde", 5))); [EOL] } <line_num>: 209,216
public void testSimpleEnumSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addSerializer(new SimpleEnumSerializer()); [EOL]     mapper.registerModule(mod); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL] } <line_num>: 218,225
public void testSimpleInterfaceSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addSerializer(new BaseSerializer()); [EOL]     mapper.registerModule(mod); [EOL]     assertEquals(quote("Base:1"), mapper.writeValueAsString(new Impl1())); [EOL]     assertEquals(quote("Base:2"), mapper.writeValueAsString(new Impl2())); [EOL] } <line_num>: 228,236
public void testSimpleBeanDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addDeserializer(CustomBean.class, new CustomBeanDeserializer()); [EOL]     mapper.registerModule(mod); [EOL]     CustomBean bean = mapper.readValue(quote("xyz|3"), CustomBean.class); [EOL]     assertEquals("xyz", bean.str); [EOL]     assertEquals(3, bean.num); [EOL] } <line_num>: 244,253
public void testSimpleEnumDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addDeserializer(SimpleEnum.class, new SimpleEnumDeserializer()); [EOL]     mapper.registerModule(mod); [EOL]     SimpleEnum result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL] } <line_num>: 255,263
public void testMultipleModules() throws Exception { [EOL]     MySimpleModule mod1 = new MySimpleModule("test1", Version.unknownVersion()); [EOL]     SimpleModule mod2 = new SimpleModule("test2", Version.unknownVersion()); [EOL]     mod1.addSerializer(SimpleEnum.class, new SimpleEnumSerializer()); [EOL]     mod1.addDeserializer(CustomBean.class, new CustomBeanDeserializer()); [EOL]     mod2.addDeserializer(SimpleEnum.class, new SimpleEnumDeserializer()); [EOL]     mod2.addSerializer(CustomBean.class, new CustomBeanSerializer()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod1); [EOL]     mapper.registerModule(mod2); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     SimpleEnum result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod2); [EOL]     mapper.registerModule(mod1); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL] } <line_num>: 266,289
public void testMixIns() throws Exception { [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.setMixInAnnotation(MixableBean.class, MixInForOrder.class); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(module); [EOL]     Map<String, Object> props = this.writeAndMap(mapper, new MixableBean()); [EOL]     assertEquals(3, props.size()); [EOL]     assertEquals(Integer.valueOf(3), props.get("c")); [EOL]     assertEquals(Integer.valueOf(1), props.get("a")); [EOL]     assertEquals(Integer.valueOf(2), props.get("b")); [EOL] } <line_num>: 298,309
public void testAccessToMapper() throws Exception { [EOL]     ContextVerifierModule module = new ContextVerifierModule(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(module); [EOL] } <line_num>: 312,317
