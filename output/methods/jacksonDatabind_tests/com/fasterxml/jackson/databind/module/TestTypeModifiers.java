public ModifierModule() { [EOL]     super("test", Version.unknownVersion()); [EOL] } <line_num>: 27,29
public MyMapLikeType() { [EOL] } <line_num>: 105,105
public MyMapLikeType(String k, int v) { [EOL]     key = k; [EOL]     value = v; [EOL] } <line_num>: 106,109
public MyCollectionLikeType() { [EOL] } <line_num>: 121,121
public MyCollectionLikeType(int v) { [EOL]     value = v; [EOL] } <line_num>: 122,124
public MyMapSerializer(JsonSerializer<Object> keySer, JsonSerializer<Object> valueSer) { [EOL]     _keySerializer = keySer; [EOL]     _valueSerializer = valueSer; [EOL] } <line_num>: 135,138
@Override [EOL] public JsonSerializer<?> findMapLikeSerializer(SerializationConfig config, MapLikeType type, BeanDescription beanDesc, JsonSerializer<Object> keySerializer, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) { [EOL]     if (MapMarker.class.isAssignableFrom(type.getRawClass())) { [EOL]         return new MyMapSerializer(keySerializer, elementValueSerializer); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 35,45
@Override [EOL] public JsonSerializer<?> findCollectionLikeSerializer(SerializationConfig config, CollectionLikeType type, BeanDescription beanDesc, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) { [EOL]     if (CollectionMarker.class.isAssignableFrom(type.getRawClass())) { [EOL]         return new MyCollectionSerializer(); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 47,56
@Override [EOL] public JsonDeserializer<?> findCollectionLikeDeserializer(CollectionLikeType type, DeserializationConfig config, BeanDescription beanDesc, TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer) throws JsonMappingException { [EOL]     if (CollectionMarker.class.isAssignableFrom(type.getRawClass())) { [EOL]         return new MyCollectionDeserializer(); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 59,68
@Override [EOL] public JsonDeserializer<?> findMapLikeDeserializer(MapLikeType type, DeserializationConfig config, BeanDescription beanDesc, KeyDeserializer keyDeserializer, TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer) throws JsonMappingException { [EOL]     if (MapMarker.class.isAssignableFrom(type.getRawClass())) { [EOL]         return new MyMapDeserializer(); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 69,79
@Override [EOL] public void setupModule(SetupContext context) { [EOL]     context.addSerializers(new Serializers.Base() { [EOL]  [EOL]         @Override [EOL]         public JsonSerializer<?> findMapLikeSerializer(SerializationConfig config, MapLikeType type, BeanDescription beanDesc, JsonSerializer<Object> keySerializer, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) { [EOL]             if (MapMarker.class.isAssignableFrom(type.getRawClass())) { [EOL]                 return new MyMapSerializer(keySerializer, elementValueSerializer); [EOL]             } [EOL]             return null; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public JsonSerializer<?> findCollectionLikeSerializer(SerializationConfig config, CollectionLikeType type, BeanDescription beanDesc, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) { [EOL]             if (CollectionMarker.class.isAssignableFrom(type.getRawClass())) { [EOL]                 return new MyCollectionSerializer(); [EOL]             } [EOL]             return null; [EOL]         } [EOL]     }); [EOL]     context.addDeserializers(new SimpleDeserializers() { [EOL]  [EOL]         @Override [EOL]         public JsonDeserializer<?> findCollectionLikeDeserializer(CollectionLikeType type, DeserializationConfig config, BeanDescription beanDesc, TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer) throws JsonMappingException { [EOL]             if (CollectionMarker.class.isAssignableFrom(type.getRawClass())) { [EOL]                 return new MyCollectionDeserializer(); [EOL]             } [EOL]             return null; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public JsonDeserializer<?> findMapLikeDeserializer(MapLikeType type, DeserializationConfig config, BeanDescription beanDesc, KeyDeserializer keyDeserializer, TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer) throws JsonMappingException { [EOL]             if (MapMarker.class.isAssignableFrom(type.getRawClass())) { [EOL]                 return new MyMapDeserializer(); [EOL]             } [EOL]             return null; [EOL]         } [EOL]     }); [EOL] } <line_num>: 31,81
@Override [EOL] public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException { [EOL]     jgen.writeString("xxx:" + value); [EOL] } <line_num>: 86,89
public K getKey(); <line_num>: 93,93
public V getValue(); <line_num>: 94,94
public V getValue(); <line_num>: 97,97
@Override [EOL] public String getKey() { [EOL]     return key; [EOL] } <line_num>: 111,112
@Override [EOL] public Integer getValue() { [EOL]     return value; [EOL] } <line_num>: 113,114
@Override [EOL] public Integer getValue() { [EOL]     return value; [EOL] } <line_num>: 126,127
@Override [EOL] public void serialize(MapMarker<?, ?> value, JsonGenerator jgen, SerializerProvider provider) throws IOException { [EOL]     jgen.writeStartObject(); [EOL]     if (_keySerializer == null) { [EOL]         jgen.writeFieldName((String) value.getKey()); [EOL]     } else { [EOL]         _keySerializer.serialize(value.getKey(), jgen, provider); [EOL]     } [EOL]     if (_valueSerializer == null) { [EOL]         jgen.writeNumber(((Number) value.getValue()).intValue()); [EOL]     } else { [EOL]         _valueSerializer.serialize(value.getValue(), jgen, provider); [EOL]     } [EOL]     jgen.writeEndObject(); [EOL] } <line_num>: 140,154
@Override [EOL] public MapMarker<?, ?> deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException { [EOL]     if (jp.getCurrentToken() != JsonToken.START_OBJECT) [EOL]         throw new IOException("Wrong token: " + jp.getCurrentToken()); [EOL]     if (jp.nextToken() != JsonToken.FIELD_NAME) [EOL]         throw new IOException("Wrong token: " + jp.getCurrentToken()); [EOL]     String key = jp.getCurrentName(); [EOL]     if (jp.nextToken() != JsonToken.VALUE_NUMBER_INT) [EOL]         throw new IOException("Wrong token: " + jp.getCurrentToken()); [EOL]     int value = jp.getIntValue(); [EOL]     if (jp.nextToken() != JsonToken.END_OBJECT) [EOL]         throw new IOException("Wrong token: " + jp.getCurrentToken()); [EOL]     return new MyMapLikeType(key, value); [EOL] } <line_num>: 158,167
@Override [EOL] public void serialize(MyCollectionLikeType value, JsonGenerator jgen, SerializerProvider provider) throws IOException { [EOL]     jgen.writeStartArray(); [EOL]     jgen.writeNumber(value.value); [EOL]     jgen.writeEndArray(); [EOL] } <line_num>: 172,177
@Override [EOL] public MyCollectionLikeType deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException { [EOL]     if (jp.getCurrentToken() != JsonToken.START_ARRAY) [EOL]         throw new IOException("Wrong token: " + jp.getCurrentToken()); [EOL]     if (jp.nextToken() != JsonToken.VALUE_NUMBER_INT) [EOL]         throw new IOException("Wrong token: " + jp.getCurrentToken()); [EOL]     int value = jp.getIntValue(); [EOL]     if (jp.nextToken() != JsonToken.END_ARRAY) [EOL]         throw new IOException("Wrong token: " + jp.getCurrentToken()); [EOL]     return new MyCollectionLikeType(value); [EOL] } <line_num>: 181,188
@Override [EOL] public JavaType modifyType(JavaType type, Type jdkType, TypeBindings context, TypeFactory typeFactory) { [EOL]     Class<?> raw = type.getRawClass(); [EOL]     if (MapMarker.class.isAssignableFrom(raw)) { [EOL]         JavaType[] params = typeFactory.findTypeParameters(type, MapMarker.class); [EOL]         return typeFactory.constructMapLikeType(raw, params[0], params[1]); [EOL]     } [EOL]     if (CollectionMarker.class.isAssignableFrom(raw)) { [EOL]         JavaType[] params = typeFactory.findTypeParameters(type, CollectionMarker.class); [EOL]         return typeFactory.constructCollectionLikeType(raw, params[0]); [EOL]     } [EOL]     return type; [EOL] } <line_num>: 193,206
public void testLikeTypeConstruction() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setTypeFactory(mapper.getTypeFactory().withModifier(new MyTypeModifier())); [EOL]     JavaType type = mapper.constructType(MyMapLikeType.class); [EOL]     assertTrue(type.isMapLikeType()); [EOL]     JavaType param = ((MapLikeType) type).getKeyType(); [EOL]     assertNotNull(param); [EOL]     assertSame(String.class, param.getRawClass()); [EOL]     param = ((MapLikeType) type).getContentType(); [EOL]     assertNotNull(param); [EOL]     assertSame(Integer.class, param.getRawClass()); [EOL]     type = mapper.constructType(MyCollectionLikeType.class); [EOL]     assertTrue(type.isCollectionLikeType()); [EOL]     param = ((CollectionLikeType) type).getContentType(); [EOL]     assertNotNull(param); [EOL]     assertSame(Integer.class, param.getRawClass()); [EOL] } <line_num>: 218,237
public void testCollectionLikeSerialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setTypeFactory(mapper.getTypeFactory().withModifier(new MyTypeModifier())); [EOL]     mapper.registerModule(new ModifierModule()); [EOL]     assertEquals("[19]", mapper.writeValueAsString(new MyCollectionLikeType(19))); [EOL] } <line_num>: 239,245
public void testMapLikeSerialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setTypeFactory(mapper.getTypeFactory().withModifier(new MyTypeModifier())); [EOL]     mapper.registerModule(new ModifierModule()); [EOL]     assertEquals("{\"x\":\"xxx:3\"}", mapper.writeValueAsString(new MyMapLikeType("x", 3))); [EOL] } <line_num>: 247,254
public void testCollectionLikeDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setTypeFactory(mapper.getTypeFactory().withModifier(new MyTypeModifier())); [EOL]     mapper.registerModule(new ModifierModule()); [EOL]     MyMapLikeType result = mapper.readValue("{\"a\":13}", MyMapLikeType.class); [EOL]     assertEquals("a", result.getKey()); [EOL]     assertEquals(Integer.valueOf(13), result.getValue()); [EOL] } <line_num>: 257,266
public void testMapLikeDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setTypeFactory(mapper.getTypeFactory().withModifier(new MyTypeModifier())); [EOL]     mapper.registerModule(new ModifierModule()); [EOL]     MyCollectionLikeType result = mapper.readValue("[-37]", MyCollectionLikeType.class); [EOL]     assertEquals(Integer.valueOf(-37), result.getValue()); [EOL] } <line_num>: 268,276
