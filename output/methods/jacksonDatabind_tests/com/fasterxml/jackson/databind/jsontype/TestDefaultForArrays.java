public ArrayBean() { [EOL]     this(null); [EOL] } <line_num>: 18,18
public ArrayBean(Object[] v) { [EOL]     values = v; [EOL] } <line_num>: 19,19
public void testArrayTypingSimple() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.NON_CONCRETE_AND_ARRAYS); [EOL]     ArrayBean bean = new ArrayBean(new String[0]); [EOL]     String json = m.writeValueAsString(bean); [EOL]     ArrayBean result = m.readValue(json, ArrayBean.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(String[].class, result.values.getClass()); [EOL] } <line_num>: 32,41
public void testArrayTypingNested() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.NON_CONCRETE_AND_ARRAYS); [EOL]     ArrayBean bean = new ArrayBean(new String[0][0]); [EOL]     String json = m.writeValueAsString(bean); [EOL]     ArrayBean result = m.readValue(json, ArrayBean.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(String[][].class, result.values.getClass()); [EOL] } <line_num>: 44,53
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] } <line_num>: 56,68
public void testArraysOfArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); [EOL]     Object value = new Object[][] { new Object[] {} }; [EOL]     String json = mapper.writeValueAsString(value); [EOL]     _testArraysAs(mapper, json, Object[][].class); [EOL]     _testArraysAs(mapper, json, Object[].class); [EOL]     _testArraysAs(mapper, json, Object.class); [EOL] } <line_num>: 71,83
protected void _testArraysAs(ObjectMapper mapper, String json, Class<?> type) throws Exception { [EOL]     Object o = mapper.readValue(json, type); [EOL]     assertNotNull(o); [EOL]     assertTrue(o instanceof Object[]); [EOL]     Object[] main = (Object[]) o; [EOL]     assertEquals(1, main.length); [EOL]     Object element = main[0]; [EOL]     assertNotNull(element); [EOL]     assertTrue(element instanceof Object[]); [EOL]     assertEquals(0, ((Object[]) element).length); [EOL] } <line_num>: 91,103
