public Dog(String name, int b) { [EOL]     super(); [EOL]     this.name = name; [EOL]     boneCount = b; [EOL] } <line_num>: 27,31
public ContainerWithGetter(T a) { [EOL]     animal = a; [EOL] } <line_num>: 37,37
public ContainerWithField(T a) { [EOL]     animal = a; [EOL] } <line_num>: 45,45
public MyParam() { [EOL] } <line_num>: 59,59
public MyParam(T v) { [EOL]     value = v; [EOL] } <line_num>: 60,60
public CustomJsonSerializer(JsonSerializer<Object> beanSerializer) { [EOL]     this.beanSerializer = beanSerializer; [EOL] } <line_num>: 75,75
public CustomJsonSerializerFactory() { [EOL]     super(null); [EOL] } <line_num>: 106,106
public T getAnimal() { [EOL]     return animal; [EOL] } <line_num>: 39,39
@Override [EOL] public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]     beanSerializer.serialize(value, jgen, provider); [EOL] } <line_num>: 77,82
@Override [EOL] public Class<Object> handledType() { [EOL]     return beanSerializer.handledType(); [EOL] } <line_num>: 84,85
@Override [EOL] public void serializeWithType(Object value, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException, JsonProcessingException { [EOL]     beanSerializer.serializeWithType(value, jgen, provider, typeSer); [EOL] } <line_num>: 87,92
@Override [EOL] public void resolve(SerializerProvider provider) throws JsonMappingException { [EOL]     if (beanSerializer instanceof ResolvableSerializer) { [EOL]         ((ResolvableSerializer) beanSerializer).resolve(provider); [EOL]     } [EOL] } <line_num>: 94,100
@Override [EOL] protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException { [EOL]     return new CustomJsonSerializer(super.constructBeanSerializer(prov, beanDesc)); [EOL] } <line_num>: 108,114
public void testWrapperWithGetter() throws Exception { [EOL]     Dog dog = new Dog("Fluffy", 3); [EOL]     String json = new ObjectMapper().writeValueAsString(new ContainerWithGetter<Animal>(dog)); [EOL]     if (json.indexOf("\"object-type\":\"doggy\"") < 0) { [EOL]         fail("polymorphic type not kept, result == " + json + "; should contain 'object-type':'...'"); [EOL]     } [EOL] } <line_num>: 124,131
public void testWrapperWithField() throws Exception { [EOL]     Dog dog = new Dog("Fluffy", 3); [EOL]     String json = new ObjectMapper().writeValueAsString(new ContainerWithField<Animal>(dog)); [EOL]     if (json.indexOf("\"object-type\":\"doggy\"") < 0) { [EOL]         fail("polymorphic type not kept, result == " + json + "; should contain 'object-type':'...'"); [EOL]     } [EOL] } <line_num>: 133,140
public void testWrapperWithExplicitType() throws Exception { [EOL]     Dog dog = new Dog("Fluffy", 3); [EOL]     ContainerWithGetter<Animal> c2 = new ContainerWithGetter<Animal>(dog); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writerWithType(TypeFactory.defaultInstance().constructParametricType(ContainerWithGetter.class, Animal.class)).writeValueAsString(c2); [EOL]     if (json.indexOf("\"object-type\":\"doggy\"") < 0) { [EOL]         fail("polymorphic type not kept, result == " + json + "; should contain 'object-type':'...'"); [EOL]     } [EOL] } <line_num>: 142,151
public void testJackson387() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT, JsonTypeInfo.As.PROPERTY); [EOL]     om.setSerializationInclusion(JsonInclude.Include.NON_NULL); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     MyClass mc = new MyClass(); [EOL]     MyParam<Integer> moc1 = new MyParam<Integer>(1); [EOL]     MyParam<String> moc2 = new MyParam<String>("valueX"); [EOL]     SomeObject so = new SomeObject(); [EOL]     so.someValue = "xxxxxx"; [EOL]     MyParam<SomeObject> moc3 = new MyParam<SomeObject>(so); [EOL]     List<SomeObject> colist = new ArrayList<SomeObject>(); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     MyParam<List<SomeObject>> moc4 = new MyParam<List<SomeObject>>(colist); [EOL]     mc.params.add(moc1); [EOL]     mc.params.add(moc2); [EOL]     mc.params.add(moc3); [EOL]     mc.params.add(moc4); [EOL]     String json = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(json, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(4, mc2.params.size()); [EOL] } <line_num>: 153,186
public void testJackson430() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.setSerializerFactory(new CustomJsonSerializerFactory()); [EOL]     MyClass mc = new MyClass(); [EOL]     mc.params.add(new MyParam<Integer>(1)); [EOL]     String str = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(str, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(1, mc2.params.size()); [EOL] } <line_num>: 188,203
