public PropertyBean() { [EOL]     this(null); [EOL] } <line_num>: 48,48
public PropertyBean(SuperType v) { [EOL]     value = v; [EOL] } <line_num>: 49,49
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] } <line_num>: 76,84
public void testSubtypesViaModule() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule(); [EOL]     module.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     mapper.registerModule(module); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] } <line_num>: 87,96
public void testSerialization() throws Exception { [EOL]     SubB bean = new SubB(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertEquals("{\"@type\":\"TypeB\",\"b\":1}", mapper.writeValueAsString(bean)); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(new NamedType(SubB.class, "typeB")); [EOL]     assertEquals("{\"@type\":\"typeB\",\"b\":1}", mapper.writeValueAsString(bean)); [EOL]     assertEquals("{\"@type\":\"TestSubtypes$SubD\",\"d\":0}", mapper.writeValueAsString(new SubD())); [EOL] } <line_num>: 98,112
public void testDeserializationNonNamed() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubC.class); [EOL]     SuperType bean = mapper.readValue("{\"@type\":\"TestSubtypes$SubC\", \"c\":1}", SuperType.class); [EOL]     assertSame(SubC.class, bean.getClass()); [EOL]     assertEquals(1, ((SubC) bean).c); [EOL] } <line_num>: 114,123
public void testDeserializatioNamed() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class); [EOL]     mapper.registerSubtypes(new NamedType(SubD.class, "TypeD")); [EOL]     SuperType bean = mapper.readValue("{\"@type\":\"TypeB\", \"b\":13}", SuperType.class); [EOL]     assertSame(SubB.class, bean.getClass()); [EOL]     assertEquals(13, ((SubB) bean).b); [EOL]     bean = mapper.readValue("{\"@type\":\"TypeD\", \"d\":-4}", SuperType.class); [EOL]     assertSame(SubD.class, bean.getClass()); [EOL]     assertEquals(-4, ((SubD) bean).d); [EOL] } <line_num>: 125,139
public void testEmptyBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, true); [EOL]     String json = mapper.writeValueAsString(new EmptyBean()); [EOL]     assertEquals("{\"@type\":\"TestSubtypes$EmptyBean\"}", json); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false); [EOL]     json = mapper.writeValueAsString(new EmptyBean()); [EOL]     assertEquals("{\"@type\":\"TestSubtypes$EmptyBean\"}", json); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false); [EOL]     json = mapper.writeValueAsString(new EmptyNonFinal()); [EOL]     assertEquals("[\"com.fasterxml.jackson.databind.jsontype.TestSubtypes$EmptyNonFinal\",{}]", json); [EOL] } <line_num>: 142,161
public void testDefaultImpl() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SuperTypeWithDefault bean = mapper.readValue("{\"a\":13}", SuperTypeWithDefault.class); [EOL]     assertEquals(DefaultImpl.class, bean.getClass()); [EOL]     assertEquals(13, ((DefaultImpl) bean).a); [EOL]     bean = mapper.readValue("{\"a\":14,\"#type\":\"foobar\"}", SuperTypeWithDefault.class); [EOL]     assertEquals(DefaultImpl.class, bean.getClass()); [EOL]     assertEquals(14, ((DefaultImpl) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\",\"a\":15}", SuperTypeWithDefault.class); [EOL]     assertEquals(DefaultImpl.class, bean.getClass()); [EOL]     assertEquals(15, ((DefaultImpl) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithDefault.class); [EOL]     assertEquals(DefaultImpl.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl) bean).a); [EOL] } <line_num>: 163,183
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] } <line_num>: 186,213
