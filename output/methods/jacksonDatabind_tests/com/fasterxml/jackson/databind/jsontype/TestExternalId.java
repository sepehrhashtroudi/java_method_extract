public ExternalBean() { [EOL] } <line_num>: 26,26
public ExternalBean(int v) { [EOL]     bean = new ValueBean(v); [EOL] } <line_num>: 27,29
public ExternalBeanWithDefault() { [EOL] } <line_num>: 39,39
public ExternalBeanWithDefault(int v) { [EOL]     bean = new ValueBean(v); [EOL] } <line_num>: 40,42
public ExternalBean3() { [EOL] } <line_num>: 58,58
public ExternalBean3(int v) { [EOL]     value1 = new ValueBean(v); [EOL]     value2 = new ValueBean(v + 1); [EOL]     value3 = new ValueBean(v + 2); [EOL]     foo = v; [EOL] } <line_num>: 59,64
@JsonCreator [EOL] public ExternalBeanWithCreator(@JsonProperty("foo") int f) { [EOL]     foo = f; [EOL]     value = new ValueBean(f); [EOL] } <line_num>: 74,79
public ValueBean() { [EOL] } <line_num>: 86,86
public ValueBean(int v) { [EOL]     value = v; [EOL] } <line_num>: 87,87
protected Derived1() { [EOL]     throw new IllegalStateException("wrong constructor called"); [EOL] } <line_num>: 107,107
@JsonCreator [EOL] public Derived1(@JsonProperty("derived1Property") String d1p, @JsonProperty("baseProperty") String bp) { [EOL]     derived1Property = d1p; [EOL]     baseProperty = bp; [EOL] } <line_num>: 109,114
protected Derived2() { [EOL]     throw new IllegalStateException("wrong constructor called"); [EOL] } <line_num>: 129,129
@JsonCreator [EOL] public Derived2(@JsonProperty("derived2Property") String d2p, @JsonProperty("baseProperty") String bp) { [EOL]     derived2Property = d2p; [EOL]     baseProperty = bp; [EOL] } <line_num>: 131,136
protected BaseContainer() { [EOL]     throw new IllegalStateException("wrong constructor called"); [EOL] } <line_num>: 151,151
@JsonCreator [EOL] public BaseContainer(@JsonProperty("baseContainerProperty") String bcp, @JsonProperty("base") Base b) { [EOL]     baseContainerProperty = bcp; [EOL]     base = b; [EOL] } <line_num>: 153,157
public ExternalTypeWithNonPOJO() { [EOL] } <line_num>: 204,204
public ExternalTypeWithNonPOJO(Object o) { [EOL]     value = o; [EOL] } <line_num>: 205,205
public AsValueThingy(long l) { [EOL]     rawDate = l; [EOL] } <line_num>: 212,212
public AsValueThingy() { [EOL] } <line_num>: 213,213
String getBaseProperty(); <line_num>: 101,101
@Override [EOL] @JsonProperty [EOL] public String getBaseProperty() { [EOL]     return baseProperty; [EOL] } <line_num>: 116,119
@JsonProperty [EOL] public String getDerived1Property() { [EOL]     return derived1Property; [EOL] } <line_num>: 121,123
@Override [EOL] @JsonProperty [EOL] public String getBaseProperty() { [EOL]     return baseProperty; [EOL] } <line_num>: 138,141
@JsonProperty [EOL] public String getDerived2Property() { [EOL]     return derived2Property; [EOL] } <line_num>: 143,145
@JsonProperty [EOL] public String getBaseContainerProperty() { [EOL]     return baseContainerProperty; [EOL] } <line_num>: 159,160
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXTERNAL_PROPERTY, property = "type") [EOL] @JsonProperty [EOL] public Base getBase() { [EOL]     return base; [EOL] } <line_num>: 162,164
public String getPetType() { [EOL]     return petType; [EOL] } <line_num>: 182,184
public void setPetType(String petType) { [EOL]     this.petType = petType; [EOL] } <line_num>: 186,188
@JsonValue [EOL] public Date serialization() { [EOL]     return new Date(rawDate); [EOL] } <line_num>: 215,217
public void testSimpleSerialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     assertEquals("{\"bean\":{\"value\":11},\"extType\":\"vbean\"}", mapper.writeValueAsString(new ExternalBean(11))); [EOL] } <line_num>: 228,240
public void testImproperExternalIdSerialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertEquals("{\"extType\":\"funk\",\"i\":3}", mapper.writeValueAsString(new FunkyExternalBean())); [EOL] } <line_num>: 243,248
public void testSimpleDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     ExternalBean result = mapper.readValue("{\"bean\":{\"value\":11},\"extType\":\"vbean\"}", ExternalBean.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.bean); [EOL]     ValueBean vb = (ValueBean) result.bean; [EOL]     assertEquals(11, vb.value); [EOL] } <line_num>: 256,265
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] } <line_num>: 269,283
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] } <line_num>: 286,296
public void testImproperExternalIdDeserialization() throws Exception { [EOL]     FunkyExternalBean result = MAPPER.readValue("{\"extType\":\"funk\",\"i\":3}", FunkyExternalBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(3, result.i); [EOL] } <line_num>: 299,305
public void testIssue798() throws Exception { [EOL]     Base base = new Derived1("derived1 prop val", "base prop val"); [EOL]     BaseContainer baseContainer = new BaseContainer("bc prop val", base); [EOL]     String generatedJson = MAPPER.writeValueAsString(baseContainer); [EOL]     BaseContainer baseContainer2 = MAPPER.readValue(generatedJson, BaseContainer.class); [EOL]     assertEquals("bc prop val", baseContainer.getBaseContainerProperty()); [EOL]     Base b = baseContainer2.getBase(); [EOL]     assertNotNull(b); [EOL]     if (b.getClass() != Derived1.class) { [EOL]         fail("Should have type Derived1, was " + b.getClass().getName()); [EOL]     } [EOL]     Derived1 derived1 = (Derived1) b; [EOL]     assertEquals("base prop val", derived1.getBaseProperty()); [EOL]     assertEquals("derived1 prop val", derived1.getDerived1Property()); [EOL] } <line_num>: 307,324
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] } <line_num>: 327,336
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] } <line_num>: 362,372
public void testWithNaturalScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(Integer.valueOf(13)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof Integer); [EOL]     input = new ExternalTypeWithNonPOJO(Boolean.TRUE); [EOL]     json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof Boolean); [EOL]     input = new ExternalTypeWithNonPOJO("foobar"); [EOL]     json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof String); [EOL]     assertEquals("foobar", result.value); [EOL] } <line_num>: 375,400
public void testWithAsValue() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new AsValueThingy(12345L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     assertEquals("{\"value\":12345,\"type\":\"date\"}", json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(Date.class, result.value.getClass()); [EOL]     assertEquals(12345L, ((Date) result.value).getTime()); [EOL] } <line_num>: 403,424
