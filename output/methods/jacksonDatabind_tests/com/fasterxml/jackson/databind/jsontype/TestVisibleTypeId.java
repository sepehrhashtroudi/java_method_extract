public void setType(String t) { [EOL]     type = t; [EOL] } <line_num>: 23,23
public void setType(String t) { [EOL]     type = t; [EOL] } <line_num>: 35,35
public void setType(String t) { [EOL]     type = t; [EOL] } <line_num>: 47,47
public void setType(String t) { [EOL]     type = t; [EOL] } <line_num>: 63,63
@JsonTypeId [EOL] public String getType() { [EOL]     return "SomeType"; [EOL] } <line_num>: 90,91
@JsonTypeId [EOL] public String getType() { [EOL]     return "SomeType"; [EOL] } <line_num>: 106,107
@JsonTypeId [EOL] public String getType2() { [EOL]     return "type2"; [EOL] } <line_num>: 115,116
public void testVisibleWithProperty() throws Exception { [EOL]     String json = mapper.writeValueAsString(new PropertyBean()); [EOL]     assertEquals("{\"type\":\"BaseType\",\"a\":3}", json); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertEquals("BaseType", result.type); [EOL]     result = mapper.readValue("{\"a\":7, \"type\":\"BaseType\"}", PropertyBean.class); [EOL]     assertEquals(7, result.a); [EOL]     assertEquals("BaseType", result.type); [EOL] } <line_num>: 127,140
public void testVisibleWithWrapperArray() throws Exception { [EOL]     String json = mapper.writeValueAsString(new WrapperArrayBean()); [EOL]     assertEquals("[\"ArrayType\",{\"a\":1}]", json); [EOL]     WrapperArrayBean result = mapper.readValue(json, WrapperArrayBean.class); [EOL]     assertEquals("ArrayType", result.type); [EOL]     assertEquals(1, result.a); [EOL] } <line_num>: 142,151
public void testVisibleWithWrapperObject() throws Exception { [EOL]     String json = mapper.writeValueAsString(new WrapperObjectBean()); [EOL]     assertEquals("{\"ObjectType\":{\"a\":2}}", json); [EOL]     WrapperObjectBean result = mapper.readValue(json, WrapperObjectBean.class); [EOL]     assertEquals("ObjectType", result.type); [EOL] } <line_num>: 153,160
public void testVisibleWithExternalId() throws Exception { [EOL]     String json = mapper.writeValueAsString(new ExternalIdWrapper()); [EOL]     ExternalIdWrapper result = mapper.readValue(json, ExternalIdWrapper.class); [EOL]     assertEquals("ExternalType", result.bean.type); [EOL]     assertEquals(2, result.bean.a); [EOL] } <line_num>: 162,169
public void testTypeIdFromProperty() throws Exception { [EOL]     assertEquals("{\"type\":\"SomeType\",\"a\":3}", mapper.writeValueAsString(new TypeIdFromFieldProperty())); [EOL] } <line_num>: 173,177
public void testTypeIdFromArray() throws Exception { [EOL]     assertEquals("[\"SomeType\",{\"a\":3}]", mapper.writeValueAsString(new TypeIdFromFieldArray())); [EOL] } <line_num>: 179,183
public void testTypeIdFromObject() throws Exception { [EOL]     assertEquals("{\"SomeType\":{\"a\":3}}", mapper.writeValueAsString(new TypeIdFromMethodObject())); [EOL] } <line_num>: 185,189
public void testTypeIdFromExternal() throws Exception { [EOL]     String json = mapper.writeValueAsString(new ExternalIdWrapper2()); [EOL]     assertEquals("{\"bean\":{\"a\":2},\"type\":\"SomeType\"}", json); [EOL] } <line_num>: 191,197
public void testInvalidMultipleTypeIds() throws Exception { [EOL]     try { [EOL]         mapper.writeValueAsString(new MultipleIds()); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "multiple type ids"); [EOL]     } [EOL] } <line_num>: 201,209
