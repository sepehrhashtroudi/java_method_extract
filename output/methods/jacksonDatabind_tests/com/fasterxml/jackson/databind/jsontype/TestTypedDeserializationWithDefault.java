@JsonCreator [EOL] LegacyInter(Object obj) { [EOL]     if (obj instanceof List) { [EOL]         blah = new ArrayList<String>(); [EOL]         for (Object o : (List<?>) obj) { [EOL]             blah.add(o.toString()); [EOL]         } [EOL]     } else if (obj instanceof String) { [EOL]         blah = Arrays.asList(((String) obj).split(",")); [EOL]     } else { [EOL]         throw new IllegalArgumentException("Unknown type: " + obj.getClass()); [EOL]     } [EOL] } <line_num>: 27,42
public void testDeserializationWithObject() throws Exception { [EOL]     Inter inter = objectReader(Inter.class).readValue("{\"type\": \"mine\", \"blah\": [\"a\", \"b\", \"c\"]}"); [EOL]     assertTrue(inter instanceof MyInter); [EOL]     assertFalse(inter instanceof LegacyInter); [EOL]     assertEquals(Arrays.asList("a", "b", "c"), ((MyInter) inter).blah); [EOL] } <line_num>: 59,65
public void testDeserializationWithString() throws Exception { [EOL]     Inter inter = objectReader(Inter.class).readValue("\"a,b,c,d\""); [EOL]     assertTrue(inter instanceof LegacyInter); [EOL]     assertEquals(Arrays.asList("a", "b", "c", "d"), ((MyInter) inter).blah); [EOL] } <line_num>: 67,72
public void testDeserializationWithArray() throws Exception { [EOL]     Inter inter = objectReader(Inter.class).readValue("[\"a\", \"b\", \"c\", \"d\"]"); [EOL]     assertTrue(inter instanceof LegacyInter); [EOL]     assertEquals(Arrays.asList("a", "b", "c", "d"), ((MyInter) inter).blah); [EOL] } <line_num>: 74,79
public void testDeserializationWithArrayOfSize2() throws Exception { [EOL]     Inter inter = objectReader(Inter.class).readValue("[\"a\", \"b\"]"); [EOL]     assertTrue(inter instanceof LegacyInter); [EOL]     assertEquals(Arrays.asList("a", "b"), ((MyInter) inter).blah); [EOL] } <line_num>: 81,86
public void testDefaultAsNoClass() throws Exception { [EOL]     Object ob = objectReader(DefaultWithNoClass.class).readValue("{ }"); [EOL]     assertNull(ob); [EOL]     ob = objectReader(DefaultWithNoClass.class).readValue("{ \"bogus\":3 }"); [EOL]     assertNull(ob); [EOL] } <line_num>: 89,95
public void testBadTypeAsNull() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE); [EOL]     Object ob = mapper.readValue("{}", MysteryPolymorphic.class); [EOL]     assertNull(ob); [EOL]     ob = mapper.readValue("{ \"whatever\":13}", MysteryPolymorphic.class); [EOL]     assertNull(ob); [EOL] } <line_num>: 98,106
