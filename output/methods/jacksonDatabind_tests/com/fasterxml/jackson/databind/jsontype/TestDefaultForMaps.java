public MapKey(String k) { [EOL]     key = k; [EOL] } <line_num>: 26,26
@Override [EOL] public String toString() { [EOL]     return key; [EOL] } <line_num>: 28,28
@Override [EOL] public Object deserializeKey(String key, DeserializationContext ctxt) { [EOL]     return new MapKey(key); [EOL] } <line_num>: 33,36
public void testJackson428() throws Exception { [EOL]     ObjectMapper serMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> serializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     serializerTyper = serializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(true)); [EOL]     serializerTyper = serializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     serMapper.setDefaultTyping(serializerTyper); [EOL]     MapHolder holder = new MapHolder(); [EOL]     holder.map = new HashMap<MapKey, List<Object>>(); [EOL]     List<Object> ints = new ArrayList<Object>(); [EOL]     ints.add(Integer.valueOf(3)); [EOL]     holder.map.put(new MapKey("key"), ints); [EOL]     String json = serMapper.writeValueAsString(holder); [EOL]     ObjectMapper deserMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> deserializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     deserializerTyper = deserializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(false)); [EOL]     deserializerTyper = deserializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     deserMapper.setDefaultTyping(deserializerTyper); [EOL]     MapHolder result = deserMapper.readValue(json, MapHolder.class); [EOL]     assertNotNull(result); [EOL]     Map<?, ?> map = result.map; [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?, ?> entry = map.entrySet().iterator().next(); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(MapKey.class, key.getClass()); [EOL]     Object value = entry.getValue(); [EOL]     assertTrue(value instanceof List<?>); [EOL]     List<?> list = (List<?>) value; [EOL]     assertEquals(1, list.size()); [EOL]     assertEquals(Integer.class, list.get(0).getClass()); [EOL]     assertEquals(Integer.valueOf(3), list.get(0)); [EOL] } <line_num>: 51,88
protected TypeNameIdResolver createTypeNameIdResolver(boolean forSerialization) { [EOL]     Collection<NamedType> subtypes = new ArrayList<NamedType>(); [EOL]     subtypes.add(new NamedType(MapHolder.class, "mapHolder")); [EOL]     subtypes.add(new NamedType(ArrayList.class, "AList")); [EOL]     subtypes.add(new NamedType(HashMap.class, "HMap")); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     return TypeNameIdResolver.construct(mapper.getDeserializationConfig(), TypeFactory.defaultInstance().constructType(Object.class), subtypes, forSerialization, !forSerialization); [EOL] } <line_num>: 90,99
