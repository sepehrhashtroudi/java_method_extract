@JsonCreator [EOL] public DefaultEmployee(@JsonProperty("name") String name, @JsonProperty("friends") List<User> friends, @JsonProperty("employer") String employer) { [EOL]     super(name, friends); [EOL]     _employer = employer; [EOL] } <line_num>: 37,43
@JsonCreator [EOL] public DefaultUser(@JsonProperty("name") String name, @JsonProperty("friends") List<User> friends) { [EOL]     super(); [EOL]     _name = name; [EOL]     _friends = friends; [EOL] } <line_num>: 59,66
public abstract String getEmployer(); <line_num>: 21,21
public abstract String getName(); <line_num>: 28,28
public abstract List<User> getFriends(); <line_num>: 29,29
@Override [EOL] public String getEmployer() { [EOL]     return _employer; [EOL] } <line_num>: 45,48
@Override [EOL] public String getName() { [EOL]     return _name; [EOL] } <line_num>: 68,71
@Override [EOL] public List<User> getFriends() { [EOL]     return _friends; [EOL] } <line_num>: 73,76
public int getValue() { [EOL]     return value; [EOL] } <line_num>: 82,82
@Override [EOL] public String toString() { [EOL]     return "sub!"; [EOL] } <line_num>: 87,88
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] } <line_num>: 99,125
public void testInnerClassWithType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(DefaultTyping.NON_FINAL); [EOL]     String json = mapper.writeValueAsString(new BeanWithAnon()); [EOL]     BeanWithAnon result = mapper.readValue(json, BeanWithAnon.class); [EOL]     assertEquals(BeanWithAnon.class, result.getClass()); [EOL] } <line_num>: 128,135
