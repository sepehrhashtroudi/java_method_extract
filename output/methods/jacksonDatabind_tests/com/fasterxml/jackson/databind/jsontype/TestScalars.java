@SuppressWarnings("unused") [EOL] public DynamicWrapper() { [EOL] } <line_num>: 15,16
public DynamicWrapper(Object v) { [EOL]     value = v; [EOL] } <line_num>: 17,17
@SuppressWarnings("unused") [EOL] public AbstractWrapper() { [EOL] } <line_num>: 26,27
public AbstractWrapper(Serializable v) { [EOL]     value = v; [EOL] } <line_num>: 28,28
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] } <line_num>: 41,72
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] } <line_num>: 74,105
