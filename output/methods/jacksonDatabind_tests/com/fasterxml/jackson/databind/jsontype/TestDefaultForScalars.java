public void testNumericScalars() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     assertEquals("[123]", m.writeValueAsString(new Object[] { Integer.valueOf(123) })); [EOL]     assertEquals("[[\"java.lang.Long\",37]]", m.writeValueAsString(new Object[] { Long.valueOf(37) })); [EOL]     assertEquals("[0.25]", m.writeValueAsString(new Object[] { Double.valueOf(0.25) })); [EOL]     assertEquals("[[\"java.lang.Float\",0.5]]", m.writeValueAsString(new Object[] { Float.valueOf(0.5f) })); [EOL] } <line_num>: 37,47
public void testDateScalars() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     long ts = 12345678L; [EOL]     assertEquals("[[\"java.util.Date\"," + ts + "]]", m.writeValueAsString(new Object[] { new Date(ts) })); [EOL]     Calendar c = Calendar.getInstance(); [EOL]     c.setTimeInMillis(ts); [EOL]     String json = m.writeValueAsString(new Object[] { c }); [EOL]     assertEquals("[[\"" + c.getClass().getName() + "\"," + ts + "]]", json); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     assertTrue(result[0] instanceof Calendar); [EOL]     assertEquals(ts, ((Calendar) result[0]).getTimeInMillis()); [EOL] } <line_num>: 49,68
public void testMiscScalars() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     assertEquals("[\"abc\"]", m.writeValueAsString(new Object[] { "abc" })); [EOL]     assertEquals("[true,null,false]", m.writeValueAsString(new Boolean[] { true, null, false })); [EOL] } <line_num>: 70,78
public void testScalarArrays() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] input = new Object[] { "abc", new Date(1234567), null, Integer.valueOf(456) }; [EOL]     String json = m.writeValueAsString(input); [EOL]     assertEquals("[\"abc\",[\"java.util.Date\",1234567],null,456]", json); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertArrayEquals(input, output); [EOL] } <line_num>: 84,97
public void test417() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     Jackson417Bean input = new Jackson417Bean(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Jackson417Bean result = m.readValue(json, Jackson417Bean.class); [EOL]     assertEquals(input.foo, result.foo); [EOL]     assertEquals(input.bar, result.bar); [EOL] } <line_num>: 102,111
