protected Animal(String n) { [EOL]     name = n; [EOL] } <line_num>: 28,28
@JsonCreator [EOL] public Dog(@JsonProperty("name") String name) { [EOL]     super(name); [EOL] } <line_num>: 36,39
@JsonCreator [EOL] public Cat(@JsonProperty("furColor") String c) { [EOL]     super(null); [EOL]     furColor = c; [EOL] } <line_num>: 49,53
@JsonCreator [EOL] public Fish() { [EOL]     super(null); [EOL] } <line_num>: 62,66
protected DummyBase(boolean foo) { [EOL] } <line_num>: 76,76
public DummyImpl() { [EOL]     super(true); [EOL] } <line_num>: 82,82
public void setBoneCount(int i) { [EOL]     boneCount = i; [EOL] } <line_num>: 41,41
public void setName(String n) { [EOL]     name = n; [EOL] } <line_num>: 55,55
public void testSimpleClassAsProperty() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Animal a = m.readValue(asJSONObjectValueString("@classy", Cat.class.getName(), "furColor", "tabby", "name", "Garfield"), Animal.class); [EOL]     assertNotNull(a); [EOL]     assertEquals(Cat.class, a.getClass()); [EOL]     Cat c = (Cat) a; [EOL]     assertEquals("Garfield", c.name); [EOL]     assertEquals("tabby", c.furColor); [EOL] } <line_num>: 114,124
public void testTypeAsWrapper() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(Animal.class, TypeWithWrapper.class); [EOL]     String JSON = "{\".TestTypedDeserialization$Dog\" : " + asJSONObjectValueString(m, "name", "Scooby", "boneCount", "6") + " }"; [EOL]     Animal a = m.readValue(JSON, Animal.class); [EOL]     assertTrue(a instanceof Animal); [EOL]     assertEquals(Dog.class, a.getClass()); [EOL]     Dog d = (Dog) a; [EOL]     assertEquals("Scooby", d.name); [EOL]     assertEquals(6, d.boneCount); [EOL] } <line_num>: 127,139
public void testTypeAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(Animal.class, TypeWithArray.class); [EOL]     String JSON = "[\"" + Dog.class.getName() + "\", " + asJSONObjectValueString(m, "name", "Martti", "boneCount", "11") + " ]"; [EOL]     Animal a = m.readValue(JSON, Animal.class); [EOL]     assertEquals(Dog.class, a.getClass()); [EOL]     Dog d = (Dog) a; [EOL]     assertEquals("Martti", d.name); [EOL]     assertEquals(11, d.boneCount); [EOL] } <line_num>: 142,154
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] } <line_num>: 157,187
public void testCagedAnimal() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String jsonCat = asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Nilson", "furColor", "black"); [EOL]     String JSON = "{\"animal\":" + jsonCat + "}"; [EOL]     AnimalContainer cont = m.readValue(JSON, AnimalContainer.class); [EOL]     assertNotNull(cont); [EOL]     Animal a = cont.animal; [EOL]     assertNotNull(a); [EOL]     Cat c = (Cat) a; [EOL]     assertEquals("Nilson", c.name); [EOL]     assertEquals("black", c.furColor); [EOL] } <line_num>: 189,202
public void testAbstractEmptyBaseClass() throws Exception { [EOL]     DummyBase result = new ObjectMapper().readValue("[\"" + DummyImpl.class.getName() + "\",{\"x\":3}]", DummyBase.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DummyImpl.class, result.getClass()); [EOL]     assertEquals(3, ((DummyImpl) result).x); [EOL] } <line_num>: 208,215
public void testIssue506WithDate() throws Exception { [EOL]     Issue506DateBean input = new Issue506DateBean(); [EOL]     input.date = new Date(1234L); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     Issue506DateBean output = mapper.readValue(json, Issue506DateBean.class); [EOL]     assertEquals(input.date, output.date); [EOL] } <line_num>: 218,228
public void testIssue506WithNumber() throws Exception { [EOL]     Issue506NumberBean input = new Issue506NumberBean(); [EOL]     input.number = Long.valueOf(4567L); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     Issue506NumberBean output = mapper.readValue(json, Issue506NumberBean.class); [EOL]     assertEquals(input.number, output.number); [EOL] } <line_num>: 231,241
