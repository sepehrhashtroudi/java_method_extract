public FieldWrapperBean() { [EOL] } <line_num>: 28,28
public FieldWrapperBean(Object o) { [EOL]     value = o; [EOL] } <line_num>: 29,29
public FieldWrapperBeanArray() { [EOL] } <line_num>: 38,38
public FieldWrapperBeanArray(FieldWrapperBean[] beans) { [EOL]     this.beans = beans; [EOL] } <line_num>: 39,39
public MethodWrapperBean() { [EOL] } <line_num>: 52,52
public MethodWrapperBean(Object o) { [EOL]     value = o; [EOL] } <line_num>: 53,53
public MethodWrapperBeanArray() { [EOL] } <line_num>: 67,67
public MethodWrapperBeanArray(MethodWrapperBean[] beans) { [EOL]     this.beans = beans; [EOL] } <line_num>: 68,68
@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.WRAPPER_ARRAY) [EOL] public Object getValue() { [EOL]     return value; [EOL] } <line_num>: 46,47
@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.WRAPPER_ARRAY) [EOL] public void setValue(Object v) { [EOL]     value = v; [EOL] } <line_num>: 49,50
@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.WRAPPER_ARRAY) [EOL] public MethodWrapperBean[] getValue() { [EOL]     return beans; [EOL] } <line_num>: 61,62
@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.WRAPPER_ARRAY) [EOL] public void setValue(MethodWrapperBean[] v) { [EOL]     beans = v; [EOL] } <line_num>: 64,65
public void testSimpleField() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(new FieldWrapperBean(new StringWrapper("foo"))); [EOL]     FieldWrapperBean bean = mapper.readValue(json, FieldWrapperBean.class); [EOL]     assertNotNull(bean.value); [EOL]     assertEquals(StringWrapper.class, bean.value.getClass()); [EOL]     assertEquals(((StringWrapper) bean.value).str, "foo"); [EOL] } <line_num>: 81,90
public void testSimpleMethod() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(new FieldWrapperBean(new IntWrapper(37))); [EOL]     FieldWrapperBean bean = mapper.readValue(json, FieldWrapperBean.class); [EOL]     assertNotNull(bean.value); [EOL]     assertEquals(IntWrapper.class, bean.value.getClass()); [EOL]     assertEquals(((IntWrapper) bean.value).i, 37); [EOL] } <line_num>: 92,101
public void testSimpleListField() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FieldWrapperBeanList list = new FieldWrapperBeanList(); [EOL]     list.add(new FieldWrapperBean(new OtherBean())); [EOL]     String json = mapper.writeValueAsString(list); [EOL]     FieldWrapperBeanList result = mapper.readValue(json, FieldWrapperBeanList.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     FieldWrapperBean bean = list.get(0); [EOL]     assertEquals(OtherBean.class, bean.value.getClass()); [EOL]     assertEquals(((OtherBean) bean.value).x, 1); [EOL]     assertEquals(((OtherBean) bean.value).y, 1); [EOL] } <line_num>: 103,117
public void testSimpleListMethod() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     MethodWrapperBeanList list = new MethodWrapperBeanList(); [EOL]     list.add(new MethodWrapperBean(new BooleanWrapper(true))); [EOL]     list.add(new MethodWrapperBean(new StringWrapper("x"))); [EOL]     list.add(new MethodWrapperBean(new OtherBean())); [EOL]     String json = mapper.writeValueAsString(list); [EOL]     MethodWrapperBeanList result = mapper.readValue(json, MethodWrapperBeanList.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(3, result.size()); [EOL]     MethodWrapperBean bean = result.get(0); [EOL]     assertEquals(BooleanWrapper.class, bean.value.getClass()); [EOL]     assertEquals(((BooleanWrapper) bean.value).b, Boolean.TRUE); [EOL]     bean = result.get(1); [EOL]     assertEquals(StringWrapper.class, bean.value.getClass()); [EOL]     assertEquals(((StringWrapper) bean.value).str, "x"); [EOL]     bean = result.get(2); [EOL]     assertEquals(OtherBean.class, bean.value.getClass()); [EOL] } <line_num>: 119,138
public void testSimpleArrayField() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FieldWrapperBeanArray array = new FieldWrapperBeanArray(new FieldWrapperBean[] { new FieldWrapperBean(new BooleanWrapper(true)) }); [EOL]     String json = mapper.writeValueAsString(array); [EOL]     FieldWrapperBeanArray result = mapper.readValue(json, FieldWrapperBeanArray.class); [EOL]     assertNotNull(result); [EOL]     FieldWrapperBean[] beans = result.beans; [EOL]     assertEquals(1, beans.length); [EOL]     FieldWrapperBean bean = beans[0]; [EOL]     assertEquals(BooleanWrapper.class, bean.value.getClass()); [EOL]     assertEquals(((BooleanWrapper) bean.value).b, Boolean.TRUE); [EOL] } <line_num>: 140,153
public void testSimpleArrayMethod() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     MethodWrapperBeanArray array = new MethodWrapperBeanArray(new MethodWrapperBean[] { new MethodWrapperBean(new StringWrapper("A")) }); [EOL]     String json = mapper.writeValueAsString(array); [EOL]     MethodWrapperBeanArray result = mapper.readValue(json, MethodWrapperBeanArray.class); [EOL]     assertNotNull(result); [EOL]     MethodWrapperBean[] beans = result.beans; [EOL]     assertEquals(1, beans.length); [EOL]     MethodWrapperBean bean = beans[0]; [EOL]     assertEquals(StringWrapper.class, bean.value.getClass()); [EOL]     assertEquals(((StringWrapper) bean.value).str, "A"); [EOL] } <line_num>: 155,168
public void testSimpleMapField() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FieldWrapperBeanMap map = new FieldWrapperBeanMap(); [EOL]     map.put("foop", new FieldWrapperBean(new IntWrapper(13))); [EOL]     String json = mapper.writeValueAsString(map); [EOL]     FieldWrapperBeanMap result = mapper.readValue(json, FieldWrapperBeanMap.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     FieldWrapperBean bean = result.get("foop"); [EOL]     assertNotNull(bean); [EOL]     Object ob = bean.value; [EOL]     assertEquals(IntWrapper.class, ob.getClass()); [EOL]     assertEquals(((IntWrapper) ob).i, 13); [EOL] } <line_num>: 170,184
public void testSimpleMapMethod() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     MethodWrapperBeanMap map = new MethodWrapperBeanMap(); [EOL]     map.put("xyz", new MethodWrapperBean(new BooleanWrapper(true))); [EOL]     String json = mapper.writeValueAsString(map); [EOL]     MethodWrapperBeanMap result = mapper.readValue(json, MethodWrapperBeanMap.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     MethodWrapperBean bean = result.get("xyz"); [EOL]     assertNotNull(bean); [EOL]     Object ob = bean.value; [EOL]     assertEquals(BooleanWrapper.class, ob.getClass()); [EOL]     assertEquals(((BooleanWrapper) ob).b, Boolean.TRUE); [EOL] } <line_num>: 186,200
