public StringBean() { [EOL]     this(null); [EOL] } <line_num>: 25,25
protected StringBean(String n) { [EOL]     name = n; [EOL] } <line_num>: 26,26
private ComplexChoice(boolean b) { [EOL]     state = b; [EOL] } <line_num>: 39,39
public PolymorphicType() { [EOL] } <line_num>: 50,50
public PolymorphicType(String foo, int bar) { [EOL]     this.foo = foo; [EOL]     this.bar = bar; [EOL] } <line_num>: 51,54
public BeanHolder() { [EOL] } <line_num>: 61,61
public BeanHolder(AbstractBean b) { [EOL]     bean = b; [EOL] } <line_num>: 62,62
public ObjectHolder() { [EOL] } <line_num>: 69,69
public ObjectHolder(Object v) { [EOL]     value = v; [EOL] } <line_num>: 70,70
@Override [EOL] public String toString() { [EOL]     return String.valueOf(state); [EOL] } <line_num>: 41,42
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] } <line_num>: 98,114
public void testAbstractBean() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     AbstractBean[] input = new AbstractBean[] { new StringBean("xyz") }; [EOL]     String serial = m.writeValueAsString(input); [EOL]     try { [EOL]         m.readValue(serial, AbstractBean[].class); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "can not construct"); [EOL]     } [EOL]     m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE); [EOL]     serial = m.writeValueAsString(input); [EOL]     AbstractBean[] beans = m.readValue(serial, AbstractBean[].class); [EOL]     assertEquals(1, beans.length); [EOL]     assertEquals(StringBean.class, beans[0].getClass()); [EOL]     assertEquals("xyz", ((StringBean) beans[0]).name); [EOL] } <line_num>: 120,142
public void testNonFinalBean() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE); [EOL]     StringBean bean = new StringBean("x"); [EOL]     assertEquals("{\"name\":\"x\"}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     assertEquals("[\"" + StringBean.class.getName() + "\",{\"name\":\"x\"}]", m.writeValueAsString(bean)); [EOL] } <line_num>: 148,160
public void testNullValue() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     BeanHolder h = new BeanHolder(); [EOL]     String json = m.writeValueAsString(h); [EOL]     assertNotNull(json); [EOL]     BeanHolder result = m.readValue(json, BeanHolder.class); [EOL]     assertNotNull(result); [EOL]     assertNull(result.bean); [EOL] } <line_num>: 162,172
public void testEnumAsObject() throws Exception { [EOL]     Object[] input = new Object[] { Choice.YES }; [EOL]     Object[] input2 = new Object[] { ComplexChoice.MAYBE }; [EOL]     assertEquals("[\"YES\"]", serializeAsString(input)); [EOL]     assertEquals("[\"MAYBE\"]", serializeAsString(input2)); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     assertEquals("[[\"" + Choice.class.getName() + "\",\"YES\"]]", json); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     assertEquals(Choice.YES, output[0]); [EOL]     json = m.writeValueAsString(input2); [EOL]     assertEquals("[[\"" + ComplexChoice.class.getName() + "\",\"MAYBE\"]]", json); [EOL]     output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     assertEquals(ComplexChoice.MAYBE, output[0]); [EOL] } <line_num>: 174,201
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] } <line_num>: 203,219
@SuppressWarnings("unchecked") [EOL] public void testEnumMap() throws Exception { [EOL]     EnumMap<Choice, String> map = new EnumMap<Choice, String>(Choice.class); [EOL]     map.put(Choice.NO, "maybe"); [EOL]     Object[] input = new Object[] { map }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumMap<?, ?>); [EOL]     EnumMap<Choice, String> map2 = (EnumMap<Choice, String>) ob; [EOL]     assertEquals(1, map2.size()); [EOL]     assertEquals("maybe", map2.get(Choice.NO)); [EOL]     assertNull(map2.get(Choice.YES)); [EOL] } <line_num>: 221,238
public void testJackson311() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     String json = mapper.writeValueAsString(new PolymorphicType("hello", 2)); [EOL]     PolymorphicType value = mapper.readValue(json, PolymorphicType.class); [EOL]     assertEquals("hello", value.foo); [EOL]     assertEquals(Integer.valueOf(2), value.bar); [EOL] } <line_num>: 240,248
public void testTokenBuffer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     TokenBuffer buf = new TokenBuffer(mapper); [EOL]     buf.writeStartObject(); [EOL]     buf.writeNumberField("num", 42); [EOL]     buf.writeEndObject(); [EOL]     String json = mapper.writeValueAsString(new ObjectHolder(buf)); [EOL]     ObjectHolder holder = mapper.readValue(json, ObjectHolder.class); [EOL]     assertNotNull(holder.value); [EOL]     assertSame(TokenBuffer.class, holder.value.getClass()); [EOL]     JsonParser jp = ((TokenBuffer) holder.value).asParser(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf = new TokenBuffer(mapper); [EOL]     buf.writeStartArray(); [EOL]     buf.writeBoolean(true); [EOL]     buf.writeEndArray(); [EOL]     json = mapper.writeValueAsString(new ObjectHolder(buf)); [EOL]     holder = mapper.readValue(json, ObjectHolder.class); [EOL]     assertNotNull(holder.value); [EOL]     assertSame(TokenBuffer.class, holder.value.getClass()); [EOL]     jp = ((TokenBuffer) holder.value).asParser(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf = new TokenBuffer(mapper); [EOL]     buf.writeNumber(321); [EOL]     json = mapper.writeValueAsString(new ObjectHolder(buf)); [EOL]     holder = mapper.readValue(json, ObjectHolder.class); [EOL]     assertNotNull(holder.value); [EOL]     assertSame(TokenBuffer.class, holder.value.getClass()); [EOL]     jp = ((TokenBuffer) holder.value).asParser(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals(321, jp.getIntValue()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL] } <line_num>: 251,301
public void testIssue352() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, JsonTypeInfo.As.PROPERTY); [EOL]     DiscussBean d1 = new DiscussBean(); [EOL]     d1.subject = "mouse"; [EOL]     d1.weight = 88; [EOL]     DomainBeanWrapper wrapper = new DomainBeanWrapper(); [EOL]     wrapper.name = "mickey"; [EOL]     wrapper.myBean = d1; [EOL]     String json = mapper.writeValueAsString(wrapper); [EOL]     DomainBeanWrapper result = mapper.readValue(json, DomainBeanWrapper.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(wrapper.myBean); [EOL]     assertSame(DiscussBean.class, wrapper.myBean.getClass()); [EOL] } <line_num>: 306,321
public void testFeature432() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, "*CLASS*"); [EOL]     String json = mapper.writeValueAsString(new BeanHolder(new StringBean("punny"))); [EOL]     assertEquals("{\"bean\":{\"*CLASS*\":\"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject$StringBean\",\"name\":\"punny\"}}", json); [EOL] } <line_num>: 324,330
@SuppressWarnings("unchecked") [EOL] private void _verifySerializationAsMap(String str) throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     List<Object> list = m.readValue(str, List.class); [EOL]     assertEquals(1, list.size()); [EOL]     Object entryOb = list.get(0); [EOL]     assertTrue(entryOb instanceof List<?>); [EOL]     List<?> entryList = (List<?>) entryOb; [EOL]     assertEquals(2, entryList.size()); [EOL]     assertEquals(StringBean.class.getName(), entryList.get(0)); [EOL]     assertTrue(entryList.get(1) instanceof Map); [EOL]     Map<?, ?> map = (Map<?, ?>) entryList.get(1); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("abc", map.get("name")); [EOL] } <line_num>: 338,359
