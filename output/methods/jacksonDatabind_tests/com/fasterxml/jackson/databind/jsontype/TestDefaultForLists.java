public ListOfLongs() { [EOL] } <line_num>: 27,27
public ListOfLongs(Long... ls) { [EOL]     longs = new ArrayList<Long>(); [EOL]     for (Long l : ls) { [EOL]         longs.add(l); [EOL]     } [EOL] } <line_num>: 28,33
public ListOfNumbers() { [EOL] } <line_num>: 39,39
public ListOfNumbers(Number... numbers) { [EOL]     nums = new ArrayList<Number>(); [EOL]     for (Number n : numbers) { [EOL]         nums.add(n); [EOL]     } [EOL] } <line_num>: 40,45
public SetBean() { [EOL] } <line_num>: 57,57
public SetBean(String str) { [EOL]     names = new HashSet<String>(); [EOL]     names.add(str); [EOL] } <line_num>: 58,61
public void testListOfLongs() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ListOfLongs input = new ListOfLongs(1L, 2L, 3L); [EOL]     String json = m.writeValueAsString(input); [EOL]     assertEquals("{\"longs\":[\"java.util.ArrayList\",[1,2,3]]}", json); [EOL]     ListOfLongs output = m.readValue(json, ListOfLongs.class); [EOL]     assertNotNull(output.longs); [EOL]     assertEquals(3, output.longs.size()); [EOL]     assertEquals(Long.valueOf(1L), output.longs.get(0)); [EOL]     assertEquals(Long.valueOf(2L), output.longs.get(1)); [EOL]     assertEquals(Long.valueOf(3L), output.longs.get(2)); [EOL] } <line_num>: 70,84
public void testListOfNumbers() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ListOfNumbers input = new ListOfNumbers(Long.valueOf(1L), Integer.valueOf(2), Double.valueOf(3.0)); [EOL]     String json = m.writeValueAsString(input); [EOL]     assertEquals("{\"nums\":[\"java.util.ArrayList\",[[\"java.lang.Long\",1],2,3.0]]}", json); [EOL]     ListOfNumbers output = m.readValue(json, ListOfNumbers.class); [EOL]     assertNotNull(output.nums); [EOL]     assertEquals(3, output.nums.size()); [EOL]     assertEquals(Long.valueOf(1L), output.nums.get(0)); [EOL]     assertEquals(Integer.valueOf(2), output.nums.get(1)); [EOL]     assertEquals(Double.valueOf(3.0), output.nums.get(2)); [EOL] } <line_num>: 92,106
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] } <line_num>: 108,124
public void testJackson628() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(DefaultTyping.NON_FINAL); [EOL]     ArrayList<Foo> data = new ArrayList<Foo>(); [EOL]     String json = mapper.writeValueAsString(data); [EOL]     List<?> output = mapper.readValue(json, List.class); [EOL]     assertTrue(output.isEmpty()); [EOL] } <line_num>: 126,134
public void testJackson667() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); [EOL]     String json = mapper.writeValueAsString(new SetBean("abc")); [EOL]     SetBean bean = mapper.readValue(json, SetBean.class); [EOL]     assertNotNull(bean); [EOL]     assertTrue(bean.names instanceof HashSet); [EOL] } <line_num>: 136,145
