public MyPojo() { [EOL] } <line_num>: 21,21
public MyPojo(int x0, int y0) { [EOL]     x = x0; [EOL]     y = y0; [EOL] } <line_num>: 22,25
public int getY() { [EOL]     return y; [EOL] } <line_num>: 27,27
public void setY(int y) { [EOL]     this.y = y; [EOL] } <line_num>: 28,28
public void testConfigs() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     byte[] base = jdkSerialize(mapper.getDeserializationConfig().getBaseSettings()); [EOL]     assertNotNull(jdkDeserialize(base)); [EOL]     DeserializationConfig origDC = mapper.getDeserializationConfig(); [EOL]     SerializationConfig origSC = mapper.getSerializationConfig(); [EOL]     byte[] dcBytes = jdkSerialize(origDC); [EOL]     byte[] scBytes = jdkSerialize(origSC); [EOL]     DeserializationConfig dc = jdkDeserialize(dcBytes); [EOL]     assertNotNull(dc); [EOL]     assertEquals(dc._deserFeatures, origDC._deserFeatures); [EOL]     SerializationConfig sc = jdkDeserialize(scBytes); [EOL]     assertNotNull(sc); [EOL]     assertEquals(sc._serFeatures, origSC._serFeatures); [EOL] } <line_num>: 37,56
public void testObjectWriter() throws IOException { [EOL]     ObjectWriter origWriter = new ObjectMapper().writer(); [EOL]     final String EXP_JSON = "{\"x\":2,\"y\":3}"; [EOL]     final MyPojo p = new MyPojo(2, 3); [EOL]     assertEquals(EXP_JSON, origWriter.writeValueAsString(p)); [EOL]     byte[] bytes = jdkSerialize(origWriter); [EOL]     ObjectWriter writer2 = jdkDeserialize(bytes); [EOL]     assertEquals(EXP_JSON, writer2.writeValueAsString(p)); [EOL] } <line_num>: 58,67
public void testObjectReader() throws IOException { [EOL]     ObjectReader origReader = new ObjectMapper().reader(MyPojo.class); [EOL]     final String JSON = "{\"x\":1,\"y\":2}"; [EOL]     MyPojo p1 = origReader.readValue(JSON); [EOL]     assertEquals(2, p1.y); [EOL]     byte[] bytes = jdkSerialize(origReader); [EOL]     ObjectReader reader2 = jdkDeserialize(bytes); [EOL]     MyPojo p2 = reader2.readValue(JSON); [EOL]     assertEquals(2, p2.y); [EOL] } <line_num>: 69,79
public void testObjectMapper() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final String EXP_JSON = "{\"x\":2,\"y\":3}"; [EOL]     final MyPojo p = new MyPojo(2, 3); [EOL]     assertEquals(EXP_JSON, mapper.writeValueAsString(p)); [EOL]     byte[] bytes = jdkSerialize(mapper); [EOL]     ObjectMapper mapper2 = jdkDeserialize(bytes); [EOL]     assertEquals(EXP_JSON, mapper2.writeValueAsString(p)); [EOL]     MyPojo p2 = mapper2.readValue(EXP_JSON, MyPojo.class); [EOL]     assertEquals(p.x, p2.x); [EOL]     assertEquals(p.y, p2.y); [EOL] } <line_num>: 81,94
protected byte[] jdkSerialize(Object o) throws IOException { [EOL]     ByteArrayOutputStream bytes = new ByteArrayOutputStream(1000); [EOL]     ObjectOutputStream obOut = new ObjectOutputStream(bytes); [EOL]     obOut.writeObject(o); [EOL]     obOut.close(); [EOL]     return bytes.toByteArray(); [EOL] } <line_num>: 102,109
@SuppressWarnings("unchecked") [EOL] protected <T> T jdkDeserialize(byte[] raw) throws IOException { [EOL]     ObjectInputStream objIn = new ObjectInputStream(new ByteArrayInputStream(raw)); [EOL]     try { [EOL]         return (T) objIn.readObject(); [EOL]     } catch (ClassNotFoundException e) { [EOL]         fail("Missing class: " + e.getMessage()); [EOL]         return null; [EOL]     } finally { [EOL]         objIn.close(); [EOL]     } [EOL] } <line_num>: 111,123
