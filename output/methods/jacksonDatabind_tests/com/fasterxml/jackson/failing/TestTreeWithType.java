public Foo() { [EOL] } <line_num>: 11,11
public Foo(String bar) { [EOL]     this.bar = bar; [EOL] } <line_num>: 13,15
public void testValueAsStringWithoutDefaultTyping() throws Exception { [EOL]     Foo foo = new Foo("baz"); [EOL]     String json = mapper.writeValueAsString(foo); [EOL]     JsonNode jsonNode = mapper.readTree(json); [EOL]     assertEquals(jsonNode.get("bar").textValue(), foo.bar); [EOL] } <line_num>: 26,33
public void testValueAsStringWithDefaultTyping() throws Exception { [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); [EOL]     Foo foo = new Foo("baz"); [EOL]     String json = mapper.writeValueAsString(foo); [EOL]     JsonNode jsonNode = mapper.readTree(json); [EOL]     assertEquals(jsonNode.get("bar").textValue(), foo.bar); [EOL] } <line_num>: 35,43
public void testReadTreeWithDefaultTyping() throws Exception { [EOL]     final String CLASS = Foo.class.getName(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); [EOL]     String json = "{\"@class\":\"" + CLASS + "\",\"bar\":\"baz\"}"; [EOL]     JsonNode jsonNode = mapper.readTree(json); [EOL]     assertEquals(jsonNode.get("bar").textValue(), "baz"); [EOL] } <line_num>: 45,54
public void testValueToTreeWithoutDefaultTyping() throws Exception { [EOL]     Foo foo = new Foo("baz"); [EOL]     JsonNode jsonNode = mapper.valueToTree(foo); [EOL]     assertEquals(jsonNode.get("bar").textValue(), foo.bar); [EOL] } <line_num>: 56,61
public void testValueToTreeWithDefaultTyping() throws Exception { [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); [EOL]     Foo foo = new Foo("baz"); [EOL]     JsonNode jsonNode = mapper.valueToTree(foo); [EOL]     assertEquals(jsonNode.get("bar").textValue(), foo.bar); [EOL] } <line_num>: 63,69
