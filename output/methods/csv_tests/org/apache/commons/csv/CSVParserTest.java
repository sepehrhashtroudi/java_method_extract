@Test [EOL] public void testGetLine() throws IOException { [EOL]     CSVParser parser = new CSVParser(new StringReader(code), CSVFormat.DEFAULT.withSurroundingSpacesIgnored(true)); [EOL]     for (String[] re : res) { [EOL]         assertArrayEquals(re, parser.getRecord().values()); [EOL]     } [EOL]     assertNull(parser.getRecord()); [EOL] } <line_num>: 56,64
@Test [EOL] public void testGetRecords() throws IOException { [EOL]     CSVParser parser = new CSVParser(new StringReader(code), CSVFormat.DEFAULT.withSurroundingSpacesIgnored(true)); [EOL]     List<CSVRecord> records = parser.getRecords(); [EOL]     assertEquals(res.length, records.size()); [EOL]     assertTrue(records.size() > 0); [EOL]     for (int i = 0; i < res.length; i++) { [EOL]         assertArrayEquals(res[i], records.get(i).values()); [EOL]     } [EOL] } <line_num>: 66,75
@Test [EOL] public void testExcelFormat1() throws IOException { [EOL]     String code = "value1,value2,value3,value4\r\na,b,c,d\r\n  x,,," + "\r\n\r\n\"\"\"hello\"\"\",\"  \"\"world\"\"\",\"abc\ndef\",\r\n"; [EOL]     String[][] res = { { "value1", "value2", "value3", "value4" }, { "a", "b", "c", "d" }, { "  x", "", "", "" }, { "" }, { "\"hello\"", "  \"world\"", "abc\ndef", "" } }; [EOL]     CSVParser parser = new CSVParser(code, CSVFormat.EXCEL); [EOL]     List<CSVRecord> records = parser.getRecords(); [EOL]     assertEquals(res.length, records.size()); [EOL]     assertTrue(records.size() > 0); [EOL]     for (int i = 0; i < res.length; i++) { [EOL]         assertArrayEquals(res[i], records.get(i).values()); [EOL]     } [EOL] } <line_num>: 77,96
@Test [EOL] public void testExcelFormat2() throws Exception { [EOL]     String code = "foo,baar\r\n\r\nhello,\r\n\r\nworld,\r\n"; [EOL]     String[][] res = { { "foo", "baar" }, { "" }, { "hello", "" }, { "" }, { "world", "" } }; [EOL]     CSVParser parser = new CSVParser(code, CSVFormat.EXCEL); [EOL]     List<CSVRecord> records = parser.getRecords(); [EOL]     assertEquals(res.length, records.size()); [EOL]     assertTrue(records.size() > 0); [EOL]     for (int i = 0; i < res.length; i++) { [EOL]         assertArrayEquals(res[i], records.get(i).values()); [EOL]     } [EOL] } <line_num>: 98,115
@Test [EOL] public void testEndOfFileBehaviourExcel() throws Exception { [EOL]     String[] codes = { "hello,\r\n\r\nworld,\r\n", "hello,\r\n\r\nworld,", "hello,\r\n\r\nworld,\"\"\r\n", "hello,\r\n\r\nworld,\"\"", "hello,\r\n\r\nworld,\n", "hello,\r\n\r\nworld,", "hello,\r\n\r\nworld,\"\"\n", "hello,\r\n\r\nworld,\"\"" }; [EOL]     String[][] res = { { "hello", "" }, { "" }, { "world", "" } }; [EOL]     for (String code : codes) { [EOL]         CSVParser parser = new CSVParser(code, CSVFormat.EXCEL); [EOL]         List<CSVRecord> records = parser.getRecords(); [EOL]         assertEquals(res.length, records.size()); [EOL]         assertTrue(records.size() > 0); [EOL]         for (int i = 0; i < res.length; i++) { [EOL]             assertArrayEquals(res[i], records.get(i).values()); [EOL]         } [EOL]     } [EOL] } <line_num>: 117,144
@Test [EOL] public void testEndOfFileBehaviorCSV() throws Exception { [EOL]     String[] codes = { "hello,\r\n\r\nworld,\r\n", "hello,\r\n\r\nworld,", "hello,\r\n\r\nworld,\"\"\r\n", "hello,\r\n\r\nworld,\"\"", "hello,\r\n\r\nworld,\n", "hello,\r\n\r\nworld,", "hello,\r\n\r\nworld,\"\"\n", "hello,\r\n\r\nworld,\"\"" }; [EOL]     String[][] res = { { "hello", "" }, { "world", "" } }; [EOL]     for (String code : codes) { [EOL]         CSVParser parser = new CSVParser(new StringReader(code)); [EOL]         List<CSVRecord> records = parser.getRecords(); [EOL]         assertEquals(res.length, records.size()); [EOL]         assertTrue(records.size() > 0); [EOL]         for (int i = 0; i < res.length; i++) { [EOL]             assertArrayEquals(res[i], records.get(i).values()); [EOL]         } [EOL]     } [EOL] } <line_num>: 146,171
@Test [EOL] public void testEmptyLineBehaviourExcel() throws Exception { [EOL]     String[] codes = { "hello,\r\n\r\n\r\n", "hello,\n\n\n", "hello,\"\"\r\n\r\n\r\n", "hello,\"\"\n\n\n" }; [EOL]     String[][] res = { { "hello", "" }, { "" }, { "" } }; [EOL]     for (String code : codes) { [EOL]         CSVParser parser = new CSVParser(code, CSVFormat.EXCEL); [EOL]         List<CSVRecord> records = parser.getRecords(); [EOL]         assertEquals(res.length, records.size()); [EOL]         assertTrue(records.size() > 0); [EOL]         for (int i = 0; i < res.length; i++) { [EOL]             assertArrayEquals(res[i], records.get(i).values()); [EOL]         } [EOL]     } [EOL] } <line_num>: 173,195
@Test [EOL] public void testEmptyLineBehaviourCSV() throws Exception { [EOL]     String[] codes = { "hello,\r\n\r\n\r\n", "hello,\n\n\n", "hello,\"\"\r\n\r\n\r\n", "hello,\"\"\n\n\n" }; [EOL]     String[][] res = { { "hello", "" } }; [EOL]     for (String code : codes) { [EOL]         CSVParser parser = new CSVParser(new StringReader(code)); [EOL]         List<CSVRecord> records = parser.getRecords(); [EOL]         assertEquals(res.length, records.size()); [EOL]         assertTrue(records.size() > 0); [EOL]         for (int i = 0; i < res.length; i++) { [EOL]             assertArrayEquals(res[i], records.get(i).values()); [EOL]         } [EOL]     } [EOL] } <line_num>: 197,217
@Test [EOL] public void testEmptyFile() throws Exception { [EOL]     CSVParser parser = new CSVParser("", CSVFormat.DEFAULT); [EOL]     assertNull(parser.getRecord()); [EOL] } <line_num>: 219,223
@Test [EOL] @Ignore [EOL] public void testBackslashEscapingOld() throws IOException { [EOL]     String code = "one,two,three\n" + "on\\\"e,two\n" + "on\"e,two\n" + "one,\"tw\\\"o\"\n" + "one,\"t\\,wo\"\n" + "one,two,\"th,ree\"\n" + "\"a\\\\\"\n" + "a\\,b\n" + "\"a\\\\,b\""; [EOL]     String[][] res = { { "one", "two", "three" }, { "on\\\"e", "two" }, { "on\"e", "two" }, { "one", "tw\"o" }, { "one", "t\\,wo" }, { "one", "two", "th,ree" }, { "a\\\\" }, { "a\\", "b" }, { "a\\\\,b" } }; [EOL]     CSVParser parser = new CSVParser(new StringReader(code)); [EOL]     List<CSVRecord> records = parser.getRecords(); [EOL]     assertEquals(res.length, records.size()); [EOL]     assertTrue(records.size() > 0); [EOL]     for (int i = 0; i < res.length; i++) { [EOL]         assertArrayEquals(res[i], records.get(i).values()); [EOL]     } [EOL] } <line_num>: 225,256
@Test [EOL] public void testBackslashEscaping() throws IOException { [EOL]     String code = "one,two,three\n" + "'',''\n" + "/',/'\n" + "'/'','/''\n" + "'''',''''\n" + "/,,/,\n" + "//,//\n" + "'//','//'\n" + "   8   ,   \"quoted \"\" /\" // string\"   \n" + "9,   /\n   \n" + ""; [EOL]     String[][] res = { { "one", "two", "three" }, { "", "" }, { "'", "'" }, { "'", "'" }, { "'", "'" }, { ",", "," }, { "/", "/" }, { "/", "/" }, { "   8   ", "   \"quoted \"\" \" / string\"   " }, { "9", "   \n   " } }; [EOL]     CSVFormat format = new CSVFormat(',', '\'', CSVFormat.DISABLED, '/', false, true, "\r\n", null); [EOL]     CSVParser parser = new CSVParser(code, format); [EOL]     List<CSVRecord> records = parser.getRecords(); [EOL]     assertTrue(records.size() > 0); [EOL]     for (int i = 0; i < res.length; i++) { [EOL]         assertArrayEquals(res[i], records.get(i).values()); [EOL]     } [EOL] } <line_num>: 258,299
@Test [EOL] public void testBackslashEscaping2() throws IOException { [EOL]     String code = "" + " , , \n" + " \t ,  , \n" + " // , /, , /,\n" + ""; [EOL]     String[][] res = { { " ", " ", " " }, { " \t ", "  ", " " }, { " / ", " , ", " ," } }; [EOL]     CSVFormat format = new CSVFormat(',', CSVFormat.DISABLED, CSVFormat.DISABLED, '/', false, true, "\r\n", null); [EOL]     CSVParser parser = new CSVParser(code, format); [EOL]     List<CSVRecord> records = parser.getRecords(); [EOL]     assertTrue(records.size() > 0); [EOL]     assertTrue(CSVPrinterTest.equals(res, records)); [EOL] } <line_num>: 301,327
@Test [EOL] public void testDefaultFormat() throws IOException { [EOL]     String code = "" + "a,b\n" + "\"\n\",\" \"\n" + "\"\",#\n"; [EOL]     String[][] res = { { "a", "b" }, { "\n", " " }, { "", "#" } }; [EOL]     CSVFormat format = CSVFormat.DEFAULT; [EOL]     assertEquals(CSVFormat.DISABLED, format.getCommentStart()); [EOL]     CSVParser parser = new CSVParser(code, format); [EOL]     List<CSVRecord> records = parser.getRecords(); [EOL]     assertTrue(records.size() > 0); [EOL]     assertTrue(CSVPrinterTest.equals(res, records)); [EOL]     String[][] res_comments = { { "a", "b" }, { "\n", " " }, { "" } }; [EOL]     format = CSVFormat.DEFAULT.withCommentStart('#'); [EOL]     parser = new CSVParser(code, format); [EOL]     records = parser.getRecords(); [EOL]     assertTrue(CSVPrinterTest.equals(res_comments, records)); [EOL] } <line_num>: 329,362
@Test [EOL] public void testCarriageReturnLineFeedEndings() throws IOException { [EOL]     String code = "foo\r\nbaar,\r\nhello,world\r\n,kanu"; [EOL]     CSVParser parser = new CSVParser(new StringReader(code)); [EOL]     List<CSVRecord> records = parser.getRecords(); [EOL]     assertEquals(4, records.size()); [EOL] } <line_num>: 364,370
@Test [EOL] public void testCarriageReturnEndings() throws IOException { [EOL]     String code = "foo\rbaar,\rhello,world\r,kanu"; [EOL]     CSVParser parser = new CSVParser(new StringReader(code)); [EOL]     List<CSVRecord> records = parser.getRecords(); [EOL]     assertEquals(4, records.size()); [EOL] } <line_num>: 372,378
@Test [EOL] public void testLineFeedEndings() throws IOException { [EOL]     String code = "foo\nbaar,\nhello,world\n,kanu"; [EOL]     CSVParser parser = new CSVParser(new StringReader(code)); [EOL]     List<CSVRecord> records = parser.getRecords(); [EOL]     assertEquals(4, records.size()); [EOL] } <line_num>: 380,386
@Test [EOL] public void testIgnoreEmptyLines() throws IOException { [EOL]     String code = "\nfoo,baar\n\r\n,\n\n,world\r\n\n"; [EOL]     CSVParser parser = new CSVParser(new StringReader(code)); [EOL]     List<CSVRecord> records = parser.getRecords(); [EOL]     assertEquals(3, records.size()); [EOL] } <line_num>: 388,396
@Test [EOL] public void testForEach() throws Exception { [EOL]     List<CSVRecord> records = new ArrayList<CSVRecord>(); [EOL]     Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); [EOL]     for (CSVRecord record : CSVFormat.DEFAULT.parse(in)) { [EOL]         records.add(record); [EOL]     } [EOL]     assertEquals(3, records.size()); [EOL]     assertArrayEquals(new String[] { "a", "b", "c" }, records.get(0).values()); [EOL]     assertArrayEquals(new String[] { "1", "2", "3" }, records.get(1).values()); [EOL]     assertArrayEquals(new String[] { "x", "y", "z" }, records.get(2).values()); [EOL] } <line_num>: 398,412
@Test [EOL] public void testIterator() throws Exception { [EOL]     Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); [EOL]     Iterator<CSVRecord> iterator = CSVFormat.DEFAULT.parse(in).iterator(); [EOL]     assertTrue(iterator.hasNext()); [EOL]     try { [EOL]         iterator.remove(); [EOL]         fail("expected UnsupportedOperationException"); [EOL]     } catch (UnsupportedOperationException expected) { [EOL]     } [EOL]     assertArrayEquals(new String[] { "a", "b", "c" }, iterator.next().values()); [EOL]     assertArrayEquals(new String[] { "1", "2", "3" }, iterator.next().values()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     assertArrayEquals(new String[] { "x", "y", "z" }, iterator.next().values()); [EOL]     assertFalse(iterator.hasNext()); [EOL]     try { [EOL]         iterator.next(); [EOL]         fail("NoSuchElementException expected"); [EOL]     } catch (NoSuchElementException e) { [EOL]     } [EOL] } <line_num>: 414,440
@Test [EOL] public void testHeader() throws Exception { [EOL]     Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); [EOL]     Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader().parse(in).iterator(); [EOL]     for (int i = 0; i < 2; i++) { [EOL]         assertTrue(records.hasNext()); [EOL]         CSVRecord record = records.next(); [EOL]         assertEquals(record.get(0), record.get("a")); [EOL]         assertEquals(record.get(1), record.get("b")); [EOL]         assertEquals(record.get(2), record.get("c")); [EOL]     } [EOL]     assertFalse(records.hasNext()); [EOL] } <line_num>: 442,457
@Test [EOL] public void testProvidedHeader() throws Exception { [EOL]     Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); [EOL]     Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader("A", "B", "C").parse(in).iterator(); [EOL]     for (int i = 0; i < 3; i++) { [EOL]         assertTrue(records.hasNext()); [EOL]         CSVRecord record = records.next(); [EOL]         assertEquals(record.get(0), record.get("A")); [EOL]         assertEquals(record.get(1), record.get("B")); [EOL]         assertEquals(record.get(2), record.get("C")); [EOL]     } [EOL]     assertFalse(records.hasNext()); [EOL] } <line_num>: 459,474
@Test [EOL] public void testGetLineNumberWithLF() throws Exception { [EOL]     CSVParser parser = new CSVParser("a\nb\nc", CSVFormat.DEFAULT.withLineSeparator("\n")); [EOL]     assertEquals(0, parser.getLineNumber()); [EOL]     assertNotNull(parser.getRecord()); [EOL]     assertEquals(1, parser.getLineNumber()); [EOL]     assertNotNull(parser.getRecord()); [EOL]     assertEquals(2, parser.getLineNumber()); [EOL]     assertNotNull(parser.getRecord()); [EOL]     assertEquals(2, parser.getLineNumber()); [EOL]     assertNull(parser.getRecord()); [EOL] } <line_num>: 476,488
@Test [EOL] public void testGetLineNumberWithCRLF() throws Exception { [EOL]     CSVParser parser = new CSVParser("a\r\nb\r\nc", CSVFormat.DEFAULT.withLineSeparator("\r\n")); [EOL]     assertEquals(0, parser.getLineNumber()); [EOL]     assertNotNull(parser.getRecord()); [EOL]     assertEquals(1, parser.getLineNumber()); [EOL]     assertNotNull(parser.getRecord()); [EOL]     assertEquals(2, parser.getLineNumber()); [EOL]     assertNotNull(parser.getRecord()); [EOL]     assertEquals(2, parser.getLineNumber()); [EOL]     assertNull(parser.getRecord()); [EOL] } <line_num>: 490,502
@Test [EOL] public void testGetLineNumberWithCR() throws Exception { [EOL]     CSVParser parser = new CSVParser("a\rb\rc", CSVFormat.DEFAULT.withLineSeparator("\r")); [EOL]     assertEquals(0, parser.getLineNumber()); [EOL]     assertNotNull(parser.getRecord()); [EOL]     assertEquals(1, parser.getLineNumber()); [EOL]     assertNotNull(parser.getRecord()); [EOL]     assertEquals(2, parser.getLineNumber()); [EOL]     assertNotNull(parser.getRecord()); [EOL]     assertEquals(2, parser.getLineNumber()); [EOL]     assertNull(parser.getRecord()); [EOL] } <line_num>: 504,516
