private CSVLexer getLexer(String input, CSVFormat format) { [EOL]     return new CSVLexer(format, new ExtendedBufferedReader(new StringReader(input))); [EOL] } <line_num>: 30,32
private void assertTokenEquals(Token.Type expectedType, String expectedContent, Token token) { [EOL]     assertEquals("Token type", expectedType, token.type); [EOL]     assertEquals("Token content", expectedContent, token.content.toString()); [EOL] } <line_num>: 34,37
@Test [EOL] public void testNextToken1() throws IOException { [EOL]     String code = "abc,def, hijk,  lmnop,   qrst,uv ,wxy   ,z , ,"; [EOL]     CSVLexer parser = getLexer(code, CSVFormat.DEFAULT.withSurroundingSpacesIgnored(true)); [EOL]     assertTokenEquals(TOKEN, "abc", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "def", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "hijk", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "lmnop", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "qrst", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "uv", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "wxy", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "z", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "", parser.nextToken(new Token())); [EOL]     assertTokenEquals(EOF, "", parser.nextToken(new Token())); [EOL] } <line_num>: 40,54
@Test [EOL] public void testNextToken2() throws IOException { [EOL]     String code = "1,2,3,\na,b x,c\n#foo\n\nd,e,\n\n"; [EOL]     CSVFormat format = CSVFormat.DEFAULT.withCommentStart('#'); [EOL]     CSVLexer parser = getLexer(code, format); [EOL]     assertTokenEquals(TOKEN, "1", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "2", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "3", parser.nextToken(new Token())); [EOL]     assertTokenEquals(EORECORD, "", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "a", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "b x", parser.nextToken(new Token())); [EOL]     assertTokenEquals(EORECORD, "c", parser.nextToken(new Token())); [EOL]     assertTokenEquals(EORECORD, "", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "d", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "e", parser.nextToken(new Token())); [EOL]     assertTokenEquals(EORECORD, "", parser.nextToken(new Token())); [EOL]     assertTokenEquals(EOF, "", parser.nextToken(new Token())); [EOL]     assertTokenEquals(EOF, "", parser.nextToken(new Token())); [EOL] } <line_num>: 57,86
@Test [EOL] public void testNextToken3() throws IOException { [EOL]     String code = "a,\\,,b\n\\,,"; [EOL]     CSVFormat format = CSVFormat.DEFAULT.withCommentStart('#'); [EOL]     CSVLexer parser = getLexer(code, format); [EOL]     assertTokenEquals(TOKEN, "a", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "\\", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "", parser.nextToken(new Token())); [EOL]     assertTokenEquals(EORECORD, "b", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "\\", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "", parser.nextToken(new Token())); [EOL]     assertTokenEquals(EOF, "", parser.nextToken(new Token())); [EOL] } <line_num>: 89,107
@Test [EOL] public void testNextToken4() throws IOException { [EOL]     String code = "a,\"foo\",b\na,   \" foo\",b\na,\"foo \"  ,b\na,  \" foo \"  ,b"; [EOL]     CSVLexer parser = getLexer(code, CSVFormat.DEFAULT.withSurroundingSpacesIgnored(true)); [EOL]     assertTokenEquals(TOKEN, "a", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "foo", parser.nextToken(new Token())); [EOL]     assertTokenEquals(EORECORD, "b", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "a", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, " foo", parser.nextToken(new Token())); [EOL]     assertTokenEquals(EORECORD, "b", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "a", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "foo ", parser.nextToken(new Token())); [EOL]     assertTokenEquals(EORECORD, "b", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "a", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, " foo ", parser.nextToken(new Token())); [EOL]     assertTokenEquals(EOF, "b", parser.nextToken(new Token())); [EOL] } <line_num>: 110,132
@Test [EOL] public void testNextToken5() throws IOException { [EOL]     String code = "a,\"foo\n\",b\n\"foo\n  baar ,,,\"\n\"\n\t \n\""; [EOL]     CSVLexer parser = getLexer(code, CSVFormat.DEFAULT); [EOL]     assertTokenEquals(TOKEN, "a", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "foo\n", parser.nextToken(new Token())); [EOL]     assertTokenEquals(EORECORD, "b", parser.nextToken(new Token())); [EOL]     assertTokenEquals(EORECORD, "foo\n  baar ,,,", parser.nextToken(new Token())); [EOL]     assertTokenEquals(EOF, "\n\t \n", parser.nextToken(new Token())); [EOL] } <line_num>: 135,145
@Test [EOL] public void testNextToken6() throws IOException { [EOL]     String code = "a;'b and '' more\n'\n!comment;;;;\n;;"; [EOL]     CSVFormat format = CSVFormat.DEFAULT.withDelimiter(';').withEncapsulator('\'').withCommentStart('!'); [EOL]     CSVLexer parser = getLexer(code, format); [EOL]     assertTokenEquals(TOKEN, "a", parser.nextToken(new Token())); [EOL]     assertTokenEquals(EORECORD, "b and ' more\n", parser.nextToken(new Token())); [EOL] } <line_num>: 148,160
@Test [EOL] public void testDelimiterIsWhitespace() throws IOException { [EOL]     String code = "one\ttwo\t\tfour \t five\t six"; [EOL]     CSVLexer parser = getLexer(code, CSVFormat.TDF); [EOL]     assertTokenEquals(TOKEN, "one", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "two", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "four", parser.nextToken(new Token())); [EOL]     assertTokenEquals(TOKEN, "five", parser.nextToken(new Token())); [EOL]     assertTokenEquals(EOF, "six", parser.nextToken(new Token())); [EOL] } <line_num>: 163,173
