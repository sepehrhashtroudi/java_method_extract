LineMapper(Appendable out) { [EOL]     this.out = out; [EOL] } <line_num>: 398,400
MappingTraversal() { [EOL] } <line_num>: 519,520
private void appendMappingTo(Mapping m, Appendable out) throws IOException { [EOL]     out.append("["); [EOL]     String sourceFile = m.sourceFile; [EOL]     String escapedSourceFile; [EOL]     if (lastSourceFile != sourceFile) { [EOL]         lastSourceFile = sourceFile; [EOL]         lastSourceFileEscaped = escapeString(sourceFile); [EOL]     } [EOL]     escapedSourceFile = lastSourceFileEscaped; [EOL]     out.append(escapedSourceFile); [EOL]     out.append(","); [EOL]     int line = m.originalPosition.getLine(); [EOL]     if (line != lastLine) { [EOL]         lastLineString = String.valueOf(line); [EOL]     } [EOL]     String lineValue = lastLineString; [EOL]     out.append(lineValue); [EOL]     out.append(","); [EOL]     out.append(String.valueOf(m.originalPosition.getColumn())); [EOL]     if (m.originalName != null) { [EOL]         out.append(","); [EOL]         out.append(escapeString(m.originalName)); [EOL]     } [EOL]     out.append("]\n"); [EOL] } <line_num>: 97,131
void appendMappings(Appendable out) throws IOException { [EOL]     for (Mapping m : mappings) { [EOL]         if (m.used) { [EOL]             appendMappingTo(m, out); [EOL]         } [EOL]     } [EOL] } <line_num>: 136,142
private static String escapeString(String value) { [EOL]     return Util.escapeString(value); [EOL] } <line_num>: 171,173
@Override [EOL] public void addMapping(String sourceName, @Nullable String symbolName, FilePosition sourceStartPosition, FilePosition startPosition, FilePosition endPosition) { [EOL]     if (sourceName == null || sourceStartPosition.getLine() < 0) { [EOL]         return; [EOL]     } [EOL]     Mapping mapping = new Mapping(); [EOL]     mapping.sourceFile = sourceName; [EOL]     mapping.originalPosition = sourceStartPosition; [EOL]     mapping.originalName = symbolName; [EOL]     if (offsetPosition.getLine() == 0 && offsetPosition.getColumn() == 0) { [EOL]         mapping.startPosition = startPosition; [EOL]         mapping.endPosition = endPosition; [EOL]     } else { [EOL]         int offsetLine = offsetPosition.getLine(); [EOL]         int startOffsetPosition = offsetPosition.getColumn(); [EOL]         int endOffsetPosition = offsetPosition.getColumn(); [EOL]         if (startPosition.getLine() > 0) { [EOL]             startOffsetPosition = 0; [EOL]         } [EOL]         if (endPosition.getLine() > 0) { [EOL]             endOffsetPosition = 0; [EOL]         } [EOL]         mapping.startPosition = new FilePosition(startPosition.getLine() + offsetLine, startPosition.getColumn() + startOffsetPosition); [EOL]         mapping.endPosition = new FilePosition(endPosition.getLine() + offsetLine, endPosition.getColumn() + endOffsetPosition); [EOL]     } [EOL]     if (lastMapping != null) { [EOL]         int lastLine = lastMapping.startPosition.getLine(); [EOL]         int lastColumn = lastMapping.startPosition.getColumn(); [EOL]         int nextLine = mapping.startPosition.getLine(); [EOL]         int nextColumn = mapping.startPosition.getColumn(); [EOL]         Preconditions.checkState(nextLine > lastLine || (nextLine == lastLine && nextColumn >= lastColumn), "Incorrect source mappings order, previous : (%s,%s)\n" + "new : (%s,%s)\nnode : %s", lastLine, lastColumn, nextLine, nextColumn); [EOL]     } [EOL]     lastMapping = mapping; [EOL]     mappings.add(mapping); [EOL] } <line_num>: 180,244
@Override [EOL] public void setWrapperPrefix(String prefix) { [EOL]     int prefixLine = 0; [EOL]     int prefixIndex = 0; [EOL]     for (int i = 0; i < prefix.length(); ++i) { [EOL]         if (prefix.charAt(i) == '\n') { [EOL]             prefixLine++; [EOL]             prefixIndex = 0; [EOL]         } else { [EOL]             prefixIndex++; [EOL]         } [EOL]     } [EOL]     prefixPosition = new FilePosition(prefixLine, prefixIndex); [EOL] } <line_num>: 253,269
@Override [EOL] public void setStartingPosition(int offsetLine, int offsetIndex) { [EOL]     Preconditions.checkState(offsetLine >= 0); [EOL]     Preconditions.checkState(offsetIndex >= 0); [EOL]     offsetPosition = new FilePosition(offsetLine, offsetIndex); [EOL] } <line_num>: 281,286
@Override [EOL] public void reset() { [EOL]     mappings = Lists.newArrayList(); [EOL]     lastMapping = null; [EOL]     offsetPosition = new FilePosition(0, 0); [EOL]     prefixPosition = new FilePosition(0, 0); [EOL] } <line_num>: 291,297
@Override [EOL] public void appendTo(Appendable out, String name) throws IOException { [EOL]     int maxLine = prepMappings(); [EOL]     out.append("/** Begin line maps. **/{ \"file\" : "); [EOL]     out.append(escapeString(name)); [EOL]     out.append(", \"count\": "); [EOL]     out.append(String.valueOf(maxLine + 1)); [EOL]     out.append(" }\n"); [EOL]     (new LineMapper(out)).appendLineMappings(); [EOL]     out.append("/** Begin file information. **/\n"); [EOL]     for (int i = 0; i <= maxLine; ++i) { [EOL]         out.append("[]\n"); [EOL]     } [EOL]     out.append("/** Begin mapping definitions. **/\n"); [EOL]     (new MappingWriter()).appendMappings(out); [EOL] } <line_num>: 306,362
private int prepMappings() throws IOException { [EOL]     (new MappingTraversal()).traverse(new UsedMappingCheck()); [EOL]     int id = 0; [EOL]     int maxLine = 0; [EOL]     for (Mapping m : mappings) { [EOL]         if (m.used) { [EOL]             m.id = id++; [EOL]             int endPositionLine = m.endPosition.getLine(); [EOL]             maxLine = Math.max(maxLine, endPositionLine); [EOL]         } [EOL]     } [EOL]     return maxLine + prefixPosition.getLine(); [EOL] } <line_num>: 367,384
@Override [EOL] public void visit(Mapping m, int line, int col, int nextLine, int nextCol) throws IOException { [EOL]     int id = (m != null) ? m.id : UNMAPPED; [EOL]     if (lastId != id) { [EOL]         lastIdString = (id == UNMAPPED) ? UNMAPPED_STRING : String.valueOf(id); [EOL]         lastId = id; [EOL]     } [EOL]     String idString = lastIdString; [EOL]     for (int i = line; i <= nextLine; i++) { [EOL]         if (i == nextLine) { [EOL]             for (int j = col; j < nextCol; j++) { [EOL]                 addCharEntry(idString); [EOL]             } [EOL]             break; [EOL]         } [EOL]         closeLine(); [EOL]         openLine(); [EOL]         col = 0; [EOL]     } [EOL] } <line_num>: 405,432
void appendLineMappings() throws IOException { [EOL]     openLine(); [EOL]     (new MappingTraversal()).traverse(this); [EOL]     closeLine(); [EOL] } <line_num>: 435,443
private void openLine() throws IOException { [EOL]     if (out != null) { [EOL]         out.append("["); [EOL]         this.firstChar = true; [EOL]     } [EOL] } <line_num>: 448,453
private void closeLine() throws IOException { [EOL]     if (out != null) { [EOL]         out.append("]\n"); [EOL]     } [EOL] } <line_num>: 458,462
private void addCharEntry(String id) throws IOException { [EOL]     if (out != null) { [EOL]         if (firstChar) { [EOL]             firstChar = false; [EOL]         } else { [EOL]             out.append(","); [EOL]         } [EOL]         out.append(id); [EOL]     } [EOL] } <line_num>: 468,477
@Override [EOL] public void visit(Mapping m, int line, int col, int nextLine, int nextCol) throws IOException { [EOL]     if (m != null) { [EOL]         m.used = true; [EOL]     } [EOL] } <line_num>: 487,493
void visit(Mapping m, int line, int col, int endLine, int endCol) throws IOException; <line_num>: 506,507
void traverse(MappingVisitor v) throws IOException { [EOL]     Deque<Mapping> stack = new ArrayDeque<Mapping>(); [EOL]     for (Mapping m : mappings) { [EOL]         while (!stack.isEmpty() && !isOverlapped(stack.peek(), m)) { [EOL]             Mapping previous = stack.pop(); [EOL]             maybeVisit(v, previous); [EOL]         } [EOL]         Mapping parent = stack.peek(); [EOL]         maybeVisitParent(v, parent, m); [EOL]         stack.push(m); [EOL]     } [EOL]     while (!stack.isEmpty()) { [EOL]         Mapping m = stack.pop(); [EOL]         maybeVisit(v, m); [EOL]     } [EOL] } <line_num>: 523,552
private int getAdjustedLine(FilePosition p) { [EOL]     return p.getLine() + prefixPosition.getLine(); [EOL] } <line_num>: 557,559
private int getAdjustedCol(FilePosition p) { [EOL]     int rawLine = p.getLine(); [EOL]     int rawCol = p.getColumn(); [EOL]     return (rawLine != 0) ? rawCol : rawCol + prefixPosition.getColumn(); [EOL] } <line_num>: 564,570
private boolean isOverlapped(Mapping m1, Mapping m2) { [EOL]     int l1 = m1.endPosition.getLine(); [EOL]     int l2 = m2.startPosition.getLine(); [EOL]     int c1 = m1.endPosition.getColumn(); [EOL]     int c2 = m2.startPosition.getColumn(); [EOL]     return (l1 == l2 && c1 >= c2) || l1 > l2; [EOL] } <line_num>: 575,583
private void maybeVisit(MappingVisitor v, Mapping m) throws IOException { [EOL]     int nextLine = getAdjustedLine(m.endPosition); [EOL]     int nextCol = getAdjustedCol(m.endPosition); [EOL]     if (line < nextLine || (line == nextLine && col < nextCol)) { [EOL]         visit(v, m, nextLine, nextCol); [EOL]     } [EOL] } <line_num>: 589,597
private void maybeVisitParent(MappingVisitor v, Mapping parent, Mapping m) throws IOException { [EOL]     int nextLine = getAdjustedLine(m.startPosition); [EOL]     int nextCol = getAdjustedCol(m.startPosition); [EOL]     Preconditions.checkState(line < nextLine || col <= nextCol); [EOL]     if (line < nextLine || (line == nextLine && col < nextCol)) { [EOL]         visit(v, parent, nextLine, nextCol); [EOL]     } [EOL] } <line_num>: 602,611
private void visit(MappingVisitor v, Mapping m, int nextLine, int nextCol) throws IOException { [EOL]     Preconditions.checkState(line <= nextLine); [EOL]     Preconditions.checkState(line < nextLine || col < nextCol); [EOL]     if (line == nextLine && col == nextCol) { [EOL]         Preconditions.checkState(false); [EOL]         return; [EOL]     } [EOL]     v.visit(m, line, col, nextLine, nextCol); [EOL]     line = nextLine; [EOL]     col = nextCol; [EOL] } <line_num>: 617,633
@Override [EOL] public void validate(boolean validate) { [EOL] } <line_num>: 636,639
@Override [EOL] public void appendIndexMapTo(Appendable out, String name, List<SourceMapSection> appSections) { [EOL]     throw new UnsupportedOperationException(); [EOL] } <line_num>: 641,645
