LineMapper(Appendable out) { [EOL]     this.out = out; [EOL] } <line_num>: 542,544
MappingTraversal() { [EOL] } <line_num>: 766,767
@Override [EOL] public void reset() { [EOL]     mappings.clear(); [EOL]     lastMapping = null; [EOL]     sourceFileMap.clear(); [EOL]     originalNameMap.clear(); [EOL]     lastSourceFile = null; [EOL]     lastSourceFileIndex = -1; [EOL]     offsetPosition = new FilePosition(0, 0); [EOL]     prefixPosition = new FilePosition(0, 0); [EOL] } <line_num>: 93,103
@Override [EOL] @VisibleForTesting [EOL] public void validate(boolean validate) { [EOL]     this.validate = validate; [EOL] } <line_num>: 109,113
@Override [EOL] public void setWrapperPrefix(String prefix) { [EOL]     int prefixLine = 0; [EOL]     int prefixIndex = 0; [EOL]     for (int i = 0; i < prefix.length(); ++i) { [EOL]         if (prefix.charAt(i) == '\n') { [EOL]             prefixLine++; [EOL]             prefixIndex = 0; [EOL]         } else { [EOL]             prefixIndex++; [EOL]         } [EOL]     } [EOL]     prefixPosition = new FilePosition(prefixLine, prefixIndex); [EOL] } <line_num>: 122,138
@Override [EOL] public void setStartingPosition(int offsetLine, int offsetIndex) { [EOL]     Preconditions.checkState(offsetLine >= 0); [EOL]     Preconditions.checkState(offsetIndex >= 0); [EOL]     offsetPosition = new FilePosition(offsetLine, offsetIndex); [EOL] } <line_num>: 150,155
@Override [EOL] public void addMapping(String sourceName, @Nullable String symbolName, FilePosition sourceStartPosition, FilePosition startPosition, FilePosition endPosition) { [EOL]     if (sourceName == null || sourceStartPosition.getLine() < 0) { [EOL]         return; [EOL]     } [EOL]     FilePosition adjustedStart = startPosition; [EOL]     FilePosition adjustedEnd = endPosition; [EOL]     if (offsetPosition.getLine() != 0 || offsetPosition.getColumn() != 0) { [EOL]         int offsetLine = offsetPosition.getLine(); [EOL]         int startOffsetPosition = offsetPosition.getColumn(); [EOL]         int endOffsetPosition = offsetPosition.getColumn(); [EOL]         if (startPosition.getLine() > 0) { [EOL]             startOffsetPosition = 0; [EOL]         } [EOL]         if (endPosition.getLine() > 0) { [EOL]             endOffsetPosition = 0; [EOL]         } [EOL]         adjustedStart = new FilePosition(startPosition.getLine() + offsetLine, startPosition.getColumn() + startOffsetPosition); [EOL]         adjustedEnd = new FilePosition(endPosition.getLine() + offsetLine, endPosition.getColumn() + endOffsetPosition); [EOL]     } [EOL]     Mapping mapping = new Mapping(); [EOL]     mapping.sourceFile = getSourceId(sourceName); [EOL]     mapping.originalPosition = sourceStartPosition; [EOL]     mapping.originalName = symbolName; [EOL]     mapping.startPosition = adjustedStart; [EOL]     mapping.endPosition = adjustedEnd; [EOL]     if (lastMapping != null) { [EOL]         int lastLine = lastMapping.startPosition.getLine(); [EOL]         int lastColumn = lastMapping.startPosition.getColumn(); [EOL]         int nextLine = mapping.startPosition.getLine(); [EOL]         int nextColumn = mapping.startPosition.getColumn(); [EOL]         Preconditions.checkState(nextLine > lastLine || (nextLine == lastLine && nextColumn >= lastColumn), "Incorrect source mappings order, previous : (%s,%s)\n" + "new : (%s,%s)\nnode : %s", lastLine, lastColumn, nextLine, nextColumn); [EOL]     } [EOL]     lastMapping = mapping; [EOL]     mappings.add(mapping); [EOL] } <line_num>: 162,226
@Override [EOL] public void appendTo(Appendable out, String name) throws IOException { [EOL]     int maxLine = prepMappings(); [EOL]     out.append("{\n"); [EOL]     appendFirstField(out, "version", "2"); [EOL]     appendField(out, "file", escapeString(name)); [EOL]     appendField(out, "lineCount", String.valueOf(maxLine + 1)); [EOL]     appendFieldStart(out, "lineMaps"); [EOL]     out.append("["); [EOL]     (new LineMapper(out)).appendLineMappings(); [EOL]     out.append("]"); [EOL]     appendFieldEnd(out); [EOL]     appendFieldStart(out, "mappings"); [EOL]     out.append("["); [EOL]     (new MappingWriter()).appendMappings(out); [EOL]     out.append("]"); [EOL]     appendFieldEnd(out); [EOL]     appendFieldStart(out, "sources"); [EOL]     out.append("["); [EOL]     addSourceNameMap(out); [EOL]     out.append("]"); [EOL]     appendFieldEnd(out); [EOL]     appendFieldStart(out, "names"); [EOL]     out.append("["); [EOL]     addOriginalNameMap(out); [EOL]     out.append("]"); [EOL]     appendFieldEnd(out); [EOL]     out.append("\n}\n"); [EOL] } <line_num>: 272,311
private void addSourceNameMap(Appendable out) throws IOException { [EOL]     addMap(out, sourceFileMap); [EOL] } <line_num>: 316,318
private void addOriginalNameMap(Appendable out) throws IOException { [EOL]     addMap(out, originalNameMap); [EOL] } <line_num>: 323,325
private void addMap(Appendable out, Map<String, Integer> map) throws IOException { [EOL]     int i = 0; [EOL]     for (Entry<String, Integer> entry : map.entrySet()) { [EOL]         String key = entry.getKey(); [EOL]         if (i != 0) { [EOL]             out.append(","); [EOL]         } [EOL]         out.append(escapeString(key)); [EOL]         i++; [EOL]     } [EOL] } <line_num>: 330,341
private static String escapeString(String value) { [EOL]     return Util.escapeString(value); [EOL] } <line_num>: 346,348
private static void appendFirstField(Appendable out, String name, CharSequence value) throws IOException { [EOL]     out.append("\""); [EOL]     out.append(name); [EOL]     out.append("\""); [EOL]     out.append(":"); [EOL]     out.append(value); [EOL] } <line_num>: 352,360
private static void appendField(Appendable out, String name, CharSequence value) throws IOException { [EOL]     out.append(",\n"); [EOL]     out.append("\""); [EOL]     out.append(name); [EOL]     out.append("\""); [EOL]     out.append(":"); [EOL]     out.append(value); [EOL] } <line_num>: 362,371
private static void appendFieldStart(Appendable out, String name) throws IOException { [EOL]     appendField(out, name, ""); [EOL] } <line_num>: 373,376
@SuppressWarnings("unused") [EOL] private static void appendFieldEnd(Appendable out) throws IOException { [EOL] } <line_num>: 378,381
private int prepMappings() throws IOException { [EOL]     (new MappingTraversal()).traverse(new UsedMappingCheck()); [EOL]     int id = 0; [EOL]     int maxLine = 0; [EOL]     for (Mapping m : mappings) { [EOL]         if (m.used) { [EOL]             m.id = id++; [EOL]             int endPositionLine = m.endPosition.getLine(); [EOL]             maxLine = Math.max(maxLine, endPositionLine); [EOL]         } [EOL]     } [EOL]     return maxLine + prefixPosition.getLine(); [EOL] } <line_num>: 386,403
private int getSourceId(String sourceName) { [EOL]     if (sourceName != lastSourceFile) { [EOL]         lastSourceFile = sourceName; [EOL]         Integer index = sourceFileMap.get(sourceName); [EOL]         if (index != null) { [EOL]             lastSourceFileIndex = index; [EOL]         } else { [EOL]             lastSourceFileIndex = sourceFileMap.size(); [EOL]             sourceFileMap.put(sourceName, lastSourceFileIndex); [EOL]         } [EOL]     } [EOL]     return lastSourceFileIndex; [EOL] } <line_num>: 410,422
private int getNameId(String symbolName) { [EOL]     int originalNameIndex; [EOL]     Integer index = originalNameMap.get(symbolName); [EOL]     if (index != null) { [EOL]         originalNameIndex = index; [EOL]     } else { [EOL]         originalNameIndex = originalNameMap.size(); [EOL]         originalNameMap.put(symbolName, originalNameIndex); [EOL]     } [EOL]     return originalNameIndex; [EOL] } <line_num>: 429,439
private void appendMappingTo(Mapping m, Appendable out) throws IOException { [EOL]     out.append("["); [EOL]     out.append(String.valueOf(m.sourceFile)); [EOL]     out.append(","); [EOL]     int line = m.originalPosition.getLine(); [EOL]     if (line != lastLine) { [EOL]         lastLineString = String.valueOf(line); [EOL]     } [EOL]     String lineValue = lastLineString; [EOL]     out.append(lineValue); [EOL]     out.append(","); [EOL]     out.append(String.valueOf(m.originalPosition.getColumn())); [EOL]     if (m.originalName != null) { [EOL]         out.append(","); [EOL]         out.append(String.valueOf(getNameId(m.originalName))); [EOL]     } [EOL]     out.append("],\n"); [EOL] } <line_num>: 497,521
void appendMappings(Appendable out) throws IOException { [EOL]     for (Mapping m : mappings) { [EOL]         if (m.used) { [EOL]             appendMappingTo(m, out); [EOL]         } [EOL]     } [EOL] } <line_num>: 526,532
@Override [EOL] public void visit(Mapping m, int line, int col, int nextLine, int nextCol) throws IOException { [EOL]     int id = (m != null) ? m.id : UNMAPPED; [EOL]     for (int i = line; i <= nextLine; i++) { [EOL]         if (i == nextLine) { [EOL]             closeEntry(id, nextCol - col); [EOL]             break; [EOL]         } [EOL]         closeLine(false); [EOL]         openLine(); [EOL]         col = 0; [EOL]     } [EOL] } <line_num>: 549,567
void appendLineMappings() throws IOException { [EOL]     openLine(); [EOL]     (new MappingTraversal()).traverse(this); [EOL]     closeLine(true); [EOL] } <line_num>: 570,578
private void openLine() throws IOException { [EOL]     out.append("\""); [EOL]     this.lastId = 0; [EOL] } <line_num>: 583,587
private void closeLine(boolean finalEntry) throws IOException { [EOL]     if (finalEntry) { [EOL]         out.append("\""); [EOL]     } else { [EOL]         out.append("\",\n"); [EOL]     } [EOL] } <line_num>: 592,598
private void closeEntry(int id, int reps) throws IOException { [EOL]     if (reps == 0) { [EOL]         return; [EOL]     } [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     LineMapEncoder.encodeEntry(sb, id, lastId, reps); [EOL]     if (validate) { [EOL]         SourceMapLineDecoder.LineEntry entry = SourceMapLineDecoder.decodeLineEntry(sb.toString(), lastId); [EOL]         Preconditions.checkState(entry.id == id && entry.reps == reps, "expected (%s,%s) but got (%s,%s)", id, reps, entry.id, entry.reps); [EOL]     } [EOL]     out.append(sb); [EOL]     lastId = id; [EOL] } <line_num>: 600,618
public static void encodeEntry(Appendable out, int id, int lastId, int reps) throws IOException { [EOL]     Preconditions.checkState(reps > 0); [EOL]     int relativeIdLength = getRelativeMappingIdLength(id, lastId); [EOL]     int relativeId = getRelativeMappingId(id, relativeIdLength, lastId); [EOL]     String relativeIdString = valueToBase64(relativeId, relativeIdLength); [EOL]     if (reps > 16 || relativeIdLength > 4) { [EOL]         String repsString = valueToBase64(reps - 1, 1); [EOL]         for (int i = 0; i < repsString.length(); i++) { [EOL]             out.append('!'); [EOL]         } [EOL]         String sizeId = valueToBase64(relativeIdString.length() - 1, 1); [EOL]         out.append(sizeId); [EOL]         out.append(repsString); [EOL]     } else { [EOL]         int prefix = ((reps - 1) << 2) + (relativeIdString.length() - 1); [EOL]         Preconditions.checkState(prefix < 64 && prefix >= 0, "prefix (%s) reps(%s) map id size(%s)", prefix, reps, relativeIdString.length()); [EOL]         out.append(valueToBase64(prefix, 1)); [EOL]     } [EOL]     out.append(relativeIdString); [EOL] } <line_num>: 634,671
public static int getRelativeMappingId(int id, int idLength, int lastId) { [EOL]     int base = 1 << (idLength * 6); [EOL]     int relativeId = id - lastId; [EOL]     return (relativeId < 0) ? relativeId + base : relativeId; [EOL] } <line_num>: 679,683
public static int getRelativeMappingIdLength(int rawId, int lastId) { [EOL]     Preconditions.checkState(rawId >= 0 || rawId == UNMAPPED); [EOL]     int relativeId = rawId - lastId; [EOL]     int id = (relativeId < 0 ? Math.abs(relativeId) - 1 : relativeId) << 1; [EOL]     int digits = 1; [EOL]     int base = 64; [EOL]     while (id >= base) { [EOL]         digits++; [EOL]         base *= 64; [EOL]     } [EOL]     return digits; [EOL] } <line_num>: 688,699
static String valueToBase64(int value, int minimumSize) { [EOL]     int size = 0; [EOL]     char[] chars = new char[4]; [EOL]     do { [EOL]         int charValue = value & 63; [EOL]         value = value >>> 6; [EOL]         chars[size++] = Base64.toBase64(charValue); [EOL]     } while (value > 0); [EOL]     StringBuilder sb = new StringBuilder(size); [EOL]     while (minimumSize > size) { [EOL]         sb.append(Base64.toBase64(0)); [EOL]         minimumSize--; [EOL]     } [EOL]     while (size > 0) { [EOL]         sb.append(chars[--size]); [EOL]     } [EOL]     return sb.toString(); [EOL] } <line_num>: 705,724
@Override [EOL] public void visit(Mapping m, int line, int col, int nextLine, int nextCol) throws IOException { [EOL]     if (m != null) { [EOL]         m.used = true; [EOL]     } [EOL] } <line_num>: 734,740
void visit(Mapping m, int line, int col, int endLine, int endCol) throws IOException; <line_num>: 753,754
void traverse(MappingVisitor v) throws IOException { [EOL]     Deque<Mapping> stack = new ArrayDeque<Mapping>(); [EOL]     for (Mapping m : mappings) { [EOL]         while (!stack.isEmpty() && !isOverlapped(stack.peek(), m)) { [EOL]             Mapping previous = stack.pop(); [EOL]             maybeVisit(v, previous); [EOL]         } [EOL]         Mapping parent = stack.peek(); [EOL]         maybeVisitParent(v, parent, m); [EOL]         stack.push(m); [EOL]     } [EOL]     while (!stack.isEmpty()) { [EOL]         Mapping m = stack.pop(); [EOL]         maybeVisit(v, m); [EOL]     } [EOL] } <line_num>: 770,799
private int getAdjustedLine(FilePosition p) { [EOL]     return p.getLine() + prefixPosition.getLine(); [EOL] } <line_num>: 804,806
private int getAdjustedCol(FilePosition p) { [EOL]     int rawLine = p.getLine(); [EOL]     int rawCol = p.getColumn(); [EOL]     return (rawLine != 0) ? rawCol : rawCol + prefixPosition.getColumn(); [EOL] } <line_num>: 811,817
private boolean isOverlapped(Mapping m1, Mapping m2) { [EOL]     int l1 = m1.endPosition.getLine(); [EOL]     int l2 = m2.startPosition.getLine(); [EOL]     int c1 = m1.endPosition.getColumn(); [EOL]     int c2 = m2.startPosition.getColumn(); [EOL]     return (l1 == l2 && c1 >= c2) || l1 > l2; [EOL] } <line_num>: 822,830
private void maybeVisit(MappingVisitor v, Mapping m) throws IOException { [EOL]     int nextLine = getAdjustedLine(m.endPosition); [EOL]     int nextCol = getAdjustedCol(m.endPosition); [EOL]     if (line < nextLine || (line == nextLine && col < nextCol)) { [EOL]         visit(v, m, nextLine, nextCol); [EOL]     } [EOL] } <line_num>: 836,844
private void maybeVisitParent(MappingVisitor v, Mapping parent, Mapping m) throws IOException { [EOL]     int nextLine = getAdjustedLine(m.startPosition); [EOL]     int nextCol = getAdjustedCol(m.startPosition); [EOL]     Preconditions.checkState(line < nextLine || col <= nextCol); [EOL]     if (line < nextLine || (line == nextLine && col < nextCol)) { [EOL]         visit(v, parent, nextLine, nextCol); [EOL]     } [EOL] } <line_num>: 849,858
private void visit(MappingVisitor v, Mapping m, int nextLine, int nextCol) throws IOException { [EOL]     Preconditions.checkState(line <= nextLine); [EOL]     Preconditions.checkState(line < nextLine || col < nextCol); [EOL]     if (line == nextLine && col == nextCol) { [EOL]         Preconditions.checkState(false); [EOL]         return; [EOL]     } [EOL]     v.visit(m, line, col, nextLine, nextCol); [EOL]     line = nextLine; [EOL]     col = nextCol; [EOL] } <line_num>: 864,880
@Override [EOL] public void appendIndexMapTo(Appendable out, String name, List<SourceMapSection> appSections) { [EOL]     throw new UnsupportedOperationException(); [EOL] } <line_num>: 883,887
