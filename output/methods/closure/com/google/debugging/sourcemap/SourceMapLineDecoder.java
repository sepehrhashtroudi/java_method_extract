private SourceMapLineDecoder() { [EOL] } <line_num>: 38,38
public LineEntry(int id, int reps) { [EOL]     this.id = id; [EOL]     this.reps = reps; [EOL] } <line_num>: 127,130
StringParser(String content) { [EOL]     this.content = content; [EOL] } <line_num>: 141,143
static List<Integer> decodeLine(String lineSource) { [EOL]     return decodeLine(new StringParser(lineSource)); [EOL] } <line_num>: 34,36
static LineEntry decodeLineEntry(String in, int lastId) { [EOL]     return decodeLineEntry(new StringParser(in), lastId); [EOL] } <line_num>: 40,42
private static LineEntry decodeLineEntry(StringParser reader, int lastId) { [EOL]     int repDigits = 0; [EOL]     for (char peek = reader.peek(); peek == '!'; peek = reader.peek()) { [EOL]         repDigits++; [EOL]         reader.next(); [EOL]     } [EOL]     int idDigits = 0; [EOL]     int reps = 0; [EOL]     if (repDigits == 0) { [EOL]         char digit = reader.next(); [EOL]         int value = addBase64Digit(digit, 0); [EOL]         reps = (value >> 2); [EOL]         idDigits = (value & 3); [EOL]     } else { [EOL]         char digit = reader.next(); [EOL]         idDigits = addBase64Digit(digit, 0); [EOL]         int value = 0; [EOL]         for (int i = 0; i < repDigits; i++) { [EOL]             digit = reader.next(); [EOL]             value = addBase64Digit(digit, value); [EOL]         } [EOL]         reps = value; [EOL]     } [EOL]     reps += 1; [EOL]     idDigits += 1; [EOL]     int value = 0; [EOL]     for (int i = 0; i < idDigits; i++) { [EOL]         char digit = reader.next(); [EOL]         value = addBase64Digit(digit, value); [EOL]     } [EOL]     int mappingId = getIdFromRelativeId(value, idDigits, lastId); [EOL]     return new LineEntry(mappingId, reps); [EOL] } <line_num>: 44,88
private static List<Integer> decodeLine(StringParser reader) { [EOL]     List<Integer> result = Lists.newArrayListWithCapacity(512); [EOL]     int lastId = 0; [EOL]     while (reader.hasNext()) { [EOL]         LineEntry entry = decodeLineEntry(reader, lastId); [EOL]         lastId = entry.id; [EOL]         for (int i = 0; i < entry.reps; i++) { [EOL]             result.add(entry.id); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 90,103
private static int addBase64Digit(char digit, int previousValue) { [EOL]     return (previousValue * 64) + Base64.fromBase64(digit); [EOL] } <line_num>: 108,110
static int getIdFromRelativeId(int rawId, int digits, int lastId) { [EOL]     int base = 1 << (digits * 6); [EOL]     return ((rawId >= base / 2) ? rawId - base : rawId) + lastId; [EOL] } <line_num>: 115,119
char next() { [EOL]     return content.charAt(current++); [EOL] } <line_num>: 145,147
char peek() { [EOL]     return content.charAt(current); [EOL] } <line_num>: 149,151
boolean hasNext() { [EOL]     return current < content.length() - 1; [EOL] } <line_num>: 153,155
