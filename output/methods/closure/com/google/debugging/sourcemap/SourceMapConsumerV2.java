public SourceMapConsumerV2() { [EOL] } <line_num>: 54,54
@Override [EOL] public void parse(String contents) throws SourceMapParseException { [EOL]     try { [EOL]         JSONObject sourceMapRoot = new JSONObject(contents); [EOL]         parse(sourceMapRoot); [EOL]     } catch (JSONException ex) { [EOL]         throw new SourceMapParseException("JSON parse exception: " + ex); [EOL]     } [EOL] } <line_num>: 59,67
public void parse(JSONObject sourceMapRoot) throws SourceMapParseException { [EOL]     try { [EOL]         parseInternal(sourceMapRoot); [EOL]     } catch (JSONException ex) { [EOL]         throw new SourceMapParseException("JSON parse exception: " + ex); [EOL]     } [EOL] } <line_num>: 72,78
private void parseInternal(JSONObject sourceMapRoot) throws JSONException, SourceMapParseException { [EOL]     int version = sourceMapRoot.getInt("version"); [EOL]     if (version != 2) { [EOL]         throw new SourceMapParseException("Unknown version: " + version); [EOL]     } [EOL]     String file = sourceMapRoot.getString("file"); [EOL]     if (file.isEmpty()) { [EOL]         throw new SourceMapParseException("File entry is missing or empty"); [EOL]     } [EOL]     int lineCount = sourceMapRoot.getInt("lineCount"); [EOL]     lineMaps = sourceMapRoot.getJSONArray("lineMaps"); [EOL]     if (lineCount != lineMaps.length()) { [EOL]         throw new SourceMapParseException("lineMaps length does not match lineCount"); [EOL]     } [EOL]     characterMap = Maps.newHashMap(); [EOL]     JSONArray sources = sourceMapRoot.getJSONArray("sources"); [EOL]     JSONArray names = sourceMapRoot.has("names") ? sourceMapRoot.getJSONArray("names") : null; [EOL]     JSONArray jsonMappings = sourceMapRoot.getJSONArray("mappings"); [EOL]     mappings = Lists.newArrayListWithCapacity(lineCount); [EOL]     for (int i = 0; i < jsonMappings.length(); i++) { [EOL]         JSONArray entry = jsonMappings.getJSONArray(i); [EOL]         String name = entry.optString(3, ""); [EOL]         if (names != null) { [EOL]             try { [EOL]                 int nameIndex = entry.getInt(3); [EOL]                 name = names.getString(nameIndex); [EOL]             } catch (JSONException e) { [EOL]             } [EOL]         } [EOL]         String sourceFile = sources.getString(entry.getInt(0)); [EOL]         int lineNumber = entry.getInt(1); [EOL]         int column = entry.getInt(2); [EOL]         OriginalMapping.Builder builder = OriginalMapping.newBuilder().setOriginalFile(sourceFile).setLineNumber(lineNumber).setColumnPosition(column).setIdentifier(name); [EOL]         mappings.add(builder.build()); [EOL]     } [EOL] } <line_num>: 83,142
@Override [EOL] public OriginalMapping getMappingForLine(int lineNumber, int columnIndex) { [EOL]     lineNumber--; [EOL]     columnIndex--; [EOL]     if (lineNumber >= lineMaps.length()) { [EOL]         return null; [EOL]     } [EOL]     Preconditions.checkState(lineNumber >= 0, "Line number must be >= 0"); [EOL]     Preconditions.checkState(columnIndex >= 0, "Column index must be >= 0"); [EOL]     if (!characterMap.containsKey(lineNumber)) { [EOL]         try { [EOL]             characterMap.put(lineNumber, SourceMapLineDecoder.decodeLine(lineMaps.getString(lineNumber))); [EOL]         } catch (JSONException jse) { [EOL]             throw new IllegalStateException("JSON exception when retrieving line map", jse); [EOL]         } [EOL]     } [EOL]     List<Integer> map = characterMap.get(lineNumber); [EOL]     if (map == null || map.size() <= columnIndex) { [EOL]         return null; [EOL]     } [EOL]     int index = map.get(columnIndex); [EOL]     if (index == -1) { [EOL]         return null; [EOL]     } [EOL]     Preconditions.checkState(index < mappings.size(), "Invalid mapping reference"); [EOL]     return mappings.get(index); [EOL] } <line_num>: 144,180
