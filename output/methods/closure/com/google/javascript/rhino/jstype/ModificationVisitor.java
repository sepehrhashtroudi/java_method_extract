public ModificationVisitor(JSTypeRegistry registry) { [EOL]     this.registry = registry; [EOL] } <line_num>: 58,60
@Override [EOL] public JSType caseNoType() { [EOL]     return getNativeType(JSTypeNative.NO_TYPE); [EOL] } <line_num>: 62,65
@Override [EOL] public JSType caseEnumElementType(EnumElementType type) { [EOL]     return type; [EOL] } <line_num>: 67,70
@Override [EOL] public JSType caseAllType() { [EOL]     return getNativeType(JSTypeNative.ALL_TYPE); [EOL] } <line_num>: 72,75
@Override [EOL] public JSType caseBooleanType() { [EOL]     return getNativeType(JSTypeNative.BOOLEAN_TYPE); [EOL] } <line_num>: 77,80
@Override [EOL] public JSType caseNoObjectType() { [EOL]     return getNativeType(JSTypeNative.NO_OBJECT_TYPE); [EOL] } <line_num>: 82,85
@Override [EOL] public JSType caseFunctionType(FunctionType type) { [EOL]     if (isNativeFunctionType(type)) { [EOL]         return type; [EOL]     } [EOL]     if (!type.isOrdinaryFunction()) { [EOL]         return type; [EOL]     } [EOL]     boolean changed = false; [EOL]     JSType beforeThis = type.getTypeOfThis(); [EOL]     JSType afterThis = coerseToThisType(beforeThis.visit(this)); [EOL]     if (beforeThis != afterThis) { [EOL]         changed = true; [EOL]     } [EOL]     JSType beforeReturn = type.getReturnType(); [EOL]     JSType afterReturn = beforeReturn.visit(this); [EOL]     if (beforeReturn != afterReturn) { [EOL]         changed = true; [EOL]     } [EOL]     FunctionParamBuilder paramBuilder = new FunctionParamBuilder(registry); [EOL]     for (Node paramNode : type.getParameters()) { [EOL]         JSType beforeParamType = paramNode.getJSType(); [EOL]         JSType afterParamType = beforeParamType.visit(this); [EOL]         if (beforeParamType != afterParamType) { [EOL]             changed = true; [EOL]         } [EOL]         if (paramNode.isOptionalArg()) { [EOL]             paramBuilder.addOptionalParams(afterParamType); [EOL]         } else if (paramNode.isVarArgs()) { [EOL]             paramBuilder.addVarArgs(afterParamType); [EOL]         } else { [EOL]             paramBuilder.addRequiredParams(afterParamType); [EOL]         } [EOL]     } [EOL]     if (changed) { [EOL]         FunctionBuilder builder = new FunctionBuilder(registry); [EOL]         builder.withParams(paramBuilder); [EOL]         builder.withReturnType(afterReturn); [EOL]         builder.withTypeOfThis(afterThis); [EOL]         return builder.build(); [EOL]     } [EOL]     return type; [EOL] } <line_num>: 87,138
private JSType coerseToThisType(JSType type) { [EOL]     return type != null ? type : registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE); [EOL] } <line_num>: 140,143
@Override [EOL] public JSType caseObjectType(ObjectType objType) { [EOL]     if (objType.isTemplatized()) { [EOL]         ImmutableList.Builder<JSType> builder = ImmutableList.builder(); [EOL]         for (JSType templatizedType : objType.getTemplatizedTypes()) { [EOL]             builder.add(templatizedType.visit(this)); [EOL]         } [EOL]         return registry.createTemplatizedType(objType, builder.build()); [EOL]     } else { [EOL]         return objType; [EOL]     } [EOL] } <line_num>: 145,156
@Override [EOL] public JSType caseParameterizedType(ParameterizedType type) { [EOL]     ObjectType genericType = ObjectType.cast(type.getReferencedTypeInternal().visit(this)); [EOL]     JSType paramType = type.getParameterType().visit(this); [EOL]     if (type.getReferencedTypeInternal() != genericType || type.getParameterType() != paramType) { [EOL]         type = registry.createParameterizedType(genericType, paramType); [EOL]     } [EOL]     return type; [EOL] } <line_num>: 158,168
@Override [EOL] public JSType caseUnknownType() { [EOL]     return getNativeType(JSTypeNative.UNKNOWN_TYPE); [EOL] } <line_num>: 170,173
@Override [EOL] public JSType caseNullType() { [EOL]     return getNativeType(JSTypeNative.NULL_TYPE); [EOL] } <line_num>: 175,178
@Override [EOL] public JSType caseNumberType() { [EOL]     return getNativeType(JSTypeNative.NUMBER_TYPE); [EOL] } <line_num>: 180,183
@Override [EOL] public JSType caseStringType() { [EOL]     return getNativeType(JSTypeNative.STRING_TYPE); [EOL] } <line_num>: 185,188
@Override [EOL] public JSType caseVoidType() { [EOL]     return getNativeType(JSTypeNative.VOID_TYPE); [EOL] } <line_num>: 190,193
@Override [EOL] public JSType caseUnionType(UnionType type) { [EOL]     boolean changed = false; [EOL]     List<JSType> results = Lists.newArrayList(); [EOL]     for (JSType alternative : type.getAlternates()) { [EOL]         JSType replacement = alternative.visit(this); [EOL]         if (replacement != alternative) { [EOL]             changed = true; [EOL]         } [EOL]         results.add(replacement); [EOL]     } [EOL]     if (changed) { [EOL]         UnionTypeBuilder builder = new UnionTypeBuilder(registry); [EOL]         for (JSType alternate : results) { [EOL]             builder.addAlternate(alternate); [EOL]         } [EOL]         return builder.build(); [EOL]     } [EOL]     return type; [EOL] } <line_num>: 195,216
@Override [EOL] public JSType caseTemplateType(TemplateType type) { [EOL]     return type; [EOL] } <line_num>: 218,221
private JSType getNativeType(JSTypeNative nativeType) { [EOL]     return registry.getNativeType(nativeType); [EOL] } <line_num>: 223,225
private boolean isNativeFunctionType(FunctionType type) { [EOL]     return type.isNativeObjectType(); [EOL] } <line_num>: 227,229
