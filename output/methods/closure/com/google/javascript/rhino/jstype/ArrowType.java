ArrowType(JSTypeRegistry registry, Node parameters, JSType returnType) { [EOL]     this(registry, parameters, returnType, false); [EOL] } <line_num>: 62,65
ArrowType(JSTypeRegistry registry, Node parameters, JSType returnType, boolean returnTypeInferred) { [EOL]     super(registry); [EOL]     this.parameters = parameters == null ? registry.createParametersWithVarArgs(getNativeType(UNKNOWN_TYPE)) : parameters; [EOL]     this.returnType = returnType == null ? getNativeType(UNKNOWN_TYPE) : returnType; [EOL]     this.returnTypeInferred = returnTypeInferred; [EOL] } <line_num>: 67,77
@Override [EOL] public boolean isSubtype(JSType other) { [EOL]     if (!(other instanceof ArrowType)) { [EOL]         return false; [EOL]     } [EOL]     ArrowType that = (ArrowType) other; [EOL]     if (!this.returnType.isSubtype(that.returnType)) { [EOL]         return false; [EOL]     } [EOL]     Node thisParam = parameters.getFirstChild(); [EOL]     Node thatParam = that.parameters.getFirstChild(); [EOL]     while (thisParam != null && thatParam != null) { [EOL]         JSType thisParamType = thisParam.getJSType(); [EOL]         JSType thatParamType = thatParam.getJSType(); [EOL]         if (thisParamType != null) { [EOL]             if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) { [EOL]                 return false; [EOL]             } [EOL]         } [EOL]         boolean thisIsVarArgs = thisParam.isVarArgs(); [EOL]         boolean thatIsVarArgs = thatParam.isVarArgs(); [EOL]         boolean thisIsOptional = thisIsVarArgs || thisParam.isOptionalArg(); [EOL]         boolean thatIsOptional = thatIsVarArgs || thatParam.isOptionalArg(); [EOL]         if (!thisIsOptional && thatIsOptional) { [EOL]             boolean isTopFunction = thatIsVarArgs && (thatParamType == null || thatParamType.isUnknownType() || thatParamType.isNoType()); [EOL]             if (!isTopFunction) { [EOL]                 return false; [EOL]             } [EOL]         } [EOL]         if (!thisIsVarArgs) { [EOL]             thisParam = thisParam.getNext(); [EOL]         } [EOL]         if (!thatIsVarArgs) { [EOL]             thatParam = thatParam.getNext(); [EOL]         } [EOL]         if (thisIsVarArgs && thatIsVarArgs) { [EOL]             thisParam = null; [EOL]             thatParam = null; [EOL]         } [EOL]     } [EOL]     if (thisParam != null && !thisParam.isOptionalArg() && !thisParam.isVarArgs() && thatParam == null) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 79,171
boolean hasEqualParameters(ArrowType that, EquivalenceMethod eqMethod) { [EOL]     Node thisParam = parameters.getFirstChild(); [EOL]     Node otherParam = that.parameters.getFirstChild(); [EOL]     while (thisParam != null && otherParam != null) { [EOL]         JSType thisParamType = thisParam.getJSType(); [EOL]         JSType otherParamType = otherParam.getJSType(); [EOL]         if (thisParamType != null) { [EOL]             if (otherParamType != null && !thisParamType.checkEquivalenceHelper(otherParamType, eqMethod)) { [EOL]                 return false; [EOL]             } [EOL]         } else { [EOL]             if (otherParamType != null) { [EOL]                 return false; [EOL]             } [EOL]         } [EOL]         if (thisParam.isOptionalArg() != otherParam.isOptionalArg()) { [EOL]             return false; [EOL]         } [EOL]         if (thisParam.isVarArgs() != otherParam.isVarArgs()) { [EOL]             return false; [EOL]         } [EOL]         thisParam = thisParam.getNext(); [EOL]         otherParam = otherParam.getNext(); [EOL]     } [EOL]     return thisParam == otherParam; [EOL] } <line_num>: 177,211
boolean checkArrowEquivalenceHelper(ArrowType that, EquivalenceMethod eqMethod) { [EOL]     if (!returnType.checkEquivalenceHelper(that.returnType, eqMethod)) { [EOL]         return false; [EOL]     } [EOL]     return hasEqualParameters(that, eqMethod); [EOL] } <line_num>: 213,220
@Override [EOL] public int hashCode() { [EOL]     int hashCode = 0; [EOL]     if (returnType != null) { [EOL]         hashCode += returnType.hashCode(); [EOL]     } [EOL]     if (returnTypeInferred) { [EOL]         hashCode += 1; [EOL]     } [EOL]     if (parameters != null) { [EOL]         Node param = parameters.getFirstChild(); [EOL]         while (param != null) { [EOL]             JSType paramType = param.getJSType(); [EOL]             if (paramType != null) { [EOL]                 hashCode += paramType.hashCode(); [EOL]             } [EOL]             param = param.getNext(); [EOL]         } [EOL]     } [EOL]     return hashCode; [EOL] } <line_num>: 222,242
@Override [EOL] public JSType getLeastSupertype(JSType that) { [EOL]     throw new UnsupportedOperationException(); [EOL] } <line_num>: 244,247
@Override [EOL] public JSType getGreatestSubtype(JSType that) { [EOL]     throw new UnsupportedOperationException(); [EOL] } <line_num>: 249,252
@Override [EOL] public TernaryValue testForEquality(JSType that) { [EOL]     throw new UnsupportedOperationException(); [EOL] } <line_num>: 254,257
@Override [EOL] public <T> T visit(Visitor<T> visitor) { [EOL]     throw new UnsupportedOperationException(); [EOL] } <line_num>: 259,262
@Override [EOL] <T> T visit(RelationshipVisitor<T> visitor, JSType that) { [EOL]     throw new UnsupportedOperationException(); [EOL] } <line_num>: 264,266
@Override [EOL] public BooleanLiteralSet getPossibleToBooleanOutcomes() { [EOL]     return BooleanLiteralSet.TRUE; [EOL] } <line_num>: 268,271
@Override [EOL] JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) { [EOL]     returnType = safeResolve(returnType, t, scope); [EOL]     if (parameters != null) { [EOL]         for (Node paramNode = parameters.getFirstChild(); paramNode != null; paramNode = paramNode.getNext()) { [EOL]             paramNode.setJSType(paramNode.getJSType().resolve(t, scope)); [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 273,283
boolean hasUnknownParamsOrReturn() { [EOL]     if (parameters != null) { [EOL]         for (Node paramNode = parameters.getFirstChild(); paramNode != null; paramNode = paramNode.getNext()) { [EOL]             JSType type = paramNode.getJSType(); [EOL]             if (type == null || type.isUnknownType()) { [EOL]                 return true; [EOL]             } [EOL]         } [EOL]     } [EOL]     return returnType == null || returnType.isUnknownType(); [EOL] } <line_num>: 285,296
@Override [EOL] String toStringHelper(boolean forAnnotations) { [EOL]     return "[ArrowType]"; [EOL] } <line_num>: 298,301
@Override [EOL] public boolean hasAnyTemplateTypesInternal() { [EOL]     return returnType.hasAnyTemplateTypes() || hasTemplatedParameterType(); [EOL] } <line_num>: 303,307
private boolean hasTemplatedParameterType() { [EOL]     if (parameters != null) { [EOL]         for (Node paramNode = parameters.getFirstChild(); paramNode != null; paramNode = paramNode.getNext()) { [EOL]             JSType type = paramNode.getJSType(); [EOL]             if (type != null && type.hasAnyTemplateTypes()) { [EOL]                 return true; [EOL]             } [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 309,320
