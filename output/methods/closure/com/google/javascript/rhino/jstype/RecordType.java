RecordType(JSTypeRegistry registry, Map<String, RecordProperty> properties) { [EOL]     this(registry, properties, true); [EOL] } <line_num>: 67,69
RecordType(JSTypeRegistry registry, Map<String, RecordProperty> properties, boolean declared) { [EOL]     super(registry, null, null); [EOL]     setPrettyPrint(true); [EOL]     this.declared = declared; [EOL]     for (String property : properties.keySet()) { [EOL]         RecordProperty prop = properties.get(property); [EOL]         if (prop == null) { [EOL]             throw new IllegalStateException("RecordProperty associated with a property should not be null!"); [EOL]         } [EOL]         if (declared) { [EOL]             defineDeclaredProperty(property, prop.getType(), prop.getPropertyNode()); [EOL]         } else { [EOL]             defineSynthesizedProperty(property, prop.getType(), prop.getPropertyNode()); [EOL]         } [EOL]     } [EOL]     isFrozen = true; [EOL] } <line_num>: 83,106
boolean isSynthetic() { [EOL]     return !declared; [EOL] } <line_num>: 109,111
boolean checkRecordEquivalenceHelper(RecordType otherRecord, EquivalenceMethod eqMethod) { [EOL]     Set<String> keySet = getOwnPropertyNames(); [EOL]     Set<String> otherKeySet = otherRecord.getOwnPropertyNames(); [EOL]     if (!otherKeySet.equals(keySet)) { [EOL]         return false; [EOL]     } [EOL]     for (String key : keySet) { [EOL]         if (!otherRecord.getPropertyType(key).checkEquivalenceHelper(getPropertyType(key), eqMethod)) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 113,127
@Override [EOL] public ObjectType getImplicitPrototype() { [EOL]     return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE); [EOL] } <line_num>: 129,132
@Override [EOL] boolean defineProperty(String propertyName, JSType type, boolean inferred, Node propertyNode) { [EOL]     if (isFrozen) { [EOL]         return false; [EOL]     } [EOL]     return super.defineProperty(propertyName, type, inferred, propertyNode); [EOL] } <line_num>: 134,143
JSType getGreatestSubtypeHelper(JSType that) { [EOL]     if (that.isRecordType()) { [EOL]         RecordType thatRecord = that.toMaybeRecordType(); [EOL]         RecordTypeBuilder builder = new RecordTypeBuilder(registry); [EOL]         builder.setSynthesized(true); [EOL]         for (String property : getOwnPropertyNames()) { [EOL]             if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isInvariant(getPropertyType(property))) { [EOL]                 return registry.getNativeObjectType(JSTypeNative.NO_TYPE); [EOL]             } [EOL]             builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); [EOL]         } [EOL]         for (String property : thatRecord.getOwnPropertyNames()) { [EOL]             if (!hasProperty(property)) { [EOL]                 builder.addProperty(property, thatRecord.getPropertyType(property), thatRecord.getPropertyNode(property)); [EOL]             } [EOL]         } [EOL]         return builder.build(); [EOL]     } [EOL]     JSType greatestSubtype = registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE); [EOL]     JSType thatRestrictedToObj = registry.getNativeType(JSTypeNative.OBJECT_TYPE).getGreatestSubtype(that); [EOL]     if (!thatRestrictedToObj.isEmptyType()) { [EOL]         for (String propName : getOwnPropertyNames()) { [EOL]             JSType propType = getPropertyType(propName); [EOL]             UnionTypeBuilder builder = new UnionTypeBuilder(registry); [EOL]             for (ObjectType alt : registry.getEachReferenceTypeWithProperty(propName)) { [EOL]                 JSType altPropType = alt.getPropertyType(propName); [EOL]                 if (altPropType != null && !alt.isEquivalentTo(this) && alt.isSubtype(that) && propType.isInvariant(altPropType)) { [EOL]                     builder.addAlternate(alt); [EOL]                 } [EOL]             } [EOL]             greatestSubtype = greatestSubtype.getLeastSupertype(builder.build()); [EOL]         } [EOL]     } [EOL]     return greatestSubtype; [EOL] } <line_num>: 145,203
@Override [EOL] RecordType toMaybeRecordType() { [EOL]     return this; [EOL] } <line_num>: 205,208
@Override [EOL] public boolean isSubtype(JSType that) { [EOL]     if (JSType.isSubtypeHelper(this, that)) { [EOL]         return true; [EOL]     } [EOL]     if (registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE).isSubtype(that)) { [EOL]         return true; [EOL]     } [EOL]     if (!that.isRecordType()) { [EOL]         return false; [EOL]     } [EOL]     return RecordType.isSubtype(this, that.toMaybeRecordType()); [EOL] } <line_num>: 210,230
static boolean isSubtype(ObjectType typeA, RecordType typeB) { [EOL]     for (String property : typeB.getOwnPropertyNames()) { [EOL]         if (!typeA.hasProperty(property)) { [EOL]             return false; [EOL]         } [EOL]         JSType propA = typeA.getPropertyType(property); [EOL]         JSType propB = typeB.getPropertyType(property); [EOL]         if (typeA.isPropertyTypeDeclared(property)) { [EOL]             if (!propA.isInvariant(propB)) { [EOL]                 return false; [EOL]             } [EOL]         } else { [EOL]             if (!propA.isSubtype(propB)) { [EOL]                 return false; [EOL]             } [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 233,274
