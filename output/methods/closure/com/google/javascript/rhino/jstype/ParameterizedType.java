ParameterizedType(JSTypeRegistry registry, ObjectType objectType, JSType parameterType) { [EOL]     super(registry, objectType); [EOL]     this.parameterType = parameterType; [EOL] } <line_num>: 57,61
@Override [EOL] public JSType getParameterType() { [EOL]     return parameterType; [EOL] } <line_num>: 63,66
@Override [EOL] String toStringHelper(boolean forAnnotations) { [EOL]     String result = super.toStringHelper(forAnnotations); [EOL]     return result + ".<" + parameterType.toStringHelper(forAnnotations) + ">"; [EOL] } <line_num>: 68,72
@Override [EOL] public <T> T visit(Visitor<T> visitor) { [EOL]     return visitor.caseParameterizedType(this); [EOL] } <line_num>: 74,77
@Override [EOL] <T> T visit(RelationshipVisitor<T> visitor, JSType that) { [EOL]     return visitor.caseParameterizedType(this, that); [EOL] } <line_num>: 79,81
@Override [EOL] public ParameterizedType toMaybeParameterizedType() { [EOL]     return this; [EOL] } <line_num>: 83,86
@Override [EOL] public boolean hasAnyTemplateTypesInternal() { [EOL]     return super.hasAnyTemplateTypes() || parameterType.hasAnyTemplateTypes(); [EOL] } <line_num>: 88,91
@Override [EOL] public boolean isSubtype(JSType that) { [EOL]     return isSubtypeHelper(this, that); [EOL] } <line_num>: 93,96
boolean isParameterizeSubtypeOf(JSType thatType) { [EOL]     if (thatType.isParameterizedType()) { [EOL]         JSType thisParameter = this.parameterType; [EOL]         JSType thatParameter = thatType.toMaybeParameterizedType().parameterType; [EOL]         if (this.wrapsSameRawType(thatType)) { [EOL]             return (thisParameter.isSubtype(thatParameter) || thatParameter.isSubtype(thisParameter)); [EOL]         } [EOL]     } [EOL]     return this.getReferencedTypeInternal().isSubtype(thatType); [EOL] } <line_num>: 98,115
boolean wrapsSameRawType(JSType that) { [EOL]     return that.isParameterizedType() && this.getReferencedTypeInternal().isEquivalentTo(that.toMaybeParameterizedType().getReferencedTypeInternal()); [EOL] } <line_num>: 117,121
boolean wrapsRawType(JSType that) { [EOL]     return this.getReferencedTypeInternal().isEquivalentTo(that); [EOL] } <line_num>: 123,125
JSType getGreatestSubtypeHelper(JSType rawThat) { [EOL]     Preconditions.checkNotNull(rawThat); [EOL]     if (!wrapsSameRawType(rawThat)) { [EOL]         if (!rawThat.isParameterizedType()) { [EOL]             if (this.isSubtype(rawThat)) { [EOL]                 return this; [EOL]             } else if (rawThat.isSubtype(this)) { [EOL]                 return filterNoResolvedType(rawThat); [EOL]             } [EOL]         } [EOL]         if (this.isObject() && rawThat.isObject()) { [EOL]             return this.getNativeType(JSTypeNative.NO_OBJECT_TYPE); [EOL]         } [EOL]         return this.getNativeType(JSTypeNative.NO_TYPE); [EOL]     } [EOL]     ParameterizedType that = rawThat.toMaybeParameterizedType(); [EOL]     Preconditions.checkNotNull(that); [EOL]     if (this.parameterType.isEquivalentTo(that.parameterType)) { [EOL]         return this; [EOL]     } [EOL]     return getReferencedObjTypeInternal(); [EOL] } <line_num>: 131,159
