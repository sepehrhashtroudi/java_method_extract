JSType(JSTypeRegistry registry) { [EOL]     this(registry, null, null); [EOL] } <line_num>: 110,112
JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys, ImmutableList<JSType> templatizedTypes) { [EOL]     this.registry = registry; [EOL]     int keysLength = templateKeys == null ? 0 : templateKeys.size(); [EOL]     int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size(); [EOL]     if (typesLength > keysLength) { [EOL]         throw new IllegalArgumentException("Cannot have more templatized types than template keys"); [EOL]     } else if (typesLength < keysLength) { [EOL]         ImmutableList.Builder<JSType> builder = ImmutableList.builder(); [EOL]         if (typesLength > 0) { [EOL]             builder.addAll(templatizedTypes); [EOL]         } [EOL]         for (int i = 0; i < keysLength - typesLength; i++) { [EOL]             builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE)); [EOL]         } [EOL]         templatizedTypes = builder.build(); [EOL]     } else if (keysLength == 0 && typesLength == 0) { [EOL]         templateKeys = ImmutableList.of(); [EOL]         templatizedTypes = ImmutableList.of(); [EOL]     } [EOL]     this.templateKeys = templateKeys; [EOL]     this.templatizedTypes = templatizedTypes; [EOL] } <line_num>: 114,144
public TypePair(JSType typeA, JSType typeB) { [EOL]     this.typeA = typeA; [EOL]     this.typeB = typeB; [EOL] } <line_num>: 1478,1481
@Override [EOL] public int compare(JSType t1, JSType t2) { [EOL]     return t1.toString().compareTo(t2.toString()); [EOL] } <line_num>: 98,101
JSType getNativeType(JSTypeNative typeId) { [EOL]     return registry.getNativeType(typeId); [EOL] } <line_num>: 149,151
public JSDocInfo getJSDocInfo() { [EOL]     return null; [EOL] } <line_num>: 158,160
public String getDisplayName() { [EOL]     return null; [EOL] } <line_num>: 171,173
public boolean hasDisplayName() { [EOL]     String displayName = getDisplayName(); [EOL]     return displayName != null && !displayName.isEmpty(); [EOL] } <line_num>: 178,181
public boolean hasProperty(String pname) { [EOL]     return false; [EOL] } <line_num>: 184,186
public boolean isNoType() { [EOL]     return false; [EOL] } <line_num>: 188,190
public boolean isNoResolvedType() { [EOL]     return false; [EOL] } <line_num>: 192,194
public boolean isNoObjectType() { [EOL]     return false; [EOL] } <line_num>: 196,198
public final boolean isEmptyType() { [EOL]     return isNoType() || isNoObjectType() || isNoResolvedType() || (registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE) == this); [EOL] } <line_num>: 200,204
public boolean isNumberObjectType() { [EOL]     return false; [EOL] } <line_num>: 206,208
public boolean isNumberValueType() { [EOL]     return false; [EOL] } <line_num>: 210,212
public boolean isFunctionPrototypeType() { [EOL]     return false; [EOL] } <line_num>: 215,217
public boolean isStringObjectType() { [EOL]     return false; [EOL] } <line_num>: 219,221
boolean isTheObjectType() { [EOL]     return false; [EOL] } <line_num>: 223,225
public boolean isStringValueType() { [EOL]     return false; [EOL] } <line_num>: 227,229
public final boolean isString() { [EOL]     return isSubtype(getNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE)); [EOL] } <line_num>: 235,238
public final boolean isNumber() { [EOL]     return isSubtype(getNativeType(JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE)); [EOL] } <line_num>: 244,247
public boolean isArrayType() { [EOL]     return false; [EOL] } <line_num>: 249,251
public boolean isBooleanObjectType() { [EOL]     return false; [EOL] } <line_num>: 253,255
public boolean isBooleanValueType() { [EOL]     return false; [EOL] } <line_num>: 257,259
public boolean isRegexpType() { [EOL]     return false; [EOL] } <line_num>: 261,263
public boolean isDateType() { [EOL]     return false; [EOL] } <line_num>: 265,267
public boolean isNullType() { [EOL]     return false; [EOL] } <line_num>: 269,271
public boolean isVoidType() { [EOL]     return false; [EOL] } <line_num>: 273,275
public boolean isAllType() { [EOL]     return false; [EOL] } <line_num>: 277,279
public boolean isUnknownType() { [EOL]     return false; [EOL] } <line_num>: 281,283
public boolean isCheckedUnknownType() { [EOL]     return false; [EOL] } <line_num>: 285,287
public final boolean isUnionType() { [EOL]     return toMaybeUnionType() != null; [EOL] } <line_num>: 289,291
public boolean isStruct() { [EOL]     if (isObject()) { [EOL]         ObjectType objType = toObjectType(); [EOL]         ObjectType iproto = objType.getImplicitPrototype(); [EOL]         if (iproto != null && iproto.isStruct()) { [EOL]             return true; [EOL]         } [EOL]         FunctionType ctor = objType.getConstructor(); [EOL]         if (ctor == null) { [EOL]             JSDocInfo info = objType.getJSDocInfo(); [EOL]             return info != null && info.makesStructs(); [EOL]         } else { [EOL]             return ctor.makesStructs(); [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 297,316
public boolean isDict() { [EOL]     if (isObject()) { [EOL]         ObjectType objType = toObjectType(); [EOL]         ObjectType iproto = objType.getImplicitPrototype(); [EOL]         if (iproto != null && iproto.isDict()) { [EOL]             return true; [EOL]         } [EOL]         FunctionType ctor = objType.getConstructor(); [EOL]         if (ctor == null) { [EOL]             JSDocInfo info = objType.getJSDocInfo(); [EOL]             return info != null && info.makesDicts(); [EOL]         } else { [EOL]             return ctor.makesDicts(); [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 322,341
public UnionType toMaybeUnionType() { [EOL]     return null; [EOL] } <line_num>: 348,350
public final boolean isGlobalThisType() { [EOL]     return this == registry.getNativeType(JSTypeNative.GLOBAL_THIS); [EOL] } <line_num>: 353,355
public final boolean isFunctionType() { [EOL]     return toMaybeFunctionType() != null; [EOL] } <line_num>: 358,360
public FunctionType toMaybeFunctionType() { [EOL]     return null; [EOL] } <line_num>: 374,376
public static FunctionType toMaybeFunctionType(JSType type) { [EOL]     return type == null ? null : type.toMaybeFunctionType(); [EOL] } <line_num>: 381,383
public final boolean isEnumElementType() { [EOL]     return toMaybeEnumElementType() != null; [EOL] } <line_num>: 385,387
public EnumElementType toMaybeEnumElementType() { [EOL]     return null; [EOL] } <line_num>: 392,394
public boolean isEnumType() { [EOL]     return toMaybeEnumType() != null; [EOL] } <line_num>: 396,398
public EnumType toMaybeEnumType() { [EOL]     return null; [EOL] } <line_num>: 403,405
boolean isNamedType() { [EOL]     return false; [EOL] } <line_num>: 407,409
public boolean isRecordType() { [EOL]     return toMaybeRecordType() != null; [EOL] } <line_num>: 411,413
RecordType toMaybeRecordType() { [EOL]     return null; [EOL] } <line_num>: 419,421
public final boolean isParameterizedType() { [EOL]     return toMaybeParameterizedType() != null; [EOL] } <line_num>: 423,425
public ParameterizedType toMaybeParameterizedType() { [EOL]     return null; [EOL] } <line_num>: 431,433
public static ParameterizedType toMaybeParameterizedType(JSType type) { [EOL]     return type == null ? null : type.toMaybeParameterizedType(); [EOL] } <line_num>: 438,440
public final boolean isTemplateType() { [EOL]     return toMaybeTemplateType() != null; [EOL] } <line_num>: 442,444
public TemplateType toMaybeTemplateType() { [EOL]     return null; [EOL] } <line_num>: 450,452
public static TemplateType toMaybeTemplateType(JSType type) { [EOL]     return type == null ? null : type.toMaybeTemplateType(); [EOL] } <line_num>: 457,459
public boolean hasAnyTemplateTypes() { [EOL]     if (!this.inTemplatedCheckVisit) { [EOL]         this.inTemplatedCheckVisit = true; [EOL]         boolean result = hasAnyTemplateTypesInternal(); [EOL]         this.inTemplatedCheckVisit = false; [EOL]         return result; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 461,471
boolean hasAnyTemplateTypesInternal() { [EOL]     if (isTemplatized()) { [EOL]         for (JSType templatizedType : templatizedTypes) { [EOL]             if (templatizedType.hasAnyTemplateTypes()) { [EOL]                 return true; [EOL]             } [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 473,482
public boolean isTemplatized() { [EOL]     return !templateKeys.isEmpty(); [EOL] } <line_num>: 487,489
public ImmutableList<String> getTemplateKeys() { [EOL]     return templateKeys; [EOL] } <line_num>: 494,496
public ImmutableList<JSType> getTemplatizedTypes() { [EOL]     return templatizedTypes; [EOL] } <line_num>: 498,500
public boolean hasTemplatizedType(String key) { [EOL]     return templateKeys.contains(key); [EOL] } <line_num>: 506,508
public JSType getTemplatizedType(String key) { [EOL]     int index = templateKeys.indexOf(key); [EOL]     if (index < 0) { [EOL]         return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE); [EOL]     } [EOL]     return templatizedTypes.get(index); [EOL] } <line_num>: 515,521
static boolean hasEquivalentTemplateTypes(JSType type1, JSType type2, EquivalenceMethod eqMethod) { [EOL]     ImmutableList<JSType> templatizedTypes1 = type1.getTemplatizedTypes(); [EOL]     ImmutableList<JSType> templatizedTypes2 = type2.getTemplatizedTypes(); [EOL]     int nTemplatizedTypes1 = templatizedTypes1.size(); [EOL]     int nTemplatizedTypes2 = templatizedTypes2.size(); [EOL]     if (nTemplatizedTypes1 != nTemplatizedTypes2) { [EOL]         return false; [EOL]     } [EOL]     for (int i = 0; i < nTemplatizedTypes1; i++) { [EOL]         JSType templatizedType1 = templatizedTypes1.get(i); [EOL]         JSType templatizedType2 = templatizedTypes2.get(i); [EOL]         if (templatizedType1.checkEquivalenceHelper(templatizedType2, eqMethod)) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 527,547
public boolean isObject() { [EOL]     return false; [EOL] } <line_num>: 554,556
public boolean isConstructor() { [EOL]     return false; [EOL] } <line_num>: 562,564
public boolean isNominalType() { [EOL]     return false; [EOL] } <line_num>: 570,572
public final boolean isNominalConstructor() { [EOL]     if (isConstructor() || isInterface()) { [EOL]         FunctionType fn = toMaybeFunctionType(); [EOL]         if (fn == null) { [EOL]             return false; [EOL]         } [EOL]         if (fn.getSource() != null) { [EOL]             return true; [EOL]         } [EOL]         return fn.isNativeObjectType(); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 578,596
public boolean isInstanceType() { [EOL]     return false; [EOL] } <line_num>: 602,604
public boolean isInterface() { [EOL]     return false; [EOL] } <line_num>: 610,612
public boolean isOrdinaryFunction() { [EOL]     return false; [EOL] } <line_num>: 618,620
public final boolean isEquivalentTo(JSType that) { [EOL]     return checkEquivalenceHelper(that, EquivalenceMethod.IDENTITY); [EOL] } <line_num>: 625,627
public final boolean isInvariant(JSType that) { [EOL]     return checkEquivalenceHelper(that, EquivalenceMethod.INVARIANT); [EOL] } <line_num>: 633,635
public final boolean differsFrom(JSType that) { [EOL]     return !checkEquivalenceHelper(that, EquivalenceMethod.DATA_FLOW); [EOL] } <line_num>: 647,649
boolean checkEquivalenceHelper(JSType that, EquivalenceMethod eqMethod) { [EOL]     if (this == that) { [EOL]         return true; [EOL]     } [EOL]     boolean thisUnknown = isUnknownType(); [EOL]     boolean thatUnknown = that.isUnknownType(); [EOL]     if (thisUnknown || thatUnknown) { [EOL]         if (eqMethod == EquivalenceMethod.INVARIANT) { [EOL]             return true; [EOL]         } else if (eqMethod == EquivalenceMethod.DATA_FLOW) { [EOL]             return thisUnknown && thatUnknown; [EOL]         } else if (thisUnknown && thatUnknown && (isNominalType() ^ that.isNominalType())) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     if (isUnionType() && that.isUnionType()) { [EOL]         return toMaybeUnionType().checkUnionEquivalenceHelper(that.toMaybeUnionType(), eqMethod); [EOL]     } [EOL]     if (isFunctionType() && that.isFunctionType()) { [EOL]         return toMaybeFunctionType().checkFunctionEquivalenceHelper(that.toMaybeFunctionType(), eqMethod); [EOL]     } [EOL]     if (isRecordType() && that.isRecordType()) { [EOL]         return toMaybeRecordType().checkRecordEquivalenceHelper(that.toMaybeRecordType(), eqMethod); [EOL]     } [EOL]     ParameterizedType thisParamType = toMaybeParameterizedType(); [EOL]     ParameterizedType thatParamType = that.toMaybeParameterizedType(); [EOL]     if (thisParamType != null || thatParamType != null) { [EOL]         boolean paramsMatch = false; [EOL]         if (thisParamType != null && thatParamType != null) { [EOL]             paramsMatch = thisParamType.getParameterType().checkEquivalenceHelper(thatParamType.getParameterType(), eqMethod); [EOL]         } else if (eqMethod == EquivalenceMethod.IDENTITY) { [EOL]             paramsMatch = false; [EOL]         } else { [EOL]             paramsMatch = true; [EOL]         } [EOL]         JSType thisRootType = thisParamType == null ? this : thisParamType.getReferencedTypeInternal(); [EOL]         JSType thatRootType = thatParamType == null ? that : thatParamType.getReferencedTypeInternal(); [EOL]         return paramsMatch && thisRootType.checkEquivalenceHelper(thatRootType, eqMethod); [EOL]     } [EOL]     if (isNominalType() && that.isNominalType()) { [EOL]         return toObjectType().getReferenceName().equals(that.toObjectType().getReferenceName()); [EOL]     } [EOL]     if (this instanceof ProxyObjectType) { [EOL]         return ((ProxyObjectType) this).getReferencedTypeInternal().checkEquivalenceHelper(that, eqMethod); [EOL]     } [EOL]     if (that instanceof ProxyObjectType) { [EOL]         return checkEquivalenceHelper(((ProxyObjectType) that).getReferencedTypeInternal(), eqMethod); [EOL]     } [EOL]     return this == that; [EOL] } <line_num>: 654,742
public static boolean isEquivalent(JSType typeA, JSType typeB) { [EOL]     return (typeA == null || typeB == null) ? typeA == typeB : typeA.isEquivalentTo(typeB); [EOL] } <line_num>: 744,747
@Override [EOL] public boolean equals(Object jsType) { [EOL]     return (jsType instanceof JSType) ? isEquivalentTo((JSType) jsType) : false; [EOL] } <line_num>: 749,753
@Override [EOL] public int hashCode() { [EOL]     return System.identityHashCode(this); [EOL] } <line_num>: 755,758
public final boolean matchesInt32Context() { [EOL]     return matchesNumberContext(); [EOL] } <line_num>: 766,768
public final boolean matchesUint32Context() { [EOL]     return matchesNumberContext(); [EOL] } <line_num>: 775,777
public boolean matchesNumberContext() { [EOL]     return false; [EOL] } <line_num>: 783,785
public boolean matchesStringContext() { [EOL]     return false; [EOL] } <line_num>: 795,797
public boolean matchesObjectContext() { [EOL]     return false; [EOL] } <line_num>: 807,809
public JSType findPropertyType(String propertyName) { [EOL]     ObjectType autoboxObjType = ObjectType.cast(autoboxesTo()); [EOL]     if (autoboxObjType != null) { [EOL]         return autoboxObjType.findPropertyType(propertyName); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 821,828
public boolean canBeCalled() { [EOL]     return false; [EOL] } <line_num>: 836,838
public boolean canCastTo(JSType that) { [EOL]     return this.visit(CAN_CAST_TO_VISITOR, that); [EOL] } <line_num>: 847,849
public JSType autoboxesTo() { [EOL]     return null; [EOL] } <line_num>: 856,858
public JSType unboxesTo() { [EOL]     return null; [EOL] } <line_num>: 865,867
public ObjectType toObjectType() { [EOL]     return this instanceof ObjectType ? (ObjectType) this : null; [EOL] } <line_num>: 875,877
public JSType autobox() { [EOL]     JSType restricted = restrictByNotNullOrUndefined(); [EOL]     JSType autobox = restricted.autoboxesTo(); [EOL]     return autobox == null ? restricted : autobox; [EOL] } <line_num>: 885,889
public final ObjectType dereference() { [EOL]     return autobox().toObjectType(); [EOL] } <line_num>: 897,899
public final boolean canTestForEqualityWith(JSType that) { [EOL]     return testForEquality(that).equals(UNKNOWN); [EOL] } <line_num>: 907,909
public TernaryValue testForEquality(JSType that) { [EOL]     return testForEqualityHelper(this, that); [EOL] } <line_num>: 924,926
TernaryValue testForEqualityHelper(JSType aType, JSType bType) { [EOL]     if (bType.isAllType() || bType.isUnknownType() || bType.isNoResolvedType() || aType.isAllType() || aType.isUnknownType() || aType.isNoResolvedType()) { [EOL]         return UNKNOWN; [EOL]     } [EOL]     boolean aIsEmpty = aType.isEmptyType(); [EOL]     boolean bIsEmpty = bType.isEmptyType(); [EOL]     if (aIsEmpty || bIsEmpty) { [EOL]         if (aIsEmpty && bIsEmpty) { [EOL]             return TernaryValue.TRUE; [EOL]         } else { [EOL]             return UNKNOWN; [EOL]         } [EOL]     } [EOL]     if (aType.isFunctionType() || bType.isFunctionType()) { [EOL]         JSType otherType = aType.isFunctionType() ? bType : aType; [EOL]         JSType meet = otherType.getGreatestSubtype(getNativeType(JSTypeNative.OBJECT_TYPE)); [EOL]         if (meet.isNoType() || meet.isNoObjectType()) { [EOL]             return TernaryValue.FALSE; [EOL]         } else { [EOL]             return TernaryValue.UNKNOWN; [EOL]         } [EOL]     } [EOL]     if (bType.isEnumElementType() || bType.isUnionType()) { [EOL]         return bType.testForEquality(aType); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 928,966
public final boolean canTestForShallowEqualityWith(JSType that) { [EOL]     if (isEmptyType() || that.isEmptyType()) { [EOL]         return isSubtype(that) || that.isSubtype(this); [EOL]     } [EOL]     JSType inf = getGreatestSubtype(that); [EOL]     return !inf.isEmptyType() || inf == registry.getNativeType(JSTypeNative.LEAST_FUNCTION_TYPE); [EOL] } <line_num>: 975,987
public boolean isNullable() { [EOL]     return isSubtype(getNativeType(JSTypeNative.NULL_TYPE)); [EOL] } <line_num>: 992,994
public JSType collapseUnion() { [EOL]     return this; [EOL] } <line_num>: 999,1001
public JSType getLeastSupertype(JSType that) { [EOL]     if (that.isUnionType()) { [EOL]         return that.toMaybeUnionType().getLeastSupertype(this); [EOL]     } [EOL]     return getLeastSupertype(this, that); [EOL] } <line_num>: 1015,1021
static JSType getLeastSupertype(JSType thisType, JSType thatType) { [EOL]     boolean areEquivalent = thisType.isEquivalentTo(thatType); [EOL]     return areEquivalent ? thisType : filterNoResolvedType(thisType.registry.createUnionType(thisType, thatType)); [EOL] } <line_num>: 1027,1032
public JSType getGreatestSubtype(JSType that) { [EOL]     return getGreatestSubtype(this, that); [EOL] } <line_num>: 1046,1048
static JSType getGreatestSubtype(JSType thisType, JSType thatType) { [EOL]     if (thisType.isFunctionType() && thatType.isFunctionType()) { [EOL]         return thisType.toMaybeFunctionType().supAndInfHelper(thatType.toMaybeFunctionType(), false); [EOL]     } else if (thisType.isEquivalentTo(thatType)) { [EOL]         return thisType; [EOL]     } else if (thisType.isUnknownType() || thatType.isUnknownType()) { [EOL]         return thisType.isEquivalentTo(thatType) ? thisType : thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE); [EOL]     } else if (thisType.isUnionType()) { [EOL]         return thisType.toMaybeUnionType().meet(thatType); [EOL]     } else if (thatType.isUnionType()) { [EOL]         return thatType.toMaybeUnionType().meet(thisType); [EOL]     } else if (thisType.isParameterizedType()) { [EOL]         return thisType.toMaybeParameterizedType().getGreatestSubtypeHelper(thatType); [EOL]     } else if (thatType.isParameterizedType()) { [EOL]         return thatType.toMaybeParameterizedType().getGreatestSubtypeHelper(thisType); [EOL]     } else if (thisType.isSubtype(thatType)) { [EOL]         return filterNoResolvedType(thisType); [EOL]     } else if (thatType.isSubtype(thisType)) { [EOL]         return filterNoResolvedType(thatType); [EOL]     } else if (thisType.isRecordType()) { [EOL]         return thisType.toMaybeRecordType().getGreatestSubtypeHelper(thatType); [EOL]     } else if (thatType.isRecordType()) { [EOL]         return thatType.toMaybeRecordType().getGreatestSubtypeHelper(thisType); [EOL]     } [EOL]     if (thisType.isEnumElementType()) { [EOL]         JSType inf = thisType.toMaybeEnumElementType().meet(thatType); [EOL]         if (inf != null) { [EOL]             return inf; [EOL]         } [EOL]     } else if (thatType.isEnumElementType()) { [EOL]         JSType inf = thatType.toMaybeEnumElementType().meet(thisType); [EOL]         if (inf != null) { [EOL]             return inf; [EOL]         } [EOL]     } [EOL]     if (thisType.isObject() && thatType.isObject()) { [EOL]         return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE); [EOL]     } [EOL]     return thisType.getNativeType(JSTypeNative.NO_TYPE); [EOL] } <line_num>: 1054,1106
static JSType filterNoResolvedType(JSType type) { [EOL]     if (type.isNoResolvedType()) { [EOL]         return type.getNativeType(JSTypeNative.NO_RESOLVED_TYPE); [EOL]     } else if (type.isUnionType()) { [EOL]         UnionType unionType = type.toMaybeUnionType(); [EOL]         boolean needsFiltering = false; [EOL]         for (JSType alt : unionType.getAlternates()) { [EOL]             if (alt.isNoResolvedType()) { [EOL]                 needsFiltering = true; [EOL]                 break; [EOL]             } [EOL]         } [EOL]         if (needsFiltering) { [EOL]             UnionTypeBuilder builder = new UnionTypeBuilder(type.registry); [EOL]             builder.addAlternate(type.getNativeType(JSTypeNative.NO_RESOLVED_TYPE)); [EOL]             for (JSType alt : unionType.getAlternates()) { [EOL]                 if (!alt.isNoResolvedType()) { [EOL]                     builder.addAlternate(alt); [EOL]                 } [EOL]             } [EOL]             return builder.build(); [EOL]         } [EOL]     } [EOL]     return type; [EOL] } <line_num>: 1116,1143
public JSType getRestrictedTypeGivenToBooleanOutcome(boolean outcome) { [EOL]     if (outcome && this == getNativeType(JSTypeNative.UNKNOWN_TYPE)) { [EOL]         return getNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE); [EOL]     } [EOL]     BooleanLiteralSet literals = getPossibleToBooleanOutcomes(); [EOL]     if (literals.contains(outcome)) { [EOL]         return this; [EOL]     } else { [EOL]         return getNativeType(JSTypeNative.NO_TYPE); [EOL]     } [EOL] } <line_num>: 1159,1170
public abstract BooleanLiteralSet getPossibleToBooleanOutcomes(); <line_num>: 1188,1188
public TypePair getTypesUnderEquality(JSType that) { [EOL]     if (that.isUnionType()) { [EOL]         TypePair p = that.toMaybeUnionType().getTypesUnderEquality(this); [EOL]         return new TypePair(p.typeB, p.typeA); [EOL]     } [EOL]     switch(testForEquality(that)) { [EOL]         case FALSE: [EOL]             return new TypePair(null, null); [EOL]         case TRUE: [EOL]         case UNKNOWN: [EOL]             return new TypePair(this, that); [EOL]     } [EOL]     throw new IllegalStateException(); [EOL] } <line_num>: 1202,1221
public TypePair getTypesUnderInequality(JSType that) { [EOL]     if (that.isUnionType()) { [EOL]         TypePair p = that.toMaybeUnionType().getTypesUnderInequality(this); [EOL]         return new TypePair(p.typeB, p.typeA); [EOL]     } [EOL]     switch(testForEquality(that)) { [EOL]         case TRUE: [EOL]             JSType noType = getNativeType(JSTypeNative.NO_TYPE); [EOL]             return new TypePair(noType, noType); [EOL]         case FALSE: [EOL]         case UNKNOWN: [EOL]             return new TypePair(this, that); [EOL]     } [EOL]     throw new IllegalStateException(); [EOL] } <line_num>: 1235,1255
public TypePair getTypesUnderShallowEquality(JSType that) { [EOL]     JSType commonType = getGreatestSubtype(that); [EOL]     return new TypePair(commonType, commonType); [EOL] } <line_num>: 1266,1269
public TypePair getTypesUnderShallowInequality(JSType that) { [EOL]     if (that.isUnionType()) { [EOL]         TypePair p = that.toMaybeUnionType().getTypesUnderShallowInequality(this); [EOL]         return new TypePair(p.typeB, p.typeA); [EOL]     } [EOL]     if (isNullType() && that.isNullType() || isVoidType() && that.isVoidType()) { [EOL]         return new TypePair(null, null); [EOL]     } else { [EOL]         return new TypePair(this, that); [EOL]     } [EOL] } <line_num>: 1280,1296
public JSType restrictByNotNullOrUndefined() { [EOL]     return this; [EOL] } <line_num>: 1302,1304
public boolean isSubtype(JSType that) { [EOL]     return isSubtypeHelper(this, that); [EOL] } <line_num>: 1332,1334
static boolean isSubtypeHelper(JSType thisType, JSType thatType) { [EOL]     if (thatType.isUnknownType()) { [EOL]         return true; [EOL]     } [EOL]     if (thatType.isAllType()) { [EOL]         return true; [EOL]     } [EOL]     if (thisType.isEquivalentTo(thatType)) { [EOL]         return true; [EOL]     } [EOL]     if (thatType.isUnionType()) { [EOL]         UnionType union = thatType.toMaybeUnionType(); [EOL]         for (JSType element : union.alternates) { [EOL]             if (thisType.isSubtype(element)) { [EOL]                 return true; [EOL]             } [EOL]         } [EOL]         return false; [EOL]     } [EOL]     if (thisType.isParameterizedType()) { [EOL]         return thisType.toMaybeParameterizedType().isParameterizeSubtypeOf(thatType); [EOL]     } [EOL]     if (thatType instanceof ProxyObjectType) { [EOL]         return thisType.isSubtype(((ProxyObjectType) thatType).getReferencedTypeInternal()); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 1340,1376
public abstract <T> T visit(Visitor<T> visitor); <line_num>: 1383,1383
abstract <T> T visit(RelationshipVisitor<T> visitor, JSType that); <line_num>: 1390,1390
public final JSType forceResolve(ErrorReporter t, StaticScope<JSType> scope) { [EOL]     ResolveMode oldResolveMode = registry.getResolveMode(); [EOL]     registry.setResolveMode(ResolveMode.IMMEDIATE); [EOL]     JSType result = resolve(t, scope); [EOL]     registry.setResolveMode(oldResolveMode); [EOL]     return result; [EOL] } <line_num>: 1397,1403
public final JSType resolve(ErrorReporter t, StaticScope<JSType> scope) { [EOL]     if (resolved) { [EOL]         if (resolveResult == null) { [EOL]             return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE); [EOL]         } [EOL]         return resolveResult; [EOL]     } [EOL]     resolved = true; [EOL]     resolveResult = resolveInternal(t, scope); [EOL]     resolveResult.setResolvedTypeInternal(resolveResult); [EOL]     return resolveResult; [EOL] } <line_num>: 1419,1432
abstract JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope); <line_num>: 1437,1437
void setResolvedTypeInternal(JSType type) { [EOL]     resolveResult = type; [EOL]     resolved = true; [EOL] } <line_num>: 1439,1442
public final boolean isResolved() { [EOL]     return resolved; [EOL] } <line_num>: 1445,1447
public final void clearResolved() { [EOL]     resolved = false; [EOL]     resolveResult = null; [EOL] } <line_num>: 1450,1453
static final JSType safeResolve(JSType type, ErrorReporter t, StaticScope<JSType> scope) { [EOL]     return type == null ? null : type.resolve(t, scope); [EOL] } <line_num>: 1459,1462
public boolean setValidator(Predicate<JSType> validator) { [EOL]     return validator.apply(this); [EOL] } <line_num>: 1470,1472
@Override [EOL] public String toString() { [EOL]     return toStringHelper(false); [EOL] } <line_num>: 1488,1491
public String toDebugHashCodeString() { [EOL]     return "{" + hashCode() + "}"; [EOL] } <line_num>: 1497,1499
public final String toAnnotationString() { [EOL]     return toStringHelper(true); [EOL] } <line_num>: 1505,1507
abstract String toStringHelper(boolean forAnnotations); <line_num>: 1513,1513
public void matchConstraint(JSType constraint) { [EOL] } <line_num>: 1522,1522
