UnionType(JSTypeRegistry registry, Collection<JSType> alternates) { [EOL]     super(registry); [EOL]     this.alternates = alternates; [EOL]     this.hashcode = this.alternates.hashCode(); [EOL] } <line_num>: 81,85
public Iterable<JSType> getAlternates() { [EOL]     return alternates; [EOL] } <line_num>: 92,94
@Override [EOL] public boolean matchesNumberContext() { [EOL]     for (JSType t : alternates) { [EOL]         if (t.matchesNumberContext()) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 102,111
@Override [EOL] public boolean matchesStringContext() { [EOL]     for (JSType t : alternates) { [EOL]         if (t.matchesStringContext()) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 124,133
@Override [EOL] public boolean matchesObjectContext() { [EOL]     for (JSType t : alternates) { [EOL]         if (t.matchesObjectContext()) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 151,160
@Override [EOL] public JSType findPropertyType(String propertyName) { [EOL]     JSType propertyType = null; [EOL]     for (JSType alternate : getAlternates()) { [EOL]         if (alternate.isNullType() || alternate.isVoidType()) { [EOL]             continue; [EOL]         } [EOL]         JSType altPropertyType = alternate.findPropertyType(propertyName); [EOL]         if (altPropertyType == null) { [EOL]             continue; [EOL]         } [EOL]         if (propertyType == null) { [EOL]             propertyType = altPropertyType; [EOL]         } else { [EOL]             propertyType = propertyType.getLeastSupertype(altPropertyType); [EOL]         } [EOL]     } [EOL]     return propertyType; [EOL] } <line_num>: 162,185
@Override [EOL] public boolean canBeCalled() { [EOL]     for (JSType t : alternates) { [EOL]         if (!t.canBeCalled()) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 187,195
@Override [EOL] public JSType autobox() { [EOL]     UnionTypeBuilder restricted = new UnionTypeBuilder(registry); [EOL]     for (JSType t : alternates) { [EOL]         restricted.addAlternate(t.autobox()); [EOL]     } [EOL]     return restricted.build(); [EOL] } <line_num>: 197,204
@Override [EOL] public JSType restrictByNotNullOrUndefined() { [EOL]     UnionTypeBuilder restricted = new UnionTypeBuilder(registry); [EOL]     for (JSType t : alternates) { [EOL]         restricted.addAlternate(t.restrictByNotNullOrUndefined()); [EOL]     } [EOL]     return restricted.build(); [EOL] } <line_num>: 206,213
@Override [EOL] public TernaryValue testForEquality(JSType that) { [EOL]     TernaryValue result = null; [EOL]     for (JSType t : alternates) { [EOL]         TernaryValue test = t.testForEquality(that); [EOL]         if (result == null) { [EOL]             result = test; [EOL]         } else if (!result.equals(test)) { [EOL]             return UNKNOWN; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 215,227
@Override [EOL] public boolean isNullable() { [EOL]     for (JSType t : alternates) { [EOL]         if (t.isNullable()) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 237,245
@Override [EOL] public boolean isUnknownType() { [EOL]     for (JSType t : alternates) { [EOL]         if (t.isUnknownType()) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 247,255
@Override [EOL] public boolean isStruct() { [EOL]     for (JSType typ : getAlternates()) { [EOL]         if (typ.isStruct()) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 257,265
@Override [EOL] public boolean isDict() { [EOL]     for (JSType typ : getAlternates()) { [EOL]         if (typ.isDict()) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 267,275
@Override [EOL] public JSType getLeastSupertype(JSType that) { [EOL]     if (!that.isUnknownType() && !that.isUnionType()) { [EOL]         for (JSType alternate : alternates) { [EOL]             if (!alternate.isUnknownType() && that.isSubtype(alternate)) { [EOL]                 return this; [EOL]             } [EOL]         } [EOL]     } [EOL]     return getLeastSupertype(this, that); [EOL] } <line_num>: 277,288
JSType meet(JSType that) { [EOL]     UnionTypeBuilder builder = new UnionTypeBuilder(registry); [EOL]     for (JSType alternate : alternates) { [EOL]         if (alternate.isSubtype(that)) { [EOL]             builder.addAlternate(alternate); [EOL]         } [EOL]     } [EOL]     if (that.isUnionType()) { [EOL]         for (JSType otherAlternate : that.toMaybeUnionType().alternates) { [EOL]             if (otherAlternate.isSubtype(this)) { [EOL]                 builder.addAlternate(otherAlternate); [EOL]             } [EOL]         } [EOL]     } else if (that.isSubtype(this)) { [EOL]         builder.addAlternate(that); [EOL]     } [EOL]     JSType result = builder.build(); [EOL]     if (!result.isNoType()) { [EOL]         return result; [EOL]     } else if (this.isObject() && (that.isObject() && !that.isNoType())) { [EOL]         return getNativeType(JSTypeNative.NO_OBJECT_TYPE); [EOL]     } else { [EOL]         return getNativeType(JSTypeNative.NO_TYPE); [EOL]     } [EOL] } <line_num>: 290,315
boolean checkUnionEquivalenceHelper(UnionType that, EquivalenceMethod eqMethod) { [EOL]     if (eqMethod == EquivalenceMethod.IDENTITY && alternates.size() != that.alternates.size()) { [EOL]         return false; [EOL]     } [EOL]     for (JSType alternate : that.alternates) { [EOL]         if (!hasAlternate(alternate, eqMethod)) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 321,333
private boolean hasAlternate(JSType type, EquivalenceMethod eqMethod) { [EOL]     for (JSType alternate : alternates) { [EOL]         if (alternate.checkEquivalenceHelper(type, eqMethod)) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 335,342
@Override [EOL] public boolean hasProperty(String pname) { [EOL]     for (JSType alternate : alternates) { [EOL]         if (alternate.hasProperty(pname)) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 344,352
@Override [EOL] public int hashCode() { [EOL]     return this.hashcode; [EOL] } <line_num>: 354,357
@Override [EOL] public UnionType toMaybeUnionType() { [EOL]     return this; [EOL] } <line_num>: 359,362
@Override [EOL] public boolean isObject() { [EOL]     for (JSType alternate : alternates) { [EOL]         if (!alternate.isObject()) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 364,372
public boolean contains(JSType type) { [EOL]     for (JSType alt : alternates) { [EOL]         if (alt.isEquivalentTo(type)) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 382,389
public JSType getRestrictedUnion(JSType type) { [EOL]     UnionTypeBuilder restricted = new UnionTypeBuilder(registry); [EOL]     for (JSType t : alternates) { [EOL]         if (t.isUnknownType() || t.isNoResolvedType() || !t.isSubtype(type)) { [EOL]             restricted.addAlternate(t); [EOL]         } [EOL]     } [EOL]     return restricted.build(); [EOL] } <line_num>: 405,414
@Override [EOL] String toStringHelper(boolean forAnnotations) { [EOL]     StringBuilder result = new StringBuilder(); [EOL]     boolean firstAlternate = true; [EOL]     result.append("("); [EOL]     SortedSet<JSType> sorted = new TreeSet<JSType>(ALPHA); [EOL]     sorted.addAll(alternates); [EOL]     for (JSType t : sorted) { [EOL]         if (!firstAlternate) { [EOL]             result.append("|"); [EOL]         } [EOL]         result.append(t.toStringHelper(forAnnotations)); [EOL]         firstAlternate = false; [EOL]     } [EOL]     result.append(")"); [EOL]     return result.toString(); [EOL] } <line_num>: 416,432
@Override [EOL] public boolean isSubtype(JSType that) { [EOL]     if (that.isUnknownType()) { [EOL]         return true; [EOL]     } [EOL]     if (that.isAllType()) { [EOL]         return true; [EOL]     } [EOL]     for (JSType element : alternates) { [EOL]         if (!element.isSubtype(that)) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 434,450
@Override [EOL] public JSType getRestrictedTypeGivenToBooleanOutcome(boolean outcome) { [EOL]     UnionTypeBuilder restricted = new UnionTypeBuilder(registry); [EOL]     for (JSType element : alternates) { [EOL]         restricted.addAlternate(element.getRestrictedTypeGivenToBooleanOutcome(outcome)); [EOL]     } [EOL]     return restricted.build(); [EOL] } <line_num>: 452,461
@Override [EOL] public BooleanLiteralSet getPossibleToBooleanOutcomes() { [EOL]     BooleanLiteralSet literals = BooleanLiteralSet.EMPTY; [EOL]     for (JSType element : alternates) { [EOL]         literals = literals.union(element.getPossibleToBooleanOutcomes()); [EOL]         if (literals == BooleanLiteralSet.BOTH) { [EOL]             break; [EOL]         } [EOL]     } [EOL]     return literals; [EOL] } <line_num>: 463,473
@Override [EOL] public TypePair getTypesUnderEquality(JSType that) { [EOL]     UnionTypeBuilder thisRestricted = new UnionTypeBuilder(registry); [EOL]     UnionTypeBuilder thatRestricted = new UnionTypeBuilder(registry); [EOL]     for (JSType element : alternates) { [EOL]         TypePair p = element.getTypesUnderEquality(that); [EOL]         if (p.typeA != null) { [EOL]             thisRestricted.addAlternate(p.typeA); [EOL]         } [EOL]         if (p.typeB != null) { [EOL]             thatRestricted.addAlternate(p.typeB); [EOL]         } [EOL]     } [EOL]     return new TypePair(thisRestricted.build(), thatRestricted.build()); [EOL] } <line_num>: 475,491
@Override [EOL] public TypePair getTypesUnderInequality(JSType that) { [EOL]     UnionTypeBuilder thisRestricted = new UnionTypeBuilder(registry); [EOL]     UnionTypeBuilder thatRestricted = new UnionTypeBuilder(registry); [EOL]     for (JSType element : alternates) { [EOL]         TypePair p = element.getTypesUnderInequality(that); [EOL]         if (p.typeA != null) { [EOL]             thisRestricted.addAlternate(p.typeA); [EOL]         } [EOL]         if (p.typeB != null) { [EOL]             thatRestricted.addAlternate(p.typeB); [EOL]         } [EOL]     } [EOL]     return new TypePair(thisRestricted.build(), thatRestricted.build()); [EOL] } <line_num>: 493,509
@Override [EOL] public TypePair getTypesUnderShallowInequality(JSType that) { [EOL]     UnionTypeBuilder thisRestricted = new UnionTypeBuilder(registry); [EOL]     UnionTypeBuilder thatRestricted = new UnionTypeBuilder(registry); [EOL]     for (JSType element : alternates) { [EOL]         TypePair p = element.getTypesUnderShallowInequality(that); [EOL]         if (p.typeA != null) { [EOL]             thisRestricted.addAlternate(p.typeA); [EOL]         } [EOL]         if (p.typeB != null) { [EOL]             thatRestricted.addAlternate(p.typeB); [EOL]         } [EOL]     } [EOL]     return new TypePair(thisRestricted.build(), thatRestricted.build()); [EOL] } <line_num>: 511,527
@Override [EOL] public <T> T visit(Visitor<T> visitor) { [EOL]     return visitor.caseUnionType(this); [EOL] } <line_num>: 529,532
@Override [EOL] <T> T visit(RelationshipVisitor<T> visitor, JSType that) { [EOL]     return visitor.caseUnionType(this, that); [EOL] } <line_num>: 534,536
@Override [EOL] JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) { [EOL]     setResolvedTypeInternal(this); [EOL]     boolean changed = false; [EOL]     ImmutableList.Builder<JSType> resolvedTypes = ImmutableList.builder(); [EOL]     for (JSType alternate : alternates) { [EOL]         JSType newAlternate = alternate.resolve(t, scope); [EOL]         changed |= (alternate != newAlternate); [EOL]         resolvedTypes.add(alternate); [EOL]     } [EOL]     if (changed) { [EOL]         Collection<JSType> newAlternates = resolvedTypes.build(); [EOL]         Preconditions.checkState(newAlternates.hashCode() == this.hashcode); [EOL]         alternates = newAlternates; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 538,556
@Override [EOL] public String toDebugHashCodeString() { [EOL]     List<String> hashCodes = Lists.newArrayList(); [EOL]     for (JSType a : alternates) { [EOL]         hashCodes.add(a.toDebugHashCodeString()); [EOL]     } [EOL]     return "{(" + Joiner.on(",").join(hashCodes) + ")}"; [EOL] } <line_num>: 558,565
@Override [EOL] public boolean setValidator(Predicate<JSType> validator) { [EOL]     for (JSType a : alternates) { [EOL]         a.setValidator(validator); [EOL]     } [EOL]     return true; [EOL] } <line_num>: 567,573
@Override [EOL] public JSType collapseUnion() { [EOL]     JSType currentValue = null; [EOL]     ObjectType currentCommonSuper = null; [EOL]     for (JSType a : alternates) { [EOL]         if (a.isUnknownType()) { [EOL]             return getNativeType(JSTypeNative.UNKNOWN_TYPE); [EOL]         } [EOL]         ObjectType obj = a.toObjectType(); [EOL]         if (obj == null) { [EOL]             if (currentValue == null && currentCommonSuper == null) { [EOL]                 currentValue = a; [EOL]             } else { [EOL]                 return getNativeType(JSTypeNative.ALL_TYPE); [EOL]             } [EOL]         } else if (currentValue != null) { [EOL]             return getNativeType(JSTypeNative.ALL_TYPE); [EOL]         } else if (currentCommonSuper == null) { [EOL]             currentCommonSuper = obj; [EOL]         } else { [EOL]             currentCommonSuper = registry.findCommonSuperObject(currentCommonSuper, obj); [EOL]         } [EOL]     } [EOL]     return currentCommonSuper; [EOL] } <line_num>: 575,604
@Override [EOL] public void matchConstraint(JSType constraint) { [EOL]     for (JSType alternate : alternates) { [EOL]         alternate.matchConstraint(constraint); [EOL]     } [EOL] } <line_num>: 606,611
@Override [EOL] public boolean hasAnyTemplateTypesInternal() { [EOL]     for (JSType alternate : alternates) { [EOL]         if (alternate.hasAnyTemplateTypes()) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 613,621
