@Override [EOL] public Boolean caseUnknownType(JSType thisType, JSType thatType) { [EOL]     return true; [EOL] } <line_num>: 47,50
@Override [EOL] public Boolean caseNoType(JSType thatType) { [EOL]     return true; [EOL] } <line_num>: 52,55
@Override [EOL] public Boolean caseNoObjectType(JSType thatType) { [EOL]     return true; [EOL] } <line_num>: 57,60
@Override [EOL] public Boolean caseAllType(JSType thatType) { [EOL]     return true; [EOL] } <line_num>: 62,65
boolean canCastToUnion(JSType thisType, UnionType unionType) { [EOL]     for (JSType type : unionType.getAlternates()) { [EOL]         if (thisType.visit(this, type)) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 67,74
boolean canCastToFunction(JSType thisType, FunctionType functionType) { [EOL]     if (thisType.isFunctionType()) { [EOL]         return true; [EOL]     } else { [EOL]         return thisType.isSubtype(functionType) || functionType.isSubtype(thisType); [EOL]     } [EOL] } <line_num>: 76,84
private boolean isInterface(JSType type) { [EOL]     ObjectType objType = type.toObjectType(); [EOL]     if (objType != null) { [EOL]         JSType constructor = objType.getConstructor(); [EOL]         return constructor != null && constructor.isInterface(); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 86,93
Boolean castCastToHelper(JSType thisType, JSType thatType) { [EOL]     if (thatType.isUnknownType() || thatType.isAllType() || thatType.isNoObjectType() || thatType.isNoType()) { [EOL]         return true; [EOL]     } else if (thisType.isRecordType() || thatType.isRecordType()) { [EOL]         return true; [EOL]     } else if (isInterface(thisType) || isInterface(thatType)) { [EOL]         return true; [EOL]     } else if (thatType.isEnumElementType()) { [EOL]         return thisType.visit(this, thatType.toMaybeEnumElementType().getPrimitiveType()); [EOL]     } else if (thatType.isUnionType()) { [EOL]         return canCastToUnion(thisType, thatType.toMaybeUnionType()); [EOL]     } else if (thatType.isFunctionType()) { [EOL]         return canCastToFunction(thisType, thatType.toMaybeFunctionType()); [EOL]     } else if (thatType.isParameterizedType()) { [EOL]         return thisType.visit(this, thatType.toMaybeParameterizedType().getReferencedTypeInternal()); [EOL]     } [EOL]     return thisType.isSubtype(thatType) || thatType.isSubtype(thisType); [EOL] } <line_num>: 95,120
@Override [EOL] public Boolean caseValueType(ValueType thisType, JSType thatType) { [EOL]     return castCastToHelper(thisType, thatType); [EOL] } <line_num>: 122,125
@Override [EOL] public Boolean caseObjectType(ObjectType thisType, JSType thatType) { [EOL]     return castCastToHelper(thisType, thatType); [EOL] } <line_num>: 127,130
@Override [EOL] public Boolean caseFunctionType(FunctionType thisType, JSType thatType) { [EOL]     return castCastToHelper(thisType, thatType); [EOL] } <line_num>: 132,135
@Override [EOL] public Boolean caseUnionType(UnionType thisType, JSType thatType) { [EOL]     boolean visited = false; [EOL]     for (JSType type : thisType.getAlternates()) { [EOL]         if (type.isVoidType() || type.isNullType()) { [EOL]         } else { [EOL]             visited = true; [EOL]             if (type.visit(this, thatType)) { [EOL]                 return true; [EOL]             } [EOL]         } [EOL]     } [EOL]     if (!visited) { [EOL]         JSType NULL_TYPE = thisType.getNativeType(JSTypeNative.NULL_TYPE); [EOL]         JSType VOID_TYPE = thisType.getNativeType(JSTypeNative.VOID_TYPE); [EOL]         return NULL_TYPE.visit(this, thatType) || VOID_TYPE.visit(this, thatType); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 137,162
@Override [EOL] public Boolean caseParameterizedType(ParameterizedType thisType, JSType thatType) { [EOL]     return thisType.getReferencedTypeInternal().visit(this, thatType); [EOL] } <line_num>: 164,170
@Override [EOL] public Boolean caseTemplateType(TemplateType thisType, JSType thatType) { [EOL]     return true; [EOL] } <line_num>: 172,175
@Override [EOL] public Boolean caseEnumElementType(EnumElementType typeType, JSType thatType) { [EOL]     return typeType.getPrimitiveType().visit(this, thatType); [EOL] } <line_num>: 177,181
