public JSDocInfoBuilder(boolean parseDocumentation) { [EOL]     this.currentInfo = new JSDocInfo(parseDocumentation); [EOL]     this.parseDocumentation = parseDocumentation; [EOL] } <line_num>: 69,72
public void recordOriginalCommentString(String sourceComment) { [EOL]     if (parseDocumentation) { [EOL]         currentInfo.setOriginalCommentString(sourceComment); [EOL]     } [EOL] } <line_num>: 78,82
public boolean shouldParseDocumentation() { [EOL]     return parseDocumentation; [EOL] } <line_num>: 84,86
public boolean isPopulated() { [EOL]     return populated; [EOL] } <line_num>: 92,94
public boolean isPopulatedWithFileOverview() { [EOL]     return isPopulated() && (currentInfo.hasFileOverview() || currentInfo.isExterns() || currentInfo.isNoCompile()); [EOL] } <line_num>: 101,105
public boolean isDescriptionRecorded() { [EOL]     return currentInfo.getDescription() != null; [EOL] } <line_num>: 110,112
public JSDocInfo build(Node associatedNode) { [EOL]     if (populated) { [EOL]         JSDocInfo built = currentInfo; [EOL]         built.setAssociatedNode(associatedNode); [EOL]         populateDefaults(built); [EOL]         populated = false; [EOL]         currentInfo = new JSDocInfo(this.parseDocumentation); [EOL]         return built; [EOL]     } else { [EOL]         return null; [EOL]     } [EOL] } <line_num>: 124,135
private static void populateDefaults(JSDocInfo info) { [EOL]     if (info.getVisibility() == null) { [EOL]         info.setVisibility(Visibility.INHERITED); [EOL]     } [EOL] } <line_num>: 138,142
public void markAnnotation(String annotation, int lineno, int charno) { [EOL]     JSDocInfo.Marker marker = currentInfo.addMarker(); [EOL]     if (marker != null) { [EOL]         JSDocInfo.TrimmedStringPosition position = new JSDocInfo.TrimmedStringPosition(); [EOL]         position.setItem(annotation); [EOL]         position.setPositionInformation(lineno, charno, lineno, charno + annotation.length()); [EOL]         marker.setAnnotation(position); [EOL]         populated = true; [EOL]     } [EOL]     currentMarker = marker; [EOL] } <line_num>: 148,162
public void markText(String text, int startLineno, int startCharno, int endLineno, int endCharno) { [EOL]     if (currentMarker != null) { [EOL]         JSDocInfo.StringPosition position = new JSDocInfo.StringPosition(); [EOL]         position.setItem(text); [EOL]         position.setPositionInformation(startLineno, startCharno, endLineno, endCharno); [EOL]         currentMarker.setDescription(position); [EOL]     } [EOL] } <line_num>: 167,176
public void markTypeNode(Node typeNode, int lineno, int startCharno, int endLineno, int endCharno, boolean hasLC) { [EOL]     if (currentMarker != null) { [EOL]         JSDocInfo.TypePosition position = new JSDocInfo.TypePosition(); [EOL]         position.setItem(typeNode); [EOL]         position.setHasBrackets(hasLC); [EOL]         position.setPositionInformation(lineno, startCharno, endLineno, endCharno); [EOL]         currentMarker.setType(position); [EOL]     } [EOL] } <line_num>: 181,191
@Deprecated [EOL] public void markName(String name, int lineno, int charno) { [EOL]     markName(name, null, lineno, charno); [EOL] } <line_num>: 197,200
public void markName(String name, StaticSourceFile file, int lineno, int charno) { [EOL]     if (currentMarker != null) { [EOL]         JSDocInfo.TrimmedStringPosition position = new JSDocInfo.TrimmedStringPosition(); [EOL]         position.setItem(name); [EOL]         position.setPositionInformation(lineno, charno, lineno, charno + name.length()); [EOL]         currentMarker.setName(position); [EOL]         SourcePosition<Node> nodePos = new JSDocInfo.NamePosition(); [EOL]         Node node = Node.newString(Token.NAME, name, lineno, charno); [EOL]         node.setLength(name.length()); [EOL]         node.setStaticSourceFile(file); [EOL]         nodePos.setItem(node); [EOL]         nodePos.setPositionInformation(lineno, charno, lineno, charno + name.length()); [EOL]         currentMarker.setNameNode(nodePos); [EOL]     } [EOL] } <line_num>: 205,232
public boolean recordBlockDescription(String description) { [EOL]     populated = true; [EOL]     return currentInfo.documentBlock(description); [EOL] } <line_num>: 239,242
public boolean recordVisibility(Visibility visibility) { [EOL]     if (currentInfo.getVisibility() == null) { [EOL]         populated = true; [EOL]         currentInfo.setVisibility(visibility); [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 250,258
public boolean recordParameter(String parameterName, JSTypeExpression type) { [EOL]     if (!hasAnySingletonTypeTags() && currentInfo.declareParam(type, parameterName)) { [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 266,274
public boolean recordParameterDescription(String parameterName, String description) { [EOL]     if (currentInfo.documentParam(parameterName, description)) { [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 282,290
public boolean recordTemplateTypeNames(List<String> names) { [EOL]     if (currentInfo.declareTemplateTypeNames(names)) { [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 298,305
public boolean recordThrowType(JSTypeExpression type) { [EOL]     if (!hasAnySingletonTypeTags()) { [EOL]         currentInfo.declareThrows(type); [EOL]         populated = true; [EOL]         return true; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 310,317
public boolean recordThrowDescription(JSTypeExpression type, String description) { [EOL]     if (currentInfo.documentThrows(type, description)) { [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 325,333
public boolean addAuthor(String author) { [EOL]     if (currentInfo.documentAuthor(author)) { [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 339,346
public boolean addReference(String reference) { [EOL]     if (currentInfo.documentReference(reference)) { [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 352,359
public boolean recordConsistentIdGenerator() { [EOL]     if (!currentInfo.isConsistentIdGenerator()) { [EOL]         currentInfo.setConsistentIdGenerator(true); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 369,377
public boolean recordStableIdGenerator() { [EOL]     if (!currentInfo.isStableIdGenerator()) { [EOL]         currentInfo.setStableIdGenerator(true); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 386,394
public boolean recordVersion(String version) { [EOL]     if (currentInfo.documentVersion(version)) { [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 399,406
public boolean recordDeprecationReason(String reason) { [EOL]     if (currentInfo.setDeprecationReason(reason)) { [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 411,418
public boolean recordSuppressions(Set<String> suppressions) { [EOL]     if (currentInfo.setSuppressions(suppressions)) { [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 423,430
public boolean recordModifies(Set<String> modifies) { [EOL]     if (!hasAnySingletonSideEffectTags() && currentInfo.setModifies(modifies)) { [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 435,443
public boolean recordType(JSTypeExpression type) { [EOL]     if (type != null && !hasAnyTypeRelatedTags()) { [EOL]         currentInfo.setType(type); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 451,459
public boolean recordTypedef(JSTypeExpression type) { [EOL]     if (type != null && !hasAnyTypeRelatedTags()) { [EOL]         currentInfo.setTypedefType(type); [EOL]         populated = true; [EOL]         return true; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 465,472
public boolean recordIdGenerator() { [EOL]     if (!currentInfo.isIdGenerator()) { [EOL]         currentInfo.setIdGenerator(true); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 482,490
public boolean recordReturnType(JSTypeExpression jsType) { [EOL]     if (jsType != null && currentInfo.getReturnType() == null && !hasAnySingletonTypeTags()) { [EOL]         currentInfo.setReturnType(jsType); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 498,507
public boolean recordReturnDescription(String description) { [EOL]     if (currentInfo.documentReturn(description)) { [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 515,522
public boolean recordDefineType(JSTypeExpression type) { [EOL]     if (type != null && !currentInfo.isConstant() && !currentInfo.isDefine() && recordType(type)) { [EOL]         currentInfo.setDefine(true); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 531,542
public boolean recordEnumParameterType(JSTypeExpression type) { [EOL]     if (type != null && !hasAnyTypeRelatedTags()) { [EOL]         currentInfo.setEnumParameterType(type); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 550,558
public boolean recordThisType(JSTypeExpression type) { [EOL]     if (type != null && !hasAnySingletonTypeTags() && !currentInfo.hasThisType()) { [EOL]         currentInfo.setThisType(type); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 567,576
public boolean recordBaseType(JSTypeExpression jsType) { [EOL]     if (jsType != null && !hasAnySingletonTypeTags() && !currentInfo.hasBaseType()) { [EOL]         currentInfo.setBaseType(jsType); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 584,593
public boolean recordConstancy() { [EOL]     if (!currentInfo.isConstant()) { [EOL]         currentInfo.setConstant(true); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 602,610
public boolean recordDescription(String description) { [EOL]     if (description != null && currentInfo.getDescription() == null) { [EOL]         currentInfo.setDescription(description); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 618,626
public boolean recordMeaning(String meaning) { [EOL]     if (meaning != null && currentInfo.getMeaning() == null) { [EOL]         currentInfo.setMeaning(meaning); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 634,642
public boolean recordFileOverview(String description) { [EOL]     if (currentInfo.documentFileOverview(description)) { [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 650,657
public boolean recordHiddenness() { [EOL]     if (!currentInfo.isHidden()) { [EOL]         currentInfo.setHidden(true); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 666,674
public boolean recordNoCompile() { [EOL]     if (!currentInfo.isNoCompile()) { [EOL]         currentInfo.setNoCompile(true); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 683,691
public boolean recordNoTypeCheck() { [EOL]     if (!currentInfo.isNoTypeCheck()) { [EOL]         currentInfo.setNoCheck(true); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 700,708
public boolean recordConstructor() { [EOL]     if (!hasAnySingletonTypeTags() && !currentInfo.isConstructor() && !currentInfo.isInterface()) { [EOL]         currentInfo.setConstructor(true); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 718,727
public boolean isConstructorRecorded() { [EOL]     return currentInfo.isConstructor(); [EOL] } <line_num>: 733,735
public boolean recordStruct() { [EOL]     if (hasAnySingletonTypeTags() || currentInfo.isInterface() || currentInfo.makesDicts() || currentInfo.makesStructs()) { [EOL]         return false; [EOL]     } [EOL]     currentInfo.setStruct(); [EOL]     populated = true; [EOL]     return true; [EOL] } <line_num>: 744,752
public boolean recordDict() { [EOL]     if (hasAnySingletonTypeTags() || currentInfo.isInterface() || currentInfo.makesDicts() || currentInfo.makesStructs()) { [EOL]         return false; [EOL]     } [EOL]     currentInfo.setDict(); [EOL]     populated = true; [EOL]     return true; [EOL] } <line_num>: 761,769
public boolean recordJavaDispatch() { [EOL]     if (!currentInfo.isJavaDispatch()) { [EOL]         currentInfo.setJavaDispatch(true); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 779,787
public boolean isJavaDispatch() { [EOL]     return currentInfo.isJavaDispatch(); [EOL] } <line_num>: 793,795
public boolean recordPreserveTry() { [EOL]     if (!currentInfo.shouldPreserveTry()) { [EOL]         currentInfo.setShouldPreserveTry(true); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 801,809
public boolean recordOverride() { [EOL]     if (!currentInfo.isOverride()) { [EOL]         currentInfo.setOverride(true); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 815,823
public boolean recordNoAlias() { [EOL]     if (!currentInfo.isNoAlias()) { [EOL]         currentInfo.setNoAlias(true); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 829,837
public boolean recordDeprecated() { [EOL]     if (!currentInfo.isDeprecated()) { [EOL]         currentInfo.setDeprecated(true); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 843,851
public boolean recordInterface() { [EOL]     if (hasAnySingletonTypeTags() || currentInfo.makesStructs() || currentInfo.makesDicts() || currentInfo.isConstructor() || currentInfo.isInterface()) { [EOL]         return false; [EOL]     } [EOL]     currentInfo.setInterface(true); [EOL]     populated = true; [EOL]     return true; [EOL] } <line_num>: 860,869
public boolean recordExport() { [EOL]     if (!currentInfo.isExport()) { [EOL]         currentInfo.setExport(true); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 875,883
public boolean recordExpose() { [EOL]     if (!currentInfo.isExpose()) { [EOL]         currentInfo.setExpose(true); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 889,897
public boolean recordNoShadow() { [EOL]     if (!currentInfo.isNoShadow()) { [EOL]         currentInfo.setNoShadow(true); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 903,911
public boolean recordImplicitCast() { [EOL]     if (!currentInfo.isImplicitCast()) { [EOL]         currentInfo.setImplicitCast(true); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 917,925
public boolean recordNoSideEffects() { [EOL]     if (!hasAnySingletonSideEffectTags() && !currentInfo.isNoSideEffects()) { [EOL]         currentInfo.setNoSideEffects(true); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 931,940
public boolean recordExterns() { [EOL]     if (!currentInfo.isExterns()) { [EOL]         currentInfo.setExterns(true); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 946,954
public boolean isInterfaceRecorded() { [EOL]     return currentInfo.isInterface(); [EOL] } <line_num>: 960,962
public boolean hasParameter(String name) { [EOL]     return currentInfo.hasParameter(name); [EOL] } <line_num>: 967,969
public boolean recordImplementedInterface(JSTypeExpression interfaceName) { [EOL]     if (currentInfo.addImplementedInterface(interfaceName)) { [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 974,981
public boolean recordExtendedInterface(JSTypeExpression interfaceType) { [EOL]     if (currentInfo.addExtendedInterface(interfaceType)) { [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 986,993
public boolean recordLends(String name) { [EOL]     if (!hasAnyTypeRelatedTags()) { [EOL]         currentInfo.setLendsName(name); [EOL]         populated = true; [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 998,1006
private boolean hasAnyTypeRelatedTags() { [EOL]     return currentInfo.isConstructor() || currentInfo.isInterface() || currentInfo.getParameterCount() > 0 || currentInfo.hasReturnType() || currentInfo.hasBaseType() || currentInfo.getExtendedInterfacesCount() > 0 || currentInfo.getLendsName() != null || currentInfo.hasThisType() || hasAnySingletonTypeTags(); [EOL] } <line_num>: 1012,1022
private boolean hasAnySingletonTypeTags() { [EOL]     return currentInfo.hasType() || currentInfo.hasTypedefType() || currentInfo.hasEnumParameterType(); [EOL] } <line_num>: 1029,1033
private boolean hasAnySingletonSideEffectTags() { [EOL]     return currentInfo.isNoSideEffects() || currentInfo.hasModifies(); [EOL] } <line_num>: 1040,1043
