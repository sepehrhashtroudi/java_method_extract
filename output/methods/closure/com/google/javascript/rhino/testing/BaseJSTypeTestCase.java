@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     errorReporter = new TestErrorReporter(null, null); [EOL]     registry = new JSTypeRegistry(errorReporter); [EOL]     initTypes(); [EOL] } <line_num>: 115,121
protected void initTypes() { [EOL]     ALL_TYPE = registry.getNativeType(JSTypeNative.ALL_TYPE); [EOL]     NO_OBJECT_TYPE = registry.getNativeObjectType(JSTypeNative.NO_OBJECT_TYPE); [EOL]     NO_TYPE = registry.getNativeObjectType(JSTypeNative.NO_TYPE); [EOL]     NO_RESOLVED_TYPE = registry.getNativeObjectType(JSTypeNative.NO_RESOLVED_TYPE); [EOL]     ARRAY_FUNCTION_TYPE = registry.getNativeFunctionType(JSTypeNative.ARRAY_FUNCTION_TYPE); [EOL]     ARRAY_TYPE = registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE); [EOL]     BOOLEAN_OBJECT_FUNCTION_TYPE = registry.getNativeType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE); [EOL]     BOOLEAN_OBJECT_TYPE = registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE); [EOL]     BOOLEAN_TYPE = registry.getNativeType(JSTypeNative.BOOLEAN_TYPE); [EOL]     CHECKED_UNKNOWN_TYPE = registry.getNativeObjectType(JSTypeNative.CHECKED_UNKNOWN_TYPE); [EOL]     DATE_FUNCTION_TYPE = registry.getNativeType(JSTypeNative.DATE_FUNCTION_TYPE); [EOL]     DATE_TYPE = registry.getNativeObjectType(JSTypeNative.DATE_TYPE); [EOL]     ERROR_FUNCTION_TYPE = registry.getNativeType(JSTypeNative.ERROR_FUNCTION_TYPE); [EOL]     ERROR_TYPE = registry.getNativeObjectType(JSTypeNative.ERROR_TYPE); [EOL]     EVAL_ERROR_FUNCTION_TYPE = registry.getNativeType(JSTypeNative.EVAL_ERROR_FUNCTION_TYPE); [EOL]     EVAL_ERROR_TYPE = registry.getNativeObjectType(JSTypeNative.EVAL_ERROR_TYPE); [EOL]     FUNCTION_FUNCTION_TYPE = registry.getNativeFunctionType(JSTypeNative.FUNCTION_FUNCTION_TYPE); [EOL]     FUNCTION_INSTANCE_TYPE = registry.getNativeFunctionType(JSTypeNative.FUNCTION_INSTANCE_TYPE); [EOL]     FUNCTION_PROTOTYPE = registry.getNativeObjectType(JSTypeNative.FUNCTION_PROTOTYPE); [EOL]     GREATEST_FUNCTION_TYPE = registry.getNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE); [EOL]     LEAST_FUNCTION_TYPE = registry.getNativeType(JSTypeNative.LEAST_FUNCTION_TYPE); [EOL]     NULL_TYPE = registry.getNativeType(JSTypeNative.NULL_TYPE); [EOL]     NUMBER_OBJECT_FUNCTION_TYPE = registry.getNativeType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE); [EOL]     NUMBER_OBJECT_TYPE = registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE); [EOL]     NUMBER_STRING_BOOLEAN = registry.getNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN); [EOL]     NUMBER_TYPE = registry.getNativeType(JSTypeNative.NUMBER_TYPE); [EOL]     OBJECT_FUNCTION_TYPE = registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE); [EOL]     NULL_VOID = registry.getNativeType(JSTypeNative.NULL_VOID); [EOL]     OBJECT_NUMBER_STRING = registry.getNativeType(JSTypeNative.OBJECT_NUMBER_STRING); [EOL]     OBJECT_NUMBER_STRING_BOOLEAN = registry.getNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN); [EOL]     OBJECT_PROTOTYPE = registry.getNativeType(JSTypeNative.OBJECT_PROTOTYPE); [EOL]     OBJECT_TYPE = registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE); [EOL]     RANGE_ERROR_FUNCTION_TYPE = registry.getNativeType(JSTypeNative.RANGE_ERROR_FUNCTION_TYPE); [EOL]     RANGE_ERROR_TYPE = registry.getNativeObjectType(JSTypeNative.RANGE_ERROR_TYPE); [EOL]     REFERENCE_ERROR_FUNCTION_TYPE = registry.getNativeType(JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE); [EOL]     REFERENCE_ERROR_TYPE = registry.getNativeObjectType(JSTypeNative.REFERENCE_ERROR_TYPE); [EOL]     REGEXP_FUNCTION_TYPE = registry.getNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE); [EOL]     REGEXP_TYPE = registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE); [EOL]     STRING_OBJECT_FUNCTION_TYPE = registry.getNativeType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE); [EOL]     STRING_OBJECT_TYPE = registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE); [EOL]     STRING_TYPE = registry.getNativeType(JSTypeNative.STRING_TYPE); [EOL]     SYNTAX_ERROR_FUNCTION_TYPE = registry.getNativeType(JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE); [EOL]     SYNTAX_ERROR_TYPE = registry.getNativeObjectType(JSTypeNative.SYNTAX_ERROR_TYPE); [EOL]     TYPE_ERROR_FUNCTION_TYPE = registry.getNativeType(JSTypeNative.TYPE_ERROR_FUNCTION_TYPE); [EOL]     TYPE_ERROR_TYPE = registry.getNativeObjectType(JSTypeNative.TYPE_ERROR_TYPE); [EOL]     U2U_CONSTRUCTOR_TYPE = registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE); [EOL]     U2U_FUNCTION_TYPE = registry.getNativeFunctionType(JSTypeNative.U2U_FUNCTION_TYPE); [EOL]     UNKNOWN_TYPE = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE); [EOL]     URI_ERROR_FUNCTION_TYPE = registry.getNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE); [EOL]     URI_ERROR_TYPE = registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE); [EOL]     VOID_TYPE = registry.getNativeType(JSTypeNative.VOID_TYPE); [EOL]     addNativeProperties(registry); [EOL]     NATIVE_PROPERTIES_COUNT = OBJECT_TYPE.getPropertiesCount(); [EOL] } <line_num>: 123,230
public static void addNativeProperties(JSTypeRegistry registry) { [EOL]     JSType booleanType = registry.getNativeType(JSTypeNative.BOOLEAN_TYPE); [EOL]     JSType numberType = registry.getNativeType(JSTypeNative.NUMBER_TYPE); [EOL]     JSType stringType = registry.getNativeType(JSTypeNative.STRING_TYPE); [EOL]     JSType unknownType = registry.getNativeType(JSTypeNative.UNKNOWN_TYPE); [EOL]     ObjectType objectType = registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE); [EOL]     ObjectType arrayType = registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE); [EOL]     ObjectType dateType = registry.getNativeObjectType(JSTypeNative.DATE_TYPE); [EOL]     ObjectType regexpType = registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE); [EOL]     ObjectType booleanObjectType = registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE); [EOL]     ObjectType numberObjectType = registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE); [EOL]     ObjectType stringObjectType = registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE); [EOL]     ObjectType objectPrototype = registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype(); [EOL]     addMethod(registry, objectPrototype, "constructor", objectType); [EOL]     addMethod(registry, objectPrototype, "toString", stringType); [EOL]     addMethod(registry, objectPrototype, "toLocaleString", stringType); [EOL]     addMethod(registry, objectPrototype, "valueOf", unknownType); [EOL]     addMethod(registry, objectPrototype, "hasOwnProperty", booleanType); [EOL]     addMethod(registry, objectPrototype, "isPrototypeOf", booleanType); [EOL]     addMethod(registry, objectPrototype, "propertyIsEnumerable", booleanType); [EOL]     ObjectType arrayPrototype = registry.getNativeFunctionType(JSTypeNative.ARRAY_FUNCTION_TYPE).getPrototype(); [EOL]     addMethod(registry, arrayPrototype, "constructor", arrayType); [EOL]     addMethod(registry, arrayPrototype, "toString", stringType); [EOL]     addMethod(registry, arrayPrototype, "toLocaleString", stringType); [EOL]     addMethod(registry, arrayPrototype, "concat", arrayType); [EOL]     addMethod(registry, arrayPrototype, "join", stringType); [EOL]     addMethod(registry, arrayPrototype, "pop", unknownType); [EOL]     addMethod(registry, arrayPrototype, "push", numberType); [EOL]     addMethod(registry, arrayPrototype, "reverse", arrayType); [EOL]     addMethod(registry, arrayPrototype, "shift", unknownType); [EOL]     addMethod(registry, arrayPrototype, "slice", arrayType); [EOL]     addMethod(registry, arrayPrototype, "sort", arrayType); [EOL]     addMethod(registry, arrayPrototype, "splice", arrayType); [EOL]     addMethod(registry, arrayPrototype, "unshift", numberType); [EOL]     arrayType.defineDeclaredProperty("length", numberType, null); [EOL]     ObjectType booleanPrototype = registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(); [EOL]     addMethod(registry, booleanPrototype, "constructor", booleanObjectType); [EOL]     addMethod(registry, booleanPrototype, "toString", stringType); [EOL]     addMethod(registry, booleanPrototype, "valueOf", booleanType); [EOL]     ObjectType datePrototype = registry.getNativeFunctionType(JSTypeNative.DATE_FUNCTION_TYPE).getPrototype(); [EOL]     addMethod(registry, datePrototype, "constructor", dateType); [EOL]     addMethod(registry, datePrototype, "toString", stringType); [EOL]     addMethod(registry, datePrototype, "toDateString", stringType); [EOL]     addMethod(registry, datePrototype, "toTimeString", stringType); [EOL]     addMethod(registry, datePrototype, "toLocaleString", stringType); [EOL]     addMethod(registry, datePrototype, "toLocaleDateString", stringType); [EOL]     addMethod(registry, datePrototype, "toLocaleTimeString", stringType); [EOL]     addMethod(registry, datePrototype, "valueOf", numberType); [EOL]     addMethod(registry, datePrototype, "getTime", numberType); [EOL]     addMethod(registry, datePrototype, "getFullYear", numberType); [EOL]     addMethod(registry, datePrototype, "getUTCFullYear", numberType); [EOL]     addMethod(registry, datePrototype, "getMonth", numberType); [EOL]     addMethod(registry, datePrototype, "getUTCMonth", numberType); [EOL]     addMethod(registry, datePrototype, "getDate", numberType); [EOL]     addMethod(registry, datePrototype, "getUTCDate", numberType); [EOL]     addMethod(registry, datePrototype, "getDay", numberType); [EOL]     addMethod(registry, datePrototype, "getUTCDay", numberType); [EOL]     addMethod(registry, datePrototype, "getHours", numberType); [EOL]     addMethod(registry, datePrototype, "getUTCHours", numberType); [EOL]     addMethod(registry, datePrototype, "getMinutes", numberType); [EOL]     addMethod(registry, datePrototype, "getUTCMinutes", numberType); [EOL]     addMethod(registry, datePrototype, "getSeconds", numberType); [EOL]     addMethod(registry, datePrototype, "getUTCSeconds", numberType); [EOL]     addMethod(registry, datePrototype, "getMilliseconds", numberType); [EOL]     addMethod(registry, datePrototype, "getUTCMilliseconds", numberType); [EOL]     addMethod(registry, datePrototype, "getTimezoneOffset", numberType); [EOL]     addMethod(registry, datePrototype, "setTime", numberType); [EOL]     addMethod(registry, datePrototype, "setMilliseconds", numberType); [EOL]     addMethod(registry, datePrototype, "setUTCMilliseconds", numberType); [EOL]     addMethod(registry, datePrototype, "setSeconds", numberType); [EOL]     addMethod(registry, datePrototype, "setUTCSeconds", numberType); [EOL]     addMethod(registry, datePrototype, "setMinutes", numberType); [EOL]     addMethod(registry, datePrototype, "setUTCMinutes", numberType); [EOL]     addMethod(registry, datePrototype, "setHours", numberType); [EOL]     addMethod(registry, datePrototype, "setUTCHours", numberType); [EOL]     addMethod(registry, datePrototype, "setDate", numberType); [EOL]     addMethod(registry, datePrototype, "setUTCDate", numberType); [EOL]     addMethod(registry, datePrototype, "setMonth", numberType); [EOL]     addMethod(registry, datePrototype, "setUTCMonth", numberType); [EOL]     addMethod(registry, datePrototype, "setFullYear", numberType); [EOL]     addMethod(registry, datePrototype, "setUTCFullYear", numberType); [EOL]     addMethod(registry, datePrototype, "toUTCString", stringType); [EOL]     addMethod(registry, datePrototype, "toGMTString", stringType); [EOL]     ObjectType numberPrototype = registry.getNativeFunctionType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE).getPrototype(); [EOL]     addMethod(registry, numberPrototype, "constructor", numberObjectType); [EOL]     addMethod(registry, numberPrototype, "toString", stringType); [EOL]     addMethod(registry, numberPrototype, "toLocaleString", stringType); [EOL]     addMethod(registry, numberPrototype, "valueOf", numberType); [EOL]     addMethod(registry, numberPrototype, "toFixed", stringType); [EOL]     addMethod(registry, numberPrototype, "toExponential", stringType); [EOL]     addMethod(registry, numberPrototype, "toPrecision", stringType); [EOL]     ObjectType regexpPrototype = registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype(); [EOL]     addMethod(registry, regexpPrototype, "constructor", regexpType); [EOL]     addMethod(registry, regexpPrototype, "exec", registry.createNullableType(arrayType)); [EOL]     addMethod(registry, regexpPrototype, "test", booleanType); [EOL]     addMethod(registry, regexpPrototype, "toString", stringType); [EOL]     regexpType.defineDeclaredProperty("source", stringType, null); [EOL]     regexpType.defineDeclaredProperty("global", booleanType, null); [EOL]     regexpType.defineDeclaredProperty("ignoreCase", booleanType, null); [EOL]     regexpType.defineDeclaredProperty("multiline", booleanType, null); [EOL]     regexpType.defineDeclaredProperty("lastIndex", numberType, null); [EOL]     ObjectType stringPrototype = registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype(); [EOL]     addMethod(registry, stringPrototype, "constructor", stringObjectType); [EOL]     addMethod(registry, stringPrototype, "toString", stringType); [EOL]     addMethod(registry, stringPrototype, "valueOf", stringType); [EOL]     addMethod(registry, stringPrototype, "charAt", stringType); [EOL]     addMethod(registry, stringPrototype, "charCodeAt", numberType); [EOL]     addMethod(registry, stringPrototype, "concat", stringType); [EOL]     addMethod(registry, stringPrototype, "indexOf", numberType); [EOL]     addMethod(registry, stringPrototype, "lastIndexOf", numberType); [EOL]     addMethod(registry, stringPrototype, "localeCompare", numberType); [EOL]     addMethod(registry, stringPrototype, "match", registry.createNullableType(arrayType)); [EOL]     addMethod(registry, stringPrototype, "replace", stringType); [EOL]     addMethod(registry, stringPrototype, "search", numberType); [EOL]     addMethod(registry, stringPrototype, "slice", stringType); [EOL]     addMethod(registry, stringPrototype, "split", arrayType); [EOL]     addMethod(registry, stringPrototype, "substring", stringType); [EOL]     addMethod(registry, stringPrototype, "toLowerCase", stringType); [EOL]     addMethod(registry, stringPrototype, "toLocaleLowerCase", stringType); [EOL]     addMethod(registry, stringPrototype, "toUpperCase", stringType); [EOL]     addMethod(registry, stringPrototype, "toLocaleUpperCase", stringType); [EOL]     stringObjectType.defineDeclaredProperty("length", numberType, null); [EOL] } <line_num>: 233,386
private static void addMethod(JSTypeRegistry registry, ObjectType receivingType, String methodName, JSType returnType) { [EOL]     receivingType.defineDeclaredProperty(methodName, new FunctionBuilder(registry).withReturnType(returnType).build(), null); [EOL] } <line_num>: 388,394
protected JSType createUnionType(JSType... variants) { [EOL]     return registry.createUnionType(variants); [EOL] } <line_num>: 396,398
protected RecordTypeBuilder createRecordTypeBuilder() { [EOL]     return new RecordTypeBuilder(registry); [EOL] } <line_num>: 400,402
protected JSType createNullableType(JSType type) { [EOL]     return registry.createNullableType(type); [EOL] } <line_num>: 404,406
protected JSType createOptionalType(JSType type) { [EOL]     return registry.createOptionalType(type); [EOL] } <line_num>: 408,410
protected JSType createTemplatizedType(JSType baseType, ImmutableList<JSType> templatizedTypes) { [EOL]     return registry.createTemplatizedType(baseType, templatizedTypes); [EOL] } <line_num>: 412,415
protected JSType createParameterizedType(ObjectType type, JSType typeParameter) { [EOL]     return registry.createParameterizedType(type, typeParameter); [EOL] } <line_num>: 417,420
protected void assertTypeEquals(JSType expected, Node actual) { [EOL]     assertTypeEquals(expected, new JSTypeExpression(actual, "")); [EOL] } <line_num>: 426,428
protected void assertTypeEquals(JSType expected, JSTypeExpression actual) { [EOL]     assertEquals(expected, resolve(actual)); [EOL] } <line_num>: 433,435
protected JSType resolve(JSTypeExpression n, String... warnings) { [EOL]     errorReporter.setWarnings(warnings); [EOL]     return n.evaluate(null, registry); [EOL] } <line_num>: 440,443
protected final void assertTypeEquals(JSType a, JSType b) { [EOL]     Asserts.assertTypeEquals(a, b); [EOL] } <line_num>: 594,596
protected final void assertTypeEquals(String msg, JSType a, JSType b) { [EOL]     Asserts.assertTypeEquals(msg, a, b); [EOL] } <line_num>: 598,600
protected final void assertTypeNotEquals(JSType a, JSType b) { [EOL]     Asserts.assertTypeNotEquals(a, b); [EOL] } <line_num>: 602,604
protected final void assertTypeNotEquals(String msg, JSType a, JSType b) { [EOL]     Asserts.assertTypeNotEquals(msg, a, b); [EOL] } <line_num>: 606,608
protected final ParameterizedType parameterize(ObjectType objType, JSType t) { [EOL]     return registry.createParameterizedType(objType, t); [EOL] } <line_num>: 610,612
