RemoveUnusedClassProperties(AbstractCompiler compiler) { [EOL]     this.compiler = compiler; [EOL] } <line_num>: 45,47
@Override [EOL] public void process(Node externs, Node root) { [EOL]     NodeTraversal.traverseRoots(compiler, this, externs, root); [EOL]     removeUnused(); [EOL] } <line_num>: 49,53
private void removeUnused() { [EOL]     for (Node n : candidates) { [EOL]         Preconditions.checkState(n.isGetProp()); [EOL]         if (!used.contains(n.getLastChild().getString())) { [EOL]             Node parent = n.getParent(); [EOL]             if (NodeUtil.isAssignmentOp(parent)) { [EOL]                 Node assign = parent; [EOL]                 Preconditions.checkState(assign != null && NodeUtil.isAssignmentOp(assign) && assign.getFirstChild() == n); [EOL]                 assign.getParent().replaceChild(assign, assign.getLastChild().detachFromParent()); [EOL]             } else if (parent.isInc() || parent.isDec()) { [EOL]                 parent.getParent().replaceChild(parent, IR.number(0)); [EOL]             } else { [EOL]                 throw new IllegalStateException("unexpected: " + parent); [EOL]             } [EOL]             compiler.reportCodeChange(); [EOL]         } [EOL]     } [EOL] } <line_num>: 55,76
@Override [EOL] public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { [EOL]     if (n.isScript()) { [EOL]         this.inExterns = n.getStaticSourceFile().isExtern(); [EOL]     } [EOL]     return true; [EOL] } <line_num>: 78,84
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     switch(n.getType()) { [EOL]         case Token.GETPROP: [EOL]             { [EOL]                 String propName = n.getLastChild().getString(); [EOL]                 if (inExterns || isPinningPropertyUse(n)) { [EOL]                     used.add(propName); [EOL]                 } else { [EOL]                     if (n.getFirstChild().isThis()) { [EOL]                         candidates.add(n); [EOL]                     } [EOL]                 } [EOL]                 break; [EOL]             } [EOL]         case Token.CALL: [EOL]             Node target = n.getFirstChild(); [EOL]             if (n.hasMoreThanOneChild() && target.isName() && target.getString().equals(NodeUtil.JSC_PROPERTY_NAME_FN)) { [EOL]                 Node propName = target.getNext(); [EOL]                 if (propName.isString()) { [EOL]                     used.add(propName.getString()); [EOL]                 } [EOL]             } [EOL]             break; [EOL]     } [EOL] } <line_num>: 86,116
private boolean isPinningPropertyUse(Node n) { [EOL]     Node parent = n.getParent(); [EOL]     if (n == parent.getFirstChild()) { [EOL]         if (parent.isAssign()) { [EOL]             return false; [EOL]         } else if (NodeUtil.isAssignmentOp(parent) || parent.isInc() || parent.isDec()) { [EOL]             return NodeUtil.isExpressionResultUsed(parent); [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 121,145
