public LoggerErrorManager(MessageFormatter formatter, Logger logger) { [EOL]     this.formatter = formatter; [EOL]     this.logger = logger; [EOL] } <line_num>: 37,40
public LoggerErrorManager(Logger logger) { [EOL]     this(ErrorFormat.SOURCELESS.toFormatter(null, false), logger); [EOL] } <line_num>: 45,47
@Override [EOL] public void println(CheckLevel level, JSError error) { [EOL]     switch(level) { [EOL]         case ERROR: [EOL]             logger.severe(error.format(level, formatter)); [EOL]             break; [EOL]         case WARNING: [EOL]             logger.warning(error.format(level, formatter)); [EOL]             break; [EOL]         case OFF: [EOL]             break; [EOL]     } [EOL] } <line_num>: 49,61
@Override [EOL] protected void printSummary() { [EOL]     Level level = (getErrorCount() + getWarningCount() == 0) ? Level.INFO : Level.WARNING; [EOL]     if (getTypedPercent() > 0.0) { [EOL]         logger.log(level, "{0} error(s), {1} warning(s), {2,number,#.#}% typed", new Object[] { getErrorCount(), getWarningCount(), getTypedPercent() }); [EOL]     } else { [EOL]         if (getErrorCount() + getWarningCount() > 0) { [EOL]             logger.log(level, "{0} error(s), {1} warning(s)", new Object[] { getErrorCount(), getWarningCount() }); [EOL]         } [EOL]     } [EOL] } <line_num>: 63,76
