ProcessCommonJSModules(AbstractCompiler compiler, String filenamePrefix) { [EOL]     this(compiler, filenamePrefix, true); [EOL] } <line_num>: 53,55
ProcessCommonJSModules(AbstractCompiler compiler, String filenamePrefix, boolean reportDependencies) { [EOL]     this.compiler = compiler; [EOL]     this.filenamePrefix = filenamePrefix.endsWith(MODULE_SLASH) ? filenamePrefix : filenamePrefix + MODULE_SLASH; [EOL]     this.reportDependencies = reportDependencies; [EOL] } <line_num>: 57,63
SuffixVarsCallback(String suffix) { [EOL]     this.suffix = suffix; [EOL] } <line_num>: 263,265
@Override [EOL] public void process(Node externs, Node root) { [EOL]     NodeTraversal.traverse(compiler, root, new ProcessCommonJsModulesCallback()); [EOL] } <line_num>: 65,69
String guessCJSModuleName(String filename) { [EOL]     return toModuleName(normalizeSourceName(filename)); [EOL] } <line_num>: 71,73
JSModule getModule() { [EOL]     return module; [EOL] } <line_num>: 79,81
public static String toModuleName(String filename) { [EOL]     return MODULE_NAME_PREFIX + filename.replaceAll("^\\." + Pattern.quote(MODULE_SLASH), "").replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR).replaceAll("\\.js$", "").replaceAll("-", "_"); [EOL] } <line_num>: 88,93
public static String toModuleName(String requiredFilename, String currentFilename) { [EOL]     requiredFilename = requiredFilename.replaceAll("\\.js$", ""); [EOL]     currentFilename = currentFilename.replaceAll("\\.js$", ""); [EOL]     if (requiredFilename.startsWith("." + MODULE_SLASH) || requiredFilename.startsWith(".." + MODULE_SLASH)) { [EOL]         try { [EOL]             requiredFilename = (new URI(currentFilename)).resolve(new URI(requiredFilename)).toString(); [EOL]         } catch (URISyntaxException e) { [EOL]             throw new RuntimeException(e); [EOL]         } [EOL]     } [EOL]     return toModuleName(requiredFilename); [EOL] } <line_num>: 99,114
private String normalizeSourceName(String filename) { [EOL]     filename = filename.replace("\\", "/"); [EOL]     if (filename.indexOf(filenamePrefix) == 0) { [EOL]         filename = filename.substring(filenamePrefix.length()); [EOL]     } [EOL]     return filename; [EOL] } <line_num>: 116,126
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (n.isCall() && n.getChildCount() == 2 && "require".equals(n.getFirstChild().getQualifiedName()) && n.getChildAtIndex(1).isString()) { [EOL]         visitRequireCall(t, n, parent); [EOL]     } [EOL]     if (n.isScript()) { [EOL]         scriptNodeCount++; [EOL]         visitScript(t, n); [EOL]     } [EOL]     if (n.isGetProp() && "module.exports".equals(n.getQualifiedName())) { [EOL]         visitModuleExports(n); [EOL]     } [EOL] } <line_num>: 137,154
private void visitRequireCall(NodeTraversal t, Node require, Node parent) { [EOL]     String moduleName = toModuleName(require.getChildAtIndex(1).getString(), normalizeSourceName(t.getSourceName())); [EOL]     Node moduleRef = IR.name(moduleName).srcref(require); [EOL]     parent.replaceChild(require, moduleRef); [EOL]     Node script = getCurrentScriptNode(parent); [EOL]     if (reportDependencies) { [EOL]         t.getInput().addRequire(moduleName); [EOL]     } [EOL]     script.addChildToFront(IR.exprResult(IR.call(IR.getprop(IR.name("goog"), IR.string("require")), IR.string(moduleName))).copyInformationFromForTree(require)); [EOL]     compiler.reportCodeChange(); [EOL] } <line_num>: 160,174
private void visitScript(NodeTraversal t, Node script) { [EOL]     Preconditions.checkArgument(scriptNodeCount == 1, "ProcessCommonJSModules supports only one invocation per " + "CompilerInput / script node"); [EOL]     String moduleName = guessCJSModuleName(script.getSourceFileName()); [EOL]     script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit()).copyInformationFromForTree(script)); [EOL]     if (reportDependencies) { [EOL]         CompilerInput ci = t.getInput(); [EOL]         ci.addProvide(moduleName); [EOL]         JSModule m = new JSModule(moduleName); [EOL]         m.addAndOverrideModule(ci); [EOL]         module = m; [EOL]     } [EOL]     script.addChildToFront(IR.exprResult(IR.call(IR.getprop(IR.name("goog"), IR.string("provide")), IR.string(moduleName))).copyInformationFromForTree(script)); [EOL]     emitOptionalModuleExportsOverride(script, moduleName); [EOL]     NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(moduleName)); [EOL]     compiler.reportCodeChange(); [EOL] } <line_num>: 180,205
private void emitOptionalModuleExportsOverride(Node script, String moduleName) { [EOL]     if (!modulesWithExports.contains(moduleName)) { [EOL]         return; [EOL]     } [EOL]     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string("module$exports")); [EOL]     script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script)); [EOL] } <line_num>: 212,225
private void visitModuleExports(Node prop) { [EOL]     String moduleName = guessCJSModuleName(prop.getSourceFileName()); [EOL]     Node module = prop.getChildAtIndex(0); [EOL]     module.putProp(Node.ORIGINALNAME_PROP, "module"); [EOL]     module.setString(moduleName); [EOL]     Node exports = prop.getChildAtIndex(1); [EOL]     exports.putProp(Node.ORIGINALNAME_PROP, "exports"); [EOL]     exports.setString("module$exports"); [EOL]     modulesWithExports.add(moduleName); [EOL] } <line_num>: 230,239
private Node getCurrentScriptNode(Node n) { [EOL]     while (true) { [EOL]         if (n.isScript()) { [EOL]             return n; [EOL]         } [EOL]         n = n.getParent(); [EOL]     } [EOL] } <line_num>: 244,251
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (n.isName()) { [EOL]         String name = n.getString(); [EOL]         if (suffix.equals(name)) { [EOL]             return; [EOL]         } [EOL]         if (EXPORTS.equals(name)) { [EOL]             n.setString(suffix); [EOL]             n.putProp(Node.ORIGINALNAME_PROP, EXPORTS); [EOL]         } else { [EOL]             Scope.Var var = t.getScope().getVar(name); [EOL]             if (var != null && var.isGlobal()) { [EOL]                 n.setString(name + "$$" + suffix); [EOL]                 n.putProp(Node.ORIGINALNAME_PROP, name); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 267,285
