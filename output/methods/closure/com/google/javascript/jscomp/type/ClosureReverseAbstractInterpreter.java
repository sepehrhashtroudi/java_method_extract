public ClosureReverseAbstractInterpreter(CodingConvention convention, final JSTypeRegistry typeRegistry) { [EOL]     super(convention, typeRegistry); [EOL]     this.restricters = new ImmutableMap.Builder<String, Function<TypeRestriction, JSType>>().put("isDef", new Function<TypeRestriction, JSType>() { [EOL]  [EOL]         @Override [EOL]         public JSType apply(TypeRestriction p) { [EOL]             if (p.outcome) { [EOL]                 return getRestrictedWithoutUndefined(p.type); [EOL]             } else { [EOL]                 return p.type != null ? getNativeType(VOID_TYPE).getGreatestSubtype(p.type) : null; [EOL]             } [EOL]         } [EOL]     }).put("isNull", new Function<TypeRestriction, JSType>() { [EOL]  [EOL]         @Override [EOL]         public JSType apply(TypeRestriction p) { [EOL]             if (p.outcome) { [EOL]                 return p.type != null ? getNativeType(NULL_TYPE).getGreatestSubtype(p.type) : null; [EOL]             } else { [EOL]                 return getRestrictedWithoutNull(p.type); [EOL]             } [EOL]         } [EOL]     }).put("isDefAndNotNull", new Function<TypeRestriction, JSType>() { [EOL]  [EOL]         @Override [EOL]         public JSType apply(TypeRestriction p) { [EOL]             if (p.outcome) { [EOL]                 return getRestrictedWithoutUndefined(getRestrictedWithoutNull(p.type)); [EOL]             } else { [EOL]                 return p.type != null ? getNativeType(NULL_VOID).getGreatestSubtype(p.type) : null; [EOL]             } [EOL]         } [EOL]     }).put("isString", new Function<TypeRestriction, JSType>() { [EOL]  [EOL]         @Override [EOL]         public JSType apply(TypeRestriction p) { [EOL]             return getRestrictedByTypeOfResult(p.type, "string", p.outcome); [EOL]         } [EOL]     }).put("isBoolean", new Function<TypeRestriction, JSType>() { [EOL]  [EOL]         @Override [EOL]         public JSType apply(TypeRestriction p) { [EOL]             return getRestrictedByTypeOfResult(p.type, "boolean", p.outcome); [EOL]         } [EOL]     }).put("isNumber", new Function<TypeRestriction, JSType>() { [EOL]  [EOL]         @Override [EOL]         public JSType apply(TypeRestriction p) { [EOL]             return getRestrictedByTypeOfResult(p.type, "number", p.outcome); [EOL]         } [EOL]     }).put("isFunction", new Function<TypeRestriction, JSType>() { [EOL]  [EOL]         @Override [EOL]         public JSType apply(TypeRestriction p) { [EOL]             return getRestrictedByTypeOfResult(p.type, "function", p.outcome); [EOL]         } [EOL]     }).put("isArray", new Function<TypeRestriction, JSType>() { [EOL]  [EOL]         @Override [EOL]         public JSType apply(TypeRestriction p) { [EOL]             if (p.type == null) { [EOL]                 return p.outcome ? getNativeType(ARRAY_TYPE) : null; [EOL]             } [EOL]             Visitor<JSType> visitor = p.outcome ? restrictToArrayVisitor : restrictToNotArrayVisitor; [EOL]             return p.type.visit(visitor); [EOL]         } [EOL]     }).put("isObject", new Function<TypeRestriction, JSType>() { [EOL]  [EOL]         @Override [EOL]         public JSType apply(TypeRestriction p) { [EOL]             if (p.type == null) { [EOL]                 return p.outcome ? getNativeType(OBJECT_TYPE) : null; [EOL]             } [EOL]             Visitor<JSType> visitor = p.outcome ? restrictToObjectVisitor : restrictToNotObjectVisitor; [EOL]             return p.type.visit(visitor); [EOL]         } [EOL]     }).build(); [EOL] } <line_num>: 128,216
private TypeRestriction(JSType type, boolean outcome) { [EOL]     this.type = type; [EOL]     this.outcome = outcome; [EOL] } <line_num>: 263,266
@Override [EOL] protected JSType caseTopType(JSType topType) { [EOL]     return topType; [EOL] } <line_num>: 52,57
@Override [EOL] public JSType caseObjectType(ObjectType type) { [EOL]     JSType arrayType = getNativeType(ARRAY_TYPE); [EOL]     return arrayType.isSubtype(type) ? arrayType : null; [EOL] } <line_num>: 59,63
@Override [EOL] public JSType caseObjectType(ObjectType type) { [EOL]     return type.isSubtype(getNativeType(ARRAY_TYPE)) ? null : type; [EOL] } <line_num>: 71,74
@Override [EOL] protected JSType caseTopType(JSType topType) { [EOL]     return getNativeType(NO_OBJECT_TYPE); [EOL] } <line_num>: 83,86
@Override [EOL] public JSType caseObjectType(ObjectType type) { [EOL]     return type; [EOL] } <line_num>: 88,91
@Override [EOL] public JSType caseFunctionType(FunctionType type) { [EOL]     return type; [EOL] } <line_num>: 93,96
@Override [EOL] public JSType caseAllType() { [EOL]     return typeRegistry.createUnionType(getNativeType(NUMBER_STRING_BOOLEAN), getNativeType(NULL_VOID)); [EOL] } <line_num>: 105,109
@Override [EOL] public JSType caseObjectType(ObjectType type) { [EOL]     return null; [EOL] } <line_num>: 111,114
@Override [EOL] public JSType caseFunctionType(FunctionType type) { [EOL]     return null; [EOL] } <line_num>: 116,119
@Override [EOL] public JSType apply(TypeRestriction p) { [EOL]     if (p.type == null) { [EOL]         return p.outcome ? getNativeType(OBJECT_TYPE) : null; [EOL]     } [EOL]     Visitor<JSType> visitor = p.outcome ? restrictToObjectVisitor : restrictToNotObjectVisitor; [EOL]     return p.type.visit(visitor); [EOL] } <line_num>: 204,213
@Override [EOL] public JSType apply(TypeRestriction p) { [EOL]     if (p.type == null) { [EOL]         return p.outcome ? getNativeType(ARRAY_TYPE) : null; [EOL]     } [EOL]     Visitor<JSType> visitor = p.outcome ? restrictToArrayVisitor : restrictToNotArrayVisitor; [EOL]     return p.type.visit(visitor); [EOL] } <line_num>: 192,201
@Override [EOL] public JSType apply(TypeRestriction p) { [EOL]     return getRestrictedByTypeOfResult(p.type, "function", p.outcome); [EOL] } <line_num>: 186,189
@Override [EOL] public JSType apply(TypeRestriction p) { [EOL]     return getRestrictedByTypeOfResult(p.type, "number", p.outcome); [EOL] } <line_num>: 180,183
@Override [EOL] public JSType apply(TypeRestriction p) { [EOL]     return getRestrictedByTypeOfResult(p.type, "boolean", p.outcome); [EOL] } <line_num>: 174,177
@Override [EOL] public JSType apply(TypeRestriction p) { [EOL]     return getRestrictedByTypeOfResult(p.type, "string", p.outcome); [EOL] } <line_num>: 168,171
@Override [EOL] public JSType apply(TypeRestriction p) { [EOL]     if (p.outcome) { [EOL]         return getRestrictedWithoutUndefined(getRestrictedWithoutNull(p.type)); [EOL]     } else { [EOL]         return p.type != null ? getNativeType(NULL_VOID).getGreatestSubtype(p.type) : null; [EOL]     } [EOL] } <line_num>: 156,165
@Override [EOL] public JSType apply(TypeRestriction p) { [EOL]     if (p.outcome) { [EOL]         return p.type != null ? getNativeType(NULL_TYPE).getGreatestSubtype(p.type) : null; [EOL]     } else { [EOL]         return getRestrictedWithoutNull(p.type); [EOL]     } [EOL] } <line_num>: 145,153
@Override [EOL] public JSType apply(TypeRestriction p) { [EOL]     if (p.outcome) { [EOL]         return getRestrictedWithoutUndefined(p.type); [EOL]     } else { [EOL]         return p.type != null ? getNativeType(VOID_TYPE).getGreatestSubtype(p.type) : null; [EOL]     } [EOL] } <line_num>: 134,142
@Override [EOL] public FlowScope getPreciserScopeKnowingConditionOutcome(Node condition, FlowScope blindScope, boolean outcome) { [EOL]     if (condition.isCall() && condition.getChildCount() == 2) { [EOL]         Node callee = condition.getFirstChild(); [EOL]         Node param = condition.getLastChild(); [EOL]         if (callee.isGetProp() && param.isQualifiedName()) { [EOL]             JSType paramType = getTypeIfRefinable(param, blindScope); [EOL]             Node left = callee.getFirstChild(); [EOL]             Node right = callee.getLastChild(); [EOL]             if (left.isName() && "goog".equals(left.getString()) && right.isString()) { [EOL]                 Function<TypeRestriction, JSType> restricter = restricters.get(right.getString()); [EOL]                 if (restricter != null) { [EOL]                     return restrictParameter(param, paramType, blindScope, restricter, outcome); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return nextPreciserScopeKnowingConditionOutcome(condition, blindScope, outcome); [EOL] } <line_num>: 218,241
private FlowScope restrictParameter(Node parameter, JSType type, FlowScope blindScope, Function<TypeRestriction, JSType> restriction, boolean outcome) { [EOL]     type = restriction.apply(new TypeRestriction(type, outcome)); [EOL]     if (type != null) { [EOL]         FlowScope informed = blindScope.createChildFlowScope(); [EOL]         declareNameInScope(informed, parameter, type); [EOL]         return informed; [EOL]     } else { [EOL]         return blindScope; [EOL]     } [EOL] } <line_num>: 243,257
