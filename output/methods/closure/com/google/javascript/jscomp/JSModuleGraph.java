public JSModuleGraph(JSModule[] modulesInDepOrder) { [EOL]     this(ImmutableList.copyOf(modulesInDepOrder)); [EOL] } <line_num>: 82,84
public JSModuleGraph(List<JSModule> modulesInDepOrder) { [EOL]     Preconditions.checkState(modulesInDepOrder.size() == Sets.newHashSet(modulesInDepOrder).size(), "Found duplicate modules"); [EOL]     modules = ImmutableList.copyOf(modulesInDepOrder); [EOL]     modulesByDepth = Lists.newArrayList(); [EOL]     for (JSModule module : modulesInDepOrder) { [EOL]         int depth = 0; [EOL]         for (JSModule dep : module.getDependencies()) { [EOL]             int depDepth = dep.getDepth(); [EOL]             if (depDepth < 0) { [EOL]                 throw new ModuleDependenceException(String.format("Modules not in dependency order: %s preceded %s", module.getName(), dep.getName()), module, dep); [EOL]             } [EOL]             depth = Math.max(depth, depDepth + 1); [EOL]         } [EOL]         module.setDepth(depth); [EOL]         if (depth == modulesByDepth.size()) { [EOL]             modulesByDepth.add(new ArrayList<JSModule>()); [EOL]         } [EOL]         modulesByDepth.get(depth).add(module); [EOL]     } [EOL] } <line_num>: 89,115
protected ModuleDependenceException(String message, JSModule module, JSModule dependentModule) { [EOL]     super(message); [EOL]     this.module = module; [EOL]     this.dependentModule = dependentModule; [EOL] } <line_num>: 481,486
Iterable<JSModule> getAllModules() { [EOL]     return modules; [EOL] } <line_num>: 120,122
int getModuleCount() { [EOL]     return modules.size(); [EOL] } <line_num>: 127,129
JSModule getRootModule() { [EOL]     return Iterables.getOnlyElement(modulesByDepth.get(0)); [EOL] } <line_num>: 134,136
JSONArray toJson() { [EOL]     JSONArray modules = new JSONArray(); [EOL]     for (JSModule module : getAllModules()) { [EOL]         JSONObject node = new JSONObject(); [EOL]         try { [EOL]             node.put("name", module.getName()); [EOL]             JSONArray deps = new JSONArray(); [EOL]             node.put("dependencies", deps); [EOL]             for (JSModule m : module.getDependencies()) { [EOL]                 deps.put(m.getName()); [EOL]             } [EOL]             JSONArray transitiveDeps = new JSONArray(); [EOL]             node.put("transitive-dependencies", transitiveDeps); [EOL]             for (JSModule m : getTransitiveDepsDeepestFirst(module)) { [EOL]                 transitiveDeps.put(m.getName()); [EOL]             } [EOL]             JSONArray inputs = new JSONArray(); [EOL]             node.put("inputs", inputs); [EOL]             for (CompilerInput input : module.getInputs()) { [EOL]                 inputs.put(input.getSourceFile().getOriginalPath()); [EOL]             } [EOL]             modules.put(node); [EOL]         } catch (JSONException e) { [EOL]             Throwables.propagate(e); [EOL]         } [EOL]     } [EOL]     return modules; [EOL] } <line_num>: 147,174
public boolean dependsOn(JSModule src, JSModule m) { [EOL]     Set<JSModule> deps = dependencyMap.get(src); [EOL]     if (deps == null) { [EOL]         deps = getTransitiveDepsDeepestFirst(src); [EOL]         dependencyMap.put(src, deps); [EOL]     } [EOL]     return deps.contains(m); [EOL] } <line_num>: 180,188
JSModule getDeepestCommonDependency(JSModule m1, JSModule m2) { [EOL]     int m1Depth = m1.getDepth(); [EOL]     int m2Depth = m2.getDepth(); [EOL]     for (int depth = Math.min(m1Depth, m2Depth) - 1; depth >= 0; depth--) { [EOL]         List<JSModule> modulesAtDepth = modulesByDepth.get(depth); [EOL]         for (int i = modulesAtDepth.size() - 1; i >= 0; i--) { [EOL]             JSModule m = modulesAtDepth.get(i); [EOL]             if (dependsOn(m1, m) && dependsOn(m2, m)) { [EOL]                 return m; [EOL]             } [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 199,216
public JSModule getDeepestCommonDependencyInclusive(JSModule m1, JSModule m2) { [EOL]     if (m2 == m1 || dependsOn(m2, m1)) { [EOL]         return m1; [EOL]     } else if (dependsOn(m1, m2)) { [EOL]         return m2; [EOL]     } [EOL]     return getDeepestCommonDependency(m1, m2); [EOL] } <line_num>: 227,236
public JSModule getDeepestCommonDependencyInclusive(Collection<JSModule> modules) { [EOL]     Iterator<JSModule> iter = modules.iterator(); [EOL]     JSModule dep = iter.next(); [EOL]     while (iter.hasNext()) { [EOL]         dep = getDeepestCommonDependencyInclusive(dep, iter.next()); [EOL]     } [EOL]     return dep; [EOL] } <line_num>: 239,247
Set<JSModule> getTransitiveDepsDeepestFirst(JSModule m) { [EOL]     Set<JSModule> deps = dependencyMap.get(m); [EOL]     if (deps != null) { [EOL]         return deps; [EOL]     } [EOL]     deps = new TreeSet<JSModule>(new InverseDepthComparator()); [EOL]     addDeps(deps, m); [EOL]     dependencyMap.put(m, deps); [EOL]     return deps; [EOL] } <line_num>: 257,266
private void addDeps(Set<JSModule> deps, JSModule m) { [EOL]     for (JSModule dep : m.getDependencies()) { [EOL]         deps.add(dep); [EOL]         addDeps(deps, dep); [EOL]     } [EOL] } <line_num>: 271,276
public void coalesceDuplicateFiles() { [EOL]     Multimap<String, JSModule> fileRefs = LinkedHashMultimap.create(); [EOL]     for (JSModule module : modules) { [EOL]         for (CompilerInput jsFile : module.getInputs()) { [EOL]             fileRefs.put(jsFile.getName(), module); [EOL]         } [EOL]     } [EOL]     for (String path : fileRefs.keySet()) { [EOL]         Collection<JSModule> refModules = fileRefs.get(path); [EOL]         if (refModules.size() > 1) { [EOL]             JSModule depModule = getDeepestCommonDependencyInclusive(refModules); [EOL]             CompilerInput file = refModules.iterator().next().getByName(path); [EOL]             for (JSModule module : refModules) { [EOL]                 if (module != depModule) { [EOL]                     module.removeByName(path); [EOL]                 } [EOL]             } [EOL]             if (!refModules.contains(depModule)) { [EOL]                 depModule.add(file); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 286,309
public List<CompilerInput> manageDependencies(List<String> entryPoints, List<CompilerInput> inputs) throws CircularDependencyException, MissingProvideException { [EOL]     DependencyOptions depOptions = new DependencyOptions(); [EOL]     depOptions.setDependencySorting(true); [EOL]     depOptions.setDependencyPruning(true); [EOL]     depOptions.setEntryPoints(entryPoints); [EOL]     return manageDependencies(depOptions, inputs); [EOL] } <line_num>: 330,339
public List<CompilerInput> manageDependencies(DependencyOptions depOptions, List<CompilerInput> inputs) throws CircularDependencyException, MissingProvideException { [EOL]     SortedDependencies<CompilerInput> sorter = new SortedDependencies<CompilerInput>(inputs); [EOL]     Set<CompilerInput> entryPointInputs = Sets.newLinkedHashSet(); [EOL]     if (depOptions.shouldPruneDependencies()) { [EOL]         if (!depOptions.shouldDropMoochers()) { [EOL]             entryPointInputs.addAll(sorter.getInputsWithoutProvides()); [EOL]         } [EOL]         for (String entryPoint : depOptions.getEntryPoints()) { [EOL]             entryPointInputs.add(sorter.getInputProviding(entryPoint)); [EOL]         } [EOL]         CompilerInput baseJs = sorter.maybeGetInputProviding("goog"); [EOL]         if (baseJs != null) { [EOL]             entryPointInputs.add(baseJs); [EOL]         } [EOL]     } else { [EOL]         entryPointInputs.addAll(inputs); [EOL]     } [EOL]     List<CompilerInput> absoluteOrder = sorter.getDependenciesOf(inputs, depOptions.shouldSortDependencies()); [EOL]     ListMultimap<JSModule, CompilerInput> entryPointInputsPerModule = LinkedListMultimap.create(); [EOL]     for (CompilerInput input : entryPointInputs) { [EOL]         JSModule module = input.getModule(); [EOL]         Preconditions.checkNotNull(module); [EOL]         entryPointInputsPerModule.put(module, input); [EOL]     } [EOL]     for (JSModule module : getAllModules()) { [EOL]         module.removeAll(); [EOL]     } [EOL]     for (JSModule module : entryPointInputsPerModule.keySet()) { [EOL]         List<CompilerInput> transitiveClosure = sorter.getDependenciesOf(entryPointInputsPerModule.get(module), depOptions.shouldSortDependencies()); [EOL]         for (CompilerInput input : transitiveClosure) { [EOL]             JSModule oldModule = input.getModule(); [EOL]             if (oldModule == null) { [EOL]                 input.setModule(module); [EOL]             } else { [EOL]                 input.setModule(null); [EOL]                 input.setModule(getDeepestCommonDependencyInclusive(oldModule, module)); [EOL]             } [EOL]         } [EOL]     } [EOL]     for (CompilerInput input : absoluteOrder) { [EOL]         JSModule module = input.getModule(); [EOL]         if (module != null) { [EOL]             module.add(input); [EOL]         } [EOL]     } [EOL]     List<CompilerInput> result = Lists.newArrayList(); [EOL]     for (JSModule module : getAllModules()) { [EOL]         result.addAll(module.getInputs()); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 354,433
LinkedDirectedGraph<JSModule, String> toGraphvizGraph() { [EOL]     LinkedDirectedGraph<JSModule, String> graphViz = LinkedDirectedGraph.create(); [EOL]     for (JSModule module : getAllModules()) { [EOL]         graphViz.createNode(module); [EOL]         for (JSModule dep : module.getDependencies()) { [EOL]             graphViz.createNode(dep); [EOL]             graphViz.connect(module, "->", dep); [EOL]         } [EOL]     } [EOL]     return graphViz; [EOL] } <line_num>: 435,446
@Override [EOL] public int compare(JSModule m1, JSModule m2) { [EOL]     return depthCompare(m2, m1); [EOL] } <line_num>: 453,456
private int depthCompare(JSModule m1, JSModule m2) { [EOL]     if (m1 == m2) { [EOL]         return 0; [EOL]     } [EOL]     int d1 = m1.getDepth(); [EOL]     int d2 = m2.getDepth(); [EOL]     return d1 < d2 ? -1 : d2 == d1 ? m1.getName().compareTo(m2.getName()) : 1; [EOL] } <line_num>: 459,466
public JSModule getModule() { [EOL]     return module; [EOL] } <line_num>: 488,490
public JSModule getDependentModule() { [EOL]     return dependentModule; [EOL] } <line_num>: 492,494
