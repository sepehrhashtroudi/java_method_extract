InferJSDocInfo(AbstractCompiler compiler) { [EOL]     this.compiler = compiler; [EOL] } <line_num>: 68,70
@Override [EOL] public void process(Node externs, Node root) { [EOL]     if (externs != null) { [EOL]         inExterns = true; [EOL]         NodeTraversal.traverse(compiler, externs, this); [EOL]     } [EOL]     if (root != null) { [EOL]         inExterns = false; [EOL]         NodeTraversal.traverse(compiler, root, this); [EOL]     } [EOL] } <line_num>: 72,82
@Override [EOL] public void hotSwapScript(Node root, Node originalRoot) { [EOL]     Preconditions.checkNotNull(root); [EOL]     Preconditions.checkState(root.isScript()); [EOL]     inExterns = false; [EOL]     NodeTraversal.traverse(compiler, root, this); [EOL] } <line_num>: 84,90
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     JSDocInfo docInfo; [EOL]     switch(n.getType()) { [EOL]         case Token.NAME: [EOL]             if (parent == null) { [EOL]                 return; [EOL]             } [EOL]             if (!parent.isVar() && !NodeUtil.isFunctionDeclaration(parent) && !(parent.isAssign() && n == parent.getFirstChild())) { [EOL]                 return; [EOL]             } [EOL]             docInfo = n.getJSDocInfo(); [EOL]             if (docInfo == null && !(parent.isVar() && !parent.hasOneChild())) { [EOL]                 docInfo = parent.getJSDocInfo(); [EOL]             } [EOL]             JSType varType = n.getJSType(); [EOL]             if (varType == null && parent.isFunction()) { [EOL]                 varType = parent.getJSType(); [EOL]             } [EOL]             if (varType == null || docInfo == null) { [EOL]                 return; [EOL]             } [EOL]             ObjectType objType = dereferenceToObject(varType); [EOL]             if (objType == null || objType.getJSDocInfo() != null) { [EOL]                 return; [EOL]             } [EOL]             attachJSDocInfoToNominalTypeOrShape(objType, docInfo, n.getString()); [EOL]             break; [EOL]         case Token.GETPROP: [EOL]             if (parent.isExprResult() || (parent.isAssign() && parent.getFirstChild() == n)) { [EOL]                 docInfo = n.getJSDocInfo(); [EOL]                 if (docInfo == null) { [EOL]                     docInfo = parent.getJSDocInfo(); [EOL]                 } [EOL]                 if (docInfo != null) { [EOL]                     ObjectType lhsType = dereferenceToObject(n.getFirstChild().getJSType()); [EOL]                     if (lhsType != null) { [EOL]                         String propName = n.getLastChild().getString(); [EOL]                         if (lhsType.hasOwnProperty(propName)) { [EOL]                             lhsType.setPropertyJSDocInfo(propName, docInfo); [EOL]                         } [EOL]                         ObjectType propType = dereferenceToObject(lhsType.getPropertyType(propName)); [EOL]                         if (propType != null) { [EOL]                             attachJSDocInfoToNominalTypeOrShape(propType, docInfo, n.getQualifiedName()); [EOL]                         } [EOL]                     } [EOL]                 } [EOL]             } [EOL]             break; [EOL]     } [EOL] } <line_num>: 92,189
private ObjectType dereferenceToObject(JSType type) { [EOL]     return ObjectType.cast(type == null ? null : type.dereference()); [EOL] } <line_num>: 194,196
private void attachJSDocInfoToNominalTypeOrShape(ObjectType objType, JSDocInfo docInfo, @Nullable String qName) { [EOL]     if (objType.isConstructor() || objType.isEnumType() || objType.isInterface()) { [EOL]         if (objType.hasReferenceName() && objType.getReferenceName().equals(qName)) { [EOL]             objType.setJSDocInfo(docInfo); [EOL]             if (objType.isConstructor() || objType.isInterface()) { [EOL]                 JSType.toMaybeFunctionType(objType).getInstanceType().setJSDocInfo(docInfo); [EOL]             } else if (objType instanceof EnumType) { [EOL]                 ((EnumType) objType).getElementsType().setJSDocInfo(docInfo); [EOL]             } [EOL]         } [EOL]     } else if (!objType.isNativeObjectType() && objType.isFunctionType()) { [EOL]         objType.setJSDocInfo(docInfo); [EOL]     } [EOL] } <line_num>: 201,223
