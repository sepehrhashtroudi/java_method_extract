OptimizeReturns(AbstractCompiler compiler) { [EOL]     this.compiler = compiler; [EOL] } <line_num>: 43,45
@Override [EOL] @VisibleForTesting [EOL] public void process(Node externs, Node root) { [EOL]     SimpleDefinitionFinder defFinder = new SimpleDefinitionFinder(compiler); [EOL]     defFinder.process(externs, root); [EOL]     process(externs, root, defFinder); [EOL] } <line_num>: 47,53
@Override [EOL] public void process(Node externs, Node root, SimpleDefinitionFinder definitions) { [EOL]     List<Node> toOptimize = Lists.newArrayList(); [EOL]     for (DefinitionSite defSite : definitions.getDefinitionSites()) { [EOL]         if (!defSite.inExterns && !callResultsMaybeUsed(definitions, defSite)) { [EOL]             toOptimize.add(defSite.definition.getRValue()); [EOL]         } [EOL]     } [EOL]     for (Node node : toOptimize) { [EOL]         rewriteReturns(definitions, node); [EOL]     } [EOL] } <line_num>: 55,69
private boolean callResultsMaybeUsed(SimpleDefinitionFinder defFinder, DefinitionSite definitionSite) { [EOL]     Definition definition = definitionSite.definition; [EOL]     Node rValue = definition.getRValue(); [EOL]     if (rValue == null || !rValue.isFunction()) { [EOL]         return true; [EOL]     } [EOL]     if (!SimpleDefinitionFinder.isSimpleFunctionDeclaration(rValue)) { [EOL]         return true; [EOL]     } [EOL]     if (!defFinder.canModifyDefinition(definition)) { [EOL]         return true; [EOL]     } [EOL]     Collection<UseSite> useSites = defFinder.getUseSites(definition); [EOL]     for (UseSite site : useSites) { [EOL]         Node useNodeParent = site.node.getParent(); [EOL]         if (isCall(site)) { [EOL]             Node callNode = useNodeParent; [EOL]             Preconditions.checkState(callNode.isCall()); [EOL]             if (NodeUtil.isExpressionResultUsed(callNode)) { [EOL]                 return true; [EOL]             } [EOL]         } else { [EOL]             if (!useNodeParent.isVar()) { [EOL]                 return true; [EOL]             } [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 76,120
@Override [EOL] public void visit(Node node) { [EOL]     if (node.isReturn() && node.hasOneChild()) { [EOL]         boolean keepValue = NodeUtil.mayHaveSideEffects(node.getFirstChild(), compiler); [EOL]         if (!keepValue) { [EOL]             defFinder.removeReferences(node.getFirstChild()); [EOL]         } [EOL]         Node result = node.removeFirstChild(); [EOL]         if (keepValue) { [EOL]             node.getParent().addChildBefore(IR.exprResult(result).srcref(result), node); [EOL]         } [EOL]         compiler.reportCodeChange(); [EOL]     } [EOL] } <line_num>: 135,150
private void rewriteReturns(final SimpleDefinitionFinder defFinder, Node fnNode) { [EOL]     Preconditions.checkState(fnNode.isFunction()); [EOL]     NodeUtil.visitPostOrder(fnNode.getLastChild(), new NodeUtil.Visitor() { [EOL]  [EOL]         @Override [EOL]         public void visit(Node node) { [EOL]             if (node.isReturn() && node.hasOneChild()) { [EOL]                 boolean keepValue = NodeUtil.mayHaveSideEffects(node.getFirstChild(), compiler); [EOL]                 if (!keepValue) { [EOL]                     defFinder.removeReferences(node.getFirstChild()); [EOL]                 } [EOL]                 Node result = node.removeFirstChild(); [EOL]                 if (keepValue) { [EOL]                     node.getParent().addChildBefore(IR.exprResult(result).srcref(result), node); [EOL]                 } [EOL]                 compiler.reportCodeChange(); [EOL]             } [EOL]         } [EOL]     }, new NodeUtil.MatchShallowStatement()); [EOL] } <line_num>: 129,153
private static boolean isCall(UseSite site) { [EOL]     Node node = site.node; [EOL]     Node parent = node.getParent(); [EOL]     return (parent.getFirstChild() == node) && parent.isCall(); [EOL] } <line_num>: 158,162
