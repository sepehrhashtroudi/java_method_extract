@Override [EOL] Node optimizeSubtree(Node subtree) { [EOL]     if (subtree.isRegExp()) { [EOL]         String pattern = subtree.getFirstChild().getString(); [EOL]         String flags = subtree.getChildCount() == 2 ? subtree.getLastChild().getString() : ""; [EOL]         RegExpTree regexTree; [EOL]         try { [EOL]             regexTree = RegExpTree.parseRegExp(pattern, flags); [EOL]         } catch (IllegalArgumentException ex) { [EOL]             return subtree; [EOL]         } [EOL]         regexTree = regexTree.simplify(flags); [EOL]         String literal = regexTree.toString(); [EOL]         String newPattern = literal.substring(1, literal.length() - 1); [EOL]         String newFlags = ((flags.contains("g") && (!RegExpTree.matchesWholeInput(regexTree, flags) || regexTree.hasCapturingGroup()) ? "g" : "") + (flags.contains("i") && regexTree.isCaseSensitive() ? "i" : "") + (flags.contains("m") && regexTree.containsAnchor() ? "m" : "")); [EOL]         if (!(newPattern.equals(pattern) && newFlags.equals(flags))) { [EOL]             subtree.getFirstChild().setString(newPattern); [EOL]             if (!"".equals(newFlags)) { [EOL]                 subtree.getLastChild().setString(newFlags); [EOL]             } else if (subtree.getChildCount() == 2) { [EOL]                 subtree.getLastChild().detachFromParent(); [EOL]             } [EOL]             reportCodeChange(); [EOL]         } [EOL]     } [EOL]     return subtree; [EOL] } <line_num>: 29,77
