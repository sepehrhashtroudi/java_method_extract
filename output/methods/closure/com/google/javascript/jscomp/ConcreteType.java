TypeFilter(List<C> emptyList) { [EOL]     this.emptyList = emptyList; [EOL] } <line_num>: 164,166
ConcreteFunctionType(Factory factory, Node declaration, StaticScope<ConcreteType> parentScope) { [EOL]     this.factory = factory; [EOL]     this.declaration = declaration; [EOL]     this.parentScope = parentScope; [EOL]     Preconditions.checkArgument(declaration.isFunction()); [EOL]     Preconditions.checkArgument(declaration.getJSType() != null); [EOL]     Preconditions.checkArgument(declaration.getJSType().isFunctionType()); [EOL] } <line_num>: 302,312
ConcreteInstanceType(Factory factory, ObjectType instanceType) { [EOL]     this.factory = factory; [EOL]     this.instanceType = instanceType; [EOL]     Preconditions.checkArgument(!(instanceType instanceof UnknownType)); [EOL] } <line_num>: 465,470
ConcreteUnionType(ConcreteType... alternatives) { [EOL]     this(Sets.newHashSet(alternatives)); [EOL] } <line_num>: 555,557
ConcreteUnionType(Set<ConcreteType> alternatives) { [EOL]     Preconditions.checkArgument(alternatives.size() > 1); [EOL]     this.alternatives = alternatives; [EOL] } <line_num>: 559,562
ConcreteUniqueType(int id) { [EOL]     this.id = id; [EOL]     Preconditions.checkArgument(id >= 0); [EOL] } <line_num>: 656,660
protected static ConcreteType createForTypes(Collection<ConcreteType> types) { [EOL]     if (types == null || types.size() == 0) { [EOL]         return NONE; [EOL]     } else if (types.size() == 1) { [EOL]         return types.iterator().next(); [EOL]     } else { [EOL]         return new ConcreteUnionType(Sets.newHashSet(types)); [EOL]     } [EOL] } <line_num>: 66,74
boolean isNone() { [EOL]     return false; [EOL] } <line_num>: 77,77
boolean isFunction() { [EOL]     return false; [EOL] } <line_num>: 80,80
boolean isInstance() { [EOL]     return false; [EOL] } <line_num>: 86,86
boolean isUnion() { [EOL]     return false; [EOL] } <line_num>: 89,89
boolean isAll() { [EOL]     return false; [EOL] } <line_num>: 92,92
boolean isSingleton() { [EOL]     return !isNone() && !isUnion() && !isAll(); [EOL] } <line_num>: 95,95
ConcreteFunctionType toFunction() { [EOL]     return null; [EOL] } <line_num>: 98,98
ConcreteInstanceType toInstance() { [EOL]     return null; [EOL] } <line_num>: 101,101
ConcreteUnionType toUnion() { [EOL]     return null; [EOL] } <line_num>: 104,104
StaticScope<ConcreteType> getScope() { [EOL]     return null; [EOL] } <line_num>: 107,107
ConcreteType unionWith(ConcreteType other) { [EOL]     Preconditions.checkState(this.isSingleton()); [EOL]     if (!other.isSingleton()) { [EOL]         return other.unionWith(this); [EOL]     } else if (equals(other)) { [EOL]         return this; [EOL]     } else { [EOL]         return new ConcreteUnionType(this, other); [EOL]     } [EOL] } <line_num>: 110,119
ConcreteType intersectWith(ConcreteType other) { [EOL]     if (!other.isSingleton()) { [EOL]         return other.intersectWith(this); [EOL]     } else if (equals(other)) { [EOL]         return this; [EOL]     } else { [EOL]         return NONE; [EOL]     } [EOL] } <line_num>: 122,130
private <C> List<C> getMatchingTypes(TypeFilter<C> filter) { [EOL]     C type = null; [EOL]     if (isUnion()) { [EOL]         List<C> list = Lists.newArrayList(); [EOL]         for (ConcreteType alt : toUnion().getAlternatives()) { [EOL]             if ((type = filter.filter(alt)) != null) { [EOL]                 list.add(type); [EOL]             } [EOL]         } [EOL]         return list; [EOL]     } else if ((type = filter.filter(this)) != null) { [EOL]         List<C> list = Lists.newArrayList(); [EOL]         list.add(type); [EOL]         return list; [EOL]     } else { [EOL]         return filter.emptyList; [EOL]     } [EOL] } <line_num>: 136,153
abstract protected C filter(ConcreteType type); <line_num>: 168,168
@Override [EOL] public ConcreteFunctionType filter(ConcreteType type) { [EOL]     return type.isFunction() ? type.toFunction() : null; [EOL] } <line_num>: 174,176
List<ConcreteFunctionType> getFunctions() { [EOL]     return getMatchingTypes(new TypeFilter<ConcreteFunctionType>(NO_FUNCTIONS) { [EOL]  [EOL]         @Override [EOL]         public ConcreteFunctionType filter(ConcreteType type) { [EOL]             return type.isFunction() ? type.toFunction() : null; [EOL]         } [EOL]     }); [EOL] } <line_num>: 172,178
@Override [EOL] public ConcreteInstanceType filter(ConcreteType type) { [EOL]     return type.isInstance() ? type.toInstance() : null; [EOL] } <line_num>: 183,185
List<ConcreteInstanceType> getInstances() { [EOL]     return getMatchingTypes(new TypeFilter<ConcreteInstanceType>(NO_INSTANCES) { [EOL]  [EOL]         @Override [EOL]         public ConcreteInstanceType filter(ConcreteType type) { [EOL]             return type.isInstance() ? type.toInstance() : null; [EOL]         } [EOL]     }); [EOL] } <line_num>: 181,187
@Override [EOL] public ConcreteInstanceType filter(ConcreteType type) { [EOL]     if (type.isFunction()) { [EOL]         return type.toFunction().getInstanceType(); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 192,197
List<ConcreteInstanceType> getFunctionInstanceTypes() { [EOL]     return getMatchingTypes(new TypeFilter<ConcreteInstanceType>(NO_INSTANCES) { [EOL]  [EOL]         @Override [EOL]         public ConcreteInstanceType filter(ConcreteType type) { [EOL]             if (type.isFunction()) { [EOL]                 return type.toFunction().getInstanceType(); [EOL]             } [EOL]             return null; [EOL]         } [EOL]     }); [EOL] } <line_num>: 190,199
@Override [EOL] public ConcreteInstanceType filter(ConcreteType type) { [EOL]     if (type.isInstance() && type.toInstance().isFunctionPrototype()) { [EOL]         return type.toInstance(); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 204,210
List<ConcreteInstanceType> getPrototypeTypes() { [EOL]     return getMatchingTypes(new TypeFilter<ConcreteInstanceType>(NO_INSTANCES) { [EOL]  [EOL]         @Override [EOL]         public ConcreteInstanceType filter(ConcreteType type) { [EOL]             if (type.isInstance() && type.toInstance().isFunctionPrototype()) { [EOL]                 return type.toInstance(); [EOL]             } [EOL]             return null; [EOL]         } [EOL]     }); [EOL] } <line_num>: 202,212
@Override [EOL] public ConcreteFunctionType filter(ConcreteType type) { [EOL]     return type.isFunction() && type.toFunction().getSuperclassType() != null ? type.toFunction().getSuperclassType() : null; [EOL] } <line_num>: 217,221
List<ConcreteFunctionType> getSuperclassTypes() { [EOL]     return getMatchingTypes(new TypeFilter<ConcreteFunctionType>(NO_FUNCTIONS) { [EOL]  [EOL]         @Override [EOL]         public ConcreteFunctionType filter(ConcreteType type) { [EOL]             return type.isFunction() && type.toFunction().getSuperclassType() != null ? type.toFunction().getSuperclassType() : null; [EOL]         } [EOL]     }); [EOL] } <line_num>: 215,223
@Override [EOL] public StaticSlot<ConcreteType> filter(ConcreteType type) { [EOL]     return type.isFunction() && toFunction().getParameterSlot(index) != null ? toFunction().getParameterSlot(index) : null; [EOL] } <line_num>: 228,232
List<StaticSlot<ConcreteType>> getParameterSlots(final int index) { [EOL]     return getMatchingTypes(new TypeFilter<StaticSlot<ConcreteType>>(NO_SLOTS) { [EOL]  [EOL]         @Override [EOL]         public StaticSlot<ConcreteType> filter(ConcreteType type) { [EOL]             return type.isFunction() && toFunction().getParameterSlot(index) != null ? toFunction().getParameterSlot(index) : null; [EOL]         } [EOL]     }); [EOL] } <line_num>: 226,234
@Override [EOL] public StaticSlot<ConcreteType> filter(ConcreteType type) { [EOL]     StaticSlot<ConcreteType> slot = null; [EOL]     if (type.isInstance()) { [EOL]         slot = type.toInstance().getPropertySlot(name); [EOL]     } [EOL]     return slot; [EOL] } <line_num>: 242,248
List<StaticSlot<ConcreteType>> getPropertySlots(final String name) { [EOL]     return getMatchingTypes(new TypeFilter<StaticSlot<ConcreteType>>(NO_SLOTS) { [EOL]  [EOL]         @Override [EOL]         public StaticSlot<ConcreteType> filter(ConcreteType type) { [EOL]             StaticSlot<ConcreteType> slot = null; [EOL]             if (type.isInstance()) { [EOL]                 slot = type.toInstance().getPropertySlot(name); [EOL]             } [EOL]             return slot; [EOL]         } [EOL]     }); [EOL] } <line_num>: 240,250
ConcreteType getPropertyType(final String name) { [EOL]     ConcreteType ret = NONE; [EOL]     for (StaticSlot<ConcreteType> slot : getPropertySlots(name)) { [EOL]         ret = ret.unionWith(slot.getType()); [EOL]     } [EOL]     return ret; [EOL] } <line_num>: 257,263
@Override [EOL] boolean isNone() { [EOL]     return true; [EOL] } <line_num>: 267,267
@Override [EOL] ConcreteType unionWith(ConcreteType other) { [EOL]     return other; [EOL] } <line_num>: 269,269
@Override [EOL] ConcreteType intersectWith(ConcreteType other) { [EOL]     return NONE; [EOL] } <line_num>: 271,271
@Override [EOL] public String toString() { [EOL]     return "()"; [EOL] } <line_num>: 273,273
@Override [EOL] boolean isFunction() { [EOL]     return true; [EOL] } <line_num>: 314,314
@Override [EOL] ConcreteFunctionType toFunction() { [EOL]     return this; [EOL] } <line_num>: 316,316
StaticSlot<ConcreteType> getCallSlot() { [EOL]     return getScope().getOwnSlot(CALL_SLOT_NAME); [EOL] } <line_num>: 324,326
StaticSlot<ConcreteType> getThisSlot() { [EOL]     return getScope().getOwnSlot(THIS_SLOT_NAME); [EOL] } <line_num>: 329,331
StaticSlot<ConcreteType> getReturnSlot() { [EOL]     return getScope().getOwnSlot(RETURN_SLOT_NAME); [EOL] } <line_num>: 334,336
StaticSlot<ConcreteType> getParameterSlot(int index) { [EOL]     return getScope().getOwnSlot(getParameterName(index)); [EOL] } <line_num>: 339,341
private String getParameterName(int index) { [EOL]     int count = 0; [EOL]     for (Node n = getFirstParameter(); n != null; n = n.getNext()) { [EOL]         if (count++ == index) { [EOL]             return n.getString(); [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 344,352
private Node getFirstParameter() { [EOL]     return declaration.getFirstChild().getNext().getFirstChild(); [EOL] } <line_num>: 355,357
public FunctionType getJSType() { [EOL]     return JSType.toMaybeFunctionType(declaration.getJSType()); [EOL] } <line_num>: 360,362
ConcreteInstanceType getInstanceType() { [EOL]     if (instanceType == null) { [EOL]         if (getJSType().isConstructor()) { [EOL]             instanceType = factory.createConcreteInstance(getJSType().getInstanceType()); [EOL]         } [EOL]     } [EOL]     return instanceType; [EOL] } <line_num>: 368,376
ConcreteInstanceType getPrototypeType() { [EOL]     if (prototypeType == null) { [EOL]         prototypeType = factory.createConcreteInstance(getJSType().getPrototype()); [EOL]     } [EOL]     return prototypeType; [EOL] } <line_num>: 379,385
ConcreteFunctionType getSuperclassType() { [EOL]     FunctionType superConstructor = getJSType().getSuperClassConstructor(); [EOL]     return (superConstructor != null) ? factory.getConcreteFunction(superConstructor) : null; [EOL] } <line_num>: 388,392
@Override [EOL] StaticScope<ConcreteType> getScope() { [EOL]     if (bodyScope == null) { [EOL]         bodyScope = factory.createFunctionScope(declaration, parentScope); [EOL]     } [EOL]     return bodyScope; [EOL] } <line_num>: 395,400
@Override [EOL] public String toString() { [EOL]     StringBuilder b = new StringBuilder(32); [EOL]     b.append("function ("); [EOL]     boolean hasKnownTypeOfThis = !getThisSlot().getType().isNone(); [EOL]     if (hasKnownTypeOfThis) { [EOL]         b.append("this:"); [EOL]         b.append(getThisSlot().getType().toString()); [EOL]     } [EOL]     Node n = getFirstParameter(); [EOL]     if (hasKnownTypeOfThis && n != null) { [EOL]         b.append(", "); [EOL]     } [EOL]     for (int i = 0; n != null; ++i, n = n.getNext()) { [EOL]         String paramName = n.getString(); [EOL]         StaticSlot<ConcreteType> var = getScope().getOwnSlot(paramName); [EOL]         b.append(var.getType()); [EOL]         getParameterSlot(i).getType(); [EOL]         if (n.getNext() != null) { [EOL]             b.append(", "); [EOL]         } [EOL]     } [EOL]     b.append(")"); [EOL]     if (getReturnSlot().getType() != null) { [EOL]         b.append(": "); [EOL]         b.append(getReturnSlot().getType().toString()); [EOL]     } [EOL]     return b.toString(); [EOL] } <line_num>: 408,437
@Override [EOL] boolean isInstance() { [EOL]     return true; [EOL] } <line_num>: 472,472
@Override [EOL] ConcreteInstanceType toInstance() { [EOL]     return this; [EOL] } <line_num>: 474,474
boolean isFunctionPrototype() { [EOL]     return instanceType.isFunctionPrototypeType(); [EOL] } <line_num>: 477,479
StaticSlot<ConcreteType> getPropertySlot(String propName) { [EOL]     return getScope().getSlot(propName); [EOL] } <line_num>: 482,484
ConcreteInstanceType getInstanceTypeWithProperty(String propName) { [EOL]     if (getScope().getOwnSlot(propName) != null) { [EOL]         if (instanceType.getConstructor() != null) { [EOL]             return getConstructorType().getPrototypeType(); [EOL]         } [EOL]         return this; [EOL]     } else if (getImplicitPrototype() != null) { [EOL]         return getImplicitPrototype().getInstanceTypeWithProperty(propName); [EOL]     } else { [EOL]         return null; [EOL]     } [EOL] } <line_num>: 490,511
ConcreteInstanceType getImplicitPrototype() { [EOL]     if ((prototype == null) && (instanceType.getImplicitPrototype() != null)) { [EOL]         ObjectType proto = instanceType.getImplicitPrototype(); [EOL]         if ((proto != instanceType) && !(proto instanceof UnknownType)) { [EOL]             prototype = factory.createConcreteInstance(proto); [EOL]         } [EOL]     } [EOL]     return prototype; [EOL] } <line_num>: 514,523
ConcreteFunctionType getConstructorType() { [EOL]     if (instanceType.isFunctionPrototypeType()) { [EOL]         return factory.getConcreteFunction(instanceType.getOwnerFunction()); [EOL]     } else { [EOL]         FunctionType constructor = instanceType.getConstructor(); [EOL]         return (constructor != null) ? factory.getConcreteFunction(constructor) : null; [EOL]     } [EOL] } <line_num>: 526,534
@Override [EOL] StaticScope<ConcreteType> getScope() { [EOL]     if (scope == null) { [EOL]         scope = factory.createInstanceScope(instanceType); [EOL]     } [EOL]     return scope; [EOL] } <line_num>: 537,542
@Override [EOL] public String toString() { [EOL]     return instanceType.toString(); [EOL] } <line_num>: 544,544
@Override [EOL] boolean isUnion() { [EOL]     return true; [EOL] } <line_num>: 564,564
@Override [EOL] ConcreteUnionType toUnion() { [EOL]     return this; [EOL] } <line_num>: 566,566
@Override [EOL] ConcreteType unionWith(ConcreteType other) { [EOL]     if (other.isSingleton()) { [EOL]         if (alternatives.contains(other)) { [EOL]             return this; [EOL]         } else { [EOL]             Set<ConcreteType> alts = Sets.newHashSet(alternatives); [EOL]             alts.add(other); [EOL]             return new ConcreteUnionType(alts); [EOL]         } [EOL]     } else if (other.isUnion()) { [EOL]         ConcreteUnionType otherUnion = other.toUnion(); [EOL]         if (alternatives.containsAll(otherUnion.alternatives)) { [EOL]             return this; [EOL]         } else if (otherUnion.alternatives.containsAll(alternatives)) { [EOL]             return otherUnion; [EOL]         } else { [EOL]             Set<ConcreteType> alts = Sets.newHashSet(alternatives); [EOL]             alts.addAll(otherUnion.alternatives); [EOL]             return new ConcreteUnionType(alts); [EOL]         } [EOL]     } else { [EOL]         Preconditions.checkArgument(other.isNone() || other.isAll()); [EOL]         return other.unionWith(this); [EOL]     } [EOL] } <line_num>: 568,592
@Override [EOL] ConcreteType intersectWith(ConcreteType other) { [EOL]     if (other.isSingleton()) { [EOL]         if (alternatives.contains(other)) { [EOL]             return other; [EOL]         } else { [EOL]             return NONE; [EOL]         } [EOL]     } else if (other.isUnion()) { [EOL]         Set<ConcreteType> types = Sets.newHashSet(alternatives); [EOL]         types.retainAll(other.toUnion().alternatives); [EOL]         return createForTypes(types); [EOL]     } else { [EOL]         Preconditions.checkArgument(other.isNone() || other.isAll()); [EOL]         return other.intersectWith(this); [EOL]     } [EOL] } <line_num>: 594,609
Set<ConcreteType> getAlternatives() { [EOL]     return alternatives; [EOL] } <line_num>: 612,612
@Override [EOL] public boolean equals(Object obj) { [EOL]     return (obj instanceof ConcreteUnionType) && alternatives.equals(((ConcreteUnionType) obj).alternatives); [EOL] } <line_num>: 614,617
@Override [EOL] public int hashCode() { [EOL]     return alternatives.hashCode() ^ 0x5f6e7d8c; [EOL] } <line_num>: 619,621
@Override [EOL] public String toString() { [EOL]     List<String> names = Lists.newArrayList(); [EOL]     for (ConcreteType type : alternatives) { [EOL]         names.add(type.toString()); [EOL]     } [EOL]     Collections.sort(names); [EOL]     return "(" + Joiner.on(",").join(names) + ")"; [EOL] } <line_num>: 623,631
@Override [EOL] boolean isAll() { [EOL]     return true; [EOL] } <line_num>: 636,636
@Override [EOL] ConcreteType unionWith(ConcreteType other) { [EOL]     return this; [EOL] } <line_num>: 638,638
@Override [EOL] ConcreteType intersectWith(ConcreteType other) { [EOL]     return other; [EOL] } <line_num>: 640,640
@Override [EOL] public String toString() { [EOL]     return "*"; [EOL] } <line_num>: 642,642
@Override [EOL] public boolean equals(Object o) { [EOL]     return (o instanceof ConcreteUniqueType) && (id == ((ConcreteUniqueType) o).id); [EOL] } <line_num>: 662,665
@Override [EOL] public int hashCode() { [EOL]     return ConcreteUniqueType.class.hashCode() ^ id; [EOL] } <line_num>: 667,669
@Override [EOL] public String toString() { [EOL]     return "Unique$" + id; [EOL] } <line_num>: 671,671
ConcreteFunctionType createConcreteFunction(Node declaration, StaticScope<ConcreteType> parent); <line_num>: 682,683
ConcreteInstanceType createConcreteInstance(ObjectType instanceType); <line_num>: 686,686
ConcreteFunctionType getConcreteFunction(FunctionType function); <line_num>: 692,692
ConcreteInstanceType getConcreteInstance(ObjectType instance); <line_num>: 698,698
StaticScope<ConcreteType> createFunctionScope(Node declaration, StaticScope<ConcreteType> parent); <line_num>: 705,706
StaticScope<ConcreteType> createInstanceScope(ObjectType instanceType); <line_num>: 713,713
JSTypeRegistry getTypeRegistry(); <line_num>: 716,716
