StripCode(AbstractCompiler compiler, Set<String> stripTypes, Set<String> stripNameSuffixes, Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) { [EOL]     this.compiler = compiler; [EOL]     this.stripTypes = Sets.newHashSet(stripTypes); [EOL]     this.stripNameSuffixes = Sets.newHashSet(stripNameSuffixes); [EOL]     this.stripTypePrefixes = Sets.newHashSet(stripTypePrefixes); [EOL]     this.stripNamePrefixes = Sets.newHashSet(stripNamePrefixes); [EOL]     this.varsToRemove = Sets.newHashSet(); [EOL] } <line_num>: 68,80
public void enableTweakStripping() { [EOL]     stripTypes.add("goog.tweak"); [EOL] } <line_num>: 85,87
@Override [EOL] public void process(Node externs, Node root) { [EOL]     NodeTraversal.traverse(compiler, root, new Strip()); [EOL] } <line_num>: 89,92
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     switch(n.getType()) { [EOL]         case Token.VAR: [EOL]             removeVarDeclarationsByNameOrRvalue(t, n, parent); [EOL]             break; [EOL]         case Token.NAME: [EOL]             maybeRemoveReferenceToRemovedVariable(t, n, parent); [EOL]             break; [EOL]         case Token.ASSIGN: [EOL]         case Token.ASSIGN_BITOR: [EOL]         case Token.ASSIGN_BITXOR: [EOL]         case Token.ASSIGN_BITAND: [EOL]         case Token.ASSIGN_LSH: [EOL]         case Token.ASSIGN_RSH: [EOL]         case Token.ASSIGN_URSH: [EOL]         case Token.ASSIGN_ADD: [EOL]         case Token.ASSIGN_SUB: [EOL]         case Token.ASSIGN_MUL: [EOL]         case Token.ASSIGN_DIV: [EOL]         case Token.ASSIGN_MOD: [EOL]             maybeEliminateAssignmentByLvalueName(t, n, parent); [EOL]             break; [EOL]         case Token.CALL: [EOL]         case Token.NEW: [EOL]             maybeRemoveCall(t, n, parent); [EOL]             break; [EOL]         case Token.OBJECTLIT: [EOL]             eliminateKeysWithStripNamesFromObjLit(t, n); [EOL]             break; [EOL]         case Token.EXPR_RESULT: [EOL]             maybeEliminateExpressionByName(t, n, parent); [EOL]             break; [EOL]     } [EOL] } <line_num>: 101,140
void removeVarDeclarationsByNameOrRvalue(NodeTraversal t, Node n, Node parent) { [EOL]     for (Node nameNode = n.getFirstChild(); nameNode != null; nameNode = nameNode.getNext()) { [EOL]         String name = nameNode.getString(); [EOL]         if (isStripName(name) || isCallWhoseReturnValueShouldBeStripped(nameNode.getFirstChild())) { [EOL]             Scope scope = t.getScope(); [EOL]             varsToRemove.add(scope.getVar(name)); [EOL]             n.removeChild(nameNode); [EOL]             compiler.reportCodeChange(); [EOL]         } [EOL]     } [EOL]     if (!n.hasChildren()) { [EOL]         replaceWithEmpty(n, parent); [EOL]         compiler.reportCodeChange(); [EOL]     } [EOL] } <line_num>: 151,170
void maybeRemoveReferenceToRemovedVariable(NodeTraversal t, Node n, Node parent) { [EOL]     switch(parent.getType()) { [EOL]         case Token.VAR: [EOL]             break; [EOL]         case Token.GETPROP: [EOL]         case Token.GETELEM: [EOL]             if (parent.getFirstChild() == n && isReferenceToRemovedVar(t, n)) { [EOL]                 replaceHighestNestedCallWithNull(parent, parent.getParent()); [EOL]             } [EOL]             break; [EOL]         case Token.ASSIGN: [EOL]         case Token.ASSIGN_BITOR: [EOL]         case Token.ASSIGN_BITXOR: [EOL]         case Token.ASSIGN_BITAND: [EOL]         case Token.ASSIGN_LSH: [EOL]         case Token.ASSIGN_RSH: [EOL]         case Token.ASSIGN_URSH: [EOL]         case Token.ASSIGN_ADD: [EOL]         case Token.ASSIGN_SUB: [EOL]         case Token.ASSIGN_MUL: [EOL]         case Token.ASSIGN_DIV: [EOL]         case Token.ASSIGN_MOD: [EOL]             if (isReferenceToRemovedVar(t, n)) { [EOL]                 if (parent.getFirstChild() == n) { [EOL]                     Node gramps = parent.getParent(); [EOL]                     if (gramps.isExprResult()) { [EOL]                         Node greatGramps = gramps.getParent(); [EOL]                         replaceWithEmpty(gramps, greatGramps); [EOL]                         compiler.reportCodeChange(); [EOL]                     } else { [EOL]                         Node rvalue = n.getNext(); [EOL]                         parent.removeChild(rvalue); [EOL]                         gramps.replaceChild(parent, rvalue); [EOL]                         compiler.reportCodeChange(); [EOL]                     } [EOL]                 } else { [EOL]                     replaceWithNull(n, parent); [EOL]                     compiler.reportCodeChange(); [EOL]                 } [EOL]             } [EOL]             break; [EOL]         default: [EOL]             if (isReferenceToRemovedVar(t, n)) { [EOL]                 replaceWithNull(n, parent); [EOL]                 compiler.reportCodeChange(); [EOL]             } [EOL]             break; [EOL]     } [EOL] } <line_num>: 179,241
void replaceHighestNestedCallWithNull(Node node, Node parent) { [EOL]     Node ancestor = parent; [EOL]     Node ancestorChild = node; [EOL]     while (true) { [EOL]         if (ancestor.getFirstChild() != ancestorChild) { [EOL]             replaceWithNull(ancestorChild, ancestor); [EOL]             break; [EOL]         } [EOL]         if (ancestor.isExprResult()) { [EOL]             Node ancParent = ancestor.getParent(); [EOL]             replaceWithEmpty(ancestor, ancParent); [EOL]             break; [EOL]         } [EOL]         int type = ancestor.getType(); [EOL]         if (type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL) { [EOL]             replaceWithNull(ancestorChild, ancestor); [EOL]             break; [EOL]         } [EOL]         ancestorChild = ancestor; [EOL]         ancestor = ancestor.getParent(); [EOL]     } [EOL]     compiler.reportCodeChange(); [EOL] } <line_num>: 249,274
void maybeEliminateAssignmentByLvalueName(NodeTraversal t, Node n, Node parent) { [EOL]     Node lvalue = n.getFirstChild(); [EOL]     if (nameEndsWithFieldNameToStrip(lvalue) || qualifiedNameBeginsWithStripType(lvalue)) { [EOL]         if (parent.isExprResult()) { [EOL]             Node gramps = parent.getParent(); [EOL]             replaceWithEmpty(parent, gramps); [EOL]             compiler.reportCodeChange(); [EOL]         } else { [EOL]             t.report(n, STRIP_ASSIGNMENT_ERROR, lvalue.getQualifiedName()); [EOL]         } [EOL]     } [EOL] } <line_num>: 285,305
void maybeEliminateExpressionByName(NodeTraversal t, Node n, Node parent) { [EOL]     Node expression = n.getFirstChild(); [EOL]     if (nameEndsWithFieldNameToStrip(expression) || qualifiedNameBeginsWithStripType(expression)) { [EOL]         if (parent.isExprResult()) { [EOL]             Node gramps = parent.getParent(); [EOL]             replaceWithEmpty(parent, gramps); [EOL]         } else { [EOL]             replaceWithEmpty(n, parent); [EOL]         } [EOL]         compiler.reportCodeChange(); [EOL]     } [EOL] } <line_num>: 319,334
void maybeRemoveCall(NodeTraversal t, Node n, Node parent) { [EOL]     if (isMethodOrCtorCallThatTriggersRemoval(t, n, parent)) { [EOL]         replaceHighestNestedCallWithNull(n, parent); [EOL]     } [EOL] } <line_num>: 344,351
void eliminateKeysWithStripNamesFromObjLit(NodeTraversal t, Node n) { [EOL]     Node key = n.getFirstChild(); [EOL]     while (key != null) { [EOL]         if (isStripName(key.getString())) { [EOL]             Node value = key.getFirstChild(); [EOL]             Node next = key.getNext(); [EOL]             n.removeChild(key); [EOL]             key = next; [EOL]             compiler.reportCodeChange(); [EOL]         } else { [EOL]             key = key.getNext(); [EOL]         } [EOL]     } [EOL] } <line_num>: 360,378
boolean isCallWhoseReturnValueShouldBeStripped(@Nullable Node n) { [EOL]     return n != null && (n.isCall() || n.isNew()) && n.hasChildren() && (qualifiedNameBeginsWithStripType(n.getFirstChild()) || nameEndsWithFieldNameToStrip(n.getFirstChild())); [EOL] } <line_num>: 393,400
boolean qualifiedNameBeginsWithStripType(Node n) { [EOL]     String name = n.getQualifiedName(); [EOL]     return qualifiedNameBeginsWithStripType(name); [EOL] } <line_num>: 411,414
boolean qualifiedNameBeginsWithStripType(String name) { [EOL]     if (name != null) { [EOL]         for (String type : stripTypes) { [EOL]             if (name.equals(type) || name.startsWith(type + ".")) { [EOL]                 return true; [EOL]             } [EOL]         } [EOL]         for (String type : stripTypePrefixes) { [EOL]             if (name.startsWith(type)) { [EOL]                 return true; [EOL]             } [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 425,439
boolean isReferenceToRemovedVar(NodeTraversal t, Node n) { [EOL]     String name = n.getString(); [EOL]     Scope scope = t.getScope(); [EOL]     Scope.Var var = scope.getVar(name); [EOL]     return varsToRemove.contains(var); [EOL] } <line_num>: 449,454
boolean isMethodOrCtorCallThatTriggersRemoval(NodeTraversal t, Node n, Node parent) { [EOL]     Node function = n.getFirstChild(); [EOL]     if (function == null || !function.isGetProp()) { [EOL]         return false; [EOL]     } [EOL]     if (parent != null && parent.isName()) { [EOL]         Node gramps = parent.getParent(); [EOL]         if (gramps != null && gramps.isVar()) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     Node callee = function.getFirstChild(); [EOL]     return nameEndsWithFieldNameToStrip(callee) || nameEndsWithFieldNameToStrip(function) || qualifiedNameBeginsWithStripType(function) || actsOnStripType(t, n); [EOL] } <line_num>: 467,503
boolean nameEndsWithFieldNameToStrip(@Nullable Node n) { [EOL]     if (n != null && n.isGetProp()) { [EOL]         Node propNode = n.getLastChild(); [EOL]         return propNode != null && propNode.isString() && isStripName(propNode.getString()); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 513,520
private boolean actsOnStripType(NodeTraversal t, Node callNode) { [EOL]     SubclassRelationship classes = compiler.getCodingConvention().getClassesDefinedByCall(callNode); [EOL]     if (classes != null) { [EOL]         if (qualifiedNameBeginsWithStripType(classes.subclassName)) { [EOL]             return true; [EOL]         } [EOL]         if (qualifiedNameBeginsWithStripType(classes.superclassName)) { [EOL]             t.report(callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName); [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 532,551
boolean isStripName(String name) { [EOL]     if (stripNameSuffixes.contains(name) || stripNamePrefixes.contains(name)) { [EOL]         return true; [EOL]     } [EOL]     if ((name.length() == 0) || Character.isUpperCase(name.charAt(0))) { [EOL]         return false; [EOL]     } [EOL]     String lcName = name.toLowerCase(); [EOL]     for (String stripName : stripNamePrefixes) { [EOL]         if (lcName.startsWith(stripName.toLowerCase())) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     for (String stripName : stripNameSuffixes) { [EOL]         if (lcName.endsWith(stripName.toLowerCase())) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 560,584
void replaceWithNull(Node n, Node parent) { [EOL]     parent.replaceChild(n, IR.nullNode()); [EOL] } <line_num>: 593,595
void replaceWithEmpty(Node n, Node parent) { [EOL]     NodeUtil.removeChild(parent, n); [EOL] } <line_num>: 604,606
