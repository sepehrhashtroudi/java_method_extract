Denormalize(AbstractCompiler compiler) { [EOL]     this.compiler = compiler; [EOL] } <line_num>: 42,44
StripConstantAnnotations(AbstractCompiler compiler) { [EOL]     this.compiler = compiler; [EOL] } <line_num>: 134,136
@Override [EOL] public void process(Node externs, Node root) { [EOL]     NodeTraversal.traverse(compiler, root, this); [EOL] } <line_num>: 46,49
@Override [EOL] public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { [EOL]     return true; [EOL] } <line_num>: 51,54
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     maybeCollapseIntoForStatements(n, parent); [EOL] } <line_num>: 56,59
private void maybeCollapseIntoForStatements(Node n, Node parent) { [EOL]     if (parent == null || !NodeUtil.isStatementBlock(parent)) { [EOL]         return; [EOL]     } [EOL]     if (!n.isExprResult() && !n.isVar()) { [EOL]         return; [EOL]     } [EOL]     Node nextSibling = n.getNext(); [EOL]     if (nextSibling == null) { [EOL]         return; [EOL]     } else if (NodeUtil.isForIn(nextSibling)) { [EOL]         Node forNode = nextSibling; [EOL]         Node forVar = forNode.getFirstChild(); [EOL]         if (forVar.isName() && n.isVar() && n.hasOneChild()) { [EOL]             Node name = n.getFirstChild(); [EOL]             if (!name.hasChildren() && forVar.getString().equals(name.getString())) { [EOL]                 parent.removeChild(n); [EOL]                 forNode.replaceChild(forVar, n); [EOL]                 compiler.reportCodeChange(); [EOL]             } [EOL]         } [EOL]     } else if (nextSibling.isFor() && nextSibling.getFirstChild().isEmpty()) { [EOL]         if (NodeUtil.containsType(n, Token.IN)) { [EOL]             return; [EOL]         } [EOL]         Node forNode = nextSibling; [EOL]         Node oldInitializer = forNode.getFirstChild(); [EOL]         parent.removeChild(n); [EOL]         Node newInitializer; [EOL]         if (n.isVar()) { [EOL]             newInitializer = n; [EOL]         } else { [EOL]             Preconditions.checkState(n.hasOneChild()); [EOL]             newInitializer = n.getFirstChild(); [EOL]             n.removeChild(newInitializer); [EOL]         } [EOL]         forNode.replaceChild(oldInitializer, newInitializer); [EOL]         compiler.reportCodeChange(); [EOL]     } [EOL] } <line_num>: 65,127
@Override [EOL] public void process(Node externs, Node js) { [EOL]     NodeTraversal.traverse(compiler, externs, this); [EOL]     NodeTraversal.traverse(compiler, js, this); [EOL] } <line_num>: 138,142
@Override [EOL] public void visit(NodeTraversal t, Node node, Node parent) { [EOL]     if (node.isName() || node.isString() || node.isStringKey()) { [EOL]         node.removeProp(Node.IS_CONSTANT_NAME); [EOL]     } [EOL] } <line_num>: 144,149
