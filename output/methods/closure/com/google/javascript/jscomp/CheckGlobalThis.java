CheckGlobalThis(AbstractCompiler compiler) { [EOL]     this.compiler = compiler; [EOL] } <line_num>: 71,73
@Override [EOL] public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { [EOL]     if (n.isFunction()) { [EOL]         JSDocInfo jsDoc = getFunctionJsDocInfo(n); [EOL]         if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) { [EOL]             return false; [EOL]         } [EOL]         int pType = parent.getType(); [EOL]         if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME || pType == Token.ASSIGN || pType == Token.STRING_KEY)) { [EOL]             return false; [EOL]         } [EOL]         Node gramps = parent.getParent(); [EOL]         if (NodeUtil.isObjectLitKey(parent, gramps)) { [EOL]             JSDocInfo maybeLends = gramps.getJSDocInfo(); [EOL]             if (maybeLends != null && maybeLends.getLendsName() != null && maybeLends.getLendsName().endsWith(".prototype")) { [EOL]                 return false; [EOL]             } [EOL]         } [EOL]     } [EOL]     if (parent != null && parent.isAssign()) { [EOL]         Node lhs = parent.getFirstChild(); [EOL]         Node rhs = lhs.getNext(); [EOL]         if (n == lhs) { [EOL]             if (assignLhsChild == null) { [EOL]                 assignLhsChild = lhs; [EOL]             } [EOL]         } else { [EOL]             if (NodeUtil.isGet(lhs)) { [EOL]                 if (lhs.isGetProp() && lhs.getLastChild().getString().equals("prototype")) { [EOL]                     return false; [EOL]                 } [EOL]                 Node llhs = lhs.getFirstChild(); [EOL]                 if (llhs.isGetProp() && llhs.getLastChild().getString().equals("prototype")) { [EOL]                     return false; [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 79,152
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (n.isThis() && shouldReportThis(n, parent)) { [EOL]         compiler.report(t.makeError(n, GLOBAL_THIS)); [EOL]     } [EOL]     if (n == assignLhsChild) { [EOL]         assignLhsChild = null; [EOL]     } [EOL] } <line_num>: 154,162
private boolean shouldReportThis(Node n, Node parent) { [EOL]     if (assignLhsChild != null) { [EOL]         return true; [EOL]     } [EOL]     return parent != null && NodeUtil.isGet(parent); [EOL] } <line_num>: 164,172
private JSDocInfo getFunctionJsDocInfo(Node n) { [EOL]     JSDocInfo jsDoc = n.getJSDocInfo(); [EOL]     Node parent = n.getParent(); [EOL]     if (jsDoc == null) { [EOL]         int parentType = parent.getType(); [EOL]         if (parentType == Token.NAME || parentType == Token.ASSIGN) { [EOL]             jsDoc = parent.getJSDocInfo(); [EOL]             if (jsDoc == null && parentType == Token.NAME) { [EOL]                 Node gramps = parent.getParent(); [EOL]                 if (gramps.isVar()) { [EOL]                     jsDoc = gramps.getJSDocInfo(); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return jsDoc; [EOL] } <line_num>: 184,200
