ReplaceMessagesForChrome(AbstractCompiler compiler, JsMessage.IdGenerator idGenerator, boolean checkDuplicatedMessages, JsMessage.Style style) { [EOL]     super(compiler, checkDuplicatedMessages, style, idGenerator); [EOL] } <line_num>: 39,44
private static Node getChromeI18nGetMessageNode(String messageId) { [EOL]     Node chromeI18n = IR.getprop(IR.name("chrome"), IR.string("i18n")); [EOL]     Node getMessage = IR.getprop(chromeI18n, IR.string("getMessage")); [EOL]     return IR.call(getMessage, IR.string(messageId)); [EOL] } <line_num>: 46,50
@Override [EOL] protected void processJsMessage(JsMessage message, JsMessageDefinition definition) { [EOL]     try { [EOL]         Node msgNode = definition.getMessageNode(); [EOL]         Node newValue = getNewValueNode(msgNode, message); [EOL]         newValue.copyInformationFromForTree(msgNode); [EOL]         definition.getMessageParentNode().replaceChild(msgNode, newValue); [EOL]         compiler.reportCodeChange(); [EOL]     } catch (MalformedException e) { [EOL]         compiler.report(JSError.make(message.getSourceName(), e.getNode(), MESSAGE_TREE_MALFORMED, e.getMessage())); [EOL]     } [EOL] } <line_num>: 52,66
private Node getNewValueNode(Node origNode, JsMessage message) throws MalformedException { [EOL]     Node newValueNode = getChromeI18nGetMessageNode(message.getId()); [EOL]     if (!message.placeholders().isEmpty()) { [EOL]         Node placeholderValues = origNode.getLastChild(); [EOL]         checkNode(placeholderValues, Token.OBJECTLIT); [EOL]         List<String> placeholderNames = Lists.newArrayList(); [EOL]         for (CharSequence cs : message.parts()) { [EOL]             if (cs instanceof PlaceholderReference) { [EOL]                 String placeholderName = ((PlaceholderReference) cs).getName(); [EOL]                 placeholderNames.add(placeholderName); [EOL]             } [EOL]         } [EOL]         Collections.sort(placeholderNames); [EOL]         Node placeholderValueArray = IR.arraylit(); [EOL]         for (String name : placeholderNames) { [EOL]             Node value = getPlaceholderValue(placeholderValues, name); [EOL]             if (value == null) { [EOL]                 throw new MalformedException("No value was provided for placeholder " + name, origNode); [EOL]             } [EOL]             placeholderValueArray.addChildToBack(value); [EOL]         } [EOL]         newValueNode.addChildToBack(placeholderValueArray); [EOL]     } [EOL]     newValueNode.copyInformationFromForTree(origNode); [EOL]     return newValueNode; [EOL] } <line_num>: 68,102
private Node getPlaceholderValue(Node placeholderValues, String placeholderName) { [EOL]     for (Node key : placeholderValues.children()) { [EOL]         if (key.getString().equals(placeholderName)) { [EOL]             return key.getFirstChild().cloneTree(); [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 104,112
