private ByPathWarningsGuard(List<String> paths, boolean include, CheckLevel level) { [EOL]     Preconditions.checkArgument(paths != null); [EOL]     Preconditions.checkArgument(level == CheckLevel.OFF || level == CheckLevel.ERROR); [EOL]     this.paths = paths; [EOL]     this.include = include; [EOL]     this.level = level; [EOL]     this.priority = level == CheckLevel.ERROR ? WarningsGuard.Priority.STRICT.value : WarningsGuard.Priority.FILTER_BY_PATH.value; [EOL] } <line_num>: 57,68
public static ByPathWarningsGuard forPath(List<String> paths, CheckLevel level) { [EOL]     return new ByPathWarningsGuard(paths, true, level); [EOL] } <line_num>: 76,79
public static ByPathWarningsGuard exceptPath(List<String> paths, CheckLevel level) { [EOL]     return new ByPathWarningsGuard(paths, false, level); [EOL] } <line_num>: 87,90
@Override [EOL] public CheckLevel level(JSError error) { [EOL]     final String errorPath = error.sourceName; [EOL]     CheckLevel defaultLevel = error.getDefaultLevel(); [EOL]     if (defaultLevel != CheckLevel.ERROR && errorPath != null) { [EOL]         boolean inPath = false; [EOL]         for (String path : paths) { [EOL]             inPath |= errorPath.contains(path); [EOL]         } [EOL]         if (inPath == include) { [EOL]             return level; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 92,106
@Override [EOL] protected int getPriority() { [EOL]     return priority; [EOL] } <line_num>: 108,111
