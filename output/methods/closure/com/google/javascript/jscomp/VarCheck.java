VarCheck(AbstractCompiler compiler) { [EOL]     this(compiler, false); [EOL] } <line_num>: 82,84
VarCheck(AbstractCompiler compiler, boolean sanityCheck) { [EOL]     this.compiler = compiler; [EOL]     this.strictExternCheck = compiler.getErrorLevel(JSError.make("", 0, 0, UNDEFINED_EXTERN_VAR_ERROR)) == CheckLevel.ERROR; [EOL]     this.sanityCheck = sanityCheck; [EOL] } <line_num>: 86,91
@Override [EOL] public void process(Node externs, Node root) { [EOL]     if (!sanityCheck) { [EOL]         NodeTraversal.traverse(compiler, externs, new NameRefInExternsCheck()); [EOL]     } [EOL]     NodeTraversal.traverseRoots(compiler, Lists.newArrayList(externs, root), this); [EOL]     for (String varName : varsToDeclareInExterns) { [EOL]         createSynthesizedExternVar(varName); [EOL]     } [EOL] } <line_num>: 93,107
@Override [EOL] public void hotSwapScript(Node scriptRoot, Node originalRoot) { [EOL]     Preconditions.checkState(scriptRoot.isScript()); [EOL]     NodeTraversal t = new NodeTraversal(compiler, this); [EOL]     t.traverseWithScope(scriptRoot, SyntacticScopeCreator.generateUntypedTopScope(compiler)); [EOL] } <line_num>: 109,118
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (!n.isName()) { [EOL]         return; [EOL]     } [EOL]     String varName = n.getString(); [EOL]     if (varName.isEmpty()) { [EOL]         Preconditions.checkState(parent.isFunction()); [EOL]         Preconditions.checkState(NodeUtil.isFunctionExpression(parent)); [EOL]         return; [EOL]     } [EOL]     if ((parent.isVar() || NodeUtil.isFunctionDeclaration(parent)) && varsToDeclareInExterns.contains(varName)) { [EOL]         createSynthesizedExternVar(varName); [EOL]         n.addSuppression("duplicate"); [EOL]     } [EOL]     Scope scope = t.getScope(); [EOL]     Scope.Var var = scope.getVar(varName); [EOL]     if (var == null) { [EOL]         if (NodeUtil.isFunctionExpression(parent)) { [EOL]         } else { [EOL]             if (!strictExternCheck || !t.getInput().isExtern()) { [EOL]                 t.report(n, UNDEFINED_VAR_ERROR, varName); [EOL]             } [EOL]             if (sanityCheck) { [EOL]                 throw new IllegalStateException("Unexpected variable " + varName); [EOL]             } else { [EOL]                 createSynthesizedExternVar(varName); [EOL]                 scope.getGlobalScope().declare(varName, n, null, getSynthesizedExternsInput()); [EOL]             } [EOL]         } [EOL]         return; [EOL]     } [EOL]     CompilerInput currInput = t.getInput(); [EOL]     CompilerInput varInput = var.input; [EOL]     if (currInput == varInput || currInput == null || varInput == null) { [EOL]         return; [EOL]     } [EOL]     JSModule currModule = currInput.getModule(); [EOL]     JSModule varModule = varInput.getModule(); [EOL]     JSModuleGraph moduleGraph = compiler.getModuleGraph(); [EOL]     if (!sanityCheck && varModule != currModule && varModule != null && currModule != null) { [EOL]         if (moduleGraph.dependsOn(currModule, varModule)) { [EOL]         } else { [EOL]             if (scope.isGlobal()) { [EOL]                 if (moduleGraph.dependsOn(varModule, currModule)) { [EOL]                     t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName); [EOL]                 } else { [EOL]                     t.report(n, MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName); [EOL]                 } [EOL]             } else { [EOL]                 t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 120,203
private void createSynthesizedExternVar(String varName) { [EOL]     Node nameNode = IR.name(varName); [EOL]     if (compiler.getCodingConvention().isConstant(varName)) { [EOL]         nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); [EOL]     } [EOL]     getSynthesizedExternsRoot().addChildToBack(IR.var(nameNode)); [EOL]     varsToDeclareInExterns.remove(varName); [EOL]     compiler.reportCodeChange(); [EOL] } <line_num>: 209,226
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (n.isName()) { [EOL]         switch(parent.getType()) { [EOL]             case Token.VAR: [EOL]             case Token.FUNCTION: [EOL]             case Token.PARAM_LIST: [EOL]                 break; [EOL]             case Token.GETPROP: [EOL]                 if (n == parent.getFirstChild()) { [EOL]                     Scope scope = t.getScope(); [EOL]                     Scope.Var var = scope.getVar(n.getString()); [EOL]                     if (var == null) { [EOL]                         t.report(n, UNDEFINED_EXTERN_VAR_ERROR, n.getString()); [EOL]                         varsToDeclareInExterns.add(n.getString()); [EOL]                     } [EOL]                 } [EOL]                 break; [EOL]             default: [EOL]                 t.report(n, NAME_REFERENCE_IN_EXTERNS_ERROR, n.getString()); [EOL]                 Scope scope = t.getScope(); [EOL]                 Scope.Var var = scope.getVar(n.getString()); [EOL]                 if (var == null) { [EOL]                     varsToDeclareInExterns.add(n.getString()); [EOL]                 } [EOL]                 break; [EOL]         } [EOL]     } [EOL] } <line_num>: 233,263
private CompilerInput getSynthesizedExternsInput() { [EOL]     return compiler.getSynthesizedExternsInput(); [EOL] } <line_num>: 267,269
private Node getSynthesizedExternsRoot() { [EOL]     if (synthesizedExternsRoot == null) { [EOL]         CompilerInput synthesizedExterns = getSynthesizedExternsInput(); [EOL]         synthesizedExternsRoot = synthesizedExterns.getAstRoot(compiler); [EOL]     } [EOL]     return synthesizedExternsRoot; [EOL] } <line_num>: 272,278
