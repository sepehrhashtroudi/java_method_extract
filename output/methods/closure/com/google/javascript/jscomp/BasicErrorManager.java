ErrorWithLevel(JSError error, CheckLevel level) { [EOL]     this.error = error; [EOL]     this.level = level; [EOL] } <line_num>: 186,189
@Override [EOL] public void report(CheckLevel level, JSError error) { [EOL]     if (messages.add(new ErrorWithLevel(error, level))) { [EOL]         if (level == CheckLevel.ERROR) { [EOL]             errorCount++; [EOL]         } else if (level == CheckLevel.WARNING) { [EOL]             warningCount++; [EOL]         } [EOL]     } [EOL] } <line_num>: 44,53
@Override [EOL] public void generateReport() { [EOL]     for (ErrorWithLevel message : messages) { [EOL]         println(message.level, message.error); [EOL]     } [EOL]     printSummary(); [EOL] } <line_num>: 55,61
public abstract void println(CheckLevel level, JSError error); <line_num>: 67,67
protected abstract void printSummary(); <line_num>: 72,72
@Override [EOL] public int getErrorCount() { [EOL]     return errorCount; [EOL] } <line_num>: 74,77
@Override [EOL] public int getWarningCount() { [EOL]     return warningCount; [EOL] } <line_num>: 79,82
@Override [EOL] public JSError[] getErrors() { [EOL]     return toArray(CheckLevel.ERROR); [EOL] } <line_num>: 84,87
@Override [EOL] public JSError[] getWarnings() { [EOL]     return toArray(CheckLevel.WARNING); [EOL] } <line_num>: 89,92
@Override [EOL] public void setTypedPercent(double typedPercent) { [EOL]     this.typedPercent = typedPercent; [EOL] } <line_num>: 94,97
@Override [EOL] public double getTypedPercent() { [EOL]     return typedPercent; [EOL] } <line_num>: 99,102
private JSError[] toArray(CheckLevel level) { [EOL]     List<JSError> errors = new ArrayList<JSError>(messages.size()); [EOL]     for (ErrorWithLevel p : messages) { [EOL]         if (p.level == level) { [EOL]             errors.add(p.error); [EOL]         } [EOL]     } [EOL]     return errors.toArray(new JSError[errors.size()]); [EOL] } <line_num>: 104,112
@Override [EOL] public int compare(ErrorWithLevel p1, ErrorWithLevel p2) { [EOL]     if (p2 == null) { [EOL]         if (p1 == null) { [EOL]             return 0; [EOL]         } else { [EOL]             return P1_GT_P2; [EOL]         } [EOL]     } [EOL]     if (p1.level != p2.level) { [EOL]         return p2.level.compareTo(p1.level); [EOL]     } [EOL]     String source1 = p1.error.sourceName; [EOL]     String source2 = p2.error.sourceName; [EOL]     if (source1 != null && source2 != null) { [EOL]         int sourceCompare = source1.compareTo(source2); [EOL]         if (sourceCompare != 0) { [EOL]             return sourceCompare; [EOL]         } [EOL]     } else if (source1 == null && source2 != null) { [EOL]         return P1_LT_P2; [EOL]     } else if (source1 != null && source2 == null) { [EOL]         return P1_GT_P2; [EOL]     } [EOL]     int lineno1 = p1.error.lineNumber; [EOL]     int lineno2 = p2.error.lineNumber; [EOL]     if (lineno1 != lineno2) { [EOL]         return lineno1 - lineno2; [EOL]     } else if (lineno1 < 0 && 0 <= lineno2) { [EOL]         return P1_LT_P2; [EOL]     } else if (0 <= lineno1 && lineno2 < 0) { [EOL]         return P1_GT_P2; [EOL]     } [EOL]     int charno1 = p1.error.getCharno(); [EOL]     int charno2 = p2.error.getCharno(); [EOL]     if (charno1 != charno2) { [EOL]         return charno1 - charno2; [EOL]     } else if (charno1 < 0 && 0 <= charno2) { [EOL]         return P1_LT_P2; [EOL]     } else if (0 <= charno1 && charno2 < 0) { [EOL]         return P1_GT_P2; [EOL]     } [EOL]     return p1.error.description.compareTo(p2.error.description); [EOL] } <line_num>: 128,179
