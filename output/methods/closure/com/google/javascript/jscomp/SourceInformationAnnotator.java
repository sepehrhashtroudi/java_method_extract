public SourceInformationAnnotator(String sourceFile, boolean doSanityChecks) { [EOL]     this.sourceFile = sourceFile; [EOL]     this.doSanityChecks = doSanityChecks; [EOL] } <line_num>: 47,51
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (doSanityChecks && sourceFile != null) { [EOL]         Preconditions.checkState(sourceFile.equals(n.getSourceFileName())); [EOL]     } [EOL]     switch(n.getType()) { [EOL]         case Token.GETPROP: [EOL]             Node propNode = n.getLastChild(); [EOL]             setOriginalName(n, propNode.getString()); [EOL]             break; [EOL]         case Token.FUNCTION: [EOL]             String functionName = NodeUtil.getNearestFunctionName(n); [EOL]             if (functionName != null) { [EOL]                 setOriginalName(n, functionName); [EOL]             } [EOL]             break; [EOL]         case Token.NAME: [EOL]             setOriginalName(n, n.getString()); [EOL]             break; [EOL]         case Token.OBJECTLIT: [EOL]             for (Node key = n.getFirstChild(); key != null; key = key.getNext()) { [EOL]                 if (!key.isQuotedString()) { [EOL]                     setOriginalName(key, key.getString()); [EOL]                 } [EOL]             } [EOL]             break; [EOL]     } [EOL] } <line_num>: 53,89
void setOriginalName(Node n, String name) { [EOL]     if (!name.isEmpty() && n.getProp(Node.ORIGINALNAME_PROP) == null) { [EOL]         n.putProp(Node.ORIGINALNAME_PROP, name); [EOL]     } [EOL] } <line_num>: 91,95
