public ConstCheck(AbstractCompiler compiler) { [EOL]     this.compiler = compiler; [EOL]     this.initializedConstants = new HashSet<Scope.Var>(); [EOL] } <line_num>: 47,50
@Override [EOL] public void process(Node externs, Node root) { [EOL]     Preconditions.checkState(compiler.getLifeCycleStage().isNormalized()); [EOL]     NodeTraversal.traverse(compiler, root, this); [EOL] } <line_num>: 52,56
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     switch(n.getType()) { [EOL]         case Token.NAME: [EOL]             if (parent != null && parent.isVar() && n.hasChildren()) { [EOL]                 String name = n.getString(); [EOL]                 Scope.Var var = t.getScope().getVar(name); [EOL]                 if (isConstant(var)) { [EOL]                     if (initializedConstants.contains(var)) { [EOL]                         reportError(t, n, name); [EOL]                     } else { [EOL]                         initializedConstants.add(var); [EOL]                     } [EOL]                 } [EOL]             } [EOL]             break; [EOL]         case Token.ASSIGN: [EOL]         case Token.ASSIGN_BITOR: [EOL]         case Token.ASSIGN_BITXOR: [EOL]         case Token.ASSIGN_BITAND: [EOL]         case Token.ASSIGN_LSH: [EOL]         case Token.ASSIGN_RSH: [EOL]         case Token.ASSIGN_URSH: [EOL]         case Token.ASSIGN_ADD: [EOL]         case Token.ASSIGN_SUB: [EOL]         case Token.ASSIGN_MUL: [EOL]         case Token.ASSIGN_DIV: [EOL]         case Token.ASSIGN_MOD: [EOL]             { [EOL]                 Node lhs = n.getFirstChild(); [EOL]                 if (lhs.isName()) { [EOL]                     String name = lhs.getString(); [EOL]                     Scope.Var var = t.getScope().getVar(name); [EOL]                     if (isConstant(var)) { [EOL]                         if (initializedConstants.contains(var)) { [EOL]                             reportError(t, n, name); [EOL]                         } else { [EOL]                             initializedConstants.add(var); [EOL]                         } [EOL]                     } [EOL]                 } [EOL]                 break; [EOL]             } [EOL]         case Token.INC: [EOL]         case Token.DEC: [EOL]             { [EOL]                 Node lhs = n.getFirstChild(); [EOL]                 if (lhs.isName()) { [EOL]                     String name = lhs.getString(); [EOL]                     Scope.Var var = t.getScope().getVar(name); [EOL]                     if (isConstant(var)) { [EOL]                         reportError(t, n, name); [EOL]                     } [EOL]                 } [EOL]                 break; [EOL]             } [EOL]     } [EOL] } <line_num>: 58,117
private boolean isConstant(Scope.Var var) { [EOL]     return var != null && var.isConst(); [EOL] } <line_num>: 123,125
void reportError(NodeTraversal t, Node n, String name) { [EOL]     compiler.report(t.makeError(n, CONST_REASSIGNED_VALUE_ERROR, name)); [EOL] } <line_num>: 130,132
