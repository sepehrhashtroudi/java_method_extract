Collapse(Node startNode, Node endNode, Node parent) { [EOL]     this.startNode = startNode; [EOL]     this.endNode = endNode; [EOL]     this.parent = parent; [EOL] } <line_num>: 84,88
CollapseVariableDeclarations(AbstractCompiler compiler) { [EOL]     Preconditions.checkState(!compiler.getLifeCycleStage().isNormalized()); [EOL]     this.compiler = compiler; [EOL] } <line_num>: 103,106
@Override [EOL] public void process(Node externs, Node root) { [EOL]     collapses.clear(); [EOL]     nodesToCollapse.clear(); [EOL]     NodeTraversal.traverse(compiler, root, new GatherCollapses()); [EOL]     if (!collapses.isEmpty()) { [EOL]         applyCollapses(); [EOL]         compiler.reportCodeChange(); [EOL]     } [EOL] } <line_num>: 108,119
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (n.isVar()) { [EOL]         blacklistStubVars(t, n); [EOL]     } [EOL]     if (!n.isVar() && !canBeRedeclared(n, t.getScope())) [EOL]         return; [EOL]     if (nodesToCollapse.contains(n)) [EOL]         return; [EOL]     if (parent.isIf()) [EOL]         return; [EOL]     Node varNode = n; [EOL]     boolean hasVar = n.isVar(); [EOL]     n = n.getNext(); [EOL]     boolean hasNodesToCollapse = false; [EOL]     while (n != null && (n.isVar() || canBeRedeclared(n, t.getScope()))) { [EOL]         if (n.isVar()) { [EOL]             blacklistStubVars(t, n); [EOL]             hasVar = true; [EOL]         } [EOL]         nodesToCollapse.add(n); [EOL]         hasNodesToCollapse = true; [EOL]         n = n.getNext(); [EOL]     } [EOL]     if (hasNodesToCollapse && hasVar) { [EOL]         nodesToCollapse.add(varNode); [EOL]         collapses.add(new Collapse(varNode, n, parent)); [EOL]     } [EOL] } <line_num>: 136,179
private void blacklistStubVars(NodeTraversal t, Node varNode) { [EOL]     for (Node child = varNode.getFirstChild(); child != null; child = child.getNext()) { [EOL]         if (child.getFirstChild() == null) { [EOL]             blacklistedVars.add(t.getScope().getVar(child.getString())); [EOL]         } [EOL]     } [EOL] } <line_num>: 181,188
private boolean canBeRedeclared(Node n, Scope s) { [EOL]     if (!NodeUtil.isExprAssign(n)) { [EOL]         return false; [EOL]     } [EOL]     Node assign = n.getFirstChild(); [EOL]     Node lhs = assign.getFirstChild(); [EOL]     if (!lhs.isName()) { [EOL]         return false; [EOL]     } [EOL]     Var var = s.getVar(lhs.getString()); [EOL]     return var != null && var.getScope() == s && !isNamedParameter(var) && !blacklistedVars.contains(var); [EOL] } <line_num>: 190,206
private boolean isNamedParameter(Var v) { [EOL]     return v.getParentNode().isParamList(); [EOL] } <line_num>: 209,211
private void applyCollapses() { [EOL]     for (Collapse collapse : collapses) { [EOL]         Node var = new Node(Token.VAR); [EOL]         var.copyInformationFrom(collapse.startNode); [EOL]         collapse.parent.addChildBefore(var, collapse.startNode); [EOL]         boolean redeclaration = false; [EOL]         for (Node n = collapse.startNode; n != collapse.endNode; ) { [EOL]             Node next = n.getNext(); [EOL]             Preconditions.checkState(var.getNext() == n); [EOL]             collapse.parent.removeChildAfter(var); [EOL]             if (n.isVar()) { [EOL]                 while (n.hasChildren()) { [EOL]                     var.addChildToBack(n.removeFirstChild()); [EOL]                 } [EOL]             } else { [EOL]                 Node assign = n.getFirstChild(); [EOL]                 Node lhs = assign.getFirstChild(); [EOL]                 Preconditions.checkState(lhs.isName()); [EOL]                 Node rhs = assign.getLastChild(); [EOL]                 lhs.addChildToBack(rhs.detachFromParent()); [EOL]                 var.addChildToBack(lhs.detachFromParent()); [EOL]                 redeclaration = true; [EOL]             } [EOL]             n = next; [EOL]         } [EOL]         if (redeclaration) { [EOL]             JSDocInfo info = new JSDocInfo(); [EOL]             info.addSuppression("duplicate"); [EOL]             var.setJSDocInfo(info); [EOL]         } [EOL]     } [EOL] } <line_num>: 213,249
