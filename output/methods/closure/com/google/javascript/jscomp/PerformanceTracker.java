public Stats(String pass) { [EOL]     this.pass = pass; [EOL] } <line_num>: 68,70
PerformanceTracker(Node jsRoot, TracerMode mode) { [EOL]     this.jsRoot = jsRoot; [EOL]     switch(mode) { [EOL]         case TIMING_ONLY: [EOL]             this.trackSize = false; [EOL]             this.trackGzippedSize = false; [EOL]             break; [EOL]         case RAW_SIZE: [EOL]             this.trackSize = true; [EOL]             this.trackGzippedSize = false; [EOL]             break; [EOL]         case ALL: [EOL]             this.trackSize = true; [EOL]             this.trackGzippedSize = true; [EOL]             break; [EOL]         case OFF: [EOL]         default: [EOL]             throw new UnsupportedOperationException(); [EOL]     } [EOL] } <line_num>: 81,103
private CodeSizeEstimatePrinter(boolean trackGzippedSize) { [EOL]     this.trackGzippedSize = trackGzippedSize; [EOL]     try { [EOL]         stream = new GZIPOutputStream(output); [EOL]     } catch (IOException e) { [EOL]         throw new RuntimeException(e); [EOL]     } [EOL] } <line_num>: 314,322
CodeChangeHandler getCodeChangeHandler() { [EOL]     return codeChange; [EOL] } <line_num>: 105,107
void recordPassStart(String passName) { [EOL]     currentRunningPass.push(passName); [EOL]     codeChange.reset(); [EOL] } <line_num>: 109,112
void recordPassStop(String passName, long result) { [EOL]     String currentPassName = currentRunningPass.pop(); [EOL]     if (!passName.equals(currentPassName)) { [EOL]         throw new RuntimeException(passName + " is not running."); [EOL]     } [EOL]     CodeSizeEstimatePrinter printer = null; [EOL]     if (codeChange.hasCodeChanged() && (trackSize || trackGzippedSize)) { [EOL]         printer = estimateCodeSize(jsRoot); [EOL]     } [EOL]     Stats logStats = new Stats(currentPassName); [EOL]     log.add(logStats); [EOL]     updateStats(logStats, result, printer); [EOL]     Stats summaryStats = summary.get(passName); [EOL]     if (summaryStats == null) { [EOL]         summaryStats = new Stats(passName); [EOL]         summary.put(passName, summaryStats); [EOL]     } [EOL]     updateStats(summaryStats, result, printer); [EOL]     if (printer != null) { [EOL]         if (trackSize) { [EOL]             curCodeSizeEstimate = printer.calcSize(); [EOL]         } [EOL]         if (trackGzippedSize) { [EOL]             curZippedCodeSizeEstimate = printer.calcZippedSize(); [EOL]         } [EOL]     } [EOL] } <line_num>: 120,150
private void updateStats(Stats stats, long result, CodeSizeEstimatePrinter printer) { [EOL]     stats.runtime += result; [EOL]     stats.runs += 1; [EOL]     if (codeChange.hasCodeChanged()) { [EOL]         stats.changes += 1; [EOL]     } [EOL]     if (printer != null) { [EOL]         recordSizeChange(curCodeSizeEstimate, printer.calcSize(), stats); [EOL]         recordGzSizeChange(curZippedCodeSizeEstimate, printer.calcZippedSize(), stats); [EOL]     } [EOL] } <line_num>: 152,166
private static void recordSizeChange(int oldSize, int newSize, Stats record) { [EOL]     if (oldSize != -1) { [EOL]         int delta = oldSize - newSize; [EOL]         if (delta > 0) { [EOL]             record.diff += delta; [EOL]         } [EOL]     } [EOL]     if (newSize != -1) { [EOL]         record.size = newSize; [EOL]     } [EOL] } <line_num>: 171,181
private static void recordGzSizeChange(int oldSize, int newSize, Stats record) { [EOL]     if (oldSize != -1) { [EOL]         int delta = oldSize - newSize; [EOL]         if (delta > 0) { [EOL]             record.gzDiff += delta; [EOL]         } [EOL]     } [EOL]     if (newSize != -1) { [EOL]         record.gzSize = newSize; [EOL]     } [EOL] } <line_num>: 186,197
private final CodeSizeEstimatePrinter estimateCodeSize(Node root) { [EOL]     CodeSizeEstimatePrinter cp = new CodeSizeEstimatePrinter(trackGzippedSize); [EOL]     CodeGenerator cg = CodeGenerator.forCostEstimation(cp); [EOL]     cg.add(root); [EOL]     return cp; [EOL] } <line_num>: 199,204
public ImmutableMap<String, Stats> getStats() { [EOL]     if (summaryCopy == null) { [EOL]         summaryCopy = ImmutableMap.copyOf(summary); [EOL]     } [EOL]     return summaryCopy; [EOL] } <line_num>: 206,211
@Override [EOL] public int compare(Entry<String, Stats> e1, Entry<String, Stats> e2) { [EOL]     return (int) (e1.getValue().runtime - e2.getValue().runtime); [EOL] } <line_num>: 214,217
public void outputTracerReport(PrintStream pstr) { [EOL]     JvmMetrics.maybeWriteJvmMetrics(pstr, "verbose:pretty:all"); [EOL]     OutputStreamWriter output = new OutputStreamWriter(pstr); [EOL]     try { [EOL]         int runtime = 0; [EOL]         int runs = 0; [EOL]         int changes = 0; [EOL]         int diff = 0; [EOL]         int gzDiff = 0; [EOL]         output.write("Summary:\n"); [EOL]         output.write("pass,runtime,runs,changingRuns,reduction,gzReduction\n"); [EOL]         ArrayList<Entry<String, Stats>> a = new ArrayList<Entry<String, Stats>>(); [EOL]         for (Entry<String, Stats> entry : summary.entrySet()) { [EOL]             a.add(entry); [EOL]         } [EOL]         Collections.sort(a, new CmpEntries()); [EOL]         for (Entry<String, Stats> entry : a) { [EOL]             String key = entry.getKey(); [EOL]             Stats stats = entry.getValue(); [EOL]             output.write(key); [EOL]             output.write(","); [EOL]             output.write(String.valueOf(stats.runtime)); [EOL]             runtime += stats.runtime; [EOL]             output.write(","); [EOL]             output.write(String.valueOf(stats.runs)); [EOL]             runs += stats.runs; [EOL]             output.write(","); [EOL]             output.write(String.valueOf(stats.changes)); [EOL]             changes += stats.changes; [EOL]             output.write(","); [EOL]             output.write(String.valueOf(stats.diff)); [EOL]             diff += stats.diff; [EOL]             output.write(","); [EOL]             output.write(String.valueOf(stats.gzDiff)); [EOL]             gzDiff += stats.gzDiff; [EOL]             output.write("\n"); [EOL]         } [EOL]         output.write("TOTAL"); [EOL]         output.write(","); [EOL]         output.write(String.valueOf(runtime)); [EOL]         output.write(","); [EOL]         output.write(String.valueOf(runs)); [EOL]         output.write(","); [EOL]         output.write(String.valueOf(changes)); [EOL]         output.write(","); [EOL]         output.write(String.valueOf(diff)); [EOL]         output.write(","); [EOL]         output.write(String.valueOf(gzDiff)); [EOL]         output.write("\n"); [EOL]         output.write("\n"); [EOL]         output.write("Log:\n"); [EOL]         output.write("pass,runtime,runs,changingRuns,reduction,gzReduction,size,gzSize\n"); [EOL]         for (Stats stats : log) { [EOL]             output.write(stats.pass); [EOL]             output.write(","); [EOL]             output.write(String.valueOf(stats.runtime)); [EOL]             output.write(","); [EOL]             output.write(String.valueOf(stats.runs)); [EOL]             output.write(","); [EOL]             output.write(String.valueOf(stats.changes)); [EOL]             output.write(","); [EOL]             output.write(String.valueOf(stats.diff)); [EOL]             output.write(","); [EOL]             output.write(String.valueOf(stats.gzDiff)); [EOL]             output.write(","); [EOL]             output.write(String.valueOf(stats.size)); [EOL]             output.write(","); [EOL]             output.write(String.valueOf(stats.gzSize)); [EOL]             output.write("\n"); [EOL]         } [EOL]         output.write("\n"); [EOL]         output.close(); [EOL]     } catch (IOException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL] } <line_num>: 220,302
@Override [EOL] void append(String str) { [EOL]     int len = str.length(); [EOL]     if (len > 0) { [EOL]         size += len; [EOL]         lastChar = str.charAt(len - 1); [EOL]         if (trackGzippedSize) { [EOL]             try { [EOL]                 stream.write(str.getBytes()); [EOL]             } catch (IOException e) { [EOL]                 throw new RuntimeException(e); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 324,338
@Override [EOL] char getLastChar() { [EOL]     return lastChar; [EOL] } <line_num>: 340,343
private int calcSize() { [EOL]     return size; [EOL] } <line_num>: 345,347
private int calcZippedSize() { [EOL]     if (trackGzippedSize) { [EOL]         try { [EOL]             stream.finish(); [EOL]             stream.flush(); [EOL]             stream.close(); [EOL]             return output.size(); [EOL]         } catch (IOException e) { [EOL]             throw new RuntimeException(e); [EOL]         } [EOL]     } else { [EOL]         return -1; [EOL]     } [EOL] } <line_num>: 349,362
