private LinkedFlowScope(FlatFlowScopeCache cache, LinkedFlowScope directParent) { [EOL]     this.cache = cache; [EOL]     if (directParent == null) { [EOL]         this.lastSlot = null; [EOL]         this.depth = 0; [EOL]         this.parent = cache.linkedEquivalent; [EOL]     } else { [EOL]         this.lastSlot = directParent.lastSlot; [EOL]         this.depth = directParent.depth + 1; [EOL]         this.parent = directParent; [EOL]     } [EOL] } <line_num>: 64,76
LinkedFlowScope(FlatFlowScopeCache cache) { [EOL]     this(cache, null); [EOL] } <line_num>: 78,80
LinkedFlowScope(LinkedFlowScope directParent) { [EOL]     this(directParent.cache, directParent); [EOL] } <line_num>: 82,84
LinkedFlowSlot(String name, JSType type, LinkedFlowSlot parent) { [EOL]     super(name, type, true); [EOL]     this.parent = parent; [EOL] } <line_num>: 370,373
FlatFlowScopeCache(Scope functionScope) { [EOL]     this.functionScope = functionScope; [EOL]     symbols = ImmutableMap.of(); [EOL]     linkedEquivalent = null; [EOL] } <line_num>: 402,406
FlatFlowScopeCache(LinkedFlowScope directParent) { [EOL]     FlatFlowScopeCache cache = directParent.cache; [EOL]     functionScope = cache.functionScope; [EOL]     symbols = directParent.allFlowSlots(); [EOL]     linkedEquivalent = directParent; [EOL] } <line_num>: 409,415
FlatFlowScopeCache(LinkedFlowScope joinedScopeA, LinkedFlowScope joinedScopeB) { [EOL]     linkedEquivalent = null; [EOL]     functionScope = joinedScopeA.flowsFromBottom() ? joinedScopeB.getFunctionScope() : joinedScopeA.getFunctionScope(); [EOL]     Map<String, StaticSlot<JSType>> slotsA = joinedScopeA.allFlowSlots(); [EOL]     Map<String, StaticSlot<JSType>> slotsB = joinedScopeB.allFlowSlots(); [EOL]     symbols = slotsA; [EOL]     Set<String> symbolNames = Sets.newHashSet(symbols.keySet()); [EOL]     symbolNames.addAll(slotsB.keySet()); [EOL]     for (String name : symbolNames) { [EOL]         StaticSlot<JSType> slotA = slotsA.get(name); [EOL]         StaticSlot<JSType> slotB = slotsB.get(name); [EOL]         JSType joinedType = null; [EOL]         if (slotB == null || slotB.getType() == null) { [EOL]             StaticSlot<JSType> fnSlot = joinedScopeB.getFunctionScope().getSlot(name); [EOL]             JSType fnSlotType = fnSlot == null ? null : fnSlot.getType(); [EOL]             if (fnSlotType == null) { [EOL]             } else { [EOL]                 joinedType = slotA.getType().getLeastSupertype(fnSlotType); [EOL]             } [EOL]         } else if (slotA == null || slotA.getType() == null) { [EOL]             StaticSlot<JSType> fnSlot = joinedScopeA.getFunctionScope().getSlot(name); [EOL]             JSType fnSlotType = fnSlot == null ? null : fnSlot.getType(); [EOL]             if (fnSlotType == null) { [EOL]                 symbols.put(name, slotB); [EOL]             } else { [EOL]                 joinedType = slotB.getType().getLeastSupertype(fnSlotType); [EOL]             } [EOL]         } else { [EOL]             joinedType = slotA.getType().getLeastSupertype(slotB.getType()); [EOL]         } [EOL]         if (joinedType != null) { [EOL]             symbols.put(name, new SimpleSlot(name, joinedType, true)); [EOL]         } [EOL]     } [EOL] } <line_num>: 418,482
private Scope getFunctionScope() { [EOL]     return cache.functionScope; [EOL] } <line_num>: 87,89
private boolean flowsFromBottom() { [EOL]     return getFunctionScope().isBottom(); [EOL] } <line_num>: 92,94
public static LinkedFlowScope createEntryLattice(Scope scope) { [EOL]     return new LinkedFlowScope(new FlatFlowScopeCache(scope)); [EOL] } <line_num>: 99,101
@Override [EOL] public void inferSlotType(String symbol, JSType type) { [EOL]     Preconditions.checkState(!frozen); [EOL]     lastSlot = new LinkedFlowSlot(symbol, type, lastSlot); [EOL]     depth++; [EOL]     cache.dirtySymbols.add(symbol); [EOL] } <line_num>: 103,109
@Override [EOL] public void inferQualifiedSlot(Node node, String symbol, JSType bottomType, JSType inferredType) { [EOL]     Scope functionScope = getFunctionScope(); [EOL]     if (functionScope.isLocal()) { [EOL]         if (functionScope.getVar(symbol) == null && !functionScope.isBottom()) { [EOL]             functionScope.declare(symbol, node, bottomType, null); [EOL]         } [EOL]         inferSlotType(symbol, inferredType); [EOL]     } [EOL] } <line_num>: 111,122
@Override [EOL] public JSType getTypeOfThis() { [EOL]     return cache.functionScope.getTypeOfThis(); [EOL] } <line_num>: 124,127
@Override [EOL] public Node getRootNode() { [EOL]     return getFunctionScope().getRootNode(); [EOL] } <line_num>: 129,132
@Override [EOL] public StaticScope<JSType> getParentScope() { [EOL]     return getFunctionScope().getParentScope(); [EOL] } <line_num>: 134,137
@Override [EOL] public StaticSlot<JSType> getSlot(String name) { [EOL]     if (cache.dirtySymbols.contains(name)) { [EOL]         for (LinkedFlowSlot slot = lastSlot; slot != null; slot = slot.parent) { [EOL]             if (slot.getName().equals(name)) { [EOL]                 return slot; [EOL]             } [EOL]         } [EOL]     } [EOL]     return cache.getSlot(name); [EOL] } <line_num>: 142,153
@Override [EOL] public StaticSlot<JSType> getOwnSlot(String name) { [EOL]     throw new UnsupportedOperationException(); [EOL] } <line_num>: 155,158
@Override [EOL] public FlowScope createChildFlowScope() { [EOL]     frozen = true; [EOL]     if (depth > MAX_DEPTH) { [EOL]         if (flattened == null) { [EOL]             flattened = new FlatFlowScopeCache(this); [EOL]         } [EOL]         return new LinkedFlowScope(flattened); [EOL]     } [EOL]     return new LinkedFlowScope(this); [EOL] } <line_num>: 160,172
@Override [EOL] public StaticSlot<JSType> findUniqueRefinedSlot(FlowScope blindScope) { [EOL]     StaticSlot<JSType> result = null; [EOL]     for (LinkedFlowScope currentScope = this; currentScope != blindScope; currentScope = currentScope.parent) { [EOL]         for (LinkedFlowSlot currentSlot = currentScope.lastSlot; currentSlot != null && (currentScope.parent == null || currentScope.parent.lastSlot != currentSlot); currentSlot = currentSlot.parent) { [EOL]             if (result == null) { [EOL]                 result = currentSlot; [EOL]             } else if (!currentSlot.getName().equals(result.getName())) { [EOL]                 return null; [EOL]             } [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 179,200
@Override [EOL] public void completeScope(StaticScope<JSType> staticScope) { [EOL]     Scope scope = (Scope) staticScope; [EOL]     for (Iterator<Var> it = scope.getVars(); it.hasNext(); ) { [EOL]         Var var = it.next(); [EOL]         if (var.isTypeInferred()) { [EOL]             JSType type = var.getType(); [EOL]             if (type == null || type.isUnknownType()) { [EOL]                 JSType flowType = getSlot(var.getName()).getType(); [EOL]                 var.setType(flowType); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 207,220
@Override [EOL] public LinkedFlowScope optimize() { [EOL]     LinkedFlowScope current; [EOL]     for (current = this; current.parent != null && current.lastSlot == current.parent.lastSlot; current = current.parent) { [EOL]     } [EOL]     return current; [EOL] } <line_num>: 231,239
@SuppressWarnings("unchecked") [EOL] @Override [EOL] public FlowScope apply(FlowScope a, FlowScope b) { [EOL]     LinkedFlowScope linkedA = (LinkedFlowScope) a; [EOL]     LinkedFlowScope linkedB = (LinkedFlowScope) b; [EOL]     linkedA.frozen = true; [EOL]     linkedB.frozen = true; [EOL]     if (linkedA.optimize() == linkedB.optimize()) { [EOL]         return linkedA.createChildFlowScope(); [EOL]     } [EOL]     return new LinkedFlowScope(new FlatFlowScopeCache(linkedA, linkedB)); [EOL] } <line_num>: 243,255
@Override [EOL] public boolean equals(Object other) { [EOL]     if (other instanceof LinkedFlowScope) { [EOL]         LinkedFlowScope that = (LinkedFlowScope) other; [EOL]         if (this.optimize() == that.optimize()) { [EOL]             return true; [EOL]         } [EOL]         if (this.getFunctionScope() != that.getFunctionScope()) { [EOL]             return false; [EOL]         } [EOL]         if (cache == that.cache) { [EOL]             for (String name : cache.dirtySymbols) { [EOL]                 if (diffSlots(getSlot(name), that.getSlot(name))) { [EOL]                     return false; [EOL]                 } [EOL]             } [EOL]             return true; [EOL]         } [EOL]         Map<String, StaticSlot<JSType>> myFlowSlots = allFlowSlots(); [EOL]         Map<String, StaticSlot<JSType>> otherFlowSlots = that.allFlowSlots(); [EOL]         for (StaticSlot<JSType> slot : myFlowSlots.values()) { [EOL]             if (diffSlots(slot, otherFlowSlots.get(slot.getName()))) { [EOL]                 return false; [EOL]             } [EOL]             otherFlowSlots.remove(slot.getName()); [EOL]         } [EOL]         for (StaticSlot<JSType> slot : otherFlowSlots.values()) { [EOL]             if (diffSlots(slot, myFlowSlots.get(slot.getName()))) { [EOL]                 return false; [EOL]             } [EOL]         } [EOL]         return true; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 258,308
private boolean diffSlots(StaticSlot<JSType> slotA, StaticSlot<JSType> slotB) { [EOL]     boolean aIsNull = slotA == null || slotA.getType() == null; [EOL]     boolean bIsNull = slotB == null || slotB.getType() == null; [EOL]     if (aIsNull && bIsNull) { [EOL]         return false; [EOL]     } else if (aIsNull ^ bIsNull) { [EOL]         return true; [EOL]     } [EOL]     return slotA.getType().differsFrom(slotB.getType()); [EOL] } <line_num>: 314,326
private Map<String, StaticSlot<JSType>> allFlowSlots() { [EOL]     Map<String, StaticSlot<JSType>> slots = Maps.newHashMap(); [EOL]     for (LinkedFlowSlot slot = lastSlot; slot != null; slot = slot.parent) { [EOL]         if (!slots.containsKey(slot.getName())) { [EOL]             slots.put(slot.getName(), slot); [EOL]         } [EOL]     } [EOL]     for (Map.Entry<String, StaticSlot<JSType>> symbolEntry : cache.symbols.entrySet()) { [EOL]         if (!slots.containsKey(symbolEntry.getKey())) { [EOL]             slots.put(symbolEntry.getKey(), symbolEntry.getValue()); [EOL]         } [EOL]     } [EOL]     return slots; [EOL] } <line_num>: 346,362
public StaticSlot<JSType> getSlot(String name) { [EOL]     if (symbols.containsKey(name)) { [EOL]         return symbols.get(name); [EOL]     } else { [EOL]         return functionScope.getSlot(name); [EOL]     } [EOL] } <line_num>: 487,493
