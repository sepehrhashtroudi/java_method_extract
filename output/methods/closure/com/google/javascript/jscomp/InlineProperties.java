PropertyInfo(JSType type, Node value) { [EOL]     this.type = type; [EOL]     this.value = value; [EOL] } <line_num>: 55,58
InlineProperties(AbstractCompiler compiler) { [EOL]     this.compiler = compiler; [EOL]     buildInvalidatingTypeSet(); [EOL] } <line_num>: 70,73
private void buildInvalidatingTypeSet() { [EOL]     JSTypeRegistry registry = compiler.getTypeRegistry(); [EOL]     invalidatingTypes = Sets.newHashSet(registry.getNativeType(JSTypeNative.ALL_TYPE), registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE), registry.getNativeType(JSTypeNative.NO_TYPE), registry.getNativeType(JSTypeNative.NULL_TYPE), registry.getNativeType(JSTypeNative.VOID_TYPE), registry.getNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE), registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE), registry.getNativeType(JSTypeNative.FUNCTION_PROTOTYPE), registry.getNativeType(JSTypeNative.GLOBAL_THIS), registry.getNativeType(JSTypeNative.OBJECT_TYPE), registry.getNativeType(JSTypeNative.OBJECT_PROTOTYPE), registry.getNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE), registry.getNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE), registry.getNativeType(JSTypeNative.UNKNOWN_TYPE)); [EOL]     for (TypeMismatch mis : compiler.getTypeValidator().getMismatches()) { [EOL]         addInvalidatingType(mis.typeA); [EOL]         addInvalidatingType(mis.typeB); [EOL]     } [EOL] } <line_num>: 78,100
private void addInvalidatingType(JSType type) { [EOL]     type = type.restrictByNotNullOrUndefined(); [EOL]     if (type.isUnionType()) { [EOL]         for (JSType alt : type.toMaybeUnionType().getAlternates()) { [EOL]             addInvalidatingType(alt); [EOL]         } [EOL]     } [EOL]     invalidatingTypes.add(type); [EOL]     ObjectType objType = ObjectType.cast(type); [EOL]     if (objType != null && objType.isInstanceType()) { [EOL]         invalidatingTypes.add(objType.getImplicitPrototype()); [EOL]     } [EOL] } <line_num>: 105,118
private boolean isInvalidatingType(JSType type) { [EOL]     if (type.isUnionType()) { [EOL]         type = type.restrictByNotNullOrUndefined(); [EOL]         if (type.isUnionType()) { [EOL]             for (JSType alt : type.toMaybeUnionType().getAlternates()) { [EOL]                 if (isInvalidatingType(alt)) { [EOL]                     return true; [EOL]                 } [EOL]             } [EOL]             return false; [EOL]         } [EOL]     } [EOL]     ObjectType objType = ObjectType.cast(type); [EOL]     return objType == null || invalidatingTypes.contains(objType) || !objType.hasReferenceName() || objType.isUnknownType() || objType.isEmptyType() || objType.isEnumType() || objType.autoboxesTo() != null; [EOL] } <line_num>: 121,141
private JSType getJSType(Node n) { [EOL]     JSType jsType = n.getJSType(); [EOL]     if (jsType == null) { [EOL]         return compiler.getTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE); [EOL]     } else { [EOL]         return jsType; [EOL]     } [EOL] } <line_num>: 147,155
@Override [EOL] public void process(Node externs, Node root) { [EOL]     NodeTraversal.traverseRoots(compiler, new GatherCandidates(), externs, root); [EOL]     NodeTraversal.traverseRoots(compiler, new ReplaceCandidates(), externs, root); [EOL] } <line_num>: 157,163
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     boolean invalidatingPropRef = false; [EOL]     String propName = null; [EOL]     if (n.isGetProp()) { [EOL]         propName = n.getLastChild().getString(); [EOL]         if (t.getInput().isExtern()) { [EOL]             invalidatingPropRef = true; [EOL]         } else if (parent.isAssign()) { [EOL]             invalidatingPropRef = !maybeCandidateDefinition(t, n, parent); [EOL]         } else if (NodeUtil.isLValue(n)) { [EOL]             invalidatingPropRef = true; [EOL]         } else if (parent.isDelProp()) { [EOL]             invalidatingPropRef = true; [EOL]         } else { [EOL]             invalidatingPropRef = false; [EOL]         } [EOL]     } else if (n.isStringKey()) { [EOL]         propName = n.getString(); [EOL]         if (t.getInput().isExtern()) { [EOL]             invalidatingPropRef = true; [EOL]         } else { [EOL]             invalidatingPropRef = true; [EOL]         } [EOL]     } [EOL]     if (invalidatingPropRef) { [EOL]         Preconditions.checkNotNull(propName); [EOL]         invalidateProperty(propName); [EOL]     } [EOL] } <line_num>: 167,205
private boolean maybeCandidateDefinition(NodeTraversal t, Node n, Node parent) { [EOL]     Preconditions.checkState(n.isGetProp() && parent.isAssign()); [EOL]     boolean isCandidate = false; [EOL]     Node src = n.getFirstChild(); [EOL]     String propName = n.getLastChild().getString(); [EOL]     Node value = parent.getLastChild(); [EOL]     if (src.isThis()) { [EOL]         if (inContructor(t)) { [EOL]             isCandidate = maybeStoreCandidateValue(getJSType(src), propName, value); [EOL]         } [EOL]     } else if (t.inGlobalScope() && src.isGetProp() && src.getLastChild().getString().equals("prototype")) { [EOL]         JSType instanceType = maybeGetInstanceTypeFromPrototypeRef(src); [EOL]         if (instanceType != null) { [EOL]             isCandidate = maybeStoreCandidateValue(instanceType, propName, value); [EOL]         } [EOL]     } [EOL]     return isCandidate; [EOL] } <line_num>: 210,238
private JSType maybeGetInstanceTypeFromPrototypeRef(Node src) { [EOL]     JSType ownerType = getJSType(src.getFirstChild()); [EOL]     if (ownerType.isFunctionType() && ownerType.isConstructor()) { [EOL]         FunctionType functionType = ((FunctionType) ownerType); [EOL]         return functionType.getInstanceType(); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 240,247
private void invalidateProperty(String propName) { [EOL]     props.put(propName, INVALIDATED); [EOL] } <line_num>: 249,251
private boolean maybeStoreCandidateValue(JSType type, String propName, Node value) { [EOL]     Preconditions.checkNotNull(value); [EOL]     if (!props.containsKey(propName) && !isInvalidatingType(type) && NodeUtil.isImmutableValue(value) && NodeUtil.isExecutedExactlyOnce(value)) { [EOL]         props.put(propName, new PropertyInfo(type, value)); [EOL]         return true; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 253,264
private boolean inContructor(NodeTraversal t) { [EOL]     Node root = t.getScopeRoot(); [EOL]     JSDocInfo info = NodeUtil.getBestJSDocInfo(root); [EOL]     return info != null && info.isConstructor(); [EOL] } <line_num>: 266,270
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (n.isGetProp() && !NodeUtil.isLValue(n)) { [EOL]         Node target = n.getFirstChild(); [EOL]         String propName = n.getLastChild().getString(); [EOL]         PropertyInfo info = props.get(propName); [EOL]         if (info != null && info != INVALIDATED && isMatchingType(target, info.type)) { [EOL]             Node replacement = info.value.cloneTree(); [EOL]             if (NodeUtil.mayHaveSideEffects(n.getFirstChild(), compiler)) { [EOL]                 replacement = IR.comma(n.removeFirstChild(), replacement).srcref(n); [EOL]             } [EOL]             parent.replaceChild(n, replacement); [EOL]             compiler.reportCodeChange(); [EOL]         } [EOL]     } [EOL] } <line_num>: 274,291
private boolean isMatchingType(Node n, JSType src) { [EOL]     src = src.restrictByNotNullOrUndefined(); [EOL]     JSType dest = getJSType(n).restrictByNotNullOrUndefined(); [EOL]     if (!isInvalidatingType(dest) && dest.isSubtype(src)) { [EOL]         return true; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 293,301
