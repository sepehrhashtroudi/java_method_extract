ClosureOptimizePrimitives(AbstractCompiler compiler) { [EOL]     this.compiler = compiler; [EOL] } <line_num>: 60,62
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (n.isCall()) { [EOL]         String fnName = n.getFirstChild().getQualifiedName(); [EOL]         if ("goog$object$create".equals(fnName) || "goog.object.create".equals(fnName)) { [EOL]             callNodes.add(n); [EOL]         } [EOL]     } [EOL] } <line_num>: 45,54
@Override [EOL] public void process(Node externs, Node root) { [EOL]     FindObjectCreateCalls pass = new FindObjectCreateCalls(); [EOL]     NodeTraversal.traverse(compiler, root, pass); [EOL]     processObjectCreateCalls(pass.callNodes); [EOL] } <line_num>: 64,69
private void processObjectCreateCalls(List<Node> callNodes) { [EOL]     for (Node callNode : callNodes) { [EOL]         Node curParam = callNode.getFirstChild().getNext(); [EOL]         if (canOptimizeObjectCreate(curParam)) { [EOL]             Node objNode = IR.objectlit().srcref(callNode); [EOL]             while (curParam != null) { [EOL]                 Node keyNode = curParam; [EOL]                 Node valueNode = curParam.getNext(); [EOL]                 curParam = valueNode.getNext(); [EOL]                 callNode.removeChild(keyNode); [EOL]                 callNode.removeChild(valueNode); [EOL]                 if (!keyNode.isString()) { [EOL]                     keyNode = IR.string(NodeUtil.getStringValue(keyNode)).srcref(keyNode); [EOL]                 } [EOL]                 keyNode.setType(Token.STRING_KEY); [EOL]                 keyNode.setQuotedString(); [EOL]                 objNode.addChildToBack(IR.propdef(keyNode, valueNode)); [EOL]             } [EOL]             callNode.getParent().replaceChild(callNode, objNode); [EOL]             compiler.reportCodeChange(); [EOL]         } [EOL]     } [EOL] } <line_num>: 75,100
private boolean canOptimizeObjectCreate(Node firstParam) { [EOL]     Node curParam = firstParam; [EOL]     while (curParam != null) { [EOL]         if (!curParam.isString() && !curParam.isNumber()) { [EOL]             return false; [EOL]         } [EOL]         curParam = curParam.getNext(); [EOL]         if (curParam == null) { [EOL]             return false; [EOL]         } [EOL]         curParam = curParam.getNext(); [EOL]     } [EOL]     return true; [EOL] } <line_num>: 106,122
