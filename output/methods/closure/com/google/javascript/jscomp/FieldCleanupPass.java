public FieldCleanupPass(AbstractCompiler compiler) { [EOL]     this.compiler = compiler; [EOL] } <line_num>: 40,42
public QualifiedNameSearchTraversal(JSTypeRegistry typeRegistry, String srcName) { [EOL]     this.typeRegistry = typeRegistry; [EOL]     this.srcName = srcName; [EOL] } <line_num>: 85,89
@Override [EOL] public void hotSwapScript(Node scriptRoot, Node originalRoot) { [EOL]     String srcName = originalRoot.getSourceFileName(); [EOL]     Callback cb = new QualifiedNameSearchTraversal(compiler.getTypeRegistry(), srcName); [EOL]     new NodeTraversal(compiler, cb).traverse(originalRoot); [EOL] } <line_num>: 44,50
@Override [EOL] public void process(Node externs, Node root) { [EOL] } <line_num>: 52,55
@Override [EOL] public void visit(NodeTraversal t, Node n, Node p) { [EOL]     if (n.isGetProp() && !p.isGetProp()) { [EOL]         String propName = getFieldName(n); [EOL]         JSType type = n.getFirstChild().getJSType(); [EOL]         if (type == null || type.toObjectType() == null) { [EOL]             return; [EOL]         } [EOL]         removeProperty(type.toObjectType(), propName); [EOL]     } [EOL]     if (n.getJSDocInfo() != null) { [EOL]         n.getJSDocInfo().setAssociatedNode(null); [EOL]     } [EOL] } <line_num>: 91,106
private void removeProperty(ObjectType type, String propName) { [EOL]     Node pNode = type.getPropertyNode(propName); [EOL]     if (pNode != null && srcName.equals(pNode.getSourceFileName())) { [EOL]         typeRegistry.unregisterPropertyOnType(propName, type); [EOL]         type.removeProperty(propName); [EOL]     } [EOL] } <line_num>: 114,120
private String getFieldName(Node n) { [EOL]     return n.getLastChild().getString(); [EOL] } <line_num>: 122,124
