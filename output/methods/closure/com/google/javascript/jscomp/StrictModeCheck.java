StrictModeCheck(AbstractCompiler compiler) { [EOL]     this(compiler, false, false); [EOL] } <line_num>: 84,86
StrictModeCheck(AbstractCompiler compiler, boolean noVarCheck, boolean noCajaChecks) { [EOL]     this.compiler = compiler; [EOL]     this.noVarCheck = noVarCheck; [EOL]     this.noCajaChecks = noCajaChecks; [EOL] } <line_num>: 88,93
@Override [EOL] public void process(Node externs, Node root) { [EOL]     NodeTraversal.traverseRoots(compiler, Lists.newArrayList(externs, root), this); [EOL]     NodeTraversal.traverse(compiler, root, new NonExternChecks()); [EOL] } <line_num>: 95,99
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (n.isFunction()) { [EOL]         checkFunctionUse(t, n); [EOL]     } else if (n.isName()) { [EOL]         if (!isDeclaration(n)) { [EOL]             checkNameUse(t, n); [EOL]         } [EOL]     } else if (n.isAssign()) { [EOL]         checkAssignment(t, n); [EOL]     } else if (n.isDelProp()) { [EOL]         checkDelete(t, n); [EOL]     } else if (n.isObjectLit()) { [EOL]         checkObjectLiteral(t, n); [EOL]     } else if (n.isLabel()) { [EOL]         checkLabel(t, n); [EOL]     } [EOL] } <line_num>: 101,117
private void checkFunctionUse(NodeTraversal t, Node n) { [EOL]     if (NodeUtil.isFunctionDeclaration(n) && !NodeUtil.isHoistedFunctionDeclaration(n)) { [EOL]         t.report(n, BAD_FUNCTION_DECLARATION); [EOL]     } [EOL] } <line_num>: 120,124
private static boolean isDeclaration(Node n) { [EOL]     switch(n.getParent().getType()) { [EOL]         case Token.VAR: [EOL]         case Token.FUNCTION: [EOL]         case Token.CATCH: [EOL]             return true; [EOL]         case Token.PARAM_LIST: [EOL]             return n.getParent().getParent().isFunction(); [EOL]         default: [EOL]             return false; [EOL]     } [EOL] } <line_num>: 130,143
private void checkNameUse(NodeTraversal t, Node n) { [EOL]     Var v = t.getScope().getVar(n.getString()); [EOL]     if (v == null) { [EOL]         if (!noVarCheck) { [EOL]             t.report(n, UNKNOWN_VARIABLE, n.getString()); [EOL]         } [EOL]     } [EOL]     if (!noCajaChecks) { [EOL]         if ("eval".equals(n.getString())) { [EOL]             t.report(n, EVAL_USE); [EOL]         } else if (n.getString().endsWith("__")) { [EOL]             t.report(n, ILLEGAL_NAME); [EOL]         } [EOL]     } [EOL] } <line_num>: 146,163
private void checkAssignment(NodeTraversal t, Node n) { [EOL]     if (n.getFirstChild().isName()) { [EOL]         if ("arguments".equals(n.getFirstChild().getString())) { [EOL]             t.report(n, ARGUMENTS_ASSIGNMENT); [EOL]         } else if ("eval".equals(n.getFirstChild().getString())) { [EOL]             if (noCajaChecks) { [EOL]                 t.report(n, EVAL_ASSIGNMENT); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 166,178
private void checkDelete(NodeTraversal t, Node n) { [EOL]     if (n.getFirstChild().isName()) { [EOL]         Var v = t.getScope().getVar(n.getFirstChild().getString()); [EOL]         if (v != null) { [EOL]             t.report(n, DELETE_VARIABLE); [EOL]         } [EOL]     } [EOL] } <line_num>: 181,188
private void checkObjectLiteral(NodeTraversal t, Node n) { [EOL]     Set<String> getters = Sets.newHashSet(); [EOL]     Set<String> setters = Sets.newHashSet(); [EOL]     for (Node key = n.getFirstChild(); key != null; key = key.getNext()) { [EOL]         if (!noCajaChecks && key.getString().endsWith("__")) { [EOL]             t.report(key, ILLEGAL_NAME); [EOL]         } [EOL]         if (!key.isSetterDef()) { [EOL]             if (getters.contains(key.getString())) { [EOL]                 t.report(key, DUPLICATE_OBJECT_KEY); [EOL]             } else { [EOL]                 getters.add(key.getString()); [EOL]             } [EOL]         } [EOL]         if (!key.isGetterDef()) { [EOL]             if (setters.contains(key.getString())) { [EOL]                 t.report(key, DUPLICATE_OBJECT_KEY); [EOL]             } else { [EOL]                 setters.add(key.getString()); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 191,217
private void checkLabel(NodeTraversal t, Node n) { [EOL]     if (n.getFirstChild().getString().endsWith("__")) { [EOL]         if (!noCajaChecks) { [EOL]             t.report(n.getFirstChild(), ILLEGAL_NAME); [EOL]         } [EOL]     } [EOL] } <line_num>: 220,226
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if ((n.isName()) && isDeclaration(n)) { [EOL]         checkDeclaration(t, n); [EOL]     } else if (n.isGetProp()) { [EOL]         checkProperty(t, n); [EOL]     } [EOL] } <line_num>: 230,236
private void checkDeclaration(NodeTraversal t, Node n) { [EOL]     if ("eval".equals(n.getString())) { [EOL]         t.report(n, EVAL_DECLARATION); [EOL]     } else if ("arguments".equals(n.getString())) { [EOL]         t.report(n, ARGUMENTS_DECLARATION); [EOL]     } else if (n.getString().endsWith("__")) { [EOL]         if (!noCajaChecks) { [EOL]             t.report(n, ILLEGAL_NAME); [EOL]         } [EOL]     } [EOL] } <line_num>: 239,249
private void checkProperty(NodeTraversal t, Node n) { [EOL]     if (n.getLastChild().getString().endsWith("__")) { [EOL]         if (!noCajaChecks) { [EOL]             t.report(n.getLastChild(), ILLEGAL_NAME); [EOL]         } [EOL]     } [EOL] } <line_num>: 252,258
