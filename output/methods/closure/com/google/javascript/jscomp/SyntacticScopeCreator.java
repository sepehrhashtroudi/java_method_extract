SyntacticScopeCreator(AbstractCompiler compiler) { [EOL]     this.compiler = compiler; [EOL]     this.redeclarationHandler = new DefaultRedeclarationHandler(); [EOL] } <line_num>: 56,59
SyntacticScopeCreator(AbstractCompiler compiler, RedeclarationHandler redeclarationHandler) { [EOL]     this.compiler = compiler; [EOL]     this.redeclarationHandler = redeclarationHandler; [EOL] } <line_num>: 61,65
@Override [EOL] public Scope createScope(Node n, Scope parent) { [EOL]     inputId = null; [EOL]     if (parent == null) { [EOL]         scope = Scope.createGlobalScope(n); [EOL]     } else { [EOL]         scope = new Scope(parent, n); [EOL]     } [EOL]     scanRoot(n, parent); [EOL]     inputId = null; [EOL]     Scope returnedScope = scope; [EOL]     scope = null; [EOL]     return returnedScope; [EOL] } <line_num>: 67,82
private void scanRoot(Node n, Scope parent) { [EOL]     if (n.isFunction()) { [EOL]         if (inputId == null) { [EOL]             inputId = NodeUtil.getInputId(n); [EOL]         } [EOL]         final Node fnNameNode = n.getFirstChild(); [EOL]         final Node args = fnNameNode.getNext(); [EOL]         final Node body = args.getNext(); [EOL]         String fnName = fnNameNode.getString(); [EOL]         if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) { [EOL]             declareVar(fnNameNode); [EOL]         } [EOL]         Preconditions.checkState(args.isParamList()); [EOL]         for (Node a = args.getFirstChild(); a != null; a = a.getNext()) { [EOL]             Preconditions.checkState(a.isName()); [EOL]             declareVar(a); [EOL]         } [EOL]         scanVars(body, n); [EOL]     } else { [EOL]         Preconditions.checkState(scope.getParent() == null); [EOL]         scanVars(n, null); [EOL]     } [EOL] } <line_num>: 84,119
private void scanVars(Node n, Node parent) { [EOL]     switch(n.getType()) { [EOL]         case Token.VAR: [EOL]             for (Node child = n.getFirstChild(); child != null; ) { [EOL]                 Node next = child.getNext(); [EOL]                 declareVar(child); [EOL]                 child = next; [EOL]             } [EOL]             return; [EOL]         case Token.FUNCTION: [EOL]             if (NodeUtil.isFunctionExpression(n)) { [EOL]                 return; [EOL]             } [EOL]             String fnName = n.getFirstChild().getString(); [EOL]             if (fnName.isEmpty()) { [EOL]                 return; [EOL]             } [EOL]             declareVar(n.getFirstChild()); [EOL]             return; [EOL]         case Token.CATCH: [EOL]             Preconditions.checkState(n.getChildCount() == 2); [EOL]             Preconditions.checkState(n.getFirstChild().isName()); [EOL]             final Node var = n.getFirstChild(); [EOL]             final Node block = var.getNext(); [EOL]             declareVar(var); [EOL]             scanVars(block, n); [EOL]             return; [EOL]         case Token.SCRIPT: [EOL]             inputId = n.getInputId(); [EOL]             Preconditions.checkNotNull(inputId); [EOL]             break; [EOL]     } [EOL]     if (NodeUtil.isControlStructure(n) || NodeUtil.isStatementBlock(n)) { [EOL]         for (Node child = n.getFirstChild(); child != null; ) { [EOL]             Node next = child.getNext(); [EOL]             scanVars(child, n); [EOL]             child = next; [EOL]         } [EOL]     } [EOL] } <line_num>: 124,178
void onRedeclaration(Scope s, String name, Node n, CompilerInput input); <line_num>: 184,185
@Override [EOL] public void onRedeclaration(Scope s, String name, Node n, CompilerInput input) { [EOL]     Node parent = n.getParent(); [EOL]     if (scope.isGlobal()) { [EOL]         Scope.Var origVar = scope.getVar(name); [EOL]         Node origParent = origVar.getParentNode(); [EOL]         if (origParent.isCatch() && parent.isCatch()) { [EOL]             return; [EOL]         } [EOL]         boolean allowDupe = hasDuplicateDeclarationSuppression(n, origVar); [EOL]         if (!allowDupe) { [EOL]             compiler.report(JSError.make(NodeUtil.getSourceName(n), n, VAR_MULTIPLY_DECLARED_ERROR, name, (origVar.input != null ? origVar.input.getName() : "??"))); [EOL]         } [EOL]     } else if (name.equals(ARGUMENTS) && !NodeUtil.isVarDeclaration(n)) { [EOL]         compiler.report(JSError.make(NodeUtil.getSourceName(n), n, VAR_ARGUMENTS_SHADOWED_ERROR)); [EOL]     } [EOL] } <line_num>: 192,225
private void declareVar(Node n) { [EOL]     Preconditions.checkState(n.isName()); [EOL]     CompilerInput input = compiler.getInput(inputId); [EOL]     String name = n.getString(); [EOL]     if (scope.isDeclared(name, false) || (scope.isLocal() && name.equals(ARGUMENTS))) { [EOL]         redeclarationHandler.onRedeclaration(scope, name, n, input); [EOL]     } else { [EOL]         scope.declare(name, n, null, input); [EOL]     } [EOL] } <line_num>: 233,245
static boolean hasDuplicateDeclarationSuppression(Node n, Scope.Var origVar) { [EOL]     Preconditions.checkState(n.isName()); [EOL]     Node parent = n.getParent(); [EOL]     Node origParent = origVar.getParentNode(); [EOL]     JSDocInfo info = n.getJSDocInfo(); [EOL]     if (info == null) { [EOL]         info = parent.getJSDocInfo(); [EOL]     } [EOL]     if (info != null && info.getSuppressions().contains("duplicate")) { [EOL]         return true; [EOL]     } [EOL]     info = origVar.nameNode.getJSDocInfo(); [EOL]     if (info == null) { [EOL]         info = origParent.getJSDocInfo(); [EOL]     } [EOL]     return (info != null && info.getSuppressions().contains("duplicate")); [EOL] } <line_num>: 254,272
static Scope generateUntypedTopScope(AbstractCompiler compiler) { [EOL]     return new SyntacticScopeCreator(compiler).createScope(compiler.getRoot(), null); [EOL] } <line_num>: 281,284
