AliasStrings(AbstractCompiler compiler, JSModuleGraph moduleGraph, Set<String> strings, String blacklistRegex, boolean outputStringUsage) { [EOL]     this.compiler = compiler; [EOL]     this.moduleGraph = moduleGraph; [EOL]     this.aliasableStrings = strings; [EOL]     if (blacklistRegex.length() != 0) { [EOL]         this.blacklist = Pattern.compile(blacklistRegex).matcher(""); [EOL]     } else { [EOL]         this.blacklist = null; [EOL]     } [EOL]     this.outputStringUsage = outputStringUsage; [EOL] } <line_num>: 95,109
StringOccurrence(Node node, Node parent) { [EOL]     this.node = node; [EOL]     this.parent = parent; [EOL] } <line_num>: 344,347
StringInfo(int id) { [EOL]     this.id = id; [EOL]     this.occurrences = new ArrayList<StringOccurrence>(); [EOL]     this.isAliased = false; [EOL] } <line_num>: 369,373
@Override [EOL] public void process(Node externs, Node root) { [EOL]     logger.fine("Aliasing common strings"); [EOL]     NodeTraversal.traverse(compiler, root, this); [EOL]     replaceStringsWithAliases(); [EOL]     addAliasDeclarationNodes(); [EOL]     if (outputStringUsage) { [EOL]         outputStringUsage(); [EOL]     } [EOL] } <line_num>: 111,127
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (n.isString() && !parent.isGetProp() && !parent.isRegExp()) { [EOL]         String str = n.getString(); [EOL]         if ("undefined".equals(str)) { [EOL]             return; [EOL]         } [EOL]         if (blacklist != null && blacklist.reset(str).find()) { [EOL]             return; [EOL]         } [EOL]         if (aliasableStrings == null || aliasableStrings.contains(str)) { [EOL]             StringOccurrence occurrence = new StringOccurrence(n, parent); [EOL]             StringInfo info = getOrCreateStringInfo(str); [EOL]             info.occurrences.add(occurrence); [EOL]             info.numOccurrences++; [EOL]             if (t.inGlobalScope() || isInThrowExpression(n)) { [EOL]                 info.numOccurrencesInfrequentlyExecuted++; [EOL]             } [EOL]             JSModule module = t.getModule(); [EOL]             if (info.numOccurrences != 1) { [EOL]                 if (module != null && info.moduleToContainDecl != null && module != info.moduleToContainDecl && !moduleGraph.dependsOn(module, info.moduleToContainDecl)) { [EOL]                     module = moduleGraph.getDeepestCommonDependency(module, info.moduleToContainDecl); [EOL]                 } else { [EOL]                     return; [EOL]                 } [EOL]             } [EOL]             Node varParent = moduleVarParentMap.get(module); [EOL]             if (varParent == null) { [EOL]                 varParent = compiler.getNodeForCodeInsertion(module); [EOL]                 moduleVarParentMap.put(module, varParent); [EOL]             } [EOL]             info.moduleToContainDecl = module; [EOL]             info.parentForNewVarDecl = varParent; [EOL]             info.siblingToInsertVarDeclBefore = varParent.getFirstChild(); [EOL]         } [EOL]     } [EOL] } <line_num>: 129,187
private StringInfo getOrCreateStringInfo(String string) { [EOL]     StringInfo info = stringInfoMap.get(string); [EOL]     if (info == null) { [EOL]         info = new StringInfo(stringInfoMap.size()); [EOL]         stringInfoMap.put(string, info); [EOL]     } [EOL]     return info; [EOL] } <line_num>: 193,200
private static boolean isInThrowExpression(Node n) { [EOL]     for (Node ancestor : n.getAncestors()) { [EOL]         switch(ancestor.getType()) { [EOL]             case Token.THROW: [EOL]                 return true; [EOL]             case Token.IF: [EOL]             case Token.WHILE: [EOL]             case Token.DO: [EOL]             case Token.FOR: [EOL]             case Token.SWITCH: [EOL]             case Token.CASE: [EOL]             case Token.DEFAULT_CASE: [EOL]             case Token.BLOCK: [EOL]             case Token.SCRIPT: [EOL]             case Token.FUNCTION: [EOL]             case Token.TRY: [EOL]             case Token.CATCH: [EOL]             case Token.RETURN: [EOL]             case Token.EXPR_RESULT: [EOL]                 return false; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 205,230
private void replaceStringsWithAliases() { [EOL]     for (Entry<String, StringInfo> entry : stringInfoMap.entrySet()) { [EOL]         String literal = entry.getKey(); [EOL]         StringInfo info = entry.getValue(); [EOL]         if (shouldReplaceWithAlias(literal, info)) { [EOL]             for (StringOccurrence occurrence : info.occurrences) { [EOL]                 replaceStringWithAliasName(occurrence, info.getVariableName(literal), info); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 235,246
private void addAliasDeclarationNodes() { [EOL]     for (Entry<String, StringInfo> entry : stringInfoMap.entrySet()) { [EOL]         StringInfo info = entry.getValue(); [EOL]         if (!info.isAliased) { [EOL]             continue; [EOL]         } [EOL]         String alias = info.getVariableName(entry.getKey()); [EOL]         Node var = IR.var(IR.name(alias), IR.string(entry.getKey())); [EOL]         if (info.siblingToInsertVarDeclBefore == null) { [EOL]             info.parentForNewVarDecl.addChildToFront(var); [EOL]         } else { [EOL]             info.parentForNewVarDecl.addChildBefore(var, info.siblingToInsertVarDeclBefore); [EOL]         } [EOL]         compiler.reportCodeChange(); [EOL]     } [EOL] } <line_num>: 252,268
private static boolean shouldReplaceWithAlias(String str, StringInfo info) { [EOL]     if (info.numOccurrences > info.numOccurrencesInfrequentlyExecuted) { [EOL]         return true; [EOL]     } [EOL]     int sizeOfLiteral = 2 + str.length(); [EOL]     int sizeOfStrings = info.numOccurrences * sizeOfLiteral; [EOL]     int sizeOfVariable = 3; [EOL]     int sizeOfAliases = 6 + sizeOfVariable + sizeOfLiteral + info.numOccurrences * sizeOfVariable; [EOL]     return sizeOfAliases < sizeOfStrings; [EOL] } <line_num>: 276,303
private void replaceStringWithAliasName(StringOccurrence occurrence, String name, StringInfo info) { [EOL]     occurrence.parent.replaceChild(occurrence.node, IR.name(name)); [EOL]     info.isAliased = true; [EOL]     compiler.reportCodeChange(); [EOL] } <line_num>: 308,315
private void outputStringUsage() { [EOL]     StringBuilder sb = new StringBuilder("Strings used more than once:\n"); [EOL]     for (Entry<String, StringInfo> stringInfoEntry : stringInfoMap.entrySet()) { [EOL]         StringInfo info = stringInfoEntry.getValue(); [EOL]         if (info.numOccurrences > 1) { [EOL]             sb.append(info.numOccurrences); [EOL]             sb.append(": "); [EOL]             sb.append(stringInfoEntry.getKey()); [EOL]             sb.append('\n'); [EOL]         } [EOL]     } [EOL]     logger.fine(sb.toString()); [EOL] } <line_num>: 320,333
String getVariableName(String stringLiteral) { [EOL]     if (aliasName == null) { [EOL]         aliasName = encodeStringAsIdentifier(STRING_ALIAS_PREFIX, stringLiteral); [EOL]     } [EOL]     return aliasName; [EOL] } <line_num>: 376,382
String encodeStringAsIdentifier(String prefix, String s) { [EOL]     final int MAX_LIMIT = 20; [EOL]     final int length = s.length(); [EOL]     final int limit = Math.min(length, MAX_LIMIT); [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append(prefix); [EOL]     boolean protectHex = false; [EOL]     for (int i = 0; i < limit; i++) { [EOL]         char ch = s.charAt(i); [EOL]         if (protectHex) { [EOL]             if ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f')) { [EOL]                 sb.append('_'); [EOL]             } [EOL]             protectHex = false; [EOL]         } [EOL]         if ((ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z')) { [EOL]             sb.append(ch); [EOL]         } else { [EOL]             sb.append('$'); [EOL]             sb.append(Integer.toHexString(ch)); [EOL]             protectHex = true; [EOL]         } [EOL]     } [EOL]     if (length == limit) { [EOL]         return sb.toString(); [EOL]     } [EOL]     CRC32 crc32 = new CRC32(); [EOL]     crc32.update(s.getBytes()); [EOL]     long hash = crc32.getValue() & unitTestHashReductionMask; [EOL]     sb.append('_'); [EOL]     sb.append(Long.toHexString(hash)); [EOL]     String encoded = sb.toString(); [EOL]     if (!usedHashedAliases.add(encoded)) { [EOL]         encoded += "_" + id; [EOL]     } [EOL]     return encoded; [EOL] } <line_num>: 403,454
