public ClosureCodingConvention() { [EOL]     this(CodingConventions.getDefault()); [EOL] } <line_num>: 49,51
public ClosureCodingConvention(CodingConvention wrapped) { [EOL]     super(wrapped); [EOL]     Set<String> props = Sets.newHashSet("superClass_", "instance_", "getInstance"); [EOL]     props.addAll(wrapped.getIndirectlyDeclaredProperties()); [EOL]     indirectlyDeclaredProperties = ImmutableSet.copyOf(props); [EOL] } <line_num>: 53,62
public AssertInstanceofSpec(String functionName) { [EOL]     super(functionName, JSTypeNative.OBJECT_TYPE); [EOL] } <line_num>: 443,445
@Override [EOL] public void applySubclassRelationship(FunctionType parentCtor, FunctionType childCtor, SubclassType type) { [EOL]     super.applySubclassRelationship(parentCtor, childCtor, type); [EOL]     if (type == SubclassType.INHERITS) { [EOL]         childCtor.defineDeclaredProperty("superClass_", parentCtor.getPrototype(), childCtor.getSource()); [EOL]         childCtor.getPrototype().defineDeclaredProperty("constructor", childCtor.cloneWithoutArrowType(), childCtor.getSource()); [EOL]     } [EOL] } <line_num>: 68,86
@Override [EOL] public SubclassRelationship getClassesDefinedByCall(Node callNode) { [EOL]     SubclassRelationship relationship = super.getClassesDefinedByCall(callNode); [EOL]     if (relationship != null) [EOL]         return relationship; [EOL]     Node callName = callNode.getFirstChild(); [EOL]     SubclassType type = typeofClassDefiningName(callName); [EOL]     if (type != null) { [EOL]         Node subclass = null; [EOL]         Node superclass = callNode.getLastChild(); [EOL]         boolean isDeprecatedCall = callNode.getChildCount() == 2 && callName.isGetProp(); [EOL]         if (isDeprecatedCall) { [EOL]             subclass = callName.getFirstChild(); [EOL]         } else if (callNode.getChildCount() == 3) { [EOL]             subclass = callName.getNext(); [EOL]         } else { [EOL]             return null; [EOL]         } [EOL]         if (type == SubclassType.MIXIN) { [EOL]             if (!endsWithPrototype(superclass)) { [EOL]                 return null; [EOL]             } [EOL]             if (!isDeprecatedCall) { [EOL]                 if (!endsWithPrototype(subclass)) { [EOL]                     return null; [EOL]                 } [EOL]                 subclass = subclass.getFirstChild(); [EOL]             } [EOL]             superclass = superclass.getFirstChild(); [EOL]         } [EOL]         if (subclass != null && subclass.isUnscopedQualifiedName() && superclass.isUnscopedQualifiedName()) { [EOL]             return new SubclassRelationship(type, subclass, superclass); [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 94,153
private SubclassType typeofClassDefiningName(Node callName) { [EOL]     String methodName = null; [EOL]     if (callName.isGetProp()) { [EOL]         methodName = callName.getLastChild().getString(); [EOL]     } else if (callName.isName()) { [EOL]         String name = callName.getString(); [EOL]         int dollarIndex = name.lastIndexOf('$'); [EOL]         if (dollarIndex != -1) { [EOL]             methodName = name.substring(dollarIndex + 1); [EOL]         } [EOL]     } [EOL]     if (methodName != null) { [EOL]         if (methodName.equals("inherits")) { [EOL]             return SubclassType.INHERITS; [EOL]         } else if (methodName.equals("mixin")) { [EOL]             return SubclassType.MIXIN; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 160,181
@Override [EOL] public boolean isSuperClassReference(String propertyName) { [EOL]     return "superClass_".equals(propertyName) || super.isSuperClassReference(propertyName); [EOL] } <line_num>: 183,187
private boolean endsWithPrototype(Node qualifiedName) { [EOL]     return qualifiedName.isGetProp() && qualifiedName.getLastChild().getString().equals("prototype"); [EOL] } <line_num>: 195,198
@Override [EOL] public String extractClassNameIfProvide(Node node, Node parent) { [EOL]     return extractClassNameIfGoog(node, parent, "goog.provide"); [EOL] } <line_num>: 205,208
@Override [EOL] public String extractClassNameIfRequire(Node node, Node parent) { [EOL]     return extractClassNameIfGoog(node, parent, "goog.require"); [EOL] } <line_num>: 215,218
private static String extractClassNameIfGoog(Node node, Node parent, String functionName) { [EOL]     String className = null; [EOL]     if (NodeUtil.isExprCall(parent)) { [EOL]         Node callee = node.getFirstChild(); [EOL]         if (callee != null && callee.isGetProp()) { [EOL]             String qualifiedName = callee.getQualifiedName(); [EOL]             if (functionName.equals(qualifiedName)) { [EOL]                 Node target = callee.getNext(); [EOL]                 if (target != null && target.isString()) { [EOL]                     className = target.getString(); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return className; [EOL] } <line_num>: 220,236
@Override [EOL] public String getExportPropertyFunction() { [EOL]     return "goog.exportProperty"; [EOL] } <line_num>: 242,245
@Override [EOL] public String getExportSymbolFunction() { [EOL]     return "goog.exportSymbol"; [EOL] } <line_num>: 251,254
@Override [EOL] public List<String> identifyTypeDeclarationCall(Node n) { [EOL]     Node callName = n.getFirstChild(); [EOL]     if ("goog.addDependency".equals(callName.getQualifiedName()) && n.getChildCount() >= 3) { [EOL]         Node typeArray = callName.getNext().getNext(); [EOL]         if (typeArray.isArrayLit()) { [EOL]             List<String> typeNames = Lists.newArrayList(); [EOL]             for (Node name = typeArray.getFirstChild(); name != null; name = name.getNext()) { [EOL]                 if (name.isString()) { [EOL]                     typeNames.add(name.getString()); [EOL]                 } [EOL]             } [EOL]             return typeNames; [EOL]         } [EOL]     } [EOL]     return super.identifyTypeDeclarationCall(n); [EOL] } <line_num>: 256,274
@Override [EOL] public String getAbstractMethodName() { [EOL]     return "goog.abstractMethod"; [EOL] } <line_num>: 276,279
@Override [EOL] public String getSingletonGetterClassName(Node callNode) { [EOL]     Node callArg = callNode.getFirstChild(); [EOL]     String callName = callArg.getQualifiedName(); [EOL]     if (!("goog.addSingletonGetter".equals(callName) || "goog$addSingletonGetter".equals(callName)) || callNode.getChildCount() != 2) { [EOL]         return super.getSingletonGetterClassName(callNode); [EOL]     } [EOL]     return callArg.getNext().getQualifiedName(); [EOL] } <line_num>: 281,294
@Override [EOL] public void applySingletonGetter(FunctionType functionType, FunctionType getterType, ObjectType objectType) { [EOL]     super.applySingletonGetter(functionType, getterType, objectType); [EOL]     functionType.defineDeclaredProperty("getInstance", getterType, functionType.getSource()); [EOL]     functionType.defineDeclaredProperty("instance_", objectType, functionType.getSource()); [EOL] } <line_num>: 296,304
@Override [EOL] public String getGlobalObject() { [EOL]     return "goog.global"; [EOL] } <line_num>: 306,309
@Override [EOL] public boolean isPropertyTestFunction(Node call) { [EOL]     Preconditions.checkArgument(call.isCall()); [EOL]     return propertyTestFunctions.contains(call.getFirstChild().getQualifiedName()) || super.isPropertyTestFunction(call); [EOL] } <line_num>: 316,322
@Override [EOL] public ObjectLiteralCast getObjectLiteralCast(Node callNode) { [EOL]     Preconditions.checkArgument(callNode.isCall()); [EOL]     ObjectLiteralCast proxyCast = super.getObjectLiteralCast(callNode); [EOL]     if (proxyCast != null) { [EOL]         return proxyCast; [EOL]     } [EOL]     Node callName = callNode.getFirstChild(); [EOL]     if (!"goog.reflect.object".equals(callName.getQualifiedName()) || callNode.getChildCount() != 3) { [EOL]         return null; [EOL]     } [EOL]     Node typeNode = callName.getNext(); [EOL]     if (!typeNode.isQualifiedName()) { [EOL]         return null; [EOL]     } [EOL]     Node objectNode = typeNode.getNext(); [EOL]     if (!objectNode.isObjectLit()) { [EOL]         return new ObjectLiteralCast(null, null, OBJECTLIT_EXPECTED); [EOL]     } [EOL]     return new ObjectLiteralCast(typeNode.getQualifiedName(), typeNode.getNext(), null); [EOL] } <line_num>: 324,350
@Override [EOL] public boolean isOptionalParameter(Node parameter) { [EOL]     return false; [EOL] } <line_num>: 352,355
@Override [EOL] public boolean isVarArgsParameter(Node parameter) { [EOL]     return false; [EOL] } <line_num>: 357,360
@Override [EOL] public boolean isPrivate(String name) { [EOL]     return false; [EOL] } <line_num>: 362,365
@Override [EOL] public Collection<AssertionFunctionSpec> getAssertionFunctions() { [EOL]     return ImmutableList.<AssertionFunctionSpec>of(new AssertionFunctionSpec("goog.asserts.assert"), new AssertionFunctionSpec("goog.asserts.assertNumber", JSTypeNative.NUMBER_TYPE), new AssertionFunctionSpec("goog.asserts.assertString", JSTypeNative.STRING_TYPE), new AssertionFunctionSpec("goog.asserts.assertFunction", JSTypeNative.FUNCTION_INSTANCE_TYPE), new AssertionFunctionSpec("goog.asserts.assertObject", JSTypeNative.OBJECT_TYPE), new AssertionFunctionSpec("goog.asserts.assertArray", JSTypeNative.ARRAY_TYPE), new AssertInstanceofSpec("goog.asserts.assertInstanceof")); [EOL] } <line_num>: 367,383
@Override [EOL] public Bind describeFunctionBind(Node n, boolean useTypeInfo) { [EOL]     Bind result = super.describeFunctionBind(n, useTypeInfo); [EOL]     if (result != null) { [EOL]         return result; [EOL]     } [EOL]     if (!n.isCall()) { [EOL]         return null; [EOL]     } [EOL]     Node callTarget = n.getFirstChild(); [EOL]     String name = callTarget.getQualifiedName(); [EOL]     if (name != null) { [EOL]         if (name.equals("goog.bind") || name.equals("goog$bind")) { [EOL]             Node fn = callTarget.getNext(); [EOL]             if (fn == null) { [EOL]                 return null; [EOL]             } [EOL]             Node thisValue = safeNext(fn); [EOL]             Node parameters = safeNext(thisValue); [EOL]             return new Bind(fn, thisValue, parameters); [EOL]         } [EOL]         if (name.equals("goog.partial") || name.equals("goog$partial")) { [EOL]             Node fn = callTarget.getNext(); [EOL]             if (fn == null) { [EOL]                 return null; [EOL]             } [EOL]             Node thisValue = null; [EOL]             Node parameters = safeNext(fn); [EOL]             return new Bind(fn, thisValue, parameters); [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 385,424
@Override [EOL] public Collection<String> getIndirectlyDeclaredProperties() { [EOL]     return indirectlyDeclaredProperties; [EOL] } <line_num>: 426,429
private Node safeNext(Node n) { [EOL]     if (n != null) { [EOL]         return n.getNext(); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 431,436
@Override [EOL] public JSType getAssertedType(Node call, JSTypeRegistry registry) { [EOL]     if (call.getChildCount() > 2) { [EOL]         Node constructor = call.getFirstChild().getNext().getNext(); [EOL]         if (constructor != null) { [EOL]             JSType ownerType = constructor.getJSType(); [EOL]             if (ownerType != null && ownerType.isFunctionType() && ownerType.isConstructor()) { [EOL]                 FunctionType functionType = ((FunctionType) ownerType); [EOL]                 return functionType.getInstanceType(); [EOL]             } [EOL]         } [EOL]     } [EOL]     return super.getAssertedType(call, registry); [EOL] } <line_num>: 451,466
