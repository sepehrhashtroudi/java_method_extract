private JsMessage(String sourceName, String key, boolean isAnonymous, boolean isExternal, String id, List<CharSequence> parts, Set<String> placeholders, String desc, boolean hidden, String meaning) { [EOL]     Preconditions.checkState(key != null); [EOL]     Preconditions.checkState(id != null); [EOL]     this.key = key; [EOL]     this.id = id; [EOL]     this.parts = Collections.unmodifiableList(parts); [EOL]     this.placeholders = Collections.unmodifiableSet(placeholders); [EOL]     this.desc = desc; [EOL]     this.hidden = hidden; [EOL]     this.meaning = meaning; [EOL]     this.sourceName = sourceName; [EOL]     this.isAnonymous = isAnonymous; [EOL]     this.isExternal = isExternal; [EOL] } <line_num>: 100,119
PlaceholderReference(String name) { [EOL]     this.name = name; [EOL] } <line_num>: 243,245
public Builder() { [EOL]     this(null); [EOL] } <line_num>: 317,319
public Builder(String key) { [EOL]     this.key = key; [EOL] } <line_num>: 322,324
private Hash() { [EOL] } <line_num>: 477,477
static Style getFromParams(boolean useClosure, boolean allowLegacyMessages) { [EOL]     if (useClosure) { [EOL]         return allowLegacyMessages ? RELAX : CLOSURE; [EOL]     } else { [EOL]         return LEGACY; [EOL]     } [EOL] } <line_num>: 65,72
public String getSourceName() { [EOL]     return sourceName; [EOL] } <line_num>: 124,126
public String getKey() { [EOL]     return key; [EOL] } <line_num>: 131,133
public boolean isAnonymous() { [EOL]     return isAnonymous; [EOL] } <line_num>: 135,137
public boolean isExternal() { [EOL]     return isExternal; [EOL] } <line_num>: 139,141
public String getId() { [EOL]     return id; [EOL] } <line_num>: 146,148
public String getDesc() { [EOL]     return desc; [EOL] } <line_num>: 154,156
String getMeaning() { [EOL]     return meaning; [EOL] } <line_num>: 162,164
public boolean isHidden() { [EOL]     return hidden; [EOL] } <line_num>: 170,172
public List<CharSequence> parts() { [EOL]     return parts; [EOL] } <line_num>: 178,180
public Set<String> placeholders() { [EOL]     return placeholders; [EOL] } <line_num>: 183,185
@Override [EOL] public String toString() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (CharSequence p : parts) { [EOL]         sb.append(p.toString()); [EOL]     } [EOL]     return sb.toString(); [EOL] } <line_num>: 187,194
public boolean isEmpty() { [EOL]     for (CharSequence part : parts) { [EOL]         if (part.length() > 0) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 197,205
@Override [EOL] public boolean equals(Object o) { [EOL]     if (o == this) [EOL]         return true; [EOL]     if (!(o instanceof JsMessage)) [EOL]         return false; [EOL]     JsMessage m = (JsMessage) o; [EOL]     return id.equals(m.id) && key.equals(m.key) && isAnonymous == m.isAnonymous && parts.equals(m.parts) && (meaning == null ? m.meaning == null : meaning.equals(m.meaning)) && placeholders.equals(m.placeholders) && (desc == null ? m.desc == null : desc.equals(m.desc)) && (sourceName == null ? m.sourceName == null : sourceName.equals(m.sourceName)) && hidden == m.hidden; [EOL] } <line_num>: 207,224
@Override [EOL] public int hashCode() { [EOL]     int hash = key.hashCode(); [EOL]     hash = 31 * hash + (isAnonymous ? 1 : 0); [EOL]     hash = 31 * hash + id.hashCode(); [EOL]     hash = 31 * hash + parts.hashCode(); [EOL]     hash = 31 * hash + (desc != null ? desc.hashCode() : 0); [EOL]     hash = 31 * hash + (hidden ? 1 : 0); [EOL]     hash = 31 * hash + (sourceName != null ? sourceName.hashCode() : 0); [EOL]     return hash; [EOL] } <line_num>: 226,236
@Override [EOL] public int length() { [EOL]     return name.length(); [EOL] } <line_num>: 247,250
@Override [EOL] public char charAt(int index) { [EOL]     return name.charAt(index); [EOL] } <line_num>: 252,255
@Override [EOL] public CharSequence subSequence(int start, int end) { [EOL]     return name.subSequence(start, end); [EOL] } <line_num>: 257,260
public String getName() { [EOL]     return name; [EOL] } <line_num>: 262,264
@Override [EOL] public String toString() { [EOL]     return String.format(MESSAGE_REPRESENTATION_FORMAT, name); [EOL] } <line_num>: 266,269
@Override [EOL] public boolean equals(Object o) { [EOL]     return o == this || o instanceof PlaceholderReference && name.equals(((PlaceholderReference) o).name); [EOL] } <line_num>: 271,276
@Override [EOL] public int hashCode() { [EOL]     return 31 * name.hashCode(); [EOL] } <line_num>: 278,281
private static String getExternalMessageId(String identifier) { [EOL]     Matcher m = MSG_EXTERNAL_PATTERN.matcher(identifier); [EOL]     return m.matches() ? m.group(1) : null; [EOL] } <line_num>: 300,303
public String getKey() { [EOL]     return key; [EOL] } <line_num>: 327,329
public Builder setKey(String key) { [EOL]     this.key = key; [EOL]     return this; [EOL] } <line_num>: 335,338
public Builder setSourceName(String sourceName) { [EOL]     this.sourceName = sourceName; [EOL]     return this; [EOL] } <line_num>: 343,346
public Builder appendPlaceholderReference(String name) { [EOL]     Preconditions.checkNotNull(name, "Placeholder name could not be null"); [EOL]     parts.add(new PlaceholderReference(name)); [EOL]     placeholders.add(name); [EOL]     return this; [EOL] } <line_num>: 351,356
public Builder appendStringPart(String part) { [EOL]     Preconditions.checkNotNull(part, "String part of the message could not be null"); [EOL]     parts.add(part); [EOL]     return this; [EOL] } <line_num>: 359,364
public Set<String> getPlaceholders() { [EOL]     return placeholders; [EOL] } <line_num>: 367,369
public Builder setDesc(String desc) { [EOL]     this.desc = desc; [EOL]     return this; [EOL] } <line_num>: 372,375
public Builder setMeaning(String meaning) { [EOL]     this.meaning = meaning; [EOL]     return this; [EOL] } <line_num>: 381,384
public Builder setIsHidden(boolean hidden) { [EOL]     this.hidden = hidden; [EOL]     return this; [EOL] } <line_num>: 387,390
public boolean hasParts() { [EOL]     return !parts.isEmpty(); [EOL] } <line_num>: 393,395
public List<CharSequence> getParts() { [EOL]     return parts; [EOL] } <line_num>: 397,399
public JsMessage build() { [EOL]     return build(null); [EOL] } <line_num>: 401,403
public JsMessage build(IdGenerator idGenerator) { [EOL]     boolean isAnonymous = false; [EOL]     boolean isExternal = false; [EOL]     String id = null; [EOL]     if (getKey() == null) { [EOL]         key = JsMessageVisitor.MSG_PREFIX + fingerprint(getParts()); [EOL]         isAnonymous = true; [EOL]     } [EOL]     if (!isAnonymous) { [EOL]         String externalId = getExternalMessageId(key); [EOL]         if (externalId != null) { [EOL]             isExternal = true; [EOL]             id = externalId; [EOL]         } [EOL]     } [EOL]     if (!isExternal) { [EOL]         String defactoMeaning = meaning != null ? meaning : key; [EOL]         id = idGenerator == null ? defactoMeaning : idGenerator.generateId(defactoMeaning, parts); [EOL]     } [EOL]     return new JsMessage(sourceName, key, isAnonymous, isExternal, id, parts, placeholders, desc, hidden, meaning); [EOL] } <line_num>: 405,433
private static String fingerprint(List<CharSequence> messageParts) { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (CharSequence part : messageParts) { [EOL]         if (part instanceof JsMessage.PlaceholderReference) { [EOL]             sb.append(part.toString()); [EOL]         } else { [EOL]             sb.append(part); [EOL]         } [EOL]     } [EOL]     long nonnegativeHash = Long.MAX_VALUE & Hash.hash64(sb.toString()); [EOL]     return Long.toString(nonnegativeHash, 36).toUpperCase(); [EOL] } <line_num>: 439,450
static long hash64(@Nullable String value) { [EOL]     return hash64(value, SEED64); [EOL] } <line_num>: 499,501
private static long hash64(@Nullable String value, long seed) { [EOL]     if (value == null) { [EOL]         return hash64(null, 0, 0, seed); [EOL]     } [EOL]     return hash64(value.getBytes(), seed); [EOL] } <line_num>: 510,515
private static long hash64(byte[] value, long seed) { [EOL]     return hash64(value, 0, value == null ? 0 : value.length, seed); [EOL] } <line_num>: 524,526
@SuppressWarnings("fallthrough") [EOL] private static long hash64(byte[] value, int offset, int length, long seed) { [EOL]     long a = CONSTANT64; [EOL]     long b = a; [EOL]     long c = seed; [EOL]     int keylen; [EOL]     for (keylen = length; keylen >= 24; keylen -= 24, offset += 24) { [EOL]         a += word64At(value, offset); [EOL]         b += word64At(value, offset + 8); [EOL]         c += word64At(value, offset + 16); [EOL]         a -= b; [EOL]         a -= c; [EOL]         a ^= c >>> 43; [EOL]         b -= c; [EOL]         b -= a; [EOL]         b ^= a << 9; [EOL]         c -= a; [EOL]         c -= b; [EOL]         c ^= b >>> 8; [EOL]         a -= b; [EOL]         a -= c; [EOL]         a ^= c >>> 38; [EOL]         b -= c; [EOL]         b -= a; [EOL]         b ^= a << 23; [EOL]         c -= a; [EOL]         c -= b; [EOL]         c ^= b >>> 5; [EOL]         a -= b; [EOL]         a -= c; [EOL]         a ^= c >>> 35; [EOL]         b -= c; [EOL]         b -= a; [EOL]         b ^= a << 49; [EOL]         c -= a; [EOL]         c -= b; [EOL]         c ^= b >>> 11; [EOL]         a -= b; [EOL]         a -= c; [EOL]         a ^= c >>> 12; [EOL]         b -= c; [EOL]         b -= a; [EOL]         b ^= a << 18; [EOL]         c -= a; [EOL]         c -= b; [EOL]         c ^= b >>> 22; [EOL]     } [EOL]     c += length; [EOL]     switch(keylen) { [EOL]         case 23: [EOL]             c += ((long) value[offset + 22]) << 56; [EOL]         case 22: [EOL]             c += (value[offset + 21] & 0xffL) << 48; [EOL]         case 21: [EOL]             c += (value[offset + 20] & 0xffL) << 40; [EOL]         case 20: [EOL]             c += (value[offset + 19] & 0xffL) << 32; [EOL]         case 19: [EOL]             c += (value[offset + 18] & 0xffL) << 24; [EOL]         case 18: [EOL]             c += (value[offset + 17] & 0xffL) << 16; [EOL]         case 17: [EOL]             c += (value[offset + 16] & 0xffL) << 8; [EOL]         case 16: [EOL]             b += word64At(value, offset + 8); [EOL]             a += word64At(value, offset); [EOL]             break; [EOL]         case 15: [EOL]             b += (value[offset + 14] & 0xffL) << 48; [EOL]         case 14: [EOL]             b += (value[offset + 13] & 0xffL) << 40; [EOL]         case 13: [EOL]             b += (value[offset + 12] & 0xffL) << 32; [EOL]         case 12: [EOL]             b += (value[offset + 11] & 0xffL) << 24; [EOL]         case 11: [EOL]             b += (value[offset + 10] & 0xffL) << 16; [EOL]         case 10: [EOL]             b += (value[offset + 9] & 0xffL) << 8; [EOL]         case 9: [EOL]             b += (value[offset + 8] & 0xffL); [EOL]         case 8: [EOL]             a += word64At(value, offset); [EOL]             break; [EOL]         case 7: [EOL]             a += (value[offset + 6] & 0xffL) << 48; [EOL]         case 6: [EOL]             a += (value[offset + 5] & 0xffL) << 40; [EOL]         case 5: [EOL]             a += (value[offset + 4] & 0xffL) << 32; [EOL]         case 4: [EOL]             a += (value[offset + 3] & 0xffL) << 24; [EOL]         case 3: [EOL]             a += (value[offset + 2] & 0xffL) << 16; [EOL]         case 2: [EOL]             a += (value[offset + 1] & 0xffL) << 8; [EOL]         case 1: [EOL]             a += (value[offset + 0] & 0xffL); [EOL]     } [EOL]     return mix64(a, b, c); [EOL] } <line_num>: 539,622
private static long word64At(byte[] bytes, int offset) { [EOL]     return (bytes[offset + 0] & 0xffL) + ((bytes[offset + 1] & 0xffL) << 8) + ((bytes[offset + 2] & 0xffL) << 16) + ((bytes[offset + 3] & 0xffL) << 24) + ((bytes[offset + 4] & 0xffL) << 32) + ((bytes[offset + 5] & 0xffL) << 40) + ((bytes[offset + 6] & 0xffL) << 48) + ((bytes[offset + 7] & 0xffL) << 56); [EOL] } <line_num>: 624,633
private static long mix64(long a, long b, long c) { [EOL]     a -= b; [EOL]     a -= c; [EOL]     a ^= c >>> 43; [EOL]     b -= c; [EOL]     b -= a; [EOL]     b ^= a << 9; [EOL]     c -= a; [EOL]     c -= b; [EOL]     c ^= b >>> 8; [EOL]     a -= b; [EOL]     a -= c; [EOL]     a ^= c >>> 38; [EOL]     b -= c; [EOL]     b -= a; [EOL]     b ^= a << 23; [EOL]     c -= a; [EOL]     c -= b; [EOL]     c ^= b >>> 5; [EOL]     a -= b; [EOL]     a -= c; [EOL]     a ^= c >>> 35; [EOL]     b -= c; [EOL]     b -= a; [EOL]     b ^= a << 49; [EOL]     c -= a; [EOL]     c -= b; [EOL]     c ^= b >>> 11; [EOL]     a -= b; [EOL]     a -= c; [EOL]     a ^= c >>> 12; [EOL]     b -= c; [EOL]     b -= a; [EOL]     b ^= a << 18; [EOL]     c -= a; [EOL]     c -= b; [EOL]     c ^= b >>> 22; [EOL]     return c; [EOL] } <line_num>: 638,652
String generateId(String meaning, List<CharSequence> messageParts); <line_num>: 668,668
