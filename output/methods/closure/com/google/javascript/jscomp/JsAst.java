public JsAst(SourceFile sourceFile) { [EOL]     this.inputId = new InputId(sourceFile.getName()); [EOL]     this.sourceFile = sourceFile; [EOL]     this.fileName = sourceFile.getName(); [EOL] } <line_num>: 43,47
@Override [EOL] public Node getAstRoot(AbstractCompiler compiler) { [EOL]     if (root == null) { [EOL]         parse(compiler); [EOL]         root.setInputId(inputId); [EOL]     } [EOL]     return root; [EOL] } <line_num>: 49,56
@Override [EOL] public void clearAst() { [EOL]     root = null; [EOL]     sourceFile.clearCachedSource(); [EOL] } <line_num>: 58,65
@Override [EOL] public InputId getInputId() { [EOL]     return inputId; [EOL] } <line_num>: 67,70
@Override [EOL] public SourceFile getSourceFile() { [EOL]     return sourceFile; [EOL] } <line_num>: 72,75
@Override [EOL] public void setSourceFile(SourceFile file) { [EOL]     Preconditions.checkState(fileName.equals(file.getName())); [EOL]     sourceFile = file; [EOL] } <line_num>: 77,81
private void parse(AbstractCompiler compiler) { [EOL]     try { [EOL]         logger_.fine("Parsing: " + sourceFile.getName()); [EOL]         ParserRunner.ParseResult result = ParserRunner.parse(sourceFile, sourceFile.getCode(), compiler.getParserConfig(), compiler.getDefaultErrorReporter(), logger_); [EOL]         root = result.ast; [EOL]         compiler.setOldParseTree(sourceFile.getName(), result.oldAst); [EOL]     } catch (IOException e) { [EOL]         compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName())); [EOL]     } [EOL]     if (root == null || compiler.hasHaltingErrors()) { [EOL]         root = IR.script(); [EOL]     } else { [EOL]         compiler.prepareAst(root); [EOL]     } [EOL]     root.setStaticSourceFile(sourceFile); [EOL] } <line_num>: 83,107
