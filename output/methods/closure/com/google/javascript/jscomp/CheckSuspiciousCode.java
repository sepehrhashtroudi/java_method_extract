CheckSuspiciousCode() { [EOL] } <line_num>: 48,49
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     checkMissingSemicolon(t, n); [EOL]     checkNaN(t, n); [EOL] } <line_num>: 51,55
private void checkMissingSemicolon(NodeTraversal t, Node n) { [EOL]     switch(n.getType()) { [EOL]         case Token.IF: [EOL]             Node trueCase = n.getFirstChild().getNext(); [EOL]             reportIfWasEmpty(t, trueCase); [EOL]             Node elseCase = trueCase.getNext(); [EOL]             if (elseCase != null) { [EOL]                 reportIfWasEmpty(t, elseCase); [EOL]             } [EOL]             break; [EOL]         case Token.WHILE: [EOL]         case Token.FOR: [EOL]             reportIfWasEmpty(t, NodeUtil.getLoopCodeBlock(n)); [EOL]             break; [EOL]     } [EOL] } <line_num>: 57,73
private void reportIfWasEmpty(NodeTraversal t, Node block) { [EOL]     Preconditions.checkState(block.isBlock()); [EOL]     if (!block.hasChildren() && block.wasEmptyNode()) { [EOL]         t.getCompiler().report(t.makeError(block, SUSPICIOUS_SEMICOLON)); [EOL]     } [EOL] } <line_num>: 75,85
private void checkNaN(NodeTraversal t, Node n) { [EOL]     switch(n.getType()) { [EOL]         case Token.EQ: [EOL]         case Token.GE: [EOL]         case Token.GT: [EOL]         case Token.LE: [EOL]         case Token.LT: [EOL]         case Token.NE: [EOL]         case Token.SHEQ: [EOL]         case Token.SHNE: [EOL]             reportIfNaN(t, n.getFirstChild()); [EOL]             reportIfNaN(t, n.getLastChild()); [EOL]     } [EOL] } <line_num>: 87,100
private void reportIfNaN(NodeTraversal t, Node n) { [EOL]     if (NodeUtil.isNaN(n)) { [EOL]         t.getCompiler().report(t.makeError(n.getParent(), SUSPICIOUS_COMPARISON_WITH_NAN)); [EOL]     } [EOL] } <line_num>: 102,107
