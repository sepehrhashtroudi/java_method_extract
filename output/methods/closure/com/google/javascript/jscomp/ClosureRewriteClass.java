public ClosureRewriteClass(AbstractCompiler compiler) { [EOL]     this.compiler = compiler; [EOL] } <line_num>: 64,66
MemberDefinition(JSDocInfo info, Node name, Node value) { [EOL]     this.info = info; [EOL]     this.name = name; [EOL]     this.value = value; [EOL] } <line_num>: 153,157
ClassDefinition(Node name, Node superClass, MemberDefinition constructor, List<MemberDefinition> staticProps, List<MemberDefinition> props, Node classModifier) { [EOL]     this.name = name; [EOL]     this.superClass = superClass; [EOL]     this.constructor = constructor; [EOL]     this.staticProps = staticProps; [EOL]     this.props = props; [EOL]     this.classModifier = classModifier; [EOL] } <line_num>: 168,181
@Override [EOL] public void process(Node externs, Node root) { [EOL]     NodeTraversal.traverse(compiler, root, this); [EOL] } <line_num>: 68,71
@Override [EOL] public void hotSwapScript(Node scriptRoot, Node originalRoot) { [EOL]     this.compiler.process(this); [EOL] } <line_num>: 73,77
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (n.isCall() && isGoogDefineClass(n)) { [EOL]         if (!validateUsage(n)) { [EOL]             compiler.report(JSError.make(n, GOOG_CLASS_TARGET_INVALID)); [EOL]         } [EOL]     } [EOL]     maybeRewriteClassDefinition(n); [EOL] } <line_num>: 79,87
private boolean validateUsage(Node n) { [EOL]     Node parent = n.getParent(); [EOL]     switch(parent.getType()) { [EOL]         case Token.NAME: [EOL]             return true; [EOL]         case Token.ASSIGN: [EOL]             return n == parent.getLastChild() && parent.getParent().isExprResult(); [EOL]         case Token.STRING_KEY: [EOL]             return isContainedInGoogDefineClass(parent); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 89,104
private boolean isContainedInGoogDefineClass(Node n) { [EOL]     while (n != null) { [EOL]         n = n.getParent(); [EOL]         if (n.isCall()) { [EOL]             if (isGoogDefineClass(n)) { [EOL]                 return true; [EOL]             } [EOL]         } else if (!n.isObjectLit() && !n.isStringKey()) { [EOL]             break; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 106,118
private void maybeRewriteClassDefinition(Node n) { [EOL]     if (n.isVar()) { [EOL]         Node target = n.getFirstChild(); [EOL]         Node value = target.getFirstChild(); [EOL]         maybeRewriteClassDefinition(n, target, value); [EOL]     } else if (NodeUtil.isExprAssign(n)) { [EOL]         Node assign = n.getFirstChild(); [EOL]         Node target = assign.getFirstChild(); [EOL]         Node value = assign.getLastChild(); [EOL]         maybeRewriteClassDefinition(n, target, value); [EOL]     } [EOL] } <line_num>: 120,131
private void maybeRewriteClassDefinition(Node n, Node target, Node value) { [EOL]     if (isGoogDefineClass(value)) { [EOL]         if (!target.isQualifiedName()) { [EOL]             compiler.report(JSError.make(n, GOOG_CLASS_TARGET_INVALID)); [EOL]         } [EOL]         ClassDefinition def = extractClassDefinition(target, value); [EOL]         if (def != null) { [EOL]             value.detachFromParent(); [EOL]             target.detachFromParent(); [EOL]             rewriteGoogDefineClass(n, def); [EOL]         } [EOL]     } [EOL] } <line_num>: 133,146
private ClassDefinition extractClassDefinition(Node targetName, Node callNode) { [EOL]     Node superClass = NodeUtil.getArgumentForCallOrNew(callNode, 0); [EOL]     if (superClass == null || (!superClass.isNull() && !superClass.isQualifiedName())) { [EOL]         compiler.report(JSError.make(callNode, GOOG_CLASS_SUPER_CLASS_NOT_VALID)); [EOL]         return null; [EOL]     } [EOL]     if (NodeUtil.isNullOrUndefined(superClass)) { [EOL]         superClass = null; [EOL]     } [EOL]     Node description = NodeUtil.getArgumentForCallOrNew(callNode, 1); [EOL]     if (description == null || !description.isObjectLit() || !validateObjLit(description)) { [EOL]         compiler.report(JSError.make(callNode, GOOG_CLASS_DESCRIPTOR_NOT_VALID)); [EOL]         return null; [EOL]     } [EOL]     int paramCount = callNode.getChildCount() - 1; [EOL]     if (paramCount > 2) { [EOL]         compiler.report(JSError.make(callNode, GOOG_CLASS_UNEXPECTED_PARAMS)); [EOL]         return null; [EOL]     } [EOL]     Node constructor = extractProperty(description, "constructor"); [EOL]     if (constructor == null) { [EOL]         compiler.report(JSError.make(description, GOOG_CLASS_CONSTRUCTOR_MISING)); [EOL]         return null; [EOL]     } [EOL]     JSDocInfo info = NodeUtil.getBestJSDocInfo(constructor); [EOL]     Node classModifier = null; [EOL]     Node statics = null; [EOL]     Node staticsProp = extractProperty(description, "statics"); [EOL]     if (staticsProp != null) { [EOL]         if (staticsProp.isObjectLit() && validateObjLit(staticsProp)) { [EOL]             statics = staticsProp; [EOL]         } else if (staticsProp.isFunction()) { [EOL]             classModifier = staticsProp; [EOL]         } else { [EOL]             compiler.report(JSError.make(staticsProp, GOOG_CLASS_STATICS_NOT_VALID)); [EOL]             return null; [EOL]         } [EOL]     } [EOL]     if (statics == null) { [EOL]         statics = IR.objectlit(); [EOL]     } [EOL]     maybeDetach(constructor.getParent()); [EOL]     maybeDetach(statics.getParent()); [EOL]     if (classModifier != null) { [EOL]         maybeDetach(classModifier.getParent()); [EOL]     } [EOL]     ClassDefinition def = new ClassDefinition(targetName, maybeDetach(superClass), new MemberDefinition(info, null, maybeDetach(constructor)), objectLitToList(maybeDetach(statics)), objectLitToList(description), maybeDetach(classModifier)); [EOL]     return def; [EOL] } <line_num>: 188,259
private Node maybeDetach(Node node) { [EOL]     if (node != null && node.getParent() != null) { [EOL]         node.detachFromParent(); [EOL]     } [EOL]     return node; [EOL] } <line_num>: 261,266
private boolean validateObjLit(Node objlit) { [EOL]     for (Node key : objlit.children()) { [EOL]         if (!key.isStringKey() || key.isQuotedString()) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 269,276
private Node extractProperty(Node objlit, String keyName) { [EOL]     for (Node keyNode : objlit.children()) { [EOL]         if (keyNode.getString().equals(keyName)) { [EOL]             return keyNode.isStringKey() ? keyNode.getFirstChild() : null; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 281,288
private List<MemberDefinition> objectLitToList(Node objlit) { [EOL]     List<MemberDefinition> result = Lists.newArrayList(); [EOL]     for (Node keyNode : objlit.children()) { [EOL]         result.add(new MemberDefinition(NodeUtil.getBestJSDocInfo(keyNode), keyNode, keyNode.removeFirstChild())); [EOL]     } [EOL]     objlit.detachChildren(); [EOL]     return result; [EOL] } <line_num>: 290,302
private void rewriteGoogDefineClass(Node exprRoot, ClassDefinition cls) { [EOL]     Node block = IR.block(); [EOL]     if (exprRoot.isVar()) { [EOL]         block.addChildToBack(IR.var(cls.name.cloneTree(), cls.constructor.value).srcref(exprRoot).setJSDocInfo(cls.constructor.info)); [EOL]     } else { [EOL]         block.addChildToBack(fixupSrcref(IR.exprResult(IR.assign(cls.name.cloneTree(), cls.constructor.value).srcref(exprRoot).setJSDocInfo(cls.constructor.info).srcref(exprRoot))).setJSDocInfo(cls.constructor.info)); [EOL]     } [EOL]     if (cls.superClass != null) { [EOL]         block.addChildToBack(fixupSrcref(IR.exprResult(IR.call(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(), "goog.inherits").srcrefTree(cls.superClass), cls.name.cloneTree(), cls.superClass.cloneTree()).srcref(cls.superClass)))); [EOL]     } [EOL]     for (MemberDefinition def : cls.staticProps) { [EOL]         block.addChildToBack(fixupSrcref(IR.exprResult(fixupSrcref(IR.assign(IR.getprop(cls.name.cloneTree(), IR.string(def.name.getString()).srcref(def.name)).srcref(def.name), def.value)).setJSDocInfo(def.info)))); [EOL]         maybeRewriteClassDefinition(block.getLastChild()); [EOL]     } [EOL]     for (MemberDefinition def : cls.props) { [EOL]         block.addChildToBack(fixupSrcref(IR.exprResult(fixupSrcref(IR.assign(IR.getprop(fixupSrcref(IR.getprop(cls.name.cloneTree(), IR.string("prototype").srcref(def.name))), IR.string(def.name.getString()).srcref(def.name)).srcref(def.name), def.value)).setJSDocInfo(def.info)))); [EOL]         maybeRewriteClassDefinition(block.getLastChild()); [EOL]     } [EOL]     if (cls.classModifier != null) { [EOL]         block.addChildToBack(IR.exprResult(fixupFreeCall(IR.call(cls.classModifier, cls.name.cloneTree()).srcref(cls.classModifier))).srcref(cls.classModifier)); [EOL]     } [EOL]     exprRoot.getParent().replaceChild(exprRoot, block); [EOL]     compiler.reportCodeChange(); [EOL] } <line_num>: 304,379
private Node fixupSrcref(Node node) { [EOL]     node.srcref(node.getFirstChild()); [EOL]     return node; [EOL] } <line_num>: 381,384
private Node fixupFreeCall(Node call) { [EOL]     Preconditions.checkState(call.isCall()); [EOL]     call.putBooleanProp(Node.FREE_CALL, true); [EOL]     return call; [EOL] } <line_num>: 386,390
private boolean isGoogDefineClass(Node value) { [EOL]     if (value != null && value.isCall()) { [EOL]         String targetName = value.getFirstChild().getQualifiedName(); [EOL]         return ("goog.defineClass".equals(targetName) || "goog.labs.classdef.defineClass".equals(targetName)); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 395,402
