private LiveVariableLattice(int numVars) { [EOL]     this.liveSet = new BitSet(numVars); [EOL] } <line_num>: 81,83
private LiveVariableLattice(LiveVariableLattice other) { [EOL]     Preconditions.checkNotNull(other); [EOL]     this.liveSet = (BitSet) other.liveSet.clone(); [EOL] } <line_num>: 85,88
LiveVariablesAnalysis(ControlFlowGraph<Node> cfg, Scope jsScope, AbstractCompiler compiler) { [EOL]     super(cfg, new LiveVariableJoinOp()); [EOL]     this.jsScope = jsScope; [EOL]     this.escaped = Sets.newHashSet(); [EOL]     computeEscaped(jsScope, escaped, compiler); [EOL] } <line_num>: 121,127
@Override [EOL] public LiveVariableLattice apply(List<LiveVariableLattice> in) { [EOL]     LiveVariableLattice result = new LiveVariableLattice(in.get(0)); [EOL]     for (int i = 1; i < in.size(); i++) { [EOL]         result.liveSet.or(in.get(i).liveSet); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 60,67
@Override [EOL] public boolean equals(Object other) { [EOL]     Preconditions.checkNotNull(other); [EOL]     return (other instanceof LiveVariableLattice) && this.liveSet.equals(((LiveVariableLattice) other).liveSet); [EOL] } <line_num>: 90,95
public boolean isLive(Var v) { [EOL]     Preconditions.checkNotNull(v); [EOL]     return liveSet.get(v.index); [EOL] } <line_num>: 97,100
public boolean isLive(int index) { [EOL]     return liveSet.get(index); [EOL] } <line_num>: 102,104
@Override [EOL] public String toString() { [EOL]     return liveSet.toString(); [EOL] } <line_num>: 106,109
@Override [EOL] public int hashCode() { [EOL]     return liveSet.hashCode(); [EOL] } <line_num>: 111,114
public Set<Var> getEscapedLocals() { [EOL]     return escaped; [EOL] } <line_num>: 129,131
public int getVarIndex(String var) { [EOL]     return jsScope.getVar(var).index; [EOL] } <line_num>: 133,135
@Override [EOL] boolean isForward() { [EOL]     return false; [EOL] } <line_num>: 137,140
@Override [EOL] LiveVariableLattice createEntryLattice() { [EOL]     return new LiveVariableLattice(jsScope.getVarCount()); [EOL] } <line_num>: 142,145
@Override [EOL] LiveVariableLattice createInitialEstimateLattice() { [EOL]     return new LiveVariableLattice(jsScope.getVarCount()); [EOL] } <line_num>: 147,150
@Override [EOL] LiveVariableLattice flowThrough(Node node, LiveVariableLattice input) { [EOL]     final BitSet gen = new BitSet(input.liveSet.size()); [EOL]     final BitSet kill = new BitSet(input.liveSet.size()); [EOL]     boolean conditional = false; [EOL]     List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node); [EOL]     for (DiGraphEdge<Node, Branch> edge : edgeList) { [EOL]         if (Branch.ON_EX.equals(edge.getValue())) { [EOL]             conditional = true; [EOL]         } [EOL]     } [EOL]     computeGenKill(node, gen, kill, conditional); [EOL]     LiveVariableLattice result = new LiveVariableLattice(input); [EOL]     result.liveSet.andNot(kill); [EOL]     result.liveSet.or(gen); [EOL]     return result; [EOL] } <line_num>: 152,171
private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) { [EOL]     switch(n.getType()) { [EOL]         case Token.SCRIPT: [EOL]         case Token.BLOCK: [EOL]         case Token.FUNCTION: [EOL]             return; [EOL]         case Token.WHILE: [EOL]         case Token.DO: [EOL]         case Token.IF: [EOL]             computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional); [EOL]             return; [EOL]         case Token.FOR: [EOL]             if (!NodeUtil.isForIn(n)) { [EOL]                 computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional); [EOL]             } else { [EOL]                 Node lhs = n.getFirstChild(); [EOL]                 Node rhs = lhs.getNext(); [EOL]                 if (lhs.isVar()) { [EOL]                     lhs = lhs.getLastChild(); [EOL]                 } [EOL]                 if (lhs.isName()) { [EOL]                     addToSetIfLocal(lhs, kill); [EOL]                     addToSetIfLocal(lhs, gen); [EOL]                 } else { [EOL]                     computeGenKill(lhs, gen, kill, conditional); [EOL]                 } [EOL]             } [EOL]             return; [EOL]         case Token.VAR: [EOL]             for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { [EOL]                 if (c.hasChildren()) { [EOL]                     computeGenKill(c.getFirstChild(), gen, kill, conditional); [EOL]                     if (!conditional) { [EOL]                         addToSetIfLocal(c, kill); [EOL]                     } [EOL]                 } [EOL]             } [EOL]             return; [EOL]         case Token.AND: [EOL]         case Token.OR: [EOL]             computeGenKill(n.getFirstChild(), gen, kill, conditional); [EOL]             computeGenKill(n.getLastChild(), gen, kill, true); [EOL]             return; [EOL]         case Token.HOOK: [EOL]             computeGenKill(n.getFirstChild(), gen, kill, conditional); [EOL]             computeGenKill(n.getFirstChild().getNext(), gen, kill, true); [EOL]             computeGenKill(n.getLastChild(), gen, kill, true); [EOL]             return; [EOL]         case Token.NAME: [EOL]             if (isArgumentsName(n)) { [EOL]                 markAllParametersEscaped(); [EOL]             } else { [EOL]                 addToSetIfLocal(n, gen); [EOL]             } [EOL]             return; [EOL]         default: [EOL]             if (NodeUtil.isAssignmentOp(n) && n.getFirstChild().isName()) { [EOL]                 Node lhs = n.getFirstChild(); [EOL]                 if (!conditional) { [EOL]                     addToSetIfLocal(lhs, kill); [EOL]                 } [EOL]                 if (!n.isAssign()) { [EOL]                     addToSetIfLocal(lhs, gen); [EOL]                 } [EOL]                 computeGenKill(lhs.getNext(), gen, kill, conditional); [EOL]             } else { [EOL]                 for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { [EOL]                     computeGenKill(c, gen, kill, conditional); [EOL]                 } [EOL]             } [EOL]             return; [EOL]     } [EOL] } <line_num>: 184,275
private void addToSetIfLocal(Node node, BitSet set) { [EOL]     Preconditions.checkState(node.isName()); [EOL]     String name = node.getString(); [EOL]     if (!jsScope.isDeclared(name, false)) { [EOL]         return; [EOL]     } [EOL]     Var var = jsScope.getVar(name); [EOL]     if (!escaped.contains(var)) { [EOL]         set.set(var.index); [EOL]     } [EOL] } <line_num>: 277,287
void markAllParametersEscaped() { [EOL]     Node lp = jsScope.getRootNode().getFirstChild().getNext(); [EOL]     for (Node arg = lp.getFirstChild(); arg != null; arg = arg.getNext()) { [EOL]         escaped.add(jsScope.getVar(arg.getString())); [EOL]     } [EOL] } <line_num>: 293,298
private boolean isArgumentsName(Node n) { [EOL]     if (!n.isName() || !n.getString().equals(ARGUMENT_ARRAY_ALIAS) || jsScope.isDeclared(ARGUMENT_ARRAY_ALIAS, false)) { [EOL]         return false; [EOL]     } else { [EOL]         return true; [EOL]     } [EOL] } <line_num>: 300,308
