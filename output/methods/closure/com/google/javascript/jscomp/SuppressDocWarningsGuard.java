SuppressDocWarningsGuard(Map<String, DiagnosticGroup> suppressibleGroups) { [EOL]     for (Map.Entry<String, DiagnosticGroup> entry : suppressibleGroups.entrySet()) { [EOL]         suppressors.put(entry.getKey(), new DiagnosticGroupWarningsGuard(entry.getValue(), CheckLevel.OFF)); [EOL]     } [EOL] } <line_num>: 40,49
@Override [EOL] public CheckLevel level(JSError error) { [EOL]     Node node = error.node; [EOL]     if (node != null) { [EOL]         for (Node current = node; current != null; current = current.getParent()) { [EOL]             int type = current.getType(); [EOL]             JSDocInfo info = null; [EOL]             if (type == Token.FUNCTION) { [EOL]                 info = NodeUtil.getFunctionJSDocInfo(current); [EOL]             } else if (type == Token.SCRIPT) { [EOL]                 info = current.getJSDocInfo(); [EOL]             } else if (type == Token.ASSIGN) { [EOL]                 Node rhs = current.getLastChild(); [EOL]                 if (rhs.isFunction()) { [EOL]                     info = NodeUtil.getFunctionJSDocInfo(rhs); [EOL]                 } [EOL]             } [EOL]             if (info != null) { [EOL]                 for (String suppressor : info.getSuppressions()) { [EOL]                     WarningsGuard guard = suppressors.get(suppressor); [EOL]                     if (guard != null) { [EOL]                         CheckLevel newLevel = guard.level(error); [EOL]                         if (newLevel != null) { [EOL]                             return newLevel; [EOL]                         } [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 51,93
@Override [EOL] public int getPriority() { [EOL]     return WarningsGuard.Priority.SUPPRESS_DOC.value; [EOL] } <line_num>: 95,100
