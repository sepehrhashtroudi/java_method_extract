ControlFlowGraph(N entry, boolean nodeAnnotations, boolean edgeAnnotations) { [EOL]     super(nodeAnnotations, edgeAnnotations); [EOL]     implicitReturn = createDirectedGraphNode(null); [EOL]     this.entry = createDirectedGraphNode(entry); [EOL] } <line_num>: 47,52
public DiGraphNode<N, ControlFlowGraph.Branch> getImplicitReturn() { [EOL]     return implicitReturn; [EOL] } <line_num>: 59,61
public DiGraphNode<N, ControlFlowGraph.Branch> getEntry() { [EOL]     return entry; [EOL] } <line_num>: 69,71
public boolean isImplicitReturn(DiGraphNode<N, ControlFlowGraph.Branch> node) { [EOL]     return node == implicitReturn; [EOL] } <line_num>: 79,82
public void connectToImplicitReturn(N srcValue, Branch edgeValue) { [EOL]     super.connect(srcValue, edgeValue, null); [EOL] } <line_num>: 90,92
public Comparator<DiGraphNode<N, Branch>> getOptionalNodeComparator(boolean isForward) { [EOL]     return null; [EOL] } <line_num>: 101,104
public boolean isConditional() { [EOL]     return this == ON_TRUE || this == ON_FALSE; [EOL] } <line_num>: 129,131
@Override [EOL] public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) { [EOL]     if (parent == null) { [EOL]         return true; [EOL]     } [EOL]     return !isEnteringNewCfgNode(n); [EOL] } <line_num>: 145,152
public static boolean isEnteringNewCfgNode(Node n) { [EOL]     Node parent = n.getParent(); [EOL]     switch(parent.getType()) { [EOL]         case Token.BLOCK: [EOL]         case Token.SCRIPT: [EOL]         case Token.TRY: [EOL]             return true; [EOL]         case Token.FUNCTION: [EOL]             return n != parent.getFirstChild().getNext(); [EOL]         case Token.WHILE: [EOL]         case Token.DO: [EOL]         case Token.IF: [EOL]             return NodeUtil.getConditionExpression(parent) != n; [EOL]         case Token.FOR: [EOL]             if (NodeUtil.isForIn(parent)) { [EOL]                 return n != parent.getFirstChild(); [EOL]             } else { [EOL]                 return NodeUtil.getConditionExpression(parent) != n; [EOL]             } [EOL]         case Token.SWITCH: [EOL]         case Token.CASE: [EOL]         case Token.CATCH: [EOL]         case Token.WITH: [EOL]             return n != parent.getFirstChild(); [EOL]         default: [EOL]             return false; [EOL]     } [EOL] } <line_num>: 159,205
