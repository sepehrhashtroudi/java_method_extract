public GoogleJsMessageIdGenerator(String projectId) { [EOL]     this.projectId = projectId; [EOL] } <line_num>: 52,54
private FP() { [EOL] } <line_num>: 85,85
@Override [EOL] public String generateId(String meaning, List<CharSequence> messageParts) { [EOL]     Preconditions.checkState(meaning != null); [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (CharSequence part : messageParts) { [EOL]         if (part instanceof PlaceholderReference) { [EOL]             sb.append(CaseFormat.LOWER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, ((PlaceholderReference) part).getName())); [EOL]         } else { [EOL]             sb.append(part); [EOL]         } [EOL]     } [EOL]     String tcValue = sb.toString(); [EOL]     String projectScopedMeaning = (projectId != null ? (projectId + ": ") : "") + meaning; [EOL]     return String.valueOf(MessageId.GenerateId(tcValue, projectScopedMeaning)); [EOL] } <line_num>: 56,76
private static long fingerprint(byte[] str, int start, int limit) { [EOL]     int hi = hash32(str, start, limit, 0); [EOL]     int lo = hash32(str, start, limit, 102072); [EOL]     if ((hi == 0) && (lo == 0 || lo == 1)) { [EOL]         hi ^= 0x130f9bef; [EOL]         lo ^= 0x94a0a928; [EOL]     } [EOL]     return (((long) hi) << 32) | (lo & 0xffffffffl); [EOL] } <line_num>: 88,97
private static long fingerprint(String str) { [EOL]     byte[] tmp = str.getBytes(Charsets.UTF_8); [EOL]     return FP.fingerprint(tmp, 0, tmp.length); [EOL] } <line_num>: 103,106
@SuppressWarnings("fallthrough") [EOL] private static int hash32(byte[] str, int start, int limit, int c) { [EOL]     int a = 0x9e3779b9; [EOL]     int b = 0x9e3779b9; [EOL]     int i; [EOL]     for (i = start; i + 12 <= limit; i += 12) { [EOL]         a += (((str[i + 0] & 0xff) << 0) | ((str[i + 1] & 0xff) << 8) | ((str[i + 2] & 0xff) << 16) | ((str[i + 3] & 0xff) << 24)); [EOL]         b += (((str[i + 4] & 0xff) << 0) | ((str[i + 5] & 0xff) << 8) | ((str[i + 6] & 0xff) << 16) | ((str[i + 7] & 0xff) << 24)); [EOL]         c += (((str[i + 8] & 0xff) << 0) | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16) | ((str[i + 11] & 0xff) << 24)); [EOL]         a -= b; [EOL]         a -= c; [EOL]         a ^= (c >>> 13); [EOL]         b -= c; [EOL]         b -= a; [EOL]         b ^= (a << 8); [EOL]         c -= a; [EOL]         c -= b; [EOL]         c ^= (b >>> 13); [EOL]         a -= b; [EOL]         a -= c; [EOL]         a ^= (c >>> 12); [EOL]         b -= c; [EOL]         b -= a; [EOL]         b ^= (a << 16); [EOL]         c -= a; [EOL]         c -= b; [EOL]         c ^= (b >>> 5); [EOL]         a -= b; [EOL]         a -= c; [EOL]         a ^= (c >>> 3); [EOL]         b -= c; [EOL]         b -= a; [EOL]         b ^= (a << 10); [EOL]         c -= a; [EOL]         c -= b; [EOL]         c ^= (b >>> 15); [EOL]     } [EOL]     c += limit - start; [EOL]     switch(limit - i) { [EOL]         case 11: [EOL]             c += (str[i + 10] & 0xff) << 24; [EOL]         case 10: [EOL]             c += (str[i + 9] & 0xff) << 16; [EOL]         case 9: [EOL]             c += (str[i + 8] & 0xff) << 8; [EOL]         case 8: [EOL]             b += (str[i + 7] & 0xff) << 24; [EOL]         case 7: [EOL]             b += (str[i + 6] & 0xff) << 16; [EOL]         case 6: [EOL]             b += (str[i + 5] & 0xff) << 8; [EOL]         case 5: [EOL]             b += (str[i + 4] & 0xff); [EOL]         case 4: [EOL]             a += (str[i + 3] & 0xff) << 24; [EOL]         case 3: [EOL]             a += (str[i + 2] & 0xff) << 16; [EOL]         case 2: [EOL]             a += (str[i + 1] & 0xff) << 8; [EOL]         case 1: [EOL]             a += (str[i + 0] & 0xff); [EOL]     } [EOL]     a -= b; [EOL]     a -= c; [EOL]     a ^= (c >>> 13); [EOL]     b -= c; [EOL]     b -= a; [EOL]     b ^= (a << 8); [EOL]     c -= a; [EOL]     c -= b; [EOL]     c ^= (b >>> 13); [EOL]     a -= b; [EOL]     a -= c; [EOL]     a ^= (c >>> 12); [EOL]     b -= c; [EOL]     b -= a; [EOL]     b ^= (a << 16); [EOL]     c -= a; [EOL]     c -= b; [EOL]     c ^= (b >>> 5); [EOL]     a -= b; [EOL]     a -= c; [EOL]     a ^= (c >>> 3); [EOL]     b -= c; [EOL]     b -= a; [EOL]     b ^= (a << 10); [EOL]     c -= a; [EOL]     c -= b; [EOL]     c ^= (b >>> 15); [EOL]     return c; [EOL] } <line_num>: 108,213
private final static long GenerateId(String message, String meaning) { [EOL]     long fp = FP.fingerprint(message); [EOL]     if (null != meaning && meaning.length() > 0) { [EOL]         long fp2 = FP.fingerprint(meaning); [EOL]         fp = fp2 + (fp << 1) + (fp < 0 ? 1 : 0); [EOL]     } [EOL]     return fp & 0x7fffffffffffffffL; [EOL] } <line_num>: 226,235
