private DotFormatter() { [EOL]     this.builder = new StringBuilder(); [EOL]     this.cfg = null; [EOL]     this.printAnnotations = false; [EOL] } <line_num>: 63,67
private DotFormatter(Node n, ControlFlowGraph<Node> cfg, Appendable builder, boolean printAnnotations) throws IOException { [EOL]     this.cfg = cfg; [EOL]     this.builder = builder; [EOL]     this.printAnnotations = printAnnotations; [EOL]     formatPreamble(); [EOL]     traverseNodes(n); [EOL]     formatConclusion(); [EOL] } <line_num>: 69,78
public static String toDot(Node n) throws IOException { [EOL]     return toDot(n, null); [EOL] } <line_num>: 85,87
static String toDot(Node n, ControlFlowGraph<Node> inCFG, boolean printAnnotations) throws IOException { [EOL]     StringBuilder builder = new StringBuilder(); [EOL]     new DotFormatter(n, inCFG, builder, printAnnotations); [EOL]     return builder.toString(); [EOL] } <line_num>: 96,102
static String toDot(Node n, ControlFlowGraph<Node> inCFG) throws IOException { [EOL]     StringBuilder builder = new StringBuilder(); [EOL]     new DotFormatter(n, inCFG, builder, false); [EOL]     return builder.toString(); [EOL] } <line_num>: 110,115
static void appendDot(Node n, ControlFlowGraph<Node> inCFG, Appendable builder) throws IOException { [EOL]     new DotFormatter(n, inCFG, builder, false); [EOL] } <line_num>: 123,126
static DotFormatter newInstanceForTesting() { [EOL]     return new DotFormatter(); [EOL] } <line_num>: 131,133
private void traverseNodes(Node parent) throws IOException { [EOL]     int keyParent = key(parent); [EOL]     for (Node child = parent.getFirstChild(); child != null; child = child.getNext()) { [EOL]         int keyChild = key(child); [EOL]         builder.append(INDENT); [EOL]         builder.append(formatNodeName(keyParent)); [EOL]         builder.append(ARROW); [EOL]         builder.append(formatNodeName(keyChild)); [EOL]         builder.append(" [weight=1];\n"); [EOL]         traverseNodes(child); [EOL]     } [EOL]     if (cfg != null && cfg.hasNode(parent)) { [EOL]         List<DiGraphEdge<Node, Branch>> outEdges = cfg.getOutEdges(parent); [EOL]         String[] edgeList = new String[outEdges.size()]; [EOL]         for (int i = 0; i < edgeList.length; i++) { [EOL]             DiGraphEdge<Node, ControlFlowGraph.Branch> edge = outEdges.get(i); [EOL]             DiGraphNode<Node, Branch> succ = edge.getDestination(); [EOL]             String toNode = null; [EOL]             if (succ == cfg.getImplicitReturn()) { [EOL]                 toNode = "RETURN"; [EOL]             } else { [EOL]                 int keySucc = key(succ.getValue()); [EOL]                 toNode = formatNodeName(keySucc); [EOL]             } [EOL]             edgeList[i] = formatNodeName(keyParent) + ARROW + toNode + " [label=\"" + edge.getValue().toString() + "\", " + "fontcolor=\"red\", " + "weight=0.01, color=\"red\"];\n"; [EOL]         } [EOL]         Arrays.sort(edgeList); [EOL]         for (int i = 0; i < edgeList.length; i++) { [EOL]             builder.append(INDENT); [EOL]             builder.append(edgeList[i]); [EOL]         } [EOL]     } [EOL] } <line_num>: 135,181
int key(Node n) throws IOException { [EOL]     Integer key = assignments.get(n); [EOL]     if (key == null) { [EOL]         key = keyCount++; [EOL]         assignments.put(n, key); [EOL]         builder.append(INDENT); [EOL]         builder.append(formatNodeName(key)); [EOL]         builder.append(" [label=\""); [EOL]         builder.append(name(n)); [EOL]         JSType type = n.getJSType(); [EOL]         if (type != null) { [EOL]             builder.append(" : "); [EOL]             builder.append(type.toString()); [EOL]         } [EOL]         if (printAnnotations && cfg != null && cfg.hasNode(n)) { [EOL]             Object annotation = cfg.getNode(n).getAnnotation(); [EOL]             if (annotation != null) { [EOL]                 builder.append("\\n"); [EOL]                 builder.append(annotation.toString()); [EOL]             } [EOL]         } [EOL]         builder.append("\""); [EOL]         if (n.getJSDocInfo() != null) { [EOL]             builder.append(" color=\"green\""); [EOL]         } [EOL]         builder.append("];\n"); [EOL]     } [EOL]     return key; [EOL] } <line_num>: 183,211
private String name(Node n) { [EOL]     int type = n.getType(); [EOL]     switch(type) { [EOL]         case Token.VOID: [EOL]             return "VOID"; [EOL]         default: [EOL]             return Token.name(type); [EOL]     } [EOL] } <line_num>: 213,222
private String formatNodeName(Integer key) { [EOL]     return "node" + key; [EOL] } <line_num>: 224,226
private void formatPreamble() throws IOException { [EOL]     builder.append("digraph AST {\n"); [EOL]     builder.append(INDENT); [EOL]     builder.append("node [color=lightblue2, style=filled];\n"); [EOL] } <line_num>: 228,232
private void formatConclusion() throws IOException { [EOL]     builder.append("}\n"); [EOL] } <line_num>: 234,236
public static String toDot(GraphvizGraph graph) { [EOL]     StringBuilder builder = new StringBuilder(); [EOL]     builder.append(graph.isDirected() ? "digraph" : "graph"); [EOL]     builder.append(INDENT); [EOL]     builder.append(graph.getName()); [EOL]     builder.append(" {\n"); [EOL]     builder.append(INDENT); [EOL]     builder.append("node [color=lightblue2, style=filled];\n"); [EOL]     final String edgeSymbol = graph.isDirected() ? ARROW : LINE; [EOL]     List<GraphvizNode> nodes = graph.getGraphvizNodes(); [EOL]     String[] nodeNames = new String[nodes.size()]; [EOL]     for (int i = 0; i < nodeNames.length; i++) { [EOL]         GraphvizNode gNode = nodes.get(i); [EOL]         nodeNames[i] = gNode.getId() + " [label=\"" + gNode.getLabel() + "\" color=\"" + gNode.getColor() + "\"]"; [EOL]     } [EOL]     Arrays.sort(nodeNames); [EOL]     for (String nodeName : nodeNames) { [EOL]         builder.append(INDENT); [EOL]         builder.append(nodeName); [EOL]         builder.append(";\n"); [EOL]     } [EOL]     List<GraphvizEdge> edges = graph.getGraphvizEdges(); [EOL]     String[] edgeNames = new String[edges.size()]; [EOL]     for (int i = 0; i < edgeNames.length; i++) { [EOL]         GraphvizEdge edge = edges.get(i); [EOL]         edgeNames[i] = edge.getNode1Id() + edgeSymbol + edge.getNode2Id(); [EOL]     } [EOL]     Arrays.sort(edgeNames); [EOL]     for (String edgeName : edgeNames) { [EOL]         builder.append(INDENT); [EOL]         builder.append(edgeName); [EOL]         builder.append(";\n"); [EOL]     } [EOL]     builder.append("}\n"); [EOL]     return builder.toString(); [EOL] } <line_num>: 244,295
