MaybeReachingVariableUse(ControlFlowGraph<Node> cfg, Scope jsScope, AbstractCompiler compiler) { [EOL]     super(cfg, new ReachingUsesJoinOp()); [EOL]     this.jsScope = jsScope; [EOL]     this.escaped = Sets.newHashSet(); [EOL]     computeEscaped(jsScope, escaped, compiler); [EOL] } <line_num>: 51,60
public ReachingUses() { [EOL]     mayUseMap = HashMultimap.create(); [EOL] } <line_num>: 88,90
public ReachingUses(ReachingUses other) { [EOL]     mayUseMap = HashMultimap.create(other.mayUseMap); [EOL] } <line_num>: 97,99
@Override [EOL] public boolean equals(Object other) { [EOL]     return (other instanceof ReachingUses) && ((ReachingUses) other).mayUseMap.equals(this.mayUseMap); [EOL] } <line_num>: 101,105
@Override [EOL] public int hashCode() { [EOL]     return mayUseMap.hashCode(); [EOL] } <line_num>: 107,110
@Override [EOL] public ReachingUses apply(List<ReachingUses> from) { [EOL]     ReachingUses result = new ReachingUses(); [EOL]     for (ReachingUses uses : from) { [EOL]         result.mayUseMap.putAll(uses.mayUseMap); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 121,128
@Override [EOL] boolean isForward() { [EOL]     return false; [EOL] } <line_num>: 131,134
@Override [EOL] ReachingUses createEntryLattice() { [EOL]     return new ReachingUses(); [EOL] } <line_num>: 136,139
@Override [EOL] ReachingUses createInitialEstimateLattice() { [EOL]     return new ReachingUses(); [EOL] } <line_num>: 141,144
@Override [EOL] ReachingUses flowThrough(Node n, ReachingUses input) { [EOL]     ReachingUses output = new ReachingUses(input); [EOL]     boolean conditional = hasExceptionHandler(n); [EOL]     computeMayUse(n, n, output, conditional); [EOL]     return output; [EOL] } <line_num>: 146,157
private boolean hasExceptionHandler(Node cfgNode) { [EOL]     List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode); [EOL]     for (DiGraphEdge<Node, Branch> edge : branchEdges) { [EOL]         if (edge.getValue() == Branch.ON_EX) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 159,167
private void computeMayUse(Node n, Node cfgNode, ReachingUses output, boolean conditional) { [EOL]     switch(n.getType()) { [EOL]         case Token.BLOCK: [EOL]         case Token.FUNCTION: [EOL]             return; [EOL]         case Token.NAME: [EOL]             addToUseIfLocal(n.getString(), cfgNode, output); [EOL]             return; [EOL]         case Token.WHILE: [EOL]         case Token.DO: [EOL]         case Token.IF: [EOL]             computeMayUse(NodeUtil.getConditionExpression(n), cfgNode, output, conditional); [EOL]             return; [EOL]         case Token.FOR: [EOL]             if (!NodeUtil.isForIn(n)) { [EOL]                 computeMayUse(NodeUtil.getConditionExpression(n), cfgNode, output, conditional); [EOL]             } else { [EOL]                 Node lhs = n.getFirstChild(); [EOL]                 Node rhs = lhs.getNext(); [EOL]                 if (lhs.isVar()) { [EOL]                     lhs = lhs.getLastChild(); [EOL]                 } [EOL]                 if (lhs.isName() && !conditional) { [EOL]                     removeFromUseIfLocal(lhs.getString(), output); [EOL]                 } [EOL]                 computeMayUse(rhs, cfgNode, output, conditional); [EOL]             } [EOL]             return; [EOL]         case Token.AND: [EOL]         case Token.OR: [EOL]             computeMayUse(n.getLastChild(), cfgNode, output, true); [EOL]             computeMayUse(n.getFirstChild(), cfgNode, output, conditional); [EOL]             return; [EOL]         case Token.HOOK: [EOL]             computeMayUse(n.getLastChild(), cfgNode, output, true); [EOL]             computeMayUse(n.getFirstChild().getNext(), cfgNode, output, true); [EOL]             computeMayUse(n.getFirstChild(), cfgNode, output, conditional); [EOL]             return; [EOL]         case Token.VAR: [EOL]             Node varName = n.getFirstChild(); [EOL]             Preconditions.checkState(n.hasChildren(), "AST should be normalized"); [EOL]             if (varName.hasChildren()) { [EOL]                 computeMayUse(varName.getFirstChild(), cfgNode, output, conditional); [EOL]                 if (!conditional) { [EOL]                     removeFromUseIfLocal(varName.getString(), output); [EOL]                 } [EOL]             } [EOL]             return; [EOL]         default: [EOL]             if (NodeUtil.isAssignmentOp(n) && n.getFirstChild().isName()) { [EOL]                 Node name = n.getFirstChild(); [EOL]                 if (!conditional) { [EOL]                     removeFromUseIfLocal(name.getString(), output); [EOL]                 } [EOL]                 if (!n.isAssign()) { [EOL]                     addToUseIfLocal(name.getString(), cfgNode, output); [EOL]                 } [EOL]                 computeMayUse(name.getNext(), cfgNode, output, conditional); [EOL]             } else { [EOL]                 for (Node c = n.getLastChild(); c != null; c = n.getChildBefore(c)) { [EOL]                     computeMayUse(c, cfgNode, output, conditional); [EOL]                 } [EOL]             } [EOL]     } [EOL] } <line_num>: 169,254
private void addToUseIfLocal(String name, Node node, ReachingUses use) { [EOL]     Var var = jsScope.getVar(name); [EOL]     if (var == null || var.scope != jsScope) { [EOL]         return; [EOL]     } [EOL]     if (!escaped.contains(var)) { [EOL]         use.mayUseMap.put(var, node); [EOL]     } [EOL] } <line_num>: 261,269
private void removeFromUseIfLocal(String name, ReachingUses use) { [EOL]     Var var = jsScope.getVar(name); [EOL]     if (var == null || var.scope != jsScope) { [EOL]         return; [EOL]     } [EOL]     if (!escaped.contains(var)) { [EOL]         use.mayUseMap.removeAll(var); [EOL]     } [EOL] } <line_num>: 276,284
Collection<Node> getUses(String name, Node defNode) { [EOL]     GraphNode<Node, Branch> n = getCfg().getNode(defNode); [EOL]     Preconditions.checkNotNull(n); [EOL]     FlowState<ReachingUses> state = n.getAnnotation(); [EOL]     return state.getOut().mayUseMap.get(jsScope.getVar(name)); [EOL] } <line_num>: 296,301
