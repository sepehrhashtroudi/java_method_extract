GlobalVarReferenceMap(List<CompilerInput> inputs, List<CompilerInput> externs) { [EOL]     inputOrder = Maps.newHashMap(); [EOL]     int ind = 0; [EOL]     for (CompilerInput extern : externs) { [EOL]         inputOrder.put(extern.getInputId(), ind); [EOL]         ind++; [EOL]     } [EOL]     for (CompilerInput input : inputs) { [EOL]         inputOrder.put(input.getInputId(), ind); [EOL]         ind++; [EOL]     } [EOL] } <line_num>: 51,62
SourceRefRange(List<Reference> refList, int lastBefore, int firstAfter) { [EOL]     this.lastBefore = Math.max(lastBefore, -1); [EOL]     this.firstAfter = Math.min(firstAfter, refList.size()); [EOL]     this.refList = refList; [EOL] } <line_num>: 195,200
public GlobalVarRefCleanupPass(AbstractCompiler compiler) { [EOL]     this.compiler = compiler; [EOL] } <line_num>: 243,245
@Override [EOL] public ReferenceCollection getReferences(Var var) { [EOL]     if (!var.isGlobal()) { [EOL]         return null; [EOL]     } [EOL]     return refMap.get(var.getName()); [EOL] } <line_num>: 64,70
private void resetGlobalVarReferences(Map<Var, ReferenceCollection> globalRefMap) { [EOL]     refMap = Maps.newHashMap(); [EOL]     for (Entry<Var, ReferenceCollection> entry : globalRefMap.entrySet()) { [EOL]         Var var = entry.getKey(); [EOL]         if (var.isGlobal()) { [EOL]             refMap.put(var.getName(), entry.getValue()); [EOL]         } [EOL]     } [EOL] } <line_num>: 78,87
void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch, Node root) { [EOL]     if (refMap == null || !root.isScript()) { [EOL]         resetGlobalVarReferences(refMapPatch); [EOL]         return; [EOL]     } [EOL]     InputId inputId = root.getInputId(); [EOL]     Preconditions.checkNotNull(inputId); [EOL]     removeScriptReferences(inputId); [EOL]     for (Entry<Var, ReferenceCollection> entry : refMapPatch.entrySet()) { [EOL]         Var var = entry.getKey(); [EOL]         if (var.isGlobal()) { [EOL]             replaceReferences(var.getName(), inputId, entry.getValue()); [EOL]         } [EOL]     } [EOL] } <line_num>: 100,119
private void removeScriptReferences(InputId inputId) { [EOL]     Preconditions.checkNotNull(inputId); [EOL]     if (!inputOrder.containsKey(inputId)) { [EOL]         return; [EOL]     } [EOL]     for (ReferenceCollection collection : refMap.values()) { [EOL]         if (collection == null) { [EOL]             continue; [EOL]         } [EOL]         List<Reference> oldRefs = collection.references; [EOL]         SourceRefRange range = findSourceRefRange(oldRefs, inputId); [EOL]         List<Reference> newRefs = Lists.newArrayList(range.refsBefore()); [EOL]         newRefs.addAll(range.refsAfter()); [EOL]         collection.references = newRefs; [EOL]     } [EOL] } <line_num>: 121,139
private void replaceReferences(String varName, InputId inputId, ReferenceCollection newSourceCollection) { [EOL]     ReferenceCollection combined = new ReferenceCollection(); [EOL]     List<Reference> combinedRefs = combined.references; [EOL]     ReferenceCollection oldCollection = refMap.get(varName); [EOL]     refMap.put(varName, combined); [EOL]     if (oldCollection == null) { [EOL]         combinedRefs.addAll(newSourceCollection.references); [EOL]         return; [EOL]     } [EOL]     SourceRefRange range = findSourceRefRange(oldCollection.references, inputId); [EOL]     combinedRefs.addAll(range.refsBefore()); [EOL]     combinedRefs.addAll(newSourceCollection.references); [EOL]     combinedRefs.addAll(range.refsAfter()); [EOL] } <line_num>: 141,157
private SourceRefRange findSourceRefRange(List<Reference> refList, InputId inputId) { [EOL]     Preconditions.checkNotNull(inputId); [EOL]     int lastBefore = -1; [EOL]     int firstAfter = refList.size(); [EOL]     int index = 0; [EOL]     Preconditions.checkState(inputOrder.containsKey(inputId), inputId.getIdName()); [EOL]     int sourceInputOrder = inputOrder.get(inputId); [EOL]     for (Reference ref : refList) { [EOL]         Preconditions.checkNotNull(ref.getInputId()); [EOL]         int order = inputOrder.get(ref.getInputId()); [EOL]         if (order < sourceInputOrder) { [EOL]             lastBefore = index; [EOL]         } else if (order > sourceInputOrder) { [EOL]             firstAfter = index; [EOL]             break; [EOL]         } [EOL]         index++; [EOL]     } [EOL]     return new SourceRefRange(refList, lastBefore, firstAfter); [EOL] } <line_num>: 164,188
List<Reference> refsBefore() { [EOL]     return refList.subList(0, lastBefore + 1); [EOL] } <line_num>: 203,205
List<Reference> refsAfter() { [EOL]     return refList.subList(firstAfter, refList.size()); [EOL] } <line_num>: 208,210
public void updateReferencesWithGlobalScope(Scope globalScope) { [EOL]     for (ReferenceCollection collection : refMap.values()) { [EOL]         List<Reference> newRefs = Lists.newArrayListWithCapacity(collection.references.size()); [EOL]         for (Reference ref : collection.references) { [EOL]             if (ref.getScope() != globalScope) { [EOL]                 newRefs.add(ref.cloneWithNewScope(globalScope)); [EOL]             } else { [EOL]                 newRefs.add(ref); [EOL]             } [EOL]         } [EOL]         collection.references = newRefs; [EOL]     } [EOL] } <line_num>: 217,230
@Override [EOL] public void hotSwapScript(Node scriptRoot, Node originalRoot) { [EOL]     GlobalVarReferenceMap refMap = compiler.getGlobalVarReferences(); [EOL]     if (refMap != null) { [EOL]         refMap.updateReferencesWithGlobalScope(compiler.getTopScope()); [EOL]     } [EOL] } <line_num>: 247,253
@Override [EOL] public void process(Node externs, Node root) { [EOL] } <line_num>: 255,258
