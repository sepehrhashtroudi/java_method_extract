JsDocTokenStream(String sourceString) { [EOL]     this(sourceString, 0); [EOL] } <line_num>: 37,39
JsDocTokenStream(String sourceString, int lineno) { [EOL]     this(sourceString, lineno, 0); [EOL] } <line_num>: 41,43
JsDocTokenStream(String sourceString, int lineno, int initCharno) { [EOL]     Preconditions.checkNotNull(sourceString); [EOL]     this.lineno = lineno; [EOL]     this.sourceString = sourceString; [EOL]     this.sourceEnd = sourceString.length(); [EOL]     this.sourceCursor = this.cursor = 0; [EOL]     this.initLineno = lineno; [EOL]     this.initCharno = initCharno; [EOL] } <line_num>: 45,53
@SuppressWarnings("fallthrough") [EOL] final JsDocToken getJsDocToken() { [EOL]     int c; [EOL]     stringBufferTop = 0; [EOL]     for (; ; ) { [EOL]         for (; ; ) { [EOL]             charno = -1; [EOL]             c = getChar(); [EOL]             if (c == EOF_CHAR) { [EOL]                 return JsDocToken.EOF; [EOL]             } else if (c == '\n') { [EOL]                 return JsDocToken.EOL; [EOL]             } else if (!isJSSpace(c)) { [EOL]                 break; [EOL]             } [EOL]         } [EOL]         switch(c) { [EOL]             case '@': [EOL]                 do { [EOL]                     c = getChar(); [EOL]                     if (isAlpha(c)) { [EOL]                         addToString(c); [EOL]                     } else { [EOL]                         ungetChar(c); [EOL]                         this.string = getStringFromBuffer(); [EOL]                         stringBufferTop = 0; [EOL]                         return JsDocToken.ANNOTATION; [EOL]                     } [EOL]                 } while (true); [EOL]             case '*': [EOL]                 if (matchChar('/')) { [EOL]                     return JsDocToken.EOC; [EOL]                 } else { [EOL]                     return JsDocToken.STAR; [EOL]                 } [EOL]             case ',': [EOL]                 return JsDocToken.COMMA; [EOL]             case '>': [EOL]                 return JsDocToken.GT; [EOL]             case '(': [EOL]                 return JsDocToken.LP; [EOL]             case ')': [EOL]                 return JsDocToken.RP; [EOL]             case '{': [EOL]                 return JsDocToken.LC; [EOL]             case '}': [EOL]                 return JsDocToken.RC; [EOL]             case '[': [EOL]                 return JsDocToken.LB; [EOL]             case ']': [EOL]                 return JsDocToken.RB; [EOL]             case '?': [EOL]                 return JsDocToken.QMARK; [EOL]             case '!': [EOL]                 return JsDocToken.BANG; [EOL]             case ':': [EOL]                 return JsDocToken.COLON; [EOL]             case '=': [EOL]                 return JsDocToken.EQUALS; [EOL]             case '|': [EOL]                 matchChar('|'); [EOL]                 return JsDocToken.PIPE; [EOL]             case '.': [EOL]                 c = getChar(); [EOL]                 if (c == '<') { [EOL]                     return JsDocToken.LT; [EOL]                 } else { [EOL]                     if (c == '.') { [EOL]                         c = getChar(); [EOL]                         if (c == '.') { [EOL]                             return JsDocToken.ELLIPSIS; [EOL]                         } else { [EOL]                             addToString('.'); [EOL]                         } [EOL]                     } [EOL]                     ungetBuffer[ungetCursor++] = c; [EOL]                     c = '.'; [EOL]                 } [EOL]             default: [EOL]                 { [EOL]                     int c1 = c; [EOL]                     addToString(c); [EOL]                     int c2 = getChar(); [EOL]                     if (!isJSDocString(c2)) { [EOL]                         ungetChar(c2); [EOL]                         this.string = getStringFromBuffer(); [EOL]                         stringBufferTop = 0; [EOL]                         return JsDocToken.STRING; [EOL]                     } else { [EOL]                         do { [EOL]                             c1 = c2; [EOL]                             c2 = getChar(); [EOL]                             if (c1 == '.' && c2 == '<') { [EOL]                                 ungetChar(c2); [EOL]                                 ungetChar(c1); [EOL]                                 this.string = getStringFromBuffer(); [EOL]                                 stringBufferTop = 0; [EOL]                                 return JsDocToken.STRING; [EOL]                             } else { [EOL]                                 if (isJSDocString(c2)) { [EOL]                                     addToString(c1); [EOL]                                 } else { [EOL]                                     ungetChar(c2); [EOL]                                     addToString(c1); [EOL]                                     this.string = getStringFromBuffer(); [EOL]                                     stringBufferTop = 0; [EOL]                                     return JsDocToken.STRING; [EOL]                                 } [EOL]                             } [EOL]                         } while (true); [EOL]                     } [EOL]                 } [EOL]         } [EOL]     } [EOL] } <line_num>: 58,194
@SuppressWarnings("fallthrough") [EOL] String getRemainingJSDocLine() { [EOL]     int c; [EOL]     for (; ; ) { [EOL]         c = getChar(); [EOL]         switch(c) { [EOL]             case '*': [EOL]                 if (peekChar() != '/') { [EOL]                     addToString(c); [EOL]                     break; [EOL]                 } [EOL]             case EOF_CHAR: [EOL]             case '\n': [EOL]                 ungetChar(c); [EOL]                 this.string = getStringFromBuffer(); [EOL]                 stringBufferTop = 0; [EOL]                 return this.string; [EOL]             default: [EOL]                 addToString(c); [EOL]                 break; [EOL]         } [EOL]     } [EOL] } <line_num>: 200,224
final int getLineno() { [EOL]     return lineno; [EOL] } <line_num>: 226,226
final int getCharno() { [EOL]     return lineno == initLineno ? initCharno + charno : charno; [EOL] } <line_num>: 228,230
final String getString() { [EOL]     return string; [EOL] } <line_num>: 232,232
final boolean eof() { [EOL]     return hitEOF; [EOL] } <line_num>: 234,234
private String getStringFromBuffer() { [EOL]     tokenEnd = cursor; [EOL]     return new String(stringBuffer, 0, stringBufferTop); [EOL] } <line_num>: 236,239
private void addToString(int c) { [EOL]     int N = stringBufferTop; [EOL]     if (N == stringBuffer.length) { [EOL]         char[] tmp = new char[stringBuffer.length * 2]; [EOL]         System.arraycopy(stringBuffer, 0, tmp, 0, N); [EOL]         stringBuffer = tmp; [EOL]     } [EOL]     stringBuffer[N] = (char) c; [EOL]     stringBufferTop = N + 1; [EOL] } <line_num>: 241,250
void ungetChar(int c) { [EOL]     assert (!(ungetCursor != 0 && ungetBuffer[ungetCursor - 1] == '\n')); [EOL]     ungetBuffer[ungetCursor++] = c; [EOL]     cursor--; [EOL] } <line_num>: 252,257
private boolean matchChar(int test) { [EOL]     int c = getCharIgnoreLineEnd(); [EOL]     if (c == test) { [EOL]         tokenEnd = cursor; [EOL]         return true; [EOL]     } else { [EOL]         ungetCharIgnoreLineEnd(c); [EOL]         return false; [EOL]     } [EOL] } <line_num>: 259,268
private static boolean isAlpha(int c) { [EOL]     if (c <= 'Z') { [EOL]         return 'A' <= c; [EOL]     } else { [EOL]         return 'a' <= c && c <= 'z'; [EOL]     } [EOL] } <line_num>: 270,277
private boolean isJSDocString(int c) { [EOL]     switch(c) { [EOL]         case '@': [EOL]         case '*': [EOL]         case ',': [EOL]         case '>': [EOL]         case ':': [EOL]         case '(': [EOL]         case ')': [EOL]         case '{': [EOL]         case '}': [EOL]         case '[': [EOL]         case ']': [EOL]         case '?': [EOL]         case '!': [EOL]         case '|': [EOL]         case '=': [EOL]         case EOF_CHAR: [EOL]         case '\n': [EOL]             return false; [EOL]         default: [EOL]             return !isJSSpace(c); [EOL]     } [EOL] } <line_num>: 279,303
static boolean isJSSpace(int c) { [EOL]     if (c <= 127) { [EOL]         return c == 0x20 || c == 0x9 || c == 0xC || c == 0xB; [EOL]     } else { [EOL]         return c == 0xA0 || Character.getType((char) c) == Character.SPACE_SEPARATOR; [EOL]     } [EOL] } <line_num>: 309,316
private static boolean isJSFormatChar(int c) { [EOL]     return c > 127 && Character.getType((char) c) == Character.FORMAT; [EOL] } <line_num>: 318,320
void update() { [EOL]     charno = getOffset(); [EOL] } <line_num>: 326,328
private int peekChar() { [EOL]     int c = getChar(); [EOL]     ungetChar(c); [EOL]     return c; [EOL] } <line_num>: 330,334
protected int getChar() { [EOL]     if (ungetCursor != 0) { [EOL]         cursor++; [EOL]         --ungetCursor; [EOL]         if (charno == -1) { [EOL]             charno = getOffset(); [EOL]         } [EOL]         return ungetBuffer[ungetCursor]; [EOL]     } [EOL]     for (; ; ) { [EOL]         int c; [EOL]         if (sourceCursor == sourceEnd) { [EOL]             hitEOF = true; [EOL]             if (charno == -1) { [EOL]                 charno = getOffset(); [EOL]             } [EOL]             return EOF_CHAR; [EOL]         } [EOL]         cursor++; [EOL]         c = sourceString.charAt(sourceCursor++); [EOL]         if (lineEndChar >= 0) { [EOL]             if (lineEndChar == '\r' && c == '\n') { [EOL]                 lineEndChar = '\n'; [EOL]                 continue; [EOL]             } [EOL]             lineEndChar = -1; [EOL]             lineStart = sourceCursor - 1; [EOL]             lineno++; [EOL]         } [EOL]         if (c <= 127) { [EOL]             if (c == '\n' || c == '\r') { [EOL]                 lineEndChar = c; [EOL]                 c = '\n'; [EOL]             } [EOL]         } else { [EOL]             if (isJSFormatChar(c)) { [EOL]                 continue; [EOL]             } [EOL]             if (ScriptRuntime.isJSLineTerminator(c)) { [EOL]                 lineEndChar = c; [EOL]                 c = '\n'; [EOL]             } [EOL]         } [EOL]         if (charno == -1) { [EOL]             charno = getOffset(); [EOL]         } [EOL]         return c; [EOL]     } [EOL] } <line_num>: 336,390
private int getCharIgnoreLineEnd() { [EOL]     if (ungetCursor != 0) { [EOL]         cursor++; [EOL]         --ungetCursor; [EOL]         if (charno == -1) { [EOL]             charno = getOffset(); [EOL]         } [EOL]         return ungetBuffer[ungetCursor]; [EOL]     } [EOL]     for (; ; ) { [EOL]         int c; [EOL]         if (sourceCursor == sourceEnd) { [EOL]             hitEOF = true; [EOL]             if (charno == -1) { [EOL]                 charno = getOffset(); [EOL]             } [EOL]             return EOF_CHAR; [EOL]         } [EOL]         cursor++; [EOL]         c = sourceString.charAt(sourceCursor++); [EOL]         if (c <= 127) { [EOL]             if (c == '\n' || c == '\r') { [EOL]                 lineEndChar = c; [EOL]                 c = '\n'; [EOL]             } [EOL]         } else { [EOL]             if (isJSFormatChar(c)) { [EOL]                 continue; [EOL]             } [EOL]             if (ScriptRuntime.isJSLineTerminator(c)) { [EOL]                 lineEndChar = c; [EOL]                 c = '\n'; [EOL]             } [EOL]         } [EOL]         if (charno == -1) { [EOL]             charno = getOffset(); [EOL]         } [EOL]         return c; [EOL]     } [EOL] } <line_num>: 392,436
private void ungetCharIgnoreLineEnd(int c) { [EOL]     ungetBuffer[ungetCursor++] = c; [EOL]     cursor--; [EOL] } <line_num>: 438,441
final int getOffset() { [EOL]     return sourceCursor - lineStart - ungetCursor - 1; [EOL] } <line_num>: 446,448
