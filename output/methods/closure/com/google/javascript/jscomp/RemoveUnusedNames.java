RemoveUnusedNames(AbstractCompiler compiler, boolean canModifyExterns) { [EOL]     this.compiler = compiler; [EOL]     this.canModifyExterns = canModifyExterns; [EOL] } <line_num>: 45,49
@Override [EOL] public void process(Node externRoot, Node root) { [EOL]     AnalyzeNameReferences analyzer = new AnalyzeNameReferences(compiler); [EOL]     analyzer.process(externRoot, root); [EOL]     removeUnusedProperties(analyzer.getGraph()); [EOL] } <line_num>: 51,57
private void removeUnusedProperties(NameReferenceGraph graph) { [EOL]     for (GraphNode<Name, Reference> node : graph.getNodes()) { [EOL]         Name name = node.getValue(); [EOL]         NameInfo nameInfo = node.getAnnotation(); [EOL]         if (nameInfo == null || !nameInfo.isReferenced()) { [EOL]             if (canModifyExterns || !name.isExtern()) { [EOL]                 name.remove(); [EOL]                 compiler.reportCodeChange(); [EOL]                 logger.fine("Removed unused name" + name); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 63,75
