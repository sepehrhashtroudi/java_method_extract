GatherRawExports(AbstractCompiler compiler) { [EOL]     this.compiler = compiler; [EOL] } <line_num>: 40,42
@Override [EOL] public void process(Node externs, Node root) { [EOL]     Preconditions.checkState(compiler.getLifeCycleStage().isNormalized()); [EOL]     NodeTraversal.traverse(compiler, root, this); [EOL] } <line_num>: 44,48
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     Node sibling = n.getNext(); [EOL]     if (sibling != null && sibling.isString() && NodeUtil.isGet(parent)) { [EOL]         if (isGlobalThisObject(t, n)) { [EOL]             exportedVariables.add(sibling.getString()); [EOL]         } [EOL]     } [EOL] } <line_num>: 50,62
private boolean isGlobalThisObject(NodeTraversal t, Node n) { [EOL]     if (n.isThis()) { [EOL]         return t.inGlobalScope(); [EOL]     } else if (n.isName()) { [EOL]         String varName = n.getString(); [EOL]         int items = GLOBAL_THIS_NAMES.length; [EOL]         for (int i = 0; i < items; i++) { [EOL]             if (varName.equals(GLOBAL_THIS_NAMES[i])) { [EOL]                 return true; [EOL]             } [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 64,77
public Set<String> getExportedVariableNames() { [EOL]     return exportedVariables; [EOL] } <line_num>: 79,81
