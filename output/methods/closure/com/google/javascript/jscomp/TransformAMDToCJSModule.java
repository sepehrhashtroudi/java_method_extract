TransformAMDToCJSModule(AbstractCompiler compiler) { [EOL]     this.compiler = compiler; [EOL] } <line_num>: 54,56
public RenameCallback(String from, String to) { [EOL]     this.from = from; [EOL]     this.to = to; [EOL] } <line_num>: 289,292
@Override [EOL] public void process(Node externs, Node root) { [EOL]     NodeTraversal.traverse(compiler, root, new TransformAMDModulesCallback()); [EOL] } <line_num>: 58,61
private void unsupportedDefineError(NodeTraversal t, Node n) { [EOL]     t.report(n, UNSUPPORTED_DEFINE_SIGNATURE_ERROR); [EOL] } <line_num>: 63,65
private boolean isVirtualModuleName(String moduleName) { [EOL]     return "exports".equals(moduleName) || "require".equals(moduleName) || "module".equals(moduleName); [EOL] } <line_num>: 71,74
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (n.isCall() && n.getFirstChild() != null && n.getFirstChild().isName() && "define".equals(n.getFirstChild().getString())) { [EOL]         Scope.Var define = t.getScope().getVar(n.getFirstChild().getString()); [EOL]         if (define != null && !define.isGlobal()) { [EOL]             return; [EOL]         } [EOL]         if (!(parent.isExprResult() && parent.getParent().isScript())) { [EOL]             t.report(n, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR); [EOL]             return; [EOL]         } [EOL]         Node script = parent.getParent(); [EOL]         Node requiresNode = null; [EOL]         Node callback = null; [EOL]         int defineArity = n.getChildCount() - 1; [EOL]         if (defineArity == 0) { [EOL]             unsupportedDefineError(t, n); [EOL]             return; [EOL]         } else if (defineArity == 1) { [EOL]             callback = n.getChildAtIndex(1); [EOL]             if (callback.isObjectLit()) { [EOL]                 handleDefineObjectLiteral(parent, callback, script); [EOL]                 return; [EOL]             } [EOL]         } else if (defineArity == 2) { [EOL]             requiresNode = n.getChildAtIndex(1); [EOL]             callback = n.getChildAtIndex(2); [EOL]         } else if (defineArity >= 3) { [EOL]             unsupportedDefineError(t, n); [EOL]             return; [EOL]         } [EOL]         if (!callback.isFunction() || (requiresNode != null && !requiresNode.isArrayLit())) { [EOL]             unsupportedDefineError(t, n); [EOL]             return; [EOL]         } [EOL]         handleRequiresAndParamList(t, n, script, requiresNode, callback); [EOL]         Node callbackBlock = callback.getChildAtIndex(2); [EOL]         NodeTraversal.traverse(compiler, callbackBlock, new DefineCallbackReturnCallback()); [EOL]         moveCallbackContentToTopLevel(parent, script, callbackBlock); [EOL]         compiler.reportCodeChange(); [EOL]     } [EOL] } <line_num>: 82,133
private void handleDefineObjectLiteral(Node parent, Node onlyExport, Node script) { [EOL]     onlyExport.getParent().removeChild(onlyExport); [EOL]     script.replaceChild(parent, IR.exprResult(IR.assign(IR.name("exports"), onlyExport)).copyInformationFromForTree(onlyExport)); [EOL]     compiler.reportCodeChange(); [EOL] } <line_num>: 139,146
private void handleRequiresAndParamList(NodeTraversal t, Node defineNode, Node script, Node requiresNode, Node callback) { [EOL]     Iterator<Node> paramList = callback.getChildAtIndex(1).children().iterator(); [EOL]     Iterator<Node> requires = requiresNode != null ? requiresNode.children().iterator() : Iterators.<Node>emptyIterator(); [EOL]     while (paramList.hasNext() || requires.hasNext()) { [EOL]         Node aliasNode = paramList.hasNext() ? paramList.next() : null; [EOL]         Node modNode = requires.hasNext() ? requires.next() : null; [EOL]         handleRequire(t, defineNode, script, callback, aliasNode, modNode); [EOL]     } [EOL] } <line_num>: 152,163
private void handleRequire(NodeTraversal t, Node defineNode, Node script, Node callback, Node aliasNode, Node modNode) { [EOL]     String moduleName = null; [EOL]     if (modNode != null) { [EOL]         moduleName = handlePlugins(t, script, modNode.getString(), modNode); [EOL]     } [EOL]     if (isVirtualModuleName(moduleName)) { [EOL]         return; [EOL]     } [EOL]     String aliasName = aliasNode != null ? aliasNode.getString() : null; [EOL]     Scope globalScope = t.getScope(); [EOL]     if (aliasName != null && globalScope.isDeclared(aliasName, true)) { [EOL]         while (true) { [EOL]             String renamed = aliasName + VAR_RENAME_SUFFIX + renameIndex; [EOL]             if (!globalScope.isDeclared(renamed, true)) { [EOL]                 NodeTraversal.traverse(compiler, callback, new RenameCallback(aliasName, renamed)); [EOL]                 aliasName = renamed; [EOL]                 break; [EOL]             } [EOL]             renameIndex++; [EOL]         } [EOL]     } [EOL]     Node requireNode; [EOL]     if (moduleName != null) { [EOL]         Node call = IR.call(IR.name("require"), IR.string(moduleName)); [EOL]         call.putBooleanProp(Node.FREE_CALL, true); [EOL]         if (aliasName != null) { [EOL]             requireNode = IR.var(IR.name(aliasName), call).copyInformationFromForTree(aliasNode); [EOL]         } else { [EOL]             requireNode = IR.exprResult(call).copyInformationFromForTree(modNode); [EOL]         } [EOL]     } else { [EOL]         if (isVirtualModuleName(aliasName)) { [EOL]             return; [EOL]         } [EOL]         requireNode = IR.var(IR.name(aliasName), IR.nullNode()).copyInformationFromForTree(aliasNode); [EOL]     } [EOL]     script.addChildBefore(requireNode, defineNode.getParent()); [EOL] } <line_num>: 168,218
private String handlePlugins(NodeTraversal t, Node script, String moduleName, Node modNode) { [EOL]     if (moduleName.contains("!")) { [EOL]         t.report(modNode, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING, moduleName); [EOL]         int condition = moduleName.indexOf('?'); [EOL]         if (condition > 0) { [EOL]             if (moduleName.contains(":")) { [EOL]                 return null; [EOL]             } [EOL]             return handlePlugins(t, script, moduleName.substring(condition + 1), modNode); [EOL]         } [EOL]         moduleName = null; [EOL]     } [EOL]     return moduleName; [EOL] } <line_num>: 227,242
private void moveCallbackContentToTopLevel(Node defineParent, Node script, Node callbackBlock) { [EOL]     int curIndex = script.getIndexOfChild(defineParent); [EOL]     script.removeChild(defineParent); [EOL]     callbackBlock.getParent().removeChild(callbackBlock); [EOL]     Node before = script.getChildAtIndex(curIndex); [EOL]     if (before != null) { [EOL]         script.addChildBefore(callbackBlock, before); [EOL]     } [EOL]     script.addChildToBack(callbackBlock); [EOL]     NodeUtil.tryMergeBlock(callbackBlock); [EOL] } <line_num>: 248,259
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (n.isReturn() && n.hasChildren()) { [EOL]         Node retVal = n.getFirstChild(); [EOL]         n.removeChild(retVal); [EOL]         parent.replaceChild(n, IR.exprResult(IR.assign(IR.getprop(IR.name("module"), IR.string("exports")), retVal)).useSourceInfoFromForTree(n)); [EOL]     } [EOL] } <line_num>: 268,278
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (n.isName() && from.equals(n.getString())) { [EOL]         n.setString(to); [EOL]         n.putProp(Node.ORIGINALNAME_PROP, from); [EOL]     } [EOL] } <line_num>: 294,300
