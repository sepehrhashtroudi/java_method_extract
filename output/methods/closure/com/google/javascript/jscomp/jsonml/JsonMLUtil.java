JsonMLComparator(JsonML treeA, JsonML treeB) { [EOL]     this.treeA = treeA; [EOL]     this.treeB = treeB; [EOL]     if (compareElements(treeA, treeB)) { [EOL]         mismatchA = null; [EOL]         mismatchB = null; [EOL]     } [EOL] } <line_num>: 192,199
public static boolean isExpression(JsonML element) { [EOL]     switch(element.getType()) { [EOL]         case ArrayExpr: [EOL]         case AssignExpr: [EOL]         case BinaryExpr: [EOL]         case CallExpr: [EOL]         case ConditionalExpr: [EOL]         case CountExpr: [EOL]         case DeleteExpr: [EOL]         case EvalExpr: [EOL]         case FunctionExpr: [EOL]         case IdExpr: [EOL]         case InvokeExpr: [EOL]         case LiteralExpr: [EOL]         case LogicalAndExpr: [EOL]         case LogicalOrExpr: [EOL]         case MemberExpr: [EOL]         case NewExpr: [EOL]         case ObjectExpr: [EOL]         case RegExpExpr: [EOL]         case ThisExpr: [EOL]         case TypeofExpr: [EOL]         case UnaryExpr: [EOL]             return true; [EOL]         default: [EOL]             return false; [EOL]     } [EOL] } <line_num>: 34,61
public static JsonML parseString(String jsonml) throws Exception { [EOL]     return parseElement(new JSONArray(jsonml)); [EOL] } <line_num>: 68,70
private static JsonML parseElement(JSONArray element) throws Exception { [EOL]     JsonML jsonMLElement = new JsonML(TagType.valueOf(element.getString(0))); [EOL]     JSONObject attrs = element.getJSONObject(1); [EOL]     Iterator<?> it = attrs.keys(); [EOL]     while (it.hasNext()) { [EOL]         String key = (String) it.next(); [EOL]         Object value = attrs.get(key); [EOL]         TagAttr tag = TagAttr.get(key); [EOL]         if (tag == null) { [EOL]             continue; [EOL]         } [EOL]         if (value instanceof Number) { [EOL]             value = ((Number) value).doubleValue(); [EOL]         } [EOL]         switch(tag) { [EOL]             case NAME: [EOL]             case BODY: [EOL]             case FLAGS: [EOL]             case OP: [EOL]             case TYPE: [EOL]             case IS_PREFIX: [EOL]             case LABEL: [EOL]                 jsonMLElement.setAttribute(tag, value); [EOL]                 break; [EOL]             case VALUE: [EOL]                 if (value != null && value.equals(null)) { [EOL]                     value = null; [EOL]                 } [EOL]                 if (value instanceof Number) { [EOL]                     jsonMLElement.setAttribute(tag, ((Number) value).doubleValue()); [EOL]                 } else { [EOL]                     jsonMLElement.setAttribute(tag, value); [EOL]                 } [EOL]                 break; [EOL]             default: [EOL]         } [EOL]     } [EOL]     for (int i = 2; i < element.length(); ++i) { [EOL]         jsonMLElement.appendChild(parseElement(element.getJSONArray(i))); [EOL]     } [EOL]     return jsonMLElement; [EOL] } <line_num>: 72,126
public static String compare(JsonML tree1, JsonML tree2) { [EOL]     return (new JsonMLComparator(tree1, tree2)).compare(); [EOL] } <line_num>: 167,169
static boolean compareSilent(JsonML tree1, JsonML tree2) { [EOL]     return (new JsonMLComparator(tree1, tree2)).compareSilent(); [EOL] } <line_num>: 174,176
private boolean setMismatch(JsonML a, JsonML b) { [EOL]     mismatchA = a; [EOL]     mismatchB = b; [EOL]     return false; [EOL] } <line_num>: 201,205
private boolean compareElements(JsonML a, JsonML b) { [EOL]     if (a == null || b == null) { [EOL]         if (a == null && b == null) { [EOL]             return true; [EOL]         } else { [EOL]             return setMismatch(a, b); [EOL]         } [EOL]     } [EOL]     if (!areEquivalent(a, b)) { [EOL]         return setMismatch(a, b); [EOL]     } [EOL]     if (a.childrenSize() != b.childrenSize()) { [EOL]         return setMismatch(a, b); [EOL]     } [EOL]     Iterator<JsonML> itA = a.getChildren().listIterator(); [EOL]     Iterator<JsonML> itB = b.getChildren().listIterator(); [EOL]     while (itA.hasNext()) { [EOL]         if (!compareElements(itA.next(), itB.next())) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 210,240
private boolean areEquivalent(JsonML a, JsonML b) { [EOL]     if (a.getType() != b.getType()) { [EOL]         return false; [EOL]     } [EOL]     for (TagAttr attr : ATTRS_TO_COMPARE) { [EOL]         if (!compareAttribute(attr, a, b)) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 245,257
private boolean compareAttribute(TagAttr attr, JsonML a, JsonML b) { [EOL]     Object valueA = a.getAttributes().get(attr); [EOL]     Object valueB = b.getAttributes().get(attr); [EOL]     if (valueA == null && valueB == null) { [EOL]         return true; [EOL]     } [EOL]     if (valueA == null || valueB == null) { [EOL]         return false; [EOL]     } [EOL]     if (!(valueA.equals(valueB))) { [EOL]         Double doubleA = null, doubleB = null; [EOL]         if (valueA instanceof Number) { [EOL]             doubleA = ((Number) valueA).doubleValue(); [EOL]         } else if (valueA instanceof String) { [EOL]             doubleA = Double.valueOf((String) valueA); [EOL]         } else { [EOL]             return false; [EOL]         } [EOL]         if (valueB instanceof Number) { [EOL]             doubleB = ((Number) valueB).doubleValue(); [EOL]         } else if (valueB instanceof String) { [EOL]             doubleB = Double.valueOf((String) valueB); [EOL]         } else { [EOL]             return false; [EOL]         } [EOL]         if (!doubleA.equals(doubleB)) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 259,302
private boolean compareSilent() { [EOL]     return mismatchA == null && mismatchB == null; [EOL] } <line_num>: 304,306
private String compare() { [EOL]     if (compareSilent()) { [EOL]         return null; [EOL]     } [EOL]     return "The trees are not equal: " + "\n\nTree1:\n " + treeA.toStringTree() + "\n\nTree2:\n " + treeB.toStringTree() + "\n\nSubtree1:\n " + mismatchA.toStringTree() + "\n\nSubtree2:\n " + mismatchB.toStringTree(); [EOL] } <line_num>: 308,318
