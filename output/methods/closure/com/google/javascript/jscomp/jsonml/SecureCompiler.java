public SecureCompiler() { [EOL]     compiler = new Compiler(); [EOL]     options = getSecureCompilerOptions(); [EOL] } <line_num>: 71,74
private Report(JsonMLError[] errors, JsonMLError[] warnings) { [EOL]     this.success = errors.length == 0; [EOL]     this.errors = errors; [EOL]     this.warnings = warnings; [EOL] } <line_num>: 179,183
public JsonML getJsonML() { [EOL]     Preconditions.checkState(report != null, COMPILATION_UNCOMPLETED_MSG); [EOL]     Preconditions.checkState(report.success, COMPILATION_UNSUCCESSFUL_MSG); [EOL]     return sourceAst.convertToJsonML(); [EOL] } <line_num>: 79,83
public String getString() { [EOL]     Preconditions.checkState(report != null, COMPILATION_UNCOMPLETED_MSG); [EOL]     Preconditions.checkState(report.success, COMPILATION_UNSUCCESSFUL_MSG); [EOL]     return compiler.toSource(); [EOL] } <line_num>: 88,92
public Report getReport() { [EOL]     Preconditions.checkState(report != null, COMPILATION_UNCOMPLETED_MSG); [EOL]     return report; [EOL] } <line_num>: 97,100
public void compile(JsonML source) { [EOL]     if (report != null) { [EOL]         throw new IllegalStateException(COMPILATION_ALREADY_COMPLETED_MSG); [EOL]     } [EOL]     sourceAst = new JsonMLAst(source); [EOL]     CompilerInput input = new CompilerInput(sourceAst, "[[jsonmlsource]]", false); [EOL]     JSModule module = new JSModule("[[jsonmlmodule]]"); [EOL]     module.add(input); [EOL]     Result result = compiler.compileModules(ImmutableList.<SourceFile>of(), ImmutableList.of(module), options); [EOL]     report = generateReport(result); [EOL] } <line_num>: 102,121
private CompilerOptions getSecureCompilerOptions() { [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     options.variableRenaming = VariableRenamingPolicy.OFF; [EOL]     options.setInlineVariables(Reach.LOCAL_ONLY); [EOL]     options.inlineLocalFunctions = true; [EOL]     options.checkGlobalThisLevel = CheckLevel.OFF; [EOL]     options.coalesceVariableNames = true; [EOL]     options.deadAssignmentElimination = true; [EOL]     options.collapseVariableDeclarations = true; [EOL]     options.convertToDottedProperties = true; [EOL]     options.labelRenaming = true; [EOL]     options.removeDeadCode = true; [EOL]     options.optimizeArgumentsArray = true; [EOL]     options.removeUnusedVars = false; [EOL]     options.removeUnusedLocalVars = true; [EOL]     return options; [EOL] } <line_num>: 129,147
public void enableFoldConstant() { [EOL]     options.foldConstants = true; [EOL] } <line_num>: 149,151
Report generateReport(Result result) { [EOL]     if (result == null) { [EOL]         return null; [EOL]     } [EOL]     ArrayList<JsonMLError> errors = Lists.newArrayList(); [EOL]     for (JSError error : result.errors) { [EOL]         errors.add(JsonMLError.make(error, sourceAst)); [EOL]     } [EOL]     ArrayList<JsonMLError> warnings = Lists.newArrayList(); [EOL]     for (JSError warning : result.warnings) { [EOL]         warnings.add(JsonMLError.make(warning, sourceAst)); [EOL]     } [EOL]     return new Report(errors.toArray(new JsonMLError[0]), warnings.toArray(new JsonMLError[0])); [EOL] } <line_num>: 153,172
public boolean isSuccessful() { [EOL]     return success; [EOL] } <line_num>: 185,187
public JsonMLError[] getErrors() { [EOL]     return errors; [EOL] } <line_num>: 189,191
public JsonMLError[] getWarnings() { [EOL]     return warnings; [EOL] } <line_num>: 193,195
