public JsonMLAst(JsonML jsonml) { [EOL]     this.jsonml = jsonml; [EOL]     this.inputId = new InputId(getSourceName()); [EOL]     this.sourceFile = new SourceFile(getSourceName()); [EOL] } <line_num>: 58,62
WalkHelper(JsonML element, int childno) { [EOL]     this.element = element; [EOL]     this.childno = childno; [EOL] } <line_num>: 172,175
@Override [EOL] public void clearAst() { [EOL]     root = null; [EOL] } <line_num>: 64,67
@Override [EOL] public Node getAstRoot(AbstractCompiler compiler) { [EOL]     if (root == null) { [EOL]         createAst(compiler); [EOL]     } [EOL]     return root; [EOL] } <line_num>: 73,79
@Override [EOL] public SourceFile getSourceFile() { [EOL]     return null; [EOL] } <line_num>: 81,84
@Override [EOL] public void setSourceFile(SourceFile file) { [EOL]     throw new UnsupportedOperationException("JsonMLAst cannot be associated with a SourceFile instance."); [EOL] } <line_num>: 86,90
public String getSourceName() { [EOL]     Object obj = jsonml.getAttribute(TagAttr.SOURCE); [EOL]     if (obj instanceof String) { [EOL]         return (String) obj; [EOL]     } else { [EOL]         return DEFAULT_SOURCE_NAME; [EOL]     } [EOL] } <line_num>: 92,99
private void createAst(AbstractCompiler compiler) { [EOL]     Reader translator = new Reader(); [EOL]     translator.setRootElement(jsonml); [EOL]     try { [EOL]         root = translator.parse(compiler); [EOL]         root.setInputId(inputId); [EOL]         root.setStaticSourceFile(sourceFile); [EOL]         new AstValidator().validateScript(root); [EOL]     } catch (JsonMLException e) { [EOL]     } [EOL] } <line_num>: 101,112
public JsonML convertToJsonML() { [EOL]     if (root != null) { [EOL]         Writer converter = new Writer(); [EOL]         return converter.processAst(root); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 114,120
public JsonML getElementPreOrder(int n) { [EOL]     Preconditions.checkState(jsonml != null); [EOL]     if (n == 0) { [EOL]         return jsonml; [EOL]     } [EOL]     Deque<WalkHelper> stack = new ArrayDeque<WalkHelper>(); [EOL]     stack.push(new WalkHelper(jsonml, 0)); [EOL]     int i = 0; [EOL]     while (i <= n && !stack.isEmpty()) { [EOL]         WalkHelper current = stack.pop(); [EOL]         JsonML element = current.element; [EOL]         Integer childno = current.childno; [EOL]         if (childno < element.childrenSize()) { [EOL]             stack.push(new WalkHelper(element, childno + 1)); [EOL]             i++; [EOL]             element = element.getChild(childno); [EOL]             if (i == n) { [EOL]                 return element; [EOL]             } [EOL]             stack.push(new WalkHelper(element, 0)); [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 128,160
@Override [EOL] public InputId getInputId() { [EOL]     return inputId; [EOL] } <line_num>: 178,181
