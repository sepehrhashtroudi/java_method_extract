public JsonML(TagType type) { [EOL]     this.type = type; [EOL] } <line_num>: 46,48
public JsonML(TagType type, JsonML... children) { [EOL]     this(type, Arrays.asList(children)); [EOL] } <line_num>: 55,57
public JsonML(TagType type, List<? extends JsonML> children) { [EOL]     this(type, Collections.<TagAttr, Object>emptyMap(), children); [EOL] } <line_num>: 59,61
public JsonML(TagType type, Map<? extends TagAttr, ?> attributes) { [EOL]     this(type, attributes, Collections.<JsonML>emptyList()); [EOL] } <line_num>: 63,65
public JsonML(TagType type, Map<? extends TagAttr, ?> attributes, List<? extends JsonML> children) { [EOL]     this.type = type; [EOL]     this.attributes.putAll(attributes); [EOL]     appendChildren(children); [EOL] } <line_num>: 67,72
public void addChild(int index, JsonML element) { [EOL]     children.add(index, element); [EOL] } <line_num>: 80,82
public void appendChild(JsonML element) { [EOL]     children.add(element); [EOL] } <line_num>: 88,90
public void appendChildren(Collection<? extends JsonML> elements) { [EOL]     children.addAll(elements); [EOL] } <line_num>: 96,98
public int childrenSize() { [EOL]     return children.size(); [EOL] } <line_num>: 103,105
public void clearChildren() { [EOL]     setChildren(); [EOL] } <line_num>: 110,112
public Object getAttribute(TagAttr name) { [EOL]     return attributes.get(name); [EOL] } <line_num>: 119,121
public Map<TagAttr, Object> getAttributes() { [EOL]     return attributes; [EOL] } <line_num>: 126,128
public JsonML getChild(int index) { [EOL]     return children.get(index); [EOL] } <line_num>: 133,135
public List<JsonML> getChildren() { [EOL]     return children; [EOL] } <line_num>: 140,142
public List<JsonML> getChildren(int fromIndex, int toIndex) { [EOL]     return children.subList(fromIndex, toIndex); [EOL] } <line_num>: 150,152
public TagType getType() { [EOL]     return type; [EOL] } <line_num>: 157,159
public boolean hasChildren() { [EOL]     return !children.isEmpty(); [EOL] } <line_num>: 164,166
public void setAttribute(TagAttr name, Object value) { [EOL]     attributes.put(name, value); [EOL] } <line_num>: 173,175
public void setAttributes(Map<TagAttr, Object> attributes) { [EOL]     this.attributes = attributes; [EOL] } <line_num>: 181,183
public void setChild(int index, JsonML element) { [EOL]     children.set(index, element); [EOL] } <line_num>: 191,193
public void setChildren(JsonML... children) { [EOL]     this.children.clear(); [EOL]     this.children.addAll(Arrays.asList(children)); [EOL] } <line_num>: 200,203
public void setChildren(List<JsonML> children) { [EOL]     this.children = children; [EOL] } <line_num>: 210,212
@Override [EOL] public String toString() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     toString(sb, true, true); [EOL]     return sb.toString(); [EOL] } <line_num>: 214,219
private void toString(StringBuilder sb, boolean printAttributes, boolean printChildren) { [EOL]     sb.append("[\""); [EOL]     escapeStringOnto(type.name(), sb); [EOL]     sb.append('"'); [EOL]     if (printAttributes) { [EOL]         sb.append(", {"); [EOL]         boolean first = true; [EOL]         for (Entry<TagAttr, Object> entry : attributes.entrySet()) { [EOL]             if (first) { [EOL]                 first = false; [EOL]             } else { [EOL]                 sb.append(", "); [EOL]             } [EOL]             sb.append('"'); [EOL]             escapeStringOnto(entry.getKey().toString(), sb); [EOL]             sb.append("\": "); [EOL]             Object value = entry.getValue(); [EOL]             if (value == null) { [EOL]                 sb.append("null"); [EOL]             } else if (value instanceof String) { [EOL]                 sb.append('"'); [EOL]                 escapeStringOnto((String) value, sb); [EOL]                 sb.append('"'); [EOL]             } else { [EOL]                 sb.append(value); [EOL]             } [EOL]         } [EOL]         sb.append("}"); [EOL]     } [EOL]     if (printChildren) { [EOL]         for (JsonML child : children) { [EOL]             sb.append(", "); [EOL]             sb.append(child.toString()); [EOL]         } [EOL]     } [EOL]     sb.append(']'); [EOL] } <line_num>: 221,260
private static void escapeStringOnto(String s, StringBuilder sb) { [EOL]     int pos = 0, n = s.length(); [EOL]     for (int i = 0; i < n; ++i) { [EOL]         char ch = s.charAt(i); [EOL]         switch(ch) { [EOL]             case '\r': [EOL]             case '\n': [EOL]             case '"': [EOL]             case '\\': [EOL]             case '\u2028': [EOL]             case '\u2029': [EOL]                 String hex = Integer.toString(ch, 16); [EOL]                 sb.append(s, pos, i).append("\\u").append("0000", hex.length(), 4).append(hex); [EOL]                 pos = i + 1; [EOL]                 break; [EOL]         } [EOL]     } [EOL]     sb.append(s, pos, n); [EOL] } <line_num>: 266,285
public String toStringTree() { [EOL]     try { [EOL]         StringBuilder s = new StringBuilder(); [EOL]         toStringTreeHelper(this, 0, s); [EOL]         return s.toString(); [EOL]     } catch (IOException e) { [EOL]         throw new RuntimeException("Should not happen\n" + e); [EOL]     } [EOL] } <line_num>: 290,298
private static void toStringTreeHelper(JsonML element, int level, StringBuilder sb) throws IOException { [EOL]     for (int i = 0; i < level; ++i) { [EOL]         sb.append("    "); [EOL]     } [EOL]     element.toString(sb, true, false); [EOL]     sb.append("\n"); [EOL]     for (JsonML child : element.getChildren()) { [EOL]         toStringTreeHelper(child, level + 1, sb); [EOL]     } [EOL] } <line_num>: 300,310
