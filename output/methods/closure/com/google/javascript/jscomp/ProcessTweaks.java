TweakFunction(String name) { [EOL]     this(name, null, Token.ERROR, Token.ERROR, null); [EOL] } <line_num>: 123,125
TweakFunction(String name, String expectedTypeName, int validNodeTypeA) { [EOL]     this(name, expectedTypeName, validNodeTypeA, Token.ERROR, null); [EOL] } <line_num>: 127,130
TweakFunction(String name, String expectedTypeName, int validNodeTypeA, int validNodeTypeB) { [EOL]     this(name, expectedTypeName, validNodeTypeA, validNodeTypeB, null); [EOL] } <line_num>: 132,135
TweakFunction(String name, TweakFunction registerFunction) { [EOL]     this(name, null, Token.ERROR, Token.ERROR, registerFunction); [EOL] } <line_num>: 137,139
TweakFunction(String name, String expectedTypeName, int validNodeTypeA, int validNodeTypeB, TweakFunction registerFunction) { [EOL]     this.name = name; [EOL]     this.expectedTypeName = expectedTypeName; [EOL]     this.validNodeTypeA = validNodeTypeA; [EOL]     this.validNodeTypeB = validNodeTypeB; [EOL]     this.registerFunction = registerFunction; [EOL] } <line_num>: 141,149
ProcessTweaks(AbstractCompiler compiler, boolean stripTweaks, Map<String, Node> compilerDefaultValueOverrides) { [EOL]     this.compiler = compiler; [EOL]     this.stripTweaks = stripTweaks; [EOL]     this.compilerDefaultValueOverrides = Maps.newTreeMap(); [EOL]     this.compilerDefaultValueOverrides.putAll(compilerDefaultValueOverrides); [EOL] } <line_num>: 195,202
CollectTweaksResult(Map<String, TweakInfo> tweakInfos, List<TweakFunctionCall> getOverridesCalls) { [EOL]     this.tweakInfos = tweakInfos; [EOL]     this.getOverridesCalls = getOverridesCalls; [EOL] } <line_num>: 327,331
TweakFunctionCall(String sourceName, TweakFunction tweakFunc, Node callNode) { [EOL]     this(sourceName, tweakFunc, callNode, null); [EOL] } <line_num>: 437,440
TweakFunctionCall(String sourceName, TweakFunction tweakFunc, Node callNode, Node valueNode) { [EOL]     this.sourceName = sourceName; [EOL]     this.callNode = callNode; [EOL]     this.tweakFunc = tweakFunc; [EOL]     this.valueNode = valueNode; [EOL] } <line_num>: 442,448
TweakInfo(String tweakId) { [EOL]     this.tweakId = tweakId; [EOL]     functionCalls = Lists.newArrayList(); [EOL] } <line_num>: 464,467
boolean isValidNodeType(int type) { [EOL]     return type == validNodeTypeA || type == validNodeTypeB; [EOL] } <line_num>: 151,153
boolean isCorrectRegisterFunction(TweakFunction registerFunction) { [EOL]     Preconditions.checkNotNull(registerFunction); [EOL]     return this.registerFunction == registerFunction; [EOL] } <line_num>: 155,158
boolean isGetterFunction() { [EOL]     return registerFunction != null; [EOL] } <line_num>: 160,162
String getName() { [EOL]     return name; [EOL] } <line_num>: 164,166
String getExpectedTypeName() { [EOL]     return expectedTypeName; [EOL] } <line_num>: 168,170
Node createDefaultValueNode() { [EOL]     switch(this) { [EOL]         case REGISTER_BOOLEAN: [EOL]             return IR.falseNode(); [EOL]         case REGISTER_NUMBER: [EOL]             return IR.number(0); [EOL]         case REGISTER_STRING: [EOL]             return IR.string(""); [EOL]         default: [EOL]             throw new IllegalStateException(); [EOL]     } [EOL] } <line_num>: 172,183
@Override [EOL] public void process(Node externs, Node root) { [EOL]     CollectTweaksResult result = collectTweaks(root); [EOL]     applyCompilerDefaultValueOverrides(result.tweakInfos); [EOL]     boolean changed = false; [EOL]     if (stripTweaks) { [EOL]         changed = stripAllCalls(result.tweakInfos); [EOL]     } else if (!compilerDefaultValueOverrides.isEmpty()) { [EOL]         changed = replaceGetCompilerOverridesCalls(result.getOverridesCalls); [EOL]     } [EOL]     if (changed) { [EOL]         compiler.reportCodeChange(); [EOL]     } [EOL] } <line_num>: 204,219
private boolean replaceGetCompilerOverridesCalls(List<TweakFunctionCall> calls) { [EOL]     for (TweakFunctionCall call : calls) { [EOL]         Node callNode = call.callNode; [EOL]         Node objNode = createCompilerDefaultValueOverridesVarNode(callNode); [EOL]         callNode.getParent().replaceChild(callNode, objNode); [EOL]     } [EOL]     return !calls.isEmpty(); [EOL] } <line_num>: 225,233
private boolean stripAllCalls(Map<String, TweakInfo> tweakInfos) { [EOL]     for (TweakInfo tweakInfo : tweakInfos.values()) { [EOL]         boolean isRegistered = tweakInfo.isRegistered(); [EOL]         for (TweakFunctionCall functionCall : tweakInfo.functionCalls) { [EOL]             Node callNode = functionCall.callNode; [EOL]             Node parent = callNode.getParent(); [EOL]             if (functionCall.tweakFunc.isGetterFunction()) { [EOL]                 Node newValue; [EOL]                 if (isRegistered) { [EOL]                     newValue = tweakInfo.getDefaultValueNode().cloneNode(); [EOL]                 } else { [EOL]                     TweakFunction registerFunction = functionCall.tweakFunc.registerFunction; [EOL]                     newValue = registerFunction.createDefaultValueNode(); [EOL]                 } [EOL]                 parent.replaceChild(callNode, newValue); [EOL]             } else { [EOL]                 Node voidZeroNode = IR.voidNode(IR.number(0).srcref(callNode)).srcref(callNode); [EOL]                 parent.replaceChild(callNode, voidZeroNode); [EOL]             } [EOL]         } [EOL]     } [EOL]     return !tweakInfos.isEmpty(); [EOL] } <line_num>: 239,266
private Node createCompilerDefaultValueOverridesVarNode(Node sourceInformationNode) { [EOL]     Node objNode = IR.objectlit().srcref(sourceInformationNode); [EOL]     for (Entry<String, Node> entry : compilerDefaultValueOverrides.entrySet()) { [EOL]         Node objKeyNode = IR.stringKey(entry.getKey()).copyInformationFrom(sourceInformationNode); [EOL]         Node objValueNode = entry.getValue().cloneNode().copyInformationFrom(sourceInformationNode); [EOL]         objKeyNode.addChildToBack(objValueNode); [EOL]         objNode.addChildToBack(objKeyNode); [EOL]     } [EOL]     return objNode; [EOL] } <line_num>: 271,283
private void applyCompilerDefaultValueOverrides(Map<String, TweakInfo> tweakInfos) { [EOL]     for (Entry<String, Node> entry : compilerDefaultValueOverrides.entrySet()) { [EOL]         String tweakId = entry.getKey(); [EOL]         TweakInfo tweakInfo = tweakInfos.get(tweakId); [EOL]         if (tweakInfo == null) { [EOL]             compiler.report(JSError.make(UNKNOWN_TWEAK_WARNING, tweakId)); [EOL]         } else { [EOL]             TweakFunction registerFunc = tweakInfo.registerCall.tweakFunc; [EOL]             Node value = entry.getValue(); [EOL]             if (!registerFunc.isValidNodeType(value.getType())) { [EOL]                 compiler.report(JSError.make(INVALID_TWEAK_DEFAULT_VALUE_WARNING, tweakId, registerFunc.getName(), registerFunc.getExpectedTypeName())); [EOL]             } else { [EOL]                 tweakInfo.defaultValueNode = value; [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 286,305
private CollectTweaksResult collectTweaks(Node root) { [EOL]     CollectTweaks pass = new CollectTweaks(); [EOL]     NodeTraversal.traverse(compiler, root, pass); [EOL]     Map<String, TweakInfo> tweakInfos = pass.allTweaks; [EOL]     for (TweakInfo tweakInfo : tweakInfos.values()) { [EOL]         tweakInfo.emitAllWarnings(); [EOL]     } [EOL]     return new CollectTweaksResult(tweakInfos, pass.getOverridesCalls); [EOL] } <line_num>: 312,321
@SuppressWarnings("incomplete-switch") [EOL] @Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (!n.isCall()) { [EOL]         return; [EOL]     } [EOL]     String callName = n.getFirstChild().getQualifiedName(); [EOL]     TweakFunction tweakFunc = TWEAK_FUNCTIONS_MAP.get(callName); [EOL]     if (tweakFunc == null) { [EOL]         return; [EOL]     } [EOL]     if (tweakFunc == TweakFunction.GET_COMPILER_OVERRIDES) { [EOL]         getOverridesCalls.add(new TweakFunctionCall(t.getSourceName(), tweakFunc, n)); [EOL]         return; [EOL]     } [EOL]     Node tweakIdNode = n.getFirstChild().getNext(); [EOL]     if (!tweakIdNode.isString()) { [EOL]         compiler.report(t.makeError(tweakIdNode, NON_LITERAL_TWEAK_ID_ERROR)); [EOL]         return; [EOL]     } [EOL]     String tweakId = tweakIdNode.getString(); [EOL]     TweakInfo tweakInfo = allTweaks.get(tweakId); [EOL]     if (tweakInfo == null) { [EOL]         tweakInfo = new TweakInfo(tweakId); [EOL]         allTweaks.put(tweakId, tweakInfo); [EOL]     } [EOL]     switch(tweakFunc) { [EOL]         case REGISTER_BOOLEAN: [EOL]         case REGISTER_NUMBER: [EOL]         case REGISTER_STRING: [EOL]             if (!ID_MATCHER.matchesAllOf(tweakId)) { [EOL]                 compiler.report(t.makeError(tweakIdNode, INVALID_TWEAK_ID_ERROR)); [EOL]             } [EOL]             if (!t.inGlobalScope()) { [EOL]                 compiler.report(t.makeError(n, NON_GLOBAL_TWEAK_INIT_ERROR, tweakId)); [EOL]                 break; [EOL]             } [EOL]             if (tweakInfo.isRegistered()) { [EOL]                 compiler.report(t.makeError(n, TWEAK_MULTIPLY_REGISTERED_ERROR, tweakId)); [EOL]                 break; [EOL]             } [EOL]             Node tweakDefaultValueNode = tweakIdNode.getNext().getNext(); [EOL]             tweakInfo.addRegisterCall(t.getSourceName(), tweakFunc, n, tweakDefaultValueNode); [EOL]             break; [EOL]         case OVERRIDE_DEFAULT_VALUE: [EOL]             if (!t.inGlobalScope()) { [EOL]                 compiler.report(t.makeError(n, NON_GLOBAL_TWEAK_INIT_ERROR, tweakId)); [EOL]                 break; [EOL]             } [EOL]             if (tweakInfo.isRegistered()) { [EOL]                 compiler.report(t.makeError(n, TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR, tweakId)); [EOL]                 break; [EOL]             } [EOL]             tweakDefaultValueNode = tweakIdNode.getNext(); [EOL]             tweakInfo.addOverrideDefaultValueCall(t.getSourceName(), tweakFunc, n, tweakDefaultValueNode); [EOL]             break; [EOL]         case GET_BOOLEAN: [EOL]         case GET_NUMBER: [EOL]         case GET_STRING: [EOL]             tweakInfo.addGetterCall(t.getSourceName(), tweakFunc, n); [EOL]     } [EOL] } <line_num>: 341,425
Node getIdNode() { [EOL]     return callNode.getFirstChild().getNext(); [EOL] } <line_num>: 450,452
void emitAllWarnings() { [EOL]     if (isRegistered()) { [EOL]         emitAllTypeWarnings(); [EOL]     } else { [EOL]         emitUnknownTweakErrors(); [EOL]     } [EOL] } <line_num>: 474,480
void emitAllTypeWarnings() { [EOL]     for (TweakFunctionCall call : functionCalls) { [EOL]         Node valueNode = call.valueNode; [EOL]         TweakFunction tweakFunc = call.tweakFunc; [EOL]         TweakFunction registerFunc = registerCall.tweakFunc; [EOL]         if (valueNode != null) { [EOL]             if (!registerFunc.isValidNodeType(valueNode.getType())) { [EOL]                 compiler.report(JSError.make(call.sourceName, valueNode, INVALID_TWEAK_DEFAULT_VALUE_WARNING, tweakId, registerFunc.getName(), registerFunc.getExpectedTypeName())); [EOL]             } [EOL]         } else if (tweakFunc.isGetterFunction()) { [EOL]             if (!tweakFunc.isCorrectRegisterFunction(registerFunc)) { [EOL]                 compiler.report(JSError.make(call.sourceName, call.callNode, TWEAK_WRONG_GETTER_TYPE_WARNING, tweakFunc.getName(), registerFunc.getName())); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 486,509
void emitUnknownTweakErrors() { [EOL]     for (TweakFunctionCall call : functionCalls) { [EOL]         compiler.report(JSError.make(call.sourceName, call.getIdNode(), UNKNOWN_TWEAK_WARNING, tweakId)); [EOL]     } [EOL] } <line_num>: 514,519
void addRegisterCall(String sourceName, TweakFunction tweakFunc, Node callNode, Node defaultValueNode) { [EOL]     registerCall = new TweakFunctionCall(sourceName, tweakFunc, callNode, defaultValueNode); [EOL]     functionCalls.add(registerCall); [EOL] } <line_num>: 521,526
void addOverrideDefaultValueCall(String sourceName, TweakFunction tweakFunc, Node callNode, Node defaultValueNode) { [EOL]     functionCalls.add(new TweakFunctionCall(sourceName, tweakFunc, callNode, defaultValueNode)); [EOL]     this.defaultValueNode = defaultValueNode; [EOL] } <line_num>: 528,533
void addGetterCall(String sourceName, TweakFunction tweakFunc, Node callNode) { [EOL]     functionCalls.add(new TweakFunctionCall(sourceName, tweakFunc, callNode)); [EOL] } <line_num>: 535,538
boolean isRegistered() { [EOL]     return registerCall != null; [EOL] } <line_num>: 540,542
Node getDefaultValueNode() { [EOL]     Preconditions.checkState(isRegistered()); [EOL]     if (defaultValueNode != null) { [EOL]         return defaultValueNode; [EOL]     } [EOL]     if (registerCall.valueNode != null) { [EOL]         return registerCall.valueNode; [EOL]     } [EOL]     return registerCall.tweakFunc.createDefaultValueNode(); [EOL] } <line_num>: 544,556
