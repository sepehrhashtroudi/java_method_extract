Definition(boolean isExtern) { [EOL]     this.isExtern = isExtern; [EOL] } <line_num>: 100,102
IncompleteDefinition(Node lValue, boolean inExterns) { [EOL]     super(inExterns); [EOL]     Preconditions.checkNotNull(lValue); [EOL]     Preconditions.checkArgument(ALLOWED_TYPES.contains(lValue.getType()), "Unexpected lValue type %s", Token.name(lValue.getType())); [EOL]     this.lValue = lValue; [EOL] } <line_num>: 158,164
UnknownDefinition(Node lValue, boolean inExterns) { [EOL]     super(lValue, inExterns); [EOL] } <line_num>: 181,183
ExternalNameOnlyDefinition(Node lValue) { [EOL]     super(lValue, true); [EOL] } <line_num>: 197,199
FunctionArgumentDefinition(Node function, Node argumentName, boolean inExterns) { [EOL]     super(argumentName, inExterns); [EOL]     Preconditions.checkArgument(function.isFunction()); [EOL]     Preconditions.checkArgument(argumentName.isName()); [EOL] } <line_num>: 212,218
FunctionDefinition(Node node, boolean inExterns) { [EOL]     super(inExterns); [EOL]     Preconditions.checkArgument(node.isFunction()); [EOL]     function = node; [EOL] } <line_num>: 234,238
NamedFunctionDefinition(Node node, boolean inExterns) { [EOL]     super(node, inExterns); [EOL] } <line_num>: 256,258
FunctionExpressionDefinition(Node node, boolean inExterns) { [EOL]     super(node, inExterns); [EOL]     Preconditions.checkArgument(NodeUtil.isFunctionExpression(node)); [EOL] } <line_num>: 271,275
AssignmentDefinition(Node node, boolean inExterns) { [EOL]     super(inExterns); [EOL]     Preconditions.checkArgument(node.isAssign()); [EOL]     assignment = node; [EOL] } <line_num>: 290,294
ObjectLiteralPropertyDefinition(Node lit, Node name, Node value, boolean isExtern) { [EOL]     super(isExtern); [EOL]     this.literal = lit; [EOL]     this.name = name; [EOL]     this.value = value; [EOL] } <line_num>: 326,333
VarDefinition(Node node, boolean inExterns) { [EOL]     super(inExterns); [EOL]     Preconditions.checkArgument(NodeUtil.isVarDeclaration(node)); [EOL]     Preconditions.checkArgument(node.hasChildren(), "VAR Declaration of %sshould be assigned a value.", node.getString()); [EOL]     name = node; [EOL] } <line_num>: 372,378
static Definition getDefinition(Node n, boolean isExtern) { [EOL]     Node parent = n.getParent(); [EOL]     if (parent == null) { [EOL]         return null; [EOL]     } [EOL]     if (NodeUtil.isVarDeclaration(n) && n.hasChildren()) { [EOL]         return new VarDefinition(n, isExtern); [EOL]     } else if (parent.isFunction() && parent.getFirstChild() == n) { [EOL]         if (!NodeUtil.isFunctionExpression(parent)) { [EOL]             return new NamedFunctionDefinition(parent, isExtern); [EOL]         } else if (!n.getString().equals("")) { [EOL]             return new FunctionExpressionDefinition(parent, isExtern); [EOL]         } [EOL]     } else if (parent.isAssign() && parent.getFirstChild() == n) { [EOL]         return new AssignmentDefinition(parent, isExtern); [EOL]     } else if (NodeUtil.isObjectLitKey(n, parent)) { [EOL]         return new ObjectLiteralPropertyDefinition(parent, n, n.getFirstChild(), isExtern); [EOL]     } else if (parent.isParamList()) { [EOL]         Node function = parent.getParent(); [EOL]         return new FunctionArgumentDefinition(function, n, isExtern); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 37,65
static boolean isDefinitionNode(Node n) { [EOL]     Node parent = n.getParent(); [EOL]     if (parent == null) { [EOL]         return false; [EOL]     } [EOL]     if (NodeUtil.isVarDeclaration(n) && n.hasChildren()) { [EOL]         return true; [EOL]     } else if (parent.isFunction() && parent.getFirstChild() == n) { [EOL]         if (!NodeUtil.isFunctionExpression(parent)) { [EOL]             return true; [EOL]         } else if (!n.getString().equals("")) { [EOL]             return true; [EOL]         } [EOL]     } else if (parent.isAssign() && parent.getFirstChild() == n) { [EOL]         return true; [EOL]     } else if (NodeUtil.isObjectLitKey(n, parent)) { [EOL]         return true; [EOL]     } else if (parent.isParamList()) { [EOL]         return true; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 70,93
public void remove() { [EOL]     if (!isExtern) { [EOL]         performRemove(); [EOL]     } else { [EOL]         throw new IllegalStateException("Attempt to remove() an extern" + " definition."); [EOL]     } [EOL] } <line_num>: 110,117
protected abstract void performRemove(); <line_num>: 122,122
public abstract Node getLValue(); <line_num>: 133,133
public abstract Node getRValue(); <line_num>: 139,139
public boolean isExtern() { [EOL]     return isExtern; [EOL] } <line_num>: 144,146
@Override [EOL] public Node getLValue() { [EOL]     return lValue; [EOL] } <line_num>: 166,169
@Override [EOL] public Node getRValue() { [EOL]     return null; [EOL] } <line_num>: 171,174
@Override [EOL] public void performRemove() { [EOL]     throw new IllegalArgumentException("Can't remove an UnknownDefinition"); [EOL] } <line_num>: 185,188
@Override [EOL] public void performRemove() { [EOL]     throw new IllegalArgumentException("Can't remove external name-only definition"); [EOL] } <line_num>: 201,205
@Override [EOL] public void performRemove() { [EOL]     throw new IllegalArgumentException("Can't remove a FunctionArgumentDefinition"); [EOL] } <line_num>: 220,224
@Override [EOL] public Node getLValue() { [EOL]     return function.getFirstChild(); [EOL] } <line_num>: 240,243
@Override [EOL] public Node getRValue() { [EOL]     return function; [EOL] } <line_num>: 245,248
@Override [EOL] public void performRemove() { [EOL]     function.detachFromParent(); [EOL] } <line_num>: 260,263
@Override [EOL] public void performRemove() { [EOL]     function.replaceChild(function.getFirstChild(), IR.name("")); [EOL] } <line_num>: 277,281
@Override [EOL] public void performRemove() { [EOL]     Node parent = assignment.getParent(); [EOL]     Node last = assignment.getLastChild(); [EOL]     assignment.removeChild(last); [EOL]     parent.replaceChild(assignment, last); [EOL] } <line_num>: 296,303
@Override [EOL] public Node getLValue() { [EOL]     return assignment.getFirstChild(); [EOL] } <line_num>: 305,308
@Override [EOL] public Node getRValue() { [EOL]     return assignment.getLastChild(); [EOL] } <line_num>: 310,313
@Override [EOL] public void performRemove() { [EOL]     literal.removeChild(name); [EOL] } <line_num>: 335,338
@Override [EOL] public Node getLValue() { [EOL]     switch(name.getType()) { [EOL]         case Token.SETTER_DEF: [EOL]         case Token.GETTER_DEF: [EOL]         case Token.STRING_KEY: [EOL]             return IR.getprop(IR.objectlit(), IR.string(name.getString())); [EOL]         default: [EOL]             throw new IllegalStateException("unexpected"); [EOL]     } [EOL] } <line_num>: 340,359
@Override [EOL] public Node getRValue() { [EOL]     return value; [EOL] } <line_num>: 361,364
@Override [EOL] public void performRemove() { [EOL]     Node var = name.getParent(); [EOL]     Preconditions.checkState(var.getFirstChild() == var.getLastChild(), "AST should be normalized first"); [EOL]     Node parent = var.getParent(); [EOL]     Node rValue = name.removeFirstChild(); [EOL]     Preconditions.checkState(!parent.isFor()); [EOL]     parent.replaceChild(var, NodeUtil.newExpr(rValue)); [EOL] } <line_num>: 380,389
@Override [EOL] public Node getLValue() { [EOL]     return name; [EOL] } <line_num>: 391,394
@Override [EOL] public Node getRValue() { [EOL]     return name.getFirstChild(); [EOL] } <line_num>: 396,399
