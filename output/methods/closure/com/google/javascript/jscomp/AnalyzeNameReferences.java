AnalyzeNameReferences(AbstractCompiler compiler) { [EOL]     this.compiler = compiler; [EOL]     this.moduleGraph = compiler.getModuleGraph(); [EOL] } <line_num>: 48,51
@Override [EOL] public void process(Node externs, Node root) { [EOL]     NameReferenceGraphConstruction gc = new NameReferenceGraphConstruction(compiler); [EOL]     gc.process(externs, root); [EOL]     graph = gc.getNameReferenceGraph(); [EOL]     FixedPointGraphTraversal<Name, Reference> t = FixedPointGraphTraversal.newTraversal(new PropagateReferences()); [EOL]     getInfo(graph.MAIN).markReference(null); [EOL]     t.computeFixedPoint(graph, Sets.newHashSet(graph.MAIN)); [EOL] } <line_num>: 53,63
public NameReferenceGraph getGraph() { [EOL]     return graph; [EOL] } <line_num>: 65,67
@Override [EOL] public boolean traverseEdge(Name start, Reference edge, Name dest) { [EOL]     NameInfo startInfo = getInfo(start); [EOL]     NameInfo destInfo = getInfo(dest); [EOL]     if (startInfo.isReferenced()) { [EOL]         JSModule startModule = startInfo.getDeepestCommonModuleRef(); [EOL]         if (startModule != null && moduleGraph.dependsOn(startModule, edge.getModule())) { [EOL]             return destInfo.markReference(startModule); [EOL]         } else { [EOL]             return destInfo.markReference(edge.getModule()); [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 70,84
private NameInfo getInfo(Name symbol) { [EOL]     GraphNode<Name, Reference> name = graph.getNode(symbol); [EOL]     NameInfo info = name.getAnnotation(); [EOL]     if (info == null) { [EOL]         info = new NameInfo(); [EOL]         name.setAnnotation(info); [EOL]     } [EOL]     return info; [EOL] } <line_num>: 87,95
boolean isReferenced() { [EOL]     return referenced; [EOL] } <line_num>: 102,104
JSModule getDeepestCommonModuleRef() { [EOL]     return deepestCommonModuleRef; [EOL] } <line_num>: 110,112
boolean markReference(JSModule module) { [EOL]     boolean hasChanged = false; [EOL]     if (!referenced) { [EOL]         referenced = true; [EOL]         hasChanged = true; [EOL]     } [EOL]     if (moduleGraph != null) { [EOL]         JSModule originalDeepestCommon = deepestCommonModuleRef; [EOL]         if (deepestCommonModuleRef == null) { [EOL]             deepestCommonModuleRef = module; [EOL]         } else { [EOL]             deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive(deepestCommonModuleRef, module); [EOL]         } [EOL]         if (originalDeepestCommon != deepestCommonModuleRef) { [EOL]             hasChanged = true; [EOL]         } [EOL]     } [EOL]     return hasChanged; [EOL] } <line_num>: 120,143
