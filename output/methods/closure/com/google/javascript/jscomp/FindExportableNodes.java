public FindExportableNodes(AbstractCompiler compiler) { [EOL]     this.compiler = compiler; [EOL]     this.exports = Maps.newLinkedHashMap(); [EOL] } <line_num>: 59,62
public GenerateNodeContext(Node node, Node scriptNode, Node contextNode) { [EOL]     this.node = node; [EOL]     this.scriptNode = scriptNode; [EOL]     this.contextNode = contextNode; [EOL] } <line_num>: 118,122
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     JSDocInfo docInfo = n.getJSDocInfo(); [EOL]     if (docInfo != null && docInfo.isExport()) { [EOL]         String export = null; [EOL]         GenerateNodeContext context = null; [EOL]         switch(n.getType()) { [EOL]             case Token.FUNCTION: [EOL]                 if (parent.isScript()) { [EOL]                     export = NodeUtil.getFunctionName(n); [EOL]                     context = new GenerateNodeContext(n, parent, n); [EOL]                 } [EOL]                 break; [EOL]             case Token.ASSIGN: [EOL]                 Node grandparent = parent.getParent(); [EOL]                 if (grandparent != null && grandparent.isScript() && parent.isExprResult() && !n.getLastChild().isAssign()) { [EOL]                     export = n.getFirstChild().getQualifiedName(); [EOL]                     context = new GenerateNodeContext(n, grandparent, parent); [EOL]                 } [EOL]                 break; [EOL]             case Token.VAR: [EOL]                 if (parent.isScript()) { [EOL]                     if (n.getFirstChild().hasChildren() && !n.getFirstChild().getFirstChild().isAssign()) { [EOL]                         export = n.getFirstChild().getString(); [EOL]                         context = new GenerateNodeContext(n, parent, n); [EOL]                     } [EOL]                 } [EOL]         } [EOL]         if (export != null) { [EOL]             exports.put(export, context); [EOL]         } else { [EOL]             compiler.report(t.makeError(n, NON_GLOBAL_ERROR)); [EOL]         } [EOL]     } [EOL] } <line_num>: 64,103
public LinkedHashMap<String, GenerateNodeContext> getExports() { [EOL]     return exports; [EOL] } <line_num>: 105,107
public Node getNode() { [EOL]     return node; [EOL] } <line_num>: 124,126
public Node getScriptNode() { [EOL]     return scriptNode; [EOL] } <line_num>: 128,130
public Node getContextNode() { [EOL]     return contextNode; [EOL] } <line_num>: 132,134
