RescopeGlobalSymbols(AbstractCompiler compiler, String globalSymbolNamespace, boolean addExtern) { [EOL]     this.compiler = compiler; [EOL]     this.globalSymbolNamespace = globalSymbolNamespace; [EOL]     this.addExtern = addExtern; [EOL] } <line_num>: 59,64
RescopeGlobalSymbols(AbstractCompiler compiler, String globalSymbolNamespace) { [EOL]     this(compiler, globalSymbolNamespace, true); [EOL] } <line_num>: 66,69
private void addExternForGlobalSymbolNamespace() { [EOL]     Node varNode = IR.var(IR.name(globalSymbolNamespace)); [EOL]     CompilerInput input = compiler.newExternInput("{RescopeGlobalSymbolsNamespaceVar}"); [EOL]     input.getAstRoot(compiler).addChildrenToBack(varNode); [EOL]     compiler.reportCodeChange(); [EOL] } <line_num>: 71,77
@Override [EOL] public void process(Node externs, Node root) { [EOL]     if (addExtern) { [EOL]         addExternForGlobalSymbolNamespace(); [EOL]     } [EOL]     NodeTraversal.traverse(compiler, root, new RewriteGlobalFunctionStatementsToVarAssignmentsCallback()); [EOL]     NodeTraversal.traverse(compiler, root, new RewriteScopeCallback()); [EOL]     NodeTraversal.traverse(compiler, root, new RemoveGlobalVarCallback()); [EOL]     NodeTraversal.traverse(compiler, root, new MakeExternsReferenceWindowExplicitly()); [EOL] } <line_num>: 79,101
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (NodeUtil.isFunctionDeclaration(n)) { [EOL]         String name = NodeUtil.getFunctionName(n); [EOL]         n.getFirstChild().setString(""); [EOL]         Node prev = parent.getChildBefore(n); [EOL]         n.detachFromParent(); [EOL]         Node var = NodeUtil.newVarNode(name, n); [EOL]         if (prev == null) { [EOL]             parent.addChildToFront(var); [EOL]         } else { [EOL]             parent.addChildAfter(var, prev); [EOL]         } [EOL]         compiler.reportCodeChange(); [EOL]     } [EOL] } <line_num>: 115,130
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (!n.isName()) { [EOL]         return; [EOL]     } [EOL]     String name = n.getString(); [EOL]     if (parent.isFunction() && name.length() == 0) { [EOL]         return; [EOL]     } [EOL]     Scope.Var var = t.getScope().getVar(name); [EOL]     if (var == null) { [EOL]         return; [EOL]     } [EOL]     if (var.isExtern()) { [EOL]         return; [EOL]     } [EOL]     if (!var.isExtern() && (name.equals(globalSymbolNamespace) || name.indexOf(globalSymbolNamespace + DISAMBIGUATION_SUFFIX) == 0)) { [EOL]         n.setString(name + DISAMBIGUATION_SUFFIX); [EOL]         compiler.reportCodeChange(); [EOL]     } [EOL]     if (!var.isGlobal()) { [EOL]         return; [EOL]     } [EOL]     Node nameNode = var.getNameNode(); [EOL]     if (nameNode != null && nameNode.getParent() != null && nameNode.getParent().isCatch()) { [EOL]         return; [EOL]     } [EOL]     replaceSymbol(n, name); [EOL] } <line_num>: 154,192
private void replaceSymbol(Node node, String name) { [EOL]     Node parent = node.getParent(); [EOL]     Node replacement = IR.getprop(IR.name(globalSymbolNamespace).srcref(node), IR.string(name).srcref(node)); [EOL]     replacement.srcref(node); [EOL]     if (node.hasChildren()) { [EOL]         Node assign = IR.assign(replacement, node.removeFirstChild()); [EOL]         parent.replaceChild(node, assign); [EOL]     } else { [EOL]         parent.replaceChild(node, replacement); [EOL]     } [EOL]     compiler.reportCodeChange(); [EOL] } <line_num>: 194,209
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (!n.isVar()) { [EOL]         return; [EOL]     } [EOL]     List<Node> commas = new ArrayList<Node>(); [EOL]     List<Node> interestingChildren = new ArrayList<Node>(); [EOL]     for (Node c : n.children()) { [EOL]         if (c.isAssign() || parent.isFor()) { [EOL]             interestingChildren.add(c); [EOL]         } [EOL]     } [EOL]     for (Node c : interestingChildren) { [EOL]         if (parent.isFor() && parent.getFirstChild() == n) { [EOL]             commas.add(c.cloneTree()); [EOL]         } else { [EOL]             Node expr = IR.exprResult(c.cloneTree()).srcref(c); [EOL]             parent.addChildBefore(expr, n); [EOL]         } [EOL]     } [EOL]     if (commas.size() > 0) { [EOL]         Node comma = joinOnComma(commas, n); [EOL]         parent.addChildBefore(comma, n); [EOL]     } [EOL]     parent.removeChild(n); [EOL]     compiler.reportCodeChange(); [EOL] } <line_num>: 230,263
private Node joinOnComma(List<Node> commas, Node source) { [EOL]     Node comma = commas.get(0); [EOL]     for (int i = 1; i < commas.size(); i++) { [EOL]         Node nextComma = IR.comma(comma, commas.get(i)); [EOL]         nextComma.copyInformationFrom(source); [EOL]         comma = nextComma; [EOL]     } [EOL]     return comma; [EOL] } <line_num>: 265,273
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (!n.isName()) { [EOL]         return; [EOL]     } [EOL]     String name = n.getString(); [EOL]     Scope.Var var = t.getScope().getVar(name); [EOL]     if (name.length() > 0 && (var == null || var.isExtern()) && !globalSymbolNamespace.equals(name) && !SPECIAL_EXTERNS.contains(name)) { [EOL]         parent.replaceChild(n, IR.getprop(IR.name(WINDOW), IR.string(name)).srcrefTree(n)); [EOL]         compiler.reportCodeChange(); [EOL]     } [EOL] } <line_num>: 285,299
