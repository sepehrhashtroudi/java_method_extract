MakeDeclaredNamesUnique() { [EOL]     this(new ContextualRenamer()); [EOL] } <line_num>: 63,65
MakeDeclaredNamesUnique(Renamer renamer) { [EOL]     this.rootRenamer = renamer; [EOL] } <line_num>: 67,69
private ContextualRenameInverter(AbstractCompiler compiler) { [EOL]     this.compiler = compiler; [EOL] } <line_num>: 274,276
ContextualRenamer() { [EOL]     this.global = true; [EOL]     nameUsage = HashMultiset.create(); [EOL] } <line_num>: 437,440
private ContextualRenamer(Multiset<String> nameUsage) { [EOL]     this.global = false; [EOL]     this.nameUsage = nameUsage; [EOL] } <line_num>: 445,448
InlineRenamer(Supplier<String> uniqueIdSupplier, String idPrefix, boolean removeConstness) { [EOL]     this.uniqueIdSupplier = uniqueIdSupplier; [EOL]     Preconditions.checkArgument(!idPrefix.isEmpty()); [EOL]     this.idPrefix = idPrefix; [EOL]     this.removeConstness = removeConstness; [EOL] } <line_num>: 521,531
BoilerplateRenamer(Supplier<String> uniqueIdSupplier, String idPrefix) { [EOL]     this.uniqueIdSupplier = uniqueIdSupplier; [EOL]     this.idPrefix = idPrefix; [EOL] } <line_num>: 581,586
WhitelistedRenamer(Renamer delegate, Set<String> whitelist) { [EOL]     this.delegate = delegate; [EOL]     this.whitelist = whitelist; [EOL] } <line_num>: 599,602
static CompilerPass getContextualRenameInverter(AbstractCompiler compiler) { [EOL]     return new ContextualRenameInverter(compiler); [EOL] } <line_num>: 71,73
@Override [EOL] public void enterScope(NodeTraversal t) { [EOL]     Node declarationRoot = t.getScopeRoot(); [EOL]     Renamer renamer; [EOL]     if (nameStack.isEmpty()) { [EOL]         Preconditions.checkState(!declarationRoot.isFunction() || !(rootRenamer instanceof ContextualRenamer)); [EOL]         Preconditions.checkState(t.inGlobalScope()); [EOL]         renamer = rootRenamer; [EOL]     } else { [EOL]         renamer = nameStack.peek().forChildScope(); [EOL]     } [EOL]     if (!declarationRoot.isFunction()) { [EOL]         findDeclaredNames(declarationRoot, null, renamer); [EOL]     } [EOL]     nameStack.push(renamer); [EOL] } <line_num>: 75,96
@Override [EOL] public void exitScope(NodeTraversal t) { [EOL]     if (!t.inGlobalScope()) { [EOL]         nameStack.pop(); [EOL]     } [EOL] } <line_num>: 98,103
@Override [EOL] public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { [EOL]     switch(n.getType()) { [EOL]         case Token.FUNCTION: [EOL]             { [EOL]                 Renamer renamer = nameStack.peek().forChildScope(); [EOL]                 String name = n.getFirstChild().getString(); [EOL]                 if (name != null && !name.isEmpty() && parent != null && !NodeUtil.isFunctionDeclaration(n)) { [EOL]                     renamer.addDeclaredName(name); [EOL]                 } [EOL]                 nameStack.push(renamer); [EOL]             } [EOL]             break; [EOL]         case Token.PARAM_LIST: [EOL]             { [EOL]                 Renamer renamer = nameStack.peek().forChildScope(); [EOL]                 for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { [EOL]                     String name = c.getString(); [EOL]                     renamer.addDeclaredName(name); [EOL]                 } [EOL]                 Node functionBody = n.getNext(); [EOL]                 findDeclaredNames(functionBody, null, renamer); [EOL]                 nameStack.push(renamer); [EOL]             } [EOL]             break; [EOL]         case Token.CATCH: [EOL]             { [EOL]                 Renamer renamer = nameStack.peek().forChildScope(); [EOL]                 String name = n.getFirstChild().getString(); [EOL]                 renamer.addDeclaredName(name); [EOL]                 nameStack.push(renamer); [EOL]             } [EOL]             break; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 105,156
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     switch(n.getType()) { [EOL]         case Token.NAME: [EOL]             String newName = getReplacementName(n.getString()); [EOL]             if (newName != null) { [EOL]                 Renamer renamer = nameStack.peek(); [EOL]                 if (renamer.stripConstIfReplaced()) { [EOL]                     n.removeProp(Node.IS_CONSTANT_NAME); [EOL]                 } [EOL]                 n.setString(newName); [EOL]                 t.getCompiler().reportCodeChange(); [EOL]             } [EOL]             break; [EOL]         case Token.FUNCTION: [EOL]             nameStack.pop(); [EOL]             nameStack.pop(); [EOL]             break; [EOL]         case Token.PARAM_LIST: [EOL]             break; [EOL]         case Token.CATCH: [EOL]             nameStack.pop(); [EOL]             break; [EOL]     } [EOL] } <line_num>: 158,192
private String getReplacementName(String oldName) { [EOL]     for (Renamer names : nameStack) { [EOL]         String newName = names.getReplacementName(oldName); [EOL]         if (newName != null) { [EOL]             return newName; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 198,206
private void findDeclaredNames(Node n, Node parent, Renamer renamer) { [EOL]     if (parent == null || !parent.isFunction() || n == parent.getFirstChild()) { [EOL]         if (NodeUtil.isVarDeclaration(n)) { [EOL]             renamer.addDeclaredName(n.getString()); [EOL]         } else if (NodeUtil.isFunctionDeclaration(n)) { [EOL]             Node nameNode = n.getFirstChild(); [EOL]             renamer.addDeclaredName(nameNode.getString()); [EOL]         } [EOL]         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { [EOL]             findDeclaredNames(c, n, renamer); [EOL]         } [EOL]     } [EOL] } <line_num>: 212,229
void addDeclaredName(String name); <line_num>: 239,239
String getReplacementName(String oldName); <line_num>: 245,245
boolean stripConstIfReplaced(); <line_num>: 250,250
Renamer forChildScope(); <line_num>: 255,255
@Override [EOL] public void process(Node externs, Node js) { [EOL]     NodeTraversal.traverse(compiler, js, this); [EOL] } <line_num>: 278,281
public static String getOrginalName(String name) { [EOL]     int index = indexOfSeparator(name); [EOL]     return (index == -1) ? name : name.substring(0, index); [EOL] } <line_num>: 283,286
private static int indexOfSeparator(String name) { [EOL]     return name.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR); [EOL] } <line_num>: 288,290
private boolean containsSeparator(String name) { [EOL]     return name.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) != -1; [EOL] } <line_num>: 292,294
@Override [EOL] public void enterScope(NodeTraversal t) { [EOL]     if (t.inGlobalScope()) { [EOL]         return; [EOL]     } [EOL]     referenceStack.push(referencedNames); [EOL]     referencedNames = Sets.newHashSet(); [EOL] } <line_num>: 299,307
@Override [EOL] public void exitScope(NodeTraversal t) { [EOL]     if (t.inGlobalScope()) { [EOL]         return; [EOL]     } [EOL]     for (Iterator<Var> it = t.getScope().getVars(); it.hasNext(); ) { [EOL]         Var v = it.next(); [EOL]         handleScopeVar(v); [EOL]     } [EOL]     Set<String> current = referencedNames; [EOL]     referencedNames = referenceStack.pop(); [EOL]     if (!referenceStack.isEmpty()) { [EOL]         referencedNames.addAll(current); [EOL]     } [EOL] } <line_num>: 313,334
void handleScopeVar(Var v) { [EOL]     String name = v.getName(); [EOL]     if (containsSeparator(name) && !getOrginalName(name).isEmpty()) { [EOL]         String newName = findReplacementName(name); [EOL]         referencedNames.remove(name); [EOL]         referencedNames.add(newName); [EOL]         List<Node> references = nameMap.get(name); [EOL]         Preconditions.checkState(references != null); [EOL]         for (Node n : references) { [EOL]             Preconditions.checkState(n.isName()); [EOL]             n.setString(newName); [EOL]         } [EOL]         compiler.reportCodeChange(); [EOL]         nameMap.remove(name); [EOL]     } [EOL] } <line_num>: 341,358
private String findReplacementName(String name) { [EOL]     String original = getOrginalName(name); [EOL]     String newName = original; [EOL]     int i = 0; [EOL]     while (!isValidName(newName)) { [EOL]         newName = original + ContextualRenamer.UNIQUE_ID_SEPARATOR + String.valueOf(i++); [EOL]     } [EOL]     return newName; [EOL] } <line_num>: 363,372
private boolean isValidName(String name) { [EOL]     if (TokenStream.isJSIdentifier(name) && !referencedNames.contains(name) && !name.equals(ARGUMENTS)) { [EOL]         return true; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 377,384
@Override [EOL] public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { [EOL]     return true; [EOL] } <line_num>: 386,389
@Override [EOL] public void visit(NodeTraversal t, Node node, Node parent) { [EOL]     if (t.inGlobalScope()) { [EOL]         return; [EOL]     } [EOL]     if (NodeUtil.isReferenceName(node)) { [EOL]         String name = node.getString(); [EOL]         referencedNames.add(name); [EOL]         if (containsSeparator(name)) { [EOL]             addCandidateNameReference(name, node); [EOL]         } [EOL]     } [EOL] } <line_num>: 391,407
private void addCandidateNameReference(String name, Node n) { [EOL]     List<Node> nodes = nameMap.get(name); [EOL]     if (null == nodes) { [EOL]         nodes = Lists.newLinkedList(); [EOL]         nameMap.put(name, nodes); [EOL]     } [EOL]     nodes.add(n); [EOL] } <line_num>: 409,416
@Override [EOL] public Renamer forChildScope() { [EOL]     return new ContextualRenamer(nameUsage); [EOL] } <line_num>: 453,456
@Override [EOL] public void addDeclaredName(String name) { [EOL]     if (!name.equals(ARGUMENTS)) { [EOL]         if (global) { [EOL]             reserveName(name); [EOL]         } else { [EOL]             if (!declarations.containsKey(name)) { [EOL]                 int id = incrementNameCount(name); [EOL]                 String newName = null; [EOL]                 if (id != 0) { [EOL]                     newName = getUniqueName(name, id); [EOL]                 } [EOL]                 declarations.put(name, newName); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 461,478
@Override [EOL] public String getReplacementName(String oldName) { [EOL]     return declarations.get(oldName); [EOL] } <line_num>: 480,483
private String getUniqueName(String name, int id) { [EOL]     return name + UNIQUE_ID_SEPARATOR + id; [EOL] } <line_num>: 488,490
private void reserveName(String name) { [EOL]     nameUsage.setCount(name, 0, 1); [EOL] } <line_num>: 492,494
private int incrementNameCount(String name) { [EOL]     return nameUsage.add(name, 1); [EOL] } <line_num>: 496,498
@Override [EOL] public boolean stripConstIfReplaced() { [EOL]     return false; [EOL] } <line_num>: 500,503
@Override [EOL] public void addDeclaredName(String name) { [EOL]     Preconditions.checkState(!name.equals(ARGUMENTS)); [EOL]     if (!declarations.containsKey(name)) { [EOL]         declarations.put(name, getUniqueName(name)); [EOL]     } [EOL] } <line_num>: 533,539
private String getUniqueName(String name) { [EOL]     if (name.isEmpty()) { [EOL]         return name; [EOL]     } [EOL]     if (name.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) != -1) { [EOL]         name = name.substring(0, name.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR)); [EOL]     } [EOL]     return name + ContextualRenamer.UNIQUE_ID_SEPARATOR + idPrefix + uniqueIdSupplier.get(); [EOL] } <line_num>: 541,555
@Override [EOL] public String getReplacementName(String oldName) { [EOL]     return declarations.get(oldName); [EOL] } <line_num>: 557,560
@Override [EOL] public Renamer forChildScope() { [EOL]     return new InlineRenamer(uniqueIdSupplier, idPrefix, removeConstness); [EOL] } <line_num>: 562,565
@Override [EOL] public boolean stripConstIfReplaced() { [EOL]     return removeConstness; [EOL] } <line_num>: 567,570
@Override [EOL] public Renamer forChildScope() { [EOL]     return new InlineRenamer(uniqueIdSupplier, idPrefix, false); [EOL] } <line_num>: 588,591
@Override [EOL] public void addDeclaredName(String name) { [EOL]     if (whitelist.contains(name)) { [EOL]         delegate.addDeclaredName(name); [EOL]     } [EOL] } <line_num>: 604,608
@Override [EOL] public String getReplacementName(String oldName) { [EOL]     return whitelist.contains(oldName) ? delegate.getReplacementName(oldName) : null; [EOL] } <line_num>: 610,613
@Override [EOL] public boolean stripConstIfReplaced() { [EOL]     return delegate.stripConstIfReplaced(); [EOL] } <line_num>: 615,617
@Override [EOL] public Renamer forChildScope() { [EOL]     return new WhitelistedRenamer(delegate.forChildScope(), whitelist); [EOL] } <line_num>: 619,621
