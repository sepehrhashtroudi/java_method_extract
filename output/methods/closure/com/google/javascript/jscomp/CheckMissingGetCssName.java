CheckMissingGetCssName(AbstractCompiler compiler, CheckLevel level, String blacklistRegex) { [EOL]     this.compiler = compiler; [EOL]     this.level = level; [EOL]     this.blacklist = Pattern.compile("\\b(?:" + blacklistRegex + ")").matcher(""); [EOL] } <line_num>: 43,49
@Override [EOL] public void process(Node externs, Node root) { [EOL]     NodeTraversal.traverse(compiler, root, this); [EOL] } <line_num>: 51,54
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (n.isString() && !parent.isGetProp() && !parent.isRegExp()) { [EOL]         String s = n.getString(); [EOL]         for (blacklist.reset(s); blacklist.find(); ) { [EOL]             if (insideGetCssNameCall(n, parent)) { [EOL]                 continue; [EOL]             } [EOL]             if (insideGetUniqueIdCall(n, parent)) { [EOL]                 continue; [EOL]             } [EOL]             if (insideAssignmentToIdConstant(n, parent)) { [EOL]                 continue; [EOL]             } [EOL]             compiler.report(t.makeError(n, level, MISSING_GETCSSNAME, blacklist.group())); [EOL]         } [EOL]     } [EOL] } <line_num>: 56,77
private boolean insideGetCssNameCall(Node n, Node parent) { [EOL]     return parent.isCall() && GET_CSS_NAME_FUNCTION.equals(parent.getFirstChild().getQualifiedName()); [EOL] } <line_num>: 80,84
private boolean insideGetUniqueIdCall(Node n, Node parent) { [EOL]     String name = parent.isCall() ? parent.getFirstChild().getQualifiedName() : null; [EOL]     return name != null && name.endsWith(GET_UNIQUE_ID_FUNCTION); [EOL] } <line_num>: 91,96
private boolean insideAssignmentToIdConstant(Node n, Node parent) { [EOL]     if (parent.isAssign()) { [EOL]         String qname = parent.getFirstChild().getQualifiedName(); [EOL]         return qname != null && isIdName(qname); [EOL]     } else if (parent.isName()) { [EOL]         Node grandParent = parent.getParent(); [EOL]         if (grandParent != null && grandParent.isVar()) { [EOL]             String name = parent.getString(); [EOL]             return isIdName(name); [EOL]         } else { [EOL]             return false; [EOL]         } [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 102,117
private boolean isIdName(String name) { [EOL]     return name.endsWith("ID") || name.endsWith("ID_"); [EOL] } <line_num>: 119,121
