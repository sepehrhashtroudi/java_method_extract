@Override [EOL] Node optimizeSubtree(Node subtree) { [EOL]     if (NodeUtil.isSymmetricOperation(subtree) || NodeUtil.isRelationalOperation(subtree)) { [EOL]         if (NodeUtil.isImmutableValue(subtree.getLastChild()) && !NodeUtil.isImmutableValue(subtree.getFirstChild())) { [EOL]             if (NodeUtil.isRelationalOperation(subtree)) { [EOL]                 int inverseOperator = NodeUtil.getInverseOperator(subtree.getType()); [EOL]                 subtree.setType(inverseOperator); [EOL]             } [EOL]             Node firstNode = subtree.getFirstChild().detachFromParent(); [EOL]             Node lastNode = subtree.getLastChild().detachFromParent(); [EOL]             subtree.addChildrenToFront(lastNode); [EOL]             subtree.addChildrenToBack(firstNode); [EOL]             reportCodeChange(); [EOL]         } [EOL]     } [EOL]     return subtree; [EOL] } <line_num>: 32,57
