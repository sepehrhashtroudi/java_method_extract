CheckProvides(AbstractCompiler compiler, CheckLevel checkLevel) { [EOL]     this.compiler = compiler; [EOL]     this.checkLevel = checkLevel; [EOL]     this.codingConvention = compiler.getCodingConvention(); [EOL] } <line_num>: 41,45
CheckProvidesCallback(CodingConvention convention) { [EOL]     this.convention = convention; [EOL] } <line_num>: 64,66
@Override [EOL] public void process(Node externs, Node root) { [EOL]     hotSwapScript(root, null); [EOL] } <line_num>: 47,50
@Override [EOL] public void hotSwapScript(Node scriptRoot, Node originalRoot) { [EOL]     CheckProvidesCallback callback = new CheckProvidesCallback(codingConvention); [EOL]     new NodeTraversal(compiler, callback).traverse(scriptRoot); [EOL] } <line_num>: 52,57
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     switch(n.getType()) { [EOL]         case Token.CALL: [EOL]             String providedClassName = codingConvention.extractClassNameIfProvide(n, parent); [EOL]             if (providedClassName != null) { [EOL]                 provides.put(providedClassName, n); [EOL]             } [EOL]             break; [EOL]         case Token.FUNCTION: [EOL]             visitFunctionNode(n, parent); [EOL]             break; [EOL]         case Token.SCRIPT: [EOL]             visitScriptNode(t, n); [EOL]     } [EOL] } <line_num>: 68,84
private void visitFunctionNode(Node n, Node parent) { [EOL]     Node name = null; [EOL]     JSDocInfo info = parent.getJSDocInfo(); [EOL]     if (info != null && info.isConstructor()) { [EOL]         name = parent.getFirstChild(); [EOL]     } else { [EOL]         info = n.getJSDocInfo(); [EOL]         if (info != null && info.isConstructor()) { [EOL]             name = n.getFirstChild(); [EOL]         } [EOL]     } [EOL]     if (name != null && name.isQualifiedName()) { [EOL]         String qualifiedName = name.getQualifiedName(); [EOL]         if (!this.convention.isPrivate(qualifiedName)) { [EOL]             Visibility visibility = info.getVisibility(); [EOL]             if (!visibility.equals(JSDocInfo.Visibility.PRIVATE)) { [EOL]                 ctors.put(qualifiedName, name); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 86,107
private void visitScriptNode(NodeTraversal t, Node n) { [EOL]     for (Map.Entry<String, Node> ctorEntry : ctors.entrySet()) { [EOL]         String ctor = ctorEntry.getKey(); [EOL]         int index = -1; [EOL]         boolean found = false; [EOL]         do { [EOL]             index = ctor.indexOf('.', index + 1); [EOL]             String provideKey = index == -1 ? ctor : ctor.substring(0, index); [EOL]             if (provides.containsKey(provideKey)) { [EOL]                 found = true; [EOL]                 break; [EOL]             } [EOL]         } while (index != -1); [EOL]         if (!found) { [EOL]             compiler.report(t.makeError(ctorEntry.getValue(), checkLevel, MISSING_PROVIDE_WARNING, ctorEntry.getKey())); [EOL]         } [EOL]     } [EOL]     provides.clear(); [EOL]     ctors.clear(); [EOL] } <line_num>: 109,131
