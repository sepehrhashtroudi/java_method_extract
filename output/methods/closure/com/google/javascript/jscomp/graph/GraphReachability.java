public GraphReachability(DiGraph<N, E> graph) { [EOL]     this(graph, null); [EOL] } <line_num>: 38,40
public GraphReachability(DiGraph<N, E> graph, Predicate<EdgeTuple<N, E>> edgePredicate) { [EOL]     this.graph = graph; [EOL]     this.edgePredicate = edgePredicate; [EOL] } <line_num>: 48,52
public EdgeTuple(N sourceNode, E edge, N destNode) { [EOL]     this.sourceNode = sourceNode; [EOL]     this.edge = edge; [EOL]     this.destNode = destNode; [EOL] } <line_num>: 92,96
public void compute(N entry) { [EOL]     graph.clearNodeAnnotations(); [EOL]     graph.getNode(entry).setAnnotation(REACHABLE); [EOL]     FixedPointGraphTraversal.newTraversal(this).computeFixedPoint(graph, entry); [EOL] } <line_num>: 54,59
public void recompute(N reachableNode) { [EOL]     GraphNode<N, E> newReachable = graph.getNode(reachableNode); [EOL]     Preconditions.checkState(newReachable.getAnnotation() != REACHABLE); [EOL]     newReachable.setAnnotation(REACHABLE); [EOL]     FixedPointGraphTraversal.newTraversal(this).computeFixedPoint(graph, reachableNode); [EOL] } <line_num>: 61,67
@Override [EOL] public boolean traverseEdge(N source, E e, N destination) { [EOL]     if (graph.getNode(source).getAnnotation() == REACHABLE && (edgePredicate == null || edgePredicate.apply(new EdgeTuple<N, E>(source, e, destination)))) { [EOL]         GraphNode<N, E> destNode = graph.getNode(destination); [EOL]         if (destNode.getAnnotation() != REACHABLE) { [EOL]             destNode.setAnnotation(REACHABLE); [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 69,81
