protected LinkedDirectedGraph(boolean useNodeAnnotations, boolean useEdgeAnnotations) { [EOL]     this.useNodeAnnotations = useNodeAnnotations; [EOL]     this.useEdgeAnnotations = useEdgeAnnotations; [EOL] } <line_num>: 71,75
LinkedDirectedGraphNode(N nodeValue) { [EOL]     this.value = nodeValue; [EOL] } <line_num>: 346,348
AnnotatedLinkedDirectedGraphNode(N nodeValue) { [EOL]     super(nodeValue); [EOL] } <line_num>: 437,439
LinkedDirectedGraphEdge(DiGraphNode<N, E> sourceNode, E edgeValue, DiGraphNode<N, E> destNode) { [EOL]     this.value = edgeValue; [EOL]     this.sourceNode = sourceNode; [EOL]     this.destNode = destNode; [EOL] } <line_num>: 471,476
AnnotatedLinkedDirectedGraphEdge(DiGraphNode<N, E> sourceNode, E edgeValue, DiGraphNode<N, E> destNode) { [EOL]     super(sourceNode, edgeValue, destNode); [EOL] } <line_num>: 565,568
@Override [EOL] public SubGraph<N, E> newSubGraph() { [EOL]     return new SimpleSubGraph<N, E>(this); [EOL] } <line_num>: 47,50
public static <N, E> LinkedDirectedGraph<N, E> createWithoutAnnotations() { [EOL]     return new LinkedDirectedGraph<N, E>(false, false); [EOL] } <line_num>: 52,54
public static <N, E> LinkedDirectedGraph<N, E> createWithNodeAnnotations() { [EOL]     return new LinkedDirectedGraph<N, E>(true, false); [EOL] } <line_num>: 56,58
public static <N, E> LinkedDirectedGraph<N, E> createWithEdgeAnnotations() { [EOL]     return new LinkedDirectedGraph<N, E>(false, true); [EOL] } <line_num>: 60,62
public static <N, E> LinkedDirectedGraph<N, E> create() { [EOL]     return new LinkedDirectedGraph<N, E>(true, true); [EOL] } <line_num>: 64,66
@Override [EOL] public void connect(N srcValue, E edgeValue, N destValue) { [EOL]     LinkedDirectedGraphNode<N, E> src = getNodeOrFail(srcValue); [EOL]     LinkedDirectedGraphNode<N, E> dest = getNodeOrFail(destValue); [EOL]     LinkedDirectedGraphEdge<N, E> edge = useEdgeAnnotations ? new AnnotatedLinkedDirectedGraphEdge<N, E>(src, edgeValue, dest) : new LinkedDirectedGraphEdge<N, E>(src, edgeValue, dest); [EOL]     src.getOutEdges().add(edge); [EOL]     dest.getInEdges().add(edge); [EOL] } <line_num>: 77,87
@Override [EOL] public void disconnect(N n1, N n2) { [EOL]     disconnectInDirection(n1, n2); [EOL]     disconnectInDirection(n2, n1); [EOL] } <line_num>: 89,93
@Override [EOL] public void disconnectInDirection(N srcValue, N destValue) { [EOL]     LinkedDirectedGraphNode<N, E> src = getNodeOrFail(srcValue); [EOL]     LinkedDirectedGraphNode<N, E> dest = getNodeOrFail(destValue); [EOL]     for (DiGraphEdge<?, E> edge : getDirectedGraphEdges(srcValue, destValue)) { [EOL]         src.getOutEdges().remove(edge); [EOL]         dest.getInEdges().remove(edge); [EOL]     } [EOL] } <line_num>: 95,103
@Override [EOL] public Iterable<DiGraphNode<N, E>> getDirectedGraphNodes() { [EOL]     return Collections.<DiGraphNode<N, E>>unmodifiableCollection(nodes.values()); [EOL] } <line_num>: 105,109
@Override [EOL] public DiGraphNode<N, E> getDirectedGraphNode(N nodeValue) { [EOL]     return nodes.get(nodeValue); [EOL] } <line_num>: 111,114
@Override [EOL] public GraphNode<N, E> getNode(N nodeValue) { [EOL]     return getDirectedGraphNode(nodeValue); [EOL] } <line_num>: 116,119
@Override [EOL] public List<DiGraphEdge<N, E>> getInEdges(N nodeValue) { [EOL]     LinkedDirectedGraphNode<N, E> node = getNodeOrFail(nodeValue); [EOL]     return Collections.<DiGraphEdge<N, E>>unmodifiableList(node.getInEdges()); [EOL] } <line_num>: 121,125
@Override [EOL] public List<DiGraphEdge<N, E>> getOutEdges(N nodeValue) { [EOL]     LinkedDirectedGraphNode<N, E> node = getNodeOrFail(nodeValue); [EOL]     return Collections.<DiGraphEdge<N, E>>unmodifiableList(node.getOutEdges()); [EOL] } <line_num>: 127,131
@Override [EOL] public DiGraphNode<N, E> createDirectedGraphNode(N nodeValue) { [EOL]     LinkedDirectedGraphNode<N, E> node = nodes.get(nodeValue); [EOL]     if (node == null) { [EOL]         node = useNodeAnnotations ? new AnnotatedLinkedDirectedGraphNode<N, E>(nodeValue) : new LinkedDirectedGraphNode<N, E>(nodeValue); [EOL]         nodes.put(nodeValue, node); [EOL]     } [EOL]     return node; [EOL] } <line_num>: 133,143
@Override [EOL] public List<GraphEdge<N, E>> getEdges(N n1, N n2) { [EOL]     List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges(n1, n2); [EOL]     List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges(n2, n1); [EOL]     int totalSize = forwardEdges.size() + backwardEdges.size(); [EOL]     List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity(totalSize); [EOL]     edges.addAll(forwardEdges); [EOL]     edges.addAll(backwardEdges); [EOL]     return edges; [EOL] } <line_num>: 145,156
@Override [EOL] public GraphEdge<N, E> getFirstEdge(N n1, N n2) { [EOL]     DiGraphNode<N, E> dNode1 = getNodeOrFail(n1); [EOL]     DiGraphNode<N, E> dNode2 = getNodeOrFail(n2); [EOL]     for (DiGraphEdge<N, E> outEdge : dNode1.getOutEdges()) { [EOL]         if (outEdge.getDestination() == dNode2) { [EOL]             return outEdge; [EOL]         } [EOL]     } [EOL]     for (DiGraphEdge<N, E> outEdge : dNode2.getOutEdges()) { [EOL]         if (outEdge.getDestination() == dNode1) { [EOL]             return outEdge; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 158,173
@Override [EOL] public GraphNode<N, E> createNode(N value) { [EOL]     return createDirectedGraphNode(value); [EOL] } <line_num>: 175,178
@Override [EOL] public List<DiGraphEdge<N, E>> getDirectedGraphEdges(N n1, N n2) { [EOL]     DiGraphNode<N, E> dNode1 = getNodeOrFail(n1); [EOL]     DiGraphNode<N, E> dNode2 = getNodeOrFail(n2); [EOL]     List<DiGraphEdge<N, E>> edges = Lists.newArrayList(); [EOL]     for (DiGraphEdge<N, E> outEdge : dNode1.getOutEdges()) { [EOL]         if (outEdge.getDestination() == dNode2) { [EOL]             edges.add(outEdge); [EOL]         } [EOL]     } [EOL]     return edges; [EOL] } <line_num>: 180,191
@Override [EOL] public boolean isConnectedInDirection(N n1, N n2) { [EOL]     return isConnectedInDirection(n1, Predicates.<E>alwaysTrue(), n2); [EOL] } <line_num>: 193,196
@Override [EOL] public boolean isConnectedInDirection(N n1, E edgeValue, N n2) { [EOL]     return isConnectedInDirection(n1, Predicates.equalTo(edgeValue), n2); [EOL] } <line_num>: 198,201
private boolean isConnectedInDirection(N n1, Predicate<E> edgeMatcher, N n2) { [EOL]     DiGraphNode<N, E> dNode1 = getNodeOrFail(n1); [EOL]     DiGraphNode<N, E> dNode2 = getNodeOrFail(n2); [EOL]     for (DiGraphEdge<N, E> outEdge : dNode1.getOutEdges()) { [EOL]         if (outEdge.getDestination() == dNode2 && edgeMatcher.apply(outEdge.getValue())) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 203,215
@Override [EOL] public List<DiGraphNode<N, E>> getDirectedPredNodes(N nodeValue) { [EOL]     return getDirectedPredNodes(nodes.get(nodeValue)); [EOL] } <line_num>: 217,220
@Override [EOL] public List<DiGraphNode<N, E>> getDirectedSuccNodes(N nodeValue) { [EOL]     return getDirectedSuccNodes(nodes.get(nodeValue)); [EOL] } <line_num>: 222,225
@Override [EOL] public List<DiGraphNode<N, E>> getDirectedPredNodes(DiGraphNode<N, E> dNode) { [EOL]     if (dNode == null) { [EOL]         throw new IllegalArgumentException(dNode + " is null"); [EOL]     } [EOL]     List<DiGraphNode<N, E>> nodeList = Lists.newArrayList(); [EOL]     for (DiGraphEdge<N, E> edge : dNode.getInEdges()) { [EOL]         nodeList.add(edge.getSource()); [EOL]     } [EOL]     return nodeList; [EOL] } <line_num>: 227,238
@Override [EOL] public List<DiGraphNode<N, E>> getDirectedSuccNodes(DiGraphNode<N, E> dNode) { [EOL]     if (dNode == null) { [EOL]         throw new IllegalArgumentException(dNode + " is null"); [EOL]     } [EOL]     List<DiGraphNode<N, E>> nodeList = Lists.newArrayList(); [EOL]     for (DiGraphEdge<N, E> edge : dNode.getOutEdges()) { [EOL]         nodeList.add(edge.getDestination()); [EOL]     } [EOL]     return nodeList; [EOL] } <line_num>: 240,251
@Override [EOL] public List<GraphvizEdge> getGraphvizEdges() { [EOL]     List<GraphvizEdge> edgeList = Lists.newArrayList(); [EOL]     for (LinkedDirectedGraphNode<N, E> node : nodes.values()) { [EOL]         for (DiGraphEdge<N, E> edge : node.getOutEdges()) { [EOL]             edgeList.add((LinkedDirectedGraphEdge<N, E>) edge); [EOL]         } [EOL]     } [EOL]     return edgeList; [EOL] } <line_num>: 253,262
@Override [EOL] public List<GraphvizNode> getGraphvizNodes() { [EOL]     List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity(nodes.size()); [EOL]     for (LinkedDirectedGraphNode<N, E> node : nodes.values()) { [EOL]         nodeList.add(node); [EOL]     } [EOL]     return nodeList; [EOL] } <line_num>: 264,272
@Override [EOL] public String getName() { [EOL]     return "LinkedGraph"; [EOL] } <line_num>: 274,277
@Override [EOL] public boolean isDirected() { [EOL]     return true; [EOL] } <line_num>: 279,282
@Override [EOL] public Collection<GraphNode<N, E>> getNodes() { [EOL]     return Collections.<GraphNode<N, E>>unmodifiableCollection(nodes.values()); [EOL] } <line_num>: 284,287
@Override [EOL] public List<GraphNode<N, E>> getNeighborNodes(N value) { [EOL]     DiGraphNode<N, E> node = getDirectedGraphNode(value); [EOL]     return getNeighborNodes(node); [EOL] } <line_num>: 289,293
public List<GraphNode<N, E>> getNeighborNodes(DiGraphNode<N, E> node) { [EOL]     List<GraphNode<N, E>> result = Lists.newArrayList(); [EOL]     for (Iterator<GraphNode<N, E>> i = ((LinkedDirectedGraphNode<N, E>) node).neighborIterator(); i.hasNext(); ) { [EOL]         result.add(i.next()); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 295,302
@Override [EOL] public Iterator<GraphNode<N, E>> getNeighborNodesIterator(N value) { [EOL]     LinkedDirectedGraphNode<N, E> node = nodes.get(value); [EOL]     Preconditions.checkNotNull(node); [EOL]     return node.neighborIterator(); [EOL] } <line_num>: 304,309
@Override [EOL] public List<GraphEdge<N, E>> getEdges() { [EOL]     List<GraphEdge<N, E>> result = Lists.newArrayList(); [EOL]     for (DiGraphNode<N, E> node : nodes.values()) { [EOL]         for (DiGraphEdge<N, E> edge : node.getOutEdges()) { [EOL]             result.add(edge); [EOL]         } [EOL]     } [EOL]     return Collections.unmodifiableList(result); [EOL] } <line_num>: 311,320
@Override [EOL] public int getNodeDegree(N value) { [EOL]     DiGraphNode<N, E> node = getNodeOrFail(value); [EOL]     return node.getInEdges().size() + node.getOutEdges().size(); [EOL] } <line_num>: 322,326
@Override [EOL] public N getValue() { [EOL]     return value; [EOL] } <line_num>: 350,353
@Override [EOL] public <A extends Annotation> A getAnnotation() { [EOL]     throw new UnsupportedOperationException("Graph initialized with node annotations turned off"); [EOL] } <line_num>: 355,359
@Override [EOL] public void setAnnotation(Annotation data) { [EOL]     throw new UnsupportedOperationException("Graph initialized with node annotations turned off"); [EOL] } <line_num>: 361,365
@Override [EOL] public String getColor() { [EOL]     return "white"; [EOL] } <line_num>: 367,370
@Override [EOL] public String getId() { [EOL]     return "LDN" + hashCode(); [EOL] } <line_num>: 372,375
@Override [EOL] public String getLabel() { [EOL]     return value != null ? value.toString() : "null"; [EOL] } <line_num>: 377,380
@Override [EOL] public String toString() { [EOL]     return getLabel(); [EOL] } <line_num>: 382,385
@Override [EOL] public List<DiGraphEdge<N, E>> getInEdges() { [EOL]     return inEdgeList; [EOL] } <line_num>: 387,390
@Override [EOL] public List<DiGraphEdge<N, E>> getOutEdges() { [EOL]     return outEdgeList; [EOL] } <line_num>: 392,395
private Iterator<GraphNode<N, E>> neighborIterator() { [EOL]     return new NeighborIterator(); [EOL] } <line_num>: 397,399
@Override [EOL] public boolean hasNext() { [EOL]     return in.hasNext() || out.hasNext(); [EOL] } <line_num>: 406,409
@Override [EOL] public GraphNode<N, E> next() { [EOL]     boolean isOut = !in.hasNext(); [EOL]     Iterator<DiGraphEdge<N, E>> curIterator = isOut ? out : in; [EOL]     DiGraphEdge<N, E> s = curIterator.next(); [EOL]     return isOut ? s.getDestination() : s.getSource(); [EOL] } <line_num>: 411,417
@Override [EOL] public void remove() { [EOL]     throw new UnsupportedOperationException("Remove not supported."); [EOL] } <line_num>: 419,422
@SuppressWarnings("unchecked") [EOL] @Override [EOL] public <A extends Annotation> A getAnnotation() { [EOL]     return (A) annotation; [EOL] } <line_num>: 441,445
@Override [EOL] public void setAnnotation(Annotation data) { [EOL]     annotation = data; [EOL] } <line_num>: 447,450
@Override [EOL] public DiGraphNode<N, E> getSource() { [EOL]     return sourceNode; [EOL] } <line_num>: 478,481
@Override [EOL] public DiGraphNode<N, E> getDestination() { [EOL]     return destNode; [EOL] } <line_num>: 483,486
@Override [EOL] public void setDestination(DiGraphNode<N, E> node) { [EOL]     destNode = node; [EOL] } <line_num>: 488,491
@Override [EOL] public void setSource(DiGraphNode<N, E> node) { [EOL]     sourceNode = node; [EOL] } <line_num>: 493,496
@Override [EOL] public E getValue() { [EOL]     return value; [EOL] } <line_num>: 498,501
@Override [EOL] public <A extends Annotation> A getAnnotation() { [EOL]     throw new UnsupportedOperationException("Graph initialized with edge annotations turned off"); [EOL] } <line_num>: 503,507
@Override [EOL] public void setAnnotation(Annotation data) { [EOL]     throw new UnsupportedOperationException("Graph initialized with edge annotations turned off"); [EOL] } <line_num>: 509,513
@Override [EOL] public String getColor() { [EOL]     return "black"; [EOL] } <line_num>: 515,518
@Override [EOL] public String getLabel() { [EOL]     return value != null ? value.toString() : "null"; [EOL] } <line_num>: 520,523
@Override [EOL] public String getNode1Id() { [EOL]     return ((LinkedDirectedGraphNode<N, E>) sourceNode).getId(); [EOL] } <line_num>: 525,528
@Override [EOL] public String getNode2Id() { [EOL]     return ((LinkedDirectedGraphNode<N, E>) destNode).getId(); [EOL] } <line_num>: 530,533
@Override [EOL] public String toString() { [EOL]     return sourceNode.toString() + " -> " + destNode.toString(); [EOL] } <line_num>: 535,538
@Override [EOL] public GraphNode<N, E> getNodeA() { [EOL]     return sourceNode; [EOL] } <line_num>: 540,543
@Override [EOL] public GraphNode<N, E> getNodeB() { [EOL]     return destNode; [EOL] } <line_num>: 545,548
@SuppressWarnings("unchecked") [EOL] @Override [EOL] public <A extends Annotation> A getAnnotation() { [EOL]     return (A) annotation; [EOL] } <line_num>: 570,574
@Override [EOL] public void setAnnotation(Annotation data) { [EOL]     annotation = data; [EOL] } <line_num>: 576,579
