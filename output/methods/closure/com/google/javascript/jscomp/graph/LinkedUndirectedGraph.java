protected LinkedUndirectedGraph(boolean useNodeAnnotations, boolean useEdgeAnnotations) { [EOL]     this.useNodeAnnotations = useNodeAnnotations; [EOL]     this.useEdgeAnnotations = useEdgeAnnotations; [EOL] } <line_num>: 68,72
LinkedUndirectedGraphNode(N nodeValue) { [EOL]     this.value = nodeValue; [EOL] } <line_num>: 289,291
AnnotatedLinkedUndirectedGraphNode(N nodeValue) { [EOL]     super(nodeValue); [EOL] } <line_num>: 374,376
LinkedUndirectedGraphEdge(UndiGraphNode<N, E> nodeA, E edgeValue, UndiGraphNode<N, E> nodeB) { [EOL]     this.value = edgeValue; [EOL]     this.nodeA = nodeA; [EOL]     this.nodeB = nodeB; [EOL] } <line_num>: 400,405
AnnotatedLinkedUndirectedGraphEdge(UndiGraphNode<N, E> nodeA, E edgeValue, UndiGraphNode<N, E> nodeB) { [EOL]     super(nodeA, edgeValue, nodeB); [EOL] } <line_num>: 470,474
@Override [EOL] public SubGraph<N, E> newSubGraph() { [EOL]     return new SimpleSubGraph<N, E>(this); [EOL] } <line_num>: 44,47
public static <N, E> LinkedUndirectedGraph<N, E> createWithoutAnnotations() { [EOL]     return new LinkedUndirectedGraph<N, E>(false, false); [EOL] } <line_num>: 49,51
public static <N, E> LinkedUndirectedGraph<N, E> createWithNodeAnnotations() { [EOL]     return new LinkedUndirectedGraph<N, E>(true, false); [EOL] } <line_num>: 53,55
public static <N, E> LinkedUndirectedGraph<N, E> createWithEdgeAnnotations() { [EOL]     return new LinkedUndirectedGraph<N, E>(false, true); [EOL] } <line_num>: 57,59
public static <N, E> LinkedUndirectedGraph<N, E> create() { [EOL]     return new LinkedUndirectedGraph<N, E>(true, true); [EOL] } <line_num>: 61,63
@Override [EOL] public void connect(N srcValue, E edgeValue, N destValue) { [EOL]     LinkedUndirectedGraphNode<N, E> src = getNodeOrFail(srcValue); [EOL]     LinkedUndirectedGraphNode<N, E> dest = getNodeOrFail(destValue); [EOL]     LinkedUndirectedGraphEdge<N, E> edge = useEdgeAnnotations ? new AnnotatedLinkedUndirectedGraphEdge<N, E>(src, edgeValue, dest) : new LinkedUndirectedGraphEdge<N, E>(src, edgeValue, dest); [EOL]     src.getNeighborEdges().add(edge); [EOL]     dest.getNeighborEdges().add(edge); [EOL] } <line_num>: 74,84
@Override [EOL] public void disconnect(N srcValue, N destValue) { [EOL]     LinkedUndirectedGraphNode<N, E> src = getNodeOrFail(srcValue); [EOL]     LinkedUndirectedGraphNode<N, E> dest = getNodeOrFail(destValue); [EOL]     for (UndiGraphEdge<N, E> edge : getUndirectedGraphEdges(srcValue, destValue)) { [EOL]         src.getNeighborEdges().remove(edge); [EOL]         dest.getNeighborEdges().remove(edge); [EOL]     } [EOL] } <line_num>: 86,95
@Override [EOL] public UndiGraphNode<N, E> createUndirectedGraphNode(N nodeValue) { [EOL]     LinkedUndirectedGraphNode<N, E> node = nodes.get(nodeValue); [EOL]     if (node == null) { [EOL]         node = useNodeAnnotations ? new AnnotatedLinkedUndirectedGraphNode<N, E>(nodeValue) : new LinkedUndirectedGraphNode<N, E>(nodeValue); [EOL]         nodes.put(nodeValue, node); [EOL]     } [EOL]     return node; [EOL] } <line_num>: 97,108
@Override [EOL] public List<GraphNode<N, E>> getNeighborNodes(N value) { [EOL]     UndiGraphNode<N, E> uNode = getUndirectedGraphNode(value); [EOL]     List<GraphNode<N, E>> nodeList = Lists.newArrayList(); [EOL]     for (Iterator<GraphNode<N, E>> i = getNeighborNodesIterator(value); i.hasNext(); ) { [EOL]         nodeList.add(i.next()); [EOL]     } [EOL]     return nodeList; [EOL] } <line_num>: 110,119
@Override [EOL] public Iterator<GraphNode<N, E>> getNeighborNodesIterator(N value) { [EOL]     UndiGraphNode<N, E> uNode = getUndirectedGraphNode(value); [EOL]     Preconditions.checkNotNull(uNode, "%s should be in the graph.", value); [EOL]     return ((LinkedUndirectedGraphNode<N, E>) uNode).neighborIterator(); [EOL] } <line_num>: 121,126
@SuppressWarnings("unchecked") [EOL] @Override [EOL] public List<UndiGraphEdge<N, E>> getUndirectedGraphEdges(N n1, N n2) { [EOL]     UndiGraphNode<N, E> dNode1 = nodes.get(n1); [EOL]     if (dNode1 == null) { [EOL]         return null; [EOL]     } [EOL]     UndiGraphNode<N, E> dNode2 = nodes.get(n2); [EOL]     if (dNode2 == null) { [EOL]         return null; [EOL]     } [EOL]     List<UndiGraphEdge<N, E>> edges = Lists.newArrayList(); [EOL]     for (UndiGraphEdge<N, E> outEdge : dNode1.getNeighborEdges()) { [EOL]         if (outEdge.getNodeA() == dNode2 || outEdge.getNodeB() == dNode2) { [EOL]             edges.add(outEdge); [EOL]         } [EOL]     } [EOL]     return edges; [EOL] } <line_num>: 128,146
@Override [EOL] public UndiGraphNode<N, E> getUndirectedGraphNode(N nodeValue) { [EOL]     return nodes.get(nodeValue); [EOL] } <line_num>: 148,151
@Override [EOL] public Collection<UndiGraphNode<N, E>> getUndirectedGraphNodes() { [EOL]     return Collections.<UndiGraphNode<N, E>>unmodifiableCollection(nodes.values()); [EOL] } <line_num>: 153,157
@Override [EOL] public GraphNode<N, E> createNode(N value) { [EOL]     return createUndirectedGraphNode(value); [EOL] } <line_num>: 159,162
@Override [EOL] public List<GraphEdge<N, E>> getEdges(N n1, N n2) { [EOL]     return Collections.<GraphEdge<N, E>>unmodifiableList(getUndirectedGraphEdges(n1, n2)); [EOL] } <line_num>: 164,168
@Override [EOL] public GraphEdge<N, E> getFirstEdge(N n1, N n2) { [EOL]     UndiGraphNode<N, E> dNode1 = getNodeOrFail(n1); [EOL]     UndiGraphNode<N, E> dNode2 = getNodeOrFail(n2); [EOL]     for (UndiGraphEdge<N, E> outEdge : dNode1.getNeighborEdges()) { [EOL]         if (outEdge.getNodeA() == dNode2 || outEdge.getNodeB() == dNode2) { [EOL]             return outEdge; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 170,180
@Override [EOL] public GraphNode<N, E> getNode(N value) { [EOL]     return getUndirectedGraphNode(value); [EOL] } <line_num>: 182,185
@Override [EOL] public boolean isConnected(N n1, N n2) { [EOL]     return isConnected(n1, Predicates.<E>alwaysTrue(), n2); [EOL] } <line_num>: 187,190
@Override [EOL] public boolean isConnected(N n1, E e, N n2) { [EOL]     return isConnected(n1, Predicates.<E>equalTo(e), n2); [EOL] } <line_num>: 192,195
private boolean isConnected(N n1, Predicate<E> edgePredicate, N n2) { [EOL]     UndiGraphNode<N, E> dNode1 = nodes.get(n1); [EOL]     if (dNode1 == null) { [EOL]         return false; [EOL]     } [EOL]     UndiGraphNode<N, E> dNode2 = nodes.get(n2); [EOL]     if (dNode2 == null) { [EOL]         return false; [EOL]     } [EOL]     for (UndiGraphEdge<N, E> outEdge : dNode1.getNeighborEdges()) { [EOL]         if ((outEdge.getNodeA() == dNode1 && outEdge.getNodeB() == dNode2) || (outEdge.getNodeA() == dNode2 && outEdge.getNodeB() == dNode1)) { [EOL]             if (edgePredicate.apply(outEdge.getValue())) { [EOL]                 return true; [EOL]             } [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 197,215
@Override [EOL] public List<GraphvizEdge> getGraphvizEdges() { [EOL]     List<GraphvizEdge> edgeList = Lists.newArrayList(); [EOL]     for (LinkedUndirectedGraphNode<N, E> node : nodes.values()) { [EOL]         for (UndiGraphEdge<N, E> edge : node.getNeighborEdges()) { [EOL]             if (edge.getNodeA() == node) { [EOL]                 edgeList.add((GraphvizEdge) edge); [EOL]             } [EOL]         } [EOL]     } [EOL]     return edgeList; [EOL] } <line_num>: 217,228
@Override [EOL] public String getName() { [EOL]     return "LinkedUndirectedGraph"; [EOL] } <line_num>: 230,233
@Override [EOL] public List<GraphvizNode> getGraphvizNodes() { [EOL]     List<GraphvizNode> nodeList = Lists.newArrayListWithCapacity(nodes.size()); [EOL]     for (LinkedUndirectedGraphNode<N, E> node : nodes.values()) { [EOL]         nodeList.add(node); [EOL]     } [EOL]     return nodeList; [EOL] } <line_num>: 235,243
@Override [EOL] public boolean isDirected() { [EOL]     return false; [EOL] } <line_num>: 245,248
@Override [EOL] public Collection<GraphNode<N, E>> getNodes() { [EOL]     return Collections.<GraphNode<N, E>>unmodifiableCollection(nodes.values()); [EOL] } <line_num>: 250,253
@SuppressWarnings("unchecked") [EOL] @Override [EOL] public List<GraphEdge<N, E>> getEdges() { [EOL]     List<GraphEdge<N, E>> result = Lists.newArrayList(); [EOL]     for (LinkedUndirectedGraphNode<N, E> node : nodes.values()) { [EOL]         for (UndiGraphEdge<N, E> edge : node.getNeighborEdges()) { [EOL]             if (edge.getNodeA() == node) { [EOL]                 result.add(edge); [EOL]             } [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 255,267
@Override [EOL] public int getNodeDegree(N value) { [EOL]     UndiGraphNode<N, E> uNode = getUndirectedGraphNode(value); [EOL]     if (uNode == null) { [EOL]         throw new IllegalArgumentException(value + " not found in graph"); [EOL]     } [EOL]     return uNode.getNeighborEdges().size(); [EOL] } <line_num>: 269,276
@Override [EOL] public List<UndiGraphEdge<N, E>> getNeighborEdges() { [EOL]     return neighborList; [EOL] } <line_num>: 293,296
@Override [EOL] public Iterator<UndiGraphEdge<N, E>> getNeighborEdgesIterator() { [EOL]     return neighborList.iterator(); [EOL] } <line_num>: 298,301
@Override [EOL] public <A extends Annotation> A getAnnotation() { [EOL]     throw new UnsupportedOperationException("Graph initialized with node annotations turned off"); [EOL] } <line_num>: 303,307
@Override [EOL] public void setAnnotation(Annotation data) { [EOL]     throw new UnsupportedOperationException("Graph initialized with node annotations turned off"); [EOL] } <line_num>: 309,313
@Override [EOL] public N getValue() { [EOL]     return value; [EOL] } <line_num>: 315,318
@Override [EOL] public String getColor() { [EOL]     return "white"; [EOL] } <line_num>: 320,323
@Override [EOL] public String getId() { [EOL]     return "LDN" + hashCode(); [EOL] } <line_num>: 325,328
@Override [EOL] public String getLabel() { [EOL]     return value != null ? value.toString() : "null"; [EOL] } <line_num>: 330,333
public Iterator<GraphNode<N, E>> neighborIterator() { [EOL]     return new NeighborIterator(); [EOL] } <line_num>: 335,337
@Override [EOL] public boolean hasNext() { [EOL]     return edgeIterator.hasNext(); [EOL] } <line_num>: 344,347
@Override [EOL] public GraphNode<N, E> next() { [EOL]     UndiGraphEdge<N, E> edge = edgeIterator.next(); [EOL]     if (edge.getNodeA() == LinkedUndirectedGraphNode.this) { [EOL]         return edge.getNodeB(); [EOL]     } else { [EOL]         return edge.getNodeA(); [EOL]     } [EOL] } <line_num>: 349,357
@Override [EOL] public void remove() { [EOL]     throw new UnsupportedOperationException("Remove not supported."); [EOL] } <line_num>: 359,362
@SuppressWarnings("unchecked") [EOL] @Override [EOL] public <A extends Annotation> A getAnnotation() { [EOL]     return (A) annotation; [EOL] } <line_num>: 378,382
@Override [EOL] public void setAnnotation(Annotation data) { [EOL]     annotation = data; [EOL] } <line_num>: 384,387
@Override [EOL] public E getValue() { [EOL]     return value; [EOL] } <line_num>: 407,410
@Override [EOL] public GraphNode<N, E> getNodeA() { [EOL]     return nodeA; [EOL] } <line_num>: 412,415
@Override [EOL] public GraphNode<N, E> getNodeB() { [EOL]     return nodeB; [EOL] } <line_num>: 417,420
@Override [EOL] public <A extends Annotation> A getAnnotation() { [EOL]     throw new UnsupportedOperationException("Graph initialized with edge annotations turned off"); [EOL] } <line_num>: 422,426
@Override [EOL] public void setAnnotation(Annotation data) { [EOL]     throw new UnsupportedOperationException("Graph initialized with edge annotations turned off"); [EOL] } <line_num>: 428,432
@Override [EOL] public String getColor() { [EOL]     return "black"; [EOL] } <line_num>: 434,437
@Override [EOL] public String getLabel() { [EOL]     return value != null ? value.toString() : "null"; [EOL] } <line_num>: 439,442
@SuppressWarnings("unchecked") [EOL] @Override [EOL] public String getNode1Id() { [EOL]     return ((LinkedUndirectedGraphNode<N, E>) nodeA).getId(); [EOL] } <line_num>: 444,448
@SuppressWarnings("unchecked") [EOL] @Override [EOL] public String getNode2Id() { [EOL]     return ((LinkedUndirectedGraphNode<N, E>) nodeB).getId(); [EOL] } <line_num>: 450,454
@Override [EOL] public String toString() { [EOL]     return nodeA.toString() + " -- " + nodeB.toString(); [EOL] } <line_num>: 456,459
@SuppressWarnings("unchecked") [EOL] @Override [EOL] public <A extends Annotation> A getAnnotation() { [EOL]     return (A) annotation; [EOL] } <line_num>: 476,480
@Override [EOL] public void setAnnotation(Annotation data) { [EOL]     annotation = data; [EOL] } <line_num>: 482,485
