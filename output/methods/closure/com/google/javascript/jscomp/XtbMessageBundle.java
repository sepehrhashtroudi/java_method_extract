public XtbMessageBundle(InputStream xtb, @Nullable String projectId, boolean unused) { [EOL]     this(xtb, projectId); [EOL] } <line_num>: 53,56
public XtbMessageBundle(InputStream xtb, @Nullable String projectId) { [EOL]     Preconditions.checkState(!"".equals(projectId)); [EOL]     this.messages = Maps.newHashMap(); [EOL]     this.idGenerator = new GoogleJsMessageIdGenerator(projectId); [EOL]     try { [EOL]         SAXParser parser = createSAXParser(); [EOL]         XMLReader reader = parser.getXMLReader(); [EOL]         Handler contentHandler = new Handler(); [EOL]         reader.setContentHandler(contentHandler); [EOL]         reader.parse(new InputSource(xtb)); [EOL]     } catch (ParserConfigurationException e) { [EOL]         throw new RuntimeException(e); [EOL]     } catch (SAXException e) { [EOL]         throw new RuntimeException(e); [EOL]     } catch (IOException e) { [EOL]         throw new RuntimeException(e); [EOL]     } [EOL] } <line_num>: 64,83
private SAXParser createSAXParser() throws ParserConfigurationException, SAXException { [EOL]     SAXParserFactory factory = SAXParserFactory.newInstance(); [EOL]     factory.setValidating(false); [EOL]     factory.setXIncludeAware(false); [EOL]     factory.setFeature("http://xml.org/sax/features/external-general-entities", false); [EOL]     factory.setFeature("http://xml.org/sax/features/external-parameter-entities", false); [EOL]     factory.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false); [EOL]     factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true); [EOL]     SAXParser parser = factory.newSAXParser(); [EOL]     XMLReader xmlReader = parser.getXMLReader(); [EOL]     xmlReader.setEntityResolver(NOOP_RESOLVER); [EOL]     return parser; [EOL] } <line_num>: 86,104
@Override [EOL] public JsMessage getMessage(String id) { [EOL]     return messages.get(id); [EOL] } <line_num>: 106,109
@Override [EOL] public JsMessage.IdGenerator idGenerator() { [EOL]     return idGenerator; [EOL] } <line_num>: 111,114
@Override [EOL] public Iterable<JsMessage> getAllMessages() { [EOL]     return Iterables.unmodifiableIterable(messages.values()); [EOL] } <line_num>: 116,119
@Override [EOL] public void setDocumentLocator(Locator locator) { [EOL] } <line_num>: 138,139
@Override [EOL] public void startDocument() { [EOL] } <line_num>: 141,142
@Override [EOL] public void endDocument() { [EOL] } <line_num>: 144,145
@Override [EOL] public void startPrefixMapping(String prefix, String uri) { [EOL] } <line_num>: 147,148
@Override [EOL] public void endPrefixMapping(String prefix) { [EOL] } <line_num>: 150,151
@Override [EOL] public void startElement(String uri, String localName, String qName, Attributes atts) { [EOL]     if (BUNDLE_ELEM_NAME.equals(qName)) { [EOL]         Preconditions.checkState(lang == null); [EOL]         lang = atts.getValue(LANG_ATT_NAME); [EOL]         Preconditions.checkState(lang != null && !lang.isEmpty()); [EOL]     } else if (TRANSLATION_ELEM_NAME.equals(qName)) { [EOL]         Preconditions.checkState(msgBuilder == null); [EOL]         String id = atts.getValue(MESSAGE_ID_ATT_NAME); [EOL]         Preconditions.checkState(id != null && !id.isEmpty()); [EOL]         msgBuilder = new JsMessage.Builder(id); [EOL]     } else if (PLACEHOLDER_ELEM_NAME.equals(qName)) { [EOL]         Preconditions.checkState(msgBuilder != null); [EOL]         String phRef = atts.getValue(PLACEHOLDER_NAME_ATT_NAME); [EOL]         phRef = JsMessageVisitor.toLowerCamelCaseWithNumericSuffixes(phRef); [EOL]         msgBuilder.appendPlaceholderReference(phRef); [EOL]     } [EOL] } <line_num>: 153,171
@Override [EOL] public void endElement(String uri, String localName, String qName) { [EOL]     if (TRANSLATION_ELEM_NAME.equals(qName)) { [EOL]         Preconditions.checkState(msgBuilder != null); [EOL]         if (!msgBuilder.hasParts()) { [EOL]             msgBuilder.appendStringPart(""); [EOL]         } [EOL]         String key = msgBuilder.getKey(); [EOL]         messages.put(key, msgBuilder.build()); [EOL]         msgBuilder = null; [EOL]     } [EOL] } <line_num>: 173,184
@Override [EOL] public void characters(char[] ch, int start, int length) { [EOL]     if (msgBuilder != null) { [EOL]         msgBuilder.appendStringPart(String.valueOf(ch, start, length)); [EOL]     } [EOL] } <line_num>: 186,192
@Override [EOL] public void ignorableWhitespace(char[] ch, int start, int length) { [EOL]     if (msgBuilder != null) { [EOL]         msgBuilder.appendStringPart(String.valueOf(ch, start, length)); [EOL]     } [EOL] } <line_num>: 194,200
@Override [EOL] public void processingInstruction(String target, String data) { [EOL] } <line_num>: 202,203
@Override [EOL] public void skippedEntity(String name) { [EOL] } <line_num>: 205,206
@Override [EOL] public InputSource resolveEntity(String publicId, String systemId) { [EOL]     return new InputSource(new StringReader("")); [EOL] } <line_num>: 216,219
