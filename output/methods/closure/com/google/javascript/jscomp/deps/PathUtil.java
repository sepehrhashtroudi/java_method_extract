private PathUtil() { [EOL] } <line_num>: 38,39
public static String collapseDots(String path) { [EOL]     path = removeExtraneousSlashes(path); [EOL]     if (!path.contains(".")) { [EOL]         return path; [EOL]     } [EOL]     String[] srcFragments = path.split("/"); [EOL]     List<String> dstFragments = Lists.newArrayList(); [EOL]     for (String fragment : srcFragments) { [EOL]         if (fragment.equals("..")) { [EOL]             if (!dstFragments.isEmpty()) { [EOL]                 dstFragments.remove(dstFragments.size() - 1); [EOL]             } [EOL]         } else if (!fragment.equals(".")) { [EOL]             dstFragments.add(fragment); [EOL]         } [EOL]     } [EOL]     if (dstFragments.size() == 1 && dstFragments.get(0).isEmpty()) { [EOL]         return "/"; [EOL]     } [EOL]     return Joiner.on("/").join(dstFragments); [EOL] } <line_num>: 54,78
static boolean isAbsolute(String path) { [EOL]     return path.startsWith("/"); [EOL] } <line_num>: 87,89
static String removeExtraneousSlashes(String s) { [EOL]     int lastNonSlash = NON_SLASH_MATCHER.lastIndexIn(s); [EOL]     if (lastNonSlash != -1) { [EOL]         s = s.substring(0, lastNonSlash + 1); [EOL]     } [EOL]     return SLASH_MATCHER.collapseFrom(s, '/'); [EOL] } <line_num>: 96,103
public static String makeAbsolute(String path) { [EOL]     return makeAbsolute(path, System.getProperty("user.dir")); [EOL] } <line_num>: 118,120
public static String makeAbsolute(String path, String rootPath) { [EOL]     if (!isAbsolute(path)) { [EOL]         path = rootPath + "/" + path; [EOL]     } [EOL]     return collapseDots(path); [EOL] } <line_num>: 135,140
public static String makeRelative(String basePath, String targetPath) { [EOL]     if (isAbsolute(basePath) != isAbsolute(targetPath)) { [EOL]         throw new IllegalArgumentException("Paths must both be relative or both absolute.\n" + "  basePath: " + basePath + "\n" + "  targetPath: " + targetPath); [EOL]     } [EOL]     basePath = collapseDots(basePath); [EOL]     targetPath = collapseDots(targetPath); [EOL]     String[] baseFragments = basePath.split("/"); [EOL]     String[] targetFragments = targetPath.split("/"); [EOL]     int i = -1; [EOL]     do { [EOL]         i += 1; [EOL]         if (i == baseFragments.length && i == targetFragments.length) { [EOL]             return "."; [EOL]         } else if (i == baseFragments.length) { [EOL]             return Joiner.on("/").join(Lists.newArrayList(Arrays.asList(targetFragments).listIterator(i))); [EOL]         } else if (i == targetFragments.length) { [EOL]             return Strings.repeat("../", baseFragments.length - i - 1) + ".."; [EOL]         } [EOL]     } while (baseFragments[i].equals(targetFragments[i])); [EOL]     return Strings.repeat("../", baseFragments.length - i) + Joiner.on("/").join(Lists.newArrayList(Arrays.asList(targetFragments).listIterator(i))); [EOL] } <line_num>: 162,207
