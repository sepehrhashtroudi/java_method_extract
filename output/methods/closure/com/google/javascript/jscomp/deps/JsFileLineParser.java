public ParseException(String message, boolean fatal) { [EOL]     super(message); [EOL]     this.fatal = fatal; [EOL] } <line_num>: 60,63
public JsFileLineParser(ErrorManager errorManager) { [EOL]     this.errorManager = errorManager; [EOL] } <line_num>: 91,93
public boolean isFatal() { [EOL]     return fatal; [EOL] } <line_num>: 65,67
public void setShortcutMode(boolean mode) { [EOL]     this.shortcutMode = mode; [EOL] } <line_num>: 102,104
public boolean didParseSucceed() { [EOL]     return parseSucceeded; [EOL] } <line_num>: 106,108
void doParse(String filePath, Reader fileContents) { [EOL]     this.filePath = filePath; [EOL]     parseSucceeded = true; [EOL]     BufferedReader lineBuffer = new BufferedReader(fileContents); [EOL]     String line = null; [EOL]     lineNum = 0; [EOL]     boolean inMultilineComment = false; [EOL]     try { [EOL]         while (null != (line = lineBuffer.readLine())) { [EOL]             ++lineNum; [EOL]             try { [EOL]                 String revisedLine = line; [EOL]                 if (inMultilineComment) { [EOL]                     int endOfComment = revisedLine.indexOf("*/"); [EOL]                     if (endOfComment != -1) { [EOL]                         revisedLine = revisedLine.substring(endOfComment + 2); [EOL]                         inMultilineComment = false; [EOL]                     } else { [EOL]                         revisedLine = ""; [EOL]                     } [EOL]                 } [EOL]                 if (!inMultilineComment) { [EOL]                     while (true) { [EOL]                         int startOfLineComment = revisedLine.indexOf("//"); [EOL]                         int startOfMultilineComment = revisedLine.indexOf("/*"); [EOL]                         if (startOfLineComment != -1 && (startOfMultilineComment == -1 || startOfLineComment < startOfMultilineComment)) { [EOL]                             revisedLine = revisedLine.substring(0, startOfLineComment); [EOL]                             break; [EOL]                         } else if (startOfMultilineComment != -1) { [EOL]                             int endOfMultilineComment = revisedLine.indexOf("*/", startOfMultilineComment + 2); [EOL]                             if (endOfMultilineComment == -1) { [EOL]                                 revisedLine = revisedLine.substring(0, startOfMultilineComment); [EOL]                                 inMultilineComment = true; [EOL]                                 break; [EOL]                             } else { [EOL]                                 revisedLine = revisedLine.substring(0, startOfMultilineComment) + revisedLine.substring(endOfMultilineComment + 2); [EOL]                             } [EOL]                         } else { [EOL]                             break; [EOL]                         } [EOL]                     } [EOL]                 } [EOL]                 if (!revisedLine.isEmpty()) { [EOL]                     if (!parseLine(revisedLine) && shortcutMode) { [EOL]                         break; [EOL]                     } [EOL]                 } [EOL]             } catch (ParseException e) { [EOL]                 errorManager.report(e.isFatal() ? CheckLevel.ERROR : CheckLevel.WARNING, JSError.make(filePath, lineNum, 0, e.isFatal() ? PARSE_ERROR : PARSE_WARNING, e.getMessage(), line)); [EOL]                 parseSucceeded = parseSucceeded && !e.isFatal(); [EOL]             } [EOL]         } [EOL]     } catch (IOException e) { [EOL]         errorManager.report(CheckLevel.ERROR, JSError.make(filePath, 0, 0, PARSE_ERROR, "Error reading file: " + filePath)); [EOL]         parseSucceeded = false; [EOL]     } [EOL] } <line_num>: 119,196
abstract boolean parseLine(String line) throws ParseException; <line_num>: 205,205
String parseJsString(String jsStringLiteral) throws ParseException { [EOL]     valueMatcher.reset(jsStringLiteral); [EOL]     if (!valueMatcher.matches()) { [EOL]         throw new ParseException("Syntax error in JS String literal", true); [EOL]     } [EOL]     return valueMatcher.group(1) != null ? valueMatcher.group(1) : valueMatcher.group(2); [EOL] } <line_num>: 214,220
List<String> parseJsStringArray(String input) throws ParseException { [EOL]     List<String> results = Lists.newArrayList(); [EOL]     int indexStart = input.indexOf('['); [EOL]     int indexEnd = input.lastIndexOf(']'); [EOL]     if ((indexStart == -1) || (indexEnd == -1)) { [EOL]         throw new ParseException("Syntax error when parsing JS array", true); [EOL]     } [EOL]     String innerValues = input.substring(indexStart + 1, indexEnd); [EOL]     if (!innerValues.trim().isEmpty()) { [EOL]         valueMatcher.reset(innerValues); [EOL]         for (; ; ) { [EOL]             if (!valueMatcher.lookingAt()) { [EOL]                 throw new ParseException("Syntax error in JS String literal", true); [EOL]             } [EOL]             results.add(valueMatcher.group(1) != null ? valueMatcher.group(1) : valueMatcher.group(2)); [EOL]             if (valueMatcher.hitEnd()) { [EOL]                 break; [EOL]             } [EOL]             if (innerValues.charAt(valueMatcher.end()) != ',') { [EOL]                 throw new ParseException("Missing comma in string array", true); [EOL]             } [EOL]             valueMatcher.region(valueMatcher.end() + 1, valueMatcher.regionEnd()); [EOL]         } [EOL]     } [EOL]     return results; [EOL] } <line_num>: 228,260
