CombinedCompilerPass(AbstractCompiler compiler, Callback... callbacks) { [EOL]     this(compiler, Lists.<Callback>newArrayList(callbacks)); [EOL] } <line_num>: 59,62
CombinedCompilerPass(AbstractCompiler compiler, List<Callback> callbacks) { [EOL]     this.compiler = compiler; [EOL]     this.callbacks = new CallbackWrapper[callbacks.size()]; [EOL]     for (int i = 0; i < callbacks.size(); i++) { [EOL]         this.callbacks[i] = new CallbackWrapper(callbacks.get(i)); [EOL]     } [EOL] } <line_num>: 64,71
private CallbackWrapper(Callback callback) { [EOL]     this.callback = callback; [EOL]     if (callback instanceof ScopedCallback) { [EOL]         scopedCallback = (ScopedCallback) callback; [EOL]     } else { [EOL]         scopedCallback = null; [EOL]     } [EOL] } <line_num>: 108,115
static void traverse(AbstractCompiler compiler, Node root, List<Callback> callbacks) { [EOL]     if (callbacks.size() == 1) { [EOL]         NodeTraversal.traverse(compiler, root, callbacks.get(0)); [EOL]     } else { [EOL]         (new CombinedCompilerPass(compiler, callbacks)).process(null, root); [EOL]     } [EOL] } <line_num>: 73,80
void visitOrMaybeActivate(NodeTraversal t, Node n, Node parent) { [EOL]     if (isActive()) { [EOL]         callback.visit(t, n, parent); [EOL]     } else if (waiting == n) { [EOL]         waiting = null; [EOL]     } [EOL] } <line_num>: 121,127
void shouldTraverseIfActive(NodeTraversal t, Node n, Node parent) { [EOL]     if (isActive() && !callback.shouldTraverse(t, n, parent)) { [EOL]         waiting = n; [EOL]     } [EOL] } <line_num>: 129,133
void enterScopeIfActive(NodeTraversal t) { [EOL]     if (isActive() && scopedCallback != null) { [EOL]         scopedCallback.enterScope(t); [EOL]     } [EOL] } <line_num>: 135,139
void exitScopeIfActive(NodeTraversal t) { [EOL]     if (isActive() && scopedCallback != null) { [EOL]         scopedCallback.exitScope(t); [EOL]     } [EOL] } <line_num>: 141,145
boolean isActive() { [EOL]     return waiting == null; [EOL] } <line_num>: 147,149
@Override [EOL] public final void process(Node externs, Node root) { [EOL]     NodeTraversal.traverse(compiler, root, this); [EOL] } <line_num>: 152,155
@Override [EOL] public void hotSwapScript(Node scriptRoot, Node originalRoot) { [EOL]     NodeTraversal.traverse(compiler, scriptRoot, this); [EOL] } <line_num>: 157,160
@Override [EOL] public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { [EOL]     for (CallbackWrapper callback : callbacks) { [EOL]         callback.shouldTraverseIfActive(t, n, parent); [EOL]     } [EOL]     return true; [EOL] } <line_num>: 162,173
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     for (CallbackWrapper callback : callbacks) { [EOL]         callback.visitOrMaybeActivate(t, n, parent); [EOL]     } [EOL] } <line_num>: 175,180
@Override [EOL] public void enterScope(NodeTraversal t) { [EOL]     for (CallbackWrapper callback : callbacks) { [EOL]         callback.enterScopeIfActive(t); [EOL]     } [EOL] } <line_num>: 182,187
@Override [EOL] public void exitScope(NodeTraversal t) { [EOL]     for (CallbackWrapper callback : callbacks) { [EOL]         callback.exitScopeIfActive(t); [EOL]     } [EOL] } <line_num>: 189,194
