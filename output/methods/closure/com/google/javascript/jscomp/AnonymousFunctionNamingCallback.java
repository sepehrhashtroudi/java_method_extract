AnonymousFunctionNamingCallback(FunctionNamer namer) { [EOL]     this.namer = namer; [EOL] } <line_num>: 63,65
String getName(Node node); <line_num>: 47,47
void setFunctionName(String name, Node fnNode); <line_num>: 54,54
String getCombinedName(String lhs, String rhs); <line_num>: 60,60
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     switch(n.getType()) { [EOL]         case Token.FUNCTION: [EOL]             Node functionNameNode = n.getFirstChild(); [EOL]             String functionName = functionNameNode.getString(); [EOL]             if (functionName.length() == 0) { [EOL]                 if (parent.isAssign()) { [EOL]                     Node lhs = parent.getFirstChild(); [EOL]                     String name = namer.getName(lhs); [EOL]                     namer.setFunctionName(name, n); [EOL]                 } else if (parent.isName()) { [EOL]                     String name = namer.getName(parent); [EOL]                     namer.setFunctionName(name, n); [EOL]                 } [EOL]             } [EOL]             break; [EOL]         case Token.ASSIGN: [EOL]             Node lhs = n.getFirstChild(); [EOL]             Node rhs = lhs.getNext(); [EOL]             if (rhs.isObjectLit()) { [EOL]                 nameObjectLiteralMethods(rhs, namer.getName(lhs)); [EOL]             } [EOL]     } [EOL] } <line_num>: 67,108
private void nameObjectLiteralMethods(Node objectLiteral, String context) { [EOL]     for (Node keyNode = objectLiteral.getFirstChild(); keyNode != null; keyNode = keyNode.getNext()) { [EOL]         Node valueNode = keyNode.getFirstChild(); [EOL]         if (keyNode.isStringKey()) { [EOL]             String name = namer.getCombinedName(context, namer.getName(keyNode)); [EOL]             int type = valueNode.getType(); [EOL]             if (type == Token.FUNCTION) { [EOL]                 Node functionNameNode = valueNode.getFirstChild(); [EOL]                 String functionName = functionNameNode.getString(); [EOL]                 if (functionName.isEmpty()) { [EOL]                     namer.setFunctionName(name, valueNode); [EOL]                 } [EOL]             } else if (type == Token.OBJECTLIT) { [EOL]                 nameObjectLiteralMethods(valueNode, name); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 110,136
