public SimpleDefinitionFinder(AbstractCompiler compiler) { [EOL]     this.compiler = compiler; [EOL]     this.definitionSiteMap = Maps.newLinkedHashMap(); [EOL]     this.nameDefinitionMultimap = LinkedHashMultimap.create(); [EOL]     this.nameUseSiteMultimap = LinkedHashMultimap.create(); [EOL] } <line_num>: 51,56
DefinitionGatheringCallback(boolean inExterns) { [EOL]     this.inExterns = inExterns; [EOL] } <line_num>: 152,154
public Collection<DefinitionSite> getDefinitionSites() { [EOL]     return definitionSiteMap.values(); [EOL] } <line_num>: 63,65
private DefinitionSite getDefinitionAt(Node node) { [EOL]     return definitionSiteMap.get(node); [EOL] } <line_num>: 67,69
DefinitionSite getDefinitionForFunction(Node function) { [EOL]     Preconditions.checkState(function.isFunction()); [EOL]     return getDefinitionAt(getNameNodeFromFunctionNode(function)); [EOL] } <line_num>: 71,74
@Override [EOL] public Collection<Definition> getDefinitionsReferencedAt(Node useSite) { [EOL]     if (definitionSiteMap.containsKey(useSite)) { [EOL]         return null; [EOL]     } [EOL]     if (useSite.isGetProp()) { [EOL]         String propName = useSite.getLastChild().getString(); [EOL]         if (propName.equals("apply") || propName.equals("call")) { [EOL]             useSite = useSite.getFirstChild(); [EOL]         } [EOL]     } [EOL]     String name = getSimplifiedName(useSite); [EOL]     if (name != null) { [EOL]         Collection<Definition> defs = nameDefinitionMultimap.get(name); [EOL]         if (!defs.isEmpty()) { [EOL]             return defs; [EOL]         } else { [EOL]             return null; [EOL]         } [EOL]     } else { [EOL]         return null; [EOL]     } [EOL] } <line_num>: 76,100
@Override [EOL] public void process(Node externs, Node source) { [EOL]     NodeTraversal.traverse(compiler, externs, new DefinitionGatheringCallback(true)); [EOL]     NodeTraversal.traverse(compiler, source, new DefinitionGatheringCallback(false)); [EOL]     NodeTraversal.traverse(compiler, source, new UseSiteGatheringCallback()); [EOL] } <line_num>: 102,110
Collection<UseSite> getUseSites(Definition definition) { [EOL]     String name = getSimplifiedName(definition.getLValue()); [EOL]     return nameUseSiteMultimap.get(name); [EOL] } <line_num>: 120,123
private static String getSimplifiedName(Node node) { [EOL]     if (node.isName()) { [EOL]         String name = node.getString(); [EOL]         if (name != null && !name.isEmpty()) { [EOL]             return name; [EOL]         } else { [EOL]             return null; [EOL]         } [EOL]     } else if (node.isGetProp()) { [EOL]         return "this." + node.getLastChild().getString(); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 135,147
@Override [EOL] public void visit(NodeTraversal traversal, Node node, Node parent) { [EOL]     if (inExterns && node.isName() && parent.isParamList()) { [EOL]         return; [EOL]     } [EOL]     Definition def = DefinitionsRemover.getDefinition(node, inExterns); [EOL]     if (def != null) { [EOL]         String name = getSimplifiedName(def.getLValue()); [EOL]         if (name != null) { [EOL]             Node rValue = def.getRValue(); [EOL]             if ((rValue != null) && !NodeUtil.isImmutableValue(rValue) && !rValue.isFunction()) { [EOL]                 Definition unknownDef = new UnknownDefinition(def.getLValue(), inExterns); [EOL]                 def = unknownDef; [EOL]             } [EOL]             if (inExterns) { [EOL]                 List<Definition> stubsToRemove = Lists.newArrayList(); [EOL]                 String qualifiedName = node.getQualifiedName(); [EOL]                 if (qualifiedName != null) { [EOL]                     for (Definition prevDef : nameDefinitionMultimap.get(name)) { [EOL]                         if (prevDef instanceof ExternalNameOnlyDefinition && !jsdocContainsDeclarations(node)) { [EOL]                             String prevName = prevDef.getLValue().getQualifiedName(); [EOL]                             if (qualifiedName.equals(prevName)) { [EOL]                                 stubsToRemove.add(prevDef); [EOL]                             } [EOL]                         } [EOL]                     } [EOL]                     for (Definition prevDef : stubsToRemove) { [EOL]                         nameDefinitionMultimap.remove(name, prevDef); [EOL]                     } [EOL]                 } [EOL]             } [EOL]             nameDefinitionMultimap.put(name, def); [EOL]             definitionSiteMap.put(node, new DefinitionSite(node, def, traversal.getModule(), traversal.inGlobalScope(), inExterns)); [EOL]         } [EOL]     } [EOL]     if (inExterns && (parent != null) && parent.isExprResult()) { [EOL]         String name = getSimplifiedName(node); [EOL]         if (name != null) { [EOL]             boolean dropStub = false; [EOL]             if (!jsdocContainsDeclarations(node)) { [EOL]                 String qualifiedName = node.getQualifiedName(); [EOL]                 if (qualifiedName != null) { [EOL]                     for (Definition prevDef : nameDefinitionMultimap.get(name)) { [EOL]                         String prevName = prevDef.getLValue().getQualifiedName(); [EOL]                         if (qualifiedName.equals(prevName)) { [EOL]                             dropStub = true; [EOL]                             break; [EOL]                         } [EOL]                     } [EOL]                 } [EOL]             } [EOL]             if (!dropStub) { [EOL]                 Definition definition = new ExternalNameOnlyDefinition(node); [EOL]                 nameDefinitionMultimap.put(name, definition); [EOL]                 definitionSiteMap.put(node, new DefinitionSite(node, definition, traversal.getModule(), traversal.inGlobalScope(), inExterns)); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 156,260
private boolean jsdocContainsDeclarations(Node node) { [EOL]     JSDocInfo info = node.getJSDocInfo(); [EOL]     return (info != null && info.containsDeclaration()); [EOL] } <line_num>: 265,268
@Override [EOL] public void visit(NodeTraversal traversal, Node node, Node parent) { [EOL]     Collection<Definition> defs = getDefinitionsReferencedAt(node); [EOL]     if (defs == null) { [EOL]         return; [EOL]     } [EOL]     Definition first = defs.iterator().next(); [EOL]     String name = getSimplifiedName(first.getLValue()); [EOL]     Preconditions.checkNotNull(name); [EOL]     nameUseSiteMultimap.put(name, new UseSite(node, traversal.getScope(), traversal.getModule())); [EOL] } <line_num>: 272,287
static boolean isCallOrNewSite(UseSite use) { [EOL]     Node call = use.node.getParent(); [EOL]     if (call == null) { [EOL]         return false; [EOL]     } [EOL]     return NodeUtil.isCallOrNew(call) && call.getFirstChild() == use.node; [EOL] } <line_num>: 294,304
boolean canModifyDefinition(Definition definition) { [EOL]     if (isExported(definition)) { [EOL]         return false; [EOL]     } [EOL]     Collection<UseSite> useSites = getUseSites(definition); [EOL]     if (useSites.isEmpty()) { [EOL]         return false; [EOL]     } [EOL]     for (UseSite site : useSites) { [EOL]         Node nameNode = site.node; [EOL]         Collection<Definition> singleSiteDefinitions = getDefinitionsReferencedAt(nameNode); [EOL]         if (singleSiteDefinitions.size() > 1) { [EOL]             return false; [EOL]         } [EOL]         Preconditions.checkState(!singleSiteDefinitions.isEmpty()); [EOL]         Preconditions.checkState(singleSiteDefinitions.contains(definition)); [EOL]     } [EOL]     return true; [EOL] } <line_num>: 306,339
private boolean isExported(Definition definition) { [EOL]     Node lValue = definition.getLValue(); [EOL]     if (lValue == null) { [EOL]         return true; [EOL]     } [EOL]     String partialName; [EOL]     if (lValue.isGetProp()) { [EOL]         partialName = lValue.getLastChild().getString(); [EOL]     } else if (lValue.isName()) { [EOL]         partialName = lValue.getString(); [EOL]     } else { [EOL]         return true; [EOL]     } [EOL]     CodingConvention codingConvention = compiler.getCodingConvention(); [EOL]     if (codingConvention.isExported(partialName)) { [EOL]         return true; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 344,368
static boolean isSimpleFunctionDeclaration(Node fn) { [EOL]     Node parent = fn.getParent(); [EOL]     Node gramps = parent.getParent(); [EOL]     Node nameNode = SimpleDefinitionFinder.getNameNodeFromFunctionNode(fn); [EOL]     if (nameNode != null && nameNode.isName()) { [EOL]         String name = nameNode.getString(); [EOL]         if (name.equals(NodeUtil.JSC_PROPERTY_NAME_FN) || name.equals(ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     if (NodeUtil.isFunctionDeclaration(fn)) { [EOL]         return true; [EOL]     } [EOL]     if (fn.getFirstChild().getString().isEmpty() && (NodeUtil.isExprAssign(gramps) || parent.isName())) { [EOL]         return true; [EOL]     } [EOL]     return false; [EOL] } <line_num>: 373,410
static Node getNameNodeFromFunctionNode(Node function) { [EOL]     Preconditions.checkState(function.isFunction()); [EOL]     if (NodeUtil.isFunctionDeclaration(function)) { [EOL]         return function.getFirstChild(); [EOL]     } else { [EOL]         Node parent = function.getParent(); [EOL]         if (NodeUtil.isVarDeclaration(parent)) { [EOL]             return parent; [EOL]         } else if (parent.isAssign()) { [EOL]             return parent.getFirstChild(); [EOL]         } else if (NodeUtil.isObjectLitKey(parent, parent.getParent())) { [EOL]             return parent; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 415,430
void removeReferences(Node node) { [EOL]     if (DefinitionsRemover.isDefinitionNode(node)) { [EOL]         DefinitionSite defSite = definitionSiteMap.get(node); [EOL]         if (defSite != null) { [EOL]             Definition def = defSite.definition; [EOL]             String name = getSimplifiedName(def.getLValue()); [EOL]             if (name != null) { [EOL]                 this.definitionSiteMap.remove(node); [EOL]                 this.nameDefinitionMultimap.remove(name, node); [EOL]             } [EOL]         } [EOL]     } else { [EOL]         Node useSite = node; [EOL]         if (useSite.isGetProp()) { [EOL]             String propName = useSite.getLastChild().getString(); [EOL]             if (propName.equals("apply") || propName.equals("call")) { [EOL]                 useSite = useSite.getFirstChild(); [EOL]             } [EOL]         } [EOL]         String name = getSimplifiedName(useSite); [EOL]         if (name != null) { [EOL]             this.nameUseSiteMultimap.remove(name, new UseSite(useSite, null, null)); [EOL]         } [EOL]     } [EOL]     for (Node child : node.children()) { [EOL]         removeReferences(child); [EOL]     } [EOL] } <line_num>: 436,464
