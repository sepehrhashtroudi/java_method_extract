ShadowVariables(AbstractCompiler compiler, Map<String, Assignment> assignments, SortedSet<Assignment> varsByFrequency, Map<Node, String> pseudoNameMap) { [EOL]     this.compiler = compiler; [EOL]     this.assignments = assignments; [EOL]     this.varsByFrequency = varsByFrequency; [EOL]     this.oldPseudoNameMap = pseudoNameMap; [EOL]     this.deltaPseudoNameMap = Maps.newLinkedHashMap(); [EOL] } <line_num>: 96,106
@Override [EOL] public void process(Node externs, Node root) { [EOL]     NodeTraversal.traverse(compiler, root, new GatherReferenceInfo()); [EOL]     NodeTraversal.traverse(compiler, root, new DoShadowVariables()); [EOL]     if (oldPseudoNameMap != null) { [EOL]         oldPseudoNameMap.putAll(deltaPseudoNameMap); [EOL]     } [EOL] } <line_num>: 108,125
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (!NodeUtil.isReferenceName(n)) { [EOL]         return; [EOL]     } [EOL]     if (t.inGlobalScope()) { [EOL]         return; [EOL]     } [EOL]     Var var = t.getScope().getVar(n.getString()); [EOL]     if (var == null) { [EOL]         return; [EOL]     } [EOL]     if (var.getScope().isGlobal()) { [EOL]         return; [EOL]     } [EOL]     if (var.getScope() != t.getScope()) { [EOL]         for (Scope s = t.getScope(); s != var.getScope() && s.isLocal(); s = s.getParent()) { [EOL]             scopeUpRefMap.put(s.getRootNode(), var.name); [EOL]         } [EOL]     } [EOL]     if (var.getScope() == t.getScope()) { [EOL]         scopeUpRefMap.put(t.getScopeRoot(), var.name); [EOL]     } [EOL]     varToNameUsage.put(var, n); [EOL] } <line_num>: 128,168
@Override [EOL] public void enterScope(NodeTraversal t) { [EOL]     Scope s = t.getScope(); [EOL]     if (!s.isLocal()) { [EOL]         return; [EOL]     } [EOL]     if (s.getParent().isGlobal()) { [EOL]         return; [EOL]     } [EOL]     for (Iterator<Var> vars = s.getVars(); vars.hasNext(); ) { [EOL]         Var var = vars.next(); [EOL]         if (var.isBleedingFunction()) { [EOL]             continue; [EOL]         } [EOL]         if (compiler.getCodingConvention().isExported(var.name, s.isLocal())) { [EOL]             continue; [EOL]         } [EOL]         Assignment bestShadow = findBestShadow(s, var); [EOL]         if (bestShadow == null) { [EOL]             continue; [EOL]         } [EOL]         Assignment localAssignment = assignments.get(var.getName()); [EOL]         if (bestShadow.count < localAssignment.count) { [EOL]             continue; [EOL]         } [EOL]         doShadow(localAssignment, bestShadow, var); [EOL]         if (oldPseudoNameMap != null) { [EOL]             String targetPseudoName = oldPseudoNameMap.get(s.getVar(bestShadow.oldName).nameNode); [EOL]             for (Node use : varToNameUsage.get(var)) { [EOL]                 deltaPseudoNameMap.put(use, targetPseudoName); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 174,225
@Override [EOL] public void exitScope(NodeTraversal t) { [EOL] } <line_num>: 227,228
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL] } <line_num>: 230,231
private Assignment findBestShadow(Scope curScope, Var candidate) { [EOL]     for (Assignment assignment : varsByFrequency) { [EOL]         if (assignment.oldName.startsWith(RenameVars.LOCAL_VAR_PREFIX)) { [EOL]             if (!scopeUpRefMap.get(curScope.getRootNode()).contains(assignment.oldName)) { [EOL]                 if (curScope.isDeclared(assignment.oldName, true)) { [EOL]                     return assignment; [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 237,250
private void doShadow(Assignment original, Assignment toShadow, Var var) { [EOL]     Scope s = var.getScope(); [EOL]     Collection<Node> references = varToNameUsage.get(var); [EOL]     varsByFrequency.remove(original); [EOL]     varsByFrequency.remove(toShadow); [EOL]     original.count -= references.size(); [EOL]     toShadow.count += references.size(); [EOL]     varsByFrequency.add(original); [EOL]     varsByFrequency.add(toShadow); [EOL]     Var shadowed = s.getVar(toShadow.oldName); [EOL]     if (shadowed != null) { [EOL]         for (Scope curScope = s; curScope != shadowed.scope; curScope = curScope.getParent()) { [EOL]             scopeUpRefMap.put(curScope.getRootNode(), toShadow.oldName); [EOL]         } [EOL]     } [EOL]     for (Node n : references) { [EOL]         n.setString(toShadow.oldName); [EOL]         Node cur = n; [EOL]         while (cur != s.getRootNode()) { [EOL]             cur = cur.getParent(); [EOL]             if (cur.isFunction()) { [EOL]                 scopeUpRefMap.put(cur, toShadow.oldName); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 252,294
