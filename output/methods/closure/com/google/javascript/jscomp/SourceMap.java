public LocationMapping(String prefix, String replacement) { [EOL]     this.prefix = prefix; [EOL]     this.replacement = replacement; [EOL] } <line_num>: 102,105
private SourceMap(SourceMapGenerator generator) { [EOL]     this.generator = generator; [EOL] } <line_num>: 113,115
@Override [EOL] SourceMap getInstance() { [EOL]     return new SourceMap(SourceMapGeneratorFactory.getInstance(SourceMapFormat.V1)); [EOL] } <line_num>: 47,50
@Override [EOL] SourceMap getInstance() { [EOL]     return new SourceMap(SourceMapGeneratorFactory.getInstance(SourceMapFormat.DEFAULT)); [EOL] } <line_num>: 53,56
@Override [EOL] SourceMap getInstance() { [EOL]     return new SourceMap(SourceMapGeneratorFactory.getInstance(SourceMapFormat.V2)); [EOL] } <line_num>: 59,62
@Override [EOL] SourceMap getInstance() { [EOL]     return new SourceMap(SourceMapGeneratorFactory.getInstance(SourceMapFormat.V3)); [EOL] } <line_num>: 65,68
abstract SourceMap getInstance(); <line_num>: 70,70
@Override [EOL] public boolean apply(Node node) { [EOL]     return true; [EOL] } <line_num>: 80,82
@Override [EOL] public boolean apply(Node node) { [EOL]     return node.isCall() || node.isNew() || node.isFunction() || node.isName() || NodeUtil.isGet(node) || NodeUtil.isObjectLitKey(node, node.getParent()) || (node.isString() && NodeUtil.isGet(node.getParent())); [EOL] } <line_num>: 87,95
public void addMapping(Node node, FilePosition outputStartPosition, FilePosition outputEndPosition) { [EOL]     String sourceFile = node.getSourceFileName(); [EOL]     if (sourceFile == null || node.getLineno() < 0) { [EOL]         return; [EOL]     } [EOL]     sourceFile = fixupSourceLocation(sourceFile); [EOL]     String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP); [EOL]     int lineBaseOffset = 1; [EOL]     if (generator instanceof SourceMapGeneratorV1 || generator instanceof SourceMapGeneratorV2) { [EOL]         lineBaseOffset = 0; [EOL]     } [EOL]     generator.addMapping(sourceFile, originalName, new FilePosition(node.getLineno() - lineBaseOffset, node.getCharno()), outputStartPosition, outputEndPosition); [EOL] } <line_num>: 117,148
private String fixupSourceLocation(String sourceFile) { [EOL]     if (prefixMappings.isEmpty()) { [EOL]         return sourceFile; [EOL]     } [EOL]     String fixed = sourceLocationFixupCache.get(sourceFile); [EOL]     if (fixed != null) { [EOL]         return fixed; [EOL]     } [EOL]     for (LocationMapping mapping : prefixMappings) { [EOL]         if (sourceFile.startsWith(mapping.prefix)) { [EOL]             fixed = mapping.replacement + sourceFile.substring(mapping.prefix.length()); [EOL]             break; [EOL]         } [EOL]     } [EOL]     if (fixed == null) { [EOL]         fixed = sourceFile; [EOL]     } [EOL]     sourceLocationFixupCache.put(sourceFile, fixed); [EOL]     return fixed; [EOL] } <line_num>: 154,180
public void appendTo(Appendable out, String name) throws IOException { [EOL]     generator.appendTo(out, name); [EOL] } <line_num>: 182,184
public void reset() { [EOL]     generator.reset(); [EOL]     sourceLocationFixupCache.clear(); [EOL] } <line_num>: 186,189
public void setStartingPosition(int offsetLine, int offsetIndex) { [EOL]     generator.setStartingPosition(offsetLine, offsetIndex); [EOL] } <line_num>: 191,193
public void setWrapperPrefix(String prefix) { [EOL]     generator.setWrapperPrefix(prefix); [EOL] } <line_num>: 195,197
public void validate(boolean validate) { [EOL]     generator.validate(validate); [EOL] } <line_num>: 199,201
public void setPrefixMappings(List<LocationMapping> sourceMapLocationMappings) { [EOL]     this.prefixMappings = sourceMapLocationMappings; [EOL] } <line_num>: 206,208
