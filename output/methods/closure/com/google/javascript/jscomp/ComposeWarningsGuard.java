private GuardComparator(Map<WarningsGuard, Integer> orderOfAddition) { [EOL]     this.orderOfAddition = orderOfAddition; [EOL] } <line_num>: 57,59
public ComposeWarningsGuard(List<WarningsGuard> guards) { [EOL]     addGuards(guards); [EOL] } <line_num>: 79,81
public ComposeWarningsGuard(WarningsGuard... guards) { [EOL]     this(Lists.newArrayList(guards)); [EOL] } <line_num>: 83,85
@Override [EOL] public int compare(WarningsGuard a, WarningsGuard b) { [EOL]     int priorityDiff = a.getPriority() - b.getPriority(); [EOL]     if (priorityDiff != 0) { [EOL]         return priorityDiff; [EOL]     } [EOL]     return orderOfAddition.get(b).intValue() - orderOfAddition.get(a).intValue(); [EOL] } <line_num>: 61,72
void addGuard(WarningsGuard guard) { [EOL]     if (guard instanceof ComposeWarningsGuard) { [EOL]         ComposeWarningsGuard composeGuard = (ComposeWarningsGuard) guard; [EOL]         if (composeGuard.demoteErrors) { [EOL]             this.demoteErrors = composeGuard.demoteErrors; [EOL]         } [EOL]         addGuards(Lists.newArrayList(composeGuard.guards.descendingSet())); [EOL]     } else { [EOL]         numberOfAdds++; [EOL]         orderOfAddition.put(guard, numberOfAdds); [EOL]         guards.remove(guard); [EOL]         guards.add(guard); [EOL]     } [EOL] } <line_num>: 87,102
private void addGuards(Iterable<WarningsGuard> guards) { [EOL]     for (WarningsGuard guard : guards) { [EOL]         addGuard(guard); [EOL]     } [EOL] } <line_num>: 104,108
@Override [EOL] public CheckLevel level(JSError error) { [EOL]     for (WarningsGuard guard : guards) { [EOL]         CheckLevel newLevel = guard.level(error); [EOL]         if (newLevel != null) { [EOL]             if (demoteErrors && newLevel == CheckLevel.ERROR) { [EOL]                 return CheckLevel.WARNING; [EOL]             } [EOL]             return newLevel; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 110,122
@Override [EOL] public boolean disables(DiagnosticGroup group) { [EOL]     nextSingleton: for (DiagnosticType type : group.getTypes()) { [EOL]         DiagnosticGroup singleton = DiagnosticGroup.forType(type); [EOL]         for (WarningsGuard guard : guards) { [EOL]             if (guard.disables(singleton)) { [EOL]                 continue nextSingleton; [EOL]             } else if (guard.enables(singleton)) { [EOL]                 return false; [EOL]             } [EOL]         } [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 124,142
@Override [EOL] public boolean enables(DiagnosticGroup group) { [EOL]     for (WarningsGuard guard : guards) { [EOL]         if (guard.enables(group)) { [EOL]             return true; [EOL]         } else if (guard.disables(group)) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 148,159
List<WarningsGuard> getGuards() { [EOL]     return Collections.unmodifiableList(Lists.newArrayList(guards)); [EOL] } <line_num>: 161,163
ComposeWarningsGuard makeEmergencyFailSafeGuard() { [EOL]     ComposeWarningsGuard safeGuard = new ComposeWarningsGuard(); [EOL]     safeGuard.demoteErrors = true; [EOL]     for (WarningsGuard guard : guards.descendingSet()) { [EOL]         safeGuard.addGuard(guard); [EOL]     } [EOL]     return safeGuard; [EOL] } <line_num>: 169,176
@Override [EOL] public String toString() { [EOL]     return Joiner.on(", ").join(guards); [EOL] } <line_num>: 178,181
