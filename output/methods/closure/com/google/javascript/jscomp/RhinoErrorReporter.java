private RhinoErrorReporter(AbstractCompiler compiler) { [EOL]     this.compiler = compiler; [EOL]     typeMap = ImmutableMap.of(replacePlaceHolders(com.google.javascript.rhino.head.ScriptRuntime.getMessage0("msg.extra.trailing.comma")), TRAILING_COMMA, replacePlaceHolders(com.google.javascript.rhino.head.ScriptRuntime.getMessage0("msg.dup.parms")), DUPLICATE_PARAM, replacePlaceHolders(ScriptRuntime.getMessage0("msg.bad.jsdoc.tag")), BAD_JSDOC_ANNOTATION, Pattern.compile("^Type annotations are not allowed here.*"), MISPLACED_TYPE_ANNOTATION, Pattern.compile("^Bad type annotation.*"), TYPE_PARSE_ERROR); [EOL] } <line_num>: 75,101
private OldRhinoErrorReporter(AbstractCompiler compiler) { [EOL]     super(compiler); [EOL] } <line_num>: 143,145
private NewRhinoErrorReporter(AbstractCompiler compiler) { [EOL]     super(compiler); [EOL] } <line_num>: 163,165
private Pattern replacePlaceHolders(String s) { [EOL]     s = Pattern.quote(s); [EOL]     return Pattern.compile(s.replaceAll("\\{\\d+\\}", "\\\\E.*\\\\Q")); [EOL] } <line_num>: 70,73
public static com.google.javascript.rhino.head.ErrorReporter forNewRhino(AbstractCompiler compiler) { [EOL]     return new NewRhinoErrorReporter(compiler); [EOL] } <line_num>: 103,106
public static ErrorReporter forOldRhino(AbstractCompiler compiler) { [EOL]     return new OldRhinoErrorReporter(compiler); [EOL] } <line_num>: 108,110
void warningAtLine(String message, String sourceName, int line, int lineOffset) { [EOL]     compiler.report(makeError(message, sourceName, line, lineOffset, CheckLevel.WARNING)); [EOL] } <line_num>: 112,116
void errorAtLine(String message, String sourceName, int line, int lineOffset) { [EOL]     compiler.report(makeError(message, sourceName, line, lineOffset, CheckLevel.ERROR)); [EOL] } <line_num>: 118,122
private JSError makeError(String message, String sourceName, int line, int lineOffset, CheckLevel defaultLevel) { [EOL]     for (Entry<Pattern, DiagnosticType> entry : typeMap.entrySet()) { [EOL]         if (entry.getKey().matcher(message).matches()) { [EOL]             return JSError.make(sourceName, line, lineOffset, entry.getValue(), message); [EOL]         } [EOL]     } [EOL]     return JSError.make(sourceName, line, lineOffset, defaultLevel, PARSE_ERROR, message); [EOL] } <line_num>: 124,138
@Override [EOL] public void error(String message, String sourceName, int line, int lineOffset) { [EOL]     super.errorAtLine(message, sourceName, line, lineOffset); [EOL] } <line_num>: 147,151
@Override [EOL] public void warning(String message, String sourceName, int line, int lineOffset) { [EOL]     super.warningAtLine(message, sourceName, line, lineOffset); [EOL] } <line_num>: 153,157
@Override [EOL] public com.google.javascript.rhino.head.EvaluatorException runtimeError(String message, String sourceName, int line, String lineSource, int lineOffset) { [EOL]     return new com.google.javascript.rhino.head.EvaluatorException(message, sourceName, line, lineSource, lineOffset); [EOL] } <line_num>: 167,173
@Override [EOL] public void error(String message, String sourceName, int line, String sourceLine, int lineOffset) { [EOL]     super.errorAtLine(message, sourceName, line, lineOffset); [EOL] } <line_num>: 175,179
@Override [EOL] public void error(String message, String sourceName, int offset, int length) { [EOL]     int line = 1; [EOL]     int column = 0; [EOL]     SourceFile file = this.compiler.getSourceFileByName(sourceName); [EOL]     if (file != null) { [EOL]         line = file.getLineOfOffset(offset); [EOL]         column = file.getColumnOfOffset(offset); [EOL]     } [EOL]     super.errorAtLine(message, sourceName, line, column); [EOL] } <line_num>: 181,192
@Override [EOL] public void warning(String message, String sourceName, int line, String sourceLine, int lineOffset) { [EOL]     super.warningAtLine(message, sourceName, line, lineOffset); [EOL] } <line_num>: 194,198
@Override [EOL] public void warning(String message, String sourceName, int offset, int length) { [EOL]     int line = 1; [EOL]     int column = 0; [EOL]     SourceFile file = this.compiler.getSourceFileByName(sourceName); [EOL]     if (file != null) { [EOL]         line = file.getLineOfOffset(offset); [EOL]         column = file.getColumnOfOffset(offset); [EOL]     } [EOL]     super.errorAtLine(message, sourceName, line, column); [EOL] } <line_num>: 200,211
