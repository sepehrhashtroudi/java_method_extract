Assignment(String name) { [EOL]     this.oldName = name; [EOL]     this.newName = null; [EOL]     this.count = 0; [EOL]     this.orderOfOccurrence = assignmentCount++; [EOL] } <line_num>: 94,101
RenameVars(AbstractCompiler compiler, String prefix, boolean localRenamingOnly, boolean preserveFunctionExpressionNames, boolean generatePseudoNames, boolean shouldShadow, VariableMap prevUsedRenameMap, @Nullable char[] reservedCharacters, @Nullable Set<String> reservedNames) { [EOL]     this.compiler = compiler; [EOL]     this.prefix = prefix == null ? "" : prefix; [EOL]     this.localRenamingOnly = localRenamingOnly; [EOL]     this.preserveFunctionExpressionNames = preserveFunctionExpressionNames; [EOL]     if (generatePseudoNames) { [EOL]         this.pseudoNameMap = Maps.newHashMap(); [EOL]     } else { [EOL]         this.pseudoNameMap = null; [EOL]     } [EOL]     this.prevUsedRenameMap = prevUsedRenameMap; [EOL]     this.reservedCharacters = reservedCharacters; [EOL]     this.shouldShadow = shouldShadow; [EOL]     if (reservedNames == null) { [EOL]         this.reservedNames = Sets.newHashSet(); [EOL]     } else { [EOL]         this.reservedNames = Sets.newHashSet(reservedNames); [EOL]     } [EOL] } <line_num>: 136,159
ProcessVars(boolean isExterns) { [EOL]     isExternsPass_ = isExterns; [EOL] } <line_num>: 188,190
void setNewName(String newName) { [EOL]     Preconditions.checkState(this.newName == null); [EOL]     this.newName = newName; [EOL] } <line_num>: 106,109
@Override [EOL] public void enterScope(NodeTraversal t) { [EOL]     if (t.inGlobalScope()) [EOL]         return; [EOL]     Iterator<Var> it = t.getScope().getVars(); [EOL]     while (it.hasNext()) { [EOL]         Var current = it.next(); [EOL]         if (current.isBleedingFunction()) { [EOL]             localBleedingFunctions.add(current); [EOL]             localBleedingFunctionsPerScope.put(t.getScope().getParent(), current); [EOL]         } [EOL]     } [EOL] } <line_num>: 192,205
@Override [EOL] public void exitScope(NodeTraversal t) { [EOL] } <line_num>: 207,208
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (!n.isName()) { [EOL]         return; [EOL]     } [EOL]     String name = n.getString(); [EOL]     if (name.length() == 0) { [EOL]         return; [EOL]     } [EOL]     Scope.Var var = t.getScope().getVar(name); [EOL]     boolean local = (var != null) && var.isLocal() && (!var.scope.getParent().isGlobal() || !var.isBleedingFunction()); [EOL]     if (!local && localRenamingOnly) { [EOL]         reservedNames.add(name); [EOL]         return; [EOL]     } [EOL]     if (preserveFunctionExpressionNames && var != null && NodeUtil.isFunctionExpression(var.getParentNode())) { [EOL]         reservedNames.add(name); [EOL]         return; [EOL]     } [EOL]     if (!okToRenameVar(name, local)) { [EOL]         if (local) { [EOL]             String newName = MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(name); [EOL]             if (!newName.equals(name)) { [EOL]                 n.setString(newName); [EOL]             } [EOL]         } [EOL]         return; [EOL]     } [EOL]     if (isExternsPass_) { [EOL]         if (!local) { [EOL]             externNames.add(name); [EOL]         } [EOL]         return; [EOL]     } [EOL]     if (pseudoNameMap != null) { [EOL]         recordPseudoName(n); [EOL]     } [EOL]     if (local) { [EOL]         String tempName = LOCAL_VAR_PREFIX + getLocalVarIndex(var); [EOL]         incCount(tempName); [EOL]         localNameNodes.add(n); [EOL]         n.setString(tempName); [EOL]     } else if (var != null) { [EOL]         incCount(name); [EOL]         globalNameNodes.add(n); [EOL]     } [EOL] } <line_num>: 210,281
void incCount(String name) { [EOL]     Assignment s = assignments.get(name); [EOL]     if (s == null) { [EOL]         s = new Assignment(name); [EOL]         assignments.put(name, s); [EOL]     } [EOL]     s.count++; [EOL] } <line_num>: 284,291
@Override [EOL] public int compare(Assignment a1, Assignment a2) { [EOL]     if (a1.count != a2.count) { [EOL]         return a2.count - a1.count; [EOL]     } [EOL]     return ORDER_OF_OCCURRENCE_COMPARATOR.compare(a1, a2); [EOL] } <line_num>: 300,308
@Override [EOL] public int compare(Assignment a1, Assignment a2) { [EOL]     return a1.orderOfOccurrence - a2.orderOfOccurrence; [EOL] } <line_num>: 317,320
@Override [EOL] public void process(Node externs, Node root) { [EOL]     assignmentLog = new StringBuilder(); [EOL]     NodeTraversal.traverse(compiler, externs, new ProcessVars(true)); [EOL]     NodeTraversal.traverse(compiler, root, new ProcessVars(false)); [EOL]     reservedNames.addAll(externNames); [EOL]     SortedSet<Assignment> varsByFrequency = new TreeSet<Assignment>(FREQUENCY_COMPARATOR); [EOL]     varsByFrequency.addAll(assignments.values()); [EOL]     if (shouldShadow) { [EOL]         new ShadowVariables(compiler, assignments, varsByFrequency, pseudoNameMap).process(externs, root); [EOL]     } [EOL]     if (prevUsedRenameMap != null) { [EOL]         reusePreviouslyUsedVariableMap(); [EOL]     } [EOL]     assignNames(varsByFrequency); [EOL]     boolean changed = false; [EOL]     for (Node n : globalNameNodes) { [EOL]         String newName = getNewGlobalName(n); [EOL]         if (newName != null) { [EOL]             n.setString(newName); [EOL]             changed = true; [EOL]         } [EOL]     } [EOL]     int count = 0; [EOL]     for (Node n : localNameNodes) { [EOL]         String newName = getNewLocalName(n); [EOL]         if (newName != null) { [EOL]             n.setString(newName); [EOL]             changed = true; [EOL]         } [EOL]         count++; [EOL]     } [EOL]     if (changed) { [EOL]         compiler.reportCodeChange(); [EOL]     } [EOL]     compiler.addToDebugLog("JS var assignments:\n" + assignmentLog); [EOL]     assignmentLog = null; [EOL] } <line_num>: 323,383
private String getNewGlobalName(Node n) { [EOL]     String oldName = n.getString(); [EOL]     Assignment a = assignments.get(oldName); [EOL]     if (a.newName != null && !a.newName.equals(oldName)) { [EOL]         if (pseudoNameMap != null) { [EOL]             return pseudoNameMap.get(n); [EOL]         } [EOL]         return a.newName; [EOL]     } else { [EOL]         return null; [EOL]     } [EOL] } <line_num>: 385,396
private String getNewLocalName(Node n) { [EOL]     String oldTempName = n.getString(); [EOL]     Assignment a = assignments.get(oldTempName); [EOL]     if (!a.newName.equals(oldTempName)) { [EOL]         if (pseudoNameMap != null) { [EOL]             return pseudoNameMap.get(n); [EOL]         } [EOL]         return a.newName; [EOL]     } [EOL]     return null; [EOL] } <line_num>: 398,408
private void recordPseudoName(Node n) { [EOL]     pseudoNameMap.put(n, '$' + n.getString() + "$$"); [EOL] } <line_num>: 410,414
private void reusePreviouslyUsedVariableMap() { [EOL]     for (Assignment a : assignments.values()) { [EOL]         String prevNewName = prevUsedRenameMap.lookupNewName(a.oldName); [EOL]         if (prevNewName == null || reservedNames.contains(prevNewName)) { [EOL]             continue; [EOL]         } [EOL]         if (a.oldName.startsWith(LOCAL_VAR_PREFIX) || (!externNames.contains(a.oldName) && prevNewName.startsWith(prefix))) { [EOL]             reservedNames.add(prevNewName); [EOL]             finalizeNameAssignment(a, prevNewName); [EOL]         } [EOL]     } [EOL] } <line_num>: 421,435
private void assignNames(Set<Assignment> varsToRename) { [EOL]     NameGenerator globalNameGenerator = new NameGenerator(reservedNames, prefix, reservedCharacters); [EOL]     NameGenerator localNameGenerator = prefix.isEmpty() ? globalNameGenerator : new NameGenerator(reservedNames, "", reservedCharacters); [EOL]     List<Assignment> pendingAssignments = new ArrayList<Assignment>(); [EOL]     List<String> generatedNamesForAssignments = new ArrayList<String>(); [EOL]     for (Assignment a : varsToRename) { [EOL]         if (a.newName != null) { [EOL]             continue; [EOL]         } [EOL]         if (externNames.contains(a.oldName)) { [EOL]             continue; [EOL]         } [EOL]         String newName; [EOL]         if (a.oldName.startsWith(LOCAL_VAR_PREFIX)) { [EOL]             newName = localNameGenerator.generateNextName(); [EOL]             finalizeNameAssignment(a, newName); [EOL]         } else { [EOL]             newName = globalNameGenerator.generateNextName(); [EOL]             pendingAssignments.add(a); [EOL]             generatedNamesForAssignments.add(newName); [EOL]         } [EOL]         reservedNames.add(newName); [EOL]     } [EOL]     int numPendingAssignments = generatedNamesForAssignments.size(); [EOL]     for (int i = 0; i < numPendingAssignments; ) { [EOL]         SortedSet<Assignment> varsByOrderOfOccurrence = new TreeSet<Assignment>(ORDER_OF_OCCURRENCE_COMPARATOR); [EOL]         int len = generatedNamesForAssignments.get(i).length(); [EOL]         for (int j = i; j < numPendingAssignments && generatedNamesForAssignments.get(j).length() == len; j++) { [EOL]             varsByOrderOfOccurrence.add(pendingAssignments.get(j)); [EOL]         } [EOL]         for (Assignment a : varsByOrderOfOccurrence) { [EOL]             finalizeNameAssignment(a, generatedNamesForAssignments.get(i)); [EOL]             ++i; [EOL]         } [EOL]     } [EOL] } <line_num>: 440,510
private void finalizeNameAssignment(Assignment a, String newName) { [EOL]     a.setNewName(newName); [EOL]     renameMap.put(a.oldName, newName); [EOL]     assignmentLog.append(a.oldName).append(" => ").append(newName).append('\n'); [EOL] } <line_num>: 515,523
VariableMap getVariableMap() { [EOL]     return new VariableMap(ImmutableMap.copyOf(renameMap)); [EOL] } <line_num>: 528,530
private boolean okToRenameVar(String name, boolean isLocal) { [EOL]     return !compiler.getCodingConvention().isExported(name, isLocal); [EOL] } <line_num>: 535,537
private int getLocalVarIndex(Var v) { [EOL]     int num = v.index; [EOL]     Scope s = v.scope.getParent(); [EOL]     if (s == null) { [EOL]         throw new IllegalArgumentException("Var is not local"); [EOL]     } [EOL]     boolean isBleedingIntoScope = s.getParent() != null && localBleedingFunctions.contains(v); [EOL]     while (s.getParent() != null) { [EOL]         if (isBleedingIntoScope) { [EOL]             num += localBleedingFunctionsPerScope.get(s).indexOf(v) + 1; [EOL]             isBleedingIntoScope = false; [EOL]         } else { [EOL]             num += localBleedingFunctionsPerScope.get(s).size(); [EOL]         } [EOL]         num += s.getVarCount(); [EOL]         s = s.getParent(); [EOL]     } [EOL]     return num; [EOL] } <line_num>: 544,566
