public CallGraph(AbstractCompiler compiler, boolean computeForwardGraph, boolean computeBackwardGraph) { [EOL]     Preconditions.checkArgument(computeForwardGraph || computeBackwardGraph); [EOL]     this.compiler = compiler; [EOL]     this.computeForwardGraph = computeForwardGraph; [EOL]     this.computeBackwardGraph = computeBackwardGraph; [EOL]     callsitesByNode = Maps.newLinkedHashMap(); [EOL]     functionsByNode = Maps.newLinkedHashMap(); [EOL] } <line_num>: 119,130
public CallGraph(AbstractCompiler compiler) { [EOL]     this(compiler, true, true); [EOL] } <line_num>: 135,137
private Function(Node functionAstNode) { [EOL]     astNode = functionAstNode; [EOL] } <line_num>: 616,618
private Callsite(Node callsiteAstNode) { [EOL]     astNode = callsiteAstNode; [EOL] } <line_num>: 742,744
@Override [EOL] public void process(Node externsRoot, Node jsRoot) { [EOL]     Preconditions.checkState(alreadyRun == false); [EOL]     DefinitionProvider definitionProvider = constructDefinitionProvider(externsRoot, jsRoot); [EOL]     createFunctionsAndCallsites(jsRoot, definitionProvider); [EOL]     fillInFunctionInformation(definitionProvider); [EOL]     alreadyRun = true; [EOL] } <line_num>: 143,155
public Function getFunctionForAstNode(Node functionNode) { [EOL]     Preconditions.checkArgument(functionNode.isFunction()); [EOL]     return functionsByNode.get(functionNode); [EOL] } <line_num>: 161,165
public Function getMainFunction() { [EOL]     return mainFunction; [EOL] } <line_num>: 170,172
public Collection<Function> getAllFunctions() { [EOL]     return functionsByNode.values(); [EOL] } <line_num>: 178,180
@Override [EOL] public boolean apply(Function function) { [EOL]     String functionName = function.getName(); [EOL]     if (functionName != null && desiredName != null) { [EOL]         return desiredName.equals(functionName); [EOL]     } else { [EOL]         return desiredName == functionName; [EOL]     } [EOL] } <line_num>: 192,203
@VisibleForTesting [EOL] public Function getUniqueFunctionWithName(final String desiredName) { [EOL]     Collection<Function> functions = Collections2.<Function>filter(getAllFunctions(), new Predicate<Function>() { [EOL]  [EOL]         @Override [EOL]         public boolean apply(Function function) { [EOL]             String functionName = function.getName(); [EOL]             if (functionName != null && desiredName != null) { [EOL]                 return desiredName.equals(functionName); [EOL]             } else { [EOL]                 return desiredName == functionName; [EOL]             } [EOL]         } [EOL]     }); [EOL]     if (functions.size() == 1) { [EOL]         return functions.iterator().next(); [EOL]     } else { [EOL]         throw new IllegalStateException("Found " + functions.size() + " functions with name " + desiredName); [EOL]     } [EOL] } <line_num>: 187,212
public Callsite getCallsiteForAstNode(Node callsiteNode) { [EOL]     Preconditions.checkArgument(callsiteNode.isCall() || callsiteNode.isNew()); [EOL]     return callsitesByNode.get(callsiteNode); [EOL] } <line_num>: 218,223
public Collection<Callsite> getAllCallsites() { [EOL]     return callsitesByNode.values(); [EOL] } <line_num>: 228,230
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     int nodeType = n.getType(); [EOL]     if (nodeType == Token.CALL || nodeType == Token.NEW) { [EOL]         Callsite callsite = createCallsite(n); [EOL]         Node containingFunctionNode = t.getScopeRoot(); [EOL]         Function containingFunction = functionsByNode.get(containingFunctionNode); [EOL]         if (containingFunction == null) { [EOL]             containingFunction = createFunction(containingFunctionNode); [EOL]         } [EOL]         callsite.containingFunction = containingFunction; [EOL]         containingFunction.addCallsiteInFunction(callsite); [EOL]         connectCallsiteToTargets(callsite, provider); [EOL]     } else if (n.isFunction()) { [EOL]         if (!functionsByNode.containsKey(n)) { [EOL]             createFunction(n); [EOL]         } [EOL]     } [EOL] } <line_num>: 242,267
private void createFunctionsAndCallsites(Node jsRoot, final DefinitionProvider provider) { [EOL]     mainFunction = createFunction(jsRoot); [EOL]     NodeTraversal.traverse(compiler, jsRoot, new AbstractPostOrderCallback() { [EOL]  [EOL]         @Override [EOL]         public void visit(NodeTraversal t, Node n, Node parent) { [EOL]             int nodeType = n.getType(); [EOL]             if (nodeType == Token.CALL || nodeType == Token.NEW) { [EOL]                 Callsite callsite = createCallsite(n); [EOL]                 Node containingFunctionNode = t.getScopeRoot(); [EOL]                 Function containingFunction = functionsByNode.get(containingFunctionNode); [EOL]                 if (containingFunction == null) { [EOL]                     containingFunction = createFunction(containingFunctionNode); [EOL]                 } [EOL]                 callsite.containingFunction = containingFunction; [EOL]                 containingFunction.addCallsiteInFunction(callsite); [EOL]                 connectCallsiteToTargets(callsite, provider); [EOL]             } else if (n.isFunction()) { [EOL]                 if (!functionsByNode.containsKey(n)) { [EOL]                     createFunction(n); [EOL]                 } [EOL]             } [EOL]         } [EOL]     }); [EOL] } <line_num>: 236,269
private Function createFunction(Node functionNode) { [EOL]     Function function = new Function(functionNode); [EOL]     functionsByNode.put(functionNode, function); [EOL]     return function; [EOL] } <line_num>: 277,282
private Callsite createCallsite(Node callsiteNode) { [EOL]     Callsite callsite = new Callsite(callsiteNode); [EOL]     callsitesByNode.put(callsiteNode, callsite); [EOL]     return callsite; [EOL] } <line_num>: 284,289
private void connectCallsiteToTargets(Callsite callsite, DefinitionProvider definitionProvider) { [EOL]     Collection<Definition> definitions = lookupDefinitionsForTargetsOfCall(callsite.getAstNode(), definitionProvider); [EOL]     if (definitions == null) { [EOL]         callsite.hasUnknownTarget = true; [EOL]     } else { [EOL]         for (Definition definition : definitions) { [EOL]             if (definition.isExtern()) { [EOL]                 callsite.hasExternTarget = true; [EOL]             } else { [EOL]                 Node target = definition.getRValue(); [EOL]                 if (target != null && target.isFunction()) { [EOL]                     Function targetFunction = functionsByNode.get(target); [EOL]                     if (targetFunction == null) { [EOL]                         targetFunction = createFunction(target); [EOL]                     } [EOL]                     if (computeForwardGraph) { [EOL]                         callsite.addPossibleTarget(targetFunction); [EOL]                     } [EOL]                     if (computeBackwardGraph) { [EOL]                         targetFunction.addCallsitePossiblyTargetingFunction(callsite); [EOL]                     } [EOL]                 } else { [EOL]                     callsite.hasUnknownTarget = true; [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 306,341
private void fillInFunctionInformation(DefinitionProvider provider) { [EOL]     if (useNameReferenceGraph) { [EOL]         NameReferenceGraph referenceGraph = (NameReferenceGraph) provider; [EOL]         for (Function function : getAllFunctions()) { [EOL]             if (!function.isMain()) { [EOL]                 String functionName = function.getName(); [EOL]                 if (functionName != null) { [EOL]                     Name symbol = referenceGraph.getSymbol(functionName); [EOL]                     updateFunctionForName(function, symbol); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } else { [EOL]         SimpleDefinitionFinder finder = (SimpleDefinitionFinder) provider; [EOL]         for (DefinitionSite definitionSite : finder.getDefinitionSites()) { [EOL]             Definition definition = definitionSite.definition; [EOL]             Function function = lookupFunctionForDefinition(definition); [EOL]             if (function != null) { [EOL]                 for (UseSite useSite : finder.getUseSites(definition)) { [EOL]                     updateFunctionForUse(function, useSite.node); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 352,381
private void updateFunctionForName(Function function, Name name) { [EOL]     if (name.isAliased()) { [EOL]         function.isAliased = true; [EOL]     } [EOL]     if (name.exposedToCallOrApply()) { [EOL]         function.isExposedToCallOrApply = true; [EOL]     } [EOL] } <line_num>: 390,398
private void updateFunctionForUse(Function function, Node useNode) { [EOL]     Node useParent = useNode.getParent(); [EOL]     int parentType = useParent.getType(); [EOL]     if ((parentType == Token.CALL || parentType == Token.NEW) && useParent.getFirstChild() == useNode) { [EOL]     } else if (NodeUtil.isGet(useParent)) { [EOL]         if (useParent.isGetProp()) { [EOL]             Node gramps = useParent.getParent(); [EOL]             if (NodeUtil.isFunctionObjectApply(gramps) || NodeUtil.isFunctionObjectCall(gramps)) { [EOL]                 function.isExposedToCallOrApply = true; [EOL]             } [EOL]         } [EOL]     } else { [EOL]         function.isAliased = true; [EOL]     } [EOL] } <line_num>: 407,428
private Function lookupFunctionForDefinition(Definition definition) { [EOL]     if (definition != null && !definition.isExtern()) { [EOL]         Node rValue = definition.getRValue(); [EOL]         if (rValue != null && rValue.isFunction()) { [EOL]             Function function = functionsByNode.get(rValue); [EOL]             Preconditions.checkNotNull(function); [EOL]             return function; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 434,447
public DiGraph<Function, Callsite> getForwardDirectedGraph() { [EOL]     return constructDirectedGraph(true); [EOL] } <line_num>: 456,458
public DiGraph<Function, Callsite> getBackwardDirectedGraph() { [EOL]     return constructDirectedGraph(false); [EOL] } <line_num>: 467,469
private static void digraphConnect(DiGraph<Function, Callsite> digraph, Function caller, Callsite callsite, Function callee, boolean forward) { [EOL]     Function source; [EOL]     Function destination; [EOL]     if (forward) { [EOL]         source = caller; [EOL]         destination = callee; [EOL]     } else { [EOL]         source = callee; [EOL]         destination = caller; [EOL]     } [EOL]     digraph.connect(source, callsite, destination); [EOL] } <line_num>: 471,489
private DiGraph<Function, Callsite> constructDirectedGraph(boolean forward) { [EOL]     DiGraph<Function, Callsite> digraph = LinkedDirectedGraph.createWithoutAnnotations(); [EOL]     for (Function function : getAllFunctions()) { [EOL]         digraph.createNode(function); [EOL]     } [EOL]     if (computeForwardGraph) { [EOL]         for (Function caller : getAllFunctions()) { [EOL]             for (Callsite callsite : caller.getCallsitesInFunction()) { [EOL]                 for (Function callee : callsite.getPossibleTargets()) { [EOL]                     digraphConnect(digraph, caller, callsite, callee, forward); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } else { [EOL]         for (Function callee : getAllFunctions()) { [EOL]             for (Callsite callsite : callee.getCallsitesPossiblyTargetingFunction()) { [EOL]                 Function caller = callsite.getContainingFunction(); [EOL]                 digraphConnect(digraph, caller, callsite, callee, forward); [EOL]             } [EOL]         } [EOL]     } [EOL]     return digraph; [EOL] } <line_num>: 502,535
private DefinitionProvider constructDefinitionProvider(Node externsRoot, Node jsRoot) { [EOL]     if (useNameReferenceGraph) { [EOL]         NameReferenceGraphConstruction graphConstruction = new NameReferenceGraphConstruction(compiler); [EOL]         graphConstruction.process(externsRoot, jsRoot); [EOL]         return graphConstruction.getNameReferenceGraph(); [EOL]     } else { [EOL]         SimpleDefinitionFinder defFinder = new SimpleDefinitionFinder(compiler); [EOL]         defFinder.process(externsRoot, jsRoot); [EOL]         return defFinder; [EOL]     } [EOL] } <line_num>: 550,565
private Collection<Definition> lookupDefinitionsForTargetsOfCall(Node callsite, DefinitionProvider definitionProvider) { [EOL]     Preconditions.checkArgument(callsite.isCall() || callsite.isNew()); [EOL]     Node targetExpression = callsite.getFirstChild(); [EOL]     if (!useNameReferenceGraph || (targetExpression.isGetProp() || targetExpression.isName())) { [EOL]         Collection<Definition> definitions = definitionProvider.getDefinitionsReferencedAt(targetExpression); [EOL]         if (definitions != null && !definitions.isEmpty()) { [EOL]             return definitions; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 575,597
public boolean isMain() { [EOL]     return (this == CallGraph.this.mainFunction); [EOL] } <line_num>: 623,625
public Node getAstNode() { [EOL]     return astNode; [EOL] } <line_num>: 632,634
public Node getBodyNode() { [EOL]     if (isMain()) { [EOL]         return astNode; [EOL]     } else { [EOL]         return NodeUtil.getFunctionBody(astNode); [EOL]     } [EOL] } <line_num>: 640,646
public String getName() { [EOL]     if (isMain()) { [EOL]         return MAIN_FUNCTION_NAME; [EOL]     } else { [EOL]         return NodeUtil.getFunctionName(astNode); [EOL]     } [EOL] } <line_num>: 652,658
public Collection<Callsite> getCallsitesInFunction() { [EOL]     if (callsitesInFunction != null) { [EOL]         return callsitesInFunction; [EOL]     } else { [EOL]         return ImmutableList.of(); [EOL]     } [EOL] } <line_num>: 663,669
private void addCallsiteInFunction(Callsite callsite) { [EOL]     if (callsitesInFunction == null) { [EOL]         callsitesInFunction = new LinkedList<Callsite>(); [EOL]     } [EOL]     callsitesInFunction.add(callsite); [EOL] } <line_num>: 671,676
public Collection<Callsite> getCallsitesPossiblyTargetingFunction() { [EOL]     if (computeBackwardGraph) { [EOL]         if (callsitesPossiblyTargetingFunction != null) { [EOL]             return callsitesPossiblyTargetingFunction; [EOL]         } else { [EOL]             return ImmutableList.of(); [EOL]         } [EOL]     } else { [EOL]         throw new UnsupportedOperationException("Cannot call " + "getCallsitesPossiblyTargetingFunction() on a Function " + "from a non-backward CallGraph"); [EOL]     } [EOL] } <line_num>: 689,701
private void addCallsitePossiblyTargetingFunction(Callsite callsite) { [EOL]     Preconditions.checkState(computeBackwardGraph); [EOL]     if (callsitesPossiblyTargetingFunction == null) { [EOL]         callsitesPossiblyTargetingFunction = new LinkedList<Callsite>(); [EOL]     } [EOL]     callsitesPossiblyTargetingFunction.add(callsite); [EOL] } <line_num>: 703,710
public boolean isAliased() { [EOL]     return isAliased; [EOL] } <line_num>: 715,717
public boolean isExposedToCallOrApply() { [EOL]     return isExposedToCallOrApply; [EOL] } <line_num>: 722,724
public Node getAstNode() { [EOL]     return astNode; [EOL] } <line_num>: 746,748
public Function getContainingFunction() { [EOL]     return containingFunction; [EOL] } <line_num>: 750,752
public Collection<Function> getPossibleTargets() { [EOL]     if (computeForwardGraph) { [EOL]         if (possibleTargets != null) { [EOL]             return possibleTargets; [EOL]         } else { [EOL]             return ImmutableList.of(); [EOL]         } [EOL]     } else { [EOL]         throw new UnsupportedOperationException("Cannot call " + "getPossibleTargets() on a Callsite from a non-forward " + "CallGraph"); [EOL]     } [EOL] } <line_num>: 768,780
private void addPossibleTarget(Function target) { [EOL]     Preconditions.checkState(computeForwardGraph); [EOL]     if (possibleTargets == null) { [EOL]         possibleTargets = new LinkedList<Function>(); [EOL]     } [EOL]     possibleTargets.add(target); [EOL] } <line_num>: 782,789
public boolean hasUnknownTarget() { [EOL]     return hasUnknownTarget; [EOL] } <line_num>: 798,800
public boolean hasExternTarget() { [EOL]     return hasExternTarget; [EOL] } <line_num>: 806,808
