public WhitelistWarningsGuard(Set<String> whitelist) { [EOL]     Preconditions.checkNotNull(whitelist); [EOL]     this.whitelist = normalizeWhitelist(whitelist); [EOL] } <line_num>: 70,73
private static Set<String> normalizeWhitelist(Set<String> whitelist) { [EOL]     Set<String> result = Sets.newHashSet(); [EOL]     for (String line : whitelist) { [EOL]         String trimmed = line.trim(); [EOL]         if (trimmed.isEmpty() || trimmed.charAt(0) == '#') { [EOL]             continue; [EOL]         } [EOL]         result.add(LINE_NUMBER.matcher(trimmed).replaceFirst(":")); [EOL]     } [EOL]     return ImmutableSet.copyOf(result); [EOL] } <line_num>: 81,94
@Override [EOL] public CheckLevel level(JSError error) { [EOL]     if (containWarning(formatWarning(error))) { [EOL]         return CheckLevel.WARNING; [EOL]     } [EOL]     return null; [EOL] } <line_num>: 96,106
protected boolean containWarning(String formattedWarning) { [EOL]     return whitelist.contains(formattedWarning); [EOL] } <line_num>: 114,116
@Override [EOL] public int getPriority() { [EOL]     return WarningsGuard.Priority.SUPPRESS_BY_WHITELIST.getValue(); [EOL] } <line_num>: 118,121
public static WhitelistWarningsGuard fromFile(File file) { [EOL]     return new WhitelistWarningsGuard(loadWhitelistedJsWarnings(file)); [EOL] } <line_num>: 124,126
public static Set<String> loadWhitelistedJsWarnings(File file) { [EOL]     return loadWhitelistedJsWarnings(Files.newReaderSupplier(file, Charsets.UTF_8)); [EOL] } <line_num>: 132,135
protected static Set<String> loadWhitelistedJsWarnings(InputSupplier<? extends Reader> supplier) { [EOL]     try { [EOL]         return loadWhitelistedJsWarnings(supplier.getInput()); [EOL]     } catch (IOException e) { [EOL]         throw new RuntimeException(e); [EOL]     } [EOL] } <line_num>: 141,148
static Set<String> loadWhitelistedJsWarnings(Reader reader) throws IOException { [EOL]     Preconditions.checkNotNull(reader); [EOL]     Set<String> result = Sets.newHashSet(); [EOL]     for (String line : CharStreams.readLines(reader)) { [EOL]         result.add(line); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 155,165
public static String formatWarning(JSError error) { [EOL]     return formatWarning(error, false); [EOL] } <line_num>: 167,169
public static String formatWarning(JSError error, boolean withMetaData) { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append(error.sourceName).append(":"); [EOL]     if (withMetaData) { [EOL]         sb.append(error.lineNumber); [EOL]     } [EOL]     List<String> lines = ImmutableList.copyOf(LINE_SPLITTER.split(error.description)); [EOL]     sb.append("  ").append(lines.get(0)); [EOL]     if (withMetaData) { [EOL]         for (int i = 1; i < lines.size(); i++) { [EOL]             sb.append("\n# ").append(lines.get(i)); [EOL]         } [EOL]         sb.append("\n"); [EOL]     } [EOL]     return sb.toString(); [EOL] } <line_num>: 175,194
public static String getFirstLine(String warning) { [EOL]     int lineLength = warning.indexOf('\n'); [EOL]     if (lineLength > 0) { [EOL]         warning = warning.substring(0, lineLength); [EOL]     } [EOL]     return warning; [EOL] } <line_num>: 196,202
public WhitelistBuilder setProductName(String name) { [EOL]     this.productName = name; [EOL]     return this; [EOL] } <line_num>: 211,214
public WhitelistBuilder setGeneratorTarget(String name) { [EOL]     this.generatorTarget = name; [EOL]     return this; [EOL] } <line_num>: 217,220
public WhitelistBuilder setNote(String note) { [EOL]     this.headerNote = note; [EOL]     return this; [EOL] } <line_num>: 223,226
@Deprecated [EOL] public WhitelistBuilder setWithLineNumber(boolean line) { [EOL]     return this; [EOL] } <line_num>: 229,232
@Override [EOL] public void report(CheckLevel level, JSError error) { [EOL]     warnings.add(error); [EOL] } <line_num>: 234,237
public void writeWhitelist(File out) throws IOException { [EOL]     PrintStream stream = new PrintStream(out); [EOL]     appendWhitelist(stream); [EOL]     stream.close(); [EOL] } <line_num>: 243,247
public void appendWhitelist(PrintStream out) { [EOL]     out.append("# This is a list of legacy warnings that have yet to be fixed.\n"); [EOL]     if (productName != null) { [EOL]         out.append("# Please find some time and fix at least one of them " + "and it will be the happiest day for " + productName + ".\n"); [EOL]     } [EOL]     if (generatorTarget != null) { [EOL]         out.append("# When you fix any of these warnings, run " + generatorTarget + " task.\n"); [EOL]     } [EOL]     if (headerNote != null) { [EOL]         out.append("#" + Joiner.on("\n# ").join(Splitter.on("\n").split(headerNote)) + "\n"); [EOL]     } [EOL]     Multimap<DiagnosticType, String> warningsByType = TreeMultimap.create(); [EOL]     for (JSError warning : warnings) { [EOL]         warningsByType.put(warning.getType(), formatWarning(warning, true)); [EOL]     } [EOL]     for (DiagnosticType type : warningsByType.keySet()) { [EOL]         out.append("\n# Warning ").append(type.key).append(": ").println(Iterables.get(LINE_SPLITTER.split(type.format.toPattern()), 0)); [EOL]         for (String warning : warningsByType.get(type)) { [EOL]             out.println(warning); [EOL]         } [EOL]     } [EOL]     out.flush(); [EOL] } <line_num>: 253,292
