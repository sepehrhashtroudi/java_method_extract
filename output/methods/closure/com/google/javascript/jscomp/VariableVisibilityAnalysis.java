public VariableVisibilityAnalysis(AbstractCompiler compiler) { [EOL]     this.compiler = compiler; [EOL]     visibilityByDeclaringNameNode = Maps.newHashMap(); [EOL] } <line_num>: 67,71
public VariableVisibility getVariableVisibility(Node declaringNameNode) { [EOL]     Node parent = declaringNameNode.getParent(); [EOL]     Preconditions.checkArgument(parent.isVar() || parent.isFunction() || parent.isParamList()); [EOL]     return visibilityByDeclaringNameNode.get(declaringNameNode); [EOL] } <line_num>: 96,104
@Override [EOL] public void process(Node externs, Node root) { [EOL]     ReferenceCollectingCallback callback = new ReferenceCollectingCallback(compiler, ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR); [EOL]     NodeTraversal.traverse(compiler, root, callback); [EOL]     for (Var variable : callback.getAllSymbols()) { [EOL]         ReferenceCollection referenceCollection = callback.getReferences(variable); [EOL]         VariableVisibility visibility; [EOL]         if (variableIsParameter(variable)) { [EOL]             visibility = VariableVisibility.PARAMETER; [EOL]         } else if (variable.isLocal()) { [EOL]             if (referenceCollection.isEscaped()) { [EOL]                 visibility = VariableVisibility.CAPTURED_LOCAL; [EOL]             } else { [EOL]                 visibility = VariableVisibility.LOCAL; [EOL]             } [EOL]         } else if (variable.isGlobal()) { [EOL]             visibility = VariableVisibility.GLOBAL; [EOL]         } else { [EOL]             throw new IllegalStateException("Un-handled variable visibility for " + variable); [EOL]         } [EOL]         visibilityByDeclaringNameNode.put(variable.getNameNode(), visibility); [EOL]     } [EOL] } <line_num>: 109,140
private static boolean variableIsParameter(Var variable) { [EOL]     Node variableParent = variable.getParentNode(); [EOL]     return variableParent != null && variableParent.isParamList(); [EOL] } <line_num>: 145,149
