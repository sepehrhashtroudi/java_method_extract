NameReferenceGraphReport(NameReferenceGraph g) { [EOL]     this.graph = g; [EOL] } <line_num>: 54,56
public String getHtmlReport() { [EOL]     StringBuilder builder = new StringBuilder(); [EOL]     List<DiGraphNode<Name, Reference>> nodes = Lists.newArrayList(graph.getDirectedGraphNodes()); [EOL]     generateHtmlReportHeader(builder); [EOL]     builder.append("<h1>Name Reference Graph Dump</h1>\n"); [EOL]     builder.append("OVERALL STATS\n"); [EOL]     builder.append("<ul>\n"); [EOL]     builder.append("<li>Total names: " + nodes.size()); [EOL]     builder.append("</ul>\n"); [EOL]     builder.append("ALL NAMES\n"); [EOL]     builder.append("<UL>\n"); [EOL]     Collections.sort(nodes, new DiGraphNodeComparator()); [EOL]     for (DiGraphNode<Name, Reference> n : nodes) { [EOL]         generateDeclarationReport(builder, n); [EOL]         List<DiGraphEdge<Name, Reference>> outEdges = graph.getOutEdges(n.getValue()); [EOL]         List<DiGraphEdge<Name, Reference>> inEdges = graph.getInEdges(n.getValue()); [EOL]         if (!outEdges.isEmpty() || !inEdges.isEmpty()) { [EOL]             builder.append("<ul>"); [EOL]             if (outEdges.size() > 0) { [EOL]                 builder.append("<li>REFERS TO:<br>\n"); [EOL]                 builder.append("<ul>"); [EOL]                 for (DiGraphEdge<Name, Reference> edge : outEdges) { [EOL]                     generateEdgeReport(builder, edge.getDestination().getValue(), edge); [EOL]                 } [EOL]                 builder.append("</ul>\n"); [EOL]             } [EOL]             if (inEdges.size() > 0) { [EOL]                 builder.append("<li>REFERENCED BY:<br>\n"); [EOL]                 builder.append("<ul>"); [EOL]                 for (DiGraphEdge<Name, Reference> edge : inEdges) { [EOL]                     generateEdgeReport(builder, edge.getSource().getValue(), edge); [EOL]                 } [EOL]                 builder.append("</ul>"); [EOL]             } [EOL]             builder.append("</ul>\n"); [EOL]         } [EOL]     } [EOL]     builder.append("</ul>\n"); [EOL]     generateHtmlReportFooter(builder); [EOL]     return builder.toString(); [EOL] } <line_num>: 71,130
private String getSourceFile(Node node) { [EOL]     String filename = node.getSourceFileName(); [EOL]     if (filename == null) { [EOL]         return ""; [EOL]     } [EOL]     return filename; [EOL] } <line_num>: 139,145
private void generateDeclarationReport(StringBuilder builder, DiGraphNode<Name, Reference> declarationNode) { [EOL]     String declName = declarationNode.getValue().getQualifiedName(); [EOL]     JSType declType = declarationNode.getValue().getType(); [EOL]     builder.append("<LI> "); [EOL]     builder.append("<A NAME=\"" + declName + "\">"); [EOL]     builder.append(declName); [EOL]     builder.append("\n"); [EOL]     generateType(builder, declType); [EOL]     List<DefinitionsRemover.Definition> defs = declarationNode.getValue().getDeclarations(); [EOL]     if (defs.size() == 0) { [EOL]         builder.append("<br>No definitions found<br>"); [EOL]     } else { [EOL]         builder.append("<ul>"); [EOL]         for (DefinitionsRemover.Definition def : defs) { [EOL]             Node fnDef = def.getRValue(); [EOL]             String sourceFileName = getSourceFile(fnDef); [EOL]             builder.append("<li> Defined: "); [EOL]             generateSourceReferenceLink(builder, sourceFileName, fnDef.getLineno(), fnDef.getCharno()); [EOL]         } [EOL]         builder.append("</ul>"); [EOL]     } [EOL] } <line_num>: 152,189
private void generateHtmlReportHeader(StringBuilder builder) { [EOL]     builder.append("<!DOCTYPE html>\n" + "<html>" + "<head>" + "<meta http-equiv=\"Content-Type\" " + "content=\"text/html;charset=utf-8\" >" + "<title>Name Reference Graph Dump</title>" + "<style type=\"text/css\">body, td, "); [EOL]     builder.append("p {font-family: Arial; font-size: 83%} "); [EOL]     builder.append("ul {margin-top:2px; margin-left:0px; padding-left:1em;}"); [EOL]     builder.append("li {margin-top:3px; margin-left:24px;" + "padding-left:0px;padding-bottom: 4px}"); [EOL]     builder.append("</style></head><body>\n"); [EOL] } <line_num>: 197,210
private void generateHtmlReportFooter(StringBuilder builder) { [EOL]     builder.append("</body></html>"); [EOL] } <line_num>: 215,217
private void generateEdgeReport(StringBuilder builder, Name referencedDecl, DiGraphEdge<Name, Reference> edge) { [EOL]     String srcDeclName = referencedDecl.getQualifiedName(); [EOL]     builder.append("<li><A HREF=\"#" + srcDeclName + "\">"); [EOL]     builder.append(srcDeclName); [EOL]     builder.append("</a> "); [EOL]     Node def = edge.getValue().getSite(); [EOL]     int lineNumber = def.getLineno(); [EOL]     int columnNumber = def.getCharno(); [EOL]     String sourceFile = getSourceFile(def); [EOL]     generateSourceReferenceLink(builder, sourceFile, lineNumber, columnNumber); [EOL]     JSType defType = edge.getValue().getSite().getJSType(); [EOL]     generateType(builder, defType); [EOL] } <line_num>: 228,244
private void generateSourceReferenceLink(StringBuilder builder, String sourceFile, int lineNumber, int columnNumber) { [EOL]     assert (sourceFile != null); [EOL]     builder.append("("); [EOL]     builder.append(sourceFile + ":" + lineNumber + "," + columnNumber); [EOL]     builder.append(")"); [EOL] } <line_num>: 256,269
private void generateType(StringBuilder builder, JSType defType) { [EOL]     if (defType == null) { [EOL]         builder.append(" (type: null) "); [EOL]     } else if (defType.isUnknownType()) { [EOL]         builder.append(" (type: unknown) "); [EOL]     } else { [EOL]         builder.append(" (type: " + defType.toString() + ") "); [EOL]     } [EOL] } <line_num>: 277,286
@Override [EOL] public int compare(DiGraphNode<Name, Reference> node1, DiGraphNode<Name, Reference> node2) { [EOL]     Preconditions.checkNotNull(node1.getValue()); [EOL]     Preconditions.checkNotNull(node2.getValue()); [EOL]     if ((node1.getValue().getQualifiedName() == null) && (node2.getValue().getQualifiedName() == null)) { [EOL]         return 0; [EOL]     } [EOL]     if (node1.getValue().getQualifiedName() == null) { [EOL]         return -1; [EOL]     } [EOL]     if (node2.getValue().getQualifiedName() == null) { [EOL]         return 1; [EOL]     } [EOL]     return node1.getValue().getQualifiedName().compareTo(node2.getValue().getQualifiedName()); [EOL] } <line_num>: 295,318
