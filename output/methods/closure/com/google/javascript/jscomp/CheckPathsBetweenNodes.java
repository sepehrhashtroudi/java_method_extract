CheckPathsBetweenNodes(DiGraph<N, E> graph, DiGraphNode<N, E> a, DiGraphNode<N, E> b, Predicate<N> nodePredicate, Predicate<DiGraphEdge<N, E>> edgePredicate, boolean inclusive) { [EOL]     this.graph = graph; [EOL]     this.start = a; [EOL]     this.end = b; [EOL]     this.nodePredicate = nodePredicate; [EOL]     this.edgePredicate = edgePredicate; [EOL]     this.inclusive = inclusive; [EOL] } <line_num>: 85,94
CheckPathsBetweenNodes(DiGraph<N, E> graph, DiGraphNode<N, E> a, DiGraphNode<N, E> b, Predicate<N> nodePredicate, Predicate<DiGraphEdge<N, E>> edgePredicate) { [EOL]     this(graph, a, b, nodePredicate, edgePredicate, true); [EOL] } <line_num>: 99,103
public boolean allPathsSatisfyPredicate() { [EOL]     setUp(); [EOL]     boolean result = checkAllPathsWithoutBackEdges(start, end); [EOL]     tearDown(); [EOL]     return result; [EOL] } <line_num>: 110,115
public boolean somePathsSatisfyPredicate() { [EOL]     setUp(); [EOL]     boolean result = checkSomePathsWithoutBackEdges(start, end); [EOL]     tearDown(); [EOL]     return result; [EOL] } <line_num>: 121,126
private void setUp() { [EOL]     graph.pushNodeAnnotations(); [EOL]     graph.pushEdgeAnnotations(); [EOL]     discoverBackEdges(this.start); [EOL] } <line_num>: 128,132
private void tearDown() { [EOL]     graph.popNodeAnnotations(); [EOL]     graph.popEdgeAnnotations(); [EOL] } <line_num>: 134,137
private void discoverBackEdges(DiGraphNode<N, E> u) { [EOL]     u.setAnnotation(GRAY); [EOL]     for (DiGraphEdge<N, E> e : u.getOutEdges()) { [EOL]         if (ignoreEdge(e)) { [EOL]             continue; [EOL]         } [EOL]         DiGraphNode<N, E> v = e.getDestination(); [EOL]         if (v.getAnnotation() == WHITE) { [EOL]             discoverBackEdges(v); [EOL]         } else if (v.getAnnotation() == GRAY) { [EOL]             e.setAnnotation(BACK_EDGE); [EOL]         } [EOL]     } [EOL]     u.setAnnotation(BLACK); [EOL] } <line_num>: 139,153
private boolean ignoreEdge(DiGraphEdge<N, E> e) { [EOL]     return !edgePredicate.apply(e); [EOL] } <line_num>: 155,157
private boolean checkAllPathsWithoutBackEdges(DiGraphNode<N, E> a, DiGraphNode<N, E> b) { [EOL]     if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) { [EOL]         return true; [EOL]     } [EOL]     if (a == b) { [EOL]         return false; [EOL]     } [EOL]     for (DiGraphEdge<N, E> e : a.getOutEdges()) { [EOL]         if (e.getAnnotation() == VISITED_EDGE) { [EOL]             continue; [EOL]         } [EOL]         e.setAnnotation(VISITED_EDGE); [EOL]         if (ignoreEdge(e)) { [EOL]             continue; [EOL]         } [EOL]         if (e.getAnnotation() == BACK_EDGE) { [EOL]             continue; [EOL]         } [EOL]         DiGraphNode<N, E> next = e.getDestination(); [EOL]         if (!checkAllPathsWithoutBackEdges(next, b)) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 163,193
private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a, DiGraphNode<N, E> b) { [EOL]     if (nodePredicate.apply(a.getValue()) && (inclusive || (a != start && a != end))) { [EOL]         return true; [EOL]     } [EOL]     if (a == b) { [EOL]         return false; [EOL]     } [EOL]     for (DiGraphEdge<N, E> e : a.getOutEdges()) { [EOL]         if (e.getAnnotation() == VISITED_EDGE) { [EOL]             continue; [EOL]         } [EOL]         e.setAnnotation(VISITED_EDGE); [EOL]         if (ignoreEdge(e)) { [EOL]             continue; [EOL]         } [EOL]         if (e.getAnnotation() == BACK_EDGE) { [EOL]             continue; [EOL]         } [EOL]         DiGraphNode<N, E> next = e.getDestination(); [EOL]         if (checkSomePathsWithoutBackEdges(next, b)) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 199,229
