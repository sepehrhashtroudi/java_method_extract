public CompileTask() { [EOL]     this.languageIn = CompilerOptions.LanguageMode.ECMASCRIPT3; [EOL]     this.warningLevel = WarningLevel.DEFAULT; [EOL]     this.debugOptions = false; [EOL]     this.compilationLevel = CompilationLevel.SIMPLE_OPTIMIZATIONS; [EOL]     this.customExternsOnly = false; [EOL]     this.manageDependencies = false; [EOL]     this.prettyPrint = false; [EOL]     this.printInputDelimiter = false; [EOL]     this.generateExports = false; [EOL]     this.replaceProperties = false; [EOL]     this.forceRecompile = false; [EOL]     this.replacePropertiesPrefix = "closure.define."; [EOL]     this.defineParams = Lists.newLinkedList(); [EOL]     this.externFileLists = Lists.newLinkedList(); [EOL]     this.sourceFileLists = Lists.newLinkedList(); [EOL]     this.sourcePaths = Lists.newLinkedList(); [EOL]     this.warnings = Lists.newLinkedList(); [EOL] } <line_num>: 80,98
public void setLanguageIn(String value) { [EOL]     if (value.equals("ECMASCRIPT5_STRICT") || value.equals("ES5_STRICT")) { [EOL]         this.languageIn = CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT; [EOL]     } else if (value.equals("ECMASCRIPT5") || value.equals("ES5")) { [EOL]         this.languageIn = CompilerOptions.LanguageMode.ECMASCRIPT5; [EOL]     } else if (value.equals("ECMASCRIPT3") || value.equals("ES3")) { [EOL]         this.languageIn = CompilerOptions.LanguageMode.ECMASCRIPT3; [EOL]     } else { [EOL]         throw new BuildException("Unrecognized 'languageIn' option value (" + value + ")"); [EOL]     } [EOL] } <line_num>: 105,116
public void setWarning(String value) { [EOL]     if ("default".equalsIgnoreCase(value)) { [EOL]         this.warningLevel = WarningLevel.DEFAULT; [EOL]     } else if ("quiet".equalsIgnoreCase(value)) { [EOL]         this.warningLevel = WarningLevel.QUIET; [EOL]     } else if ("verbose".equalsIgnoreCase(value)) { [EOL]         this.warningLevel = WarningLevel.VERBOSE; [EOL]     } else { [EOL]         throw new BuildException("Unrecognized 'warning' option value (" + value + ")"); [EOL]     } [EOL] } <line_num>: 122,133
public void setDebug(boolean value) { [EOL]     this.debugOptions = value; [EOL] } <line_num>: 139,141
public void setCompilationLevel(String value) { [EOL]     if ("simple".equalsIgnoreCase(value)) { [EOL]         this.compilationLevel = CompilationLevel.SIMPLE_OPTIMIZATIONS; [EOL]     } else if ("advanced".equalsIgnoreCase(value)) { [EOL]         this.compilationLevel = CompilationLevel.ADVANCED_OPTIMIZATIONS; [EOL]     } else if ("whitespace".equalsIgnoreCase(value)) { [EOL]         this.compilationLevel = CompilationLevel.WHITESPACE_ONLY; [EOL]     } else { [EOL]         throw new BuildException("Unrecognized 'compilation' option value (" + value + ")"); [EOL]     } [EOL] } <line_num>: 148,159
public void setManageDependencies(boolean value) { [EOL]     this.manageDependencies = value; [EOL] } <line_num>: 161,163
public void setCustomExternsOnly(boolean value) { [EOL]     this.customExternsOnly = value; [EOL] } <line_num>: 168,170
public void setOutput(File value) { [EOL]     this.outputFile = value; [EOL] } <line_num>: 175,177
public void setReplacePropertiesPrefix(String value) { [EOL]     this.replacePropertiesPrefix = value; [EOL] } <line_num>: 182,184
public void setReplaceProperties(boolean value) { [EOL]     this.replaceProperties = value; [EOL] } <line_num>: 189,191
public void setEncoding(String encoding) { [EOL]     this.encoding = encoding; [EOL] } <line_num>: 196,198
public void setOutputEncoding(String outputEncoding) { [EOL]     this.outputEncoding = outputEncoding; [EOL] } <line_num>: 203,205
public void setPrettyPrint(boolean pretty) { [EOL]     this.prettyPrint = pretty; [EOL] } <line_num>: 210,212
public void setPrintInputDelimiter(boolean print) { [EOL]     this.printInputDelimiter = print; [EOL] } <line_num>: 217,219
public void setForceRecompile(boolean forceRecompile) { [EOL]     this.forceRecompile = forceRecompile; [EOL] } <line_num>: 224,226
public void setGenerateExports(boolean generateExports) { [EOL]     this.generateExports = generateExports; [EOL] } <line_num>: 231,233
public void addExterns(FileList list) { [EOL]     this.externFileLists.add(list); [EOL] } <line_num>: 238,240
public void addWarning(Warning warning) { [EOL]     this.warnings.add(warning); [EOL] } <line_num>: 250,252
public void addSources(FileList list) { [EOL]     this.sourceFileLists.add(list); [EOL] } <line_num>: 257,259
public void addPath(Path list) { [EOL]     this.sourcePaths.add(list); [EOL] } <line_num>: 264,266
@Override [EOL] public void execute() { [EOL]     if (this.outputFile == null) { [EOL]         throw new BuildException("outputFile attribute must be set"); [EOL]     } [EOL]     Compiler.setLoggingLevel(Level.OFF); [EOL]     CompilerOptions options = createCompilerOptions(); [EOL]     Compiler compiler = createCompiler(options); [EOL]     List<SourceFile> externs = findExternFiles(); [EOL]     List<SourceFile> sources = findSourceFiles(); [EOL]     if (isStale() || forceRecompile) { [EOL]         log("Compiling " + sources.size() + " file(s) with " + externs.size() + " extern(s)"); [EOL]         Result result = compiler.compile(externs, sources, options); [EOL]         if (result.success) { [EOL]             writeResult(compiler.toSource()); [EOL]         } else { [EOL]             throw new BuildException("Compilation failed."); [EOL]         } [EOL]     } else { [EOL]         log("None of the files changed. Compilation skipped."); [EOL]     } [EOL] } <line_num>: 268,295
private CompilerOptions createCompilerOptions() { [EOL]     CompilerOptions options = new CompilerOptions(); [EOL]     this.compilationLevel.setOptionsForCompilationLevel(options); [EOL]     if (this.debugOptions) { [EOL]         this.compilationLevel.setDebugOptionsForCompilationLevel(options); [EOL]     } [EOL]     options.prettyPrint = this.prettyPrint; [EOL]     options.printInputDelimiter = this.printInputDelimiter; [EOL]     options.generateExports = this.generateExports; [EOL]     options.setLanguageIn(this.languageIn); [EOL]     this.warningLevel.setOptionsForWarningLevel(options); [EOL]     options.setManageClosureDependencies(manageDependencies); [EOL]     if (replaceProperties) { [EOL]         convertPropertiesMap(options); [EOL]     } [EOL]     convertDefineParameters(options); [EOL]     for (Warning warning : warnings) { [EOL]         CheckLevel level = warning.getLevel(); [EOL]         String groupName = warning.getGroup(); [EOL]         DiagnosticGroup group = new DiagnosticGroups().forName(groupName); [EOL]         if (group == null) { [EOL]             throw new BuildException("Unrecognized 'warning' option value (" + groupName + ")"); [EOL]         } [EOL]         options.setWarningLevel(group, level); [EOL]     } [EOL]     return options; [EOL] } <line_num>: 297,332
public Parameter createDefine() { [EOL]     Parameter param = new Parameter(); [EOL]     defineParams.add(param); [EOL]     return param; [EOL] } <line_num>: 338,342
private void convertDefineParameters(CompilerOptions options) { [EOL]     for (Parameter p : defineParams) { [EOL]         String key = p.getName(); [EOL]         Object value = p.getValue(); [EOL]         if (!setDefine(options, key, value)) { [EOL]             log("Unexpected @define value for name=" + key + "; value=" + value); [EOL]         } [EOL]     } [EOL] } <line_num>: 349,358
private void convertPropertiesMap(CompilerOptions options) { [EOL]     @SuppressWarnings("unchecked") [EOL]     Map<String, Object> props = getProject().getProperties(); [EOL]     for (Map.Entry<String, Object> entry : props.entrySet()) { [EOL]         String key = entry.getKey(); [EOL]         Object value = entry.getValue(); [EOL]         if (key.startsWith(replacePropertiesPrefix)) { [EOL]             key = key.substring(replacePropertiesPrefix.length()); [EOL]             if (!setDefine(options, key, value)) { [EOL]                 log("Unexpected property value for key=" + key + "; value=" + value); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 366,381
private boolean setDefine(CompilerOptions options, String key, Object value) { [EOL]     boolean success = false; [EOL]     if (value instanceof String) { [EOL]         final boolean isTrue = "true".equals(value); [EOL]         final boolean isFalse = "false".equals(value); [EOL]         if (isTrue || isFalse) { [EOL]             options.setDefineToBooleanLiteral(key, isTrue); [EOL]         } else { [EOL]             try { [EOL]                 double dblTemp = Double.parseDouble((String) value); [EOL]                 options.setDefineToDoubleLiteral(key, dblTemp); [EOL]             } catch (NumberFormatException nfe) { [EOL]                 options.setDefineToStringLiteral(key, (String) value); [EOL]             } [EOL]         } [EOL]         success = true; [EOL]     } else if (value instanceof Boolean) { [EOL]         options.setDefineToBooleanLiteral(key, (Boolean) value); [EOL]         success = true; [EOL]     } else if (value instanceof Integer) { [EOL]         options.setDefineToNumberLiteral(key, (Integer) value); [EOL]         success = true; [EOL]     } else if (value instanceof Double) { [EOL]         options.setDefineToDoubleLiteral(key, (Double) value); [EOL]         success = true; [EOL]     } [EOL]     return success; [EOL] } <line_num>: 390,423
private Compiler createCompiler(CompilerOptions options) { [EOL]     Compiler compiler = new Compiler(); [EOL]     MessageFormatter formatter = options.errorFormat.toFormatter(compiler, false); [EOL]     AntErrorManager errorManager = new AntErrorManager(formatter, this); [EOL]     compiler.setErrorManager(errorManager); [EOL]     return compiler; [EOL] } <line_num>: 425,432
private List<SourceFile> findExternFiles() { [EOL]     List<SourceFile> files = Lists.newLinkedList(); [EOL]     if (!this.customExternsOnly) { [EOL]         files.addAll(getDefaultExterns()); [EOL]     } [EOL]     for (FileList list : this.externFileLists) { [EOL]         files.addAll(findJavaScriptFiles(list)); [EOL]     } [EOL]     return files; [EOL] } <line_num>: 434,445
private List<SourceFile> findSourceFiles() { [EOL]     List<SourceFile> files = Lists.newLinkedList(); [EOL]     for (FileList list : this.sourceFileLists) { [EOL]         files.addAll(findJavaScriptFiles(list)); [EOL]     } [EOL]     for (Path list : this.sourcePaths) { [EOL]         files.addAll(findJavaScriptFiles(list)); [EOL]     } [EOL]     return files; [EOL] } <line_num>: 447,459
private List<SourceFile> findJavaScriptFiles(FileList fileList) { [EOL]     List<SourceFile> files = Lists.newLinkedList(); [EOL]     File baseDir = fileList.getDir(getProject()); [EOL]     for (String included : fileList.getFiles(getProject())) { [EOL]         files.add(SourceFile.fromFile(new File(baseDir, included), Charset.forName(encoding))); [EOL]     } [EOL]     return files; [EOL] } <line_num>: 465,475
private List<SourceFile> findJavaScriptFiles(Path path) { [EOL]     List<SourceFile> files = Lists.newArrayList(); [EOL]     for (String included : path.list()) { [EOL]         files.add(SourceFile.fromFile(new File(included), Charset.forName(encoding))); [EOL]     } [EOL]     return files; [EOL] } <line_num>: 481,490
private List<SourceFile> getDefaultExterns() { [EOL]     try { [EOL]         return CommandLineRunner.getDefaultExterns(); [EOL]     } catch (IOException e) { [EOL]         throw new BuildException(e); [EOL]     } [EOL] } <line_num>: 497,503
private void writeResult(String source) { [EOL]     if (this.outputFile.getParentFile().mkdirs()) { [EOL]         log("Created missing parent directory " + this.outputFile.getParentFile(), Project.MSG_DEBUG); [EOL]     } [EOL]     try { [EOL]         OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(this.outputFile), outputEncoding); [EOL]         out.append(source); [EOL]         out.flush(); [EOL]         out.close(); [EOL]     } catch (IOException e) { [EOL]         throw new BuildException(e); [EOL]     } [EOL]     log("Compiled JavaScript written to " + this.outputFile.getAbsolutePath(), Project.MSG_DEBUG); [EOL] } <line_num>: 505,523
private boolean isStale() { [EOL]     long lastRun = outputFile.lastModified(); [EOL]     long sourcesLastModified = Math.max(getLastModifiedTime(this.sourceFileLists), getLastModifiedTime(this.sourcePaths)); [EOL]     long externsLastModified = getLastModifiedTime(this.externFileLists); [EOL]     return lastRun <= sourcesLastModified || lastRun <= externsLastModified; [EOL] } <line_num>: 531,539
private long getLastModifiedTime(List<?> fileLists) { [EOL]     long lastModified = 0; [EOL]     for (Object entry : fileLists) { [EOL]         if (entry instanceof FileList) { [EOL]             FileList list = (FileList) entry; [EOL]             for (String fileName : list.getFiles(this.getProject())) { [EOL]                 File path = list.getDir(this.getProject()); [EOL]                 File file = new File(path, fileName); [EOL]                 lastModified = Math.max(getLastModifiedTime(file), lastModified); [EOL]             } [EOL]         } else if (entry instanceof Path) { [EOL]             Path path = (Path) entry; [EOL]             for (String src : path.list()) { [EOL]                 File file = new File(src); [EOL]                 lastModified = Math.max(getLastModifiedTime(file), lastModified); [EOL]             } [EOL]         } [EOL]     } [EOL]     return lastModified; [EOL] } <line_num>: 550,572
private long getLastModifiedTime(File file) { [EOL]     long fileLastModified = file.lastModified(); [EOL]     if (fileLastModified == 0) { [EOL]         fileLastModified = new Date().getTime(); [EOL]     } [EOL]     return fileLastModified; [EOL] } <line_num>: 577,585
