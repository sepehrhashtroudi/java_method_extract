private LightweightMessageFormatter() { [EOL]     super(null); [EOL]     this.excerpt = LINE; [EOL] } <line_num>: 39,42
public LightweightMessageFormatter(SourceExcerptProvider source) { [EOL]     this(source, LINE); [EOL] } <line_num>: 44,46
public LightweightMessageFormatter(SourceExcerptProvider source, SourceExcerpt excerpt) { [EOL]     super(source); [EOL]     Preconditions.checkNotNull(source); [EOL]     this.excerpt = excerpt; [EOL] } <line_num>: 48,53
static LightweightMessageFormatter withoutSource() { [EOL]     return new LightweightMessageFormatter(); [EOL] } <line_num>: 55,57
@Override [EOL] public String formatError(JSError error) { [EOL]     return format(error, false); [EOL] } <line_num>: 59,62
@Override [EOL] public String formatWarning(JSError warning) { [EOL]     return format(warning, true); [EOL] } <line_num>: 64,67
private String format(JSError error, boolean warning) { [EOL]     SourceExcerptProvider source = getSource(); [EOL]     String sourceExcerpt = source == null ? null : excerpt.get(source, error.sourceName, error.lineNumber, excerptFormatter); [EOL]     StringBuilder b = new StringBuilder(); [EOL]     if (error.sourceName != null) { [EOL]         b.append(error.sourceName); [EOL]         if (error.lineNumber > 0) { [EOL]             b.append(':'); [EOL]             b.append(error.lineNumber); [EOL]         } [EOL]         b.append(": "); [EOL]     } [EOL]     b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR)); [EOL]     b.append(" - "); [EOL]     b.append(error.description); [EOL]     b.append('\n'); [EOL]     if (sourceExcerpt != null) { [EOL]         b.append(sourceExcerpt); [EOL]         b.append('\n'); [EOL]         int charno = error.getCharno(); [EOL]         if (excerpt.equals(LINE) && 0 <= charno && charno <= sourceExcerpt.length()) { [EOL]             for (int i = 0; i < charno; i++) { [EOL]                 char c = sourceExcerpt.charAt(i); [EOL]                 if (Character.isWhitespace(c)) { [EOL]                     b.append(c); [EOL]                 } else { [EOL]                     b.append(' '); [EOL]                 } [EOL]             } [EOL]             b.append("^\n"); [EOL]         } [EOL]     } [EOL]     return b.toString(); [EOL] } <line_num>: 69,114
@Override [EOL] public String formatLine(String line, int lineNumber) { [EOL]     return line; [EOL] } <line_num>: 124,127
@Override [EOL] public String formatRegion(Region region) { [EOL]     if (region == null) { [EOL]         return null; [EOL]     } [EOL]     String code = region.getSourceExcerpt(); [EOL]     if (code.length() == 0) { [EOL]         return null; [EOL]     } [EOL]     int numberLength = Integer.toString(region.getEndingLineNumber()).length(); [EOL]     StringBuilder builder = new StringBuilder(code.length() * 2); [EOL]     int start = 0; [EOL]     int end = code.indexOf('\n', start); [EOL]     int lineNumber = region.getBeginningLineNumber(); [EOL]     while (start >= 0) { [EOL]         String line; [EOL]         if (end < 0) { [EOL]             line = code.substring(start); [EOL]             if (line.length() == 0) { [EOL]                 return builder.substring(0, builder.length() - 1); [EOL]             } [EOL]         } else { [EOL]             line = code.substring(start, end); [EOL]         } [EOL]         builder.append("  "); [EOL]         int spaces = numberLength - Integer.toString(lineNumber).length(); [EOL]         builder.append(Strings.repeat(" ", spaces)); [EOL]         builder.append(lineNumber); [EOL]         builder.append("| "); [EOL]         if (end < 0) { [EOL]             builder.append(line); [EOL]             start = -1; [EOL]         } else { [EOL]             builder.append(line); [EOL]             builder.append('\n'); [EOL]             start = end + 1; [EOL]             end = code.indexOf('\n', start); [EOL]             lineNumber++; [EOL]         } [EOL]     } [EOL]     return builder.toString(); [EOL] } <line_num>: 129,180
