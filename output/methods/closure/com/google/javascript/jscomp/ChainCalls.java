ChainCalls(AbstractCompiler compiler) { [EOL]     this.compiler = compiler; [EOL] } <line_num>: 43,45
CallSite(Node parent, Node n, Node callNode, Node nextGetPropNode, Node nextGetPropFirstChildNode) { [EOL]     this.parent = parent; [EOL]     this.n = n; [EOL]     this.callNode = callNode; [EOL]     this.nextGetPropNode = nextGetPropNode; [EOL]     this.nextGetPropFirstChildNode = nextGetPropFirstChildNode; [EOL] } <line_num>: 183,190
@Override [EOL] public void process(Node externs, Node root) { [EOL]     defFinder = new SimpleDefinitionFinder(compiler); [EOL]     defFinder.process(externs, root); [EOL]     NodeTraversal.traverse(compiler, root, new GatherCallSites()); [EOL]     for (CallSite callSite : callSites) { [EOL]         callSite.parent.removeChild(callSite.n); [EOL]         callSite.n.removeChild(callSite.callNode); [EOL]         callSite.nextGetPropNode.replaceChild(callSite.nextGetPropFirstChildNode, callSite.callNode); [EOL]         compiler.reportCodeChange(); [EOL]     } [EOL] } <line_num>: 47,61
@Override [EOL] public void enterScope(NodeTraversal t) { [EOL]     ControlFlowGraph<Node> cfg = t.getControlFlowGraph(); [EOL]     for (DiGraphEdge<Node, Branch> s : cfg.getImplicitReturn().getInEdges()) { [EOL]         Node exitNode = s.getSource().getValue(); [EOL]         if (!exitNode.isReturn() || exitNode.getFirstChild() == null || !exitNode.getFirstChild().isThis()) { [EOL]             badFunctionNodes.add(t.getScopeRoot()); [EOL]             return; [EOL]         } [EOL]     } [EOL]     goodFunctionNodes.add(t.getScopeRoot()); [EOL] } <line_num>: 67,82
@Override [EOL] public void exitScope(NodeTraversal t) { [EOL] } <line_num>: 84,86
@Override [EOL] public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) { [EOL]     return true; [EOL] } <line_num>: 88,92
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL] } <line_num>: 94,96
@Override [EOL] public void visit(NodeTraversal t, Node n, Node parent) { [EOL]     if (!n.isExprResult()) { [EOL]         return; [EOL]     } [EOL]     Node callNode = n.getFirstChild(); [EOL]     if (!callNode.isCall()) { [EOL]         return; [EOL]     } [EOL]     Node getPropNode = callNode.getFirstChild(); [EOL]     if (!getPropNode.isGetProp()) { [EOL]         return; [EOL]     } [EOL]     Node getPropFirstChildNode = getPropNode.getFirstChild(); [EOL]     Collection<Definition> definitions = defFinder.getDefinitionsReferencedAt(getPropNode); [EOL]     if (definitions == null) { [EOL]         return; [EOL]     } [EOL]     for (Definition definition : definitions) { [EOL]         Node rValue = definition.getRValue(); [EOL]         if (rValue == null) { [EOL]             return; [EOL]         } [EOL]         if (badFunctionNodes.contains(rValue)) { [EOL]             return; [EOL]         } [EOL]         if (!goodFunctionNodes.contains(rValue)) { [EOL]             NodeTraversal.traverse(compiler, rValue, gatherFunctions); [EOL]             if (badFunctionNodes.contains(rValue)) { [EOL]                 return; [EOL]             } [EOL]         } [EOL]     } [EOL]     Node nextNode = n.getNext(); [EOL]     if (nextNode == null || !nextNode.isExprResult()) { [EOL]         return; [EOL]     } [EOL]     Node nextCallNode = nextNode.getFirstChild(); [EOL]     if (!nextCallNode.isCall()) { [EOL]         return; [EOL]     } [EOL]     Node nextGetPropNode = nextCallNode.getFirstChild(); [EOL]     if (!nextGetPropNode.isGetProp()) { [EOL]         return; [EOL]     } [EOL]     Node nextGetPropFirstChildNode = nextGetPropNode.getFirstChild(); [EOL]     if (!compiler.areNodesEqualForInlining(nextGetPropFirstChildNode, getPropFirstChildNode)) { [EOL]         return; [EOL]     } [EOL]     if (NodeUtil.mayEffectMutableState(getPropFirstChildNode)) { [EOL]         return; [EOL]     } [EOL]     callSites.add(new CallSite(parent, n, callNode, nextGetPropNode, nextGetPropFirstChildNode)); [EOL] } <line_num>: 104,172
