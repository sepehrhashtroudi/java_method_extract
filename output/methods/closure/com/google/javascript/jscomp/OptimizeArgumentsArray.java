OptimizeArgumentsArray(AbstractCompiler compiler) { [EOL]     this(compiler, PARAMETER_PREFIX); [EOL] } <line_num>: 75,77
OptimizeArgumentsArray(AbstractCompiler compiler, String paramPrefix) { [EOL]     this.compiler = Preconditions.checkNotNull(compiler); [EOL]     this.paramPredix = Preconditions.checkNotNull(paramPrefix); [EOL] } <line_num>: 83,86
@Override [EOL] public void process(Node externs, Node root) { [EOL]     NodeTraversal.traverse(compiler, Preconditions.checkNotNull(root), this); [EOL] } <line_num>: 88,91
@Override [EOL] public void enterScope(NodeTraversal traversal) { [EOL]     Preconditions.checkNotNull(traversal); [EOL]     Node function = traversal.getScopeRoot(); [EOL]     if (!function.isFunction()) { [EOL]         return; [EOL]     } [EOL]     if (currentArgumentsAccess != null) { [EOL]         argumentsAccessStack.push(currentArgumentsAccess); [EOL]     } [EOL]     currentArgumentsAccess = Lists.newLinkedList(); [EOL] } <line_num>: 93,110
@Override [EOL] public void exitScope(NodeTraversal traversal) { [EOL]     Preconditions.checkNotNull(traversal); [EOL]     if (currentArgumentsAccess == null) { [EOL]         return; [EOL]     } [EOL]     if (tryReplaceArguments(traversal.getScope())) { [EOL]         traversal.getCompiler().reportCodeChange(); [EOL]     } [EOL]     if (!argumentsAccessStack.isEmpty()) { [EOL]         currentArgumentsAccess = argumentsAccessStack.pop(); [EOL]     } else { [EOL]         currentArgumentsAccess = null; [EOL]     } [EOL] } <line_num>: 112,139
@Override [EOL] public boolean shouldTraverse(NodeTraversal nodeTraversal, Node node, Node parent) { [EOL]     return true; [EOL] } <line_num>: 141,146
@Override [EOL] public void visit(NodeTraversal traversal, Node node, Node parent) { [EOL]     Preconditions.checkNotNull(traversal); [EOL]     Preconditions.checkNotNull(node); [EOL]     if (currentArgumentsAccess == null) { [EOL]         return; [EOL]     } [EOL]     if (node.isName() && ARGUMENTS.equals(node.getString())) { [EOL]         currentArgumentsAccess.add(node); [EOL]     } [EOL] } <line_num>: 148,168
private boolean tryReplaceArguments(Scope scope) { [EOL]     Node parametersList = scope.getRootNode().getFirstChild().getNext(); [EOL]     Preconditions.checkState(parametersList.isParamList()); [EOL]     boolean changed = false; [EOL]     int numNamedParameter = parametersList.getChildCount(); [EOL]     int highestIndex = numNamedParameter - 1; [EOL]     for (Node ref : currentArgumentsAccess) { [EOL]         Node getElem = ref.getParent(); [EOL]         if (!getElem.isGetElem()) { [EOL]             return false; [EOL]         } [EOL]         Node index = ref.getNext(); [EOL]         if (!index.isNumber()) { [EOL]             return false; [EOL]         } [EOL]         Node getElemParent = getElem.getParent(); [EOL]         if (getElemParent.isCall() && getElemParent.getFirstChild() == getElem) { [EOL]             return false; [EOL]         } [EOL]         int value = (int) index.getDouble(); [EOL]         if (value > highestIndex) { [EOL]             highestIndex = value; [EOL]         } [EOL]     } [EOL]     int numExtraArgs = highestIndex - numNamedParameter + 1; [EOL]     String[] argNames = new String[numExtraArgs]; [EOL]     for (int i = 0; i < numExtraArgs; i++) { [EOL]         String name = getNewName(); [EOL]         argNames[i] = name; [EOL]         parametersList.addChildrenToBack(IR.name(name)); [EOL]         changed = true; [EOL]     } [EOL]     for (Node ref : currentArgumentsAccess) { [EOL]         Node index = ref.getNext(); [EOL]         if (!index.isNumber()) { [EOL]             continue; [EOL]         } [EOL]         int value = (int) index.getDouble(); [EOL]         if (value >= numNamedParameter) { [EOL]             ref.getParent().getParent().replaceChild(ref.getParent(), IR.name(argNames[value - numNamedParameter])); [EOL]         } else { [EOL]             Node name = parametersList.getFirstChild(); [EOL]             for (int i = 0; i < value; i++) { [EOL]                 name = name.getNext(); [EOL]             } [EOL]             ref.getParent().getParent().replaceChild(ref.getParent(), IR.name(name.getString())); [EOL]         } [EOL]         changed = true; [EOL]     } [EOL]     return changed; [EOL] } <line_num>: 177,289
private String getNewName() { [EOL]     return paramPredix + uniqueId++; [EOL] } <line_num>: 294,296
