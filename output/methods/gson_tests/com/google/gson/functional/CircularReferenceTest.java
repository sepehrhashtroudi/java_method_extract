@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     gson = new Gson(); [EOL] } <line_num>: 41,45
public void testCircularSerialization() throws Exception { [EOL]     ContainsReferenceToSelfType a = new ContainsReferenceToSelfType(); [EOL]     ContainsReferenceToSelfType b = new ContainsReferenceToSelfType(); [EOL]     a.children.add(b); [EOL]     b.children.add(a); [EOL]     try { [EOL]         gson.toJson(a); [EOL]         fail("Circular types should not get printed!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("children")); [EOL]     } [EOL] } <line_num>: 47,58
public void testSelfReferenceSerialization() throws Exception { [EOL]     ClassOverridingEquals objA = new ClassOverridingEquals(); [EOL]     objA.ref = objA; [EOL]     try { [EOL]         gson.toJson(objA); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] } <line_num>: 60,68
public void testSelfReferenceArrayFieldSerialization() throws Exception { [EOL]     ClassWithSelfReferenceArray objA = new ClassWithSelfReferenceArray(); [EOL]     objA.children = new ClassWithSelfReferenceArray[] { objA }; [EOL]     try { [EOL]         gson.toJson(objA); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("children")); [EOL]     } [EOL] } <line_num>: 70,80
public JsonElement serialize(ClassWithSelfReference src, Type typeOfSrc, JsonSerializationContext context) { [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.addProperty("property", "value"); [EOL]     obj.add("child", context.serialize(src.child)); [EOL]     return obj; [EOL] } <line_num>: 86,92
public void testSelfReferenceCustomHandlerSerialization() throws Exception { [EOL]     ClassWithSelfReference obj = new ClassWithSelfReference(); [EOL]     obj.child = obj; [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(ClassWithSelfReference.class, new JsonSerializer<ClassWithSelfReference>() { [EOL]  [EOL]         public JsonElement serialize(ClassWithSelfReference src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             JsonObject obj = new JsonObject(); [EOL]             obj.addProperty("property", "value"); [EOL]             obj.add("child", context.serialize(src.child)); [EOL]             return obj; [EOL]         } [EOL]     }).create(); [EOL]     try { [EOL]         gson.toJson(obj); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("Offending")); [EOL]     } [EOL] } <line_num>: 82,100
public void testDirectedAcyclicGraphSerialization() throws Exception { [EOL]     ContainsReferenceToSelfType a = new ContainsReferenceToSelfType(); [EOL]     ContainsReferenceToSelfType b = new ContainsReferenceToSelfType(); [EOL]     ContainsReferenceToSelfType c = new ContainsReferenceToSelfType(); [EOL]     a.children.add(b); [EOL]     a.children.add(c); [EOL]     b.children.add(c); [EOL]     assertNotNull(gson.toJson(a)); [EOL] } <line_num>: 102,110
public void testDirectedAcyclicGraphDeserialization() throws Exception { [EOL]     String json = "{\"children\":[{\"children\":[{\"children\":[]}]},{\"children\":[]}]}"; [EOL]     ContainsReferenceToSelfType target = gson.fromJson(json, ContainsReferenceToSelfType.class); [EOL]     assertNotNull(target); [EOL]     assertEquals(2, target.children.size()); [EOL] } <line_num>: 112,117
