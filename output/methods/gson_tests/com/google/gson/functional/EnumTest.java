@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     gson = new Gson(); [EOL] } <line_num>: 41,45
public void testTopLevelEnumSerialization() throws Exception { [EOL]     String result = gson.toJson(MyEnum.VALUE1); [EOL]     assertEquals('"' + MyEnum.VALUE1.toString() + '"', result); [EOL] } <line_num>: 47,50
public void testTopLevelEnumDeserialization() throws Exception { [EOL]     MyEnum result = gson.fromJson('"' + MyEnum.VALUE1.toString() + '"', MyEnum.class); [EOL]     assertEquals(MyEnum.VALUE1, result); [EOL] } <line_num>: 52,55
public void testTopLevelEnumInASingleElementArrayDeserialization() { [EOL]     String json = "[" + MyEnum.VALUE1.getExpectedJson() + "]"; [EOL]     MyEnum target = gson.fromJson(json, MyEnum.class); [EOL]     assertEquals(json, "[" + target.getExpectedJson() + "]"); [EOL] } <line_num>: 57,61
public void testCollectionOfEnumsSerialization() { [EOL]     Type type = new TypeToken<Collection<MyEnum>>() { [EOL]     }.getType(); [EOL]     Collection<MyEnum> target = new ArrayList<MyEnum>(); [EOL]     target.add(MyEnum.VALUE1); [EOL]     target.add(MyEnum.VALUE2); [EOL]     String expectedJson = "[\"VALUE1\",\"VALUE2\"]"; [EOL]     String actualJson = gson.toJson(target); [EOL]     assertEquals(expectedJson, actualJson); [EOL]     actualJson = gson.toJson(target, type); [EOL]     assertEquals(expectedJson, actualJson); [EOL] } <line_num>: 63,73
public void testCollectionOfEnumsDeserialization() { [EOL]     Type type = new TypeToken<Collection<MyEnum>>() { [EOL]     }.getType(); [EOL]     String json = "[\"VALUE1\",\"VALUE2\"]"; [EOL]     Collection<MyEnum> target = gson.fromJson(json, type); [EOL]     MoreAsserts.assertContains(target, MyEnum.VALUE1); [EOL]     MoreAsserts.assertContains(target, MyEnum.VALUE2); [EOL] } <line_num>: 75,81
public void testClassWithEnumFieldSerialization() throws Exception { [EOL]     ClassWithEnumFields target = new ClassWithEnumFields(); [EOL]     assertEquals(target.getExpectedJson(), gson.toJson(target)); [EOL] } <line_num>: 83,86
public void testClassWithEnumFieldDeserialization() throws Exception { [EOL]     String json = "{value1:'VALUE1',value2:'VALUE2'}"; [EOL]     ClassWithEnumFields target = gson.fromJson(json, ClassWithEnumFields.class); [EOL]     assertEquals(MyEnum.VALUE1, target.value1); [EOL]     assertEquals(MyEnum.VALUE2, target.value2); [EOL] } <line_num>: 88,93
public String getExpectedJson() { [EOL]     return "\"" + toString() + "\""; [EOL] } <line_num>: 98,100
public String getExpectedJson() { [EOL]     return "{\"value1\":\"" + value1 + "\",\"value2\":\"" + value2 + "\"}"; [EOL] } <line_num>: 106,108
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] } <line_num>: 114,121
@Override [EOL] Roshambo defeats() { [EOL]     return SCISSORS; [EOL] } <line_num>: 125,127
@Override [EOL] Roshambo defeats() { [EOL]     return ROCK; [EOL] } <line_num>: 130,132
@Override [EOL] Roshambo defeats() { [EOL]     return PAPER; [EOL] } <line_num>: 135,137
abstract Roshambo defeats(); <line_num>: 140,140
