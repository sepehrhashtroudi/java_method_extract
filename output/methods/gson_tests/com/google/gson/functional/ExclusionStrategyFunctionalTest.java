public SampleObjectForTest() { [EOL]     annotatedField = 5; [EOL]     stringField = "someDefaultValue"; [EOL]     longField = 1234; [EOL]     clazzField = String.class; [EOL] } <line_num>: 89,94
private MyExclusionStrategy(Class<?> typeToSkip) { [EOL]     this.typeToSkip = typeToSkip; [EOL] } <line_num>: 100,102
@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     gson = new GsonBuilder().setExclusionStrategies(new MyExclusionStrategy(String.class)).serializeNulls().create(); [EOL]     src = new SampleObjectForTest(); [EOL] } <line_num>: 44,52
public void testExclusionStrategySerialization() throws Exception { [EOL]     String json = gson.toJson(src); [EOL]     assertFalse(json.contains("\"stringField\"")); [EOL]     assertFalse(json.contains("\"annotatedField\"")); [EOL]     assertTrue(json.contains("\"longField\"")); [EOL] } <line_num>: 54,59
public void testExclusionStrategyDeserialization() throws Exception { [EOL]     JsonObject json = new JsonObject(); [EOL]     json.add("annotatedField", new JsonPrimitive(src.annotatedField + 5)); [EOL]     json.add("stringField", new JsonPrimitive(src.stringField + "blah,blah")); [EOL]     json.add("longField", new JsonPrimitive(1212311L)); [EOL]     SampleObjectForTest target = gson.fromJson(json, SampleObjectForTest.class); [EOL]     assertEquals(1212311L, target.longField); [EOL]     assertEquals(src.annotatedField, target.annotatedField); [EOL]     assertEquals(src.stringField, target.stringField); [EOL] } <line_num>: 61,73
public boolean shouldSkipClass(Class<?> clazz) { [EOL]     return (clazz == typeToSkip); [EOL] } <line_num>: 104,106
public boolean shouldSkipField(FieldAttributes f) { [EOL]     return f.getAnnotation(Foo.class) != null; [EOL] } <line_num>: 108,110
