public ClassWithDuplicateFields(Integer a) { [EOL]     this(a, null); [EOL] } <line_num>: 150,152
public ClassWithDuplicateFields(Double b) { [EOL]     this(null, b); [EOL] } <line_num>: 154,156
public ClassWithDuplicateFields(Integer a, Double b) { [EOL]     this.a = a; [EOL]     this.b = b; [EOL] } <line_num>: 158,161
@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     builder = new GsonBuilder(); [EOL] } <line_num>: 40,44
public void testGsonWithNonDefaultFieldNamingPolicySerialization() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create(); [EOL]     StringWrapper target = new StringWrapper("blah"); [EOL]     assertEquals("{\"SomeConstantStringInstanceField\":\"" + target.someConstantStringInstanceField + "\"}", gson.toJson(target)); [EOL] } <line_num>: 46,51
public void testGsonWithNonDefaultFieldNamingPolicyDeserialiation() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create(); [EOL]     String target = "{\"SomeConstantStringInstanceField\":\"someValue\"}"; [EOL]     StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class); [EOL]     assertEquals("someValue", deserializedObject.someConstantStringInstanceField); [EOL] } <line_num>: 53,58
public void testGsonWithLowerCaseDashPolicySerialization() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DASHES).create(); [EOL]     StringWrapper target = new StringWrapper("blah"); [EOL]     assertEquals("{\"some-constant-string-instance-field\":\"" + target.someConstantStringInstanceField + "\"}", gson.toJson(target)); [EOL] } <line_num>: 60,65
public void testGsonWithLowerCaseDashPolicyDeserialiation() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DASHES).create(); [EOL]     String target = "{\"some-constant-string-instance-field\":\"someValue\"}"; [EOL]     StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class); [EOL]     assertEquals("someValue", deserializedObject.someConstantStringInstanceField); [EOL] } <line_num>: 67,72
public void testGsonWithLowerCaseUnderscorePolicySerialization() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create(); [EOL]     StringWrapper target = new StringWrapper("blah"); [EOL]     assertEquals("{\"some_constant_string_instance_field\":\"" + target.someConstantStringInstanceField + "\"}", gson.toJson(target)); [EOL] } <line_num>: 74,80
public void testGsonWithLowerCaseUnderscorePolicyDeserialiation() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create(); [EOL]     String target = "{\"some_constant_string_instance_field\":\"someValue\"}"; [EOL]     StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class); [EOL]     assertEquals("someValue", deserializedObject.someConstantStringInstanceField); [EOL] } <line_num>: 82,88
public void testGsonWithSerializedNameFieldNamingPolicySerialization() { [EOL]     Gson gson = builder.create(); [EOL]     ClassWithSerializedNameFields expected = new ClassWithSerializedNameFields(5, 6); [EOL]     String actual = gson.toJson(expected); [EOL]     assertEquals(expected.getExpectedJson(), actual); [EOL] } <line_num>: 90,95
public void testGsonWithSerializedNameFieldNamingPolicyDeserialization() { [EOL]     Gson gson = builder.create(); [EOL]     ClassWithSerializedNameFields expected = new ClassWithSerializedNameFields(5, 7); [EOL]     ClassWithSerializedNameFields actual = gson.fromJson(expected.getExpectedJson(), ClassWithSerializedNameFields.class); [EOL]     assertEquals(expected.f, actual.f); [EOL] } <line_num>: 97,103
public void testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization() { [EOL]     Gson gson = builder.create(); [EOL]     ClassWithDuplicateFields target = new ClassWithDuplicateFields(10); [EOL]     String actual = gson.toJson(target); [EOL]     assertEquals("{\"a\":10}", actual); [EOL]     target = new ClassWithDuplicateFields(3.0D); [EOL]     actual = gson.toJson(target); [EOL]     assertEquals("{\"a\":3.0}", actual); [EOL] } <line_num>: 105,114
public void testGsonWithUpperCamelCaseSpacesPolicySerialiation() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES).create(); [EOL]     StringWrapper target = new StringWrapper("blah"); [EOL]     assertEquals("{\"Some Constant String Instance Field\":\"" + target.someConstantStringInstanceField + "\"}", gson.toJson(target)); [EOL] } <line_num>: 116,122
public void testGsonWithUpperCamelCaseSpacesPolicyDeserialiation() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES).create(); [EOL]     String target = "{\"Some Constant String Instance Field\":\"someValue\"}"; [EOL]     StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class); [EOL]     assertEquals("someValue", deserializedObject.someConstantStringInstanceField); [EOL] } <line_num>: 124,130
public void testDeprecatedNamingStrategy() throws Exception { [EOL]     Gson gson = builder.setFieldNamingStrategy(new UpperCaseNamingStrategy()).create(); [EOL]     ClassWithDuplicateFields target = new ClassWithDuplicateFields(10); [EOL]     String actual = gson.toJson(target); [EOL]     assertEquals("{\"A\":10}", actual); [EOL] } <line_num>: 132,137
public String translateName(Field f) { [EOL]     return f.getName().toUpperCase(); [EOL] } <line_num>: 140,142
