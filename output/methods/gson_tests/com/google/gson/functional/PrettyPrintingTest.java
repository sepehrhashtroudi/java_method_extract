@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     gson = new GsonBuilder().setPrettyPrinting().create(); [EOL] } <line_num>: 47,51
public void testPrettyPrintList() { [EOL]     BagOfPrimitives b = new BagOfPrimitives(); [EOL]     List<BagOfPrimitives> listOfB = new LinkedList<BagOfPrimitives>(); [EOL]     for (int i = 0; i < 15; ++i) { [EOL]         listOfB.add(b); [EOL]     } [EOL]     Type typeOfSrc = new TypeToken<List<BagOfPrimitives>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(listOfB, typeOfSrc); [EOL]     print(json); [EOL] } <line_num>: 53,62
public void testPrettyPrintArrayOfObjects() { [EOL]     ArrayOfObjects target = new ArrayOfObjects(); [EOL]     String json = gson.toJson(target); [EOL]     print(json); [EOL] } <line_num>: 64,68
public void testPrettyPrintArrayOfPrimitives() { [EOL]     int[] ints = new int[] { 1, 2, 3, 4, 5 }; [EOL]     String json = gson.toJson(ints); [EOL]     assertEquals("[\n  1,\n  2,\n  3,\n  4,\n  5\n]", json); [EOL] } <line_num>: 70,74
public void testPrettyPrintArrayOfPrimitiveArrays() { [EOL]     int[][] ints = new int[][] { { 1, 2 }, { 3, 4 }, { 5, 6 }, { 7, 8 }, { 9, 0 }, { 10 } }; [EOL]     String json = gson.toJson(ints); [EOL]     assertEquals("[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    5,\n    6\n  ]," + "\n  [\n    7,\n    8\n  ],\n  [\n    9,\n    0\n  ],\n  [\n    10\n  ]\n]", json); [EOL] } <line_num>: 76,82
public void testPrettyPrintListOfPrimitiveArrays() { [EOL]     List<Integer[]> list = Arrays.asList(new Integer[][] { { 1, 2 }, { 3, 4 }, { 5, 6 }, { 7, 8 }, { 9, 0 }, { 10 } }); [EOL]     String json = gson.toJson(list); [EOL]     assertEquals("[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    5,\n    6\n  ]," + "\n  [\n    7,\n    8\n  ],\n  [\n    9,\n    0\n  ],\n  [\n    10\n  ]\n]", json); [EOL] } <line_num>: 84,90
public void testMap() { [EOL]     Map<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]     map.put("abc", 1); [EOL]     map.put("def", 5); [EOL]     String json = gson.toJson(map); [EOL]     assertEquals("{\n  \"abc\": 1,\n  \"def\": 5\n}", json); [EOL] } <line_num>: 92,98
public void testEmptyMapField() { [EOL]     ClassWithMap obj = new ClassWithMap(); [EOL]     obj.map = new LinkedHashMap<String, Integer>(); [EOL]     String json = gson.toJson(obj); [EOL]     assertTrue(json.contains("{\n  \"map\": {},\n  \"value\": 2\n}")); [EOL] } <line_num>: 101,106
public void testMultipleArrays() { [EOL]     int[][][] ints = new int[][][] { { { 1 }, { 2 } } }; [EOL]     String json = gson.toJson(ints); [EOL]     assertEquals("[\n  [\n    [\n      1\n    ],\n    [\n      2\n    ]\n  ]\n]", json); [EOL] } <line_num>: 114,118
private void print(String msg) { [EOL]     if (DEBUG) { [EOL]         System.out.println(msg); [EOL]     } [EOL] } <line_num>: 120,124
