@SuppressWarnings("unused") [EOL] private ClassWithBigDecimal() { [EOL] } <line_num>: 382,383
ClassWithBigDecimal(String value) { [EOL]     this.value = new BigDecimal(value); [EOL] } <line_num>: 384,386
@SuppressWarnings("unused") [EOL] private ClassWithBigInteger() { [EOL] } <line_num>: 395,396
ClassWithBigInteger(String value) { [EOL]     this.value = new BigInteger(value); [EOL] } <line_num>: 397,399
@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     this.oldTimeZone = TimeZone.getDefault(); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("PST")); [EOL]     gson = new Gson(); [EOL] } <line_num>: 59,65
@Override [EOL] protected void tearDown() throws Exception { [EOL]     TimeZone.setDefault(oldTimeZone); [EOL]     super.tearDown(); [EOL] } <line_num>: 67,71
public void testUrlSerialization() throws Exception { [EOL]     String urlValue = "http://google.com/"; [EOL]     URL url = new URL(urlValue); [EOL]     assertEquals("\"http://google.com/\"", gson.toJson(url)); [EOL] } <line_num>: 73,77
public void testUrlDeserialization() { [EOL]     String urlValue = "http://google.com/"; [EOL]     String json = "'http:\\/\\/google.com\\/'"; [EOL]     URL target = gson.fromJson(json, URL.class); [EOL]     assertEquals(urlValue, target.toExternalForm()); [EOL]     gson.fromJson('"' + urlValue + '"', URL.class); [EOL]     assertEquals(urlValue, target.toExternalForm()); [EOL] } <line_num>: 79,87
public void testUrlNullSerialization() throws Exception { [EOL]     ClassWithUrlField target = new ClassWithUrlField(); [EOL]     assertEquals("{}", gson.toJson(target)); [EOL] } <line_num>: 89,92
public void testUrlNullDeserialization() { [EOL]     String json = "{}"; [EOL]     ClassWithUrlField target = gson.fromJson(json, ClassWithUrlField.class); [EOL]     assertNull(target.url); [EOL] } <line_num>: 94,98
public void testUriSerialization() throws Exception { [EOL]     String uriValue = "http://google.com/"; [EOL]     URI uri = new URI(uriValue); [EOL]     assertEquals("\"http://google.com/\"", gson.toJson(uri)); [EOL] } <line_num>: 104,108
public void testUriDeserialization() { [EOL]     String uriValue = "http://google.com/"; [EOL]     String json = '"' + uriValue + '"'; [EOL]     URI target = gson.fromJson(json, URI.class); [EOL]     assertEquals(uriValue, target.toASCIIString()); [EOL] } <line_num>: 110,115
public void testUuidSerialization() throws Exception { [EOL]     String uuidValue = "c237bec1-19ef-4858-a98e-521cf0aad4c0"; [EOL]     UUID uuid = UUID.fromString(uuidValue); [EOL]     assertEquals('"' + uuidValue + '"', gson.toJson(uuid)); [EOL] } <line_num>: 117,121
public void testUuidDeserialization() { [EOL]     String uuidValue = "c237bec1-19ef-4858-a98e-521cf0aad4c0"; [EOL]     String json = '"' + uuidValue + '"'; [EOL]     UUID target = gson.fromJson(json, UUID.class); [EOL]     assertEquals(uuidValue, target.toString()); [EOL] } <line_num>: 123,128
public void testLocaleSerializationWithLanguage() { [EOL]     Locale target = new Locale("en"); [EOL]     assertEquals("\"en\"", gson.toJson(target)); [EOL] } <line_num>: 130,133
public void testLocaleDeserializationWithLanguage() { [EOL]     String json = "\"en\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals("en", locale.getLanguage()); [EOL] } <line_num>: 135,139
public void testLocaleSerializationWithLanguageCountry() { [EOL]     Locale target = Locale.CANADA_FRENCH; [EOL]     assertEquals("\"fr_CA\"", gson.toJson(target)); [EOL] } <line_num>: 141,144
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] } <line_num>: 146,150
public void testLocaleSerializationWithLanguageCountryVariant() { [EOL]     Locale target = new Locale("de", "DE", "EURO"); [EOL]     String json = gson.toJson(target); [EOL]     assertEquals("\"de_DE_EURO\"", json); [EOL] } <line_num>: 152,156
public void testLocaleDeserializationWithLanguageCountryVariant() { [EOL]     String json = "\"de_DE_EURO\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals("de", locale.getLanguage()); [EOL]     assertEquals("DE", locale.getCountry()); [EOL]     assertEquals("EURO", locale.getVariant()); [EOL] } <line_num>: 158,164
public void testBigDecimalFieldSerialization() { [EOL]     ClassWithBigDecimal target = new ClassWithBigDecimal("-122.01e-21"); [EOL]     String json = gson.toJson(target); [EOL]     String actual = json.substring(json.indexOf(':') + 1, json.indexOf('}')); [EOL]     assertEquals(target.value, new BigDecimal(actual)); [EOL] } <line_num>: 166,171
public void testBigDecimalFieldDeserialization() { [EOL]     ClassWithBigDecimal expected = new ClassWithBigDecimal("-122.01e-21"); [EOL]     String json = expected.getExpectedJson(); [EOL]     ClassWithBigDecimal actual = gson.fromJson(json, ClassWithBigDecimal.class); [EOL]     assertEquals(expected.value, actual.value); [EOL] } <line_num>: 173,178
public void testBadValueForBigDecimalDeserialization() { [EOL]     try { [EOL]         gson.fromJson("{\"value\"=1.5e-1.0031}", ClassWithBigDecimal.class); [EOL]         fail("Exponent of a BigDecimal must be an integer value."); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] } <line_num>: 180,185
public void testBigIntegerFieldSerialization() { [EOL]     ClassWithBigInteger target = new ClassWithBigInteger("23232323215323234234324324324324324324"); [EOL]     String json = gson.toJson(target); [EOL]     assertEquals(target.getExpectedJson(), json); [EOL] } <line_num>: 187,191
public void testBigIntegerFieldDeserialization() { [EOL]     ClassWithBigInteger expected = new ClassWithBigInteger("879697697697697697697697697697697697"); [EOL]     String json = expected.getExpectedJson(); [EOL]     ClassWithBigInteger actual = gson.fromJson(json, ClassWithBigInteger.class); [EOL]     assertEquals(expected.value, actual.value); [EOL] } <line_num>: 193,198
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] } <line_num>: 200,209
public void testDefaultDateSerialization() { [EOL]     Date now = new Date(); [EOL]     String json = gson.toJson(now); [EOL]     assertEquals("\"" + DateFormat.getDateTimeInstance().format(now) + "\"", json); [EOL] } <line_num>: 211,215
public void testDefaultDateDeserialization() { [EOL]     String json = "'Dec 13, 2009 07:18:02 AM'"; [EOL]     Date extracted = gson.fromJson(json, Date.class); [EOL]     assertEqualsDate(extracted, 2009, 11, 13); [EOL]     assertEqualsTime(extracted, 7, 18, 02); [EOL] } <line_num>: 217,222
@SuppressWarnings("deprecation") [EOL] private void assertEqualsDate(Date date, int year, int month, int day) { [EOL]     assertEquals(year - 1900, date.getYear()); [EOL]     assertEquals(month, date.getMonth()); [EOL]     assertEquals(day, date.getDate()); [EOL] } <line_num>: 226,231
@SuppressWarnings("deprecation") [EOL] private void assertEqualsTime(Date date, int hours, int minutes, int seconds) { [EOL]     assertEquals(hours, date.getHours()); [EOL]     assertEquals(minutes, date.getMinutes()); [EOL]     assertEquals(seconds, date.getSeconds()); [EOL] } <line_num>: 233,238
public void testDefaultJavaSqlDateSerialization() { [EOL]     java.sql.Date instant = new java.sql.Date(1259875082000L); [EOL]     String json = gson.toJson(instant); [EOL]     assertEquals("\"Dec 3, 2009\"", json); [EOL] } <line_num>: 240,244
public void testDefaultJavaSqlDateDeserialization() { [EOL]     String json = "'Dec 3, 2009'"; [EOL]     java.sql.Date extracted = gson.fromJson(json, java.sql.Date.class); [EOL]     assertEqualsDate(extracted, 2009, 11, 3); [EOL] } <line_num>: 246,250
public void testDefaultJavaSqlTimestampSerialization() { [EOL]     Timestamp now = new java.sql.Timestamp(1259875082000L); [EOL]     String json = gson.toJson(now); [EOL]     assertEquals("\"Dec 3, 2009 1:18:02 PM\"", json); [EOL] } <line_num>: 252,256
public void testDefaultJavaSqlTimestampDeserialization() { [EOL]     String json = "'Dec 3, 2009 1:18:02 PM'"; [EOL]     Timestamp extracted = gson.fromJson(json, Timestamp.class); [EOL]     assertEqualsDate(extracted, 2009, 11, 3); [EOL]     assertEqualsTime(extracted, 13, 18, 02); [EOL] } <line_num>: 258,263
public void testDefaultJavaSqlTimeSerialization() { [EOL]     Time now = new Time(1259875082000L); [EOL]     String json = gson.toJson(now); [EOL]     assertEquals("\"01:18:02 PM\"", json); [EOL] } <line_num>: 265,269
public void testDefaultJavaSqlTimeDeserialization() { [EOL]     String json = "'1:18:02 PM'"; [EOL]     Time extracted = gson.fromJson(json, Time.class); [EOL]     assertEqualsTime(extracted, 13, 18, 02); [EOL] } <line_num>: 271,275
public void testDefaultDateSerializationUsingBuilder() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     Date now = new Date(); [EOL]     String json = gson.toJson(now); [EOL]     assertEquals("\"" + DateFormat.getDateTimeInstance().format(now) + "\"", json); [EOL] } <line_num>: 277,282
public void testDefaultDateDeserializationUsingBuilder() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     Date now = new Date(); [EOL]     String json = gson.toJson(now); [EOL]     Date extracted = gson.fromJson(json, Date.class); [EOL]     assertEquals(now.toString(), extracted.toString()); [EOL] } <line_num>: 284,290
public void testDefaultCalendarSerialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = gson.toJson(Calendar.getInstance()); [EOL]     assertTrue(json.contains("year")); [EOL]     assertTrue(json.contains("month")); [EOL]     assertTrue(json.contains("dayOfMonth")); [EOL]     assertTrue(json.contains("hourOfDay")); [EOL]     assertTrue(json.contains("minute")); [EOL]     assertTrue(json.contains("second")); [EOL] } <line_num>: 292,301
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] } <line_num>: 303,313
public void testDefaultGregorianCalendarSerialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     GregorianCalendar cal = new GregorianCalendar(); [EOL]     String json = gson.toJson(cal); [EOL]     assertTrue(json.contains("year")); [EOL]     assertTrue(json.contains("month")); [EOL]     assertTrue(json.contains("dayOfMonth")); [EOL]     assertTrue(json.contains("hourOfDay")); [EOL]     assertTrue(json.contains("minute")); [EOL]     assertTrue(json.contains("second")); [EOL] } <line_num>: 315,325
public void testDefaultGregorianCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     GregorianCalendar cal = gson.fromJson(json, GregorianCalendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] } <line_num>: 327,337
public void testDateSerializationWithPattern() throws Exception { [EOL]     String pattern = "yyyy-MM-dd"; [EOL]     DateFormat formatter = new SimpleDateFormat(pattern); [EOL]     Gson gson = new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create(); [EOL]     Date now = new Date(); [EOL]     String json = gson.toJson(now); [EOL]     assertEquals("\"" + formatter.format(now) + "\"", json); [EOL] } <line_num>: 339,346
@SuppressWarnings("deprecation") [EOL] public void testDateDeserializationWithPattern() throws Exception { [EOL]     String pattern = "yyyy-MM-dd"; [EOL]     Gson gson = new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create(); [EOL]     Date now = new Date(); [EOL]     String json = gson.toJson(now); [EOL]     Date extracted = gson.fromJson(json, Date.class); [EOL]     assertEquals(now.getYear(), extracted.getYear()); [EOL]     assertEquals(now.getMonth(), extracted.getMonth()); [EOL]     assertEquals(now.getDay(), extracted.getDay()); [EOL] } <line_num>: 348,358
public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { [EOL]     return new Date(); [EOL] } <line_num>: 366,369
public void testDateSerializationWithPatternNotOverridenByTypeAdapter() throws Exception { [EOL]     String pattern = "yyyy-MM-dd"; [EOL]     DateFormat formatter = new SimpleDateFormat(pattern); [EOL]     Gson gson = new GsonBuilder().setDateFormat(pattern).registerTypeAdapter(Date.class, new JsonDeserializer<Date>() { [EOL]  [EOL]         public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { [EOL]             return new Date(); [EOL]         } [EOL]     }).create(); [EOL]     Date now = new Date(); [EOL]     String expectedDateString = "\"" + formatter.format(now) + "\""; [EOL]     String json = gson.toJson(now); [EOL]     assertEquals(expectedDateString, json); [EOL] } <line_num>: 360,377
String getExpectedJson() { [EOL]     return "{\"value\":" + value.toEngineeringString() + "}"; [EOL] } <line_num>: 387,389
String getExpectedJson() { [EOL]     return "{\"value\":" + value + "}"; [EOL] } <line_num>: 400,402
public void testPropertiesSerialization() { [EOL]     Properties props = new Properties(); [EOL]     props.setProperty("foo", "bar"); [EOL]     String json = gson.toJson(props); [EOL]     String expected = "{\"foo\":\"bar\"}"; [EOL]     assertEquals(expected, json); [EOL] } <line_num>: 405,411
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] } <line_num>: 413,417
public void testTreeSetSerialization() { [EOL]     TreeSet<String> treeSet = new TreeSet<String>(); [EOL]     treeSet.add("Value1"); [EOL]     String json = gson.toJson(treeSet); [EOL]     assertEquals("[\"Value1\"]", json); [EOL] } <line_num>: 419,424
public void testTreeSetDeserialization() { [EOL]     String json = "['Value1']"; [EOL]     Type type = new TypeToken<TreeSet<String>>() { [EOL]     }.getType(); [EOL]     TreeSet<String> treeSet = gson.fromJson(json, type); [EOL]     assertTrue(treeSet.contains("Value1")); [EOL] } <line_num>: 426,431
