public void testBaseClassSerializerInvokedForBaseClassFields() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new BaseSerializer()).registerTypeAdapter(Sub.class, new SubSerializer()).create(); [EOL]     ClassWithBaseField target = new ClassWithBaseField(new Base()); [EOL]     JsonObject json = (JsonObject) gson.toJsonTree(target); [EOL]     JsonObject base = json.get("base").getAsJsonObject(); [EOL]     assertEquals(BaseSerializer.NAME, base.get(Base.SERIALIZER_KEY).getAsString()); [EOL] } <line_num>: 45,54
public void testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new BaseSerializer()).registerTypeAdapter(Sub.class, new SubSerializer()).create(); [EOL]     ClassWithBaseField target = new ClassWithBaseField(new Sub()); [EOL]     JsonObject json = (JsonObject) gson.toJsonTree(target); [EOL]     JsonObject base = json.get("base").getAsJsonObject(); [EOL]     assertEquals(SubSerializer.NAME, base.get(Base.SERIALIZER_KEY).getAsString()); [EOL] } <line_num>: 56,65
public void testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new BaseSerializer()).registerTypeAdapter(Sub.class, new SubSerializer()).create(); [EOL]     ClassWithBaseArrayField target = new ClassWithBaseArrayField(new Base[] { new Sub(), new Sub() }); [EOL]     JsonObject json = (JsonObject) gson.toJsonTree(target); [EOL]     JsonArray array = json.get("base").getAsJsonArray(); [EOL]     for (JsonElement element : array) { [EOL]         JsonElement serializerKey = element.getAsJsonObject().get(Base.SERIALIZER_KEY); [EOL]         assertEquals(SubSerializer.NAME, serializerKey.getAsString()); [EOL]     } [EOL] } <line_num>: 67,79
public void testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new BaseSerializer()).create(); [EOL]     ClassWithBaseField target = new ClassWithBaseField(new Sub()); [EOL]     JsonObject json = (JsonObject) gson.toJsonTree(target); [EOL]     JsonObject base = json.get("base").getAsJsonObject(); [EOL]     assertEquals(BaseSerializer.NAME, base.get(Base.SERIALIZER_KEY).getAsString()); [EOL] } <line_num>: 81,89
public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) { [EOL]     return null; [EOL] } <line_num>: 94,96
public void testSerializerReturnsNull() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base>() { [EOL]  [EOL]         public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             return null; [EOL]         } [EOL]     }).create(); [EOL]     JsonElement json = gson.toJsonTree(new Base()); [EOL]     assertTrue(json.isJsonNull()); [EOL] } <line_num>: 91,101
