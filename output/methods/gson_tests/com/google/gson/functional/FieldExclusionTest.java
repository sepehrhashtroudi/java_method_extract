public Inner(String value) { [EOL]     super(value); [EOL] } <line_num>: 75,77
public NestedClass(String value) { [EOL]     this.value = value; [EOL] } <line_num>: 84,86
@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     outer = new Outer(); [EOL] } <line_num>: 36,40
public void testDefaultInnerClassExclusion() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] } <line_num>: 42,52
public void testInnerClassExclusion() throws Exception { [EOL]     Gson gson = new GsonBuilder().disableInnerClassSerialization().create(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals("", result); [EOL] } <line_num>: 54,59
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] } <line_num>: 61,71
public String toJson() { [EOL]     return "{\"value\":\"" + value + "\"}"; [EOL] } <line_num>: 88,90
