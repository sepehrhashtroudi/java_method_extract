MyObject() { [EOL]     this("hello", "world", 42); [EOL] } <line_num>: 130,132
public MyObject(String a, String b, int i) { [EOL]     this.a = a; [EOL]     this.b = b; [EOL]     this.i = i; [EOL] } <line_num>: 134,138
@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     gson = new Gson(); [EOL] } <line_num>: 36,40
public void testSingleThreadSerialization() { [EOL]     MyObject myObj = new MyObject(); [EOL]     for (int i = 0; i < 10; i++) { [EOL]         gson.toJson(myObj); [EOL]     } [EOL] } <line_num>: 46,51
public void testSingleThreadDeserialization() { [EOL]     for (int i = 0; i < 10; i++) { [EOL]         gson.fromJson("{'a':'hello','b':'world','i':1}", MyObject.class); [EOL]     } [EOL] } <line_num>: 57,61
public void run() { [EOL]     MyObject myObj = new MyObject(); [EOL]     try { [EOL]         startLatch.await(); [EOL]         for (int i = 0; i < 10; i++) { [EOL]             gson.toJson(myObj); [EOL]         } [EOL]     } catch (Throwable t) { [EOL]         failed.set(true); [EOL]     } finally { [EOL]         finishedLatch.countDown(); [EOL]     } [EOL] } <line_num>: 74,86
public void testMultiThreadSerialization() throws InterruptedException { [EOL]     final CountDownLatch startLatch = new CountDownLatch(1); [EOL]     final CountDownLatch finishedLatch = new CountDownLatch(10); [EOL]     final AtomicBoolean failed = new AtomicBoolean(false); [EOL]     ExecutorService executor = Executors.newFixedThreadPool(10); [EOL]     for (int taskCount = 0; taskCount < 10; taskCount++) { [EOL]         executor.execute(new Runnable() { [EOL]  [EOL]             public void run() { [EOL]                 MyObject myObj = new MyObject(); [EOL]                 try { [EOL]                     startLatch.await(); [EOL]                     for (int i = 0; i < 10; i++) { [EOL]                         gson.toJson(myObj); [EOL]                     } [EOL]                 } catch (Throwable t) { [EOL]                     failed.set(true); [EOL]                 } finally { [EOL]                     finishedLatch.countDown(); [EOL]                 } [EOL]             } [EOL]         }); [EOL]     } [EOL]     startLatch.countDown(); [EOL]     finishedLatch.await(); [EOL]     assertFalse(failed.get()); [EOL] } <line_num>: 67,92
public void run() { [EOL]     try { [EOL]         startLatch.await(); [EOL]         for (int i = 0; i < 10; i++) { [EOL]             gson.fromJson("{'a':'hello','b':'world','i':1}", MyObject.class); [EOL]         } [EOL]     } catch (Throwable t) { [EOL]         failed.set(true); [EOL]     } finally { [EOL]         finishedLatch.countDown(); [EOL]     } [EOL] } <line_num>: 105,116
public void testMultiThreadDeserialization() throws InterruptedException { [EOL]     final CountDownLatch startLatch = new CountDownLatch(1); [EOL]     final CountDownLatch finishedLatch = new CountDownLatch(10); [EOL]     final AtomicBoolean failed = new AtomicBoolean(false); [EOL]     ExecutorService executor = Executors.newFixedThreadPool(10); [EOL]     for (int taskCount = 0; taskCount < 10; taskCount++) { [EOL]         executor.execute(new Runnable() { [EOL]  [EOL]             public void run() { [EOL]                 try { [EOL]                     startLatch.await(); [EOL]                     for (int i = 0; i < 10; i++) { [EOL]                         gson.fromJson("{'a':'hello','b':'world','i':1}", MyObject.class); [EOL]                     } [EOL]                 } catch (Throwable t) { [EOL]                     failed.set(true); [EOL]                 } finally { [EOL]                     finishedLatch.countDown(); [EOL]                 } [EOL]             } [EOL]         }); [EOL]     } [EOL]     startLatch.countDown(); [EOL]     finishedLatch.await(); [EOL]     assertFalse(failed.get()); [EOL] } <line_num>: 98,122
