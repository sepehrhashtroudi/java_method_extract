@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     gson = new Gson(); [EOL] } <line_num>: 42,46
public void testWriterForSerialization() throws Exception { [EOL]     Writer writer = new StringWriter(); [EOL]     BagOfPrimitives src = new BagOfPrimitives(); [EOL]     gson.toJson(src, writer); [EOL]     assertEquals(src.getExpectedJson(), writer.toString()); [EOL] } <line_num>: 48,53
public void testReaderForDeserialization() throws Exception { [EOL]     BagOfPrimitives expected = new BagOfPrimitives(); [EOL]     Reader json = new StringReader(expected.getExpectedJson()); [EOL]     BagOfPrimitives actual = gson.fromJson(json, BagOfPrimitives.class); [EOL]     assertEquals(expected, actual); [EOL] } <line_num>: 55,60
public void testTopLevelNullObjectSerializationWithWriter() { [EOL]     StringWriter writer = new StringWriter(); [EOL]     gson.toJson(null, writer); [EOL]     assertEquals("", writer.toString()); [EOL] } <line_num>: 62,66
public void testTopLevelNullObjectDeserializationWithReader() { [EOL]     StringReader reader = new StringReader("null"); [EOL]     Integer nullIntObject = gson.fromJson(reader, Integer.class); [EOL]     assertNull(nullIntObject); [EOL] } <line_num>: 68,72
public void testTopLevelNullObjectSerializationWithWriterAndSerializeNulls() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     StringWriter writer = new StringWriter(); [EOL]     gson.toJson(null, writer); [EOL]     assertEquals("null", writer.toString()); [EOL] } <line_num>: 74,79
public void testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     StringReader reader = new StringReader("null"); [EOL]     Integer nullIntObject = gson.fromJson(reader, Integer.class); [EOL]     assertNull(nullIntObject); [EOL] } <line_num>: 81,86
public void testReadWriteTwoStrings() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     CharArrayWriter writer = new CharArrayWriter(); [EOL]     writer.write(gson.toJson("one").toCharArray()); [EOL]     writer.write(gson.toJson("two").toCharArray()); [EOL]     CharArrayReader reader = new CharArrayReader(writer.toCharArray()); [EOL]     JsonStreamParser parser = new JsonStreamParser(reader); [EOL]     String actualOne = gson.fromJson(parser.next(), String.class); [EOL]     assertEquals("one", actualOne); [EOL]     String actualTwo = gson.fromJson(parser.next(), String.class); [EOL]     assertEquals("two", actualTwo); [EOL] } <line_num>: 88,99
public void testReadWriteTwoObjects() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     CharArrayWriter writer = new CharArrayWriter(); [EOL]     BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, "one"); [EOL]     writer.write(gson.toJson(expectedOne).toCharArray()); [EOL]     BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, "two"); [EOL]     writer.write(gson.toJson(expectedTwo).toCharArray()); [EOL]     CharArrayReader reader = new CharArrayReader(writer.toCharArray()); [EOL]     JsonStreamParser parser = new JsonStreamParser(reader); [EOL]     BagOfPrimitives actualOne = gson.fromJson(parser.next(), BagOfPrimitives.class); [EOL]     assertEquals("one", actualOne.stringValue); [EOL]     BagOfPrimitives actualTwo = gson.fromJson(parser.next(), BagOfPrimitives.class); [EOL]     assertEquals("two", actualTwo.stringValue); [EOL]     assertFalse(parser.hasNext()); [EOL] } <line_num>: 101,115
