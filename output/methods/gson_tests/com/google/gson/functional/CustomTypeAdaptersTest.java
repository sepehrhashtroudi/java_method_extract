public Foo() { [EOL]     this(0, 0L); [EOL] } <line_num>: 185,187
public Foo(int key, long value) { [EOL]     this.key = key; [EOL]     this.value = value; [EOL] } <line_num>: 189,192
public StringHolder(String string) { [EOL]     String[] parts = string.split(":"); [EOL]     part1 = parts[0]; [EOL]     part2 = parts[1]; [EOL] } <line_num>: 302,306
public StringHolder(String part1, String part2) { [EOL]     this.part1 = part1; [EOL]     this.part2 = part2; [EOL] } <line_num>: 307,310
@SuppressWarnings("unused") [EOL] private DataHolder() { [EOL]     this(""); [EOL] } <line_num>: 431,434
public DataHolder(String data) { [EOL]     this.data = data; [EOL] } <line_num>: 436,438
@SuppressWarnings("unused") [EOL] private DataHolderWrapper() { [EOL]     this(null); [EOL] } <line_num>: 445,448
public DataHolderWrapper(DataHolder data) { [EOL]     this.wrappedData = data; [EOL] } <line_num>: 450,452
@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     builder = new GsonBuilder(); [EOL] } <line_num>: 50,54
public JsonElement serialize(ClassWithCustomTypeConverter src, Type typeOfSrc, JsonSerializationContext context) { [EOL]     JsonObject json = new JsonObject(); [EOL]     json.addProperty("bag", 5); [EOL]     json.addProperty("value", 25); [EOL]     return json; [EOL] } <line_num>: 59,65
public void testCustomSerializers() { [EOL]     Gson gson = builder.registerTypeAdapter(ClassWithCustomTypeConverter.class, new JsonSerializer<ClassWithCustomTypeConverter>() { [EOL]  [EOL]         public JsonElement serialize(ClassWithCustomTypeConverter src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             JsonObject json = new JsonObject(); [EOL]             json.addProperty("bag", 5); [EOL]             json.addProperty("value", 25); [EOL]             return json; [EOL]         } [EOL]     }).create(); [EOL]     ClassWithCustomTypeConverter target = new ClassWithCustomTypeConverter(); [EOL]     assertEquals("{\"bag\":5,\"value\":25}", gson.toJson(target)); [EOL] } <line_num>: 56,69
public ClassWithCustomTypeConverter deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) { [EOL]     JsonObject jsonObject = json.getAsJsonObject(); [EOL]     int value = jsonObject.get("bag").getAsInt(); [EOL]     return new ClassWithCustomTypeConverter(new BagOfPrimitives(value, value, false, ""), value); [EOL] } <line_num>: 74,80
public void testCustomDeserializers() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(ClassWithCustomTypeConverter.class, new JsonDeserializer<ClassWithCustomTypeConverter>() { [EOL]  [EOL]         public ClassWithCustomTypeConverter deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) { [EOL]             JsonObject jsonObject = json.getAsJsonObject(); [EOL]             int value = jsonObject.get("bag").getAsInt(); [EOL]             return new ClassWithCustomTypeConverter(new BagOfPrimitives(value, value, false, ""), value); [EOL]         } [EOL]     }).create(); [EOL]     String json = "{\"bag\":5,\"value\":25}"; [EOL]     ClassWithCustomTypeConverter target = gson.fromJson(json, ClassWithCustomTypeConverter.class); [EOL]     assertEquals(5, target.getBag().getIntValue()); [EOL] } <line_num>: 71,85
public void disable_testCustomSerializersOfSelf() { [EOL]     Gson gson = createGsonObjectWithFooTypeAdapter(); [EOL]     Gson basicGson = new Gson(); [EOL]     Foo newFooObject = new Foo(1, 2L); [EOL]     String jsonFromCustomSerializer = gson.toJson(newFooObject); [EOL]     String jsonFromGson = basicGson.toJson(newFooObject); [EOL]     assertEquals(jsonFromGson, jsonFromCustomSerializer); [EOL] } <line_num>: 87,95
public void disable_testCustomDeserializersOfSelf() { [EOL]     Gson gson = createGsonObjectWithFooTypeAdapter(); [EOL]     Gson basicGson = new Gson(); [EOL]     Foo expectedFoo = new Foo(1, 2L); [EOL]     String json = basicGson.toJson(expectedFoo); [EOL]     Foo newFooObject = gson.fromJson(json, Foo.class); [EOL]     assertEquals(expectedFoo.key, newFooObject.key); [EOL]     assertEquals(expectedFoo.value, newFooObject.value); [EOL] } <line_num>: 97,106
public JsonElement serialize(BagOfPrimitives src, Type typeOfSrc, JsonSerializationContext context) { [EOL]     return new JsonPrimitive(6); [EOL] } <line_num>: 111,114
public void testCustomNestedSerializers() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(BagOfPrimitives.class, new JsonSerializer<BagOfPrimitives>() { [EOL]  [EOL]         public JsonElement serialize(BagOfPrimitives src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             return new JsonPrimitive(6); [EOL]         } [EOL]     }).create(); [EOL]     ClassWithCustomTypeConverter target = new ClassWithCustomTypeConverter(); [EOL]     assertEquals("{\"bag\":6,\"value\":10}", gson.toJson(target)); [EOL] } <line_num>: 108,118
public BagOfPrimitives deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { [EOL]     int value = json.getAsInt(); [EOL]     return new BagOfPrimitives(value, value, false, ""); [EOL] } <line_num>: 123,127
public void testCustomNestedDeserializers() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(BagOfPrimitives.class, new JsonDeserializer<BagOfPrimitives>() { [EOL]  [EOL]         public BagOfPrimitives deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { [EOL]             int value = json.getAsInt(); [EOL]             return new BagOfPrimitives(value, value, false, ""); [EOL]         } [EOL]     }).create(); [EOL]     String json = "{\"bag\":7,\"value\":25}"; [EOL]     ClassWithCustomTypeConverter target = gson.fromJson(json, ClassWithCustomTypeConverter.class); [EOL]     assertEquals(7, target.getBag().getIntValue()); [EOL] } <line_num>: 120,132
public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) { [EOL]     JsonObject json = new JsonObject(); [EOL]     json.addProperty("value", src.baseValue); [EOL]     return json; [EOL] } <line_num>: 136,140
public void testCustomTypeAdapterDoesNotAppliesToSubClasses() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base>() { [EOL]  [EOL]         public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             JsonObject json = new JsonObject(); [EOL]             json.addProperty("value", src.baseValue); [EOL]             return json; [EOL]         } [EOL]     }).create(); [EOL]     Base b = new Base(); [EOL]     String json = gson.toJson(b); [EOL]     assertTrue(json.contains("value")); [EOL]     b = new Derived(); [EOL]     json = gson.toJson(b); [EOL]     assertTrue(json.contains("derivedValue")); [EOL] } <line_num>: 134,148
public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) { [EOL]     JsonObject json = new JsonObject(); [EOL]     json.addProperty("value", src.baseValue); [EOL]     return json; [EOL] } <line_num>: 152,156
public void testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base>() { [EOL]  [EOL]         public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             JsonObject json = new JsonObject(); [EOL]             json.addProperty("value", src.baseValue); [EOL]             return json; [EOL]         } [EOL]     }).create(); [EOL]     Base b = new Base(); [EOL]     String json = gson.toJson(b); [EOL]     assertTrue(json.contains("value")); [EOL]     b = new Derived(); [EOL]     json = gson.toJson(b, Base.class); [EOL]     assertTrue(json.contains("value")); [EOL]     assertFalse(json.contains("derivedValue")); [EOL] } <line_num>: 150,165
private Gson createGsonObjectWithFooTypeAdapter() { [EOL]     return new GsonBuilder().registerTypeAdapter(Foo.class, new FooTypeAdapter()).create(); [EOL] } <line_num>: 177,179
public Foo deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { [EOL]     return context.deserialize(json, typeOfT); [EOL] } <line_num>: 196,199
public JsonElement serialize(Foo src, Type typeOfSrc, JsonSerializationContext context) { [EOL]     return context.serialize(src, typeOfSrc); [EOL] } <line_num>: 201,203
public JsonElement serialize(Long src, Type typeOfSrc, JsonSerializationContext context) { [EOL]     customSerializerInvoked.value = true; [EOL]     return new JsonPrimitive(src); [EOL] } <line_num>: 210,213
public void testCustomSerializerForLong() { [EOL]     final ClassWithBooleanField customSerializerInvoked = new ClassWithBooleanField(); [EOL]     customSerializerInvoked.value = false; [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Long.class, new JsonSerializer<Long>() { [EOL]  [EOL]         public JsonElement serialize(Long src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             customSerializerInvoked.value = true; [EOL]             return new JsonPrimitive(src); [EOL]         } [EOL]     }).serializeNulls().create(); [EOL]     ClassWithWrapperLongField src = new ClassWithWrapperLongField(); [EOL]     String json = gson.toJson(src); [EOL]     assertTrue(json.contains("\"value\":null")); [EOL]     assertFalse(customSerializerInvoked.value); [EOL]     customSerializerInvoked.value = false; [EOL]     src.value = 10L; [EOL]     json = gson.toJson(src); [EOL]     assertTrue(json.contains("\"value\":10")); [EOL]     assertTrue(customSerializerInvoked.value); [EOL] } <line_num>: 206,225
public Long deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { [EOL]     customDeserializerInvoked.value = true; [EOL]     if (json == null || json.isJsonNull()) { [EOL]         return null; [EOL]     } [EOL]     Number number = json.getAsJsonPrimitive().getAsNumber(); [EOL]     return number == null ? null : number.longValue(); [EOL] } <line_num>: 231,239
public void testCustomDeserializerForLong() { [EOL]     final ClassWithBooleanField customDeserializerInvoked = new ClassWithBooleanField(); [EOL]     customDeserializerInvoked.value = false; [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Long.class, new JsonDeserializer<Long>() { [EOL]  [EOL]         public Long deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { [EOL]             customDeserializerInvoked.value = true; [EOL]             if (json == null || json.isJsonNull()) { [EOL]                 return null; [EOL]             } [EOL]             Number number = json.getAsJsonPrimitive().getAsNumber(); [EOL]             return number == null ? null : number.longValue(); [EOL]         } [EOL]     }).create(); [EOL]     String json = "{'value':null}"; [EOL]     ClassWithWrapperLongField target = gson.fromJson(json, ClassWithWrapperLongField.class); [EOL]     assertNull(target.value); [EOL]     assertFalse(customDeserializerInvoked.value); [EOL]     customDeserializerInvoked.value = false; [EOL]     json = "{'value':10}"; [EOL]     target = gson.fromJson(json, ClassWithWrapperLongField.class); [EOL]     assertEquals(10L, target.value.longValue()); [EOL]     assertTrue(customDeserializerInvoked.value); [EOL] } <line_num>: 227,251
public JsonElement serialize(byte[] src, Type typeOfSrc, JsonSerializationContext context) { [EOL]     StringBuilder sb = new StringBuilder(src.length); [EOL]     for (byte b : src) { [EOL]         sb.append(b); [EOL]     } [EOL]     return new JsonPrimitive(sb.toString()); [EOL] } <line_num>: 263,269
public void testCustomByteArraySerializer() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(byte[].class, new JsonSerializer<byte[]>() { [EOL]  [EOL]         public JsonElement serialize(byte[] src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             StringBuilder sb = new StringBuilder(src.length); [EOL]             for (byte b : src) { [EOL]                 sb.append(b); [EOL]             } [EOL]             return new JsonPrimitive(sb.toString()); [EOL]         } [EOL]     }).create(); [EOL]     byte[] data = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }; [EOL]     String json = gson.toJson(data); [EOL]     assertEquals("\"0123456789\"", json); [EOL] } <line_num>: 261,274
public byte[] deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { [EOL]     String str = json.getAsString(); [EOL]     byte[] data = new byte[str.length()]; [EOL]     for (int i = 0; i < data.length; ++i) { [EOL]         data[i] = Byte.parseByte("" + str.charAt(i)); [EOL]     } [EOL]     return data; [EOL] } <line_num>: 279,287
public void testCustomByteArrayDeserializerAndInstanceCreator() { [EOL]     GsonBuilder gsonBuilder = new GsonBuilder().registerTypeAdapter(byte[].class, new JsonDeserializer<byte[]>() { [EOL]  [EOL]         public byte[] deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { [EOL]             String str = json.getAsString(); [EOL]             byte[] data = new byte[str.length()]; [EOL]             for (int i = 0; i < data.length; ++i) { [EOL]                 data[i] = Byte.parseByte("" + str.charAt(i)); [EOL]             } [EOL]             return data; [EOL]         } [EOL]     }); [EOL]     Gson gson = gsonBuilder.create(); [EOL]     String json = "'0123456789'"; [EOL]     byte[] actual = gson.fromJson(json, byte[].class); [EOL]     byte[] expected = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }; [EOL]     for (int i = 0; i < actual.length; ++i) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL] } <line_num>: 276,296
public StringHolder createInstance(Type type) { [EOL]     return new StringHolder("unknown:thing"); [EOL] } <line_num>: 316,319
public StringHolder deserialize(JsonElement src, Type type, JsonDeserializationContext context) { [EOL]     return new StringHolder(src.getAsString()); [EOL] } <line_num>: 321,324
public JsonElement serialize(StringHolder src, Type typeOfSrc, JsonSerializationContext context) { [EOL]     String contents = src.part1 + ':' + src.part2; [EOL]     return new JsonPrimitive(contents); [EOL] } <line_num>: 326,330
public void testCustomAdapterInvokedForCollectionElementSerializationWithType() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     Type setType = new TypeToken<Set<StringHolder>>() { [EOL]     }.getType(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Set<StringHolder> setOfHolders = new HashSet<StringHolder>(); [EOL]     setOfHolders.add(holder); [EOL]     String json = gson.toJson(setOfHolders, setType); [EOL]     assertTrue(json.contains("Jacob:Tomaw")); [EOL] } <line_num>: 334,344
public void testCustomAdapterInvokedForCollectionElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Set<StringHolder> setOfHolders = new HashSet<StringHolder>(); [EOL]     setOfHolders.add(holder); [EOL]     String json = gson.toJson(setOfHolders); [EOL]     assertTrue(json.contains("Jacob:Tomaw")); [EOL] } <line_num>: 347,356
public void testCustomAdapterInvokedForCollectionElementDeserialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     Type setType = new TypeToken<Set<StringHolder>>() { [EOL]     }.getType(); [EOL]     Set<StringHolder> setOfHolders = gson.fromJson("['Jacob:Tomaw']", setType); [EOL]     assertEquals(1, setOfHolders.size()); [EOL]     StringHolder foo = setOfHolders.iterator().next(); [EOL]     assertEquals("Jacob", foo.part1); [EOL]     assertEquals("Tomaw", foo.part2); [EOL] } <line_num>: 359,369
public void testCustomAdapterInvokedForMapElementSerializationWithType() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     Type mapType = new TypeToken<Map<String, StringHolder>>() { [EOL]     }.getType(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders, mapType); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] } <line_num>: 372,382
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] } <line_num>: 385,394
public void testCustomAdapterInvokedForMapElementDeserialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     Type mapType = new TypeToken<Map<String, StringHolder>>() { [EOL]     }.getType(); [EOL]     Map<String, StringHolder> mapOfFoo = gson.fromJson("{'foo':'Jacob:Tomaw'}", mapType); [EOL]     assertEquals(1, mapOfFoo.size()); [EOL]     StringHolder foo = mapOfFoo.get("foo"); [EOL]     assertEquals("Jacob", foo.part1); [EOL]     assertEquals("Tomaw", foo.part2); [EOL] } <line_num>: 397,407
public void testEnsureCustomSerializerNotInvokedForNullValues() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(DataHolder.class, new DataHolderSerializer()).create(); [EOL]     DataHolderWrapper target = new DataHolderWrapper(new DataHolder("abc")); [EOL]     String json = gson.toJson(target); [EOL]     assertEquals("{\"wrappedData\":{\"myData\":\"abc\"}}", json); [EOL] } <line_num>: 409,416
public void testEnsureCustomDeserializerNotInvokedForNullValues() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(DataHolder.class, new DataHolderDeserializer()).create(); [EOL]     String json = "{wrappedData:null}"; [EOL]     DataHolderWrapper actual = gson.fromJson(json, DataHolderWrapper.class); [EOL]     assertNull(actual.wrappedData); [EOL] } <line_num>: 418,425
public JsonElement serialize(DataHolder src, Type typeOfSrc, JsonSerializationContext context) { [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.addProperty("myData", src.data); [EOL]     return obj; [EOL] } <line_num>: 456,460
public DataHolder deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { [EOL]     JsonObject jsonObj = json.getAsJsonObject(); [EOL]     JsonElement jsonElement = jsonObj.get("data"); [EOL]     if (jsonElement == null || jsonElement.isJsonNull()) { [EOL]         return new DataHolder(null); [EOL]     } [EOL]     return new DataHolder(jsonElement.getAsString()); [EOL] } <line_num>: 464,472
