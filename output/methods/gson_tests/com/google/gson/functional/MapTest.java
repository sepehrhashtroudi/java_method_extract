@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     gson = new Gson(); [EOL] } <line_num>: 42,46
public void testMapSerialization() { [EOL]     Map<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]     map.put("a", 1); [EOL]     map.put("b", 2); [EOL]     Type typeOfMap = new TypeToken<Map<String, Integer>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(map, typeOfMap); [EOL]     assertTrue(json.contains("\"a\":1")); [EOL]     assertTrue(json.contains("\"b\":2")); [EOL] } <line_num>: 48,56
public void testMapDeserialization() { [EOL]     String json = "{\"a\":1,\"b\":2}"; [EOL]     Type typeOfMap = new TypeToken<Map<String, Integer>>() { [EOL]     }.getType(); [EOL]     Map<String, Integer> target = gson.fromJson(json, typeOfMap); [EOL]     assertEquals(1, target.get("a").intValue()); [EOL]     assertEquals(2, target.get("b").intValue()); [EOL] } <line_num>: 58,64
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public void testRawMapSerialization() { [EOL]     Map map = new LinkedHashMap(); [EOL]     map.put("a", 1); [EOL]     map.put("b", "string"); [EOL]     String json = gson.toJson(map); [EOL]     assertTrue(json.contains("\"a\":1")); [EOL]     assertTrue(json.contains("\"b\":\"string\"")); [EOL] } <line_num>: 66,74
public void testMapSerializationEmpty() { [EOL]     Map<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]     Type typeOfMap = new TypeToken<Map<String, Integer>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(map, typeOfMap); [EOL]     assertEquals("{}", json); [EOL] } <line_num>: 76,81
public void testMapDeserializationEmpty() { [EOL]     Type typeOfMap = new TypeToken<Map<String, Integer>>() { [EOL]     }.getType(); [EOL]     Map<String, Integer> map = gson.fromJson("{}", typeOfMap); [EOL]     assertTrue(map.isEmpty()); [EOL] } <line_num>: 83,87
public void testMapSerializationWithNullValue() { [EOL]     Map<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]     map.put("abc", null); [EOL]     Type typeOfMap = new TypeToken<Map<String, Integer>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(map, typeOfMap); [EOL]     assertEquals("{}", json); [EOL] } <line_num>: 89,97
public void testMapDeserializationWithNullValue() { [EOL]     Type typeOfMap = new TypeToken<Map<String, Integer>>() { [EOL]     }.getType(); [EOL]     Map<String, Integer> map = gson.fromJson("{\"abc\":null}", typeOfMap); [EOL]     assertEquals(1, map.size()); [EOL]     assertNull(map.get("abc")); [EOL] } <line_num>: 99,104
public void testMapSerializationWithNullValueButSerializeNulls() { [EOL]     gson = new GsonBuilder().serializeNulls().create(); [EOL]     Map<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]     map.put("abc", null); [EOL]     Type typeOfMap = new TypeToken<Map<String, Integer>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(map, typeOfMap); [EOL]     assertEquals("{\"abc\":null}", json); [EOL] } <line_num>: 106,114
public void testMapSerializationWithNullKey() { [EOL]     Map<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]     map.put(null, 123); [EOL]     Type typeOfMap = new TypeToken<Map<String, Integer>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(map, typeOfMap); [EOL]     assertEquals("{\"null\":123}", json); [EOL] } <line_num>: 116,123
public void testMapDeserializationWithNullKey() { [EOL]     Type typeOfMap = new TypeToken<Map<String, Integer>>() { [EOL]     }.getType(); [EOL]     Map<String, Integer> map = gson.fromJson("{\"null\":123}", typeOfMap); [EOL]     assertEquals(1, map.size()); [EOL]     assertNull(map.get(null)); [EOL] } <line_num>: 125,130
public void testMapSerializationWithIntegerKeys() { [EOL]     Map<Integer, String> map = new LinkedHashMap<Integer, String>(); [EOL]     map.put(123, "456"); [EOL]     Type typeOfMap = new TypeToken<Map<Integer, String>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(map, typeOfMap); [EOL]     assertEquals("{\"123\":\"456\"}", json); [EOL] } <line_num>: 132,139
public void testMapDeserializationWithIntegerKeys() { [EOL]     Type typeOfMap = new TypeToken<Map<Integer, String>>() { [EOL]     }.getType(); [EOL]     Map<Integer, String> map = gson.fromJson("{\"123\":\"456\"}", typeOfMap); [EOL]     assertEquals(1, map.size()); [EOL]     assertTrue(map.containsKey(123)); [EOL]     assertEquals("456", map.get(123)); [EOL] } <line_num>: 141,147
public void testParameterizedMapSubclassSerialization() { [EOL]     MyParameterizedMap<String, String> map = new MyParameterizedMap<String, String>(); [EOL]     map.put("a", "b"); [EOL]     Type type = new TypeToken<MyParameterizedMap<String, String>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(map, type); [EOL]     assertTrue(json.contains("\"a\":\"b\"")); [EOL] } <line_num>: 149,155
public MyParameterizedMap createInstance(Type type) { [EOL]     return new MyParameterizedMap(); [EOL] } <line_num>: 162,164
@SuppressWarnings("rawtypes") [EOL] public void testParameterizedMapSubclassDeserialization() { [EOL]     Type type = new TypeToken<MyParameterizedMap<String, Integer>>() { [EOL]     }.getType(); [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(type, new InstanceCreator<MyParameterizedMap>() { [EOL]  [EOL]         public MyParameterizedMap createInstance(Type type) { [EOL]             return new MyParameterizedMap(); [EOL]         } [EOL]     }).create(); [EOL]     String json = "{\"a\":1,\"b\":2}"; [EOL]     MyParameterizedMap<String, Integer> map = gson.fromJson(json, type); [EOL]     assertEquals(1, map.get("a").intValue()); [EOL]     assertEquals(2, map.get("b").intValue()); [EOL] } <line_num>: 157,170
public void testMapSubclassSerialization() { [EOL]     MyMap map = new MyMap(); [EOL]     map.put("a", "b"); [EOL]     String json = gson.toJson(map, MyMap.class); [EOL]     assertTrue(json.contains("\"a\":\"b\"")); [EOL] } <line_num>: 179,184
public void testMapStandardSubclassDeserialization() { [EOL]     String json = "{a:'1',b:'2'}"; [EOL]     Type type = new TypeToken<LinkedHashMap<String, String>>() { [EOL]     }.getType(); [EOL]     LinkedHashMap<String, Integer> map = gson.fromJson(json, type); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL] } <line_num>: 186,192
public MyMap createInstance(Type type) { [EOL]     return new MyMap(); [EOL] } <line_num>: 196,198
public void disable_testMapSubclassDeserialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(MyMap.class, new InstanceCreator<MyMap>() { [EOL]  [EOL]         public MyMap createInstance(Type type) { [EOL]             return new MyMap(); [EOL]         } [EOL]     }).create(); [EOL]     String json = "{\"a\":1,\"b\":2}"; [EOL]     MyMap map = gson.fromJson(json, MyMap.class); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL] } <line_num>: 194,204
public void testMapSerializationWithNullValues() { [EOL]     ClassWithAMap target = new ClassWithAMap(); [EOL]     target.map.put("name1", null); [EOL]     target.map.put("name2", "value2"); [EOL]     String json = gson.toJson(target); [EOL]     assertFalse(json.contains("name1")); [EOL]     assertTrue(json.contains("name2")); [EOL] } <line_num>: 216,223
public void testMapSerializationWithNullValuesSerialized() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     ClassWithAMap target = new ClassWithAMap(); [EOL]     target.map.put("name1", null); [EOL]     target.map.put("name2", "value2"); [EOL]     String json = gson.toJson(target); [EOL]     assertTrue(json.contains("name1")); [EOL]     assertTrue(json.contains("name2")); [EOL] } <line_num>: 228,236
public void testMapSerializationWithWildcardValues() { [EOL]     Map<String, ? extends Collection<? extends Integer>> map = new LinkedHashMap<String, Collection<Integer>>(); [EOL]     map.put("test", null); [EOL]     Type typeOfMap = new TypeToken<Map<String, ? extends Collection<? extends Integer>>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(map, typeOfMap); [EOL]     assertEquals("{}", json); [EOL] } <line_num>: 238,247
public void testMapDeserializationWithWildcardValues() { [EOL]     Type typeOfMap = new TypeToken<Map<String, ? extends Long>>() { [EOL]     }.getType(); [EOL]     Map<String, ? extends Long> map = gson.fromJson("{\"test\":123}", typeOfMap); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(new Long(123L), map.get("test")); [EOL] } <line_num>: 249,254
public void testMapOfMapSerialization() { [EOL]     Map<String, Map<String, String>> map = new HashMap<String, Map<String, String>>(); [EOL]     Map<String, String> nestedMap = new HashMap<String, String>(); [EOL]     nestedMap.put("1", "1"); [EOL]     nestedMap.put("2", "2"); [EOL]     map.put("nestedMap", nestedMap); [EOL]     String json = gson.toJson(map); [EOL]     assertTrue(json.contains("nestedMap")); [EOL]     assertTrue(json.contains("\"1\":\"1\"")); [EOL]     assertTrue(json.contains("\"2\":\"2\"")); [EOL] } <line_num>: 267,277
public void testMapOfMapDeserialization() { [EOL]     String json = "{nestedMap:{'2':'2','1':'1'}}"; [EOL]     Type type = new TypeToken<Map<String, Map<String, String>>>() { [EOL]     }.getType(); [EOL]     Map<String, Map<String, String>> map = gson.fromJson(json, type); [EOL]     Map<String, String> nested = map.get("nestedMap"); [EOL]     assertEquals("1", nested.get("1")); [EOL]     assertEquals("2", nested.get("2")); [EOL] } <line_num>: 282,289
public void testMapWithQuotes() { [EOL]     Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("a\"b", "c\"d"); [EOL]     String json = gson.toJson(map); [EOL]     assertEquals("{\"a\\\"b\":\"c\\\"d\"}", json); [EOL] } <line_num>: 294,299
public void testWriteMapsWithEmptyStringKey() { [EOL]     Map<String, Boolean> map = new HashMap<String, Boolean>(); [EOL]     map.put("", true); [EOL]     assertEquals("{\"\":true}", gson.toJson(map)); [EOL] } <line_num>: 304,309
public void testReadMapsWithEmptyStringKey() { [EOL]     Map<String, Boolean> map = gson.fromJson("{\"\":true}", new TypeToken<Map<String, Boolean>>() { [EOL]     }.getType()); [EOL]     assertEquals(Boolean.TRUE, map.get("")); [EOL] } <line_num>: 311,314
public void testSerializeMaps() { [EOL]     Map<String, Object> map = new LinkedHashMap<String, Object>(); [EOL]     map.put("a", 12); [EOL]     map.put("b", null); [EOL]     map.put("c", new HashMap<String, Object>()); [EOL]     assertEquals("{\"a\":12,\"b\":null,\"c\":{}}", new GsonBuilder().serializeNulls().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"b\":null,\"c\":{}}", new GsonBuilder().serializeNulls().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"c\":{}}", new GsonBuilder().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"c\":{}}", new GsonBuilder().create().toJson(map)); [EOL] } <line_num>: 319,333
