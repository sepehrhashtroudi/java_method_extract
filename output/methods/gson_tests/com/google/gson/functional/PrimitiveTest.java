@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     gson = new Gson(); [EOL] } <line_num>: 37,41
public void testPrimitiveIntegerAutoboxedSerialization() { [EOL]     assertEquals("1", gson.toJson(1)); [EOL] } <line_num>: 43,45
public void testPrimitiveIntegerAutoboxedDeserialization() { [EOL]     int expected = 1; [EOL]     int actual = gson.fromJson("1", int.class); [EOL]     assertEquals(expected, actual); [EOL]     actual = gson.fromJson("1", Integer.class); [EOL]     assertEquals(expected, actual); [EOL] } <line_num>: 47,54
public void testPrimitiveIntegerAutoboxedInASingleElementArraySerialization() { [EOL]     int[] target = { -9332 }; [EOL]     assertEquals("[-9332]", gson.toJson(target)); [EOL]     assertEquals("[-9332]", gson.toJson(target, int[].class)); [EOL]     assertEquals("[-9332]", gson.toJson(target, Integer[].class)); [EOL] } <line_num>: 56,61
public void testPrimitiveIntegerAutoboxedInASingleElementArrayDeserialization() { [EOL]     int expected = 1; [EOL]     int actual = gson.fromJson("[1]", int.class); [EOL]     assertEquals(expected, actual); [EOL]     actual = gson.fromJson("[1]", Integer.class); [EOL]     assertEquals(expected, actual); [EOL] } <line_num>: 63,70
public void testReallyLongValuesSerialization() { [EOL]     long value = 333961828784581L; [EOL]     assertEquals("333961828784581", gson.toJson(value)); [EOL] } <line_num>: 72,75
public void testReallyLongValuesDeserialization() { [EOL]     String json = "333961828784581"; [EOL]     long value = gson.fromJson(json, Long.class); [EOL]     assertEquals(333961828784581L, value); [EOL] } <line_num>: 77,81
public void testPrimitiveLongAutoboxedSerialization() { [EOL]     assertEquals("1", gson.toJson(1L, long.class)); [EOL]     assertEquals("1", gson.toJson(1L, Long.class)); [EOL] } <line_num>: 83,86
public void testPrimitiveLongAutoboxedDeserialization() { [EOL]     long expected = 1L; [EOL]     long actual = gson.fromJson("1", long.class); [EOL]     assertEquals(expected, actual); [EOL]     actual = gson.fromJson("1", Long.class); [EOL]     assertEquals(expected, actual); [EOL] } <line_num>: 88,95
public void testPrimitiveLongAutoboxedInASingleElementArraySerialization() { [EOL]     long[] target = { -23L }; [EOL]     assertEquals("[-23]", gson.toJson(target)); [EOL]     assertEquals("[-23]", gson.toJson(target, long[].class)); [EOL]     assertEquals("[-23]", gson.toJson(target, Long[].class)); [EOL] } <line_num>: 97,102
public void testPrimitiveLongAutoboxedInASingleElementArrayDeserialization() { [EOL]     long expected = 1L; [EOL]     long actual = gson.fromJson("[1]", long.class); [EOL]     assertEquals(expected, actual); [EOL]     actual = gson.fromJson("[1]", Long.class); [EOL]     assertEquals(expected, actual); [EOL] } <line_num>: 104,111
public void testPrimitiveBooleanAutoboxedSerialization() { [EOL]     assertEquals("true", gson.toJson(true)); [EOL]     assertEquals("false", gson.toJson(false)); [EOL] } <line_num>: 113,116
public void testPrimitiveBooleanAutoboxedDeserialization() { [EOL]     assertEquals(Boolean.FALSE, gson.fromJson("[false]", Boolean.class)); [EOL]     assertEquals(Boolean.TRUE, gson.fromJson("[true]", Boolean.class)); [EOL]     boolean value = gson.fromJson("false", boolean.class); [EOL]     assertEquals(false, value); [EOL]     value = gson.fromJson("true", boolean.class); [EOL]     assertEquals(true, value); [EOL] } <line_num>: 118,126
public void testPrimitiveBooleanAutoboxedInASingleElementArraySerialization() { [EOL]     boolean[] target = { false }; [EOL]     assertEquals("[false]", gson.toJson(target)); [EOL]     assertEquals("[false]", gson.toJson(target, boolean[].class)); [EOL]     assertEquals("[false]", gson.toJson(target, Boolean[].class)); [EOL] } <line_num>: 128,133
public void testPrimitiveBooleanAutoboxedInASingleElementArrayDeserialization() { [EOL]     assertEquals(Boolean.FALSE, gson.fromJson("[false]", Boolean.class)); [EOL]     assertEquals(Boolean.TRUE, gson.fromJson("[true]", Boolean.class)); [EOL]     boolean value = gson.fromJson("[false]", boolean.class); [EOL]     assertEquals(false, value); [EOL]     value = gson.fromJson("[true]", boolean.class); [EOL]     assertEquals(true, value); [EOL] } <line_num>: 135,143
public void testNumberSerialization() { [EOL]     Number expected = 1L; [EOL]     String json = gson.toJson(expected); [EOL]     assertEquals(expected.toString(), json); [EOL]     json = gson.toJson(expected, Number.class); [EOL]     assertEquals(expected.toString(), json); [EOL] } <line_num>: 145,152
public void testNumberDeserialization() { [EOL]     String json = "1"; [EOL]     Number expected = new Integer(json); [EOL]     Number actual = gson.fromJson(json, Number.class); [EOL]     assertEquals(expected.intValue(), actual.intValue()); [EOL]     json = String.valueOf(Long.MAX_VALUE); [EOL]     expected = new Long(json); [EOL]     actual = gson.fromJson(json, Number.class); [EOL]     assertEquals(expected.longValue(), actual.longValue()); [EOL] } <line_num>: 154,164
public void testPrimitiveDoubleAutoboxedSerialization() { [EOL]     assertEquals("-122.08234335", gson.toJson(-122.08234335)); [EOL]     assertEquals("122.08112002", gson.toJson(new Double(122.08112002))); [EOL] } <line_num>: 166,169
public void testPrimitiveDoubleAutoboxedDeserialization() { [EOL]     double actual = gson.fromJson("-122.08858585", double.class); [EOL]     assertEquals(-122.08858585, actual); [EOL]     actual = gson.fromJson("122.023900008000", Double.class); [EOL]     assertEquals(122.023900008, actual); [EOL] } <line_num>: 171,177
public void testPrimitiveDoubleAutoboxedInASingleElementArraySerialization() { [EOL]     double[] target = { -122.08D }; [EOL]     assertEquals("[-122.08]", gson.toJson(target)); [EOL]     assertEquals("[-122.08]", gson.toJson(target, double[].class)); [EOL]     assertEquals("[-122.08]", gson.toJson(target, Double[].class)); [EOL] } <line_num>: 179,184
public void testDoubleAsStringRepresentationDeserialization() { [EOL]     String doubleValue = "1.0043E+5"; [EOL]     Double expected = Double.valueOf(doubleValue); [EOL]     Double actual = gson.fromJson(doubleValue, Double.class); [EOL]     assertEquals(expected, actual); [EOL]     double actual1 = gson.fromJson(doubleValue, double.class); [EOL]     assertEquals(expected.doubleValue(), actual1); [EOL] } <line_num>: 186,194
public void testDoubleNoFractAsStringRepresentationDeserialization() { [EOL]     String doubleValue = "1E+5"; [EOL]     Double expected = Double.valueOf(doubleValue); [EOL]     Double actual = gson.fromJson(doubleValue, Double.class); [EOL]     assertEquals(expected, actual); [EOL]     double actual1 = gson.fromJson(doubleValue, double.class); [EOL]     assertEquals(expected.doubleValue(), actual1); [EOL] } <line_num>: 196,204
public void testLargeDoubleDeserialization() { [EOL]     String doubleValue = "1.234567899E8"; [EOL]     Double expected = Double.valueOf(doubleValue); [EOL]     Double actual = gson.fromJson(doubleValue, Double.class); [EOL]     assertEquals(expected, actual); [EOL]     double actual1 = gson.fromJson(doubleValue, double.class); [EOL]     assertEquals(expected.doubleValue(), actual1); [EOL] } <line_num>: 206,214
public void testPrimitiveDoubleAutoboxedInASingleElementArrayDeserialization() { [EOL]     double expected = -122.08; [EOL]     double actual = gson.fromJson("[-122.08]", double.class); [EOL]     assertEquals(expected, actual); [EOL]     actual = gson.fromJson("[-122.08]", Double.class); [EOL]     assertEquals(expected, actual); [EOL] } <line_num>: 216,223
public void testBigDecimalSerialization() { [EOL]     BigDecimal target = new BigDecimal("-122.0e-21"); [EOL]     String json = gson.toJson(target); [EOL]     assertEquals(target, new BigDecimal(json)); [EOL] } <line_num>: 225,229
public void testBigDecimalDeserialization() { [EOL]     BigDecimal target = new BigDecimal("-122.0e-21"); [EOL]     String json = "-122.0e-21"; [EOL]     assertEquals(target, gson.fromJson(json, BigDecimal.class)); [EOL] } <line_num>: 231,235
public void testBigDecimalInASingleElementArraySerialization() { [EOL]     BigDecimal[] target = { new BigDecimal("-122.08e-21") }; [EOL]     String json = gson.toJson(target); [EOL]     String actual = extractElementFromArray(json); [EOL]     assertEquals(target[0], new BigDecimal(actual)); [EOL]     json = gson.toJson(target, BigDecimal[].class); [EOL]     actual = extractElementFromArray(json); [EOL]     assertEquals(target[0], new BigDecimal(actual)); [EOL] } <line_num>: 237,246
public void testBigDecimalInASingleElementArrayDeserialization() { [EOL]     BigDecimal expected = new BigDecimal("-122.08e-21"); [EOL]     BigDecimal actual = gson.fromJson("[-122.08e-21]", BigDecimal.class); [EOL]     assertEquals(expected, actual); [EOL] } <line_num>: 248,252
public void testSmallValueForBigDecimalSerialization() { [EOL]     BigDecimal target = new BigDecimal("1.55"); [EOL]     String actual = gson.toJson(target); [EOL]     assertEquals(target.toString(), actual); [EOL] } <line_num>: 254,258
public void testSmallValueForBigDecimalDeserialization() { [EOL]     BigDecimal expected = new BigDecimal("1.55"); [EOL]     BigDecimal actual = gson.fromJson("1.55", BigDecimal.class); [EOL]     assertEquals(expected, actual); [EOL] } <line_num>: 260,264
public void testBigDecimalPreservePrecisionSerialization() { [EOL]     String expectedValue = "1.000"; [EOL]     BigDecimal obj = new BigDecimal(expectedValue); [EOL]     String actualValue = gson.toJson(obj); [EOL]     assertEquals(expectedValue, actualValue); [EOL] } <line_num>: 266,272
public void testBigDecimalPreservePrecisionDeserialization() { [EOL]     String json = "1.000"; [EOL]     BigDecimal expected = new BigDecimal(json); [EOL]     BigDecimal actual = gson.fromJson(json, BigDecimal.class); [EOL]     assertEquals(expected, actual); [EOL] } <line_num>: 274,280
public void testBigDecimalAsStringRepresentationDeserialization() { [EOL]     String doubleValue = "0.05E+5"; [EOL]     BigDecimal expected = new BigDecimal(doubleValue); [EOL]     BigDecimal actual = gson.fromJson(doubleValue, BigDecimal.class); [EOL]     assertEquals(expected, actual); [EOL] } <line_num>: 282,287
public void testBigDecimalNoFractAsStringRepresentationDeserialization() { [EOL]     String doubleValue = "5E+5"; [EOL]     BigDecimal expected = new BigDecimal(doubleValue); [EOL]     BigDecimal actual = gson.fromJson(doubleValue, BigDecimal.class); [EOL]     assertEquals(expected, actual); [EOL] } <line_num>: 289,294
public void testBigIntegerSerialization() { [EOL]     BigInteger target = new BigInteger("12121211243123245845384534687435634558945453489543985435"); [EOL]     assertEquals(target.toString(), gson.toJson(target)); [EOL] } <line_num>: 296,299
public void testBigIntegerDeserialization() { [EOL]     String json = "12121211243123245845384534687435634558945453489543985435"; [EOL]     BigInteger target = new BigInteger(json); [EOL]     assertEquals(target, gson.fromJson(json, BigInteger.class)); [EOL] } <line_num>: 301,305
public void testBigIntegerInASingleElementArraySerialization() { [EOL]     BigInteger[] target = { new BigInteger("1212121243434324323254365345367456456456465464564564") }; [EOL]     String json = gson.toJson(target); [EOL]     String actual = extractElementFromArray(json); [EOL]     assertEquals(target[0], new BigInteger(actual)); [EOL]     json = gson.toJson(target, BigInteger[].class); [EOL]     actual = extractElementFromArray(json); [EOL]     assertEquals(target[0], new BigInteger(actual)); [EOL] } <line_num>: 307,316
public void testBigIntegerInASingleElementArrayDeserialization() { [EOL]     BigInteger expected = new BigInteger("34343434343424242423432323243243242"); [EOL]     BigInteger actual = gson.fromJson("[34343434343424242423432323243243242]", BigInteger.class); [EOL]     assertEquals(expected, actual); [EOL] } <line_num>: 318,322
public void testSmallValueForBigIntegerSerialization() { [EOL]     BigInteger target = new BigInteger("15"); [EOL]     String actual = gson.toJson(target); [EOL]     assertEquals(target.toString(), actual); [EOL] } <line_num>: 324,328
public void testSmallValueForBigIntegerDeserialization() { [EOL]     BigInteger expected = new BigInteger("15"); [EOL]     BigInteger actual = gson.fromJson("15", BigInteger.class); [EOL]     assertEquals(expected, actual); [EOL] } <line_num>: 330,334
public void testBadValueForBigIntegerDeserialization() { [EOL]     try { [EOL]         gson.fromJson("15.099", BigInteger.class); [EOL]         fail("BigInteger can not be decimal values."); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] } <line_num>: 336,341
public void testOverridingDefaultPrimitiveSerialization() { [EOL]     CrazyLongTypeAdapter typeAdapter = new CrazyLongTypeAdapter(); [EOL]     gson = new GsonBuilder().registerTypeAdapter(long.class, typeAdapter).registerTypeAdapter(Long.class, typeAdapter).create(); [EOL]     long value = 1L; [EOL]     String serializedValue = gson.toJson(value); [EOL]     assertEquals(String.valueOf(value + CrazyLongTypeAdapter.DIFFERENCE), serializedValue); [EOL]     long deserializedValue = gson.fromJson(serializedValue, long.class); [EOL]     assertEquals(value, deserializedValue); [EOL] } <line_num>: 343,355
private String extractElementFromArray(String json) { [EOL]     return json.substring(json.indexOf('[') + 1, json.indexOf(']')); [EOL] } <line_num>: 357,359
public void testDoubleNaNSerializationNotSupportedByDefault() { [EOL]     try { [EOL]         double nan = Double.NaN; [EOL]         gson.toJson(nan); [EOL]         fail("Gson should not accept NaN for serialization"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         gson.toJson(Double.NaN); [EOL]         fail("Gson should not accept NaN for serialization"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] } <line_num>: 361,373
public void testDoubleNaNSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double nan = Double.NaN; [EOL]     assertEquals("NaN", gson.toJson(nan)); [EOL]     assertEquals("NaN", gson.toJson(Double.NaN)); [EOL] } <line_num>: 375,380
public void testDoubleNaNDeserialization() { [EOL]     assertTrue(Double.isNaN(gson.fromJson("NaN", Double.class))); [EOL]     assertTrue(Double.isNaN(gson.fromJson("NaN", double.class))); [EOL] } <line_num>: 382,385
public void testFloatNaNSerializationNotSupportedByDefault() { [EOL]     try { [EOL]         float nan = Float.NaN; [EOL]         gson.toJson(nan); [EOL]         fail("Gson should not accept NaN for serialization"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         gson.toJson(Float.NaN); [EOL]         fail("Gson should not accept NaN for serialization"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] } <line_num>: 387,399
public void testFloatNaNSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     float nan = Float.NaN; [EOL]     assertEquals("NaN", gson.toJson(nan)); [EOL]     assertEquals("NaN", gson.toJson(Float.NaN)); [EOL] } <line_num>: 401,406
public void testFloatNaNDeserialization() { [EOL]     assertTrue(Float.isNaN(gson.fromJson("NaN", Float.class))); [EOL]     assertTrue(Float.isNaN(gson.fromJson("NaN", float.class))); [EOL] } <line_num>: 408,411
public void testBigDecimalNaNDeserializationNotSupported() { [EOL]     try { [EOL]         gson.fromJson("NaN", BigDecimal.class); [EOL]         fail("Gson should not accept NaN for deserialization by default."); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] } <line_num>: 413,419
public void testDoubleInfinitySerializationNotSupportedByDefault() { [EOL]     try { [EOL]         double infinity = Double.POSITIVE_INFINITY; [EOL]         gson.toJson(infinity); [EOL]         fail("Gson should not accept positive infinity for serialization by default."); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         gson.toJson(Double.POSITIVE_INFINITY); [EOL]         fail("Gson should not accept positive infinity for serialization by default."); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] } <line_num>: 421,433
public void testDoubleInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double infinity = Double.POSITIVE_INFINITY; [EOL]     assertEquals("Infinity", gson.toJson(infinity)); [EOL]     assertEquals("Infinity", gson.toJson(Double.POSITIVE_INFINITY)); [EOL] } <line_num>: 435,440
public void testDoubleInfinityDeserialization() { [EOL]     assertTrue(Double.isInfinite(gson.fromJson("Infinity", Double.class))); [EOL]     assertTrue(Double.isInfinite(gson.fromJson("Infinity", double.class))); [EOL] } <line_num>: 442,445
public void testFloatInfinitySerializationNotSupportedByDefault() { [EOL]     try { [EOL]         float infinity = Float.POSITIVE_INFINITY; [EOL]         gson.toJson(infinity); [EOL]         fail("Gson should not accept positive infinity for serialization by default"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         gson.toJson(Float.POSITIVE_INFINITY); [EOL]         fail("Gson should not accept positive infinity for serialization by default"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] } <line_num>: 447,459
public void testFloatInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     float infinity = Float.POSITIVE_INFINITY; [EOL]     assertEquals("Infinity", gson.toJson(infinity)); [EOL]     assertEquals("Infinity", gson.toJson(Float.POSITIVE_INFINITY)); [EOL] } <line_num>: 461,466
public void testFloatInfinityDeserialization() { [EOL]     assertTrue(Float.isInfinite(gson.fromJson("Infinity", Float.class))); [EOL]     assertTrue(Float.isInfinite(gson.fromJson("Infinity", float.class))); [EOL] } <line_num>: 468,471
public void testBigDecimalInfinityDeserializationNotSupported() { [EOL]     try { [EOL]         gson.fromJson("Infinity", BigDecimal.class); [EOL]         fail("Gson should not accept positive infinity for deserialization with BigDecimal"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] } <line_num>: 473,479
public void testNegativeInfinitySerializationNotSupportedByDefault() { [EOL]     try { [EOL]         double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]         gson.toJson(negativeInfinity); [EOL]         fail("Gson should not accept negative infinity for serialization by default"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         gson.toJson(Double.NEGATIVE_INFINITY); [EOL]         fail("Gson should not accept negative infinity for serialization by default"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] } <line_num>: 481,493
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] } <line_num>: 495,500
public void testNegativeInfinityDeserialization() { [EOL]     assertTrue(Double.isInfinite(gson.fromJson("-Infinity", double.class))); [EOL]     assertTrue(Double.isInfinite(gson.fromJson("-Infinity", Double.class))); [EOL] } <line_num>: 502,505
public void testNegativeInfinityFloatSerializationNotSupportedByDefault() { [EOL]     try { [EOL]         float negativeInfinity = Float.NEGATIVE_INFINITY; [EOL]         gson.toJson(negativeInfinity); [EOL]         fail("Gson should not accept negative infinity for serialization by default"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         gson.toJson(Float.NEGATIVE_INFINITY); [EOL]         fail("Gson should not accept negative infinity for serialization by default"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] } <line_num>: 507,519
public void testNegativeInfinityFloatSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     float negativeInfinity = Float.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Float.NEGATIVE_INFINITY)); [EOL] } <line_num>: 521,526
public void testNegativeInfinityFloatDeserialization() { [EOL]     assertTrue(Float.isInfinite(gson.fromJson("-Infinity", float.class))); [EOL]     assertTrue(Float.isInfinite(gson.fromJson("-Infinity", Float.class))); [EOL] } <line_num>: 528,531
public void testBigDecimalNegativeInfinityDeserializationNotSupported() { [EOL]     try { [EOL]         gson.fromJson("-Infinity", BigDecimal.class); [EOL]         fail("Gson should not accept positive infinity for deserialization"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] } <line_num>: 533,539
public void testLongAsStringSerialization() throws Exception { [EOL]     gson = new GsonBuilder().setLongSerializationPolicy(LongSerializationPolicy.STRING).create(); [EOL]     String result = gson.toJson(15L); [EOL]     assertEquals("\"15\"", result); [EOL]     result = gson.toJson(2); [EOL]     assertEquals("2", result); [EOL] } <line_num>: 541,549
public void testLongAsStringDeserialization() throws Exception { [EOL]     long value = gson.fromJson("\"15\"", long.class); [EOL]     assertEquals(15, value); [EOL]     gson = new GsonBuilder().setLongSerializationPolicy(LongSerializationPolicy.STRING).create(); [EOL]     value = gson.fromJson("\"25\"", long.class); [EOL]     assertEquals(25, value); [EOL] } <line_num>: 551,558
public void testHtmlCharacterSerialization() throws Exception { [EOL]     String target = "<script>var a = 12;</script>"; [EOL]     String result = gson.toJson(target); [EOL]     assertFalse(result.equals('"' + target + '"')); [EOL]     gson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     result = gson.toJson(target); [EOL]     assertTrue(result.equals('"' + target + '"')); [EOL] } <line_num>: 560,568
public void testDeserializePrimitiveWrapperAsObjectField() { [EOL]     String json = "{i:10}"; [EOL]     ClassWithIntegerField target = gson.fromJson(json, ClassWithIntegerField.class); [EOL]     assertEquals(10, target.i.intValue()); [EOL] } <line_num>: 570,574
public void testPrimitiveClassLiteral() { [EOL]     assertEquals(1, gson.fromJson("1", int.class).intValue()); [EOL]     assertEquals(1, gson.fromJson(new StringReader("1"), int.class).intValue()); [EOL]     assertEquals(1, gson.fromJson(new JsonPrimitive(1), int.class).intValue()); [EOL] } <line_num>: 580,584
