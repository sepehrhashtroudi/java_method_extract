@SuppressWarnings({ "unchecked", "unused" }) [EOL] public ObjectWithWildcardCollection() { [EOL]     this(Collections.EMPTY_LIST); [EOL] } <line_num>: 298,301
public ObjectWithWildcardCollection(Collection<? extends BagOfPrimitives> collection) { [EOL]     this.collection = collection; [EOL] } <line_num>: 303,305
@SuppressWarnings("unused") [EOL] private Entry() { [EOL]     this(10); [EOL] } <line_num>: 315,318
Entry(int value) { [EOL]     this.value = value; [EOL] } <line_num>: 319,321
@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     gson = new Gson(); [EOL] } <line_num>: 48,52
public void testTopLevelCollectionOfIntegersSerialization() { [EOL]     Collection<Integer> target = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9); [EOL]     Type targetType = new TypeToken<Collection<Integer>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(target, targetType); [EOL]     assertEquals("[1,2,3,4,5,6,7,8,9]", json); [EOL] } <line_num>: 54,59
public void testTopLevelCollectionOfIntegersDeserialization() { [EOL]     String json = "[0,1,2,3,4,5,6,7,8,9]"; [EOL]     Type collectionType = new TypeToken<Collection<Integer>>() { [EOL]     }.getType(); [EOL]     Collection<Integer> target = gson.fromJson(json, collectionType); [EOL]     int[] expected = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }; [EOL]     MoreAsserts.assertEquals(expected, toIntArray(target)); [EOL] } <line_num>: 61,67
public void testTopLevelListOfIntegerCollectionsDeserialization() throws Exception { [EOL]     String json = "[[1,2,3],[4,5,6],[7,8,9]]"; [EOL]     Type collectionType = new TypeToken<Collection<Collection<Integer>>>() { [EOL]     }.getType(); [EOL]     List<Collection<Integer>> target = gson.fromJson(json, collectionType); [EOL]     int[][] expected = new int[3][3]; [EOL]     for (int i = 0; i < 3; ++i) { [EOL]         int start = (3 * i) + 1; [EOL]         for (int j = 0; j < 3; ++j) { [EOL]             expected[i][j] = start + j; [EOL]         } [EOL]     } [EOL]     for (int i = 0; i < 3; i++) { [EOL]         MoreAsserts.assertEquals(expected[i], toIntArray(target.get(i))); [EOL]     } [EOL] } <line_num>: 69,84
public void testLinkedListSerialization() { [EOL]     List<String> list = new LinkedList<String>(); [EOL]     list.add("a1"); [EOL]     list.add("a2"); [EOL]     Type linkedListType = new TypeToken<LinkedList<String>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(list, linkedListType); [EOL]     assertTrue(json.contains("a1")); [EOL]     assertTrue(json.contains("a2")); [EOL] } <line_num>: 86,94
public void testLinkedListDeserialization() { [EOL]     String json = "['a1','a2']"; [EOL]     Type linkedListType = new TypeToken<LinkedList<String>>() { [EOL]     }.getType(); [EOL]     List<String> list = gson.fromJson(json, linkedListType); [EOL]     assertEquals("a1", list.get(0)); [EOL]     assertEquals("a2", list.get(1)); [EOL] } <line_num>: 96,102
public void testQueueSerialization() { [EOL]     Queue<String> queue = new LinkedList<String>(); [EOL]     queue.add("a1"); [EOL]     queue.add("a2"); [EOL]     Type queueType = new TypeToken<Queue<String>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(queue, queueType); [EOL]     assertTrue(json.contains("a1")); [EOL]     assertTrue(json.contains("a2")); [EOL] } <line_num>: 104,112
public void testQueueDeserialization() { [EOL]     String json = "['a1','a2']"; [EOL]     Type queueType = new TypeToken<Queue<String>>() { [EOL]     }.getType(); [EOL]     Queue<String> queue = gson.fromJson(json, queueType); [EOL]     assertEquals("a1", queue.element()); [EOL]     queue.remove(); [EOL]     assertEquals("a2", queue.element()); [EOL] } <line_num>: 114,121
public void testNullsInListSerialization() { [EOL]     List<String> list = new ArrayList<String>(); [EOL]     list.add("foo"); [EOL]     list.add(null); [EOL]     list.add("bar"); [EOL]     String expected = "[\"foo\",null,\"bar\"]"; [EOL]     Type typeOfList = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(list, typeOfList); [EOL]     assertEquals(expected, json); [EOL] } <line_num>: 123,132
public void testNullsInListDeserialization() { [EOL]     List<String> expected = new ArrayList<String>(); [EOL]     expected.add("foo"); [EOL]     expected.add(null); [EOL]     expected.add("bar"); [EOL]     String json = "[\"foo\",null,\"bar\"]"; [EOL]     Type expectedType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     List<String> target = gson.fromJson(json, expectedType); [EOL]     for (int i = 0; i < expected.size(); ++i) { [EOL]         assertEquals(expected.get(i), target.get(i)); [EOL]     } [EOL] } <line_num>: 134,145
public void testCollectionOfObjectSerialization() { [EOL]     List<Object> target = new ArrayList<Object>(); [EOL]     target.add("Hello"); [EOL]     target.add("World"); [EOL]     assertEquals("[\"Hello\",\"World\"]", gson.toJson(target)); [EOL]     Type type = new TypeToken<List<Object>>() { [EOL]     }.getType(); [EOL]     assertEquals("[\"Hello\",\"World\"]", gson.toJson(target, type)); [EOL] } <line_num>: 147,155
public void testCollectionOfObjectWithNullSerialization() { [EOL]     List<Object> target = new ArrayList<Object>(); [EOL]     target.add("Hello"); [EOL]     target.add(null); [EOL]     target.add("World"); [EOL]     assertEquals("[\"Hello\",null,\"World\"]", gson.toJson(target)); [EOL]     Type type = new TypeToken<List<Object>>() { [EOL]     }.getType(); [EOL]     assertEquals("[\"Hello\",null,\"World\"]", gson.toJson(target, type)); [EOL] } <line_num>: 157,166
public void testCollectionOfStringsSerialization() { [EOL]     List<String> target = new ArrayList<String>(); [EOL]     target.add("Hello"); [EOL]     target.add("World"); [EOL]     assertEquals("[\"Hello\",\"World\"]", gson.toJson(target)); [EOL] } <line_num>: 168,173
public void testCollectionOfBagOfPrimitivesSerialization() { [EOL]     List<BagOfPrimitives> target = new ArrayList<BagOfPrimitives>(); [EOL]     BagOfPrimitives objA = new BagOfPrimitives(3L, 1, true, "blah"); [EOL]     BagOfPrimitives objB = new BagOfPrimitives(2L, 6, false, "blahB"); [EOL]     target.add(objA); [EOL]     target.add(objB); [EOL]     String result = gson.toJson(target); [EOL]     assertTrue(result.startsWith("[")); [EOL]     assertTrue(result.endsWith("]")); [EOL]     for (BagOfPrimitives obj : target) { [EOL]         assertTrue(result.contains(obj.getExpectedJson())); [EOL]     } [EOL] } <line_num>: 175,188
public void testCollectionOfStringsDeserialization() { [EOL]     String json = "[\"Hello\",\"World\"]"; [EOL]     Type collectionType = new TypeToken<Collection<String>>() { [EOL]     }.getType(); [EOL]     Collection<String> target = gson.fromJson(json, collectionType); [EOL]     assertTrue(target.contains("Hello")); [EOL]     assertTrue(target.contains("World")); [EOL] } <line_num>: 190,197
public void testRawCollectionOfIntegersSerialization() { [EOL]     Collection<Integer> target = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9); [EOL]     assertEquals("[1,2,3,4,5,6,7,8,9]", gson.toJson(target)); [EOL] } <line_num>: 199,202
@SuppressWarnings({ "rawtypes" }) [EOL] public void testRawCollectionSerialization() { [EOL]     BagOfPrimitives bag1 = new BagOfPrimitives(); [EOL]     Collection target = Arrays.asList(bag1, bag1); [EOL]     String json = gson.toJson(target); [EOL]     assertTrue(json.contains(bag1.getExpectedJson())); [EOL] } <line_num>: 204,210
public void testRawCollectionDeserializationNotAlllowed() { [EOL]     String json = "[0,1,2,3,4,5,6,7,8,9]"; [EOL]     try { [EOL]         gson.fromJson(json, Collection.class); [EOL]         fail("Can not deserialize a non-genericized collection."); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL]     json = "[\"Hello\", \"World\"]"; [EOL]     try { [EOL]         gson.fromJson(json, Collection.class); [EOL]         fail("Can not deserialize a non-genericized collection."); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] } <line_num>: 212,224
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public void testRawCollectionOfBagOfPrimitivesNotAllowed() { [EOL]     try { [EOL]         BagOfPrimitives bag = new BagOfPrimitives(10, 20, false, "stringValue"); [EOL]         String json = '[' + bag.getExpectedJson() + ',' + bag.getExpectedJson() + ']'; [EOL]         Collection target = gson.fromJson(json, Collection.class); [EOL]         assertEquals(2, target.size()); [EOL]         for (BagOfPrimitives bag1 : (Collection<BagOfPrimitives>) target) { [EOL]             assertEquals(bag.getExpectedJson(), bag1.getExpectedJson()); [EOL]         } [EOL]         fail("Raw collection of objects should not work"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] } <line_num>: 226,239
public void testWildcardPrimitiveCollectionSerilaization() throws Exception { [EOL]     Collection<? extends Integer> target = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9); [EOL]     Type collectionType = new TypeToken<Collection<? extends Integer>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(target, collectionType); [EOL]     assertEquals("[1,2,3,4,5,6,7,8,9]", json); [EOL]     json = gson.toJson(target); [EOL]     assertEquals("[1,2,3,4,5,6,7,8,9]", json); [EOL] } <line_num>: 241,249
public void testWildcardPrimitiveCollectionDeserilaization() throws Exception { [EOL]     String json = "[1,2,3,4,5,6,7,8,9]"; [EOL]     Type collectionType = new TypeToken<Collection<? extends Integer>>() { [EOL]     }.getType(); [EOL]     Collection<? extends Integer> target = gson.fromJson(json, collectionType); [EOL]     assertEquals(9, target.size()); [EOL]     assertTrue(target.contains(1)); [EOL]     assertTrue(target.contains(9)); [EOL] } <line_num>: 251,258
public void testWildcardCollectionField() throws Exception { [EOL]     Collection<BagOfPrimitives> collection = new ArrayList<BagOfPrimitives>(); [EOL]     BagOfPrimitives objA = new BagOfPrimitives(3L, 1, true, "blah"); [EOL]     BagOfPrimitives objB = new BagOfPrimitives(2L, 6, false, "blahB"); [EOL]     collection.add(objA); [EOL]     collection.add(objB); [EOL]     ObjectWithWildcardCollection target = new ObjectWithWildcardCollection(collection); [EOL]     String json = gson.toJson(target); [EOL]     assertTrue(json.contains(objA.getExpectedJson())); [EOL]     assertTrue(json.contains(objB.getExpectedJson())); [EOL]     target = gson.fromJson(json, ObjectWithWildcardCollection.class); [EOL]     Collection<? extends BagOfPrimitives> deserializedCollection = target.getCollection(); [EOL]     assertEquals(2, deserializedCollection.size()); [EOL]     assertTrue(deserializedCollection.contains(objA)); [EOL]     assertTrue(deserializedCollection.contains(objB)); [EOL] } <line_num>: 260,277
@SuppressWarnings({ "rawtypes" }) [EOL] private static int[] toIntArray(Collection collection) { [EOL]     int[] ints = new int[collection.size()]; [EOL]     int i = 0; [EOL]     for (Iterator iterator = collection.iterator(); iterator.hasNext(); ++i) { [EOL]         Object obj = iterator.next(); [EOL]         if (obj instanceof Integer) { [EOL]             ints[i] = ((Integer) obj).intValue(); [EOL]         } else if (obj instanceof Long) { [EOL]             ints[i] = ((Long) obj).intValue(); [EOL]         } [EOL]     } [EOL]     return ints; [EOL] } <line_num>: 279,292
public Collection<? extends BagOfPrimitives> getCollection() { [EOL]     return collection; [EOL] } <line_num>: 307,309
public void testSetSerialization() { [EOL]     Set<Entry> set = new HashSet<Entry>(); [EOL]     set.add(new Entry(1)); [EOL]     set.add(new Entry(2)); [EOL]     String json = gson.toJson(set); [EOL]     assertTrue(json.contains("1")); [EOL]     assertTrue(json.contains("2")); [EOL] } <line_num>: 323,330
public void testSetDeserialization() { [EOL]     String json = "[{value:1},{value:2}]"; [EOL]     Type type = new TypeToken<Set<Entry>>() { [EOL]     }.getType(); [EOL]     Set<Entry> set = gson.fromJson(json, type); [EOL]     assertEquals(2, set.size()); [EOL]     for (Entry entry : set) { [EOL]         assertTrue(entry.value == 1 || entry.value == 2); [EOL]     } [EOL] } <line_num>: 331,339
