public ArrayOfArrays() { [EOL]     elements = new BagOfPrimitives[3][2]; [EOL]     for (int i = 0; i < elements.length; ++i) { [EOL]         BagOfPrimitives[] row = elements[i]; [EOL]         for (int j = 0; j < row.length; ++j) { [EOL]             row[j] = new BagOfPrimitives(i + j, i * j, false, i + "_" + j); [EOL]         } [EOL]     } [EOL] } <line_num>: 317,325
private ClassWithPrivateNoArgsConstructor() { [EOL]     a = 10; [EOL] } <line_num>: 354,356
@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     gson = new Gson(); [EOL] } <line_num>: 49,53
public void testJsonInSingleQuotesDeserialization() { [EOL]     String json = "{'stringValue':'no message','intValue':10,'longValue':20}"; [EOL]     BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class); [EOL]     assertEquals("no message", target.stringValue); [EOL]     assertEquals(10, target.intValue); [EOL]     assertEquals(20, target.longValue); [EOL] } <line_num>: 55,61
public void testJsonInMixedQuotesDeserialization() { [EOL]     String json = "{\"stringValue\":'no message','intValue':10,'longValue':20}"; [EOL]     BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class); [EOL]     assertEquals("no message", target.stringValue); [EOL]     assertEquals(10, target.intValue); [EOL]     assertEquals(20, target.longValue); [EOL] } <line_num>: 63,69
public void testBagOfPrimitivesSerialization() throws Exception { [EOL]     BagOfPrimitives target = new BagOfPrimitives(10, 20, false, "stringValue"); [EOL]     assertEquals(target.getExpectedJson(), gson.toJson(target)); [EOL] } <line_num>: 71,74
public void testBagOfPrimitivesDeserialization() throws Exception { [EOL]     BagOfPrimitives src = new BagOfPrimitives(10, 20, false, "stringValue"); [EOL]     String json = src.getExpectedJson(); [EOL]     BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class); [EOL]     assertEquals(json, target.getExpectedJson()); [EOL] } <line_num>: 76,81
public void testBagOfPrimitiveWrappersSerialization() throws Exception { [EOL]     BagOfPrimitiveWrappers target = new BagOfPrimitiveWrappers(10L, 20, false); [EOL]     assertEquals(target.getExpectedJson(), gson.toJson(target)); [EOL] } <line_num>: 83,86
public void testBagOfPrimitiveWrappersDeserialization() throws Exception { [EOL]     BagOfPrimitiveWrappers target = new BagOfPrimitiveWrappers(10L, 20, false); [EOL]     String jsonString = target.getExpectedJson(); [EOL]     target = gson.fromJson(jsonString, BagOfPrimitiveWrappers.class); [EOL]     assertEquals(jsonString, target.getExpectedJson()); [EOL] } <line_num>: 88,93
public void testClassWithTransientFieldsSerialization() throws Exception { [EOL]     ClassWithTransientFields<Long> target = new ClassWithTransientFields<Long>(1L); [EOL]     assertEquals(target.getExpectedJson(), gson.toJson(target)); [EOL] } <line_num>: 95,98
@SuppressWarnings("rawtypes") [EOL] public void testClassWithTransientFieldsDeserialization() throws Exception { [EOL]     String json = "{\"longValue\":[1]}"; [EOL]     ClassWithTransientFields target = gson.fromJson(json, ClassWithTransientFields.class); [EOL]     assertEquals(json, target.getExpectedJson()); [EOL] } <line_num>: 100,105
@SuppressWarnings("rawtypes") [EOL] public void testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored() throws Exception { [EOL]     String json = "{\"transientLongValue\":1,\"longValue\":[1]}"; [EOL]     ClassWithTransientFields target = gson.fromJson(json, ClassWithTransientFields.class); [EOL]     assertFalse(target.transientLongValue != 1); [EOL] } <line_num>: 107,113
public void testClassWithNoFieldsSerialization() throws Exception { [EOL]     assertEquals("{}", gson.toJson(new ClassWithNoFields())); [EOL] } <line_num>: 115,117
public void testClassWithNoFieldsDeserialization() throws Exception { [EOL]     String json = "{}"; [EOL]     ClassWithNoFields target = gson.fromJson(json, ClassWithNoFields.class); [EOL]     ClassWithNoFields expected = new ClassWithNoFields(); [EOL]     assertEquals(expected, target); [EOL] } <line_num>: 119,124
public void testNestedSerialization() throws Exception { [EOL]     Nested target = new Nested(new BagOfPrimitives(10, 20, false, "stringValue"), new BagOfPrimitives(30, 40, true, "stringValue")); [EOL]     assertEquals(target.getExpectedJson(), gson.toJson(target)); [EOL] } <line_num>: 126,130
public void testNestedDeserialization() throws Exception { [EOL]     String json = "{\"primitive1\":{\"longValue\":10,\"intValue\":20,\"booleanValue\":false," + "\"stringValue\":\"stringValue\"},\"primitive2\":{\"longValue\":30,\"intValue\":40," + "\"booleanValue\":true,\"stringValue\":\"stringValue\"}}"; [EOL]     Nested target = gson.fromJson(json, Nested.class); [EOL]     assertEquals(json, target.getExpectedJson()); [EOL] } <line_num>: 132,138
public void testNullSerialization() throws Exception { [EOL]     assertEquals("", gson.toJson(null)); [EOL] } <line_num>: 139,141
public void testEmptyStringDeserialization() throws Exception { [EOL]     Object object = gson.fromJson("", Object.class); [EOL]     assertNull(object); [EOL] } <line_num>: 143,146
public void testNullDeserialization() throws Exception { [EOL]     String myNullObject = null; [EOL]     Object object = gson.fromJson(myNullObject, Object.class); [EOL]     assertNull(object); [EOL] } <line_num>: 148,152
public void testNullFieldsSerialization() throws Exception { [EOL]     Nested target = new Nested(new BagOfPrimitives(10, 20, false, "stringValue"), null); [EOL]     assertEquals(target.getExpectedJson(), gson.toJson(target)); [EOL] } <line_num>: 154,157
public void testNullFieldsDeserialization() throws Exception { [EOL]     String json = "{\"primitive1\":{\"longValue\":10,\"intValue\":20,\"booleanValue\":false" + ",\"stringValue\":\"stringValue\"}}"; [EOL]     Nested target = gson.fromJson(json, Nested.class); [EOL]     assertEquals(json, target.getExpectedJson()); [EOL] } <line_num>: 159,164
public void testArrayOfObjectsSerialization() throws Exception { [EOL]     ArrayOfObjects target = new ArrayOfObjects(); [EOL]     assertEquals(target.getExpectedJson(), gson.toJson(target)); [EOL] } <line_num>: 166,169
public void testArrayOfObjectsDeserialization() throws Exception { [EOL]     String json = new ArrayOfObjects().getExpectedJson(); [EOL]     ArrayOfObjects target = gson.fromJson(json, ArrayOfObjects.class); [EOL]     assertEquals(json, target.getExpectedJson()); [EOL] } <line_num>: 171,175
public void testArrayOfArraysSerialization() throws Exception { [EOL]     ArrayOfArrays target = new ArrayOfArrays(); [EOL]     assertEquals(target.getExpectedJson(), gson.toJson(target)); [EOL] } <line_num>: 177,180
public void testArrayOfArraysDeserialization() throws Exception { [EOL]     String json = new ArrayOfArrays().getExpectedJson(); [EOL]     ArrayOfArrays target = gson.fromJson(json, ArrayOfArrays.class); [EOL]     assertEquals(json, target.getExpectedJson()); [EOL] } <line_num>: 182,186
public void testArrayOfObjectsAsFields() throws Exception { [EOL]     ClassWithObjects classWithObjects = new ClassWithObjects(); [EOL]     BagOfPrimitives bagOfPrimitives = new BagOfPrimitives(); [EOL]     String stringValue = "someStringValueInArray"; [EOL]     String classWithObjectsJson = gson.toJson(classWithObjects); [EOL]     String bagOfPrimitivesJson = gson.toJson(bagOfPrimitives); [EOL]     ClassWithArray classWithArray = new ClassWithArray(new Object[] { stringValue, classWithObjects, bagOfPrimitives }); [EOL]     String json = gson.toJson(classWithArray); [EOL]     assertTrue(json.contains(classWithObjectsJson)); [EOL]     assertTrue(json.contains(bagOfPrimitivesJson)); [EOL]     assertTrue(json.contains("\"" + stringValue + "\"")); [EOL] } <line_num>: 188,202
public void testNullArraysDeserialization() throws Exception { [EOL]     String json = "{\"array\": null}"; [EOL]     ClassWithArray target = gson.fromJson(json, ClassWithArray.class); [EOL]     assertNull(target.array); [EOL] } <line_num>: 207,211
public void testNullObjectFieldsDeserialization() throws Exception { [EOL]     String json = "{\"bag\": null}"; [EOL]     ClassWithObjects target = gson.fromJson(json, ClassWithObjects.class); [EOL]     assertNull(target.bag); [EOL] } <line_num>: 216,220
public void testEmptyCollectionInAnObjectDeserialization() throws Exception { [EOL]     String json = "{\"children\":[]}"; [EOL]     ClassWithCollectionField target = gson.fromJson(json, ClassWithCollectionField.class); [EOL]     assertNotNull(target); [EOL]     assertTrue(target.children.isEmpty()); [EOL] } <line_num>: 222,227
public void testPrimitiveArrayInAnObjectDeserialization() throws Exception { [EOL]     String json = "{\"longArray\":[0,1,2,3,4,5,6,7,8,9]}"; [EOL]     PrimitiveArray target = gson.fromJson(json, PrimitiveArray.class); [EOL]     assertEquals(json, target.getExpectedJson()); [EOL] } <line_num>: 233,237
public void testNullPrimitiveFieldsDeserialization() throws Exception { [EOL]     String json = "{\"longValue\":null}"; [EOL]     BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class); [EOL]     assertEquals(BagOfPrimitives.DEFAULT_VALUE, target.longValue); [EOL] } <line_num>: 242,246
public void testEmptyCollectionInAnObjectSerialization() throws Exception { [EOL]     ClassWithCollectionField target = new ClassWithCollectionField(); [EOL]     assertEquals("{\"children\":[]}", gson.toJson(target)); [EOL] } <line_num>: 248,251
public void testPrivateNoArgConstructorDeserialization() throws Exception { [EOL]     ClassWithPrivateNoArgsConstructor target = gson.fromJson("{\"a\":20}", ClassWithPrivateNoArgsConstructor.class); [EOL]     assertEquals(20, target.a); [EOL] } <line_num>: 253,257
public void testAnonymousLocalClassesSerialization() throws Exception { [EOL]     assertEquals("", gson.toJson(new ClassWithNoFields() { [EOL]     })); [EOL] } <line_num>: 259,263
public void testPrimitiveArrayFieldSerialization() { [EOL]     PrimitiveArray target = new PrimitiveArray(new long[] { 1L, 2L, 3L }); [EOL]     assertEquals(target.getExpectedJson(), gson.toJson(target)); [EOL] } <line_num>: 265,268
public void testClassWithObjectFieldSerialization() { [EOL]     ClassWithObjectField obj = new ClassWithObjectField(); [EOL]     obj.member = "abc"; [EOL]     String json = gson.toJson(obj); [EOL]     assertTrue(json.contains("abc")); [EOL] } <line_num>: 274,279
public void testInnerClassSerialization() { [EOL]     Parent p = new Parent(); [EOL]     Parent.Child c = p.new Child(); [EOL]     String json = gson.toJson(c); [EOL]     assertTrue(json.contains("value2")); [EOL]     assertFalse(json.contains("value1")); [EOL] } <line_num>: 286,292
public Parent.Child createInstance(Type type) { [EOL]     return p.new Child(); [EOL] } <line_num>: 298,300
public void testInnerClassDeserialization() { [EOL]     final Parent p = new Parent(); [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Parent.Child.class, new InstanceCreator<Parent.Child>() { [EOL]  [EOL]         public Parent.Child createInstance(Type type) { [EOL]             return p.new Child(); [EOL]         } [EOL]     }).create(); [EOL]     String json = "{'value2':3}"; [EOL]     Parent.Child c = gson.fromJson(json, Parent.Child.class); [EOL]     assertEquals(3, c.value2); [EOL] } <line_num>: 294,305
public String getExpectedJson() { [EOL]     StringBuilder sb = new StringBuilder("{\"elements\":["); [EOL]     boolean first = true; [EOL]     for (BagOfPrimitives[] row : elements) { [EOL]         if (first) { [EOL]             first = false; [EOL]         } else { [EOL]             sb.append(","); [EOL]         } [EOL]         boolean firstOfRow = true; [EOL]         sb.append("["); [EOL]         for (BagOfPrimitives element : row) { [EOL]             if (firstOfRow) { [EOL]                 firstOfRow = false; [EOL]             } else { [EOL]                 sb.append(","); [EOL]             } [EOL]             sb.append(element.getExpectedJson()); [EOL]         } [EOL]         sb.append("]"); [EOL]     } [EOL]     sb.append("]}"); [EOL]     return sb.toString(); [EOL] } <line_num>: 326,349
public void testObjectFieldNamesWithoutQuotesDeserialization() { [EOL]     String json = "{longValue:1,'booleanValue':true,\"stringValue\":'bar'}"; [EOL]     BagOfPrimitives bag = gson.fromJson(json, BagOfPrimitives.class); [EOL]     assertEquals(1, bag.longValue); [EOL]     assertTrue(bag.booleanValue); [EOL]     assertEquals("bar", bag.stringValue); [EOL] } <line_num>: 362,368
public void testStringFieldWithNumberValueDeserialization() { [EOL]     String json = "{\"stringValue\":1}"; [EOL]     BagOfPrimitives bag = gson.fromJson(json, BagOfPrimitives.class); [EOL]     assertEquals("1", bag.stringValue); [EOL]     json = "{\"stringValue\":1.5E+6}"; [EOL]     bag = gson.fromJson(json, BagOfPrimitives.class); [EOL]     assertEquals("1.5E+6", bag.stringValue); [EOL]     json = "{\"stringValue\":true}"; [EOL]     bag = gson.fromJson(json, BagOfPrimitives.class); [EOL]     assertEquals("true", bag.stringValue); [EOL] } <line_num>: 370,382
public void testStringFieldWithEmptyValueSerialization() { [EOL]     ClassWithEmptyStringFields target = new ClassWithEmptyStringFields(); [EOL]     target.a = "5794749"; [EOL]     String json = gson.toJson(target); [EOL]     assertTrue(json.contains("\"a\":\"5794749\"")); [EOL]     assertTrue(json.contains("\"b\":\"\"")); [EOL]     assertTrue(json.contains("\"c\":\"\"")); [EOL] } <line_num>: 387,394
public void testStringFieldWithEmptyValueDeserialization() { [EOL]     String json = "{a:\"5794749\",b:\"\",c:\"\"}"; [EOL]     ClassWithEmptyStringFields target = gson.fromJson(json, ClassWithEmptyStringFields.class); [EOL]     assertEquals("5794749", target.a); [EOL]     assertEquals("", target.b); [EOL]     assertEquals("", target.c); [EOL] } <line_num>: 399,405
public void testJsonObjectSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     JsonObject obj = new JsonObject(); [EOL]     String json = gson.toJson(obj); [EOL]     assertEquals("{}", json); [EOL] } <line_num>: 413,418
public void testSingletonLists() { [EOL]     Gson gson = new Gson(); [EOL]     Product product = new Product(); [EOL]     assertEquals("{\"attributes\":[],\"departments\":[]}", gson.toJson(product)); [EOL]     gson.fromJson(gson.toJson(product), Product.class); [EOL]     product.departments.add(new Department()); [EOL]     assertEquals("{\"attributes\":[],\"departments\":[{\"name\":\"abc\",\"code\":\"123\"}]}", gson.toJson(product)); [EOL]     gson.fromJson(gson.toJson(product), Product.class); [EOL]     product.attributes.add("456"); [EOL]     assertEquals("{\"attributes\":[\"456\"],\"departments\":[{\"name\":\"abc\",\"code\":\"123\"}]}", gson.toJson(product)); [EOL]     gson.fromJson(gson.toJson(product), Product.class); [EOL] } <line_num>: 423,439
