public SubTypeOfBagOfPrimitives(long l, int i, boolean b, String string, float f) { [EOL]     super(l, i, b, string); [EOL]     this.f = f; [EOL] } <line_num>: 80,83
@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     gson = new Gson(); [EOL] } <line_num>: 25,29
public void testToJsonTree() { [EOL]     BagOfPrimitives bag = new BagOfPrimitives(10L, 5, false, "foo"); [EOL]     JsonElement json = gson.toJsonTree(bag); [EOL]     assertTrue(json.isJsonObject()); [EOL]     JsonObject obj = json.getAsJsonObject(); [EOL]     Set<Entry<String, JsonElement>> children = obj.entrySet(); [EOL]     assertEquals(4, children.size()); [EOL]     assertContains(obj, new JsonPrimitive(10L)); [EOL]     assertContains(obj, new JsonPrimitive(5)); [EOL]     assertContains(obj, new JsonPrimitive(false)); [EOL]     assertContains(obj, new JsonPrimitive("foo")); [EOL] } <line_num>: 31,42
public void testToJsonTreeObjectType() { [EOL]     SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, "foo", 1.4F); [EOL]     JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class); [EOL]     assertTrue(json.isJsonObject()); [EOL]     JsonObject obj = json.getAsJsonObject(); [EOL]     Set<Entry<String, JsonElement>> children = obj.entrySet(); [EOL]     assertEquals(4, children.size()); [EOL]     assertContains(obj, new JsonPrimitive(10L)); [EOL]     assertContains(obj, new JsonPrimitive(5)); [EOL]     assertContains(obj, new JsonPrimitive(false)); [EOL]     assertContains(obj, new JsonPrimitive("foo")); [EOL] } <line_num>: 44,55
public void testJsonTreeToString() { [EOL]     SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, "foo", 1.4F); [EOL]     String json1 = gson.toJson(bag); [EOL]     JsonElement jsonElement = gson.toJsonTree(bag, SubTypeOfBagOfPrimitives.class); [EOL]     String json2 = gson.toJson(jsonElement); [EOL]     assertEquals(json1, json2); [EOL] } <line_num>: 57,63
private void assertContains(JsonObject json, JsonPrimitive child) { [EOL]     for (Map.Entry<String, JsonElement> entry : json.entrySet()) { [EOL]         JsonElement node = entry.getValue(); [EOL]         if (node.isJsonPrimitive()) { [EOL]             if (node.getAsJsonPrimitive().equals(child)) { [EOL]                 return; [EOL]             } [EOL]         } [EOL]     } [EOL]     fail(); [EOL] } <line_num>: 65,75
