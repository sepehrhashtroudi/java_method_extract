public Base createInstance(Type type) { [EOL]     return new Base(); [EOL] } <line_num>: 41,43
public void testInstanceCreatorReturnsBaseType() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new InstanceCreator<Base>() { [EOL]  [EOL]         public Base createInstance(Type type) { [EOL]             return new Base(); [EOL]         } [EOL]     }).create(); [EOL]     String json = "{baseName:'BaseRevised',subName:'Sub'}"; [EOL]     Base base = gson.fromJson(json, Base.class); [EOL]     assertEquals("BaseRevised", base.baseName); [EOL] } <line_num>: 38,49
public Base createInstance(Type type) { [EOL]     return new Sub(); [EOL] } <line_num>: 54,56
public void testInstanceCreatorReturnsSubTypeForTopLevelObject() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new InstanceCreator<Base>() { [EOL]  [EOL]         public Base createInstance(Type type) { [EOL]             return new Sub(); [EOL]         } [EOL]     }).create(); [EOL]     String json = "{baseName:'Base',subName:'SubRevised'}"; [EOL]     Base base = gson.fromJson(json, Base.class); [EOL]     assertTrue(base instanceof Sub); [EOL]     Sub sub = (Sub) base; [EOL]     assertFalse("SubRevised".equals(sub.subName)); [EOL]     assertEquals(Sub.SUB_NAME, sub.subName); [EOL] } <line_num>: 51,67
public Base createInstance(Type type) { [EOL]     return new Sub(); [EOL] } <line_num>: 72,74
public void testInstanceCreatorReturnsSubTypeForField() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new InstanceCreator<Base>() { [EOL]  [EOL]         public Base createInstance(Type type) { [EOL]             return new Sub(); [EOL]         } [EOL]     }).create(); [EOL]     String json = "{base:{baseName:'Base',subName:'SubRevised'}}"; [EOL]     ClassWithBaseField target = gson.fromJson(json, ClassWithBaseField.class); [EOL]     assertTrue(target.base instanceof Sub); [EOL]     assertEquals("SubRevised", ((Sub) target.base).subName); [EOL] } <line_num>: 69,81
