@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     gson = new Gson(); [EOL] } <line_num>: 43,47
public void testTopLevelArrayOfIntsSerialization() { [EOL]     int[] target = { 1, 2, 3, 4, 5, 6, 7, 8, 9 }; [EOL]     assertEquals("[1,2,3,4,5,6,7,8,9]", gson.toJson(target)); [EOL] } <line_num>: 49,52
public void testTopLevelArrayOfIntsDeserialization() { [EOL]     int[] expected = { 1, 2, 3, 4, 5, 6, 7, 8, 9 }; [EOL]     int[] actual = gson.fromJson("[1,2,3,4,5,6,7,8,9]", int[].class); [EOL]     MoreAsserts.assertEquals(expected, actual); [EOL] } <line_num>: 54,58
public void testInvalidArrayDeserialization() { [EOL]     String json = "[1, 2 3, 4, 5]"; [EOL]     try { [EOL]         gson.fromJson(json, int[].class); [EOL]         fail("Gson should not deserialize array elements with missing ,"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] } <line_num>: 60,67
public void testEmptyArraySerialization() { [EOL]     int[] target = {}; [EOL]     assertEquals("[]", gson.toJson(target)); [EOL] } <line_num>: 69,72
public void testEmptyArrayDeserialization() { [EOL]     int[] actualObject = gson.fromJson("[]", int[].class); [EOL]     assertTrue(actualObject.length == 0); [EOL]     Integer[] actualObject2 = gson.fromJson("[]", Integer[].class); [EOL]     assertTrue(actualObject2.length == 0); [EOL]     actualObject = gson.fromJson("[ ]", int[].class); [EOL]     assertTrue(actualObject.length == 0); [EOL] } <line_num>: 74,83
public void testNullsInArraySerialization() { [EOL]     String[] array = { "foo", null, "bar" }; [EOL]     String expected = "[\"foo\",null,\"bar\"]"; [EOL]     String json = gson.toJson(array); [EOL]     assertEquals(expected, json); [EOL] } <line_num>: 85,90
public void testNullsInArrayDeserialization() { [EOL]     String json = "[\"foo\",null,\"bar\"]"; [EOL]     String[] expected = { "foo", null, "bar" }; [EOL]     String[] target = gson.fromJson(json, expected.getClass()); [EOL]     for (int i = 0; i < expected.length; ++i) { [EOL]         assertEquals(expected[i], target[i]); [EOL]     } [EOL] } <line_num>: 92,99
public void testSingleNullInArraySerialization() { [EOL]     BagOfPrimitives[] array = new BagOfPrimitives[1]; [EOL]     array[0] = null; [EOL]     String json = gson.toJson(array); [EOL]     assertEquals("[null]", json); [EOL] } <line_num>: 101,106
public void testSingleNullInArrayDeserialization() { [EOL]     BagOfPrimitives[] array = gson.fromJson("[null]", BagOfPrimitives[].class); [EOL]     assertNull(array[0]); [EOL] } <line_num>: 108,111
public void testNullsInArrayWithSerializeNullPropertySetSerialization() { [EOL]     gson = new GsonBuilder().serializeNulls().create(); [EOL]     String[] array = { "foo", null, "bar" }; [EOL]     String expected = "[\"foo\",null,\"bar\"]"; [EOL]     String json = gson.toJson(array); [EOL]     assertEquals(expected, json); [EOL] } <line_num>: 113,119
public void testArrayOfStringsSerialization() { [EOL]     String[] target = { "Hello", "World" }; [EOL]     assertEquals("[\"Hello\",\"World\"]", gson.toJson(target)); [EOL] } <line_num>: 121,124
public void testArrayOfStringsDeserialization() { [EOL]     String json = "[\"Hello\",\"World\"]"; [EOL]     String[] target = gson.fromJson(json, String[].class); [EOL]     assertEquals("Hello", target[0]); [EOL]     assertEquals("World", target[1]); [EOL] } <line_num>: 126,131
public void testSingleStringArraySerialization() throws Exception { [EOL]     String[] s = { "hello" }; [EOL]     String output = gson.toJson(s); [EOL]     assertEquals("[\"hello\"]", output); [EOL] } <line_num>: 133,137
public void testSingleStringArrayDeserialization() throws Exception { [EOL]     String json = "[\"hello\"]"; [EOL]     String[] arrayType = gson.fromJson(json, String[].class); [EOL]     assertEquals(1, arrayType.length); [EOL]     assertEquals("hello", arrayType[0]); [EOL]     String type = gson.fromJson(json, String.class); [EOL]     assertEquals("hello", type); [EOL] } <line_num>: 139,147
@SuppressWarnings("unchecked") [EOL] public void testArrayOfCollectionSerialization() throws Exception { [EOL]     StringBuilder sb = new StringBuilder("["); [EOL]     int arraySize = 3; [EOL]     Type typeToSerialize = new TypeToken<Collection<Integer>[]>() { [EOL]     }.getType(); [EOL]     Collection<Integer>[] arrayOfCollection = new ArrayList[arraySize]; [EOL]     for (int i = 0; i < arraySize; ++i) { [EOL]         int startValue = (3 * i) + 1; [EOL]         sb.append('[').append(startValue).append(',').append(startValue + 1).append(']'); [EOL]         ArrayList<Integer> tmpList = new ArrayList<Integer>(); [EOL]         tmpList.add(startValue); [EOL]         tmpList.add(startValue + 1); [EOL]         arrayOfCollection[i] = tmpList; [EOL]         if (i < arraySize - 1) { [EOL]             sb.append(','); [EOL]         } [EOL]     } [EOL]     sb.append(']'); [EOL]     String json = gson.toJson(arrayOfCollection, typeToSerialize); [EOL]     assertEquals(sb.toString(), json); [EOL] } <line_num>: 149,172
public void testArrayOfCollectionDeserialization() throws Exception { [EOL]     String json = "[[1,2],[3,4]]"; [EOL]     Type type = new TypeToken<Collection<Integer>[]>() { [EOL]     }.getType(); [EOL]     Collection<Integer>[] target = gson.fromJson(json, type); [EOL]     assertEquals(2, target.length); [EOL]     MoreAsserts.assertEquals(new Integer[] { 1, 2 }, target[0].toArray(new Integer[0])); [EOL]     MoreAsserts.assertEquals(new Integer[] { 3, 4 }, target[1].toArray(new Integer[0])); [EOL] } <line_num>: 174,182
public void testArrayOfPrimitivesWithCustomTypeAdapter() throws Exception { [EOL]     CrazyLongTypeAdapter typeAdapter = new CrazyLongTypeAdapter(); [EOL]     gson = new GsonBuilder().registerTypeAdapter(long.class, typeAdapter).registerTypeAdapter(Long.class, typeAdapter).create(); [EOL]     long[] value = { 1L }; [EOL]     String serializedValue = gson.toJson(value); [EOL]     String expected = "[" + String.valueOf(value[0] + CrazyLongTypeAdapter.DIFFERENCE) + "]"; [EOL]     assertEquals(expected, serializedValue); [EOL]     long[] deserializedValue = gson.fromJson(serializedValue, long[].class); [EOL]     assertEquals(1, deserializedValue.length); [EOL]     assertEquals(value[0], deserializedValue[0]); [EOL] } <line_num>: 184,198
public void testArrayOfPrimitivesAsObjectsSerialization() throws Exception { [EOL]     Object[] objs = new Object[] { 1, "abc", 0.3f, 5L }; [EOL]     String json = gson.toJson(objs); [EOL]     assertTrue(json.contains("abc")); [EOL]     assertTrue(json.contains("0.3")); [EOL]     assertTrue(json.contains("5")); [EOL] } <line_num>: 200,206
public void testArrayOfPrimitivesAsObjectsDeserialization() throws Exception { [EOL]     String json = "[1,'abc',0.3,5]"; [EOL]     Object[] objs = gson.fromJson(json, Object[].class); [EOL]     assertEquals(1, objs[0]); [EOL]     assertEquals("abc", objs[1]); [EOL]     assertEquals(new BigDecimal("0.3"), objs[2]); [EOL]     assertEquals(5, objs[3]); [EOL] } <line_num>: 208,215
public void testArrayOfObjectsWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',{a:1},5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] } <line_num>: 217,224
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] } <line_num>: 226,233
public void testObjectArrayWithNonPrimitivesSerialization() throws Exception { [EOL]     ClassWithObjects classWithObjects = new ClassWithObjects(); [EOL]     BagOfPrimitives bagOfPrimitives = new BagOfPrimitives(); [EOL]     String classWithObjectsJson = gson.toJson(classWithObjects); [EOL]     String bagOfPrimitivesJson = gson.toJson(bagOfPrimitives); [EOL]     Object[] objects = new Object[] { classWithObjects, bagOfPrimitives }; [EOL]     String json = gson.toJson(objects); [EOL]     assertTrue(json.contains(classWithObjectsJson)); [EOL]     assertTrue(json.contains(bagOfPrimitivesJson)); [EOL] } <line_num>: 235,246
