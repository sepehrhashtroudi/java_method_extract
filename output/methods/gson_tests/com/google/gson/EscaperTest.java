@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     escapeHtmlChar = new Escaper(true); [EOL]     noEscapeHtmlChar = new Escaper(false); [EOL] } <line_num>: 31,36
public void testNoSpecialCharacters() { [EOL]     String value = "Testing123"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(value); [EOL]     assertEquals(value, escapedString); [EOL] } <line_num>: 38,42
public void testNewlineEscaping() throws Exception { [EOL]     String containsNewline = "123\n456"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(containsNewline); [EOL]     assertEquals("123\\n456", escapedString); [EOL] } <line_num>: 44,48
public void testCarrageReturnEscaping() throws Exception { [EOL]     String containsCarrageReturn = "123\r456"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(containsCarrageReturn); [EOL]     assertEquals("123\\r456", escapedString); [EOL] } <line_num>: 50,54
public void testTabEscaping() throws Exception { [EOL]     String containsTab = "123\t456"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(containsTab); [EOL]     assertEquals("123\\t456", escapedString); [EOL] } <line_num>: 56,60
public void testDoubleQuoteEscaping() throws Exception { [EOL]     String containsQuote = "123\"456"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(containsQuote); [EOL]     assertEquals("123\\\"456", escapedString); [EOL] } <line_num>: 62,66
public void testSingleQuoteEscaping() throws Exception { [EOL]     String containsQuote = "123'456"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(containsQuote); [EOL]     assertEquals("123\\u0027456", escapedString); [EOL] } <line_num>: 68,72
public void testLineSeparatorEscaping() throws Exception { [EOL]     String src = "123\u2028 456"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(src); [EOL]     assertEquals("123\\u2028 456", escapedString); [EOL] } <line_num>: 74,78
public void testParagraphSeparatorEscaping() throws Exception { [EOL]     String src = "123\u2029 456"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(src); [EOL]     assertEquals("123\\u2029 456", escapedString); [EOL] } <line_num>: 80,84
public void testControlCharBlockEscaping() throws Exception { [EOL]     for (char c = '\u007f'; c <= '\u009f'; ++c) { [EOL]         String src = "123 " + c + " 456"; [EOL]         String escapedString = escapeHtmlChar.escapeJsonString(src); [EOL]         assertFalse(src.equals(escapedString)); [EOL]     } [EOL] } <line_num>: 86,92
public void testEqualsEscaping() throws Exception { [EOL]     String containsEquals = "123=456"; [EOL]     int index = containsEquals.indexOf('='); [EOL]     String unicodeValue = convertToUnicodeString(Character.codePointAt(containsEquals, index)); [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(containsEquals); [EOL]     assertEquals("123" + unicodeValue + "456", escapedString); [EOL]     escapedString = noEscapeHtmlChar.escapeJsonString(containsEquals); [EOL]     assertEquals(containsEquals, escapedString); [EOL] } <line_num>: 94,103
public void testGreaterThanAndLessThanEscaping() throws Exception { [EOL]     String containsLtGt = "123>456<"; [EOL]     int gtIndex = containsLtGt.indexOf('>'); [EOL]     int ltIndex = containsLtGt.indexOf('<'); [EOL]     String gtAsUnicode = convertToUnicodeString(Character.codePointAt(containsLtGt, gtIndex)); [EOL]     String ltAsUnicode = convertToUnicodeString(Character.codePointAt(containsLtGt, ltIndex)); [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(containsLtGt); [EOL]     assertEquals("123" + gtAsUnicode + "456" + ltAsUnicode, escapedString); [EOL]     escapedString = noEscapeHtmlChar.escapeJsonString(containsLtGt); [EOL]     assertEquals(containsLtGt, escapedString); [EOL] } <line_num>: 105,117
public void testAmpersandEscaping() throws Exception { [EOL]     String containsAmp = "123&456"; [EOL]     int ampIndex = containsAmp.indexOf('&'); [EOL]     String ampAsUnicode = convertToUnicodeString(Character.codePointAt(containsAmp, ampIndex)); [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(containsAmp); [EOL]     assertEquals("123" + ampAsUnicode + "456", escapedString); [EOL]     escapedString = noEscapeHtmlChar.escapeJsonString(containsAmp); [EOL]     assertEquals(containsAmp, escapedString); [EOL]     char ampCharAsUnicode = '\u0026'; [EOL]     String containsAmpUnicode = "123" + ampCharAsUnicode + "456"; [EOL]     escapedString = escapeHtmlChar.escapeJsonString(containsAmpUnicode); [EOL]     assertEquals("123" + ampAsUnicode + "456", escapedString); [EOL]     escapedString = noEscapeHtmlChar.escapeJsonString(containsAmpUnicode); [EOL]     assertEquals(containsAmp, escapedString); [EOL] } <line_num>: 119,137
public void testSlashEscaping() throws Exception { [EOL]     String containsSlash = "123\\456"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(containsSlash); [EOL]     assertEquals("123\\\\456", escapedString); [EOL] } <line_num>: 139,143
public void testSingleQuoteNotEscaped() throws Exception { [EOL]     String containsSingleQuote = "123'456"; [EOL]     String escapedString = noEscapeHtmlChar.escapeJsonString(containsSingleQuote); [EOL]     assertEquals(containsSingleQuote, escapedString); [EOL] } <line_num>: 145,149
public void testRequiredEscapingUnicodeCharacter() throws Exception { [EOL]     char unicodeChar = '\u2028'; [EOL]     String unicodeString = "Testing" + unicodeChar; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertFalse(unicodeString.equals(escapedString)); [EOL]     assertEquals("Testing\\u2028", escapedString); [EOL] } <line_num>: 151,158
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] } <line_num>: 160,165
private String convertToUnicodeString(int codepoint) { [EOL]     String hexValue = Integer.toHexString(codepoint); [EOL]     StringBuilder sb = new StringBuilder("\\u"); [EOL]     for (int i = 0; i < 4 - hexValue.length(); i++) { [EOL]         sb.append(0); [EOL]     } [EOL]     sb.append(hexValue); [EOL]     return sb.toString().toLowerCase(); [EOL] } <line_num>: 179,188
