@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     parser = new JsonParser(); [EOL] } <line_num>: 35,39
public void testParseString() { [EOL]     String json = "{a:10,b:'c'}"; [EOL]     JsonElement e = parser.parse(json); [EOL]     assertTrue(e.isJsonObject()); [EOL]     assertEquals(10, e.getAsJsonObject().get("a").getAsInt()); [EOL]     assertEquals("c", e.getAsJsonObject().get("b").getAsString()); [EOL] } <line_num>: 41,47
public void testParseEmptyString() { [EOL]     JsonElement e = parser.parse("\"   \""); [EOL]     assertTrue(e.isJsonPrimitive()); [EOL]     assertEquals("   ", e.getAsString()); [EOL] } <line_num>: 49,53
public void testParseEmptyWhitespaceInput() { [EOL]     JsonElement e = parser.parse("     "); [EOL]     assertTrue(e.isJsonNull()); [EOL] } <line_num>: 55,58
public void testParseMixedArray() { [EOL]     String json = "[{},13,\"stringValue\"]"; [EOL]     JsonElement e = parser.parse(json); [EOL]     assertTrue(e.isJsonArray()); [EOL]     JsonArray array = e.getAsJsonArray(); [EOL]     assertEquals("{}", array.get(0).toString()); [EOL]     assertEquals(13, array.get(1).getAsInt()); [EOL]     assertEquals("stringValue", array.get(2).getAsString()); [EOL] } <line_num>: 60,69
public void testParseReader() { [EOL]     StringReader reader = new StringReader("{a:10,b:'c'}"); [EOL]     JsonElement e = parser.parse(reader); [EOL]     assertTrue(e.isJsonObject()); [EOL]     assertEquals(10, e.getAsJsonObject().get("a").getAsInt()); [EOL]     assertEquals("c", e.getAsJsonObject().get("b").getAsString()); [EOL] } <line_num>: 71,77
public void testReadWriteTwoObjects() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     CharArrayWriter writer = new CharArrayWriter(); [EOL]     BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, "one"); [EOL]     writer.write(gson.toJson(expectedOne).toCharArray()); [EOL]     BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, "two"); [EOL]     writer.write(gson.toJson(expectedTwo).toCharArray()); [EOL]     CharArrayReader reader = new CharArrayReader(writer.toCharArray()); [EOL]     JsonReader parser = new JsonReader(reader); [EOL]     parser.setLenient(true); [EOL]     JsonElement element1 = Streams.parse(parser); [EOL]     JsonElement element2 = Streams.parse(parser); [EOL]     BagOfPrimitives actualOne = gson.fromJson(element1, BagOfPrimitives.class); [EOL]     assertEquals("one", actualOne.stringValue); [EOL]     BagOfPrimitives actualTwo = gson.fromJson(element2, BagOfPrimitives.class); [EOL]     assertEquals("two", actualTwo.stringValue); [EOL] } <line_num>: 79,96
