@SuppressWarnings("unchecked") [EOL] public <T> T adaptType(Object from, Class<T> to) { [EOL]     Class<?> aClass = Primitives.wrap(to); [EOL]     if (Primitives.isWrapperType(aClass)) { [EOL]         if (aClass == Character.class) { [EOL]             String value = from.toString(); [EOL]             if (value.length() == 1) { [EOL]                 return (T) (Character) from.toString().charAt(0); [EOL]             } [EOL]             throw new JsonParseException("The value: " + value + " contains more than a character."); [EOL]         } [EOL]         try { [EOL]             Constructor<?> constructor = aClass.getConstructor(String.class); [EOL]             return (T) constructor.newInstance(from.toString()); [EOL]         } catch (NoSuchMethodException e) { [EOL]             throw new JsonParseException(e); [EOL]         } catch (IllegalAccessException e) { [EOL]             throw new JsonParseException(e); [EOL]         } catch (InvocationTargetException e) { [EOL]             throw new JsonParseException(e); [EOL]         } catch (InstantiationException e) { [EOL]             throw new JsonParseException(e); [EOL]         } [EOL]     } else if (Enum.class.isAssignableFrom(to)) { [EOL]         try { [EOL]             Method valuesMethod = to.getMethod("valueOf", String.class); [EOL]             return (T) valuesMethod.invoke(null, from.toString()); [EOL]         } catch (NoSuchMethodException e) { [EOL]             throw new RuntimeException(e); [EOL]         } catch (IllegalAccessException e) { [EOL]             throw new RuntimeException(e); [EOL]         } catch (InvocationTargetException e) { [EOL]             throw new RuntimeException(e); [EOL]         } [EOL]     } else { [EOL]         throw new JsonParseException("Can not adapt type " + from.getClass() + " to " + to); [EOL]     } [EOL] } <line_num>: 34,74
