public void testInvalidConstruction() throws Exception { [EOL]     try { [EOL]         new ModifyFirstLetterNamingPolicy(null); [EOL]         fail("Null values are not allowed as a constructor parameters"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] } <line_num>: 28,33
public void testLowerCaseFirstLetter() throws Exception { [EOL]     ModifyFirstLetterNamingPolicy policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.LOWER); [EOL]     assertEquals("blah", policy.translateName("Blah", String.class, null)); [EOL]     assertEquals("blah", policy.translateName("blah", String.class, null)); [EOL] } <line_num>: 35,40
public void testUpperCaseFirstLetter() throws Exception { [EOL]     ModifyFirstLetterNamingPolicy policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER); [EOL]     assertEquals("Blah", policy.translateName("blah", String.class, null)); [EOL]     assertEquals("Blah", policy.translateName("Blah", String.class, null)); [EOL] } <line_num>: 42,47
public void testSingleCharacterField() throws Exception { [EOL]     ModifyFirstLetterNamingPolicy policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER); [EOL]     assertEquals("B", policy.translateName("b", String.class, null)); [EOL]     assertEquals("B", policy.translateName("B", String.class, null)); [EOL] } <line_num>: 49,54
public void testFieldStartsWithUnderscore() throws Exception { [EOL]     ModifyFirstLetterNamingPolicy policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER); [EOL]     assertEquals("_Blah", policy.translateName("_blah", String.class, null)); [EOL]     assertEquals("_Blah", policy.translateName("_Blah", String.class, null)); [EOL] } <line_num>: 56,61
public void testFieldStartsWithUnderscoreFollowedBySingleLetter() throws Exception { [EOL]     ModifyFirstLetterNamingPolicy policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER); [EOL]     assertEquals("_B", policy.translateName("_b", String.class, null)); [EOL]     assertEquals("_B", policy.translateName("_B", String.class, null)); [EOL] } <line_num>: 63,68
public void testFieldHasSingleNonLetter() throws Exception { [EOL]     ModifyFirstLetterNamingPolicy policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.LOWER); [EOL]     assertEquals("_", policy.translateName("_", String.class, null)); [EOL]     policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER); [EOL]     assertEquals("_", policy.translateName("_", String.class, null)); [EOL] } <line_num>: 70,77
public void testFieldHasNoLetters() throws Exception { [EOL]     ModifyFirstLetterNamingPolicy policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.LOWER); [EOL]     assertEquals("$_$", policy.translateName("$_$", String.class, null)); [EOL]     policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER); [EOL]     assertEquals("$_$", policy.translateName("$_$", String.class, null)); [EOL] } <line_num>: 79,86
