@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     gson = new GsonBuilder().registerTypeAdapter(AtomicLong.class, new ExceptionTypeAdapter()).registerTypeAdapter(AtomicInteger.class, new AtomicIntegerTypeAdapter()).create(); [EOL] } <line_num>: 35,42
public void testDefaultTypeAdapterThrowsParseException() throws Exception { [EOL]     try { [EOL]         gson.fromJson("{\"abc\":123}", BigInteger.class); [EOL]         fail("Should have thrown a JsonParseException"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] } <line_num>: 44,49
public void testTypeAdapterThrowsException() throws Exception { [EOL]     try { [EOL]         gson.toJson(new AtomicLong(0)); [EOL]         fail("Type Adapter should have thrown an exception"); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         gson.fromJson("123", AtomicLong.class); [EOL]         fail("Type Adapter should have thrown an exception"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] } <line_num>: 51,61
public void testTypeAdapterProperlyConvertsTypes() throws Exception { [EOL]     int intialValue = 1; [EOL]     AtomicInteger atomicInt = new AtomicInteger(intialValue); [EOL]     String json = gson.toJson(atomicInt); [EOL]     assertEquals(intialValue + 1, Integer.parseInt(json)); [EOL]     atomicInt = gson.fromJson(json, AtomicInteger.class); [EOL]     assertEquals(intialValue, atomicInt.get()); [EOL] } <line_num>: 63,71
public void testTypeAdapterDoesNotAffectNonAdaptedTypes() throws Exception { [EOL]     String expected = "blah"; [EOL]     String actual = gson.toJson(expected); [EOL]     assertEquals("\"" + expected + "\"", actual); [EOL]     actual = gson.fromJson(actual, String.class); [EOL]     assertEquals(expected, actual); [EOL] } <line_num>: 73,80
public JsonElement serialize(AtomicLong src, Type typeOfSrc, JsonSerializationContext context) { [EOL]     throw new IllegalStateException(); [EOL] } <line_num>: 84,87
public AtomicLong deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { [EOL]     throw new IllegalStateException(); [EOL] } <line_num>: 89,93
public JsonElement serialize(AtomicInteger src, Type typeOfSrc, JsonSerializationContext context) { [EOL]     return new JsonPrimitive(src.incrementAndGet()); [EOL] } <line_num>: 98,100
public AtomicInteger deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { [EOL]     int intValue = json.getAsInt(); [EOL]     return new AtomicInteger(--intValue); [EOL] } <line_num>: 102,106
