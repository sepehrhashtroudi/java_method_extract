@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     paramMap = new ParameterizedTypeHandlerMap<String>(); [EOL] } <line_num>: 36,40
public void testNullMap() throws Exception { [EOL]     assertFalse(paramMap.hasSpecificHandlerFor(String.class)); [EOL]     assertNull(paramMap.getHandlerFor(String.class)); [EOL]     assertNull(paramMap.getHandlerFor(String.class)); [EOL] } <line_num>: 42,46
public void testHasGenericButNotSpecific() throws Exception { [EOL]     Type specificType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     String handler = "blah"; [EOL]     paramMap.register(List.class, handler); [EOL]     assertFalse(paramMap.hasSpecificHandlerFor(specificType)); [EOL]     assertTrue(paramMap.hasSpecificHandlerFor(List.class)); [EOL]     assertNotNull(paramMap.getHandlerFor(specificType)); [EOL]     assertNotNull(paramMap.getHandlerFor(List.class)); [EOL]     assertEquals(handler, paramMap.getHandlerFor(specificType)); [EOL] } <line_num>: 48,58
public void testHasSpecificType() throws Exception { [EOL]     Type specificType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     String handler = "blah"; [EOL]     paramMap.register(specificType, handler); [EOL]     assertTrue(paramMap.hasSpecificHandlerFor(specificType)); [EOL]     assertFalse(paramMap.hasSpecificHandlerFor(List.class)); [EOL]     assertNotNull(paramMap.getHandlerFor(specificType)); [EOL]     assertNull(paramMap.getHandlerFor(List.class)); [EOL]     assertEquals(handler, paramMap.getHandlerFor(specificType)); [EOL] } <line_num>: 60,70
public void testTypeOverridding() throws Exception { [EOL]     String handler1 = "blah1"; [EOL]     String handler2 = "blah2"; [EOL]     paramMap.register(String.class, handler1); [EOL]     paramMap.register(String.class, handler2); [EOL]     assertTrue(paramMap.hasSpecificHandlerFor(String.class)); [EOL]     assertEquals(handler2, paramMap.getHandlerFor(String.class)); [EOL] } <line_num>: 72,80
public void testMakeUnmodifiable() throws Exception { [EOL]     paramMap.makeUnmodifiable(); [EOL]     try { [EOL]         paramMap.register(String.class, "blah"); [EOL]         fail("Can not register handlers when map is unmodifiable"); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] } <line_num>: 82,88
public void testTypeHierarchy() { [EOL]     paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]     String handler = paramMap.getHandlerFor(Sub.class); [EOL]     assertEquals("baseHandler", handler); [EOL] } <line_num>: 90,94
public void testTypeHierarchyMultipleHandlers() { [EOL]     paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]     paramMap.registerForTypeHierarchy(Sub.class, "subHandler"); [EOL]     String handler = paramMap.getHandlerFor(SubOfSub.class); [EOL]     assertEquals("subHandler", handler); [EOL] } <line_num>: 96,101
public void testTypeHierarchyRegisterIfAbsent() { [EOL]     paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]     ParameterizedTypeHandlerMap<String> otherMap = new ParameterizedTypeHandlerMap<String>(); [EOL]     otherMap.registerForTypeHierarchy(Base.class, "baseHandler2"); [EOL]     paramMap.registerIfAbsent(otherMap); [EOL]     String handler = paramMap.getHandlerFor(Base.class); [EOL]     assertEquals("baseHandler", handler); [EOL] } <line_num>: 103,110
public void testReplaceExistingTypeHierarchyHandler() { [EOL]     paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]     paramMap.registerForTypeHierarchy(Base.class, "base2Handler"); [EOL]     String handler = paramMap.getHandlerFor(Base.class); [EOL]     assertEquals("base2Handler", handler); [EOL] } <line_num>: 112,117
public void testHidingExistingTypeHierarchyHandlerIsDisallowed() { [EOL]     paramMap.registerForTypeHierarchy(Sub.class, "subHandler"); [EOL]     try { [EOL]         paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]         fail("A handler that hides an existing type hierarchy handler is not allowed"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] } <line_num>: 119,126
