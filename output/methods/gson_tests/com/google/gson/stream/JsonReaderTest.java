public void testReadArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true, true]")); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] } <line_num>: 26,33
public void testReadEmptyArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[]")); [EOL]     reader.beginArray(); [EOL]     assertFalse(reader.hasNext()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] } <line_num>: 35,41
public void testReadObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\": \"android\", \"b\": \"banana\"}")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals("android", reader.nextString()); [EOL]     assertEquals("b", reader.nextName()); [EOL]     assertEquals("banana", reader.nextString()); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] } <line_num>: 43,53
public void testReadEmptyObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{}")); [EOL]     reader.beginObject(); [EOL]     assertFalse(reader.hasNext()); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] } <line_num>: 55,61
public void testSkipObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\": { \"c\": [], \"d\": [true, true, {}] }, \"b\": \"banana\"}")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     reader.skipValue(); [EOL]     assertEquals("b", reader.nextName()); [EOL]     reader.skipValue(); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] } <line_num>: 63,73
public void testHelloWorld() throws IOException { [EOL]     String json = "{\n" + "   \"hello\": true,\n" + "   \"foo\": [\"world\"]\n" + "}"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginObject(); [EOL]     assertEquals("hello", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals("foo", reader.nextName()); [EOL]     reader.beginArray(); [EOL]     assertEquals("world", reader.nextString()); [EOL]     reader.endArray(); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] } <line_num>: 75,90
public void testNulls() { [EOL]     try { [EOL]         new JsonReader(null); [EOL]         fail(); [EOL]     } catch (NullPointerException expected) { [EOL]     } [EOL] } <line_num>: 92,98
public void testEmptyString() throws IOException { [EOL]     try { [EOL]         new JsonReader(new StringReader("")).beginArray(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL]     try { [EOL]         new JsonReader(new StringReader("")).beginObject(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] } <line_num>: 100,109
public void testNoTopLevelObject() throws IOException { [EOL]     try { [EOL]         new JsonReader(new StringReader("true")).nextBoolean(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] } <line_num>: 111,116
public void testCharacterUnescaping() throws IOException { [EOL]     String json = "[\"a\"," + "\"a\\\"\"," + "\"\\\"\"," + "\":\"," + "\",\"," + "\"\\b\"," + "\"\\f\"," + "\"\\n\"," + "\"\\r\"," + "\"\\t\"," + "\" \"," + "\"\\\\\"," + "\"{\"," + "\"}\"," + "\"[\"," + "\"]\"," + "\"\\u0000\"," + "\"\\u0019\"," + "\"\\u20AC\"" + "]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL]     assertEquals("a\"", reader.nextString()); [EOL]     assertEquals("\"", reader.nextString()); [EOL]     assertEquals(":", reader.nextString()); [EOL]     assertEquals(",", reader.nextString()); [EOL]     assertEquals("\b", reader.nextString()); [EOL]     assertEquals("\f", reader.nextString()); [EOL]     assertEquals("\n", reader.nextString()); [EOL]     assertEquals("\r", reader.nextString()); [EOL]     assertEquals("\t", reader.nextString()); [EOL]     assertEquals(" ", reader.nextString()); [EOL]     assertEquals("\\", reader.nextString()); [EOL]     assertEquals("{", reader.nextString()); [EOL]     assertEquals("}", reader.nextString()); [EOL]     assertEquals("[", reader.nextString()); [EOL]     assertEquals("]", reader.nextString()); [EOL]     assertEquals("\0", reader.nextString()); [EOL]     assertEquals("\u0019", reader.nextString()); [EOL]     assertEquals("\u20AC", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] } <line_num>: 118,162
public void testIntegersWithFractionalPartSpecified() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[1.0,1.0,1.0]")); [EOL]     reader.beginArray(); [EOL]     assertEquals(1.0, reader.nextDouble()); [EOL]     assertEquals(1, reader.nextInt()); [EOL]     assertEquals(1L, reader.nextLong()); [EOL] } <line_num>: 164,170
public void testDoubles() throws IOException { [EOL]     String json = "[-0.0," + "1.0," + "1.7976931348623157E308," + "4.9E-324," + "0.0," + "-0.5," + "2.2250738585072014E-308," + "3.141592653589793," + "2.718281828459045]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals(-0.0, reader.nextDouble()); [EOL]     assertEquals(1.0, reader.nextDouble()); [EOL]     assertEquals(1.7976931348623157E308, reader.nextDouble()); [EOL]     assertEquals(4.9E-324, reader.nextDouble()); [EOL]     assertEquals(0.0, reader.nextDouble()); [EOL]     assertEquals(-0.5, reader.nextDouble()); [EOL]     assertEquals(2.2250738585072014E-308, reader.nextDouble()); [EOL]     assertEquals(3.141592653589793, reader.nextDouble()); [EOL]     assertEquals(2.718281828459045, reader.nextDouble()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] } <line_num>: 172,195
public void testStrictNonFiniteDoubles() throws IOException { [EOL]     String json = "[NaN]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextDouble(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] } <line_num>: 197,206
public void testLenientNonFiniteDoubles() throws IOException { [EOL]     String json = "[NaN, -Infinity, Infinity]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertTrue(Double.isNaN(reader.nextDouble())); [EOL]     assertEquals(Double.NEGATIVE_INFINITY, reader.nextDouble()); [EOL]     assertEquals(Double.POSITIVE_INFINITY, reader.nextDouble()); [EOL]     reader.endArray(); [EOL] } <line_num>: 208,217
public void testLongs() throws IOException { [EOL]     String json = "[0,0,0," + "1,1,1," + "-1,-1,-1," + "-9223372036854775808," + "9223372036854775807]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals(0L, reader.nextLong()); [EOL]     assertEquals(0, reader.nextInt()); [EOL]     assertEquals(0.0, reader.nextDouble()); [EOL]     assertEquals(1L, reader.nextLong()); [EOL]     assertEquals(1, reader.nextInt()); [EOL]     assertEquals(1.0, reader.nextDouble()); [EOL]     assertEquals(-1L, reader.nextLong()); [EOL]     assertEquals(-1, reader.nextInt()); [EOL]     assertEquals(-1.0, reader.nextDouble()); [EOL]     try { [EOL]         reader.nextInt(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     assertEquals(Long.MIN_VALUE, reader.nextLong()); [EOL]     try { [EOL]         reader.nextInt(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     assertEquals(Long.MAX_VALUE, reader.nextLong()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] } <line_num>: 219,250
public void disabled_testHighPrecisionLong() throws IOException { [EOL]     String json = "[9223372036854775806.000]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals(9223372036854775806L, reader.nextLong()); [EOL]     reader.endArray(); [EOL] } <line_num>: 256,262
public void testNumberWithOctalPrefix() throws IOException { [EOL]     String json = "[01]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextInt(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextLong(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextDouble(); [EOL]         fail(); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL]     assertEquals("01", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] } <line_num>: 264,286
public void testBooleans() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true,false]")); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(false, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] } <line_num>: 288,295
public void testMixedCaseLiterals() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[True,TruE,False,FALSE,NULL,nulL]")); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(false, reader.nextBoolean()); [EOL]     assertEquals(false, reader.nextBoolean()); [EOL]     reader.nextNull(); [EOL]     reader.nextNull(); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] } <line_num>: 297,308
public void testMissingValue() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":}")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] } <line_num>: 310,319
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] } <line_num>: 321,331
public void testPrematurelyClosed() throws IOException { [EOL]     try { [EOL]         JsonReader reader = new JsonReader(new StringReader("{\"a\":[]}")); [EOL]         reader.beginObject(); [EOL]         reader.close(); [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         JsonReader reader = new JsonReader(new StringReader("{\"a\":[]}")); [EOL]         reader.close(); [EOL]         reader.beginObject(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         JsonReader reader = new JsonReader(new StringReader("{\"a\":true}")); [EOL]         reader.beginObject(); [EOL]         reader.nextName(); [EOL]         reader.peek(); [EOL]         reader.close(); [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] } <line_num>: 333,361
public void testNextFailuresDoNotAdvance() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true}")); [EOL]     reader.beginObject(); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     assertEquals("a", reader.nextName()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.beginArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.endArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.beginObject(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.endObject(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.beginArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.endArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL]     reader.close(); [EOL] } <line_num>: 363,421
public void testStringNullIsNotNull() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[\"null\"]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextNull(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] } <line_num>: 423,431
public void testNullLiteralIsNotAString() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[null]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] } <line_num>: 433,441
public void testStrictNameValueSeparator() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\"=true}")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL]     reader = new JsonReader(new StringReader("{\"a\"=>true}")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] } <line_num>: 443,461
public void testLenientNameValueSeparator() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\"=true}")); [EOL]     reader.setLenient(true); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("{\"a\"=>true}")); [EOL]     reader.setLenient(true); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] } <line_num>: 463,475
public void testStrictComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] } <line_num>: 477,501
public void testLenientComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] } <line_num>: 503,518
public void testStrictUnquotedNames() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{a:true}")); [EOL]     reader.beginObject(); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] } <line_num>: 520,528
public void testLenientUnquotedNames() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{a:true}")); [EOL]     reader.setLenient(true); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL] } <line_num>: 530,535
public void testStrictSingleQuotedNames() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{'a':true}")); [EOL]     reader.beginObject(); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] } <line_num>: 537,545
public void testLenientSingleQuotedNames() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{'a':true}")); [EOL]     reader.setLenient(true); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL] } <line_num>: 547,552
public void testStrictUnquotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[a]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] } <line_num>: 554,562
public void testLenientUnquotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[a]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL] } <line_num>: 564,569
public void testStrictSingleQuotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("['a']")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] } <line_num>: 571,579
public void testLenientSingleQuotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("['a']")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL] } <line_num>: 581,586
public void testStrictSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] } <line_num>: 588,597
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] } <line_num>: 599,605
public void testStrictSemicolonDelimitedNameValuePair() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true;\"b\":true}")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] } <line_num>: 607,617
public void testLenientSemicolonDelimitedNameValuePair() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true;\"b\":true}")); [EOL]     reader.setLenient(true); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals("b", reader.nextName()); [EOL] } <line_num>: 619,626
public void testStrictUnnecessaryArraySeparators() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true,,true]")); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextNull(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL]     reader = new JsonReader(new StringReader("[,true]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextNull(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL]     reader = new JsonReader(new StringReader("[true,]")); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextNull(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL]     reader = new JsonReader(new StringReader("[,]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextNull(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] } <line_num>: 628,662
public void testLenientUnnecessaryArraySeparators() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true,,true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.nextNull(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[,true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.nextNull(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[true,]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.nextNull(); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[,]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.nextNull(); [EOL]     reader.nextNull(); [EOL]     reader.endArray(); [EOL] } <line_num>: 664,693
public void testStrictMultipleTopLevelValues() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[] []")); [EOL]     reader.beginArray(); [EOL]     reader.endArray(); [EOL]     try { [EOL]         reader.peek(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] } <line_num>: 695,704
public void testLenientMultipleTopLevelValues() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[] true {}")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.endArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.beginObject(); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] } <line_num>: 706,715
public void testStrictTopLevelValueType() { [EOL]     JsonReader reader = new JsonReader(new StringReader("true")); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] } <line_num>: 717,724
public void testLenientTopLevelValueType() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("true")); [EOL]     reader.setLenient(true); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] } <line_num>: 726,730
public void testStrictNonExecutePrefix() { [EOL]     JsonReader reader = new JsonReader(new StringReader(")]}'\n []")); [EOL]     try { [EOL]         reader.beginArray(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] } <line_num>: 732,739
public void testLenientNonExecutePrefix() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader(")]}'\n []")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] } <line_num>: 741,747
public void testLenientNonExecutePrefixWithLeadingWhitespace() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("\r\n \t)]}'\n []")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] } <line_num>: 749,755
public void testLenientPartialNonExecutePrefix() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader(")]}' []")); [EOL]     reader.setLenient(true); [EOL]     assertEquals(")", reader.nextString()); [EOL]     try { [EOL]         reader.peek(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] } <line_num>: 757,766
