public void testWrongTopLevelType() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     try { [EOL]         jsonWriter.value("a"); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] } <line_num>: 28,36
public void testTwoNames() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a"); [EOL]     try { [EOL]         jsonWriter.name("a"); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] } <line_num>: 38,48
public void testNameWithoutValue() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a"); [EOL]     try { [EOL]         jsonWriter.endObject(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] } <line_num>: 50,60
public void testValueWithoutName() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     try { [EOL]         jsonWriter.value(true); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] } <line_num>: 62,71
public void testMultipleTopLevelValues() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray().endArray(); [EOL]     try { [EOL]         jsonWriter.beginArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] } <line_num>: 73,82
public void testBadNestingObject() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.beginObject(); [EOL]     try { [EOL]         jsonWriter.endArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] } <line_num>: 84,94
public void testBadNestingArray() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.beginArray(); [EOL]     try { [EOL]         jsonWriter.endObject(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] } <line_num>: 96,106
public void testNullName() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     try { [EOL]         jsonWriter.name(null); [EOL]         fail(); [EOL]     } catch (NullPointerException expected) { [EOL]     } [EOL] } <line_num>: 108,117
public void testNullStringValue() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a"); [EOL]     jsonWriter.value((String) null); [EOL]     jsonWriter.endObject(); [EOL]     assertEquals("{\"a\":null}", stringWriter.toString()); [EOL] } <line_num>: 119,127
public void testNonFiniteDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     try { [EOL]         jsonWriter.value(Double.NaN); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.NEGATIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.POSITIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] } <line_num>: 129,148
public void testNonFiniteBoxedDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     try { [EOL]         jsonWriter.value(new Double(Double.NaN)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(new Double(Double.NEGATIVE_INFINITY)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(new Double(Double.POSITIVE_INFINITY)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] } <line_num>: 150,169
public void testDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(-0.0); [EOL]     jsonWriter.value(1.0); [EOL]     jsonWriter.value(Double.MAX_VALUE); [EOL]     jsonWriter.value(Double.MIN_VALUE); [EOL]     jsonWriter.value(0.0); [EOL]     jsonWriter.value(-0.5); [EOL]     jsonWriter.value(2.2250738585072014E-308); [EOL]     jsonWriter.value(Math.PI); [EOL]     jsonWriter.value(Math.E); [EOL]     jsonWriter.endArray(); [EOL]     jsonWriter.close(); [EOL]     assertEquals("[-0.0," + "1.0," + "1.7976931348623157E308," + "4.9E-324," + "0.0," + "-0.5," + "2.2250738585072014E-308," + "3.141592653589793," + "2.718281828459045]", stringWriter.toString()); [EOL] } <line_num>: 171,195
public void testLongs() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(0); [EOL]     jsonWriter.value(1); [EOL]     jsonWriter.value(-1); [EOL]     jsonWriter.value(Long.MIN_VALUE); [EOL]     jsonWriter.value(Long.MAX_VALUE); [EOL]     jsonWriter.endArray(); [EOL]     jsonWriter.close(); [EOL]     assertEquals("[0," + "1," + "-1," + "-9223372036854775808," + "9223372036854775807]", stringWriter.toString()); [EOL] } <line_num>: 197,213
public void testNumbers() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(new BigInteger("0")); [EOL]     jsonWriter.value(new BigInteger("9223372036854775808")); [EOL]     jsonWriter.value(new BigInteger("-9223372036854775809")); [EOL]     jsonWriter.value(new BigDecimal("3.141592653589793238462643383")); [EOL]     jsonWriter.endArray(); [EOL]     jsonWriter.close(); [EOL]     assertEquals("[0," + "9223372036854775808," + "-9223372036854775809," + "3.141592653589793238462643383]", stringWriter.toString()); [EOL] } <line_num>: 215,229
public void testBooleans() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(true); [EOL]     jsonWriter.value(false); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[true,false]", stringWriter.toString()); [EOL] } <line_num>: 231,239
public void testNulls() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.nullValue(); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[null]", stringWriter.toString()); [EOL] } <line_num>: 241,248
public void testStrings() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value("a"); [EOL]     jsonWriter.value("a\""); [EOL]     jsonWriter.value("\""); [EOL]     jsonWriter.value(":"); [EOL]     jsonWriter.value(","); [EOL]     jsonWriter.value("\b"); [EOL]     jsonWriter.value("\f"); [EOL]     jsonWriter.value("\n"); [EOL]     jsonWriter.value("\r"); [EOL]     jsonWriter.value("\t"); [EOL]     jsonWriter.value(" "); [EOL]     jsonWriter.value("\\"); [EOL]     jsonWriter.value("{"); [EOL]     jsonWriter.value("}"); [EOL]     jsonWriter.value("["); [EOL]     jsonWriter.value("]"); [EOL]     jsonWriter.value("\0"); [EOL]     jsonWriter.value("\u0019"); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[\"a\"," + "\"a\\\"\"," + "\"\\\"\"," + "\":\"," + "\",\"," + "\"\\b\"," + "\"\\f\"," + "\"\\n\"," + "\"\\r\"," + "\"\\t\"," + "\" \"," + "\"\\\\\"," + "\"{\"," + "\"}\"," + "\"[\"," + "\"]\"," + "\"\\u0000\"," + "\"\\u0019\"]", stringWriter.toString()); [EOL] } <line_num>: 250,291
public void testEmptyArray() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[]", stringWriter.toString()); [EOL] } <line_num>: 293,299
public void testEmptyObject() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.endObject(); [EOL]     assertEquals("{}", stringWriter.toString()); [EOL] } <line_num>: 301,307
public void testObjectsInArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(5); [EOL]     jsonWriter.name("b").value(false); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("c").value(6); [EOL]     jsonWriter.name("d").value(true); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[{\"a\":5,\"b\":false}," + "{\"c\":6,\"d\":true}]", stringWriter.toString()); [EOL] } <line_num>: 309,324
public void testArraysInObjects() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a"); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(5); [EOL]     jsonWriter.value(false); [EOL]     jsonWriter.endArray(); [EOL]     jsonWriter.name("b"); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(6); [EOL]     jsonWriter.value(true); [EOL]     jsonWriter.endArray(); [EOL]     jsonWriter.endObject(); [EOL]     assertEquals("{\"a\":[5,false]," + "\"b\":[6,true]}", stringWriter.toString()); [EOL] } <line_num>: 326,343
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] } <line_num>: 345,355
public void testDeepNestingObjects() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.name("a"); [EOL]         jsonWriter.beginObject(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endObject(); [EOL]     } [EOL]     jsonWriter.endObject(); [EOL]     assertEquals("{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":" + "{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{" + "}}}}}}}}}}}}}}}}}}}}}", stringWriter.toString()); [EOL] } <line_num>: 357,372
public void testRepeatedName() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(true); [EOL]     jsonWriter.name("a").value(false); [EOL]     jsonWriter.endObject(); [EOL]     assertEquals("{\"a\":true,\"a\":false}", stringWriter.toString()); [EOL] } <line_num>: 374,383
public void testPrettyPrintObject() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.setIndent("   "); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(true); [EOL]     jsonWriter.name("b").value(false); [EOL]     jsonWriter.name("c").value(5.0); [EOL]     jsonWriter.name("e").nullValue(); [EOL]     jsonWriter.name("f").beginArray(); [EOL]     jsonWriter.value(6.0); [EOL]     jsonWriter.value(7.0); [EOL]     jsonWriter.endArray(); [EOL]     jsonWriter.name("g").beginObject(); [EOL]     jsonWriter.name("h").value(8.0); [EOL]     jsonWriter.name("i").value(9.0); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.endObject(); [EOL]     String expected = "{\n" + "   \"a\": true,\n" + "   \"b\": false,\n" + "   \"c\": 5.0,\n" + "   \"e\": null,\n" + "   \"f\": [\n" + "      6.0,\n" + "      7.0\n" + "   ],\n" + "   \"g\": {\n" + "      \"h\": 8.0,\n" + "      \"i\": 9.0\n" + "   }\n" + "}"; [EOL]     assertEquals(expected, stringWriter.toString()); [EOL] } <line_num>: 385,420
public void testPrettyPrintArray() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.setIndent("   "); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(true); [EOL]     jsonWriter.value(false); [EOL]     jsonWriter.value(5.0); [EOL]     jsonWriter.nullValue(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(6.0); [EOL]     jsonWriter.name("b").value(7.0); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(8.0); [EOL]     jsonWriter.value(9.0); [EOL]     jsonWriter.endArray(); [EOL]     jsonWriter.endArray(); [EOL]     String expected = "[\n" + "   true,\n" + "   false,\n" + "   5.0,\n" + "   null,\n" + "   {\n" + "      \"a\": 6.0,\n" + "      \"b\": 7.0\n" + "   },\n" + "   [\n" + "      8.0,\n" + "      9.0\n" + "   ]\n" + "]"; [EOL]     assertEquals(expected, stringWriter.toString()); [EOL] } <line_num>: 422,457
