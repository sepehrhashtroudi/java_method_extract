public void testDisallowNegativeValuesAndFailFast() throws Exception { [EOL]     try { [EOL]         new VersionExclusionStrategy(-1.0D); [EOL]         fail("should have thrown an exception."); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] } <line_num>: 33,38
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] } <line_num>: 40,47
public void testClassAndFieldAreBehindInVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION + 1); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] } <line_num>: 49,56
public void testClassAndFieldAreAheadInVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION - 1); [EOL]     assertTrue(strategy.shouldSkipClass(clazz)); [EOL]     assertTrue(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] } <line_num>: 58,65
