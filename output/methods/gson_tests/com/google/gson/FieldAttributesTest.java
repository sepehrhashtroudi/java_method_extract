@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     fieldAttributes = new FieldAttributes(Foo.class, Foo.class.getField("bar")); [EOL] } <line_num>: 36,40
public void testNullField() throws Exception { [EOL]     try { [EOL]         new FieldAttributes(Foo.class, null); [EOL]         fail("Field parameter can not be null"); [EOL]     } catch (NullPointerException expected) { [EOL]     } [EOL] } <line_num>: 42,47
public void testDeclaringClass() throws Exception { [EOL]     assertEquals(Foo.class, fieldAttributes.getDeclaringClass()); [EOL] } <line_num>: 49,51
public void testModifiers() throws Exception { [EOL]     assertFalse(fieldAttributes.hasModifier(Modifier.STATIC)); [EOL]     assertFalse(fieldAttributes.hasModifier(Modifier.FINAL)); [EOL]     assertFalse(fieldAttributes.hasModifier(Modifier.ABSTRACT)); [EOL]     assertFalse(fieldAttributes.hasModifier(Modifier.VOLATILE)); [EOL]     assertFalse(fieldAttributes.hasModifier(Modifier.PROTECTED)); [EOL]     assertTrue(fieldAttributes.hasModifier(Modifier.PUBLIC)); [EOL]     assertTrue(fieldAttributes.hasModifier(Modifier.TRANSIENT)); [EOL] } <line_num>: 53,62
public void testIsSynthetic() throws Exception { [EOL]     assertFalse(fieldAttributes.isSynthetic()); [EOL] } <line_num>: 64,66
public void testName() throws Exception { [EOL]     assertEquals("bar", fieldAttributes.getName()); [EOL] } <line_num>: 68,70
public void testDeclaredTypeAndClass() throws Exception { [EOL]     Type expectedType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     assertEquals(expectedType, fieldAttributes.getDeclaredType()); [EOL]     assertEquals(List.class, fieldAttributes.getDeclaredClass()); [EOL] } <line_num>: 72,76
