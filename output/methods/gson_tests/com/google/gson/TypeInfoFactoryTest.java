@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     obj = new ObjectWithDifferentFields<Integer>(); [EOL] } <line_num>: 38,42
public void testSimpleField() throws Exception { [EOL]     Field f = obj.getClass().getField("simpleField"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(String.class, typeInfo.getActualType()); [EOL]     assertEquals(String.class, typeInfo.getRawClass()); [EOL] } <line_num>: 44,52
public void testEnumField() throws Exception { [EOL]     Field f = obj.getClass().getField("enumField"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertTrue(typeInfo.isEnum()); [EOL]     assertEquals(ObjectWithDifferentFields.TestEnum.class, typeInfo.getActualType()); [EOL]     assertEquals(ObjectWithDifferentFields.TestEnum.class, typeInfo.getRawClass()); [EOL] } <line_num>: 54,62
public void testParameterizedTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleParameterizedType"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List.class, typeInfo.getRawClass()); [EOL] } <line_num>: 64,73
public void testNestedParameterizedTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<List<String>>>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleNestedParameterizedType"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List.class, typeInfo.getRawClass()); [EOL] } <line_num>: 75,84
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] } <line_num>: 86,95
public void testTypeVariableField() throws Exception { [EOL]     Field f = obj.getClass().getField("typeVariableObj"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(Integer.class, typeInfo.getActualType()); [EOL]     assertEquals(Integer.class, typeInfo.getRawClass()); [EOL] } <line_num>: 97,105
public void testTypeVariableArrayField() throws Exception { [EOL]     Field f = obj.getClass().getField("typeVariableArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(Integer[].class, typeInfo.getActualType()); [EOL]     assertEquals(Integer[].class, typeInfo.getRawClass()); [EOL] } <line_num>: 107,115
public void testMutliDimensionalTypeVariableArrayField() throws Exception { [EOL]     Field f = obj.getClass().getField("mutliDimensionalTypeVariableArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(Integer[][][].class, typeInfo.getActualType()); [EOL]     assertEquals(Integer[][][].class, typeInfo.getRawClass()); [EOL] } <line_num>: 117,125
public void testParameterizedTypeVariableField() throws Exception { [EOL]     Type listType = new TypeToken<List<Integer>>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("listOfTypeVariables"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List.class, typeInfo.getRawClass()); [EOL] } <line_num>: 127,136
public void testNestedParameterizedTypeVariableField() throws Exception { [EOL]     Type listType = new TypeToken<List<List<Integer>>>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("listOfListsOfTypeVariables"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List.class, typeInfo.getRawClass()); [EOL] } <line_num>: 138,147
public void testParameterizedTypeVariableArrayField() throws Exception { [EOL]     Type listType = new TypeToken<List<Integer>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("listOfTypeVariablesArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] } <line_num>: 149,158
public void testWildcardField() throws Exception { [EOL]     Type listType = new TypeToken<List<Object>>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("listWithWildcard"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List.class, typeInfo.getRawClass()); [EOL] } <line_num>: 160,169
public void testArrayOfWildcardField() throws Exception { [EOL]     Type listType = new TypeToken<List<Object>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("arrayOfListWithWildcard"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] } <line_num>: 171,180
public void testListStringWildcardField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("listWithStringWildcard"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List.class, typeInfo.getRawClass()); [EOL] } <line_num>: 182,191
public void testArrayOfListStringWildcardField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("arrayOfListWithStringWildcard"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] } <line_num>: 193,202
public void testListTypeVariableWildcardField() throws Exception { [EOL]     Type listType = new TypeToken<List<Integer>>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("listWithTypeVariableWildcard"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List.class, typeInfo.getRawClass()); [EOL] } <line_num>: 204,213
public void testArrayOfListTypeVariableWildcardField() throws Exception { [EOL]     Type listType = new TypeToken<List<Integer>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("arrayOfListWithTypeVariableWildcard"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] } <line_num>: 215,224
