public void testPrimitive() throws Exception { [EOL]     TypeInfo typeInfo = new TypeInfo(boolean.class); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertTrue(typeInfo.isPrimitive()); [EOL]     assertEquals(boolean.class, typeInfo.getRawClass()); [EOL]     assertEquals(Boolean.class, typeInfo.getWrappedClass()); [EOL] } <line_num>: 34,41
public void testPrimitiveWrapper() throws Exception { [EOL]     TypeInfo typeInfo = new TypeInfo(Integer.class); [EOL]     assertEquals(Integer.class, typeInfo.getRawClass()); [EOL]     assertTrue(typeInfo.isPrimitive()); [EOL]     assertFalse(typeInfo.isArray()); [EOL] } <line_num>: 43,49
public void testString() throws Exception { [EOL]     TypeInfo typeInfo = new TypeInfo(String.class); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isPrimitive()); [EOL]     assertEquals(String.class, typeInfo.getRawClass()); [EOL] } <line_num>: 51,57
public void testObject() throws Exception { [EOL]     TypeInfo typeInfo = new TypeInfo(Object.class); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isPrimitive()); [EOL]     assertEquals(Object.class, typeInfo.getRawClass()); [EOL] } <line_num>: 59,65
public void testPrimitiveType() throws Exception { [EOL]     TypeInfo typeInfo = new TypeInfo(long.class); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertEquals(long.class, typeInfo.getRawClass()); [EOL] } <line_num>: 67,71
public void testObjectType() throws Exception { [EOL]     TypeInfo typeInfo = new TypeInfo(String.class); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isPrimitive()); [EOL]     assertEquals(String.class, typeInfo.getRawClass()); [EOL] } <line_num>: 73,78
public void testParameterizedTypes() throws Exception { [EOL]     Type type = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     TypeInfo typeInfo = new TypeInfo(type); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertEquals(List.class, typeInfo.getRawClass()); [EOL]     assertEquals(type, typeInfo.getActualType()); [EOL] } <line_num>: 80,87
public void testGenericizedGenericType() throws Exception { [EOL]     Type type = new TypeToken<List<List<String>>>() { [EOL]     }.getType(); [EOL]     Type genericType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     TypeInfo typeInfo = new TypeInfo(type); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertEquals(List.class, typeInfo.getRawClass()); [EOL]     Type actualTypeForFirstTypeVariable = TypeUtils.getActualTypeForFirstTypeVariable(type); [EOL]     assertEquals(genericType, actualTypeForFirstTypeVariable); [EOL]     typeInfo = new TypeInfo(genericType); [EOL]     actualTypeForFirstTypeVariable = TypeUtils.getActualTypeForFirstTypeVariable(genericType); [EOL]     assertEquals(String.class, actualTypeForFirstTypeVariable); [EOL] } <line_num>: 89,102
public void testStrangeTypeParameters() throws Exception { [EOL]     try { [EOL]         new TypeInfo(new Type() { [EOL]         }); [EOL]         fail("Should not be able to determine this unknown type"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] } <line_num>: 104,110
