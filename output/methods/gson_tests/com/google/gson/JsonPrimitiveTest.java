public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] } <line_num>: 31,36
public void testParsingStringAsBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("true"); [EOL]     assertFalse(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] } <line_num>: 38,43
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] } <line_num>: 45,57
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] } <line_num>: 59,69
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] } <line_num>: 71,82
public void testByteEqualsShort() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Byte((byte) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Short((short) 10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] } <line_num>: 84,89
public void testByteEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Byte((byte) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] } <line_num>: 91,96
public void testByteEqualsLong() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Byte((byte) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Long(10L)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] } <line_num>: 98,103
public void testByteEqualsBigInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Byte((byte) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new BigInteger("10")); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] } <line_num>: 105,110
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] } <line_num>: 112,117
public void testShortEqualsLong() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Long(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] } <line_num>: 119,124
public void testShortEqualsBigInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new BigInteger("10")); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] } <line_num>: 126,131
public void testIntegerEqualsLong() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Integer(10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Long(10L)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] } <line_num>: 133,138
public void testIntegerEqualsBigInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Integer(10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new BigInteger("10")); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] } <line_num>: 140,145
public void testLongEqualsBigInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Long(10L)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new BigInteger("10")); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] } <line_num>: 147,152
public void testFloatEqualsDouble() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Double(10.25D)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] } <line_num>: 154,159
public void testFloatEqualsBigDecimal() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new BigDecimal("10.25")); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] } <line_num>: 161,166
public void testDoubleEqualsBigDecimal() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Double(10.25D)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new BigDecimal("10.25")); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] } <line_num>: 168,173
public void testValidJsonOnToString() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("Some\nEscaped\nValue"); [EOL]     assertEquals("\"Some\\nEscaped\\nValue\"", json.toString()); [EOL]     json = new JsonPrimitive(new BigDecimal("1.333")); [EOL]     assertEquals("1.333", json.toString()); [EOL] } <line_num>: 175,181
