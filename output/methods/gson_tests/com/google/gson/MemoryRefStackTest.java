@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     stack = new MemoryRefStack(); [EOL] } <line_num>: 33,37
public void testPeekEmptyStack() throws Exception { [EOL]     try { [EOL]         stack.peek(); [EOL]     } catch (EmptyStackException expected) { [EOL]     } [EOL] } <line_num>: 39,43
public void testPushPeekAndPop() throws Exception { [EOL]     ObjectTypePair obj = new ObjectTypePair(this, getClass(), true); [EOL]     assertEquals(obj, stack.push(obj)); [EOL]     assertEquals(obj, stack.peek()); [EOL]     assertEquals(obj, stack.pop()); [EOL] } <line_num>: 45,51
public void testPopTooMany() throws Exception { [EOL]     ObjectTypePair obj = new ObjectTypePair(this, getClass(), true); [EOL]     stack.push(obj); [EOL]     assertEquals(obj, stack.pop()); [EOL]     try { [EOL]         stack.pop(); [EOL]     } catch (EmptyStackException expected) { [EOL]     } [EOL] } <line_num>: 53,61
public void testContains() throws Exception { [EOL]     MockObject objA = new MockObject(); [EOL]     MockObject objB = new MockObject(); [EOL]     assertEquals(objA, objB); [EOL]     stack.push(new ObjectTypePair(objA, MockObject.class, true)); [EOL]     assertTrue(stack.contains(new ObjectTypePair(objA, MockObject.class, true))); [EOL]     assertFalse(stack.contains(new ObjectTypePair(objB, MockObject.class, true))); [EOL] } <line_num>: 63,70
@Override [EOL] public boolean equals(Object obj) { [EOL]     return obj instanceof MockObject && value == ((MockObject) obj).value; [EOL] } <line_num>: 75,78
@Override [EOL] public int hashCode() { [EOL]     return value; [EOL] } <line_num>: 80,83
