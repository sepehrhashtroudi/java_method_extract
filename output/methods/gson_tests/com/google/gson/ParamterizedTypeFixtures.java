public MyParameterizedType(T value) { [EOL]     this.value = value; [EOL] } <line_num>: 36,38
public MyParameterizedTypeInstanceCreator(T instanceOfT) { [EOL]     this.instanceOfT = instanceOfT; [EOL] } <line_num>: 113,115
public T getValue() { [EOL]     return value; [EOL] } <line_num>: 39,41
public String getExpectedJson() { [EOL]     String valueAsJson = getExpectedJson(value); [EOL]     return String.format("{\"value\":%s}", valueAsJson); [EOL] } <line_num>: 43,46
private String getExpectedJson(Object obj) { [EOL]     Class<?> clazz = obj.getClass(); [EOL]     if (Primitives.isWrapperType(Primitives.wrap(clazz))) { [EOL]         return obj.toString(); [EOL]     } else if (obj.getClass().equals(String.class)) { [EOL]         return "\"" + obj.toString() + "\""; [EOL]     } else { [EOL]         try { [EOL]             Method method = clazz.getMethod("getExpectedJson"); [EOL]             Object results = method.invoke(obj); [EOL]             return (String) results; [EOL]         } catch (SecurityException e) { [EOL]             throw new RuntimeException(e); [EOL]         } catch (NoSuchMethodException e) { [EOL]             throw new RuntimeException(e); [EOL]         } catch (IllegalArgumentException e) { [EOL]             throw new RuntimeException(e); [EOL]         } catch (IllegalAccessException e) { [EOL]             throw new RuntimeException(e); [EOL]         } catch (InvocationTargetException e) { [EOL]             throw new RuntimeException(e); [EOL]         } [EOL]     } [EOL] } <line_num>: 48,72
@Override [EOL] public int hashCode() { [EOL]     return value == null ? 0 : value.hashCode(); [EOL] } <line_num>: 74,77
@SuppressWarnings("rawtypes") [EOL] @Override [EOL] public boolean equals(Object obj) { [EOL]     if (this == obj) { [EOL]         return true; [EOL]     } [EOL]     if (obj == null) { [EOL]         return false; [EOL]     } [EOL]     if (getClass() != obj.getClass()) { [EOL]         return false; [EOL]     } [EOL]     MyParameterizedType other = (MyParameterizedType) obj; [EOL]     if (value == null) { [EOL]         if (other.value != null) { [EOL]             return false; [EOL]         } [EOL]     } else if (!value.equals(other.value)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 78,99
public MyParameterizedType<T> createInstance(Type type) { [EOL]     return new MyParameterizedType<T>(instanceOfT); [EOL] } <line_num>: 116,118
@SuppressWarnings("unchecked") [EOL] public static <T> String getExpectedJson(MyParameterizedType<T> obj) { [EOL]     Class<T> clazz = (Class<T>) obj.value.getClass(); [EOL]     boolean addQuotes = !clazz.isArray() && !Primitives.unwrap(clazz).isPrimitive(); [EOL]     StringBuilder sb = new StringBuilder("{\""); [EOL]     sb.append(obj.value.getClass().getSimpleName()).append("\":"); [EOL]     if (addQuotes) { [EOL]         sb.append("\""); [EOL]     } [EOL]     sb.append(obj.value.toString()); [EOL]     if (addQuotes) { [EOL]         sb.append("\""); [EOL]     } [EOL]     sb.append("}"); [EOL]     return sb.toString(); [EOL] } <line_num>: 123,138
public JsonElement serialize(MyParameterizedType<T> src, Type classOfSrc, JsonSerializationContext context) { [EOL]     JsonObject json = new JsonObject(); [EOL]     T value = src.getValue(); [EOL]     json.add(value.getClass().getSimpleName(), context.serialize(value)); [EOL]     return json; [EOL] } <line_num>: 140,146
@SuppressWarnings("unchecked") [EOL] public MyParameterizedType<T> deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { [EOL]     Type genericClass = TypeUtils.getActualTypeForFirstTypeVariable(typeOfT); [EOL]     TypeInfo typeInfo = new TypeInfo(genericClass); [EOL]     String className = typeInfo.getRawClass().getSimpleName(); [EOL]     T value = (T) json.getAsJsonObject().get(className).getAsObject(); [EOL]     if (typeInfo.isPrimitive()) { [EOL]         PrimitiveTypeAdapter typeAdapter = new PrimitiveTypeAdapter(); [EOL]         value = (T) typeAdapter.adaptType(value, typeInfo.getRawClass()); [EOL]     } [EOL]     return new MyParameterizedType<T>(value); [EOL] } <line_num>: 148,160
