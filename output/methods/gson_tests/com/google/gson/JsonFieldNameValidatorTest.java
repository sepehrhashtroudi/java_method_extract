@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     validator = new JsonFieldNameValidator(); [EOL] } <line_num>: 30,34
public void testValidFieldBeginsWithDollarSign() throws Exception { [EOL]     String fieldName = "$abc"; [EOL]     assertEquals(fieldName, validator.validate(fieldName)); [EOL] } <line_num>: 36,39
public void testValidFieldBeginsWithUnderscore() throws Exception { [EOL]     String fieldName = "_abc"; [EOL]     assertEquals(fieldName, validator.validate(fieldName)); [EOL] } <line_num>: 41,44
public void testValidFieldBeginsWithLetter() throws Exception { [EOL]     String fieldName = "abc"; [EOL]     assertEquals(fieldName, validator.validate(fieldName)); [EOL] } <line_num>: 46,49
public void testValidFieldMixingLetter() throws Exception { [EOL]     String fieldName = "$abc_12v$34"; [EOL]     assertEquals(fieldName, validator.validate(fieldName)); [EOL] } <line_num>: 51,54
public void testInvalidFieldStartingWithNumbers() throws Exception { [EOL]     try { [EOL]         validator.validate("1abc"); [EOL]         fail("Json field name can not start with a number"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] } <line_num>: 56,61
public void testInvalidFieldStartingTwoDollarSigns() throws Exception { [EOL]     try { [EOL]         validator.validate("$$abc"); [EOL]         fail("Json field name can not start with a double dollar sign"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] } <line_num>: 63,68
public void testInvalidFieldStartingTwoUnderscores() throws Exception { [EOL]     try { [EOL]         validator.validate("__abc"); [EOL]         fail("Json field name can not start with a double underscore"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] } <line_num>: 70,75
public void testInvalidFieldStartingDollarUnderscore() throws Exception { [EOL]     try { [EOL]         validator.validate("$_abc"); [EOL]         fail("Json field name can not start with two non-alphabet characters"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] } <line_num>: 77,82
public void testJavaAndJsKeywordAsFieldName() throws Exception { [EOL]     String fieldName = "break"; [EOL]     assertEquals(fieldName, validator.validate(fieldName)); [EOL] } <line_num>: 84,87
public void testInvalidCharacters() throws Exception { [EOL]     try { [EOL]         validator.validate("abc.123"); [EOL]         fail("Json field name can not contain a period character"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] } <line_num>: 89,94
public void testDashesInFieldName() throws Exception { [EOL]     String fieldName = "test-field-name"; [EOL]     assertEquals(fieldName, validator.validate(fieldName)); [EOL] } <line_num>: 96,99
public void testSpacesInFieldName() throws Exception { [EOL]     String fieldName = "test field name"; [EOL]     assertEquals(fieldName, validator.validate(fieldName)); [EOL] } <line_num>: 101,104
public void testSpacesInBeginningOfName() throws Exception { [EOL]     try { [EOL]         validator.validate(" testFieldName"); [EOL]         fail("Json field name can not contain a period character"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] } <line_num>: 106,111
