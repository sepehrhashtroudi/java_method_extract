public void testArray() { [EOL]     String[] a = { "a", "b", "c" }; [EOL]     TypeInfoArray typeInfo = new TypeInfoArray(a.getClass()); [EOL]     assertEquals(a.getClass(), typeInfo.getRawClass()); [EOL]     assertEquals(String.class, typeInfo.getComponentRawType()); [EOL] } <line_num>: 34,39
public void testArrayOfArrays() { [EOL]     String[][] a = { new String[] { "a1", "a2", "a3" }, new String[] { "b1", "b2", "b3" }, new String[] { "c1", "c2", "c3" } }; [EOL]     TypeInfoArray typeInfo = new TypeInfoArray(a.getClass()); [EOL]     assertEquals(a.getClass(), typeInfo.getRawClass()); [EOL]     assertEquals(String.class, typeInfo.getComponentRawType()); [EOL]     assertEquals(String[].class, typeInfo.getSecondLevelType()); [EOL] } <line_num>: 41,50
public void testParameterizedArray() { [EOL]     Type type = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     TypeInfoArray typeInfo = new TypeInfoArray(type); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL]     assertEquals(List.class, typeInfo.getComponentRawType()); [EOL] } <line_num>: 52,57
public void testParameterizedArrayOfArrays() { [EOL]     Type type = new TypeToken<List<String>[][]>() { [EOL]     }.getType(); [EOL]     Type secondLevelType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     TypeInfoArray typeInfo = new TypeInfoArray(type); [EOL]     assertEquals(List[][].class, typeInfo.getRawClass()); [EOL]     assertEquals(secondLevelType, typeInfo.getSecondLevelType()); [EOL]     assertEquals(List.class, typeInfo.getComponentRawType()); [EOL] } <line_num>: 59,67
public void testNestedParameterizedArray() { [EOL]     Type type = new TypeToken<List<List<String>>[]>() { [EOL]     }.getType(); [EOL]     Type secondLevelType = new TypeToken<List<List<String>>>() { [EOL]     }.getType(); [EOL]     TypeInfoArray typeInfo = new TypeInfoArray(type); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL]     assertEquals(secondLevelType, typeInfo.getSecondLevelType()); [EOL]     assertEquals(List.class, typeInfo.getComponentRawType()); [EOL] } <line_num>: 69,77
public void testPrimitiveArray() throws Exception { [EOL]     TypeInfoArray arrayTypeInfo = new TypeInfoArray(int[].class); [EOL]     assertTrue(arrayTypeInfo.isArray()); [EOL]     assertFalse(arrayTypeInfo.isPrimitive()); [EOL]     assertEquals(int.class, arrayTypeInfo.getSecondLevelType()); [EOL] } <line_num>: 79,85
public void testStringArray() throws Exception { [EOL]     TypeInfoArray arrayTypeInfo = new TypeInfoArray(String[].class); [EOL]     assertTrue(arrayTypeInfo.isArray()); [EOL]     assertEquals(String.class, arrayTypeInfo.getSecondLevelType()); [EOL]     assertEquals(String[].class, arrayTypeInfo.getRawClass()); [EOL] } <line_num>: 87,93
public void testPrimitiveArrayType() throws Exception { [EOL]     TypeInfoArray typeInfo = new TypeInfoArray(long[].class); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertEquals(long.class, typeInfo.getSecondLevelType()); [EOL]     assertEquals(long[].class, typeInfo.getRawClass()); [EOL] } <line_num>: 95,100
public void testStringArrayType() throws Exception { [EOL]     TypeInfoArray typeInfo = new TypeInfoArray(String[].class); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertEquals(String[].class, typeInfo.getRawClass()); [EOL]     assertEquals(String.class, typeInfo.getSecondLevelType()); [EOL] } <line_num>: 102,107
public void testArrayAsParameterizedTypes() throws Exception { [EOL]     Type type = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Type secondLevelType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     TypeInfoArray typeInfo = new TypeInfoArray(type); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL]     assertEquals(secondLevelType, typeInfo.getSecondLevelType()); [EOL]     Type actualType = typeInfo.getActualType(); [EOL]     assertEquals(type, actualType); [EOL]     Type actualTypeForFirstTypeVariable = TypeUtils.getActualTypeForFirstTypeVariable(actualType); [EOL]     assertEquals(String.class, actualTypeForFirstTypeVariable); [EOL] } <line_num>: 109,122
