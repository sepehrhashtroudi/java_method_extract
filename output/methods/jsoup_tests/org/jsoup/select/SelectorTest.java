@Test [EOL] public void testByTag() { [EOL]     Elements els = Jsoup.parse("<div id=1><div id=2><p>Hello</p></div></div><div id=3>").select("div"); [EOL]     assertEquals(3, els.size()); [EOL]     assertEquals("1", els.get(0).id()); [EOL]     assertEquals("2", els.get(1).id()); [EOL]     assertEquals("3", els.get(2).id()); [EOL]     Elements none = Jsoup.parse("<div id=1><div id=2><p>Hello</p></div></div><div id=3>").select("span"); [EOL]     assertEquals(0, none.size()); [EOL] } <line_num>: 14,23
@Test [EOL] public void testById() { [EOL]     Elements els = Jsoup.parse("<div><p id=foo>Hello</p><p id=foo>Foo two!</p></div>").select("#foo"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals("Hello", els.get(0).text()); [EOL]     Elements none = Jsoup.parse("<div id=1></div>").select("#foo"); [EOL]     assertEquals(0, none.size()); [EOL] } <line_num>: 25,32
@Test [EOL] public void testByClass() { [EOL]     Elements els = Jsoup.parse("<p id=0 class='one two'><p id=1 class='one'><p id=2 class='two'>").select("p.one"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("0", els.get(0).id()); [EOL]     assertEquals("1", els.get(1).id()); [EOL]     Elements none = Jsoup.parse("<div class='one'></div>").select(".foo"); [EOL]     assertEquals(0, none.size()); [EOL]     Elements els2 = Jsoup.parse("<div class='one-two'></div>").select(".one-two"); [EOL]     assertEquals(1, els2.size()); [EOL] } <line_num>: 34,45
@Test [EOL] public void testByAttribute() { [EOL]     String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("[title]"); [EOL]     assertEquals(4, withTitle.size()); [EOL]     Elements foo = doc.select("[title=foo]"); [EOL]     assertEquals(1, foo.size()); [EOL]     Elements not = doc.select("div[title!=bar]"); [EOL]     assertEquals(5, not.size()); [EOL]     assertEquals("Foo", not.first().attr("title")); [EOL]     Elements starts = doc.select("[title^=ba]"); [EOL]     assertEquals(2, starts.size()); [EOL]     assertEquals("Bar", starts.first().attr("title")); [EOL]     assertEquals("Bam", starts.last().attr("title")); [EOL]     Elements ends = doc.select("[title$=am]"); [EOL]     assertEquals(2, ends.size()); [EOL]     assertEquals("Bam", ends.first().attr("title")); [EOL]     assertEquals("SLAM", ends.last().attr("title")); [EOL]     Elements contains = doc.select("[title*=a]"); [EOL]     assertEquals(3, contains.size()); [EOL]     assertEquals("Bar", contains.first().attr("title")); [EOL]     assertEquals("SLAM", contains.last().attr("title")); [EOL] } <line_num>: 47,75
@Test [EOL] public void testAllElements() { [EOL]     String h = "<div><p>Hello</p><p><b>there</b></p></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements allDoc = doc.select("*"); [EOL]     Elements allUnderDiv = doc.select("div *"); [EOL]     assertEquals(8, allDoc.size()); [EOL]     assertEquals(3, allUnderDiv.size()); [EOL]     assertEquals("p", allUnderDiv.first().tagName()); [EOL] } <line_num>: 77,85
@Test [EOL] public void testAllWithClass() { [EOL]     String h = "<p class=first>One<p class=first>Two<p>Three"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements ps = doc.select("*.first"); [EOL]     assertEquals(2, ps.size()); [EOL] } <line_num>: 87,92
@Test [EOL] public void testGroupOr() { [EOL]     String h = "<div title=foo /><div title=bar /><div /><p></p><img /><span title=qux>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select("p,div,[title]"); [EOL]     assertEquals(5, els.size()); [EOL]     assertEquals("p", els.get(0).tagName()); [EOL]     assertEquals("div", els.get(1).tagName()); [EOL]     assertEquals("foo", els.get(1).attr("title")); [EOL]     assertEquals("div", els.get(2).tagName()); [EOL]     assertEquals("bar", els.get(2).attr("title")); [EOL]     assertEquals("div", els.get(3).tagName()); [EOL]     assertTrue(els.get(3).attr("title").length() == 0); [EOL]     assertFalse(els.get(3).hasAttr("title")); [EOL]     assertEquals("span", els.get(4).tagName()); [EOL] } <line_num>: 94,109
@Test [EOL] public void testGroupOrAttribute() { [EOL]     String h = "<div id=1 /><div id=2 /><div title=foo /><div title=bar />"; [EOL]     Elements els = Jsoup.parse(h).select("[id],[title=foo]"); [EOL]     assertEquals(3, els.size()); [EOL]     assertEquals("1", els.get(0).id()); [EOL]     assertEquals("2", els.get(1).id()); [EOL]     assertEquals("foo", els.get(2).attr("title")); [EOL] } <line_num>: 111,119
@Test [EOL] public void descendant() { [EOL]     String h = "<div class=head><p class=first>Hello</p><p>There</p></div><p>None</p>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(".head p"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("Hello", els.get(0).text()); [EOL]     assertEquals("There", els.get(1).text()); [EOL]     Elements p = doc.select("p.first"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("Hello", p.get(0).text()); [EOL]     Elements empty = doc.select("p .first"); [EOL]     assertEquals(0, empty.size()); [EOL] } <line_num>: 121,135
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] } <line_num>: 137,156
@Test [EOL] public void deeperDescendant() { [EOL]     String h = "<div class=head><p><span class=first>Hello</div><div class=head><p class=first><span>Another</span><p>Again</div>"; [EOL]     Elements els = Jsoup.parse(h).select("div p .first"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals("Hello", els.first().text()); [EOL]     assertEquals("span", els.first().tagName()); [EOL] } <line_num>: 158,164
@Test [EOL] public void parentChildElement() { [EOL]     String h = "<div id=1><div id=2><div id = 3></div></div></div><div id=4></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divs = doc.select("div > div"); [EOL]     assertEquals(2, divs.size()); [EOL]     assertEquals("2", divs.get(0).id()); [EOL]     assertEquals("3", divs.get(1).id()); [EOL]     Elements div2 = doc.select("div#1 > div"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("2", div2.get(0).id()); [EOL] } <line_num>: 166,178
@Test [EOL] public void parentWithClassChild() { [EOL]     String h = "<h1 class=foo><a href=1 /></h1><h1 class=foo><a href=2 class=bar /></h1><h1><a href=3 /></h1>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements allAs = doc.select("h1 > a"); [EOL]     assertEquals(3, allAs.size()); [EOL]     assertEquals("a", allAs.first().tagName()); [EOL]     Elements fooAs = doc.select("h1.foo > a"); [EOL]     assertEquals(2, fooAs.size()); [EOL]     assertEquals("a", fooAs.first().tagName()); [EOL]     Elements barAs = doc.select("h1.foo > a.bar"); [EOL]     assertEquals(1, barAs.size()); [EOL] } <line_num>: 180,194
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] } <line_num>: 196,204
@Test [EOL] public void multiChildDescent() { [EOL]     String h = "<div id=foo><h1 class=bar><a href=http://example.com/>One</a></h1></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select("div#foo > h1.bar > a[href*=example]"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals("a", els.first().tagName()); [EOL] } <line_num>: 206,212
@Test [EOL] public void caseInsensitive() { [EOL]     String h = "<dIv tItle=bAr><div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(2, doc.select("DIV").size()); [EOL]     assertEquals(1, doc.select("DIV[TITLE]").size()); [EOL]     assertEquals(1, doc.select("DIV[TITLE=BAR]").size()); [EOL]     assertEquals(0, doc.select("DIV[TITLE=BARBARELLA").size()); [EOL] } <line_num>: 214,222
@Test [EOL] public void adjacentSiblings() { [EOL]     String h = "<ol><li>One<li>Two<li>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements sibs = doc.select("li + li"); [EOL]     assertEquals(2, sibs.size()); [EOL]     assertEquals("Two", sibs.get(0).text()); [EOL]     assertEquals("Three", sibs.get(1).text()); [EOL] } <line_num>: 224,231
@Test [EOL] public void adjacentSiblingsWithId() { [EOL]     String h = "<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements sibs = doc.select("li#1 + li#2"); [EOL]     assertEquals(1, sibs.size()); [EOL]     assertEquals("Two", sibs.get(0).text()); [EOL] } <line_num>: 233,239
@Test [EOL] public void notAdjacent() { [EOL]     String h = "<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements sibs = doc.select("li#1 + li#3"); [EOL]     assertEquals(0, sibs.size()); [EOL] } <line_num>: 241,246
@Test [EOL] public void mixCombinator() { [EOL]     String h = "<div class=foo><ol><li>One<li>Two<li>Three</ol></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements sibs = doc.select("body > div.foo li + li"); [EOL]     assertEquals(2, sibs.size()); [EOL]     assertEquals("Two", sibs.get(0).text()); [EOL]     assertEquals("Three", sibs.get(1).text()); [EOL] } <line_num>: 248,256
@Test [EOL] public void mixCombinatorGroup() { [EOL]     String h = "<div class=foo><ol><li>One<li>Two<li>Three</ol></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(".foo > ol, ol > li + li"); [EOL]     assertEquals(3, els.size()); [EOL]     assertEquals("ol", els.get(0).tagName()); [EOL]     assertEquals("Two", els.get(1).text()); [EOL]     assertEquals("Three", els.get(2).text()); [EOL] } <line_num>: 258,267
@Test [EOL] public void generalSiblings() { [EOL]     String h = "<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select("#1 ~ #3"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals("Three", els.first().text()); [EOL] } <line_num>: 269,275
@Test [EOL] public void testCharactersInIdAndClass() { [EOL]     String h = "<div><p id='a1-foo_bar'>One</p><p class='b2-qux_bif'>Two</p></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element el1 = doc.getElementById("a1-foo_bar"); [EOL]     assertEquals("One", el1.text()); [EOL]     Element el2 = doc.getElementsByClass("b2-qux_bif").first(); [EOL]     assertEquals("Two", el2.text()); [EOL]     Element el3 = doc.select("#a1-foo_bar").first(); [EOL]     assertEquals("One", el3.text()); [EOL]     Element el4 = doc.select(".b2-qux_bif").first(); [EOL]     assertEquals("Two", el4.text()); [EOL] } <line_num>: 278,292
@Test [EOL] public void testSupportsLeadingCombinator() { [EOL]     String h = "<div><p><span>One</span><span>Two</span></p></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element p = doc.select("div > p").first(); [EOL]     Elements spans = p.select("> span"); [EOL]     assertEquals(2, spans.size()); [EOL]     assertEquals("One", spans.first().text()); [EOL]     h = "<div id=1><div id=2><div id=3></div></div></div>"; [EOL]     doc = Jsoup.parse(h); [EOL]     Element div = doc.select("div").select(" > div").first(); [EOL]     assertEquals("2", div.id()); [EOL] } <line_num>: 295,309
@Test [EOL] public void testPseudoLessThan() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:lt(2)"); [EOL]     assertEquals(3, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Two", ps.get(1).text()); [EOL]     assertEquals("Four", ps.get(2).text()); [EOL] } <line_num>: 311,318
@Test [EOL] public void testPseudoGreaterThan() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:gt(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL]     assertEquals("Three", ps.get(1).text()); [EOL] } <line_num>: 320,326
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] } <line_num>: 328,339
@Test [EOL] public void testPseudoBetween() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:gt(0):lt(2)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } <line_num>: 341,346
@Test [EOL] public void testPseudoCombined() { [EOL]     Document doc = Jsoup.parse("<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>"); [EOL]     Elements ps = doc.select("div.foo p:gt(0)"); [EOL]     assertEquals(1, ps.size()); [EOL]     assertEquals("Two", ps.get(0).text()); [EOL] } <line_num>: 348,353
