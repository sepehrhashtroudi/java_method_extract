@Test [EOL] public void filter() { [EOL]     String h = "<p>Excl</p><div class=headline><p>Hello</p><p>There</p></div><div class=headline><h1>Headline</h1></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(".headline").select("p"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("Hello", els.get(0).text()); [EOL]     assertEquals("There", els.get(1).text()); [EOL] } <line_num>: 14,21
@Test [EOL] public void attributes() { [EOL]     String h = "<p title=foo><p title=bar><p class=foo><p class=bar>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("p[title]"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr("title")); [EOL]     assertFalse(withTitle.hasAttr("class")); [EOL]     assertEquals("foo", withTitle.attr("title")); [EOL]     withTitle.removeAttr("title"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select("p[title]").size()); [EOL]     Elements ps = doc.select("p").attr("style", "classy"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals("classy", ps.last().attr("style")); [EOL]     assertEquals("bar", ps.last().attr("class")); [EOL] } <line_num>: 23,40
@Test [EOL] public void hasAttr() { [EOL]     Document doc = Jsoup.parse("<p title=foo><p title=bar><p class=foo><p class=bar>"); [EOL]     Elements ps = doc.select("p"); [EOL]     assertTrue(ps.hasAttr("class")); [EOL]     assertFalse(ps.hasAttr("style")); [EOL] } <line_num>: 42,47
@Test [EOL] public void attr() { [EOL]     Document doc = Jsoup.parse("<p title=foo><p title=bar><p class=foo><p class=bar>"); [EOL]     String classVal = doc.select("p").attr("class"); [EOL]     assertEquals("foo", classVal); [EOL] } <line_num>: 49,53
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] } <line_num>: 55,67
@Test [EOL] public void text() { [EOL]     String h = "<div><p>Hello<p>there<p>world</div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello there world", doc.select("div > *").text()); [EOL] } <line_num>: 69,73
@Test [EOL] public void hasText() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p></p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertTrue(divs.hasText()); [EOL]     assertFalse(doc.select("div + div").hasText()); [EOL] } <line_num>: 75,80
@Test [EOL] public void html() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertEquals("<p>Hello</p>\n<p>There</p>", divs.html()); [EOL] } <line_num>: 82,86
@Test [EOL] public void outerHtml() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertEquals("<div><p>Hello</p></div><div><p>There</p></div>", TextUtil.stripNewlines(divs.outerHtml())); [EOL] } <line_num>: 88,92
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] } <line_num>: 94,103
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>"); [EOL]     Elements els = doc.select("form > *"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("one", els.val()); [EOL]     assertEquals("two", els.last().val()); [EOL]     els.val("three"); [EOL]     assertEquals("three", els.first().val()); [EOL]     assertEquals("three", els.last().val()); [EOL]     assertEquals("<textarea>three</textarea>", els.last().outerHtml()); [EOL] } <line_num>: 105,116
@Test [EOL] public void wrap() { [EOL]     String h = "<p><b>This</b> is <b>jsoup</b></p>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     doc.select("b").wrap("<i></i>"); [EOL]     assertEquals("<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>", doc.body().html()); [EOL] } <line_num>: 118,123
@Test [EOL] public void eq() { [EOL]     String h = "<p>Hello<p>there<p>world"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("there", doc.select("p").eq(1).text()); [EOL] } <line_num>: 125,129
@Test [EOL] public void is() { [EOL]     String h = "<p>Hello<p title=foo>there<p>world"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements ps = doc.select("p"); [EOL]     assertTrue(ps.is("[title=foo]")); [EOL]     assertFalse(ps.is("[title=bar]")); [EOL] } <line_num>: 131,137
