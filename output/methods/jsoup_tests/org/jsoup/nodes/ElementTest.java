@Test [EOL] public void getElementsByTagName() { [EOL]     Document doc = Jsoup.parse(reference); [EOL]     List<Element> divs = doc.getElementsByTag("div"); [EOL]     assertEquals(2, divs.size()); [EOL]     assertEquals("div1", divs.get(0).id()); [EOL]     assertEquals("div2", divs.get(1).id()); [EOL]     List<Element> ps = doc.getElementsByTag("p"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("Hello", ((TextNode) ps.get(0).childNode(0)).getWholeText()); [EOL]     assertEquals("Another ", ((TextNode) ps.get(1).childNode(0)).getWholeText()); [EOL]     List<Element> ps2 = doc.getElementsByTag("P"); [EOL]     assertEquals(ps, ps2); [EOL]     List<Element> imgs = doc.getElementsByTag("img"); [EOL]     assertEquals("foo.png", imgs.get(0).attr("src")); [EOL]     List<Element> empty = doc.getElementsByTag("wtf"); [EOL]     assertEquals(0, empty.size()); [EOL] } <line_num>: 21,40
@Test [EOL] public void testGetElementById() { [EOL]     Document doc = Jsoup.parse(reference); [EOL]     Element div = doc.getElementById("div1"); [EOL]     assertEquals("div1", div.id()); [EOL]     assertNull(doc.getElementById("none")); [EOL]     Document doc2 = Jsoup.parse("<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>"); [EOL]     Element div2 = doc2.getElementById("2"); [EOL]     assertEquals("div", div2.tagName()); [EOL]     Element span = div2.child(0).getElementById("2"); [EOL]     assertEquals("span", span.tagName()); [EOL] } <line_num>: 42,53
@Test [EOL] public void testGetText() { [EOL]     Document doc = Jsoup.parse(reference); [EOL]     assertEquals("Hello Another element", doc.text()); [EOL]     assertEquals("Another element", doc.getElementsByTag("p").get(1).text()); [EOL] } <line_num>: 55,59
@Test [EOL] public void testNormalisesText() { [EOL]     String h = "<p>Hello<p>There.</p> \n <p>Here <b>is</b> \n s<b>om</b>e text."; [EOL]     Document doc = Jsoup.parse(h); [EOL]     String text = doc.text(); [EOL]     assertEquals("Hello There. Here is some text.", text); [EOL] } <line_num>: 61,66
@Test [EOL] public void testKeepsPreText() { [EOL]     String h = "<p>Hello \n \n there.</p> <div><pre>  What's \n\n  that?</pre>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello there.   What's \n\n  that?", doc.text()); [EOL] } <line_num>: 68,72
@Test [EOL] public void testKeepsPreTextInCode() { [EOL]     String h = "<pre><code>code\n\ncode</code></pre>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("code\n\ncode", doc.text()); [EOL]     assertEquals("<pre><code>code\n\ncode</code></pre>", doc.body().html()); [EOL] } <line_num>: 74,79
@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>"); [EOL]     Element p = doc.getElementById("1"); [EOL]     assertEquals("there", p.text()); [EOL]     assertEquals("Hello", p.previousElementSibling().text()); [EOL]     assertEquals("this", p.nextElementSibling().text()); [EOL]     assertEquals("Hello", p.firstElementSibling().text()); [EOL]     assertEquals("element", p.lastElementSibling().text()); [EOL] } <line_num>: 81,89
@Test [EOL] public void testElementSiblingIndex() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p>...<p>Two</p>...<p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     assertTrue(0 == ps.get(0).elementSiblingIndex()); [EOL]     assertTrue(1 == ps.get(1).elementSiblingIndex()); [EOL]     assertTrue(2 == ps.get(2).elementSiblingIndex()); [EOL] } <line_num>: 91,97
@Test [EOL] public void testGetElementsWithClass() { [EOL]     Document doc = Jsoup.parse("<div class='mellow yellow'><span class=mellow>Hello <b class='yellow'>Yellow!</b></span><p>Empty</p></div>"); [EOL]     List<Element> els = doc.getElementsByClass("mellow"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("div", els.get(0).tagName()); [EOL]     assertEquals("span", els.get(1).tagName()); [EOL]     List<Element> els2 = doc.getElementsByClass("yellow"); [EOL]     assertEquals(2, els2.size()); [EOL]     assertEquals("div", els2.get(0).tagName()); [EOL]     assertEquals("b", els2.get(1).tagName()); [EOL]     List<Element> none = doc.getElementsByClass("solo"); [EOL]     assertEquals(0, none.size()); [EOL] } <line_num>: 99,114
@Test [EOL] public void testGetElementsWithAttribute() { [EOL]     Document doc = Jsoup.parse("<div style='bold'><p title=qux><p><b style></b></p></div>"); [EOL]     List<Element> els = doc.getElementsByAttribute("style"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals("div", els.get(0).tagName()); [EOL]     assertEquals("b", els.get(1).tagName()); [EOL]     List<Element> none = doc.getElementsByAttribute("class"); [EOL]     assertEquals(0, none.size()); [EOL] } <line_num>: 116,125
@Test [EOL] public void testGetElementsWithAttributeValue() { [EOL]     Document doc = Jsoup.parse("<div style='bold'><p><p><b style></b></p></div>"); [EOL]     List<Element> els = doc.getElementsByAttributeValue("style", "bold"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals("div", els.get(0).tagName()); [EOL]     List<Element> none = doc.getElementsByAttributeValue("style", "none"); [EOL]     assertEquals(0, none.size()); [EOL] } <line_num>: 127,135
@Test [EOL] public void testClassDomMethods() { [EOL]     Document doc = Jsoup.parse("<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>"); [EOL]     List<Element> els = doc.getElementsByAttribute("class"); [EOL]     Element span = els.get(0); [EOL]     assertEquals("mellow yellow", span.className()); [EOL]     assertTrue(span.hasClass("mellow")); [EOL]     assertTrue(span.hasClass("yellow")); [EOL]     Set<String> classes = span.classNames(); [EOL]     assertEquals(2, classes.size()); [EOL]     assertTrue(classes.contains("mellow")); [EOL]     assertTrue(classes.contains("yellow")); [EOL]     assertEquals("", doc.className()); [EOL]     assertFalse(doc.hasClass("mellow")); [EOL] } <line_num>: 137,151
@Test [EOL] public void testClassUpdates() { [EOL]     Document doc = Jsoup.parse("<div class='mellow yellow'></div>"); [EOL]     Element div = doc.select("div").first(); [EOL]     div.addClass("green"); [EOL]     assertEquals("mellow yellow green", div.className()); [EOL]     div.removeClass("red"); [EOL]     div.removeClass("yellow"); [EOL]     assertEquals("mellow green", div.className()); [EOL]     div.toggleClass("green").toggleClass("red"); [EOL]     assertEquals("mellow red", div.className()); [EOL] } <line_num>: 153,164
@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse("<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there"); [EOL]     assertEquals("<html><head></head><body><div title=\"Tags &amp;c.\"><img src=\"foo.png\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>", TextUtil.stripNewlines(doc.outerHtml())); [EOL] } <line_num>: 166,170
@Test [EOL] public void testInnerHtml() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     assertEquals("<p>Hello</p>", doc.getElementsByTag("div").get(0).html()); [EOL] } <line_num>: 172,175
@Test [EOL] public void testFormatHtml() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     assertEquals("<html>\n<head>\n</head>\n<body>\n <div>\n  <p>Hello</p>\n </div>\n</body>\n</html>", doc.html()); [EOL] } <line_num>: 177,180
@Test [EOL] public void testSetText() { [EOL]     String h = "<div id=1>Hello <p>there <b>now</b></p></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello there now", doc.text()); [EOL]     assertEquals("there now", doc.select("p").get(0).text()); [EOL]     Element div = doc.getElementById("1").text("Gone"); [EOL]     assertEquals("Gone", div.text()); [EOL]     assertEquals(0, doc.select("p").size()); [EOL] } <line_num>: 182,191
@Test [EOL] public void testAddNewElement() { [EOL]     Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); [EOL]     Element div = doc.getElementById("1"); [EOL]     div.appendElement("p").text("there"); [EOL]     div.appendElement("P").attr("class", "second").text("now"); [EOL]     assertEquals("<html><head></head><body><div id=\"1\"><p>Hello</p><p>there</p><p class=\"second\">now</p></div></body></html>", TextUtil.stripNewlines(doc.html())); [EOL] } <line_num>: 193,200
@Test [EOL] public void testPrependElement() { [EOL]     Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); [EOL]     Element div = doc.getElementById("1"); [EOL]     div.prependElement("p").text("Before"); [EOL]     assertEquals("Before", div.child(0).text()); [EOL]     assertEquals("Hello", div.child(1).text()); [EOL] } <line_num>: 202,208
@Test [EOL] public void testAddNewText() { [EOL]     Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); [EOL]     Element div = doc.getElementById("1"); [EOL]     div.appendText(" there & now >"); [EOL]     assertEquals("<p>Hello</p> there &amp; now &gt;", TextUtil.stripNewlines(div.html())); [EOL] } <line_num>: 210,215
@Test [EOL] public void testPrependText() { [EOL]     Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); [EOL]     Element div = doc.getElementById("1"); [EOL]     div.prependText("there & now > "); [EOL]     assertEquals("there & now > Hello", div.text()); [EOL]     assertEquals("there &amp; now &gt; <p>Hello</p>", TextUtil.stripNewlines(div.html())); [EOL] } <line_num>: 217,223
@Test [EOL] public void testAddNewHtml() { [EOL]     Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); [EOL]     Element div = doc.getElementById("1"); [EOL]     div.append("<p>there</p><p>now</p>"); [EOL]     assertEquals("<p>Hello</p><p>there</p><p>now</p>", TextUtil.stripNewlines(div.html())); [EOL] } <line_num>: 225,230
@Test [EOL] public void testPrependNewHtml() { [EOL]     Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); [EOL]     Element div = doc.getElementById("1"); [EOL]     div.prepend("<p>there</p><p>now</p>"); [EOL]     assertEquals("<p>there</p><p>now</p><p>Hello</p>", TextUtil.stripNewlines(div.html())); [EOL] } <line_num>: 232,237
@Test [EOL] public void testSetHtml() { [EOL]     Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); [EOL]     Element div = doc.getElementById("1"); [EOL]     div.html("<p>there</p><p>now</p>"); [EOL]     assertEquals("<p>there</p><p>now</p>", TextUtil.stripNewlines(div.html())); [EOL] } <line_num>: 239,244
@Test [EOL] public void testWrap() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p><p>There</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html())); [EOL]     Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>"); [EOL]     assertEquals("<div><div class=\"head\"><div><div class=\"foo\"><p>Hello</p></div><p>What?</p></div></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html())); [EOL]     assertEquals(ret, p); [EOL] } <line_num>: 246,257
@Test [EOL] public void testWrapWithRemainder() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div><p>There!</p>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); [EOL] } <line_num>: 259,264
@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p><p></p></div>"); [EOL]     Element div = doc.select("div").first(); [EOL]     Elements ps = doc.select("p"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] } <line_num>: 266,274
