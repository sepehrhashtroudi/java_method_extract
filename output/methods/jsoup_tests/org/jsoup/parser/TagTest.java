@Test [EOL] public void isCaseInsensitive() { [EOL]     Tag p1 = Tag.valueOf("P"); [EOL]     Tag p2 = Tag.valueOf("p"); [EOL]     assertEquals(p1, p2); [EOL] } <line_num>: 11,15
@Test [EOL] public void trims() { [EOL]     Tag p1 = Tag.valueOf("p"); [EOL]     Tag p2 = Tag.valueOf(" p "); [EOL]     assertEquals(p1, p2); [EOL] } <line_num>: 17,21
@Test [EOL] public void equality() { [EOL]     Tag p1 = Tag.valueOf("p"); [EOL]     Tag p2 = Tag.valueOf("p"); [EOL]     assertTrue(p1.equals(p2)); [EOL]     assertTrue(p1 == p2); [EOL] } <line_num>: 23,28
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] } <line_num>: 30,36
@Test [EOL] public void pSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     Tag img = Tag.valueOf("img"); [EOL]     Tag span = Tag.valueOf("span"); [EOL]     assertTrue(p.canContain(img)); [EOL]     assertTrue(p.canContain(span)); [EOL]     assertFalse(p.canContain(div)); [EOL]     assertFalse(p.canContain(p)); [EOL] } <line_num>: 38,48
@Test [EOL] public void spanSemantics() { [EOL]     Tag span = Tag.valueOf("span"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     Tag div = Tag.valueOf("div"); [EOL]     assertTrue(span.canContain(span)); [EOL]     assertFalse(span.canContain(p)); [EOL]     assertFalse(span.canContain(div)); [EOL] } <line_num>: 50,58
@Test [EOL] public void imgSemantics() { [EOL]     Tag img = Tag.valueOf("img"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertFalse(img.canContain(img)); [EOL]     assertFalse(img.canContain(p)); [EOL] } <line_num>: 60,66
@Test [EOL] public void defaultSemantics() { [EOL]     Tag foo = Tag.valueOf("foo"); [EOL]     Tag foo2 = Tag.valueOf("FOO"); [EOL]     Tag div = Tag.valueOf("div"); [EOL]     assertEquals(foo, foo2); [EOL]     assertTrue(foo.canContain(foo)); [EOL]     assertTrue(foo.canContain(div)); [EOL]     assertTrue(div.canContain(foo)); [EOL] } <line_num>: 68,77
@Test(expected = IllegalArgumentException.class) [EOL] public void valueOfChecksNotNull() { [EOL]     Tag.valueOf(null); [EOL] } <line_num>: 79,81
@Test(expected = IllegalArgumentException.class) [EOL] public void valueOfChecksNotEmpty() { [EOL]     Tag.valueOf(" "); [EOL] } <line_num>: 83,85
