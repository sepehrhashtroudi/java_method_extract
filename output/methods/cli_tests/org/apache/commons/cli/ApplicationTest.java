public ApplicationTest(String name) { [EOL]     super(name); [EOL] } <line_num>: 43,46
public static Test suite() { [EOL]     return new TestSuite(ApplicationTest.class); [EOL] } <line_num>: 39,41
public void testLs() { [EOL]     CommandLineParser parser = new PosixParser(); [EOL]     Options options = new Options(); [EOL]     options.addOption("a", "all", false, "do not hide entries starting with ."); [EOL]     options.addOption("A", "almost-all", false, "do not list implied . and .."); [EOL]     options.addOption("b", "escape", false, "print octal escapes for nongraphic characters"); [EOL]     options.addOption(OptionBuilder.withLongOpt("block-size").withDescription("use SIZE-byte blocks").withValueSeparator('=').hasArg().create()); [EOL]     options.addOption("B", "ignore-backups", false, "do not list implied entried ending with ~"); [EOL]     options.addOption("c", false, "with -lt: sort by, and show, ctime (time of last modification of file status information) with -l:show ctime and sort by name otherwise: sort by ctime"); [EOL]     options.addOption("C", false, "list entries by columns"); [EOL]     String[] args = new String[] { "--block-size=10" }; [EOL]     try { [EOL]         CommandLine line = parser.parse(options, args); [EOL]         assertTrue(line.hasOption("block-size")); [EOL]         assertEquals(line.getOptionValue("block-size"), "10"); [EOL]     } catch (ParseException exp) { [EOL]         fail("Unexpected exception:" + exp.getMessage()); [EOL]     } [EOL] } <line_num>: 51,77
public void testAnt() { [EOL]     CommandLineParser parser = new GnuParser(); [EOL]     Options options = new Options(); [EOL]     options.addOption("help", false, "print this message"); [EOL]     options.addOption("projecthelp", false, "print project help information"); [EOL]     options.addOption("version", false, "print the version information and exit"); [EOL]     options.addOption("quiet", false, "be extra quiet"); [EOL]     options.addOption("verbose", false, "be extra verbose"); [EOL]     options.addOption("debug", false, "print debug information"); [EOL]     options.addOption("version", false, "produce logging information without adornments"); [EOL]     options.addOption("logfile", true, "use given file for log"); [EOL]     options.addOption("logger", true, "the class which is to perform the logging"); [EOL]     options.addOption("listener", true, "add an instance of a class as a project listener"); [EOL]     options.addOption("buildfile", true, "use given buildfile"); [EOL]     options.addOption(OptionBuilder.withDescription("use value for given property").hasArgs().withValueSeparator().create('D')); [EOL]     options.addOption("find", true, "search for buildfile towards the root of the filesystem and use it"); [EOL]     String[] args = new String[] { "-buildfile", "mybuild.xml", "-Dproperty=value", "-Dproperty1=value1", "-projecthelp" }; [EOL]     try { [EOL]         CommandLine line = parser.parse(options, args); [EOL]         String[] opts = line.getOptionValues("D"); [EOL]         assertEquals("property", opts[0]); [EOL]         assertEquals("value", opts[1]); [EOL]         assertEquals("property1", opts[2]); [EOL]         assertEquals("value1", opts[3]); [EOL]         assertEquals(line.getOptionValue("buildfile"), "mybuild.xml"); [EOL]         assertTrue(line.hasOption("projecthelp")); [EOL]     } catch (ParseException exp) { [EOL]         fail("Unexpected exception:" + exp.getMessage()); [EOL]     } [EOL] } <line_num>: 82,128
