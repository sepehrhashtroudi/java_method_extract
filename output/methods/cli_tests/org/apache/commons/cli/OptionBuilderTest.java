public OptionBuilderTest(String name) { [EOL]     super(name); [EOL] } <line_num>: 26,28
public static Test suite() { [EOL]     return new TestSuite(OptionBuilderTest.class); [EOL] } <line_num>: 30,32
public static void main(String[] args) { [EOL]     TestRunner.run(suite()); [EOL] } <line_num>: 34,36
public void testCompleteOption() { [EOL]     Option simple = OptionBuilder.withLongOpt("simple option").hasArg().isRequired().hasArgs().withType(new Float(10)).withDescription("this is a simple option").create('s'); [EOL]     assertEquals("s", simple.getOpt()); [EOL]     assertEquals("simple option", simple.getLongOpt()); [EOL]     assertEquals("this is a simple option", simple.getDescription()); [EOL]     assertEquals(simple.getType().getClass(), Float.class); [EOL]     assertTrue(simple.hasArg()); [EOL]     assertTrue(simple.isRequired()); [EOL]     assertTrue(simple.hasArgs()); [EOL] } <line_num>: 38,54
public void testTwoCompleteOptions() { [EOL]     Option simple = OptionBuilder.withLongOpt("simple option").hasArg().isRequired().hasArgs().withType(new Float(10)).withDescription("this is a simple option").create('s'); [EOL]     assertEquals("s", simple.getOpt()); [EOL]     assertEquals("simple option", simple.getLongOpt()); [EOL]     assertEquals("this is a simple option", simple.getDescription()); [EOL]     assertEquals(simple.getType().getClass(), Float.class); [EOL]     assertTrue(simple.hasArg()); [EOL]     assertTrue(simple.isRequired()); [EOL]     assertTrue(simple.hasArgs()); [EOL]     simple = OptionBuilder.withLongOpt("dimple option").hasArg().withDescription("this is a dimple option").create('d'); [EOL]     assertEquals("d", simple.getOpt()); [EOL]     assertEquals("dimple option", simple.getLongOpt()); [EOL]     assertEquals("this is a dimple option", simple.getDescription()); [EOL]     assertNull(simple.getType()); [EOL]     assertTrue(simple.hasArg()); [EOL]     assertTrue(!simple.isRequired()); [EOL]     assertTrue(!simple.hasArgs()); [EOL] } <line_num>: 56,85
public void testBaseOptionCharOpt() { [EOL]     Option base = OptionBuilder.withDescription("option description").create('o'); [EOL]     assertEquals("o", base.getOpt()); [EOL]     assertEquals("option description", base.getDescription()); [EOL]     assertTrue(!base.hasArg()); [EOL] } <line_num>: 87,94
public void testBaseOptionStringOpt() { [EOL]     Option base = OptionBuilder.withDescription("option description").create("o"); [EOL]     assertEquals("o", base.getOpt()); [EOL]     assertEquals("option description", base.getDescription()); [EOL]     assertTrue(!base.hasArg()); [EOL] } <line_num>: 96,103
public void testSpecialOptChars() { [EOL]     try { [EOL]         Option opt = OptionBuilder.withDescription("help options").create('?'); [EOL]         assertEquals("?", opt.getOpt()); [EOL]     } catch (IllegalArgumentException arg) { [EOL]         fail("IllegalArgumentException caught"); [EOL]     } [EOL]     try { [EOL]         Option opt = OptionBuilder.withDescription("read from stdin").create('@'); [EOL]         assertEquals("@", opt.getOpt()); [EOL]     } catch (IllegalArgumentException arg) { [EOL]         fail("IllegalArgumentException caught"); [EOL]     } [EOL] } <line_num>: 105,126
public void testOptionArgNumbers() { [EOL]     Option opt = OptionBuilder.withDescription("option description").hasArgs(2).create('o'); [EOL]     assertEquals(2, opt.getArgs()); [EOL] } <line_num>: 128,133
public void testIllegalOptions() { [EOL]     try { [EOL]         Option opt = OptionBuilder.withDescription("option description").create('"'); [EOL]         fail("IllegalArgumentException not caught"); [EOL]     } catch (IllegalArgumentException exp) { [EOL]     } [EOL]     try { [EOL]         Option opt = OptionBuilder.create("opt`"); [EOL]         fail("IllegalArgumentException not caught"); [EOL]     } catch (IllegalArgumentException exp) { [EOL]     } [EOL]     try { [EOL]         Option opt = OptionBuilder.create("opt"); [EOL]     } catch (IllegalArgumentException exp) { [EOL]         fail("IllegalArgumentException caught"); [EOL]     } [EOL] } <line_num>: 135,163
