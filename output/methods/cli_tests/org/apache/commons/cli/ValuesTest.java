public ValuesTest(String name) { [EOL]     super(name); [EOL] } <line_num>: 34,37
public static Test suite() { [EOL]     return new TestSuite(ValuesTest.class); [EOL] } <line_num>: 30,32
public void setUp() { [EOL]     Options opts = new Options(); [EOL]     opts.addOption("a", false, "toggle -a"); [EOL]     opts.addOption("b", true, "set -b"); [EOL]     opts.addOption("c", "c", false, "toggle -c"); [EOL]     opts.addOption("d", "d", true, "set -d"); [EOL]     opts.addOption(OptionBuilder.withLongOpt("e").hasArgs().withDescription("set -e ").create('e')); [EOL]     opts.addOption("f", "f", false, "jk"); [EOL]     opts.addOption(OptionBuilder.withLongOpt("g").hasArgs(2).withDescription("set -g").create('g')); [EOL]     opts.addOption(OptionBuilder.withLongOpt("h").hasArgs(2).withDescription("set -h").create('h')); [EOL]     opts.addOption(OptionBuilder.withLongOpt("i").withDescription("set -i").create('i')); [EOL]     opts.addOption(OptionBuilder.withLongOpt("j").hasArgs().withDescription("set -j").withValueSeparator('=').create('j')); [EOL]     opts.addOption(OptionBuilder.withLongOpt("k").hasArgs().withDescription("set -k").withValueSeparator('=').create('k')); [EOL]     _option = OptionBuilder.withLongOpt("m").hasArgs().withDescription("set -m").withValueSeparator().create('m'); [EOL]     opts.addOption(_option); [EOL]     String[] args = new String[] { "-a", "-b", "foo", "--c", "--d", "bar", "-e", "one", "two", "-f", "arg1", "arg2", "-g", "val1", "val2", "arg3", "-h", "val1", "-i", "-h", "val2", "-jkey=value", "-j", "key=value", "-kkey1=value1", "-kkey2=value2", "-mkey=value" }; [EOL]     CommandLineParser parser = new PosixParser(); [EOL]     try { [EOL]         _cmdline = parser.parse(opts, args); [EOL]     } catch (ParseException e) { [EOL]         fail("Cannot setUp() CommandLine: " + e.toString()); [EOL]     } [EOL] } <line_num>: 39,131
public void tearDown() { [EOL] } <line_num>: 133,136
public void testShortArgs() { [EOL]     assertTrue(_cmdline.hasOption("a")); [EOL]     assertTrue(_cmdline.hasOption("c")); [EOL]     assertNull(_cmdline.getOptionValues("a")); [EOL]     assertNull(_cmdline.getOptionValues("c")); [EOL] } <line_num>: 138,145
public void testShortArgsWithValue() { [EOL]     assertTrue(_cmdline.hasOption("b")); [EOL]     assertTrue(_cmdline.getOptionValue("b").equals("foo")); [EOL]     assertTrue(_cmdline.getOptionValues("b").length == 1); [EOL]     assertTrue(_cmdline.hasOption("d")); [EOL]     assertTrue(_cmdline.getOptionValue("d").equals("bar")); [EOL]     assertTrue(_cmdline.getOptionValues("d").length == 1); [EOL] } <line_num>: 147,156
public void testMultipleArgValues() { [EOL]     String[] result = _cmdline.getOptionValues("e"); [EOL]     String[] values = new String[] { "one", "two" }; [EOL]     assertTrue(_cmdline.hasOption("e")); [EOL]     assertTrue(_cmdline.getOptionValues("e").length == 2); [EOL]     assertTrue(Arrays.equals(values, _cmdline.getOptionValues("e"))); [EOL] } <line_num>: 158,165
public void testTwoArgValues() { [EOL]     String[] result = _cmdline.getOptionValues("g"); [EOL]     String[] values = new String[] { "val1", "val2" }; [EOL]     assertTrue(_cmdline.hasOption("g")); [EOL]     assertTrue(_cmdline.getOptionValues("g").length == 2); [EOL]     assertTrue(Arrays.equals(values, _cmdline.getOptionValues("g"))); [EOL] } <line_num>: 167,174
public void testComplexValues() { [EOL]     String[] result = _cmdline.getOptionValues("h"); [EOL]     String[] values = new String[] { "val1", "val2" }; [EOL]     assertTrue(_cmdline.hasOption("i")); [EOL]     assertTrue(_cmdline.hasOption("h")); [EOL]     assertTrue(_cmdline.getOptionValues("h").length == 2); [EOL]     assertTrue(Arrays.equals(values, _cmdline.getOptionValues("h"))); [EOL] } <line_num>: 176,184
public void testExtraArgs() { [EOL]     String[] args = new String[] { "arg1", "arg2", "arg3" }; [EOL]     assertTrue(_cmdline.getArgs().length == 3); [EOL]     assertTrue(Arrays.equals(args, _cmdline.getArgs())); [EOL] } <line_num>: 186,191
public void testCharSeparator() { [EOL]     String[] values = new String[] { "key", "value", "key", "value" }; [EOL]     assertTrue(_cmdline.hasOption("j")); [EOL]     assertTrue(_cmdline.hasOption('j')); [EOL]     assertEquals(4, _cmdline.getOptionValues("j").length); [EOL]     assertEquals(4, _cmdline.getOptionValues('j').length); [EOL]     assertTrue(Arrays.equals(values, _cmdline.getOptionValues("j"))); [EOL]     assertTrue(Arrays.equals(values, _cmdline.getOptionValues('j'))); [EOL]     values = new String[] { "key1", "value1", "key2", "value2" }; [EOL]     assertTrue(_cmdline.hasOption("k")); [EOL]     assertTrue(_cmdline.hasOption('k')); [EOL]     assertTrue(_cmdline.getOptionValues("k").length == 4); [EOL]     assertTrue(_cmdline.getOptionValues('k').length == 4); [EOL]     assertTrue(Arrays.equals(values, _cmdline.getOptionValues("k"))); [EOL]     assertTrue(Arrays.equals(values, _cmdline.getOptionValues('k'))); [EOL]     values = new String[] { "key", "value" }; [EOL]     assertTrue(_cmdline.hasOption("m")); [EOL]     assertTrue(_cmdline.hasOption('m')); [EOL]     assertTrue(_cmdline.getOptionValues("m").length == 2); [EOL]     assertTrue(_cmdline.getOptionValues('m').length == 2); [EOL]     assertTrue(Arrays.equals(values, _cmdline.getOptionValues("m"))); [EOL]     assertTrue(Arrays.equals(values, _cmdline.getOptionValues('m'))); [EOL] } <line_num>: 193,220
