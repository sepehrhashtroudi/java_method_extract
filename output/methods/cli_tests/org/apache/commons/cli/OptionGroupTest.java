public OptionGroupTest(String name) { [EOL]     super(name); [EOL] } <line_num>: 38,41
public static Test suite() { [EOL]     return new TestSuite(OptionGroupTest.class); [EOL] } <line_num>: 33,36
public void setUp() { [EOL]     Option file = new Option("f", "file", false, "file to process"); [EOL]     Option dir = new Option("d", "directory", false, "directory to process"); [EOL]     OptionGroup group = new OptionGroup(); [EOL]     group.addOption(file); [EOL]     group.addOption(dir); [EOL]     _options = new Options().addOptionGroup(group); [EOL]     Option section = new Option("s", "section", false, "section to process"); [EOL]     Option chapter = new Option("c", "chapter", false, "chapter to process"); [EOL]     OptionGroup group2 = new OptionGroup(); [EOL]     group2.addOption(section); [EOL]     group2.addOption(chapter); [EOL]     _options.addOptionGroup(group2); [EOL]     Option importOpt = new Option(null, "import", false, "section to process"); [EOL]     Option exportOpt = new Option(null, "export", false, "chapter to process"); [EOL]     OptionGroup group3 = new OptionGroup(); [EOL]     group3.addOption(importOpt); [EOL]     group3.addOption(exportOpt); [EOL]     _options.addOptionGroup(group3); [EOL]     _options.addOption("r", "revision", false, "revision number"); [EOL] } <line_num>: 43,68
public void tearDown() { [EOL] } <line_num>: 70,72
public void testSingleOptionFromGroup() { [EOL]     String[] args = new String[] { "-f" }; [EOL]     try { [EOL]         CommandLine cl = parser.parse(_options, args); [EOL]         assertTrue("Confirm -r is NOT set", !cl.hasOption("r")); [EOL]         assertTrue("Confirm -f is set", cl.hasOption("f")); [EOL]         assertTrue("Confirm -d is NOT set", !cl.hasOption("d")); [EOL]         assertTrue("Confirm -s is NOT set", !cl.hasOption("s")); [EOL]         assertTrue("Confirm -c is NOT set", !cl.hasOption("c")); [EOL]         assertTrue("Confirm no extra args", cl.getArgList().size() == 0); [EOL]     } catch (ParseException e) { [EOL]         fail(e.toString()); [EOL]     } [EOL] } <line_num>: 74,93
public void testSingleOption() { [EOL]     String[] args = new String[] { "-r" }; [EOL]     try { [EOL]         CommandLine cl = parser.parse(_options, args); [EOL]         assertTrue("Confirm -r is set", cl.hasOption("r")); [EOL]         assertTrue("Confirm -f is NOT set", !cl.hasOption("f")); [EOL]         assertTrue("Confirm -d is NOT set", !cl.hasOption("d")); [EOL]         assertTrue("Confirm -s is NOT set", !cl.hasOption("s")); [EOL]         assertTrue("Confirm -c is NOT set", !cl.hasOption("c")); [EOL]         assertTrue("Confirm no extra args", cl.getArgList().size() == 0); [EOL]     } catch (ParseException e) { [EOL]         fail(e.toString()); [EOL]     } [EOL] } <line_num>: 95,114
public void testTwoValidOptions() { [EOL]     String[] args = new String[] { "-r", "-f" }; [EOL]     try { [EOL]         CommandLine cl = parser.parse(_options, args); [EOL]         assertTrue("Confirm -r is set", cl.hasOption("r")); [EOL]         assertTrue("Confirm -f is set", cl.hasOption("f")); [EOL]         assertTrue("Confirm -d is NOT set", !cl.hasOption("d")); [EOL]         assertTrue("Confirm -s is NOT set", !cl.hasOption("s")); [EOL]         assertTrue("Confirm -c is NOT set", !cl.hasOption("c")); [EOL]         assertTrue("Confirm no extra args", cl.getArgList().size() == 0); [EOL]     } catch (ParseException e) { [EOL]         fail(e.toString()); [EOL]     } [EOL] } <line_num>: 116,135
public void testSingleLongOption() { [EOL]     String[] args = new String[] { "--file" }; [EOL]     try { [EOL]         CommandLine cl = parser.parse(_options, args); [EOL]         assertTrue("Confirm -r is NOT set", !cl.hasOption("r")); [EOL]         assertTrue("Confirm -f is set", cl.hasOption("f")); [EOL]         assertTrue("Confirm -d is NOT set", !cl.hasOption("d")); [EOL]         assertTrue("Confirm -s is NOT set", !cl.hasOption("s")); [EOL]         assertTrue("Confirm -c is NOT set", !cl.hasOption("c")); [EOL]         assertTrue("Confirm no extra args", cl.getArgList().size() == 0); [EOL]     } catch (ParseException e) { [EOL]         fail(e.toString()); [EOL]     } [EOL] } <line_num>: 137,156
public void testTwoValidLongOptions() { [EOL]     String[] args = new String[] { "--revision", "--file" }; [EOL]     try { [EOL]         CommandLine cl = parser.parse(_options, args); [EOL]         assertTrue("Confirm -r is set", cl.hasOption("r")); [EOL]         assertTrue("Confirm -f is set", cl.hasOption("f")); [EOL]         assertTrue("Confirm -d is NOT set", !cl.hasOption("d")); [EOL]         assertTrue("Confirm -s is NOT set", !cl.hasOption("s")); [EOL]         assertTrue("Confirm -c is NOT set", !cl.hasOption("c")); [EOL]         assertTrue("Confirm no extra args", cl.getArgList().size() == 0); [EOL]     } catch (ParseException e) { [EOL]         fail(e.toString()); [EOL]     } [EOL] } <line_num>: 158,177
public void testNoOptionsExtraArgs() { [EOL]     String[] args = new String[] { "arg1", "arg2" }; [EOL]     try { [EOL]         CommandLine cl = parser.parse(_options, args); [EOL]         assertTrue("Confirm -r is NOT set", !cl.hasOption("r")); [EOL]         assertTrue("Confirm -f is NOT set", !cl.hasOption("f")); [EOL]         assertTrue("Confirm -d is NOT set", !cl.hasOption("d")); [EOL]         assertTrue("Confirm -s is NOT set", !cl.hasOption("s")); [EOL]         assertTrue("Confirm -c is NOT set", !cl.hasOption("c")); [EOL]         assertTrue("Confirm TWO extra args", cl.getArgList().size() == 2); [EOL]     } catch (ParseException e) { [EOL]         fail(e.toString()); [EOL]     } [EOL] } <line_num>: 179,198
public void testTwoOptionsFromGroup() { [EOL]     String[] args = new String[] { "-f", "-d" }; [EOL]     try { [EOL]         CommandLine cl = parser.parse(_options, args); [EOL]         fail("two arguments from group not allowed"); [EOL]     } catch (ParseException e) { [EOL]         if (!(e instanceof AlreadySelectedException)) { [EOL]             fail("incorrect exception caught:" + e.getMessage()); [EOL]         } [EOL]     } [EOL] } <line_num>: 200,216
public void testTwoLongOptionsFromGroup() { [EOL]     String[] args = new String[] { "--file", "--directory" }; [EOL]     try { [EOL]         CommandLine cl = parser.parse(_options, args); [EOL]         fail("two arguments from group not allowed"); [EOL]     } catch (ParseException e) { [EOL]         if (!(e instanceof AlreadySelectedException)) { [EOL]             fail("incorrect exception caught:" + e.getMessage()); [EOL]         } [EOL]     } [EOL] } <line_num>: 218,234
public void testTwoOptionsFromDifferentGroup() { [EOL]     String[] args = new String[] { "-f", "-s" }; [EOL]     try { [EOL]         CommandLine cl = parser.parse(_options, args); [EOL]         assertTrue("Confirm -r is NOT set", !cl.hasOption("r")); [EOL]         assertTrue("Confirm -f is set", cl.hasOption("f")); [EOL]         assertTrue("Confirm -d is NOT set", !cl.hasOption("d")); [EOL]         assertTrue("Confirm -s is set", cl.hasOption("s")); [EOL]         assertTrue("Confirm -c is NOT set", !cl.hasOption("c")); [EOL]         assertTrue("Confirm NO extra args", cl.getArgList().size() == 0); [EOL]     } catch (ParseException e) { [EOL]         fail(e.toString()); [EOL]     } [EOL] } <line_num>: 236,254
public void testValidLongOnlyOptions() { [EOL]     try { [EOL]         CommandLine cl = parser.parse(_options, new String[] { "--export" }); [EOL]         assertTrue("Confirm --export is set", cl.hasOption("export")); [EOL]     } catch (ParseException e) { [EOL]         fail(e.toString()); [EOL]     } [EOL]     try { [EOL]         CommandLine cl = parser.parse(_options, new String[] { "--import" }); [EOL]         assertTrue("Confirm --import is set", cl.hasOption("import")); [EOL]     } catch (ParseException e) { [EOL]         fail(e.toString()); [EOL]     } [EOL] } <line_num>: 256,277
