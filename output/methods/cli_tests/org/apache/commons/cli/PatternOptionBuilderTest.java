public PatternOptionBuilderTest(String s) { [EOL]     super(s); [EOL] } <line_num>: 40,43
public static void main(String[] args) { [EOL]     String[] testName = { PatternOptionBuilderTest.class.getName() }; [EOL]     junit.textui.TestRunner.main(testName); [EOL] } <line_num>: 29,33
public static TestSuite suite() { [EOL]     return new TestSuite(PatternOptionBuilderTest.class); [EOL] } <line_num>: 35,38
public void testSimplePattern() { [EOL]     try { [EOL]         Options options = PatternOptionBuilder.parsePattern("a:b@cde>f+n%t/"); [EOL]         String[] args = new String[] { "-c", "-a", "foo", "-b", "java.util.Vector", "-e", "build.xml", "-f", "java.util.Calendar", "-n", "4.5", "-t", "http://jakarta.apache.org/" }; [EOL]         CommandLineParser parser = new PosixParser(); [EOL]         CommandLine line = parser.parse(options, args); [EOL]         assertEquals("flag a", "foo", line.getOptionValue("a")); [EOL]         assertEquals("flag a", "foo", line.getOptionValue('a')); [EOL]         assertEquals("string flag a", "foo", line.getOptionObject("a")); [EOL]         assertEquals("string flag a", "foo", line.getOptionObject('a')); [EOL]         assertEquals("object flag b", new java.util.Vector(), line.getOptionObject("b")); [EOL]         assertEquals("object flag b", new java.util.Vector(), line.getOptionObject('b')); [EOL]         assertEquals("boolean true flag c", true, line.hasOption("c")); [EOL]         assertEquals("boolean true flag c", true, line.hasOption('c')); [EOL]         assertEquals("boolean false flag d", false, line.hasOption("d")); [EOL]         assertEquals("boolean false flag d", false, line.hasOption('d')); [EOL]         assertEquals("file flag e", new java.io.File("build.xml"), line.getOptionObject("e")); [EOL]         assertEquals("file flag e", new java.io.File("build.xml"), line.getOptionObject('e')); [EOL]         assertEquals("class flag f", java.util.Calendar.class, line.getOptionObject("f")); [EOL]         assertEquals("class flag f", java.util.Calendar.class, line.getOptionObject('f')); [EOL]         assertEquals("number flag n", new Float(4.5), line.getOptionObject("n")); [EOL]         assertEquals("number flag n", new Float(4.5), line.getOptionObject('n')); [EOL]         assertEquals("url flag t", new java.net.URL("http://jakarta.apache.org/"), line.getOptionObject("t")); [EOL]         assertEquals("url flag t", new java.net.URL("http://jakarta.apache.org/"), line.getOptionObject('t')); [EOL]     } catch (ParseException exp) { [EOL]         fail(exp.getMessage()); [EOL]     } catch (java.net.MalformedURLException exp) { [EOL]         fail(exp.getMessage()); [EOL]     } [EOL] } <line_num>: 45,84
