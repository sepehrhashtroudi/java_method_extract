public TestHelpFormatter(String s) { [EOL]     super(s); [EOL] } <line_num>: 43,46
public static void main(String[] args) { [EOL]     String[] testName = { TestHelpFormatter.class.getName() }; [EOL]     junit.textui.TestRunner.main(testName); [EOL] } <line_num>: 32,36
public static TestSuite suite() { [EOL]     return new TestSuite(TestHelpFormatter.class); [EOL] } <line_num>: 38,41
public void testFindWrapPos() throws Exception { [EOL]     HelpFormatter hf = new HelpFormatter(); [EOL]     String text = "This is a test."; [EOL]     assertEquals("wrap position", 7, hf.findWrapPos(text, 8, 0)); [EOL]     assertEquals("wrap position 2", -1, hf.findWrapPos(text, 8, 8)); [EOL]     text = "aaaa aa"; [EOL]     assertEquals("wrap position 3", 4, hf.findWrapPos(text, 3, 0)); [EOL] } <line_num>: 48,61
public void testPrintWrapped() throws Exception { [EOL]     StringBuffer sb = new StringBuffer(); [EOL]     HelpFormatter hf = new HelpFormatter(); [EOL]     String text = "This is a test."; [EOL]     String expected; [EOL]     expected = "This is a" + hf.getNewLine() + "test."; [EOL]     hf.renderWrappedText(sb, 12, 0, text); [EOL]     assertEquals("single line text", expected, sb.toString()); [EOL]     sb.setLength(0); [EOL]     expected = "This is a" + hf.getNewLine() + "    test."; [EOL]     hf.renderWrappedText(sb, 12, 4, text); [EOL]     assertEquals("single line padded text", expected, sb.toString()); [EOL]     text = "aaaa aaaa aaaa" + hf.getNewLine() + "aaaaaa" + hf.getNewLine() + "aaaaa"; [EOL]     expected = text; [EOL]     sb.setLength(0); [EOL]     hf.renderWrappedText(sb, 16, 0, text); [EOL]     assertEquals("multi line text", expected, sb.toString()); [EOL]     expected = "aaaa aaaa aaaa" + hf.getNewLine() + "    aaaaaa" + hf.getNewLine() + "    aaaaa"; [EOL]     sb.setLength(0); [EOL]     hf.renderWrappedText(sb, 16, 4, text); [EOL]     assertEquals("multi-line padded text", expected, sb.toString()); [EOL] } <line_num>: 63,98
public void testPrintOptions() throws Exception { [EOL]     StringBuffer sb = new StringBuffer(); [EOL]     HelpFormatter hf = new HelpFormatter(); [EOL]     final int leftPad = 1; [EOL]     final int descPad = 3; [EOL]     final String lpad = hf.createPadding(leftPad); [EOL]     final String dpad = hf.createPadding(descPad); [EOL]     Options options = null; [EOL]     String expected = null; [EOL]     options = new Options().addOption("a", false, "aaaa aaaa aaaa aaaa aaaa"); [EOL]     expected = lpad + "-a" + dpad + "aaaa aaaa aaaa aaaa aaaa"; [EOL]     hf.renderOptions(sb, 60, options, leftPad, descPad); [EOL]     assertEquals("simple non-wrapped option", expected, sb.toString()); [EOL]     int nextLineTabStop = leftPad + descPad + "-a".length(); [EOL]     expected = lpad + "-a" + dpad + "aaaa aaaa aaaa" + hf.getNewLine() + hf.createPadding(nextLineTabStop) + "aaaa aaaa"; [EOL]     sb.setLength(0); [EOL]     hf.renderOptions(sb, nextLineTabStop + 17, options, leftPad, descPad); [EOL]     assertEquals("simple wrapped option", expected, sb.toString()); [EOL]     options = new Options().addOption("a", "aaa", false, "dddd dddd dddd dddd"); [EOL]     expected = lpad + "-a,--aaa" + dpad + "dddd dddd dddd dddd"; [EOL]     sb.setLength(0); [EOL]     hf.renderOptions(sb, 60, options, leftPad, descPad); [EOL]     assertEquals("long non-wrapped option", expected, sb.toString()); [EOL]     nextLineTabStop = leftPad + descPad + "-a,--aaa".length(); [EOL]     expected = lpad + "-a,--aaa" + dpad + "dddd dddd" + hf.getNewLine() + hf.createPadding(nextLineTabStop) + "dddd dddd"; [EOL]     sb.setLength(0); [EOL]     hf.renderOptions(sb, 25, options, leftPad, descPad); [EOL]     assertEquals("long wrapped option", expected, sb.toString()); [EOL]     options = new Options().addOption("a", "aaa", false, "dddd dddd dddd dddd").addOption("b", false, "feeee eeee eeee eeee"); [EOL]     expected = lpad + "-a,--aaa" + dpad + "dddd dddd" + hf.getNewLine() + hf.createPadding(nextLineTabStop) + "dddd dddd" + hf.getNewLine() + lpad + "-b      " + dpad + "feeee eeee" + hf.getNewLine() + hf.createPadding(nextLineTabStop) + "eeee eeee"; [EOL]     sb.setLength(0); [EOL]     hf.renderOptions(sb, 25, options, leftPad, descPad); [EOL]     assertEquals("multiple wrapped options", expected, sb.toString()); [EOL] } <line_num>: 100,151
public void testAutomaticUsage() { [EOL] } <line_num>: 153,153
