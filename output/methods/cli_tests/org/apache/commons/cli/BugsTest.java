public BugsTest(String name) { [EOL]     super(name); [EOL] } <line_num>: 38,41
public static Test suite() { [EOL]     return new TestSuite(BugsTest.class); [EOL] } <line_num>: 34,36
public void setUp() { [EOL] } <line_num>: 43,45
public void tearDown() { [EOL] } <line_num>: 47,49
public void test11457() { [EOL]     Options options = new Options(); [EOL]     options.addOption(OptionBuilder.withLongOpt("verbose").create()); [EOL]     String[] args = new String[] { "--verbose" }; [EOL]     CommandLineParser parser = new PosixParser(); [EOL]     try { [EOL]         CommandLine cmd = parser.parse(options, args); [EOL]         assertTrue(cmd.hasOption("verbose")); [EOL]     } catch (ParseException exp) { [EOL]         exp.printStackTrace(); [EOL]         fail("Unexpected Exception: " + exp.getMessage()); [EOL]     } [EOL] } <line_num>: 51,67
public void test11458() { [EOL]     Options options = new Options(); [EOL]     options.addOption(OptionBuilder.withValueSeparator('=').hasArgs().create('D')); [EOL]     options.addOption(OptionBuilder.withValueSeparator(':').hasArgs().create('p')); [EOL]     String[] args = new String[] { "-DJAVA_HOME=/opt/java", "-pfile1:file2:file3" }; [EOL]     CommandLineParser parser = new PosixParser(); [EOL]     try { [EOL]         CommandLine cmd = parser.parse(options, args); [EOL]         String[] values = cmd.getOptionValues('D'); [EOL]         assertEquals(values[0], "JAVA_HOME"); [EOL]         assertEquals(values[1], "/opt/java"); [EOL]         values = cmd.getOptionValues('p'); [EOL]         assertEquals(values[0], "file1"); [EOL]         assertEquals(values[1], "file2"); [EOL]         assertEquals(values[2], "file3"); [EOL]         java.util.Iterator iter = cmd.iterator(); [EOL]         while (iter.hasNext()) { [EOL]             Option opt = (Option) iter.next(); [EOL]             switch(opt.getId()) { [EOL]                 case 'D': [EOL]                     assertEquals(opt.getValue(0), "JAVA_HOME"); [EOL]                     assertEquals(opt.getValue(1), "/opt/java"); [EOL]                     break; [EOL]                 case 'p': [EOL]                     assertEquals(opt.getValue(0), "file1"); [EOL]                     assertEquals(opt.getValue(1), "file2"); [EOL]                     assertEquals(opt.getValue(2), "file3"); [EOL]                     break; [EOL]                 default: [EOL]                     fail("-D option not found"); [EOL]             } [EOL]         } [EOL]     } catch (ParseException exp) { [EOL]         fail("Unexpected Exception:\nMessage:" + exp.getMessage() + "Type: " + exp.getClass().getName()); [EOL]     } [EOL] } <line_num>: 69,119
public void test11680() { [EOL]     Options options = new Options(); [EOL]     options.addOption("f", true, "foobar"); [EOL]     options.addOption("m", true, "missing"); [EOL]     String[] args = new String[] { "-f", "foo" }; [EOL]     CommandLineParser parser = new PosixParser(); [EOL]     try { [EOL]         CommandLine cmd = parser.parse(options, args); [EOL]         try { [EOL]             cmd.getOptionValue("f", "default f"); [EOL]             cmd.getOptionValue("m", "default m"); [EOL]         } catch (NullPointerException exp) { [EOL]             fail("NullPointer caught: " + exp.getMessage()); [EOL]         } [EOL]     } catch (ParseException exp) { [EOL]         fail("Unexpected Exception: " + exp.getMessage()); [EOL]     } [EOL] } <line_num>: 121,144
public void test11456() { [EOL]     Options options = new Options(); [EOL]     options.addOption(OptionBuilder.hasOptionalArg().create('a')); [EOL]     options.addOption(OptionBuilder.hasArg().create('b')); [EOL]     String[] args = new String[] { "-a", "-bvalue" }; [EOL]     CommandLineParser parser = new PosixParser(); [EOL]     try { [EOL]         CommandLine cmd = parser.parse(options, args); [EOL]         assertEquals(cmd.getOptionValue('b'), "value"); [EOL]     } catch (ParseException exp) { [EOL]         fail("Unexpected Exception: " + exp.getMessage()); [EOL]     } [EOL]     options = new Options(); [EOL]     options.addOption(OptionBuilder.hasOptionalArg().create('a')); [EOL]     options.addOption(OptionBuilder.hasArg().create('b')); [EOL]     args = new String[] { "-a", "-b", "value" }; [EOL]     parser = new GnuParser(); [EOL]     try { [EOL]         CommandLine cmd = parser.parse(options, args); [EOL]         assertEquals(cmd.getOptionValue('b'), "value"); [EOL]     } catch (ParseException exp) { [EOL]         fail("Unexpected Exception: " + exp.getMessage()); [EOL]     } [EOL] } <line_num>: 146,184
public void test12210() { [EOL]     Options mainOptions = new Options(); [EOL]     String[] argv = new String[] { "-exec", "-exec_opt1", "-exec_opt2" }; [EOL]     OptionGroup grp = new OptionGroup(); [EOL]     grp.addOption(new Option("exec", false, "description for this option")); [EOL]     grp.addOption(new Option("rep", false, "description for this option")); [EOL]     mainOptions.addOptionGroup(grp); [EOL]     Options execOptions = new Options(); [EOL]     execOptions.addOption("exec_opt1", false, " desc"); [EOL]     execOptions.addOption("exec_opt2", false, " desc"); [EOL]     Options repOptions = new Options(); [EOL]     repOptions.addOption("repopto", false, "desc"); [EOL]     repOptions.addOption("repoptt", false, "desc"); [EOL]     GnuParser parser = new GnuParser(); [EOL]     try { [EOL]         CommandLine cmd = parser.parse(mainOptions, argv, true); [EOL]         argv = cmd.getArgs(); [EOL]         if (cmd.hasOption("exec")) { [EOL]             cmd = parser.parse(execOptions, argv, false); [EOL]             assertTrue(cmd.hasOption("exec_opt1")); [EOL]             assertTrue(cmd.hasOption("exec_opt2")); [EOL]         } else if (cmd.hasOption("rep")) { [EOL]             cmd = parser.parse(repOptions, argv, false); [EOL]         } else { [EOL]             fail("exec option not found"); [EOL]         } [EOL]     } catch (ParseException exp) { [EOL]         fail("Unexpected exception: " + exp.getMessage()); [EOL]     } [EOL] } <line_num>: 186,242
public void test13425() { [EOL]     Options options = new Options(); [EOL]     Option oldpass = OptionBuilder.withLongOpt("old-password").withDescription("Use this option to specify the old password").hasArg().create('o'); [EOL]     Option newpass = OptionBuilder.withLongOpt("new-password").withDescription("Use this option to specify the new password").hasArg().create('n'); [EOL]     String[] args = { "-o", "-n", "newpassword" }; [EOL]     options.addOption(oldpass); [EOL]     options.addOption(newpass); [EOL]     Parser parser = new PosixParser(); [EOL]     try { [EOL]         CommandLine line = parser.parse(options, args); [EOL]     } catch (Exception exp) { [EOL]         assertTrue(exp != null); [EOL]         return; [EOL]     } [EOL]     fail("MissingArgumentException not caught."); [EOL] } <line_num>: 244,275
public void test13666() { [EOL]     Options options = new Options(); [EOL]     Option dir = OptionBuilder.withDescription("dir").hasArg().create('d'); [EOL]     options.addOption(dir); [EOL]     final PrintStream oldSystemOut = System.out; [EOL]     try { [EOL]         final ByteArrayOutputStream bytes = new ByteArrayOutputStream(); [EOL]         final PrintStream print = new PrintStream(bytes); [EOL]         print.println(); [EOL]         final String eol = bytes.toString(); [EOL]         bytes.reset(); [EOL]         System.setOut(new PrintStream(bytes)); [EOL]         try { [EOL]             HelpFormatter formatter = new HelpFormatter(); [EOL]             formatter.printHelp("dir", options); [EOL]         } catch (Exception exp) { [EOL]             fail("Unexpected Exception: " + exp.getMessage()); [EOL]         } [EOL]         assertEquals("usage: dir" + eol + " -d <arg>   dir" + eol, bytes.toString()); [EOL]     } finally { [EOL]         System.setOut(oldSystemOut); [EOL]     } [EOL] } <line_num>: 277,308
public void test13935() { [EOL]     OptionGroup directions = new OptionGroup(); [EOL]     Option left = new Option("l", "left", false, "go left"); [EOL]     Option right = new Option("r", "right", false, "go right"); [EOL]     Option straight = new Option("s", "straight", false, "go straight"); [EOL]     Option forward = new Option("f", "forward", false, "go forward"); [EOL]     forward.setRequired(true); [EOL]     directions.addOption(left); [EOL]     directions.addOption(right); [EOL]     directions.setRequired(true); [EOL]     Options opts = new Options(); [EOL]     opts.addOptionGroup(directions); [EOL]     opts.addOption(straight); [EOL]     CommandLineParser parser = new PosixParser(); [EOL]     boolean exception = false; [EOL]     String[] args = new String[] {}; [EOL]     try { [EOL]         CommandLine line = parser.parse(opts, args); [EOL]     } catch (ParseException exp) { [EOL]         exception = true; [EOL]     } [EOL]     if (!exception) { [EOL]         fail("Expected exception not caught."); [EOL]     } [EOL]     exception = false; [EOL]     args = new String[] { "-s" }; [EOL]     try { [EOL]         CommandLine line = parser.parse(opts, args); [EOL]     } catch (ParseException exp) { [EOL]         exception = true; [EOL]     } [EOL]     if (!exception) { [EOL]         fail("Expected exception not caught."); [EOL]     } [EOL]     exception = false; [EOL]     args = new String[] { "-s", "-l" }; [EOL]     try { [EOL]         CommandLine line = parser.parse(opts, args); [EOL]     } catch (ParseException exp) { [EOL]         fail("Unexpected exception: " + exp.getClass().getName() + ":" + exp.getMessage()); [EOL]     } [EOL]     opts.addOption(forward); [EOL]     args = new String[] { "-s", "-l", "-f" }; [EOL]     try { [EOL]         CommandLine line = parser.parse(opts, args); [EOL]     } catch (ParseException exp) { [EOL]         fail("Unexpected exception: " + exp.getClass().getName() + ":" + exp.getMessage()); [EOL]     } [EOL] } <line_num>: 310,374
public void test14786() throws Exception { [EOL]     Option o = OptionBuilder.isRequired().withDescription("test").create("test"); [EOL]     Options opts = new Options(); [EOL]     opts.addOption(o); [EOL]     opts.addOption(o); [EOL]     CommandLineParser parser = new GnuParser(); [EOL]     String[] args = new String[] { "-test" }; [EOL]     CommandLine line = parser.parse(opts, args); [EOL]     assertTrue(line.hasOption("test")); [EOL] } <line_num>: 376,388
public void test15046() throws Exception { [EOL]     CommandLineParser parser = new PosixParser(); [EOL]     final String[] CLI_ARGS = new String[] { "-z", "c" }; [EOL]     Option option = new Option("z", "timezone", true, "affected option"); [EOL]     Options cliOptions = new Options(); [EOL]     cliOptions.addOption(option); [EOL]     parser.parse(cliOptions, CLI_ARGS); [EOL]     cliOptions.addOption("c", "conflict", true, "conflict option"); [EOL]     CommandLine line = parser.parse(cliOptions, CLI_ARGS); [EOL]     assertEquals(option.getValue(), "c"); [EOL]     assertTrue(!line.hasOption("c")); [EOL] } <line_num>: 390,404
public void test15648() throws Exception { [EOL]     CommandLineParser parser = new PosixParser(); [EOL]     final String[] args = new String[] { "-m", "\"Two Words\"" }; [EOL]     Option m = OptionBuilder.hasArgs().create("m"); [EOL]     Options options = new Options(); [EOL]     options.addOption(m); [EOL]     CommandLine line = parser.parse(options, args); [EOL]     assertEquals("Two Words", line.getOptionValue("m")); [EOL] } <line_num>: 406,414
public void test27635() { [EOL] } <line_num>: 416,416
public void test31148() throws ParseException { [EOL]     Option multiArgOption = new Option("o", "option with multiple args"); [EOL]     multiArgOption.setArgs(1); [EOL]     Options options = new Options(); [EOL]     options.addOption(multiArgOption); [EOL]     Parser parser = new PosixParser(); [EOL]     String[] args = new String[] {}; [EOL]     Properties props = new Properties(); [EOL]     props.setProperty("o", "ovalue"); [EOL]     CommandLine cl = parser.parse(options, args, props); [EOL]     assertTrue(cl.hasOption('o')); [EOL]     assertEquals("ovalue", cl.getOptionValue('o')); [EOL] } <line_num>: 488,503
public void test21215() { [EOL]     Options options = new Options(); [EOL]     HelpFormatter formatter = new HelpFormatter(); [EOL]     String SEP = System.getProperty("line.separator"); [EOL]     String header = SEP + "Header"; [EOL]     String footer = "Footer"; [EOL]     StringWriter out = new StringWriter(); [EOL]     formatter.printHelp(new PrintWriter(out), 80, "foobar", header, options, 2, 2, footer, true); [EOL]     assertEquals("usage: foobar" + SEP + "" + SEP + "Header" + SEP + "" + SEP + "Footer" + SEP, out.toString()); [EOL] } <line_num>: 505,520
public void test19383() { [EOL] } <line_num>: 522,522
