public BitsStreamGenerator() { [EOL]     nextGaussian = Double.NaN; [EOL] } <line_num>: 40,42
public abstract void setSeed(int seed); <line_num>: 45,45
public abstract void setSeed(int[] seed); <line_num>: 48,48
public abstract void setSeed(long seed); <line_num>: 51,51
protected abstract int next(int bits); <line_num>: 62,62
public boolean nextBoolean() { [EOL]     return next(1) != 0; [EOL] } <line_num>: 65,67
public void nextBytes(byte[] bytes) { [EOL]     int i = 0; [EOL]     final int iEnd = bytes.length - 3; [EOL]     while (i < iEnd) { [EOL]         final int random = next(32); [EOL]         bytes[i] = (byte) (random & 0xff); [EOL]         bytes[i + 1] = (byte) ((random >> 8) & 0xff); [EOL]         bytes[i + 2] = (byte) ((random >> 16) & 0xff); [EOL]         bytes[i + 3] = (byte) ((random >> 24) & 0xff); [EOL]         i += 4; [EOL]     } [EOL]     int random = next(32); [EOL]     while (i < bytes.length) { [EOL]         bytes[i++] = (byte) (random & 0xff); [EOL]         random = random >> 8; [EOL]     } [EOL] } <line_num>: 70,86
public double nextDouble() { [EOL]     final long high = ((long) next(26)) << 26; [EOL]     final int low = next(26); [EOL]     return (high | low) * 0x1.0p-52d; [EOL] } <line_num>: 89,93
public float nextFloat() { [EOL]     return next(23) * 0x1.0p-23f; [EOL] } <line_num>: 96,98
public double nextGaussian() { [EOL]     final double random; [EOL]     if (Double.isNaN(nextGaussian)) { [EOL]         final double x = nextDouble(); [EOL]         final double y = nextDouble(); [EOL]         final double alpha = 2 * FastMath.PI * x; [EOL]         final double r = FastMath.sqrt(-2 * FastMath.log(y)); [EOL]         random = r * FastMath.cos(alpha); [EOL]         nextGaussian = r * FastMath.sin(alpha); [EOL]     } else { [EOL]         random = nextGaussian; [EOL]         nextGaussian = Double.NaN; [EOL]     } [EOL]     return random; [EOL] } <line_num>: 101,120
public int nextInt() { [EOL]     return next(32); [EOL] } <line_num>: 123,125
public int nextInt(int n) throws IllegalArgumentException { [EOL]     if (n > 0) { [EOL]         if ((n & -n) == n) { [EOL]             return (int) ((n * (long) next(31)) >> 31); [EOL]         } [EOL]         int bits; [EOL]         int val; [EOL]         do { [EOL]             bits = next(31); [EOL]             val = bits % n; [EOL]         } while (bits - val + (n - 1) < 0); [EOL]         return val; [EOL]     } [EOL]     throw new NotStrictlyPositiveException(n); [EOL] } <line_num>: 142,156
public long nextLong() { [EOL]     final long high = ((long) next(32)) << 32; [EOL]     final long low = ((long) next(32)) & 0xffffffffL; [EOL]     return high | low; [EOL] } <line_num>: 159,163
public long nextLong(long n) throws IllegalArgumentException { [EOL]     if (n > 0) { [EOL]         long bits; [EOL]         long val; [EOL]         do { [EOL]             bits = ((long) next(31)) << 32; [EOL]             bits = bits | (((long) next(32)) & 0xffffffffL); [EOL]             val = bits % n; [EOL]         } while (bits - val + (n - 1) < 0); [EOL]         return val; [EOL]     } [EOL]     throw new NotStrictlyPositiveException(n); [EOL] } <line_num>: 176,188
public void clear() { [EOL]     nextGaussian = Double.NaN; [EOL] } <line_num>: 194,196
