public CorrelatedRandomVectorGenerator(double[] mean, RealMatrix covariance, double small, NormalizedRandomGenerator generator) { [EOL]     int order = covariance.getRowDimension(); [EOL]     if (mean.length != order) { [EOL]         throw new DimensionMismatchException(mean.length, order); [EOL]     } [EOL]     this.mean = mean.clone(); [EOL]     final RectangularCholeskyDecomposition decomposition = new RectangularCholeskyDecomposition(covariance, small); [EOL]     root = decomposition.getRootMatrix(); [EOL]     this.generator = generator; [EOL]     normalized = new double[decomposition.getRank()]; [EOL] } <line_num>: 87,103
public CorrelatedRandomVectorGenerator(RealMatrix covariance, double small, NormalizedRandomGenerator generator) { [EOL]     int order = covariance.getRowDimension(); [EOL]     mean = new double[order]; [EOL]     for (int i = 0; i < order; ++i) { [EOL]         mean[i] = 0; [EOL]     } [EOL]     final RectangularCholeskyDecomposition decomposition = new RectangularCholeskyDecomposition(covariance, small); [EOL]     root = decomposition.getRootMatrix(); [EOL]     this.generator = generator; [EOL]     normalized = new double[decomposition.getRank()]; [EOL] } <line_num>: 117,132
public NormalizedRandomGenerator getGenerator() { [EOL]     return generator; [EOL] } <line_num>: 137,139
public int getRank() { [EOL]     return normalized.length; [EOL] } <line_num>: 147,149
public RealMatrix getRootMatrix() { [EOL]     return root; [EOL] } <line_num>: 157,159
public double[] nextVector() { [EOL]     for (int i = 0; i < normalized.length; ++i) { [EOL]         normalized[i] = generator.nextNormalizedDouble(); [EOL]     } [EOL]     double[] correlated = new double[mean.length]; [EOL]     for (int i = 0; i < correlated.length; ++i) { [EOL]         correlated[i] = mean[i]; [EOL]         for (int j = 0; j < root.getColumnDimension(); ++j) { [EOL]             correlated[i] += root.getEntry(i, j) * normalized[j]; [EOL]         } [EOL]     } [EOL]     return correlated; [EOL] } <line_num>: 165,183
