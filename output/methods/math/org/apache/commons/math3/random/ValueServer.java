public ValueServer() { [EOL]     randomData = new RandomDataImpl(); [EOL] } <line_num>: 96,98
@Deprecated [EOL] public ValueServer(RandomDataImpl randomData) { [EOL]     this.randomData = randomData; [EOL] } <line_num>: 108,111
public ValueServer(RandomGenerator generator) { [EOL]     this.randomData = new RandomDataImpl(generator); [EOL] } <line_num>: 120,122
public double getNext() throws IOException, MathIllegalStateException, MathIllegalArgumentException { [EOL]     switch(mode) { [EOL]         case DIGEST_MODE: [EOL]             return getNextDigest(); [EOL]         case REPLAY_MODE: [EOL]             return getNextReplay(); [EOL]         case UNIFORM_MODE: [EOL]             return getNextUniform(); [EOL]         case EXPONENTIAL_MODE: [EOL]             return getNextExponential(); [EOL]         case GAUSSIAN_MODE: [EOL]             return getNextGaussian(); [EOL]         case CONSTANT_MODE: [EOL]             return mu; [EOL]         default: [EOL]             throw new MathIllegalStateException(LocalizedFormats.UNKNOWN_MODE, mode, "DIGEST_MODE", DIGEST_MODE, "REPLAY_MODE", REPLAY_MODE, "UNIFORM_MODE", UNIFORM_MODE, "EXPONENTIAL_MODE", EXPONENTIAL_MODE, "GAUSSIAN_MODE", GAUSSIAN_MODE, "CONSTANT_MODE", CONSTANT_MODE); [EOL]     } [EOL] } <line_num>: 133,148
public void fill(double[] values) throws IOException, MathIllegalStateException, MathIllegalArgumentException { [EOL]     for (int i = 0; i < values.length; i++) { [EOL]         values[i] = getNext(); [EOL]     } [EOL] } <line_num>: 158,163
public double[] fill(int length) throws IOException, MathIllegalStateException, MathIllegalArgumentException { [EOL]     double[] out = new double[length]; [EOL]     for (int i = 0; i < length; i++) { [EOL]         out[i] = getNext(); [EOL]     } [EOL]     return out; [EOL] } <line_num>: 175,182
public void computeDistribution() throws IOException, ZeroException, NullArgumentException { [EOL]     computeDistribution(EmpiricalDistribution.DEFAULT_BIN_COUNT); [EOL] } <line_num>: 198,200
public void computeDistribution(int binCount) throws NullArgumentException, IOException, ZeroException { [EOL]     empiricalDistribution = new EmpiricalDistribution(binCount, randomData); [EOL]     empiricalDistribution.load(valuesFileURL); [EOL]     mu = empiricalDistribution.getSampleStats().getMean(); [EOL]     sigma = empiricalDistribution.getSampleStats().getStandardDeviation(); [EOL] } <line_num>: 218,223
public int getMode() { [EOL]     return mode; [EOL] } <line_num>: 231,233
public void setMode(int mode) { [EOL]     this.mode = mode; [EOL] } <line_num>: 240,242
public URL getValuesFileURL() { [EOL]     return valuesFileURL; [EOL] } <line_num>: 250,252
public void setValuesFileURL(String url) throws MalformedURLException { [EOL]     this.valuesFileURL = new URL(url); [EOL] } <line_num>: 261,263
public void setValuesFileURL(URL url) { [EOL]     this.valuesFileURL = url; [EOL] } <line_num>: 273,275
public EmpiricalDistribution getEmpiricalDistribution() { [EOL]     return empiricalDistribution; [EOL] } <line_num>: 282,284
public void resetReplayFile() throws IOException { [EOL]     if (filePointer != null) { [EOL]         try { [EOL]             filePointer.close(); [EOL]             filePointer = null; [EOL]         } catch (IOException ex) { [EOL]         } [EOL]     } [EOL]     filePointer = new BufferedReader(new InputStreamReader(valuesFileURL.openStream(), "UTF-8")); [EOL] } <line_num>: 291,301
public void closeReplayFile() throws IOException { [EOL]     if (filePointer != null) { [EOL]         filePointer.close(); [EOL]         filePointer = null; [EOL]     } [EOL] } <line_num>: 308,313
public double getMu() { [EOL]     return mu; [EOL] } <line_num>: 323,325
public void setMu(double mu) { [EOL]     this.mu = mu; [EOL] } <line_num>: 334,336
public double getSigma() { [EOL]     return sigma; [EOL] } <line_num>: 347,349
public void setSigma(double sigma) { [EOL]     this.sigma = sigma; [EOL] } <line_num>: 356,358
public void reSeed(long seed) { [EOL]     randomData.reSeed(seed); [EOL] } <line_num>: 366,368
private double getNextDigest() throws MathIllegalStateException { [EOL]     if ((empiricalDistribution == null) || (empiricalDistribution.getBinStats().size() == 0)) { [EOL]         throw new MathIllegalStateException(LocalizedFormats.DIGEST_NOT_INITIALIZED); [EOL]     } [EOL]     return empiricalDistribution.getNextValue(); [EOL] } <line_num>: 383,389
private double getNextReplay() throws IOException, MathIllegalStateException { [EOL]     String str = null; [EOL]     if (filePointer == null) { [EOL]         resetReplayFile(); [EOL]     } [EOL]     if ((str = filePointer.readLine()) == null) { [EOL]         closeReplayFile(); [EOL]         resetReplayFile(); [EOL]         if ((str = filePointer.readLine()) == null) { [EOL]             throw new MathIllegalStateException(LocalizedFormats.URL_CONTAINS_NO_DATA, valuesFileURL); [EOL]         } [EOL]     } [EOL]     return Double.parseDouble(str); [EOL] } <line_num>: 410,425
private double getNextUniform() throws MathIllegalArgumentException { [EOL]     return randomData.nextUniform(0, 2 * mu); [EOL] } <line_num>: 433,435
private double getNextExponential() throws MathIllegalArgumentException { [EOL]     return randomData.nextExponential(mu); [EOL] } <line_num>: 443,445
private double getNextGaussian() throws MathIllegalArgumentException { [EOL]     return randomData.nextGaussian(mu, sigma); [EOL] } <line_num>: 454,456
