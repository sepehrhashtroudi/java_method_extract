public StableRandomGenerator(final RandomGenerator generator, final double alpha, final double beta) throws NullArgumentException, OutOfRangeException { [EOL]     if (generator == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     if (!(alpha > 0d && alpha <= 2d)) { [EOL]         throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT, alpha, 0, 2); [EOL]     } [EOL]     if (!(beta >= -1d && beta <= 1d)) { [EOL]         throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_SIMPLE, beta, -1, 1); [EOL]     } [EOL]     this.generator = generator; [EOL]     this.alpha = alpha; [EOL]     this.beta = beta; [EOL]     if (alpha < 2d && beta != 0d) { [EOL]         zeta = beta * FastMath.tan(FastMath.PI * alpha / 2); [EOL]     } else { [EOL]         zeta = 0d; [EOL]     } [EOL] } <line_num>: 58,83
public double nextNormalizedDouble() { [EOL]     double omega = -FastMath.log(generator.nextDouble()); [EOL]     double phi = FastMath.PI * (generator.nextDouble() - 0.5); [EOL]     if (alpha == 2d) { [EOL]         return FastMath.sqrt(2d * omega) * FastMath.sin(phi); [EOL]     } [EOL]     double x; [EOL]     if (beta == 0d) { [EOL]         if (alpha == 1d) { [EOL]             x = FastMath.tan(phi); [EOL]         } else { [EOL]             x = FastMath.pow(omega * FastMath.cos((1 - alpha) * phi), 1d / alpha - 1d) * FastMath.sin(alpha * phi) / FastMath.pow(FastMath.cos(phi), 1d / alpha); [EOL]         } [EOL]     } else { [EOL]         double cosPhi = FastMath.cos(phi); [EOL]         if (FastMath.abs(alpha - 1d) > 1e-8) { [EOL]             double alphaPhi = alpha * phi; [EOL]             double invAlphaPhi = phi - alphaPhi; [EOL]             x = (FastMath.sin(alphaPhi) + zeta * FastMath.cos(alphaPhi)) / cosPhi * (FastMath.cos(invAlphaPhi) + zeta * FastMath.sin(invAlphaPhi)) / FastMath.pow(omega * cosPhi, (1 - alpha) / alpha); [EOL]         } else { [EOL]             double betaPhi = FastMath.PI / 2 + beta * phi; [EOL]             x = 2d / FastMath.PI * (betaPhi * FastMath.tan(phi) - beta * FastMath.log(FastMath.PI / 2d * omega * cosPhi / betaPhi)); [EOL]             if (alpha != 1d) { [EOL]                 x = x + beta * FastMath.tan(FastMath.PI * alpha / 2); [EOL]             } [EOL]         } [EOL]     } [EOL]     return x; [EOL] } <line_num>: 90,134
