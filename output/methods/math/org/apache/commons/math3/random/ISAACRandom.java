public ISAACRandom() { [EOL]     setSeed(System.currentTimeMillis() + System.identityHashCode(this)); [EOL] } <line_num>: 83,85
public ISAACRandom(long seed) { [EOL]     setSeed(seed); [EOL] } <line_num>: 92,94
public ISAACRandom(int[] seed) { [EOL]     setSeed(seed); [EOL] } <line_num>: 102,104
@Override [EOL] public void setSeed(int seed) { [EOL]     setSeed(new int[] { seed }); [EOL] } <line_num>: 107,110
@Override [EOL] public void setSeed(long seed) { [EOL]     setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffL) }); [EOL] } <line_num>: 113,116
@Override [EOL] public void setSeed(int[] seed) { [EOL]     if (seed == null) { [EOL]         setSeed(System.currentTimeMillis() + System.identityHashCode(this)); [EOL]         return; [EOL]     } [EOL]     final int seedLen = seed.length; [EOL]     final int rslLen = rsl.length; [EOL]     System.arraycopy(seed, 0, rsl, 0, Math.min(seedLen, rslLen)); [EOL]     if (seedLen < rslLen) { [EOL]         for (int j = seedLen; j < rslLen; j++) { [EOL]             long k = rsl[j - seedLen]; [EOL]             rsl[j] = (int) (0x6c078965L * (k ^ k >> 30) + j & 0xffffffffL); [EOL]         } [EOL]     } [EOL]     initState(); [EOL] } <line_num>: 119,135
@Override [EOL] protected int next(int bits) { [EOL]     if (count < 0) { [EOL]         isaac(); [EOL]         count = SIZE - 1; [EOL]     } [EOL]     return rsl[count--] >>> 32 - bits; [EOL] } <line_num>: 138,145
private void isaac() { [EOL]     isaacI = 0; [EOL]     isaacJ = H_SIZE; [EOL]     isaacB += ++isaacC; [EOL]     while (isaacI < H_SIZE) { [EOL]         isaac2(); [EOL]     } [EOL]     isaacJ = 0; [EOL]     while (isaacJ < H_SIZE) { [EOL]         isaac2(); [EOL]     } [EOL] } <line_num>: 148,159
private void isaac2() { [EOL]     isaacX = mem[isaacI]; [EOL]     isaacA ^= isaacA << 13; [EOL]     isaacA += mem[isaacJ++]; [EOL]     isaac3(); [EOL]     isaacX = mem[isaacI]; [EOL]     isaacA ^= isaacA >>> 6; [EOL]     isaacA += mem[isaacJ++]; [EOL]     isaac3(); [EOL]     isaacX = mem[isaacI]; [EOL]     isaacA ^= isaacA << 2; [EOL]     isaacA += mem[isaacJ++]; [EOL]     isaac3(); [EOL]     isaacX = mem[isaacI]; [EOL]     isaacA ^= isaacA >>> 16; [EOL]     isaacA += mem[isaacJ++]; [EOL]     isaac3(); [EOL] } <line_num>: 162,179
private void isaac3() { [EOL]     mem[isaacI] = mem[(isaacX & MASK) >> 2] + isaacA + isaacB; [EOL]     isaacB = mem[(mem[isaacI] >> SIZE_L & MASK) >> 2] + isaacX; [EOL]     rsl[isaacI++] = isaacB; [EOL] } <line_num>: 182,186
private void initState() { [EOL]     isaacA = 0; [EOL]     isaacB = 0; [EOL]     isaacC = 0; [EOL]     for (int j = 0; j < arr.length; j++) { [EOL]         arr[j] = GLD_RATIO; [EOL]     } [EOL]     for (int j = 0; j < 4; j++) { [EOL]         shuffle(); [EOL]     } [EOL]     for (int j = 0; j < SIZE; j += 8) { [EOL]         arr[0] += rsl[j]; [EOL]         arr[1] += rsl[j + 1]; [EOL]         arr[2] += rsl[j + 2]; [EOL]         arr[3] += rsl[j + 3]; [EOL]         arr[4] += rsl[j + 4]; [EOL]         arr[5] += rsl[j + 5]; [EOL]         arr[6] += rsl[j + 6]; [EOL]         arr[7] += rsl[j + 7]; [EOL]         shuffle(); [EOL]         setState(j); [EOL]     } [EOL]     for (int j = 0; j < SIZE; j += 8) { [EOL]         arr[0] += mem[j]; [EOL]         arr[1] += mem[j + 1]; [EOL]         arr[2] += mem[j + 2]; [EOL]         arr[3] += mem[j + 3]; [EOL]         arr[4] += mem[j + 4]; [EOL]         arr[5] += mem[j + 5]; [EOL]         arr[6] += mem[j + 6]; [EOL]         arr[7] += mem[j + 7]; [EOL]         shuffle(); [EOL]         setState(j); [EOL]     } [EOL]     isaac(); [EOL]     count = SIZE - 1; [EOL]     clear(); [EOL] } <line_num>: 189,228
private void shuffle() { [EOL]     arr[0] ^= arr[1] << 11; [EOL]     arr[3] += arr[0]; [EOL]     arr[1] += arr[2]; [EOL]     arr[1] ^= arr[2] >>> 2; [EOL]     arr[4] += arr[1]; [EOL]     arr[2] += arr[3]; [EOL]     arr[2] ^= arr[3] << 8; [EOL]     arr[5] += arr[2]; [EOL]     arr[3] += arr[4]; [EOL]     arr[3] ^= arr[4] >>> 16; [EOL]     arr[6] += arr[3]; [EOL]     arr[4] += arr[5]; [EOL]     arr[4] ^= arr[5] << 10; [EOL]     arr[7] += arr[4]; [EOL]     arr[5] += arr[6]; [EOL]     arr[5] ^= arr[6] >>> 4; [EOL]     arr[0] += arr[5]; [EOL]     arr[6] += arr[7]; [EOL]     arr[6] ^= arr[7] << 8; [EOL]     arr[1] += arr[6]; [EOL]     arr[7] += arr[0]; [EOL]     arr[7] ^= arr[0] >>> 9; [EOL]     arr[2] += arr[7]; [EOL]     arr[0] += arr[1]; [EOL] } <line_num>: 231,256
private void setState(int start) { [EOL]     mem[start] = arr[0]; [EOL]     mem[start + 1] = arr[1]; [EOL]     mem[start + 2] = arr[2]; [EOL]     mem[start + 3] = arr[3]; [EOL]     mem[start + 4] = arr[4]; [EOL]     mem[start + 5] = arr[5]; [EOL]     mem[start + 6] = arr[6]; [EOL]     mem[start + 7] = arr[7]; [EOL] } <line_num>: 262,271
