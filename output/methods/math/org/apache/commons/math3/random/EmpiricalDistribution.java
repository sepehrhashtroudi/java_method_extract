public EmpiricalDistribution() { [EOL]     this(DEFAULT_BIN_COUNT); [EOL] } <line_num>: 143,145
public EmpiricalDistribution(int binCount) { [EOL]     this(binCount, new RandomDataGenerator()); [EOL] } <line_num>: 152,154
public EmpiricalDistribution(int binCount, RandomGenerator generator) { [EOL]     this(binCount, new RandomDataGenerator(generator)); [EOL] } <line_num>: 164,166
public EmpiricalDistribution(RandomGenerator generator) { [EOL]     this(DEFAULT_BIN_COUNT, generator); [EOL] } <line_num>: 175,177
@Deprecated [EOL] public EmpiricalDistribution(int binCount, RandomDataImpl randomData) { [EOL]     this(binCount, randomData.getDelegate()); [EOL] } <line_num>: 188,191
@Deprecated [EOL] public EmpiricalDistribution(RandomDataImpl randomData) { [EOL]     this(DEFAULT_BIN_COUNT, randomData); [EOL] } <line_num>: 201,204
private EmpiricalDistribution(int binCount, RandomDataGenerator randomData) { [EOL]     super(null); [EOL]     this.binCount = binCount; [EOL]     this.randomData = randomData; [EOL]     binStats = new ArrayList<SummaryStatistics>(); [EOL] } <line_num>: 213,219
public StreamDataAdapter(BufferedReader in) { [EOL]     super(); [EOL]     inputStream = in; [EOL] } <line_num>: 345,348
public ArrayDataAdapter(double[] in) throws NullArgumentException { [EOL]     super(); [EOL]     MathUtils.checkNotNull(in); [EOL]     inputArray = in; [EOL] } <line_num>: 394,398
public void load(double[] in) throws NullArgumentException { [EOL]     DataAdapter da = new ArrayDataAdapter(in); [EOL]     try { [EOL]         da.computeStats(); [EOL]         fillBinStats(new ArrayDataAdapter(in)); [EOL]     } catch (IOException ex) { [EOL]         throw new MathInternalError(); [EOL]     } [EOL]     loaded = true; [EOL] } <line_num>: 228,240
public void load(URL url) throws IOException, NullArgumentException, ZeroException { [EOL]     MathUtils.checkNotNull(url); [EOL]     Charset charset = Charset.forName(FILE_CHARSET); [EOL]     BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), charset)); [EOL]     try { [EOL]         DataAdapter da = new StreamDataAdapter(in); [EOL]         da.computeStats(); [EOL]         if (sampleStats.getN() == 0) { [EOL]             throw new ZeroException(LocalizedFormats.URL_CONTAINS_NO_DATA, url); [EOL]         } [EOL]         in = new BufferedReader(new InputStreamReader(url.openStream(), charset)); [EOL]         fillBinStats(new StreamDataAdapter(in)); [EOL]         loaded = true; [EOL]     } finally { [EOL]         try { [EOL]             in.close(); [EOL]         } catch (IOException ex) { [EOL]         } [EOL]     } [EOL] } <line_num>: 254,276
public void load(File file) throws IOException, NullArgumentException { [EOL]     MathUtils.checkNotNull(file); [EOL]     Charset charset = Charset.forName(FILE_CHARSET); [EOL]     InputStream is = new FileInputStream(file); [EOL]     BufferedReader in = new BufferedReader(new InputStreamReader(is, charset)); [EOL]     try { [EOL]         DataAdapter da = new StreamDataAdapter(in); [EOL]         da.computeStats(); [EOL]         is = new FileInputStream(file); [EOL]         in = new BufferedReader(new InputStreamReader(is, charset)); [EOL]         fillBinStats(new StreamDataAdapter(in)); [EOL]         loaded = true; [EOL]     } finally { [EOL]         try { [EOL]             in.close(); [EOL]         } catch (IOException ex) { [EOL]         } [EOL]     } [EOL] } <line_num>: 288,308
public abstract void computeBinStats() throws IOException; <line_num>: 321,321
public abstract void computeStats() throws IOException; <line_num>: 328,328
@Override [EOL] public void computeBinStats() throws IOException { [EOL]     String str = null; [EOL]     double val = 0.0d; [EOL]     while ((str = inputStream.readLine()) != null) { [EOL]         val = Double.parseDouble(str); [EOL]         SummaryStatistics stats = binStats.get(findBin(val)); [EOL]         stats.addValue(val); [EOL]     } [EOL]     inputStream.close(); [EOL]     inputStream = null; [EOL] } <line_num>: 351,363
@Override [EOL] public void computeStats() throws IOException { [EOL]     String str = null; [EOL]     double val = 0.0; [EOL]     sampleStats = new SummaryStatistics(); [EOL]     while ((str = inputStream.readLine()) != null) { [EOL]         val = Double.parseDouble(str); [EOL]         sampleStats.addValue(val); [EOL]     } [EOL]     inputStream.close(); [EOL]     inputStream = null; [EOL] } <line_num>: 366,377
@Override [EOL] public void computeStats() throws IOException { [EOL]     sampleStats = new SummaryStatistics(); [EOL]     for (int i = 0; i < inputArray.length; i++) { [EOL]         sampleStats.addValue(inputArray[i]); [EOL]     } [EOL] } <line_num>: 401,407
@Override [EOL] public void computeBinStats() throws IOException { [EOL]     for (int i = 0; i < inputArray.length; i++) { [EOL]         SummaryStatistics stats = binStats.get(findBin(inputArray[i])); [EOL]         stats.addValue(inputArray[i]); [EOL]     } [EOL] } <line_num>: 410,417
private void fillBinStats(final DataAdapter da) throws IOException { [EOL]     min = sampleStats.getMin(); [EOL]     max = sampleStats.getMax(); [EOL]     delta = (max - min) / ((double) binCount); [EOL]     if (!binStats.isEmpty()) { [EOL]         binStats.clear(); [EOL]     } [EOL]     for (int i = 0; i < binCount; i++) { [EOL]         SummaryStatistics stats = new SummaryStatistics(); [EOL]         binStats.add(i, stats); [EOL]     } [EOL]     da.computeBinStats(); [EOL]     upperBounds = new double[binCount]; [EOL]     upperBounds[0] = ((double) binStats.get(0).getN()) / (double) sampleStats.getN(); [EOL]     for (int i = 1; i < binCount - 1; i++) { [EOL]         upperBounds[i] = upperBounds[i - 1] + ((double) binStats.get(i).getN()) / (double) sampleStats.getN(); [EOL]     } [EOL]     upperBounds[binCount - 1] = 1.0d; [EOL] } <line_num>: 426,454
private int findBin(double value) { [EOL]     return FastMath.min(FastMath.max((int) FastMath.ceil((value - min) / delta) - 1, 0), binCount - 1); [EOL] } <line_num>: 462,466
public double getNextValue() throws MathIllegalStateException { [EOL]     if (!loaded) { [EOL]         throw new MathIllegalStateException(LocalizedFormats.DISTRIBUTION_NOT_LOADED); [EOL]     } [EOL]     final double x = randomData.nextUniform(0, 1); [EOL]     for (int i = 0; i < binCount; i++) { [EOL]         if (x <= upperBounds[i]) { [EOL]             SummaryStatistics stats = binStats.get(i); [EOL]             if (stats.getN() > 0) { [EOL]                 if (stats.getStandardDeviation() > 0) { [EOL]                     return getKernel(stats).sample(); [EOL]                 } else { [EOL]                     return stats.getMean(); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     throw new MathIllegalStateException(LocalizedFormats.NO_BIN_SELECTED); [EOL] } <line_num>: 475,498
public StatisticalSummary getSampleStats() { [EOL]     return sampleStats; [EOL] } <line_num>: 508,510
public int getBinCount() { [EOL]     return binCount; [EOL] } <line_num>: 517,519
public List<SummaryStatistics> getBinStats() { [EOL]     return binStats; [EOL] } <line_num>: 528,530
public double[] getUpperBounds() { [EOL]     double[] binUpperBounds = new double[binCount]; [EOL]     for (int i = 0; i < binCount - 1; i++) { [EOL]         binUpperBounds[i] = min + delta * (i + 1); [EOL]     } [EOL]     binUpperBounds[binCount - 1] = max; [EOL]     return binUpperBounds; [EOL] } <line_num>: 545,552
public double[] getGeneratorUpperBounds() { [EOL]     int len = upperBounds.length; [EOL]     double[] out = new double[len]; [EOL]     System.arraycopy(upperBounds, 0, out, 0, len); [EOL]     return out; [EOL] } <line_num>: 565,570
public boolean isLoaded() { [EOL]     return loaded; [EOL] } <line_num>: 577,579
public void reSeed(long seed) { [EOL]     randomData.reSeed(seed); [EOL] } <line_num>: 587,589
@Override [EOL] public double probability(double x) { [EOL]     return 0; [EOL] } <line_num>: 597,600
public double density(double x) { [EOL]     if (x < min || x > max) { [EOL]         return 0d; [EOL]     } [EOL]     final int binIndex = findBin(x); [EOL]     final RealDistribution kernel = getKernel(binStats.get(binIndex)); [EOL]     return kernel.density(x) * pB(binIndex) / kB(binIndex); [EOL] } <line_num>: 616,623
public double cumulativeProbability(double x) { [EOL]     if (x < min) { [EOL]         return 0d; [EOL]     } else if (x >= max) { [EOL]         return 1d; [EOL]     } [EOL]     final int binIndex = findBin(x); [EOL]     final double pBminus = pBminus(binIndex); [EOL]     final double pB = pB(binIndex); [EOL]     final double[] binBounds = getUpperBounds(); [EOL]     final double kB = kB(binIndex); [EOL]     final double lower = binIndex == 0 ? min : binBounds[binIndex - 1]; [EOL]     final RealDistribution kernel = k(x); [EOL]     final double withinBinCum = (kernel.cumulativeProbability(x) - kernel.cumulativeProbability(lower)) / kB; [EOL]     return pBminus + pB * withinBinCum; [EOL] } <line_num>: 638,654
@Override [EOL] public double inverseCumulativeProbability(final double p) throws OutOfRangeException { [EOL]     if (p < 0.0 || p > 1.0) { [EOL]         throw new OutOfRangeException(p, 0, 1); [EOL]     } [EOL]     if (p == 0.0) { [EOL]         return getSupportLowerBound(); [EOL]     } [EOL]     if (p == 1.0) { [EOL]         return getSupportUpperBound(); [EOL]     } [EOL]     int i = 0; [EOL]     while (cumBinP(i) < p) { [EOL]         i++; [EOL]     } [EOL]     final RealDistribution kernel = getKernel(binStats.get(i)); [EOL]     final double kB = kB(i); [EOL]     final double[] binBounds = getUpperBounds(); [EOL]     final double lower = i == 0 ? min : binBounds[i - 1]; [EOL]     final double kBminus = kernel.cumulativeProbability(lower); [EOL]     final double pB = pB(i); [EOL]     final double pBminus = pBminus(i); [EOL]     final double pCrit = p - pBminus; [EOL]     if (pCrit <= 0) { [EOL]         return lower; [EOL]     } [EOL]     return kernel.inverseCumulativeProbability(kBminus + pCrit * kB / pB); [EOL] } <line_num>: 676,707
public double getNumericalMean() { [EOL]     return sampleStats.getMean(); [EOL] } <line_num>: 713,715
public double getNumericalVariance() { [EOL]     return sampleStats.getVariance(); [EOL] } <line_num>: 721,723
public double getSupportLowerBound() { [EOL]     return min; [EOL] } <line_num>: 729,731
public double getSupportUpperBound() { [EOL]     return max; [EOL] } <line_num>: 737,739
public boolean isSupportLowerBoundInclusive() { [EOL]     return true; [EOL] } <line_num>: 745,747
public boolean isSupportUpperBoundInclusive() { [EOL]     return true; [EOL] } <line_num>: 753,755
public boolean isSupportConnected() { [EOL]     return true; [EOL] } <line_num>: 761,763
@Override [EOL] public double sample() { [EOL]     return getNextValue(); [EOL] } <line_num>: 769,772
@Override [EOL] public void reseedRandomGenerator(long seed) { [EOL]     randomData.reSeed(seed); [EOL] } <line_num>: 778,781
private double pB(int i) { [EOL]     return i == 0 ? upperBounds[0] : upperBounds[i] - upperBounds[i - 1]; [EOL] } <line_num>: 789,792
private double pBminus(int i) { [EOL]     return i == 0 ? 0 : upperBounds[i - 1]; [EOL] } <line_num>: 800,802
@SuppressWarnings("deprecation") [EOL] private double kB(int i) { [EOL]     final double[] binBounds = getUpperBounds(); [EOL]     final RealDistribution kernel = getKernel(binStats.get(i)); [EOL]     return i == 0 ? kernel.cumulativeProbability(min, binBounds[0]) : kernel.cumulativeProbability(binBounds[i - 1], binBounds[i]); [EOL] } <line_num>: 811,817
private RealDistribution k(double x) { [EOL]     final int binIndex = findBin(x); [EOL]     return getKernel(binStats.get(binIndex)); [EOL] } <line_num>: 825,828
private double cumBinP(int binIndex) { [EOL]     return upperBounds[binIndex]; [EOL] } <line_num>: 836,838
protected RealDistribution getKernel(SummaryStatistics bStats) { [EOL]     return new NormalDistribution(randomData.getRandomGenerator(), bStats.getMean(), bStats.getStandardDeviation(), NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY); [EOL] } <line_num>: 846,851
