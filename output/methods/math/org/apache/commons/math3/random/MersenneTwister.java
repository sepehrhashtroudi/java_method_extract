public MersenneTwister() { [EOL]     mt = new int[N]; [EOL]     setSeed(System.currentTimeMillis() + System.identityHashCode(this)); [EOL] } <line_num>: 106,109
public MersenneTwister(int seed) { [EOL]     mt = new int[N]; [EOL]     setSeed(seed); [EOL] } <line_num>: 114,117
public MersenneTwister(int[] seed) { [EOL]     mt = new int[N]; [EOL]     setSeed(seed); [EOL] } <line_num>: 123,126
public MersenneTwister(long seed) { [EOL]     mt = new int[N]; [EOL]     setSeed(seed); [EOL] } <line_num>: 131,134
@Override [EOL] public void setSeed(int seed) { [EOL]     long longMT = seed; [EOL]     mt[0] = (int) longMT; [EOL]     for (mti = 1; mti < N; ++mti) { [EOL]         longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL; [EOL]         mt[mti] = (int) longMT; [EOL]     } [EOL]     clear(); [EOL] } <line_num>: 141,155
@Override [EOL] public void setSeed(int[] seed) { [EOL]     if (seed == null) { [EOL]         setSeed(System.currentTimeMillis() + System.identityHashCode(this)); [EOL]         return; [EOL]     } [EOL]     setSeed(19650218); [EOL]     int i = 1; [EOL]     int j = 0; [EOL]     for (int k = FastMath.max(N, seed.length); k != 0; k--) { [EOL]         long l0 = (mt[i] & 0x7fffffffl) | ((mt[i] < 0) ? 0x80000000l : 0x0l); [EOL]         long l1 = (mt[i - 1] & 0x7fffffffl) | ((mt[i - 1] < 0) ? 0x80000000l : 0x0l); [EOL]         long l = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; [EOL]         mt[i] = (int) (l & 0xffffffffl); [EOL]         i++; [EOL]         j++; [EOL]         if (i >= N) { [EOL]             mt[0] = mt[N - 1]; [EOL]             i = 1; [EOL]         } [EOL]         if (j >= seed.length) { [EOL]             j = 0; [EOL]         } [EOL]     } [EOL]     for (int k = N - 1; k != 0; k--) { [EOL]         long l0 = (mt[i] & 0x7fffffffl) | ((mt[i] < 0) ? 0x80000000l : 0x0l); [EOL]         long l1 = (mt[i - 1] & 0x7fffffffl) | ((mt[i - 1] < 0) ? 0x80000000l : 0x0l); [EOL]         long l = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; [EOL]         mt[i] = (int) (l & 0xffffffffL); [EOL]         i++; [EOL]         if (i >= N) { [EOL]             mt[0] = mt[N - 1]; [EOL]             i = 1; [EOL]         } [EOL]     } [EOL]     mt[0] = 0x80000000; [EOL]     clear(); [EOL] } <line_num>: 164,207
@Override [EOL] public void setSeed(long seed) { [EOL]     setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) }); [EOL] } <line_num>: 214,217
@Override [EOL] protected int next(int bits) { [EOL]     int y; [EOL]     if (mti >= N) { [EOL]         int mtNext = mt[0]; [EOL]         for (int k = 0; k < N - M; ++k) { [EOL]             int mtCurr = mtNext; [EOL]             mtNext = mt[k + 1]; [EOL]             y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff); [EOL]             mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1]; [EOL]         } [EOL]         for (int k = N - M; k < N - 1; ++k) { [EOL]             int mtCurr = mtNext; [EOL]             mtNext = mt[k + 1]; [EOL]             y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff); [EOL]             mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1]; [EOL]         } [EOL]         y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff); [EOL]         mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1]; [EOL]         mti = 0; [EOL]     } [EOL]     y = mt[mti++]; [EOL]     y ^= y >>> 11; [EOL]     y ^= (y << 7) & 0x9d2c5680; [EOL]     y ^= (y << 15) & 0xefc60000; [EOL]     y ^= y >>> 18; [EOL]     return y >>> (32 - bits); [EOL] } <line_num>: 228,263
