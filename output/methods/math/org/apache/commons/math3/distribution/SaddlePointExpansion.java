private SaddlePointExpansion() { [EOL]     super(); [EOL] } <line_num>: 88,90
static double getStirlingError(double z) { [EOL]     double ret; [EOL]     if (z < 15.0) { [EOL]         double z2 = 2.0 * z; [EOL]         if (FastMath.floor(z2) == z2) { [EOL]             ret = EXACT_STIRLING_ERRORS[(int) z2]; [EOL]         } else { [EOL]             ret = Gamma.logGamma(z + 1.0) - (z + 0.5) * FastMath.log(z) + z - HALF_LOG_2_PI; [EOL]         } [EOL]     } else { [EOL]         double z2 = z * z; [EOL]         ret = (0.083333333333333333333 - (0.00277777777777777777778 - (0.00079365079365079365079365 - (0.000595238095238095238095238 - 0.0008417508417508417508417508 / z2) / z2) / z2) / z2) / z; [EOL]     } [EOL]     return ret; [EOL] } <line_num>: 107,127
static double getDeviancePart(double x, double mu) { [EOL]     double ret; [EOL]     if (FastMath.abs(x - mu) < 0.1 * (x + mu)) { [EOL]         double d = x - mu; [EOL]         double v = d / (x + mu); [EOL]         double s1 = v * d; [EOL]         double s = Double.NaN; [EOL]         double ej = 2.0 * x * v; [EOL]         v = v * v; [EOL]         int j = 1; [EOL]         while (s1 != s) { [EOL]             s = s1; [EOL]             ej *= v; [EOL]             s1 = s + ej / ((j * 2) + 1); [EOL]             ++j; [EOL]         } [EOL]         ret = s1; [EOL]     } else { [EOL]         ret = x * FastMath.log(x / mu) + mu - x; [EOL]     } [EOL]     return ret; [EOL] } <line_num>: 145,166
static double logBinomialProbability(int x, int n, double p, double q) { [EOL]     double ret; [EOL]     if (x == 0) { [EOL]         if (p < 0.1) { [EOL]             ret = -getDeviancePart(n, n * q) - n * p; [EOL]         } else { [EOL]             ret = n * FastMath.log(q); [EOL]         } [EOL]     } else if (x == n) { [EOL]         if (q < 0.1) { [EOL]             ret = -getDeviancePart(n, n * p) - n * q; [EOL]         } else { [EOL]             ret = n * FastMath.log(p); [EOL]         } [EOL]     } else { [EOL]         ret = getStirlingError(n) - getStirlingError(x) - getStirlingError(n - x) - getDeviancePart(x, n * p) - getDeviancePart(n - x, n * q); [EOL]         double f = (MathUtils.TWO_PI * x * (n - x)) / n; [EOL]         ret = -0.5 * FastMath.log(f) + ret; [EOL]     } [EOL]     return ret; [EOL] } <line_num>: 178,200
