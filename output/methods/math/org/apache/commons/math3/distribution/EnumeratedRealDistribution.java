public EnumeratedRealDistribution(final double[] singletons, final double[] probabilities) throws DimensionMismatchException, NotPositiveException, MathArithmeticException, NotFiniteNumberException, NotANumberException { [EOL]     this(new Well19937c(), singletons, probabilities); [EOL] } <line_num>: 65,69
public EnumeratedRealDistribution(final RandomGenerator rng, final double[] singletons, final double[] probabilities) throws DimensionMismatchException, NotPositiveException, MathArithmeticException, NotFiniteNumberException, NotANumberException { [EOL]     super(rng); [EOL]     if (singletons.length != probabilities.length) { [EOL]         throw new DimensionMismatchException(probabilities.length, singletons.length); [EOL]     } [EOL]     List<Pair<Double, Double>> samples = new ArrayList<Pair<Double, Double>>(singletons.length); [EOL]     for (int i = 0; i < singletons.length; i++) { [EOL]         samples.add(new Pair<Double, Double>(singletons[i], probabilities[i])); [EOL]     } [EOL]     innerDistribution = new EnumeratedDistribution<Double>(rng, samples); [EOL] } <line_num>: 85,101
@Override [EOL] public double probability(final double x) { [EOL]     return innerDistribution.probability(x); [EOL] } <line_num>: 106,109
public double density(final double x) { [EOL]     return probability(x); [EOL] } <line_num>: 120,122
public double cumulativeProbability(final double x) { [EOL]     double probability = 0; [EOL]     for (final Pair<Double, Double> sample : innerDistribution.getPmf()) { [EOL]         if (sample.getKey() <= x) { [EOL]             probability += sample.getValue(); [EOL]         } [EOL]     } [EOL]     return probability; [EOL] } <line_num>: 127,137
public double getNumericalMean() { [EOL]     double mean = 0; [EOL]     for (final Pair<Double, Double> sample : innerDistribution.getPmf()) { [EOL]         mean += sample.getValue() * sample.getKey(); [EOL]     } [EOL]     return mean; [EOL] } <line_num>: 144,152
public double getNumericalVariance() { [EOL]     double mean = 0; [EOL]     double meanOfSquares = 0; [EOL]     for (final Pair<Double, Double> sample : innerDistribution.getPmf()) { [EOL]         mean += sample.getValue() * sample.getKey(); [EOL]         meanOfSquares += sample.getValue() * sample.getKey() * sample.getKey(); [EOL]     } [EOL]     return meanOfSquares - mean * mean; [EOL] } <line_num>: 159,169
public double getSupportLowerBound() { [EOL]     double min = Double.POSITIVE_INFINITY; [EOL]     for (final Pair<Double, Double> sample : innerDistribution.getPmf()) { [EOL]         if (sample.getKey() < min && sample.getValue() > 0) { [EOL]             min = sample.getKey(); [EOL]         } [EOL]     } [EOL]     return min; [EOL] } <line_num>: 178,187
public double getSupportUpperBound() { [EOL]     double max = Double.NEGATIVE_INFINITY; [EOL]     for (final Pair<Double, Double> sample : innerDistribution.getPmf()) { [EOL]         if (sample.getKey() > max && sample.getValue() > 0) { [EOL]             max = sample.getKey(); [EOL]         } [EOL]     } [EOL]     return max; [EOL] } <line_num>: 196,205
public boolean isSupportLowerBoundInclusive() { [EOL]     return true; [EOL] } <line_num>: 214,216
public boolean isSupportUpperBoundInclusive() { [EOL]     return true; [EOL] } <line_num>: 225,227
public boolean isSupportConnected() { [EOL]     return true; [EOL] } <line_num>: 236,238
@Override [EOL] public double sample() { [EOL]     return innerDistribution.sample(); [EOL] } <line_num>: 243,246
