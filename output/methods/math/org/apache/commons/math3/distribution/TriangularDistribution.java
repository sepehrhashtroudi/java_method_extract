public TriangularDistribution(double a, double c, double b) throws NumberIsTooLargeException, NumberIsTooSmallException { [EOL]     this(new Well19937c(), a, c, b); [EOL] } <line_num>: 59,62
public TriangularDistribution(RandomGenerator rng, double a, double c, double b) throws NumberIsTooLargeException, NumberIsTooSmallException { [EOL]     super(rng); [EOL]     if (a >= b) { [EOL]         throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, a, b, false); [EOL]     } [EOL]     if (c < a) { [EOL]         throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_TOO_SMALL, c, a, true); [EOL]     } [EOL]     if (c > b) { [EOL]         throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_TOO_LARGE, c, b, true); [EOL]     } [EOL]     this.a = a; [EOL]     this.c = c; [EOL]     this.b = b; [EOL]     solverAbsoluteAccuracy = FastMath.max(FastMath.ulp(a), FastMath.ulp(b)); [EOL] } <line_num>: 75,100
public double getMode() { [EOL]     return c; [EOL] } <line_num>: 107,109
@Override [EOL] protected double getSolverAbsoluteAccuracy() { [EOL]     return solverAbsoluteAccuracy; [EOL] } <line_num>: 124,127
public double density(double x) { [EOL]     if (x < a) { [EOL]         return 0; [EOL]     } [EOL]     if (a <= x && x < c) { [EOL]         double divident = 2 * (x - a); [EOL]         double divisor = (b - a) * (c - a); [EOL]         return divident / divisor; [EOL]     } [EOL]     if (x == c) { [EOL]         return 2 / (b - a); [EOL]     } [EOL]     if (c < x && x <= b) { [EOL]         double divident = 2 * (b - x); [EOL]         double divisor = (b - a) * (b - c); [EOL]         return divident / divisor; [EOL]     } [EOL]     return 0; [EOL] } <line_num>: 141,159
public double cumulativeProbability(double x) { [EOL]     if (x < a) { [EOL]         return 0; [EOL]     } [EOL]     if (a <= x && x < c) { [EOL]         double divident = (x - a) * (x - a); [EOL]         double divisor = (b - a) * (c - a); [EOL]         return divident / divisor; [EOL]     } [EOL]     if (x == c) { [EOL]         return (c - a) / (b - a); [EOL]     } [EOL]     if (c < x && x <= b) { [EOL]         double divident = (b - x) * (b - x); [EOL]         double divisor = (b - a) * (b - c); [EOL]         return 1 - (divident / divisor); [EOL]     } [EOL]     return 1; [EOL] } <line_num>: 174,192
public double getNumericalMean() { [EOL]     return (a + b + c) / 3; [EOL] } <line_num>: 200,202
public double getNumericalVariance() { [EOL]     return (a * a + b * b + c * c - a * b - a * c - b * c) / 18; [EOL] } <line_num>: 210,212
public double getSupportLowerBound() { [EOL]     return a; [EOL] } <line_num>: 222,224
public double getSupportUpperBound() { [EOL]     return b; [EOL] } <line_num>: 234,236
public boolean isSupportLowerBoundInclusive() { [EOL]     return true; [EOL] } <line_num>: 239,241
public boolean isSupportUpperBoundInclusive() { [EOL]     return true; [EOL] } <line_num>: 244,246
public boolean isSupportConnected() { [EOL]     return true; [EOL] } <line_num>: 255,257
@Override [EOL] public double inverseCumulativeProbability(double p) throws OutOfRangeException { [EOL]     if (p < 0 || p > 1) { [EOL]         throw new OutOfRangeException(p, 0, 1); [EOL]     } [EOL]     if (p == 0) { [EOL]         return a; [EOL]     } [EOL]     if (p == 1) { [EOL]         return b; [EOL]     } [EOL]     if (p < (c - a) / (b - a)) { [EOL]         return a + FastMath.sqrt(p * (b - a) * (c - a)); [EOL]     } [EOL]     return b - FastMath.sqrt((1 - p) * (b - a) * (b - c)); [EOL] } <line_num>: 259,275
