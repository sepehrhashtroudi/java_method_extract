public ZipfDistribution(final int numberOfElements, final double exponent) { [EOL]     this(new Well19937c(), numberOfElements, exponent); [EOL] } <line_num>: 57,59
public ZipfDistribution(RandomGenerator rng, int numberOfElements, double exponent) throws NotStrictlyPositiveException { [EOL]     super(rng); [EOL]     if (numberOfElements <= 0) { [EOL]         throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION, numberOfElements); [EOL]     } [EOL]     if (exponent <= 0) { [EOL]         throw new NotStrictlyPositiveException(LocalizedFormats.EXPONENT, exponent); [EOL]     } [EOL]     this.numberOfElements = numberOfElements; [EOL]     this.exponent = exponent; [EOL] } <line_num>: 71,88
public int getNumberOfElements() { [EOL]     return numberOfElements; [EOL] } <line_num>: 95,97
public double getExponent() { [EOL]     return exponent; [EOL] } <line_num>: 104,106
public double probability(final int x) { [EOL]     if (x <= 0 || x > numberOfElements) { [EOL]         return 0.0; [EOL]     } [EOL]     return (1.0 / FastMath.pow(x, exponent)) / generalizedHarmonic(numberOfElements, exponent); [EOL] } <line_num>: 109,115
public double cumulativeProbability(final int x) { [EOL]     if (x <= 0) { [EOL]         return 0.0; [EOL]     } else if (x >= numberOfElements) { [EOL]         return 1.0; [EOL]     } [EOL]     return generalizedHarmonic(x, exponent) / generalizedHarmonic(numberOfElements, exponent); [EOL] } <line_num>: 118,126
public double getNumericalMean() { [EOL]     if (!numericalMeanIsCalculated) { [EOL]         numericalMean = calculateNumericalMean(); [EOL]         numericalMeanIsCalculated = true; [EOL]     } [EOL]     return numericalMean; [EOL] } <line_num>: 138,144
protected double calculateNumericalMean() { [EOL]     final int N = getNumberOfElements(); [EOL]     final double s = getExponent(); [EOL]     final double Hs1 = generalizedHarmonic(N, s - 1); [EOL]     final double Hs = generalizedHarmonic(N, s); [EOL]     return Hs1 / Hs; [EOL] } <line_num>: 151,159
public double getNumericalVariance() { [EOL]     if (!numericalVarianceIsCalculated) { [EOL]         numericalVariance = calculateNumericalVariance(); [EOL]         numericalVarianceIsCalculated = true; [EOL]     } [EOL]     return numericalVariance; [EOL] } <line_num>: 172,178
protected double calculateNumericalVariance() { [EOL]     final int N = getNumberOfElements(); [EOL]     final double s = getExponent(); [EOL]     final double Hs2 = generalizedHarmonic(N, s - 2); [EOL]     final double Hs1 = generalizedHarmonic(N, s - 1); [EOL]     final double Hs = generalizedHarmonic(N, s); [EOL]     return (Hs2 / Hs) - ((Hs1 * Hs1) / (Hs * Hs)); [EOL] } <line_num>: 185,194
private double generalizedHarmonic(final int n, final double m) { [EOL]     double value = 0; [EOL]     for (int k = n; k > 0; --k) { [EOL]         value += 1.0 / FastMath.pow(k, m); [EOL]     } [EOL]     return value; [EOL] } <line_num>: 205,211
public int getSupportLowerBound() { [EOL]     return 1; [EOL] } <line_num>: 220,222
public int getSupportUpperBound() { [EOL]     return getNumberOfElements(); [EOL] } <line_num>: 231,233
public boolean isSupportConnected() { [EOL]     return true; [EOL] } <line_num>: 242,244
