public MultivariateNormalDistribution(final double[] means, final double[][] covariances) throws SingularMatrixException, DimensionMismatchException, NonPositiveDefiniteMatrixException { [EOL]     this(new Well19937c(), means, covariances); [EOL] } <line_num>: 71,77
public MultivariateNormalDistribution(RandomGenerator rng, final double[] means, final double[][] covariances) throws SingularMatrixException, DimensionMismatchException, NonPositiveDefiniteMatrixException { [EOL]     super(rng, means.length); [EOL]     final int dim = means.length; [EOL]     if (covariances.length != dim) { [EOL]         throw new DimensionMismatchException(covariances.length, dim); [EOL]     } [EOL]     for (int i = 0; i < dim; i++) { [EOL]         if (dim != covariances[i].length) { [EOL]             throw new DimensionMismatchException(covariances[i].length, dim); [EOL]         } [EOL]     } [EOL]     this.means = MathArrays.copyOf(means); [EOL]     covarianceMatrix = new Array2DRowRealMatrix(covariances); [EOL]     final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix); [EOL]     covarianceMatrixInverse = covMatDec.getSolver().getInverse(); [EOL]     covarianceMatrixDeterminant = covMatDec.getDeterminant(); [EOL]     final double[] covMatEigenvalues = covMatDec.getRealEigenvalues(); [EOL]     for (int i = 0; i < covMatEigenvalues.length; i++) { [EOL]         if (covMatEigenvalues[i] < 0) { [EOL]             throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0); [EOL]         } [EOL]     } [EOL]     final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim); [EOL]     for (int v = 0; v < dim; v++) { [EOL]         final double[] evec = covMatDec.getEigenvector(v).toArray(); [EOL]         covMatEigenvectors.setColumn(v, evec); [EOL]     } [EOL]     final RealMatrix tmpMatrix = covMatEigenvectors.transpose(); [EOL]     for (int row = 0; row < dim; row++) { [EOL]         final double factor = FastMath.sqrt(covMatEigenvalues[row]); [EOL]         for (int col = 0; col < dim; col++) { [EOL]             tmpMatrix.multiplyEntry(row, col, factor); [EOL]         } [EOL]     } [EOL]     samplingMatrix = covMatEigenvectors.multiply(tmpMatrix); [EOL] } <line_num>: 97,156
public double[] getMeans() { [EOL]     return MathArrays.copyOf(means); [EOL] } <line_num>: 163,165
public RealMatrix getCovariances() { [EOL]     return covarianceMatrix.copy(); [EOL] } <line_num>: 172,174
public double density(final double[] vals) throws DimensionMismatchException { [EOL]     final int dim = getDimension(); [EOL]     if (vals.length != dim) { [EOL]         throw new DimensionMismatchException(vals.length, dim); [EOL]     } [EOL]     return FastMath.pow(2 * FastMath.PI, -0.5 * dim) * FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); [EOL] } <line_num>: 177,186
public double[] getStandardDeviations() { [EOL]     final int dim = getDimension(); [EOL]     final double[] std = new double[dim]; [EOL]     final double[][] s = covarianceMatrix.getData(); [EOL]     for (int i = 0; i < dim; i++) { [EOL]         std[i] = FastMath.sqrt(s[i][i]); [EOL]     } [EOL]     return std; [EOL] } <line_num>: 194,202
@Override [EOL] public double[] sample() { [EOL]     final int dim = getDimension(); [EOL]     final double[] normalVals = new double[dim]; [EOL]     for (int i = 0; i < dim; i++) { [EOL]         normalVals[i] = random.nextGaussian(); [EOL]     } [EOL]     final double[] vals = samplingMatrix.operate(normalVals); [EOL]     for (int i = 0; i < dim; i++) { [EOL]         vals[i] += means[i]; [EOL]     } [EOL]     return vals; [EOL] } <line_num>: 205,221
private double getExponentTerm(final double[] values) { [EOL]     final double[] centered = new double[values.length]; [EOL]     for (int i = 0; i < centered.length; i++) { [EOL]         centered[i] = values[i] - getMeans()[i]; [EOL]     } [EOL]     final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); [EOL]     double sum = 0; [EOL]     for (int i = 0; i < preMultiplied.length; i++) { [EOL]         sum += preMultiplied[i] * centered[i]; [EOL]     } [EOL]     return FastMath.exp(-0.5 * sum); [EOL] } <line_num>: 229,240
