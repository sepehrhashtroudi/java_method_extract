public EnumeratedDistribution(final List<Pair<T, Double>> pmf) throws NotPositiveException, MathArithmeticException, NotFiniteNumberException, NotANumberException { [EOL]     this(new Well19937c(), pmf); [EOL] } <line_num>: 86,89
public EnumeratedDistribution(final RandomGenerator rng, final List<Pair<T, Double>> pmf) throws NotPositiveException, MathArithmeticException, NotFiniteNumberException, NotANumberException { [EOL]     random = rng; [EOL]     singletons = new ArrayList<T>(pmf.size()); [EOL]     final double[] probs = new double[pmf.size()]; [EOL]     for (int i = 0; i < pmf.size(); i++) { [EOL]         final Pair<T, Double> sample = pmf.get(i); [EOL]         singletons.add(sample.getKey()); [EOL]         final double p = sample.getValue(); [EOL]         if (p < 0) { [EOL]             throw new NotPositiveException(sample.getValue()); [EOL]         } [EOL]         if (Double.isInfinite(p)) { [EOL]             throw new NotFiniteNumberException(p); [EOL]         } [EOL]         if (Double.isNaN(p)) { [EOL]             throw new NotANumberException(); [EOL]         } [EOL]         probs[i] = p; [EOL]     } [EOL]     probabilities = MathArrays.normalizeArray(probs, 1.0); [EOL] } <line_num>: 103,127
public void reseedRandomGenerator(long seed) { [EOL]     random.setSeed(seed); [EOL] } <line_num>: 134,136
double probability(final T x) { [EOL]     double probability = 0; [EOL]     for (int i = 0; i < probabilities.length; i++) { [EOL]         if ((x == null && singletons.get(i) == null) || (x != null && x.equals(singletons.get(i)))) { [EOL]             probability += probabilities[i]; [EOL]         } [EOL]     } [EOL]     return probability; [EOL] } <line_num>: 150,161
public List<Pair<T, Double>> getPmf() { [EOL]     final List<Pair<T, Double>> samples = new ArrayList<Pair<T, Double>>(probabilities.length); [EOL]     for (int i = 0; i < probabilities.length; i++) { [EOL]         samples.add(new Pair<T, Double>(singletons.get(i), probabilities[i])); [EOL]     } [EOL]     return samples; [EOL] } <line_num>: 173,181
public T sample() { [EOL]     final double randomValue = random.nextDouble(); [EOL]     double sum = 0; [EOL]     for (int i = 0; i < probabilities.length; i++) { [EOL]         sum += probabilities[i]; [EOL]         if (randomValue < sum) { [EOL]             return singletons.get(i); [EOL]         } [EOL]     } [EOL]     return singletons.get(singletons.size() - 1); [EOL] } <line_num>: 188,203
public Object[] sample(int sampleSize) throws NotStrictlyPositiveException { [EOL]     if (sampleSize <= 0) { [EOL]         throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); [EOL]     } [EOL]     final Object[] out = new Object[sampleSize]; [EOL]     for (int i = 0; i < sampleSize; i++) { [EOL]         out[i] = sample(); [EOL]     } [EOL]     return out; [EOL] } <line_num>: 213,227
public T[] sample(int sampleSize, final T[] array) throws NotStrictlyPositiveException { [EOL]     if (sampleSize <= 0) { [EOL]         throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); [EOL]     } [EOL]     if (array == null) { [EOL]         throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY); [EOL]     } [EOL]     T[] out; [EOL]     if (array.length < sampleSize) { [EOL]         @SuppressWarnings("unchecked") [EOL]         final T[] unchecked = (T[]) Array.newInstance(array.getClass().getComponentType(), sampleSize); [EOL]         out = unchecked; [EOL]     } else { [EOL]         out = array; [EOL]     } [EOL]     for (int i = 0; i < sampleSize; i++) { [EOL]         out[i] = sample(); [EOL]     } [EOL]     return out; [EOL] } <line_num>: 242,266
