public KolmogorovSmirnovDistribution(int n) throws NotStrictlyPositiveException { [EOL]     if (n <= 0) { [EOL]         throw new NotStrictlyPositiveException(LocalizedFormats.NOT_POSITIVE_NUMBER_OF_SAMPLES, n); [EOL]     } [EOL]     this.n = n; [EOL] } <line_num>: 84,91
public double cdf(double d) throws MathArithmeticException { [EOL]     return this.cdf(d, false); [EOL] } <line_num>: 108,110
public double cdfExact(double d) throws MathArithmeticException { [EOL]     return this.cdf(d, true); [EOL] } <line_num>: 128,130
public double cdf(double d, boolean exact) throws MathArithmeticException { [EOL]     final double ninv = 1 / ((double) n); [EOL]     final double ninvhalf = 0.5 * ninv; [EOL]     if (d <= ninvhalf) { [EOL]         return 0; [EOL]     } else if (ninvhalf < d && d <= ninv) { [EOL]         double res = 1; [EOL]         double f = 2 * d - ninv; [EOL]         for (int i = 1; i <= n; ++i) { [EOL]             res *= i * f; [EOL]         } [EOL]         return res; [EOL]     } else if (1 - ninv <= d && d < 1) { [EOL]         return 1 - 2 * Math.pow(1 - d, n); [EOL]     } else if (1 <= d) { [EOL]         return 1; [EOL]     } [EOL]     return exact ? exactK(d) : roundedK(d); [EOL] } <line_num>: 149,180
private double exactK(double d) throws MathArithmeticException { [EOL]     final int k = (int) Math.ceil(n * d); [EOL]     final FieldMatrix<BigFraction> H = this.createH(d); [EOL]     final FieldMatrix<BigFraction> Hpower = H.power(n); [EOL]     BigFraction pFrac = Hpower.getEntry(k - 1, k - 1); [EOL]     for (int i = 1; i <= n; ++i) { [EOL]         pFrac = pFrac.multiply(i).divide(n); [EOL]     } [EOL]     return pFrac.bigDecimalValue(20, BigDecimal.ROUND_HALF_UP).doubleValue(); [EOL] } <line_num>: 194,213
private double roundedK(double d) throws MathArithmeticException { [EOL]     final int k = (int) Math.ceil(n * d); [EOL]     final FieldMatrix<BigFraction> HBigFraction = this.createH(d); [EOL]     final int m = HBigFraction.getRowDimension(); [EOL]     final RealMatrix H = new Array2DRowRealMatrix(m, m); [EOL]     for (int i = 0; i < m; ++i) { [EOL]         for (int j = 0; j < m; ++j) { [EOL]             H.setEntry(i, j, HBigFraction.getEntry(i, j).doubleValue()); [EOL]         } [EOL]     } [EOL]     final RealMatrix Hpower = H.power(n); [EOL]     double pFrac = Hpower.getEntry(k - 1, k - 1); [EOL]     for (int i = 1; i <= n; ++i) { [EOL]         pFrac *= (double) i / (double) n; [EOL]     } [EOL]     return pFrac; [EOL] } <line_num>: 226,253
private FieldMatrix<BigFraction> createH(double d) throws NumberIsTooLargeException, FractionConversionException { [EOL]     int k = (int) Math.ceil(n * d); [EOL]     int m = 2 * k - 1; [EOL]     double hDouble = k - n * d; [EOL]     if (hDouble >= 1) { [EOL]         throw new NumberIsTooLargeException(hDouble, 1.0, false); [EOL]     } [EOL]     BigFraction h = null; [EOL]     try { [EOL]         h = new BigFraction(hDouble, 1.0e-20, 10000); [EOL]     } catch (FractionConversionException e1) { [EOL]         try { [EOL]             h = new BigFraction(hDouble, 1.0e-10, 10000); [EOL]         } catch (FractionConversionException e2) { [EOL]             h = new BigFraction(hDouble, 1.0e-5, 10000); [EOL]         } [EOL]     } [EOL]     final BigFraction[][] Hdata = new BigFraction[m][m]; [EOL]     for (int i = 0; i < m; ++i) { [EOL]         for (int j = 0; j < m; ++j) { [EOL]             if (i - j + 1 < 0) { [EOL]                 Hdata[i][j] = BigFraction.ZERO; [EOL]             } else { [EOL]                 Hdata[i][j] = BigFraction.ONE; [EOL]             } [EOL]         } [EOL]     } [EOL]     final BigFraction[] hPowers = new BigFraction[m]; [EOL]     hPowers[0] = h; [EOL]     for (int i = 1; i < m; ++i) { [EOL]         hPowers[i] = h.multiply(hPowers[i - 1]); [EOL]     } [EOL]     for (int i = 0; i < m; ++i) { [EOL]         Hdata[i][0] = Hdata[i][0].subtract(hPowers[i]); [EOL]         Hdata[m - 1][i] = Hdata[m - 1][i].subtract(hPowers[m - i - 1]); [EOL]     } [EOL]     if (h.compareTo(BigFraction.ONE_HALF) == 1) { [EOL]         Hdata[m - 1][0] = Hdata[m - 1][0].add(h.multiply(2).subtract(1).pow(m)); [EOL]     } [EOL]     for (int i = 0; i < m; ++i) { [EOL]         for (int j = 0; j < i + 1; ++j) { [EOL]             if (i - j + 1 > 0) { [EOL]                 for (int g = 2; g <= i - j + 1; ++g) { [EOL]                     Hdata[i][j] = Hdata[i][j].divide(g); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return new Array2DRowFieldMatrix<BigFraction>(BigFractionField.getInstance(), Hdata); [EOL] } <line_num>: 266,354
