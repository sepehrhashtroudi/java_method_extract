public FDistribution(double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom) throws NotStrictlyPositiveException { [EOL]     this(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY); [EOL] } <line_num>: 62,67
public FDistribution(double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom, double inverseCumAccuracy) throws NotStrictlyPositiveException { [EOL]     this(new Well19937c(), numeratorDegreesOfFreedom, denominatorDegreesOfFreedom, inverseCumAccuracy); [EOL] } <line_num>: 82,88
public FDistribution(RandomGenerator rng, double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom, double inverseCumAccuracy) throws NotStrictlyPositiveException { [EOL]     super(rng); [EOL]     if (numeratorDegreesOfFreedom <= 0) { [EOL]         throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM, numeratorDegreesOfFreedom); [EOL]     } [EOL]     if (denominatorDegreesOfFreedom <= 0) { [EOL]         throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM, denominatorDegreesOfFreedom); [EOL]     } [EOL]     this.numeratorDegreesOfFreedom = numeratorDegreesOfFreedom; [EOL]     this.denominatorDegreesOfFreedom = denominatorDegreesOfFreedom; [EOL]     solverAbsoluteAccuracy = inverseCumAccuracy; [EOL] } <line_num>: 103,121
public double density(double x) { [EOL]     final double nhalf = numeratorDegreesOfFreedom / 2; [EOL]     final double mhalf = denominatorDegreesOfFreedom / 2; [EOL]     final double logx = FastMath.log(x); [EOL]     final double logn = FastMath.log(numeratorDegreesOfFreedom); [EOL]     final double logm = FastMath.log(denominatorDegreesOfFreedom); [EOL]     final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom); [EOL]     return FastMath.exp(nhalf * logn + nhalf * logx - logx + mhalf * logm - nhalf * lognxm - mhalf * lognxm - Beta.logBeta(nhalf, mhalf)); [EOL] } <line_num>: 128,139
public double cumulativeProbability(double x) { [EOL]     double ret; [EOL]     if (x <= 0) { [EOL]         ret = 0; [EOL]     } else { [EOL]         double n = numeratorDegreesOfFreedom; [EOL]         double m = denominatorDegreesOfFreedom; [EOL]         ret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n, 0.5 * m); [EOL]     } [EOL]     return ret; [EOL] } <line_num>: 152,165
public double getNumeratorDegreesOfFreedom() { [EOL]     return numeratorDegreesOfFreedom; [EOL] } <line_num>: 172,174
public double getDenominatorDegreesOfFreedom() { [EOL]     return denominatorDegreesOfFreedom; [EOL] } <line_num>: 181,183
@Override [EOL] protected double getSolverAbsoluteAccuracy() { [EOL]     return solverAbsoluteAccuracy; [EOL] } <line_num>: 186,189
public double getNumericalMean() { [EOL]     final double denominatorDF = getDenominatorDegreesOfFreedom(); [EOL]     if (denominatorDF > 2) { [EOL]         return denominatorDF / (denominatorDF - 2); [EOL]     } [EOL]     return Double.NaN; [EOL] } <line_num>: 200,208
public double getNumericalVariance() { [EOL]     if (!numericalVarianceIsCalculated) { [EOL]         numericalVariance = calculateNumericalVariance(); [EOL]         numericalVarianceIsCalculated = true; [EOL]     } [EOL]     return numericalVariance; [EOL] } <line_num>: 223,229
protected double calculateNumericalVariance() { [EOL]     final double denominatorDF = getDenominatorDegreesOfFreedom(); [EOL]     if (denominatorDF > 4) { [EOL]         final double numeratorDF = getNumeratorDegreesOfFreedom(); [EOL]         final double denomDFMinusTwo = denominatorDF - 2; [EOL]         return (2 * (denominatorDF * denominatorDF) * (numeratorDF + denominatorDF - 2)) / ((numeratorDF * (denomDFMinusTwo * denomDFMinusTwo) * (denominatorDF - 4))); [EOL]     } [EOL]     return Double.NaN; [EOL] } <line_num>: 236,248
public double getSupportLowerBound() { [EOL]     return 0; [EOL] } <line_num>: 257,259
public double getSupportUpperBound() { [EOL]     return Double.POSITIVE_INFINITY; [EOL] } <line_num>: 269,271
public boolean isSupportLowerBoundInclusive() { [EOL]     return false; [EOL] } <line_num>: 274,276
public boolean isSupportUpperBoundInclusive() { [EOL]     return false; [EOL] } <line_num>: 279,281
public boolean isSupportConnected() { [EOL]     return true; [EOL] } <line_num>: 290,292
