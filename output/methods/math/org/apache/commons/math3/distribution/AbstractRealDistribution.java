@Deprecated [EOL] protected AbstractRealDistribution() { [EOL]     random = null; [EOL] } <line_num>: 66,71
protected AbstractRealDistribution(RandomGenerator rng) { [EOL]     random = rng; [EOL] } <line_num>: 76,78
@Deprecated [EOL] public double cumulativeProbability(double x0, double x1) throws NumberIsTooLargeException { [EOL]     return probability(x0, x1); [EOL] } <line_num>: 89,92
public double probability(double x0, double x1) { [EOL]     if (x0 > x1) { [EOL]         throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, x0, x1, true); [EOL]     } [EOL]     return cumulativeProbability(x1) - cumulativeProbability(x0); [EOL] } <line_num>: 110,117
public double value(final double x) { [EOL]     return cumulativeProbability(x) - p; [EOL] } <line_num>: 201,203
public double inverseCumulativeProbability(final double p) throws OutOfRangeException { [EOL]     if (p < 0.0 || p > 1.0) { [EOL]         throw new OutOfRangeException(p, 0, 1); [EOL]     } [EOL]     double lowerBound = getSupportLowerBound(); [EOL]     if (p == 0.0) { [EOL]         return lowerBound; [EOL]     } [EOL]     double upperBound = getSupportUpperBound(); [EOL]     if (p == 1.0) { [EOL]         return upperBound; [EOL]     } [EOL]     final double mu = getNumericalMean(); [EOL]     final double sig = FastMath.sqrt(getNumericalVariance()); [EOL]     final boolean chebyshevApplies; [EOL]     chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sig) || Double.isNaN(sig)); [EOL]     if (lowerBound == Double.NEGATIVE_INFINITY) { [EOL]         if (chebyshevApplies) { [EOL]             lowerBound = mu - sig * FastMath.sqrt((1. - p) / p); [EOL]         } else { [EOL]             lowerBound = -1.0; [EOL]             while (cumulativeProbability(lowerBound) >= p) { [EOL]                 lowerBound *= 2.0; [EOL]             } [EOL]         } [EOL]     } [EOL]     if (upperBound == Double.POSITIVE_INFINITY) { [EOL]         if (chebyshevApplies) { [EOL]             upperBound = mu + sig * FastMath.sqrt(p / (1. - p)); [EOL]         } else { [EOL]             upperBound = 1.0; [EOL]             while (cumulativeProbability(upperBound) < p) { [EOL]                 upperBound *= 2.0; [EOL]             } [EOL]         } [EOL]     } [EOL]     final UnivariateFunction toSolve = new UnivariateFunction() { [EOL]  [EOL]         public double value(final double x) { [EOL]             return cumulativeProbability(x) - p; [EOL]         } [EOL]     }; [EOL]     double x = UnivariateSolverUtils.solve(toSolve, lowerBound, upperBound, getSolverAbsoluteAccuracy()); [EOL]     if (!isSupportConnected()) { [EOL]         final double dx = getSolverAbsoluteAccuracy(); [EOL]         if (x - dx >= getSupportLowerBound()) { [EOL]             double px = cumulativeProbability(x); [EOL]             if (cumulativeProbability(x - dx) == px) { [EOL]                 upperBound = x; [EOL]                 while (upperBound - lowerBound > dx) { [EOL]                     final double midPoint = 0.5 * (lowerBound + upperBound); [EOL]                     if (cumulativeProbability(midPoint) < px) { [EOL]                         lowerBound = midPoint; [EOL]                     } else { [EOL]                         upperBound = midPoint; [EOL]                     } [EOL]                 } [EOL]                 return upperBound; [EOL]             } [EOL]         } [EOL]     } [EOL]     return x; [EOL] } <line_num>: 128,231
protected double getSolverAbsoluteAccuracy() { [EOL]     return solverAbsoluteAccuracy; [EOL] } <line_num>: 240,242
public void reseedRandomGenerator(long seed) { [EOL]     random.setSeed(seed); [EOL]     randomData.reSeed(seed); [EOL] } <line_num>: 245,248
public double sample() { [EOL]     return inverseCumulativeProbability(random.nextDouble()); [EOL] } <line_num>: 258,260
public double[] sample(int sampleSize) { [EOL]     if (sampleSize <= 0) { [EOL]         throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); [EOL]     } [EOL]     double[] out = new double[sampleSize]; [EOL]     for (int i = 0; i < sampleSize; i++) { [EOL]         out[i] = sample(); [EOL]     } [EOL]     return out; [EOL] } <line_num>: 268,278
public double probability(double x) { [EOL]     return 0d; [EOL] } <line_num>: 286,288
