private Primes() { [EOL] } <line_num>: 41,42
public static boolean isPrime(int n) { [EOL]     if (n < 2) { [EOL]         return false; [EOL]     } [EOL]     for (int p : SmallPrimes.PRIMES) { [EOL]         if (0 == (n % p)) { [EOL]             return n == p; [EOL]         } [EOL]     } [EOL]     return SmallPrimes.millerRabinPrimeTest(n); [EOL] } <line_num>: 54,65
public static int nextPrime(int n) { [EOL]     if (n < 0) { [EOL]         throw new MathIllegalArgumentException(LocalizedFormats.NUMBER_TOO_SMALL, n, 0); [EOL]     } [EOL]     if (n == 2) { [EOL]         return 2; [EOL]     } [EOL]     n = n | 1; [EOL]     if (n == 1) { [EOL]         return 2; [EOL]     } [EOL]     if (isPrime(n)) { [EOL]         return n; [EOL]     } [EOL]     final int rem = n % 3; [EOL]     if (0 == rem) { [EOL]         n += 2; [EOL]     } else if (1 == rem) { [EOL]         n += 4; [EOL]     } [EOL]     while (true) { [EOL]         if (isPrime(n)) { [EOL]             return n; [EOL]         } [EOL]         n += 2; [EOL]         if (isPrime(n)) { [EOL]             return n; [EOL]         } [EOL]         n += 4; [EOL]     } [EOL] } <line_num>: 74,109
public static List<Integer> primeFactors(int n) { [EOL]     if (n < 2) { [EOL]         throw new MathIllegalArgumentException(LocalizedFormats.NUMBER_TOO_SMALL, n, 2); [EOL]     } [EOL]     return SmallPrimes.trialDivision(n); [EOL] } <line_num>: 118,128
