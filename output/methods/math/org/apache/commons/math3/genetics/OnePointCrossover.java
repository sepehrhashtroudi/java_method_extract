@SuppressWarnings("unchecked") [EOL] public ChromosomePair crossover(final Chromosome first, final Chromosome second) throws DimensionMismatchException, MathIllegalArgumentException { [EOL]     if (!(first instanceof AbstractListChromosome<?> && second instanceof AbstractListChromosome<?>)) { [EOL]         throw new MathIllegalArgumentException(LocalizedFormats.INVALID_FIXED_LENGTH_CHROMOSOME); [EOL]     } [EOL]     return crossover((AbstractListChromosome<T>) first, (AbstractListChromosome<T>) second); [EOL] } <line_num>: 78,86
private ChromosomePair crossover(final AbstractListChromosome<T> first, final AbstractListChromosome<T> second) throws DimensionMismatchException { [EOL]     final int length = first.getLength(); [EOL]     if (length != second.getLength()) { [EOL]         throw new DimensionMismatchException(second.getLength(), length); [EOL]     } [EOL]     final List<T> parent1Rep = first.getRepresentation(); [EOL]     final List<T> parent2Rep = second.getRepresentation(); [EOL]     final ArrayList<T> child1Rep = new ArrayList<T>(first.getLength()); [EOL]     final ArrayList<T> child2Rep = new ArrayList<T>(second.getLength()); [EOL]     final int crossoverIndex = 1 + (GeneticAlgorithm.getRandomGenerator().nextInt(length - 2)); [EOL]     for (int i = 0; i < crossoverIndex; i++) { [EOL]         child1Rep.add(parent1Rep.get(i)); [EOL]         child2Rep.add(parent2Rep.get(i)); [EOL]     } [EOL]     for (int i = crossoverIndex; i < length; i++) { [EOL]         child1Rep.add(parent2Rep.get(i)); [EOL]         child2Rep.add(parent1Rep.get(i)); [EOL]     } [EOL]     return new ChromosomePair(first.newFixedLengthChromosome(child1Rep), second.newFixedLengthChromosome(child2Rep)); [EOL] } <line_num>: 97,127
