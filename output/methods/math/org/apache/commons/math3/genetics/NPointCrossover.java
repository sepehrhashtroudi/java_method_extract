public NPointCrossover(final int crossoverPoints) throws NotStrictlyPositiveException { [EOL]     if (crossoverPoints <= 0) { [EOL]         throw new NotStrictlyPositiveException(crossoverPoints); [EOL]     } [EOL]     this.crossoverPoints = crossoverPoints; [EOL] } <line_num>: 67,72
public int getCrossoverPoints() { [EOL]     return crossoverPoints; [EOL] } <line_num>: 79,81
@SuppressWarnings("unchecked") [EOL] public ChromosomePair crossover(final Chromosome first, final Chromosome second) throws DimensionMismatchException, MathIllegalArgumentException { [EOL]     if (!(first instanceof AbstractListChromosome<?> && second instanceof AbstractListChromosome<?>)) { [EOL]         throw new MathIllegalArgumentException(LocalizedFormats.INVALID_FIXED_LENGTH_CHROMOSOME); [EOL]     } [EOL]     return mate((AbstractListChromosome<T>) first, (AbstractListChromosome<T>) second); [EOL] } <line_num>: 107,115
private ChromosomePair mate(final AbstractListChromosome<T> first, final AbstractListChromosome<T> second) throws DimensionMismatchException, NumberIsTooLargeException { [EOL]     final int length = first.getLength(); [EOL]     if (length != second.getLength()) { [EOL]         throw new DimensionMismatchException(second.getLength(), length); [EOL]     } [EOL]     if (crossoverPoints >= length) { [EOL]         throw new NumberIsTooLargeException(crossoverPoints, length, false); [EOL]     } [EOL]     final List<T> parent1Rep = first.getRepresentation(); [EOL]     final List<T> parent2Rep = second.getRepresentation(); [EOL]     final ArrayList<T> child1Rep = new ArrayList<T>(first.getLength()); [EOL]     final ArrayList<T> child2Rep = new ArrayList<T>(second.getLength()); [EOL]     final RandomGenerator random = GeneticAlgorithm.getRandomGenerator(); [EOL]     ArrayList<T> c1 = child1Rep; [EOL]     ArrayList<T> c2 = child2Rep; [EOL]     int remainingPoints = crossoverPoints; [EOL]     int lastIndex = 0; [EOL]     for (int i = 0; i < crossoverPoints; i++, remainingPoints--) { [EOL]         final int crossoverIndex = 1 + lastIndex + random.nextInt(length - lastIndex - remainingPoints); [EOL]         for (int j = lastIndex; j < crossoverIndex; j++) { [EOL]             c1.add(parent1Rep.get(j)); [EOL]             c2.add(parent2Rep.get(j)); [EOL]         } [EOL]         ArrayList<T> tmp = c1; [EOL]         c1 = c2; [EOL]         c2 = tmp; [EOL]         lastIndex = crossoverIndex; [EOL]     } [EOL]     for (int j = lastIndex; j < length; j++) { [EOL]         c1.add(parent1Rep.get(j)); [EOL]         c2.add(parent2Rep.get(j)); [EOL]     } [EOL]     return new ChromosomePair(first.newFixedLengthChromosome(child1Rep), second.newFixedLengthChromosome(child2Rep)); [EOL] } <line_num>: 126,178
