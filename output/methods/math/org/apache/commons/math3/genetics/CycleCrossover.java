public CycleCrossover() { [EOL]     this(false); [EOL] } <line_num>: 74,76
public CycleCrossover(final boolean randomStart) { [EOL]     this.randomStart = randomStart; [EOL] } <line_num>: 83,85
public boolean isRandomStart() { [EOL]     return randomStart; [EOL] } <line_num>: 92,94
@SuppressWarnings("unchecked") [EOL] public ChromosomePair crossover(final Chromosome first, final Chromosome second) throws DimensionMismatchException, MathIllegalArgumentException { [EOL]     if (!(first instanceof AbstractListChromosome<?> && second instanceof AbstractListChromosome<?>)) { [EOL]         throw new MathIllegalArgumentException(LocalizedFormats.INVALID_FIXED_LENGTH_CHROMOSOME); [EOL]     } [EOL]     return mate((AbstractListChromosome<T>) first, (AbstractListChromosome<T>) second); [EOL] } <line_num>: 102,110
protected ChromosomePair mate(final AbstractListChromosome<T> first, final AbstractListChromosome<T> second) throws DimensionMismatchException { [EOL]     final int length = first.getLength(); [EOL]     if (length != second.getLength()) { [EOL]         throw new DimensionMismatchException(second.getLength(), length); [EOL]     } [EOL]     final List<T> parent1Rep = first.getRepresentation(); [EOL]     final List<T> parent2Rep = second.getRepresentation(); [EOL]     final List<T> child1Rep = new ArrayList<T>(second.getRepresentation()); [EOL]     final List<T> child2Rep = new ArrayList<T>(first.getRepresentation()); [EOL]     final Set<Integer> visitedIndices = new HashSet<Integer>(length); [EOL]     final List<Integer> indices = new ArrayList<Integer>(length); [EOL]     int idx = randomStart ? GeneticAlgorithm.getRandomGenerator().nextInt(length) : 0; [EOL]     int cycle = 1; [EOL]     while (visitedIndices.size() < length) { [EOL]         indices.add(idx); [EOL]         T item = parent2Rep.get(idx); [EOL]         idx = parent1Rep.indexOf(item); [EOL]         while (idx != indices.get(0)) { [EOL]             indices.add(idx); [EOL]             item = parent2Rep.get(idx); [EOL]             idx = parent1Rep.indexOf(item); [EOL]         } [EOL]         if (cycle++ % 2 != 0) { [EOL]             for (int i : indices) { [EOL]                 T tmp = child1Rep.get(i); [EOL]                 child1Rep.set(i, child2Rep.get(i)); [EOL]                 child2Rep.set(i, tmp); [EOL]             } [EOL]         } [EOL]         visitedIndices.addAll(indices); [EOL]         idx = (indices.get(0) + 1) % length; [EOL]         while (visitedIndices.contains(idx) && visitedIndices.size() < length) { [EOL]             idx++; [EOL]             if (idx >= length) { [EOL]                 idx = 0; [EOL]             } [EOL]         } [EOL]         indices.clear(); [EOL]     } [EOL]     return new ChromosomePair(first.newFixedLengthChromosome(child1Rep), second.newFixedLengthChromosome(child2Rep)); [EOL] } <line_num>: 120,182
