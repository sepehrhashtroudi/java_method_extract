public RandomKey(final List<Double> representation) throws InvalidRepresentationException { [EOL]     super(representation); [EOL]     List<Double> sortedRepr = new ArrayList<Double>(getRepresentation()); [EOL]     Collections.sort(sortedRepr); [EOL]     sortedRepresentation = Collections.unmodifiableList(sortedRepr); [EOL]     baseSeqPermutation = Collections.unmodifiableList(decodeGeneric(baseSequence(getLength()), getRepresentation(), sortedRepresentation)); [EOL] } <line_num>: 73,83
public RandomKey(final Double[] representation) throws InvalidRepresentationException { [EOL]     this(Arrays.asList(representation)); [EOL] } <line_num>: 91,93
public List<T> decode(final List<T> sequence) { [EOL]     return decodeGeneric(sequence, getRepresentation(), sortedRepresentation); [EOL] } <line_num>: 98,100
private static <S> List<S> decodeGeneric(final List<S> sequence, List<Double> representation, final List<Double> sortedRepr) throws DimensionMismatchException { [EOL]     int l = sequence.size(); [EOL]     if (representation.size() != l) { [EOL]         throw new DimensionMismatchException(representation.size(), l); [EOL]     } [EOL]     if (sortedRepr.size() != l) { [EOL]         throw new DimensionMismatchException(sortedRepr.size(), l); [EOL]     } [EOL]     List<Double> reprCopy = new ArrayList<Double>(representation); [EOL]     List<S> res = new ArrayList<S>(l); [EOL]     for (int i = 0; i < l; i++) { [EOL]         int index = reprCopy.indexOf(sortedRepr.get(i)); [EOL]         res.add(sequence.get(index)); [EOL]         reprCopy.set(index, null); [EOL]     } [EOL]     return res; [EOL] } <line_num>: 114,139
@Override [EOL] protected boolean isSame(final Chromosome another) { [EOL]     if (!(another instanceof RandomKey<?>)) { [EOL]         return false; [EOL]     } [EOL]     RandomKey<?> anotherRk = (RandomKey<?>) another; [EOL]     if (getLength() != anotherRk.getLength()) { [EOL]         return false; [EOL]     } [EOL]     List<Integer> thisPerm = this.baseSeqPermutation; [EOL]     List<Integer> anotherPerm = anotherRk.baseSeqPermutation; [EOL]     for (int i = 0; i < getLength(); i++) { [EOL]         if (thisPerm.get(i) != anotherPerm.get(i)) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 148,172
@Override [EOL] protected void checkValidity(final List<Double> chromosomeRepresentation) throws InvalidRepresentationException { [EOL]     for (double val : chromosomeRepresentation) { [EOL]         if (val < 0 || val > 1) { [EOL]             throw new InvalidRepresentationException(LocalizedFormats.OUT_OF_RANGE_SIMPLE, val, 0, 1); [EOL]         } [EOL]     } [EOL] } <line_num>: 177,187
public static final List<Double> randomPermutation(final int l) { [EOL]     List<Double> repr = new ArrayList<Double>(l); [EOL]     for (int i = 0; i < l; i++) { [EOL]         repr.add(GeneticAlgorithm.getRandomGenerator().nextDouble()); [EOL]     } [EOL]     return repr; [EOL] } <line_num>: 197,203
public static final List<Double> identityPermutation(final int l) { [EOL]     List<Double> repr = new ArrayList<Double>(l); [EOL]     for (int i = 0; i < l; i++) { [EOL]         repr.add((double) i / l); [EOL]     } [EOL]     return repr; [EOL] } <line_num>: 212,218
public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator) { [EOL]     List<S> sortedData = new ArrayList<S>(data); [EOL]     Collections.sort(sortedData, comparator); [EOL]     return inducedPermutation(data, sortedData); [EOL] } <line_num>: 233,239
public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException { [EOL]     if (originalData.size() != permutedData.size()) { [EOL]         throw new DimensionMismatchException(permutedData.size(), originalData.size()); [EOL]     } [EOL]     int l = originalData.size(); [EOL]     List<S> origDataCopy = new ArrayList<S>(originalData); [EOL]     Double[] res = new Double[l]; [EOL]     for (int i = 0; i < l; i++) { [EOL]         int index = origDataCopy.indexOf(permutedData.get(i)); [EOL]         if (index == -1) { [EOL]             throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA); [EOL]         } [EOL]         res[index] = (double) i / l; [EOL]         origDataCopy.set(index, null); [EOL]     } [EOL]     return Arrays.asList(res); [EOL] } <line_num>: 258,279
@Override [EOL] public String toString() { [EOL]     return String.format("(f=%s pi=(%s))", getFitness(), baseSeqPermutation); [EOL] } <line_num>: 281,284
private static List<Integer> baseSequence(final int l) { [EOL]     List<Integer> baseSequence = new ArrayList<Integer>(l); [EOL]     for (int i = 0; i < l; i++) { [EOL]         baseSequence.add(i); [EOL]     } [EOL]     return baseSequence; [EOL] } <line_num>: 292,298
