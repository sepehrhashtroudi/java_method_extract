public Fraction(double value) throws FractionConversionException { [EOL]     this(value, DEFAULT_EPSILON, 100); [EOL] } <line_num>: 101,103
public Fraction(double value, double epsilon, int maxIterations) throws FractionConversionException { [EOL]     this(value, epsilon, Integer.MAX_VALUE, maxIterations); [EOL] } <line_num>: 121,125
public Fraction(double value, int maxDenominator) throws FractionConversionException { [EOL]     this(value, 0, maxDenominator, 100); [EOL] } <line_num>: 141,145
private Fraction(double value, double epsilon, int maxDenominator, int maxIterations) throws FractionConversionException { [EOL]     long overflow = Integer.MAX_VALUE; [EOL]     double r0 = value; [EOL]     long a0 = (long) FastMath.floor(r0); [EOL]     if (FastMath.abs(a0) > overflow) { [EOL]         throw new FractionConversionException(value, a0, 1l); [EOL]     } [EOL]     if (FastMath.abs(a0 - value) < epsilon) { [EOL]         this.numerator = (int) a0; [EOL]         this.denominator = 1; [EOL]         return; [EOL]     } [EOL]     long p0 = 1; [EOL]     long q0 = 0; [EOL]     long p1 = a0; [EOL]     long q1 = 1; [EOL]     long p2 = 0; [EOL]     long q2 = 1; [EOL]     int n = 0; [EOL]     boolean stop = false; [EOL]     do { [EOL]         ++n; [EOL]         double r1 = 1.0 / (r0 - a0); [EOL]         long a1 = (long) FastMath.floor(r1); [EOL]         p2 = (a1 * p1) + p0; [EOL]         q2 = (a1 * q1) + q0; [EOL]         if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) { [EOL]             if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) { [EOL]                 break; [EOL]             } [EOL]             throw new FractionConversionException(value, p2, q2); [EOL]         } [EOL]         double convergent = (double) p2 / (double) q2; [EOL]         if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { [EOL]             p0 = p1; [EOL]             p1 = p2; [EOL]             q0 = q1; [EOL]             q1 = q2; [EOL]             a0 = a1; [EOL]             r0 = r1; [EOL]         } else { [EOL]             stop = true; [EOL]         } [EOL]     } while (!stop); [EOL]     if (n >= maxIterations) { [EOL]         throw new FractionConversionException(value, maxIterations); [EOL]     } [EOL]     if (q2 < maxDenominator) { [EOL]         this.numerator = (int) p2; [EOL]         this.denominator = (int) q2; [EOL]     } else { [EOL]         this.numerator = (int) p1; [EOL]         this.denominator = (int) q1; [EOL]     } [EOL] } <line_num>: 178,246
public Fraction(int num) { [EOL]     this(num, 1); [EOL] } <line_num>: 253,255
public Fraction(int num, int den) { [EOL]     if (den == 0) { [EOL]         throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, num, den); [EOL]     } [EOL]     if (den < 0) { [EOL]         if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) { [EOL]             throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, num, den); [EOL]         } [EOL]         num = -num; [EOL]         den = -den; [EOL]     } [EOL]     final int d = ArithmeticUtils.gcd(num, den); [EOL]     if (d > 1) { [EOL]         num /= d; [EOL]         den /= d; [EOL]     } [EOL]     if (den < 0) { [EOL]         num = -num; [EOL]         den = -den; [EOL]     } [EOL]     this.numerator = num; [EOL]     this.denominator = den; [EOL] } <line_num>: 264,292
public Fraction abs() { [EOL]     Fraction ret; [EOL]     if (numerator >= 0) { [EOL]         ret = this; [EOL]     } else { [EOL]         ret = negate(); [EOL]     } [EOL]     return ret; [EOL] } <line_num>: 298,306
public int compareTo(Fraction object) { [EOL]     long nOd = ((long) numerator) * object.denominator; [EOL]     long dOn = ((long) denominator) * object.numerator; [EOL]     return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0); [EOL] } <line_num>: 314,318
@Override [EOL] public double doubleValue() { [EOL]     return (double) numerator / (double) denominator; [EOL] } <line_num>: 325,328
@Override [EOL] public boolean equals(Object other) { [EOL]     if (this == other) { [EOL]         return true; [EOL]     } [EOL]     if (other instanceof Fraction) { [EOL]         Fraction rhs = (Fraction) other; [EOL]         return (numerator == rhs.numerator) && (denominator == rhs.denominator); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 339,352
@Override [EOL] public float floatValue() { [EOL]     return (float) doubleValue(); [EOL] } <line_num>: 359,362
public int getDenominator() { [EOL]     return denominator; [EOL] } <line_num>: 368,370
public int getNumerator() { [EOL]     return numerator; [EOL] } <line_num>: 376,378
@Override [EOL] public int hashCode() { [EOL]     return 37 * (37 * 17 + numerator) + denominator; [EOL] } <line_num>: 384,387
@Override [EOL] public int intValue() { [EOL]     return (int) doubleValue(); [EOL] } <line_num>: 394,397
@Override [EOL] public long longValue() { [EOL]     return (long) doubleValue(); [EOL] } <line_num>: 404,407
public Fraction negate() { [EOL]     if (numerator == Integer.MIN_VALUE) { [EOL]         throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator); [EOL]     } [EOL]     return new Fraction(-numerator, denominator); [EOL] } <line_num>: 413,418
public Fraction reciprocal() { [EOL]     return new Fraction(denominator, numerator); [EOL] } <line_num>: 424,426
public Fraction add(Fraction fraction) { [EOL]     return addSub(fraction, true); [EOL] } <line_num>: 438,440
public Fraction add(final int i) { [EOL]     return new Fraction(numerator + i * denominator, denominator); [EOL] } <line_num>: 447,449
public Fraction subtract(Fraction fraction) { [EOL]     return addSub(fraction, false); [EOL] } <line_num>: 461,463
public Fraction subtract(final int i) { [EOL]     return new Fraction(numerator - i * denominator, denominator); [EOL] } <line_num>: 470,472
private Fraction addSub(Fraction fraction, boolean isAdd) { [EOL]     if (fraction == null) { [EOL]         throw new NullArgumentException(LocalizedFormats.FRACTION); [EOL]     } [EOL]     if (numerator == 0) { [EOL]         return isAdd ? fraction : fraction.negate(); [EOL]     } [EOL]     if (fraction.numerator == 0) { [EOL]         return this; [EOL]     } [EOL]     int d1 = ArithmeticUtils.gcd(denominator, fraction.denominator); [EOL]     if (d1 == 1) { [EOL]         int uvp = ArithmeticUtils.mulAndCheck(numerator, fraction.denominator); [EOL]         int upv = ArithmeticUtils.mulAndCheck(fraction.numerator, denominator); [EOL]         return new Fraction(isAdd ? ArithmeticUtils.addAndCheck(uvp, upv) : ArithmeticUtils.subAndCheck(uvp, upv), ArithmeticUtils.mulAndCheck(denominator, fraction.denominator)); [EOL]     } [EOL]     BigInteger uvp = BigInteger.valueOf(numerator).multiply(BigInteger.valueOf(fraction.denominator / d1)); [EOL]     BigInteger upv = BigInteger.valueOf(fraction.numerator).multiply(BigInteger.valueOf(denominator / d1)); [EOL]     BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv); [EOL]     int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue(); [EOL]     int d2 = (tmodd1 == 0) ? d1 : ArithmeticUtils.gcd(tmodd1, d1); [EOL]     BigInteger w = t.divide(BigInteger.valueOf(d2)); [EOL]     if (w.bitLength() > 31) { [EOL]         throw new MathArithmeticException(LocalizedFormats.NUMERATOR_OVERFLOW_AFTER_MULTIPLY, w); [EOL]     } [EOL]     return new Fraction(w.intValue(), ArithmeticUtils.mulAndCheck(denominator / d1, fraction.denominator / d2)); [EOL] } <line_num>: 484,529
public Fraction multiply(Fraction fraction) { [EOL]     if (fraction == null) { [EOL]         throw new NullArgumentException(LocalizedFormats.FRACTION); [EOL]     } [EOL]     if (numerator == 0 || fraction.numerator == 0) { [EOL]         return ZERO; [EOL]     } [EOL]     int d1 = ArithmeticUtils.gcd(numerator, fraction.denominator); [EOL]     int d2 = ArithmeticUtils.gcd(fraction.numerator, denominator); [EOL]     return getReducedFraction(ArithmeticUtils.mulAndCheck(numerator / d1, fraction.numerator / d2), ArithmeticUtils.mulAndCheck(denominator / d2, fraction.denominator / d1)); [EOL] } <line_num>: 541,555
public Fraction multiply(final int i) { [EOL]     return new Fraction(numerator * i, denominator); [EOL] } <line_num>: 562,564
public Fraction divide(Fraction fraction) { [EOL]     if (fraction == null) { [EOL]         throw new NullArgumentException(LocalizedFormats.FRACTION); [EOL]     } [EOL]     if (fraction.numerator == 0) { [EOL]         throw new MathArithmeticException(LocalizedFormats.ZERO_FRACTION_TO_DIVIDE_BY, fraction.numerator, fraction.denominator); [EOL]     } [EOL]     return multiply(fraction.reciprocal()); [EOL] } <line_num>: 576,585
public Fraction divide(final int i) { [EOL]     return new Fraction(numerator, denominator * i); [EOL] } <line_num>: 592,594
public double percentageValue() { [EOL]     return 100 * doubleValue(); [EOL] } <line_num>: 604,606
public static Fraction getReducedFraction(int numerator, int denominator) { [EOL]     if (denominator == 0) { [EOL]         throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, numerator, denominator); [EOL]     } [EOL]     if (numerator == 0) { [EOL]         return ZERO; [EOL]     } [EOL]     if (denominator == Integer.MIN_VALUE && (numerator & 1) == 0) { [EOL]         numerator /= 2; [EOL]         denominator /= 2; [EOL]     } [EOL]     if (denominator < 0) { [EOL]         if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) { [EOL]             throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator); [EOL]         } [EOL]         numerator = -numerator; [EOL]         denominator = -denominator; [EOL]     } [EOL]     int gcd = ArithmeticUtils.gcd(numerator, denominator); [EOL]     numerator /= gcd; [EOL]     denominator /= gcd; [EOL]     return new Fraction(numerator, denominator); [EOL] } <line_num>: 619,645
@Override [EOL] public String toString() { [EOL]     String str = null; [EOL]     if (denominator == 1) { [EOL]         str = Integer.toString(numerator); [EOL]     } else if (numerator == 0) { [EOL]         str = "0"; [EOL]     } else { [EOL]         str = numerator + " / " + denominator; [EOL]     } [EOL]     return str; [EOL] } <line_num>: 656,667
public FractionField getField() { [EOL]     return FractionField.getInstance(); [EOL] } <line_num>: 670,672
