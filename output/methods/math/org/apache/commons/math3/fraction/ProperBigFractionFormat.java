public ProperBigFractionFormat() { [EOL]     this(getDefaultNumberFormat()); [EOL] } <line_num>: 50,52
public ProperBigFractionFormat(final NumberFormat format) { [EOL]     this(format, (NumberFormat) format.clone(), (NumberFormat) format.clone()); [EOL] } <line_num>: 60,62
public ProperBigFractionFormat(final NumberFormat wholeFormat, final NumberFormat numeratorFormat, final NumberFormat denominatorFormat) { [EOL]     super(numeratorFormat, denominatorFormat); [EOL]     setWholeFormat(wholeFormat); [EOL] } <line_num>: 71,76
@Override [EOL] public StringBuffer format(final BigFraction fraction, final StringBuffer toAppendTo, final FieldPosition pos) { [EOL]     pos.setBeginIndex(0); [EOL]     pos.setEndIndex(0); [EOL]     BigInteger num = fraction.getNumerator(); [EOL]     BigInteger den = fraction.getDenominator(); [EOL]     BigInteger whole = num.divide(den); [EOL]     num = num.remainder(den); [EOL]     if (!BigInteger.ZERO.equals(whole)) { [EOL]         getWholeFormat().format(whole, toAppendTo, pos); [EOL]         toAppendTo.append(' '); [EOL]         if (num.compareTo(BigInteger.ZERO) < 0) { [EOL]             num = num.negate(); [EOL]         } [EOL]     } [EOL]     getNumeratorFormat().format(num, toAppendTo, pos); [EOL]     toAppendTo.append(" / "); [EOL]     getDenominatorFormat().format(den, toAppendTo, pos); [EOL]     return toAppendTo; [EOL] } <line_num>: 88,112
public NumberFormat getWholeFormat() { [EOL]     return wholeFormat; [EOL] } <line_num>: 118,120
@Override [EOL] public BigFraction parse(final String source, final ParsePosition pos) { [EOL]     BigFraction ret = super.parse(source, pos); [EOL]     if (ret != null) { [EOL]         return ret; [EOL]     } [EOL]     final int initialIndex = pos.getIndex(); [EOL]     parseAndIgnoreWhitespace(source, pos); [EOL]     BigInteger whole = parseNextBigInteger(source, pos); [EOL]     if (whole == null) { [EOL]         pos.setIndex(initialIndex); [EOL]         return null; [EOL]     } [EOL]     parseAndIgnoreWhitespace(source, pos); [EOL]     BigInteger num = parseNextBigInteger(source, pos); [EOL]     if (num == null) { [EOL]         pos.setIndex(initialIndex); [EOL]         return null; [EOL]     } [EOL]     if (num.compareTo(BigInteger.ZERO) < 0) { [EOL]         pos.setIndex(initialIndex); [EOL]         return null; [EOL]     } [EOL]     final int startIndex = pos.getIndex(); [EOL]     final char c = parseNextCharacter(source, pos); [EOL]     switch(c) { [EOL]         case 0: [EOL]             return new BigFraction(num); [EOL]         case '/': [EOL]             break; [EOL]         default: [EOL]             pos.setIndex(initialIndex); [EOL]             pos.setErrorIndex(startIndex); [EOL]             return null; [EOL]     } [EOL]     parseAndIgnoreWhitespace(source, pos); [EOL]     final BigInteger den = parseNextBigInteger(source, pos); [EOL]     if (den == null) { [EOL]         pos.setIndex(initialIndex); [EOL]         return null; [EOL]     } [EOL]     if (den.compareTo(BigInteger.ZERO) < 0) { [EOL]         pos.setIndex(initialIndex); [EOL]         return null; [EOL]     } [EOL]     boolean wholeIsNeg = whole.compareTo(BigInteger.ZERO) < 0; [EOL]     if (wholeIsNeg) { [EOL]         whole = whole.negate(); [EOL]     } [EOL]     num = whole.multiply(den).add(num); [EOL]     if (wholeIsNeg) { [EOL]         num = num.negate(); [EOL]     } [EOL]     return new BigFraction(num, den); [EOL] } <line_num>: 134,226
public void setWholeFormat(final NumberFormat format) { [EOL]     if (format == null) { [EOL]         throw new NullArgumentException(LocalizedFormats.WHOLE_FORMAT); [EOL]     } [EOL]     this.wholeFormat = format; [EOL] } <line_num>: 233,238
