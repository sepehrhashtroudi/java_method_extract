public FieldHermiteInterpolator() { [EOL]     this.abscissae = new ArrayList<T>(); [EOL]     this.topDiagonal = new ArrayList<T[]>(); [EOL]     this.bottomDiagonal = new ArrayList<T[]>(); [EOL] } <line_num>: 64,68
public void addSamplePoint(final T x, final T[]... value) throws ZeroException, MathArithmeticException, DimensionMismatchException, NullArgumentException { [EOL]     MathUtils.checkNotNull(x); [EOL]     T factorial = x.getField().getOne(); [EOL]     for (int i = 0; i < value.length; ++i) { [EOL]         final T[] y = value[i].clone(); [EOL]         if (i > 1) { [EOL]             factorial = factorial.multiply(i); [EOL]             final T inv = factorial.reciprocal(); [EOL]             for (int j = 0; j < y.length; ++j) { [EOL]                 y[j] = y[j].multiply(inv); [EOL]             } [EOL]         } [EOL]         final int n = abscissae.size(); [EOL]         bottomDiagonal.add(n - i, y); [EOL]         T[] bottom0 = y; [EOL]         for (int j = i; j < n; ++j) { [EOL]             final T[] bottom1 = bottomDiagonal.get(n - (j + 1)); [EOL]             if (x.equals(abscissae.get(n - (j + 1)))) { [EOL]                 throw new ZeroException(LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x); [EOL]             } [EOL]             final T inv = x.subtract(abscissae.get(n - (j + 1))).reciprocal(); [EOL]             for (int k = 0; k < y.length; ++k) { [EOL]                 bottom1[k] = inv.multiply(bottom0[k].subtract(bottom1[k])); [EOL]             } [EOL]             bottom0 = bottom1; [EOL]         } [EOL]         topDiagonal.add(bottom0.clone()); [EOL]         abscissae.add(x); [EOL]     } [EOL] } <line_num>: 91,132
public T[] value(T x) throws NoDataException, NullArgumentException { [EOL]     MathUtils.checkNotNull(x); [EOL]     if (abscissae.isEmpty()) { [EOL]         throw new NoDataException(LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE); [EOL]     } [EOL]     final T[] value = MathArrays.buildArray(x.getField(), topDiagonal.get(0).length); [EOL]     T valueCoeff = x.getField().getOne(); [EOL]     for (int i = 0; i < topDiagonal.size(); ++i) { [EOL]         T[] dividedDifference = topDiagonal.get(i); [EOL]         for (int k = 0; k < value.length; ++k) { [EOL]             value[k] = value[k].add(dividedDifference[k].multiply(valueCoeff)); [EOL]         } [EOL]         final T deltaX = x.subtract(abscissae.get(i)); [EOL]         valueCoeff = valueCoeff.multiply(deltaX); [EOL]     } [EOL]     return value; [EOL] } <line_num>: 140,161
public T[][] derivatives(T x, int order) throws NoDataException, NullArgumentException { [EOL]     MathUtils.checkNotNull(x); [EOL]     if (abscissae.isEmpty()) { [EOL]         throw new NoDataException(LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE); [EOL]     } [EOL]     final T zero = x.getField().getZero(); [EOL]     final T one = x.getField().getOne(); [EOL]     final T[] tj = MathArrays.buildArray(x.getField(), order + 1); [EOL]     tj[0] = zero; [EOL]     for (int i = 0; i < order; ++i) { [EOL]         tj[i + 1] = tj[i].add(one); [EOL]     } [EOL]     final T[][] derivatives = MathArrays.buildArray(x.getField(), order + 1, topDiagonal.get(0).length); [EOL]     final T[] valueCoeff = MathArrays.buildArray(x.getField(), order + 1); [EOL]     valueCoeff[0] = x.getField().getOne(); [EOL]     for (int i = 0; i < topDiagonal.size(); ++i) { [EOL]         T[] dividedDifference = topDiagonal.get(i); [EOL]         final T deltaX = x.subtract(abscissae.get(i)); [EOL]         for (int j = order; j >= 0; --j) { [EOL]             for (int k = 0; k < derivatives[j].length; ++k) { [EOL]                 derivatives[j][k] = derivatives[j][k].add(dividedDifference[k].multiply(valueCoeff[j])); [EOL]             } [EOL]             valueCoeff[j] = valueCoeff[j].multiply(deltaX); [EOL]             if (j > 0) { [EOL]                 valueCoeff[j] = valueCoeff[j].add(tj[j].multiply(valueCoeff[j - 1])); [EOL]             } [EOL]         } [EOL]     } [EOL]     return derivatives; [EOL] } <line_num>: 171,208
