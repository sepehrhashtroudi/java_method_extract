private DerivativeStructure(final DSCompiler compiler) { [EOL]     this.compiler = compiler; [EOL]     this.data = new double[compiler.getSize()]; [EOL] } <line_num>: 76,79
public DerivativeStructure(final int parameters, final int order) throws NumberIsTooLargeException { [EOL]     this(DSCompiler.getCompiler(parameters, order)); [EOL] } <line_num>: 86,89
public DerivativeStructure(final int parameters, final int order, final double value) throws NumberIsTooLargeException { [EOL]     this(parameters, order); [EOL]     this.data[0] = value; [EOL] } <line_num>: 98,102
public DerivativeStructure(final int parameters, final int order, final int index, final double value) throws NumberIsTooLargeException { [EOL]     this(parameters, order, value); [EOL]     if (index >= parameters) { [EOL]         throw new NumberIsTooLargeException(index, parameters, false); [EOL]     } [EOL]     if (order > 0) { [EOL]         data[DSCompiler.getCompiler(index, order).getSize()] = 1.0; [EOL]     } [EOL] } <line_num>: 116,130
public DerivativeStructure(final double a1, final DerivativeStructure ds1, final double a2, final DerivativeStructure ds2) throws DimensionMismatchException { [EOL]     this(ds1.compiler); [EOL]     compiler.checkCompatibility(ds2.compiler); [EOL]     compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, data, 0); [EOL] } <line_num>: 140,146
public DerivativeStructure(final double a1, final DerivativeStructure ds1, final double a2, final DerivativeStructure ds2, final double a3, final DerivativeStructure ds3) throws DimensionMismatchException { [EOL]     this(ds1.compiler); [EOL]     compiler.checkCompatibility(ds2.compiler); [EOL]     compiler.checkCompatibility(ds3.compiler); [EOL]     compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0); [EOL] } <line_num>: 158,166
public DerivativeStructure(final double a1, final DerivativeStructure ds1, final double a2, final DerivativeStructure ds2, final double a3, final DerivativeStructure ds3, final double a4, final DerivativeStructure ds4) throws DimensionMismatchException { [EOL]     this(ds1.compiler); [EOL]     compiler.checkCompatibility(ds2.compiler); [EOL]     compiler.checkCompatibility(ds3.compiler); [EOL]     compiler.checkCompatibility(ds4.compiler); [EOL]     compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, a4, ds4.data, 0, data, 0); [EOL] } <line_num>: 180,192
public DerivativeStructure(final int parameters, final int order, final double... derivatives) throws DimensionMismatchException, NumberIsTooLargeException { [EOL]     this(parameters, order); [EOL]     if (derivatives.length != data.length) { [EOL]         throw new DimensionMismatchException(derivatives.length, data.length); [EOL]     } [EOL]     System.arraycopy(derivatives, 0, data, 0, data.length); [EOL] } <line_num>: 204,211
private DerivativeStructure(final DerivativeStructure ds) { [EOL]     this.compiler = ds.compiler; [EOL]     this.data = ds.data.clone(); [EOL] } <line_num>: 216,219
public DataTransferObject(final int variables, final int order, final double[] data) { [EOL]     this.variables = variables; [EOL]     this.order = order; [EOL]     this.data = data; [EOL] } <line_num>: 1181,1185
public int getFreeParameters() { [EOL]     return compiler.getFreeParameters(); [EOL] } <line_num>: 224,226
public int getOrder() { [EOL]     return compiler.getOrder(); [EOL] } <line_num>: 231,233
public DerivativeStructure createConstant(final double c) { [EOL]     return new DerivativeStructure(getFreeParameters(), getOrder(), c); [EOL] } <line_num>: 245,247
public double getReal() { [EOL]     return data[0]; [EOL] } <line_num>: 252,254
public double getValue() { [EOL]     return data[0]; [EOL] } <line_num>: 260,262
public double getPartialDerivative(final int... orders) throws DimensionMismatchException, NumberIsTooLargeException { [EOL]     return data[compiler.getPartialDerivativeIndex(orders)]; [EOL] } <line_num>: 274,277
public double[] getAllDerivatives() { [EOL]     return data.clone(); [EOL] } <line_num>: 283,285
public DerivativeStructure add(final double a) { [EOL]     final DerivativeStructure ds = new DerivativeStructure(this); [EOL]     ds.data[0] += a; [EOL]     return ds; [EOL] } <line_num>: 290,294
public DerivativeStructure add(final DerivativeStructure a) throws DimensionMismatchException { [EOL]     compiler.checkCompatibility(a.compiler); [EOL]     final DerivativeStructure ds = new DerivativeStructure(this); [EOL]     compiler.add(data, 0, a.data, 0, ds.data, 0); [EOL]     return ds; [EOL] } <line_num>: 300,306
public DerivativeStructure subtract(final double a) { [EOL]     return add(-a); [EOL] } <line_num>: 311,313
public DerivativeStructure subtract(final DerivativeStructure a) throws DimensionMismatchException { [EOL]     compiler.checkCompatibility(a.compiler); [EOL]     final DerivativeStructure ds = new DerivativeStructure(this); [EOL]     compiler.subtract(data, 0, a.data, 0, ds.data, 0); [EOL]     return ds; [EOL] } <line_num>: 319,325
public DerivativeStructure multiply(final int n) { [EOL]     return multiply((double) n); [EOL] } <line_num>: 328,330
public DerivativeStructure multiply(final double a) { [EOL]     final DerivativeStructure ds = new DerivativeStructure(this); [EOL]     for (int i = 0; i < ds.data.length; ++i) { [EOL]         ds.data[i] *= a; [EOL]     } [EOL]     return ds; [EOL] } <line_num>: 335,341
public DerivativeStructure multiply(final DerivativeStructure a) throws DimensionMismatchException { [EOL]     compiler.checkCompatibility(a.compiler); [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.multiply(data, 0, a.data, 0, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 347,353
public DerivativeStructure divide(final double a) { [EOL]     final DerivativeStructure ds = new DerivativeStructure(this); [EOL]     for (int i = 0; i < ds.data.length; ++i) { [EOL]         ds.data[i] /= a; [EOL]     } [EOL]     return ds; [EOL] } <line_num>: 358,364
public DerivativeStructure divide(final DerivativeStructure a) throws DimensionMismatchException { [EOL]     compiler.checkCompatibility(a.compiler); [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.divide(data, 0, a.data, 0, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 370,376
public DerivativeStructure remainder(final double a) { [EOL]     final DerivativeStructure ds = new DerivativeStructure(this); [EOL]     ds.data[0] = FastMath.IEEEremainder(ds.data[0], a); [EOL]     return ds; [EOL] } <line_num>: 379,383
public DerivativeStructure remainder(final DerivativeStructure a) throws DimensionMismatchException { [EOL]     compiler.checkCompatibility(a.compiler); [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.remainder(data, 0, a.data, 0, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 390,396
public DerivativeStructure negate() { [EOL]     final DerivativeStructure ds = new DerivativeStructure(compiler); [EOL]     for (int i = 0; i < ds.data.length; ++i) { [EOL]         ds.data[i] = -data[i]; [EOL]     } [EOL]     return ds; [EOL] } <line_num>: 399,405
public DerivativeStructure abs() { [EOL]     if (Double.doubleToLongBits(data[0]) < 0) { [EOL]         return negate(); [EOL]     } else { [EOL]         return this; [EOL]     } [EOL] } <line_num>: 410,417
public DerivativeStructure ceil() { [EOL]     return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), FastMath.ceil(data[0])); [EOL] } <line_num>: 422,426
public DerivativeStructure floor() { [EOL]     return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), FastMath.floor(data[0])); [EOL] } <line_num>: 431,435
public DerivativeStructure rint() { [EOL]     return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), FastMath.rint(data[0])); [EOL] } <line_num>: 440,444
public long round() { [EOL]     return FastMath.round(data[0]); [EOL] } <line_num>: 447,449
public DerivativeStructure signum() { [EOL]     return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), FastMath.signum(data[0])); [EOL] } <line_num>: 454,458
public DerivativeStructure copySign(final DerivativeStructure sign) { [EOL]     long m = Double.doubleToLongBits(data[0]); [EOL]     long s = Double.doubleToLongBits(sign.data[0]); [EOL]     if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { [EOL]         return this; [EOL]     } [EOL]     return negate(); [EOL] } <line_num>: 463,470
public DerivativeStructure copySign(final double sign) { [EOL]     long m = Double.doubleToLongBits(data[0]); [EOL]     long s = Double.doubleToLongBits(sign); [EOL]     if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { [EOL]         return this; [EOL]     } [EOL]     return negate(); [EOL] } <line_num>: 475,482
public int getExponent() { [EOL]     return FastMath.getExponent(data[0]); [EOL] } <line_num>: 492,494
public DerivativeStructure scalb(final int n) { [EOL]     final DerivativeStructure ds = new DerivativeStructure(compiler); [EOL]     for (int i = 0; i < ds.data.length; ++i) { [EOL]         ds.data[i] = FastMath.scalb(data[i], n); [EOL]     } [EOL]     return ds; [EOL] } <line_num>: 499,505
public DerivativeStructure hypot(final DerivativeStructure y) throws DimensionMismatchException { [EOL]     compiler.checkCompatibility(y.compiler); [EOL]     if (Double.isInfinite(data[0]) || Double.isInfinite(y.data[0])) { [EOL]         return new DerivativeStructure(compiler.getFreeParameters(), compiler.getFreeParameters(), Double.POSITIVE_INFINITY); [EOL]     } else if (Double.isNaN(data[0]) || Double.isNaN(y.data[0])) { [EOL]         return new DerivativeStructure(compiler.getFreeParameters(), compiler.getFreeParameters(), Double.NaN); [EOL]     } else { [EOL]         final int expX = getExponent(); [EOL]         final int expY = y.getExponent(); [EOL]         if (expX > expY + 27) { [EOL]             return abs(); [EOL]         } else if (expY > expX + 27) { [EOL]             return y.abs(); [EOL]         } else { [EOL]             final int middleExp = (expX + expY) / 2; [EOL]             final DerivativeStructure scaledX = scalb(-middleExp); [EOL]             final DerivativeStructure scaledY = y.scalb(-middleExp); [EOL]             final DerivativeStructure scaledH = scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt(); [EOL]             return scaledH.scalb(middleExp); [EOL]         } [EOL]     } [EOL] } <line_num>: 512,554
public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException { [EOL]     return x.hypot(y); [EOL] } <line_num>: 573,576
public DerivativeStructure compose(final double... f) throws DimensionMismatchException { [EOL]     if (f.length != getOrder() + 1) { [EOL]         throw new DimensionMismatchException(f.length, getOrder() + 1); [EOL]     } [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.compose(data, 0, f, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 586,594
public DerivativeStructure reciprocal() { [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.pow(data, 0, -1, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 597,601
public DerivativeStructure sqrt() { [EOL]     return rootN(2); [EOL] } <line_num>: 606,608
public DerivativeStructure cbrt() { [EOL]     return rootN(3); [EOL] } <line_num>: 613,615
public DerivativeStructure rootN(final int n) { [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.rootN(data, 0, n, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 620,624
public DerivativeStructure getZero() { [EOL]     return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 0.0); [EOL] } <line_num>: 631,633
public DerivativeStructure getOne() { [EOL]     return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 1.0); [EOL] } <line_num>: 636,638
public Class<? extends FieldElement<DerivativeStructure>> getRuntimeClass() { [EOL]     return DerivativeStructure.class; [EOL] } <line_num>: 641,643
public Field<DerivativeStructure> getField() { [EOL]     return new Field<DerivativeStructure>() { [EOL]  [EOL]         public DerivativeStructure getZero() { [EOL]             return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 0.0); [EOL]         } [EOL]  [EOL]         public DerivativeStructure getOne() { [EOL]             return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 1.0); [EOL]         } [EOL]  [EOL]         public Class<? extends FieldElement<DerivativeStructure>> getRuntimeClass() { [EOL]             return DerivativeStructure.class; [EOL]         } [EOL]     }; [EOL] } <line_num>: 627,646
public static DerivativeStructure pow(final double a, final DerivativeStructure x) { [EOL]     final DerivativeStructure result = new DerivativeStructure(x.compiler); [EOL]     x.compiler.pow(a, x.data, 0, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 654,658
public DerivativeStructure pow(final double p) { [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.pow(data, 0, p, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 663,667
public DerivativeStructure pow(final int n) { [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.pow(data, 0, n, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 672,676
public DerivativeStructure pow(final DerivativeStructure e) throws DimensionMismatchException { [EOL]     compiler.checkCompatibility(e.compiler); [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.pow(data, 0, e.data, 0, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 683,689
public DerivativeStructure exp() { [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.exp(data, 0, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 694,698
public DerivativeStructure expm1() { [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.expm1(data, 0, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 703,707
public DerivativeStructure log() { [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.log(data, 0, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 712,716
public DerivativeStructure log1p() { [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.log1p(data, 0, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 721,725
public DerivativeStructure log10() { [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.log10(data, 0, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 730,734
public DerivativeStructure cos() { [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.cos(data, 0, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 739,743
public DerivativeStructure sin() { [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.sin(data, 0, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 748,752
public DerivativeStructure tan() { [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.tan(data, 0, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 757,761
public DerivativeStructure acos() { [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.acos(data, 0, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 766,770
public DerivativeStructure asin() { [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.asin(data, 0, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 775,779
public DerivativeStructure atan() { [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.atan(data, 0, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 784,788
public DerivativeStructure atan2(final DerivativeStructure x) throws DimensionMismatchException { [EOL]     compiler.checkCompatibility(x.compiler); [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.atan2(data, 0, x.data, 0, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 793,799
public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException { [EOL]     return y.atan2(x); [EOL] } <line_num>: 809,812
public DerivativeStructure cosh() { [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.cosh(data, 0, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 817,821
public DerivativeStructure sinh() { [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.sinh(data, 0, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 826,830
public DerivativeStructure tanh() { [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.tanh(data, 0, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 835,839
public DerivativeStructure acosh() { [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.acosh(data, 0, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 844,848
public DerivativeStructure asinh() { [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.asinh(data, 0, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 853,857
public DerivativeStructure atanh() { [EOL]     final DerivativeStructure result = new DerivativeStructure(compiler); [EOL]     compiler.atanh(data, 0, result.data, 0); [EOL]     return result; [EOL] } <line_num>: 862,866
public DerivativeStructure toDegrees() { [EOL]     final DerivativeStructure ds = new DerivativeStructure(compiler); [EOL]     for (int i = 0; i < ds.data.length; ++i) { [EOL]         ds.data[i] = FastMath.toDegrees(data[i]); [EOL]     } [EOL]     return ds; [EOL] } <line_num>: 871,877
public DerivativeStructure toRadians() { [EOL]     final DerivativeStructure ds = new DerivativeStructure(compiler); [EOL]     for (int i = 0; i < ds.data.length; ++i) { [EOL]         ds.data[i] = FastMath.toRadians(data[i]); [EOL]     } [EOL]     return ds; [EOL] } <line_num>: 882,888
public double taylor(final double... delta) throws MathArithmeticException { [EOL]     return compiler.taylor(data, 0, delta); [EOL] } <line_num>: 895,897
public DerivativeStructure linearCombination(final DerivativeStructure[] a, final DerivativeStructure[] b) throws DimensionMismatchException { [EOL]     final double[] aDouble = new double[a.length]; [EOL]     for (int i = 0; i < a.length; ++i) { [EOL]         aDouble[i] = a[i].getValue(); [EOL]     } [EOL]     final double[] bDouble = new double[b.length]; [EOL]     for (int i = 0; i < b.length; ++i) { [EOL]         bDouble[i] = b[i].getValue(); [EOL]     } [EOL]     final double accurateValue = MathArrays.linearCombination(aDouble, bDouble); [EOL]     DerivativeStructure simpleValue = a[0].getField().getZero(); [EOL]     for (int i = 0; i < a.length; ++i) { [EOL]         simpleValue = simpleValue.add(a[i].multiply(b[i])); [EOL]     } [EOL]     final double[] all = simpleValue.getAllDerivatives(); [EOL]     all[0] = accurateValue; [EOL]     return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), all); [EOL] } <line_num>: 904,929
public DerivativeStructure linearCombination(final double[] a, final DerivativeStructure[] b) throws DimensionMismatchException { [EOL]     final double[] bDouble = new double[b.length]; [EOL]     for (int i = 0; i < b.length; ++i) { [EOL]         bDouble[i] = b[i].getValue(); [EOL]     } [EOL]     final double accurateValue = MathArrays.linearCombination(a, bDouble); [EOL]     DerivativeStructure simpleValue = b[0].getField().getZero(); [EOL]     for (int i = 0; i < a.length; ++i) { [EOL]         simpleValue = simpleValue.add(b[i].multiply(a[i])); [EOL]     } [EOL]     final double[] all = simpleValue.getAllDerivatives(); [EOL]     all[0] = accurateValue; [EOL]     return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), all); [EOL] } <line_num>: 936,957
public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2) throws DimensionMismatchException { [EOL]     final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(), a2.getValue(), b2.getValue()); [EOL]     final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)); [EOL]     final double[] all = simpleValue.getAllDerivatives(); [EOL]     all[0] = accurateValue; [EOL]     return new DerivativeStructure(getFreeParameters(), getOrder(), all); [EOL] } <line_num>: 964,980
public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2) throws DimensionMismatchException { [EOL]     final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(), a2, b2.getValue()); [EOL]     final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)); [EOL]     final double[] all = simpleValue.getAllDerivatives(); [EOL]     all[0] = accurateValue; [EOL]     return new DerivativeStructure(getFreeParameters(), getOrder(), all); [EOL] } <line_num>: 987,1003
public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2, final DerivativeStructure a3, final DerivativeStructure b3) throws DimensionMismatchException { [EOL]     final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(), a2.getValue(), b2.getValue(), a3.getValue(), b3.getValue()); [EOL]     final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)); [EOL]     final double[] all = simpleValue.getAllDerivatives(); [EOL]     all[0] = accurateValue; [EOL]     return new DerivativeStructure(getFreeParameters(), getOrder(), all); [EOL] } <line_num>: 1010,1028
public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2, final double a3, final DerivativeStructure b3) throws DimensionMismatchException { [EOL]     final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(), a2, b2.getValue(), a3, b3.getValue()); [EOL]     final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)); [EOL]     final double[] all = simpleValue.getAllDerivatives(); [EOL]     all[0] = accurateValue; [EOL]     return new DerivativeStructure(getFreeParameters(), getOrder(), all); [EOL] } <line_num>: 1035,1053
public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1, final DerivativeStructure a2, final DerivativeStructure b2, final DerivativeStructure a3, final DerivativeStructure b3, final DerivativeStructure a4, final DerivativeStructure b4) throws DimensionMismatchException { [EOL]     final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(), a2.getValue(), b2.getValue(), a3.getValue(), b3.getValue(), a4.getValue(), b4.getValue()); [EOL]     final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4)); [EOL]     final double[] all = simpleValue.getAllDerivatives(); [EOL]     all[0] = accurateValue; [EOL]     return new DerivativeStructure(getFreeParameters(), getOrder(), all); [EOL] } <line_num>: 1060,1080
public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1, final double a2, final DerivativeStructure b2, final double a3, final DerivativeStructure b3, final double a4, final DerivativeStructure b4) throws DimensionMismatchException { [EOL]     final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(), a2, b2.getValue(), a3, b3.getValue(), a4, b4.getValue()); [EOL]     final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4)); [EOL]     final double[] all = simpleValue.getAllDerivatives(); [EOL]     all[0] = accurateValue; [EOL]     return new DerivativeStructure(getFreeParameters(), getOrder(), all); [EOL] } <line_num>: 1087,1107
@Override [EOL] public boolean equals(Object other) { [EOL]     if (this == other) { [EOL]         return true; [EOL]     } [EOL]     if (other instanceof DerivativeStructure) { [EOL]         final DerivativeStructure rhs = (DerivativeStructure) other; [EOL]         return (getFreeParameters() == rhs.getFreeParameters()) && (getOrder() == rhs.getOrder()) && MathArrays.equals(data, rhs.data); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 1119,1135
@Override [EOL] public int hashCode() { [EOL]     return 227 + 229 * getFreeParameters() + 233 * getOrder() + 239 * MathUtils.hash(data); [EOL] } <line_num>: 1142,1145
private Object writeReplace() { [EOL]     return new DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data); [EOL] } <line_num>: 1151,1153
private Object readResolve() { [EOL]     return new DerivativeStructure(variables, order, data); [EOL] } <line_num>: 1190,1192
