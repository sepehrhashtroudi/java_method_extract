public SimpsonIntegrator(final double relativeAccuracy, final double absoluteAccuracy, final int minimalIterationCount, final int maximalIterationCount) throws NotStrictlyPositiveException, NumberIsTooSmallException, NumberIsTooLargeException { [EOL]     super(relativeAccuracy, absoluteAccuracy, minimalIterationCount, maximalIterationCount); [EOL]     if (maximalIterationCount > SIMPSON_MAX_ITERATIONS_COUNT) { [EOL]         throw new NumberIsTooLargeException(maximalIterationCount, SIMPSON_MAX_ITERATIONS_COUNT, false); [EOL]     } [EOL] } <line_num>: 57,67
public SimpsonIntegrator(final int minimalIterationCount, final int maximalIterationCount) throws NotStrictlyPositiveException, NumberIsTooSmallException, NumberIsTooLargeException { [EOL]     super(minimalIterationCount, maximalIterationCount); [EOL]     if (maximalIterationCount > SIMPSON_MAX_ITERATIONS_COUNT) { [EOL]         throw new NumberIsTooLargeException(maximalIterationCount, SIMPSON_MAX_ITERATIONS_COUNT, false); [EOL]     } [EOL] } <line_num>: 81,89
public SimpsonIntegrator() { [EOL]     super(DEFAULT_MIN_ITERATIONS_COUNT, SIMPSON_MAX_ITERATIONS_COUNT); [EOL] } <line_num>: 95,97
@Override [EOL] protected double doIntegrate() throws TooManyEvaluationsException, MaxCountExceededException { [EOL]     TrapezoidIntegrator qtrap = new TrapezoidIntegrator(); [EOL]     if (getMinimalIterationCount() == 1) { [EOL]         return (4 * qtrap.stage(this, 1) - qtrap.stage(this, 0)) / 3.0; [EOL]     } [EOL]     double olds = 0; [EOL]     double oldt = qtrap.stage(this, 0); [EOL]     while (true) { [EOL]         final double t = qtrap.stage(this, iterations.getCount()); [EOL]         iterations.incrementCount(); [EOL]         final double s = (4 * t - oldt) / 3.0; [EOL]         if (iterations.getCount() >= getMinimalIterationCount()) { [EOL]             final double delta = FastMath.abs(s - olds); [EOL]             final double rLimit = getRelativeAccuracy() * (FastMath.abs(olds) + FastMath.abs(s)) * 0.5; [EOL]             if ((delta <= rLimit) || (delta <= getAbsoluteAccuracy())) { [EOL]                 return s; [EOL]             } [EOL]         } [EOL]         olds = s; [EOL]         oldt = t; [EOL]     } [EOL] } <line_num>: 100,128
