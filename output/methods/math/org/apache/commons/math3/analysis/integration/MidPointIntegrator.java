public MidPointIntegrator(final double relativeAccuracy, final double absoluteAccuracy, final int minimalIterationCount, final int maximalIterationCount) throws NotStrictlyPositiveException, NumberIsTooSmallException, NumberIsTooLargeException { [EOL]     super(relativeAccuracy, absoluteAccuracy, minimalIterationCount, maximalIterationCount); [EOL]     if (maximalIterationCount > MIDPOINT_MAX_ITERATIONS_COUNT) { [EOL]         throw new NumberIsTooLargeException(maximalIterationCount, MIDPOINT_MAX_ITERATIONS_COUNT, false); [EOL]     } [EOL] } <line_num>: 57,67
public MidPointIntegrator(final int minimalIterationCount, final int maximalIterationCount) throws NotStrictlyPositiveException, NumberIsTooSmallException, NumberIsTooLargeException { [EOL]     super(minimalIterationCount, maximalIterationCount); [EOL]     if (maximalIterationCount > MIDPOINT_MAX_ITERATIONS_COUNT) { [EOL]         throw new NumberIsTooLargeException(maximalIterationCount, MIDPOINT_MAX_ITERATIONS_COUNT, false); [EOL]     } [EOL] } <line_num>: 81,89
public MidPointIntegrator() { [EOL]     super(DEFAULT_MIN_ITERATIONS_COUNT, MIDPOINT_MAX_ITERATIONS_COUNT); [EOL] } <line_num>: 95,97
private double stage(final int n, double previousStageResult, double min, double diffMaxMin) throws TooManyEvaluationsException { [EOL]     final long np = 1L << (n - 1); [EOL]     double sum = 0; [EOL]     final double spacing = diffMaxMin / np; [EOL]     double x = min + 0.5 * spacing; [EOL]     for (long i = 0; i < np; i++) { [EOL]         sum += computeObjectiveValue(x); [EOL]         x += spacing; [EOL]     } [EOL]     return 0.5 * (previousStageResult + sum * spacing); [EOL] } <line_num>: 118,139
@Override [EOL] protected double doIntegrate() throws MathIllegalArgumentException, TooManyEvaluationsException, MaxCountExceededException { [EOL]     final double min = getMin(); [EOL]     final double diff = getMax() - min; [EOL]     final double midPoint = min + 0.5 * diff; [EOL]     double oldt = diff * computeObjectiveValue(midPoint); [EOL]     while (true) { [EOL]         iterations.incrementCount(); [EOL]         final int i = iterations.getCount(); [EOL]         final double t = stage(i, oldt, min, diff); [EOL]         if (i >= getMinimalIterationCount()) { [EOL]             final double delta = FastMath.abs(t - oldt); [EOL]             final double rLimit = getRelativeAccuracy() * (FastMath.abs(oldt) + FastMath.abs(t)) * 0.5; [EOL]             if ((delta <= rLimit) || (delta <= getAbsoluteAccuracy())) { [EOL]                 return t; [EOL]             } [EOL]         } [EOL]         oldt = t; [EOL]     } [EOL] } <line_num>: 143,168
