MicrosphereSurfaceElement(double[] n) { [EOL]     normal = new ArrayRealVector(n); [EOL] } <line_num>: 77,79
public MicrosphereInterpolatingFunction(double[][] xval, double[] yval, int brightnessExponent, int microsphereElements, UnitSphereRandomVectorGenerator rand) throws DimensionMismatchException, NoDataException, NullArgumentException { [EOL]     if (xval == null || yval == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     if (xval.length == 0) { [EOL]         throw new NoDataException(); [EOL]     } [EOL]     if (xval.length != yval.length) { [EOL]         throw new DimensionMismatchException(xval.length, yval.length); [EOL]     } [EOL]     if (xval[0] == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     dimension = xval[0].length; [EOL]     this.brightnessExponent = brightnessExponent; [EOL]     samples = new HashMap<RealVector, Double>(yval.length); [EOL]     for (int i = 0; i < xval.length; ++i) { [EOL]         final double[] xvalI = xval[i]; [EOL]         if (xvalI == null) { [EOL]             throw new NullArgumentException(); [EOL]         } [EOL]         if (xvalI.length != dimension) { [EOL]             throw new DimensionMismatchException(xvalI.length, dimension); [EOL]         } [EOL]         samples.put(new ArrayRealVector(xvalI), yval[i]); [EOL]     } [EOL]     microsphere = new ArrayList<MicrosphereSurfaceElement>(microsphereElements); [EOL]     for (int i = 0; i < microsphereElements; i++) { [EOL]         microsphere.add(new MicrosphereSurfaceElement(rand.nextVector())); [EOL]     } [EOL] } <line_num>: 146,191
RealVector normal() { [EOL]     return normal; [EOL] } <line_num>: 85,87
void reset() { [EOL]     brightestIllumination = 0; [EOL]     brightestSample = null; [EOL] } <line_num>: 92,95
void store(final double illuminationFromSample, final Map.Entry<RealVector, Double> sample) { [EOL]     if (illuminationFromSample > this.brightestIllumination) { [EOL]         this.brightestIllumination = illuminationFromSample; [EOL]         this.brightestSample = sample; [EOL]     } [EOL] } <line_num>: 102,108
double illumination() { [EOL]     return brightestIllumination; [EOL] } <line_num>: 114,116
Map.Entry<RealVector, Double> sample() { [EOL]     return brightestSample; [EOL] } <line_num>: 122,124
public double value(double[] point) throws DimensionMismatchException { [EOL]     final RealVector p = new ArrayRealVector(point); [EOL]     for (MicrosphereSurfaceElement md : microsphere) { [EOL]         md.reset(); [EOL]     } [EOL]     for (Map.Entry<RealVector, Double> sd : samples.entrySet()) { [EOL]         final RealVector diff = sd.getKey().subtract(p); [EOL]         final double diffNorm = diff.getNorm(); [EOL]         if (FastMath.abs(diffNorm) < FastMath.ulp(1d)) { [EOL]             return sd.getValue(); [EOL]         } [EOL]         for (MicrosphereSurfaceElement md : microsphere) { [EOL]             final double w = FastMath.pow(diffNorm, -brightnessExponent); [EOL]             md.store(cosAngle(diff, md.normal()) * w, sd); [EOL]         } [EOL]     } [EOL]     double value = 0; [EOL]     double totalWeight = 0; [EOL]     for (MicrosphereSurfaceElement md : microsphere) { [EOL]         final double iV = md.illumination(); [EOL]         final Map.Entry<RealVector, Double> sd = md.sample(); [EOL]         if (sd != null) { [EOL]             value += iV * sd.getValue(); [EOL]             totalWeight += iV; [EOL]         } [EOL]     } [EOL]     return value / totalWeight; [EOL] } <line_num>: 198,239
private double cosAngle(final RealVector v, final RealVector w) { [EOL]     return v.dotProduct(w) / (v.getNorm() * w.getNorm()); [EOL] } <line_num>: 248,250
