public HermiteInterpolator() { [EOL]     this.abscissae = new ArrayList<Double>(); [EOL]     this.topDiagonal = new ArrayList<double[]>(); [EOL]     this.bottomDiagonal = new ArrayList<double[]>(); [EOL] } <line_num>: 62,66
public void addSamplePoint(final double x, final double[]... value) throws ZeroException, MathArithmeticException { [EOL]     for (int i = 0; i < value.length; ++i) { [EOL]         final double[] y = value[i].clone(); [EOL]         if (i > 1) { [EOL]             double inv = 1.0 / CombinatoricsUtils.factorial(i); [EOL]             for (int j = 0; j < y.length; ++j) { [EOL]                 y[j] *= inv; [EOL]             } [EOL]         } [EOL]         final int n = abscissae.size(); [EOL]         bottomDiagonal.add(n - i, y); [EOL]         double[] bottom0 = y; [EOL]         for (int j = i; j < n; ++j) { [EOL]             final double[] bottom1 = bottomDiagonal.get(n - (j + 1)); [EOL]             final double inv = 1.0 / (x - abscissae.get(n - (j + 1))); [EOL]             if (Double.isInfinite(inv)) { [EOL]                 throw new ZeroException(LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x); [EOL]             } [EOL]             for (int k = 0; k < y.length; ++k) { [EOL]                 bottom1[k] = inv * (bottom0[k] - bottom1[k]); [EOL]             } [EOL]             bottom0 = bottom1; [EOL]         } [EOL]         topDiagonal.add(bottom0.clone()); [EOL]         abscissae.add(x); [EOL]     } [EOL] } <line_num>: 87,124
public PolynomialFunction[] getPolynomials() throws NoDataException { [EOL]     checkInterpolation(); [EOL]     final PolynomialFunction zero = polynomial(0); [EOL]     PolynomialFunction[] polynomials = new PolynomialFunction[topDiagonal.get(0).length]; [EOL]     for (int i = 0; i < polynomials.length; ++i) { [EOL]         polynomials[i] = zero; [EOL]     } [EOL]     PolynomialFunction coeff = polynomial(1); [EOL]     for (int i = 0; i < topDiagonal.size(); ++i) { [EOL]         double[] tdi = topDiagonal.get(i); [EOL]         for (int k = 0; k < polynomials.length; ++k) { [EOL]             polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k]))); [EOL]         } [EOL]         coeff = coeff.multiply(polynomial(-abscissae.get(i), 1.0)); [EOL]     } [EOL]     return polynomials; [EOL] } <line_num>: 130,155
public double[] value(double x) throws NoDataException { [EOL]     checkInterpolation(); [EOL]     final double[] value = new double[topDiagonal.get(0).length]; [EOL]     double valueCoeff = 1; [EOL]     for (int i = 0; i < topDiagonal.size(); ++i) { [EOL]         double[] dividedDifference = topDiagonal.get(i); [EOL]         for (int k = 0; k < value.length; ++k) { [EOL]             value[k] += dividedDifference[k] * valueCoeff; [EOL]         } [EOL]         final double deltaX = x - abscissae.get(i); [EOL]         valueCoeff *= deltaX; [EOL]     } [EOL]     return value; [EOL] } <line_num>: 168,187
public DerivativeStructure[] value(final DerivativeStructure x) throws NoDataException { [EOL]     checkInterpolation(); [EOL]     final DerivativeStructure[] value = new DerivativeStructure[topDiagonal.get(0).length]; [EOL]     Arrays.fill(value, x.getField().getZero()); [EOL]     DerivativeStructure valueCoeff = x.getField().getOne(); [EOL]     for (int i = 0; i < topDiagonal.size(); ++i) { [EOL]         double[] dividedDifference = topDiagonal.get(i); [EOL]         for (int k = 0; k < value.length; ++k) { [EOL]             value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k])); [EOL]         } [EOL]         final DerivativeStructure deltaX = x.subtract(abscissae.get(i)); [EOL]         valueCoeff = valueCoeff.multiply(deltaX); [EOL]     } [EOL]     return value; [EOL] } <line_num>: 200,220
private void checkInterpolation() throws NoDataException { [EOL]     if (abscissae.isEmpty()) { [EOL]         throw new NoDataException(LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE); [EOL]     } [EOL] } <line_num>: 226,230
private PolynomialFunction polynomial(double... c) { [EOL]     return new PolynomialFunction(c); [EOL] } <line_num>: 236,238
