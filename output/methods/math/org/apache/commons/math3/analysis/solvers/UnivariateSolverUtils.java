private UnivariateSolverUtils() { [EOL] } <line_num>: 36,36
public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException { [EOL]     if (function == null) { [EOL]         throw new NullArgumentException(LocalizedFormats.FUNCTION); [EOL]     } [EOL]     final UnivariateSolver solver = new BrentSolver(); [EOL]     return solver.solve(Integer.MAX_VALUE, function, x0, x1); [EOL] } <line_num>: 50,58
public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException { [EOL]     if (function == null) { [EOL]         throw new NullArgumentException(LocalizedFormats.FUNCTION); [EOL]     } [EOL]     final UnivariateSolver solver = new BrentSolver(absoluteAccuracy); [EOL]     return solver.solve(Integer.MAX_VALUE, function, x0, x1); [EOL] } <line_num>: 73,83
public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException { [EOL]     if (allowedSolution == AllowedSolution.ANY_SIDE) { [EOL]         return baseRoot; [EOL]     } [EOL]     final double step = FastMath.max(bracketing.getAbsoluteAccuracy(), FastMath.abs(baseRoot * bracketing.getRelativeAccuracy())); [EOL]     double xLo = FastMath.max(min, baseRoot - step); [EOL]     double fLo = f.value(xLo); [EOL]     double xHi = FastMath.min(max, baseRoot + step); [EOL]     double fHi = f.value(xHi); [EOL]     int remainingEval = maxEval - 2; [EOL]     while (remainingEval > 0) { [EOL]         if ((fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0)) { [EOL]             return bracketing.solve(remainingEval, f, xLo, xHi, baseRoot, allowedSolution); [EOL]         } [EOL]         boolean changeLo = false; [EOL]         boolean changeHi = false; [EOL]         if (fLo < fHi) { [EOL]             if (fLo >= 0) { [EOL]                 changeLo = true; [EOL]             } else { [EOL]                 changeHi = true; [EOL]             } [EOL]         } else if (fLo > fHi) { [EOL]             if (fLo <= 0) { [EOL]                 changeLo = true; [EOL]             } else { [EOL]                 changeHi = true; [EOL]             } [EOL]         } else { [EOL]             changeLo = true; [EOL]             changeHi = true; [EOL]         } [EOL]         if (changeLo) { [EOL]             xLo = FastMath.max(min, xLo - step); [EOL]             fLo = f.value(xLo); [EOL]             remainingEval--; [EOL]         } [EOL]         if (changeHi) { [EOL]             xHi = FastMath.min(max, xHi + step); [EOL]             fHi = f.value(xHi); [EOL]             remainingEval--; [EOL]         } [EOL]     } [EOL]     throw new NoBracketingException(LocalizedFormats.FAILED_BRACKETING, xLo, xHi, fLo, fHi, maxEval - remainingEval, maxEval, baseRoot, min, max); [EOL] } <line_num>: 101,171
public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException { [EOL]     return bracket(function, initial, lowerBound, upperBound, Integer.MAX_VALUE); [EOL] } <line_num>: 212,219
public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException { [EOL]     if (function == null) { [EOL]         throw new NullArgumentException(LocalizedFormats.FUNCTION); [EOL]     } [EOL]     if (maximumIterations <= 0) { [EOL]         throw new NotStrictlyPositiveException(LocalizedFormats.INVALID_MAX_ITERATIONS, maximumIterations); [EOL]     } [EOL]     verifySequence(lowerBound, initial, upperBound); [EOL]     double a = initial; [EOL]     double b = initial; [EOL]     double fa; [EOL]     double fb; [EOL]     int numIterations = 0; [EOL]     do { [EOL]         a = FastMath.max(a - 1.0, lowerBound); [EOL]         b = FastMath.min(b + 1.0, upperBound); [EOL]         fa = function.value(a); [EOL]         fb = function.value(b); [EOL]         ++numIterations; [EOL]     } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound))); [EOL]     if (fa * fb > 0.0) { [EOL]         throw new NoBracketingException(LocalizedFormats.FAILED_BRACKETING, a, b, fa, fb, numIterations, maximumIterations, initial, lowerBound, upperBound); [EOL]     } [EOL]     return new double[] { a, b }; [EOL] } <line_num>: 253,292
public static double midpoint(double a, double b) { [EOL]     return (a + b) * 0.5; [EOL] } <line_num>: 301,303
public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException { [EOL]     if (function == null) { [EOL]         throw new NullArgumentException(LocalizedFormats.FUNCTION); [EOL]     } [EOL]     final double fLo = function.value(lower); [EOL]     final double fHi = function.value(upper); [EOL]     return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0); [EOL] } <line_num>: 317,327
public static boolean isSequence(final double start, final double mid, final double end) { [EOL]     return (start < mid) && (mid < end); [EOL] } <line_num>: 337,341
public static void verifyInterval(final double lower, final double upper) throws NumberIsTooLargeException { [EOL]     if (lower >= upper) { [EOL]         throw new NumberIsTooLargeException(LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL, lower, upper, false); [EOL]     } [EOL] } <line_num>: 350,357
public static void verifySequence(final double lower, final double initial, final double upper) throws NumberIsTooLargeException { [EOL]     verifyInterval(lower, initial); [EOL]     verifyInterval(initial, upper); [EOL] } <line_num>: 368,374
public static void verifyBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException, NoBracketingException { [EOL]     if (function == null) { [EOL]         throw new NullArgumentException(LocalizedFormats.FUNCTION); [EOL]     } [EOL]     verifyInterval(lower, upper); [EOL]     if (!isBracketing(function, lower, upper)) { [EOL]         throw new NoBracketingException(lower, upper, function.value(lower), function.value(upper)); [EOL]     } [EOL] } <line_num>: 387,401
