private FunctionUtils() { [EOL] } <line_num>: 40,40
public double value(double x) { [EOL]     double r = x; [EOL]     for (int i = f.length - 1; i >= 0; i--) { [EOL]         r = f[i].value(r); [EOL]     } [EOL]     return r; [EOL] } <line_num>: 54,60
public static UnivariateFunction compose(final UnivariateFunction... f) { [EOL]     return new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             double r = x; [EOL]             for (int i = f.length - 1; i >= 0; i--) { [EOL]                 r = f[i].value(r); [EOL]             } [EOL]             return r; [EOL]         } [EOL]     }; [EOL] } <line_num>: 51,62
public double value(final double t) { [EOL]     double r = t; [EOL]     for (int i = f.length - 1; i >= 0; i--) { [EOL]         r = f[i].value(r); [EOL]     } [EOL]     return r; [EOL] } <line_num>: 78,84
public DerivativeStructure value(final DerivativeStructure t) { [EOL]     DerivativeStructure r = t; [EOL]     for (int i = f.length - 1; i >= 0; i--) { [EOL]         r = f[i].value(r); [EOL]     } [EOL]     return r; [EOL] } <line_num>: 87,93
public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f) { [EOL]     return new UnivariateDifferentiableFunction() { [EOL]  [EOL]         public double value(final double t) { [EOL]             double r = t; [EOL]             for (int i = f.length - 1; i >= 0; i--) { [EOL]                 r = f[i].value(r); [EOL]             } [EOL]             return r; [EOL]         } [EOL]  [EOL]         public DerivativeStructure value(final DerivativeStructure t) { [EOL]             DerivativeStructure r = t; [EOL]             for (int i = f.length - 1; i >= 0; i--) { [EOL]                 r = f[i].value(r); [EOL]             } [EOL]             return r; [EOL]         } [EOL]     }; [EOL] } <line_num>: 74,96
public double value(double x) { [EOL]     double r = x; [EOL]     for (int i = f.length - 1; i >= 0; i--) { [EOL]         r = f[i].value(r); [EOL]     } [EOL]     return r; [EOL] } <line_num>: 112,118
public double value(double x) { [EOL]     double p = 1; [EOL]     double r = x; [EOL]     for (int i = f.length - 1; i >= 0; i--) { [EOL]         p *= f[i].derivative().value(r); [EOL]         r = f[i].value(r); [EOL]     } [EOL]     return p; [EOL] } <line_num>: 124,132
public UnivariateFunction derivative() { [EOL]     return new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             double p = 1; [EOL]             double r = x; [EOL]             for (int i = f.length - 1; i >= 0; i--) { [EOL]                 p *= f[i].derivative().value(r); [EOL]                 r = f[i].value(r); [EOL]             } [EOL]             return p; [EOL]         } [EOL]     }; [EOL] } <line_num>: 121,134
@Deprecated [EOL] public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f) { [EOL]     return new DifferentiableUnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             double r = x; [EOL]             for (int i = f.length - 1; i >= 0; i--) { [EOL]                 r = f[i].value(r); [EOL]             } [EOL]             return r; [EOL]         } [EOL]  [EOL]         public UnivariateFunction derivative() { [EOL]             return new UnivariateFunction() { [EOL]  [EOL]                 public double value(double x) { [EOL]                     double p = 1; [EOL]                     double r = x; [EOL]                     for (int i = f.length - 1; i >= 0; i--) { [EOL]                         p *= f[i].derivative().value(r); [EOL]                         r = f[i].value(r); [EOL]                     } [EOL]                     return p; [EOL]                 } [EOL]             }; [EOL]         } [EOL]     }; [EOL] } <line_num>: 108,136
public double value(double x) { [EOL]     double r = f[0].value(x); [EOL]     for (int i = 1; i < f.length; i++) { [EOL]         r += f[i].value(x); [EOL]     } [EOL]     return r; [EOL] } <line_num>: 147,153
public static UnivariateFunction add(final UnivariateFunction... f) { [EOL]     return new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             double r = f[0].value(x); [EOL]             for (int i = 1; i < f.length; i++) { [EOL]                 r += f[i].value(x); [EOL]             } [EOL]             return r; [EOL]         } [EOL]     }; [EOL] } <line_num>: 144,155
public double value(final double t) { [EOL]     double r = f[0].value(t); [EOL]     for (int i = 1; i < f.length; i++) { [EOL]         r += f[i].value(t); [EOL]     } [EOL]     return r; [EOL] } <line_num>: 168,174
public DerivativeStructure value(final DerivativeStructure t) throws DimensionMismatchException { [EOL]     DerivativeStructure r = f[0].value(t); [EOL]     for (int i = 1; i < f.length; i++) { [EOL]         r = r.add(f[i].value(t)); [EOL]     } [EOL]     return r; [EOL] } <line_num>: 179,186
public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f) { [EOL]     return new UnivariateDifferentiableFunction() { [EOL]  [EOL]         public double value(final double t) { [EOL]             double r = f[0].value(t); [EOL]             for (int i = 1; i < f.length; i++) { [EOL]                 r += f[i].value(t); [EOL]             } [EOL]             return r; [EOL]         } [EOL]  [EOL]         public DerivativeStructure value(final DerivativeStructure t) throws DimensionMismatchException { [EOL]             DerivativeStructure r = f[0].value(t); [EOL]             for (int i = 1; i < f.length; i++) { [EOL]                 r = r.add(f[i].value(t)); [EOL]             } [EOL]             return r; [EOL]         } [EOL]     }; [EOL] } <line_num>: 164,189
public double value(double x) { [EOL]     double r = f[0].value(x); [EOL]     for (int i = 1; i < f.length; i++) { [EOL]         r += f[i].value(x); [EOL]     } [EOL]     return r; [EOL] } <line_num>: 202,208
public double value(double x) { [EOL]     double r = f[0].derivative().value(x); [EOL]     for (int i = 1; i < f.length; i++) { [EOL]         r += f[i].derivative().value(x); [EOL]     } [EOL]     return r; [EOL] } <line_num>: 214,220
public UnivariateFunction derivative() { [EOL]     return new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             double r = f[0].derivative().value(x); [EOL]             for (int i = 1; i < f.length; i++) { [EOL]                 r += f[i].derivative().value(x); [EOL]             } [EOL]             return r; [EOL]         } [EOL]     }; [EOL] } <line_num>: 211,222
@Deprecated [EOL] public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f) { [EOL]     return new DifferentiableUnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             double r = f[0].value(x); [EOL]             for (int i = 1; i < f.length; i++) { [EOL]                 r += f[i].value(x); [EOL]             } [EOL]             return r; [EOL]         } [EOL]  [EOL]         public UnivariateFunction derivative() { [EOL]             return new UnivariateFunction() { [EOL]  [EOL]                 public double value(double x) { [EOL]                     double r = f[0].derivative().value(x); [EOL]                     for (int i = 1; i < f.length; i++) { [EOL]                         r += f[i].derivative().value(x); [EOL]                     } [EOL]                     return r; [EOL]                 } [EOL]             }; [EOL]         } [EOL]     }; [EOL] } <line_num>: 198,224
public double value(double x) { [EOL]     double r = f[0].value(x); [EOL]     for (int i = 1; i < f.length; i++) { [EOL]         r *= f[i].value(x); [EOL]     } [EOL]     return r; [EOL] } <line_num>: 235,241
public static UnivariateFunction multiply(final UnivariateFunction... f) { [EOL]     return new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             double r = f[0].value(x); [EOL]             for (int i = 1; i < f.length; i++) { [EOL]                 r *= f[i].value(x); [EOL]             } [EOL]             return r; [EOL]         } [EOL]     }; [EOL] } <line_num>: 232,243
public double value(final double t) { [EOL]     double r = f[0].value(t); [EOL]     for (int i = 1; i < f.length; i++) { [EOL]         r *= f[i].value(t); [EOL]     } [EOL]     return r; [EOL] } <line_num>: 256,262
public DerivativeStructure value(final DerivativeStructure t) { [EOL]     DerivativeStructure r = f[0].value(t); [EOL]     for (int i = 1; i < f.length; i++) { [EOL]         r = r.multiply(f[i].value(t)); [EOL]     } [EOL]     return r; [EOL] } <line_num>: 265,271
public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f) { [EOL]     return new UnivariateDifferentiableFunction() { [EOL]  [EOL]         public double value(final double t) { [EOL]             double r = f[0].value(t); [EOL]             for (int i = 1; i < f.length; i++) { [EOL]                 r *= f[i].value(t); [EOL]             } [EOL]             return r; [EOL]         } [EOL]  [EOL]         public DerivativeStructure value(final DerivativeStructure t) { [EOL]             DerivativeStructure r = f[0].value(t); [EOL]             for (int i = 1; i < f.length; i++) { [EOL]                 r = r.multiply(f[i].value(t)); [EOL]             } [EOL]             return r; [EOL]         } [EOL]     }; [EOL] } <line_num>: 252,274
public double value(double x) { [EOL]     double r = f[0].value(x); [EOL]     for (int i = 1; i < f.length; i++) { [EOL]         r *= f[i].value(x); [EOL]     } [EOL]     return r; [EOL] } <line_num>: 287,293
public double value(double x) { [EOL]     double sum = 0; [EOL]     for (int i = 0; i < f.length; i++) { [EOL]         double prod = f[i].derivative().value(x); [EOL]         for (int j = 0; j < f.length; j++) { [EOL]             if (i != j) { [EOL]                 prod *= f[j].value(x); [EOL]             } [EOL]         } [EOL]         sum += prod; [EOL]     } [EOL]     return sum; [EOL] } <line_num>: 299,311
public UnivariateFunction derivative() { [EOL]     return new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             double sum = 0; [EOL]             for (int i = 0; i < f.length; i++) { [EOL]                 double prod = f[i].derivative().value(x); [EOL]                 for (int j = 0; j < f.length; j++) { [EOL]                     if (i != j) { [EOL]                         prod *= f[j].value(x); [EOL]                     } [EOL]                 } [EOL]                 sum += prod; [EOL]             } [EOL]             return sum; [EOL]         } [EOL]     }; [EOL] } <line_num>: 296,313
@Deprecated [EOL] public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f) { [EOL]     return new DifferentiableUnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             double r = f[0].value(x); [EOL]             for (int i = 1; i < f.length; i++) { [EOL]                 r *= f[i].value(x); [EOL]             } [EOL]             return r; [EOL]         } [EOL]  [EOL]         public UnivariateFunction derivative() { [EOL]             return new UnivariateFunction() { [EOL]  [EOL]                 public double value(double x) { [EOL]                     double sum = 0; [EOL]                     for (int i = 0; i < f.length; i++) { [EOL]                         double prod = f[i].derivative().value(x); [EOL]                         for (int j = 0; j < f.length; j++) { [EOL]                             if (i != j) { [EOL]                                 prod *= f[j].value(x); [EOL]                             } [EOL]                         } [EOL]                         sum += prod; [EOL]                     } [EOL]                     return sum; [EOL]                 } [EOL]             }; [EOL]         } [EOL]     }; [EOL] } <line_num>: 283,315
public double value(double x) { [EOL]     return combiner.value(f.value(x), g.value(x)); [EOL] } <line_num>: 331,333
public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g) { [EOL]     return new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             return combiner.value(f.value(x), g.value(x)); [EOL]         } [EOL]     }; [EOL] } <line_num>: 326,335
public double value(double[] point) { [EOL]     double result = combiner.value(initialValue, f.value(point[0])); [EOL]     for (int i = 1; i < point.length; i++) { [EOL]         result = combiner.value(result, f.value(point[i])); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 352,358
public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue) { [EOL]     return new MultivariateFunction() { [EOL]  [EOL]         public double value(double[] point) { [EOL]             double result = combiner.value(initialValue, f.value(point[0])); [EOL]             for (int i = 1; i < point.length; i++) { [EOL]                 result = combiner.value(result, f.value(point[i])); [EOL]             } [EOL]             return result; [EOL]         } [EOL]     }; [EOL] } <line_num>: 347,360
public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue) { [EOL]     return collector(combiner, new Identity(), initialValue); [EOL] } <line_num>: 371,374
public double value(double x) { [EOL]     return f.value(fixed, x); [EOL] } <line_num>: 387,389
public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed) { [EOL]     return new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             return f.value(fixed, x); [EOL]         } [EOL]     }; [EOL] } <line_num>: 383,391
public double value(double x) { [EOL]     return f.value(x, fixed); [EOL] } <line_num>: 403,405
public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed) { [EOL]     return new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             return f.value(x, fixed); [EOL]         } [EOL]     }; [EOL] } <line_num>: 399,407
public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException { [EOL]     if (n <= 0) { [EOL]         throw new NotStrictlyPositiveException(LocalizedFormats.NOT_POSITIVE_NUMBER_OF_SAMPLES, Integer.valueOf(n)); [EOL]     } [EOL]     if (min >= max) { [EOL]         throw new NumberIsTooLargeException(min, max, false); [EOL]     } [EOL]     final double[] s = new double[n]; [EOL]     final double h = (max - min) / n; [EOL]     for (int i = 0; i < n; i++) { [EOL]         s[i] = f.value(min + i * h); [EOL]     } [EOL]     return s; [EOL] } <line_num>: 426,444
public double value(final double x) { [EOL]     return f.value(x); [EOL] } <line_num>: 457,459
public double value(final double x) { [EOL]     return f.value(new DerivativeStructure(1, 1, 0, x)).getPartialDerivative(1); [EOL] } <line_num>: 465,467
public UnivariateFunction derivative() { [EOL]     return new UnivariateFunction() { [EOL]  [EOL]         public double value(final double x) { [EOL]             return f.value(new DerivativeStructure(1, 1, 0, x)).getPartialDerivative(1); [EOL]         } [EOL]     }; [EOL] } <line_num>: 462,469
@Deprecated [EOL] public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f) { [EOL]     return new DifferentiableUnivariateFunction() { [EOL]  [EOL]         public double value(final double x) { [EOL]             return f.value(x); [EOL]         } [EOL]  [EOL]         public UnivariateFunction derivative() { [EOL]             return new UnivariateFunction() { [EOL]  [EOL]                 public double value(final double x) { [EOL]                     return f.value(new DerivativeStructure(1, 1, 0, x)).getPartialDerivative(1); [EOL]                 } [EOL]             }; [EOL]         } [EOL]     }; [EOL] } <line_num>: 452,472
public double value(final double x) { [EOL]     return f.value(x); [EOL] } <line_num>: 489,491
public DerivativeStructure value(final DerivativeStructure t) throws NumberIsTooLargeException { [EOL]     switch(t.getOrder()) { [EOL]         case 0: [EOL]             return new DerivativeStructure(t.getFreeParameters(), 0, f.value(t.getValue())); [EOL]         case 1: [EOL]             { [EOL]                 final int parameters = t.getFreeParameters(); [EOL]                 final double[] derivatives = new double[parameters + 1]; [EOL]                 derivatives[0] = f.value(t.getValue()); [EOL]                 final double fPrime = f.derivative().value(t.getValue()); [EOL]                 int[] orders = new int[parameters]; [EOL]                 for (int i = 0; i < parameters; ++i) { [EOL]                     orders[i] = 1; [EOL]                     derivatives[i + 1] = fPrime * t.getPartialDerivative(orders); [EOL]                     orders[i] = 0; [EOL]                 } [EOL]                 return new DerivativeStructure(parameters, 1, derivatives); [EOL]             } [EOL]         default: [EOL]             throw new NumberIsTooLargeException(t.getOrder(), 1, true); [EOL]     } [EOL] } <line_num>: 496,517
@Deprecated [EOL] public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f) { [EOL]     return new UnivariateDifferentiableFunction() { [EOL]  [EOL]         public double value(final double x) { [EOL]             return f.value(x); [EOL]         } [EOL]  [EOL]         public DerivativeStructure value(final DerivativeStructure t) throws NumberIsTooLargeException { [EOL]             switch(t.getOrder()) { [EOL]                 case 0: [EOL]                     return new DerivativeStructure(t.getFreeParameters(), 0, f.value(t.getValue())); [EOL]                 case 1: [EOL]                     { [EOL]                         final int parameters = t.getFreeParameters(); [EOL]                         final double[] derivatives = new double[parameters + 1]; [EOL]                         derivatives[0] = f.value(t.getValue()); [EOL]                         final double fPrime = f.derivative().value(t.getValue()); [EOL]                         int[] orders = new int[parameters]; [EOL]                         for (int i = 0; i < parameters; ++i) { [EOL]                             orders[i] = 1; [EOL]                             derivatives[i + 1] = fPrime * t.getPartialDerivative(orders); [EOL]                             orders[i] = 0; [EOL]                         } [EOL]                         return new DerivativeStructure(parameters, 1, derivatives); [EOL]                     } [EOL]                 default: [EOL]                     throw new NumberIsTooLargeException(t.getOrder(), 1, true); [EOL]             } [EOL]         } [EOL]     }; [EOL] } <line_num>: 484,520
public double value(final double[] x) { [EOL]     return f.value(x); [EOL] } <line_num>: 533,535
public double value(final double[] x) { [EOL]     final int n = x.length; [EOL]     final DerivativeStructure[] dsX = new DerivativeStructure[n]; [EOL]     for (int i = 0; i < n; ++i) { [EOL]         if (i == k) { [EOL]             dsX[i] = new DerivativeStructure(1, 1, 0, x[i]); [EOL]         } else { [EOL]             dsX[i] = new DerivativeStructure(1, 1, x[i]); [EOL]         } [EOL]     } [EOL]     final DerivativeStructure y = f.value(dsX); [EOL]     return y.getPartialDerivative(1); [EOL] } <line_num>: 541,559
public MultivariateFunction partialDerivative(final int k) { [EOL]     return new MultivariateFunction() { [EOL]  [EOL]         public double value(final double[] x) { [EOL]             final int n = x.length; [EOL]             final DerivativeStructure[] dsX = new DerivativeStructure[n]; [EOL]             for (int i = 0; i < n; ++i) { [EOL]                 if (i == k) { [EOL]                     dsX[i] = new DerivativeStructure(1, 1, 0, x[i]); [EOL]                 } else { [EOL]                     dsX[i] = new DerivativeStructure(1, 1, x[i]); [EOL]                 } [EOL]             } [EOL]             final DerivativeStructure y = f.value(dsX); [EOL]             return y.getPartialDerivative(1); [EOL]         } [EOL]     }; [EOL] } <line_num>: 538,561
public double[] value(final double[] x) { [EOL]     final int n = x.length; [EOL]     final DerivativeStructure[] dsX = new DerivativeStructure[n]; [EOL]     for (int i = 0; i < n; ++i) { [EOL]         dsX[i] = new DerivativeStructure(n, 1, i, x[i]); [EOL]     } [EOL]     final DerivativeStructure y = f.value(dsX); [EOL]     final double[] gradient = new double[n]; [EOL]     final int[] orders = new int[n]; [EOL]     for (int i = 0; i < n; ++i) { [EOL]         orders[i] = 1; [EOL]         gradient[i] = y.getPartialDerivative(orders); [EOL]         orders[i] = 0; [EOL]     } [EOL]     return gradient; [EOL] } <line_num>: 566,588
public MultivariateVectorFunction gradient() { [EOL]     return new MultivariateVectorFunction() { [EOL]  [EOL]         public double[] value(final double[] x) { [EOL]             final int n = x.length; [EOL]             final DerivativeStructure[] dsX = new DerivativeStructure[n]; [EOL]             for (int i = 0; i < n; ++i) { [EOL]                 dsX[i] = new DerivativeStructure(n, 1, i, x[i]); [EOL]             } [EOL]             final DerivativeStructure y = f.value(dsX); [EOL]             final double[] gradient = new double[n]; [EOL]             final int[] orders = new int[n]; [EOL]             for (int i = 0; i < n; ++i) { [EOL]                 orders[i] = 1; [EOL]                 gradient[i] = y.getPartialDerivative(orders); [EOL]                 orders[i] = 0; [EOL]             } [EOL]             return gradient; [EOL]         } [EOL]     }; [EOL] } <line_num>: 563,590
@Deprecated [EOL] public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f) { [EOL]     return new DifferentiableMultivariateFunction() { [EOL]  [EOL]         public double value(final double[] x) { [EOL]             return f.value(x); [EOL]         } [EOL]  [EOL]         public MultivariateFunction partialDerivative(final int k) { [EOL]             return new MultivariateFunction() { [EOL]  [EOL]                 public double value(final double[] x) { [EOL]                     final int n = x.length; [EOL]                     final DerivativeStructure[] dsX = new DerivativeStructure[n]; [EOL]                     for (int i = 0; i < n; ++i) { [EOL]                         if (i == k) { [EOL]                             dsX[i] = new DerivativeStructure(1, 1, 0, x[i]); [EOL]                         } else { [EOL]                             dsX[i] = new DerivativeStructure(1, 1, x[i]); [EOL]                         } [EOL]                     } [EOL]                     final DerivativeStructure y = f.value(dsX); [EOL]                     return y.getPartialDerivative(1); [EOL]                 } [EOL]             }; [EOL]         } [EOL]  [EOL]         public MultivariateVectorFunction gradient() { [EOL]             return new MultivariateVectorFunction() { [EOL]  [EOL]                 public double[] value(final double[] x) { [EOL]                     final int n = x.length; [EOL]                     final DerivativeStructure[] dsX = new DerivativeStructure[n]; [EOL]                     for (int i = 0; i < n; ++i) { [EOL]                         dsX[i] = new DerivativeStructure(n, 1, i, x[i]); [EOL]                     } [EOL]                     final DerivativeStructure y = f.value(dsX); [EOL]                     final double[] gradient = new double[n]; [EOL]                     final int[] orders = new int[n]; [EOL]                     for (int i = 0; i < n; ++i) { [EOL]                         orders[i] = 1; [EOL]                         gradient[i] = y.getPartialDerivative(orders); [EOL]                         orders[i] = 0; [EOL]                     } [EOL]                     return gradient; [EOL]                 } [EOL]             }; [EOL]         } [EOL]     }; [EOL] } <line_num>: 528,593
public double value(final double[] x) { [EOL]     return f.value(x); [EOL] } <line_num>: 612,614
public DerivativeStructure value(final DerivativeStructure[] t) throws DimensionMismatchException, NumberIsTooLargeException { [EOL]     final int parameters = t[0].getFreeParameters(); [EOL]     final int order = t[0].getOrder(); [EOL]     final int n = t.length; [EOL]     if (order > 1) { [EOL]         throw new NumberIsTooLargeException(order, 1, true); [EOL]     } [EOL]     for (int i = 0; i < n; ++i) { [EOL]         if (t[i].getFreeParameters() != parameters) { [EOL]             throw new DimensionMismatchException(t[i].getFreeParameters(), parameters); [EOL]         } [EOL]         if (t[i].getOrder() != order) { [EOL]             throw new DimensionMismatchException(t[i].getOrder(), order); [EOL]         } [EOL]     } [EOL]     final double[] point = new double[n]; [EOL]     for (int i = 0; i < n; ++i) { [EOL]         point[i] = t[i].getValue(); [EOL]     } [EOL]     final double value = f.value(point); [EOL]     final double[] gradient = f.gradient().value(point); [EOL]     final double[] derivatives = new double[parameters + 1]; [EOL]     derivatives[0] = value; [EOL]     final int[] orders = new int[parameters]; [EOL]     for (int i = 0; i < parameters; ++i) { [EOL]         orders[i] = 1; [EOL]         for (int j = 0; j < n; ++j) { [EOL]             derivatives[i + 1] += gradient[j] * t[j].getPartialDerivative(orders); [EOL]         } [EOL]         orders[i] = 0; [EOL]     } [EOL]     return new DerivativeStructure(parameters, order, derivatives); [EOL] } <line_num>: 620,664
@Deprecated [EOL] public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f) { [EOL]     return new MultivariateDifferentiableFunction() { [EOL]  [EOL]         public double value(final double[] x) { [EOL]             return f.value(x); [EOL]         } [EOL]  [EOL]         public DerivativeStructure value(final DerivativeStructure[] t) throws DimensionMismatchException, NumberIsTooLargeException { [EOL]             final int parameters = t[0].getFreeParameters(); [EOL]             final int order = t[0].getOrder(); [EOL]             final int n = t.length; [EOL]             if (order > 1) { [EOL]                 throw new NumberIsTooLargeException(order, 1, true); [EOL]             } [EOL]             for (int i = 0; i < n; ++i) { [EOL]                 if (t[i].getFreeParameters() != parameters) { [EOL]                     throw new DimensionMismatchException(t[i].getFreeParameters(), parameters); [EOL]                 } [EOL]                 if (t[i].getOrder() != order) { [EOL]                     throw new DimensionMismatchException(t[i].getOrder(), order); [EOL]                 } [EOL]             } [EOL]             final double[] point = new double[n]; [EOL]             for (int i = 0; i < n; ++i) { [EOL]                 point[i] = t[i].getValue(); [EOL]             } [EOL]             final double value = f.value(point); [EOL]             final double[] gradient = f.gradient().value(point); [EOL]             final double[] derivatives = new double[parameters + 1]; [EOL]             derivatives[0] = value; [EOL]             final int[] orders = new int[parameters]; [EOL]             for (int i = 0; i < parameters; ++i) { [EOL]                 orders[i] = 1; [EOL]                 for (int j = 0; j < n; ++j) { [EOL]                     derivatives[i + 1] += gradient[j] * t[j].getPartialDerivative(orders); [EOL]                 } [EOL]                 orders[i] = 0; [EOL]             } [EOL]             return new DerivativeStructure(parameters, order, derivatives); [EOL]         } [EOL]     }; [EOL] } <line_num>: 607,667
public double[] value(final double[] x) { [EOL]     return f.value(x); [EOL] } <line_num>: 680,682
public double[][] value(final double[] x) { [EOL]     final int n = x.length; [EOL]     final DerivativeStructure[] dsX = new DerivativeStructure[n]; [EOL]     for (int i = 0; i < n; ++i) { [EOL]         dsX[i] = new DerivativeStructure(n, 1, i, x[i]); [EOL]     } [EOL]     final DerivativeStructure[] y = f.value(dsX); [EOL]     final double[][] jacobian = new double[y.length][n]; [EOL]     final int[] orders = new int[n]; [EOL]     for (int i = 0; i < y.length; ++i) { [EOL]         for (int j = 0; j < n; ++j) { [EOL]             orders[j] = 1; [EOL]             jacobian[i][j] = y[i].getPartialDerivative(orders); [EOL]             orders[j] = 0; [EOL]         } [EOL]     } [EOL]     return jacobian; [EOL] } <line_num>: 687,711
public MultivariateMatrixFunction jacobian() { [EOL]     return new MultivariateMatrixFunction() { [EOL]  [EOL]         public double[][] value(final double[] x) { [EOL]             final int n = x.length; [EOL]             final DerivativeStructure[] dsX = new DerivativeStructure[n]; [EOL]             for (int i = 0; i < n; ++i) { [EOL]                 dsX[i] = new DerivativeStructure(n, 1, i, x[i]); [EOL]             } [EOL]             final DerivativeStructure[] y = f.value(dsX); [EOL]             final double[][] jacobian = new double[y.length][n]; [EOL]             final int[] orders = new int[n]; [EOL]             for (int i = 0; i < y.length; ++i) { [EOL]                 for (int j = 0; j < n; ++j) { [EOL]                     orders[j] = 1; [EOL]                     jacobian[i][j] = y[i].getPartialDerivative(orders); [EOL]                     orders[j] = 0; [EOL]                 } [EOL]             } [EOL]             return jacobian; [EOL]         } [EOL]     }; [EOL] } <line_num>: 684,713
@Deprecated [EOL] public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f) { [EOL]     return new DifferentiableMultivariateVectorFunction() { [EOL]  [EOL]         public double[] value(final double[] x) { [EOL]             return f.value(x); [EOL]         } [EOL]  [EOL]         public MultivariateMatrixFunction jacobian() { [EOL]             return new MultivariateMatrixFunction() { [EOL]  [EOL]                 public double[][] value(final double[] x) { [EOL]                     final int n = x.length; [EOL]                     final DerivativeStructure[] dsX = new DerivativeStructure[n]; [EOL]                     for (int i = 0; i < n; ++i) { [EOL]                         dsX[i] = new DerivativeStructure(n, 1, i, x[i]); [EOL]                     } [EOL]                     final DerivativeStructure[] y = f.value(dsX); [EOL]                     final double[][] jacobian = new double[y.length][n]; [EOL]                     final int[] orders = new int[n]; [EOL]                     for (int i = 0; i < y.length; ++i) { [EOL]                         for (int j = 0; j < n; ++j) { [EOL]                             orders[j] = 1; [EOL]                             jacobian[i][j] = y[i].getPartialDerivative(orders); [EOL]                             orders[j] = 0; [EOL]                         } [EOL]                     } [EOL]                     return jacobian; [EOL]                 } [EOL]             }; [EOL]         } [EOL]     }; [EOL] } <line_num>: 675,716
public double[] value(final double[] x) { [EOL]     return f.value(x); [EOL] } <line_num>: 735,737
public DerivativeStructure[] value(final DerivativeStructure[] t) throws DimensionMismatchException, NumberIsTooLargeException { [EOL]     final int parameters = t[0].getFreeParameters(); [EOL]     final int order = t[0].getOrder(); [EOL]     final int n = t.length; [EOL]     if (order > 1) { [EOL]         throw new NumberIsTooLargeException(order, 1, true); [EOL]     } [EOL]     for (int i = 0; i < n; ++i) { [EOL]         if (t[i].getFreeParameters() != parameters) { [EOL]             throw new DimensionMismatchException(t[i].getFreeParameters(), parameters); [EOL]         } [EOL]         if (t[i].getOrder() != order) { [EOL]             throw new DimensionMismatchException(t[i].getOrder(), order); [EOL]         } [EOL]     } [EOL]     final double[] point = new double[n]; [EOL]     for (int i = 0; i < n; ++i) { [EOL]         point[i] = t[i].getValue(); [EOL]     } [EOL]     final double[] value = f.value(point); [EOL]     final double[][] jacobian = f.jacobian().value(point); [EOL]     final DerivativeStructure[] merged = new DerivativeStructure[value.length]; [EOL]     for (int k = 0; k < merged.length; ++k) { [EOL]         final double[] derivatives = new double[parameters + 1]; [EOL]         derivatives[0] = value[k]; [EOL]         final int[] orders = new int[parameters]; [EOL]         for (int i = 0; i < parameters; ++i) { [EOL]             orders[i] = 1; [EOL]             for (int j = 0; j < n; ++j) { [EOL]                 derivatives[i + 1] += jacobian[k][j] * t[j].getPartialDerivative(orders); [EOL]             } [EOL]             orders[i] = 0; [EOL]         } [EOL]         merged[k] = new DerivativeStructure(parameters, order, derivatives); [EOL]     } [EOL]     return merged; [EOL] } <line_num>: 743,791
@Deprecated [EOL] public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f) { [EOL]     return new MultivariateDifferentiableVectorFunction() { [EOL]  [EOL]         public double[] value(final double[] x) { [EOL]             return f.value(x); [EOL]         } [EOL]  [EOL]         public DerivativeStructure[] value(final DerivativeStructure[] t) throws DimensionMismatchException, NumberIsTooLargeException { [EOL]             final int parameters = t[0].getFreeParameters(); [EOL]             final int order = t[0].getOrder(); [EOL]             final int n = t.length; [EOL]             if (order > 1) { [EOL]                 throw new NumberIsTooLargeException(order, 1, true); [EOL]             } [EOL]             for (int i = 0; i < n; ++i) { [EOL]                 if (t[i].getFreeParameters() != parameters) { [EOL]                     throw new DimensionMismatchException(t[i].getFreeParameters(), parameters); [EOL]                 } [EOL]                 if (t[i].getOrder() != order) { [EOL]                     throw new DimensionMismatchException(t[i].getOrder(), order); [EOL]                 } [EOL]             } [EOL]             final double[] point = new double[n]; [EOL]             for (int i = 0; i < n; ++i) { [EOL]                 point[i] = t[i].getValue(); [EOL]             } [EOL]             final double[] value = f.value(point); [EOL]             final double[][] jacobian = f.jacobian().value(point); [EOL]             final DerivativeStructure[] merged = new DerivativeStructure[value.length]; [EOL]             for (int k = 0; k < merged.length; ++k) { [EOL]                 final double[] derivatives = new double[parameters + 1]; [EOL]                 derivatives[0] = value[k]; [EOL]                 final int[] orders = new int[parameters]; [EOL]                 for (int i = 0; i < parameters; ++i) { [EOL]                     orders[i] = 1; [EOL]                     for (int j = 0; j < n; ++j) { [EOL]                         derivatives[i + 1] += jacobian[k][j] * t[j].getPartialDerivative(orders); [EOL]                     } [EOL]                     orders[i] = 0; [EOL]                 } [EOL]                 merged[k] = new DerivativeStructure(parameters, order, derivatives); [EOL]             } [EOL]             return merged; [EOL]         } [EOL]     }; [EOL] } <line_num>: 730,794
