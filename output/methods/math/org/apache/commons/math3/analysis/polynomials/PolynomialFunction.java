public PolynomialFunction(double[] c) throws NullArgumentException, NoDataException { [EOL]     super(); [EOL]     MathUtils.checkNotNull(c); [EOL]     int n = c.length; [EOL]     if (n == 0) { [EOL]         throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY); [EOL]     } [EOL]     while ((n > 1) && (c[n - 1] == 0)) { [EOL]         --n; [EOL]     } [EOL]     this.coefficients = new double[n]; [EOL]     System.arraycopy(c, 0, this.coefficients, 0, n); [EOL] } <line_num>: 67,80
public double value(double x) { [EOL]     return evaluate(coefficients, x); [EOL] } <line_num>: 93,95
public int degree() { [EOL]     return coefficients.length - 1; [EOL] } <line_num>: 102,104
public double[] getCoefficients() { [EOL]     return coefficients.clone(); [EOL] } <line_num>: 114,116
protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException { [EOL]     MathUtils.checkNotNull(coefficients); [EOL]     int n = coefficients.length; [EOL]     if (n == 0) { [EOL]         throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY); [EOL]     } [EOL]     double result = coefficients[n - 1]; [EOL]     for (int j = n - 2; j >= 0; j--) { [EOL]         result = argument * result + coefficients[j]; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 128,140
public DerivativeStructure value(final DerivativeStructure t) throws NullArgumentException, NoDataException { [EOL]     MathUtils.checkNotNull(coefficients); [EOL]     int n = coefficients.length; [EOL]     if (n == 0) { [EOL]         throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY); [EOL]     } [EOL]     DerivativeStructure result = new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]); [EOL]     for (int j = n - 2; j >= 0; j--) { [EOL]         result = result.multiply(t).add(coefficients[j]); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 148,161
public PolynomialFunction add(final PolynomialFunction p) { [EOL]     final int lowLength = FastMath.min(coefficients.length, p.coefficients.length); [EOL]     final int highLength = FastMath.max(coefficients.length, p.coefficients.length); [EOL]     double[] newCoefficients = new double[highLength]; [EOL]     for (int i = 0; i < lowLength; ++i) { [EOL]         newCoefficients[i] = coefficients[i] + p.coefficients[i]; [EOL]     } [EOL]     System.arraycopy((coefficients.length < p.coefficients.length) ? p.coefficients : coefficients, lowLength, newCoefficients, lowLength, highLength - lowLength); [EOL]     return new PolynomialFunction(newCoefficients); [EOL] } <line_num>: 169,186
public PolynomialFunction subtract(final PolynomialFunction p) { [EOL]     int lowLength = FastMath.min(coefficients.length, p.coefficients.length); [EOL]     int highLength = FastMath.max(coefficients.length, p.coefficients.length); [EOL]     double[] newCoefficients = new double[highLength]; [EOL]     for (int i = 0; i < lowLength; ++i) { [EOL]         newCoefficients[i] = coefficients[i] - p.coefficients[i]; [EOL]     } [EOL]     if (coefficients.length < p.coefficients.length) { [EOL]         for (int i = lowLength; i < highLength; ++i) { [EOL]             newCoefficients[i] = -p.coefficients[i]; [EOL]         } [EOL]     } else { [EOL]         System.arraycopy(coefficients, lowLength, newCoefficients, lowLength, highLength - lowLength); [EOL]     } [EOL]     return new PolynomialFunction(newCoefficients); [EOL] } <line_num>: 194,214
public PolynomialFunction negate() { [EOL]     double[] newCoefficients = new double[coefficients.length]; [EOL]     for (int i = 0; i < coefficients.length; ++i) { [EOL]         newCoefficients[i] = -coefficients[i]; [EOL]     } [EOL]     return new PolynomialFunction(newCoefficients); [EOL] } <line_num>: 221,227
public PolynomialFunction multiply(final PolynomialFunction p) { [EOL]     double[] newCoefficients = new double[coefficients.length + p.coefficients.length - 1]; [EOL]     for (int i = 0; i < newCoefficients.length; ++i) { [EOL]         newCoefficients[i] = 0.0; [EOL]         for (int j = FastMath.max(0, i + 1 - p.coefficients.length); j < FastMath.min(coefficients.length, i + 1); ++j) { [EOL]             newCoefficients[i] += coefficients[j] * p.coefficients[i - j]; [EOL]         } [EOL]     } [EOL]     return new PolynomialFunction(newCoefficients); [EOL] } <line_num>: 235,248
protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException { [EOL]     MathUtils.checkNotNull(coefficients); [EOL]     int n = coefficients.length; [EOL]     if (n == 0) { [EOL]         throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY); [EOL]     } [EOL]     if (n == 1) { [EOL]         return new double[] { 0 }; [EOL]     } [EOL]     double[] result = new double[n - 1]; [EOL]     for (int i = n - 1; i > 0; i--) { [EOL]         result[i - 1] = i * coefficients[i]; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 258,273
public PolynomialFunction polynomialDerivative() { [EOL]     return new PolynomialFunction(differentiate(coefficients)); [EOL] } <line_num>: 280,282
public UnivariateFunction derivative() { [EOL]     return polynomialDerivative(); [EOL] } <line_num>: 289,291
@Override [EOL] public String toString() { [EOL]     StringBuilder s = new StringBuilder(); [EOL]     if (coefficients[0] == 0.0) { [EOL]         if (coefficients.length == 1) { [EOL]             return "0"; [EOL]         } [EOL]     } else { [EOL]         s.append(toString(coefficients[0])); [EOL]     } [EOL]     for (int i = 1; i < coefficients.length; ++i) { [EOL]         if (coefficients[i] != 0) { [EOL]             if (s.length() > 0) { [EOL]                 if (coefficients[i] < 0) { [EOL]                     s.append(" - "); [EOL]                 } else { [EOL]                     s.append(" + "); [EOL]                 } [EOL]             } else { [EOL]                 if (coefficients[i] < 0) { [EOL]                     s.append("-"); [EOL]                 } [EOL]             } [EOL]             double absAi = FastMath.abs(coefficients[i]); [EOL]             if ((absAi - 1) != 0) { [EOL]                 s.append(toString(absAi)); [EOL]                 s.append(' '); [EOL]             } [EOL]             s.append("x"); [EOL]             if (i > 1) { [EOL]                 s.append('^'); [EOL]                 s.append(Integer.toString(i)); [EOL]             } [EOL]         } [EOL]     } [EOL]     return s.toString(); [EOL] } <line_num>: 308,348
private static String toString(double coeff) { [EOL]     final String c = Double.toString(coeff); [EOL]     if (c.endsWith(".0")) { [EOL]         return c.substring(0, c.length() - 2); [EOL]     } else { [EOL]         return c; [EOL]     } [EOL] } <line_num>: 356,363
@Override [EOL] public int hashCode() { [EOL]     final int prime = 31; [EOL]     int result = 1; [EOL]     result = prime * result + Arrays.hashCode(coefficients); [EOL]     return result; [EOL] } <line_num>: 366,372
@Override [EOL] public boolean equals(Object obj) { [EOL]     if (this == obj) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof PolynomialFunction)) { [EOL]         return false; [EOL]     } [EOL]     PolynomialFunction other = (PolynomialFunction) obj; [EOL]     if (!Arrays.equals(coefficients, other.coefficients)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 375,388
public double[] gradient(double x, double... parameters) { [EOL]     final double[] gradient = new double[parameters.length]; [EOL]     double xn = 1.0; [EOL]     for (int i = 0; i < parameters.length; ++i) { [EOL]         gradient[i] = xn; [EOL]         xn *= x; [EOL]     } [EOL]     return gradient; [EOL] } <line_num>: 397,405
public double value(final double x, final double... parameters) throws NoDataException { [EOL]     return PolynomialFunction.evaluate(parameters, x); [EOL] } <line_num>: 408,411
