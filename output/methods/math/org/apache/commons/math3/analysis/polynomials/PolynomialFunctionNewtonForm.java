public PolynomialFunctionNewtonForm(double[] a, double[] c) throws NullArgumentException, NoDataException, DimensionMismatchException { [EOL]     verifyInputArray(a, c); [EOL]     this.a = new double[a.length]; [EOL]     this.c = new double[c.length]; [EOL]     System.arraycopy(a, 0, this.a, 0, a.length); [EOL]     System.arraycopy(c, 0, this.c, 0, c.length); [EOL]     coefficientsComputed = false; [EOL] } <line_num>: 79,88
public double value(double z) { [EOL]     return evaluate(a, c, z); [EOL] } <line_num>: 96,98
public DerivativeStructure value(final DerivativeStructure t) { [EOL]     verifyInputArray(a, c); [EOL]     final int n = c.length; [EOL]     DerivativeStructure value = new DerivativeStructure(t.getFreeParameters(), t.getOrder(), a[n]); [EOL]     for (int i = n - 1; i >= 0; i--) { [EOL]         value = t.subtract(c[i]).multiply(value).add(a[i]); [EOL]     } [EOL]     return value; [EOL] } <line_num>: 104,115
public int degree() { [EOL]     return c.length; [EOL] } <line_num>: 122,124
public double[] getNewtonCoefficients() { [EOL]     double[] out = new double[a.length]; [EOL]     System.arraycopy(a, 0, out, 0, a.length); [EOL]     return out; [EOL] } <line_num>: 133,137
public double[] getCenters() { [EOL]     double[] out = new double[c.length]; [EOL]     System.arraycopy(c, 0, out, 0, c.length); [EOL]     return out; [EOL] } <line_num>: 146,150
public double[] getCoefficients() { [EOL]     if (!coefficientsComputed) { [EOL]         computeCoefficients(); [EOL]     } [EOL]     double[] out = new double[coefficients.length]; [EOL]     System.arraycopy(coefficients, 0, out, 0, coefficients.length); [EOL]     return out; [EOL] } <line_num>: 159,166
public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException { [EOL]     verifyInputArray(a, c); [EOL]     final int n = c.length; [EOL]     double value = a[n]; [EOL]     for (int i = n - 1; i >= 0; i--) { [EOL]         value = a[i] + (z - c[i]) * value; [EOL]     } [EOL]     return value; [EOL] } <line_num>: 182,193
protected void computeCoefficients() { [EOL]     final int n = degree(); [EOL]     coefficients = new double[n + 1]; [EOL]     for (int i = 0; i <= n; i++) { [EOL]         coefficients[i] = 0.0; [EOL]     } [EOL]     coefficients[0] = a[n]; [EOL]     for (int i = n - 1; i >= 0; i--) { [EOL]         for (int j = n - i; j > 0; j--) { [EOL]             coefficients[j] = coefficients[j - 1] - c[i] * coefficients[j]; [EOL]         } [EOL]         coefficients[0] = a[i] - c[i] * coefficients[0]; [EOL]     } [EOL]     coefficientsComputed = true; [EOL] } <line_num>: 199,216
protected static void verifyInputArray(double[] a, double[] c) throws NullArgumentException, NoDataException, DimensionMismatchException { [EOL]     MathUtils.checkNotNull(a); [EOL]     MathUtils.checkNotNull(c); [EOL]     if (a.length == 0 || c.length == 0) { [EOL]         throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY); [EOL]     } [EOL]     if (a.length != c.length + 1) { [EOL]         throw new DimensionMismatchException(LocalizedFormats.ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1, a.length, c.length); [EOL]     } [EOL] } <line_num>: 233,244
