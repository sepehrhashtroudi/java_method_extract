public PolynomialSplineFunction interpolate(double[] x, double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException { [EOL]     if (x.length != y.length) { [EOL]         throw new DimensionMismatchException(x.length, y.length); [EOL]     } [EOL]     if (x.length < 3) { [EOL]         throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS, x.length, 3, true); [EOL]     } [EOL]     final int n = x.length - 1; [EOL]     MathArrays.checkOrder(x); [EOL]     final double[] h = new double[n]; [EOL]     for (int i = 0; i < n; i++) { [EOL]         h[i] = x[i + 1] - x[i]; [EOL]     } [EOL]     final double[] mu = new double[n]; [EOL]     final double[] z = new double[n + 1]; [EOL]     mu[0] = 0d; [EOL]     z[0] = 0d; [EOL]     double g = 0; [EOL]     for (int i = 1; i < n; i++) { [EOL]         g = 2d * (x[i + 1] - x[i - 1]) - h[i - 1] * mu[i - 1]; [EOL]         mu[i] = h[i] / g; [EOL]         z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1]) + y[i - 1] * h[i]) / (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g; [EOL]     } [EOL]     final double[] b = new double[n]; [EOL]     final double[] c = new double[n + 1]; [EOL]     final double[] d = new double[n]; [EOL]     z[n] = 0d; [EOL]     c[n] = 0d; [EOL]     for (int j = n - 1; j >= 0; j--) { [EOL]         c[j] = z[j] - mu[j] * c[j + 1]; [EOL]         b[j] = (y[j + 1] - y[j]) / h[j] - h[j] * (c[j + 1] + 2d * c[j]) / 3d; [EOL]         d[j] = (c[j + 1] - c[j]) / (3d * h[j]); [EOL]     } [EOL]     final PolynomialFunction[] polynomials = new PolynomialFunction[n]; [EOL]     final double[] coefficients = new double[4]; [EOL]     for (int i = 0; i < n; i++) { [EOL]         coefficients[0] = y[i]; [EOL]         coefficients[1] = b[i]; [EOL]         coefficients[2] = c[i]; [EOL]         coefficients[3] = d[i]; [EOL]         polynomials[i] = new PolynomialFunction(coefficients); [EOL]     } [EOL]     return new PolynomialSplineFunction(x, polynomials); [EOL] } <line_num>: 66,127
