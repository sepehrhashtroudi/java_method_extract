protected BaseAbstractUnivariateIntegrator(final double relativeAccuracy, final double absoluteAccuracy, final int minimalIterationCount, final int maximalIterationCount) throws NotStrictlyPositiveException, NumberIsTooSmallException { [EOL]     this.relativeAccuracy = relativeAccuracy; [EOL]     this.absoluteAccuracy = absoluteAccuracy; [EOL]     if (minimalIterationCount <= 0) { [EOL]         throw new NotStrictlyPositiveException(minimalIterationCount); [EOL]     } [EOL]     if (maximalIterationCount <= minimalIterationCount) { [EOL]         throw new NumberIsTooSmallException(maximalIterationCount, minimalIterationCount, false); [EOL]     } [EOL]     this.minimalIterationCount = minimalIterationCount; [EOL]     this.iterations = new Incrementor(); [EOL]     iterations.setMaximalCount(maximalIterationCount); [EOL]     evaluations = new Incrementor(); [EOL] } <line_num>: 109,133
protected BaseAbstractUnivariateIntegrator(final double relativeAccuracy, final double absoluteAccuracy) { [EOL]     this(relativeAccuracy, absoluteAccuracy, DEFAULT_MIN_ITERATIONS_COUNT, DEFAULT_MAX_ITERATIONS_COUNT); [EOL] } <line_num>: 140,144
protected BaseAbstractUnivariateIntegrator(final int minimalIterationCount, final int maximalIterationCount) throws NotStrictlyPositiveException, NumberIsTooSmallException { [EOL]     this(DEFAULT_RELATIVE_ACCURACY, DEFAULT_ABSOLUTE_ACCURACY, minimalIterationCount, maximalIterationCount); [EOL] } <line_num>: 155,160
public double getRelativeAccuracy() { [EOL]     return relativeAccuracy; [EOL] } <line_num>: 163,165
public double getAbsoluteAccuracy() { [EOL]     return absoluteAccuracy; [EOL] } <line_num>: 168,170
public int getMinimalIterationCount() { [EOL]     return minimalIterationCount; [EOL] } <line_num>: 173,175
public int getMaximalIterationCount() { [EOL]     return iterations.getMaximalCount(); [EOL] } <line_num>: 178,180
public int getEvaluations() { [EOL]     return evaluations.getCount(); [EOL] } <line_num>: 183,185
public int getIterations() { [EOL]     return iterations.getCount(); [EOL] } <line_num>: 188,190
protected double getMin() { [EOL]     return min; [EOL] } <line_num>: 195,197
protected double getMax() { [EOL]     return max; [EOL] } <line_num>: 201,203
protected double computeObjectiveValue(final double point) throws TooManyEvaluationsException { [EOL]     try { [EOL]         evaluations.incrementCount(); [EOL]     } catch (MaxCountExceededException e) { [EOL]         throw new TooManyEvaluationsException(e.getMax()); [EOL]     } [EOL]     return function.value(point); [EOL] } <line_num>: 213,221
protected void setup(final int maxEval, final UnivariateFunction f, final double lower, final double upper) throws NullArgumentException, MathIllegalArgumentException { [EOL]     MathUtils.checkNotNull(f); [EOL]     UnivariateSolverUtils.verifyInterval(lower, upper); [EOL]     min = lower; [EOL]     max = upper; [EOL]     function = f; [EOL]     evaluations.setMaximalCount(maxEval); [EOL]     evaluations.resetCount(); [EOL]     iterations.resetCount(); [EOL] } <line_num>: 235,252
public double integrate(final int maxEval, final UnivariateFunction f, final double lower, final double upper) throws TooManyEvaluationsException, MaxCountExceededException, MathIllegalArgumentException, NullArgumentException { [EOL]     setup(maxEval, f, lower, upper); [EOL]     return doIntegrate(); [EOL] } <line_num>: 255,266
protected abstract double doIntegrate() throws TooManyEvaluationsException, MaxCountExceededException; <line_num>: 278,279
