public Logit() { [EOL]     this(0, 1); [EOL] } <line_num>: 49,51
public Logit(double lo, double hi) { [EOL]     this.lo = lo; [EOL]     this.hi = hi; [EOL] } <line_num>: 59,63
public double value(double x) throws OutOfRangeException { [EOL]     return value(x, lo, hi); [EOL] } <line_num>: 66,69
@Deprecated [EOL] public UnivariateFunction derivative() { [EOL]     return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative(); [EOL] } <line_num>: 74,77
public double value(double x, double... param) throws NullArgumentException, DimensionMismatchException { [EOL]     validateParameters(param); [EOL]     return Logit.value(x, param[0], param[1]); [EOL] } <line_num>: 98,103
public double[] gradient(double x, double... param) throws NullArgumentException, DimensionMismatchException { [EOL]     validateParameters(param); [EOL]     final double lo = param[0]; [EOL]     final double hi = param[1]; [EOL]     return new double[] { 1 / (lo - x), 1 / (hi - x) }; [EOL] } <line_num>: 118,127
private void validateParameters(double[] param) throws NullArgumentException, DimensionMismatchException { [EOL]     if (param == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     if (param.length != 2) { [EOL]         throw new DimensionMismatchException(param.length, 2); [EOL]     } [EOL] } <line_num>: 139,148
private static double value(double x, double lo, double hi) throws OutOfRangeException { [EOL]     if (x < lo || x > hi) { [EOL]         throw new OutOfRangeException(x, lo, hi); [EOL]     } [EOL]     return FastMath.log((x - lo) / (hi - x)); [EOL] } <line_num>: 158,166
public DerivativeStructure value(final DerivativeStructure t) throws OutOfRangeException { [EOL]     final double x = t.getValue(); [EOL]     if (x < lo || x > hi) { [EOL]         throw new OutOfRangeException(x, lo, hi); [EOL]     } [EOL]     double[] f = new double[t.getOrder() + 1]; [EOL]     f[0] = FastMath.log((x - lo) / (hi - x)); [EOL]     if (Double.isInfinite(f[0])) { [EOL]         if (f.length > 1) { [EOL]             f[1] = Double.POSITIVE_INFINITY; [EOL]         } [EOL]         for (int i = 2; i < f.length; ++i) { [EOL]             f[i] = f[i - 2]; [EOL]         } [EOL]     } else { [EOL]         final double invL = 1.0 / (x - lo); [EOL]         double xL = invL; [EOL]         final double invH = 1.0 / (hi - x); [EOL]         double xH = invH; [EOL]         for (int i = 1; i < f.length; ++i) { [EOL]             f[i] = xL + xH; [EOL]             xL *= -i * invL; [EOL]             xH *= i * invH; [EOL]         } [EOL]     } [EOL]     return t.compose(f); [EOL] } <line_num>: 172,212
