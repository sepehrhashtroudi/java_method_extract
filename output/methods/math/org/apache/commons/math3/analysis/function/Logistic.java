public Logistic(double k, double m, double b, double q, double a, double n) throws NotStrictlyPositiveException { [EOL]     if (n <= 0) { [EOL]         throw new NotStrictlyPositiveException(n); [EOL]     } [EOL]     this.k = k; [EOL]     this.m = m; [EOL]     this.b = b; [EOL]     this.q = q; [EOL]     this.a = a; [EOL]     oneOverN = 1 / n; [EOL] } <line_num>: 65,82
public double value(double x) { [EOL]     return value(m - x, k, b, q, a, oneOverN); [EOL] } <line_num>: 85,87
@Deprecated [EOL] public UnivariateFunction derivative() { [EOL]     return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative(); [EOL] } <line_num>: 92,95
public double value(double x, double... param) throws NullArgumentException, DimensionMismatchException, NotStrictlyPositiveException { [EOL]     validateParameters(param); [EOL]     return Logistic.value(param[1] - x, param[0], param[2], param[3], param[4], 1 / param[5]); [EOL] } <line_num>: 123,131
public double[] gradient(double x, double... param) throws NullArgumentException, DimensionMismatchException, NotStrictlyPositiveException { [EOL]     validateParameters(param); [EOL]     final double b = param[2]; [EOL]     final double q = param[3]; [EOL]     final double mMinusX = param[1] - x; [EOL]     final double oneOverN = 1 / param[5]; [EOL]     final double exp = FastMath.exp(b * mMinusX); [EOL]     final double qExp = q * exp; [EOL]     final double qExp1 = qExp + 1; [EOL]     final double factor1 = (param[0] - param[4]) * oneOverN / FastMath.pow(qExp1, oneOverN); [EOL]     final double factor2 = -factor1 / qExp1; [EOL]     final double gk = Logistic.value(mMinusX, 1, b, q, 0, oneOverN); [EOL]     final double gm = factor2 * b * qExp; [EOL]     final double gb = factor2 * mMinusX * qExp; [EOL]     final double gq = factor2 * exp; [EOL]     final double ga = Logistic.value(mMinusX, 0, b, q, 1, oneOverN); [EOL]     final double gn = factor1 * Math.log(qExp1) * oneOverN; [EOL]     return new double[] { gk, gm, gb, gq, ga, gn }; [EOL] } <line_num>: 148,174
private void validateParameters(double[] param) throws NullArgumentException, DimensionMismatchException, NotStrictlyPositiveException { [EOL]     if (param == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     if (param.length != 6) { [EOL]         throw new DimensionMismatchException(param.length, 6); [EOL]     } [EOL]     if (param[5] <= 0) { [EOL]         throw new NotStrictlyPositiveException(param[5]); [EOL]     } [EOL] } <line_num>: 188,201
private static double value(double mMinusX, double k, double b, double q, double a, double oneOverN) { [EOL]     return a + (k - a) / FastMath.pow(1 + q * FastMath.exp(b * mMinusX), oneOverN); [EOL] } <line_num>: 213,220
public DerivativeStructure value(final DerivativeStructure t) { [EOL]     return t.negate().add(m).multiply(b).exp().multiply(q).add(1).pow(oneOverN).reciprocal().multiply(k - a).add(a); [EOL] } <line_num>: 225,227
