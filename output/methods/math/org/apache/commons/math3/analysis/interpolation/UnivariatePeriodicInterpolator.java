public UnivariatePeriodicInterpolator(UnivariateInterpolator interpolator, double period, int extend) { [EOL]     this.interpolator = interpolator; [EOL]     this.period = period; [EOL]     this.extend = extend; [EOL] } <line_num>: 58,64
public UnivariatePeriodicInterpolator(UnivariateInterpolator interpolator, double period) { [EOL]     this(interpolator, period, DEFAULT_EXTEND); [EOL] } <line_num>: 74,77
public double value(final double x) throws MathIllegalArgumentException { [EOL]     return f.value(MathUtils.reduce(x, period, offset)); [EOL] } <line_num>: 119,121
public UnivariateFunction interpolate(double[] xval, double[] yval) throws NumberIsTooSmallException, NonMonotonicSequenceException { [EOL]     if (xval.length < extend) { [EOL]         throw new NumberIsTooSmallException(xval.length, extend, true); [EOL]     } [EOL]     MathArrays.checkOrder(xval); [EOL]     final double offset = xval[0]; [EOL]     final int len = xval.length + extend * 2; [EOL]     final double[] x = new double[len]; [EOL]     final double[] y = new double[len]; [EOL]     for (int i = 0; i < xval.length; i++) { [EOL]         final int index = i + extend; [EOL]         x[index] = MathUtils.reduce(xval[i], period, offset); [EOL]         y[index] = yval[i]; [EOL]     } [EOL]     for (int i = 0; i < extend; i++) { [EOL]         int index = xval.length - extend + i; [EOL]         x[i] = MathUtils.reduce(xval[index], period, offset) - period; [EOL]         y[i] = yval[index]; [EOL]         index = len - extend + i; [EOL]         x[index] = MathUtils.reduce(xval[i], period, offset) + period; [EOL]         y[index] = yval[i]; [EOL]     } [EOL]     MathArrays.sortInPlace(x, y); [EOL]     final UnivariateFunction f = interpolator.interpolate(x, y); [EOL]     return new UnivariateFunction() { [EOL]  [EOL]         public double value(final double x) throws MathIllegalArgumentException { [EOL]             return f.value(MathUtils.reduce(x, period, offset)); [EOL]         } [EOL]     }; [EOL] } <line_num>: 85,123
