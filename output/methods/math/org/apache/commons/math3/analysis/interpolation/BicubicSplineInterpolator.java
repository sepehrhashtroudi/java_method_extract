public BicubicSplineInterpolatingFunction interpolate(final double[] xval, final double[] yval, final double[][] fval) throws NoDataException, DimensionMismatchException, NonMonotonicSequenceException, NumberIsTooSmallException { [EOL]     if (xval.length == 0 || yval.length == 0 || fval.length == 0) { [EOL]         throw new NoDataException(); [EOL]     } [EOL]     if (xval.length != fval.length) { [EOL]         throw new DimensionMismatchException(xval.length, fval.length); [EOL]     } [EOL]     MathArrays.checkOrder(xval); [EOL]     MathArrays.checkOrder(yval); [EOL]     final int xLen = xval.length; [EOL]     final int yLen = yval.length; [EOL]     final double[][] fX = new double[yLen][xLen]; [EOL]     for (int i = 0; i < xLen; i++) { [EOL]         if (fval[i].length != yLen) { [EOL]             throw new DimensionMismatchException(fval[i].length, yLen); [EOL]         } [EOL]         for (int j = 0; j < yLen; j++) { [EOL]             fX[j][i] = fval[i][j]; [EOL]         } [EOL]     } [EOL]     final SplineInterpolator spInterpolator = new SplineInterpolator(); [EOL]     final PolynomialSplineFunction[] ySplineX = new PolynomialSplineFunction[yLen]; [EOL]     for (int j = 0; j < yLen; j++) { [EOL]         ySplineX[j] = spInterpolator.interpolate(xval, fX[j]); [EOL]     } [EOL]     final PolynomialSplineFunction[] xSplineY = new PolynomialSplineFunction[xLen]; [EOL]     for (int i = 0; i < xLen; i++) { [EOL]         xSplineY[i] = spInterpolator.interpolate(yval, fval[i]); [EOL]     } [EOL]     final double[][] dFdX = new double[xLen][yLen]; [EOL]     for (int j = 0; j < yLen; j++) { [EOL]         final UnivariateFunction f = ySplineX[j].derivative(); [EOL]         for (int i = 0; i < xLen; i++) { [EOL]             dFdX[i][j] = f.value(xval[i]); [EOL]         } [EOL]     } [EOL]     final double[][] dFdY = new double[xLen][yLen]; [EOL]     for (int i = 0; i < xLen; i++) { [EOL]         final UnivariateFunction f = xSplineY[i].derivative(); [EOL]         for (int j = 0; j < yLen; j++) { [EOL]             dFdY[i][j] = f.value(yval[j]); [EOL]         } [EOL]     } [EOL]     final double[][] d2FdXdY = new double[xLen][yLen]; [EOL]     for (int i = 0; i < xLen; i++) { [EOL]         final int nI = nextIndex(i, xLen); [EOL]         final int pI = previousIndex(i); [EOL]         for (int j = 0; j < yLen; j++) { [EOL]             final int nJ = nextIndex(j, yLen); [EOL]             final int pJ = previousIndex(j); [EOL]             d2FdXdY[i][j] = (fval[nI][nJ] - fval[nI][pJ] - fval[pI][nJ] + fval[pI][pJ]) / ((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ])); [EOL]         } [EOL]     } [EOL]     return new BicubicSplineInterpolatingFunction(xval, yval, fval, dFdX, dFdY, d2FdXdY); [EOL] } <line_num>: 38,122
private int nextIndex(int i, int max) { [EOL]     final int index = i + 1; [EOL]     return index < max ? index : index - 1; [EOL] } <line_num>: 132,135
private int previousIndex(int i) { [EOL]     final int index = i - 1; [EOL]     return index >= 0 ? index : 0; [EOL] } <line_num>: 144,147
