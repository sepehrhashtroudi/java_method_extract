public JacobianFunction(final MultivariateDifferentiableVectorFunction f) { [EOL]     this.f = f; [EOL] } <line_num>: 39,41
public double[][] value(double[] point) { [EOL]     final DerivativeStructure[] dsX = new DerivativeStructure[point.length]; [EOL]     for (int i = 0; i < point.length; ++i) { [EOL]         dsX[i] = new DerivativeStructure(point.length, 1, i, point[i]); [EOL]     } [EOL]     final DerivativeStructure[] dsY = f.value(dsX); [EOL]     final double[][] y = new double[dsY.length][point.length]; [EOL]     final int[] orders = new int[point.length]; [EOL]     for (int i = 0; i < dsY.length; ++i) { [EOL]         for (int j = 0; j < point.length; ++j) { [EOL]             orders[j] = 1; [EOL]             y[i][j] = dsY[i].getPartialDerivative(orders); [EOL]             orders[j] = 0; [EOL]         } [EOL]     } [EOL]     return y; [EOL] } <line_num>: 44,68
