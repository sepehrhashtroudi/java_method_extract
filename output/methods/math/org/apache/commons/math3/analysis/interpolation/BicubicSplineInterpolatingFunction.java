public BicubicSplineInterpolatingFunction(double[] x, double[] y, double[][] f, double[][] dFdX, double[][] dFdY, double[][] d2FdXdY) throws DimensionMismatchException, NoDataException, NonMonotonicSequenceException { [EOL]     final int xLen = x.length; [EOL]     final int yLen = y.length; [EOL]     if (xLen == 0 || yLen == 0 || f.length == 0 || f[0].length == 0) { [EOL]         throw new NoDataException(); [EOL]     } [EOL]     if (xLen != f.length) { [EOL]         throw new DimensionMismatchException(xLen, f.length); [EOL]     } [EOL]     if (xLen != dFdX.length) { [EOL]         throw new DimensionMismatchException(xLen, dFdX.length); [EOL]     } [EOL]     if (xLen != dFdY.length) { [EOL]         throw new DimensionMismatchException(xLen, dFdY.length); [EOL]     } [EOL]     if (xLen != d2FdXdY.length) { [EOL]         throw new DimensionMismatchException(xLen, d2FdXdY.length); [EOL]     } [EOL]     MathArrays.checkOrder(x); [EOL]     MathArrays.checkOrder(y); [EOL]     xval = x.clone(); [EOL]     yval = y.clone(); [EOL]     final int lastI = xLen - 1; [EOL]     final int lastJ = yLen - 1; [EOL]     splines = new BicubicSplineFunction[lastI][lastJ]; [EOL]     for (int i = 0; i < lastI; i++) { [EOL]         if (f[i].length != yLen) { [EOL]             throw new DimensionMismatchException(f[i].length, yLen); [EOL]         } [EOL]         if (dFdX[i].length != yLen) { [EOL]             throw new DimensionMismatchException(dFdX[i].length, yLen); [EOL]         } [EOL]         if (dFdY[i].length != yLen) { [EOL]             throw new DimensionMismatchException(dFdY[i].length, yLen); [EOL]         } [EOL]         if (d2FdXdY[i].length != yLen) { [EOL]             throw new DimensionMismatchException(d2FdXdY[i].length, yLen); [EOL]         } [EOL]         final int ip1 = i + 1; [EOL]         for (int j = 0; j < lastJ; j++) { [EOL]             final int jp1 = j + 1; [EOL]             final double[] beta = new double[] { f[i][j], f[ip1][j], f[i][jp1], f[ip1][jp1], dFdX[i][j], dFdX[ip1][j], dFdX[i][jp1], dFdX[ip1][jp1], dFdY[i][j], dFdY[ip1][j], dFdY[i][jp1], dFdY[ip1][jp1], d2FdXdY[i][j], d2FdXdY[ip1][j], d2FdXdY[i][jp1], d2FdXdY[ip1][jp1] }; [EOL]             splines[i][j] = new BicubicSplineFunction(computeSplineCoefficients(beta)); [EOL]         } [EOL]     } [EOL] } <line_num>: 95,159
public BicubicSplineFunction(double[] a) { [EOL]     this.a = new double[N][N]; [EOL]     for (int i = 0; i < N; i++) { [EOL]         for (int j = 0; j < N; j++) { [EOL]             this.a[i][j] = a[i * N + j]; [EOL]         } [EOL]     } [EOL] } <line_num>: 413,420
public double value(double x, double y) throws OutOfRangeException { [EOL]     final int i = searchIndex(x, xval); [EOL]     final int j = searchIndex(y, yval); [EOL]     final double xN = (x - xval[i]) / (xval[i + 1] - xval[i]); [EOL]     final double yN = (y - yval[j]) / (yval[j + 1] - yval[j]); [EOL]     return splines[i][j].value(xN, yN); [EOL] } <line_num>: 164,173
public boolean isValidPoint(double x, double y) { [EOL]     if (x < xval[0] || x > xval[xval.length - 1] || y < yval[0] || y > yval[yval.length - 1]) { [EOL]         return false; [EOL]     } else { [EOL]         return true; [EOL]     } [EOL] } <line_num>: 183,192
public double partialDerivativeX(double x, double y) throws OutOfRangeException { [EOL]     return partialDerivative(0, x, y); [EOL] } <line_num>: 203,206
public double partialDerivativeY(double x, double y) throws OutOfRangeException { [EOL]     return partialDerivative(1, x, y); [EOL] } <line_num>: 216,219
public double partialDerivativeXX(double x, double y) throws OutOfRangeException { [EOL]     return partialDerivative(2, x, y); [EOL] } <line_num>: 229,232
public double partialDerivativeYY(double x, double y) throws OutOfRangeException { [EOL]     return partialDerivative(3, x, y); [EOL] } <line_num>: 242,245
public double partialDerivativeXY(double x, double y) throws OutOfRangeException { [EOL]     return partialDerivative(4, x, y); [EOL] } <line_num>: 254,257
private double partialDerivative(int which, double x, double y) throws OutOfRangeException { [EOL]     if (partialDerivatives == null) { [EOL]         computePartialDerivatives(); [EOL]     } [EOL]     final int i = searchIndex(x, xval); [EOL]     final int j = searchIndex(y, yval); [EOL]     final double xN = (x - xval[i]) / (xval[i + 1] - xval[i]); [EOL]     final double yN = (y - yval[j]) / (yval[j + 1] - yval[j]); [EOL]     return partialDerivatives[which][i][j].value(xN, yN); [EOL] } <line_num>: 268,281
private void computePartialDerivatives() { [EOL]     final int lastI = xval.length - 1; [EOL]     final int lastJ = yval.length - 1; [EOL]     partialDerivatives = new BivariateFunction[5][lastI][lastJ]; [EOL]     for (int i = 0; i < lastI; i++) { [EOL]         for (int j = 0; j < lastJ; j++) { [EOL]             final BicubicSplineFunction f = splines[i][j]; [EOL]             partialDerivatives[0][i][j] = f.partialDerivativeX(); [EOL]             partialDerivatives[1][i][j] = f.partialDerivativeY(); [EOL]             partialDerivatives[2][i][j] = f.partialDerivativeXX(); [EOL]             partialDerivatives[3][i][j] = f.partialDerivativeYY(); [EOL]             partialDerivatives[4][i][j] = f.partialDerivativeXY(); [EOL]         } [EOL]     } [EOL] } <line_num>: 286,301
private int searchIndex(double c, double[] val) { [EOL]     final int r = Arrays.binarySearch(val, c); [EOL]     if (r == -1 || r == -val.length - 1) { [EOL]         throw new OutOfRangeException(c, val[0], val[val.length - 1]); [EOL]     } [EOL]     if (r < 0) { [EOL]         return -r - 2; [EOL]     } [EOL]     final int last = val.length - 1; [EOL]     if (r == last) { [EOL]         return last - 1; [EOL]     } [EOL]     return r; [EOL] } <line_num>: 311,333
private double[] computeSplineCoefficients(double[] beta) { [EOL]     final double[] a = new double[NUM_COEFF]; [EOL]     for (int i = 0; i < NUM_COEFF; i++) { [EOL]         double result = 0; [EOL]         final double[] row = AINV[i]; [EOL]         for (int j = 0; j < NUM_COEFF; j++) { [EOL]             result += row[j] * beta[j]; [EOL]         } [EOL]         a[i] = result; [EOL]     } [EOL]     return a; [EOL] } <line_num>: 364,377
public double value(double x, double y) { [EOL]     if (x < 0 || x > 1) { [EOL]         throw new OutOfRangeException(x, 0, 1); [EOL]     } [EOL]     if (y < 0 || y > 1) { [EOL]         throw new OutOfRangeException(y, 0, 1); [EOL]     } [EOL]     final double x2 = x * x; [EOL]     final double x3 = x2 * x; [EOL]     final double[] pX = { 1, x, x2, x3 }; [EOL]     final double y2 = y * y; [EOL]     final double y3 = y2 * y; [EOL]     final double[] pY = { 1, y, y2, y3 }; [EOL]     return apply(pX, pY, a); [EOL] } <line_num>: 425,442
private double apply(double[] pX, double[] pY, double[][] coeff) { [EOL]     double result = 0; [EOL]     for (int i = 0; i < N; i++) { [EOL]         for (int j = 0; j < N; j++) { [EOL]             result += coeff[i][j] * pX[i] * pY[j]; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 452,461
public BivariateFunction partialDerivativeX() { [EOL]     if (partialDerivativeX == null) { [EOL]         computePartialDerivatives(); [EOL]     } [EOL]     return partialDerivativeX; [EOL] } <line_num>: 466,472
public BivariateFunction partialDerivativeY() { [EOL]     if (partialDerivativeY == null) { [EOL]         computePartialDerivatives(); [EOL]     } [EOL]     return partialDerivativeY; [EOL] } <line_num>: 476,482
public BivariateFunction partialDerivativeXX() { [EOL]     if (partialDerivativeXX == null) { [EOL]         computePartialDerivatives(); [EOL]     } [EOL]     return partialDerivativeXX; [EOL] } <line_num>: 486,492
public BivariateFunction partialDerivativeYY() { [EOL]     if (partialDerivativeYY == null) { [EOL]         computePartialDerivatives(); [EOL]     } [EOL]     return partialDerivativeYY; [EOL] } <line_num>: 496,502
public BivariateFunction partialDerivativeXY() { [EOL]     if (partialDerivativeXY == null) { [EOL]         computePartialDerivatives(); [EOL]     } [EOL]     return partialDerivativeXY; [EOL] } <line_num>: 506,512
public double value(double x, double y) { [EOL]     final double x2 = x * x; [EOL]     final double[] pX = { 0, 1, x, x2 }; [EOL]     final double y2 = y * y; [EOL]     final double y3 = y2 * y; [EOL]     final double[] pY = { 1, y, y2, y3 }; [EOL]     return apply(pX, pY, aX); [EOL] } <line_num>: 536,545
public double value(double x, double y) { [EOL]     final double x2 = x * x; [EOL]     final double x3 = x2 * x; [EOL]     final double[] pX = { 1, x, x2, x3 }; [EOL]     final double y2 = y * y; [EOL]     final double[] pY = { 0, 1, y, y2 }; [EOL]     return apply(pX, pY, aY); [EOL] } <line_num>: 548,557
public double value(double x, double y) { [EOL]     final double[] pX = { 0, 0, 1, x }; [EOL]     final double y2 = y * y; [EOL]     final double y3 = y2 * y; [EOL]     final double[] pY = { 1, y, y2, y3 }; [EOL]     return apply(pX, pY, aXX); [EOL] } <line_num>: 560,568
public double value(double x, double y) { [EOL]     final double x2 = x * x; [EOL]     final double x3 = x2 * x; [EOL]     final double[] pX = { 1, x, x2, x3 }; [EOL]     final double[] pY = { 0, 0, 1, y }; [EOL]     return apply(pX, pY, aYY); [EOL] } <line_num>: 571,579
public double value(double x, double y) { [EOL]     final double x2 = x * x; [EOL]     final double[] pX = { 0, 1, x, x2 }; [EOL]     final double y2 = y * y; [EOL]     final double[] pY = { 0, 1, y, y2 }; [EOL]     return apply(pX, pY, aXY); [EOL] } <line_num>: 582,590
private void computePartialDerivatives() { [EOL]     final double[][] aX = new double[N][N]; [EOL]     final double[][] aY = new double[N][N]; [EOL]     final double[][] aXX = new double[N][N]; [EOL]     final double[][] aYY = new double[N][N]; [EOL]     final double[][] aXY = new double[N][N]; [EOL]     for (int i = 0; i < N; i++) { [EOL]         for (int j = 0; j < N; j++) { [EOL]             final double c = a[i][j]; [EOL]             aX[i][j] = i * c; [EOL]             aY[i][j] = j * c; [EOL]             aXX[i][j] = (i - 1) * aX[i][j]; [EOL]             aYY[i][j] = (j - 1) * aY[i][j]; [EOL]             aXY[i][j] = j * aX[i][j]; [EOL]         } [EOL]     } [EOL]     partialDerivativeX = new BivariateFunction() { [EOL]  [EOL]         public double value(double x, double y) { [EOL]             final double x2 = x * x; [EOL]             final double[] pX = { 0, 1, x, x2 }; [EOL]             final double y2 = y * y; [EOL]             final double y3 = y2 * y; [EOL]             final double[] pY = { 1, y, y2, y3 }; [EOL]             return apply(pX, pY, aX); [EOL]         } [EOL]     }; [EOL]     partialDerivativeY = new BivariateFunction() { [EOL]  [EOL]         public double value(double x, double y) { [EOL]             final double x2 = x * x; [EOL]             final double x3 = x2 * x; [EOL]             final double[] pX = { 1, x, x2, x3 }; [EOL]             final double y2 = y * y; [EOL]             final double[] pY = { 0, 1, y, y2 }; [EOL]             return apply(pX, pY, aY); [EOL]         } [EOL]     }; [EOL]     partialDerivativeXX = new BivariateFunction() { [EOL]  [EOL]         public double value(double x, double y) { [EOL]             final double[] pX = { 0, 0, 1, x }; [EOL]             final double y2 = y * y; [EOL]             final double y3 = y2 * y; [EOL]             final double[] pY = { 1, y, y2, y3 }; [EOL]             return apply(pX, pY, aXX); [EOL]         } [EOL]     }; [EOL]     partialDerivativeYY = new BivariateFunction() { [EOL]  [EOL]         public double value(double x, double y) { [EOL]             final double x2 = x * x; [EOL]             final double x3 = x2 * x; [EOL]             final double[] pX = { 1, x, x2, x3 }; [EOL]             final double[] pY = { 0, 0, 1, y }; [EOL]             return apply(pX, pY, aYY); [EOL]         } [EOL]     }; [EOL]     partialDerivativeXY = new BivariateFunction() { [EOL]  [EOL]         public double value(double x, double y) { [EOL]             final double x2 = x * x; [EOL]             final double[] pX = { 0, 1, x, x2 }; [EOL]             final double y2 = y * y; [EOL]             final double[] pY = { 0, 1, y, y2 }; [EOL]             return apply(pX, pY, aXY); [EOL]         } [EOL]     }; [EOL] } <line_num>: 517,592
