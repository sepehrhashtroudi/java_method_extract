public PolynomialSplineFunction(double[] knots, PolynomialFunction[] polynomials) throws NullArgumentException, NumberIsTooSmallException, DimensionMismatchException, NonMonotonicSequenceException { [EOL]     if (knots == null || polynomials == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     if (knots.length < 2) { [EOL]         throw new NumberIsTooSmallException(LocalizedFormats.NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION, 2, knots.length, false); [EOL]     } [EOL]     if (knots.length - 1 != polynomials.length) { [EOL]         throw new DimensionMismatchException(polynomials.length, knots.length); [EOL]     } [EOL]     MathArrays.checkOrder(knots); [EOL]     this.n = knots.length - 1; [EOL]     this.knots = new double[n + 1]; [EOL]     System.arraycopy(knots, 0, this.knots, 0, n + 1); [EOL]     this.polynomials = new PolynomialFunction[n]; [EOL]     System.arraycopy(polynomials, 0, this.polynomials, 0, n); [EOL] } <line_num>: 102,123
public double value(double v) { [EOL]     if (v < knots[0] || v > knots[n]) { [EOL]         throw new OutOfRangeException(v, knots[0], knots[n]); [EOL]     } [EOL]     int i = Arrays.binarySearch(knots, v); [EOL]     if (i < 0) { [EOL]         i = -i - 2; [EOL]     } [EOL]     if (i >= polynomials.length) { [EOL]         i--; [EOL]     } [EOL]     return polynomials[i].value(v - knots[i]); [EOL] } <line_num>: 136,151
public UnivariateFunction derivative() { [EOL]     return polynomialSplineDerivative(); [EOL] } <line_num>: 158,160
public PolynomialSplineFunction polynomialSplineDerivative() { [EOL]     PolynomialFunction[] derivativePolynomials = new PolynomialFunction[n]; [EOL]     for (int i = 0; i < n; i++) { [EOL]         derivativePolynomials[i] = polynomials[i].polynomialDerivative(); [EOL]     } [EOL]     return new PolynomialSplineFunction(knots, derivativePolynomials); [EOL] } <line_num>: 167,173
public DerivativeStructure value(final DerivativeStructure t) { [EOL]     final double t0 = t.getValue(); [EOL]     if (t0 < knots[0] || t0 > knots[n]) { [EOL]         throw new OutOfRangeException(t0, knots[0], knots[n]); [EOL]     } [EOL]     int i = Arrays.binarySearch(knots, t0); [EOL]     if (i < 0) { [EOL]         i = -i - 2; [EOL]     } [EOL]     if (i >= polynomials.length) { [EOL]         i--; [EOL]     } [EOL]     return polynomials[i].value(t.subtract(knots[i])); [EOL] } <line_num>: 179,195
public int getN() { [EOL]     return n; [EOL] } <line_num>: 203,205
public PolynomialFunction[] getPolynomials() { [EOL]     PolynomialFunction[] p = new PolynomialFunction[n]; [EOL]     System.arraycopy(polynomials, 0, p, 0, n); [EOL]     return p; [EOL] } <line_num>: 214,218
public double[] getKnots() { [EOL]     double[] out = new double[n + 1]; [EOL]     System.arraycopy(knots, 0, out, 0, n + 1); [EOL]     return out; [EOL] } <line_num>: 227,231
public boolean isValidPoint(double x) { [EOL]     if (x < knots[0] || x > knots[n]) { [EOL]         return false; [EOL]     } else { [EOL]         return true; [EOL]     } [EOL] } <line_num>: 239,246
