public BrentSolver() { [EOL]     this(DEFAULT_ABSOLUTE_ACCURACY); [EOL] } <line_num>: 46,48
public BrentSolver(double absoluteAccuracy) { [EOL]     super(absoluteAccuracy); [EOL] } <line_num>: 54,56
public BrentSolver(double relativeAccuracy, double absoluteAccuracy) { [EOL]     super(relativeAccuracy, absoluteAccuracy); [EOL] } <line_num>: 63,66
public BrentSolver(double relativeAccuracy, double absoluteAccuracy, double functionValueAccuracy) { [EOL]     super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy); [EOL] } <line_num>: 74,78
@Override [EOL] protected double doSolve() throws NoBracketingException, TooManyEvaluationsException, NumberIsTooLargeException { [EOL]     double min = getMin(); [EOL]     double max = getMax(); [EOL]     final double initial = getStartValue(); [EOL]     final double functionValueAccuracy = getFunctionValueAccuracy(); [EOL]     verifySequence(min, initial, max); [EOL]     double yInitial = computeObjectiveValue(initial); [EOL]     if (FastMath.abs(yInitial) <= functionValueAccuracy) { [EOL]         return initial; [EOL]     } [EOL]     double yMin = computeObjectiveValue(min); [EOL]     if (FastMath.abs(yMin) <= functionValueAccuracy) { [EOL]         return min; [EOL]     } [EOL]     if (yInitial * yMin < 0) { [EOL]         return brent(min, initial, yMin, yInitial); [EOL]     } [EOL]     double yMax = computeObjectiveValue(max); [EOL]     if (FastMath.abs(yMax) <= functionValueAccuracy) { [EOL]         return max; [EOL]     } [EOL]     if (yInitial * yMax < 0) { [EOL]         return brent(initial, max, yInitial, yMax); [EOL]     } [EOL]     throw new NoBracketingException(min, max, yMin, yMax); [EOL] } <line_num>: 83,124
private double brent(double lo, double hi, double fLo, double fHi) { [EOL]     double a = lo; [EOL]     double fa = fLo; [EOL]     double b = hi; [EOL]     double fb = fHi; [EOL]     double c = a; [EOL]     double fc = fa; [EOL]     double d = b - a; [EOL]     double e = d; [EOL]     final double t = getAbsoluteAccuracy(); [EOL]     final double eps = getRelativeAccuracy(); [EOL]     while (true) { [EOL]         if (FastMath.abs(fc) < FastMath.abs(fb)) { [EOL]             a = b; [EOL]             b = c; [EOL]             c = a; [EOL]             fa = fb; [EOL]             fb = fc; [EOL]             fc = fa; [EOL]         } [EOL]         final double tol = 2 * eps * FastMath.abs(b) + t; [EOL]         final double m = 0.5 * (c - b); [EOL]         if (FastMath.abs(m) <= tol || Precision.equals(fb, 0)) { [EOL]             return b; [EOL]         } [EOL]         if (FastMath.abs(e) < tol || FastMath.abs(fa) <= FastMath.abs(fb)) { [EOL]             d = m; [EOL]             e = d; [EOL]         } else { [EOL]             double s = fb / fa; [EOL]             double p; [EOL]             double q; [EOL]             if (a == c) { [EOL]                 p = 2 * m * s; [EOL]                 q = 1 - s; [EOL]             } else { [EOL]                 q = fa / fc; [EOL]                 final double r = fb / fc; [EOL]                 p = s * (2 * m * q * (q - r) - (b - a) * (r - 1)); [EOL]                 q = (q - 1) * (r - 1) * (s - 1); [EOL]             } [EOL]             if (p > 0) { [EOL]                 q = -q; [EOL]             } else { [EOL]                 p = -p; [EOL]             } [EOL]             s = e; [EOL]             e = d; [EOL]             if (p >= 1.5 * m * q - FastMath.abs(tol * q) || p >= FastMath.abs(0.5 * s * q)) { [EOL]                 d = m; [EOL]                 e = d; [EOL]             } else { [EOL]                 d = p / q; [EOL]             } [EOL]         } [EOL]         a = b; [EOL]         fa = fb; [EOL]         if (FastMath.abs(d) > tol) { [EOL]             b += d; [EOL]         } else if (m > 0) { [EOL]             b += tol; [EOL]         } else { [EOL]             b -= tol; [EOL]         } [EOL]         fb = computeObjectiveValue(b); [EOL]         if ((fb > 0 && fc > 0) || (fb <= 0 && fc <= 0)) { [EOL]             c = a; [EOL]             fc = fa; [EOL]             d = b - a; [EOL]             e = d; [EOL]         } [EOL]     } [EOL] } <line_num>: 142,233
