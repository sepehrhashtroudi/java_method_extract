public PolynomialFunctionNewtonForm interpolate(double[] x, double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException { [EOL]     PolynomialFunctionLagrangeForm.verifyInterpolationArray(x, y, true); [EOL]     final double[] c = new double[x.length - 1]; [EOL]     System.arraycopy(x, 0, c, 0, c.length); [EOL]     final double[] a = computeDividedDifference(x, y); [EOL]     return new PolynomialFunctionNewtonForm(a, c); [EOL] } <line_num>: 55,79
protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException { [EOL]     PolynomialFunctionLagrangeForm.verifyInterpolationArray(x, y, true); [EOL]     final double[] divdiff = y.clone(); [EOL]     final int n = x.length; [EOL]     final double[] a = new double[n]; [EOL]     a[0] = divdiff[0]; [EOL]     for (int i = 1; i < n; i++) { [EOL]         for (int j = 0; j < n - i; j++) { [EOL]             final double denominator = x[j + i] - x[j]; [EOL]             divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator; [EOL]         } [EOL]         a[i] = divdiff[0]; [EOL]     } [EOL]     return a; [EOL] } <line_num>: 99,119
