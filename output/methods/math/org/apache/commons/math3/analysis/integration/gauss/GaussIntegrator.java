public GaussIntegrator(double[] points, double[] weights) throws NonMonotonicSequenceException, DimensionMismatchException { [EOL]     if (points.length != weights.length) { [EOL]         throw new DimensionMismatchException(points.length, weights.length); [EOL]     } [EOL]     MathArrays.checkOrder(points, MathArrays.OrderDirection.INCREASING, true, true); [EOL]     this.points = points.clone(); [EOL]     this.weights = weights.clone(); [EOL] } <line_num>: 50,62
public GaussIntegrator(Pair<double[], double[]> pointsAndWeights) throws NonMonotonicSequenceException { [EOL]     this(pointsAndWeights.getFirst(), pointsAndWeights.getSecond()); [EOL] } <line_num>: 74,77
public double integrate(UnivariateFunction f) { [EOL]     double s = 0; [EOL]     double c = 0; [EOL]     for (int i = 0; i < points.length; i++) { [EOL]         final double x = points[i]; [EOL]         final double w = weights[i]; [EOL]         final double y = w * f.value(x) - c; [EOL]         final double t = s + y; [EOL]         c = (t - s) - y; [EOL]         s = t; [EOL]     } [EOL]     return s; [EOL] } <line_num>: 89,101
public int getNumberOfPoints() { [EOL]     return points.length; [EOL] } <line_num>: 107,109
public double getPoint(int index) { [EOL]     return points[index]; [EOL] } <line_num>: 117,119
public double getWeight(int index) { [EOL]     return weights[index]; [EOL] } <line_num>: 127,129
