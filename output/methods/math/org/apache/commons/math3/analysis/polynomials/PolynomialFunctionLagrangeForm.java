public PolynomialFunctionLagrangeForm(double[] x, double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException { [EOL]     this.x = new double[x.length]; [EOL]     this.y = new double[y.length]; [EOL]     System.arraycopy(x, 0, this.x, 0, x.length); [EOL]     System.arraycopy(y, 0, this.y, 0, y.length); [EOL]     coefficientsComputed = false; [EOL]     if (!verifyInterpolationArray(x, y, false)) { [EOL]         MathArrays.sortInPlace(this.x, this.y); [EOL]         verifyInterpolationArray(this.x, this.y, true); [EOL]     } [EOL] } <line_num>: 72,85
public double value(double z) { [EOL]     return evaluateInternal(x, y, z); [EOL] } <line_num>: 99,101
public int degree() { [EOL]     return x.length - 1; [EOL] } <line_num>: 108,110
public double[] getInterpolatingPoints() { [EOL]     double[] out = new double[x.length]; [EOL]     System.arraycopy(x, 0, out, 0, x.length); [EOL]     return out; [EOL] } <line_num>: 119,123
public double[] getInterpolatingValues() { [EOL]     double[] out = new double[y.length]; [EOL]     System.arraycopy(y, 0, out, 0, y.length); [EOL]     return out; [EOL] } <line_num>: 132,136
public double[] getCoefficients() { [EOL]     if (!coefficientsComputed) { [EOL]         computeCoefficients(); [EOL]     } [EOL]     double[] out = new double[coefficients.length]; [EOL]     System.arraycopy(coefficients, 0, out, 0, coefficients.length); [EOL]     return out; [EOL] } <line_num>: 148,155
public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException { [EOL]     if (verifyInterpolationArray(x, y, false)) { [EOL]         return evaluateInternal(x, y, z); [EOL]     } [EOL]     final double[] xNew = new double[x.length]; [EOL]     final double[] yNew = new double[y.length]; [EOL]     System.arraycopy(x, 0, xNew, 0, x.length); [EOL]     System.arraycopy(y, 0, yNew, 0, y.length); [EOL]     MathArrays.sortInPlace(xNew, yNew); [EOL]     verifyInterpolationArray(xNew, yNew, true); [EOL]     return evaluateInternal(xNew, yNew, z); [EOL] } <line_num>: 173,189
private static double evaluateInternal(double[] x, double[] y, double z) { [EOL]     int nearest = 0; [EOL]     final int n = x.length; [EOL]     final double[] c = new double[n]; [EOL]     final double[] d = new double[n]; [EOL]     double min_dist = Double.POSITIVE_INFINITY; [EOL]     for (int i = 0; i < n; i++) { [EOL]         c[i] = y[i]; [EOL]         d[i] = y[i]; [EOL]         final double dist = FastMath.abs(z - x[i]); [EOL]         if (dist < min_dist) { [EOL]             nearest = i; [EOL]             min_dist = dist; [EOL]         } [EOL]     } [EOL]     double value = y[nearest]; [EOL]     for (int i = 1; i < n; i++) { [EOL]         for (int j = 0; j < n - i; j++) { [EOL]             final double tc = x[j] - z; [EOL]             final double td = x[i + j] - z; [EOL]             final double divider = x[j] - x[i + j]; [EOL]             final double w = (c[j + 1] - d[j]) / divider; [EOL]             c[j] = tc * w; [EOL]             d[j] = td * w; [EOL]         } [EOL]         if (nearest < 0.5 * (n - i + 1)) { [EOL]             value += c[nearest]; [EOL]         } else { [EOL]             nearest--; [EOL]             value += d[nearest]; [EOL]         } [EOL]     } [EOL]     return value; [EOL] } <line_num>: 207,248
protected void computeCoefficients() { [EOL]     final int n = degree() + 1; [EOL]     coefficients = new double[n]; [EOL]     for (int i = 0; i < n; i++) { [EOL]         coefficients[i] = 0.0; [EOL]     } [EOL]     final double[] c = new double[n + 1]; [EOL]     c[0] = 1.0; [EOL]     for (int i = 0; i < n; i++) { [EOL]         for (int j = i; j > 0; j--) { [EOL]             c[j] = c[j - 1] - c[j] * x[i]; [EOL]         } [EOL]         c[0] *= -x[i]; [EOL]         c[i + 1] = 1; [EOL]     } [EOL]     final double[] tc = new double[n]; [EOL]     for (int i = 0; i < n; i++) { [EOL]         double d = 1; [EOL]         for (int j = 0; j < n; j++) { [EOL]             if (i != j) { [EOL]                 d *= x[i] - x[j]; [EOL]             } [EOL]         } [EOL]         final double t = y[i] / d; [EOL]         tc[n - 1] = c[n]; [EOL]         coefficients[n - 1] += t * tc[n - 1]; [EOL]         for (int j = n - 2; j >= 0; j--) { [EOL]             tc[j] = c[j + 1] + tc[j + 1] * x[i]; [EOL]             coefficients[j] += t * tc[j]; [EOL]         } [EOL]     } [EOL]     coefficientsComputed = true; [EOL] } <line_num>: 256,296
public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException { [EOL]     if (x.length != y.length) { [EOL]         throw new DimensionMismatchException(x.length, y.length); [EOL]     } [EOL]     if (x.length < 2) { [EOL]         throw new NumberIsTooSmallException(LocalizedFormats.WRONG_NUMBER_OF_POINTS, 2, x.length, true); [EOL]     } [EOL]     return MathArrays.checkOrder(x, MathArrays.OrderDirection.INCREASING, true, abort); [EOL] } <line_num>: 316,326
