public TricubicSplineInterpolatingFunction interpolate(final double[] xval, final double[] yval, final double[] zval, final double[][][] fval) throws NoDataException, NumberIsTooSmallException, DimensionMismatchException, NonMonotonicSequenceException { [EOL]     if (xval.length == 0 || yval.length == 0 || zval.length == 0 || fval.length == 0) { [EOL]         throw new NoDataException(); [EOL]     } [EOL]     if (xval.length != fval.length) { [EOL]         throw new DimensionMismatchException(xval.length, fval.length); [EOL]     } [EOL]     MathArrays.checkOrder(xval); [EOL]     MathArrays.checkOrder(yval); [EOL]     MathArrays.checkOrder(zval); [EOL]     final int xLen = xval.length; [EOL]     final int yLen = yval.length; [EOL]     final int zLen = zval.length; [EOL]     final double[][][] fvalXY = new double[zLen][xLen][yLen]; [EOL]     final double[][][] fvalZX = new double[yLen][zLen][xLen]; [EOL]     for (int i = 0; i < xLen; i++) { [EOL]         if (fval[i].length != yLen) { [EOL]             throw new DimensionMismatchException(fval[i].length, yLen); [EOL]         } [EOL]         for (int j = 0; j < yLen; j++) { [EOL]             if (fval[i][j].length != zLen) { [EOL]                 throw new DimensionMismatchException(fval[i][j].length, zLen); [EOL]             } [EOL]             for (int k = 0; k < zLen; k++) { [EOL]                 final double v = fval[i][j][k]; [EOL]                 fvalXY[k][i][j] = v; [EOL]                 fvalZX[j][k][i] = v; [EOL]             } [EOL]         } [EOL]     } [EOL]     final BicubicSplineInterpolator bsi = new BicubicSplineInterpolator(); [EOL]     final BicubicSplineInterpolatingFunction[] xSplineYZ = new BicubicSplineInterpolatingFunction[xLen]; [EOL]     for (int i = 0; i < xLen; i++) { [EOL]         xSplineYZ[i] = bsi.interpolate(yval, zval, fval[i]); [EOL]     } [EOL]     final BicubicSplineInterpolatingFunction[] ySplineZX = new BicubicSplineInterpolatingFunction[yLen]; [EOL]     for (int j = 0; j < yLen; j++) { [EOL]         ySplineZX[j] = bsi.interpolate(zval, xval, fvalZX[j]); [EOL]     } [EOL]     final BicubicSplineInterpolatingFunction[] zSplineXY = new BicubicSplineInterpolatingFunction[zLen]; [EOL]     for (int k = 0; k < zLen; k++) { [EOL]         zSplineXY[k] = bsi.interpolate(xval, yval, fvalXY[k]); [EOL]     } [EOL]     final double[][][] dFdX = new double[xLen][yLen][zLen]; [EOL]     final double[][][] dFdY = new double[xLen][yLen][zLen]; [EOL]     final double[][][] d2FdXdY = new double[xLen][yLen][zLen]; [EOL]     for (int k = 0; k < zLen; k++) { [EOL]         final BicubicSplineInterpolatingFunction f = zSplineXY[k]; [EOL]         for (int i = 0; i < xLen; i++) { [EOL]             final double x = xval[i]; [EOL]             for (int j = 0; j < yLen; j++) { [EOL]                 final double y = yval[j]; [EOL]                 dFdX[i][j][k] = f.partialDerivativeX(x, y); [EOL]                 dFdY[i][j][k] = f.partialDerivativeY(x, y); [EOL]                 d2FdXdY[i][j][k] = f.partialDerivativeXY(x, y); [EOL]             } [EOL]         } [EOL]     } [EOL]     final double[][][] dFdZ = new double[xLen][yLen][zLen]; [EOL]     final double[][][] d2FdYdZ = new double[xLen][yLen][zLen]; [EOL]     for (int i = 0; i < xLen; i++) { [EOL]         final BicubicSplineInterpolatingFunction f = xSplineYZ[i]; [EOL]         for (int j = 0; j < yLen; j++) { [EOL]             final double y = yval[j]; [EOL]             for (int k = 0; k < zLen; k++) { [EOL]                 final double z = zval[k]; [EOL]                 dFdZ[i][j][k] = f.partialDerivativeY(y, z); [EOL]                 d2FdYdZ[i][j][k] = f.partialDerivativeXY(y, z); [EOL]             } [EOL]         } [EOL]     } [EOL]     final double[][][] d2FdZdX = new double[xLen][yLen][zLen]; [EOL]     for (int j = 0; j < yLen; j++) { [EOL]         final BicubicSplineInterpolatingFunction f = ySplineZX[j]; [EOL]         for (int k = 0; k < zLen; k++) { [EOL]             final double z = zval[k]; [EOL]             for (int i = 0; i < xLen; i++) { [EOL]                 final double x = xval[i]; [EOL]                 d2FdZdX[i][j][k] = f.partialDerivativeXY(z, x); [EOL]             } [EOL]         } [EOL]     } [EOL]     final double[][][] d3FdXdYdZ = new double[xLen][yLen][zLen]; [EOL]     for (int i = 0; i < xLen; i++) { [EOL]         final int nI = nextIndex(i, xLen); [EOL]         final int pI = previousIndex(i); [EOL]         for (int j = 0; j < yLen; j++) { [EOL]             final int nJ = nextIndex(j, yLen); [EOL]             final int pJ = previousIndex(j); [EOL]             for (int k = 0; k < zLen; k++) { [EOL]                 final int nK = nextIndex(k, zLen); [EOL]                 final int pK = previousIndex(k); [EOL]                 d3FdXdYdZ[i][j][k] = (fval[nI][nJ][nK] - fval[nI][pJ][nK] - fval[pI][nJ][nK] + fval[pI][pJ][nK] - fval[nI][nJ][pK] + fval[nI][pJ][pK] + fval[pI][nJ][pK] - fval[pI][pJ][pK]) / ((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ]) * (zval[nK] - zval[pK])); [EOL]             } [EOL]         } [EOL]     } [EOL]     return new TricubicSplineInterpolatingFunction(xval, yval, zval, fval, dFdX, dFdY, dFdZ, d2FdXdY, d2FdZdX, d2FdYdZ, d3FdXdYdZ); [EOL] } <line_num>: 36,175
private int nextIndex(int i, int max) { [EOL]     final int index = i + 1; [EOL]     return index < max ? index : index - 1; [EOL] } <line_num>: 185,188
private int previousIndex(int i) { [EOL]     final int index = i - 1; [EOL]     return index >= 0 ? index : 0; [EOL] } <line_num>: 196,199
