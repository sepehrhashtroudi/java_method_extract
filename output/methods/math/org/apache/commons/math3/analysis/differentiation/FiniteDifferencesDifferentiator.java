public FiniteDifferencesDifferentiator(final int nbPoints, final double stepSize) throws NotPositiveException, NumberIsTooSmallException { [EOL]     this(nbPoints, stepSize, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY); [EOL] } <line_num>: 107,110
public FiniteDifferencesDifferentiator(final int nbPoints, final double stepSize, final double tLower, final double tUpper) throws NotPositiveException, NumberIsTooSmallException, NumberIsTooLargeException { [EOL]     if (nbPoints <= 1) { [EOL]         throw new NumberIsTooSmallException(stepSize, 1, false); [EOL]     } [EOL]     this.nbPoints = nbPoints; [EOL]     if (stepSize <= 0) { [EOL]         throw new NotPositiveException(stepSize); [EOL]     } [EOL]     this.stepSize = stepSize; [EOL]     halfSampleSpan = 0.5 * stepSize * (nbPoints - 1); [EOL]     if (2 * halfSampleSpan >= tUpper - tLower) { [EOL]         throw new NumberIsTooLargeException(2 * halfSampleSpan, tUpper - tLower, false); [EOL]     } [EOL]     final double safety = FastMath.ulp(halfSampleSpan); [EOL]     this.tMin = tLower + halfSampleSpan + safety; [EOL]     this.tMax = tUpper - halfSampleSpan - safety; [EOL] } <line_num>: 141,163
public int getNbPoints() { [EOL]     return nbPoints; [EOL] } <line_num>: 169,171
public double getStepSize() { [EOL]     return stepSize; [EOL] } <line_num>: 177,179
private DerivativeStructure evaluate(final DerivativeStructure t, final double t0, final double[] y) throws NumberIsTooLargeException { [EOL]     final double[] top = new double[nbPoints]; [EOL]     final double[] bottom = new double[nbPoints]; [EOL]     for (int i = 0; i < nbPoints; ++i) { [EOL]         bottom[i] = y[i]; [EOL]         for (int j = 1; j <= i; ++j) { [EOL]             bottom[i - j] = (bottom[i - j + 1] - bottom[i - j]) / (j * stepSize); [EOL]         } [EOL]         top[i] = bottom[0]; [EOL]     } [EOL]     final int order = t.getOrder(); [EOL]     final int parameters = t.getFreeParameters(); [EOL]     final double[] derivatives = t.getAllDerivatives(); [EOL]     final double dt0 = t.getValue() - t0; [EOL]     DerivativeStructure interpolation = new DerivativeStructure(parameters, order, 0.0); [EOL]     DerivativeStructure monomial = null; [EOL]     for (int i = 0; i < nbPoints; ++i) { [EOL]         if (i == 0) { [EOL]             monomial = new DerivativeStructure(parameters, order, 1.0); [EOL]         } else { [EOL]             derivatives[0] = dt0 - (i - 1) * stepSize; [EOL]             final DerivativeStructure deltaX = new DerivativeStructure(parameters, order, derivatives); [EOL]             monomial = monomial.multiply(deltaX); [EOL]         } [EOL]         interpolation = interpolation.add(monomial.multiply(top[i])); [EOL]     } [EOL]     return interpolation; [EOL] } <line_num>: 193,236
public double value(final double x) throws MathIllegalArgumentException { [EOL]     return function.value(x); [EOL] } <line_num>: 248,250
public DerivativeStructure value(final DerivativeStructure t) throws MathIllegalArgumentException { [EOL]     if (t.getOrder() >= nbPoints) { [EOL]         throw new NumberIsTooLargeException(t.getOrder(), nbPoints, false); [EOL]     } [EOL]     final double t0 = FastMath.max(FastMath.min(t.getValue(), tMax), tMin) - halfSampleSpan; [EOL]     final double[] y = new double[nbPoints]; [EOL]     for (int i = 0; i < nbPoints; ++i) { [EOL]         y[i] = function.value(t0 + i * stepSize); [EOL]     } [EOL]     return evaluate(t, t0, y); [EOL] } <line_num>: 253,273
public UnivariateDifferentiableFunction differentiate(final UnivariateFunction function) { [EOL]     return new UnivariateDifferentiableFunction() { [EOL]  [EOL]         public double value(final double x) throws MathIllegalArgumentException { [EOL]             return function.value(x); [EOL]         } [EOL]  [EOL]         public DerivativeStructure value(final DerivativeStructure t) throws MathIllegalArgumentException { [EOL]             if (t.getOrder() >= nbPoints) { [EOL]                 throw new NumberIsTooLargeException(t.getOrder(), nbPoints, false); [EOL]             } [EOL]             final double t0 = FastMath.max(FastMath.min(t.getValue(), tMax), tMin) - halfSampleSpan; [EOL]             final double[] y = new double[nbPoints]; [EOL]             for (int i = 0; i < nbPoints; ++i) { [EOL]                 y[i] = function.value(t0 + i * stepSize); [EOL]             } [EOL]             return evaluate(t, t0, y); [EOL]         } [EOL]     }; [EOL] } <line_num>: 244,276
public double[] value(final double x) throws MathIllegalArgumentException { [EOL]     return function.value(x); [EOL] } <line_num>: 288,290
public DerivativeStructure[] value(final DerivativeStructure t) throws MathIllegalArgumentException { [EOL]     if (t.getOrder() >= nbPoints) { [EOL]         throw new NumberIsTooLargeException(t.getOrder(), nbPoints, false); [EOL]     } [EOL]     final double t0 = FastMath.max(FastMath.min(t.getValue(), tMax), tMin) - halfSampleSpan; [EOL]     double[][] y = null; [EOL]     for (int i = 0; i < nbPoints; ++i) { [EOL]         final double[] v = function.value(t0 + i * stepSize); [EOL]         if (i == 0) { [EOL]             y = new double[v.length][nbPoints]; [EOL]         } [EOL]         for (int j = 0; j < v.length; ++j) { [EOL]             y[j][i] = v[j]; [EOL]         } [EOL]     } [EOL]     final DerivativeStructure[] value = new DerivativeStructure[y.length]; [EOL]     for (int j = 0; j < value.length; ++j) { [EOL]         value[j] = evaluate(t, t0, y[j]); [EOL]     } [EOL]     return value; [EOL] } <line_num>: 293,324
public UnivariateDifferentiableVectorFunction differentiate(final UnivariateVectorFunction function) { [EOL]     return new UnivariateDifferentiableVectorFunction() { [EOL]  [EOL]         public double[] value(final double x) throws MathIllegalArgumentException { [EOL]             return function.value(x); [EOL]         } [EOL]  [EOL]         public DerivativeStructure[] value(final DerivativeStructure t) throws MathIllegalArgumentException { [EOL]             if (t.getOrder() >= nbPoints) { [EOL]                 throw new NumberIsTooLargeException(t.getOrder(), nbPoints, false); [EOL]             } [EOL]             final double t0 = FastMath.max(FastMath.min(t.getValue(), tMax), tMin) - halfSampleSpan; [EOL]             double[][] y = null; [EOL]             for (int i = 0; i < nbPoints; ++i) { [EOL]                 final double[] v = function.value(t0 + i * stepSize); [EOL]                 if (i == 0) { [EOL]                     y = new double[v.length][nbPoints]; [EOL]                 } [EOL]                 for (int j = 0; j < v.length; ++j) { [EOL]                     y[j][i] = v[j]; [EOL]                 } [EOL]             } [EOL]             final DerivativeStructure[] value = new DerivativeStructure[y.length]; [EOL]             for (int j = 0; j < value.length; ++j) { [EOL]                 value[j] = evaluate(t, t0, y[j]); [EOL]             } [EOL]             return value; [EOL]         } [EOL]     }; [EOL] } <line_num>: 284,327
public double[][] value(final double x) throws MathIllegalArgumentException { [EOL]     return function.value(x); [EOL] } <line_num>: 339,341
public DerivativeStructure[][] value(final DerivativeStructure t) throws MathIllegalArgumentException { [EOL]     if (t.getOrder() >= nbPoints) { [EOL]         throw new NumberIsTooLargeException(t.getOrder(), nbPoints, false); [EOL]     } [EOL]     final double t0 = FastMath.max(FastMath.min(t.getValue(), tMax), tMin) - halfSampleSpan; [EOL]     double[][][] y = null; [EOL]     for (int i = 0; i < nbPoints; ++i) { [EOL]         final double[][] v = function.value(t0 + i * stepSize); [EOL]         if (i == 0) { [EOL]             y = new double[v.length][v[0].length][nbPoints]; [EOL]         } [EOL]         for (int j = 0; j < v.length; ++j) { [EOL]             for (int k = 0; k < v[j].length; ++k) { [EOL]                 y[j][k][i] = v[j][k]; [EOL]             } [EOL]         } [EOL]     } [EOL]     final DerivativeStructure[][] value = new DerivativeStructure[y.length][y[0].length]; [EOL]     for (int j = 0; j < value.length; ++j) { [EOL]         for (int k = 0; k < y[j].length; ++k) { [EOL]             value[j][k] = evaluate(t, t0, y[j][k]); [EOL]         } [EOL]     } [EOL]     return value; [EOL] } <line_num>: 344,379
public UnivariateDifferentiableMatrixFunction differentiate(final UnivariateMatrixFunction function) { [EOL]     return new UnivariateDifferentiableMatrixFunction() { [EOL]  [EOL]         public double[][] value(final double x) throws MathIllegalArgumentException { [EOL]             return function.value(x); [EOL]         } [EOL]  [EOL]         public DerivativeStructure[][] value(final DerivativeStructure t) throws MathIllegalArgumentException { [EOL]             if (t.getOrder() >= nbPoints) { [EOL]                 throw new NumberIsTooLargeException(t.getOrder(), nbPoints, false); [EOL]             } [EOL]             final double t0 = FastMath.max(FastMath.min(t.getValue(), tMax), tMin) - halfSampleSpan; [EOL]             double[][][] y = null; [EOL]             for (int i = 0; i < nbPoints; ++i) { [EOL]                 final double[][] v = function.value(t0 + i * stepSize); [EOL]                 if (i == 0) { [EOL]                     y = new double[v.length][v[0].length][nbPoints]; [EOL]                 } [EOL]                 for (int j = 0; j < v.length; ++j) { [EOL]                     for (int k = 0; k < v[j].length; ++k) { [EOL]                         y[j][k][i] = v[j][k]; [EOL]                     } [EOL]                 } [EOL]             } [EOL]             final DerivativeStructure[][] value = new DerivativeStructure[y.length][y[0].length]; [EOL]             for (int j = 0; j < value.length; ++j) { [EOL]                 for (int k = 0; k < y[j].length; ++k) { [EOL]                     value[j][k] = evaluate(t, t0, y[j][k]); [EOL]                 } [EOL]             } [EOL]             return value; [EOL]         } [EOL]     }; [EOL] } <line_num>: 335,382
