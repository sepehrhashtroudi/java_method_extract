protected RungeKuttaStepInterpolator() { [EOL]     previousState = null; [EOL]     yDotK = null; [EOL]     integrator = null; [EOL] } <line_num>: 60,64
public RungeKuttaStepInterpolator(final RungeKuttaStepInterpolator interpolator) { [EOL]     super(interpolator); [EOL]     if (interpolator.currentState != null) { [EOL]         previousState = interpolator.previousState.clone(); [EOL]         yDotK = new double[interpolator.yDotK.length][]; [EOL]         for (int k = 0; k < interpolator.yDotK.length; ++k) { [EOL]             yDotK[k] = interpolator.yDotK[k].clone(); [EOL]         } [EOL]     } else { [EOL]         previousState = null; [EOL]         yDotK = null; [EOL]     } [EOL]     integrator = null; [EOL] } <line_num>: 83,105
public void reinitialize(final AbstractIntegrator rkIntegrator, final double[] y, final double[][] yDotArray, final boolean forward, final EquationsMapper primaryMapper, final EquationsMapper[] secondaryMappers) { [EOL]     reinitialize(y, forward, primaryMapper, secondaryMappers); [EOL]     this.previousState = null; [EOL]     this.yDotK = yDotArray; [EOL]     this.integrator = rkIntegrator; [EOL] } <line_num>: 130,138
@Override [EOL] public void shift() { [EOL]     previousState = currentState.clone(); [EOL]     super.shift(); [EOL] } <line_num>: 141,145
@Override [EOL] public void writeExternal(final ObjectOutput out) throws IOException { [EOL]     writeBaseExternal(out); [EOL]     final int n = (currentState == null) ? -1 : currentState.length; [EOL]     for (int i = 0; i < n; ++i) { [EOL]         out.writeDouble(previousState[i]); [EOL]     } [EOL]     final int kMax = (yDotK == null) ? -1 : yDotK.length; [EOL]     out.writeInt(kMax); [EOL]     for (int k = 0; k < kMax; ++k) { [EOL]         for (int i = 0; i < n; ++i) { [EOL]             out.writeDouble(yDotK[k][i]); [EOL]         } [EOL]     } [EOL] } <line_num>: 148,171
@Override [EOL] public void readExternal(final ObjectInput in) throws IOException, ClassNotFoundException { [EOL]     final double t = readBaseExternal(in); [EOL]     final int n = (currentState == null) ? -1 : currentState.length; [EOL]     if (n < 0) { [EOL]         previousState = null; [EOL]     } else { [EOL]         previousState = new double[n]; [EOL]         for (int i = 0; i < n; ++i) { [EOL]             previousState[i] = in.readDouble(); [EOL]         } [EOL]     } [EOL]     final int kMax = in.readInt(); [EOL]     yDotK = (kMax < 0) ? null : new double[kMax][]; [EOL]     for (int k = 0; k < kMax; ++k) { [EOL]         yDotK[k] = (n < 0) ? null : new double[n]; [EOL]         for (int i = 0; i < n; ++i) { [EOL]             yDotK[k][i] = in.readDouble(); [EOL]         } [EOL]     } [EOL]     integrator = null; [EOL]     if (currentState != null) { [EOL]         setInterpolatedTime(t); [EOL]     } else { [EOL]         interpolatedTime = t; [EOL]     } [EOL] } <line_num>: 174,210
