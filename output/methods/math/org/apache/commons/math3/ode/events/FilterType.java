@Override [EOL] protected boolean getTriggeredIncreasing() { [EOL]     return false; [EOL] } <line_num>: 39,42
@Override [EOL] protected Transformer selectTransformer(final Transformer previous, final double g, final boolean forward) { [EOL]     if (forward) { [EOL]         switch(previous) { [EOL]             case UNINITIALIZED: [EOL]                 if (g > 0) { [EOL]                     return Transformer.MAX; [EOL]                 } else if (g < 0) { [EOL]                     return Transformer.PLUS; [EOL]                 } else { [EOL]                     return Transformer.UNINITIALIZED; [EOL]                 } [EOL]             case PLUS: [EOL]                 if (g >= 0) { [EOL]                     return Transformer.MIN; [EOL]                 } else { [EOL]                     return previous; [EOL]                 } [EOL]             case MINUS: [EOL]                 if (g >= 0) { [EOL]                     return Transformer.MAX; [EOL]                 } else { [EOL]                     return previous; [EOL]                 } [EOL]             case MIN: [EOL]                 if (g <= 0) { [EOL]                     return Transformer.MINUS; [EOL]                 } else { [EOL]                     return previous; [EOL]                 } [EOL]             case MAX: [EOL]                 if (g <= 0) { [EOL]                     return Transformer.PLUS; [EOL]                 } else { [EOL]                     return previous; [EOL]                 } [EOL]             default: [EOL]                 throw new MathInternalError(); [EOL]         } [EOL]     } else { [EOL]         switch(previous) { [EOL]             case UNINITIALIZED: [EOL]                 if (g > 0) { [EOL]                     return Transformer.MINUS; [EOL]                 } else if (g < 0) { [EOL]                     return Transformer.MIN; [EOL]                 } else { [EOL]                     return Transformer.UNINITIALIZED; [EOL]                 } [EOL]             case PLUS: [EOL]                 if (g <= 0) { [EOL]                     return Transformer.MAX; [EOL]                 } else { [EOL]                     return previous; [EOL]                 } [EOL]             case MINUS: [EOL]                 if (g <= 0) { [EOL]                     return Transformer.MIN; [EOL]                 } else { [EOL]                     return previous; [EOL]                 } [EOL]             case MIN: [EOL]                 if (g >= 0) { [EOL]                     return Transformer.PLUS; [EOL]                 } else { [EOL]                     return previous; [EOL]                 } [EOL]             case MAX: [EOL]                 if (g >= 0) { [EOL]                     return Transformer.MINUS; [EOL]                 } else { [EOL]                     return previous; [EOL]                 } [EOL]             default: [EOL]                 throw new MathInternalError(); [EOL]         } [EOL]     } [EOL] } <line_num>: 90,204
@Override [EOL] protected boolean getTriggeredIncreasing() { [EOL]     return true; [EOL] } <line_num>: 217,220
@Override [EOL] protected Transformer selectTransformer(final Transformer previous, final double g, final boolean forward) { [EOL]     if (forward) { [EOL]         switch(previous) { [EOL]             case UNINITIALIZED: [EOL]                 if (g > 0) { [EOL]                     return Transformer.PLUS; [EOL]                 } else if (g < 0) { [EOL]                     return Transformer.MIN; [EOL]                 } else { [EOL]                     return Transformer.UNINITIALIZED; [EOL]                 } [EOL]             case PLUS: [EOL]                 if (g <= 0) { [EOL]                     return Transformer.MAX; [EOL]                 } else { [EOL]                     return previous; [EOL]                 } [EOL]             case MINUS: [EOL]                 if (g <= 0) { [EOL]                     return Transformer.MIN; [EOL]                 } else { [EOL]                     return previous; [EOL]                 } [EOL]             case MIN: [EOL]                 if (g >= 0) { [EOL]                     return Transformer.PLUS; [EOL]                 } else { [EOL]                     return previous; [EOL]                 } [EOL]             case MAX: [EOL]                 if (g >= 0) { [EOL]                     return Transformer.MINUS; [EOL]                 } else { [EOL]                     return previous; [EOL]                 } [EOL]             default: [EOL]                 throw new MathInternalError(); [EOL]         } [EOL]     } else { [EOL]         switch(previous) { [EOL]             case UNINITIALIZED: [EOL]                 if (g > 0) { [EOL]                     return Transformer.MAX; [EOL]                 } else if (g < 0) { [EOL]                     return Transformer.MINUS; [EOL]                 } else { [EOL]                     return Transformer.UNINITIALIZED; [EOL]                 } [EOL]             case PLUS: [EOL]                 if (g >= 0) { [EOL]                     return Transformer.MIN; [EOL]                 } else { [EOL]                     return previous; [EOL]                 } [EOL]             case MINUS: [EOL]                 if (g >= 0) { [EOL]                     return Transformer.MAX; [EOL]                 } else { [EOL]                     return previous; [EOL]                 } [EOL]             case MIN: [EOL]                 if (g <= 0) { [EOL]                     return Transformer.MINUS; [EOL]                 } else { [EOL]                     return previous; [EOL]                 } [EOL]             case MAX: [EOL]                 if (g <= 0) { [EOL]                     return Transformer.PLUS; [EOL]                 } else { [EOL]                     return previous; [EOL]                 } [EOL]             default: [EOL]                 throw new MathInternalError(); [EOL]         } [EOL]     } [EOL] } <line_num>: 268,382
protected abstract boolean getTriggeredIncreasing(); <line_num>: 389,389
protected abstract Transformer selectTransformer(Transformer previous, double g, boolean forward); <line_num>: 398,399
