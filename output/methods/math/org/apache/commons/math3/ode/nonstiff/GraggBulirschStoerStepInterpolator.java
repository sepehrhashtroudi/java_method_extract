public GraggBulirschStoerStepInterpolator() { [EOL]     y0Dot = null; [EOL]     y1 = null; [EOL]     y1Dot = null; [EOL]     yMidDots = null; [EOL]     resetTables(-1); [EOL] } <line_num>: 111,117
public GraggBulirschStoerStepInterpolator(final double[] y, final double[] y0Dot, final double[] y1, final double[] y1Dot, final double[][] yMidDots, final boolean forward, final EquationsMapper primaryMapper, final EquationsMapper[] secondaryMappers) { [EOL]     super(y, forward, primaryMapper, secondaryMappers); [EOL]     this.y0Dot = y0Dot; [EOL]     this.y1 = y1; [EOL]     this.y1Dot = y1Dot; [EOL]     this.yMidDots = yMidDots; [EOL]     resetTables(yMidDots.length + 4); [EOL] } <line_num>: 133,148
public GraggBulirschStoerStepInterpolator(final GraggBulirschStoerStepInterpolator interpolator) { [EOL]     super(interpolator); [EOL]     final int dimension = currentState.length; [EOL]     y0Dot = null; [EOL]     y1 = null; [EOL]     y1Dot = null; [EOL]     yMidDots = null; [EOL]     if (interpolator.polynomials == null) { [EOL]         polynomials = null; [EOL]         currentDegree = -1; [EOL]     } else { [EOL]         resetTables(interpolator.currentDegree); [EOL]         for (int i = 0; i < polynomials.length; ++i) { [EOL]             polynomials[i] = new double[dimension]; [EOL]             System.arraycopy(interpolator.polynomials[i], 0, polynomials[i], 0, dimension); [EOL]         } [EOL]         currentDegree = interpolator.currentDegree; [EOL]     } [EOL] } <line_num>: 155,183
private void resetTables(final int maxDegree) { [EOL]     if (maxDegree < 0) { [EOL]         polynomials = null; [EOL]         errfac = null; [EOL]         currentDegree = -1; [EOL]     } else { [EOL]         final double[][] newPols = new double[maxDegree + 1][]; [EOL]         if (polynomials != null) { [EOL]             System.arraycopy(polynomials, 0, newPols, 0, polynomials.length); [EOL]             for (int i = polynomials.length; i < newPols.length; ++i) { [EOL]                 newPols[i] = new double[currentState.length]; [EOL]             } [EOL]         } else { [EOL]             for (int i = 0; i < newPols.length; ++i) { [EOL]                 newPols[i] = new double[currentState.length]; [EOL]             } [EOL]         } [EOL]         polynomials = newPols; [EOL]         if (maxDegree <= 4) { [EOL]             errfac = null; [EOL]         } else { [EOL]             errfac = new double[maxDegree - 4]; [EOL]             for (int i = 0; i < errfac.length; ++i) { [EOL]                 final int ip5 = i + 5; [EOL]                 errfac[i] = 1.0 / (ip5 * ip5); [EOL]                 final double e = 0.5 * FastMath.sqrt(((double) (i + 1)) / ip5); [EOL]                 for (int j = 0; j <= i; ++j) { [EOL]                     errfac[i] *= e / (j + 1); [EOL]                 } [EOL]             } [EOL]         } [EOL]         currentDegree = 0; [EOL]     } [EOL] } <line_num>: 190,230
@Override [EOL] protected StepInterpolator doCopy() { [EOL]     return new GraggBulirschStoerStepInterpolator(this); [EOL] } <line_num>: 233,236
public void computeCoefficients(final int mu, final double h) { [EOL]     if ((polynomials == null) || (polynomials.length <= (mu + 4))) { [EOL]         resetTables(mu + 4); [EOL]     } [EOL]     currentDegree = mu + 4; [EOL]     for (int i = 0; i < currentState.length; ++i) { [EOL]         final double yp0 = h * y0Dot[i]; [EOL]         final double yp1 = h * y1Dot[i]; [EOL]         final double ydiff = y1[i] - currentState[i]; [EOL]         final double aspl = ydiff - yp1; [EOL]         final double bspl = yp0 - ydiff; [EOL]         polynomials[0][i] = currentState[i]; [EOL]         polynomials[1][i] = ydiff; [EOL]         polynomials[2][i] = aspl; [EOL]         polynomials[3][i] = bspl; [EOL]         if (mu < 0) { [EOL]             return; [EOL]         } [EOL]         final double ph0 = 0.5 * (currentState[i] + y1[i]) + 0.125 * (aspl + bspl); [EOL]         polynomials[4][i] = 16 * (yMidDots[0][i] - ph0); [EOL]         if (mu > 0) { [EOL]             final double ph1 = ydiff + 0.25 * (aspl - bspl); [EOL]             polynomials[5][i] = 16 * (yMidDots[1][i] - ph1); [EOL]             if (mu > 1) { [EOL]                 final double ph2 = yp1 - yp0; [EOL]                 polynomials[6][i] = 16 * (yMidDots[2][i] - ph2 + polynomials[4][i]); [EOL]                 if (mu > 2) { [EOL]                     final double ph3 = 6 * (bspl - aspl); [EOL]                     polynomials[7][i] = 16 * (yMidDots[3][i] - ph3 + 3 * polynomials[5][i]); [EOL]                     for (int j = 4; j <= mu; ++j) { [EOL]                         final double fac1 = 0.5 * j * (j - 1); [EOL]                         final double fac2 = 2 * fac1 * (j - 2) * (j - 3); [EOL]                         polynomials[j + 4][i] = 16 * (yMidDots[j][i] + fac1 * polynomials[j + 2][i] - fac2 * polynomials[j][i]); [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 243,296
public double estimateError(final double[] scale) { [EOL]     double error = 0; [EOL]     if (currentDegree >= 5) { [EOL]         for (int i = 0; i < scale.length; ++i) { [EOL]             final double e = polynomials[currentDegree][i] / scale[i]; [EOL]             error += e * e; [EOL]         } [EOL]         error = FastMath.sqrt(error / scale.length) * errfac[currentDegree - 5]; [EOL]     } [EOL]     return error; [EOL] } <line_num>: 302,312
@Override [EOL] protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH) { [EOL]     final int dimension = currentState.length; [EOL]     final double oneMinusTheta = 1.0 - theta; [EOL]     final double theta05 = theta - 0.5; [EOL]     final double tOmT = theta * oneMinusTheta; [EOL]     final double t4 = tOmT * tOmT; [EOL]     final double t4Dot = 2 * tOmT * (1 - 2 * theta); [EOL]     final double dot1 = 1.0 / h; [EOL]     final double dot2 = theta * (2 - 3 * theta) / h; [EOL]     final double dot3 = ((3 * theta - 4) * theta + 1) / h; [EOL]     for (int i = 0; i < dimension; ++i) { [EOL]         final double p0 = polynomials[0][i]; [EOL]         final double p1 = polynomials[1][i]; [EOL]         final double p2 = polynomials[2][i]; [EOL]         final double p3 = polynomials[3][i]; [EOL]         interpolatedState[i] = p0 + theta * (p1 + oneMinusTheta * (p2 * theta + p3 * oneMinusTheta)); [EOL]         interpolatedDerivatives[i] = dot1 * p1 + dot2 * p2 + dot3 * p3; [EOL]         if (currentDegree > 3) { [EOL]             double cDot = 0; [EOL]             double c = polynomials[currentDegree][i]; [EOL]             for (int j = currentDegree - 1; j > 3; --j) { [EOL]                 final double d = 1.0 / (j - 3); [EOL]                 cDot = d * (theta05 * cDot + c); [EOL]                 c = polynomials[j][i] + c * d * theta05; [EOL]             } [EOL]             interpolatedState[i] += t4 * c; [EOL]             interpolatedDerivatives[i] += (t4 * cDot + t4Dot * c) / h; [EOL]         } [EOL]     } [EOL]     if (h == 0) { [EOL]         System.arraycopy(yMidDots[1], 0, interpolatedDerivatives, 0, dimension); [EOL]     } [EOL] } <line_num>: 315,359
@Override [EOL] public void writeExternal(final ObjectOutput out) throws IOException { [EOL]     final int dimension = (currentState == null) ? -1 : currentState.length; [EOL]     writeBaseExternal(out); [EOL]     out.writeInt(currentDegree); [EOL]     for (int k = 0; k <= currentDegree; ++k) { [EOL]         for (int l = 0; l < dimension; ++l) { [EOL]             out.writeDouble(polynomials[k][l]); [EOL]         } [EOL]     } [EOL] } <line_num>: 362,379
@Override [EOL] public void readExternal(final ObjectInput in) throws IOException, ClassNotFoundException { [EOL]     final double t = readBaseExternal(in); [EOL]     final int dimension = (currentState == null) ? -1 : currentState.length; [EOL]     final int degree = in.readInt(); [EOL]     resetTables(degree); [EOL]     currentDegree = degree; [EOL]     for (int k = 0; k <= currentDegree; ++k) { [EOL]         for (int l = 0; l < dimension; ++l) { [EOL]             polynomials[k][l] = in.readDouble(); [EOL]         } [EOL]     } [EOL]     setInterpolatedTime(t); [EOL] } <line_num>: 382,404
