public HighamHall54Integrator(final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { [EOL]     super(METHOD_NAME, false, STATIC_C, STATIC_A, STATIC_B, new HighamHall54StepInterpolator(), minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); [EOL] } <line_num>: 78,83
public HighamHall54Integrator(final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) { [EOL]     super(METHOD_NAME, false, STATIC_C, STATIC_A, STATIC_B, new HighamHall54StepInterpolator(), minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance); [EOL] } <line_num>: 96,101
@Override [EOL] public int getOrder() { [EOL]     return 5; [EOL] } <line_num>: 104,107
@Override [EOL] protected double estimateError(final double[][] yDotK, final double[] y0, final double[] y1, final double h) { [EOL]     double error = 0; [EOL]     for (int j = 0; j < mainSetDimension; ++j) { [EOL]         double errSum = STATIC_E[0] * yDotK[0][j]; [EOL]         for (int l = 1; l < STATIC_E.length; ++l) { [EOL]             errSum += STATIC_E[l] * yDotK[l][j]; [EOL]         } [EOL]         final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j])); [EOL]         final double tol = (vecAbsoluteTolerance == null) ? (scalAbsoluteTolerance + scalRelativeTolerance * yScale) : (vecAbsoluteTolerance[j] + vecRelativeTolerance[j] * yScale); [EOL]         final double ratio = h * errSum / tol; [EOL]         error += ratio * ratio; [EOL]     } [EOL]     return FastMath.sqrt(error / mainSetDimension); [EOL] } <line_num>: 110,134
