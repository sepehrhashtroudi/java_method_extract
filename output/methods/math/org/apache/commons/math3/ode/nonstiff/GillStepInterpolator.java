public GillStepInterpolator() { [EOL] } <line_num>: 79,80
public GillStepInterpolator(final GillStepInterpolator interpolator) { [EOL]     super(interpolator); [EOL] } <line_num>: 87,89
@Override [EOL] protected StepInterpolator doCopy() { [EOL]     return new GillStepInterpolator(this); [EOL] } <line_num>: 92,95
@Override [EOL] protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH) { [EOL]     final double twoTheta = 2 * theta; [EOL]     final double fourTheta2 = twoTheta * twoTheta; [EOL]     final double coeffDot1 = theta * (twoTheta - 3) + 1; [EOL]     final double cDot23 = twoTheta * (1 - theta); [EOL]     final double coeffDot2 = cDot23 * ONE_MINUS_INV_SQRT_2; [EOL]     final double coeffDot3 = cDot23 * ONE_PLUS_INV_SQRT_2; [EOL]     final double coeffDot4 = theta * (twoTheta - 1); [EOL]     if ((previousState != null) && (theta <= 0.5)) { [EOL]         final double s = theta * h / 6.0; [EOL]         final double c23 = s * (6 * theta - fourTheta2); [EOL]         final double coeff1 = s * (6 - 9 * theta + fourTheta2); [EOL]         final double coeff2 = c23 * ONE_MINUS_INV_SQRT_2; [EOL]         final double coeff3 = c23 * ONE_PLUS_INV_SQRT_2; [EOL]         final double coeff4 = s * (-3 * theta + fourTheta2); [EOL]         for (int i = 0; i < interpolatedState.length; ++i) { [EOL]             final double yDot1 = yDotK[0][i]; [EOL]             final double yDot2 = yDotK[1][i]; [EOL]             final double yDot3 = yDotK[2][i]; [EOL]             final double yDot4 = yDotK[3][i]; [EOL]             interpolatedState[i] = previousState[i] + coeff1 * yDot1 + coeff2 * yDot2 + coeff3 * yDot3 + coeff4 * yDot4; [EOL]             interpolatedDerivatives[i] = coeffDot1 * yDot1 + coeffDot2 * yDot2 + coeffDot3 * yDot3 + coeffDot4 * yDot4; [EOL]         } [EOL]     } else { [EOL]         final double s = oneMinusThetaH / 6.0; [EOL]         final double c23 = s * (2 + twoTheta - fourTheta2); [EOL]         final double coeff1 = s * (1 - 5 * theta + fourTheta2); [EOL]         final double coeff2 = c23 * ONE_MINUS_INV_SQRT_2; [EOL]         final double coeff3 = c23 * ONE_PLUS_INV_SQRT_2; [EOL]         final double coeff4 = s * (1 + theta + fourTheta2); [EOL]         for (int i = 0; i < interpolatedState.length; ++i) { [EOL]             final double yDot1 = yDotK[0][i]; [EOL]             final double yDot2 = yDotK[1][i]; [EOL]             final double yDot3 = yDotK[2][i]; [EOL]             final double yDot4 = yDotK[3][i]; [EOL]             interpolatedState[i] = currentState[i] - coeff1 * yDot1 - coeff2 * yDot2 - coeff3 * yDot3 - coeff4 * yDot4; [EOL]             interpolatedDerivatives[i] = coeffDot1 * yDot1 + coeffDot2 * yDot2 + coeffDot3 * yDot3 + coeffDot4 * yDot4; [EOL]         } [EOL]     } [EOL] } <line_num>: 99,147
