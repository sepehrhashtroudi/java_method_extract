public DormandPrince853Integrator(final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { [EOL]     super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B, new DormandPrince853StepInterpolator(), minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); [EOL] } <line_num>: 217,223
public DormandPrince853Integrator(final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) { [EOL]     super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B, new DormandPrince853StepInterpolator(), minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance); [EOL] } <line_num>: 236,242
@Override [EOL] public int getOrder() { [EOL]     return 8; [EOL] } <line_num>: 245,248
@Override [EOL] protected double estimateError(final double[][] yDotK, final double[] y0, final double[] y1, final double h) { [EOL]     double error1 = 0; [EOL]     double error2 = 0; [EOL]     for (int j = 0; j < mainSetDimension; ++j) { [EOL]         final double errSum1 = E1_01 * yDotK[0][j] + E1_06 * yDotK[5][j] + E1_07 * yDotK[6][j] + E1_08 * yDotK[7][j] + E1_09 * yDotK[8][j] + E1_10 * yDotK[9][j] + E1_11 * yDotK[10][j] + E1_12 * yDotK[11][j]; [EOL]         final double errSum2 = E2_01 * yDotK[0][j] + E2_06 * yDotK[5][j] + E2_07 * yDotK[6][j] + E2_08 * yDotK[7][j] + E2_09 * yDotK[8][j] + E2_10 * yDotK[9][j] + E2_11 * yDotK[10][j] + E2_12 * yDotK[11][j]; [EOL]         final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j])); [EOL]         final double tol = (vecAbsoluteTolerance == null) ? (scalAbsoluteTolerance + scalRelativeTolerance * yScale) : (vecAbsoluteTolerance[j] + vecRelativeTolerance[j] * yScale); [EOL]         final double ratio1 = errSum1 / tol; [EOL]         error1 += ratio1 * ratio1; [EOL]         final double ratio2 = errSum2 / tol; [EOL]         error2 += ratio2 * ratio2; [EOL]     } [EOL]     double den = error1 + 0.01 * error2; [EOL]     if (den <= 0.0) { [EOL]         den = 1.0; [EOL]     } [EOL]     return FastMath.abs(h) * error1 / FastMath.sqrt(mainSetDimension * den); [EOL] } <line_num>: 251,285
