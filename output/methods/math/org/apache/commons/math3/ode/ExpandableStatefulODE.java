public ExpandableStatefulODE(final FirstOrderDifferentialEquations primary) { [EOL]     final int n = primary.getDimension(); [EOL]     this.primary = primary; [EOL]     this.primaryMapper = new EquationsMapper(0, n); [EOL]     this.time = Double.NaN; [EOL]     this.primaryState = new double[n]; [EOL]     this.primaryStateDot = new double[n]; [EOL]     this.components = new ArrayList<ExpandableStatefulODE.SecondaryComponent>(); [EOL] } <line_num>: 73,81
public SecondaryComponent(final SecondaryEquations equation, final int firstIndex) { [EOL]     final int n = equation.getDimension(); [EOL]     this.equation = equation; [EOL]     mapper = new EquationsMapper(firstIndex, n); [EOL]     state = new double[n]; [EOL]     stateDot = new double[n]; [EOL] } <line_num>: 321,327
public FirstOrderDifferentialEquations getPrimary() { [EOL]     return primary; [EOL] } <line_num>: 86,88
public int getTotalDimension() { [EOL]     if (components.isEmpty()) { [EOL]         return primaryMapper.getDimension(); [EOL]     } else { [EOL]         final EquationsMapper lastMapper = components.get(components.size() - 1).mapper; [EOL]         return lastMapper.getFirstIndex() + lastMapper.getDimension(); [EOL]     } [EOL] } <line_num>: 96,105
public void computeDerivatives(final double t, final double[] y, final double[] yDot) throws MaxCountExceededException, DimensionMismatchException { [EOL]     primaryMapper.extractEquationData(y, primaryState); [EOL]     primary.computeDerivatives(t, primaryState, primaryStateDot); [EOL]     for (final SecondaryComponent component : components) { [EOL]         component.mapper.extractEquationData(y, component.state); [EOL]         component.equation.computeDerivatives(t, primaryState, primaryStateDot, component.state, component.stateDot); [EOL]         component.mapper.insertEquationData(component.stateDot, yDot); [EOL]     } [EOL]     primaryMapper.insertEquationData(primaryStateDot, yDot); [EOL] } <line_num>: 114,131
public int addSecondaryEquations(final SecondaryEquations secondary) { [EOL]     final int firstIndex; [EOL]     if (components.isEmpty()) { [EOL]         components = new ArrayList<ExpandableStatefulODE.SecondaryComponent>(); [EOL]         firstIndex = primary.getDimension(); [EOL]     } else { [EOL]         final SecondaryComponent last = components.get(components.size() - 1); [EOL]         firstIndex = last.mapper.getFirstIndex() + last.mapper.getDimension(); [EOL]     } [EOL]     components.add(new SecondaryComponent(secondary, firstIndex)); [EOL]     return components.size() - 1; [EOL] } <line_num>: 137,153
public EquationsMapper getPrimaryMapper() { [EOL]     return primaryMapper; [EOL] } <line_num>: 159,161
public EquationsMapper[] getSecondaryMappers() { [EOL]     final EquationsMapper[] mappers = new EquationsMapper[components.size()]; [EOL]     for (int i = 0; i < mappers.length; ++i) { [EOL]         mappers[i] = components.get(i).mapper; [EOL]     } [EOL]     return mappers; [EOL] } <line_num>: 167,173
public void setTime(final double time) { [EOL]     this.time = time; [EOL] } <line_num>: 178,180
public double getTime() { [EOL]     return time; [EOL] } <line_num>: 185,187
public void setPrimaryState(final double[] primaryState) throws DimensionMismatchException { [EOL]     if (primaryState.length != this.primaryState.length) { [EOL]         throw new DimensionMismatchException(primaryState.length, this.primaryState.length); [EOL]     } [EOL]     System.arraycopy(primaryState, 0, this.primaryState, 0, primaryState.length); [EOL] } <line_num>: 194,204
public double[] getPrimaryState() { [EOL]     return primaryState.clone(); [EOL] } <line_num>: 209,211
public double[] getPrimaryStateDot() { [EOL]     return primaryStateDot.clone(); [EOL] } <line_num>: 216,218
public void setSecondaryState(final int index, final double[] secondaryState) throws DimensionMismatchException { [EOL]     double[] localArray = components.get(index).state; [EOL]     if (secondaryState.length != localArray.length) { [EOL]         throw new DimensionMismatchException(secondaryState.length, localArray.length); [EOL]     } [EOL]     System.arraycopy(secondaryState, 0, localArray, 0, secondaryState.length); [EOL] } <line_num>: 227,241
public double[] getSecondaryState(final int index) { [EOL]     return components.get(index).state.clone(); [EOL] } <line_num>: 248,250
public double[] getSecondaryStateDot(final int index) { [EOL]     return components.get(index).stateDot.clone(); [EOL] } <line_num>: 257,259
public void setCompleteState(final double[] completeState) throws DimensionMismatchException { [EOL]     if (completeState.length != getTotalDimension()) { [EOL]         throw new DimensionMismatchException(completeState.length, getTotalDimension()); [EOL]     } [EOL]     primaryMapper.extractEquationData(completeState, primaryState); [EOL]     for (final SecondaryComponent component : components) { [EOL]         component.mapper.extractEquationData(completeState, component.state); [EOL]     } [EOL] } <line_num>: 266,280
public double[] getCompleteState() throws DimensionMismatchException { [EOL]     double[] completeState = new double[getTotalDimension()]; [EOL]     primaryMapper.insertEquationData(primaryState, completeState); [EOL]     for (final SecondaryComponent component : components) { [EOL]         component.mapper.insertEquationData(component.state, completeState); [EOL]     } [EOL]     return completeState; [EOL] } <line_num>: 287,300
