public ClassicalRungeKuttaStepInterpolator() { [EOL] } <line_num>: 72,73
public ClassicalRungeKuttaStepInterpolator(final ClassicalRungeKuttaStepInterpolator interpolator) { [EOL]     super(interpolator); [EOL] } <line_num>: 80,82
@Override [EOL] protected StepInterpolator doCopy() { [EOL]     return new ClassicalRungeKuttaStepInterpolator(this); [EOL] } <line_num>: 85,88
@Override [EOL] protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH) { [EOL]     final double oneMinusTheta = 1 - theta; [EOL]     final double oneMinus2Theta = 1 - 2 * theta; [EOL]     final double coeffDot1 = oneMinusTheta * oneMinus2Theta; [EOL]     final double coeffDot23 = 2 * theta * oneMinusTheta; [EOL]     final double coeffDot4 = -theta * oneMinus2Theta; [EOL]     if ((previousState != null) && (theta <= 0.5)) { [EOL]         final double fourTheta2 = 4 * theta * theta; [EOL]         final double s = theta * h / 6.0; [EOL]         final double coeff1 = s * (6 - 9 * theta + fourTheta2); [EOL]         final double coeff23 = s * (6 * theta - fourTheta2); [EOL]         final double coeff4 = s * (-3 * theta + fourTheta2); [EOL]         for (int i = 0; i < interpolatedState.length; ++i) { [EOL]             final double yDot1 = yDotK[0][i]; [EOL]             final double yDot23 = yDotK[1][i] + yDotK[2][i]; [EOL]             final double yDot4 = yDotK[3][i]; [EOL]             interpolatedState[i] = previousState[i] + coeff1 * yDot1 + coeff23 * yDot23 + coeff4 * yDot4; [EOL]             interpolatedDerivatives[i] = coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4; [EOL]         } [EOL]     } else { [EOL]         final double fourTheta = 4 * theta; [EOL]         final double s = oneMinusThetaH / 6.0; [EOL]         final double coeff1 = s * ((-fourTheta + 5) * theta - 1); [EOL]         final double coeff23 = s * ((fourTheta - 2) * theta - 2); [EOL]         final double coeff4 = s * ((-fourTheta - 1) * theta - 1); [EOL]         for (int i = 0; i < interpolatedState.length; ++i) { [EOL]             final double yDot1 = yDotK[0][i]; [EOL]             final double yDot23 = yDotK[1][i] + yDotK[2][i]; [EOL]             final double yDot4 = yDotK[3][i]; [EOL]             interpolatedState[i] = currentState[i] + coeff1 * yDot1 + coeff23 * yDot23 + coeff4 * yDot4; [EOL]             interpolatedDerivatives[i] = coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4; [EOL]         } [EOL]     } [EOL] } <line_num>: 91,132
