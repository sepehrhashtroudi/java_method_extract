public DormandPrince54Integrator(final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { [EOL]     super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B, new DormandPrince54StepInterpolator(), minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); [EOL] } <line_num>: 105,110
public DormandPrince54Integrator(final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) { [EOL]     super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B, new DormandPrince54StepInterpolator(), minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance); [EOL] } <line_num>: 123,128
@Override [EOL] public int getOrder() { [EOL]     return 5; [EOL] } <line_num>: 131,134
@Override [EOL] protected double estimateError(final double[][] yDotK, final double[] y0, final double[] y1, final double h) { [EOL]     double error = 0; [EOL]     for (int j = 0; j < mainSetDimension; ++j) { [EOL]         final double errSum = E1 * yDotK[0][j] + E3 * yDotK[2][j] + E4 * yDotK[3][j] + E5 * yDotK[4][j] + E6 * yDotK[5][j] + E7 * yDotK[6][j]; [EOL]         final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j])); [EOL]         final double tol = (vecAbsoluteTolerance == null) ? (scalAbsoluteTolerance + scalRelativeTolerance * yScale) : (vecAbsoluteTolerance[j] + vecRelativeTolerance[j] * yScale); [EOL]         final double ratio = h * errSum / tol; [EOL]         error += ratio * ratio; [EOL]     } [EOL]     return FastMath.sqrt(error / mainSetDimension); [EOL] } <line_num>: 137,160
