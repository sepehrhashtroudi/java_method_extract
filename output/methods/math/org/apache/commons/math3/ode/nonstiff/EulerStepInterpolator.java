public EulerStepInterpolator() { [EOL] } <line_num>: 63,64
public EulerStepInterpolator(final EulerStepInterpolator interpolator) { [EOL]     super(interpolator); [EOL] } <line_num>: 71,73
@Override [EOL] protected StepInterpolator doCopy() { [EOL]     return new EulerStepInterpolator(this); [EOL] } <line_num>: 76,79
@Override [EOL] protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH) { [EOL]     if ((previousState != null) && (theta <= 0.5)) { [EOL]         for (int i = 0; i < interpolatedState.length; ++i) { [EOL]             interpolatedState[i] = previousState[i] + theta * h * yDotK[0][i]; [EOL]         } [EOL]         System.arraycopy(yDotK[0], 0, interpolatedDerivatives, 0, interpolatedDerivatives.length); [EOL]     } else { [EOL]         for (int i = 0; i < interpolatedState.length; ++i) { [EOL]             interpolatedState[i] = currentState[i] - oneMinusThetaH * yDotK[0][i]; [EOL]         } [EOL]         System.arraycopy(yDotK[0], 0, interpolatedDerivatives, 0, interpolatedDerivatives.length); [EOL]     } [EOL] } <line_num>: 83,98
