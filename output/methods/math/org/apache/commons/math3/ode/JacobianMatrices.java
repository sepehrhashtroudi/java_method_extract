public JacobianMatrices(final FirstOrderDifferentialEquations fode, final double[] hY, final String... parameters) throws DimensionMismatchException { [EOL]     this(new MainStateJacobianWrapper(fode, hY), parameters); [EOL] } <line_num>: 104,108
public JacobianMatrices(final MainStateJacobianProvider jode, final String... parameters) { [EOL]     this.efode = null; [EOL]     this.index = -1; [EOL]     this.jode = jode; [EOL]     this.pode = null; [EOL]     this.stateDim = jode.getDimension(); [EOL]     if (parameters == null) { [EOL]         selectedParameters = null; [EOL]         paramDim = 0; [EOL]     } else { [EOL]         this.selectedParameters = new ParameterConfiguration[parameters.length]; [EOL]         for (int i = 0; i < parameters.length; ++i) { [EOL]             selectedParameters[i] = new ParameterConfiguration(parameters[i], Double.NaN); [EOL]         } [EOL]         paramDim = parameters.length; [EOL]     } [EOL]     this.dirtyParameter = false; [EOL]     this.jacobianProviders = new ArrayList<ParameterJacobianProvider>(); [EOL]     matricesData = new double[(stateDim + paramDim) * stateDim]; [EOL]     for (int i = 0; i < stateDim; ++i) { [EOL]         matricesData[i * (stateDim + 1)] = 1.0; [EOL]     } [EOL] } <line_num>: 122,154
public MainStateJacobianWrapper(final FirstOrderDifferentialEquations ode, final double[] hY) throws DimensionMismatchException { [EOL]     this.ode = ode; [EOL]     this.hY = hY.clone(); [EOL]     if (hY.length != ode.getDimension()) { [EOL]         throw new DimensionMismatchException(ode.getDimension(), hY.length); [EOL]     } [EOL] } <line_num>: 436,444
public MismatchedEquations() { [EOL]     super(LocalizedFormats.UNMATCHED_ODE_IN_EXPANDED_SET); [EOL] } <line_num>: 487,489
public void registerVariationalEquations(final ExpandableStatefulODE expandable) throws DimensionMismatchException, MismatchedEquations { [EOL]     final FirstOrderDifferentialEquations ode = (jode instanceof MainStateJacobianWrapper) ? ((MainStateJacobianWrapper) jode).ode : jode; [EOL]     if (expandable.getPrimary() != ode) { [EOL]         throw new MismatchedEquations(); [EOL]     } [EOL]     efode = expandable; [EOL]     index = efode.addSecondaryEquations(new JacobiansSecondaryEquations()); [EOL]     efode.setSecondaryState(index, matricesData); [EOL] } <line_num>: 164,179
public void addParameterJacobianProvider(final ParameterJacobianProvider provider) { [EOL]     jacobianProviders.add(provider); [EOL] } <line_num>: 184,186
public void setParameterizedODE(final ParameterizedODE parameterizedOde) { [EOL]     this.pode = parameterizedOde; [EOL]     dirtyParameter = true; [EOL] } <line_num>: 191,194
public void setParameterStep(final String parameter, final double hP) throws UnknownParameterException { [EOL]     for (ParameterConfiguration param : selectedParameters) { [EOL]         if (parameter.equals(param.getParameterName())) { [EOL]             param.setHP(hP); [EOL]             dirtyParameter = true; [EOL]             return; [EOL]         } [EOL]     } [EOL]     throw new UnknownParameterException(parameter); [EOL] } <line_num>: 213,226
public void setInitialMainStateJacobian(final double[][] dYdY0) throws DimensionMismatchException { [EOL]     checkDimension(stateDim, dYdY0); [EOL]     checkDimension(stateDim, dYdY0[0]); [EOL]     int i = 0; [EOL]     for (final double[] row : dYdY0) { [EOL]         System.arraycopy(row, 0, matricesData, i, stateDim); [EOL]         i += stateDim; [EOL]     } [EOL]     if (efode != null) { [EOL]         efode.setSecondaryState(index, matricesData); [EOL]     } [EOL] } <line_num>: 236,254
public void setInitialParameterJacobian(final String pName, final double[] dYdP) throws UnknownParameterException, DimensionMismatchException { [EOL]     checkDimension(stateDim, dYdP); [EOL]     int i = stateDim * stateDim; [EOL]     for (ParameterConfiguration param : selectedParameters) { [EOL]         if (pName.equals(param.getParameterName())) { [EOL]             System.arraycopy(dYdP, 0, matricesData, i, stateDim); [EOL]             if (efode != null) { [EOL]                 efode.setSecondaryState(index, matricesData); [EOL]             } [EOL]             return; [EOL]         } [EOL]         i += stateDim; [EOL]     } [EOL]     throw new UnknownParameterException(pName); [EOL] } <line_num>: 266,287
public void getCurrentMainSetJacobian(final double[][] dYdY0) { [EOL]     double[] p = efode.getSecondaryState(index); [EOL]     int j = 0; [EOL]     for (int i = 0; i < stateDim; i++) { [EOL]         System.arraycopy(p, j, dYdY0[i], 0, stateDim); [EOL]         j += stateDim; [EOL]     } [EOL] } <line_num>: 292,303
public void getCurrentParameterJacobian(String pName, final double[] dYdP) { [EOL]     double[] p = efode.getSecondaryState(index); [EOL]     int i = stateDim * stateDim; [EOL]     for (ParameterConfiguration param : selectedParameters) { [EOL]         if (param.getParameterName().equals(pName)) { [EOL]             System.arraycopy(p, i, dYdP, 0, stateDim); [EOL]             return; [EOL]         } [EOL]         i += stateDim; [EOL]     } [EOL] } <line_num>: 309,323
private void checkDimension(final int expected, final Object array) throws DimensionMismatchException { [EOL]     int arrayDimension = (array == null) ? 0 : Array.getLength(array); [EOL]     if (arrayDimension != expected) { [EOL]         throw new DimensionMismatchException(arrayDimension, expected); [EOL]     } [EOL] } <line_num>: 330,336
public int getDimension() { [EOL]     return stateDim * (stateDim + paramDim); [EOL] } <line_num>: 347,349
public void computeDerivatives(final double t, final double[] y, final double[] yDot, final double[] z, final double[] zDot) throws MaxCountExceededException, DimensionMismatchException { [EOL]     if (dirtyParameter && (paramDim != 0)) { [EOL]         jacobianProviders.add(new ParameterJacobianWrapper(jode, pode, selectedParameters)); [EOL]         dirtyParameter = false; [EOL]     } [EOL]     double[][] dFdY = new double[stateDim][stateDim]; [EOL]     jode.computeMainStateJacobian(t, y, yDot, dFdY); [EOL]     for (int i = 0; i < stateDim; ++i) { [EOL]         final double[] dFdYi = dFdY[i]; [EOL]         for (int j = 0; j < stateDim; ++j) { [EOL]             double s = 0; [EOL]             final int startIndex = j; [EOL]             int zIndex = startIndex; [EOL]             for (int l = 0; l < stateDim; ++l) { [EOL]                 s += dFdYi[l] * z[zIndex]; [EOL]                 zIndex += stateDim; [EOL]             } [EOL]             zDot[startIndex + i * stateDim] = s; [EOL]         } [EOL]     } [EOL]     if (paramDim != 0) { [EOL]         double[] dFdP = new double[stateDim]; [EOL]         int startIndex = stateDim * stateDim; [EOL]         for (ParameterConfiguration param : selectedParameters) { [EOL]             boolean found = false; [EOL]             for (int k = 0; (!found) && (k < jacobianProviders.size()); ++k) { [EOL]                 final ParameterJacobianProvider provider = jacobianProviders.get(k); [EOL]                 if (provider.isSupported(param.getParameterName())) { [EOL]                     provider.computeParameterJacobian(t, y, yDot, param.getParameterName(), dFdP); [EOL]                     for (int i = 0; i < stateDim; ++i) { [EOL]                         final double[] dFdYi = dFdY[i]; [EOL]                         int zIndex = startIndex; [EOL]                         double s = dFdP[i]; [EOL]                         for (int l = 0; l < stateDim; ++l) { [EOL]                             s += dFdYi[l] * z[zIndex]; [EOL]                             zIndex++; [EOL]                         } [EOL]                         zDot[startIndex + i] = s; [EOL]                     } [EOL]                     found = true; [EOL]                 } [EOL]             } [EOL]             if (!found) { [EOL]                 Arrays.fill(zDot, startIndex, startIndex + stateDim, 0.0); [EOL]             } [EOL]             startIndex += stateDim; [EOL]         } [EOL]     } [EOL] } <line_num>: 352,415
public int getDimension() { [EOL]     return ode.getDimension(); [EOL] } <line_num>: 447,449
public void computeDerivatives(double t, double[] y, double[] yDot) throws MaxCountExceededException, DimensionMismatchException { [EOL]     ode.computeDerivatives(t, y, yDot); [EOL] } <line_num>: 452,455
public void computeMainStateJacobian(double t, double[] y, double[] yDot, double[][] dFdY) throws MaxCountExceededException, DimensionMismatchException { [EOL]     final int n = ode.getDimension(); [EOL]     final double[] tmpDot = new double[n]; [EOL]     for (int j = 0; j < n; ++j) { [EOL]         final double savedYj = y[j]; [EOL]         y[j] += hY[j]; [EOL]         ode.computeDerivatives(t, y, tmpDot); [EOL]         for (int i = 0; i < n; ++i) { [EOL]             dFdY[i][j] = (tmpDot[i] - yDot[i]) / hY[j]; [EOL]         } [EOL]         y[j] = savedYj; [EOL]     } [EOL] } <line_num>: 458,473
