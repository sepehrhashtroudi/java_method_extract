public DormandPrince54StepInterpolator() { [EOL]     super(); [EOL]     v1 = null; [EOL]     v2 = null; [EOL]     v3 = null; [EOL]     v4 = null; [EOL]     vectorsInitialized = false; [EOL] } <line_num>: 101,108
public DormandPrince54StepInterpolator(final DormandPrince54StepInterpolator interpolator) { [EOL]     super(interpolator); [EOL]     if (interpolator.v1 == null) { [EOL]         v1 = null; [EOL]         v2 = null; [EOL]         v3 = null; [EOL]         v4 = null; [EOL]         vectorsInitialized = false; [EOL]     } else { [EOL]         v1 = interpolator.v1.clone(); [EOL]         v2 = interpolator.v2.clone(); [EOL]         v3 = interpolator.v3.clone(); [EOL]         v4 = interpolator.v4.clone(); [EOL]         vectorsInitialized = interpolator.vectorsInitialized; [EOL]     } [EOL] } <line_num>: 115,137
@Override [EOL] protected StepInterpolator doCopy() { [EOL]     return new DormandPrince54StepInterpolator(this); [EOL] } <line_num>: 140,143
@Override [EOL] public void reinitialize(final AbstractIntegrator integrator, final double[] y, final double[][] yDotK, final boolean forward, final EquationsMapper primaryMapper, final EquationsMapper[] secondaryMappers) { [EOL]     super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers); [EOL]     v1 = null; [EOL]     v2 = null; [EOL]     v3 = null; [EOL]     v4 = null; [EOL]     vectorsInitialized = false; [EOL] } <line_num>: 147,158
@Override [EOL] public void storeTime(final double t) { [EOL]     super.storeTime(t); [EOL]     vectorsInitialized = false; [EOL] } <line_num>: 161,165
@Override [EOL] protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH) { [EOL]     if (!vectorsInitialized) { [EOL]         if (v1 == null) { [EOL]             v1 = new double[interpolatedState.length]; [EOL]             v2 = new double[interpolatedState.length]; [EOL]             v3 = new double[interpolatedState.length]; [EOL]             v4 = new double[interpolatedState.length]; [EOL]         } [EOL]         for (int i = 0; i < interpolatedState.length; ++i) { [EOL]             final double yDot0 = yDotK[0][i]; [EOL]             final double yDot2 = yDotK[2][i]; [EOL]             final double yDot3 = yDotK[3][i]; [EOL]             final double yDot4 = yDotK[4][i]; [EOL]             final double yDot5 = yDotK[5][i]; [EOL]             final double yDot6 = yDotK[6][i]; [EOL]             v1[i] = A70 * yDot0 + A72 * yDot2 + A73 * yDot3 + A74 * yDot4 + A75 * yDot5; [EOL]             v2[i] = yDot0 - v1[i]; [EOL]             v3[i] = v1[i] - v2[i] - yDot6; [EOL]             v4[i] = D0 * yDot0 + D2 * yDot2 + D3 * yDot3 + D4 * yDot4 + D5 * yDot5 + D6 * yDot6; [EOL]         } [EOL]         vectorsInitialized = true; [EOL]     } [EOL]     final double eta = 1 - theta; [EOL]     final double twoTheta = 2 * theta; [EOL]     final double dot2 = 1 - twoTheta; [EOL]     final double dot3 = theta * (2 - 3 * theta); [EOL]     final double dot4 = twoTheta * (1 + theta * (twoTheta - 3)); [EOL]     if ((previousState != null) && (theta <= 0.5)) { [EOL]         for (int i = 0; i < interpolatedState.length; ++i) { [EOL]             interpolatedState[i] = previousState[i] + theta * h * (v1[i] + eta * (v2[i] + theta * (v3[i] + eta * v4[i]))); [EOL]             interpolatedDerivatives[i] = v1[i] + dot2 * v2[i] + dot3 * v3[i] + dot4 * v4[i]; [EOL]         } [EOL]     } else { [EOL]         for (int i = 0; i < interpolatedState.length; ++i) { [EOL]             interpolatedState[i] = currentState[i] - oneMinusThetaH * (v1[i] - theta * (v2[i] + theta * (v3[i] + eta * v4[i]))); [EOL]             interpolatedDerivatives[i] = v1[i] + dot2 * v2[i] + dot3 * v3[i] + dot4 * v4[i]; [EOL]         } [EOL]     } [EOL] } <line_num>: 168,221
