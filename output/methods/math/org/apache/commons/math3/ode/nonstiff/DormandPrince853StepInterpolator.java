public DormandPrince853StepInterpolator() { [EOL]     super(); [EOL]     yDotKLast = null; [EOL]     v = null; [EOL]     vectorsInitialized = false; [EOL] } <line_num>: 231,236
public DormandPrince853StepInterpolator(final DormandPrince853StepInterpolator interpolator) { [EOL]     super(interpolator); [EOL]     if (interpolator.currentState == null) { [EOL]         yDotKLast = null; [EOL]         v = null; [EOL]         vectorsInitialized = false; [EOL]     } else { [EOL]         final int dimension = interpolator.currentState.length; [EOL]         yDotKLast = new double[3][]; [EOL]         for (int k = 0; k < yDotKLast.length; ++k) { [EOL]             yDotKLast[k] = new double[dimension]; [EOL]             System.arraycopy(interpolator.yDotKLast[k], 0, yDotKLast[k], 0, dimension); [EOL]         } [EOL]         v = new double[7][]; [EOL]         for (int k = 0; k < v.length; ++k) { [EOL]             v[k] = new double[dimension]; [EOL]             System.arraycopy(interpolator.v[k], 0, v[k], 0, dimension); [EOL]         } [EOL]         vectorsInitialized = interpolator.vectorsInitialized; [EOL]     } [EOL] } <line_num>: 243,274
@Override [EOL] protected StepInterpolator doCopy() { [EOL]     return new DormandPrince853StepInterpolator(this); [EOL] } <line_num>: 277,280
@Override [EOL] public void reinitialize(final AbstractIntegrator integrator, final double[] y, final double[][] yDotK, final boolean forward, final EquationsMapper primaryMapper, final EquationsMapper[] secondaryMappers) { [EOL]     super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers); [EOL]     final int dimension = currentState.length; [EOL]     yDotKLast = new double[3][]; [EOL]     for (int k = 0; k < yDotKLast.length; ++k) { [EOL]         yDotKLast[k] = new double[dimension]; [EOL]     } [EOL]     v = new double[7][]; [EOL]     for (int k = 0; k < v.length; ++k) { [EOL]         v[k] = new double[dimension]; [EOL]     } [EOL]     vectorsInitialized = false; [EOL] } <line_num>: 283,305
@Override [EOL] public void storeTime(final double t) { [EOL]     super.storeTime(t); [EOL]     vectorsInitialized = false; [EOL] } <line_num>: 308,312
@Override [EOL] protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH) throws MaxCountExceededException { [EOL]     if (!vectorsInitialized) { [EOL]         if (v == null) { [EOL]             v = new double[7][]; [EOL]             for (int k = 0; k < 7; ++k) { [EOL]                 v[k] = new double[interpolatedState.length]; [EOL]             } [EOL]         } [EOL]         finalizeStep(); [EOL]         for (int i = 0; i < interpolatedState.length; ++i) { [EOL]             final double yDot1 = yDotK[0][i]; [EOL]             final double yDot6 = yDotK[5][i]; [EOL]             final double yDot7 = yDotK[6][i]; [EOL]             final double yDot8 = yDotK[7][i]; [EOL]             final double yDot9 = yDotK[8][i]; [EOL]             final double yDot10 = yDotK[9][i]; [EOL]             final double yDot11 = yDotK[10][i]; [EOL]             final double yDot12 = yDotK[11][i]; [EOL]             final double yDot13 = yDotK[12][i]; [EOL]             final double yDot14 = yDotKLast[0][i]; [EOL]             final double yDot15 = yDotKLast[1][i]; [EOL]             final double yDot16 = yDotKLast[2][i]; [EOL]             v[0][i] = B_01 * yDot1 + B_06 * yDot6 + B_07 * yDot7 + B_08 * yDot8 + B_09 * yDot9 + B_10 * yDot10 + B_11 * yDot11 + B_12 * yDot12; [EOL]             v[1][i] = yDot1 - v[0][i]; [EOL]             v[2][i] = v[0][i] - v[1][i] - yDotK[12][i]; [EOL]             for (int k = 0; k < D.length; ++k) { [EOL]                 v[k + 3][i] = D[k][0] * yDot1 + D[k][1] * yDot6 + D[k][2] * yDot7 + D[k][3] * yDot8 + D[k][4] * yDot9 + D[k][5] * yDot10 + D[k][6] * yDot11 + D[k][7] * yDot12 + D[k][8] * yDot13 + D[k][9] * yDot14 + D[k][10] * yDot15 + D[k][11] * yDot16; [EOL]             } [EOL]         } [EOL]         vectorsInitialized = true; [EOL]     } [EOL]     final double eta = 1 - theta; [EOL]     final double twoTheta = 2 * theta; [EOL]     final double theta2 = theta * theta; [EOL]     final double dot1 = 1 - twoTheta; [EOL]     final double dot2 = theta * (2 - 3 * theta); [EOL]     final double dot3 = twoTheta * (1 + theta * (twoTheta - 3)); [EOL]     final double dot4 = theta2 * (3 + theta * (5 * theta - 8)); [EOL]     final double dot5 = theta2 * (3 + theta * (-12 + theta * (15 - 6 * theta))); [EOL]     final double dot6 = theta2 * theta * (4 + theta * (-15 + theta * (18 - 7 * theta))); [EOL]     if ((previousState != null) && (theta <= 0.5)) { [EOL]         for (int i = 0; i < interpolatedState.length; ++i) { [EOL]             interpolatedState[i] = previousState[i] + theta * h * (v[0][i] + eta * (v[1][i] + theta * (v[2][i] + eta * (v[3][i] + theta * (v[4][i] + eta * (v[5][i] + theta * (v[6][i]))))))); [EOL]             interpolatedDerivatives[i] = v[0][i] + dot1 * v[1][i] + dot2 * v[2][i] + dot3 * v[3][i] + dot4 * v[4][i] + dot5 * v[5][i] + dot6 * v[6][i]; [EOL]         } [EOL]     } else { [EOL]         for (int i = 0; i < interpolatedState.length; ++i) { [EOL]             interpolatedState[i] = currentState[i] - oneMinusThetaH * (v[0][i] - theta * (v[1][i] + theta * (v[2][i] + eta * (v[3][i] + theta * (v[4][i] + eta * (v[5][i] + theta * (v[6][i]))))))); [EOL]             interpolatedDerivatives[i] = v[0][i] + dot1 * v[1][i] + dot2 * v[2][i] + dot3 * v[3][i] + dot4 * v[4][i] + dot5 * v[5][i] + dot6 * v[6][i]; [EOL]         } [EOL]     } [EOL] } <line_num>: 315,403
@Override [EOL] protected void doFinalize() throws MaxCountExceededException { [EOL]     if (currentState == null) { [EOL]         return; [EOL]     } [EOL]     double s; [EOL]     final double[] yTmp = new double[currentState.length]; [EOL]     final double pT = getGlobalPreviousTime(); [EOL]     for (int j = 0; j < currentState.length; ++j) { [EOL]         s = K14_01 * yDotK[0][j] + K14_06 * yDotK[5][j] + K14_07 * yDotK[6][j] + K14_08 * yDotK[7][j] + K14_09 * yDotK[8][j] + K14_10 * yDotK[9][j] + K14_11 * yDotK[10][j] + K14_12 * yDotK[11][j] + K14_13 * yDotK[12][j]; [EOL]         yTmp[j] = currentState[j] + h * s; [EOL]     } [EOL]     integrator.computeDerivatives(pT + C14 * h, yTmp, yDotKLast[0]); [EOL]     for (int j = 0; j < currentState.length; ++j) { [EOL]         s = K15_01 * yDotK[0][j] + K15_06 * yDotK[5][j] + K15_07 * yDotK[6][j] + K15_08 * yDotK[7][j] + K15_09 * yDotK[8][j] + K15_10 * yDotK[9][j] + K15_11 * yDotK[10][j] + K15_12 * yDotK[11][j] + K15_13 * yDotK[12][j] + K15_14 * yDotKLast[0][j]; [EOL]         yTmp[j] = currentState[j] + h * s; [EOL]     } [EOL]     integrator.computeDerivatives(pT + C15 * h, yTmp, yDotKLast[1]); [EOL]     for (int j = 0; j < currentState.length; ++j) { [EOL]         s = K16_01 * yDotK[0][j] + K16_06 * yDotK[5][j] + K16_07 * yDotK[6][j] + K16_08 * yDotK[7][j] + K16_09 * yDotK[8][j] + K16_10 * yDotK[9][j] + K16_11 * yDotK[10][j] + K16_12 * yDotK[11][j] + K16_13 * yDotK[12][j] + K16_14 * yDotKLast[0][j] + K16_15 * yDotKLast[1][j]; [EOL]         yTmp[j] = currentState[j] + h * s; [EOL]     } [EOL]     integrator.computeDerivatives(pT + C16 * h, yTmp, yDotKLast[2]); [EOL] } <line_num>: 406,447
@Override [EOL] public void writeExternal(final ObjectOutput out) throws IOException { [EOL]     try { [EOL]         finalizeStep(); [EOL]     } catch (MaxCountExceededException mcee) { [EOL]         final IOException ioe = new IOException(mcee.getLocalizedMessage()); [EOL]         ioe.initCause(mcee); [EOL]         throw ioe; [EOL]     } [EOL]     final int dimension = (currentState == null) ? -1 : currentState.length; [EOL]     out.writeInt(dimension); [EOL]     for (int i = 0; i < dimension; ++i) { [EOL]         out.writeDouble(yDotKLast[0][i]); [EOL]         out.writeDouble(yDotKLast[1][i]); [EOL]         out.writeDouble(yDotKLast[2][i]); [EOL]     } [EOL]     super.writeExternal(out); [EOL] } <line_num>: 450,474
@Override [EOL] public void readExternal(final ObjectInput in) throws IOException, ClassNotFoundException { [EOL]     yDotKLast = new double[3][]; [EOL]     final int dimension = in.readInt(); [EOL]     yDotKLast[0] = (dimension < 0) ? null : new double[dimension]; [EOL]     yDotKLast[1] = (dimension < 0) ? null : new double[dimension]; [EOL]     yDotKLast[2] = (dimension < 0) ? null : new double[dimension]; [EOL]     for (int i = 0; i < dimension; ++i) { [EOL]         yDotKLast[0][i] = in.readDouble(); [EOL]         yDotKLast[1][i] = in.readDouble(); [EOL]         yDotKLast[2][i] = in.readDouble(); [EOL]     } [EOL]     super.readExternal(in); [EOL] } <line_num>: 477,497
