public EventFilter(final EventHandler rawHandler, final FilterType filter) { [EOL]     this.rawHandler = rawHandler; [EOL]     this.filter = filter; [EOL]     this.transformers = new Transformer[HISTORY_SIZE]; [EOL]     this.updates = new double[HISTORY_SIZE]; [EOL] } <line_num>: 83,88
public void init(double t0, double[] y0, double t) { [EOL]     rawHandler.init(t0, y0, t); [EOL]     forward = t >= t0; [EOL]     extremeT = forward ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY; [EOL]     Arrays.fill(transformers, Transformer.UNINITIALIZED); [EOL]     Arrays.fill(updates, extremeT); [EOL] } <line_num>: 91,102
public double g(double t, double[] y) { [EOL]     final double rawG = rawHandler.g(t, y); [EOL]     if (forward) { [EOL]         final int last = transformers.length - 1; [EOL]         if (extremeT < t) { [EOL]             final Transformer previous = transformers[last]; [EOL]             final Transformer next = filter.selectTransformer(previous, rawG, forward); [EOL]             if (next != previous) { [EOL]                 System.arraycopy(updates, 1, updates, 0, last); [EOL]                 System.arraycopy(transformers, 1, transformers, 0, last); [EOL]                 updates[last] = extremeT; [EOL]                 transformers[last] = next; [EOL]             } [EOL]             extremeT = t; [EOL]             return next.transformed(rawG); [EOL]         } else { [EOL]             for (int i = last; i > 0; --i) { [EOL]                 if (updates[i] <= t) { [EOL]                     return transformers[i].transformed(rawG); [EOL]                 } [EOL]             } [EOL]             return transformers[0].transformed(rawG); [EOL]         } [EOL]     } else { [EOL]         if (t < extremeT) { [EOL]             final Transformer previous = transformers[0]; [EOL]             final Transformer next = filter.selectTransformer(previous, rawG, forward); [EOL]             if (next != previous) { [EOL]                 System.arraycopy(updates, 0, updates, 1, updates.length - 1); [EOL]                 System.arraycopy(transformers, 0, transformers, 1, transformers.length - 1); [EOL]                 updates[0] = extremeT; [EOL]                 transformers[0] = next; [EOL]             } [EOL]             extremeT = t; [EOL]             return next.transformed(rawG); [EOL]         } else { [EOL]             for (int i = 0; i < updates.length - 1; ++i) { [EOL]                 if (t <= updates[i]) { [EOL]                     return transformers[i].transformed(rawG); [EOL]                 } [EOL]             } [EOL]             return transformers[updates.length - 1].transformed(rawG); [EOL]         } [EOL]     } [EOL] } <line_num>: 105,191
public Action eventOccurred(double t, double[] y, boolean increasing) { [EOL]     return rawHandler.eventOccurred(t, y, filter.getTriggeredIncreasing()); [EOL] } <line_num>: 194,197
public void resetState(double t, double[] y) { [EOL]     rawHandler.resetState(t, y); [EOL] } <line_num>: 200,203
