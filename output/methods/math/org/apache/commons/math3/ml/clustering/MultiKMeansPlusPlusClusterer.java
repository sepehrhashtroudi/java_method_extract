public MultiKMeansPlusPlusClusterer(final KMeansPlusPlusClusterer<T> clusterer, final int numTrials) { [EOL]     super(clusterer.getDistanceMeasure()); [EOL]     this.clusterer = clusterer; [EOL]     this.numTrials = numTrials; [EOL] } <line_num>: 46,51
public KMeansPlusPlusClusterer<T> getClusterer() { [EOL]     return clusterer; [EOL] } <line_num>: 57,59
public int getNumTrials() { [EOL]     return numTrials; [EOL] } <line_num>: 65,67
@Override [EOL] public List<CentroidCluster<T>> cluster(final Collection<T> points) throws MathIllegalArgumentException, ConvergenceException { [EOL]     List<CentroidCluster<T>> best = null; [EOL]     double bestVarianceSum = Double.POSITIVE_INFINITY; [EOL]     for (int i = 0; i < numTrials; ++i) { [EOL]         List<CentroidCluster<T>> clusters = clusterer.cluster(points); [EOL]         double varianceSum = 0.0; [EOL]         for (final CentroidCluster<T> cluster : clusters) { [EOL]             if (!cluster.getPoints().isEmpty()) { [EOL]                 final Clusterable center = cluster.getCenter(); [EOL]                 final Variance stat = new Variance(); [EOL]                 for (final T point : cluster.getPoints()) { [EOL]                     stat.increment(distance(point, center)); [EOL]                 } [EOL]                 varianceSum += stat.getResult(); [EOL]             } [EOL]         } [EOL]         if (varianceSum <= bestVarianceSum) { [EOL]             best = clusters; [EOL]             bestVarianceSum = varianceSum; [EOL]         } [EOL]     } [EOL]     return best; [EOL] } <line_num>: 80,121
