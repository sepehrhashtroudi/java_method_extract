public SubOrientedPoint(final Hyperplane<Euclidean1D> hyperplane, final Region<Euclidean1D> remainingRegion) { [EOL]     super(hyperplane, remainingRegion); [EOL] } <line_num>: 37,40
@Override [EOL] public double getSize() { [EOL]     return 0; [EOL] } <line_num>: 43,46
@Override [EOL] protected AbstractSubHyperplane<Euclidean1D, Euclidean1D> buildNew(final Hyperplane<Euclidean1D> hyperplane, final Region<Euclidean1D> remainingRegion) { [EOL]     return new SubOrientedPoint(hyperplane, remainingRegion); [EOL] } <line_num>: 49,53
@Override [EOL] public Side side(final Hyperplane<Euclidean1D> hyperplane) { [EOL]     final double global = hyperplane.getOffset(((OrientedPoint) getHyperplane()).getLocation()); [EOL]     return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER); [EOL] } <line_num>: 56,60
@Override [EOL] public SplitSubHyperplane<Euclidean1D> split(final Hyperplane<Euclidean1D> hyperplane) { [EOL]     final double global = hyperplane.getOffset(((OrientedPoint) getHyperplane()).getLocation()); [EOL]     return (global < -1.0e-10) ? new SplitSubHyperplane<Euclidean1D>(null, this) : new SplitSubHyperplane<Euclidean1D>(this, null); [EOL] } <line_num>: 63,69
