public FieldRotation(final T q0, final T q1, final T q2, final T q3, final boolean needsNormalization) { [EOL]     if (needsNormalization) { [EOL]         final T inv = q0.multiply(q0).add(q1.multiply(q1)).add(q2.multiply(q2)).add(q3.multiply(q3)).sqrt().reciprocal(); [EOL]         this.q0 = inv.multiply(q0); [EOL]         this.q1 = inv.multiply(q1); [EOL]         this.q2 = inv.multiply(q2); [EOL]         this.q3 = inv.multiply(q3); [EOL]     } else { [EOL]         this.q0 = q0; [EOL]         this.q1 = q1; [EOL]         this.q2 = q2; [EOL]         this.q3 = q3; [EOL]     } [EOL] } <line_num>: 76,93
public FieldRotation(final FieldVector3D<T> axis, final T angle) throws MathIllegalArgumentException { [EOL]     final T norm = axis.getNorm(); [EOL]     if (norm.getReal() == 0) { [EOL]         throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_AXIS); [EOL]     } [EOL]     final T halfAngle = angle.multiply(-0.5); [EOL]     final T coeff = halfAngle.sin().divide(norm); [EOL]     q0 = halfAngle.cos(); [EOL]     q1 = coeff.multiply(axis.getX()); [EOL]     q2 = coeff.multiply(axis.getY()); [EOL]     q3 = coeff.multiply(axis.getZ()); [EOL] } <line_num>: 116,132
public FieldRotation(final T[][] m, final double threshold) throws NotARotationMatrixException { [EOL]     if ((m.length != 3) || (m[0].length != 3) || (m[1].length != 3) || (m[2].length != 3)) { [EOL]         throw new NotARotationMatrixException(LocalizedFormats.ROTATION_MATRIX_DIMENSIONS, m.length, m[0].length); [EOL]     } [EOL]     final T[][] ort = orthogonalizeMatrix(m, threshold); [EOL]     final T d0 = ort[1][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[1][2])); [EOL]     final T d1 = ort[0][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[0][2])); [EOL]     final T d2 = ort[0][1].multiply(ort[1][2]).subtract(ort[1][1].multiply(ort[0][2])); [EOL]     final T det = ort[0][0].multiply(d0).subtract(ort[1][0].multiply(d1)).add(ort[2][0].multiply(d2)); [EOL]     if (det.getReal() < 0.0) { [EOL]         throw new NotARotationMatrixException(LocalizedFormats.CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT, det); [EOL]     } [EOL]     final T[] quat = mat2quat(ort); [EOL]     q0 = quat[0]; [EOL]     q1 = quat[1]; [EOL]     q2 = quat[2]; [EOL]     q3 = quat[3]; [EOL] } <line_num>: 164,196
public FieldRotation(FieldVector3D<T> u1, FieldVector3D<T> u2, FieldVector3D<T> v1, FieldVector3D<T> v2) throws MathArithmeticException { [EOL]     final FieldVector3D<T> u3 = FieldVector3D.crossProduct(u1, u2).normalize(); [EOL]     u2 = FieldVector3D.crossProduct(u3, u1).normalize(); [EOL]     u1 = u1.normalize(); [EOL]     final FieldVector3D<T> v3 = FieldVector3D.crossProduct(v1, v2).normalize(); [EOL]     v2 = FieldVector3D.crossProduct(v3, v1).normalize(); [EOL]     v1 = v1.normalize(); [EOL]     final T[][] array = MathArrays.buildArray(u1.getX().getField(), 3, 3); [EOL]     array[0][0] = u1.getX().multiply(v1.getX()).add(u2.getX().multiply(v2.getX())).add(u3.getX().multiply(v3.getX())); [EOL]     array[0][1] = u1.getY().multiply(v1.getX()).add(u2.getY().multiply(v2.getX())).add(u3.getY().multiply(v3.getX())); [EOL]     array[0][2] = u1.getZ().multiply(v1.getX()).add(u2.getZ().multiply(v2.getX())).add(u3.getZ().multiply(v3.getX())); [EOL]     array[1][0] = u1.getX().multiply(v1.getY()).add(u2.getX().multiply(v2.getY())).add(u3.getX().multiply(v3.getY())); [EOL]     array[1][1] = u1.getY().multiply(v1.getY()).add(u2.getY().multiply(v2.getY())).add(u3.getY().multiply(v3.getY())); [EOL]     array[1][2] = u1.getZ().multiply(v1.getY()).add(u2.getZ().multiply(v2.getY())).add(u3.getZ().multiply(v3.getY())); [EOL]     array[2][0] = u1.getX().multiply(v1.getZ()).add(u2.getX().multiply(v2.getZ())).add(u3.getX().multiply(v3.getZ())); [EOL]     array[2][1] = u1.getY().multiply(v1.getZ()).add(u2.getY().multiply(v2.getZ())).add(u3.getY().multiply(v3.getZ())); [EOL]     array[2][2] = u1.getZ().multiply(v1.getZ()).add(u2.getZ().multiply(v2.getZ())).add(u3.getZ().multiply(v3.getZ())); [EOL]     T[] quat = mat2quat(array); [EOL]     q0 = quat[0]; [EOL]     q1 = quat[1]; [EOL]     q2 = quat[2]; [EOL]     q3 = quat[3]; [EOL] } <line_num>: 217,250
public FieldRotation(final FieldVector3D<T> u, final FieldVector3D<T> v) throws MathArithmeticException { [EOL]     final T normProduct = u.getNorm().multiply(v.getNorm()); [EOL]     if (normProduct.getReal() == 0) { [EOL]         throw new MathArithmeticException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR); [EOL]     } [EOL]     final T dot = FieldVector3D.dotProduct(u, v); [EOL]     if (dot.getReal() < ((2.0e-15 - 1.0) * normProduct.getReal())) { [EOL]         final FieldVector3D<T> w = u.orthogonal(); [EOL]         q0 = normProduct.getField().getZero(); [EOL]         q1 = w.getX().negate(); [EOL]         q2 = w.getY().negate(); [EOL]         q3 = w.getZ().negate(); [EOL]     } else { [EOL]         q0 = dot.divide(normProduct).add(1.0).multiply(0.5).sqrt(); [EOL]         final T coeff = q0.multiply(normProduct).multiply(2.0).reciprocal(); [EOL]         final FieldVector3D<T> q = FieldVector3D.crossProduct(v, u); [EOL]         q1 = coeff.multiply(q.getX()); [EOL]         q2 = coeff.multiply(q.getY()); [EOL]         q3 = coeff.multiply(q.getZ()); [EOL]     } [EOL] } <line_num>: 265,293
public FieldRotation(final RotationOrder order, final T alpha1, final T alpha2, final T alpha3) { [EOL]     final T one = alpha1.getField().getOne(); [EOL]     final FieldRotation<T> r1 = new FieldRotation<T>(new FieldVector3D<T>(one, order.getA1()), alpha1); [EOL]     final FieldRotation<T> r2 = new FieldRotation<T>(new FieldVector3D<T>(one, order.getA2()), alpha2); [EOL]     final FieldRotation<T> r3 = new FieldRotation<T>(new FieldVector3D<T>(one, order.getA3()), alpha3); [EOL]     final FieldRotation<T> composed = r1.applyTo(r2.applyTo(r3)); [EOL]     q0 = composed.q0; [EOL]     q1 = composed.q1; [EOL]     q2 = composed.q2; [EOL]     q3 = composed.q3; [EOL] } <line_num>: 314,324
private T[] mat2quat(final T[][] ort) { [EOL]     final T[] quat = MathArrays.buildArray(ort[0][0].getField(), 4); [EOL]     T s = ort[0][0].add(ort[1][1]).add(ort[2][2]); [EOL]     if (s.getReal() > -0.19) { [EOL]         quat[0] = s.add(1.0).sqrt().multiply(0.5); [EOL]         T inv = quat[0].reciprocal().multiply(0.25); [EOL]         quat[1] = inv.multiply(ort[1][2].subtract(ort[2][1])); [EOL]         quat[2] = inv.multiply(ort[2][0].subtract(ort[0][2])); [EOL]         quat[3] = inv.multiply(ort[0][1].subtract(ort[1][0])); [EOL]     } else { [EOL]         s = ort[0][0].subtract(ort[1][1]).subtract(ort[2][2]); [EOL]         if (s.getReal() > -0.19) { [EOL]             quat[1] = s.add(1.0).sqrt().multiply(0.5); [EOL]             T inv = quat[1].reciprocal().multiply(0.25); [EOL]             quat[0] = inv.multiply(ort[1][2].subtract(ort[2][1])); [EOL]             quat[2] = inv.multiply(ort[0][1].add(ort[1][0])); [EOL]             quat[3] = inv.multiply(ort[0][2].add(ort[2][0])); [EOL]         } else { [EOL]             s = ort[1][1].subtract(ort[0][0]).subtract(ort[2][2]); [EOL]             if (s.getReal() > -0.19) { [EOL]                 quat[2] = s.add(1.0).sqrt().multiply(0.5); [EOL]                 T inv = quat[2].reciprocal().multiply(0.25); [EOL]                 quat[0] = inv.multiply(ort[2][0].subtract(ort[0][2])); [EOL]                 quat[1] = inv.multiply(ort[0][1].add(ort[1][0])); [EOL]                 quat[3] = inv.multiply(ort[2][1].add(ort[1][2])); [EOL]             } else { [EOL]                 s = ort[2][2].subtract(ort[0][0]).subtract(ort[1][1]); [EOL]                 quat[3] = s.add(1.0).sqrt().multiply(0.5); [EOL]                 T inv = quat[3].reciprocal().multiply(0.25); [EOL]                 quat[0] = inv.multiply(ort[0][1].subtract(ort[1][0])); [EOL]                 quat[1] = inv.multiply(ort[0][2].add(ort[2][0])); [EOL]                 quat[2] = inv.multiply(ort[2][1].add(ort[1][2])); [EOL]             } [EOL]         } [EOL]     } [EOL]     return quat; [EOL] } <line_num>: 330,385
public FieldRotation<T> revert() { [EOL]     return new FieldRotation<T>(q0.negate(), q1, q2, q3, false); [EOL] } <line_num>: 394,396
public T getQ0() { [EOL]     return q0; [EOL] } <line_num>: 401,403
public T getQ1() { [EOL]     return q1; [EOL] } <line_num>: 408,410
public T getQ2() { [EOL]     return q2; [EOL] } <line_num>: 415,417
public T getQ3() { [EOL]     return q3; [EOL] } <line_num>: 422,424
public FieldVector3D<T> getAxis() { [EOL]     final T squaredSine = q1.multiply(q1).add(q2.multiply(q2)).add(q3.multiply(q3)); [EOL]     if (squaredSine.getReal() == 0) { [EOL]         final Field<T> field = squaredSine.getField(); [EOL]         return new FieldVector3D<T>(field.getOne(), field.getZero(), field.getZero()); [EOL]     } else if (q0.getReal() < 0) { [EOL]         T inverse = squaredSine.sqrt().reciprocal(); [EOL]         return new FieldVector3D<T>(q1.multiply(inverse), q2.multiply(inverse), q3.multiply(inverse)); [EOL]     } [EOL]     final T inverse = squaredSine.sqrt().reciprocal().negate(); [EOL]     return new FieldVector3D<T>(q1.multiply(inverse), q2.multiply(inverse), q3.multiply(inverse)); [EOL] } <line_num>: 430,441
public T getAngle() { [EOL]     if ((q0.getReal() < -0.1) || (q0.getReal() > 0.1)) { [EOL]         return q1.multiply(q1).add(q2.multiply(q2)).add(q3.multiply(q3)).sqrt().asin().multiply(2); [EOL]     } else if (q0.getReal() < 0) { [EOL]         return q0.negate().acos().multiply(2); [EOL]     } [EOL]     return q0.acos().multiply(2); [EOL] } <line_num>: 447,454
public T[] getAngles(final RotationOrder order) throws CardanEulerSingularityException { [EOL]     if (order == RotationOrder.XYZ) { [EOL]         final FieldVector3D<T> v1 = applyTo(vector(0, 0, 1)); [EOL]         final FieldVector3D<T> v2 = applyInverseTo(vector(1, 0, 0)); [EOL]         if ((v2.getZ().getReal() < -0.9999999999) || (v2.getZ().getReal() > 0.9999999999)) { [EOL]             throw new CardanEulerSingularityException(true); [EOL]         } [EOL]         return buildArray(v1.getY().negate().atan2(v1.getZ()), v2.getZ().asin(), v2.getY().negate().atan2(v2.getX())); [EOL]     } else if (order == RotationOrder.XZY) { [EOL]         final FieldVector3D<T> v1 = applyTo(vector(0, 1, 0)); [EOL]         final FieldVector3D<T> v2 = applyInverseTo(vector(1, 0, 0)); [EOL]         if ((v2.getY().getReal() < -0.9999999999) || (v2.getY().getReal() > 0.9999999999)) { [EOL]             throw new CardanEulerSingularityException(true); [EOL]         } [EOL]         return buildArray(v1.getZ().atan2(v1.getY()), v2.getY().asin().negate(), v2.getZ().atan2(v2.getX())); [EOL]     } else if (order == RotationOrder.YXZ) { [EOL]         final FieldVector3D<T> v1 = applyTo(vector(0, 0, 1)); [EOL]         final FieldVector3D<T> v2 = applyInverseTo(vector(0, 1, 0)); [EOL]         if ((v2.getZ().getReal() < -0.9999999999) || (v2.getZ().getReal() > 0.9999999999)) { [EOL]             throw new CardanEulerSingularityException(true); [EOL]         } [EOL]         return buildArray(v1.getX().atan2(v1.getZ()), v2.getZ().asin().negate(), v2.getX().atan2(v2.getY())); [EOL]     } else if (order == RotationOrder.YZX) { [EOL]         final FieldVector3D<T> v1 = applyTo(vector(1, 0, 0)); [EOL]         final FieldVector3D<T> v2 = applyInverseTo(vector(0, 1, 0)); [EOL]         if ((v2.getX().getReal() < -0.9999999999) || (v2.getX().getReal() > 0.9999999999)) { [EOL]             throw new CardanEulerSingularityException(true); [EOL]         } [EOL]         return buildArray(v1.getZ().negate().atan2(v1.getX()), v2.getX().asin(), v2.getZ().negate().atan2(v2.getY())); [EOL]     } else if (order == RotationOrder.ZXY) { [EOL]         final FieldVector3D<T> v1 = applyTo(vector(0, 1, 0)); [EOL]         final FieldVector3D<T> v2 = applyInverseTo(vector(0, 0, 1)); [EOL]         if ((v2.getY().getReal() < -0.9999999999) || (v2.getY().getReal() > 0.9999999999)) { [EOL]             throw new CardanEulerSingularityException(true); [EOL]         } [EOL]         return buildArray(v1.getX().negate().atan2(v1.getY()), v2.getY().asin(), v2.getX().negate().atan2(v2.getZ())); [EOL]     } else if (order == RotationOrder.ZYX) { [EOL]         final FieldVector3D<T> v1 = applyTo(vector(1, 0, 0)); [EOL]         final FieldVector3D<T> v2 = applyInverseTo(vector(0, 0, 1)); [EOL]         if ((v2.getX().getReal() < -0.9999999999) || (v2.getX().getReal() > 0.9999999999)) { [EOL]             throw new CardanEulerSingularityException(true); [EOL]         } [EOL]         return buildArray(v1.getY().atan2(v1.getX()), v2.getX().asin().negate(), v2.getY().atan2(v2.getZ())); [EOL]     } else if (order == RotationOrder.XYX) { [EOL]         final FieldVector3D<T> v1 = applyTo(vector(1, 0, 0)); [EOL]         final FieldVector3D<T> v2 = applyInverseTo(vector(1, 0, 0)); [EOL]         if ((v2.getX().getReal() < -0.9999999999) || (v2.getX().getReal() > 0.9999999999)) { [EOL]             throw new CardanEulerSingularityException(false); [EOL]         } [EOL]         return buildArray(v1.getY().atan2(v1.getZ().negate()), v2.getX().acos(), v2.getY().atan2(v2.getZ())); [EOL]     } else if (order == RotationOrder.XZX) { [EOL]         final FieldVector3D<T> v1 = applyTo(vector(1, 0, 0)); [EOL]         final FieldVector3D<T> v2 = applyInverseTo(vector(1, 0, 0)); [EOL]         if ((v2.getX().getReal() < -0.9999999999) || (v2.getX().getReal() > 0.9999999999)) { [EOL]             throw new CardanEulerSingularityException(false); [EOL]         } [EOL]         return buildArray(v1.getZ().atan2(v1.getY()), v2.getX().acos(), v2.getZ().atan2(v2.getY().negate())); [EOL]     } else if (order == RotationOrder.YXY) { [EOL]         final FieldVector3D<T> v1 = applyTo(vector(0, 1, 0)); [EOL]         final FieldVector3D<T> v2 = applyInverseTo(vector(0, 1, 0)); [EOL]         if ((v2.getY().getReal() < -0.9999999999) || (v2.getY().getReal() > 0.9999999999)) { [EOL]             throw new CardanEulerSingularityException(false); [EOL]         } [EOL]         return buildArray(v1.getX().atan2(v1.getZ()), v2.getY().acos(), v2.getX().atan2(v2.getZ().negate())); [EOL]     } else if (order == RotationOrder.YZY) { [EOL]         final FieldVector3D<T> v1 = applyTo(vector(0, 1, 0)); [EOL]         final FieldVector3D<T> v2 = applyInverseTo(vector(0, 1, 0)); [EOL]         if ((v2.getY().getReal() < -0.9999999999) || (v2.getY().getReal() > 0.9999999999)) { [EOL]             throw new CardanEulerSingularityException(false); [EOL]         } [EOL]         return buildArray(v1.getZ().atan2(v1.getX().negate()), v2.getY().acos(), v2.getZ().atan2(v2.getX())); [EOL]     } else if (order == RotationOrder.ZXZ) { [EOL]         final FieldVector3D<T> v1 = applyTo(vector(0, 0, 1)); [EOL]         final FieldVector3D<T> v2 = applyInverseTo(vector(0, 0, 1)); [EOL]         if ((v2.getZ().getReal() < -0.9999999999) || (v2.getZ().getReal() > 0.9999999999)) { [EOL]             throw new CardanEulerSingularityException(false); [EOL]         } [EOL]         return buildArray(v1.getX().atan2(v1.getY().negate()), v2.getZ().acos(), v2.getX().atan2(v2.getY())); [EOL]     } else { [EOL]         final FieldVector3D<T> v1 = applyTo(vector(0, 0, 1)); [EOL]         final FieldVector3D<T> v2 = applyInverseTo(vector(0, 0, 1)); [EOL]         if ((v2.getZ().getReal() < -0.9999999999) || (v2.getZ().getReal() > 0.9999999999)) { [EOL]             throw new CardanEulerSingularityException(false); [EOL]         } [EOL]         return buildArray(v1.getY().atan2(v1.getX()), v2.getZ().acos(), v2.getY().atan2(v2.getX().negate())); [EOL]     } [EOL] } <line_num>: 491,688
private T[] buildArray(final T a0, final T a1, final T a2) { [EOL]     final T[] array = MathArrays.buildArray(a0.getField(), 3); [EOL]     array[0] = a0; [EOL]     array[1] = a1; [EOL]     array[2] = a2; [EOL]     return array; [EOL] } <line_num>: 696,702
private FieldVector3D<T> vector(final double x, final double y, final double z) { [EOL]     final T zero = q0.getField().getZero(); [EOL]     return new FieldVector3D<T>(zero.add(x), zero.add(y), zero.add(z)); [EOL] } <line_num>: 710,713
public T[][] getMatrix() { [EOL]     final T q0q0 = q0.multiply(q0); [EOL]     final T q0q1 = q0.multiply(q1); [EOL]     final T q0q2 = q0.multiply(q2); [EOL]     final T q0q3 = q0.multiply(q3); [EOL]     final T q1q1 = q1.multiply(q1); [EOL]     final T q1q2 = q1.multiply(q2); [EOL]     final T q1q3 = q1.multiply(q3); [EOL]     final T q2q2 = q2.multiply(q2); [EOL]     final T q2q3 = q2.multiply(q3); [EOL]     final T q3q3 = q3.multiply(q3); [EOL]     final T[][] m = MathArrays.buildArray(q0.getField(), 3, 3); [EOL]     m[0][0] = q0q0.add(q1q1).multiply(2).subtract(1); [EOL]     m[1][0] = q1q2.subtract(q0q3).multiply(2); [EOL]     m[2][0] = q1q3.add(q0q2).multiply(2); [EOL]     m[0][1] = q1q2.add(q0q3).multiply(2); [EOL]     m[1][1] = q0q0.add(q2q2).multiply(2).subtract(1); [EOL]     m[2][1] = q2q3.subtract(q0q1).multiply(2); [EOL]     m[0][2] = q1q3.subtract(q0q2).multiply(2); [EOL]     m[1][2] = q2q3.add(q0q1).multiply(2); [EOL]     m[2][2] = q0q0.add(q3q3).multiply(2).subtract(1); [EOL]     return m; [EOL] } <line_num>: 718,749
public Rotation toRotation() { [EOL]     return new Rotation(q0.getReal(), q1.getReal(), q2.getReal(), q3.getReal(), false); [EOL] } <line_num>: 754,756
public FieldVector3D<T> applyTo(final FieldVector3D<T> u) { [EOL]     final T x = u.getX(); [EOL]     final T y = u.getY(); [EOL]     final T z = u.getZ(); [EOL]     final T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z)); [EOL]     return new FieldVector3D<T>(q0.multiply(x.multiply(q0).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x), q0.multiply(y.multiply(q0).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y), q0.multiply(z.multiply(q0).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z)); [EOL] } <line_num>: 762,774
public FieldVector3D<T> applyTo(final Vector3D u) { [EOL]     final double x = u.getX(); [EOL]     final double y = u.getY(); [EOL]     final double z = u.getZ(); [EOL]     final T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z)); [EOL]     return new FieldVector3D<T>(q0.multiply(q0.multiply(x).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x), q0.multiply(q0.multiply(y).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y), q0.multiply(q0.multiply(z).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z)); [EOL] } <line_num>: 780,792
public void applyTo(final T[] in, final T[] out) { [EOL]     final T x = in[0]; [EOL]     final T y = in[1]; [EOL]     final T z = in[2]; [EOL]     final T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z)); [EOL]     out[0] = q0.multiply(x.multiply(q0).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x); [EOL]     out[1] = q0.multiply(y.multiply(q0).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y); [EOL]     out[2] = q0.multiply(z.multiply(q0).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z); [EOL] } <line_num>: 799,811
public void applyTo(final double[] in, final T[] out) { [EOL]     final double x = in[0]; [EOL]     final double y = in[1]; [EOL]     final double z = in[2]; [EOL]     final T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z)); [EOL]     out[0] = q0.multiply(q0.multiply(x).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x); [EOL]     out[1] = q0.multiply(q0.multiply(y).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y); [EOL]     out[2] = q0.multiply(q0.multiply(z).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z); [EOL] } <line_num>: 817,829
public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u) { [EOL]     final T x = u.getX(); [EOL]     final T y = u.getY(); [EOL]     final T z = u.getZ(); [EOL]     final T s = x.multiply(r.getQ1()).add(y.multiply(r.getQ2())).add(z.multiply(r.getQ3())); [EOL]     return new FieldVector3D<T>(x.multiply(r.getQ0()).subtract(z.multiply(r.getQ2()).subtract(y.multiply(r.getQ3()))).multiply(r.getQ0()).add(s.multiply(r.getQ1())).multiply(2).subtract(x), y.multiply(r.getQ0()).subtract(x.multiply(r.getQ3()).subtract(z.multiply(r.getQ1()))).multiply(r.getQ0()).add(s.multiply(r.getQ2())).multiply(2).subtract(y), z.multiply(r.getQ0()).subtract(y.multiply(r.getQ1()).subtract(x.multiply(r.getQ2()))).multiply(r.getQ0()).add(s.multiply(r.getQ3())).multiply(2).subtract(z)); [EOL] } <line_num>: 837,849
public FieldVector3D<T> applyInverseTo(final FieldVector3D<T> u) { [EOL]     final T x = u.getX(); [EOL]     final T y = u.getY(); [EOL]     final T z = u.getZ(); [EOL]     final T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z)); [EOL]     final T m0 = q0.negate(); [EOL]     return new FieldVector3D<T>(m0.multiply(x.multiply(m0).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x), m0.multiply(y.multiply(m0).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y), m0.multiply(z.multiply(m0).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z)); [EOL] } <line_num>: 855,868
public FieldVector3D<T> applyInverseTo(final Vector3D u) { [EOL]     final double x = u.getX(); [EOL]     final double y = u.getY(); [EOL]     final double z = u.getZ(); [EOL]     final T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z)); [EOL]     final T m0 = q0.negate(); [EOL]     return new FieldVector3D<T>(m0.multiply(m0.multiply(x).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x), m0.multiply(m0.multiply(y).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y), m0.multiply(m0.multiply(z).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z)); [EOL] } <line_num>: 874,887
public void applyInverseTo(final T[] in, final T[] out) { [EOL]     final T x = in[0]; [EOL]     final T y = in[1]; [EOL]     final T z = in[2]; [EOL]     final T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z)); [EOL]     final T m0 = q0.negate(); [EOL]     out[0] = m0.multiply(x.multiply(m0).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x); [EOL]     out[1] = m0.multiply(y.multiply(m0).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y); [EOL]     out[2] = m0.multiply(z.multiply(m0).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z); [EOL] } <line_num>: 894,907
public void applyInverseTo(final double[] in, final T[] out) { [EOL]     final double x = in[0]; [EOL]     final double y = in[1]; [EOL]     final double z = in[2]; [EOL]     final T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z)); [EOL]     final T m0 = q0.negate(); [EOL]     out[0] = m0.multiply(m0.multiply(x).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x); [EOL]     out[1] = m0.multiply(m0.multiply(y).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y); [EOL]     out[2] = m0.multiply(m0.multiply(z).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z); [EOL] } <line_num>: 913,926
public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u) { [EOL]     final T x = u.getX(); [EOL]     final T y = u.getY(); [EOL]     final T z = u.getZ(); [EOL]     final T s = x.multiply(r.getQ1()).add(y.multiply(r.getQ2())).add(z.multiply(r.getQ3())); [EOL]     final double m0 = -r.getQ0(); [EOL]     return new FieldVector3D<T>(x.multiply(m0).subtract(z.multiply(r.getQ2()).subtract(y.multiply(r.getQ3()))).multiply(m0).add(s.multiply(r.getQ1())).multiply(2).subtract(x), y.multiply(m0).subtract(x.multiply(r.getQ3()).subtract(z.multiply(r.getQ1()))).multiply(m0).add(s.multiply(r.getQ2())).multiply(2).subtract(y), z.multiply(m0).subtract(y.multiply(r.getQ1()).subtract(x.multiply(r.getQ2()))).multiply(m0).add(s.multiply(r.getQ3())).multiply(2).subtract(z)); [EOL] } <line_num>: 934,947
public FieldRotation<T> applyTo(final FieldRotation<T> r) { [EOL]     return new FieldRotation<T>(r.q0.multiply(q0).subtract(r.q1.multiply(q1).add(r.q2.multiply(q2)).add(r.q3.multiply(q3))), r.q1.multiply(q0).add(r.q0.multiply(q1)).add(r.q2.multiply(q3).subtract(r.q3.multiply(q2))), r.q2.multiply(q0).add(r.q0.multiply(q2)).add(r.q3.multiply(q1).subtract(r.q1.multiply(q3))), r.q3.multiply(q0).add(r.q0.multiply(q3)).add(r.q1.multiply(q2).subtract(r.q2.multiply(q1))), false); [EOL] } <line_num>: 958,964
public FieldRotation<T> applyTo(final Rotation r) { [EOL]     return new FieldRotation<T>(q0.multiply(r.getQ0()).subtract(q1.multiply(r.getQ1()).add(q2.multiply(r.getQ2())).add(q3.multiply(r.getQ3()))), q0.multiply(r.getQ1()).add(q1.multiply(r.getQ0())).add(q3.multiply(r.getQ2()).subtract(q2.multiply(r.getQ3()))), q0.multiply(r.getQ2()).add(q2.multiply(r.getQ0())).add(q1.multiply(r.getQ3()).subtract(q3.multiply(r.getQ1()))), q0.multiply(r.getQ3()).add(q3.multiply(r.getQ0())).add(q2.multiply(r.getQ1()).subtract(q1.multiply(r.getQ2()))), false); [EOL] } <line_num>: 975,981
public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner) { [EOL]     return new FieldRotation<T>(rInner.q0.multiply(r1.getQ0()).subtract(rInner.q1.multiply(r1.getQ1()).add(rInner.q2.multiply(r1.getQ2())).add(rInner.q3.multiply(r1.getQ3()))), rInner.q1.multiply(r1.getQ0()).add(rInner.q0.multiply(r1.getQ1())).add(rInner.q2.multiply(r1.getQ3()).subtract(rInner.q3.multiply(r1.getQ2()))), rInner.q2.multiply(r1.getQ0()).add(rInner.q0.multiply(r1.getQ2())).add(rInner.q3.multiply(r1.getQ1()).subtract(rInner.q1.multiply(r1.getQ3()))), rInner.q3.multiply(r1.getQ0()).add(rInner.q0.multiply(r1.getQ3())).add(rInner.q1.multiply(r1.getQ2()).subtract(rInner.q2.multiply(r1.getQ1()))), false); [EOL] } <line_num>: 994,1000
public FieldRotation<T> applyInverseTo(final FieldRotation<T> r) { [EOL]     return new FieldRotation<T>(r.q0.multiply(q0).add(r.q1.multiply(q1).add(r.q2.multiply(q2)).add(r.q3.multiply(q3))).negate(), r.q0.multiply(q1).add(r.q2.multiply(q3).subtract(r.q3.multiply(q2))).subtract(r.q1.multiply(q0)), r.q0.multiply(q2).add(r.q3.multiply(q1).subtract(r.q1.multiply(q3))).subtract(r.q2.multiply(q0)), r.q0.multiply(q3).add(r.q1.multiply(q2).subtract(r.q2.multiply(q1))).subtract(r.q3.multiply(q0)), false); [EOL] } <line_num>: 1013,1019
public FieldRotation<T> applyInverseTo(final Rotation r) { [EOL]     return new FieldRotation<T>(q0.multiply(r.getQ0()).add(q1.multiply(r.getQ1()).add(q2.multiply(r.getQ2())).add(q3.multiply(r.getQ3()))).negate(), q1.multiply(r.getQ0()).add(q3.multiply(r.getQ2()).subtract(q2.multiply(r.getQ3()))).subtract(q0.multiply(r.getQ1())), q2.multiply(r.getQ0()).add(q1.multiply(r.getQ3()).subtract(q3.multiply(r.getQ1()))).subtract(q0.multiply(r.getQ2())), q3.multiply(r.getQ0()).add(q2.multiply(r.getQ1()).subtract(q1.multiply(r.getQ2()))).subtract(q0.multiply(r.getQ3())), false); [EOL] } <line_num>: 1032,1038
public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner) { [EOL]     return new FieldRotation<T>(rInner.q0.multiply(rOuter.getQ0()).add(rInner.q1.multiply(rOuter.getQ1()).add(rInner.q2.multiply(rOuter.getQ2())).add(rInner.q3.multiply(rOuter.getQ3()))).negate(), rInner.q0.multiply(rOuter.getQ1()).add(rInner.q2.multiply(rOuter.getQ3()).subtract(rInner.q3.multiply(rOuter.getQ2()))).subtract(rInner.q1.multiply(rOuter.getQ0())), rInner.q0.multiply(rOuter.getQ2()).add(rInner.q3.multiply(rOuter.getQ1()).subtract(rInner.q1.multiply(rOuter.getQ3()))).subtract(rInner.q2.multiply(rOuter.getQ0())), rInner.q0.multiply(rOuter.getQ3()).add(rInner.q1.multiply(rOuter.getQ2()).subtract(rInner.q2.multiply(rOuter.getQ1()))).subtract(rInner.q3.multiply(rOuter.getQ0())), false); [EOL] } <line_num>: 1053,1059
private T[][] orthogonalizeMatrix(final T[][] m, final double threshold) throws NotARotationMatrixException { [EOL]     T x00 = m[0][0]; [EOL]     T x01 = m[0][1]; [EOL]     T x02 = m[0][2]; [EOL]     T x10 = m[1][0]; [EOL]     T x11 = m[1][1]; [EOL]     T x12 = m[1][2]; [EOL]     T x20 = m[2][0]; [EOL]     T x21 = m[2][1]; [EOL]     T x22 = m[2][2]; [EOL]     double fn = 0; [EOL]     double fn1; [EOL]     final T[][] o = MathArrays.buildArray(m[0][0].getField(), 3, 3); [EOL]     int i = 0; [EOL]     while (++i < 11) { [EOL]         final T mx00 = m[0][0].multiply(x00).add(m[1][0].multiply(x10)).add(m[2][0].multiply(x20)); [EOL]         final T mx10 = m[0][1].multiply(x00).add(m[1][1].multiply(x10)).add(m[2][1].multiply(x20)); [EOL]         final T mx20 = m[0][2].multiply(x00).add(m[1][2].multiply(x10)).add(m[2][2].multiply(x20)); [EOL]         final T mx01 = m[0][0].multiply(x01).add(m[1][0].multiply(x11)).add(m[2][0].multiply(x21)); [EOL]         final T mx11 = m[0][1].multiply(x01).add(m[1][1].multiply(x11)).add(m[2][1].multiply(x21)); [EOL]         final T mx21 = m[0][2].multiply(x01).add(m[1][2].multiply(x11)).add(m[2][2].multiply(x21)); [EOL]         final T mx02 = m[0][0].multiply(x02).add(m[1][0].multiply(x12)).add(m[2][0].multiply(x22)); [EOL]         final T mx12 = m[0][1].multiply(x02).add(m[1][1].multiply(x12)).add(m[2][1].multiply(x22)); [EOL]         final T mx22 = m[0][2].multiply(x02).add(m[1][2].multiply(x12)).add(m[2][2].multiply(x22)); [EOL]         o[0][0] = x00.subtract(x00.multiply(mx00).add(x01.multiply(mx10)).add(x02.multiply(mx20)).subtract(m[0][0]).multiply(0.5)); [EOL]         o[0][1] = x01.subtract(x00.multiply(mx01).add(x01.multiply(mx11)).add(x02.multiply(mx21)).subtract(m[0][1]).multiply(0.5)); [EOL]         o[0][2] = x02.subtract(x00.multiply(mx02).add(x01.multiply(mx12)).add(x02.multiply(mx22)).subtract(m[0][2]).multiply(0.5)); [EOL]         o[1][0] = x10.subtract(x10.multiply(mx00).add(x11.multiply(mx10)).add(x12.multiply(mx20)).subtract(m[1][0]).multiply(0.5)); [EOL]         o[1][1] = x11.subtract(x10.multiply(mx01).add(x11.multiply(mx11)).add(x12.multiply(mx21)).subtract(m[1][1]).multiply(0.5)); [EOL]         o[1][2] = x12.subtract(x10.multiply(mx02).add(x11.multiply(mx12)).add(x12.multiply(mx22)).subtract(m[1][2]).multiply(0.5)); [EOL]         o[2][0] = x20.subtract(x20.multiply(mx00).add(x21.multiply(mx10)).add(x22.multiply(mx20)).subtract(m[2][0]).multiply(0.5)); [EOL]         o[2][1] = x21.subtract(x20.multiply(mx01).add(x21.multiply(mx11)).add(x22.multiply(mx21)).subtract(m[2][1]).multiply(0.5)); [EOL]         o[2][2] = x22.subtract(x20.multiply(mx02).add(x21.multiply(mx12)).add(x22.multiply(mx22)).subtract(m[2][2]).multiply(0.5)); [EOL]         final double corr00 = o[0][0].getReal() - m[0][0].getReal(); [EOL]         final double corr01 = o[0][1].getReal() - m[0][1].getReal(); [EOL]         final double corr02 = o[0][2].getReal() - m[0][2].getReal(); [EOL]         final double corr10 = o[1][0].getReal() - m[1][0].getReal(); [EOL]         final double corr11 = o[1][1].getReal() - m[1][1].getReal(); [EOL]         final double corr12 = o[1][2].getReal() - m[1][2].getReal(); [EOL]         final double corr20 = o[2][0].getReal() - m[2][0].getReal(); [EOL]         final double corr21 = o[2][1].getReal() - m[2][1].getReal(); [EOL]         final double corr22 = o[2][2].getReal() - m[2][2].getReal(); [EOL]         fn1 = corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22; [EOL]         if (FastMath.abs(fn1 - fn) <= threshold) { [EOL]             return o; [EOL]         } [EOL]         x00 = o[0][0]; [EOL]         x01 = o[0][1]; [EOL]         x02 = o[0][2]; [EOL]         x10 = o[1][0]; [EOL]         x11 = o[1][1]; [EOL]         x12 = o[1][2]; [EOL]         x20 = o[2][0]; [EOL]         x21 = o[2][1]; [EOL]         x22 = o[2][2]; [EOL]         fn = fn1; [EOL]     } [EOL]     throw new NotARotationMatrixException(LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX, i - 1); [EOL] } <line_num>: 1071,1153
public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2) { [EOL]     return r1.applyInverseTo(r2).getAngle(); [EOL] } <line_num>: 1180,1182
