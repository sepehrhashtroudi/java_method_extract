public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { [EOL]     reset(p1, p2); [EOL] } <line_num>: 54,56
public Line(final Line line) { [EOL]     this.direction = line.direction; [EOL]     this.zero = line.zero; [EOL] } <line_num>: 63,66
public void reset(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { [EOL]     final Vector3D delta = p2.subtract(p1); [EOL]     final double norm2 = delta.getNormSq(); [EOL]     if (norm2 == 0.0) { [EOL]         throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM); [EOL]     } [EOL]     this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta); [EOL]     zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta); [EOL] } <line_num>: 73,81
public Line revert() { [EOL]     final Line reverted = new Line(this); [EOL]     reverted.direction = reverted.direction.negate(); [EOL]     return reverted; [EOL] } <line_num>: 86,90
public Vector3D getDirection() { [EOL]     return direction; [EOL] } <line_num>: 95,97
public Vector3D getOrigin() { [EOL]     return zero; [EOL] } <line_num>: 102,104
public double getAbscissa(final Vector3D point) { [EOL]     return point.subtract(zero).dotProduct(direction); [EOL] } <line_num>: 113,115
public Vector3D pointAt(final double abscissa) { [EOL]     return new Vector3D(1.0, zero, abscissa, direction); [EOL] } <line_num>: 121,123
public Vector1D toSubSpace(final Vector<Euclidean3D> point) { [EOL]     return new Vector1D(getAbscissa((Vector3D) point)); [EOL] } <line_num>: 128,130
public Vector3D toSpace(final Vector<Euclidean1D> point) { [EOL]     return pointAt(((Vector1D) point).getX()); [EOL] } <line_num>: 135,137
public boolean isSimilarTo(final Line line) { [EOL]     final double angle = Vector3D.angle(direction, line.direction); [EOL]     return ((angle < 1.0e-10) || (angle > (FastMath.PI - 1.0e-10))) && contains(line.zero); [EOL] } <line_num>: 146,149
public boolean contains(final Vector3D p) { [EOL]     return distance(p) < 1.0e-10; [EOL] } <line_num>: 155,157
public double distance(final Vector3D p) { [EOL]     final Vector3D d = p.subtract(zero); [EOL]     final Vector3D n = new Vector3D(1.0, d, -d.dotProduct(direction), direction); [EOL]     return n.getNorm(); [EOL] } <line_num>: 163,167
public double distance(final Line line) { [EOL]     final Vector3D normal = Vector3D.crossProduct(direction, line.direction); [EOL]     final double n = normal.getNorm(); [EOL]     if (n < Precision.SAFE_MIN) { [EOL]         return distance(line.zero); [EOL]     } [EOL]     final double offset = line.zero.subtract(zero).dotProduct(normal) / n; [EOL]     return FastMath.abs(offset); [EOL] } <line_num>: 173,187
public Vector3D closestPoint(final Line line) { [EOL]     final double cos = direction.dotProduct(line.direction); [EOL]     final double n = 1 - cos * cos; [EOL]     if (n < Precision.EPSILON) { [EOL]         return zero; [EOL]     } [EOL]     final Vector3D delta0 = line.zero.subtract(zero); [EOL]     final double a = delta0.dotProduct(direction); [EOL]     final double b = delta0.dotProduct(line.direction); [EOL]     return new Vector3D(1, zero, (a - b * cos) / n, direction); [EOL] } <line_num>: 193,208
public Vector3D intersection(final Line line) { [EOL]     final Vector3D closest = closestPoint(line); [EOL]     return line.contains(closest) ? closest : null; [EOL] } <line_num>: 215,218
public SubLine wholeLine() { [EOL]     return new SubLine(this, new IntervalsSet()); [EOL] } <line_num>: 223,225
