public SubPlane(final Hyperplane<Euclidean3D> hyperplane, final Region<Euclidean2D> remainingRegion) { [EOL]     super(hyperplane, remainingRegion); [EOL] } <line_num>: 40,43
@Override [EOL] protected AbstractSubHyperplane<Euclidean3D, Euclidean2D> buildNew(final Hyperplane<Euclidean3D> hyperplane, final Region<Euclidean2D> remainingRegion) { [EOL]     return new SubPlane(hyperplane, remainingRegion); [EOL] } <line_num>: 46,50
@Override [EOL] public Side side(Hyperplane<Euclidean3D> hyperplane) { [EOL]     final Plane otherPlane = (Plane) hyperplane; [EOL]     final Plane thisPlane = (Plane) getHyperplane(); [EOL]     final Line inter = otherPlane.intersection(thisPlane); [EOL]     if (inter == null) { [EOL]         final double global = otherPlane.getOffset(thisPlane); [EOL]         return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER); [EOL]     } [EOL]     Vector2D p = thisPlane.toSubSpace(inter.toSpace(Vector1D.ZERO)); [EOL]     Vector2D q = thisPlane.toSubSpace(inter.toSpace(Vector1D.ONE)); [EOL]     Vector3D crossP = Vector3D.crossProduct(inter.getDirection(), thisPlane.getNormal()); [EOL]     if (crossP.dotProduct(otherPlane.getNormal()) < 0) { [EOL]         final Vector2D tmp = p; [EOL]         p = q; [EOL]         q = tmp; [EOL]     } [EOL]     final org.apache.commons.math3.geometry.euclidean.twod.Line line2D = new org.apache.commons.math3.geometry.euclidean.twod.Line(p, q); [EOL]     return getRemainingRegion().side(line2D); [EOL] } <line_num>: 53,88
@Override [EOL] public SplitSubHyperplane<Euclidean3D> split(Hyperplane<Euclidean3D> hyperplane) { [EOL]     final Plane otherPlane = (Plane) hyperplane; [EOL]     final Plane thisPlane = (Plane) getHyperplane(); [EOL]     final Line inter = otherPlane.intersection(thisPlane); [EOL]     if (inter == null) { [EOL]         final double global = otherPlane.getOffset(thisPlane); [EOL]         return (global < -1.0e-10) ? new SplitSubHyperplane<Euclidean3D>(null, this) : new SplitSubHyperplane<Euclidean3D>(this, null); [EOL]     } [EOL]     Vector2D p = thisPlane.toSubSpace(inter.toSpace(Vector1D.ZERO)); [EOL]     Vector2D q = thisPlane.toSubSpace(inter.toSpace(Vector1D.ONE)); [EOL]     Vector3D crossP = Vector3D.crossProduct(inter.getDirection(), thisPlane.getNormal()); [EOL]     if (crossP.dotProduct(otherPlane.getNormal()) < 0) { [EOL]         final Vector2D tmp = p; [EOL]         p = q; [EOL]         q = tmp; [EOL]     } [EOL]     final SubHyperplane<Euclidean2D> l2DMinus = new org.apache.commons.math3.geometry.euclidean.twod.Line(p, q).wholeHyperplane(); [EOL]     final SubHyperplane<Euclidean2D> l2DPlus = new org.apache.commons.math3.geometry.euclidean.twod.Line(q, p).wholeHyperplane(); [EOL]     final BSPTree<Euclidean2D> splitTree = getRemainingRegion().getTree(false).split(l2DMinus); [EOL]     final BSPTree<Euclidean2D> plusTree = getRemainingRegion().isEmpty(splitTree.getPlus()) ? new BSPTree<Euclidean2D>(Boolean.FALSE) : new BSPTree<Euclidean2D>(l2DPlus, new BSPTree<Euclidean2D>(Boolean.FALSE), splitTree.getPlus(), null); [EOL]     final BSPTree<Euclidean2D> minusTree = getRemainingRegion().isEmpty(splitTree.getMinus()) ? new BSPTree<Euclidean2D>(Boolean.FALSE) : new BSPTree<Euclidean2D>(l2DMinus, new BSPTree<Euclidean2D>(Boolean.FALSE), splitTree.getMinus(), null); [EOL]     return new SplitSubHyperplane<Euclidean3D>(new SubPlane(thisPlane.copySelf(), new PolygonsSet(plusTree)), new SubPlane(thisPlane.copySelf(), new PolygonsSet(minusTree))); [EOL] } <line_num>: 96,139
