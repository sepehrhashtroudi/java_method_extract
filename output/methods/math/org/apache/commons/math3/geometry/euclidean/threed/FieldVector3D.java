public FieldVector3D(final T x, final T y, final T z) { [EOL]     this.x = x; [EOL]     this.y = y; [EOL]     this.z = z; [EOL] } <line_num>: 60,64
public FieldVector3D(final T[] v) throws DimensionMismatchException { [EOL]     if (v.length != 3) { [EOL]         throw new DimensionMismatchException(v.length, 3); [EOL]     } [EOL]     this.x = v[0]; [EOL]     this.y = v[1]; [EOL]     this.z = v[2]; [EOL] } <line_num>: 72,79
public FieldVector3D(final T alpha, final T delta) { [EOL]     T cosDelta = delta.cos(); [EOL]     this.x = alpha.cos().multiply(cosDelta); [EOL]     this.y = alpha.sin().multiply(cosDelta); [EOL]     this.z = delta.sin(); [EOL] } <line_num>: 89,94
public FieldVector3D(final T a, final FieldVector3D<T> u) { [EOL]     this.x = a.multiply(u.x); [EOL]     this.y = a.multiply(u.y); [EOL]     this.z = a.multiply(u.z); [EOL] } <line_num>: 102,106
public FieldVector3D(final T a, final Vector3D u) { [EOL]     this.x = a.multiply(u.getX()); [EOL]     this.y = a.multiply(u.getY()); [EOL]     this.z = a.multiply(u.getZ()); [EOL] } <line_num>: 114,118
public FieldVector3D(final double a, final FieldVector3D<T> u) { [EOL]     this.x = u.x.multiply(a); [EOL]     this.y = u.y.multiply(a); [EOL]     this.z = u.z.multiply(a); [EOL] } <line_num>: 126,130
public FieldVector3D(final T a1, final FieldVector3D<T> u1, final T a2, final FieldVector3D<T> u2) { [EOL]     final T prototype = a1; [EOL]     this.x = prototype.linearCombination(a1, u1.getX(), a2, u2.getX()); [EOL]     this.y = prototype.linearCombination(a1, u1.getY(), a2, u2.getY()); [EOL]     this.z = prototype.linearCombination(a1, u1.getZ(), a2, u2.getZ()); [EOL] } <line_num>: 140,146
public FieldVector3D(final T a1, final Vector3D u1, final T a2, final Vector3D u2) { [EOL]     final T prototype = a1; [EOL]     this.x = prototype.linearCombination(u1.getX(), a1, u2.getX(), a2); [EOL]     this.y = prototype.linearCombination(u1.getY(), a1, u2.getY(), a2); [EOL]     this.z = prototype.linearCombination(u1.getZ(), a1, u2.getZ(), a2); [EOL] } <line_num>: 156,162
public FieldVector3D(final double a1, final FieldVector3D<T> u1, final double a2, final FieldVector3D<T> u2) { [EOL]     final T prototype = u1.getX(); [EOL]     this.x = prototype.linearCombination(a1, u1.getX(), a2, u2.getX()); [EOL]     this.y = prototype.linearCombination(a1, u1.getY(), a2, u2.getY()); [EOL]     this.z = prototype.linearCombination(a1, u1.getZ(), a2, u2.getZ()); [EOL] } <line_num>: 172,178
public FieldVector3D(final T a1, final FieldVector3D<T> u1, final T a2, final FieldVector3D<T> u2, final T a3, final FieldVector3D<T> u3) { [EOL]     final T prototype = a1; [EOL]     this.x = prototype.linearCombination(a1, u1.getX(), a2, u2.getX(), a3, u3.getX()); [EOL]     this.y = prototype.linearCombination(a1, u1.getY(), a2, u2.getY(), a3, u3.getY()); [EOL]     this.z = prototype.linearCombination(a1, u1.getZ(), a2, u2.getZ(), a3, u3.getZ()); [EOL] } <line_num>: 190,197
public FieldVector3D(final T a1, final Vector3D u1, final T a2, final Vector3D u2, final T a3, final Vector3D u3) { [EOL]     final T prototype = a1; [EOL]     this.x = prototype.linearCombination(u1.getX(), a1, u2.getX(), a2, u3.getX(), a3); [EOL]     this.y = prototype.linearCombination(u1.getY(), a1, u2.getY(), a2, u3.getY(), a3); [EOL]     this.z = prototype.linearCombination(u1.getZ(), a1, u2.getZ(), a2, u3.getZ(), a3); [EOL] } <line_num>: 209,216
public FieldVector3D(final double a1, final FieldVector3D<T> u1, final double a2, final FieldVector3D<T> u2, final double a3, final FieldVector3D<T> u3) { [EOL]     final T prototype = u1.getX(); [EOL]     this.x = prototype.linearCombination(a1, u1.getX(), a2, u2.getX(), a3, u3.getX()); [EOL]     this.y = prototype.linearCombination(a1, u1.getY(), a2, u2.getY(), a3, u3.getY()); [EOL]     this.z = prototype.linearCombination(a1, u1.getZ(), a2, u2.getZ(), a3, u3.getZ()); [EOL] } <line_num>: 228,235
public FieldVector3D(final T a1, final FieldVector3D<T> u1, final T a2, final FieldVector3D<T> u2, final T a3, final FieldVector3D<T> u3, final T a4, final FieldVector3D<T> u4) { [EOL]     final T prototype = a1; [EOL]     this.x = prototype.linearCombination(a1, u1.getX(), a2, u2.getX(), a3, u3.getX(), a4, u4.getX()); [EOL]     this.y = prototype.linearCombination(a1, u1.getY(), a2, u2.getY(), a3, u3.getY(), a4, u4.getY()); [EOL]     this.z = prototype.linearCombination(a1, u1.getZ(), a2, u2.getZ(), a3, u3.getZ(), a4, u4.getZ()); [EOL] } <line_num>: 249,257
public FieldVector3D(final T a1, final Vector3D u1, final T a2, final Vector3D u2, final T a3, final Vector3D u3, final T a4, final Vector3D u4) { [EOL]     final T prototype = a1; [EOL]     this.x = prototype.linearCombination(u1.getX(), a1, u2.getX(), a2, u3.getX(), a3, u4.getX(), a4); [EOL]     this.y = prototype.linearCombination(u1.getY(), a1, u2.getY(), a2, u3.getY(), a3, u4.getY(), a4); [EOL]     this.z = prototype.linearCombination(u1.getZ(), a1, u2.getZ(), a2, u3.getZ(), a3, u4.getZ(), a4); [EOL] } <line_num>: 271,279
public FieldVector3D(final double a1, final FieldVector3D<T> u1, final double a2, final FieldVector3D<T> u2, final double a3, final FieldVector3D<T> u3, final double a4, final FieldVector3D<T> u4) { [EOL]     final T prototype = u1.getX(); [EOL]     this.x = prototype.linearCombination(a1, u1.getX(), a2, u2.getX(), a3, u3.getX(), a4, u4.getX()); [EOL]     this.y = prototype.linearCombination(a1, u1.getY(), a2, u2.getY(), a3, u3.getY(), a4, u4.getY()); [EOL]     this.z = prototype.linearCombination(a1, u1.getZ(), a2, u2.getZ(), a3, u3.getZ(), a4, u4.getZ()); [EOL] } <line_num>: 293,301
public T getX() { [EOL]     return x; [EOL] } <line_num>: 307,309
public T getY() { [EOL]     return y; [EOL] } <line_num>: 315,317
public T getZ() { [EOL]     return z; [EOL] } <line_num>: 323,325
public T[] toArray() { [EOL]     final T[] array = MathArrays.buildArray(x.getField(), 3); [EOL]     array[0] = x; [EOL]     array[1] = y; [EOL]     array[2] = z; [EOL]     return array; [EOL] } <line_num>: 331,337
public Vector3D toVector3D() { [EOL]     return new Vector3D(x.getReal(), y.getReal(), z.getReal()); [EOL] } <line_num>: 342,344
public T getNorm1() { [EOL]     return x.abs().add(y.abs()).add(z.abs()); [EOL] } <line_num>: 349,351
public T getNorm() { [EOL]     return x.multiply(x).add(y.multiply(y)).add(z.multiply(z)).sqrt(); [EOL] } <line_num>: 356,359
public T getNormSq() { [EOL]     return x.multiply(x).add(y.multiply(y)).add(z.multiply(z)); [EOL] } <line_num>: 364,367
public T getNormInf() { [EOL]     final T xAbs = x.abs(); [EOL]     final T yAbs = y.abs(); [EOL]     final T zAbs = z.abs(); [EOL]     if (xAbs.getReal() <= yAbs.getReal()) { [EOL]         if (yAbs.getReal() <= zAbs.getReal()) { [EOL]             return zAbs; [EOL]         } else { [EOL]             return yAbs; [EOL]         } [EOL]     } else { [EOL]         if (xAbs.getReal() <= zAbs.getReal()) { [EOL]             return zAbs; [EOL]         } else { [EOL]             return xAbs; [EOL]         } [EOL]     } [EOL] } <line_num>: 372,389
public T getAlpha() { [EOL]     return y.atan2(x); [EOL] } <line_num>: 395,397
public T getDelta() { [EOL]     return z.divide(getNorm()).asin(); [EOL] } <line_num>: 403,405
public FieldVector3D<T> add(final FieldVector3D<T> v) { [EOL]     return new FieldVector3D<T>(x.add(v.x), y.add(v.y), z.add(v.z)); [EOL] } <line_num>: 411,413
public FieldVector3D<T> add(final Vector3D v) { [EOL]     return new FieldVector3D<T>(x.add(v.getX()), y.add(v.getY()), z.add(v.getZ())); [EOL] } <line_num>: 419,421
public FieldVector3D<T> add(final T factor, final FieldVector3D<T> v) { [EOL]     return new FieldVector3D<T>(x.getField().getOne(), this, factor, v); [EOL] } <line_num>: 428,430
public FieldVector3D<T> add(final T factor, final Vector3D v) { [EOL]     return new FieldVector3D<T>(x.add(factor.multiply(v.getX())), y.add(factor.multiply(v.getY())), z.add(factor.multiply(v.getZ()))); [EOL] } <line_num>: 437,441
public FieldVector3D<T> add(final double factor, final FieldVector3D<T> v) { [EOL]     return new FieldVector3D<T>(1.0, this, factor, v); [EOL] } <line_num>: 448,450
public FieldVector3D<T> add(final double factor, final Vector3D v) { [EOL]     return new FieldVector3D<T>(x.add(factor * v.getX()), y.add(factor * v.getY()), z.add(factor * v.getZ())); [EOL] } <line_num>: 457,461
public FieldVector3D<T> subtract(final FieldVector3D<T> v) { [EOL]     return new FieldVector3D<T>(x.subtract(v.x), y.subtract(v.y), z.subtract(v.z)); [EOL] } <line_num>: 467,469
public FieldVector3D<T> subtract(final Vector3D v) { [EOL]     return new FieldVector3D<T>(x.subtract(v.getX()), y.subtract(v.getY()), z.subtract(v.getZ())); [EOL] } <line_num>: 475,477
public FieldVector3D<T> subtract(final T factor, final FieldVector3D<T> v) { [EOL]     return new FieldVector3D<T>(x.getField().getOne(), this, factor.negate(), v); [EOL] } <line_num>: 484,486
public FieldVector3D<T> subtract(final T factor, final Vector3D v) { [EOL]     return new FieldVector3D<T>(x.subtract(factor.multiply(v.getX())), y.subtract(factor.multiply(v.getY())), z.subtract(factor.multiply(v.getZ()))); [EOL] } <line_num>: 493,497
public FieldVector3D<T> subtract(final double factor, final FieldVector3D<T> v) { [EOL]     return new FieldVector3D<T>(1.0, this, -factor, v); [EOL] } <line_num>: 504,506
public FieldVector3D<T> subtract(final double factor, final Vector3D v) { [EOL]     return new FieldVector3D<T>(x.subtract(factor * v.getX()), y.subtract(factor * v.getY()), z.subtract(factor * v.getZ())); [EOL] } <line_num>: 513,517
public FieldVector3D<T> normalize() throws MathArithmeticException { [EOL]     final T s = getNorm(); [EOL]     if (s.getReal() == 0) { [EOL]         throw new MathArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR); [EOL]     } [EOL]     return scalarMultiply(s.reciprocal()); [EOL] } <line_num>: 523,529
public FieldVector3D<T> orthogonal() throws MathArithmeticException { [EOL]     final double threshold = 0.6 * getNorm().getReal(); [EOL]     if (threshold == 0) { [EOL]         throw new MathArithmeticException(LocalizedFormats.ZERO_NORM); [EOL]     } [EOL]     if (FastMath.abs(x.getReal()) <= threshold) { [EOL]         final T inverse = y.multiply(y).add(z.multiply(z)).sqrt().reciprocal(); [EOL]         return new FieldVector3D<T>(inverse.getField().getZero(), inverse.multiply(z), inverse.multiply(y).negate()); [EOL]     } else if (FastMath.abs(y.getReal()) <= threshold) { [EOL]         final T inverse = x.multiply(x).add(z.multiply(z)).sqrt().reciprocal(); [EOL]         return new FieldVector3D<T>(inverse.multiply(z).negate(), inverse.getField().getZero(), inverse.multiply(x)); [EOL]     } else { [EOL]         final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(); [EOL]         return new FieldVector3D<T>(inverse.multiply(y), inverse.multiply(x).negate(), inverse.getField().getZero()); [EOL]     } [EOL] } <line_num>: 546,564
public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException { [EOL]     final T normProduct = v1.getNorm().multiply(v2.getNorm()); [EOL]     if (normProduct.getReal() == 0) { [EOL]         throw new MathArithmeticException(LocalizedFormats.ZERO_NORM); [EOL]     } [EOL]     final T dot = dotProduct(v1, v2); [EOL]     final double threshold = normProduct.getReal() * 0.9999; [EOL]     if ((dot.getReal() < -threshold) || (dot.getReal() > threshold)) { [EOL]         FieldVector3D<T> v3 = crossProduct(v1, v2); [EOL]         if (dot.getReal() >= 0) { [EOL]             return v3.getNorm().divide(normProduct).asin(); [EOL]         } [EOL]         return v3.getNorm().divide(normProduct).asin().subtract(FastMath.PI).negate(); [EOL]     } [EOL]     return dot.divide(normProduct).acos(); [EOL] } <line_num>: 578,600
public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException { [EOL]     final T normProduct = v1.getNorm().multiply(v2.getNorm()); [EOL]     if (normProduct.getReal() == 0) { [EOL]         throw new MathArithmeticException(LocalizedFormats.ZERO_NORM); [EOL]     } [EOL]     final T dot = dotProduct(v1, v2); [EOL]     final double threshold = normProduct.getReal() * 0.9999; [EOL]     if ((dot.getReal() < -threshold) || (dot.getReal() > threshold)) { [EOL]         FieldVector3D<T> v3 = crossProduct(v1, v2); [EOL]         if (dot.getReal() >= 0) { [EOL]             return v3.getNorm().divide(normProduct).asin(); [EOL]         } [EOL]         return v3.getNorm().divide(normProduct).asin().subtract(FastMath.PI).negate(); [EOL]     } [EOL]     return dot.divide(normProduct).acos(); [EOL] } <line_num>: 614,636
public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException { [EOL]     return angle(v2, v1); [EOL] } <line_num>: 650,653
public FieldVector3D<T> negate() { [EOL]     return new FieldVector3D<T>(x.negate(), y.negate(), z.negate()); [EOL] } <line_num>: 658,660
public FieldVector3D<T> scalarMultiply(final T a) { [EOL]     return new FieldVector3D<T>(x.multiply(a), y.multiply(a), z.multiply(a)); [EOL] } <line_num>: 666,668
public FieldVector3D<T> scalarMultiply(final double a) { [EOL]     return new FieldVector3D<T>(x.multiply(a), y.multiply(a), z.multiply(a)); [EOL] } <line_num>: 674,676
public boolean isNaN() { [EOL]     return Double.isNaN(x.getReal()) || Double.isNaN(y.getReal()) || Double.isNaN(z.getReal()); [EOL] } <line_num>: 682,684
public boolean isInfinite() { [EOL]     return !isNaN() && (Double.isInfinite(x.getReal()) || Double.isInfinite(y.getReal()) || Double.isInfinite(z.getReal())); [EOL] } <line_num>: 692,694
@Override [EOL] public boolean equals(Object other) { [EOL]     if (this == other) { [EOL]         return true; [EOL]     } [EOL]     if (other instanceof FieldVector3D) { [EOL]         @SuppressWarnings("unchecked") [EOL]         final FieldVector3D<T> rhs = (FieldVector3D<T>) other; [EOL]         if (rhs.isNaN()) { [EOL]             return this.isNaN(); [EOL]         } [EOL]         return x.equals(rhs.x) && y.equals(rhs.y) && z.equals(rhs.z); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 715,733
@Override [EOL] public int hashCode() { [EOL]     if (isNaN()) { [EOL]         return 409; [EOL]     } [EOL]     return 311 * (107 * x.hashCode() + 83 * y.hashCode() + z.hashCode()); [EOL] } <line_num>: 742,748
public T dotProduct(final FieldVector3D<T> v) { [EOL]     return x.linearCombination(x, v.x, y, v.y, z, v.z); [EOL] } <line_num>: 760,762
public T dotProduct(final Vector3D v) { [EOL]     return x.linearCombination(v.getX(), x, v.getY(), y, v.getZ(), z); [EOL] } <line_num>: 774,776
public FieldVector3D<T> crossProduct(final FieldVector3D<T> v) { [EOL]     return new FieldVector3D<T>(x.linearCombination(y, v.z, z.negate(), v.y), y.linearCombination(z, v.x, x.negate(), v.z), z.linearCombination(x, v.y, y.negate(), v.x)); [EOL] } <line_num>: 782,786
public FieldVector3D<T> crossProduct(final Vector3D v) { [EOL]     return new FieldVector3D<T>(x.linearCombination(v.getZ(), y, -v.getY(), z), y.linearCombination(v.getX(), z, -v.getZ(), x), z.linearCombination(v.getY(), x, -v.getX(), y)); [EOL] } <line_num>: 792,796
public T distance1(final FieldVector3D<T> v) { [EOL]     final T dx = v.x.subtract(x).abs(); [EOL]     final T dy = v.y.subtract(y).abs(); [EOL]     final T dz = v.z.subtract(z).abs(); [EOL]     return dx.add(dy).add(dz); [EOL] } <line_num>: 805,810
public T distance1(final Vector3D v) { [EOL]     final T dx = x.subtract(v.getX()).abs(); [EOL]     final T dy = y.subtract(v.getY()).abs(); [EOL]     final T dz = z.subtract(v.getZ()).abs(); [EOL]     return dx.add(dy).add(dz); [EOL] } <line_num>: 819,824
public T distance(final FieldVector3D<T> v) { [EOL]     final T dx = v.x.subtract(x); [EOL]     final T dy = v.y.subtract(y); [EOL]     final T dz = v.z.subtract(z); [EOL]     return dx.multiply(dx).add(dy.multiply(dy)).add(dz.multiply(dz)).sqrt(); [EOL] } <line_num>: 833,838
public T distance(final Vector3D v) { [EOL]     final T dx = x.subtract(v.getX()); [EOL]     final T dy = y.subtract(v.getY()); [EOL]     final T dz = z.subtract(v.getZ()); [EOL]     return dx.multiply(dx).add(dy.multiply(dy)).add(dz.multiply(dz)).sqrt(); [EOL] } <line_num>: 847,852
public T distanceInf(final FieldVector3D<T> v) { [EOL]     final T dx = v.x.subtract(x).abs(); [EOL]     final T dy = v.y.subtract(y).abs(); [EOL]     final T dz = v.z.subtract(z).abs(); [EOL]     if (dx.getReal() <= dy.getReal()) { [EOL]         if (dy.getReal() <= dz.getReal()) { [EOL]             return dz; [EOL]         } else { [EOL]             return dy; [EOL]         } [EOL]     } else { [EOL]         if (dx.getReal() <= dz.getReal()) { [EOL]             return dz; [EOL]         } else { [EOL]             return dx; [EOL]         } [EOL]     } [EOL] } <line_num>: 861,878
public T distanceInf(final Vector3D v) { [EOL]     final T dx = x.subtract(v.getX()).abs(); [EOL]     final T dy = y.subtract(v.getY()).abs(); [EOL]     final T dz = z.subtract(v.getZ()).abs(); [EOL]     if (dx.getReal() <= dy.getReal()) { [EOL]         if (dy.getReal() <= dz.getReal()) { [EOL]             return dz; [EOL]         } else { [EOL]             return dy; [EOL]         } [EOL]     } else { [EOL]         if (dx.getReal() <= dz.getReal()) { [EOL]             return dz; [EOL]         } else { [EOL]             return dx; [EOL]         } [EOL]     } [EOL] } <line_num>: 887,904
public T distanceSq(final FieldVector3D<T> v) { [EOL]     final T dx = v.x.subtract(x); [EOL]     final T dy = v.y.subtract(y); [EOL]     final T dz = v.z.subtract(z); [EOL]     return dx.multiply(dx).add(dy.multiply(dy)).add(dz.multiply(dz)); [EOL] } <line_num>: 913,918
public T distanceSq(final Vector3D v) { [EOL]     final T dx = x.subtract(v.getX()); [EOL]     final T dy = y.subtract(v.getY()); [EOL]     final T dz = z.subtract(v.getZ()); [EOL]     return dx.multiply(dx).add(dy.multiply(dy)).add(dz.multiply(dz)); [EOL] } <line_num>: 927,932
public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2) { [EOL]     return v1.dotProduct(v2); [EOL] } <line_num>: 940,943
public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2) { [EOL]     return v1.dotProduct(v2); [EOL] } <line_num>: 951,954
public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2) { [EOL]     return v2.dotProduct(v1); [EOL] } <line_num>: 962,965
public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2) { [EOL]     return v1.crossProduct(v2); [EOL] } <line_num>: 973,976
public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2) { [EOL]     return v1.crossProduct(v2); [EOL] } <line_num>: 984,987
public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2) { [EOL]     return new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y), v2.y.linearCombination(v1.getZ(), v2.x, -v1.getX(), v2.z), v2.z.linearCombination(v1.getX(), v2.y, -v1.getY(), v2.x)); [EOL] } <line_num>: 995,1000
public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2) { [EOL]     return v1.distance1(v2); [EOL] } <line_num>: 1011,1014
public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2) { [EOL]     return v1.distance1(v2); [EOL] } <line_num>: 1025,1028
public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2) { [EOL]     return v2.distance1(v1); [EOL] } <line_num>: 1039,1042
public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2) { [EOL]     return v1.distance(v2); [EOL] } <line_num>: 1053,1056
public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2) { [EOL]     return v1.distance(v2); [EOL] } <line_num>: 1067,1070
public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2) { [EOL]     return v2.distance(v1); [EOL] } <line_num>: 1081,1084
public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2) { [EOL]     return v1.distanceInf(v2); [EOL] } <line_num>: 1095,1098
public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2) { [EOL]     return v1.distanceInf(v2); [EOL] } <line_num>: 1109,1112
public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2) { [EOL]     return v2.distanceInf(v1); [EOL] } <line_num>: 1123,1126
public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2) { [EOL]     return v1.distanceSq(v2); [EOL] } <line_num>: 1137,1140
public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2) { [EOL]     return v1.distanceSq(v2); [EOL] } <line_num>: 1151,1154
public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2) { [EOL]     return v2.distanceSq(v1); [EOL] } <line_num>: 1165,1168
@Override [EOL] public String toString() { [EOL]     return Vector3DFormat.getInstance().format(toVector3D()); [EOL] } <line_num>: 1173,1176
public String toString(final NumberFormat format) { [EOL]     return new Vector3DFormat(format).format(toVector3D()); [EOL] } <line_num>: 1182,1184
