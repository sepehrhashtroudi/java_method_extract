public TheoreticalValuesFunction(final ParametricUnivariateFunction f, final Collection<WeightedObservedPoint> observations) { [EOL]     this.f = f; [EOL]     final int len = observations.size(); [EOL]     this.points = new double[len]; [EOL]     int i = 0; [EOL]     for (WeightedObservedPoint obs : observations) { [EOL]         this.points[i++] = obs.getX(); [EOL]     } [EOL] } <line_num>: 89,99
public double[] fit(Collection<WeightedObservedPoint> points) { [EOL]     return getOptimizer(points).optimize().getPoint(); [EOL] } <line_num>: 62,65
protected abstract OPTIM getOptimizer(Collection<WeightedObservedPoint> points); <line_num>: 74,74
public double[] value(double[] p) { [EOL]     final int len = points.length; [EOL]     final double[] values = new double[len]; [EOL]     for (int i = 0; i < len; i++) { [EOL]         values[i] = f.value(points[i], p); [EOL]     } [EOL]     return values; [EOL] } <line_num>: 107,115
public MultivariateVectorFunction getModelFunction() { [EOL]     return new MultivariateVectorFunction() { [EOL]  [EOL]         public double[] value(double[] p) { [EOL]             final int len = points.length; [EOL]             final double[] values = new double[len]; [EOL]             for (int i = 0; i < len; i++) { [EOL]                 values[i] = f.value(points[i], p); [EOL]             } [EOL]             return values; [EOL]         } [EOL]     }; [EOL] } <line_num>: 104,117
public double[][] value(double[] p) { [EOL]     final int len = points.length; [EOL]     final double[][] jacobian = new double[len][]; [EOL]     for (int i = 0; i < len; i++) { [EOL]         jacobian[i] = f.gradient(points[i], p); [EOL]     } [EOL]     return jacobian; [EOL] } <line_num>: 124,131
public MultivariateMatrixFunction getModelFunctionJacobian() { [EOL]     return new MultivariateMatrixFunction() { [EOL]  [EOL]         public double[][] value(double[] p) { [EOL]             final int len = points.length; [EOL]             final double[][] jacobian = new double[len][]; [EOL]             for (int i = 0; i < len; i++) { [EOL]                 jacobian[i] = f.gradient(points[i], p); [EOL]             } [EOL]             return jacobian; [EOL]         } [EOL]     }; [EOL] } <line_num>: 122,133
