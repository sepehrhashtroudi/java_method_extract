protected AbstractLeastSquaresOptimizer() { [EOL] } <line_num>: 64,64
protected AbstractLeastSquaresOptimizer(AbstractLeastSquaresOptimizer other) { [EOL]     super(other); [EOL]     target = other.target == null ? null : other.target.clone(); [EOL]     start = other.start == null ? null : other.start.clone(); [EOL]     weight = other.weight == null ? null : other.weight.copy(); [EOL]     weightSqrt = other.weightSqrt == null ? null : other.weightSqrt.copy(); [EOL]     model = other.model; [EOL]     jacobian = other.jacobian; [EOL] } <line_num>: 71,80
public OPTIM withTarget(double[] newTarget) { [EOL]     this.target = newTarget.clone(); [EOL]     return self(); [EOL] } <line_num>: 83,86
public OPTIM withWeight(RealMatrix newWeight) { [EOL]     this.weight = newWeight; [EOL]     weightSqrt = squareRoot(newWeight); [EOL]     return self(); [EOL] } <line_num>: 89,93
public OPTIM withModelAndJacobian(MultivariateVectorFunction newModel, MultivariateMatrixFunction newJacobian) { [EOL]     this.model = newModel; [EOL]     this.jacobian = newJacobian; [EOL]     return self(); [EOL] } <line_num>: 96,101
public OPTIM withStartPoint(double[] newStart) { [EOL]     this.start = newStart.clone(); [EOL]     return self(); [EOL] } <line_num>: 104,107
public double[] getTarget() { [EOL]     return target == null ? null : target.clone(); [EOL] } <line_num>: 114,116
public double[] getStart() { [EOL]     return start == null ? null : start.clone(); [EOL] } <line_num>: 123,125
public RealMatrix getWeightSquareRoot() { [EOL]     return weightSqrt == null ? null : weightSqrt.copy(); [EOL] } <line_num>: 132,134
public MultivariateVectorFunction getModel() { [EOL]     return model; [EOL] } <line_num>: 141,143
public MultivariateMatrixFunction getJacobian() { [EOL]     return jacobian; [EOL] } <line_num>: 150,152
public double[][] computeCovariances(double[] params, double threshold) { [EOL]     final RealMatrix j = computeWeightedJacobian(params); [EOL]     final RealMatrix jTj = j.transpose().multiply(j); [EOL]     final DecompositionSolver solver = new QRDecomposition(jTj, threshold).getSolver(); [EOL]     return solver.getInverse().getData(); [EOL] } <line_num>: 170,182
public double[] computeSigma(double[] params, double covarianceSingularityThreshold) { [EOL]     final int nC = params.length; [EOL]     final double[] sig = new double[nC]; [EOL]     final double[][] cov = computeCovariances(params, covarianceSingularityThreshold); [EOL]     for (int i = 0; i < nC; ++i) { [EOL]         sig[i] = FastMath.sqrt(cov[i][i]); [EOL]     } [EOL]     return sig; [EOL] } <line_num>: 198,207
public RealMatrix getWeight() { [EOL]     return weight.copy(); [EOL] } <line_num>: 214,216
public double computeRMS(double[] params) { [EOL]     final double cost = computeCost(computeResiduals(getModel().value(params))); [EOL]     return FastMath.sqrt(cost * cost / target.length); [EOL] } <line_num>: 226,229
protected double[] computeObjectiveValue(double[] params) { [EOL]     super.incrementEvaluationCount(); [EOL]     return model.value(params); [EOL] } <line_num>: 242,245
protected RealMatrix computeWeightedJacobian(double[] params) { [EOL]     return weightSqrt.multiply(MatrixUtils.createRealMatrix(computeJacobian(params))); [EOL] } <line_num>: 255,257
protected double[][] computeJacobian(final double[] params) { [EOL]     return jacobian.value(params); [EOL] } <line_num>: 265,267
protected double computeCost(double[] residuals) { [EOL]     final ArrayRealVector r = new ArrayRealVector(residuals); [EOL]     return FastMath.sqrt(r.dotProduct(weight.operate(r))); [EOL] } <line_num>: 276,279
protected double[] computeResiduals(double[] objectiveValue) { [EOL]     if (objectiveValue.length != target.length) { [EOL]         throw new DimensionMismatchException(target.length, objectiveValue.length); [EOL]     } [EOL]     final double[] residuals = new double[target.length]; [EOL]     for (int i = 0; i < target.length; i++) { [EOL]         residuals[i] = target[i] - objectiveValue[i]; [EOL]     } [EOL]     return residuals; [EOL] } <line_num>: 296,308
private RealMatrix squareRoot(RealMatrix m) { [EOL]     if (m instanceof DiagonalMatrix) { [EOL]         final int dim = m.getRowDimension(); [EOL]         final RealMatrix sqrtM = new DiagonalMatrix(dim); [EOL]         for (int i = 0; i < dim; i++) { [EOL]             sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i))); [EOL]         } [EOL]         return sqrtM; [EOL]     } else { [EOL]         final EigenDecomposition dec = new EigenDecomposition(m); [EOL]         return dec.getSquareRoot(); [EOL]     } [EOL] } <line_num>: 316,328
