public CurveFitter(final MultivariateVectorOptimizer optimizer) { [EOL]     this.optimizer = optimizer; [EOL]     observations = new ArrayList<WeightedObservedPoint>(); [EOL] } <line_num>: 66,69
public TheoreticalValuesFunction(final ParametricUnivariateFunction f) { [EOL]     this.f = f; [EOL] } <line_num>: 194,196
public void addObservedPoint(double x, double y) { [EOL]     addObservedPoint(1.0, x, y); [EOL] } <line_num>: 81,83
public void addObservedPoint(double weight, double x, double y) { [EOL]     observations.add(new WeightedObservedPoint(weight, x, y)); [EOL] } <line_num>: 94,96
public void addObservedPoint(WeightedObservedPoint observed) { [EOL]     observations.add(observed); [EOL] } <line_num>: 104,106
public WeightedObservedPoint[] getObservations() { [EOL]     return observations.toArray(new WeightedObservedPoint[observations.size()]); [EOL] } <line_num>: 114,116
public void clearObservations() { [EOL]     observations.clear(); [EOL] } <line_num>: 121,123
public double[] fit(T f, final double[] initialGuess) { [EOL]     return fit(Integer.MAX_VALUE, f, initialGuess); [EOL] } <line_num>: 138,140
public double[] fit(int maxEval, T f, final double[] initialGuess) { [EOL]     double[] target = new double[observations.size()]; [EOL]     double[] weights = new double[observations.size()]; [EOL]     int i = 0; [EOL]     for (WeightedObservedPoint point : observations) { [EOL]         target[i] = point.getY(); [EOL]         weights[i] = point.getWeight(); [EOL]         ++i; [EOL]     } [EOL]     final TheoreticalValuesFunction model = new TheoreticalValuesFunction(f); [EOL]     final PointVectorValuePair optimum = optimizer.optimize(new MaxEval(maxEval), model.getModelFunction(), model.getModelFunctionJacobian(), new Target(target), new Weight(weights), new InitialGuess(initialGuess)); [EOL]     return optimum.getPointRef(); [EOL] } <line_num>: 159,184
public double[] value(double[] point) { [EOL]     final double[] values = new double[observations.size()]; [EOL]     int i = 0; [EOL]     for (WeightedObservedPoint observed : observations) { [EOL]         values[i++] = f.value(observed.getX(), point); [EOL]     } [EOL]     return values; [EOL] } <line_num>: 204,213
public ModelFunction getModelFunction() { [EOL]     return new ModelFunction(new MultivariateVectorFunction() { [EOL]  [EOL]         public double[] value(double[] point) { [EOL]             final double[] values = new double[observations.size()]; [EOL]             int i = 0; [EOL]             for (WeightedObservedPoint observed : observations) { [EOL]                 values[i++] = f.value(observed.getX(), point); [EOL]             } [EOL]             return values; [EOL]         } [EOL]     }); [EOL] } <line_num>: 201,215
public double[][] value(double[] point) { [EOL]     final double[][] jacobian = new double[observations.size()][]; [EOL]     int i = 0; [EOL]     for (WeightedObservedPoint observed : observations) { [EOL]         jacobian[i++] = f.gradient(observed.getX(), point); [EOL]     } [EOL]     return jacobian; [EOL] } <line_num>: 222,229
public ModelFunctionJacobian getModelFunctionJacobian() { [EOL]     return new ModelFunctionJacobian(new MultivariateMatrixFunction() { [EOL]  [EOL]         public double[][] value(double[] point) { [EOL]             final double[][] jacobian = new double[observations.size()][]; [EOL]             int i = 0; [EOL]             for (WeightedObservedPoint observed : observations) { [EOL]                 jacobian[i++] = f.gradient(observed.getX(), point); [EOL]             } [EOL]             return jacobian; [EOL]         } [EOL]     }); [EOL] } <line_num>: 220,231
