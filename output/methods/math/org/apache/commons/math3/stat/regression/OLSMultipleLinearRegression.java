public void newSampleData(double[] y, double[][] x) throws MathIllegalArgumentException { [EOL]     validateSampleData(x, y); [EOL]     newYSampleData(y); [EOL]     newXSampleData(x); [EOL] } <line_num>: 69,73
@Override [EOL] public void newSampleData(double[] data, int nobs, int nvars) { [EOL]     super.newSampleData(data, nobs, nvars); [EOL]     qr = new QRDecomposition(getX()); [EOL] } <line_num>: 79,83
public RealMatrix calculateHat() { [EOL]     RealMatrix Q = qr.getQ(); [EOL]     final int p = qr.getR().getColumnDimension(); [EOL]     final int n = Q.getColumnDimension(); [EOL]     Array2DRowRealMatrix augI = new Array2DRowRealMatrix(n, n); [EOL]     double[][] augIData = augI.getDataRef(); [EOL]     for (int i = 0; i < n; i++) { [EOL]         for (int j = 0; j < n; j++) { [EOL]             if (i == j && i < p) { [EOL]                 augIData[i][j] = 1d; [EOL]             } else { [EOL]                 augIData[i][j] = 0d; [EOL]             } [EOL]         } [EOL]     } [EOL]     return Q.multiply(augI).multiply(Q.transpose()); [EOL] } <line_num>: 104,125
public double calculateTotalSumOfSquares() throws MathIllegalArgumentException { [EOL]     if (isNoIntercept()) { [EOL]         return StatUtils.sumSq(getY().toArray()); [EOL]     } else { [EOL]         return new SecondMoment().evaluate(getY().toArray()); [EOL]     } [EOL] } <line_num>: 142,148
public double calculateResidualSumOfSquares() { [EOL]     final RealVector residuals = calculateResiduals(); [EOL]     return residuals.dotProduct(residuals); [EOL] } <line_num>: 156,160
public double calculateRSquared() throws MathIllegalArgumentException { [EOL]     return 1 - calculateResidualSumOfSquares() / calculateTotalSumOfSquares(); [EOL] } <line_num>: 174,176
public double calculateAdjustedRSquared() throws MathIllegalArgumentException { [EOL]     final double n = getX().getRowDimension(); [EOL]     if (isNoIntercept()) { [EOL]         return 1 - (1 - calculateRSquared()) * (n / (n - getX().getColumnDimension())); [EOL]     } else { [EOL]         return 1 - (calculateResidualSumOfSquares() * (n - 1)) / (calculateTotalSumOfSquares() * (n - getX().getColumnDimension())); [EOL]     } [EOL] } <line_num>: 196,204
@Override [EOL] protected void newXSampleData(double[][] x) { [EOL]     super.newXSampleData(x); [EOL]     qr = new QRDecomposition(getX()); [EOL] } <line_num>: 211,215
@Override [EOL] protected RealVector calculateBeta() { [EOL]     return qr.getSolver().solve(getY()); [EOL] } <line_num>: 226,229
@Override [EOL] protected RealMatrix calculateBetaVariance() { [EOL]     int p = getX().getColumnDimension(); [EOL]     RealMatrix Raug = qr.getR().getSubMatrix(0, p - 1, 0, p - 1); [EOL]     RealMatrix Rinv = new LUDecomposition(Raug).getSolver().getInverse(); [EOL]     return Rinv.multiply(Rinv.transpose()); [EOL] } <line_num>: 246,252
