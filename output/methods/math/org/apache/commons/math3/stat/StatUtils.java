private StatUtils() { [EOL] } <line_num>: 82,83
public static double sum(final double[] values) throws MathIllegalArgumentException { [EOL]     return SUM.evaluate(values); [EOL] } <line_num>: 97,100
public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException { [EOL]     return SUM.evaluate(values, begin, length); [EOL] } <line_num>: 116,119
public static double sumSq(final double[] values) throws MathIllegalArgumentException { [EOL]     return SUM_OF_SQUARES.evaluate(values); [EOL] } <line_num>: 132,134
public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException { [EOL]     return SUM_OF_SQUARES.evaluate(values, begin, length); [EOL] } <line_num>: 150,153
public static double product(final double[] values) throws MathIllegalArgumentException { [EOL]     return PRODUCT.evaluate(values); [EOL] } <line_num>: 165,168
public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException { [EOL]     return PRODUCT.evaluate(values, begin, length); [EOL] } <line_num>: 184,187
public static double sumLog(final double[] values) throws MathIllegalArgumentException { [EOL]     return SUM_OF_LOGS.evaluate(values); [EOL] } <line_num>: 203,206
public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException { [EOL]     return SUM_OF_LOGS.evaluate(values, begin, length); [EOL] } <line_num>: 226,229
public static double mean(final double[] values) throws MathIllegalArgumentException { [EOL]     return MEAN.evaluate(values); [EOL] } <line_num>: 244,247
public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException { [EOL]     return MEAN.evaluate(values, begin, length); [EOL] } <line_num>: 266,269
public static double geometricMean(final double[] values) throws MathIllegalArgumentException { [EOL]     return GEOMETRIC_MEAN.evaluate(values); [EOL] } <line_num>: 284,287
public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException { [EOL]     return GEOMETRIC_MEAN.evaluate(values, begin, length); [EOL] } <line_num>: 306,309
public static double variance(final double[] values) throws MathIllegalArgumentException { [EOL]     return VARIANCE.evaluate(values); [EOL] } <line_num>: 331,333
public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException { [EOL]     return VARIANCE.evaluate(values, begin, length); [EOL] } <line_num>: 359,362
public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException { [EOL]     return VARIANCE.evaluate(values, mean, begin, length); [EOL] } <line_num>: 394,397
public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException { [EOL]     return VARIANCE.evaluate(values, mean); [EOL] } <line_num>: 425,428
public static double populationVariance(final double[] values) throws MathIllegalArgumentException { [EOL]     return new Variance(false).evaluate(values); [EOL] } <line_num>: 446,449
public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException { [EOL]     return new Variance(false).evaluate(values, begin, length); [EOL] } <line_num>: 472,475
public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException { [EOL]     return new Variance(false).evaluate(values, mean, begin, length); [EOL] } <line_num>: 504,507
public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException { [EOL]     return new Variance(false).evaluate(values, mean); [EOL] } <line_num>: 532,535
public static double max(final double[] values) throws MathIllegalArgumentException { [EOL]     return MAX.evaluate(values); [EOL] } <line_num>: 554,556
public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException { [EOL]     return MAX.evaluate(values, begin, length); [EOL] } <line_num>: 580,583
public static double min(final double[] values) throws MathIllegalArgumentException { [EOL]     return MIN.evaluate(values); [EOL] } <line_num>: 602,604
public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException { [EOL]     return MIN.evaluate(values, begin, length); [EOL] } <line_num>: 628,631
public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException { [EOL]     return PERCENTILE.evaluate(values, p); [EOL] } <line_num>: 656,659
public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException { [EOL]     return PERCENTILE.evaluate(values, begin, length, p); [EOL] } <line_num>: 688,691
public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException { [EOL]     int n = sample1.length; [EOL]     if (n != sample2.length) { [EOL]         throw new DimensionMismatchException(n, sample2.length); [EOL]     } [EOL]     if (n <= 0) { [EOL]         throw new NoDataException(LocalizedFormats.INSUFFICIENT_DIMENSION); [EOL]     } [EOL]     double result = 0; [EOL]     for (int i = 0; i < n; i++) { [EOL]         result += sample1[i] - sample2[i]; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 704,718
public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException { [EOL]     return sumDifference(sample1, sample2) / sample1.length; [EOL] } <line_num>: 731,734
public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException { [EOL]     double sum1 = 0d; [EOL]     double sum2 = 0d; [EOL]     double diff = 0d; [EOL]     int n = sample1.length; [EOL]     if (n != sample2.length) { [EOL]         throw new DimensionMismatchException(n, sample2.length); [EOL]     } [EOL]     if (n < 2) { [EOL]         throw new NumberIsTooSmallException(n, 2, true); [EOL]     } [EOL]     for (int i = 0; i < n; i++) { [EOL]         diff = sample1[i] - sample2[i]; [EOL]         sum1 += (diff - meanDifference) * (diff - meanDifference); [EOL]         sum2 += diff - meanDifference; [EOL]     } [EOL]     return (sum1 - (sum2 * sum2 / n)) / (n - 1); [EOL] } <line_num>: 749,768
public static double[] normalize(final double[] sample) { [EOL]     DescriptiveStatistics stats = new DescriptiveStatistics(); [EOL]     for (int i = 0; i < sample.length; i++) { [EOL]         stats.addValue(sample[i]); [EOL]     } [EOL]     double mean = stats.getMean(); [EOL]     double standardDeviation = stats.getStandardDeviation(); [EOL]     double[] standardizedSample = new double[sample.length]; [EOL]     for (int i = 0; i < sample.length; i++) { [EOL]         standardizedSample[i] = (sample[i] - mean) / standardDeviation; [EOL]     } [EOL]     return standardizedSample; [EOL] } <line_num>: 777,797
public static double[] mode(double[] sample) throws MathIllegalArgumentException { [EOL]     if (sample == null) { [EOL]         throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY); [EOL]     } [EOL]     return getMode(sample, 0, sample.length); [EOL] } <line_num>: 817,822
public static double[] mode(double[] sample, final int begin, final int length) { [EOL]     if (sample == null) { [EOL]         throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY); [EOL]     } [EOL]     if (begin < 0) { [EOL]         throw new NotPositiveException(LocalizedFormats.START_POSITION, Integer.valueOf(begin)); [EOL]     } [EOL]     if (length < 0) { [EOL]         throw new NotPositiveException(LocalizedFormats.LENGTH, Integer.valueOf(length)); [EOL]     } [EOL]     return getMode(sample, begin, length); [EOL] } <line_num>: 845,859
private static double[] getMode(double[] values, final int begin, final int length) { [EOL]     Frequency freq = new Frequency(); [EOL]     for (int i = begin; i < begin + length; i++) { [EOL]         final double value = values[i]; [EOL]         if (!Double.isNaN(value)) { [EOL]             freq.addValue(Double.valueOf(value)); [EOL]         } [EOL]     } [EOL]     List<Comparable<?>> list = freq.getMode(); [EOL]     double[] modes = new double[list.size()]; [EOL]     int i = 0; [EOL]     for (Comparable<?> c : list) { [EOL]         modes[i++] = ((Double) c).doubleValue(); [EOL]     } [EOL]     return modes; [EOL] } <line_num>: 869,886
