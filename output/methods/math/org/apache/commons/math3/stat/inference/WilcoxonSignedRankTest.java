public WilcoxonSignedRankTest() { [EOL]     naturalRanking = new NaturalRanking(NaNStrategy.FIXED, TiesStrategy.AVERAGE); [EOL] } <line_num>: 46,49
public WilcoxonSignedRankTest(final NaNStrategy nanStrategy, final TiesStrategy tiesStrategy) { [EOL]     naturalRanking = new NaturalRanking(nanStrategy, tiesStrategy); [EOL] } <line_num>: 60,63
private void ensureDataConformance(final double[] x, final double[] y) throws NullArgumentException, NoDataException, DimensionMismatchException { [EOL]     if (x == null || y == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     if (x.length == 0 || y.length == 0) { [EOL]         throw new NoDataException(); [EOL]     } [EOL]     if (y.length != x.length) { [EOL]         throw new DimensionMismatchException(y.length, x.length); [EOL]     } [EOL] } <line_num>: 75,89
private double[] calculateDifferences(final double[] x, final double[] y) { [EOL]     final double[] z = new double[x.length]; [EOL]     for (int i = 0; i < x.length; ++i) { [EOL]         z[i] = y[i] - x[i]; [EOL]     } [EOL]     return z; [EOL] } <line_num>: 98,107
private double[] calculateAbsoluteDifferences(final double[] z) throws NullArgumentException, NoDataException { [EOL]     if (z == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     if (z.length == 0) { [EOL]         throw new NoDataException(); [EOL]     } [EOL]     final double[] zAbs = new double[z.length]; [EOL]     for (int i = 0; i < z.length; ++i) { [EOL]         zAbs[i] = FastMath.abs(z[i]); [EOL]     } [EOL]     return zAbs; [EOL] } <line_num>: 117,135
public double wilcoxonSignedRank(final double[] x, final double[] y) throws NullArgumentException, NoDataException, DimensionMismatchException { [EOL]     ensureDataConformance(x, y); [EOL]     final double[] z = calculateDifferences(x, y); [EOL]     final double[] zAbs = calculateAbsoluteDifferences(z); [EOL]     final double[] ranks = naturalRanking.rank(zAbs); [EOL]     double Wplus = 0; [EOL]     for (int i = 0; i < z.length; ++i) { [EOL]         if (z[i] > 0) { [EOL]             Wplus += ranks[i]; [EOL]         } [EOL]     } [EOL]     final int N = x.length; [EOL]     final double Wminus = (((double) (N * (N + 1))) / 2.0) - Wplus; [EOL]     return FastMath.max(Wplus, Wminus); [EOL] } <line_num>: 172,196
private double calculateExactPValue(final double Wmax, final int N) { [EOL]     final int m = 1 << N; [EOL]     int largerRankSums = 0; [EOL]     for (int i = 0; i < m; ++i) { [EOL]         int rankSum = 0; [EOL]         for (int j = 0; j < N; ++j) { [EOL]             if (((i >> j) & 1) == 1) { [EOL]                 rankSum += j + 1; [EOL]             } [EOL]         } [EOL]         if (rankSum >= Wmax) { [EOL]             ++largerRankSums; [EOL]         } [EOL]     } [EOL]     return 2 * ((double) largerRankSums) / ((double) m); [EOL] } <line_num>: 208,237
private double calculateAsymptoticPValue(final double Wmin, final int N) { [EOL]     final double ES = (double) (N * (N + 1)) / 4.0; [EOL]     final double VarS = ES * ((double) (2 * N + 1) / 6.0); [EOL]     final double z = (Wmin - ES - 0.5) / FastMath.sqrt(VarS); [EOL]     final NormalDistribution standardNormal = new NormalDistribution(0, 1); [EOL]     return 2 * standardNormal.cumulativeProbability(z); [EOL] } <line_num>: 244,260
public double wilcoxonSignedRankTest(final double[] x, final double[] y, final boolean exactPValue) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooLargeException, ConvergenceException, MaxCountExceededException { [EOL]     ensureDataConformance(x, y); [EOL]     final int N = x.length; [EOL]     final double Wmax = wilcoxonSignedRank(x, y); [EOL]     if (exactPValue && N > 30) { [EOL]         throw new NumberIsTooLargeException(N, 30, true); [EOL]     } [EOL]     if (exactPValue) { [EOL]         return calculateExactPValue(Wmax, N); [EOL]     } else { [EOL]         final double Wmin = ((double) (N * (N + 1)) / 2.0) - Wmax; [EOL]         return calculateAsymptoticPValue(Wmin, N); [EOL]     } [EOL] } <line_num>: 304,324
