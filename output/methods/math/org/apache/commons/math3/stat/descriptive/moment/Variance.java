public Variance() { [EOL]     moment = new SecondMoment(); [EOL] } <line_num>: 98,100
public Variance(final SecondMoment m2) { [EOL]     incMoment = false; [EOL]     this.moment = m2; [EOL] } <line_num>: 112,115
public Variance(boolean isBiasCorrected) { [EOL]     moment = new SecondMoment(); [EOL]     this.isBiasCorrected = isBiasCorrected; [EOL] } <line_num>: 125,128
public Variance(boolean isBiasCorrected, SecondMoment m2) { [EOL]     incMoment = false; [EOL]     this.moment = m2; [EOL]     this.isBiasCorrected = isBiasCorrected; [EOL] } <line_num>: 139,143
public Variance(Variance original) throws NullArgumentException { [EOL]     copy(original, this); [EOL] } <line_num>: 152,154
@Override [EOL] public void increment(final double d) { [EOL]     if (incMoment) { [EOL]         moment.increment(d); [EOL]     } [EOL] } <line_num>: 169,174
@Override [EOL] public double getResult() { [EOL]     if (moment.n == 0) { [EOL]         return Double.NaN; [EOL]     } else if (moment.n == 1) { [EOL]         return 0d; [EOL]     } else { [EOL]         if (isBiasCorrected) { [EOL]             return moment.m2 / (moment.n - 1d); [EOL]         } else { [EOL]             return moment.m2 / (moment.n); [EOL]         } [EOL]     } [EOL] } <line_num>: 179,192
public long getN() { [EOL]     return moment.getN(); [EOL] } <line_num>: 197,199
@Override [EOL] public void clear() { [EOL]     if (incMoment) { [EOL]         moment.clear(); [EOL]     } [EOL] } <line_num>: 204,209
@Override [EOL] public double evaluate(final double[] values) throws MathIllegalArgumentException { [EOL]     if (values == null) { [EOL]         throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY); [EOL]     } [EOL]     return evaluate(values, 0, values.length); [EOL] } <line_num>: 227,233
@Override [EOL] public double evaluate(final double[] values, final int begin, final int length) throws MathIllegalArgumentException { [EOL]     double var = Double.NaN; [EOL]     if (test(values, begin, length)) { [EOL]         clear(); [EOL]         if (length == 1) { [EOL]             var = 0.0; [EOL]         } else if (length > 1) { [EOL]             Mean mean = new Mean(); [EOL]             double m = mean.evaluate(values, begin, length); [EOL]             var = evaluate(values, m, begin, length); [EOL]         } [EOL]     } [EOL]     return var; [EOL] } <line_num>: 255,272
public double evaluate(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException { [EOL]     double var = Double.NaN; [EOL]     if (test(values, weights, begin, length)) { [EOL]         clear(); [EOL]         if (length == 1) { [EOL]             var = 0.0; [EOL]         } else if (length > 1) { [EOL]             Mean mean = new Mean(); [EOL]             double m = mean.evaluate(values, weights, begin, length); [EOL]             var = evaluate(values, weights, m, begin, length); [EOL]         } [EOL]     } [EOL]     return var; [EOL] } <line_num>: 316,332
public double evaluate(final double[] values, final double[] weights) throws MathIllegalArgumentException { [EOL]     return evaluate(values, weights, 0, values.length); [EOL] } <line_num>: 372,375
public double evaluate(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException { [EOL]     double var = Double.NaN; [EOL]     if (test(values, begin, length)) { [EOL]         if (length == 1) { [EOL]             var = 0.0; [EOL]         } else if (length > 1) { [EOL]             double accum = 0.0; [EOL]             double dev = 0.0; [EOL]             double accum2 = 0.0; [EOL]             for (int i = begin; i < begin + length; i++) { [EOL]                 dev = values[i] - mean; [EOL]                 accum += dev * dev; [EOL]                 accum2 += dev; [EOL]             } [EOL]             double len = length; [EOL]             if (isBiasCorrected) { [EOL]                 var = (accum - (accum2 * accum2 / len)) / (len - 1.0); [EOL]             } else { [EOL]                 var = (accum - (accum2 * accum2 / len)) / len; [EOL]             } [EOL]         } [EOL]     } [EOL]     return var; [EOL] } <line_num>: 403,429
public double evaluate(final double[] values, final double mean) throws MathIllegalArgumentException { [EOL]     return evaluate(values, mean, 0, values.length); [EOL] } <line_num>: 456,458
public double evaluate(final double[] values, final double[] weights, final double mean, final int begin, final int length) throws MathIllegalArgumentException { [EOL]     double var = Double.NaN; [EOL]     if (test(values, weights, begin, length)) { [EOL]         if (length == 1) { [EOL]             var = 0.0; [EOL]         } else if (length > 1) { [EOL]             double accum = 0.0; [EOL]             double dev = 0.0; [EOL]             double accum2 = 0.0; [EOL]             for (int i = begin; i < begin + length; i++) { [EOL]                 dev = values[i] - mean; [EOL]                 accum += weights[i] * (dev * dev); [EOL]                 accum2 += weights[i] * dev; [EOL]             } [EOL]             double sumWts = 0; [EOL]             for (int i = begin; i < begin + length; i++) { [EOL]                 sumWts += weights[i]; [EOL]             } [EOL]             if (isBiasCorrected) { [EOL]                 var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0); [EOL]             } else { [EOL]                 var = (accum - (accum2 * accum2 / sumWts)) / sumWts; [EOL]             } [EOL]         } [EOL]     } [EOL]     return var; [EOL] } <line_num>: 505,537
public double evaluate(final double[] values, final double[] weights, final double mean) throws MathIllegalArgumentException { [EOL]     return evaluate(values, weights, mean, 0, values.length); [EOL] } <line_num>: 580,583
public boolean isBiasCorrected() { [EOL]     return isBiasCorrected; [EOL] } <line_num>: 588,590
public void setBiasCorrected(boolean biasCorrected) { [EOL]     this.isBiasCorrected = biasCorrected; [EOL] } <line_num>: 595,597
@Override [EOL] public Variance copy() { [EOL]     Variance result = new Variance(); [EOL]     copy(this, result); [EOL]     return result; [EOL] } <line_num>: 602,608
public static void copy(Variance source, Variance dest) throws NullArgumentException { [EOL]     MathUtils.checkNotNull(source); [EOL]     MathUtils.checkNotNull(dest); [EOL]     dest.setData(source.getDataRef()); [EOL]     dest.moment = source.moment.copy(); [EOL]     dest.isBiasCorrected = source.isBiasCorrected; [EOL]     dest.incMoment = source.incMoment; [EOL] } <line_num>: 618,626
