public StorelessBivariateCovariance() { [EOL]     this(true); [EOL] } <line_num>: 60,62
public StorelessBivariateCovariance(final boolean biasCorrection) { [EOL]     meanX = meanY = 0.0; [EOL]     n = 0; [EOL]     covarianceNumerator = 0.0; [EOL]     biasCorrected = biasCorrection; [EOL] } <line_num>: 71,76
public void increment(final double x, final double y) { [EOL]     n++; [EOL]     final double deltaX = x - meanX; [EOL]     final double deltaY = y - meanY; [EOL]     meanX += deltaX / n; [EOL]     meanY += deltaY / n; [EOL]     covarianceNumerator += ((n - 1.0) / n) * deltaX * deltaY; [EOL] } <line_num>: 84,91
public void append(StorelessBivariateCovariance cov) { [EOL]     double oldN = n; [EOL]     n += cov.n; [EOL]     final double deltaX = cov.meanX - meanX; [EOL]     final double deltaY = cov.meanY - meanY; [EOL]     meanX += deltaX * cov.n / n; [EOL]     meanY += deltaY * cov.n / n; [EOL]     covarianceNumerator += cov.covarianceNumerator + oldN * cov.n / n * deltaX * deltaY; [EOL] } <line_num>: 101,109
public double getN() { [EOL]     return n; [EOL] } <line_num>: 116,118
public double getResult() throws NumberIsTooSmallException { [EOL]     if (n < 2) { [EOL]         throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_DIMENSION, n, 2, true); [EOL]     } [EOL]     if (biasCorrected) { [EOL]         return covarianceNumerator / (n - 1d); [EOL]     } else { [EOL]         return covarianceNumerator / n; [EOL]     } [EOL] } <line_num>: 127,137
