public double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException { [EOL]     checkSampleData(sample1); [EOL]     checkSampleData(sample2); [EOL]     double meanDifference = StatUtils.meanDifference(sample1, sample2); [EOL]     return t(meanDifference, 0, StatUtils.varianceDifference(sample1, sample2, meanDifference), sample1.length); [EOL] } <line_num>: 81,92
public double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException { [EOL]     double meanDifference = StatUtils.meanDifference(sample1, sample2); [EOL]     return tTest(meanDifference, 0, StatUtils.varianceDifference(sample1, sample2, meanDifference), sample1.length); [EOL] } <line_num>: 130,139
public boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException { [EOL]     checkSignificanceLevel(alpha); [EOL]     return pairedTTest(sample1, sample2) < alpha; [EOL] } <line_num>: 177,185
public double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException { [EOL]     checkSampleData(observed); [EOL]     return t(StatUtils.mean(observed), mu, StatUtils.variance(observed), observed.length); [EOL] } <line_num>: 203,211
public double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException { [EOL]     checkSampleData(sampleStats); [EOL]     return t(sampleStats.getMean(), mu, sampleStats.getVariance(), sampleStats.getN()); [EOL] } <line_num>: 230,237
public double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException { [EOL]     checkSampleData(sample1); [EOL]     checkSampleData(sample2); [EOL]     return homoscedasticT(StatUtils.mean(sample1), StatUtils.mean(sample2), StatUtils.variance(sample1), StatUtils.variance(sample2), sample1.length, sample2.length); [EOL] } <line_num>: 273,283
public double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException { [EOL]     checkSampleData(sample1); [EOL]     checkSampleData(sample2); [EOL]     return t(StatUtils.mean(sample1), StatUtils.mean(sample2), StatUtils.variance(sample1), StatUtils.variance(sample2), sample1.length, sample2.length); [EOL] } <line_num>: 314,324
public double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException { [EOL]     checkSampleData(sampleStats1); [EOL]     checkSampleData(sampleStats2); [EOL]     return t(sampleStats1.getMean(), sampleStats2.getMean(), sampleStats1.getVariance(), sampleStats2.getVariance(), sampleStats1.getN(), sampleStats2.getN()); [EOL] } <line_num>: 358,368
public double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException { [EOL]     checkSampleData(sampleStats1); [EOL]     checkSampleData(sampleStats2); [EOL]     return homoscedasticT(sampleStats1.getMean(), sampleStats2.getMean(), sampleStats1.getVariance(), sampleStats2.getVariance(), sampleStats1.getN(), sampleStats2.getN()); [EOL] } <line_num>: 406,416
public double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException { [EOL]     checkSampleData(sample); [EOL]     return tTest(StatUtils.mean(sample), mu, StatUtils.variance(sample), sample.length); [EOL] } <line_num>: 445,454
public boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException { [EOL]     checkSignificanceLevel(alpha); [EOL]     return tTest(mu, sample) < alpha; [EOL] } <line_num>: 493,500
public double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException { [EOL]     checkSampleData(sampleStats); [EOL]     return tTest(sampleStats.getMean(), mu, sampleStats.getVariance(), sampleStats.getN()); [EOL] } <line_num>: 531,539
public boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException { [EOL]     checkSignificanceLevel(alpha); [EOL]     return tTest(mu, sampleStats) < alpha; [EOL] } <line_num>: 579,587
public double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException { [EOL]     checkSampleData(sample1); [EOL]     checkSampleData(sample2); [EOL]     return tTest(StatUtils.mean(sample1), StatUtils.mean(sample2), StatUtils.variance(sample1), StatUtils.variance(sample2), sample1.length, sample2.length); [EOL] } <line_num>: 626,637
public double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException { [EOL]     checkSampleData(sample1); [EOL]     checkSampleData(sample2); [EOL]     return homoscedasticTTest(StatUtils.mean(sample1), StatUtils.mean(sample2), StatUtils.variance(sample1), StatUtils.variance(sample2), sample1.length, sample2.length); [EOL] } <line_num>: 673,686
public boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException { [EOL]     checkSignificanceLevel(alpha); [EOL]     return tTest(sample1, sample2) < alpha; [EOL] } <line_num>: 740,748
public boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException { [EOL]     checkSignificanceLevel(alpha); [EOL]     return homoscedasticTTest(sample1, sample2) < alpha; [EOL] } <line_num>: 803,811
public double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException { [EOL]     checkSampleData(sampleStats1); [EOL]     checkSampleData(sampleStats2); [EOL]     return tTest(sampleStats1.getMean(), sampleStats2.getMean(), sampleStats1.getVariance(), sampleStats2.getVariance(), sampleStats1.getN(), sampleStats2.getN()); [EOL] } <line_num>: 848,859
public double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException { [EOL]     checkSampleData(sampleStats1); [EOL]     checkSampleData(sampleStats2); [EOL]     return homoscedasticTTest(sampleStats1.getMean(), sampleStats2.getMean(), sampleStats1.getVariance(), sampleStats2.getVariance(), sampleStats1.getN(), sampleStats2.getN()); [EOL] } <line_num>: 895,908
public boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException { [EOL]     checkSignificanceLevel(alpha); [EOL]     return tTest(sampleStats1, sampleStats2) < alpha; [EOL] } <line_num>: 965,974
protected double df(double v1, double v2, double n1, double n2) { [EOL]     return (((v1 / n1) + (v2 / n2)) * ((v1 / n1) + (v2 / n2))) / ((v1 * v1) / (n1 * n1 * (n1 - 1d)) + (v2 * v2) / (n2 * n2 * (n2 - 1d))); [EOL] } <line_num>: 987,991
protected double t(final double m, final double mu, final double v, final double n) { [EOL]     return (m - mu) / FastMath.sqrt(v / n); [EOL] } <line_num>: 1002,1005
protected double t(final double m1, final double m2, final double v1, final double v2, final double n1, final double n2) { [EOL]     return (m1 - m2) / FastMath.sqrt((v1 / n1) + (v2 / n2)); [EOL] } <line_num>: 1020,1024
protected double homoscedasticT(final double m1, final double m2, final double v1, final double v2, final double n1, final double n2) { [EOL]     final double pooledVariance = ((n1 - 1) * v1 + (n2 - 1) * v2) / (n1 + n2 - 2); [EOL]     return (m1 - m2) / FastMath.sqrt(pooledVariance * (1d / n1 + 1d / n2)); [EOL] } <line_num>: 1038,1043
protected double tTest(final double m, final double mu, final double v, final double n) throws MaxCountExceededException, MathIllegalArgumentException { [EOL]     double t = FastMath.abs(t(m, mu, v, n)); [EOL]     TDistribution distribution = new TDistribution(n - 1); [EOL]     return 2.0 * distribution.cumulativeProbability(-t); [EOL] } <line_num>: 1056,1064
protected double tTest(final double m1, final double m2, final double v1, final double v2, final double n1, final double n2) throws MaxCountExceededException, NotStrictlyPositiveException { [EOL]     final double t = FastMath.abs(t(m1, m2, v1, v2, n1, n2)); [EOL]     final double degreesOfFreedom = df(v1, v2, n1, n2); [EOL]     TDistribution distribution = new TDistribution(degreesOfFreedom); [EOL]     return 2.0 * distribution.cumulativeProbability(-t); [EOL] } <line_num>: 1083,1093
protected double homoscedasticTTest(double m1, double m2, double v1, double v2, double n1, double n2) throws MaxCountExceededException, NotStrictlyPositiveException { [EOL]     final double t = FastMath.abs(homoscedasticT(m1, m2, v1, v2, n1, n2)); [EOL]     final double degreesOfFreedom = n1 + n2 - 2; [EOL]     TDistribution distribution = new TDistribution(degreesOfFreedom); [EOL]     return 2.0 * distribution.cumulativeProbability(-t); [EOL] } <line_num>: 1112,1122
private void checkSignificanceLevel(final double alpha) throws OutOfRangeException { [EOL]     if (alpha <= 0 || alpha > 0.5) { [EOL]         throw new OutOfRangeException(LocalizedFormats.SIGNIFICANCE_LEVEL, alpha, 0.0, 0.5); [EOL]     } [EOL] } <line_num>: 1130,1138
private void checkSampleData(final double[] data) throws NullArgumentException, NumberIsTooSmallException { [EOL]     if (data == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     if (data.length < 2) { [EOL]         throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_DATA_FOR_T_STATISTIC, data.length, 2, true); [EOL]     } [EOL] } <line_num>: 1147,1159
private void checkSampleData(final StatisticalSummary stat) throws NullArgumentException, NumberIsTooSmallException { [EOL]     if (stat == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     if (stat.getN() < 2) { [EOL]         throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_DATA_FOR_T_STATISTIC, stat.getN(), 2, true); [EOL]     } [EOL] } <line_num>: 1168,1180
