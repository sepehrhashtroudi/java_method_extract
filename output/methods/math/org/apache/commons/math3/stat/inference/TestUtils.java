private TestUtils() { [EOL]     super(); [EOL] } <line_num>: 56,58
public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException { [EOL]     return T_TEST.homoscedasticT(sample1, sample2); [EOL] } <line_num>: 65,68
public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException { [EOL]     return T_TEST.homoscedasticT(sampleStats1, sampleStats2); [EOL] } <line_num>: 73,77
public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException { [EOL]     return T_TEST.homoscedasticTTest(sample1, sample2, alpha); [EOL] } <line_num>: 82,87
public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException { [EOL]     return T_TEST.homoscedasticTTest(sample1, sample2); [EOL] } <line_num>: 92,95
public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException { [EOL]     return T_TEST.homoscedasticTTest(sampleStats1, sampleStats2); [EOL] } <line_num>: 100,104
public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException { [EOL]     return T_TEST.pairedT(sample1, sample2); [EOL] } <line_num>: 109,113
public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException { [EOL]     return T_TEST.pairedTTest(sample1, sample2, alpha); [EOL] } <line_num>: 118,123
public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException { [EOL]     return T_TEST.pairedTTest(sample1, sample2); [EOL] } <line_num>: 128,132
public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException { [EOL]     return T_TEST.t(mu, observed); [EOL] } <line_num>: 137,140
public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException { [EOL]     return T_TEST.t(mu, sampleStats); [EOL] } <line_num>: 145,148
public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException { [EOL]     return T_TEST.t(sample1, sample2); [EOL] } <line_num>: 153,156
public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException { [EOL]     return T_TEST.t(sampleStats1, sampleStats2); [EOL] } <line_num>: 161,165
public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException { [EOL]     return T_TEST.tTest(mu, sample, alpha); [EOL] } <line_num>: 170,174
public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException { [EOL]     return T_TEST.tTest(mu, sample); [EOL] } <line_num>: 179,183
public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException { [EOL]     return T_TEST.tTest(mu, sampleStats, alpha); [EOL] } <line_num>: 188,193
public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException { [EOL]     return T_TEST.tTest(mu, sampleStats); [EOL] } <line_num>: 198,202
public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException { [EOL]     return T_TEST.tTest(sample1, sample2, alpha); [EOL] } <line_num>: 207,212
public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException { [EOL]     return T_TEST.tTest(sample1, sample2); [EOL] } <line_num>: 217,221
public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException { [EOL]     return T_TEST.tTest(sampleStats1, sampleStats2, alpha); [EOL] } <line_num>: 226,232
public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException { [EOL]     return T_TEST.tTest(sampleStats1, sampleStats2); [EOL] } <line_num>: 237,242
public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException { [EOL]     return CHI_SQUARE_TEST.chiSquare(expected, observed); [EOL] } <line_num>: 247,251
public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException { [EOL]     return CHI_SQUARE_TEST.chiSquare(counts); [EOL] } <line_num>: 256,260
public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException { [EOL]     return CHI_SQUARE_TEST.chiSquareTest(expected, observed, alpha); [EOL] } <line_num>: 265,270
public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException { [EOL]     return CHI_SQUARE_TEST.chiSquareTest(expected, observed); [EOL] } <line_num>: 275,279
public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException { [EOL]     return CHI_SQUARE_TEST.chiSquareTest(counts, alpha); [EOL] } <line_num>: 284,288
public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException { [EOL]     return CHI_SQUARE_TEST.chiSquareTest(counts); [EOL] } <line_num>: 293,297
public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException { [EOL]     return CHI_SQUARE_TEST.chiSquareDataSetsComparison(observed1, observed2); [EOL] } <line_num>: 304,308
public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException { [EOL]     return CHI_SQUARE_TEST.chiSquareTestDataSetsComparison(observed1, observed2); [EOL] } <line_num>: 315,320
public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException { [EOL]     return CHI_SQUARE_TEST.chiSquareTestDataSetsComparison(observed1, observed2, alpha); [EOL] } <line_num>: 327,333
public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException { [EOL]     return ONE_WAY_ANANOVA.anovaFValue(categoryData); [EOL] } <line_num>: 340,343
public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException { [EOL]     return ONE_WAY_ANANOVA.anovaPValue(categoryData); [EOL] } <line_num>: 350,354
public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException { [EOL]     return ONE_WAY_ANANOVA.anovaTest(categoryData, alpha); [EOL] } <line_num>: 361,366
public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException { [EOL]     return G_TEST.g(expected, observed); [EOL] } <line_num>: 372,376
public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException { [EOL]     return G_TEST.gTest(expected, observed); [EOL] } <line_num>: 382,386
public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException { [EOL]     return G_TEST.gTestIntrinsic(expected, observed); [EOL] } <line_num>: 392,396
public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException { [EOL]     return G_TEST.gTest(expected, observed, alpha); [EOL] } <line_num>: 402,407
public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException { [EOL]     return G_TEST.gDataSetsComparison(observed1, observed2); [EOL] } <line_num>: 413,417
public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException { [EOL]     return G_TEST.rootLogLikelihoodRatio(k11, k12, k21, k22); [EOL] } <line_num>: 423,426
public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException { [EOL]     return G_TEST.gTestDataSetsComparison(observed1, observed2); [EOL] } <line_num>: 433,438
public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException { [EOL]     return G_TEST.gTestDataSetsComparison(observed1, observed2, alpha); [EOL] } <line_num>: 444,450
