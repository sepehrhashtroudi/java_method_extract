public SimpleRegression() { [EOL]     this(true); [EOL] } <line_num>: 100,102
public SimpleRegression(boolean includeIntercept) { [EOL]     super(); [EOL]     hasIntercept = includeIntercept; [EOL] } <line_num>: 114,117
public void addData(final double x, final double y) { [EOL]     if (n == 0) { [EOL]         xbar = x; [EOL]         ybar = y; [EOL]     } else { [EOL]         if (hasIntercept) { [EOL]             final double fact1 = 1.0 + n; [EOL]             final double fact2 = n / (1.0 + n); [EOL]             final double dx = x - xbar; [EOL]             final double dy = y - ybar; [EOL]             sumXX += dx * dx * fact2; [EOL]             sumYY += dy * dy * fact2; [EOL]             sumXY += dx * dy * fact2; [EOL]             xbar += dx / fact1; [EOL]             ybar += dy / fact1; [EOL]         } [EOL]     } [EOL]     if (!hasIntercept) { [EOL]         sumXX += x * x; [EOL]         sumYY += y * y; [EOL]         sumXY += x * y; [EOL]     } [EOL]     sumX += x; [EOL]     sumY += y; [EOL]     n++; [EOL] } <line_num>: 132,157
public void append(SimpleRegression reg) { [EOL]     if (n == 0) { [EOL]         xbar = reg.xbar; [EOL]         ybar = reg.ybar; [EOL]         sumXX = reg.sumXX; [EOL]         sumYY = reg.sumYY; [EOL]         sumXY = reg.sumXY; [EOL]     } else { [EOL]         if (hasIntercept) { [EOL]             final double fact1 = reg.n / (double) (reg.n + n); [EOL]             final double fact2 = n * reg.n / (double) (reg.n + n); [EOL]             final double dx = reg.xbar - xbar; [EOL]             final double dy = reg.ybar - ybar; [EOL]             sumXX += reg.sumXX + dx * dx * fact2; [EOL]             sumYY += reg.sumYY + dy * dy * fact2; [EOL]             sumXY += reg.sumXY + dx * dy * fact2; [EOL]             xbar += dx * fact1; [EOL]             ybar += dy * fact1; [EOL]         } else { [EOL]             sumXX += reg.sumXX; [EOL]             sumYY += reg.sumYY; [EOL]             sumXY += reg.sumXY; [EOL]         } [EOL]     } [EOL]     sumX += reg.sumX; [EOL]     sumY += reg.sumY; [EOL]     n += reg.n; [EOL] } <line_num>: 172,199
public void removeData(final double x, final double y) { [EOL]     if (n > 0) { [EOL]         if (hasIntercept) { [EOL]             final double fact1 = n - 1.0; [EOL]             final double fact2 = n / (n - 1.0); [EOL]             final double dx = x - xbar; [EOL]             final double dy = y - ybar; [EOL]             sumXX -= dx * dx * fact2; [EOL]             sumYY -= dy * dy * fact2; [EOL]             sumXY -= dx * dy * fact2; [EOL]             xbar -= dx / fact1; [EOL]             ybar -= dy / fact1; [EOL]         } else { [EOL]             final double fact1 = n - 1.0; [EOL]             sumXX -= x * x; [EOL]             sumYY -= y * y; [EOL]             sumXY -= x * y; [EOL]             xbar -= x / fact1; [EOL]             ybar -= y / fact1; [EOL]         } [EOL]         sumX -= x; [EOL]         sumY -= y; [EOL]         n--; [EOL]     } [EOL] } <line_num>: 214,238
public void addData(final double[][] data) throws ModelSpecificationException { [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         if (data[i].length < 2) { [EOL]             throw new ModelSpecificationException(LocalizedFormats.INVALID_REGRESSION_OBSERVATION, data[i].length, 2); [EOL]         } [EOL]         addData(data[i][0], data[i][1]); [EOL]     } [EOL] } <line_num>: 258,266
public void addObservation(final double[] x, final double y) throws ModelSpecificationException { [EOL]     if (x == null || x.length == 0) { [EOL]         throw new ModelSpecificationException(LocalizedFormats.INVALID_REGRESSION_OBSERVATION, x != null ? x.length : 0, 1); [EOL]     } [EOL]     addData(x[0], y); [EOL] } <line_num>: 276,282
public void addObservations(final double[][] x, final double[] y) throws ModelSpecificationException { [EOL]     if ((x == null) || (y == null) || (x.length != y.length)) { [EOL]         throw new ModelSpecificationException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, (x == null) ? 0 : x.length, (y == null) ? 0 : y.length); [EOL]     } [EOL]     boolean obsOk = true; [EOL]     for (int i = 0; i < x.length; i++) { [EOL]         if (x[i] == null || x[i].length == 0) { [EOL]             obsOk = false; [EOL]         } [EOL]     } [EOL]     if (!obsOk) { [EOL]         throw new ModelSpecificationException(LocalizedFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, 0, 1); [EOL]     } [EOL]     for (int i = 0; i < x.length; i++) { [EOL]         addData(x[i][0], y[i]); [EOL]     } [EOL] } <line_num>: 294,315
public void removeData(double[][] data) { [EOL]     for (int i = 0; i < data.length && n > 0; i++) { [EOL]         removeData(data[i][0], data[i][1]); [EOL]     } [EOL] } <line_num>: 330,334
public void clear() { [EOL]     sumX = 0d; [EOL]     sumXX = 0d; [EOL]     sumY = 0d; [EOL]     sumYY = 0d; [EOL]     sumXY = 0d; [EOL]     n = 0; [EOL] } <line_num>: 339,346
public long getN() { [EOL]     return n; [EOL] } <line_num>: 353,355
public double predict(final double x) { [EOL]     final double b1 = getSlope(); [EOL]     if (hasIntercept) { [EOL]         return getIntercept(b1) + b1 * x; [EOL]     } [EOL]     return b1 * x; [EOL] } <line_num>: 374,380
public double getIntercept() { [EOL]     return hasIntercept ? getIntercept(getSlope()) : 0.0; [EOL] } <line_num>: 401,403
public boolean hasIntercept() { [EOL]     return hasIntercept; [EOL] } <line_num>: 411,413
public double getSlope() { [EOL]     if (n < 2) { [EOL]         return Double.NaN; [EOL]     } [EOL]     if (FastMath.abs(sumXX) < 10 * Double.MIN_VALUE) { [EOL]         return Double.NaN; [EOL]     } [EOL]     return sumXY / sumXX; [EOL] } <line_num>: 431,439
public double getSumSquaredErrors() { [EOL]     return FastMath.max(0d, sumYY - sumXY * sumXY / sumXX); [EOL] } <line_num>: 470,472
public double getTotalSumSquares() { [EOL]     if (n < 2) { [EOL]         return Double.NaN; [EOL]     } [EOL]     return sumYY; [EOL] } <line_num>: 484,489
public double getXSumSquares() { [EOL]     if (n < 2) { [EOL]         return Double.NaN; [EOL]     } [EOL]     return sumXX; [EOL] } <line_num>: 498,503
public double getSumOfCrossProducts() { [EOL]     return sumXY; [EOL] } <line_num>: 510,512
public double getRegressionSumSquares() { [EOL]     return getRegressionSumSquares(getSlope()); [EOL] } <line_num>: 530,532
public double getMeanSquareError() { [EOL]     if (n < 3) { [EOL]         return Double.NaN; [EOL]     } [EOL]     return hasIntercept ? (getSumSquaredErrors() / (n - 2)) : (getSumSquaredErrors() / (n - 1)); [EOL] } <line_num>: 544,549
public double getR() { [EOL]     double b1 = getSlope(); [EOL]     double result = FastMath.sqrt(getRSquare()); [EOL]     if (b1 < 0) { [EOL]         result = -result; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 565,572
public double getRSquare() { [EOL]     double ssto = getTotalSumSquares(); [EOL]     return (ssto - getSumSquaredErrors()) / ssto; [EOL] } <line_num>: 588,591
public double getInterceptStdErr() { [EOL]     if (!hasIntercept) { [EOL]         return Double.NaN; [EOL]     } [EOL]     return FastMath.sqrt(getMeanSquareError() * ((1d / n) + (xbar * xbar) / sumXX)); [EOL] } <line_num>: 605,611
public double getSlopeStdErr() { [EOL]     return FastMath.sqrt(getMeanSquareError() / sumXX); [EOL] } <line_num>: 624,626
public double getSlopeConfidenceInterval() throws OutOfRangeException { [EOL]     return getSlopeConfidenceInterval(0.05d); [EOL] } <line_num>: 650,652
public double getSlopeConfidenceInterval(final double alpha) throws OutOfRangeException { [EOL]     if (n < 3) { [EOL]         return Double.NaN; [EOL]     } [EOL]     if (alpha >= 1 || alpha <= 0) { [EOL]         throw new OutOfRangeException(LocalizedFormats.SIGNIFICANCE_LEVEL, alpha, 0, 1); [EOL]     } [EOL]     TDistribution distribution = new TDistribution(n - 2); [EOL]     return getSlopeStdErr() * distribution.inverseCumulativeProbability(1d - alpha / 2d); [EOL] } <line_num>: 685,698
public double getSignificance() { [EOL]     if (n < 3) { [EOL]         return Double.NaN; [EOL]     } [EOL]     TDistribution distribution = new TDistribution(n - 2); [EOL]     return 2d * (1.0 - distribution.cumulativeProbability(FastMath.abs(getSlope()) / getSlopeStdErr())); [EOL] } <line_num>: 722,730
private double getIntercept(final double slope) { [EOL]     if (hasIntercept) { [EOL]         return (sumY - slope * sumX) / n; [EOL]     } [EOL]     return 0.0; [EOL] } <line_num>: 742,747
private double getRegressionSumSquares(final double slope) { [EOL]     return slope * slope * sumXX; [EOL] } <line_num>: 755,757
public RegressionResults regress() throws ModelSpecificationException, NoDataException { [EOL]     if (hasIntercept) { [EOL]         if (n < 3) { [EOL]             throw new NoDataException(LocalizedFormats.NOT_ENOUGH_DATA_REGRESSION); [EOL]         } [EOL]         if (FastMath.abs(sumXX) > Precision.SAFE_MIN) { [EOL]             final double[] params = new double[] { getIntercept(), getSlope() }; [EOL]             final double mse = getMeanSquareError(); [EOL]             final double _syy = sumYY + sumY * sumY / n; [EOL]             final double[] vcv = new double[] { mse * (xbar * xbar / sumXX + 1.0 / n), -xbar * mse / sumXX, mse / sumXX }; [EOL]             return new RegressionResults(params, new double[][] { vcv }, true, n, 2, sumY, _syy, getSumSquaredErrors(), true, false); [EOL]         } else { [EOL]             final double[] params = new double[] { sumY / n, Double.NaN }; [EOL]             final double[] vcv = new double[] { ybar / (n - 1.0), Double.NaN, Double.NaN }; [EOL]             return new RegressionResults(params, new double[][] { vcv }, true, n, 1, sumY, sumYY, getSumSquaredErrors(), true, false); [EOL]         } [EOL]     } else { [EOL]         if (n < 2) { [EOL]             throw new NoDataException(LocalizedFormats.NOT_ENOUGH_DATA_REGRESSION); [EOL]         } [EOL]         if (!Double.isNaN(sumXX)) { [EOL]             final double[] vcv = new double[] { getMeanSquareError() / sumXX }; [EOL]             final double[] params = new double[] { sumXY / sumXX }; [EOL]             return new RegressionResults(params, new double[][] { vcv }, true, n, 1, sumY, sumYY, getSumSquaredErrors(), false, false); [EOL]         } else { [EOL]             final double[] vcv = new double[] { Double.NaN }; [EOL]             final double[] params = new double[] { Double.NaN }; [EOL]             return new RegressionResults(params, new double[][] { vcv }, true, n, 1, Double.NaN, Double.NaN, Double.NaN, false, false); [EOL]         } [EOL]     } [EOL] } <line_num>: 771,816
public RegressionResults regress(int[] variablesToInclude) throws MathIllegalArgumentException { [EOL]     if (variablesToInclude == null || variablesToInclude.length == 0) { [EOL]         throw new MathIllegalArgumentException(LocalizedFormats.ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED); [EOL]     } [EOL]     if (variablesToInclude.length > 2 || (variablesToInclude.length > 1 && !hasIntercept)) { [EOL]         throw new ModelSpecificationException(LocalizedFormats.ARRAY_SIZE_EXCEEDS_MAX_VARIABLES, (variablesToInclude.length > 1 && !hasIntercept) ? 1 : 2); [EOL]     } [EOL]     if (hasIntercept) { [EOL]         if (variablesToInclude.length == 2) { [EOL]             if (variablesToInclude[0] == 1) { [EOL]                 throw new ModelSpecificationException(LocalizedFormats.NOT_INCREASING_SEQUENCE); [EOL]             } else if (variablesToInclude[0] != 0) { [EOL]                 throw new OutOfRangeException(variablesToInclude[0], 0, 1); [EOL]             } [EOL]             if (variablesToInclude[1] != 1) { [EOL]                 throw new OutOfRangeException(variablesToInclude[0], 0, 1); [EOL]             } [EOL]             return regress(); [EOL]         } else { [EOL]             if (variablesToInclude[0] != 1 && variablesToInclude[0] != 0) { [EOL]                 throw new OutOfRangeException(variablesToInclude[0], 0, 1); [EOL]             } [EOL]             final double _mean = sumY * sumY / n; [EOL]             final double _syy = sumYY + _mean; [EOL]             if (variablesToInclude[0] == 0) { [EOL]                 final double[] vcv = new double[] { sumYY / (((n - 1) * n)) }; [EOL]                 final double[] params = new double[] { ybar }; [EOL]                 return new RegressionResults(params, new double[][] { vcv }, true, n, 1, sumY, _syy + _mean, sumYY, true, false); [EOL]             } else if (variablesToInclude[0] == 1) { [EOL]                 final double _sxx = sumXX + sumX * sumX / n; [EOL]                 final double _sxy = sumXY + sumX * sumY / n; [EOL]                 final double _sse = FastMath.max(0d, _syy - _sxy * _sxy / _sxx); [EOL]                 final double _mse = _sse / ((n - 1)); [EOL]                 if (!Double.isNaN(_sxx)) { [EOL]                     final double[] vcv = new double[] { _mse / _sxx }; [EOL]                     final double[] params = new double[] { _sxy / _sxx }; [EOL]                     return new RegressionResults(params, new double[][] { vcv }, true, n, 1, sumY, _syy, _sse, false, false); [EOL]                 } else { [EOL]                     final double[] vcv = new double[] { Double.NaN }; [EOL]                     final double[] params = new double[] { Double.NaN }; [EOL]                     return new RegressionResults(params, new double[][] { vcv }, true, n, 1, Double.NaN, Double.NaN, Double.NaN, false, false); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } else { [EOL]         if (variablesToInclude[0] != 0) { [EOL]             throw new OutOfRangeException(variablesToInclude[0], 0, 0); [EOL]         } [EOL]         return regress(); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 826,890
