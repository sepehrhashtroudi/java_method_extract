public Skewness() { [EOL]     incMoment = true; [EOL]     moment = new ThirdMoment(); [EOL] } <line_num>: 63,66
public Skewness(final ThirdMoment m3) { [EOL]     incMoment = false; [EOL]     this.moment = m3; [EOL] } <line_num>: 72,75
public Skewness(Skewness original) throws NullArgumentException { [EOL]     copy(original, this); [EOL] } <line_num>: 84,86
@Override [EOL] public void increment(final double d) { [EOL]     if (incMoment) { [EOL]         moment.increment(d); [EOL]     } [EOL] } <line_num>: 94,99
@Override [EOL] public double getResult() { [EOL]     if (moment.n < 3) { [EOL]         return Double.NaN; [EOL]     } [EOL]     double variance = moment.m2 / (moment.n - 1); [EOL]     if (variance < 10E-20) { [EOL]         return 0.0d; [EOL]     } else { [EOL]         double n0 = moment.getN(); [EOL]         return (n0 * moment.m3) / ((n0 - 1) * (n0 - 2) * FastMath.sqrt(variance) * variance); [EOL]     } [EOL] } <line_num>: 108,122
public long getN() { [EOL]     return moment.getN(); [EOL] } <line_num>: 127,129
@Override [EOL] public void clear() { [EOL]     if (incMoment) { [EOL]         moment.clear(); [EOL]     } [EOL] } <line_num>: 134,139
@Override [EOL] public double evaluate(final double[] values, final int begin, final int length) throws MathIllegalArgumentException { [EOL]     double skew = Double.NaN; [EOL]     if (test(values, begin, length) && length > 2) { [EOL]         Mean mean = new Mean(); [EOL]         double m = mean.evaluate(values, begin, length); [EOL]         double accum = 0.0; [EOL]         double accum2 = 0.0; [EOL]         for (int i = begin; i < begin + length; i++) { [EOL]             final double d = values[i] - m; [EOL]             accum += d * d; [EOL]             accum2 += d; [EOL]         } [EOL]         final double variance = (accum - (accum2 * accum2 / length)) / (length - 1); [EOL]         double accum3 = 0.0; [EOL]         for (int i = begin; i < begin + length; i++) { [EOL]             final double d = values[i] - m; [EOL]             accum3 += d * d * d; [EOL]         } [EOL]         accum3 /= variance * FastMath.sqrt(variance); [EOL]         double n0 = length; [EOL]         skew = (n0 / ((n0 - 1) * (n0 - 2))) * accum3; [EOL]     } [EOL]     return skew; [EOL] } <line_num>: 157,195
@Override [EOL] public Skewness copy() { [EOL]     Skewness result = new Skewness(); [EOL]     copy(this, result); [EOL]     return result; [EOL] } <line_num>: 200,206
public static void copy(Skewness source, Skewness dest) throws NullArgumentException { [EOL]     MathUtils.checkNotNull(source); [EOL]     MathUtils.checkNotNull(dest); [EOL]     dest.setData(source.getDataRef()); [EOL]     dest.moment = new ThirdMoment(source.moment.copy()); [EOL]     dest.incMoment = source.incMoment; [EOL] } <line_num>: 216,223
