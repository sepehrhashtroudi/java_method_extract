public AggregateSummaryStatistics() { [EOL]     this(new SummaryStatistics()); [EOL] } <line_num>: 77,80
public AggregateSummaryStatistics(SummaryStatistics prototypeStatistics) throws NullArgumentException { [EOL]     this(prototypeStatistics, prototypeStatistics == null ? null : new SummaryStatistics(prototypeStatistics)); [EOL] } <line_num>: 99,102
public AggregateSummaryStatistics(SummaryStatistics prototypeStatistics, SummaryStatistics initialStatistics) { [EOL]     this.statisticsPrototype = (prototypeStatistics == null) ? new SummaryStatistics() : prototypeStatistics; [EOL]     this.statistics = (initialStatistics == null) ? new SummaryStatistics() : initialStatistics; [EOL] } <line_num>: 124,130
public AggregatingSummaryStatistics(SummaryStatistics aggregateStatistics) { [EOL]     this.aggregateStatistics = aggregateStatistics; [EOL] } <line_num>: 374,376
public double getMax() { [EOL]     synchronized (statistics) { [EOL]         return statistics.getMax(); [EOL]     } [EOL] } <line_num>: 138,142
public double getMean() { [EOL]     synchronized (statistics) { [EOL]         return statistics.getMean(); [EOL]     } [EOL] } <line_num>: 149,153
public double getMin() { [EOL]     synchronized (statistics) { [EOL]         return statistics.getMin(); [EOL]     } [EOL] } <line_num>: 161,165
public long getN() { [EOL]     synchronized (statistics) { [EOL]         return statistics.getN(); [EOL]     } [EOL] } <line_num>: 172,176
public double getStandardDeviation() { [EOL]     synchronized (statistics) { [EOL]         return statistics.getStandardDeviation(); [EOL]     } [EOL] } <line_num>: 184,188
public double getSum() { [EOL]     synchronized (statistics) { [EOL]         return statistics.getSum(); [EOL]     } [EOL] } <line_num>: 195,199
public double getVariance() { [EOL]     synchronized (statistics) { [EOL]         return statistics.getVariance(); [EOL]     } [EOL] } <line_num>: 207,211
public double getSumOfLogs() { [EOL]     synchronized (statistics) { [EOL]         return statistics.getSumOfLogs(); [EOL]     } [EOL] } <line_num>: 219,223
public double getGeometricMean() { [EOL]     synchronized (statistics) { [EOL]         return statistics.getGeometricMean(); [EOL]     } [EOL] } <line_num>: 231,235
public double getSumsq() { [EOL]     synchronized (statistics) { [EOL]         return statistics.getSumsq(); [EOL]     } [EOL] } <line_num>: 243,247
public double getSecondMoment() { [EOL]     synchronized (statistics) { [EOL]         return statistics.getSecondMoment(); [EOL]     } [EOL] } <line_num>: 257,261
public StatisticalSummary getSummary() { [EOL]     synchronized (statistics) { [EOL]         return new StatisticalSummaryValues(getMean(), getVariance(), getN(), getMax(), getMin(), getSum()); [EOL]     } [EOL] } <line_num>: 269,274
public SummaryStatistics createContributingStatistics() { [EOL]     SummaryStatistics contributingStatistics = new AggregatingSummaryStatistics(statistics); [EOL]     SummaryStatistics.copy(statisticsPrototype, contributingStatistics); [EOL]     return contributingStatistics; [EOL] } <line_num>: 284,292
public static StatisticalSummaryValues aggregate(Collection<SummaryStatistics> statistics) { [EOL]     if (statistics == null) { [EOL]         return null; [EOL]     } [EOL]     Iterator<SummaryStatistics> iterator = statistics.iterator(); [EOL]     if (!iterator.hasNext()) { [EOL]         return null; [EOL]     } [EOL]     SummaryStatistics current = iterator.next(); [EOL]     long n = current.getN(); [EOL]     double min = current.getMin(); [EOL]     double sum = current.getSum(); [EOL]     double max = current.getMax(); [EOL]     double m2 = current.getSecondMoment(); [EOL]     double mean = current.getMean(); [EOL]     while (iterator.hasNext()) { [EOL]         current = iterator.next(); [EOL]         if (current.getMin() < min || Double.isNaN(min)) { [EOL]             min = current.getMin(); [EOL]         } [EOL]         if (current.getMax() > max || Double.isNaN(max)) { [EOL]             max = current.getMax(); [EOL]         } [EOL]         sum += current.getSum(); [EOL]         final double oldN = n; [EOL]         final double curN = current.getN(); [EOL]         n += curN; [EOL]         final double meanDiff = current.getMean() - mean; [EOL]         mean = sum / n; [EOL]         m2 = m2 + current.getSecondMoment() + meanDiff * meanDiff * oldN * curN / n; [EOL]     } [EOL]     final double variance; [EOL]     if (n == 0) { [EOL]         variance = Double.NaN; [EOL]     } else if (n == 1) { [EOL]         variance = 0d; [EOL]     } else { [EOL]         variance = m2 / (n - 1); [EOL]     } [EOL]     return new StatisticalSummaryValues(mean, variance, n, max, min, sum); [EOL] } <line_num>: 306,346
@Override [EOL] public void addValue(double value) { [EOL]     super.addValue(value); [EOL]     synchronized (aggregateStatistics) { [EOL]         aggregateStatistics.addValue(value); [EOL]     } [EOL] } <line_num>: 384,390
@Override [EOL] public boolean equals(Object object) { [EOL]     if (object == this) { [EOL]         return true; [EOL]     } [EOL]     if (object instanceof AggregatingSummaryStatistics == false) { [EOL]         return false; [EOL]     } [EOL]     AggregatingSummaryStatistics stat = (AggregatingSummaryStatistics) object; [EOL]     return super.equals(stat) && aggregateStatistics.equals(stat.aggregateStatistics); [EOL] } <line_num>: 399,410
@Override [EOL] public int hashCode() { [EOL]     return 123 + super.hashCode() + aggregateStatistics.hashCode(); [EOL] } <line_num>: 416,419
