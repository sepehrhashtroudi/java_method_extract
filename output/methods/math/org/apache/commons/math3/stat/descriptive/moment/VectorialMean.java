public VectorialMean(int dimension) { [EOL]     means = new Mean[dimension]; [EOL]     for (int i = 0; i < dimension; ++i) { [EOL]         means[i] = new Mean(); [EOL]     } [EOL] } <line_num>: 40,45
public void increment(double[] v) throws DimensionMismatchException { [EOL]     if (v.length != means.length) { [EOL]         throw new DimensionMismatchException(v.length, means.length); [EOL]     } [EOL]     for (int i = 0; i < v.length; ++i) { [EOL]         means[i].increment(v[i]); [EOL]     } [EOL] } <line_num>: 52,59
public double[] getResult() { [EOL]     double[] result = new double[means.length]; [EOL]     for (int i = 0; i < result.length; ++i) { [EOL]         result[i] = means[i].getResult(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 65,71
public long getN() { [EOL]     return (means.length == 0) ? 0 : means[0].getN(); [EOL] } <line_num>: 77,79
@Override [EOL] public int hashCode() { [EOL]     final int prime = 31; [EOL]     int result = 1; [EOL]     result = prime * result + Arrays.hashCode(means); [EOL]     return result; [EOL] } <line_num>: 82,88
@Override [EOL] public boolean equals(Object obj) { [EOL]     if (this == obj) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof VectorialMean)) { [EOL]         return false; [EOL]     } [EOL]     VectorialMean other = (VectorialMean) obj; [EOL]     if (!Arrays.equals(means, other.means)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 91,104
