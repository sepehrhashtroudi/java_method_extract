@Override [EOL] public double evaluate(final double[] values) throws MathIllegalArgumentException { [EOL]     if (values == null) { [EOL]         throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY); [EOL]     } [EOL]     return evaluate(values, 0, values.length); [EOL] } <line_num>: 59,65
@Override [EOL] public double evaluate(final double[] values, final int begin, final int length) throws MathIllegalArgumentException { [EOL]     if (test(values, begin, length)) { [EOL]         clear(); [EOL]         incrementAll(values, begin, length); [EOL]     } [EOL]     return getResult(); [EOL] } <line_num>: 89,97
@Override [EOL] public abstract StorelessUnivariateStatistic copy(); <line_num>: 102,103
public abstract void clear(); <line_num>: 108,108
public abstract double getResult(); <line_num>: 113,113
public abstract void increment(final double d); <line_num>: 118,118
public void incrementAll(double[] values) throws MathIllegalArgumentException { [EOL]     if (values == null) { [EOL]         throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY); [EOL]     } [EOL]     incrementAll(values, 0, values.length); [EOL] } <line_num>: 130,135
public void incrementAll(double[] values, int begin, int length) throws MathIllegalArgumentException { [EOL]     if (test(values, begin, length)) { [EOL]         int k = begin + length; [EOL]         for (int i = begin; i < k; i++) { [EOL]             increment(values[i]); [EOL]         } [EOL]     } [EOL] } <line_num>: 149,156
@Override [EOL] public boolean equals(Object object) { [EOL]     if (object == this) { [EOL]         return true; [EOL]     } [EOL]     if (object instanceof AbstractStorelessUnivariateStatistic == false) { [EOL]         return false; [EOL]     } [EOL]     AbstractStorelessUnivariateStatistic stat = (AbstractStorelessUnivariateStatistic) object; [EOL]     return Precision.equalsIncludingNaN(stat.getResult(), this.getResult()) && Precision.equalsIncludingNaN(stat.getN(), this.getN()); [EOL] } <line_num>: 165,176
@Override [EOL] public int hashCode() { [EOL]     return 31 * (31 + MathUtils.hash(getResult())) + MathUtils.hash(getN()); [EOL] } <line_num>: 183,186
