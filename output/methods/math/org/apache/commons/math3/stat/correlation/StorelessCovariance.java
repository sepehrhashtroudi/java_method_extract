public StorelessCovariance(final int dim) { [EOL]     this(dim, true); [EOL] } <line_num>: 56,58
public StorelessCovariance(final int dim, final boolean biasCorrected) { [EOL]     dimension = dim; [EOL]     covMatrix = new StorelessBivariateCovariance[dimension * (dimension + 1) / 2]; [EOL]     initializeMatrix(biasCorrected); [EOL] } <line_num>: 69,73
private void initializeMatrix(final boolean biasCorrected) { [EOL]     for (int i = 0; i < dimension; i++) { [EOL]         for (int j = 0; j < dimension; j++) { [EOL]             setElement(i, j, new StorelessBivariateCovariance(biasCorrected)); [EOL]         } [EOL]     } [EOL] } <line_num>: 81,87
private int indexOf(final int i, final int j) { [EOL]     return j < i ? i * (i + 1) / 2 + j : j * (j + 1) / 2 + i; [EOL] } <line_num>: 98,100
private StorelessBivariateCovariance getElement(final int i, final int j) { [EOL]     return covMatrix[indexOf(i, j)]; [EOL] } <line_num>: 108,110
private void setElement(final int i, final int j, final StorelessBivariateCovariance cov) { [EOL]     covMatrix[indexOf(i, j)] = cov; [EOL] } <line_num>: 118,121
public double getCovariance(final int xIndex, final int yIndex) throws NumberIsTooSmallException { [EOL]     return getElement(xIndex, yIndex).getResult(); [EOL] } <line_num>: 132,138
public void increment(final double[] data) throws DimensionMismatchException { [EOL]     int length = data.length; [EOL]     if (length != dimension) { [EOL]         throw new DimensionMismatchException(length, dimension); [EOL]     } [EOL]     for (int i = 0; i < length; i++) { [EOL]         for (int j = i; j < length; j++) { [EOL]             getElement(i, j).increment(data[i], data[j]); [EOL]         } [EOL]     } [EOL] } <line_num>: 147,163
public void append(StorelessCovariance sc) throws DimensionMismatchException { [EOL]     if (sc.dimension != dimension) { [EOL]         throw new DimensionMismatchException(sc.dimension, dimension); [EOL]     } [EOL]     for (int i = 0; i < dimension; i++) { [EOL]         for (int j = i; j < dimension; j++) { [EOL]             getElement(i, j).append(sc.getElement(i, j)); [EOL]         } [EOL]     } [EOL] } <line_num>: 174,186
@Override [EOL] public RealMatrix getCovarianceMatrix() throws NumberIsTooSmallException { [EOL]     return MatrixUtils.createRealMatrix(getData()); [EOL] } <line_num>: 193,196
public double[][] getData() throws NumberIsTooSmallException { [EOL]     final double[][] data = new double[dimension][dimension]; [EOL]     for (int i = 0; i < dimension; i++) { [EOL]         for (int j = 0; j < dimension; j++) { [EOL]             data[i][j] = getElement(i, j).getResult(); [EOL]         } [EOL]     } [EOL]     return data; [EOL] } <line_num>: 205,213
@Override [EOL] public int getN() throws MathUnsupportedOperationException { [EOL]     throw new MathUnsupportedOperationException(); [EOL] } <line_num>: 224,228
