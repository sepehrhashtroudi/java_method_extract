public SpearmansCorrelation() { [EOL]     this(new NaturalRanking()); [EOL] } <line_num>: 60,62
public SpearmansCorrelation(final RankingAlgorithm rankingAlgorithm) { [EOL]     data = null; [EOL]     this.rankingAlgorithm = rankingAlgorithm; [EOL]     rankCorrelation = null; [EOL] } <line_num>: 73,77
public SpearmansCorrelation(final RealMatrix dataMatrix) { [EOL]     this(dataMatrix, new NaturalRanking()); [EOL] } <line_num>: 85,87
public SpearmansCorrelation(final RealMatrix dataMatrix, final RankingAlgorithm rankingAlgorithm) { [EOL]     this.rankingAlgorithm = rankingAlgorithm; [EOL]     this.data = rankTransform(dataMatrix); [EOL]     rankCorrelation = new PearsonsCorrelation(data); [EOL] } <line_num>: 100,104
public RealMatrix getCorrelationMatrix() { [EOL]     return rankCorrelation.getCorrelationMatrix(); [EOL] } <line_num>: 111,113
public PearsonsCorrelation getRankCorrelation() { [EOL]     return rankCorrelation; [EOL] } <line_num>: 127,129
public RealMatrix computeCorrelationMatrix(final RealMatrix matrix) { [EOL]     final RealMatrix matrixCopy = rankTransform(matrix); [EOL]     return new PearsonsCorrelation().computeCorrelationMatrix(matrixCopy); [EOL] } <line_num>: 138,141
public RealMatrix computeCorrelationMatrix(final double[][] matrix) { [EOL]     return computeCorrelationMatrix(new BlockRealMatrix(matrix)); [EOL] } <line_num>: 151,153
public double correlation(final double[] xArray, final double[] yArray) { [EOL]     if (xArray.length != yArray.length) { [EOL]         throw new DimensionMismatchException(xArray.length, yArray.length); [EOL]     } else if (xArray.length < 2) { [EOL]         throw new MathIllegalArgumentException(LocalizedFormats.INSUFFICIENT_DIMENSION, xArray.length, 2); [EOL]     } else { [EOL]         double[] x = xArray; [EOL]         double[] y = yArray; [EOL]         if (rankingAlgorithm instanceof NaturalRanking && NaNStrategy.REMOVED == ((NaturalRanking) rankingAlgorithm).getNanStrategy()) { [EOL]             final Set<Integer> nanPositions = new HashSet<Integer>(); [EOL]             nanPositions.addAll(getNaNPositions(xArray)); [EOL]             nanPositions.addAll(getNaNPositions(yArray)); [EOL]             x = removeValues(xArray, nanPositions); [EOL]             y = removeValues(yArray, nanPositions); [EOL]         } [EOL]         return new PearsonsCorrelation().correlation(rankingAlgorithm.rank(x), rankingAlgorithm.rank(y)); [EOL]     } [EOL] } <line_num>: 164,185
private RealMatrix rankTransform(final RealMatrix matrix) { [EOL]     RealMatrix transformed = null; [EOL]     if (rankingAlgorithm instanceof NaturalRanking && ((NaturalRanking) rankingAlgorithm).getNanStrategy() == NaNStrategy.REMOVED) { [EOL]         final Set<Integer> nanPositions = new HashSet<Integer>(); [EOL]         for (int i = 0; i < matrix.getColumnDimension(); i++) { [EOL]             nanPositions.addAll(getNaNPositions(matrix.getColumn(i))); [EOL]         } [EOL]         if (!nanPositions.isEmpty()) { [EOL]             transformed = new BlockRealMatrix(matrix.getRowDimension() - nanPositions.size(), matrix.getColumnDimension()); [EOL]             for (int i = 0; i < transformed.getColumnDimension(); i++) { [EOL]                 transformed.setColumn(i, removeValues(matrix.getColumn(i), nanPositions)); [EOL]             } [EOL]         } [EOL]     } [EOL]     if (transformed == null) { [EOL]         transformed = matrix.copy(); [EOL]     } [EOL]     for (int i = 0; i < transformed.getColumnDimension(); i++) { [EOL]         transformed.setColumn(i, rankingAlgorithm.rank(transformed.getColumn(i))); [EOL]     } [EOL]     return transformed; [EOL] } <line_num>: 194,223
private List<Integer> getNaNPositions(final double[] input) { [EOL]     final List<Integer> positions = new ArrayList<Integer>(); [EOL]     for (int i = 0; i < input.length; i++) { [EOL]         if (Double.isNaN(input[i])) { [EOL]             positions.add(i); [EOL]         } [EOL]     } [EOL]     return positions; [EOL] } <line_num>: 231,239
private double[] removeValues(final double[] input, final Set<Integer> indices) { [EOL]     if (indices.isEmpty()) { [EOL]         return input; [EOL]     } [EOL]     final double[] result = new double[input.length - indices.size()]; [EOL]     for (int i = 0, j = 0; i < input.length; i++) { [EOL]         if (!indices.contains(i)) { [EOL]             result[j++] = input[i]; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 248,259
