public MultivariateSummaryStatistics(int k, boolean isCovarianceBiasCorrected) { [EOL]     this.k = k; [EOL]     sumImpl = new StorelessUnivariateStatistic[k]; [EOL]     sumSqImpl = new StorelessUnivariateStatistic[k]; [EOL]     minImpl = new StorelessUnivariateStatistic[k]; [EOL]     maxImpl = new StorelessUnivariateStatistic[k]; [EOL]     sumLogImpl = new StorelessUnivariateStatistic[k]; [EOL]     geoMeanImpl = new StorelessUnivariateStatistic[k]; [EOL]     meanImpl = new StorelessUnivariateStatistic[k]; [EOL]     for (int i = 0; i < k; ++i) { [EOL]         sumImpl[i] = new Sum(); [EOL]         sumSqImpl[i] = new SumOfSquares(); [EOL]         minImpl[i] = new Min(); [EOL]         maxImpl[i] = new Max(); [EOL]         sumLogImpl[i] = new SumOfLogs(); [EOL]         geoMeanImpl[i] = new GeometricMean(); [EOL]         meanImpl[i] = new Mean(); [EOL]     } [EOL]     covarianceImpl = new VectorialCovariance(k, isCovarianceBiasCorrected); [EOL] } <line_num>: 115,139
public void addValue(double[] value) throws DimensionMismatchException { [EOL]     checkDimension(value.length); [EOL]     for (int i = 0; i < k; ++i) { [EOL]         double v = value[i]; [EOL]         sumImpl[i].increment(v); [EOL]         sumSqImpl[i].increment(v); [EOL]         minImpl[i].increment(v); [EOL]         maxImpl[i].increment(v); [EOL]         sumLogImpl[i].increment(v); [EOL]         geoMeanImpl[i].increment(v); [EOL]         meanImpl[i].increment(v); [EOL]     } [EOL]     covarianceImpl.increment(value); [EOL]     n++; [EOL] } <line_num>: 148,162
public int getDimension() { [EOL]     return k; [EOL] } <line_num>: 168,170
public long getN() { [EOL]     return n; [EOL] } <line_num>: 176,178
private double[] getResults(StorelessUnivariateStatistic[] stats) { [EOL]     double[] results = new double[stats.length]; [EOL]     for (int i = 0; i < results.length; ++i) { [EOL]         results[i] = stats[i].getResult(); [EOL]     } [EOL]     return results; [EOL] } <line_num>: 185,191
public double[] getSum() { [EOL]     return getResults(sumImpl); [EOL] } <line_num>: 200,202
public double[] getSumSq() { [EOL]     return getResults(sumSqImpl); [EOL] } <line_num>: 211,213
public double[] getSumLog() { [EOL]     return getResults(sumLogImpl); [EOL] } <line_num>: 222,224
public double[] getMean() { [EOL]     return getResults(meanImpl); [EOL] } <line_num>: 233,235
public double[] getStandardDeviation() { [EOL]     double[] stdDev = new double[k]; [EOL]     if (getN() < 1) { [EOL]         Arrays.fill(stdDev, Double.NaN); [EOL]     } else if (getN() < 2) { [EOL]         Arrays.fill(stdDev, 0.0); [EOL]     } else { [EOL]         RealMatrix matrix = covarianceImpl.getResult(); [EOL]         for (int i = 0; i < k; ++i) { [EOL]             stdDev[i] = FastMath.sqrt(matrix.getEntry(i, i)); [EOL]         } [EOL]     } [EOL]     return stdDev; [EOL] } <line_num>: 244,257
public RealMatrix getCovariance() { [EOL]     return covarianceImpl.getResult(); [EOL] } <line_num>: 264,266
public double[] getMax() { [EOL]     return getResults(maxImpl); [EOL] } <line_num>: 275,277
public double[] getMin() { [EOL]     return getResults(minImpl); [EOL] } <line_num>: 286,288
public double[] getGeometricMean() { [EOL]     return getResults(geoMeanImpl); [EOL] } <line_num>: 297,299
@Override [EOL] public String toString() { [EOL]     final String separator = ", "; [EOL]     final String suffix = System.getProperty("line.separator"); [EOL]     StringBuilder outBuffer = new StringBuilder(); [EOL]     outBuffer.append("MultivariateSummaryStatistics:" + suffix); [EOL]     outBuffer.append("n: " + getN() + suffix); [EOL]     append(outBuffer, getMin(), "min: ", separator, suffix); [EOL]     append(outBuffer, getMax(), "max: ", separator, suffix); [EOL]     append(outBuffer, getMean(), "mean: ", separator, suffix); [EOL]     append(outBuffer, getGeometricMean(), "geometric mean: ", separator, suffix); [EOL]     append(outBuffer, getSumSq(), "sum of squares: ", separator, suffix); [EOL]     append(outBuffer, getSumLog(), "sum of logarithms: ", separator, suffix); [EOL]     append(outBuffer, getStandardDeviation(), "standard deviation: ", separator, suffix); [EOL]     outBuffer.append("covariance: " + getCovariance().toString() + suffix); [EOL]     return outBuffer.toString(); [EOL] } <line_num>: 307,323
private void append(StringBuilder buffer, double[] data, String prefix, String separator, String suffix) { [EOL]     buffer.append(prefix); [EOL]     for (int i = 0; i < data.length; ++i) { [EOL]         if (i > 0) { [EOL]             buffer.append(separator); [EOL]         } [EOL]         buffer.append(data[i]); [EOL]     } [EOL]     buffer.append(suffix); [EOL] } <line_num>: 333,343
public void clear() { [EOL]     this.n = 0; [EOL]     for (int i = 0; i < k; ++i) { [EOL]         minImpl[i].clear(); [EOL]         maxImpl[i].clear(); [EOL]         sumImpl[i].clear(); [EOL]         sumLogImpl[i].clear(); [EOL]         sumSqImpl[i].clear(); [EOL]         geoMeanImpl[i].clear(); [EOL]         meanImpl[i].clear(); [EOL]     } [EOL]     covarianceImpl.clear(); [EOL] } <line_num>: 348,360
@Override [EOL] public boolean equals(Object object) { [EOL]     if (object == this) { [EOL]         return true; [EOL]     } [EOL]     if (object instanceof MultivariateSummaryStatistics == false) { [EOL]         return false; [EOL]     } [EOL]     MultivariateSummaryStatistics stat = (MultivariateSummaryStatistics) object; [EOL]     return MathArrays.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) && MathArrays.equalsIncludingNaN(stat.getMax(), getMax()) && MathArrays.equalsIncludingNaN(stat.getMean(), getMean()) && MathArrays.equalsIncludingNaN(stat.getMin(), getMin()) && Precision.equalsIncludingNaN(stat.getN(), getN()) && MathArrays.equalsIncludingNaN(stat.getSum(), getSum()) && MathArrays.equalsIncludingNaN(stat.getSumSq(), getSumSq()) && MathArrays.equalsIncludingNaN(stat.getSumLog(), getSumLog()) && stat.getCovariance().equals(getCovariance()); [EOL] } <line_num>: 368,386
@Override [EOL] public int hashCode() { [EOL]     int result = 31 + MathUtils.hash(getGeometricMean()); [EOL]     result = result * 31 + MathUtils.hash(getGeometricMean()); [EOL]     result = result * 31 + MathUtils.hash(getMax()); [EOL]     result = result * 31 + MathUtils.hash(getMean()); [EOL]     result = result * 31 + MathUtils.hash(getMin()); [EOL]     result = result * 31 + MathUtils.hash(getN()); [EOL]     result = result * 31 + MathUtils.hash(getSum()); [EOL]     result = result * 31 + MathUtils.hash(getSumSq()); [EOL]     result = result * 31 + MathUtils.hash(getSumLog()); [EOL]     result = result * 31 + getCovariance().hashCode(); [EOL]     return result; [EOL] } <line_num>: 393,406
private void setImpl(StorelessUnivariateStatistic[] newImpl, StorelessUnivariateStatistic[] oldImpl) throws MathIllegalStateException, DimensionMismatchException { [EOL]     checkEmpty(); [EOL]     checkDimension(newImpl.length); [EOL]     System.arraycopy(newImpl, 0, oldImpl, 0, newImpl.length); [EOL] } <line_num>: 418,424
public StorelessUnivariateStatistic[] getSumImpl() { [EOL]     return sumImpl.clone(); [EOL] } <line_num>: 431,433
public void setSumImpl(StorelessUnivariateStatistic[] sumImpl) throws MathIllegalStateException, DimensionMismatchException { [EOL]     setImpl(sumImpl, this.sumImpl); [EOL] } <line_num>: 448,451
public StorelessUnivariateStatistic[] getSumsqImpl() { [EOL]     return sumSqImpl.clone(); [EOL] } <line_num>: 458,460
public void setSumsqImpl(StorelessUnivariateStatistic[] sumsqImpl) throws MathIllegalStateException, DimensionMismatchException { [EOL]     setImpl(sumsqImpl, this.sumSqImpl); [EOL] } <line_num>: 475,478
public StorelessUnivariateStatistic[] getMinImpl() { [EOL]     return minImpl.clone(); [EOL] } <line_num>: 485,487
public void setMinImpl(StorelessUnivariateStatistic[] minImpl) throws MathIllegalStateException, DimensionMismatchException { [EOL]     setImpl(minImpl, this.minImpl); [EOL] } <line_num>: 502,505
public StorelessUnivariateStatistic[] getMaxImpl() { [EOL]     return maxImpl.clone(); [EOL] } <line_num>: 512,514
public void setMaxImpl(StorelessUnivariateStatistic[] maxImpl) throws MathIllegalStateException, DimensionMismatchException { [EOL]     setImpl(maxImpl, this.maxImpl); [EOL] } <line_num>: 529,532
public StorelessUnivariateStatistic[] getSumLogImpl() { [EOL]     return sumLogImpl.clone(); [EOL] } <line_num>: 539,541
public void setSumLogImpl(StorelessUnivariateStatistic[] sumLogImpl) throws MathIllegalStateException, DimensionMismatchException { [EOL]     setImpl(sumLogImpl, this.sumLogImpl); [EOL] } <line_num>: 556,559
public StorelessUnivariateStatistic[] getGeoMeanImpl() { [EOL]     return geoMeanImpl.clone(); [EOL] } <line_num>: 566,568
public void setGeoMeanImpl(StorelessUnivariateStatistic[] geoMeanImpl) throws MathIllegalStateException, DimensionMismatchException { [EOL]     setImpl(geoMeanImpl, this.geoMeanImpl); [EOL] } <line_num>: 583,586
public StorelessUnivariateStatistic[] getMeanImpl() { [EOL]     return meanImpl.clone(); [EOL] } <line_num>: 593,595
public void setMeanImpl(StorelessUnivariateStatistic[] meanImpl) throws MathIllegalStateException, DimensionMismatchException { [EOL]     setImpl(meanImpl, this.meanImpl); [EOL] } <line_num>: 610,613
private void checkEmpty() throws MathIllegalStateException { [EOL]     if (n > 0) { [EOL]         throw new MathIllegalStateException(LocalizedFormats.VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC, n); [EOL]     } [EOL] } <line_num>: 619,624
private void checkDimension(int dimension) throws DimensionMismatchException { [EOL]     if (dimension != k) { [EOL]         throw new DimensionMismatchException(dimension, k); [EOL]     } [EOL] } <line_num>: 631,635
