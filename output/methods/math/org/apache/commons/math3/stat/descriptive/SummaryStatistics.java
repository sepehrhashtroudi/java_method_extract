public SummaryStatistics() { [EOL] } <line_num>: 123,124
public SummaryStatistics(SummaryStatistics original) throws NullArgumentException { [EOL]     copy(original, this); [EOL] } <line_num>: 132,134
public StatisticalSummary getSummary() { [EOL]     return new StatisticalSummaryValues(getMean(), getVariance(), getN(), getMax(), getMin(), getSum()); [EOL] } <line_num>: 141,144
public void addValue(double value) { [EOL]     sumImpl.increment(value); [EOL]     sumsqImpl.increment(value); [EOL]     minImpl.increment(value); [EOL]     maxImpl.increment(value); [EOL]     sumLogImpl.increment(value); [EOL]     secondMoment.increment(value); [EOL]     if (meanImpl != mean) { [EOL]         meanImpl.increment(value); [EOL]     } [EOL]     if (varianceImpl != variance) { [EOL]         varianceImpl.increment(value); [EOL]     } [EOL]     if (geoMeanImpl != geoMean) { [EOL]         geoMeanImpl.increment(value); [EOL]     } [EOL]     n++; [EOL] } <line_num>: 150,169
public long getN() { [EOL]     return n; [EOL] } <line_num>: 175,177
public double getSum() { [EOL]     return sumImpl.getResult(); [EOL] } <line_num>: 183,185
public double getSumsq() { [EOL]     return sumsqImpl.getResult(); [EOL] } <line_num>: 194,196
public double getMean() { [EOL]     return meanImpl.getResult(); [EOL] } <line_num>: 205,207
public double getStandardDeviation() { [EOL]     double stdDev = Double.NaN; [EOL]     if (getN() > 0) { [EOL]         if (getN() > 1) { [EOL]             stdDev = FastMath.sqrt(getVariance()); [EOL]         } else { [EOL]             stdDev = 0.0; [EOL]         } [EOL]     } [EOL]     return stdDev; [EOL] } <line_num>: 216,226
public double getVariance() { [EOL]     return varianceImpl.getResult(); [EOL] } <line_num>: 239,241
public double getPopulationVariance() { [EOL]     Variance populationVariance = new Variance(secondMoment); [EOL]     populationVariance.setBiasCorrected(false); [EOL]     return populationVariance.getResult(); [EOL] } <line_num>: 251,255
public double getMax() { [EOL]     return maxImpl.getResult(); [EOL] } <line_num>: 264,266
public double getMin() { [EOL]     return minImpl.getResult(); [EOL] } <line_num>: 275,277
public double getGeometricMean() { [EOL]     return geoMeanImpl.getResult(); [EOL] } <line_num>: 286,288
public double getSumOfLogs() { [EOL]     return sumLogImpl.getResult(); [EOL] } <line_num>: 298,300
public double getSecondMoment() { [EOL]     return secondMoment.getResult(); [EOL] } <line_num>: 313,315
@Override [EOL] public String toString() { [EOL]     StringBuilder outBuffer = new StringBuilder(); [EOL]     String endl = "\n"; [EOL]     outBuffer.append("SummaryStatistics:").append(endl); [EOL]     outBuffer.append("n: ").append(getN()).append(endl); [EOL]     outBuffer.append("min: ").append(getMin()).append(endl); [EOL]     outBuffer.append("max: ").append(getMax()).append(endl); [EOL]     outBuffer.append("mean: ").append(getMean()).append(endl); [EOL]     outBuffer.append("geometric mean: ").append(getGeometricMean()).append(endl); [EOL]     outBuffer.append("variance: ").append(getVariance()).append(endl); [EOL]     outBuffer.append("sum of squares: ").append(getSumsq()).append(endl); [EOL]     outBuffer.append("standard deviation: ").append(getStandardDeviation()).append(endl); [EOL]     outBuffer.append("sum of logs: ").append(getSumOfLogs()).append(endl); [EOL]     return outBuffer.toString(); [EOL] } <line_num>: 323,340
public void clear() { [EOL]     this.n = 0; [EOL]     minImpl.clear(); [EOL]     maxImpl.clear(); [EOL]     sumImpl.clear(); [EOL]     sumLogImpl.clear(); [EOL]     sumsqImpl.clear(); [EOL]     geoMeanImpl.clear(); [EOL]     secondMoment.clear(); [EOL]     if (meanImpl != mean) { [EOL]         meanImpl.clear(); [EOL]     } [EOL]     if (varianceImpl != variance) { [EOL]         varianceImpl.clear(); [EOL]     } [EOL] } <line_num>: 345,360
@Override [EOL] public boolean equals(Object object) { [EOL]     if (object == this) { [EOL]         return true; [EOL]     } [EOL]     if (object instanceof SummaryStatistics == false) { [EOL]         return false; [EOL]     } [EOL]     SummaryStatistics stat = (SummaryStatistics) object; [EOL]     return Precision.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) && Precision.equalsIncludingNaN(stat.getMax(), getMax()) && Precision.equalsIncludingNaN(stat.getMean(), getMean()) && Precision.equalsIncludingNaN(stat.getMin(), getMin()) && Precision.equalsIncludingNaN(stat.getN(), getN()) && Precision.equalsIncludingNaN(stat.getSum(), getSum()) && Precision.equalsIncludingNaN(stat.getSumsq(), getSumsq()) && Precision.equalsIncludingNaN(stat.getVariance(), getVariance()); [EOL] } <line_num>: 369,386
@Override [EOL] public int hashCode() { [EOL]     int result = 31 + MathUtils.hash(getGeometricMean()); [EOL]     result = result * 31 + MathUtils.hash(getGeometricMean()); [EOL]     result = result * 31 + MathUtils.hash(getMax()); [EOL]     result = result * 31 + MathUtils.hash(getMean()); [EOL]     result = result * 31 + MathUtils.hash(getMin()); [EOL]     result = result * 31 + MathUtils.hash(getN()); [EOL]     result = result * 31 + MathUtils.hash(getSum()); [EOL]     result = result * 31 + MathUtils.hash(getSumsq()); [EOL]     result = result * 31 + MathUtils.hash(getVariance()); [EOL]     return result; [EOL] } <line_num>: 392,404
public StorelessUnivariateStatistic getSumImpl() { [EOL]     return sumImpl; [EOL] } <line_num>: 412,414
public void setSumImpl(StorelessUnivariateStatistic sumImpl) throws MathIllegalStateException { [EOL]     checkEmpty(); [EOL]     this.sumImpl = sumImpl; [EOL] } <line_num>: 430,434
public StorelessUnivariateStatistic getSumsqImpl() { [EOL]     return sumsqImpl; [EOL] } <line_num>: 441,443
public void setSumsqImpl(StorelessUnivariateStatistic sumsqImpl) throws MathIllegalStateException { [EOL]     checkEmpty(); [EOL]     this.sumsqImpl = sumsqImpl; [EOL] } <line_num>: 459,463
public StorelessUnivariateStatistic getMinImpl() { [EOL]     return minImpl; [EOL] } <line_num>: 470,472
public void setMinImpl(StorelessUnivariateStatistic minImpl) throws MathIllegalStateException { [EOL]     checkEmpty(); [EOL]     this.minImpl = minImpl; [EOL] } <line_num>: 488,492
public StorelessUnivariateStatistic getMaxImpl() { [EOL]     return maxImpl; [EOL] } <line_num>: 499,501
public void setMaxImpl(StorelessUnivariateStatistic maxImpl) throws MathIllegalStateException { [EOL]     checkEmpty(); [EOL]     this.maxImpl = maxImpl; [EOL] } <line_num>: 517,521
public StorelessUnivariateStatistic getSumLogImpl() { [EOL]     return sumLogImpl; [EOL] } <line_num>: 528,530
public void setSumLogImpl(StorelessUnivariateStatistic sumLogImpl) throws MathIllegalStateException { [EOL]     checkEmpty(); [EOL]     this.sumLogImpl = sumLogImpl; [EOL]     geoMean.setSumLogImpl(sumLogImpl); [EOL] } <line_num>: 546,551
public StorelessUnivariateStatistic getGeoMeanImpl() { [EOL]     return geoMeanImpl; [EOL] } <line_num>: 558,560
public void setGeoMeanImpl(StorelessUnivariateStatistic geoMeanImpl) throws MathIllegalStateException { [EOL]     checkEmpty(); [EOL]     this.geoMeanImpl = geoMeanImpl; [EOL] } <line_num>: 576,580
public StorelessUnivariateStatistic getMeanImpl() { [EOL]     return meanImpl; [EOL] } <line_num>: 587,589
public void setMeanImpl(StorelessUnivariateStatistic meanImpl) throws MathIllegalStateException { [EOL]     checkEmpty(); [EOL]     this.meanImpl = meanImpl; [EOL] } <line_num>: 605,609
public StorelessUnivariateStatistic getVarianceImpl() { [EOL]     return varianceImpl; [EOL] } <line_num>: 616,618
public void setVarianceImpl(StorelessUnivariateStatistic varianceImpl) throws MathIllegalStateException { [EOL]     checkEmpty(); [EOL]     this.varianceImpl = varianceImpl; [EOL] } <line_num>: 634,638
private void checkEmpty() throws MathIllegalStateException { [EOL]     if (n > 0) { [EOL]         throw new MathIllegalStateException(LocalizedFormats.VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC, n); [EOL]     } [EOL] } <line_num>: 644,649
public SummaryStatistics copy() { [EOL]     SummaryStatistics result = new SummaryStatistics(); [EOL]     copy(this, result); [EOL]     return result; [EOL] } <line_num>: 656,661
public static void copy(SummaryStatistics source, SummaryStatistics dest) throws NullArgumentException { [EOL]     MathUtils.checkNotNull(source); [EOL]     MathUtils.checkNotNull(dest); [EOL]     dest.maxImpl = source.maxImpl.copy(); [EOL]     dest.minImpl = source.minImpl.copy(); [EOL]     dest.sumImpl = source.sumImpl.copy(); [EOL]     dest.sumLogImpl = source.sumLogImpl.copy(); [EOL]     dest.sumsqImpl = source.sumsqImpl.copy(); [EOL]     dest.secondMoment = source.secondMoment.copy(); [EOL]     dest.n = source.n; [EOL]     if (source.getVarianceImpl() instanceof Variance) { [EOL]         dest.varianceImpl = new Variance(dest.secondMoment); [EOL]     } else { [EOL]         dest.varianceImpl = source.varianceImpl.copy(); [EOL]     } [EOL]     if (source.meanImpl instanceof Mean) { [EOL]         dest.meanImpl = new Mean(dest.secondMoment); [EOL]     } else { [EOL]         dest.meanImpl = source.meanImpl.copy(); [EOL]     } [EOL]     if (source.getGeoMeanImpl() instanceof GeometricMean) { [EOL]         dest.geoMeanImpl = new GeometricMean((SumOfLogs) dest.sumLogImpl); [EOL]     } else { [EOL]         dest.geoMeanImpl = source.geoMeanImpl.copy(); [EOL]     } [EOL]     if (source.geoMean == source.geoMeanImpl) { [EOL]         dest.geoMean = (GeometricMean) dest.geoMeanImpl; [EOL]     } else { [EOL]         GeometricMean.copy(source.geoMean, dest.geoMean); [EOL]     } [EOL]     if (source.max == source.maxImpl) { [EOL]         dest.max = (Max) dest.maxImpl; [EOL]     } else { [EOL]         Max.copy(source.max, dest.max); [EOL]     } [EOL]     if (source.mean == source.meanImpl) { [EOL]         dest.mean = (Mean) dest.meanImpl; [EOL]     } else { [EOL]         Mean.copy(source.mean, dest.mean); [EOL]     } [EOL]     if (source.min == source.minImpl) { [EOL]         dest.min = (Min) dest.minImpl; [EOL]     } else { [EOL]         Min.copy(source.min, dest.min); [EOL]     } [EOL]     if (source.sum == source.sumImpl) { [EOL]         dest.sum = (Sum) dest.sumImpl; [EOL]     } else { [EOL]         Sum.copy(source.sum, dest.sum); [EOL]     } [EOL]     if (source.variance == source.varianceImpl) { [EOL]         dest.variance = (Variance) dest.varianceImpl; [EOL]     } else { [EOL]         Variance.copy(source.variance, dest.variance); [EOL]     } [EOL]     if (source.sumLog == source.sumLogImpl) { [EOL]         dest.sumLog = (SumOfLogs) dest.sumLogImpl; [EOL]     } else { [EOL]         SumOfLogs.copy(source.sumLog, dest.sumLog); [EOL]     } [EOL]     if (source.sumsq == source.sumsqImpl) { [EOL]         dest.sumsq = (SumOfSquares) dest.sumsqImpl; [EOL]     } else { [EOL]         SumOfSquares.copy(source.sumsq, dest.sumsq); [EOL]     } [EOL] } <line_num>: 671,742
