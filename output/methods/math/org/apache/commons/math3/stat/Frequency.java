public Frequency() { [EOL]     freqTable = new TreeMap<Comparable<?>, Long>(); [EOL] } <line_num>: 73,75
@SuppressWarnings("unchecked") [EOL] public Frequency(Comparator<?> comparator) { [EOL]     freqTable = new TreeMap<Comparable<?>, Long>((Comparator<? super Comparable<?>>) comparator); [EOL] } <line_num>: 82,85
@Override [EOL] public String toString() { [EOL]     NumberFormat nf = NumberFormat.getPercentInstance(); [EOL]     StringBuilder outBuffer = new StringBuilder(); [EOL]     outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n"); [EOL]     Iterator<Comparable<?>> iter = freqTable.keySet().iterator(); [EOL]     while (iter.hasNext()) { [EOL]         Comparable<?> value = iter.next(); [EOL]         outBuffer.append(value); [EOL]         outBuffer.append('\t'); [EOL]         outBuffer.append(getCount(value)); [EOL]         outBuffer.append('\t'); [EOL]         outBuffer.append(nf.format(getPct(value))); [EOL]         outBuffer.append('\t'); [EOL]         outBuffer.append(nf.format(getCumPct(value))); [EOL]         outBuffer.append('\n'); [EOL]     } [EOL]     return outBuffer.toString(); [EOL] } <line_num>: 93,111
public void addValue(Comparable<?> v) throws MathIllegalArgumentException { [EOL]     incrementValue(v, 1); [EOL] } <line_num>: 123,125
public void incrementValue(Comparable<?> v, long increment) { [EOL]     Comparable<?> obj = v; [EOL]     if (v instanceof Integer) { [EOL]         obj = Long.valueOf(((Integer) v).longValue()); [EOL]     } [EOL]     try { [EOL]         Long count = freqTable.get(obj); [EOL]         if (count == null) { [EOL]             freqTable.put(obj, Long.valueOf(increment)); [EOL]         } else { [EOL]             freqTable.put(obj, Long.valueOf(count.longValue() + increment)); [EOL]         } [EOL]     } catch (ClassCastException ex) { [EOL]         throw new MathIllegalArgumentException(LocalizedFormats.INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES, v.getClass().getName()); [EOL]     } [EOL] } <line_num>: 139,157
public void addValue(int v) throws MathIllegalArgumentException { [EOL]     addValue(Long.valueOf(v)); [EOL] } <line_num>: 166,168
public void addValue(long v) throws MathIllegalArgumentException { [EOL]     addValue(Long.valueOf(v)); [EOL] } <line_num>: 177,179
public void addValue(char v) throws MathIllegalArgumentException { [EOL]     addValue(Character.valueOf(v)); [EOL] } <line_num>: 188,190
public void clear() { [EOL]     freqTable.clear(); [EOL] } <line_num>: 193,195
public Iterator<Comparable<?>> valuesIterator() { [EOL]     return freqTable.keySet().iterator(); [EOL] } <line_num>: 206,208
public Iterator<Map.Entry<Comparable<?>, Long>> entrySetIterator() { [EOL]     return freqTable.entrySet().iterator(); [EOL] } <line_num>: 223,225
public long getSumFreq() { [EOL]     long result = 0; [EOL]     Iterator<Long> iterator = freqTable.values().iterator(); [EOL]     while (iterator.hasNext()) { [EOL]         result += iterator.next().longValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 234,241
public long getCount(Comparable<?> v) { [EOL]     if (v instanceof Integer) { [EOL]         return getCount(((Integer) v).longValue()); [EOL]     } [EOL]     long result = 0; [EOL]     try { [EOL]         Long count = freqTable.get(v); [EOL]         if (count != null) { [EOL]             result = count.longValue(); [EOL]         } [EOL]     } catch (ClassCastException ex) { [EOL]     } [EOL]     return result; [EOL] } <line_num>: 250,264
public long getCount(int v) { [EOL]     return getCount(Long.valueOf(v)); [EOL] } <line_num>: 272,274
public long getCount(long v) { [EOL]     return getCount(Long.valueOf(v)); [EOL] } <line_num>: 282,284
public long getCount(char v) { [EOL]     return getCount(Character.valueOf(v)); [EOL] } <line_num>: 292,294
public int getUniqueCount() { [EOL]     return freqTable.keySet().size(); [EOL] } <line_num>: 302,304
public double getPct(Comparable<?> v) { [EOL]     final long sumFreq = getSumFreq(); [EOL]     if (sumFreq == 0) { [EOL]         return Double.NaN; [EOL]     } [EOL]     return (double) getCount(v) / (double) sumFreq; [EOL] } <line_num>: 317,323
public double getPct(int v) { [EOL]     return getPct(Long.valueOf(v)); [EOL] } <line_num>: 332,334
public double getPct(long v) { [EOL]     return getPct(Long.valueOf(v)); [EOL] } <line_num>: 343,345
public double getPct(char v) { [EOL]     return getPct(Character.valueOf(v)); [EOL] } <line_num>: 354,356
@SuppressWarnings({ "rawtypes", "unchecked" }) [EOL] public long getCumFreq(Comparable<?> v) { [EOL]     if (getSumFreq() == 0) { [EOL]         return 0; [EOL]     } [EOL]     if (v instanceof Integer) { [EOL]         return getCumFreq(((Integer) v).longValue()); [EOL]     } [EOL]     Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator(); [EOL]     if (c == null) { [EOL]         c = new NaturalComparator(); [EOL]     } [EOL]     long result = 0; [EOL]     try { [EOL]         Long value = freqTable.get(v); [EOL]         if (value != null) { [EOL]             result = value.longValue(); [EOL]         } [EOL]     } catch (ClassCastException ex) { [EOL]         return result; [EOL]     } [EOL]     if (c.compare(v, freqTable.firstKey()) < 0) { [EOL]         return 0; [EOL]     } [EOL]     if (c.compare(v, freqTable.lastKey()) >= 0) { [EOL]         return getSumFreq(); [EOL]     } [EOL]     Iterator<Comparable<?>> values = valuesIterator(); [EOL]     while (values.hasNext()) { [EOL]         Comparable<?> nextValue = values.next(); [EOL]         if (c.compare(v, nextValue) > 0) { [EOL]             result += getCount(nextValue); [EOL]         } else { [EOL]             return result; [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 368,409
public long getCumFreq(int v) { [EOL]     return getCumFreq(Long.valueOf(v)); [EOL] } <line_num>: 419,421
public long getCumFreq(long v) { [EOL]     return getCumFreq(Long.valueOf(v)); [EOL] } <line_num>: 431,433
public long getCumFreq(char v) { [EOL]     return getCumFreq(Character.valueOf(v)); [EOL] } <line_num>: 443,445
public double getCumPct(Comparable<?> v) { [EOL]     final long sumFreq = getSumFreq(); [EOL]     if (sumFreq == 0) { [EOL]         return Double.NaN; [EOL]     } [EOL]     return (double) getCumFreq(v) / (double) sumFreq; [EOL] } <line_num>: 460,466
public double getCumPct(int v) { [EOL]     return getCumPct(Long.valueOf(v)); [EOL] } <line_num>: 477,479
public double getCumPct(long v) { [EOL]     return getCumPct(Long.valueOf(v)); [EOL] } <line_num>: 490,492
public double getCumPct(char v) { [EOL]     return getCumPct(Character.valueOf(v)); [EOL] } <line_num>: 503,505
public List<Comparable<?>> getMode() { [EOL]     long mostPopular = 0; [EOL]     for (Long l : freqTable.values()) { [EOL]         long frequency = l.longValue(); [EOL]         if (frequency > mostPopular) { [EOL]             mostPopular = frequency; [EOL]         } [EOL]     } [EOL]     List<Comparable<?>> modeList = new ArrayList<Comparable<?>>(); [EOL]     for (Entry<Comparable<?>, Long> ent : freqTable.entrySet()) { [EOL]         long frequency = ent.getValue().longValue(); [EOL]         if (frequency == mostPopular) { [EOL]             modeList.add(ent.getKey()); [EOL]         } [EOL]     } [EOL]     return modeList; [EOL] } <line_num>: 513,532
public void merge(final Frequency other) throws NullArgumentException { [EOL]     MathUtils.checkNotNull(other, LocalizedFormats.NULL_NOT_ALLOWED); [EOL]     final Iterator<Map.Entry<Comparable<?>, Long>> iter = other.entrySetIterator(); [EOL]     while (iter.hasNext()) { [EOL]         final Map.Entry<Comparable<?>, Long> entry = iter.next(); [EOL]         incrementValue(entry.getKey(), entry.getValue().longValue()); [EOL]     } [EOL] } <line_num>: 545,553
public void merge(final Collection<Frequency> others) throws NullArgumentException { [EOL]     MathUtils.checkNotNull(others, LocalizedFormats.NULL_NOT_ALLOWED); [EOL]     for (final Frequency freq : others) { [EOL]         merge(freq); [EOL]     } [EOL] } <line_num>: 564,570
@SuppressWarnings("unchecked") [EOL] public int compare(Comparable<T> o1, Comparable<T> o2) { [EOL]     return o1.compareTo((T) o2); [EOL] } <line_num>: 596,599
@Override [EOL] public int hashCode() { [EOL]     final int prime = 31; [EOL]     int result = 1; [EOL]     result = prime * result + ((freqTable == null) ? 0 : freqTable.hashCode()); [EOL]     return result; [EOL] } <line_num>: 603,610
@Override [EOL] public boolean equals(Object obj) { [EOL]     if (this == obj) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof Frequency)) { [EOL]         return false; [EOL]     } [EOL]     Frequency other = (Frequency) obj; [EOL]     if (freqTable == null) { [EOL]         if (other.freqTable != null) { [EOL]             return false; [EOL]         } [EOL]     } else if (!freqTable.equals(other.freqTable)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 613,630
