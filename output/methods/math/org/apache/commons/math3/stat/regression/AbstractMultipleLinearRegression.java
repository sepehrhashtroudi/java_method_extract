protected RealMatrix getX() { [EOL]     return xMatrix; [EOL] } <line_num>: 53,55
protected RealVector getY() { [EOL]     return yVector; [EOL] } <line_num>: 60,62
public boolean isNoIntercept() { [EOL]     return noIntercept; [EOL] } <line_num>: 68,70
public void setNoIntercept(boolean noIntercept) { [EOL]     this.noIntercept = noIntercept; [EOL] } <line_num>: 76,78
public void newSampleData(double[] data, int nobs, int nvars) { [EOL]     if (data == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     if (data.length != nobs * (nvars + 1)) { [EOL]         throw new DimensionMismatchException(data.length, nobs * (nvars + 1)); [EOL]     } [EOL]     if (nobs <= nvars) { [EOL]         throw new NumberIsTooSmallException(nobs, nvars, false); [EOL]     } [EOL]     double[] y = new double[nobs]; [EOL]     final int cols = noIntercept ? nvars : nvars + 1; [EOL]     double[][] x = new double[nobs][cols]; [EOL]     int pointer = 0; [EOL]     for (int i = 0; i < nobs; i++) { [EOL]         y[i] = data[pointer++]; [EOL]         if (!noIntercept) { [EOL]             x[i][0] = 1.0d; [EOL]         } [EOL]         for (int j = noIntercept ? 0 : 1; j < cols; j++) { [EOL]             x[i][j] = data[pointer++]; [EOL]         } [EOL]     } [EOL]     this.xMatrix = new Array2DRowRealMatrix(x); [EOL]     this.yVector = new ArrayRealVector(y); [EOL] } <line_num>: 115,140
protected void newYSampleData(double[] y) { [EOL]     if (y == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     if (y.length == 0) { [EOL]         throw new NoDataException(); [EOL]     } [EOL]     this.yVector = new ArrayRealVector(y); [EOL] } <line_num>: 149,157
protected void newXSampleData(double[][] x) { [EOL]     if (x == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     if (x.length == 0) { [EOL]         throw new NoDataException(); [EOL]     } [EOL]     if (noIntercept) { [EOL]         this.xMatrix = new Array2DRowRealMatrix(x, true); [EOL]     } else { [EOL]         final int nVars = x[0].length; [EOL]         final double[][] xAug = new double[x.length][nVars + 1]; [EOL]         for (int i = 0; i < x.length; i++) { [EOL]             if (x[i].length != nVars) { [EOL]                 throw new DimensionMismatchException(x[i].length, nVars); [EOL]             } [EOL]             xAug[i][0] = 1.0d; [EOL]             System.arraycopy(x[i], 0, xAug[i], 1, nVars); [EOL]         } [EOL]         this.xMatrix = new Array2DRowRealMatrix(xAug, false); [EOL]     } [EOL] } <line_num>: 184,205
protected void validateSampleData(double[][] x, double[] y) throws MathIllegalArgumentException { [EOL]     if ((x == null) || (y == null)) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     if (x.length != y.length) { [EOL]         throw new DimensionMismatchException(y.length, x.length); [EOL]     } [EOL]     if (x.length == 0) { [EOL]         throw new NoDataException(); [EOL]     } [EOL]     if (x[0].length + 1 > x.length) { [EOL]         throw new MathIllegalArgumentException(LocalizedFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, x.length, x[0].length); [EOL]     } [EOL] } <line_num>: 225,240
protected void validateCovarianceData(double[][] x, double[][] covariance) { [EOL]     if (x.length != covariance.length) { [EOL]         throw new DimensionMismatchException(x.length, covariance.length); [EOL]     } [EOL]     if (covariance.length > 0 && covariance.length != covariance[0].length) { [EOL]         throw new NonSquareMatrixException(covariance.length, covariance[0].length); [EOL]     } [EOL] } <line_num>: 252,259
public double[] estimateRegressionParameters() { [EOL]     RealVector b = calculateBeta(); [EOL]     return b.toArray(); [EOL] } <line_num>: 264,267
public double[] estimateResiduals() { [EOL]     RealVector b = calculateBeta(); [EOL]     RealVector e = yVector.subtract(xMatrix.operate(b)); [EOL]     return e.toArray(); [EOL] } <line_num>: 272,276
public double[][] estimateRegressionParametersVariance() { [EOL]     return calculateBetaVariance().getData(); [EOL] } <line_num>: 281,283
public double[] estimateRegressionParametersStandardErrors() { [EOL]     double[][] betaVariance = estimateRegressionParametersVariance(); [EOL]     double sigma = calculateErrorVariance(); [EOL]     int length = betaVariance[0].length; [EOL]     double[] result = new double[length]; [EOL]     for (int i = 0; i < length; i++) { [EOL]         result[i] = FastMath.sqrt(sigma * betaVariance[i][i]); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 288,297
public double estimateRegressandVariance() { [EOL]     return calculateYVariance(); [EOL] } <line_num>: 302,304
public double estimateErrorVariance() { [EOL]     return calculateErrorVariance(); [EOL] } <line_num>: 312,315
public double estimateRegressionStandardError() { [EOL]     return Math.sqrt(estimateErrorVariance()); [EOL] } <line_num>: 323,325
protected abstract RealVector calculateBeta(); <line_num>: 332,332
protected abstract RealMatrix calculateBetaVariance(); <line_num>: 340,340
protected double calculateYVariance() { [EOL]     return new Variance().evaluate(yVector.toArray()); [EOL] } <line_num>: 348,350
protected double calculateErrorVariance() { [EOL]     RealVector residuals = calculateResiduals(); [EOL]     return residuals.dotProduct(residuals) / (xMatrix.getRowDimension() - xMatrix.getColumnDimension()); [EOL] } <line_num>: 363,367
protected RealVector calculateResiduals() { [EOL]     RealVector b = calculateBeta(); [EOL]     return yVector.subtract(xMatrix.operate(b)); [EOL] } <line_num>: 379,382
