public PearsonsCorrelation() { [EOL]     super(); [EOL]     correlationMatrix = null; [EOL]     nObs = 0; [EOL] } <line_num>: 55,59
public PearsonsCorrelation(double[][] data) { [EOL]     this(new BlockRealMatrix(data)); [EOL] } <line_num>: 69,71
public PearsonsCorrelation(RealMatrix matrix) { [EOL]     checkSufficientData(matrix); [EOL]     nObs = matrix.getRowDimension(); [EOL]     correlationMatrix = computeCorrelationMatrix(matrix); [EOL] } <line_num>: 79,83
public PearsonsCorrelation(Covariance covariance) { [EOL]     RealMatrix covarianceMatrix = covariance.getCovarianceMatrix(); [EOL]     if (covarianceMatrix == null) { [EOL]         throw new NullArgumentException(LocalizedFormats.COVARIANCE_MATRIX); [EOL]     } [EOL]     nObs = covariance.getN(); [EOL]     correlationMatrix = covarianceToCorrelation(covarianceMatrix); [EOL] } <line_num>: 93,100
public PearsonsCorrelation(RealMatrix covarianceMatrix, int numberOfObservations) { [EOL]     nObs = numberOfObservations; [EOL]     correlationMatrix = covarianceToCorrelation(covarianceMatrix); [EOL] } <line_num>: 110,114
public RealMatrix getCorrelationMatrix() { [EOL]     return correlationMatrix; [EOL] } <line_num>: 121,123
public RealMatrix getCorrelationStandardErrors() { [EOL]     int nVars = correlationMatrix.getColumnDimension(); [EOL]     double[][] out = new double[nVars][nVars]; [EOL]     for (int i = 0; i < nVars; i++) { [EOL]         for (int j = 0; j < nVars; j++) { [EOL]             double r = correlationMatrix.getEntry(i, j); [EOL]             out[i][j] = FastMath.sqrt((1 - r * r) / (nObs - 2)); [EOL]         } [EOL]     } [EOL]     return new BlockRealMatrix(out); [EOL] } <line_num>: 137,147
public RealMatrix getCorrelationPValues() { [EOL]     TDistribution tDistribution = new TDistribution(nObs - 2); [EOL]     int nVars = correlationMatrix.getColumnDimension(); [EOL]     double[][] out = new double[nVars][nVars]; [EOL]     for (int i = 0; i < nVars; i++) { [EOL]         for (int j = 0; j < nVars; j++) { [EOL]             if (i == j) { [EOL]                 out[i][j] = 0d; [EOL]             } else { [EOL]                 double r = correlationMatrix.getEntry(i, j); [EOL]                 double t = FastMath.abs(r * FastMath.sqrt((nObs - 2) / (1 - r * r))); [EOL]                 out[i][j] = 2 * tDistribution.cumulativeProbability(-t); [EOL]             } [EOL]         } [EOL]     } [EOL]     return new BlockRealMatrix(out); [EOL] } <line_num>: 163,179
public RealMatrix computeCorrelationMatrix(RealMatrix matrix) { [EOL]     int nVars = matrix.getColumnDimension(); [EOL]     RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars); [EOL]     for (int i = 0; i < nVars; i++) { [EOL]         for (int j = 0; j < i; j++) { [EOL]             double corr = correlation(matrix.getColumn(i), matrix.getColumn(j)); [EOL]             outMatrix.setEntry(i, j, corr); [EOL]             outMatrix.setEntry(j, i, corr); [EOL]         } [EOL]         outMatrix.setEntry(i, i, 1d); [EOL]     } [EOL]     return outMatrix; [EOL] } <line_num>: 189,201
public RealMatrix computeCorrelationMatrix(double[][] data) { [EOL]     return computeCorrelationMatrix(new BlockRealMatrix(data)); [EOL] } <line_num>: 211,213
public double correlation(final double[] xArray, final double[] yArray) { [EOL]     SimpleRegression regression = new SimpleRegression(); [EOL]     if (xArray.length != yArray.length) { [EOL]         throw new DimensionMismatchException(xArray.length, yArray.length); [EOL]     } else if (xArray.length < 2) { [EOL]         throw new MathIllegalArgumentException(LocalizedFormats.INSUFFICIENT_DIMENSION, xArray.length, 2); [EOL]     } else { [EOL]         for (int i = 0; i < xArray.length; i++) { [EOL]             regression.addData(xArray[i], yArray[i]); [EOL]         } [EOL]         return regression.getR(); [EOL]     } [EOL] } <line_num>: 227,240
public RealMatrix covarianceToCorrelation(RealMatrix covarianceMatrix) { [EOL]     int nVars = covarianceMatrix.getColumnDimension(); [EOL]     RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars); [EOL]     for (int i = 0; i < nVars; i++) { [EOL]         double sigma = FastMath.sqrt(covarianceMatrix.getEntry(i, i)); [EOL]         outMatrix.setEntry(i, i, 1d); [EOL]         for (int j = 0; j < i; j++) { [EOL]             double entry = covarianceMatrix.getEntry(i, j) / (sigma * FastMath.sqrt(covarianceMatrix.getEntry(j, j))); [EOL]             outMatrix.setEntry(i, j, entry); [EOL]             outMatrix.setEntry(j, i, entry); [EOL]         } [EOL]     } [EOL]     return outMatrix; [EOL] } <line_num>: 253,267
private void checkSufficientData(final RealMatrix matrix) { [EOL]     int nRows = matrix.getRowDimension(); [EOL]     int nCols = matrix.getColumnDimension(); [EOL]     if (nRows < 2 || nCols < 2) { [EOL]         throw new MathIllegalArgumentException(LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS, nRows, nCols); [EOL]     } [EOL] } <line_num>: 276,283
