public double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException { [EOL]     if (expected.length < 2) { [EOL]         throw new DimensionMismatchException(expected.length, 2); [EOL]     } [EOL]     if (expected.length != observed.length) { [EOL]         throw new DimensionMismatchException(expected.length, observed.length); [EOL]     } [EOL]     MathArrays.checkPositive(expected); [EOL]     MathArrays.checkNonNegative(observed); [EOL]     double sumExpected = 0d; [EOL]     double sumObserved = 0d; [EOL]     for (int i = 0; i < observed.length; i++) { [EOL]         sumExpected += expected[i]; [EOL]         sumObserved += observed[i]; [EOL]     } [EOL]     double ratio = 1d; [EOL]     boolean rescale = false; [EOL]     if (Math.abs(sumExpected - sumObserved) > 10E-6) { [EOL]         ratio = sumObserved / sumExpected; [EOL]         rescale = true; [EOL]     } [EOL]     double sum = 0d; [EOL]     for (int i = 0; i < observed.length; i++) { [EOL]         final double dev = rescale ? FastMath.log((double) observed[i] / (ratio * expected[i])) : FastMath.log((double) observed[i] / expected[i]); [EOL]         sum += ((double) observed[i]) * dev; [EOL]     } [EOL]     return 2d * sum; [EOL] } <line_num>: 77,110
public double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException { [EOL]     final ChiSquaredDistribution distribution = new ChiSquaredDistribution(expected.length - 1.0); [EOL]     return 1.0 - distribution.cumulativeProbability(g(expected, observed)); [EOL] } <line_num>: 152,160
public double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException { [EOL]     final ChiSquaredDistribution distribution = new ChiSquaredDistribution(expected.length - 2.0); [EOL]     return 1.0 - distribution.cumulativeProbability(g(expected, observed)); [EOL] } <line_num>: 183,191
public boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException { [EOL]     if ((alpha <= 0) || (alpha > 0.5)) { [EOL]         throw new OutOfRangeException(LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL, alpha, 0, 0.5); [EOL]     } [EOL]     return gTest(expected, observed) < alpha; [EOL] } <line_num>: 237,247
private double entropy(final long[][] k) { [EOL]     double h = 0d; [EOL]     double sum_k = 0d; [EOL]     for (int i = 0; i < k.length; i++) { [EOL]         for (int j = 0; j < k[i].length; j++) { [EOL]             sum_k += (double) k[i][j]; [EOL]         } [EOL]     } [EOL]     for (int i = 0; i < k.length; i++) { [EOL]         for (int j = 0; j < k[i].length; j++) { [EOL]             if (k[i][j] != 0) { [EOL]                 final double p_ij = (double) k[i][j] / sum_k; [EOL]                 h += p_ij * Math.log(p_ij); [EOL]             } [EOL]         } [EOL]     } [EOL]     return -h; [EOL] } <line_num>: 261,278
private double entropy(final long[] k) { [EOL]     double h = 0d; [EOL]     double sum_k = 0d; [EOL]     for (int i = 0; i < k.length; i++) { [EOL]         sum_k += (double) k[i]; [EOL]     } [EOL]     for (int i = 0; i < k.length; i++) { [EOL]         if (k[i] != 0) { [EOL]             final double p_i = (double) k[i] / sum_k; [EOL]             h += p_i * Math.log(p_i); [EOL]         } [EOL]     } [EOL]     return -h; [EOL] } <line_num>: 291,304
public double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException { [EOL]     if (observed1.length < 2) { [EOL]         throw new DimensionMismatchException(observed1.length, 2); [EOL]     } [EOL]     if (observed1.length != observed2.length) { [EOL]         throw new DimensionMismatchException(observed1.length, observed2.length); [EOL]     } [EOL]     MathArrays.checkNonNegative(observed1); [EOL]     MathArrays.checkNonNegative(observed2); [EOL]     long countSum1 = 0; [EOL]     long countSum2 = 0; [EOL]     final long[] collSums = new long[observed1.length]; [EOL]     final long[][] k = new long[2][observed1.length]; [EOL]     for (int i = 0; i < observed1.length; i++) { [EOL]         if (observed1[i] == 0 && observed2[i] == 0) { [EOL]             throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i); [EOL]         } else { [EOL]             countSum1 += observed1[i]; [EOL]             countSum2 += observed2[i]; [EOL]             collSums[i] = observed1[i] + observed2[i]; [EOL]             k[0][i] = observed1[i]; [EOL]             k[1][i] = observed2[i]; [EOL]         } [EOL]     } [EOL]     if (countSum1 == 0 || countSum2 == 0) { [EOL]         throw new ZeroException(); [EOL]     } [EOL]     final long[] rowSums = { countSum1, countSum2 }; [EOL]     final double sum = (double) countSum1 + (double) countSum2; [EOL]     return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k)); [EOL] } <line_num>: 348,389
public double rootLogLikelihoodRatio(final long k11, long k12, final long k21, final long k22) { [EOL]     final double llr = gDataSetsComparison(new long[] { k11, k12 }, new long[] { k21, k22 }); [EOL]     double sqrt = FastMath.sqrt(llr); [EOL]     if ((double) k11 / (k11 + k12) < (double) k21 / (k21 + k22)) { [EOL]         sqrt = -sqrt; [EOL]     } [EOL]     return sqrt; [EOL] } <line_num>: 421,430
public double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException { [EOL]     final ChiSquaredDistribution distribution = new ChiSquaredDistribution((double) observed1.length - 1); [EOL]     return 1 - distribution.cumulativeProbability(gDataSetsComparison(observed1, observed2)); [EOL] } <line_num>: 472,480
public boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException { [EOL]     if (alpha <= 0 || alpha > 0.5) { [EOL]         throw new OutOfRangeException(LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL, alpha, 0, 0.5); [EOL]     } [EOL]     return gTestDataSetsComparison(observed1, observed2) < alpha; [EOL] } <line_num>: 524,536
