public Kurtosis() { [EOL]     incMoment = true; [EOL]     moment = new FourthMoment(); [EOL] } <line_num>: 67,70
public Kurtosis(final FourthMoment m4) { [EOL]     incMoment = false; [EOL]     this.moment = m4; [EOL] } <line_num>: 77,80
public Kurtosis(Kurtosis original) throws NullArgumentException { [EOL]     copy(original, this); [EOL] } <line_num>: 89,91
@Override [EOL] public void increment(final double d) { [EOL]     if (incMoment) { [EOL]         moment.increment(d); [EOL]     } [EOL] } <line_num>: 99,104
@Override [EOL] public double getResult() { [EOL]     double kurtosis = Double.NaN; [EOL]     if (moment.getN() > 3) { [EOL]         double variance = moment.m2 / (moment.n - 1); [EOL]         if (moment.n <= 3 || variance < 10E-20) { [EOL]             kurtosis = 0.0; [EOL]         } else { [EOL]             double n = moment.n; [EOL]             kurtosis = (n * (n + 1) * moment.getResult() - 3 * moment.m2 * moment.m2 * (n - 1)) / ((n - 1) * (n - 2) * (n - 3) * variance * variance); [EOL]         } [EOL]     } [EOL]     return kurtosis; [EOL] } <line_num>: 109,125
@Override [EOL] public void clear() { [EOL]     if (incMoment) { [EOL]         moment.clear(); [EOL]     } [EOL] } <line_num>: 130,135
public long getN() { [EOL]     return moment.getN(); [EOL] } <line_num>: 140,142
@Override [EOL] public double evaluate(final double[] values, final int begin, final int length) throws MathIllegalArgumentException { [EOL]     double kurt = Double.NaN; [EOL]     if (test(values, begin, length) && length > 3) { [EOL]         Variance variance = new Variance(); [EOL]         variance.incrementAll(values, begin, length); [EOL]         double mean = variance.moment.m1; [EOL]         double stdDev = FastMath.sqrt(variance.getResult()); [EOL]         double accum3 = 0.0; [EOL]         for (int i = begin; i < begin + length; i++) { [EOL]             accum3 += FastMath.pow(values[i] - mean, 4.0); [EOL]         } [EOL]         accum3 /= FastMath.pow(stdDev, 4.0d); [EOL]         double n0 = length; [EOL]         double coefficientOne = (n0 * (n0 + 1)) / ((n0 - 1) * (n0 - 2) * (n0 - 3)); [EOL]         double termTwo = (3 * FastMath.pow(n0 - 1, 2.0)) / ((n0 - 2) * (n0 - 3)); [EOL]         kurt = (coefficientOne * accum3) - termTwo; [EOL]     } [EOL]     return kurt; [EOL] } <line_num>: 161,195
@Override [EOL] public Kurtosis copy() { [EOL]     Kurtosis result = new Kurtosis(); [EOL]     copy(this, result); [EOL]     return result; [EOL] } <line_num>: 200,206
public static void copy(Kurtosis source, Kurtosis dest) throws NullArgumentException { [EOL]     MathUtils.checkNotNull(source); [EOL]     MathUtils.checkNotNull(dest); [EOL]     dest.setData(source.getDataRef()); [EOL]     dest.moment = source.moment.copy(); [EOL]     dest.incMoment = source.incMoment; [EOL] } <line_num>: 216,223
