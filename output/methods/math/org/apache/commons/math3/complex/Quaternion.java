public Quaternion(final double a, final double b, final double c, final double d) { [EOL]     this.q0 = a; [EOL]     this.q1 = b; [EOL]     this.q2 = c; [EOL]     this.q3 = d; [EOL] } <line_num>: 69,77
public Quaternion(final double scalar, final double[] v) throws DimensionMismatchException { [EOL]     if (v.length != 3) { [EOL]         throw new DimensionMismatchException(v.length, 3); [EOL]     } [EOL]     this.q0 = scalar; [EOL]     this.q1 = v[0]; [EOL]     this.q2 = v[1]; [EOL]     this.q3 = v[2]; [EOL] } <line_num>: 87,97
public Quaternion(final double[] v) { [EOL]     this(0, v); [EOL] } <line_num>: 105,107
public Quaternion getConjugate() { [EOL]     return new Quaternion(q0, -q1, -q2, -q3); [EOL] } <line_num>: 114,116
public static Quaternion multiply(final Quaternion q1, final Quaternion q2) { [EOL]     final double q1a = q1.getQ0(); [EOL]     final double q1b = q1.getQ1(); [EOL]     final double q1c = q1.getQ2(); [EOL]     final double q1d = q1.getQ3(); [EOL]     final double q2a = q2.getQ0(); [EOL]     final double q2b = q2.getQ1(); [EOL]     final double q2c = q2.getQ2(); [EOL]     final double q2d = q2.getQ3(); [EOL]     final double w = q1a * q2a - q1b * q2b - q1c * q2c - q1d * q2d; [EOL]     final double x = q1a * q2b + q1b * q2a + q1c * q2d - q1d * q2c; [EOL]     final double y = q1a * q2c - q1b * q2d + q1c * q2a + q1d * q2b; [EOL]     final double z = q1a * q2d + q1b * q2c - q1c * q2b + q1d * q2a; [EOL]     return new Quaternion(w, x, y, z); [EOL] } <line_num>: 125,145
public Quaternion multiply(final Quaternion q) { [EOL]     return multiply(this, q); [EOL] } <line_num>: 153,155
public static Quaternion add(final Quaternion q1, final Quaternion q2) { [EOL]     return new Quaternion(q1.getQ0() + q2.getQ0(), q1.getQ1() + q2.getQ1(), q1.getQ2() + q2.getQ2(), q1.getQ3() + q2.getQ3()); [EOL] } <line_num>: 164,170
public Quaternion add(final Quaternion q) { [EOL]     return add(this, q); [EOL] } <line_num>: 178,180
public static Quaternion subtract(final Quaternion q1, final Quaternion q2) { [EOL]     return new Quaternion(q1.getQ0() - q2.getQ0(), q1.getQ1() - q2.getQ1(), q1.getQ2() - q2.getQ2(), q1.getQ3() - q2.getQ3()); [EOL] } <line_num>: 189,195
public Quaternion subtract(final Quaternion q) { [EOL]     return subtract(this, q); [EOL] } <line_num>: 203,205
public static double dotProduct(final Quaternion q1, final Quaternion q2) { [EOL]     return q1.getQ0() * q2.getQ0() + q1.getQ1() * q2.getQ1() + q1.getQ2() * q2.getQ2() + q1.getQ3() * q2.getQ3(); [EOL] } <line_num>: 214,220
public double dotProduct(final Quaternion q) { [EOL]     return dotProduct(this, q); [EOL] } <line_num>: 228,230
public double getNorm() { [EOL]     return FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3); [EOL] } <line_num>: 237,242
public Quaternion normalize() { [EOL]     final double norm = getNorm(); [EOL]     if (norm < Precision.SAFE_MIN) { [EOL]         throw new ZeroException(LocalizedFormats.NORM, norm); [EOL]     } [EOL]     return new Quaternion(q0 / norm, q1 / norm, q2 / norm, q3 / norm); [EOL] } <line_num>: 251,262
@Override [EOL] public boolean equals(Object other) { [EOL]     if (this == other) { [EOL]         return true; [EOL]     } [EOL]     if (other instanceof Quaternion) { [EOL]         final Quaternion q = (Quaternion) other; [EOL]         return q0 == q.getQ0() && q1 == q.getQ1() && q2 == q.getQ2() && q3 == q.getQ3(); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 267,281
@Override [EOL] public int hashCode() { [EOL]     int result = 17; [EOL]     for (double comp : new double[] { q0, q1, q2, q3 }) { [EOL]         final int c = MathUtils.hash(comp); [EOL]         result = 31 * result + c; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 286,295
public boolean equals(final Quaternion q, final double eps) { [EOL]     return Precision.equals(q0, q.getQ0(), eps) && Precision.equals(q1, q.getQ1(), eps) && Precision.equals(q2, q.getQ2(), eps) && Precision.equals(q3, q.getQ3(), eps); [EOL] } <line_num>: 306,312
public boolean isUnitQuaternion(double eps) { [EOL]     return Precision.equals(getNorm(), 1d, eps); [EOL] } <line_num>: 322,324
public boolean isPureQuaternion(double eps) { [EOL]     return FastMath.abs(getQ0()) <= eps; [EOL] } <line_num>: 333,335
public Quaternion getPositivePolarForm() { [EOL]     if (getQ0() < 0) { [EOL]         final Quaternion unitQ = normalize(); [EOL]         return new Quaternion(-unitQ.getQ0(), -unitQ.getQ1(), -unitQ.getQ2(), -unitQ.getQ3()); [EOL]     } else { [EOL]         return this.normalize(); [EOL]     } [EOL] } <line_num>: 342,354
public Quaternion getInverse() { [EOL]     final double squareNorm = q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3; [EOL]     if (squareNorm < Precision.SAFE_MIN) { [EOL]         throw new ZeroException(LocalizedFormats.NORM, squareNorm); [EOL]     } [EOL]     return new Quaternion(q0 / squareNorm, -q1 / squareNorm, -q2 / squareNorm, -q3 / squareNorm); [EOL] } <line_num>: 363,373
public double getQ0() { [EOL]     return q0; [EOL] } <line_num>: 380,382
public double getQ1() { [EOL]     return q1; [EOL] } <line_num>: 390,392
public double getQ2() { [EOL]     return q2; [EOL] } <line_num>: 400,402
public double getQ3() { [EOL]     return q3; [EOL] } <line_num>: 410,412
public double getScalarPart() { [EOL]     return getQ0(); [EOL] } <line_num>: 420,422
public double[] getVectorPart() { [EOL]     return new double[] { getQ1(), getQ2(), getQ3() }; [EOL] } <line_num>: 432,434
public Quaternion multiply(final double alpha) { [EOL]     return new Quaternion(alpha * q0, alpha * q1, alpha * q2, alpha * q3); [EOL] } <line_num>: 442,447
@Override [EOL] public String toString() { [EOL]     final String sp = " "; [EOL]     final StringBuilder s = new StringBuilder(); [EOL]     s.append("[").append(q0).append(sp).append(q1).append(sp).append(q2).append(sp).append(q3).append("]"); [EOL]     return s.toString(); [EOL] } <line_num>: 452,464
