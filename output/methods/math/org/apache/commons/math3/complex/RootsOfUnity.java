public RootsOfUnity() { [EOL]     omegaCount = 0; [EOL]     omegaReal = null; [EOL]     omegaImaginaryCounterClockwise = null; [EOL]     omegaImaginaryClockwise = null; [EOL]     isCounterClockWise = true; [EOL] } <line_num>: 69,76
public synchronized boolean isCounterClockWise() throws MathIllegalStateException { [EOL]     if (omegaCount == 0) { [EOL]         throw new MathIllegalStateException(LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET); [EOL]     } [EOL]     return isCounterClockWise; [EOL] } <line_num>: 88,96
public synchronized void computeRoots(int n) throws ZeroException { [EOL]     if (n == 0) { [EOL]         throw new ZeroException(LocalizedFormats.CANNOT_COMPUTE_0TH_ROOT_OF_UNITY); [EOL]     } [EOL]     isCounterClockWise = n > 0; [EOL]     final int absN = FastMath.abs(n); [EOL]     if (absN == omegaCount) { [EOL]         return; [EOL]     } [EOL]     final double t = 2.0 * FastMath.PI / absN; [EOL]     final double cosT = FastMath.cos(t); [EOL]     final double sinT = FastMath.sin(t); [EOL]     omegaReal = new double[absN]; [EOL]     omegaImaginaryCounterClockwise = new double[absN]; [EOL]     omegaImaginaryClockwise = new double[absN]; [EOL]     omegaReal[0] = 1.0; [EOL]     omegaImaginaryCounterClockwise[0] = 0.0; [EOL]     omegaImaginaryClockwise[0] = 0.0; [EOL]     for (int i = 1; i < absN; i++) { [EOL]         omegaReal[i] = omegaReal[i - 1] * cosT - omegaImaginaryCounterClockwise[i - 1] * sinT; [EOL]         omegaImaginaryCounterClockwise[i] = omegaReal[i - 1] * sinT + omegaImaginaryCounterClockwise[i - 1] * cosT; [EOL]         omegaImaginaryClockwise[i] = -omegaImaginaryCounterClockwise[i]; [EOL]     } [EOL]     omegaCount = absN; [EOL] } <line_num>: 117,151
public synchronized double getReal(int k) throws MathIllegalStateException, MathIllegalArgumentException { [EOL]     if (omegaCount == 0) { [EOL]         throw new MathIllegalStateException(LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET); [EOL]     } [EOL]     if ((k < 0) || (k >= omegaCount)) { [EOL]         throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, Integer.valueOf(k), Integer.valueOf(0), Integer.valueOf(omegaCount - 1)); [EOL]     } [EOL]     return omegaReal[k]; [EOL] } <line_num>: 162,178
public synchronized double getImaginary(int k) throws MathIllegalStateException, OutOfRangeException { [EOL]     if (omegaCount == 0) { [EOL]         throw new MathIllegalStateException(LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET); [EOL]     } [EOL]     if ((k < 0) || (k >= omegaCount)) { [EOL]         throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, Integer.valueOf(k), Integer.valueOf(0), Integer.valueOf(omegaCount - 1)); [EOL]     } [EOL]     return isCounterClockWise ? omegaImaginaryCounterClockwise[k] : omegaImaginaryClockwise[k]; [EOL] } <line_num>: 189,206
public synchronized int getNumberOfRoots() { [EOL]     return omegaCount; [EOL] } <line_num>: 216,218
