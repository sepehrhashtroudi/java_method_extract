public MultiStartMultivariateOptimizer(final MultivariateOptimizer optimizer, final int starts, final RandomVectorGenerator generator) throws NullArgumentException, NotStrictlyPositiveException { [EOL]     super(optimizer, starts, generator); [EOL]     this.optimizer = optimizer; [EOL] } <line_num>: 58,65
@Override [EOL] public PointValuePair[] getOptima() { [EOL]     Collections.sort(optima, getPairComparator()); [EOL]     return optima.toArray(new PointValuePair[0]); [EOL] } <line_num>: 70,74
@Override [EOL] protected void store(PointValuePair optimum) { [EOL]     optima.add(optimum); [EOL] } <line_num>: 79,82
@Override [EOL] protected void clear() { [EOL]     optima.clear(); [EOL] } <line_num>: 87,90
public int compare(final PointValuePair o1, final PointValuePair o2) { [EOL]     if (o1 == null) { [EOL]         return (o2 == null) ? 0 : 1; [EOL]     } else if (o2 == null) { [EOL]         return -1; [EOL]     } [EOL]     final double v1 = o1.getValue(); [EOL]     final double v2 = o2.getValue(); [EOL]     return (optimizer.getGoalType() == GoalType.MINIMIZE) ? Double.compare(v1, v2) : Double.compare(v2, v1); [EOL] } <line_num>: 97,108
private Comparator<PointValuePair> getPairComparator() { [EOL]     return new Comparator<PointValuePair>() { [EOL]  [EOL]         public int compare(final PointValuePair o1, final PointValuePair o2) { [EOL]             if (o1 == null) { [EOL]                 return (o2 == null) ? 0 : 1; [EOL]             } else if (o2 == null) { [EOL]                 return -1; [EOL]             } [EOL]             final double v1 = o1.getValue(); [EOL]             final double v2 = o2.getValue(); [EOL]             return (optimizer.getGoalType() == GoalType.MINIMIZE) ? Double.compare(v1, v2) : Double.compare(v2, v1); [EOL]         } [EOL]     }; [EOL] } <line_num>: 95,110
