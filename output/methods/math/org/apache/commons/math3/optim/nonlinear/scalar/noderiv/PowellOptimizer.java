public PowellOptimizer(double rel, double abs, ConvergenceChecker<PointValuePair> checker) { [EOL]     this(rel, abs, FastMath.sqrt(rel), FastMath.sqrt(abs), checker); [EOL] } <line_num>: 98,102
public PowellOptimizer(double rel, double abs, double lineRel, double lineAbs, ConvergenceChecker<PointValuePair> checker) { [EOL]     super(checker); [EOL]     if (rel < MIN_RELATIVE_TOLERANCE) { [EOL]         throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true); [EOL]     } [EOL]     if (abs <= 0) { [EOL]         throw new NotStrictlyPositiveException(abs); [EOL]     } [EOL]     relativeThreshold = rel; [EOL]     absoluteThreshold = abs; [EOL]     line = new LineSearch(lineRel, lineAbs); [EOL] } <line_num>: 117,136
public PowellOptimizer(double rel, double abs) { [EOL]     this(rel, abs, null); [EOL] } <line_num>: 149,152
public PowellOptimizer(double rel, double abs, double lineRel, double lineAbs) { [EOL]     this(rel, abs, lineRel, lineAbs, null); [EOL] } <line_num>: 164,169
LineSearch(double rel, double abs) { [EOL]     super(REL_TOL_UNUSED, ABS_TOL_UNUSED, new SimpleUnivariateValueChecker(rel, abs)); [EOL] } <line_num>: 325,330
@Override [EOL] protected PointValuePair doOptimize() { [EOL]     checkParameters(); [EOL]     final GoalType goal = getGoalType(); [EOL]     final double[] guess = getStartPoint(); [EOL]     final int n = guess.length; [EOL]     final double[][] direc = new double[n][n]; [EOL]     for (int i = 0; i < n; i++) { [EOL]         direc[i][i] = 1; [EOL]     } [EOL]     final ConvergenceChecker<PointValuePair> checker = getConvergenceChecker(); [EOL]     double[] x = guess; [EOL]     double fVal = computeObjectiveValue(x); [EOL]     double[] x1 = x.clone(); [EOL]     while (true) { [EOL]         incrementIterationCount(); [EOL]         double fX = fVal; [EOL]         double fX2 = 0; [EOL]         double delta = 0; [EOL]         int bigInd = 0; [EOL]         double alphaMin = 0; [EOL]         for (int i = 0; i < n; i++) { [EOL]             final double[] d = MathArrays.copyOf(direc[i]); [EOL]             fX2 = fVal; [EOL]             final UnivariatePointValuePair optimum = line.search(x, d); [EOL]             fVal = optimum.getValue(); [EOL]             alphaMin = optimum.getPoint(); [EOL]             final double[][] result = newPointAndDirection(x, d, alphaMin); [EOL]             x = result[0]; [EOL]             if ((fX2 - fVal) > delta) { [EOL]                 delta = fX2 - fVal; [EOL]                 bigInd = i; [EOL]             } [EOL]         } [EOL]         boolean stop = 2 * (fX - fVal) <= (relativeThreshold * (FastMath.abs(fX) + FastMath.abs(fVal)) + absoluteThreshold); [EOL]         final PointValuePair previous = new PointValuePair(x1, fX); [EOL]         final PointValuePair current = new PointValuePair(x, fVal); [EOL]         if (!stop && checker != null) { [EOL]             stop = checker.converged(getIterations(), previous, current); [EOL]         } [EOL]         if (stop) { [EOL]             if (goal == GoalType.MINIMIZE) { [EOL]                 return (fVal < fX) ? current : previous; [EOL]             } else { [EOL]                 return (fVal > fX) ? current : previous; [EOL]             } [EOL]         } [EOL]         final double[] d = new double[n]; [EOL]         final double[] x2 = new double[n]; [EOL]         for (int i = 0; i < n; i++) { [EOL]             d[i] = x[i] - x1[i]; [EOL]             x2[i] = 2 * x[i] - x1[i]; [EOL]         } [EOL]         x1 = x.clone(); [EOL]         fX2 = computeObjectiveValue(x2); [EOL]         if (fX > fX2) { [EOL]             double t = 2 * (fX + fX2 - 2 * fVal); [EOL]             double temp = fX - fVal - delta; [EOL]             t *= temp * temp; [EOL]             temp = fX - fX2; [EOL]             t -= delta * temp * temp; [EOL]             if (t < 0.0) { [EOL]                 final UnivariatePointValuePair optimum = line.search(x, d); [EOL]                 fVal = optimum.getValue(); [EOL]                 alphaMin = optimum.getPoint(); [EOL]                 final double[][] result = newPointAndDirection(x, d, alphaMin); [EOL]                 x = result[0]; [EOL]                 final int lastInd = n - 1; [EOL]                 direc[bigInd] = direc[lastInd]; [EOL]                 direc[lastInd] = result[1]; [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 172,265
private double[][] newPointAndDirection(double[] p, double[] d, double optimum) { [EOL]     final int n = p.length; [EOL]     final double[] nP = new double[n]; [EOL]     final double[] nD = new double[n]; [EOL]     for (int i = 0; i < n; i++) { [EOL]         nD[i] = d[i] * optimum; [EOL]         nP[i] = p[i] + nD[i]; [EOL]     } [EOL]     final double[][] result = new double[2][]; [EOL]     result[0] = nP; [EOL]     result[1] = nD; [EOL]     return result; [EOL] } <line_num>: 277,293
public double value(double alpha) { [EOL]     final double[] x = new double[n]; [EOL]     for (int i = 0; i < n; i++) { [EOL]         x[i] = p[i] + alpha * d[i]; [EOL]     } [EOL]     final double obj = PowellOptimizer.this.computeObjectiveValue(x); [EOL]     return obj; [EOL] } <line_num>: 344,351
public UnivariatePointValuePair search(final double[] p, final double[] d) { [EOL]     final int n = p.length; [EOL]     final UnivariateFunction f = new UnivariateFunction() { [EOL]  [EOL]         public double value(double alpha) { [EOL]             final double[] x = new double[n]; [EOL]             for (int i = 0; i < n; i++) { [EOL]                 x[i] = p[i] + alpha * d[i]; [EOL]             } [EOL]             final double obj = PowellOptimizer.this.computeObjectiveValue(x); [EOL]             return obj; [EOL]         } [EOL]     }; [EOL]     final GoalType goal = PowellOptimizer.this.getGoalType(); [EOL]     bracket.search(f, goal, 0, 1); [EOL]     return optimize(new MaxEval(Integer.MAX_VALUE), new UnivariateObjectiveFunction(f), goal, new SearchInterval(bracket.getLo(), bracket.getHi(), bracket.getMid())); [EOL] } <line_num>: 341,365
private void checkParameters() { [EOL]     if (getLowerBound() != null || getUpperBound() != null) { [EOL]         throw new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT); [EOL]     } [EOL] } <line_num>: 372,377
