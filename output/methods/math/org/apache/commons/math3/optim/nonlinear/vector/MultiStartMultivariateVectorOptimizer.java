public MultiStartMultivariateVectorOptimizer(final MultivariateVectorOptimizer optimizer, final int starts, final RandomVectorGenerator generator) throws NullArgumentException, NotStrictlyPositiveException { [EOL]     super(optimizer, starts, generator); [EOL]     this.optimizer = optimizer; [EOL] } <line_num>: 61,68
@Override [EOL] public PointVectorValuePair[] getOptima() { [EOL]     Collections.sort(optima, getPairComparator()); [EOL]     return optima.toArray(new PointVectorValuePair[0]); [EOL] } <line_num>: 73,77
@Override [EOL] protected void store(PointVectorValuePair optimum) { [EOL]     optima.add(optimum); [EOL] } <line_num>: 82,85
@Override [EOL] protected void clear() { [EOL]     optima.clear(); [EOL] } <line_num>: 90,93
public int compare(final PointVectorValuePair o1, final PointVectorValuePair o2) { [EOL]     if (o1 == null) { [EOL]         return (o2 == null) ? 0 : 1; [EOL]     } else if (o2 == null) { [EOL]         return -1; [EOL]     } [EOL]     return Double.compare(weightedResidual(o1), weightedResidual(o2)); [EOL] } <line_num>: 103,112
private double weightedResidual(final PointVectorValuePair pv) { [EOL]     final RealVector v = new ArrayRealVector(pv.getValueRef(), false); [EOL]     final RealVector r = target.subtract(v); [EOL]     return r.dotProduct(weight.operate(r)); [EOL] } <line_num>: 114,118
private Comparator<PointVectorValuePair> getPairComparator() { [EOL]     return new Comparator<PointVectorValuePair>() { [EOL]  [EOL]         private final RealVector target = new ArrayRealVector(optimizer.getTarget(), false); [EOL]  [EOL]         private final RealMatrix weight = optimizer.getWeight(); [EOL]  [EOL]         public int compare(final PointVectorValuePair o1, final PointVectorValuePair o2) { [EOL]             if (o1 == null) { [EOL]                 return (o2 == null) ? 0 : 1; [EOL]             } else if (o2 == null) { [EOL]                 return -1; [EOL]             } [EOL]             return Double.compare(weightedResidual(o1), weightedResidual(o2)); [EOL]         } [EOL]  [EOL]         private double weightedResidual(final PointVectorValuePair pv) { [EOL]             final RealVector v = new ArrayRealVector(pv.getValueRef(), false); [EOL]             final RealVector r = target.subtract(v); [EOL]             return r.dotProduct(weight.operate(r)); [EOL]         } [EOL]     }; [EOL] } <line_num>: 98,120
