protected AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair> checker) { [EOL]     super(checker); [EOL] } <line_num>: 57,59
protected RealMatrix computeWeightedJacobian(double[] params) { [EOL]     return weightMatrixSqrt.multiply(MatrixUtils.createRealMatrix(computeJacobian(params))); [EOL] } <line_num>: 69,71
protected double computeCost(double[] residuals) { [EOL]     final ArrayRealVector r = new ArrayRealVector(residuals); [EOL]     return FastMath.sqrt(r.dotProduct(getWeight().operate(r))); [EOL] } <line_num>: 80,83
public double getRMS() { [EOL]     return FastMath.sqrt(getChiSquare() / getTargetSize()); [EOL] } <line_num>: 96,98
public double getChiSquare() { [EOL]     return cost * cost; [EOL] } <line_num>: 106,108
public RealMatrix getWeightSquareRoot() { [EOL]     return weightMatrixSqrt.copy(); [EOL] } <line_num>: 115,117
protected void setCost(double cost) { [EOL]     this.cost = cost; [EOL] } <line_num>: 124,126
public double[][] computeCovariances(double[] params, double threshold) { [EOL]     final RealMatrix j = computeWeightedJacobian(params); [EOL]     final RealMatrix jTj = j.transpose().multiply(j); [EOL]     final DecompositionSolver solver = new QRDecomposition(jTj, threshold).getSolver(); [EOL]     return solver.getInverse().getData(); [EOL] } <line_num>: 144,156
public double[] computeSigma(double[] params, double covarianceSingularityThreshold) { [EOL]     final int nC = params.length; [EOL]     final double[] sig = new double[nC]; [EOL]     final double[][] cov = computeCovariances(params, covarianceSingularityThreshold); [EOL]     for (int i = 0; i < nC; ++i) { [EOL]         sig[i] = FastMath.sqrt(cov[i][i]); [EOL]     } [EOL]     return sig; [EOL] } <line_num>: 172,181
@Override [EOL] public PointVectorValuePair optimize(OptimizationData... optData) throws TooManyEvaluationsException { [EOL]     return super.optimize(optData); [EOL] } <line_num>: 198,203
protected double[] computeResiduals(double[] objectiveValue) { [EOL]     final double[] target = getTarget(); [EOL]     if (objectiveValue.length != target.length) { [EOL]         throw new DimensionMismatchException(target.length, objectiveValue.length); [EOL]     } [EOL]     final double[] residuals = new double[target.length]; [EOL]     for (int i = 0; i < target.length; i++) { [EOL]         residuals[i] = target[i] - objectiveValue[i]; [EOL]     } [EOL]     return residuals; [EOL] } <line_num>: 220,233
@Override [EOL] protected void parseOptimizationData(OptimizationData... optData) { [EOL]     super.parseOptimizationData(optData); [EOL]     for (OptimizationData data : optData) { [EOL]         if (data instanceof Weight) { [EOL]             weightMatrixSqrt = squareRoot(((Weight) data).getWeight()); [EOL]             break; [EOL]         } [EOL]     } [EOL] } <line_num>: 246,261
private RealMatrix squareRoot(RealMatrix m) { [EOL]     if (m instanceof DiagonalMatrix) { [EOL]         final int dim = m.getRowDimension(); [EOL]         final RealMatrix sqrtM = new DiagonalMatrix(dim); [EOL]         for (int i = 0; i < dim; i++) { [EOL]             sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i))); [EOL]         } [EOL]         return sqrtM; [EOL]     } else { [EOL]         final EigenDecomposition dec = new EigenDecomposition(m); [EOL]         return dec.getSquareRoot(); [EOL]     } [EOL] } <line_num>: 269,281
