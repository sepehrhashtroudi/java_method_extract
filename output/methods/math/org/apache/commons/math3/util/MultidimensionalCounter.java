Iterator() { [EOL]     counter[last] = -1; [EOL] } <line_num>: 85,87
public MultidimensionalCounter(int... size) throws NotStrictlyPositiveException { [EOL]     dimension = size.length; [EOL]     this.size = MathArrays.copyOf(size); [EOL]     uniCounterOffset = new int[dimension]; [EOL]     last = dimension - 1; [EOL]     int tS = size[last]; [EOL]     for (int i = 0; i < last; i++) { [EOL]         int count = 1; [EOL]         for (int j = i + 1; j < dimension; j++) { [EOL]             count *= size[j]; [EOL]         } [EOL]         uniCounterOffset[i] = count; [EOL]         tS *= size[i]; [EOL]     } [EOL]     uniCounterOffset[last] = 0; [EOL]     if (tS <= 0) { [EOL]         throw new NotStrictlyPositiveException(tS); [EOL]     } [EOL]     totalSize = tS; [EOL] } <line_num>: 165,188
public boolean hasNext() { [EOL]     for (int i = 0; i < dimension; i++) { [EOL]         if (counter[i] != size[i] - 1) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 92,99
public Integer next() { [EOL]     for (int i = last; i >= 0; i--) { [EOL]         if (counter[i] == size[i] - 1) { [EOL]             counter[i] = 0; [EOL]         } else { [EOL]             ++counter[i]; [EOL]             break; [EOL]         } [EOL]     } [EOL]     return ++count; [EOL] } <line_num>: 105,116
public int getCount() { [EOL]     return count; [EOL] } <line_num>: 123,125
public int[] getCounts() { [EOL]     return MathArrays.copyOf(counter); [EOL] } <line_num>: 131,133
public int getCount(int dim) { [EOL]     return counter[dim]; [EOL] } <line_num>: 146,148
public void remove() { [EOL]     throw new UnsupportedOperationException(); [EOL] } <line_num>: 153,155
public Iterator iterator() { [EOL]     return new Iterator(); [EOL] } <line_num>: 195,197
public int getDimension() { [EOL]     return dimension; [EOL] } <line_num>: 204,206
public int[] getCounts(int index) throws OutOfRangeException { [EOL]     if (index < 0 || index >= totalSize) { [EOL]         throw new OutOfRangeException(index, 0, totalSize); [EOL]     } [EOL]     final int[] indices = new int[dimension]; [EOL]     int count = 0; [EOL]     for (int i = 0; i < last; i++) { [EOL]         int idx = 0; [EOL]         final int offset = uniCounterOffset[i]; [EOL]         while (count <= index) { [EOL]             count += offset; [EOL]             ++idx; [EOL]         } [EOL]         --idx; [EOL]         count -= offset; [EOL]         indices[i] = idx; [EOL]     } [EOL]     indices[last] = index - count; [EOL]     return indices; [EOL] } <line_num>: 216,240
public int getCount(int... c) throws OutOfRangeException, DimensionMismatchException { [EOL]     if (c.length != dimension) { [EOL]         throw new DimensionMismatchException(c.length, dimension); [EOL]     } [EOL]     int count = 0; [EOL]     for (int i = 0; i < dimension; i++) { [EOL]         final int index = c[i]; [EOL]         if (index < 0 || index >= size[i]) { [EOL]             throw new OutOfRangeException(index, 0, size[i] - 1); [EOL]         } [EOL]         count += uniCounterOffset[i] * c[i]; [EOL]     } [EOL]     return count + c[last]; [EOL] } <line_num>: 253,268
public int getSize() { [EOL]     return totalSize; [EOL] } <line_num>: 275,277
public int[] getSizes() { [EOL]     return MathArrays.copyOf(size); [EOL] } <line_num>: 283,285
@Override [EOL] public String toString() { [EOL]     final StringBuilder sb = new StringBuilder(); [EOL]     for (int i = 0; i < dimension; i++) { [EOL]         sb.append("[").append(getCount(i)).append("]"); [EOL]     } [EOL]     return sb.toString(); [EOL] } <line_num>: 290,297
