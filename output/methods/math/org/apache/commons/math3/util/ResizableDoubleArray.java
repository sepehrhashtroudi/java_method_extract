public ResizableDoubleArray() { [EOL]     this(DEFAULT_INITIAL_CAPACITY); [EOL] } <line_num>: 169,171
public ResizableDoubleArray(int initialCapacity) throws MathIllegalArgumentException { [EOL]     this(initialCapacity, DEFAULT_EXPANSION_FACTOR); [EOL] } <line_num>: 184,187
public ResizableDoubleArray(double[] initialArray) { [EOL]     this(DEFAULT_INITIAL_CAPACITY, DEFAULT_EXPANSION_FACTOR, DEFAULT_CONTRACTION_DELTA + DEFAULT_EXPANSION_FACTOR, ExpansionMode.MULTIPLICATIVE, initialArray); [EOL] } <line_num>: 207,213
@Deprecated [EOL] public ResizableDoubleArray(int initialCapacity, float expansionFactor) throws MathIllegalArgumentException { [EOL]     this(initialCapacity, (double) expansionFactor); [EOL] } <line_num>: 238,244
public ResizableDoubleArray(int initialCapacity, double expansionFactor) throws MathIllegalArgumentException { [EOL]     this(initialCapacity, expansionFactor, DEFAULT_CONTRACTION_DELTA + expansionFactor); [EOL] } <line_num>: 268,274
@Deprecated [EOL] public ResizableDoubleArray(int initialCapacity, float expansionFactor, float contractionCriteria) throws MathIllegalArgumentException { [EOL]     this(initialCapacity, (double) expansionFactor, (double) contractionCriteria); [EOL] } <line_num>: 297,305
public ResizableDoubleArray(int initialCapacity, double expansionFactor, double contractionCriterion) throws MathIllegalArgumentException { [EOL]     this(initialCapacity, expansionFactor, contractionCriterion, ExpansionMode.MULTIPLICATIVE, null); [EOL] } <line_num>: 327,336
@Deprecated [EOL] public ResizableDoubleArray(int initialCapacity, float expansionFactor, float contractionCriteria, int expansionMode) throws MathIllegalArgumentException { [EOL]     this(initialCapacity, expansionFactor, contractionCriteria, expansionMode == ADDITIVE_MODE ? ExpansionMode.ADDITIVE : ExpansionMode.MULTIPLICATIVE, null); [EOL]     setExpansionMode(expansionMode); [EOL] } <line_num>: 362,375
public ResizableDoubleArray(int initialCapacity, double expansionFactor, double contractionCriterion, ExpansionMode expansionMode, double... data) throws MathIllegalArgumentException { [EOL]     if (initialCapacity <= 0) { [EOL]         throw new NotStrictlyPositiveException(LocalizedFormats.INITIAL_CAPACITY_NOT_POSITIVE, initialCapacity); [EOL]     } [EOL]     checkContractExpand(contractionCriterion, expansionFactor); [EOL]     this.expansionFactor = expansionFactor; [EOL]     this.contractionCriterion = contractionCriterion; [EOL]     this.expansionMode = expansionMode; [EOL]     internalArray = new double[initialCapacity]; [EOL]     numElements = 0; [EOL]     startIndex = 0; [EOL]     if (data != null) { [EOL]         addElements(data); [EOL]     } [EOL] } <line_num>: 396,418
public ResizableDoubleArray(ResizableDoubleArray original) throws NullArgumentException { [EOL]     MathUtils.checkNotNull(original); [EOL]     copy(original, this); [EOL] } <line_num>: 430,434
public synchronized void addElement(double value) { [EOL]     if (internalArray.length <= startIndex + numElements) { [EOL]         expand(); [EOL]     } [EOL]     internalArray[startIndex + numElements++] = value; [EOL] } <line_num>: 441,446
public synchronized void addElements(double[] values) { [EOL]     final double[] tempArray = new double[numElements + values.length + 1]; [EOL]     System.arraycopy(internalArray, startIndex, tempArray, 0, numElements); [EOL]     System.arraycopy(values, 0, tempArray, numElements, values.length); [EOL]     internalArray = tempArray; [EOL]     startIndex = 0; [EOL]     numElements += values.length; [EOL] } <line_num>: 454,461
public synchronized double addElementRolling(double value) { [EOL]     double discarded = internalArray[startIndex]; [EOL]     if ((startIndex + (numElements + 1)) > internalArray.length) { [EOL]         expand(); [EOL]     } [EOL]     startIndex += 1; [EOL]     internalArray[startIndex + (numElements - 1)] = value; [EOL]     if (shouldContract()) { [EOL]         contract(); [EOL]     } [EOL]     return discarded; [EOL] } <line_num>: 479,496
public synchronized double substituteMostRecentElement(double value) throws MathIllegalStateException { [EOL]     if (numElements < 1) { [EOL]         throw new MathIllegalStateException(LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY); [EOL]     } [EOL]     final int substIndex = startIndex + (numElements - 1); [EOL]     final double discarded = internalArray[substIndex]; [EOL]     internalArray[substIndex] = value; [EOL]     return discarded; [EOL] } <line_num>: 508,521
@Deprecated [EOL] protected void checkContractExpand(float contraction, float expansion) throws MathIllegalArgumentException { [EOL]     checkContractExpand((double) contraction, (double) expansion); [EOL] } <line_num>: 535,540
protected void checkContractExpand(double contraction, double expansion) throws NumberIsTooSmallException { [EOL]     if (contraction < expansion) { [EOL]         final NumberIsTooSmallException e = new NumberIsTooSmallException(contraction, 1, true); [EOL]         e.getContext().addMessage(LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR, contraction, expansion); [EOL]         throw e; [EOL]     } [EOL]     if (contraction <= 1) { [EOL]         final NumberIsTooSmallException e = new NumberIsTooSmallException(contraction, 1, false); [EOL]         e.getContext().addMessage(LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_ONE, contraction); [EOL]         throw e; [EOL]     } [EOL]     if (expansion <= 1) { [EOL]         final NumberIsTooSmallException e = new NumberIsTooSmallException(contraction, 1, false); [EOL]         e.getContext().addMessage(LocalizedFormats.EXPANSION_FACTOR_SMALLER_THAN_ONE, expansion); [EOL]         throw e; [EOL]     } [EOL] } <line_num>: 554,577
public synchronized void clear() { [EOL]     numElements = 0; [EOL]     startIndex = 0; [EOL] } <line_num>: 582,585
public synchronized void contract() { [EOL]     final double[] tempArray = new double[numElements + 1]; [EOL]     System.arraycopy(internalArray, startIndex, tempArray, 0, numElements); [EOL]     internalArray = tempArray; [EOL]     startIndex = 0; [EOL] } <line_num>: 592,601
public synchronized void discardFrontElements(int i) throws MathIllegalArgumentException { [EOL]     discardExtremeElements(i, true); [EOL] } <line_num>: 614,617
public synchronized void discardMostRecentElements(int i) throws MathIllegalArgumentException { [EOL]     discardExtremeElements(i, false); [EOL] } <line_num>: 630,633
private synchronized void discardExtremeElements(int i, boolean front) throws MathIllegalArgumentException { [EOL]     if (i > numElements) { [EOL]         throw new MathIllegalArgumentException(LocalizedFormats.TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY, i, numElements); [EOL]     } else if (i < 0) { [EOL]         throw new MathIllegalArgumentException(LocalizedFormats.CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS, i); [EOL]     } else { [EOL]         numElements -= i; [EOL]         if (front) { [EOL]             startIndex += i; [EOL]         } [EOL]     } [EOL]     if (shouldContract()) { [EOL]         contract(); [EOL]     } [EOL] } <line_num>: 654,675
protected synchronized void expand() { [EOL]     int newSize = 0; [EOL]     if (expansionMode == ExpansionMode.MULTIPLICATIVE) { [EOL]         newSize = (int) FastMath.ceil(internalArray.length * expansionFactor); [EOL]     } else { [EOL]         newSize = (int) (internalArray.length + FastMath.round(expansionFactor)); [EOL]     } [EOL]     final double[] tempArray = new double[newSize]; [EOL]     System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length); [EOL]     internalArray = tempArray; [EOL] } <line_num>: 686,703
private synchronized void expandTo(int size) { [EOL]     final double[] tempArray = new double[size]; [EOL]     System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length); [EOL]     internalArray = tempArray; [EOL] } <line_num>: 710,715
@Deprecated [EOL] public float getContractionCriteria() { [EOL]     return (float) getContractionCriterion(); [EOL] } <line_num>: 731,734
public double getContractionCriterion() { [EOL]     return contractionCriterion; [EOL] } <line_num>: 749,751
public synchronized double getElement(int index) { [EOL]     if (index >= numElements) { [EOL]         throw new ArrayIndexOutOfBoundsException(index); [EOL]     } else if (index >= 0) { [EOL]         return internalArray[startIndex + index]; [EOL]     } else { [EOL]         throw new ArrayIndexOutOfBoundsException(index); [EOL]     } [EOL] } <line_num>: 761,769
public synchronized double[] getElements() { [EOL]     final double[] elementArray = new double[numElements]; [EOL]     System.arraycopy(internalArray, startIndex, elementArray, 0, numElements); [EOL]     return elementArray; [EOL] } <line_num>: 778,782
@Deprecated [EOL] public float getExpansionFactor() { [EOL]     return (float) expansionFactor; [EOL] } <line_num>: 797,800
@Deprecated [EOL] public int getExpansionMode() { [EOL]     switch(expansionMode) { [EOL]         case MULTIPLICATIVE: [EOL]             return MULTIPLICATIVE_MODE; [EOL]         case ADDITIVE: [EOL]             return ADDITIVE_MODE; [EOL]         default: [EOL]             throw new MathInternalError(); [EOL]     } [EOL] } <line_num>: 810,820
@Deprecated [EOL] synchronized int getInternalLength() { [EOL]     return internalArray.length; [EOL] } <line_num>: 831,834
public int getCapacity() { [EOL]     return internalArray.length; [EOL] } <line_num>: 845,847
public synchronized int getNumElements() { [EOL]     return numElements; [EOL] } <line_num>: 855,857
@Deprecated [EOL] public synchronized double[] getInternalValues() { [EOL]     return internalArray; [EOL] } <line_num>: 872,875
protected double[] getArrayRef() { [EOL]     return internalArray; [EOL] } <line_num>: 896,898
protected int getStartIndex() { [EOL]     return startIndex; [EOL] } <line_num>: 911,913
@Deprecated [EOL] public void setContractionCriteria(float contractionCriteria) throws MathIllegalArgumentException { [EOL]     checkContractExpand(contractionCriteria, getExpansionFactor()); [EOL]     synchronized (this) { [EOL]         this.contractionCriterion = contractionCriteria; [EOL]     } [EOL] } <line_num>: 923,930
public double compute(MathArrays.Function f) { [EOL]     final double[] array; [EOL]     final int start; [EOL]     final int num; [EOL]     synchronized (this) { [EOL]         array = internalArray; [EOL]         start = startIndex; [EOL]         num = numElements; [EOL]     } [EOL]     return f.evaluate(array, start, num); [EOL] } <line_num>: 939,949
public synchronized void setElement(int index, double value) { [EOL]     if (index < 0) { [EOL]         throw new ArrayIndexOutOfBoundsException(index); [EOL]     } [EOL]     if (index + 1 > numElements) { [EOL]         numElements = index + 1; [EOL]     } [EOL]     if ((startIndex + index) >= internalArray.length) { [EOL]         expandTo(startIndex + (index + 1)); [EOL]     } [EOL]     internalArray[startIndex + index] = value; [EOL] } <line_num>: 962,973
@Deprecated [EOL] public void setExpansionFactor(float expansionFactor) throws MathIllegalArgumentException { [EOL]     checkContractExpand(getContractionCriterion(), expansionFactor); [EOL]     synchronized (this) { [EOL]         this.expansionFactor = expansionFactor; [EOL]     } [EOL] } <line_num>: 987,994
@Deprecated [EOL] public void setExpansionMode(int expansionMode) throws MathIllegalArgumentException { [EOL]     if (expansionMode != MULTIPLICATIVE_MODE && expansionMode != ADDITIVE_MODE) { [EOL]         throw new MathIllegalArgumentException(LocalizedFormats.UNSUPPORTED_EXPANSION_MODE, expansionMode, MULTIPLICATIVE_MODE, "MULTIPLICATIVE_MODE", ADDITIVE_MODE, "ADDITIVE_MODE"); [EOL]     } [EOL]     synchronized (this) { [EOL]         if (expansionMode == MULTIPLICATIVE_MODE) { [EOL]             setExpansionMode(ExpansionMode.MULTIPLICATIVE); [EOL]         } else if (expansionMode == ADDITIVE_MODE) { [EOL]             setExpansionMode(ExpansionMode.ADDITIVE); [EOL]         } [EOL]     } [EOL] } <line_num>: 1004,1020
@Deprecated [EOL] public void setExpansionMode(ExpansionMode expansionMode) { [EOL]     this.expansionMode = expansionMode; [EOL] } <line_num>: 1028,1031
@Deprecated [EOL] protected void setInitialCapacity(int initialCapacity) throws MathIllegalArgumentException { [EOL] } <line_num>: 1041,1045
public synchronized void setNumElements(int i) throws MathIllegalArgumentException { [EOL]     if (i < 0) { [EOL]         throw new MathIllegalArgumentException(LocalizedFormats.INDEX_NOT_POSITIVE, i); [EOL]     } [EOL]     final int newSize = startIndex + i; [EOL]     if (newSize > internalArray.length) { [EOL]         expandTo(newSize); [EOL]     } [EOL]     numElements = i; [EOL] } <line_num>: 1055,1073
private synchronized boolean shouldContract() { [EOL]     if (expansionMode == ExpansionMode.MULTIPLICATIVE) { [EOL]         return (internalArray.length / ((float) numElements)) > contractionCriterion; [EOL]     } else { [EOL]         return (internalArray.length - numElements) > contractionCriterion; [EOL]     } [EOL] } <line_num>: 1081,1087
@Deprecated [EOL] public synchronized int start() { [EOL]     return startIndex; [EOL] } <line_num>: 1099,1102
public static void copy(ResizableDoubleArray source, ResizableDoubleArray dest) throws NullArgumentException { [EOL]     MathUtils.checkNotNull(source); [EOL]     MathUtils.checkNotNull(dest); [EOL]     synchronized (source) { [EOL]         synchronized (dest) { [EOL]             dest.contractionCriterion = source.contractionCriterion; [EOL]             dest.expansionFactor = source.expansionFactor; [EOL]             dest.expansionMode = source.expansionMode; [EOL]             dest.internalArray = new double[source.internalArray.length]; [EOL]             System.arraycopy(source.internalArray, 0, dest.internalArray, 0, dest.internalArray.length); [EOL]             dest.numElements = source.numElements; [EOL]             dest.startIndex = source.startIndex; [EOL]         } [EOL]     } [EOL] } <line_num>: 1121,1138
public synchronized ResizableDoubleArray copy() { [EOL]     final ResizableDoubleArray result = new ResizableDoubleArray(); [EOL]     copy(this, result); [EOL]     return result; [EOL] } <line_num>: 1148,1152
@Override [EOL] public boolean equals(Object object) { [EOL]     if (object == this) { [EOL]         return true; [EOL]     } [EOL]     if (object instanceof ResizableDoubleArray == false) { [EOL]         return false; [EOL]     } [EOL]     synchronized (this) { [EOL]         synchronized (object) { [EOL]             boolean result = true; [EOL]             final ResizableDoubleArray other = (ResizableDoubleArray) object; [EOL]             result = result && (other.contractionCriterion == contractionCriterion); [EOL]             result = result && (other.expansionFactor == expansionFactor); [EOL]             result = result && (other.expansionMode == expansionMode); [EOL]             result = result && (other.numElements == numElements); [EOL]             result = result && (other.startIndex == startIndex); [EOL]             if (!result) { [EOL]                 return false; [EOL]             } else { [EOL]                 return Arrays.equals(internalArray, other.internalArray); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 1163,1187
@Override [EOL] public synchronized int hashCode() { [EOL]     final int[] hashData = new int[6]; [EOL]     hashData[0] = Double.valueOf(expansionFactor).hashCode(); [EOL]     hashData[1] = Double.valueOf(contractionCriterion).hashCode(); [EOL]     hashData[2] = expansionMode.hashCode(); [EOL]     hashData[3] = Arrays.hashCode(internalArray); [EOL]     hashData[4] = numElements; [EOL]     hashData[5] = startIndex; [EOL]     return Arrays.hashCode(hashData); [EOL] } <line_num>: 1195,1205
