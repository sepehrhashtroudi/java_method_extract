protected ContinuedFraction() { [EOL]     super(); [EOL] } <line_num>: 44,46
protected abstract double getA(int n, double x); <line_num>: 55,55
protected abstract double getB(int n, double x); <line_num>: 64,64
public double evaluate(double x) throws ConvergenceException { [EOL]     return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE); [EOL] } <line_num>: 72,74
public double evaluate(double x, double epsilon) throws ConvergenceException { [EOL]     return evaluate(x, epsilon, Integer.MAX_VALUE); [EOL] } <line_num>: 83,85
public double evaluate(double x, int maxIterations) throws ConvergenceException, MaxCountExceededException { [EOL]     return evaluate(x, DEFAULT_EPSILON, maxIterations); [EOL] } <line_num>: 95,98
public double evaluate(double x, double epsilon, int maxIterations) throws ConvergenceException, MaxCountExceededException { [EOL]     final double small = 1e-50; [EOL]     double hPrev = getA(0, x); [EOL]     if (Precision.equals(hPrev, 0.0, small)) { [EOL]         hPrev = small; [EOL]     } [EOL]     int n = 1; [EOL]     double dPrev = 0.0; [EOL]     double cPrev = hPrev; [EOL]     double hN = hPrev; [EOL]     while (n < maxIterations) { [EOL]         final double a = getA(n, x); [EOL]         final double b = getB(n, x); [EOL]         double dN = a + b * dPrev; [EOL]         if (Precision.equals(dN, 0.0, small)) { [EOL]             dN = small; [EOL]         } [EOL]         double cN = a + b / cPrev; [EOL]         if (Precision.equals(cN, 0.0, small)) { [EOL]             cN = small; [EOL]         } [EOL]         dN = 1 / dN; [EOL]         final double deltaN = cN * dN; [EOL]         hN = hPrev * deltaN; [EOL]         if (Double.isInfinite(hN)) { [EOL]             throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); [EOL]         } [EOL]         if (Double.isNaN(hN)) { [EOL]             throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); [EOL]         } [EOL]         if (FastMath.abs(deltaN - 1.0) < epsilon) { [EOL]             break; [EOL]         } [EOL]         dPrev = dN; [EOL]         cPrev = cN; [EOL]         hPrev = hN; [EOL]         n++; [EOL]     } [EOL]     if (n >= maxIterations) { [EOL]         throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); [EOL]     } [EOL]     return hN; [EOL] } <line_num>: 123,180
