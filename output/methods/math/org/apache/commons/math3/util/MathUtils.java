private MathUtils() { [EOL] } <line_num>: 47,47
public static int hash(double value) { [EOL]     return new Double(value).hashCode(); [EOL] } <line_num>: 56,58
public static int hash(double[] value) { [EOL]     return Arrays.hashCode(value); [EOL] } <line_num>: 67,69
public static double normalizeAngle(double a, double center) { [EOL]     return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI); [EOL] } <line_num>: 90,92
public static double reduce(double a, double period, double offset) { [EOL]     final double p = FastMath.abs(period); [EOL]     return a - p * FastMath.floor((a - offset) / p) - offset; [EOL] } <line_num>: 110,115
public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException { [EOL]     if ((magnitude >= 0 && sign >= 0) || (magnitude < 0 && sign < 0)) { [EOL]         return magnitude; [EOL]     } else if (sign >= 0 && magnitude == Byte.MIN_VALUE) { [EOL]         throw new MathArithmeticException(LocalizedFormats.OVERFLOW); [EOL]     } else { [EOL]         return (byte) -magnitude; [EOL]     } [EOL] } <line_num>: 127,138
public static short copySign(short magnitude, short sign) throws MathArithmeticException { [EOL]     if ((magnitude >= 0 && sign >= 0) || (magnitude < 0 && sign < 0)) { [EOL]         return magnitude; [EOL]     } else if (sign >= 0 && magnitude == Short.MIN_VALUE) { [EOL]         throw new MathArithmeticException(LocalizedFormats.OVERFLOW); [EOL]     } else { [EOL]         return (short) -magnitude; [EOL]     } [EOL] } <line_num>: 150,161
public static int copySign(int magnitude, int sign) throws MathArithmeticException { [EOL]     if ((magnitude >= 0 && sign >= 0) || (magnitude < 0 && sign < 0)) { [EOL]         return magnitude; [EOL]     } else if (sign >= 0 && magnitude == Integer.MIN_VALUE) { [EOL]         throw new MathArithmeticException(LocalizedFormats.OVERFLOW); [EOL]     } else { [EOL]         return -magnitude; [EOL]     } [EOL] } <line_num>: 173,184
public static long copySign(long magnitude, long sign) throws MathArithmeticException { [EOL]     if ((magnitude >= 0 && sign >= 0) || (magnitude < 0 && sign < 0)) { [EOL]         return magnitude; [EOL]     } else if (sign >= 0 && magnitude == Long.MIN_VALUE) { [EOL]         throw new MathArithmeticException(LocalizedFormats.OVERFLOW); [EOL]     } else { [EOL]         return -magnitude; [EOL]     } [EOL] } <line_num>: 196,207
public static void checkFinite(final double x) throws NotFiniteNumberException { [EOL]     if (Double.isInfinite(x) || Double.isNaN(x)) { [EOL]         throw new NotFiniteNumberException(x); [EOL]     } [EOL] } <line_num>: 215,220
public static void checkFinite(final double[] val) throws NotFiniteNumberException { [EOL]     for (int i = 0; i < val.length; i++) { [EOL]         final double x = val[i]; [EOL]         if (Double.isInfinite(x) || Double.isNaN(x)) { [EOL]             throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i); [EOL]         } [EOL]     } [EOL] } <line_num>: 229,237
public static void checkNotNull(Object o, Localizable pattern, Object... args) throws NullArgumentException { [EOL]     if (o == null) { [EOL]         throw new NullArgumentException(pattern, args); [EOL]     } [EOL] } <line_num>: 247,254
public static void checkNotNull(Object o) throws NullArgumentException { [EOL]     if (o == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL] } <line_num>: 262,267
