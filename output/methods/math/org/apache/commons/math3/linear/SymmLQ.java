public State(final RealLinearOperator a, final RealLinearOperator m, final RealVector b, final boolean goodb, final double shift, final double delta, final boolean check) { [EOL]     this.a = a; [EOL]     this.m = m; [EOL]     this.b = b; [EOL]     this.xL = new ArrayRealVector(b.getDimension()); [EOL]     this.goodb = goodb; [EOL]     this.shift = shift; [EOL]     this.mb = m == null ? b : m.operate(b); [EOL]     this.hasConverged = false; [EOL]     this.check = check; [EOL]     this.delta = delta; [EOL] } <line_num>: 384,401
public SymmLQ(final int maxIterations, final double delta, final boolean check) { [EOL]     super(maxIterations); [EOL]     this.delta = delta; [EOL]     this.check = check; [EOL] } <line_num>: 870,875
public SymmLQ(final IterationManager manager, final double delta, final boolean check) { [EOL]     super(manager); [EOL]     this.delta = delta; [EOL]     this.check = check; [EOL] } <line_num>: 888,893
private static void checkSymmetry(final RealLinearOperator l, final RealVector x, final RealVector y, final RealVector z) throws NonSelfAdjointOperatorException { [EOL]     final double s = y.dotProduct(y); [EOL]     final double t = x.dotProduct(z); [EOL]     final double epsa = (s + MACH_PREC) * CBRT_MACH_PREC; [EOL]     if (FastMath.abs(s - t) > epsa) { [EOL]         final NonSelfAdjointOperatorException e; [EOL]         e = new NonSelfAdjointOperatorException(); [EOL]         final ExceptionContext context = e.getContext(); [EOL]         context.setValue(SymmLQ.OPERATOR, l); [EOL]         context.setValue(SymmLQ.VECTOR1, x); [EOL]         context.setValue(SymmLQ.VECTOR2, y); [EOL]         context.setValue(SymmLQ.THRESHOLD, Double.valueOf(epsa)); [EOL]         throw e; [EOL]     } [EOL] } <line_num>: 416,432
private static void throwNPDLOException(final RealLinearOperator l, final RealVector v) throws NonPositiveDefiniteOperatorException { [EOL]     final NonPositiveDefiniteOperatorException e; [EOL]     e = new NonPositiveDefiniteOperatorException(); [EOL]     final ExceptionContext context = e.getContext(); [EOL]     context.setValue(OPERATOR, l); [EOL]     context.setValue(VECTOR, v); [EOL]     throw e; [EOL] } <line_num>: 442,450
private static void daxpy(final double a, final RealVector x, final RealVector y) { [EOL]     final int n = x.getDimension(); [EOL]     for (int i = 0; i < n; i++) { [EOL]         y.setEntry(i, a * x.getEntry(i) + y.getEntry(i)); [EOL]     } [EOL] } <line_num>: 461,467
private static void daxpbypz(final double a, final RealVector x, final double b, final RealVector y, final RealVector z) { [EOL]     final int n = z.getDimension(); [EOL]     for (int i = 0; i < n; i++) { [EOL]         final double zi; [EOL]         zi = a * x.getEntry(i) + b * y.getEntry(i) + z.getEntry(i); [EOL]         z.setEntry(i, zi); [EOL]     } [EOL] } <line_num>: 480,488
void refineSolution(final RealVector x) { [EOL]     final int n = this.xL.getDimension(); [EOL]     if (lqnorm < cgnorm) { [EOL]         if (!goodb) { [EOL]             x.setSubVector(0, this.xL); [EOL]         } else { [EOL]             final double step = bstep / beta1; [EOL]             for (int i = 0; i < n; i++) { [EOL]                 final double bi = mb.getEntry(i); [EOL]                 final double xi = this.xL.getEntry(i); [EOL]                 x.setEntry(i, xi + step * bi); [EOL]             } [EOL]         } [EOL]     } else { [EOL]         final double anorm = FastMath.sqrt(tnorm); [EOL]         final double diag = gbar == 0. ? anorm * MACH_PREC : gbar; [EOL]         final double zbar = gammaZeta / diag; [EOL]         final double step = (bstep + snprod * zbar) / beta1; [EOL]         if (!goodb) { [EOL]             for (int i = 0; i < n; i++) { [EOL]                 final double xi = this.xL.getEntry(i); [EOL]                 final double wi = wbar.getEntry(i); [EOL]                 x.setEntry(i, xi + zbar * wi); [EOL]             } [EOL]         } else { [EOL]             for (int i = 0; i < n; i++) { [EOL]                 final double xi = this.xL.getEntry(i); [EOL]                 final double wi = wbar.getEntry(i); [EOL]                 final double bi = mb.getEntry(i); [EOL]                 x.setEntry(i, xi + zbar * wi + step * bi); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 503,537
void init() { [EOL]     this.xL.set(0.); [EOL]     this.r1 = this.b.copy(); [EOL]     this.y = this.m == null ? this.b.copy() : this.m.operate(this.r1); [EOL]     if ((this.m != null) && this.check) { [EOL]         checkSymmetry(this.m, this.r1, this.y, this.m.operate(this.y)); [EOL]     } [EOL]     this.beta1 = this.r1.dotProduct(this.y); [EOL]     if (this.beta1 < 0.) { [EOL]         throwNPDLOException(this.m, this.y); [EOL]     } [EOL]     if (this.beta1 == 0.) { [EOL]         this.bIsNull = true; [EOL]         return; [EOL]     } [EOL]     this.bIsNull = false; [EOL]     this.beta1 = FastMath.sqrt(this.beta1); [EOL]     final RealVector v = this.y.mapMultiply(1. / this.beta1); [EOL]     this.y = this.a.operate(v); [EOL]     if (this.check) { [EOL]         checkSymmetry(this.a, v, this.y, this.a.operate(this.y)); [EOL]     } [EOL]     daxpy(-this.shift, v, this.y); [EOL]     final double alpha = v.dotProduct(this.y); [EOL]     daxpy(-alpha / this.beta1, this.r1, this.y); [EOL]     final double vty = v.dotProduct(this.y); [EOL]     final double vtv = v.dotProduct(v); [EOL]     daxpy(-vty / vtv, v, this.y); [EOL]     this.r2 = this.y.copy(); [EOL]     if (this.m != null) { [EOL]         this.y = this.m.operate(this.r2); [EOL]     } [EOL]     this.oldb = this.beta1; [EOL]     this.beta = this.r2.dotProduct(this.y); [EOL]     if (this.beta < 0.) { [EOL]         throwNPDLOException(this.m, this.y); [EOL]     } [EOL]     this.beta = FastMath.sqrt(this.beta); [EOL]     this.cgnorm = this.beta1; [EOL]     this.gbar = alpha; [EOL]     this.dbar = this.beta; [EOL]     this.gammaZeta = this.beta1; [EOL]     this.minusEpsZeta = 0.; [EOL]     this.bstep = 0.; [EOL]     this.snprod = 1.; [EOL]     this.tnorm = alpha * alpha + this.beta * this.beta; [EOL]     this.ynorm2 = 0.; [EOL]     this.gmax = FastMath.abs(alpha) + MACH_PREC; [EOL]     this.gmin = this.gmax; [EOL]     if (this.goodb) { [EOL]         this.wbar = new ArrayRealVector(this.a.getRowDimension()); [EOL]         this.wbar.set(0.); [EOL]     } else { [EOL]         this.wbar = v; [EOL]     } [EOL]     updateNorms(); [EOL] } <line_num>: 544,629
void update() { [EOL]     final RealVector v = y.mapMultiply(1. / beta); [EOL]     y = a.operate(v); [EOL]     daxpbypz(-shift, v, -beta / oldb, r1, y); [EOL]     final double alpha = v.dotProduct(y); [EOL]     daxpy(-alpha / beta, r2, y); [EOL]     r1 = r2; [EOL]     r2 = y; [EOL]     if (m != null) { [EOL]         y = m.operate(r2); [EOL]     } [EOL]     oldb = beta; [EOL]     beta = r2.dotProduct(y); [EOL]     if (beta < 0.) { [EOL]         throwNPDLOException(m, y); [EOL]     } [EOL]     beta = FastMath.sqrt(beta); [EOL]     tnorm += alpha * alpha + oldb * oldb + beta * beta; [EOL]     final double gamma = FastMath.sqrt(gbar * gbar + oldb * oldb); [EOL]     final double c = gbar / gamma; [EOL]     final double s = oldb / gamma; [EOL]     final double deltak = c * dbar + s * alpha; [EOL]     gbar = s * dbar - c * alpha; [EOL]     final double eps = s * beta; [EOL]     dbar = -c * beta; [EOL]     final double zeta = gammaZeta / gamma; [EOL]     final double zetaC = zeta * c; [EOL]     final double zetaS = zeta * s; [EOL]     final int n = xL.getDimension(); [EOL]     for (int i = 0; i < n; i++) { [EOL]         final double xi = xL.getEntry(i); [EOL]         final double vi = v.getEntry(i); [EOL]         final double wi = wbar.getEntry(i); [EOL]         xL.setEntry(i, xi + wi * zetaC + vi * zetaS); [EOL]         wbar.setEntry(i, wi * s - vi * c); [EOL]     } [EOL]     bstep += snprod * c * zeta; [EOL]     snprod *= s; [EOL]     gmax = FastMath.max(gmax, gamma); [EOL]     gmin = FastMath.min(gmin, gamma); [EOL]     ynorm2 += zeta * zeta; [EOL]     gammaZeta = minusEpsZeta - deltak * zeta; [EOL]     minusEpsZeta = -eps * zeta; [EOL]     updateNorms(); [EOL] } <line_num>: 637,754
private void updateNorms() { [EOL]     final double anorm = FastMath.sqrt(tnorm); [EOL]     final double ynorm = FastMath.sqrt(ynorm2); [EOL]     final double epsa = anorm * MACH_PREC; [EOL]     final double epsx = anorm * ynorm * MACH_PREC; [EOL]     final double epsr = anorm * ynorm * delta; [EOL]     final double diag = gbar == 0. ? epsa : gbar; [EOL]     lqnorm = FastMath.sqrt(gammaZeta * gammaZeta + minusEpsZeta * minusEpsZeta); [EOL]     final double qrnorm = snprod * beta1; [EOL]     cgnorm = qrnorm * beta / FastMath.abs(diag); [EOL]     final double acond; [EOL]     if (lqnorm <= cgnorm) { [EOL]         acond = gmax / gmin; [EOL]     } else { [EOL]         acond = gmax / FastMath.min(gmin, FastMath.abs(diag)); [EOL]     } [EOL]     if (acond * MACH_PREC >= 0.1) { [EOL]         throw new IllConditionedOperatorException(acond); [EOL]     } [EOL]     if (beta1 <= epsx) { [EOL]         throw new SingularOperatorException(); [EOL]     } [EOL]     rnorm = FastMath.min(cgnorm, lqnorm); [EOL]     hasConverged = (cgnorm <= epsx) || (cgnorm <= epsr); [EOL] } <line_num>: 760,796
boolean hasConverged() { [EOL]     return hasConverged; [EOL] } <line_num>: 803,805
boolean bEqualsNullVector() { [EOL]     return bIsNull; [EOL] } <line_num>: 812,814
boolean betaEqualsZero() { [EOL]     return beta < MACH_PREC; [EOL] } <line_num>: 822,824
double getNormOfResidual() { [EOL]     return rnorm; [EOL] } <line_num>: 831,833
public final boolean getCheck() { [EOL]     return check; [EOL] } <line_num>: 901,903
@Override [EOL] public RealVector solve(final RealLinearOperator a, final RealLinearOperator m, final RealVector b) throws NullArgumentException, NonSquareOperatorException, DimensionMismatchException, MaxCountExceededException, NonSelfAdjointOperatorException, NonPositiveDefiniteOperatorException, IllConditionedOperatorException { [EOL]     MathUtils.checkNotNull(a); [EOL]     final RealVector x = new ArrayRealVector(a.getColumnDimension()); [EOL]     return solveInPlace(a, m, b, x, false, 0.); [EOL] } <line_num>: 914,924
public RealVector solve(final RealLinearOperator a, final RealLinearOperator m, final RealVector b, final boolean goodb, final double shift) throws NullArgumentException, NonSquareOperatorException, DimensionMismatchException, MaxCountExceededException, NonSelfAdjointOperatorException, NonPositiveDefiniteOperatorException, IllConditionedOperatorException { [EOL]     MathUtils.checkNotNull(a); [EOL]     final RealVector x = new ArrayRealVector(a.getColumnDimension()); [EOL]     return solveInPlace(a, m, b, x, goodb, shift); [EOL] } <line_num>: 966,975
@Override [EOL] public RealVector solve(final RealLinearOperator a, final RealLinearOperator m, final RealVector b, final RealVector x) throws NullArgumentException, NonSquareOperatorException, DimensionMismatchException, NonSelfAdjointOperatorException, NonPositiveDefiniteOperatorException, IllConditionedOperatorException, MaxCountExceededException { [EOL]     MathUtils.checkNotNull(x); [EOL]     return solveInPlace(a, m, b, x.copy(), false, 0.); [EOL] } <line_num>: 988,997
@Override [EOL] public RealVector solve(final RealLinearOperator a, final RealVector b) throws NullArgumentException, NonSquareOperatorException, DimensionMismatchException, NonSelfAdjointOperatorException, IllConditionedOperatorException, MaxCountExceededException { [EOL]     MathUtils.checkNotNull(a); [EOL]     final RealVector x = new ArrayRealVector(a.getColumnDimension()); [EOL]     x.set(0.); [EOL]     return solveInPlace(a, null, b, x, false, 0.); [EOL] } <line_num>: 1006,1015
public RealVector solve(final RealLinearOperator a, final RealVector b, final boolean goodb, final double shift) throws NullArgumentException, NonSquareOperatorException, DimensionMismatchException, NonSelfAdjointOperatorException, IllConditionedOperatorException, MaxCountExceededException { [EOL]     MathUtils.checkNotNull(a); [EOL]     final RealVector x = new ArrayRealVector(a.getColumnDimension()); [EOL]     return solveInPlace(a, null, b, x, goodb, shift); [EOL] } <line_num>: 1052,1060
@Override [EOL] public RealVector solve(final RealLinearOperator a, final RealVector b, final RealVector x) throws NullArgumentException, NonSquareOperatorException, DimensionMismatchException, NonSelfAdjointOperatorException, IllConditionedOperatorException, MaxCountExceededException { [EOL]     MathUtils.checkNotNull(x); [EOL]     return solveInPlace(a, null, b, x.copy(), false, 0.); [EOL] } <line_num>: 1071,1079
@Override [EOL] public RealVector solveInPlace(final RealLinearOperator a, final RealLinearOperator m, final RealVector b, final RealVector x) throws NullArgumentException, NonSquareOperatorException, DimensionMismatchException, NonSelfAdjointOperatorException, NonPositiveDefiniteOperatorException, IllConditionedOperatorException, MaxCountExceededException { [EOL]     return solveInPlace(a, m, b, x, false, 0.); [EOL] } <line_num>: 1092,1100
public RealVector solveInPlace(final RealLinearOperator a, final RealLinearOperator m, final RealVector b, final RealVector x, final boolean goodb, final double shift) throws NullArgumentException, NonSquareOperatorException, DimensionMismatchException, NonSelfAdjointOperatorException, NonPositiveDefiniteOperatorException, IllConditionedOperatorException, MaxCountExceededException { [EOL]     checkParameters(a, m, b, x); [EOL]     final IterationManager manager = getIterationManager(); [EOL]     manager.resetIterationCount(); [EOL]     manager.incrementIterationCount(); [EOL]     final State state; [EOL]     state = new State(a, m, b, goodb, shift, delta, check); [EOL]     state.init(); [EOL]     state.refineSolution(x); [EOL]     IterativeLinearSolverEvent event; [EOL]     event = new DefaultIterativeLinearSolverEvent(this, manager.getIterations(), x, b, state.getNormOfResidual()); [EOL]     if (state.bEqualsNullVector()) { [EOL]         manager.fireTerminationEvent(event); [EOL]         return x; [EOL]     } [EOL]     final boolean earlyStop; [EOL]     earlyStop = state.betaEqualsZero() || state.hasConverged(); [EOL]     manager.fireInitializationEvent(event); [EOL]     if (!earlyStop) { [EOL]         do { [EOL]             manager.incrementIterationCount(); [EOL]             event = new DefaultIterativeLinearSolverEvent(this, manager.getIterations(), x, b, state.getNormOfResidual()); [EOL]             manager.fireIterationStartedEvent(event); [EOL]             state.update(); [EOL]             state.refineSolution(x); [EOL]             event = new DefaultIterativeLinearSolverEvent(this, manager.getIterations(), x, b, state.getNormOfResidual()); [EOL]             manager.fireIterationPerformedEvent(event); [EOL]         } while (!state.hasConverged()); [EOL]     } [EOL]     event = new DefaultIterativeLinearSolverEvent(this, manager.getIterations(), x, b, state.getNormOfResidual()); [EOL]     manager.fireTerminationEvent(event); [EOL]     return x; [EOL] } <line_num>: 1144,1203
@Override [EOL] public RealVector solveInPlace(final RealLinearOperator a, final RealVector b, final RealVector x) throws NullArgumentException, NonSquareOperatorException, DimensionMismatchException, NonSelfAdjointOperatorException, IllConditionedOperatorException, MaxCountExceededException { [EOL]     return solveInPlace(a, null, b, x, false, 0.); [EOL] } <line_num>: 1214,1221
