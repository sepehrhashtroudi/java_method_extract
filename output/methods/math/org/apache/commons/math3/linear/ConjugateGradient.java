public ConjugateGradient(final int maxIterations, final double delta, final boolean check) { [EOL]     super(maxIterations); [EOL]     this.delta = delta; [EOL]     this.check = check; [EOL] } <line_num>: 106,111
public ConjugateGradient(final IterationManager manager, final double delta, final boolean check) throws NullArgumentException { [EOL]     super(manager); [EOL]     this.delta = delta; [EOL]     this.check = check; [EOL] } <line_num>: 123,129
public final boolean getCheck() { [EOL]     return check; [EOL] } <line_num>: 137,139
@Override [EOL] public RealVector solveInPlace(final RealLinearOperator a, final RealLinearOperator m, final RealVector b, final RealVector x0) throws NullArgumentException, NonPositiveDefiniteOperatorException, NonSquareOperatorException, DimensionMismatchException, MaxCountExceededException, NonPositiveDefiniteOperatorException { [EOL]     checkParameters(a, m, b, x0); [EOL]     final IterationManager manager = getIterationManager(); [EOL]     manager.resetIterationCount(); [EOL]     final double rmax = delta * b.getNorm(); [EOL]     final RealVector bro = RealVector.unmodifiableRealVector(b); [EOL]     manager.incrementIterationCount(); [EOL]     final RealVector x = x0; [EOL]     final RealVector xro = RealVector.unmodifiableRealVector(x); [EOL]     final RealVector p = x.copy(); [EOL]     RealVector q = a.operate(p); [EOL]     final RealVector r = b.combine(1, -1, q); [EOL]     final RealVector rro = RealVector.unmodifiableRealVector(r); [EOL]     double rnorm = r.getNorm(); [EOL]     RealVector z; [EOL]     if (m == null) { [EOL]         z = r; [EOL]     } else { [EOL]         z = null; [EOL]     } [EOL]     IterativeLinearSolverEvent evt; [EOL]     evt = new DefaultIterativeLinearSolverEvent(this, manager.getIterations(), xro, bro, rro, rnorm); [EOL]     manager.fireInitializationEvent(evt); [EOL]     if (rnorm <= rmax) { [EOL]         manager.fireTerminationEvent(evt); [EOL]         return x; [EOL]     } [EOL]     double rhoPrev = 0.; [EOL]     while (true) { [EOL]         manager.incrementIterationCount(); [EOL]         evt = new DefaultIterativeLinearSolverEvent(this, manager.getIterations(), xro, bro, rro, rnorm); [EOL]         manager.fireIterationStartedEvent(evt); [EOL]         if (m != null) { [EOL]             z = m.operate(r); [EOL]         } [EOL]         final double rhoNext = r.dotProduct(z); [EOL]         if (check && (rhoNext <= 0.)) { [EOL]             final NonPositiveDefiniteOperatorException e; [EOL]             e = new NonPositiveDefiniteOperatorException(); [EOL]             final ExceptionContext context = e.getContext(); [EOL]             context.setValue(OPERATOR, m); [EOL]             context.setValue(VECTOR, r); [EOL]             throw e; [EOL]         } [EOL]         if (manager.getIterations() == 2) { [EOL]             p.setSubVector(0, z); [EOL]         } else { [EOL]             p.combineToSelf(rhoNext / rhoPrev, 1., z); [EOL]         } [EOL]         q = a.operate(p); [EOL]         final double pq = p.dotProduct(q); [EOL]         if (check && (pq <= 0.)) { [EOL]             final NonPositiveDefiniteOperatorException e; [EOL]             e = new NonPositiveDefiniteOperatorException(); [EOL]             final ExceptionContext context = e.getContext(); [EOL]             context.setValue(OPERATOR, a); [EOL]             context.setValue(VECTOR, p); [EOL]             throw e; [EOL]         } [EOL]         final double alpha = rhoNext / pq; [EOL]         x.combineToSelf(1., alpha, p); [EOL]         r.combineToSelf(1., -alpha, q); [EOL]         rhoPrev = rhoNext; [EOL]         rnorm = r.getNorm(); [EOL]         evt = new DefaultIterativeLinearSolverEvent(this, manager.getIterations(), xro, bro, rro, rnorm); [EOL]         manager.fireIterationPerformedEvent(evt); [EOL]         if (rnorm <= rmax) { [EOL]             manager.fireTerminationEvent(evt); [EOL]             return x; [EOL]         } [EOL]     } [EOL] } <line_num>: 147,235
