public LUDecomposition(RealMatrix matrix) { [EOL]     this(matrix, DEFAULT_TOO_SMALL); [EOL] } <line_num>: 75,77
public LUDecomposition(RealMatrix matrix, double singularityThreshold) { [EOL]     if (!matrix.isSquare()) { [EOL]         throw new NonSquareMatrixException(matrix.getRowDimension(), matrix.getColumnDimension()); [EOL]     } [EOL]     final int m = matrix.getColumnDimension(); [EOL]     lu = matrix.getData(); [EOL]     pivot = new int[m]; [EOL]     cachedL = null; [EOL]     cachedU = null; [EOL]     cachedP = null; [EOL]     for (int row = 0; row < m; row++) { [EOL]         pivot[row] = row; [EOL]     } [EOL]     even = true; [EOL]     singular = false; [EOL]     for (int col = 0; col < m; col++) { [EOL]         for (int row = 0; row < col; row++) { [EOL]             final double[] luRow = lu[row]; [EOL]             double sum = luRow[col]; [EOL]             for (int i = 0; i < row; i++) { [EOL]                 sum -= luRow[i] * lu[i][col]; [EOL]             } [EOL]             luRow[col] = sum; [EOL]         } [EOL]         int max = col; [EOL]         double largest = Double.NEGATIVE_INFINITY; [EOL]         for (int row = col; row < m; row++) { [EOL]             final double[] luRow = lu[row]; [EOL]             double sum = luRow[col]; [EOL]             for (int i = 0; i < col; i++) { [EOL]                 sum -= luRow[i] * lu[i][col]; [EOL]             } [EOL]             luRow[col] = sum; [EOL]             if (FastMath.abs(sum) > largest) { [EOL]                 largest = FastMath.abs(sum); [EOL]                 max = row; [EOL]             } [EOL]         } [EOL]         if (FastMath.abs(lu[max][col]) < singularityThreshold) { [EOL]             singular = true; [EOL]             return; [EOL]         } [EOL]         if (max != col) { [EOL]             double tmp = 0; [EOL]             final double[] luMax = lu[max]; [EOL]             final double[] luCol = lu[col]; [EOL]             for (int i = 0; i < m; i++) { [EOL]                 tmp = luMax[i]; [EOL]                 luMax[i] = luCol[i]; [EOL]                 luCol[i] = tmp; [EOL]             } [EOL]             int temp = pivot[max]; [EOL]             pivot[max] = pivot[col]; [EOL]             pivot[col] = temp; [EOL]             even = !even; [EOL]         } [EOL]         final double luDiag = lu[col][col]; [EOL]         for (int row = col + 1; row < m; row++) { [EOL]             lu[row][col] /= luDiag; [EOL]         } [EOL]     } [EOL] } <line_num>: 86,165
private Solver(final double[][] lu, final int[] pivot, final boolean singular) { [EOL]     this.lu = lu; [EOL]     this.pivot = pivot; [EOL]     this.singular = singular; [EOL] } <line_num>: 279,283
public RealMatrix getL() { [EOL]     if ((cachedL == null) && !singular) { [EOL]         final int m = pivot.length; [EOL]         cachedL = MatrixUtils.createRealMatrix(m, m); [EOL]         for (int i = 0; i < m; ++i) { [EOL]             final double[] luI = lu[i]; [EOL]             for (int j = 0; j < i; ++j) { [EOL]                 cachedL.setEntry(i, j, luI[j]); [EOL]             } [EOL]             cachedL.setEntry(i, i, 1.0); [EOL]         } [EOL]     } [EOL]     return cachedL; [EOL] } <line_num>: 172,185
public RealMatrix getU() { [EOL]     if ((cachedU == null) && !singular) { [EOL]         final int m = pivot.length; [EOL]         cachedU = MatrixUtils.createRealMatrix(m, m); [EOL]         for (int i = 0; i < m; ++i) { [EOL]             final double[] luI = lu[i]; [EOL]             for (int j = i; j < m; ++j) { [EOL]                 cachedU.setEntry(i, j, luI[j]); [EOL]             } [EOL]         } [EOL]     } [EOL]     return cachedU; [EOL] } <line_num>: 192,204
public RealMatrix getP() { [EOL]     if ((cachedP == null) && !singular) { [EOL]         final int m = pivot.length; [EOL]         cachedP = MatrixUtils.createRealMatrix(m, m); [EOL]         for (int i = 0; i < m; ++i) { [EOL]             cachedP.setEntry(i, pivot[i], 1.0); [EOL]         } [EOL]     } [EOL]     return cachedP; [EOL] } <line_num>: 215,224
public int[] getPivot() { [EOL]     return pivot.clone(); [EOL] } <line_num>: 231,233
public double getDeterminant() { [EOL]     if (singular) { [EOL]         return 0; [EOL]     } else { [EOL]         final int m = pivot.length; [EOL]         double determinant = even ? 1 : -1; [EOL]         for (int i = 0; i < m; i++) { [EOL]             determinant *= lu[i][i]; [EOL]         } [EOL]         return determinant; [EOL]     } [EOL] } <line_num>: 239,250
public DecompositionSolver getSolver() { [EOL]     return new Solver(lu, pivot, singular); [EOL] } <line_num>: 257,259
public boolean isNonSingular() { [EOL]     return !singular; [EOL] } <line_num>: 286,288
public RealVector solve(RealVector b) { [EOL]     final int m = pivot.length; [EOL]     if (b.getDimension() != m) { [EOL]         throw new DimensionMismatchException(b.getDimension(), m); [EOL]     } [EOL]     if (singular) { [EOL]         throw new SingularMatrixException(); [EOL]     } [EOL]     final double[] bp = new double[m]; [EOL]     for (int row = 0; row < m; row++) { [EOL]         bp[row] = b.getEntry(pivot[row]); [EOL]     } [EOL]     for (int col = 0; col < m; col++) { [EOL]         final double bpCol = bp[col]; [EOL]         for (int i = col + 1; i < m; i++) { [EOL]             bp[i] -= bpCol * lu[i][col]; [EOL]         } [EOL]     } [EOL]     for (int col = m - 1; col >= 0; col--) { [EOL]         bp[col] /= lu[col][col]; [EOL]         final double bpCol = bp[col]; [EOL]         for (int i = 0; i < col; i++) { [EOL]             bp[i] -= bpCol * lu[i][col]; [EOL]         } [EOL]     } [EOL]     return new ArrayRealVector(bp, false); [EOL] } <line_num>: 291,325
public RealMatrix solve(RealMatrix b) { [EOL]     final int m = pivot.length; [EOL]     if (b.getRowDimension() != m) { [EOL]         throw new DimensionMismatchException(b.getRowDimension(), m); [EOL]     } [EOL]     if (singular) { [EOL]         throw new SingularMatrixException(); [EOL]     } [EOL]     final int nColB = b.getColumnDimension(); [EOL]     final double[][] bp = new double[m][nColB]; [EOL]     for (int row = 0; row < m; row++) { [EOL]         final double[] bpRow = bp[row]; [EOL]         final int pRow = pivot[row]; [EOL]         for (int col = 0; col < nColB; col++) { [EOL]             bpRow[col] = b.getEntry(pRow, col); [EOL]         } [EOL]     } [EOL]     for (int col = 0; col < m; col++) { [EOL]         final double[] bpCol = bp[col]; [EOL]         for (int i = col + 1; i < m; i++) { [EOL]             final double[] bpI = bp[i]; [EOL]             final double luICol = lu[i][col]; [EOL]             for (int j = 0; j < nColB; j++) { [EOL]                 bpI[j] -= bpCol[j] * luICol; [EOL]             } [EOL]         } [EOL]     } [EOL]     for (int col = m - 1; col >= 0; col--) { [EOL]         final double[] bpCol = bp[col]; [EOL]         final double luDiag = lu[col][col]; [EOL]         for (int j = 0; j < nColB; j++) { [EOL]             bpCol[j] /= luDiag; [EOL]         } [EOL]         for (int i = 0; i < col; i++) { [EOL]             final double[] bpI = bp[i]; [EOL]             final double luICol = lu[i][col]; [EOL]             for (int j = 0; j < nColB; j++) { [EOL]                 bpI[j] -= bpCol[j] * luICol; [EOL]             } [EOL]         } [EOL]     } [EOL]     return new Array2DRowRealMatrix(bp, false); [EOL] } <line_num>: 328,379
public RealMatrix getInverse() { [EOL]     return solve(MatrixUtils.createRealIdentityMatrix(pivot.length)); [EOL] } <line_num>: 382,384
