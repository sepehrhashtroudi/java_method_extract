public DiagonalMatrix(final int dimension) throws NotStrictlyPositiveException { [EOL]     super(dimension, dimension); [EOL]     data = new double[dimension]; [EOL] } <line_num>: 50,54
public DiagonalMatrix(final double[] d) { [EOL]     this(d, true); [EOL] } <line_num>: 63,65
public DiagonalMatrix(final double[] d, final boolean copyArray) throws NullArgumentException { [EOL]     MathUtils.checkNotNull(d); [EOL]     data = copyArray ? d.clone() : d; [EOL] } <line_num>: 81,85
@Override [EOL] public RealMatrix createMatrix(final int rowDimension, final int columnDimension) throws NotStrictlyPositiveException, DimensionMismatchException { [EOL]     if (rowDimension != columnDimension) { [EOL]         throw new DimensionMismatchException(rowDimension, columnDimension); [EOL]     } [EOL]     return new DiagonalMatrix(rowDimension); [EOL] } <line_num>: 92,102
@Override [EOL] public RealMatrix copy() { [EOL]     return new DiagonalMatrix(data); [EOL] } <line_num>: 105,108
public DiagonalMatrix add(final DiagonalMatrix m) throws MatrixDimensionMismatchException { [EOL]     MatrixUtils.checkAdditionCompatible(this, m); [EOL]     final int dim = getRowDimension(); [EOL]     final double[] outData = new double[dim]; [EOL]     for (int i = 0; i < dim; i++) { [EOL]         outData[i] = data[i] + m.data[i]; [EOL]     } [EOL]     return new DiagonalMatrix(outData, false); [EOL] } <line_num>: 118,130
public DiagonalMatrix subtract(final DiagonalMatrix m) throws MatrixDimensionMismatchException { [EOL]     MatrixUtils.checkSubtractionCompatible(this, m); [EOL]     final int dim = getRowDimension(); [EOL]     final double[] outData = new double[dim]; [EOL]     for (int i = 0; i < dim; i++) { [EOL]         outData[i] = data[i] - m.data[i]; [EOL]     } [EOL]     return new DiagonalMatrix(outData, false); [EOL] } <line_num>: 140,151
public DiagonalMatrix multiply(final DiagonalMatrix m) throws DimensionMismatchException { [EOL]     MatrixUtils.checkMultiplicationCompatible(this, m); [EOL]     final int dim = getRowDimension(); [EOL]     final double[] outData = new double[dim]; [EOL]     for (int i = 0; i < dim; i++) { [EOL]         outData[i] = data[i] * m.data[i]; [EOL]     } [EOL]     return new DiagonalMatrix(outData, false); [EOL] } <line_num>: 161,172
@Override [EOL] public RealMatrix multiply(final RealMatrix m) throws DimensionMismatchException { [EOL]     if (m instanceof DiagonalMatrix) { [EOL]         return multiply((DiagonalMatrix) m); [EOL]     } else { [EOL]         MatrixUtils.checkMultiplicationCompatible(this, m); [EOL]         final int nRows = m.getRowDimension(); [EOL]         final int nCols = m.getColumnDimension(); [EOL]         final double[][] product = new double[nRows][nCols]; [EOL]         for (int r = 0; r < nRows; r++) { [EOL]             for (int c = 0; c < nCols; c++) { [EOL]                 product[r][c] = data[r] * m.getEntry(r, c); [EOL]             } [EOL]         } [EOL]         return new Array2DRowRealMatrix(product, false); [EOL]     } [EOL] } <line_num>: 182,199
@Override [EOL] public double[][] getData() { [EOL]     final int dim = getRowDimension(); [EOL]     final double[][] out = new double[dim][dim]; [EOL]     for (int i = 0; i < dim; i++) { [EOL]         out[i][i] = data[i]; [EOL]     } [EOL]     return out; [EOL] } <line_num>: 202,212
public double[] getDataRef() { [EOL]     return data; [EOL] } <line_num>: 219,221
@Override [EOL] public double getEntry(final int row, final int column) throws OutOfRangeException { [EOL]     MatrixUtils.checkMatrixIndex(this, row, column); [EOL]     return row == column ? data[row] : 0; [EOL] } <line_num>: 224,229
@Override [EOL] public void setEntry(final int row, final int column, final double value) throws OutOfRangeException, NumberIsTooLargeException { [EOL]     if (row == column) { [EOL]         MatrixUtils.checkRowIndex(this, row); [EOL]         data[row] = value; [EOL]     } else { [EOL]         ensureZero(value); [EOL]     } [EOL] } <line_num>: 234,243
@Override [EOL] public void addToEntry(final int row, final int column, final double increment) throws OutOfRangeException, NumberIsTooLargeException { [EOL]     if (row == column) { [EOL]         MatrixUtils.checkRowIndex(this, row); [EOL]         data[row] += increment; [EOL]     } else { [EOL]         ensureZero(increment); [EOL]     } [EOL] } <line_num>: 248,259
@Override [EOL] public void multiplyEntry(final int row, final int column, final double factor) throws OutOfRangeException { [EOL]     if (row == column) { [EOL]         MatrixUtils.checkRowIndex(this, row); [EOL]         data[row] *= factor; [EOL]     } [EOL] } <line_num>: 262,272
@Override [EOL] public int getRowDimension() { [EOL]     return data.length; [EOL] } <line_num>: 275,278
@Override [EOL] public int getColumnDimension() { [EOL]     return data.length; [EOL] } <line_num>: 281,284
@Override [EOL] public double[] operate(final double[] v) throws DimensionMismatchException { [EOL]     return multiply(new DiagonalMatrix(v, false)).getDataRef(); [EOL] } <line_num>: 287,291
@Override [EOL] public double[] preMultiply(final double[] v) throws DimensionMismatchException { [EOL]     return operate(v); [EOL] } <line_num>: 294,298
@Override [EOL] public RealVector preMultiply(final RealVector v) throws DimensionMismatchException { [EOL]     final double[] vectorData; [EOL]     if (v instanceof ArrayRealVector) { [EOL]         vectorData = ((ArrayRealVector) v).getDataRef(); [EOL]     } else { [EOL]         vectorData = v.toArray(); [EOL]     } [EOL]     return MatrixUtils.createRealVector(preMultiply(vectorData)); [EOL] } <line_num>: 301,310
private void ensureZero(final double value) throws NumberIsTooLargeException { [EOL]     if (!Precision.equals(0.0, value, 1)) { [EOL]         throw new NumberIsTooLargeException(FastMath.abs(value), 0, true); [EOL]     } [EOL] } <line_num>: 316,320
