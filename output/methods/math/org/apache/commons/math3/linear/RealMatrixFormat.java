public RealMatrixFormat() { [EOL]     this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX, DEFAULT_ROW_SEPARATOR, DEFAULT_COLUMN_SEPARATOR, CompositeFormat.getDefaultNumberFormat()); [EOL] } <line_num>: 89,92
public RealMatrixFormat(final NumberFormat format) { [EOL]     this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX, DEFAULT_ROW_SEPARATOR, DEFAULT_COLUMN_SEPARATOR, format); [EOL] } <line_num>: 98,101
public RealMatrixFormat(final String prefix, final String suffix, final String rowPrefix, final String rowSuffix, final String rowSeparator, final String columnSeparator) { [EOL]     this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator, CompositeFormat.getDefaultNumberFormat()); [EOL] } <line_num>: 112,117
public RealMatrixFormat(final String prefix, final String suffix, final String rowPrefix, final String rowSuffix, final String rowSeparator, final String columnSeparator, final NumberFormat format) { [EOL]     this.prefix = prefix; [EOL]     this.suffix = suffix; [EOL]     this.rowPrefix = rowPrefix; [EOL]     this.rowSuffix = rowSuffix; [EOL]     this.rowSeparator = rowSeparator; [EOL]     this.columnSeparator = columnSeparator; [EOL]     this.format = format; [EOL]     this.format.setGroupingUsed(false); [EOL] } <line_num>: 130,143
public static Locale[] getAvailableLocales() { [EOL]     return NumberFormat.getAvailableLocales(); [EOL] } <line_num>: 150,152
public String getPrefix() { [EOL]     return prefix; [EOL] } <line_num>: 158,160
public String getSuffix() { [EOL]     return suffix; [EOL] } <line_num>: 166,168
public String getRowPrefix() { [EOL]     return rowPrefix; [EOL] } <line_num>: 174,176
public String getRowSuffix() { [EOL]     return rowSuffix; [EOL] } <line_num>: 182,184
public String getRowSeparator() { [EOL]     return rowSeparator; [EOL] } <line_num>: 190,192
public String getColumnSeparator() { [EOL]     return columnSeparator; [EOL] } <line_num>: 198,200
public NumberFormat getFormat() { [EOL]     return format; [EOL] } <line_num>: 206,208
public static RealMatrixFormat getInstance() { [EOL]     return getInstance(Locale.getDefault()); [EOL] } <line_num>: 214,216
public static RealMatrixFormat getInstance(final Locale locale) { [EOL]     return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale)); [EOL] } <line_num>: 223,225
public String format(RealMatrix m) { [EOL]     return format(m, new StringBuffer(), new FieldPosition(0)).toString(); [EOL] } <line_num>: 233,235
public StringBuffer format(RealMatrix matrix, StringBuffer toAppendTo, FieldPosition pos) { [EOL]     pos.setBeginIndex(0); [EOL]     pos.setEndIndex(0); [EOL]     toAppendTo.append(prefix); [EOL]     final int rows = matrix.getRowDimension(); [EOL]     for (int i = 0; i < rows; ++i) { [EOL]         toAppendTo.append(rowPrefix); [EOL]         for (int j = 0; j < matrix.getColumnDimension(); ++j) { [EOL]             if (j > 0) { [EOL]                 toAppendTo.append(columnSeparator); [EOL]             } [EOL]             CompositeFormat.formatDouble(matrix.getEntry(i, j), format, toAppendTo, pos); [EOL]         } [EOL]         toAppendTo.append(rowSuffix); [EOL]         if (i < rows - 1) { [EOL]             toAppendTo.append(rowSeparator); [EOL]         } [EOL]     } [EOL]     toAppendTo.append(suffix); [EOL]     return toAppendTo; [EOL] } <line_num>: 245,274
public RealMatrix parse(String source) { [EOL]     final ParsePosition parsePosition = new ParsePosition(0); [EOL]     final RealMatrix result = parse(source, parsePosition); [EOL]     if (parsePosition.getIndex() == 0) { [EOL]         throw new MathParseException(source, parsePosition.getErrorIndex(), Array2DRowRealMatrix.class); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 284,293
public RealMatrix parse(String source, ParsePosition pos) { [EOL]     int initialIndex = pos.getIndex(); [EOL]     final String trimmedPrefix = prefix.trim(); [EOL]     final String trimmedSuffix = suffix.trim(); [EOL]     final String trimmedRowPrefix = rowPrefix.trim(); [EOL]     final String trimmedRowSuffix = rowSuffix.trim(); [EOL]     final String trimmedColumnSeparator = columnSeparator.trim(); [EOL]     final String trimmedRowSeparator = rowSeparator.trim(); [EOL]     CompositeFormat.parseAndIgnoreWhitespace(source, pos); [EOL]     if (!CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)) { [EOL]         return null; [EOL]     } [EOL]     List<List<Number>> matrix = new ArrayList<List<Number>>(); [EOL]     List<Number> rowComponents = new ArrayList<Number>(); [EOL]     for (boolean loop = true; loop; ) { [EOL]         if (!rowComponents.isEmpty()) { [EOL]             CompositeFormat.parseAndIgnoreWhitespace(source, pos); [EOL]             if (!CompositeFormat.parseFixedstring(source, trimmedColumnSeparator, pos)) { [EOL]                 if (trimmedRowSuffix.length() != 0 && !CompositeFormat.parseFixedstring(source, trimmedRowSuffix, pos)) { [EOL]                     return null; [EOL]                 } else { [EOL]                     CompositeFormat.parseAndIgnoreWhitespace(source, pos); [EOL]                     if (CompositeFormat.parseFixedstring(source, trimmedRowSeparator, pos)) { [EOL]                         matrix.add(rowComponents); [EOL]                         rowComponents = new ArrayList<Number>(); [EOL]                         continue; [EOL]                     } else { [EOL]                         loop = false; [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } else { [EOL]             CompositeFormat.parseAndIgnoreWhitespace(source, pos); [EOL]             if (trimmedRowPrefix.length() != 0 && !CompositeFormat.parseFixedstring(source, trimmedRowPrefix, pos)) { [EOL]                 return null; [EOL]             } [EOL]         } [EOL]         if (loop) { [EOL]             CompositeFormat.parseAndIgnoreWhitespace(source, pos); [EOL]             Number component = CompositeFormat.parseNumber(source, format, pos); [EOL]             if (component != null) { [EOL]                 rowComponents.add(component); [EOL]             } else { [EOL]                 if (rowComponents.isEmpty()) { [EOL]                     loop = false; [EOL]                 } else { [EOL]                     pos.setIndex(initialIndex); [EOL]                     return null; [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     if (!rowComponents.isEmpty()) { [EOL]         matrix.add(rowComponents); [EOL]     } [EOL]     CompositeFormat.parseAndIgnoreWhitespace(source, pos); [EOL]     if (!CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)) { [EOL]         return null; [EOL]     } [EOL]     if (matrix.isEmpty()) { [EOL]         pos.setIndex(initialIndex); [EOL]         return null; [EOL]     } [EOL]     double[][] data = new double[matrix.size()][]; [EOL]     int row = 0; [EOL]     for (List<Number> rowList : matrix) { [EOL]         data[row] = new double[rowList.size()]; [EOL]         for (int i = 0; i < rowList.size(); i++) { [EOL]             data[row][i] = rowList.get(i).doubleValue(); [EOL]         } [EOL]         row++; [EOL]     } [EOL]     return MatrixUtils.createRealMatrix(data); [EOL] } <line_num>: 302,394
