public OpenMapRealMatrix(int rowDimension, int columnDimension) throws NotStrictlyPositiveException, NumberIsTooLargeException { [EOL]     super(rowDimension, columnDimension); [EOL]     long lRow = rowDimension; [EOL]     long lCol = columnDimension; [EOL]     if (lRow * lCol >= Integer.MAX_VALUE) { [EOL]         throw new NumberIsTooLargeException(lRow * lCol, Integer.MAX_VALUE, false); [EOL]     } [EOL]     this.rows = rowDimension; [EOL]     this.columns = columnDimension; [EOL]     this.entries = new OpenIntToDoubleHashMap(0.0); [EOL] } <line_num>: 61,72
public OpenMapRealMatrix(OpenMapRealMatrix matrix) { [EOL]     this.rows = matrix.rows; [EOL]     this.columns = matrix.columns; [EOL]     this.entries = new OpenIntToDoubleHashMap(matrix.entries); [EOL] } <line_num>: 79,83
@Override [EOL] public OpenMapRealMatrix copy() { [EOL]     return new OpenMapRealMatrix(this); [EOL] } <line_num>: 86,89
@Override [EOL] public OpenMapRealMatrix createMatrix(int rowDimension, int columnDimension) throws NotStrictlyPositiveException, NumberIsTooLargeException { [EOL]     return new OpenMapRealMatrix(rowDimension, columnDimension); [EOL] } <line_num>: 97,101
@Override [EOL] public int getColumnDimension() { [EOL]     return columns; [EOL] } <line_num>: 104,107
public OpenMapRealMatrix add(OpenMapRealMatrix m) throws MatrixDimensionMismatchException { [EOL]     MatrixUtils.checkAdditionCompatible(this, m); [EOL]     final OpenMapRealMatrix out = new OpenMapRealMatrix(this); [EOL]     for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext(); ) { [EOL]         iterator.advance(); [EOL]         final int row = iterator.key() / columns; [EOL]         final int col = iterator.key() - row * columns; [EOL]         out.setEntry(row, col, getEntry(row, col) + iterator.value()); [EOL]     } [EOL]     return out; [EOL] } <line_num>: 117,132
@Override [EOL] public OpenMapRealMatrix subtract(final RealMatrix m) throws MatrixDimensionMismatchException { [EOL]     try { [EOL]         return subtract((OpenMapRealMatrix) m); [EOL]     } catch (ClassCastException cce) { [EOL]         return (OpenMapRealMatrix) super.subtract(m); [EOL]     } [EOL] } <line_num>: 135,143
public OpenMapRealMatrix subtract(OpenMapRealMatrix m) throws MatrixDimensionMismatchException { [EOL]     MatrixUtils.checkAdditionCompatible(this, m); [EOL]     final OpenMapRealMatrix out = new OpenMapRealMatrix(this); [EOL]     for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext(); ) { [EOL]         iterator.advance(); [EOL]         final int row = iterator.key() / columns; [EOL]         final int col = iterator.key() - row * columns; [EOL]         out.setEntry(row, col, getEntry(row, col) - iterator.value()); [EOL]     } [EOL]     return out; [EOL] } <line_num>: 153,166
@Override [EOL] public RealMatrix multiply(final RealMatrix m) throws DimensionMismatchException, NumberIsTooLargeException { [EOL]     try { [EOL]         return multiply((OpenMapRealMatrix) m); [EOL]     } catch (ClassCastException cce) { [EOL]         MatrixUtils.checkMultiplicationCompatible(this, m); [EOL]         final int outCols = m.getColumnDimension(); [EOL]         final BlockRealMatrix out = new BlockRealMatrix(rows, outCols); [EOL]         for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext(); ) { [EOL]             iterator.advance(); [EOL]             final double value = iterator.value(); [EOL]             final int key = iterator.key(); [EOL]             final int i = key / columns; [EOL]             final int k = key % columns; [EOL]             for (int j = 0; j < outCols; ++j) { [EOL]                 out.addToEntry(i, j, value * m.getEntry(k, j)); [EOL]             } [EOL]         } [EOL]         return out; [EOL]     } [EOL] } <line_num>: 175,199
public OpenMapRealMatrix multiply(OpenMapRealMatrix m) throws DimensionMismatchException, NumberIsTooLargeException { [EOL]     MatrixUtils.checkMultiplicationCompatible(this, m); [EOL]     final int outCols = m.getColumnDimension(); [EOL]     OpenMapRealMatrix out = new OpenMapRealMatrix(rows, outCols); [EOL]     for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext(); ) { [EOL]         iterator.advance(); [EOL]         final double value = iterator.value(); [EOL]         final int key = iterator.key(); [EOL]         final int i = key / columns; [EOL]         final int k = key % columns; [EOL]         for (int j = 0; j < outCols; ++j) { [EOL]             final int rightKey = m.computeKey(k, j); [EOL]             if (m.entries.containsKey(rightKey)) { [EOL]                 final int outKey = out.computeKey(i, j); [EOL]                 final double outValue = out.entries.get(outKey) + value * m.entries.get(rightKey); [EOL]                 if (outValue == 0.0) { [EOL]                     out.entries.remove(outKey); [EOL]                 } else { [EOL]                     out.entries.put(outKey, outValue); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return out; [EOL] } <line_num>: 211,240
@Override [EOL] public double getEntry(int row, int column) throws OutOfRangeException { [EOL]     MatrixUtils.checkRowIndex(this, row); [EOL]     MatrixUtils.checkColumnIndex(this, column); [EOL]     return entries.get(computeKey(row, column)); [EOL] } <line_num>: 243,248
@Override [EOL] public int getRowDimension() { [EOL]     return rows; [EOL] } <line_num>: 251,254
@Override [EOL] public void setEntry(int row, int column, double value) throws OutOfRangeException { [EOL]     MatrixUtils.checkRowIndex(this, row); [EOL]     MatrixUtils.checkColumnIndex(this, column); [EOL]     if (value == 0.0) { [EOL]         entries.remove(computeKey(row, column)); [EOL]     } else { [EOL]         entries.put(computeKey(row, column), value); [EOL]     } [EOL] } <line_num>: 257,267
@Override [EOL] public void addToEntry(int row, int column, double increment) throws OutOfRangeException { [EOL]     MatrixUtils.checkRowIndex(this, row); [EOL]     MatrixUtils.checkColumnIndex(this, column); [EOL]     final int key = computeKey(row, column); [EOL]     final double value = entries.get(key) + increment; [EOL]     if (value == 0.0) { [EOL]         entries.remove(key); [EOL]     } else { [EOL]         entries.put(key, value); [EOL]     } [EOL] } <line_num>: 270,282
@Override [EOL] public void multiplyEntry(int row, int column, double factor) throws OutOfRangeException { [EOL]     MatrixUtils.checkRowIndex(this, row); [EOL]     MatrixUtils.checkColumnIndex(this, column); [EOL]     final int key = computeKey(row, column); [EOL]     final double value = entries.get(key) * factor; [EOL]     if (value == 0.0) { [EOL]         entries.remove(key); [EOL]     } else { [EOL]         entries.put(key, value); [EOL]     } [EOL] } <line_num>: 285,297
private int computeKey(int row, int column) { [EOL]     return row * columns + column; [EOL] } <line_num>: 305,307
