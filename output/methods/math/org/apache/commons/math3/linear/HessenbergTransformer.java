public HessenbergTransformer(final RealMatrix matrix) { [EOL]     if (!matrix.isSquare()) { [EOL]         throw new NonSquareMatrixException(matrix.getRowDimension(), matrix.getColumnDimension()); [EOL]     } [EOL]     final int m = matrix.getRowDimension(); [EOL]     householderVectors = matrix.getData(); [EOL]     ort = new double[m]; [EOL]     cachedP = null; [EOL]     cachedPt = null; [EOL]     cachedH = null; [EOL]     transform(); [EOL] } <line_num>: 60,75
public RealMatrix getP() { [EOL]     if (cachedP == null) { [EOL]         final int n = householderVectors.length; [EOL]         final int high = n - 1; [EOL]         final double[][] pa = new double[n][n]; [EOL]         for (int i = 0; i < n; i++) { [EOL]             for (int j = 0; j < n; j++) { [EOL]                 pa[i][j] = (i == j) ? 1 : 0; [EOL]             } [EOL]         } [EOL]         for (int m = high - 1; m >= 1; m--) { [EOL]             if (householderVectors[m][m - 1] != 0.0) { [EOL]                 for (int i = m + 1; i <= high; i++) { [EOL]                     ort[i] = householderVectors[i][m - 1]; [EOL]                 } [EOL]                 for (int j = m; j <= high; j++) { [EOL]                     double g = 0.0; [EOL]                     for (int i = m; i <= high; i++) { [EOL]                         g += ort[i] * pa[i][j]; [EOL]                     } [EOL]                     g = (g / ort[m]) / householderVectors[m][m - 1]; [EOL]                     for (int i = m; i <= high; i++) { [EOL]                         pa[i][j] += g * ort[i]; [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]         cachedP = MatrixUtils.createRealMatrix(pa); [EOL]     } [EOL]     return cachedP; [EOL] } <line_num>: 83,121
public RealMatrix getPT() { [EOL]     if (cachedPt == null) { [EOL]         cachedPt = getP().transpose(); [EOL]     } [EOL]     return cachedPt; [EOL] } <line_num>: 129,136
public RealMatrix getH() { [EOL]     if (cachedH == null) { [EOL]         final int m = householderVectors.length; [EOL]         final double[][] h = new double[m][m]; [EOL]         for (int i = 0; i < m; ++i) { [EOL]             if (i > 0) { [EOL]                 h[i][i - 1] = householderVectors[i][i - 1]; [EOL]             } [EOL]             for (int j = i; j < m; ++j) { [EOL]                 h[i][j] = householderVectors[i][j]; [EOL]             } [EOL]         } [EOL]         cachedH = MatrixUtils.createRealMatrix(h); [EOL]     } [EOL]     return cachedH; [EOL] } <line_num>: 143,163
double[][] getHouseholderVectorsRef() { [EOL]     return householderVectors; [EOL] } <line_num>: 172,174
private void transform() { [EOL]     final int n = householderVectors.length; [EOL]     final int high = n - 1; [EOL]     for (int m = 1; m <= high - 1; m++) { [EOL]         double scale = 0; [EOL]         for (int i = m; i <= high; i++) { [EOL]             scale += FastMath.abs(householderVectors[i][m - 1]); [EOL]         } [EOL]         if (!Precision.equals(scale, 0)) { [EOL]             double h = 0; [EOL]             for (int i = high; i >= m; i--) { [EOL]                 ort[i] = householderVectors[i][m - 1] / scale; [EOL]                 h += ort[i] * ort[i]; [EOL]             } [EOL]             final double g = (ort[m] > 0) ? -FastMath.sqrt(h) : FastMath.sqrt(h); [EOL]             h = h - ort[m] * g; [EOL]             ort[m] = ort[m] - g; [EOL]             for (int j = m; j < n; j++) { [EOL]                 double f = 0; [EOL]                 for (int i = high; i >= m; i--) { [EOL]                     f += ort[i] * householderVectors[i][j]; [EOL]                 } [EOL]                 f = f / h; [EOL]                 for (int i = m; i <= high; i++) { [EOL]                     householderVectors[i][j] -= f * ort[i]; [EOL]                 } [EOL]             } [EOL]             for (int i = 0; i <= high; i++) { [EOL]                 double f = 0; [EOL]                 for (int j = high; j >= m; j--) { [EOL]                     f += ort[j] * householderVectors[i][j]; [EOL]                 } [EOL]                 f = f / h; [EOL]                 for (int j = m; j <= high; j++) { [EOL]                     householderVectors[i][j] -= f * ort[j]; [EOL]                 } [EOL]             } [EOL]             ort[m] = scale * ort[m]; [EOL]             householderVectors[m][m - 1] = scale * g; [EOL]         } [EOL]     } [EOL] } <line_num>: 180,232
