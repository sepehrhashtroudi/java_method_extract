public RRQRDecomposition(RealMatrix matrix) { [EOL]     this(matrix, 0d); [EOL] } <line_num>: 68,70
public RRQRDecomposition(RealMatrix matrix, double threshold) { [EOL]     super(matrix, threshold); [EOL] } <line_num>: 79,81
private Solver(final DecompositionSolver upper, final RealMatrix p) { [EOL]     this.upper = upper; [EOL]     this.p = p; [EOL] } <line_num>: 209,212
@Override [EOL] protected void decompose(double[][] qrt) { [EOL]     p = new int[qrt.length]; [EOL]     for (int i = 0; i < p.length; i++) { [EOL]         p[i] = i; [EOL]     } [EOL]     super.decompose(qrt); [EOL] } <line_num>: 86,93
@Override [EOL] protected void performHouseholderReflection(int minor, double[][] qrt) { [EOL]     double l2NormSquaredMax = 0; [EOL]     int l2NormSquaredMaxIndex = minor; [EOL]     for (int i = minor; i < qrt.length; i++) { [EOL]         double l2NormSquared = 0; [EOL]         for (int j = 0; j < qrt[i].length; j++) { [EOL]             l2NormSquared += qrt[i][j] * qrt[i][j]; [EOL]         } [EOL]         if (l2NormSquared > l2NormSquaredMax) { [EOL]             l2NormSquaredMax = l2NormSquared; [EOL]             l2NormSquaredMaxIndex = i; [EOL]         } [EOL]     } [EOL]     if (l2NormSquaredMaxIndex != minor) { [EOL]         double[] tmp1 = qrt[minor]; [EOL]         qrt[minor] = qrt[l2NormSquaredMaxIndex]; [EOL]         qrt[l2NormSquaredMaxIndex] = tmp1; [EOL]         int tmp2 = p[minor]; [EOL]         p[minor] = p[l2NormSquaredMaxIndex]; [EOL]         p[l2NormSquaredMaxIndex] = tmp2; [EOL]     } [EOL]     super.performHouseholderReflection(minor, qrt); [EOL] } <line_num>: 99,127
public RealMatrix getP() { [EOL]     if (cachedP == null) { [EOL]         int n = p.length; [EOL]         cachedP = MatrixUtils.createRealMatrix(n, n); [EOL]         for (int i = 0; i < n; i++) { [EOL]             cachedP.setEntry(p[i], i, 1); [EOL]         } [EOL]     } [EOL]     return cachedP; [EOL] } <line_num>: 137,146
public int getRank(final double dropThreshold) { [EOL]     RealMatrix r = getR(); [EOL]     int rows = r.getRowDimension(); [EOL]     int columns = r.getColumnDimension(); [EOL]     int rank = 1; [EOL]     double lastNorm = r.getFrobeniusNorm(); [EOL]     double rNorm = lastNorm; [EOL]     while (rank < FastMath.min(rows, columns)) { [EOL]         double thisNorm = r.getSubMatrix(rank, rows - 1, rank, columns - 1).getFrobeniusNorm(); [EOL]         if (thisNorm == 0 || (thisNorm / lastNorm) * rNorm < dropThreshold) { [EOL]             break; [EOL]         } [EOL]         lastNorm = thisNorm; [EOL]         rank++; [EOL]     } [EOL]     return rank; [EOL] } <line_num>: 167,183
@Override [EOL] public DecompositionSolver getSolver() { [EOL]     return new Solver(super.getSolver(), this.getP()); [EOL] } <line_num>: 189,192
public boolean isNonSingular() { [EOL]     return upper.isNonSingular(); [EOL] } <line_num>: 215,217
public RealVector solve(RealVector b) { [EOL]     return p.operate(upper.solve(b)); [EOL] } <line_num>: 220,222
public RealMatrix solve(RealMatrix b) { [EOL]     return p.multiply(upper.solve(b)); [EOL] } <line_num>: 225,227
public RealMatrix getInverse() { [EOL]     return solve(MatrixUtils.createRealIdentityMatrix(p.getRowDimension())); [EOL] } <line_num>: 230,232
