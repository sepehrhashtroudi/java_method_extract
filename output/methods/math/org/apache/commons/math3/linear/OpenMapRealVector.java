public OpenMapRealVector() { [EOL]     this(0, DEFAULT_ZERO_TOLERANCE); [EOL] } <line_num>: 62,64
public OpenMapRealVector(int dimension) { [EOL]     this(dimension, DEFAULT_ZERO_TOLERANCE); [EOL] } <line_num>: 71,73
public OpenMapRealVector(int dimension, double epsilon) { [EOL]     virtualSize = dimension; [EOL]     entries = new OpenIntToDoubleHashMap(0.0); [EOL]     this.epsilon = epsilon; [EOL] } <line_num>: 81,85
protected OpenMapRealVector(OpenMapRealVector v, int resize) { [EOL]     virtualSize = v.getDimension() + resize; [EOL]     entries = new OpenIntToDoubleHashMap(v.entries); [EOL]     epsilon = v.epsilon; [EOL] } <line_num>: 93,97
public OpenMapRealVector(int dimension, int expectedSize) { [EOL]     this(dimension, expectedSize, DEFAULT_ZERO_TOLERANCE); [EOL] } <line_num>: 105,107
public OpenMapRealVector(int dimension, int expectedSize, double epsilon) { [EOL]     virtualSize = dimension; [EOL]     entries = new OpenIntToDoubleHashMap(expectedSize, 0.0); [EOL]     this.epsilon = epsilon; [EOL] } <line_num>: 117,121
public OpenMapRealVector(double[] values) { [EOL]     this(values, DEFAULT_ZERO_TOLERANCE); [EOL] } <line_num>: 129,131
public OpenMapRealVector(double[] values, double epsilon) { [EOL]     virtualSize = values.length; [EOL]     entries = new OpenIntToDoubleHashMap(0.0); [EOL]     this.epsilon = epsilon; [EOL]     for (int key = 0; key < values.length; key++) { [EOL]         double value = values[key]; [EOL]         if (!isDefaultValue(value)) { [EOL]             entries.put(key, value); [EOL]         } [EOL]     } [EOL] } <line_num>: 140,150
public OpenMapRealVector(Double[] values) { [EOL]     this(values, DEFAULT_ZERO_TOLERANCE); [EOL] } <line_num>: 158,160
public OpenMapRealVector(Double[] values, double epsilon) { [EOL]     virtualSize = values.length; [EOL]     entries = new OpenIntToDoubleHashMap(0.0); [EOL]     this.epsilon = epsilon; [EOL]     for (int key = 0; key < values.length; key++) { [EOL]         double value = values[key].doubleValue(); [EOL]         if (!isDefaultValue(value)) { [EOL]             entries.put(key, value); [EOL]         } [EOL]     } [EOL] } <line_num>: 169,179
public OpenMapRealVector(OpenMapRealVector v) { [EOL]     virtualSize = v.getDimension(); [EOL]     entries = new OpenIntToDoubleHashMap(v.getEntries()); [EOL]     epsilon = v.epsilon; [EOL] } <line_num>: 186,190
public OpenMapRealVector(RealVector v) { [EOL]     virtualSize = v.getDimension(); [EOL]     entries = new OpenIntToDoubleHashMap(0.0); [EOL]     epsilon = DEFAULT_ZERO_TOLERANCE; [EOL]     for (int key = 0; key < virtualSize; key++) { [EOL]         double value = v.getEntry(key); [EOL]         if (!isDefaultValue(value)) { [EOL]             entries.put(key, value); [EOL]         } [EOL]     } [EOL] } <line_num>: 197,207
protected OpenMapEntry(Iterator iter) { [EOL]     this.iter = iter; [EOL] } <line_num>: 792,794
protected OpenMapSparseIterator() { [EOL]     iter = entries.iterator(); [EOL]     current = new OpenMapEntry(iter); [EOL] } <line_num>: 828,831
private OpenIntToDoubleHashMap getEntries() { [EOL]     return entries; [EOL] } <line_num>: 214,216
protected boolean isDefaultValue(double value) { [EOL]     return FastMath.abs(value) < epsilon; [EOL] } <line_num>: 226,228
@Override [EOL] public RealVector add(RealVector v) throws DimensionMismatchException { [EOL]     checkVectorDimensions(v.getDimension()); [EOL]     if (v instanceof OpenMapRealVector) { [EOL]         return add((OpenMapRealVector) v); [EOL]     } else { [EOL]         return super.add(v); [EOL]     } [EOL] } <line_num>: 231,240
public OpenMapRealVector add(OpenMapRealVector v) throws DimensionMismatchException { [EOL]     checkVectorDimensions(v.getDimension()); [EOL]     boolean copyThis = entries.size() > v.entries.size(); [EOL]     OpenMapRealVector res = copyThis ? this.copy() : v.copy(); [EOL]     Iterator iter = copyThis ? v.entries.iterator() : entries.iterator(); [EOL]     OpenIntToDoubleHashMap randomAccess = copyThis ? entries : v.entries; [EOL]     while (iter.hasNext()) { [EOL]         iter.advance(); [EOL]         int key = iter.key(); [EOL]         if (randomAccess.containsKey(key)) { [EOL]             res.setEntry(key, randomAccess.get(key) + iter.value()); [EOL]         } else { [EOL]             res.setEntry(key, iter.value()); [EOL]         } [EOL]     } [EOL]     return res; [EOL] } <line_num>: 250,267
public OpenMapRealVector append(OpenMapRealVector v) { [EOL]     OpenMapRealVector res = new OpenMapRealVector(this, v.getDimension()); [EOL]     Iterator iter = v.entries.iterator(); [EOL]     while (iter.hasNext()) { [EOL]         iter.advance(); [EOL]         res.setEntry(iter.key() + virtualSize, iter.value()); [EOL]     } [EOL]     return res; [EOL] } <line_num>: 274,282
@Override [EOL] public OpenMapRealVector append(RealVector v) { [EOL]     if (v instanceof OpenMapRealVector) { [EOL]         return append((OpenMapRealVector) v); [EOL]     } else { [EOL]         final OpenMapRealVector res = new OpenMapRealVector(this, v.getDimension()); [EOL]         for (int i = 0; i < v.getDimension(); i++) { [EOL]             res.setEntry(i + virtualSize, v.getEntry(i)); [EOL]         } [EOL]         return res; [EOL]     } [EOL] } <line_num>: 285,296
@Override [EOL] public OpenMapRealVector append(double d) { [EOL]     OpenMapRealVector res = new OpenMapRealVector(this, 1); [EOL]     res.setEntry(virtualSize, d); [EOL]     return res; [EOL] } <line_num>: 299,304
@Override [EOL] public OpenMapRealVector copy() { [EOL]     return new OpenMapRealVector(this); [EOL] } <line_num>: 310,313
@Deprecated [EOL] public double dotProduct(OpenMapRealVector v) throws DimensionMismatchException { [EOL]     return dotProduct((RealVector) v); [EOL] } <line_num>: 332,336
@Override [EOL] public OpenMapRealVector ebeDivide(RealVector v) throws DimensionMismatchException { [EOL]     checkVectorDimensions(v.getDimension()); [EOL]     OpenMapRealVector res = new OpenMapRealVector(this); [EOL]     final int n = getDimension(); [EOL]     for (int i = 0; i < n; i++) { [EOL]         res.setEntry(i, this.getEntry(i) / v.getEntry(i)); [EOL]     } [EOL]     return res; [EOL] } <line_num>: 339,354
@Override [EOL] public OpenMapRealVector ebeMultiply(RealVector v) throws DimensionMismatchException { [EOL]     checkVectorDimensions(v.getDimension()); [EOL]     OpenMapRealVector res = new OpenMapRealVector(this); [EOL]     Iterator iter = entries.iterator(); [EOL]     while (iter.hasNext()) { [EOL]         iter.advance(); [EOL]         res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key())); [EOL]     } [EOL]     if (v.isNaN() || v.isInfinite()) { [EOL]         final int n = getDimension(); [EOL]         for (int i = 0; i < n; i++) { [EOL]             final double y = v.getEntry(i); [EOL]             if (Double.isNaN(y)) { [EOL]                 res.setEntry(i, Double.NaN); [EOL]             } else if (Double.isInfinite(y)) { [EOL]                 final double x = this.getEntry(i); [EOL]                 res.setEntry(i, x * y); [EOL]             } [EOL]         } [EOL]     } [EOL]     return res; [EOL] } <line_num>: 357,387
@Override [EOL] public OpenMapRealVector getSubVector(int index, int n) throws NotPositiveException, OutOfRangeException { [EOL]     checkIndex(index); [EOL]     if (n < 0) { [EOL]         throw new NotPositiveException(LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n); [EOL]     } [EOL]     checkIndex(index + n - 1); [EOL]     OpenMapRealVector res = new OpenMapRealVector(n); [EOL]     int end = index + n; [EOL]     Iterator iter = entries.iterator(); [EOL]     while (iter.hasNext()) { [EOL]         iter.advance(); [EOL]         int key = iter.key(); [EOL]         if (key >= index && key < end) { [EOL]             res.setEntry(key - index, iter.value()); [EOL]         } [EOL]     } [EOL]     return res; [EOL] } <line_num>: 390,409
@Override [EOL] public int getDimension() { [EOL]     return virtualSize; [EOL] } <line_num>: 412,415
public double getDistance(OpenMapRealVector v) throws DimensionMismatchException { [EOL]     checkVectorDimensions(v.getDimension()); [EOL]     Iterator iter = entries.iterator(); [EOL]     double res = 0; [EOL]     while (iter.hasNext()) { [EOL]         iter.advance(); [EOL]         int key = iter.key(); [EOL]         double delta; [EOL]         delta = iter.value() - v.getEntry(key); [EOL]         res += delta * delta; [EOL]     } [EOL]     iter = v.getEntries().iterator(); [EOL]     while (iter.hasNext()) { [EOL]         iter.advance(); [EOL]         int key = iter.key(); [EOL]         if (!entries.containsKey(key)) { [EOL]             final double value = iter.value(); [EOL]             res += value * value; [EOL]         } [EOL]     } [EOL]     return FastMath.sqrt(res); [EOL] } <line_num>: 424,446
@Override [EOL] public double getDistance(RealVector v) throws DimensionMismatchException { [EOL]     checkVectorDimensions(v.getDimension()); [EOL]     if (v instanceof OpenMapRealVector) { [EOL]         return getDistance((OpenMapRealVector) v); [EOL]     } else { [EOL]         return super.getDistance(v); [EOL]     } [EOL] } <line_num>: 449,457
@Override [EOL] public double getEntry(int index) throws OutOfRangeException { [EOL]     checkIndex(index); [EOL]     return entries.get(index); [EOL] } <line_num>: 460,464
public double getL1Distance(OpenMapRealVector v) throws DimensionMismatchException { [EOL]     checkVectorDimensions(v.getDimension()); [EOL]     double max = 0; [EOL]     Iterator iter = entries.iterator(); [EOL]     while (iter.hasNext()) { [EOL]         iter.advance(); [EOL]         double delta = FastMath.abs(iter.value() - v.getEntry(iter.key())); [EOL]         max += delta; [EOL]     } [EOL]     iter = v.getEntries().iterator(); [EOL]     while (iter.hasNext()) { [EOL]         iter.advance(); [EOL]         int key = iter.key(); [EOL]         if (!entries.containsKey(key)) { [EOL]             double delta = FastMath.abs(iter.value()); [EOL]             max += FastMath.abs(delta); [EOL]         } [EOL]     } [EOL]     return max; [EOL] } <line_num>: 476,496
@Override [EOL] public double getL1Distance(RealVector v) throws DimensionMismatchException { [EOL]     checkVectorDimensions(v.getDimension()); [EOL]     if (v instanceof OpenMapRealVector) { [EOL]         return getL1Distance((OpenMapRealVector) v); [EOL]     } else { [EOL]         return super.getL1Distance(v); [EOL]     } [EOL] } <line_num>: 499,508
private double getLInfDistance(OpenMapRealVector v) throws DimensionMismatchException { [EOL]     checkVectorDimensions(v.getDimension()); [EOL]     double max = 0; [EOL]     Iterator iter = entries.iterator(); [EOL]     while (iter.hasNext()) { [EOL]         iter.advance(); [EOL]         double delta = FastMath.abs(iter.value() - v.getEntry(iter.key())); [EOL]         if (delta > max) { [EOL]             max = delta; [EOL]         } [EOL]     } [EOL]     iter = v.getEntries().iterator(); [EOL]     while (iter.hasNext()) { [EOL]         iter.advance(); [EOL]         int key = iter.key(); [EOL]         if (!entries.containsKey(key) && iter.value() > max) { [EOL]             max = iter.value(); [EOL]         } [EOL]     } [EOL]     return max; [EOL] } <line_num>: 517,538
@Override [EOL] public double getLInfDistance(RealVector v) throws DimensionMismatchException { [EOL]     checkVectorDimensions(v.getDimension()); [EOL]     if (v instanceof OpenMapRealVector) { [EOL]         return getLInfDistance((OpenMapRealVector) v); [EOL]     } else { [EOL]         return super.getLInfDistance(v); [EOL]     } [EOL] } <line_num>: 541,550
@Override [EOL] public boolean isInfinite() { [EOL]     boolean infiniteFound = false; [EOL]     Iterator iter = entries.iterator(); [EOL]     while (iter.hasNext()) { [EOL]         iter.advance(); [EOL]         final double value = iter.value(); [EOL]         if (Double.isNaN(value)) { [EOL]             return false; [EOL]         } [EOL]         if (Double.isInfinite(value)) { [EOL]             infiniteFound = true; [EOL]         } [EOL]     } [EOL]     return infiniteFound; [EOL] } <line_num>: 553,568
@Override [EOL] public boolean isNaN() { [EOL]     Iterator iter = entries.iterator(); [EOL]     while (iter.hasNext()) { [EOL]         iter.advance(); [EOL]         if (Double.isNaN(iter.value())) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 571,581
@Override [EOL] public OpenMapRealVector mapAdd(double d) { [EOL]     return copy().mapAddToSelf(d); [EOL] } <line_num>: 584,587
@Override [EOL] public OpenMapRealVector mapAddToSelf(double d) { [EOL]     for (int i = 0; i < virtualSize; i++) { [EOL]         setEntry(i, getEntry(i) + d); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 590,596
@Override [EOL] public void setEntry(int index, double value) throws OutOfRangeException { [EOL]     checkIndex(index); [EOL]     if (!isDefaultValue(value)) { [EOL]         entries.put(index, value); [EOL]     } else if (entries.containsKey(index)) { [EOL]         entries.remove(index); [EOL]     } [EOL] } <line_num>: 599,608
@Override [EOL] public void setSubVector(int index, RealVector v) throws OutOfRangeException { [EOL]     checkIndex(index); [EOL]     checkIndex(index + v.getDimension() - 1); [EOL]     for (int i = 0; i < v.getDimension(); i++) { [EOL]         setEntry(i + index, v.getEntry(i)); [EOL]     } [EOL] } <line_num>: 611,619
@Override [EOL] public void set(double value) { [EOL]     for (int i = 0; i < virtualSize; i++) { [EOL]         setEntry(i, value); [EOL]     } [EOL] } <line_num>: 622,627
public OpenMapRealVector subtract(OpenMapRealVector v) throws DimensionMismatchException { [EOL]     checkVectorDimensions(v.getDimension()); [EOL]     OpenMapRealVector res = copy(); [EOL]     Iterator iter = v.getEntries().iterator(); [EOL]     while (iter.hasNext()) { [EOL]         iter.advance(); [EOL]         int key = iter.key(); [EOL]         if (entries.containsKey(key)) { [EOL]             res.setEntry(key, entries.get(key) - iter.value()); [EOL]         } else { [EOL]             res.setEntry(key, -iter.value()); [EOL]         } [EOL]     } [EOL]     return res; [EOL] } <line_num>: 636,651
@Override [EOL] public RealVector subtract(RealVector v) throws DimensionMismatchException { [EOL]     checkVectorDimensions(v.getDimension()); [EOL]     if (v instanceof OpenMapRealVector) { [EOL]         return subtract((OpenMapRealVector) v); [EOL]     } else { [EOL]         return super.subtract(v); [EOL]     } [EOL] } <line_num>: 654,663
@Override [EOL] public OpenMapRealVector unitVector() throws MathArithmeticException { [EOL]     OpenMapRealVector res = copy(); [EOL]     res.unitize(); [EOL]     return res; [EOL] } <line_num>: 666,671
@Override [EOL] public void unitize() throws MathArithmeticException { [EOL]     double norm = getNorm(); [EOL]     if (isDefaultValue(norm)) { [EOL]         throw new MathArithmeticException(LocalizedFormats.ZERO_NORM); [EOL]     } [EOL]     Iterator iter = entries.iterator(); [EOL]     while (iter.hasNext()) { [EOL]         iter.advance(); [EOL]         entries.put(iter.key(), iter.value() / norm); [EOL]     } [EOL] } <line_num>: 674,685
@Override [EOL] public double[] toArray() { [EOL]     double[] res = new double[virtualSize]; [EOL]     Iterator iter = entries.iterator(); [EOL]     while (iter.hasNext()) { [EOL]         iter.advance(); [EOL]         res[iter.key()] = iter.value(); [EOL]     } [EOL]     return res; [EOL] } <line_num>: 688,697
@Override [EOL] public int hashCode() { [EOL]     final int prime = 31; [EOL]     int result = 1; [EOL]     long temp; [EOL]     temp = Double.doubleToLongBits(epsilon); [EOL]     result = prime * result + (int) (temp ^ (temp >>> 32)); [EOL]     result = prime * result + virtualSize; [EOL]     Iterator iter = entries.iterator(); [EOL]     while (iter.hasNext()) { [EOL]         iter.advance(); [EOL]         temp = Double.doubleToLongBits(iter.value()); [EOL]         result = prime * result + (int) (temp ^ (temp >> 32)); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 705,720
@Override [EOL] public boolean equals(Object obj) { [EOL]     if (this == obj) { [EOL]         return true; [EOL]     } [EOL]     if (!(obj instanceof OpenMapRealVector)) { [EOL]         return false; [EOL]     } [EOL]     OpenMapRealVector other = (OpenMapRealVector) obj; [EOL]     if (virtualSize != other.virtualSize) { [EOL]         return false; [EOL]     } [EOL]     if (Double.doubleToLongBits(epsilon) != Double.doubleToLongBits(other.epsilon)) { [EOL]         return false; [EOL]     } [EOL]     Iterator iter = entries.iterator(); [EOL]     while (iter.hasNext()) { [EOL]         iter.advance(); [EOL]         double test = other.getEntry(iter.key()); [EOL]         if (Double.doubleToLongBits(test) != Double.doubleToLongBits(iter.value())) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     iter = other.getEntries().iterator(); [EOL]     while (iter.hasNext()) { [EOL]         iter.advance(); [EOL]         double test = iter.value(); [EOL]         if (Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry(iter.key()))) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 728,761
public double getSparsity() { [EOL]     return (double) entries.size() / (double) getDimension(); [EOL] } <line_num>: 768,770
@Override [EOL] public java.util.Iterator<Entry> sparseIterator() { [EOL]     return new OpenMapSparseIterator(); [EOL] } <line_num>: 773,776
@Override [EOL] public double getValue() { [EOL]     return iter.value(); [EOL] } <line_num>: 797,800
@Override [EOL] public void setValue(double value) { [EOL]     entries.put(iter.key(), value); [EOL] } <line_num>: 803,806
@Override [EOL] public int getIndex() { [EOL]     return iter.key(); [EOL] } <line_num>: 809,812
public boolean hasNext() { [EOL]     return iter.hasNext(); [EOL] } <line_num>: 834,836
public Entry next() { [EOL]     iter.advance(); [EOL]     return current; [EOL] } <line_num>: 839,842
public void remove() { [EOL]     throw new UnsupportedOperationException("Not supported"); [EOL] } <line_num>: 845,847
