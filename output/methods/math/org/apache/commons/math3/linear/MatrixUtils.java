private MatrixUtils() { [EOL]     super(); [EOL] } <line_num>: 63,65
public FractionMatrixConverter() { [EOL]     super(Fraction.ZERO); [EOL] } <line_num>: 628,630
public BigFractionMatrixConverter() { [EOL]     super(BigFraction.ZERO); [EOL] } <line_num>: 673,675
public static RealMatrix createRealMatrix(final int rows, final int columns) { [EOL]     return (rows * columns <= 4096) ? new Array2DRowRealMatrix(rows, columns) : new BlockRealMatrix(rows, columns); [EOL] } <line_num>: 80,83
public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns) { [EOL]     return (rows * columns <= 4096) ? new Array2DRowFieldMatrix<T>(field, rows, columns) : new BlockFieldMatrix<T>(field, rows, columns); [EOL] } <line_num>: 100,105
public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException { [EOL]     if (data == null || data[0] == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     return (data.length * data[0].length <= 4096) ? new Array2DRowRealMatrix(data) : new BlockRealMatrix(data); [EOL] } <line_num>: 127,136
public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException { [EOL]     if (data == null || data[0] == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     return (data.length * data[0].length <= 4096) ? new Array2DRowFieldMatrix<T>(data) : new BlockFieldMatrix<T>(data); [EOL] } <line_num>: 157,165
public static RealMatrix createRealIdentityMatrix(int dimension) { [EOL]     final RealMatrix m = createRealMatrix(dimension, dimension); [EOL]     for (int i = 0; i < dimension; ++i) { [EOL]         m.setEntry(i, i, 1.0); [EOL]     } [EOL]     return m; [EOL] } <line_num>: 175,181
public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension) { [EOL]     final T zero = field.getZero(); [EOL]     final T one = field.getOne(); [EOL]     final T[][] d = MathArrays.buildArray(field, dimension, dimension); [EOL]     for (int row = 0; row < dimension; row++) { [EOL]         final T[] dRow = d[row]; [EOL]         Arrays.fill(dRow, zero); [EOL]         dRow[row] = one; [EOL]     } [EOL]     return new Array2DRowFieldMatrix<T>(field, d, false); [EOL] } <line_num>: 193,204
public static RealMatrix createRealDiagonalMatrix(final double[] diagonal) { [EOL]     final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length); [EOL]     for (int i = 0; i < diagonal.length; ++i) { [EOL]         m.setEntry(i, i, diagonal[i]); [EOL]     } [EOL]     return m; [EOL] } <line_num>: 214,220
public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal) { [EOL]     final FieldMatrix<T> m = createFieldMatrix(diagonal[0].getField(), diagonal.length, diagonal.length); [EOL]     for (int i = 0; i < diagonal.length; ++i) { [EOL]         m.setEntry(i, i, diagonal[i]); [EOL]     } [EOL]     return m; [EOL] } <line_num>: 231,239
public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException { [EOL]     if (data == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     return new ArrayRealVector(data, true); [EOL] } <line_num>: 249,255
public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException { [EOL]     if (data == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     if (data.length == 0) { [EOL]         throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT); [EOL]     } [EOL]     return new ArrayFieldVector<T>(data[0].getField(), data, true); [EOL] } <line_num>: 267,276
public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException { [EOL]     if (rowData == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     final int nCols = rowData.length; [EOL]     final RealMatrix m = createRealMatrix(1, nCols); [EOL]     for (int i = 0; i < nCols; ++i) { [EOL]         m.setEntry(0, i, rowData[i]); [EOL]     } [EOL]     return m; [EOL] } <line_num>: 287,298
public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException { [EOL]     if (rowData == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     final int nCols = rowData.length; [EOL]     if (nCols == 0) { [EOL]         throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN); [EOL]     } [EOL]     final FieldMatrix<T> m = createFieldMatrix(rowData[0].getField(), 1, nCols); [EOL]     for (int i = 0; i < nCols; ++i) { [EOL]         m.setEntry(0, i, rowData[i]); [EOL]     } [EOL]     return m; [EOL] } <line_num>: 310,325
public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException { [EOL]     if (columnData == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     final int nRows = columnData.length; [EOL]     final RealMatrix m = createRealMatrix(nRows, 1); [EOL]     for (int i = 0; i < nRows; ++i) { [EOL]         m.setEntry(i, 0, columnData[i]); [EOL]     } [EOL]     return m; [EOL] } <line_num>: 336,347
public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException { [EOL]     if (columnData == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     final int nRows = columnData.length; [EOL]     if (nRows == 0) { [EOL]         throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW); [EOL]     } [EOL]     final FieldMatrix<T> m = createFieldMatrix(columnData[0].getField(), nRows, 1); [EOL]     for (int i = 0; i < nRows; ++i) { [EOL]         m.setEntry(i, 0, columnData[i]); [EOL]     } [EOL]     return m; [EOL] } <line_num>: 359,374
private static boolean isSymmetricInternal(RealMatrix matrix, double relativeTolerance, boolean raiseException) { [EOL]     final int rows = matrix.getRowDimension(); [EOL]     if (rows != matrix.getColumnDimension()) { [EOL]         if (raiseException) { [EOL]             throw new NonSquareMatrixException(rows, matrix.getColumnDimension()); [EOL]         } else { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     for (int i = 0; i < rows; i++) { [EOL]         for (int j = i + 1; j < rows; j++) { [EOL]             final double mij = matrix.getEntry(i, j); [EOL]             final double mji = matrix.getEntry(j, i); [EOL]             if (FastMath.abs(mij - mji) > FastMath.max(FastMath.abs(mij), FastMath.abs(mji)) * relativeTolerance) { [EOL]                 if (raiseException) { [EOL]                     throw new NonSymmetricMatrixException(i, j, relativeTolerance); [EOL]                 } else { [EOL]                     return false; [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 387,413
public static void checkSymmetric(RealMatrix matrix, double eps) { [EOL]     isSymmetricInternal(matrix, eps, true); [EOL] } <line_num>: 424,427
public static boolean isSymmetric(RealMatrix matrix, double eps) { [EOL]     return isSymmetricInternal(matrix, eps, false); [EOL] } <line_num>: 437,440
public static void checkMatrixIndex(final AnyMatrix m, final int row, final int column) throws OutOfRangeException { [EOL]     checkRowIndex(m, row); [EOL]     checkColumnIndex(m, column); [EOL] } <line_num>: 451,456
public static void checkRowIndex(final AnyMatrix m, final int row) throws OutOfRangeException { [EOL]     if (row < 0 || row >= m.getRowDimension()) { [EOL]         throw new OutOfRangeException(LocalizedFormats.ROW_INDEX, row, 0, m.getRowDimension() - 1); [EOL]     } [EOL] } <line_num>: 465,472
public static void checkColumnIndex(final AnyMatrix m, final int column) throws OutOfRangeException { [EOL]     if (column < 0 || column >= m.getColumnDimension()) { [EOL]         throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX, column, 0, m.getColumnDimension() - 1); [EOL]     } [EOL] } <line_num>: 481,487
public static void checkSubMatrixIndex(final AnyMatrix m, final int startRow, final int endRow, final int startColumn, final int endColumn) throws NumberIsTooSmallException, OutOfRangeException { [EOL]     checkRowIndex(m, startRow); [EOL]     checkRowIndex(m, endRow); [EOL]     if (endRow < startRow) { [EOL]         throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW, endRow, startRow, false); [EOL]     } [EOL]     checkColumnIndex(m, startColumn); [EOL]     checkColumnIndex(m, endColumn); [EOL]     if (endColumn < startColumn) { [EOL]         throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN, endColumn, startColumn, false); [EOL]     } [EOL] } <line_num>: 502,521
public static void checkSubMatrixIndex(final AnyMatrix m, final int[] selectedRows, final int[] selectedColumns) throws NoDataException, NullArgumentException, OutOfRangeException { [EOL]     if (selectedRows == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     if (selectedColumns == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     if (selectedRows.length == 0) { [EOL]         throw new NoDataException(LocalizedFormats.EMPTY_SELECTED_ROW_INDEX_ARRAY); [EOL]     } [EOL]     if (selectedColumns.length == 0) { [EOL]         throw new NoDataException(LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY); [EOL]     } [EOL]     for (final int row : selectedRows) { [EOL]         checkRowIndex(m, row); [EOL]     } [EOL]     for (final int column : selectedColumns) { [EOL]         checkColumnIndex(m, column); [EOL]     } [EOL] } <line_num>: 536,559
public static void checkAdditionCompatible(final AnyMatrix left, final AnyMatrix right) throws MatrixDimensionMismatchException { [EOL]     if ((left.getRowDimension() != right.getRowDimension()) || (left.getColumnDimension() != right.getColumnDimension())) { [EOL]         throw new MatrixDimensionMismatchException(left.getRowDimension(), left.getColumnDimension(), right.getRowDimension(), right.getColumnDimension()); [EOL]     } [EOL] } <line_num>: 569,576
public static void checkSubtractionCompatible(final AnyMatrix left, final AnyMatrix right) throws MatrixDimensionMismatchException { [EOL]     if ((left.getRowDimension() != right.getRowDimension()) || (left.getColumnDimension() != right.getColumnDimension())) { [EOL]         throw new MatrixDimensionMismatchException(left.getRowDimension(), left.getColumnDimension(), right.getRowDimension(), right.getColumnDimension()); [EOL]     } [EOL] } <line_num>: 586,593
public static void checkMultiplicationCompatible(final AnyMatrix left, final AnyMatrix right) throws DimensionMismatchException { [EOL]     if (left.getColumnDimension() != right.getRowDimension()) { [EOL]         throw new DimensionMismatchException(left.getColumnDimension(), right.getRowDimension()); [EOL]     } [EOL] } <line_num>: 603,610
public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m) { [EOL]     final FractionMatrixConverter converter = new FractionMatrixConverter(); [EOL]     m.walkInOptimizedOrder(converter); [EOL]     return converter.getConvertedMatrix(); [EOL] } <line_num>: 617,621
@Override [EOL] public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) { [EOL]     data = new double[rows][columns]; [EOL] } <line_num>: 633,637
@Override [EOL] public void visit(int row, int column, Fraction value) { [EOL]     data[row][column] = value.doubleValue(); [EOL] } <line_num>: 640,643
Array2DRowRealMatrix getConvertedMatrix() { [EOL]     return new Array2DRowRealMatrix(data, false); [EOL] } <line_num>: 650,652
public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m) { [EOL]     final BigFractionMatrixConverter converter = new BigFractionMatrixConverter(); [EOL]     m.walkInOptimizedOrder(converter); [EOL]     return converter.getConvertedMatrix(); [EOL] } <line_num>: 662,666
@Override [EOL] public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) { [EOL]     data = new double[rows][columns]; [EOL] } <line_num>: 678,682
@Override [EOL] public void visit(int row, int column, BigFraction value) { [EOL]     data[row][column] = value.doubleValue(); [EOL] } <line_num>: 685,688
Array2DRowRealMatrix getConvertedMatrix() { [EOL]     return new Array2DRowRealMatrix(data, false); [EOL] } <line_num>: 695,697
public static void serializeRealVector(final RealVector vector, final ObjectOutputStream oos) throws IOException { [EOL]     final int n = vector.getDimension(); [EOL]     oos.writeInt(n); [EOL]     for (int i = 0; i < n; ++i) { [EOL]         oos.writeDouble(vector.getEntry(i)); [EOL]     } [EOL] } <line_num>: 740,748
public static void deserializeRealVector(final Object instance, final String fieldName, final ObjectInputStream ois) throws ClassNotFoundException, IOException { [EOL]     try { [EOL]         final int n = ois.readInt(); [EOL]         final double[] data = new double[n]; [EOL]         for (int i = 0; i < n; ++i) { [EOL]             data[i] = ois.readDouble(); [EOL]         } [EOL]         final RealVector vector = new ArrayRealVector(data, false); [EOL]         final java.lang.reflect.Field f = instance.getClass().getDeclaredField(fieldName); [EOL]         f.setAccessible(true); [EOL]         f.set(instance, vector); [EOL]     } catch (NoSuchFieldException nsfe) { [EOL]         IOException ioe = new IOException(); [EOL]         ioe.initCause(nsfe); [EOL]         throw ioe; [EOL]     } catch (IllegalAccessException iae) { [EOL]         IOException ioe = new IOException(); [EOL]         ioe.initCause(iae); [EOL]         throw ioe; [EOL]     } [EOL] } <line_num>: 767,799
public static void serializeRealMatrix(final RealMatrix matrix, final ObjectOutputStream oos) throws IOException { [EOL]     final int n = matrix.getRowDimension(); [EOL]     final int m = matrix.getColumnDimension(); [EOL]     oos.writeInt(n); [EOL]     oos.writeInt(m); [EOL]     for (int i = 0; i < n; ++i) { [EOL]         for (int j = 0; j < m; ++j) { [EOL]             oos.writeDouble(matrix.getEntry(i, j)); [EOL]         } [EOL]     } [EOL] } <line_num>: 841,853
public static void deserializeRealMatrix(final Object instance, final String fieldName, final ObjectInputStream ois) throws ClassNotFoundException, IOException { [EOL]     try { [EOL]         final int n = ois.readInt(); [EOL]         final int m = ois.readInt(); [EOL]         final double[][] data = new double[n][m]; [EOL]         for (int i = 0; i < n; ++i) { [EOL]             final double[] dataI = data[i]; [EOL]             for (int j = 0; j < m; ++j) { [EOL]                 dataI[j] = ois.readDouble(); [EOL]             } [EOL]         } [EOL]         final RealMatrix matrix = new Array2DRowRealMatrix(data, false); [EOL]         final java.lang.reflect.Field f = instance.getClass().getDeclaredField(fieldName); [EOL]         f.setAccessible(true); [EOL]         f.set(instance, matrix); [EOL]     } catch (NoSuchFieldException nsfe) { [EOL]         IOException ioe = new IOException(); [EOL]         ioe.initCause(nsfe); [EOL]         throw ioe; [EOL]     } catch (IllegalAccessException iae) { [EOL]         IOException ioe = new IOException(); [EOL]         ioe.initCause(iae); [EOL]         throw ioe; [EOL]     } [EOL] } <line_num>: 872,907
public static void solveLowerTriangularSystem(RealMatrix rm, RealVector b) throws DimensionMismatchException, MathArithmeticException, NonSquareMatrixException { [EOL]     if ((rm == null) || (b == null) || (rm.getRowDimension() != b.getDimension())) { [EOL]         throw new DimensionMismatchException((rm == null) ? 0 : rm.getRowDimension(), (b == null) ? 0 : b.getDimension()); [EOL]     } [EOL]     if (rm.getColumnDimension() != rm.getRowDimension()) { [EOL]         throw new NonSquareMatrixException(rm.getRowDimension(), rm.getColumnDimension()); [EOL]     } [EOL]     int rows = rm.getRowDimension(); [EOL]     for (int i = 0; i < rows; i++) { [EOL]         double diag = rm.getEntry(i, i); [EOL]         if (FastMath.abs(diag) < Precision.SAFE_MIN) { [EOL]             throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR); [EOL]         } [EOL]         double bi = b.getEntry(i) / diag; [EOL]         b.setEntry(i, bi); [EOL]         for (int j = i + 1; j < rows; j++) { [EOL]             b.setEntry(j, b.getEntry(j) - bi * rm.getEntry(j, i)); [EOL]         } [EOL]     } [EOL] } <line_num>: 927,951
public static void solveUpperTriangularSystem(RealMatrix rm, RealVector b) throws DimensionMismatchException, MathArithmeticException, NonSquareMatrixException { [EOL]     if ((rm == null) || (b == null) || (rm.getRowDimension() != b.getDimension())) { [EOL]         throw new DimensionMismatchException((rm == null) ? 0 : rm.getRowDimension(), (b == null) ? 0 : b.getDimension()); [EOL]     } [EOL]     if (rm.getColumnDimension() != rm.getRowDimension()) { [EOL]         throw new NonSquareMatrixException(rm.getRowDimension(), rm.getColumnDimension()); [EOL]     } [EOL]     int rows = rm.getRowDimension(); [EOL]     for (int i = rows - 1; i > -1; i--) { [EOL]         double diag = rm.getEntry(i, i); [EOL]         if (FastMath.abs(diag) < Precision.SAFE_MIN) { [EOL]             throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR); [EOL]         } [EOL]         double bi = b.getEntry(i) / diag; [EOL]         b.setEntry(i, bi); [EOL]         for (int j = i - 1; j > -1; j--) { [EOL]             b.setEntry(j, b.getEntry(j) - bi * rm.getEntry(j, i)); [EOL]         } [EOL]     } [EOL] } <line_num>: 972,996
public static RealMatrix blockInverse(RealMatrix m, int splitIndex) { [EOL]     final int n = m.getRowDimension(); [EOL]     if (m.getColumnDimension() != n) { [EOL]         throw new NonSquareMatrixException(m.getRowDimension(), m.getColumnDimension()); [EOL]     } [EOL]     final int splitIndex1 = splitIndex + 1; [EOL]     final RealMatrix a = m.getSubMatrix(0, splitIndex, 0, splitIndex); [EOL]     final RealMatrix b = m.getSubMatrix(0, splitIndex, splitIndex1, n - 1); [EOL]     final RealMatrix c = m.getSubMatrix(splitIndex1, n - 1, 0, splitIndex); [EOL]     final RealMatrix d = m.getSubMatrix(splitIndex1, n - 1, splitIndex1, n - 1); [EOL]     final SingularValueDecomposition aDec = new SingularValueDecomposition(a); [EOL]     final DecompositionSolver aSolver = aDec.getSolver(); [EOL]     if (!aSolver.isNonSingular()) { [EOL]         throw new SingularMatrixException(); [EOL]     } [EOL]     final RealMatrix aInv = aSolver.getInverse(); [EOL]     final SingularValueDecomposition dDec = new SingularValueDecomposition(d); [EOL]     final DecompositionSolver dSolver = dDec.getSolver(); [EOL]     if (!dSolver.isNonSingular()) { [EOL]         throw new SingularMatrixException(); [EOL]     } [EOL]     final RealMatrix dInv = dSolver.getInverse(); [EOL]     final RealMatrix tmp1 = a.subtract(b.multiply(dInv).multiply(c)); [EOL]     final SingularValueDecomposition tmp1Dec = new SingularValueDecomposition(tmp1); [EOL]     final DecompositionSolver tmp1Solver = tmp1Dec.getSolver(); [EOL]     if (!tmp1Solver.isNonSingular()) { [EOL]         throw new SingularMatrixException(); [EOL]     } [EOL]     final RealMatrix result00 = tmp1Solver.getInverse(); [EOL]     final RealMatrix tmp2 = d.subtract(c.multiply(aInv).multiply(b)); [EOL]     final SingularValueDecomposition tmp2Dec = new SingularValueDecomposition(tmp2); [EOL]     final DecompositionSolver tmp2Solver = tmp2Dec.getSolver(); [EOL]     if (!tmp2Solver.isNonSingular()) { [EOL]         throw new SingularMatrixException(); [EOL]     } [EOL]     final RealMatrix result11 = tmp2Solver.getInverse(); [EOL]     final RealMatrix result01 = aInv.multiply(b).multiply(result11).scalarMultiply(-1); [EOL]     final RealMatrix result10 = dInv.multiply(c).multiply(result00).scalarMultiply(-1); [EOL]     final RealMatrix result = new Array2DRowRealMatrix(n, n); [EOL]     result.setSubMatrix(result00.getData(), 0, 0); [EOL]     result.setSubMatrix(result01.getData(), 0, splitIndex1); [EOL]     result.setSubMatrix(result10.getData(), splitIndex1, 0); [EOL]     result.setSubMatrix(result11.getData(), splitIndex1, splitIndex1); [EOL]     return result; [EOL] } <line_num>: 1010,1065
