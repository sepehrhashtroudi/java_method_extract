public SparseFieldMatrix(final Field<T> field) { [EOL]     super(field); [EOL]     rows = 0; [EOL]     columns = 0; [EOL]     entries = new OpenIntToFieldHashMap<T>(field); [EOL] } <line_num>: 50,55
public SparseFieldMatrix(final Field<T> field, final int rowDimension, final int columnDimension) { [EOL]     super(field, rowDimension, columnDimension); [EOL]     this.rows = rowDimension; [EOL]     this.columns = columnDimension; [EOL]     entries = new OpenIntToFieldHashMap<T>(field); [EOL] } <line_num>: 67,73
public SparseFieldMatrix(SparseFieldMatrix<T> other) { [EOL]     super(other.getField(), other.getRowDimension(), other.getColumnDimension()); [EOL]     rows = other.getRowDimension(); [EOL]     columns = other.getColumnDimension(); [EOL]     entries = new OpenIntToFieldHashMap<T>(other.entries); [EOL] } <line_num>: 80,85
public SparseFieldMatrix(FieldMatrix<T> other) { [EOL]     super(other.getField(), other.getRowDimension(), other.getColumnDimension()); [EOL]     rows = other.getRowDimension(); [EOL]     columns = other.getColumnDimension(); [EOL]     entries = new OpenIntToFieldHashMap<T>(getField()); [EOL]     for (int i = 0; i < rows; i++) { [EOL]         for (int j = 0; j < columns; j++) { [EOL]             setEntry(i, j, other.getEntry(i, j)); [EOL]         } [EOL]     } [EOL] } <line_num>: 92,102
@Override [EOL] public void addToEntry(int row, int column, T increment) { [EOL]     checkRowIndex(row); [EOL]     checkColumnIndex(column); [EOL]     final int key = computeKey(row, column); [EOL]     final T value = entries.get(key).add(increment); [EOL]     if (getField().getZero().equals(value)) { [EOL]         entries.remove(key); [EOL]     } else { [EOL]         entries.put(key, value); [EOL]     } [EOL] } <line_num>: 105,116
@Override [EOL] public FieldMatrix<T> copy() { [EOL]     return new SparseFieldMatrix<T>(this); [EOL] } <line_num>: 119,122
@Override [EOL] public FieldMatrix<T> createMatrix(int rowDimension, int columnDimension) { [EOL]     return new SparseFieldMatrix<T>(getField(), rowDimension, columnDimension); [EOL] } <line_num>: 125,128
@Override [EOL] public int getColumnDimension() { [EOL]     return columns; [EOL] } <line_num>: 131,134
@Override [EOL] public T getEntry(int row, int column) { [EOL]     checkRowIndex(row); [EOL]     checkColumnIndex(column); [EOL]     return entries.get(computeKey(row, column)); [EOL] } <line_num>: 137,142
@Override [EOL] public int getRowDimension() { [EOL]     return rows; [EOL] } <line_num>: 145,148
@Override [EOL] public void multiplyEntry(int row, int column, T factor) { [EOL]     checkRowIndex(row); [EOL]     checkColumnIndex(column); [EOL]     final int key = computeKey(row, column); [EOL]     final T value = entries.get(key).multiply(factor); [EOL]     if (getField().getZero().equals(value)) { [EOL]         entries.remove(key); [EOL]     } else { [EOL]         entries.put(key, value); [EOL]     } [EOL] } <line_num>: 151,163
@Override [EOL] public void setEntry(int row, int column, T value) { [EOL]     checkRowIndex(row); [EOL]     checkColumnIndex(column); [EOL]     if (getField().getZero().equals(value)) { [EOL]         entries.remove(computeKey(row, column)); [EOL]     } else { [EOL]         entries.put(computeKey(row, column), value); [EOL]     } [EOL] } <line_num>: 166,175
private int computeKey(int row, int column) { [EOL]     return row * columns + column; [EOL] } <line_num>: 184,186
