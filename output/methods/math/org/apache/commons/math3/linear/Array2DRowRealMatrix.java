public Array2DRowRealMatrix() { [EOL] } <line_num>: 48,48
public Array2DRowRealMatrix(final int rowDimension, final int columnDimension) throws NotStrictlyPositiveException { [EOL]     super(rowDimension, columnDimension); [EOL]     data = new double[rowDimension][columnDimension]; [EOL] } <line_num>: 58,63
public Array2DRowRealMatrix(final double[][] d) throws DimensionMismatchException, NoDataException, NullArgumentException { [EOL]     copyIn(d); [EOL] } <line_num>: 78,81
public Array2DRowRealMatrix(final double[][] d, final boolean copyArray) throws DimensionMismatchException, NoDataException, NullArgumentException { [EOL]     if (copyArray) { [EOL]         copyIn(d); [EOL]     } else { [EOL]         if (d == null) { [EOL]             throw new NullArgumentException(); [EOL]         } [EOL]         final int nRows = d.length; [EOL]         if (nRows == 0) { [EOL]             throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW); [EOL]         } [EOL]         final int nCols = d[0].length; [EOL]         if (nCols == 0) { [EOL]             throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN); [EOL]         } [EOL]         for (int r = 1; r < nRows; r++) { [EOL]             if (d[r].length != nCols) { [EOL]                 throw new DimensionMismatchException(d[r].length, nCols); [EOL]             } [EOL]         } [EOL]         data = d; [EOL]     } [EOL] } <line_num>: 99,123
public Array2DRowRealMatrix(final double[] v) { [EOL]     final int nRows = v.length; [EOL]     data = new double[nRows][1]; [EOL]     for (int row = 0; row < nRows; row++) { [EOL]         data[row][0] = v[row]; [EOL]     } [EOL] } <line_num>: 132,138
@Override [EOL] public RealMatrix createMatrix(final int rowDimension, final int columnDimension) throws NotStrictlyPositiveException { [EOL]     return new Array2DRowRealMatrix(rowDimension, columnDimension); [EOL] } <line_num>: 141,146
@Override [EOL] public RealMatrix copy() { [EOL]     return new Array2DRowRealMatrix(copyOut(), false); [EOL] } <line_num>: 149,152
public Array2DRowRealMatrix add(final Array2DRowRealMatrix m) throws MatrixDimensionMismatchException { [EOL]     MatrixUtils.checkAdditionCompatible(this, m); [EOL]     final int rowCount = getRowDimension(); [EOL]     final int columnCount = getColumnDimension(); [EOL]     final double[][] outData = new double[rowCount][columnCount]; [EOL]     for (int row = 0; row < rowCount; row++) { [EOL]         final double[] dataRow = data[row]; [EOL]         final double[] mRow = m.data[row]; [EOL]         final double[] outDataRow = outData[row]; [EOL]         for (int col = 0; col < columnCount; col++) { [EOL]             outDataRow[col] = dataRow[col] + mRow[col]; [EOL]         } [EOL]     } [EOL]     return new Array2DRowRealMatrix(outData, false); [EOL] } <line_num>: 162,180
public Array2DRowRealMatrix subtract(final Array2DRowRealMatrix m) throws MatrixDimensionMismatchException { [EOL]     MatrixUtils.checkSubtractionCompatible(this, m); [EOL]     final int rowCount = getRowDimension(); [EOL]     final int columnCount = getColumnDimension(); [EOL]     final double[][] outData = new double[rowCount][columnCount]; [EOL]     for (int row = 0; row < rowCount; row++) { [EOL]         final double[] dataRow = data[row]; [EOL]         final double[] mRow = m.data[row]; [EOL]         final double[] outDataRow = outData[row]; [EOL]         for (int col = 0; col < columnCount; col++) { [EOL]             outDataRow[col] = dataRow[col] - mRow[col]; [EOL]         } [EOL]     } [EOL]     return new Array2DRowRealMatrix(outData, false); [EOL] } <line_num>: 190,207
public Array2DRowRealMatrix multiply(final Array2DRowRealMatrix m) throws DimensionMismatchException { [EOL]     MatrixUtils.checkMultiplicationCompatible(this, m); [EOL]     final int nRows = this.getRowDimension(); [EOL]     final int nCols = m.getColumnDimension(); [EOL]     final int nSum = this.getColumnDimension(); [EOL]     final double[][] outData = new double[nRows][nCols]; [EOL]     final double[] mCol = new double[nSum]; [EOL]     final double[][] mData = m.data; [EOL]     for (int col = 0; col < nCols; col++) { [EOL]         for (int mRow = 0; mRow < nSum; mRow++) { [EOL]             mCol[mRow] = mData[mRow][col]; [EOL]         } [EOL]         for (int row = 0; row < nRows; row++) { [EOL]             final double[] dataRow = data[row]; [EOL]             double sum = 0; [EOL]             for (int i = 0; i < nSum; i++) { [EOL]                 sum += dataRow[i] * mCol[i]; [EOL]             } [EOL]             outData[row][col] = sum; [EOL]         } [EOL]     } [EOL]     return new Array2DRowRealMatrix(outData, false); [EOL] } <line_num>: 217,249
@Override [EOL] public double[][] getData() { [EOL]     return copyOut(); [EOL] } <line_num>: 252,255
public double[][] getDataRef() { [EOL]     return data; [EOL] } <line_num>: 262,264
@Override [EOL] public void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws NoDataException, OutOfRangeException, DimensionMismatchException, NullArgumentException { [EOL]     if (data == null) { [EOL]         if (row > 0) { [EOL]             throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row); [EOL]         } [EOL]         if (column > 0) { [EOL]             throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column); [EOL]         } [EOL]         MathUtils.checkNotNull(subMatrix); [EOL]         final int nRows = subMatrix.length; [EOL]         if (nRows == 0) { [EOL]             throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW); [EOL]         } [EOL]         final int nCols = subMatrix[0].length; [EOL]         if (nCols == 0) { [EOL]             throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN); [EOL]         } [EOL]         data = new double[subMatrix.length][nCols]; [EOL]         for (int i = 0; i < data.length; ++i) { [EOL]             if (subMatrix[i].length != nCols) { [EOL]                 throw new DimensionMismatchException(subMatrix[i].length, nCols); [EOL]             } [EOL]             System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols); [EOL]         } [EOL]     } else { [EOL]         super.setSubMatrix(subMatrix, row, column); [EOL]     } [EOL] } <line_num>: 267,300
@Override [EOL] public double getEntry(final int row, final int column) throws OutOfRangeException { [EOL]     MatrixUtils.checkMatrixIndex(this, row, column); [EOL]     return data[row][column]; [EOL] } <line_num>: 303,308
@Override [EOL] public void setEntry(final int row, final int column, final double value) throws OutOfRangeException { [EOL]     MatrixUtils.checkMatrixIndex(this, row, column); [EOL]     data[row][column] = value; [EOL] } <line_num>: 311,316
@Override [EOL] public void addToEntry(final int row, final int column, final double increment) throws OutOfRangeException { [EOL]     MatrixUtils.checkMatrixIndex(this, row, column); [EOL]     data[row][column] += increment; [EOL] } <line_num>: 319,325
@Override [EOL] public void multiplyEntry(final int row, final int column, final double factor) throws OutOfRangeException { [EOL]     MatrixUtils.checkMatrixIndex(this, row, column); [EOL]     data[row][column] *= factor; [EOL] } <line_num>: 328,334
@Override [EOL] public int getRowDimension() { [EOL]     return (data == null) ? 0 : data.length; [EOL] } <line_num>: 337,340
@Override [EOL] public int getColumnDimension() { [EOL]     return ((data == null) || (data[0] == null)) ? 0 : data[0].length; [EOL] } <line_num>: 343,346
@Override [EOL] public double[] operate(final double[] v) throws DimensionMismatchException { [EOL]     final int nRows = this.getRowDimension(); [EOL]     final int nCols = this.getColumnDimension(); [EOL]     if (v.length != nCols) { [EOL]         throw new DimensionMismatchException(v.length, nCols); [EOL]     } [EOL]     final double[] out = new double[nRows]; [EOL]     for (int row = 0; row < nRows; row++) { [EOL]         final double[] dataRow = data[row]; [EOL]         double sum = 0; [EOL]         for (int i = 0; i < nCols; i++) { [EOL]             sum += dataRow[i] * v[i]; [EOL]         } [EOL]         out[row] = sum; [EOL]     } [EOL]     return out; [EOL] } <line_num>: 349,367
@Override [EOL] public double[] preMultiply(final double[] v) throws DimensionMismatchException { [EOL]     final int nRows = getRowDimension(); [EOL]     final int nCols = getColumnDimension(); [EOL]     if (v.length != nRows) { [EOL]         throw new DimensionMismatchException(v.length, nRows); [EOL]     } [EOL]     final double[] out = new double[nCols]; [EOL]     for (int col = 0; col < nCols; ++col) { [EOL]         double sum = 0; [EOL]         for (int i = 0; i < nRows; ++i) { [EOL]             sum += data[i][col] * v[i]; [EOL]         } [EOL]         out[col] = sum; [EOL]     } [EOL]     return out; [EOL] } <line_num>: 370,390
@Override [EOL] public double walkInRowOrder(final RealMatrixChangingVisitor visitor) { [EOL]     final int rows = getRowDimension(); [EOL]     final int columns = getColumnDimension(); [EOL]     visitor.start(rows, columns, 0, rows - 1, 0, columns - 1); [EOL]     for (int i = 0; i < rows; ++i) { [EOL]         final double[] rowI = data[i]; [EOL]         for (int j = 0; j < columns; ++j) { [EOL]             rowI[j] = visitor.visit(i, j, rowI[j]); [EOL]         } [EOL]     } [EOL]     return visitor.end(); [EOL] } <line_num>: 393,405
@Override [EOL] public double walkInRowOrder(final RealMatrixPreservingVisitor visitor) { [EOL]     final int rows = getRowDimension(); [EOL]     final int columns = getColumnDimension(); [EOL]     visitor.start(rows, columns, 0, rows - 1, 0, columns - 1); [EOL]     for (int i = 0; i < rows; ++i) { [EOL]         final double[] rowI = data[i]; [EOL]         for (int j = 0; j < columns; ++j) { [EOL]             visitor.visit(i, j, rowI[j]); [EOL]         } [EOL]     } [EOL]     return visitor.end(); [EOL] } <line_num>: 408,420
@Override [EOL] public double walkInRowOrder(final RealMatrixChangingVisitor visitor, final int startRow, final int endRow, final int startColumn, final int endColumn) throws OutOfRangeException, NumberIsTooSmallException { [EOL]     MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn); [EOL]     visitor.start(getRowDimension(), getColumnDimension(), startRow, endRow, startColumn, endColumn); [EOL]     for (int i = startRow; i <= endRow; ++i) { [EOL]         final double[] rowI = data[i]; [EOL]         for (int j = startColumn; j <= endColumn; ++j) { [EOL]             rowI[j] = visitor.visit(i, j, rowI[j]); [EOL]         } [EOL]     } [EOL]     return visitor.end(); [EOL] } <line_num>: 423,438
@Override [EOL] public double walkInRowOrder(final RealMatrixPreservingVisitor visitor, final int startRow, final int endRow, final int startColumn, final int endColumn) throws OutOfRangeException, NumberIsTooSmallException { [EOL]     MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn); [EOL]     visitor.start(getRowDimension(), getColumnDimension(), startRow, endRow, startColumn, endColumn); [EOL]     for (int i = startRow; i <= endRow; ++i) { [EOL]         final double[] rowI = data[i]; [EOL]         for (int j = startColumn; j <= endColumn; ++j) { [EOL]             visitor.visit(i, j, rowI[j]); [EOL]         } [EOL]     } [EOL]     return visitor.end(); [EOL] } <line_num>: 441,456
@Override [EOL] public double walkInColumnOrder(final RealMatrixChangingVisitor visitor) { [EOL]     final int rows = getRowDimension(); [EOL]     final int columns = getColumnDimension(); [EOL]     visitor.start(rows, columns, 0, rows - 1, 0, columns - 1); [EOL]     for (int j = 0; j < columns; ++j) { [EOL]         for (int i = 0; i < rows; ++i) { [EOL]             final double[] rowI = data[i]; [EOL]             rowI[j] = visitor.visit(i, j, rowI[j]); [EOL]         } [EOL]     } [EOL]     return visitor.end(); [EOL] } <line_num>: 459,471
@Override [EOL] public double walkInColumnOrder(final RealMatrixPreservingVisitor visitor) { [EOL]     final int rows = getRowDimension(); [EOL]     final int columns = getColumnDimension(); [EOL]     visitor.start(rows, columns, 0, rows - 1, 0, columns - 1); [EOL]     for (int j = 0; j < columns; ++j) { [EOL]         for (int i = 0; i < rows; ++i) { [EOL]             visitor.visit(i, j, data[i][j]); [EOL]         } [EOL]     } [EOL]     return visitor.end(); [EOL] } <line_num>: 474,485
@Override [EOL] public double walkInColumnOrder(final RealMatrixChangingVisitor visitor, final int startRow, final int endRow, final int startColumn, final int endColumn) throws OutOfRangeException, NumberIsTooSmallException { [EOL]     MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn); [EOL]     visitor.start(getRowDimension(), getColumnDimension(), startRow, endRow, startColumn, endColumn); [EOL]     for (int j = startColumn; j <= endColumn; ++j) { [EOL]         for (int i = startRow; i <= endRow; ++i) { [EOL]             final double[] rowI = data[i]; [EOL]             rowI[j] = visitor.visit(i, j, rowI[j]); [EOL]         } [EOL]     } [EOL]     return visitor.end(); [EOL] } <line_num>: 488,503
@Override [EOL] public double walkInColumnOrder(final RealMatrixPreservingVisitor visitor, final int startRow, final int endRow, final int startColumn, final int endColumn) throws OutOfRangeException, NumberIsTooSmallException { [EOL]     MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn); [EOL]     visitor.start(getRowDimension(), getColumnDimension(), startRow, endRow, startColumn, endColumn); [EOL]     for (int j = startColumn; j <= endColumn; ++j) { [EOL]         for (int i = startRow; i <= endRow; ++i) { [EOL]             visitor.visit(i, j, data[i][j]); [EOL]         } [EOL]     } [EOL]     return visitor.end(); [EOL] } <line_num>: 506,520
private double[][] copyOut() { [EOL]     final int nRows = this.getRowDimension(); [EOL]     final double[][] out = new double[nRows][this.getColumnDimension()]; [EOL]     for (int i = 0; i < nRows; i++) { [EOL]         System.arraycopy(data[i], 0, out[i], 0, data[i].length); [EOL]     } [EOL]     return out; [EOL] } <line_num>: 527,535
private void copyIn(final double[][] in) throws DimensionMismatchException, NoDataException, NullArgumentException { [EOL]     setSubMatrix(in, 0, 0); [EOL] } <line_num>: 545,548
