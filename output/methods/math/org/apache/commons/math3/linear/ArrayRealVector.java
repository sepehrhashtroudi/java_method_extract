public ArrayRealVector() { [EOL]     data = new double[0]; [EOL] } <line_num>: 56,58
public ArrayRealVector(int size) { [EOL]     data = new double[size]; [EOL] } <line_num>: 65,67
public ArrayRealVector(int size, double preset) { [EOL]     data = new double[size]; [EOL]     Arrays.fill(data, preset); [EOL] } <line_num>: 75,78
public ArrayRealVector(double[] d) { [EOL]     data = d.clone(); [EOL] } <line_num>: 85,87
public ArrayRealVector(double[] d, boolean copyArray) throws NullArgumentException { [EOL]     if (d == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     data = copyArray ? d.clone() : d; [EOL] } <line_num>: 103,109
public ArrayRealVector(double[] d, int pos, int size) throws NullArgumentException, NumberIsTooLargeException { [EOL]     if (d == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     if (d.length < pos + size) { [EOL]         throw new NumberIsTooLargeException(pos + size, d.length, true); [EOL]     } [EOL]     data = new double[size]; [EOL]     System.arraycopy(d, pos, data, 0, size); [EOL] } <line_num>: 121,131
public ArrayRealVector(Double[] d) { [EOL]     data = new double[d.length]; [EOL]     for (int i = 0; i < d.length; i++) { [EOL]         data[i] = d[i].doubleValue(); [EOL]     } [EOL] } <line_num>: 138,143
public ArrayRealVector(Double[] d, int pos, int size) throws NullArgumentException, NumberIsTooLargeException { [EOL]     if (d == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     if (d.length < pos + size) { [EOL]         throw new NumberIsTooLargeException(pos + size, d.length, true); [EOL]     } [EOL]     data = new double[size]; [EOL]     for (int i = pos; i < pos + size; i++) { [EOL]         data[i - pos] = d[i].doubleValue(); [EOL]     } [EOL] } <line_num>: 155,167
public ArrayRealVector(RealVector v) throws NullArgumentException { [EOL]     if (v == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     data = new double[v.getDimension()]; [EOL]     for (int i = 0; i < data.length; ++i) { [EOL]         data[i] = v.getEntry(i); [EOL]     } [EOL] } <line_num>: 175,183
public ArrayRealVector(ArrayRealVector v) throws NullArgumentException { [EOL]     this(v, true); [EOL] } <line_num>: 191,193
public ArrayRealVector(ArrayRealVector v, boolean deep) { [EOL]     data = deep ? v.data.clone() : v.data; [EOL] } <line_num>: 202,204
public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) { [EOL]     data = new double[v1.data.length + v2.data.length]; [EOL]     System.arraycopy(v1.data, 0, data, 0, v1.data.length); [EOL]     System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length); [EOL] } <line_num>: 211,215
public ArrayRealVector(ArrayRealVector v1, RealVector v2) { [EOL]     final int l1 = v1.data.length; [EOL]     final int l2 = v2.getDimension(); [EOL]     data = new double[l1 + l2]; [EOL]     System.arraycopy(v1.data, 0, data, 0, l1); [EOL]     for (int i = 0; i < l2; ++i) { [EOL]         data[l1 + i] = v2.getEntry(i); [EOL]     } [EOL] } <line_num>: 222,230
public ArrayRealVector(RealVector v1, ArrayRealVector v2) { [EOL]     final int l1 = v1.getDimension(); [EOL]     final int l2 = v2.data.length; [EOL]     data = new double[l1 + l2]; [EOL]     for (int i = 0; i < l1; ++i) { [EOL]         data[i] = v1.getEntry(i); [EOL]     } [EOL]     System.arraycopy(v2.data, 0, data, l1, l2); [EOL] } <line_num>: 237,245
public ArrayRealVector(ArrayRealVector v1, double[] v2) { [EOL]     final int l1 = v1.getDimension(); [EOL]     final int l2 = v2.length; [EOL]     data = new double[l1 + l2]; [EOL]     System.arraycopy(v1.data, 0, data, 0, l1); [EOL]     System.arraycopy(v2, 0, data, l1, l2); [EOL] } <line_num>: 252,258
public ArrayRealVector(double[] v1, ArrayRealVector v2) { [EOL]     final int l1 = v1.length; [EOL]     final int l2 = v2.getDimension(); [EOL]     data = new double[l1 + l2]; [EOL]     System.arraycopy(v1, 0, data, 0, l1); [EOL]     System.arraycopy(v2.data, 0, data, l1, l2); [EOL] } <line_num>: 265,271
public ArrayRealVector(double[] v1, double[] v2) { [EOL]     final int l1 = v1.length; [EOL]     final int l2 = v2.length; [EOL]     data = new double[l1 + l2]; [EOL]     System.arraycopy(v1, 0, data, 0, l1); [EOL]     System.arraycopy(v2, 0, data, l1, l2); [EOL] } <line_num>: 278,284
@Override [EOL] public ArrayRealVector copy() { [EOL]     return new ArrayRealVector(this, true); [EOL] } <line_num>: 287,290
@Override [EOL] public ArrayRealVector add(RealVector v) throws DimensionMismatchException { [EOL]     if (v instanceof ArrayRealVector) { [EOL]         final double[] vData = ((ArrayRealVector) v).data; [EOL]         final int dim = vData.length; [EOL]         checkVectorDimensions(dim); [EOL]         ArrayRealVector result = new ArrayRealVector(dim); [EOL]         double[] resultData = result.data; [EOL]         for (int i = 0; i < dim; i++) { [EOL]             resultData[i] = data[i] + vData[i]; [EOL]         } [EOL]         return result; [EOL]     } else { [EOL]         checkVectorDimensions(v); [EOL]         double[] out = data.clone(); [EOL]         Iterator<Entry> it = v.iterator(); [EOL]         while (it.hasNext()) { [EOL]             final Entry e = it.next(); [EOL]             out[e.getIndex()] += e.getValue(); [EOL]         } [EOL]         return new ArrayRealVector(out, false); [EOL]     } [EOL] } <line_num>: 293,316
@Override [EOL] public ArrayRealVector subtract(RealVector v) throws DimensionMismatchException { [EOL]     if (v instanceof ArrayRealVector) { [EOL]         final double[] vData = ((ArrayRealVector) v).data; [EOL]         final int dim = vData.length; [EOL]         checkVectorDimensions(dim); [EOL]         ArrayRealVector result = new ArrayRealVector(dim); [EOL]         double[] resultData = result.data; [EOL]         for (int i = 0; i < dim; i++) { [EOL]             resultData[i] = data[i] - vData[i]; [EOL]         } [EOL]         return result; [EOL]     } else { [EOL]         checkVectorDimensions(v); [EOL]         double[] out = data.clone(); [EOL]         Iterator<Entry> it = v.iterator(); [EOL]         while (it.hasNext()) { [EOL]             final Entry e = it.next(); [EOL]             out[e.getIndex()] -= e.getValue(); [EOL]         } [EOL]         return new ArrayRealVector(out, false); [EOL]     } [EOL] } <line_num>: 319,342
@Override [EOL] public ArrayRealVector map(UnivariateFunction function) { [EOL]     return copy().mapToSelf(function); [EOL] } <line_num>: 345,348
@Override [EOL] public ArrayRealVector mapToSelf(UnivariateFunction function) { [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         data[i] = function.value(data[i]); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 351,357
@Override [EOL] public RealVector mapAddToSelf(double d) { [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         data[i] = data[i] + d; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 360,366
@Override [EOL] public RealVector mapSubtractToSelf(double d) { [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         data[i] = data[i] - d; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 369,375
@Override [EOL] public RealVector mapMultiplyToSelf(double d) { [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         data[i] = data[i] * d; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 378,384
@Override [EOL] public RealVector mapDivideToSelf(double d) { [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         data[i] = data[i] / d; [EOL]     } [EOL]     return this; [EOL] } <line_num>: 387,393
@Override [EOL] public ArrayRealVector ebeMultiply(RealVector v) throws DimensionMismatchException { [EOL]     if (v instanceof ArrayRealVector) { [EOL]         final double[] vData = ((ArrayRealVector) v).data; [EOL]         final int dim = vData.length; [EOL]         checkVectorDimensions(dim); [EOL]         ArrayRealVector result = new ArrayRealVector(dim); [EOL]         double[] resultData = result.data; [EOL]         for (int i = 0; i < dim; i++) { [EOL]             resultData[i] = data[i] * vData[i]; [EOL]         } [EOL]         return result; [EOL]     } else { [EOL]         checkVectorDimensions(v); [EOL]         double[] out = data.clone(); [EOL]         for (int i = 0; i < data.length; i++) { [EOL]             out[i] *= v.getEntry(i); [EOL]         } [EOL]         return new ArrayRealVector(out, false); [EOL]     } [EOL] } <line_num>: 396,417
@Override [EOL] public ArrayRealVector ebeDivide(RealVector v) throws DimensionMismatchException { [EOL]     if (v instanceof ArrayRealVector) { [EOL]         final double[] vData = ((ArrayRealVector) v).data; [EOL]         final int dim = vData.length; [EOL]         checkVectorDimensions(dim); [EOL]         ArrayRealVector result = new ArrayRealVector(dim); [EOL]         double[] resultData = result.data; [EOL]         for (int i = 0; i < dim; i++) { [EOL]             resultData[i] = data[i] / vData[i]; [EOL]         } [EOL]         return result; [EOL]     } else { [EOL]         checkVectorDimensions(v); [EOL]         double[] out = data.clone(); [EOL]         for (int i = 0; i < data.length; i++) { [EOL]             out[i] /= v.getEntry(i); [EOL]         } [EOL]         return new ArrayRealVector(out, false); [EOL]     } [EOL] } <line_num>: 420,441
public double[] getDataRef() { [EOL]     return data; [EOL] } <line_num>: 449,451
@Override [EOL] public double dotProduct(RealVector v) throws DimensionMismatchException { [EOL]     if (v instanceof ArrayRealVector) { [EOL]         final double[] vData = ((ArrayRealVector) v).data; [EOL]         checkVectorDimensions(vData.length); [EOL]         double dot = 0; [EOL]         for (int i = 0; i < data.length; i++) { [EOL]             dot += data[i] * vData[i]; [EOL]         } [EOL]         return dot; [EOL]     } [EOL]     return super.dotProduct(v); [EOL] } <line_num>: 454,466
@Override [EOL] public double getNorm() { [EOL]     double sum = 0; [EOL]     for (double a : data) { [EOL]         sum += a * a; [EOL]     } [EOL]     return FastMath.sqrt(sum); [EOL] } <line_num>: 469,476
@Override [EOL] public double getL1Norm() { [EOL]     double sum = 0; [EOL]     for (double a : data) { [EOL]         sum += FastMath.abs(a); [EOL]     } [EOL]     return sum; [EOL] } <line_num>: 479,486
@Override [EOL] public double getLInfNorm() { [EOL]     double max = 0; [EOL]     for (double a : data) { [EOL]         max = FastMath.max(max, FastMath.abs(a)); [EOL]     } [EOL]     return max; [EOL] } <line_num>: 489,496
@Override [EOL] public double getDistance(RealVector v) throws DimensionMismatchException { [EOL]     if (v instanceof ArrayRealVector) { [EOL]         final double[] vData = ((ArrayRealVector) v).data; [EOL]         checkVectorDimensions(vData.length); [EOL]         double sum = 0; [EOL]         for (int i = 0; i < data.length; ++i) { [EOL]             final double delta = data[i] - vData[i]; [EOL]             sum += delta * delta; [EOL]         } [EOL]         return FastMath.sqrt(sum); [EOL]     } else { [EOL]         checkVectorDimensions(v); [EOL]         double sum = 0; [EOL]         for (int i = 0; i < data.length; ++i) { [EOL]             final double delta = data[i] - v.getEntry(i); [EOL]             sum += delta * delta; [EOL]         } [EOL]         return FastMath.sqrt(sum); [EOL]     } [EOL] } <line_num>: 499,519
@Override [EOL] public double getL1Distance(RealVector v) throws DimensionMismatchException { [EOL]     if (v instanceof ArrayRealVector) { [EOL]         final double[] vData = ((ArrayRealVector) v).data; [EOL]         checkVectorDimensions(vData.length); [EOL]         double sum = 0; [EOL]         for (int i = 0; i < data.length; ++i) { [EOL]             final double delta = data[i] - vData[i]; [EOL]             sum += FastMath.abs(delta); [EOL]         } [EOL]         return sum; [EOL]     } else { [EOL]         checkVectorDimensions(v); [EOL]         double sum = 0; [EOL]         for (int i = 0; i < data.length; ++i) { [EOL]             final double delta = data[i] - v.getEntry(i); [EOL]             sum += FastMath.abs(delta); [EOL]         } [EOL]         return sum; [EOL]     } [EOL] } <line_num>: 522,543
@Override [EOL] public double getLInfDistance(RealVector v) throws DimensionMismatchException { [EOL]     if (v instanceof ArrayRealVector) { [EOL]         final double[] vData = ((ArrayRealVector) v).data; [EOL]         checkVectorDimensions(vData.length); [EOL]         double max = 0; [EOL]         for (int i = 0; i < data.length; ++i) { [EOL]             final double delta = data[i] - vData[i]; [EOL]             max = FastMath.max(max, FastMath.abs(delta)); [EOL]         } [EOL]         return max; [EOL]     } else { [EOL]         checkVectorDimensions(v); [EOL]         double max = 0; [EOL]         for (int i = 0; i < data.length; ++i) { [EOL]             final double delta = data[i] - v.getEntry(i); [EOL]             max = FastMath.max(max, FastMath.abs(delta)); [EOL]         } [EOL]         return max; [EOL]     } [EOL] } <line_num>: 546,567
@Override [EOL] public RealMatrix outerProduct(RealVector v) { [EOL]     if (v instanceof ArrayRealVector) { [EOL]         final double[] vData = ((ArrayRealVector) v).data; [EOL]         final int m = data.length; [EOL]         final int n = vData.length; [EOL]         final RealMatrix out = MatrixUtils.createRealMatrix(m, n); [EOL]         for (int i = 0; i < m; i++) { [EOL]             for (int j = 0; j < n; j++) { [EOL]                 out.setEntry(i, j, data[i] * vData[j]); [EOL]             } [EOL]         } [EOL]         return out; [EOL]     } else { [EOL]         final int m = data.length; [EOL]         final int n = v.getDimension(); [EOL]         final RealMatrix out = MatrixUtils.createRealMatrix(m, n); [EOL]         for (int i = 0; i < m; i++) { [EOL]             for (int j = 0; j < n; j++) { [EOL]                 out.setEntry(i, j, data[i] * v.getEntry(j)); [EOL]             } [EOL]         } [EOL]         return out; [EOL]     } [EOL] } <line_num>: 570,594
@Override [EOL] public double getEntry(int index) throws OutOfRangeException { [EOL]     try { [EOL]         return data[index]; [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         throw new OutOfRangeException(LocalizedFormats.INDEX, index, 0, getDimension() - 1); [EOL]     } [EOL] } <line_num>: 597,605
@Override [EOL] public int getDimension() { [EOL]     return data.length; [EOL] } <line_num>: 608,611
@Override [EOL] public RealVector append(RealVector v) { [EOL]     try { [EOL]         return new ArrayRealVector(this, (ArrayRealVector) v); [EOL]     } catch (ClassCastException cce) { [EOL]         return new ArrayRealVector(this, v); [EOL]     } [EOL] } <line_num>: 614,621
public ArrayRealVector append(ArrayRealVector v) { [EOL]     return new ArrayRealVector(this, v); [EOL] } <line_num>: 629,631
@Override [EOL] public RealVector append(double in) { [EOL]     final double[] out = new double[data.length + 1]; [EOL]     System.arraycopy(data, 0, out, 0, data.length); [EOL]     out[data.length] = in; [EOL]     return new ArrayRealVector(out, false); [EOL] } <line_num>: 634,640
@Override [EOL] public RealVector getSubVector(int index, int n) throws OutOfRangeException, NotPositiveException { [EOL]     if (n < 0) { [EOL]         throw new NotPositiveException(LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n); [EOL]     } [EOL]     ArrayRealVector out = new ArrayRealVector(n); [EOL]     try { [EOL]         System.arraycopy(data, index, out.data, 0, n); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         checkIndex(index); [EOL]         checkIndex(index + n - 1); [EOL]     } [EOL]     return out; [EOL] } <line_num>: 643,657
@Override [EOL] public void setEntry(int index, double value) throws OutOfRangeException { [EOL]     try { [EOL]         data[index] = value; [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         checkIndex(index); [EOL]     } [EOL] } <line_num>: 660,667
@Override [EOL] public void addToEntry(int index, double increment) throws OutOfRangeException { [EOL]     try { [EOL]         data[index] += increment; [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         throw new OutOfRangeException(LocalizedFormats.INDEX, index, 0, data.length - 1); [EOL]     } [EOL] } <line_num>: 670,679
@Override [EOL] public void setSubVector(int index, RealVector v) throws OutOfRangeException { [EOL]     if (v instanceof ArrayRealVector) { [EOL]         setSubVector(index, ((ArrayRealVector) v).data); [EOL]     } else { [EOL]         try { [EOL]             for (int i = index; i < index + v.getDimension(); ++i) { [EOL]                 data[i] = v.getEntry(i - index); [EOL]             } [EOL]         } catch (IndexOutOfBoundsException e) { [EOL]             checkIndex(index); [EOL]             checkIndex(index + v.getDimension() - 1); [EOL]         } [EOL]     } [EOL] } <line_num>: 682,697
public void setSubVector(int index, double[] v) throws OutOfRangeException { [EOL]     try { [EOL]         System.arraycopy(v, 0, data, index, v.length); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         checkIndex(index); [EOL]         checkIndex(index + v.length - 1); [EOL]     } [EOL] } <line_num>: 707,715
@Override [EOL] public void set(double value) { [EOL]     Arrays.fill(data, value); [EOL] } <line_num>: 718,721
@Override [EOL] public double[] toArray() { [EOL]     return data.clone(); [EOL] } <line_num>: 724,727
@Override [EOL] public String toString() { [EOL]     return DEFAULT_FORMAT.format(this); [EOL] } <line_num>: 730,733
@Override [EOL] protected void checkVectorDimensions(RealVector v) throws DimensionMismatchException { [EOL]     checkVectorDimensions(v.getDimension()); [EOL] } <line_num>: 742,746
@Override [EOL] protected void checkVectorDimensions(int n) throws DimensionMismatchException { [EOL]     if (data.length != n) { [EOL]         throw new DimensionMismatchException(data.length, n); [EOL]     } [EOL] } <line_num>: 755,761
@Override [EOL] public boolean isNaN() { [EOL]     for (double v : data) { [EOL]         if (Double.isNaN(v)) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 769,777
@Override [EOL] public boolean isInfinite() { [EOL]     if (isNaN()) { [EOL]         return false; [EOL]     } [EOL]     for (double v : data) { [EOL]         if (Double.isInfinite(v)) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 786,799
@Override [EOL] public boolean equals(Object other) { [EOL]     if (this == other) { [EOL]         return true; [EOL]     } [EOL]     if (!(other instanceof RealVector)) { [EOL]         return false; [EOL]     } [EOL]     RealVector rhs = (RealVector) other; [EOL]     if (data.length != rhs.getDimension()) { [EOL]         return false; [EOL]     } [EOL]     if (rhs.isNaN()) { [EOL]         return this.isNaN(); [EOL]     } [EOL]     for (int i = 0; i < data.length; ++i) { [EOL]         if (data[i] != rhs.getEntry(i)) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 802,827
@Override [EOL] public int hashCode() { [EOL]     if (isNaN()) { [EOL]         return 9; [EOL]     } [EOL]     return MathUtils.hash(data); [EOL] } <line_num>: 832,838
@Override [EOL] public ArrayRealVector combine(double a, double b, RealVector y) throws DimensionMismatchException { [EOL]     return copy().combineToSelf(a, b, y); [EOL] } <line_num>: 841,845
@Override [EOL] public ArrayRealVector combineToSelf(double a, double b, RealVector y) throws DimensionMismatchException { [EOL]     if (y instanceof ArrayRealVector) { [EOL]         final double[] yData = ((ArrayRealVector) y).data; [EOL]         checkVectorDimensions(yData.length); [EOL]         for (int i = 0; i < this.data.length; i++) { [EOL]             data[i] = a * data[i] + b * yData[i]; [EOL]         } [EOL]     } else { [EOL]         checkVectorDimensions(y); [EOL]         for (int i = 0; i < this.data.length; i++) { [EOL]             data[i] = a * data[i] + b * y.getEntry(i); [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 848,864
@Override [EOL] public double walkInDefaultOrder(final RealVectorPreservingVisitor visitor) { [EOL]     visitor.start(data.length, 0, data.length - 1); [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         visitor.visit(i, data[i]); [EOL]     } [EOL]     return visitor.end(); [EOL] } <line_num>: 867,874
@Override [EOL] public double walkInDefaultOrder(final RealVectorPreservingVisitor visitor, final int start, final int end) throws NumberIsTooSmallException, OutOfRangeException { [EOL]     checkIndices(start, end); [EOL]     visitor.start(data.length, start, end); [EOL]     for (int i = start; i <= end; i++) { [EOL]         visitor.visit(i, data[i]); [EOL]     } [EOL]     return visitor.end(); [EOL] } <line_num>: 877,887
@Override [EOL] public double walkInOptimizedOrder(final RealVectorPreservingVisitor visitor) { [EOL]     return walkInDefaultOrder(visitor); [EOL] } <line_num>: 894,897
@Override [EOL] public double walkInOptimizedOrder(final RealVectorPreservingVisitor visitor, final int start, final int end) throws NumberIsTooSmallException, OutOfRangeException { [EOL]     return walkInDefaultOrder(visitor, start, end); [EOL] } <line_num>: 904,909
@Override [EOL] public double walkInDefaultOrder(final RealVectorChangingVisitor visitor) { [EOL]     visitor.start(data.length, 0, data.length - 1); [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         data[i] = visitor.visit(i, data[i]); [EOL]     } [EOL]     return visitor.end(); [EOL] } <line_num>: 912,919
@Override [EOL] public double walkInDefaultOrder(final RealVectorChangingVisitor visitor, final int start, final int end) throws NumberIsTooSmallException, OutOfRangeException { [EOL]     checkIndices(start, end); [EOL]     visitor.start(data.length, start, end); [EOL]     for (int i = start; i <= end; i++) { [EOL]         data[i] = visitor.visit(i, data[i]); [EOL]     } [EOL]     return visitor.end(); [EOL] } <line_num>: 922,932
@Override [EOL] public double walkInOptimizedOrder(final RealVectorChangingVisitor visitor) { [EOL]     return walkInDefaultOrder(visitor); [EOL] } <line_num>: 939,942
@Override [EOL] public double walkInOptimizedOrder(final RealVectorChangingVisitor visitor, final int start, final int end) throws NumberIsTooSmallException, OutOfRangeException { [EOL]     return walkInDefaultOrder(visitor, start, end); [EOL] } <line_num>: 949,954
