protected AbstractRealMatrix() { [EOL] } <line_num>: 56,56
protected AbstractRealMatrix(final int rowDimension, final int columnDimension) throws NotStrictlyPositiveException { [EOL]     if (rowDimension < 1) { [EOL]         throw new NotStrictlyPositiveException(rowDimension); [EOL]     } [EOL]     if (columnDimension < 1) { [EOL]         throw new NotStrictlyPositiveException(columnDimension); [EOL]     } [EOL] } <line_num>: 65,74
public RealMatrix add(RealMatrix m) throws MatrixDimensionMismatchException { [EOL]     MatrixUtils.checkAdditionCompatible(this, m); [EOL]     final int rowCount = getRowDimension(); [EOL]     final int columnCount = getColumnDimension(); [EOL]     final RealMatrix out = createMatrix(rowCount, columnCount); [EOL]     for (int row = 0; row < rowCount; ++row) { [EOL]         for (int col = 0; col < columnCount; ++col) { [EOL]             out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col)); [EOL]         } [EOL]     } [EOL]     return out; [EOL] } <line_num>: 77,91
public RealMatrix subtract(final RealMatrix m) throws MatrixDimensionMismatchException { [EOL]     MatrixUtils.checkSubtractionCompatible(this, m); [EOL]     final int rowCount = getRowDimension(); [EOL]     final int columnCount = getColumnDimension(); [EOL]     final RealMatrix out = createMatrix(rowCount, columnCount); [EOL]     for (int row = 0; row < rowCount; ++row) { [EOL]         for (int col = 0; col < columnCount; ++col) { [EOL]             out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col)); [EOL]         } [EOL]     } [EOL]     return out; [EOL] } <line_num>: 94,108
public RealMatrix scalarAdd(final double d) { [EOL]     final int rowCount = getRowDimension(); [EOL]     final int columnCount = getColumnDimension(); [EOL]     final RealMatrix out = createMatrix(rowCount, columnCount); [EOL]     for (int row = 0; row < rowCount; ++row) { [EOL]         for (int col = 0; col < columnCount; ++col) { [EOL]             out.setEntry(row, col, getEntry(row, col) + d); [EOL]         } [EOL]     } [EOL]     return out; [EOL] } <line_num>: 111,122
public RealMatrix scalarMultiply(final double d) { [EOL]     final int rowCount = getRowDimension(); [EOL]     final int columnCount = getColumnDimension(); [EOL]     final RealMatrix out = createMatrix(rowCount, columnCount); [EOL]     for (int row = 0; row < rowCount; ++row) { [EOL]         for (int col = 0; col < columnCount; ++col) { [EOL]             out.setEntry(row, col, getEntry(row, col) * d); [EOL]         } [EOL]     } [EOL]     return out; [EOL] } <line_num>: 125,136
public RealMatrix multiply(final RealMatrix m) throws DimensionMismatchException { [EOL]     MatrixUtils.checkMultiplicationCompatible(this, m); [EOL]     final int nRows = getRowDimension(); [EOL]     final int nCols = m.getColumnDimension(); [EOL]     final int nSum = getColumnDimension(); [EOL]     final RealMatrix out = createMatrix(nRows, nCols); [EOL]     for (int row = 0; row < nRows; ++row) { [EOL]         for (int col = 0; col < nCols; ++col) { [EOL]             double sum = 0; [EOL]             for (int i = 0; i < nSum; ++i) { [EOL]                 sum += getEntry(row, i) * m.getEntry(i, col); [EOL]             } [EOL]             out.setEntry(row, col, sum); [EOL]         } [EOL]     } [EOL]     return out; [EOL] } <line_num>: 139,158
public RealMatrix preMultiply(final RealMatrix m) throws DimensionMismatchException { [EOL]     return m.multiply(this); [EOL] } <line_num>: 161,164
public RealMatrix power(final int p) throws NotPositiveException, NonSquareMatrixException { [EOL]     if (p < 0) { [EOL]         throw new NotPositiveException(LocalizedFormats.NOT_POSITIVE_EXPONENT, p); [EOL]     } [EOL]     if (!isSquare()) { [EOL]         throw new NonSquareMatrixException(getRowDimension(), getColumnDimension()); [EOL]     } [EOL]     if (p == 0) { [EOL]         return MatrixUtils.createRealIdentityMatrix(this.getRowDimension()); [EOL]     } [EOL]     if (p == 1) { [EOL]         return this.copy(); [EOL]     } [EOL]     final int power = p - 1; [EOL]     final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray(); [EOL]     final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>(); [EOL]     int maxI = -1; [EOL]     for (int i = 0; i < binaryRepresentation.length; ++i) { [EOL]         if (binaryRepresentation[i] == '1') { [EOL]             final int pos = binaryRepresentation.length - i - 1; [EOL]             nonZeroPositions.add(pos); [EOL]             if (maxI == -1) { [EOL]                 maxI = pos; [EOL]             } [EOL]         } [EOL]     } [EOL]     RealMatrix[] results = new RealMatrix[maxI + 1]; [EOL]     results[0] = this.copy(); [EOL]     for (int i = 1; i <= maxI; ++i) { [EOL]         results[i] = results[i - 1].multiply(results[i - 1]); [EOL]     } [EOL]     RealMatrix result = this.copy(); [EOL]     for (Integer i : nonZeroPositions) { [EOL]         result = result.multiply(results[i]); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 167,224
public double[][] getData() { [EOL]     final double[][] data = new double[getRowDimension()][getColumnDimension()]; [EOL]     for (int i = 0; i < data.length; ++i) { [EOL]         final double[] dataI = data[i]; [EOL]         for (int j = 0; j < dataI.length; ++j) { [EOL]             dataI[j] = getEntry(i, j); [EOL]         } [EOL]     } [EOL]     return data; [EOL] } <line_num>: 227,238
public void start(final int rows, final int columns, final int startRow, final int endRow, final int startColumn, final int endColumn) { [EOL]     this.endRow = endRow; [EOL]     columnSum = 0; [EOL]     maxColSum = 0; [EOL] } <line_num>: 254,260
public void visit(final int row, final int column, final double value) { [EOL]     columnSum += FastMath.abs(value); [EOL]     if (row == endRow) { [EOL]         maxColSum = FastMath.max(maxColSum, columnSum); [EOL]         columnSum = 0; [EOL]     } [EOL] } <line_num>: 263,269
public double end() { [EOL]     return maxColSum; [EOL] } <line_num>: 272,274
public double getNorm() { [EOL]     return walkInColumnOrder(new RealMatrixPreservingVisitor() { [EOL]  [EOL]         private double endRow; [EOL]  [EOL]         private double columnSum; [EOL]  [EOL]         private double maxColSum; [EOL]  [EOL]         public void start(final int rows, final int columns, final int startRow, final int endRow, final int startColumn, final int endColumn) { [EOL]             this.endRow = endRow; [EOL]             columnSum = 0; [EOL]             maxColSum = 0; [EOL]         } [EOL]  [EOL]         public void visit(final int row, final int column, final double value) { [EOL]             columnSum += FastMath.abs(value); [EOL]             if (row == endRow) { [EOL]                 maxColSum = FastMath.max(maxColSum, columnSum); [EOL]                 columnSum = 0; [EOL]             } [EOL]         } [EOL]  [EOL]         public double end() { [EOL]             return maxColSum; [EOL]         } [EOL]     }); [EOL] } <line_num>: 241,276
public void start(final int rows, final int columns, final int startRow, final int endRow, final int startColumn, final int endColumn) { [EOL]     sum = 0; [EOL] } <line_num>: 286,290
public void visit(final int row, final int column, final double value) { [EOL]     sum += value * value; [EOL] } <line_num>: 293,295
public double end() { [EOL]     return FastMath.sqrt(sum); [EOL] } <line_num>: 298,300
public double getFrobeniusNorm() { [EOL]     return walkInOptimizedOrder(new RealMatrixPreservingVisitor() { [EOL]  [EOL]         private double sum; [EOL]  [EOL]         public void start(final int rows, final int columns, final int startRow, final int endRow, final int startColumn, final int endColumn) { [EOL]             sum = 0; [EOL]         } [EOL]  [EOL]         public void visit(final int row, final int column, final double value) { [EOL]             sum += value * value; [EOL]         } [EOL]  [EOL]         public double end() { [EOL]             return FastMath.sqrt(sum); [EOL]         } [EOL]     }); [EOL] } <line_num>: 279,302
public RealMatrix getSubMatrix(final int startRow, final int endRow, final int startColumn, final int endColumn) throws OutOfRangeException, NumberIsTooSmallException { [EOL]     MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn); [EOL]     final RealMatrix subMatrix = createMatrix(endRow - startRow + 1, endColumn - startColumn + 1); [EOL]     for (int i = startRow; i <= endRow; ++i) { [EOL]         for (int j = startColumn; j <= endColumn; ++j) { [EOL]             subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j)); [EOL]         } [EOL]     } [EOL]     return subMatrix; [EOL] } <line_num>: 305,319
@Override [EOL] public double visit(final int row, final int column, final double value) { [EOL]     return getEntry(selectedRows[row], selectedColumns[column]); [EOL] } <line_num>: 332,335
public RealMatrix getSubMatrix(final int[] selectedRows, final int[] selectedColumns) throws NullArgumentException, NoDataException, OutOfRangeException { [EOL]     MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns); [EOL]     final RealMatrix subMatrix = createMatrix(selectedRows.length, selectedColumns.length); [EOL]     subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { [EOL]  [EOL]         @Override [EOL]         public double visit(final int row, final int column, final double value) { [EOL]             return getEntry(selectedRows[row], selectedColumns[column]); [EOL]         } [EOL]     }); [EOL]     return subMatrix; [EOL] } <line_num>: 322,340
@Override [EOL] public void start(final int rows, final int columns, final int startRow, final int endRow, final int startColumn, final int endColumn) { [EOL]     this.startRow = startRow; [EOL]     this.startColumn = startColumn; [EOL] } <line_num>: 372,378
@Override [EOL] public void visit(final int row, final int column, final double value) { [EOL]     destination[row - startRow][column - startColumn] = value; [EOL] } <line_num>: 381,384
public void copySubMatrix(final int startRow, final int endRow, final int startColumn, final int endColumn, final double[][] destination) throws OutOfRangeException, NumberIsTooSmallException, MatrixDimensionMismatchException { [EOL]     MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn); [EOL]     final int rowsCount = endRow + 1 - startRow; [EOL]     final int columnsCount = endColumn + 1 - startColumn; [EOL]     if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) { [EOL]         throw new MatrixDimensionMismatchException(destination.length, destination[0].length, rowsCount, columnsCount); [EOL]     } [EOL]     for (int i = 1; i < rowsCount; i++) { [EOL]         if (destination[i].length < columnsCount) { [EOL]             throw new MatrixDimensionMismatchException(destination.length, destination[i].length, rowsCount, columnsCount); [EOL]         } [EOL]     } [EOL]     walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() { [EOL]  [EOL]         private int startRow; [EOL]  [EOL]         private int startColumn; [EOL]  [EOL]         @Override [EOL]         public void start(final int rows, final int columns, final int startRow, final int endRow, final int startColumn, final int endColumn) { [EOL]             this.startRow = startRow; [EOL]             this.startColumn = startColumn; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public void visit(final int row, final int column, final double value) { [EOL]             destination[row - startRow][column - startColumn] = value; [EOL]         } [EOL]     }, startRow, endRow, startColumn, endColumn); [EOL] } <line_num>: 343,387
public void copySubMatrix(int[] selectedRows, int[] selectedColumns, double[][] destination) throws OutOfRangeException, NullArgumentException, NoDataException, MatrixDimensionMismatchException { [EOL]     MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns); [EOL]     final int nCols = selectedColumns.length; [EOL]     if ((destination.length < selectedRows.length) || (destination[0].length < nCols)) { [EOL]         throw new MatrixDimensionMismatchException(destination.length, destination[0].length, selectedRows.length, selectedColumns.length); [EOL]     } [EOL]     for (int i = 0; i < selectedRows.length; i++) { [EOL]         final double[] destinationI = destination[i]; [EOL]         if (destinationI.length < nCols) { [EOL]             throw new MatrixDimensionMismatchException(destination.length, destinationI.length, selectedRows.length, selectedColumns.length); [EOL]         } [EOL]         for (int j = 0; j < selectedColumns.length; j++) { [EOL]             destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]); [EOL]         } [EOL]     } [EOL] } <line_num>: 390,412
public void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws NoDataException, OutOfRangeException, DimensionMismatchException, NullArgumentException { [EOL]     MathUtils.checkNotNull(subMatrix); [EOL]     final int nRows = subMatrix.length; [EOL]     if (nRows == 0) { [EOL]         throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW); [EOL]     } [EOL]     final int nCols = subMatrix[0].length; [EOL]     if (nCols == 0) { [EOL]         throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN); [EOL]     } [EOL]     for (int r = 1; r < nRows; ++r) { [EOL]         if (subMatrix[r].length != nCols) { [EOL]             throw new DimensionMismatchException(nCols, subMatrix[r].length); [EOL]         } [EOL]     } [EOL]     MatrixUtils.checkRowIndex(this, row); [EOL]     MatrixUtils.checkColumnIndex(this, column); [EOL]     MatrixUtils.checkRowIndex(this, nRows + row - 1); [EOL]     MatrixUtils.checkColumnIndex(this, nCols + column - 1); [EOL]     for (int i = 0; i < nRows; ++i) { [EOL]         for (int j = 0; j < nCols; ++j) { [EOL]             setEntry(row + i, column + j, subMatrix[i][j]); [EOL]         } [EOL]     } [EOL] } <line_num>: 415,445
public RealMatrix getRowMatrix(final int row) throws OutOfRangeException { [EOL]     MatrixUtils.checkRowIndex(this, row); [EOL]     final int nCols = getColumnDimension(); [EOL]     final RealMatrix out = createMatrix(1, nCols); [EOL]     for (int i = 0; i < nCols; ++i) { [EOL]         out.setEntry(0, i, getEntry(row, i)); [EOL]     } [EOL]     return out; [EOL] } <line_num>: 448,457
public void setRowMatrix(final int row, final RealMatrix matrix) throws OutOfRangeException, MatrixDimensionMismatchException { [EOL]     MatrixUtils.checkRowIndex(this, row); [EOL]     final int nCols = getColumnDimension(); [EOL]     if ((matrix.getRowDimension() != 1) || (matrix.getColumnDimension() != nCols)) { [EOL]         throw new MatrixDimensionMismatchException(matrix.getRowDimension(), matrix.getColumnDimension(), 1, nCols); [EOL]     } [EOL]     for (int i = 0; i < nCols; ++i) { [EOL]         setEntry(row, i, matrix.getEntry(0, i)); [EOL]     } [EOL] } <line_num>: 460,473
public RealMatrix getColumnMatrix(final int column) throws OutOfRangeException { [EOL]     MatrixUtils.checkColumnIndex(this, column); [EOL]     final int nRows = getRowDimension(); [EOL]     final RealMatrix out = createMatrix(nRows, 1); [EOL]     for (int i = 0; i < nRows; ++i) { [EOL]         out.setEntry(i, 0, getEntry(i, column)); [EOL]     } [EOL]     return out; [EOL] } <line_num>: 476,486
public void setColumnMatrix(final int column, final RealMatrix matrix) throws OutOfRangeException, MatrixDimensionMismatchException { [EOL]     MatrixUtils.checkColumnIndex(this, column); [EOL]     final int nRows = getRowDimension(); [EOL]     if ((matrix.getRowDimension() != nRows) || (matrix.getColumnDimension() != 1)) { [EOL]         throw new MatrixDimensionMismatchException(matrix.getRowDimension(), matrix.getColumnDimension(), nRows, 1); [EOL]     } [EOL]     for (int i = 0; i < nRows; ++i) { [EOL]         setEntry(i, column, matrix.getEntry(i, 0)); [EOL]     } [EOL] } <line_num>: 489,502
public RealVector getRowVector(final int row) throws OutOfRangeException { [EOL]     return new ArrayRealVector(getRow(row), false); [EOL] } <line_num>: 505,508
public void setRowVector(final int row, final RealVector vector) throws OutOfRangeException, MatrixDimensionMismatchException { [EOL]     MatrixUtils.checkRowIndex(this, row); [EOL]     final int nCols = getColumnDimension(); [EOL]     if (vector.getDimension() != nCols) { [EOL]         throw new MatrixDimensionMismatchException(1, vector.getDimension(), 1, nCols); [EOL]     } [EOL]     for (int i = 0; i < nCols; ++i) { [EOL]         setEntry(row, i, vector.getEntry(i)); [EOL]     } [EOL] } <line_num>: 511,522
public RealVector getColumnVector(final int column) throws OutOfRangeException { [EOL]     return new ArrayRealVector(getColumn(column), false); [EOL] } <line_num>: 525,528
public void setColumnVector(final int column, final RealVector vector) throws OutOfRangeException, MatrixDimensionMismatchException { [EOL]     MatrixUtils.checkColumnIndex(this, column); [EOL]     final int nRows = getRowDimension(); [EOL]     if (vector.getDimension() != nRows) { [EOL]         throw new MatrixDimensionMismatchException(vector.getDimension(), 1, nRows, 1); [EOL]     } [EOL]     for (int i = 0; i < nRows; ++i) { [EOL]         setEntry(i, column, vector.getEntry(i)); [EOL]     } [EOL] } <line_num>: 531,542
public double[] getRow(final int row) throws OutOfRangeException { [EOL]     MatrixUtils.checkRowIndex(this, row); [EOL]     final int nCols = getColumnDimension(); [EOL]     final double[] out = new double[nCols]; [EOL]     for (int i = 0; i < nCols; ++i) { [EOL]         out[i] = getEntry(row, i); [EOL]     } [EOL]     return out; [EOL] } <line_num>: 545,554
public void setRow(final int row, final double[] array) throws OutOfRangeException, MatrixDimensionMismatchException { [EOL]     MatrixUtils.checkRowIndex(this, row); [EOL]     final int nCols = getColumnDimension(); [EOL]     if (array.length != nCols) { [EOL]         throw new MatrixDimensionMismatchException(1, array.length, 1, nCols); [EOL]     } [EOL]     for (int i = 0; i < nCols; ++i) { [EOL]         setEntry(row, i, array[i]); [EOL]     } [EOL] } <line_num>: 557,567
public double[] getColumn(final int column) throws OutOfRangeException { [EOL]     MatrixUtils.checkColumnIndex(this, column); [EOL]     final int nRows = getRowDimension(); [EOL]     final double[] out = new double[nRows]; [EOL]     for (int i = 0; i < nRows; ++i) { [EOL]         out[i] = getEntry(i, column); [EOL]     } [EOL]     return out; [EOL] } <line_num>: 570,579
public void setColumn(final int column, final double[] array) throws OutOfRangeException, MatrixDimensionMismatchException { [EOL]     MatrixUtils.checkColumnIndex(this, column); [EOL]     final int nRows = getRowDimension(); [EOL]     if (array.length != nRows) { [EOL]         throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1); [EOL]     } [EOL]     for (int i = 0; i < nRows; ++i) { [EOL]         setEntry(i, column, array[i]); [EOL]     } [EOL] } <line_num>: 582,592
public void addToEntry(int row, int column, double increment) throws OutOfRangeException { [EOL]     MatrixUtils.checkMatrixIndex(this, row, column); [EOL]     setEntry(row, column, getEntry(row, column) + increment); [EOL] } <line_num>: 595,599
public void multiplyEntry(int row, int column, double factor) throws OutOfRangeException { [EOL]     MatrixUtils.checkMatrixIndex(this, row, column); [EOL]     setEntry(row, column, getEntry(row, column) * factor); [EOL] } <line_num>: 602,606
@Override [EOL] public void visit(final int row, final int column, final double value) { [EOL]     out.setEntry(column, row, value); [EOL] } <line_num>: 616,619
public RealMatrix transpose() { [EOL]     final int nRows = getRowDimension(); [EOL]     final int nCols = getColumnDimension(); [EOL]     final RealMatrix out = createMatrix(nCols, nRows); [EOL]     walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() { [EOL]  [EOL]         @Override [EOL]         public void visit(final int row, final int column, final double value) { [EOL]             out.setEntry(column, row, value); [EOL]         } [EOL]     }); [EOL]     return out; [EOL] } <line_num>: 609,624
public boolean isSquare() { [EOL]     return getColumnDimension() == getRowDimension(); [EOL] } <line_num>: 627,629
@Override [EOL] public abstract int getRowDimension(); <line_num>: 636,637
@Override [EOL] public abstract int getColumnDimension(); <line_num>: 644,645
public double getTrace() throws NonSquareMatrixException { [EOL]     final int nRows = getRowDimension(); [EOL]     final int nCols = getColumnDimension(); [EOL]     if (nRows != nCols) { [EOL]         throw new NonSquareMatrixException(nRows, nCols); [EOL]     } [EOL]     double trace = 0; [EOL]     for (int i = 0; i < nRows; ++i) { [EOL]         trace += getEntry(i, i); [EOL]     } [EOL]     return trace; [EOL] } <line_num>: 648,659
public double[] operate(final double[] v) throws DimensionMismatchException { [EOL]     final int nRows = getRowDimension(); [EOL]     final int nCols = getColumnDimension(); [EOL]     if (v.length != nCols) { [EOL]         throw new DimensionMismatchException(v.length, nCols); [EOL]     } [EOL]     final double[] out = new double[nRows]; [EOL]     for (int row = 0; row < nRows; ++row) { [EOL]         double sum = 0; [EOL]         for (int i = 0; i < nCols; ++i) { [EOL]             sum += getEntry(row, i) * v[i]; [EOL]         } [EOL]         out[row] = sum; [EOL]     } [EOL]     return out; [EOL] } <line_num>: 662,680
@Override [EOL] public RealVector operate(final RealVector v) throws DimensionMismatchException { [EOL]     try { [EOL]         return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false); [EOL]     } catch (ClassCastException cce) { [EOL]         final int nRows = getRowDimension(); [EOL]         final int nCols = getColumnDimension(); [EOL]         if (v.getDimension() != nCols) { [EOL]             throw new DimensionMismatchException(v.getDimension(), nCols); [EOL]         } [EOL]         final double[] out = new double[nRows]; [EOL]         for (int row = 0; row < nRows; ++row) { [EOL]             double sum = 0; [EOL]             for (int i = 0; i < nCols; ++i) { [EOL]                 sum += getEntry(row, i) * v.getEntry(i); [EOL]             } [EOL]             out[row] = sum; [EOL]         } [EOL]         return new ArrayRealVector(out, false); [EOL]     } [EOL] } <line_num>: 683,706
public double[] preMultiply(final double[] v) throws DimensionMismatchException { [EOL]     final int nRows = getRowDimension(); [EOL]     final int nCols = getColumnDimension(); [EOL]     if (v.length != nRows) { [EOL]         throw new DimensionMismatchException(v.length, nRows); [EOL]     } [EOL]     final double[] out = new double[nCols]; [EOL]     for (int col = 0; col < nCols; ++col) { [EOL]         double sum = 0; [EOL]         for (int i = 0; i < nRows; ++i) { [EOL]             sum += getEntry(i, col) * v[i]; [EOL]         } [EOL]         out[col] = sum; [EOL]     } [EOL]     return out; [EOL] } <line_num>: 709,727
public RealVector preMultiply(final RealVector v) throws DimensionMismatchException { [EOL]     try { [EOL]         return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false); [EOL]     } catch (ClassCastException cce) { [EOL]         final int nRows = getRowDimension(); [EOL]         final int nCols = getColumnDimension(); [EOL]         if (v.getDimension() != nRows) { [EOL]             throw new DimensionMismatchException(v.getDimension(), nRows); [EOL]         } [EOL]         final double[] out = new double[nCols]; [EOL]         for (int col = 0; col < nCols; ++col) { [EOL]             double sum = 0; [EOL]             for (int i = 0; i < nRows; ++i) { [EOL]                 sum += getEntry(i, col) * v.getEntry(i); [EOL]             } [EOL]             out[col] = sum; [EOL]         } [EOL]         return new ArrayRealVector(out, false); [EOL]     } [EOL] } <line_num>: 730,752
public double walkInRowOrder(final RealMatrixChangingVisitor visitor) { [EOL]     final int rows = getRowDimension(); [EOL]     final int columns = getColumnDimension(); [EOL]     visitor.start(rows, columns, 0, rows - 1, 0, columns - 1); [EOL]     for (int row = 0; row < rows; ++row) { [EOL]         for (int column = 0; column < columns; ++column) { [EOL]             final double oldValue = getEntry(row, column); [EOL]             final double newValue = visitor.visit(row, column, oldValue); [EOL]             setEntry(row, column, newValue); [EOL]         } [EOL]     } [EOL]     return visitor.end(); [EOL] } <line_num>: 755,767
public double walkInRowOrder(final RealMatrixPreservingVisitor visitor) { [EOL]     final int rows = getRowDimension(); [EOL]     final int columns = getColumnDimension(); [EOL]     visitor.start(rows, columns, 0, rows - 1, 0, columns - 1); [EOL]     for (int row = 0; row < rows; ++row) { [EOL]         for (int column = 0; column < columns; ++column) { [EOL]             visitor.visit(row, column, getEntry(row, column)); [EOL]         } [EOL]     } [EOL]     return visitor.end(); [EOL] } <line_num>: 770,780
public double walkInRowOrder(final RealMatrixChangingVisitor visitor, final int startRow, final int endRow, final int startColumn, final int endColumn) throws OutOfRangeException, NumberIsTooSmallException { [EOL]     MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn); [EOL]     visitor.start(getRowDimension(), getColumnDimension(), startRow, endRow, startColumn, endColumn); [EOL]     for (int row = startRow; row <= endRow; ++row) { [EOL]         for (int column = startColumn; column <= endColumn; ++column) { [EOL]             final double oldValue = getEntry(row, column); [EOL]             final double newValue = visitor.visit(row, column, oldValue); [EOL]             setEntry(row, column, newValue); [EOL]         } [EOL]     } [EOL]     return visitor.end(); [EOL] } <line_num>: 783,798
public double walkInRowOrder(final RealMatrixPreservingVisitor visitor, final int startRow, final int endRow, final int startColumn, final int endColumn) throws OutOfRangeException, NumberIsTooSmallException { [EOL]     MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn); [EOL]     visitor.start(getRowDimension(), getColumnDimension(), startRow, endRow, startColumn, endColumn); [EOL]     for (int row = startRow; row <= endRow; ++row) { [EOL]         for (int column = startColumn; column <= endColumn; ++column) { [EOL]             visitor.visit(row, column, getEntry(row, column)); [EOL]         } [EOL]     } [EOL]     return visitor.end(); [EOL] } <line_num>: 801,814
public double walkInColumnOrder(final RealMatrixChangingVisitor visitor) { [EOL]     final int rows = getRowDimension(); [EOL]     final int columns = getColumnDimension(); [EOL]     visitor.start(rows, columns, 0, rows - 1, 0, columns - 1); [EOL]     for (int column = 0; column < columns; ++column) { [EOL]         for (int row = 0; row < rows; ++row) { [EOL]             final double oldValue = getEntry(row, column); [EOL]             final double newValue = visitor.visit(row, column, oldValue); [EOL]             setEntry(row, column, newValue); [EOL]         } [EOL]     } [EOL]     return visitor.end(); [EOL] } <line_num>: 817,829
public double walkInColumnOrder(final RealMatrixPreservingVisitor visitor) { [EOL]     final int rows = getRowDimension(); [EOL]     final int columns = getColumnDimension(); [EOL]     visitor.start(rows, columns, 0, rows - 1, 0, columns - 1); [EOL]     for (int column = 0; column < columns; ++column) { [EOL]         for (int row = 0; row < rows; ++row) { [EOL]             visitor.visit(row, column, getEntry(row, column)); [EOL]         } [EOL]     } [EOL]     return visitor.end(); [EOL] } <line_num>: 832,842
public double walkInColumnOrder(final RealMatrixChangingVisitor visitor, final int startRow, final int endRow, final int startColumn, final int endColumn) throws OutOfRangeException, NumberIsTooSmallException { [EOL]     MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn); [EOL]     visitor.start(getRowDimension(), getColumnDimension(), startRow, endRow, startColumn, endColumn); [EOL]     for (int column = startColumn; column <= endColumn; ++column) { [EOL]         for (int row = startRow; row <= endRow; ++row) { [EOL]             final double oldValue = getEntry(row, column); [EOL]             final double newValue = visitor.visit(row, column, oldValue); [EOL]             setEntry(row, column, newValue); [EOL]         } [EOL]     } [EOL]     return visitor.end(); [EOL] } <line_num>: 845,860
public double walkInColumnOrder(final RealMatrixPreservingVisitor visitor, final int startRow, final int endRow, final int startColumn, final int endColumn) throws OutOfRangeException, NumberIsTooSmallException { [EOL]     MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn); [EOL]     visitor.start(getRowDimension(), getColumnDimension(), startRow, endRow, startColumn, endColumn); [EOL]     for (int column = startColumn; column <= endColumn; ++column) { [EOL]         for (int row = startRow; row <= endRow; ++row) { [EOL]             visitor.visit(row, column, getEntry(row, column)); [EOL]         } [EOL]     } [EOL]     return visitor.end(); [EOL] } <line_num>: 863,876
public double walkInOptimizedOrder(final RealMatrixChangingVisitor visitor) { [EOL]     return walkInRowOrder(visitor); [EOL] } <line_num>: 879,881
public double walkInOptimizedOrder(final RealMatrixPreservingVisitor visitor) { [EOL]     return walkInRowOrder(visitor); [EOL] } <line_num>: 884,886
public double walkInOptimizedOrder(final RealMatrixChangingVisitor visitor, final int startRow, final int endRow, final int startColumn, final int endColumn) throws OutOfRangeException, NumberIsTooSmallException { [EOL]     return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn); [EOL] } <line_num>: 889,895
public double walkInOptimizedOrder(final RealMatrixPreservingVisitor visitor, final int startRow, final int endRow, final int startColumn, final int endColumn) throws OutOfRangeException, NumberIsTooSmallException { [EOL]     return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn); [EOL] } <line_num>: 898,904
@Override [EOL] public String toString() { [EOL]     final StringBuilder res = new StringBuilder(); [EOL]     String fullClassName = getClass().getName(); [EOL]     String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1); [EOL]     res.append(shortClassName); [EOL]     res.append(DEFAULT_FORMAT.format(this)); [EOL]     return res.toString(); [EOL] } <line_num>: 910,918
@Override [EOL] public boolean equals(final Object object) { [EOL]     if (object == this) { [EOL]         return true; [EOL]     } [EOL]     if (object instanceof RealMatrix == false) { [EOL]         return false; [EOL]     } [EOL]     RealMatrix m = (RealMatrix) object; [EOL]     final int nRows = getRowDimension(); [EOL]     final int nCols = getColumnDimension(); [EOL]     if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) { [EOL]         return false; [EOL]     } [EOL]     for (int row = 0; row < nRows; ++row) { [EOL]         for (int col = 0; col < nCols; ++col) { [EOL]             if (getEntry(row, col) != m.getEntry(row, col)) { [EOL]                 return false; [EOL]             } [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 928,950
@Override [EOL] public int hashCode() { [EOL]     int ret = 7; [EOL]     final int nRows = getRowDimension(); [EOL]     final int nCols = getColumnDimension(); [EOL]     ret = ret * 31 + nRows; [EOL]     ret = ret * 31 + nCols; [EOL]     for (int row = 0; row < nRows; ++row) { [EOL]         for (int col = 0; col < nCols; ++col) { [EOL]             ret = ret * 31 + (11 * (row + 1) + 17 * (col + 1)) * MathUtils.hash(getEntry(row, col)); [EOL]         } [EOL]     } [EOL]     return ret; [EOL] } <line_num>: 957,971
public abstract RealMatrix createMatrix(int rowDimension, int columnDimension) throws NotStrictlyPositiveException; <line_num>: 980,981
public abstract RealMatrix copy(); <line_num>: 984,984
public abstract double getEntry(int row, int column) throws OutOfRangeException; <line_num>: 987,988
public abstract void setEntry(int row, int column, double value) throws OutOfRangeException; <line_num>: 991,992
