public ArrayFieldVector(final Field<T> field) { [EOL]     this(field, 0); [EOL] } <line_num>: 61,63
public ArrayFieldVector(Field<T> field, int size) { [EOL]     this.field = field; [EOL]     this.data = MathArrays.buildArray(field, size); [EOL] } <line_num>: 71,74
public ArrayFieldVector(int size, T preset) { [EOL]     this(preset.getField(), size); [EOL]     Arrays.fill(data, preset); [EOL] } <line_num>: 82,85
public ArrayFieldVector(T[] d) throws NullArgumentException, ZeroException { [EOL]     MathUtils.checkNotNull(d); [EOL]     try { [EOL]         field = d[0].getField(); [EOL]         data = d.clone(); [EOL]     } catch (ArrayIndexOutOfBoundsException e) { [EOL]         throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT); [EOL]     } [EOL] } <line_num>: 99,108
public ArrayFieldVector(Field<T> field, T[] d) throws NullArgumentException { [EOL]     MathUtils.checkNotNull(d); [EOL]     this.field = field; [EOL]     data = d.clone(); [EOL] } <line_num>: 118,123
public ArrayFieldVector(T[] d, boolean copyArray) throws NullArgumentException, ZeroException { [EOL]     MathUtils.checkNotNull(d); [EOL]     if (d.length == 0) { [EOL]         throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT); [EOL]     } [EOL]     field = d[0].getField(); [EOL]     data = copyArray ? d.clone() : d; [EOL] } <line_num>: 146,154
public ArrayFieldVector(Field<T> field, T[] d, boolean copyArray) throws NullArgumentException { [EOL]     MathUtils.checkNotNull(d); [EOL]     this.field = field; [EOL]     data = copyArray ? d.clone() : d; [EOL] } <line_num>: 171,176
public ArrayFieldVector(T[] d, int pos, int size) throws NullArgumentException, NumberIsTooLargeException { [EOL]     MathUtils.checkNotNull(d); [EOL]     if (d.length < pos + size) { [EOL]         throw new NumberIsTooLargeException(pos + size, d.length, true); [EOL]     } [EOL]     field = d[0].getField(); [EOL]     data = MathArrays.buildArray(field, size); [EOL]     System.arraycopy(d, pos, data, 0, size); [EOL] } <line_num>: 188,197
public ArrayFieldVector(Field<T> field, T[] d, int pos, int size) throws NullArgumentException, NumberIsTooLargeException { [EOL]     MathUtils.checkNotNull(d); [EOL]     if (d.length < pos + size) { [EOL]         throw new NumberIsTooLargeException(pos + size, d.length, true); [EOL]     } [EOL]     this.field = field; [EOL]     data = MathArrays.buildArray(field, size); [EOL]     System.arraycopy(d, pos, data, 0, size); [EOL] } <line_num>: 210,219
public ArrayFieldVector(FieldVector<T> v) throws NullArgumentException { [EOL]     MathUtils.checkNotNull(v); [EOL]     field = v.getField(); [EOL]     data = MathArrays.buildArray(field, v.getDimension()); [EOL]     for (int i = 0; i < data.length; ++i) { [EOL]         data[i] = v.getEntry(i); [EOL]     } [EOL] } <line_num>: 227,235
public ArrayFieldVector(ArrayFieldVector<T> v) throws NullArgumentException { [EOL]     MathUtils.checkNotNull(v); [EOL]     field = v.getField(); [EOL]     data = v.data.clone(); [EOL] } <line_num>: 243,248
public ArrayFieldVector(ArrayFieldVector<T> v, boolean deep) throws NullArgumentException { [EOL]     MathUtils.checkNotNull(v); [EOL]     field = v.getField(); [EOL]     data = deep ? v.data.clone() : v.data; [EOL] } <line_num>: 258,263
@Deprecated [EOL] public ArrayFieldVector(ArrayFieldVector<T> v1, ArrayFieldVector<T> v2) throws NullArgumentException { [EOL]     this((FieldVector<T>) v1, (FieldVector<T>) v2); [EOL] } <line_num>: 274,278
public ArrayFieldVector(FieldVector<T> v1, FieldVector<T> v2) throws NullArgumentException { [EOL]     MathUtils.checkNotNull(v1); [EOL]     MathUtils.checkNotNull(v2); [EOL]     field = v1.getField(); [EOL]     final T[] v1Data = (v1 instanceof ArrayFieldVector) ? ((ArrayFieldVector<T>) v1).data : v1.toArray(); [EOL]     final T[] v2Data = (v2 instanceof ArrayFieldVector) ? ((ArrayFieldVector<T>) v2).data : v2.toArray(); [EOL]     data = MathArrays.buildArray(field, v1Data.length + v2Data.length); [EOL]     System.arraycopy(v1Data, 0, data, 0, v1Data.length); [EOL]     System.arraycopy(v2Data, 0, data, v1Data.length, v2Data.length); [EOL] } <line_num>: 289,301
@Deprecated [EOL] public ArrayFieldVector(ArrayFieldVector<T> v1, T[] v2) throws NullArgumentException { [EOL]     this((FieldVector<T>) v1, v2); [EOL] } <line_num>: 312,316
public ArrayFieldVector(FieldVector<T> v1, T[] v2) throws NullArgumentException { [EOL]     MathUtils.checkNotNull(v1); [EOL]     MathUtils.checkNotNull(v2); [EOL]     field = v1.getField(); [EOL]     final T[] v1Data = (v1 instanceof ArrayFieldVector) ? ((ArrayFieldVector<T>) v1).data : v1.toArray(); [EOL]     data = MathArrays.buildArray(field, v1Data.length + v2.length); [EOL]     System.arraycopy(v1Data, 0, data, 0, v1Data.length); [EOL]     System.arraycopy(v2, 0, data, v1Data.length, v2.length); [EOL] } <line_num>: 327,337
@Deprecated [EOL] public ArrayFieldVector(T[] v1, ArrayFieldVector<T> v2) throws NullArgumentException { [EOL]     this(v1, (FieldVector<T>) v2); [EOL] } <line_num>: 348,352
public ArrayFieldVector(T[] v1, FieldVector<T> v2) throws NullArgumentException { [EOL]     MathUtils.checkNotNull(v1); [EOL]     MathUtils.checkNotNull(v2); [EOL]     field = v2.getField(); [EOL]     final T[] v2Data = (v2 instanceof ArrayFieldVector) ? ((ArrayFieldVector<T>) v2).data : v2.toArray(); [EOL]     data = MathArrays.buildArray(field, v1.length + v2Data.length); [EOL]     System.arraycopy(v1, 0, data, 0, v1.length); [EOL]     System.arraycopy(v2Data, 0, data, v1.length, v2Data.length); [EOL] } <line_num>: 363,373
public ArrayFieldVector(T[] v1, T[] v2) throws NullArgumentException, ZeroException { [EOL]     MathUtils.checkNotNull(v1); [EOL]     MathUtils.checkNotNull(v2); [EOL]     if (v1.length + v2.length == 0) { [EOL]         throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT); [EOL]     } [EOL]     data = MathArrays.buildArray(v1[0].getField(), v1.length + v2.length); [EOL]     System.arraycopy(v1, 0, data, 0, v1.length); [EOL]     System.arraycopy(v2, 0, data, v1.length, v2.length); [EOL]     field = data[0].getField(); [EOL] } <line_num>: 390,401
public ArrayFieldVector(Field<T> field, T[] v1, T[] v2) throws NullArgumentException, ZeroException { [EOL]     MathUtils.checkNotNull(v1); [EOL]     MathUtils.checkNotNull(v2); [EOL]     if (v1.length + v2.length == 0) { [EOL]         throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT); [EOL]     } [EOL]     data = MathArrays.buildArray(field, v1.length + v2.length); [EOL]     System.arraycopy(v1, 0, data, 0, v1.length); [EOL]     System.arraycopy(v2, 0, data, v1.length, v2.length); [EOL]     this.field = field; [EOL] } <line_num>: 414,425
public Field<T> getField() { [EOL]     return field; [EOL] } <line_num>: 428,430
public FieldVector<T> copy() { [EOL]     return new ArrayFieldVector<T>(this, true); [EOL] } <line_num>: 433,435
public FieldVector<T> add(FieldVector<T> v) throws DimensionMismatchException { [EOL]     try { [EOL]         return add((ArrayFieldVector<T>) v); [EOL]     } catch (ClassCastException cce) { [EOL]         checkVectorDimensions(v); [EOL]         T[] out = MathArrays.buildArray(field, data.length); [EOL]         for (int i = 0; i < data.length; i++) { [EOL]             out[i] = data[i].add(v.getEntry(i)); [EOL]         } [EOL]         return new ArrayFieldVector<T>(field, out, false); [EOL]     } [EOL] } <line_num>: 438,450
public ArrayFieldVector<T> add(ArrayFieldVector<T> v) throws DimensionMismatchException { [EOL]     checkVectorDimensions(v.data.length); [EOL]     T[] out = MathArrays.buildArray(field, data.length); [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         out[i] = data[i].add(v.data[i]); [EOL]     } [EOL]     return new ArrayFieldVector<T>(field, out, false); [EOL] } <line_num>: 459,467
public FieldVector<T> subtract(FieldVector<T> v) throws DimensionMismatchException { [EOL]     try { [EOL]         return subtract((ArrayFieldVector<T>) v); [EOL]     } catch (ClassCastException cce) { [EOL]         checkVectorDimensions(v); [EOL]         T[] out = MathArrays.buildArray(field, data.length); [EOL]         for (int i = 0; i < data.length; i++) { [EOL]             out[i] = data[i].subtract(v.getEntry(i)); [EOL]         } [EOL]         return new ArrayFieldVector<T>(field, out, false); [EOL]     } [EOL] } <line_num>: 470,482
public ArrayFieldVector<T> subtract(ArrayFieldVector<T> v) throws DimensionMismatchException { [EOL]     checkVectorDimensions(v.data.length); [EOL]     T[] out = MathArrays.buildArray(field, data.length); [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         out[i] = data[i].subtract(v.data[i]); [EOL]     } [EOL]     return new ArrayFieldVector<T>(field, out, false); [EOL] } <line_num>: 491,499
public FieldVector<T> mapAdd(T d) throws NullArgumentException { [EOL]     T[] out = MathArrays.buildArray(field, data.length); [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         out[i] = data[i].add(d); [EOL]     } [EOL]     return new ArrayFieldVector<T>(field, out, false); [EOL] } <line_num>: 502,508
public FieldVector<T> mapAddToSelf(T d) throws NullArgumentException { [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         data[i] = data[i].add(d); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 511,516
public FieldVector<T> mapSubtract(T d) throws NullArgumentException { [EOL]     T[] out = MathArrays.buildArray(field, data.length); [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         out[i] = data[i].subtract(d); [EOL]     } [EOL]     return new ArrayFieldVector<T>(field, out, false); [EOL] } <line_num>: 519,525
public FieldVector<T> mapSubtractToSelf(T d) throws NullArgumentException { [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         data[i] = data[i].subtract(d); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 528,533
public FieldVector<T> mapMultiply(T d) throws NullArgumentException { [EOL]     T[] out = MathArrays.buildArray(field, data.length); [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         out[i] = data[i].multiply(d); [EOL]     } [EOL]     return new ArrayFieldVector<T>(field, out, false); [EOL] } <line_num>: 536,542
public FieldVector<T> mapMultiplyToSelf(T d) throws NullArgumentException { [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         data[i] = data[i].multiply(d); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 545,550
public FieldVector<T> mapDivide(T d) throws NullArgumentException, MathArithmeticException { [EOL]     MathUtils.checkNotNull(d); [EOL]     T[] out = MathArrays.buildArray(field, data.length); [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         out[i] = data[i].divide(d); [EOL]     } [EOL]     return new ArrayFieldVector<T>(field, out, false); [EOL] } <line_num>: 553,561
public FieldVector<T> mapDivideToSelf(T d) throws NullArgumentException, MathArithmeticException { [EOL]     MathUtils.checkNotNull(d); [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         data[i] = data[i].divide(d); [EOL]     } [EOL]     return this; [EOL] } <line_num>: 564,571
public FieldVector<T> mapInv() throws MathArithmeticException { [EOL]     T[] out = MathArrays.buildArray(field, data.length); [EOL]     final T one = field.getOne(); [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         try { [EOL]             out[i] = one.divide(data[i]); [EOL]         } catch (final MathArithmeticException e) { [EOL]             throw new MathArithmeticException(LocalizedFormats.INDEX, i); [EOL]         } [EOL]     } [EOL]     return new ArrayFieldVector<T>(field, out, false); [EOL] } <line_num>: 574,585
public FieldVector<T> mapInvToSelf() throws MathArithmeticException { [EOL]     final T one = field.getOne(); [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         try { [EOL]             data[i] = one.divide(data[i]); [EOL]         } catch (final MathArithmeticException e) { [EOL]             throw new MathArithmeticException(LocalizedFormats.INDEX, i); [EOL]         } [EOL]     } [EOL]     return this; [EOL] } <line_num>: 588,598
public FieldVector<T> ebeMultiply(FieldVector<T> v) throws DimensionMismatchException { [EOL]     try { [EOL]         return ebeMultiply((ArrayFieldVector<T>) v); [EOL]     } catch (ClassCastException cce) { [EOL]         checkVectorDimensions(v); [EOL]         T[] out = MathArrays.buildArray(field, data.length); [EOL]         for (int i = 0; i < data.length; i++) { [EOL]             out[i] = data[i].multiply(v.getEntry(i)); [EOL]         } [EOL]         return new ArrayFieldVector<T>(field, out, false); [EOL]     } [EOL] } <line_num>: 601,613
public ArrayFieldVector<T> ebeMultiply(ArrayFieldVector<T> v) throws DimensionMismatchException { [EOL]     checkVectorDimensions(v.data.length); [EOL]     T[] out = MathArrays.buildArray(field, data.length); [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         out[i] = data[i].multiply(v.data[i]); [EOL]     } [EOL]     return new ArrayFieldVector<T>(field, out, false); [EOL] } <line_num>: 622,630
public FieldVector<T> ebeDivide(FieldVector<T> v) throws DimensionMismatchException, MathArithmeticException { [EOL]     try { [EOL]         return ebeDivide((ArrayFieldVector<T>) v); [EOL]     } catch (ClassCastException cce) { [EOL]         checkVectorDimensions(v); [EOL]         T[] out = MathArrays.buildArray(field, data.length); [EOL]         for (int i = 0; i < data.length; i++) { [EOL]             try { [EOL]                 out[i] = data[i].divide(v.getEntry(i)); [EOL]             } catch (final MathArithmeticException e) { [EOL]                 throw new MathArithmeticException(LocalizedFormats.INDEX, i); [EOL]             } [EOL]         } [EOL]         return new ArrayFieldVector<T>(field, out, false); [EOL]     } [EOL] } <line_num>: 633,649
public ArrayFieldVector<T> ebeDivide(ArrayFieldVector<T> v) throws DimensionMismatchException, MathArithmeticException { [EOL]     checkVectorDimensions(v.data.length); [EOL]     T[] out = MathArrays.buildArray(field, data.length); [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         try { [EOL]             out[i] = data[i].divide(v.data[i]); [EOL]         } catch (final MathArithmeticException e) { [EOL]             throw new MathArithmeticException(LocalizedFormats.INDEX, i); [EOL]         } [EOL]     } [EOL]     return new ArrayFieldVector<T>(field, out, false); [EOL] } <line_num>: 659,671
public T[] getData() { [EOL]     return data.clone(); [EOL] } <line_num>: 674,676
public T[] getDataRef() { [EOL]     return data; [EOL] } <line_num>: 683,685
public T dotProduct(FieldVector<T> v) throws DimensionMismatchException { [EOL]     try { [EOL]         return dotProduct((ArrayFieldVector<T>) v); [EOL]     } catch (ClassCastException cce) { [EOL]         checkVectorDimensions(v); [EOL]         T dot = field.getZero(); [EOL]         for (int i = 0; i < data.length; i++) { [EOL]             dot = dot.add(data[i].multiply(v.getEntry(i))); [EOL]         } [EOL]         return dot; [EOL]     } [EOL] } <line_num>: 688,700
public T dotProduct(ArrayFieldVector<T> v) throws DimensionMismatchException { [EOL]     checkVectorDimensions(v.data.length); [EOL]     T dot = field.getZero(); [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         dot = dot.add(data[i].multiply(v.data[i])); [EOL]     } [EOL]     return dot; [EOL] } <line_num>: 709,717
public FieldVector<T> projection(FieldVector<T> v) throws DimensionMismatchException, MathArithmeticException { [EOL]     return v.mapMultiply(dotProduct(v).divide(v.dotProduct(v))); [EOL] } <line_num>: 720,723
public ArrayFieldVector<T> projection(ArrayFieldVector<T> v) throws DimensionMismatchException, MathArithmeticException { [EOL]     return (ArrayFieldVector<T>) v.mapMultiply(dotProduct(v).divide(v.dotProduct(v))); [EOL] } <line_num>: 732,735
public FieldMatrix<T> outerProduct(FieldVector<T> v) { [EOL]     try { [EOL]         return outerProduct((ArrayFieldVector<T>) v); [EOL]     } catch (ClassCastException cce) { [EOL]         final int m = data.length; [EOL]         final int n = v.getDimension(); [EOL]         final FieldMatrix<T> out = new Array2DRowFieldMatrix<T>(field, m, n); [EOL]         for (int i = 0; i < m; i++) { [EOL]             for (int j = 0; j < n; j++) { [EOL]                 out.setEntry(i, j, data[i].multiply(v.getEntry(j))); [EOL]             } [EOL]         } [EOL]         return out; [EOL]     } [EOL] } <line_num>: 738,752
public FieldMatrix<T> outerProduct(ArrayFieldVector<T> v) { [EOL]     final int m = data.length; [EOL]     final int n = v.data.length; [EOL]     final FieldMatrix<T> out = new Array2DRowFieldMatrix<T>(field, m, n); [EOL]     for (int i = 0; i < m; i++) { [EOL]         for (int j = 0; j < n; j++) { [EOL]             out.setEntry(i, j, data[i].multiply(v.data[j])); [EOL]         } [EOL]     } [EOL]     return out; [EOL] } <line_num>: 759,769
public T getEntry(int index) { [EOL]     return data[index]; [EOL] } <line_num>: 772,774
public int getDimension() { [EOL]     return data.length; [EOL] } <line_num>: 777,779
public FieldVector<T> append(FieldVector<T> v) { [EOL]     try { [EOL]         return append((ArrayFieldVector<T>) v); [EOL]     } catch (ClassCastException cce) { [EOL]         return new ArrayFieldVector<T>(this, new ArrayFieldVector<T>(v)); [EOL]     } [EOL] } <line_num>: 782,788
public ArrayFieldVector<T> append(ArrayFieldVector<T> v) { [EOL]     return new ArrayFieldVector<T>(this, v); [EOL] } <line_num>: 795,797
public FieldVector<T> append(T in) { [EOL]     final T[] out = MathArrays.buildArray(field, data.length + 1); [EOL]     System.arraycopy(data, 0, out, 0, data.length); [EOL]     out[data.length] = in; [EOL]     return new ArrayFieldVector<T>(field, out, false); [EOL] } <line_num>: 800,805
public FieldVector<T> getSubVector(int index, int n) throws OutOfRangeException, NotPositiveException { [EOL]     if (n < 0) { [EOL]         throw new NotPositiveException(LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n); [EOL]     } [EOL]     ArrayFieldVector<T> out = new ArrayFieldVector<T>(field, n); [EOL]     try { [EOL]         System.arraycopy(data, index, out.data, 0, n); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         checkIndex(index); [EOL]         checkIndex(index + n - 1); [EOL]     } [EOL]     return out; [EOL] } <line_num>: 808,821
public void setEntry(int index, T value) { [EOL]     try { [EOL]         data[index] = value; [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         checkIndex(index); [EOL]     } [EOL] } <line_num>: 824,830
public void setSubVector(int index, FieldVector<T> v) throws OutOfRangeException { [EOL]     try { [EOL]         try { [EOL]             set(index, (ArrayFieldVector<T>) v); [EOL]         } catch (ClassCastException cce) { [EOL]             for (int i = index; i < index + v.getDimension(); ++i) { [EOL]                 data[i] = v.getEntry(i - index); [EOL]             } [EOL]         } [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         checkIndex(index); [EOL]         checkIndex(index + v.getDimension() - 1); [EOL]     } [EOL] } <line_num>: 833,846
public void set(int index, ArrayFieldVector<T> v) throws OutOfRangeException { [EOL]     try { [EOL]         System.arraycopy(v.data, 0, data, index, v.data.length); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]         checkIndex(index); [EOL]         checkIndex(index + v.data.length - 1); [EOL]     } [EOL] } <line_num>: 855,862
public void set(T value) { [EOL]     Arrays.fill(data, value); [EOL] } <line_num>: 865,867
public T[] toArray() { [EOL]     return data.clone(); [EOL] } <line_num>: 870,872
protected void checkVectorDimensions(FieldVector<T> v) throws DimensionMismatchException { [EOL]     checkVectorDimensions(v.getDimension()); [EOL] } <line_num>: 880,883
protected void checkVectorDimensions(int n) throws DimensionMismatchException { [EOL]     if (data.length != n) { [EOL]         throw new DimensionMismatchException(data.length, n); [EOL]     } [EOL] } <line_num>: 892,897
@Override [EOL] public boolean equals(Object other) { [EOL]     if (this == other) { [EOL]         return true; [EOL]     } [EOL]     if (other == null) { [EOL]         return false; [EOL]     } [EOL]     try { [EOL]         @SuppressWarnings("unchecked") [EOL]         FieldVector<T> rhs = (FieldVector<T>) other; [EOL]         if (data.length != rhs.getDimension()) { [EOL]             return false; [EOL]         } [EOL]         for (int i = 0; i < data.length; ++i) { [EOL]             if (!data[i].equals(rhs.getEntry(i))) { [EOL]                 return false; [EOL]             } [EOL]         } [EOL]         return true; [EOL]     } catch (ClassCastException ex) { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 906,932
@Override [EOL] public int hashCode() { [EOL]     int h = 3542; [EOL]     for (final T a : data) { [EOL]         h = h ^ a.hashCode(); [EOL]     } [EOL]     return h; [EOL] } <line_num>: 939,946
private void checkIndex(final int index) throws OutOfRangeException { [EOL]     if (index < 0 || index >= getDimension()) { [EOL]         throw new OutOfRangeException(LocalizedFormats.INDEX, index, 0, getDimension() - 1); [EOL]     } [EOL] } <line_num>: 954,959
