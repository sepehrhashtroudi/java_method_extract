public DfpField(final int decimalDigits) { [EOL]     this(decimalDigits, true); [EOL] } <line_num>: 176,178
private DfpField(final int decimalDigits, final boolean computeConstants) { [EOL]     this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4; [EOL]     this.rMode = RoundingMode.ROUND_HALF_EVEN; [EOL]     this.ieeeFlags = 0; [EOL]     this.zero = new Dfp(this, 0); [EOL]     this.one = new Dfp(this, 1); [EOL]     this.two = new Dfp(this, 2); [EOL]     if (computeConstants) { [EOL]         synchronized (DfpField.class) { [EOL]             computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits)); [EOL]             sqr2 = new Dfp(this, sqr2String); [EOL]             sqr2Split = split(sqr2String); [EOL]             sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString); [EOL]             sqr3 = new Dfp(this, sqr3String); [EOL]             sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString); [EOL]             pi = new Dfp(this, piString); [EOL]             piSplit = split(piString); [EOL]             e = new Dfp(this, eString); [EOL]             eSplit = split(eString); [EOL]             ln2 = new Dfp(this, ln2String); [EOL]             ln2Split = split(ln2String); [EOL]             ln5 = new Dfp(this, ln5String); [EOL]             ln5Split = split(ln5String); [EOL]             ln10 = new Dfp(this, ln10String); [EOL]         } [EOL]     } else { [EOL]         sqr2 = null; [EOL]         sqr2Split = null; [EOL]         sqr2Reciprocal = null; [EOL]         sqr3 = null; [EOL]         sqr3Reciprocal = null; [EOL]         pi = null; [EOL]         piSplit = null; [EOL]         e = null; [EOL]         eSplit = null; [EOL]         ln2 = null; [EOL]         ln2Split = null; [EOL]         ln5 = null; [EOL]         ln5Split = null; [EOL]         ln10 = null; [EOL]     } [EOL] } <line_num>: 191,245
public int getRadixDigits() { [EOL]     return radixDigits; [EOL] } <line_num>: 250,252
public void setRoundingMode(final RoundingMode mode) { [EOL]     rMode = mode; [EOL] } <line_num>: 261,263
public RoundingMode getRoundingMode() { [EOL]     return rMode; [EOL] } <line_num>: 268,270
public int getIEEEFlags() { [EOL]     return ieeeFlags; [EOL] } <line_num>: 283,285
public void clearIEEEFlags() { [EOL]     ieeeFlags = 0; [EOL] } <line_num>: 297,299
public void setIEEEFlags(final int flags) { [EOL]     ieeeFlags = flags & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT); [EOL] } <line_num>: 312,314
public void setIEEEFlagsBits(final int bits) { [EOL]     ieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT); [EOL] } <line_num>: 330,332
public Dfp newDfp() { [EOL]     return new Dfp(this); [EOL] } <line_num>: 337,339
public Dfp newDfp(final byte x) { [EOL]     return new Dfp(this, x); [EOL] } <line_num>: 345,347
public Dfp newDfp(final int x) { [EOL]     return new Dfp(this, x); [EOL] } <line_num>: 353,355
public Dfp newDfp(final long x) { [EOL]     return new Dfp(this, x); [EOL] } <line_num>: 361,363
public Dfp newDfp(final double x) { [EOL]     return new Dfp(this, x); [EOL] } <line_num>: 369,371
public Dfp newDfp(Dfp d) { [EOL]     return new Dfp(d); [EOL] } <line_num>: 377,379
public Dfp newDfp(final String s) { [EOL]     return new Dfp(this, s); [EOL] } <line_num>: 385,387
public Dfp newDfp(final byte sign, final byte nans) { [EOL]     return new Dfp(this, sign, nans); [EOL] } <line_num>: 395,397
public Dfp getZero() { [EOL]     return zero; [EOL] } <line_num>: 402,404
public Dfp getOne() { [EOL]     return one; [EOL] } <line_num>: 409,411
public Class<? extends FieldElement<Dfp>> getRuntimeClass() { [EOL]     return Dfp.class; [EOL] } <line_num>: 414,416
public Dfp getTwo() { [EOL]     return two; [EOL] } <line_num>: 421,423
public Dfp getSqr2() { [EOL]     return sqr2; [EOL] } <line_num>: 428,430
public Dfp[] getSqr2Split() { [EOL]     return sqr2Split.clone(); [EOL] } <line_num>: 435,437
public Dfp getSqr2Reciprocal() { [EOL]     return sqr2Reciprocal; [EOL] } <line_num>: 442,444
public Dfp getSqr3() { [EOL]     return sqr3; [EOL] } <line_num>: 449,451
public Dfp getSqr3Reciprocal() { [EOL]     return sqr3Reciprocal; [EOL] } <line_num>: 456,458
public Dfp getPi() { [EOL]     return pi; [EOL] } <line_num>: 463,465
public Dfp[] getPiSplit() { [EOL]     return piSplit.clone(); [EOL] } <line_num>: 470,472
public Dfp getE() { [EOL]     return e; [EOL] } <line_num>: 477,479
public Dfp[] getESplit() { [EOL]     return eSplit.clone(); [EOL] } <line_num>: 484,486
public Dfp getLn2() { [EOL]     return ln2; [EOL] } <line_num>: 491,493
public Dfp[] getLn2Split() { [EOL]     return ln2Split.clone(); [EOL] } <line_num>: 498,500
public Dfp getLn5() { [EOL]     return ln5; [EOL] } <line_num>: 505,507
public Dfp[] getLn5Split() { [EOL]     return ln5Split.clone(); [EOL] } <line_num>: 512,514
public Dfp getLn10() { [EOL]     return ln10; [EOL] } <line_num>: 519,521
private Dfp[] split(final String a) { [EOL]     Dfp[] result = new Dfp[2]; [EOL]     boolean leading = true; [EOL]     int sp = 0; [EOL]     int sig = 0; [EOL]     char[] buf = new char[a.length()]; [EOL]     for (int i = 0; i < buf.length; i++) { [EOL]         buf[i] = a.charAt(i); [EOL]         if (buf[i] >= '1' && buf[i] <= '9') { [EOL]             leading = false; [EOL]         } [EOL]         if (buf[i] == '.') { [EOL]             sig += (400 - sig) % 4; [EOL]             leading = false; [EOL]         } [EOL]         if (sig == (radixDigits / 2) * 4) { [EOL]             sp = i; [EOL]             break; [EOL]         } [EOL]         if (buf[i] >= '0' && buf[i] <= '9' && !leading) { [EOL]             sig++; [EOL]         } [EOL]     } [EOL]     result[0] = new Dfp(this, new String(buf, 0, sp)); [EOL]     for (int i = 0; i < buf.length; i++) { [EOL]         buf[i] = a.charAt(i); [EOL]         if (buf[i] >= '0' && buf[i] <= '9' && i < sp) { [EOL]             buf[i] = '0'; [EOL]         } [EOL]     } [EOL]     result[1] = new Dfp(this, new String(buf)); [EOL]     return result; [EOL] } <line_num>: 529,572
private static void computeStringConstants(final int highPrecisionDecimalDigits) { [EOL]     if (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) { [EOL]         final DfpField highPrecisionField = new DfpField(highPrecisionDecimalDigits, false); [EOL]         final Dfp highPrecisionOne = new Dfp(highPrecisionField, 1); [EOL]         final Dfp highPrecisionTwo = new Dfp(highPrecisionField, 2); [EOL]         final Dfp highPrecisionThree = new Dfp(highPrecisionField, 3); [EOL]         final Dfp highPrecisionSqr2 = highPrecisionTwo.sqrt(); [EOL]         sqr2String = highPrecisionSqr2.toString(); [EOL]         sqr2ReciprocalString = highPrecisionOne.divide(highPrecisionSqr2).toString(); [EOL]         final Dfp highPrecisionSqr3 = highPrecisionThree.sqrt(); [EOL]         sqr3String = highPrecisionSqr3.toString(); [EOL]         sqr3ReciprocalString = highPrecisionOne.divide(highPrecisionSqr3).toString(); [EOL]         piString = computePi(highPrecisionOne, highPrecisionTwo, highPrecisionThree).toString(); [EOL]         eString = computeExp(highPrecisionOne, highPrecisionOne).toString(); [EOL]         ln2String = computeLn(highPrecisionTwo, highPrecisionOne, highPrecisionTwo).toString(); [EOL]         ln5String = computeLn(new Dfp(highPrecisionField, 5), highPrecisionOne, highPrecisionTwo).toString(); [EOL]         ln10String = computeLn(new Dfp(highPrecisionField, 10), highPrecisionOne, highPrecisionTwo).toString(); [EOL]     } [EOL] } <line_num>: 577,601
private static Dfp computePi(final Dfp one, final Dfp two, final Dfp three) { [EOL]     Dfp sqrt2 = two.sqrt(); [EOL]     Dfp yk = sqrt2.subtract(one); [EOL]     Dfp four = two.add(two); [EOL]     Dfp two2kp3 = two; [EOL]     Dfp ak = two.multiply(three.subtract(two.multiply(sqrt2))); [EOL]     for (int i = 1; i < 20; i++) { [EOL]         final Dfp ykM1 = yk; [EOL]         final Dfp y2 = yk.multiply(yk); [EOL]         final Dfp oneMinusY4 = one.subtract(y2.multiply(y2)); [EOL]         final Dfp s = oneMinusY4.sqrt().sqrt(); [EOL]         yk = one.subtract(s).divide(one.add(s)); [EOL]         two2kp3 = two2kp3.multiply(four); [EOL]         final Dfp p = one.add(yk); [EOL]         final Dfp p2 = p.multiply(p); [EOL]         ak = ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk)))); [EOL]         if (yk.equals(ykM1)) { [EOL]             break; [EOL]         } [EOL]     } [EOL]     return one.divide(ak); [EOL] } <line_num>: 609,644
public static Dfp computeExp(final Dfp a, final Dfp one) { [EOL]     Dfp y = new Dfp(one); [EOL]     Dfp py = new Dfp(one); [EOL]     Dfp f = new Dfp(one); [EOL]     Dfp fi = new Dfp(one); [EOL]     Dfp x = new Dfp(one); [EOL]     for (int i = 0; i < 10000; i++) { [EOL]         x = x.multiply(a); [EOL]         y = y.add(x.divide(f)); [EOL]         fi = fi.add(one); [EOL]         f = f.multiply(fi); [EOL]         if (y.equals(py)) { [EOL]             break; [EOL]         } [EOL]         py = new Dfp(y); [EOL]     } [EOL]     return y; [EOL] } <line_num>: 651,672
public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two) { [EOL]     int den = 1; [EOL]     Dfp x = a.add(new Dfp(a.getField(), -1)).divide(a.add(one)); [EOL]     Dfp y = new Dfp(x); [EOL]     Dfp num = new Dfp(x); [EOL]     Dfp py = new Dfp(y); [EOL]     for (int i = 0; i < 10000; i++) { [EOL]         num = num.multiply(x); [EOL]         num = num.multiply(x); [EOL]         den = den + 2; [EOL]         Dfp t = num.divide(den); [EOL]         y = y.add(t); [EOL]         if (y.equals(py)) { [EOL]             break; [EOL]         } [EOL]         py = new Dfp(y); [EOL]     } [EOL]     return y.multiply(two); [EOL] } <line_num>: 734,756
