public GaussianFitter(DifferentiableMultivariateVectorOptimizer optimizer) { [EOL]     super(optimizer); [EOL] } <line_num>: 67,69
public ParameterGuesser(WeightedObservedPoint[] observations) { [EOL]     if (observations == null) { [EOL]         throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY); [EOL]     } [EOL]     if (observations.length < 3) { [EOL]         throw new NumberIsTooSmallException(observations.length, 3, true); [EOL]     } [EOL]     final WeightedObservedPoint[] sorted = sortObservations(observations); [EOL]     final double[] params = basicGuess(sorted); [EOL]     norm = params[0]; [EOL]     mean = params[1]; [EOL]     sigma = params[2]; [EOL] } <line_num>: 148,162
@Override [EOL] public double value(double x, double... p) { [EOL]     double v = Double.POSITIVE_INFINITY; [EOL]     try { [EOL]         v = super.value(x, p); [EOL]     } catch (NotStrictlyPositiveException e) { [EOL]     } [EOL]     return v; [EOL] } <line_num>: 86,95
@Override [EOL] public double[] gradient(double x, double... p) { [EOL]     double[] v = { Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY }; [EOL]     try { [EOL]         v = super.gradient(x, p); [EOL]     } catch (NotStrictlyPositiveException e) { [EOL]     } [EOL]     return v; [EOL] } <line_num>: 97,108
public double[] fit(double[] initialGuess) { [EOL]     final Gaussian.Parametric f = new Gaussian.Parametric() { [EOL]  [EOL]         @Override [EOL]         public double value(double x, double... p) { [EOL]             double v = Double.POSITIVE_INFINITY; [EOL]             try { [EOL]                 v = super.value(x, p); [EOL]             } catch (NotStrictlyPositiveException e) { [EOL]             } [EOL]             return v; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public double[] gradient(double x, double... p) { [EOL]             double[] v = { Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY }; [EOL]             try { [EOL]                 v = super.gradient(x, p); [EOL]             } catch (NotStrictlyPositiveException e) { [EOL]             } [EOL]             return v; [EOL]         } [EOL]     }; [EOL]     return fit(f, initialGuess); [EOL] } <line_num>: 84,112
public double[] fit() { [EOL]     final double[] guess = (new ParameterGuesser(getObservations())).guess(); [EOL]     return fit(guess); [EOL] } <line_num>: 120,123
public double[] guess() { [EOL]     return new double[] { norm, mean, sigma }; [EOL] } <line_num>: 174,176
public int compare(WeightedObservedPoint p1, WeightedObservedPoint p2) { [EOL]     if (p1 == null && p2 == null) { [EOL]         return 0; [EOL]     } [EOL]     if (p1 == null) { [EOL]         return -1; [EOL]     } [EOL]     if (p2 == null) { [EOL]         return 1; [EOL]     } [EOL]     if (p1.getX() < p2.getX()) { [EOL]         return -1; [EOL]     } [EOL]     if (p1.getX() > p2.getX()) { [EOL]         return 1; [EOL]     } [EOL]     if (p1.getY() < p2.getY()) { [EOL]         return -1; [EOL]     } [EOL]     if (p1.getY() > p2.getY()) { [EOL]         return 1; [EOL]     } [EOL]     if (p1.getWeight() < p2.getWeight()) { [EOL]         return -1; [EOL]     } [EOL]     if (p1.getWeight() > p2.getWeight()) { [EOL]         return 1; [EOL]     } [EOL]     return 0; [EOL] } <line_num>: 188,218
private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) { [EOL]     final WeightedObservedPoint[] observations = unsorted.clone(); [EOL]     final Comparator<WeightedObservedPoint> cmp = new Comparator<WeightedObservedPoint>() { [EOL]  [EOL]         public int compare(WeightedObservedPoint p1, WeightedObservedPoint p2) { [EOL]             if (p1 == null && p2 == null) { [EOL]                 return 0; [EOL]             } [EOL]             if (p1 == null) { [EOL]                 return -1; [EOL]             } [EOL]             if (p2 == null) { [EOL]                 return 1; [EOL]             } [EOL]             if (p1.getX() < p2.getX()) { [EOL]                 return -1; [EOL]             } [EOL]             if (p1.getX() > p2.getX()) { [EOL]                 return 1; [EOL]             } [EOL]             if (p1.getY() < p2.getY()) { [EOL]                 return -1; [EOL]             } [EOL]             if (p1.getY() > p2.getY()) { [EOL]                 return 1; [EOL]             } [EOL]             if (p1.getWeight() < p2.getWeight()) { [EOL]                 return -1; [EOL]             } [EOL]             if (p1.getWeight() > p2.getWeight()) { [EOL]                 return 1; [EOL]             } [EOL]             return 0; [EOL]         } [EOL]     }; [EOL]     Arrays.sort(observations, cmp); [EOL]     return observations; [EOL] } <line_num>: 184,223
private double[] basicGuess(WeightedObservedPoint[] points) { [EOL]     final int maxYIdx = findMaxY(points); [EOL]     final double n = points[maxYIdx].getY(); [EOL]     final double m = points[maxYIdx].getX(); [EOL]     double fwhmApprox; [EOL]     try { [EOL]         final double halfY = n + ((m - n) / 2); [EOL]         final double fwhmX1 = interpolateXAtY(points, maxYIdx, -1, halfY); [EOL]         final double fwhmX2 = interpolateXAtY(points, maxYIdx, 1, halfY); [EOL]         fwhmApprox = fwhmX2 - fwhmX1; [EOL]     } catch (OutOfRangeException e) { [EOL]         fwhmApprox = points[points.length - 1].getX() - points[0].getX(); [EOL]     } [EOL]     final double s = fwhmApprox / (2 * FastMath.sqrt(2 * FastMath.log(2))); [EOL]     return new double[] { n, m, s }; [EOL] } <line_num>: 232,250
private int findMaxY(WeightedObservedPoint[] points) { [EOL]     int maxYIdx = 0; [EOL]     for (int i = 1; i < points.length; i++) { [EOL]         if (points[i].getY() > points[maxYIdx].getY()) { [EOL]             maxYIdx = i; [EOL]         } [EOL]     } [EOL]     return maxYIdx; [EOL] } <line_num>: 258,266
private double interpolateXAtY(WeightedObservedPoint[] points, int startIdx, int idxStep, double y) throws OutOfRangeException { [EOL]     if (idxStep == 0) { [EOL]         throw new ZeroException(); [EOL]     } [EOL]     final WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y); [EOL]     final WeightedObservedPoint p1 = twoPoints[0]; [EOL]     final WeightedObservedPoint p2 = twoPoints[1]; [EOL]     if (p1.getY() == y) { [EOL]         return p1.getX(); [EOL]     } [EOL]     if (p2.getY() == y) { [EOL]         return p2.getX(); [EOL]     } [EOL]     return p1.getX() + (((y - p1.getY()) * (p2.getX() - p1.getX())) / (p2.getY() - p1.getY())); [EOL] } <line_num>: 282,302
private WeightedObservedPoint[] getInterpolationPointsForY(WeightedObservedPoint[] points, int startIdx, int idxStep, double y) throws OutOfRangeException { [EOL]     if (idxStep == 0) { [EOL]         throw new ZeroException(); [EOL]     } [EOL]     for (int i = startIdx; idxStep < 0 ? i + idxStep >= 0 : i + idxStep < points.length; i += idxStep) { [EOL]         final WeightedObservedPoint p1 = points[i]; [EOL]         final WeightedObservedPoint p2 = points[i + idxStep]; [EOL]         if (isBetween(y, p1.getY(), p2.getY())) { [EOL]             if (idxStep < 0) { [EOL]                 return new WeightedObservedPoint[] { p2, p1 }; [EOL]             } else { [EOL]                 return new WeightedObservedPoint[] { p1, p2 }; [EOL]             } [EOL]         } [EOL]     } [EOL]     throw new OutOfRangeException(y, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY); [EOL] } <line_num>: 319,347
private boolean isBetween(double value, double boundary1, double boundary2) { [EOL]     return (value >= boundary1 && value <= boundary2) || (value >= boundary2 && value <= boundary1); [EOL] } <line_num>: 359,364
