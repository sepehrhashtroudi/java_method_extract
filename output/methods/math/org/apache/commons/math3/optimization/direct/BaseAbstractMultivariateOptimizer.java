@Deprecated [EOL] protected BaseAbstractMultivariateOptimizer() { [EOL]     this(new SimpleValueChecker()); [EOL] } <line_num>: 70,73
protected BaseAbstractMultivariateOptimizer(ConvergenceChecker<PointValuePair> checker) { [EOL]     this.checker = checker; [EOL] } <line_num>: 77,79
public int getMaxEvaluations() { [EOL]     return evaluations.getMaximalCount(); [EOL] } <line_num>: 82,84
public int getEvaluations() { [EOL]     return evaluations.getCount(); [EOL] } <line_num>: 87,89
public ConvergenceChecker<PointValuePair> getConvergenceChecker() { [EOL]     return checker; [EOL] } <line_num>: 92,94
protected double computeObjectiveValue(double[] point) { [EOL]     try { [EOL]         evaluations.incrementCount(); [EOL]     } catch (MaxCountExceededException e) { [EOL]         throw new TooManyEvaluationsException(e.getMax()); [EOL]     } [EOL]     return function.value(point); [EOL] } <line_num>: 104,111
@Deprecated [EOL] public PointValuePair optimize(int maxEval, FUNC f, GoalType goalType, double[] startPoint) { [EOL]     return optimizeInternal(maxEval, f, goalType, new InitialGuess(startPoint)); [EOL] } <line_num>: 120,124
public PointValuePair optimize(int maxEval, FUNC f, GoalType goalType, OptimizationData... optData) { [EOL]     return optimizeInternal(maxEval, f, goalType, optData); [EOL] } <line_num>: 141,146
@Deprecated [EOL] protected PointValuePair optimizeInternal(int maxEval, FUNC f, GoalType goalType, double[] startPoint) { [EOL]     return optimizeInternal(maxEval, f, goalType, new InitialGuess(startPoint)); [EOL] } <line_num>: 168,172
protected PointValuePair optimizeInternal(int maxEval, FUNC f, GoalType goalType, OptimizationData... optData) throws TooManyEvaluationsException { [EOL]     evaluations.setMaximalCount(maxEval); [EOL]     evaluations.resetCount(); [EOL]     function = f; [EOL]     goal = goalType; [EOL]     parseOptimizationData(optData); [EOL]     checkParameters(); [EOL]     return doOptimize(); [EOL] } <line_num>: 191,207
private void parseOptimizationData(OptimizationData... optData) { [EOL]     for (OptimizationData data : optData) { [EOL]         if (data instanceof InitialGuess) { [EOL]             start = ((InitialGuess) data).getInitialGuess(); [EOL]             continue; [EOL]         } [EOL]         if (data instanceof SimpleBounds) { [EOL]             final SimpleBounds bounds = (SimpleBounds) data; [EOL]             lowerBound = bounds.getLower(); [EOL]             upperBound = bounds.getUpper(); [EOL]             continue; [EOL]         } [EOL]     } [EOL] } <line_num>: 219,234
public GoalType getGoalType() { [EOL]     return goal; [EOL] } <line_num>: 239,241
public double[] getStartPoint() { [EOL]     return start == null ? null : start.clone(); [EOL] } <line_num>: 246,248
public double[] getLowerBound() { [EOL]     return lowerBound == null ? null : lowerBound.clone(); [EOL] } <line_num>: 253,255
public double[] getUpperBound() { [EOL]     return upperBound == null ? null : upperBound.clone(); [EOL] } <line_num>: 260,262
protected abstract PointValuePair doOptimize(); <line_num>: 270,270
private void checkParameters() { [EOL]     if (start != null) { [EOL]         final int dim = start.length; [EOL]         if (lowerBound != null) { [EOL]             if (lowerBound.length != dim) { [EOL]                 throw new DimensionMismatchException(lowerBound.length, dim); [EOL]             } [EOL]             for (int i = 0; i < dim; i++) { [EOL]                 final double v = start[i]; [EOL]                 final double lo = lowerBound[i]; [EOL]                 if (v < lo) { [EOL]                     throw new NumberIsTooSmallException(v, lo, true); [EOL]                 } [EOL]             } [EOL]         } [EOL]         if (upperBound != null) { [EOL]             if (upperBound.length != dim) { [EOL]                 throw new DimensionMismatchException(upperBound.length, dim); [EOL]             } [EOL]             for (int i = 0; i < dim; i++) { [EOL]                 final double v = start[i]; [EOL]                 final double hi = upperBound[i]; [EOL]                 if (v > hi) { [EOL]                     throw new NumberIsTooLargeException(v, hi, true); [EOL]                 } [EOL]             } [EOL]         } [EOL]         if (lowerBound == null) { [EOL]             lowerBound = new double[dim]; [EOL]             for (int i = 0; i < dim; i++) { [EOL]                 lowerBound[i] = Double.NEGATIVE_INFINITY; [EOL]             } [EOL]         } [EOL]         if (upperBound == null) { [EOL]             upperBound = new double[dim]; [EOL]             for (int i = 0; i < dim; i++) { [EOL]                 upperBound[i] = Double.POSITIVE_INFINITY; [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 275,318
