@Deprecated [EOL] protected AbstractLeastSquaresOptimizer() { [EOL] } <line_num>: 127,128
protected AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair> checker) { [EOL]     super(checker); [EOL] } <line_num>: 133,135
public int getJacobianEvaluations() { [EOL]     return jacobianEvaluations; [EOL] } <line_num>: 140,142
@Deprecated [EOL] protected void updateJacobian() { [EOL]     final RealMatrix weightedJacobian = computeWeightedJacobian(point); [EOL]     weightedResidualJacobian = weightedJacobian.scalarMultiply(-1).getData(); [EOL] } <line_num>: 152,156
protected RealMatrix computeWeightedJacobian(double[] params) { [EOL]     ++jacobianEvaluations; [EOL]     final DerivativeStructure[] dsPoint = new DerivativeStructure[params.length]; [EOL]     final int nC = params.length; [EOL]     for (int i = 0; i < nC; ++i) { [EOL]         dsPoint[i] = new DerivativeStructure(nC, 1, i, params[i]); [EOL]     } [EOL]     final DerivativeStructure[] dsValue = jF.value(dsPoint); [EOL]     final int nR = getTarget().length; [EOL]     if (dsValue.length != nR) { [EOL]         throw new DimensionMismatchException(dsValue.length, nR); [EOL]     } [EOL]     final double[][] jacobianData = new double[nR][nC]; [EOL]     for (int i = 0; i < nR; ++i) { [EOL]         int[] orders = new int[nC]; [EOL]         for (int j = 0; j < nC; ++j) { [EOL]             orders[j] = 1; [EOL]             jacobianData[i][j] = dsValue[i].getPartialDerivative(orders); [EOL]             orders[j] = 0; [EOL]         } [EOL]     } [EOL]     return weightMatrixSqrt.multiply(MatrixUtils.createRealMatrix(jacobianData)); [EOL] } <line_num>: 167,191
@Deprecated [EOL] protected void updateResidualsAndCost() { [EOL]     objective = computeObjectiveValue(point); [EOL]     final double[] res = computeResiduals(objective); [EOL]     cost = computeCost(res); [EOL]     final ArrayRealVector residuals = new ArrayRealVector(res); [EOL]     weightedResiduals = weightMatrixSqrt.operate(residuals).toArray(); [EOL] } <line_num>: 203,214
protected double computeCost(double[] residuals) { [EOL]     final ArrayRealVector r = new ArrayRealVector(residuals); [EOL]     return FastMath.sqrt(r.dotProduct(getWeight().operate(r))); [EOL] } <line_num>: 224,227
public double getRMS() { [EOL]     return FastMath.sqrt(getChiSquare() / rows); [EOL] } <line_num>: 239,241
public double getChiSquare() { [EOL]     return cost * cost; [EOL] } <line_num>: 249,251
public RealMatrix getWeightSquareRoot() { [EOL]     return weightMatrixSqrt.copy(); [EOL] } <line_num>: 259,261
protected void setCost(double cost) { [EOL]     this.cost = cost; [EOL] } <line_num>: 269,271
@Deprecated [EOL] public double[][] getCovariances() { [EOL]     return getCovariances(DEFAULT_SINGULARITY_THRESHOLD); [EOL] } <line_num>: 283,286
@Deprecated [EOL] public double[][] getCovariances(double threshold) { [EOL]     return computeCovariances(point, threshold); [EOL] } <line_num>: 305,308
public double[][] computeCovariances(double[] params, double threshold) { [EOL]     final RealMatrix j = computeWeightedJacobian(params); [EOL]     final RealMatrix jTj = j.transpose().multiply(j); [EOL]     final DecompositionSolver solver = new QRDecomposition(jTj, threshold).getSolver(); [EOL]     return solver.getInverse().getData(); [EOL] } <line_num>: 327,339
@Deprecated [EOL] public double[] guessParametersErrors() { [EOL]     if (rows <= cols) { [EOL]         throw new NumberIsTooSmallException(LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols, false); [EOL]     } [EOL]     double[] errors = new double[cols]; [EOL]     final double c = FastMath.sqrt(getChiSquare() / (rows - cols)); [EOL]     double[][] covar = computeCovariances(point, 1e-14); [EOL]     for (int i = 0; i < errors.length; ++i) { [EOL]         errors[i] = FastMath.sqrt(covar[i][i]) * c; [EOL]     } [EOL]     return errors; [EOL] } <line_num>: 370,383
public double[] computeSigma(double[] params, double covarianceSingularityThreshold) { [EOL]     final int nC = params.length; [EOL]     final double[] sig = new double[nC]; [EOL]     final double[][] cov = computeCovariances(params, covarianceSingularityThreshold); [EOL]     for (int i = 0; i < nC; ++i) { [EOL]         sig[i] = FastMath.sqrt(cov[i][i]); [EOL]     } [EOL]     return sig; [EOL] } <line_num>: 400,409
@Override [EOL] @Deprecated [EOL] public PointVectorValuePair optimize(int maxEval, final DifferentiableMultivariateVectorFunction f, final double[] target, final double[] weights, final double[] startPoint) { [EOL]     return optimizeInternal(maxEval, FunctionUtils.toMultivariateDifferentiableVectorFunction(f), new Target(target), new Weight(weights), new InitialGuess(startPoint)); [EOL] } <line_num>: 417,428
@Deprecated [EOL] public PointVectorValuePair optimize(final int maxEval, final MultivariateDifferentiableVectorFunction f, final double[] target, final double[] weights, final double[] startPoint) { [EOL]     return optimizeInternal(maxEval, f, new Target(target), new Weight(weights), new InitialGuess(startPoint)); [EOL] } <line_num>: 454,463
@Deprecated [EOL] protected PointVectorValuePair optimizeInternal(final int maxEval, final MultivariateDifferentiableVectorFunction f, OptimizationData... optData) { [EOL]     return super.optimizeInternal(maxEval, FunctionUtils.toDifferentiableMultivariateVectorFunction(f), optData); [EOL] } <line_num>: 490,497
@Override [EOL] protected void setUp() { [EOL]     super.setUp(); [EOL]     jacobianEvaluations = 0; [EOL]     weightMatrixSqrt = squareRoot(getWeight()); [EOL]     jF = FunctionUtils.toMultivariateDifferentiableVectorFunction((DifferentiableMultivariateVectorFunction) getObjectiveFunction()); [EOL]     point = getStartPoint(); [EOL]     rows = getTarget().length; [EOL]     cols = point.length; [EOL] } <line_num>: 500,522
protected double[] computeResiduals(double[] objectiveValue) { [EOL]     final double[] target = getTarget(); [EOL]     if (objectiveValue.length != target.length) { [EOL]         throw new DimensionMismatchException(target.length, objectiveValue.length); [EOL]     } [EOL]     final double[] residuals = new double[target.length]; [EOL]     for (int i = 0; i < target.length; i++) { [EOL]         residuals[i] = target[i] - objectiveValue[i]; [EOL]     } [EOL]     return residuals; [EOL] } <line_num>: 540,553
private RealMatrix squareRoot(RealMatrix m) { [EOL]     if (m instanceof DiagonalMatrix) { [EOL]         final int dim = m.getRowDimension(); [EOL]         final RealMatrix sqrtM = new DiagonalMatrix(dim); [EOL]         for (int i = 0; i < dim; i++) { [EOL]             sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i))); [EOL]         } [EOL]         return sqrtM; [EOL]     } else { [EOL]         final EigenDecomposition dec = new EigenDecomposition(m); [EOL]         return dec.getSquareRoot(); [EOL]     } [EOL] } <line_num>: 561,573
