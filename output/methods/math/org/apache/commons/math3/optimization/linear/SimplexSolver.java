public SimplexSolver() { [EOL]     this(DEFAULT_EPSILON, DEFAULT_ULPS); [EOL] } <line_num>: 53,55
public SimplexSolver(final double epsilon, final int maxUlps) { [EOL]     this.epsilon = epsilon; [EOL]     this.maxUlps = maxUlps; [EOL] } <line_num>: 62,65
private Integer getPivotColumn(SimplexTableau tableau) { [EOL]     double minValue = 0; [EOL]     Integer minPos = null; [EOL]     for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { [EOL]         final double entry = tableau.getEntry(0, i); [EOL]         if (entry < minValue) { [EOL]             minValue = entry; [EOL]             minPos = i; [EOL]         } [EOL]     } [EOL]     return minPos; [EOL] } <line_num>: 72,85
private Integer getPivotRow(SimplexTableau tableau, final int col) { [EOL]     List<Integer> minRatioPositions = new ArrayList<Integer>(); [EOL]     double minRatio = Double.MAX_VALUE; [EOL]     for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { [EOL]         final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); [EOL]         final double entry = tableau.getEntry(i, col); [EOL]         if (Precision.compareTo(entry, 0d, maxUlps) > 0) { [EOL]             final double ratio = rhs / entry; [EOL]             final int cmp = Double.compare(ratio, minRatio); [EOL]             if (cmp == 0) { [EOL]                 minRatioPositions.add(i); [EOL]             } else if (cmp < 0) { [EOL]                 minRatio = ratio; [EOL]                 minRatioPositions = new ArrayList<Integer>(); [EOL]                 minRatioPositions.add(i); [EOL]             } [EOL]         } [EOL]     } [EOL]     if (minRatioPositions.size() == 0) { [EOL]         return null; [EOL]     } else if (minRatioPositions.size() > 1) { [EOL]         if (tableau.getNumArtificialVariables() > 0) { [EOL]             for (Integer row : minRatioPositions) { [EOL]                 for (int i = 0; i < tableau.getNumArtificialVariables(); i++) { [EOL]                     int column = i + tableau.getArtificialVariableOffset(); [EOL]                     final double entry = tableau.getEntry(row, column); [EOL]                     if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) { [EOL]                         return row; [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]         if (getIterations() < getMaxIterations() / 2) { [EOL]             Integer minRow = null; [EOL]             int minIndex = tableau.getWidth(); [EOL]             final int varStart = tableau.getNumObjectiveFunctions(); [EOL]             final int varEnd = tableau.getWidth() - 1; [EOL]             for (Integer row : minRatioPositions) { [EOL]                 for (int i = varStart; i < varEnd && !row.equals(minRow); i++) { [EOL]                     final Integer basicRow = tableau.getBasicRow(i); [EOL]                     if (basicRow != null && basicRow.equals(row) && i < minIndex) { [EOL]                         minIndex = i; [EOL]                         minRow = row; [EOL]                     } [EOL]                 } [EOL]             } [EOL]             return minRow; [EOL]         } [EOL]     } [EOL]     return minRatioPositions.get(0); [EOL] } <line_num>: 93,161
protected void doIteration(final SimplexTableau tableau) throws MaxCountExceededException, UnboundedSolutionException { [EOL]     incrementIterationsCounter(); [EOL]     Integer pivotCol = getPivotColumn(tableau); [EOL]     Integer pivotRow = getPivotRow(tableau, pivotCol); [EOL]     if (pivotRow == null) { [EOL]         throw new UnboundedSolutionException(); [EOL]     } [EOL]     double pivotVal = tableau.getEntry(pivotRow, pivotCol); [EOL]     tableau.divideRow(pivotRow, pivotVal); [EOL]     for (int i = 0; i < tableau.getHeight(); i++) { [EOL]         if (i != pivotRow) { [EOL]             final double multiplier = tableau.getEntry(i, pivotCol); [EOL]             tableau.subtractRow(i, pivotRow, multiplier); [EOL]         } [EOL]     } [EOL] } <line_num>: 169,191
protected void solvePhase1(final SimplexTableau tableau) throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException { [EOL]     if (tableau.getNumArtificialVariables() == 0) { [EOL]         return; [EOL]     } [EOL]     while (!tableau.isOptimal()) { [EOL]         doIteration(tableau); [EOL]     } [EOL]     if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) { [EOL]         throw new NoFeasibleSolutionException(); [EOL]     } [EOL] } <line_num>: 200,216
@Override [EOL] public PointValuePair doOptimize() throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException { [EOL]     final SimplexTableau tableau = new SimplexTableau(getFunction(), getConstraints(), getGoalType(), restrictToNonNegative(), epsilon, maxUlps); [EOL]     solvePhase1(tableau); [EOL]     tableau.dropPhase1Objective(); [EOL]     while (!tableau.isOptimal()) { [EOL]         doIteration(tableau); [EOL]     } [EOL]     return tableau.getSolution(); [EOL] } <line_num>: 219,237
