protected BaseMultivariateVectorMultiStartOptimizer(final BaseMultivariateVectorOptimizer<FUNC> optimizer, final int starts, final RandomVectorGenerator generator) { [EOL]     if (optimizer == null || generator == null) { [EOL]         throw new NullArgumentException(); [EOL]     } [EOL]     if (starts < 1) { [EOL]         throw new NotStrictlyPositiveException(starts); [EOL]     } [EOL]     this.optimizer = optimizer; [EOL]     this.starts = starts; [EOL]     this.generator = generator; [EOL] } <line_num>: 72,86
public PointVectorValuePair[] getOptima() { [EOL]     if (optima == null) { [EOL]         throw new MathIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET); [EOL]     } [EOL]     return optima.clone(); [EOL] } <line_num>: 115,120
public int getMaxEvaluations() { [EOL]     return maxEvaluations; [EOL] } <line_num>: 123,125
public int getEvaluations() { [EOL]     return totalEvaluations; [EOL] } <line_num>: 128,130
public ConvergenceChecker<PointVectorValuePair> getConvergenceChecker() { [EOL]     return optimizer.getConvergenceChecker(); [EOL] } <line_num>: 133,135
public PointVectorValuePair optimize(int maxEval, final FUNC f, double[] target, double[] weights, double[] startPoint) { [EOL]     maxEvaluations = maxEval; [EOL]     RuntimeException lastException = null; [EOL]     optima = new PointVectorValuePair[starts]; [EOL]     totalEvaluations = 0; [EOL]     for (int i = 0; i < starts; ++i) { [EOL]         try { [EOL]             optima[i] = optimizer.optimize(maxEval - totalEvaluations, f, target, weights, i == 0 ? startPoint : generator.nextVector()); [EOL]         } catch (ConvergenceException oe) { [EOL]             optima[i] = null; [EOL]         } catch (RuntimeException mue) { [EOL]             lastException = mue; [EOL]             optima[i] = null; [EOL]         } [EOL]         totalEvaluations += optimizer.getEvaluations(); [EOL]     } [EOL]     sortPairs(target, weights); [EOL]     if (optima[0] == null) { [EOL]         throw lastException; [EOL]     } [EOL]     return optima[0]; [EOL] } <line_num>: 140,174
public int compare(final PointVectorValuePair o1, final PointVectorValuePair o2) { [EOL]     if (o1 == null) { [EOL]         return (o2 == null) ? 0 : 1; [EOL]     } else if (o2 == null) { [EOL]         return -1; [EOL]     } [EOL]     return Double.compare(weightedResidual(o1), weightedResidual(o2)); [EOL] } <line_num>: 185,193
private double weightedResidual(final PointVectorValuePair pv) { [EOL]     final double[] value = pv.getValueRef(); [EOL]     double sum = 0; [EOL]     for (int i = 0; i < value.length; ++i) { [EOL]         final double ri = value[i] - target[i]; [EOL]         sum += weights[i] * ri * ri; [EOL]     } [EOL]     return sum; [EOL] } <line_num>: 194,202
private void sortPairs(final double[] target, final double[] weights) { [EOL]     Arrays.sort(optima, new Comparator<PointVectorValuePair>() { [EOL]  [EOL]         public int compare(final PointVectorValuePair o1, final PointVectorValuePair o2) { [EOL]             if (o1 == null) { [EOL]                 return (o2 == null) ? 0 : 1; [EOL]             } else if (o2 == null) { [EOL]                 return -1; [EOL]             } [EOL]             return Double.compare(weightedResidual(o1), weightedResidual(o2)); [EOL]         } [EOL]  [EOL]         private double weightedResidual(final PointVectorValuePair pv) { [EOL]             final double[] value = pv.getValueRef(); [EOL]             double sum = 0; [EOL]             for (int i = 0; i < value.length; ++i) { [EOL]                 final double ri = value[i] - target[i]; [EOL]                 sum += weights[i] * ri * ri; [EOL]             } [EOL]             return sum; [EOL]         } [EOL]     }); [EOL] } <line_num>: 182,204
