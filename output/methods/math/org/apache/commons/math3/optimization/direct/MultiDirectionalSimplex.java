public MultiDirectionalSimplex(final int n) { [EOL]     this(n, 1d); [EOL] } <line_num>: 49,51
public MultiDirectionalSimplex(final int n, double sideLength) { [EOL]     this(n, sideLength, DEFAULT_KHI, DEFAULT_GAMMA); [EOL] } <line_num>: 61,63
public MultiDirectionalSimplex(final int n, final double khi, final double gamma) { [EOL]     this(n, 1d, khi, gamma); [EOL] } <line_num>: 73,76
public MultiDirectionalSimplex(final int n, double sideLength, final double khi, final double gamma) { [EOL]     super(n, sideLength); [EOL]     this.khi = khi; [EOL]     this.gamma = gamma; [EOL] } <line_num>: 88,94
public MultiDirectionalSimplex(final double[] steps) { [EOL]     this(steps, DEFAULT_KHI, DEFAULT_GAMMA); [EOL] } <line_num>: 103,105
public MultiDirectionalSimplex(final double[] steps, final double khi, final double gamma) { [EOL]     super(steps); [EOL]     this.khi = khi; [EOL]     this.gamma = gamma; [EOL] } <line_num>: 116,122
public MultiDirectionalSimplex(final double[][] referenceSimplex) { [EOL]     this(referenceSimplex, DEFAULT_KHI, DEFAULT_GAMMA); [EOL] } <line_num>: 131,133
public MultiDirectionalSimplex(final double[][] referenceSimplex, final double khi, final double gamma) { [EOL]     super(referenceSimplex); [EOL]     this.khi = khi; [EOL]     this.gamma = gamma; [EOL] } <line_num>: 147,153
@Override [EOL] public void iterate(final MultivariateFunction evaluationFunction, final Comparator<PointValuePair> comparator) { [EOL]     final PointValuePair[] original = getPoints(); [EOL]     final PointValuePair best = original[0]; [EOL]     final PointValuePair reflected = evaluateNewSimplex(evaluationFunction, original, 1, comparator); [EOL]     if (comparator.compare(reflected, best) < 0) { [EOL]         final PointValuePair[] reflectedSimplex = getPoints(); [EOL]         final PointValuePair expanded = evaluateNewSimplex(evaluationFunction, original, khi, comparator); [EOL]         if (comparator.compare(reflected, expanded) <= 0) { [EOL]             setPoints(reflectedSimplex); [EOL]         } [EOL]         return; [EOL]     } [EOL]     evaluateNewSimplex(evaluationFunction, original, gamma, comparator); [EOL] } <line_num>: 156,182
private PointValuePair evaluateNewSimplex(final MultivariateFunction evaluationFunction, final PointValuePair[] original, final double coeff, final Comparator<PointValuePair> comparator) { [EOL]     final double[] xSmallest = original[0].getPointRef(); [EOL]     setPoint(0, original[0]); [EOL]     final int dim = getDimension(); [EOL]     for (int i = 1; i < getSize(); i++) { [EOL]         final double[] xOriginal = original[i].getPointRef(); [EOL]         final double[] xTransformed = new double[dim]; [EOL]         for (int j = 0; j < dim; j++) { [EOL]             xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); [EOL]         } [EOL]         setPoint(i, new PointValuePair(xTransformed, Double.NaN, false)); [EOL]     } [EOL]     evaluate(evaluationFunction, comparator); [EOL]     return getPoint(0); [EOL] } <line_num>: 196,218
