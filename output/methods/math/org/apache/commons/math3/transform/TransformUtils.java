private TransformUtils() { [EOL]     super(); [EOL] } <line_num>: 48,50
public static double[] scaleArray(double[] f, double d) { [EOL]     for (int i = 0; i < f.length; i++) { [EOL]         f[i] *= d; [EOL]     } [EOL]     return f; [EOL] } <line_num>: 60,66
public static Complex[] scaleArray(Complex[] f, double d) { [EOL]     for (int i = 0; i < f.length; i++) { [EOL]         f[i] = new Complex(d * f[i].getReal(), d * f[i].getImaginary()); [EOL]     } [EOL]     return f; [EOL] } <line_num>: 76,82
public static double[][] createRealImaginaryArray(final Complex[] dataC) { [EOL]     final double[][] dataRI = new double[2][dataC.length]; [EOL]     final double[] dataR = dataRI[0]; [EOL]     final double[] dataI = dataRI[1]; [EOL]     for (int i = 0; i < dataC.length; i++) { [EOL]         final Complex c = dataC[i]; [EOL]         dataR[i] = c.getReal(); [EOL]         dataI[i] = c.getImaginary(); [EOL]     } [EOL]     return dataRI; [EOL] } <line_num>: 98,108
public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException { [EOL]     if (dataRI.length != 2) { [EOL]         throw new DimensionMismatchException(dataRI.length, 2); [EOL]     } [EOL]     final double[] dataR = dataRI[0]; [EOL]     final double[] dataI = dataRI[1]; [EOL]     if (dataR.length != dataI.length) { [EOL]         throw new DimensionMismatchException(dataI.length, dataR.length); [EOL]     } [EOL]     final int n = dataR.length; [EOL]     final Complex[] c = new Complex[n]; [EOL]     for (int i = 0; i < n; i++) { [EOL]         c[i] = new Complex(dataR[i], dataI[i]); [EOL]     } [EOL]     return c; [EOL] } <line_num>: 124,142
public static int exactLog2(final int n) throws MathIllegalArgumentException { [EOL]     int index = Arrays.binarySearch(TransformUtils.POWERS_OF_TWO, n); [EOL]     if (index < 0) { [EOL]         throw new MathIllegalArgumentException(LocalizedFormats.NOT_POWER_OF_TWO_CONSIDER_PADDING, Integer.valueOf(n)); [EOL]     } [EOL]     return index; [EOL] } <line_num>: 153,163
