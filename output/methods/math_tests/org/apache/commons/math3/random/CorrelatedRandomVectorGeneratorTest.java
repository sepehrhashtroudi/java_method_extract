public CorrelatedRandomVectorGeneratorTest() { [EOL]     mean = new double[] { 0.0, 1.0, -3.0, 2.3 }; [EOL]     RealMatrix b = MatrixUtils.createRealMatrix(4, 3); [EOL]     int counter = 0; [EOL]     for (int i = 0; i < b.getRowDimension(); ++i) { [EOL]         for (int j = 0; j < b.getColumnDimension(); ++j) { [EOL]             b.setEntry(i, j, 1.0 + 0.1 * ++counter); [EOL]         } [EOL]     } [EOL]     RealMatrix bbt = b.multiply(b.transpose()); [EOL]     covariance = MatrixUtils.createRealMatrix(mean.length, mean.length); [EOL]     for (int i = 0; i < covariance.getRowDimension(); ++i) { [EOL]         covariance.setEntry(i, i, bbt.getEntry(i, i)); [EOL]         for (int j = 0; j < covariance.getColumnDimension(); ++j) { [EOL]             double s = bbt.getEntry(i, j); [EOL]             covariance.setEntry(i, j, s); [EOL]             covariance.setEntry(j, i, s); [EOL]         } [EOL]     } [EOL]     RandomGenerator rg = new JDKRandomGenerator(); [EOL]     rg.setSeed(17399225432l); [EOL]     GaussianRandomGenerator rawGenerator = new GaussianRandomGenerator(rg); [EOL]     generator = new CorrelatedRandomVectorGenerator(mean, covariance, 1.0e-12 * covariance.getNorm(), rawGenerator); [EOL] } <line_num>: 39,67
@Test [EOL] public void testRank() { [EOL]     Assert.assertEquals(2, generator.getRank()); [EOL] } <line_num>: 69,72
@Test [EOL] public void testMath226() { [EOL]     double[] mean = { 1, 1, 10, 1 }; [EOL]     double[][] cov = { { 1, 3, 2, 6 }, { 3, 13, 16, 2 }, { 2, 16, 38, -1 }, { 6, 2, -1, 197 } }; [EOL]     RealMatrix covRM = MatrixUtils.createRealMatrix(cov); [EOL]     JDKRandomGenerator jg = new JDKRandomGenerator(); [EOL]     jg.setSeed(5322145245211l); [EOL]     NormalizedRandomGenerator rg = new GaussianRandomGenerator(jg); [EOL]     CorrelatedRandomVectorGenerator sg = new CorrelatedRandomVectorGenerator(mean, covRM, 0.00001, rg); [EOL]     double[] min = new double[mean.length]; [EOL]     Arrays.fill(min, Double.POSITIVE_INFINITY); [EOL]     double[] max = new double[mean.length]; [EOL]     Arrays.fill(max, Double.NEGATIVE_INFINITY); [EOL]     for (int i = 0; i < 10; i++) { [EOL]         double[] generated = sg.nextVector(); [EOL]         for (int j = 0; j < generated.length; ++j) { [EOL]             min[j] = FastMath.min(min[j], generated[j]); [EOL]             max[j] = FastMath.max(max[j], generated[j]); [EOL]         } [EOL]     } [EOL]     for (int j = 0; j < min.length; ++j) { [EOL]         Assert.assertTrue(max[j] - min[j] > 2.0); [EOL]     } [EOL] } <line_num>: 74,105
@Test [EOL] public void testRootMatrix() { [EOL]     RealMatrix b = generator.getRootMatrix(); [EOL]     RealMatrix bbt = b.multiply(b.transpose()); [EOL]     for (int i = 0; i < covariance.getRowDimension(); ++i) { [EOL]         for (int j = 0; j < covariance.getColumnDimension(); ++j) { [EOL]             Assert.assertEquals(covariance.getEntry(i, j), bbt.getEntry(i, j), 1.0e-12); [EOL]         } [EOL]     } [EOL] } <line_num>: 107,116
@Test [EOL] public void testMeanAndCovariance() { [EOL]     VectorialMean meanStat = new VectorialMean(mean.length); [EOL]     VectorialCovariance covStat = new VectorialCovariance(mean.length, true); [EOL]     for (int i = 0; i < 5000; ++i) { [EOL]         double[] v = generator.nextVector(); [EOL]         meanStat.increment(v); [EOL]         covStat.increment(v); [EOL]     } [EOL]     double[] estimatedMean = meanStat.getResult(); [EOL]     RealMatrix estimatedCovariance = covStat.getResult(); [EOL]     for (int i = 0; i < estimatedMean.length; ++i) { [EOL]         Assert.assertEquals(mean[i], estimatedMean[i], 0.07); [EOL]         for (int j = 0; j <= i; ++j) { [EOL]             Assert.assertEquals(covariance.getEntry(i, j), estimatedCovariance.getEntry(i, j), 0.1 * (1.0 + FastMath.abs(mean[i])) * (1.0 + FastMath.abs(mean[j]))); [EOL]         } [EOL]     } [EOL] } <line_num>: 118,140
@Test [EOL] public void testSampleWithZeroCovariance() { [EOL]     final double[][] covMatrix1 = new double[][] { { 0.013445532, 0.010394690, 0.009881156, 0.010499559 }, { 0.010394690, 0.023006616, 0.008196856, 0.010732709 }, { 0.009881156, 0.008196856, 0.019023866, 0.009210099 }, { 0.010499559, 0.010732709, 0.009210099, 0.019107243 } }; [EOL]     final double[][] covMatrix2 = new double[][] { { 0.0, 0.0, 0.0, 0.0, 0.0 }, { 0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559 }, { 0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709 }, { 0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099 }, { 0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243 } }; [EOL]     final double[][] covMatrix3 = new double[][] { { 0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559 }, { 0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709 }, { 0.0, 0.0, 0.0, 0.0, 0.0 }, { 0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099 }, { 0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243 } }; [EOL]     testSampler(covMatrix1, 10000, 0.001); [EOL]     testSampler(covMatrix2, 10000, 0.001); [EOL]     testSampler(covMatrix3, 10000, 0.001); [EOL] } <line_num>: 142,171
private CorrelatedRandomVectorGenerator createSampler(double[][] cov) { [EOL]     RealMatrix matrix = new Array2DRowRealMatrix(cov); [EOL]     double small = 10e-12 * matrix.getNorm(); [EOL]     return new CorrelatedRandomVectorGenerator(new double[cov.length], matrix, small, new GaussianRandomGenerator(new JDKRandomGenerator())); [EOL] } <line_num>: 173,181
private void testSampler(final double[][] covMatrix, int samples, double epsilon) { [EOL]     CorrelatedRandomVectorGenerator sampler = createSampler(covMatrix); [EOL]     StorelessCovariance cov = new StorelessCovariance(covMatrix.length); [EOL]     for (int i = 0; i < samples; ++i) { [EOL]         cov.increment(sampler.nextVector()); [EOL]     } [EOL]     double[][] sampleCov = cov.getData(); [EOL]     for (int r = 0; r < covMatrix.length; ++r) { [EOL]         TestUtils.assertEquals(covMatrix[r], sampleCov[r], epsilon); [EOL]     } [EOL] } <line_num>: 183,196
