@Before [EOL] public void setUp() { [EOL]     generator = new HaltonSequenceGenerator(3); [EOL] } <line_num>: 57,60
@Test [EOL] public void test3DReference() { [EOL]     for (int i = 0; i < referenceValues.length; i++) { [EOL]         double[] result = generator.nextVector(); [EOL]         Assert.assertArrayEquals(referenceValues[i], result, 1e-3); [EOL]         Assert.assertEquals(i + 1, generator.getNextIndex()); [EOL]     } [EOL] } <line_num>: 62,69
@Test [EOL] public void test2DUnscrambledReference() { [EOL]     generator = new HaltonSequenceGenerator(2, new int[] { 2, 3 }, null); [EOL]     for (int i = 0; i < referenceValuesUnscrambled.length; i++) { [EOL]         double[] result = generator.nextVector(); [EOL]         Assert.assertArrayEquals(referenceValuesUnscrambled[i], result, 1e-3); [EOL]         Assert.assertEquals(i + 1, generator.getNextIndex()); [EOL]     } [EOL] } <line_num>: 71,79
@Test [EOL] public void testConstructor() { [EOL]     try { [EOL]         new HaltonSequenceGenerator(0); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (OutOfRangeException e) { [EOL]     } [EOL]     try { [EOL]         new HaltonSequenceGenerator(41); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (OutOfRangeException e) { [EOL]     } [EOL] } <line_num>: 81,96
@Test [EOL] public void testConstructor2() throws Exception { [EOL]     try { [EOL]         new HaltonSequenceGenerator(2, new int[] { 1 }, null); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (OutOfRangeException e) { [EOL]     } [EOL]     try { [EOL]         new HaltonSequenceGenerator(2, null, null); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (NullArgumentException e) { [EOL]     } [EOL]     try { [EOL]         new HaltonSequenceGenerator(2, new int[] { 1, 1 }, new int[] { 1 }); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL] } <line_num>: 98,120
@Test [EOL] public void testSkip() { [EOL]     double[] result = generator.skipTo(5); [EOL]     Assert.assertArrayEquals(referenceValues[5], result, 1e-3); [EOL]     Assert.assertEquals(6, generator.getNextIndex()); [EOL]     for (int i = 6; i < referenceValues.length; i++) { [EOL]         result = generator.nextVector(); [EOL]         Assert.assertArrayEquals(referenceValues[i], result, 1e-3); [EOL]         Assert.assertEquals(i + 1, generator.getNextIndex()); [EOL]     } [EOL] } <line_num>: 122,133
