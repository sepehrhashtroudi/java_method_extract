@Test [EOL] public void testAdapter() { [EOL]     final int seed = 12345; [EOL]     final RandomGenerator orig = new MersenneTwister(seed); [EOL]     final RandomGenerator wrap = new SynchronizedRandomGenerator(new MersenneTwister(seed)); [EOL]     final int bSize = 67; [EOL]     final byte[] bOrig = new byte[bSize]; [EOL]     final byte[] bWrap = new byte[bSize]; [EOL]     for (int i = 0; i < 100; i++) { [EOL]         orig.nextBytes(bOrig); [EOL]         wrap.nextBytes(bWrap); [EOL]         for (int k = 0; k < bSize; k++) { [EOL]             Assert.assertEquals(bOrig[k], bWrap[k]); [EOL]         } [EOL]         Assert.assertEquals(orig.nextInt(), wrap.nextInt()); [EOL]         final int range = (i + 1) * 89; [EOL]         Assert.assertEquals(orig.nextInt(range), wrap.nextInt(range)); [EOL]         Assert.assertEquals(orig.nextLong(), wrap.nextLong()); [EOL]         Assert.assertEquals(orig.nextBoolean(), wrap.nextBoolean()); [EOL]         Assert.assertEquals(orig.nextFloat(), wrap.nextFloat(), 0); [EOL]         Assert.assertEquals(orig.nextDouble(), wrap.nextDouble(), 0); [EOL]         Assert.assertEquals(orig.nextGaussian(), wrap.nextGaussian(), 0); [EOL]     } [EOL] } <line_num>: 35,65
@Test [EOL] public void testMath899Sync() throws Throwable { [EOL]     try { [EOL]         for (int i = 0; i < 10; i++) { [EOL]             doTestMath899(true, numberOfThreads, numberOfGenerators, numberOfSamples); [EOL]         } [EOL]     } catch (InterruptedException e) { [EOL]         Assert.fail(e.getMessage()); [EOL]     } catch (ExecutionException e) { [EOL]         throw e.getCause(); [EOL]     } [EOL] } <line_num>: 67,81
public Double call() { [EOL]     Double lastValue = 0d; [EOL]     for (int j = 0; j < numSamples; j++) { [EOL]         lastValue = wrapper.nextGaussian(); [EOL]     } [EOL]     return lastValue; [EOL] } <line_num>: 98,104
private double[] doTestMath899(final boolean sync, final int numThreads, final int numGenerators, final int numSamples) throws InterruptedException, ExecutionException { [EOL]     final RandomGenerator rng = new MersenneTwister(); [EOL]     final RandomGenerator wrapper = sync ? new SynchronizedRandomGenerator(rng) : rng; [EOL]     final List<Callable<Double>> tasks = new ArrayList<Callable<Double>>(); [EOL]     for (int i = 0; i < numGenerators; i++) { [EOL]         tasks.add(new Callable<Double>() { [EOL]  [EOL]             public Double call() { [EOL]                 Double lastValue = 0d; [EOL]                 for (int j = 0; j < numSamples; j++) { [EOL]                     lastValue = wrapper.nextGaussian(); [EOL]                 } [EOL]                 return lastValue; [EOL]             } [EOL]         }); [EOL]     } [EOL]     final ExecutorService exec = Executors.newFixedThreadPool(numThreads); [EOL]     final List<Future<Double>> results = exec.invokeAll(tasks); [EOL]     final double[] values = new double[numGenerators]; [EOL]     for (int i = 0; i < numGenerators; i++) { [EOL]         values[i] = results.get(i).get(); [EOL]     } [EOL]     return values; [EOL] } <line_num>: 86,116
