public Event(boolean expectDecreasing, boolean expectIncreasing) { [EOL]     this.expectDecreasing = expectDecreasing; [EOL]     this.expectIncreasing = expectIncreasing; [EOL] } <line_num>: 237,240
@Test [EOL] public void testHistoryIncreasingForward() { [EOL]     testHistory(FilterType.TRIGGER_ONLY_INCREASING_EVENTS, 0.5 * FastMath.PI, 30.5 * FastMath.PI, FastMath.PI, -1); [EOL]     testHistory(FilterType.TRIGGER_ONLY_INCREASING_EVENTS, 0, 30.5 * FastMath.PI, FastMath.PI, -1); [EOL]     testHistory(FilterType.TRIGGER_ONLY_INCREASING_EVENTS, 1.5 * FastMath.PI, 30.5 * FastMath.PI, FastMath.PI, +1); [EOL] } <line_num>: 35,50
@Test [EOL] public void testHistoryIncreasingBackward() { [EOL]     testHistory(FilterType.TRIGGER_ONLY_INCREASING_EVENTS, 0.5 * FastMath.PI, -30.5 * FastMath.PI, FastMath.PI, -1); [EOL]     testHistory(FilterType.TRIGGER_ONLY_INCREASING_EVENTS, 0, -30.5 * FastMath.PI, FastMath.PI, +1); [EOL]     testHistory(FilterType.TRIGGER_ONLY_INCREASING_EVENTS, 1.5 * FastMath.PI, -30.5 * FastMath.PI, FastMath.PI, -1); [EOL] } <line_num>: 52,67
@Test [EOL] public void testHistoryDecreasingForward() { [EOL]     testHistory(FilterType.TRIGGER_ONLY_DECREASING_EVENTS, 0.5 * FastMath.PI, 30.5 * FastMath.PI, 0, +1); [EOL]     testHistory(FilterType.TRIGGER_ONLY_DECREASING_EVENTS, 0, 30.5 * FastMath.PI, 0, +1); [EOL]     testHistory(FilterType.TRIGGER_ONLY_DECREASING_EVENTS, 1.5 * FastMath.PI, 30.5 * FastMath.PI, 0, +1); [EOL] } <line_num>: 69,84
@Test [EOL] public void testHistoryDecreasingBackward() { [EOL]     testHistory(FilterType.TRIGGER_ONLY_DECREASING_EVENTS, 0.5 * FastMath.PI, -30.5 * FastMath.PI, 0, -1); [EOL]     testHistory(FilterType.TRIGGER_ONLY_DECREASING_EVENTS, 0, -30.5 * FastMath.PI, 0, -1); [EOL]     testHistory(FilterType.TRIGGER_ONLY_DECREASING_EVENTS, 1.5 * FastMath.PI, -30.5 * FastMath.PI, 0, +1); [EOL] } <line_num>: 86,101
public void testHistory(FilterType type, double t0, double t1, double refSwitch, double signEven) { [EOL]     Event onlyIncreasing = new Event(false, true); [EOL]     EventFilter eventFilter = new EventFilter(onlyIncreasing, type); [EOL]     eventFilter.init(t0, new double[] { 1.0, 0.0 }, t1); [EOL]     double h = FastMath.copySign(0.05, t1 - t0); [EOL]     double n = (int) FastMath.floor((t1 - t0) / h); [EOL]     for (int i = 0; i < n; ++i) { [EOL]         double t = t0 + i * h; [EOL]         eventFilter.g(t, new double[] { FastMath.sin(t), FastMath.cos(t) }); [EOL]     } [EOL]     RandomGenerator rng = new Well19937a(0xb0e7401265af8cd3l); [EOL]     for (int i = 0; i < 5000; i++) { [EOL]         double t = t0 + (t1 - t0) * rng.nextDouble(); [EOL]         double g = eventFilter.g(t, new double[] { FastMath.sin(t), FastMath.cos(t) }); [EOL]         int turn = (int) FastMath.floor((t - refSwitch) / (2 * FastMath.PI)); [EOL]         if (turn % 2 == 0) { [EOL]             Assert.assertEquals(signEven * FastMath.sin(t), g, 1.0e-10); [EOL]         } else { [EOL]             Assert.assertEquals(-signEven * FastMath.sin(t), g, 1.0e-10); [EOL]         } [EOL]     } [EOL] } <line_num>: 103,130
@Test [EOL] public void testIncreasingOnly() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     double e = 1e-15; [EOL]     FirstOrderIntegrator integrator; [EOL]     integrator = new DormandPrince853Integrator(1.0e-3, 100.0, 1e-7, 1e-7); [EOL]     Event allEvents = new Event(true, true); [EOL]     integrator.addEventHandler(allEvents, 0.1, e, 1000, new BracketingNthOrderBrentSolver(1.0e-7, 5)); [EOL]     Event onlyIncreasing = new Event(false, true); [EOL]     integrator.addEventHandler(new EventFilter(onlyIncreasing, FilterType.TRIGGER_ONLY_INCREASING_EVENTS), 0.1, e, 100, new BracketingNthOrderBrentSolver(1.0e-7, 5)); [EOL]     double t0 = 0.5 * FastMath.PI; [EOL]     double tEnd = 5.5 * FastMath.PI; [EOL]     double[] y = { 0.0, 1.0 }; [EOL]     Assert.assertEquals(tEnd, integrator.integrate(new SineCosine(), t0, y, tEnd, y), 1.0e-7); [EOL]     Assert.assertEquals(5, allEvents.getEventCount()); [EOL]     Assert.assertEquals(2, onlyIncreasing.getEventCount()); [EOL] } <line_num>: 132,157
@Test [EOL] public void testDecreasingOnly() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     double e = 1e-15; [EOL]     FirstOrderIntegrator integrator; [EOL]     integrator = new DormandPrince853Integrator(1.0e-3, 100.0, 1e-7, 1e-7); [EOL]     Event allEvents = new Event(true, true); [EOL]     integrator.addEventHandler(allEvents, 0.1, e, 1000, new BracketingNthOrderBrentSolver(1.0e-7, 5)); [EOL]     Event onlyDecreasing = new Event(true, false); [EOL]     integrator.addEventHandler(new EventFilter(onlyDecreasing, FilterType.TRIGGER_ONLY_DECREASING_EVENTS), 0.1, e, 1000, new BracketingNthOrderBrentSolver(1.0e-7, 5)); [EOL]     double t0 = 0.5 * FastMath.PI; [EOL]     double tEnd = 5.5 * FastMath.PI; [EOL]     double[] y = { 0.0, 1.0 }; [EOL]     Assert.assertEquals(tEnd, integrator.integrate(new SineCosine(), t0, y, tEnd, y), 1.0e-7); [EOL]     Assert.assertEquals(5, allEvents.getEventCount()); [EOL]     Assert.assertEquals(3, onlyDecreasing.getEventCount()); [EOL] } <line_num>: 159,184
@Test [EOL] public void testTwoOppositeFilters() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     double e = 1e-15; [EOL]     FirstOrderIntegrator integrator; [EOL]     integrator = new DormandPrince853Integrator(1.0e-3, 100.0, 1e-7, 1e-7); [EOL]     Event allEvents = new Event(true, true); [EOL]     integrator.addEventHandler(allEvents, 0.1, e, 1000, new BracketingNthOrderBrentSolver(1.0e-7, 5)); [EOL]     Event onlyIncreasing = new Event(false, true); [EOL]     integrator.addEventHandler(new EventFilter(onlyIncreasing, FilterType.TRIGGER_ONLY_INCREASING_EVENTS), 0.1, e, 1000, new BracketingNthOrderBrentSolver(1.0e-7, 5)); [EOL]     Event onlyDecreasing = new Event(true, false); [EOL]     integrator.addEventHandler(new EventFilter(onlyDecreasing, FilterType.TRIGGER_ONLY_DECREASING_EVENTS), 0.1, e, 1000, new BracketingNthOrderBrentSolver(1.0e-7, 5)); [EOL]     double t0 = 0.5 * FastMath.PI; [EOL]     double tEnd = 5.5 * FastMath.PI; [EOL]     double[] y = { 0.0, 1.0 }; [EOL]     Assert.assertEquals(tEnd, integrator.integrate(new SineCosine(), t0, y, tEnd, y), 1.0e-7); [EOL]     Assert.assertEquals(5, allEvents.getEventCount()); [EOL]     Assert.assertEquals(2, onlyIncreasing.getEventCount()); [EOL]     Assert.assertEquals(3, onlyDecreasing.getEventCount()); [EOL] } <line_num>: 186,217
public int getDimension() { [EOL]     return 2; [EOL] } <line_num>: 220,222
public void computeDerivatives(double t, double[] y, double[] yDot) { [EOL]     yDot[0] = y[1]; [EOL]     yDot[1] = -y[0]; [EOL] } <line_num>: 224,227
public int getEventCount() { [EOL]     return eventCount; [EOL] } <line_num>: 242,244
public void init(double t0, double[] y0, double t) { [EOL]     eventCount = 0; [EOL] } <line_num>: 246,248
public double g(double t, double[] y) { [EOL]     return y[0]; [EOL] } <line_num>: 250,252
public Action eventOccurred(double t, double[] y, boolean increasing) { [EOL]     if (increasing) { [EOL]         Assert.assertTrue(expectIncreasing); [EOL]     } else { [EOL]         Assert.assertTrue(expectDecreasing); [EOL]     } [EOL]     eventCount++; [EOL]     return Action.RESET_STATE; [EOL] } <line_num>: 254,262
public void resetState(double t, double[] y) { [EOL] } <line_num>: 264,266
