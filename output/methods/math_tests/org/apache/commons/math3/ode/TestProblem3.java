public TestProblem3(double e) { [EOL]     super(); [EOL]     this.e = e; [EOL]     double[] y0 = { 1 - e, 0, 0, FastMath.sqrt((1 + e) / (1 - e)) }; [EOL]     setInitialConditions(0.0, y0); [EOL]     setFinalConditions(20.0); [EOL]     double[] errorScale = { 1.0, 1.0, 1.0, 1.0 }; [EOL]     setErrorScale(errorScale); [EOL]     y = new double[y0.length]; [EOL] } <line_num>: 52,61
public TestProblem3() { [EOL]     this(0.1); [EOL] } <line_num>: 66,68
public TestProblem3(TestProblem3 problem) { [EOL]     super(problem); [EOL]     e = problem.e; [EOL]     y = problem.y.clone(); [EOL] } <line_num>: 74,78
@Override [EOL] public TestProblem3 copy() { [EOL]     return new TestProblem3(this); [EOL] } <line_num>: 81,84
@Override [EOL] public void doComputeDerivatives(double t, double[] y, double[] yDot) { [EOL]     double r2 = y[0] * y[0] + y[1] * y[1]; [EOL]     double invR3 = 1 / (r2 * FastMath.sqrt(r2)); [EOL]     yDot[0] = y[2]; [EOL]     yDot[1] = y[3]; [EOL]     yDot[2] = -invR3 * y[0]; [EOL]     yDot[3] = -invR3 * y[1]; [EOL] } <line_num>: 86,99
@Override [EOL] public double[] computeTheoreticalState(double t) { [EOL]     double E = t; [EOL]     double d = 0; [EOL]     double corr = 999.0; [EOL]     for (int i = 0; (i < 50) && (FastMath.abs(corr) > 1.0e-12); ++i) { [EOL]         double f2 = e * FastMath.sin(E); [EOL]         double f0 = d - f2; [EOL]         double f1 = 1 - e * FastMath.cos(E); [EOL]         double f12 = f1 + f1; [EOL]         corr = f0 * f12 / (f1 * f12 - f0 * f2); [EOL]         d -= corr; [EOL]         E = t + d; [EOL]     } [EOL]     double cosE = FastMath.cos(E); [EOL]     double sinE = FastMath.sin(E); [EOL]     y[0] = cosE - e; [EOL]     y[1] = FastMath.sqrt(1 - e * e) * sinE; [EOL]     y[2] = -sinE / (1 - e * cosE); [EOL]     y[3] = FastMath.sqrt(1 - e * e) * cosE / (1 - e * cosE); [EOL]     return y; [EOL] } <line_num>: 101,127
