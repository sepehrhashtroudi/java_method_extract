public ResettingEvent(final double tEvent) { [EOL]     this.tEvent = tEvent; [EOL] } <line_num>: 128,130
public SecondaryStateEvent(final int index, final double target) { [EOL]     this.index = index; [EOL]     this.target = target; [EOL] } <line_num>: 206,209
public void init(double t0, double[] y0, double t) { [EOL] } <line_num>: 45,46
public void resetState(double t, double[] y) { [EOL] } <line_num>: 47,48
public double g(double t, double[] y) { [EOL]     return (t - r1) * (r2 - t); [EOL] } <line_num>: 49,51
public Action eventOccurred(double t, double[] y, boolean increasing) { [EOL]     return Action.CONTINUE; [EOL] } <line_num>: 52,54
public int getDimension() { [EOL]     return 0; [EOL] } <line_num>: 62,64
public void computeDerivatives(double t, double[] y, double[] yDot) { [EOL] } <line_num>: 65,66
@Test [EOL] public void closeEvents() throws MaxCountExceededException, NoBracketingException { [EOL]     final double r1 = 90.0; [EOL]     final double r2 = 135.0; [EOL]     final double gap = r2 - r1; [EOL]     EventHandler closeEventsGenerator = new EventHandler() { [EOL]  [EOL]         public void init(double t0, double[] y0, double t) { [EOL]         } [EOL]  [EOL]         public void resetState(double t, double[] y) { [EOL]         } [EOL]  [EOL]         public double g(double t, double[] y) { [EOL]             return (t - r1) * (r2 - t); [EOL]         } [EOL]  [EOL]         public Action eventOccurred(double t, double[] y, boolean increasing) { [EOL]             return Action.CONTINUE; [EOL]         } [EOL]     }; [EOL]     final double tolerance = 0.1; [EOL]     EventState es = new EventState(closeEventsGenerator, 1.5 * gap, tolerance, 100, new BrentSolver(tolerance)); [EOL]     es.setExpandable(new ExpandableStatefulODE(new FirstOrderDifferentialEquations() { [EOL]  [EOL]         public int getDimension() { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public void computeDerivatives(double t, double[] y, double[] yDot) { [EOL]         } [EOL]     })); [EOL]     AbstractStepInterpolator interpolator = new DummyStepInterpolator(new double[0], new double[0], true); [EOL]     interpolator.storeTime(r1 - 2.5 * gap); [EOL]     interpolator.shift(); [EOL]     interpolator.storeTime(r1 - 1.5 * gap); [EOL]     es.reinitializeBegin(interpolator); [EOL]     interpolator.shift(); [EOL]     interpolator.storeTime(r1 - 0.5 * gap); [EOL]     Assert.assertFalse(es.evaluateStep(interpolator)); [EOL]     interpolator.shift(); [EOL]     interpolator.storeTime(0.5 * (r1 + r2)); [EOL]     Assert.assertTrue(es.evaluateStep(interpolator)); [EOL]     Assert.assertEquals(r1, es.getEventTime(), tolerance); [EOL]     es.stepAccepted(es.getEventTime(), new double[0]); [EOL]     interpolator.shift(); [EOL]     interpolator.storeTime(r2 + 0.4 * gap); [EOL]     Assert.assertTrue(es.evaluateStep(interpolator)); [EOL]     Assert.assertEquals(r2, es.getEventTime(), tolerance); [EOL] } <line_num>: 38,91
public int getDimension() { [EOL]     return 1; [EOL] } <line_num>: 101,103
public void computeDerivatives(double t, double[] y, double[] yDot) { [EOL]     yDot[0] = 1.0; [EOL] } <line_num>: 105,107
@Test [EOL] public void testIssue695() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     FirstOrderDifferentialEquations equation = new FirstOrderDifferentialEquations() { [EOL]  [EOL]         public int getDimension() { [EOL]             return 1; [EOL]         } [EOL]  [EOL]         public void computeDerivatives(double t, double[] y, double[] yDot) { [EOL]             yDot[0] = 1.0; [EOL]         } [EOL]     }; [EOL]     DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.001, 1000, 1.0e-14, 1.0e-14); [EOL]     integrator.addEventHandler(new ResettingEvent(10.99), 0.1, 1.0e-9, 1000); [EOL]     integrator.addEventHandler(new ResettingEvent(11.01), 0.1, 1.0e-9, 1000); [EOL]     integrator.setInitialStepSize(3.0); [EOL]     double target = 30.0; [EOL]     double[] y = new double[1]; [EOL]     double tEnd = integrator.integrate(equation, 0.0, y, target, y); [EOL]     Assert.assertEquals(target, tEnd, 1.0e-10); [EOL]     Assert.assertEquals(32.0, y[0], 1.0e-10); [EOL] } <line_num>: 94,121
public void init(double t0, double[] y0, double t) { [EOL] } <line_num>: 132,133
public double g(double t, double[] y) { [EOL]     Assert.assertTrue("going backard in time! (" + t + " < " + lastTriggerTime + ")", t >= lastTriggerTime); [EOL]     return t - tEvent; [EOL] } <line_num>: 135,143
public Action eventOccurred(double t, double[] y, boolean increasing) { [EOL]     lastTriggerTime = t; [EOL]     return Action.RESET_STATE; [EOL] } <line_num>: 145,149
public void resetState(double t, double[] y) { [EOL]     y[0] += 1.0; [EOL] } <line_num>: 151,153
public int getDimension() { [EOL]     return 1; [EOL] } <line_num>: 166,168
public void computeDerivatives(double t, double[] y, double[] yDot) { [EOL]     yDot[0] = 2.0; [EOL] } <line_num>: 170,172
public int getDimension() { [EOL]     return 1; [EOL] } <line_num>: 178,180
public void computeDerivatives(double t, double[] primary, double[] primaryDot, double[] secondary, double[] secondaryDot) { [EOL]     secondaryDot[0] = -3.0; [EOL] } <line_num>: 182,186
@Test [EOL] public void testIssue965() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     ExpandableStatefulODE equation = new ExpandableStatefulODE(new FirstOrderDifferentialEquations() { [EOL]  [EOL]         public int getDimension() { [EOL]             return 1; [EOL]         } [EOL]  [EOL]         public void computeDerivatives(double t, double[] y, double[] yDot) { [EOL]             yDot[0] = 2.0; [EOL]         } [EOL]     }); [EOL]     equation.setTime(0.0); [EOL]     equation.setPrimaryState(new double[1]); [EOL]     equation.addSecondaryEquations(new SecondaryEquations() { [EOL]  [EOL]         public int getDimension() { [EOL]             return 1; [EOL]         } [EOL]  [EOL]         public void computeDerivatives(double t, double[] primary, double[] primaryDot, double[] secondary, double[] secondaryDot) { [EOL]             secondaryDot[0] = -3.0; [EOL]         } [EOL]     }); [EOL]     int index = equation.getSecondaryMappers()[0].getFirstIndex(); [EOL]     DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.001, 1000, 1.0e-14, 1.0e-14); [EOL]     integrator.addEventHandler(new SecondaryStateEvent(index, -3.0), 0.1, 1.0e-9, 1000); [EOL]     integrator.setInitialStepSize(3.0); [EOL]     integrator.integrate(equation, 30.0); [EOL]     Assert.assertEquals(1.0, equation.getTime(), 1.0e-10); [EOL]     Assert.assertEquals(2.0, equation.getPrimaryState()[0], 1.0e-10); [EOL]     Assert.assertEquals(-3.0, equation.getSecondaryState(0)[0], 1.0e-10); [EOL] } <line_num>: 158,199
public void init(double t0, double[] y0, double t) { [EOL] } <line_num>: 211,212
public double g(double t, double[] y) { [EOL]     return y[index] - target; [EOL] } <line_num>: 214,216
public Action eventOccurred(double t, double[] y, boolean increasing) { [EOL]     return Action.STOP; [EOL] } <line_num>: 218,220
public void resetState(double t, double[] y) { [EOL] } <line_num>: 222,223
