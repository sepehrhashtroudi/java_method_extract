@SuppressWarnings("unused") [EOL] public BadStepInterpolator() { [EOL] } <line_num>: 123,125
public BadStepInterpolator(double[] y, boolean forward) { [EOL]     super(y, new double[y.length], forward); [EOL] } <line_num>: 126,128
@Test [EOL] public void testNoReset() throws MaxCountExceededException { [EOL]     double[] y = { 0.0, 1.0, -2.0 }; [EOL]     DummyStepInterpolator interpolator = new DummyStepInterpolator(y, new double[y.length], true); [EOL]     interpolator.storeTime(0); [EOL]     interpolator.shift(); [EOL]     interpolator.storeTime(1); [EOL]     double[] result = interpolator.getInterpolatedState(); [EOL]     for (int i = 0; i < result.length; ++i) { [EOL]         Assert.assertTrue(FastMath.abs(result[i] - y[i]) < 1.0e-10); [EOL]     } [EOL] } <line_num>: 34,48
@Test [EOL] public void testFixedState() throws MaxCountExceededException { [EOL]     double[] y = { 1.0, 3.0, -4.0 }; [EOL]     DummyStepInterpolator interpolator = new DummyStepInterpolator(y, new double[y.length], true); [EOL]     interpolator.storeTime(0); [EOL]     interpolator.shift(); [EOL]     interpolator.storeTime(1); [EOL]     interpolator.setInterpolatedTime(0.1); [EOL]     double[] result = interpolator.getInterpolatedState(); [EOL]     for (int i = 0; i < result.length; ++i) { [EOL]         Assert.assertTrue(FastMath.abs(result[i] - y[i]) < 1.0e-10); [EOL]     } [EOL]     interpolator.setInterpolatedTime(0.5); [EOL]     result = interpolator.getInterpolatedState(); [EOL]     for (int i = 0; i < result.length; ++i) { [EOL]         Assert.assertTrue(FastMath.abs(result[i] - y[i]) < 1.0e-10); [EOL]     } [EOL] } <line_num>: 50,71
@Test [EOL] public void testSerialization() throws IOException, ClassNotFoundException, MaxCountExceededException { [EOL]     double[] y = { 0.0, 1.0, -2.0 }; [EOL]     DummyStepInterpolator interpolator = new DummyStepInterpolator(y, new double[y.length], true); [EOL]     interpolator.storeTime(0); [EOL]     interpolator.shift(); [EOL]     interpolator.storeTime(1); [EOL]     ByteArrayOutputStream bos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(bos); [EOL]     oos.writeObject(interpolator); [EOL]     Assert.assertTrue(bos.size() > 300); [EOL]     Assert.assertTrue(bos.size() < 500); [EOL]     ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray()); [EOL]     ObjectInputStream ois = new ObjectInputStream(bis); [EOL]     DummyStepInterpolator dsi = (DummyStepInterpolator) ois.readObject(); [EOL]     dsi.setInterpolatedTime(0.5); [EOL]     double[] result = dsi.getInterpolatedState(); [EOL]     for (int i = 0; i < result.length; ++i) { [EOL]         Assert.assertTrue(FastMath.abs(result[i] - y[i]) < 1.0e-10); [EOL]     } [EOL] } <line_num>: 73,100
@Test [EOL] public void testImpossibleSerialization() throws IOException { [EOL]     double[] y = { 0.0, 1.0, -2.0 }; [EOL]     AbstractStepInterpolator interpolator = new BadStepInterpolator(y, true); [EOL]     interpolator.storeTime(0); [EOL]     interpolator.shift(); [EOL]     interpolator.storeTime(1); [EOL]     ByteArrayOutputStream bos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(bos); [EOL]     try { [EOL]         oos.writeObject(interpolator); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (LocalException le) { [EOL]     } [EOL] } <line_num>: 102,120
@Override [EOL] protected void doFinalize() { [EOL]     throw new LocalException(); [EOL] } <line_num>: 129,132
