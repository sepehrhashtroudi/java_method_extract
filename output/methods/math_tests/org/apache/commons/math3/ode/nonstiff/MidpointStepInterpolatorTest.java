@Test [EOL] public void testDerivativesConsistency() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     TestProblem3 pb = new TestProblem3(); [EOL]     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001; [EOL]     MidpointIntegrator integ = new MidpointIntegrator(step); [EOL]     StepInterpolatorTestUtils.checkDerivativesConsistency(integ, pb, 1.0e-10); [EOL] } <line_num>: 42,50
@Test [EOL] public void serialization() throws IOException, ClassNotFoundException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     TestProblem1 pb = new TestProblem1(); [EOL]     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001; [EOL]     MidpointIntegrator integ = new MidpointIntegrator(step); [EOL]     integ.addStepHandler(new ContinuousOutputModel()); [EOL]     integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(), pb.getFinalTime(), new double[pb.getDimension()]); [EOL]     ByteArrayOutputStream bos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(bos); [EOL]     for (StepHandler handler : integ.getStepHandlers()) { [EOL]         oos.writeObject(handler); [EOL]     } [EOL]     Assert.assertTrue(bos.size() > 135000); [EOL]     Assert.assertTrue(bos.size() < 145000); [EOL]     ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray()); [EOL]     ObjectInputStream ois = new ObjectInputStream(bis); [EOL]     ContinuousOutputModel cm = (ContinuousOutputModel) ois.readObject(); [EOL]     Random random = new Random(347588535632l); [EOL]     double maxError = 0.0; [EOL]     for (int i = 0; i < 1000; ++i) { [EOL]         double r = random.nextDouble(); [EOL]         double time = r * pb.getInitialTime() + (1.0 - r) * pb.getFinalTime(); [EOL]         cm.setInterpolatedTime(time); [EOL]         double[] interpolatedY = cm.getInterpolatedState(); [EOL]         double[] theoreticalY = pb.computeTheoreticalState(time); [EOL]         double dx = interpolatedY[0] - theoreticalY[0]; [EOL]         double dy = interpolatedY[1] - theoreticalY[1]; [EOL]         double error = dx * dx + dy * dy; [EOL]         if (error > maxError) { [EOL]             maxError = error; [EOL]         } [EOL]     } [EOL]     Assert.assertTrue(maxError < 1.0e-6); [EOL] } <line_num>: 52,97
