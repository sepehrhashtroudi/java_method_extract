protected abstract double getStart(); <line_num>: 45,45
protected abstract double getEnd(); <line_num>: 51,51
protected abstract double[] getExpInc(); <line_num>: 57,57
protected abstract double[] getExpIncRev(); <line_num>: 65,65
protected abstract double[] getExpMul(); <line_num>: 71,71
protected abstract double[] getExpMulRev(); <line_num>: 79,79
protected abstract int[][] getO(); <line_num>: 87,87
private double[] getArray(double[] a, int offsetL, int offsetR) { [EOL]     double[] copy = new double[a.length - offsetR - offsetL]; [EOL]     System.arraycopy(a, offsetL, copy, 0, copy.length); [EOL]     return copy; [EOL] } <line_num>: 96,100
@Test [EOL] public void testIncNeither() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     double[] exp = getArray(getExpInc(), getO()[0][0], getO()[0][1]); [EOL]     doTest(StepNormalizerMode.INCREMENT, StepNormalizerBounds.NEITHER, exp, false); [EOL] } <line_num>: 102,108
@Test [EOL] public void testIncNeitherRev() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     double[] exp = getArray(getExpIncRev(), getO()[1][0], getO()[1][1]); [EOL]     doTest(StepNormalizerMode.INCREMENT, StepNormalizerBounds.NEITHER, exp, true); [EOL] } <line_num>: 110,116
@Test [EOL] public void testIncFirst() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     double[] exp = getArray(getExpInc(), getO()[2][0], getO()[2][1]); [EOL]     doTest(StepNormalizerMode.INCREMENT, StepNormalizerBounds.FIRST, exp, false); [EOL] } <line_num>: 118,124
@Test [EOL] public void testIncFirstRev() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     double[] exp = getArray(getExpIncRev(), getO()[3][0], getO()[3][1]); [EOL]     doTest(StepNormalizerMode.INCREMENT, StepNormalizerBounds.FIRST, exp, true); [EOL] } <line_num>: 126,132
@Test [EOL] public void testIncLast() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     double[] exp = getArray(getExpInc(), getO()[4][0], getO()[4][1]); [EOL]     doTest(StepNormalizerMode.INCREMENT, StepNormalizerBounds.LAST, exp, false); [EOL] } <line_num>: 134,140
@Test [EOL] public void testIncLastRev() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     double[] exp = getArray(getExpIncRev(), getO()[5][0], getO()[5][1]); [EOL]     doTest(StepNormalizerMode.INCREMENT, StepNormalizerBounds.LAST, exp, true); [EOL] } <line_num>: 142,148
@Test [EOL] public void testIncBoth() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     double[] exp = getArray(getExpInc(), getO()[6][0], getO()[6][1]); [EOL]     doTest(StepNormalizerMode.INCREMENT, StepNormalizerBounds.BOTH, exp, false); [EOL] } <line_num>: 150,156
@Test [EOL] public void testIncBothRev() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     double[] exp = getArray(getExpIncRev(), getO()[7][0], getO()[7][1]); [EOL]     doTest(StepNormalizerMode.INCREMENT, StepNormalizerBounds.BOTH, exp, true); [EOL] } <line_num>: 158,164
@Test [EOL] public void testMulNeither() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     double[] exp = getArray(getExpMul(), getO()[8][0], getO()[8][1]); [EOL]     doTest(StepNormalizerMode.MULTIPLES, StepNormalizerBounds.NEITHER, exp, false); [EOL] } <line_num>: 166,172
@Test [EOL] public void testMulNeitherRev() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     double[] exp = getArray(getExpMulRev(), getO()[9][0], getO()[9][1]); [EOL]     doTest(StepNormalizerMode.MULTIPLES, StepNormalizerBounds.NEITHER, exp, true); [EOL] } <line_num>: 174,180
@Test [EOL] public void testMulFirst() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     double[] exp = getArray(getExpMul(), getO()[10][0], getO()[10][1]); [EOL]     doTest(StepNormalizerMode.MULTIPLES, StepNormalizerBounds.FIRST, exp, false); [EOL] } <line_num>: 182,188
@Test [EOL] public void testMulFirstRev() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     double[] exp = getArray(getExpMulRev(), getO()[11][0], getO()[11][1]); [EOL]     doTest(StepNormalizerMode.MULTIPLES, StepNormalizerBounds.FIRST, exp, true); [EOL] } <line_num>: 190,196
@Test [EOL] public void testMulLast() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     double[] exp = getArray(getExpMul(), getO()[12][0], getO()[12][1]); [EOL]     doTest(StepNormalizerMode.MULTIPLES, StepNormalizerBounds.LAST, exp, false); [EOL] } <line_num>: 198,204
@Test [EOL] public void testMulLastRev() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     double[] exp = getArray(getExpMulRev(), getO()[13][0], getO()[13][1]); [EOL]     doTest(StepNormalizerMode.MULTIPLES, StepNormalizerBounds.LAST, exp, true); [EOL] } <line_num>: 206,212
@Test [EOL] public void testMulBoth() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     double[] exp = getArray(getExpMul(), getO()[14][0], getO()[14][1]); [EOL]     doTest(StepNormalizerMode.MULTIPLES, StepNormalizerBounds.BOTH, exp, false); [EOL] } <line_num>: 214,220
@Test [EOL] public void testMulBothRev() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     double[] exp = getArray(getExpMulRev(), getO()[15][0], getO()[15][1]); [EOL]     doTest(StepNormalizerMode.MULTIPLES, StepNormalizerBounds.BOTH, exp, true); [EOL] } <line_num>: 222,228
private void doTest(StepNormalizerMode mode, StepNormalizerBounds bounds, double[] expected, boolean reverse) throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     FirstOrderIntegrator integ = new GraggBulirschStoerIntegrator(1e-8, 1.0, 1e-5, 1e-5); [EOL]     integ.addStepHandler(new StepNormalizer(0.5, this, mode, bounds)); [EOL]     double[] y = { 0.0 }; [EOL]     double start = reverse ? getEnd() : getStart(); [EOL]     double end = reverse ? getStart() : getEnd(); [EOL]     output = new ArrayList<Double>(); [EOL]     integ.integrate(this, start, y, end, y); [EOL]     double[] actual = new double[output.size()]; [EOL]     for (int i = 0; i < actual.length; i++) { [EOL]         actual[i] = output.get(i); [EOL]     } [EOL]     Assert.assertArrayEquals(expected, actual, 1e-5); [EOL] } <line_num>: 243,261
public int getDimension() { [EOL]     return 1; [EOL] } <line_num>: 264,266
public void computeDerivatives(double t, double[] y, double[] yDot) { [EOL]     yDot[0] = y[0]; [EOL] } <line_num>: 269,271
public void init(double t0, double[] y0, double t) { [EOL] } <line_num>: 274,275
public void handleStep(double t, double[] y, double[] yDot, boolean isLast) { [EOL]     output.add(t); [EOL] } <line_num>: 278,280
