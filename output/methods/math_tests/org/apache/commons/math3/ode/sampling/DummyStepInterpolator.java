public DummyStepInterpolator() { [EOL]     super(); [EOL]     currentDerivative = null; [EOL] } <line_num>: 59,62
public DummyStepInterpolator(final double[] y, final double[] yDot, final boolean forward) { [EOL]     super(y, forward, new EquationsMapper(0, y.length), new EquationsMapper[0]); [EOL]     currentDerivative = yDot; [EOL] } <line_num>: 71,74
public DummyStepInterpolator(final DummyStepInterpolator interpolator) { [EOL]     super(interpolator); [EOL]     currentDerivative = interpolator.currentDerivative.clone(); [EOL] } <line_num>: 81,84
@Override [EOL] protected StepInterpolator doCopy() { [EOL]     return new DummyStepInterpolator(this); [EOL] } <line_num>: 89,92
@Override [EOL] protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH) { [EOL]     System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length); [EOL]     System.arraycopy(currentDerivative, 0, interpolatedDerivatives, 0, currentDerivative.length); [EOL] } <line_num>: 102,106
@Override [EOL] public void writeExternal(final ObjectOutput out) throws IOException { [EOL]     writeBaseExternal(out); [EOL]     if (currentDerivative != null) { [EOL]         for (int i = 0; i < currentDerivative.length; ++i) { [EOL]             out.writeDouble(currentDerivative[i]); [EOL]         } [EOL]     } [EOL] } <line_num>: 112,125
@Override [EOL] public void readExternal(final ObjectInput in) throws IOException, ClassNotFoundException { [EOL]     final double t = readBaseExternal(in); [EOL]     if (currentState == null) { [EOL]         currentDerivative = null; [EOL]     } else { [EOL]         currentDerivative = new double[currentState.length]; [EOL]         for (int i = 0; i < currentDerivative.length; ++i) { [EOL]             currentDerivative[i] = in.readDouble(); [EOL]         } [EOL]     } [EOL]     setInterpolatedTime(t); [EOL] } <line_num>: 131,150
