public StepNormalizerTest() { [EOL]     pb = null; [EOL]     integ = null; [EOL] } <line_num>: 36,39
public void init(double t0, double[] y0, double t) { [EOL] } <line_num>: 50,51
public void handleStep(double t, double[] y, double[] yDot, boolean isLast) { [EOL]     if (firstCall) { [EOL]         checkValue(t, pb.getInitialTime()); [EOL]         firstCall = false; [EOL]     } [EOL]     if (isLast) { [EOL]         setLastSeen(true); [EOL]         checkValue(t, pb.getFinalTime()); [EOL]     } [EOL] } <line_num>: 52,64
@Test [EOL] public void testBoundaries() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     double range = pb.getFinalTime() - pb.getInitialTime(); [EOL]     setLastSeen(false); [EOL]     integ.addStepHandler(new StepNormalizer(range / 10.0, new FixedStepHandler() { [EOL]  [EOL]         private boolean firstCall = true; [EOL]  [EOL]         public void init(double t0, double[] y0, double t) { [EOL]         } [EOL]  [EOL]         public void handleStep(double t, double[] y, double[] yDot, boolean isLast) { [EOL]             if (firstCall) { [EOL]                 checkValue(t, pb.getInitialTime()); [EOL]                 firstCall = false; [EOL]             } [EOL]             if (isLast) { [EOL]                 setLastSeen(true); [EOL]                 checkValue(t, pb.getFinalTime()); [EOL]             } [EOL]         } [EOL]     })); [EOL]     integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(), pb.getFinalTime(), new double[pb.getDimension()]); [EOL]     Assert.assertTrue(lastSeen); [EOL] } <line_num>: 41,70
public void init(double t0, double[] y0, double t) { [EOL] } <line_num>: 80,81
public void handleStep(double t, double[] y, double[] yDot, boolean isLast) { [EOL]     if (isLast) { [EOL]         setLastSeen(true); [EOL]         checkValue(t, pb.getFinalTime() - range / 21.0); [EOL]     } [EOL] } <line_num>: 82,91
@Test [EOL] public void testBeforeEnd() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     final double range = pb.getFinalTime() - pb.getInitialTime(); [EOL]     setLastSeen(false); [EOL]     integ.addStepHandler(new StepNormalizer(range / 10.5, new FixedStepHandler() { [EOL]  [EOL]         public void init(double t0, double[] y0, double t) { [EOL]         } [EOL]  [EOL]         public void handleStep(double t, double[] y, double[] yDot, boolean isLast) { [EOL]             if (isLast) { [EOL]                 setLastSeen(true); [EOL]                 checkValue(t, pb.getFinalTime() - range / 21.0); [EOL]             } [EOL]         } [EOL]     })); [EOL]     integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(), pb.getFinalTime(), new double[pb.getDimension()]); [EOL]     Assert.assertTrue(lastSeen); [EOL] } <line_num>: 72,97
public void checkValue(double value, double reference) { [EOL]     Assert.assertTrue(FastMath.abs(value - reference) < 1.0e-10); [EOL] } <line_num>: 99,101
public void setLastSeen(boolean lastSeen) { [EOL]     this.lastSeen = lastSeen; [EOL] } <line_num>: 103,105
@Before [EOL] public void setUp() { [EOL]     pb = new TestProblem3(0.9); [EOL]     double minStep = 0; [EOL]     double maxStep = pb.getFinalTime() - pb.getInitialTime(); [EOL]     integ = new DormandPrince54Integrator(minStep, maxStep, 10.e-8, 1.0e-8); [EOL]     lastSeen = false; [EOL] } <line_num>: 107,114
@After [EOL] public void tearDown() { [EOL]     pb = null; [EOL]     integ = null; [EOL] } <line_num>: 116,120
