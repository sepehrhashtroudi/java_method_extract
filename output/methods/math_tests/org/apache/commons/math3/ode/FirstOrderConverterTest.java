public Equations(int n, double omega) { [EOL]     this.n = n; [EOL]     omega2 = omega * omega; [EOL] } <line_num>: 82,85
@Test [EOL] public void testDoubleDimension() { [EOL]     for (int i = 1; i < 10; ++i) { [EOL]         SecondOrderDifferentialEquations eqn2 = new Equations(i, 0.2); [EOL]         FirstOrderConverter eqn1 = new FirstOrderConverter(eqn2); [EOL]         Assert.assertTrue(eqn1.getDimension() == (2 * eqn2.getDimension())); [EOL]     } [EOL] } <line_num>: 32,39
@Test [EOL] public void testDecreasingSteps() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     double previousError = Double.NaN; [EOL]     for (int i = 0; i < 10; ++i) { [EOL]         double step = FastMath.pow(2.0, -(i + 1)); [EOL]         double error = integrateWithSpecifiedStep(4.0, 0.0, 1.0, step) - FastMath.sin(4.0); [EOL]         if (i > 0) { [EOL]             Assert.assertTrue(FastMath.abs(error) < FastMath.abs(previousError)); [EOL]         } [EOL]         previousError = error; [EOL]     } [EOL] } <line_num>: 41,57
@Test [EOL] public void testSmallStep() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     double error = integrateWithSpecifiedStep(4.0, 0.0, 1.0, 1.0e-4) - FastMath.sin(4.0); [EOL]     Assert.assertTrue(FastMath.abs(error) < 1.0e-10); [EOL] } <line_num>: 59,65
@Test [EOL] public void testBigStep() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     double error = integrateWithSpecifiedStep(4.0, 0.0, 1.0, 0.5) - FastMath.sin(4.0); [EOL]     Assert.assertTrue(FastMath.abs(error) > 0.1); [EOL] } <line_num>: 67,73
public int getDimension() { [EOL]     return n; [EOL] } <line_num>: 87,89
public void computeSecondDerivatives(double t, double[] y, double[] yDot, double[] yDDot) { [EOL]     for (int i = 0; i < n; ++i) { [EOL]         yDDot[i] = -omega2 * y[i]; [EOL]     } [EOL] } <line_num>: 91,96
private double integrateWithSpecifiedStep(double omega, double t0, double t, double step) throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     double[] y0 = new double[2]; [EOL]     y0[0] = FastMath.sin(omega * t0); [EOL]     y0[1] = omega * FastMath.cos(omega * t0); [EOL]     ClassicalRungeKuttaIntegrator i = new ClassicalRungeKuttaIntegrator(step); [EOL]     double[] y = new double[2]; [EOL]     i.integrate(new FirstOrderConverter(new Equations(1, omega)), t0, y0, t, y); [EOL]     return y[0]; [EOL] } <line_num>: 100,110
