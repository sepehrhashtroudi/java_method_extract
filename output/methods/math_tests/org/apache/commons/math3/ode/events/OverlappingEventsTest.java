public Event(int idx, int eventType) { [EOL]     this.idx = idx; [EOL]     this.eventType = eventType; [EOL] } <line_num>: 143,146
@Test [EOL] public void testOverlappingEvents0() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     test(0); [EOL] } <line_num>: 54,59
@Test [EOL] public void testOverlappingEvents1() throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     test(1); [EOL] } <line_num>: 66,71
public void test(int eventType) throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { [EOL]     double e = 1e-15; [EOL]     FirstOrderIntegrator integrator = new DormandPrince853Integrator(e, 100.0, 1e-7, 1e-7); [EOL]     BaseSecantSolver rootSolver = new PegasusSolver(e, e); [EOL]     EventHandler evt1 = new Event(0, eventType); [EOL]     EventHandler evt2 = new Event(1, eventType); [EOL]     integrator.addEventHandler(evt1, 0.1, e, 999, rootSolver); [EOL]     integrator.addEventHandler(evt2, 0.1, e, 999, rootSolver); [EOL]     double t = 0.0; [EOL]     double tEnd = 10.0; [EOL]     double[] y = { 0.0, 0.0 }; [EOL]     List<Double> events1 = new ArrayList<Double>(); [EOL]     List<Double> events2 = new ArrayList<Double>(); [EOL]     while (t < tEnd) { [EOL]         t = integrator.integrate(this, t, y, tEnd, y); [EOL]         if (y[0] >= 1.0) { [EOL]             y[0] = 0.0; [EOL]             events1.add(t); [EOL]         } [EOL]         if (y[1] >= 1.0) { [EOL]             y[1] = 0.0; [EOL]             events2.add(t); [EOL]         } [EOL]     } [EOL]     Assert.assertEquals(EVENT_TIMES1.length, events1.size()); [EOL]     Assert.assertEquals(EVENT_TIMES2.length, events2.size()); [EOL]     for (int i = 0; i < EVENT_TIMES1.length; i++) { [EOL]         Assert.assertEquals(EVENT_TIMES1[i], events1.get(i), 1e-7); [EOL]     } [EOL]     for (int i = 0; i < EVENT_TIMES2.length; i++) { [EOL]         Assert.assertEquals(EVENT_TIMES2[i], events2.get(i), 1e-7); [EOL]     } [EOL] } <line_num>: 79,118
public int getDimension() { [EOL]     return 2; [EOL] } <line_num>: 121,123
public void computeDerivatives(double t, double[] y, double[] yDot) { [EOL]     yDot[0] = 1.0; [EOL]     yDot[1] = 2.0; [EOL] } <line_num>: 126,129
public void init(double t0, double[] y0, double t) { [EOL] } <line_num>: 149,150
public double g(double t, double[] y) { [EOL]     return (eventType == 0) ? y[idx] >= 1.0 ? 1.0 : -1.0 : y[idx] - 1.0; [EOL] } <line_num>: 153,156
public Action eventOccurred(double t, double[] y, boolean increasing) { [EOL]     return Action.STOP; [EOL] } <line_num>: 159,161
public void resetState(double t, double[] y) { [EOL] } <line_num>: 164,166
