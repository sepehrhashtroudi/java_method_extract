@Override [EOL] public void setUp() { [EOL]     super.setUp(); [EOL]     setTolerance(defaultTolerance); [EOL] } <line_num>: 33,37
@Override [EOL] public IntegerDistribution makeDistribution() { [EOL]     return new PascalDistribution(10, 0.70); [EOL] } <line_num>: 42,45
@Override [EOL] public int[] makeDensityTestPoints() { [EOL]     return new int[] { -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 }; [EOL] } <line_num>: 48,51
@Override [EOL] public double[] makeDensityTestValues() { [EOL]     return new double[] { 0, 0.0282475249, 0.0847425747, 0.139825248255, 0.167790297906, 0.163595540458, 0.137420253985, 0.103065190489, 0.070673273478, 0.0450542118422, 0.0270325271053, 0.0154085404500, 0.0084046584273 }; [EOL] } <line_num>: 54,59
@Override [EOL] public int[] makeCumulativeTestPoints() { [EOL]     return makeDensityTestPoints(); [EOL] } <line_num>: 62,65
@Override [EOL] public double[] makeCumulativeTestValues() { [EOL]     return new double[] { 0, 0.0282475249, 0.1129900996, 0.252815347855, 0.420605645761, 0.584201186219, 0.721621440204, 0.824686630693, 0.895359904171, 0.940414116013, 0.967446643119, 0.982855183569, 0.991259841996 }; [EOL] } <line_num>: 68,73
@Override [EOL] public double[] makeInverseCumulativeTestPoints() { [EOL]     return new double[] { 0.0, 0.001, 0.010, 0.025, 0.050, 0.100, 0.999, 0.990, 0.975, 0.950, 0.900, 1.0 }; [EOL] } <line_num>: 76,80
@Override [EOL] public int[] makeInverseCumulativeTestValues() { [EOL]     return new int[] { 0, 0, 0, 0, 1, 1, 14, 11, 10, 9, 8, Integer.MAX_VALUE }; [EOL] } <line_num>: 83,86
@Test [EOL] public void testDegenerate0() { [EOL]     setDistribution(new PascalDistribution(5, 0.0d)); [EOL]     setCumulativeTestPoints(new int[] { -1, 0, 1, 5, 10 }); [EOL]     setCumulativeTestValues(new double[] { 0d, 0d, 0d, 0d, 0d }); [EOL]     setDensityTestPoints(new int[] { -1, 0, 1, 10, 11 }); [EOL]     setDensityTestValues(new double[] { 0d, 0d, 0d, 0d, 0d }); [EOL]     setInverseCumulativeTestPoints(new double[] { 0.1d, 0.5d }); [EOL]     setInverseCumulativeTestValues(new int[] { Integer.MAX_VALUE, Integer.MAX_VALUE }); [EOL]     verifyDensities(); [EOL]     verifyCumulativeProbabilities(); [EOL]     verifyInverseCumulativeProbabilities(); [EOL] } <line_num>: 91,103
@Test [EOL] public void testDegenerate1() { [EOL]     setDistribution(new PascalDistribution(5, 1.0d)); [EOL]     setCumulativeTestPoints(new int[] { -1, 0, 1, 2, 5, 10 }); [EOL]     setCumulativeTestValues(new double[] { 0d, 1d, 1d, 1d, 1d, 1d }); [EOL]     setDensityTestPoints(new int[] { -1, 0, 1, 2, 5, 10 }); [EOL]     setDensityTestValues(new double[] { 0d, 1d, 0d, 0d, 0d, 0d }); [EOL]     setInverseCumulativeTestPoints(new double[] { 0.1d, 0.5d }); [EOL]     setInverseCumulativeTestValues(new int[] { 0, 0 }); [EOL]     verifyDensities(); [EOL]     verifyCumulativeProbabilities(); [EOL]     verifyInverseCumulativeProbabilities(); [EOL] } <line_num>: 106,118
@Test [EOL] public void testMoments() { [EOL]     final double tol = 1e-9; [EOL]     PascalDistribution dist; [EOL]     dist = new PascalDistribution(10, 0.5); [EOL]     Assert.assertEquals(dist.getNumericalMean(), (10d * 0.5d) / 0.5d, tol); [EOL]     Assert.assertEquals(dist.getNumericalVariance(), (10d * 0.5d) / (0.5d * 0.5d), tol); [EOL]     dist = new PascalDistribution(25, 0.7); [EOL]     Assert.assertEquals(dist.getNumericalMean(), (25d * 0.3d) / 0.7d, tol); [EOL]     Assert.assertEquals(dist.getNumericalVariance(), (25d * 0.3d) / (0.7d * 0.7d), tol); [EOL] } <line_num>: 120,132
