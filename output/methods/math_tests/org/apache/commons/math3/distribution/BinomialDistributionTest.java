@Override [EOL] public IntegerDistribution makeDistribution() { [EOL]     return new BinomialDistribution(10, 0.70); [EOL] } <line_num>: 31,34
@Override [EOL] public int[] makeDensityTestPoints() { [EOL]     return new int[] { -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 }; [EOL] } <line_num>: 37,40
@Override [EOL] public double[] makeDensityTestValues() { [EOL]     return new double[] { 0d, 0.0000059049d, 0.000137781d, 0.0014467d, 0.00900169d, 0.0367569d, 0.102919d, 0.200121d, 0.266828d, 0.233474d, 0.121061d, 0.0282475d, 0d }; [EOL] } <line_num>: 43,48
@Override [EOL] public int[] makeCumulativeTestPoints() { [EOL]     return makeDensityTestPoints(); [EOL] } <line_num>: 51,54
@Override [EOL] public double[] makeCumulativeTestValues() { [EOL]     return new double[] { 0d, 0.0000d, 0.0001d, 0.0016d, 0.0106d, 0.0473d, 0.1503d, 0.3504d, 0.6172d, 0.8507d, 0.9718d, 1d, 1d }; [EOL] } <line_num>: 57,61
@Override [EOL] public double[] makeInverseCumulativeTestPoints() { [EOL]     return new double[] { 0, 0.001d, 0.010d, 0.025d, 0.050d, 0.100d, 0.999d, 0.990d, 0.975d, 0.950d, 0.900d, 1 }; [EOL] } <line_num>: 64,68
@Override [EOL] public int[] makeInverseCumulativeTestValues() { [EOL]     return new int[] { 0, 2, 3, 4, 5, 5, 10, 10, 10, 9, 9, 10 }; [EOL] } <line_num>: 74,77
@Test [EOL] public void testDegenerate0() { [EOL]     BinomialDistribution dist = new BinomialDistribution(5, 0.0d); [EOL]     setDistribution(dist); [EOL]     setCumulativeTestPoints(new int[] { -1, 0, 1, 5, 10 }); [EOL]     setCumulativeTestValues(new double[] { 0d, 1d, 1d, 1d, 1d }); [EOL]     setDensityTestPoints(new int[] { -1, 0, 1, 10, 11 }); [EOL]     setDensityTestValues(new double[] { 0d, 1d, 0d, 0d, 0d }); [EOL]     setInverseCumulativeTestPoints(new double[] { 0.1d, 0.5d }); [EOL]     setInverseCumulativeTestValues(new int[] { 0, 0 }); [EOL]     verifyDensities(); [EOL]     verifyCumulativeProbabilities(); [EOL]     verifyInverseCumulativeProbabilities(); [EOL]     Assert.assertEquals(dist.getSupportLowerBound(), 0); [EOL]     Assert.assertEquals(dist.getSupportUpperBound(), 0); [EOL] } <line_num>: 82,97
@Test [EOL] public void testDegenerate1() { [EOL]     BinomialDistribution dist = new BinomialDistribution(5, 1.0d); [EOL]     setDistribution(dist); [EOL]     setCumulativeTestPoints(new int[] { -1, 0, 1, 2, 5, 10 }); [EOL]     setCumulativeTestValues(new double[] { 0d, 0d, 0d, 0d, 1d, 1d }); [EOL]     setDensityTestPoints(new int[] { -1, 0, 1, 2, 5, 10 }); [EOL]     setDensityTestValues(new double[] { 0d, 0d, 0d, 0d, 1d, 0d }); [EOL]     setInverseCumulativeTestPoints(new double[] { 0.1d, 0.5d }); [EOL]     setInverseCumulativeTestValues(new int[] { 5, 5 }); [EOL]     verifyDensities(); [EOL]     verifyCumulativeProbabilities(); [EOL]     verifyInverseCumulativeProbabilities(); [EOL]     Assert.assertEquals(dist.getSupportLowerBound(), 5); [EOL]     Assert.assertEquals(dist.getSupportUpperBound(), 5); [EOL] } <line_num>: 100,115
@Test [EOL] public void testMoments() { [EOL]     final double tol = 1e-9; [EOL]     BinomialDistribution dist; [EOL]     dist = new BinomialDistribution(10, 0.5); [EOL]     Assert.assertEquals(dist.getNumericalMean(), 10d * 0.5d, tol); [EOL]     Assert.assertEquals(dist.getNumericalVariance(), 10d * 0.5d * 0.5d, tol); [EOL]     dist = new BinomialDistribution(30, 0.3); [EOL]     Assert.assertEquals(dist.getNumericalMean(), 30d * 0.3d, tol); [EOL]     Assert.assertEquals(dist.getNumericalVariance(), 30d * 0.3d * (1d - 0.3d), tol); [EOL] } <line_num>: 117,129
@Test [EOL] public void testMath718() { [EOL]     for (int trials = 500000; trials < 20000000; trials += 100000) { [EOL]         BinomialDistribution dist = new BinomialDistribution(trials, 0.5); [EOL]         int p = dist.inverseCumulativeProbability(0.5); [EOL]         Assert.assertEquals(trials / 2, p); [EOL]     } [EOL] } <line_num>: 131,142
