@Override [EOL] public void setUp() { [EOL]     super.setUp(); [EOL]     setTolerance(1E-9); [EOL] } <line_num>: 35,39
@Override [EOL] public ExponentialDistribution makeDistribution() { [EOL]     return new ExponentialDistribution(5.0); [EOL] } <line_num>: 44,47
@Override [EOL] public double[] makeCumulativeTestPoints() { [EOL]     return new double[] { 0.00500250166792, 0.0502516792675, 0.126589039921, 0.256466471938, 0.526802578289, 34.5387763949, 23.0258509299, 18.4443972706, 14.9786613678, 11.5129254650 }; [EOL] } <line_num>: 50,55
@Override [EOL] public double[] makeCumulativeTestValues() { [EOL]     return new double[] { 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.990, 0.975, 0.950, 0.900 }; [EOL] } <line_num>: 58,62
@Override [EOL] public double[] makeDensityTestValues() { [EOL]     return new double[] { 0.1998, 0.198, 0.195, 0.19, 0.18, 0.000200000000000, 0.00200000000002, 0.00499999999997, 0.00999999999994, 0.0199999999999 }; [EOL] } <line_num>: 65,69
@Test [EOL] public void testCumulativeProbabilityExtremes() { [EOL]     setCumulativeTestPoints(new double[] { -2, 0 }); [EOL]     setCumulativeTestValues(new double[] { 0, 0 }); [EOL]     verifyCumulativeProbabilities(); [EOL] } <line_num>: 73,78
@Test [EOL] public void testInverseCumulativeProbabilityExtremes() { [EOL]     setInverseCumulativeTestPoints(new double[] { 0, 1 }); [EOL]     setInverseCumulativeTestValues(new double[] { 0, Double.POSITIVE_INFINITY }); [EOL]     verifyInverseCumulativeProbabilities(); [EOL] } <line_num>: 80,85
@Test [EOL] public void testCumulativeProbability2() { [EOL]     double actual = getDistribution().cumulativeProbability(0.25, 0.75); [EOL]     Assert.assertEquals(0.0905214, actual, 10e-4); [EOL] } <line_num>: 87,91
@Test [EOL] public void testDensity() { [EOL]     ExponentialDistribution d1 = new ExponentialDistribution(1); [EOL]     Assert.assertTrue(Precision.equals(0.0, d1.density(-1e-9), 1)); [EOL]     Assert.assertTrue(Precision.equals(1.0, d1.density(0.0), 1)); [EOL]     Assert.assertTrue(Precision.equals(0.0, d1.density(1000.0), 1)); [EOL]     Assert.assertTrue(Precision.equals(FastMath.exp(-1), d1.density(1.0), 1)); [EOL]     Assert.assertTrue(Precision.equals(FastMath.exp(-2), d1.density(2.0), 1)); [EOL]     ExponentialDistribution d2 = new ExponentialDistribution(3); [EOL]     Assert.assertTrue(Precision.equals(1 / 3.0, d2.density(0.0), 1)); [EOL]     Assert.assertEquals(0.2388437702, d2.density(1.0), 1e-8); [EOL]     Assert.assertEquals(0.1711390397, d2.density(2.0), 1e-8); [EOL] } <line_num>: 93,109
@Test [EOL] public void testMeanAccessors() { [EOL]     ExponentialDistribution distribution = (ExponentialDistribution) getDistribution(); [EOL]     Assert.assertEquals(5d, distribution.getMean(), Double.MIN_VALUE); [EOL] } <line_num>: 111,115
@Test(expected = NotStrictlyPositiveException.class) [EOL] public void testPreconditions() { [EOL]     new ExponentialDistribution(0); [EOL] } <line_num>: 117,120
@Test [EOL] public void testMoments() { [EOL]     final double tol = 1e-9; [EOL]     ExponentialDistribution dist; [EOL]     dist = new ExponentialDistribution(11d); [EOL]     Assert.assertEquals(dist.getNumericalMean(), 11d, tol); [EOL]     Assert.assertEquals(dist.getNumericalVariance(), 11d * 11d, tol); [EOL]     dist = new ExponentialDistribution(10.5d); [EOL]     Assert.assertEquals(dist.getNumericalMean(), 10.5d, tol); [EOL]     Assert.assertEquals(dist.getNumericalVariance(), 10.5d * 10.5d, tol); [EOL] } <line_num>: 122,134
