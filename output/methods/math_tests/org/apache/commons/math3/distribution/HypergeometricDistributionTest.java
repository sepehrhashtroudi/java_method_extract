@Override [EOL] public IntegerDistribution makeDistribution() { [EOL]     return new HypergeometricDistribution(10, 5, 5); [EOL] } <line_num>: 40,43
@Override [EOL] public int[] makeDensityTestPoints() { [EOL]     return new int[] { -1, 0, 1, 2, 3, 4, 5, 10 }; [EOL] } <line_num>: 46,49
@Override [EOL] public double[] makeDensityTestValues() { [EOL]     return new double[] { 0d, 0.003968d, 0.099206d, 0.396825d, 0.396825d, 0.099206d, 0.003968d, 0d }; [EOL] } <line_num>: 52,56
@Override [EOL] public int[] makeCumulativeTestPoints() { [EOL]     return makeDensityTestPoints(); [EOL] } <line_num>: 59,62
@Override [EOL] public double[] makeCumulativeTestValues() { [EOL]     return new double[] { 0d, .003968d, .103175d, .50000d, .896825d, .996032d, 1.00000d, 1d }; [EOL] } <line_num>: 65,69
@Override [EOL] public double[] makeInverseCumulativeTestPoints() { [EOL]     return new double[] { 0d, 0.001d, 0.010d, 0.025d, 0.050d, 0.100d, 0.999d, 0.990d, 0.975d, 0.950d, 0.900d, 1d }; [EOL] } <line_num>: 72,76
@Override [EOL] public int[] makeInverseCumulativeTestValues() { [EOL]     return new int[] { 0, 0, 1, 1, 1, 1, 5, 4, 4, 4, 4, 5 }; [EOL] } <line_num>: 79,82
@Test [EOL] public void testDegenerateNoFailures() { [EOL]     HypergeometricDistribution dist = new HypergeometricDistribution(5, 5, 3); [EOL]     setDistribution(dist); [EOL]     setCumulativeTestPoints(new int[] { -1, 0, 1, 3, 10 }); [EOL]     setCumulativeTestValues(new double[] { 0d, 0d, 0d, 1d, 1d }); [EOL]     setDensityTestPoints(new int[] { -1, 0, 1, 3, 10 }); [EOL]     setDensityTestValues(new double[] { 0d, 0d, 0d, 1d, 0d }); [EOL]     setInverseCumulativeTestPoints(new double[] { 0.1d, 0.5d }); [EOL]     setInverseCumulativeTestValues(new int[] { 3, 3 }); [EOL]     verifyDensities(); [EOL]     verifyCumulativeProbabilities(); [EOL]     verifyInverseCumulativeProbabilities(); [EOL]     Assert.assertEquals(dist.getSupportLowerBound(), 3); [EOL]     Assert.assertEquals(dist.getSupportUpperBound(), 3); [EOL] } <line_num>: 87,102
@Test [EOL] public void testDegenerateNoSuccesses() { [EOL]     HypergeometricDistribution dist = new HypergeometricDistribution(5, 0, 3); [EOL]     setDistribution(dist); [EOL]     setCumulativeTestPoints(new int[] { -1, 0, 1, 3, 10 }); [EOL]     setCumulativeTestValues(new double[] { 0d, 1d, 1d, 1d, 1d }); [EOL]     setDensityTestPoints(new int[] { -1, 0, 1, 3, 10 }); [EOL]     setDensityTestValues(new double[] { 0d, 1d, 0d, 0d, 0d }); [EOL]     setInverseCumulativeTestPoints(new double[] { 0.1d, 0.5d }); [EOL]     setInverseCumulativeTestValues(new int[] { 0, 0 }); [EOL]     verifyDensities(); [EOL]     verifyCumulativeProbabilities(); [EOL]     verifyInverseCumulativeProbabilities(); [EOL]     Assert.assertEquals(dist.getSupportLowerBound(), 0); [EOL]     Assert.assertEquals(dist.getSupportUpperBound(), 0); [EOL] } <line_num>: 105,120
@Test [EOL] public void testDegenerateFullSample() { [EOL]     HypergeometricDistribution dist = new HypergeometricDistribution(5, 3, 5); [EOL]     setDistribution(dist); [EOL]     setCumulativeTestPoints(new int[] { -1, 0, 1, 3, 10 }); [EOL]     setCumulativeTestValues(new double[] { 0d, 0d, 0d, 1d, 1d }); [EOL]     setDensityTestPoints(new int[] { -1, 0, 1, 3, 10 }); [EOL]     setDensityTestValues(new double[] { 0d, 0d, 0d, 1d, 0d }); [EOL]     setInverseCumulativeTestPoints(new double[] { 0.1d, 0.5d }); [EOL]     setInverseCumulativeTestValues(new int[] { 3, 3 }); [EOL]     verifyDensities(); [EOL]     verifyCumulativeProbabilities(); [EOL]     verifyInverseCumulativeProbabilities(); [EOL]     Assert.assertEquals(dist.getSupportLowerBound(), 3); [EOL]     Assert.assertEquals(dist.getSupportUpperBound(), 3); [EOL] } <line_num>: 123,138
@Test [EOL] public void testPreconditions() { [EOL]     try { [EOL]         new HypergeometricDistribution(0, 3, 5); [EOL]         Assert.fail("negative population size. NotStrictlyPositiveException expected"); [EOL]     } catch (NotStrictlyPositiveException ex) { [EOL]     } [EOL]     try { [EOL]         new HypergeometricDistribution(5, -1, 5); [EOL]         Assert.fail("negative number of successes. NotPositiveException expected"); [EOL]     } catch (NotPositiveException ex) { [EOL]     } [EOL]     try { [EOL]         new HypergeometricDistribution(5, 3, -1); [EOL]         Assert.fail("negative sample size. NotPositiveException expected"); [EOL]     } catch (NotPositiveException ex) { [EOL]     } [EOL]     try { [EOL]         new HypergeometricDistribution(5, 6, 5); [EOL]         Assert.fail("numberOfSuccesses > populationSize. NumberIsTooLargeException expected"); [EOL]     } catch (NumberIsTooLargeException ex) { [EOL]     } [EOL]     try { [EOL]         new HypergeometricDistribution(5, 3, 6); [EOL]         Assert.fail("sampleSize > populationSize. NumberIsTooLargeException expected"); [EOL]     } catch (NumberIsTooLargeException ex) { [EOL]     } [EOL] } <line_num>: 140,172
@Test [EOL] public void testAccessors() { [EOL]     HypergeometricDistribution dist = new HypergeometricDistribution(5, 3, 4); [EOL]     Assert.assertEquals(5, dist.getPopulationSize()); [EOL]     Assert.assertEquals(3, dist.getNumberOfSuccesses()); [EOL]     Assert.assertEquals(4, dist.getSampleSize()); [EOL] } <line_num>: 174,180
@Test [EOL] public void testLargeValues() { [EOL]     int populationSize = 3456; [EOL]     int sampleSize = 789; [EOL]     int numberOfSucceses = 101; [EOL]     double[][] data = { { 0.0, 2.75646034603961e-12, 2.75646034603961e-12, 1.0 }, { 1.0, 8.55705370142386e-11, 8.83269973602783e-11, 0.999999999997244 }, { 2.0, 1.31288129219665e-9, 1.40120828955693e-9, 0.999999999911673 }, { 3.0, 1.32724172984193e-8, 1.46736255879763e-8, 0.999999998598792 }, { 4.0, 9.94501711734089e-8, 1.14123796761385e-7, 0.999999985326375 }, { 5.0, 5.89080768883643e-7, 7.03204565645028e-7, 0.999999885876203 }, { 20.0, 0.0760051397707708, 0.27349758476299, 0.802507555007781 }, { 21.0, 0.087144222047629, 0.360641806810619, 0.72650241523701 }, { 22.0, 0.0940378846881819, 0.454679691498801, 0.639358193189381 }, { 23.0, 0.0956897500614809, 0.550369441560282, 0.545320308501199 }, { 24.0, 0.0919766921922999, 0.642346133752582, 0.449630558439718 }, { 25.0, 0.083641637261095, 0.725987771013677, 0.357653866247418 }, { 96.0, 5.93849188852098e-57, 1.0, 6.01900244560712e-57 }, { 97.0, 7.96593036832547e-59, 1.0, 8.05105570861321e-59 }, { 98.0, 8.44582921934367e-61, 1.0, 8.5125340287733e-61 }, { 99.0, 6.63604297068222e-63, 1.0, 6.670480942963e-63 }, { 100.0, 3.43501099007557e-65, 1.0, 3.4437972280786e-65 }, { 101.0, 8.78623800302957e-68, 1.0, 8.78623800302957e-68 } }; [EOL]     testHypergeometricDistributionProbabilities(populationSize, sampleSize, numberOfSucceses, data); [EOL] } <line_num>: 182,209
private void testHypergeometricDistributionProbabilities(int populationSize, int sampleSize, int numberOfSucceses, double[][] data) { [EOL]     HypergeometricDistribution dist = new HypergeometricDistribution(populationSize, numberOfSucceses, sampleSize); [EOL]     for (int i = 0; i < data.length; ++i) { [EOL]         int x = (int) data[i][0]; [EOL]         double pmf = data[i][1]; [EOL]         double actualPmf = dist.probability(x); [EOL]         TestUtils.assertRelativelyEquals("Expected equals for <" + x + "> pmf", pmf, actualPmf, 1.0e-9); [EOL]         double cdf = data[i][2]; [EOL]         double actualCdf = dist.cumulativeProbability(x); [EOL]         TestUtils.assertRelativelyEquals("Expected equals for <" + x + "> cdf", cdf, actualCdf, 1.0e-9); [EOL]         double cdf1 = data[i][3]; [EOL]         double actualCdf1 = dist.upperCumulativeProbability(x); [EOL]         TestUtils.assertRelativelyEquals("Expected equals for <" + x + "> cdf1", cdf1, actualCdf1, 1.0e-9); [EOL]     } [EOL] } <line_num>: 211,227
@Test [EOL] public void testMoreLargeValues() { [EOL]     int populationSize = 26896; [EOL]     int sampleSize = 895; [EOL]     int numberOfSucceses = 55; [EOL]     double[][] data = { { 0.0, 0.155168304750504, 0.155168304750504, 1.0 }, { 1.0, 0.29437545000746, 0.449543754757964, 0.844831695249496 }, { 2.0, 0.273841321577003, 0.723385076334967, 0.550456245242036 }, { 3.0, 0.166488572570786, 0.889873648905753, 0.276614923665033 }, { 4.0, 0.0743969744713231, 0.964270623377076, 0.110126351094247 }, { 5.0, 0.0260542785784855, 0.990324901955562, 0.0357293766229237 }, { 20.0, 3.57101101678792e-16, 1.0, 3.78252101622096e-16 }, { 21.0, 2.00551638598312e-17, 1.0, 2.11509999433041e-17 }, { 22.0, 1.04317070180562e-18, 1.0, 1.09583608347287e-18 }, { 23.0, 5.03153504903308e-20, 1.0, 5.266538166725e-20 }, { 24.0, 2.2525984149695e-21, 1.0, 2.35003117691919e-21 }, { 25.0, 9.3677424515947e-23, 1.0, 9.74327619496943e-23 }, { 50.0, 9.83633962945521e-69, 1.0, 9.8677629437617e-69 }, { 51.0, 3.13448949497553e-71, 1.0, 3.14233143064882e-71 }, { 52.0, 7.82755221928122e-74, 1.0, 7.84193567329055e-74 }, { 53.0, 1.43662126065532e-76, 1.0, 1.43834540093295e-76 }, { 54.0, 1.72312692517348e-79, 1.0, 1.7241402776278e-79 }, { 55.0, 1.01335245432581e-82, 1.0, 1.01335245432581e-82 } }; [EOL]     testHypergeometricDistributionProbabilities(populationSize, sampleSize, numberOfSucceses, data); [EOL] } <line_num>: 229,255
@Test [EOL] public void testMoments() { [EOL]     final double tol = 1e-9; [EOL]     HypergeometricDistribution dist; [EOL]     dist = new HypergeometricDistribution(1500, 40, 100); [EOL]     Assert.assertEquals(dist.getNumericalMean(), 40d * 100d / 1500d, tol); [EOL]     Assert.assertEquals(dist.getNumericalVariance(), (100d * 40d * (1500d - 100d) * (1500d - 40d)) / ((1500d * 1500d * 1499d)), tol); [EOL]     dist = new HypergeometricDistribution(3000, 55, 200); [EOL]     Assert.assertEquals(dist.getNumericalMean(), 55d * 200d / 3000d, tol); [EOL]     Assert.assertEquals(dist.getNumericalVariance(), (200d * 55d * (3000d - 200d) * (3000d - 55d)) / ((3000d * 3000d * 2999d)), tol); [EOL] } <line_num>: 257,269
@Test [EOL] public void testMath644() { [EOL]     int N = 14761461; [EOL]     int m = 1035; [EOL]     int n = 1841; [EOL]     int k = 0; [EOL]     final HypergeometricDistribution dist = new HypergeometricDistribution(N, m, n); [EOL]     Assert.assertTrue(Precision.compareTo(1.0, dist.upperCumulativeProbability(k), 1) == 0); [EOL]     Assert.assertTrue(Precision.compareTo(dist.cumulativeProbability(k), 0.0, 1) > 0); [EOL]     double upper = 1.0 - dist.cumulativeProbability(k) + dist.probability(k); [EOL]     Assert.assertTrue(Precision.compareTo(1.0, upper, 1) == 0); [EOL] } <line_num>: 271,286
@Test [EOL] public void testMath1021() { [EOL]     final int N = 43130568; [EOL]     final int m = 42976365; [EOL]     final int n = 50; [EOL]     final HypergeometricDistribution dist = new HypergeometricDistribution(N, m, n); [EOL]     for (int i = 0; i < 100; i++) { [EOL]         final int sample = dist.sample(); [EOL]         Assert.assertTrue("sample=" + sample, 0 <= sample); [EOL]         Assert.assertTrue("sample=" + sample, sample <= n); [EOL]     } [EOL] } <line_num>: 288,300
