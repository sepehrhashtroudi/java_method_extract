@Override [EOL] public LogNormalDistribution makeDistribution() { [EOL]     return new LogNormalDistribution(2.1, 1.4); [EOL] } <line_num>: 37,40
@Override [EOL] public double[] makeCumulativeTestPoints() { [EOL]     return new double[] { -2.226325228634938, -1.156887023657177, -0.643949578356075, -0.2027950777320613, 0.305827808237559, 6.42632522863494, 5.35688702365718, 4.843949578356074, 4.40279507773206, 3.89417219176244 }; [EOL] } <line_num>: 43,51
@Override [EOL] public double[] makeCumulativeTestValues() { [EOL]     return new double[] { 0, 0, 0, 0, 0.00948199951485, 0.432056525076, 0.381648158697, 0.354555726206, 0.329513316888, 0.298422824228 }; [EOL] } <line_num>: 54,59
@Override [EOL] public double[] makeDensityTestValues() { [EOL]     return new double[] { 0, 0, 0, 0, 0.0594218160072, 0.0436977691036, 0.0508364857798, 0.054873528325, 0.0587182664085, 0.0636229042785 }; [EOL] } <line_num>: 62,67
@Override [EOL] public double[] makeInverseCumulativeTestPoints() { [EOL]     double[] points = makeCumulativeTestValues(); [EOL]     double[] points2 = new double[points.length - 4]; [EOL]     System.arraycopy(points, 4, points2, 0, points2.length - 4); [EOL]     return points2; [EOL] } <line_num>: 73,83
@Override [EOL] public double[] makeInverseCumulativeTestValues() { [EOL]     double[] points = makeCumulativeTestPoints(); [EOL]     double[] points2 = new double[points.length - 4]; [EOL]     System.arraycopy(points, 4, points2, 0, points2.length - 4); [EOL]     return points2; [EOL] } <line_num>: 89,99
@Override [EOL] public void setUp() { [EOL]     super.setUp(); [EOL]     setTolerance(LogNormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY); [EOL] } <line_num>: 102,106
private void verifyQuantiles() { [EOL]     LogNormalDistribution distribution = (LogNormalDistribution) getDistribution(); [EOL]     double mu = distribution.getScale(); [EOL]     double sigma = distribution.getShape(); [EOL]     setCumulativeTestPoints(new double[] { mu - 2 * sigma, mu - sigma, mu, mu + sigma, mu + 2 * sigma, mu + 3 * sigma, mu + 4 * sigma, mu + 5 * sigma }); [EOL]     verifyCumulativeProbabilities(); [EOL] } <line_num>: 110,119
@Test [EOL] public void testQuantiles() { [EOL]     setCumulativeTestValues(new double[] { 0, 0.0396495152787, 0.16601209243, 0.272533253269, 0.357618409638, 0.426488363093, 0.483255136841, 0.530823013877 }); [EOL]     setDensityTestValues(new double[] { 0, 0.0873055825147, 0.0847676303432, 0.0677935186237, 0.0544105523058, 0.0444614628804, 0.0369750288945, 0.0312206409653 }); [EOL]     verifyQuantiles(); [EOL]     verifyDensities(); [EOL]     setDistribution(new LogNormalDistribution(0, 1)); [EOL]     setCumulativeTestValues(new double[] { 0, 0, 0, 0.5, 0.755891404214, 0.864031392359, 0.917171480998, 0.946239689548 }); [EOL]     setDensityTestValues(new double[] { 0, 0, 0, 0.398942280401, 0.156874019279, 0.07272825614, 0.0381534565119, 0.0218507148303 }); [EOL]     verifyQuantiles(); [EOL]     verifyDensities(); [EOL]     setDistribution(new LogNormalDistribution(0, 0.1)); [EOL]     setCumulativeTestValues(new double[] { 0, 0, 0, 1.28417563064e-117, 1.39679883412e-58, 1.09839325447e-33, 2.52587961726e-20, 2.0824223487e-12 }); [EOL]     setDensityTestValues(new double[] { 0, 0, 0, 2.96247992535e-114, 1.1283370232e-55, 4.43812313223e-31, 5.85346445002e-18, 2.9446618076e-10 }); [EOL]     verifyQuantiles(); [EOL]     verifyDensities(); [EOL] } <line_num>: 121,156
@Test [EOL] public void testInverseCumulativeProbabilityExtremes() { [EOL]     setInverseCumulativeTestPoints(new double[] { 0, 1 }); [EOL]     setInverseCumulativeTestValues(new double[] { 0, Double.POSITIVE_INFINITY }); [EOL]     verifyInverseCumulativeProbabilities(); [EOL] } <line_num>: 158,164
@Test [EOL] public void testGetScale() { [EOL]     LogNormalDistribution distribution = (LogNormalDistribution) getDistribution(); [EOL]     Assert.assertEquals(2.1, distribution.getScale(), 0); [EOL] } <line_num>: 166,170
@Test [EOL] public void testGetShape() { [EOL]     LogNormalDistribution distribution = (LogNormalDistribution) getDistribution(); [EOL]     Assert.assertEquals(1.4, distribution.getShape(), 0); [EOL] } <line_num>: 172,176
@Test(expected = NotStrictlyPositiveException.class) [EOL] public void testPreconditions() { [EOL]     new LogNormalDistribution(1, 0); [EOL] } <line_num>: 178,181
@Test [EOL] public void testDensity() { [EOL]     double[] x = new double[] { -2, -1, 0, 1, 2 }; [EOL]     checkDensity(0, 1, x, new double[] { 0.0000000000, 0.0000000000, 0.0000000000, 0.3989422804, 0.1568740193 }); [EOL]     checkDensity(1.1, 1, x, new double[] { 0.0000000000, 0.0000000000, 0.0000000000, 0.2178521770, 0.1836267118 }); [EOL] } <line_num>: 183,194
private void checkDensity(double scale, double shape, double[] x, double[] expected) { [EOL]     LogNormalDistribution d = new LogNormalDistribution(scale, shape); [EOL]     for (int i = 0; i < x.length; i++) { [EOL]         Assert.assertEquals(expected[i], d.density(x[i]), 1e-9); [EOL]     } [EOL] } <line_num>: 196,202
@Test [EOL] public void testExtremeValues() { [EOL]     LogNormalDistribution d = new LogNormalDistribution(0, 1); [EOL]     for (int i = 0; i < 1e5; i++) { [EOL]         double upperTail = d.cumulativeProbability(i); [EOL]         if (i <= 72) { [EOL]             Assert.assertTrue(upperTail < 1.0d); [EOL]         } else { [EOL]             Assert.assertTrue(upperTail > 0.99999); [EOL]         } [EOL]     } [EOL]     Assert.assertEquals(d.cumulativeProbability(Double.MAX_VALUE), 1, 0); [EOL]     Assert.assertEquals(d.cumulativeProbability(-Double.MAX_VALUE), 0, 0); [EOL]     Assert.assertEquals(d.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0); [EOL]     Assert.assertEquals(d.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0); [EOL] } <line_num>: 208,225
@Test [EOL] public void testMeanVariance() { [EOL]     final double tol = 1e-9; [EOL]     LogNormalDistribution dist; [EOL]     dist = new LogNormalDistribution(0, 1); [EOL]     Assert.assertEquals(dist.getNumericalMean(), 1.6487212707001282, tol); [EOL]     Assert.assertEquals(dist.getNumericalVariance(), 4.670774270471604, tol); [EOL]     dist = new LogNormalDistribution(2.2, 1.4); [EOL]     Assert.assertEquals(dist.getNumericalMean(), 24.046753552064498, tol); [EOL]     Assert.assertEquals(dist.getNumericalVariance(), 3526.913651880464, tol); [EOL]     dist = new LogNormalDistribution(-2000.9, 10.4); [EOL]     Assert.assertEquals(dist.getNumericalMean(), 0.0, tol); [EOL]     Assert.assertEquals(dist.getNumericalVariance(), 0.0, tol); [EOL] } <line_num>: 227,245
