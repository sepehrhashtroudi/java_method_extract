@Override [EOL] public ParetoDistribution makeDistribution() { [EOL]     return new ParetoDistribution(2.1, 1.4); [EOL] } <line_num>: 37,40
@Override [EOL] public double[] makeCumulativeTestPoints() { [EOL]     return new double[] { -2.226325228634938, -1.156887023657177, -0.643949578356075, -0.2027950777320613, 0.305827808237559, +6.42632522863494, 5.35688702365718, 4.843949578356074, 4.40279507773206, 3.89417219176244 }; [EOL] } <line_num>: 43,48
@Override [EOL] public double[] makeCumulativeTestValues() { [EOL]     return new double[] { 0, 0, 0, 0, 0, 0.791089998892, 0.730456085931, 0.689667290488, 0.645278794701, 0.578763688757 }; [EOL] } <line_num>: 51,54
@Override [EOL] public double[] makeDensityTestValues() { [EOL]     return new double[] { 0, 0, 0, 0, 0, 0.0455118580441, 0.070444173646, 0.0896924681582, 0.112794186114, 0.151439332084 }; [EOL] } <line_num>: 57,60
@Override [EOL] public double[] makeInverseCumulativeTestPoints() { [EOL]     double[] points = makeCumulativeTestValues(); [EOL]     double[] points2 = new double[points.length - 5]; [EOL]     System.arraycopy(points, 5, points2, 0, points.length - 5); [EOL]     return points2; [EOL] } <line_num>: 65,74
@Override [EOL] public double[] makeInverseCumulativeTestValues() { [EOL]     double[] points = makeCumulativeTestPoints(); [EOL]     double[] points2 = new double[points.length - 5]; [EOL]     System.arraycopy(points, 5, points2, 0, points.length - 5); [EOL]     return points2; [EOL] } <line_num>: 79,88
@Override [EOL] public void setUp() { [EOL]     super.setUp(); [EOL]     setTolerance(ParetoDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY); [EOL] } <line_num>: 91,95
private void verifyQuantiles() { [EOL]     ParetoDistribution distribution = (ParetoDistribution) getDistribution(); [EOL]     double mu = distribution.getScale(); [EOL]     double sigma = distribution.getShape(); [EOL]     setCumulativeTestPoints(new double[] { mu - 2 * sigma, mu - sigma, mu, mu + sigma, mu + 2 * sigma, mu + 3 * sigma, mu + 4 * sigma, mu + 5 * sigma }); [EOL]     verifyCumulativeProbabilities(); [EOL] } <line_num>: 99,108
@Test [EOL] public void testQuantiles() { [EOL]     setCumulativeTestValues(new double[] { 0, 0, 0, 0.510884134236, 0.694625688662, 0.785201995008, 0.837811522357, 0.871634279326 }); [EOL]     setDensityTestValues(new double[] { 0, 0, 0.666666666, 0.195646346305, 0.0872498032394, 0.0477328899983, 0.0294888141169, 0.0197485724114 }); [EOL]     verifyQuantiles(); [EOL]     verifyDensities(); [EOL]     setDistribution(new ParetoDistribution(1, 1)); [EOL]     setCumulativeTestValues(new double[] { 0, 0, 0, 0.5, 0.666666666667, 0.75, 0.8, 0.833333333333 }); [EOL]     setDensityTestValues(new double[] { 0, 0, 1.0, 0.25, 0.111111111111, 0.0625, 0.04, 0.0277777777778 }); [EOL]     verifyQuantiles(); [EOL]     verifyDensities(); [EOL]     setDistribution(new ParetoDistribution(0.1, 0.1)); [EOL]     setCumulativeTestValues(new double[] { 0, 0, 0, 0.0669670084632, 0.104041540159, 0.129449436704, 0.148660077479, 0.164041197922 }); [EOL]     setDensityTestValues(new double[] { 0, 0, 1.0, 0.466516495768, 0.298652819947, 0.217637640824, 0.170267984504, 0.139326467013 }); [EOL]     verifyQuantiles(); [EOL]     verifyDensities(); [EOL] } <line_num>: 110,128
@Test [EOL] public void testInverseCumulativeProbabilityExtremes() { [EOL]     setInverseCumulativeTestPoints(new double[] { 0, 1 }); [EOL]     setInverseCumulativeTestValues(new double[] { 2.1, Double.POSITIVE_INFINITY }); [EOL]     verifyInverseCumulativeProbabilities(); [EOL] } <line_num>: 130,135
@Test [EOL] public void testGetScale() { [EOL]     ParetoDistribution distribution = (ParetoDistribution) getDistribution(); [EOL]     Assert.assertEquals(2.1, distribution.getScale(), 0); [EOL] } <line_num>: 137,141
@Test [EOL] public void testGetShape() { [EOL]     ParetoDistribution distribution = (ParetoDistribution) getDistribution(); [EOL]     Assert.assertEquals(1.4, distribution.getShape(), 0); [EOL] } <line_num>: 143,147
@Test(expected = NotStrictlyPositiveException.class) [EOL] public void testPreconditions() { [EOL]     new ParetoDistribution(1, 0); [EOL] } <line_num>: 149,152
@Test [EOL] public void testDensity() { [EOL]     double[] x = new double[] { -2, -1, 0, 1, 2 }; [EOL]     checkDensity(1, 1, x, new double[] { 0.00, 0.00, 0.00, 1.00, 0.25 }); [EOL]     checkDensity(1.1, 1, x, new double[] { 0.000, 0.000, 0.000, 0.000, 0.275 }); [EOL] } <line_num>: 154,161
private void checkDensity(double scale, double shape, double[] x, double[] expected) { [EOL]     ParetoDistribution d = new ParetoDistribution(scale, shape); [EOL]     for (int i = 0; i < x.length; i++) { [EOL]         Assert.assertEquals(expected[i], d.density(x[i]), 1e-9); [EOL]     } [EOL] } <line_num>: 163,169
@Test [EOL] public void testExtremeValues() { [EOL]     ParetoDistribution d = new ParetoDistribution(1, 1); [EOL]     for (int i = 0; i < 1e5; i++) { [EOL]         double upperTail = d.cumulativeProbability(i); [EOL]         if (i <= 1000) { [EOL]             Assert.assertTrue(upperTail < 1.0d); [EOL]         } else { [EOL]             Assert.assertTrue(upperTail > 0.999); [EOL]         } [EOL]     } [EOL]     Assert.assertEquals(d.cumulativeProbability(Double.MAX_VALUE), 1, 0); [EOL]     Assert.assertEquals(d.cumulativeProbability(-Double.MAX_VALUE), 0, 0); [EOL]     Assert.assertEquals(d.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0); [EOL]     Assert.assertEquals(d.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0); [EOL] } <line_num>: 174,191
@Test [EOL] public void testMeanVariance() { [EOL]     final double tol = 1e-9; [EOL]     ParetoDistribution dist; [EOL]     dist = new ParetoDistribution(1, 1); [EOL]     Assert.assertEquals(dist.getNumericalMean(), Double.POSITIVE_INFINITY, tol); [EOL]     Assert.assertEquals(dist.getNumericalVariance(), Double.POSITIVE_INFINITY, tol); [EOL]     dist = new ParetoDistribution(2.2, 2.4); [EOL]     Assert.assertEquals(dist.getNumericalMean(), 3.771428571428, tol); [EOL]     Assert.assertEquals(dist.getNumericalVariance(), 14.816326530, tol); [EOL] } <line_num>: 193,205
