@Test [EOL] public void testGetMean() { [EOL]     final double[] mu = { -1.5, 2 }; [EOL]     final double[][] sigma = { { 2, -1.1 }, { -1.1, 2 } }; [EOL]     final MultivariateNormalDistribution d = new MultivariateNormalDistribution(mu, sigma); [EOL]     final double[] m = d.getMeans(); [EOL]     for (int i = 0; i < m.length; i++) { [EOL]         Assert.assertEquals(mu[i], m[i], 0); [EOL]     } [EOL] } <line_num>: 34,45
@Test [EOL] public void testGetCovarianceMatrix() { [EOL]     final double[] mu = { -1.5, 2 }; [EOL]     final double[][] sigma = { { 2, -1.1 }, { -1.1, 2 } }; [EOL]     final MultivariateNormalDistribution d = new MultivariateNormalDistribution(mu, sigma); [EOL]     final RealMatrix s = d.getCovariances(); [EOL]     final int dim = d.getDimension(); [EOL]     for (int i = 0; i < dim; i++) { [EOL]         for (int j = 0; j < dim; j++) { [EOL]             Assert.assertEquals(sigma[i][j], s.getEntry(i, j), 0); [EOL]         } [EOL]     } [EOL] } <line_num>: 50,64
@Test [EOL] public void testSampling() { [EOL]     final double[] mu = { -1.5, 2 }; [EOL]     final double[][] sigma = { { 2, -1.1 }, { -1.1, 2 } }; [EOL]     final MultivariateNormalDistribution d = new MultivariateNormalDistribution(mu, sigma); [EOL]     d.reseedRandomGenerator(50); [EOL]     final int n = 500000; [EOL]     final double[][] samples = d.sample(n); [EOL]     final int dim = d.getDimension(); [EOL]     final double[] sampleMeans = new double[dim]; [EOL]     for (int i = 0; i < samples.length; i++) { [EOL]         for (int j = 0; j < dim; j++) { [EOL]             sampleMeans[j] += samples[i][j]; [EOL]         } [EOL]     } [EOL]     final double sampledValueTolerance = 1e-2; [EOL]     for (int j = 0; j < dim; j++) { [EOL]         sampleMeans[j] /= samples.length; [EOL]         Assert.assertEquals(mu[j], sampleMeans[j], sampledValueTolerance); [EOL]     } [EOL]     final double[][] sampleSigma = new Covariance(samples).getCovarianceMatrix().getData(); [EOL]     for (int i = 0; i < dim; i++) { [EOL]         for (int j = 0; j < dim; j++) { [EOL]             Assert.assertEquals(sigma[i][j], sampleSigma[i][j], sampledValueTolerance); [EOL]         } [EOL]     } [EOL] } <line_num>: 69,101
@Test [EOL] public void testDensities() { [EOL]     final double[] mu = { -1.5, 2 }; [EOL]     final double[][] sigma = { { 2, -1.1 }, { -1.1, 2 } }; [EOL]     final MultivariateNormalDistribution d = new MultivariateNormalDistribution(mu, sigma); [EOL]     final double[][] testValues = { { -1.5, 2 }, { 4, 4 }, { 1.5, -2 }, { 0, 0 } }; [EOL]     final double[] densities = new double[testValues.length]; [EOL]     for (int i = 0; i < densities.length; i++) { [EOL]         densities[i] = d.density(testValues[i]); [EOL]     } [EOL]     final double[] correctDensities = { 0.09528357207691344, 5.80932710124009e-09, 0.001387448895173267, 0.03309922090210541 }; [EOL]     for (int i = 0; i < testValues.length; i++) { [EOL]         Assert.assertEquals(correctDensities[i], densities[i], 1e-16); [EOL]     } [EOL] } <line_num>: 106,131
@Test [EOL] public void testUnivariateDistribution() { [EOL]     final double[] mu = { -1.5 }; [EOL]     final double[][] sigma = { { 1 } }; [EOL]     final MultivariateNormalDistribution multi = new MultivariateNormalDistribution(mu, sigma); [EOL]     final NormalDistribution uni = new NormalDistribution(mu[0], sigma[0][0]); [EOL]     final Random rng = new Random(); [EOL]     final int numCases = 100; [EOL]     final double tol = Math.ulp(1d); [EOL]     for (int i = 0; i < numCases; i++) { [EOL]         final double v = rng.nextDouble() * 10 - 5; [EOL]         Assert.assertEquals(uni.density(v), multi.density(new double[] { v }), tol); [EOL]     } [EOL] } <line_num>: 136,151
