@Override [EOL] public FDistribution makeDistribution() { [EOL]     return new FDistribution(5.0, 6.0); [EOL] } <line_num>: 35,38
@Override [EOL] public double[] makeCumulativeTestPoints() { [EOL]     return new double[] { 0.0346808448626, 0.0937009113303, 0.143313661184, 0.202008445998, 0.293728320107, 20.8026639595, 8.74589525602, 5.98756512605, 4.38737418741, 3.10751166664 }; [EOL] } <line_num>: 41,46
@Override [EOL] public double[] makeCumulativeTestValues() { [EOL]     return new double[] { 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.990, 0.975, 0.950, 0.900 }; [EOL] } <line_num>: 49,52
@Override [EOL] public double[] makeDensityTestValues() { [EOL]     return new double[] { 0.0689156576706, 0.236735653193, 0.364074131941, 0.481570789649, 0.595880479994, 0.000133443915657, 0.00286681303403, 0.00969192007502, 0.0242883861471, 0.0605491314658 }; [EOL] } <line_num>: 55,59
@Override [EOL] public void setUp() { [EOL]     super.setUp(); [EOL]     setTolerance(1e-9); [EOL] } <line_num>: 62,66
@Test [EOL] public void testCumulativeProbabilityExtremes() { [EOL]     setCumulativeTestPoints(new double[] { -2, 0 }); [EOL]     setCumulativeTestValues(new double[] { 0, 0 }); [EOL]     verifyCumulativeProbabilities(); [EOL] } <line_num>: 70,75
@Test [EOL] public void testInverseCumulativeProbabilityExtremes() { [EOL]     setInverseCumulativeTestPoints(new double[] { 0, 1 }); [EOL]     setInverseCumulativeTestValues(new double[] { 0, Double.POSITIVE_INFINITY }); [EOL]     verifyInverseCumulativeProbabilities(); [EOL] } <line_num>: 77,82
@Test [EOL] public void testDfAccessors() { [EOL]     FDistribution dist = (FDistribution) getDistribution(); [EOL]     Assert.assertEquals(5d, dist.getNumeratorDegreesOfFreedom(), Double.MIN_VALUE); [EOL]     Assert.assertEquals(6d, dist.getDenominatorDegreesOfFreedom(), Double.MIN_VALUE); [EOL] } <line_num>: 84,89
@Test [EOL] public void testPreconditions() { [EOL]     try { [EOL]         new FDistribution(0, 1); [EOL]         Assert.fail("Expecting NotStrictlyPositiveException for df = 0"); [EOL]     } catch (NotStrictlyPositiveException ex) { [EOL]     } [EOL]     try { [EOL]         new FDistribution(1, 0); [EOL]         Assert.fail("Expecting NotStrictlyPositiveException for df = 0"); [EOL]     } catch (NotStrictlyPositiveException ex) { [EOL]     } [EOL] } <line_num>: 91,105
@Test [EOL] public void testLargeDegreesOfFreedom() { [EOL]     FDistribution fd = new FDistribution(100000, 100000); [EOL]     double p = fd.cumulativeProbability(.999); [EOL]     double x = fd.inverseCumulativeProbability(p); [EOL]     Assert.assertEquals(.999, x, 1.0e-5); [EOL] } <line_num>: 107,113
@Test [EOL] public void testSmallDegreesOfFreedom() { [EOL]     FDistribution fd = new FDistribution(1, 1); [EOL]     double p = fd.cumulativeProbability(0.975); [EOL]     double x = fd.inverseCumulativeProbability(p); [EOL]     Assert.assertEquals(0.975, x, 1.0e-5); [EOL]     fd = new FDistribution(1, 2); [EOL]     p = fd.cumulativeProbability(0.975); [EOL]     x = fd.inverseCumulativeProbability(p); [EOL]     Assert.assertEquals(0.975, x, 1.0e-5); [EOL] } <line_num>: 115,126
@Test [EOL] public void testMoments() { [EOL]     final double tol = 1e-9; [EOL]     FDistribution dist; [EOL]     dist = new FDistribution(1, 2); [EOL]     Assert.assertTrue(Double.isNaN(dist.getNumericalMean())); [EOL]     Assert.assertTrue(Double.isNaN(dist.getNumericalVariance())); [EOL]     dist = new FDistribution(1, 3); [EOL]     Assert.assertEquals(dist.getNumericalMean(), 3d / (3d - 2d), tol); [EOL]     Assert.assertTrue(Double.isNaN(dist.getNumericalVariance())); [EOL]     dist = new FDistribution(1, 5); [EOL]     Assert.assertEquals(dist.getNumericalMean(), 5d / (5d - 2d), tol); [EOL]     Assert.assertEquals(dist.getNumericalVariance(), (2d * 5d * 5d * 4d) / 9d, tol); [EOL] } <line_num>: 128,144
@Test [EOL] public void testMath785() { [EOL]     try { [EOL]         double prob = 0.01; [EOL]         FDistribution f = new FDistribution(200000, 200000); [EOL]         double result = f.inverseCumulativeProbability(prob); [EOL]         Assert.assertTrue(result < 1.0); [EOL]     } catch (Exception e) { [EOL]         Assert.fail("Failing to calculate inverse cumulative probability"); [EOL]     } [EOL] } <line_num>: 146,158
