@Override [EOL] public NormalDistribution makeDistribution() { [EOL]     return new NormalDistribution(2.1, 1.4); [EOL] } <line_num>: 36,39
@Override [EOL] public double[] makeCumulativeTestPoints() { [EOL]     return new double[] { -2.226325228634938d, -1.156887023657177d, -0.643949578356075d, -0.2027950777320613d, 0.305827808237559d, 6.42632522863494d, 5.35688702365718d, 4.843949578356074d, 4.40279507773206d, 3.89417219176244d }; [EOL] } <line_num>: 42,47
@Override [EOL] public double[] makeCumulativeTestValues() { [EOL]     return new double[] { 0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.999d, 0.990d, 0.975d, 0.950d, 0.900d }; [EOL] } <line_num>: 50,54
@Override [EOL] public double[] makeDensityTestValues() { [EOL]     return new double[] { 0.00240506434076, 0.0190372444310, 0.0417464784322, 0.0736683145538, 0.125355951380, 0.00240506434076, 0.0190372444310, 0.0417464784322, 0.0736683145538, 0.125355951380 }; [EOL] } <line_num>: 57,61
@Override [EOL] public void setUp() { [EOL]     super.setUp(); [EOL]     setTolerance(defaultTolerance); [EOL] } <line_num>: 65,69
private void verifyQuantiles() { [EOL]     NormalDistribution distribution = (NormalDistribution) getDistribution(); [EOL]     double mu = distribution.getMean(); [EOL]     double sigma = distribution.getStandardDeviation(); [EOL]     setCumulativeTestPoints(new double[] { mu - 2 * sigma, mu - sigma, mu, mu + sigma, mu + 2 * sigma, mu + 3 * sigma, mu + 4 * sigma, mu + 5 * sigma }); [EOL]     setCumulativeTestValues(new double[] { 0.02275013194817921, 0.158655253931457, 0.5, 0.841344746068543, 0.977249868051821, 0.99865010196837, 0.999968328758167, 0.999999713348428 }); [EOL]     verifyCumulativeProbabilities(); [EOL] } <line_num>: 73,84
@Test [EOL] public void testQuantiles() { [EOL]     setDensityTestValues(new double[] { 0.0385649760808, 0.172836231799, 0.284958771715, 0.172836231799, 0.0385649760808, 0.00316560600853, 9.55930184035e-05, 1.06194251052e-06 }); [EOL]     verifyQuantiles(); [EOL]     verifyDensities(); [EOL]     setDistribution(new NormalDistribution(0, 1)); [EOL]     setDensityTestValues(new double[] { 0.0539909665132, 0.241970724519, 0.398942280401, 0.241970724519, 0.0539909665132, 0.00443184841194, 0.000133830225765, 1.48671951473e-06 }); [EOL]     verifyQuantiles(); [EOL]     verifyDensities(); [EOL]     setDistribution(new NormalDistribution(0, 0.1)); [EOL]     setDensityTestValues(new double[] { 0.539909665132, 2.41970724519, 3.98942280401, 2.41970724519, 0.539909665132, 0.0443184841194, 0.00133830225765, 1.48671951473e-05 }); [EOL]     verifyQuantiles(); [EOL]     verifyDensities(); [EOL] } <line_num>: 86,104
@Test [EOL] public void testInverseCumulativeProbabilityExtremes() { [EOL]     setInverseCumulativeTestPoints(new double[] { 0, 1 }); [EOL]     setInverseCumulativeTestValues(new double[] { Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY }); [EOL]     verifyInverseCumulativeProbabilities(); [EOL] } <line_num>: 106,112
@Test [EOL] public void testGetMean() { [EOL]     NormalDistribution distribution = (NormalDistribution) getDistribution(); [EOL]     Assert.assertEquals(2.1, distribution.getMean(), 0); [EOL] } <line_num>: 114,118
@Test [EOL] public void testGetStandardDeviation() { [EOL]     NormalDistribution distribution = (NormalDistribution) getDistribution(); [EOL]     Assert.assertEquals(1.4, distribution.getStandardDeviation(), 0); [EOL] } <line_num>: 120,124
@Test(expected = NotStrictlyPositiveException.class) [EOL] public void testPreconditions() { [EOL]     new NormalDistribution(1, 0); [EOL] } <line_num>: 126,129
@Test [EOL] public void testDensity() { [EOL]     double[] x = new double[] { -2, -1, 0, 1, 2 }; [EOL]     checkDensity(0, 1, x, new double[] { 0.05399096651, 0.24197072452, 0.39894228040, 0.24197072452, 0.05399096651 }); [EOL]     checkDensity(1.1, 1, x, new double[] { 0.003266819056, 0.043983595980, 0.217852177033, 0.396952547477, 0.266085249899 }); [EOL] } <line_num>: 131,138
private void checkDensity(double mean, double sd, double[] x, double[] expected) { [EOL]     NormalDistribution d = new NormalDistribution(mean, sd); [EOL]     for (int i = 0; i < x.length; i++) { [EOL]         Assert.assertEquals(expected[i], d.density(x[i]), 1e-9); [EOL]     } [EOL] } <line_num>: 140,145
@Test [EOL] public void testExtremeValues() { [EOL]     NormalDistribution distribution = new NormalDistribution(0, 1); [EOL]     for (int i = 0; i < 100; i++) { [EOL]         double lowerTail = distribution.cumulativeProbability(-i); [EOL]         double upperTail = distribution.cumulativeProbability(i); [EOL]         if (i < 9) { [EOL]             Assert.assertTrue(lowerTail > 0.0d); [EOL]             Assert.assertTrue(upperTail < 1.0d); [EOL]         } else { [EOL]             Assert.assertTrue(lowerTail < 0.00001); [EOL]             Assert.assertTrue(upperTail > 0.99999); [EOL]         } [EOL]     } [EOL]     Assert.assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0); [EOL]     Assert.assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0); [EOL]     Assert.assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0); [EOL]     Assert.assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0); [EOL] } <line_num>: 151,173
@Test [EOL] public void testMath280() { [EOL]     NormalDistribution normal = new NormalDistribution(0, 1); [EOL]     double result = normal.inverseCumulativeProbability(0.9986501019683698); [EOL]     Assert.assertEquals(3.0, result, defaultTolerance); [EOL]     result = normal.inverseCumulativeProbability(0.841344746068543); [EOL]     Assert.assertEquals(1.0, result, defaultTolerance); [EOL]     result = normal.inverseCumulativeProbability(0.9999683287581673); [EOL]     Assert.assertEquals(4.0, result, defaultTolerance); [EOL]     result = normal.inverseCumulativeProbability(0.9772498680518209); [EOL]     Assert.assertEquals(2.0, result, defaultTolerance); [EOL] } <line_num>: 175,186
@Test [EOL] public void testMoments() { [EOL]     final double tol = 1e-9; [EOL]     NormalDistribution dist; [EOL]     dist = new NormalDistribution(0, 1); [EOL]     Assert.assertEquals(dist.getNumericalMean(), 0, tol); [EOL]     Assert.assertEquals(dist.getNumericalVariance(), 1, tol); [EOL]     dist = new NormalDistribution(2.2, 1.4); [EOL]     Assert.assertEquals(dist.getNumericalMean(), 2.2, tol); [EOL]     Assert.assertEquals(dist.getNumericalVariance(), 1.4 * 1.4, tol); [EOL]     dist = new NormalDistribution(-2000.9, 10.4); [EOL]     Assert.assertEquals(dist.getNumericalMean(), -2000.9, tol); [EOL]     Assert.assertEquals(dist.getNumericalVariance(), 10.4 * 10.4, tol); [EOL] } <line_num>: 188,204
