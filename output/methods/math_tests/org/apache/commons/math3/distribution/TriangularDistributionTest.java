@Override [EOL] public void setUp() { [EOL]     super.setUp(); [EOL]     setTolerance(1e-4); [EOL] } <line_num>: 33,37
@Override [EOL] public TriangularDistribution makeDistribution() { [EOL]     return new TriangularDistribution(-3, 2, 12); [EOL] } <line_num>: 44,48
@Override [EOL] public double[] makeCumulativeTestPoints() { [EOL]     return new double[] { -3.0001, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 10.0, 11.0, 12.0, 12.0001 }; [EOL] } <line_num>: 54,64
@Override [EOL] public double[] makeCumulativeTestValues() { [EOL]     double third = 1 / 3.0; [EOL]     double left = 18.75; [EOL]     double area = 56.25; [EOL]     return new double[] { 0.0, 0.0, 0.75 / area, 3 / area, 6.75 / area, 12 / area, third, (left + 7.125) / area, (left + 13.5) / area, (left + 36) / area, (left + 37.125) / area, 1.0, 1.0 }; [EOL] } <line_num>: 69,89
@Override [EOL] public double[] makeInverseCumulativeTestPoints() { [EOL]     double[] points = makeCumulativeTestValues(); [EOL]     double[] points2 = new double[points.length - 2]; [EOL]     System.arraycopy(points, 1, points2, 0, points2.length); [EOL]     return points2; [EOL] } <line_num>: 95,105
@Override [EOL] public double[] makeInverseCumulativeTestValues() { [EOL]     double[] points = makeCumulativeTestPoints(); [EOL]     double[] points2 = new double[points.length - 2]; [EOL]     System.arraycopy(points, 1, points2, 0, points2.length); [EOL]     return points2; [EOL] } <line_num>: 111,121
@Override [EOL] public double[] makeDensityTestValues() { [EOL]     return new double[] { 0, 0, 2 / 75.0, 4 / 75.0, 6 / 75.0, 8 / 75.0, 10 / 75.0, 9 / 75.0, 8 / 75.0, 2 / 75.0, 1 / 75.0, 0, 0 }; [EOL] } <line_num>: 124,134
@Test [EOL] public void testGetLowerBound() { [EOL]     TriangularDistribution distribution = makeDistribution(); [EOL]     Assert.assertEquals(-3.0, distribution.getSupportLowerBound(), 0); [EOL] } <line_num>: 139,143
@Test [EOL] public void testGetUpperBound() { [EOL]     TriangularDistribution distribution = makeDistribution(); [EOL]     Assert.assertEquals(12.0, distribution.getSupportUpperBound(), 0); [EOL] } <line_num>: 146,150
@Test(expected = NumberIsTooLargeException.class) [EOL] public void testPreconditions1() { [EOL]     new TriangularDistribution(0, 0, 0); [EOL] } <line_num>: 153,156
@Test(expected = NumberIsTooLargeException.class) [EOL] public void testPreconditions2() { [EOL]     new TriangularDistribution(1, 1, 0); [EOL] } <line_num>: 159,162
@Test(expected = NumberIsTooLargeException.class) [EOL] public void testPreconditions3() { [EOL]     new TriangularDistribution(0, 2, 1); [EOL] } <line_num>: 165,168
@Test(expected = NumberIsTooSmallException.class) [EOL] public void testPreconditions4() { [EOL]     new TriangularDistribution(2, 1, 3); [EOL] } <line_num>: 171,174
@Test [EOL] public void testMeanVariance() { [EOL]     TriangularDistribution dist; [EOL]     dist = new TriangularDistribution(0, 0.5, 1.0); [EOL]     Assert.assertEquals(dist.getNumericalMean(), 0.5, 0); [EOL]     Assert.assertEquals(dist.getNumericalVariance(), 1 / 24.0, 0); [EOL]     dist = new TriangularDistribution(0, 1, 1); [EOL]     Assert.assertEquals(dist.getNumericalMean(), 2 / 3.0, 0); [EOL]     Assert.assertEquals(dist.getNumericalVariance(), 1 / 18.0, 0); [EOL]     dist = new TriangularDistribution(-3, 2, 12); [EOL]     Assert.assertEquals(dist.getNumericalMean(), 3 + (2 / 3.0), 0); [EOL]     Assert.assertEquals(dist.getNumericalVariance(), 175 / 18.0, 0); [EOL] } <line_num>: 177,192
