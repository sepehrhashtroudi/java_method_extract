public abstract IntegerDistribution makeDistribution(); <line_num>: 78,78
public abstract int[] makeDensityTestPoints(); <line_num>: 81,81
public abstract double[] makeDensityTestValues(); <line_num>: 84,84
public abstract int[] makeCumulativeTestPoints(); <line_num>: 87,87
public abstract double[] makeCumulativeTestValues(); <line_num>: 90,90
public abstract double[] makeInverseCumulativeTestPoints(); <line_num>: 93,93
public abstract int[] makeInverseCumulativeTestValues(); <line_num>: 96,96
@Before [EOL] public void setUp() { [EOL]     distribution = makeDistribution(); [EOL]     densityTestPoints = makeDensityTestPoints(); [EOL]     densityTestValues = makeDensityTestValues(); [EOL]     cumulativeTestPoints = makeCumulativeTestPoints(); [EOL]     cumulativeTestValues = makeCumulativeTestValues(); [EOL]     inverseCumulativeTestPoints = makeInverseCumulativeTestPoints(); [EOL]     inverseCumulativeTestValues = makeInverseCumulativeTestValues(); [EOL] } <line_num>: 103,112
@After [EOL] public void tearDown() { [EOL]     distribution = null; [EOL]     densityTestPoints = null; [EOL]     densityTestValues = null; [EOL]     cumulativeTestPoints = null; [EOL]     cumulativeTestValues = null; [EOL]     inverseCumulativeTestPoints = null; [EOL]     inverseCumulativeTestValues = null; [EOL] } <line_num>: 117,126
protected void verifyDensities() { [EOL]     for (int i = 0; i < densityTestPoints.length; i++) { [EOL]         Assert.assertEquals("Incorrect density value returned for " + densityTestPoints[i], densityTestValues[i], distribution.probability(densityTestPoints[i]), tolerance); [EOL]     } [EOL] } <line_num>: 134,140
protected void verifyCumulativeProbabilities() { [EOL]     for (int i = 0; i < cumulativeTestPoints.length; i++) { [EOL]         Assert.assertEquals("Incorrect cumulative probability value returned for " + cumulativeTestPoints[i], cumulativeTestValues[i], distribution.cumulativeProbability(cumulativeTestPoints[i]), tolerance); [EOL]     } [EOL] } <line_num>: 146,152
protected void verifyInverseCumulativeProbabilities() { [EOL]     for (int i = 0; i < inverseCumulativeTestPoints.length; i++) { [EOL]         Assert.assertEquals("Incorrect inverse cumulative probability value returned for " + inverseCumulativeTestPoints[i], inverseCumulativeTestValues[i], distribution.inverseCumulativeProbability(inverseCumulativeTestPoints[i])); [EOL]     } [EOL] } <line_num>: 159,165
@Test [EOL] public void testDensities() { [EOL]     verifyDensities(); [EOL] } <line_num>: 173,176
@Test [EOL] public void testCumulativeProbabilities() { [EOL]     verifyCumulativeProbabilities(); [EOL] } <line_num>: 182,185
@Test [EOL] public void testInverseCumulativeProbabilities() { [EOL]     verifyInverseCumulativeProbabilities(); [EOL] } <line_num>: 191,194
@Test [EOL] public void testConsistencyAtSupportBounds() { [EOL]     final int lower = distribution.getSupportLowerBound(); [EOL]     Assert.assertEquals("Cumulative probability mmust be 0 below support lower bound.", 0.0, distribution.cumulativeProbability(lower - 1), 0.0); [EOL]     Assert.assertEquals("Cumulative probability of support lower bound must be equal to probability mass at this point.", distribution.probability(lower), distribution.cumulativeProbability(lower), tolerance); [EOL]     Assert.assertEquals("Inverse cumulative probability of 0 must be equal to support lower bound.", lower, distribution.inverseCumulativeProbability(0.0)); [EOL]     final int upper = distribution.getSupportUpperBound(); [EOL]     if (upper != Integer.MAX_VALUE) [EOL]         Assert.assertEquals("Cumulative probability of support upper bound must be equal to 1.", 1.0, distribution.cumulativeProbability(upper), 0.0); [EOL]     Assert.assertEquals("Inverse cumulative probability of 1 must be equal to support upper bound.", upper, distribution.inverseCumulativeProbability(1.0)); [EOL] } <line_num>: 196,212
@Test [EOL] public void testIllegalArguments() { [EOL]     try { [EOL]         distribution.cumulativeProbability(1, 0); [EOL]         Assert.fail("Expecting MathIllegalArgumentException for bad cumulativeProbability interval"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         distribution.inverseCumulativeProbability(-1); [EOL]         Assert.fail("Expecting MathIllegalArgumentException for p = -1"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         distribution.inverseCumulativeProbability(2); [EOL]         Assert.fail("Expecting MathIllegalArgumentException for p = 2"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 217,237
@Test [EOL] public void testSampling() { [EOL]     int[] densityPoints = makeDensityTestPoints(); [EOL]     double[] densityValues = makeDensityTestValues(); [EOL]     int sampleSize = 1000; [EOL]     int length = TestUtils.eliminateZeroMassPoints(densityPoints, densityValues); [EOL]     AbstractIntegerDistribution distribution = (AbstractIntegerDistribution) makeDistribution(); [EOL]     double[] expectedCounts = new double[length]; [EOL]     long[] observedCounts = new long[length]; [EOL]     for (int i = 0; i < length; i++) { [EOL]         expectedCounts[i] = sampleSize * densityValues[i]; [EOL]     } [EOL]     distribution.reseedRandomGenerator(1000); [EOL]     int[] sample = distribution.sample(sampleSize); [EOL]     for (int i = 0; i < sampleSize; i++) { [EOL]         for (int j = 0; j < length; j++) { [EOL]             if (sample[i] == densityPoints[j]) { [EOL]                 observedCounts[j]++; [EOL]             } [EOL]         } [EOL]     } [EOL]     TestUtils.assertChiSquareAccept(densityPoints, expectedCounts, observedCounts, .001); [EOL] } <line_num>: 242,264
protected int[] getCumulativeTestPoints() { [EOL]     return cumulativeTestPoints; [EOL] } <line_num>: 270,272
protected void setCumulativeTestPoints(int[] cumulativeTestPoints) { [EOL]     this.cumulativeTestPoints = cumulativeTestPoints; [EOL] } <line_num>: 277,279
protected double[] getCumulativeTestValues() { [EOL]     return cumulativeTestValues; [EOL] } <line_num>: 284,286
protected void setCumulativeTestValues(double[] cumulativeTestValues) { [EOL]     this.cumulativeTestValues = cumulativeTestValues; [EOL] } <line_num>: 291,293
protected int[] getDensityTestPoints() { [EOL]     return densityTestPoints; [EOL] } <line_num>: 298,300
protected void setDensityTestPoints(int[] densityTestPoints) { [EOL]     this.densityTestPoints = densityTestPoints; [EOL] } <line_num>: 305,307
protected double[] getDensityTestValues() { [EOL]     return densityTestValues; [EOL] } <line_num>: 312,314
protected void setDensityTestValues(double[] densityTestValues) { [EOL]     this.densityTestValues = densityTestValues; [EOL] } <line_num>: 319,321
protected IntegerDistribution getDistribution() { [EOL]     return distribution; [EOL] } <line_num>: 326,328
protected void setDistribution(IntegerDistribution distribution) { [EOL]     this.distribution = distribution; [EOL] } <line_num>: 333,335
protected double[] getInverseCumulativeTestPoints() { [EOL]     return inverseCumulativeTestPoints; [EOL] } <line_num>: 340,342
protected void setInverseCumulativeTestPoints(double[] inverseCumulativeTestPoints) { [EOL]     this.inverseCumulativeTestPoints = inverseCumulativeTestPoints; [EOL] } <line_num>: 347,349
protected int[] getInverseCumulativeTestValues() { [EOL]     return inverseCumulativeTestValues; [EOL] } <line_num>: 354,356
protected void setInverseCumulativeTestValues(int[] inverseCumulativeTestValues) { [EOL]     this.inverseCumulativeTestValues = inverseCumulativeTestValues; [EOL] } <line_num>: 361,363
protected double getTolerance() { [EOL]     return tolerance; [EOL] } <line_num>: 368,370
protected void setTolerance(double tolerance) { [EOL]     this.tolerance = tolerance; [EOL] } <line_num>: 375,377
