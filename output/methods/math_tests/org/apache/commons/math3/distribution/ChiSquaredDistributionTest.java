@Override [EOL] public ChiSquaredDistribution makeDistribution() { [EOL]     return new ChiSquaredDistribution(5.0); [EOL] } <line_num>: 34,37
@Override [EOL] public double[] makeCumulativeTestPoints() { [EOL]     return new double[] { 0.210212602629, 0.554298076728, 0.831211613487, 1.14547622606, 1.61030798696, 20.5150056524, 15.0862724694, 12.8325019940, 11.0704976935, 9.23635689978 }; [EOL] } <line_num>: 40,45
@Override [EOL] public double[] makeCumulativeTestValues() { [EOL]     return new double[] { 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.990, 0.975, 0.950, 0.900 }; [EOL] } <line_num>: 48,51
@Override [EOL] public double[] makeInverseCumulativeTestPoints() { [EOL]     return new double[] { 0, 0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.999d, 0.990d, 0.975d, 0.950d, 0.900d, 1 }; [EOL] } <line_num>: 54,58
@Override [EOL] public double[] makeInverseCumulativeTestValues() { [EOL]     return new double[] { 0, 0.210212602629, 0.554298076728, 0.831211613487, 1.14547622606, 1.61030798696, 20.5150056524, 15.0862724694, 12.8325019940, 11.0704976935, 9.23635689978, Double.POSITIVE_INFINITY }; [EOL] } <line_num>: 61,66
@Override [EOL] public double[] makeDensityTestValues() { [EOL]     return new double[] { 0.0115379817652, 0.0415948507811, 0.0665060119842, 0.0919455953114, 0.121472591024, 0.000433630076361, 0.00412780610309, 0.00999340341045, 0.0193246438937, 0.0368460089216 }; [EOL] } <line_num>: 69,73
@Override [EOL] public void setUp() { [EOL]     super.setUp(); [EOL]     setTolerance(1e-9); [EOL] } <line_num>: 76,80
@Test [EOL] public void testSmallDf() { [EOL]     setDistribution(new ChiSquaredDistribution(0.1d)); [EOL]     setTolerance(1E-4); [EOL]     setCumulativeTestPoints(new double[] { 1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342 }); [EOL]     setInverseCumulativeTestValues(getCumulativeTestPoints()); [EOL]     setInverseCumulativeTestPoints(getCumulativeTestValues()); [EOL]     verifyCumulativeProbabilities(); [EOL]     verifyInverseCumulativeProbabilities(); [EOL] } <line_num>: 84,96
@Test [EOL] public void testDfAccessors() { [EOL]     ChiSquaredDistribution distribution = (ChiSquaredDistribution) getDistribution(); [EOL]     Assert.assertEquals(5d, distribution.getDegreesOfFreedom(), Double.MIN_VALUE); [EOL] } <line_num>: 98,102
@Test [EOL] public void testDensity() { [EOL]     double[] x = new double[] { -0.1, 1e-6, 0.5, 1, 2, 5 }; [EOL]     checkDensity(1, x, new double[] { 0.00000000000, 398.94208093034, 0.43939128947, 0.24197072452, 0.10377687436, 0.01464498256 }); [EOL]     checkDensity(0.1, x, new double[] { 0.000000000e+00, 2.486453997e+04, 7.464238732e-02, 3.009077718e-02, 9.447299159e-03, 8.827199396e-04 }); [EOL]     checkDensity(2, x, new double[] { 0.00000000000, 0.49999975000, 0.38940039154, 0.30326532986, 0.18393972059, 0.04104249931 }); [EOL]     checkDensity(10, x, new double[] { 0.000000000e+00, 1.302082682e-27, 6.337896998e-05, 7.897534632e-04, 7.664155024e-03, 6.680094289e-02 }); [EOL] } <line_num>: 104,115
private void checkDensity(double df, double[] x, double[] expected) { [EOL]     ChiSquaredDistribution d = new ChiSquaredDistribution(df); [EOL]     for (int i = 0; i < x.length; i++) { [EOL]         Assert.assertEquals(expected[i], d.density(x[i]), 1e-5); [EOL]     } [EOL] } <line_num>: 117,122
@Test [EOL] public void testMoments() { [EOL]     final double tol = 1e-9; [EOL]     ChiSquaredDistribution dist; [EOL]     dist = new ChiSquaredDistribution(1500); [EOL]     Assert.assertEquals(dist.getNumericalMean(), 1500, tol); [EOL]     Assert.assertEquals(dist.getNumericalVariance(), 3000, tol); [EOL]     dist = new ChiSquaredDistribution(1.12); [EOL]     Assert.assertEquals(dist.getNumericalMean(), 1.12, tol); [EOL]     Assert.assertEquals(dist.getNumericalVariance(), 2.24, tol); [EOL] } <line_num>: 124,136
