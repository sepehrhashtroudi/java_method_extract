public EnumeratedRealDistributionTest() { [EOL]     testDistribution = new EnumeratedRealDistribution(new double[] { 3.0, -1.0, 3.0, 7.0, -2.0, 8.0 }, new double[] { 0.2, 0.2, 0.3, 0.3, 0.0, 0.0 }); [EOL] } <line_num>: 47,53
@Test [EOL] public void testExceptions() { [EOL]     EnumeratedRealDistribution invalid = null; [EOL]     try { [EOL]         invalid = new EnumeratedRealDistribution(new double[] { 1.0, 2.0 }, new double[] { 0.0 }); [EOL]         Assert.fail("Expected DimensionMismatchException"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     try { [EOL]         invalid = new EnumeratedRealDistribution(new double[] { 1.0, 2.0 }, new double[] { 0.0, -1.0 }); [EOL]         Assert.fail("Expected NotPositiveException"); [EOL]     } catch (NotPositiveException e) { [EOL]     } [EOL]     try { [EOL]         invalid = new EnumeratedRealDistribution(new double[] { 1.0, 2.0 }, new double[] { 0.0, 0.0 }); [EOL]         Assert.fail("Expected MathArithmeticException"); [EOL]     } catch (MathArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         invalid = new EnumeratedRealDistribution(new double[] { 1.0, 2.0 }, new double[] { 0.0, Double.NaN }); [EOL]         Assert.fail("Expected NotANumberException"); [EOL]     } catch (NotANumberException e) { [EOL]     } [EOL]     try { [EOL]         invalid = new EnumeratedRealDistribution(new double[] { 1.0, 2.0 }, new double[] { 0.0, Double.POSITIVE_INFINITY }); [EOL]         Assert.fail("Expected NotFiniteNumberException"); [EOL]     } catch (NotFiniteNumberException e) { [EOL]     } [EOL]     Assert.assertNull("Expected non-initialized DiscreteRealDistribution", invalid); [EOL] } <line_num>: 59,88
@Test [EOL] public void testProbability() { [EOL]     double[] points = new double[] { -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 }; [EOL]     double[] results = new double[] { 0, 0.2, 0, 0, 0, 0.5, 0, 0, 0, 0.3, 0 }; [EOL]     for (int p = 0; p < points.length; p++) { [EOL]         double density = testDistribution.probability(points[p]); [EOL]         Assert.assertEquals(results[p], density, 0.0); [EOL]     } [EOL] } <line_num>: 93,101
@Test [EOL] public void testDensity() { [EOL]     double[] points = new double[] { -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 }; [EOL]     double[] results = new double[] { 0, 0.2, 0, 0, 0, 0.5, 0, 0, 0, 0.3, 0 }; [EOL]     for (int p = 0; p < points.length; p++) { [EOL]         double density = testDistribution.density(points[p]); [EOL]         Assert.assertEquals(results[p], density, 0.0); [EOL]     } [EOL] } <line_num>: 106,114
@Test [EOL] public void testCumulativeProbability() { [EOL]     double[] points = new double[] { -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 }; [EOL]     double[] results = new double[] { 0, 0.2, 0.2, 0.2, 0.2, 0.7, 0.7, 0.7, 0.7, 1.0, 1.0 }; [EOL]     for (int p = 0; p < points.length; p++) { [EOL]         double probability = testDistribution.cumulativeProbability(points[p]); [EOL]         Assert.assertEquals(results[p], probability, 1e-10); [EOL]     } [EOL] } <line_num>: 119,127
@Test [EOL] public void testGetNumericalMean() { [EOL]     Assert.assertEquals(3.4, testDistribution.getNumericalMean(), 1e-10); [EOL] } <line_num>: 132,135
@Test [EOL] public void testGetNumericalVariance() { [EOL]     Assert.assertEquals(7.84, testDistribution.getNumericalVariance(), 1e-10); [EOL] } <line_num>: 140,143
@Test [EOL] public void testGetSupportLowerBound() { [EOL]     Assert.assertEquals(-1, testDistribution.getSupportLowerBound(), 0); [EOL] } <line_num>: 148,151
@Test [EOL] public void testGetSupportUpperBound() { [EOL]     Assert.assertEquals(7, testDistribution.getSupportUpperBound(), 0); [EOL] } <line_num>: 156,159
@Test [EOL] public void testIsSupportLowerBoundInclusive() { [EOL]     Assert.assertTrue(testDistribution.isSupportLowerBoundInclusive()); [EOL] } <line_num>: 165,168
@Test [EOL] public void testIsSupportUpperBoundInclusive() { [EOL]     Assert.assertTrue(testDistribution.isSupportUpperBoundInclusive()); [EOL] } <line_num>: 174,177
@Test [EOL] public void testIsSupportConnected() { [EOL]     Assert.assertTrue(testDistribution.isSupportConnected()); [EOL] } <line_num>: 182,185
@Test [EOL] public void testSample() { [EOL]     final int n = 1000000; [EOL]     testDistribution.reseedRandomGenerator(-334759360); [EOL]     final double[] samples = testDistribution.sample(n); [EOL]     Assert.assertEquals(n, samples.length); [EOL]     double sum = 0; [EOL]     double sumOfSquares = 0; [EOL]     for (int i = 0; i < samples.length; i++) { [EOL]         sum += samples[i]; [EOL]         sumOfSquares += samples[i] * samples[i]; [EOL]     } [EOL]     Assert.assertEquals(testDistribution.getNumericalMean(), sum / n, 1e-2); [EOL]     Assert.assertEquals(testDistribution.getNumericalVariance(), sumOfSquares / n - FastMath.pow(sum / n, 2), 1e-2); [EOL] } <line_num>: 190,206
@Test [EOL] public void testIssue942() { [EOL]     List<Pair<Object, Double>> list = new ArrayList<Pair<Object, Double>>(); [EOL]     list.add(new Pair<Object, Double>(new Object() { [EOL]     }, new Double(0))); [EOL]     list.add(new Pair<Object, Double>(new Object() { [EOL]     }, new Double(1))); [EOL]     Assert.assertEquals(1, new EnumeratedDistribution<Object>(list).sample(1).length); [EOL] } <line_num>: 208,214
