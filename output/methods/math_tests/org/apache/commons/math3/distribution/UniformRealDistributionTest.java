@Override [EOL] public void setUp() { [EOL]     super.setUp(); [EOL]     setTolerance(1e-4); [EOL] } <line_num>: 32,36
@Override [EOL] public UniformRealDistribution makeDistribution() { [EOL]     return new UniformRealDistribution(-0.5, 1.25); [EOL] } <line_num>: 41,44
@Override [EOL] public double[] makeCumulativeTestPoints() { [EOL]     return new double[] { -0.5001, -0.5, -0.4999, -0.25, -0.0001, 0.0, 0.0001, 0.25, 1.0, 1.2499, 1.25, 1.2501 }; [EOL] } <line_num>: 47,51
@Override [EOL] public double[] makeCumulativeTestValues() { [EOL]     return new double[] { 0.0, 0.0, 0.0001, 0.25 / 1.75, 0.4999 / 1.75, 0.5 / 1.75, 0.5001 / 1.75, 0.75 / 1.75, 1.5 / 1.75, 1.7499 / 1.75, 1.0, 1.0 }; [EOL] } <line_num>: 54,59
@Override [EOL] public double[] makeDensityTestValues() { [EOL]     double d = 1 / 1.75; [EOL]     return new double[] { 0, d, d, d, d, d, d, d, d, d, d, 0 }; [EOL] } <line_num>: 62,66
@Test [EOL] public void testGetLowerBound() { [EOL]     UniformRealDistribution distribution = makeDistribution(); [EOL]     Assert.assertEquals(-0.5, distribution.getSupportLowerBound(), 0); [EOL] } <line_num>: 71,75
@Test [EOL] public void testGetUpperBound() { [EOL]     UniformRealDistribution distribution = makeDistribution(); [EOL]     Assert.assertEquals(1.25, distribution.getSupportUpperBound(), 0); [EOL] } <line_num>: 78,82
@Test(expected = NumberIsTooLargeException.class) [EOL] public void testPreconditions1() { [EOL]     new UniformRealDistribution(0, 0); [EOL] } <line_num>: 85,88
@Test(expected = NumberIsTooLargeException.class) [EOL] public void testPreconditions2() { [EOL]     new UniformRealDistribution(1, 0); [EOL] } <line_num>: 91,94
@Test [EOL] public void testMeanVariance() { [EOL]     UniformRealDistribution dist; [EOL]     dist = new UniformRealDistribution(0, 1); [EOL]     Assert.assertEquals(dist.getNumericalMean(), 0.5, 0); [EOL]     Assert.assertEquals(dist.getNumericalVariance(), 1 / 12.0, 0); [EOL]     dist = new UniformRealDistribution(-1.5, 0.6); [EOL]     Assert.assertEquals(dist.getNumericalMean(), -0.45, 0); [EOL]     Assert.assertEquals(dist.getNumericalVariance(), 0.3675, 0); [EOL]     dist = new UniformRealDistribution(-0.5, 1.25); [EOL]     Assert.assertEquals(dist.getNumericalMean(), 0.375, 0); [EOL]     Assert.assertEquals(dist.getNumericalVariance(), 0.2552083333333333, 0); [EOL] } <line_num>: 97,112
@Test [EOL] public void testInverseCumulativeDistribution() { [EOL]     UniformRealDistribution dist = new UniformRealDistribution(0, 1e-9); [EOL]     Assert.assertEquals(2.5e-10, dist.inverseCumulativeProbability(0.25), 0); [EOL] } <line_num>: 118,123
