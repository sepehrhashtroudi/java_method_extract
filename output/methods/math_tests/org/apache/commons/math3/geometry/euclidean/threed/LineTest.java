@Test [EOL] public void testContains() throws MathIllegalArgumentException, MathArithmeticException { [EOL]     Vector3D p1 = new Vector3D(0, 0, 1); [EOL]     Line l = new Line(p1, new Vector3D(0, 0, 2)); [EOL]     Assert.assertTrue(l.contains(p1)); [EOL]     Assert.assertTrue(l.contains(new Vector3D(1.0, p1, 0.3, l.getDirection()))); [EOL]     Vector3D u = l.getDirection().orthogonal(); [EOL]     Vector3D v = Vector3D.crossProduct(l.getDirection(), u); [EOL]     for (double alpha = 0; alpha < 2 * FastMath.PI; alpha += 0.3) { [EOL]         Assert.assertTrue(!l.contains(p1.add(new Vector3D(FastMath.cos(alpha), u, FastMath.sin(alpha), v)))); [EOL]     } [EOL] } <line_num>: 29,41
@Test [EOL] public void testSimilar() throws MathIllegalArgumentException, MathArithmeticException { [EOL]     Vector3D p1 = new Vector3D(1.2, 3.4, -5.8); [EOL]     Vector3D p2 = new Vector3D(3.4, -5.8, 1.2); [EOL]     Line lA = new Line(p1, p2); [EOL]     Line lB = new Line(p2, p1); [EOL]     Assert.assertTrue(lA.isSimilarTo(lB)); [EOL]     Assert.assertTrue(!lA.isSimilarTo(new Line(p1, p1.add(lA.getDirection().orthogonal())))); [EOL] } <line_num>: 43,51
@Test [EOL] public void testPointDistance() throws MathIllegalArgumentException { [EOL]     Line l = new Line(new Vector3D(0, 1, 1), new Vector3D(0, 2, 2)); [EOL]     Assert.assertEquals(FastMath.sqrt(3.0 / 2.0), l.distance(new Vector3D(1, 0, 1)), 1.0e-10); [EOL]     Assert.assertEquals(0, l.distance(new Vector3D(0, -4, -4)), 1.0e-10); [EOL] } <line_num>: 53,58
@Test [EOL] public void testLineDistance() throws MathIllegalArgumentException { [EOL]     Line l = new Line(new Vector3D(0, 1, 1), new Vector3D(0, 2, 2)); [EOL]     Assert.assertEquals(1.0, l.distance(new Line(new Vector3D(1, 0, 1), new Vector3D(1, 0, 2))), 1.0e-10); [EOL]     Assert.assertEquals(0.5, l.distance(new Line(new Vector3D(-0.5, 0, 0), new Vector3D(-0.5, -1, -1))), 1.0e-10); [EOL]     Assert.assertEquals(0.0, l.distance(l), 1.0e-10); [EOL]     Assert.assertEquals(0.0, l.distance(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -5, -5))), 1.0e-10); [EOL]     Assert.assertEquals(0.0, l.distance(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -3, -4))), 1.0e-10); [EOL]     Assert.assertEquals(0.0, l.distance(new Line(new Vector3D(0, -4, -4), new Vector3D(1, -4, -4))), 1.0e-10); [EOL]     Assert.assertEquals(FastMath.sqrt(8), l.distance(new Line(new Vector3D(0, -4, 0), new Vector3D(1, -4, 0))), 1.0e-10); [EOL] } <line_num>: 60,84
@Test [EOL] public void testClosest() throws MathIllegalArgumentException { [EOL]     Line l = new Line(new Vector3D(0, 1, 1), new Vector3D(0, 2, 2)); [EOL]     Assert.assertEquals(0.0, l.closestPoint(new Line(new Vector3D(1, 0, 1), new Vector3D(1, 0, 2))).distance(new Vector3D(0, 0, 0)), 1.0e-10); [EOL]     Assert.assertEquals(0.5, l.closestPoint(new Line(new Vector3D(-0.5, 0, 0), new Vector3D(-0.5, -1, -1))).distance(new Vector3D(-0.5, 0, 0)), 1.0e-10); [EOL]     Assert.assertEquals(0.0, l.closestPoint(l).distance(new Vector3D(0, 0, 0)), 1.0e-10); [EOL]     Assert.assertEquals(0.0, l.closestPoint(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -5, -5))).distance(new Vector3D(0, 0, 0)), 1.0e-10); [EOL]     Assert.assertEquals(0.0, l.closestPoint(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -3, -4))).distance(new Vector3D(0, -4, -4)), 1.0e-10); [EOL]     Assert.assertEquals(0.0, l.closestPoint(new Line(new Vector3D(0, -4, -4), new Vector3D(1, -4, -4))).distance(new Vector3D(0, -4, -4)), 1.0e-10); [EOL]     Assert.assertEquals(0.0, l.closestPoint(new Line(new Vector3D(0, -4, 0), new Vector3D(1, -4, 0))).distance(new Vector3D(0, -2, -2)), 1.0e-10); [EOL] } <line_num>: 86,110
@Test [EOL] public void testIntersection() throws MathIllegalArgumentException { [EOL]     Line l = new Line(new Vector3D(0, 1, 1), new Vector3D(0, 2, 2)); [EOL]     Assert.assertNull(l.intersection(new Line(new Vector3D(1, 0, 1), new Vector3D(1, 0, 2)))); [EOL]     Assert.assertNull(l.intersection(new Line(new Vector3D(-0.5, 0, 0), new Vector3D(-0.5, -1, -1)))); [EOL]     Assert.assertEquals(0.0, l.intersection(l).distance(new Vector3D(0, 0, 0)), 1.0e-10); [EOL]     Assert.assertEquals(0.0, l.intersection(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -5, -5))).distance(new Vector3D(0, 0, 0)), 1.0e-10); [EOL]     Assert.assertEquals(0.0, l.intersection(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -3, -4))).distance(new Vector3D(0, -4, -4)), 1.0e-10); [EOL]     Assert.assertEquals(0.0, l.intersection(new Line(new Vector3D(0, -4, -4), new Vector3D(1, -4, -4))).distance(new Vector3D(0, -4, -4)), 1.0e-10); [EOL]     Assert.assertNull(l.intersection(new Line(new Vector3D(0, -4, 0), new Vector3D(1, -4, 0)))); [EOL] } <line_num>: 112,130
@Test [EOL] public void testRevert() { [EOL]     Line line = new Line(new Vector3D(1653345.6696423641, 6170370.041579291, 90000), new Vector3D(1650757.5050732433, 6160710.879908984, 0.9)); [EOL]     Vector3D expected = line.getDirection().negate(); [EOL]     Line reverted = line.revert(); [EOL]     Assert.assertArrayEquals(expected.toArray(), reverted.getDirection().toArray(), 0); [EOL] } <line_num>: 132,146
