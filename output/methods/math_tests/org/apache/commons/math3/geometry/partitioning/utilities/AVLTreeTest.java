@Test [EOL] public void testInsert() { [EOL]     int[] array = { 16, 13, 15, 14, 2, 0, 12, 9, 8, 5, 11, 18, 19, 17, 4, 7, 1, 3, 6, 10 }; [EOL]     AVLTree<Integer> tree = buildTree(array); [EOL]     Assert.assertEquals(array.length, tree.size()); [EOL]     for (int i = 0; i < array.length; ++i) { [EOL]         Assert.assertEquals(array[i], value(tree.getNotSmaller(new Integer(array[i])))); [EOL]     } [EOL]     checkOrder(tree); [EOL] } <line_num>: 25,41
@Test [EOL] public void testDelete1() { [EOL]     int[][][] arrays = { { { 16, 13, 15, 14, 2, 0, 12, 9, 8, 5, 11, 18, 19, 17, 4, 7, 1, 3, 6, 10 }, { 11, 10, 9, 12, 16, 15, 13, 18, 5, 0, 3, 2, 14, 6, 19, 17, 8, 4, 7, 1 } }, { { 16, 13, 15, 14, 2, 0, 12, 9, 8, 5, 11, 18, 19, 17, 4, 7, 1, 3, 6, 10 }, { 0, 17, 14, 15, 16, 18, 6 } }, { { 6, 2, 7, 8, 1, 4, 3, 5 }, { 8 } }, { { 6, 2, 7, 8, 1, 4, 5 }, { 8 } }, { { 3, 7, 2, 1, 5, 8, 4 }, { 1 } }, { { 3, 7, 2, 1, 5, 8, 6 }, { 1 } } }; [EOL]     for (int i = 0; i < arrays.length; ++i) { [EOL]         AVLTree<Integer> tree = buildTree(arrays[i][0]); [EOL]         Assert.assertTrue(!tree.delete(new Integer(-2000))); [EOL]         for (int j = 0; j < arrays[i][1].length; ++j) { [EOL]             Assert.assertTrue(tree.delete(tree.getNotSmaller(new Integer(arrays[i][1][j])).getElement())); [EOL]             Assert.assertEquals(arrays[i][0].length - j - 1, tree.size()); [EOL]         } [EOL]     } [EOL] } <line_num>: 43,63
@Test [EOL] public void testNavigation() { [EOL]     int[] array = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; [EOL]     AVLTree<Integer> tree = buildTree(array); [EOL]     AVLTree<Integer>.Node node = tree.getSmallest(); [EOL]     Assert.assertEquals(array[0], value(node)); [EOL]     for (int i = 0; i < array.length; ++i) { [EOL]         Assert.assertEquals(array[i], value(node)); [EOL]         node = node.getNext(); [EOL]     } [EOL]     Assert.assertNull(node); [EOL]     node = tree.getLargest(); [EOL]     Assert.assertEquals(array[array.length - 1], value(node)); [EOL]     for (int i = array.length - 1; i >= 0; --i) { [EOL]         Assert.assertEquals(array[i], value(node)); [EOL]         node = node.getPrevious(); [EOL]     } [EOL]     Assert.assertNull(node); [EOL]     checkOrder(tree); [EOL] } <line_num>: 65,88
@Test [EOL] public void testSearch() { [EOL]     int[] array = { 2, 4, 6, 8, 10, 12, 14 }; [EOL]     AVLTree<Integer> tree = buildTree(array); [EOL]     Assert.assertNull(tree.getNotLarger(new Integer(array[0] - 1))); [EOL]     Assert.assertNull(tree.getNotSmaller(new Integer(array[array.length - 1] + 1))); [EOL]     for (int i = 0; i < array.length; ++i) { [EOL]         Assert.assertEquals(array[i], value(tree.getNotSmaller(new Integer(array[i] - 1)))); [EOL]         Assert.assertEquals(array[i], value(tree.getNotLarger(new Integer(array[i] + 1)))); [EOL]     } [EOL]     checkOrder(tree); [EOL] } <line_num>: 90,107
@Test [EOL] public void testRepetition() { [EOL]     int[] array = { 1, 1, 3, 3, 4, 5, 6, 7, 7, 7, 7, 7 }; [EOL]     AVLTree<Integer> tree = buildTree(array); [EOL]     Assert.assertEquals(array.length, tree.size()); [EOL]     AVLTree<Integer>.Node node = tree.getNotSmaller(new Integer(3)); [EOL]     Assert.assertEquals(3, value(node)); [EOL]     Assert.assertEquals(1, value(node.getPrevious())); [EOL]     Assert.assertEquals(3, value(node.getNext())); [EOL]     Assert.assertEquals(4, value(node.getNext().getNext())); [EOL]     node = tree.getNotLarger(new Integer(2)); [EOL]     Assert.assertEquals(1, value(node)); [EOL]     Assert.assertEquals(1, value(node.getPrevious())); [EOL]     Assert.assertEquals(3, value(node.getNext())); [EOL]     Assert.assertNull(node.getPrevious().getPrevious()); [EOL]     AVLTree<Integer>.Node otherNode = tree.getNotSmaller(new Integer(1)); [EOL]     Assert.assertTrue(node != otherNode); [EOL]     Assert.assertEquals(1, value(otherNode)); [EOL]     Assert.assertNull(otherNode.getPrevious()); [EOL]     node = tree.getNotLarger(new Integer(10)); [EOL]     Assert.assertEquals(7, value(node)); [EOL]     Assert.assertNull(node.getNext()); [EOL]     node = node.getPrevious(); [EOL]     Assert.assertEquals(7, value(node)); [EOL]     node = node.getPrevious(); [EOL]     Assert.assertEquals(7, value(node)); [EOL]     node = node.getPrevious(); [EOL]     Assert.assertEquals(7, value(node)); [EOL]     node = node.getPrevious(); [EOL]     Assert.assertEquals(7, value(node)); [EOL]     node = node.getPrevious(); [EOL]     Assert.assertEquals(6, value(node)); [EOL]     checkOrder(tree); [EOL] } <line_num>: 109,148
private AVLTree<Integer> buildTree(int[] array) { [EOL]     AVLTree<Integer> tree = new AVLTree<Integer>(); [EOL]     for (int i = 0; i < array.length; ++i) { [EOL]         tree.insert(new Integer(array[i])); [EOL]         tree.insert(null); [EOL]     } [EOL]     return tree; [EOL] } <line_num>: 150,157
private int value(AVLTree<Integer>.Node node) { [EOL]     return node.getElement().intValue(); [EOL] } <line_num>: 159,161
private void checkOrder(AVLTree<Integer> tree) { [EOL]     AVLTree<Integer>.Node next = null; [EOL]     for (AVLTree<Integer>.Node node = tree.getSmallest(); node != null; node = next) { [EOL]         next = node.getNext(); [EOL]         if (next != null) { [EOL]             Assert.assertTrue(node.getElement().compareTo(next.getElement()) <= 0); [EOL]         } [EOL]     } [EOL] } <line_num>: 163,173
