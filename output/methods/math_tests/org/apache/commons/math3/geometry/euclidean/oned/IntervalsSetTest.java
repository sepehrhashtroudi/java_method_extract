@Test [EOL] public void testInterval() { [EOL]     IntervalsSet set = new IntervalsSet(2.3, 5.7); [EOL]     Assert.assertEquals(3.4, set.getSize(), 1.0e-10); [EOL]     Assert.assertEquals(4.0, ((Vector1D) set.getBarycenter()).getX(), 1.0e-10); [EOL]     Assert.assertEquals(Region.Location.BOUNDARY, set.checkPoint(new Vector1D(2.3))); [EOL]     Assert.assertEquals(Region.Location.BOUNDARY, set.checkPoint(new Vector1D(5.7))); [EOL]     Assert.assertEquals(Region.Location.OUTSIDE, set.checkPoint(new Vector1D(1.2))); [EOL]     Assert.assertEquals(Region.Location.OUTSIDE, set.checkPoint(new Vector1D(8.7))); [EOL]     Assert.assertEquals(Region.Location.INSIDE, set.checkPoint(new Vector1D(3.0))); [EOL]     Assert.assertEquals(2.3, set.getInf(), 1.0e-10); [EOL]     Assert.assertEquals(5.7, set.getSup(), 1.0e-10); [EOL] } <line_num>: 33,45
@Test [EOL] public void testInfinite() { [EOL]     IntervalsSet set = new IntervalsSet(9.0, Double.POSITIVE_INFINITY); [EOL]     Assert.assertEquals(Region.Location.BOUNDARY, set.checkPoint(new Vector1D(9.0))); [EOL]     Assert.assertEquals(Region.Location.OUTSIDE, set.checkPoint(new Vector1D(8.4))); [EOL]     for (double e = 1.0; e <= 6.0; e += 1.0) { [EOL]         Assert.assertEquals(Region.Location.INSIDE, set.checkPoint(new Vector1D(FastMath.pow(10.0, e)))); [EOL]     } [EOL]     Assert.assertTrue(Double.isInfinite(set.getSize())); [EOL]     Assert.assertEquals(9.0, set.getInf(), 1.0e-10); [EOL]     Assert.assertTrue(Double.isInfinite(set.getSup())); [EOL]     set = (IntervalsSet) new RegionFactory<Euclidean1D>().getComplement(set); [EOL]     Assert.assertEquals(9.0, set.getSup(), 1.0e-10); [EOL]     Assert.assertTrue(Double.isInfinite(set.getInf())); [EOL] } <line_num>: 47,64
@Test [EOL] public void testMultiple() { [EOL]     RegionFactory<Euclidean1D> factory = new RegionFactory<Euclidean1D>(); [EOL]     IntervalsSet set = (IntervalsSet) factory.intersection(factory.union(factory.difference(new IntervalsSet(1.0, 6.0), new IntervalsSet(3.0, 5.0)), new IntervalsSet(9.0, Double.POSITIVE_INFINITY)), new IntervalsSet(Double.NEGATIVE_INFINITY, 11.0)); [EOL]     Assert.assertEquals(5.0, set.getSize(), 1.0e-10); [EOL]     Assert.assertEquals(5.9, ((Vector1D) set.getBarycenter()).getX(), 1.0e-10); [EOL]     Assert.assertEquals(Region.Location.OUTSIDE, set.checkPoint(new Vector1D(0.0))); [EOL]     Assert.assertEquals(Region.Location.OUTSIDE, set.checkPoint(new Vector1D(4.0))); [EOL]     Assert.assertEquals(Region.Location.OUTSIDE, set.checkPoint(new Vector1D(8.0))); [EOL]     Assert.assertEquals(Region.Location.OUTSIDE, set.checkPoint(new Vector1D(12.0))); [EOL]     Assert.assertEquals(Region.Location.INSIDE, set.checkPoint(new Vector1D(1.2))); [EOL]     Assert.assertEquals(Region.Location.INSIDE, set.checkPoint(new Vector1D(5.9))); [EOL]     Assert.assertEquals(Region.Location.INSIDE, set.checkPoint(new Vector1D(9.01))); [EOL]     Assert.assertEquals(Region.Location.BOUNDARY, set.checkPoint(new Vector1D(5.0))); [EOL]     Assert.assertEquals(Region.Location.BOUNDARY, set.checkPoint(new Vector1D(11.0))); [EOL]     Assert.assertEquals(1.0, set.getInf(), 1.0e-10); [EOL]     Assert.assertEquals(11.0, set.getSup(), 1.0e-10); [EOL]     List<Interval> list = set.asList(); [EOL]     Assert.assertEquals(3, list.size()); [EOL]     Assert.assertEquals(1.0, list.get(0).getInf(), 1.0e-10); [EOL]     Assert.assertEquals(3.0, list.get(0).getSup(), 1.0e-10); [EOL]     Assert.assertEquals(5.0, list.get(1).getInf(), 1.0e-10); [EOL]     Assert.assertEquals(6.0, list.get(1).getSup(), 1.0e-10); [EOL]     Assert.assertEquals(9.0, list.get(2).getInf(), 1.0e-10); [EOL]     Assert.assertEquals(11.0, list.get(2).getSup(), 1.0e-10); [EOL] } <line_num>: 66,97
@Test [EOL] public void testSinglePoint() { [EOL]     IntervalsSet set = new IntervalsSet(1.0, 1.0); [EOL]     Assert.assertEquals(0.0, set.getSize(), Precision.SAFE_MIN); [EOL]     Assert.assertEquals(1.0, ((Vector1D) set.getBarycenter()).getX(), Precision.EPSILON); [EOL] } <line_num>: 99,104
