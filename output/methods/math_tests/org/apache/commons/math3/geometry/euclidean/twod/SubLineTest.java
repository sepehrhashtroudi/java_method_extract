@Test [EOL] public void testEndPoints() { [EOL]     Vector2D p1 = new Vector2D(-1, -7); [EOL]     Vector2D p2 = new Vector2D(7, -1); [EOL]     Segment segment = new Segment(p1, p2, new Line(p1, p2)); [EOL]     SubLine sub = new SubLine(segment); [EOL]     List<Segment> segments = sub.getSegments(); [EOL]     Assert.assertEquals(1, segments.size()); [EOL]     Assert.assertEquals(0.0, new Vector2D(-1, -7).distance(segments.get(0).getStart()), 1.0e-10); [EOL]     Assert.assertEquals(0.0, new Vector2D(7, -1).distance(segments.get(0).getEnd()), 1.0e-10); [EOL] } <line_num>: 29,39
@Test [EOL] public void testNoEndPoints() { [EOL]     SubLine wholeLine = new Line(new Vector2D(-1, 7), new Vector2D(7, 1)).wholeHyperplane(); [EOL]     List<Segment> segments = wholeLine.getSegments(); [EOL]     Assert.assertEquals(1, segments.size()); [EOL]     Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getX()) && segments.get(0).getStart().getX() < 0); [EOL]     Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getY()) && segments.get(0).getStart().getY() > 0); [EOL]     Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getX()) && segments.get(0).getEnd().getX() > 0); [EOL]     Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getY()) && segments.get(0).getEnd().getY() < 0); [EOL] } <line_num>: 41,54
@Test [EOL] public void testNoSegments() { [EOL]     SubLine empty = new SubLine(new Line(new Vector2D(-1, -7), new Vector2D(7, -1)), new RegionFactory<Euclidean1D>().getComplement(new IntervalsSet())); [EOL]     List<Segment> segments = empty.getSegments(); [EOL]     Assert.assertEquals(0, segments.size()); [EOL] } <line_num>: 56,62
@Test [EOL] public void testSeveralSegments() { [EOL]     SubLine twoSubs = new SubLine(new Line(new Vector2D(-1, -7), new Vector2D(7, -1)), new RegionFactory<Euclidean1D>().union(new IntervalsSet(1, 2), new IntervalsSet(3, 4))); [EOL]     List<Segment> segments = twoSubs.getSegments(); [EOL]     Assert.assertEquals(2, segments.size()); [EOL] } <line_num>: 64,71
@Test [EOL] public void testHalfInfiniteNeg() { [EOL]     SubLine empty = new SubLine(new Line(new Vector2D(-1, -7), new Vector2D(7, -1)), new IntervalsSet(Double.NEGATIVE_INFINITY, 0.0)); [EOL]     List<Segment> segments = empty.getSegments(); [EOL]     Assert.assertEquals(1, segments.size()); [EOL]     Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getX()) && segments.get(0).getStart().getX() < 0); [EOL]     Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getY()) && segments.get(0).getStart().getY() < 0); [EOL]     Assert.assertEquals(0.0, new Vector2D(3, -4).distance(segments.get(0).getEnd()), 1.0e-10); [EOL] } <line_num>: 73,84
@Test [EOL] public void testHalfInfinitePos() { [EOL]     SubLine empty = new SubLine(new Line(new Vector2D(-1, -7), new Vector2D(7, -1)), new IntervalsSet(0.0, Double.POSITIVE_INFINITY)); [EOL]     List<Segment> segments = empty.getSegments(); [EOL]     Assert.assertEquals(1, segments.size()); [EOL]     Assert.assertEquals(0.0, new Vector2D(3, -4).distance(segments.get(0).getStart()), 1.0e-10); [EOL]     Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getX()) && segments.get(0).getEnd().getX() > 0); [EOL]     Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getY()) && segments.get(0).getEnd().getY() > 0); [EOL] } <line_num>: 86,97
@Test [EOL] public void testIntersectionInsideInside() { [EOL]     SubLine sub1 = new SubLine(new Vector2D(1, 1), new Vector2D(3, 1)); [EOL]     SubLine sub2 = new SubLine(new Vector2D(2, 0), new Vector2D(2, 2)); [EOL]     Assert.assertEquals(0.0, new Vector2D(2, 1).distance(sub1.intersection(sub2, true)), 1.0e-12); [EOL]     Assert.assertEquals(0.0, new Vector2D(2, 1).distance(sub1.intersection(sub2, false)), 1.0e-12); [EOL] } <line_num>: 99,105
@Test [EOL] public void testIntersectionInsideBoundary() { [EOL]     SubLine sub1 = new SubLine(new Vector2D(1, 1), new Vector2D(3, 1)); [EOL]     SubLine sub2 = new SubLine(new Vector2D(2, 0), new Vector2D(2, 1)); [EOL]     Assert.assertEquals(0.0, new Vector2D(2, 1).distance(sub1.intersection(sub2, true)), 1.0e-12); [EOL]     Assert.assertNull(sub1.intersection(sub2, false)); [EOL] } <line_num>: 107,113
@Test [EOL] public void testIntersectionInsideOutside() { [EOL]     SubLine sub1 = new SubLine(new Vector2D(1, 1), new Vector2D(3, 1)); [EOL]     SubLine sub2 = new SubLine(new Vector2D(2, 0), new Vector2D(2, 0.5)); [EOL]     Assert.assertNull(sub1.intersection(sub2, true)); [EOL]     Assert.assertNull(sub1.intersection(sub2, false)); [EOL] } <line_num>: 115,121
@Test [EOL] public void testIntersectionBoundaryBoundary() { [EOL]     SubLine sub1 = new SubLine(new Vector2D(1, 1), new Vector2D(2, 1)); [EOL]     SubLine sub2 = new SubLine(new Vector2D(2, 0), new Vector2D(2, 1)); [EOL]     Assert.assertEquals(0.0, new Vector2D(2, 1).distance(sub1.intersection(sub2, true)), 1.0e-12); [EOL]     Assert.assertNull(sub1.intersection(sub2, false)); [EOL] } <line_num>: 123,129
@Test [EOL] public void testIntersectionBoundaryOutside() { [EOL]     SubLine sub1 = new SubLine(new Vector2D(1, 1), new Vector2D(2, 1)); [EOL]     SubLine sub2 = new SubLine(new Vector2D(2, 0), new Vector2D(2, 0.5)); [EOL]     Assert.assertNull(sub1.intersection(sub2, true)); [EOL]     Assert.assertNull(sub1.intersection(sub2, false)); [EOL] } <line_num>: 131,137
@Test [EOL] public void testIntersectionOutsideOutside() { [EOL]     SubLine sub1 = new SubLine(new Vector2D(1, 1), new Vector2D(1.5, 1)); [EOL]     SubLine sub2 = new SubLine(new Vector2D(2, 0), new Vector2D(2, 0.5)); [EOL]     Assert.assertNull(sub1.intersection(sub2, true)); [EOL]     Assert.assertNull(sub1.intersection(sub2, false)); [EOL] } <line_num>: 139,145
@Test [EOL] public void testIntersectionParallel() { [EOL]     final SubLine sub1 = new SubLine(new Vector2D(0, 1), new Vector2D(0, 2)); [EOL]     final SubLine sub2 = new SubLine(new Vector2D(66, 3), new Vector2D(66, 4)); [EOL]     Assert.assertNull(sub1.intersection(sub2, true)); [EOL]     Assert.assertNull(sub1.intersection(sub2, false)); [EOL] } <line_num>: 147,153
