protected Vector3DFormatAbstractTest() { [EOL]     vector3DFormat = Vector3DFormat.getInstance(getLocale()); [EOL]     final NumberFormat nf = NumberFormat.getInstance(getLocale()); [EOL]     nf.setMaximumFractionDigits(2); [EOL]     vector3DFormatSquare = new Vector3DFormat("[", "]", " : ", nf); [EOL] } <line_num>: 39,44
protected abstract Locale getLocale(); <line_num>: 35,35
protected abstract char getDecimalCharacter(); <line_num>: 37,37
@Test [EOL] public void testSimpleNoDecimals() { [EOL]     Vector3D c = new Vector3D(1, 1, 1); [EOL]     String expected = "{1; 1; 1}"; [EOL]     String actual = vector3DFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 46,52
@Test [EOL] public void testSimpleWithDecimals() { [EOL]     Vector3D c = new Vector3D(1.23, 1.43, 1.63); [EOL]     String expected = "{1" + getDecimalCharacter() + "23; 1" + getDecimalCharacter() + "43; 1" + getDecimalCharacter() + "63}"; [EOL]     String actual = vector3DFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 54,64
@Test [EOL] public void testSimpleWithDecimalsTrunc() { [EOL]     Vector3D c = new Vector3D(1.232323232323, 1.434343434343, 1.633333333333); [EOL]     String expected = "{1" + getDecimalCharacter() + "2323232323; 1" + getDecimalCharacter() + "4343434343; 1" + getDecimalCharacter() + "6333333333}"; [EOL]     String actual = vector3DFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 66,76
@Test [EOL] public void testNegativeX() { [EOL]     Vector3D c = new Vector3D(-1.232323232323, 1.43, 1.63); [EOL]     String expected = "{-1" + getDecimalCharacter() + "2323232323; 1" + getDecimalCharacter() + "43; 1" + getDecimalCharacter() + "63}"; [EOL]     String actual = vector3DFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 78,88
@Test [EOL] public void testNegativeY() { [EOL]     Vector3D c = new Vector3D(1.23, -1.434343434343, 1.63); [EOL]     String expected = "{1" + getDecimalCharacter() + "23; -1" + getDecimalCharacter() + "4343434343; 1" + getDecimalCharacter() + "63}"; [EOL]     String actual = vector3DFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 90,100
@Test [EOL] public void testNegativeZ() { [EOL]     Vector3D c = new Vector3D(1.23, 1.43, -1.633333333333); [EOL]     String expected = "{1" + getDecimalCharacter() + "23; 1" + getDecimalCharacter() + "43; -1" + getDecimalCharacter() + "6333333333}"; [EOL]     String actual = vector3DFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 102,112
@Test [EOL] public void testNonDefaultSetting() { [EOL]     Vector3D c = new Vector3D(1, 1, 1); [EOL]     String expected = "[1 : 1 : 1]"; [EOL]     String actual = vector3DFormatSquare.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 114,120
@Test [EOL] public void testDefaultFormatVector3D() { [EOL]     Locale defaultLocal = Locale.getDefault(); [EOL]     Locale.setDefault(getLocale()); [EOL]     Vector3D c = new Vector3D(232.22222222222, -342.3333333333, 432.44444444444); [EOL]     String expected = "{232" + getDecimalCharacter() + "2222222222; -342" + getDecimalCharacter() + "3333333333; 432" + getDecimalCharacter() + "4444444444}"; [EOL]     String actual = (new Vector3DFormat()).format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL]     Locale.setDefault(defaultLocal); [EOL] } <line_num>: 122,137
@Test [EOL] public void testNan() { [EOL]     Vector3D c = Vector3D.NaN; [EOL]     String expected = "{(NaN); (NaN); (NaN)}"; [EOL]     String actual = vector3DFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 139,145
@Test [EOL] public void testPositiveInfinity() { [EOL]     Vector3D c = Vector3D.POSITIVE_INFINITY; [EOL]     String expected = "{(Infinity); (Infinity); (Infinity)}"; [EOL]     String actual = vector3DFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 147,153
@Test [EOL] public void tesNegativeInfinity() { [EOL]     Vector3D c = Vector3D.NEGATIVE_INFINITY; [EOL]     String expected = "{(-Infinity); (-Infinity); (-Infinity)}"; [EOL]     String actual = vector3DFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 155,161
@Test [EOL] public void testParseSimpleNoDecimals() throws MathParseException { [EOL]     String source = "{1; 1; 1}"; [EOL]     Vector3D expected = new Vector3D(1, 1, 1); [EOL]     Vector3D actual = vector3DFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 163,169
@Test [EOL] public void testParseIgnoredWhitespace() { [EOL]     Vector3D expected = new Vector3D(1, 1, 1); [EOL]     ParsePosition pos1 = new ParsePosition(0); [EOL]     String source1 = "{1;1;1}"; [EOL]     Assert.assertEquals(expected, vector3DFormat.parse(source1, pos1)); [EOL]     Assert.assertEquals(source1.length(), pos1.getIndex()); [EOL]     ParsePosition pos2 = new ParsePosition(0); [EOL]     String source2 = " { 1 ; 1 ; 1 } "; [EOL]     Assert.assertEquals(expected, vector3DFormat.parse(source2, pos2)); [EOL]     Assert.assertEquals(source2.length() - 1, pos2.getIndex()); [EOL] } <line_num>: 171,182
@Test [EOL] public void testParseSimpleWithDecimals() throws MathParseException { [EOL]     String source = "{1" + getDecimalCharacter() + "23; 1" + getDecimalCharacter() + "43; 1" + getDecimalCharacter() + "63}"; [EOL]     Vector3D expected = new Vector3D(1.23, 1.43, 1.63); [EOL]     Vector3D actual = vector3DFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 184,194
@Test [EOL] public void testParseSimpleWithDecimalsTrunc() throws MathParseException { [EOL]     String source = "{1" + getDecimalCharacter() + "2323; 1" + getDecimalCharacter() + "4343; 1" + getDecimalCharacter() + "6333}"; [EOL]     Vector3D expected = new Vector3D(1.2323, 1.4343, 1.6333); [EOL]     Vector3D actual = vector3DFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 196,206
@Test [EOL] public void testParseNegativeX() throws MathParseException { [EOL]     String source = "{-1" + getDecimalCharacter() + "2323; 1" + getDecimalCharacter() + "4343; 1" + getDecimalCharacter() + "6333}"; [EOL]     Vector3D expected = new Vector3D(-1.2323, 1.4343, 1.6333); [EOL]     Vector3D actual = vector3DFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 208,218
@Test [EOL] public void testParseNegativeY() throws MathParseException { [EOL]     String source = "{1" + getDecimalCharacter() + "2323; -1" + getDecimalCharacter() + "4343; 1" + getDecimalCharacter() + "6333}"; [EOL]     Vector3D expected = new Vector3D(1.2323, -1.4343, 1.6333); [EOL]     Vector3D actual = vector3DFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 220,230
@Test [EOL] public void testParseNegativeZ() throws MathParseException { [EOL]     String source = "{1" + getDecimalCharacter() + "2323; 1" + getDecimalCharacter() + "4343; -1" + getDecimalCharacter() + "6333}"; [EOL]     Vector3D expected = new Vector3D(1.2323, 1.4343, -1.6333); [EOL]     Vector3D actual = vector3DFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 232,242
@Test [EOL] public void testParseNegativeAll() throws MathParseException { [EOL]     String source = "{-1" + getDecimalCharacter() + "2323; -1" + getDecimalCharacter() + "4343; -1" + getDecimalCharacter() + "6333}"; [EOL]     Vector3D expected = new Vector3D(-1.2323, -1.4343, -1.6333); [EOL]     Vector3D actual = vector3DFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 244,254
@Test [EOL] public void testParseZeroX() throws MathParseException { [EOL]     String source = "{0" + getDecimalCharacter() + "0; -1" + getDecimalCharacter() + "4343; 1" + getDecimalCharacter() + "6333}"; [EOL]     Vector3D expected = new Vector3D(0.0, -1.4343, 1.6333); [EOL]     Vector3D actual = vector3DFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 256,266
@Test [EOL] public void testParseNonDefaultSetting() throws MathParseException { [EOL]     String source = "[1" + getDecimalCharacter() + "2323 : 1" + getDecimalCharacter() + "4343 : 1" + getDecimalCharacter() + "6333]"; [EOL]     Vector3D expected = new Vector3D(1.2323, 1.4343, 1.6333); [EOL]     Vector3D actual = vector3DFormatSquare.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 268,278
@Test [EOL] public void testParseNan() throws MathParseException { [EOL]     String source = "{(NaN); (NaN); (NaN)}"; [EOL]     Vector3D actual = vector3DFormat.parse(source); [EOL]     Assert.assertEquals(Vector3D.NaN, actual); [EOL] } <line_num>: 280,285
@Test [EOL] public void testParsePositiveInfinity() throws MathParseException { [EOL]     String source = "{(Infinity); (Infinity); (Infinity)}"; [EOL]     Vector3D actual = vector3DFormat.parse(source); [EOL]     Assert.assertEquals(Vector3D.POSITIVE_INFINITY, actual); [EOL] } <line_num>: 287,292
@Test [EOL] public void testParseNegativeInfinity() throws MathParseException { [EOL]     String source = "{(-Infinity); (-Infinity); (-Infinity)}"; [EOL]     Vector3D actual = vector3DFormat.parse(source); [EOL]     Assert.assertEquals(Vector3D.NEGATIVE_INFINITY, actual); [EOL] } <line_num>: 294,299
@Test [EOL] public void testConstructorSingleFormat() { [EOL]     NumberFormat nf = NumberFormat.getInstance(); [EOL]     Vector3DFormat cf = new Vector3DFormat(nf); [EOL]     Assert.assertNotNull(cf); [EOL]     Assert.assertEquals(nf, cf.getFormat()); [EOL] } <line_num>: 301,307
@Test [EOL] public void testForgottenPrefix() { [EOL]     ParsePosition pos = new ParsePosition(0); [EOL]     Assert.assertNull(new Vector3DFormat().parse("1; 1; 1}", pos)); [EOL]     Assert.assertEquals(0, pos.getErrorIndex()); [EOL] } <line_num>: 309,314
@Test [EOL] public void testForgottenSeparator() { [EOL]     ParsePosition pos = new ParsePosition(0); [EOL]     Assert.assertNull(new Vector3DFormat().parse("{1; 1 1}", pos)); [EOL]     Assert.assertEquals(6, pos.getErrorIndex()); [EOL] } <line_num>: 316,321
@Test [EOL] public void testForgottenSuffix() { [EOL]     ParsePosition pos = new ParsePosition(0); [EOL]     Assert.assertNull(new Vector3DFormat().parse("{1; 1; 1 ", pos)); [EOL]     Assert.assertEquals(8, pos.getErrorIndex()); [EOL] } <line_num>: 323,328
