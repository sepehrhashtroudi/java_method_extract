@Test [EOL] public void testContains() { [EOL]     Line l = new Line(new Vector2D(0, 1), new Vector2D(1, 2)); [EOL]     Assert.assertTrue(l.contains(new Vector2D(0, 1))); [EOL]     Assert.assertTrue(l.contains(new Vector2D(1, 2))); [EOL]     Assert.assertTrue(l.contains(new Vector2D(7, 8))); [EOL]     Assert.assertTrue(!l.contains(new Vector2D(8, 7))); [EOL] } <line_num>: 33,40
@Test [EOL] public void testAbscissa() { [EOL]     Line l = new Line(new Vector2D(2, 1), new Vector2D(-2, -2)); [EOL]     Assert.assertEquals(0.0, (l.toSubSpace(new Vector2D(-3, 4))).getX(), 1.0e-10); [EOL]     Assert.assertEquals(0.0, (l.toSubSpace(new Vector2D(3, -4))).getX(), 1.0e-10); [EOL]     Assert.assertEquals(-5.0, (l.toSubSpace(new Vector2D(7, -1))).getX(), 1.0e-10); [EOL]     Assert.assertEquals(5.0, (l.toSubSpace(new Vector2D(-1, -7))).getX(), 1.0e-10); [EOL] } <line_num>: 42,57
@Test [EOL] public void testOffset() { [EOL]     Line l = new Line(new Vector2D(2, 1), new Vector2D(-2, -2)); [EOL]     Assert.assertEquals(-5.0, l.getOffset(new Vector2D(5, -3)), 1.0e-10); [EOL]     Assert.assertEquals(+5.0, l.getOffset(new Vector2D(-5, 2)), 1.0e-10); [EOL] } <line_num>: 59,64
@Test [EOL] public void testDistance() { [EOL]     Line l = new Line(new Vector2D(2, 1), new Vector2D(-2, -2)); [EOL]     Assert.assertEquals(+5.0, l.distance(new Vector2D(5, -3)), 1.0e-10); [EOL]     Assert.assertEquals(+5.0, l.distance(new Vector2D(-5, 2)), 1.0e-10); [EOL] } <line_num>: 66,71
@Test [EOL] public void testPointAt() { [EOL]     Line l = new Line(new Vector2D(2, 1), new Vector2D(-2, -2)); [EOL]     for (double a = -2.0; a < 2.0; a += 0.2) { [EOL]         Vector1D pA = new Vector1D(a); [EOL]         Vector2D point = l.toSpace(pA); [EOL]         Assert.assertEquals(a, (l.toSubSpace(point)).getX(), 1.0e-10); [EOL]         Assert.assertEquals(0.0, l.getOffset(point), 1.0e-10); [EOL]         for (double o = -2.0; o < 2.0; o += 0.2) { [EOL]             point = l.getPointAt(pA, o); [EOL]             Assert.assertEquals(a, (l.toSubSpace(point)).getX(), 1.0e-10); [EOL]             Assert.assertEquals(o, l.getOffset(point), 1.0e-10); [EOL]         } [EOL]     } [EOL] } <line_num>: 73,87
@Test [EOL] public void testOriginOffset() { [EOL]     Line l1 = new Line(new Vector2D(0, 1), new Vector2D(1, 2)); [EOL]     Assert.assertEquals(FastMath.sqrt(0.5), l1.getOriginOffset(), 1.0e-10); [EOL]     Line l2 = new Line(new Vector2D(1, 2), new Vector2D(0, 1)); [EOL]     Assert.assertEquals(-FastMath.sqrt(0.5), l2.getOriginOffset(), 1.0e-10); [EOL] } <line_num>: 89,95
@Test [EOL] public void testParallel() { [EOL]     Line l1 = new Line(new Vector2D(0, 1), new Vector2D(1, 2)); [EOL]     Line l2 = new Line(new Vector2D(2, 2), new Vector2D(3, 3)); [EOL]     Assert.assertTrue(l1.isParallelTo(l2)); [EOL]     Line l3 = new Line(new Vector2D(1, 0), new Vector2D(0.5, -0.5)); [EOL]     Assert.assertTrue(l1.isParallelTo(l3)); [EOL]     Line l4 = new Line(new Vector2D(1, 0), new Vector2D(0.5, -0.51)); [EOL]     Assert.assertTrue(!l1.isParallelTo(l4)); [EOL] } <line_num>: 97,106
@Test [EOL] public void testTransform() throws MathIllegalArgumentException { [EOL]     Line l1 = new Line(new Vector2D(1.0, 1.0), new Vector2D(4.0, 1.0)); [EOL]     Transform<Euclidean2D, Euclidean1D> t1 = Line.getTransform(new AffineTransform(0.0, 0.5, -1.0, 0.0, 1.0, 1.5)); [EOL]     Assert.assertEquals(0.5 * FastMath.PI, ((Line) t1.apply(l1)).getAngle(), 1.0e-10); [EOL]     Line l2 = new Line(new Vector2D(0.0, 0.0), new Vector2D(1.0, 1.0)); [EOL]     Transform<Euclidean2D, Euclidean1D> t2 = Line.getTransform(new AffineTransform(0.0, 0.5, -1.0, 0.0, 1.0, 1.5)); [EOL]     Assert.assertEquals(FastMath.atan2(1.0, -2.0), ((Line) t2.apply(l2)).getAngle(), 1.0e-10); [EOL] } <line_num>: 108,125
@Test [EOL] public void testIntersection() { [EOL]     Line l1 = new Line(new Vector2D(0, 1), new Vector2D(1, 2)); [EOL]     Line l2 = new Line(new Vector2D(-1, 2), new Vector2D(2, 1)); [EOL]     Vector2D p = l1.intersection(l2); [EOL]     Assert.assertEquals(0.5, p.getX(), 1.0e-10); [EOL]     Assert.assertEquals(1.5, p.getY(), 1.0e-10); [EOL] } <line_num>: 127,134
