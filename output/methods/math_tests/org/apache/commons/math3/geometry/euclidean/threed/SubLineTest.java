@Test [EOL] public void testEndPoints() throws MathIllegalArgumentException { [EOL]     Vector3D p1 = new Vector3D(-1, -7, 2); [EOL]     Vector3D p2 = new Vector3D(7, -1, 0); [EOL]     Segment segment = new Segment(p1, p2, new Line(p1, p2)); [EOL]     SubLine sub = new SubLine(segment); [EOL]     List<Segment> segments = sub.getSegments(); [EOL]     Assert.assertEquals(1, segments.size()); [EOL]     Assert.assertEquals(0.0, new Vector3D(-1, -7, 2).distance(segments.get(0).getStart()), 1.0e-10); [EOL]     Assert.assertEquals(0.0, new Vector3D(7, -1, 0).distance(segments.get(0).getEnd()), 1.0e-10); [EOL] } <line_num>: 30,40
@Test [EOL] public void testNoEndPoints() throws MathIllegalArgumentException { [EOL]     SubLine wholeLine = new Line(new Vector3D(-1, 7, 2), new Vector3D(7, 1, 0)).wholeLine(); [EOL]     List<Segment> segments = wholeLine.getSegments(); [EOL]     Assert.assertEquals(1, segments.size()); [EOL]     Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getX()) && segments.get(0).getStart().getX() < 0); [EOL]     Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getY()) && segments.get(0).getStart().getY() > 0); [EOL]     Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getZ()) && segments.get(0).getStart().getZ() > 0); [EOL]     Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getX()) && segments.get(0).getEnd().getX() > 0); [EOL]     Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getY()) && segments.get(0).getEnd().getY() < 0); [EOL]     Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getZ()) && segments.get(0).getEnd().getZ() < 0); [EOL] } <line_num>: 42,59
@Test [EOL] public void testNoSegments() throws MathIllegalArgumentException { [EOL]     SubLine empty = new SubLine(new Line(new Vector3D(-1, -7, 2), new Vector3D(7, -1, 0)), (IntervalsSet) new RegionFactory<Euclidean1D>().getComplement(new IntervalsSet())); [EOL]     List<Segment> segments = empty.getSegments(); [EOL]     Assert.assertEquals(0, segments.size()); [EOL] } <line_num>: 61,67
@Test [EOL] public void testSeveralSegments() throws MathIllegalArgumentException { [EOL]     SubLine twoSubs = new SubLine(new Line(new Vector3D(-1, -7, 2), new Vector3D(7, -1, 0)), (IntervalsSet) new RegionFactory<Euclidean1D>().union(new IntervalsSet(1, 2), new IntervalsSet(3, 4))); [EOL]     List<Segment> segments = twoSubs.getSegments(); [EOL]     Assert.assertEquals(2, segments.size()); [EOL] } <line_num>: 69,76
@Test [EOL] public void testHalfInfiniteNeg() throws MathIllegalArgumentException { [EOL]     SubLine empty = new SubLine(new Line(new Vector3D(-1, -7, 2), new Vector3D(7, -1, -2)), new IntervalsSet(Double.NEGATIVE_INFINITY, 0.0)); [EOL]     List<Segment> segments = empty.getSegments(); [EOL]     Assert.assertEquals(1, segments.size()); [EOL]     Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getX()) && segments.get(0).getStart().getX() < 0); [EOL]     Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getY()) && segments.get(0).getStart().getY() < 0); [EOL]     Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getZ()) && segments.get(0).getStart().getZ() > 0); [EOL]     Assert.assertEquals(0.0, new Vector3D(3, -4, 0).distance(segments.get(0).getEnd()), 1.0e-10); [EOL] } <line_num>: 78,91
@Test [EOL] public void testHalfInfinitePos() throws MathIllegalArgumentException { [EOL]     SubLine empty = new SubLine(new Line(new Vector3D(-1, -7, 2), new Vector3D(7, -1, -2)), new IntervalsSet(0.0, Double.POSITIVE_INFINITY)); [EOL]     List<Segment> segments = empty.getSegments(); [EOL]     Assert.assertEquals(1, segments.size()); [EOL]     Assert.assertEquals(0.0, new Vector3D(3, -4, 0).distance(segments.get(0).getStart()), 1.0e-10); [EOL]     Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getX()) && segments.get(0).getEnd().getX() > 0); [EOL]     Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getY()) && segments.get(0).getEnd().getY() > 0); [EOL]     Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getZ()) && segments.get(0).getEnd().getZ() < 0); [EOL] } <line_num>: 93,106
@Test [EOL] public void testIntersectionInsideInside() throws MathIllegalArgumentException { [EOL]     SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(3, 1, 1)); [EOL]     SubLine sub2 = new SubLine(new Vector3D(2, 0, 0), new Vector3D(2, 2, 2)); [EOL]     Assert.assertEquals(0.0, new Vector3D(2, 1, 1).distance(sub1.intersection(sub2, true)), 1.0e-12); [EOL]     Assert.assertEquals(0.0, new Vector3D(2, 1, 1).distance(sub1.intersection(sub2, false)), 1.0e-12); [EOL] } <line_num>: 108,114
@Test [EOL] public void testIntersectionInsideBoundary() throws MathIllegalArgumentException { [EOL]     SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(3, 1, 1)); [EOL]     SubLine sub2 = new SubLine(new Vector3D(2, 0, 0), new Vector3D(2, 1, 1)); [EOL]     Assert.assertEquals(0.0, new Vector3D(2, 1, 1).distance(sub1.intersection(sub2, true)), 1.0e-12); [EOL]     Assert.assertNull(sub1.intersection(sub2, false)); [EOL] } <line_num>: 116,122
@Test [EOL] public void testIntersectionInsideOutside() throws MathIllegalArgumentException { [EOL]     SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(3, 1, 1)); [EOL]     SubLine sub2 = new SubLine(new Vector3D(2, 0, 0), new Vector3D(2, 0.5, 0.5)); [EOL]     Assert.assertNull(sub1.intersection(sub2, true)); [EOL]     Assert.assertNull(sub1.intersection(sub2, false)); [EOL] } <line_num>: 124,130
@Test [EOL] public void testIntersectionBoundaryBoundary() throws MathIllegalArgumentException { [EOL]     SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(2, 1, 1)); [EOL]     SubLine sub2 = new SubLine(new Vector3D(2, 0, 0), new Vector3D(2, 1, 1)); [EOL]     Assert.assertEquals(0.0, new Vector3D(2, 1, 1).distance(sub1.intersection(sub2, true)), 1.0e-12); [EOL]     Assert.assertNull(sub1.intersection(sub2, false)); [EOL] } <line_num>: 132,138
@Test [EOL] public void testIntersectionBoundaryOutside() throws MathIllegalArgumentException { [EOL]     SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(2, 1, 1)); [EOL]     SubLine sub2 = new SubLine(new Vector3D(2, 0, 0), new Vector3D(2, 0.5, 0.5)); [EOL]     Assert.assertNull(sub1.intersection(sub2, true)); [EOL]     Assert.assertNull(sub1.intersection(sub2, false)); [EOL] } <line_num>: 140,146
@Test [EOL] public void testIntersectionOutsideOutside() throws MathIllegalArgumentException { [EOL]     SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(1.5, 1, 1)); [EOL]     SubLine sub2 = new SubLine(new Vector3D(2, 0, 0), new Vector3D(2, 0.5, 0.5)); [EOL]     Assert.assertNull(sub1.intersection(sub2, true)); [EOL]     Assert.assertNull(sub1.intersection(sub2, false)); [EOL] } <line_num>: 148,154
@Test [EOL] public void testIntersectionNotIntersecting() throws MathIllegalArgumentException { [EOL]     SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(1.5, 1, 1)); [EOL]     SubLine sub2 = new SubLine(new Vector3D(2, 3, 0), new Vector3D(2, 3, 0.5)); [EOL]     Assert.assertNull(sub1.intersection(sub2, true)); [EOL]     Assert.assertNull(sub1.intersection(sub2, false)); [EOL] } <line_num>: 156,162
