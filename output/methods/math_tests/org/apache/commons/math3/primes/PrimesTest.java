void assertPrimeFactorsException(int n, Throwable expected) { [EOL]     try { [EOL]         Primes.primeFactors(n); [EOL]         Assert.fail("Exception not thrown"); [EOL]     } catch (Throwable e) { [EOL]         Assert.assertEquals(expected.getClass(), e.getClass()); [EOL]         if (expected.getMessage() != null) { [EOL]             Assert.assertEquals(expected.getMessage(), e.getMessage()); [EOL]         } [EOL]     } [EOL] } <line_num>: 61,71
void assertNextPrimeException(int n, Throwable expected) { [EOL]     try { [EOL]         Primes.nextPrime(n); [EOL]         Assert.fail("Exception not thrown"); [EOL]     } catch (Throwable e) { [EOL]         Assert.assertEquals(expected.getClass(), e.getClass()); [EOL]         if (expected.getMessage() != null) { [EOL]             Assert.assertEquals(expected.getMessage(), e.getMessage()); [EOL]         } [EOL]     } [EOL] } <line_num>: 72,82
@Test [EOL] public void testNextPrime() { [EOL]     Assert.assertEquals(2, Primes.nextPrime(0)); [EOL]     Assert.assertEquals(2, Primes.nextPrime(1)); [EOL]     Assert.assertEquals(2, Primes.nextPrime(2)); [EOL]     Assert.assertEquals(3, Primes.nextPrime(3)); [EOL]     Assert.assertEquals(5, Primes.nextPrime(4)); [EOL]     Assert.assertEquals(5, Primes.nextPrime(5)); [EOL]     for (int i = 0; i < SmallPrimes.PRIMES.length - 1; i++) { [EOL]         for (int j = SmallPrimes.PRIMES[i] + 1; j <= SmallPrimes.PRIMES[i + 1]; j++) { [EOL]             Assert.assertEquals(SmallPrimes.PRIMES[i + 1], Primes.nextPrime(j)); [EOL]         } [EOL]     } [EOL]     Assert.assertEquals(25325981, Primes.nextPrime(25325981)); [EOL]     for (int i = 25325981 + 1; i <= 25326023; i++) { [EOL]         Assert.assertEquals(25326023, Primes.nextPrime(i)); [EOL]     } [EOL]     Assert.assertEquals(Integer.MAX_VALUE, Primes.nextPrime(Integer.MAX_VALUE - 10)); [EOL]     Assert.assertEquals(Integer.MAX_VALUE, Primes.nextPrime(Integer.MAX_VALUE - 1)); [EOL]     Assert.assertEquals(Integer.MAX_VALUE, Primes.nextPrime(Integer.MAX_VALUE)); [EOL]     assertNextPrimeException(Integer.MIN_VALUE, new MathIllegalArgumentException(LocalizedFormats.NUMBER_TOO_SMALL, Integer.MIN_VALUE, 0)); [EOL]     assertNextPrimeException(-1, new MathIllegalArgumentException(LocalizedFormats.NUMBER_TOO_SMALL, -1, 0)); [EOL]     assertNextPrimeException(-13, new MathIllegalArgumentException(LocalizedFormats.NUMBER_TOO_SMALL, -13, 0)); [EOL] } <line_num>: 84,112
@Test [EOL] public void testIsPrime() throws Exception { [EOL]     for (int i : BELOW_2) { [EOL]         Assert.assertFalse(Primes.isPrime(i)); [EOL]     } [EOL]     for (int i : NOT_PRIMES) { [EOL]         Assert.assertFalse(Primes.isPrime(i)); [EOL]     } [EOL]     for (int i : PRIMES) { [EOL]         Assert.assertTrue(Primes.isPrime(i)); [EOL]     } [EOL] } <line_num>: 114,125
static int sum(List<Integer> numbers) { [EOL]     int out = 0; [EOL]     for (int i : numbers) { [EOL]         out += i; [EOL]     } [EOL]     return out; [EOL] } <line_num>: 127,133
static int product(List<Integer> numbers) { [EOL]     int out = 1; [EOL]     for (int i : numbers) { [EOL]         out *= i; [EOL]     } [EOL]     return out; [EOL] } <line_num>: 134,140
static void checkPrimeFactors(List<Integer> factors) { [EOL]     for (int p : factors) { [EOL]         if (!PRIMES_SET.contains(p)) { [EOL]             Assert.fail("Not found in primes list: " + p); [EOL]         } [EOL]     } [EOL] } <line_num>: 147,153
@Test [EOL] public void testPrimeFactors() throws Exception { [EOL]     for (int i : BELOW_2) { [EOL]         assertPrimeFactorsException(i, new MathIllegalArgumentException(LocalizedFormats.NUMBER_TOO_SMALL, i, 2)); [EOL]     } [EOL]     for (int i : NOT_PRIMES) { [EOL]         List<Integer> factors = Primes.primeFactors(i); [EOL]         checkPrimeFactors(factors); [EOL]         int prod = product(factors); [EOL]         Assert.assertEquals(i, prod); [EOL]     } [EOL]     for (int i : PRIMES) { [EOL]         List<Integer> factors = Primes.primeFactors(i); [EOL]         Assert.assertEquals(i, (int) factors.get(0)); [EOL]         Assert.assertEquals(1, factors.size()); [EOL]     } [EOL] } <line_num>: 155,171
