@Test [EOL] public void testCluster() { [EOL]     final List<DoublePoint> points = new ArrayList<DoublePoint>(); [EOL]     for (int i = 1; i <= 10; i++) { [EOL]         final DoublePoint p = new DoublePoint(new double[] { i }); [EOL]         points.add(p); [EOL]     } [EOL]     final FuzzyKMeansClusterer<DoublePoint> transformer = new FuzzyKMeansClusterer<DoublePoint>(3, 2.0); [EOL]     final List<CentroidCluster<DoublePoint>> clusters = transformer.cluster(points); [EOL]     final List<DoublePoint> clusterOne = Arrays.asList(points.get(0), points.get(1), points.get(2)); [EOL]     final List<DoublePoint> clusterTwo = Arrays.asList(points.get(3), points.get(4), points.get(5), points.get(6)); [EOL]     final List<DoublePoint> clusterThree = Arrays.asList(points.get(7), points.get(8), points.get(9)); [EOL]     boolean cluster1Found = false; [EOL]     boolean cluster2Found = false; [EOL]     boolean cluster3Found = false; [EOL]     Assert.assertEquals(3, clusters.size()); [EOL]     for (final Cluster<DoublePoint> cluster : clusters) { [EOL]         if (cluster.getPoints().containsAll(clusterOne)) { [EOL]             cluster1Found = true; [EOL]         } [EOL]         if (cluster.getPoints().containsAll(clusterTwo)) { [EOL]             cluster2Found = true; [EOL]         } [EOL]         if (cluster.getPoints().containsAll(clusterThree)) { [EOL]             cluster3Found = true; [EOL]         } [EOL]     } [EOL]     Assert.assertTrue(cluster1Found); [EOL]     Assert.assertTrue(cluster2Found); [EOL]     Assert.assertTrue(cluster3Found); [EOL] } <line_num>: 42,82
@Test(expected = MathIllegalArgumentException.class) [EOL] public void testTooSmallFuzzynessFactor() { [EOL]     new FuzzyKMeansClusterer<DoublePoint>(3, 1.0); [EOL] } <line_num>: 84,87
@Test(expected = NullArgumentException.class) [EOL] public void testNullDataset() { [EOL]     final FuzzyKMeansClusterer<DoublePoint> clusterer = new FuzzyKMeansClusterer<DoublePoint>(3, 2.0); [EOL]     clusterer.cluster(null); [EOL] } <line_num>: 89,93
@Test [EOL] public void testGetters() { [EOL]     final DistanceMeasure measure = new CanberraDistance(); [EOL]     final RandomGenerator random = new JDKRandomGenerator(); [EOL]     final FuzzyKMeansClusterer<DoublePoint> clusterer = new FuzzyKMeansClusterer<DoublePoint>(3, 2.0, 100, measure, 1e-6, random); [EOL]     Assert.assertEquals(3, clusterer.getK()); [EOL]     Assert.assertEquals(2.0, clusterer.getFuzziness(), 1e-6); [EOL]     Assert.assertEquals(100, clusterer.getMaxIterations()); [EOL]     Assert.assertEquals(1e-6, clusterer.getEpsilon(), 1e-12); [EOL]     Assert.assertThat(clusterer.getDistanceMeasure(), CoreMatchers.is(measure)); [EOL]     Assert.assertThat(clusterer.getRandomGenerator(), CoreMatchers.is(random)); [EOL] } <line_num>: 95,108
