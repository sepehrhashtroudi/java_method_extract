Unserializable() { [EOL] } <line_num>: 129,129
@Test [EOL] public void testMessageChain() { [EOL]     final ExceptionContext c = new ExceptionContext(new Exception("oops")); [EOL]     final String sep = " | "; [EOL]     final String m1 = "column index (0)"; [EOL]     c.addMessage(LocalizedFormats.COLUMN_INDEX, 0); [EOL]     final String m2 = "got 1x2 but expected 3x4"; [EOL]     c.addMessage(LocalizedFormats.DIMENSIONS_MISMATCH_2x2, 1, 2, 3, 4); [EOL]     final String m3 = "It didn't work out"; [EOL]     c.addMessage(LocalizedFormats.SIMPLE_MESSAGE, m3); [EOL]     Assert.assertEquals(c.getMessage(Locale.US, sep), m1 + sep + m2 + sep + m3); [EOL] } <line_num>: 36,49
@Test [EOL] public void testNoArgAddMessage() { [EOL]     final ExceptionContext c = new ExceptionContext(new Exception("hello")); [EOL]     c.addMessage(LocalizedFormats.SIMPLE_MESSAGE); [EOL]     Assert.assertEquals(c.getMessage(), "{0}"); [EOL] } <line_num>: 51,56
@Test [EOL] public void testContext() { [EOL]     final ExceptionContext c = new ExceptionContext(new Exception("bye")); [EOL]     final String[] keys = { "Key 1", "Key 2" }; [EOL]     final Object[] values = { "Value 1", Integer.valueOf(2) }; [EOL]     for (int i = 0; i < keys.length; i++) { [EOL]         c.setValue(keys[i], values[i]); [EOL]     } [EOL]     Assert.assertTrue(c.getKeys().containsAll(Arrays.asList(keys))); [EOL]     for (int i = 0; i < keys.length; i++) { [EOL]         Assert.assertEquals(values[i], c.getValue(keys[i])); [EOL]     } [EOL]     Assert.assertNull(c.getValue("xyz")); [EOL] } <line_num>: 58,79
@Test [EOL] public void testSerialize() throws IOException, ClassNotFoundException { [EOL]     final ExceptionContext cOut = new ExceptionContext(new Exception("Apache")); [EOL]     cOut.addMessage(LocalizedFormats.COLUMN_INDEX, 0); [EOL]     cOut.setValue("Key 1", Integer.valueOf(0)); [EOL]     ByteArrayOutputStream bos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(bos); [EOL]     oos.writeObject(cOut); [EOL]     ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray()); [EOL]     ObjectInputStream ois = new ObjectInputStream(bis); [EOL]     ExceptionContext cIn = (ExceptionContext) ois.readObject(); [EOL]     Assert.assertTrue(cOut.getMessage().equals(cIn.getMessage())); [EOL]     for (String key : cIn.getKeys()) { [EOL]         Assert.assertTrue(cOut.getValue(key).equals(cIn.getValue(key))); [EOL]     } [EOL] } <line_num>: 81,101
@Test [EOL] public void testSerializeUnserializable() throws Exception { [EOL]     final ExceptionContext cOut = new ExceptionContext(new Exception("Apache Commons Math")); [EOL]     cOut.addMessage(LocalizedFormats.SIMPLE_MESSAGE, "OK"); [EOL]     cOut.addMessage(LocalizedFormats.SIMPLE_MESSAGE, new Unserializable()); [EOL]     String key = "Key 1"; [EOL]     cOut.setValue(key, new Unserializable()); [EOL]     { [EOL]         ByteArrayOutputStream bos = new ByteArrayOutputStream(); [EOL]         ObjectOutputStream oos = new ObjectOutputStream(bos); [EOL]         oos.writeObject(cOut); [EOL]         ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray()); [EOL]         ObjectInputStream ois = new ObjectInputStream(bis); [EOL]         ExceptionContext cIn = (ExceptionContext) ois.readObject(); [EOL]         String nsObjStr = (String) cIn.getValue(key); [EOL]         Assert.assertTrue(nsObjStr.matches(".*could not be serialized.*")); [EOL]     } [EOL] } <line_num>: 103,123
