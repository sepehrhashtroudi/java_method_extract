@Test [EOL] public final void testAccessors1() { [EOL]     final double q0 = 2; [EOL]     final double q1 = 5.4; [EOL]     final double q2 = 17; [EOL]     final double q3 = 0.0005; [EOL]     final Quaternion q = new Quaternion(q0, q1, q2, q3); [EOL]     Assert.assertEquals(q0, q.getQ0(), 0); [EOL]     Assert.assertEquals(q1, q.getQ1(), 0); [EOL]     Assert.assertEquals(q2, q.getQ2(), 0); [EOL]     Assert.assertEquals(q3, q.getQ3(), 0); [EOL] } <line_num>: 35,47
@Test [EOL] public final void testAccessors2() { [EOL]     final double q0 = 2; [EOL]     final double q1 = 5.4; [EOL]     final double q2 = 17; [EOL]     final double q3 = 0.0005; [EOL]     final Quaternion q = new Quaternion(q0, q1, q2, q3); [EOL]     final double sP = q.getScalarPart(); [EOL]     final double[] vP = q.getVectorPart(); [EOL]     Assert.assertEquals(q0, sP, 0); [EOL]     Assert.assertEquals(q1, vP[0], 0); [EOL]     Assert.assertEquals(q2, vP[1], 0); [EOL]     Assert.assertEquals(q3, vP[2], 0); [EOL] } <line_num>: 49,64
@Test [EOL] public final void testAccessors3() { [EOL]     final double q0 = 2; [EOL]     final double q1 = 5.4; [EOL]     final double q2 = 17; [EOL]     final double q3 = 0.0005; [EOL]     final Quaternion q = new Quaternion(q0, new double[] { q1, q2, q3 }); [EOL]     final double sP = q.getScalarPart(); [EOL]     final double[] vP = q.getVectorPart(); [EOL]     Assert.assertEquals(q0, sP, 0); [EOL]     Assert.assertEquals(q1, vP[0], 0); [EOL]     Assert.assertEquals(q2, vP[1], 0); [EOL]     Assert.assertEquals(q3, vP[2], 0); [EOL] } <line_num>: 66,81
@Test(expected = DimensionMismatchException.class) [EOL] public void testWrongDimension() { [EOL]     new Quaternion(new double[] { 1, 2 }); [EOL] } <line_num>: 83,86
@Test [EOL] public final void testConjugate() { [EOL]     final double q0 = 2; [EOL]     final double q1 = 5.4; [EOL]     final double q2 = 17; [EOL]     final double q3 = 0.0005; [EOL]     final Quaternion q = new Quaternion(q0, q1, q2, q3); [EOL]     final Quaternion qConjugate = q.getConjugate(); [EOL]     Assert.assertEquals(q0, qConjugate.getQ0(), 0); [EOL]     Assert.assertEquals(-q1, qConjugate.getQ1(), 0); [EOL]     Assert.assertEquals(-q2, qConjugate.getQ2(), 0); [EOL]     Assert.assertEquals(-q3, qConjugate.getQ3(), 0); [EOL] } <line_num>: 88,102
@Test [EOL] public final void testProductQuaternionQuaternion() { [EOL]     final Quaternion qA = new Quaternion(1, 0.5, -3, 4); [EOL]     final Quaternion qB = new Quaternion(6, 2, 1, -9); [EOL]     final Quaternion qResult = Quaternion.multiply(qA, qB); [EOL]     Assert.assertEquals(44, qResult.getQ0(), EPS); [EOL]     Assert.assertEquals(28, qResult.getQ1(), EPS); [EOL]     Assert.assertEquals(-4.5, qResult.getQ2(), EPS); [EOL]     Assert.assertEquals(21.5, qResult.getQ3(), EPS); [EOL]     final Vector3D vectorA = new Vector3D(qA.getVectorPart()); [EOL]     final Vector3D vectorB = new Vector3D(qB.getVectorPart()); [EOL]     final Vector3D vectorResult = new Vector3D(qResult.getVectorPart()); [EOL]     final double scalarPartRef = qA.getScalarPart() * qB.getScalarPart() - Vector3D.dotProduct(vectorA, vectorB); [EOL]     Assert.assertEquals(scalarPartRef, qResult.getScalarPart(), EPS); [EOL]     final Vector3D vectorPartRef = ((vectorA.scalarMultiply(qB.getScalarPart())).add(vectorB.scalarMultiply(qA.getScalarPart()))).add(Vector3D.crossProduct(vectorA, vectorB)); [EOL]     final double norm = (vectorResult.subtract(vectorPartRef)).getNorm(); [EOL]     Assert.assertEquals(0, norm, EPS); [EOL]     final Quaternion conjugateOfProduct = qB.getConjugate().multiply(qA.getConjugate()); [EOL]     final Quaternion productOfConjugate = (qA.multiply(qB)).getConjugate(); [EOL]     Assert.assertEquals(conjugateOfProduct.getQ0(), productOfConjugate.getQ0(), EPS); [EOL]     Assert.assertEquals(conjugateOfProduct.getQ1(), productOfConjugate.getQ1(), EPS); [EOL]     Assert.assertEquals(conjugateOfProduct.getQ2(), productOfConjugate.getQ2(), EPS); [EOL]     Assert.assertEquals(conjugateOfProduct.getQ3(), productOfConjugate.getQ3(), EPS); [EOL] } <line_num>: 104,146
@Test [EOL] public final void testProductQuaternionVector() { [EOL]     final Quaternion quaternion = new Quaternion(4, 7, -1, 2); [EOL]     final double[] vector = { 2.0, 1.0, 3.0 }; [EOL]     final Quaternion qResultQxV = Quaternion.multiply(quaternion, new Quaternion(vector)); [EOL]     Assert.assertEquals(-19, qResultQxV.getQ0(), EPS); [EOL]     Assert.assertEquals(3, qResultQxV.getQ1(), EPS); [EOL]     Assert.assertEquals(-13, qResultQxV.getQ2(), EPS); [EOL]     Assert.assertEquals(21, qResultQxV.getQ3(), EPS); [EOL]     final double[] vectorQ = quaternion.getVectorPart(); [EOL]     final double[] vectorResultQxV = qResultQxV.getVectorPart(); [EOL]     final double scalarPartRefQxV = -Vector3D.dotProduct(new Vector3D(vectorQ), new Vector3D(vector)); [EOL]     Assert.assertEquals(scalarPartRefQxV, qResultQxV.getScalarPart(), EPS); [EOL]     final Vector3D vectorPartRefQxV = (new Vector3D(vector).scalarMultiply(quaternion.getScalarPart())).add(Vector3D.crossProduct(new Vector3D(vectorQ), new Vector3D(vector))); [EOL]     final double normQxV = (new Vector3D(vectorResultQxV).subtract(vectorPartRefQxV)).getNorm(); [EOL]     Assert.assertEquals(0, normQxV, EPS); [EOL]     final Quaternion qResultVxQ = Quaternion.multiply(new Quaternion(vector), quaternion); [EOL]     Assert.assertEquals(-19, qResultVxQ.getQ0(), EPS); [EOL]     Assert.assertEquals(13, qResultVxQ.getQ1(), EPS); [EOL]     Assert.assertEquals(21, qResultVxQ.getQ2(), EPS); [EOL]     Assert.assertEquals(3, qResultVxQ.getQ3(), EPS); [EOL]     final double[] vectorResultVxQ = qResultVxQ.getVectorPart(); [EOL]     final double scalarPartRefVxQ = -Vector3D.dotProduct(new Vector3D(vectorQ), new Vector3D(vector)); [EOL]     Assert.assertEquals(scalarPartRefVxQ, qResultVxQ.getScalarPart(), EPS); [EOL]     final Vector3D vectorPartRefVxQ = (new Vector3D(vector).scalarMultiply(quaternion.getScalarPart())).add(Vector3D.crossProduct(new Vector3D(vector), new Vector3D(vectorQ))); [EOL]     final double normVxQ = (new Vector3D(vectorResultVxQ).subtract(vectorPartRefVxQ)).getNorm(); [EOL]     Assert.assertEquals(0, normVxQ, EPS); [EOL] } <line_num>: 148,197
@Test [EOL] public final void testDotProductQuaternionQuaternion() { [EOL]     final double expected = -6.; [EOL]     final Quaternion q1 = new Quaternion(1, 2, 2, 1); [EOL]     final Quaternion q2 = new Quaternion(3, -2, -1, -3); [EOL]     final double actual1 = Quaternion.dotProduct(q1, q2); [EOL]     final double actual2 = q1.dotProduct(q2); [EOL]     Assert.assertEquals(expected, actual1, EPS); [EOL]     Assert.assertEquals(expected, actual2, EPS); [EOL] } <line_num>: 199,212
@Test [EOL] public final void testScalarMultiplyDouble() { [EOL]     final double w = 1.6; [EOL]     final double x = -4.8; [EOL]     final double y = 11.20; [EOL]     final double z = 2.56; [EOL]     final Quaternion q1 = new Quaternion(0.5, -1.5, 3.5, 0.8); [EOL]     final double a = 3.2; [EOL]     final Quaternion q = q1.multiply(a); [EOL]     Assert.assertEquals(w, q.getQ0(), COMPARISON_EPS); [EOL]     Assert.assertEquals(x, q.getQ1(), COMPARISON_EPS); [EOL]     Assert.assertEquals(y, q.getQ2(), COMPARISON_EPS); [EOL]     Assert.assertEquals(z, q.getQ3(), COMPARISON_EPS); [EOL] } <line_num>: 214,231
@Test [EOL] public final void testAddQuaternionQuaternion() { [EOL]     final double w = 4; [EOL]     final double x = -1; [EOL]     final double y = 2; [EOL]     final double z = -4; [EOL]     final Quaternion q1 = new Quaternion(1., 2., -2., -1.); [EOL]     final Quaternion q2 = new Quaternion(3., -3., 4., -3.); [EOL]     final Quaternion qa = Quaternion.add(q1, q2); [EOL]     final Quaternion qb = q1.add(q2); [EOL]     Assert.assertEquals(w, qa.getQ0(), EPS); [EOL]     Assert.assertEquals(x, qa.getQ1(), EPS); [EOL]     Assert.assertEquals(y, qa.getQ2(), EPS); [EOL]     Assert.assertEquals(z, qa.getQ3(), EPS); [EOL]     Assert.assertEquals(w, qb.getQ0(), EPS); [EOL]     Assert.assertEquals(x, qb.getQ1(), EPS); [EOL]     Assert.assertEquals(y, qb.getQ2(), EPS); [EOL]     Assert.assertEquals(z, qb.getQ3(), EPS); [EOL] } <line_num>: 233,256
@Test [EOL] public final void testSubtractQuaternionQuaternion() { [EOL]     final double w = -2.; [EOL]     final double x = 5.; [EOL]     final double y = -6.; [EOL]     final double z = 2.; [EOL]     final Quaternion q1 = new Quaternion(1., 2., -2., -1.); [EOL]     final Quaternion q2 = new Quaternion(3., -3., 4., -3.); [EOL]     final Quaternion qa = Quaternion.subtract(q1, q2); [EOL]     final Quaternion qb = q1.subtract(q2); [EOL]     Assert.assertEquals(w, qa.getQ0(), EPS); [EOL]     Assert.assertEquals(x, qa.getQ1(), EPS); [EOL]     Assert.assertEquals(y, qa.getQ2(), EPS); [EOL]     Assert.assertEquals(z, qa.getQ3(), EPS); [EOL]     Assert.assertEquals(w, qb.getQ0(), EPS); [EOL]     Assert.assertEquals(x, qb.getQ1(), EPS); [EOL]     Assert.assertEquals(y, qb.getQ2(), EPS); [EOL]     Assert.assertEquals(z, qb.getQ3(), EPS); [EOL] } <line_num>: 258,281
@Test [EOL] public final void testNorm() { [EOL]     final double q0 = 2; [EOL]     final double q1 = 1; [EOL]     final double q2 = -4; [EOL]     final double q3 = 3; [EOL]     final Quaternion q = new Quaternion(q0, q1, q2, q3); [EOL]     final double norm = q.getNorm(); [EOL]     Assert.assertEquals(Math.sqrt(30), norm, 0); [EOL]     final double normSquareRef = Quaternion.multiply(q, q.getConjugate()).getScalarPart(); [EOL]     Assert.assertEquals(Math.sqrt(normSquareRef), norm, 0); [EOL] } <line_num>: 283,298
@Test [EOL] public final void testNormalize() { [EOL]     final Quaternion q = new Quaternion(2, 1, -4, -2); [EOL]     final Quaternion versor = q.normalize(); [EOL]     Assert.assertEquals(2.0 / 5.0, versor.getQ0(), 0); [EOL]     Assert.assertEquals(1.0 / 5.0, versor.getQ1(), 0); [EOL]     Assert.assertEquals(-4.0 / 5.0, versor.getQ2(), 0); [EOL]     Assert.assertEquals(-2.0 / 5.0, versor.getQ3(), 0); [EOL]     Assert.assertEquals(1, versor.getNorm(), 0); [EOL] } <line_num>: 300,313
@Test(expected = ZeroException.class) [EOL] public final void testNormalizeFail() { [EOL]     final Quaternion zeroQ = new Quaternion(0, 0, 0, 0); [EOL]     zeroQ.normalize(); [EOL] } <line_num>: 315,319
@Test [EOL] public final void testObjectEquals() { [EOL]     final double one = 1; [EOL]     final Quaternion q1 = new Quaternion(one, one, one, one); [EOL]     Assert.assertTrue(q1.equals(q1)); [EOL]     final Quaternion q2 = new Quaternion(one, one, one, one); [EOL]     Assert.assertTrue(q2.equals(q1)); [EOL]     final Quaternion q3 = new Quaternion(one, FastMath.nextUp(one), one, one); [EOL]     Assert.assertFalse(q3.equals(q1)); [EOL] } <line_num>: 321,332
@Test [EOL] public final void testQuaternionEquals() { [EOL]     final double inc = 1e-5; [EOL]     final Quaternion q1 = new Quaternion(2, 1, -4, -2); [EOL]     final Quaternion q2 = new Quaternion(q1.getQ0() + inc, q1.getQ1(), q1.getQ2(), q1.getQ3()); [EOL]     final Quaternion q3 = new Quaternion(q1.getQ0(), q1.getQ1() + inc, q1.getQ2(), q1.getQ3()); [EOL]     final Quaternion q4 = new Quaternion(q1.getQ0(), q1.getQ1(), q1.getQ2() + inc, q1.getQ3()); [EOL]     final Quaternion q5 = new Quaternion(q1.getQ0(), q1.getQ1(), q1.getQ2(), q1.getQ3() + inc); [EOL]     Assert.assertFalse(q1.equals(q2, 0.9 * inc)); [EOL]     Assert.assertFalse(q1.equals(q3, 0.9 * inc)); [EOL]     Assert.assertFalse(q1.equals(q4, 0.9 * inc)); [EOL]     Assert.assertFalse(q1.equals(q5, 0.9 * inc)); [EOL]     Assert.assertTrue(q1.equals(q2, 1.1 * inc)); [EOL]     Assert.assertTrue(q1.equals(q3, 1.1 * inc)); [EOL]     Assert.assertTrue(q1.equals(q4, 1.1 * inc)); [EOL]     Assert.assertTrue(q1.equals(q5, 1.1 * inc)); [EOL] } <line_num>: 334,352
@Test [EOL] public final void testQuaternionEquals2() { [EOL]     final Quaternion q1 = new Quaternion(1, 4, 2, 3); [EOL]     final double gap = 1e-5; [EOL]     final Quaternion q2 = new Quaternion(1 + gap, 4 + gap, 2 + gap, 3 + gap); [EOL]     Assert.assertTrue(q1.equals(q2, 10 * gap)); [EOL]     Assert.assertFalse(q1.equals(q2, gap)); [EOL]     Assert.assertFalse(q1.equals(q2, gap / 10)); [EOL] } <line_num>: 354,363
@Test [EOL] public final void testIsUnitQuaternion() { [EOL]     final Random r = new Random(48); [EOL]     final int numberOfTrials = 1000; [EOL]     for (int i = 0; i < numberOfTrials; i++) { [EOL]         final Quaternion q1 = new Quaternion(r.nextDouble(), r.nextDouble(), r.nextDouble(), r.nextDouble()); [EOL]         final Quaternion q2 = q1.normalize(); [EOL]         Assert.assertTrue(q2.isUnitQuaternion(COMPARISON_EPS)); [EOL]     } [EOL]     final Quaternion q = new Quaternion(1, 1, 1, 1); [EOL]     Assert.assertFalse(q.isUnitQuaternion(COMPARISON_EPS)); [EOL] } <line_num>: 365,377
@Test [EOL] public final void testIsPureQuaternion() { [EOL]     final Quaternion q1 = new Quaternion(0, 5, 4, 8); [EOL]     Assert.assertTrue(q1.isPureQuaternion(EPS)); [EOL]     final Quaternion q2 = new Quaternion(0 - EPS, 5, 4, 8); [EOL]     Assert.assertTrue(q2.isPureQuaternion(EPS)); [EOL]     final Quaternion q3 = new Quaternion(0 - 1.1 * EPS, 5, 4, 8); [EOL]     Assert.assertFalse(q3.isPureQuaternion(EPS)); [EOL]     final Random r = new Random(48); [EOL]     final double[] v = { r.nextDouble(), r.nextDouble(), r.nextDouble() }; [EOL]     final Quaternion q4 = new Quaternion(v); [EOL]     Assert.assertTrue(q4.isPureQuaternion(0)); [EOL]     final Quaternion q5 = new Quaternion(0, v); [EOL]     Assert.assertTrue(q5.isPureQuaternion(0)); [EOL] } <line_num>: 379,397
@Test [EOL] public final void testPolarForm() { [EOL]     final Random r = new Random(48); [EOL]     final int numberOfTrials = 1000; [EOL]     for (int i = 0; i < numberOfTrials; i++) { [EOL]         final Quaternion q = new Quaternion(2 * (r.nextDouble() - 0.5), 2 * (r.nextDouble() - 0.5), 2 * (r.nextDouble() - 0.5), 2 * (r.nextDouble() - 0.5)); [EOL]         final Quaternion qP = q.getPositivePolarForm(); [EOL]         Assert.assertTrue(qP.isUnitQuaternion(COMPARISON_EPS)); [EOL]         Assert.assertTrue(qP.getQ0() >= 0); [EOL]         final Rotation rot = new Rotation(q.getQ0(), q.getQ1(), q.getQ2(), q.getQ3(), true); [EOL]         final Rotation rotP = new Rotation(qP.getQ0(), qP.getQ1(), qP.getQ2(), qP.getQ3(), true); [EOL]         Assert.assertEquals(rot.getAngle(), rotP.getAngle(), COMPARISON_EPS); [EOL]         Assert.assertEquals(rot.getAxis().getX(), rot.getAxis().getX(), COMPARISON_EPS); [EOL]         Assert.assertEquals(rot.getAxis().getY(), rot.getAxis().getY(), COMPARISON_EPS); [EOL]         Assert.assertEquals(rot.getAxis().getZ(), rot.getAxis().getZ(), COMPARISON_EPS); [EOL]     } [EOL] } <line_num>: 399,419
@Test [EOL] public final void testGetInverse() { [EOL]     final Quaternion q = new Quaternion(1.5, 4, 2, -2.5); [EOL]     final Quaternion inverseQ = q.getInverse(); [EOL]     Assert.assertEquals(1.5 / 28.5, inverseQ.getQ0(), 0); [EOL]     Assert.assertEquals(-4.0 / 28.5, inverseQ.getQ1(), 0); [EOL]     Assert.assertEquals(-2.0 / 28.5, inverseQ.getQ2(), 0); [EOL]     Assert.assertEquals(2.5 / 28.5, inverseQ.getQ3(), 0); [EOL]     final Quaternion product = Quaternion.multiply(inverseQ, q); [EOL]     Assert.assertEquals(1, product.getQ0(), EPS); [EOL]     Assert.assertEquals(0, product.getQ1(), EPS); [EOL]     Assert.assertEquals(0, product.getQ2(), EPS); [EOL]     Assert.assertEquals(0, product.getQ3(), EPS); [EOL]     final Quaternion qNul = new Quaternion(0, 0, 0, 0); [EOL]     try { [EOL]         final Quaternion inverseQNul = qNul.getInverse(); [EOL]         Assert.fail("expecting ZeroException but got : " + inverseQNul); [EOL]     } catch (ZeroException ex) { [EOL]     } [EOL] } <line_num>: 421,444
@Test [EOL] public final void testToString() { [EOL]     final Quaternion q = new Quaternion(1, 2, 3, 4); [EOL]     Assert.assertTrue(q.toString().equals("[1.0 2.0 3.0 4.0]")); [EOL] } <line_num>: 446,450
