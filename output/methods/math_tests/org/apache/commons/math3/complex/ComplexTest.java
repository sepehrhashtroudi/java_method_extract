public TestComplex(double real, double imaginary) { [EOL]     super(real, imaginary); [EOL] } <line_num>: 1316,1318
public TestComplex(Complex other) { [EOL]     this(other.getReal(), other.getImaginary()); [EOL] } <line_num>: 1320,1322
@Test [EOL] public void testConstructor() { [EOL]     Complex z = new Complex(3.0, 4.0); [EOL]     Assert.assertEquals(3.0, z.getReal(), 1.0e-5); [EOL]     Assert.assertEquals(4.0, z.getImaginary(), 1.0e-5); [EOL] } <line_num>: 58,63
@Test [EOL] public void testConstructorNaN() { [EOL]     Complex z = new Complex(3.0, Double.NaN); [EOL]     Assert.assertTrue(z.isNaN()); [EOL]     z = new Complex(nan, 4.0); [EOL]     Assert.assertTrue(z.isNaN()); [EOL]     z = new Complex(3.0, 4.0); [EOL]     Assert.assertFalse(z.isNaN()); [EOL] } <line_num>: 65,75
@Test [EOL] public void testAbs() { [EOL]     Complex z = new Complex(3.0, 4.0); [EOL]     Assert.assertEquals(5.0, z.abs(), 1.0e-5); [EOL] } <line_num>: 77,81
@Test [EOL] public void testAbsNaN() { [EOL]     Assert.assertTrue(Double.isNaN(Complex.NaN.abs())); [EOL]     Complex z = new Complex(inf, nan); [EOL]     Assert.assertTrue(Double.isNaN(z.abs())); [EOL] } <line_num>: 83,88
@Test [EOL] public void testAbsInfinite() { [EOL]     Complex z = new Complex(inf, 0); [EOL]     Assert.assertEquals(inf, z.abs(), 0); [EOL]     z = new Complex(0, neginf); [EOL]     Assert.assertEquals(inf, z.abs(), 0); [EOL]     z = new Complex(inf, neginf); [EOL]     Assert.assertEquals(inf, z.abs(), 0); [EOL] } <line_num>: 90,98
@Test [EOL] public void testAdd() { [EOL]     Complex x = new Complex(3.0, 4.0); [EOL]     Complex y = new Complex(5.0, 6.0); [EOL]     Complex z = x.add(y); [EOL]     Assert.assertEquals(8.0, z.getReal(), 1.0e-5); [EOL]     Assert.assertEquals(10.0, z.getImaginary(), 1.0e-5); [EOL] } <line_num>: 100,107
@Test [EOL] public void testAddNaN() { [EOL]     Complex x = new Complex(3.0, 4.0); [EOL]     Complex z = x.add(Complex.NaN); [EOL]     Assert.assertSame(Complex.NaN, z); [EOL]     z = new Complex(1, nan); [EOL]     Complex w = x.add(z); [EOL]     Assert.assertSame(Complex.NaN, w); [EOL] } <line_num>: 109,117
@Test [EOL] public void testAddInf() { [EOL]     Complex x = new Complex(1, 1); [EOL]     Complex z = new Complex(inf, 0); [EOL]     Complex w = x.add(z); [EOL]     Assert.assertEquals(w.getImaginary(), 1, 0); [EOL]     Assert.assertEquals(inf, w.getReal(), 0); [EOL]     x = new Complex(neginf, 0); [EOL]     Assert.assertTrue(Double.isNaN(x.add(z).getReal())); [EOL] } <line_num>: 119,129
@Test [EOL] public void testScalarAdd() { [EOL]     Complex x = new Complex(3.0, 4.0); [EOL]     double yDouble = 2.0; [EOL]     Complex yComplex = new Complex(yDouble); [EOL]     Assert.assertEquals(x.add(yComplex), x.add(yDouble)); [EOL] } <line_num>: 132,138
@Test [EOL] public void testScalarAddNaN() { [EOL]     Complex x = new Complex(3.0, 4.0); [EOL]     double yDouble = Double.NaN; [EOL]     Complex yComplex = new Complex(yDouble); [EOL]     Assert.assertEquals(x.add(yComplex), x.add(yDouble)); [EOL] } <line_num>: 140,146
@Test [EOL] public void testScalarAddInf() { [EOL]     Complex x = new Complex(1, 1); [EOL]     double yDouble = Double.POSITIVE_INFINITY; [EOL]     Complex yComplex = new Complex(yDouble); [EOL]     Assert.assertEquals(x.add(yComplex), x.add(yDouble)); [EOL]     x = new Complex(neginf, 0); [EOL]     Assert.assertEquals(x.add(yComplex), x.add(yDouble)); [EOL] } <line_num>: 148,158
@Test [EOL] public void testConjugate() { [EOL]     Complex x = new Complex(3.0, 4.0); [EOL]     Complex z = x.conjugate(); [EOL]     Assert.assertEquals(3.0, z.getReal(), 1.0e-5); [EOL]     Assert.assertEquals(-4.0, z.getImaginary(), 1.0e-5); [EOL] } <line_num>: 160,166
@Test [EOL] public void testConjugateNaN() { [EOL]     Complex z = Complex.NaN.conjugate(); [EOL]     Assert.assertTrue(z.isNaN()); [EOL] } <line_num>: 168,172
@Test [EOL] public void testConjugateInfiinite() { [EOL]     Complex z = new Complex(0, inf); [EOL]     Assert.assertEquals(neginf, z.conjugate().getImaginary(), 0); [EOL]     z = new Complex(0, neginf); [EOL]     Assert.assertEquals(inf, z.conjugate().getImaginary(), 0); [EOL] } <line_num>: 174,180
@Test [EOL] public void testDivide() { [EOL]     Complex x = new Complex(3.0, 4.0); [EOL]     Complex y = new Complex(5.0, 6.0); [EOL]     Complex z = x.divide(y); [EOL]     Assert.assertEquals(39.0 / 61.0, z.getReal(), 1.0e-5); [EOL]     Assert.assertEquals(2.0 / 61.0, z.getImaginary(), 1.0e-5); [EOL] } <line_num>: 182,189
@Test [EOL] public void testDivideReal() { [EOL]     Complex x = new Complex(2d, 3d); [EOL]     Complex y = new Complex(2d, 0d); [EOL]     Assert.assertEquals(new Complex(1d, 1.5), x.divide(y)); [EOL] } <line_num>: 191,197
@Test [EOL] public void testDivideImaginary() { [EOL]     Complex x = new Complex(2d, 3d); [EOL]     Complex y = new Complex(0d, 2d); [EOL]     Assert.assertEquals(new Complex(1.5d, -1d), x.divide(y)); [EOL] } <line_num>: 199,204
@Test [EOL] public void testDivideInf() { [EOL]     Complex x = new Complex(3, 4); [EOL]     Complex w = new Complex(neginf, inf); [EOL]     Assert.assertTrue(x.divide(w).equals(Complex.ZERO)); [EOL]     Complex z = w.divide(x); [EOL]     Assert.assertTrue(Double.isNaN(z.getReal())); [EOL]     Assert.assertEquals(inf, z.getImaginary(), 0); [EOL]     w = new Complex(inf, inf); [EOL]     z = w.divide(x); [EOL]     Assert.assertTrue(Double.isNaN(z.getImaginary())); [EOL]     Assert.assertEquals(inf, z.getReal(), 0); [EOL]     w = new Complex(1, inf); [EOL]     z = w.divide(w); [EOL]     Assert.assertTrue(Double.isNaN(z.getReal())); [EOL]     Assert.assertTrue(Double.isNaN(z.getImaginary())); [EOL] } <line_num>: 206,225
@Test [EOL] public void testDivideZero() { [EOL]     Complex x = new Complex(3.0, 4.0); [EOL]     Complex z = x.divide(Complex.ZERO); [EOL]     Assert.assertEquals(z, Complex.NaN); [EOL] } <line_num>: 227,233
@Test [EOL] public void testDivideZeroZero() { [EOL]     Complex x = new Complex(0.0, 0.0); [EOL]     Complex z = x.divide(Complex.ZERO); [EOL]     Assert.assertEquals(z, Complex.NaN); [EOL] } <line_num>: 235,240
@Test [EOL] public void testDivideNaN() { [EOL]     Complex x = new Complex(3.0, 4.0); [EOL]     Complex z = x.divide(Complex.NaN); [EOL]     Assert.assertTrue(z.isNaN()); [EOL] } <line_num>: 242,247
@Test [EOL] public void testDivideNaNInf() { [EOL]     Complex z = oneInf.divide(Complex.ONE); [EOL]     Assert.assertTrue(Double.isNaN(z.getReal())); [EOL]     Assert.assertEquals(inf, z.getImaginary(), 0); [EOL]     z = negInfNegInf.divide(oneNaN); [EOL]     Assert.assertTrue(Double.isNaN(z.getReal())); [EOL]     Assert.assertTrue(Double.isNaN(z.getImaginary())); [EOL]     z = negInfInf.divide(Complex.ONE); [EOL]     Assert.assertTrue(Double.isNaN(z.getReal())); [EOL]     Assert.assertTrue(Double.isNaN(z.getImaginary())); [EOL] } <line_num>: 249,262
@Test [EOL] public void testScalarDivide() { [EOL]     Complex x = new Complex(3.0, 4.0); [EOL]     double yDouble = 2.0; [EOL]     Complex yComplex = new Complex(yDouble); [EOL]     Assert.assertEquals(x.divide(yComplex), x.divide(yDouble)); [EOL] } <line_num>: 264,270
@Test [EOL] public void testScalarDivideNaN() { [EOL]     Complex x = new Complex(3.0, 4.0); [EOL]     double yDouble = Double.NaN; [EOL]     Complex yComplex = new Complex(yDouble); [EOL]     Assert.assertEquals(x.divide(yComplex), x.divide(yDouble)); [EOL] } <line_num>: 272,278
@Test [EOL] public void testScalarDivideInf() { [EOL]     Complex x = new Complex(1, 1); [EOL]     double yDouble = Double.POSITIVE_INFINITY; [EOL]     Complex yComplex = new Complex(yDouble); [EOL]     TestUtils.assertEquals(x.divide(yComplex), x.divide(yDouble), 0); [EOL]     yDouble = Double.NEGATIVE_INFINITY; [EOL]     yComplex = new Complex(yDouble); [EOL]     TestUtils.assertEquals(x.divide(yComplex), x.divide(yDouble), 0); [EOL]     x = new Complex(1, Double.NEGATIVE_INFINITY); [EOL]     TestUtils.assertEquals(x.divide(yComplex), x.divide(yDouble), 0); [EOL] } <line_num>: 280,293
@Test [EOL] public void testScalarDivideZero() { [EOL]     Complex x = new Complex(1, 1); [EOL]     TestUtils.assertEquals(x.divide(Complex.ZERO), x.divide(0), 0); [EOL] } <line_num>: 295,299
@Test [EOL] public void testReciprocal() { [EOL]     Complex z = new Complex(5.0, 6.0); [EOL]     Complex act = z.reciprocal(); [EOL]     double expRe = 5.0 / 61.0; [EOL]     double expIm = -6.0 / 61.0; [EOL]     Assert.assertEquals(expRe, act.getReal(), FastMath.ulp(expRe)); [EOL]     Assert.assertEquals(expIm, act.getImaginary(), FastMath.ulp(expIm)); [EOL] } <line_num>: 301,309
@Test [EOL] public void testReciprocalReal() { [EOL]     Complex z = new Complex(-2.0, 0.0); [EOL]     Assert.assertEquals(new Complex(-0.5, 0.0), z.reciprocal()); [EOL] } <line_num>: 311,315
@Test [EOL] public void testReciprocalImaginary() { [EOL]     Complex z = new Complex(0.0, -2.0); [EOL]     Assert.assertEquals(new Complex(0.0, 0.5), z.reciprocal()); [EOL] } <line_num>: 317,321
@Test [EOL] public void testReciprocalInf() { [EOL]     Complex z = new Complex(neginf, inf); [EOL]     Assert.assertTrue(z.reciprocal().equals(Complex.ZERO)); [EOL]     z = new Complex(1, inf).reciprocal(); [EOL]     Assert.assertEquals(z, Complex.ZERO); [EOL] } <line_num>: 323,330
@Test [EOL] public void testReciprocalZero() { [EOL]     Assert.assertEquals(Complex.ZERO.reciprocal(), Complex.INF); [EOL] } <line_num>: 332,335
@Test [EOL] public void testReciprocalNaN() { [EOL]     Assert.assertTrue(Complex.NaN.reciprocal().isNaN()); [EOL] } <line_num>: 337,340
@Test [EOL] public void testMultiply() { [EOL]     Complex x = new Complex(3.0, 4.0); [EOL]     Complex y = new Complex(5.0, 6.0); [EOL]     Complex z = x.multiply(y); [EOL]     Assert.assertEquals(-9.0, z.getReal(), 1.0e-5); [EOL]     Assert.assertEquals(38.0, z.getImaginary(), 1.0e-5); [EOL] } <line_num>: 342,349
@Test [EOL] public void testMultiplyNaN() { [EOL]     Complex x = new Complex(3.0, 4.0); [EOL]     Complex z = x.multiply(Complex.NaN); [EOL]     Assert.assertSame(Complex.NaN, z); [EOL]     z = Complex.NaN.multiply(5); [EOL]     Assert.assertSame(Complex.NaN, z); [EOL] } <line_num>: 351,358
@Test [EOL] public void testMultiplyInfInf() { [EOL]     Assert.assertTrue(infInf.multiply(infInf).isInfinite()); [EOL] } <line_num>: 360,364
@Test [EOL] public void testMultiplyNaNInf() { [EOL]     Complex z = new Complex(1, 1); [EOL]     Complex w = z.multiply(infOne); [EOL]     Assert.assertEquals(w.getReal(), inf, 0); [EOL]     Assert.assertEquals(w.getImaginary(), inf, 0); [EOL]     Assert.assertTrue(new Complex(1, 0).multiply(infInf).equals(Complex.INF)); [EOL]     Assert.assertTrue(new Complex(-1, 0).multiply(infInf).equals(Complex.INF)); [EOL]     Assert.assertTrue(new Complex(1, 0).multiply(negInfZero).equals(Complex.INF)); [EOL]     w = oneInf.multiply(oneNegInf); [EOL]     Assert.assertEquals(w.getReal(), inf, 0); [EOL]     Assert.assertEquals(w.getImaginary(), inf, 0); [EOL]     w = negInfNegInf.multiply(oneNaN); [EOL]     Assert.assertTrue(Double.isNaN(w.getReal())); [EOL]     Assert.assertTrue(Double.isNaN(w.getImaginary())); [EOL]     z = new Complex(1, neginf); [EOL]     Assert.assertSame(Complex.INF, z.multiply(z)); [EOL] } <line_num>: 366,388
@Test [EOL] public void testScalarMultiply() { [EOL]     Complex x = new Complex(3.0, 4.0); [EOL]     double yDouble = 2.0; [EOL]     Complex yComplex = new Complex(yDouble); [EOL]     Assert.assertEquals(x.multiply(yComplex), x.multiply(yDouble)); [EOL]     int zInt = -5; [EOL]     Complex zComplex = new Complex(zInt); [EOL]     Assert.assertEquals(x.multiply(zComplex), x.multiply(zInt)); [EOL] } <line_num>: 390,399
@Test [EOL] public void testScalarMultiplyNaN() { [EOL]     Complex x = new Complex(3.0, 4.0); [EOL]     double yDouble = Double.NaN; [EOL]     Complex yComplex = new Complex(yDouble); [EOL]     Assert.assertEquals(x.multiply(yComplex), x.multiply(yDouble)); [EOL] } <line_num>: 401,407
@Test [EOL] public void testScalarMultiplyInf() { [EOL]     Complex x = new Complex(1, 1); [EOL]     double yDouble = Double.POSITIVE_INFINITY; [EOL]     Complex yComplex = new Complex(yDouble); [EOL]     Assert.assertEquals(x.multiply(yComplex), x.multiply(yDouble)); [EOL]     yDouble = Double.NEGATIVE_INFINITY; [EOL]     yComplex = new Complex(yDouble); [EOL]     Assert.assertEquals(x.multiply(yComplex), x.multiply(yDouble)); [EOL] } <line_num>: 409,419
@Test [EOL] public void testNegate() { [EOL]     Complex x = new Complex(3.0, 4.0); [EOL]     Complex z = x.negate(); [EOL]     Assert.assertEquals(-3.0, z.getReal(), 1.0e-5); [EOL]     Assert.assertEquals(-4.0, z.getImaginary(), 1.0e-5); [EOL] } <line_num>: 421,427
@Test [EOL] public void testNegateNaN() { [EOL]     Complex z = Complex.NaN.negate(); [EOL]     Assert.assertTrue(z.isNaN()); [EOL] } <line_num>: 429,433
@Test [EOL] public void testSubtract() { [EOL]     Complex x = new Complex(3.0, 4.0); [EOL]     Complex y = new Complex(5.0, 6.0); [EOL]     Complex z = x.subtract(y); [EOL]     Assert.assertEquals(-2.0, z.getReal(), 1.0e-5); [EOL]     Assert.assertEquals(-2.0, z.getImaginary(), 1.0e-5); [EOL] } <line_num>: 435,442
@Test [EOL] public void testSubtractNaN() { [EOL]     Complex x = new Complex(3.0, 4.0); [EOL]     Complex z = x.subtract(Complex.NaN); [EOL]     Assert.assertSame(Complex.NaN, z); [EOL]     z = new Complex(1, nan); [EOL]     Complex w = x.subtract(z); [EOL]     Assert.assertSame(Complex.NaN, w); [EOL] } <line_num>: 444,452
@Test [EOL] public void testSubtractInf() { [EOL]     Complex x = new Complex(1, 1); [EOL]     Complex z = new Complex(neginf, 0); [EOL]     Complex w = x.subtract(z); [EOL]     Assert.assertEquals(w.getImaginary(), 1, 0); [EOL]     Assert.assertEquals(inf, w.getReal(), 0); [EOL]     x = new Complex(neginf, 0); [EOL]     Assert.assertTrue(Double.isNaN(x.subtract(z).getReal())); [EOL] } <line_num>: 454,464
@Test [EOL] public void testScalarSubtract() { [EOL]     Complex x = new Complex(3.0, 4.0); [EOL]     double yDouble = 2.0; [EOL]     Complex yComplex = new Complex(yDouble); [EOL]     Assert.assertEquals(x.subtract(yComplex), x.subtract(yDouble)); [EOL] } <line_num>: 466,472
@Test [EOL] public void testScalarSubtractNaN() { [EOL]     Complex x = new Complex(3.0, 4.0); [EOL]     double yDouble = Double.NaN; [EOL]     Complex yComplex = new Complex(yDouble); [EOL]     Assert.assertEquals(x.subtract(yComplex), x.subtract(yDouble)); [EOL] } <line_num>: 474,480
@Test [EOL] public void testScalarSubtractInf() { [EOL]     Complex x = new Complex(1, 1); [EOL]     double yDouble = Double.POSITIVE_INFINITY; [EOL]     Complex yComplex = new Complex(yDouble); [EOL]     Assert.assertEquals(x.subtract(yComplex), x.subtract(yDouble)); [EOL]     x = new Complex(neginf, 0); [EOL]     Assert.assertEquals(x.subtract(yComplex), x.subtract(yDouble)); [EOL] } <line_num>: 482,491
@Test [EOL] public void testEqualsNull() { [EOL]     Complex x = new Complex(3.0, 4.0); [EOL]     Assert.assertFalse(x.equals(null)); [EOL] } <line_num>: 494,498
@Test [EOL] public void testEqualsClass() { [EOL]     Complex x = new Complex(3.0, 4.0); [EOL]     Assert.assertFalse(x.equals(this)); [EOL] } <line_num>: 500,504
@Test [EOL] public void testEqualsSame() { [EOL]     Complex x = new Complex(3.0, 4.0); [EOL]     Assert.assertTrue(x.equals(x)); [EOL] } <line_num>: 506,510
@Test [EOL] public void testEqualsTrue() { [EOL]     Complex x = new Complex(3.0, 4.0); [EOL]     Complex y = new Complex(3.0, 4.0); [EOL]     Assert.assertTrue(x.equals(y)); [EOL] } <line_num>: 512,517
@Test [EOL] public void testEqualsRealDifference() { [EOL]     Complex x = new Complex(0.0, 0.0); [EOL]     Complex y = new Complex(0.0 + Double.MIN_VALUE, 0.0); [EOL]     Assert.assertFalse(x.equals(y)); [EOL] } <line_num>: 519,524
@Test [EOL] public void testEqualsImaginaryDifference() { [EOL]     Complex x = new Complex(0.0, 0.0); [EOL]     Complex y = new Complex(0.0, 0.0 + Double.MIN_VALUE); [EOL]     Assert.assertFalse(x.equals(y)); [EOL] } <line_num>: 526,531
@Test [EOL] public void testEqualsNaN() { [EOL]     Complex realNaN = new Complex(Double.NaN, 0.0); [EOL]     Complex imaginaryNaN = new Complex(0.0, Double.NaN); [EOL]     Complex complexNaN = Complex.NaN; [EOL]     Assert.assertTrue(realNaN.equals(imaginaryNaN)); [EOL]     Assert.assertTrue(imaginaryNaN.equals(complexNaN)); [EOL]     Assert.assertTrue(realNaN.equals(complexNaN)); [EOL] } <line_num>: 533,541
@Test [EOL] public void testHashCode() { [EOL]     Complex x = new Complex(0.0, 0.0); [EOL]     Complex y = new Complex(0.0, 0.0 + Double.MIN_VALUE); [EOL]     Assert.assertFalse(x.hashCode() == y.hashCode()); [EOL]     y = new Complex(0.0 + Double.MIN_VALUE, 0.0); [EOL]     Assert.assertFalse(x.hashCode() == y.hashCode()); [EOL]     Complex realNaN = new Complex(Double.NaN, 0.0); [EOL]     Complex imaginaryNaN = new Complex(0.0, Double.NaN); [EOL]     Assert.assertEquals(realNaN.hashCode(), imaginaryNaN.hashCode()); [EOL]     Assert.assertEquals(imaginaryNaN.hashCode(), Complex.NaN.hashCode()); [EOL] } <line_num>: 543,554
@Test [EOL] public void testAcos() { [EOL]     Complex z = new Complex(3, 4); [EOL]     Complex expected = new Complex(0.936812, -2.30551); [EOL]     TestUtils.assertEquals(expected, z.acos(), 1.0e-5); [EOL]     TestUtils.assertEquals(new Complex(FastMath.acos(0), 0), Complex.ZERO.acos(), 1.0e-12); [EOL] } <line_num>: 556,563
@Test [EOL] public void testAcosInf() { [EOL]     TestUtils.assertSame(Complex.NaN, oneInf.acos()); [EOL]     TestUtils.assertSame(Complex.NaN, oneNegInf.acos()); [EOL]     TestUtils.assertSame(Complex.NaN, infOne.acos()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfOne.acos()); [EOL]     TestUtils.assertSame(Complex.NaN, infInf.acos()); [EOL]     TestUtils.assertSame(Complex.NaN, infNegInf.acos()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfInf.acos()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfNegInf.acos()); [EOL] } <line_num>: 565,575
@Test [EOL] public void testAcosNaN() { [EOL]     Assert.assertTrue(Complex.NaN.acos().isNaN()); [EOL] } <line_num>: 577,580
@Test [EOL] public void testAsin() { [EOL]     Complex z = new Complex(3, 4); [EOL]     Complex expected = new Complex(0.633984, 2.30551); [EOL]     TestUtils.assertEquals(expected, z.asin(), 1.0e-5); [EOL] } <line_num>: 582,587
@Test [EOL] public void testAsinNaN() { [EOL]     Assert.assertTrue(Complex.NaN.asin().isNaN()); [EOL] } <line_num>: 589,592
@Test [EOL] public void testAsinInf() { [EOL]     TestUtils.assertSame(Complex.NaN, oneInf.asin()); [EOL]     TestUtils.assertSame(Complex.NaN, oneNegInf.asin()); [EOL]     TestUtils.assertSame(Complex.NaN, infOne.asin()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfOne.asin()); [EOL]     TestUtils.assertSame(Complex.NaN, infInf.asin()); [EOL]     TestUtils.assertSame(Complex.NaN, infNegInf.asin()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfInf.asin()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfNegInf.asin()); [EOL] } <line_num>: 594,604
@Test [EOL] public void testAtan() { [EOL]     Complex z = new Complex(3, 4); [EOL]     Complex expected = new Complex(1.44831, 0.158997); [EOL]     TestUtils.assertEquals(expected, z.atan(), 1.0e-5); [EOL] } <line_num>: 607,612
@Test [EOL] public void testAtanInf() { [EOL]     TestUtils.assertSame(Complex.NaN, oneInf.atan()); [EOL]     TestUtils.assertSame(Complex.NaN, oneNegInf.atan()); [EOL]     TestUtils.assertSame(Complex.NaN, infOne.atan()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfOne.atan()); [EOL]     TestUtils.assertSame(Complex.NaN, infInf.atan()); [EOL]     TestUtils.assertSame(Complex.NaN, infNegInf.atan()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfInf.atan()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfNegInf.atan()); [EOL] } <line_num>: 614,624
@Test [EOL] public void testAtanI() { [EOL]     Assert.assertTrue(Complex.I.atan().isNaN()); [EOL] } <line_num>: 626,629
@Test [EOL] public void testAtanNaN() { [EOL]     Assert.assertTrue(Complex.NaN.atan().isNaN()); [EOL] } <line_num>: 631,634
@Test [EOL] public void testCos() { [EOL]     Complex z = new Complex(3, 4); [EOL]     Complex expected = new Complex(-27.03495, -3.851153); [EOL]     TestUtils.assertEquals(expected, z.cos(), 1.0e-5); [EOL] } <line_num>: 636,641
@Test [EOL] public void testCosNaN() { [EOL]     Assert.assertTrue(Complex.NaN.cos().isNaN()); [EOL] } <line_num>: 643,646
@Test [EOL] public void testCosInf() { [EOL]     TestUtils.assertSame(infNegInf, oneInf.cos()); [EOL]     TestUtils.assertSame(infInf, oneNegInf.cos()); [EOL]     TestUtils.assertSame(Complex.NaN, infOne.cos()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfOne.cos()); [EOL]     TestUtils.assertSame(Complex.NaN, infInf.cos()); [EOL]     TestUtils.assertSame(Complex.NaN, infNegInf.cos()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfInf.cos()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfNegInf.cos()); [EOL] } <line_num>: 648,658
@Test [EOL] public void testCosh() { [EOL]     Complex z = new Complex(3, 4); [EOL]     Complex expected = new Complex(-6.58066, -7.58155); [EOL]     TestUtils.assertEquals(expected, z.cosh(), 1.0e-5); [EOL] } <line_num>: 660,665
@Test [EOL] public void testCoshNaN() { [EOL]     Assert.assertTrue(Complex.NaN.cosh().isNaN()); [EOL] } <line_num>: 667,670
@Test [EOL] public void testCoshInf() { [EOL]     TestUtils.assertSame(Complex.NaN, oneInf.cosh()); [EOL]     TestUtils.assertSame(Complex.NaN, oneNegInf.cosh()); [EOL]     TestUtils.assertSame(infInf, infOne.cosh()); [EOL]     TestUtils.assertSame(infNegInf, negInfOne.cosh()); [EOL]     TestUtils.assertSame(Complex.NaN, infInf.cosh()); [EOL]     TestUtils.assertSame(Complex.NaN, infNegInf.cosh()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfInf.cosh()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfNegInf.cosh()); [EOL] } <line_num>: 672,682
@Test [EOL] public void testExp() { [EOL]     Complex z = new Complex(3, 4); [EOL]     Complex expected = new Complex(-13.12878, -15.20078); [EOL]     TestUtils.assertEquals(expected, z.exp(), 1.0e-5); [EOL]     TestUtils.assertEquals(Complex.ONE, Complex.ZERO.exp(), 10e-12); [EOL]     Complex iPi = Complex.I.multiply(new Complex(pi, 0)); [EOL]     TestUtils.assertEquals(Complex.ONE.negate(), iPi.exp(), 10e-12); [EOL] } <line_num>: 684,694
@Test [EOL] public void testExpNaN() { [EOL]     Assert.assertTrue(Complex.NaN.exp().isNaN()); [EOL] } <line_num>: 696,699
@Test [EOL] public void testExpInf() { [EOL]     TestUtils.assertSame(Complex.NaN, oneInf.exp()); [EOL]     TestUtils.assertSame(Complex.NaN, oneNegInf.exp()); [EOL]     TestUtils.assertSame(infInf, infOne.exp()); [EOL]     TestUtils.assertSame(Complex.ZERO, negInfOne.exp()); [EOL]     TestUtils.assertSame(Complex.NaN, infInf.exp()); [EOL]     TestUtils.assertSame(Complex.NaN, infNegInf.exp()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfInf.exp()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfNegInf.exp()); [EOL] } <line_num>: 701,711
@Test [EOL] public void testLog() { [EOL]     Complex z = new Complex(3, 4); [EOL]     Complex expected = new Complex(1.60944, 0.927295); [EOL]     TestUtils.assertEquals(expected, z.log(), 1.0e-5); [EOL] } <line_num>: 713,718
@Test [EOL] public void testLogNaN() { [EOL]     Assert.assertTrue(Complex.NaN.log().isNaN()); [EOL] } <line_num>: 720,723
@Test [EOL] public void testLogInf() { [EOL]     TestUtils.assertEquals(new Complex(inf, pi / 2), oneInf.log(), 10e-12); [EOL]     TestUtils.assertEquals(new Complex(inf, -pi / 2), oneNegInf.log(), 10e-12); [EOL]     TestUtils.assertEquals(infZero, infOne.log(), 10e-12); [EOL]     TestUtils.assertEquals(new Complex(inf, pi), negInfOne.log(), 10e-12); [EOL]     TestUtils.assertEquals(new Complex(inf, pi / 4), infInf.log(), 10e-12); [EOL]     TestUtils.assertEquals(new Complex(inf, -pi / 4), infNegInf.log(), 10e-12); [EOL]     TestUtils.assertEquals(new Complex(inf, 3d * pi / 4), negInfInf.log(), 10e-12); [EOL]     TestUtils.assertEquals(new Complex(inf, -3d * pi / 4), negInfNegInf.log(), 10e-12); [EOL] } <line_num>: 725,742
@Test [EOL] public void testLogZero() { [EOL]     TestUtils.assertSame(negInfZero, Complex.ZERO.log()); [EOL] } <line_num>: 744,747
@Test [EOL] public void testPow() { [EOL]     Complex x = new Complex(3, 4); [EOL]     Complex y = new Complex(5, 6); [EOL]     Complex expected = new Complex(-1.860893, 11.83677); [EOL]     TestUtils.assertEquals(expected, x.pow(y), 1.0e-5); [EOL] } <line_num>: 749,755
@Test [EOL] public void testPowNaNBase() { [EOL]     Complex x = new Complex(3, 4); [EOL]     Assert.assertTrue(Complex.NaN.pow(x).isNaN()); [EOL] } <line_num>: 757,761
@Test [EOL] public void testPowNaNExponent() { [EOL]     Complex x = new Complex(3, 4); [EOL]     Assert.assertTrue(x.pow(Complex.NaN).isNaN()); [EOL] } <line_num>: 763,767
@Test [EOL] public void testPowInf() { [EOL]     TestUtils.assertSame(Complex.NaN, Complex.ONE.pow(oneInf)); [EOL]     TestUtils.assertSame(Complex.NaN, Complex.ONE.pow(oneNegInf)); [EOL]     TestUtils.assertSame(Complex.NaN, Complex.ONE.pow(infOne)); [EOL]     TestUtils.assertSame(Complex.NaN, Complex.ONE.pow(infInf)); [EOL]     TestUtils.assertSame(Complex.NaN, Complex.ONE.pow(infNegInf)); [EOL]     TestUtils.assertSame(Complex.NaN, Complex.ONE.pow(negInfInf)); [EOL]     TestUtils.assertSame(Complex.NaN, Complex.ONE.pow(negInfNegInf)); [EOL]     TestUtils.assertSame(Complex.NaN, infOne.pow(Complex.ONE)); [EOL]     TestUtils.assertSame(Complex.NaN, negInfOne.pow(Complex.ONE)); [EOL]     TestUtils.assertSame(Complex.NaN, infInf.pow(Complex.ONE)); [EOL]     TestUtils.assertSame(Complex.NaN, infNegInf.pow(Complex.ONE)); [EOL]     TestUtils.assertSame(Complex.NaN, negInfInf.pow(Complex.ONE)); [EOL]     TestUtils.assertSame(Complex.NaN, negInfNegInf.pow(Complex.ONE)); [EOL]     TestUtils.assertSame(Complex.NaN, negInfNegInf.pow(infNegInf)); [EOL]     TestUtils.assertSame(Complex.NaN, negInfNegInf.pow(negInfNegInf)); [EOL]     TestUtils.assertSame(Complex.NaN, negInfNegInf.pow(infInf)); [EOL]     TestUtils.assertSame(Complex.NaN, infInf.pow(infNegInf)); [EOL]     TestUtils.assertSame(Complex.NaN, infInf.pow(negInfNegInf)); [EOL]     TestUtils.assertSame(Complex.NaN, infInf.pow(infInf)); [EOL]     TestUtils.assertSame(Complex.NaN, infNegInf.pow(infNegInf)); [EOL]     TestUtils.assertSame(Complex.NaN, infNegInf.pow(negInfNegInf)); [EOL]     TestUtils.assertSame(Complex.NaN, infNegInf.pow(infInf)); [EOL] } <line_num>: 769,793
@Test [EOL] public void testPowZero() { [EOL]     TestUtils.assertSame(Complex.NaN, Complex.ZERO.pow(Complex.ONE)); [EOL]     TestUtils.assertSame(Complex.NaN, Complex.ZERO.pow(Complex.ZERO)); [EOL]     TestUtils.assertSame(Complex.NaN, Complex.ZERO.pow(Complex.I)); [EOL]     TestUtils.assertEquals(Complex.ONE, Complex.ONE.pow(Complex.ZERO), 10e-12); [EOL]     TestUtils.assertEquals(Complex.ONE, Complex.I.pow(Complex.ZERO), 10e-12); [EOL]     TestUtils.assertEquals(Complex.ONE, new Complex(-1, 3).pow(Complex.ZERO), 10e-12); [EOL] } <line_num>: 795,809
@Test [EOL] public void testScalarPow() { [EOL]     Complex x = new Complex(3, 4); [EOL]     double yDouble = 5.0; [EOL]     Complex yComplex = new Complex(yDouble); [EOL]     Assert.assertEquals(x.pow(yComplex), x.pow(yDouble)); [EOL] } <line_num>: 811,817
@Test [EOL] public void testScalarPowNaNBase() { [EOL]     Complex x = Complex.NaN; [EOL]     double yDouble = 5.0; [EOL]     Complex yComplex = new Complex(yDouble); [EOL]     Assert.assertEquals(x.pow(yComplex), x.pow(yDouble)); [EOL] } <line_num>: 819,825
@Test [EOL] public void testScalarPowNaNExponent() { [EOL]     Complex x = new Complex(3, 4); [EOL]     double yDouble = Double.NaN; [EOL]     Complex yComplex = new Complex(yDouble); [EOL]     Assert.assertEquals(x.pow(yComplex), x.pow(yDouble)); [EOL] } <line_num>: 827,833
@Test [EOL] public void testScalarPowInf() { [EOL]     TestUtils.assertSame(Complex.NaN, Complex.ONE.pow(Double.POSITIVE_INFINITY)); [EOL]     TestUtils.assertSame(Complex.NaN, Complex.ONE.pow(Double.NEGATIVE_INFINITY)); [EOL]     TestUtils.assertSame(Complex.NaN, infOne.pow(1.0)); [EOL]     TestUtils.assertSame(Complex.NaN, negInfOne.pow(1.0)); [EOL]     TestUtils.assertSame(Complex.NaN, infInf.pow(1.0)); [EOL]     TestUtils.assertSame(Complex.NaN, infNegInf.pow(1.0)); [EOL]     TestUtils.assertSame(Complex.NaN, negInfInf.pow(10)); [EOL]     TestUtils.assertSame(Complex.NaN, negInfNegInf.pow(1.0)); [EOL]     TestUtils.assertSame(Complex.NaN, negInfNegInf.pow(Double.POSITIVE_INFINITY)); [EOL]     TestUtils.assertSame(Complex.NaN, negInfNegInf.pow(Double.POSITIVE_INFINITY)); [EOL]     TestUtils.assertSame(Complex.NaN, infInf.pow(Double.POSITIVE_INFINITY)); [EOL]     TestUtils.assertSame(Complex.NaN, infInf.pow(Double.NEGATIVE_INFINITY)); [EOL]     TestUtils.assertSame(Complex.NaN, infNegInf.pow(Double.NEGATIVE_INFINITY)); [EOL]     TestUtils.assertSame(Complex.NaN, infNegInf.pow(Double.POSITIVE_INFINITY)); [EOL] } <line_num>: 835,851
@Test [EOL] public void testScalarPowZero() { [EOL]     TestUtils.assertSame(Complex.NaN, Complex.ZERO.pow(1.0)); [EOL]     TestUtils.assertSame(Complex.NaN, Complex.ZERO.pow(0.0)); [EOL]     TestUtils.assertEquals(Complex.ONE, Complex.ONE.pow(0.0), 10e-12); [EOL]     TestUtils.assertEquals(Complex.ONE, Complex.I.pow(0.0), 10e-12); [EOL]     TestUtils.assertEquals(Complex.ONE, new Complex(-1, 3).pow(0.0), 10e-12); [EOL] } <line_num>: 853,860
@Test(expected = NullArgumentException.class) [EOL] public void testpowNull() { [EOL]     Complex.ONE.pow(null); [EOL] } <line_num>: 862,865
@Test [EOL] public void testSin() { [EOL]     Complex z = new Complex(3, 4); [EOL]     Complex expected = new Complex(3.853738, -27.01681); [EOL]     TestUtils.assertEquals(expected, z.sin(), 1.0e-5); [EOL] } <line_num>: 867,872
@Test [EOL] public void testSinInf() { [EOL]     TestUtils.assertSame(infInf, oneInf.sin()); [EOL]     TestUtils.assertSame(infNegInf, oneNegInf.sin()); [EOL]     TestUtils.assertSame(Complex.NaN, infOne.sin()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfOne.sin()); [EOL]     TestUtils.assertSame(Complex.NaN, infInf.sin()); [EOL]     TestUtils.assertSame(Complex.NaN, infNegInf.sin()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfInf.sin()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfNegInf.sin()); [EOL] } <line_num>: 874,884
@Test [EOL] public void testSinNaN() { [EOL]     Assert.assertTrue(Complex.NaN.sin().isNaN()); [EOL] } <line_num>: 886,889
@Test [EOL] public void testSinh() { [EOL]     Complex z = new Complex(3, 4); [EOL]     Complex expected = new Complex(-6.54812, -7.61923); [EOL]     TestUtils.assertEquals(expected, z.sinh(), 1.0e-5); [EOL] } <line_num>: 891,896
@Test [EOL] public void testSinhNaN() { [EOL]     Assert.assertTrue(Complex.NaN.sinh().isNaN()); [EOL] } <line_num>: 898,901
@Test [EOL] public void testSinhInf() { [EOL]     TestUtils.assertSame(Complex.NaN, oneInf.sinh()); [EOL]     TestUtils.assertSame(Complex.NaN, oneNegInf.sinh()); [EOL]     TestUtils.assertSame(infInf, infOne.sinh()); [EOL]     TestUtils.assertSame(negInfInf, negInfOne.sinh()); [EOL]     TestUtils.assertSame(Complex.NaN, infInf.sinh()); [EOL]     TestUtils.assertSame(Complex.NaN, infNegInf.sinh()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfInf.sinh()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfNegInf.sinh()); [EOL] } <line_num>: 903,913
@Test [EOL] public void testSqrtRealPositive() { [EOL]     Complex z = new Complex(3, 4); [EOL]     Complex expected = new Complex(2, 1); [EOL]     TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5); [EOL] } <line_num>: 915,920
@Test [EOL] public void testSqrtRealZero() { [EOL]     Complex z = new Complex(0.0, 4); [EOL]     Complex expected = new Complex(1.41421, 1.41421); [EOL]     TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5); [EOL] } <line_num>: 922,927
@Test [EOL] public void testSqrtRealNegative() { [EOL]     Complex z = new Complex(-3.0, 4); [EOL]     Complex expected = new Complex(1, 2); [EOL]     TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5); [EOL] } <line_num>: 929,934
@Test [EOL] public void testSqrtImaginaryZero() { [EOL]     Complex z = new Complex(-3.0, 0.0); [EOL]     Complex expected = new Complex(0.0, 1.73205); [EOL]     TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5); [EOL] } <line_num>: 936,941
@Test [EOL] public void testSqrtImaginaryNegative() { [EOL]     Complex z = new Complex(-3.0, -4.0); [EOL]     Complex expected = new Complex(1.0, -2.0); [EOL]     TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5); [EOL] } <line_num>: 943,948
@Test [EOL] public void testSqrtPolar() { [EOL]     double r = 1; [EOL]     for (int i = 0; i < 5; i++) { [EOL]         r += i; [EOL]         double theta = 0; [EOL]         for (int j = 0; j < 11; j++) { [EOL]             theta += pi / 12; [EOL]             Complex z = ComplexUtils.polar2Complex(r, theta); [EOL]             Complex sqrtz = ComplexUtils.polar2Complex(FastMath.sqrt(r), theta / 2); [EOL]             TestUtils.assertEquals(sqrtz, z.sqrt(), 10e-12); [EOL]         } [EOL]     } [EOL] } <line_num>: 950,963
@Test [EOL] public void testSqrtNaN() { [EOL]     Assert.assertTrue(Complex.NaN.sqrt().isNaN()); [EOL] } <line_num>: 965,968
@Test [EOL] public void testSqrtInf() { [EOL]     TestUtils.assertSame(infNaN, oneInf.sqrt()); [EOL]     TestUtils.assertSame(infNaN, oneNegInf.sqrt()); [EOL]     TestUtils.assertSame(infZero, infOne.sqrt()); [EOL]     TestUtils.assertSame(zeroInf, negInfOne.sqrt()); [EOL]     TestUtils.assertSame(infNaN, infInf.sqrt()); [EOL]     TestUtils.assertSame(infNaN, infNegInf.sqrt()); [EOL]     TestUtils.assertSame(nanInf, negInfInf.sqrt()); [EOL]     TestUtils.assertSame(nanNegInf, negInfNegInf.sqrt()); [EOL] } <line_num>: 970,980
@Test [EOL] public void testSqrt1z() { [EOL]     Complex z = new Complex(3, 4); [EOL]     Complex expected = new Complex(4.08033, -2.94094); [EOL]     TestUtils.assertEquals(expected, z.sqrt1z(), 1.0e-5); [EOL] } <line_num>: 982,987
@Test [EOL] public void testSqrt1zNaN() { [EOL]     Assert.assertTrue(Complex.NaN.sqrt1z().isNaN()); [EOL] } <line_num>: 989,992
@Test [EOL] public void testTan() { [EOL]     Complex z = new Complex(3, 4); [EOL]     Complex expected = new Complex(-0.000187346, 0.999356); [EOL]     TestUtils.assertEquals(expected, z.tan(), 1.0e-5); [EOL]     Complex actual = new Complex(3.0, 1E10).tan(); [EOL]     expected = new Complex(0, 1); [EOL]     TestUtils.assertEquals(expected, actual, 1.0e-5); [EOL]     actual = new Complex(3.0, -1E10).tan(); [EOL]     expected = new Complex(0, -1); [EOL]     TestUtils.assertEquals(expected, actual, 1.0e-5); [EOL] } <line_num>: 994,1006
@Test [EOL] public void testTanNaN() { [EOL]     Assert.assertTrue(Complex.NaN.tan().isNaN()); [EOL] } <line_num>: 1008,1011
@Test [EOL] public void testTanInf() { [EOL]     TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan()); [EOL]     TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan()); [EOL]     TestUtils.assertSame(Complex.NaN, infOne.tan()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfOne.tan()); [EOL]     TestUtils.assertSame(Complex.NaN, infInf.tan()); [EOL]     TestUtils.assertSame(Complex.NaN, infNegInf.tan()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfInf.tan()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfNegInf.tan()); [EOL] } <line_num>: 1013,1023
@Test [EOL] public void testTanCritical() { [EOL]     TestUtils.assertSame(infNaN, new Complex(pi / 2, 0).tan()); [EOL]     TestUtils.assertSame(negInfNaN, new Complex(-pi / 2, 0).tan()); [EOL] } <line_num>: 1025,1029
@Test [EOL] public void testTanh() { [EOL]     Complex z = new Complex(3, 4); [EOL]     Complex expected = new Complex(1.00071, 0.00490826); [EOL]     TestUtils.assertEquals(expected, z.tanh(), 1.0e-5); [EOL]     Complex actual = new Complex(1E10, 3.0).tanh(); [EOL]     expected = new Complex(1, 0); [EOL]     TestUtils.assertEquals(expected, actual, 1.0e-5); [EOL]     actual = new Complex(-1E10, 3.0).tanh(); [EOL]     expected = new Complex(-1, 0); [EOL]     TestUtils.assertEquals(expected, actual, 1.0e-5); [EOL] } <line_num>: 1031,1043
@Test [EOL] public void testTanhNaN() { [EOL]     Assert.assertTrue(Complex.NaN.tanh().isNaN()); [EOL] } <line_num>: 1045,1048
@Test [EOL] public void testTanhInf() { [EOL]     TestUtils.assertSame(Complex.NaN, oneInf.tanh()); [EOL]     TestUtils.assertSame(Complex.NaN, oneNegInf.tanh()); [EOL]     TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh()); [EOL]     TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh()); [EOL]     TestUtils.assertSame(Complex.NaN, infInf.tanh()); [EOL]     TestUtils.assertSame(Complex.NaN, infNegInf.tanh()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfInf.tanh()); [EOL]     TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh()); [EOL] } <line_num>: 1050,1060
@Test [EOL] public void testTanhCritical() { [EOL]     TestUtils.assertSame(nanInf, new Complex(0, pi / 2).tanh()); [EOL] } <line_num>: 1062,1065
@Test [EOL] public void testMath221() { [EOL]     Assert.assertEquals(new Complex(0, -1), new Complex(0, 1).multiply(new Complex(-1, 0))); [EOL] } <line_num>: 1068,1071
@Test [EOL] public void testNthRoot_normal_thirdRoot() { [EOL]     Complex z = new Complex(-2, 2); [EOL]     Complex[] thirdRootsOfZ = z.nthRoot(3).toArray(new Complex[0]); [EOL]     Assert.assertEquals(3, thirdRootsOfZ.length); [EOL]     Assert.assertEquals(1.0, thirdRootsOfZ[0].getReal(), 1.0e-5); [EOL]     Assert.assertEquals(1.0, thirdRootsOfZ[0].getImaginary(), 1.0e-5); [EOL]     Assert.assertEquals(-1.3660254037844386, thirdRootsOfZ[1].getReal(), 1.0e-5); [EOL]     Assert.assertEquals(0.36602540378443843, thirdRootsOfZ[1].getImaginary(), 1.0e-5); [EOL]     Assert.assertEquals(0.366025403784439, thirdRootsOfZ[2].getReal(), 1.0e-5); [EOL]     Assert.assertEquals(-1.3660254037844384, thirdRootsOfZ[2].getImaginary(), 1.0e-5); [EOL] } <line_num>: 1084,1101
@Test [EOL] public void testNthRoot_normal_fourthRoot() { [EOL]     Complex z = new Complex(5, -2); [EOL]     Complex[] fourthRootsOfZ = z.nthRoot(4).toArray(new Complex[0]); [EOL]     Assert.assertEquals(4, fourthRootsOfZ.length); [EOL]     Assert.assertEquals(1.5164629308487783, fourthRootsOfZ[0].getReal(), 1.0e-5); [EOL]     Assert.assertEquals(-0.14469266210702247, fourthRootsOfZ[0].getImaginary(), 1.0e-5); [EOL]     Assert.assertEquals(0.14469266210702256, fourthRootsOfZ[1].getReal(), 1.0e-5); [EOL]     Assert.assertEquals(1.5164629308487783, fourthRootsOfZ[1].getImaginary(), 1.0e-5); [EOL]     Assert.assertEquals(-1.5164629308487783, fourthRootsOfZ[2].getReal(), 1.0e-5); [EOL]     Assert.assertEquals(0.14469266210702267, fourthRootsOfZ[2].getImaginary(), 1.0e-5); [EOL]     Assert.assertEquals(-0.14469266210702275, fourthRootsOfZ[3].getReal(), 1.0e-5); [EOL]     Assert.assertEquals(-1.5164629308487783, fourthRootsOfZ[3].getImaginary(), 1.0e-5); [EOL] } <line_num>: 1116,1136
@Test [EOL] public void testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty() { [EOL]     Complex z = new Complex(8, 0); [EOL]     Complex[] thirdRootsOfZ = z.nthRoot(3).toArray(new Complex[0]); [EOL]     Assert.assertEquals(3, thirdRootsOfZ.length); [EOL]     Assert.assertEquals(2.0, thirdRootsOfZ[0].getReal(), 1.0e-5); [EOL]     Assert.assertEquals(0.0, thirdRootsOfZ[0].getImaginary(), 1.0e-5); [EOL]     Assert.assertEquals(-1.0, thirdRootsOfZ[1].getReal(), 1.0e-5); [EOL]     Assert.assertEquals(1.7320508075688774, thirdRootsOfZ[1].getImaginary(), 1.0e-5); [EOL]     Assert.assertEquals(-1.0, thirdRootsOfZ[2].getReal(), 1.0e-5); [EOL]     Assert.assertEquals(-1.732050807568877, thirdRootsOfZ[2].getImaginary(), 1.0e-5); [EOL] } <line_num>: 1149,1167
@Test [EOL] public void testNthRoot_cornercase_thirdRoot_realPartZero() { [EOL]     Complex z = new Complex(0, 2); [EOL]     Complex[] thirdRootsOfZ = z.nthRoot(3).toArray(new Complex[0]); [EOL]     Assert.assertEquals(3, thirdRootsOfZ.length); [EOL]     Assert.assertEquals(1.0911236359717216, thirdRootsOfZ[0].getReal(), 1.0e-5); [EOL]     Assert.assertEquals(0.6299605249474365, thirdRootsOfZ[0].getImaginary(), 1.0e-5); [EOL]     Assert.assertEquals(-1.0911236359717216, thirdRootsOfZ[1].getReal(), 1.0e-5); [EOL]     Assert.assertEquals(0.6299605249474365, thirdRootsOfZ[1].getImaginary(), 1.0e-5); [EOL]     Assert.assertEquals(-2.3144374213981936E-16, thirdRootsOfZ[2].getReal(), 1.0e-5); [EOL]     Assert.assertEquals(-1.2599210498948732, thirdRootsOfZ[2].getImaginary(), 1.0e-5); [EOL] } <line_num>: 1181,1198
@Test [EOL] public void testNthRoot_cornercase_NAN_Inf() { [EOL]     List<Complex> roots = oneNaN.nthRoot(3); [EOL]     Assert.assertEquals(1, roots.size()); [EOL]     Assert.assertEquals(Complex.NaN, roots.get(0)); [EOL]     roots = nanZero.nthRoot(3); [EOL]     Assert.assertEquals(1, roots.size()); [EOL]     Assert.assertEquals(Complex.NaN, roots.get(0)); [EOL]     roots = nanInf.nthRoot(3); [EOL]     Assert.assertEquals(1, roots.size()); [EOL]     Assert.assertEquals(Complex.NaN, roots.get(0)); [EOL]     roots = oneInf.nthRoot(3); [EOL]     Assert.assertEquals(1, roots.size()); [EOL]     Assert.assertEquals(Complex.INF, roots.get(0)); [EOL]     roots = negInfInf.nthRoot(3); [EOL]     Assert.assertEquals(1, roots.size()); [EOL]     Assert.assertEquals(Complex.INF, roots.get(0)); [EOL] } <line_num>: 1203,1228
@Test [EOL] public void testGetArgument() { [EOL]     Complex z = new Complex(1, 0); [EOL]     Assert.assertEquals(0.0, z.getArgument(), 1.0e-12); [EOL]     z = new Complex(1, 1); [EOL]     Assert.assertEquals(FastMath.PI / 4, z.getArgument(), 1.0e-12); [EOL]     z = new Complex(0, 1); [EOL]     Assert.assertEquals(FastMath.PI / 2, z.getArgument(), 1.0e-12); [EOL]     z = new Complex(-1, 1); [EOL]     Assert.assertEquals(3 * FastMath.PI / 4, z.getArgument(), 1.0e-12); [EOL]     z = new Complex(-1, 0); [EOL]     Assert.assertEquals(FastMath.PI, z.getArgument(), 1.0e-12); [EOL]     z = new Complex(-1, -1); [EOL]     Assert.assertEquals(-3 * FastMath.PI / 4, z.getArgument(), 1.0e-12); [EOL]     z = new Complex(0, -1); [EOL]     Assert.assertEquals(-FastMath.PI / 2, z.getArgument(), 1.0e-12); [EOL]     z = new Complex(1, -1); [EOL]     Assert.assertEquals(-FastMath.PI / 4, z.getArgument(), 1.0e-12); [EOL] } <line_num>: 1233,1259
@Test [EOL] public void testGetArgumentInf() { [EOL]     Assert.assertEquals(FastMath.PI / 4, infInf.getArgument(), 1.0e-12); [EOL]     Assert.assertEquals(FastMath.PI / 2, oneInf.getArgument(), 1.0e-12); [EOL]     Assert.assertEquals(0.0, infOne.getArgument(), 1.0e-12); [EOL]     Assert.assertEquals(FastMath.PI / 2, zeroInf.getArgument(), 1.0e-12); [EOL]     Assert.assertEquals(0.0, infZero.getArgument(), 1.0e-12); [EOL]     Assert.assertEquals(FastMath.PI, negInfOne.getArgument(), 1.0e-12); [EOL]     Assert.assertEquals(-3.0 * FastMath.PI / 4, negInfNegInf.getArgument(), 1.0e-12); [EOL]     Assert.assertEquals(-FastMath.PI / 2, oneNegInf.getArgument(), 1.0e-12); [EOL] } <line_num>: 1264,1274
@Test [EOL] public void testGetArgumentNaN() { [EOL]     Assert.assertTrue(Double.isNaN(nanZero.getArgument())); [EOL]     Assert.assertTrue(Double.isNaN(zeroNaN.getArgument())); [EOL]     Assert.assertTrue(Double.isNaN(Complex.NaN.getArgument())); [EOL] } <line_num>: 1279,1284
@Test [EOL] public void testSerial() { [EOL]     Complex z = new Complex(3.0, 4.0); [EOL]     Assert.assertEquals(z, TestUtils.serializeAndRecover(z)); [EOL]     Complex ncmplx = (Complex) TestUtils.serializeAndRecover(oneNaN); [EOL]     Assert.assertEquals(nanZero, ncmplx); [EOL]     Assert.assertTrue(ncmplx.isNaN()); [EOL]     Complex infcmplx = (Complex) TestUtils.serializeAndRecover(infInf); [EOL]     Assert.assertEquals(infInf, infcmplx); [EOL]     Assert.assertTrue(infcmplx.isInfinite()); [EOL]     TestComplex tz = new TestComplex(3.0, 4.0); [EOL]     Assert.assertEquals(tz, TestUtils.serializeAndRecover(tz)); [EOL]     TestComplex ntcmplx = (TestComplex) TestUtils.serializeAndRecover(new TestComplex(oneNaN)); [EOL]     Assert.assertEquals(nanZero, ntcmplx); [EOL]     Assert.assertTrue(ntcmplx.isNaN()); [EOL]     TestComplex inftcmplx = (TestComplex) TestUtils.serializeAndRecover(new TestComplex(infInf)); [EOL]     Assert.assertEquals(infInf, inftcmplx); [EOL]     Assert.assertTrue(inftcmplx.isInfinite()); [EOL] } <line_num>: 1286,1304
@Override [EOL] protected TestComplex createComplex(double real, double imaginary) { [EOL]     return new TestComplex(real, imaginary); [EOL] } <line_num>: 1324,1327
