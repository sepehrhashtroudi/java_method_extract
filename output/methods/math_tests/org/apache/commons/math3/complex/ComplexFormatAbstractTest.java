protected ComplexFormatAbstractTest() { [EOL]     complexFormat = ComplexFormat.getInstance(getLocale()); [EOL]     complexFormatJ = ComplexFormat.getInstance("j", getLocale()); [EOL] } <line_num>: 38,41
protected abstract Locale getLocale(); <line_num>: 34,34
protected abstract char getDecimalCharacter(); <line_num>: 36,36
@Test [EOL] public void testSimpleNoDecimals() { [EOL]     Complex c = new Complex(1, 2); [EOL]     String expected = "1 + 2i"; [EOL]     String actual = complexFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 43,49
@Test [EOL] public void testTrimOneImaginary() { [EOL]     final ComplexFormat fmt = ComplexFormat.getInstance(getLocale()); [EOL]     fmt.getImaginaryFormat().setMaximumFractionDigits(1); [EOL]     Complex c = new Complex(1, 1.04); [EOL]     String expected = "1 + i"; [EOL]     String actual = fmt.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL]     c = new Complex(1, 1.09); [EOL]     expected = "1 + 1" + getDecimalCharacter() + "1i"; [EOL]     actual = fmt.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL]     c = new Complex(1, -1.09); [EOL]     expected = "1 - 1" + getDecimalCharacter() + "1i"; [EOL]     actual = fmt.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL]     c = new Complex(1, -1.04); [EOL]     expected = "1 - i"; [EOL]     actual = fmt.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 51,75
@Test [EOL] public void testSimpleWithDecimals() { [EOL]     Complex c = new Complex(1.23, 1.43); [EOL]     String expected = "1" + getDecimalCharacter() + "23 + 1" + getDecimalCharacter() + "43i"; [EOL]     String actual = complexFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 77,83
@Test [EOL] public void testSimpleWithDecimalsTrunc() { [EOL]     Complex c = new Complex(1.232323232323, 1.434343434343); [EOL]     String expected = "1" + getDecimalCharacter() + "2323232323 + 1" + getDecimalCharacter() + "4343434343i"; [EOL]     String actual = complexFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 85,91
@Test [EOL] public void testNegativeReal() { [EOL]     Complex c = new Complex(-1.232323232323, 1.43); [EOL]     String expected = "-1" + getDecimalCharacter() + "2323232323 + 1" + getDecimalCharacter() + "43i"; [EOL]     String actual = complexFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 93,99
@Test [EOL] public void testNegativeImaginary() { [EOL]     Complex c = new Complex(1.23, -1.434343434343); [EOL]     String expected = "1" + getDecimalCharacter() + "23 - 1" + getDecimalCharacter() + "4343434343i"; [EOL]     String actual = complexFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 101,107
@Test [EOL] public void testNegativeBoth() { [EOL]     Complex c = new Complex(-1.232323232323, -1.434343434343); [EOL]     String expected = "-1" + getDecimalCharacter() + "2323232323 - 1" + getDecimalCharacter() + "4343434343i"; [EOL]     String actual = complexFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 109,115
@Test [EOL] public void testZeroReal() { [EOL]     Complex c = new Complex(0.0, -1.434343434343); [EOL]     String expected = "0 - 1" + getDecimalCharacter() + "4343434343i"; [EOL]     String actual = complexFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 117,123
@Test [EOL] public void testZeroImaginary() { [EOL]     Complex c = new Complex(30.23333333333, 0); [EOL]     String expected = "30" + getDecimalCharacter() + "2333333333"; [EOL]     String actual = complexFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 125,131
@Test [EOL] public void testDifferentImaginaryChar() { [EOL]     Complex c = new Complex(1, 1); [EOL]     String expected = "1 + j"; [EOL]     String actual = complexFormatJ.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 133,139
@Test [EOL] public void testDefaultFormatComplex() { [EOL]     Locale defaultLocal = Locale.getDefault(); [EOL]     Locale.setDefault(getLocale()); [EOL]     Complex c = new Complex(232.22222222222, -342.3333333333); [EOL]     String expected = "232" + getDecimalCharacter() + "2222222222 - 342" + getDecimalCharacter() + "3333333333i"; [EOL]     String actual = (new ComplexFormat()).format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL]     Locale.setDefault(defaultLocal); [EOL] } <line_num>: 141,152
@Test [EOL] public void testNan() { [EOL]     Complex c = new Complex(Double.NaN, Double.NaN); [EOL]     String expected = "(NaN) + (NaN)i"; [EOL]     String actual = complexFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 154,160
@Test [EOL] public void testPositiveInfinity() { [EOL]     Complex c = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY); [EOL]     String expected = "(Infinity) + (Infinity)i"; [EOL]     String actual = complexFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 162,168
@Test [EOL] public void testNegativeInfinity() { [EOL]     Complex c = new Complex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY); [EOL]     String expected = "(-Infinity) - (Infinity)i"; [EOL]     String actual = complexFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 170,176
@Test [EOL] public void testParseSimpleNoDecimals() { [EOL]     String source = "1 + 1i"; [EOL]     Complex expected = new Complex(1, 1); [EOL]     Complex actual = complexFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 178,184
@Test [EOL] public void testParseSimpleWithDecimals() { [EOL]     String source = "1" + getDecimalCharacter() + "23 + 1" + getDecimalCharacter() + "43i"; [EOL]     Complex expected = new Complex(1.23, 1.43); [EOL]     Complex actual = complexFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 186,192
@Test [EOL] public void testParseSimpleWithDecimalsTrunc() { [EOL]     String source = "1" + getDecimalCharacter() + "232323232323 + 1" + getDecimalCharacter() + "434343434343i"; [EOL]     Complex expected = new Complex(1.232323232323, 1.434343434343); [EOL]     Complex actual = complexFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 194,200
@Test [EOL] public void testParseNegativeReal() { [EOL]     String source = "-1" + getDecimalCharacter() + "232323232323 + 1" + getDecimalCharacter() + "4343i"; [EOL]     Complex expected = new Complex(-1.232323232323, 1.4343); [EOL]     Complex actual = complexFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 202,208
@Test [EOL] public void testParseNegativeImaginary() { [EOL]     String source = "1" + getDecimalCharacter() + "2323 - 1" + getDecimalCharacter() + "434343434343i"; [EOL]     Complex expected = new Complex(1.2323, -1.434343434343); [EOL]     Complex actual = complexFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 210,216
@Test [EOL] public void testParseNegativeBoth() { [EOL]     String source = "-1" + getDecimalCharacter() + "232323232323 - 1" + getDecimalCharacter() + "434343434343i"; [EOL]     Complex expected = new Complex(-1.232323232323, -1.434343434343); [EOL]     Complex actual = complexFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 218,224
@Test [EOL] public void testParseZeroReal() { [EOL]     String source = "0" + getDecimalCharacter() + "0 - 1" + getDecimalCharacter() + "4343i"; [EOL]     Complex expected = new Complex(0.0, -1.4343); [EOL]     Complex actual = complexFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 226,232
@Test [EOL] public void testParseZeroImaginary() { [EOL]     String source = "-1" + getDecimalCharacter() + "2323"; [EOL]     Complex expected = new Complex(-1.2323, 0); [EOL]     Complex actual = complexFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 234,240
@Test [EOL] public void testParseDifferentImaginaryChar() { [EOL]     String source = "-1" + getDecimalCharacter() + "2323 - 1" + getDecimalCharacter() + "4343j"; [EOL]     Complex expected = new Complex(-1.2323, -1.4343); [EOL]     Complex actual = complexFormatJ.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 242,248
@Test [EOL] public void testParseNan() { [EOL]     String source = "(NaN) + (NaN)i"; [EOL]     Complex expected = new Complex(Double.NaN, Double.NaN); [EOL]     Complex actual = complexFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 250,256
@Test [EOL] public void testParsePositiveInfinity() { [EOL]     String source = "(Infinity) + (Infinity)i"; [EOL]     Complex expected = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY); [EOL]     Complex actual = complexFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 258,264
@Test [EOL] public void testPaseNegativeInfinity() { [EOL]     String source = "(-Infinity) - (Infinity)i"; [EOL]     Complex expected = new Complex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY); [EOL]     Complex actual = complexFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 266,272
@Test [EOL] public void testConstructorSingleFormat() { [EOL]     NumberFormat nf = NumberFormat.getInstance(); [EOL]     ComplexFormat cf = new ComplexFormat(nf); [EOL]     Assert.assertNotNull(cf); [EOL]     Assert.assertEquals(nf, cf.getRealFormat()); [EOL] } <line_num>: 274,280
@Test [EOL] public void testGetImaginaryFormat() { [EOL]     NumberFormat nf = NumberFormat.getInstance(); [EOL]     ComplexFormat cf = new ComplexFormat(nf); [EOL]     Assert.assertSame(nf, cf.getImaginaryFormat()); [EOL] } <line_num>: 282,287
@Test [EOL] public void testGetRealFormat() { [EOL]     NumberFormat nf = NumberFormat.getInstance(); [EOL]     ComplexFormat cf = new ComplexFormat(nf); [EOL]     Assert.assertSame(nf, cf.getRealFormat()); [EOL] } <line_num>: 289,294
@Test [EOL] public void testFormatNumber() { [EOL]     ComplexFormat cf = ComplexFormat.getInstance(getLocale()); [EOL]     Double pi = Double.valueOf(FastMath.PI); [EOL]     String text = cf.format(pi); [EOL]     Assert.assertEquals("3" + getDecimalCharacter() + "1415926536", text); [EOL] } <line_num>: 296,302
@Test [EOL] public void testForgottenImaginaryCharacter() { [EOL]     ParsePosition pos = new ParsePosition(0); [EOL]     Assert.assertNull(new ComplexFormat().parse("1 + 1", pos)); [EOL]     Assert.assertEquals(5, pos.getErrorIndex()); [EOL] } <line_num>: 304,309
