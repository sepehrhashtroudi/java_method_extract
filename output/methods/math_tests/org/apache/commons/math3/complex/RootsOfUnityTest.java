@Test(expected = MathIllegalStateException.class) [EOL] public void testMathIllegalState1() { [EOL]     final RootsOfUnity roots = new RootsOfUnity(); [EOL]     roots.getReal(0); [EOL] } <line_num>: 33,37
@Test(expected = MathIllegalStateException.class) [EOL] public void testMathIllegalState2() { [EOL]     final RootsOfUnity roots = new RootsOfUnity(); [EOL]     roots.getImaginary(0); [EOL] } <line_num>: 39,43
@Test(expected = MathIllegalStateException.class) [EOL] public void testMathIllegalState3() { [EOL]     final RootsOfUnity roots = new RootsOfUnity(); [EOL]     roots.isCounterClockWise(); [EOL] } <line_num>: 45,49
@Test(expected = ZeroException.class) [EOL] public void testZeroNumberOfRoots() { [EOL]     final RootsOfUnity roots = new RootsOfUnity(); [EOL]     roots.computeRoots(0); [EOL] } <line_num>: 51,55
@Test [EOL] public void testGetNumberOfRoots() { [EOL]     final RootsOfUnity roots = new RootsOfUnity(); [EOL]     Assert.assertEquals("", 0, roots.getNumberOfRoots()); [EOL]     roots.computeRoots(5); [EOL]     Assert.assertEquals("", 5, roots.getNumberOfRoots()); [EOL]     roots.computeRoots(-5); [EOL]     Assert.assertEquals("", 5, roots.getNumberOfRoots()); [EOL]     roots.computeRoots(6); [EOL]     Assert.assertEquals("", 6, roots.getNumberOfRoots()); [EOL] } <line_num>: 57,71
@Test [EOL] public void testComputeRoots() { [EOL]     final RootsOfUnity roots = new RootsOfUnity(); [EOL]     for (int n = -10; n < 11; n++) { [EOL]         if (n != 0) { [EOL]             roots.computeRoots(n); [EOL]             doTestComputeRoots(roots); [EOL]             roots.computeRoots(-n); [EOL]             doTestComputeRoots(roots); [EOL]         } [EOL]     } [EOL] } <line_num>: 73,88
private void doTestComputeRoots(final RootsOfUnity roots) { [EOL]     final int n = roots.isCounterClockWise() ? roots.getNumberOfRoots() : -roots.getNumberOfRoots(); [EOL]     final double tol = 10 * Math.ulp(1.0); [EOL]     for (int k = 0; k < n; k++) { [EOL]         final double t = 2.0 * FastMath.PI * k / n; [EOL]         @SuppressWarnings("boxing") [EOL]         final String msg = String.format("n = %d, k = %d", n, k); [EOL]         Assert.assertEquals(msg, FastMath.cos(t), roots.getReal(k), tol); [EOL]         Assert.assertEquals(msg, FastMath.sin(t), roots.getImaginary(k), tol); [EOL]     } [EOL] } <line_num>: 90,101
