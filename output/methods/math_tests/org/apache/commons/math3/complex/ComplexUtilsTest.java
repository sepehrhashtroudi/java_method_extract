@Test [EOL] public void testPolar2Complex() { [EOL]     TestUtils.assertEquals(Complex.ONE, ComplexUtils.polar2Complex(1, 0), 10e-12); [EOL]     TestUtils.assertEquals(Complex.ZERO, ComplexUtils.polar2Complex(0, 1), 10e-12); [EOL]     TestUtils.assertEquals(Complex.ZERO, ComplexUtils.polar2Complex(0, -1), 10e-12); [EOL]     TestUtils.assertEquals(Complex.I, ComplexUtils.polar2Complex(1, pi / 2), 10e-12); [EOL]     TestUtils.assertEquals(Complex.I.negate(), ComplexUtils.polar2Complex(1, -pi / 2), 10e-12); [EOL]     double r = 0; [EOL]     for (int i = 0; i < 5; i++) { [EOL]         r += i; [EOL]         double theta = 0; [EOL]         for (int j = 0; j < 20; j++) { [EOL]             theta += pi / 6; [EOL]             TestUtils.assertEquals(altPolar(r, theta), ComplexUtils.polar2Complex(r, theta), 10e-12); [EOL]         } [EOL]         theta = -2 * pi; [EOL]         for (int j = 0; j < 20; j++) { [EOL]             theta -= pi / 6; [EOL]             TestUtils.assertEquals(altPolar(r, theta), ComplexUtils.polar2Complex(r, theta), 10e-12); [EOL]         } [EOL]     } [EOL] } <line_num>: 41,69
protected Complex altPolar(double r, double theta) { [EOL]     return Complex.I.multiply(new Complex(theta, 0)).exp().multiply(new Complex(r, 0)); [EOL] } <line_num>: 71,73
@Test(expected = IllegalArgumentException.class) [EOL] public void testPolar2ComplexIllegalModulus() { [EOL]     ComplexUtils.polar2Complex(-1, 0); [EOL] } <line_num>: 75,78
@Test [EOL] public void testPolar2ComplexNaN() { [EOL]     TestUtils.assertSame(Complex.NaN, ComplexUtils.polar2Complex(nan, 1)); [EOL]     TestUtils.assertSame(Complex.NaN, ComplexUtils.polar2Complex(1, nan)); [EOL]     TestUtils.assertSame(Complex.NaN, ComplexUtils.polar2Complex(nan, nan)); [EOL] } <line_num>: 80,86
@Test [EOL] public void testPolar2ComplexInf() { [EOL]     TestUtils.assertSame(Complex.NaN, ComplexUtils.polar2Complex(1, inf)); [EOL]     TestUtils.assertSame(Complex.NaN, ComplexUtils.polar2Complex(1, negInf)); [EOL]     TestUtils.assertSame(Complex.NaN, ComplexUtils.polar2Complex(inf, inf)); [EOL]     TestUtils.assertSame(Complex.NaN, ComplexUtils.polar2Complex(inf, negInf)); [EOL]     TestUtils.assertSame(infInf, ComplexUtils.polar2Complex(inf, pi / 4)); [EOL]     TestUtils.assertSame(infNaN, ComplexUtils.polar2Complex(inf, 0)); [EOL]     TestUtils.assertSame(infNegInf, ComplexUtils.polar2Complex(inf, -pi / 4)); [EOL]     TestUtils.assertSame(negInfInf, ComplexUtils.polar2Complex(inf, 3 * pi / 4)); [EOL]     TestUtils.assertSame(negInfNegInf, ComplexUtils.polar2Complex(inf, 5 * pi / 4)); [EOL] } <line_num>: 88,101
@Test [EOL] public void testConvertToComplex() { [EOL]     final double[] real = new double[] { negInf, -123.45, 0, 1, 234.56, pi, inf }; [EOL]     final Complex[] complex = ComplexUtils.convertToComplex(real); [EOL]     for (int i = 0; i < real.length; i++) { [EOL]         Assert.assertEquals(real[i], complex[i].getReal(), 0d); [EOL]     } [EOL] } <line_num>: 103,111
