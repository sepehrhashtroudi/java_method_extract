@Test [EOL] public void testArrayIsReference() { [EOL]     int[] array = { -3, -2, -1, 0, 1 }; [EOL]     Assert.assertTrue(array == new EuclideanIntegerPoint(array).getPoint()); [EOL] } <line_num>: 31,35
@Test [EOL] public void testDistance() { [EOL]     EuclideanIntegerPoint e1 = new EuclideanIntegerPoint(new int[] { -3, -2, -1, 0, 1 }); [EOL]     EuclideanIntegerPoint e2 = new EuclideanIntegerPoint(new int[] { 1, 0, -1, 1, 1 }); [EOL]     Assert.assertEquals(FastMath.sqrt(21.0), e1.distanceFrom(e2), 1.0e-15); [EOL]     Assert.assertEquals(0.0, e1.distanceFrom(e1), 1.0e-15); [EOL]     Assert.assertEquals(0.0, e2.distanceFrom(e2), 1.0e-15); [EOL] } <line_num>: 37,44
@Test [EOL] public void testCentroid() { [EOL]     List<EuclideanIntegerPoint> list = new ArrayList<EuclideanIntegerPoint>(); [EOL]     list.add(new EuclideanIntegerPoint(new int[] { 1, 3 })); [EOL]     list.add(new EuclideanIntegerPoint(new int[] { 2, 2 })); [EOL]     list.add(new EuclideanIntegerPoint(new int[] { 3, 3 })); [EOL]     list.add(new EuclideanIntegerPoint(new int[] { 2, 4 })); [EOL]     EuclideanIntegerPoint c = list.get(0).centroidOf(list); [EOL]     Assert.assertEquals(2, c.getPoint()[0]); [EOL]     Assert.assertEquals(3, c.getPoint()[1]); [EOL] } <line_num>: 46,56
@Test [EOL] public void testSerial() { [EOL]     EuclideanIntegerPoint p = new EuclideanIntegerPoint(new int[] { -3, -2, -1, 0, 1 }); [EOL]     Assert.assertEquals(p, TestUtils.serializeAndRecover(p)); [EOL] } <line_num>: 58,62
