@Override [EOL] public UnivariateStatistic getUnivariateStatistic() { [EOL]     return new Max(); [EOL] } <line_num>: 35,38
@Override [EOL] public double expectedValue() { [EOL]     return this.max; [EOL] } <line_num>: 43,46
@Test [EOL] public void testSpecialValues() { [EOL]     double[] testArray = { 0d, Double.NaN, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY }; [EOL]     Max max = new Max(); [EOL]     Assert.assertTrue(Double.isNaN(max.getResult())); [EOL]     max.increment(testArray[0]); [EOL]     Assert.assertEquals(0d, max.getResult(), 0); [EOL]     max.increment(testArray[1]); [EOL]     Assert.assertEquals(0d, max.getResult(), 0); [EOL]     max.increment(testArray[2]); [EOL]     Assert.assertEquals(0d, max.getResult(), 0); [EOL]     max.increment(testArray[3]); [EOL]     Assert.assertEquals(Double.POSITIVE_INFINITY, max.getResult(), 0); [EOL]     Assert.assertEquals(Double.POSITIVE_INFINITY, max.evaluate(testArray), 0); [EOL] } <line_num>: 48,63
@Test [EOL] public void testNaNs() { [EOL]     Max max = new Max(); [EOL]     double nan = Double.NaN; [EOL]     Assert.assertEquals(3d, max.evaluate(new double[] { nan, 2d, 3d }), 0); [EOL]     Assert.assertEquals(3d, max.evaluate(new double[] { 1d, nan, 3d }), 0); [EOL]     Assert.assertEquals(2d, max.evaluate(new double[] { 1d, 2d, nan }), 0); [EOL]     Assert.assertTrue(Double.isNaN(max.evaluate(new double[] { nan, nan, nan }))); [EOL] } <line_num>: 65,73
