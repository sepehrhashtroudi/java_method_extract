@Override [EOL] public abstract UnivariateStatistic getUnivariateStatistic(); <line_num>: 36,37
@Override [EOL] public abstract double expectedValue(); <line_num>: 40,41
@Test [EOL] public void testIncrementation() { [EOL]     StorelessUnivariateStatistic statistic = (StorelessUnivariateStatistic) getUnivariateStatistic(); [EOL]     for (int i = 0; i < testArray.length; i++) { [EOL]         statistic.increment(testArray[i]); [EOL]     } [EOL]     Assert.assertEquals(expectedValue(), statistic.getResult(), getTolerance()); [EOL]     Assert.assertEquals(testArray.length, statistic.getN()); [EOL]     statistic.clear(); [EOL]     statistic.incrementAll(testArray); [EOL]     Assert.assertEquals(expectedValue(), statistic.getResult(), getTolerance()); [EOL]     Assert.assertEquals(testArray.length, statistic.getN()); [EOL]     statistic.clear(); [EOL]     checkClearValue(statistic); [EOL]     Assert.assertEquals(0, statistic.getN()); [EOL] } <line_num>: 46,73
protected void checkClearValue(StorelessUnivariateStatistic statistic) { [EOL]     Assert.assertTrue(Double.isNaN(statistic.getResult())); [EOL] } <line_num>: 75,77
@Test [EOL] public void testSerialization() { [EOL]     StorelessUnivariateStatistic statistic = (StorelessUnivariateStatistic) getUnivariateStatistic(); [EOL]     TestUtils.checkSerializedEquality(statistic); [EOL]     statistic.clear(); [EOL]     for (int i = 0; i < testArray.length; i++) { [EOL]         statistic.increment(testArray[i]); [EOL]         if (i % 5 == 0) [EOL]             statistic = (StorelessUnivariateStatistic) TestUtils.serializeAndRecover(statistic); [EOL]     } [EOL]     TestUtils.checkSerializedEquality(statistic); [EOL]     Assert.assertEquals(expectedValue(), statistic.getResult(), getTolerance()); [EOL]     statistic.clear(); [EOL]     checkClearValue(statistic); [EOL] } <line_num>: 79,103
@Test [EOL] public void testEqualsAndHashCode() { [EOL]     StorelessUnivariateStatistic statistic = (StorelessUnivariateStatistic) getUnivariateStatistic(); [EOL]     StorelessUnivariateStatistic statistic2 = null; [EOL]     Assert.assertTrue("non-null, compared to null", !statistic.equals(statistic2)); [EOL]     Assert.assertTrue("reflexive, non-null", statistic.equals(statistic)); [EOL]     int emptyHash = statistic.hashCode(); [EOL]     statistic2 = (StorelessUnivariateStatistic) getUnivariateStatistic(); [EOL]     Assert.assertTrue("empty stats should be equal", statistic.equals(statistic2)); [EOL]     Assert.assertEquals("empty stats should have the same hashcode", emptyHash, statistic2.hashCode()); [EOL]     statistic.increment(1d); [EOL]     Assert.assertTrue("reflexive, non-empty", statistic.equals(statistic)); [EOL]     Assert.assertTrue("non-empty, compared to empty", !statistic.equals(statistic2)); [EOL]     Assert.assertTrue("non-empty, compared to empty", !statistic2.equals(statistic)); [EOL]     Assert.assertTrue("non-empty stat should have different hashcode from empty stat", statistic.hashCode() != emptyHash); [EOL]     statistic2.increment(1d); [EOL]     Assert.assertTrue("stats with same data should be equal", statistic.equals(statistic2)); [EOL]     Assert.assertEquals("stats with same data should have the same hashcode", statistic.hashCode(), statistic2.hashCode()); [EOL]     statistic.increment(Double.POSITIVE_INFINITY); [EOL]     Assert.assertTrue("stats with different n's should not be equal", !statistic2.equals(statistic)); [EOL]     Assert.assertTrue("stats with different n's should have different hashcodes", statistic.hashCode() != statistic2.hashCode()); [EOL]     statistic2.increment(Double.POSITIVE_INFINITY); [EOL]     Assert.assertTrue("stats with same data should be equal", statistic.equals(statistic2)); [EOL]     Assert.assertEquals("stats with same data should have the same hashcode", statistic.hashCode(), statistic2.hashCode()); [EOL]     statistic.clear(); [EOL]     statistic2.clear(); [EOL]     Assert.assertTrue("cleared stats should be equal", statistic.equals(statistic2)); [EOL]     Assert.assertEquals("cleared stats should have thashcode of empty stat", emptyHash, statistic2.hashCode()); [EOL]     Assert.assertEquals("cleared stats should have thashcode of empty stat", emptyHash, statistic.hashCode()); [EOL] } <line_num>: 105,150
@Test [EOL] public void testMomentSmallSamples() { [EOL]     UnivariateStatistic stat = getUnivariateStatistic(); [EOL]     if (stat instanceof SecondMoment) { [EOL]         SecondMoment moment = (SecondMoment) getUnivariateStatistic(); [EOL]         Assert.assertTrue(Double.isNaN(moment.getResult())); [EOL]         moment.increment(1d); [EOL]         Assert.assertEquals(0d, moment.getResult(), 0); [EOL]     } [EOL] } <line_num>: 152,161
@Test [EOL] public void testConsistency() { [EOL]     StorelessUnivariateStatistic stat = (StorelessUnivariateStatistic) getUnivariateStatistic(); [EOL]     stat.incrementAll(testArray); [EOL]     Assert.assertEquals(stat.getResult(), stat.evaluate(testArray), getTolerance()); [EOL]     for (int i = 0; i < smallSamples.length; i++) { [EOL]         stat.clear(); [EOL]         for (int j = 0; j < smallSamples[i].length; j++) { [EOL]             stat.increment(smallSamples[i][j]); [EOL]         } [EOL]         TestUtils.assertEquals(stat.getResult(), stat.evaluate(smallSamples[i]), getTolerance()); [EOL]     } [EOL] } <line_num>: 167,179
@Test [EOL] public void testCopyConsistency() { [EOL]     StorelessUnivariateStatistic master = (StorelessUnivariateStatistic) getUnivariateStatistic(); [EOL]     StorelessUnivariateStatistic replica = null; [EOL]     long index = FastMath.round((FastMath.random()) * testArray.length); [EOL]     master.incrementAll(testArray, 0, (int) index); [EOL]     replica = master.copy(); [EOL]     Assert.assertTrue(replica.equals(master)); [EOL]     Assert.assertTrue(master.equals(replica)); [EOL]     master.incrementAll(testArray, (int) index, (int) (testArray.length - index)); [EOL]     replica.incrementAll(testArray, (int) index, (int) (testArray.length - index)); [EOL]     Assert.assertTrue(replica.equals(master)); [EOL]     Assert.assertTrue(master.equals(replica)); [EOL] } <line_num>: 186,212
@Test [EOL] public void testSerial() { [EOL]     StorelessUnivariateStatistic s = (StorelessUnivariateStatistic) getUnivariateStatistic(); [EOL]     Assert.assertEquals(s, TestUtils.serializeAndRecover(s)); [EOL] } <line_num>: 214,219
