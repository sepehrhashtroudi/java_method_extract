@Test [EOL] public void testGTestGoodnesOfFit1() throws Exception { [EOL]     final double[] exp = new double[] { 3d, 1d }; [EOL]     final long[] obs = new long[] { 423, 133 }; [EOL]     Assert.assertEquals("G test statistic", 0.348721, testStatistic.g(exp, obs), 1E-6); [EOL]     final double p_gtgf = testStatistic.gTest(exp, obs); [EOL]     Assert.assertEquals("g-Test p-value", 0.55483, p_gtgf, 1E-5); [EOL]     Assert.assertFalse(testStatistic.gTest(exp, obs, 0.05)); [EOL] } <line_num>: 39,55
@Test [EOL] public void testGTestGoodnesOfFit2() throws Exception { [EOL]     final double[] exp = new double[] { 0.54d, 0.40d, 0.05d, 0.01d }; [EOL]     final long[] obs = new long[] { 70, 79, 3, 4 }; [EOL]     Assert.assertEquals("G test statistic", 13.144799, testStatistic.g(exp, obs), 1E-6); [EOL]     final double p_gtgf = testStatistic.gTest(exp, obs); [EOL]     Assert.assertEquals("g-Test p-value", 0.004333, p_gtgf, 1E-5); [EOL]     Assert.assertTrue(testStatistic.gTest(exp, obs, 0.05)); [EOL] } <line_num>: 57,72
@Test [EOL] public void testGTestGoodnesOfFit3() throws Exception { [EOL]     final double[] exp = new double[] { 0.167d, 0.483d, 0.350d }; [EOL]     final long[] obs = new long[] { 14, 21, 25 }; [EOL]     Assert.assertEquals("G test statistic", 4.5554, testStatistic.g(exp, obs), 1E-4); [EOL]     final double p_gtgf = testStatistic.gTestIntrinsic(exp, obs); [EOL]     Assert.assertEquals("g-Test p-value", 0.0328, p_gtgf, 1E-4); [EOL]     Assert.assertFalse(testStatistic.gTest(exp, obs, 0.05)); [EOL] } <line_num>: 74,91
@Test [EOL] public void testGTestIndependance1() throws Exception { [EOL]     final long[] obs1 = new long[] { 268, 199, 42 }; [EOL]     final long[] obs2 = new long[] { 807, 759, 184 }; [EOL]     final double g = testStatistic.gDataSetsComparison(obs1, obs2); [EOL]     Assert.assertEquals("G test statistic", 7.3008170, g, 1E-6); [EOL]     final double p_gti = testStatistic.gTestDataSetsComparison(obs1, obs2); [EOL]     Assert.assertEquals("g-Test p-value", 0.0259805, p_gti, 1E-6); [EOL]     Assert.assertTrue(testStatistic.gTestDataSetsComparison(obs1, obs2, 0.05)); [EOL] } <line_num>: 93,111
@Test [EOL] public void testGTestIndependance2() throws Exception { [EOL]     final long[] obs1 = new long[] { 127, 99, 264 }; [EOL]     final long[] obs2 = new long[] { 116, 67, 161 }; [EOL]     final double g = testStatistic.gDataSetsComparison(obs1, obs2); [EOL]     Assert.assertEquals("G test statistic", 6.227288, g, 1E-6); [EOL]     final double p_gti = testStatistic.gTestDataSetsComparison(obs1, obs2); [EOL]     Assert.assertEquals("g-Test p-value", 0.04443, p_gti, 1E-5); [EOL]     Assert.assertTrue(testStatistic.gTestDataSetsComparison(obs1, obs2, 0.05)); [EOL] } <line_num>: 113,131
@Test [EOL] public void testGTestIndependance3() throws Exception { [EOL]     final long[] obs1 = new long[] { 190, 149 }; [EOL]     final long[] obs2 = new long[] { 42, 49 }; [EOL]     final double g = testStatistic.gDataSetsComparison(obs1, obs2); [EOL]     Assert.assertEquals("G test statistic", 2.8187, g, 1E-4); [EOL]     final double p_gti = testStatistic.gTestDataSetsComparison(obs1, obs2); [EOL]     Assert.assertEquals("g-Test p-value", 0.09317325, p_gti, 1E-6); [EOL]     Assert.assertFalse(testStatistic.gTestDataSetsComparison(obs1, obs2, 0.05)); [EOL] } <line_num>: 133,150
@Test [EOL] public void testGTestSetsComparisonBadCounts() { [EOL]     long[] observed1 = { 10, -1, 12, 10, 15 }; [EOL]     long[] observed2 = { 15, 10, 10, 15, 5 }; [EOL]     try { [EOL]         testStatistic.gTestDataSetsComparison(observed1, observed2); [EOL]         Assert.fail("Expecting NotPositiveException - negative count"); [EOL]     } catch (NotPositiveException ex) { [EOL]     } [EOL]     long[] observed3 = { 10, 0, 12, 10, 15 }; [EOL]     long[] observed4 = { 15, 0, 10, 15, 5 }; [EOL]     try { [EOL]         testStatistic.gTestDataSetsComparison(observed3, observed4); [EOL]         Assert.fail("Expecting ZeroException - double 0's"); [EOL]     } catch (ZeroException ex) { [EOL]     } [EOL]     long[] observed5 = { 10, 10, 12, 10, 15 }; [EOL]     long[] observed6 = { 0, 0, 0, 0, 0 }; [EOL]     try { [EOL]         testStatistic.gTestDataSetsComparison(observed5, observed6); [EOL]         Assert.fail("Expecting ZeroException - vanishing counts"); [EOL]     } catch (ZeroException ex) { [EOL]     } [EOL] } <line_num>: 152,181
@Test [EOL] public void testUnmatchedArrays() { [EOL]     final long[] observed = { 0, 1, 2, 3 }; [EOL]     final double[] expected = { 1, 1, 2 }; [EOL]     final long[] observed2 = { 3, 4 }; [EOL]     try { [EOL]         testStatistic.gTest(expected, observed); [EOL]         Assert.fail("arrays have different lengths, DimensionMismatchException expected"); [EOL]     } catch (DimensionMismatchException ex) { [EOL]     } [EOL]     try { [EOL]         testStatistic.gTestDataSetsComparison(observed, observed2); [EOL]         Assert.fail("arrays have different lengths, DimensionMismatchException expected"); [EOL]     } catch (DimensionMismatchException ex) { [EOL]     } [EOL] } <line_num>: 183,200
@Test [EOL] public void testNegativeObservedCounts() { [EOL]     final long[] observed = { 0, 1, 2, -3 }; [EOL]     final double[] expected = { 1, 1, 2, 3 }; [EOL]     final long[] observed2 = { 3, 4, 5, 0 }; [EOL]     try { [EOL]         testStatistic.gTest(expected, observed); [EOL]         Assert.fail("negative observed count, NotPositiveException expected"); [EOL]     } catch (NotPositiveException ex) { [EOL]     } [EOL]     try { [EOL]         testStatistic.gTestDataSetsComparison(observed, observed2); [EOL]         Assert.fail("negative observed count, NotPositiveException expected"); [EOL]     } catch (NotPositiveException ex) { [EOL]     } [EOL] } <line_num>: 202,219
@Test [EOL] public void testZeroExpectedCounts() { [EOL]     final long[] observed = { 0, 1, 2, -3 }; [EOL]     final double[] expected = { 1, 0, 2, 3 }; [EOL]     try { [EOL]         testStatistic.gTest(expected, observed); [EOL]         Assert.fail("zero expected count, NotStrictlyPositiveException expected"); [EOL]     } catch (NotStrictlyPositiveException ex) { [EOL]     } [EOL] } <line_num>: 221,231
@Test [EOL] public void testBadAlpha() { [EOL]     final long[] observed = { 0, 1, 2, 3 }; [EOL]     final double[] expected = { 1, 2, 2, 3 }; [EOL]     final long[] observed2 = { 0, 2, 2, 3 }; [EOL]     try { [EOL]         testStatistic.gTest(expected, observed, 0.8); [EOL]         Assert.fail("zero expected count, NotStrictlyPositiveException expected"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         testStatistic.gTestDataSetsComparison(observed, observed2, -0.5); [EOL]         Assert.fail("zero expected count, NotStrictlyPositiveException expected"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 233,250
@Test [EOL] public void testScaling() { [EOL]     final long[] observed = { 9, 11, 10, 8, 12 }; [EOL]     final double[] expected1 = { 10, 10, 10, 10, 10 }; [EOL]     final double[] expected2 = { 1000, 1000, 1000, 1000, 1000 }; [EOL]     final double[] expected3 = { 1, 1, 1, 1, 1 }; [EOL]     final double tol = 1E-15; [EOL]     Assert.assertEquals(testStatistic.gTest(expected1, observed), testStatistic.gTest(expected2, observed), tol); [EOL]     Assert.assertEquals(testStatistic.gTest(expected1, observed), testStatistic.gTest(expected3, observed), tol); [EOL] } <line_num>: 252,267
@Test [EOL] public void testRootLogLikelihood() { [EOL]     Assert.assertTrue(testStatistic.rootLogLikelihoodRatio(904, 21060, 1144, 283012) > 0.0); [EOL]     Assert.assertTrue(testStatistic.rootLogLikelihoodRatio(36, 21928, 60280, 623876) < 0.0); [EOL]     Assert.assertEquals(Math.sqrt(2.772589), testStatistic.rootLogLikelihoodRatio(1, 0, 0, 1), 0.000001); [EOL]     Assert.assertEquals(-Math.sqrt(2.772589), testStatistic.rootLogLikelihoodRatio(0, 1, 1, 0), 0.000001); [EOL]     Assert.assertEquals(Math.sqrt(27.72589), testStatistic.rootLogLikelihoodRatio(10, 0, 0, 10), 0.00001); [EOL]     Assert.assertEquals(Math.sqrt(39.33052), testStatistic.rootLogLikelihoodRatio(5, 1995, 0, 100000), 0.00001); [EOL]     Assert.assertEquals(-Math.sqrt(39.33052), testStatistic.rootLogLikelihoodRatio(0, 100000, 5, 1995), 0.00001); [EOL]     Assert.assertEquals(Math.sqrt(4730.737), testStatistic.rootLogLikelihoodRatio(1000, 1995, 1000, 100000), 0.001); [EOL]     Assert.assertEquals(-Math.sqrt(4730.737), testStatistic.rootLogLikelihoodRatio(1000, 100000, 1000, 1995), 0.001); [EOL]     Assert.assertEquals(Math.sqrt(5734.343), testStatistic.rootLogLikelihoodRatio(1000, 1000, 1000, 100000), 0.001); [EOL]     Assert.assertEquals(Math.sqrt(5714.932), testStatistic.rootLogLikelihoodRatio(1000, 1000, 1000, 99000), 0.001); [EOL] } <line_num>: 269,289
