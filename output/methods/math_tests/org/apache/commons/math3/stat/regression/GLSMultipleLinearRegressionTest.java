@Before [EOL] @Override [EOL] public void setUp() { [EOL]     y = new double[] { 11.0, 12.0, 13.0, 14.0, 15.0, 16.0 }; [EOL]     x = new double[6][]; [EOL]     x[0] = new double[] { 0, 0, 0, 0, 0 }; [EOL]     x[1] = new double[] { 2.0, 0, 0, 0, 0 }; [EOL]     x[2] = new double[] { 0, 3.0, 0, 0, 0 }; [EOL]     x[3] = new double[] { 0, 0, 4.0, 0, 0 }; [EOL]     x[4] = new double[] { 0, 0, 0, 5.0, 0 }; [EOL]     x[5] = new double[] { 0, 0, 0, 0, 6.0 }; [EOL]     omega = new double[6][]; [EOL]     omega[0] = new double[] { 1.0, 0, 0, 0, 0, 0 }; [EOL]     omega[1] = new double[] { 0, 2.0, 0, 0, 0, 0 }; [EOL]     omega[2] = new double[] { 0, 0, 3.0, 0, 0, 0 }; [EOL]     omega[3] = new double[] { 0, 0, 0, 4.0, 0, 0 }; [EOL]     omega[4] = new double[] { 0, 0, 0, 0, 5.0, 0 }; [EOL]     omega[5] = new double[] { 0, 0, 0, 0, 0, 6.0 }; [EOL]     super.setUp(); [EOL] } <line_num>: 57,76
@Test(expected = IllegalArgumentException.class) [EOL] public void cannotAddXSampleData() { [EOL]     createRegression().newSampleData(new double[] {}, null, null); [EOL] } <line_num>: 78,81
@Test(expected = IllegalArgumentException.class) [EOL] public void cannotAddNullYSampleData() { [EOL]     createRegression().newSampleData(null, new double[][] {}, null); [EOL] } <line_num>: 83,86
@Test(expected = IllegalArgumentException.class) [EOL] public void cannotAddSampleDataWithSizeMismatch() { [EOL]     double[] y = new double[] { 1.0, 2.0 }; [EOL]     double[][] x = new double[1][]; [EOL]     x[0] = new double[] { 1.0, 0 }; [EOL]     createRegression().newSampleData(y, x, null); [EOL] } <line_num>: 88,94
@Test(expected = IllegalArgumentException.class) [EOL] public void cannotAddNullCovarianceData() { [EOL]     createRegression().newSampleData(new double[] {}, new double[][] {}, null); [EOL] } <line_num>: 96,99
@Test(expected = IllegalArgumentException.class) [EOL] public void notEnoughData() { [EOL]     double[] reducedY = new double[y.length - 1]; [EOL]     double[][] reducedX = new double[x.length - 1][]; [EOL]     double[][] reducedO = new double[omega.length - 1][]; [EOL]     System.arraycopy(y, 0, reducedY, 0, reducedY.length); [EOL]     System.arraycopy(x, 0, reducedX, 0, reducedX.length); [EOL]     System.arraycopy(omega, 0, reducedO, 0, reducedO.length); [EOL]     createRegression().newSampleData(reducedY, reducedX, reducedO); [EOL] } <line_num>: 101,110
@Test(expected = IllegalArgumentException.class) [EOL] public void cannotAddCovarianceDataWithSampleSizeMismatch() { [EOL]     double[] y = new double[] { 1.0, 2.0 }; [EOL]     double[][] x = new double[2][]; [EOL]     x[0] = new double[] { 1.0, 0 }; [EOL]     x[1] = new double[] { 0, 1.0 }; [EOL]     double[][] omega = new double[1][]; [EOL]     omega[0] = new double[] { 1.0, 0 }; [EOL]     createRegression().newSampleData(y, x, omega); [EOL] } <line_num>: 112,121
@Test(expected = IllegalArgumentException.class) [EOL] public void cannotAddCovarianceDataThatIsNotSquare() { [EOL]     double[] y = new double[] { 1.0, 2.0 }; [EOL]     double[][] x = new double[2][]; [EOL]     x[0] = new double[] { 1.0, 0 }; [EOL]     x[1] = new double[] { 0, 1.0 }; [EOL]     double[][] omega = new double[3][]; [EOL]     omega[0] = new double[] { 1.0, 0 }; [EOL]     omega[1] = new double[] { 0, 1.0 }; [EOL]     omega[2] = new double[] { 0, 2.0 }; [EOL]     createRegression().newSampleData(y, x, omega); [EOL] } <line_num>: 123,134
@Override [EOL] protected GLSMultipleLinearRegression createRegression() { [EOL]     GLSMultipleLinearRegression regression = new GLSMultipleLinearRegression(); [EOL]     regression.newSampleData(y, x, omega); [EOL]     return regression; [EOL] } <line_num>: 136,141
@Override [EOL] protected int getNumberOfRegressors() { [EOL]     return x[0].length + 1; [EOL] } <line_num>: 143,146
@Override [EOL] protected int getSampleSize() { [EOL]     return y.length; [EOL] } <line_num>: 148,151
@Test [EOL] public void testYVariance() { [EOL]     GLSMultipleLinearRegression model = new GLSMultipleLinearRegression(); [EOL]     model.newSampleData(y, x, omega); [EOL]     TestUtils.assertEquals(model.calculateYVariance(), 3.5, 0); [EOL] } <line_num>: 156,164
@Test [EOL] public void testNewSample2() { [EOL]     double[] y = new double[] { 1, 2, 3, 4 }; [EOL]     double[][] x = new double[][] { { 19, 22, 33 }, { 20, 30, 40 }, { 25, 35, 45 }, { 27, 37, 47 } }; [EOL]     double[][] covariance = MatrixUtils.createRealIdentityMatrix(4).scalarMultiply(2).getData(); [EOL]     GLSMultipleLinearRegression regression = new GLSMultipleLinearRegression(); [EOL]     regression.newSampleData(y, x, covariance); [EOL]     RealMatrix combinedX = regression.getX().copy(); [EOL]     RealVector combinedY = regression.getY().copy(); [EOL]     RealMatrix combinedCovInv = regression.getOmegaInverse(); [EOL]     regression.newXSampleData(x); [EOL]     regression.newYSampleData(y); [EOL]     Assert.assertEquals(combinedX, regression.getX()); [EOL]     Assert.assertEquals(combinedY, regression.getY()); [EOL]     Assert.assertEquals(combinedCovInv, regression.getOmegaInverse()); [EOL] } <line_num>: 169,189
@Test [EOL] public void testGLSOLSConsistency() { [EOL]     RealMatrix identityCov = MatrixUtils.createRealIdentityMatrix(16); [EOL]     GLSMultipleLinearRegression glsModel = new GLSMultipleLinearRegression(); [EOL]     OLSMultipleLinearRegression olsModel = new OLSMultipleLinearRegression(); [EOL]     glsModel.newSampleData(longley, 16, 6); [EOL]     olsModel.newSampleData(longley, 16, 6); [EOL]     glsModel.newCovarianceData(identityCov.getData()); [EOL]     double[] olsBeta = olsModel.calculateBeta().toArray(); [EOL]     double[] glsBeta = glsModel.calculateBeta().toArray(); [EOL]     for (int i = 0; i < olsBeta.length; i++) { [EOL]         TestUtils.assertRelativelyEquals(olsBeta[i], glsBeta[i], 10E-7); [EOL]     } [EOL] } <line_num>: 195,210
@Test [EOL] public void testGLSEfficiency() { [EOL]     RandomGenerator rg = new JDKRandomGenerator(); [EOL]     rg.setSeed(200); [EOL]     final int nObs = 16; [EOL]     double[] sigma = new double[nObs]; [EOL]     for (int i = 0; i < nObs; i++) { [EOL]         sigma[i] = 10 * rg.nextDouble(); [EOL]     } [EOL]     final int numSeeds = 1000; [EOL]     RealMatrix errorSeeds = MatrixUtils.createRealMatrix(numSeeds, nObs); [EOL]     for (int i = 0; i < numSeeds; i++) { [EOL]         for (int j = 0; j < nObs; j++) { [EOL]             errorSeeds.setEntry(i, j, rg.nextGaussian() * sigma[j]); [EOL]         } [EOL]     } [EOL]     RealMatrix cov = (new Covariance(errorSeeds)).getCovarianceMatrix(); [EOL]     GaussianRandomGenerator rawGenerator = new GaussianRandomGenerator(rg); [EOL]     double[] errorMeans = new double[nObs]; [EOL]     CorrelatedRandomVectorGenerator gen = new CorrelatedRandomVectorGenerator(errorMeans, cov, 1.0e-12 * cov.getNorm(), rawGenerator); [EOL]     OLSMultipleLinearRegression ols = new OLSMultipleLinearRegression(); [EOL]     ols.newSampleData(longley, nObs, 6); [EOL]     final RealVector b = ols.calculateBeta().copy(); [EOL]     final RealMatrix x = ols.getX().copy(); [EOL]     GLSMultipleLinearRegression gls = new GLSMultipleLinearRegression(); [EOL]     gls.newSampleData(longley, nObs, 6); [EOL]     gls.newCovarianceData(cov.getData()); [EOL]     DescriptiveStatistics olsBetaStats = new DescriptiveStatistics(); [EOL]     DescriptiveStatistics glsBetaStats = new DescriptiveStatistics(); [EOL]     final int nModels = 10000; [EOL]     for (int i = 0; i < nModels; i++) { [EOL]         RealVector u = MatrixUtils.createRealVector(gen.nextVector()); [EOL]         double[] y = u.add(x.operate(b)).toArray(); [EOL]         ols.newYSampleData(y); [EOL]         RealVector olsBeta = ols.calculateBeta(); [EOL]         gls.newYSampleData(y); [EOL]         RealVector glsBeta = gls.calculateBeta(); [EOL]         double dist = olsBeta.getDistance(b); [EOL]         olsBetaStats.addValue(dist * dist); [EOL]         dist = glsBeta.getDistance(b); [EOL]         glsBetaStats.addValue(dist * dist); [EOL]     } [EOL]     assert (olsBetaStats.getMean() > 1.5 * glsBetaStats.getMean()); [EOL]     assert (olsBetaStats.getStandardDeviation() > glsBetaStats.getStandardDeviation()); [EOL] } <line_num>: 217,295
