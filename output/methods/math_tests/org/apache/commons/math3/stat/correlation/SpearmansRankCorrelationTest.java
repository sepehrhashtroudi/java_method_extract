@Override [EOL] @Test [EOL] public void testLongly() { [EOL]     RealMatrix matrix = createRealMatrix(longleyData, 16, 7); [EOL]     SpearmansCorrelation corrInstance = new SpearmansCorrelation(matrix); [EOL]     RealMatrix correlationMatrix = corrInstance.getCorrelationMatrix(); [EOL]     double[] rData = new double[] { 1, 0.982352941176471, 0.985294117647059, 0.564705882352941, 0.2264705882352941, 0.976470588235294, 0.976470588235294, 0.982352941176471, 1, 0.997058823529412, 0.664705882352941, 0.2205882352941176, 0.997058823529412, 0.997058823529412, 0.985294117647059, 0.997058823529412, 1, 0.638235294117647, 0.2235294117647059, 0.9941176470588236, 0.9941176470588236, 0.564705882352941, 0.664705882352941, 0.638235294117647, 1, -0.3411764705882353, 0.685294117647059, 0.685294117647059, 0.2264705882352941, 0.2205882352941176, 0.2235294117647059, -0.3411764705882353, 1, 0.2264705882352941, 0.2264705882352941, 0.976470588235294, 0.997058823529412, 0.9941176470588236, 0.685294117647059, 0.2264705882352941, 1, 1, 0.976470588235294, 0.997058823529412, 0.9941176470588236, 0.685294117647059, 0.2264705882352941, 1, 1 }; [EOL]     TestUtils.assertEquals("Spearman's correlation matrix", createRealMatrix(rData, 7, 7), correlationMatrix, 10E-15); [EOL] } <line_num>: 39,56
@Test [EOL] public void testSwiss() { [EOL]     RealMatrix matrix = createRealMatrix(swissData, 47, 5); [EOL]     SpearmansCorrelation corrInstance = new SpearmansCorrelation(matrix); [EOL]     RealMatrix correlationMatrix = corrInstance.getCorrelationMatrix(); [EOL]     double[] rData = new double[] { 1, 0.2426642769364176, -0.660902996352354, -0.443257690360988, 0.4136455623012432, 0.2426642769364176, 1, -0.598859938748963, -0.650463814145816, 0.2886878090882852, -0.660902996352354, -0.598859938748963, 1, 0.674603831406147, -0.4750575257171745, -0.443257690360988, -0.650463814145816, 0.674603831406147, 1, -0.1444163088302244, 0.4136455623012432, 0.2886878090882852, -0.4750575257171745, -0.1444163088302244, 1 }; [EOL]     TestUtils.assertEquals("Spearman's correlation matrix", createRealMatrix(rData, 5, 5), correlationMatrix, 10E-15); [EOL] } <line_num>: 61,74
@Override [EOL] @Test [EOL] public void testConstant() { [EOL]     double[] noVariance = new double[] { 1, 1, 1, 1 }; [EOL]     double[] values = new double[] { 1, 2, 3, 4 }; [EOL]     Assert.assertTrue(Double.isNaN(new SpearmansCorrelation().correlation(noVariance, values))); [EOL] } <line_num>: 79,85
@Override [EOL] @Test [EOL] public void testInsufficientData() { [EOL]     double[] one = new double[] { 1 }; [EOL]     double[] two = new double[] { 2 }; [EOL]     try { [EOL]         new SpearmansCorrelation().correlation(one, two); [EOL]         Assert.fail("Expecting IllegalArgumentException"); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     RealMatrix matrix = new BlockRealMatrix(new double[][] { { 0 }, { 1 } }); [EOL]     try { [EOL]         new SpearmansCorrelation(matrix); [EOL]         Assert.fail("Expecting IllegalArgumentException"); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 90,108
@Override [EOL] @Test [EOL] public void testConsistency() { [EOL]     RealMatrix matrix = createRealMatrix(longleyData, 16, 7); [EOL]     SpearmansCorrelation corrInstance = new SpearmansCorrelation(matrix); [EOL]     double[][] data = matrix.getData(); [EOL]     double[] x = matrix.getColumn(0); [EOL]     double[] y = matrix.getColumn(1); [EOL]     Assert.assertEquals(new SpearmansCorrelation().correlation(x, y), corrInstance.getCorrelationMatrix().getEntry(0, 1), Double.MIN_VALUE); [EOL]     TestUtils.assertEquals("Correlation matrix", corrInstance.getCorrelationMatrix(), new SpearmansCorrelation().computeCorrelationMatrix(data), Double.MIN_VALUE); [EOL] } <line_num>: 110,122
@Test [EOL] public void testMath891Array() { [EOL]     final double[] xArray = new double[] { Double.NaN, 1.9, 2, 100, 3 }; [EOL]     final double[] yArray = new double[] { 10, 2, 10, Double.NaN, 4 }; [EOL]     NaturalRanking ranking = new NaturalRanking(NaNStrategy.REMOVED); [EOL]     SpearmansCorrelation spearman = new SpearmansCorrelation(ranking); [EOL]     Assert.assertEquals(0.5, spearman.correlation(xArray, yArray), Double.MIN_VALUE); [EOL] } <line_num>: 124,133
@Test [EOL] public void testMath891Matrix() { [EOL]     final double[] xArray = new double[] { Double.NaN, 1.9, 2, 100, 3 }; [EOL]     final double[] yArray = new double[] { 10, 2, 10, Double.NaN, 4 }; [EOL]     RealMatrix matrix = MatrixUtils.createRealMatrix(xArray.length, 2); [EOL]     for (int i = 0; i < xArray.length; i++) { [EOL]         matrix.addToEntry(i, 0, xArray[i]); [EOL]         matrix.addToEntry(i, 1, yArray[i]); [EOL]     } [EOL]     NaturalRanking ranking = new NaturalRanking(NaNStrategy.REMOVED); [EOL]     SpearmansCorrelation spearman = new SpearmansCorrelation(matrix, ranking); [EOL]     Assert.assertEquals(0.5, spearman.getCorrelationMatrix().getEntry(0, 1), Double.MIN_VALUE); [EOL] } <line_num>: 135,151
@Override [EOL] @Test [EOL] public void testStdErrorConsistency() { [EOL] } <line_num>: 154,156
@Override [EOL] @Test [EOL] public void testCovarianceConsistency() { [EOL] } <line_num>: 157,159
