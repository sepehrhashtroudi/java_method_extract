public abstract UnivariateStatistic getUnivariateStatistic(); <line_num>: 89,89
public abstract double expectedValue(); <line_num>: 91,91
public double getTolerance() { [EOL]     return tolerance; [EOL] } <line_num>: 93,95
@Test [EOL] public void testEvaluation() { [EOL]     Assert.assertEquals(expectedValue(), getUnivariateStatistic().evaluate(testArray), getTolerance()); [EOL] } <line_num>: 97,103
@Test [EOL] public void testEvaluateArraySegment() { [EOL]     final UnivariateStatistic stat = getUnivariateStatistic(); [EOL]     final double[] arrayZero = new double[5]; [EOL]     System.arraycopy(testArray, 0, arrayZero, 0, 5); [EOL]     Assert.assertEquals(stat.evaluate(arrayZero), stat.evaluate(testArray, 0, 5), 0); [EOL]     final double[] arrayOne = new double[5]; [EOL]     System.arraycopy(testArray, 5, arrayOne, 0, 5); [EOL]     Assert.assertEquals(stat.evaluate(arrayOne), stat.evaluate(testArray, 5, 5), 0); [EOL]     final double[] arrayEnd = new double[5]; [EOL]     System.arraycopy(testArray, testArray.length - 5, arrayEnd, 0, 5); [EOL]     Assert.assertEquals(stat.evaluate(arrayEnd), stat.evaluate(testArray, testArray.length - 5, 5), 0); [EOL] } <line_num>: 105,117
@Test [EOL] public void testEvaluateArraySegmentWeighted() { [EOL]     UnivariateStatistic statistic = getUnivariateStatistic(); [EOL]     if (!(statistic instanceof WeightedEvaluation)) { [EOL]         return; [EOL]     } [EOL]     final WeightedEvaluation stat = (WeightedEvaluation) getUnivariateStatistic(); [EOL]     final double[] arrayZero = new double[5]; [EOL]     final double[] weightZero = new double[5]; [EOL]     System.arraycopy(testArray, 0, arrayZero, 0, 5); [EOL]     System.arraycopy(testWeightsArray, 0, weightZero, 0, 5); [EOL]     Assert.assertEquals(stat.evaluate(arrayZero, weightZero), stat.evaluate(testArray, testWeightsArray, 0, 5), 0); [EOL]     final double[] arrayOne = new double[5]; [EOL]     final double[] weightOne = new double[5]; [EOL]     System.arraycopy(testArray, 5, arrayOne, 0, 5); [EOL]     System.arraycopy(testWeightsArray, 5, weightOne, 0, 5); [EOL]     Assert.assertEquals(stat.evaluate(arrayOne, weightOne), stat.evaluate(testArray, testWeightsArray, 5, 5), 0); [EOL]     final double[] arrayEnd = new double[5]; [EOL]     final double[] weightEnd = new double[5]; [EOL]     System.arraycopy(testArray, testArray.length - 5, arrayEnd, 0, 5); [EOL]     System.arraycopy(testWeightsArray, testArray.length - 5, weightEnd, 0, 5); [EOL]     Assert.assertEquals(stat.evaluate(arrayEnd, weightEnd), stat.evaluate(testArray, testWeightsArray, testArray.length - 5, 5), 0); [EOL] } <line_num>: 119,146
@Test [EOL] public void testCopy() { [EOL]     UnivariateStatistic original = getUnivariateStatistic(); [EOL]     UnivariateStatistic copy = original.copy(); [EOL]     Assert.assertEquals(expectedValue(), copy.evaluate(testArray), getTolerance()); [EOL] } <line_num>: 148,156
@Test [EOL] public void testWeightedConsistency() { [EOL]     UnivariateStatistic statistic = getUnivariateStatistic(); [EOL]     if (!(statistic instanceof WeightedEvaluation)) { [EOL]         return; [EOL]     } [EOL]     final int len = 10; [EOL]     final double mu = 0; [EOL]     final double sigma = 5; [EOL]     double[] values = new double[len]; [EOL]     double[] weights = new double[len]; [EOL]     int[] intWeights = new int[len]; [EOL]     final IntegerDistribution weightDist = new UniformIntegerDistribution(1, 5); [EOL]     for (int i = 0; i < len; i++) { [EOL]         intWeights[i] = weightDist.sample(); [EOL]         weights[i] = intWeights[i]; [EOL]     } [EOL]     final RealDistribution valueDist = new NormalDistribution(mu, sigma); [EOL]     List<Double> valuesList = new ArrayList<Double>(); [EOL]     for (int i = 0; i < len; i++) { [EOL]         double value = valueDist.sample(); [EOL]         values[i] = value; [EOL]         for (int j = 0; j < intWeights[i]; j++) { [EOL]             valuesList.add(new Double(value)); [EOL]         } [EOL]     } [EOL]     int sumWeights = valuesList.size(); [EOL]     double[] repeatedValues = new double[sumWeights]; [EOL]     for (int i = 0; i < sumWeights; i++) { [EOL]         repeatedValues[i] = valuesList.get(i); [EOL]     } [EOL]     WeightedEvaluation weightedStatistic = (WeightedEvaluation) statistic; [EOL]     TestUtils.assertRelativelyEquals(statistic.evaluate(repeatedValues), weightedStatistic.evaluate(values, weights, 0, values.length), 10E-12); [EOL]     Assert.assertEquals(weightedStatistic.evaluate(values, weights, 0, values.length), weightedStatistic.evaluate(values, weights), Double.MIN_VALUE); [EOL] } <line_num>: 167,224
