public ListUnivariateImpl() { [EOL]     this(new ArrayList<Object>()); [EOL] } <line_num>: 50,52
public ListUnivariateImpl(List<Object> list) { [EOL]     this(list, new DefaultTransformer()); [EOL] } <line_num>: 58,60
public ListUnivariateImpl(List<Object> list, NumberTransformer transformer) { [EOL]     super(); [EOL]     this.list = list; [EOL]     this.transformer = transformer; [EOL] } <line_num>: 67,71
@Override [EOL] public double[] getValues() { [EOL]     int length = list.size(); [EOL]     final int wSize = getWindowSize(); [EOL]     if (wSize != DescriptiveStatistics.INFINITE_WINDOW && wSize < list.size()) { [EOL]         length = list.size() - FastMath.max(0, list.size() - wSize); [EOL]     } [EOL]     double[] copiedArray = new double[length]; [EOL]     for (int i = 0; i < copiedArray.length; i++) { [EOL]         copiedArray[i] = getElement(i); [EOL]     } [EOL]     return copiedArray; [EOL] } <line_num>: 74,96
@Override [EOL] public double getElement(int index) { [EOL]     double value = Double.NaN; [EOL]     int calcIndex = index; [EOL]     final int wSize = getWindowSize(); [EOL]     if (wSize != DescriptiveStatistics.INFINITE_WINDOW && wSize < list.size()) { [EOL]         calcIndex = (list.size() - wSize) + index; [EOL]     } [EOL]     try { [EOL]         value = transformer.transform(list.get(calcIndex)); [EOL]     } catch (MathIllegalArgumentException e) { [EOL]         e.printStackTrace(); [EOL]     } [EOL]     return value; [EOL] } <line_num>: 99,119
@Override [EOL] public long getN() { [EOL]     int n = 0; [EOL]     final int wSize = getWindowSize(); [EOL]     if (wSize != DescriptiveStatistics.INFINITE_WINDOW) { [EOL]         if (list.size() > wSize) { [EOL]             n = wSize; [EOL]         } else { [EOL]             n = list.size(); [EOL]         } [EOL]     } else { [EOL]         n = list.size(); [EOL]     } [EOL]     return n; [EOL] } <line_num>: 122,137
@Override [EOL] public void addValue(double v) { [EOL]     list.add(Double.valueOf(v)); [EOL] } <line_num>: 140,143
public void addObject(Object o) { [EOL]     list.add(o); [EOL] } <line_num>: 149,151
@Override [EOL] public void clear() { [EOL]     list.clear(); [EOL] } <line_num>: 158,161
@Override [EOL] public double apply(UnivariateStatistic stat) { [EOL]     double[] v = this.getValues(); [EOL]     if (v != null) { [EOL]         return stat.evaluate(v, 0, v.length); [EOL]     } [EOL]     return Double.NaN; [EOL] } <line_num>: 168,176
public NumberTransformer getTransformer() { [EOL]     return transformer; [EOL] } <line_num>: 182,184
public void setTransformer(NumberTransformer transformer) { [EOL]     this.transformer = transformer; [EOL] } <line_num>: 190,192
@Override [EOL] public void setWindowSize(int windowSize) { [EOL]     super.setWindowSize(windowSize); [EOL]     int extra = list.size() - windowSize; [EOL]     for (int i = 0; i < extra; i++) { [EOL]         list.remove(0); [EOL]     } [EOL] } <line_num>: 195,204
