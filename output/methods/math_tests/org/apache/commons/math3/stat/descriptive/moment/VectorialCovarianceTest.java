public VectorialCovarianceTest() { [EOL]     points = new double[][] { { 1.2, 2.3, 4.5 }, { -0.7, 2.3, 5.0 }, { 3.1, 0.0, -3.1 }, { 6.0, 1.2, 4.2 }, { -0.7, 2.3, 5.0 } }; [EOL] } <line_num>: 30,38
@Test [EOL] public void testMismatch() { [EOL]     try { [EOL]         new VectorialCovariance(8, true).increment(new double[5]); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException dme) { [EOL]         Assert.assertEquals(5, dme.getArgument()); [EOL]         Assert.assertEquals(8, dme.getDimension()); [EOL]     } [EOL] } <line_num>: 40,49
@Test [EOL] public void testSimplistic() { [EOL]     VectorialCovariance stat = new VectorialCovariance(2, true); [EOL]     stat.increment(new double[] { -1.0, 1.0 }); [EOL]     stat.increment(new double[] { 1.0, -1.0 }); [EOL]     RealMatrix c = stat.getResult(); [EOL]     Assert.assertEquals(2.0, c.getEntry(0, 0), 1.0e-12); [EOL]     Assert.assertEquals(-2.0, c.getEntry(1, 0), 1.0e-12); [EOL]     Assert.assertEquals(2.0, c.getEntry(1, 1), 1.0e-12); [EOL] } <line_num>: 51,60
@Test [EOL] public void testBasicStats() { [EOL]     VectorialCovariance stat = new VectorialCovariance(points[0].length, true); [EOL]     for (int i = 0; i < points.length; ++i) { [EOL]         stat.increment(points[i]); [EOL]     } [EOL]     Assert.assertEquals(points.length, stat.getN()); [EOL]     RealMatrix c = stat.getResult(); [EOL]     double[][] refC = new double[][] { { 8.0470, -1.9195, -3.4445 }, { -1.9195, 1.0470, 3.2795 }, { -3.4445, 3.2795, 12.2070 } }; [EOL]     for (int i = 0; i < c.getRowDimension(); ++i) { [EOL]         for (int j = 0; j <= i; ++j) { [EOL]             Assert.assertEquals(refC[i][j], c.getEntry(i, j), 1.0e-12); [EOL]         } [EOL]     } [EOL] } <line_num>: 62,85
@Test [EOL] public void testSerial() { [EOL]     VectorialCovariance stat = new VectorialCovariance(points[0].length, true); [EOL]     Assert.assertEquals(stat, TestUtils.serializeAndRecover(stat)); [EOL] } <line_num>: 87,91
