@Test [EOL] public void testAnovaFValue() { [EOL]     List<double[]> threeClasses = new ArrayList<double[]>(); [EOL]     threeClasses.add(classA); [EOL]     threeClasses.add(classB); [EOL]     threeClasses.add(classC); [EOL]     Assert.assertEquals("ANOVA F-value", 24.67361709460624, testStatistic.anovaFValue(threeClasses), 1E-12); [EOL]     List<double[]> twoClasses = new ArrayList<double[]>(); [EOL]     twoClasses.add(classA); [EOL]     twoClasses.add(classB); [EOL]     Assert.assertEquals("ANOVA F-value", 0.0150579150579, testStatistic.anovaFValue(twoClasses), 1E-12); [EOL]     List<double[]> emptyContents = new ArrayList<double[]>(); [EOL]     emptyContents.add(emptyArray); [EOL]     emptyContents.add(classC); [EOL]     try { [EOL]         testStatistic.anovaFValue(emptyContents); [EOL]         Assert.fail("empty array for key classX, MathIllegalArgumentException expected"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     List<double[]> tooFew = new ArrayList<double[]>(); [EOL]     tooFew.add(classA); [EOL]     try { [EOL]         testStatistic.anovaFValue(tooFew); [EOL]         Assert.fail("less than two classes, MathIllegalArgumentException expected"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 47,83
@Test [EOL] public void testAnovaPValue() { [EOL]     List<double[]> threeClasses = new ArrayList<double[]>(); [EOL]     threeClasses.add(classA); [EOL]     threeClasses.add(classB); [EOL]     threeClasses.add(classC); [EOL]     Assert.assertEquals("ANOVA P-value", 6.959446E-06, testStatistic.anovaPValue(threeClasses), 1E-12); [EOL]     List<double[]> twoClasses = new ArrayList<double[]>(); [EOL]     twoClasses.add(classA); [EOL]     twoClasses.add(classB); [EOL]     Assert.assertEquals("ANOVA P-value", 0.904212960464, testStatistic.anovaPValue(twoClasses), 1E-12); [EOL] } <line_num>: 86,104
@Test [EOL] public void testAnovaPValueSummaryStatistics() { [EOL]     List<SummaryStatistics> threeClasses = new ArrayList<SummaryStatistics>(); [EOL]     SummaryStatistics statsA = new SummaryStatistics(); [EOL]     for (double a : classA) { [EOL]         statsA.addValue(a); [EOL]     } [EOL]     threeClasses.add(statsA); [EOL]     SummaryStatistics statsB = new SummaryStatistics(); [EOL]     for (double b : classB) { [EOL]         statsB.addValue(b); [EOL]     } [EOL]     threeClasses.add(statsB); [EOL]     SummaryStatistics statsC = new SummaryStatistics(); [EOL]     for (double c : classC) { [EOL]         statsC.addValue(c); [EOL]     } [EOL]     threeClasses.add(statsC); [EOL]     Assert.assertEquals("ANOVA P-value", 6.959446E-06, testStatistic.anovaPValue(threeClasses, true), 1E-12); [EOL]     List<SummaryStatistics> twoClasses = new ArrayList<SummaryStatistics>(); [EOL]     twoClasses.add(statsA); [EOL]     twoClasses.add(statsB); [EOL]     Assert.assertEquals("ANOVA P-value", 0.904212960464, testStatistic.anovaPValue(twoClasses, false), 1E-12); [EOL] } <line_num>: 106,136
@Test [EOL] public void testAnovaTest() { [EOL]     List<double[]> threeClasses = new ArrayList<double[]>(); [EOL]     threeClasses.add(classA); [EOL]     threeClasses.add(classB); [EOL]     threeClasses.add(classC); [EOL]     Assert.assertTrue("ANOVA Test P<0.01", testStatistic.anovaTest(threeClasses, 0.01)); [EOL]     List<double[]> twoClasses = new ArrayList<double[]>(); [EOL]     twoClasses.add(classA); [EOL]     twoClasses.add(classB); [EOL]     Assert.assertFalse("ANOVA Test P>0.01", testStatistic.anovaTest(twoClasses, 0.01)); [EOL] } <line_num>: 138,153
