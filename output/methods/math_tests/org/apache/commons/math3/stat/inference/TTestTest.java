@Before [EOL] public void setUp() { [EOL]     tooShortStats = new SummaryStatistics(); [EOL]     tooShortStats.addValue(0d); [EOL] } <line_num>: 42,46
@Test [EOL] public void testOneSampleT() { [EOL]     double[] observed = { 93.0, 103.0, 95.0, 101.0, 91.0, 105.0, 96.0, 94.0, 101.0, 88.0, 98.0, 94.0, 101.0, 92.0, 95.0 }; [EOL]     double mu = 100.0; [EOL]     SummaryStatistics sampleStats = null; [EOL]     sampleStats = new SummaryStatistics(); [EOL]     for (int i = 0; i < observed.length; i++) { [EOL]         sampleStats.addValue(observed[i]); [EOL]     } [EOL]     Assert.assertEquals("t statistic", -2.81976445346, testStatistic.t(mu, observed), 10E-10); [EOL]     Assert.assertEquals("t statistic", -2.81976445346, testStatistic.t(mu, sampleStats), 10E-10); [EOL]     Assert.assertEquals("p value", 0.0136390585873, testStatistic.tTest(mu, observed), 10E-10); [EOL]     Assert.assertEquals("p value", 0.0136390585873, testStatistic.tTest(mu, sampleStats), 10E-10); [EOL]     try { [EOL]         testStatistic.t(mu, (double[]) null); [EOL]         Assert.fail("arguments too short, NullArgumentException expected"); [EOL]     } catch (NullArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         testStatistic.t(mu, (SummaryStatistics) null); [EOL]         Assert.fail("arguments too short, NullArgumentException expected"); [EOL]     } catch (NullArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         testStatistic.t(mu, emptyObs); [EOL]         Assert.fail("arguments too short, NumberIsTooSmallException expected"); [EOL]     } catch (NumberIsTooSmallException ex) { [EOL]     } [EOL]     try { [EOL]         testStatistic.t(mu, emptyStats); [EOL]         Assert.fail("arguments too short, NumberIsTooSmallException expected"); [EOL]     } catch (NumberIsTooSmallException ex) { [EOL]     } [EOL]     try { [EOL]         testStatistic.t(mu, tooShortObs); [EOL]         Assert.fail("insufficient data to compute t statistic, NumberIsTooSmallException expected"); [EOL]     } catch (NumberIsTooSmallException ex) { [EOL]     } [EOL]     try { [EOL]         testStatistic.tTest(mu, tooShortObs); [EOL]         Assert.fail("insufficient data to perform t test, NumberIsTooSmallException expected"); [EOL]     } catch (NumberIsTooSmallException ex) { [EOL]     } [EOL]     try { [EOL]         testStatistic.t(mu, tooShortStats); [EOL]         Assert.fail("insufficient data to compute t statistic, NumberIsTooSmallException expected"); [EOL]     } catch (NumberIsTooSmallException ex) { [EOL]     } [EOL]     try { [EOL]         testStatistic.tTest(mu, tooShortStats); [EOL]         Assert.fail("insufficient data to perform t test, NumberIsTooSmallException expected"); [EOL]     } catch (NumberIsTooSmallException ex) { [EOL]     } [EOL] } <line_num>: 48,122
@Test [EOL] public void testOneSampleTTest() { [EOL]     double[] oneSidedP = { 2d, 0d, 6d, 6d, 3d, 3d, 2d, 3d, -6d, 6d, 6d, 6d, 3d, 0d, 1d, 1d, 0d, 2d, 3d, 3d }; [EOL]     SummaryStatistics oneSidedPStats = new SummaryStatistics(); [EOL]     for (int i = 0; i < oneSidedP.length; i++) { [EOL]         oneSidedPStats.addValue(oneSidedP[i]); [EOL]     } [EOL]     Assert.assertEquals("one sample t stat", 3.86485535541, testStatistic.t(0d, oneSidedP), 10E-10); [EOL]     Assert.assertEquals("one sample t stat", 3.86485535541, testStatistic.t(0d, oneSidedPStats), 1E-10); [EOL]     Assert.assertEquals("one sample p value", 0.000521637019637, testStatistic.tTest(0d, oneSidedP) / 2d, 10E-10); [EOL]     Assert.assertEquals("one sample p value", 0.000521637019637, testStatistic.tTest(0d, oneSidedPStats) / 2d, 10E-5); [EOL]     Assert.assertTrue("one sample t-test reject", testStatistic.tTest(0d, oneSidedP, 0.01)); [EOL]     Assert.assertTrue("one sample t-test reject", testStatistic.tTest(0d, oneSidedPStats, 0.01)); [EOL]     Assert.assertTrue("one sample t-test accept", !testStatistic.tTest(0d, oneSidedP, 0.0001)); [EOL]     Assert.assertTrue("one sample t-test accept", !testStatistic.tTest(0d, oneSidedPStats, 0.0001)); [EOL]     try { [EOL]         testStatistic.tTest(0d, oneSidedP, 95); [EOL]         Assert.fail("alpha out of range, OutOfRangeException expected"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         testStatistic.tTest(0d, oneSidedPStats, 95); [EOL]         Assert.fail("alpha out of range, OutOfRangeException expected"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 124,160
@Test [EOL] public void testTwoSampleTHeterscedastic() { [EOL]     double[] sample1 = { 7d, -4d, 18d, 17d, -3d, -5d, 1d, 10d, 11d, -2d }; [EOL]     double[] sample2 = { -1d, 12d, -1d, -3d, 3d, -5d, 5d, 2d, -11d, -1d, -3d }; [EOL]     SummaryStatistics sampleStats1 = new SummaryStatistics(); [EOL]     for (int i = 0; i < sample1.length; i++) { [EOL]         sampleStats1.addValue(sample1[i]); [EOL]     } [EOL]     SummaryStatistics sampleStats2 = new SummaryStatistics(); [EOL]     for (int i = 0; i < sample2.length; i++) { [EOL]         sampleStats2.addValue(sample2[i]); [EOL]     } [EOL]     Assert.assertEquals("two sample heteroscedastic t stat", 1.60371728768, testStatistic.t(sample1, sample2), 1E-10); [EOL]     Assert.assertEquals("two sample heteroscedastic t stat", 1.60371728768, testStatistic.t(sampleStats1, sampleStats2), 1E-10); [EOL]     Assert.assertEquals("two sample heteroscedastic p value", 0.128839369622, testStatistic.tTest(sample1, sample2), 1E-10); [EOL]     Assert.assertEquals("two sample heteroscedastic p value", 0.128839369622, testStatistic.tTest(sampleStats1, sampleStats2), 1E-10); [EOL]     Assert.assertTrue("two sample heteroscedastic t-test reject", testStatistic.tTest(sample1, sample2, 0.2)); [EOL]     Assert.assertTrue("two sample heteroscedastic t-test reject", testStatistic.tTest(sampleStats1, sampleStats2, 0.2)); [EOL]     Assert.assertTrue("two sample heteroscedastic t-test accept", !testStatistic.tTest(sample1, sample2, 0.1)); [EOL]     Assert.assertTrue("two sample heteroscedastic t-test accept", !testStatistic.tTest(sampleStats1, sampleStats2, 0.1)); [EOL]     try { [EOL]         testStatistic.tTest(sample1, sample2, .95); [EOL]         Assert.fail("alpha out of range, OutOfRangeException expected"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         testStatistic.tTest(sampleStats1, sampleStats2, .95); [EOL]         Assert.fail("alpha out of range, OutOfRangeException expected"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         testStatistic.tTest(sample1, tooShortObs, .01); [EOL]         Assert.fail("insufficient data, NumberIsTooSmallException expected"); [EOL]     } catch (NumberIsTooSmallException ex) { [EOL]     } [EOL]     try { [EOL]         testStatistic.tTest(sampleStats1, tooShortStats, .01); [EOL]         Assert.fail("insufficient data, NumberIsTooSmallException expected"); [EOL]     } catch (NumberIsTooSmallException ex) { [EOL]     } [EOL]     try { [EOL]         testStatistic.tTest(sample1, tooShortObs); [EOL]         Assert.fail("insufficient data, NumberIsTooSmallException expected"); [EOL]     } catch (NumberIsTooSmallException ex) { [EOL]     } [EOL]     try { [EOL]         testStatistic.tTest(sampleStats1, tooShortStats); [EOL]         Assert.fail("insufficient data, NumberIsTooSmallException expected"); [EOL]     } catch (NumberIsTooSmallException ex) { [EOL]     } [EOL]     try { [EOL]         testStatistic.t(sample1, tooShortObs); [EOL]         Assert.fail("insufficient data, NumberIsTooSmallException expected"); [EOL]     } catch (NumberIsTooSmallException ex) { [EOL]     } [EOL]     try { [EOL]         testStatistic.t(sampleStats1, tooShortStats); [EOL]         Assert.fail("insufficient data, NumberIsTooSmallException expected"); [EOL]     } catch (NumberIsTooSmallException ex) { [EOL]     } [EOL] } <line_num>: 162,248
@Test [EOL] public void testTwoSampleTHomoscedastic() { [EOL]     double[] sample1 = { 2, 4, 6, 8, 10, 97 }; [EOL]     double[] sample2 = { 4, 6, 8, 10, 16 }; [EOL]     SummaryStatistics sampleStats1 = new SummaryStatistics(); [EOL]     for (int i = 0; i < sample1.length; i++) { [EOL]         sampleStats1.addValue(sample1[i]); [EOL]     } [EOL]     SummaryStatistics sampleStats2 = new SummaryStatistics(); [EOL]     for (int i = 0; i < sample2.length; i++) { [EOL]         sampleStats2.addValue(sample2[i]); [EOL]     } [EOL]     Assert.assertEquals("two sample homoscedastic t stat", 0.73096310086, testStatistic.homoscedasticT(sample1, sample2), 10E-11); [EOL]     Assert.assertEquals("two sample homoscedastic p value", 0.4833963785, testStatistic.homoscedasticTTest(sampleStats1, sampleStats2), 1E-10); [EOL]     Assert.assertTrue("two sample homoscedastic t-test reject", testStatistic.homoscedasticTTest(sample1, sample2, 0.49)); [EOL]     Assert.assertTrue("two sample homoscedastic t-test accept", !testStatistic.homoscedasticTTest(sample1, sample2, 0.48)); [EOL] } <line_num>: 249,271
@Test [EOL] public void testSmallSamples() { [EOL]     double[] sample1 = { 1d, 3d }; [EOL]     double[] sample2 = { 4d, 5d }; [EOL]     Assert.assertEquals(-2.2360679775, testStatistic.t(sample1, sample2), 1E-10); [EOL]     Assert.assertEquals(0.198727388935, testStatistic.tTest(sample1, sample2), 1E-10); [EOL] } <line_num>: 273,283
@Test [EOL] public void testPaired() { [EOL]     double[] sample1 = { 1d, 3d, 5d, 7d }; [EOL]     double[] sample2 = { 0d, 6d, 11d, 2d }; [EOL]     double[] sample3 = { 5d, 7d, 8d, 10d }; [EOL]     Assert.assertEquals(-0.3133, testStatistic.pairedT(sample1, sample2), 1E-4); [EOL]     Assert.assertEquals(0.774544295819, testStatistic.pairedTTest(sample1, sample2), 1E-10); [EOL]     Assert.assertEquals(0.001208, testStatistic.pairedTTest(sample1, sample3), 1E-6); [EOL]     Assert.assertFalse(testStatistic.pairedTTest(sample1, sample3, .001)); [EOL]     Assert.assertTrue(testStatistic.pairedTTest(sample1, sample3, .002)); [EOL] } <line_num>: 285,297
