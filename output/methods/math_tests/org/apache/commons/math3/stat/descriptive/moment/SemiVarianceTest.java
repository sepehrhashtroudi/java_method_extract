@Test [EOL] public void testInsufficientData() { [EOL]     double[] nothing = null; [EOL]     SemiVariance sv = new SemiVariance(); [EOL]     try { [EOL]         sv.evaluate(nothing); [EOL]         Assert.fail("null is not a valid data array."); [EOL]     } catch (MathIllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         sv.setVarianceDirection(SemiVariance.UPSIDE_VARIANCE); [EOL]         sv.evaluate(nothing); [EOL]         Assert.fail("null is not a valid data array."); [EOL]     } catch (MathIllegalArgumentException iae) { [EOL]     } [EOL]     nothing = new double[] {}; [EOL]     Assert.assertTrue(Double.isNaN(sv.evaluate(nothing))); [EOL] } <line_num>: 29,47
@Test [EOL] public void testSingleDown() { [EOL]     SemiVariance sv = new SemiVariance(); [EOL]     double[] values = { 50.0d }; [EOL]     double singletest = sv.evaluate(values); [EOL]     Assert.assertEquals(0.0d, singletest, 0); [EOL] } <line_num>: 49,55
@Test [EOL] public void testSingleUp() { [EOL]     SemiVariance sv = new SemiVariance(SemiVariance.UPSIDE_VARIANCE); [EOL]     double[] values = { 50.0d }; [EOL]     double singletest = sv.evaluate(values); [EOL]     Assert.assertEquals(0.0d, singletest, 0); [EOL] } <line_num>: 57,63
@Test [EOL] public void testSample() { [EOL]     final double[] values = { -2.0d, 2.0d, 4.0d, -2.0d, 22.0d, 11.0d, 3.0d, 14.0d, 5.0d }; [EOL]     final int length = values.length; [EOL]     final double mean = StatUtils.mean(values); [EOL]     final SemiVariance sv = new SemiVariance(); [EOL]     final double downsideSemiVariance = sv.evaluate(values); [EOL]     Assert.assertEquals(TestUtils.sumSquareDev(new double[] { -2d, 2d, 4d, -2d, 3d, 5d }, mean) / (length - 1), downsideSemiVariance, 1E-14); [EOL]     sv.setVarianceDirection(SemiVariance.UPSIDE_VARIANCE); [EOL]     final double upsideSemiVariance = sv.evaluate(values); [EOL]     Assert.assertEquals(TestUtils.sumSquareDev(new double[] { 22d, 11d, 14d }, mean) / (length - 1), upsideSemiVariance, 1E-14); [EOL]     Assert.assertEquals(StatUtils.variance(values), downsideSemiVariance + upsideSemiVariance, 10e-12); [EOL] } <line_num>: 65,82
@Test [EOL] public void testPopulation() { [EOL]     double[] values = { -2.0d, 2.0d, 4.0d, -2.0d, 22.0d, 11.0d, 3.0d, 14.0d, 5.0d }; [EOL]     SemiVariance sv = new SemiVariance(false); [EOL]     double singletest = sv.evaluate(values); [EOL]     Assert.assertEquals(19.556d, singletest, 0.01d); [EOL]     sv.setVarianceDirection(SemiVariance.UPSIDE_VARIANCE); [EOL]     singletest = sv.evaluate(values); [EOL]     Assert.assertEquals(36.222d, singletest, 0.01d); [EOL] } <line_num>: 84,95
@Test [EOL] public void testNonMeanCutoffs() { [EOL]     double[] values = { -2.0d, 2.0d, 4.0d, -2.0d, 22.0d, 11.0d, 3.0d, 14.0d, 5.0d }; [EOL]     SemiVariance sv = new SemiVariance(false); [EOL]     double singletest = sv.evaluate(values, 1.0d, SemiVariance.DOWNSIDE_VARIANCE, false, 0, values.length); [EOL]     Assert.assertEquals(TestUtils.sumSquareDev(new double[] { -2d, -2d }, 1.0d) / values.length, singletest, 0.01d); [EOL]     singletest = sv.evaluate(values, 3.0d, SemiVariance.UPSIDE_VARIANCE, false, 0, values.length); [EOL]     Assert.assertEquals(TestUtils.sumSquareDev(new double[] { 4d, 22d, 11d, 14d, 5d }, 3.0d) / values.length, singletest, 0.01d); [EOL] } <line_num>: 97,109
@Test [EOL] public void testVarianceDecompMeanCutoff() { [EOL]     double[] values = { -2.0d, 2.0d, 4.0d, -2.0d, 22.0d, 11.0d, 3.0d, 14.0d, 5.0d }; [EOL]     double variance = StatUtils.variance(values); [EOL]     SemiVariance sv = new SemiVariance(true); [EOL]     sv.setVarianceDirection(SemiVariance.DOWNSIDE_VARIANCE); [EOL]     final double lower = sv.evaluate(values); [EOL]     sv.setVarianceDirection(SemiVariance.UPSIDE_VARIANCE); [EOL]     final double upper = sv.evaluate(values); [EOL]     Assert.assertEquals(variance, lower + upper, 10e-12); [EOL] } <line_num>: 115,125
@Test [EOL] public void testVarianceDecompNonMeanCutoff() { [EOL]     double[] values = { -2.0d, 2.0d, 4.0d, -2.0d, 22.0d, 11.0d, 3.0d, 14.0d, 5.0d }; [EOL]     double target = 0; [EOL]     double totalSumOfSquares = TestUtils.sumSquareDev(values, target); [EOL]     SemiVariance sv = new SemiVariance(true); [EOL]     sv.setVarianceDirection(SemiVariance.DOWNSIDE_VARIANCE); [EOL]     double lower = sv.evaluate(values, target); [EOL]     sv.setVarianceDirection(SemiVariance.UPSIDE_VARIANCE); [EOL]     double upper = sv.evaluate(values, target); [EOL]     Assert.assertEquals(totalSumOfSquares / (values.length - 1), lower + upper, 10e-12); [EOL] } <line_num>: 132,143
@Test [EOL] public void testNoVariance() { [EOL]     final double[] values = { 100d, 100d, 100d, 100d }; [EOL]     SemiVariance sv = new SemiVariance(); [EOL]     Assert.assertEquals(0, sv.evaluate(values), 10E-12); [EOL]     Assert.assertEquals(0, sv.evaluate(values, 100d), 10E-12); [EOL]     Assert.assertEquals(0, sv.evaluate(values, 100d, SemiVariance.UPSIDE_VARIANCE, false, 0, values.length), 10E-12); [EOL] } <line_num>: 145,152
