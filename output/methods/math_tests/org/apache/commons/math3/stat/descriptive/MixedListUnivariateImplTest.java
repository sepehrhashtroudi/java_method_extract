public MixedListUnivariateImplTest() { [EOL]     transformers = new TransformerMap(); [EOL]     transformers.putTransformer(Foo.class, new FooTransformer()); [EOL]     transformers.putTransformer(Bar.class, new BarTransformer()); [EOL] } <line_num>: 53,60
@Test [EOL] public void testStats() { [EOL]     List<Object> externalList = new ArrayList<Object>(); [EOL]     DescriptiveStatistics u = new ListUnivariateImpl(externalList, transformers); [EOL]     Assert.assertEquals("total count", 0, u.getN(), tolerance); [EOL]     u.addValue(one); [EOL]     u.addValue(two); [EOL]     u.addValue(two); [EOL]     u.addValue(three); [EOL]     Assert.assertEquals("N", n, u.getN(), tolerance); [EOL]     Assert.assertEquals("sum", sum, u.getSum(), tolerance); [EOL]     Assert.assertEquals("sumsq", sumSq, u.getSumsq(), tolerance); [EOL]     Assert.assertEquals("var", var, u.getVariance(), tolerance); [EOL]     Assert.assertEquals("std", std, u.getStandardDeviation(), tolerance); [EOL]     Assert.assertEquals("mean", mean, u.getMean(), tolerance); [EOL]     Assert.assertEquals("min", min, u.getMin(), tolerance); [EOL]     Assert.assertEquals("max", max, u.getMax(), tolerance); [EOL]     u.clear(); [EOL]     Assert.assertEquals("total count", 0, u.getN(), tolerance); [EOL] } <line_num>: 63,84
@Test [EOL] public void testN0andN1Conditions() { [EOL]     DescriptiveStatistics u = new ListUnivariateImpl(new ArrayList<Object>(), transformers); [EOL]     Assert.assertTrue("Mean of n = 0 set should be NaN", Double.isNaN(u.getMean())); [EOL]     Assert.assertTrue("Standard Deviation of n = 0 set should be NaN", Double.isNaN(u.getStandardDeviation())); [EOL]     Assert.assertTrue("Variance of n = 0 set should be NaN", Double.isNaN(u.getVariance())); [EOL]     u.addValue(one); [EOL]     Assert.assertTrue("Mean of n = 1 set should be value of single item n1, instead it is " + u.getMean(), u.getMean() == one); [EOL]     Assert.assertTrue("StdDev of n = 1 set should be zero, instead it is: " + u.getStandardDeviation(), u.getStandardDeviation() == 0); [EOL]     Assert.assertTrue("Variance of n = 1 set should be zero", u.getVariance() == 0); [EOL] } <line_num>: 86,113
@Test [EOL] public void testSkewAndKurtosis() { [EOL]     ListUnivariateImpl u = new ListUnivariateImpl(new ArrayList<Object>(), transformers); [EOL]     u.addObject("12.5"); [EOL]     u.addObject(Integer.valueOf(12)); [EOL]     u.addObject("11.8"); [EOL]     u.addObject("14.2"); [EOL]     u.addObject(new Foo()); [EOL]     u.addObject("14.5"); [EOL]     u.addObject(Long.valueOf(21)); [EOL]     u.addObject("8.2"); [EOL]     u.addObject("10.3"); [EOL]     u.addObject("11.3"); [EOL]     u.addObject(Float.valueOf(14.1f)); [EOL]     u.addObject("9.9"); [EOL]     u.addObject("12.2"); [EOL]     u.addObject(new Bar()); [EOL]     u.addObject("12.1"); [EOL]     u.addObject("11"); [EOL]     u.addObject(Double.valueOf(19.8)); [EOL]     u.addObject("11"); [EOL]     u.addObject("10"); [EOL]     u.addObject("8.8"); [EOL]     u.addObject("9"); [EOL]     u.addObject("12.3"); [EOL]     Assert.assertEquals("mean", 12.40455, u.getMean(), 0.0001); [EOL]     Assert.assertEquals("variance", 10.00236, u.getVariance(), 0.0001); [EOL]     Assert.assertEquals("skewness", 1.437424, u.getSkewness(), 0.0001); [EOL]     Assert.assertEquals("kurtosis", 2.37719, u.getKurtosis(), 0.0001); [EOL] } <line_num>: 115,148
@Test [EOL] public void testProductAndGeometricMean() { [EOL]     ListUnivariateImpl u = new ListUnivariateImpl(new ArrayList<Object>(), transformers); [EOL]     u.setWindowSize(10); [EOL]     u.addValue(1.0); [EOL]     u.addValue(2.0); [EOL]     u.addValue(3.0); [EOL]     u.addValue(4.0); [EOL]     Assert.assertEquals("Geometric mean not expected", 2.213364, u.getGeometricMean(), 0.00001); [EOL]     for (int i = 0; i < 10; i++) { [EOL]         u.addValue(i + 2); [EOL]     } [EOL]     Assert.assertEquals("Geometric mean not expected", 5.755931, u.getGeometricMean(), 0.00001); [EOL] } <line_num>: 150,178
public String heresFoo() { [EOL]     return "14.9"; [EOL] } <line_num>: 181,183
public double transform(Object o) { [EOL]     return Double.parseDouble(((Foo) o).heresFoo()); [EOL] } <line_num>: 188,190
public String heresBar() { [EOL]     return "12.0"; [EOL] } <line_num>: 194,196
public double transform(Object o) { [EOL]     return Double.parseDouble(((Bar) o).heresBar()); [EOL] } <line_num>: 201,203
