@Override [EOL] public UnivariateStatistic getUnivariateStatistic() { [EOL]     return new SumOfSquares(); [EOL] } <line_num>: 37,40
@Override [EOL] public double expectedValue() { [EOL]     return this.sumSq; [EOL] } <line_num>: 45,48
@Test [EOL] public void testSpecialValues() { [EOL]     SumOfSquares sumSq = new SumOfSquares(); [EOL]     Assert.assertEquals(0, sumSq.getResult(), 0); [EOL]     sumSq.increment(2d); [EOL]     Assert.assertEquals(4d, sumSq.getResult(), 0); [EOL]     sumSq.increment(Double.POSITIVE_INFINITY); [EOL]     Assert.assertEquals(Double.POSITIVE_INFINITY, sumSq.getResult(), 0); [EOL]     sumSq.increment(Double.NEGATIVE_INFINITY); [EOL]     Assert.assertEquals(Double.POSITIVE_INFINITY, sumSq.getResult(), 0); [EOL]     sumSq.increment(Double.NaN); [EOL]     Assert.assertTrue(Double.isNaN(sumSq.getResult())); [EOL]     sumSq.increment(1); [EOL]     Assert.assertTrue(Double.isNaN(sumSq.getResult())); [EOL] } <line_num>: 50,64
@Override [EOL] protected void checkClearValue(StorelessUnivariateStatistic statistic) { [EOL]     Assert.assertEquals(0, statistic.getResult(), 0); [EOL] } <line_num>: 66,69
