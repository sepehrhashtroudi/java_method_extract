@Test [EOL] public void testSummaryStatistics() throws Exception { [EOL]     SummaryStatistics u = new SummaryStatistics(); [EOL]     loadStats("data/PiDigits.txt", u); [EOL]     Assert.assertEquals("PiDigits: std", std, u.getStandardDeviation(), 1E-13); [EOL]     Assert.assertEquals("PiDigits: mean", mean, u.getMean(), 1E-13); [EOL]     loadStats("data/Mavro.txt", u); [EOL]     Assert.assertEquals("Mavro: std", std, u.getStandardDeviation(), 1E-14); [EOL]     Assert.assertEquals("Mavro: mean", mean, u.getMean(), 1E-14); [EOL]     loadStats("data/Michelso.txt", u); [EOL]     Assert.assertEquals("Michelso: std", std, u.getStandardDeviation(), 1E-13); [EOL]     Assert.assertEquals("Michelso: mean", mean, u.getMean(), 1E-13); [EOL]     loadStats("data/NumAcc1.txt", u); [EOL]     Assert.assertEquals("NumAcc1: std", std, u.getStandardDeviation(), 1E-14); [EOL]     Assert.assertEquals("NumAcc1: mean", mean, u.getMean(), 1E-14); [EOL]     loadStats("data/NumAcc2.txt", u); [EOL]     Assert.assertEquals("NumAcc2: std", std, u.getStandardDeviation(), 1E-14); [EOL]     Assert.assertEquals("NumAcc2: mean", mean, u.getMean(), 1E-14); [EOL] } <line_num>: 43,65
@Test [EOL] public void testDescriptiveStatistics() throws Exception { [EOL]     DescriptiveStatistics u = new DescriptiveStatistics(); [EOL]     loadStats("data/PiDigits.txt", u); [EOL]     Assert.assertEquals("PiDigits: std", std, u.getStandardDeviation(), 1E-14); [EOL]     Assert.assertEquals("PiDigits: mean", mean, u.getMean(), 1E-14); [EOL]     loadStats("data/Mavro.txt", u); [EOL]     Assert.assertEquals("Mavro: std", std, u.getStandardDeviation(), 1E-14); [EOL]     Assert.assertEquals("Mavro: mean", mean, u.getMean(), 1E-14); [EOL]     loadStats("data/Michelso.txt", u); [EOL]     Assert.assertEquals("Michelso: std", std, u.getStandardDeviation(), 1E-14); [EOL]     Assert.assertEquals("Michelso: mean", mean, u.getMean(), 1E-14); [EOL]     loadStats("data/NumAcc1.txt", u); [EOL]     Assert.assertEquals("NumAcc1: std", std, u.getStandardDeviation(), 1E-14); [EOL]     Assert.assertEquals("NumAcc1: mean", mean, u.getMean(), 1E-14); [EOL]     loadStats("data/NumAcc2.txt", u); [EOL]     Assert.assertEquals("NumAcc2: std", std, u.getStandardDeviation(), 1E-14); [EOL]     Assert.assertEquals("NumAcc2: mean", mean, u.getMean(), 1E-14); [EOL] } <line_num>: 71,95
private void loadStats(String resource, Object u) throws Exception { [EOL]     DescriptiveStatistics d = null; [EOL]     SummaryStatistics s = null; [EOL]     if (u instanceof DescriptiveStatistics) { [EOL]         d = (DescriptiveStatistics) u; [EOL]     } else { [EOL]         s = (SummaryStatistics) u; [EOL]     } [EOL]     u.getClass().getDeclaredMethod("clear", new Class[] {}).invoke(u, new Object[] {}); [EOL]     mean = Double.NaN; [EOL]     std = Double.NaN; [EOL]     InputStream resourceAsStream = CertifiedDataTest.class.getResourceAsStream(resource); [EOL]     Assert.assertNotNull("Could not find resource " + resource, resourceAsStream); [EOL]     BufferedReader in = new BufferedReader(new InputStreamReader(resourceAsStream)); [EOL]     String line = null; [EOL]     for (int j = 0; j < 60; j++) { [EOL]         line = in.readLine(); [EOL]         if (j == 40) { [EOL]             mean = Double.parseDouble(line.substring(line.lastIndexOf(":") + 1).trim()); [EOL]         } [EOL]         if (j == 41) { [EOL]             std = Double.parseDouble(line.substring(line.lastIndexOf(":") + 1).trim()); [EOL]         } [EOL]     } [EOL]     line = in.readLine(); [EOL]     while (line != null) { [EOL]         if (d != null) { [EOL]             d.addValue(Double.parseDouble(line.trim())); [EOL]         } else { [EOL]             s.addValue(Double.parseDouble(line.trim())); [EOL]         } [EOL]         line = in.readLine(); [EOL]     } [EOL]     resourceAsStream.close(); [EOL]     in.close(); [EOL] } <line_num>: 102,152
