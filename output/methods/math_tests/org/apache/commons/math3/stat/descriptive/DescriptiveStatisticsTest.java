protected DescriptiveStatistics createDescriptiveStatistics() { [EOL]     return new DescriptiveStatistics(); [EOL] } <line_num>: 40,42
@Test [EOL] public void testSetterInjection() { [EOL]     DescriptiveStatistics stats = createDescriptiveStatistics(); [EOL]     stats.addValue(1); [EOL]     stats.addValue(3); [EOL]     Assert.assertEquals(2, stats.getMean(), 1E-10); [EOL]     stats.setMeanImpl(new deepMean()); [EOL]     Assert.assertEquals(42, stats.getMean(), 1E-10); [EOL] } <line_num>: 44,53
@Test [EOL] public void testCopy() { [EOL]     DescriptiveStatistics stats = createDescriptiveStatistics(); [EOL]     stats.addValue(1); [EOL]     stats.addValue(3); [EOL]     DescriptiveStatistics copy = new DescriptiveStatistics(stats); [EOL]     Assert.assertEquals(2, copy.getMean(), 1E-10); [EOL]     stats.setMeanImpl(new deepMean()); [EOL]     copy = stats.copy(); [EOL]     Assert.assertEquals(42, copy.getMean(), 1E-10); [EOL] } <line_num>: 55,66
@Test [EOL] public void testWindowSize() { [EOL]     DescriptiveStatistics stats = createDescriptiveStatistics(); [EOL]     stats.setWindowSize(300); [EOL]     for (int i = 0; i < 100; ++i) { [EOL]         stats.addValue(i + 1); [EOL]     } [EOL]     int refSum = (100 * 101) / 2; [EOL]     Assert.assertEquals(refSum / 100.0, stats.getMean(), 1E-10); [EOL]     Assert.assertEquals(300, stats.getWindowSize()); [EOL]     try { [EOL]         stats.setWindowSize(-3); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (IllegalArgumentException iae) { [EOL]     } [EOL]     Assert.assertEquals(300, stats.getWindowSize()); [EOL]     stats.setWindowSize(50); [EOL]     Assert.assertEquals(50, stats.getWindowSize()); [EOL]     int refSum2 = refSum - (50 * 51) / 2; [EOL]     Assert.assertEquals(refSum2 / 50.0, stats.getMean(), 1E-10); [EOL] } <line_num>: 68,89
@Test [EOL] public void testGetValues() { [EOL]     DescriptiveStatistics stats = createDescriptiveStatistics(); [EOL]     for (int i = 100; i > 0; --i) { [EOL]         stats.addValue(i); [EOL]     } [EOL]     int refSum = (100 * 101) / 2; [EOL]     Assert.assertEquals(refSum / 100.0, stats.getMean(), 1E-10); [EOL]     double[] v = stats.getValues(); [EOL]     for (int i = 0; i < v.length; ++i) { [EOL]         Assert.assertEquals(100.0 - i, v[i], 1.0e-10); [EOL]     } [EOL]     double[] s = stats.getSortedValues(); [EOL]     for (int i = 0; i < s.length; ++i) { [EOL]         Assert.assertEquals(i + 1.0, s[i], 1.0e-10); [EOL]     } [EOL]     Assert.assertEquals(12.0, stats.getElement(88), 1.0e-10); [EOL] } <line_num>: 91,108
@Test [EOL] public void testToString() { [EOL]     DescriptiveStatistics stats = createDescriptiveStatistics(); [EOL]     stats.addValue(1); [EOL]     stats.addValue(2); [EOL]     stats.addValue(3); [EOL]     Locale d = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.US); [EOL]     Assert.assertEquals("DescriptiveStatistics:\n" + "n: 3\n" + "min: 1.0\n" + "max: 3.0\n" + "mean: 2.0\n" + "std dev: 1.0\n" + "median: 2.0\n" + "skewness: 0.0\n" + "kurtosis: NaN\n", stats.toString()); [EOL]     Locale.setDefault(d); [EOL] } <line_num>: 110,128
@Test [EOL] public void testShuffledStatistics() { [EOL]     DescriptiveStatistics reference = createDescriptiveStatistics(); [EOL]     DescriptiveStatistics shuffled = createDescriptiveStatistics(); [EOL]     UnivariateStatistic tmp = shuffled.getGeometricMeanImpl(); [EOL]     shuffled.setGeometricMeanImpl(shuffled.getMeanImpl()); [EOL]     shuffled.setMeanImpl(shuffled.getKurtosisImpl()); [EOL]     shuffled.setKurtosisImpl(shuffled.getSkewnessImpl()); [EOL]     shuffled.setSkewnessImpl(shuffled.getVarianceImpl()); [EOL]     shuffled.setVarianceImpl(shuffled.getMaxImpl()); [EOL]     shuffled.setMaxImpl(shuffled.getMinImpl()); [EOL]     shuffled.setMinImpl(shuffled.getSumImpl()); [EOL]     shuffled.setSumImpl(shuffled.getSumsqImpl()); [EOL]     shuffled.setSumsqImpl(tmp); [EOL]     for (int i = 100; i > 0; --i) { [EOL]         reference.addValue(i); [EOL]         shuffled.addValue(i); [EOL]     } [EOL]     Assert.assertEquals(reference.getMean(), shuffled.getGeometricMean(), 1.0e-10); [EOL]     Assert.assertEquals(reference.getKurtosis(), shuffled.getMean(), 1.0e-10); [EOL]     Assert.assertEquals(reference.getSkewness(), shuffled.getKurtosis(), 1.0e-10); [EOL]     Assert.assertEquals(reference.getVariance(), shuffled.getSkewness(), 1.0e-10); [EOL]     Assert.assertEquals(reference.getMax(), shuffled.getVariance(), 1.0e-10); [EOL]     Assert.assertEquals(reference.getMin(), shuffled.getMax(), 1.0e-10); [EOL]     Assert.assertEquals(reference.getSum(), shuffled.getMin(), 1.0e-10); [EOL]     Assert.assertEquals(reference.getSumsq(), shuffled.getSum(), 1.0e-10); [EOL]     Assert.assertEquals(reference.getGeometricMean(), shuffled.getSumsq(), 1.0e-10); [EOL] } <line_num>: 130,164
@Test [EOL] public void testPercentileSetter() { [EOL]     DescriptiveStatistics stats = createDescriptiveStatistics(); [EOL]     stats.addValue(1); [EOL]     stats.addValue(2); [EOL]     stats.addValue(3); [EOL]     Assert.assertEquals(2, stats.getPercentile(50.0), 1E-10); [EOL]     stats.setPercentileImpl(new goodPercentile()); [EOL]     Assert.assertEquals(2, stats.getPercentile(50.0), 1E-10); [EOL]     stats.setPercentileImpl(new subPercentile()); [EOL]     Assert.assertEquals(10.0, stats.getPercentile(10.0), 1E-10); [EOL]     try { [EOL]         stats.setPercentileImpl(new badPercentile()); [EOL]         Assert.fail("Expecting IllegalArgumentException"); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 166,189
@Test [EOL] public void test20090720() { [EOL]     DescriptiveStatistics descriptiveStatistics = new DescriptiveStatistics(100); [EOL]     for (int i = 0; i < 161; i++) { [EOL]         descriptiveStatistics.addValue(1.2); [EOL]     } [EOL]     descriptiveStatistics.clear(); [EOL]     descriptiveStatistics.addValue(1.2); [EOL]     Assert.assertEquals(1, descriptiveStatistics.getN()); [EOL] } <line_num>: 191,200
@Test [EOL] public void testRemoval() { [EOL]     final DescriptiveStatistics dstat = createDescriptiveStatistics(); [EOL]     checkremoval(dstat, 1, 6.0, 0.0, Double.NaN); [EOL]     checkremoval(dstat, 3, 5.0, 3.0, 4.5); [EOL]     checkremoval(dstat, 6, 3.5, 2.5, 3.0); [EOL]     checkremoval(dstat, 9, 3.5, 2.5, 3.0); [EOL]     checkremoval(dstat, DescriptiveStatistics.INFINITE_WINDOW, 3.5, 2.5, 3.0); [EOL] } <line_num>: 202,213
@Test [EOL] public void testSummaryConsistency() { [EOL]     final DescriptiveStatistics dstats = new DescriptiveStatistics(); [EOL]     final SummaryStatistics sstats = new SummaryStatistics(); [EOL]     final int windowSize = 5; [EOL]     dstats.setWindowSize(windowSize); [EOL]     final double tol = 1E-12; [EOL]     for (int i = 0; i < 20; i++) { [EOL]         dstats.addValue(i); [EOL]         sstats.clear(); [EOL]         double[] values = dstats.getValues(); [EOL]         for (int j = 0; j < values.length; j++) { [EOL]             sstats.addValue(values[j]); [EOL]         } [EOL]         TestUtils.assertEquals(dstats.getMean(), sstats.getMean(), tol); [EOL]         TestUtils.assertEquals(new Mean().evaluate(values), dstats.getMean(), tol); [EOL]         TestUtils.assertEquals(dstats.getMax(), sstats.getMax(), tol); [EOL]         TestUtils.assertEquals(new Max().evaluate(values), dstats.getMax(), tol); [EOL]         TestUtils.assertEquals(dstats.getGeometricMean(), sstats.getGeometricMean(), tol); [EOL]         TestUtils.assertEquals(new GeometricMean().evaluate(values), dstats.getGeometricMean(), tol); [EOL]         TestUtils.assertEquals(dstats.getMin(), sstats.getMin(), tol); [EOL]         TestUtils.assertEquals(new Min().evaluate(values), dstats.getMin(), tol); [EOL]         TestUtils.assertEquals(dstats.getStandardDeviation(), sstats.getStandardDeviation(), tol); [EOL]         TestUtils.assertEquals(dstats.getVariance(), sstats.getVariance(), tol); [EOL]         TestUtils.assertEquals(new Variance().evaluate(values), dstats.getVariance(), tol); [EOL]         TestUtils.assertEquals(dstats.getSum(), sstats.getSum(), tol); [EOL]         TestUtils.assertEquals(new Sum().evaluate(values), dstats.getSum(), tol); [EOL]         TestUtils.assertEquals(dstats.getSumsq(), sstats.getSumsq(), tol); [EOL]         TestUtils.assertEquals(new SumOfSquares().evaluate(values), dstats.getSumsq(), tol); [EOL]         TestUtils.assertEquals(dstats.getPopulationVariance(), sstats.getPopulationVariance(), tol); [EOL]         TestUtils.assertEquals(new Variance(false).evaluate(values), dstats.getPopulationVariance(), tol); [EOL]     } [EOL] } <line_num>: 215,247
public void checkremoval(DescriptiveStatistics dstat, int wsize, double mean1, double mean2, double mean3) { [EOL]     dstat.setWindowSize(wsize); [EOL]     dstat.clear(); [EOL]     for (int i = 1; i <= 6; ++i) { [EOL]         dstat.addValue(i); [EOL]     } [EOL]     Assert.assertTrue(Precision.equalsIncludingNaN(mean1, dstat.getMean())); [EOL]     dstat.replaceMostRecentValue(0); [EOL]     Assert.assertTrue(Precision.equalsIncludingNaN(mean2, dstat.getMean())); [EOL]     dstat.removeMostRecentValue(); [EOL]     Assert.assertTrue(Precision.equalsIncludingNaN(mean3, dstat.getMean())); [EOL] } <line_num>: 249,265
public double evaluate(double[] values, int begin, int length) { [EOL]     return 42; [EOL] } <line_num>: 274,276
public double evaluate(double[] values) { [EOL]     return 42; [EOL] } <line_num>: 278,280
public UnivariateStatistic copy() { [EOL]     return new deepMean(); [EOL] } <line_num>: 281,283
public void setQuantile(double quantile) { [EOL]     percentile.setQuantile(quantile); [EOL] } <line_num>: 291,293
public double evaluate(double[] values, int begin, int length) { [EOL]     return percentile.evaluate(values, begin, length); [EOL] } <line_num>: 294,296
public double evaluate(double[] values) { [EOL]     return percentile.evaluate(values); [EOL] } <line_num>: 297,299
public UnivariateStatistic copy() { [EOL]     goodPercentile result = new goodPercentile(); [EOL]     result.setQuantile(percentile.getQuantile()); [EOL]     return result; [EOL] } <line_num>: 300,304
@Override [EOL] public double evaluate(double[] values, int begin, int length) { [EOL]     return getQuantile(); [EOL] } <line_num>: 312,315
@Override [EOL] public double evaluate(double[] values) { [EOL]     return getQuantile(); [EOL] } <line_num>: 316,319
@Override [EOL] public Percentile copy() { [EOL]     subPercentile result = new subPercentile(); [EOL]     return result; [EOL] } <line_num>: 321,325
public double evaluate(double[] values, int begin, int length) { [EOL]     return percentile.evaluate(values, begin, length); [EOL] } <line_num>: 333,335
public double evaluate(double[] values) { [EOL]     return percentile.evaluate(values); [EOL] } <line_num>: 336,338
public UnivariateStatistic copy() { [EOL]     return new badPercentile(); [EOL] } <line_num>: 339,341
