@Override [EOL] public UnivariateStatistic getUnivariateStatistic() { [EOL]     return new Variance(); [EOL] } <line_num>: 37,40
@Override [EOL] public double expectedValue() { [EOL]     return this.var; [EOL] } <line_num>: 45,48
public double expectedWeightedValue() { [EOL]     return this.weightedVar; [EOL] } <line_num>: 51,53
@Test [EOL] public void testNaN() { [EOL]     StandardDeviation std = new StandardDeviation(); [EOL]     Assert.assertTrue(Double.isNaN(std.getResult())); [EOL]     std.increment(1d); [EOL]     Assert.assertEquals(0d, std.getResult(), 0); [EOL] } <line_num>: 59,65
@Test [EOL] public void testPopulation() { [EOL]     double[] values = { -1.0d, 3.1d, 4.0d, -2.1d, 22d, 11.7d, 3d, 14d }; [EOL]     SecondMoment m = new SecondMoment(); [EOL]     m.evaluate(values); [EOL]     Variance v1 = new Variance(); [EOL]     v1.setBiasCorrected(false); [EOL]     Assert.assertEquals(populationVariance(values), v1.evaluate(values), 1E-14); [EOL]     v1.incrementAll(values); [EOL]     Assert.assertEquals(populationVariance(values), v1.getResult(), 1E-14); [EOL]     v1 = new Variance(false, m); [EOL]     Assert.assertEquals(populationVariance(values), v1.getResult(), 1E-14); [EOL]     v1 = new Variance(false); [EOL]     Assert.assertEquals(populationVariance(values), v1.evaluate(values), 1E-14); [EOL]     v1.incrementAll(values); [EOL]     Assert.assertEquals(populationVariance(values), v1.getResult(), 1E-14); [EOL] } <line_num>: 70,86
protected double populationVariance(double[] v) { [EOL]     double mean = new Mean().evaluate(v); [EOL]     double sum = 0; [EOL]     for (int i = 0; i < v.length; i++) { [EOL]         sum += (v[i] - mean) * (v[i] - mean); [EOL]     } [EOL]     return sum / v.length; [EOL] } <line_num>: 91,98
@Test [EOL] public void testWeightedVariance() { [EOL]     Variance variance = new Variance(); [EOL]     Assert.assertEquals(expectedWeightedValue(), variance.evaluate(testArray, testWeightsArray, 0, testArray.length), getTolerance()); [EOL]     Assert.assertEquals(expectedValue(), variance.evaluate(testArray, unitWeightsArray, 0, testArray.length), getTolerance()); [EOL]     Assert.assertEquals(expectedValue(), variance.evaluate(testArray, MathArrays.normalizeArray(identicalWeightsArray, testArray.length), 0, testArray.length), getTolerance()); [EOL] } <line_num>: 100,116
