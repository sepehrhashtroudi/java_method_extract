public VectorialMeanTest() { [EOL]     points = new double[][] { { 1.2, 2.3, 4.5 }, { -0.7, 2.3, 5.0 }, { 3.1, 0.0, -3.1 }, { 6.0, 1.2, 4.2 }, { -0.7, 2.3, 5.0 } }; [EOL] } <line_num>: 29,37
@Test [EOL] public void testMismatch() { [EOL]     try { [EOL]         new VectorialMean(8).increment(new double[5]); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException dme) { [EOL]         Assert.assertEquals(5, dme.getArgument()); [EOL]         Assert.assertEquals(8, dme.getDimension()); [EOL]     } [EOL] } <line_num>: 39,48
@Test [EOL] public void testSimplistic() { [EOL]     VectorialMean stat = new VectorialMean(2); [EOL]     stat.increment(new double[] { -1.0, 1.0 }); [EOL]     stat.increment(new double[] { 1.0, -1.0 }); [EOL]     double[] mean = stat.getResult(); [EOL]     Assert.assertEquals(0.0, mean[0], 1.0e-12); [EOL]     Assert.assertEquals(0.0, mean[1], 1.0e-12); [EOL] } <line_num>: 50,58
@Test [EOL] public void testBasicStats() { [EOL]     VectorialMean stat = new VectorialMean(points[0].length); [EOL]     for (int i = 0; i < points.length; ++i) { [EOL]         stat.increment(points[i]); [EOL]     } [EOL]     Assert.assertEquals(points.length, stat.getN()); [EOL]     double[] mean = stat.getResult(); [EOL]     double[] refMean = new double[] { 1.78, 1.62, 3.12 }; [EOL]     for (int i = 0; i < mean.length; ++i) { [EOL]         Assert.assertEquals(refMean[i], mean[i], 1.0e-12); [EOL]     } [EOL] } <line_num>: 60,77
@Test [EOL] public void testSerial() { [EOL]     VectorialMean stat = new VectorialMean(points[0].length); [EOL]     for (int i = 0; i < points.length; ++i) { [EOL]         stat.increment(points[i]); [EOL]     } [EOL]     Assert.assertEquals(stat, TestUtils.serializeAndRecover(stat)); [EOL] } <line_num>: 79,86
