@Test [EOL] public void testStats() { [EOL]     double[] values = new double[] { ONE, TWO, TWO, THREE }; [EOL]     Assert.assertEquals("sum", SUM, StatUtils.sum(values), TOLERANCE); [EOL]     Assert.assertEquals("sumsq", SUMSQ, StatUtils.sumSq(values), TOLERANCE); [EOL]     Assert.assertEquals("var", VAR, StatUtils.variance(values), TOLERANCE); [EOL]     Assert.assertEquals("var with mean", VAR, StatUtils.variance(values, MEAN), TOLERANCE); [EOL]     Assert.assertEquals("mean", MEAN, StatUtils.mean(values), TOLERANCE); [EOL]     Assert.assertEquals("min", MIN, StatUtils.min(values), TOLERANCE); [EOL]     Assert.assertEquals("max", MAX, StatUtils.max(values), TOLERANCE); [EOL] } <line_num>: 48,58
@Test [EOL] public void testN0andN1Conditions() { [EOL]     double[] values = new double[0]; [EOL]     Assert.assertTrue("Mean of n = 0 set should be NaN", Double.isNaN(StatUtils.mean(values))); [EOL]     Assert.assertTrue("Variance of n = 0 set should be NaN", Double.isNaN(StatUtils.variance(values))); [EOL]     values = new double[] { ONE }; [EOL]     Assert.assertTrue("Mean of n = 1 set should be value of single item n1", StatUtils.mean(values) == ONE); [EOL]     Assert.assertTrue("Variance of n = 1 set should be zero", StatUtils.variance(values) == 0); [EOL] } <line_num>: 60,79
@Test [EOL] public void testArrayIndexConditions() { [EOL]     double[] values = { 1.0, 2.0, 3.0, 4.0 }; [EOL]     Assert.assertEquals("Sum not expected", 5.0, StatUtils.sum(values, 1, 2), Double.MIN_VALUE); [EOL]     Assert.assertEquals("Sum not expected", 3.0, StatUtils.sum(values, 0, 2), Double.MIN_VALUE); [EOL]     Assert.assertEquals("Sum not expected", 7.0, StatUtils.sum(values, 2, 2), Double.MIN_VALUE); [EOL]     try { [EOL]         StatUtils.sum(values, 2, 3); [EOL]         Assert.fail("Expected RuntimeException"); [EOL]     } catch (RuntimeException e) { [EOL]     } [EOL]     try { [EOL]         StatUtils.sum(values, -1, 2); [EOL]         Assert.fail("Expected RuntimeException"); [EOL]     } catch (RuntimeException e) { [EOL]     } [EOL] } <line_num>: 81,115
@Test [EOL] public void testSumSq() { [EOL]     double[] x = null; [EOL]     try { [EOL]         StatUtils.sumSq(x); [EOL]         Assert.fail("null is not a valid data array."); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StatUtils.sumSq(x, 0, 4); [EOL]         Assert.fail("null is not a valid data array."); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     x = new double[] {}; [EOL]     TestUtils.assertEquals(0, StatUtils.sumSq(x), TOLERANCE); [EOL]     TestUtils.assertEquals(0, StatUtils.sumSq(x, 0, 0), TOLERANCE); [EOL]     x = new double[] { TWO }; [EOL]     TestUtils.assertEquals(4, StatUtils.sumSq(x), TOLERANCE); [EOL]     TestUtils.assertEquals(4, StatUtils.sumSq(x, 0, 1), TOLERANCE); [EOL]     x = new double[] { ONE, TWO, TWO, THREE }; [EOL]     TestUtils.assertEquals(18, StatUtils.sumSq(x), TOLERANCE); [EOL]     TestUtils.assertEquals(8, StatUtils.sumSq(x, 1, 2), TOLERANCE); [EOL] } <line_num>: 117,150
@Test [EOL] public void testProduct() { [EOL]     double[] x = null; [EOL]     try { [EOL]         StatUtils.product(x); [EOL]         Assert.fail("null is not a valid data array."); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StatUtils.product(x, 0, 4); [EOL]         Assert.fail("null is not a valid data array."); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     x = new double[] {}; [EOL]     TestUtils.assertEquals(1, StatUtils.product(x), TOLERANCE); [EOL]     TestUtils.assertEquals(1, StatUtils.product(x, 0, 0), TOLERANCE); [EOL]     x = new double[] { TWO }; [EOL]     TestUtils.assertEquals(TWO, StatUtils.product(x), TOLERANCE); [EOL]     TestUtils.assertEquals(TWO, StatUtils.product(x, 0, 1), TOLERANCE); [EOL]     x = new double[] { ONE, TWO, TWO, THREE }; [EOL]     TestUtils.assertEquals(12, StatUtils.product(x), TOLERANCE); [EOL]     TestUtils.assertEquals(4, StatUtils.product(x, 1, 2), TOLERANCE); [EOL] } <line_num>: 152,185
@Test [EOL] public void testSumLog() { [EOL]     double[] x = null; [EOL]     try { [EOL]         StatUtils.sumLog(x); [EOL]         Assert.fail("null is not a valid data array."); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StatUtils.sumLog(x, 0, 4); [EOL]         Assert.fail("null is not a valid data array."); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     x = new double[] {}; [EOL]     TestUtils.assertEquals(0, StatUtils.sumLog(x), TOLERANCE); [EOL]     TestUtils.assertEquals(0, StatUtils.sumLog(x, 0, 0), TOLERANCE); [EOL]     x = new double[] { TWO }; [EOL]     TestUtils.assertEquals(FastMath.log(TWO), StatUtils.sumLog(x), TOLERANCE); [EOL]     TestUtils.assertEquals(FastMath.log(TWO), StatUtils.sumLog(x, 0, 1), TOLERANCE); [EOL]     x = new double[] { ONE, TWO, TWO, THREE }; [EOL]     TestUtils.assertEquals(FastMath.log(ONE) + 2.0 * FastMath.log(TWO) + FastMath.log(THREE), StatUtils.sumLog(x), TOLERANCE); [EOL]     TestUtils.assertEquals(2.0 * FastMath.log(TWO), StatUtils.sumLog(x, 1, 2), TOLERANCE); [EOL] } <line_num>: 187,220
@Test [EOL] public void testMean() { [EOL]     double[] x = null; [EOL]     try { [EOL]         StatUtils.mean(x, 0, 4); [EOL]         Assert.fail("null is not a valid data array."); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     x = new double[] {}; [EOL]     TestUtils.assertEquals(Double.NaN, StatUtils.mean(x, 0, 0), TOLERANCE); [EOL]     x = new double[] { TWO }; [EOL]     TestUtils.assertEquals(TWO, StatUtils.mean(x, 0, 1), TOLERANCE); [EOL]     x = new double[] { ONE, TWO, TWO, THREE }; [EOL]     TestUtils.assertEquals(2.5, StatUtils.mean(x, 2, 2), TOLERANCE); [EOL] } <line_num>: 222,244
@Test [EOL] public void testVariance() { [EOL]     double[] x = null; [EOL]     try { [EOL]         StatUtils.variance(x, 0, 4); [EOL]         Assert.fail("null is not a valid data array."); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     x = new double[] {}; [EOL]     TestUtils.assertEquals(Double.NaN, StatUtils.variance(x, 0, 0), TOLERANCE); [EOL]     x = new double[] { TWO }; [EOL]     TestUtils.assertEquals(0.0, StatUtils.variance(x, 0, 1), TOLERANCE); [EOL]     x = new double[] { ONE, TWO, TWO, THREE }; [EOL]     TestUtils.assertEquals(0.5, StatUtils.variance(x, 2, 2), TOLERANCE); [EOL]     x = new double[] { ONE, TWO, TWO, THREE }; [EOL]     TestUtils.assertEquals(0.5, StatUtils.variance(x, 2.5, 2, 2), TOLERANCE); [EOL] } <line_num>: 246,272
@Test [EOL] public void testPopulationVariance() { [EOL]     double[] x = null; [EOL]     try { [EOL]         StatUtils.variance(x, 0, 4); [EOL]         Assert.fail("null is not a valid data array."); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     x = new double[] {}; [EOL]     TestUtils.assertEquals(Double.NaN, StatUtils.populationVariance(x, 0, 0), TOLERANCE); [EOL]     x = new double[] { TWO }; [EOL]     TestUtils.assertEquals(0.0, StatUtils.populationVariance(x, 0, 1), TOLERANCE); [EOL]     x = new double[] { ONE, TWO, TWO, THREE }; [EOL]     TestUtils.assertEquals(0.25, StatUtils.populationVariance(x, 0, 2), TOLERANCE); [EOL]     x = new double[] { ONE, TWO, TWO, THREE }; [EOL]     TestUtils.assertEquals(0.25, StatUtils.populationVariance(x, 2.5, 2, 2), TOLERANCE); [EOL] } <line_num>: 274,300
@Test [EOL] public void testMax() { [EOL]     double[] x = null; [EOL]     try { [EOL]         StatUtils.max(x, 0, 4); [EOL]         Assert.fail("null is not a valid data array."); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     x = new double[] {}; [EOL]     TestUtils.assertEquals(Double.NaN, StatUtils.max(x, 0, 0), TOLERANCE); [EOL]     x = new double[] { TWO }; [EOL]     TestUtils.assertEquals(TWO, StatUtils.max(x, 0, 1), TOLERANCE); [EOL]     x = new double[] { ONE, TWO, TWO, THREE }; [EOL]     TestUtils.assertEquals(THREE, StatUtils.max(x, 1, 3), TOLERANCE); [EOL]     x = new double[] { NAN, TWO, THREE }; [EOL]     TestUtils.assertEquals(THREE, StatUtils.max(x), TOLERANCE); [EOL]     x = new double[] { ONE, NAN, THREE }; [EOL]     TestUtils.assertEquals(THREE, StatUtils.max(x), TOLERANCE); [EOL]     x = new double[] { ONE, TWO, NAN }; [EOL]     TestUtils.assertEquals(TWO, StatUtils.max(x), TOLERANCE); [EOL]     x = new double[] { NAN, NAN, NAN }; [EOL]     TestUtils.assertEquals(NAN, StatUtils.max(x), TOLERANCE); [EOL] } <line_num>: 303,341
@Test [EOL] public void testMin() { [EOL]     double[] x = null; [EOL]     try { [EOL]         StatUtils.min(x, 0, 4); [EOL]         Assert.fail("null is not a valid data array."); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     x = new double[] {}; [EOL]     TestUtils.assertEquals(Double.NaN, StatUtils.min(x, 0, 0), TOLERANCE); [EOL]     x = new double[] { TWO }; [EOL]     TestUtils.assertEquals(TWO, StatUtils.min(x, 0, 1), TOLERANCE); [EOL]     x = new double[] { ONE, TWO, TWO, THREE }; [EOL]     TestUtils.assertEquals(TWO, StatUtils.min(x, 1, 3), TOLERANCE); [EOL]     x = new double[] { NAN, TWO, THREE }; [EOL]     TestUtils.assertEquals(TWO, StatUtils.min(x), TOLERANCE); [EOL]     x = new double[] { ONE, NAN, THREE }; [EOL]     TestUtils.assertEquals(ONE, StatUtils.min(x), TOLERANCE); [EOL]     x = new double[] { ONE, TWO, NAN }; [EOL]     TestUtils.assertEquals(ONE, StatUtils.min(x), TOLERANCE); [EOL]     x = new double[] { NAN, NAN, NAN }; [EOL]     TestUtils.assertEquals(NAN, StatUtils.min(x), TOLERANCE); [EOL] } <line_num>: 343,381
@Test [EOL] public void testPercentile() { [EOL]     double[] x = null; [EOL]     try { [EOL]         StatUtils.percentile(x, .25); [EOL]         Assert.fail("null is not a valid data array."); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StatUtils.percentile(x, 0, 4, 0.25); [EOL]         Assert.fail("null is not a valid data array."); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     x = new double[] {}; [EOL]     TestUtils.assertEquals(Double.NaN, StatUtils.percentile(x, 25), TOLERANCE); [EOL]     TestUtils.assertEquals(Double.NaN, StatUtils.percentile(x, 0, 0, 25), TOLERANCE); [EOL]     x = new double[] { TWO }; [EOL]     TestUtils.assertEquals(TWO, StatUtils.percentile(x, 25), TOLERANCE); [EOL]     TestUtils.assertEquals(TWO, StatUtils.percentile(x, 0, 1, 25), TOLERANCE); [EOL]     x = new double[] { ONE, TWO, TWO, THREE }; [EOL]     TestUtils.assertEquals(2.5, StatUtils.percentile(x, 70), TOLERANCE); [EOL]     TestUtils.assertEquals(2.5, StatUtils.percentile(x, 1, 3, 62.5), TOLERANCE); [EOL] } <line_num>: 383,416
@Test [EOL] public void testDifferenceStats() { [EOL]     double[] sample1 = { 1d, 2d, 3d, 4d }; [EOL]     double[] sample2 = { 1d, 3d, 4d, 2d }; [EOL]     double[] diff = { 0d, -1d, -1d, 2d }; [EOL]     double[] small = { 1d, 4d }; [EOL]     double meanDifference = StatUtils.meanDifference(sample1, sample2); [EOL]     Assert.assertEquals(StatUtils.sumDifference(sample1, sample2), StatUtils.sum(diff), TOLERANCE); [EOL]     Assert.assertEquals(meanDifference, StatUtils.mean(diff), TOLERANCE); [EOL]     Assert.assertEquals(StatUtils.varianceDifference(sample1, sample2, meanDifference), StatUtils.variance(diff), TOLERANCE); [EOL]     try { [EOL]         StatUtils.meanDifference(sample1, small); [EOL]         Assert.fail("Expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StatUtils.varianceDifference(sample1, small, meanDifference); [EOL]         Assert.fail("Expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         double[] single = { 1.0 }; [EOL]         StatUtils.varianceDifference(single, single, meanDifference); [EOL]         Assert.fail("Expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 418,448
@Test [EOL] public void testGeometricMean() { [EOL]     double[] test = null; [EOL]     try { [EOL]         StatUtils.geometricMean(test); [EOL]         Assert.fail("Expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     test = new double[] { 2, 4, 6, 8 }; [EOL]     Assert.assertEquals(FastMath.exp(0.25d * StatUtils.sumLog(test)), StatUtils.geometricMean(test), Double.MIN_VALUE); [EOL]     Assert.assertEquals(FastMath.exp(0.5 * StatUtils.sumLog(test, 0, 2)), StatUtils.geometricMean(test, 0, 2), Double.MIN_VALUE); [EOL] } <line_num>: 450,464
@Test [EOL] public void testNormalize1() { [EOL]     double[] sample = { 50, 100 }; [EOL]     double[] expectedSample = { -25 / Math.sqrt(1250), 25 / Math.sqrt(1250) }; [EOL]     double[] out = StatUtils.normalize(sample); [EOL]     for (int i = 0; i < out.length; i++) { [EOL]         Assert.assertTrue(Precision.equals(out[i], expectedSample[i], 1)); [EOL]     } [EOL] } <line_num>: 471,480
@Test [EOL] public void testNormalize2() { [EOL]     int length = 77; [EOL]     double[] sample = new double[length]; [EOL]     for (int i = 0; i < length; i++) { [EOL]         sample[i] = Math.random(); [EOL]     } [EOL]     double[] standardizedSample = StatUtils.normalize(sample); [EOL]     DescriptiveStatistics stats = new DescriptiveStatistics(); [EOL]     for (int i = 0; i < length; i++) { [EOL]         stats.addValue(standardizedSample[i]); [EOL]     } [EOL]     double distance = 1E-10; [EOL]     Assert.assertEquals(0.0, stats.getMean(), distance); [EOL]     Assert.assertEquals(1.0, stats.getStandardDeviation(), distance); [EOL] } <line_num>: 487,509
@Test [EOL] public void testMode() { [EOL]     final double[] singleMode = { 0, 1, 0, 2, 7, 11, 12 }; [EOL]     final double[] modeSingle = StatUtils.mode(singleMode); [EOL]     Assert.assertEquals(0, modeSingle[0], Double.MIN_VALUE); [EOL]     Assert.assertEquals(1, modeSingle.length); [EOL]     final double[] twoMode = { 0, 1, 2, 0, 2, 3, 7, 11 }; [EOL]     final double[] modeDouble = StatUtils.mode(twoMode); [EOL]     Assert.assertEquals(0, modeDouble[0], Double.MIN_VALUE); [EOL]     Assert.assertEquals(2, modeDouble[1], Double.MIN_VALUE); [EOL]     Assert.assertEquals(2, modeDouble.length); [EOL]     final double[] nanInfested = { 0, 0, 0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 2, 2, 2, 3, 5 }; [EOL]     final double[] modeNan = StatUtils.mode(nanInfested); [EOL]     Assert.assertEquals(0, modeNan[0], Double.MIN_VALUE); [EOL]     Assert.assertEquals(2, modeNan[1], Double.MIN_VALUE); [EOL]     Assert.assertEquals(2, modeNan.length); [EOL]     final double[] infInfested = { 0, 0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 2, 2, 3, 5 }; [EOL]     final double[] modeInf = StatUtils.mode(infInfested); [EOL]     Assert.assertEquals(Double.NEGATIVE_INFINITY, modeInf[0], Double.MIN_VALUE); [EOL]     Assert.assertEquals(0, modeInf[1], Double.MIN_VALUE); [EOL]     Assert.assertEquals(2, modeInf[2], Double.MIN_VALUE); [EOL]     Assert.assertEquals(Double.POSITIVE_INFINITY, modeInf[3], Double.MIN_VALUE); [EOL]     Assert.assertEquals(4, modeInf.length); [EOL]     final double[] noData = {}; [EOL]     final double[] modeNodata = StatUtils.mode(noData); [EOL]     Assert.assertEquals(0, modeNodata.length); [EOL]     final double[] nansOnly = { Double.NaN, Double.NaN }; [EOL]     final double[] modeNansOnly = StatUtils.mode(nansOnly); [EOL]     Assert.assertEquals(0, modeNansOnly.length); [EOL]     final double[] nullArray = null; [EOL]     try { [EOL]         StatUtils.mode(nullArray); [EOL]         Assert.fail("Expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 511,554
