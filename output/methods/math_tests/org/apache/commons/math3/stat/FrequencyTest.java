@Before [EOL] public void setUp() { [EOL]     f = new Frequency(); [EOL] } <line_num>: 49,52
@Test [EOL] public void testCounts() { [EOL]     Assert.assertEquals("total count", 0, f.getSumFreq()); [EOL]     f.addValue(ONE_LONG); [EOL]     f.addValue(TWO_LONG); [EOL]     f.addValue(1); [EOL]     f.addValue(ONE); [EOL]     Assert.assertEquals("one frequency count", 3, f.getCount(1)); [EOL]     Assert.assertEquals("two frequency count", 1, f.getCount(2)); [EOL]     Assert.assertEquals("three frequency count", 0, f.getCount(3)); [EOL]     Assert.assertEquals("total count", 4, f.getSumFreq()); [EOL]     Assert.assertEquals("zero cumulative frequency", 0, f.getCumFreq(0)); [EOL]     Assert.assertEquals("one cumulative frequency", 3, f.getCumFreq(1)); [EOL]     Assert.assertEquals("two cumulative frequency", 4, f.getCumFreq(2)); [EOL]     Assert.assertEquals("Integer argument cum freq", 4, f.getCumFreq(Integer.valueOf(2))); [EOL]     Assert.assertEquals("five cumulative frequency", 4, f.getCumFreq(5)); [EOL]     Assert.assertEquals("foo cumulative frequency", 0, f.getCumFreq("foo")); [EOL]     f.clear(); [EOL]     Assert.assertEquals("total count", 0, f.getSumFreq()); [EOL]     f.addValue("one"); [EOL]     f.addValue("One"); [EOL]     f.addValue("oNe"); [EOL]     f.addValue("Z"); [EOL]     Assert.assertEquals("one cumulative frequency", 1, f.getCount("one")); [EOL]     Assert.assertEquals("Z cumulative pct", 0.5, f.getCumPct("Z"), TOLERANCE); [EOL]     Assert.assertEquals("z cumulative pct", 1.0, f.getCumPct("z"), TOLERANCE); [EOL]     Assert.assertEquals("Ot cumulative pct", 0.25, f.getCumPct("Ot"), TOLERANCE); [EOL]     f.clear(); [EOL]     f = null; [EOL]     Frequency f = new Frequency(); [EOL]     f.addValue(1); [EOL]     f.addValue(Integer.valueOf(1)); [EOL]     f.addValue(Long.valueOf(1)); [EOL]     f.addValue(2); [EOL]     f.addValue(Integer.valueOf(-1)); [EOL]     Assert.assertEquals("1 count", 3, f.getCount(1)); [EOL]     Assert.assertEquals("1 count", 3, f.getCount(Integer.valueOf(1))); [EOL]     Assert.assertEquals("0 cum pct", 0.2, f.getCumPct(0), TOLERANCE); [EOL]     Assert.assertEquals("1 pct", 0.6, f.getPct(Integer.valueOf(1)), TOLERANCE); [EOL]     Assert.assertEquals("-2 cum pct", 0, f.getCumPct(-2), TOLERANCE); [EOL]     Assert.assertEquals("10 cum pct", 1, f.getCumPct(10), TOLERANCE); [EOL]     f = null; [EOL]     f = new Frequency(String.CASE_INSENSITIVE_ORDER); [EOL]     f.addValue("one"); [EOL]     f.addValue("One"); [EOL]     f.addValue("oNe"); [EOL]     f.addValue("Z"); [EOL]     Assert.assertEquals("one count", 3, f.getCount("one")); [EOL]     Assert.assertEquals("Z cumulative pct -- case insensitive", 1, f.getCumPct("Z"), TOLERANCE); [EOL]     Assert.assertEquals("z cumulative pct -- case insensitive", 1, f.getCumPct("z"), TOLERANCE); [EOL]     f = null; [EOL]     f = new Frequency(); [EOL]     Assert.assertEquals(0L, f.getCount('a')); [EOL]     Assert.assertEquals(0L, f.getCumFreq('b')); [EOL]     TestUtils.assertEquals(Double.NaN, f.getPct('a'), 0.0); [EOL]     TestUtils.assertEquals(Double.NaN, f.getCumPct('b'), 0.0); [EOL]     f.addValue('a'); [EOL]     f.addValue('b'); [EOL]     f.addValue('c'); [EOL]     f.addValue('d'); [EOL]     Assert.assertEquals(1L, f.getCount('a')); [EOL]     Assert.assertEquals(2L, f.getCumFreq('b')); [EOL]     Assert.assertEquals(0.25, f.getPct('a'), 0.0); [EOL]     Assert.assertEquals(0.5, f.getCumPct('b'), 0.0); [EOL]     Assert.assertEquals(1.0, f.getCumPct('e'), 0.0); [EOL] } <line_num>: 55,126
@Test [EOL] public void testPcts() { [EOL]     f.addValue(ONE_LONG); [EOL]     f.addValue(TWO_LONG); [EOL]     f.addValue(ONE); [EOL]     f.addValue(TWO); [EOL]     f.addValue(THREE_LONG); [EOL]     f.addValue(THREE_LONG); [EOL]     f.addValue(3); [EOL]     f.addValue(THREEE); [EOL]     Assert.assertEquals("one pct", 0.25, f.getPct(1), TOLERANCE); [EOL]     Assert.assertEquals("two pct", 0.25, f.getPct(Long.valueOf(2)), TOLERANCE); [EOL]     Assert.assertEquals("three pct", 0.5, f.getPct(THREE_LONG), TOLERANCE); [EOL]     Assert.assertEquals("five pct", 0, f.getPct(5), TOLERANCE); [EOL]     Assert.assertEquals("foo pct", 0, f.getPct("foo"), TOLERANCE); [EOL]     Assert.assertEquals("one cum pct", 0.25, f.getCumPct(1), TOLERANCE); [EOL]     Assert.assertEquals("two cum pct", 0.50, f.getCumPct(Long.valueOf(2)), TOLERANCE); [EOL]     Assert.assertEquals("Integer argument", 0.50, f.getCumPct(Integer.valueOf(2)), TOLERANCE); [EOL]     Assert.assertEquals("three cum pct", 1.0, f.getCumPct(THREE_LONG), TOLERANCE); [EOL]     Assert.assertEquals("five cum pct", 1.0, f.getCumPct(5), TOLERANCE); [EOL]     Assert.assertEquals("zero cum pct", 0.0, f.getCumPct(0), TOLERANCE); [EOL]     Assert.assertEquals("foo cum pct", 0, f.getCumPct("foo"), TOLERANCE); [EOL] } <line_num>: 129,151
@Test [EOL] public void testAdd() { [EOL]     char aChar = 'a'; [EOL]     char bChar = 'b'; [EOL]     String aString = "a"; [EOL]     f.addValue(aChar); [EOL]     f.addValue(bChar); [EOL]     try { [EOL]         f.addValue(aString); [EOL]         Assert.fail("Expecting IllegalArgumentException"); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.addValue(2); [EOL]         Assert.fail("Expecting IllegalArgumentException"); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     Assert.assertEquals("a pct", 0.5, f.getPct(aChar), TOLERANCE); [EOL]     Assert.assertEquals("b cum pct", 1.0, f.getCumPct(bChar), TOLERANCE); [EOL]     Assert.assertEquals("a string pct", 0.0, f.getPct(aString), TOLERANCE); [EOL]     Assert.assertEquals("a string cum pct", 0.0, f.getCumPct(aString), TOLERANCE); [EOL]     f = new Frequency(); [EOL]     f.addValue("One"); [EOL]     try { [EOL]         f.addValue(new Integer("One")); [EOL]         Assert.fail("Expecting IllegalArgumentException"); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 154,186
@Test [EOL] public void testEmptyTable() { [EOL]     Assert.assertEquals("freq sum, empty table", 0, f.getSumFreq()); [EOL]     Assert.assertEquals("count, empty table", 0, f.getCount(0)); [EOL]     Assert.assertEquals("count, empty table", 0, f.getCount(Integer.valueOf(0))); [EOL]     Assert.assertEquals("cum freq, empty table", 0, f.getCumFreq(0)); [EOL]     Assert.assertEquals("cum freq, empty table", 0, f.getCumFreq("x")); [EOL]     Assert.assertTrue("pct, empty table", Double.isNaN(f.getPct(0))); [EOL]     Assert.assertTrue("pct, empty table", Double.isNaN(f.getPct(Integer.valueOf(0)))); [EOL]     Assert.assertTrue("cum pct, empty table", Double.isNaN(f.getCumPct(0))); [EOL]     Assert.assertTrue("cum pct, empty table", Double.isNaN(f.getCumPct(Integer.valueOf(0)))); [EOL] } <line_num>: 189,200
@Test [EOL] public void testNonComparableCumPct() { [EOL]     f.addValue("a"); [EOL]     Assert.assertEquals("cum freq, single entry", 1.0d, f.getCumPct("a"), TOLERANCE); [EOL]     Assert.assertEquals("cum freq, single entry non comparable", 0.0d, f.getCumPct(100), TOLERANCE); [EOL] } <line_num>: 202,207
@Test [EOL] public void testNonComparablePct() { [EOL]     f.addValue("a"); [EOL]     Assert.assertEquals("cum freq, single entry", 1.0d, f.getPct("a"), TOLERANCE); [EOL]     Assert.assertEquals("cum freq, single entry non comparable", 0.0d, f.getPct(100), TOLERANCE); [EOL] } <line_num>: 209,214
@Test [EOL] public void testToString() throws Exception { [EOL]     f.addValue(ONE_LONG); [EOL]     f.addValue(TWO_LONG); [EOL]     f.addValue(ONE); [EOL]     f.addValue(TWO); [EOL]     String s = f.toString(); [EOL]     Assert.assertNotNull(s); [EOL]     BufferedReader reader = new BufferedReader(new StringReader(s)); [EOL]     String line = reader.readLine(); [EOL]     Assert.assertNotNull(line); [EOL]     line = reader.readLine(); [EOL]     Assert.assertNotNull(line); [EOL]     line = reader.readLine(); [EOL]     Assert.assertNotNull(line); [EOL]     line = reader.readLine(); [EOL]     Assert.assertNull(line); [EOL] } <line_num>: 219,241
@Test [EOL] public void testIntegerValues() { [EOL]     Comparable<?> obj1 = null; [EOL]     obj1 = Integer.valueOf(1); [EOL]     Integer int1 = Integer.valueOf(1); [EOL]     f.addValue(obj1); [EOL]     f.addValue(int1); [EOL]     f.addValue(2); [EOL]     f.addValue(Long.valueOf(2)); [EOL]     Assert.assertEquals("Integer 1 count", 2, f.getCount(1)); [EOL]     Assert.assertEquals("Integer 1 count", 2, f.getCount(Integer.valueOf(1))); [EOL]     Assert.assertEquals("Integer 1 count", 2, f.getCount(Long.valueOf(1))); [EOL]     Assert.assertEquals("Integer 1 cumPct", 0.5, f.getCumPct(1), TOLERANCE); [EOL]     Assert.assertEquals("Integer 1 cumPct", 0.5, f.getCumPct(Long.valueOf(1)), TOLERANCE); [EOL]     Assert.assertEquals("Integer 1 cumPct", 0.5, f.getCumPct(Integer.valueOf(1)), TOLERANCE); [EOL]     Iterator<?> it = f.valuesIterator(); [EOL]     while (it.hasNext()) { [EOL]         Assert.assertTrue(it.next() instanceof Long); [EOL]     } [EOL] } <line_num>: 243,262
@Test [EOL] public void testSerial() { [EOL]     f.addValue(ONE_LONG); [EOL]     f.addValue(TWO_LONG); [EOL]     f.addValue(ONE); [EOL]     f.addValue(TWO); [EOL]     Assert.assertEquals(f, TestUtils.serializeAndRecover(f)); [EOL] } <line_num>: 264,271
@Test [EOL] public void testGetUniqueCount() { [EOL]     Assert.assertEquals(0, f.getUniqueCount()); [EOL]     f.addValue(ONE_LONG); [EOL]     Assert.assertEquals(1, f.getUniqueCount()); [EOL]     f.addValue(ONE_LONG); [EOL]     Assert.assertEquals(1, f.getUniqueCount()); [EOL]     f.addValue(TWO); [EOL]     Assert.assertEquals(2, f.getUniqueCount()); [EOL] } <line_num>: 273,282
@Test [EOL] public void testIncrement() { [EOL]     Assert.assertEquals(0, f.getUniqueCount()); [EOL]     f.incrementValue(ONE_LONG, 1); [EOL]     Assert.assertEquals(1, f.getCount(ONE_LONG)); [EOL]     f.incrementValue(ONE_LONG, 4); [EOL]     Assert.assertEquals(5, f.getCount(ONE_LONG)); [EOL]     f.incrementValue(ONE_LONG, -5); [EOL]     Assert.assertEquals(0, f.getCount(ONE_LONG)); [EOL] } <line_num>: 284,295
@Test [EOL] public void testMerge() { [EOL]     Assert.assertEquals(0, f.getUniqueCount()); [EOL]     f.addValue(ONE_LONG); [EOL]     f.addValue(TWO_LONG); [EOL]     f.addValue(ONE); [EOL]     f.addValue(TWO); [EOL]     Assert.assertEquals(2, f.getUniqueCount()); [EOL]     Assert.assertEquals(2, f.getCount(ONE)); [EOL]     Assert.assertEquals(2, f.getCount(TWO)); [EOL]     Frequency g = new Frequency(); [EOL]     g.addValue(ONE_LONG); [EOL]     g.addValue(THREE_LONG); [EOL]     g.addValue(THREEE); [EOL]     Assert.assertEquals(2, g.getUniqueCount()); [EOL]     Assert.assertEquals(1, g.getCount(ONE)); [EOL]     Assert.assertEquals(2, g.getCount(THREEE)); [EOL]     f.merge(g); [EOL]     Assert.assertEquals(3, f.getUniqueCount()); [EOL]     Assert.assertEquals(3, f.getCount(ONE)); [EOL]     Assert.assertEquals(2, f.getCount(TWO)); [EOL]     Assert.assertEquals(2, f.getCount(THREEE)); [EOL] } <line_num>: 297,324
@Test [EOL] public void testMergeCollection() { [EOL]     Assert.assertEquals(0, f.getUniqueCount()); [EOL]     f.addValue(ONE_LONG); [EOL]     Assert.assertEquals(1, f.getUniqueCount()); [EOL]     Assert.assertEquals(1, f.getCount(ONE)); [EOL]     Assert.assertEquals(0, f.getCount(TWO)); [EOL]     Frequency g = new Frequency(); [EOL]     g.addValue(TWO_LONG); [EOL]     Frequency h = new Frequency(); [EOL]     h.addValue(THREE_LONG); [EOL]     List<Frequency> coll = new ArrayList<Frequency>(); [EOL]     coll.add(g); [EOL]     coll.add(h); [EOL]     f.merge(coll); [EOL]     Assert.assertEquals(3, f.getUniqueCount()); [EOL]     Assert.assertEquals(1, f.getCount(ONE)); [EOL]     Assert.assertEquals(1, f.getCount(TWO)); [EOL]     Assert.assertEquals(1, f.getCount(THREEE)); [EOL] } <line_num>: 326,350
@Test [EOL] public void testMode() { [EOL]     List<Comparable<?>> mode; [EOL]     mode = f.getMode(); [EOL]     Assert.assertEquals(0, mode.size()); [EOL]     f.addValue("3"); [EOL]     mode = f.getMode(); [EOL]     Assert.assertEquals(1, mode.size()); [EOL]     Assert.assertEquals("3", mode.get(0)); [EOL]     f.addValue("2"); [EOL]     mode = f.getMode(); [EOL]     Assert.assertEquals(2, mode.size()); [EOL]     Assert.assertEquals("2", mode.get(0)); [EOL]     Assert.assertEquals("3", mode.get(1)); [EOL]     f.addValue("2"); [EOL]     mode = f.getMode(); [EOL]     Assert.assertEquals(1, mode.size()); [EOL]     Assert.assertEquals("2", mode.get(0)); [EOL]     Assert.assertFalse(mode.contains("1")); [EOL]     Assert.assertTrue(mode.contains("2")); [EOL]     try { [EOL]         f.addValue(Double.valueOf(Double.NaN)); [EOL]         Assert.fail("Expected MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 352,382
@Test [EOL] public void testModeDoubleNan() { [EOL]     List<Comparable<?>> mode; [EOL]     f.addValue(Double.valueOf(Double.NaN)); [EOL]     f.addValue(Double.valueOf(Double.NaN)); [EOL]     f.addValue(Double.valueOf(Double.NaN)); [EOL]     f.addValue(Double.valueOf(Double.NEGATIVE_INFINITY)); [EOL]     f.addValue(Double.valueOf(Double.POSITIVE_INFINITY)); [EOL]     f.addValue(Double.valueOf(Double.NEGATIVE_INFINITY)); [EOL]     f.addValue(Double.valueOf(Double.POSITIVE_INFINITY)); [EOL]     f.addValue(Double.valueOf(Double.NEGATIVE_INFINITY)); [EOL]     f.addValue(Double.valueOf(Double.POSITIVE_INFINITY)); [EOL]     mode = f.getMode(); [EOL]     Assert.assertEquals(3, mode.size()); [EOL]     Assert.assertEquals(Double.valueOf(Double.NEGATIVE_INFINITY), mode.get(0)); [EOL]     Assert.assertEquals(Double.valueOf(Double.POSITIVE_INFINITY), mode.get(1)); [EOL]     Assert.assertEquals(Double.valueOf(Double.NaN), mode.get(2)); [EOL]     try { [EOL]         f.addValue(Float.valueOf(Float.NaN)); [EOL]         Assert.fail("Expected MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 384,407
@Test [EOL] public void testModeFloatNan() { [EOL]     List<Comparable<?>> mode; [EOL]     f.addValue(Float.valueOf(Float.NaN)); [EOL]     f.addValue(Float.valueOf(Float.NaN)); [EOL]     f.addValue(Float.valueOf(Float.NaN)); [EOL]     f.addValue(Float.valueOf(Float.NEGATIVE_INFINITY)); [EOL]     f.addValue(Float.valueOf(Float.POSITIVE_INFINITY)); [EOL]     f.addValue(Float.valueOf(Float.NEGATIVE_INFINITY)); [EOL]     f.addValue(Float.valueOf(Float.POSITIVE_INFINITY)); [EOL]     f.addValue(Float.valueOf(Float.NEGATIVE_INFINITY)); [EOL]     f.addValue(Float.valueOf(Float.POSITIVE_INFINITY)); [EOL]     mode = f.getMode(); [EOL]     Assert.assertEquals(3, mode.size()); [EOL]     Assert.assertEquals(Float.valueOf(Float.NEGATIVE_INFINITY), mode.get(0)); [EOL]     Assert.assertEquals(Float.valueOf(Float.POSITIVE_INFINITY), mode.get(1)); [EOL]     Assert.assertEquals(Float.valueOf(Float.NaN), mode.get(2)); [EOL]     try { [EOL]         f.addValue(Double.valueOf(Double.NaN)); [EOL]         Assert.fail("Expected MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 409,432
