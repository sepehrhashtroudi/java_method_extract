protected SummaryStatistics createSummaryStatistics() { [EOL]     return new SummaryStatistics(); [EOL] } <line_num>: 52,54
@Test [EOL] public void testStats() { [EOL]     SummaryStatistics u = createSummaryStatistics(); [EOL]     Assert.assertEquals("total count", 0, u.getN(), tolerance); [EOL]     u.addValue(one); [EOL]     u.addValue(twoF); [EOL]     u.addValue(twoL); [EOL]     u.addValue(three); [EOL]     Assert.assertEquals("N", n, u.getN(), tolerance); [EOL]     Assert.assertEquals("sum", sum, u.getSum(), tolerance); [EOL]     Assert.assertEquals("sumsq", sumSq, u.getSumsq(), tolerance); [EOL]     Assert.assertEquals("var", var, u.getVariance(), tolerance); [EOL]     Assert.assertEquals("population var", popVar, u.getPopulationVariance(), tolerance); [EOL]     Assert.assertEquals("std", std, u.getStandardDeviation(), tolerance); [EOL]     Assert.assertEquals("mean", mean, u.getMean(), tolerance); [EOL]     Assert.assertEquals("min", min, u.getMin(), tolerance); [EOL]     Assert.assertEquals("max", max, u.getMax(), tolerance); [EOL]     u.clear(); [EOL]     Assert.assertEquals("total count", 0, u.getN(), tolerance); [EOL] } <line_num>: 57,76
@Test [EOL] public void testN0andN1Conditions() { [EOL]     SummaryStatistics u = createSummaryStatistics(); [EOL]     Assert.assertTrue("Mean of n = 0 set should be NaN", Double.isNaN(u.getMean())); [EOL]     Assert.assertTrue("Standard Deviation of n = 0 set should be NaN", Double.isNaN(u.getStandardDeviation())); [EOL]     Assert.assertTrue("Variance of n = 0 set should be NaN", Double.isNaN(u.getVariance())); [EOL]     u.addValue(one); [EOL]     Assert.assertTrue("mean should be one (n = 1)", u.getMean() == one); [EOL]     Assert.assertTrue("geometric should be one (n = 1) instead it is " + u.getGeometricMean(), u.getGeometricMean() == one); [EOL]     Assert.assertTrue("Std should be zero (n = 1)", u.getStandardDeviation() == 0.0); [EOL]     Assert.assertTrue("variance should be zero (n = 1)", u.getVariance() == 0.0); [EOL]     u.addValue(twoF); [EOL]     Assert.assertTrue("Std should not be zero (n = 2)", u.getStandardDeviation() != 0.0); [EOL]     Assert.assertTrue("variance should not be zero (n = 2)", u.getVariance() != 0.0); [EOL] } <line_num>: 78,106
@Test [EOL] public void testProductAndGeometricMean() { [EOL]     SummaryStatistics u = createSummaryStatistics(); [EOL]     u.addValue(1.0); [EOL]     u.addValue(2.0); [EOL]     u.addValue(3.0); [EOL]     u.addValue(4.0); [EOL]     Assert.assertEquals("Geometric mean not expected", 2.213364, u.getGeometricMean(), 0.00001); [EOL] } <line_num>: 108,118
@Test [EOL] public void testNaNContracts() { [EOL]     SummaryStatistics u = createSummaryStatistics(); [EOL]     Assert.assertTrue("mean not NaN", Double.isNaN(u.getMean())); [EOL]     Assert.assertTrue("min not NaN", Double.isNaN(u.getMin())); [EOL]     Assert.assertTrue("std dev not NaN", Double.isNaN(u.getStandardDeviation())); [EOL]     Assert.assertTrue("var not NaN", Double.isNaN(u.getVariance())); [EOL]     Assert.assertTrue("geom mean not NaN", Double.isNaN(u.getGeometricMean())); [EOL]     u.addValue(1.0); [EOL]     Assert.assertEquals("mean not expected", 1.0, u.getMean(), Double.MIN_VALUE); [EOL]     Assert.assertEquals("variance not expected", 0.0, u.getVariance(), Double.MIN_VALUE); [EOL]     Assert.assertEquals("geometric mean not expected", 1.0, u.getGeometricMean(), Double.MIN_VALUE); [EOL]     u.addValue(-1.0); [EOL]     Assert.assertTrue("geom mean not NaN", Double.isNaN(u.getGeometricMean())); [EOL]     u.addValue(0.0); [EOL]     Assert.assertTrue("geom mean not NaN", Double.isNaN(u.getGeometricMean())); [EOL] } <line_num>: 120,147
@Test [EOL] public void testGetSummary() { [EOL]     SummaryStatistics u = createSummaryStatistics(); [EOL]     StatisticalSummary summary = u.getSummary(); [EOL]     verifySummary(u, summary); [EOL]     u.addValue(1d); [EOL]     summary = u.getSummary(); [EOL]     verifySummary(u, summary); [EOL]     u.addValue(2d); [EOL]     summary = u.getSummary(); [EOL]     verifySummary(u, summary); [EOL]     u.addValue(2d); [EOL]     summary = u.getSummary(); [EOL]     verifySummary(u, summary); [EOL] } <line_num>: 149,163
@Test [EOL] public void testSerialization() { [EOL]     SummaryStatistics u = createSummaryStatistics(); [EOL]     TestUtils.checkSerializedEquality(u); [EOL]     SummaryStatistics s = (SummaryStatistics) TestUtils.serializeAndRecover(u); [EOL]     StatisticalSummary summary = s.getSummary(); [EOL]     verifySummary(u, summary); [EOL]     u.addValue(2d); [EOL]     u.addValue(1d); [EOL]     u.addValue(3d); [EOL]     u.addValue(4d); [EOL]     u.addValue(5d); [EOL]     TestUtils.checkSerializedEquality(u); [EOL]     s = (SummaryStatistics) TestUtils.serializeAndRecover(u); [EOL]     summary = s.getSummary(); [EOL]     verifySummary(u, summary); [EOL] } <line_num>: 165,187
@Test [EOL] public void testEqualsAndHashCode() { [EOL]     SummaryStatistics u = createSummaryStatistics(); [EOL]     SummaryStatistics t = null; [EOL]     int emptyHash = u.hashCode(); [EOL]     Assert.assertTrue("reflexive", u.equals(u)); [EOL]     Assert.assertFalse("non-null compared to null", u.equals(t)); [EOL]     Assert.assertFalse("wrong type", u.equals(Double.valueOf(0))); [EOL]     t = createSummaryStatistics(); [EOL]     Assert.assertTrue("empty instances should be equal", t.equals(u)); [EOL]     Assert.assertTrue("empty instances should be equal", u.equals(t)); [EOL]     Assert.assertEquals("empty hash code", emptyHash, t.hashCode()); [EOL]     u.addValue(2d); [EOL]     u.addValue(1d); [EOL]     u.addValue(3d); [EOL]     u.addValue(4d); [EOL]     Assert.assertFalse("different n's should make instances not equal", t.equals(u)); [EOL]     Assert.assertFalse("different n's should make instances not equal", u.equals(t)); [EOL]     Assert.assertTrue("different n's should make hashcodes different", u.hashCode() != t.hashCode()); [EOL]     t.addValue(2d); [EOL]     t.addValue(1d); [EOL]     t.addValue(3d); [EOL]     t.addValue(4d); [EOL]     Assert.assertTrue("summaries based on same data should be equal", t.equals(u)); [EOL]     Assert.assertTrue("summaries based on same data should be equal", u.equals(t)); [EOL]     Assert.assertEquals("summaries based on same data should have same hashcodes", u.hashCode(), t.hashCode()); [EOL]     u.clear(); [EOL]     t.clear(); [EOL]     Assert.assertTrue("empty instances should be equal", t.equals(u)); [EOL]     Assert.assertTrue("empty instances should be equal", u.equals(t)); [EOL]     Assert.assertEquals("empty hash code", emptyHash, t.hashCode()); [EOL]     Assert.assertEquals("empty hash code", emptyHash, u.hashCode()); [EOL] } <line_num>: 189,229
@Test [EOL] public void testCopy() { [EOL]     SummaryStatistics u = createSummaryStatistics(); [EOL]     u.addValue(2d); [EOL]     u.addValue(1d); [EOL]     u.addValue(3d); [EOL]     u.addValue(4d); [EOL]     SummaryStatistics v = new SummaryStatistics(u); [EOL]     Assert.assertEquals(u, v); [EOL]     Assert.assertEquals(v, u); [EOL]     u.addValue(7d); [EOL]     u.addValue(9d); [EOL]     u.addValue(11d); [EOL]     u.addValue(23d); [EOL]     v.addValue(7d); [EOL]     v.addValue(9d); [EOL]     v.addValue(11d); [EOL]     v.addValue(23d); [EOL]     Assert.assertEquals(u, v); [EOL]     Assert.assertEquals(v, u); [EOL]     u.clear(); [EOL]     u.setSumImpl(new Sum()); [EOL]     SummaryStatistics.copy(u, v); [EOL]     Assert.assertEquals(u.getSumImpl(), v.getSumImpl()); [EOL] } <line_num>: 231,260
private void verifySummary(SummaryStatistics u, StatisticalSummary s) { [EOL]     Assert.assertEquals("N", s.getN(), u.getN()); [EOL]     TestUtils.assertEquals("sum", s.getSum(), u.getSum(), tolerance); [EOL]     TestUtils.assertEquals("var", s.getVariance(), u.getVariance(), tolerance); [EOL]     TestUtils.assertEquals("std", s.getStandardDeviation(), u.getStandardDeviation(), tolerance); [EOL]     TestUtils.assertEquals("mean", s.getMean(), u.getMean(), tolerance); [EOL]     TestUtils.assertEquals("min", s.getMin(), u.getMin(), tolerance); [EOL]     TestUtils.assertEquals("max", s.getMax(), u.getMax(), tolerance); [EOL] } <line_num>: 262,270
@Test [EOL] public void testSetterInjection() { [EOL]     SummaryStatistics u = createSummaryStatistics(); [EOL]     u.setMeanImpl(new Sum()); [EOL]     u.setSumLogImpl(new Sum()); [EOL]     u.addValue(1); [EOL]     u.addValue(3); [EOL]     Assert.assertEquals(4, u.getMean(), 1E-14); [EOL]     Assert.assertEquals(4, u.getSumOfLogs(), 1E-14); [EOL]     Assert.assertEquals(FastMath.exp(2), u.getGeometricMean(), 1E-14); [EOL]     u.clear(); [EOL]     u.addValue(1); [EOL]     u.addValue(2); [EOL]     Assert.assertEquals(3, u.getMean(), 1E-14); [EOL]     u.clear(); [EOL]     u.setMeanImpl(new Mean()); [EOL] } <line_num>: 272,288
@Test [EOL] public void testSetterIllegalState() { [EOL]     SummaryStatistics u = createSummaryStatistics(); [EOL]     u.addValue(1); [EOL]     u.addValue(3); [EOL]     try { [EOL]         u.setMeanImpl(new Sum()); [EOL]         Assert.fail("Expecting IllegalStateException"); [EOL]     } catch (IllegalStateException ex) { [EOL]     } [EOL] } <line_num>: 290,301
@Test [EOL] public void testOverrideVarianceWithMathClass() { [EOL]     double[] scores = { 1, 2, 3, 4 }; [EOL]     SummaryStatistics stats = new SummaryStatistics(); [EOL]     stats.setVarianceImpl(new Variance(false)); [EOL]     for (double i : scores) { [EOL]         stats.addValue(i); [EOL]     } [EOL]     Assert.assertEquals((new Variance(false)).evaluate(scores), stats.getVariance(), 0); [EOL] } <line_num>: 307,316
@Test [EOL] public void testOverrideMeanWithMathClass() { [EOL]     double[] scores = { 1, 2, 3, 4 }; [EOL]     SummaryStatistics stats = new SummaryStatistics(); [EOL]     stats.setMeanImpl(new Mean()); [EOL]     for (double i : scores) { [EOL]         stats.addValue(i); [EOL]     } [EOL]     Assert.assertEquals((new Mean()).evaluate(scores), stats.getMean(), 0); [EOL] } <line_num>: 318,327
@Test [EOL] public void testOverrideGeoMeanWithMathClass() { [EOL]     double[] scores = { 1, 2, 3, 4 }; [EOL]     SummaryStatistics stats = new SummaryStatistics(); [EOL]     stats.setGeoMeanImpl(new GeometricMean()); [EOL]     for (double i : scores) { [EOL]         stats.addValue(i); [EOL]     } [EOL]     Assert.assertEquals((new GeometricMean()).evaluate(scores), stats.getGeometricMean(), 0); [EOL] } <line_num>: 329,338
