@Test [EOL] public void testLongly() { [EOL]     RealMatrix matrix = createRealMatrix(longleyData, 16, 7); [EOL]     RealMatrix covarianceMatrix = new Covariance(matrix).getCovarianceMatrix(); [EOL]     double[] rData = new double[] { 12333921.73333333246, 3.679666000000000e+04, 343330206.333333313, 1649102.666666666744, 1117681.066666666651, 23461965.733333334, 16240.93333333333248, 36796.66000000000, 1.164576250000000e+02, 1063604.115416667, 6258.666250000000, 3490.253750000000, 73503.000000000, 50.92333333333334, 343330206.33333331347, 1.063604115416667e+06, 9879353659.329166412, 56124369.854166664183, 30880428.345833335072, 685240944.600000024, 470977.90000000002328, 1649102.66666666674, 6.258666250000000e+03, 56124369.854166664, 873223.429166666698, -115378.762499999997, 4462741.533333333, 2973.03333333333330, 1117681.06666666665, 3.490253750000000e+03, 30880428.345833335, -115378.762499999997, 484304.095833333326, 1764098.133333333, 1382.43333333333339, 23461965.73333333433, 7.350300000000000e+04, 685240944.600000024, 4462741.533333333209, 1764098.133333333302, 48387348.933333330, 32917.40000000000146, 16240.93333333333, 5.092333333333334e+01, 470977.900000000, 2973.033333333333, 1382.433333333333, 32917.40000000, 22.66666666666667 }; [EOL]     TestUtils.assertEquals("covariance matrix", createRealMatrix(rData, 7, 7), covarianceMatrix, 10E-9); [EOL] } <line_num>: 110,133
@Test [EOL] public void testSwissFertility() { [EOL]     RealMatrix matrix = createRealMatrix(swissData, 47, 5); [EOL]     RealMatrix covarianceMatrix = new Covariance(matrix).getCovarianceMatrix(); [EOL]     double[] rData = new double[] { 156.0424976873265, 100.1691489361702, -64.36692876965772, -79.7295097132285, 241.5632030527289, 100.169148936170251, 515.7994172062905, -124.39283071230344, -139.6574005550416, 379.9043755781684, -64.3669287696577, -124.3928307123034, 63.64662349676226, 53.5758556891767, -190.5606105457909, -79.7295097132285, -139.6574005550416, 53.57585568917669, 92.4560592044403, -61.6988297872340, 241.5632030527289, 379.9043755781684, -190.56061054579092, -61.6988297872340, 1739.2945371877890 }; [EOL]     TestUtils.assertEquals("covariance matrix", createRealMatrix(rData, 5, 5), covarianceMatrix, 10E-13); [EOL] } <line_num>: 139,152
@Test [EOL] public void testConstant() { [EOL]     double[] noVariance = new double[] { 1, 1, 1, 1 }; [EOL]     double[] values = new double[] { 1, 2, 3, 4 }; [EOL]     Assert.assertEquals(0d, new Covariance().covariance(noVariance, values, true), Double.MIN_VALUE); [EOL]     Assert.assertEquals(0d, new Covariance().covariance(noVariance, noVariance, true), Double.MIN_VALUE); [EOL] } <line_num>: 157,163
@Test [EOL] public void testOneColumn() { [EOL]     RealMatrix cov = new Covariance(new double[][] { { 1 }, { 2 } }, false).getCovarianceMatrix(); [EOL]     Assert.assertEquals(1, cov.getRowDimension()); [EOL]     Assert.assertEquals(1, cov.getColumnDimension()); [EOL]     Assert.assertEquals(0.25, cov.getEntry(0, 0), 1.0e-15); [EOL] } <line_num>: 168,174
@Test [EOL] public void testInsufficientData() { [EOL]     double[] one = new double[] { 1 }; [EOL]     double[] two = new double[] { 2 }; [EOL]     try { [EOL]         new Covariance().covariance(one, two, false); [EOL]         Assert.fail("Expecting IllegalArgumentException"); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new Covariance(new double[][] { {}, {} }); [EOL]         Assert.fail("Expecting NotStrictlyPositiveException"); [EOL]     } catch (NotStrictlyPositiveException ex) { [EOL]     } [EOL] } <line_num>: 179,195
@Test [EOL] public void testConsistency() { [EOL]     final RealMatrix matrix = createRealMatrix(swissData, 47, 5); [EOL]     final RealMatrix covarianceMatrix = new Covariance(matrix).getCovarianceMatrix(); [EOL]     Variance variance = new Variance(); [EOL]     for (int i = 0; i < 5; i++) { [EOL]         Assert.assertEquals(variance.evaluate(matrix.getColumn(i)), covarianceMatrix.getEntry(i, i), 10E-14); [EOL]     } [EOL]     Assert.assertEquals(covarianceMatrix.getEntry(2, 3), new Covariance().covariance(matrix.getColumn(2), matrix.getColumn(3), true), 10E-14); [EOL]     Assert.assertEquals(covarianceMatrix.getEntry(2, 3), covarianceMatrix.getEntry(3, 2), Double.MIN_VALUE); [EOL]     RealMatrix repeatedColumns = new Array2DRowRealMatrix(47, 3); [EOL]     for (int i = 0; i < 3; i++) { [EOL]         repeatedColumns.setColumnMatrix(i, matrix.getColumnMatrix(0)); [EOL]     } [EOL]     RealMatrix repeatedCovarianceMatrix = new Covariance(repeatedColumns).getCovarianceMatrix(); [EOL]     double columnVariance = variance.evaluate(matrix.getColumn(0)); [EOL]     for (int i = 0; i < 3; i++) { [EOL]         for (int j = 0; j < 3; j++) { [EOL]             Assert.assertEquals(columnVariance, repeatedCovarianceMatrix.getEntry(i, j), 10E-14); [EOL]         } [EOL]     } [EOL]     double[][] data = matrix.getData(); [EOL]     TestUtils.assertEquals("Covariances", covarianceMatrix, new Covariance().computeCovarianceMatrix(data), Double.MIN_VALUE); [EOL]     TestUtils.assertEquals("Covariances", covarianceMatrix, new Covariance().computeCovarianceMatrix(data, true), Double.MIN_VALUE); [EOL]     double[] x = data[0]; [EOL]     double[] y = data[1]; [EOL]     Assert.assertEquals(new Covariance().covariance(x, y), new Covariance().covariance(x, y, true), Double.MIN_VALUE); [EOL] } <line_num>: 201,241
protected RealMatrix createRealMatrix(double[] data, int nRows, int nCols) { [EOL]     double[][] matrixData = new double[nRows][nCols]; [EOL]     int ptr = 0; [EOL]     for (int i = 0; i < nRows; i++) { [EOL]         System.arraycopy(data, ptr, matrixData[i], 0, nCols); [EOL]         ptr += nCols; [EOL]     } [EOL]     return new Array2DRowRealMatrix(matrixData); [EOL] } <line_num>: 243,251
