@Test [EOL] public void testLonglySimpleVar() { [EOL]     double rCov = 12333921.73333333246; [EOL]     StorelessBivariateCovariance cov = new StorelessBivariateCovariance(); [EOL]     for (int i = 0; i < longleyDataSimple.length; i++) { [EOL]         cov.increment(longleyDataSimple[i][0], longleyDataSimple[i][0]); [EOL]     } [EOL]     TestUtils.assertEquals("simple covariance test", rCov, cov.getResult(), 10E-7); [EOL] } <line_num>: 116,124
@Test [EOL] public void testLonglySimpleCov() { [EOL]     double rCov = 36796.660000; [EOL]     StorelessBivariateCovariance cov = new StorelessBivariateCovariance(); [EOL]     for (int i = 0; i < longleyDataSimple.length; i++) { [EOL]         cov.increment(longleyDataSimple[i][0], longleyDataSimple[i][1]); [EOL]     } [EOL]     TestUtils.assertEquals("simple covariance test", rCov, cov.getResult(), 10E-7); [EOL] } <line_num>: 126,134
@Test [EOL] public void testLonglyByRow() { [EOL]     RealMatrix matrix = createRealMatrix(longleyData, 16, 7); [EOL]     double[] rData = new double[] { 12333921.73333333246, 3.679666000000000e+04, 343330206.333333313, 1649102.666666666744, 1117681.066666666651, 23461965.733333334, 16240.93333333333248, 36796.66000000000, 1.164576250000000e+02, 1063604.115416667, 6258.666250000000, 3490.253750000000, 73503.000000000, 50.92333333333334, 343330206.33333331347, 1.063604115416667e+06, 9879353659.329166412, 56124369.854166664183, 30880428.345833335072, 685240944.600000024, 470977.90000000002328, 1649102.66666666674, 6.258666250000000e+03, 56124369.854166664, 873223.429166666698, -115378.762499999997, 4462741.533333333, 2973.03333333333330, 1117681.06666666665, 3.490253750000000e+03, 30880428.345833335, -115378.762499999997, 484304.095833333326, 1764098.133333333, 1382.43333333333339, 23461965.73333333433, 7.350300000000000e+04, 685240944.600000024, 4462741.533333333209, 1764098.133333333302, 48387348.933333330, 32917.40000000000146, 16240.93333333333, 5.092333333333334e+01, 470977.900000000, 2973.033333333333, 1382.433333333333, 32917.40000000, 22.66666666666667 }; [EOL]     StorelessCovariance covMatrix = new StorelessCovariance(7); [EOL]     for (int i = 0; i < matrix.getRowDimension(); i++) { [EOL]         covMatrix.increment(matrix.getRow(i)); [EOL]     } [EOL]     RealMatrix covarianceMatrix = covMatrix.getCovarianceMatrix(); [EOL]     TestUtils.assertEquals("covariance matrix", createRealMatrix(rData, 7, 7), covarianceMatrix, 10E-7); [EOL] } <line_num>: 146,176
@Test [EOL] public void testSwissFertilityByRow() { [EOL]     RealMatrix matrix = createRealMatrix(swissData, 47, 5); [EOL]     double[] rData = new double[] { 156.0424976873265, 100.1691489361702, -64.36692876965772, -79.7295097132285, 241.5632030527289, 100.169148936170251, 515.7994172062905, -124.39283071230344, -139.6574005550416, 379.9043755781684, -64.3669287696577, -124.3928307123034, 63.64662349676226, 53.5758556891767, -190.5606105457909, -79.7295097132285, -139.6574005550416, 53.57585568917669, 92.4560592044403, -61.6988297872340, 241.5632030527289, 379.9043755781684, -190.56061054579092, -61.6988297872340, 1739.2945371877890 }; [EOL]     StorelessCovariance covMatrix = new StorelessCovariance(5); [EOL]     for (int i = 0; i < matrix.getRowDimension(); i++) { [EOL]         covMatrix.increment(matrix.getRow(i)); [EOL]     } [EOL]     RealMatrix covarianceMatrix = covMatrix.getCovarianceMatrix(); [EOL]     TestUtils.assertEquals("covariance matrix", createRealMatrix(rData, 5, 5), covarianceMatrix, 10E-13); [EOL] } <line_num>: 182,202
@Test [EOL] public void testSymmetry() { [EOL]     RealMatrix matrix = createRealMatrix(swissData, 47, 5); [EOL]     final int dimension = 5; [EOL]     StorelessCovariance storelessCov = new StorelessCovariance(dimension); [EOL]     for (int i = 0; i < matrix.getRowDimension(); i++) { [EOL]         storelessCov.increment(matrix.getRow(i)); [EOL]     } [EOL]     double[][] covMatrix = storelessCov.getData(); [EOL]     for (int i = 0; i < dimension; i++) { [EOL]         for (int j = i; j < dimension; j++) { [EOL]             Assert.assertEquals(covMatrix[i][j], covMatrix[j][i], 10e-9); [EOL]         } [EOL]     } [EOL] } <line_num>: 207,223
@Test [EOL] public void testEquivalence() { [EOL]     int num_sets = 2; [EOL]     StorelessBivariateCovariance cov = new StorelessBivariateCovariance(); [EOL]     StorelessBivariateCovariance chk = new StorelessBivariateCovariance(); [EOL]     ISAACRandom rand = new ISAACRandom(10L); [EOL]     for (int s = 0; s < num_sets; s++) { [EOL]         StorelessBivariateCovariance covs = new StorelessBivariateCovariance(); [EOL]         for (int i = 0; i < 5; i++) { [EOL]             double x = rand.nextDouble(); [EOL]             double y = rand.nextDouble(); [EOL]             covs.increment(x, y); [EOL]             cov.increment(x, y); [EOL]         } [EOL]         chk.append(covs); [EOL]     } [EOL]     TestUtils.assertEquals("covariance subset test", chk.getResult(), cov.getResult(), 10E-7); [EOL] } <line_num>: 230,249
protected RealMatrix createRealMatrix(double[] data, int nRows, int nCols) { [EOL]     double[][] matrixData = new double[nRows][nCols]; [EOL]     int ptr = 0; [EOL]     for (int i = 0; i < nRows; i++) { [EOL]         System.arraycopy(data, ptr, matrixData[i], 0, nCols); [EOL]         ptr += nCols; [EOL]     } [EOL]     return new Array2DRowRealMatrix(matrixData); [EOL] } <line_num>: 251,259
