@Override [EOL] public UnivariateStatistic getUnivariateStatistic() { [EOL]     return new Percentile(95.0); [EOL] } <line_num>: 36,39
@Override [EOL] public double expectedValue() { [EOL]     return this.percentile95; [EOL] } <line_num>: 44,47
@Test [EOL] public void testHighPercentile() { [EOL]     double[] d = new double[] { 1, 2, 3 }; [EOL]     Percentile p = new Percentile(75); [EOL]     Assert.assertEquals(3.0, p.evaluate(d), 1.0e-5); [EOL] } <line_num>: 49,54
@Test [EOL] public void testLowPercentile() { [EOL]     double[] d = new double[] { 0, 1 }; [EOL]     Percentile p = new Percentile(25); [EOL]     Assert.assertEquals(0d, p.evaluate(d), Double.MIN_VALUE); [EOL] } <line_num>: 56,61
@Test [EOL] public void testPercentile() { [EOL]     double[] d = new double[] { 1, 3, 2, 4 }; [EOL]     Percentile p = new Percentile(30); [EOL]     Assert.assertEquals(1.5, p.evaluate(d), 1.0e-5); [EOL]     p.setQuantile(25); [EOL]     Assert.assertEquals(1.25, p.evaluate(d), 1.0e-5); [EOL]     p.setQuantile(75); [EOL]     Assert.assertEquals(3.75, p.evaluate(d), 1.0e-5); [EOL]     p.setQuantile(50); [EOL]     Assert.assertEquals(2.5, p.evaluate(d), 1.0e-5); [EOL]     try { [EOL]         p.evaluate(d, 0, d.length, -1.0); [EOL]         Assert.fail(); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         p.evaluate(d, 0, d.length, 101.0); [EOL]         Assert.fail(); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 63,88
@Test [EOL] public void testNISTExample() { [EOL]     double[] d = new double[] { 95.1772, 95.1567, 95.1937, 95.1959, 95.1442, 95.0610, 95.1591, 95.1195, 95.1772, 95.0925, 95.1990, 95.1682 }; [EOL]     Percentile p = new Percentile(90); [EOL]     Assert.assertEquals(95.1981, p.evaluate(d), 1.0e-4); [EOL]     Assert.assertEquals(95.1990, p.evaluate(d, 0, d.length, 100d), 0); [EOL] } <line_num>: 90,98
@Test [EOL] public void test5() { [EOL]     Percentile percentile = new Percentile(5); [EOL]     Assert.assertEquals(this.percentile5, percentile.evaluate(testArray), getTolerance()); [EOL] } <line_num>: 100,104
@Test [EOL] public void testNullEmpty() { [EOL]     Percentile percentile = new Percentile(50); [EOL]     double[] nullArray = null; [EOL]     double[] emptyArray = new double[] {}; [EOL]     try { [EOL]         percentile.evaluate(nullArray); [EOL]         Assert.fail("Expecting MathIllegalArgumentException for null array"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     Assert.assertTrue(Double.isNaN(percentile.evaluate(emptyArray))); [EOL] } <line_num>: 106,118
@Test [EOL] public void testSingleton() { [EOL]     Percentile percentile = new Percentile(50); [EOL]     double[] singletonArray = new double[] { 1d }; [EOL]     Assert.assertEquals(1d, percentile.evaluate(singletonArray), 0); [EOL]     Assert.assertEquals(1d, percentile.evaluate(singletonArray, 0, 1), 0); [EOL]     Assert.assertEquals(1d, percentile.evaluate(singletonArray, 0, 1, 5), 0); [EOL]     Assert.assertEquals(1d, percentile.evaluate(singletonArray, 0, 1, 100), 0); [EOL]     Assert.assertTrue(Double.isNaN(percentile.evaluate(singletonArray, 0, 0))); [EOL] } <line_num>: 120,129
@Test [EOL] public void testSpecialValues() { [EOL]     Percentile percentile = new Percentile(50); [EOL]     double[] specialValues = new double[] { 0d, 1d, 2d, 3d, 4d, Double.NaN }; [EOL]     Assert.assertEquals(2.5d, percentile.evaluate(specialValues), 0); [EOL]     specialValues = new double[] { Double.NEGATIVE_INFINITY, 1d, 2d, 3d, Double.NaN, Double.POSITIVE_INFINITY }; [EOL]     Assert.assertEquals(2.5d, percentile.evaluate(specialValues), 0); [EOL]     specialValues = new double[] { 1d, 1d, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY }; [EOL]     Assert.assertTrue(Double.isInfinite(percentile.evaluate(specialValues))); [EOL]     specialValues = new double[] { 1d, 1d, Double.NaN, Double.NaN }; [EOL]     Assert.assertTrue(Double.isNaN(percentile.evaluate(specialValues))); [EOL]     specialValues = new double[] { 1d, 1d, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY }; [EOL]     Assert.assertTrue(Double.isNaN(percentile.evaluate(specialValues))); [EOL] } <line_num>: 131,149
@Test [EOL] public void testSetQuantile() { [EOL]     Percentile percentile = new Percentile(10); [EOL]     percentile.setQuantile(100); [EOL]     Assert.assertEquals(100, percentile.getQuantile(), 0); [EOL]     try { [EOL]         percentile.setQuantile(0); [EOL]         Assert.fail("Expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new Percentile(0); [EOL]         Assert.fail("Expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 151,168
