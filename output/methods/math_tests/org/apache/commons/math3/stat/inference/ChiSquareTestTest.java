@Test [EOL] public void testChiSquare() { [EOL]     long[] observed = { 10, 9, 11 }; [EOL]     double[] expected = { 10, 10, 10 }; [EOL]     Assert.assertEquals("chi-square statistic", 0.2, testStatistic.chiSquare(expected, observed), 10E-12); [EOL]     Assert.assertEquals("chi-square p-value", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10); [EOL]     long[] observed1 = { 500, 623, 72, 70, 31 }; [EOL]     double[] expected1 = { 485, 541, 82, 61, 37 }; [EOL]     Assert.assertEquals("chi-square test statistic", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10); [EOL]     Assert.assertEquals("chi-square p-value", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9); [EOL]     Assert.assertTrue("chi-square test reject", testStatistic.chiSquareTest(expected1, observed1, 0.08)); [EOL]     Assert.assertTrue("chi-square test accept", !testStatistic.chiSquareTest(expected1, observed1, 0.05)); [EOL]     try { [EOL]         testStatistic.chiSquareTest(expected1, observed1, 95); [EOL]         Assert.fail("alpha out of range, OutOfRangeException expected"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     long[] tooShortObs = { 0 }; [EOL]     double[] tooShortEx = { 1 }; [EOL]     try { [EOL]         testStatistic.chiSquare(tooShortEx, tooShortObs); [EOL]         Assert.fail("arguments too short, DimensionMismatchException expected"); [EOL]     } catch (DimensionMismatchException ex) { [EOL]     } [EOL]     long[] unMatchedObs = { 0, 1, 2, 3 }; [EOL]     double[] unMatchedEx = { 1, 1, 2 }; [EOL]     try { [EOL]         testStatistic.chiSquare(unMatchedEx, unMatchedObs); [EOL]         Assert.fail("arrays have different lengths, DimensionMismatchException expected"); [EOL]     } catch (DimensionMismatchException ex) { [EOL]     } [EOL]     expected[0] = 0; [EOL]     try { [EOL]         testStatistic.chiSquareTest(expected, observed, .01); [EOL]         Assert.fail("bad expected count, NotStrictlyPositiveException expected"); [EOL]     } catch (NotStrictlyPositiveException ex) { [EOL]     } [EOL]     expected[0] = 1; [EOL]     observed[0] = -1; [EOL]     try { [EOL]         testStatistic.chiSquareTest(expected, observed, .01); [EOL]         Assert.fail("bad expected count, NotPositiveException expected"); [EOL]     } catch (NotPositiveException ex) { [EOL]     } [EOL] } <line_num>: 38,103
@Test [EOL] public void testChiSquareIndependence() { [EOL]     long[][] counts = { { 40, 22, 43 }, { 91, 21, 28 }, { 60, 10, 22 } }; [EOL]     Assert.assertEquals("chi-square test statistic", 22.709027688, testStatistic.chiSquare(counts), 1E-9); [EOL]     Assert.assertEquals("chi-square p-value", 0.000144751460134, testStatistic.chiSquareTest(counts), 1E-9); [EOL]     Assert.assertTrue("chi-square test reject", testStatistic.chiSquareTest(counts, 0.0002)); [EOL]     Assert.assertTrue("chi-square test accept", !testStatistic.chiSquareTest(counts, 0.0001)); [EOL]     long[][] counts2 = { { 10, 15 }, { 30, 40 }, { 60, 90 } }; [EOL]     Assert.assertEquals("chi-square test statistic", 0.168965517241, testStatistic.chiSquare(counts2), 1E-9); [EOL]     Assert.assertEquals("chi-square p-value", 0.918987499852, testStatistic.chiSquareTest(counts2), 1E-9); [EOL]     Assert.assertTrue("chi-square test accept", !testStatistic.chiSquareTest(counts2, 0.1)); [EOL]     long[][] counts3 = { { 40, 22, 43 }, { 91, 21, 28 }, { 60, 10 } }; [EOL]     try { [EOL]         testStatistic.chiSquare(counts3); [EOL]         Assert.fail("Expecting DimensionMismatchException"); [EOL]     } catch (DimensionMismatchException ex) { [EOL]     } [EOL]     long[][] counts4 = { { 40, 22, 43 } }; [EOL]     try { [EOL]         testStatistic.chiSquare(counts4); [EOL]         Assert.fail("Expecting DimensionMismatchException"); [EOL]     } catch (DimensionMismatchException ex) { [EOL]     } [EOL]     long[][] counts5 = { { 40 }, { 40 }, { 30 }, { 10 } }; [EOL]     try { [EOL]         testStatistic.chiSquare(counts5); [EOL]         Assert.fail("Expecting DimensionMismatchException"); [EOL]     } catch (DimensionMismatchException ex) { [EOL]     } [EOL]     long[][] counts6 = { { 10, -2 }, { 30, 40 }, { 60, 90 } }; [EOL]     try { [EOL]         testStatistic.chiSquare(counts6); [EOL]         Assert.fail("Expecting NotPositiveException"); [EOL]     } catch (NotPositiveException ex) { [EOL]     } [EOL]     try { [EOL]         testStatistic.chiSquareTest(counts, 0); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 105,162
@Test [EOL] public void testChiSquareLargeTestStatistic() { [EOL]     double[] exp = new double[] { 3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, 232921.0, 437665.75 }; [EOL]     long[] obs = new long[] { 2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899 }; [EOL]     org.apache.commons.math3.stat.inference.ChiSquareTest csti = new org.apache.commons.math3.stat.inference.ChiSquareTest(); [EOL]     double cst = csti.chiSquareTest(exp, obs); [EOL]     Assert.assertEquals("chi-square p-value", 0.0, cst, 1E-3); [EOL]     Assert.assertEquals("chi-square test statistic", 114875.90421929007, testStatistic.chiSquare(exp, obs), 1E-9); [EOL] } <line_num>: 164,180
@Test [EOL] public void testChiSquareZeroCount() { [EOL]     long[][] counts = { { 40, 0, 4 }, { 91, 1, 2 }, { 60, 2, 0 } }; [EOL]     Assert.assertEquals("chi-square test statistic", 9.67444662263, testStatistic.chiSquare(counts), 1E-9); [EOL]     Assert.assertEquals("chi-square p-value", 0.0462835770603, testStatistic.chiSquareTest(counts), 1E-9); [EOL] } <line_num>: 183,191
@Test [EOL] public void testChiSquareDataSetsComparisonEqualCounts() { [EOL]     long[] observed1 = { 10, 12, 12, 10 }; [EOL]     long[] observed2 = { 5, 15, 14, 10 }; [EOL]     Assert.assertEquals("chi-square p value", 0.541096, testStatistic.chiSquareTestDataSetsComparison(observed1, observed2), 1E-6); [EOL]     Assert.assertEquals("chi-square test statistic", 2.153846, testStatistic.chiSquareDataSetsComparison(observed1, observed2), 1E-6); [EOL]     Assert.assertFalse("chi-square test result", testStatistic.chiSquareTestDataSetsComparison(observed1, observed2, 0.4)); [EOL] } <line_num>: 194,208
@Test [EOL] public void testChiSquareDataSetsComparisonUnEqualCounts() { [EOL]     long[] observed1 = { 10, 12, 12, 10, 15 }; [EOL]     long[] observed2 = { 15, 10, 10, 15, 5 }; [EOL]     Assert.assertEquals("chi-square p value", 0.124115, testStatistic.chiSquareTestDataSetsComparison(observed1, observed2), 1E-6); [EOL]     Assert.assertEquals("chi-square test statistic", 7.232189, testStatistic.chiSquareDataSetsComparison(observed1, observed2), 1E-6); [EOL]     Assert.assertTrue("chi-square test result", testStatistic.chiSquareTestDataSetsComparison(observed1, observed2, 0.13)); [EOL]     Assert.assertFalse("chi-square test result", testStatistic.chiSquareTestDataSetsComparison(observed1, observed2, 0.12)); [EOL] } <line_num>: 211,228
@Test [EOL] public void testChiSquareDataSetsComparisonBadCounts() { [EOL]     long[] observed1 = { 10, -1, 12, 10, 15 }; [EOL]     long[] observed2 = { 15, 10, 10, 15, 5 }; [EOL]     try { [EOL]         testStatistic.chiSquareTestDataSetsComparison(observed1, observed2); [EOL]         Assert.fail("Expecting NotPositiveException - negative count"); [EOL]     } catch (NotPositiveException ex) { [EOL]     } [EOL]     long[] observed3 = { 10, 0, 12, 10, 15 }; [EOL]     long[] observed4 = { 15, 0, 10, 15, 5 }; [EOL]     try { [EOL]         testStatistic.chiSquareTestDataSetsComparison(observed3, observed4); [EOL]         Assert.fail("Expecting ZeroException - double 0's"); [EOL]     } catch (ZeroException ex) { [EOL]     } [EOL]     long[] observed5 = { 10, 10, 12, 10, 15 }; [EOL]     long[] observed6 = { 0, 0, 0, 0, 0 }; [EOL]     try { [EOL]         testStatistic.chiSquareTestDataSetsComparison(observed5, observed6); [EOL]         Assert.fail("Expecting ZeroException - vanishing counts"); [EOL]     } catch (ZeroException ex) { [EOL]     } [EOL] } <line_num>: 230,260
