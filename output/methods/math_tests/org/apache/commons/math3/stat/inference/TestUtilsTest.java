@Test [EOL] public void testChiSquare() { [EOL]     long[] observed = { 10, 9, 11 }; [EOL]     double[] expected = { 10, 10, 10 }; [EOL]     Assert.assertEquals("chi-square statistic", 0.2, TestUtils.chiSquare(expected, observed), 10E-12); [EOL]     Assert.assertEquals("chi-square p-value", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10); [EOL]     long[] observed1 = { 500, 623, 72, 70, 31 }; [EOL]     double[] expected1 = { 485, 541, 82, 61, 37 }; [EOL]     Assert.assertEquals("chi-square test statistic", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10); [EOL]     Assert.assertEquals("chi-square p-value", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9); [EOL]     Assert.assertTrue("chi-square test reject", TestUtils.chiSquareTest(expected1, observed1, 0.07)); [EOL]     Assert.assertTrue("chi-square test accept", !TestUtils.chiSquareTest(expected1, observed1, 0.05)); [EOL]     try { [EOL]         TestUtils.chiSquareTest(expected1, observed1, 95); [EOL]         Assert.fail("alpha out of range, OutOfRangeException expected"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     long[] tooShortObs = { 0 }; [EOL]     double[] tooShortEx = { 1 }; [EOL]     try { [EOL]         TestUtils.chiSquare(tooShortEx, tooShortObs); [EOL]         Assert.fail("arguments too short, DimensionMismatchException expected"); [EOL]     } catch (DimensionMismatchException ex) { [EOL]     } [EOL]     long[] unMatchedObs = { 0, 1, 2, 3 }; [EOL]     double[] unMatchedEx = { 1, 1, 2 }; [EOL]     try { [EOL]         TestUtils.chiSquare(unMatchedEx, unMatchedObs); [EOL]         Assert.fail("arrays have different lengths, DimensionMismatchException expected"); [EOL]     } catch (DimensionMismatchException ex) { [EOL]     } [EOL]     expected[0] = 0; [EOL]     try { [EOL]         TestUtils.chiSquareTest(expected, observed, .01); [EOL]         Assert.fail("bad expected count, NotStrictlyPositiveException expected"); [EOL]     } catch (NotStrictlyPositiveException ex) { [EOL]     } [EOL]     expected[0] = 1; [EOL]     observed[0] = -1; [EOL]     try { [EOL]         TestUtils.chiSquareTest(expected, observed, .01); [EOL]         Assert.fail("bad expected count, NotPositiveException expected"); [EOL]     } catch (NotPositiveException ex) { [EOL]     } [EOL] } <line_num>: 40,105
@Test [EOL] public void testChiSquareIndependence() { [EOL]     long[][] counts = { { 40, 22, 43 }, { 91, 21, 28 }, { 60, 10, 22 } }; [EOL]     Assert.assertEquals("chi-square test statistic", 22.709027688, TestUtils.chiSquare(counts), 1E-9); [EOL]     Assert.assertEquals("chi-square p-value", 0.000144751460134, TestUtils.chiSquareTest(counts), 1E-9); [EOL]     Assert.assertTrue("chi-square test reject", TestUtils.chiSquareTest(counts, 0.0002)); [EOL]     Assert.assertTrue("chi-square test accept", !TestUtils.chiSquareTest(counts, 0.0001)); [EOL]     long[][] counts2 = { { 10, 15 }, { 30, 40 }, { 60, 90 } }; [EOL]     Assert.assertEquals("chi-square test statistic", 0.168965517241, TestUtils.chiSquare(counts2), 1E-9); [EOL]     Assert.assertEquals("chi-square p-value", 0.918987499852, TestUtils.chiSquareTest(counts2), 1E-9); [EOL]     Assert.assertTrue("chi-square test accept", !TestUtils.chiSquareTest(counts2, 0.1)); [EOL]     long[][] counts3 = { { 40, 22, 43 }, { 91, 21, 28 }, { 60, 10 } }; [EOL]     try { [EOL]         TestUtils.chiSquare(counts3); [EOL]         Assert.fail("Expecting DimensionMismatchException"); [EOL]     } catch (DimensionMismatchException ex) { [EOL]     } [EOL]     long[][] counts4 = { { 40, 22, 43 } }; [EOL]     try { [EOL]         TestUtils.chiSquare(counts4); [EOL]         Assert.fail("Expecting DimensionMismatchException"); [EOL]     } catch (DimensionMismatchException ex) { [EOL]     } [EOL]     long[][] counts5 = { { 40 }, { 40 }, { 30 }, { 10 } }; [EOL]     try { [EOL]         TestUtils.chiSquare(counts5); [EOL]         Assert.fail("Expecting DimensionMismatchException"); [EOL]     } catch (DimensionMismatchException ex) { [EOL]     } [EOL]     long[][] counts6 = { { 10, -2 }, { 30, 40 }, { 60, 90 } }; [EOL]     try { [EOL]         TestUtils.chiSquare(counts6); [EOL]         Assert.fail("Expecting NotPositiveException"); [EOL]     } catch (NotPositiveException ex) { [EOL]     } [EOL]     try { [EOL]         TestUtils.chiSquareTest(counts, 0); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 107,164
@Test [EOL] public void testChiSquareLargeTestStatistic() { [EOL]     double[] exp = new double[] { 3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, 232921.0, 437665.75 }; [EOL]     long[] obs = new long[] { 2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899 }; [EOL]     org.apache.commons.math3.stat.inference.ChiSquareTest csti = new org.apache.commons.math3.stat.inference.ChiSquareTest(); [EOL]     double cst = csti.chiSquareTest(exp, obs); [EOL]     Assert.assertEquals("chi-square p-value", 0.0, cst, 1E-3); [EOL]     Assert.assertEquals("chi-square test statistic", 114875.90421929007, TestUtils.chiSquare(exp, obs), 1E-9); [EOL] } <line_num>: 166,182
@Test [EOL] public void testChiSquareZeroCount() { [EOL]     long[][] counts = { { 40, 0, 4 }, { 91, 1, 2 }, { 60, 2, 0 } }; [EOL]     Assert.assertEquals("chi-square test statistic", 9.67444662263, TestUtils.chiSquare(counts), 1E-9); [EOL]     Assert.assertEquals("chi-square p-value", 0.0462835770603, TestUtils.chiSquareTest(counts), 1E-9); [EOL] } <line_num>: 185,193
@Test [EOL] public void testOneSampleT() { [EOL]     double[] observed = { 93.0, 103.0, 95.0, 101.0, 91.0, 105.0, 96.0, 94.0, 101.0, 88.0, 98.0, 94.0, 101.0, 92.0, 95.0 }; [EOL]     double mu = 100.0; [EOL]     SummaryStatistics sampleStats = null; [EOL]     sampleStats = new SummaryStatistics(); [EOL]     for (int i = 0; i < observed.length; i++) { [EOL]         sampleStats.addValue(observed[i]); [EOL]     } [EOL]     Assert.assertEquals("t statistic", -2.81976445346, TestUtils.t(mu, observed), 10E-10); [EOL]     Assert.assertEquals("t statistic", -2.81976445346, TestUtils.t(mu, sampleStats), 10E-10); [EOL]     Assert.assertEquals("p value", 0.0136390585873, TestUtils.tTest(mu, observed), 10E-10); [EOL]     Assert.assertEquals("p value", 0.0136390585873, TestUtils.tTest(mu, sampleStats), 10E-10); [EOL]     try { [EOL]         TestUtils.t(mu, (double[]) null); [EOL]         Assert.fail("arguments too short, NullArgumentException expected"); [EOL]     } catch (NullArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         TestUtils.t(mu, (SummaryStatistics) null); [EOL]         Assert.fail("arguments too short, NullArgumentException expected"); [EOL]     } catch (NullArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         TestUtils.t(mu, emptyObs); [EOL]         Assert.fail("arguments too short, NumberIsTooSmallException expected"); [EOL]     } catch (NumberIsTooSmallException ex) { [EOL]     } [EOL]     try { [EOL]         TestUtils.t(mu, emptyStats); [EOL]         Assert.fail("arguments too short, NumberIsTooSmallException expected"); [EOL]     } catch (NumberIsTooSmallException ex) { [EOL]     } [EOL]     try { [EOL]         TestUtils.t(mu, tooShortObs); [EOL]         Assert.fail("insufficient data to compute t statistic, NumberIsTooSmallException expected"); [EOL]     } catch (NumberIsTooSmallException ex) { [EOL]     } [EOL]     try { [EOL]         TestUtils.tTest(mu, tooShortObs); [EOL]         Assert.fail("insufficient data to perform t test, NumberIsTooSmallException expected"); [EOL]     } catch (NumberIsTooSmallException ex) { [EOL]     } [EOL]     try { [EOL]         TestUtils.t(mu, (SummaryStatistics) null); [EOL]         Assert.fail("insufficient data to compute t statistic, NullArgumentException expected"); [EOL]     } catch (NullArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         TestUtils.tTest(mu, (SummaryStatistics) null); [EOL]         Assert.fail("insufficient data to perform t test, NullArgumentException expected"); [EOL]     } catch (NullArgumentException ex) { [EOL]     } [EOL] } <line_num>: 199,273
@Test [EOL] public void testOneSampleTTest() { [EOL]     double[] oneSidedP = { 2d, 0d, 6d, 6d, 3d, 3d, 2d, 3d, -6d, 6d, 6d, 6d, 3d, 0d, 1d, 1d, 0d, 2d, 3d, 3d }; [EOL]     SummaryStatistics oneSidedPStats = new SummaryStatistics(); [EOL]     for (int i = 0; i < oneSidedP.length; i++) { [EOL]         oneSidedPStats.addValue(oneSidedP[i]); [EOL]     } [EOL]     Assert.assertEquals("one sample t stat", 3.86485535541, TestUtils.t(0d, oneSidedP), 10E-10); [EOL]     Assert.assertEquals("one sample t stat", 3.86485535541, TestUtils.t(0d, oneSidedPStats), 1E-10); [EOL]     Assert.assertEquals("one sample p value", 0.000521637019637, TestUtils.tTest(0d, oneSidedP) / 2d, 10E-10); [EOL]     Assert.assertEquals("one sample p value", 0.000521637019637, TestUtils.tTest(0d, oneSidedPStats) / 2d, 10E-5); [EOL]     Assert.assertTrue("one sample t-test reject", TestUtils.tTest(0d, oneSidedP, 0.01)); [EOL]     Assert.assertTrue("one sample t-test reject", TestUtils.tTest(0d, oneSidedPStats, 0.01)); [EOL]     Assert.assertTrue("one sample t-test accept", !TestUtils.tTest(0d, oneSidedP, 0.0001)); [EOL]     Assert.assertTrue("one sample t-test accept", !TestUtils.tTest(0d, oneSidedPStats, 0.0001)); [EOL]     try { [EOL]         TestUtils.tTest(0d, oneSidedP, 95); [EOL]         Assert.fail("alpha out of range, OutOfRangeException expected"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         TestUtils.tTest(0d, oneSidedPStats, 95); [EOL]         Assert.fail("alpha out of range, OutOfRangeException expected"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 275,311
@Test [EOL] public void testTwoSampleTHeterscedastic() { [EOL]     double[] sample1 = { 7d, -4d, 18d, 17d, -3d, -5d, 1d, 10d, 11d, -2d }; [EOL]     double[] sample2 = { -1d, 12d, -1d, -3d, 3d, -5d, 5d, 2d, -11d, -1d, -3d }; [EOL]     SummaryStatistics sampleStats1 = new SummaryStatistics(); [EOL]     for (int i = 0; i < sample1.length; i++) { [EOL]         sampleStats1.addValue(sample1[i]); [EOL]     } [EOL]     SummaryStatistics sampleStats2 = new SummaryStatistics(); [EOL]     for (int i = 0; i < sample2.length; i++) { [EOL]         sampleStats2.addValue(sample2[i]); [EOL]     } [EOL]     Assert.assertEquals("two sample heteroscedastic t stat", 1.60371728768, TestUtils.t(sample1, sample2), 1E-10); [EOL]     Assert.assertEquals("two sample heteroscedastic t stat", 1.60371728768, TestUtils.t(sampleStats1, sampleStats2), 1E-10); [EOL]     Assert.assertEquals("two sample heteroscedastic p value", 0.128839369622, TestUtils.tTest(sample1, sample2), 1E-10); [EOL]     Assert.assertEquals("two sample heteroscedastic p value", 0.128839369622, TestUtils.tTest(sampleStats1, sampleStats2), 1E-10); [EOL]     Assert.assertTrue("two sample heteroscedastic t-test reject", TestUtils.tTest(sample1, sample2, 0.2)); [EOL]     Assert.assertTrue("two sample heteroscedastic t-test reject", TestUtils.tTest(sampleStats1, sampleStats2, 0.2)); [EOL]     Assert.assertTrue("two sample heteroscedastic t-test accept", !TestUtils.tTest(sample1, sample2, 0.1)); [EOL]     Assert.assertTrue("two sample heteroscedastic t-test accept", !TestUtils.tTest(sampleStats1, sampleStats2, 0.1)); [EOL]     try { [EOL]         TestUtils.tTest(sample1, sample2, .95); [EOL]         Assert.fail("alpha out of range, OutOfRangeException expected"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         TestUtils.tTest(sampleStats1, sampleStats2, .95); [EOL]         Assert.fail("alpha out of range, OutOfRangeException expected"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         TestUtils.tTest(sample1, tooShortObs, .01); [EOL]         Assert.fail("insufficient data, NumberIsTooSmallException expected"); [EOL]     } catch (NumberIsTooSmallException ex) { [EOL]     } [EOL]     try { [EOL]         TestUtils.tTest(sampleStats1, (SummaryStatistics) null, .01); [EOL]         Assert.fail("insufficient data, NullArgumentException expected"); [EOL]     } catch (NullArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         TestUtils.tTest(sample1, tooShortObs); [EOL]         Assert.fail("insufficient data, NumberIsTooSmallException expected"); [EOL]     } catch (NumberIsTooSmallException ex) { [EOL]     } [EOL]     try { [EOL]         TestUtils.tTest(sampleStats1, (SummaryStatistics) null); [EOL]         Assert.fail("insufficient data, NullArgumentException expected"); [EOL]     } catch (NullArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         TestUtils.t(sample1, tooShortObs); [EOL]         Assert.fail("insufficient data, NumberIsTooSmallException expected"); [EOL]     } catch (NumberIsTooSmallException ex) { [EOL]     } [EOL]     try { [EOL]         TestUtils.t(sampleStats1, (SummaryStatistics) null); [EOL]         Assert.fail("insufficient data, NullArgumentException expected"); [EOL]     } catch (NullArgumentException ex) { [EOL]     } [EOL] } <line_num>: 313,399
@Test [EOL] public void testTwoSampleTHomoscedastic() { [EOL]     double[] sample1 = { 2, 4, 6, 8, 10, 97 }; [EOL]     double[] sample2 = { 4, 6, 8, 10, 16 }; [EOL]     SummaryStatistics sampleStats1 = new SummaryStatistics(); [EOL]     for (int i = 0; i < sample1.length; i++) { [EOL]         sampleStats1.addValue(sample1[i]); [EOL]     } [EOL]     SummaryStatistics sampleStats2 = new SummaryStatistics(); [EOL]     for (int i = 0; i < sample2.length; i++) { [EOL]         sampleStats2.addValue(sample2[i]); [EOL]     } [EOL]     Assert.assertEquals("two sample homoscedastic t stat", 0.73096310086, TestUtils.homoscedasticT(sample1, sample2), 10E-11); [EOL]     Assert.assertEquals("two sample homoscedastic p value", 0.4833963785, TestUtils.homoscedasticTTest(sampleStats1, sampleStats2), 1E-10); [EOL]     Assert.assertTrue("two sample homoscedastic t-test reject", TestUtils.homoscedasticTTest(sample1, sample2, 0.49)); [EOL]     Assert.assertTrue("two sample homoscedastic t-test accept", !TestUtils.homoscedasticTTest(sample1, sample2, 0.48)); [EOL] } <line_num>: 400,422
@Test [EOL] public void testSmallSamples() { [EOL]     double[] sample1 = { 1d, 3d }; [EOL]     double[] sample2 = { 4d, 5d }; [EOL]     Assert.assertEquals(-2.2360679775, TestUtils.t(sample1, sample2), 1E-10); [EOL]     Assert.assertEquals(0.198727388935, TestUtils.tTest(sample1, sample2), 1E-10); [EOL] } <line_num>: 424,434
@Test [EOL] public void testPaired() { [EOL]     double[] sample1 = { 1d, 3d, 5d, 7d }; [EOL]     double[] sample2 = { 0d, 6d, 11d, 2d }; [EOL]     double[] sample3 = { 5d, 7d, 8d, 10d }; [EOL]     Assert.assertEquals(-0.3133, TestUtils.pairedT(sample1, sample2), 1E-4); [EOL]     Assert.assertEquals(0.774544295819, TestUtils.pairedTTest(sample1, sample2), 1E-10); [EOL]     Assert.assertEquals(0.001208, TestUtils.pairedTTest(sample1, sample3), 1E-6); [EOL]     Assert.assertFalse(TestUtils.pairedTTest(sample1, sample3, .001)); [EOL]     Assert.assertTrue(TestUtils.pairedTTest(sample1, sample3, .002)); [EOL] } <line_num>: 436,448
@Test [EOL] public void testOneWayAnovaUtils() { [EOL]     classes.add(classA); [EOL]     classes.add(classB); [EOL]     classes.add(classC); [EOL]     Assert.assertEquals(oneWayAnova.anovaFValue(classes), TestUtils.oneWayAnovaFValue(classes), 10E-12); [EOL]     Assert.assertEquals(oneWayAnova.anovaPValue(classes), TestUtils.oneWayAnovaPValue(classes), 10E-12); [EOL]     Assert.assertEquals(oneWayAnova.anovaTest(classes, 0.01), TestUtils.oneWayAnovaTest(classes, 0.01)); [EOL] } <line_num>: 460,471
@Test [EOL] public void testGTestGoodnesOfFit() throws Exception { [EOL]     double[] exp = new double[] { 0.54d, 0.40d, 0.05d, 0.01d }; [EOL]     long[] obs = new long[] { 70, 79, 3, 4 }; [EOL]     Assert.assertEquals("G test statistic", 13.144799, TestUtils.g(exp, obs), 1E-5); [EOL]     double p_gtgf = TestUtils.gTest(exp, obs); [EOL]     Assert.assertEquals("g-Test p-value", 0.004333, p_gtgf, 1E-5); [EOL]     Assert.assertTrue(TestUtils.gTest(exp, obs, 0.05)); [EOL] } <line_num>: 472,487
@Test [EOL] public void testGTestIndependance() throws Exception { [EOL]     long[] obs1 = new long[] { 268, 199, 42 }; [EOL]     long[] obs2 = new long[] { 807, 759, 184 }; [EOL]     double g = TestUtils.gDataSetsComparison(obs1, obs2); [EOL]     Assert.assertEquals("G test statistic", 7.3008170, g, 1E-4); [EOL]     double p_gti = TestUtils.gTestDataSetsComparison(obs1, obs2); [EOL]     Assert.assertEquals("g-Test p-value", 0.0259805, p_gti, 1E-4); [EOL]     Assert.assertTrue(TestUtils.gTestDataSetsComparison(obs1, obs2, 0.05)); [EOL] } <line_num>: 489,507
@Test [EOL] public void testRootLogLikelihood() { [EOL]     Assert.assertTrue(TestUtils.rootLogLikelihoodRatio(904, 21060, 1144, 283012) > 0.0); [EOL]     Assert.assertTrue(TestUtils.rootLogLikelihoodRatio(36, 21928, 60280, 623876) < 0.0); [EOL]     Assert.assertEquals(Math.sqrt(2.772589), TestUtils.rootLogLikelihoodRatio(1, 0, 0, 1), 0.000001); [EOL]     Assert.assertEquals(-Math.sqrt(2.772589), TestUtils.rootLogLikelihoodRatio(0, 1, 1, 0), 0.000001); [EOL]     Assert.assertEquals(Math.sqrt(27.72589), TestUtils.rootLogLikelihoodRatio(10, 0, 0, 10), 0.00001); [EOL]     Assert.assertEquals(Math.sqrt(39.33052), TestUtils.rootLogLikelihoodRatio(5, 1995, 0, 100000), 0.00001); [EOL]     Assert.assertEquals(-Math.sqrt(39.33052), TestUtils.rootLogLikelihoodRatio(0, 100000, 5, 1995), 0.00001); [EOL]     Assert.assertEquals(Math.sqrt(4730.737), TestUtils.rootLogLikelihoodRatio(1000, 1995, 1000, 100000), 0.001); [EOL]     Assert.assertEquals(-Math.sqrt(4730.737), TestUtils.rootLogLikelihoodRatio(1000, 100000, 1000, 1995), 0.001); [EOL]     Assert.assertEquals(Math.sqrt(5734.343), TestUtils.rootLogLikelihoodRatio(1000, 1000, 1000, 100000), 0.001); [EOL]     Assert.assertEquals(Math.sqrt(5714.932), TestUtils.rootLogLikelihoodRatio(1000, 1000, 1000, 99000), 0.001); [EOL] } <line_num>: 509,529
