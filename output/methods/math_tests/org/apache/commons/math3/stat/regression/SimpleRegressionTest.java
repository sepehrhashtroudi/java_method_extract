@Test [EOL] public void testAppend() { [EOL]     check(false); [EOL]     check(true); [EOL] } <line_num>: 119,123
private void check(boolean includeIntercept) { [EOL]     final int sets = 2; [EOL]     final ISAACRandom rand = new ISAACRandom(10L); [EOL]     final SimpleRegression whole = new SimpleRegression(includeIntercept); [EOL]     final SimpleRegression parts = new SimpleRegression(includeIntercept); [EOL]     for (int s = 0; s < sets; s++) { [EOL]         final double coef = rand.nextDouble(); [EOL]         final SimpleRegression sub = new SimpleRegression(includeIntercept); [EOL]         for (int i = 0; i < 5; i++) { [EOL]             final double x = rand.nextDouble(); [EOL]             final double y = x * coef + rand.nextDouble(); [EOL]             sub.addData(x, y); [EOL]             whole.addData(x, y); [EOL]         } [EOL]         parts.append(sub); [EOL]         Assert.assertTrue(equals(parts, whole, 1E-6)); [EOL]     } [EOL] } <line_num>: 132,150
private boolean equals(SimpleRegression model1, SimpleRegression model2, double tol) { [EOL]     if (model1.getN() != model2.getN()) { [EOL]         return false; [EOL]     } [EOL]     if (Math.abs(model1.getIntercept() - model2.getIntercept()) > tol) { [EOL]         return false; [EOL]     } [EOL]     if (Math.abs(model1.getInterceptStdErr() - model2.getInterceptStdErr()) > tol) { [EOL]         return false; [EOL]     } [EOL]     if (Math.abs(model1.getMeanSquareError() - model2.getMeanSquareError()) > tol) { [EOL]         return false; [EOL]     } [EOL]     if (Math.abs(model1.getR() - model2.getR()) > tol) { [EOL]         return false; [EOL]     } [EOL]     if (Math.abs(model1.getRegressionSumSquares() - model2.getRegressionSumSquares()) > tol) { [EOL]         return false; [EOL]     } [EOL]     if (Math.abs(model1.getRSquare() - model2.getRSquare()) > tol) { [EOL]         return false; [EOL]     } [EOL]     if (Math.abs(model1.getSignificance() - model2.getSignificance()) > tol) { [EOL]         return false; [EOL]     } [EOL]     if (Math.abs(model1.getSlope() - model2.getSlope()) > tol) { [EOL]         return false; [EOL]     } [EOL]     if (Math.abs(model1.getSlopeConfidenceInterval() - model2.getSlopeConfidenceInterval()) > tol) { [EOL]         return false; [EOL]     } [EOL]     if (Math.abs(model1.getSlopeStdErr() - model2.getSlopeStdErr()) > tol) { [EOL]         return false; [EOL]     } [EOL]     if (Math.abs(model1.getSumOfCrossProducts() - model2.getSumOfCrossProducts()) > tol) { [EOL]         return false; [EOL]     } [EOL]     if (Math.abs(model1.getSumSquaredErrors() - model2.getSumSquaredErrors()) > tol) { [EOL]         return false; [EOL]     } [EOL]     if (Math.abs(model1.getTotalSumSquares() - model2.getTotalSumSquares()) > tol) { [EOL]         return false; [EOL]     } [EOL]     if (Math.abs(model1.getXSumSquares() - model2.getXSumSquares()) > tol) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 161,208
@Test [EOL] public void testRegressIfaceMethod() { [EOL]     final SimpleRegression regression = new SimpleRegression(true); [EOL]     final UpdatingMultipleLinearRegression iface = regression; [EOL]     final SimpleRegression regressionNoint = new SimpleRegression(false); [EOL]     final SimpleRegression regressionIntOnly = new SimpleRegression(false); [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         iface.addObservation(new double[] { data[i][1] }, data[i][0]); [EOL]         regressionNoint.addData(data[i][1], data[i][0]); [EOL]         regressionIntOnly.addData(1.0, data[i][0]); [EOL]     } [EOL]     final RegressionResults fullReg = iface.regress(); [EOL]     Assert.assertNotNull(fullReg); [EOL]     Assert.assertEquals("intercept", regression.getIntercept(), fullReg.getParameterEstimate(0), 1.0e-16); [EOL]     Assert.assertEquals("intercept std err", regression.getInterceptStdErr(), fullReg.getStdErrorOfEstimate(0), 1.0E-16); [EOL]     Assert.assertEquals("slope", regression.getSlope(), fullReg.getParameterEstimate(1), 1.0e-16); [EOL]     Assert.assertEquals("slope std err", regression.getSlopeStdErr(), fullReg.getStdErrorOfEstimate(1), 1.0E-16); [EOL]     Assert.assertEquals("number of observations", regression.getN(), fullReg.getN()); [EOL]     Assert.assertEquals("r-square", regression.getRSquare(), fullReg.getRSquared(), 1.0E-16); [EOL]     Assert.assertEquals("SSR", regression.getRegressionSumSquares(), fullReg.getRegressionSumSquares(), 1.0E-16); [EOL]     Assert.assertEquals("MSE", regression.getMeanSquareError(), fullReg.getMeanSquareError(), 1.0E-16); [EOL]     Assert.assertEquals("SSE", regression.getSumSquaredErrors(), fullReg.getErrorSumSquares(), 1.0E-16); [EOL]     final RegressionResults noInt = iface.regress(new int[] { 1 }); [EOL]     Assert.assertNotNull(noInt); [EOL]     Assert.assertEquals("slope", regressionNoint.getSlope(), noInt.getParameterEstimate(0), 1.0e-12); [EOL]     Assert.assertEquals("slope std err", regressionNoint.getSlopeStdErr(), noInt.getStdErrorOfEstimate(0), 1.0E-16); [EOL]     Assert.assertEquals("number of observations", regressionNoint.getN(), noInt.getN()); [EOL]     Assert.assertEquals("r-square", regressionNoint.getRSquare(), noInt.getRSquared(), 1.0E-16); [EOL]     Assert.assertEquals("SSR", regressionNoint.getRegressionSumSquares(), noInt.getRegressionSumSquares(), 1.0E-8); [EOL]     Assert.assertEquals("MSE", regressionNoint.getMeanSquareError(), noInt.getMeanSquareError(), 1.0E-16); [EOL]     Assert.assertEquals("SSE", regressionNoint.getSumSquaredErrors(), noInt.getErrorSumSquares(), 1.0E-16); [EOL]     final RegressionResults onlyInt = iface.regress(new int[] { 0 }); [EOL]     Assert.assertNotNull(onlyInt); [EOL]     Assert.assertEquals("slope", regressionIntOnly.getSlope(), onlyInt.getParameterEstimate(0), 1.0e-12); [EOL]     Assert.assertEquals("slope std err", regressionIntOnly.getSlopeStdErr(), onlyInt.getStdErrorOfEstimate(0), 1.0E-12); [EOL]     Assert.assertEquals("number of observations", regressionIntOnly.getN(), onlyInt.getN()); [EOL]     Assert.assertEquals("r-square", regressionIntOnly.getRSquare(), onlyInt.getRSquared(), 1.0E-14); [EOL]     Assert.assertEquals("SSE", regressionIntOnly.getSumSquaredErrors(), onlyInt.getErrorSumSquares(), 1.0E-8); [EOL]     Assert.assertEquals("SSR", regressionIntOnly.getRegressionSumSquares(), onlyInt.getRegressionSumSquares(), 1.0E-8); [EOL]     Assert.assertEquals("MSE", regressionIntOnly.getMeanSquareError(), onlyInt.getMeanSquareError(), 1.0E-8); [EOL] } <line_num>: 210,256
@Test [EOL] public void testRegressExceptions() { [EOL]     final SimpleRegression noIntRegression = new SimpleRegression(false); [EOL]     noIntRegression.addData(noint2[0][1], noint2[0][0]); [EOL]     noIntRegression.addData(noint2[1][1], noint2[1][0]); [EOL]     noIntRegression.addData(noint2[2][1], noint2[2][0]); [EOL]     try { [EOL]         noIntRegression.regress(null); [EOL]         Assert.fail("Expecting MathIllegalArgumentException for null array"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         noIntRegression.regress(new int[] {}); [EOL]         Assert.fail("Expecting MathIllegalArgumentException for empty array"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         noIntRegression.regress(new int[] { 0, 1 }); [EOL]         Assert.fail("Expecting ModelSpecificationException - too many regressors"); [EOL]     } catch (ModelSpecificationException ex) { [EOL]     } [EOL]     try { [EOL]         noIntRegression.regress(new int[] { 1 }); [EOL]         Assert.fail("Expecting OutOfRangeException - invalid regression"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     final SimpleRegression regression = new SimpleRegression(true); [EOL]     regression.addData(noint2[0][1], noint2[0][0]); [EOL]     regression.addData(noint2[1][1], noint2[1][0]); [EOL]     regression.addData(noint2[2][1], noint2[2][0]); [EOL]     try { [EOL]         regression.regress(null); [EOL]         Assert.fail("Expecting MathIllegalArgumentException for null array"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         regression.regress(new int[] {}); [EOL]         Assert.fail("Expecting MathIllegalArgumentException for empty array"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         regression.regress(new int[] { 0, 1, 2 }); [EOL]         Assert.fail("Expecting ModelSpecificationException - too many regressors"); [EOL]     } catch (ModelSpecificationException ex) { [EOL]     } [EOL]     try { [EOL]         regression.regress(new int[] { 1, 0 }); [EOL]         Assert.fail("Expecting ModelSpecificationException - invalid regression"); [EOL]     } catch (ModelSpecificationException ex) { [EOL]     } [EOL]     try { [EOL]         regression.regress(new int[] { 3, 4 }); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         regression.regress(new int[] { 0, 2 }); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         regression.regress(new int[] { 2 }); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 261,340
@Test [EOL] public void testNoInterceot_noint2() { [EOL]     SimpleRegression regression = new SimpleRegression(false); [EOL]     regression.addData(noint2[0][1], noint2[0][0]); [EOL]     regression.addData(noint2[1][1], noint2[1][0]); [EOL]     regression.addData(noint2[2][1], noint2[2][0]); [EOL]     Assert.assertEquals("intercept", 0, regression.getIntercept(), 0); [EOL]     Assert.assertEquals("slope", 0.727272727272727, regression.getSlope(), 10E-12); [EOL]     Assert.assertEquals("slope std err", 0.420827318078432E-01, regression.getSlopeStdErr(), 10E-12); [EOL]     Assert.assertEquals("number of observations", 3, regression.getN()); [EOL]     Assert.assertEquals("r-square", 0.993348115299335, regression.getRSquare(), 10E-12); [EOL]     Assert.assertEquals("SSR", 40.7272727272727, regression.getRegressionSumSquares(), 10E-9); [EOL]     Assert.assertEquals("MSE", 0.136363636363636, regression.getMeanSquareError(), 10E-10); [EOL]     Assert.assertEquals("SSE", 0.272727272727273, regression.getSumSquaredErrors(), 10E-9); [EOL] } <line_num>: 342,362
@Test [EOL] public void testNoIntercept_noint1() { [EOL]     SimpleRegression regression = new SimpleRegression(false); [EOL]     for (int i = 0; i < noint1.length; i++) { [EOL]         regression.addData(noint1[i][1], noint1[i][0]); [EOL]     } [EOL]     Assert.assertEquals("intercept", 0, regression.getIntercept(), 0); [EOL]     Assert.assertEquals("slope", 2.07438016528926, regression.getSlope(), 10E-12); [EOL]     Assert.assertEquals("slope std err", 0.165289256198347E-01, regression.getSlopeStdErr(), 10E-12); [EOL]     Assert.assertEquals("number of observations", 11, regression.getN()); [EOL]     Assert.assertEquals("r-square", 0.999365492298663, regression.getRSquare(), 10E-12); [EOL]     Assert.assertEquals("SSR", 200457.727272727, regression.getRegressionSumSquares(), 10E-9); [EOL]     Assert.assertEquals("MSE", 12.7272727272727, regression.getMeanSquareError(), 10E-10); [EOL]     Assert.assertEquals("SSE", 127.272727272727, regression.getSumSquaredErrors(), 10E-9); [EOL] } <line_num>: 364,384
@Test [EOL] public void testNorris() { [EOL]     SimpleRegression regression = new SimpleRegression(); [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         regression.addData(data[i][1], data[i][0]); [EOL]     } [EOL]     Assert.assertEquals("slope", 1.00211681802045, regression.getSlope(), 10E-12); [EOL]     Assert.assertEquals("slope std err", 0.429796848199937E-03, regression.getSlopeStdErr(), 10E-12); [EOL]     Assert.assertEquals("number of observations", 36, regression.getN()); [EOL]     Assert.assertEquals("intercept", -0.262323073774029, regression.getIntercept(), 10E-12); [EOL]     Assert.assertEquals("std err intercept", 0.232818234301152, regression.getInterceptStdErr(), 10E-12); [EOL]     Assert.assertEquals("r-square", 0.999993745883712, regression.getRSquare(), 10E-12); [EOL]     Assert.assertEquals("SSR", 4255954.13232369, regression.getRegressionSumSquares(), 10E-9); [EOL]     Assert.assertEquals("MSE", 0.782864662630069, regression.getMeanSquareError(), 10E-10); [EOL]     Assert.assertEquals("SSE", 26.6173985294224, regression.getSumSquaredErrors(), 10E-9); [EOL]     Assert.assertEquals("predict(0)", -0.262323073774029, regression.predict(0), 10E-12); [EOL]     Assert.assertEquals("predict(1)", 1.00211681802045 - 0.262323073774029, regression.predict(1), 10E-12); [EOL] } <line_num>: 386,416
@Test [EOL] public void testCorr() { [EOL]     SimpleRegression regression = new SimpleRegression(); [EOL]     regression.addData(corrData); [EOL]     Assert.assertEquals("number of observations", 17, regression.getN()); [EOL]     Assert.assertEquals("r-square", .896123, regression.getRSquare(), 10E-6); [EOL]     Assert.assertEquals("r", -0.94663767742, regression.getR(), 1E-10); [EOL] } <line_num>: 418,425
@Test [EOL] public void testNaNs() { [EOL]     SimpleRegression regression = new SimpleRegression(); [EOL]     Assert.assertTrue("intercept not NaN", Double.isNaN(regression.getIntercept())); [EOL]     Assert.assertTrue("slope not NaN", Double.isNaN(regression.getSlope())); [EOL]     Assert.assertTrue("slope std err not NaN", Double.isNaN(regression.getSlopeStdErr())); [EOL]     Assert.assertTrue("intercept std err not NaN", Double.isNaN(regression.getInterceptStdErr())); [EOL]     Assert.assertTrue("MSE not NaN", Double.isNaN(regression.getMeanSquareError())); [EOL]     Assert.assertTrue("e not NaN", Double.isNaN(regression.getR())); [EOL]     Assert.assertTrue("r-square not NaN", Double.isNaN(regression.getRSquare())); [EOL]     Assert.assertTrue("RSS not NaN", Double.isNaN(regression.getRegressionSumSquares())); [EOL]     Assert.assertTrue("SSE not NaN", Double.isNaN(regression.getSumSquaredErrors())); [EOL]     Assert.assertTrue("SSTO not NaN", Double.isNaN(regression.getTotalSumSquares())); [EOL]     Assert.assertTrue("predict not NaN", Double.isNaN(regression.predict(0))); [EOL]     regression.addData(1, 2); [EOL]     regression.addData(1, 3); [EOL]     Assert.assertTrue("intercept not NaN", Double.isNaN(regression.getIntercept())); [EOL]     Assert.assertTrue("slope not NaN", Double.isNaN(regression.getSlope())); [EOL]     Assert.assertTrue("slope std err not NaN", Double.isNaN(regression.getSlopeStdErr())); [EOL]     Assert.assertTrue("intercept std err not NaN", Double.isNaN(regression.getInterceptStdErr())); [EOL]     Assert.assertTrue("MSE not NaN", Double.isNaN(regression.getMeanSquareError())); [EOL]     Assert.assertTrue("e not NaN", Double.isNaN(regression.getR())); [EOL]     Assert.assertTrue("r-square not NaN", Double.isNaN(regression.getRSquare())); [EOL]     Assert.assertTrue("RSS not NaN", Double.isNaN(regression.getRegressionSumSquares())); [EOL]     Assert.assertTrue("SSE not NaN", Double.isNaN(regression.getSumSquaredErrors())); [EOL]     Assert.assertTrue("predict not NaN", Double.isNaN(regression.predict(0))); [EOL]     Assert.assertTrue("SSTO NaN", !Double.isNaN(regression.getTotalSumSquares())); [EOL]     regression = new SimpleRegression(); [EOL]     regression.addData(1, 2); [EOL]     regression.addData(3, 3); [EOL]     Assert.assertTrue("interceptNaN", !Double.isNaN(regression.getIntercept())); [EOL]     Assert.assertTrue("slope NaN", !Double.isNaN(regression.getSlope())); [EOL]     Assert.assertTrue("slope std err not NaN", Double.isNaN(regression.getSlopeStdErr())); [EOL]     Assert.assertTrue("intercept std err not NaN", Double.isNaN(regression.getInterceptStdErr())); [EOL]     Assert.assertTrue("MSE not NaN", Double.isNaN(regression.getMeanSquareError())); [EOL]     Assert.assertTrue("r NaN", !Double.isNaN(regression.getR())); [EOL]     Assert.assertTrue("r-square NaN", !Double.isNaN(regression.getRSquare())); [EOL]     Assert.assertTrue("RSS NaN", !Double.isNaN(regression.getRegressionSumSquares())); [EOL]     Assert.assertTrue("SSE NaN", !Double.isNaN(regression.getSumSquaredErrors())); [EOL]     Assert.assertTrue("SSTO NaN", !Double.isNaN(regression.getTotalSumSquares())); [EOL]     Assert.assertTrue("predict NaN", !Double.isNaN(regression.predict(0))); [EOL]     regression.addData(1, 4); [EOL]     Assert.assertTrue("MSE NaN", !Double.isNaN(regression.getMeanSquareError())); [EOL]     Assert.assertTrue("slope std err NaN", !Double.isNaN(regression.getSlopeStdErr())); [EOL]     Assert.assertTrue("intercept std err NaN", !Double.isNaN(regression.getInterceptStdErr())); [EOL] } <line_num>: 427,484
@Test [EOL] public void testClear() { [EOL]     SimpleRegression regression = new SimpleRegression(); [EOL]     regression.addData(corrData); [EOL]     Assert.assertEquals("number of observations", 17, regression.getN()); [EOL]     regression.clear(); [EOL]     Assert.assertEquals("number of observations", 0, regression.getN()); [EOL]     regression.addData(corrData); [EOL]     Assert.assertEquals("r-square", .896123, regression.getRSquare(), 10E-6); [EOL]     regression.addData(data); [EOL]     Assert.assertEquals("number of observations", 53, regression.getN()); [EOL] } <line_num>: 486,497
@Test [EOL] public void testInference() { [EOL]     SimpleRegression regression = new SimpleRegression(); [EOL]     regression.addData(infData); [EOL]     Assert.assertEquals("slope std err", 0.011448491, regression.getSlopeStdErr(), 1E-10); [EOL]     Assert.assertEquals("std err intercept", 0.286036932, regression.getInterceptStdErr(), 1E-8); [EOL]     Assert.assertEquals("significance", 4.596e-07, regression.getSignificance(), 1E-8); [EOL]     Assert.assertEquals("slope conf interval half-width", 0.0270713794287, regression.getSlopeConfidenceInterval(), 1E-8); [EOL]     regression = new SimpleRegression(); [EOL]     regression.addData(infData2); [EOL]     Assert.assertEquals("slope std err", 1.07260253, regression.getSlopeStdErr(), 1E-8); [EOL]     Assert.assertEquals("std err intercept", 4.17718672, regression.getInterceptStdErr(), 1E-8); [EOL]     Assert.assertEquals("significance", 0.261829133982, regression.getSignificance(), 1E-11); [EOL]     Assert.assertEquals("slope conf interval half-width", 2.97802204827, regression.getSlopeConfidenceInterval(), 1E-8); [EOL]     Assert.assertTrue("tighter means wider", regression.getSlopeConfidenceInterval() < regression.getSlopeConfidenceInterval(0.01)); [EOL]     try { [EOL]         regression.getSlopeConfidenceInterval(1); [EOL]         Assert.fail("expecting MathIllegalArgumentException for alpha = 1"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 499,537
@Test [EOL] public void testPerfect() { [EOL]     SimpleRegression regression = new SimpleRegression(); [EOL]     int n = 100; [EOL]     for (int i = 0; i < n; i++) { [EOL]         regression.addData(((double) i) / (n - 1), i); [EOL]     } [EOL]     Assert.assertEquals(0.0, regression.getSignificance(), 1.0e-5); [EOL]     Assert.assertTrue(regression.getSlope() > 0.0); [EOL]     Assert.assertTrue(regression.getSumSquaredErrors() >= 0.0); [EOL] } <line_num>: 539,549
@Test [EOL] public void testPerfectNegative() { [EOL]     SimpleRegression regression = new SimpleRegression(); [EOL]     int n = 100; [EOL]     for (int i = 0; i < n; i++) { [EOL]         regression.addData(-((double) i) / (n - 1), i); [EOL]     } [EOL]     Assert.assertEquals(0.0, regression.getSignificance(), 1.0e-5); [EOL]     Assert.assertTrue(regression.getSlope() < 0.0); [EOL] } <line_num>: 551,561
@Test [EOL] public void testRandom() { [EOL]     SimpleRegression regression = new SimpleRegression(); [EOL]     Random random = new Random(1); [EOL]     int n = 100; [EOL]     for (int i = 0; i < n; i++) { [EOL]         regression.addData(((double) i) / (n - 1), random.nextDouble()); [EOL]     } [EOL]     Assert.assertTrue(0.0 < regression.getSignificance() && regression.getSignificance() < 1.0); [EOL] } <line_num>: 563,574
@Test [EOL] public void testSSENonNegative() { [EOL]     double[] y = { 8915.102, 8919.302, 8923.502 }; [EOL]     double[] x = { 1.107178495E2, 1.107264895E2, 1.107351295E2 }; [EOL]     SimpleRegression reg = new SimpleRegression(); [EOL]     for (int i = 0; i < x.length; i++) { [EOL]         reg.addData(x[i], y[i]); [EOL]     } [EOL]     Assert.assertTrue(reg.getSumSquaredErrors() >= 0.0); [EOL] } <line_num>: 578,587
@Test [EOL] public void testRemoveXY() { [EOL]     SimpleRegression regression = new SimpleRegression(); [EOL]     regression.addData(infData); [EOL]     regression.removeData(removeX, removeY); [EOL]     regression.addData(removeX, removeY); [EOL]     Assert.assertEquals("slope std err", 0.011448491, regression.getSlopeStdErr(), 1E-10); [EOL]     Assert.assertEquals("std err intercept", 0.286036932, regression.getInterceptStdErr(), 1E-8); [EOL]     Assert.assertEquals("significance", 4.596e-07, regression.getSignificance(), 1E-8); [EOL]     Assert.assertEquals("slope conf interval half-width", 0.0270713794287, regression.getSlopeConfidenceInterval(), 1E-8); [EOL] } <line_num>: 590,606
@Test [EOL] public void testRemoveSingle() { [EOL]     SimpleRegression regression = new SimpleRegression(); [EOL]     regression.addData(infData); [EOL]     regression.removeData(removeSingle); [EOL]     regression.addData(removeSingle); [EOL]     Assert.assertEquals("slope std err", 0.011448491, regression.getSlopeStdErr(), 1E-10); [EOL]     Assert.assertEquals("std err intercept", 0.286036932, regression.getInterceptStdErr(), 1E-8); [EOL]     Assert.assertEquals("significance", 4.596e-07, regression.getSignificance(), 1E-8); [EOL]     Assert.assertEquals("slope conf interval half-width", 0.0270713794287, regression.getSlopeConfidenceInterval(), 1E-8); [EOL] } <line_num>: 610,626
@Test [EOL] public void testRemoveMultiple() { [EOL]     SimpleRegression regression = new SimpleRegression(); [EOL]     regression.addData(infData); [EOL]     regression.removeData(removeMultiple); [EOL]     regression.addData(removeMultiple); [EOL]     Assert.assertEquals("slope std err", 0.011448491, regression.getSlopeStdErr(), 1E-10); [EOL]     Assert.assertEquals("std err intercept", 0.286036932, regression.getInterceptStdErr(), 1E-8); [EOL]     Assert.assertEquals("significance", 4.596e-07, regression.getSignificance(), 1E-8); [EOL]     Assert.assertEquals("slope conf interval half-width", 0.0270713794287, regression.getSlopeConfidenceInterval(), 1E-8); [EOL] } <line_num>: 629,645
@Test [EOL] public void testRemoveObsFromEmpty() { [EOL]     SimpleRegression regression = new SimpleRegression(); [EOL]     regression.removeData(removeX, removeY); [EOL]     Assert.assertEquals(regression.getN(), 0); [EOL] } <line_num>: 648,653
@Test [EOL] public void testRemoveObsFromSingle() { [EOL]     SimpleRegression regression = new SimpleRegression(); [EOL]     regression.addData(removeX, removeY); [EOL]     regression.removeData(removeX, removeY); [EOL]     Assert.assertEquals(regression.getN(), 0); [EOL] } <line_num>: 656,662
@Test [EOL] public void testRemoveMultipleToEmpty() { [EOL]     SimpleRegression regression = new SimpleRegression(); [EOL]     regression.addData(removeMultiple); [EOL]     regression.removeData(removeMultiple); [EOL]     Assert.assertEquals(regression.getN(), 0); [EOL] } <line_num>: 665,671
@Test [EOL] public void testRemoveMultiplePastEmpty() { [EOL]     SimpleRegression regression = new SimpleRegression(); [EOL]     regression.addData(removeX, removeY); [EOL]     regression.removeData(removeMultiple); [EOL]     Assert.assertEquals(regression.getN(), 0); [EOL] } <line_num>: 674,680
