@Before [EOL] public void setUp() { [EOL]     regression = createRegression(); [EOL] } <line_num>: 31,34
protected abstract AbstractMultipleLinearRegression createRegression(); <line_num>: 36,36
protected abstract int getNumberOfRegressors(); <line_num>: 38,38
protected abstract int getSampleSize(); <line_num>: 40,40
@Test [EOL] public void canEstimateRegressionParameters() { [EOL]     double[] beta = regression.estimateRegressionParameters(); [EOL]     Assert.assertEquals(getNumberOfRegressors(), beta.length); [EOL] } <line_num>: 42,46
@Test [EOL] public void canEstimateResiduals() { [EOL]     double[] e = regression.estimateResiduals(); [EOL]     Assert.assertEquals(getSampleSize(), e.length); [EOL] } <line_num>: 48,52
@Test [EOL] public void canEstimateRegressionParametersVariance() { [EOL]     double[][] variance = regression.estimateRegressionParametersVariance(); [EOL]     Assert.assertEquals(getNumberOfRegressors(), variance.length); [EOL] } <line_num>: 54,58
@Test [EOL] public void canEstimateRegressandVariance() { [EOL]     if (getSampleSize() > getNumberOfRegressors()) { [EOL]         double variance = regression.estimateRegressandVariance(); [EOL]         Assert.assertTrue(variance > 0.0); [EOL]     } [EOL] } <line_num>: 60,66
@Test [EOL] public void testNewSample() { [EOL]     double[] design = new double[] { 1, 19, 22, 33, 2, 20, 30, 40, 3, 25, 35, 45, 4, 27, 37, 47 }; [EOL]     double[] y = new double[] { 1, 2, 3, 4 }; [EOL]     double[][] x = new double[][] { { 19, 22, 33 }, { 20, 30, 40 }, { 25, 35, 45 }, { 27, 37, 47 } }; [EOL]     AbstractMultipleLinearRegression regression = createRegression(); [EOL]     regression.newSampleData(design, 4, 3); [EOL]     RealMatrix flatX = regression.getX().copy(); [EOL]     RealVector flatY = regression.getY().copy(); [EOL]     regression.newXSampleData(x); [EOL]     regression.newYSampleData(y); [EOL]     Assert.assertEquals(flatX, regression.getX()); [EOL]     Assert.assertEquals(flatY, regression.getY()); [EOL]     regression.setNoIntercept(true); [EOL]     regression.newSampleData(design, 4, 3); [EOL]     flatX = regression.getX().copy(); [EOL]     flatY = regression.getY().copy(); [EOL]     regression.newXSampleData(x); [EOL]     regression.newYSampleData(y); [EOL]     Assert.assertEquals(flatX, regression.getX()); [EOL]     Assert.assertEquals(flatY, regression.getY()); [EOL] } <line_num>: 72,105
@Test(expected = IllegalArgumentException.class) [EOL] public void testNewSampleNullData() { [EOL]     double[] data = null; [EOL]     createRegression().newSampleData(data, 2, 3); [EOL] } <line_num>: 107,111
@Test(expected = IllegalArgumentException.class) [EOL] public void testNewSampleInvalidData() { [EOL]     double[] data = new double[] { 1, 2, 3, 4 }; [EOL]     createRegression().newSampleData(data, 2, 3); [EOL] } <line_num>: 113,117
@Test(expected = IllegalArgumentException.class) [EOL] public void testNewSampleInsufficientData() { [EOL]     double[] data = new double[] { 1, 2, 3, 4 }; [EOL]     createRegression().newSampleData(data, 1, 3); [EOL] } <line_num>: 119,123
@Test(expected = IllegalArgumentException.class) [EOL] public void testXSampleDataNull() { [EOL]     createRegression().newXSampleData(null); [EOL] } <line_num>: 125,128
@Test(expected = IllegalArgumentException.class) [EOL] public void testYSampleDataNull() { [EOL]     createRegression().newYSampleData(null); [EOL] } <line_num>: 130,133
