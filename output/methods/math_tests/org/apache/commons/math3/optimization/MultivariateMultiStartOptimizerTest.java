public Rosenbrock() { [EOL]     count = 0; [EOL] } <line_num>: 59,61
@Test [EOL] public void testRosenbrock() { [EOL]     Rosenbrock rosenbrock = new Rosenbrock(); [EOL]     SimplexOptimizer underlying = new SimplexOptimizer(new SimpleValueChecker(-1, 1.0e-3)); [EOL]     NelderMeadSimplex simplex = new NelderMeadSimplex(new double[][] { { -1.2, 1.0 }, { 0.9, 1.2 }, { 3.5, -2.3 } }); [EOL]     underlying.setSimplex(simplex); [EOL]     JDKRandomGenerator g = new JDKRandomGenerator(); [EOL]     g.setSeed(16069223052l); [EOL]     RandomVectorGenerator generator = new UncorrelatedRandomVectorGenerator(2, new GaussianRandomGenerator(g)); [EOL]     MultivariateMultiStartOptimizer optimizer = new MultivariateMultiStartOptimizer(underlying, 10, generator); [EOL]     PointValuePair optimum = optimizer.optimize(1100, rosenbrock, GoalType.MINIMIZE, new double[] { -1.2, 1.0 }); [EOL]     Assert.assertEquals(rosenbrock.getCount(), optimizer.getEvaluations()); [EOL]     Assert.assertTrue(optimizer.getEvaluations() > 900); [EOL]     Assert.assertTrue(optimizer.getEvaluations() < 1200); [EOL]     Assert.assertTrue(optimum.getValue() < 8.0e-4); [EOL] } <line_num>: 32,54
public double value(double[] x) { [EOL]     ++count; [EOL]     double a = x[1] - x[0] * x[0]; [EOL]     double b = 1.0 - x[0]; [EOL]     return 100 * a * a + b * b; [EOL] } <line_num>: 63,68
public int getCount() { [EOL]     return count; [EOL] } <line_num>: 70,72
