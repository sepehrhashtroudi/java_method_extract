public LinearProblem(double[][] factors, double[] target) { [EOL]     this.factors = new BlockRealMatrix(factors); [EOL]     this.target = target; [EOL] } <line_num>: 218,221
public PointVectorValuePair optimize(int maxEval, MultivariateDifferentiableVectorFunction f, double[] target, double[] weight, double[] startPoint) { [EOL]     return gn.optimize(maxEval, f, target, weight, startPoint); [EOL] } <line_num>: 111,117
public int getMaxEvaluations() { [EOL]     return gn.getMaxEvaluations(); [EOL] } <line_num>: 119,121
public int getEvaluations() { [EOL]     return gn.getEvaluations(); [EOL] } <line_num>: 123,125
public ConvergenceChecker<PointVectorValuePair> getConvergenceChecker() { [EOL]     return gn.getConvergenceChecker(); [EOL] } <line_num>: 127,129
@Test [EOL] public void testTrivial() { [EOL]     LinearProblem problem = new LinearProblem(new double[][] { { 2 } }, new double[] { 3 }); [EOL]     MultivariateDifferentiableVectorOptimizer underlyingOptimizer = new MultivariateDifferentiableVectorOptimizer() { [EOL]  [EOL]         private GaussNewtonOptimizer gn = new GaussNewtonOptimizer(true, new SimpleVectorValueChecker(1.0e-6, 1.0e-6)); [EOL]  [EOL]         public PointVectorValuePair optimize(int maxEval, MultivariateDifferentiableVectorFunction f, double[] target, double[] weight, double[] startPoint) { [EOL]             return gn.optimize(maxEval, f, target, weight, startPoint); [EOL]         } [EOL]  [EOL]         public int getMaxEvaluations() { [EOL]             return gn.getMaxEvaluations(); [EOL]         } [EOL]  [EOL]         public int getEvaluations() { [EOL]             return gn.getEvaluations(); [EOL]         } [EOL]  [EOL]         public ConvergenceChecker<PointVectorValuePair> getConvergenceChecker() { [EOL]             return gn.getConvergenceChecker(); [EOL]         } [EOL]     }; [EOL]     JDKRandomGenerator g = new JDKRandomGenerator(); [EOL]     g.setSeed(16069223052l); [EOL]     RandomVectorGenerator generator = new UncorrelatedRandomVectorGenerator(1, new GaussianRandomGenerator(g)); [EOL]     MultivariateDifferentiableVectorMultiStartOptimizer optimizer = new MultivariateDifferentiableVectorMultiStartOptimizer(underlyingOptimizer, 10, generator); [EOL]     try { [EOL]         optimizer.getOptima(); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (MathIllegalStateException ise) { [EOL]     } [EOL]     PointVectorValuePair optimum = optimizer.optimize(100, problem, problem.target, new double[] { 1 }, new double[] { 0 }); [EOL]     Assert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10); [EOL]     Assert.assertEquals(3.0, optimum.getValue()[0], 1.0e-10); [EOL]     PointVectorValuePair[] optima = optimizer.getOptima(); [EOL]     Assert.assertEquals(10, optima.length); [EOL]     for (int i = 0; i < optima.length; ++i) { [EOL]         Assert.assertEquals(1.5, optima[i].getPoint()[0], 1.0e-10); [EOL]         Assert.assertEquals(3.0, optima[i].getValue()[0], 1.0e-10); [EOL]     } [EOL]     Assert.assertTrue(optimizer.getEvaluations() > 20); [EOL]     Assert.assertTrue(optimizer.getEvaluations() < 50); [EOL]     Assert.assertEquals(100, optimizer.getMaxEvaluations()); [EOL] } <line_num>: 98,159
public PointVectorValuePair optimize(int maxEval, MultivariateDifferentiableVectorFunction f, double[] target, double[] weight, double[] startPoint) { [EOL]     return gn.optimize(maxEval, f, target, weight, startPoint); [EOL] } <line_num>: 173,179
public int getMaxEvaluations() { [EOL]     return gn.getMaxEvaluations(); [EOL] } <line_num>: 181,183
public int getEvaluations() { [EOL]     return gn.getEvaluations(); [EOL] } <line_num>: 185,187
public ConvergenceChecker<PointVectorValuePair> getConvergenceChecker() { [EOL]     return gn.getConvergenceChecker(); [EOL] } <line_num>: 189,191
public double[] value(double[] point) { [EOL]     throw new TestException(); [EOL] } <line_num>: 201,203
public DerivativeStructure[] value(DerivativeStructure[] point) { [EOL]     return point; [EOL] } <line_num>: 204,206
@Test(expected = TestException.class) [EOL] public void testNoOptimum() { [EOL]     MultivariateDifferentiableVectorOptimizer underlyingOptimizer = new MultivariateDifferentiableVectorOptimizer() { [EOL]  [EOL]         private GaussNewtonOptimizer gn = new GaussNewtonOptimizer(true, new SimpleVectorValueChecker(1.0e-6, 1.0e-6)); [EOL]  [EOL]         public PointVectorValuePair optimize(int maxEval, MultivariateDifferentiableVectorFunction f, double[] target, double[] weight, double[] startPoint) { [EOL]             return gn.optimize(maxEval, f, target, weight, startPoint); [EOL]         } [EOL]  [EOL]         public int getMaxEvaluations() { [EOL]             return gn.getMaxEvaluations(); [EOL]         } [EOL]  [EOL]         public int getEvaluations() { [EOL]             return gn.getEvaluations(); [EOL]         } [EOL]  [EOL]         public ConvergenceChecker<PointVectorValuePair> getConvergenceChecker() { [EOL]             return gn.getConvergenceChecker(); [EOL]         } [EOL]     }; [EOL]     JDKRandomGenerator g = new JDKRandomGenerator(); [EOL]     g.setSeed(12373523445l); [EOL]     RandomVectorGenerator generator = new UncorrelatedRandomVectorGenerator(1, new GaussianRandomGenerator(g)); [EOL]     MultivariateDifferentiableVectorMultiStartOptimizer optimizer = new MultivariateDifferentiableVectorMultiStartOptimizer(underlyingOptimizer, 10, generator); [EOL]     optimizer.optimize(100, new MultivariateDifferentiableVectorFunction() { [EOL]  [EOL]         public double[] value(double[] point) { [EOL]             throw new TestException(); [EOL]         } [EOL]  [EOL]         public DerivativeStructure[] value(DerivativeStructure[] point) { [EOL]             return point; [EOL]         } [EOL]     }, new double[] { 2 }, new double[] { 1 }, new double[] { 0 }); [EOL] } <line_num>: 161,208
public double[] value(double[] variables) { [EOL]     return factors.operate(variables); [EOL] } <line_num>: 223,225
public DerivativeStructure[] value(DerivativeStructure[] variables) { [EOL]     DerivativeStructure[] y = new DerivativeStructure[factors.getRowDimension()]; [EOL]     for (int i = 0; i < y.length; ++i) { [EOL]         y[i] = variables[0].getField().getZero(); [EOL]         for (int j = 0; j < factors.getColumnDimension(); ++j) { [EOL]             y[i] = y[i].add(variables[j].multiply(factors.getEntry(i, j))); [EOL]         } [EOL]     } [EOL]     return y; [EOL] } <line_num>: 227,236
