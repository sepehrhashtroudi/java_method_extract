public CircleVectorial() { [EOL]     points = new ArrayList<Vector2D>(); [EOL] } <line_num>: 32,34
public void addPoint(double px, double py) { [EOL]     points.add(new Vector2D(px, py)); [EOL] } <line_num>: 36,38
public int getN() { [EOL]     return points.size(); [EOL] } <line_num>: 40,42
public double getRadius(Vector2D center) { [EOL]     double r = 0; [EOL]     for (Vector2D point : points) { [EOL]         r += point.distance(center); [EOL]     } [EOL]     return r / points.size(); [EOL] } <line_num>: 44,50
private DerivativeStructure distance(Vector2D point, DerivativeStructure cx, DerivativeStructure cy) { [EOL]     DerivativeStructure dx = cx.subtract(point.getX()); [EOL]     DerivativeStructure dy = cy.subtract(point.getY()); [EOL]     return dx.multiply(dx).add(dy.multiply(dy)).sqrt(); [EOL] } <line_num>: 52,57
public DerivativeStructure getRadius(DerivativeStructure cx, DerivativeStructure cy) { [EOL]     DerivativeStructure r = cx.getField().getZero(); [EOL]     for (Vector2D point : points) { [EOL]         r = r.add(distance(point, cx, cy)); [EOL]     } [EOL]     return r.divide(points.size()); [EOL] } <line_num>: 59,65
public double[] value(double[] variables) { [EOL]     Vector2D center = new Vector2D(variables[0], variables[1]); [EOL]     double radius = getRadius(center); [EOL]     double[] residuals = new double[points.size()]; [EOL]     for (int i = 0; i < residuals.length; ++i) { [EOL]         residuals[i] = points.get(i).distance(center) - radius; [EOL]     } [EOL]     return residuals; [EOL] } <line_num>: 67,77
public DerivativeStructure[] value(DerivativeStructure[] variables) { [EOL]     DerivativeStructure radius = getRadius(variables[0], variables[1]); [EOL]     DerivativeStructure[] residuals = new DerivativeStructure[points.size()]; [EOL]     for (int i = 0; i < residuals.length; ++i) { [EOL]         residuals[i] = distance(points.get(i), variables[0], variables[1]).subtract(radius); [EOL]     } [EOL]     return residuals; [EOL] } <line_num>: 79,88
