public PointValuePair optimize(int maxEval, MultivariateDifferentiableFunction f, GoalType goalType, double[] startPoint) { [EOL]     return cg.optimize(maxEval, f, goalType, startPoint); [EOL] } <line_num>: 52,57
public int getMaxEvaluations() { [EOL]     return cg.getMaxEvaluations(); [EOL] } <line_num>: 59,61
public int getEvaluations() { [EOL]     return cg.getEvaluations(); [EOL] } <line_num>: 63,65
public ConvergenceChecker<PointValuePair> getConvergenceChecker() { [EOL]     return cg.getConvergenceChecker(); [EOL] } <line_num>: 67,69
@Test [EOL] public void testCircleFitting() { [EOL]     CircleScalar circle = new CircleScalar(); [EOL]     circle.addPoint(30.0, 68.0); [EOL]     circle.addPoint(50.0, -6.0); [EOL]     circle.addPoint(110.0, -20.0); [EOL]     circle.addPoint(35.0, 15.0); [EOL]     circle.addPoint(45.0, 97.0); [EOL]     MultivariateDifferentiableOptimizer underlying = new MultivariateDifferentiableOptimizer() { [EOL]  [EOL]         private final NonLinearConjugateGradientOptimizer cg = new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE, new SimpleValueChecker(1.0e-10, 1.0e-10)); [EOL]  [EOL]         public PointValuePair optimize(int maxEval, MultivariateDifferentiableFunction f, GoalType goalType, double[] startPoint) { [EOL]             return cg.optimize(maxEval, f, goalType, startPoint); [EOL]         } [EOL]  [EOL]         public int getMaxEvaluations() { [EOL]             return cg.getMaxEvaluations(); [EOL]         } [EOL]  [EOL]         public int getEvaluations() { [EOL]             return cg.getEvaluations(); [EOL]         } [EOL]  [EOL]         public ConvergenceChecker<PointValuePair> getConvergenceChecker() { [EOL]             return cg.getConvergenceChecker(); [EOL]         } [EOL]     }; [EOL]     JDKRandomGenerator g = new JDKRandomGenerator(); [EOL]     g.setSeed(753289573253l); [EOL]     RandomVectorGenerator generator = new UncorrelatedRandomVectorGenerator(new double[] { 50.0, 50.0 }, new double[] { 10.0, 10.0 }, new GaussianRandomGenerator(g)); [EOL]     MultivariateDifferentiableMultiStartOptimizer optimizer = new MultivariateDifferentiableMultiStartOptimizer(underlying, 10, generator); [EOL]     PointValuePair optimum = optimizer.optimize(200, circle, GoalType.MINIMIZE, new double[] { 98.680, 47.345 }); [EOL]     Assert.assertEquals(200, optimizer.getMaxEvaluations()); [EOL]     PointValuePair[] optima = optimizer.getOptima(); [EOL]     for (PointValuePair o : optima) { [EOL]         Vector2D center = new Vector2D(o.getPointRef()[0], o.getPointRef()[1]); [EOL]         Assert.assertEquals(69.960161753, circle.getRadius(center), 1.0e-8); [EOL]         Assert.assertEquals(96.075902096, center.getX(), 1.0e-8); [EOL]         Assert.assertEquals(48.135167894, center.getY(), 1.0e-8); [EOL]     } [EOL]     Assert.assertTrue(optimizer.getEvaluations() > 70); [EOL]     Assert.assertTrue(optimizer.getEvaluations() < 90); [EOL]     Assert.assertEquals(3.1267527, optimum.getValue(), 1.0e-8); [EOL] } <line_num>: 35,91
