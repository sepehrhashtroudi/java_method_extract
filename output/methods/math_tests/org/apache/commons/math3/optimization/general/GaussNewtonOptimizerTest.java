@Override [EOL] public AbstractLeastSquaresOptimizer createOptimizer() { [EOL]     return new GaussNewtonOptimizer(new SimpleVectorValueChecker(1.0e-6, 1.0e-6)); [EOL] } <line_num>: 92,95
@Override [EOL] @Test(expected = ConvergenceException.class) [EOL] public void testMoreEstimatedParametersSimple() { [EOL]     super.testMoreEstimatedParametersSimple(); [EOL] } <line_num>: 97,104
@Override [EOL] @Test(expected = ConvergenceException.class) [EOL] public void testMoreEstimatedParametersUnsorted() { [EOL]     super.testMoreEstimatedParametersUnsorted(); [EOL] } <line_num>: 106,113
@Test(expected = TooManyEvaluationsException.class) [EOL] public void testMaxEvaluations() throws Exception { [EOL]     CircleVectorial circle = new CircleVectorial(); [EOL]     circle.addPoint(30.0, 68.0); [EOL]     circle.addPoint(50.0, -6.0); [EOL]     circle.addPoint(110.0, -20.0); [EOL]     circle.addPoint(35.0, 15.0); [EOL]     circle.addPoint(45.0, 97.0); [EOL]     GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(new SimpleVectorValueChecker(1.0e-30, 1.0e-30)); [EOL]     optimizer.optimize(100, circle, new double[] { 0, 0, 0, 0, 0 }, new double[] { 1, 1, 1, 1, 1 }, new double[] { 98.680, 47.345 }); [EOL] } <line_num>: 115,130
@Override [EOL] @Test(expected = ConvergenceException.class) [EOL] public void testCircleFittingBadInit() { [EOL]     super.testCircleFittingBadInit(); [EOL] } <line_num>: 132,139
@Override [EOL] @Test(expected = ConvergenceException.class) [EOL] public void testHahn1() throws IOException { [EOL]     super.testHahn1(); [EOL] } <line_num>: 141,150
