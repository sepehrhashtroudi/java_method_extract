public CircleProblem(double xError, double yError) { [EOL]     points = new ArrayList<Vector2D>(); [EOL]     xSigma = xError; [EOL]     ySigma = yError; [EOL] } <line_num>: 53,58
public void addPoint(Vector2D p) { [EOL]     points.add(p); [EOL] } <line_num>: 60,62
public double[] target() { [EOL]     final double[] t = new double[points.size() * 2]; [EOL]     for (int i = 0; i < points.size(); i++) { [EOL]         final Vector2D p = points.get(i); [EOL]         final int index = i * 2; [EOL]         t[index] = p.getX(); [EOL]         t[index + 1] = p.getY(); [EOL]     } [EOL]     return t; [EOL] } <line_num>: 64,74
public double[] weight() { [EOL]     final double wX = 1 / (xSigma * xSigma); [EOL]     final double wY = 1 / (ySigma * ySigma); [EOL]     final double[] w = new double[points.size() * 2]; [EOL]     for (int i = 0; i < points.size(); i++) { [EOL]         final int index = i * 2; [EOL]         w[index] = wX; [EOL]         w[index + 1] = wY; [EOL]     } [EOL]     return w; [EOL] } <line_num>: 76,87
public double[] value(double[] params) { [EOL]     final double cx = params[0]; [EOL]     final double cy = params[1]; [EOL]     final double r = params[2]; [EOL]     final double[] model = new double[points.size() * 2]; [EOL]     for (int i = 0; i < points.size(); i++) { [EOL]         final Vector2D p = points.get(i); [EOL]         final double dX = cx - p.getX(); [EOL]         final double dY = cy - p.getY(); [EOL]         final double scaling = r / FastMath.hypot(dX, dY); [EOL]         final int index = i * 2; [EOL]         model[index] = cx - scaling * dX; [EOL]         model[index + 1] = cy - scaling * dY; [EOL]     } [EOL]     return model; [EOL] } <line_num>: 89,111
public DerivativeStructure[] value(DerivativeStructure[] params) { [EOL]     final DerivativeStructure cx = params[0]; [EOL]     final DerivativeStructure cy = params[1]; [EOL]     final DerivativeStructure r = params[2]; [EOL]     final DerivativeStructure[] model = new DerivativeStructure[points.size() * 2]; [EOL]     for (int i = 0; i < points.size(); i++) { [EOL]         final Vector2D p = points.get(i); [EOL]         final DerivativeStructure dX = cx.subtract(p.getX()); [EOL]         final DerivativeStructure dY = cy.subtract(p.getY()); [EOL]         final DerivativeStructure scaling = r.divide(dX.multiply(dX).add(dY.multiply(dY)).sqrt()); [EOL]         final int index = i * 2; [EOL]         model[index] = cx.subtract(scaling.multiply(dX)); [EOL]         model[index + 1] = cy.subtract(scaling.multiply(dY)); [EOL]     } [EOL]     return model; [EOL] } <line_num>: 113,136
