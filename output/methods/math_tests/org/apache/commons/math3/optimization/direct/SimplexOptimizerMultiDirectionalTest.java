public Gaussian2D(double xOpt, double yOpt, double std) { [EOL]     maximumPosition = new double[] { xOpt, yOpt }; [EOL]     this.std = std; [EOL] } <line_num>: 183,186
@Test [EOL] public void testMinimize1() { [EOL]     SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30); [EOL]     optimizer.setSimplex(new MultiDirectionalSimplex(new double[] { 0.2, 0.2 })); [EOL]     final FourExtrema fourExtrema = new FourExtrema(); [EOL]     final PointValuePair optimum = optimizer.optimize(200, fourExtrema, GoalType.MINIMIZE, new double[] { -3, 0 }); [EOL]     Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 4e-6); [EOL]     Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6); [EOL]     Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 8e-13); [EOL]     Assert.assertTrue(optimizer.getEvaluations() > 120); [EOL]     Assert.assertTrue(optimizer.getEvaluations() < 150); [EOL] } <line_num>: 29,42
@Test [EOL] public void testMinimize2() { [EOL]     SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30); [EOL]     optimizer.setSimplex(new MultiDirectionalSimplex(new double[] { 0.2, 0.2 })); [EOL]     final FourExtrema fourExtrema = new FourExtrema(); [EOL]     final PointValuePair optimum = optimizer.optimize(200, fourExtrema, GoalType.MINIMIZE, new double[] { 1, 0 }); [EOL]     Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8); [EOL]     Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6); [EOL]     Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 2e-12); [EOL]     Assert.assertTrue(optimizer.getEvaluations() > 120); [EOL]     Assert.assertTrue(optimizer.getEvaluations() < 150); [EOL] } <line_num>: 44,57
@Test [EOL] public void testMaximize1() { [EOL]     SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30); [EOL]     optimizer.setSimplex(new MultiDirectionalSimplex(new double[] { 0.2, 0.2 })); [EOL]     final FourExtrema fourExtrema = new FourExtrema(); [EOL]     final PointValuePair optimum = optimizer.optimize(200, fourExtrema, GoalType.MAXIMIZE, new double[] { -3.0, 0.0 }); [EOL]     Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 7e-7); [EOL]     Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-7); [EOL]     Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 2e-14); [EOL]     Assert.assertTrue(optimizer.getEvaluations() > 120); [EOL]     Assert.assertTrue(optimizer.getEvaluations() < 150); [EOL] } <line_num>: 59,72
@Test [EOL] public void testMaximize2() { [EOL]     SimplexOptimizer optimizer = new SimplexOptimizer(new SimpleValueChecker(1e-15, 1e-30)); [EOL]     optimizer.setSimplex(new MultiDirectionalSimplex(new double[] { 0.2, 0.2 })); [EOL]     final FourExtrema fourExtrema = new FourExtrema(); [EOL]     final PointValuePair optimum = optimizer.optimize(200, fourExtrema, GoalType.MAXIMIZE, new double[] { 1, 0 }); [EOL]     Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8); [EOL]     Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6); [EOL]     Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 2e-12); [EOL]     Assert.assertTrue(optimizer.getEvaluations() > 180); [EOL]     Assert.assertTrue(optimizer.getEvaluations() < 220); [EOL] } <line_num>: 74,87
public double value(double[] x) { [EOL]     ++count; [EOL]     double a = x[1] - x[0] * x[0]; [EOL]     double b = 1.0 - x[0]; [EOL]     return 100 * a * a + b * b; [EOL] } <line_num>: 93,98
@Test [EOL] public void testRosenbrock() { [EOL]     MultivariateFunction rosenbrock = new MultivariateFunction() { [EOL]  [EOL]         public double value(double[] x) { [EOL]             ++count; [EOL]             double a = x[1] - x[0] * x[0]; [EOL]             double b = 1.0 - x[0]; [EOL]             return 100 * a * a + b * b; [EOL]         } [EOL]     }; [EOL]     count = 0; [EOL]     SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3); [EOL]     optimizer.setSimplex(new MultiDirectionalSimplex(new double[][] { { -1.2, 1.0 }, { 0.9, 1.2 }, { 3.5, -2.3 } })); [EOL]     PointValuePair optimum = optimizer.optimize(100, rosenbrock, GoalType.MINIMIZE, new double[] { -1.2, 1 }); [EOL]     Assert.assertEquals(count, optimizer.getEvaluations()); [EOL]     Assert.assertTrue(optimizer.getEvaluations() > 50); [EOL]     Assert.assertTrue(optimizer.getEvaluations() < 100); [EOL]     Assert.assertTrue(optimum.getValue() > 1e-2); [EOL] } <line_num>: 89,113
public double value(double[] x) { [EOL]     ++count; [EOL]     double a = x[0] + 10 * x[1]; [EOL]     double b = x[2] - x[3]; [EOL]     double c = x[1] - 2 * x[2]; [EOL]     double d = x[0] - x[3]; [EOL]     return a * a + 5 * b * b + c * c * c * c + 10 * d * d * d * d; [EOL] } <line_num>: 119,126
@Test [EOL] public void testPowell() { [EOL]     MultivariateFunction powell = new MultivariateFunction() { [EOL]  [EOL]         public double value(double[] x) { [EOL]             ++count; [EOL]             double a = x[0] + 10 * x[1]; [EOL]             double b = x[2] - x[3]; [EOL]             double c = x[1] - 2 * x[2]; [EOL]             double d = x[0] - x[3]; [EOL]             return a * a + 5 * b * b + c * c * c * c + 10 * d * d * d * d; [EOL]         } [EOL]     }; [EOL]     count = 0; [EOL]     SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3); [EOL]     optimizer.setSimplex(new MultiDirectionalSimplex(4)); [EOL]     PointValuePair optimum = optimizer.optimize(1000, powell, GoalType.MINIMIZE, new double[] { 3, -1, 0, 1 }); [EOL]     Assert.assertEquals(count, optimizer.getEvaluations()); [EOL]     Assert.assertTrue(optimizer.getEvaluations() > 800); [EOL]     Assert.assertTrue(optimizer.getEvaluations() < 900); [EOL]     Assert.assertTrue(optimum.getValue() > 1e-2); [EOL] } <line_num>: 115,138
@Test [EOL] public void testMath283() { [EOL]     SimplexOptimizer optimizer = new SimplexOptimizer(1e-14, 1e-14); [EOL]     optimizer.setSimplex(new MultiDirectionalSimplex(2)); [EOL]     final Gaussian2D function = new Gaussian2D(0, 0, 1); [EOL]     PointValuePair estimate = optimizer.optimize(1000, function, GoalType.MAXIMIZE, function.getMaximumPosition()); [EOL]     final double EPSILON = 1e-5; [EOL]     final double expectedMaximum = function.getMaximum(); [EOL]     final double actualMaximum = estimate.getValue(); [EOL]     Assert.assertEquals(expectedMaximum, actualMaximum, EPSILON); [EOL]     final double[] expectedPosition = function.getMaximumPosition(); [EOL]     final double[] actualPosition = estimate.getPoint(); [EOL]     Assert.assertEquals(expectedPosition[0], actualPosition[0], EPSILON); [EOL]     Assert.assertEquals(expectedPosition[1], actualPosition[1], EPSILON); [EOL] } <line_num>: 140,158
public double value(double[] variables) { [EOL]     final double x = variables[0]; [EOL]     final double y = variables[1]; [EOL]     return (x == 0 || y == 0) ? 0 : FastMath.atan(x) * FastMath.atan(x + 2) * FastMath.atan(y) * FastMath.atan(y) / (x * y); [EOL] } <line_num>: 171,176
public double getMaximum() { [EOL]     return value(maximumPosition); [EOL] } <line_num>: 188,190
public double[] getMaximumPosition() { [EOL]     return maximumPosition.clone(); [EOL] } <line_num>: 192,194
public double value(double[] point) { [EOL]     final double x = point[0], y = point[1]; [EOL]     final double twoS2 = 2.0 * std * std; [EOL]     return 1.0 / (twoS2 * FastMath.PI) * FastMath.exp(-(x * x + y * y) / twoS2); [EOL] } <line_num>: 196,200
