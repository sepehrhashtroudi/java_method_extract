public CircleScalar() { [EOL]     points = new ArrayList<Vector2D>(); [EOL] } <line_num>: 32,34
public void addPoint(double px, double py) { [EOL]     points.add(new Vector2D(px, py)); [EOL] } <line_num>: 36,38
public double getRadius(Vector2D center) { [EOL]     double r = 0; [EOL]     for (Vector2D point : points) { [EOL]         r += point.distance(center); [EOL]     } [EOL]     return r / points.size(); [EOL] } <line_num>: 40,46
private DerivativeStructure distance(Vector2D point, DerivativeStructure cx, DerivativeStructure cy) { [EOL]     DerivativeStructure dx = cx.subtract(point.getX()); [EOL]     DerivativeStructure dy = cy.subtract(point.getY()); [EOL]     return dx.multiply(dx).add(dy.multiply(dy)).sqrt(); [EOL] } <line_num>: 48,53
public DerivativeStructure getRadius(DerivativeStructure cx, DerivativeStructure cy) { [EOL]     DerivativeStructure r = cx.getField().getZero(); [EOL]     for (Vector2D point : points) { [EOL]         r = r.add(distance(point, cx, cy)); [EOL]     } [EOL]     return r.divide(points.size()); [EOL] } <line_num>: 55,61
public double value(double[] variables) { [EOL]     Vector2D center = new Vector2D(variables[0], variables[1]); [EOL]     double radius = getRadius(center); [EOL]     double sum = 0; [EOL]     for (Vector2D point : points) { [EOL]         double di = point.distance(center) - radius; [EOL]         sum += di * di; [EOL]     } [EOL]     return sum; [EOL] } <line_num>: 63,74
public DerivativeStructure value(DerivativeStructure[] variables) { [EOL]     DerivativeStructure radius = getRadius(variables[0], variables[1]); [EOL]     DerivativeStructure sum = variables[0].getField().getZero(); [EOL]     for (Vector2D point : points) { [EOL]         DerivativeStructure di = distance(point, variables[0], variables[1]).subtract(radius); [EOL]         sum = sum.add(di.multiply(di)); [EOL]     } [EOL]     return sum; [EOL] } <line_num>: 76,86
