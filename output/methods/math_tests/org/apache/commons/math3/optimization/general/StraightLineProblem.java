public StraightLineProblem(double error) { [EOL]     points = new ArrayList<double[]>(); [EOL]     sigma = error; [EOL] } <line_num>: 48,51
public Model(DerivativeStructure a, DerivativeStructure b) { [EOL]     this.a = a; [EOL]     this.b = b; [EOL] } <line_num>: 143,147
public void addPoint(double px, double py) { [EOL]     points.add(new double[] { px, py }); [EOL] } <line_num>: 53,55
public double[] x() { [EOL]     final double[] v = new double[points.size()]; [EOL]     for (int i = 0; i < points.size(); i++) { [EOL]         final double[] p = points.get(i); [EOL]         v[i] = p[0]; [EOL]     } [EOL]     return v; [EOL] } <line_num>: 60,68
public double[] y() { [EOL]     final double[] v = new double[points.size()]; [EOL]     for (int i = 0; i < points.size(); i++) { [EOL]         final double[] p = points.get(i); [EOL]         v[i] = p[1]; [EOL]     } [EOL]     return v; [EOL] } <line_num>: 73,81
public double[] target() { [EOL]     return y(); [EOL] } <line_num>: 83,85
public double[] weight() { [EOL]     final double weight = 1 / (sigma * sigma); [EOL]     final double[] w = new double[points.size()]; [EOL]     for (int i = 0; i < points.size(); i++) { [EOL]         w[i] = weight; [EOL]     } [EOL]     return w; [EOL] } <line_num>: 87,95
public double[] value(double[] params) { [EOL]     final Model line = new Model(new DerivativeStructure(0, 0, params[0]), new DerivativeStructure(0, 0, params[1])); [EOL]     final double[] model = new double[points.size()]; [EOL]     for (int i = 0; i < points.size(); i++) { [EOL]         final double[] p = points.get(i); [EOL]         model[i] = line.value(p[0]); [EOL]     } [EOL]     return model; [EOL] } <line_num>: 97,108
public DerivativeStructure[] value(DerivativeStructure[] params) { [EOL]     final Model line = new Model(params[0], params[1]); [EOL]     final DerivativeStructure[] model = new DerivativeStructure[points.size()]; [EOL]     for (int i = 0; i < points.size(); i++) { [EOL]         final DerivativeStructure p0 = params[0].getField().getZero().add(points.get(i)[0]); [EOL]         model[i] = line.value(p0); [EOL]     } [EOL]     return model; [EOL] } <line_num>: 110,120
public double[] solve() { [EOL]     final SimpleRegression regress = new SimpleRegression(true); [EOL]     for (double[] d : points) { [EOL]         regress.addData(d[0], d[1]); [EOL]     } [EOL]     final double[] result = { regress.getSlope(), regress.getIntercept() }; [EOL]     return result; [EOL] } <line_num>: 126,134
public double value(double x) { [EOL]     return a.getValue() * x + b.getValue(); [EOL] } <line_num>: 149,151
public DerivativeStructure value(DerivativeStructure x) { [EOL]     return x.multiply(a).add(b); [EOL] } <line_num>: 153,155
