public Rosenbrock() { [EOL]     count = 0; [EOL] } <line_num>: 229,231
public Powell() { [EOL]     count = 0; [EOL] } <line_num>: 248,250
@Test [EOL] public void testMinimize1() { [EOL]     SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30); [EOL]     optimizer.setSimplex(new NelderMeadSimplex(new double[] { 0.2, 0.2 })); [EOL]     final FourExtrema fourExtrema = new FourExtrema(); [EOL]     final PointValuePair optimum = optimizer.optimize(100, fourExtrema, GoalType.MINIMIZE, new double[] { -3, 0 }); [EOL]     Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 2e-7); [EOL]     Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 2e-5); [EOL]     Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 6e-12); [EOL]     Assert.assertTrue(optimizer.getEvaluations() > 60); [EOL]     Assert.assertTrue(optimizer.getEvaluations() < 90); [EOL] } <line_num>: 34,47
@Test [EOL] public void testMinimize2() { [EOL]     SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30); [EOL]     optimizer.setSimplex(new NelderMeadSimplex(new double[] { 0.2, 0.2 })); [EOL]     final FourExtrema fourExtrema = new FourExtrema(); [EOL]     final PointValuePair optimum = optimizer.optimize(100, fourExtrema, GoalType.MINIMIZE, new double[] { 1, 0 }); [EOL]     Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 5e-6); [EOL]     Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 6e-6); [EOL]     Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11); [EOL]     Assert.assertTrue(optimizer.getEvaluations() > 60); [EOL]     Assert.assertTrue(optimizer.getEvaluations() < 90); [EOL] } <line_num>: 49,62
@Test [EOL] public void testMaximize1() { [EOL]     SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30); [EOL]     optimizer.setSimplex(new NelderMeadSimplex(new double[] { 0.2, 0.2 })); [EOL]     final FourExtrema fourExtrema = new FourExtrema(); [EOL]     final PointValuePair optimum = optimizer.optimize(100, fourExtrema, GoalType.MAXIMIZE, new double[] { -3, 0 }); [EOL]     Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 1e-5); [EOL]     Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6); [EOL]     Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 3e-12); [EOL]     Assert.assertTrue(optimizer.getEvaluations() > 60); [EOL]     Assert.assertTrue(optimizer.getEvaluations() < 90); [EOL] } <line_num>: 64,77
@Test [EOL] public void testMaximize2() { [EOL]     SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30); [EOL]     optimizer.setSimplex(new NelderMeadSimplex(new double[] { 0.2, 0.2 })); [EOL]     final FourExtrema fourExtrema = new FourExtrema(); [EOL]     final PointValuePair optimum = optimizer.optimize(100, fourExtrema, GoalType.MAXIMIZE, new double[] { 1, 0 }); [EOL]     Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 4e-6); [EOL]     Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 5e-6); [EOL]     Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 7e-12); [EOL]     Assert.assertTrue(optimizer.getEvaluations() > 60); [EOL]     Assert.assertTrue(optimizer.getEvaluations() < 90); [EOL] } <line_num>: 79,92
@Test [EOL] public void testRosenbrock() { [EOL]     Rosenbrock rosenbrock = new Rosenbrock(); [EOL]     SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3); [EOL]     optimizer.setSimplex(new NelderMeadSimplex(new double[][] { { -1.2, 1 }, { 0.9, 1.2 }, { 3.5, -2.3 } })); [EOL]     PointValuePair optimum = optimizer.optimize(100, rosenbrock, GoalType.MINIMIZE, new double[] { -1.2, 1 }); [EOL]     Assert.assertEquals(rosenbrock.getCount(), optimizer.getEvaluations()); [EOL]     Assert.assertTrue(optimizer.getEvaluations() > 40); [EOL]     Assert.assertTrue(optimizer.getEvaluations() < 50); [EOL]     Assert.assertTrue(optimum.getValue() < 8e-4); [EOL] } <line_num>: 94,109
@Test [EOL] public void testPowell() { [EOL]     Powell powell = new Powell(); [EOL]     SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3); [EOL]     optimizer.setSimplex(new NelderMeadSimplex(4)); [EOL]     PointValuePair optimum = optimizer.optimize(200, powell, GoalType.MINIMIZE, new double[] { 3, -1, 0, 1 }); [EOL]     Assert.assertEquals(powell.getCount(), optimizer.getEvaluations()); [EOL]     Assert.assertTrue(optimizer.getEvaluations() > 110); [EOL]     Assert.assertTrue(optimizer.getEvaluations() < 130); [EOL]     Assert.assertTrue(optimum.getValue() < 2e-3); [EOL] } <line_num>: 111,123
public double[] value(double[] variables) { [EOL]     return factors.operate(variables); [EOL] } <line_num>: 134,136
@Test [EOL] public void testLeastSquares1() { [EOL]     final RealMatrix factors = new Array2DRowRealMatrix(new double[][] { { 1, 0 }, { 0, 1 } }, false); [EOL]     LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorFunction() { [EOL]  [EOL]         public double[] value(double[] variables) { [EOL]             return factors.operate(variables); [EOL]         } [EOL]     }, new double[] { 2.0, -3.0 }); [EOL]     SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-6); [EOL]     optimizer.setSimplex(new NelderMeadSimplex(2)); [EOL]     PointValuePair optimum = optimizer.optimize(200, ls, GoalType.MINIMIZE, new double[] { 10, 10 }); [EOL]     Assert.assertEquals(2, optimum.getPointRef()[0], 3e-5); [EOL]     Assert.assertEquals(-3, optimum.getPointRef()[1], 4e-4); [EOL]     Assert.assertTrue(optimizer.getEvaluations() > 60); [EOL]     Assert.assertTrue(optimizer.getEvaluations() < 80); [EOL]     Assert.assertTrue(optimum.getValue() < 1.0e-6); [EOL] } <line_num>: 125,147
public double[] value(double[] variables) { [EOL]     return factors.operate(variables); [EOL] } <line_num>: 158,160
@Test [EOL] public void testLeastSquares2() { [EOL]     final RealMatrix factors = new Array2DRowRealMatrix(new double[][] { { 1, 0 }, { 0, 1 } }, false); [EOL]     LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorFunction() { [EOL]  [EOL]         public double[] value(double[] variables) { [EOL]             return factors.operate(variables); [EOL]         } [EOL]     }, new double[] { 2, -3 }, new double[] { 10, 0.1 }); [EOL]     SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-6); [EOL]     optimizer.setSimplex(new NelderMeadSimplex(2)); [EOL]     PointValuePair optimum = optimizer.optimize(200, ls, GoalType.MINIMIZE, new double[] { 10, 10 }); [EOL]     Assert.assertEquals(2, optimum.getPointRef()[0], 5e-5); [EOL]     Assert.assertEquals(-3, optimum.getPointRef()[1], 8e-4); [EOL]     Assert.assertTrue(optimizer.getEvaluations() > 60); [EOL]     Assert.assertTrue(optimizer.getEvaluations() < 80); [EOL]     Assert.assertTrue(optimum.getValue() < 1e-6); [EOL] } <line_num>: 149,171
public double[] value(double[] variables) { [EOL]     return factors.operate(variables); [EOL] } <line_num>: 182,184
@Test [EOL] public void testLeastSquares3() { [EOL]     final RealMatrix factors = new Array2DRowRealMatrix(new double[][] { { 1, 0 }, { 0, 1 } }, false); [EOL]     LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorFunction() { [EOL]  [EOL]         public double[] value(double[] variables) { [EOL]             return factors.operate(variables); [EOL]         } [EOL]     }, new double[] { 2, -3 }, new Array2DRowRealMatrix(new double[][] { { 1, 1.2 }, { 1.2, 2 } })); [EOL]     SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-6); [EOL]     optimizer.setSimplex(new NelderMeadSimplex(2)); [EOL]     PointValuePair optimum = optimizer.optimize(200, ls, GoalType.MINIMIZE, new double[] { 10, 10 }); [EOL]     Assert.assertEquals(2, optimum.getPointRef()[0], 2e-3); [EOL]     Assert.assertEquals(-3, optimum.getPointRef()[1], 8e-4); [EOL]     Assert.assertTrue(optimizer.getEvaluations() > 60); [EOL]     Assert.assertTrue(optimizer.getEvaluations() < 80); [EOL]     Assert.assertTrue(optimum.getValue() < 1e-6); [EOL] } <line_num>: 173,197
@Test(expected = TooManyEvaluationsException.class) [EOL] public void testMaxIterations() { [EOL]     Powell powell = new Powell(); [EOL]     SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3); [EOL]     optimizer.setSimplex(new NelderMeadSimplex(4)); [EOL]     optimizer.optimize(20, powell, GoalType.MINIMIZE, new double[] { 3, -1, 0, 1 }); [EOL] } <line_num>: 199,205
public double value(double[] variables) { [EOL]     final double x = variables[0]; [EOL]     final double y = variables[1]; [EOL]     return (x == 0 || y == 0) ? 0 : FastMath.atan(x) * FastMath.atan(x + 2) * FastMath.atan(y) * FastMath.atan(y) / (x * y); [EOL] } <line_num>: 218,223
public double value(double[] x) { [EOL]     ++count; [EOL]     double a = x[1] - x[0] * x[0]; [EOL]     double b = 1.0 - x[0]; [EOL]     return 100 * a * a + b * b; [EOL] } <line_num>: 233,238
public int getCount() { [EOL]     return count; [EOL] } <line_num>: 240,242
public double value(double[] x) { [EOL]     ++count; [EOL]     double a = x[0] + 10 * x[1]; [EOL]     double b = x[2] - x[3]; [EOL]     double c = x[1] - 2 * x[2]; [EOL]     double d = x[0] - x[3]; [EOL]     return a * a + 5 * b * b + c * c * c * c + 10 * d * d * d * d; [EOL] } <line_num>: 252,259
public int getCount() { [EOL]     return count; [EOL] } <line_num>: 261,263
