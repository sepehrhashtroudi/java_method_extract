private StatisticalReferenceDatasetFactory() { [EOL] } <line_num>: 31,33
public static BufferedReader createBufferedReaderFromResource(final String name) throws IOException { [EOL]     final InputStream resourceAsStream; [EOL]     resourceAsStream = StatisticalReferenceDatasetFactory.class.getResourceAsStream(name); [EOL]     if (resourceAsStream == null) { [EOL]         throw new IOException("could not find resource " + name); [EOL]     } [EOL]     return new BufferedReader(new InputStreamReader(resourceAsStream)); [EOL] } <line_num>: 42,51
@Override [EOL] public double getModelValue(final double x, final double[] a) { [EOL]     final double p = a[0] + x * (a[1] + x * a[2]); [EOL]     final double q = 1.0 + x * (a[3] + x * a[4]); [EOL]     return p / q; [EOL] } <line_num>: 60,65
@Override [EOL] public double[] getModelDerivatives(final double x, final double[] a) { [EOL]     final double[] dy = new double[5]; [EOL]     final double p = a[0] + x * (a[1] + x * a[2]); [EOL]     final double q = 1.0 + x * (a[3] + x * a[4]); [EOL]     dy[0] = 1.0 / q; [EOL]     dy[1] = x / q; [EOL]     dy[2] = x * dy[1]; [EOL]     dy[3] = -x * p / (q * q); [EOL]     dy[4] = x * dy[3]; [EOL]     return dy; [EOL] } <line_num>: 67,79
public static StatisticalReferenceDataset createKirby2() throws IOException { [EOL]     final BufferedReader in = createBufferedReaderFromResource("Kirby2.dat"); [EOL]     StatisticalReferenceDataset dataset = null; [EOL]     try { [EOL]         dataset = new StatisticalReferenceDataset(in) { [EOL]  [EOL]             @Override [EOL]             public double getModelValue(final double x, final double[] a) { [EOL]                 final double p = a[0] + x * (a[1] + x * a[2]); [EOL]                 final double q = 1.0 + x * (a[3] + x * a[4]); [EOL]                 return p / q; [EOL]             } [EOL]  [EOL]             @Override [EOL]             public double[] getModelDerivatives(final double x, final double[] a) { [EOL]                 final double[] dy = new double[5]; [EOL]                 final double p = a[0] + x * (a[1] + x * a[2]); [EOL]                 final double q = 1.0 + x * (a[3] + x * a[4]); [EOL]                 dy[0] = 1.0 / q; [EOL]                 dy[1] = x / q; [EOL]                 dy[2] = x * dy[1]; [EOL]                 dy[3] = -x * p / (q * q); [EOL]                 dy[4] = x * dy[3]; [EOL]                 return dy; [EOL]             } [EOL]         }; [EOL]     } finally { [EOL]         in.close(); [EOL]     } [EOL]     return dataset; [EOL] } <line_num>: 53,85
@Override [EOL] public double getModelValue(final double x, final double[] a) { [EOL]     final double p = a[0] + x * (a[1] + x * (a[2] + x * a[3])); [EOL]     final double q = 1.0 + x * (a[4] + x * (a[5] + x * a[6])); [EOL]     return p / q; [EOL] } <line_num>: 94,99
@Override [EOL] public double[] getModelDerivatives(final double x, final double[] a) { [EOL]     final double[] dy = new double[7]; [EOL]     final double p = a[0] + x * (a[1] + x * (a[2] + x * a[3])); [EOL]     final double q = 1.0 + x * (a[4] + x * (a[5] + x * a[6])); [EOL]     dy[0] = 1.0 / q; [EOL]     dy[1] = x * dy[0]; [EOL]     dy[2] = x * dy[1]; [EOL]     dy[3] = x * dy[2]; [EOL]     dy[4] = -x * p / (q * q); [EOL]     dy[5] = x * dy[4]; [EOL]     dy[6] = x * dy[5]; [EOL]     return dy; [EOL] } <line_num>: 101,115
public static StatisticalReferenceDataset createHahn1() throws IOException { [EOL]     final BufferedReader in = createBufferedReaderFromResource("Hahn1.dat"); [EOL]     StatisticalReferenceDataset dataset = null; [EOL]     try { [EOL]         dataset = new StatisticalReferenceDataset(in) { [EOL]  [EOL]             @Override [EOL]             public double getModelValue(final double x, final double[] a) { [EOL]                 final double p = a[0] + x * (a[1] + x * (a[2] + x * a[3])); [EOL]                 final double q = 1.0 + x * (a[4] + x * (a[5] + x * a[6])); [EOL]                 return p / q; [EOL]             } [EOL]  [EOL]             @Override [EOL]             public double[] getModelDerivatives(final double x, final double[] a) { [EOL]                 final double[] dy = new double[7]; [EOL]                 final double p = a[0] + x * (a[1] + x * (a[2] + x * a[3])); [EOL]                 final double q = 1.0 + x * (a[4] + x * (a[5] + x * a[6])); [EOL]                 dy[0] = 1.0 / q; [EOL]                 dy[1] = x * dy[0]; [EOL]                 dy[2] = x * dy[1]; [EOL]                 dy[3] = x * dy[2]; [EOL]                 dy[4] = -x * p / (q * q); [EOL]                 dy[5] = x * dy[4]; [EOL]                 dy[6] = x * dy[5]; [EOL]                 return dy; [EOL]             } [EOL]         }; [EOL]     } finally { [EOL]         in.close(); [EOL]     } [EOL]     return dataset; [EOL] } <line_num>: 87,121
@Override [EOL] public double getModelValue(final double x, final double[] a) { [EOL]     return a[0] + a[1] * FastMath.exp(-a[3] * x) + a[2] * FastMath.exp(-a[4] * x); [EOL] } <line_num>: 130,134
@Override [EOL] public double[] getModelDerivatives(final double x, final double[] a) { [EOL]     final double[] dy = new double[5]; [EOL]     dy[0] = 1.0; [EOL]     dy[1] = FastMath.exp(-x * a[3]); [EOL]     dy[2] = FastMath.exp(-x * a[4]); [EOL]     dy[3] = -x * a[1] * dy[1]; [EOL]     dy[4] = -x * a[2] * dy[2]; [EOL]     return dy; [EOL] } <line_num>: 136,146
public static StatisticalReferenceDataset createMGH17() throws IOException { [EOL]     final BufferedReader in = createBufferedReaderFromResource("MGH17.dat"); [EOL]     StatisticalReferenceDataset dataset = null; [EOL]     try { [EOL]         dataset = new StatisticalReferenceDataset(in) { [EOL]  [EOL]             @Override [EOL]             public double getModelValue(final double x, final double[] a) { [EOL]                 return a[0] + a[1] * FastMath.exp(-a[3] * x) + a[2] * FastMath.exp(-a[4] * x); [EOL]             } [EOL]  [EOL]             @Override [EOL]             public double[] getModelDerivatives(final double x, final double[] a) { [EOL]                 final double[] dy = new double[5]; [EOL]                 dy[0] = 1.0; [EOL]                 dy[1] = FastMath.exp(-x * a[3]); [EOL]                 dy[2] = FastMath.exp(-x * a[4]); [EOL]                 dy[3] = -x * a[1] * dy[1]; [EOL]                 dy[4] = -x * a[2] * dy[2]; [EOL]                 return dy; [EOL]             } [EOL]         }; [EOL]     } finally { [EOL]         in.close(); [EOL]     } [EOL]     return dataset; [EOL] } <line_num>: 123,152
@Override [EOL] public double getModelValue(final double x, final double[] a) { [EOL]     System.out.println(a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5]); [EOL]     return a[0] * FastMath.exp(-a[3] * x) + a[1] * FastMath.exp(-a[4] * x) + a[2] * FastMath.exp(-a[5] * x); [EOL] } <line_num>: 162,168
@Override [EOL] public double[] getModelDerivatives(final double x, final double[] a) { [EOL]     final double[] dy = new double[6]; [EOL]     dy[0] = FastMath.exp(-x * a[3]); [EOL]     dy[1] = FastMath.exp(-x * a[4]); [EOL]     dy[2] = FastMath.exp(-x * a[5]); [EOL]     dy[3] = -x * a[0] * dy[0]; [EOL]     dy[4] = -x * a[1] * dy[1]; [EOL]     dy[5] = -x * a[2] * dy[2]; [EOL]     return dy; [EOL] } <line_num>: 170,181
public static StatisticalReferenceDataset createLanczos1() throws IOException { [EOL]     final BufferedReader in = createBufferedReaderFromResource("Lanczos1.dat"); [EOL]     StatisticalReferenceDataset dataset = null; [EOL]     try { [EOL]         dataset = new StatisticalReferenceDataset(in) { [EOL]  [EOL]             @Override [EOL]             public double getModelValue(final double x, final double[] a) { [EOL]                 System.out.println(a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5]); [EOL]                 return a[0] * FastMath.exp(-a[3] * x) + a[1] * FastMath.exp(-a[4] * x) + a[2] * FastMath.exp(-a[5] * x); [EOL]             } [EOL]  [EOL]             @Override [EOL]             public double[] getModelDerivatives(final double x, final double[] a) { [EOL]                 final double[] dy = new double[6]; [EOL]                 dy[0] = FastMath.exp(-x * a[3]); [EOL]                 dy[1] = FastMath.exp(-x * a[4]); [EOL]                 dy[2] = FastMath.exp(-x * a[5]); [EOL]                 dy[3] = -x * a[0] * dy[0]; [EOL]                 dy[4] = -x * a[1] * dy[1]; [EOL]                 dy[5] = -x * a[2] * dy[2]; [EOL]                 return dy; [EOL]             } [EOL]         }; [EOL]     } finally { [EOL]         in.close(); [EOL]     } [EOL]     return dataset; [EOL] } <line_num>: 154,187
public StatisticalReferenceDataset[] createAll() throws IOException { [EOL]     return new StatisticalReferenceDataset[] { createKirby2(), createMGH17() }; [EOL] } <line_num>: 195,200
