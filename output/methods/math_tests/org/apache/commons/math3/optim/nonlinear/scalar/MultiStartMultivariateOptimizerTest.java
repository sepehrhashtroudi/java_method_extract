public Rosenbrock() { [EOL]     count = 0; [EOL] } <line_num>: 110,112
@Test [EOL] public void testCircleFitting() { [EOL]     CircleScalar circle = new CircleScalar(); [EOL]     circle.addPoint(30.0, 68.0); [EOL]     circle.addPoint(50.0, -6.0); [EOL]     circle.addPoint(110.0, -20.0); [EOL]     circle.addPoint(35.0, 15.0); [EOL]     circle.addPoint(45.0, 97.0); [EOL]     GradientMultivariateOptimizer underlying = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE, new SimpleValueChecker(1e-10, 1e-10)); [EOL]     JDKRandomGenerator g = new JDKRandomGenerator(); [EOL]     g.setSeed(753289573253l); [EOL]     RandomVectorGenerator generator = new UncorrelatedRandomVectorGenerator(new double[] { 50, 50 }, new double[] { 10, 10 }, new GaussianRandomGenerator(g)); [EOL]     MultiStartMultivariateOptimizer optimizer = new MultiStartMultivariateOptimizer(underlying, 10, generator); [EOL]     PointValuePair optimum = optimizer.optimize(new MaxEval(200), circle.getObjectiveFunction(), circle.getObjectiveFunctionGradient(), GoalType.MINIMIZE, new InitialGuess(new double[] { 98.680, 47.345 })); [EOL]     Assert.assertEquals(200, optimizer.getMaxEvaluations()); [EOL]     PointValuePair[] optima = optimizer.getOptima(); [EOL]     for (PointValuePair o : optima) { [EOL]         Vector2D center = new Vector2D(o.getPointRef()[0], o.getPointRef()[1]); [EOL]         Assert.assertEquals(69.960161753, circle.getRadius(center), 1e-8); [EOL]         Assert.assertEquals(96.075902096, center.getX(), 1e-8); [EOL]         Assert.assertEquals(48.135167894, center.getY(), 1e-8); [EOL]     } [EOL]     Assert.assertTrue(optimizer.getEvaluations() > 70); [EOL]     Assert.assertTrue(optimizer.getEvaluations() < 90); [EOL]     Assert.assertEquals(3.1267527, optimum.getValue(), 1e-8); [EOL] } <line_num>: 37,76
@Test [EOL] public void testRosenbrock() { [EOL]     Rosenbrock rosenbrock = new Rosenbrock(); [EOL]     SimplexOptimizer underlying = new SimplexOptimizer(new SimpleValueChecker(-1, 1e-3)); [EOL]     NelderMeadSimplex simplex = new NelderMeadSimplex(new double[][] { { -1.2, 1.0 }, { 0.9, 1.2 }, { 3.5, -2.3 } }); [EOL]     JDKRandomGenerator g = new JDKRandomGenerator(); [EOL]     g.setSeed(16069223052l); [EOL]     RandomVectorGenerator generator = new UncorrelatedRandomVectorGenerator(2, new GaussianRandomGenerator(g)); [EOL]     MultiStartMultivariateOptimizer optimizer = new MultiStartMultivariateOptimizer(underlying, 10, generator); [EOL]     PointValuePair optimum = optimizer.optimize(new MaxEval(1100), new ObjectiveFunction(rosenbrock), GoalType.MINIMIZE, simplex, new InitialGuess(new double[] { -1.2, 1.0 })); [EOL]     Assert.assertEquals(rosenbrock.getCount(), optimizer.getEvaluations()); [EOL]     Assert.assertTrue(optimizer.getEvaluations() > 900); [EOL]     Assert.assertTrue(optimizer.getEvaluations() < 1200); [EOL]     Assert.assertTrue(optimum.getValue() < 8e-4); [EOL] } <line_num>: 78,105
public double value(double[] x) { [EOL]     ++count; [EOL]     double a = x[1] - x[0] * x[0]; [EOL]     double b = 1 - x[0]; [EOL]     return 100 * a * a + b * b; [EOL] } <line_num>: 114,119
public int getCount() { [EOL]     return count; [EOL] } <line_num>: 121,123
