public double value(double x) { [EOL]     if (x < -2) { [EOL]         return value(-2); [EOL]     } else { [EOL]         return (x - 1) * (x + 2) * (x + 3); [EOL]     } [EOL] } <line_num>: 33,40
@Test [EOL] public void testCubicMin() { [EOL]     final BracketFinder bFind = new BracketFinder(); [EOL]     final UnivariateFunction func = new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             if (x < -2) { [EOL]                 return value(-2); [EOL]             } else { [EOL]                 return (x - 1) * (x + 2) * (x + 3); [EOL]             } [EOL]         } [EOL]     }; [EOL]     bFind.search(func, GoalType.MINIMIZE, -2, -1); [EOL]     final double tol = 1e-15; [EOL]     Assert.assertEquals(-2, bFind.getLo(), tol); [EOL]     Assert.assertEquals(-1, bFind.getMid(), tol); [EOL]     Assert.assertEquals(0.61803399999999997, bFind.getHi(), tol); [EOL] } <line_num>: 29,49
public double value(double x) { [EOL]     if (x < -2) { [EOL]         return value(-2); [EOL]     } else { [EOL]         return -(x - 1) * (x + 2) * (x + 3); [EOL]     } [EOL] } <line_num>: 55,62
@Test [EOL] public void testCubicMax() { [EOL]     final BracketFinder bFind = new BracketFinder(); [EOL]     final UnivariateFunction func = new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             if (x < -2) { [EOL]                 return value(-2); [EOL]             } else { [EOL]                 return -(x - 1) * (x + 2) * (x + 3); [EOL]             } [EOL]         } [EOL]     }; [EOL]     bFind.search(func, GoalType.MAXIMIZE, -2, -1); [EOL]     final double tol = 1e-15; [EOL]     Assert.assertEquals(-2, bFind.getLo(), tol); [EOL]     Assert.assertEquals(-1, bFind.getMid(), tol); [EOL]     Assert.assertEquals(0.61803399999999997, bFind.getHi(), tol); [EOL] } <line_num>: 51,70
public double value(double x) { [EOL]     return x * x; [EOL] } <line_num>: 75,77
@Test [EOL] public void testMinimumIsOnIntervalBoundary() { [EOL]     final UnivariateFunction func = new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             return x * x; [EOL]         } [EOL]     }; [EOL]     final BracketFinder bFind = new BracketFinder(); [EOL]     bFind.search(func, GoalType.MINIMIZE, 0, 1); [EOL]     Assert.assertTrue(bFind.getLo() <= 0); [EOL]     Assert.assertTrue(0 <= bFind.getHi()); [EOL]     bFind.search(func, GoalType.MINIMIZE, -1, 0); [EOL]     Assert.assertTrue(bFind.getLo() <= 0); [EOL]     Assert.assertTrue(0 <= bFind.getHi()); [EOL] } <line_num>: 72,89
public double value(double x) { [EOL]     return x * x; [EOL] } <line_num>: 94,96
@Test [EOL] public void testIntervalBoundsOrdering() { [EOL]     final UnivariateFunction func = new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             return x * x; [EOL]         } [EOL]     }; [EOL]     final BracketFinder bFind = new BracketFinder(); [EOL]     bFind.search(func, GoalType.MINIMIZE, -1, 1); [EOL]     Assert.assertTrue(bFind.getLo() <= 0); [EOL]     Assert.assertTrue(0 <= bFind.getHi()); [EOL]     bFind.search(func, GoalType.MINIMIZE, 1, -1); [EOL]     Assert.assertTrue(bFind.getLo() <= 0); [EOL]     Assert.assertTrue(0 <= bFind.getHi()); [EOL]     bFind.search(func, GoalType.MINIMIZE, 1, 2); [EOL]     Assert.assertTrue(bFind.getLo() <= 0); [EOL]     Assert.assertTrue(0 <= bFind.getHi()); [EOL]     bFind.search(func, GoalType.MINIMIZE, 2, 1); [EOL]     Assert.assertTrue(bFind.getLo() <= 0); [EOL]     Assert.assertTrue(0 <= bFind.getHi()); [EOL] } <line_num>: 91,116
