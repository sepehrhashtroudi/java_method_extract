@Test(expected = MathIllegalStateException.class) [EOL] public void testMissingMaxEval() { [EOL]     UnivariateOptimizer underlying = new BrentOptimizer(1e-10, 1e-14); [EOL]     JDKRandomGenerator g = new JDKRandomGenerator(); [EOL]     g.setSeed(44428400075l); [EOL]     MultiStartUnivariateOptimizer optimizer = new MultiStartUnivariateOptimizer(underlying, 10, g); [EOL]     optimizer.optimize(new UnivariateObjectiveFunction(new Sin()), GoalType.MINIMIZE, new SearchInterval(-1, 1)); [EOL] } <line_num>: 31,40
@Test(expected = MathIllegalStateException.class) [EOL] public void testMissingSearchInterval() { [EOL]     UnivariateOptimizer underlying = new BrentOptimizer(1e-10, 1e-14); [EOL]     JDKRandomGenerator g = new JDKRandomGenerator(); [EOL]     g.setSeed(44428400075l); [EOL]     MultiStartUnivariateOptimizer optimizer = new MultiStartUnivariateOptimizer(underlying, 10, g); [EOL]     optimizer.optimize(new MaxEval(300), new UnivariateObjectiveFunction(new Sin()), GoalType.MINIMIZE); [EOL] } <line_num>: 41,50
@Test [EOL] public void testSinMin() { [EOL]     UnivariateFunction f = new Sin(); [EOL]     UnivariateOptimizer underlying = new BrentOptimizer(1e-10, 1e-14); [EOL]     JDKRandomGenerator g = new JDKRandomGenerator(); [EOL]     g.setSeed(44428400075l); [EOL]     MultiStartUnivariateOptimizer optimizer = new MultiStartUnivariateOptimizer(underlying, 10, g); [EOL]     optimizer.optimize(new MaxEval(300), new UnivariateObjectiveFunction(f), GoalType.MINIMIZE, new SearchInterval(-100.0, 100.0)); [EOL]     UnivariatePointValuePair[] optima = optimizer.getOptima(); [EOL]     for (int i = 1; i < optima.length; ++i) { [EOL]         double d = (optima[i].getPoint() - optima[i - 1].getPoint()) / (2 * FastMath.PI); [EOL]         Assert.assertTrue(FastMath.abs(d - FastMath.rint(d)) < 1.0e-8); [EOL]         Assert.assertEquals(-1.0, f.value(optima[i].getPoint()), 1.0e-10); [EOL]         Assert.assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1.0e-10); [EOL]     } [EOL]     Assert.assertTrue(optimizer.getEvaluations() > 200); [EOL]     Assert.assertTrue(optimizer.getEvaluations() < 300); [EOL] } <line_num>: 52,72
@Test [EOL] public void testQuinticMin() { [EOL]     UnivariateFunction f = new QuinticFunction(); [EOL]     UnivariateOptimizer underlying = new BrentOptimizer(1e-9, 1e-14); [EOL]     JDKRandomGenerator g = new JDKRandomGenerator(); [EOL]     g.setSeed(4312000053L); [EOL]     MultiStartUnivariateOptimizer optimizer = new MultiStartUnivariateOptimizer(underlying, 5, g); [EOL]     UnivariatePointValuePair optimum = optimizer.optimize(new MaxEval(300), new UnivariateObjectiveFunction(f), GoalType.MINIMIZE, new SearchInterval(-0.3, -0.2)); [EOL]     Assert.assertEquals(-0.27195613, optimum.getPoint(), 1e-9); [EOL]     Assert.assertEquals(-0.0443342695, optimum.getValue(), 1e-9); [EOL]     UnivariatePointValuePair[] optima = optimizer.getOptima(); [EOL]     for (int i = 0; i < optima.length; ++i) { [EOL]         Assert.assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9); [EOL]     } [EOL]     Assert.assertTrue(optimizer.getEvaluations() >= 50); [EOL]     Assert.assertTrue(optimizer.getEvaluations() <= 100); [EOL] } <line_num>: 74,98
public double value(double x) { [EOL]     if (x < 0) { [EOL]         throw new LocalException(); [EOL]     } [EOL]     return 0; [EOL] } <line_num>: 103,108
@Test [EOL] public void testBadFunction() { [EOL]     UnivariateFunction f = new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             if (x < 0) { [EOL]                 throw new LocalException(); [EOL]             } [EOL]             return 0; [EOL]         } [EOL]     }; [EOL]     UnivariateOptimizer underlying = new BrentOptimizer(1e-9, 1e-14); [EOL]     JDKRandomGenerator g = new JDKRandomGenerator(); [EOL]     g.setSeed(4312000053L); [EOL]     MultiStartUnivariateOptimizer optimizer = new MultiStartUnivariateOptimizer(underlying, 5, g); [EOL]     try { [EOL]         optimizer.optimize(new MaxEval(300), new UnivariateObjectiveFunction(f), GoalType.MINIMIZE, new SearchInterval(-0.3, -0.2)); [EOL]         Assert.fail(); [EOL]     } catch (LocalException e) { [EOL]     } [EOL]     Assert.assertTrue(optimizer.getOptima()[0] == null); [EOL] } <line_num>: 100,127
