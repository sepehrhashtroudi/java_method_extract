public LinearProblem(double[][] factors, double[] target) { [EOL]     this.factors = new BlockRealMatrix(factors); [EOL]     this.target = target; [EOL] } <line_num>: 220,224
@Test(expected = NullPointerException.class) [EOL] public void testGetOptimaBeforeOptimize() { [EOL]     JacobianMultivariateVectorOptimizer underlyingOptimizer = new GaussNewtonOptimizer(true, new SimpleVectorValueChecker(1e-6, 1e-6)); [EOL]     JDKRandomGenerator g = new JDKRandomGenerator(); [EOL]     g.setSeed(16069223052l); [EOL]     RandomVectorGenerator generator = new UncorrelatedRandomVectorGenerator(1, new GaussianRandomGenerator(g)); [EOL]     MultiStartMultivariateVectorOptimizer optimizer = new MultiStartMultivariateVectorOptimizer(underlyingOptimizer, 10, generator); [EOL]     optimizer.getOptima(); [EOL] } <line_num>: 101,114
@Test [EOL] public void testTrivial() { [EOL]     LinearProblem problem = new LinearProblem(new double[][] { { 2 } }, new double[] { 3 }); [EOL]     JacobianMultivariateVectorOptimizer underlyingOptimizer = new GaussNewtonOptimizer(true, new SimpleVectorValueChecker(1e-6, 1e-6)); [EOL]     JDKRandomGenerator g = new JDKRandomGenerator(); [EOL]     g.setSeed(16069223052l); [EOL]     RandomVectorGenerator generator = new UncorrelatedRandomVectorGenerator(1, new GaussianRandomGenerator(g)); [EOL]     MultiStartMultivariateVectorOptimizer optimizer = new MultiStartMultivariateVectorOptimizer(underlyingOptimizer, 10, generator); [EOL]     PointVectorValuePair optimum = optimizer.optimize(new MaxEval(100), problem.getModelFunction(), problem.getModelFunctionJacobian(), problem.getTarget(), new Weight(new double[] { 1 }), new InitialGuess(new double[] { 0 })); [EOL]     Assert.assertEquals(1.5, optimum.getPoint()[0], 1e-10); [EOL]     Assert.assertEquals(3.0, optimum.getValue()[0], 1e-10); [EOL]     PointVectorValuePair[] optima = optimizer.getOptima(); [EOL]     Assert.assertEquals(10, optima.length); [EOL]     for (int i = 0; i < optima.length; i++) { [EOL]         Assert.assertEquals(1.5, optima[i].getPoint()[0], 1e-10); [EOL]         Assert.assertEquals(3.0, optima[i].getValue()[0], 1e-10); [EOL]     } [EOL]     Assert.assertTrue(optimizer.getEvaluations() > 20); [EOL]     Assert.assertTrue(optimizer.getEvaluations() < 50); [EOL]     Assert.assertEquals(100, optimizer.getMaxEvaluations()); [EOL] } <line_num>: 116,147
@Override [EOL] public PointVectorValuePair optimize(OptimizationData... optData) { [EOL]     OptimizationData[] filtered = optData.clone(); [EOL]     for (int i = 0; i < filtered.length; ++i) { [EOL]         if (filtered[i] instanceof SimpleBounds) { [EOL]             filtered[i] = null; [EOL]         } [EOL]     } [EOL]     return super.optimize(filtered); [EOL] } <line_num>: 154,165
@Test [EOL] public void testIssue914() { [EOL]     LinearProblem problem = new LinearProblem(new double[][] { { 2 } }, new double[] { 3 }); [EOL]     JacobianMultivariateVectorOptimizer underlyingOptimizer = new GaussNewtonOptimizer(true, new SimpleVectorValueChecker(1e-6, 1e-6)) { [EOL]  [EOL]         @Override [EOL]         public PointVectorValuePair optimize(OptimizationData... optData) { [EOL]             OptimizationData[] filtered = optData.clone(); [EOL]             for (int i = 0; i < filtered.length; ++i) { [EOL]                 if (filtered[i] instanceof SimpleBounds) { [EOL]                     filtered[i] = null; [EOL]                 } [EOL]             } [EOL]             return super.optimize(filtered); [EOL]         } [EOL]     }; [EOL]     JDKRandomGenerator g = new JDKRandomGenerator(); [EOL]     g.setSeed(16069223052l); [EOL]     RandomVectorGenerator generator = new UncorrelatedRandomVectorGenerator(1, new GaussianRandomGenerator(g)); [EOL]     MultiStartMultivariateVectorOptimizer optimizer = new MultiStartMultivariateVectorOptimizer(underlyingOptimizer, 10, generator); [EOL]     optimizer.optimize(new MaxEval(100), problem.getModelFunction(), problem.getModelFunctionJacobian(), problem.getTarget(), new Weight(new double[] { 1 }), new InitialGuess(new double[] { 0 }), new SimpleBounds(new double[] { -1.0e-10 }, new double[] { 1.0e-10 })); [EOL]     PointVectorValuePair[] optima = optimizer.getOptima(); [EOL]     Assert.assertEquals(1, optima.length); [EOL] } <line_num>: 149,185
public double[] value(double[] point) { [EOL]     throw new TestException(); [EOL] } <line_num>: 206,208
@Test(expected = TestException.class) [EOL] public void testNoOptimum() { [EOL]     JacobianMultivariateVectorOptimizer underlyingOptimizer = new GaussNewtonOptimizer(true, new SimpleVectorValueChecker(1e-6, 1e-6)); [EOL]     JDKRandomGenerator g = new JDKRandomGenerator(); [EOL]     g.setSeed(12373523445l); [EOL]     RandomVectorGenerator generator = new UncorrelatedRandomVectorGenerator(1, new GaussianRandomGenerator(g)); [EOL]     MultiStartMultivariateVectorOptimizer optimizer = new MultiStartMultivariateVectorOptimizer(underlyingOptimizer, 10, generator); [EOL]     optimizer.optimize(new MaxEval(100), new Target(new double[] { 0 }), new Weight(new double[] { 1 }), new InitialGuess(new double[] { 0 }), new ModelFunction(new MultivariateVectorFunction() { [EOL]  [EOL]         public double[] value(double[] point) { [EOL]             throw new TestException(); [EOL]         } [EOL]     })); [EOL] } <line_num>: 191,210
public Target getTarget() { [EOL]     return new Target(target); [EOL] } <line_num>: 226,228
public double[] value(double[] variables) { [EOL]     return factors.operate(variables); [EOL] } <line_num>: 232,234
public ModelFunction getModelFunction() { [EOL]     return new ModelFunction(new MultivariateVectorFunction() { [EOL]  [EOL]         public double[] value(double[] variables) { [EOL]             return factors.operate(variables); [EOL]         } [EOL]     }); [EOL] } <line_num>: 230,236
public double[][] value(double[] point) { [EOL]     return factors.getData(); [EOL] } <line_num>: 240,242
public ModelFunctionJacobian getModelFunctionJacobian() { [EOL]     return new ModelFunctionJacobian(new MultivariateMatrixFunction() { [EOL]  [EOL]         public double[][] value(double[] point) { [EOL]             return factors.getData(); [EOL]         } [EOL]     }); [EOL] } <line_num>: 238,244
