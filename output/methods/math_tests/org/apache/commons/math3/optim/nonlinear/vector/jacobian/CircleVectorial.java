public CircleVectorial() { [EOL]     points = new ArrayList<Vector2D>(); [EOL] } <line_num>: 33,35
public void addPoint(double px, double py) { [EOL]     points.add(new Vector2D(px, py)); [EOL] } <line_num>: 37,39
public int getN() { [EOL]     return points.size(); [EOL] } <line_num>: 41,43
public double getRadius(Vector2D center) { [EOL]     double r = 0; [EOL]     for (Vector2D point : points) { [EOL]         r += point.distance(center); [EOL]     } [EOL]     return r / points.size(); [EOL] } <line_num>: 45,51
public double[] value(double[] params) { [EOL]     Vector2D center = new Vector2D(params[0], params[1]); [EOL]     double radius = getRadius(center); [EOL]     double[] residuals = new double[points.size()]; [EOL]     for (int i = 0; i < residuals.length; i++) { [EOL]         residuals[i] = points.get(i).distance(center) - radius; [EOL]     } [EOL]     return residuals; [EOL] } <line_num>: 55,64
public ModelFunction getModelFunction() { [EOL]     return new ModelFunction(new MultivariateVectorFunction() { [EOL]  [EOL]         public double[] value(double[] params) { [EOL]             Vector2D center = new Vector2D(params[0], params[1]); [EOL]             double radius = getRadius(center); [EOL]             double[] residuals = new double[points.size()]; [EOL]             for (int i = 0; i < residuals.length; i++) { [EOL]                 residuals[i] = points.get(i).distance(center) - radius; [EOL]             } [EOL]             return residuals; [EOL]         } [EOL]     }); [EOL] } <line_num>: 53,66
public double[][] value(double[] params) { [EOL]     final int n = points.size(); [EOL]     final Vector2D center = new Vector2D(params[0], params[1]); [EOL]     double dRdX = 0; [EOL]     double dRdY = 0; [EOL]     for (Vector2D pk : points) { [EOL]         double dk = pk.distance(center); [EOL]         dRdX += (center.getX() - pk.getX()) / dk; [EOL]         dRdY += (center.getY() - pk.getY()) / dk; [EOL]     } [EOL]     dRdX /= n; [EOL]     dRdY /= n; [EOL]     double[][] jacobian = new double[n][2]; [EOL]     for (int i = 0; i < n; i++) { [EOL]         final Vector2D pi = points.get(i); [EOL]         final double di = pi.distance(center); [EOL]         jacobian[i][0] = (center.getX() - pi.getX()) / di - dRdX; [EOL]         jacobian[i][1] = (center.getY() - pi.getY()) / di - dRdY; [EOL]     } [EOL]     return jacobian; [EOL] } <line_num>: 70,94
public ModelFunctionJacobian getModelFunctionJacobian() { [EOL]     return new ModelFunctionJacobian(new MultivariateMatrixFunction() { [EOL]  [EOL]         public double[][] value(double[] params) { [EOL]             final int n = points.size(); [EOL]             final Vector2D center = new Vector2D(params[0], params[1]); [EOL]             double dRdX = 0; [EOL]             double dRdY = 0; [EOL]             for (Vector2D pk : points) { [EOL]                 double dk = pk.distance(center); [EOL]                 dRdX += (center.getX() - pk.getX()) / dk; [EOL]                 dRdY += (center.getY() - pk.getY()) / dk; [EOL]             } [EOL]             dRdX /= n; [EOL]             dRdY /= n; [EOL]             double[][] jacobian = new double[n][2]; [EOL]             for (int i = 0; i < n; i++) { [EOL]                 final Vector2D pi = points.get(i); [EOL]                 final double di = pi.distance(center); [EOL]                 jacobian[i][0] = (center.getX() - pi.getX()) / di - dRdX; [EOL]                 jacobian[i][1] = (center.getY() - pi.getY()) / di - dRdY; [EOL]             } [EOL]             return jacobian; [EOL]         } [EOL]     }); [EOL] } <line_num>: 68,96
