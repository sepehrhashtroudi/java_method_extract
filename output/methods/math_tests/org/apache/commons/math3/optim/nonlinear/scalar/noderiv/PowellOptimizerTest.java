@Test(expected = MathUnsupportedOperationException.class) [EOL] public void testBoundsUnsupported() { [EOL]     final MultivariateFunction func = new SumSincFunction(-1); [EOL]     final PowellOptimizer optim = new PowellOptimizer(1e-8, 1e-5, 1e-4, 1e-4); [EOL]     optim.optimize(new MaxEval(100), new ObjectiveFunction(func), GoalType.MINIMIZE, new InitialGuess(new double[] { -3, 0 }), new SimpleBounds(new double[] { -5, -1 }, new double[] { 5, 1 })); [EOL] } <line_num>: 36,48
@Test [EOL] public void testSumSinc() { [EOL]     final MultivariateFunction func = new SumSincFunction(-1); [EOL]     int dim = 2; [EOL]     final double[] minPoint = new double[dim]; [EOL]     for (int i = 0; i < dim; i++) { [EOL]         minPoint[i] = 0; [EOL]     } [EOL]     double[] init = new double[dim]; [EOL]     for (int i = 0; i < dim; i++) { [EOL]         init[i] = minPoint[i]; [EOL]     } [EOL]     doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9); [EOL]     for (int i = 0; i < dim; i++) { [EOL]         init[i] = minPoint[i] + 3; [EOL]     } [EOL]     doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-5); [EOL]     doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9, 1e-7); [EOL] } <line_num>: 50,76
public double value(double[] x) { [EOL]     final double a = x[0] - 1; [EOL]     final double b = x[1] - 1; [EOL]     return a * a + b * b + 1; [EOL] } <line_num>: 81,85
@Test [EOL] public void testQuadratic() { [EOL]     final MultivariateFunction func = new MultivariateFunction() { [EOL]  [EOL]         public double value(double[] x) { [EOL]             final double a = x[0] - 1; [EOL]             final double b = x[1] - 1; [EOL]             return a * a + b * b + 1; [EOL]         } [EOL]     }; [EOL]     int dim = 2; [EOL]     final double[] minPoint = new double[dim]; [EOL]     for (int i = 0; i < dim; i++) { [EOL]         minPoint[i] = 1; [EOL]     } [EOL]     double[] init = new double[dim]; [EOL]     for (int i = 0; i < dim; i++) { [EOL]         init[i] = minPoint[i]; [EOL]     } [EOL]     doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-8); [EOL]     for (int i = 0; i < dim; i++) { [EOL]         init[i] = minPoint[i] - 20; [EOL]     } [EOL]     doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-8); [EOL] } <line_num>: 78,107
public double value(double[] x) { [EOL]     final double a = x[0] - 1; [EOL]     final double b = x[1] - 1; [EOL]     return -a * a - b * b + 1; [EOL] } <line_num>: 112,116
@Test [EOL] public void testMaximizeQuadratic() { [EOL]     final MultivariateFunction func = new MultivariateFunction() { [EOL]  [EOL]         public double value(double[] x) { [EOL]             final double a = x[0] - 1; [EOL]             final double b = x[1] - 1; [EOL]             return -a * a - b * b + 1; [EOL]         } [EOL]     }; [EOL]     int dim = 2; [EOL]     final double[] maxPoint = new double[dim]; [EOL]     for (int i = 0; i < dim; i++) { [EOL]         maxPoint[i] = 1; [EOL]     } [EOL]     double[] init = new double[dim]; [EOL]     for (int i = 0; i < dim; i++) { [EOL]         init[i] = maxPoint[i]; [EOL]     } [EOL]     doTest(func, maxPoint, init, GoalType.MAXIMIZE, 1e-9, 1e-8); [EOL]     for (int i = 0; i < dim; i++) { [EOL]         init[i] = maxPoint[i] - 20; [EOL]     } [EOL]     doTest(func, maxPoint, init, GoalType.MAXIMIZE, 1e-9, 1e-8); [EOL] } <line_num>: 109,138
public double value(double[] x) { [EOL]     final double a = x[0] - 1; [EOL]     final double b = x[1] - 1; [EOL]     return a * a * FastMath.sqrt(FastMath.abs(a)) + b * b + 1; [EOL] } <line_num>: 150,154
public double value(double[] x) { [EOL]     return scale * func.value(x); [EOL] } <line_num>: 185,187
@Test [EOL] public void testRelativeToleranceOnScaledValues() { [EOL]     final MultivariateFunction func = new MultivariateFunction() { [EOL]  [EOL]         public double value(double[] x) { [EOL]             final double a = x[0] - 1; [EOL]             final double b = x[1] - 1; [EOL]             return a * a * FastMath.sqrt(FastMath.abs(a)) + b * b + 1; [EOL]         } [EOL]     }; [EOL]     int dim = 2; [EOL]     final double[] minPoint = new double[dim]; [EOL]     for (int i = 0; i < dim; i++) { [EOL]         minPoint[i] = 1; [EOL]     } [EOL]     double[] init = new double[dim]; [EOL]     for (int i = 0; i < dim; i++) { [EOL]         init[i] = minPoint[i] - 20; [EOL]     } [EOL]     final double relTol = 1e-10; [EOL]     final int maxEval = 1000; [EOL]     final PowellOptimizer optim = new PowellOptimizer(relTol, 1e-100); [EOL]     final PointValuePair funcResult = optim.optimize(new MaxEval(maxEval), new ObjectiveFunction(func), GoalType.MINIMIZE, new InitialGuess(init)); [EOL]     final double funcValue = func.value(funcResult.getPoint()); [EOL]     final int funcEvaluations = optim.getEvaluations(); [EOL]     final double scale = 1e10; [EOL]     final MultivariateFunction funcScaled = new MultivariateFunction() { [EOL]  [EOL]         public double value(double[] x) { [EOL]             return scale * func.value(x); [EOL]         } [EOL]     }; [EOL]     final PointValuePair funcScaledResult = optim.optimize(new MaxEval(maxEval), new ObjectiveFunction(funcScaled), GoalType.MINIMIZE, new InitialGuess(init)); [EOL]     final double funcScaledValue = funcScaled.value(funcScaledResult.getPoint()); [EOL]     final int funcScaledEvaluations = optim.getEvaluations(); [EOL]     Assert.assertEquals(1, funcScaledValue / (scale * funcValue), relTol); [EOL]     Assert.assertEquals(funcEvaluations, funcScaledEvaluations); [EOL] } <line_num>: 147,203
private void doTest(MultivariateFunction func, double[] optimum, double[] init, GoalType goal, double fTol, double pointTol) { [EOL]     final PowellOptimizer optim = new PowellOptimizer(fTol, Math.ulp(1d)); [EOL]     final PointValuePair result = optim.optimize(new MaxEval(1000), new ObjectiveFunction(func), goal, new InitialGuess(init)); [EOL]     final double[] point = result.getPoint(); [EOL]     for (int i = 0, dim = optimum.length; i < dim; i++) { [EOL]         Assert.assertEquals("found[" + i + "]=" + point[i] + " value=" + result.getValue(), optimum[i], point[i], pointTol); [EOL]     } [EOL] } <line_num>: 214,232
private void doTest(MultivariateFunction func, double[] optimum, double[] init, GoalType goal, double fTol, double fLineTol, double pointTol) { [EOL]     final PowellOptimizer optim = new PowellOptimizer(fTol, Math.ulp(1d), fLineTol, Math.ulp(1d)); [EOL]     final PointValuePair result = optim.optimize(new MaxEval(1000), new ObjectiveFunction(func), goal, new InitialGuess(init)); [EOL]     final double[] point = result.getPoint(); [EOL]     for (int i = 0, dim = optimum.length; i < dim; i++) { [EOL]         Assert.assertEquals("found[" + i + "]=" + point[i] + " value=" + result.getValue(), optimum[i], point[i], pointTol); [EOL]     } [EOL]     Assert.assertTrue(optim.getIterations() > 0); [EOL] } <line_num>: 245,267
