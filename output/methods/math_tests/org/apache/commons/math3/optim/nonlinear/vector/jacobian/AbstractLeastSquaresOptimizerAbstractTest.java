public LinearProblem(double[][] factors, double[] target) { [EOL]     this.factors = new BlockRealMatrix(factors); [EOL]     this.target = target; [EOL] } <line_num>: 614,617
public abstract AbstractLeastSquaresOptimizer createOptimizer(); <line_num>: 104,104
public double[] value(double[] point) { [EOL]     return new double[] { FastMath.pow(point[0], 4) }; [EOL] } <line_num>: 113,117
public double[][] value(double[] point) { [EOL]     return new double[][] { { 0.25 * FastMath.pow(point[0], 3) } }; [EOL] } <line_num>: 120,124
@Test [EOL] public void testGetIterations() { [EOL]     AbstractLeastSquaresOptimizer optim = createOptimizer(); [EOL]     optim.optimize(new MaxEval(100), new Target(new double[] { 1 }), new Weight(new double[] { 1 }), new InitialGuess(new double[] { 3 }), new ModelFunction(new MultivariateVectorFunction() { [EOL]  [EOL]         public double[] value(double[] point) { [EOL]             return new double[] { FastMath.pow(point[0], 4) }; [EOL]         } [EOL]     }), new ModelFunctionJacobian(new MultivariateMatrixFunction() { [EOL]  [EOL]         public double[][] value(double[] point) { [EOL]             return new double[][] { { 0.25 * FastMath.pow(point[0], 3) } }; [EOL]         } [EOL]     })); [EOL]     Assert.assertTrue(optim.getIterations() > 0); [EOL] } <line_num>: 106,128
@Test [EOL] public void testTrivial() { [EOL]     LinearProblem problem = new LinearProblem(new double[][] { { 2 } }, new double[] { 3 }); [EOL]     AbstractLeastSquaresOptimizer optimizer = createOptimizer(); [EOL]     PointVectorValuePair optimum = optimizer.optimize(new MaxEval(100), problem.getModelFunction(), problem.getModelFunctionJacobian(), problem.getTarget(), new Weight(new double[] { 1 }), new InitialGuess(new double[] { 0 })); [EOL]     Assert.assertEquals(0, optimizer.getRMS(), 1e-10); [EOL]     Assert.assertEquals(1.5, optimum.getPoint()[0], 1e-10); [EOL]     Assert.assertEquals(3.0, optimum.getValue()[0], 1e-10); [EOL] } <line_num>: 130,145
@Test [EOL] public void testQRColumnsPermutation() { [EOL]     LinearProblem problem = new LinearProblem(new double[][] { { 1, -1 }, { 0, 2 }, { 1, -2 } }, new double[] { 4, 6, 1 }); [EOL]     AbstractLeastSquaresOptimizer optimizer = createOptimizer(); [EOL]     PointVectorValuePair optimum = optimizer.optimize(new MaxEval(100), problem.getModelFunction(), problem.getModelFunctionJacobian(), problem.getTarget(), new Weight(new double[] { 1, 1, 1 }), new InitialGuess(new double[] { 0, 0 })); [EOL]     Assert.assertEquals(0, optimizer.getRMS(), 1e-10); [EOL]     Assert.assertEquals(7, optimum.getPoint()[0], 1e-10); [EOL]     Assert.assertEquals(3, optimum.getPoint()[1], 1e-10); [EOL]     Assert.assertEquals(4, optimum.getValue()[0], 1e-10); [EOL]     Assert.assertEquals(6, optimum.getValue()[1], 1e-10); [EOL]     Assert.assertEquals(1, optimum.getValue()[2], 1e-10); [EOL] } <line_num>: 147,168
@Test [EOL] public void testNoDependency() { [EOL]     LinearProblem problem = new LinearProblem(new double[][] { { 2, 0, 0, 0, 0, 0 }, { 0, 2, 0, 0, 0, 0 }, { 0, 0, 2, 0, 0, 0 }, { 0, 0, 0, 2, 0, 0 }, { 0, 0, 0, 0, 2, 0 }, { 0, 0, 0, 0, 0, 2 } }, new double[] { 0, 1.1, 2.2, 3.3, 4.4, 5.5 }); [EOL]     AbstractLeastSquaresOptimizer optimizer = createOptimizer(); [EOL]     PointVectorValuePair optimum = optimizer.optimize(new MaxEval(100), problem.getModelFunction(), problem.getModelFunctionJacobian(), problem.getTarget(), new Weight(new double[] { 1, 1, 1, 1, 1, 1 }), new InitialGuess(new double[] { 0, 0, 0, 0, 0, 0 })); [EOL]     Assert.assertEquals(0, optimizer.getRMS(), 1e-10); [EOL]     for (int i = 0; i < problem.target.length; ++i) { [EOL]         Assert.assertEquals(0.55 * i, optimum.getPoint()[i], 1e-10); [EOL]     } [EOL] } <line_num>: 170,192
@Test [EOL] public void testOneSet() { [EOL]     LinearProblem problem = new LinearProblem(new double[][] { { 1, 0, 0 }, { -1, 1, 0 }, { 0, -1, 1 } }, new double[] { 1, 1, 1 }); [EOL]     AbstractLeastSquaresOptimizer optimizer = createOptimizer(); [EOL]     PointVectorValuePair optimum = optimizer.optimize(new MaxEval(100), problem.getModelFunction(), problem.getModelFunctionJacobian(), problem.getTarget(), new Weight(new double[] { 1, 1, 1 }), new InitialGuess(new double[] { 0, 0, 0 })); [EOL]     Assert.assertEquals(0, optimizer.getRMS(), 1e-10); [EOL]     Assert.assertEquals(1, optimum.getPoint()[0], 1e-10); [EOL]     Assert.assertEquals(2, optimum.getPoint()[1], 1e-10); [EOL]     Assert.assertEquals(3, optimum.getPoint()[2], 1e-10); [EOL] } <line_num>: 194,214
@Test [EOL] public void testTwoSets() { [EOL]     double epsilon = 1e-7; [EOL]     LinearProblem problem = new LinearProblem(new double[][] { { 2, 1, 0, 4, 0, 0 }, { -4, -2, 3, -7, 0, 0 }, { 4, 1, -2, 8, 0, 0 }, { 0, -3, -12, -1, 0, 0 }, { 0, 0, 0, 0, epsilon, 1 }, { 0, 0, 0, 0, 1, 1 } }, new double[] { 2, -9, 2, 2, 1 + epsilon * epsilon, 2 }); [EOL]     AbstractLeastSquaresOptimizer optimizer = createOptimizer(); [EOL]     PointVectorValuePair optimum = optimizer.optimize(new MaxEval(100), problem.getModelFunction(), problem.getModelFunctionJacobian(), problem.getTarget(), new Weight(new double[] { 1, 1, 1, 1, 1, 1 }), new InitialGuess(new double[] { 0, 0, 0, 0, 0, 0 })); [EOL]     Assert.assertEquals(0, optimizer.getRMS(), 1e-10); [EOL]     Assert.assertEquals(3, optimum.getPoint()[0], 1e-10); [EOL]     Assert.assertEquals(4, optimum.getPoint()[1], 1e-10); [EOL]     Assert.assertEquals(-1, optimum.getPoint()[2], 1e-10); [EOL]     Assert.assertEquals(-2, optimum.getPoint()[3], 1e-10); [EOL]     Assert.assertEquals(1 + epsilon, optimum.getPoint()[4], 1e-10); [EOL]     Assert.assertEquals(1 - epsilon, optimum.getPoint()[5], 1e-10); [EOL] } <line_num>: 216,243
@Test(expected = ConvergenceException.class) [EOL] public void testNonInvertible() throws Exception { [EOL]     LinearProblem problem = new LinearProblem(new double[][] { { 1, 2, -3 }, { 2, 1, 3 }, { -3, 0, -9 } }, new double[] { 1, 1, 1 }); [EOL]     AbstractLeastSquaresOptimizer optimizer = createOptimizer(); [EOL]     optimizer.optimize(new MaxEval(100), problem.getModelFunction(), problem.getModelFunctionJacobian(), problem.getTarget(), new Weight(new double[] { 1, 1, 1 }), new InitialGuess(new double[] { 0, 0, 0 })); [EOL] } <line_num>: 245,262
@Test [EOL] public void testIllConditioned() { [EOL]     LinearProblem problem1 = new LinearProblem(new double[][] { { 10, 7, 8, 7 }, { 7, 5, 6, 5 }, { 8, 6, 10, 9 }, { 7, 5, 9, 10 } }, new double[] { 32, 23, 33, 31 }); [EOL]     AbstractLeastSquaresOptimizer optimizer = createOptimizer(); [EOL]     PointVectorValuePair optimum1 = optimizer.optimize(new MaxEval(100), problem1.getModelFunction(), problem1.getModelFunctionJacobian(), problem1.getTarget(), new Weight(new double[] { 1, 1, 1, 1 }), new InitialGuess(new double[] { 0, 1, 2, 3 })); [EOL]     Assert.assertEquals(0, optimizer.getRMS(), 1e-10); [EOL]     Assert.assertEquals(1, optimum1.getPoint()[0], 1e-10); [EOL]     Assert.assertEquals(1, optimum1.getPoint()[1], 1e-10); [EOL]     Assert.assertEquals(1, optimum1.getPoint()[2], 1e-10); [EOL]     Assert.assertEquals(1, optimum1.getPoint()[3], 1e-10); [EOL]     LinearProblem problem2 = new LinearProblem(new double[][] { { 10.00, 7.00, 8.10, 7.20 }, { 7.08, 5.04, 6.00, 5.00 }, { 8.00, 5.98, 9.89, 9.00 }, { 6.99, 4.99, 9.00, 9.98 } }, new double[] { 32, 23, 33, 31 }); [EOL]     PointVectorValuePair optimum2 = optimizer.optimize(new MaxEval(100), problem2.getModelFunction(), problem2.getModelFunctionJacobian(), problem2.getTarget(), new Weight(new double[] { 1, 1, 1, 1 }), new InitialGuess(new double[] { 0, 1, 2, 3 })); [EOL]     Assert.assertEquals(0, optimizer.getRMS(), 1e-10); [EOL]     Assert.assertEquals(-81, optimum2.getPoint()[0], 1e-8); [EOL]     Assert.assertEquals(137, optimum2.getPoint()[1], 1e-8); [EOL]     Assert.assertEquals(-34, optimum2.getPoint()[2], 1e-8); [EOL]     Assert.assertEquals(22, optimum2.getPoint()[3], 1e-8); [EOL] } <line_num>: 264,304
@Test [EOL] public void testMoreEstimatedParametersSimple() { [EOL]     LinearProblem problem = new LinearProblem(new double[][] { { 3, 2, 0, 0 }, { 0, 1, -1, 1 }, { 2, 0, 1, 0 } }, new double[] { 7, 3, 5 }); [EOL]     AbstractLeastSquaresOptimizer optimizer = createOptimizer(); [EOL]     optimizer.optimize(new MaxEval(100), problem.getModelFunction(), problem.getModelFunctionJacobian(), problem.getTarget(), new Weight(new double[] { 1, 1, 1 }), new InitialGuess(new double[] { 7, 6, 5, 4 })); [EOL]     Assert.assertEquals(0, optimizer.getRMS(), 1e-10); [EOL] } <line_num>: 306,323
@Test [EOL] public void testMoreEstimatedParametersUnsorted() { [EOL]     LinearProblem problem = new LinearProblem(new double[][] { { 1, 1, 0, 0, 0, 0 }, { 0, 0, 1, 1, 1, 0 }, { 0, 0, 0, 0, 1, -1 }, { 0, 0, -1, 1, 0, 1 }, { 0, 0, 0, -1, 1, 0 } }, new double[] { 3, 12, -1, 7, 1 }); [EOL]     AbstractLeastSquaresOptimizer optimizer = createOptimizer(); [EOL]     PointVectorValuePair optimum = optimizer.optimize(new MaxEval(100), problem.getModelFunction(), problem.getModelFunctionJacobian(), problem.getTarget(), new Weight(new double[] { 1, 1, 1, 1, 1 }), new InitialGuess(new double[] { 2, 2, 2, 2, 2, 2 })); [EOL]     Assert.assertEquals(0, optimizer.getRMS(), 1e-10); [EOL]     Assert.assertEquals(3, optimum.getPointRef()[2], 1e-10); [EOL]     Assert.assertEquals(4, optimum.getPointRef()[3], 1e-10); [EOL]     Assert.assertEquals(5, optimum.getPointRef()[4], 1e-10); [EOL]     Assert.assertEquals(6, optimum.getPointRef()[5], 1e-10); [EOL] } <line_num>: 325,348
@Test [EOL] public void testRedundantEquations() { [EOL]     LinearProblem problem = new LinearProblem(new double[][] { { 1, 1 }, { 1, -1 }, { 1, 3 } }, new double[] { 3, 1, 5 }); [EOL]     AbstractLeastSquaresOptimizer optimizer = createOptimizer(); [EOL]     PointVectorValuePair optimum = optimizer.optimize(new MaxEval(100), problem.getModelFunction(), problem.getModelFunctionJacobian(), problem.getTarget(), new Weight(new double[] { 1, 1, 1 }), new InitialGuess(new double[] { 1, 1 })); [EOL]     Assert.assertEquals(0, optimizer.getRMS(), 1e-10); [EOL]     Assert.assertEquals(2, optimum.getPointRef()[0], 1e-10); [EOL]     Assert.assertEquals(1, optimum.getPointRef()[1], 1e-10); [EOL] } <line_num>: 350,369
@Test [EOL] public void testInconsistentEquations() { [EOL]     LinearProblem problem = new LinearProblem(new double[][] { { 1, 1 }, { 1, -1 }, { 1, 3 } }, new double[] { 3, 1, 4 }); [EOL]     AbstractLeastSquaresOptimizer optimizer = createOptimizer(); [EOL]     optimizer.optimize(new MaxEval(100), problem.getModelFunction(), problem.getModelFunctionJacobian(), problem.getTarget(), new Weight(new double[] { 1, 1, 1 }), new InitialGuess(new double[] { 1, 1 })); [EOL]     Assert.assertTrue(optimizer.getRMS() > 0.1); [EOL] } <line_num>: 371,387
@Test(expected = DimensionMismatchException.class) [EOL] public void testInconsistentSizes1() { [EOL]     LinearProblem problem = new LinearProblem(new double[][] { { 1, 0 }, { 0, 1 } }, new double[] { -1, 1 }); [EOL]     AbstractLeastSquaresOptimizer optimizer = createOptimizer(); [EOL]     PointVectorValuePair optimum = optimizer.optimize(new MaxEval(100), problem.getModelFunction(), problem.getModelFunctionJacobian(), problem.getTarget(), new Weight(new double[] { 1, 1 }), new InitialGuess(new double[] { 0, 0 })); [EOL]     Assert.assertEquals(0, optimizer.getRMS(), 1e-10); [EOL]     Assert.assertEquals(-1, optimum.getPoint()[0], 1e-10); [EOL]     Assert.assertEquals(1, optimum.getPoint()[1], 1e-10); [EOL]     optimizer.optimize(new MaxEval(100), problem.getModelFunction(), problem.getModelFunctionJacobian(), problem.getTarget(), new Weight(new double[] { 1 }), new InitialGuess(new double[] { 0, 0 })); [EOL] } <line_num>: 389,412
@Test(expected = DimensionMismatchException.class) [EOL] public void testInconsistentSizes2() { [EOL]     LinearProblem problem = new LinearProblem(new double[][] { { 1, 0 }, { 0, 1 } }, new double[] { -1, 1 }); [EOL]     AbstractLeastSquaresOptimizer optimizer = createOptimizer(); [EOL]     PointVectorValuePair optimum = optimizer.optimize(new MaxEval(100), problem.getModelFunction(), problem.getModelFunctionJacobian(), problem.getTarget(), new Weight(new double[] { 1, 1 }), new InitialGuess(new double[] { 0, 0 })); [EOL]     Assert.assertEquals(0, optimizer.getRMS(), 1e-10); [EOL]     Assert.assertEquals(-1, optimum.getPoint()[0], 1e-10); [EOL]     Assert.assertEquals(1, optimum.getPoint()[1], 1e-10); [EOL]     optimizer.optimize(new MaxEval(100), problem.getModelFunction(), problem.getModelFunctionJacobian(), new Target(new double[] { 1 }), new Weight(new double[] { 1 }), new InitialGuess(new double[] { 0, 0 })); [EOL] } <line_num>: 414,437
@Test [EOL] public void testCircleFitting() { [EOL]     CircleVectorial circle = new CircleVectorial(); [EOL]     circle.addPoint(30, 68); [EOL]     circle.addPoint(50, -6); [EOL]     circle.addPoint(110, -20); [EOL]     circle.addPoint(35, 15); [EOL]     circle.addPoint(45, 97); [EOL]     AbstractLeastSquaresOptimizer optimizer = createOptimizer(); [EOL]     PointVectorValuePair optimum = optimizer.optimize(new MaxEval(100), circle.getModelFunction(), circle.getModelFunctionJacobian(), new Target(new double[] { 0, 0, 0, 0, 0 }), new Weight(new double[] { 1, 1, 1, 1, 1 }), new InitialGuess(new double[] { 98.680, 47.345 })); [EOL]     Assert.assertTrue(optimizer.getEvaluations() < 10); [EOL]     double rms = optimizer.getRMS(); [EOL]     Assert.assertEquals(1.768262623567235, FastMath.sqrt(circle.getN()) * rms, 1e-10); [EOL]     Vector2D center = new Vector2D(optimum.getPointRef()[0], optimum.getPointRef()[1]); [EOL]     Assert.assertEquals(69.96016176931406, circle.getRadius(center), 1e-6); [EOL]     Assert.assertEquals(96.07590211815305, center.getX(), 1e-6); [EOL]     Assert.assertEquals(48.13516790438953, center.getY(), 1e-6); [EOL]     double[][] cov = optimizer.computeCovariances(optimum.getPoint(), 1e-14); [EOL]     Assert.assertEquals(1.839, cov[0][0], 0.001); [EOL]     Assert.assertEquals(0.731, cov[0][1], 0.001); [EOL]     Assert.assertEquals(cov[0][1], cov[1][0], 1e-14); [EOL]     Assert.assertEquals(0.786, cov[1][1], 0.001); [EOL]     double r = circle.getRadius(center); [EOL]     for (double d = 0; d < 2 * FastMath.PI; d += 0.01) { [EOL]         circle.addPoint(center.getX() + r * FastMath.cos(d), center.getY() + r * FastMath.sin(d)); [EOL]     } [EOL]     double[] target = new double[circle.getN()]; [EOL]     Arrays.fill(target, 0); [EOL]     double[] weights = new double[circle.getN()]; [EOL]     Arrays.fill(weights, 2); [EOL]     optimum = optimizer.optimize(new MaxEval(100), circle.getModelFunction(), circle.getModelFunctionJacobian(), new Target(target), new Weight(weights), new InitialGuess(new double[] { 98.680, 47.345 })); [EOL]     cov = optimizer.computeCovariances(optimum.getPoint(), 1e-14); [EOL]     Assert.assertEquals(0.0016, cov[0][0], 0.001); [EOL]     Assert.assertEquals(3.2e-7, cov[0][1], 1e-9); [EOL]     Assert.assertEquals(cov[0][1], cov[1][0], 1e-14); [EOL]     Assert.assertEquals(0.0016, cov[1][1], 0.001); [EOL] } <line_num>: 439,488
@Test [EOL] public void testCircleFittingBadInit() { [EOL]     CircleVectorial circle = new CircleVectorial(); [EOL]     double[][] points = circlePoints; [EOL]     double[] target = new double[points.length]; [EOL]     Arrays.fill(target, 0); [EOL]     double[] weights = new double[points.length]; [EOL]     Arrays.fill(weights, 2); [EOL]     for (int i = 0; i < points.length; ++i) { [EOL]         circle.addPoint(points[i][0], points[i][1]); [EOL]     } [EOL]     AbstractLeastSquaresOptimizer optimizer = createOptimizer(); [EOL]     PointVectorValuePair optimum = optimizer.optimize(new MaxEval(100), circle.getModelFunction(), circle.getModelFunctionJacobian(), new Target(target), new Weight(weights), new InitialGuess(new double[] { -12, -12 })); [EOL]     Vector2D center = new Vector2D(optimum.getPointRef()[0], optimum.getPointRef()[1]); [EOL]     Assert.assertTrue(optimizer.getEvaluations() < 25); [EOL]     Assert.assertEquals(0.043, optimizer.getRMS(), 1e-3); [EOL]     Assert.assertEquals(0.292235, circle.getRadius(center), 1e-6); [EOL]     Assert.assertEquals(-0.151738, center.getX(), 1e-6); [EOL]     Assert.assertEquals(0.2075001, center.getY(), 1e-6); [EOL] } <line_num>: 490,515
@Test [EOL] public void testCircleFittingGoodInit() { [EOL]     CircleVectorial circle = new CircleVectorial(); [EOL]     double[][] points = circlePoints; [EOL]     double[] target = new double[points.length]; [EOL]     Arrays.fill(target, 0); [EOL]     double[] weights = new double[points.length]; [EOL]     Arrays.fill(weights, 2); [EOL]     for (int i = 0; i < points.length; ++i) { [EOL]         circle.addPoint(points[i][0], points[i][1]); [EOL]     } [EOL]     AbstractLeastSquaresOptimizer optimizer = createOptimizer(); [EOL]     PointVectorValuePair optimum = optimizer.optimize(new MaxEval(100), circle.getModelFunction(), circle.getModelFunctionJacobian(), new Target(target), new Weight(weights), new InitialGuess(new double[] { 0, 0 })); [EOL]     Assert.assertEquals(-0.1517383071957963, optimum.getPointRef()[0], 1e-6); [EOL]     Assert.assertEquals(0.2074999736353867, optimum.getPointRef()[1], 1e-6); [EOL]     Assert.assertEquals(0.04268731682389561, optimizer.getRMS(), 1e-8); [EOL] } <line_num>: 517,539
public void doTestStRD(final StatisticalReferenceDataset dataset, final double errParams, final double errParamsSd) { [EOL]     final AbstractLeastSquaresOptimizer optimizer = createOptimizer(); [EOL]     final double[] w = new double[dataset.getNumObservations()]; [EOL]     Arrays.fill(w, 1); [EOL]     final double[][] data = dataset.getData(); [EOL]     final double[] initial = dataset.getStartingPoint(0); [EOL]     final StatisticalReferenceDataset.LeastSquaresProblem problem = dataset.getLeastSquaresProblem(); [EOL]     final PointVectorValuePair optimum = optimizer.optimize(new MaxEval(100), problem.getModelFunction(), problem.getModelFunctionJacobian(), new Target(data[1]), new Weight(w), new InitialGuess(initial)); [EOL]     final double[] actual = optimum.getPoint(); [EOL]     for (int i = 0; i < actual.length; i++) { [EOL]         double expected = dataset.getParameter(i); [EOL]         double delta = FastMath.abs(errParams * expected); [EOL]         Assert.assertEquals(dataset.getName() + ", param #" + i, expected, actual[i], delta); [EOL]     } [EOL] } <line_num>: 573,598
@Test [EOL] public void testKirby2() throws IOException { [EOL]     doTestStRD(StatisticalReferenceDatasetFactory.createKirby2(), 1E-7, 1E-7); [EOL] } <line_num>: 600,603
@Test [EOL] public void testHahn1() throws IOException { [EOL]     doTestStRD(StatisticalReferenceDatasetFactory.createHahn1(), 1E-7, 1E-4); [EOL] } <line_num>: 605,608
public Target getTarget() { [EOL]     return new Target(target); [EOL] } <line_num>: 619,621
public double[] value(double[] params) { [EOL]     return factors.operate(params); [EOL] } <line_num>: 625,627
public ModelFunction getModelFunction() { [EOL]     return new ModelFunction(new MultivariateVectorFunction() { [EOL]  [EOL]         public double[] value(double[] params) { [EOL]             return factors.operate(params); [EOL]         } [EOL]     }); [EOL] } <line_num>: 623,629
public double[][] value(double[] params) { [EOL]     return factors.getData(); [EOL] } <line_num>: 633,635
public ModelFunctionJacobian getModelFunctionJacobian() { [EOL]     return new ModelFunctionJacobian(new MultivariateMatrixFunction() { [EOL]  [EOL]         public double[][] value(double[] params) { [EOL]             return factors.getData(); [EOL]         } [EOL]     }); [EOL] } <line_num>: 631,637
