public Display() { [EOL]     setTitle("Commons-Math: Pseudo/Quasi-random examples"); [EOL]     setSize(800, 800); [EOL]     setLayout(new GridBagLayout()); [EOL]     int[] datasets = new int[] { 256, 1000, 2500, 1000 }; [EOL]     List<Pair<String, RandomVectorGenerator>> generators = new ArrayList<Pair<String, RandomVectorGenerator>>(); [EOL]     generators.add(new Pair<String, RandomVectorGenerator>("Uncorrelated\nUniform(JDK)", new UncorrelatedRandomVectorGenerator(2, new UniformRandomGenerator(new JDKRandomGenerator())))); [EOL]     generators.add(new Pair<String, RandomVectorGenerator>("Independent\nRandom(MT)", new RandomVectorGenerator() { [EOL]  [EOL]         RandomGenerator[] rngs = new RandomGenerator[] { new MersenneTwister(0), new MersenneTwister(1) }; [EOL]  [EOL]         public double[] nextVector() { [EOL]             final double[] vector = new double[2]; [EOL]             vector[0] = rngs[0].nextDouble(); [EOL]             vector[1] = rngs[1].nextDouble(); [EOL]             return vector; [EOL]         } [EOL]     })); [EOL]     generators.add(new Pair<String, RandomVectorGenerator>("HaltonSequence", new HaltonSequenceGenerator(2))); [EOL]     generators.add(new Pair<String, RandomVectorGenerator>("SobolSequence", new SobolSequenceGenerator(2))); [EOL]     GridBagConstraints c = new GridBagConstraints(); [EOL]     c.fill = GridBagConstraints.VERTICAL; [EOL]     c.gridx = 1; [EOL]     c.gridy = 0; [EOL]     c.insets = new Insets(2, 2, 2, 2); [EOL]     for (Pair<String, RandomVectorGenerator> pair : generators) { [EOL]         JTextArea text = new JTextArea(pair.getFirst()); [EOL]         text.setEditable(false); [EOL]         text.setOpaque(false); [EOL]         add(text, c); [EOL]         c.gridx++; [EOL]     } [EOL]     int saveY = ++c.gridy; [EOL]     c.gridx = 0; [EOL]     for (int type = 0; type < 4; type++) { [EOL]         JLabel text = new JLabel("n=" + String.valueOf(datasets[type])); [EOL]         text.setOpaque(false); [EOL]         add(text, c); [EOL]         c.gridy++; [EOL]     } [EOL]     c.gridy = saveY; [EOL]     for (int type = 0; type < 4; type++) { [EOL]         c.gridx = 1; [EOL]         for (Pair<String, RandomVectorGenerator> pair : generators) { [EOL]             List<Vector2D> points = null; [EOL]             int samples = datasets[type]; [EOL]             switch(type) { [EOL]                 case 0: [EOL]                     points = makeRandom(samples, pair.getValue()); [EOL]                     break; [EOL]                 case 1: [EOL]                     points = makeRandom(samples, pair.getValue()); [EOL]                     break; [EOL]                 case 2: [EOL]                     points = makeRandom(samples, pair.getValue()); [EOL]                     break; [EOL]                 case 3: [EOL]                     points = makeCircle(samples, pair.getValue()); [EOL]                     break; [EOL]             } [EOL]             add(new Plot(points), c); [EOL]             c.gridx++; [EOL]         } [EOL]         c.gridy++; [EOL]     } [EOL] } <line_num>: 123,202
public Plot(final List<Vector2D> points) { [EOL]     this.points = points; [EOL] } <line_num>: 212,214
public static List<Vector2D> makeCircle(int samples, final RandomVectorGenerator generator) { [EOL]     List<Vector2D> points = new ArrayList<Vector2D>(); [EOL]     for (double i = 0; i < samples; i++) { [EOL]         double[] vector = generator.nextVector(); [EOL]         Vector2D point = new Vector2D(vector); [EOL]         points.add(point); [EOL]     } [EOL]     points = normalize(points); [EOL]     List<Vector2D> circlePoints = new ArrayList<Vector2D>(); [EOL]     for (Vector2D p : points) { [EOL]         double criteria = FastMath.pow(p.getX(), 2) + FastMath.pow(p.getY(), 2); [EOL]         if (criteria < 1.0) { [EOL]             circlePoints.add(p); [EOL]         } [EOL]     } [EOL]     return circlePoints; [EOL] } <line_num>: 53,74
public static List<Vector2D> makeRandom(int samples, RandomVectorGenerator generator) { [EOL]     List<Vector2D> points = new ArrayList<Vector2D>(); [EOL]     for (double i = 0; i < samples; i++) { [EOL]         double[] vector = generator.nextVector(); [EOL]         Vector2D point = new Vector2D(vector); [EOL]         points.add(point); [EOL]     } [EOL]     return normalize(points); [EOL] } <line_num>: 76,85
public static List<Vector2D> normalize(final List<Vector2D> input) { [EOL]     double minX = Double.MAX_VALUE; [EOL]     double maxX = Double.MIN_VALUE; [EOL]     for (Vector2D p : input) { [EOL]         minX = FastMath.min(minX, p.getX()); [EOL]         maxX = FastMath.max(maxX, p.getX()); [EOL]     } [EOL]     double minY, maxY; [EOL]     if (FastMath.abs(minX) < 0.1) { [EOL]         minX = minY = 0.0; [EOL]         maxX = maxY = 1.0; [EOL]     } else { [EOL]         minX = minY = -FastMath.sqrt(3); [EOL]         maxX = maxY = FastMath.sqrt(3); [EOL]     } [EOL]     double rangeX = maxX - minX; [EOL]     double rangeY = maxY - minY; [EOL]     List<Vector2D> points = new ArrayList<Vector2D>(); [EOL]     for (Vector2D p : input) { [EOL]         double[] arr = p.toArray(); [EOL]         arr[0] = (arr[0] - minX) / rangeX * 2 - 1; [EOL]         arr[1] = (arr[1] - minY) / rangeY * 2 - 1; [EOL]         points.add(new Vector2D(arr)); [EOL]     } [EOL]     return points; [EOL] } <line_num>: 87,118
public double[] nextVector() { [EOL]     final double[] vector = new double[2]; [EOL]     vector[0] = rngs[0].nextDouble(); [EOL]     vector[1] = rngs[1].nextDouble(); [EOL]     return vector; [EOL] } <line_num>: 141,146
@Override [EOL] protected void paintComponent(Graphics g) { [EOL]     super.paintComponent(g); [EOL]     Graphics2D g2 = (Graphics2D) g; [EOL]     g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); [EOL]     int w = getWidth(); [EOL]     int h = getHeight(); [EOL]     g2.clearRect(0, 0, w, h); [EOL]     g2.setPaint(Color.black); [EOL]     g2.drawRect(0, 0, w - 1, h - 1); [EOL]     for (Vector2D point : points) { [EOL]         Vector2D p = transform(point, w, h); [EOL]         double[] arr = p.toArray(); [EOL]         g2.draw(new Rectangle2D.Double(arr[0] - 1, arr[1] - 1, 2, 2)); [EOL]     } [EOL] } <line_num>: 216,236
@Override [EOL] public Dimension getPreferredSize() { [EOL]     return new Dimension(140, 140); [EOL] } <line_num>: 238,241
private Vector2D transform(Vector2D point, int width, int height) { [EOL]     double[] arr = point.toArray(); [EOL]     return new Vector2D(new double[] { PAD + (arr[0] + 1) / 2.0 * (width - 2 * PAD), height - PAD - (arr[1] + 1) / 2.0 * (height - 2 * PAD) }); [EOL] } <line_num>: 243,247
public static void main(String[] args) { [EOL]     ExampleUtils.showExampleFrame(new Display()); [EOL] } <line_num>: 250,252
