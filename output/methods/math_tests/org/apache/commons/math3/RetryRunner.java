public RetryRunner(final Class<?> testClass) throws InitializationError { [EOL]     super(testClass); [EOL] } <line_num>: 37,40
@Override [EOL] public void evaluate() throws Throwable { [EOL]     Throwable failureReason = null; [EOL]     final Retry retry = method.getAnnotation(Retry.class); [EOL]     if (retry == null) { [EOL]         singleTryStatement.evaluate(); [EOL]     } else { [EOL]         final int numRetries = retry.value(); [EOL]         for (int i = 0; i < numRetries; ++i) { [EOL]             try { [EOL]                 singleTryStatement.evaluate(); [EOL]                 return; [EOL]             } catch (Throwable t) { [EOL]                 failureReason = t; [EOL]             } [EOL]         } [EOL]         throw failureReason; [EOL]     } [EOL] } <line_num>: 53,79
@Override [EOL] public Statement methodInvoker(final FrameworkMethod method, Object test) { [EOL]     final Statement singleTryStatement = super.methodInvoker(method, test); [EOL]     return new Statement() { [EOL]  [EOL]         @Override [EOL]         public void evaluate() throws Throwable { [EOL]             Throwable failureReason = null; [EOL]             final Retry retry = method.getAnnotation(Retry.class); [EOL]             if (retry == null) { [EOL]                 singleTryStatement.evaluate(); [EOL]             } else { [EOL]                 final int numRetries = retry.value(); [EOL]                 for (int i = 0; i < numRetries; ++i) { [EOL]                     try { [EOL]                         singleTryStatement.evaluate(); [EOL]                         return; [EOL]                     } catch (Throwable t) { [EOL]                         failureReason = t; [EOL]                     } [EOL]                 } [EOL]                 throw failureReason; [EOL]             } [EOL]         } [EOL]     }; [EOL] } <line_num>: 42,81
