@Test(expected = NonSquareOperatorException.class) [EOL] public void testNonSquareOperator() { [EOL]     final Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 3); [EOL]     final IterativeLinearSolver solver; [EOL]     solver = new ConjugateGradient(10, 0., false); [EOL]     final ArrayRealVector b = new ArrayRealVector(a.getRowDimension()); [EOL]     final ArrayRealVector x = new ArrayRealVector(a.getColumnDimension()); [EOL]     solver.solve(a, b, x); [EOL] } <line_num>: 32,40
@Test(expected = DimensionMismatchException.class) [EOL] public void testDimensionMismatchRightHandSide() { [EOL]     final Array2DRowRealMatrix a = new Array2DRowRealMatrix(3, 3); [EOL]     final IterativeLinearSolver solver; [EOL]     solver = new ConjugateGradient(10, 0., false); [EOL]     final ArrayRealVector b = new ArrayRealVector(2); [EOL]     final ArrayRealVector x = new ArrayRealVector(3); [EOL]     solver.solve(a, b, x); [EOL] } <line_num>: 42,50
@Test(expected = DimensionMismatchException.class) [EOL] public void testDimensionMismatchSolution() { [EOL]     final Array2DRowRealMatrix a = new Array2DRowRealMatrix(3, 3); [EOL]     final IterativeLinearSolver solver; [EOL]     solver = new ConjugateGradient(10, 0., false); [EOL]     final ArrayRealVector b = new ArrayRealVector(3); [EOL]     final ArrayRealVector x = new ArrayRealVector(2); [EOL]     solver.solve(a, b, x); [EOL] } <line_num>: 52,60
@Test(expected = NonPositiveDefiniteOperatorException.class) [EOL] public void testNonPositiveDefiniteLinearOperator() { [EOL]     final Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 2); [EOL]     a.setEntry(0, 0, -1.); [EOL]     a.setEntry(0, 1, 2.); [EOL]     a.setEntry(1, 0, 3.); [EOL]     a.setEntry(1, 1, 4.); [EOL]     final IterativeLinearSolver solver; [EOL]     solver = new ConjugateGradient(10, 0., true); [EOL]     final ArrayRealVector b = new ArrayRealVector(2); [EOL]     b.setEntry(0, -1.); [EOL]     b.setEntry(1, -1.); [EOL]     final ArrayRealVector x = new ArrayRealVector(2); [EOL]     solver.solve(a, b, x); [EOL] } <line_num>: 62,76
@Test [EOL] public void testUnpreconditionedSolution() { [EOL]     final int n = 5; [EOL]     final int maxIterations = 100; [EOL]     final RealLinearOperator a = new HilbertMatrix(n); [EOL]     final InverseHilbertMatrix ainv = new InverseHilbertMatrix(n); [EOL]     final IterativeLinearSolver solver; [EOL]     solver = new ConjugateGradient(maxIterations, 1E-10, true); [EOL]     final RealVector b = new ArrayRealVector(n); [EOL]     for (int j = 0; j < n; j++) { [EOL]         b.set(0.); [EOL]         b.setEntry(j, 1.); [EOL]         final RealVector x = solver.solve(a, b); [EOL]         for (int i = 0; i < n; i++) { [EOL]             final double actual = x.getEntry(i); [EOL]             final double expected = ainv.getEntry(i, j); [EOL]             final double delta = 1E-10 * Math.abs(expected); [EOL]             final String msg = String.format("entry[%d][%d]", i, j); [EOL]             Assert.assertEquals(msg, expected, actual, delta); [EOL]         } [EOL]     } [EOL] } <line_num>: 78,99
@Test [EOL] public void testUnpreconditionedInPlaceSolutionWithInitialGuess() { [EOL]     final int n = 5; [EOL]     final int maxIterations = 100; [EOL]     final RealLinearOperator a = new HilbertMatrix(n); [EOL]     final InverseHilbertMatrix ainv = new InverseHilbertMatrix(n); [EOL]     final IterativeLinearSolver solver; [EOL]     solver = new ConjugateGradient(maxIterations, 1E-10, true); [EOL]     final RealVector b = new ArrayRealVector(n); [EOL]     for (int j = 0; j < n; j++) { [EOL]         b.set(0.); [EOL]         b.setEntry(j, 1.); [EOL]         final RealVector x0 = new ArrayRealVector(n); [EOL]         x0.set(1.); [EOL]         final RealVector x = solver.solveInPlace(a, b, x0); [EOL]         Assert.assertSame("x should be a reference to x0", x0, x); [EOL]         for (int i = 0; i < n; i++) { [EOL]             final double actual = x.getEntry(i); [EOL]             final double expected = ainv.getEntry(i, j); [EOL]             final double delta = 1E-10 * Math.abs(expected); [EOL]             final String msg = String.format("entry[%d][%d)", i, j); [EOL]             Assert.assertEquals(msg, expected, actual, delta); [EOL]         } [EOL]     } [EOL] } <line_num>: 101,125
@Test [EOL] public void testUnpreconditionedSolutionWithInitialGuess() { [EOL]     final int n = 5; [EOL]     final int maxIterations = 100; [EOL]     final RealLinearOperator a = new HilbertMatrix(n); [EOL]     final InverseHilbertMatrix ainv = new InverseHilbertMatrix(n); [EOL]     final IterativeLinearSolver solver; [EOL]     solver = new ConjugateGradient(maxIterations, 1E-10, true); [EOL]     final RealVector b = new ArrayRealVector(n); [EOL]     for (int j = 0; j < n; j++) { [EOL]         b.set(0.); [EOL]         b.setEntry(j, 1.); [EOL]         final RealVector x0 = new ArrayRealVector(n); [EOL]         x0.set(1.); [EOL]         final RealVector x = solver.solve(a, b, x0); [EOL]         Assert.assertNotSame("x should not be a reference to x0", x0, x); [EOL]         for (int i = 0; i < n; i++) { [EOL]             final double actual = x.getEntry(i); [EOL]             final double expected = ainv.getEntry(i, j); [EOL]             final double delta = 1E-10 * Math.abs(expected); [EOL]             final String msg = String.format("entry[%d][%d]", i, j); [EOL]             Assert.assertEquals(msg, expected, actual, delta); [EOL]             Assert.assertEquals(msg, x0.getEntry(i), 1., Math.ulp(1.)); [EOL]         } [EOL]     } [EOL] } <line_num>: 127,152
public void terminationPerformed(final IterationEvent e) { [EOL] } <line_num>: 171,173
public void iterationStarted(final IterationEvent e) { [EOL] } <line_num>: 175,177
public void iterationPerformed(final IterationEvent e) { [EOL]     final IterativeLinearSolverEvent evt; [EOL]     evt = (IterativeLinearSolverEvent) e; [EOL]     RealVector v = evt.getResidual(); [EOL]     r.setSubVector(0, v); [EOL]     v = evt.getSolution(); [EOL]     x.setSubVector(0, v); [EOL] } <line_num>: 179,186
public void initializationPerformed(final IterationEvent e) { [EOL] } <line_num>: 188,190
@Test [EOL] public void testUnpreconditionedResidual() { [EOL]     final int n = 10; [EOL]     final int maxIterations = n; [EOL]     final RealLinearOperator a = new HilbertMatrix(n); [EOL]     final ConjugateGradient solver; [EOL]     solver = new ConjugateGradient(maxIterations, 1E-15, true); [EOL]     final RealVector r = new ArrayRealVector(n); [EOL]     final RealVector x = new ArrayRealVector(n); [EOL]     final IterationListener listener = new IterationListener() { [EOL]  [EOL]         public void terminationPerformed(final IterationEvent e) { [EOL]         } [EOL]  [EOL]         public void iterationStarted(final IterationEvent e) { [EOL]         } [EOL]  [EOL]         public void iterationPerformed(final IterationEvent e) { [EOL]             final IterativeLinearSolverEvent evt; [EOL]             evt = (IterativeLinearSolverEvent) e; [EOL]             RealVector v = evt.getResidual(); [EOL]             r.setSubVector(0, v); [EOL]             v = evt.getSolution(); [EOL]             x.setSubVector(0, v); [EOL]         } [EOL]  [EOL]         public void initializationPerformed(final IterationEvent e) { [EOL]         } [EOL]     }; [EOL]     solver.getIterationManager().addIterationListener(listener); [EOL]     final RealVector b = new ArrayRealVector(n); [EOL]     for (int j = 0; j < n; j++) { [EOL]         b.set(0.); [EOL]         b.setEntry(j, 1.); [EOL]         boolean caught = false; [EOL]         try { [EOL]             solver.solve(a, b); [EOL]         } catch (MaxCountExceededException e) { [EOL]             caught = true; [EOL]             final RealVector y = a.operate(x); [EOL]             for (int i = 0; i < n; i++) { [EOL]                 final double actual = b.getEntry(i) - y.getEntry(i); [EOL]                 final double expected = r.getEntry(i); [EOL]                 final double delta = 1E-6 * Math.abs(expected); [EOL]                 final String msg = String.format("column %d, residual %d", i, j); [EOL]                 Assert.assertEquals(msg, expected, actual, delta); [EOL]             } [EOL]         } [EOL]         Assert.assertTrue("MaxCountExceededException should have been caught", caught); [EOL]     } [EOL] } <line_num>: 160,217
@Override [EOL] public RealVector operate(final RealVector x) { [EOL]     throw new UnsupportedOperationException(); [EOL] } <line_num>: 224,227
@Override [EOL] public int getRowDimension() { [EOL]     return 2; [EOL] } <line_num>: 229,232
@Override [EOL] public int getColumnDimension() { [EOL]     return 3; [EOL] } <line_num>: 234,237
@Test(expected = NonSquareOperatorException.class) [EOL] public void testNonSquarePreconditioner() { [EOL]     final Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 2); [EOL]     final RealLinearOperator m = new RealLinearOperator() { [EOL]  [EOL]         @Override [EOL]         public RealVector operate(final RealVector x) { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int getRowDimension() { [EOL]             return 2; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int getColumnDimension() { [EOL]             return 3; [EOL]         } [EOL]     }; [EOL]     final PreconditionedIterativeLinearSolver solver; [EOL]     solver = new ConjugateGradient(10, 0d, false); [EOL]     final ArrayRealVector b = new ArrayRealVector(a.getRowDimension()); [EOL]     solver.solve(a, m, b); [EOL] } <line_num>: 219,243
@Override [EOL] public RealVector operate(final RealVector x) { [EOL]     throw new UnsupportedOperationException(); [EOL] } <line_num>: 250,253
@Override [EOL] public int getRowDimension() { [EOL]     return 3; [EOL] } <line_num>: 255,258
@Override [EOL] public int getColumnDimension() { [EOL]     return 3; [EOL] } <line_num>: 260,263
@Test(expected = DimensionMismatchException.class) [EOL] public void testMismatchedOperatorDimensions() { [EOL]     final Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 2); [EOL]     final RealLinearOperator m = new RealLinearOperator() { [EOL]  [EOL]         @Override [EOL]         public RealVector operate(final RealVector x) { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int getRowDimension() { [EOL]             return 3; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int getColumnDimension() { [EOL]             return 3; [EOL]         } [EOL]     }; [EOL]     final PreconditionedIterativeLinearSolver solver; [EOL]     solver = new ConjugateGradient(10, 0d, false); [EOL]     final ArrayRealVector b = new ArrayRealVector(a.getRowDimension()); [EOL]     solver.solve(a, m, b); [EOL] } <line_num>: 245,269
@Override [EOL] public RealVector operate(final RealVector x) { [EOL]     final ArrayRealVector y = new ArrayRealVector(2); [EOL]     y.setEntry(0, -x.getEntry(0)); [EOL]     y.setEntry(1, x.getEntry(1)); [EOL]     return y; [EOL] } <line_num>: 280,286
@Override [EOL] public int getRowDimension() { [EOL]     return 2; [EOL] } <line_num>: 288,291
@Override [EOL] public int getColumnDimension() { [EOL]     return 2; [EOL] } <line_num>: 293,296
@Test(expected = NonPositiveDefiniteOperatorException.class) [EOL] public void testNonPositiveDefinitePreconditioner() { [EOL]     final Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 2); [EOL]     a.setEntry(0, 0, 1d); [EOL]     a.setEntry(0, 1, 2d); [EOL]     a.setEntry(1, 0, 3d); [EOL]     a.setEntry(1, 1, 4d); [EOL]     final RealLinearOperator m = new RealLinearOperator() { [EOL]  [EOL]         @Override [EOL]         public RealVector operate(final RealVector x) { [EOL]             final ArrayRealVector y = new ArrayRealVector(2); [EOL]             y.setEntry(0, -x.getEntry(0)); [EOL]             y.setEntry(1, x.getEntry(1)); [EOL]             return y; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int getRowDimension() { [EOL]             return 2; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int getColumnDimension() { [EOL]             return 2; [EOL]         } [EOL]     }; [EOL]     final PreconditionedIterativeLinearSolver solver; [EOL]     solver = new ConjugateGradient(10, 0d, true); [EOL]     final ArrayRealVector b = new ArrayRealVector(2); [EOL]     b.setEntry(0, -1d); [EOL]     b.setEntry(1, -1d); [EOL]     solver.solve(a, m, b); [EOL] } <line_num>: 271,304
@Test [EOL] public void testPreconditionedSolution() { [EOL]     final int n = 8; [EOL]     final int maxIterations = 100; [EOL]     final RealLinearOperator a = new HilbertMatrix(n); [EOL]     final InverseHilbertMatrix ainv = new InverseHilbertMatrix(n); [EOL]     final RealLinearOperator m = JacobiPreconditioner.create(a); [EOL]     final PreconditionedIterativeLinearSolver solver; [EOL]     solver = new ConjugateGradient(maxIterations, 1E-15, true); [EOL]     final RealVector b = new ArrayRealVector(n); [EOL]     for (int j = 0; j < n; j++) { [EOL]         b.set(0.); [EOL]         b.setEntry(j, 1.); [EOL]         final RealVector x = solver.solve(a, m, b); [EOL]         for (int i = 0; i < n; i++) { [EOL]             final double actual = x.getEntry(i); [EOL]             final double expected = ainv.getEntry(i, j); [EOL]             final double delta = 1E-6 * Math.abs(expected); [EOL]             final String msg = String.format("coefficient (%d, %d)", i, j); [EOL]             Assert.assertEquals(msg, expected, actual, delta); [EOL]         } [EOL]     } [EOL] } <line_num>: 306,328
public void terminationPerformed(final IterationEvent e) { [EOL] } <line_num>: 342,344
public void iterationStarted(final IterationEvent e) { [EOL] } <line_num>: 346,348
public void iterationPerformed(final IterationEvent e) { [EOL]     final IterativeLinearSolverEvent evt; [EOL]     evt = (IterativeLinearSolverEvent) e; [EOL]     RealVector v = evt.getResidual(); [EOL]     r.setSubVector(0, v); [EOL]     v = evt.getSolution(); [EOL]     x.setSubVector(0, v); [EOL] } <line_num>: 350,357
public void initializationPerformed(final IterationEvent e) { [EOL] } <line_num>: 359,361
@Test [EOL] public void testPreconditionedResidual() { [EOL]     final int n = 10; [EOL]     final int maxIterations = n; [EOL]     final RealLinearOperator a = new HilbertMatrix(n); [EOL]     final RealLinearOperator m = JacobiPreconditioner.create(a); [EOL]     final ConjugateGradient solver; [EOL]     solver = new ConjugateGradient(maxIterations, 1E-15, true); [EOL]     final RealVector r = new ArrayRealVector(n); [EOL]     final RealVector x = new ArrayRealVector(n); [EOL]     final IterationListener listener = new IterationListener() { [EOL]  [EOL]         public void terminationPerformed(final IterationEvent e) { [EOL]         } [EOL]  [EOL]         public void iterationStarted(final IterationEvent e) { [EOL]         } [EOL]  [EOL]         public void iterationPerformed(final IterationEvent e) { [EOL]             final IterativeLinearSolverEvent evt; [EOL]             evt = (IterativeLinearSolverEvent) e; [EOL]             RealVector v = evt.getResidual(); [EOL]             r.setSubVector(0, v); [EOL]             v = evt.getSolution(); [EOL]             x.setSubVector(0, v); [EOL]         } [EOL]  [EOL]         public void initializationPerformed(final IterationEvent e) { [EOL]         } [EOL]     }; [EOL]     solver.getIterationManager().addIterationListener(listener); [EOL]     final RealVector b = new ArrayRealVector(n); [EOL]     for (int j = 0; j < n; j++) { [EOL]         b.set(0.); [EOL]         b.setEntry(j, 1.); [EOL]         boolean caught = false; [EOL]         try { [EOL]             solver.solve(a, m, b); [EOL]         } catch (MaxCountExceededException e) { [EOL]             caught = true; [EOL]             final RealVector y = a.operate(x); [EOL]             for (int i = 0; i < n; i++) { [EOL]                 final double actual = b.getEntry(i) - y.getEntry(i); [EOL]                 final double expected = r.getEntry(i); [EOL]                 final double delta = 1E-6 * Math.abs(expected); [EOL]                 final String msg = String.format("column %d, residual %d", i, j); [EOL]                 Assert.assertEquals(msg, expected, actual, delta); [EOL]             } [EOL]         } [EOL]         Assert.assertTrue("MaxCountExceededException should have been caught", caught); [EOL]     } [EOL] } <line_num>: 330,389
@Test [EOL] public void testPreconditionedSolution2() { [EOL]     final int n = 100; [EOL]     final int maxIterations = 100000; [EOL]     final Array2DRowRealMatrix a = new Array2DRowRealMatrix(n, n); [EOL]     double daux = 1.; [EOL]     for (int i = 0; i < n; i++) { [EOL]         a.setEntry(i, i, daux); [EOL]         daux *= 1.2; [EOL]         for (int j = i + 1; j < n; j++) { [EOL]             if (i == j) { [EOL]             } else { [EOL]                 final double value = 1.0; [EOL]                 a.setEntry(i, j, value); [EOL]                 a.setEntry(j, i, value); [EOL]             } [EOL]         } [EOL]     } [EOL]     final RealLinearOperator m = JacobiPreconditioner.create(a); [EOL]     final PreconditionedIterativeLinearSolver pcg; [EOL]     final IterativeLinearSolver cg; [EOL]     pcg = new ConjugateGradient(maxIterations, 1E-6, true); [EOL]     cg = new ConjugateGradient(maxIterations, 1E-6, true); [EOL]     final RealVector b = new ArrayRealVector(n); [EOL]     final String pattern = "preconditioned gradient (%d iterations) should" + " have been faster than unpreconditioned (%d iterations)"; [EOL]     String msg; [EOL]     for (int j = 0; j < 1; j++) { [EOL]         b.set(0.); [EOL]         b.setEntry(j, 1.); [EOL]         final RealVector px = pcg.solve(a, m, b); [EOL]         final RealVector x = cg.solve(a, b); [EOL]         final int npcg = pcg.getIterationManager().getIterations(); [EOL]         final int ncg = cg.getIterationManager().getIterations(); [EOL]         msg = String.format(pattern, npcg, ncg); [EOL]         Assert.assertTrue(msg, npcg < ncg); [EOL]         for (int i = 0; i < n; i++) { [EOL]             msg = String.format("row %d, column %d", i, j); [EOL]             final double expected = x.getEntry(i); [EOL]             final double actual = px.getEntry(i); [EOL]             final double delta = 1E-6 * Math.abs(expected); [EOL]             Assert.assertEquals(msg, expected, actual, delta); [EOL]         } [EOL]     } [EOL] } <line_num>: 391,435
private void doTestVectorsAreUnmodifiable(final IterationEvent e) { [EOL]     final IterativeLinearSolverEvent evt; [EOL]     evt = (IterativeLinearSolverEvent) e; [EOL]     try { [EOL]         evt.getResidual().set(0.0); [EOL]         Assert.fail("r is modifiable"); [EOL]     } catch (MathUnsupportedOperationException exc) { [EOL]     } [EOL]     try { [EOL]         evt.getRightHandSideVector().set(0.0); [EOL]         Assert.fail("b is modifiable"); [EOL]     } catch (MathUnsupportedOperationException exc) { [EOL]     } [EOL]     try { [EOL]         evt.getSolution().set(0.0); [EOL]         Assert.fail("x is modifiable"); [EOL]     } catch (MathUnsupportedOperationException exc) { [EOL]     } [EOL] } <line_num>: 451,472
public void initializationPerformed(final IterationEvent e) { [EOL]     ++count[0]; [EOL]     doTestVectorsAreUnmodifiable(e); [EOL] } <line_num>: 474,477
public void iterationPerformed(final IterationEvent e) { [EOL]     ++count[2]; [EOL]     Assert.assertEquals("iteration performed", count[2], e.getIterations() - 1); [EOL]     doTestVectorsAreUnmodifiable(e); [EOL] } <line_num>: 479,484
public void iterationStarted(final IterationEvent e) { [EOL]     ++count[1]; [EOL]     Assert.assertEquals("iteration started", count[1], e.getIterations() - 1); [EOL]     doTestVectorsAreUnmodifiable(e); [EOL] } <line_num>: 486,491
public void terminationPerformed(final IterationEvent e) { [EOL]     ++count[3]; [EOL]     doTestVectorsAreUnmodifiable(e); [EOL] } <line_num>: 493,496
@Test [EOL] public void testEventManagement() { [EOL]     final int n = 5; [EOL]     final int maxIterations = 100; [EOL]     final RealLinearOperator a = new HilbertMatrix(n); [EOL]     final IterativeLinearSolver solver; [EOL]     final int[] count = new int[] { 0, 0, 0, 0 }; [EOL]     final IterationListener listener = new IterationListener() { [EOL]  [EOL]         private void doTestVectorsAreUnmodifiable(final IterationEvent e) { [EOL]             final IterativeLinearSolverEvent evt; [EOL]             evt = (IterativeLinearSolverEvent) e; [EOL]             try { [EOL]                 evt.getResidual().set(0.0); [EOL]                 Assert.fail("r is modifiable"); [EOL]             } catch (MathUnsupportedOperationException exc) { [EOL]             } [EOL]             try { [EOL]                 evt.getRightHandSideVector().set(0.0); [EOL]                 Assert.fail("b is modifiable"); [EOL]             } catch (MathUnsupportedOperationException exc) { [EOL]             } [EOL]             try { [EOL]                 evt.getSolution().set(0.0); [EOL]                 Assert.fail("x is modifiable"); [EOL]             } catch (MathUnsupportedOperationException exc) { [EOL]             } [EOL]         } [EOL]  [EOL]         public void initializationPerformed(final IterationEvent e) { [EOL]             ++count[0]; [EOL]             doTestVectorsAreUnmodifiable(e); [EOL]         } [EOL]  [EOL]         public void iterationPerformed(final IterationEvent e) { [EOL]             ++count[2]; [EOL]             Assert.assertEquals("iteration performed", count[2], e.getIterations() - 1); [EOL]             doTestVectorsAreUnmodifiable(e); [EOL]         } [EOL]  [EOL]         public void iterationStarted(final IterationEvent e) { [EOL]             ++count[1]; [EOL]             Assert.assertEquals("iteration started", count[1], e.getIterations() - 1); [EOL]             doTestVectorsAreUnmodifiable(e); [EOL]         } [EOL]  [EOL]         public void terminationPerformed(final IterationEvent e) { [EOL]             ++count[3]; [EOL]             doTestVectorsAreUnmodifiable(e); [EOL]         } [EOL]     }; [EOL]     solver = new ConjugateGradient(maxIterations, 1E-10, true); [EOL]     solver.getIterationManager().addIterationListener(listener); [EOL]     final RealVector b = new ArrayRealVector(n); [EOL]     for (int j = 0; j < n; j++) { [EOL]         Arrays.fill(count, 0); [EOL]         b.set(0.); [EOL]         b.setEntry(j, 1.); [EOL]         solver.solve(a, b); [EOL]         String msg = String.format("column %d (initialization)", j); [EOL]         Assert.assertEquals(msg, 1, count[0]); [EOL]         msg = String.format("column %d (finalization)", j); [EOL]         Assert.assertEquals(msg, 1, count[3]); [EOL]     } [EOL] } <line_num>: 437,511
private void doTestNormOfResidual(final IterationEvent e) { [EOL]     final IterativeLinearSolverEvent evt; [EOL]     evt = (IterativeLinearSolverEvent) e; [EOL]     final RealVector x = evt.getSolution(); [EOL]     final RealVector b = evt.getRightHandSideVector(); [EOL]     final RealVector r = b.subtract(a.operate(x)); [EOL]     final double rnorm = r.getNorm(); [EOL]     Assert.assertEquals("iteration performed (residual)", rnorm, evt.getNormOfResidual(), FastMath.max(1E-5 * rnorm, 1E-10)); [EOL] } <line_num>: 521,531
public void initializationPerformed(final IterationEvent e) { [EOL]     doTestNormOfResidual(e); [EOL] } <line_num>: 533,535
public void iterationPerformed(final IterationEvent e) { [EOL]     doTestNormOfResidual(e); [EOL] } <line_num>: 537,539
public void iterationStarted(final IterationEvent e) { [EOL]     doTestNormOfResidual(e); [EOL] } <line_num>: 541,543
public void terminationPerformed(final IterationEvent e) { [EOL]     doTestNormOfResidual(e); [EOL] } <line_num>: 545,547
@Test [EOL] public void testUnpreconditionedNormOfResidual() { [EOL]     final int n = 5; [EOL]     final int maxIterations = 100; [EOL]     final RealLinearOperator a = new HilbertMatrix(n); [EOL]     final IterativeLinearSolver solver; [EOL]     final IterationListener listener = new IterationListener() { [EOL]  [EOL]         private void doTestNormOfResidual(final IterationEvent e) { [EOL]             final IterativeLinearSolverEvent evt; [EOL]             evt = (IterativeLinearSolverEvent) e; [EOL]             final RealVector x = evt.getSolution(); [EOL]             final RealVector b = evt.getRightHandSideVector(); [EOL]             final RealVector r = b.subtract(a.operate(x)); [EOL]             final double rnorm = r.getNorm(); [EOL]             Assert.assertEquals("iteration performed (residual)", rnorm, evt.getNormOfResidual(), FastMath.max(1E-5 * rnorm, 1E-10)); [EOL]         } [EOL]  [EOL]         public void initializationPerformed(final IterationEvent e) { [EOL]             doTestNormOfResidual(e); [EOL]         } [EOL]  [EOL]         public void iterationPerformed(final IterationEvent e) { [EOL]             doTestNormOfResidual(e); [EOL]         } [EOL]  [EOL]         public void iterationStarted(final IterationEvent e) { [EOL]             doTestNormOfResidual(e); [EOL]         } [EOL]  [EOL]         public void terminationPerformed(final IterationEvent e) { [EOL]             doTestNormOfResidual(e); [EOL]         } [EOL]     }; [EOL]     solver = new ConjugateGradient(maxIterations, 1E-10, true); [EOL]     solver.getIterationManager().addIterationListener(listener); [EOL]     final RealVector b = new ArrayRealVector(n); [EOL]     for (int j = 0; j < n; j++) { [EOL]         b.set(0.); [EOL]         b.setEntry(j, 1.); [EOL]         solver.solve(a, b); [EOL]     } [EOL] } <line_num>: 513,557
private void doTestNormOfResidual(final IterationEvent e) { [EOL]     final IterativeLinearSolverEvent evt; [EOL]     evt = (IterativeLinearSolverEvent) e; [EOL]     final RealVector x = evt.getSolution(); [EOL]     final RealVector b = evt.getRightHandSideVector(); [EOL]     final RealVector r = b.subtract(a.operate(x)); [EOL]     final double rnorm = r.getNorm(); [EOL]     Assert.assertEquals("iteration performed (residual)", rnorm, evt.getNormOfResidual(), FastMath.max(1E-5 * rnorm, 1E-10)); [EOL] } <line_num>: 568,578
public void initializationPerformed(final IterationEvent e) { [EOL]     doTestNormOfResidual(e); [EOL] } <line_num>: 580,582
public void iterationPerformed(final IterationEvent e) { [EOL]     doTestNormOfResidual(e); [EOL] } <line_num>: 584,586
public void iterationStarted(final IterationEvent e) { [EOL]     doTestNormOfResidual(e); [EOL] } <line_num>: 588,590
public void terminationPerformed(final IterationEvent e) { [EOL]     doTestNormOfResidual(e); [EOL] } <line_num>: 592,594
@Test [EOL] public void testPreconditionedNormOfResidual() { [EOL]     final int n = 5; [EOL]     final int maxIterations = 100; [EOL]     final RealLinearOperator a = new HilbertMatrix(n); [EOL]     final RealLinearOperator m = JacobiPreconditioner.create(a); [EOL]     final PreconditionedIterativeLinearSolver solver; [EOL]     final IterationListener listener = new IterationListener() { [EOL]  [EOL]         private void doTestNormOfResidual(final IterationEvent e) { [EOL]             final IterativeLinearSolverEvent evt; [EOL]             evt = (IterativeLinearSolverEvent) e; [EOL]             final RealVector x = evt.getSolution(); [EOL]             final RealVector b = evt.getRightHandSideVector(); [EOL]             final RealVector r = b.subtract(a.operate(x)); [EOL]             final double rnorm = r.getNorm(); [EOL]             Assert.assertEquals("iteration performed (residual)", rnorm, evt.getNormOfResidual(), FastMath.max(1E-5 * rnorm, 1E-10)); [EOL]         } [EOL]  [EOL]         public void initializationPerformed(final IterationEvent e) { [EOL]             doTestNormOfResidual(e); [EOL]         } [EOL]  [EOL]         public void iterationPerformed(final IterationEvent e) { [EOL]             doTestNormOfResidual(e); [EOL]         } [EOL]  [EOL]         public void iterationStarted(final IterationEvent e) { [EOL]             doTestNormOfResidual(e); [EOL]         } [EOL]  [EOL]         public void terminationPerformed(final IterationEvent e) { [EOL]             doTestNormOfResidual(e); [EOL]         } [EOL]     }; [EOL]     solver = new ConjugateGradient(maxIterations, 1E-10, true); [EOL]     solver.getIterationManager().addIterationListener(listener); [EOL]     final RealVector b = new ArrayRealVector(n); [EOL]     for (int j = 0; j < n; j++) { [EOL]         b.set(0.); [EOL]         b.setEntry(j, 1.); [EOL]         solver.solve(a, m, b); [EOL]     } [EOL] } <line_num>: 559,604
