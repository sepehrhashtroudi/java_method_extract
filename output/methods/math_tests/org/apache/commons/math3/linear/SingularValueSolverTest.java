@Test [EOL] public void testSolveDimensionErrors() { [EOL]     DecompositionSolver solver = new SingularValueDecomposition(MatrixUtils.createRealMatrix(testSquare)).getSolver(); [EOL]     RealMatrix b = MatrixUtils.createRealMatrix(new double[3][2]); [EOL]     try { [EOL]         solver.solve(b); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (MathIllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         solver.solve(b.getColumnVector(0)); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (MathIllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         solver.solve(new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(0))); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (MathIllegalArgumentException iae) { [EOL]     } [EOL] } <line_num>: 35,58
@Test [EOL] public void testLeastSquareSolve() { [EOL]     RealMatrix m = MatrixUtils.createRealMatrix(new double[][] { { 1.0, 0.0 }, { 0.0, 0.0 } }); [EOL]     DecompositionSolver solver = new SingularValueDecomposition(m).getSolver(); [EOL]     RealMatrix b = MatrixUtils.createRealMatrix(new double[][] { { 11, 12 }, { 21, 22 } }); [EOL]     RealMatrix xMatrix = solver.solve(b); [EOL]     Assert.assertEquals(11, xMatrix.getEntry(0, 0), 1.0e-15); [EOL]     Assert.assertEquals(12, xMatrix.getEntry(0, 1), 1.0e-15); [EOL]     Assert.assertEquals(0, xMatrix.getEntry(1, 0), 1.0e-15); [EOL]     Assert.assertEquals(0, xMatrix.getEntry(1, 1), 1.0e-15); [EOL]     RealVector xColVec = solver.solve(b.getColumnVector(0)); [EOL]     Assert.assertEquals(11, xColVec.getEntry(0), 1.0e-15); [EOL]     Assert.assertEquals(0, xColVec.getEntry(1), 1.0e-15); [EOL]     RealVector xColOtherVec = solver.solve(new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(0))); [EOL]     Assert.assertEquals(11, xColOtherVec.getEntry(0), 1.0e-15); [EOL]     Assert.assertEquals(0, xColOtherVec.getEntry(1), 1.0e-15); [EOL] } <line_num>: 61,83
@Test [EOL] public void testSolve() { [EOL]     DecompositionSolver solver = new SingularValueDecomposition(MatrixUtils.createRealMatrix(testSquare)).getSolver(); [EOL]     RealMatrix b = MatrixUtils.createRealMatrix(new double[][] { { 1, 2, 3 }, { 0, -5, 1 } }); [EOL]     RealMatrix xRef = MatrixUtils.createRealMatrix(new double[][] { { -8.0 / 25.0, -263.0 / 75.0, -29.0 / 75.0 }, { 19.0 / 25.0, 78.0 / 25.0, 49.0 / 25.0 } }); [EOL]     Assert.assertEquals(0, solver.solve(b).subtract(xRef).getNorm(), normTolerance); [EOL]     for (int i = 0; i < b.getColumnDimension(); ++i) { [EOL]         Assert.assertEquals(0, solver.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(), 1.0e-13); [EOL]     } [EOL]     for (int i = 0; i < b.getColumnDimension(); ++i) { [EOL]         ArrayRealVectorTest.RealVectorTestImpl v = new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(i)); [EOL]         Assert.assertEquals(0, solver.solve(v).subtract(xRef.getColumnVector(i)).getNorm(), 1.0e-13); [EOL]     } [EOL] } <line_num>: 86,117
@Test [EOL] public void testConditionNumber() { [EOL]     SingularValueDecomposition svd = new SingularValueDecomposition(MatrixUtils.createRealMatrix(testSquare)); [EOL]     Assert.assertEquals(3.0, svd.getConditionNumber(), 1.5e-15); [EOL] } <line_num>: 120,126
@Test [EOL] public void testMath320B() { [EOL]     RealMatrix rm = new Array2DRowRealMatrix(new double[][] { { 1.0, 2.0 }, { 1.0, 2.0 } }); [EOL]     SingularValueDecomposition svd = new SingularValueDecomposition(rm); [EOL]     RealMatrix recomposed = svd.getU().multiply(svd.getS()).multiply(svd.getVT()); [EOL]     Assert.assertEquals(0.0, recomposed.subtract(rm).getNorm(), 2.0e-15); [EOL] } <line_num>: 128,137
