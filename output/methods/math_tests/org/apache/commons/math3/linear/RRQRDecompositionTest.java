@Test [EOL] public void testDimensions() { [EOL]     checkDimension(MatrixUtils.createRealMatrix(testData3x3NonSingular)); [EOL]     checkDimension(MatrixUtils.createRealMatrix(testData4x3)); [EOL]     checkDimension(MatrixUtils.createRealMatrix(testData3x4)); [EOL]     Random r = new Random(643895747384642l); [EOL]     int p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4; [EOL]     int q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4; [EOL]     checkDimension(createTestMatrix(r, p, q)); [EOL]     checkDimension(createTestMatrix(r, q, p)); [EOL] } <line_num>: 53,67
private void checkDimension(RealMatrix m) { [EOL]     int rows = m.getRowDimension(); [EOL]     int columns = m.getColumnDimension(); [EOL]     RRQRDecomposition qr = new RRQRDecomposition(m); [EOL]     Assert.assertEquals(rows, qr.getQ().getRowDimension()); [EOL]     Assert.assertEquals(rows, qr.getQ().getColumnDimension()); [EOL]     Assert.assertEquals(rows, qr.getR().getRowDimension()); [EOL]     Assert.assertEquals(columns, qr.getR().getColumnDimension()); [EOL] } <line_num>: 69,77
@Test [EOL] public void testAPEqualQR() { [EOL]     checkAPEqualQR(MatrixUtils.createRealMatrix(testData3x3NonSingular)); [EOL]     checkAPEqualQR(MatrixUtils.createRealMatrix(testData3x3Singular)); [EOL]     checkAPEqualQR(MatrixUtils.createRealMatrix(testData3x4)); [EOL]     checkAPEqualQR(MatrixUtils.createRealMatrix(testData4x3)); [EOL]     Random r = new Random(643895747384642l); [EOL]     int p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4; [EOL]     int q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4; [EOL]     checkAPEqualQR(createTestMatrix(r, p, q)); [EOL]     checkAPEqualQR(createTestMatrix(r, q, p)); [EOL] } <line_num>: 80,97
private void checkAPEqualQR(RealMatrix m) { [EOL]     RRQRDecomposition rrqr = new RRQRDecomposition(m); [EOL]     double norm = rrqr.getQ().multiply(rrqr.getR()).subtract(m.multiply(rrqr.getP())).getNorm(); [EOL]     Assert.assertEquals(0, norm, normTolerance); [EOL] } <line_num>: 99,103
@Test [EOL] public void testQOrthogonal() { [EOL]     checkQOrthogonal(MatrixUtils.createRealMatrix(testData3x3NonSingular)); [EOL]     checkQOrthogonal(MatrixUtils.createRealMatrix(testData3x3Singular)); [EOL]     checkQOrthogonal(MatrixUtils.createRealMatrix(testData3x4)); [EOL]     checkQOrthogonal(MatrixUtils.createRealMatrix(testData4x3)); [EOL]     Random r = new Random(643895747384642l); [EOL]     int p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4; [EOL]     int q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4; [EOL]     checkQOrthogonal(createTestMatrix(r, p, q)); [EOL]     checkQOrthogonal(createTestMatrix(r, q, p)); [EOL] } <line_num>: 106,123
private void checkQOrthogonal(RealMatrix m) { [EOL]     RRQRDecomposition qr = new RRQRDecomposition(m); [EOL]     RealMatrix eye = MatrixUtils.createRealIdentityMatrix(m.getRowDimension()); [EOL]     double norm = qr.getQT().multiply(qr.getQ()).subtract(eye).getNorm(); [EOL]     Assert.assertEquals(0, norm, normTolerance); [EOL] } <line_num>: 125,130
@Test [EOL] public void testRUpperTriangular() { [EOL]     RealMatrix matrix = MatrixUtils.createRealMatrix(testData3x3NonSingular); [EOL]     checkUpperTriangular(new RRQRDecomposition(matrix).getR()); [EOL]     matrix = MatrixUtils.createRealMatrix(testData3x3Singular); [EOL]     checkUpperTriangular(new RRQRDecomposition(matrix).getR()); [EOL]     matrix = MatrixUtils.createRealMatrix(testData3x4); [EOL]     checkUpperTriangular(new RRQRDecomposition(matrix).getR()); [EOL]     matrix = MatrixUtils.createRealMatrix(testData4x3); [EOL]     checkUpperTriangular(new RRQRDecomposition(matrix).getR()); [EOL]     Random r = new Random(643895747384642l); [EOL]     int p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4; [EOL]     int q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4; [EOL]     matrix = createTestMatrix(r, p, q); [EOL]     checkUpperTriangular(new RRQRDecomposition(matrix).getR()); [EOL]     matrix = createTestMatrix(r, p, q); [EOL]     checkUpperTriangular(new RRQRDecomposition(matrix).getR()); [EOL] } <line_num>: 133,156
@Override [EOL] public void visit(int row, int column, double value) { [EOL]     if (column < row) { [EOL]         Assert.assertEquals(0.0, value, entryTolerance); [EOL]     } [EOL] } <line_num>: 160,165
private void checkUpperTriangular(RealMatrix m) { [EOL]     m.walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() { [EOL]  [EOL]         @Override [EOL]         public void visit(int row, int column, double value) { [EOL]             if (column < row) { [EOL]                 Assert.assertEquals(0.0, value, entryTolerance); [EOL]             } [EOL]         } [EOL]     }); [EOL] } <line_num>: 158,167
@Test [EOL] public void testHTrapezoidal() { [EOL]     RealMatrix matrix = MatrixUtils.createRealMatrix(testData3x3NonSingular); [EOL]     checkTrapezoidal(new RRQRDecomposition(matrix).getH()); [EOL]     matrix = MatrixUtils.createRealMatrix(testData3x3Singular); [EOL]     checkTrapezoidal(new RRQRDecomposition(matrix).getH()); [EOL]     matrix = MatrixUtils.createRealMatrix(testData3x4); [EOL]     checkTrapezoidal(new RRQRDecomposition(matrix).getH()); [EOL]     matrix = MatrixUtils.createRealMatrix(testData4x3); [EOL]     checkTrapezoidal(new RRQRDecomposition(matrix).getH()); [EOL]     Random r = new Random(643895747384642l); [EOL]     int p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4; [EOL]     int q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4; [EOL]     matrix = createTestMatrix(r, p, q); [EOL]     checkTrapezoidal(new RRQRDecomposition(matrix).getH()); [EOL]     matrix = createTestMatrix(r, p, q); [EOL]     checkTrapezoidal(new RRQRDecomposition(matrix).getH()); [EOL] } <line_num>: 170,193
@Override [EOL] public void visit(int row, int column, double value) { [EOL]     if (column > row) { [EOL]         Assert.assertEquals(0.0, value, entryTolerance); [EOL]     } [EOL] } <line_num>: 197,202
private void checkTrapezoidal(RealMatrix m) { [EOL]     m.walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() { [EOL]  [EOL]         @Override [EOL]         public void visit(int row, int column, double value) { [EOL]             if (column > row) { [EOL]                 Assert.assertEquals(0.0, value, entryTolerance); [EOL]             } [EOL]         } [EOL]     }); [EOL] } <line_num>: 195,204
@Test(expected = SingularMatrixException.class) [EOL] public void testNonInvertible() { [EOL]     RRQRDecomposition qr = new RRQRDecomposition(MatrixUtils.createRealMatrix(testData3x3Singular), 3.0e-16); [EOL]     qr.getSolver().getInverse(); [EOL] } <line_num>: 206,211
@Override [EOL] public double visit(int row, int column, double value) { [EOL]     return 2.0 * r.nextDouble() - 1.0; [EOL] } <line_num>: 216,219
private RealMatrix createTestMatrix(final Random r, final int rows, final int columns) { [EOL]     RealMatrix m = MatrixUtils.createRealMatrix(rows, columns); [EOL]     m.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { [EOL]  [EOL]         @Override [EOL]         public double visit(int row, int column, double value) { [EOL]             return 2.0 * r.nextDouble() - 1.0; [EOL]         } [EOL]     }); [EOL]     return m; [EOL] } <line_num>: 213,222
@Test [EOL] public void testRank() { [EOL]     double[][] d = { { 1, 1, 1 }, { 0, 0, 0 }, { 1, 2, 3 } }; [EOL]     RealMatrix m = new Array2DRowRealMatrix(d); [EOL]     RRQRDecomposition qr = new RRQRDecomposition(m); [EOL]     Assert.assertEquals(2, qr.getRank(1.0e-16)); [EOL] } <line_num>: 225,231
