@Test [EOL] public void testConstructor1() { [EOL]     final int dim = 3; [EOL]     final DiagonalMatrix m = new DiagonalMatrix(dim); [EOL]     Assert.assertEquals(dim, m.getRowDimension()); [EOL]     Assert.assertEquals(dim, m.getColumnDimension()); [EOL] } <line_num>: 32,38
@Test [EOL] public void testConstructor2() { [EOL]     final double[] d = { -1.2, 3.4, 5 }; [EOL]     final DiagonalMatrix m = new DiagonalMatrix(d); [EOL]     for (int i = 0; i < m.getRowDimension(); i++) { [EOL]         for (int j = 0; j < m.getRowDimension(); j++) { [EOL]             if (i == j) { [EOL]                 Assert.assertEquals(d[i], m.getEntry(i, j), 0d); [EOL]             } else { [EOL]                 Assert.assertEquals(0d, m.getEntry(i, j), 0d); [EOL]             } [EOL]         } [EOL]     } [EOL]     d[0] = 0; [EOL]     Assert.assertFalse(d[0] == m.getEntry(0, 0)); [EOL] } <line_num>: 40,57
@Test [EOL] public void testConstructor3() { [EOL]     final double[] d = { -1.2, 3.4, 5 }; [EOL]     final DiagonalMatrix m = new DiagonalMatrix(d, false); [EOL]     for (int i = 0; i < m.getRowDimension(); i++) { [EOL]         for (int j = 0; j < m.getRowDimension(); j++) { [EOL]             if (i == j) { [EOL]                 Assert.assertEquals(d[i], m.getEntry(i, j), 0d); [EOL]             } else { [EOL]                 Assert.assertEquals(0d, m.getEntry(i, j), 0d); [EOL]             } [EOL]         } [EOL]     } [EOL]     d[0] = 0; [EOL]     Assert.assertTrue(d[0] == m.getEntry(0, 0)); [EOL] } <line_num>: 59,77
@Test(expected = DimensionMismatchException.class) [EOL] public void testCreateError() { [EOL]     final double[] d = { -1.2, 3.4, 5 }; [EOL]     final DiagonalMatrix m = new DiagonalMatrix(d, false); [EOL]     m.createMatrix(5, 3); [EOL] } <line_num>: 79,84
@Test [EOL] public void testCreate() { [EOL]     final double[] d = { -1.2, 3.4, 5 }; [EOL]     final DiagonalMatrix m = new DiagonalMatrix(d, false); [EOL]     final RealMatrix p = m.createMatrix(5, 5); [EOL]     Assert.assertTrue(p instanceof DiagonalMatrix); [EOL]     Assert.assertEquals(5, p.getRowDimension()); [EOL]     Assert.assertEquals(5, p.getColumnDimension()); [EOL] } <line_num>: 86,94
@Test [EOL] public void testCopy() { [EOL]     final double[] d = { -1.2, 3.4, 5 }; [EOL]     final DiagonalMatrix m = new DiagonalMatrix(d, false); [EOL]     final DiagonalMatrix p = (DiagonalMatrix) m.copy(); [EOL]     for (int i = 0; i < m.getRowDimension(); ++i) { [EOL]         Assert.assertEquals(m.getEntry(i, i), p.getEntry(i, i), 1.0e-20); [EOL]     } [EOL] } <line_num>: 96,104
@Test [EOL] public void testGetData() { [EOL]     final double[] data = { -1.2, 3.4, 5 }; [EOL]     final int dim = 3; [EOL]     final DiagonalMatrix m = new DiagonalMatrix(dim); [EOL]     for (int i = 0; i < dim; i++) { [EOL]         m.setEntry(i, i, data[i]); [EOL]     } [EOL]     final double[][] out = m.getData(); [EOL]     Assert.assertEquals(dim, out.length); [EOL]     for (int i = 0; i < m.getRowDimension(); i++) { [EOL]         Assert.assertEquals(dim, out[i].length); [EOL]         for (int j = 0; j < m.getRowDimension(); j++) { [EOL]             if (i == j) { [EOL]                 Assert.assertEquals(data[i], out[i][j], 0d); [EOL]             } else { [EOL]                 Assert.assertEquals(0d, out[i][j], 0d); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 106,127
@Test [EOL] public void testAdd() { [EOL]     final double[] data1 = { -1.2, 3.4, 5 }; [EOL]     final DiagonalMatrix m1 = new DiagonalMatrix(data1); [EOL]     final double[] data2 = { 10.1, 2.3, 45 }; [EOL]     final DiagonalMatrix m2 = new DiagonalMatrix(data2); [EOL]     final DiagonalMatrix result = m1.add(m2); [EOL]     Assert.assertEquals(m1.getRowDimension(), result.getRowDimension()); [EOL]     for (int i = 0; i < result.getRowDimension(); i++) { [EOL]         for (int j = 0; j < result.getRowDimension(); j++) { [EOL]             if (i == j) { [EOL]                 Assert.assertEquals(data1[i] + data2[i], result.getEntry(i, j), 0d); [EOL]             } else { [EOL]                 Assert.assertEquals(0d, result.getEntry(i, j), 0d); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 129,148
@Test [EOL] public void testSubtract() { [EOL]     final double[] data1 = { -1.2, 3.4, 5 }; [EOL]     final DiagonalMatrix m1 = new DiagonalMatrix(data1); [EOL]     final double[] data2 = { 10.1, 2.3, 45 }; [EOL]     final DiagonalMatrix m2 = new DiagonalMatrix(data2); [EOL]     final DiagonalMatrix result = m1.subtract(m2); [EOL]     Assert.assertEquals(m1.getRowDimension(), result.getRowDimension()); [EOL]     for (int i = 0; i < result.getRowDimension(); i++) { [EOL]         for (int j = 0; j < result.getRowDimension(); j++) { [EOL]             if (i == j) { [EOL]                 Assert.assertEquals(data1[i] - data2[i], result.getEntry(i, j), 0d); [EOL]             } else { [EOL]                 Assert.assertEquals(0d, result.getEntry(i, j), 0d); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 150,169
@Test [EOL] public void testAddToEntry() { [EOL]     final double[] data = { -1.2, 3.4, 5 }; [EOL]     final DiagonalMatrix m = new DiagonalMatrix(data); [EOL]     for (int i = 0; i < m.getRowDimension(); i++) { [EOL]         m.addToEntry(i, i, i); [EOL]         Assert.assertEquals(data[i] + i, m.getEntry(i, i), 0d); [EOL]     } [EOL] } <line_num>: 171,180
@Test [EOL] public void testMultiplyEntry() { [EOL]     final double[] data = { -1.2, 3.4, 5 }; [EOL]     final DiagonalMatrix m = new DiagonalMatrix(data); [EOL]     for (int i = 0; i < m.getRowDimension(); i++) { [EOL]         m.multiplyEntry(i, i, i); [EOL]         Assert.assertEquals(data[i] * i, m.getEntry(i, i), 0d); [EOL]     } [EOL] } <line_num>: 182,191
@Test [EOL] public void testMultiply1() { [EOL]     final double[] data1 = { -1.2, 3.4, 5 }; [EOL]     final DiagonalMatrix m1 = new DiagonalMatrix(data1); [EOL]     final double[] data2 = { 10.1, 2.3, 45 }; [EOL]     final DiagonalMatrix m2 = new DiagonalMatrix(data2); [EOL]     final DiagonalMatrix result = (DiagonalMatrix) m1.multiply((RealMatrix) m2); [EOL]     Assert.assertEquals(m1.getRowDimension(), result.getRowDimension()); [EOL]     for (int i = 0; i < result.getRowDimension(); i++) { [EOL]         for (int j = 0; j < result.getRowDimension(); j++) { [EOL]             if (i == j) { [EOL]                 Assert.assertEquals(data1[i] * data2[i], result.getEntry(i, j), 0d); [EOL]             } else { [EOL]                 Assert.assertEquals(0d, result.getEntry(i, j), 0d); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 193,211
@Test [EOL] public void testMultiply2() { [EOL]     final double[] data1 = { -1.2, 3.4, 5 }; [EOL]     final DiagonalMatrix diag1 = new DiagonalMatrix(data1); [EOL]     final double[][] data2 = { { -1.2, 3.4 }, { -5.6, 7.8 }, { 9.1, 2.3 } }; [EOL]     final RealMatrix dense2 = new Array2DRowRealMatrix(data2); [EOL]     final RealMatrix dense1 = new Array2DRowRealMatrix(diag1.getData()); [EOL]     final RealMatrix diagResult = diag1.multiply(dense2); [EOL]     final RealMatrix denseResult = dense1.multiply(dense2); [EOL]     for (int i = 0; i < dense1.getRowDimension(); i++) { [EOL]         for (int j = 0; j < dense2.getColumnDimension(); j++) { [EOL]             Assert.assertEquals(denseResult.getEntry(i, j), diagResult.getEntry(i, j), 0d); [EOL]         } [EOL]     } [EOL] } <line_num>: 213,233
@Test [EOL] public void testOperate() { [EOL]     final double[] data = { -1.2, 3.4, 5 }; [EOL]     final DiagonalMatrix diag = new DiagonalMatrix(data); [EOL]     final RealMatrix dense = new Array2DRowRealMatrix(diag.getData()); [EOL]     final double[] v = { 6.7, 890.1, 23.4 }; [EOL]     final double[] diagResult = diag.operate(v); [EOL]     final double[] denseResult = dense.operate(v); [EOL]     TestUtils.assertEquals(diagResult, denseResult, 0d); [EOL] } <line_num>: 235,246
@Test [EOL] public void testPreMultiply() { [EOL]     final double[] data = { -1.2, 3.4, 5 }; [EOL]     final DiagonalMatrix diag = new DiagonalMatrix(data); [EOL]     final RealMatrix dense = new Array2DRowRealMatrix(diag.getData()); [EOL]     final double[] v = { 6.7, 890.1, 23.4 }; [EOL]     final double[] diagResult = diag.preMultiply(v); [EOL]     final double[] denseResult = dense.preMultiply(v); [EOL]     TestUtils.assertEquals(diagResult, denseResult, 0d); [EOL] } <line_num>: 248,259
@Test [EOL] public void testPreMultiplyVector() { [EOL]     final double[] data = { -1.2, 3.4, 5 }; [EOL]     final DiagonalMatrix diag = new DiagonalMatrix(data); [EOL]     final RealMatrix dense = new Array2DRowRealMatrix(diag.getData()); [EOL]     final double[] v = { 6.7, 890.1, 23.4 }; [EOL]     final RealVector vector = MatrixUtils.createRealVector(v); [EOL]     final RealVector diagResult = diag.preMultiply(vector); [EOL]     final RealVector denseResult = dense.preMultiply(vector); [EOL]     TestUtils.assertEquals("preMultiply(Vector) returns wrong result", diagResult, denseResult, 0d); [EOL] } <line_num>: 261,273
@Test(expected = NumberIsTooLargeException.class) [EOL] public void testSetNonDiagonalEntry() { [EOL]     final DiagonalMatrix diag = new DiagonalMatrix(3); [EOL]     diag.setEntry(1, 2, 3.4); [EOL] } <line_num>: 275,279
@Test [EOL] public void testSetNonDiagonalZero() { [EOL]     final DiagonalMatrix diag = new DiagonalMatrix(3); [EOL]     diag.setEntry(1, 2, 0.0); [EOL]     Assert.assertEquals(0.0, diag.getEntry(1, 2), Precision.SAFE_MIN); [EOL] } <line_num>: 281,286
@Test(expected = NumberIsTooLargeException.class) [EOL] public void testAddNonDiagonalEntry() { [EOL]     final DiagonalMatrix diag = new DiagonalMatrix(3); [EOL]     diag.addToEntry(1, 2, 3.4); [EOL] } <line_num>: 288,292
@Test [EOL] public void testAddNonDiagonalZero() { [EOL]     final DiagonalMatrix diag = new DiagonalMatrix(3); [EOL]     diag.addToEntry(1, 2, 0.0); [EOL]     Assert.assertEquals(0.0, diag.getEntry(1, 2), Precision.SAFE_MIN); [EOL] } <line_num>: 294,299
@Test [EOL] public void testMultiplyNonDiagonalEntry() { [EOL]     final DiagonalMatrix diag = new DiagonalMatrix(3); [EOL]     diag.multiplyEntry(1, 2, 3.4); [EOL]     Assert.assertEquals(0.0, diag.getEntry(1, 2), Precision.SAFE_MIN); [EOL] } <line_num>: 301,306
@Test [EOL] public void testMultiplyNonDiagonalZero() { [EOL]     final DiagonalMatrix diag = new DiagonalMatrix(3); [EOL]     diag.multiplyEntry(1, 2, 0.0); [EOL]     Assert.assertEquals(0.0, diag.getEntry(1, 2), Precision.SAFE_MIN); [EOL] } <line_num>: 308,313
@Test(expected = OutOfRangeException.class) [EOL] public void testSetEntryOutOfRange() { [EOL]     final DiagonalMatrix diag = new DiagonalMatrix(3); [EOL]     diag.setEntry(3, 3, 3.4); [EOL] } <line_num>: 315,319
@Test(expected = NullArgumentException.class) [EOL] public void testNull() { [EOL]     new DiagonalMatrix(null, false); [EOL] } <line_num>: 321,324
@Test(expected = NumberIsTooLargeException.class) [EOL] public void testSetSubMatrixError() { [EOL]     final double[] data = { -1.2, 3.4, 5 }; [EOL]     final DiagonalMatrix diag = new DiagonalMatrix(data); [EOL]     diag.setSubMatrix(new double[][] { { 1.0, 1.0 }, { 1.0, 1.0 } }, 1, 1); [EOL] } <line_num>: 326,331
@Test [EOL] public void testSetSubMatrix() { [EOL]     final double[] data = { -1.2, 3.4, 5 }; [EOL]     final DiagonalMatrix diag = new DiagonalMatrix(data); [EOL]     diag.setSubMatrix(new double[][] { { 0.0, 5.0, 0.0 }, { 0.0, 0.0, 6.0 } }, 1, 0); [EOL]     Assert.assertEquals(-1.2, diag.getEntry(0, 0), 1.0e-20); [EOL]     Assert.assertEquals(5.0, diag.getEntry(1, 1), 1.0e-20); [EOL]     Assert.assertEquals(6.0, diag.getEntry(2, 2), 1.0e-20); [EOL] } <line_num>: 333,341
