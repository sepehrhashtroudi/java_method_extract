@Test [EOL] public void testDimensions() { [EOL]     FieldMatrix<Fraction> matrix = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), testData); [EOL]     FieldLUDecomposition<Fraction> LU = new FieldLUDecomposition<Fraction>(matrix); [EOL]     Assert.assertEquals(testData.length, LU.getL().getRowDimension()); [EOL]     Assert.assertEquals(testData.length, LU.getL().getColumnDimension()); [EOL]     Assert.assertEquals(testData.length, LU.getU().getRowDimension()); [EOL]     Assert.assertEquals(testData.length, LU.getU().getColumnDimension()); [EOL]     Assert.assertEquals(testData.length, LU.getP().getRowDimension()); [EOL]     Assert.assertEquals(testData.length, LU.getP().getColumnDimension()); [EOL] } <line_num>: 57,69
@Test [EOL] public void testNonSquare() { [EOL]     try { [EOL]         new FieldLUDecomposition<Fraction>(new Array2DRowFieldMatrix<Fraction>(new Fraction[][] { { Fraction.ZERO, Fraction.ZERO }, { Fraction.ZERO, Fraction.ZERO }, { Fraction.ZERO, Fraction.ZERO } })); [EOL]         Assert.fail("Expected NonSquareMatrixException"); [EOL]     } catch (NonSquareMatrixException ime) { [EOL]     } [EOL] } <line_num>: 72,85
@Test [EOL] public void testPAEqualLU() { [EOL]     FieldMatrix<Fraction> matrix = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), testData); [EOL]     FieldLUDecomposition<Fraction> lu = new FieldLUDecomposition<Fraction>(matrix); [EOL]     FieldMatrix<Fraction> l = lu.getL(); [EOL]     FieldMatrix<Fraction> u = lu.getU(); [EOL]     FieldMatrix<Fraction> p = lu.getP(); [EOL]     TestUtils.assertEquals(p.multiply(matrix), l.multiply(u)); [EOL]     matrix = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), testDataMinus); [EOL]     lu = new FieldLUDecomposition<Fraction>(matrix); [EOL]     l = lu.getL(); [EOL]     u = lu.getU(); [EOL]     p = lu.getP(); [EOL]     TestUtils.assertEquals(p.multiply(matrix), l.multiply(u)); [EOL]     matrix = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), 17, 17); [EOL]     for (int i = 0; i < matrix.getRowDimension(); ++i) { [EOL]         matrix.setEntry(i, i, Fraction.ONE); [EOL]     } [EOL]     lu = new FieldLUDecomposition<Fraction>(matrix); [EOL]     l = lu.getL(); [EOL]     u = lu.getU(); [EOL]     p = lu.getP(); [EOL]     TestUtils.assertEquals(p.multiply(matrix), l.multiply(u)); [EOL]     matrix = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), singular); [EOL]     lu = new FieldLUDecomposition<Fraction>(matrix); [EOL]     Assert.assertFalse(lu.getSolver().isNonSingular()); [EOL]     Assert.assertNull(lu.getL()); [EOL]     Assert.assertNull(lu.getU()); [EOL]     Assert.assertNull(lu.getP()); [EOL]     matrix = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), bigSingular); [EOL]     lu = new FieldLUDecomposition<Fraction>(matrix); [EOL]     Assert.assertFalse(lu.getSolver().isNonSingular()); [EOL]     Assert.assertNull(lu.getL()); [EOL]     Assert.assertNull(lu.getU()); [EOL]     Assert.assertNull(lu.getP()); [EOL] } <line_num>: 88,128
@Test [EOL] public void testLLowerTriangular() { [EOL]     FieldMatrix<Fraction> matrix = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), testData); [EOL]     FieldMatrix<Fraction> l = new FieldLUDecomposition<Fraction>(matrix).getL(); [EOL]     for (int i = 0; i < l.getRowDimension(); i++) { [EOL]         Assert.assertEquals(Fraction.ONE, l.getEntry(i, i)); [EOL]         for (int j = i + 1; j < l.getColumnDimension(); j++) { [EOL]             Assert.assertEquals(Fraction.ZERO, l.getEntry(i, j)); [EOL]         } [EOL]     } [EOL] } <line_num>: 131,141
@Test [EOL] public void testUUpperTriangular() { [EOL]     FieldMatrix<Fraction> matrix = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), testData); [EOL]     FieldMatrix<Fraction> u = new FieldLUDecomposition<Fraction>(matrix).getU(); [EOL]     for (int i = 0; i < u.getRowDimension(); i++) { [EOL]         for (int j = 0; j < i; j++) { [EOL]             Assert.assertEquals(Fraction.ZERO, u.getEntry(i, j)); [EOL]         } [EOL]     } [EOL] } <line_num>: 144,153
@Test [EOL] public void testPPermutation() { [EOL]     FieldMatrix<Fraction> matrix = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), testData); [EOL]     FieldMatrix<Fraction> p = new FieldLUDecomposition<Fraction>(matrix).getP(); [EOL]     FieldMatrix<Fraction> ppT = p.multiply(p.transpose()); [EOL]     FieldMatrix<Fraction> id = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), p.getRowDimension(), p.getRowDimension()); [EOL]     for (int i = 0; i < id.getRowDimension(); ++i) { [EOL]         id.setEntry(i, i, Fraction.ONE); [EOL]     } [EOL]     TestUtils.assertEquals(id, ppT); [EOL]     for (int i = 0; i < p.getRowDimension(); i++) { [EOL]         int zeroCount = 0; [EOL]         int oneCount = 0; [EOL]         int otherCount = 0; [EOL]         for (int j = 0; j < p.getColumnDimension(); j++) { [EOL]             final Fraction e = p.getEntry(i, j); [EOL]             if (e.equals(Fraction.ZERO)) { [EOL]                 ++zeroCount; [EOL]             } else if (e.equals(Fraction.ONE)) { [EOL]                 ++oneCount; [EOL]             } else { [EOL]                 ++otherCount; [EOL]             } [EOL]         } [EOL]         Assert.assertEquals(p.getColumnDimension() - 1, zeroCount); [EOL]         Assert.assertEquals(1, oneCount); [EOL]         Assert.assertEquals(0, otherCount); [EOL]     } [EOL]     for (int j = 0; j < p.getColumnDimension(); j++) { [EOL]         int zeroCount = 0; [EOL]         int oneCount = 0; [EOL]         int otherCount = 0; [EOL]         for (int i = 0; i < p.getRowDimension(); i++) { [EOL]             final Fraction e = p.getEntry(i, j); [EOL]             if (e.equals(Fraction.ZERO)) { [EOL]                 ++zeroCount; [EOL]             } else if (e.equals(Fraction.ONE)) { [EOL]                 ++oneCount; [EOL]             } else { [EOL]                 ++otherCount; [EOL]             } [EOL]         } [EOL]         Assert.assertEquals(p.getRowDimension() - 1, zeroCount); [EOL]         Assert.assertEquals(1, oneCount); [EOL]         Assert.assertEquals(0, otherCount); [EOL]     } [EOL] } <line_num>: 156,208
@Test [EOL] public void testSingular() { [EOL]     FieldLUDecomposition<Fraction> lu = new FieldLUDecomposition<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), testData)); [EOL]     Assert.assertTrue(lu.getSolver().isNonSingular()); [EOL]     lu = new FieldLUDecomposition<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), singular)); [EOL]     Assert.assertFalse(lu.getSolver().isNonSingular()); [EOL]     lu = new FieldLUDecomposition<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), bigSingular)); [EOL]     Assert.assertFalse(lu.getSolver().isNonSingular()); [EOL] } <line_num>: 212,221
@Test [EOL] public void testMatricesValues1() { [EOL]     FieldLUDecomposition<Fraction> lu = new FieldLUDecomposition<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), testData)); [EOL]     FieldMatrix<Fraction> lRef = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), new Fraction[][] { { new Fraction(1), new Fraction(0), new Fraction(0) }, { new Fraction(2), new Fraction(1), new Fraction(0) }, { new Fraction(1), new Fraction(-2), new Fraction(1) } }); [EOL]     FieldMatrix<Fraction> uRef = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), new Fraction[][] { { new Fraction(1), new Fraction(2), new Fraction(3) }, { new Fraction(0), new Fraction(1), new Fraction(-3) }, { new Fraction(0), new Fraction(0), new Fraction(-1) } }); [EOL]     FieldMatrix<Fraction> pRef = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), new Fraction[][] { { new Fraction(1), new Fraction(0), new Fraction(0) }, { new Fraction(0), new Fraction(1), new Fraction(0) }, { new Fraction(0), new Fraction(0), new Fraction(1) } }); [EOL]     int[] pivotRef = { 0, 1, 2 }; [EOL]     FieldMatrix<Fraction> l = lu.getL(); [EOL]     TestUtils.assertEquals(lRef, l); [EOL]     FieldMatrix<Fraction> u = lu.getU(); [EOL]     TestUtils.assertEquals(uRef, u); [EOL]     FieldMatrix<Fraction> p = lu.getP(); [EOL]     TestUtils.assertEquals(pRef, p); [EOL]     int[] pivot = lu.getPivot(); [EOL]     for (int i = 0; i < pivotRef.length; ++i) { [EOL]         Assert.assertEquals(pivotRef[i], pivot[i]); [EOL]     } [EOL]     Assert.assertTrue(l == lu.getL()); [EOL]     Assert.assertTrue(u == lu.getU()); [EOL]     Assert.assertTrue(p == lu.getP()); [EOL] } <line_num>: 224,262
@Test [EOL] public void testMatricesValues2() { [EOL]     FieldLUDecomposition<Fraction> lu = new FieldLUDecomposition<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), luData)); [EOL]     FieldMatrix<Fraction> lRef = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), new Fraction[][] { { new Fraction(1), new Fraction(0), new Fraction(0) }, { new Fraction(3), new Fraction(1), new Fraction(0) }, { new Fraction(1), new Fraction(0), new Fraction(1) } }); [EOL]     FieldMatrix<Fraction> uRef = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), new Fraction[][] { { new Fraction(2), new Fraction(3), new Fraction(3) }, { new Fraction(0), new Fraction(-3), new Fraction(-1) }, { new Fraction(0), new Fraction(0), new Fraction(4) } }); [EOL]     FieldMatrix<Fraction> pRef = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), new Fraction[][] { { new Fraction(1), new Fraction(0), new Fraction(0) }, { new Fraction(0), new Fraction(0), new Fraction(1) }, { new Fraction(0), new Fraction(1), new Fraction(0) } }); [EOL]     int[] pivotRef = { 0, 2, 1 }; [EOL]     FieldMatrix<Fraction> l = lu.getL(); [EOL]     TestUtils.assertEquals(lRef, l); [EOL]     FieldMatrix<Fraction> u = lu.getU(); [EOL]     TestUtils.assertEquals(uRef, u); [EOL]     FieldMatrix<Fraction> p = lu.getP(); [EOL]     TestUtils.assertEquals(pRef, p); [EOL]     int[] pivot = lu.getPivot(); [EOL]     for (int i = 0; i < pivotRef.length; ++i) { [EOL]         Assert.assertEquals(pivotRef[i], pivot[i]); [EOL]     } [EOL]     Assert.assertTrue(l == lu.getL()); [EOL]     Assert.assertTrue(u == lu.getU()); [EOL]     Assert.assertTrue(p == lu.getP()); [EOL] } <line_num>: 265,302
