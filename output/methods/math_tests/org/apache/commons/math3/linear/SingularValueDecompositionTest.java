@Test [EOL] public void testMoreRows() { [EOL]     final double[] singularValues = { 123.456, 2.3, 1.001, 0.999 }; [EOL]     final int rows = singularValues.length + 2; [EOL]     final int columns = singularValues.length; [EOL]     Random r = new Random(15338437322523l); [EOL]     SingularValueDecomposition svd = new SingularValueDecomposition(createTestMatrix(r, rows, columns, singularValues)); [EOL]     double[] computedSV = svd.getSingularValues(); [EOL]     Assert.assertEquals(singularValues.length, computedSV.length); [EOL]     for (int i = 0; i < singularValues.length; ++i) { [EOL]         Assert.assertEquals(singularValues[i], computedSV[i], 1.0e-10); [EOL]     } [EOL] } <line_num>: 46,59
@Test [EOL] public void testMoreColumns() { [EOL]     final double[] singularValues = { 123.456, 2.3, 1.001, 0.999 }; [EOL]     final int rows = singularValues.length; [EOL]     final int columns = singularValues.length + 2; [EOL]     Random r = new Random(732763225836210l); [EOL]     SingularValueDecomposition svd = new SingularValueDecomposition(createTestMatrix(r, rows, columns, singularValues)); [EOL]     double[] computedSV = svd.getSingularValues(); [EOL]     Assert.assertEquals(singularValues.length, computedSV.length); [EOL]     for (int i = 0; i < singularValues.length; ++i) { [EOL]         Assert.assertEquals(singularValues[i], computedSV[i], 1.0e-10); [EOL]     } [EOL] } <line_num>: 61,74
@Test [EOL] public void testDimensions() { [EOL]     RealMatrix matrix = MatrixUtils.createRealMatrix(testSquare); [EOL]     final int m = matrix.getRowDimension(); [EOL]     final int n = matrix.getColumnDimension(); [EOL]     SingularValueDecomposition svd = new SingularValueDecomposition(matrix); [EOL]     Assert.assertEquals(m, svd.getU().getRowDimension()); [EOL]     Assert.assertEquals(m, svd.getU().getColumnDimension()); [EOL]     Assert.assertEquals(m, svd.getS().getColumnDimension()); [EOL]     Assert.assertEquals(n, svd.getS().getColumnDimension()); [EOL]     Assert.assertEquals(n, svd.getV().getRowDimension()); [EOL]     Assert.assertEquals(n, svd.getV().getColumnDimension()); [EOL] } <line_num>: 77,90
@Test [EOL] public void testHadamard() { [EOL]     RealMatrix matrix = new Array2DRowRealMatrix(new double[][] { { 15.0 / 2.0, 5.0 / 2.0, 9.0 / 2.0, 3.0 / 2.0 }, { 5.0 / 2.0, 15.0 / 2.0, 3.0 / 2.0, 9.0 / 2.0 }, { 9.0 / 2.0, 3.0 / 2.0, 15.0 / 2.0, 5.0 / 2.0 }, { 3.0 / 2.0, 9.0 / 2.0, 5.0 / 2.0, 15.0 / 2.0 } }, false); [EOL]     SingularValueDecomposition svd = new SingularValueDecomposition(matrix); [EOL]     Assert.assertEquals(16.0, svd.getSingularValues()[0], 1.0e-14); [EOL]     Assert.assertEquals(8.0, svd.getSingularValues()[1], 1.0e-14); [EOL]     Assert.assertEquals(4.0, svd.getSingularValues()[2], 1.0e-14); [EOL]     Assert.assertEquals(2.0, svd.getSingularValues()[3], 1.0e-14); [EOL]     RealMatrix fullCovariance = new Array2DRowRealMatrix(new double[][] { { 85.0 / 1024, -51.0 / 1024, -75.0 / 1024, 45.0 / 1024 }, { -51.0 / 1024, 85.0 / 1024, 45.0 / 1024, -75.0 / 1024 }, { -75.0 / 1024, 45.0 / 1024, 85.0 / 1024, -51.0 / 1024 }, { 45.0 / 1024, -75.0 / 1024, -51.0 / 1024, 85.0 / 1024 } }, false); [EOL]     Assert.assertEquals(0.0, fullCovariance.subtract(svd.getCovariance(0.0)).getNorm(), 1.0e-14); [EOL]     RealMatrix halfCovariance = new Array2DRowRealMatrix(new double[][] { { 5.0 / 1024, -3.0 / 1024, 5.0 / 1024, -3.0 / 1024 }, { -3.0 / 1024, 5.0 / 1024, -3.0 / 1024, 5.0 / 1024 }, { 5.0 / 1024, -3.0 / 1024, 5.0 / 1024, -3.0 / 1024 }, { -3.0 / 1024, 5.0 / 1024, -3.0 / 1024, 5.0 / 1024 } }, false); [EOL]     Assert.assertEquals(0.0, halfCovariance.subtract(svd.getCovariance(6.0)).getNorm(), 1.0e-14); [EOL] } <line_num>: 93,127
@Test [EOL] public void testAEqualUSVt() { [EOL]     checkAEqualUSVt(MatrixUtils.createRealMatrix(testSquare)); [EOL]     checkAEqualUSVt(MatrixUtils.createRealMatrix(testNonSquare)); [EOL]     checkAEqualUSVt(MatrixUtils.createRealMatrix(testNonSquare).transpose()); [EOL] } <line_num>: 130,135
public void checkAEqualUSVt(final RealMatrix matrix) { [EOL]     SingularValueDecomposition svd = new SingularValueDecomposition(matrix); [EOL]     RealMatrix u = svd.getU(); [EOL]     RealMatrix s = svd.getS(); [EOL]     RealMatrix v = svd.getV(); [EOL]     double norm = u.multiply(s).multiply(v.transpose()).subtract(matrix).getNorm(); [EOL]     Assert.assertEquals(0, norm, normTolerance); [EOL] } <line_num>: 137,145
@Test [EOL] public void testUOrthogonal() { [EOL]     checkOrthogonal(new SingularValueDecomposition(MatrixUtils.createRealMatrix(testSquare)).getU()); [EOL]     checkOrthogonal(new SingularValueDecomposition(MatrixUtils.createRealMatrix(testNonSquare)).getU()); [EOL]     checkOrthogonal(new SingularValueDecomposition(MatrixUtils.createRealMatrix(testNonSquare).transpose()).getU()); [EOL] } <line_num>: 148,153
@Test [EOL] public void testVOrthogonal() { [EOL]     checkOrthogonal(new SingularValueDecomposition(MatrixUtils.createRealMatrix(testSquare)).getV()); [EOL]     checkOrthogonal(new SingularValueDecomposition(MatrixUtils.createRealMatrix(testNonSquare)).getV()); [EOL]     checkOrthogonal(new SingularValueDecomposition(MatrixUtils.createRealMatrix(testNonSquare).transpose()).getV()); [EOL] } <line_num>: 156,161
public void checkOrthogonal(final RealMatrix m) { [EOL]     RealMatrix mTm = m.transpose().multiply(m); [EOL]     RealMatrix id = MatrixUtils.createRealIdentityMatrix(mTm.getRowDimension()); [EOL]     Assert.assertEquals(0, mTm.subtract(id).getNorm(), normTolerance); [EOL] } <line_num>: 163,167
public void testMatricesValues1() { [EOL]     SingularValueDecomposition svd = new SingularValueDecomposition(MatrixUtils.createRealMatrix(testSquare)); [EOL]     RealMatrix uRef = MatrixUtils.createRealMatrix(new double[][] { { 3.0 / 5.0, -4.0 / 5.0 }, { 4.0 / 5.0, 3.0 / 5.0 } }); [EOL]     RealMatrix sRef = MatrixUtils.createRealMatrix(new double[][] { { 3.0, 0.0 }, { 0.0, 1.0 } }); [EOL]     RealMatrix vRef = MatrixUtils.createRealMatrix(new double[][] { { 4.0 / 5.0, 3.0 / 5.0 }, { 3.0 / 5.0, -4.0 / 5.0 } }); [EOL]     RealMatrix u = svd.getU(); [EOL]     Assert.assertEquals(0, u.subtract(uRef).getNorm(), normTolerance); [EOL]     RealMatrix s = svd.getS(); [EOL]     Assert.assertEquals(0, s.subtract(sRef).getNorm(), normTolerance); [EOL]     RealMatrix v = svd.getV(); [EOL]     Assert.assertEquals(0, v.subtract(vRef).getNorm(), normTolerance); [EOL]     Assert.assertTrue(u == svd.getU()); [EOL]     Assert.assertTrue(s == svd.getS()); [EOL]     Assert.assertTrue(v == svd.getV()); [EOL] } <line_num>: 172,201
public void useless_testMatricesValues2() { [EOL]     RealMatrix uRef = MatrixUtils.createRealMatrix(new double[][] { { 0.0 / 5.0, 3.0 / 5.0, 0.0 / 5.0 }, { -4.0 / 5.0, 0.0 / 5.0, -3.0 / 5.0 }, { 0.0 / 5.0, 4.0 / 5.0, 0.0 / 5.0 }, { -3.0 / 5.0, 0.0 / 5.0, 4.0 / 5.0 } }); [EOL]     RealMatrix sRef = MatrixUtils.createRealMatrix(new double[][] { { 4.0, 0.0, 0.0 }, { 0.0, 3.0, 0.0 }, { 0.0, 0.0, 2.0 } }); [EOL]     RealMatrix vRef = MatrixUtils.createRealMatrix(new double[][] { { 80.0 / 125.0, -60.0 / 125.0, 75.0 / 125.0 }, { 24.0 / 125.0, 107.0 / 125.0, 60.0 / 125.0 }, { -93.0 / 125.0, -24.0 / 125.0, 80.0 / 125.0 } }); [EOL]     SingularValueDecomposition svd = new SingularValueDecomposition(MatrixUtils.createRealMatrix(testNonSquare)); [EOL]     RealMatrix u = svd.getU(); [EOL]     Assert.assertEquals(0, u.subtract(uRef).getNorm(), normTolerance); [EOL]     RealMatrix s = svd.getS(); [EOL]     Assert.assertEquals(0, s.subtract(sRef).getNorm(), normTolerance); [EOL]     RealMatrix v = svd.getV(); [EOL]     Assert.assertEquals(0, v.subtract(vRef).getNorm(), normTolerance); [EOL]     Assert.assertTrue(u == svd.getU()); [EOL]     Assert.assertTrue(s == svd.getS()); [EOL]     Assert.assertTrue(v == svd.getV()); [EOL] } <line_num>: 206,240
@Test [EOL] public void testRank() { [EOL]     double[][] d = { { 1, 1, 1 }, { 0, 0, 0 }, { 1, 2, 3 } }; [EOL]     RealMatrix m = new Array2DRowRealMatrix(d); [EOL]     SingularValueDecomposition svd = new SingularValueDecomposition(m); [EOL]     Assert.assertEquals(2, svd.getRank()); [EOL] } <line_num>: 243,249
@Test [EOL] public void testStability1() { [EOL]     RealMatrix m = new Array2DRowRealMatrix(201, 201); [EOL]     loadRealMatrix(m, "matrix1.csv"); [EOL]     try { [EOL]         new SingularValueDecomposition(m); [EOL]     } catch (Exception e) { [EOL]         Assert.fail("Exception whilst constructing SVD"); [EOL]     } [EOL] } <line_num>: 252,261
@Test [EOL] public void testStability2() { [EOL]     RealMatrix m = new Array2DRowRealMatrix(7, 168); [EOL]     loadRealMatrix(m, "matrix2.csv"); [EOL]     try { [EOL]         new SingularValueDecomposition(m); [EOL]     } catch (Throwable e) { [EOL]         Assert.fail("Exception whilst constructing SVD"); [EOL]     } [EOL] } <line_num>: 264,273
private void loadRealMatrix(RealMatrix m, String resourceName) { [EOL]     try { [EOL]         DataInputStream in = new DataInputStream(getClass().getResourceAsStream(resourceName)); [EOL]         BufferedReader br = new BufferedReader(new InputStreamReader(in)); [EOL]         String strLine; [EOL]         int row = 0; [EOL]         while ((strLine = br.readLine()) != null) { [EOL]             if (!strLine.startsWith("#")) { [EOL]                 int col = 0; [EOL]                 for (String entry : strLine.split(",")) { [EOL]                     m.setEntry(row, col++, Double.parseDouble(entry)); [EOL]                 } [EOL]                 row++; [EOL]             } [EOL]         } [EOL]         in.close(); [EOL]     } catch (IOException e) { [EOL]     } [EOL] } <line_num>: 275,292
@Test [EOL] public void testConditionNumber() { [EOL]     SingularValueDecomposition svd = new SingularValueDecomposition(MatrixUtils.createRealMatrix(testSquare)); [EOL]     Assert.assertEquals(3.0, svd.getConditionNumber(), 1.5e-15); [EOL] } <line_num>: 295,301
@Test [EOL] public void testInverseConditionNumber() { [EOL]     SingularValueDecomposition svd = new SingularValueDecomposition(MatrixUtils.createRealMatrix(testSquare)); [EOL]     Assert.assertEquals(1.0 / 3.0, svd.getInverseConditionNumber(), 1.5e-15); [EOL] } <line_num>: 303,308
private RealMatrix createTestMatrix(final Random r, final int rows, final int columns, final double[] singularValues) { [EOL]     final RealMatrix u = EigenDecompositionTest.createOrthogonalMatrix(r, rows); [EOL]     final RealMatrix d = new Array2DRowRealMatrix(rows, columns); [EOL]     d.setSubMatrix(MatrixUtils.createRealDiagonalMatrix(singularValues).getData(), 0, 0); [EOL]     final RealMatrix v = EigenDecompositionTest.createOrthogonalMatrix(r, columns); [EOL]     return u.multiply(d).multiply(v); [EOL] } <line_num>: 310,317
@Test [EOL] public void testIssue947() { [EOL]     double[][] nans = new double[][] { { Double.NaN, Double.NaN }, { Double.NaN, Double.NaN } }; [EOL]     RealMatrix m = new Array2DRowRealMatrix(nans, false); [EOL]     SingularValueDecomposition svd = new SingularValueDecomposition(m); [EOL]     Assert.assertTrue(Double.isNaN(svd.getSingularValues()[0])); [EOL]     Assert.assertTrue(Double.isNaN(svd.getSingularValues()[1])); [EOL] } <line_num>: 319,329
