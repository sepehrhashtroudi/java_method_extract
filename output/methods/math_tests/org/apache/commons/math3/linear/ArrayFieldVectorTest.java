public FieldVectorTestImpl(T[] d) { [EOL]     field = d[0].getField(); [EOL]     data = d.clone(); [EOL] } <line_num>: 82,85
@SuppressWarnings("unchecked") [EOL] private T[] buildArray(final int length) { [EOL]     return (T[]) Array.newInstance(field.getRuntimeClass(), length); [EOL] } <line_num>: 77,80
public Field<T> getField() { [EOL]     return field; [EOL] } <line_num>: 87,89
private UnsupportedOperationException unsupported() { [EOL]     return new UnsupportedOperationException("Not supported, unneeded for test purposes"); [EOL] } <line_num>: 91,93
public FieldVector<T> copy() { [EOL]     throw unsupported(); [EOL] } <line_num>: 95,97
public FieldVector<T> add(FieldVector<T> v) { [EOL]     throw unsupported(); [EOL] } <line_num>: 99,101
public FieldVector<T> add(T[] v) { [EOL]     throw unsupported(); [EOL] } <line_num>: 103,105
public FieldVector<T> subtract(FieldVector<T> v) { [EOL]     throw unsupported(); [EOL] } <line_num>: 107,109
public FieldVector<T> subtract(T[] v) { [EOL]     throw unsupported(); [EOL] } <line_num>: 111,113
public FieldVector<T> mapAdd(T d) { [EOL]     throw unsupported(); [EOL] } <line_num>: 115,117
public FieldVector<T> mapAddToSelf(T d) { [EOL]     throw unsupported(); [EOL] } <line_num>: 119,121
public FieldVector<T> mapSubtract(T d) { [EOL]     throw unsupported(); [EOL] } <line_num>: 123,125
public FieldVector<T> mapSubtractToSelf(T d) { [EOL]     throw unsupported(); [EOL] } <line_num>: 127,129
public FieldVector<T> mapMultiply(T d) { [EOL]     T[] out = buildArray(data.length); [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         out[i] = data[i].multiply(d); [EOL]     } [EOL]     return new FieldVectorTestImpl<T>(out); [EOL] } <line_num>: 131,137
public FieldVector<T> mapMultiplyToSelf(T d) { [EOL]     throw unsupported(); [EOL] } <line_num>: 139,141
public FieldVector<T> mapDivide(T d) { [EOL]     throw unsupported(); [EOL] } <line_num>: 143,145
public FieldVector<T> mapDivideToSelf(T d) { [EOL]     throw unsupported(); [EOL] } <line_num>: 147,149
public FieldVector<T> mapInv() { [EOL]     throw unsupported(); [EOL] } <line_num>: 151,153
public FieldVector<T> mapInvToSelf() { [EOL]     throw unsupported(); [EOL] } <line_num>: 155,157
public FieldVector<T> ebeMultiply(FieldVector<T> v) { [EOL]     throw unsupported(); [EOL] } <line_num>: 159,161
public FieldVector<T> ebeMultiply(T[] v) { [EOL]     throw unsupported(); [EOL] } <line_num>: 163,165
public FieldVector<T> ebeDivide(FieldVector<T> v) { [EOL]     throw unsupported(); [EOL] } <line_num>: 167,169
public FieldVector<T> ebeDivide(T[] v) { [EOL]     throw unsupported(); [EOL] } <line_num>: 171,173
public T[] getData() { [EOL]     return data.clone(); [EOL] } <line_num>: 175,177
public T dotProduct(FieldVector<T> v) { [EOL]     T dot = field.getZero(); [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         dot = dot.add(data[i].multiply(v.getEntry(i))); [EOL]     } [EOL]     return dot; [EOL] } <line_num>: 179,185
public T dotProduct(T[] v) { [EOL]     T dot = field.getZero(); [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         dot = dot.add(data[i].multiply(v[i])); [EOL]     } [EOL]     return dot; [EOL] } <line_num>: 187,193
public FieldVector<T> projection(FieldVector<T> v) { [EOL]     throw unsupported(); [EOL] } <line_num>: 195,197
public FieldVector<T> projection(T[] v) { [EOL]     throw unsupported(); [EOL] } <line_num>: 199,201
public FieldMatrix<T> outerProduct(FieldVector<T> v) { [EOL]     throw unsupported(); [EOL] } <line_num>: 203,205
public FieldMatrix<T> outerProduct(T[] v) { [EOL]     throw unsupported(); [EOL] } <line_num>: 207,209
public T getEntry(int index) { [EOL]     return data[index]; [EOL] } <line_num>: 211,213
public int getDimension() { [EOL]     return data.length; [EOL] } <line_num>: 215,217
public FieldVector<T> append(FieldVector<T> v) { [EOL]     throw unsupported(); [EOL] } <line_num>: 219,221
public FieldVector<T> append(T d) { [EOL]     throw unsupported(); [EOL] } <line_num>: 223,225
public FieldVector<T> append(T[] a) { [EOL]     throw unsupported(); [EOL] } <line_num>: 227,229
public FieldVector<T> getSubVector(int index, int n) { [EOL]     throw unsupported(); [EOL] } <line_num>: 231,233
public void setEntry(int index, T value) { [EOL]     throw unsupported(); [EOL] } <line_num>: 235,237
public void setSubVector(int index, FieldVector<T> v) { [EOL]     throw unsupported(); [EOL] } <line_num>: 239,241
public void setSubVector(int index, T[] v) { [EOL]     throw unsupported(); [EOL] } <line_num>: 243,245
public void set(T value) { [EOL]     throw unsupported(); [EOL] } <line_num>: 247,249
public T[] toArray() { [EOL]     throw unsupported(); [EOL] } <line_num>: 251,253
@Test [EOL] public void testConstructors() { [EOL]     ArrayFieldVector<Fraction> v0 = new ArrayFieldVector<Fraction>(FractionField.getInstance()); [EOL]     Assert.assertEquals(0, v0.getDimension()); [EOL]     ArrayFieldVector<Fraction> v1 = new ArrayFieldVector<Fraction>(FractionField.getInstance(), 7); [EOL]     Assert.assertEquals(7, v1.getDimension()); [EOL]     Assert.assertEquals(new Fraction(0), v1.getEntry(6)); [EOL]     ArrayFieldVector<Fraction> v2 = new ArrayFieldVector<Fraction>(5, new Fraction(123, 100)); [EOL]     Assert.assertEquals(5, v2.getDimension()); [EOL]     Assert.assertEquals(new Fraction(123, 100), v2.getEntry(4)); [EOL]     ArrayFieldVector<Fraction> v3 = new ArrayFieldVector<Fraction>(FractionField.getInstance(), vec1); [EOL]     Assert.assertEquals(3, v3.getDimension()); [EOL]     Assert.assertEquals(new Fraction(2), v3.getEntry(1)); [EOL]     ArrayFieldVector<Fraction> v4 = new ArrayFieldVector<Fraction>(FractionField.getInstance(), vec4, 3, 2); [EOL]     Assert.assertEquals(2, v4.getDimension()); [EOL]     Assert.assertEquals(new Fraction(4), v4.getEntry(0)); [EOL]     try { [EOL]         new ArrayFieldVector<Fraction>(vec4, 8, 3); [EOL]         Assert.fail("MathIllegalArgumentException expected"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     FieldVector<Fraction> v5_i = new ArrayFieldVector<Fraction>(dvec1); [EOL]     Assert.assertEquals(9, v5_i.getDimension()); [EOL]     Assert.assertEquals(new Fraction(9), v5_i.getEntry(8)); [EOL]     ArrayFieldVector<Fraction> v5 = new ArrayFieldVector<Fraction>(dvec1); [EOL]     Assert.assertEquals(9, v5.getDimension()); [EOL]     Assert.assertEquals(new Fraction(9), v5.getEntry(8)); [EOL]     ArrayFieldVector<Fraction> v6 = new ArrayFieldVector<Fraction>(dvec1, 3, 2); [EOL]     Assert.assertEquals(2, v6.getDimension()); [EOL]     Assert.assertEquals(new Fraction(4), v6.getEntry(0)); [EOL]     try { [EOL]         new ArrayFieldVector<Fraction>(dvec1, 8, 3); [EOL]         Assert.fail("MathIllegalArgumentException expected"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     ArrayFieldVector<Fraction> v7 = new ArrayFieldVector<Fraction>(v1); [EOL]     Assert.assertEquals(7, v7.getDimension()); [EOL]     Assert.assertEquals(new Fraction(0), v7.getEntry(6)); [EOL]     FieldVectorTestImpl<Fraction> v7_i = new FieldVectorTestImpl<Fraction>(vec1); [EOL]     ArrayFieldVector<Fraction> v7_2 = new ArrayFieldVector<Fraction>(v7_i); [EOL]     Assert.assertEquals(3, v7_2.getDimension()); [EOL]     Assert.assertEquals(new Fraction(2), v7_2.getEntry(1)); [EOL]     ArrayFieldVector<Fraction> v8 = new ArrayFieldVector<Fraction>(v1, true); [EOL]     Assert.assertEquals(7, v8.getDimension()); [EOL]     Assert.assertEquals(new Fraction(0), v8.getEntry(6)); [EOL]     Assert.assertNotSame("testData not same object ", v1.getDataRef(), v8.getDataRef()); [EOL]     ArrayFieldVector<Fraction> v8_2 = new ArrayFieldVector<Fraction>(v1, false); [EOL]     Assert.assertEquals(7, v8_2.getDimension()); [EOL]     Assert.assertEquals(new Fraction(0), v8_2.getEntry(6)); [EOL]     Assert.assertArrayEquals(v1.getDataRef(), v8_2.getDataRef()); [EOL]     ArrayFieldVector<Fraction> v9 = new ArrayFieldVector<Fraction>(v1, v3); [EOL]     Assert.assertEquals(10, v9.getDimension()); [EOL]     Assert.assertEquals(new Fraction(1), v9.getEntry(7)); [EOL] } <line_num>: 257,327
@Test [EOL] public void testDataInOut() { [EOL]     ArrayFieldVector<Fraction> v1 = new ArrayFieldVector<Fraction>(vec1); [EOL]     ArrayFieldVector<Fraction> v2 = new ArrayFieldVector<Fraction>(vec2); [EOL]     ArrayFieldVector<Fraction> v4 = new ArrayFieldVector<Fraction>(vec4); [EOL]     FieldVectorTestImpl<Fraction> v2_t = new FieldVectorTestImpl<Fraction>(vec2); [EOL]     FieldVector<Fraction> v_append_1 = v1.append(v2); [EOL]     Assert.assertEquals(6, v_append_1.getDimension()); [EOL]     Assert.assertEquals(new Fraction(4), v_append_1.getEntry(3)); [EOL]     FieldVector<Fraction> v_append_2 = v1.append(new Fraction(2)); [EOL]     Assert.assertEquals(4, v_append_2.getDimension()); [EOL]     Assert.assertEquals(new Fraction(2), v_append_2.getEntry(3)); [EOL]     FieldVector<Fraction> v_append_4 = v1.append(v2_t); [EOL]     Assert.assertEquals(6, v_append_4.getDimension()); [EOL]     Assert.assertEquals(new Fraction(4), v_append_4.getEntry(3)); [EOL]     FieldVector<Fraction> v_copy = v1.copy(); [EOL]     Assert.assertEquals(3, v_copy.getDimension()); [EOL]     Assert.assertNotSame("testData not same object ", v1.getDataRef(), v_copy.getData()); [EOL]     Fraction[] a_frac = v1.toArray(); [EOL]     Assert.assertEquals(3, a_frac.length); [EOL]     Assert.assertNotSame("testData not same object ", v1.getDataRef(), a_frac); [EOL]     FieldVector<Fraction> vout5 = v4.getSubVector(3, 3); [EOL]     Assert.assertEquals(3, vout5.getDimension()); [EOL]     Assert.assertEquals(new Fraction(5), vout5.getEntry(1)); [EOL]     try { [EOL]         v4.getSubVector(3, 7); [EOL]         Assert.fail("OutOfRangeException expected"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     ArrayFieldVector<Fraction> v_set1 = (ArrayFieldVector<Fraction>) v1.copy(); [EOL]     v_set1.setEntry(1, new Fraction(11)); [EOL]     Assert.assertEquals(new Fraction(11), v_set1.getEntry(1)); [EOL]     try { [EOL]         v_set1.setEntry(3, new Fraction(11)); [EOL]         Assert.fail("OutOfRangeException expected"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     ArrayFieldVector<Fraction> v_set2 = (ArrayFieldVector<Fraction>) v4.copy(); [EOL]     v_set2.set(3, v1); [EOL]     Assert.assertEquals(new Fraction(1), v_set2.getEntry(3)); [EOL]     Assert.assertEquals(new Fraction(7), v_set2.getEntry(6)); [EOL]     try { [EOL]         v_set2.set(7, v1); [EOL]         Assert.fail("OutOfRangeException expected"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     ArrayFieldVector<Fraction> v_set3 = (ArrayFieldVector<Fraction>) v1.copy(); [EOL]     v_set3.set(new Fraction(13)); [EOL]     Assert.assertEquals(new Fraction(13), v_set3.getEntry(2)); [EOL]     try { [EOL]         v_set3.getEntry(23); [EOL]         Assert.fail("ArrayIndexOutOfBoundsException expected"); [EOL]     } catch (ArrayIndexOutOfBoundsException ex) { [EOL]     } [EOL]     ArrayFieldVector<Fraction> v_set4 = (ArrayFieldVector<Fraction>) v4.copy(); [EOL]     v_set4.setSubVector(3, v2_t); [EOL]     Assert.assertEquals(new Fraction(4), v_set4.getEntry(3)); [EOL]     Assert.assertEquals(new Fraction(7), v_set4.getEntry(6)); [EOL]     try { [EOL]         v_set4.setSubVector(7, v2_t); [EOL]         Assert.fail("OutOfRangeException expected"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     ArrayFieldVector<Fraction> vout10 = (ArrayFieldVector<Fraction>) v1.copy(); [EOL]     ArrayFieldVector<Fraction> vout10_2 = (ArrayFieldVector<Fraction>) v1.copy(); [EOL]     Assert.assertEquals(vout10, vout10_2); [EOL]     vout10_2.setEntry(0, new Fraction(11, 10)); [EOL]     Assert.assertNotSame(vout10, vout10_2); [EOL] } <line_num>: 329,423
@Test [EOL] public void testMapFunctions() { [EOL]     ArrayFieldVector<Fraction> v1 = new ArrayFieldVector<Fraction>(vec1); [EOL]     FieldVector<Fraction> v_mapAdd = v1.mapAdd(new Fraction(2)); [EOL]     Fraction[] result_mapAdd = { new Fraction(3), new Fraction(4), new Fraction(5) }; [EOL]     checkArray("compare vectors", result_mapAdd, v_mapAdd.getData()); [EOL]     FieldVector<Fraction> v_mapAddToSelf = v1.copy(); [EOL]     v_mapAddToSelf.mapAddToSelf(new Fraction(2)); [EOL]     Fraction[] result_mapAddToSelf = { new Fraction(3), new Fraction(4), new Fraction(5) }; [EOL]     checkArray("compare vectors", result_mapAddToSelf, v_mapAddToSelf.getData()); [EOL]     FieldVector<Fraction> v_mapSubtract = v1.mapSubtract(new Fraction(2)); [EOL]     Fraction[] result_mapSubtract = { new Fraction(-1), new Fraction(0), new Fraction(1) }; [EOL]     checkArray("compare vectors", result_mapSubtract, v_mapSubtract.getData()); [EOL]     FieldVector<Fraction> v_mapSubtractToSelf = v1.copy(); [EOL]     v_mapSubtractToSelf.mapSubtractToSelf(new Fraction(2)); [EOL]     Fraction[] result_mapSubtractToSelf = { new Fraction(-1), new Fraction(0), new Fraction(1) }; [EOL]     checkArray("compare vectors", result_mapSubtractToSelf, v_mapSubtractToSelf.getData()); [EOL]     FieldVector<Fraction> v_mapMultiply = v1.mapMultiply(new Fraction(2)); [EOL]     Fraction[] result_mapMultiply = { new Fraction(2), new Fraction(4), new Fraction(6) }; [EOL]     checkArray("compare vectors", result_mapMultiply, v_mapMultiply.getData()); [EOL]     FieldVector<Fraction> v_mapMultiplyToSelf = v1.copy(); [EOL]     v_mapMultiplyToSelf.mapMultiplyToSelf(new Fraction(2)); [EOL]     Fraction[] result_mapMultiplyToSelf = { new Fraction(2), new Fraction(4), new Fraction(6) }; [EOL]     checkArray("compare vectors", result_mapMultiplyToSelf, v_mapMultiplyToSelf.getData()); [EOL]     FieldVector<Fraction> v_mapDivide = v1.mapDivide(new Fraction(2)); [EOL]     Fraction[] result_mapDivide = { new Fraction(1, 2), new Fraction(1), new Fraction(3, 2) }; [EOL]     checkArray("compare vectors", result_mapDivide, v_mapDivide.getData()); [EOL]     FieldVector<Fraction> v_mapDivideToSelf = v1.copy(); [EOL]     v_mapDivideToSelf.mapDivideToSelf(new Fraction(2)); [EOL]     Fraction[] result_mapDivideToSelf = { new Fraction(1, 2), new Fraction(1), new Fraction(3, 2) }; [EOL]     checkArray("compare vectors", result_mapDivideToSelf, v_mapDivideToSelf.getData()); [EOL]     FieldVector<Fraction> v_mapInv = v1.mapInv(); [EOL]     Fraction[] result_mapInv = { new Fraction(1), new Fraction(1, 2), new Fraction(1, 3) }; [EOL]     checkArray("compare vectors", result_mapInv, v_mapInv.getData()); [EOL]     FieldVector<Fraction> v_mapInvToSelf = v1.copy(); [EOL]     v_mapInvToSelf.mapInvToSelf(); [EOL]     Fraction[] result_mapInvToSelf = { new Fraction(1), new Fraction(1, 2), new Fraction(1, 3) }; [EOL]     checkArray("compare vectors", result_mapInvToSelf, v_mapInvToSelf.getData()); [EOL] } <line_num>: 425,484
@Test [EOL] public void testBasicFunctions() { [EOL]     ArrayFieldVector<Fraction> v1 = new ArrayFieldVector<Fraction>(vec1); [EOL]     ArrayFieldVector<Fraction> v2 = new ArrayFieldVector<Fraction>(vec2); [EOL]     new ArrayFieldVector<Fraction>(vec_null); [EOL]     FieldVectorTestImpl<Fraction> v2_t = new FieldVectorTestImpl<Fraction>(vec2); [EOL]     ArrayFieldVector<Fraction> v_add = v1.add(v2); [EOL]     Fraction[] result_add = { new Fraction(5), new Fraction(7), new Fraction(9) }; [EOL]     checkArray("compare vect", v_add.getData(), result_add); [EOL]     FieldVectorTestImpl<Fraction> vt2 = new FieldVectorTestImpl<Fraction>(vec2); [EOL]     FieldVector<Fraction> v_add_i = v1.add(vt2); [EOL]     Fraction[] result_add_i = { new Fraction(5), new Fraction(7), new Fraction(9) }; [EOL]     checkArray("compare vect", v_add_i.getData(), result_add_i); [EOL]     ArrayFieldVector<Fraction> v_subtract = v1.subtract(v2); [EOL]     Fraction[] result_subtract = { new Fraction(-3), new Fraction(-3), new Fraction(-3) }; [EOL]     checkArray("compare vect", v_subtract.getData(), result_subtract); [EOL]     FieldVector<Fraction> v_subtract_i = v1.subtract(vt2); [EOL]     Fraction[] result_subtract_i = { new Fraction(-3), new Fraction(-3), new Fraction(-3) }; [EOL]     checkArray("compare vect", v_subtract_i.getData(), result_subtract_i); [EOL]     ArrayFieldVector<Fraction> v_ebeMultiply = v1.ebeMultiply(v2); [EOL]     Fraction[] result_ebeMultiply = { new Fraction(4), new Fraction(10), new Fraction(18) }; [EOL]     checkArray("compare vect", v_ebeMultiply.getData(), result_ebeMultiply); [EOL]     FieldVector<Fraction> v_ebeMultiply_2 = v1.ebeMultiply(v2_t); [EOL]     Fraction[] result_ebeMultiply_2 = { new Fraction(4), new Fraction(10), new Fraction(18) }; [EOL]     checkArray("compare vect", v_ebeMultiply_2.getData(), result_ebeMultiply_2); [EOL]     ArrayFieldVector<Fraction> v_ebeDivide = v1.ebeDivide(v2); [EOL]     Fraction[] result_ebeDivide = { new Fraction(1, 4), new Fraction(2, 5), new Fraction(1, 2) }; [EOL]     checkArray("compare vect", v_ebeDivide.getData(), result_ebeDivide); [EOL]     FieldVector<Fraction> v_ebeDivide_2 = v1.ebeDivide(v2_t); [EOL]     Fraction[] result_ebeDivide_2 = { new Fraction(1, 4), new Fraction(2, 5), new Fraction(1, 2) }; [EOL]     checkArray("compare vect", v_ebeDivide_2.getData(), result_ebeDivide_2); [EOL]     Fraction dot = v1.dotProduct(v2); [EOL]     Assert.assertEquals("compare val ", new Fraction(32), dot); [EOL]     Fraction dot_2 = v1.dotProduct(v2_t); [EOL]     Assert.assertEquals("compare val ", new Fraction(32), dot_2); [EOL]     FieldMatrix<Fraction> m_outerProduct = v1.outerProduct(v2); [EOL]     Assert.assertEquals("compare val ", new Fraction(4), m_outerProduct.getEntry(0, 0)); [EOL]     FieldMatrix<Fraction> m_outerProduct_2 = v1.outerProduct(v2_t); [EOL]     Assert.assertEquals("compare val ", new Fraction(4), m_outerProduct_2.getEntry(0, 0)); [EOL]     ArrayFieldVector<Fraction> v_projection = v1.projection(v2); [EOL]     Fraction[] result_projection = { new Fraction(128, 77), new Fraction(160, 77), new Fraction(192, 77) }; [EOL]     checkArray("compare vect", v_projection.getData(), result_projection); [EOL]     FieldVector<Fraction> v_projection_2 = v1.projection(v2_t); [EOL]     Fraction[] result_projection_2 = { new Fraction(128, 77), new Fraction(160, 77), new Fraction(192, 77) }; [EOL]     checkArray("compare vect", v_projection_2.getData(), result_projection_2); [EOL] } <line_num>: 486,553
@Test [EOL] public void testMisc() { [EOL]     ArrayFieldVector<Fraction> v1 = new ArrayFieldVector<Fraction>(vec1); [EOL]     ArrayFieldVector<Fraction> v4 = new ArrayFieldVector<Fraction>(vec4); [EOL]     FieldVector<Fraction> v4_2 = new ArrayFieldVector<Fraction>(vec4); [EOL]     String out1 = v1.toString(); [EOL]     Assert.assertTrue("some output ", out1.length() != 0); [EOL]     try { [EOL]         v1.checkVectorDimensions(2); [EOL]         Assert.fail("MathIllegalArgumentException expected"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         v1.checkVectorDimensions(v4); [EOL]         Assert.fail("MathIllegalArgumentException expected"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         v1.checkVectorDimensions(v4_2); [EOL]         Assert.fail("MathIllegalArgumentException expected"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 555,589
@Test [EOL] public void testSerial() { [EOL]     ArrayFieldVector<Fraction> v = new ArrayFieldVector<Fraction>(vec1); [EOL]     Assert.assertEquals(v, TestUtils.serializeAndRecover(v)); [EOL] } <line_num>: 591,595
@Test [EOL] public void testZeroVectors() { [EOL]     try { [EOL]         new ArrayFieldVector<Fraction>(new Fraction[0]); [EOL]         Assert.fail("MathIllegalArgumentException expected"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new ArrayFieldVector<Fraction>(new Fraction[0], true); [EOL]         Assert.fail("MathIllegalArgumentException expected"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new ArrayFieldVector<Fraction>(new Fraction[0], false); [EOL]         Assert.fail("MathIllegalArgumentException expected"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     Assert.assertEquals(0, new ArrayFieldVector<Fraction>(FractionField.getInstance(), new Fraction[0]).getDimension()); [EOL]     Assert.assertEquals(0, new ArrayFieldVector<Fraction>(FractionField.getInstance(), new Fraction[0], true).getDimension()); [EOL]     Assert.assertEquals(0, new ArrayFieldVector<Fraction>(FractionField.getInstance(), new Fraction[0], false).getDimension()); [EOL] } <line_num>: 597,625
@Test [EOL] public void testOuterProduct() { [EOL]     final ArrayFieldVector<Fraction> u = new ArrayFieldVector<Fraction>(FractionField.getInstance(), new Fraction[] { new Fraction(1), new Fraction(2), new Fraction(-3) }); [EOL]     final ArrayFieldVector<Fraction> v = new ArrayFieldVector<Fraction>(FractionField.getInstance(), new Fraction[] { new Fraction(4), new Fraction(-2) }); [EOL]     final FieldMatrix<Fraction> uv = u.outerProduct(v); [EOL]     final double tol = Math.ulp(1d); [EOL]     Assert.assertEquals(new Fraction(4).doubleValue(), uv.getEntry(0, 0).doubleValue(), tol); [EOL]     Assert.assertEquals(new Fraction(-2).doubleValue(), uv.getEntry(0, 1).doubleValue(), tol); [EOL]     Assert.assertEquals(new Fraction(8).doubleValue(), uv.getEntry(1, 0).doubleValue(), tol); [EOL]     Assert.assertEquals(new Fraction(-4).doubleValue(), uv.getEntry(1, 1).doubleValue(), tol); [EOL]     Assert.assertEquals(new Fraction(-12).doubleValue(), uv.getEntry(2, 0).doubleValue(), tol); [EOL]     Assert.assertEquals(new Fraction(6).doubleValue(), uv.getEntry(2, 1).doubleValue(), tol); [EOL] } <line_num>: 627,648
protected void checkArray(String msg, Fraction[] m, Fraction[] n) { [EOL]     if (m.length != n.length) { [EOL]         Assert.fail("vectors have different lengths"); [EOL]     } [EOL]     for (int i = 0; i < m.length; i++) { [EOL]         Assert.assertEquals(msg + " " + i + " elements differ", m[i], n[i]); [EOL]     } [EOL] } <line_num>: 651,658
