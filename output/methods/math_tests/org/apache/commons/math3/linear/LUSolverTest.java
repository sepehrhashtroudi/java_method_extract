@Test [EOL] public void testThreshold() { [EOL]     final RealMatrix matrix = MatrixUtils.createRealMatrix(new double[][] { { 1.0, 2.0, 3.0 }, { 2.0, 5.0, 3.0 }, { 4.000001, 9.0, 9.0 } }); [EOL]     Assert.assertFalse(new LUDecomposition(matrix, 1.0e-5).getSolver().isNonSingular()); [EOL]     Assert.assertTrue(new LUDecomposition(matrix, 1.0e-10).getSolver().isNonSingular()); [EOL] } <line_num>: 50,59
@Test [EOL] public void testSingular() { [EOL]     DecompositionSolver solver = new LUDecomposition(MatrixUtils.createRealMatrix(testData)).getSolver(); [EOL]     Assert.assertTrue(solver.isNonSingular()); [EOL]     solver = new LUDecomposition(MatrixUtils.createRealMatrix(singular)).getSolver(); [EOL]     Assert.assertFalse(solver.isNonSingular()); [EOL]     solver = new LUDecomposition(MatrixUtils.createRealMatrix(bigSingular)).getSolver(); [EOL]     Assert.assertFalse(solver.isNonSingular()); [EOL] } <line_num>: 62,71
@Test [EOL] public void testSolveDimensionErrors() { [EOL]     DecompositionSolver solver = new LUDecomposition(MatrixUtils.createRealMatrix(testData)).getSolver(); [EOL]     RealMatrix b = MatrixUtils.createRealMatrix(new double[2][2]); [EOL]     try { [EOL]         solver.solve(b); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (MathIllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         solver.solve(b.getColumnVector(0)); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (MathIllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         solver.solve(new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(0))); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (MathIllegalArgumentException iae) { [EOL]     } [EOL] } <line_num>: 74,97
@Test [EOL] public void testSolveSingularityErrors() { [EOL]     DecompositionSolver solver = new LUDecomposition(MatrixUtils.createRealMatrix(singular)).getSolver(); [EOL]     RealMatrix b = MatrixUtils.createRealMatrix(new double[2][2]); [EOL]     try { [EOL]         solver.solve(b); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (SingularMatrixException ime) { [EOL]     } [EOL]     try { [EOL]         solver.solve(b.getColumnVector(0)); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (SingularMatrixException ime) { [EOL]     } [EOL]     try { [EOL]         solver.solve(new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(0))); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (SingularMatrixException ime) { [EOL]     } [EOL] } <line_num>: 100,123
@Test [EOL] public void testSolve() { [EOL]     DecompositionSolver solver = new LUDecomposition(MatrixUtils.createRealMatrix(testData)).getSolver(); [EOL]     RealMatrix b = MatrixUtils.createRealMatrix(new double[][] { { 1, 0 }, { 2, -5 }, { 3, 1 } }); [EOL]     RealMatrix xRef = MatrixUtils.createRealMatrix(new double[][] { { 19, -71 }, { -6, 22 }, { -2, 9 } }); [EOL]     Assert.assertEquals(0, solver.solve(b).subtract(xRef).getNorm(), 1.0e-13); [EOL]     for (int i = 0; i < b.getColumnDimension(); ++i) { [EOL]         Assert.assertEquals(0, solver.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(), 1.0e-13); [EOL]     } [EOL]     for (int i = 0; i < b.getColumnDimension(); ++i) { [EOL]         ArrayRealVectorTest.RealVectorTestImpl v = new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(i)); [EOL]         Assert.assertEquals(0, solver.solve(v).subtract(xRef.getColumnVector(i)).getNorm(), 1.0e-13); [EOL]     } [EOL] } <line_num>: 126,155
@Test [EOL] public void testDeterminant() { [EOL]     Assert.assertEquals(-1, getDeterminant(MatrixUtils.createRealMatrix(testData)), 1.0e-15); [EOL]     Assert.assertEquals(-10, getDeterminant(MatrixUtils.createRealMatrix(luData)), 1.0e-14); [EOL]     Assert.assertEquals(0, getDeterminant(MatrixUtils.createRealMatrix(singular)), 1.0e-17); [EOL]     Assert.assertEquals(0, getDeterminant(MatrixUtils.createRealMatrix(bigSingular)), 1.0e-10); [EOL] } <line_num>: 158,164
private double getDeterminant(RealMatrix m) { [EOL]     return new LUDecomposition(m).getDeterminant(); [EOL] } <line_num>: 166,168
