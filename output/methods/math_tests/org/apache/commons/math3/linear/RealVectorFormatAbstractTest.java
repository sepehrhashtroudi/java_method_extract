public RealVectorFormatAbstractTest() { [EOL]     realVectorFormat = RealVectorFormat.getInstance(getLocale()); [EOL]     final NumberFormat nf = NumberFormat.getInstance(getLocale()); [EOL]     nf.setMaximumFractionDigits(2); [EOL]     realVectorFormatSquare = new RealVectorFormat("[", "]", " : ", nf); [EOL] } <line_num>: 38,43
protected abstract Locale getLocale(); <line_num>: 34,34
protected abstract char getDecimalCharacter(); <line_num>: 36,36
@Test [EOL] public void testSimpleNoDecimals() { [EOL]     ArrayRealVector c = new ArrayRealVector(new double[] { 1, 1, 1 }); [EOL]     String expected = "{1; 1; 1}"; [EOL]     String actual = realVectorFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 45,51
@Test [EOL] public void testSimpleWithDecimals() { [EOL]     ArrayRealVector c = new ArrayRealVector(new double[] { 1.23, 1.43, 1.63 }); [EOL]     String expected = "{1" + getDecimalCharacter() + "23; 1" + getDecimalCharacter() + "43; 1" + getDecimalCharacter() + "63}"; [EOL]     String actual = realVectorFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 53,63
@Test [EOL] public void testSimpleWithDecimalsTrunc() { [EOL]     ArrayRealVector c = new ArrayRealVector(new double[] { 1.232323232323, 1.43434343434343, 1.633333333333 }); [EOL]     String expected = "{1" + getDecimalCharacter() + "2323232323; 1" + getDecimalCharacter() + "4343434343; 1" + getDecimalCharacter() + "6333333333}"; [EOL]     String actual = realVectorFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 65,75
@Test [EOL] public void testNegativeX() { [EOL]     ArrayRealVector c = new ArrayRealVector(new double[] { -1.232323232323, 1.43, 1.63 }); [EOL]     String expected = "{-1" + getDecimalCharacter() + "2323232323; 1" + getDecimalCharacter() + "43; 1" + getDecimalCharacter() + "63}"; [EOL]     String actual = realVectorFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 77,87
@Test [EOL] public void testNegativeY() { [EOL]     ArrayRealVector c = new ArrayRealVector(new double[] { 1.23, -1.434343434343, 1.63 }); [EOL]     String expected = "{1" + getDecimalCharacter() + "23; -1" + getDecimalCharacter() + "4343434343; 1" + getDecimalCharacter() + "63}"; [EOL]     String actual = realVectorFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 89,99
@Test [EOL] public void testNegativeZ() { [EOL]     ArrayRealVector c = new ArrayRealVector(new double[] { 1.23, 1.43, -1.633333333333 }); [EOL]     String expected = "{1" + getDecimalCharacter() + "23; 1" + getDecimalCharacter() + "43; -1" + getDecimalCharacter() + "6333333333}"; [EOL]     String actual = realVectorFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 101,111
@Test [EOL] public void testNonDefaultSetting() { [EOL]     ArrayRealVector c = new ArrayRealVector(new double[] { 1, 1, 1 }); [EOL]     String expected = "[1 : 1 : 1]"; [EOL]     String actual = realVectorFormatSquare.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 113,119
@Test [EOL] public void testDefaultFormatRealVectorImpl() { [EOL]     Locale defaultLocal = Locale.getDefault(); [EOL]     Locale.setDefault(getLocale()); [EOL]     ArrayRealVector c = new ArrayRealVector(new double[] { 232.22222222222, -342.3333333333, 432.44444444444 }); [EOL]     String expected = "{232" + getDecimalCharacter() + "2222222222; -342" + getDecimalCharacter() + "3333333333; 432" + getDecimalCharacter() + "4444444444}"; [EOL]     String actual = (new RealVectorFormat()).format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL]     Locale.setDefault(defaultLocal); [EOL] } <line_num>: 121,136
@Test [EOL] public void testNan() { [EOL]     ArrayRealVector c = new ArrayRealVector(new double[] { Double.NaN, Double.NaN, Double.NaN }); [EOL]     String expected = "{(NaN); (NaN); (NaN)}"; [EOL]     String actual = realVectorFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 138,144
@Test [EOL] public void testPositiveInfinity() { [EOL]     ArrayRealVector c = new ArrayRealVector(new double[] { Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY }); [EOL]     String expected = "{(Infinity); (Infinity); (Infinity)}"; [EOL]     String actual = realVectorFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 146,154
@Test [EOL] public void tesNegativeInfinity() { [EOL]     ArrayRealVector c = new ArrayRealVector(new double[] { Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY }); [EOL]     String expected = "{(-Infinity); (-Infinity); (-Infinity)}"; [EOL]     String actual = realVectorFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 156,164
@Test [EOL] public void testParseSimpleNoDecimals() { [EOL]     String source = "{1; 1; 1}"; [EOL]     ArrayRealVector expected = new ArrayRealVector(new double[] { 1, 1, 1 }); [EOL]     ArrayRealVector actual = realVectorFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 166,172
@Test [EOL] public void testParseIgnoredWhitespace() { [EOL]     ArrayRealVector expected = new ArrayRealVector(new double[] { 1, 1, 1 }); [EOL]     ParsePosition pos1 = new ParsePosition(0); [EOL]     String source1 = "{1;1;1}"; [EOL]     Assert.assertEquals(expected, realVectorFormat.parse(source1, pos1)); [EOL]     Assert.assertEquals(source1.length(), pos1.getIndex()); [EOL]     ParsePosition pos2 = new ParsePosition(0); [EOL]     String source2 = " { 1 ; 1 ; 1 } "; [EOL]     Assert.assertEquals(expected, realVectorFormat.parse(source2, pos2)); [EOL]     Assert.assertEquals(source2.length() - 1, pos2.getIndex()); [EOL] } <line_num>: 174,185
@Test [EOL] public void testParseSimpleWithDecimals() { [EOL]     String source = "{1" + getDecimalCharacter() + "23; 1" + getDecimalCharacter() + "43; 1" + getDecimalCharacter() + "63}"; [EOL]     ArrayRealVector expected = new ArrayRealVector(new double[] { 1.23, 1.43, 1.63 }); [EOL]     ArrayRealVector actual = realVectorFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 187,197
@Test [EOL] public void testParseSimpleWithDecimalsTrunc() { [EOL]     String source = "{1" + getDecimalCharacter() + "2323; 1" + getDecimalCharacter() + "4343; 1" + getDecimalCharacter() + "6333}"; [EOL]     ArrayRealVector expected = new ArrayRealVector(new double[] { 1.2323, 1.4343, 1.6333 }); [EOL]     ArrayRealVector actual = realVectorFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 199,209
@Test [EOL] public void testParseNegativeX() { [EOL]     String source = "{-1" + getDecimalCharacter() + "2323; 1" + getDecimalCharacter() + "4343; 1" + getDecimalCharacter() + "6333}"; [EOL]     ArrayRealVector expected = new ArrayRealVector(new double[] { -1.2323, 1.4343, 1.6333 }); [EOL]     ArrayRealVector actual = realVectorFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 211,221
@Test [EOL] public void testParseNegativeY() { [EOL]     String source = "{1" + getDecimalCharacter() + "2323; -1" + getDecimalCharacter() + "4343; 1" + getDecimalCharacter() + "6333}"; [EOL]     ArrayRealVector expected = new ArrayRealVector(new double[] { 1.2323, -1.4343, 1.6333 }); [EOL]     ArrayRealVector actual = realVectorFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 223,233
@Test [EOL] public void testParseNegativeZ() { [EOL]     String source = "{1" + getDecimalCharacter() + "2323; 1" + getDecimalCharacter() + "4343; -1" + getDecimalCharacter() + "6333}"; [EOL]     ArrayRealVector expected = new ArrayRealVector(new double[] { 1.2323, 1.4343, -1.6333 }); [EOL]     ArrayRealVector actual = realVectorFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 235,245
@Test [EOL] public void testParseNegativeAll() { [EOL]     String source = "{-1" + getDecimalCharacter() + "2323; -1" + getDecimalCharacter() + "4343; -1" + getDecimalCharacter() + "6333}"; [EOL]     ArrayRealVector expected = new ArrayRealVector(new double[] { -1.2323, -1.4343, -1.6333 }); [EOL]     ArrayRealVector actual = realVectorFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 247,257
@Test [EOL] public void testParseZeroX() { [EOL]     String source = "{0" + getDecimalCharacter() + "0; -1" + getDecimalCharacter() + "4343; 1" + getDecimalCharacter() + "6333}"; [EOL]     ArrayRealVector expected = new ArrayRealVector(new double[] { 0.0, -1.4343, 1.6333 }); [EOL]     ArrayRealVector actual = realVectorFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 259,269
@Test [EOL] public void testParseNonDefaultSetting() { [EOL]     String source = "[1" + getDecimalCharacter() + "2323 : 1" + getDecimalCharacter() + "4343 : 1" + getDecimalCharacter() + "6333]"; [EOL]     ArrayRealVector expected = new ArrayRealVector(new double[] { 1.2323, 1.4343, 1.6333 }); [EOL]     ArrayRealVector actual = realVectorFormatSquare.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 271,281
@Test [EOL] public void testParseNan() { [EOL]     String source = "{(NaN); (NaN); (NaN)}"; [EOL]     ArrayRealVector actual = realVectorFormat.parse(source); [EOL]     Assert.assertEquals(new ArrayRealVector(new double[] { Double.NaN, Double.NaN, Double.NaN }), actual); [EOL] } <line_num>: 283,288
@Test [EOL] public void testParsePositiveInfinity() { [EOL]     String source = "{(Infinity); (Infinity); (Infinity)}"; [EOL]     ArrayRealVector actual = realVectorFormat.parse(source); [EOL]     Assert.assertEquals(new ArrayRealVector(new double[] { Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY }), actual); [EOL] } <line_num>: 290,297
@Test [EOL] public void testParseNegativeInfinity() { [EOL]     String source = "{(-Infinity); (-Infinity); (-Infinity)}"; [EOL]     ArrayRealVector actual = realVectorFormat.parse(source); [EOL]     Assert.assertEquals(new ArrayRealVector(new double[] { Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY }), actual); [EOL] } <line_num>: 299,306
@Test [EOL] public void testParseNoComponents() { [EOL]     try { [EOL]         realVectorFormat.parse("{ }"); [EOL]         Assert.fail("Expecting MathParseException"); [EOL]     } catch (MathParseException pe) { [EOL]     } [EOL] } <line_num>: 308,316
@Test [EOL] public void testParseManyComponents() { [EOL]     ArrayRealVector parsed = realVectorFormat.parse("{0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0}"); [EOL]     Assert.assertEquals(24, parsed.getDimension()); [EOL] } <line_num>: 318,322
@Test [EOL] public void testConstructorSingleFormat() { [EOL]     NumberFormat nf = NumberFormat.getInstance(); [EOL]     RealVectorFormat cf = new RealVectorFormat(nf); [EOL]     Assert.assertNotNull(cf); [EOL]     Assert.assertEquals(nf, cf.getFormat()); [EOL] } <line_num>: 324,330
@Test [EOL] public void testForgottenPrefix() { [EOL]     ParsePosition pos = new ParsePosition(0); [EOL]     final String source = "1; 1; 1}"; [EOL]     Assert.assertNull("Should not parse <" + source + ">", new RealVectorFormat().parse(source, pos)); [EOL]     Assert.assertEquals(0, pos.getErrorIndex()); [EOL] } <line_num>: 332,338
@Test [EOL] public void testForgottenSeparator() { [EOL]     ParsePosition pos = new ParsePosition(0); [EOL]     final String source = "{1; 1 1}"; [EOL]     Assert.assertNull("Should not parse <" + source + ">", new RealVectorFormat().parse(source, pos)); [EOL]     Assert.assertEquals(6, pos.getErrorIndex()); [EOL] } <line_num>: 340,346
@Test [EOL] public void testForgottenSuffix() { [EOL]     ParsePosition pos = new ParsePosition(0); [EOL]     final String source = "{1; 1; 1 "; [EOL]     Assert.assertNull("Should not parse <" + source + ">", new RealVectorFormat().parse(source, pos)); [EOL]     Assert.assertEquals(8, pos.getErrorIndex()); [EOL] } <line_num>: 348,354
