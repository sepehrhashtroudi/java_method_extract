@Override [EOL] public RealVector operate(final RealVector x) { [EOL]     if (x.getDimension() != n) { [EOL]         throw new DimensionMismatchException(x.getDimension(), n); [EOL]     } [EOL]     final double[] y = new double[n]; [EOL]     for (int i = 0; i < n; i++) { [EOL]         y[i] = (i + 1) * 1.1 / n * x.getEntry(i); [EOL]     } [EOL]     return new ArrayRealVector(y, false); [EOL] } <line_num>: 35,45
@Override [EOL] public int getRowDimension() { [EOL]     return n; [EOL] } <line_num>: 47,50
@Override [EOL] public int getColumnDimension() { [EOL]     return n; [EOL] } <line_num>: 52,55
@Override [EOL] public int getRowDimension() { [EOL]     return n; [EOL] } <line_num>: 62,65
@Override [EOL] public int getColumnDimension() { [EOL]     return n; [EOL] } <line_num>: 67,70
@Override [EOL] public RealVector operate(final RealVector x) { [EOL]     if (x.getDimension() != n) { [EOL]         throw new DimensionMismatchException(x.getDimension(), n); [EOL]     } [EOL]     final double[] y = new double[n]; [EOL]     for (int i = 0; i < n; i++) { [EOL]         double d = (i + 1) * 1.1 / n; [EOL]         d = FastMath.abs(d - shiftm); [EOL]         if (i % 10 == 0) { [EOL]             d += pertm; [EOL]         } [EOL]         y[i] = x.getEntry(i) / d; [EOL]     } [EOL]     return new ArrayRealVector(y, false); [EOL] } <line_num>: 72,88
public void saundersTest(final int n, final boolean goodb, final boolean precon, final double shift, final double pertbn) { [EOL]     final RealLinearOperator a = new RealLinearOperator() { [EOL]  [EOL]         @Override [EOL]         public RealVector operate(final RealVector x) { [EOL]             if (x.getDimension() != n) { [EOL]                 throw new DimensionMismatchException(x.getDimension(), n); [EOL]             } [EOL]             final double[] y = new double[n]; [EOL]             for (int i = 0; i < n; i++) { [EOL]                 y[i] = (i + 1) * 1.1 / n * x.getEntry(i); [EOL]             } [EOL]             return new ArrayRealVector(y, false); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int getRowDimension() { [EOL]             return n; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int getColumnDimension() { [EOL]             return n; [EOL]         } [EOL]     }; [EOL]     final double shiftm = shift; [EOL]     final double pertm = FastMath.abs(pertbn); [EOL]     final RealLinearOperator minv; [EOL]     if (precon) { [EOL]         minv = new RealLinearOperator() { [EOL]  [EOL]             @Override [EOL]             public int getRowDimension() { [EOL]                 return n; [EOL]             } [EOL]  [EOL]             @Override [EOL]             public int getColumnDimension() { [EOL]                 return n; [EOL]             } [EOL]  [EOL]             @Override [EOL]             public RealVector operate(final RealVector x) { [EOL]                 if (x.getDimension() != n) { [EOL]                     throw new DimensionMismatchException(x.getDimension(), n); [EOL]                 } [EOL]                 final double[] y = new double[n]; [EOL]                 for (int i = 0; i < n; i++) { [EOL]                     double d = (i + 1) * 1.1 / n; [EOL]                     d = FastMath.abs(d - shiftm); [EOL]                     if (i % 10 == 0) { [EOL]                         d += pertm; [EOL]                     } [EOL]                     y[i] = x.getEntry(i) / d; [EOL]                 } [EOL]                 return new ArrayRealVector(y, false); [EOL]             } [EOL]         }; [EOL]     } else { [EOL]         minv = null; [EOL]     } [EOL]     final RealVector xtrue = new ArrayRealVector(n); [EOL]     for (int i = 0; i < n; i++) { [EOL]         xtrue.setEntry(i, n - i); [EOL]     } [EOL]     final RealVector b = a.operate(xtrue); [EOL]     b.combineToSelf(1.0, -shift, xtrue); [EOL]     final SymmLQ solver = new SymmLQ(2 * n, 1E-12, true); [EOL]     final RealVector x = solver.solve(a, minv, b, goodb, shift); [EOL]     final RealVector y = a.operate(x); [EOL]     final RealVector r1 = new ArrayRealVector(n); [EOL]     for (int i = 0; i < n; i++) { [EOL]         final double bi = b.getEntry(i); [EOL]         final double yi = y.getEntry(i); [EOL]         final double xi = x.getEntry(i); [EOL]         r1.setEntry(i, bi - yi + shift * xi); [EOL]     } [EOL]     final double enorm = x.subtract(xtrue).getNorm() / xtrue.getNorm(); [EOL]     final double etol = 1E-5; [EOL]     Assert.assertTrue("enorm=" + enorm + ", " + solver.getIterationManager().getIterations(), enorm <= etol); [EOL] } <line_num>: 30,113
@Test [EOL] public void testSolveSaunders1() { [EOL]     saundersTest(1, false, false, 0., 0.); [EOL] } <line_num>: 115,118
@Test [EOL] public void testSolveSaunders2() { [EOL]     saundersTest(2, false, false, 0., 0.); [EOL] } <line_num>: 120,123
@Test [EOL] public void testSolveSaunders3() { [EOL]     saundersTest(1, false, true, 0., 0.); [EOL] } <line_num>: 125,128
@Test [EOL] public void testSolveSaunders4() { [EOL]     saundersTest(2, false, true, 0., 0.); [EOL] } <line_num>: 130,133
@Test [EOL] public void testSolveSaunders5() { [EOL]     saundersTest(5, false, true, 0., 0.); [EOL] } <line_num>: 135,138
@Test [EOL] public void testSolveSaunders6() { [EOL]     saundersTest(5, false, true, 0.25, 0.); [EOL] } <line_num>: 140,143
@Test [EOL] public void testSolveSaunders7() { [EOL]     saundersTest(50, false, false, 0., 0.); [EOL] } <line_num>: 145,148
@Test [EOL] public void testSolveSaunders8() { [EOL]     saundersTest(50, false, false, 0.25, 0.); [EOL] } <line_num>: 150,153
@Test [EOL] public void testSolveSaunders9() { [EOL]     saundersTest(50, false, true, 0., 0.10); [EOL] } <line_num>: 155,158
@Test [EOL] public void testSolveSaunders10() { [EOL]     saundersTest(50, false, true, 0.25, 0.10); [EOL] } <line_num>: 160,163
@Test [EOL] public void testSolveSaunders11() { [EOL]     saundersTest(1, true, false, 0., 0.); [EOL] } <line_num>: 165,168
@Test [EOL] public void testSolveSaunders12() { [EOL]     saundersTest(2, true, false, 0., 0.); [EOL] } <line_num>: 170,173
@Test [EOL] public void testSolveSaunders13() { [EOL]     saundersTest(1, true, true, 0., 0.); [EOL] } <line_num>: 175,178
@Test [EOL] public void testSolveSaunders14() { [EOL]     saundersTest(2, true, true, 0., 0.); [EOL] } <line_num>: 180,183
@Test [EOL] public void testSolveSaunders15() { [EOL]     saundersTest(5, true, true, 0., 0.); [EOL] } <line_num>: 185,188
@Test [EOL] public void testSolveSaunders16() { [EOL]     saundersTest(5, true, true, 0.25, 0.); [EOL] } <line_num>: 190,193
@Test [EOL] public void testSolveSaunders17() { [EOL]     saundersTest(50, true, false, 0., 0.); [EOL] } <line_num>: 195,198
@Test [EOL] public void testSolveSaunders18() { [EOL]     saundersTest(50, true, false, 0.25, 0.); [EOL] } <line_num>: 200,203
@Test [EOL] public void testSolveSaunders19() { [EOL]     saundersTest(50, true, true, 0., 0.10); [EOL] } <line_num>: 205,208
@Test [EOL] public void testSolveSaunders20() { [EOL]     saundersTest(50, true, true, 0.25, 0.10); [EOL] } <line_num>: 210,213
@Test(expected = NonSquareOperatorException.class) [EOL] public void testNonSquareOperator() { [EOL]     final Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 3); [EOL]     final IterativeLinearSolver solver; [EOL]     solver = new SymmLQ(10, 0., false); [EOL]     final ArrayRealVector b = new ArrayRealVector(a.getRowDimension()); [EOL]     final ArrayRealVector x = new ArrayRealVector(a.getColumnDimension()); [EOL]     solver.solve(a, b, x); [EOL] } <line_num>: 215,223
@Test(expected = DimensionMismatchException.class) [EOL] public void testDimensionMismatchRightHandSide() { [EOL]     final Array2DRowRealMatrix a = new Array2DRowRealMatrix(3, 3); [EOL]     final IterativeLinearSolver solver; [EOL]     solver = new SymmLQ(10, 0., false); [EOL]     final ArrayRealVector b = new ArrayRealVector(2); [EOL]     solver.solve(a, b); [EOL] } <line_num>: 225,232
@Test(expected = DimensionMismatchException.class) [EOL] public void testDimensionMismatchSolution() { [EOL]     final Array2DRowRealMatrix a = new Array2DRowRealMatrix(3, 3); [EOL]     final IterativeLinearSolver solver; [EOL]     solver = new SymmLQ(10, 0., false); [EOL]     final ArrayRealVector b = new ArrayRealVector(3); [EOL]     final ArrayRealVector x = new ArrayRealVector(2); [EOL]     solver.solve(a, b, x); [EOL] } <line_num>: 234,242
@Test [EOL] public void testUnpreconditionedSolution() { [EOL]     final int n = 5; [EOL]     final int maxIterations = 100; [EOL]     final RealLinearOperator a = new HilbertMatrix(n); [EOL]     final InverseHilbertMatrix ainv = new InverseHilbertMatrix(n); [EOL]     final IterativeLinearSolver solver; [EOL]     solver = new SymmLQ(maxIterations, 1E-10, true); [EOL]     final RealVector b = new ArrayRealVector(n); [EOL]     for (int j = 0; j < n; j++) { [EOL]         b.set(0.); [EOL]         b.setEntry(j, 1.); [EOL]         final RealVector x = solver.solve(a, b); [EOL]         for (int i = 0; i < n; i++) { [EOL]             final double actual = x.getEntry(i); [EOL]             final double expected = ainv.getEntry(i, j); [EOL]             final double delta = 1E-6 * Math.abs(expected); [EOL]             final String msg = String.format("entry[%d][%d]", i, j); [EOL]             Assert.assertEquals(msg, expected, actual, delta); [EOL]         } [EOL]     } [EOL] } <line_num>: 244,265
@Test [EOL] public void testUnpreconditionedInPlaceSolutionWithInitialGuess() { [EOL]     final int n = 5; [EOL]     final int maxIterations = 100; [EOL]     final RealLinearOperator a = new HilbertMatrix(n); [EOL]     final InverseHilbertMatrix ainv = new InverseHilbertMatrix(n); [EOL]     final IterativeLinearSolver solver; [EOL]     solver = new SymmLQ(maxIterations, 1E-10, true); [EOL]     final RealVector b = new ArrayRealVector(n); [EOL]     for (int j = 0; j < n; j++) { [EOL]         b.set(0.); [EOL]         b.setEntry(j, 1.); [EOL]         final RealVector x0 = new ArrayRealVector(n); [EOL]         x0.set(1.); [EOL]         final RealVector x = solver.solveInPlace(a, b, x0); [EOL]         Assert.assertSame("x should be a reference to x0", x0, x); [EOL]         for (int i = 0; i < n; i++) { [EOL]             final double actual = x.getEntry(i); [EOL]             final double expected = ainv.getEntry(i, j); [EOL]             final double delta = 1E-6 * Math.abs(expected); [EOL]             final String msg = String.format("entry[%d][%d)", i, j); [EOL]             Assert.assertEquals(msg, expected, actual, delta); [EOL]         } [EOL]     } [EOL] } <line_num>: 267,291
@Test [EOL] public void testUnpreconditionedSolutionWithInitialGuess() { [EOL]     final int n = 5; [EOL]     final int maxIterations = 100; [EOL]     final RealLinearOperator a = new HilbertMatrix(n); [EOL]     final InverseHilbertMatrix ainv = new InverseHilbertMatrix(n); [EOL]     final IterativeLinearSolver solver; [EOL]     solver = new SymmLQ(maxIterations, 1E-10, true); [EOL]     final RealVector b = new ArrayRealVector(n); [EOL]     for (int j = 0; j < n; j++) { [EOL]         b.set(0.); [EOL]         b.setEntry(j, 1.); [EOL]         final RealVector x0 = new ArrayRealVector(n); [EOL]         x0.set(1.); [EOL]         final RealVector x = solver.solve(a, b, x0); [EOL]         Assert.assertNotSame("x should not be a reference to x0", x0, x); [EOL]         for (int i = 0; i < n; i++) { [EOL]             final double actual = x.getEntry(i); [EOL]             final double expected = ainv.getEntry(i, j); [EOL]             final double delta = 1E-6 * Math.abs(expected); [EOL]             final String msg = String.format("entry[%d][%d]", i, j); [EOL]             Assert.assertEquals(msg, expected, actual, delta); [EOL]             Assert.assertEquals(msg, x0.getEntry(i), 1., Math.ulp(1.)); [EOL]         } [EOL]     } [EOL] } <line_num>: 293,318
@Override [EOL] public RealVector operate(final RealVector x) { [EOL]     throw new UnsupportedOperationException(); [EOL] } <line_num>: 325,328
@Override [EOL] public int getRowDimension() { [EOL]     return 2; [EOL] } <line_num>: 330,333
@Override [EOL] public int getColumnDimension() { [EOL]     return 3; [EOL] } <line_num>: 335,338
@Test(expected = NonSquareOperatorException.class) [EOL] public void testNonSquarePreconditioner() { [EOL]     final Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 2); [EOL]     final RealLinearOperator m = new RealLinearOperator() { [EOL]  [EOL]         @Override [EOL]         public RealVector operate(final RealVector x) { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int getRowDimension() { [EOL]             return 2; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int getColumnDimension() { [EOL]             return 3; [EOL]         } [EOL]     }; [EOL]     final PreconditionedIterativeLinearSolver solver; [EOL]     solver = new SymmLQ(10, 0., false); [EOL]     final ArrayRealVector b = new ArrayRealVector(a.getRowDimension()); [EOL]     solver.solve(a, m, b); [EOL] } <line_num>: 320,344
@Override [EOL] public RealVector operate(final RealVector x) { [EOL]     throw new UnsupportedOperationException(); [EOL] } <line_num>: 351,354
@Override [EOL] public int getRowDimension() { [EOL]     return 3; [EOL] } <line_num>: 356,359
@Override [EOL] public int getColumnDimension() { [EOL]     return 3; [EOL] } <line_num>: 361,364
@Test(expected = DimensionMismatchException.class) [EOL] public void testMismatchedOperatorDimensions() { [EOL]     final Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 2); [EOL]     final RealLinearOperator m = new RealLinearOperator() { [EOL]  [EOL]         @Override [EOL]         public RealVector operate(final RealVector x) { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int getRowDimension() { [EOL]             return 3; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int getColumnDimension() { [EOL]             return 3; [EOL]         } [EOL]     }; [EOL]     final PreconditionedIterativeLinearSolver solver; [EOL]     solver = new SymmLQ(10, 0d, false); [EOL]     final ArrayRealVector b = new ArrayRealVector(a.getRowDimension()); [EOL]     solver.solve(a, m, b); [EOL] } <line_num>: 346,370
@Override [EOL] public RealVector operate(final RealVector x) { [EOL]     final ArrayRealVector y = new ArrayRealVector(2); [EOL]     y.setEntry(0, -x.getEntry(0)); [EOL]     y.setEntry(1, -x.getEntry(1)); [EOL]     return y; [EOL] } <line_num>: 381,387
@Override [EOL] public int getRowDimension() { [EOL]     return 2; [EOL] } <line_num>: 389,392
@Override [EOL] public int getColumnDimension() { [EOL]     return 2; [EOL] } <line_num>: 394,397
@Test(expected = NonPositiveDefiniteOperatorException.class) [EOL] public void testNonPositiveDefinitePreconditioner() { [EOL]     final Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 2); [EOL]     a.setEntry(0, 0, 1d); [EOL]     a.setEntry(0, 1, 2d); [EOL]     a.setEntry(1, 0, 3d); [EOL]     a.setEntry(1, 1, 4d); [EOL]     final RealLinearOperator m = new RealLinearOperator() { [EOL]  [EOL]         @Override [EOL]         public RealVector operate(final RealVector x) { [EOL]             final ArrayRealVector y = new ArrayRealVector(2); [EOL]             y.setEntry(0, -x.getEntry(0)); [EOL]             y.setEntry(1, -x.getEntry(1)); [EOL]             return y; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int getRowDimension() { [EOL]             return 2; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int getColumnDimension() { [EOL]             return 2; [EOL]         } [EOL]     }; [EOL]     final PreconditionedIterativeLinearSolver solver; [EOL]     solver = new SymmLQ(10, 0d, true); [EOL]     final ArrayRealVector b = new ArrayRealVector(2); [EOL]     b.setEntry(0, -1d); [EOL]     b.setEntry(1, -1d); [EOL]     solver.solve(a, m, b); [EOL] } <line_num>: 372,405
@Test [EOL] public void testPreconditionedSolution() { [EOL]     final int n = 8; [EOL]     final int maxIterations = 100; [EOL]     final RealLinearOperator a = new HilbertMatrix(n); [EOL]     final InverseHilbertMatrix ainv = new InverseHilbertMatrix(n); [EOL]     final RealLinearOperator m = JacobiPreconditioner.create(a); [EOL]     final PreconditionedIterativeLinearSolver solver; [EOL]     solver = new SymmLQ(maxIterations, 1E-15, true); [EOL]     final RealVector b = new ArrayRealVector(n); [EOL]     for (int j = 0; j < n; j++) { [EOL]         b.set(0.); [EOL]         b.setEntry(j, 1.); [EOL]         final RealVector x = solver.solve(a, m, b); [EOL]         for (int i = 0; i < n; i++) { [EOL]             final double actual = x.getEntry(i); [EOL]             final double expected = ainv.getEntry(i, j); [EOL]             final double delta = 1E-6 * Math.abs(expected); [EOL]             final String msg = String.format("coefficient (%d, %d)", i, j); [EOL]             Assert.assertEquals(msg, expected, actual, delta); [EOL]         } [EOL]     } [EOL] } <line_num>: 407,429
@Test [EOL] public void testPreconditionedSolution2() { [EOL]     final int n = 100; [EOL]     final int maxIterations = 100000; [EOL]     final Array2DRowRealMatrix a = new Array2DRowRealMatrix(n, n); [EOL]     double daux = 1.; [EOL]     for (int i = 0; i < n; i++) { [EOL]         a.setEntry(i, i, daux); [EOL]         daux *= 1.2; [EOL]         for (int j = i + 1; j < n; j++) { [EOL]             if (i == j) { [EOL]             } else { [EOL]                 final double value = 1.0; [EOL]                 a.setEntry(i, j, value); [EOL]                 a.setEntry(j, i, value); [EOL]             } [EOL]         } [EOL]     } [EOL]     final RealLinearOperator m = JacobiPreconditioner.create(a); [EOL]     final PreconditionedIterativeLinearSolver prec; [EOL]     final IterativeLinearSolver unprec; [EOL]     prec = new SymmLQ(maxIterations, 1E-15, true); [EOL]     unprec = new SymmLQ(maxIterations, 1E-15, true); [EOL]     final RealVector b = new ArrayRealVector(n); [EOL]     final String pattern = "preconditioned SymmLQ (%d iterations) should" + " have been faster than unpreconditioned (%d iterations)"; [EOL]     String msg; [EOL]     for (int j = 0; j < 1; j++) { [EOL]         b.set(0.); [EOL]         b.setEntry(j, 1.); [EOL]         final RealVector px = prec.solve(a, m, b); [EOL]         final RealVector x = unprec.solve(a, b); [EOL]         final int np = prec.getIterationManager().getIterations(); [EOL]         final int nup = unprec.getIterationManager().getIterations(); [EOL]         msg = String.format(pattern, np, nup); [EOL]         for (int i = 0; i < n; i++) { [EOL]             msg = String.format("row %d, column %d", i, j); [EOL]             final double expected = x.getEntry(i); [EOL]             final double actual = px.getEntry(i); [EOL]             final double delta = 5E-5 * Math.abs(expected); [EOL]             Assert.assertEquals(msg, expected, actual, delta); [EOL]         } [EOL]     } [EOL] } <line_num>: 431,474
public void initializationPerformed(final IterationEvent e) { [EOL]     ++count[0]; [EOL] } <line_num>: 492,494
public void iterationPerformed(final IterationEvent e) { [EOL]     ++count[2]; [EOL]     Assert.assertEquals("iteration performed", count[2], e.getIterations() - 1); [EOL] } <line_num>: 496,501
public void iterationStarted(final IterationEvent e) { [EOL]     ++count[1]; [EOL]     Assert.assertEquals("iteration started", count[1], e.getIterations() - 1); [EOL] } <line_num>: 503,508
public void terminationPerformed(final IterationEvent e) { [EOL]     ++count[3]; [EOL]     final IterativeLinearSolverEvent ilse; [EOL]     ilse = (IterativeLinearSolverEvent) e; [EOL]     xFromListener.setSubVector(0, ilse.getSolution()); [EOL] } <line_num>: 510,515
@Test [EOL] public void testEventManagement() { [EOL]     final int n = 5; [EOL]     final int maxIterations = 100; [EOL]     final RealLinearOperator a = new HilbertMatrix(n); [EOL]     final IterativeLinearSolver solver; [EOL]     final int[] count = new int[] { 0, 0, 0, 0 }; [EOL]     final RealVector xFromListener = new ArrayRealVector(n); [EOL]     final IterationListener listener = new IterationListener() { [EOL]  [EOL]         public void initializationPerformed(final IterationEvent e) { [EOL]             ++count[0]; [EOL]         } [EOL]  [EOL]         public void iterationPerformed(final IterationEvent e) { [EOL]             ++count[2]; [EOL]             Assert.assertEquals("iteration performed", count[2], e.getIterations() - 1); [EOL]         } [EOL]  [EOL]         public void iterationStarted(final IterationEvent e) { [EOL]             ++count[1]; [EOL]             Assert.assertEquals("iteration started", count[1], e.getIterations() - 1); [EOL]         } [EOL]  [EOL]         public void terminationPerformed(final IterationEvent e) { [EOL]             ++count[3]; [EOL]             final IterativeLinearSolverEvent ilse; [EOL]             ilse = (IterativeLinearSolverEvent) e; [EOL]             xFromListener.setSubVector(0, ilse.getSolution()); [EOL]         } [EOL]     }; [EOL]     solver = new SymmLQ(maxIterations, 1E-10, true); [EOL]     solver.getIterationManager().addIterationListener(listener); [EOL]     final RealVector b = new ArrayRealVector(n); [EOL]     for (int j = 0; j < n; j++) { [EOL]         Arrays.fill(count, 0); [EOL]         b.set(0.); [EOL]         b.setEntry(j, 1.); [EOL]         final RealVector xFromSolver = solver.solve(a, b); [EOL]         String msg = String.format("column %d (initialization)", j); [EOL]         Assert.assertEquals(msg, 1, count[0]); [EOL]         msg = String.format("column %d (finalization)", j); [EOL]         Assert.assertEquals(msg, 1, count[3]); [EOL]         for (int i = 0; i < n; i++) { [EOL]             msg = String.format("row %d, column %d", i, j); [EOL]             final double expected = xFromSolver.getEntry(i); [EOL]             final double actual = xFromListener.getEntry(i); [EOL]             Assert.assertEquals(msg, expected, actual, 0.0); [EOL]         } [EOL]     } [EOL] } <line_num>: 476,541
@Test(expected = NonSelfAdjointOperatorException.class) [EOL] public void testNonSelfAdjointOperator() { [EOL]     final RealLinearOperator a; [EOL]     a = new Array2DRowRealMatrix(new double[][] { { 1., 2., 3. }, { 2., 4., 5. }, { 2.999, 5., 6. } }); [EOL]     final RealVector b; [EOL]     b = new ArrayRealVector(new double[] { 1., 1., 1. }); [EOL]     new SymmLQ(100, 1., true).solve(a, b); [EOL] } <line_num>: 543,554
@Override [EOL] public RealVector operate(final RealVector x) { [EOL]     return mSolver.solve(x); [EOL] } <line_num>: 573,576
@Override [EOL] public int getRowDimension() { [EOL]     return mMat.getRowDimension(); [EOL] } <line_num>: 578,581
@Override [EOL] public int getColumnDimension() { [EOL]     return mMat.getColumnDimension(); [EOL] } <line_num>: 583,586
@Test(expected = NonSelfAdjointOperatorException.class) [EOL] public void testNonSelfAdjointPreconditioner() { [EOL]     final RealLinearOperator a = new Array2DRowRealMatrix(new double[][] { { 1., 2., 3. }, { 2., 4., 5. }, { 3., 5., 6. } }); [EOL]     final Array2DRowRealMatrix mMat; [EOL]     mMat = new Array2DRowRealMatrix(new double[][] { { 1., 0., 1. }, { 0., 1., 0. }, { 0., 0., 1. } }); [EOL]     final DecompositionSolver mSolver; [EOL]     mSolver = new LUDecomposition(mMat).getSolver(); [EOL]     final RealLinearOperator minv = new RealLinearOperator() { [EOL]  [EOL]         @Override [EOL]         public RealVector operate(final RealVector x) { [EOL]             return mSolver.solve(x); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int getRowDimension() { [EOL]             return mMat.getRowDimension(); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int getColumnDimension() { [EOL]             return mMat.getColumnDimension(); [EOL]         } [EOL]     }; [EOL]     final RealVector b = new ArrayRealVector(new double[] { 1., 1., 1. }); [EOL]     new SymmLQ(100, 1., true).solve(a, minv, b); [EOL] } <line_num>: 556,592
private void doTestNormOfResidual(final IterationEvent e) { [EOL]     final IterativeLinearSolverEvent evt; [EOL]     evt = (IterativeLinearSolverEvent) e; [EOL]     final RealVector x = evt.getSolution(); [EOL]     final RealVector b = evt.getRightHandSideVector(); [EOL]     final RealVector r = b.subtract(a.operate(x)); [EOL]     final double rnorm = r.getNorm(); [EOL]     Assert.assertEquals("iteration performed (residual)", rnorm, evt.getNormOfResidual(), FastMath.max(1E-5 * rnorm, 1E-10)); [EOL] } <line_num>: 602,612
public void initializationPerformed(final IterationEvent e) { [EOL]     doTestNormOfResidual(e); [EOL] } <line_num>: 614,616
public void iterationPerformed(final IterationEvent e) { [EOL]     doTestNormOfResidual(e); [EOL] } <line_num>: 618,620
public void iterationStarted(final IterationEvent e) { [EOL]     doTestNormOfResidual(e); [EOL] } <line_num>: 622,624
public void terminationPerformed(final IterationEvent e) { [EOL]     doTestNormOfResidual(e); [EOL] } <line_num>: 626,628
@Test [EOL] public void testUnpreconditionedNormOfResidual() { [EOL]     final int n = 5; [EOL]     final int maxIterations = 100; [EOL]     final RealLinearOperator a = new HilbertMatrix(n); [EOL]     final IterativeLinearSolver solver; [EOL]     final IterationListener listener = new IterationListener() { [EOL]  [EOL]         private void doTestNormOfResidual(final IterationEvent e) { [EOL]             final IterativeLinearSolverEvent evt; [EOL]             evt = (IterativeLinearSolverEvent) e; [EOL]             final RealVector x = evt.getSolution(); [EOL]             final RealVector b = evt.getRightHandSideVector(); [EOL]             final RealVector r = b.subtract(a.operate(x)); [EOL]             final double rnorm = r.getNorm(); [EOL]             Assert.assertEquals("iteration performed (residual)", rnorm, evt.getNormOfResidual(), FastMath.max(1E-5 * rnorm, 1E-10)); [EOL]         } [EOL]  [EOL]         public void initializationPerformed(final IterationEvent e) { [EOL]             doTestNormOfResidual(e); [EOL]         } [EOL]  [EOL]         public void iterationPerformed(final IterationEvent e) { [EOL]             doTestNormOfResidual(e); [EOL]         } [EOL]  [EOL]         public void iterationStarted(final IterationEvent e) { [EOL]             doTestNormOfResidual(e); [EOL]         } [EOL]  [EOL]         public void terminationPerformed(final IterationEvent e) { [EOL]             doTestNormOfResidual(e); [EOL]         } [EOL]     }; [EOL]     solver = new SymmLQ(maxIterations, 1E-10, true); [EOL]     solver.getIterationManager().addIterationListener(listener); [EOL]     final RealVector b = new ArrayRealVector(n); [EOL]     for (int j = 0; j < n; j++) { [EOL]         b.set(0.); [EOL]         b.setEntry(j, 1.); [EOL]         solver.solve(a, b); [EOL]     } [EOL] } <line_num>: 594,638
private void doTestNormOfResidual(final IterationEvent e) { [EOL]     final IterativeLinearSolverEvent evt; [EOL]     evt = (IterativeLinearSolverEvent) e; [EOL]     final RealVector x = evt.getSolution(); [EOL]     final RealVector b = evt.getRightHandSideVector(); [EOL]     final RealVector r = b.subtract(a.operate(x)); [EOL]     final double rnorm = p.operate(r).getNorm(); [EOL]     Assert.assertEquals("iteration performed (residual)", rnorm, evt.getNormOfResidual(), FastMath.max(1E-5 * rnorm, 1E-10)); [EOL] } <line_num>: 650,660
public void initializationPerformed(final IterationEvent e) { [EOL]     doTestNormOfResidual(e); [EOL] } <line_num>: 662,664
public void iterationPerformed(final IterationEvent e) { [EOL]     doTestNormOfResidual(e); [EOL] } <line_num>: 666,668
public void iterationStarted(final IterationEvent e) { [EOL]     doTestNormOfResidual(e); [EOL] } <line_num>: 670,672
public void terminationPerformed(final IterationEvent e) { [EOL]     doTestNormOfResidual(e); [EOL] } <line_num>: 674,676
@Test [EOL] public void testPreconditionedNormOfResidual() { [EOL]     final int n = 5; [EOL]     final int maxIterations = 100; [EOL]     final RealLinearOperator a = new HilbertMatrix(n); [EOL]     final JacobiPreconditioner m = JacobiPreconditioner.create(a); [EOL]     final RealLinearOperator p = m.sqrt(); [EOL]     final PreconditionedIterativeLinearSolver solver; [EOL]     final IterationListener listener = new IterationListener() { [EOL]  [EOL]         private void doTestNormOfResidual(final IterationEvent e) { [EOL]             final IterativeLinearSolverEvent evt; [EOL]             evt = (IterativeLinearSolverEvent) e; [EOL]             final RealVector x = evt.getSolution(); [EOL]             final RealVector b = evt.getRightHandSideVector(); [EOL]             final RealVector r = b.subtract(a.operate(x)); [EOL]             final double rnorm = p.operate(r).getNorm(); [EOL]             Assert.assertEquals("iteration performed (residual)", rnorm, evt.getNormOfResidual(), FastMath.max(1E-5 * rnorm, 1E-10)); [EOL]         } [EOL]  [EOL]         public void initializationPerformed(final IterationEvent e) { [EOL]             doTestNormOfResidual(e); [EOL]         } [EOL]  [EOL]         public void iterationPerformed(final IterationEvent e) { [EOL]             doTestNormOfResidual(e); [EOL]         } [EOL]  [EOL]         public void iterationStarted(final IterationEvent e) { [EOL]             doTestNormOfResidual(e); [EOL]         } [EOL]  [EOL]         public void terminationPerformed(final IterationEvent e) { [EOL]             doTestNormOfResidual(e); [EOL]         } [EOL]     }; [EOL]     solver = new SymmLQ(maxIterations, 1E-10, true); [EOL]     solver.getIterationManager().addIterationListener(listener); [EOL]     final RealVector b = new ArrayRealVector(n); [EOL]     for (int j = 0; j < n; j++) { [EOL]         b.set(0.); [EOL]         b.setEntry(j, 1.); [EOL]         solver.solve(a, m, b); [EOL]     } [EOL] } <line_num>: 640,686
