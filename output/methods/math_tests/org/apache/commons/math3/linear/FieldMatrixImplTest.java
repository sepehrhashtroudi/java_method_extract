public SetVisitor() { [EOL]     super(Fraction.ZERO); [EOL] } <line_num>: 1064,1066
public GetVisitor() { [EOL]     super(Fraction.ZERO); [EOL]     count = 0; [EOL] } <line_num>: 1075,1078
@Test [EOL] public void testDimensions() { [EOL]     Array2DRowFieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData); [EOL]     Array2DRowFieldMatrix<Fraction> m2 = new Array2DRowFieldMatrix<Fraction>(testData2); [EOL]     Assert.assertEquals("testData row dimension", 3, m.getRowDimension()); [EOL]     Assert.assertEquals("testData column dimension", 3, m.getColumnDimension()); [EOL]     Assert.assertTrue("testData is square", m.isSquare()); [EOL]     Assert.assertEquals("testData2 row dimension", m2.getRowDimension(), 2); [EOL]     Assert.assertEquals("testData2 column dimension", m2.getColumnDimension(), 3); [EOL]     Assert.assertTrue("testData2 is not square", !m2.isSquare()); [EOL] } <line_num>: 103,113
@Test [EOL] public void testCopyFunctions() { [EOL]     Array2DRowFieldMatrix<Fraction> m1 = new Array2DRowFieldMatrix<Fraction>(testData); [EOL]     Array2DRowFieldMatrix<Fraction> m2 = new Array2DRowFieldMatrix<Fraction>(m1.getData()); [EOL]     Assert.assertEquals(m2, m1); [EOL]     Array2DRowFieldMatrix<Fraction> m3 = new Array2DRowFieldMatrix<Fraction>(testData); [EOL]     Array2DRowFieldMatrix<Fraction> m4 = new Array2DRowFieldMatrix<Fraction>(m3.getData(), false); [EOL]     Assert.assertEquals(m4, m3); [EOL] } <line_num>: 116,124
@Test [EOL] public void testAdd() { [EOL]     Array2DRowFieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData); [EOL]     Array2DRowFieldMatrix<Fraction> mInv = new Array2DRowFieldMatrix<Fraction>(testDataInv); [EOL]     FieldMatrix<Fraction> mPlusMInv = m.add(mInv); [EOL]     Fraction[][] sumEntries = mPlusMInv.getData(); [EOL]     for (int row = 0; row < m.getRowDimension(); row++) { [EOL]         for (int col = 0; col < m.getColumnDimension(); col++) { [EOL]             Assert.assertEquals(testDataPlusInv[row][col], sumEntries[row][col]); [EOL]         } [EOL]     } [EOL] } <line_num>: 127,138
@Test [EOL] public void testAddFail() { [EOL]     Array2DRowFieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData); [EOL]     Array2DRowFieldMatrix<Fraction> m2 = new Array2DRowFieldMatrix<Fraction>(testData2); [EOL]     try { [EOL]         m.add(m2); [EOL]         Assert.fail("MathIllegalArgumentException expected"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 141,151
@Test [EOL] public void testPlusMinus() { [EOL]     Array2DRowFieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData); [EOL]     Array2DRowFieldMatrix<Fraction> m2 = new Array2DRowFieldMatrix<Fraction>(testDataInv); [EOL]     TestUtils.assertEquals(m.subtract(m2), m2.scalarMultiply(new Fraction(-1)).add(m)); [EOL]     try { [EOL]         m.subtract(new Array2DRowFieldMatrix<Fraction>(testData2)); [EOL]         Assert.fail("Expecting illegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 154,165
@Test [EOL] public void testMultiply() { [EOL]     Array2DRowFieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData); [EOL]     Array2DRowFieldMatrix<Fraction> mInv = new Array2DRowFieldMatrix<Fraction>(testDataInv); [EOL]     Array2DRowFieldMatrix<Fraction> identity = new Array2DRowFieldMatrix<Fraction>(id); [EOL]     Array2DRowFieldMatrix<Fraction> m2 = new Array2DRowFieldMatrix<Fraction>(testData2); [EOL]     TestUtils.assertEquals(m.multiply(mInv), identity); [EOL]     TestUtils.assertEquals(mInv.multiply(m), identity); [EOL]     TestUtils.assertEquals(m.multiply(identity), m); [EOL]     TestUtils.assertEquals(identity.multiply(mInv), mInv); [EOL]     TestUtils.assertEquals(m2.multiply(identity), m2); [EOL]     try { [EOL]         m.multiply(new Array2DRowFieldMatrix<Fraction>(bigSingular)); [EOL]         Assert.fail("Expecting illegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 168,185
@Test [EOL] public void testMultiply2() { [EOL]     FieldMatrix<Fraction> m3 = new Array2DRowFieldMatrix<Fraction>(d3); [EOL]     FieldMatrix<Fraction> m4 = new Array2DRowFieldMatrix<Fraction>(d4); [EOL]     FieldMatrix<Fraction> m5 = new Array2DRowFieldMatrix<Fraction>(d5); [EOL]     TestUtils.assertEquals(m3.multiply(m4), m5); [EOL] } <line_num>: 193,199
@Test [EOL] public void testPower() { [EOL]     FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData); [EOL]     FieldMatrix<Fraction> mInv = new Array2DRowFieldMatrix<Fraction>(testDataInv); [EOL]     FieldMatrix<Fraction> mPlusInv = new Array2DRowFieldMatrix<Fraction>(testDataPlusInv); [EOL]     FieldMatrix<Fraction> identity = new Array2DRowFieldMatrix<Fraction>(id); [EOL]     TestUtils.assertEquals(m.power(0), identity); [EOL]     TestUtils.assertEquals(mInv.power(0), identity); [EOL]     TestUtils.assertEquals(mPlusInv.power(0), identity); [EOL]     TestUtils.assertEquals(m.power(1), m); [EOL]     TestUtils.assertEquals(mInv.power(1), mInv); [EOL]     TestUtils.assertEquals(mPlusInv.power(1), mPlusInv); [EOL]     FieldMatrix<Fraction> C1 = m.copy(); [EOL]     FieldMatrix<Fraction> C2 = mInv.copy(); [EOL]     FieldMatrix<Fraction> C3 = mPlusInv.copy(); [EOL]     for (int i = 2; i <= 5; ++i) { [EOL]         C1 = C1.multiply(m); [EOL]         C2 = C2.multiply(mInv); [EOL]         C3 = C3.multiply(mPlusInv); [EOL]         TestUtils.assertEquals(m.power(i), C1); [EOL]         TestUtils.assertEquals(mInv.power(i), C2); [EOL]         TestUtils.assertEquals(mPlusInv.power(i), C3); [EOL]     } [EOL]     try { [EOL]         FieldMatrix<Fraction> mNotSquare = new Array2DRowFieldMatrix<Fraction>(testData2T); [EOL]         mNotSquare.power(2); [EOL]         Assert.fail("Expecting NonSquareMatrixException"); [EOL]     } catch (NonSquareMatrixException ex) { [EOL]     } [EOL]     try { [EOL]         m.power(-1); [EOL]         Assert.fail("Expecting IllegalArgumentException"); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 201,245
@Test [EOL] public void testTrace() { [EOL]     FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(id); [EOL]     Assert.assertEquals("identity trace", new Fraction(3), m.getTrace()); [EOL]     m = new Array2DRowFieldMatrix<Fraction>(testData2); [EOL]     try { [EOL]         m.getTrace(); [EOL]         Assert.fail("Expecting NonSquareMatrixException"); [EOL]     } catch (NonSquareMatrixException ex) { [EOL]     } [EOL] } <line_num>: 248,259
@Test [EOL] public void testScalarAdd() { [EOL]     FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData); [EOL]     TestUtils.assertEquals(new Array2DRowFieldMatrix<Fraction>(testDataPlus2), m.scalarAdd(new Fraction(2))); [EOL] } <line_num>: 262,266
@Test [EOL] public void testOperate() { [EOL]     FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(id); [EOL]     TestUtils.assertEquals(testVector, m.operate(testVector)); [EOL]     TestUtils.assertEquals(testVector, m.operate(new ArrayFieldVector<Fraction>(testVector)).getData()); [EOL]     m = new Array2DRowFieldMatrix<Fraction>(bigSingular); [EOL]     try { [EOL]         m.operate(testVector); [EOL]         Assert.fail("Expecting illegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 269,281
@Test [EOL] public void testMath209() { [EOL]     FieldMatrix<Fraction> a = new Array2DRowFieldMatrix<Fraction>(new Fraction[][] { { new Fraction(1), new Fraction(2) }, { new Fraction(3), new Fraction(4) }, { new Fraction(5), new Fraction(6) } }, false); [EOL]     Fraction[] b = a.operate(new Fraction[] { new Fraction(1), new Fraction(1) }); [EOL]     Assert.assertEquals(a.getRowDimension(), b.length); [EOL]     Assert.assertEquals(new Fraction(3), b[0]); [EOL]     Assert.assertEquals(new Fraction(7), b[1]); [EOL]     Assert.assertEquals(new Fraction(11), b[2]); [EOL] } <line_num>: 284,294
@Test [EOL] public void testTranspose() { [EOL]     FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData); [EOL]     FieldMatrix<Fraction> mIT = new FieldLUDecomposition<Fraction>(m).getSolver().getInverse().transpose(); [EOL]     FieldMatrix<Fraction> mTI = new FieldLUDecomposition<Fraction>(m.transpose()).getSolver().getInverse(); [EOL]     TestUtils.assertEquals(mIT, mTI); [EOL]     m = new Array2DRowFieldMatrix<Fraction>(testData2); [EOL]     FieldMatrix<Fraction> mt = new Array2DRowFieldMatrix<Fraction>(testData2T); [EOL]     TestUtils.assertEquals(mt, m.transpose()); [EOL] } <line_num>: 297,306
@Test [EOL] public void testPremultiplyVector() { [EOL]     FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData); [EOL]     TestUtils.assertEquals(m.preMultiply(testVector), preMultTest); [EOL]     TestUtils.assertEquals(m.preMultiply(new ArrayFieldVector<Fraction>(testVector).getData()), preMultTest); [EOL]     m = new Array2DRowFieldMatrix<Fraction>(bigSingular); [EOL]     try { [EOL]         m.preMultiply(testVector); [EOL]         Assert.fail("expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 309,322
@Test [EOL] public void testPremultiply() { [EOL]     FieldMatrix<Fraction> m3 = new Array2DRowFieldMatrix<Fraction>(d3); [EOL]     FieldMatrix<Fraction> m4 = new Array2DRowFieldMatrix<Fraction>(d4); [EOL]     FieldMatrix<Fraction> m5 = new Array2DRowFieldMatrix<Fraction>(d5); [EOL]     TestUtils.assertEquals(m4.preMultiply(m3), m5); [EOL]     Array2DRowFieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData); [EOL]     Array2DRowFieldMatrix<Fraction> mInv = new Array2DRowFieldMatrix<Fraction>(testDataInv); [EOL]     Array2DRowFieldMatrix<Fraction> identity = new Array2DRowFieldMatrix<Fraction>(id); [EOL]     TestUtils.assertEquals(m.preMultiply(mInv), identity); [EOL]     TestUtils.assertEquals(mInv.preMultiply(m), identity); [EOL]     TestUtils.assertEquals(m.preMultiply(identity), m); [EOL]     TestUtils.assertEquals(identity.preMultiply(mInv), mInv); [EOL]     try { [EOL]         m.preMultiply(new Array2DRowFieldMatrix<Fraction>(bigSingular)); [EOL]         Assert.fail("Expecting illegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 324,344
@Test [EOL] public void testGetVectors() { [EOL]     FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData); [EOL]     TestUtils.assertEquals(m.getRow(0), testDataRow1); [EOL]     TestUtils.assertEquals(m.getColumn(2), testDataCol3); [EOL]     try { [EOL]         m.getRow(10); [EOL]         Assert.fail("expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.getColumn(-1); [EOL]         Assert.fail("expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 346,363
@Test [EOL] public void testGetEntry() { [EOL]     FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData); [EOL]     Assert.assertEquals("get entry", m.getEntry(0, 1), new Fraction(2)); [EOL]     try { [EOL]         m.getEntry(10, 4); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 365,375
@Test [EOL] public void testExamples() { [EOL]     Fraction[][] matrixData = { { new Fraction(1), new Fraction(2), new Fraction(3) }, { new Fraction(2), new Fraction(5), new Fraction(3) } }; [EOL]     FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(matrixData); [EOL]     Fraction[][] matrixData2 = { { new Fraction(1), new Fraction(2) }, { new Fraction(2), new Fraction(5) }, { new Fraction(1), new Fraction(7) } }; [EOL]     FieldMatrix<Fraction> n = new Array2DRowFieldMatrix<Fraction>(matrixData2); [EOL]     FieldMatrix<Fraction> p = m.multiply(n); [EOL]     Assert.assertEquals(2, p.getRowDimension()); [EOL]     Assert.assertEquals(2, p.getColumnDimension()); [EOL]     FieldMatrix<Fraction> pInverse = new FieldLUDecomposition<Fraction>(p).getSolver().getInverse(); [EOL]     Assert.assertEquals(2, pInverse.getRowDimension()); [EOL]     Assert.assertEquals(2, pInverse.getColumnDimension()); [EOL]     Fraction[][] coefficientsData = { { new Fraction(2), new Fraction(3), new Fraction(-2) }, { new Fraction(-1), new Fraction(7), new Fraction(6) }, { new Fraction(4), new Fraction(-3), new Fraction(-5) } }; [EOL]     FieldMatrix<Fraction> coefficients = new Array2DRowFieldMatrix<Fraction>(coefficientsData); [EOL]     Fraction[] constants = { new Fraction(1), new Fraction(-2), new Fraction(1) }; [EOL]     Fraction[] solution; [EOL]     solution = new FieldLUDecomposition<Fraction>(coefficients).getSolver().solve(new ArrayFieldVector<Fraction>(constants, false)).toArray(); [EOL]     Assert.assertEquals(new Fraction(2).multiply(solution[0]).add(new Fraction(3).multiply(solution[1])).subtract(new Fraction(2).multiply(solution[2])), constants[0]); [EOL]     Assert.assertEquals(new Fraction(-1).multiply(solution[0]).add(new Fraction(7).multiply(solution[1])).add(new Fraction(6).multiply(solution[2])), constants[1]); [EOL]     Assert.assertEquals(new Fraction(4).multiply(solution[0]).subtract(new Fraction(3).multiply(solution[1])).subtract(new Fraction(5).multiply(solution[2])), constants[2]); [EOL] } <line_num>: 378,426
@Test [EOL] public void testGetSubMatrix() { [EOL]     FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData); [EOL]     checkGetSubMatrix(m, subRows23Cols00, 2, 3, 0, 0); [EOL]     checkGetSubMatrix(m, subRows00Cols33, 0, 0, 3, 3); [EOL]     checkGetSubMatrix(m, subRows01Cols23, 0, 1, 2, 3); [EOL]     checkGetSubMatrix(m, subRows02Cols13, new int[] { 0, 2 }, new int[] { 1, 3 }); [EOL]     checkGetSubMatrix(m, subRows03Cols12, new int[] { 0, 3 }, new int[] { 1, 2 }); [EOL]     checkGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }); [EOL]     checkGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }); [EOL]     checkGetSubMatrix(m, subRows31Cols31, new int[] { 3, 1 }, new int[] { 3, 1 }); [EOL]     checkGetSubMatrix(m, subRows31Cols31, new int[] { 3, 1 }, new int[] { 3, 1 }); [EOL]     checkGetSubMatrix(m, null, 1, 0, 2, 4); [EOL]     checkGetSubMatrix(m, null, -1, 1, 2, 2); [EOL]     checkGetSubMatrix(m, null, 1, 0, 2, 2); [EOL]     checkGetSubMatrix(m, null, 1, 0, 2, 4); [EOL]     checkGetSubMatrix(m, null, new int[] {}, new int[] { 0 }); [EOL]     checkGetSubMatrix(m, null, new int[] { 0 }, new int[] { 4 }); [EOL] } <line_num>: 429,447
private void checkGetSubMatrix(FieldMatrix<Fraction> m, Fraction[][] reference, int startRow, int endRow, int startColumn, int endColumn) { [EOL]     try { [EOL]         FieldMatrix<Fraction> sub = m.getSubMatrix(startRow, endRow, startColumn, endColumn); [EOL]         if (reference != null) { [EOL]             Assert.assertEquals(new Array2DRowFieldMatrix<Fraction>(reference), sub); [EOL]         } else { [EOL]             Assert.fail("Expecting OutOfRangeException or NotStrictlyPositiveException" + " or NumberIsTooSmallException or NoDataException"); [EOL]         } [EOL]     } catch (OutOfRangeException e) { [EOL]         if (reference != null) { [EOL]             throw e; [EOL]         } [EOL]     } catch (NotStrictlyPositiveException e) { [EOL]         if (reference != null) { [EOL]             throw e; [EOL]         } [EOL]     } catch (NumberIsTooSmallException e) { [EOL]         if (reference != null) { [EOL]             throw e; [EOL]         } [EOL]     } catch (NoDataException e) { [EOL]         if (reference != null) { [EOL]             throw e; [EOL]         } [EOL]     } [EOL] } <line_num>: 449,476
private void checkGetSubMatrix(FieldMatrix<Fraction> m, Fraction[][] reference, int[] selectedRows, int[] selectedColumns) { [EOL]     try { [EOL]         FieldMatrix<Fraction> sub = m.getSubMatrix(selectedRows, selectedColumns); [EOL]         if (reference != null) { [EOL]             Assert.assertEquals(new Array2DRowFieldMatrix<Fraction>(reference), sub); [EOL]         } else { [EOL]             Assert.fail("Expecting OutOfRangeException or NotStrictlyPositiveException" + " or NumberIsTooSmallException or NoDataException"); [EOL]         } [EOL]     } catch (OutOfRangeException e) { [EOL]         if (reference != null) { [EOL]             throw e; [EOL]         } [EOL]     } catch (NotStrictlyPositiveException e) { [EOL]         if (reference != null) { [EOL]             throw e; [EOL]         } [EOL]     } catch (NumberIsTooSmallException e) { [EOL]         if (reference != null) { [EOL]             throw e; [EOL]         } [EOL]     } catch (NoDataException e) { [EOL]         if (reference != null) { [EOL]             throw e; [EOL]         } [EOL]     } [EOL] } <line_num>: 478,505
@Test [EOL] public void testCopySubMatrix() { [EOL]     FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData); [EOL]     checkCopy(m, subRows23Cols00, 2, 3, 0, 0); [EOL]     checkCopy(m, subRows00Cols33, 0, 0, 3, 3); [EOL]     checkCopy(m, subRows01Cols23, 0, 1, 2, 3); [EOL]     checkCopy(m, subRows02Cols13, new int[] { 0, 2 }, new int[] { 1, 3 }); [EOL]     checkCopy(m, subRows03Cols12, new int[] { 0, 3 }, new int[] { 1, 2 }); [EOL]     checkCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }); [EOL]     checkCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }); [EOL]     checkCopy(m, subRows31Cols31, new int[] { 3, 1 }, new int[] { 3, 1 }); [EOL]     checkCopy(m, subRows31Cols31, new int[] { 3, 1 }, new int[] { 3, 1 }); [EOL]     checkCopy(m, null, 1, 0, 2, 4); [EOL]     checkCopy(m, null, -1, 1, 2, 2); [EOL]     checkCopy(m, null, 1, 0, 2, 2); [EOL]     checkCopy(m, null, 1, 0, 2, 4); [EOL]     checkCopy(m, null, new int[] {}, new int[] { 0 }); [EOL]     checkCopy(m, null, new int[] { 0 }, new int[] { 4 }); [EOL] } <line_num>: 507,526
private void checkCopy(FieldMatrix<Fraction> m, Fraction[][] reference, int startRow, int endRow, int startColumn, int endColumn) { [EOL]     try { [EOL]         Fraction[][] sub = (reference == null) ? new Fraction[1][1] : new Fraction[reference.length][reference[0].length]; [EOL]         m.copySubMatrix(startRow, endRow, startColumn, endColumn, sub); [EOL]         if (reference != null) { [EOL]             Assert.assertEquals(new Array2DRowFieldMatrix<Fraction>(reference), new Array2DRowFieldMatrix<Fraction>(sub)); [EOL]         } else { [EOL]             Assert.fail("Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"); [EOL]         } [EOL]     } catch (OutOfRangeException e) { [EOL]         if (reference != null) { [EOL]             throw e; [EOL]         } [EOL]     } catch (NumberIsTooSmallException e) { [EOL]         if (reference != null) { [EOL]             throw e; [EOL]         } [EOL]     } catch (NoDataException e) { [EOL]         if (reference != null) { [EOL]             throw e; [EOL]         } [EOL]     } [EOL] } <line_num>: 528,553
private void checkCopy(FieldMatrix<Fraction> m, Fraction[][] reference, int[] selectedRows, int[] selectedColumns) { [EOL]     try { [EOL]         Fraction[][] sub = (reference == null) ? new Fraction[1][1] : new Fraction[reference.length][reference[0].length]; [EOL]         m.copySubMatrix(selectedRows, selectedColumns, sub); [EOL]         if (reference != null) { [EOL]             Assert.assertEquals(new Array2DRowFieldMatrix<Fraction>(reference), new Array2DRowFieldMatrix<Fraction>(sub)); [EOL]         } else { [EOL]             Assert.fail("Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"); [EOL]         } [EOL]     } catch (OutOfRangeException e) { [EOL]         if (reference != null) { [EOL]             throw e; [EOL]         } [EOL]     } catch (NumberIsTooSmallException e) { [EOL]         if (reference != null) { [EOL]             throw e; [EOL]         } [EOL]     } catch (NoDataException e) { [EOL]         if (reference != null) { [EOL]             throw e; [EOL]         } [EOL]     } [EOL] } <line_num>: 555,580
@Test [EOL] public void testGetRowMatrix() { [EOL]     FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData); [EOL]     FieldMatrix<Fraction> mRow0 = new Array2DRowFieldMatrix<Fraction>(subRow0); [EOL]     FieldMatrix<Fraction> mRow3 = new Array2DRowFieldMatrix<Fraction>(subRow3); [EOL]     Assert.assertEquals("Row0", mRow0, m.getRowMatrix(0)); [EOL]     Assert.assertEquals("Row3", mRow3, m.getRowMatrix(3)); [EOL]     try { [EOL]         m.getRowMatrix(-1); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.getRowMatrix(4); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 582,603
@Test [EOL] public void testSetRowMatrix() { [EOL]     FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData); [EOL]     FieldMatrix<Fraction> mRow3 = new Array2DRowFieldMatrix<Fraction>(subRow3); [EOL]     Assert.assertNotSame(mRow3, m.getRowMatrix(0)); [EOL]     m.setRowMatrix(0, mRow3); [EOL]     Assert.assertEquals(mRow3, m.getRowMatrix(0)); [EOL]     try { [EOL]         m.setRowMatrix(-1, mRow3); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.setRowMatrix(0, m); [EOL]         Assert.fail("Expecting MatrixDimensionMismatchException"); [EOL]     } catch (MatrixDimensionMismatchException ex) { [EOL]     } [EOL] } <line_num>: 605,624
@Test [EOL] public void testGetColumnMatrix() { [EOL]     FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData); [EOL]     FieldMatrix<Fraction> mColumn1 = new Array2DRowFieldMatrix<Fraction>(subColumn1); [EOL]     FieldMatrix<Fraction> mColumn3 = new Array2DRowFieldMatrix<Fraction>(subColumn3); [EOL]     Assert.assertEquals("Column1", mColumn1, m.getColumnMatrix(1)); [EOL]     Assert.assertEquals("Column3", mColumn3, m.getColumnMatrix(3)); [EOL]     try { [EOL]         m.getColumnMatrix(-1); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.getColumnMatrix(4); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 626,647
@Test [EOL] public void testSetColumnMatrix() { [EOL]     FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData); [EOL]     FieldMatrix<Fraction> mColumn3 = new Array2DRowFieldMatrix<Fraction>(subColumn3); [EOL]     Assert.assertNotSame(mColumn3, m.getColumnMatrix(1)); [EOL]     m.setColumnMatrix(1, mColumn3); [EOL]     Assert.assertEquals(mColumn3, m.getColumnMatrix(1)); [EOL]     try { [EOL]         m.setColumnMatrix(-1, mColumn3); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.setColumnMatrix(0, m); [EOL]         Assert.fail("Expecting MatrixDimensionMismatchException"); [EOL]     } catch (MatrixDimensionMismatchException ex) { [EOL]     } [EOL] } <line_num>: 649,668
@Test [EOL] public void testGetRowVector() { [EOL]     FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData); [EOL]     FieldVector<Fraction> mRow0 = new ArrayFieldVector<Fraction>(subRow0[0]); [EOL]     FieldVector<Fraction> mRow3 = new ArrayFieldVector<Fraction>(subRow3[0]); [EOL]     Assert.assertEquals("Row0", mRow0, m.getRowVector(0)); [EOL]     Assert.assertEquals("Row3", mRow3, m.getRowVector(3)); [EOL]     try { [EOL]         m.getRowVector(-1); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.getRowVector(4); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 670,689
@Test [EOL] public void testSetRowVector() { [EOL]     FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData); [EOL]     FieldVector<Fraction> mRow3 = new ArrayFieldVector<Fraction>(subRow3[0]); [EOL]     Assert.assertNotSame(mRow3, m.getRowMatrix(0)); [EOL]     m.setRowVector(0, mRow3); [EOL]     Assert.assertEquals(mRow3, m.getRowVector(0)); [EOL]     try { [EOL]         m.setRowVector(-1, mRow3); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.setRowVector(0, new ArrayFieldVector<Fraction>(FractionField.getInstance(), 5)); [EOL]         Assert.fail("Expecting MatrixDimensionMismatchException"); [EOL]     } catch (MatrixDimensionMismatchException ex) { [EOL]     } [EOL] } <line_num>: 691,710
@Test [EOL] public void testGetColumnVector() { [EOL]     FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData); [EOL]     FieldVector<Fraction> mColumn1 = columnToVector(subColumn1); [EOL]     FieldVector<Fraction> mColumn3 = columnToVector(subColumn3); [EOL]     Assert.assertEquals("Column1", mColumn1, m.getColumnVector(1)); [EOL]     Assert.assertEquals("Column3", mColumn3, m.getColumnVector(3)); [EOL]     try { [EOL]         m.getColumnVector(-1); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.getColumnVector(4); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 712,731
@Test [EOL] public void testSetColumnVector() { [EOL]     FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData); [EOL]     FieldVector<Fraction> mColumn3 = columnToVector(subColumn3); [EOL]     Assert.assertNotSame(mColumn3, m.getColumnVector(1)); [EOL]     m.setColumnVector(1, mColumn3); [EOL]     Assert.assertEquals(mColumn3, m.getColumnVector(1)); [EOL]     try { [EOL]         m.setColumnVector(-1, mColumn3); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.setColumnVector(0, new ArrayFieldVector<Fraction>(FractionField.getInstance(), 5)); [EOL]         Assert.fail("Expecting MatrixDimensionMismatchException"); [EOL]     } catch (MatrixDimensionMismatchException ex) { [EOL]     } [EOL] } <line_num>: 733,752
private FieldVector<Fraction> columnToVector(Fraction[][] column) { [EOL]     Fraction[] data = new Fraction[column.length]; [EOL]     for (int i = 0; i < data.length; ++i) { [EOL]         data[i] = column[i][0]; [EOL]     } [EOL]     return new ArrayFieldVector<Fraction>(data, false); [EOL] } <line_num>: 754,760
@Test [EOL] public void testGetRow() { [EOL]     FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData); [EOL]     checkArrays(subRow0[0], m.getRow(0)); [EOL]     checkArrays(subRow3[0], m.getRow(3)); [EOL]     try { [EOL]         m.getRow(-1); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.getRow(4); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 762,779
@Test [EOL] public void testSetRow() { [EOL]     FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData); [EOL]     Assert.assertTrue(subRow3[0][0] != m.getRow(0)[0]); [EOL]     m.setRow(0, subRow3[0]); [EOL]     checkArrays(subRow3[0], m.getRow(0)); [EOL]     try { [EOL]         m.setRow(-1, subRow3[0]); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.setRow(0, new Fraction[5]); [EOL]         Assert.fail("Expecting MatrixDimensionMismatchException"); [EOL]     } catch (MatrixDimensionMismatchException ex) { [EOL]     } [EOL] } <line_num>: 781,799
@Test [EOL] public void testGetColumn() { [EOL]     FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData); [EOL]     Fraction[] mColumn1 = columnToArray(subColumn1); [EOL]     Fraction[] mColumn3 = columnToArray(subColumn3); [EOL]     checkArrays(mColumn1, m.getColumn(1)); [EOL]     checkArrays(mColumn3, m.getColumn(3)); [EOL]     try { [EOL]         m.getColumn(-1); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.getColumn(4); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 801,820
@Test [EOL] public void testSetColumn() { [EOL]     FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData); [EOL]     Fraction[] mColumn3 = columnToArray(subColumn3); [EOL]     Assert.assertTrue(mColumn3[0] != m.getColumn(1)[0]); [EOL]     m.setColumn(1, mColumn3); [EOL]     checkArrays(mColumn3, m.getColumn(1)); [EOL]     try { [EOL]         m.setColumn(-1, mColumn3); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.setColumn(0, new Fraction[5]); [EOL]         Assert.fail("Expecting MatrixDimensionMismatchException"); [EOL]     } catch (MatrixDimensionMismatchException ex) { [EOL]     } [EOL] } <line_num>: 822,841
private Fraction[] columnToArray(Fraction[][] column) { [EOL]     Fraction[] data = new Fraction[column.length]; [EOL]     for (int i = 0; i < data.length; ++i) { [EOL]         data[i] = column[i][0]; [EOL]     } [EOL]     return data; [EOL] } <line_num>: 843,849
private void checkArrays(Fraction[] expected, Fraction[] actual) { [EOL]     Assert.assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < expected.length; ++i) { [EOL]         Assert.assertEquals(expected[i], actual[i]); [EOL]     } [EOL] } <line_num>: 851,856
@Test [EOL] public void testEqualsAndHashCode() { [EOL]     Array2DRowFieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData); [EOL]     Array2DRowFieldMatrix<Fraction> m1 = (Array2DRowFieldMatrix<Fraction>) m.copy(); [EOL]     Array2DRowFieldMatrix<Fraction> mt = (Array2DRowFieldMatrix<Fraction>) m.transpose(); [EOL]     Assert.assertTrue(m.hashCode() != mt.hashCode()); [EOL]     Assert.assertEquals(m.hashCode(), m1.hashCode()); [EOL]     Assert.assertEquals(m, m); [EOL]     Assert.assertEquals(m, m1); [EOL]     Assert.assertFalse(m.equals(null)); [EOL]     Assert.assertFalse(m.equals(mt)); [EOL]     Assert.assertFalse(m.equals(new Array2DRowFieldMatrix<Fraction>(bigSingular))); [EOL] } <line_num>: 858,870
@Test [EOL] public void testToString() { [EOL]     Array2DRowFieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData); [EOL]     Assert.assertEquals("Array2DRowFieldMatrix{{1,2,3},{2,5,3},{1,0,8}}", m.toString()); [EOL]     m = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance()); [EOL]     Assert.assertEquals("Array2DRowFieldMatrix{}", m.toString()); [EOL] } <line_num>: 872,878
@Test [EOL] public void testSetSubMatrix() { [EOL]     Array2DRowFieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData); [EOL]     m.setSubMatrix(detData2, 1, 1); [EOL]     FieldMatrix<Fraction> expected = new Array2DRowFieldMatrix<Fraction>(new Fraction[][] { { new Fraction(1), new Fraction(2), new Fraction(3) }, { new Fraction(2), new Fraction(1), new Fraction(3) }, { new Fraction(1), new Fraction(2), new Fraction(4) } }); [EOL]     Assert.assertEquals(expected, m); [EOL]     m.setSubMatrix(detData2, 0, 0); [EOL]     expected = new Array2DRowFieldMatrix<Fraction>(new Fraction[][] { { new Fraction(1), new Fraction(3), new Fraction(3) }, { new Fraction(2), new Fraction(4), new Fraction(3) }, { new Fraction(1), new Fraction(2), new Fraction(4) } }); [EOL]     Assert.assertEquals(expected, m); [EOL]     m.setSubMatrix(testDataPlus2, 0, 0); [EOL]     expected = new Array2DRowFieldMatrix<Fraction>(new Fraction[][] { { new Fraction(3), new Fraction(4), new Fraction(5) }, { new Fraction(4), new Fraction(7), new Fraction(5) }, { new Fraction(3), new Fraction(2), new Fraction(10) } }); [EOL]     Assert.assertEquals(expected, m); [EOL]     try { [EOL]         m.setSubMatrix(testData, 1, 1); [EOL]         Assert.fail("expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException e) { [EOL]     } [EOL]     try { [EOL]         m.setSubMatrix(testData, -1, 1); [EOL]         Assert.fail("expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException e) { [EOL]     } [EOL]     try { [EOL]         m.setSubMatrix(testData, 1, -1); [EOL]         Assert.fail("expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException e) { [EOL]     } [EOL]     try { [EOL]         m.setSubMatrix(null, 1, 1); [EOL]         Assert.fail("expecting NullArgumentException"); [EOL]     } catch (NullArgumentException e) { [EOL]     } [EOL]     Array2DRowFieldMatrix<Fraction> m2 = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance()); [EOL]     try { [EOL]         m2.setSubMatrix(testData, 0, 1); [EOL]         Assert.fail("expecting MathIllegalStateException"); [EOL]     } catch (MathIllegalStateException e) { [EOL]     } [EOL]     try { [EOL]         m2.setSubMatrix(testData, 1, 0); [EOL]         Assert.fail("expecting MathIllegalStateException"); [EOL]     } catch (MathIllegalStateException e) { [EOL]     } [EOL]     try { [EOL]         m.setSubMatrix(new Fraction[][] { { new Fraction(1) }, { new Fraction(2), new Fraction(3) } }, 0, 0); [EOL]         Assert.fail("expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         m.setSubMatrix(new Fraction[][] { {} }, 0, 0); [EOL]         Assert.fail("expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 880,968
@Test [EOL] public void testWalk() { [EOL]     int rows = 150; [EOL]     int columns = 75; [EOL]     FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns); [EOL]     m.walkInRowOrder(new SetVisitor()); [EOL]     GetVisitor getVisitor = new GetVisitor(); [EOL]     m.walkInOptimizedOrder(getVisitor); [EOL]     Assert.assertEquals(rows * columns, getVisitor.getCount()); [EOL]     m = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns); [EOL]     m.walkInRowOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2); [EOL]     getVisitor = new GetVisitor(); [EOL]     m.walkInOptimizedOrder(getVisitor, 1, rows - 2, 1, columns - 2); [EOL]     Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount()); [EOL]     for (int i = 0; i < rows; ++i) { [EOL]         Assert.assertEquals(new Fraction(0), m.getEntry(i, 0)); [EOL]         Assert.assertEquals(new Fraction(0), m.getEntry(i, columns - 1)); [EOL]     } [EOL]     for (int j = 0; j < columns; ++j) { [EOL]         Assert.assertEquals(new Fraction(0), m.getEntry(0, j)); [EOL]         Assert.assertEquals(new Fraction(0), m.getEntry(rows - 1, j)); [EOL]     } [EOL]     m = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns); [EOL]     m.walkInColumnOrder(new SetVisitor()); [EOL]     getVisitor = new GetVisitor(); [EOL]     m.walkInOptimizedOrder(getVisitor); [EOL]     Assert.assertEquals(rows * columns, getVisitor.getCount()); [EOL]     m = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns); [EOL]     m.walkInColumnOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2); [EOL]     getVisitor = new GetVisitor(); [EOL]     m.walkInOptimizedOrder(getVisitor, 1, rows - 2, 1, columns - 2); [EOL]     Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount()); [EOL]     for (int i = 0; i < rows; ++i) { [EOL]         Assert.assertEquals(new Fraction(0), m.getEntry(i, 0)); [EOL]         Assert.assertEquals(new Fraction(0), m.getEntry(i, columns - 1)); [EOL]     } [EOL]     for (int j = 0; j < columns; ++j) { [EOL]         Assert.assertEquals(new Fraction(0), m.getEntry(0, j)); [EOL]         Assert.assertEquals(new Fraction(0), m.getEntry(rows - 1, j)); [EOL]     } [EOL]     m = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns); [EOL]     m.walkInOptimizedOrder(new SetVisitor()); [EOL]     getVisitor = new GetVisitor(); [EOL]     m.walkInRowOrder(getVisitor); [EOL]     Assert.assertEquals(rows * columns, getVisitor.getCount()); [EOL]     m = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns); [EOL]     m.walkInOptimizedOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2); [EOL]     getVisitor = new GetVisitor(); [EOL]     m.walkInRowOrder(getVisitor, 1, rows - 2, 1, columns - 2); [EOL]     Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount()); [EOL]     for (int i = 0; i < rows; ++i) { [EOL]         Assert.assertEquals(new Fraction(0), m.getEntry(i, 0)); [EOL]         Assert.assertEquals(new Fraction(0), m.getEntry(i, columns - 1)); [EOL]     } [EOL]     for (int j = 0; j < columns; ++j) { [EOL]         Assert.assertEquals(new Fraction(0), m.getEntry(0, j)); [EOL]         Assert.assertEquals(new Fraction(0), m.getEntry(rows - 1, j)); [EOL]     } [EOL]     m = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns); [EOL]     m.walkInOptimizedOrder(new SetVisitor()); [EOL]     getVisitor = new GetVisitor(); [EOL]     m.walkInColumnOrder(getVisitor); [EOL]     Assert.assertEquals(rows * columns, getVisitor.getCount()); [EOL]     m = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns); [EOL]     m.walkInOptimizedOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2); [EOL]     getVisitor = new GetVisitor(); [EOL]     m.walkInColumnOrder(getVisitor, 1, rows - 2, 1, columns - 2); [EOL]     Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount()); [EOL]     for (int i = 0; i < rows; ++i) { [EOL]         Assert.assertEquals(new Fraction(0), m.getEntry(i, 0)); [EOL]         Assert.assertEquals(new Fraction(0), m.getEntry(i, columns - 1)); [EOL]     } [EOL]     for (int j = 0; j < columns; ++j) { [EOL]         Assert.assertEquals(new Fraction(0), m.getEntry(0, j)); [EOL]         Assert.assertEquals(new Fraction(0), m.getEntry(rows - 1, j)); [EOL]     } [EOL] } <line_num>: 970,1055
@Test [EOL] public void testSerial() { [EOL]     Array2DRowFieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData); [EOL]     Assert.assertEquals(m, TestUtils.serializeAndRecover(m)); [EOL] } <line_num>: 1057,1061
@Override [EOL] public Fraction visit(int i, int j, Fraction value) { [EOL]     return new Fraction(i * 1024 + j, 1024); [EOL] } <line_num>: 1067,1070
@Override [EOL] public void visit(int i, int j, Fraction value) { [EOL]     ++count; [EOL]     Assert.assertEquals(new Fraction(i * 1024 + j, 1024), value); [EOL] } <line_num>: 1079,1083
public int getCount() { [EOL]     return count; [EOL] } <line_num>: 1084,1086
protected void splitLU(FieldMatrix<Fraction> lu, Fraction[][] lowerData, Fraction[][] upperData) { [EOL]     if (!lu.isSquare()) { [EOL]         throw new NonSquareMatrixException(lu.getRowDimension(), lu.getColumnDimension()); [EOL]     } [EOL]     if (lowerData.length != lowerData[0].length) { [EOL]         throw new DimensionMismatchException(lowerData.length, lowerData[0].length); [EOL]     } [EOL]     if (upperData.length != upperData[0].length) { [EOL]         throw new DimensionMismatchException(upperData.length, upperData[0].length); [EOL]     } [EOL]     if (lowerData.length != upperData.length) { [EOL]         throw new DimensionMismatchException(lowerData.length, upperData.length); [EOL]     } [EOL]     if (lowerData.length != lu.getRowDimension()) { [EOL]         throw new DimensionMismatchException(lowerData.length, lu.getRowDimension()); [EOL]     } [EOL]     int n = lu.getRowDimension(); [EOL]     for (int i = 0; i < n; i++) { [EOL]         for (int j = 0; j < n; j++) { [EOL]             if (j < i) { [EOL]                 lowerData[i][j] = lu.getEntry(i, j); [EOL]                 upperData[i][j] = Fraction.ZERO; [EOL]             } else if (i == j) { [EOL]                 lowerData[i][j] = Fraction.ONE; [EOL]                 upperData[i][j] = lu.getEntry(i, j); [EOL]             } else { [EOL]                 lowerData[i][j] = Fraction.ZERO; [EOL]                 upperData[i][j] = lu.getEntry(i, j); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 1092,1125
protected FieldMatrix<Fraction> permuteRows(FieldMatrix<Fraction> matrix, int[] permutation) { [EOL]     if (!matrix.isSquare()) { [EOL]         throw new NonSquareMatrixException(matrix.getRowDimension(), matrix.getColumnDimension()); [EOL]     } [EOL]     if (matrix.getRowDimension() != permutation.length) { [EOL]         throw new DimensionMismatchException(matrix.getRowDimension(), permutation.length); [EOL]     } [EOL]     int n = matrix.getRowDimension(); [EOL]     int m = matrix.getColumnDimension(); [EOL]     Fraction[][] out = new Fraction[m][n]; [EOL]     for (int i = 0; i < n; i++) { [EOL]         for (int j = 0; j < m; j++) { [EOL]             out[i][j] = matrix.getEntry(permutation[i], j); [EOL]         } [EOL]     } [EOL]     return new Array2DRowFieldMatrix<Fraction>(out); [EOL] } <line_num>: 1128,1145
