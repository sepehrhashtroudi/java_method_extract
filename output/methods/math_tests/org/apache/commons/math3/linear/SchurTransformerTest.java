@Test [EOL] public void testNonSquare() { [EOL]     try { [EOL]         new SchurTransformer(MatrixUtils.createRealMatrix(new double[3][2])); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (NonSquareMatrixException ime) { [EOL]     } [EOL] } <line_num>: 52,60
@Test [EOL] public void testAEqualPTPt() { [EOL]     checkAEqualPTPt(MatrixUtils.createRealMatrix(testSquare5)); [EOL]     checkAEqualPTPt(MatrixUtils.createRealMatrix(testSquare3)); [EOL]     checkAEqualPTPt(MatrixUtils.createRealMatrix(testRandom)); [EOL] } <line_num>: 62,67
@Test [EOL] public void testPOrthogonal() { [EOL]     checkOrthogonal(new SchurTransformer(MatrixUtils.createRealMatrix(testSquare5)).getP()); [EOL]     checkOrthogonal(new SchurTransformer(MatrixUtils.createRealMatrix(testSquare3)).getP()); [EOL]     checkOrthogonal(new SchurTransformer(MatrixUtils.createRealMatrix(testRandom)).getP()); [EOL] } <line_num>: 69,74
@Test [EOL] public void testPTOrthogonal() { [EOL]     checkOrthogonal(new SchurTransformer(MatrixUtils.createRealMatrix(testSquare5)).getPT()); [EOL]     checkOrthogonal(new SchurTransformer(MatrixUtils.createRealMatrix(testSquare3)).getPT()); [EOL]     checkOrthogonal(new SchurTransformer(MatrixUtils.createRealMatrix(testRandom)).getPT()); [EOL] } <line_num>: 76,81
@Test [EOL] public void testSchurForm() { [EOL]     checkSchurForm(new SchurTransformer(MatrixUtils.createRealMatrix(testSquare5)).getT()); [EOL]     checkSchurForm(new SchurTransformer(MatrixUtils.createRealMatrix(testSquare3)).getT()); [EOL]     checkSchurForm(new SchurTransformer(MatrixUtils.createRealMatrix(testRandom)).getT()); [EOL] } <line_num>: 83,88
@Test [EOL] public void testRandomData() { [EOL]     for (int run = 0; run < 100; run++) { [EOL]         Random r = new Random(System.currentTimeMillis()); [EOL]         int size = r.nextInt(20) + 4; [EOL]         double[][] data = new double[size][size]; [EOL]         for (int i = 0; i < size; i++) { [EOL]             for (int j = 0; j < size; j++) { [EOL]                 data[i][j] = r.nextInt(100); [EOL]             } [EOL]         } [EOL]         RealMatrix m = MatrixUtils.createRealMatrix(data); [EOL]         RealMatrix s = checkAEqualPTPt(m); [EOL]         checkSchurForm(s); [EOL]     } [EOL] } <line_num>: 90,109
@Test [EOL] public void testRandomDataNormalDistribution() { [EOL]     for (int run = 0; run < 100; run++) { [EOL]         Random r = new Random(System.currentTimeMillis()); [EOL]         NormalDistribution dist = new NormalDistribution(0.0, r.nextDouble() * 5); [EOL]         int size = r.nextInt(20) + 4; [EOL]         double[][] data = new double[size][size]; [EOL]         for (int i = 0; i < size; i++) { [EOL]             for (int j = 0; j < size; j++) { [EOL]                 data[i][j] = dist.sample(); [EOL]             } [EOL]         } [EOL]         RealMatrix m = MatrixUtils.createRealMatrix(data); [EOL]         RealMatrix s = checkAEqualPTPt(m); [EOL]         checkSchurForm(s); [EOL]     } [EOL] } <line_num>: 111,131
@Test [EOL] public void testMath848() { [EOL]     double[][] data = { { 0.1849449280, -0.0646971046, 0.0774755812, -0.0969651755, -0.0692648806, 0.3282344352, -0.0177423074, 0.2063136340 }, { -0.0742700134, -0.0289063030, -0.0017269460, -0.0375550146, -0.0487737922, -0.2616837868, -0.0821201295, -0.2530000167 }, { 0.2549910127, 0.0995733692, -0.0009718388, 0.0149282808, 0.1791878897, -0.0823182816, 0.0582629256, 0.3219545182 }, { -0.0694747557, -0.1880649148, -0.2740630911, 0.0720096468, -0.1800836914, -0.3518996425, 0.2486747833, 0.6257938167 }, { 0.0536360918, -0.1339297778, 0.2241579764, -0.0195327484, -0.0054103808, 0.0347564518, 0.5120802482, -0.0329902864 }, { -0.5933332356, -0.2488721082, 0.2357173629, 0.0177285473, 0.0856630593, -0.3567126300, -0.1600668126, -0.1010899621 }, { -0.0514349819, -0.0854319435, 0.1125050061, 0.0063453560, -0.2250000688, -0.2209343090, 0.1964623477, -0.1512329924 }, { 0.0197395947, -0.1997170581, -0.1425959019, -0.2749477910, -0.0969467073, 0.0603688520, -0.2826905192, 0.1794315473 } }; [EOL]     RealMatrix m = MatrixUtils.createRealMatrix(data); [EOL]     RealMatrix s = checkAEqualPTPt(m); [EOL]     checkSchurForm(s); [EOL] } <line_num>: 133,147
private RealMatrix checkAEqualPTPt(RealMatrix matrix) { [EOL]     SchurTransformer transformer = new SchurTransformer(matrix); [EOL]     RealMatrix p = transformer.getP(); [EOL]     RealMatrix t = transformer.getT(); [EOL]     RealMatrix pT = transformer.getPT(); [EOL]     RealMatrix result = p.multiply(t).multiply(pT); [EOL]     double norm = result.subtract(matrix).getNorm(); [EOL]     Assert.assertEquals(0, norm, 1.0e-9); [EOL]     return t; [EOL] } <line_num>: 153,165
private void checkOrthogonal(RealMatrix m) { [EOL]     RealMatrix mTm = m.transpose().multiply(m); [EOL]     RealMatrix id = MatrixUtils.createRealIdentityMatrix(mTm.getRowDimension()); [EOL]     Assert.assertEquals(0, mTm.subtract(id).getNorm(), 1.0e-14); [EOL] } <line_num>: 167,171
private void checkSchurForm(final RealMatrix m) { [EOL]     final int rows = m.getRowDimension(); [EOL]     final int cols = m.getColumnDimension(); [EOL]     for (int i = 0; i < rows; ++i) { [EOL]         for (int j = 0; j < cols; ++j) { [EOL]             if (i > j + 1) { [EOL]                 Assert.assertEquals(0, m.getEntry(i, j), 1.0e-16); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 173,183
@SuppressWarnings("unused") [EOL] private void checkMatricesValues(double[][] matrix, double[][] pRef, double[][] hRef) { [EOL]     SchurTransformer transformer = new SchurTransformer(MatrixUtils.createRealMatrix(matrix)); [EOL]     RealMatrix p = transformer.getP(); [EOL]     Assert.assertEquals(0, p.subtract(MatrixUtils.createRealMatrix(pRef)).getNorm(), 1.0e-14); [EOL]     RealMatrix t = transformer.getT(); [EOL]     Assert.assertEquals(0, t.subtract(MatrixUtils.createRealMatrix(hRef)).getNorm(), 1.0e-14); [EOL]     Assert.assertTrue(p == transformer.getP()); [EOL]     Assert.assertTrue(t == transformer.getT()); [EOL] } <line_num>: 185,201
