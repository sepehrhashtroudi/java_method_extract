public InverseHilbertMatrix(final int n) { [EOL]     this.n = n; [EOL] } <line_num>: 38,40
@Override [EOL] public int getColumnDimension() { [EOL]     return n; [EOL] } <line_num>: 43,46
public long getEntry(final int i, final int j) { [EOL]     long val = i + j + 1; [EOL]     long aux = CombinatoricsUtils.binomialCoefficient(n + i, n - j - 1); [EOL]     val = ArithmeticUtils.mulAndCheck(val, aux); [EOL]     aux = CombinatoricsUtils.binomialCoefficient(n + j, n - i - 1); [EOL]     val = ArithmeticUtils.mulAndCheck(val, aux); [EOL]     aux = CombinatoricsUtils.binomialCoefficient(i + j, i); [EOL]     val = ArithmeticUtils.mulAndCheck(val, aux); [EOL]     val = ArithmeticUtils.mulAndCheck(val, aux); [EOL]     return ((i + j) & 1) == 0 ? val : -val; [EOL] } <line_num>: 56,66
@Override [EOL] public int getRowDimension() { [EOL]     return n; [EOL] } <line_num>: 69,72
@Override [EOL] public RealVector operate(final RealVector x) { [EOL]     if (x.getDimension() != n) { [EOL]         throw new DimensionMismatchException(x.getDimension(), n); [EOL]     } [EOL]     final double[] y = new double[n]; [EOL]     for (int i = 0; i < n; i++) { [EOL]         double pos = 0.; [EOL]         double neg = 0.; [EOL]         for (int j = 0; j < n; j++) { [EOL]             final double xj = x.getEntry(j); [EOL]             final long coeff = getEntry(i, j); [EOL]             final double daux = coeff * xj; [EOL]             if (daux > 0.) { [EOL]                 pos += daux; [EOL]             } else { [EOL]                 neg += daux; [EOL]             } [EOL]         } [EOL]         y[i] = pos + neg; [EOL]     } [EOL]     return new ArrayRealVector(y, false); [EOL] } <line_num>: 75,100
