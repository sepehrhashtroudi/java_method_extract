@Test [EOL] public void testNonSquare() { [EOL]     try { [EOL]         new TriDiagonalTransformer(MatrixUtils.createRealMatrix(new double[3][2])); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (NonSquareMatrixException ime) { [EOL]     } [EOL] } <line_num>: 43,51
@Test [EOL] public void testAEqualQTQt() { [EOL]     checkAEqualQTQt(MatrixUtils.createRealMatrix(testSquare5)); [EOL]     checkAEqualQTQt(MatrixUtils.createRealMatrix(testSquare3)); [EOL] } <line_num>: 53,57
private void checkAEqualQTQt(RealMatrix matrix) { [EOL]     TriDiagonalTransformer transformer = new TriDiagonalTransformer(matrix); [EOL]     RealMatrix q = transformer.getQ(); [EOL]     RealMatrix qT = transformer.getQT(); [EOL]     RealMatrix t = transformer.getT(); [EOL]     double norm = q.multiply(t).multiply(qT).subtract(matrix).getNorm(); [EOL]     Assert.assertEquals(0, norm, 4.0e-15); [EOL] } <line_num>: 59,66
@Test [EOL] public void testNoAccessBelowDiagonal() { [EOL]     checkNoAccessBelowDiagonal(testSquare5); [EOL]     checkNoAccessBelowDiagonal(testSquare3); [EOL] } <line_num>: 68,72
private void checkNoAccessBelowDiagonal(double[][] data) { [EOL]     double[][] modifiedData = new double[data.length][]; [EOL]     for (int i = 0; i < data.length; ++i) { [EOL]         modifiedData[i] = data[i].clone(); [EOL]         Arrays.fill(modifiedData[i], 0, i, Double.NaN); [EOL]     } [EOL]     RealMatrix matrix = MatrixUtils.createRealMatrix(modifiedData); [EOL]     TriDiagonalTransformer transformer = new TriDiagonalTransformer(matrix); [EOL]     RealMatrix q = transformer.getQ(); [EOL]     RealMatrix qT = transformer.getQT(); [EOL]     RealMatrix t = transformer.getT(); [EOL]     double norm = q.multiply(t).multiply(qT).subtract(MatrixUtils.createRealMatrix(data)).getNorm(); [EOL]     Assert.assertEquals(0, norm, 4.0e-15); [EOL] } <line_num>: 74,87
@Test [EOL] public void testQOrthogonal() { [EOL]     checkOrthogonal(new TriDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare5)).getQ()); [EOL]     checkOrthogonal(new TriDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare3)).getQ()); [EOL] } <line_num>: 89,93
@Test [EOL] public void testQTOrthogonal() { [EOL]     checkOrthogonal(new TriDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare5)).getQT()); [EOL]     checkOrthogonal(new TriDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare3)).getQT()); [EOL] } <line_num>: 95,99
private void checkOrthogonal(RealMatrix m) { [EOL]     RealMatrix mTm = m.transpose().multiply(m); [EOL]     RealMatrix id = MatrixUtils.createRealIdentityMatrix(mTm.getRowDimension()); [EOL]     Assert.assertEquals(0, mTm.subtract(id).getNorm(), 1.0e-15); [EOL] } <line_num>: 101,105
@Test [EOL] public void testTTriDiagonal() { [EOL]     checkTriDiagonal(new TriDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare5)).getT()); [EOL]     checkTriDiagonal(new TriDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare3)).getT()); [EOL] } <line_num>: 107,111
private void checkTriDiagonal(RealMatrix m) { [EOL]     final int rows = m.getRowDimension(); [EOL]     final int cols = m.getColumnDimension(); [EOL]     for (int i = 0; i < rows; ++i) { [EOL]         for (int j = 0; j < cols; ++j) { [EOL]             if ((i < j - 1) || (i > j + 1)) { [EOL]                 Assert.assertEquals(0, m.getEntry(i, j), 1.0e-16); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 113,123
@Test [EOL] public void testMatricesValues5() { [EOL]     checkMatricesValues(testSquare5, new double[][] { { 1.0, 0.0, 0.0, 0.0, 0.0 }, { 0.0, -0.5163977794943222, 0.016748280772542083, 0.839800693771262, 0.16669620021405473 }, { 0.0, -0.7745966692414833, -0.4354553000860955, -0.44989322880603355, -0.08930153582895772 }, { 0.0, -0.2581988897471611, 0.6364346693566014, -0.30263204032131164, 0.6608313651342882 }, { 0.0, -0.2581988897471611, 0.6364346693566009, -0.027289660803112598, -0.7263191580755246 } }, new double[] { 1, 4.4, 1.433099579242636, -0.89537362758743, 2.062274048344794 }, new double[] { -FastMath.sqrt(15), -3.0832882879592476, 0.6082710842351517, 1.1786086405912128 }); [EOL] } <line_num>: 125,137
@Test [EOL] public void testMatricesValues3() { [EOL]     checkMatricesValues(testSquare3, new double[][] { { 1.0, 0.0, 0.0 }, { 0.0, -0.6, 0.8 }, { 0.0, -0.8, -0.6 } }, new double[] { 1, 2.64, -0.64 }, new double[] { -5, -1.52 }); [EOL] } <line_num>: 139,149
private void checkMatricesValues(double[][] matrix, double[][] qRef, double[] mainDiagnonal, double[] secondaryDiagonal) { [EOL]     TriDiagonalTransformer transformer = new TriDiagonalTransformer(MatrixUtils.createRealMatrix(matrix)); [EOL]     RealMatrix q = transformer.getQ(); [EOL]     Assert.assertEquals(0, q.subtract(MatrixUtils.createRealMatrix(qRef)).getNorm(), 1.0e-14); [EOL]     RealMatrix t = transformer.getT(); [EOL]     double[][] tData = new double[mainDiagnonal.length][mainDiagnonal.length]; [EOL]     for (int i = 0; i < mainDiagnonal.length; ++i) { [EOL]         tData[i][i] = mainDiagnonal[i]; [EOL]         if (i > 0) { [EOL]             tData[i][i - 1] = secondaryDiagonal[i - 1]; [EOL]         } [EOL]         if (i < secondaryDiagonal.length) { [EOL]             tData[i][i + 1] = secondaryDiagonal[i]; [EOL]         } [EOL]     } [EOL]     Assert.assertEquals(0, t.subtract(MatrixUtils.createRealMatrix(tData)).getNorm(), 1.0e-14); [EOL]     Assert.assertTrue(q == transformer.getQ()); [EOL]     Assert.assertTrue(t == transformer.getT()); [EOL] } <line_num>: 151,177
