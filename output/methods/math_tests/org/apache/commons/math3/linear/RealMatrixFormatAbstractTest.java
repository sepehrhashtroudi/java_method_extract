public RealMatrixFormatAbstractTest() { [EOL]     realMatrixFormat = RealMatrixFormat.getInstance(getLocale()); [EOL]     final NumberFormat nf = NumberFormat.getInstance(getLocale()); [EOL]     nf.setMaximumFractionDigits(2); [EOL]     realMatrixFormatOctave = new RealMatrixFormat("[", "]", "", "", "; ", ", ", nf); [EOL] } <line_num>: 39,44
protected abstract Locale getLocale(); <line_num>: 35,35
protected abstract char getDecimalCharacter(); <line_num>: 37,37
@Test [EOL] public void testSimpleNoDecimals() { [EOL]     RealMatrix m = MatrixUtils.createRealMatrix(new double[][] { { 1, 1, 1 }, { 1, 1, 1 } }); [EOL]     String expected = "{{1,1,1},{1,1,1}}"; [EOL]     String actual = realMatrixFormat.format(m); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 46,52
@Test [EOL] public void testSimpleWithDecimals() { [EOL]     RealMatrix m = MatrixUtils.createRealMatrix(new double[][] { { 1.23, 1.43, 1.63 }, { 2.46, 2.46, 2.66 } }); [EOL]     String expected = "{{1" + getDecimalCharacter() + "23,1" + getDecimalCharacter() + "43,1" + getDecimalCharacter() + "63},{2" + getDecimalCharacter() + "46,2" + getDecimalCharacter() + "46,2" + getDecimalCharacter() + "66}}"; [EOL]     String actual = realMatrixFormat.format(m); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 54,67
@Test [EOL] public void testSimpleWithDecimalsTrunc() { [EOL]     RealMatrix m = MatrixUtils.createRealMatrix(new double[][] { { 1.232323232323, 1.43, 1.63 }, { 2.46, 2.46, 2.666666666666 } }); [EOL]     String expected = "{{1" + getDecimalCharacter() + "2323232323,1" + getDecimalCharacter() + "43,1" + getDecimalCharacter() + "63},{2" + getDecimalCharacter() + "46,2" + getDecimalCharacter() + "46,2" + getDecimalCharacter() + "6666666667}}"; [EOL]     String actual = realMatrixFormat.format(m); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 69,83
@Test [EOL] public void testNegativeComponent() { [EOL]     RealMatrix m = MatrixUtils.createRealMatrix(new double[][] { { -1.232323232323, 1.43, 1.63 }, { 2.46, 2.46, 2.66 } }); [EOL]     String expected = "{{-1" + getDecimalCharacter() + "2323232323,1" + getDecimalCharacter() + "43,1" + getDecimalCharacter() + "63},{2" + getDecimalCharacter() + "46,2" + getDecimalCharacter() + "46,2" + getDecimalCharacter() + "66}}"; [EOL]     String actual = realMatrixFormat.format(m); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 85,99
@Test [EOL] public void testNegativeComponent2() { [EOL]     RealMatrix m = MatrixUtils.createRealMatrix(new double[][] { { 1.23, -1.434343434343, 1.63 }, { 2.46, 2.46, 2.66 } }); [EOL]     String expected = "{{1" + getDecimalCharacter() + "23,-1" + getDecimalCharacter() + "4343434343,1" + getDecimalCharacter() + "63},{2" + getDecimalCharacter() + "46,2" + getDecimalCharacter() + "46,2" + getDecimalCharacter() + "66}}"; [EOL]     String actual = realMatrixFormat.format(m); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 101,115
@Test [EOL] public void testNegativeSecondRow() { [EOL]     RealMatrix m = MatrixUtils.createRealMatrix(new double[][] { { 1.23, 1.43, 1.63 }, { -2.66666666666, 2.46, 2.66 } }); [EOL]     String expected = "{{1" + getDecimalCharacter() + "23,1" + getDecimalCharacter() + "43,1" + getDecimalCharacter() + "63},{-2" + getDecimalCharacter() + "6666666667,2" + getDecimalCharacter() + "46,2" + getDecimalCharacter() + "66}}"; [EOL]     String actual = realMatrixFormat.format(m); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 117,131
@Test [EOL] public void testNonDefaultSetting() { [EOL]     RealMatrix m = MatrixUtils.createRealMatrix(new double[][] { { 1, 1, 1 }, { 1, 1, 1 } }); [EOL]     String expected = "[1, 1, 1; 1, 1, 1]"; [EOL]     String actual = realMatrixFormatOctave.format(m); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 133,139
@Test [EOL] public void testDefaultFormat() { [EOL]     Locale defaultLocale = Locale.getDefault(); [EOL]     Locale.setDefault(getLocale()); [EOL]     RealMatrix m = MatrixUtils.createRealMatrix(new double[][] { { 232.2222222222, -342.33333333333, 432.44444444444 } }); [EOL]     String expected = "{{232" + getDecimalCharacter() + "2222222222,-342" + getDecimalCharacter() + "3333333333,432" + getDecimalCharacter() + "4444444444}}"; [EOL]     String actual = (new RealMatrixFormat()).format(m); [EOL]     Assert.assertEquals(expected, actual); [EOL]     Locale.setDefault(defaultLocale); [EOL] } <line_num>: 141,156
@Test [EOL] public void testNan() { [EOL]     RealMatrix m = MatrixUtils.createRealMatrix(new double[][] { { Double.NaN, Double.NaN, Double.NaN } }); [EOL]     String expected = "{{(NaN),(NaN),(NaN)}}"; [EOL]     String actual = realMatrixFormat.format(m); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 158,164
@Test [EOL] public void testPositiveInfinity() { [EOL]     RealMatrix m = MatrixUtils.createRealMatrix(new double[][] { { Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY } }); [EOL]     String expected = "{{(Infinity),(Infinity),(Infinity)}}"; [EOL]     String actual = realMatrixFormat.format(m); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 166,173
@Test [EOL] public void tesNegativeInfinity() { [EOL]     RealMatrix m = MatrixUtils.createRealMatrix(new double[][] { { Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY } }); [EOL]     String expected = "{{(-Infinity),(-Infinity),(-Infinity)}}"; [EOL]     String actual = realMatrixFormat.format(m); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 175,182
@Test [EOL] public void testParseSimpleNoDecimals() { [EOL]     String source = "{{1, 1, 1}, {1, 1, 1}}"; [EOL]     RealMatrix expected = MatrixUtils.createRealMatrix(new double[][] { { 1, 1, 1 }, { 1, 1, 1 } }); [EOL]     RealMatrix actual = realMatrixFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 184,190
@Test [EOL] @Ignore [EOL] public void testParseSimpleWithClosingRowSeparator() { [EOL]     String source = "{{1, 1, 1},{1, 1, 1}, }}"; [EOL]     RealMatrix expected = MatrixUtils.createRealMatrix(new double[][] { { 1, 1, 1 }, { 1, 1, 1 } }); [EOL]     RealMatrix actual = realMatrixFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 192,199
@Test [EOL] public void testParseIgnoredWhitespace() { [EOL]     RealMatrix expected = MatrixUtils.createRealMatrix(new double[][] { { 1, 1, 1 }, { 1, 1, 1 } }); [EOL]     ParsePosition pos1 = new ParsePosition(0); [EOL]     String source1 = "{{1,1,1},{1,1,1}}"; [EOL]     Assert.assertEquals(expected, realMatrixFormat.parse(source1, pos1)); [EOL]     Assert.assertEquals(source1.length(), pos1.getIndex()); [EOL]     ParsePosition pos2 = new ParsePosition(0); [EOL]     String source2 = " { { 1 , 1 , 1 } , { 1 , 1 , 1 } } "; [EOL]     Assert.assertEquals(expected, realMatrixFormat.parse(source2, pos2)); [EOL]     Assert.assertEquals(source2.length() - 1, pos2.getIndex()); [EOL] } <line_num>: 201,212
@Test [EOL] public void testParseSimpleWithDecimals() { [EOL]     String source = "{{1" + getDecimalCharacter() + "23,1" + getDecimalCharacter() + "43,1" + getDecimalCharacter() + "63}}"; [EOL]     RealMatrix expected = MatrixUtils.createRealMatrix(new double[][] { { 1.23, 1.43, 1.63 } }); [EOL]     RealMatrix actual = realMatrixFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 214,224
@Test [EOL] public void testParseSimpleWithDecimalsTrunc() { [EOL]     String source = "{{1" + getDecimalCharacter() + "2323,1" + getDecimalCharacter() + "4343,1" + getDecimalCharacter() + "6333}}"; [EOL]     RealMatrix expected = MatrixUtils.createRealMatrix(new double[][] { { 1.2323, 1.4343, 1.6333 } }); [EOL]     RealMatrix actual = realMatrixFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 226,236
@Test [EOL] public void testParseNegativeComponent() { [EOL]     String source = "{{-1" + getDecimalCharacter() + "2323,1" + getDecimalCharacter() + "4343,1" + getDecimalCharacter() + "6333}}"; [EOL]     RealMatrix expected = MatrixUtils.createRealMatrix(new double[][] { { -1.2323, 1.4343, 1.6333 } }); [EOL]     RealMatrix actual = realMatrixFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 238,248
@Test [EOL] public void testParseNegativeAll() { [EOL]     String source = "{{-1" + getDecimalCharacter() + "2323,-1" + getDecimalCharacter() + "4343,-1" + getDecimalCharacter() + "6333}}"; [EOL]     RealMatrix expected = MatrixUtils.createRealMatrix(new double[][] { { -1.2323, -1.4343, -1.6333 } }); [EOL]     RealMatrix actual = realMatrixFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 250,260
@Test [EOL] public void testParseZeroComponent() { [EOL]     String source = "{{0" + getDecimalCharacter() + "0,-1" + getDecimalCharacter() + "4343,1" + getDecimalCharacter() + "6333}}"; [EOL]     RealMatrix expected = MatrixUtils.createRealMatrix(new double[][] { { 0.0, -1.4343, 1.6333 } }); [EOL]     RealMatrix actual = realMatrixFormat.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 262,272
@Test [EOL] public void testParseNonDefaultSetting() { [EOL]     String source = "[1" + getDecimalCharacter() + "2323, 1" + getDecimalCharacter() + "4343, 1" + getDecimalCharacter() + "6333]"; [EOL]     RealMatrix expected = MatrixUtils.createRealMatrix(new double[][] { { 1.2323, 1.4343, 1.6333 } }); [EOL]     RealMatrix actual = realMatrixFormatOctave.parse(source); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 274,284
@Test [EOL] public void testParseNan() { [EOL]     String source = "{{(NaN), (NaN), (NaN)}}"; [EOL]     RealMatrix actual = realMatrixFormat.parse(source); [EOL]     RealMatrix expected = MatrixUtils.createRealMatrix(new double[][] { { Double.NaN, Double.NaN, Double.NaN } }); [EOL]     for (int i = 0; i < expected.getRowDimension(); i++) { [EOL]         for (int j = 0; j < expected.getColumnDimension(); j++) { [EOL]             Assert.assertTrue(Double.isNaN(actual.getEntry(i, j))); [EOL]         } [EOL]     } [EOL] } <line_num>: 286,296
@Test [EOL] public void testParsePositiveInfinity() { [EOL]     String source = "{{(Infinity), (Infinity), (Infinity)}}"; [EOL]     RealMatrix actual = realMatrixFormat.parse(source); [EOL]     RealMatrix expected = MatrixUtils.createRealMatrix(new double[][] { { Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY } }); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 298,305
@Test [EOL] public void testParseNegativeInfinity() { [EOL]     String source = "{{(-Infinity), (-Infinity), (-Infinity)}}"; [EOL]     RealMatrix actual = realMatrixFormat.parse(source); [EOL]     RealMatrix expected = MatrixUtils.createRealMatrix(new double[][] { { Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY } }); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 307,314
@Test [EOL] public void testParseNoComponents() { [EOL]     try { [EOL]         realMatrixFormat.parse("{{ }}"); [EOL]         Assert.fail("Expecting MathParseException"); [EOL]     } catch (MathParseException pe) { [EOL]     } [EOL] } <line_num>: 316,324
@Test [EOL] public void testParseManyComponents() { [EOL]     RealMatrix parsed = realMatrixFormat.parse("{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}"); [EOL]     Assert.assertEquals(24, parsed.getColumnDimension()); [EOL] } <line_num>: 326,330
@Test [EOL] public void testConstructorSingleFormat() { [EOL]     NumberFormat nf = NumberFormat.getInstance(); [EOL]     RealMatrixFormat mf = new RealMatrixFormat(nf); [EOL]     Assert.assertNotNull(mf); [EOL]     Assert.assertEquals(nf, mf.getFormat()); [EOL] } <line_num>: 332,338
@Test [EOL] public void testForgottenPrefix() { [EOL]     ParsePosition pos = new ParsePosition(0); [EOL]     final String source = "1; 1; 1]"; [EOL]     Assert.assertNull("Should not parse <" + source + ">", realMatrixFormat.parse(source, pos)); [EOL]     Assert.assertEquals(0, pos.getErrorIndex()); [EOL] } <line_num>: 340,346
@Test [EOL] public void testForgottenSeparator() { [EOL]     ParsePosition pos = new ParsePosition(0); [EOL]     final String source = "{{1, 1 1}}"; [EOL]     Assert.assertNull("Should not parse <" + source + ">", realMatrixFormat.parse(source, pos)); [EOL]     Assert.assertEquals(7, pos.getErrorIndex()); [EOL] } <line_num>: 348,354
@Test [EOL] public void testForgottenSuffix() { [EOL]     ParsePosition pos = new ParsePosition(0); [EOL]     final String source = "{{1, 1, 1 "; [EOL]     Assert.assertNull("Should not parse <" + source + ">", realMatrixFormat.parse(source, pos)); [EOL]     Assert.assertEquals(9, pos.getErrorIndex()); [EOL] } <line_num>: 356,362
