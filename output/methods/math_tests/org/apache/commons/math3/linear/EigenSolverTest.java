@Test [EOL] public void testNonInvertible() { [EOL]     Random r = new Random(9994100315209l); [EOL]     RealMatrix m = EigenDecompositionTest.createTestMatrix(r, new double[] { 1.0, 0.0, -1.0, -2.0, -3.0 }); [EOL]     DecompositionSolver es = new EigenDecomposition(m).getSolver(); [EOL]     Assert.assertFalse(es.isNonSingular()); [EOL]     try { [EOL]         es.getInverse(); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (SingularMatrixException ime) { [EOL]     } [EOL] } <line_num>: 30,43
@Test [EOL] public void testInvertible() { [EOL]     Random r = new Random(9994100315209l); [EOL]     RealMatrix m = EigenDecompositionTest.createTestMatrix(r, new double[] { 1.0, 0.5, -1.0, -2.0, -3.0 }); [EOL]     DecompositionSolver es = new EigenDecomposition(m).getSolver(); [EOL]     Assert.assertTrue(es.isNonSingular()); [EOL]     RealMatrix inverse = es.getInverse(); [EOL]     RealMatrix error = m.multiply(inverse).subtract(MatrixUtils.createRealIdentityMatrix(m.getRowDimension())); [EOL]     Assert.assertEquals(0, error.getNorm(), 4.0e-15); [EOL] } <line_num>: 46,57
@Test [EOL] public void testSolveDimensionErrors() { [EOL]     final double[] refValues = new double[] { 2.003, 2.002, 2.001, 1.001, 1.000, 0.001 }; [EOL]     final RealMatrix matrix = EigenDecompositionTest.createTestMatrix(new Random(35992629946426l), refValues); [EOL]     DecompositionSolver es = new EigenDecomposition(matrix).getSolver(); [EOL]     RealMatrix b = MatrixUtils.createRealMatrix(new double[2][2]); [EOL]     try { [EOL]         es.solve(b); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (MathIllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         es.solve(b.getColumnVector(0)); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (MathIllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         es.solve(new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(0))); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (MathIllegalArgumentException iae) { [EOL]     } [EOL] } <line_num>: 60,87
@Test [EOL] public void testSolve() { [EOL]     RealMatrix m = MatrixUtils.createRealMatrix(new double[][] { { 91, 5, 29, 32, 40, 14 }, { 5, 34, -1, 0, 2, -1 }, { 29, -1, 12, 9, 21, 8 }, { 32, 0, 9, 14, 9, 0 }, { 40, 2, 21, 9, 51, 19 }, { 14, -1, 8, 0, 19, 14 } }); [EOL]     DecompositionSolver es = new EigenDecomposition(m).getSolver(); [EOL]     RealMatrix b = MatrixUtils.createRealMatrix(new double[][] { { 1561, 269, 188 }, { 69, -21, 70 }, { 739, 108, 63 }, { 324, 86, 59 }, { 1624, 194, 107 }, { 796, 69, 36 } }); [EOL]     RealMatrix xRef = MatrixUtils.createRealMatrix(new double[][] { { 1, 2, 1 }, { 2, -1, 2 }, { 4, 2, 3 }, { 8, -1, 0 }, { 16, 2, 0 }, { 32, -1, 0 } }); [EOL]     RealMatrix solution = es.solve(b); [EOL]     Assert.assertEquals(0, solution.subtract(xRef).getNorm(), 2.5e-12); [EOL]     for (int i = 0; i < b.getColumnDimension(); ++i) { [EOL]         Assert.assertEquals(0, es.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(), 2.0e-11); [EOL]     } [EOL]     for (int i = 0; i < b.getColumnDimension(); ++i) { [EOL]         ArrayRealVectorTest.RealVectorTestImpl v = new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(i)); [EOL]         Assert.assertEquals(0, es.solve(v).subtract(xRef.getColumnVector(i)).getNorm(), 2.0e-11); [EOL]     } [EOL] } <line_num>: 90,137
