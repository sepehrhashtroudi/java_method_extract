@Test [EOL] public void testDecomposition3x3() { [EOL]     RealMatrix m = MatrixUtils.createRealMatrix(new double[][] { { 1, 9, 9 }, { 9, 225, 225 }, { 9, 225, 625 } }); [EOL]     RectangularCholeskyDecomposition d = new RectangularCholeskyDecomposition(m, 1.0e-6); [EOL]     Assert.assertEquals(0.8, d.getRootMatrix().getEntry(0, 2), 1.0e-15); [EOL]     Assert.assertEquals(25.0, d.getRootMatrix().getEntry(2, 0), 1.0e-15); [EOL]     Assert.assertEquals(0.0, d.getRootMatrix().getEntry(2, 2), 1.0e-15); [EOL]     RealMatrix root = d.getRootMatrix(); [EOL]     RealMatrix rebuiltM = root.multiply(root.transpose()); [EOL]     Assert.assertEquals(0.0, m.subtract(rebuiltM).getNorm(), 1.0e-15); [EOL] } <line_num>: 25,48
@Test [EOL] public void testFullRank() { [EOL]     RealMatrix base = MatrixUtils.createRealMatrix(new double[][] { { 0.1159548705, 0., 0., 0. }, { 0.0896442724, 0.1223540781, 0., 0. }, { 0.0852155322, 4.558668e-3, 0.1083577299, 0. }, { 0.0905486674, 0.0213768077, 0.0128878333, 0.1014155693 } }); [EOL]     RealMatrix m = base.multiply(base.transpose()); [EOL]     RectangularCholeskyDecomposition d = new RectangularCholeskyDecomposition(m, 1.0e-10); [EOL]     RealMatrix root = d.getRootMatrix(); [EOL]     RealMatrix rebuiltM = root.multiply(root.transpose()); [EOL]     Assert.assertEquals(0.0, m.subtract(rebuiltM).getNorm(), 1.0e-15); [EOL]     Assert.assertTrue(root.subtract(base).getNorm() > 0.3); [EOL] } <line_num>: 50,73
@Test [EOL] public void testMath789() { [EOL]     final RealMatrix m1 = MatrixUtils.createRealMatrix(new double[][] { { 0.013445532, 0.010394690, 0.009881156, 0.010499559 }, { 0.010394690, 0.023006616, 0.008196856, 0.010732709 }, { 0.009881156, 0.008196856, 0.019023866, 0.009210099 }, { 0.010499559, 0.010732709, 0.009210099, 0.019107243 } }); [EOL]     composeAndTest(m1, 4); [EOL]     final RealMatrix m2 = MatrixUtils.createRealMatrix(new double[][] { { 0.0, 0.0, 0.0, 0.0, 0.0 }, { 0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559 }, { 0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709 }, { 0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099 }, { 0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243 } }); [EOL]     composeAndTest(m2, 4); [EOL]     final RealMatrix m3 = MatrixUtils.createRealMatrix(new double[][] { { 0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559 }, { 0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709 }, { 0.0, 0.0, 0.0, 0.0, 0.0 }, { 0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099 }, { 0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243 } }); [EOL]     composeAndTest(m3, 4); [EOL] } <line_num>: 75,104
private void composeAndTest(RealMatrix m, int expectedRank) { [EOL]     RectangularCholeskyDecomposition r = new RectangularCholeskyDecomposition(m); [EOL]     Assert.assertEquals(expectedRank, r.getRank()); [EOL]     RealMatrix root = r.getRootMatrix(); [EOL]     RealMatrix rebuiltMatrix = root.multiply(root.transpose()); [EOL]     Assert.assertEquals(0.0, m.subtract(rebuiltMatrix).getNorm(), 1.0e-16); [EOL] } <line_num>: 106,112
