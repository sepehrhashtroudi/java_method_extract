public static FieldMatrix<Fraction> createFractionMatrix(final int[][] data) { [EOL]     final int numRows = data.length; [EOL]     final int numCols = data[0].length; [EOL]     final Array2DRowFieldMatrix<Fraction> m; [EOL]     m = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), numRows, numCols); [EOL]     for (int i = 0; i < numRows; i++) { [EOL]         for (int j = 0; j < numCols; j++) { [EOL]             m.setEntry(i, j, new Fraction(data[i][j], 1)); [EOL]         } [EOL]     } [EOL]     return m; [EOL] } <line_num>: 50,62
@Test [EOL] public void testSingular() { [EOL]     FieldDecompositionSolver<Fraction> solver; [EOL]     solver = new FieldLUDecomposition<Fraction>(createFractionMatrix(testData)).getSolver(); [EOL]     Assert.assertTrue(solver.isNonSingular()); [EOL]     solver = new FieldLUDecomposition<Fraction>(createFractionMatrix(singular)).getSolver(); [EOL]     Assert.assertFalse(solver.isNonSingular()); [EOL]     solver = new FieldLUDecomposition<Fraction>(createFractionMatrix(bigSingular)).getSolver(); [EOL]     Assert.assertFalse(solver.isNonSingular()); [EOL] } <line_num>: 65,77
@Test [EOL] public void testSolveDimensionErrors() { [EOL]     FieldDecompositionSolver<Fraction> solver; [EOL]     solver = new FieldLUDecomposition<Fraction>(createFractionMatrix(testData)).getSolver(); [EOL]     FieldMatrix<Fraction> b = createFractionMatrix(new int[2][2]); [EOL]     try { [EOL]         solver.solve(b); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (MathIllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         solver.solve(b.getColumnVector(0)); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (MathIllegalArgumentException iae) { [EOL]     } [EOL] } <line_num>: 80,98
@Test [EOL] public void testSolveSingularityErrors() { [EOL]     FieldDecompositionSolver<Fraction> solver; [EOL]     solver = new FieldLUDecomposition<Fraction>(createFractionMatrix(singular)).getSolver(); [EOL]     FieldMatrix<Fraction> b = createFractionMatrix(new int[2][2]); [EOL]     try { [EOL]         solver.solve(b); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (SingularMatrixException ime) { [EOL]     } [EOL]     try { [EOL]         solver.solve(b.getColumnVector(0)); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (SingularMatrixException ime) { [EOL]     } [EOL] } <line_num>: 101,119
@Test [EOL] public void testSolve() { [EOL]     FieldDecompositionSolver<Fraction> solver; [EOL]     solver = new FieldLUDecomposition<Fraction>(createFractionMatrix(testData)).getSolver(); [EOL]     FieldMatrix<Fraction> b = createFractionMatrix(new int[][] { { 1, 0 }, { 2, -5 }, { 3, 1 } }); [EOL]     FieldMatrix<Fraction> xRef = createFractionMatrix(new int[][] { { 19, -71 }, { -6, 22 }, { -2, 9 } }); [EOL]     FieldMatrix<Fraction> x = solver.solve(b); [EOL]     for (int i = 0; i < x.getRowDimension(); i++) { [EOL]         for (int j = 0; j < x.getColumnDimension(); j++) { [EOL]             Assert.assertEquals("(" + i + ", " + j + ")", xRef.getEntry(i, j), x.getEntry(i, j)); [EOL]         } [EOL]     } [EOL]     for (int j = 0; j < b.getColumnDimension(); j++) { [EOL]         final FieldVector<Fraction> xj = solver.solve(b.getColumnVector(j)); [EOL]         for (int i = 0; i < xj.getDimension(); i++) { [EOL]             Assert.assertEquals("(" + i + ", " + j + ")", xRef.getEntry(i, j), xj.getEntry(i)); [EOL]         } [EOL]     } [EOL]     for (int j = 0; j < b.getColumnDimension(); j++) { [EOL]         final SparseFieldVector<Fraction> bj; [EOL]         bj = new SparseFieldVector<Fraction>(FractionField.getInstance(), b.getColumn(j)); [EOL]         final FieldVector<Fraction> xj = solver.solve(bj); [EOL]         for (int i = 0; i < xj.getDimension(); i++) { [EOL]             Assert.assertEquals("(" + i + ", " + j + ")", xRef.getEntry(i, j), xj.getEntry(i)); [EOL]         } [EOL]     } [EOL] } <line_num>: 122,163
@Test [EOL] public void testDeterminant() { [EOL]     Assert.assertEquals(-1, getDeterminant(createFractionMatrix(testData)), 1E-15); [EOL]     Assert.assertEquals(-10, getDeterminant(createFractionMatrix(luData)), 1E-14); [EOL]     Assert.assertEquals(0, getDeterminant(createFractionMatrix(singular)), 1E-15); [EOL]     Assert.assertEquals(0, getDeterminant(createFractionMatrix(bigSingular)), 1E-15); [EOL] } <line_num>: 166,172
private double getDeterminant(final FieldMatrix<Fraction> m) { [EOL]     return new FieldLUDecomposition<Fraction>(m).getDeterminant().doubleValue(); [EOL] } <line_num>: 174,176
