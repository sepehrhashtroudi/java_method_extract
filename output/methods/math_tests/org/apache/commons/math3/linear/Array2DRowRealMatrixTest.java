@Test [EOL] public void testDimensions() { [EOL]     Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData); [EOL]     Array2DRowRealMatrix m2 = new Array2DRowRealMatrix(testData2); [EOL]     Assert.assertEquals("testData row dimension", 3, m.getRowDimension()); [EOL]     Assert.assertEquals("testData column dimension", 3, m.getColumnDimension()); [EOL]     Assert.assertTrue("testData is square", m.isSquare()); [EOL]     Assert.assertEquals("testData2 row dimension", m2.getRowDimension(), 2); [EOL]     Assert.assertEquals("testData2 column dimension", m2.getColumnDimension(), 3); [EOL]     Assert.assertTrue("testData2 is not square", !m2.isSquare()); [EOL] } <line_num>: 102,112
@Test [EOL] public void testCopyFunctions() { [EOL]     Array2DRowRealMatrix m1 = new Array2DRowRealMatrix(testData); [EOL]     Array2DRowRealMatrix m2 = new Array2DRowRealMatrix(m1.getData()); [EOL]     Assert.assertEquals(m2, m1); [EOL]     Array2DRowRealMatrix m3 = new Array2DRowRealMatrix(testData); [EOL]     Array2DRowRealMatrix m4 = new Array2DRowRealMatrix(m3.getData(), false); [EOL]     Assert.assertEquals(m4, m3); [EOL] } <line_num>: 115,123
@Test [EOL] public void testAdd() { [EOL]     Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData); [EOL]     Array2DRowRealMatrix mInv = new Array2DRowRealMatrix(testDataInv); [EOL]     RealMatrix mPlusMInv = m.add(mInv); [EOL]     double[][] sumEntries = mPlusMInv.getData(); [EOL]     for (int row = 0; row < m.getRowDimension(); row++) { [EOL]         for (int col = 0; col < m.getColumnDimension(); col++) { [EOL]             Assert.assertEquals("sum entry entry", testDataPlusInv[row][col], sumEntries[row][col], entryTolerance); [EOL]         } [EOL]     } [EOL] } <line_num>: 126,139
@Test [EOL] public void testAddFail() { [EOL]     Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData); [EOL]     Array2DRowRealMatrix m2 = new Array2DRowRealMatrix(testData2); [EOL]     try { [EOL]         m.add(m2); [EOL]         Assert.fail("MathIllegalArgumentException expected"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 142,152
@Test [EOL] public void testNorm() { [EOL]     Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData); [EOL]     Array2DRowRealMatrix m2 = new Array2DRowRealMatrix(testData2); [EOL]     Assert.assertEquals("testData norm", 14d, m.getNorm(), entryTolerance); [EOL]     Assert.assertEquals("testData2 norm", 7d, m2.getNorm(), entryTolerance); [EOL] } <line_num>: 155,161
@Test [EOL] public void testFrobeniusNorm() { [EOL]     Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData); [EOL]     Array2DRowRealMatrix m2 = new Array2DRowRealMatrix(testData2); [EOL]     Assert.assertEquals("testData Frobenius norm", FastMath.sqrt(117.0), m.getFrobeniusNorm(), entryTolerance); [EOL]     Assert.assertEquals("testData2 Frobenius norm", FastMath.sqrt(52.0), m2.getFrobeniusNorm(), entryTolerance); [EOL] } <line_num>: 164,170
@Test [EOL] public void testPlusMinus() { [EOL]     Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData); [EOL]     Array2DRowRealMatrix m2 = new Array2DRowRealMatrix(testDataInv); [EOL]     TestUtils.assertEquals("m-n = m + -n", m.subtract(m2), m2.scalarMultiply(-1d).add(m), entryTolerance); [EOL]     try { [EOL]         m.subtract(new Array2DRowRealMatrix(testData2)); [EOL]         Assert.fail("Expecting illegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 173,185
@Test [EOL] public void testMultiply() { [EOL]     Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData); [EOL]     Array2DRowRealMatrix mInv = new Array2DRowRealMatrix(testDataInv); [EOL]     Array2DRowRealMatrix identity = new Array2DRowRealMatrix(id); [EOL]     Array2DRowRealMatrix m2 = new Array2DRowRealMatrix(testData2); [EOL]     TestUtils.assertEquals("inverse multiply", m.multiply(mInv), identity, entryTolerance); [EOL]     TestUtils.assertEquals("inverse multiply", mInv.multiply(m), identity, entryTolerance); [EOL]     TestUtils.assertEquals("identity multiply", m.multiply(identity), m, entryTolerance); [EOL]     TestUtils.assertEquals("identity multiply", identity.multiply(mInv), mInv, entryTolerance); [EOL]     TestUtils.assertEquals("identity multiply", m2.multiply(identity), m2, entryTolerance); [EOL]     try { [EOL]         m.multiply(new Array2DRowRealMatrix(bigSingular)); [EOL]         Assert.fail("Expecting illegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 188,210
@Test [EOL] public void testMultiply2() { [EOL]     RealMatrix m3 = new Array2DRowRealMatrix(d3); [EOL]     RealMatrix m4 = new Array2DRowRealMatrix(d4); [EOL]     RealMatrix m5 = new Array2DRowRealMatrix(d5); [EOL]     TestUtils.assertEquals("m3*m4=m5", m3.multiply(m4), m5, entryTolerance); [EOL] } <line_num>: 218,224
@Test [EOL] public void testPower() { [EOL]     Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData); [EOL]     Array2DRowRealMatrix mInv = new Array2DRowRealMatrix(testDataInv); [EOL]     Array2DRowRealMatrix mPlusInv = new Array2DRowRealMatrix(testDataPlusInv); [EOL]     Array2DRowRealMatrix identity = new Array2DRowRealMatrix(id); [EOL]     TestUtils.assertEquals("m^0", m.power(0), identity, entryTolerance); [EOL]     TestUtils.assertEquals("mInv^0", mInv.power(0), identity, entryTolerance); [EOL]     TestUtils.assertEquals("mPlusInv^0", mPlusInv.power(0), identity, entryTolerance); [EOL]     TestUtils.assertEquals("m^1", m.power(1), m, entryTolerance); [EOL]     TestUtils.assertEquals("mInv^1", mInv.power(1), mInv, entryTolerance); [EOL]     TestUtils.assertEquals("mPlusInv^1", mPlusInv.power(1), mPlusInv, entryTolerance); [EOL]     RealMatrix C1 = m.copy(); [EOL]     RealMatrix C2 = mInv.copy(); [EOL]     RealMatrix C3 = mPlusInv.copy(); [EOL]     for (int i = 2; i <= 10; ++i) { [EOL]         C1 = C1.multiply(m); [EOL]         C2 = C2.multiply(mInv); [EOL]         C3 = C3.multiply(mPlusInv); [EOL]         TestUtils.assertEquals("m^" + i, m.power(i), C1, entryTolerance); [EOL]         TestUtils.assertEquals("mInv^" + i, mInv.power(i), C2, entryTolerance); [EOL]         TestUtils.assertEquals("mPlusInv^" + i, mPlusInv.power(i), C3, entryTolerance); [EOL]     } [EOL]     try { [EOL]         Array2DRowRealMatrix mNotSquare = new Array2DRowRealMatrix(testData2T); [EOL]         mNotSquare.power(2); [EOL]         Assert.fail("Expecting NonSquareMatrixException"); [EOL]     } catch (NonSquareMatrixException ex) { [EOL]     } [EOL]     try { [EOL]         m.power(-1); [EOL]         Assert.fail("Expecting IllegalArgumentException"); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 226,278
@Test [EOL] public void testTrace() { [EOL]     RealMatrix m = new Array2DRowRealMatrix(id); [EOL]     Assert.assertEquals("identity trace", 3d, m.getTrace(), entryTolerance); [EOL]     m = new Array2DRowRealMatrix(testData2); [EOL]     try { [EOL]         m.getTrace(); [EOL]         Assert.fail("Expecting NonSquareMatrixException"); [EOL]     } catch (NonSquareMatrixException ex) { [EOL]     } [EOL] } <line_num>: 281,292
@Test [EOL] public void testScalarAdd() { [EOL]     RealMatrix m = new Array2DRowRealMatrix(testData); [EOL]     TestUtils.assertEquals("scalar add", new Array2DRowRealMatrix(testDataPlus2), m.scalarAdd(2d), entryTolerance); [EOL] } <line_num>: 295,300
@Test [EOL] public void testOperate() { [EOL]     RealMatrix m = new Array2DRowRealMatrix(id); [EOL]     TestUtils.assertEquals("identity operate", testVector, m.operate(testVector), entryTolerance); [EOL]     TestUtils.assertEquals("identity operate", testVector, m.operate(new ArrayRealVector(testVector)).toArray(), entryTolerance); [EOL]     m = new Array2DRowRealMatrix(bigSingular); [EOL]     try { [EOL]         m.operate(testVector); [EOL]         Assert.fail("Expecting illegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 303,317
@Test [EOL] public void testMath209() { [EOL]     RealMatrix a = new Array2DRowRealMatrix(new double[][] { { 1, 2 }, { 3, 4 }, { 5, 6 } }, false); [EOL]     double[] b = a.operate(new double[] { 1, 1 }); [EOL]     Assert.assertEquals(a.getRowDimension(), b.length); [EOL]     Assert.assertEquals(3.0, b[0], 1.0e-12); [EOL]     Assert.assertEquals(7.0, b[1], 1.0e-12); [EOL]     Assert.assertEquals(11.0, b[2], 1.0e-12); [EOL] } <line_num>: 320,330
@Test [EOL] public void testTranspose() { [EOL]     RealMatrix m = new Array2DRowRealMatrix(testData); [EOL]     RealMatrix mIT = new LUDecomposition(m).getSolver().getInverse().transpose(); [EOL]     RealMatrix mTI = new LUDecomposition(m.transpose()).getSolver().getInverse(); [EOL]     TestUtils.assertEquals("inverse-transpose", mIT, mTI, normTolerance); [EOL]     m = new Array2DRowRealMatrix(testData2); [EOL]     RealMatrix mt = new Array2DRowRealMatrix(testData2T); [EOL]     TestUtils.assertEquals("transpose", mt, m.transpose(), normTolerance); [EOL] } <line_num>: 333,342
@Test [EOL] public void testPremultiplyVector() { [EOL]     RealMatrix m = new Array2DRowRealMatrix(testData); [EOL]     TestUtils.assertEquals("premultiply", m.preMultiply(testVector), preMultTest, normTolerance); [EOL]     TestUtils.assertEquals("premultiply", m.preMultiply(new ArrayRealVector(testVector).toArray()), preMultTest, normTolerance); [EOL]     m = new Array2DRowRealMatrix(bigSingular); [EOL]     try { [EOL]         m.preMultiply(testVector); [EOL]         Assert.fail("expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 345,359
@Test [EOL] public void testPremultiply() { [EOL]     RealMatrix m3 = new Array2DRowRealMatrix(d3); [EOL]     RealMatrix m4 = new Array2DRowRealMatrix(d4); [EOL]     RealMatrix m5 = new Array2DRowRealMatrix(d5); [EOL]     TestUtils.assertEquals("m3*m4=m5", m4.preMultiply(m3), m5, entryTolerance); [EOL]     Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData); [EOL]     Array2DRowRealMatrix mInv = new Array2DRowRealMatrix(testDataInv); [EOL]     Array2DRowRealMatrix identity = new Array2DRowRealMatrix(id); [EOL]     TestUtils.assertEquals("inverse multiply", m.preMultiply(mInv), identity, entryTolerance); [EOL]     TestUtils.assertEquals("inverse multiply", mInv.preMultiply(m), identity, entryTolerance); [EOL]     TestUtils.assertEquals("identity multiply", m.preMultiply(identity), m, entryTolerance); [EOL]     TestUtils.assertEquals("identity multiply", identity.preMultiply(mInv), mInv, entryTolerance); [EOL]     try { [EOL]         m.preMultiply(new Array2DRowRealMatrix(bigSingular)); [EOL]         Assert.fail("Expecting illegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 361,385
@Test [EOL] public void testGetVectors() { [EOL]     RealMatrix m = new Array2DRowRealMatrix(testData); [EOL]     TestUtils.assertEquals("get row", m.getRow(0), testDataRow1, entryTolerance); [EOL]     TestUtils.assertEquals("get col", m.getColumn(2), testDataCol3, entryTolerance); [EOL]     try { [EOL]         m.getRow(10); [EOL]         Assert.fail("expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.getColumn(-1); [EOL]         Assert.fail("expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 387,404
@Test [EOL] public void testGetEntry() { [EOL]     RealMatrix m = new Array2DRowRealMatrix(testData); [EOL]     Assert.assertEquals("get entry", m.getEntry(0, 1), 2d, entryTolerance); [EOL]     try { [EOL]         m.getEntry(10, 4); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 406,416
@Test [EOL] public void testExamples() { [EOL]     double[][] matrixData = { { 1d, 2d, 3d }, { 2d, 5d, 3d } }; [EOL]     RealMatrix m = new Array2DRowRealMatrix(matrixData); [EOL]     double[][] matrixData2 = { { 1d, 2d }, { 2d, 5d }, { 1d, 7d } }; [EOL]     RealMatrix n = new Array2DRowRealMatrix(matrixData2); [EOL]     RealMatrix p = m.multiply(n); [EOL]     Assert.assertEquals(2, p.getRowDimension()); [EOL]     Assert.assertEquals(2, p.getColumnDimension()); [EOL]     RealMatrix pInverse = new LUDecomposition(p).getSolver().getInverse(); [EOL]     Assert.assertEquals(2, pInverse.getRowDimension()); [EOL]     Assert.assertEquals(2, pInverse.getColumnDimension()); [EOL]     double[][] coefficientsData = { { 2, 3, -2 }, { -1, 7, 6 }, { 4, -3, -5 } }; [EOL]     RealMatrix coefficients = new Array2DRowRealMatrix(coefficientsData); [EOL]     RealVector constants = new ArrayRealVector(new double[] { 1, -2, 1 }, false); [EOL]     RealVector solution = new LUDecomposition(coefficients).getSolver().solve(constants); [EOL]     final double cst0 = constants.getEntry(0); [EOL]     final double cst1 = constants.getEntry(1); [EOL]     final double cst2 = constants.getEntry(2); [EOL]     final double sol0 = solution.getEntry(0); [EOL]     final double sol1 = solution.getEntry(1); [EOL]     final double sol2 = solution.getEntry(2); [EOL]     Assert.assertEquals(2 * sol0 + 3 * sol1 - 2 * sol2, cst0, 1E-12); [EOL]     Assert.assertEquals(-1 * sol0 + 7 * sol1 + 6 * sol2, cst1, 1E-12); [EOL]     Assert.assertEquals(4 * sol0 - 3 * sol1 - 5 * sol2, cst2, 1E-12); [EOL] } <line_num>: 419,450
@Test [EOL] public void testGetSubMatrix() { [EOL]     RealMatrix m = new Array2DRowRealMatrix(subTestData); [EOL]     checkGetSubMatrix(m, subRows23Cols00, 2, 3, 0, 0, false); [EOL]     checkGetSubMatrix(m, subRows00Cols33, 0, 0, 3, 3, false); [EOL]     checkGetSubMatrix(m, subRows01Cols23, 0, 1, 2, 3, false); [EOL]     checkGetSubMatrix(m, subRows02Cols13, new int[] { 0, 2 }, new int[] { 1, 3 }, false); [EOL]     checkGetSubMatrix(m, subRows03Cols12, new int[] { 0, 3 }, new int[] { 1, 2 }, false); [EOL]     checkGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false); [EOL]     checkGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false); [EOL]     checkGetSubMatrix(m, subRows31Cols31, new int[] { 3, 1 }, new int[] { 3, 1 }, false); [EOL]     checkGetSubMatrix(m, subRows31Cols31, new int[] { 3, 1 }, new int[] { 3, 1 }, false); [EOL]     checkGetSubMatrix(m, null, 1, 0, 2, 4, true); [EOL]     checkGetSubMatrix(m, null, -1, 1, 2, 2, true); [EOL]     checkGetSubMatrix(m, null, 1, 0, 2, 2, true); [EOL]     checkGetSubMatrix(m, null, 1, 0, 2, 4, true); [EOL]     checkGetSubMatrix(m, null, new int[] {}, new int[] { 0 }, true); [EOL]     checkGetSubMatrix(m, null, new int[] { 0 }, new int[] { 4 }, true); [EOL] } <line_num>: 453,471
private void checkGetSubMatrix(RealMatrix m, double[][] reference, int startRow, int endRow, int startColumn, int endColumn, boolean mustFail) { [EOL]     try { [EOL]         RealMatrix sub = m.getSubMatrix(startRow, endRow, startColumn, endColumn); [EOL]         Assert.assertEquals(new Array2DRowRealMatrix(reference), sub); [EOL]         if (mustFail) { [EOL]             Assert.fail("Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"); [EOL]         } [EOL]     } catch (OutOfRangeException e) { [EOL]         if (!mustFail) { [EOL]             throw e; [EOL]         } [EOL]     } catch (NumberIsTooSmallException e) { [EOL]         if (!mustFail) { [EOL]             throw e; [EOL]         } [EOL]     } catch (NoDataException e) { [EOL]         if (!mustFail) { [EOL]             throw e; [EOL]         } [EOL]     } [EOL] } <line_num>: 473,495
private void checkGetSubMatrix(RealMatrix m, double[][] reference, int[] selectedRows, int[] selectedColumns, boolean mustFail) { [EOL]     try { [EOL]         RealMatrix sub = m.getSubMatrix(selectedRows, selectedColumns); [EOL]         Assert.assertEquals(new Array2DRowRealMatrix(reference), sub); [EOL]         if (mustFail) { [EOL]             Assert.fail("Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"); [EOL]         } [EOL]     } catch (OutOfRangeException e) { [EOL]         if (!mustFail) { [EOL]             throw e; [EOL]         } [EOL]     } catch (NumberIsTooSmallException e) { [EOL]         if (!mustFail) { [EOL]             throw e; [EOL]         } [EOL]     } catch (NoDataException e) { [EOL]         if (!mustFail) { [EOL]             throw e; [EOL]         } [EOL]     } [EOL] } <line_num>: 497,519
@Test [EOL] public void testCopySubMatrix() { [EOL]     RealMatrix m = new Array2DRowRealMatrix(subTestData); [EOL]     checkCopy(m, subRows23Cols00, 2, 3, 0, 0, false); [EOL]     checkCopy(m, subRows00Cols33, 0, 0, 3, 3, false); [EOL]     checkCopy(m, subRows01Cols23, 0, 1, 2, 3, false); [EOL]     checkCopy(m, subRows02Cols13, new int[] { 0, 2 }, new int[] { 1, 3 }, false); [EOL]     checkCopy(m, subRows03Cols12, new int[] { 0, 3 }, new int[] { 1, 2 }, false); [EOL]     checkCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false); [EOL]     checkCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false); [EOL]     checkCopy(m, subRows31Cols31, new int[] { 3, 1 }, new int[] { 3, 1 }, false); [EOL]     checkCopy(m, subRows31Cols31, new int[] { 3, 1 }, new int[] { 3, 1 }, false); [EOL]     checkCopy(m, null, 1, 0, 2, 4, true); [EOL]     checkCopy(m, null, -1, 1, 2, 2, true); [EOL]     checkCopy(m, null, 1, 0, 2, 2, true); [EOL]     checkCopy(m, null, 1, 0, 2, 4, true); [EOL]     checkCopy(m, null, new int[] {}, new int[] { 0 }, true); [EOL]     checkCopy(m, null, new int[] { 0 }, new int[] { 4 }, true); [EOL]     double[][] copy = new double[][] { { 0, 0, 0 }, { 0, 0 } }; [EOL]     checkCopy(m, copy, 0, 1, 0, 2, true); [EOL]     checkCopy(m, copy, new int[] { 0, 1 }, new int[] { 0, 1, 2 }, true); [EOL] } <line_num>: 521,545
private void checkCopy(RealMatrix m, double[][] reference, int startRow, int endRow, int startColumn, int endColumn, boolean mustFail) { [EOL]     try { [EOL]         double[][] sub = (reference == null) ? new double[1][1] : createIdenticalCopy(reference); [EOL]         m.copySubMatrix(startRow, endRow, startColumn, endColumn, sub); [EOL]         Assert.assertEquals(new Array2DRowRealMatrix(reference), new Array2DRowRealMatrix(sub)); [EOL]         if (mustFail) { [EOL]             Assert.fail("Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"); [EOL]         } [EOL]     } catch (OutOfRangeException e) { [EOL]         if (!mustFail) { [EOL]             throw e; [EOL]         } [EOL]     } catch (NumberIsTooSmallException e) { [EOL]         if (!mustFail) { [EOL]             throw e; [EOL]         } [EOL]     } catch (NoDataException e) { [EOL]         if (!mustFail) { [EOL]             throw e; [EOL]         } [EOL]     } catch (MatrixDimensionMismatchException e) { [EOL]         if (!mustFail) { [EOL]             throw e; [EOL]         } [EOL]     } [EOL] } <line_num>: 547,575
private void checkCopy(RealMatrix m, double[][] reference, int[] selectedRows, int[] selectedColumns, boolean mustFail) { [EOL]     try { [EOL]         double[][] sub = (reference == null) ? new double[1][1] : createIdenticalCopy(reference); [EOL]         m.copySubMatrix(selectedRows, selectedColumns, sub); [EOL]         Assert.assertEquals(new Array2DRowRealMatrix(reference), new Array2DRowRealMatrix(sub)); [EOL]         if (mustFail) { [EOL]             Assert.fail("Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"); [EOL]         } [EOL]     } catch (OutOfRangeException e) { [EOL]         if (!mustFail) { [EOL]             throw e; [EOL]         } [EOL]     } catch (NumberIsTooSmallException e) { [EOL]         if (!mustFail) { [EOL]             throw e; [EOL]         } [EOL]     } catch (NoDataException e) { [EOL]         if (!mustFail) { [EOL]             throw e; [EOL]         } [EOL]     } catch (MatrixDimensionMismatchException e) { [EOL]         if (!mustFail) { [EOL]             throw e; [EOL]         } [EOL]     } [EOL] } <line_num>: 577,605
private double[][] createIdenticalCopy(final double[][] matrix) { [EOL]     final double[][] matrixCopy = new double[matrix.length][]; [EOL]     for (int i = 0; i < matrixCopy.length; i++) { [EOL]         matrixCopy[i] = new double[matrix[i].length]; [EOL]     } [EOL]     return matrixCopy; [EOL] } <line_num>: 607,613
@Test [EOL] public void testGetRowMatrix() { [EOL]     RealMatrix m = new Array2DRowRealMatrix(subTestData); [EOL]     RealMatrix mRow0 = new Array2DRowRealMatrix(subRow0); [EOL]     RealMatrix mRow3 = new Array2DRowRealMatrix(subRow3); [EOL]     Assert.assertEquals("Row0", mRow0, m.getRowMatrix(0)); [EOL]     Assert.assertEquals("Row3", mRow3, m.getRowMatrix(3)); [EOL]     try { [EOL]         m.getRowMatrix(-1); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.getRowMatrix(4); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 615,636
@Test [EOL] public void testSetRowMatrix() { [EOL]     RealMatrix m = new Array2DRowRealMatrix(subTestData); [EOL]     RealMatrix mRow3 = new Array2DRowRealMatrix(subRow3); [EOL]     Assert.assertNotSame(mRow3, m.getRowMatrix(0)); [EOL]     m.setRowMatrix(0, mRow3); [EOL]     Assert.assertEquals(mRow3, m.getRowMatrix(0)); [EOL]     try { [EOL]         m.setRowMatrix(-1, mRow3); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.setRowMatrix(0, m); [EOL]         Assert.fail("Expecting MatrixDimensionMismatchException"); [EOL]     } catch (MatrixDimensionMismatchException ex) { [EOL]     } [EOL] } <line_num>: 638,657
@Test [EOL] public void testGetColumnMatrix() { [EOL]     RealMatrix m = new Array2DRowRealMatrix(subTestData); [EOL]     RealMatrix mColumn1 = new Array2DRowRealMatrix(subColumn1); [EOL]     RealMatrix mColumn3 = new Array2DRowRealMatrix(subColumn3); [EOL]     Assert.assertEquals("Column1", mColumn1, m.getColumnMatrix(1)); [EOL]     Assert.assertEquals("Column3", mColumn3, m.getColumnMatrix(3)); [EOL]     try { [EOL]         m.getColumnMatrix(-1); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.getColumnMatrix(4); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 659,680
@Test [EOL] public void testSetColumnMatrix() { [EOL]     RealMatrix m = new Array2DRowRealMatrix(subTestData); [EOL]     RealMatrix mColumn3 = new Array2DRowRealMatrix(subColumn3); [EOL]     Assert.assertNotSame(mColumn3, m.getColumnMatrix(1)); [EOL]     m.setColumnMatrix(1, mColumn3); [EOL]     Assert.assertEquals(mColumn3, m.getColumnMatrix(1)); [EOL]     try { [EOL]         m.setColumnMatrix(-1, mColumn3); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.setColumnMatrix(0, m); [EOL]         Assert.fail("Expecting MatrixDimensionMismatchException"); [EOL]     } catch (MatrixDimensionMismatchException ex) { [EOL]     } [EOL] } <line_num>: 682,701
@Test [EOL] public void testGetRowVector() { [EOL]     RealMatrix m = new Array2DRowRealMatrix(subTestData); [EOL]     RealVector mRow0 = new ArrayRealVector(subRow0[0]); [EOL]     RealVector mRow3 = new ArrayRealVector(subRow3[0]); [EOL]     Assert.assertEquals("Row0", mRow0, m.getRowVector(0)); [EOL]     Assert.assertEquals("Row3", mRow3, m.getRowVector(3)); [EOL]     try { [EOL]         m.getRowVector(-1); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.getRowVector(4); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 703,722
@Test [EOL] public void testSetRowVector() { [EOL]     RealMatrix m = new Array2DRowRealMatrix(subTestData); [EOL]     RealVector mRow3 = new ArrayRealVector(subRow3[0]); [EOL]     Assert.assertNotSame(mRow3, m.getRowMatrix(0)); [EOL]     m.setRowVector(0, mRow3); [EOL]     Assert.assertEquals(mRow3, m.getRowVector(0)); [EOL]     try { [EOL]         m.setRowVector(-1, mRow3); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.setRowVector(0, new ArrayRealVector(5)); [EOL]         Assert.fail("Expecting MatrixDimensionMismatchException"); [EOL]     } catch (MatrixDimensionMismatchException ex) { [EOL]     } [EOL] } <line_num>: 724,743
@Test [EOL] public void testGetColumnVector() { [EOL]     RealMatrix m = new Array2DRowRealMatrix(subTestData); [EOL]     RealVector mColumn1 = columnToVector(subColumn1); [EOL]     RealVector mColumn3 = columnToVector(subColumn3); [EOL]     Assert.assertEquals("Column1", mColumn1, m.getColumnVector(1)); [EOL]     Assert.assertEquals("Column3", mColumn3, m.getColumnVector(3)); [EOL]     try { [EOL]         m.getColumnVector(-1); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.getColumnVector(4); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 745,764
@Test [EOL] public void testSetColumnVector() { [EOL]     RealMatrix m = new Array2DRowRealMatrix(subTestData); [EOL]     RealVector mColumn3 = columnToVector(subColumn3); [EOL]     Assert.assertNotSame(mColumn3, m.getColumnVector(1)); [EOL]     m.setColumnVector(1, mColumn3); [EOL]     Assert.assertEquals(mColumn3, m.getColumnVector(1)); [EOL]     try { [EOL]         m.setColumnVector(-1, mColumn3); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.setColumnVector(0, new ArrayRealVector(5)); [EOL]         Assert.fail("Expecting MatrixDimensionMismatchException"); [EOL]     } catch (MatrixDimensionMismatchException ex) { [EOL]     } [EOL] } <line_num>: 766,785
private RealVector columnToVector(double[][] column) { [EOL]     double[] data = new double[column.length]; [EOL]     for (int i = 0; i < data.length; ++i) { [EOL]         data[i] = column[i][0]; [EOL]     } [EOL]     return new ArrayRealVector(data, false); [EOL] } <line_num>: 787,793
@Test [EOL] public void testGetRow() { [EOL]     RealMatrix m = new Array2DRowRealMatrix(subTestData); [EOL]     checkArrays(subRow0[0], m.getRow(0)); [EOL]     checkArrays(subRow3[0], m.getRow(3)); [EOL]     try { [EOL]         m.getRow(-1); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.getRow(4); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 795,812
@Test [EOL] public void testSetRow() { [EOL]     RealMatrix m = new Array2DRowRealMatrix(subTestData); [EOL]     Assert.assertTrue(subRow3[0][0] != m.getRow(0)[0]); [EOL]     m.setRow(0, subRow3[0]); [EOL]     checkArrays(subRow3[0], m.getRow(0)); [EOL]     try { [EOL]         m.setRow(-1, subRow3[0]); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.setRow(0, new double[5]); [EOL]         Assert.fail("Expecting MatrixDimensionMismatchException"); [EOL]     } catch (MatrixDimensionMismatchException ex) { [EOL]     } [EOL] } <line_num>: 814,832
@Test [EOL] public void testGetColumn() { [EOL]     RealMatrix m = new Array2DRowRealMatrix(subTestData); [EOL]     double[] mColumn1 = columnToArray(subColumn1); [EOL]     double[] mColumn3 = columnToArray(subColumn3); [EOL]     checkArrays(mColumn1, m.getColumn(1)); [EOL]     checkArrays(mColumn3, m.getColumn(3)); [EOL]     try { [EOL]         m.getColumn(-1); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.getColumn(4); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 834,853
@Test [EOL] public void testSetColumn() { [EOL]     RealMatrix m = new Array2DRowRealMatrix(subTestData); [EOL]     double[] mColumn3 = columnToArray(subColumn3); [EOL]     Assert.assertTrue(mColumn3[0] != m.getColumn(1)[0]); [EOL]     m.setColumn(1, mColumn3); [EOL]     checkArrays(mColumn3, m.getColumn(1)); [EOL]     try { [EOL]         m.setColumn(-1, mColumn3); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.setColumn(0, new double[5]); [EOL]         Assert.fail("Expecting MatrixDimensionMismatchException"); [EOL]     } catch (MatrixDimensionMismatchException ex) { [EOL]     } [EOL] } <line_num>: 855,874
private double[] columnToArray(double[][] column) { [EOL]     double[] data = new double[column.length]; [EOL]     for (int i = 0; i < data.length; ++i) { [EOL]         data[i] = column[i][0]; [EOL]     } [EOL]     return data; [EOL] } <line_num>: 876,882
private void checkArrays(double[] expected, double[] actual) { [EOL]     Assert.assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < expected.length; ++i) { [EOL]         Assert.assertEquals(expected[i], actual[i], 0); [EOL]     } [EOL] } <line_num>: 884,889
@Test [EOL] public void testEqualsAndHashCode() { [EOL]     Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData); [EOL]     Array2DRowRealMatrix m1 = (Array2DRowRealMatrix) m.copy(); [EOL]     Array2DRowRealMatrix mt = (Array2DRowRealMatrix) m.transpose(); [EOL]     Assert.assertTrue(m.hashCode() != mt.hashCode()); [EOL]     Assert.assertEquals(m.hashCode(), m1.hashCode()); [EOL]     Assert.assertEquals(m, m); [EOL]     Assert.assertEquals(m, m1); [EOL]     Assert.assertFalse(m.equals(null)); [EOL]     Assert.assertFalse(m.equals(mt)); [EOL]     Assert.assertFalse(m.equals(new Array2DRowRealMatrix(bigSingular))); [EOL] } <line_num>: 891,903
@Test [EOL] public void testToString() { [EOL]     Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData); [EOL]     Assert.assertEquals("Array2DRowRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}", m.toString()); [EOL]     m = new Array2DRowRealMatrix(); [EOL]     Assert.assertEquals("Array2DRowRealMatrix{}", m.toString()); [EOL] } <line_num>: 905,913
@Test [EOL] public void testSetSubMatrix() { [EOL]     Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData); [EOL]     m.setSubMatrix(detData2, 1, 1); [EOL]     RealMatrix expected = MatrixUtils.createRealMatrix(new double[][] { { 1.0, 2.0, 3.0 }, { 2.0, 1.0, 3.0 }, { 1.0, 2.0, 4.0 } }); [EOL]     Assert.assertEquals(expected, m); [EOL]     m.setSubMatrix(detData2, 0, 0); [EOL]     expected = MatrixUtils.createRealMatrix(new double[][] { { 1.0, 3.0, 3.0 }, { 2.0, 4.0, 3.0 }, { 1.0, 2.0, 4.0 } }); [EOL]     Assert.assertEquals(expected, m); [EOL]     m.setSubMatrix(testDataPlus2, 0, 0); [EOL]     expected = MatrixUtils.createRealMatrix(new double[][] { { 3.0, 4.0, 5.0 }, { 4.0, 7.0, 5.0 }, { 3.0, 2.0, 10.0 } }); [EOL]     Assert.assertEquals(expected, m); [EOL]     try { [EOL]         m.setSubMatrix(testData, 1, 1); [EOL]         Assert.fail("expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException e) { [EOL]     } [EOL]     try { [EOL]         m.setSubMatrix(testData, -1, 1); [EOL]         Assert.fail("expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException e) { [EOL]     } [EOL]     try { [EOL]         m.setSubMatrix(testData, 1, -1); [EOL]         Assert.fail("expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException e) { [EOL]     } [EOL]     try { [EOL]         m.setSubMatrix(null, 1, 1); [EOL]         Assert.fail("expecting NullArgumentException"); [EOL]     } catch (NullArgumentException e) { [EOL]     } [EOL]     Array2DRowRealMatrix m2 = new Array2DRowRealMatrix(); [EOL]     try { [EOL]         m2.setSubMatrix(testData, 0, 1); [EOL]         Assert.fail("expecting MathIllegalStateException"); [EOL]     } catch (MathIllegalStateException e) { [EOL]     } [EOL]     try { [EOL]         m2.setSubMatrix(testData, 1, 0); [EOL]         Assert.fail("expecting MathIllegalStateException"); [EOL]     } catch (MathIllegalStateException e) { [EOL]     } [EOL]     try { [EOL]         m.setSubMatrix(new double[][] { { 1 }, { 2, 3 } }, 0, 0); [EOL]         Assert.fail("expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         m.setSubMatrix(new double[][] { {} }, 0, 0); [EOL]         Assert.fail("expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 915,990
@Test [EOL] public void testWalk() { [EOL]     int rows = 150; [EOL]     int columns = 75; [EOL]     RealMatrix m = new Array2DRowRealMatrix(rows, columns); [EOL]     m.walkInRowOrder(new SetVisitor()); [EOL]     GetVisitor getVisitor = new GetVisitor(); [EOL]     m.walkInOptimizedOrder(getVisitor); [EOL]     Assert.assertEquals(rows * columns, getVisitor.getCount()); [EOL]     m = new Array2DRowRealMatrix(rows, columns); [EOL]     m.walkInRowOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2); [EOL]     getVisitor = new GetVisitor(); [EOL]     m.walkInOptimizedOrder(getVisitor, 1, rows - 2, 1, columns - 2); [EOL]     Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount()); [EOL]     for (int i = 0; i < rows; ++i) { [EOL]         Assert.assertEquals(0.0, m.getEntry(i, 0), 0); [EOL]         Assert.assertEquals(0.0, m.getEntry(i, columns - 1), 0); [EOL]     } [EOL]     for (int j = 0; j < columns; ++j) { [EOL]         Assert.assertEquals(0.0, m.getEntry(0, j), 0); [EOL]         Assert.assertEquals(0.0, m.getEntry(rows - 1, j), 0); [EOL]     } [EOL]     m = new Array2DRowRealMatrix(rows, columns); [EOL]     m.walkInColumnOrder(new SetVisitor()); [EOL]     getVisitor = new GetVisitor(); [EOL]     m.walkInOptimizedOrder(getVisitor); [EOL]     Assert.assertEquals(rows * columns, getVisitor.getCount()); [EOL]     m = new Array2DRowRealMatrix(rows, columns); [EOL]     m.walkInColumnOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2); [EOL]     getVisitor = new GetVisitor(); [EOL]     m.walkInOptimizedOrder(getVisitor, 1, rows - 2, 1, columns - 2); [EOL]     Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount()); [EOL]     for (int i = 0; i < rows; ++i) { [EOL]         Assert.assertEquals(0.0, m.getEntry(i, 0), 0); [EOL]         Assert.assertEquals(0.0, m.getEntry(i, columns - 1), 0); [EOL]     } [EOL]     for (int j = 0; j < columns; ++j) { [EOL]         Assert.assertEquals(0.0, m.getEntry(0, j), 0); [EOL]         Assert.assertEquals(0.0, m.getEntry(rows - 1, j), 0); [EOL]     } [EOL]     m = new Array2DRowRealMatrix(rows, columns); [EOL]     m.walkInOptimizedOrder(new SetVisitor()); [EOL]     getVisitor = new GetVisitor(); [EOL]     m.walkInRowOrder(getVisitor); [EOL]     Assert.assertEquals(rows * columns, getVisitor.getCount()); [EOL]     m = new Array2DRowRealMatrix(rows, columns); [EOL]     m.walkInOptimizedOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2); [EOL]     getVisitor = new GetVisitor(); [EOL]     m.walkInRowOrder(getVisitor, 1, rows - 2, 1, columns - 2); [EOL]     Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount()); [EOL]     for (int i = 0; i < rows; ++i) { [EOL]         Assert.assertEquals(0.0, m.getEntry(i, 0), 0); [EOL]         Assert.assertEquals(0.0, m.getEntry(i, columns - 1), 0); [EOL]     } [EOL]     for (int j = 0; j < columns; ++j) { [EOL]         Assert.assertEquals(0.0, m.getEntry(0, j), 0); [EOL]         Assert.assertEquals(0.0, m.getEntry(rows - 1, j), 0); [EOL]     } [EOL]     m = new Array2DRowRealMatrix(rows, columns); [EOL]     m.walkInOptimizedOrder(new SetVisitor()); [EOL]     getVisitor = new GetVisitor(); [EOL]     m.walkInColumnOrder(getVisitor); [EOL]     Assert.assertEquals(rows * columns, getVisitor.getCount()); [EOL]     m = new Array2DRowRealMatrix(rows, columns); [EOL]     m.walkInOptimizedOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2); [EOL]     getVisitor = new GetVisitor(); [EOL]     m.walkInColumnOrder(getVisitor, 1, rows - 2, 1, columns - 2); [EOL]     Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount()); [EOL]     for (int i = 0; i < rows; ++i) { [EOL]         Assert.assertEquals(0.0, m.getEntry(i, 0), 0); [EOL]         Assert.assertEquals(0.0, m.getEntry(i, columns - 1), 0); [EOL]     } [EOL]     for (int j = 0; j < columns; ++j) { [EOL]         Assert.assertEquals(0.0, m.getEntry(0, j), 0); [EOL]         Assert.assertEquals(0.0, m.getEntry(rows - 1, j), 0); [EOL]     } [EOL] } <line_num>: 992,1076
@Test [EOL] public void testSerial() { [EOL]     Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData); [EOL]     Assert.assertEquals(m, TestUtils.serializeAndRecover(m)); [EOL] } <line_num>: 1078,1082
@Override [EOL] public double visit(int i, int j, double value) { [EOL]     return i + j / 1024.0; [EOL] } <line_num>: 1086,1089
@Override [EOL] public void visit(int i, int j, double value) { [EOL]     ++count; [EOL]     Assert.assertEquals(i + j / 1024.0, value, 0.0); [EOL] } <line_num>: 1094,1098
public int getCount() { [EOL]     return count; [EOL] } <line_num>: 1099,1101
protected void splitLU(RealMatrix lu, double[][] lowerData, double[][] upperData) { [EOL]     if (!lu.isSquare()) { [EOL]         throw new NonSquareMatrixException(lu.getRowDimension(), lu.getColumnDimension()); [EOL]     } [EOL]     if (lowerData.length != lowerData[0].length) { [EOL]         throw new DimensionMismatchException(lowerData.length, lowerData[0].length); [EOL]     } [EOL]     if (upperData.length != upperData[0].length) { [EOL]         throw new DimensionMismatchException(upperData.length, upperData[0].length); [EOL]     } [EOL]     if (lowerData.length != upperData.length) { [EOL]         throw new DimensionMismatchException(lowerData.length, upperData.length); [EOL]     } [EOL]     if (lowerData.length != lu.getRowDimension()) { [EOL]         throw new DimensionMismatchException(lowerData.length, lu.getRowDimension()); [EOL]     } [EOL]     int n = lu.getRowDimension(); [EOL]     for (int i = 0; i < n; i++) { [EOL]         for (int j = 0; j < n; j++) { [EOL]             if (j < i) { [EOL]                 lowerData[i][j] = lu.getEntry(i, j); [EOL]                 upperData[i][j] = 0d; [EOL]             } else if (i == j) { [EOL]                 lowerData[i][j] = 1d; [EOL]                 upperData[i][j] = lu.getEntry(i, j); [EOL]             } else { [EOL]                 lowerData[i][j] = 0d; [EOL]                 upperData[i][j] = lu.getEntry(i, j); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 1107,1139
protected RealMatrix permuteRows(RealMatrix matrix, int[] permutation) { [EOL]     if (!matrix.isSquare()) { [EOL]         throw new NonSquareMatrixException(matrix.getRowDimension(), matrix.getColumnDimension()); [EOL]     } [EOL]     if (matrix.getRowDimension() != permutation.length) { [EOL]         throw new DimensionMismatchException(matrix.getRowDimension(), permutation.length); [EOL]     } [EOL]     int n = matrix.getRowDimension(); [EOL]     int m = matrix.getColumnDimension(); [EOL]     double[][] out = new double[m][n]; [EOL]     for (int i = 0; i < n; i++) { [EOL]         for (int j = 0; j < m; j++) { [EOL]             out[i][j] = matrix.getEntry(permutation[i], j); [EOL]         } [EOL]     } [EOL]     return new Array2DRowRealMatrix(out); [EOL] } <line_num>: 1142,1160
