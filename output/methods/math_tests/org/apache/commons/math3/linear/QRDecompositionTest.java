@Test [EOL] public void testDimensions() { [EOL]     checkDimension(MatrixUtils.createRealMatrix(testData3x3NonSingular)); [EOL]     checkDimension(MatrixUtils.createRealMatrix(testData4x3)); [EOL]     checkDimension(MatrixUtils.createRealMatrix(testData3x4)); [EOL]     Random r = new Random(643895747384642l); [EOL]     int p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4; [EOL]     int q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4; [EOL]     checkDimension(createTestMatrix(r, p, q)); [EOL]     checkDimension(createTestMatrix(r, q, p)); [EOL] } <line_num>: 54,68
private void checkDimension(RealMatrix m) { [EOL]     int rows = m.getRowDimension(); [EOL]     int columns = m.getColumnDimension(); [EOL]     QRDecomposition qr = new QRDecomposition(m); [EOL]     Assert.assertEquals(rows, qr.getQ().getRowDimension()); [EOL]     Assert.assertEquals(rows, qr.getQ().getColumnDimension()); [EOL]     Assert.assertEquals(rows, qr.getR().getRowDimension()); [EOL]     Assert.assertEquals(columns, qr.getR().getColumnDimension()); [EOL] } <line_num>: 70,78
@Test [EOL] public void testAEqualQR() { [EOL]     checkAEqualQR(MatrixUtils.createRealMatrix(testData3x3NonSingular)); [EOL]     checkAEqualQR(MatrixUtils.createRealMatrix(testData3x3Singular)); [EOL]     checkAEqualQR(MatrixUtils.createRealMatrix(testData3x4)); [EOL]     checkAEqualQR(MatrixUtils.createRealMatrix(testData4x3)); [EOL]     Random r = new Random(643895747384642l); [EOL]     int p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4; [EOL]     int q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4; [EOL]     checkAEqualQR(createTestMatrix(r, p, q)); [EOL]     checkAEqualQR(createTestMatrix(r, q, p)); [EOL] } <line_num>: 81,98
private void checkAEqualQR(RealMatrix m) { [EOL]     QRDecomposition qr = new QRDecomposition(m); [EOL]     double norm = qr.getQ().multiply(qr.getR()).subtract(m).getNorm(); [EOL]     Assert.assertEquals(0, norm, normTolerance); [EOL] } <line_num>: 100,104
@Test [EOL] public void testQOrthogonal() { [EOL]     checkQOrthogonal(MatrixUtils.createRealMatrix(testData3x3NonSingular)); [EOL]     checkQOrthogonal(MatrixUtils.createRealMatrix(testData3x3Singular)); [EOL]     checkQOrthogonal(MatrixUtils.createRealMatrix(testData3x4)); [EOL]     checkQOrthogonal(MatrixUtils.createRealMatrix(testData4x3)); [EOL]     Random r = new Random(643895747384642l); [EOL]     int p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4; [EOL]     int q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4; [EOL]     checkQOrthogonal(createTestMatrix(r, p, q)); [EOL]     checkQOrthogonal(createTestMatrix(r, q, p)); [EOL] } <line_num>: 107,124
private void checkQOrthogonal(RealMatrix m) { [EOL]     QRDecomposition qr = new QRDecomposition(m); [EOL]     RealMatrix eye = MatrixUtils.createRealIdentityMatrix(m.getRowDimension()); [EOL]     double norm = qr.getQT().multiply(qr.getQ()).subtract(eye).getNorm(); [EOL]     Assert.assertEquals(0, norm, normTolerance); [EOL] } <line_num>: 126,131
@Test [EOL] public void testRUpperTriangular() { [EOL]     RealMatrix matrix = MatrixUtils.createRealMatrix(testData3x3NonSingular); [EOL]     checkUpperTriangular(new QRDecomposition(matrix).getR()); [EOL]     matrix = MatrixUtils.createRealMatrix(testData3x3Singular); [EOL]     checkUpperTriangular(new QRDecomposition(matrix).getR()); [EOL]     matrix = MatrixUtils.createRealMatrix(testData3x4); [EOL]     checkUpperTriangular(new QRDecomposition(matrix).getR()); [EOL]     matrix = MatrixUtils.createRealMatrix(testData4x3); [EOL]     checkUpperTriangular(new QRDecomposition(matrix).getR()); [EOL]     Random r = new Random(643895747384642l); [EOL]     int p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4; [EOL]     int q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4; [EOL]     matrix = createTestMatrix(r, p, q); [EOL]     checkUpperTriangular(new QRDecomposition(matrix).getR()); [EOL]     matrix = createTestMatrix(r, p, q); [EOL]     checkUpperTriangular(new QRDecomposition(matrix).getR()); [EOL] } <line_num>: 134,157
@Override [EOL] public void visit(int row, int column, double value) { [EOL]     if (column < row) { [EOL]         Assert.assertEquals(0.0, value, entryTolerance); [EOL]     } [EOL] } <line_num>: 161,166
private void checkUpperTriangular(RealMatrix m) { [EOL]     m.walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() { [EOL]  [EOL]         @Override [EOL]         public void visit(int row, int column, double value) { [EOL]             if (column < row) { [EOL]                 Assert.assertEquals(0.0, value, entryTolerance); [EOL]             } [EOL]         } [EOL]     }); [EOL] } <line_num>: 159,168
@Test [EOL] public void testHTrapezoidal() { [EOL]     RealMatrix matrix = MatrixUtils.createRealMatrix(testData3x3NonSingular); [EOL]     checkTrapezoidal(new QRDecomposition(matrix).getH()); [EOL]     matrix = MatrixUtils.createRealMatrix(testData3x3Singular); [EOL]     checkTrapezoidal(new QRDecomposition(matrix).getH()); [EOL]     matrix = MatrixUtils.createRealMatrix(testData3x4); [EOL]     checkTrapezoidal(new QRDecomposition(matrix).getH()); [EOL]     matrix = MatrixUtils.createRealMatrix(testData4x3); [EOL]     checkTrapezoidal(new QRDecomposition(matrix).getH()); [EOL]     Random r = new Random(643895747384642l); [EOL]     int p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4; [EOL]     int q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4; [EOL]     matrix = createTestMatrix(r, p, q); [EOL]     checkTrapezoidal(new QRDecomposition(matrix).getH()); [EOL]     matrix = createTestMatrix(r, p, q); [EOL]     checkTrapezoidal(new QRDecomposition(matrix).getH()); [EOL] } <line_num>: 171,194
@Override [EOL] public void visit(int row, int column, double value) { [EOL]     if (column > row) { [EOL]         Assert.assertEquals(0.0, value, entryTolerance); [EOL]     } [EOL] } <line_num>: 198,203
private void checkTrapezoidal(RealMatrix m) { [EOL]     m.walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() { [EOL]  [EOL]         @Override [EOL]         public void visit(int row, int column, double value) { [EOL]             if (column > row) { [EOL]                 Assert.assertEquals(0.0, value, entryTolerance); [EOL]             } [EOL]         } [EOL]     }); [EOL] } <line_num>: 196,205
@Test [EOL] public void testMatricesValues() { [EOL]     QRDecomposition qr = new QRDecomposition(MatrixUtils.createRealMatrix(testData3x3NonSingular)); [EOL]     RealMatrix qRef = MatrixUtils.createRealMatrix(new double[][] { { -12.0 / 14.0, 69.0 / 175.0, -58.0 / 175.0 }, { -6.0 / 14.0, -158.0 / 175.0, 6.0 / 175.0 }, { 4.0 / 14.0, -30.0 / 175.0, -165.0 / 175.0 } }); [EOL]     RealMatrix rRef = MatrixUtils.createRealMatrix(new double[][] { { -14.0, -21.0, 14.0 }, { 0.0, -175.0, 70.0 }, { 0.0, 0.0, 35.0 } }); [EOL]     RealMatrix hRef = MatrixUtils.createRealMatrix(new double[][] { { 26.0 / 14.0, 0.0, 0.0 }, { 6.0 / 14.0, 648.0 / 325.0, 0.0 }, { -4.0 / 14.0, 36.0 / 325.0, 2.0 } }); [EOL]     RealMatrix q = qr.getQ(); [EOL]     Assert.assertEquals(0, q.subtract(qRef).getNorm(), 1.0e-13); [EOL]     RealMatrix qT = qr.getQT(); [EOL]     Assert.assertEquals(0, qT.subtract(qRef.transpose()).getNorm(), 1.0e-13); [EOL]     RealMatrix r = qr.getR(); [EOL]     Assert.assertEquals(0, r.subtract(rRef).getNorm(), 1.0e-13); [EOL]     RealMatrix h = qr.getH(); [EOL]     Assert.assertEquals(0, h.subtract(hRef).getNorm(), 1.0e-13); [EOL]     Assert.assertTrue(q == qr.getQ()); [EOL]     Assert.assertTrue(r == qr.getR()); [EOL]     Assert.assertTrue(h == qr.getH()); [EOL] } <line_num>: 207,242
@Test(expected = SingularMatrixException.class) [EOL] public void testNonInvertible() { [EOL]     QRDecomposition qr = new QRDecomposition(MatrixUtils.createRealMatrix(testData3x3Singular)); [EOL]     qr.getSolver().getInverse(); [EOL] } <line_num>: 244,249
@Override [EOL] public double visit(int row, int column, double value) { [EOL]     return 2.0 * r.nextDouble() - 1.0; [EOL] } <line_num>: 254,257
private RealMatrix createTestMatrix(final Random r, final int rows, final int columns) { [EOL]     RealMatrix m = MatrixUtils.createRealMatrix(rows, columns); [EOL]     m.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { [EOL]  [EOL]         @Override [EOL]         public double visit(int row, int column, double value) { [EOL]             return 2.0 * r.nextDouble() - 1.0; [EOL]         } [EOL]     }); [EOL]     return m; [EOL] } <line_num>: 251,260
