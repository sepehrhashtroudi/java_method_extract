@Test [EOL] public void testDimensions() { [EOL]     OpenMapRealMatrix m = createSparseMatrix(testData); [EOL]     OpenMapRealMatrix m2 = createSparseMatrix(testData2); [EOL]     Assert.assertEquals("testData row dimension", 3, m.getRowDimension()); [EOL]     Assert.assertEquals("testData column dimension", 3, m.getColumnDimension()); [EOL]     Assert.assertTrue("testData is square", m.isSquare()); [EOL]     Assert.assertEquals("testData2 row dimension", m2.getRowDimension(), 2); [EOL]     Assert.assertEquals("testData2 column dimension", m2.getColumnDimension(), 3); [EOL]     Assert.assertTrue("testData2 is not square", !m2.isSquare()); [EOL] } <line_num>: 111,121
@Test [EOL] public void testCopyFunctions() { [EOL]     OpenMapRealMatrix m1 = createSparseMatrix(testData); [EOL]     RealMatrix m2 = m1.copy(); [EOL]     Assert.assertEquals(m1.getClass(), m2.getClass()); [EOL]     Assert.assertEquals((m2), m1); [EOL]     OpenMapRealMatrix m3 = createSparseMatrix(testData); [EOL]     RealMatrix m4 = m3.copy(); [EOL]     Assert.assertEquals(m3.getClass(), m4.getClass()); [EOL]     Assert.assertEquals((m4), m3); [EOL] } <line_num>: 124,134
@Test [EOL] public void testAdd() { [EOL]     OpenMapRealMatrix m = createSparseMatrix(testData); [EOL]     OpenMapRealMatrix mInv = createSparseMatrix(testDataInv); [EOL]     OpenMapRealMatrix mDataPlusInv = createSparseMatrix(testDataPlusInv); [EOL]     RealMatrix mPlusMInv = m.add(mInv); [EOL]     for (int row = 0; row < m.getRowDimension(); row++) { [EOL]         for (int col = 0; col < m.getColumnDimension(); col++) { [EOL]             Assert.assertEquals("sum entry entry", mDataPlusInv.getEntry(row, col), mPlusMInv.getEntry(row, col), entryTolerance); [EOL]         } [EOL]     } [EOL] } <line_num>: 137,150
@Test [EOL] public void testAddFail() { [EOL]     OpenMapRealMatrix m = createSparseMatrix(testData); [EOL]     OpenMapRealMatrix m2 = createSparseMatrix(testData2); [EOL]     try { [EOL]         m.add(m2); [EOL]         Assert.fail("MathIllegalArgumentException expected"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 153,163
@Test [EOL] public void testNorm() { [EOL]     OpenMapRealMatrix m = createSparseMatrix(testData); [EOL]     OpenMapRealMatrix m2 = createSparseMatrix(testData2); [EOL]     Assert.assertEquals("testData norm", 14d, m.getNorm(), entryTolerance); [EOL]     Assert.assertEquals("testData2 norm", 7d, m2.getNorm(), entryTolerance); [EOL] } <line_num>: 166,172
@Test [EOL] public void testPlusMinus() { [EOL]     OpenMapRealMatrix m = createSparseMatrix(testData); [EOL]     OpenMapRealMatrix n = createSparseMatrix(testDataInv); [EOL]     assertClose("m-n = m + -n", m.subtract(n), n.scalarMultiply(-1d).add(m), entryTolerance); [EOL]     try { [EOL]         m.subtract(createSparseMatrix(testData2)); [EOL]         Assert.fail("Expecting illegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 175,187
@Test [EOL] public void testMultiply() { [EOL]     OpenMapRealMatrix m = createSparseMatrix(testData); [EOL]     OpenMapRealMatrix mInv = createSparseMatrix(testDataInv); [EOL]     OpenMapRealMatrix identity = createSparseMatrix(id); [EOL]     OpenMapRealMatrix m2 = createSparseMatrix(testData2); [EOL]     assertClose("inverse multiply", m.multiply(mInv), identity, entryTolerance); [EOL]     assertClose("inverse multiply", m.multiply(new BlockRealMatrix(testDataInv)), identity, entryTolerance); [EOL]     assertClose("inverse multiply", mInv.multiply(m), identity, entryTolerance); [EOL]     assertClose("identity multiply", m.multiply(identity), m, entryTolerance); [EOL]     assertClose("identity multiply", identity.multiply(mInv), mInv, entryTolerance); [EOL]     assertClose("identity multiply", m2.multiply(identity), m2, entryTolerance); [EOL]     try { [EOL]         m.multiply(createSparseMatrix(bigSingular)); [EOL]         Assert.fail("Expecting illegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 190,214
@Test [EOL] public void testMultiply2() { [EOL]     RealMatrix m3 = createSparseMatrix(d3); [EOL]     RealMatrix m4 = createSparseMatrix(d4); [EOL]     RealMatrix m5 = createSparseMatrix(d5); [EOL]     assertClose("m3*m4=m5", m3.multiply(m4), m5, entryTolerance); [EOL] } <line_num>: 222,228
@Test [EOL] public void testTrace() { [EOL]     RealMatrix m = createSparseMatrix(id); [EOL]     Assert.assertEquals("identity trace", 3d, m.getTrace(), entryTolerance); [EOL]     m = createSparseMatrix(testData2); [EOL]     try { [EOL]         m.getTrace(); [EOL]         Assert.fail("Expecting NonSquareMatrixException"); [EOL]     } catch (NonSquareMatrixException ex) { [EOL]     } [EOL] } <line_num>: 231,242
@Test [EOL] public void testScalarAdd() { [EOL]     RealMatrix m = createSparseMatrix(testData); [EOL]     assertClose("scalar add", createSparseMatrix(testDataPlus2), m.scalarAdd(2d), entryTolerance); [EOL] } <line_num>: 245,250
@Test [EOL] public void testOperate() { [EOL]     RealMatrix m = createSparseMatrix(id); [EOL]     assertClose("identity operate", testVector, m.operate(testVector), entryTolerance); [EOL]     assertClose("identity operate", testVector, m.operate(new ArrayRealVector(testVector)).toArray(), entryTolerance); [EOL]     m = createSparseMatrix(bigSingular); [EOL]     try { [EOL]         m.operate(testVector); [EOL]         Assert.fail("Expecting illegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 253,267
@Test [EOL] public void testMath209() { [EOL]     RealMatrix a = createSparseMatrix(new double[][] { { 1, 2 }, { 3, 4 }, { 5, 6 } }); [EOL]     double[] b = a.operate(new double[] { 1, 1 }); [EOL]     Assert.assertEquals(a.getRowDimension(), b.length); [EOL]     Assert.assertEquals(3.0, b[0], 1.0e-12); [EOL]     Assert.assertEquals(7.0, b[1], 1.0e-12); [EOL]     Assert.assertEquals(11.0, b[2], 1.0e-12); [EOL] } <line_num>: 270,279
@Test [EOL] public void testTranspose() { [EOL]     RealMatrix m = createSparseMatrix(testData); [EOL]     RealMatrix mIT = new LUDecomposition(m).getSolver().getInverse().transpose(); [EOL]     RealMatrix mTI = new LUDecomposition(m.transpose()).getSolver().getInverse(); [EOL]     assertClose("inverse-transpose", mIT, mTI, normTolerance); [EOL]     m = createSparseMatrix(testData2); [EOL]     RealMatrix mt = createSparseMatrix(testData2T); [EOL]     assertClose("transpose", mt, m.transpose(), normTolerance); [EOL] } <line_num>: 282,291
@Test [EOL] public void testPremultiplyVector() { [EOL]     RealMatrix m = createSparseMatrix(testData); [EOL]     assertClose("premultiply", m.preMultiply(testVector), preMultTest, normTolerance); [EOL]     assertClose("premultiply", m.preMultiply(new ArrayRealVector(testVector).toArray()), preMultTest, normTolerance); [EOL]     m = createSparseMatrix(bigSingular); [EOL]     try { [EOL]         m.preMultiply(testVector); [EOL]         Assert.fail("expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 294,308
@Test [EOL] public void testPremultiply() { [EOL]     RealMatrix m3 = createSparseMatrix(d3); [EOL]     RealMatrix m4 = createSparseMatrix(d4); [EOL]     RealMatrix m5 = createSparseMatrix(d5); [EOL]     assertClose("m3*m4=m5", m4.preMultiply(m3), m5, entryTolerance); [EOL]     OpenMapRealMatrix m = createSparseMatrix(testData); [EOL]     OpenMapRealMatrix mInv = createSparseMatrix(testDataInv); [EOL]     OpenMapRealMatrix identity = createSparseMatrix(id); [EOL]     assertClose("inverse multiply", m.preMultiply(mInv), identity, entryTolerance); [EOL]     assertClose("inverse multiply", mInv.preMultiply(m), identity, entryTolerance); [EOL]     assertClose("identity multiply", m.preMultiply(identity), m, entryTolerance); [EOL]     assertClose("identity multiply", identity.preMultiply(mInv), mInv, entryTolerance); [EOL]     try { [EOL]         m.preMultiply(createSparseMatrix(bigSingular)); [EOL]         Assert.fail("Expecting illegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 310,334
@Test [EOL] public void testGetVectors() { [EOL]     RealMatrix m = createSparseMatrix(testData); [EOL]     assertClose("get row", m.getRow(0), testDataRow1, entryTolerance); [EOL]     assertClose("get col", m.getColumn(2), testDataCol3, entryTolerance); [EOL]     try { [EOL]         m.getRow(10); [EOL]         Assert.fail("expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.getColumn(-1); [EOL]         Assert.fail("expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 336,353
@Test [EOL] public void testGetEntry() { [EOL]     RealMatrix m = createSparseMatrix(testData); [EOL]     Assert.assertEquals("get entry", m.getEntry(0, 1), 2d, entryTolerance); [EOL]     try { [EOL]         m.getEntry(10, 4); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 355,365
@Test [EOL] public void testExamples() { [EOL]     double[][] matrixData = { { 1d, 2d, 3d }, { 2d, 5d, 3d } }; [EOL]     RealMatrix m = createSparseMatrix(matrixData); [EOL]     double[][] matrixData2 = { { 1d, 2d }, { 2d, 5d }, { 1d, 7d } }; [EOL]     RealMatrix n = createSparseMatrix(matrixData2); [EOL]     RealMatrix p = m.multiply(n); [EOL]     Assert.assertEquals(2, p.getRowDimension()); [EOL]     Assert.assertEquals(2, p.getColumnDimension()); [EOL]     RealMatrix pInverse = new LUDecomposition(p).getSolver().getInverse(); [EOL]     Assert.assertEquals(2, pInverse.getRowDimension()); [EOL]     Assert.assertEquals(2, pInverse.getColumnDimension()); [EOL]     double[][] coefficientsData = { { 2, 3, -2 }, { -1, 7, 6 }, { 4, -3, -5 } }; [EOL]     RealMatrix coefficients = createSparseMatrix(coefficientsData); [EOL]     RealVector constants = new ArrayRealVector(new double[] { 1, -2, 1 }, false); [EOL]     RealVector solution = new LUDecomposition(coefficients).getSolver().solve(constants); [EOL]     final double cst0 = constants.getEntry(0); [EOL]     final double cst1 = constants.getEntry(1); [EOL]     final double cst2 = constants.getEntry(2); [EOL]     final double sol0 = solution.getEntry(0); [EOL]     final double sol1 = solution.getEntry(1); [EOL]     final double sol2 = solution.getEntry(2); [EOL]     Assert.assertEquals(2 * sol0 + 3 * sol1 - 2 * sol2, cst0, 1E-12); [EOL]     Assert.assertEquals(-1 * sol0 + 7 * sol1 + 6 * sol2, cst1, 1E-12); [EOL]     Assert.assertEquals(4 * sol0 - 3 * sol1 - 5 * sol2, cst2, 1E-12); [EOL] } <line_num>: 368,401
@Test [EOL] public void testSubMatrix() { [EOL]     RealMatrix m = createSparseMatrix(subTestData); [EOL]     RealMatrix mRows23Cols00 = createSparseMatrix(subRows23Cols00); [EOL]     RealMatrix mRows00Cols33 = createSparseMatrix(subRows00Cols33); [EOL]     RealMatrix mRows01Cols23 = createSparseMatrix(subRows01Cols23); [EOL]     RealMatrix mRows02Cols13 = createSparseMatrix(subRows02Cols13); [EOL]     RealMatrix mRows03Cols12 = createSparseMatrix(subRows03Cols12); [EOL]     RealMatrix mRows03Cols123 = createSparseMatrix(subRows03Cols123); [EOL]     RealMatrix mRows20Cols123 = createSparseMatrix(subRows20Cols123); [EOL]     RealMatrix mRows31Cols31 = createSparseMatrix(subRows31Cols31); [EOL]     Assert.assertEquals("Rows23Cols00", mRows23Cols00, m.getSubMatrix(2, 3, 0, 0)); [EOL]     Assert.assertEquals("Rows00Cols33", mRows00Cols33, m.getSubMatrix(0, 0, 3, 3)); [EOL]     Assert.assertEquals("Rows01Cols23", mRows01Cols23, m.getSubMatrix(0, 1, 2, 3)); [EOL]     Assert.assertEquals("Rows02Cols13", mRows02Cols13, m.getSubMatrix(new int[] { 0, 2 }, new int[] { 1, 3 })); [EOL]     Assert.assertEquals("Rows03Cols12", mRows03Cols12, m.getSubMatrix(new int[] { 0, 3 }, new int[] { 1, 2 })); [EOL]     Assert.assertEquals("Rows03Cols123", mRows03Cols123, m.getSubMatrix(new int[] { 0, 3 }, new int[] { 1, 2, 3 })); [EOL]     Assert.assertEquals("Rows20Cols123", mRows20Cols123, m.getSubMatrix(new int[] { 2, 0 }, new int[] { 1, 2, 3 })); [EOL]     Assert.assertEquals("Rows31Cols31", mRows31Cols31, m.getSubMatrix(new int[] { 3, 1 }, new int[] { 3, 1 })); [EOL]     Assert.assertEquals("Rows31Cols31", mRows31Cols31, m.getSubMatrix(new int[] { 3, 1 }, new int[] { 3, 1 })); [EOL]     try { [EOL]         m.getSubMatrix(1, 0, 2, 4); [EOL]         Assert.fail("Expecting NumberIsTooSmallException"); [EOL]     } catch (NumberIsTooSmallException ex) { [EOL]     } [EOL]     try { [EOL]         m.getSubMatrix(-1, 1, 2, 2); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.getSubMatrix(1, 0, 2, 2); [EOL]         Assert.fail("Expecting NumberIsTooSmallException"); [EOL]     } catch (NumberIsTooSmallException ex) { [EOL]     } [EOL]     try { [EOL]         m.getSubMatrix(1, 0, 2, 4); [EOL]         Assert.fail("Expecting NumberIsTooSmallException"); [EOL]     } catch (NumberIsTooSmallException ex) { [EOL]     } [EOL]     try { [EOL]         m.getSubMatrix(new int[] {}, new int[] { 0 }); [EOL]         Assert.fail("Expecting NoDataException"); [EOL]     } catch (NoDataException ex) { [EOL]     } [EOL]     try { [EOL]         m.getSubMatrix(new int[] { 0 }, new int[] { 4 }); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 404,467
@Test [EOL] public void testGetRowMatrix() { [EOL]     RealMatrix m = createSparseMatrix(subTestData); [EOL]     RealMatrix mRow0 = createSparseMatrix(subRow0); [EOL]     RealMatrix mRow3 = createSparseMatrix(subRow3); [EOL]     Assert.assertEquals("Row0", mRow0, m.getRowMatrix(0)); [EOL]     Assert.assertEquals("Row3", mRow3, m.getRowMatrix(3)); [EOL]     try { [EOL]         m.getRowMatrix(-1); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.getRowMatrix(4); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 469,488
@Test [EOL] public void testGetColumnMatrix() { [EOL]     RealMatrix m = createSparseMatrix(subTestData); [EOL]     RealMatrix mColumn1 = createSparseMatrix(subColumn1); [EOL]     RealMatrix mColumn3 = createSparseMatrix(subColumn3); [EOL]     Assert.assertEquals("Column1", mColumn1, m.getColumnMatrix(1)); [EOL]     Assert.assertEquals("Column3", mColumn3, m.getColumnMatrix(3)); [EOL]     try { [EOL]         m.getColumnMatrix(-1); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.getColumnMatrix(4); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 490,509
@Test [EOL] public void testGetRowVector() { [EOL]     RealMatrix m = createSparseMatrix(subTestData); [EOL]     RealVector mRow0 = new ArrayRealVector(subRow0[0]); [EOL]     RealVector mRow3 = new ArrayRealVector(subRow3[0]); [EOL]     Assert.assertEquals("Row0", mRow0, m.getRowVector(0)); [EOL]     Assert.assertEquals("Row3", mRow3, m.getRowVector(3)); [EOL]     try { [EOL]         m.getRowVector(-1); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.getRowVector(4); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 511,530
@Test [EOL] public void testGetColumnVector() { [EOL]     RealMatrix m = createSparseMatrix(subTestData); [EOL]     RealVector mColumn1 = columnToVector(subColumn1); [EOL]     RealVector mColumn3 = columnToVector(subColumn3); [EOL]     Assert.assertEquals("Column1", mColumn1, m.getColumnVector(1)); [EOL]     Assert.assertEquals("Column3", mColumn3, m.getColumnVector(3)); [EOL]     try { [EOL]         m.getColumnVector(-1); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         m.getColumnVector(4); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 532,551
private RealVector columnToVector(double[][] column) { [EOL]     double[] data = new double[column.length]; [EOL]     for (int i = 0; i < data.length; ++i) { [EOL]         data[i] = column[i][0]; [EOL]     } [EOL]     return new ArrayRealVector(data, false); [EOL] } <line_num>: 553,559
@Test [EOL] public void testEqualsAndHashCode() { [EOL]     OpenMapRealMatrix m = createSparseMatrix(testData); [EOL]     OpenMapRealMatrix m1 = m.copy(); [EOL]     OpenMapRealMatrix mt = (OpenMapRealMatrix) m.transpose(); [EOL]     Assert.assertTrue(m.hashCode() != mt.hashCode()); [EOL]     Assert.assertEquals(m.hashCode(), m1.hashCode()); [EOL]     Assert.assertEquals(m, m); [EOL]     Assert.assertEquals(m, m1); [EOL]     Assert.assertFalse(m.equals(null)); [EOL]     Assert.assertFalse(m.equals(mt)); [EOL]     Assert.assertFalse(m.equals(createSparseMatrix(bigSingular))); [EOL] } <line_num>: 561,573
@Test [EOL] public void testToString() { [EOL]     OpenMapRealMatrix m = createSparseMatrix(testData); [EOL]     Assert.assertEquals("OpenMapRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}", m.toString()); [EOL]     m = new OpenMapRealMatrix(1, 1); [EOL]     Assert.assertEquals("OpenMapRealMatrix{{0.0}}", m.toString()); [EOL] } <line_num>: 575,582
@Test [EOL] public void testSetSubMatrix() { [EOL]     OpenMapRealMatrix m = createSparseMatrix(testData); [EOL]     m.setSubMatrix(detData2, 1, 1); [EOL]     RealMatrix expected = createSparseMatrix(new double[][] { { 1.0, 2.0, 3.0 }, { 2.0, 1.0, 3.0 }, { 1.0, 2.0, 4.0 } }); [EOL]     Assert.assertEquals(expected, m); [EOL]     m.setSubMatrix(detData2, 0, 0); [EOL]     expected = createSparseMatrix(new double[][] { { 1.0, 3.0, 3.0 }, { 2.0, 4.0, 3.0 }, { 1.0, 2.0, 4.0 } }); [EOL]     Assert.assertEquals(expected, m); [EOL]     m.setSubMatrix(testDataPlus2, 0, 0); [EOL]     expected = createSparseMatrix(new double[][] { { 3.0, 4.0, 5.0 }, { 4.0, 7.0, 5.0 }, { 3.0, 2.0, 10.0 } }); [EOL]     Assert.assertEquals(expected, m); [EOL]     OpenMapRealMatrix matrix = createSparseMatrix(new double[][] { { 1, 2, 3, 4 }, { 5, 6, 7, 8 }, { 9, 0, 1, 2 } }); [EOL]     matrix.setSubMatrix(new double[][] { { 3, 4 }, { 5, 6 } }, 1, 1); [EOL]     expected = createSparseMatrix(new double[][] { { 1, 2, 3, 4 }, { 5, 3, 4, 8 }, { 9, 5, 6, 2 } }); [EOL]     Assert.assertEquals(expected, matrix); [EOL]     try { [EOL]         m.setSubMatrix(testData, 1, 1); [EOL]         Assert.fail("expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException e) { [EOL]     } [EOL]     try { [EOL]         m.setSubMatrix(testData, -1, 1); [EOL]         Assert.fail("expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException e) { [EOL]     } [EOL]     try { [EOL]         m.setSubMatrix(testData, 1, -1); [EOL]         Assert.fail("expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException e) { [EOL]     } [EOL]     try { [EOL]         m.setSubMatrix(null, 1, 1); [EOL]         Assert.fail("expecting NullArgumentException"); [EOL]     } catch (NullArgumentException e) { [EOL]     } [EOL]     try { [EOL]         new OpenMapRealMatrix(0, 0); [EOL]         Assert.fail("expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         m.setSubMatrix(new double[][] { { 1 }, { 2, 3 } }, 0, 0); [EOL]         Assert.fail("expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         m.setSubMatrix(new double[][] { {} }, 0, 0); [EOL]         Assert.fail("expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 584,662
@Test [EOL] public void testSerial() { [EOL]     OpenMapRealMatrix m = createSparseMatrix(testData); [EOL]     Assert.assertEquals(m, TestUtils.serializeAndRecover(m)); [EOL] } <line_num>: 664,668
protected void assertClose(String msg, RealMatrix m, RealMatrix n, double tolerance) { [EOL]     Assert.assertTrue(msg, m.subtract(n).getNorm() < tolerance); [EOL] } <line_num>: 673,676
protected void assertClose(String msg, double[] m, double[] n, double tolerance) { [EOL]     if (m.length != n.length) { [EOL]         Assert.fail("vectors not same length"); [EOL]     } [EOL]     for (int i = 0; i < m.length; i++) { [EOL]         Assert.assertEquals(msg + " " + i + " elements differ", m[i], n[i], tolerance); [EOL]     } [EOL] } <line_num>: 679,688
private OpenMapRealMatrix createSparseMatrix(double[][] data) { [EOL]     OpenMapRealMatrix matrix = new OpenMapRealMatrix(data.length, data[0].length); [EOL]     for (int row = 0; row < data.length; row++) { [EOL]         for (int col = 0; col < data[row].length; col++) { [EOL]             matrix.setEntry(row, col, data[row][col]); [EOL]         } [EOL]     } [EOL]     return matrix; [EOL] } <line_num>: 690,698
