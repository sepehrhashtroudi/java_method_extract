@Override [EOL] public RealVector create(final double[] data) { [EOL]     return new ArrayRealVector(data, true); [EOL] } <line_num>: 31,34
@Test [EOL] public void testConstructors() { [EOL]     final double[] vec1 = { 1d, 2d, 3d }; [EOL]     final double[] vec3 = { 7d, 8d, 9d }; [EOL]     final double[] vec4 = { 1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d }; [EOL]     final Double[] dvec1 = { 1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d }; [EOL]     ArrayRealVector v0 = new ArrayRealVector(); [EOL]     Assert.assertEquals("testData len", 0, v0.getDimension()); [EOL]     ArrayRealVector v1 = new ArrayRealVector(7); [EOL]     Assert.assertEquals("testData len", 7, v1.getDimension()); [EOL]     Assert.assertEquals("testData is 0.0 ", 0.0, v1.getEntry(6), 0); [EOL]     ArrayRealVector v2 = new ArrayRealVector(5, 1.23); [EOL]     Assert.assertEquals("testData len", 5, v2.getDimension()); [EOL]     Assert.assertEquals("testData is 1.23 ", 1.23, v2.getEntry(4), 0); [EOL]     ArrayRealVector v3 = new ArrayRealVector(vec1); [EOL]     Assert.assertEquals("testData len", 3, v3.getDimension()); [EOL]     Assert.assertEquals("testData is 2.0 ", 2.0, v3.getEntry(1), 0); [EOL]     ArrayRealVector v3_bis = new ArrayRealVector(vec1, true); [EOL]     Assert.assertEquals("testData len", 3, v3_bis.getDimension()); [EOL]     Assert.assertEquals("testData is 2.0 ", 2.0, v3_bis.getEntry(1), 0); [EOL]     Assert.assertNotSame(v3_bis.getDataRef(), vec1); [EOL]     Assert.assertNotSame(v3_bis.toArray(), vec1); [EOL]     ArrayRealVector v3_ter = new ArrayRealVector(vec1, false); [EOL]     Assert.assertEquals("testData len", 3, v3_ter.getDimension()); [EOL]     Assert.assertEquals("testData is 2.0 ", 2.0, v3_ter.getEntry(1), 0); [EOL]     Assert.assertSame(v3_ter.getDataRef(), vec1); [EOL]     Assert.assertNotSame(v3_ter.toArray(), vec1); [EOL]     ArrayRealVector v4 = new ArrayRealVector(vec4, 3, 2); [EOL]     Assert.assertEquals("testData len", 2, v4.getDimension()); [EOL]     Assert.assertEquals("testData is 4.0 ", 4.0, v4.getEntry(0), 0); [EOL]     try { [EOL]         new ArrayRealVector(vec4, 8, 3); [EOL]         Assert.fail("MathIllegalArgumentException expected"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     RealVector v5_i = new ArrayRealVector(dvec1); [EOL]     Assert.assertEquals("testData len", 9, v5_i.getDimension()); [EOL]     Assert.assertEquals("testData is 9.0 ", 9.0, v5_i.getEntry(8), 0); [EOL]     ArrayRealVector v5 = new ArrayRealVector(dvec1); [EOL]     Assert.assertEquals("testData len", 9, v5.getDimension()); [EOL]     Assert.assertEquals("testData is 9.0 ", 9.0, v5.getEntry(8), 0); [EOL]     ArrayRealVector v6 = new ArrayRealVector(dvec1, 3, 2); [EOL]     Assert.assertEquals("testData len", 2, v6.getDimension()); [EOL]     Assert.assertEquals("testData is 4.0 ", 4.0, v6.getEntry(0), 0); [EOL]     try { [EOL]         new ArrayRealVector(dvec1, 8, 3); [EOL]         Assert.fail("MathIllegalArgumentException expected"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     ArrayRealVector v7 = new ArrayRealVector(v1); [EOL]     Assert.assertEquals("testData len", 7, v7.getDimension()); [EOL]     Assert.assertEquals("testData is 0.0 ", 0.0, v7.getEntry(6), 0); [EOL]     RealVectorTestImpl v7_i = new RealVectorTestImpl(vec1); [EOL]     ArrayRealVector v7_2 = new ArrayRealVector(v7_i); [EOL]     Assert.assertEquals("testData len", 3, v7_2.getDimension()); [EOL]     Assert.assertEquals("testData is 0.0 ", 2.0d, v7_2.getEntry(1), 0); [EOL]     ArrayRealVector v8 = new ArrayRealVector(v1, true); [EOL]     Assert.assertEquals("testData len", 7, v8.getDimension()); [EOL]     Assert.assertEquals("testData is 0.0 ", 0.0, v8.getEntry(6), 0); [EOL]     Assert.assertNotSame("testData not same object ", v1.getDataRef(), v8.getDataRef()); [EOL]     ArrayRealVector v8_2 = new ArrayRealVector(v1, false); [EOL]     Assert.assertEquals("testData len", 7, v8_2.getDimension()); [EOL]     Assert.assertEquals("testData is 0.0 ", 0.0, v8_2.getEntry(6), 0); [EOL]     Assert.assertEquals("testData same object ", v1.getDataRef(), v8_2.getDataRef()); [EOL]     ArrayRealVector v9 = new ArrayRealVector(v1, v3); [EOL]     Assert.assertEquals("testData len", 10, v9.getDimension()); [EOL]     Assert.assertEquals("testData is 1.0 ", 1.0, v9.getEntry(7), 0); [EOL]     ArrayRealVector v10 = new ArrayRealVector(v2, new RealVectorTestImpl(vec3)); [EOL]     Assert.assertEquals("testData len", 8, v10.getDimension()); [EOL]     Assert.assertEquals("testData is 1.23 ", 1.23, v10.getEntry(4), 0); [EOL]     Assert.assertEquals("testData is 7.0 ", 7.0, v10.getEntry(5), 0); [EOL]     ArrayRealVector v11 = new ArrayRealVector(new RealVectorTestImpl(vec3), v2); [EOL]     Assert.assertEquals("testData len", 8, v11.getDimension()); [EOL]     Assert.assertEquals("testData is 9.0 ", 9.0, v11.getEntry(2), 0); [EOL]     Assert.assertEquals("testData is 1.23 ", 1.23, v11.getEntry(3), 0); [EOL]     ArrayRealVector v12 = new ArrayRealVector(v2, vec3); [EOL]     Assert.assertEquals("testData len", 8, v12.getDimension()); [EOL]     Assert.assertEquals("testData is 1.23 ", 1.23, v12.getEntry(4), 0); [EOL]     Assert.assertEquals("testData is 7.0 ", 7.0, v12.getEntry(5), 0); [EOL]     ArrayRealVector v13 = new ArrayRealVector(vec3, v2); [EOL]     Assert.assertEquals("testData len", 8, v13.getDimension()); [EOL]     Assert.assertEquals("testData is 9.0 ", 9.0, v13.getEntry(2), 0); [EOL]     Assert.assertEquals("testData is 1.23 ", 1.23, v13.getEntry(3), 0); [EOL]     ArrayRealVector v14 = new ArrayRealVector(vec3, vec4); [EOL]     Assert.assertEquals("testData len", 12, v14.getDimension()); [EOL]     Assert.assertEquals("testData is 9.0 ", 9.0, v14.getEntry(2), 0); [EOL]     Assert.assertEquals("testData is 1.0 ", 1.0, v14.getEntry(3), 0); [EOL] } <line_num>: 36,147
@Test [EOL] public void testGetDataRef() { [EOL]     final double[] data = { 1d, 2d, 3d, 4d }; [EOL]     final ArrayRealVector v = new ArrayRealVector(data); [EOL]     v.getDataRef()[0] = 0d; [EOL]     Assert.assertEquals("", 0d, v.getEntry(0), 0); [EOL] } <line_num>: 149,155
@Test [EOL] public void testPredicates() { [EOL]     Assert.assertEquals(create(new double[] { Double.NaN, 1, 2 }).hashCode(), create(new double[] { 0, Double.NaN, 2 }).hashCode()); [EOL]     Assert.assertTrue(create(new double[] { Double.NaN, 1, 2 }).hashCode() != create(new double[] { 0, 1, 2 }).hashCode()); [EOL] } <line_num>: 157,165
@Test [EOL] public void testZeroVectors() { [EOL]     Assert.assertEquals(0, new ArrayRealVector(new double[0]).getDimension()); [EOL]     Assert.assertEquals(0, new ArrayRealVector(new double[0], true).getDimension()); [EOL]     Assert.assertEquals(0, new ArrayRealVector(new double[0], false).getDimension()); [EOL] } <line_num>: 167,172
