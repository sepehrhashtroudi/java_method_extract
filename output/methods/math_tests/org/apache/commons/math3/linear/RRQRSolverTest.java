@Test [EOL] public void testRank() { [EOL]     DecompositionSolver solver = new RRQRDecomposition(MatrixUtils.createRealMatrix(testData3x3NonSingular), 1.0e-16).getSolver(); [EOL]     Assert.assertTrue(solver.isNonSingular()); [EOL]     solver = new RRQRDecomposition(MatrixUtils.createRealMatrix(testData3x3Singular), 1.0e-16).getSolver(); [EOL]     Assert.assertFalse(solver.isNonSingular()); [EOL]     solver = new RRQRDecomposition(MatrixUtils.createRealMatrix(testData3x4), 1.0e-16).getSolver(); [EOL]     Assert.assertTrue(solver.isNonSingular()); [EOL]     solver = new RRQRDecomposition(MatrixUtils.createRealMatrix(testData4x3), 1.0e-16).getSolver(); [EOL]     Assert.assertTrue(solver.isNonSingular()); [EOL] } <line_num>: 54,69
@Test [EOL] public void testSolveDimensionErrors() { [EOL]     DecompositionSolver solver = new RRQRDecomposition(MatrixUtils.createRealMatrix(testData3x3NonSingular)).getSolver(); [EOL]     RealMatrix b = MatrixUtils.createRealMatrix(new double[2][2]); [EOL]     try { [EOL]         solver.solve(b); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (MathIllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         solver.solve(b.getColumnVector(0)); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (MathIllegalArgumentException iae) { [EOL]     } [EOL] } <line_num>: 72,90
@Test [EOL] public void testSolveRankErrors() { [EOL]     DecompositionSolver solver = new RRQRDecomposition(MatrixUtils.createRealMatrix(testData3x3Singular), 1.0e-16).getSolver(); [EOL]     RealMatrix b = MatrixUtils.createRealMatrix(new double[3][2]); [EOL]     try { [EOL]         solver.solve(b); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (SingularMatrixException iae) { [EOL]     } [EOL]     try { [EOL]         solver.solve(b.getColumnVector(0)); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (SingularMatrixException iae) { [EOL]     } [EOL] } <line_num>: 93,111
@Test [EOL] public void testSolve() { [EOL]     RealMatrix b = MatrixUtils.createRealMatrix(new double[][] { { -102, 12250 }, { 544, 24500 }, { 167, -36750 } }); [EOL]     RealMatrix xRef = MatrixUtils.createRealMatrix(new double[][] { { 1, 2515 }, { 2, 422 }, { -3, 898 } }); [EOL]     RRQRDecomposition decomposition = new RRQRDecomposition(MatrixUtils.createRealMatrix(testData3x3NonSingular)); [EOL]     DecompositionSolver solver = decomposition.getSolver(); [EOL]     Assert.assertEquals(0, solver.solve(b).subtract(xRef).getNorm(), 3.0e-16 * xRef.getNorm()); [EOL]     for (int i = 0; i < b.getColumnDimension(); ++i) { [EOL]         final RealVector x = solver.solve(b.getColumnVector(i)); [EOL]         final double error = x.subtract(xRef.getColumnVector(i)).getNorm(); [EOL]         Assert.assertEquals(0, error, 3.0e-16 * xRef.getColumnVector(i).getNorm()); [EOL]     } [EOL]     for (int i = 0; i < b.getColumnDimension(); ++i) { [EOL]         ArrayRealVectorTest.RealVectorTestImpl v = new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(i)); [EOL]         final RealVector x = solver.solve(v); [EOL]         final double error = x.subtract(xRef.getColumnVector(i)).getNorm(); [EOL]         Assert.assertEquals(0, error, 3.0e-16 * xRef.getColumnVector(i).getNorm()); [EOL]     } [EOL] } <line_num>: 114,146
@Override [EOL] public double visit(int row, int column, double value) { [EOL]     return value * (1.0 + noise * (2 * r.nextDouble() - 1)); [EOL] } <line_num>: 160,163
@Test [EOL] public void testOverdetermined() { [EOL]     final Random r = new Random(5559252868205245l); [EOL]     int p = (7 * BlockRealMatrix.BLOCK_SIZE) / 4; [EOL]     int q = (5 * BlockRealMatrix.BLOCK_SIZE) / 4; [EOL]     RealMatrix a = createTestMatrix(r, p, q); [EOL]     RealMatrix xRef = createTestMatrix(r, q, BlockRealMatrix.BLOCK_SIZE + 3); [EOL]     RealMatrix b = a.multiply(xRef); [EOL]     final double noise = 0.001; [EOL]     b.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { [EOL]  [EOL]         @Override [EOL]         public double visit(int row, int column, double value) { [EOL]             return value * (1.0 + noise * (2 * r.nextDouble() - 1)); [EOL]         } [EOL]     }); [EOL]     RealMatrix x = new RRQRDecomposition(a).getSolver().solve(b); [EOL]     Assert.assertEquals(0, x.subtract(xRef).getNorm(), 0.01 * noise * p * q); [EOL] } <line_num>: 148,170
@Test [EOL] public void testUnderdetermined() { [EOL]     final Random r = new Random(42185006424567123l); [EOL]     int p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4; [EOL]     int q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4; [EOL]     RealMatrix a = createTestMatrix(r, p, q); [EOL]     RealMatrix xRef = createTestMatrix(r, q, BlockRealMatrix.BLOCK_SIZE + 3); [EOL]     RealMatrix b = a.multiply(xRef); [EOL]     RRQRDecomposition rrqrd = new RRQRDecomposition(a); [EOL]     RealMatrix x = rrqrd.getSolver().solve(b); [EOL]     Assert.assertTrue(x.subtract(xRef).getNorm() / (p * q) > 0.01); [EOL]     RealMatrix permuted = rrqrd.getP().transpose().multiply(x); [EOL]     Assert.assertEquals(0.0, permuted.getSubMatrix(p, q - 1, 0, permuted.getColumnDimension() - 1).getNorm(), 0); [EOL] } <line_num>: 172,190
@Override [EOL] public double visit(int row, int column, double value) { [EOL]     return 2.0 * r.nextDouble() - 1.0; [EOL] } <line_num>: 195,198
private RealMatrix createTestMatrix(final Random r, final int rows, final int columns) { [EOL]     RealMatrix m = MatrixUtils.createRealMatrix(rows, columns); [EOL]     m.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { [EOL]  [EOL]         @Override [EOL]         public double visit(int row, int column, double value) { [EOL]             return 2.0 * r.nextDouble() - 1.0; [EOL]         } [EOL]     }); [EOL]     return m; [EOL] } <line_num>: 192,201
