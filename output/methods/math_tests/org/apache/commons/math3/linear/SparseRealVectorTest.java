@Override [EOL] public RealVector create(double[] data) { [EOL]     return new OpenMapRealVector(data); [EOL] } <line_num>: 30,33
@Test [EOL] public void testConstructors() { [EOL]     final double[] vec1 = { 1d, 2d, 3d }; [EOL]     final Double[] dvec1 = { 1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d }; [EOL]     OpenMapRealVector v0 = new OpenMapRealVector(); [EOL]     Assert.assertEquals("testData len", 0, v0.getDimension()); [EOL]     OpenMapRealVector v1 = new OpenMapRealVector(7); [EOL]     Assert.assertEquals("testData len", 7, v1.getDimension()); [EOL]     Assert.assertEquals("testData is 0.0 ", 0.0, v1.getEntry(6), 0); [EOL]     OpenMapRealVector v3 = new OpenMapRealVector(vec1); [EOL]     Assert.assertEquals("testData len", 3, v3.getDimension()); [EOL]     Assert.assertEquals("testData is 2.0 ", 2.0, v3.getEntry(1), 0); [EOL]     RealVector v5_i = new OpenMapRealVector(dvec1); [EOL]     Assert.assertEquals("testData len", 9, v5_i.getDimension()); [EOL]     Assert.assertEquals("testData is 9.0 ", 9.0, v5_i.getEntry(8), 0); [EOL]     OpenMapRealVector v5 = new OpenMapRealVector(dvec1); [EOL]     Assert.assertEquals("testData len", 9, v5.getDimension()); [EOL]     Assert.assertEquals("testData is 9.0 ", 9.0, v5.getEntry(8), 0); [EOL]     OpenMapRealVector v7 = new OpenMapRealVector(v1); [EOL]     Assert.assertEquals("testData len", 7, v7.getDimension()); [EOL]     Assert.assertEquals("testData is 0.0 ", 0.0, v7.getEntry(6), 0); [EOL]     RealVectorTestImpl v7_i = new RealVectorTestImpl(vec1); [EOL]     OpenMapRealVector v7_2 = new OpenMapRealVector(v7_i); [EOL]     Assert.assertEquals("testData len", 3, v7_2.getDimension()); [EOL]     Assert.assertEquals("testData is 0.0 ", 2.0d, v7_2.getEntry(1), 0); [EOL]     OpenMapRealVector v8 = new OpenMapRealVector(v1); [EOL]     Assert.assertEquals("testData len", 7, v8.getDimension()); [EOL]     Assert.assertEquals("testData is 0.0 ", 0.0, v8.getEntry(6), 0); [EOL] } <line_num>: 35,83
@Test [EOL] public void testConcurrentModification() { [EOL]     final RealVector u = new OpenMapRealVector(3, 1e-6); [EOL]     u.setEntry(0, 1); [EOL]     u.setEntry(1, 0); [EOL]     u.setEntry(2, 2); [EOL]     final RealVector v1 = new OpenMapRealVector(3, 1e-6); [EOL]     v1.setEntry(0, 0); [EOL]     v1.setEntry(1, 3); [EOL]     v1.setEntry(2, 0); [EOL]     u.ebeMultiply(v1); [EOL]     u.ebeDivide(v1); [EOL] } <line_num>: 86,100
@Test [EOL] @Override [EOL] @Ignore("This test is skipped until MATH-821 is fixed") [EOL] public void testMap() { [EOL] } <line_num>: 107,110
@Test [EOL] @Override [EOL] @Ignore("This test is skipped until MATH-821 is fixed") [EOL] public void testMapToSelf() { [EOL] } <line_num>: 117,120
