@Test [EOL] public void testDimensions() { [EOL]     CholeskyDecomposition llt = new CholeskyDecomposition(MatrixUtils.createRealMatrix(testData)); [EOL]     Assert.assertEquals(testData.length, llt.getL().getRowDimension()); [EOL]     Assert.assertEquals(testData.length, llt.getL().getColumnDimension()); [EOL]     Assert.assertEquals(testData.length, llt.getLT().getRowDimension()); [EOL]     Assert.assertEquals(testData.length, llt.getLT().getColumnDimension()); [EOL] } <line_num>: 34,42
@Test(expected = NonSquareMatrixException.class) [EOL] public void testNonSquare() { [EOL]     new CholeskyDecomposition(MatrixUtils.createRealMatrix(new double[3][2])); [EOL] } <line_num>: 45,48
@Test(expected = NonSymmetricMatrixException.class) [EOL] public void testNotSymmetricMatrixException() { [EOL]     double[][] changed = testData.clone(); [EOL]     changed[0][changed[0].length - 1] += 1.0e-5; [EOL]     new CholeskyDecomposition(MatrixUtils.createRealMatrix(changed)); [EOL] } <line_num>: 51,56
@Test(expected = NonPositiveDefiniteMatrixException.class) [EOL] public void testNotPositiveDefinite() { [EOL]     new CholeskyDecomposition(MatrixUtils.createRealMatrix(new double[][] { { 14, 11, 13, 15, 24 }, { 11, 34, 13, 8, 25 }, { 13, 13, 14, 15, 21 }, { 15, 8, 15, 18, 23 }, { 24, 25, 21, 23, 45 } })); [EOL] } <line_num>: 59,68
@Test(expected = NonPositiveDefiniteMatrixException.class) [EOL] public void testMath274() { [EOL]     new CholeskyDecomposition(MatrixUtils.createRealMatrix(new double[][] { { 0.40434286, -0.09376327, 0.30328980, 0.04909388 }, { -0.09376327, 0.10400408, 0.07137959, 0.04762857 }, { 0.30328980, 0.07137959, 0.30458776, 0.04882449 }, { 0.04909388, 0.04762857, 0.04882449, 0.07543265 } })); [EOL] } <line_num>: 70,79
@Test [EOL] public void testAEqualLLT() { [EOL]     RealMatrix matrix = MatrixUtils.createRealMatrix(testData); [EOL]     CholeskyDecomposition llt = new CholeskyDecomposition(matrix); [EOL]     RealMatrix l = llt.getL(); [EOL]     RealMatrix lt = llt.getLT(); [EOL]     double norm = l.multiply(lt).subtract(matrix).getNorm(); [EOL]     Assert.assertEquals(0, norm, 1.0e-15); [EOL] } <line_num>: 82,90
@Test [EOL] public void testLLowerTriangular() { [EOL]     RealMatrix matrix = MatrixUtils.createRealMatrix(testData); [EOL]     RealMatrix l = new CholeskyDecomposition(matrix).getL(); [EOL]     for (int i = 0; i < l.getRowDimension(); i++) { [EOL]         for (int j = i + 1; j < l.getColumnDimension(); j++) { [EOL]             Assert.assertEquals(0.0, l.getEntry(i, j), 0.0); [EOL]         } [EOL]     } [EOL] } <line_num>: 93,102
@Test [EOL] public void testLTTransposed() { [EOL]     RealMatrix matrix = MatrixUtils.createRealMatrix(testData); [EOL]     CholeskyDecomposition llt = new CholeskyDecomposition(matrix); [EOL]     RealMatrix l = llt.getL(); [EOL]     RealMatrix lt = llt.getLT(); [EOL]     double norm = l.subtract(lt.transpose()).getNorm(); [EOL]     Assert.assertEquals(0, norm, 1.0e-15); [EOL] } <line_num>: 105,113
@Test [EOL] public void testMatricesValues() { [EOL]     RealMatrix lRef = MatrixUtils.createRealMatrix(new double[][] { { 1, 0, 0, 0, 0 }, { 2, 3, 0, 0, 0 }, { 4, 5, 6, 0, 0 }, { 7, 8, 9, 10, 0 }, { 11, 12, 13, 14, 15 } }); [EOL]     CholeskyDecomposition llt = new CholeskyDecomposition(MatrixUtils.createRealMatrix(testData)); [EOL]     RealMatrix l = llt.getL(); [EOL]     Assert.assertEquals(0, l.subtract(lRef).getNorm(), 1.0e-13); [EOL]     RealMatrix lt = llt.getLT(); [EOL]     Assert.assertEquals(0, lt.subtract(lRef.transpose()).getNorm(), 1.0e-13); [EOL]     Assert.assertTrue(l == llt.getL()); [EOL]     Assert.assertTrue(lt == llt.getLT()); [EOL] } <line_num>: 116,137
