@Test [EOL] public void testDimensions() { [EOL]     RealMatrix matrix = MatrixUtils.createRealMatrix(testData); [EOL]     LUDecomposition LU = new LUDecomposition(matrix); [EOL]     Assert.assertEquals(testData.length, LU.getL().getRowDimension()); [EOL]     Assert.assertEquals(testData.length, LU.getL().getColumnDimension()); [EOL]     Assert.assertEquals(testData.length, LU.getU().getRowDimension()); [EOL]     Assert.assertEquals(testData.length, LU.getU().getColumnDimension()); [EOL]     Assert.assertEquals(testData.length, LU.getP().getRowDimension()); [EOL]     Assert.assertEquals(testData.length, LU.getP().getColumnDimension()); [EOL] } <line_num>: 57,68
@Test [EOL] public void testNonSquare() { [EOL]     try { [EOL]         new LUDecomposition(MatrixUtils.createRealMatrix(new double[3][2])); [EOL]         Assert.fail("Expecting NonSquareMatrixException"); [EOL]     } catch (NonSquareMatrixException ime) { [EOL]     } [EOL] } <line_num>: 71,79
@Test [EOL] public void testPAEqualLU() { [EOL]     RealMatrix matrix = MatrixUtils.createRealMatrix(testData); [EOL]     LUDecomposition lu = new LUDecomposition(matrix); [EOL]     RealMatrix l = lu.getL(); [EOL]     RealMatrix u = lu.getU(); [EOL]     RealMatrix p = lu.getP(); [EOL]     double norm = l.multiply(u).subtract(p.multiply(matrix)).getNorm(); [EOL]     Assert.assertEquals(0, norm, normTolerance); [EOL]     matrix = MatrixUtils.createRealMatrix(testDataMinus); [EOL]     lu = new LUDecomposition(matrix); [EOL]     l = lu.getL(); [EOL]     u = lu.getU(); [EOL]     p = lu.getP(); [EOL]     norm = l.multiply(u).subtract(p.multiply(matrix)).getNorm(); [EOL]     Assert.assertEquals(0, norm, normTolerance); [EOL]     matrix = MatrixUtils.createRealIdentityMatrix(17); [EOL]     lu = new LUDecomposition(matrix); [EOL]     l = lu.getL(); [EOL]     u = lu.getU(); [EOL]     p = lu.getP(); [EOL]     norm = l.multiply(u).subtract(p.multiply(matrix)).getNorm(); [EOL]     Assert.assertEquals(0, norm, normTolerance); [EOL]     matrix = MatrixUtils.createRealMatrix(singular); [EOL]     lu = new LUDecomposition(matrix); [EOL]     Assert.assertFalse(lu.getSolver().isNonSingular()); [EOL]     Assert.assertNull(lu.getL()); [EOL]     Assert.assertNull(lu.getU()); [EOL]     Assert.assertNull(lu.getP()); [EOL]     matrix = MatrixUtils.createRealMatrix(bigSingular); [EOL]     lu = new LUDecomposition(matrix); [EOL]     Assert.assertFalse(lu.getSolver().isNonSingular()); [EOL]     Assert.assertNull(lu.getL()); [EOL]     Assert.assertNull(lu.getU()); [EOL]     Assert.assertNull(lu.getP()); [EOL] } <line_num>: 82,122
@Test [EOL] public void testLLowerTriangular() { [EOL]     RealMatrix matrix = MatrixUtils.createRealMatrix(testData); [EOL]     RealMatrix l = new LUDecomposition(matrix).getL(); [EOL]     for (int i = 0; i < l.getRowDimension(); i++) { [EOL]         Assert.assertEquals(l.getEntry(i, i), 1, entryTolerance); [EOL]         for (int j = i + 1; j < l.getColumnDimension(); j++) { [EOL]             Assert.assertEquals(l.getEntry(i, j), 0, entryTolerance); [EOL]         } [EOL]     } [EOL] } <line_num>: 125,135
@Test [EOL] public void testUUpperTriangular() { [EOL]     RealMatrix matrix = MatrixUtils.createRealMatrix(testData); [EOL]     RealMatrix u = new LUDecomposition(matrix).getU(); [EOL]     for (int i = 0; i < u.getRowDimension(); i++) { [EOL]         for (int j = 0; j < i; j++) { [EOL]             Assert.assertEquals(u.getEntry(i, j), 0, entryTolerance); [EOL]         } [EOL]     } [EOL] } <line_num>: 138,147
@Test [EOL] public void testPPermutation() { [EOL]     RealMatrix matrix = MatrixUtils.createRealMatrix(testData); [EOL]     RealMatrix p = new LUDecomposition(matrix).getP(); [EOL]     RealMatrix ppT = p.multiply(p.transpose()); [EOL]     RealMatrix id = MatrixUtils.createRealIdentityMatrix(p.getRowDimension()); [EOL]     Assert.assertEquals(0, ppT.subtract(id).getNorm(), normTolerance); [EOL]     for (int i = 0; i < p.getRowDimension(); i++) { [EOL]         int zeroCount = 0; [EOL]         int oneCount = 0; [EOL]         int otherCount = 0; [EOL]         for (int j = 0; j < p.getColumnDimension(); j++) { [EOL]             final double e = p.getEntry(i, j); [EOL]             if (e == 0) { [EOL]                 ++zeroCount; [EOL]             } else if (e == 1) { [EOL]                 ++oneCount; [EOL]             } else { [EOL]                 ++otherCount; [EOL]             } [EOL]         } [EOL]         Assert.assertEquals(p.getColumnDimension() - 1, zeroCount); [EOL]         Assert.assertEquals(1, oneCount); [EOL]         Assert.assertEquals(0, otherCount); [EOL]     } [EOL]     for (int j = 0; j < p.getColumnDimension(); j++) { [EOL]         int zeroCount = 0; [EOL]         int oneCount = 0; [EOL]         int otherCount = 0; [EOL]         for (int i = 0; i < p.getRowDimension(); i++) { [EOL]             final double e = p.getEntry(i, j); [EOL]             if (e == 0) { [EOL]                 ++zeroCount; [EOL]             } else if (e == 1) { [EOL]                 ++oneCount; [EOL]             } else { [EOL]                 ++otherCount; [EOL]             } [EOL]         } [EOL]         Assert.assertEquals(p.getRowDimension() - 1, zeroCount); [EOL]         Assert.assertEquals(1, oneCount); [EOL]         Assert.assertEquals(0, otherCount); [EOL]     } [EOL] } <line_num>: 150,197
@Test [EOL] public void testSingular() { [EOL]     LUDecomposition lu = new LUDecomposition(MatrixUtils.createRealMatrix(testData)); [EOL]     Assert.assertTrue(lu.getSolver().isNonSingular()); [EOL]     lu = new LUDecomposition(MatrixUtils.createRealMatrix(singular)); [EOL]     Assert.assertFalse(lu.getSolver().isNonSingular()); [EOL]     lu = new LUDecomposition(MatrixUtils.createRealMatrix(bigSingular)); [EOL]     Assert.assertFalse(lu.getSolver().isNonSingular()); [EOL] } <line_num>: 200,209
@Test [EOL] public void testMatricesValues1() { [EOL]     LUDecomposition lu = new LUDecomposition(MatrixUtils.createRealMatrix(testData)); [EOL]     RealMatrix lRef = MatrixUtils.createRealMatrix(new double[][] { { 1.0, 0.0, 0.0 }, { 0.5, 1.0, 0.0 }, { 0.5, 0.2, 1.0 } }); [EOL]     RealMatrix uRef = MatrixUtils.createRealMatrix(new double[][] { { 2.0, 5.0, 3.0 }, { 0.0, -2.5, 6.5 }, { 0.0, 0.0, 0.2 } }); [EOL]     RealMatrix pRef = MatrixUtils.createRealMatrix(new double[][] { { 0.0, 1.0, 0.0 }, { 0.0, 0.0, 1.0 }, { 1.0, 0.0, 0.0 } }); [EOL]     int[] pivotRef = { 1, 2, 0 }; [EOL]     RealMatrix l = lu.getL(); [EOL]     Assert.assertEquals(0, l.subtract(lRef).getNorm(), 1.0e-13); [EOL]     RealMatrix u = lu.getU(); [EOL]     Assert.assertEquals(0, u.subtract(uRef).getNorm(), 1.0e-13); [EOL]     RealMatrix p = lu.getP(); [EOL]     Assert.assertEquals(0, p.subtract(pRef).getNorm(), 1.0e-13); [EOL]     int[] pivot = lu.getPivot(); [EOL]     for (int i = 0; i < pivotRef.length; ++i) { [EOL]         Assert.assertEquals(pivotRef[i], pivot[i]); [EOL]     } [EOL]     Assert.assertTrue(l == lu.getL()); [EOL]     Assert.assertTrue(u == lu.getU()); [EOL]     Assert.assertTrue(p == lu.getP()); [EOL] } <line_num>: 212,250
@Test [EOL] public void testMatricesValues2() { [EOL]     LUDecomposition lu = new LUDecomposition(MatrixUtils.createRealMatrix(luData)); [EOL]     RealMatrix lRef = MatrixUtils.createRealMatrix(new double[][] { { 1.0, 0.0, 0.0 }, { 0.0, 1.0, 0.0 }, { 1.0 / 3.0, 0.0, 1.0 } }); [EOL]     RealMatrix uRef = MatrixUtils.createRealMatrix(new double[][] { { 6.0, 9.0, 8.0 }, { 0.0, 5.0, 7.0 }, { 0.0, 0.0, 1.0 / 3.0 } }); [EOL]     RealMatrix pRef = MatrixUtils.createRealMatrix(new double[][] { { 0.0, 0.0, 1.0 }, { 0.0, 1.0, 0.0 }, { 1.0, 0.0, 0.0 } }); [EOL]     int[] pivotRef = { 2, 1, 0 }; [EOL]     RealMatrix l = lu.getL(); [EOL]     Assert.assertEquals(0, l.subtract(lRef).getNorm(), 1.0e-13); [EOL]     RealMatrix u = lu.getU(); [EOL]     Assert.assertEquals(0, u.subtract(uRef).getNorm(), 1.0e-13); [EOL]     RealMatrix p = lu.getP(); [EOL]     Assert.assertEquals(0, p.subtract(pRef).getNorm(), 1.0e-13); [EOL]     int[] pivot = lu.getPivot(); [EOL]     for (int i = 0; i < pivotRef.length; ++i) { [EOL]         Assert.assertEquals(pivotRef[i], pivot[i]); [EOL]     } [EOL]     Assert.assertTrue(l == lu.getL()); [EOL]     Assert.assertTrue(u == lu.getU()); [EOL]     Assert.assertTrue(p == lu.getP()); [EOL] } <line_num>: 253,290
