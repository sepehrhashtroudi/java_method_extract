@Test [EOL] public void testDimensions() { [EOL]     checkdimensions(MatrixUtils.createRealMatrix(testSquare)); [EOL]     checkdimensions(MatrixUtils.createRealMatrix(testNonSquare)); [EOL]     checkdimensions(MatrixUtils.createRealMatrix(testNonSquare).transpose()); [EOL] } <line_num>: 41,46
private void checkdimensions(RealMatrix matrix) { [EOL]     final int m = matrix.getRowDimension(); [EOL]     final int n = matrix.getColumnDimension(); [EOL]     BiDiagonalTransformer transformer = new BiDiagonalTransformer(matrix); [EOL]     Assert.assertEquals(m, transformer.getU().getRowDimension()); [EOL]     Assert.assertEquals(m, transformer.getU().getColumnDimension()); [EOL]     Assert.assertEquals(m, transformer.getB().getRowDimension()); [EOL]     Assert.assertEquals(n, transformer.getB().getColumnDimension()); [EOL]     Assert.assertEquals(n, transformer.getV().getRowDimension()); [EOL]     Assert.assertEquals(n, transformer.getV().getColumnDimension()); [EOL] } <line_num>: 48,59
@Test [EOL] public void testAEqualUSVt() { [EOL]     checkAEqualUSVt(MatrixUtils.createRealMatrix(testSquare)); [EOL]     checkAEqualUSVt(MatrixUtils.createRealMatrix(testNonSquare)); [EOL]     checkAEqualUSVt(MatrixUtils.createRealMatrix(testNonSquare).transpose()); [EOL] } <line_num>: 61,66
private void checkAEqualUSVt(RealMatrix matrix) { [EOL]     BiDiagonalTransformer transformer = new BiDiagonalTransformer(matrix); [EOL]     RealMatrix u = transformer.getU(); [EOL]     RealMatrix b = transformer.getB(); [EOL]     RealMatrix v = transformer.getV(); [EOL]     double norm = u.multiply(b).multiply(v.transpose()).subtract(matrix).getNorm(); [EOL]     Assert.assertEquals(0, norm, 1.0e-14); [EOL] } <line_num>: 68,75
@Test [EOL] public void testUOrthogonal() { [EOL]     checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare)).getU()); [EOL]     checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare)).getU()); [EOL]     checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare).transpose()).getU()); [EOL] } <line_num>: 77,82
@Test [EOL] public void testVOrthogonal() { [EOL]     checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare)).getV()); [EOL]     checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare)).getV()); [EOL]     checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare).transpose()).getV()); [EOL] } <line_num>: 84,89
private void checkOrthogonal(RealMatrix m) { [EOL]     RealMatrix mTm = m.transpose().multiply(m); [EOL]     RealMatrix id = MatrixUtils.createRealIdentityMatrix(mTm.getRowDimension()); [EOL]     Assert.assertEquals(0, mTm.subtract(id).getNorm(), 1.0e-14); [EOL] } <line_num>: 91,95
@Test [EOL] public void testBBiDiagonal() { [EOL]     checkBiDiagonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare)).getB()); [EOL]     checkBiDiagonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare)).getB()); [EOL]     checkBiDiagonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare).transpose()).getB()); [EOL] } <line_num>: 97,102
private void checkBiDiagonal(RealMatrix m) { [EOL]     final int rows = m.getRowDimension(); [EOL]     final int cols = m.getColumnDimension(); [EOL]     for (int i = 0; i < rows; ++i) { [EOL]         for (int j = 0; j < cols; ++j) { [EOL]             if (rows < cols) { [EOL]                 if ((i < j) || (i > j + 1)) { [EOL]                     Assert.assertEquals(0, m.getEntry(i, j), 1.0e-16); [EOL]                 } [EOL]             } else { [EOL]                 if ((i < j - 1) || (i > j)) { [EOL]                     Assert.assertEquals(0, m.getEntry(i, j), 1.0e-16); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 104,120
@Test [EOL] public void testSingularMatrix() { [EOL]     BiDiagonalTransformer transformer = new BiDiagonalTransformer(MatrixUtils.createRealMatrix(new double[][] { { 1.0, 2.0, 3.0 }, { 2.0, 3.0, 4.0 }, { 3.0, 5.0, 7.0 } })); [EOL]     final double s3 = FastMath.sqrt(3.0); [EOL]     final double s14 = FastMath.sqrt(14.0); [EOL]     final double s1553 = FastMath.sqrt(1553.0); [EOL]     RealMatrix uRef = MatrixUtils.createRealMatrix(new double[][] { { -1.0 / s14, 5.0 / (s3 * s14), 1.0 / s3 }, { -2.0 / s14, -4.0 / (s3 * s14), 1.0 / s3 }, { -3.0 / s14, 1.0 / (s3 * s14), -1.0 / s3 } }); [EOL]     RealMatrix bRef = MatrixUtils.createRealMatrix(new double[][] { { -s14, s1553 / s14, 0.0 }, { 0.0, -87 * s3 / (s14 * s1553), -s3 * s14 / s1553 }, { 0.0, 0.0, 0.0 } }); [EOL]     RealMatrix vRef = MatrixUtils.createRealMatrix(new double[][] { { 1.0, 0.0, 0.0 }, { 0.0, -23 / s1553, 32 / s1553 }, { 0.0, -32 / s1553, -23 / s1553 } }); [EOL]     RealMatrix u = transformer.getU(); [EOL]     Assert.assertEquals(0, u.subtract(uRef).getNorm(), 1.0e-14); [EOL]     RealMatrix b = transformer.getB(); [EOL]     Assert.assertEquals(0, b.subtract(bRef).getNorm(), 1.0e-14); [EOL]     RealMatrix v = transformer.getV(); [EOL]     Assert.assertEquals(0, v.subtract(vRef).getNorm(), 1.0e-14); [EOL]     Assert.assertTrue(u == transformer.getU()); [EOL]     Assert.assertTrue(b == transformer.getB()); [EOL]     Assert.assertTrue(v == transformer.getV()); [EOL] } <line_num>: 122,162
@Test [EOL] public void testMatricesValues() { [EOL]     BiDiagonalTransformer transformer = new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare)); [EOL]     final double s17 = FastMath.sqrt(17.0); [EOL]     RealMatrix uRef = MatrixUtils.createRealMatrix(new double[][] { { -8 / (5 * s17), 19 / (5 * s17) }, { -19 / (5 * s17), -8 / (5 * s17) } }); [EOL]     RealMatrix bRef = MatrixUtils.createRealMatrix(new double[][] { { -3 * s17 / 5, 32 * s17 / 85 }, { 0.0, -5 * s17 / 17 } }); [EOL]     RealMatrix vRef = MatrixUtils.createRealMatrix(new double[][] { { 1.0, 0.0 }, { 0.0, -1.0 } }); [EOL]     RealMatrix u = transformer.getU(); [EOL]     Assert.assertEquals(0, u.subtract(uRef).getNorm(), 1.0e-14); [EOL]     RealMatrix b = transformer.getB(); [EOL]     Assert.assertEquals(0, b.subtract(bRef).getNorm(), 1.0e-14); [EOL]     RealMatrix v = transformer.getV(); [EOL]     Assert.assertEquals(0, v.subtract(vRef).getNorm(), 1.0e-14); [EOL]     Assert.assertTrue(u == transformer.getU()); [EOL]     Assert.assertTrue(b == transformer.getB()); [EOL]     Assert.assertTrue(v == transformer.getV()); [EOL] } <line_num>: 164,195
@Test [EOL] public void testUpperOrLower() { [EOL]     Assert.assertTrue(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare)).isUpperBiDiagonal()); [EOL]     Assert.assertTrue(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare)).isUpperBiDiagonal()); [EOL]     Assert.assertFalse(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare).transpose()).isUpperBiDiagonal()); [EOL] } <line_num>: 197,202
