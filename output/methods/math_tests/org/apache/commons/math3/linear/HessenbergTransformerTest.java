@Test [EOL] public void testNonSquare() { [EOL]     try { [EOL]         new HessenbergTransformer(MatrixUtils.createRealMatrix(new double[3][2])); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (NonSquareMatrixException ime) { [EOL]     } [EOL] } <line_num>: 51,59
@Test [EOL] public void testAEqualPHPt() { [EOL]     checkAEqualPHPt(MatrixUtils.createRealMatrix(testSquare5)); [EOL]     checkAEqualPHPt(MatrixUtils.createRealMatrix(testSquare3)); [EOL]     checkAEqualPHPt(MatrixUtils.createRealMatrix(testRandom)); [EOL] } <line_num>: 61,66
@Test [EOL] public void testPOrthogonal() { [EOL]     checkOrthogonal(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare5)).getP()); [EOL]     checkOrthogonal(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare3)).getP()); [EOL] } <line_num>: 68,72
@Test [EOL] public void testPTOrthogonal() { [EOL]     checkOrthogonal(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare5)).getPT()); [EOL]     checkOrthogonal(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare3)).getPT()); [EOL] } <line_num>: 74,78
@Test [EOL] public void testHessenbergForm() { [EOL]     checkHessenbergForm(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare5)).getH()); [EOL]     checkHessenbergForm(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare3)).getH()); [EOL] } <line_num>: 80,84
@Test [EOL] public void testRandomData() { [EOL]     for (int run = 0; run < 100; run++) { [EOL]         Random r = new Random(System.currentTimeMillis()); [EOL]         int size = r.nextInt(20) + 4; [EOL]         double[][] data = new double[size][size]; [EOL]         for (int i = 0; i < size; i++) { [EOL]             for (int j = 0; j < size; j++) { [EOL]                 data[i][j] = r.nextInt(100); [EOL]             } [EOL]         } [EOL]         RealMatrix m = MatrixUtils.createRealMatrix(data); [EOL]         RealMatrix h = checkAEqualPHPt(m); [EOL]         checkHessenbergForm(h); [EOL]     } [EOL] } <line_num>: 86,105
@Test [EOL] public void testRandomDataNormalDistribution() { [EOL]     for (int run = 0; run < 100; run++) { [EOL]         Random r = new Random(System.currentTimeMillis()); [EOL]         NormalDistribution dist = new NormalDistribution(0.0, r.nextDouble() * 5); [EOL]         int size = r.nextInt(20) + 4; [EOL]         double[][] data = new double[size][size]; [EOL]         for (int i = 0; i < size; i++) { [EOL]             for (int j = 0; j < size; j++) { [EOL]                 data[i][j] = dist.sample(); [EOL]             } [EOL]         } [EOL]         RealMatrix m = MatrixUtils.createRealMatrix(data); [EOL]         RealMatrix h = checkAEqualPHPt(m); [EOL]         checkHessenbergForm(h); [EOL]     } [EOL] } <line_num>: 107,127
@Test [EOL] public void testMatricesValues5() { [EOL]     checkMatricesValues(testSquare5, new double[][] { { 1.0, 0.0, 0.0, 0.0, 0.0 }, { 0.0, -0.182574185835055, 0.784218758628863, 0.395029040913988, -0.442289115981669 }, { 0.0, -0.365148371670111, -0.337950625265477, -0.374110794088820, -0.782621974707823 }, { 0.0, -0.547722557505166, 0.402941130124223, -0.626468266309003, 0.381019628053472 }, { 0.0, -0.730296743340221, -0.329285224617644, 0.558149336547665, 0.216118545309225 } }, new double[][] { { 5.0, -3.65148371670111, 2.59962019434982, -0.237003414680848, -3.13886458663398 }, { -5.47722557505166, 6.9, -2.29164066120599, 0.207283564429169, 0.703858369151728 }, { 0.0, -4.21386600008432, 2.30555659846067, 2.74935928725112, 0.857569835914113 }, { 0.0, 0.0, 2.86406180891882, -1.11582249161595, 0.817995267184158 }, { 0.0, 0.0, 0.0, 0.683518597386085, 1.91026589315528 } }); [EOL] } <line_num>: 129,146
@Test [EOL] public void testMatricesValues3() { [EOL]     checkMatricesValues(testSquare3, new double[][] { { 1.0, 0.0, 0.0 }, { 0.0, -0.707106781186547, 0.707106781186547 }, { 0.0, 0.707106781186547, 0.707106781186548 } }, new double[][] { { 2.0, 1.41421356237309, 0.0 }, { 1.41421356237310, 2.0, -1.0 }, { 0.0, 1.0, 2.0 } }); [EOL] } <line_num>: 148,161
private RealMatrix checkAEqualPHPt(RealMatrix matrix) { [EOL]     HessenbergTransformer transformer = new HessenbergTransformer(matrix); [EOL]     RealMatrix p = transformer.getP(); [EOL]     RealMatrix pT = transformer.getPT(); [EOL]     RealMatrix h = transformer.getH(); [EOL]     RealMatrix result = p.multiply(h).multiply(pT); [EOL]     double norm = result.subtract(matrix).getNorm(); [EOL]     Assert.assertEquals(0, norm, 1.0e-10); [EOL]     for (int i = 0; i < matrix.getRowDimension(); ++i) { [EOL]         for (int j = 0; j < matrix.getColumnDimension(); ++j) { [EOL]             if (i > j + 1) { [EOL]                 Assert.assertEquals(matrix.getEntry(i, j), result.getEntry(i, j), 1.0e-12); [EOL]             } [EOL]         } [EOL]     } [EOL]     return transformer.getH(); [EOL] } <line_num>: 167,186
private void checkOrthogonal(RealMatrix m) { [EOL]     RealMatrix mTm = m.transpose().multiply(m); [EOL]     RealMatrix id = MatrixUtils.createRealIdentityMatrix(mTm.getRowDimension()); [EOL]     Assert.assertEquals(0, mTm.subtract(id).getNorm(), 1.0e-14); [EOL] } <line_num>: 188,192
private void checkHessenbergForm(RealMatrix m) { [EOL]     final int rows = m.getRowDimension(); [EOL]     final int cols = m.getColumnDimension(); [EOL]     for (int i = 0; i < rows; ++i) { [EOL]         for (int j = 0; j < cols; ++j) { [EOL]             if (i > j + 1) { [EOL]                 Assert.assertEquals(0, m.getEntry(i, j), 1.0e-16); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 194,204
private void checkMatricesValues(double[][] matrix, double[][] pRef, double[][] hRef) { [EOL]     HessenbergTransformer transformer = new HessenbergTransformer(MatrixUtils.createRealMatrix(matrix)); [EOL]     RealMatrix p = transformer.getP(); [EOL]     Assert.assertEquals(0, p.subtract(MatrixUtils.createRealMatrix(pRef)).getNorm(), 1.0e-14); [EOL]     RealMatrix h = transformer.getH(); [EOL]     Assert.assertEquals(0, h.subtract(MatrixUtils.createRealMatrix(hRef)).getNorm(), 1.0e-14); [EOL]     Assert.assertTrue(p == transformer.getP()); [EOL]     Assert.assertTrue(h == transformer.getH()); [EOL] } <line_num>: 206,220
