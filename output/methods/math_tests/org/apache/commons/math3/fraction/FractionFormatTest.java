protected Locale getLocale() { [EOL]     return Locale.getDefault(); [EOL] } <line_num>: 35,37
@Before [EOL] public void setUp() { [EOL]     properFormat = FractionFormat.getProperInstance(getLocale()); [EOL]     improperFormat = FractionFormat.getImproperInstance(getLocale()); [EOL] } <line_num>: 39,43
@Test [EOL] public void testFormat() { [EOL]     Fraction c = new Fraction(1, 2); [EOL]     String expected = "1 / 2"; [EOL]     String actual = properFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = improperFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 45,55
@Test [EOL] public void testFormatNegative() { [EOL]     Fraction c = new Fraction(-1, 2); [EOL]     String expected = "-1 / 2"; [EOL]     String actual = properFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = improperFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 57,67
@Test [EOL] public void testFormatZero() { [EOL]     Fraction c = new Fraction(0, 1); [EOL]     String expected = "0 / 1"; [EOL]     String actual = properFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = improperFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 69,79
@Test [EOL] public void testFormatImproper() { [EOL]     Fraction c = new Fraction(5, 3); [EOL]     String actual = properFormat.format(c); [EOL]     Assert.assertEquals("1 2 / 3", actual); [EOL]     actual = improperFormat.format(c); [EOL]     Assert.assertEquals("5 / 3", actual); [EOL] } <line_num>: 81,90
@Test [EOL] public void testFormatImproperNegative() { [EOL]     Fraction c = new Fraction(-5, 3); [EOL]     String actual = properFormat.format(c); [EOL]     Assert.assertEquals("-1 2 / 3", actual); [EOL]     actual = improperFormat.format(c); [EOL]     Assert.assertEquals("-5 / 3", actual); [EOL] } <line_num>: 92,101
@Test [EOL] public void testParse() { [EOL]     String source = "1 / 2"; [EOL]     try { [EOL]         Fraction c = properFormat.parse(source); [EOL]         Assert.assertNotNull(c); [EOL]         Assert.assertEquals(1, c.getNumerator()); [EOL]         Assert.assertEquals(2, c.getDenominator()); [EOL]         c = improperFormat.parse(source); [EOL]         Assert.assertNotNull(c); [EOL]         Assert.assertEquals(1, c.getNumerator()); [EOL]         Assert.assertEquals(2, c.getDenominator()); [EOL]     } catch (MathParseException ex) { [EOL]         Assert.fail(ex.getMessage()); [EOL]     } [EOL] } <line_num>: 103,120
@Test [EOL] public void testParseInteger() { [EOL]     String source = "10"; [EOL]     { [EOL]         Fraction c = properFormat.parse(source); [EOL]         Assert.assertNotNull(c); [EOL]         Assert.assertEquals(10, c.getNumerator()); [EOL]         Assert.assertEquals(1, c.getDenominator()); [EOL]     } [EOL]     { [EOL]         Fraction c = improperFormat.parse(source); [EOL]         Assert.assertNotNull(c); [EOL]         Assert.assertEquals(10, c.getNumerator()); [EOL]         Assert.assertEquals(1, c.getDenominator()); [EOL]     } [EOL] } <line_num>: 122,137
@Test [EOL] public void testParseOne1() { [EOL]     String source = "1 / 1"; [EOL]     Fraction c = properFormat.parse(source); [EOL]     Assert.assertNotNull(c); [EOL]     Assert.assertEquals(1, c.getNumerator()); [EOL]     Assert.assertEquals(1, c.getDenominator()); [EOL] } <line_num>: 139,146
@Test [EOL] public void testParseOne2() { [EOL]     String source = "10 / 10"; [EOL]     Fraction c = properFormat.parse(source); [EOL]     Assert.assertNotNull(c); [EOL]     Assert.assertEquals(1, c.getNumerator()); [EOL]     Assert.assertEquals(1, c.getDenominator()); [EOL] } <line_num>: 148,155
@Test [EOL] public void testParseZero1() { [EOL]     String source = "0 / 1"; [EOL]     Fraction c = properFormat.parse(source); [EOL]     Assert.assertNotNull(c); [EOL]     Assert.assertEquals(0, c.getNumerator()); [EOL]     Assert.assertEquals(1, c.getDenominator()); [EOL] } <line_num>: 157,164
@Test [EOL] public void testParseZero2() { [EOL]     String source = "-0 / 1"; [EOL]     Fraction c = properFormat.parse(source); [EOL]     Assert.assertNotNull(c); [EOL]     Assert.assertEquals(0, c.getNumerator()); [EOL]     Assert.assertEquals(1, c.getDenominator()); [EOL]     Assert.assertEquals(Double.POSITIVE_INFINITY, 1d / c.doubleValue(), 0); [EOL] } <line_num>: 166,175
@Test [EOL] public void testParseInvalid() { [EOL]     String source = "a"; [EOL]     String msg = "should not be able to parse '10 / a'."; [EOL]     try { [EOL]         properFormat.parse(source); [EOL]         Assert.fail(msg); [EOL]     } catch (MathParseException ex) { [EOL]     } [EOL]     try { [EOL]         improperFormat.parse(source); [EOL]         Assert.fail(msg); [EOL]     } catch (MathParseException ex) { [EOL]     } [EOL] } <line_num>: 177,193
@Test [EOL] public void testParseInvalidDenominator() { [EOL]     String source = "10 / a"; [EOL]     String msg = "should not be able to parse '10 / a'."; [EOL]     try { [EOL]         properFormat.parse(source); [EOL]         Assert.fail(msg); [EOL]     } catch (MathParseException ex) { [EOL]     } [EOL]     try { [EOL]         improperFormat.parse(source); [EOL]         Assert.fail(msg); [EOL]     } catch (MathParseException ex) { [EOL]     } [EOL] } <line_num>: 195,211
@Test [EOL] public void testParseNegative() { [EOL]     { [EOL]         String source = "-1 / 2"; [EOL]         Fraction c = properFormat.parse(source); [EOL]         Assert.assertNotNull(c); [EOL]         Assert.assertEquals(-1, c.getNumerator()); [EOL]         Assert.assertEquals(2, c.getDenominator()); [EOL]         c = improperFormat.parse(source); [EOL]         Assert.assertNotNull(c); [EOL]         Assert.assertEquals(-1, c.getNumerator()); [EOL]         Assert.assertEquals(2, c.getDenominator()); [EOL]         source = "1 / -2"; [EOL]         c = properFormat.parse(source); [EOL]         Assert.assertNotNull(c); [EOL]         Assert.assertEquals(-1, c.getNumerator()); [EOL]         Assert.assertEquals(2, c.getDenominator()); [EOL]         c = improperFormat.parse(source); [EOL]         Assert.assertNotNull(c); [EOL]         Assert.assertEquals(-1, c.getNumerator()); [EOL]         Assert.assertEquals(2, c.getDenominator()); [EOL]     } [EOL] } <line_num>: 213,239
@Test [EOL] public void testParseProper() { [EOL]     String source = "1 2 / 3"; [EOL]     { [EOL]         Fraction c = properFormat.parse(source); [EOL]         Assert.assertNotNull(c); [EOL]         Assert.assertEquals(5, c.getNumerator()); [EOL]         Assert.assertEquals(3, c.getDenominator()); [EOL]     } [EOL]     try { [EOL]         improperFormat.parse(source); [EOL]         Assert.fail("invalid improper fraction."); [EOL]     } catch (MathParseException ex) { [EOL]     } [EOL] } <line_num>: 241,258
@Test [EOL] public void testParseProperNegative() { [EOL]     String source = "-1 2 / 3"; [EOL]     { [EOL]         Fraction c = properFormat.parse(source); [EOL]         Assert.assertNotNull(c); [EOL]         Assert.assertEquals(-5, c.getNumerator()); [EOL]         Assert.assertEquals(3, c.getDenominator()); [EOL]     } [EOL]     try { [EOL]         improperFormat.parse(source); [EOL]         Assert.fail("invalid improper fraction."); [EOL]     } catch (MathParseException ex) { [EOL]     } [EOL] } <line_num>: 260,276
@Test [EOL] public void testParseProperInvalidMinus() { [EOL]     String source = "2 -2 / 3"; [EOL]     try { [EOL]         properFormat.parse(source); [EOL]         Assert.fail("invalid minus in improper fraction."); [EOL]     } catch (MathParseException ex) { [EOL]     } [EOL]     source = "2 2 / -3"; [EOL]     try { [EOL]         properFormat.parse(source); [EOL]         Assert.fail("invalid minus in improper fraction."); [EOL]     } catch (MathParseException ex) { [EOL]     } [EOL] } <line_num>: 278,294
@Test [EOL] public void testNumeratorFormat() { [EOL]     NumberFormat old = properFormat.getNumeratorFormat(); [EOL]     NumberFormat nf = NumberFormat.getInstance(); [EOL]     nf.setParseIntegerOnly(true); [EOL]     properFormat.setNumeratorFormat(nf); [EOL]     Assert.assertEquals(nf, properFormat.getNumeratorFormat()); [EOL]     properFormat.setNumeratorFormat(old); [EOL]     old = improperFormat.getNumeratorFormat(); [EOL]     nf = NumberFormat.getInstance(); [EOL]     nf.setParseIntegerOnly(true); [EOL]     improperFormat.setNumeratorFormat(nf); [EOL]     Assert.assertEquals(nf, improperFormat.getNumeratorFormat()); [EOL]     improperFormat.setNumeratorFormat(old); [EOL] } <line_num>: 296,311
@Test [EOL] public void testDenominatorFormat() { [EOL]     NumberFormat old = properFormat.getDenominatorFormat(); [EOL]     NumberFormat nf = NumberFormat.getInstance(); [EOL]     nf.setParseIntegerOnly(true); [EOL]     properFormat.setDenominatorFormat(nf); [EOL]     Assert.assertEquals(nf, properFormat.getDenominatorFormat()); [EOL]     properFormat.setDenominatorFormat(old); [EOL]     old = improperFormat.getDenominatorFormat(); [EOL]     nf = NumberFormat.getInstance(); [EOL]     nf.setParseIntegerOnly(true); [EOL]     improperFormat.setDenominatorFormat(nf); [EOL]     Assert.assertEquals(nf, improperFormat.getDenominatorFormat()); [EOL]     improperFormat.setDenominatorFormat(old); [EOL] } <line_num>: 313,328
@Test [EOL] public void testWholeFormat() { [EOL]     ProperFractionFormat format = (ProperFractionFormat) properFormat; [EOL]     NumberFormat old = format.getWholeFormat(); [EOL]     NumberFormat nf = NumberFormat.getInstance(); [EOL]     nf.setParseIntegerOnly(true); [EOL]     format.setWholeFormat(nf); [EOL]     Assert.assertEquals(nf, format.getWholeFormat()); [EOL]     format.setWholeFormat(old); [EOL] } <line_num>: 330,340
@Test [EOL] public void testLongFormat() { [EOL]     Assert.assertEquals("10 / 1", improperFormat.format(10l)); [EOL] } <line_num>: 342,345
@Test [EOL] public void testDoubleFormat() { [EOL]     Assert.assertEquals("355 / 113", improperFormat.format(FastMath.PI)); [EOL] } <line_num>: 347,350
