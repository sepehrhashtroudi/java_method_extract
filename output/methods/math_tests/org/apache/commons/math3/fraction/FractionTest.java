private void assertFraction(int expectedNumerator, int expectedDenominator, Fraction actual) { [EOL]     Assert.assertEquals(expectedNumerator, actual.getNumerator()); [EOL]     Assert.assertEquals(expectedDenominator, actual.getDenominator()); [EOL] } <line_num>: 33,36
@Test [EOL] public void testConstructor() { [EOL]     assertFraction(0, 1, new Fraction(0, 1)); [EOL]     assertFraction(0, 1, new Fraction(0, 2)); [EOL]     assertFraction(0, 1, new Fraction(0, -1)); [EOL]     assertFraction(1, 2, new Fraction(1, 2)); [EOL]     assertFraction(1, 2, new Fraction(2, 4)); [EOL]     assertFraction(-1, 2, new Fraction(-1, 2)); [EOL]     assertFraction(-1, 2, new Fraction(1, -2)); [EOL]     assertFraction(-1, 2, new Fraction(-2, 4)); [EOL]     assertFraction(-1, 2, new Fraction(2, -4)); [EOL]     try { [EOL]         new Fraction(Integer.MIN_VALUE, -1); [EOL]         Assert.fail(); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         new Fraction(1, Integer.MIN_VALUE); [EOL]         Assert.fail(); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL]     assertFraction(0, 1, new Fraction(0.00000000000001)); [EOL]     assertFraction(2, 5, new Fraction(0.40000000000001)); [EOL]     assertFraction(15, 1, new Fraction(15.0000000000001)); [EOL] } <line_num>: 38,67
@Test(expected = ConvergenceException.class) [EOL] public void testGoldenRatio() { [EOL]     new Fraction((1 + FastMath.sqrt(5)) / 2, 1.0e-12, 25); [EOL] } <line_num>: 69,73
@Test [EOL] public void testDoubleConstructor() throws ConvergenceException { [EOL]     assertFraction(1, 2, new Fraction((double) 1 / (double) 2)); [EOL]     assertFraction(1, 3, new Fraction((double) 1 / (double) 3)); [EOL]     assertFraction(2, 3, new Fraction((double) 2 / (double) 3)); [EOL]     assertFraction(1, 4, new Fraction((double) 1 / (double) 4)); [EOL]     assertFraction(3, 4, new Fraction((double) 3 / (double) 4)); [EOL]     assertFraction(1, 5, new Fraction((double) 1 / (double) 5)); [EOL]     assertFraction(2, 5, new Fraction((double) 2 / (double) 5)); [EOL]     assertFraction(3, 5, new Fraction((double) 3 / (double) 5)); [EOL]     assertFraction(4, 5, new Fraction((double) 4 / (double) 5)); [EOL]     assertFraction(1, 6, new Fraction((double) 1 / (double) 6)); [EOL]     assertFraction(5, 6, new Fraction((double) 5 / (double) 6)); [EOL]     assertFraction(1, 7, new Fraction((double) 1 / (double) 7)); [EOL]     assertFraction(2, 7, new Fraction((double) 2 / (double) 7)); [EOL]     assertFraction(3, 7, new Fraction((double) 3 / (double) 7)); [EOL]     assertFraction(4, 7, new Fraction((double) 4 / (double) 7)); [EOL]     assertFraction(5, 7, new Fraction((double) 5 / (double) 7)); [EOL]     assertFraction(6, 7, new Fraction((double) 6 / (double) 7)); [EOL]     assertFraction(1, 8, new Fraction((double) 1 / (double) 8)); [EOL]     assertFraction(3, 8, new Fraction((double) 3 / (double) 8)); [EOL]     assertFraction(5, 8, new Fraction((double) 5 / (double) 8)); [EOL]     assertFraction(7, 8, new Fraction((double) 7 / (double) 8)); [EOL]     assertFraction(1, 9, new Fraction((double) 1 / (double) 9)); [EOL]     assertFraction(2, 9, new Fraction((double) 2 / (double) 9)); [EOL]     assertFraction(4, 9, new Fraction((double) 4 / (double) 9)); [EOL]     assertFraction(5, 9, new Fraction((double) 5 / (double) 9)); [EOL]     assertFraction(7, 9, new Fraction((double) 7 / (double) 9)); [EOL]     assertFraction(8, 9, new Fraction((double) 8 / (double) 9)); [EOL]     assertFraction(1, 10, new Fraction((double) 1 / (double) 10)); [EOL]     assertFraction(3, 10, new Fraction((double) 3 / (double) 10)); [EOL]     assertFraction(7, 10, new Fraction((double) 7 / (double) 10)); [EOL]     assertFraction(9, 10, new Fraction((double) 9 / (double) 10)); [EOL]     assertFraction(1, 11, new Fraction((double) 1 / (double) 11)); [EOL]     assertFraction(2, 11, new Fraction((double) 2 / (double) 11)); [EOL]     assertFraction(3, 11, new Fraction((double) 3 / (double) 11)); [EOL]     assertFraction(4, 11, new Fraction((double) 4 / (double) 11)); [EOL]     assertFraction(5, 11, new Fraction((double) 5 / (double) 11)); [EOL]     assertFraction(6, 11, new Fraction((double) 6 / (double) 11)); [EOL]     assertFraction(7, 11, new Fraction((double) 7 / (double) 11)); [EOL]     assertFraction(8, 11, new Fraction((double) 8 / (double) 11)); [EOL]     assertFraction(9, 11, new Fraction((double) 9 / (double) 11)); [EOL]     assertFraction(10, 11, new Fraction((double) 10 / (double) 11)); [EOL] } <line_num>: 76,119
@Test [EOL] public void testDigitLimitConstructor() throws ConvergenceException { [EOL]     assertFraction(2, 5, new Fraction(0.4, 9)); [EOL]     assertFraction(2, 5, new Fraction(0.4, 99)); [EOL]     assertFraction(2, 5, new Fraction(0.4, 999)); [EOL]     assertFraction(3, 5, new Fraction(0.6152, 9)); [EOL]     assertFraction(8, 13, new Fraction(0.6152, 99)); [EOL]     assertFraction(510, 829, new Fraction(0.6152, 999)); [EOL]     assertFraction(769, 1250, new Fraction(0.6152, 9999)); [EOL]     assertFraction(1, 2, new Fraction(0.5000000001, 10)); [EOL] } <line_num>: 122,135
@Test [EOL] public void testIntegerOverflow() { [EOL]     checkIntegerOverflow(0.75000000001455192); [EOL]     checkIntegerOverflow(1.0e10); [EOL]     checkIntegerOverflow(-1.0e10); [EOL]     checkIntegerOverflow(-43979.60679604749); [EOL] } <line_num>: 137,143
private void checkIntegerOverflow(double a) { [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         Fraction f = new Fraction(a, 1.0e-12, 1000); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (ConvergenceException ce) { [EOL]     } [EOL] } <line_num>: 145,154
@Test [EOL] public void testEpsilonLimitConstructor() throws ConvergenceException { [EOL]     assertFraction(2, 5, new Fraction(0.4, 1.0e-5, 100)); [EOL]     assertFraction(3, 5, new Fraction(0.6152, 0.02, 100)); [EOL]     assertFraction(8, 13, new Fraction(0.6152, 1.0e-3, 100)); [EOL]     assertFraction(251, 408, new Fraction(0.6152, 1.0e-4, 100)); [EOL]     assertFraction(251, 408, new Fraction(0.6152, 1.0e-5, 100)); [EOL]     assertFraction(510, 829, new Fraction(0.6152, 1.0e-6, 100)); [EOL]     assertFraction(769, 1250, new Fraction(0.6152, 1.0e-7, 100)); [EOL] } <line_num>: 156,166
@Test [EOL] public void testCompareTo() { [EOL]     Fraction first = new Fraction(1, 2); [EOL]     Fraction second = new Fraction(1, 3); [EOL]     Fraction third = new Fraction(1, 2); [EOL]     Assert.assertEquals(0, first.compareTo(first)); [EOL]     Assert.assertEquals(0, first.compareTo(third)); [EOL]     Assert.assertEquals(1, first.compareTo(second)); [EOL]     Assert.assertEquals(-1, second.compareTo(first)); [EOL]     Fraction pi1 = new Fraction(1068966896, 340262731); [EOL]     Fraction pi2 = new Fraction(411557987, 131002976); [EOL]     Assert.assertEquals(-1, pi1.compareTo(pi2)); [EOL]     Assert.assertEquals(1, pi2.compareTo(pi1)); [EOL]     Assert.assertEquals(0.0, pi1.doubleValue() - pi2.doubleValue(), 1.0e-20); [EOL] } <line_num>: 168,187
@Test [EOL] public void testDoubleValue() { [EOL]     Fraction first = new Fraction(1, 2); [EOL]     Fraction second = new Fraction(1, 3); [EOL]     Assert.assertEquals(0.5, first.doubleValue(), 0.0); [EOL]     Assert.assertEquals(1.0 / 3.0, second.doubleValue(), 0.0); [EOL] } <line_num>: 189,196
@Test [EOL] public void testFloatValue() { [EOL]     Fraction first = new Fraction(1, 2); [EOL]     Fraction second = new Fraction(1, 3); [EOL]     Assert.assertEquals(0.5f, first.floatValue(), 0.0f); [EOL]     Assert.assertEquals((float) (1.0 / 3.0), second.floatValue(), 0.0f); [EOL] } <line_num>: 198,205
@Test [EOL] public void testIntValue() { [EOL]     Fraction first = new Fraction(1, 2); [EOL]     Fraction second = new Fraction(3, 2); [EOL]     Assert.assertEquals(0, first.intValue()); [EOL]     Assert.assertEquals(1, second.intValue()); [EOL] } <line_num>: 207,214
@Test [EOL] public void testLongValue() { [EOL]     Fraction first = new Fraction(1, 2); [EOL]     Fraction second = new Fraction(3, 2); [EOL]     Assert.assertEquals(0L, first.longValue()); [EOL]     Assert.assertEquals(1L, second.longValue()); [EOL] } <line_num>: 216,223
@Test [EOL] public void testConstructorDouble() { [EOL]     assertFraction(1, 2, new Fraction(0.5)); [EOL]     assertFraction(1, 3, new Fraction(1.0 / 3.0)); [EOL]     assertFraction(17, 100, new Fraction(17.0 / 100.0)); [EOL]     assertFraction(317, 100, new Fraction(317.0 / 100.0)); [EOL]     assertFraction(-1, 2, new Fraction(-0.5)); [EOL]     assertFraction(-1, 3, new Fraction(-1.0 / 3.0)); [EOL]     assertFraction(-17, 100, new Fraction(17.0 / -100.0)); [EOL]     assertFraction(-317, 100, new Fraction(-317.0 / 100.0)); [EOL] } <line_num>: 225,235
@Test [EOL] public void testAbs() { [EOL]     Fraction a = new Fraction(10, 21); [EOL]     Fraction b = new Fraction(-10, 21); [EOL]     Fraction c = new Fraction(10, -21); [EOL]     assertFraction(10, 21, a.abs()); [EOL]     assertFraction(10, 21, b.abs()); [EOL]     assertFraction(10, 21, c.abs()); [EOL] } <line_num>: 237,246
@Test [EOL] public void testPercentage() { [EOL]     Assert.assertEquals(50.0, new Fraction(1, 2).percentageValue(), 1.0e-15); [EOL] } <line_num>: 248,251
@Test [EOL] public void testMath835() { [EOL]     final int numer = Integer.MAX_VALUE / 99; [EOL]     final int denom = 1; [EOL]     final double percentage = 100 * ((double) numer) / denom; [EOL]     final Fraction frac = new Fraction(numer, denom); [EOL]     Assert.assertEquals(percentage, frac.percentageValue(), Math.ulp(percentage)); [EOL] } <line_num>: 253,262
@Test [EOL] public void testReciprocal() { [EOL]     Fraction f = null; [EOL]     f = new Fraction(50, 75); [EOL]     f = f.reciprocal(); [EOL]     Assert.assertEquals(3, f.getNumerator()); [EOL]     Assert.assertEquals(2, f.getDenominator()); [EOL]     f = new Fraction(4, 3); [EOL]     f = f.reciprocal(); [EOL]     Assert.assertEquals(3, f.getNumerator()); [EOL]     Assert.assertEquals(4, f.getDenominator()); [EOL]     f = new Fraction(-15, 47); [EOL]     f = f.reciprocal(); [EOL]     Assert.assertEquals(-47, f.getNumerator()); [EOL]     Assert.assertEquals(15, f.getDenominator()); [EOL]     f = new Fraction(0, 3); [EOL]     try { [EOL]         f = f.reciprocal(); [EOL]         Assert.fail("expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL]     f = new Fraction(Integer.MAX_VALUE, 1); [EOL]     f = f.reciprocal(); [EOL]     Assert.assertEquals(1, f.getNumerator()); [EOL]     Assert.assertEquals(Integer.MAX_VALUE, f.getDenominator()); [EOL] } <line_num>: 264,294
@Test [EOL] public void testNegate() { [EOL]     Fraction f = null; [EOL]     f = new Fraction(50, 75); [EOL]     f = f.negate(); [EOL]     Assert.assertEquals(-2, f.getNumerator()); [EOL]     Assert.assertEquals(3, f.getDenominator()); [EOL]     f = new Fraction(-50, 75); [EOL]     f = f.negate(); [EOL]     Assert.assertEquals(2, f.getNumerator()); [EOL]     Assert.assertEquals(3, f.getDenominator()); [EOL]     f = new Fraction(Integer.MAX_VALUE - 1, Integer.MAX_VALUE); [EOL]     f = f.negate(); [EOL]     Assert.assertEquals(Integer.MIN_VALUE + 2, f.getNumerator()); [EOL]     Assert.assertEquals(Integer.MAX_VALUE, f.getDenominator()); [EOL]     f = new Fraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.negate(); [EOL]         Assert.fail("expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 296,321
@Test [EOL] public void testAdd() { [EOL]     Fraction a = new Fraction(1, 2); [EOL]     Fraction b = new Fraction(2, 3); [EOL]     assertFraction(1, 1, a.add(a)); [EOL]     assertFraction(7, 6, a.add(b)); [EOL]     assertFraction(7, 6, b.add(a)); [EOL]     assertFraction(4, 3, b.add(b)); [EOL]     Fraction f1 = new Fraction(Integer.MAX_VALUE - 1, 1); [EOL]     Fraction f2 = Fraction.ONE; [EOL]     Fraction f = f1.add(f2); [EOL]     Assert.assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     Assert.assertEquals(1, f.getDenominator()); [EOL]     f = f1.add(1); [EOL]     Assert.assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     Assert.assertEquals(1, f.getDenominator()); [EOL]     f1 = new Fraction(-1, 13 * 13 * 2 * 2); [EOL]     f2 = new Fraction(-2, 13 * 17 * 2); [EOL]     f = f1.add(f2); [EOL]     Assert.assertEquals(13 * 13 * 17 * 2 * 2, f.getDenominator()); [EOL]     Assert.assertEquals(-17 - 2 * 13 * 2, f.getNumerator()); [EOL]     try { [EOL]         f.add(null); [EOL]         Assert.fail("expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     f1 = new Fraction(1, 32768 * 3); [EOL]     f2 = new Fraction(1, 59049); [EOL]     f = f1.add(f2); [EOL]     Assert.assertEquals(52451, f.getNumerator()); [EOL]     Assert.assertEquals(1934917632, f.getDenominator()); [EOL]     f1 = new Fraction(Integer.MIN_VALUE, 3); [EOL]     f2 = new Fraction(1, 3); [EOL]     f = f1.add(f2); [EOL]     Assert.assertEquals(Integer.MIN_VALUE + 1, f.getNumerator()); [EOL]     Assert.assertEquals(3, f.getDenominator()); [EOL]     f1 = new Fraction(Integer.MAX_VALUE - 1, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.add(f2); [EOL]     Assert.assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     Assert.assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f = f.add(Fraction.ONE); [EOL]         Assert.fail("expecting MathArithmeticException but got: " + f.toString()); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL]     f1 = new Fraction(Integer.MIN_VALUE, 5); [EOL]     f2 = new Fraction(-1, 5); [EOL]     try { [EOL]         f = f1.add(f2); [EOL]         Assert.fail("expecting MathArithmeticException but got: " + f.toString()); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = new Fraction(-Integer.MAX_VALUE, 1); [EOL]         f = f.add(f); [EOL]         Assert.fail("expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = new Fraction(-Integer.MAX_VALUE, 1); [EOL]         f = f.add(f); [EOL]         Assert.fail("expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL]     f1 = new Fraction(3, 327680); [EOL]     f2 = new Fraction(2, 59049); [EOL]     try { [EOL]         f = f1.add(f2); [EOL]         Assert.fail("expecting MathArithmeticException but got: " + f.toString()); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 323,404
@Test [EOL] public void testDivide() { [EOL]     Fraction a = new Fraction(1, 2); [EOL]     Fraction b = new Fraction(2, 3); [EOL]     assertFraction(1, 1, a.divide(a)); [EOL]     assertFraction(3, 4, a.divide(b)); [EOL]     assertFraction(4, 3, b.divide(a)); [EOL]     assertFraction(1, 1, b.divide(b)); [EOL]     Fraction f1 = new Fraction(3, 5); [EOL]     Fraction f2 = Fraction.ZERO; [EOL]     try { [EOL]         f1.divide(f2); [EOL]         Assert.fail("expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL]     f1 = new Fraction(0, 5); [EOL]     f2 = new Fraction(2, 7); [EOL]     Fraction f = f1.divide(f2); [EOL]     Assert.assertSame(Fraction.ZERO, f); [EOL]     f1 = new Fraction(2, 7); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.divide(f2); [EOL]     Assert.assertEquals(2, f.getNumerator()); [EOL]     Assert.assertEquals(7, f.getDenominator()); [EOL]     f1 = new Fraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divide(f1); [EOL]     Assert.assertEquals(1, f.getNumerator()); [EOL]     Assert.assertEquals(1, f.getDenominator()); [EOL]     f1 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f2 = new Fraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divide(f2); [EOL]     Assert.assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     Assert.assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.divide(null); [EOL]         Assert.fail("MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = new Fraction(1, Integer.MAX_VALUE); [EOL]         f = f1.divide(f1.reciprocal()); [EOL]         Assert.fail("expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = new Fraction(1, -Integer.MAX_VALUE); [EOL]         f = f1.divide(f1.reciprocal()); [EOL]         Assert.fail("expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL]     f1 = new Fraction(6, 35); [EOL]     f = f1.divide(15); [EOL]     Assert.assertEquals(2, f.getNumerator()); [EOL]     Assert.assertEquals(175, f.getDenominator()); [EOL] } <line_num>: 406,466
@Test [EOL] public void testMultiply() { [EOL]     Fraction a = new Fraction(1, 2); [EOL]     Fraction b = new Fraction(2, 3); [EOL]     assertFraction(1, 4, a.multiply(a)); [EOL]     assertFraction(1, 3, a.multiply(b)); [EOL]     assertFraction(1, 3, b.multiply(a)); [EOL]     assertFraction(4, 9, b.multiply(b)); [EOL]     Fraction f1 = new Fraction(Integer.MAX_VALUE, 1); [EOL]     Fraction f2 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     Fraction f = f1.multiply(f2); [EOL]     Assert.assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     Assert.assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.multiply(null); [EOL]         Assert.fail("expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     f1 = new Fraction(6, 35); [EOL]     f = f1.multiply(15); [EOL]     Assert.assertEquals(18, f.getNumerator()); [EOL]     Assert.assertEquals(7, f.getDenominator()); [EOL] } <line_num>: 468,493
@Test [EOL] public void testSubtract() { [EOL]     Fraction a = new Fraction(1, 2); [EOL]     Fraction b = new Fraction(2, 3); [EOL]     assertFraction(0, 1, a.subtract(a)); [EOL]     assertFraction(-1, 6, a.subtract(b)); [EOL]     assertFraction(1, 6, b.subtract(a)); [EOL]     assertFraction(0, 1, b.subtract(b)); [EOL]     Fraction f = new Fraction(1, 1); [EOL]     try { [EOL]         f.subtract(null); [EOL]         Assert.fail("expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     Fraction f1 = new Fraction(1, 32768 * 3); [EOL]     Fraction f2 = new Fraction(1, 59049); [EOL]     f = f1.subtract(f2); [EOL]     Assert.assertEquals(-13085, f.getNumerator()); [EOL]     Assert.assertEquals(1934917632, f.getDenominator()); [EOL]     f1 = new Fraction(Integer.MIN_VALUE, 3); [EOL]     f2 = new Fraction(1, 3).negate(); [EOL]     f = f1.subtract(f2); [EOL]     Assert.assertEquals(Integer.MIN_VALUE + 1, f.getNumerator()); [EOL]     Assert.assertEquals(3, f.getDenominator()); [EOL]     f1 = new Fraction(Integer.MAX_VALUE, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.subtract(f2); [EOL]     Assert.assertEquals(Integer.MAX_VALUE - 1, f.getNumerator()); [EOL]     Assert.assertEquals(1, f.getDenominator()); [EOL]     f = f1.subtract(1); [EOL]     Assert.assertEquals(Integer.MAX_VALUE - 1, f.getNumerator()); [EOL]     Assert.assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f1 = new Fraction(1, Integer.MAX_VALUE); [EOL]         f2 = new Fraction(1, Integer.MAX_VALUE - 1); [EOL]         f = f1.subtract(f2); [EOL]         Assert.fail("expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL]     f1 = new Fraction(Integer.MIN_VALUE, 5); [EOL]     f2 = new Fraction(1, 5); [EOL]     try { [EOL]         f = f1.subtract(f2); [EOL]         Assert.fail("expecting MathArithmeticException but got: " + f.toString()); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = new Fraction(Integer.MIN_VALUE, 1); [EOL]         f = f.subtract(Fraction.ONE); [EOL]         Assert.fail("expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = new Fraction(Integer.MAX_VALUE, 1); [EOL]         f = f.subtract(Fraction.ONE.negate()); [EOL]         Assert.fail("expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL]     f1 = new Fraction(3, 327680); [EOL]     f2 = new Fraction(2, 59049); [EOL]     try { [EOL]         f = f1.subtract(f2); [EOL]         Assert.fail("expecting MathArithmeticException but got: " + f.toString()); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 495,567
@Test [EOL] public void testEqualsAndHashCode() { [EOL]     Fraction zero = new Fraction(0, 1); [EOL]     Fraction nullFraction = null; [EOL]     Assert.assertTrue(zero.equals(zero)); [EOL]     Assert.assertFalse(zero.equals(nullFraction)); [EOL]     Assert.assertFalse(zero.equals(Double.valueOf(0))); [EOL]     Fraction zero2 = new Fraction(0, 2); [EOL]     Assert.assertTrue(zero.equals(zero2)); [EOL]     Assert.assertEquals(zero.hashCode(), zero2.hashCode()); [EOL]     Fraction one = new Fraction(1, 1); [EOL]     Assert.assertFalse((one.equals(zero) || zero.equals(one))); [EOL] } <line_num>: 569,581
@Test [EOL] public void testGetReducedFraction() { [EOL]     Fraction threeFourths = new Fraction(3, 4); [EOL]     Assert.assertTrue(threeFourths.equals(Fraction.getReducedFraction(6, 8))); [EOL]     Assert.assertTrue(Fraction.ZERO.equals(Fraction.getReducedFraction(0, -1))); [EOL]     try { [EOL]         Fraction.getReducedFraction(1, 0); [EOL]         Assert.fail("expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL]     Assert.assertEquals(Fraction.getReducedFraction(2, Integer.MIN_VALUE).getNumerator(), -1); [EOL]     Assert.assertEquals(Fraction.getReducedFraction(1, -1).getNumerator(), -1); [EOL] } <line_num>: 583,598
@Test [EOL] public void testToString() { [EOL]     Assert.assertEquals("0", new Fraction(0, 3).toString()); [EOL]     Assert.assertEquals("3", new Fraction(6, 2).toString()); [EOL]     Assert.assertEquals("2 / 3", new Fraction(18, 27).toString()); [EOL] } <line_num>: 600,605
@Test [EOL] public void testSerial() throws FractionConversionException { [EOL]     Fraction[] fractions = { new Fraction(3, 4), Fraction.ONE, Fraction.ZERO, new Fraction(17), new Fraction(FastMath.PI, 1000), new Fraction(-5, 2) }; [EOL]     for (Fraction fraction : fractions) { [EOL]         Assert.assertEquals(fraction, TestUtils.serializeAndRecover(fraction)); [EOL]     } [EOL] } <line_num>: 607,617
