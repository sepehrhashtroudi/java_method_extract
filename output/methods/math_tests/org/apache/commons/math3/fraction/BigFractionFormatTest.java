protected Locale getLocale() { [EOL]     return Locale.getDefault(); [EOL] } <line_num>: 37,39
@Before [EOL] public void setUp() { [EOL]     properFormat = BigFractionFormat.getProperInstance(getLocale()); [EOL]     improperFormat = BigFractionFormat.getImproperInstance(getLocale()); [EOL] } <line_num>: 41,45
@Test [EOL] public void testFormat() { [EOL]     BigFraction c = new BigFraction(1, 2); [EOL]     String expected = "1 / 2"; [EOL]     String actual = properFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = improperFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 47,57
@Test [EOL] public void testFormatNegative() { [EOL]     BigFraction c = new BigFraction(-1, 2); [EOL]     String expected = "-1 / 2"; [EOL]     String actual = properFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = improperFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 59,69
@Test [EOL] public void testFormatZero() { [EOL]     BigFraction c = new BigFraction(0, 1); [EOL]     String expected = "0 / 1"; [EOL]     String actual = properFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = improperFormat.format(c); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 71,81
@Test [EOL] public void testFormatImproper() { [EOL]     BigFraction c = new BigFraction(5, 3); [EOL]     String actual = properFormat.format(c); [EOL]     Assert.assertEquals("1 2 / 3", actual); [EOL]     actual = improperFormat.format(c); [EOL]     Assert.assertEquals("5 / 3", actual); [EOL] } <line_num>: 83,92
@Test [EOL] public void testFormatImproperNegative() { [EOL]     BigFraction c = new BigFraction(-5, 3); [EOL]     String actual = properFormat.format(c); [EOL]     Assert.assertEquals("-1 2 / 3", actual); [EOL]     actual = improperFormat.format(c); [EOL]     Assert.assertEquals("-5 / 3", actual); [EOL] } <line_num>: 94,103
@Test [EOL] public void testParse() { [EOL]     String source = "1 / 2"; [EOL]     { [EOL]         BigFraction c = properFormat.parse(source); [EOL]         Assert.assertNotNull(c); [EOL]         Assert.assertEquals(BigInteger.ONE, c.getNumerator()); [EOL]         Assert.assertEquals(BigInteger.valueOf(2l), c.getDenominator()); [EOL]         c = improperFormat.parse(source); [EOL]         Assert.assertNotNull(c); [EOL]         Assert.assertEquals(BigInteger.ONE, c.getNumerator()); [EOL]         Assert.assertEquals(BigInteger.valueOf(2l), c.getDenominator()); [EOL]     } [EOL] } <line_num>: 105,120
@Test [EOL] public void testParseInteger() { [EOL]     String source = "10"; [EOL]     { [EOL]         BigFraction c = properFormat.parse(source); [EOL]         Assert.assertNotNull(c); [EOL]         Assert.assertEquals(BigInteger.TEN, c.getNumerator()); [EOL]         Assert.assertEquals(BigInteger.ONE, c.getDenominator()); [EOL]     } [EOL]     { [EOL]         BigFraction c = improperFormat.parse(source); [EOL]         Assert.assertNotNull(c); [EOL]         Assert.assertEquals(BigInteger.TEN, c.getNumerator()); [EOL]         Assert.assertEquals(BigInteger.ONE, c.getDenominator()); [EOL]     } [EOL] } <line_num>: 122,137
@Test [EOL] public void testParseInvalid() { [EOL]     String source = "a"; [EOL]     String msg = "should not be able to parse '10 / a'."; [EOL]     try { [EOL]         properFormat.parse(source); [EOL]         Assert.fail(msg); [EOL]     } catch (MathParseException ex) { [EOL]     } [EOL]     try { [EOL]         improperFormat.parse(source); [EOL]         Assert.fail(msg); [EOL]     } catch (MathParseException ex) { [EOL]     } [EOL] } <line_num>: 139,155
@Test [EOL] public void testParseInvalidDenominator() { [EOL]     String source = "10 / a"; [EOL]     String msg = "should not be able to parse '10 / a'."; [EOL]     try { [EOL]         properFormat.parse(source); [EOL]         Assert.fail(msg); [EOL]     } catch (MathParseException ex) { [EOL]     } [EOL]     try { [EOL]         improperFormat.parse(source); [EOL]         Assert.fail(msg); [EOL]     } catch (MathParseException ex) { [EOL]     } [EOL] } <line_num>: 157,173
@Test [EOL] public void testParseNegative() { [EOL]     { [EOL]         String source = "-1 / 2"; [EOL]         BigFraction c = properFormat.parse(source); [EOL]         Assert.assertNotNull(c); [EOL]         Assert.assertEquals(-1, c.getNumeratorAsInt()); [EOL]         Assert.assertEquals(2, c.getDenominatorAsInt()); [EOL]         c = improperFormat.parse(source); [EOL]         Assert.assertNotNull(c); [EOL]         Assert.assertEquals(-1, c.getNumeratorAsInt()); [EOL]         Assert.assertEquals(2, c.getDenominatorAsInt()); [EOL]         source = "1 / -2"; [EOL]         c = properFormat.parse(source); [EOL]         Assert.assertNotNull(c); [EOL]         Assert.assertEquals(-1, c.getNumeratorAsInt()); [EOL]         Assert.assertEquals(2, c.getDenominatorAsInt()); [EOL]         c = improperFormat.parse(source); [EOL]         Assert.assertNotNull(c); [EOL]         Assert.assertEquals(-1, c.getNumeratorAsInt()); [EOL]         Assert.assertEquals(2, c.getDenominatorAsInt()); [EOL]     } [EOL] } <line_num>: 175,201
@Test [EOL] public void testParseProper() { [EOL]     String source = "1 2 / 3"; [EOL]     { [EOL]         BigFraction c = properFormat.parse(source); [EOL]         Assert.assertNotNull(c); [EOL]         Assert.assertEquals(5, c.getNumeratorAsInt()); [EOL]         Assert.assertEquals(3, c.getDenominatorAsInt()); [EOL]     } [EOL]     try { [EOL]         improperFormat.parse(source); [EOL]         Assert.fail("invalid improper fraction."); [EOL]     } catch (MathParseException ex) { [EOL]     } [EOL] } <line_num>: 203,220
@Test [EOL] public void testParseProperNegative() { [EOL]     String source = "-1 2 / 3"; [EOL]     { [EOL]         BigFraction c = properFormat.parse(source); [EOL]         Assert.assertNotNull(c); [EOL]         Assert.assertEquals(-5, c.getNumeratorAsInt()); [EOL]         Assert.assertEquals(3, c.getDenominatorAsInt()); [EOL]     } [EOL]     try { [EOL]         improperFormat.parse(source); [EOL]         Assert.fail("invalid improper fraction."); [EOL]     } catch (MathParseException ex) { [EOL]     } [EOL] } <line_num>: 222,238
@Test [EOL] public void testParseProperInvalidMinus() { [EOL]     String source = "2 -2 / 3"; [EOL]     try { [EOL]         properFormat.parse(source); [EOL]         Assert.fail("invalid minus in improper fraction."); [EOL]     } catch (MathParseException ex) { [EOL]     } [EOL]     source = "2 2 / -3"; [EOL]     try { [EOL]         properFormat.parse(source); [EOL]         Assert.fail("invalid minus in improper fraction."); [EOL]     } catch (MathParseException ex) { [EOL]     } [EOL] } <line_num>: 240,256
@Test [EOL] public void testParseBig() { [EOL]     BigFraction f1 = improperFormat.parse("167213075789791382630275400487886041651764456874403" + " / " + "53225575123090058458126718248444563466137046489291"); [EOL]     Assert.assertEquals(FastMath.PI, f1.doubleValue(), 0.0); [EOL]     BigFraction f2 = properFormat.parse("3 " + "7536350420521207255895245742552351253353317406530" + " / " + "53225575123090058458126718248444563466137046489291"); [EOL]     Assert.assertEquals(FastMath.PI, f2.doubleValue(), 0.0); [EOL]     Assert.assertEquals(f1, f2); [EOL]     BigDecimal pi = new BigDecimal("3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068"); [EOL]     Assert.assertEquals(pi, f1.bigDecimalValue(99, BigDecimal.ROUND_HALF_EVEN)); [EOL] } <line_num>: 258,275
@Test [EOL] public void testNumeratorFormat() { [EOL]     NumberFormat old = properFormat.getNumeratorFormat(); [EOL]     NumberFormat nf = NumberFormat.getInstance(); [EOL]     nf.setParseIntegerOnly(true); [EOL]     properFormat.setNumeratorFormat(nf); [EOL]     Assert.assertEquals(nf, properFormat.getNumeratorFormat()); [EOL]     properFormat.setNumeratorFormat(old); [EOL]     old = improperFormat.getNumeratorFormat(); [EOL]     nf = NumberFormat.getInstance(); [EOL]     nf.setParseIntegerOnly(true); [EOL]     improperFormat.setNumeratorFormat(nf); [EOL]     Assert.assertEquals(nf, improperFormat.getNumeratorFormat()); [EOL]     improperFormat.setNumeratorFormat(old); [EOL] } <line_num>: 277,292
@Test [EOL] public void testDenominatorFormat() { [EOL]     NumberFormat old = properFormat.getDenominatorFormat(); [EOL]     NumberFormat nf = NumberFormat.getInstance(); [EOL]     nf.setParseIntegerOnly(true); [EOL]     properFormat.setDenominatorFormat(nf); [EOL]     Assert.assertEquals(nf, properFormat.getDenominatorFormat()); [EOL]     properFormat.setDenominatorFormat(old); [EOL]     old = improperFormat.getDenominatorFormat(); [EOL]     nf = NumberFormat.getInstance(); [EOL]     nf.setParseIntegerOnly(true); [EOL]     improperFormat.setDenominatorFormat(nf); [EOL]     Assert.assertEquals(nf, improperFormat.getDenominatorFormat()); [EOL]     improperFormat.setDenominatorFormat(old); [EOL] } <line_num>: 294,309
@Test [EOL] public void testWholeFormat() { [EOL]     ProperBigFractionFormat format = (ProperBigFractionFormat) properFormat; [EOL]     NumberFormat old = format.getWholeFormat(); [EOL]     NumberFormat nf = NumberFormat.getInstance(); [EOL]     nf.setParseIntegerOnly(true); [EOL]     format.setWholeFormat(nf); [EOL]     Assert.assertEquals(nf, format.getWholeFormat()); [EOL]     format.setWholeFormat(old); [EOL] } <line_num>: 311,321
@Test [EOL] public void testLongFormat() { [EOL]     Assert.assertEquals("10 / 1", improperFormat.format(10l)); [EOL] } <line_num>: 323,326
@Test [EOL] public void testDoubleFormat() { [EOL]     Assert.assertEquals("1 / 16", improperFormat.format(0.0625)); [EOL] } <line_num>: 328,331
