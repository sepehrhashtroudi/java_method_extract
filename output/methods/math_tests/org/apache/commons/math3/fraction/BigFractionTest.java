private void assertFraction(int expectedNumerator, int expectedDenominator, BigFraction actual) { [EOL]     Assert.assertEquals(expectedNumerator, actual.getNumeratorAsInt()); [EOL]     Assert.assertEquals(expectedDenominator, actual.getDenominatorAsInt()); [EOL] } <line_num>: 34,37
private void assertFraction(long expectedNumerator, long expectedDenominator, BigFraction actual) { [EOL]     Assert.assertEquals(expectedNumerator, actual.getNumeratorAsLong()); [EOL]     Assert.assertEquals(expectedDenominator, actual.getDenominatorAsLong()); [EOL] } <line_num>: 39,42
@Test [EOL] public void testConstructor() { [EOL]     assertFraction(0, 1, new BigFraction(0, 1)); [EOL]     assertFraction(0, 1, new BigFraction(0l, 2l)); [EOL]     assertFraction(0, 1, new BigFraction(0, -1)); [EOL]     assertFraction(1, 2, new BigFraction(1, 2)); [EOL]     assertFraction(1, 2, new BigFraction(2, 4)); [EOL]     assertFraction(-1, 2, new BigFraction(-1, 2)); [EOL]     assertFraction(-1, 2, new BigFraction(1, -2)); [EOL]     assertFraction(-1, 2, new BigFraction(-2, 4)); [EOL]     assertFraction(-1, 2, new BigFraction(2, -4)); [EOL]     assertFraction(11, 1, new BigFraction(11)); [EOL]     assertFraction(11, 1, new BigFraction(11l)); [EOL]     assertFraction(11, 1, new BigFraction(new BigInteger("11"))); [EOL]     assertFraction(0, 1, new BigFraction(0.00000000000001, 1.0e-5, 100)); [EOL]     assertFraction(2, 5, new BigFraction(0.40000000000001, 1.0e-5, 100)); [EOL]     assertFraction(15, 1, new BigFraction(15.0000000000001, 1.0e-5, 100)); [EOL]     Assert.assertEquals(0.00000000000001, new BigFraction(0.00000000000001).doubleValue(), 0.0); [EOL]     Assert.assertEquals(0.40000000000001, new BigFraction(0.40000000000001).doubleValue(), 0.0); [EOL]     Assert.assertEquals(15.0000000000001, new BigFraction(15.0000000000001).doubleValue(), 0.0); [EOL]     assertFraction(3602879701896487l, 9007199254740992l, new BigFraction(0.40000000000001)); [EOL]     assertFraction(1055531162664967l, 70368744177664l, new BigFraction(15.0000000000001)); [EOL]     try { [EOL]         new BigFraction(null, BigInteger.ONE); [EOL]         Assert.fail("Expecting NullArgumentException"); [EOL]     } catch (NullArgumentException npe) { [EOL]     } [EOL]     try { [EOL]         new BigFraction(BigInteger.ONE, null); [EOL]         Assert.fail("Expecting NullArgumentException"); [EOL]     } catch (NullArgumentException npe) { [EOL]     } [EOL]     try { [EOL]         new BigFraction(BigInteger.ONE, BigInteger.ZERO); [EOL]         Assert.fail("Expecting ZeroException"); [EOL]     } catch (ZeroException npe) { [EOL]     } [EOL]     try { [EOL]         new BigFraction(2.0 * Integer.MAX_VALUE, 1.0e-5, 100000); [EOL]         Assert.fail("Expecting FractionConversionException"); [EOL]     } catch (FractionConversionException fce) { [EOL]     } [EOL] } <line_num>: 44,92
@Test(expected = ConvergenceException.class) [EOL] public void testGoldenRatio() { [EOL]     new BigFraction((1 + FastMath.sqrt(5)) / 2, 1.0e-12, 25); [EOL] } <line_num>: 94,98
@Test [EOL] public void testDoubleConstructor() throws ConvergenceException { [EOL]     assertFraction(1, 2, new BigFraction((double) 1 / (double) 2, 1.0e-5, 100)); [EOL]     assertFraction(1, 3, new BigFraction((double) 1 / (double) 3, 1.0e-5, 100)); [EOL]     assertFraction(2, 3, new BigFraction((double) 2 / (double) 3, 1.0e-5, 100)); [EOL]     assertFraction(1, 4, new BigFraction((double) 1 / (double) 4, 1.0e-5, 100)); [EOL]     assertFraction(3, 4, new BigFraction((double) 3 / (double) 4, 1.0e-5, 100)); [EOL]     assertFraction(1, 5, new BigFraction((double) 1 / (double) 5, 1.0e-5, 100)); [EOL]     assertFraction(2, 5, new BigFraction((double) 2 / (double) 5, 1.0e-5, 100)); [EOL]     assertFraction(3, 5, new BigFraction((double) 3 / (double) 5, 1.0e-5, 100)); [EOL]     assertFraction(4, 5, new BigFraction((double) 4 / (double) 5, 1.0e-5, 100)); [EOL]     assertFraction(1, 6, new BigFraction((double) 1 / (double) 6, 1.0e-5, 100)); [EOL]     assertFraction(5, 6, new BigFraction((double) 5 / (double) 6, 1.0e-5, 100)); [EOL]     assertFraction(1, 7, new BigFraction((double) 1 / (double) 7, 1.0e-5, 100)); [EOL]     assertFraction(2, 7, new BigFraction((double) 2 / (double) 7, 1.0e-5, 100)); [EOL]     assertFraction(3, 7, new BigFraction((double) 3 / (double) 7, 1.0e-5, 100)); [EOL]     assertFraction(4, 7, new BigFraction((double) 4 / (double) 7, 1.0e-5, 100)); [EOL]     assertFraction(5, 7, new BigFraction((double) 5 / (double) 7, 1.0e-5, 100)); [EOL]     assertFraction(6, 7, new BigFraction((double) 6 / (double) 7, 1.0e-5, 100)); [EOL]     assertFraction(1, 8, new BigFraction((double) 1 / (double) 8, 1.0e-5, 100)); [EOL]     assertFraction(3, 8, new BigFraction((double) 3 / (double) 8, 1.0e-5, 100)); [EOL]     assertFraction(5, 8, new BigFraction((double) 5 / (double) 8, 1.0e-5, 100)); [EOL]     assertFraction(7, 8, new BigFraction((double) 7 / (double) 8, 1.0e-5, 100)); [EOL]     assertFraction(1, 9, new BigFraction((double) 1 / (double) 9, 1.0e-5, 100)); [EOL]     assertFraction(2, 9, new BigFraction((double) 2 / (double) 9, 1.0e-5, 100)); [EOL]     assertFraction(4, 9, new BigFraction((double) 4 / (double) 9, 1.0e-5, 100)); [EOL]     assertFraction(5, 9, new BigFraction((double) 5 / (double) 9, 1.0e-5, 100)); [EOL]     assertFraction(7, 9, new BigFraction((double) 7 / (double) 9, 1.0e-5, 100)); [EOL]     assertFraction(8, 9, new BigFraction((double) 8 / (double) 9, 1.0e-5, 100)); [EOL]     assertFraction(1, 10, new BigFraction((double) 1 / (double) 10, 1.0e-5, 100)); [EOL]     assertFraction(3, 10, new BigFraction((double) 3 / (double) 10, 1.0e-5, 100)); [EOL]     assertFraction(7, 10, new BigFraction((double) 7 / (double) 10, 1.0e-5, 100)); [EOL]     assertFraction(9, 10, new BigFraction((double) 9 / (double) 10, 1.0e-5, 100)); [EOL]     assertFraction(1, 11, new BigFraction((double) 1 / (double) 11, 1.0e-5, 100)); [EOL]     assertFraction(2, 11, new BigFraction((double) 2 / (double) 11, 1.0e-5, 100)); [EOL]     assertFraction(3, 11, new BigFraction((double) 3 / (double) 11, 1.0e-5, 100)); [EOL]     assertFraction(4, 11, new BigFraction((double) 4 / (double) 11, 1.0e-5, 100)); [EOL]     assertFraction(5, 11, new BigFraction((double) 5 / (double) 11, 1.0e-5, 100)); [EOL]     assertFraction(6, 11, new BigFraction((double) 6 / (double) 11, 1.0e-5, 100)); [EOL]     assertFraction(7, 11, new BigFraction((double) 7 / (double) 11, 1.0e-5, 100)); [EOL]     assertFraction(8, 11, new BigFraction((double) 8 / (double) 11, 1.0e-5, 100)); [EOL]     assertFraction(9, 11, new BigFraction((double) 9 / (double) 11, 1.0e-5, 100)); [EOL]     assertFraction(10, 11, new BigFraction((double) 10 / (double) 11, 1.0e-5, 100)); [EOL] } <line_num>: 101,144
@Test [EOL] public void testDigitLimitConstructor() throws ConvergenceException { [EOL]     assertFraction(2, 5, new BigFraction(0.4, 9)); [EOL]     assertFraction(2, 5, new BigFraction(0.4, 99)); [EOL]     assertFraction(2, 5, new BigFraction(0.4, 999)); [EOL]     assertFraction(3, 5, new BigFraction(0.6152, 9)); [EOL]     assertFraction(8, 13, new BigFraction(0.6152, 99)); [EOL]     assertFraction(510, 829, new BigFraction(0.6152, 999)); [EOL]     assertFraction(769, 1250, new BigFraction(0.6152, 9999)); [EOL]     assertFraction(1, 2, new BigFraction(0.5000000001, 10)); [EOL] } <line_num>: 147,160
@Test [EOL] public void testEpsilonLimitConstructor() throws ConvergenceException { [EOL]     assertFraction(2, 5, new BigFraction(0.4, 1.0e-5, 100)); [EOL]     assertFraction(3, 5, new BigFraction(0.6152, 0.02, 100)); [EOL]     assertFraction(8, 13, new BigFraction(0.6152, 1.0e-3, 100)); [EOL]     assertFraction(251, 408, new BigFraction(0.6152, 1.0e-4, 100)); [EOL]     assertFraction(251, 408, new BigFraction(0.6152, 1.0e-5, 100)); [EOL]     assertFraction(510, 829, new BigFraction(0.6152, 1.0e-6, 100)); [EOL]     assertFraction(769, 1250, new BigFraction(0.6152, 1.0e-7, 100)); [EOL] } <line_num>: 162,172
@Test [EOL] public void testCompareTo() { [EOL]     BigFraction first = new BigFraction(1, 2); [EOL]     BigFraction second = new BigFraction(1, 3); [EOL]     BigFraction third = new BigFraction(1, 2); [EOL]     Assert.assertEquals(0, first.compareTo(first)); [EOL]     Assert.assertEquals(0, first.compareTo(third)); [EOL]     Assert.assertEquals(1, first.compareTo(second)); [EOL]     Assert.assertEquals(-1, second.compareTo(first)); [EOL]     BigFraction pi1 = new BigFraction(1068966896, 340262731); [EOL]     BigFraction pi2 = new BigFraction(411557987, 131002976); [EOL]     Assert.assertEquals(-1, pi1.compareTo(pi2)); [EOL]     Assert.assertEquals(1, pi2.compareTo(pi1)); [EOL]     Assert.assertEquals(0.0, pi1.doubleValue() - pi2.doubleValue(), 1.0e-20); [EOL] } <line_num>: 174,194
@Test [EOL] public void testDoubleValue() { [EOL]     BigFraction first = new BigFraction(1, 2); [EOL]     BigFraction second = new BigFraction(1, 3); [EOL]     Assert.assertEquals(0.5, first.doubleValue(), 0.0); [EOL]     Assert.assertEquals(1.0 / 3.0, second.doubleValue(), 0.0); [EOL] } <line_num>: 196,203
@Test [EOL] public void testDoubleValueForLargeNumeratorAndDenominator() { [EOL]     final BigInteger pow400 = BigInteger.TEN.pow(400); [EOL]     final BigInteger pow401 = BigInteger.TEN.pow(401); [EOL]     final BigInteger two = new BigInteger("2"); [EOL]     final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE), pow400.multiply(two)); [EOL]     Assert.assertEquals(5, large.doubleValue(), 1e-15); [EOL] } <line_num>: 206,215
@Test [EOL] public void testFloatValueForLargeNumeratorAndDenominator() { [EOL]     final BigInteger pow400 = BigInteger.TEN.pow(400); [EOL]     final BigInteger pow401 = BigInteger.TEN.pow(401); [EOL]     final BigInteger two = new BigInteger("2"); [EOL]     final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE), pow400.multiply(two)); [EOL]     Assert.assertEquals(5, large.floatValue(), 1e-15); [EOL] } <line_num>: 218,227
@Test [EOL] public void testFloatValue() { [EOL]     BigFraction first = new BigFraction(1, 2); [EOL]     BigFraction second = new BigFraction(1, 3); [EOL]     Assert.assertEquals(0.5f, first.floatValue(), 0.0f); [EOL]     Assert.assertEquals((float) (1.0 / 3.0), second.floatValue(), 0.0f); [EOL] } <line_num>: 229,236
@Test [EOL] public void testIntValue() { [EOL]     BigFraction first = new BigFraction(1, 2); [EOL]     BigFraction second = new BigFraction(3, 2); [EOL]     Assert.assertEquals(0, first.intValue()); [EOL]     Assert.assertEquals(1, second.intValue()); [EOL] } <line_num>: 238,245
@Test [EOL] public void testLongValue() { [EOL]     BigFraction first = new BigFraction(1, 2); [EOL]     BigFraction second = new BigFraction(3, 2); [EOL]     Assert.assertEquals(0L, first.longValue()); [EOL]     Assert.assertEquals(1L, second.longValue()); [EOL] } <line_num>: 247,254
@Test [EOL] public void testConstructorDouble() { [EOL]     assertFraction(1, 2, new BigFraction(0.5)); [EOL]     assertFraction(6004799503160661l, 18014398509481984l, new BigFraction(1.0 / 3.0)); [EOL]     assertFraction(6124895493223875l, 36028797018963968l, new BigFraction(17.0 / 100.0)); [EOL]     assertFraction(1784551352345559l, 562949953421312l, new BigFraction(317.0 / 100.0)); [EOL]     assertFraction(-1, 2, new BigFraction(-0.5)); [EOL]     assertFraction(-6004799503160661l, 18014398509481984l, new BigFraction(-1.0 / 3.0)); [EOL]     assertFraction(-6124895493223875l, 36028797018963968l, new BigFraction(17.0 / -100.0)); [EOL]     assertFraction(-1784551352345559l, 562949953421312l, new BigFraction(-317.0 / 100.0)); [EOL]     for (double v : new double[] { Double.NaN, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY }) { [EOL]         try { [EOL]             new BigFraction(v); [EOL]             Assert.fail("Expecting IllegalArgumentException"); [EOL]         } catch (IllegalArgumentException iae) { [EOL]         } [EOL]     } [EOL]     Assert.assertEquals(1l, new BigFraction(Double.MAX_VALUE).getDenominatorAsLong()); [EOL]     Assert.assertEquals(1l, new BigFraction(Double.longBitsToDouble(0x0010000000000000L)).getNumeratorAsLong()); [EOL]     Assert.assertEquals(1l, new BigFraction(Double.MIN_VALUE).getNumeratorAsLong()); [EOL] } <line_num>: 256,277
@Test [EOL] public void testAbs() { [EOL]     BigFraction a = new BigFraction(10, 21); [EOL]     BigFraction b = new BigFraction(-10, 21); [EOL]     BigFraction c = new BigFraction(10, -21); [EOL]     assertFraction(10, 21, a.abs()); [EOL]     assertFraction(10, 21, b.abs()); [EOL]     assertFraction(10, 21, c.abs()); [EOL] } <line_num>: 279,288
@Test [EOL] public void testReciprocal() { [EOL]     BigFraction f = null; [EOL]     f = new BigFraction(50, 75); [EOL]     f = f.reciprocal(); [EOL]     Assert.assertEquals(3, f.getNumeratorAsInt()); [EOL]     Assert.assertEquals(2, f.getDenominatorAsInt()); [EOL]     f = new BigFraction(4, 3); [EOL]     f = f.reciprocal(); [EOL]     Assert.assertEquals(3, f.getNumeratorAsInt()); [EOL]     Assert.assertEquals(4, f.getDenominatorAsInt()); [EOL]     f = new BigFraction(-15, 47); [EOL]     f = f.reciprocal(); [EOL]     Assert.assertEquals(-47, f.getNumeratorAsInt()); [EOL]     Assert.assertEquals(15, f.getDenominatorAsInt()); [EOL]     f = new BigFraction(0, 3); [EOL]     try { [EOL]         f = f.reciprocal(); [EOL]         Assert.fail("expecting ZeroException"); [EOL]     } catch (ZeroException ex) { [EOL]     } [EOL]     f = new BigFraction(Integer.MAX_VALUE, 1); [EOL]     f = f.reciprocal(); [EOL]     Assert.assertEquals(1, f.getNumeratorAsInt()); [EOL]     Assert.assertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt()); [EOL] } <line_num>: 290,321
@Test [EOL] public void testNegate() { [EOL]     BigFraction f = null; [EOL]     f = new BigFraction(50, 75); [EOL]     f = f.negate(); [EOL]     Assert.assertEquals(-2, f.getNumeratorAsInt()); [EOL]     Assert.assertEquals(3, f.getDenominatorAsInt()); [EOL]     f = new BigFraction(-50, 75); [EOL]     f = f.negate(); [EOL]     Assert.assertEquals(2, f.getNumeratorAsInt()); [EOL]     Assert.assertEquals(3, f.getDenominatorAsInt()); [EOL]     f = new BigFraction(Integer.MAX_VALUE - 1, Integer.MAX_VALUE); [EOL]     f = f.negate(); [EOL]     Assert.assertEquals(Integer.MIN_VALUE + 2, f.getNumeratorAsInt()); [EOL]     Assert.assertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt()); [EOL] } <line_num>: 323,343
@Test [EOL] public void testAdd() { [EOL]     BigFraction a = new BigFraction(1, 2); [EOL]     BigFraction b = new BigFraction(2, 3); [EOL]     assertFraction(1, 1, a.add(a)); [EOL]     assertFraction(7, 6, a.add(b)); [EOL]     assertFraction(7, 6, b.add(a)); [EOL]     assertFraction(4, 3, b.add(b)); [EOL]     BigFraction f1 = new BigFraction(Integer.MAX_VALUE - 1, 1); [EOL]     BigFraction f2 = BigFraction.ONE; [EOL]     BigFraction f = f1.add(f2); [EOL]     Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt()); [EOL]     Assert.assertEquals(1, f.getDenominatorAsInt()); [EOL]     f1 = new BigFraction(-1, 13 * 13 * 2 * 2); [EOL]     f2 = new BigFraction(-2, 13 * 17 * 2); [EOL]     f = f1.add(f2); [EOL]     Assert.assertEquals(13 * 13 * 17 * 2 * 2, f.getDenominatorAsInt()); [EOL]     Assert.assertEquals(-17 - 2 * 13 * 2, f.getNumeratorAsInt()); [EOL]     try { [EOL]         f.add((BigFraction) null); [EOL]         Assert.fail("expecting NullArgumentException"); [EOL]     } catch (NullArgumentException ex) { [EOL]     } [EOL]     f1 = new BigFraction(1, 32768 * 3); [EOL]     f2 = new BigFraction(1, 59049); [EOL]     f = f1.add(f2); [EOL]     Assert.assertEquals(52451, f.getNumeratorAsInt()); [EOL]     Assert.assertEquals(1934917632, f.getDenominatorAsInt()); [EOL]     f1 = new BigFraction(Integer.MIN_VALUE, 3); [EOL]     f2 = new BigFraction(1, 3); [EOL]     f = f1.add(f2); [EOL]     Assert.assertEquals(Integer.MIN_VALUE + 1, f.getNumeratorAsInt()); [EOL]     Assert.assertEquals(3, f.getDenominatorAsInt()); [EOL]     f1 = new BigFraction(Integer.MAX_VALUE - 1, 1); [EOL]     f = f1.add(BigInteger.ONE); [EOL]     Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt()); [EOL]     Assert.assertEquals(1, f.getDenominatorAsInt()); [EOL]     f = f.add(BigInteger.ZERO); [EOL]     Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt()); [EOL]     Assert.assertEquals(1, f.getDenominatorAsInt()); [EOL]     f1 = new BigFraction(Integer.MAX_VALUE - 1, 1); [EOL]     f = f1.add(1); [EOL]     Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt()); [EOL]     Assert.assertEquals(1, f.getDenominatorAsInt()); [EOL]     f = f.add(0); [EOL]     Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt()); [EOL]     Assert.assertEquals(1, f.getDenominatorAsInt()); [EOL]     f1 = new BigFraction(Integer.MAX_VALUE - 1, 1); [EOL]     f = f1.add(1l); [EOL]     Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt()); [EOL]     Assert.assertEquals(1, f.getDenominatorAsInt()); [EOL]     f = f.add(0l); [EOL]     Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt()); [EOL]     Assert.assertEquals(1, f.getDenominatorAsInt()); [EOL] } <line_num>: 345,414
@Test [EOL] public void testDivide() { [EOL]     BigFraction a = new BigFraction(1, 2); [EOL]     BigFraction b = new BigFraction(2, 3); [EOL]     assertFraction(1, 1, a.divide(a)); [EOL]     assertFraction(3, 4, a.divide(b)); [EOL]     assertFraction(4, 3, b.divide(a)); [EOL]     assertFraction(1, 1, b.divide(b)); [EOL]     BigFraction f1 = new BigFraction(3, 5); [EOL]     BigFraction f2 = BigFraction.ZERO; [EOL]     try { [EOL]         f1.divide(f2); [EOL]         Assert.fail("expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL]     f1 = new BigFraction(0, 5); [EOL]     f2 = new BigFraction(2, 7); [EOL]     BigFraction f = f1.divide(f2); [EOL]     Assert.assertSame(BigFraction.ZERO, f); [EOL]     f1 = new BigFraction(2, 7); [EOL]     f2 = BigFraction.ONE; [EOL]     f = f1.divide(f2); [EOL]     Assert.assertEquals(2, f.getNumeratorAsInt()); [EOL]     Assert.assertEquals(7, f.getDenominatorAsInt()); [EOL]     f1 = new BigFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divide(f1); [EOL]     Assert.assertEquals(1, f.getNumeratorAsInt()); [EOL]     Assert.assertEquals(1, f.getDenominatorAsInt()); [EOL]     f1 = new BigFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f2 = new BigFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divide(f2); [EOL]     Assert.assertEquals(Integer.MIN_VALUE, f.getNumeratorAsInt()); [EOL]     Assert.assertEquals(1, f.getDenominatorAsInt()); [EOL]     try { [EOL]         f.divide((BigFraction) null); [EOL]         Assert.fail("expecting NullArgumentException"); [EOL]     } catch (NullArgumentException ex) { [EOL]     } [EOL]     f1 = new BigFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f = f1.divide(BigInteger.valueOf(Integer.MIN_VALUE)); [EOL]     Assert.assertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt()); [EOL]     Assert.assertEquals(1, f.getNumeratorAsInt()); [EOL]     f1 = new BigFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f = f1.divide(Integer.MIN_VALUE); [EOL]     Assert.assertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt()); [EOL]     Assert.assertEquals(1, f.getNumeratorAsInt()); [EOL]     f1 = new BigFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f = f1.divide((long) Integer.MIN_VALUE); [EOL]     Assert.assertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt()); [EOL]     Assert.assertEquals(1, f.getNumeratorAsInt()); [EOL] } <line_num>: 416,477
@Test [EOL] public void testMultiply() { [EOL]     BigFraction a = new BigFraction(1, 2); [EOL]     BigFraction b = new BigFraction(2, 3); [EOL]     assertFraction(1, 4, a.multiply(a)); [EOL]     assertFraction(1, 3, a.multiply(b)); [EOL]     assertFraction(1, 3, b.multiply(a)); [EOL]     assertFraction(4, 9, b.multiply(b)); [EOL]     BigFraction f1 = new BigFraction(Integer.MAX_VALUE, 1); [EOL]     BigFraction f2 = new BigFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     BigFraction f = f1.multiply(f2); [EOL]     Assert.assertEquals(Integer.MIN_VALUE, f.getNumeratorAsInt()); [EOL]     Assert.assertEquals(1, f.getDenominatorAsInt()); [EOL]     f = f2.multiply(Integer.MAX_VALUE); [EOL]     Assert.assertEquals(Integer.MIN_VALUE, f.getNumeratorAsInt()); [EOL]     Assert.assertEquals(1, f.getDenominatorAsInt()); [EOL]     f = f2.multiply((long) Integer.MAX_VALUE); [EOL]     Assert.assertEquals(Integer.MIN_VALUE, f.getNumeratorAsInt()); [EOL]     Assert.assertEquals(1, f.getDenominatorAsInt()); [EOL]     try { [EOL]         f.multiply((BigFraction) null); [EOL]         Assert.fail("expecting NullArgumentException"); [EOL]     } catch (NullArgumentException ex) { [EOL]     } [EOL] } <line_num>: 479,509
@Test [EOL] public void testSubtract() { [EOL]     BigFraction a = new BigFraction(1, 2); [EOL]     BigFraction b = new BigFraction(2, 3); [EOL]     assertFraction(0, 1, a.subtract(a)); [EOL]     assertFraction(-1, 6, a.subtract(b)); [EOL]     assertFraction(1, 6, b.subtract(a)); [EOL]     assertFraction(0, 1, b.subtract(b)); [EOL]     BigFraction f = new BigFraction(1, 1); [EOL]     try { [EOL]         f.subtract((BigFraction) null); [EOL]         Assert.fail("expecting NullArgumentException"); [EOL]     } catch (NullArgumentException ex) { [EOL]     } [EOL]     BigFraction f1 = new BigFraction(1, 32768 * 3); [EOL]     BigFraction f2 = new BigFraction(1, 59049); [EOL]     f = f1.subtract(f2); [EOL]     Assert.assertEquals(-13085, f.getNumeratorAsInt()); [EOL]     Assert.assertEquals(1934917632, f.getDenominatorAsInt()); [EOL]     f1 = new BigFraction(Integer.MIN_VALUE, 3); [EOL]     f2 = new BigFraction(1, 3).negate(); [EOL]     f = f1.subtract(f2); [EOL]     Assert.assertEquals(Integer.MIN_VALUE + 1, f.getNumeratorAsInt()); [EOL]     Assert.assertEquals(3, f.getDenominatorAsInt()); [EOL]     f1 = new BigFraction(Integer.MAX_VALUE, 1); [EOL]     f2 = BigFraction.ONE; [EOL]     f = f1.subtract(f2); [EOL]     Assert.assertEquals(Integer.MAX_VALUE - 1, f.getNumeratorAsInt()); [EOL]     Assert.assertEquals(1, f.getDenominatorAsInt()); [EOL] } <line_num>: 511,548
@Test [EOL] public void testBigDecimalValue() { [EOL]     Assert.assertEquals(new BigDecimal(0.5), new BigFraction(1, 2).bigDecimalValue()); [EOL]     Assert.assertEquals(new BigDecimal("0.0003"), new BigFraction(3, 10000).bigDecimalValue()); [EOL]     Assert.assertEquals(new BigDecimal("0"), new BigFraction(1, 3).bigDecimalValue(BigDecimal.ROUND_DOWN)); [EOL]     Assert.assertEquals(new BigDecimal("0.333"), new BigFraction(1, 3).bigDecimalValue(3, BigDecimal.ROUND_DOWN)); [EOL] } <line_num>: 550,556
@Test [EOL] public void testEqualsAndHashCode() { [EOL]     BigFraction zero = new BigFraction(0, 1); [EOL]     BigFraction nullFraction = null; [EOL]     Assert.assertTrue(zero.equals(zero)); [EOL]     Assert.assertFalse(zero.equals(nullFraction)); [EOL]     Assert.assertFalse(zero.equals(Double.valueOf(0))); [EOL]     BigFraction zero2 = new BigFraction(0, 2); [EOL]     Assert.assertTrue(zero.equals(zero2)); [EOL]     Assert.assertEquals(zero.hashCode(), zero2.hashCode()); [EOL]     BigFraction one = new BigFraction(1, 1); [EOL]     Assert.assertFalse((one.equals(zero) || zero.equals(one))); [EOL]     Assert.assertTrue(one.equals(BigFraction.ONE)); [EOL] } <line_num>: 558,571
@Test [EOL] public void testGetReducedFraction() { [EOL]     BigFraction threeFourths = new BigFraction(3, 4); [EOL]     Assert.assertTrue(threeFourths.equals(BigFraction.getReducedFraction(6, 8))); [EOL]     Assert.assertTrue(BigFraction.ZERO.equals(BigFraction.getReducedFraction(0, -1))); [EOL]     try { [EOL]         BigFraction.getReducedFraction(1, 0); [EOL]         Assert.fail("expecting ZeroException"); [EOL]     } catch (ZeroException ex) { [EOL]     } [EOL]     Assert.assertEquals(BigFraction.getReducedFraction(2, Integer.MIN_VALUE).getNumeratorAsInt(), -1); [EOL]     Assert.assertEquals(BigFraction.getReducedFraction(1, -1).getNumeratorAsInt(), -1); [EOL] } <line_num>: 573,586
@Test [EOL] public void testPercentage() { [EOL]     Assert.assertEquals(50.0, new BigFraction(1, 2).percentageValue(), 1.0e-15); [EOL] } <line_num>: 588,591
@Test [EOL] public void testPow() { [EOL]     Assert.assertEquals(new BigFraction(8192, 1594323), new BigFraction(2, 3).pow(13)); [EOL]     Assert.assertEquals(new BigFraction(8192, 1594323), new BigFraction(2, 3).pow(13l)); [EOL]     Assert.assertEquals(new BigFraction(8192, 1594323), new BigFraction(2, 3).pow(BigInteger.valueOf(13l))); [EOL]     Assert.assertEquals(BigFraction.ONE, new BigFraction(2, 3).pow(0)); [EOL]     Assert.assertEquals(BigFraction.ONE, new BigFraction(2, 3).pow(0l)); [EOL]     Assert.assertEquals(BigFraction.ONE, new BigFraction(2, 3).pow(BigInteger.valueOf(0l))); [EOL]     Assert.assertEquals(new BigFraction(1594323, 8192), new BigFraction(2, 3).pow(-13)); [EOL]     Assert.assertEquals(new BigFraction(1594323, 8192), new BigFraction(2, 3).pow(-13l)); [EOL]     Assert.assertEquals(new BigFraction(1594323, 8192), new BigFraction(2, 3).pow(BigInteger.valueOf(-13l))); [EOL] } <line_num>: 593,604
@Test [EOL] public void testMath340() { [EOL]     BigFraction fractionA = new BigFraction(0.00131); [EOL]     BigFraction fractionB = new BigFraction(.37).reciprocal(); [EOL]     BigFraction errorResult = fractionA.multiply(fractionB); [EOL]     BigFraction correctResult = new BigFraction(fractionA.getNumerator().multiply(fractionB.getNumerator()), fractionA.getDenominator().multiply(fractionB.getDenominator())); [EOL]     Assert.assertEquals(correctResult, errorResult); [EOL] } <line_num>: 606,614
@Test [EOL] public void testSerial() throws FractionConversionException { [EOL]     BigFraction[] fractions = { new BigFraction(3, 4), BigFraction.ONE, BigFraction.ZERO, new BigFraction(17), new BigFraction(FastMath.PI, 1000), new BigFraction(-5, 2) }; [EOL]     for (BigFraction fraction : fractions) { [EOL]         Assert.assertEquals(fraction, TestUtils.serializeAndRecover(fraction)); [EOL]     } [EOL] } <line_num>: 616,626
