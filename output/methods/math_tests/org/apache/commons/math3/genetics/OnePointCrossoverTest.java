@Test [EOL] public void testCrossover() { [EOL]     @SuppressWarnings("boxing") [EOL]     Integer[] p1 = new Integer[] { 1, 0, 1, 0, 0, 1, 0, 1, 1 }; [EOL]     @SuppressWarnings("boxing") [EOL]     Integer[] p2 = new Integer[] { 0, 1, 1, 0, 1, 0, 1, 1, 1 }; [EOL]     BinaryChromosome p1c = new DummyBinaryChromosome(p1); [EOL]     BinaryChromosome p2c = new DummyBinaryChromosome(p2); [EOL]     OnePointCrossover<Integer> opc = new OnePointCrossover<Integer>(); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         ChromosomePair pair = opc.crossover(p1c, p2c); [EOL]         Integer[] c1 = new Integer[p1.length]; [EOL]         Integer[] c2 = new Integer[p2.length]; [EOL]         c1 = ((BinaryChromosome) pair.getFirst()).getRepresentation().toArray(c1); [EOL]         c2 = ((BinaryChromosome) pair.getSecond()).getRepresentation().toArray(c2); [EOL]         Assert.assertEquals(p1[0], c1[0]); [EOL]         Assert.assertEquals(p2[0], c2[0]); [EOL]         Assert.assertEquals(p1[p1.length - 1], c1[c1.length - 1]); [EOL]         Assert.assertEquals(p2[p2.length - 1], c2[c2.length - 1]); [EOL]         Assert.assertEquals(p1[2], c1[2]); [EOL]         Assert.assertEquals(p2[2], c2[2]); [EOL]         Assert.assertEquals(p1[3], c1[3]); [EOL]         Assert.assertEquals(p2[3], c2[3]); [EOL]         Assert.assertEquals(p1[7], c1[7]); [EOL]         Assert.assertEquals(p2[7], c2[7]); [EOL]     } [EOL] } <line_num>: 24,59
