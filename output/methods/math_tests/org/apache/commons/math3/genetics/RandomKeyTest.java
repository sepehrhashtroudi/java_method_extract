@Test(expected = IllegalArgumentException.class) [EOL] public void testConstructor1() { [EOL]     new DummyRandomKey(new Double[] { 0.2, 0.3, 1.2 }); [EOL] } <line_num>: 30,33
@Test(expected = IllegalArgumentException.class) [EOL] public void testConstructor2() { [EOL]     new DummyRandomKey(new Double[] { 0.2, 0.3, -0.2 }); [EOL] } <line_num>: 35,38
@Test [EOL] public void testIsSame() { [EOL]     DummyRandomKey drk1 = new DummyRandomKey(new Double[] { 0.4, 0.1, 0.5, 0.8, 0.2 }); [EOL]     DummyRandomKey drk2 = new DummyRandomKey(new Double[] { 0.4, 0.1, 0.5, 0.8, 0.2 }); [EOL]     DummyRandomKey drk3 = new DummyRandomKey(new Double[] { 0.4, 0.15, 0.5, 0.8, 0.2 }); [EOL]     DummyRandomKey drk4 = new DummyRandomKey(new Double[] { 0.4, 0.25, 0.5, 0.8, 0.2 }); [EOL]     DummyRandomKey drk5 = new DummyRandomKey(new Double[] { 0.4, 0.25, 0.5, 0.8, 0.2, 0.5 }); [EOL]     Assert.assertTrue(drk1.isSame(drk2)); [EOL]     Assert.assertTrue(drk2.isSame(drk3)); [EOL]     Assert.assertFalse(drk3.isSame(drk4)); [EOL]     Assert.assertFalse(drk4.isSame(drk5)); [EOL] } <line_num>: 40,52
@Test [EOL] public void testDecode() { [EOL]     DummyRandomKey drk = new DummyRandomKey(new Double[] { 0.4, 0.1, 0.5, 0.8, 0.2 }); [EOL]     List<String> decoded = drk.decode(Arrays.asList(new String[] { "a", "b", "c", "d", "e" })); [EOL]     Assert.assertEquals("b", decoded.get(0)); [EOL]     Assert.assertEquals("e", decoded.get(1)); [EOL]     Assert.assertEquals("a", decoded.get(2)); [EOL]     Assert.assertEquals("c", decoded.get(3)); [EOL]     Assert.assertEquals("d", decoded.get(4)); [EOL] } <line_num>: 54,64
@Test(expected = IllegalArgumentException.class) [EOL] public void testInvalidRepresentation() { [EOL]     new DummyRandomKey(new Double[] { 0.1, 0.1, 2d, 0.8, 0.2 }); [EOL] } <line_num>: 66,69
@Test [EOL] public void testRandomPermutation() { [EOL]     for (int i = 0; i < 10; i++) { [EOL]         DummyRandomKey drk = new DummyRandomKey(RandomKey.randomPermutation(20)); [EOL]         Assert.assertNotNull(drk); [EOL]     } [EOL] } <line_num>: 71,78
@Test [EOL] public void testIdentityPermutation() { [EOL]     DummyRandomKey drk = new DummyRandomKey(RandomKey.identityPermutation(5)); [EOL]     List<String> decoded = drk.decode(Arrays.asList(new String[] { "a", "b", "c", "d", "e" })); [EOL]     Assert.assertEquals("a", decoded.get(0)); [EOL]     Assert.assertEquals("b", decoded.get(1)); [EOL]     Assert.assertEquals("c", decoded.get(2)); [EOL]     Assert.assertEquals("d", decoded.get(3)); [EOL]     Assert.assertEquals("e", decoded.get(4)); [EOL] } <line_num>: 80,90
public int compare(String o1, String o2) { [EOL]     return o1.compareTo(o2); [EOL] } <line_num>: 97,99
public int compare(String o1, String o2) { [EOL]     return o2.compareTo(o1); [EOL] } <line_num>: 112,114
@Test [EOL] public void testComparatorPermutation() { [EOL]     List<String> data = Arrays.asList(new String[] { "x", "b", "c", "z", "b" }); [EOL]     List<Double> permutation = RandomKey.comparatorPermutation(data, new Comparator<String>() { [EOL]  [EOL]         public int compare(String o1, String o2) { [EOL]             return o1.compareTo(o2); [EOL]         } [EOL]     }); [EOL]     Double[] permArr = new Double[data.size()]; [EOL]     permArr = permutation.toArray(permArr); [EOL]     Assert.assertArrayEquals(new Double[] { 0.6, 0.0, 0.4, 0.8, 0.2 }, permArr); [EOL]     List<String> decodedData = new DummyRandomKey(permutation).decode(data); [EOL]     Assert.assertEquals("b", decodedData.get(0)); [EOL]     Assert.assertEquals("b", decodedData.get(1)); [EOL]     Assert.assertEquals("c", decodedData.get(2)); [EOL]     Assert.assertEquals("x", decodedData.get(3)); [EOL]     Assert.assertEquals("z", decodedData.get(4)); [EOL]     permutation = RandomKey.comparatorPermutation(data, new Comparator<String>() { [EOL]  [EOL]         public int compare(String o1, String o2) { [EOL]             return o2.compareTo(o1); [EOL]         } [EOL]     }); [EOL]     permArr = new Double[data.size()]; [EOL]     permArr = permutation.toArray(permArr); [EOL]     Assert.assertArrayEquals(new Double[] { 0.2, 0.6, 0.4, 0.0, 0.8 }, permArr); [EOL]     decodedData = new DummyRandomKey(permutation).decode(data); [EOL]     Assert.assertEquals("z", decodedData.get(0)); [EOL]     Assert.assertEquals("x", decodedData.get(1)); [EOL]     Assert.assertEquals("c", decodedData.get(2)); [EOL]     Assert.assertEquals("b", decodedData.get(3)); [EOL]     Assert.assertEquals("b", decodedData.get(4)); [EOL] } <line_num>: 92,125
@Test [EOL] public void testInducedPermutation() { [EOL]     List<String> origData = Arrays.asList(new String[] { "a", "b", "c", "d", "d" }); [EOL]     List<String> permutedData = Arrays.asList(new String[] { "d", "b", "c", "a", "d" }); [EOL]     DummyRandomKey drk = new DummyRandomKey(RandomKey.inducedPermutation(origData, permutedData)); [EOL]     List<String> decoded = drk.decode(origData); [EOL]     Assert.assertEquals("d", decoded.get(0)); [EOL]     Assert.assertEquals("b", decoded.get(1)); [EOL]     Assert.assertEquals("c", decoded.get(2)); [EOL]     Assert.assertEquals("a", decoded.get(3)); [EOL]     Assert.assertEquals("d", decoded.get(4)); [EOL]     try { [EOL]         RandomKey.inducedPermutation(Arrays.asList(new String[] { "a", "b", "c", "d", "d" }), Arrays.asList(new String[] { "a", "b", "c", "d" })); [EOL]         Assert.fail("Uncaught exception"); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         RandomKey.inducedPermutation(Arrays.asList(new String[] { "a", "b", "c", "d", "d" }), Arrays.asList(new String[] { "a", "b", "c", "d", "f" })); [EOL]         Assert.fail("Uncaught exception"); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 127,159
@Test [EOL] public void testEqualRepr() { [EOL]     DummyRandomKey drk = new DummyRandomKey(new Double[] { 0.2, 0.2, 0.5 }); [EOL]     List<String> decodedData = drk.decode(Arrays.asList(new String[] { "a", "b", "c" })); [EOL]     Assert.assertEquals("a", decodedData.get(0)); [EOL]     Assert.assertEquals("b", decodedData.get(1)); [EOL]     Assert.assertEquals("c", decodedData.get(2)); [EOL] } <line_num>: 161,168
