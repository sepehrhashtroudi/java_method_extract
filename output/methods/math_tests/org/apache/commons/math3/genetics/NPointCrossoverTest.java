@Test(expected = DimensionMismatchException.class) [EOL] public void testCrossoverDimensionMismatchException() { [EOL]     final Integer[] p1 = new Integer[] { 1, 0, 1, 0, 0, 1, 0, 1, 1 }; [EOL]     final Integer[] p2 = new Integer[] { 0, 1, 1, 0, 1 }; [EOL]     final BinaryChromosome p1c = new DummyBinaryChromosome(p1); [EOL]     final BinaryChromosome p2c = new DummyBinaryChromosome(p2); [EOL]     final CrossoverPolicy cp = new NPointCrossover<Integer>(1); [EOL]     cp.crossover(p1c, p2c); [EOL] } <line_num>: 29,39
@Test(expected = NumberIsTooLargeException.class) [EOL] public void testNumberIsTooLargeException() { [EOL]     final Integer[] p1 = new Integer[] { 1, 0, 1, 0, 0, 1, 0, 1, 1 }; [EOL]     final Integer[] p2 = new Integer[] { 0, 1, 1, 0, 1, 0, 1, 1, 1 }; [EOL]     final BinaryChromosome p1c = new DummyBinaryChromosome(p1); [EOL]     final BinaryChromosome p2c = new DummyBinaryChromosome(p2); [EOL]     final CrossoverPolicy cp = new NPointCrossover<Integer>(15); [EOL]     cp.crossover(p1c, p2c); [EOL] } <line_num>: 41,51
public double fitness() { [EOL]     return 0; [EOL] } <line_num>: 58,61
@Test(expected = MathIllegalArgumentException.class) [EOL] public void testCrossoverInvalidFixedLengthChromosomeFirst() { [EOL]     final Integer[] p1 = new Integer[] { 1, 0, 1, 0, 0, 1, 0, 1, 1 }; [EOL]     final BinaryChromosome p1c = new DummyBinaryChromosome(p1); [EOL]     final Chromosome p2c = new Chromosome() { [EOL]  [EOL]         public double fitness() { [EOL]             return 0; [EOL]         } [EOL]     }; [EOL]     final CrossoverPolicy cp = new NPointCrossover<Integer>(1); [EOL]     cp.crossover(p1c, p2c); [EOL] } <line_num>: 53,66
public double fitness() { [EOL]     return 0; [EOL] } <line_num>: 73,76
@Test(expected = MathIllegalArgumentException.class) [EOL] public void testCrossoverInvalidFixedLengthChromosomeSecond() { [EOL]     final Integer[] p1 = new Integer[] { 1, 0, 1, 0, 0, 1, 0, 1, 1 }; [EOL]     final BinaryChromosome p2c = new DummyBinaryChromosome(p1); [EOL]     final Chromosome p1c = new Chromosome() { [EOL]  [EOL]         public double fitness() { [EOL]             return 0; [EOL]         } [EOL]     }; [EOL]     final CrossoverPolicy cp = new NPointCrossover<Integer>(1); [EOL]     cp.crossover(p1c, p2c); [EOL] } <line_num>: 68,81
@Test [EOL] public void testCrossover() { [EOL]     Integer[] p1 = new Integer[] { 1, 0, 1, 0, 1, 0, 1, 0, 1 }; [EOL]     Integer[] p2 = new Integer[] { 0, 1, 0, 1, 0, 1, 0, 1, 0 }; [EOL]     BinaryChromosome p1c = new DummyBinaryChromosome(p1); [EOL]     BinaryChromosome p2c = new DummyBinaryChromosome(p2); [EOL]     final int order = 3; [EOL]     NPointCrossover<Integer> npc = new NPointCrossover<Integer>(order); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         ChromosomePair pair = npc.crossover(p1c, p2c); [EOL]         Integer[] c1 = new Integer[p1.length]; [EOL]         Integer[] c2 = new Integer[p2.length]; [EOL]         c1 = ((BinaryChromosome) pair.getFirst()).getRepresentation().toArray(c1); [EOL]         c2 = ((BinaryChromosome) pair.getSecond()).getRepresentation().toArray(c2); [EOL]         Assert.assertEquals(order, detectCrossoverPoints(p1c, p2c, (BinaryChromosome) pair.getFirst())); [EOL]         Assert.assertEquals(order, detectCrossoverPoints(p2c, p1c, (BinaryChromosome) pair.getSecond())); [EOL]     } [EOL] } <line_num>: 83,108
private int detectCrossoverPoints(BinaryChromosome p1, BinaryChromosome p2, BinaryChromosome c) { [EOL]     int crossovers = 0; [EOL]     final int length = p1.getLength(); [EOL]     final List<Integer> p1Rep = p1.getRepresentation(); [EOL]     final List<Integer> p2Rep = p2.getRepresentation(); [EOL]     final List<Integer> cRep = c.getRepresentation(); [EOL]     List<Integer> rep = p1Rep; [EOL]     for (int i = 0; i < length; i++) { [EOL]         if (rep.get(i) != cRep.get(i)) { [EOL]             crossovers++; [EOL]             rep = rep == p1Rep ? p2Rep : p1Rep; [EOL]         } [EOL]     } [EOL]     return crossovers; [EOL] } <line_num>: 110,127
