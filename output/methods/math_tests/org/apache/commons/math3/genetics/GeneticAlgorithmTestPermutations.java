public MinPermutations(List<Double> representation) { [EOL]     super(representation); [EOL] } <line_num>: 108,110
@Test [EOL] public void test() { [EOL]     GeneticAlgorithm ga = new GeneticAlgorithm(new OnePointCrossover<Integer>(), CROSSOVER_RATE, new RandomKeyMutation(), MUTATION_RATE, new TournamentSelection(TOURNAMENT_ARITY)); [EOL]     Population initial = randomPopulation(); [EOL]     StoppingCondition stopCond = new FixedGenerationCount(NUM_GENERATIONS); [EOL]     Chromosome bestInitial = initial.getFittestChromosome(); [EOL]     Population finalPopulation = ga.evolve(initial, stopCond); [EOL]     Chromosome bestFinal = finalPopulation.getFittestChromosome(); [EOL]     Assert.assertTrue(bestFinal.compareTo(bestInitial) > 0); [EOL] } <line_num>: 52,86
private static ElitisticListPopulation randomPopulation() { [EOL]     List<Chromosome> popList = new ArrayList<Chromosome>(); [EOL]     for (int i = 0; i < POPULATION_SIZE; i++) { [EOL]         Chromosome randChrom = new MinPermutations(RandomKey.randomPermutation(DIMENSION)); [EOL]         popList.add(randChrom); [EOL]     } [EOL]     return new ElitisticListPopulation(popList, popList.size(), ELITISM_RATE); [EOL] } <line_num>: 92,99
public double fitness() { [EOL]     int res = 0; [EOL]     List<Integer> decoded = decode(sequence); [EOL]     for (int i = 0; i < decoded.size(); i++) { [EOL]         int value = decoded.get(i); [EOL]         if (value != i) { [EOL]             res += FastMath.abs(value - i); [EOL]         } [EOL]     } [EOL]     return -res; [EOL] } <line_num>: 112,125
@Override [EOL] public AbstractListChromosome<Double> newFixedLengthChromosome(List<Double> chromosomeRepresentation) { [EOL]     return new MinPermutations(chromosomeRepresentation); [EOL] } <line_num>: 127,130
