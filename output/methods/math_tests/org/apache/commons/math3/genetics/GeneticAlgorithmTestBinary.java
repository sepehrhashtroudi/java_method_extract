public FindOnes(List<Integer> representation) { [EOL]     super(representation); [EOL] } <line_num>: 100,102
@Test [EOL] public void test() { [EOL]     GeneticAlgorithm ga = new GeneticAlgorithm(new OnePointCrossover<Integer>(), CROSSOVER_RATE, new BinaryMutation(), MUTATION_RATE, new TournamentSelection(TOURNAMENT_ARITY)); [EOL]     Assert.assertEquals(0, ga.getGenerationsEvolved()); [EOL]     Population initial = randomPopulation(); [EOL]     StoppingCondition stopCond = new FixedGenerationCount(NUM_GENERATIONS); [EOL]     Chromosome bestInitial = initial.getFittestChromosome(); [EOL]     Population finalPopulation = ga.evolve(initial, stopCond); [EOL]     Chromosome bestFinal = finalPopulation.getFittestChromosome(); [EOL]     Assert.assertTrue(bestFinal.compareTo(bestInitial) > 0); [EOL]     Assert.assertEquals(NUM_GENERATIONS, ga.getGenerationsEvolved()); [EOL] } <line_num>: 40,75
private static ElitisticListPopulation randomPopulation() { [EOL]     List<Chromosome> popList = new LinkedList<Chromosome>(); [EOL]     for (int i = 0; i < POPULATION_SIZE; i++) { [EOL]         BinaryChromosome randChrom = new FindOnes(BinaryChromosome.randomBinaryRepresentation(DIMENSION)); [EOL]         popList.add(randChrom); [EOL]     } [EOL]     return new ElitisticListPopulation(popList, popList.size(), ELITISM_RATE); [EOL] } <line_num>: 83,91
public double fitness() { [EOL]     int num = 0; [EOL]     for (int val : this.getRepresentation()) { [EOL]         if (val != 0) [EOL]             num++; [EOL]     } [EOL]     return num; [EOL] } <line_num>: 107,115
@Override [EOL] public AbstractListChromosome<Integer> newFixedLengthChromosome(List<Integer> chromosomeRepresentation) { [EOL]     return new FindOnes(chromosomeRepresentation); [EOL] } <line_num>: 117,120
