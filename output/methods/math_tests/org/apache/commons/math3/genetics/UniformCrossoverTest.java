@SuppressWarnings("boxing") [EOL] @BeforeClass [EOL] public static void setUpBeforeClass() { [EOL]     for (int i = 0; i < LEN; i++) { [EOL]         p1.add(0); [EOL]         p2.add(1); [EOL]     } [EOL] } <line_num>: 35,42
@Test(expected = OutOfRangeException.class) [EOL] public void testRatioTooLow() { [EOL]     new UniformCrossover<Integer>(-0.5d); [EOL] } <line_num>: 44,47
@Test(expected = OutOfRangeException.class) [EOL] public void testRatioTooHigh() { [EOL]     new UniformCrossover<Integer>(1.5d); [EOL] } <line_num>: 49,52
@Test [EOL] public void testCrossover() { [EOL]     performCrossover(0.5); [EOL]     performCrossover(0.7); [EOL]     performCrossover(0.2); [EOL] } <line_num>: 54,60
private void performCrossover(double ratio) { [EOL]     final DummyBinaryChromosome p1c = new DummyBinaryChromosome(p1); [EOL]     final DummyBinaryChromosome p2c = new DummyBinaryChromosome(p2); [EOL]     final CrossoverPolicy cp = new UniformCrossover<Integer>(ratio); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         final ChromosomePair pair = cp.crossover(p1c, p2c); [EOL]         final List<Integer> c1 = ((DummyBinaryChromosome) pair.getFirst()).getRepresentation(); [EOL]         final List<Integer> c2 = ((DummyBinaryChromosome) pair.getSecond()).getRepresentation(); [EOL]         int from1 = 0; [EOL]         int from2 = 0; [EOL]         for (int val : c1) { [EOL]             if (val == 0) { [EOL]                 from1++; [EOL]             } else { [EOL]                 from2++; [EOL]             } [EOL]         } [EOL]         Assert.assertEquals(1.0 - ratio, (double) from1 / LEN, 0.1); [EOL]         Assert.assertEquals(ratio, (double) from2 / LEN, 0.1); [EOL]         from1 = 0; [EOL]         from2 = 0; [EOL]         for (int val : c2) { [EOL]             if (val == 0) { [EOL]                 from1++; [EOL]             } else { [EOL]                 from2++; [EOL]             } [EOL]         } [EOL]         Assert.assertEquals(ratio, (double) from1 / LEN, 0.1); [EOL]         Assert.assertEquals(1.0 - ratio, (double) from2 / LEN, 0.1); [EOL]     } [EOL] } <line_num>: 62,105
@Test(expected = DimensionMismatchException.class) [EOL] public void testCrossoverDimensionMismatchException() { [EOL]     @SuppressWarnings("boxing") [EOL]     final Integer[] p1 = new Integer[] { 1, 0, 1, 0, 0, 1, 0, 1, 1 }; [EOL]     @SuppressWarnings("boxing") [EOL]     final Integer[] p2 = new Integer[] { 0, 1, 1, 0, 1 }; [EOL]     final BinaryChromosome p1c = new DummyBinaryChromosome(p1); [EOL]     final BinaryChromosome p2c = new DummyBinaryChromosome(p2); [EOL]     final CrossoverPolicy cp = new UniformCrossover<Integer>(0.5d); [EOL]     cp.crossover(p1c, p2c); [EOL] } <line_num>: 107,119
public double fitness() { [EOL]     return 0; [EOL] } <line_num>: 127,130
@Test(expected = MathIllegalArgumentException.class) [EOL] public void testCrossoverInvalidFixedLengthChromosomeFirst() { [EOL]     @SuppressWarnings("boxing") [EOL]     final Integer[] p1 = new Integer[] { 1, 0, 1, 0, 0, 1, 0, 1, 1 }; [EOL]     final BinaryChromosome p1c = new DummyBinaryChromosome(p1); [EOL]     final Chromosome p2c = new Chromosome() { [EOL]  [EOL]         public double fitness() { [EOL]             return 0; [EOL]         } [EOL]     }; [EOL]     final CrossoverPolicy cp = new UniformCrossover<Integer>(0.5d); [EOL]     cp.crossover(p1c, p2c); [EOL] } <line_num>: 121,135
public double fitness() { [EOL]     return 0; [EOL] } <line_num>: 143,146
@Test(expected = MathIllegalArgumentException.class) [EOL] public void testCrossoverInvalidFixedLengthChromosomeSecond() { [EOL]     @SuppressWarnings("boxing") [EOL]     final Integer[] p1 = new Integer[] { 1, 0, 1, 0, 0, 1, 0, 1, 1 }; [EOL]     final BinaryChromosome p2c = new DummyBinaryChromosome(p1); [EOL]     final Chromosome p1c = new Chromosome() { [EOL]  [EOL]         public double fitness() { [EOL]             return 0; [EOL]         } [EOL]     }; [EOL]     final CrossoverPolicy cp = new UniformCrossover<Integer>(0.5d); [EOL]     cp.crossover(p1c, p2c); [EOL] } <line_num>: 137,151
