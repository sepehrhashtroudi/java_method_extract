public double fitness() { [EOL]     return 0; [EOL] } <line_num>: 34,36
public double fitness() { [EOL]     return 10; [EOL] } <line_num>: 39,41
public double fitness() { [EOL]     return 15; [EOL] } <line_num>: 44,46
public Population nextGeneration() { [EOL]     return null; [EOL] } <line_num>: 55,58
@Test [EOL] public void testGetFittestChromosome() { [EOL]     Chromosome c1 = new Chromosome() { [EOL]  [EOL]         public double fitness() { [EOL]             return 0; [EOL]         } [EOL]     }; [EOL]     Chromosome c2 = new Chromosome() { [EOL]  [EOL]         public double fitness() { [EOL]             return 10; [EOL]         } [EOL]     }; [EOL]     Chromosome c3 = new Chromosome() { [EOL]  [EOL]         public double fitness() { [EOL]             return 15; [EOL]         } [EOL]     }; [EOL]     ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome>(); [EOL]     chromosomes.add(c1); [EOL]     chromosomes.add(c2); [EOL]     chromosomes.add(c3); [EOL]     ListPopulation population = new ListPopulation(chromosomes, 10) { [EOL]  [EOL]         public Population nextGeneration() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     Assert.assertEquals(c3, population.getFittestChromosome()); [EOL] } <line_num>: 31,62
public Population nextGeneration() { [EOL]     return null; [EOL] } <line_num>: 72,75
@Test [EOL] public void testChromosomes() { [EOL]     final ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome>(); [EOL]     chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3))); [EOL]     chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3))); [EOL]     chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3))); [EOL]     final ListPopulation population = new ListPopulation(10) { [EOL]  [EOL]         public Population nextGeneration() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     population.addChromosomes(chromosomes); [EOL]     Assert.assertEquals(chromosomes, population.getChromosomes()); [EOL]     Assert.assertEquals(chromosomes.toString(), population.toString()); [EOL]     population.setPopulationLimit(50); [EOL]     Assert.assertEquals(50, population.getPopulationLimit()); [EOL] } <line_num>: 64,85
public Population nextGeneration() { [EOL]     return null; [EOL] } <line_num>: 90,93
@Test(expected = NotPositiveException.class) [EOL] public void testSetPopulationLimit() { [EOL]     final ListPopulation population = new ListPopulation(10) { [EOL]  [EOL]         public Population nextGeneration() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     population.setPopulationLimit(-50); [EOL] } <line_num>: 87,97
public Population nextGeneration() { [EOL]     return null; [EOL] } <line_num>: 102,105
@Test(expected = NotPositiveException.class) [EOL] public void testConstructorPopulationLimitNotPositive() { [EOL]     new ListPopulation(-10) { [EOL]  [EOL]         public Population nextGeneration() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL] } <line_num>: 99,107
public Population nextGeneration() { [EOL]     return null; [EOL] } <line_num>: 114,117
@Test(expected = NotPositiveException.class) [EOL] public void testChromosomeListConstructorPopulationLimitNotPositive() { [EOL]     final ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome>(); [EOL]     chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3))); [EOL]     new ListPopulation(chromosomes, -10) { [EOL]  [EOL]         public Population nextGeneration() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL] } <line_num>: 109,119
public Population nextGeneration() { [EOL]     return null; [EOL] } <line_num>: 128,131
@Test(expected = NumberIsTooLargeException.class) [EOL] public void testConstructorListOfChromosomesBiggerThanPopulationSize() { [EOL]     final ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome>(); [EOL]     chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3))); [EOL]     chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3))); [EOL]     chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3))); [EOL]     new ListPopulation(chromosomes, 1) { [EOL]  [EOL]         public Population nextGeneration() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL] } <line_num>: 121,133
public Population nextGeneration() { [EOL]     return null; [EOL] } <line_num>: 143,146
@Test(expected = NumberIsTooLargeException.class) [EOL] public void testAddTooManyChromosomes() { [EOL]     final ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome>(); [EOL]     chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3))); [EOL]     chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3))); [EOL]     chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3))); [EOL]     final ListPopulation population = new ListPopulation(2) { [EOL]  [EOL]         public Population nextGeneration() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     population.addChromosomes(chromosomes); [EOL] } <line_num>: 135,150
public Population nextGeneration() { [EOL]     return null; [EOL] } <line_num>: 156,159
@Test(expected = NumberIsTooLargeException.class) [EOL] public void testAddTooManyChromosomesSingleCall() { [EOL]     final ListPopulation population = new ListPopulation(2) { [EOL]  [EOL]         public Population nextGeneration() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     for (int i = 0; i <= population.getPopulationLimit(); i++) { [EOL]         population.addChromosome(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3))); [EOL]     } [EOL] } <line_num>: 152,165
public Population nextGeneration() { [EOL]     return null; [EOL] } <line_num>: 175,178
@Test(expected = UnsupportedOperationException.class) [EOL] public void testIterator() { [EOL]     final ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome>(); [EOL]     chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3))); [EOL]     chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3))); [EOL]     chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3))); [EOL]     final ListPopulation population = new ListPopulation(10) { [EOL]  [EOL]         public Population nextGeneration() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     population.addChromosomes(chromosomes); [EOL]     final Iterator<Chromosome> iter = population.iterator(); [EOL]     while (iter.hasNext()) { [EOL]         iter.next(); [EOL]         iter.remove(); [EOL]     } [EOL] } <line_num>: 167,188
public Population nextGeneration() { [EOL]     return null; [EOL] } <line_num>: 198,201
@Test(expected = NumberIsTooSmallException.class) [EOL] public void testSetPopulationLimitTooSmall() { [EOL]     final ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome>(); [EOL]     chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3))); [EOL]     chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3))); [EOL]     chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3))); [EOL]     final ListPopulation population = new ListPopulation(chromosomes, 3) { [EOL]  [EOL]         public Population nextGeneration() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     population.setPopulationLimit(2); [EOL] } <line_num>: 190,205
