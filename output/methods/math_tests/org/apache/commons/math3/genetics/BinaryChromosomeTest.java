@Test [EOL] public void testInvalidConstructor() { [EOL]     Integer[][] reprs = new Integer[][] { new Integer[] { 0, 1, 0, 1, 2 }, new Integer[] { 0, 1, 0, 1, -1 } }; [EOL]     for (Integer[] repr : reprs) { [EOL]         try { [EOL]             new DummyBinaryChromosome(repr); [EOL]             Assert.fail("Exception not caught"); [EOL]         } catch (IllegalArgumentException e) { [EOL]         } [EOL]     } [EOL] } <line_num>: 25,40
@Test [EOL] public void testRandomConstructor() { [EOL]     for (int i = 0; i < 20; i++) { [EOL]         new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(10)); [EOL]     } [EOL] } <line_num>: 42,47
@Test [EOL] public void testIsSame() { [EOL]     Chromosome c1 = new DummyBinaryChromosome(new Integer[] { 0, 1, 0, 1, 0, 1 }); [EOL]     Chromosome c2 = new DummyBinaryChromosome(new Integer[] { 0, 1, 1, 0, 1 }); [EOL]     Chromosome c3 = new DummyBinaryChromosome(new Integer[] { 0, 1, 0, 1, 0, 1, 1 }); [EOL]     Chromosome c4 = new DummyBinaryChromosome(new Integer[] { 1, 1, 0, 1, 0, 1 }); [EOL]     Chromosome c5 = new DummyBinaryChromosome(new Integer[] { 0, 1, 0, 1, 0, 0 }); [EOL]     Chromosome c6 = new DummyBinaryChromosome(new Integer[] { 0, 1, 0, 1, 0, 1 }); [EOL]     Assert.assertFalse(c1.isSame(c2)); [EOL]     Assert.assertFalse(c1.isSame(c3)); [EOL]     Assert.assertFalse(c1.isSame(c4)); [EOL]     Assert.assertFalse(c1.isSame(c5)); [EOL]     Assert.assertTrue(c1.isSame(c6)); [EOL] } <line_num>: 49,63
