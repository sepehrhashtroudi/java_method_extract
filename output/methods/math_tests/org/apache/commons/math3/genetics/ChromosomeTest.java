public DummyChromosome(final int repr) { [EOL]     this.repr = repr; [EOL] } <line_num>: 55,57
public double fitness() { [EOL]     return 0; [EOL] } <line_num>: 31,33
public double fitness() { [EOL]     return 10; [EOL] } <line_num>: 36,38
public double fitness() { [EOL]     return 10; [EOL] } <line_num>: 41,43
@Test [EOL] public void testCompareTo() { [EOL]     Chromosome c1 = new Chromosome() { [EOL]  [EOL]         public double fitness() { [EOL]             return 0; [EOL]         } [EOL]     }; [EOL]     Chromosome c2 = new Chromosome() { [EOL]  [EOL]         public double fitness() { [EOL]             return 10; [EOL]         } [EOL]     }; [EOL]     Chromosome c3 = new Chromosome() { [EOL]  [EOL]         public double fitness() { [EOL]             return 10; [EOL]         } [EOL]     }; [EOL]     Assert.assertTrue(c1.compareTo(c2) < 0); [EOL]     Assert.assertTrue(c2.compareTo(c1) > 0); [EOL]     Assert.assertEquals(0, c3.compareTo(c2)); [EOL]     Assert.assertEquals(0, c2.compareTo(c3)); [EOL] } <line_num>: 28,50
@Override [EOL] protected boolean isSame(Chromosome another) { [EOL]     return ((DummyChromosome) another).repr == repr; [EOL] } <line_num>: 58,61
public double fitness() { [EOL]     return 1; [EOL] } <line_num>: 67,69
public double fitness() { [EOL]     return 2; [EOL] } <line_num>: 72,74
public double fitness() { [EOL]     return 3; [EOL] } <line_num>: 77,79
public double fitness() { [EOL]     return 5; [EOL] } <line_num>: 82,84
public double fitness() { [EOL]     return 15; [EOL] } <line_num>: 87,89
public Population nextGeneration() { [EOL]     return null; [EOL] } <line_num>: 97,100
@Test [EOL] public void testFindSameChromosome() { [EOL]     Chromosome c1 = new DummyChromosome(1) { [EOL]  [EOL]         public double fitness() { [EOL]             return 1; [EOL]         } [EOL]     }; [EOL]     Chromosome c2 = new DummyChromosome(2) { [EOL]  [EOL]         public double fitness() { [EOL]             return 2; [EOL]         } [EOL]     }; [EOL]     Chromosome c3 = new DummyChromosome(3) { [EOL]  [EOL]         public double fitness() { [EOL]             return 3; [EOL]         } [EOL]     }; [EOL]     Chromosome c4 = new DummyChromosome(1) { [EOL]  [EOL]         public double fitness() { [EOL]             return 5; [EOL]         } [EOL]     }; [EOL]     Chromosome c5 = new DummyChromosome(15) { [EOL]  [EOL]         public double fitness() { [EOL]             return 15; [EOL]         } [EOL]     }; [EOL]     List<Chromosome> popChr = new ArrayList<Chromosome>(); [EOL]     popChr.add(c1); [EOL]     popChr.add(c2); [EOL]     popChr.add(c3); [EOL]     Population pop = new ListPopulation(popChr, 3) { [EOL]  [EOL]         public Population nextGeneration() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     Assert.assertNull(c5.findSameChromosome(pop)); [EOL]     Assert.assertEquals(c1, c4.findSameChromosome(pop)); [EOL]     c4.searchForFitnessUpdate(pop); [EOL]     Assert.assertEquals(1, c4.getFitness(), 0); [EOL] } <line_num>: 64,108
