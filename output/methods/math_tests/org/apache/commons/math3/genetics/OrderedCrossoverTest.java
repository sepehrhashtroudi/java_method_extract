@Test [EOL] public void testCrossover() { [EOL]     final Integer[] p1 = new Integer[] { 8, 4, 7, 3, 6, 2, 5, 1, 9, 0 }; [EOL]     final Integer[] p2 = new Integer[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }; [EOL]     final DummyListChromosome p1c = new DummyListChromosome(p1); [EOL]     final DummyListChromosome p2c = new DummyListChromosome(p2); [EOL]     final CrossoverPolicy cp = new OrderedCrossover<Integer>(); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         final Set<Integer> parentSet1 = new HashSet<Integer>(Arrays.asList(p1)); [EOL]         final Set<Integer> parentSet2 = new HashSet<Integer>(Arrays.asList(p2)); [EOL]         final ChromosomePair pair = cp.crossover(p1c, p2c); [EOL]         final Integer[] c1 = ((DummyListChromosome) pair.getFirst()).getRepresentation().toArray(new Integer[p1.length]); [EOL]         final Integer[] c2 = ((DummyListChromosome) pair.getSecond()).getRepresentation().toArray(new Integer[p2.length]); [EOL]         Assert.assertNotSame(p1c, pair.getFirst()); [EOL]         Assert.assertNotSame(p2c, pair.getSecond()); [EOL]         for (int j = 0; j < c1.length; j++) { [EOL]             Assert.assertTrue(parentSet1.contains(c1[j])); [EOL]             parentSet1.remove(c1[j]); [EOL]             Assert.assertTrue(parentSet2.contains(c2[j])); [EOL]             parentSet2.remove(c2[j]); [EOL]         } [EOL]     } [EOL] } <line_num>: 30,59
@Test(expected = DimensionMismatchException.class) [EOL] public void testCrossoverDimensionMismatchException() { [EOL]     final Integer[] p1 = new Integer[] { 1, 0, 1, 0, 0, 1, 0, 1, 1 }; [EOL]     final Integer[] p2 = new Integer[] { 0, 1, 1, 0, 1 }; [EOL]     final BinaryChromosome p1c = new DummyBinaryChromosome(p1); [EOL]     final BinaryChromosome p2c = new DummyBinaryChromosome(p2); [EOL]     final CrossoverPolicy cp = new OrderedCrossover<Integer>(); [EOL]     cp.crossover(p1c, p2c); [EOL] } <line_num>: 61,71
public double fitness() { [EOL]     return 0; [EOL] } <line_num>: 78,81
@Test(expected = MathIllegalArgumentException.class) [EOL] public void testCrossoverInvalidFixedLengthChromosomeFirst() { [EOL]     final Integer[] p1 = new Integer[] { 1, 0, 1, 0, 0, 1, 0, 1, 1 }; [EOL]     final BinaryChromosome p1c = new DummyBinaryChromosome(p1); [EOL]     final Chromosome p2c = new Chromosome() { [EOL]  [EOL]         public double fitness() { [EOL]             return 0; [EOL]         } [EOL]     }; [EOL]     final CrossoverPolicy cp = new OrderedCrossover<Integer>(); [EOL]     cp.crossover(p1c, p2c); [EOL] } <line_num>: 73,86
public double fitness() { [EOL]     return 0; [EOL] } <line_num>: 93,96
@Test(expected = MathIllegalArgumentException.class) [EOL] public void testCrossoverInvalidFixedLengthChromosomeSecond() { [EOL]     final Integer[] p1 = new Integer[] { 1, 0, 1, 0, 0, 1, 0, 1, 1 }; [EOL]     final BinaryChromosome p2c = new DummyBinaryChromosome(p1); [EOL]     final Chromosome p1c = new Chromosome() { [EOL]  [EOL]         public double fitness() { [EOL]             return 0; [EOL]         } [EOL]     }; [EOL]     final CrossoverPolicy cp = new OrderedCrossover<Integer>(); [EOL]     cp.crossover(p1c, p2c); [EOL] } <line_num>: 88,101
