public void addChromosome(final Chromosome chromosome) { [EOL] } <line_num>: 31,33
public Chromosome getFittestChromosome() { [EOL]     return null; [EOL] } <line_num>: 34,37
public int getPopulationLimit() { [EOL]     return 0; [EOL] } <line_num>: 38,41
public int getPopulationSize() { [EOL]     return 0; [EOL] } <line_num>: 42,45
public Population nextGeneration() { [EOL]     return null; [EOL] } <line_num>: 46,49
public Iterator<Chromosome> iterator() { [EOL]     return null; [EOL] } <line_num>: 50,53
@Test [EOL] public void testIsSatisfied() { [EOL]     final Population pop = new Population() { [EOL]  [EOL]         public void addChromosome(final Chromosome chromosome) { [EOL]         } [EOL]  [EOL]         public Chromosome getFittestChromosome() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public int getPopulationLimit() { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public int getPopulationSize() { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public Population nextGeneration() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Iterator<Chromosome> iterator() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     final long start = System.nanoTime(); [EOL]     final long duration = 3; [EOL]     final FixedElapsedTime tec = new FixedElapsedTime(duration, TimeUnit.SECONDS); [EOL]     while (!tec.isSatisfied(pop)) { [EOL]         try { [EOL]             Thread.sleep(50); [EOL]         } catch (InterruptedException e) { [EOL]         } [EOL]     } [EOL]     final long end = System.nanoTime(); [EOL]     final long elapsedTime = end - start; [EOL]     final long diff = FastMath.abs(elapsedTime - TimeUnit.SECONDS.toNanos(duration)); [EOL]     Assert.assertTrue(diff < TimeUnit.MILLISECONDS.toNanos(100)); [EOL] } <line_num>: 28,73
