public DummyCountingBinaryChromosome(List<Integer> representation) { [EOL]     super(representation); [EOL] } <line_num>: 85,87
@Test [EOL] public void testFitnessCaching() { [EOL]     GeneticAlgorithm ga = new GeneticAlgorithm(new OnePointCrossover<Integer>(), CROSSOVER_RATE, new BinaryMutation(), MUTATION_RATE, new TournamentSelection(TOURNAMENT_ARITY)); [EOL]     Population initial = randomPopulation(); [EOL]     StoppingCondition stopCond = new FixedGenerationCount(NUM_GENERATIONS); [EOL]     ga.evolve(initial, stopCond); [EOL]     int neededCalls = POPULATION_SIZE + (NUM_GENERATIONS - 1) * (int) (POPULATION_SIZE * (1.0 - ELITISM_RATE)); [EOL]     Assert.assertTrue(fitnessCalls <= neededCalls); [EOL] } <line_num>: 43,67
private static ElitisticListPopulation randomPopulation() { [EOL]     List<Chromosome> popList = new LinkedList<Chromosome>(); [EOL]     for (int i = 0; i < POPULATION_SIZE; i++) { [EOL]         BinaryChromosome randChrom = new DummyCountingBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(DIMENSION)); [EOL]         popList.add(randChrom); [EOL]     } [EOL]     return new ElitisticListPopulation(popList, popList.size(), ELITISM_RATE); [EOL] } <line_num>: 73,81
@Override [EOL] public double fitness() { [EOL]     fitnessCalls++; [EOL]     return 0; [EOL] } <line_num>: 89,93
