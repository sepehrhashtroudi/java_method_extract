@Test [EOL] public void test8Points() { [EOL]     checkAllTransforms(new int[] { 1, 4, -2, 3, 0, 1, 4, -1 }, new int[] { 10, -4, 2, -4, 2, -12, 6, 8 }); [EOL] } <line_num>: 33,37
@Test [EOL] public void test4Points() { [EOL]     checkAllTransforms(new int[] { 1, 2, 3, 4 }, new int[] { 10, -2, -4, 0 }); [EOL] } <line_num>: 42,46
@Test [EOL] public void testNoIntInverse() { [EOL]     FastHadamardTransformer transformer = new FastHadamardTransformer(); [EOL]     double[] x = transformer.transform(new double[] { 0, 1, 0, 1 }, TransformType.INVERSE); [EOL]     Assert.assertEquals(0.5, x[0], 0); [EOL]     Assert.assertEquals(-0.5, x[1], 0); [EOL]     Assert.assertEquals(0.0, x[2], 0); [EOL]     Assert.assertEquals(0.0, x[3], 0); [EOL] } <line_num>: 51,59
@Test [EOL] public void test3Points() { [EOL]     try { [EOL]         new FastHadamardTransformer().transform(new double[3], TransformType.FORWARD); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (IllegalArgumentException iae) { [EOL]     } [EOL] } <line_num>: 64,72
private void checkAllTransforms(int[] x, int[] y) { [EOL]     checkDoubleTransform(x, y); [EOL]     checkInverseDoubleTransform(x, y); [EOL]     checkIntTransform(x, y); [EOL] } <line_num>: 74,78
private void checkDoubleTransform(int[] x, int[] y) { [EOL]     FastHadamardTransformer transformer = new FastHadamardTransformer(); [EOL]     double[] dX = new double[x.length]; [EOL]     for (int i = 0; i < dX.length; ++i) { [EOL]         dX[i] = x[i]; [EOL]     } [EOL]     double[] dResult = transformer.transform(dX, TransformType.FORWARD); [EOL]     for (int i = 0; i < dResult.length; i++) { [EOL]         Assert.assertTrue(Precision.equals(y[i], dResult[i], 1)); [EOL]     } [EOL] } <line_num>: 80,94
private void checkIntTransform(int[] x, int[] y) { [EOL]     FastHadamardTransformer transformer = new FastHadamardTransformer(); [EOL]     int[] iResult = transformer.transform(x); [EOL]     for (int i = 0; i < iResult.length; i++) { [EOL]         Assert.assertEquals(y[i], iResult[i]); [EOL]     } [EOL] } <line_num>: 96,107
private void checkInverseDoubleTransform(int[] x, int[] y) { [EOL]     FastHadamardTransformer transformer = new FastHadamardTransformer(); [EOL]     double[] dY = new double[y.length]; [EOL]     for (int i = 0; i < dY.length; ++i) { [EOL]         dY[i] = y[i]; [EOL]     } [EOL]     double[] dResult = transformer.transform(dY, TransformType.INVERSE); [EOL]     for (int i = 0; i < dResult.length; i++) { [EOL]         Assert.assertTrue(Precision.equals(x[i], dResult[i], 1)); [EOL]     } [EOL] } <line_num>: 109,124
