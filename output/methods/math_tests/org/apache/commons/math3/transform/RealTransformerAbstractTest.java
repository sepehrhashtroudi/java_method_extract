abstract RealTransformer createRealTransformer(); <line_num>: 51,51
abstract int getInvalidDataSize(int i); <line_num>: 61,61
abstract int getNumberOfInvalidDataSizes(); <line_num>: 71,71
abstract int getNumberOfValidDataSizes(); <line_num>: 78,78
abstract double getRelativeTolerance(int i); <line_num>: 87,87
abstract int getValidDataSize(int i); <line_num>: 98,98
abstract UnivariateFunction getValidFunction(); <line_num>: 110,110
abstract double getValidLowerBound(); <line_num>: 122,122
abstract double getValidUpperBound(); <line_num>: 134,134
abstract double[] transform(double[] x, TransformType type); <line_num>: 143,143
@Test [EOL] public void testTransformRealInvalidDataSize() { [EOL]     final TransformType[] type = TransformType.values(); [EOL]     final RealTransformer transformer = createRealTransformer(); [EOL]     for (int i = 0; i < getNumberOfInvalidDataSizes(); i++) { [EOL]         final int n = getInvalidDataSize(i); [EOL]         for (int j = 0; j < type.length; j++) { [EOL]             try { [EOL]                 transformer.transform(createRealData(n), type[j]); [EOL]                 Assert.fail(type[j] + ", " + n); [EOL]             } catch (MathIllegalArgumentException e) { [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 153,168
@Test [EOL] public void testTransformFunctionInvalidDataSize() { [EOL]     final TransformType[] type = TransformType.values(); [EOL]     final RealTransformer transformer = createRealTransformer(); [EOL]     final UnivariateFunction f = getValidFunction(); [EOL]     final double a = getValidLowerBound(); [EOL]     final double b = getValidUpperBound(); [EOL]     for (int i = 0; i < getNumberOfInvalidDataSizes(); i++) { [EOL]         final int n = getInvalidDataSize(i); [EOL]         for (int j = 0; j < type.length; j++) { [EOL]             try { [EOL]                 transformer.transform(f, a, b, n, type[j]); [EOL]                 Assert.fail(type[j] + ", " + n); [EOL]             } catch (MathIllegalArgumentException e) { [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 175,193
@Test [EOL] public void testTransformFunctionNotStrictlyPositiveNumberOfSamples() { [EOL]     final TransformType[] type = TransformType.values(); [EOL]     final RealTransformer transformer = createRealTransformer(); [EOL]     final UnivariateFunction f = getValidFunction(); [EOL]     final double a = getValidLowerBound(); [EOL]     final double b = getValidUpperBound(); [EOL]     for (int i = 0; i < getNumberOfValidDataSizes(); i++) { [EOL]         final int n = getValidDataSize(i); [EOL]         for (int j = 0; j < type.length; j++) { [EOL]             try { [EOL]                 transformer.transform(f, a, b, -n, type[j]); [EOL]                 Assert.fail(type[j] + ", " + (-n)); [EOL]             } catch (NotStrictlyPositiveException e) { [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 200,218
@Test [EOL] public void testTransformFunctionInvalidBounds() { [EOL]     final TransformType[] type = TransformType.values(); [EOL]     final RealTransformer transformer = createRealTransformer(); [EOL]     final UnivariateFunction f = getValidFunction(); [EOL]     final double a = getValidLowerBound(); [EOL]     final double b = getValidUpperBound(); [EOL]     for (int i = 0; i < getNumberOfValidDataSizes(); i++) { [EOL]         final int n = getValidDataSize(i); [EOL]         for (int j = 0; j < type.length; j++) { [EOL]             try { [EOL]                 transformer.transform(f, b, a, n, type[j]); [EOL]                 Assert.fail(type[j] + ", " + b + ", " + a); [EOL]             } catch (NumberIsTooLargeException e) { [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 225,243
@Test [EOL] public void testTransformReal() { [EOL]     final TransformType[] type = TransformType.values(); [EOL]     for (int i = 0; i < getNumberOfValidDataSizes(); i++) { [EOL]         final int n = getValidDataSize(i); [EOL]         final double tol = getRelativeTolerance(i); [EOL]         for (int j = 0; j < type.length; j++) { [EOL]             doTestTransformReal(n, tol, type[j]); [EOL]         } [EOL]     } [EOL] } <line_num>: 260,270
@Test [EOL] public void testTransformFunction() { [EOL]     final TransformType[] type = TransformType.values(); [EOL]     for (int i = 0; i < getNumberOfValidDataSizes(); i++) { [EOL]         final int n = getValidDataSize(i); [EOL]         final double tol = getRelativeTolerance(i); [EOL]         for (int j = 0; j < type.length; j++) { [EOL]             doTestTransformFunction(n, tol, type[j]); [EOL]         } [EOL]     } [EOL] } <line_num>: 283,293
double[] createRealData(final int n) { [EOL]     final Random random = new Random(SEED); [EOL]     final double[] data = new double[n]; [EOL]     for (int i = 0; i < n; i++) { [EOL]         data[i] = 2.0 * random.nextDouble() - 1.0; [EOL]     } [EOL]     return data; [EOL] } <line_num>: 306,313
private void doTestTransformReal(final int n, final double tol, final TransformType type) { [EOL]     final RealTransformer transformer = createRealTransformer(); [EOL]     final double[] x = createRealData(n); [EOL]     final double[] expected = transform(x, type); [EOL]     final double[] actual = transformer.transform(x, type); [EOL]     for (int i = 0; i < n; i++) { [EOL]         final String msg = String.format("%d, %d", n, i); [EOL]         final double delta = tol * FastMath.abs(expected[i]); [EOL]         Assert.assertEquals(msg, expected[i], actual[i], delta); [EOL]     } [EOL] } <line_num>: 319,330
private void doTestTransformFunction(final int n, final double tol, final TransformType type) { [EOL]     final RealTransformer transformer = createRealTransformer(); [EOL]     final UnivariateFunction f = getValidFunction(); [EOL]     final double a = getValidLowerBound(); [EOL]     final double b = getValidUpperBound(); [EOL]     final double[] x = createRealData(n); [EOL]     for (int i = 0; i < n; i++) { [EOL]         final double t = a + i * (b - a) / n; [EOL]         x[i] = f.value(t); [EOL]     } [EOL]     final double[] expected = transform(x, type); [EOL]     final double[] actual = transformer.transform(f, a, b, n, type); [EOL]     for (int i = 0; i < n; i++) { [EOL]         final String msg = String.format("%d, %d", n, i); [EOL]         final double delta = tol * FastMath.abs(expected[i]); [EOL]         Assert.assertEquals(msg, expected[i], actual[i], delta); [EOL]     } [EOL] } <line_num>: 332,350
