@Test [EOL] public void testTransformComplexSizeNotAPowerOfTwo() { [EOL]     final int n = 127; [EOL]     final Complex[] x = createComplexData(n); [EOL]     final DftNormalization[] norm; [EOL]     norm = DftNormalization.values(); [EOL]     final TransformType[] type; [EOL]     type = TransformType.values(); [EOL]     for (int i = 0; i < norm.length; i++) { [EOL]         for (int j = 0; j < type.length; j++) { [EOL]             final FastFourierTransformer fft; [EOL]             fft = new FastFourierTransformer(norm[i]); [EOL]             try { [EOL]                 fft.transform(x, type[j]); [EOL]                 Assert.fail(norm[i] + ", " + type[j] + ": MathIllegalArgumentException was expected"); [EOL]             } catch (MathIllegalArgumentException e) { [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 48,69
@Test [EOL] public void testTransformRealSizeNotAPowerOfTwo() { [EOL]     final int n = 127; [EOL]     final double[] x = createRealData(n); [EOL]     final DftNormalization[] norm; [EOL]     norm = DftNormalization.values(); [EOL]     final TransformType[] type; [EOL]     type = TransformType.values(); [EOL]     for (int i = 0; i < norm.length; i++) { [EOL]         for (int j = 0; j < type.length; j++) { [EOL]             final FastFourierTransformer fft; [EOL]             fft = new FastFourierTransformer(norm[i]); [EOL]             try { [EOL]                 fft.transform(x, type[j]); [EOL]                 Assert.fail(norm[i] + ", " + type[j] + ": MathIllegalArgumentException was expected"); [EOL]             } catch (MathIllegalArgumentException e) { [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 71,92
@Test [EOL] public void testTransformFunctionSizeNotAPowerOfTwo() { [EOL]     final int n = 127; [EOL]     final UnivariateFunction f = new Sin(); [EOL]     final DftNormalization[] norm; [EOL]     norm = DftNormalization.values(); [EOL]     final TransformType[] type; [EOL]     type = TransformType.values(); [EOL]     for (int i = 0; i < norm.length; i++) { [EOL]         for (int j = 0; j < type.length; j++) { [EOL]             final FastFourierTransformer fft; [EOL]             fft = new FastFourierTransformer(norm[i]); [EOL]             try { [EOL]                 fft.transform(f, 0.0, Math.PI, n, type[j]); [EOL]                 Assert.fail(norm[i] + ", " + type[j] + ": MathIllegalArgumentException was expected"); [EOL]             } catch (MathIllegalArgumentException e) { [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 94,115
@Test [EOL] public void testTransformFunctionNotStrictlyPositiveNumberOfSamples() { [EOL]     final int n = -128; [EOL]     final UnivariateFunction f = new Sin(); [EOL]     final DftNormalization[] norm; [EOL]     norm = DftNormalization.values(); [EOL]     final TransformType[] type; [EOL]     type = TransformType.values(); [EOL]     for (int i = 0; i < norm.length; i++) { [EOL]         for (int j = 0; j < type.length; j++) { [EOL]             final FastFourierTransformer fft; [EOL]             fft = new FastFourierTransformer(norm[i]); [EOL]             try { [EOL]                 fft.transform(f, 0.0, Math.PI, n, type[j]); [EOL]                 fft.transform(f, 0.0, Math.PI, n, type[j]); [EOL]                 Assert.fail(norm[i] + ", " + type[j] + ": NotStrictlyPositiveException was expected"); [EOL]             } catch (NotStrictlyPositiveException e) { [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 117,139
@Test [EOL] public void testTransformFunctionInvalidBounds() { [EOL]     final int n = 128; [EOL]     final UnivariateFunction f = new Sin(); [EOL]     final DftNormalization[] norm; [EOL]     norm = DftNormalization.values(); [EOL]     final TransformType[] type; [EOL]     type = TransformType.values(); [EOL]     for (int i = 0; i < norm.length; i++) { [EOL]         for (int j = 0; j < type.length; j++) { [EOL]             final FastFourierTransformer fft; [EOL]             fft = new FastFourierTransformer(norm[i]); [EOL]             try { [EOL]                 fft.transform(f, Math.PI, 0.0, n, type[j]); [EOL]                 Assert.fail(norm[i] + ", " + type[j] + ": NumberIsTooLargeException was expected"); [EOL]             } catch (NumberIsTooLargeException e) { [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 141,162
private static Complex[] createComplexData(final int n) { [EOL]     final Random random = new Random(SEED); [EOL]     final Complex[] data = new Complex[n]; [EOL]     for (int i = 0; i < n; i++) { [EOL]         final double re = 2.0 * random.nextDouble() - 1.0; [EOL]         final double im = 2.0 * random.nextDouble() - 1.0; [EOL]         data[i] = new Complex(re, im); [EOL]     } [EOL]     return data; [EOL] } <line_num>: 168,177
private static double[] createRealData(final int n) { [EOL]     final Random random = new Random(SEED); [EOL]     final double[] data = new double[n]; [EOL]     for (int i = 0; i < n; i++) { [EOL]         data[i] = 2.0 * random.nextDouble() - 1.0; [EOL]     } [EOL]     return data; [EOL] } <line_num>: 179,186
private static Complex[] dft(final Complex[] x, final int sgn) { [EOL]     final int n = x.length; [EOL]     final double[] cos = new double[n]; [EOL]     final double[] sin = new double[n]; [EOL]     final Complex[] y = new Complex[n]; [EOL]     for (int i = 0; i < n; i++) { [EOL]         final double arg = 2.0 * FastMath.PI * i / n; [EOL]         cos[i] = FastMath.cos(arg); [EOL]         sin[i] = FastMath.sin(arg); [EOL]     } [EOL]     for (int i = 0; i < n; i++) { [EOL]         double yr = 0.0; [EOL]         double yi = 0.0; [EOL]         for (int j = 0; j < n; j++) { [EOL]             final int index = (i * j) % n; [EOL]             final double c = cos[index]; [EOL]             final double s = sin[index]; [EOL]             final double xr = x[j].getReal(); [EOL]             final double xi = x[j].getImaginary(); [EOL]             yr += c * xr - sgn * s * xi; [EOL]             yi += sgn * s * xr + c * xi; [EOL]         } [EOL]         y[i] = new Complex(yr, yi); [EOL]     } [EOL]     return y; [EOL] } <line_num>: 189,214
private static void doTestTransformComplex(final int n, final double tol, final DftNormalization normalization, final TransformType type) { [EOL]     final FastFourierTransformer fft; [EOL]     fft = new FastFourierTransformer(normalization); [EOL]     final Complex[] x = createComplexData(n); [EOL]     final Complex[] expected; [EOL]     final double s; [EOL]     if (type == TransformType.FORWARD) { [EOL]         expected = dft(x, -1); [EOL]         if (normalization == DftNormalization.STANDARD) { [EOL]             s = 1.0; [EOL]         } else { [EOL]             s = 1.0 / FastMath.sqrt(n); [EOL]         } [EOL]     } else { [EOL]         expected = dft(x, 1); [EOL]         if (normalization == DftNormalization.STANDARD) { [EOL]             s = 1.0 / n; [EOL]         } else { [EOL]             s = 1.0 / FastMath.sqrt(n); [EOL]         } [EOL]     } [EOL]     final Complex[] actual = fft.transform(x, type); [EOL]     for (int i = 0; i < n; i++) { [EOL]         final String msg; [EOL]         msg = String.format("%s, %s, %d, %d", normalization, type, n, i); [EOL]         final double re = s * expected[i].getReal(); [EOL]         Assert.assertEquals(msg, re, actual[i].getReal(), tol * FastMath.abs(re)); [EOL]         final double im = s * expected[i].getImaginary(); [EOL]         Assert.assertEquals(msg, im, actual[i].getImaginary(), tol * FastMath.abs(re)); [EOL]     } [EOL] } <line_num>: 216,250
private static void doTestTransformReal(final int n, final double tol, final DftNormalization normalization, final TransformType type) { [EOL]     final FastFourierTransformer fft; [EOL]     fft = new FastFourierTransformer(normalization); [EOL]     final double[] x = createRealData(n); [EOL]     final Complex[] xc = new Complex[n]; [EOL]     for (int i = 0; i < n; i++) { [EOL]         xc[i] = new Complex(x[i], 0.0); [EOL]     } [EOL]     final Complex[] expected; [EOL]     final double s; [EOL]     if (type == TransformType.FORWARD) { [EOL]         expected = dft(xc, -1); [EOL]         if (normalization == DftNormalization.STANDARD) { [EOL]             s = 1.0; [EOL]         } else { [EOL]             s = 1.0 / FastMath.sqrt(n); [EOL]         } [EOL]     } else { [EOL]         expected = dft(xc, 1); [EOL]         if (normalization == DftNormalization.STANDARD) { [EOL]             s = 1.0 / n; [EOL]         } else { [EOL]             s = 1.0 / FastMath.sqrt(n); [EOL]         } [EOL]     } [EOL]     final Complex[] actual = fft.transform(x, type); [EOL]     for (int i = 0; i < n; i++) { [EOL]         final String msg; [EOL]         msg = String.format("%s, %s, %d, %d", normalization, type, n, i); [EOL]         final double re = s * expected[i].getReal(); [EOL]         Assert.assertEquals(msg, re, actual[i].getReal(), tol * FastMath.abs(re)); [EOL]         final double im = s * expected[i].getImaginary(); [EOL]         Assert.assertEquals(msg, im, actual[i].getImaginary(), tol * FastMath.abs(re)); [EOL]     } [EOL] } <line_num>: 252,290
private static void doTestTransformFunction(final UnivariateFunction f, final double min, final double max, int n, final double tol, final DftNormalization normalization, final TransformType type) { [EOL]     final FastFourierTransformer fft; [EOL]     fft = new FastFourierTransformer(normalization); [EOL]     final Complex[] x = new Complex[n]; [EOL]     for (int i = 0; i < n; i++) { [EOL]         final double t = min + i * (max - min) / n; [EOL]         x[i] = new Complex(f.value(t)); [EOL]     } [EOL]     final Complex[] expected; [EOL]     final double s; [EOL]     if (type == TransformType.FORWARD) { [EOL]         expected = dft(x, -1); [EOL]         if (normalization == DftNormalization.STANDARD) { [EOL]             s = 1.0; [EOL]         } else { [EOL]             s = 1.0 / FastMath.sqrt(n); [EOL]         } [EOL]     } else { [EOL]         expected = dft(x, 1); [EOL]         if (normalization == DftNormalization.STANDARD) { [EOL]             s = 1.0 / n; [EOL]         } else { [EOL]             s = 1.0 / FastMath.sqrt(n); [EOL]         } [EOL]     } [EOL]     final Complex[] actual = fft.transform(f, min, max, n, type); [EOL]     for (int i = 0; i < n; i++) { [EOL]         final String msg = String.format("%d, %d", n, i); [EOL]         final double re = s * expected[i].getReal(); [EOL]         Assert.assertEquals(msg, re, actual[i].getReal(), tol * FastMath.abs(re)); [EOL]         final double im = s * expected[i].getImaginary(); [EOL]         Assert.assertEquals(msg, im, actual[i].getImaginary(), tol * FastMath.abs(re)); [EOL]     } [EOL] } <line_num>: 292,330
@Test [EOL] public void testTransformComplex() { [EOL]     final DftNormalization[] norm; [EOL]     norm = DftNormalization.values(); [EOL]     final TransformType[] type; [EOL]     type = TransformType.values(); [EOL]     for (int i = 0; i < norm.length; i++) { [EOL]         for (int j = 0; j < type.length; j++) { [EOL]             doTestTransformComplex(2, 1.0E-15, norm[i], type[j]); [EOL]             doTestTransformComplex(4, 1.0E-14, norm[i], type[j]); [EOL]             doTestTransformComplex(8, 1.0E-14, norm[i], type[j]); [EOL]             doTestTransformComplex(16, 1.0E-13, norm[i], type[j]); [EOL]             doTestTransformComplex(32, 1.0E-13, norm[i], type[j]); [EOL]             doTestTransformComplex(64, 1.0E-12, norm[i], type[j]); [EOL]             doTestTransformComplex(128, 1.0E-12, norm[i], type[j]); [EOL]         } [EOL]     } [EOL] } <line_num>: 336,353
@Test [EOL] public void testStandardTransformReal() { [EOL]     final DftNormalization[] norm; [EOL]     norm = DftNormalization.values(); [EOL]     final TransformType[] type; [EOL]     type = TransformType.values(); [EOL]     for (int i = 0; i < norm.length; i++) { [EOL]         for (int j = 0; j < type.length; j++) { [EOL]             doTestTransformReal(2, 1.0E-15, norm[i], type[j]); [EOL]             doTestTransformReal(4, 1.0E-14, norm[i], type[j]); [EOL]             doTestTransformReal(8, 1.0E-14, norm[i], type[j]); [EOL]             doTestTransformReal(16, 1.0E-13, norm[i], type[j]); [EOL]             doTestTransformReal(32, 1.0E-13, norm[i], type[j]); [EOL]             doTestTransformReal(64, 1.0E-13, norm[i], type[j]); [EOL]             doTestTransformReal(128, 1.0E-11, norm[i], type[j]); [EOL]         } [EOL]     } [EOL] } <line_num>: 355,372
@Test [EOL] public void testStandardTransformFunction() { [EOL]     final UnivariateFunction f = new Sinc(); [EOL]     final double min = -FastMath.PI; [EOL]     final double max = FastMath.PI; [EOL]     final DftNormalization[] norm; [EOL]     norm = DftNormalization.values(); [EOL]     final TransformType[] type; [EOL]     type = TransformType.values(); [EOL]     for (int i = 0; i < norm.length; i++) { [EOL]         for (int j = 0; j < type.length; j++) { [EOL]             doTestTransformFunction(f, min, max, 2, 1.0E-15, norm[i], type[j]); [EOL]             doTestTransformFunction(f, min, max, 4, 1.0E-14, norm[i], type[j]); [EOL]             doTestTransformFunction(f, min, max, 8, 1.0E-14, norm[i], type[j]); [EOL]             doTestTransformFunction(f, min, max, 16, 1.0E-13, norm[i], type[j]); [EOL]             doTestTransformFunction(f, min, max, 32, 1.0E-13, norm[i], type[j]); [EOL]             doTestTransformFunction(f, min, max, 64, 1.0E-12, norm[i], type[j]); [EOL]             doTestTransformFunction(f, min, max, 128, 1.0E-11, norm[i], type[j]); [EOL]         } [EOL]     } [EOL] } <line_num>: 374,394
@Test [EOL] public void testAdHocData() { [EOL]     FastFourierTransformer transformer; [EOL]     transformer = new FastFourierTransformer(DftNormalization.STANDARD); [EOL]     Complex[] result; [EOL]     double tolerance = 1E-12; [EOL]     double[] x = { 1.3, 2.4, 1.7, 4.1, 2.9, 1.7, 5.1, 2.7 }; [EOL]     Complex[] y = { new Complex(21.9, 0.0), new Complex(-2.09497474683058, 1.91507575950825), new Complex(-2.6, 2.7), new Complex(-1.10502525316942, -4.88492424049175), new Complex(0.1, 0.0), new Complex(-1.10502525316942, 4.88492424049175), new Complex(-2.6, -2.7), new Complex(-2.09497474683058, -1.91507575950825) }; [EOL]     result = transformer.transform(x, TransformType.FORWARD); [EOL]     for (int i = 0; i < result.length; i++) { [EOL]         Assert.assertEquals(y[i].getReal(), result[i].getReal(), tolerance); [EOL]         Assert.assertEquals(y[i].getImaginary(), result[i].getImaginary(), tolerance); [EOL]     } [EOL]     result = transformer.transform(y, TransformType.INVERSE); [EOL]     for (int i = 0; i < result.length; i++) { [EOL]         Assert.assertEquals(x[i], result[i].getReal(), tolerance); [EOL]         Assert.assertEquals(0.0, result[i].getImaginary(), tolerance); [EOL]     } [EOL]     double[] x2 = { 10.4, 21.6, 40.8, 13.6, 23.2, 32.8, 13.6, 19.2 }; [EOL]     TransformUtils.scaleArray(x2, 1.0 / FastMath.sqrt(x2.length)); [EOL]     Complex[] y2 = y; [EOL]     transformer = new FastFourierTransformer(DftNormalization.UNITARY); [EOL]     result = transformer.transform(y2, TransformType.FORWARD); [EOL]     for (int i = 0; i < result.length; i++) { [EOL]         Assert.assertEquals(x2[i], result[i].getReal(), tolerance); [EOL]         Assert.assertEquals(0.0, result[i].getImaginary(), tolerance); [EOL]     } [EOL]     result = transformer.transform(x2, TransformType.INVERSE); [EOL]     for (int i = 0; i < result.length; i++) { [EOL]         Assert.assertEquals(y2[i].getReal(), result[i].getReal(), tolerance); [EOL]         Assert.assertEquals(y2[i].getImaginary(), result[i].getImaginary(), tolerance); [EOL]     } [EOL] } <line_num>: 403,448
@Test [EOL] public void testSinFunction() { [EOL]     UnivariateFunction f = new Sin(); [EOL]     FastFourierTransformer transformer; [EOL]     transformer = new FastFourierTransformer(DftNormalization.STANDARD); [EOL]     Complex[] result; [EOL]     int N = 1 << 8; [EOL]     double min, max, tolerance = 1E-12; [EOL]     min = 0.0; [EOL]     max = 2.0 * FastMath.PI; [EOL]     result = transformer.transform(f, min, max, N, TransformType.FORWARD); [EOL]     Assert.assertEquals(0.0, result[1].getReal(), tolerance); [EOL]     Assert.assertEquals(-(N >> 1), result[1].getImaginary(), tolerance); [EOL]     Assert.assertEquals(0.0, result[N - 1].getReal(), tolerance); [EOL]     Assert.assertEquals(N >> 1, result[N - 1].getImaginary(), tolerance); [EOL]     for (int i = 0; i < N - 1; i += (i == 0 ? 2 : 1)) { [EOL]         Assert.assertEquals(0.0, result[i].getReal(), tolerance); [EOL]         Assert.assertEquals(0.0, result[i].getImaginary(), tolerance); [EOL]     } [EOL]     min = -FastMath.PI; [EOL]     max = FastMath.PI; [EOL]     result = transformer.transform(f, min, max, N, TransformType.INVERSE); [EOL]     Assert.assertEquals(0.0, result[1].getReal(), tolerance); [EOL]     Assert.assertEquals(-0.5, result[1].getImaginary(), tolerance); [EOL]     Assert.assertEquals(0.0, result[N - 1].getReal(), tolerance); [EOL]     Assert.assertEquals(0.5, result[N - 1].getImaginary(), tolerance); [EOL]     for (int i = 0; i < N - 1; i += (i == 0 ? 2 : 1)) { [EOL]         Assert.assertEquals(0.0, result[i].getReal(), tolerance); [EOL]         Assert.assertEquals(0.0, result[i].getImaginary(), tolerance); [EOL]     } [EOL] } <line_num>: 453,482
@Test [EOL] public void test2DData() { [EOL]     FastFourierTransformer transformer; [EOL]     transformer = new FastFourierTransformer(DftNormalization.STANDARD); [EOL]     double tolerance = 1E-12; [EOL]     Complex[][] input = new Complex[][] { new Complex[] { new Complex(1, 0), new Complex(2, 0) }, new Complex[] { new Complex(3, 1), new Complex(4, 2) } }; [EOL]     Complex[][] goodOutput = new Complex[][] { new Complex[] { new Complex(5, 1.5), new Complex(-1, -.5) }, new Complex[] { new Complex(-2, -1.5), new Complex(0, .5) } }; [EOL]     for (int i = 0; i < goodOutput.length; i++) { [EOL]         TransformUtils.scaleArray(goodOutput[i], FastMath.sqrt(goodOutput[i].length) * FastMath.sqrt(goodOutput.length)); [EOL]     } [EOL]     Complex[][] output = (Complex[][]) transformer.mdfft(input, TransformType.FORWARD); [EOL]     Complex[][] output2 = (Complex[][]) transformer.mdfft(output, TransformType.INVERSE); [EOL]     Assert.assertEquals(input.length, output.length); [EOL]     Assert.assertEquals(input.length, output2.length); [EOL]     Assert.assertEquals(input[0].length, output[0].length); [EOL]     Assert.assertEquals(input[0].length, output2[0].length); [EOL]     Assert.assertEquals(input[1].length, output[1].length); [EOL]     Assert.assertEquals(input[1].length, output2[1].length); [EOL]     for (int i = 0; i < input.length; i++) { [EOL]         for (int j = 0; j < input[0].length; j++) { [EOL]             Assert.assertEquals(input[i][j].getImaginary(), output2[i][j].getImaginary(), tolerance); [EOL]             Assert.assertEquals(input[i][j].getReal(), output2[i][j].getReal(), tolerance); [EOL]             Assert.assertEquals(goodOutput[i][j].getImaginary(), output[i][j].getImaginary(), tolerance); [EOL]             Assert.assertEquals(goodOutput[i][j].getReal(), output[i][j].getReal(), tolerance); [EOL]         } [EOL]     } [EOL] } <line_num>: 488,527
@Test [EOL] public void test2DDataUnitary() { [EOL]     FastFourierTransformer transformer; [EOL]     transformer = new FastFourierTransformer(DftNormalization.UNITARY); [EOL]     double tolerance = 1E-12; [EOL]     Complex[][] input = new Complex[][] { new Complex[] { new Complex(1, 0), new Complex(2, 0) }, new Complex[] { new Complex(3, 1), new Complex(4, 2) } }; [EOL]     Complex[][] goodOutput = new Complex[][] { new Complex[] { new Complex(5, 1.5), new Complex(-1, -.5) }, new Complex[] { new Complex(-2, -1.5), new Complex(0, .5) } }; [EOL]     Complex[][] output = (Complex[][]) transformer.mdfft(input, TransformType.FORWARD); [EOL]     Complex[][] output2 = (Complex[][]) transformer.mdfft(output, TransformType.INVERSE); [EOL]     Assert.assertEquals(input.length, output.length); [EOL]     Assert.assertEquals(input.length, output2.length); [EOL]     Assert.assertEquals(input[0].length, output[0].length); [EOL]     Assert.assertEquals(input[0].length, output2[0].length); [EOL]     Assert.assertEquals(input[1].length, output[1].length); [EOL]     Assert.assertEquals(input[1].length, output2[1].length); [EOL]     for (int i = 0; i < input.length; i++) { [EOL]         for (int j = 0; j < input[0].length; j++) { [EOL]             Assert.assertEquals(input[i][j].getImaginary(), output2[i][j].getImaginary(), tolerance); [EOL]             Assert.assertEquals(input[i][j].getReal(), output2[i][j].getReal(), tolerance); [EOL]             Assert.assertEquals(goodOutput[i][j].getImaginary(), output[i][j].getImaginary(), tolerance); [EOL]             Assert.assertEquals(goodOutput[i][j].getReal(), output[i][j].getReal(), tolerance); [EOL]         } [EOL]     } [EOL] } <line_num>: 529,561
