@Test [EOL] public void testFit01() { [EOL]     GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer()); [EOL]     addDatasetToGaussianFitter(DATASET1, fitter); [EOL]     double[] parameters = fitter.fit(); [EOL]     Assert.assertEquals(3496978.1837704973, parameters[0], 1e-4); [EOL]     Assert.assertEquals(4.054933085999146, parameters[1], 1e-4); [EOL]     Assert.assertEquals(0.015039355620304326, parameters[2], 1e-4); [EOL] } <line_num>: 183,192
@Test(expected = MathIllegalArgumentException.class) [EOL] public void testFit02() { [EOL]     GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer()); [EOL]     fitter.fit(); [EOL] } <line_num>: 197,201
@Test(expected = MathIllegalArgumentException.class) [EOL] public void testFit03() { [EOL]     GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer()); [EOL]     addDatasetToGaussianFitter(new double[][] { { 4.0254623, 531026.0 }, { 4.02804905, 664002.0 } }, fitter); [EOL]     fitter.fit(); [EOL] } <line_num>: 206,214
@Test [EOL] public void testFit04() { [EOL]     GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer()); [EOL]     addDatasetToGaussianFitter(DATASET2, fitter); [EOL]     double[] parameters = fitter.fit(); [EOL]     Assert.assertEquals(233003.2967252038, parameters[0], 1e-4); [EOL]     Assert.assertEquals(-10.654887521095983, parameters[1], 1e-4); [EOL]     Assert.assertEquals(4.335937353196641, parameters[2], 1e-4); [EOL] } <line_num>: 219,228
@Test [EOL] public void testFit05() { [EOL]     GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer()); [EOL]     addDatasetToGaussianFitter(DATASET3, fitter); [EOL]     double[] parameters = fitter.fit(); [EOL]     Assert.assertEquals(283863.81929180305, parameters[0], 1e-4); [EOL]     Assert.assertEquals(-13.29641995105174, parameters[1], 1e-4); [EOL]     Assert.assertEquals(1.7297330293549908, parameters[2], 1e-4); [EOL] } <line_num>: 233,242
@Test [EOL] public void testFit06() { [EOL]     GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer()); [EOL]     addDatasetToGaussianFitter(DATASET4, fitter); [EOL]     double[] parameters = fitter.fit(); [EOL]     Assert.assertEquals(285250.66754309234, parameters[0], 1e-4); [EOL]     Assert.assertEquals(-13.528375695228455, parameters[1], 1e-4); [EOL]     Assert.assertEquals(1.5204344894331614, parameters[2], 1e-4); [EOL] } <line_num>: 247,256
@Test [EOL] public void testFit07() { [EOL]     GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer()); [EOL]     addDatasetToGaussianFitter(DATASET5, fitter); [EOL]     double[] parameters = fitter.fit(); [EOL]     Assert.assertEquals(3514384.729342235, parameters[0], 1e-4); [EOL]     Assert.assertEquals(4.054970307455625, parameters[1], 1e-4); [EOL]     Assert.assertEquals(0.015029412832160017, parameters[2], 1e-4); [EOL] } <line_num>: 261,270
@Test [EOL] public void testMath519() { [EOL]     final double[] data = { 1.1143831578403364E-29, 4.95281403484594E-28, 1.1171347211930288E-26, 1.7044813962636277E-25, 1.9784716574832164E-24, 1.8630236407866774E-23, 1.4820532905097742E-22, 1.0241963854632831E-21, 6.275077366673128E-21, 3.461808994532493E-20, 1.7407124684715706E-19, 8.056687953553974E-19, 3.460193945992071E-18, 1.3883326374011525E-17, 5.233894983671116E-17, 1.8630791465263745E-16, 6.288759227922111E-16, 2.0204433920597856E-15, 6.198768938576155E-15, 1.821419346860626E-14, 5.139176445538471E-14, 1.3956427429045787E-13, 3.655705706448139E-13, 9.253753324779779E-13, 2.267636001476696E-12, 5.3880460095836855E-12, 1.2431632654852931E-11 }; [EOL]     GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer()); [EOL]     for (int i = 0; i < data.length; i++) { [EOL]         fitter.addObservedPoint(i, data[i]); [EOL]     } [EOL]     final double[] p = fitter.fit(); [EOL]     Assert.assertEquals(53.1572792, p[1], 1e-7); [EOL]     Assert.assertEquals(5.75214622, p[2], 1e-8); [EOL] } <line_num>: 272,315
@Test [EOL] public void testMath798() { [EOL]     final GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer()); [EOL]     fitter.addObservedPoint(0.23, 395.0); [EOL]     fitter.addObservedPoint(1.14, 376.0); [EOL]     fitter.addObservedPoint(2.05, 163.0); [EOL]     fitter.addObservedPoint(2.95, 49.0); [EOL]     fitter.addObservedPoint(3.86, 16.0); [EOL]     fitter.addObservedPoint(4.77, 1.0); [EOL]     final double[] p = fitter.fit(); [EOL]     Assert.assertEquals(420.8397296167364, p[0], 1e-12); [EOL]     Assert.assertEquals(0.603770729862231, p[1], 1e-15); [EOL]     Assert.assertEquals(1.0786447936766612, p[2], 1e-14); [EOL] } <line_num>: 317,344
protected static void addDatasetToGaussianFitter(double[][] points, GaussianFitter fitter) { [EOL]     for (int i = 0; i < points.length; i++) { [EOL]         fitter.addObservedPoint(points[i][0], points[i][1]); [EOL]     } [EOL] } <line_num>: 357,362
