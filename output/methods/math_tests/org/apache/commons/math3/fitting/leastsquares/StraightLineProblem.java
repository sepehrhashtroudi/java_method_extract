public StraightLineProblem(double error) { [EOL]     points = new ArrayList<double[]>(); [EOL]     sigma = error; [EOL] } <line_num>: 47,50
public Model(double a, double b) { [EOL]     this.a = a; [EOL]     this.b = b; [EOL] } <line_num>: 155,159
public void addPoint(double px, double py) { [EOL]     points.add(new double[] { px, py }); [EOL] } <line_num>: 52,54
public double[] x() { [EOL]     final double[] v = new double[points.size()]; [EOL]     for (int i = 0; i < points.size(); i++) { [EOL]         final double[] p = points.get(i); [EOL]         v[i] = p[0]; [EOL]     } [EOL]     return v; [EOL] } <line_num>: 59,67
public double[] y() { [EOL]     final double[] v = new double[points.size()]; [EOL]     for (int i = 0; i < points.size(); i++) { [EOL]         final double[] p = points.get(i); [EOL]         v[i] = p[1]; [EOL]     } [EOL]     return v; [EOL] } <line_num>: 72,80
public double[] target() { [EOL]     return y(); [EOL] } <line_num>: 82,84
public double[] weight() { [EOL]     final double weight = 1 / (sigma * sigma); [EOL]     final double[] w = new double[points.size()]; [EOL]     for (int i = 0; i < points.size(); i++) { [EOL]         w[i] = weight; [EOL]     } [EOL]     return w; [EOL] } <line_num>: 86,94
public double[] value(double[] params) { [EOL]     final Model line = new Model(params[0], params[1]); [EOL]     final double[] model = new double[points.size()]; [EOL]     for (int i = 0; i < points.size(); i++) { [EOL]         final double[] p = points.get(i); [EOL]         model[i] = line.value(p[0]); [EOL]     } [EOL]     return model; [EOL] } <line_num>: 98,108
public MultivariateVectorFunction getModelFunction() { [EOL]     return new MultivariateVectorFunction() { [EOL]  [EOL]         public double[] value(double[] params) { [EOL]             final Model line = new Model(params[0], params[1]); [EOL]             final double[] model = new double[points.size()]; [EOL]             for (int i = 0; i < points.size(); i++) { [EOL]                 final double[] p = points.get(i); [EOL]                 model[i] = line.value(p[0]); [EOL]             } [EOL]             return model; [EOL]         } [EOL]     }; [EOL] } <line_num>: 96,110
public double[][] value(double[] point) { [EOL]     return jacobian(point); [EOL] } <line_num>: 114,116
public MultivariateMatrixFunction getModelFunctionJacobian() { [EOL]     return new MultivariateMatrixFunction() { [EOL]  [EOL]         public double[][] value(double[] point) { [EOL]             return jacobian(point); [EOL]         } [EOL]     }; [EOL] } <line_num>: 112,118
public double[] solve() { [EOL]     final SimpleRegression regress = new SimpleRegression(true); [EOL]     for (double[] d : points) { [EOL]         regress.addData(d[0], d[1]); [EOL]     } [EOL]     final double[] result = { regress.getSlope(), regress.getIntercept() }; [EOL]     return result; [EOL] } <line_num>: 124,132
private double[][] jacobian(double[] params) { [EOL]     final double[][] jacobian = new double[points.size()][2]; [EOL]     for (int i = 0; i < points.size(); i++) { [EOL]         final double[] p = points.get(i); [EOL]         jacobian[i][0] = p[0]; [EOL]         jacobian[i][1] = 1; [EOL]     } [EOL]     return jacobian; [EOL] } <line_num>: 134,146
public double value(double x) { [EOL]     return a * x + b; [EOL] } <line_num>: 161,163
