@Test(expected = NumberIsTooSmallException.class) [EOL] public void testPreconditions1() { [EOL]     HarmonicFitter fitter = new HarmonicFitter(new LevenbergMarquardtOptimizer()); [EOL]     fitter.fit(); [EOL] } <line_num>: 31,37
@Test [EOL] public void testNoError() { [EOL]     final double a = 0.2; [EOL]     final double w = 3.4; [EOL]     final double p = 4.1; [EOL]     HarmonicOscillator f = new HarmonicOscillator(a, w, p); [EOL]     HarmonicFitter fitter = new HarmonicFitter(new LevenbergMarquardtOptimizer()); [EOL]     for (double x = 0.0; x < 1.3; x += 0.01) { [EOL]         fitter.addObservedPoint(1, x, f.value(x)); [EOL]     } [EOL]     final double[] fitted = fitter.fit(); [EOL]     Assert.assertEquals(a, fitted[0], 1.0e-13); [EOL]     Assert.assertEquals(w, fitted[1], 1.0e-13); [EOL]     Assert.assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1e-13); [EOL]     HarmonicOscillator ff = new HarmonicOscillator(fitted[0], fitted[1], fitted[2]); [EOL]     for (double x = -1.0; x < 1.0; x += 0.01) { [EOL]         Assert.assertTrue(FastMath.abs(f.value(x) - ff.value(x)) < 1e-13); [EOL]     } [EOL] } <line_num>: 39,62
@Test [EOL] public void test1PercentError() { [EOL]     Random randomizer = new Random(64925784252l); [EOL]     final double a = 0.2; [EOL]     final double w = 3.4; [EOL]     final double p = 4.1; [EOL]     HarmonicOscillator f = new HarmonicOscillator(a, w, p); [EOL]     HarmonicFitter fitter = new HarmonicFitter(new LevenbergMarquardtOptimizer()); [EOL]     for (double x = 0.0; x < 10.0; x += 0.1) { [EOL]         fitter.addObservedPoint(1, x, f.value(x) + 0.01 * randomizer.nextGaussian()); [EOL]     } [EOL]     final double[] fitted = fitter.fit(); [EOL]     Assert.assertEquals(a, fitted[0], 7.6e-4); [EOL]     Assert.assertEquals(w, fitted[1], 2.7e-3); [EOL]     Assert.assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.3e-2); [EOL] } <line_num>: 64,83
@Test [EOL] public void testTinyVariationsData() { [EOL]     Random randomizer = new Random(64925784252l); [EOL]     HarmonicFitter fitter = new HarmonicFitter(new LevenbergMarquardtOptimizer()); [EOL]     for (double x = 0.0; x < 10.0; x += 0.1) { [EOL]         fitter.addObservedPoint(1, x, 1e-7 * randomizer.nextGaussian()); [EOL]     } [EOL]     fitter.fit(); [EOL] } <line_num>: 85,98
@Test [EOL] public void testInitialGuess() { [EOL]     Random randomizer = new Random(45314242l); [EOL]     final double a = 0.2; [EOL]     final double w = 3.4; [EOL]     final double p = 4.1; [EOL]     HarmonicOscillator f = new HarmonicOscillator(a, w, p); [EOL]     HarmonicFitter fitter = new HarmonicFitter(new LevenbergMarquardtOptimizer()); [EOL]     for (double x = 0.0; x < 10.0; x += 0.1) { [EOL]         fitter.addObservedPoint(1, x, f.value(x) + 0.01 * randomizer.nextGaussian()); [EOL]     } [EOL]     final double[] fitted = fitter.fit(new double[] { 0.15, 3.6, 4.5 }); [EOL]     Assert.assertEquals(a, fitted[0], 1.2e-3); [EOL]     Assert.assertEquals(w, fitted[1], 3.3e-3); [EOL]     Assert.assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.7e-2); [EOL] } <line_num>: 100,119
@Test [EOL] public void testUnsorted() { [EOL]     Random randomizer = new Random(64925784252l); [EOL]     final double a = 0.2; [EOL]     final double w = 3.4; [EOL]     final double p = 4.1; [EOL]     HarmonicOscillator f = new HarmonicOscillator(a, w, p); [EOL]     HarmonicFitter fitter = new HarmonicFitter(new LevenbergMarquardtOptimizer()); [EOL]     int size = 100; [EOL]     double[] xTab = new double[size]; [EOL]     double[] yTab = new double[size]; [EOL]     for (int i = 0; i < size; ++i) { [EOL]         xTab[i] = 0.1 * i; [EOL]         yTab[i] = f.value(xTab[i]) + 0.01 * randomizer.nextGaussian(); [EOL]     } [EOL]     for (int i = 0; i < size; ++i) { [EOL]         int i1 = randomizer.nextInt(size); [EOL]         int i2 = randomizer.nextInt(size); [EOL]         double xTmp = xTab[i1]; [EOL]         double yTmp = yTab[i1]; [EOL]         xTab[i1] = xTab[i2]; [EOL]         yTab[i1] = yTab[i2]; [EOL]         xTab[i2] = xTmp; [EOL]         yTab[i2] = yTmp; [EOL]     } [EOL]     for (int i = 0; i < size; ++i) { [EOL]         fitter.addObservedPoint(1, xTab[i], yTab[i]); [EOL]     } [EOL]     final double[] fitted = fitter.fit(); [EOL]     Assert.assertEquals(a, fitted[0], 7.6e-4); [EOL]     Assert.assertEquals(w, fitted[1], 3.5e-3); [EOL]     Assert.assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.5e-2); [EOL] } <line_num>: 121,162
@Test(expected = MathIllegalStateException.class) [EOL] public void testMath844() { [EOL]     final double[] y = { 0, 1, 2, 3, 2, 1, 0, -1, -2, -3, -2, -1, 0, 1, 2, 3, 2, 1, 0, -1, -2, -3, -2, -1, 0, 1, 2, 3, 2, 1, 0 }; [EOL]     final int len = y.length; [EOL]     final WeightedObservedPoint[] points = new WeightedObservedPoint[len]; [EOL]     for (int i = 0; i < len; i++) { [EOL]         points[i] = new WeightedObservedPoint(1, i, y[i]); [EOL]     } [EOL]     new HarmonicFitter.ParameterGuesser(points); [EOL] } <line_num>: 164,183
