public StatisticalReferenceDataset(final BufferedReader in) throws IOException { [EOL]     final ArrayList<String> lines = new ArrayList<String>(); [EOL]     for (String line = in.readLine(); line != null; line = in.readLine()) { [EOL]         lines.add(line); [EOL]     } [EOL]     int[] index = findLineNumbers("Data", lines); [EOL]     if (index == null) { [EOL]         throw new AssertionError("could not find line indices for data"); [EOL]     } [EOL]     this.numObservations = index[1] - index[0] + 1; [EOL]     this.x = new double[this.numObservations]; [EOL]     this.y = new double[this.numObservations]; [EOL]     for (int i = 0; i < this.numObservations; i++) { [EOL]         final String line = lines.get(index[0] + i - 1); [EOL]         final String[] tokens = line.trim().split(" ++"); [EOL]         this.y[i] = Double.parseDouble(tokens[0]); [EOL]         this.x[i] = Double.parseDouble(tokens[1]); [EOL]     } [EOL]     index = findLineNumbers("Starting Values", lines); [EOL]     if (index == null) { [EOL]         throw new AssertionError("could not find line indices for starting values"); [EOL]     } [EOL]     this.numParameters = index[1] - index[0] + 1; [EOL]     double[][] start = null; [EOL]     this.a = new double[numParameters]; [EOL]     this.sigA = new double[numParameters]; [EOL]     for (int i = 0; i < numParameters; i++) { [EOL]         final String line = lines.get(index[0] + i - 1); [EOL]         final String[] tokens = line.trim().split(" ++"); [EOL]         if (start == null) { [EOL]             start = new double[tokens.length - 4][numParameters]; [EOL]         } [EOL]         for (int j = 2; j < tokens.length - 2; j++) { [EOL]             start[j - 2][i] = Double.parseDouble(tokens[j]); [EOL]         } [EOL]         this.a[i] = Double.parseDouble(tokens[tokens.length - 2]); [EOL]         this.sigA[i] = Double.parseDouble(tokens[tokens.length - 1]); [EOL]     } [EOL]     if (start == null) { [EOL]         throw new IOException("could not find starting values"); [EOL]     } [EOL]     this.numStartingPoints = start.length; [EOL]     this.startingValues = start; [EOL]     double dummyDouble = Double.NaN; [EOL]     String dummyString = null; [EOL]     for (String line : lines) { [EOL]         if (line.contains("Dataset Name:")) { [EOL]             dummyString = line.substring(line.indexOf("Dataset Name:") + 13, line.indexOf("(")).trim(); [EOL]         } [EOL]         if (line.contains("Residual Sum of Squares")) { [EOL]             final String[] tokens = line.split(" ++"); [EOL]             dummyDouble = Double.parseDouble(tokens[4].trim()); [EOL]         } [EOL]     } [EOL]     if (Double.isNaN(dummyDouble)) { [EOL]         throw new IOException("could not find certified value of residual sum of squares"); [EOL]     } [EOL]     this.residualSumOfSquares = dummyDouble; [EOL]     if (dummyString == null) { [EOL]         throw new IOException("could not find dataset name"); [EOL]     } [EOL]     this.name = dummyString; [EOL]     this.problem = new LeastSquaresProblem(); [EOL] } <line_num>: 67,142
public double[] value(final double[] a) { [EOL]     final int n = getNumObservations(); [EOL]     final double[] yhat = new double[n]; [EOL]     for (int i = 0; i < n; i++) { [EOL]         yhat[i] = getModelValue(getX(i), a); [EOL]     } [EOL]     return yhat; [EOL] } <line_num>: 147,154
public MultivariateVectorFunction getModelFunction() { [EOL]     return new MultivariateVectorFunction() { [EOL]  [EOL]         public double[] value(final double[] a) { [EOL]             final int n = getNumObservations(); [EOL]             final double[] yhat = new double[n]; [EOL]             for (int i = 0; i < n; i++) { [EOL]                 yhat[i] = getModelValue(getX(i), a); [EOL]             } [EOL]             return yhat; [EOL]         } [EOL]     }; [EOL] } <line_num>: 145,156
public double[][] value(final double[] a) throws IllegalArgumentException { [EOL]     final int n = getNumObservations(); [EOL]     final double[][] j = new double[n][]; [EOL]     for (int i = 0; i < n; i++) { [EOL]         j[i] = getModelDerivatives(getX(i), a); [EOL]     } [EOL]     return j; [EOL] } <line_num>: 160,168
public MultivariateMatrixFunction getModelFunctionJacobian() { [EOL]     return new MultivariateMatrixFunction() { [EOL]  [EOL]         public double[][] value(final double[] a) throws IllegalArgumentException { [EOL]             final int n = getNumObservations(); [EOL]             final double[][] j = new double[n][]; [EOL]             for (int i = 0; i < n; i++) { [EOL]                 j[i] = getModelDerivatives(getX(i), a); [EOL]             } [EOL]             return j; [EOL]         } [EOL]     }; [EOL] } <line_num>: 158,170
public String getName() { [EOL]     return name; [EOL] } <line_num>: 178,180
public int getNumObservations() { [EOL]     return numObservations; [EOL] } <line_num>: 187,189
public double[][] getData() { [EOL]     return new double[][] { MathArrays.copyOf(x), MathArrays.copyOf(y) }; [EOL] } <line_num>: 197,201
public double getX(final int i) { [EOL]     return x[i]; [EOL] } <line_num>: 209,211
public double getY(final int i) { [EOL]     return y[i]; [EOL] } <line_num>: 219,221
public int getNumParameters() { [EOL]     return numParameters; [EOL] } <line_num>: 228,230
public double[] getParameters() { [EOL]     return MathArrays.copyOf(a); [EOL] } <line_num>: 237,239
public double getParameter(final int i) { [EOL]     return a[i]; [EOL] } <line_num>: 247,249
public double[] getParametersStandardDeviations() { [EOL]     return MathArrays.copyOf(sigA); [EOL] } <line_num>: 256,258
public double getParameterStandardDeviation(final int i) { [EOL]     return sigA[i]; [EOL] } <line_num>: 267,269
public double getResidualSumOfSquares() { [EOL]     return residualSumOfSquares; [EOL] } <line_num>: 276,278
public int getNumStartingPoints() { [EOL]     return numStartingPoints; [EOL] } <line_num>: 286,288
public double[] getStartingPoint(final int i) { [EOL]     return MathArrays.copyOf(startingValues[i]); [EOL] } <line_num>: 296,298
public LeastSquaresProblem getLeastSquaresProblem() { [EOL]     return problem; [EOL] } <line_num>: 306,308
public abstract double getModelValue(final double x, final double[] a); <line_num>: 318,318
public abstract double[] getModelDerivatives(final double x, final double[] a); <line_num>: 328,329
private static int[] findLineNumbers(final String key, final Iterable<String> lines) { [EOL]     for (String text : lines) { [EOL]         boolean flag = text.contains(key) && text.contains("lines") && text.contains("to") && text.contains(")"); [EOL]         if (flag) { [EOL]             final int[] numbers = new int[2]; [EOL]             final String from = text.substring(text.indexOf("lines") + 5, text.indexOf("to")); [EOL]             numbers[0] = Integer.parseInt(from.trim()); [EOL]             final String to = text.substring(text.indexOf("to") + 2, text.indexOf(")")); [EOL]             numbers[1] = Integer.parseInt(to.trim()); [EOL]             return numbers; [EOL]         } [EOL]     } [EOL]     return null; [EOL] } <line_num>: 352,369
