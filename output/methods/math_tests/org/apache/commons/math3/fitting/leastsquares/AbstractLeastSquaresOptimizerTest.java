@Test [EOL] public void testComputeCost() throws IOException { [EOL]     final StatisticalReferenceDataset dataset = StatisticalReferenceDatasetFactory.createKirby2(); [EOL]     final double[] a = dataset.getParameters(); [EOL]     final double[] y = dataset.getData()[1]; [EOL]     final double[] w = new double[y.length]; [EOL]     Arrays.fill(w, 1d); [EOL]     StatisticalReferenceDataset.LeastSquaresProblem problem = dataset.getLeastSquaresProblem(); [EOL]     final LevenbergMarquardtOptimizer optim = LevenbergMarquardtOptimizer.create().withModelAndJacobian(problem.getModelFunction(), problem.getModelFunctionJacobian()).withTarget(y).withWeight(new DiagonalMatrix(w)).withStartPoint(a); [EOL]     final double expected = dataset.getResidualSumOfSquares(); [EOL]     final double cost = optim.computeCost(optim.computeResiduals(optim.getModel().value(optim.getStart()))); [EOL]     final double actual = cost * cost; [EOL]     Assert.assertEquals(dataset.getName(), expected, actual, 1e-11 * expected); [EOL] } <line_num>: 29,52
@Test [EOL] public void testComputeRMS() throws IOException { [EOL]     final StatisticalReferenceDataset dataset = StatisticalReferenceDatasetFactory.createKirby2(); [EOL]     final double[] a = dataset.getParameters(); [EOL]     final double[] y = dataset.getData()[1]; [EOL]     final double[] w = new double[y.length]; [EOL]     Arrays.fill(w, 1d); [EOL]     StatisticalReferenceDataset.LeastSquaresProblem problem = dataset.getLeastSquaresProblem(); [EOL]     final LevenbergMarquardtOptimizer optim = LevenbergMarquardtOptimizer.create().withModelAndJacobian(problem.getModelFunction(), problem.getModelFunctionJacobian()).withTarget(y).withWeight(new DiagonalMatrix(w)).withStartPoint(a); [EOL]     final double expected = FastMath.sqrt(dataset.getResidualSumOfSquares() / dataset.getNumObservations()); [EOL]     final double actual = optim.computeRMS(optim.getStart()); [EOL]     Assert.assertEquals(dataset.getName(), expected, actual, 1e-11 * expected); [EOL] } <line_num>: 54,77
@Test [EOL] public void testComputeSigma() throws IOException { [EOL]     final StatisticalReferenceDataset dataset = StatisticalReferenceDatasetFactory.createKirby2(); [EOL]     final double[] a = dataset.getParameters(); [EOL]     final double[] y = dataset.getData()[1]; [EOL]     final double[] w = new double[y.length]; [EOL]     Arrays.fill(w, 1d); [EOL]     StatisticalReferenceDataset.LeastSquaresProblem problem = dataset.getLeastSquaresProblem(); [EOL]     final LevenbergMarquardtOptimizer optim = LevenbergMarquardtOptimizer.create().withModelAndJacobian(problem.getModelFunction(), problem.getModelFunctionJacobian()).withTarget(y).withWeight(new DiagonalMatrix(w)).withStartPoint(a); [EOL]     final double[] expected = dataset.getParametersStandardDeviations(); [EOL]     final double cost = optim.computeCost(optim.computeResiduals(optim.getModel().value(optim.getStart()))); [EOL]     final double[] sig = optim.computeSigma(optim.getStart(), 1e-14); [EOL]     final int dof = y.length - a.length; [EOL]     for (int i = 0; i < sig.length; i++) { [EOL]         final double actual = FastMath.sqrt(cost * cost / dof) * sig[i]; [EOL]         Assert.assertEquals(dataset.getName() + ", parameter #" + i, expected[i], actual, 1e-6 * expected[i]); [EOL]     } [EOL] } <line_num>: 79,108
