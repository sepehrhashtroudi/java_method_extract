@Test(expected = NumberIsTooSmallException.class) [EOL] public void testWrongNumberOfPoints() { [EOL]     new FiniteDifferencesDifferentiator(1, 1.0); [EOL] } <line_num>: 40,43
@Test(expected = NotPositiveException.class) [EOL] public void testWrongStepSize() { [EOL]     new FiniteDifferencesDifferentiator(3, 0.0); [EOL] } <line_num>: 45,48
@Test [EOL] public void testSerialization() { [EOL]     FiniteDifferencesDifferentiator differentiator = new FiniteDifferencesDifferentiator(3, 1.0e-3); [EOL]     FiniteDifferencesDifferentiator recovered = (FiniteDifferencesDifferentiator) TestUtils.serializeAndRecover(differentiator); [EOL]     Assert.assertEquals(differentiator.getNbPoints(), recovered.getNbPoints()); [EOL]     Assert.assertEquals(differentiator.getStepSize(), recovered.getStepSize(), 1.0e-15); [EOL] } <line_num>: 50,58
public double value(double x) { [EOL]     return 42.0; [EOL] } <line_num>: 66,68
@Test [EOL] public void testConstant() { [EOL]     FiniteDifferencesDifferentiator differentiator = new FiniteDifferencesDifferentiator(5, 0.01); [EOL]     UnivariateDifferentiableFunction f = differentiator.differentiate(new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             return 42.0; [EOL]         } [EOL]     }); [EOL]     for (double x = -10; x < 10; x += 0.1) { [EOL]         DerivativeStructure y = f.value(new DerivativeStructure(1, 2, 0, x)); [EOL]         Assert.assertEquals(42.0, y.getValue(), 1.0e-15); [EOL]         Assert.assertEquals(0.0, y.getPartialDerivative(1), 1.0e-15); [EOL]         Assert.assertEquals(0.0, y.getPartialDerivative(2), 1.0e-15); [EOL]     } [EOL] } <line_num>: 60,76
public double value(double x) { [EOL]     return 2 - 3 * x; [EOL] } <line_num>: 84,86
@Test [EOL] public void testLinear() { [EOL]     FiniteDifferencesDifferentiator differentiator = new FiniteDifferencesDifferentiator(5, 0.01); [EOL]     UnivariateDifferentiableFunction f = differentiator.differentiate(new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             return 2 - 3 * x; [EOL]         } [EOL]     }); [EOL]     for (double x = -10; x < 10; x += 0.1) { [EOL]         DerivativeStructure y = f.value(new DerivativeStructure(1, 2, 0, x)); [EOL]         Assert.assertEquals("" + (2 - 3 * x - y.getValue()), 2 - 3 * x, y.getValue(), 2.0e-15); [EOL]         Assert.assertEquals(-3.0, y.getPartialDerivative(1), 4.0e-13); [EOL]         Assert.assertEquals(0.0, y.getPartialDerivative(2), 9.0e-11); [EOL]     } [EOL] } <line_num>: 78,94
@Test [EOL] public void testGaussian() { [EOL]     FiniteDifferencesDifferentiator differentiator = new FiniteDifferencesDifferentiator(9, 0.02); [EOL]     UnivariateDifferentiableFunction gaussian = new Gaussian(1.0, 2.0); [EOL]     UnivariateDifferentiableFunction f = differentiator.differentiate(gaussian); [EOL]     double[] expectedError = new double[] { 6.939e-18, 1.284e-15, 2.477e-13, 1.168e-11, 2.840e-9, 7.971e-8 }; [EOL]     double[] maxError = new double[expectedError.length]; [EOL]     for (double x = -10; x < 10; x += 0.1) { [EOL]         DerivativeStructure dsX = new DerivativeStructure(1, maxError.length - 1, 0, x); [EOL]         DerivativeStructure yRef = gaussian.value(dsX); [EOL]         DerivativeStructure y = f.value(dsX); [EOL]         Assert.assertEquals(f.value(dsX.getValue()), f.value(dsX).getValue(), 1.0e-15); [EOL]         for (int order = 0; order <= yRef.getOrder(); ++order) { [EOL]             maxError[order] = FastMath.max(maxError[order], FastMath.abs(yRef.getPartialDerivative(order) - y.getPartialDerivative(order))); [EOL]         } [EOL]     } [EOL]     for (int i = 0; i < maxError.length; ++i) { [EOL]         Assert.assertEquals(expectedError[i], maxError[i], 0.01 * expectedError[i]); [EOL]     } [EOL] } <line_num>: 96,121
@Test [EOL] public void testStepSizeUnstability() { [EOL]     UnivariateDifferentiableFunction quintic = new QuinticFunction(); [EOL]     UnivariateDifferentiableFunction goodStep = new FiniteDifferencesDifferentiator(7, 0.25).differentiate(quintic); [EOL]     UnivariateDifferentiableFunction badStep = new FiniteDifferencesDifferentiator(7, 1.0e-6).differentiate(quintic); [EOL]     double[] maxErrorGood = new double[7]; [EOL]     double[] maxErrorBad = new double[7]; [EOL]     for (double x = -10; x < 10; x += 0.1) { [EOL]         DerivativeStructure dsX = new DerivativeStructure(1, 6, 0, x); [EOL]         DerivativeStructure yRef = quintic.value(dsX); [EOL]         DerivativeStructure yGood = goodStep.value(dsX); [EOL]         DerivativeStructure yBad = badStep.value(dsX); [EOL]         for (int order = 0; order <= 6; ++order) { [EOL]             maxErrorGood[order] = FastMath.max(maxErrorGood[order], FastMath.abs(yRef.getPartialDerivative(order) - yGood.getPartialDerivative(order))); [EOL]             maxErrorBad[order] = FastMath.max(maxErrorBad[order], FastMath.abs(yRef.getPartialDerivative(order) - yBad.getPartialDerivative(order))); [EOL]         } [EOL]     } [EOL]     final double[] expectedGood = new double[] { 7.276e-12, 7.276e-11, 9.968e-10, 3.092e-9, 5.432e-8, 8.196e-8, 1.818e-6 }; [EOL]     final double[] expectedBad = new double[] { 2.910e-11, 2.087e-5, 147.7, 3.820e7, 6.354e14, 6.548e19, 1.543e27 }; [EOL]     for (int i = 0; i < maxErrorGood.length; ++i) { [EOL]         Assert.assertEquals(expectedGood[i], maxErrorGood[i], 0.01 * expectedGood[i]); [EOL]         Assert.assertEquals(expectedBad[i], maxErrorBad[i], 0.01 * expectedBad[i]); [EOL]     } [EOL] } <line_num>: 123,164
public double value(double x) { [EOL]     throw new MathInternalError(); [EOL] } <line_num>: 170,174
@Test(expected = NumberIsTooLargeException.class) [EOL] public void testWrongOrder() { [EOL]     UnivariateDifferentiableFunction f = new FiniteDifferencesDifferentiator(3, 0.01).differentiate(new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             throw new MathInternalError(); [EOL]         } [EOL]     }); [EOL]     f.value(new DerivativeStructure(1, 3, 0, 1.0)); [EOL] } <line_num>: 166,177
public double[] value(double x) { [EOL]     throw new MathInternalError(); [EOL] } <line_num>: 183,187
@Test(expected = NumberIsTooLargeException.class) [EOL] public void testWrongOrderVector() { [EOL]     UnivariateDifferentiableVectorFunction f = new FiniteDifferencesDifferentiator(3, 0.01).differentiate(new UnivariateVectorFunction() { [EOL]  [EOL]         public double[] value(double x) { [EOL]             throw new MathInternalError(); [EOL]         } [EOL]     }); [EOL]     f.value(new DerivativeStructure(1, 3, 0, 1.0)); [EOL] } <line_num>: 179,190
public double[][] value(double x) { [EOL]     throw new MathInternalError(); [EOL] } <line_num>: 196,200
@Test(expected = NumberIsTooLargeException.class) [EOL] public void testWrongOrderMatrix() { [EOL]     UnivariateDifferentiableMatrixFunction f = new FiniteDifferencesDifferentiator(3, 0.01).differentiate(new UnivariateMatrixFunction() { [EOL]  [EOL]         public double[][] value(double x) { [EOL]             throw new MathInternalError(); [EOL]         } [EOL]     }); [EOL]     f.value(new DerivativeStructure(1, 3, 0, 1.0)); [EOL] } <line_num>: 192,203
@Test(expected = NumberIsTooLargeException.class) [EOL] public void testTooLargeStep() { [EOL]     new FiniteDifferencesDifferentiator(3, 2.5, 0.0, 1.0); [EOL] } <line_num>: 205,208
public double value(double x) { [EOL]     if (x < 0) { [EOL]         throw new NumberIsTooSmallException(x, 0, true); [EOL]     } else if (x > 1) { [EOL]         throw new NumberIsTooLargeException(x, 1, true); [EOL]     } else { [EOL]         return slope * x; [EOL]     } [EOL] } <line_num>: 215,223
@Test [EOL] public void testBounds() { [EOL]     final double slope = 2.5; [EOL]     UnivariateFunction f = new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             if (x < 0) { [EOL]                 throw new NumberIsTooSmallException(x, 0, true); [EOL]             } else if (x > 1) { [EOL]                 throw new NumberIsTooLargeException(x, 1, true); [EOL]             } else { [EOL]                 return slope * x; [EOL]             } [EOL]         } [EOL]     }; [EOL]     UnivariateDifferentiableFunction missingBounds = new FiniteDifferencesDifferentiator(3, 0.1).differentiate(f); [EOL]     UnivariateDifferentiableFunction properlyBounded = new FiniteDifferencesDifferentiator(3, 0.1, 0.0, 1.0).differentiate(f); [EOL]     DerivativeStructure tLow = new DerivativeStructure(1, 1, 0, 0.05); [EOL]     DerivativeStructure tHigh = new DerivativeStructure(1, 1, 0, 0.95); [EOL]     try { [EOL]         missingBounds.value(tLow); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (NumberIsTooSmallException nse) { [EOL]         Assert.assertEquals(-0.05, nse.getArgument().doubleValue(), 1.0e-10); [EOL]     } catch (Exception e) { [EOL]         Assert.fail("wrong exception caught: " + e.getClass().getName()); [EOL]     } [EOL]     try { [EOL]         missingBounds.value(tHigh); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (NumberIsTooLargeException nle) { [EOL]         Assert.assertEquals(1.05, nle.getArgument().doubleValue(), 1.0e-10); [EOL]     } catch (Exception e) { [EOL]         Assert.fail("wrong exception caught: " + e.getClass().getName()); [EOL]     } [EOL]     Assert.assertEquals(slope, properlyBounded.value(tLow).getPartialDerivative(1), 1.0e-10); [EOL]     Assert.assertEquals(slope, properlyBounded.value(tHigh).getPartialDerivative(1), 1.0e-10); [EOL] } <line_num>: 210,263
public double value(double x) { [EOL]     return FastMath.sqrt(x); [EOL] } <line_num>: 271,273
@Test [EOL] public void testBoundedSqrt() { [EOL]     UnivariateFunctionDifferentiator differentiator = new FiniteDifferencesDifferentiator(9, 1.0 / 32, 0.0, Double.POSITIVE_INFINITY); [EOL]     UnivariateDifferentiableFunction sqrt = differentiator.differentiate(new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             return FastMath.sqrt(x); [EOL]         } [EOL]     }); [EOL]     DerivativeStructure t001 = new DerivativeStructure(1, 1, 0, 0.01); [EOL]     Assert.assertEquals(0.5 / FastMath.sqrt(t001.getValue()), sqrt.value(t001).getPartialDerivative(1), 1.6); [EOL]     DerivativeStructure t01 = new DerivativeStructure(1, 1, 0, 0.1); [EOL]     Assert.assertEquals(0.5 / FastMath.sqrt(t01.getValue()), sqrt.value(t01).getPartialDerivative(1), 7.0e-3); [EOL]     DerivativeStructure t03 = new DerivativeStructure(1, 1, 0, 0.3); [EOL]     Assert.assertEquals(0.5 / FastMath.sqrt(t03.getValue()), sqrt.value(t03).getPartialDerivative(1), 2.1e-7); [EOL] } <line_num>: 265,284
public double[] value(double x) { [EOL]     return new double[] { FastMath.cos(x), FastMath.sin(x) }; [EOL] } <line_num>: 294,296
@Test [EOL] public void testVectorFunction() { [EOL]     FiniteDifferencesDifferentiator differentiator = new FiniteDifferencesDifferentiator(7, 0.01); [EOL]     UnivariateDifferentiableVectorFunction f = differentiator.differentiate(new UnivariateVectorFunction() { [EOL]  [EOL]         public double[] value(double x) { [EOL]             return new double[] { FastMath.cos(x), FastMath.sin(x) }; [EOL]         } [EOL]     }); [EOL]     for (double x = -10; x < 10; x += 0.1) { [EOL]         DerivativeStructure dsX = new DerivativeStructure(1, 2, 0, x); [EOL]         DerivativeStructure[] y = f.value(dsX); [EOL]         double cos = FastMath.cos(x); [EOL]         double sin = FastMath.sin(x); [EOL]         double[] f1 = f.value(dsX.getValue()); [EOL]         DerivativeStructure[] f2 = f.value(dsX); [EOL]         Assert.assertEquals(f1.length, f2.length); [EOL]         for (int i = 0; i < f1.length; ++i) { [EOL]             Assert.assertEquals(f1[i], f2[i].getValue(), 1.0e-15); [EOL]         } [EOL]         Assert.assertEquals(cos, y[0].getValue(), 7.0e-16); [EOL]         Assert.assertEquals(sin, y[1].getValue(), 7.0e-16); [EOL]         Assert.assertEquals(-sin, y[0].getPartialDerivative(1), 6.0e-14); [EOL]         Assert.assertEquals(cos, y[1].getPartialDerivative(1), 6.0e-14); [EOL]         Assert.assertEquals(-cos, y[0].getPartialDerivative(2), 2.0e-11); [EOL]         Assert.assertEquals(-sin, y[1].getPartialDerivative(2), 2.0e-11); [EOL]     } [EOL] } <line_num>: 286,319
public double[][] value(double x) { [EOL]     return new double[][] { { FastMath.cos(x), FastMath.sin(x) }, { FastMath.cosh(x), FastMath.sinh(x) } }; [EOL] } <line_num>: 329,334
@Test [EOL] public void testMatrixFunction() { [EOL]     FiniteDifferencesDifferentiator differentiator = new FiniteDifferencesDifferentiator(7, 0.01); [EOL]     UnivariateDifferentiableMatrixFunction f = differentiator.differentiate(new UnivariateMatrixFunction() { [EOL]  [EOL]         public double[][] value(double x) { [EOL]             return new double[][] { { FastMath.cos(x), FastMath.sin(x) }, { FastMath.cosh(x), FastMath.sinh(x) } }; [EOL]         } [EOL]     }); [EOL]     for (double x = -1; x < 1; x += 0.02) { [EOL]         DerivativeStructure dsX = new DerivativeStructure(1, 2, 0, x); [EOL]         DerivativeStructure[][] y = f.value(dsX); [EOL]         double cos = FastMath.cos(x); [EOL]         double sin = FastMath.sin(x); [EOL]         double cosh = FastMath.cosh(x); [EOL]         double sinh = FastMath.sinh(x); [EOL]         double[][] f1 = f.value(dsX.getValue()); [EOL]         DerivativeStructure[][] f2 = f.value(dsX); [EOL]         Assert.assertEquals(f1.length, f2.length); [EOL]         for (int i = 0; i < f1.length; ++i) { [EOL]             Assert.assertEquals(f1[i].length, f2[i].length); [EOL]             for (int j = 0; j < f1[i].length; ++j) { [EOL]                 Assert.assertEquals(f1[i][j], f2[i][j].getValue(), 1.0e-15); [EOL]             } [EOL]         } [EOL]         Assert.assertEquals(cos, y[0][0].getValue(), 7.0e-18); [EOL]         Assert.assertEquals(sin, y[0][1].getValue(), 6.0e-17); [EOL]         Assert.assertEquals(cosh, y[1][0].getValue(), 3.0e-16); [EOL]         Assert.assertEquals(sinh, y[1][1].getValue(), 3.0e-16); [EOL]         Assert.assertEquals(-sin, y[0][0].getPartialDerivative(1), 2.0e-14); [EOL]         Assert.assertEquals(cos, y[0][1].getPartialDerivative(1), 2.0e-14); [EOL]         Assert.assertEquals(sinh, y[1][0].getPartialDerivative(1), 3.0e-14); [EOL]         Assert.assertEquals(cosh, y[1][1].getPartialDerivative(1), 3.0e-14); [EOL]         Assert.assertEquals(-cos, y[0][0].getPartialDerivative(2), 3.0e-12); [EOL]         Assert.assertEquals(-sin, y[0][1].getPartialDerivative(2), 3.0e-12); [EOL]         Assert.assertEquals(cosh, y[1][0].getPartialDerivative(2), 6.0e-12); [EOL]         Assert.assertEquals(sinh, y[1][1].getPartialDerivative(2), 6.0e-12); [EOL]     } [EOL] } <line_num>: 321,368
@Test [EOL] public void testSeveralFreeParameters() { [EOL]     FiniteDifferencesDifferentiator differentiator = new FiniteDifferencesDifferentiator(5, 0.001); [EOL]     UnivariateDifferentiableFunction sine = new Sin(); [EOL]     UnivariateDifferentiableFunction f = differentiator.differentiate(sine); [EOL]     double[] expectedError = new double[] { 6.696e-16, 1.371e-12, 2.007e-8, 1.754e-5 }; [EOL]     double[] maxError = new double[expectedError.length]; [EOL]     for (double x = -2; x < 2; x += 0.1) { [EOL]         for (double y = -2; y < 2; y += 0.1) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(2, maxError.length - 1, 0, x); [EOL]             DerivativeStructure dsY = new DerivativeStructure(2, maxError.length - 1, 1, y); [EOL]             DerivativeStructure dsT = dsX.multiply(3).subtract(dsY.multiply(2)); [EOL]             DerivativeStructure sRef = sine.value(dsT); [EOL]             DerivativeStructure s = f.value(dsT); [EOL]             for (int xOrder = 0; xOrder <= sRef.getOrder(); ++xOrder) { [EOL]                 for (int yOrder = 0; yOrder <= sRef.getOrder(); ++yOrder) { [EOL]                     if (xOrder + yOrder <= sRef.getOrder()) { [EOL]                         maxError[xOrder + yOrder] = FastMath.max(maxError[xOrder + yOrder], FastMath.abs(sRef.getPartialDerivative(xOrder, yOrder) - s.getPartialDerivative(xOrder, yOrder))); [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     for (int i = 0; i < maxError.length; ++i) { [EOL]         Assert.assertEquals(expectedError[i], maxError[i], 0.01 * expectedError[i]); [EOL]     } [EOL] } <line_num>: 370,402
