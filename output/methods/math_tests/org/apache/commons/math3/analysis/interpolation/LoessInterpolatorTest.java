@Test [EOL] public void testOnOnePoint() { [EOL]     double[] xval = { 0.5 }; [EOL]     double[] yval = { 0.7 }; [EOL]     double[] res = new LoessInterpolator().smooth(xval, yval); [EOL]     Assert.assertEquals(1, res.length); [EOL]     Assert.assertEquals(0.7, res[0], 0.0); [EOL] } <line_num>: 35,42
@Test [EOL] public void testOnTwoPoints() { [EOL]     double[] xval = { 0.5, 0.6 }; [EOL]     double[] yval = { 0.7, 0.8 }; [EOL]     double[] res = new LoessInterpolator().smooth(xval, yval); [EOL]     Assert.assertEquals(2, res.length); [EOL]     Assert.assertEquals(0.7, res[0], 0.0); [EOL]     Assert.assertEquals(0.8, res[1], 0.0); [EOL] } <line_num>: 44,52
@Test [EOL] public void testOnStraightLine() { [EOL]     double[] xval = { 1, 2, 3, 4, 5 }; [EOL]     double[] yval = { 2, 4, 6, 8, 10 }; [EOL]     LoessInterpolator li = new LoessInterpolator(0.6, 2, 1e-12); [EOL]     double[] res = li.smooth(xval, yval); [EOL]     Assert.assertEquals(5, res.length); [EOL]     for (int i = 0; i < 5; ++i) { [EOL]         Assert.assertEquals(yval[i], res[i], 1e-8); [EOL]     } [EOL] } <line_num>: 54,64
@Test [EOL] public void testOnDistortedSine() { [EOL]     int numPoints = 100; [EOL]     double[] xval = new double[numPoints]; [EOL]     double[] yval = new double[numPoints]; [EOL]     double xnoise = 0.1; [EOL]     double ynoise = 0.2; [EOL]     generateSineData(xval, yval, xnoise, ynoise); [EOL]     LoessInterpolator li = new LoessInterpolator(0.3, 4, 1e-12); [EOL]     double[] res = li.smooth(xval, yval); [EOL]     double noisyResidualSum = 0; [EOL]     double fitResidualSum = 0; [EOL]     for (int i = 0; i < numPoints; ++i) { [EOL]         double expected = FastMath.sin(xval[i]); [EOL]         double noisy = yval[i]; [EOL]         double fit = res[i]; [EOL]         noisyResidualSum += FastMath.pow(noisy - expected, 2); [EOL]         fitResidualSum += FastMath.pow(fit - expected, 2); [EOL]     } [EOL]     Assert.assertTrue(fitResidualSum < noisyResidualSum); [EOL] } <line_num>: 66,96
@Test [EOL] public void testIncreasingBandwidthIncreasesSmoothness() { [EOL]     int numPoints = 100; [EOL]     double[] xval = new double[numPoints]; [EOL]     double[] yval = new double[numPoints]; [EOL]     double xnoise = 0.1; [EOL]     double ynoise = 0.1; [EOL]     generateSineData(xval, yval, xnoise, ynoise); [EOL]     double[] bandwidths = { 0.1, 0.5, 1.0 }; [EOL]     double[] variances = new double[bandwidths.length]; [EOL]     for (int i = 0; i < bandwidths.length; i++) { [EOL]         double bw = bandwidths[i]; [EOL]         LoessInterpolator li = new LoessInterpolator(bw, 4, 1e-12); [EOL]         double[] res = li.smooth(xval, yval); [EOL]         for (int j = 1; j < res.length; ++j) { [EOL]             variances[i] += FastMath.pow(res[j] - res[j - 1], 2); [EOL]         } [EOL]     } [EOL]     for (int i = 1; i < variances.length; ++i) { [EOL]         Assert.assertTrue(variances[i] < variances[i - 1]); [EOL]     } [EOL] } <line_num>: 98,127
@Test [EOL] public void testIncreasingRobustnessItersIncreasesSmoothnessWithOutliers() { [EOL]     int numPoints = 100; [EOL]     double[] xval = new double[numPoints]; [EOL]     double[] yval = new double[numPoints]; [EOL]     double xnoise = 0.1; [EOL]     double ynoise = 0.1; [EOL]     generateSineData(xval, yval, xnoise, ynoise); [EOL]     yval[numPoints / 3] *= 100; [EOL]     yval[2 * numPoints / 3] *= -100; [EOL]     double[] variances = new double[4]; [EOL]     for (int i = 0; i < 4; i++) { [EOL]         LoessInterpolator li = new LoessInterpolator(0.3, i, 1e-12); [EOL]         double[] res = li.smooth(xval, yval); [EOL]         for (int j = 1; j < res.length; ++j) { [EOL]             variances[i] += FastMath.abs(res[j] - res[j - 1]); [EOL]         } [EOL]     } [EOL]     for (int i = 1; i < variances.length; ++i) { [EOL]         Assert.assertTrue(variances[i] < variances[i - 1]); [EOL]     } [EOL] } <line_num>: 129,160
@Test(expected = DimensionMismatchException.class) [EOL] public void testUnequalSizeArguments() { [EOL]     new LoessInterpolator().smooth(new double[] { 1, 2, 3 }, new double[] { 1, 2, 3, 4 }); [EOL] } <line_num>: 162,165
@Test(expected = NoDataException.class) [EOL] public void testEmptyData() { [EOL]     new LoessInterpolator().smooth(new double[] {}, new double[] {}); [EOL] } <line_num>: 167,170
@Test(expected = NonMonotonicSequenceException.class) [EOL] public void testNonStrictlyIncreasing1() { [EOL]     new LoessInterpolator().smooth(new double[] { 4, 3, 1, 2 }, new double[] { 3, 4, 5, 6 }); [EOL] } <line_num>: 172,175
@Test(expected = NonMonotonicSequenceException.class) [EOL] public void testNonStrictlyIncreasing2() { [EOL]     new LoessInterpolator().smooth(new double[] { 1, 2, 2, 3 }, new double[] { 3, 4, 5, 6 }); [EOL] } <line_num>: 177,180
@Test(expected = NotFiniteNumberException.class) [EOL] public void testNotAllFiniteReal1() { [EOL]     new LoessInterpolator().smooth(new double[] { 1, 2, Double.NaN }, new double[] { 3, 4, 5 }); [EOL] } <line_num>: 182,185
@Test(expected = NotFiniteNumberException.class) [EOL] public void testNotAllFiniteReal2() { [EOL]     new LoessInterpolator().smooth(new double[] { 1, 2, Double.POSITIVE_INFINITY }, new double[] { 3, 4, 5 }); [EOL] } <line_num>: 187,190
@Test(expected = NotFiniteNumberException.class) [EOL] public void testNotAllFiniteReal3() { [EOL]     new LoessInterpolator().smooth(new double[] { 1, 2, Double.NEGATIVE_INFINITY }, new double[] { 3, 4, 5 }); [EOL] } <line_num>: 192,195
@Test(expected = NotFiniteNumberException.class) [EOL] public void testNotAllFiniteReal4() { [EOL]     new LoessInterpolator().smooth(new double[] { 3, 4, 5 }, new double[] { 1, 2, Double.NaN }); [EOL] } <line_num>: 197,200
@Test(expected = NotFiniteNumberException.class) [EOL] public void testNotAllFiniteReal5() { [EOL]     new LoessInterpolator().smooth(new double[] { 3, 4, 5 }, new double[] { 1, 2, Double.POSITIVE_INFINITY }); [EOL] } <line_num>: 202,205
@Test(expected = NotFiniteNumberException.class) [EOL] public void testNotAllFiniteReal6() { [EOL]     new LoessInterpolator().smooth(new double[] { 3, 4, 5 }, new double[] { 1, 2, Double.NEGATIVE_INFINITY }); [EOL] } <line_num>: 207,210
@Test(expected = NumberIsTooSmallException.class) [EOL] public void testInsufficientBandwidth() { [EOL]     LoessInterpolator li = new LoessInterpolator(0.1, 3, 1e-12); [EOL]     li.smooth(new double[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }, new double[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }); [EOL] } <line_num>: 212,216
@Test(expected = OutOfRangeException.class) [EOL] public void testCompletelyIncorrectBandwidth1() { [EOL]     new LoessInterpolator(-0.2, 3, 1e-12); [EOL] } <line_num>: 218,221
@Test(expected = OutOfRangeException.class) [EOL] public void testCompletelyIncorrectBandwidth2() { [EOL]     new LoessInterpolator(1.1, 3, 1e-12); [EOL] } <line_num>: 223,226
@Test [EOL] public void testMath296withoutWeights() { [EOL]     double[] xval = { 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0 }; [EOL]     double[] yval = { 0.47, 0.48, 0.55, 0.56, -0.08, -0.04, -0.07, -0.07, -0.56, -0.46, -0.56, -0.52, -3.03, -3.08, -3.09, -3.04, 3.54, 3.46, 3.36, 3.35 }; [EOL]     double[] yref = { 0.461, 0.499, 0.541, 0.308, 0.175, -0.042, -0.072, -0.196, -0.311, -0.446, -0.557, -1.497, -2.133, -3.08, -3.09, -0.621, 0.982, 3.449, 3.389, 3.336 }; [EOL]     LoessInterpolator li = new LoessInterpolator(0.3, 4, 1e-12); [EOL]     double[] res = li.smooth(xval, yval); [EOL]     Assert.assertEquals(xval.length, res.length); [EOL]     for (int i = 0; i < res.length; ++i) { [EOL]         Assert.assertEquals(yref[i], res[i], 0.02); [EOL]     } [EOL] } <line_num>: 228,249
private void generateSineData(double[] xval, double[] yval, double xnoise, double ynoise) { [EOL]     double dx = 2 * FastMath.PI / xval.length; [EOL]     double x = 0; [EOL]     for (int i = 0; i < xval.length; ++i) { [EOL]         xval[i] = x; [EOL]         yval[i] = FastMath.sin(x) + (2 * FastMath.random() - 1) * ynoise; [EOL]         x += dx * (1 + (2 * FastMath.random() - 1) * xnoise); [EOL]     } [EOL] } <line_num>: 251,259
