@Test(expected = NullArgumentException.class) [EOL] public void testPreconditions1() { [EOL]     new StepFunction(null, new double[] { 0, -1, -2 }); [EOL] } <line_num>: 35,38
@Test(expected = NullArgumentException.class) [EOL] public void testPreconditions2() { [EOL]     new StepFunction(new double[] { 0, 1 }, null); [EOL] } <line_num>: 40,43
@Test(expected = NoDataException.class) [EOL] public void testPreconditions3() { [EOL]     new StepFunction(new double[] { 0 }, new double[] {}); [EOL] } <line_num>: 45,48
@Test(expected = NoDataException.class) [EOL] public void testPreconditions4() { [EOL]     new StepFunction(new double[] {}, new double[] { 0 }); [EOL] } <line_num>: 50,53
@Test(expected = DimensionMismatchException.class) [EOL] public void testPreconditions5() { [EOL]     new StepFunction(new double[] { 0, 1 }, new double[] { 0, -1, -2 }); [EOL] } <line_num>: 55,58
@Test(expected = NonMonotonicSequenceException.class) [EOL] public void testPreconditions6() { [EOL]     new StepFunction(new double[] { 1, 0, 1 }, new double[] { 0, -1, -2 }); [EOL] } <line_num>: 60,63
@Test [EOL] public void testSomeValues() { [EOL]     final double[] x = { -2, -0.5, 0, 1.9, 7.4, 21.3 }; [EOL]     final double[] y = { 4, -1, -5.5, 0.4, 5.8, 51.2 }; [EOL]     final UnivariateFunction f = new StepFunction(x, y); [EOL]     Assert.assertEquals(4, f.value(Double.NEGATIVE_INFINITY), EPS); [EOL]     Assert.assertEquals(4, f.value(-10), EPS); [EOL]     Assert.assertEquals(-1, f.value(-0.4), EPS); [EOL]     Assert.assertEquals(-5.5, f.value(0), EPS); [EOL]     Assert.assertEquals(0.4, f.value(2), EPS); [EOL]     Assert.assertEquals(5.8, f.value(10), EPS); [EOL]     Assert.assertEquals(51.2, f.value(30), EPS); [EOL]     Assert.assertEquals(51.2, f.value(Double.POSITIVE_INFINITY), EPS); [EOL] } <line_num>: 65,80
@Test [EOL] public void testEndpointBehavior() { [EOL]     final double[] x = { 0, 1, 2, 3 }; [EOL]     final double[] xp = { -8, 1, 2, 3 }; [EOL]     final double[] y = { 1, 2, 3, 4 }; [EOL]     final UnivariateFunction f = new StepFunction(x, y); [EOL]     final UnivariateFunction fp = new StepFunction(xp, y); [EOL]     Assert.assertEquals(f.value(-8), fp.value(-8), EPS); [EOL]     Assert.assertEquals(f.value(-10), fp.value(-10), EPS); [EOL]     Assert.assertEquals(f.value(0), fp.value(0), EPS); [EOL]     Assert.assertEquals(f.value(0.5), fp.value(0.5), EPS); [EOL]     for (int i = 0; i < x.length; i++) { [EOL]         Assert.assertEquals(y[i], f.value(x[i]), EPS); [EOL]         if (i > 0) { [EOL]             Assert.assertEquals(y[i - 1], f.value(x[i] - 0.5), EPS); [EOL]         } else { [EOL]             Assert.assertEquals(y[0], f.value(x[i] - 0.5), EPS); [EOL]         } [EOL]     } [EOL] } <line_num>: 82,101
@Test [EOL] public void testHeaviside() { [EOL]     final UnivariateFunction h = new StepFunction(new double[] { -1, 0 }, new double[] { 0, 1 }); [EOL]     Assert.assertEquals(0, h.value(Double.NEGATIVE_INFINITY), 0); [EOL]     Assert.assertEquals(0, h.value(-Double.MAX_VALUE), 0); [EOL]     Assert.assertEquals(0, h.value(-2), 0); [EOL]     Assert.assertEquals(0, h.value(-Double.MIN_VALUE), 0); [EOL]     Assert.assertEquals(1, h.value(0), 0); [EOL]     Assert.assertEquals(1, h.value(2), 0); [EOL]     Assert.assertEquals(1, h.value(Double.POSITIVE_INFINITY), 0); [EOL] } <line_num>: 103,115
