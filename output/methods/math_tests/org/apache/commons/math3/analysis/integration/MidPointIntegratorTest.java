@Test [EOL] public void testLowAccuracy() { [EOL]     UnivariateFunction f = new QuinticFunction(); [EOL]     UnivariateIntegrator integrator = new MidPointIntegrator(0.01, 1.0e-10, 2, 4); [EOL]     double min = -10; [EOL]     double max = -9; [EOL]     double expected = -3697001.0 / 48.0; [EOL]     double tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy()); [EOL]     double result = integrator.integrate(Integer.MAX_VALUE, f, min, max); [EOL]     Assert.assertTrue(integrator.getEvaluations() < Integer.MAX_VALUE / 2); [EOL]     Assert.assertTrue(integrator.getIterations() < MidPointIntegrator.MIDPOINT_MAX_ITERATIONS_COUNT / 2); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL] } <line_num>: 41,55
@Test [EOL] public void testSinFunction() { [EOL]     UnivariateFunction f = new Sin(); [EOL]     UnivariateIntegrator integrator = new MidPointIntegrator(); [EOL]     double min = 0; [EOL]     double max = FastMath.PI; [EOL]     double expected = 2; [EOL]     double tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy()); [EOL]     double result = integrator.integrate(Integer.MAX_VALUE, f, min, max); [EOL]     Assert.assertTrue(integrator.getEvaluations() < Integer.MAX_VALUE / 2); [EOL]     Assert.assertTrue(integrator.getIterations() < MidPointIntegrator.MIDPOINT_MAX_ITERATIONS_COUNT / 2); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     min = -FastMath.PI / 3; [EOL]     max = 0; [EOL]     expected = -0.5; [EOL]     tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy()); [EOL]     result = integrator.integrate(Integer.MAX_VALUE, f, min, max); [EOL]     Assert.assertTrue(integrator.getEvaluations() < Integer.MAX_VALUE / 2); [EOL]     Assert.assertTrue(integrator.getIterations() < MidPointIntegrator.MIDPOINT_MAX_ITERATIONS_COUNT / 2); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL] } <line_num>: 60,83
@Test [EOL] public void testQuinticFunction() { [EOL]     UnivariateFunction f = new QuinticFunction(); [EOL]     UnivariateIntegrator integrator = new MidPointIntegrator(); [EOL]     double min = 0; [EOL]     double max = 1; [EOL]     double expected = -1.0 / 48; [EOL]     double tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy()); [EOL]     double result = integrator.integrate(Integer.MAX_VALUE, f, min, max); [EOL]     Assert.assertTrue(integrator.getEvaluations() < Integer.MAX_VALUE / 2); [EOL]     Assert.assertTrue(integrator.getIterations() < MidPointIntegrator.MIDPOINT_MAX_ITERATIONS_COUNT / 2); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     min = 0; [EOL]     max = 0.5; [EOL]     expected = 11.0 / 768; [EOL]     tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy()); [EOL]     result = integrator.integrate(Integer.MAX_VALUE, f, min, max); [EOL]     Assert.assertTrue(integrator.getEvaluations() < Integer.MAX_VALUE / 2); [EOL]     Assert.assertTrue(integrator.getIterations() < MidPointIntegrator.MIDPOINT_MAX_ITERATIONS_COUNT / 2); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     min = -1; [EOL]     max = 4; [EOL]     expected = 2048 / 3.0 - 78 + 1.0 / 48; [EOL]     tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy()); [EOL]     result = integrator.integrate(Integer.MAX_VALUE, f, min, max); [EOL]     Assert.assertTrue(integrator.getEvaluations() < Integer.MAX_VALUE / 2); [EOL]     Assert.assertTrue(integrator.getIterations() < MidPointIntegrator.MIDPOINT_MAX_ITERATIONS_COUNT / 2); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL] } <line_num>: 88,120
@Test [EOL] public void testParameters() { [EOL]     UnivariateFunction f = new Sin(); [EOL]     try { [EOL]         new MidPointIntegrator().integrate(1000, f, 1, -1); [EOL]         Assert.fail("Expecting NumberIsTooLargeException - bad interval"); [EOL]     } catch (NumberIsTooLargeException ex) { [EOL]     } [EOL]     try { [EOL]         new MidPointIntegrator(5, 4); [EOL]         Assert.fail("Expecting NumberIsTooSmallException - bad iteration limits"); [EOL]     } catch (NumberIsTooSmallException ex) { [EOL]     } [EOL]     try { [EOL]         new MidPointIntegrator(10, 99); [EOL]         Assert.fail("Expecting NumberIsTooLargeException - bad iteration limits"); [EOL]     } catch (NumberIsTooLargeException ex) { [EOL]     } [EOL] } <line_num>: 125,150
