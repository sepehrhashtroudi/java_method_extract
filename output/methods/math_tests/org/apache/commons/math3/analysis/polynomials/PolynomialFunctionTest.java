@Test [EOL] public void testConstants() { [EOL]     double[] c = { 2.5 }; [EOL]     PolynomialFunction f = new PolynomialFunction(c); [EOL]     Assert.assertEquals(f.value(0), c[0], tolerance); [EOL]     Assert.assertEquals(f.value(-1), c[0], tolerance); [EOL]     Assert.assertEquals(f.value(-123.5), c[0], tolerance); [EOL]     Assert.assertEquals(f.value(3), c[0], tolerance); [EOL]     Assert.assertEquals(f.value(456.89), c[0], tolerance); [EOL]     Assert.assertEquals(f.degree(), 0); [EOL]     Assert.assertEquals(f.derivative().value(0), 0, tolerance); [EOL]     Assert.assertEquals(f.polynomialDerivative().derivative().value(0), 0, tolerance); [EOL] } <line_num>: 39,55
@Test [EOL] public void testLinear() { [EOL]     double[] c = { -1.5, 3 }; [EOL]     PolynomialFunction f = new PolynomialFunction(c); [EOL]     Assert.assertEquals(f.value(0), c[0], tolerance); [EOL]     Assert.assertEquals(-4.5, f.value(-1), tolerance); [EOL]     Assert.assertEquals(-9, f.value(-2.5), tolerance); [EOL]     Assert.assertEquals(0, f.value(0.5), tolerance); [EOL]     Assert.assertEquals(3, f.value(1.5), tolerance); [EOL]     Assert.assertEquals(7.5, f.value(3), tolerance); [EOL]     Assert.assertEquals(f.degree(), 1); [EOL]     Assert.assertEquals(f.polynomialDerivative().derivative().value(0), 0, tolerance); [EOL] } <line_num>: 66,84
@Test [EOL] public void testQuadratic() { [EOL]     double[] c = { -2, -3, 2 }; [EOL]     PolynomialFunction f = new PolynomialFunction(c); [EOL]     Assert.assertEquals(f.value(0), c[0], tolerance); [EOL]     Assert.assertEquals(0, f.value(-0.5), tolerance); [EOL]     Assert.assertEquals(0, f.value(2), tolerance); [EOL]     Assert.assertEquals(-2, f.value(1.5), tolerance); [EOL]     Assert.assertEquals(7, f.value(-1.5), tolerance); [EOL]     Assert.assertEquals(265.5312, f.value(12.34), tolerance); [EOL] } <line_num>: 90,104
@Test [EOL] public void testQuintic() { [EOL]     double[] c = { 0, 0, 15, -13, -3, 1 }; [EOL]     PolynomialFunction f = new PolynomialFunction(c); [EOL]     Assert.assertEquals(f.value(0), c[0], tolerance); [EOL]     Assert.assertEquals(0, f.value(5), tolerance); [EOL]     Assert.assertEquals(0, f.value(1), tolerance); [EOL]     Assert.assertEquals(0, f.value(-3), tolerance); [EOL]     Assert.assertEquals(54.84375, f.value(-1.5), tolerance); [EOL]     Assert.assertEquals(-8.06637, f.value(1.3), tolerance); [EOL]     Assert.assertEquals(f.degree(), 5); [EOL] } <line_num>: 110,126
@Test [EOL] public void testfirstDerivativeComparison() { [EOL]     double[] f_coeff = { 3, 6, -2, 1 }; [EOL]     double[] g_coeff = { 6, -4, 3 }; [EOL]     double[] h_coeff = { -4, 6 }; [EOL]     PolynomialFunction f = new PolynomialFunction(f_coeff); [EOL]     PolynomialFunction g = new PolynomialFunction(g_coeff); [EOL]     PolynomialFunction h = new PolynomialFunction(h_coeff); [EOL]     Assert.assertEquals(f.derivative().value(0), g.value(0), tolerance); [EOL]     Assert.assertEquals(f.derivative().value(1), g.value(1), tolerance); [EOL]     Assert.assertEquals(f.derivative().value(100), g.value(100), tolerance); [EOL]     Assert.assertEquals(f.derivative().value(4.1), g.value(4.1), tolerance); [EOL]     Assert.assertEquals(f.derivative().value(-3.25), g.value(-3.25), tolerance); [EOL]     Assert.assertEquals(g.derivative().value(FastMath.PI), h.value(FastMath.PI), tolerance); [EOL]     Assert.assertEquals(g.derivative().value(FastMath.E), h.value(FastMath.E), tolerance); [EOL] } <line_num>: 135,155
@Test [EOL] public void testString() { [EOL]     PolynomialFunction p = new PolynomialFunction(new double[] { -5, 3, 1 }); [EOL]     checkPolynomial(p, "-5 + 3 x + x^2"); [EOL]     checkPolynomial(new PolynomialFunction(new double[] { 0, -2, 3 }), "-2 x + 3 x^2"); [EOL]     checkPolynomial(new PolynomialFunction(new double[] { 1, -2, 3 }), "1 - 2 x + 3 x^2"); [EOL]     checkPolynomial(new PolynomialFunction(new double[] { 0, 2, 3 }), "2 x + 3 x^2"); [EOL]     checkPolynomial(new PolynomialFunction(new double[] { 1, 2, 3 }), "1 + 2 x + 3 x^2"); [EOL]     checkPolynomial(new PolynomialFunction(new double[] { 1, 0, 3 }), "1 + 3 x^2"); [EOL]     checkPolynomial(new PolynomialFunction(new double[] { 0 }), "0"); [EOL] } <line_num>: 157,173
@Test [EOL] public void testAddition() { [EOL]     PolynomialFunction p1 = new PolynomialFunction(new double[] { -2, 1 }); [EOL]     PolynomialFunction p2 = new PolynomialFunction(new double[] { 2, -1, 0 }); [EOL]     checkNullPolynomial(p1.add(p2)); [EOL]     p2 = p1.add(p1); [EOL]     checkPolynomial(p2, "-4 + 2 x"); [EOL]     p1 = new PolynomialFunction(new double[] { 1, -4, 2 }); [EOL]     p2 = new PolynomialFunction(new double[] { -1, 3, -2 }); [EOL]     p1 = p1.add(p2); [EOL]     Assert.assertEquals(1, p1.degree()); [EOL]     checkPolynomial(p1, "-x"); [EOL] } <line_num>: 175,189
@Test [EOL] public void testSubtraction() { [EOL]     PolynomialFunction p1 = new PolynomialFunction(new double[] { -2, 1 }); [EOL]     checkNullPolynomial(p1.subtract(p1)); [EOL]     PolynomialFunction p2 = new PolynomialFunction(new double[] { -2, 6 }); [EOL]     p2 = p2.subtract(p1); [EOL]     checkPolynomial(p2, "5 x"); [EOL]     p1 = new PolynomialFunction(new double[] { 1, -4, 2 }); [EOL]     p2 = new PolynomialFunction(new double[] { -1, 3, 2 }); [EOL]     p1 = p1.subtract(p2); [EOL]     Assert.assertEquals(1, p1.degree()); [EOL]     checkPolynomial(p1, "2 - 7 x"); [EOL] } <line_num>: 191,205
@Test [EOL] public void testMultiplication() { [EOL]     PolynomialFunction p1 = new PolynomialFunction(new double[] { -3, 2 }); [EOL]     PolynomialFunction p2 = new PolynomialFunction(new double[] { 3, 2, 1 }); [EOL]     checkPolynomial(p1.multiply(p2), "-9 + x^2 + 2 x^3"); [EOL]     p1 = new PolynomialFunction(new double[] { 0, 1 }); [EOL]     p2 = p1; [EOL]     for (int i = 2; i < 10; ++i) { [EOL]         p2 = p2.multiply(p1); [EOL]         checkPolynomial(p2, "x^" + i); [EOL]     } [EOL] } <line_num>: 207,219
@Test [EOL] public void testSerial() { [EOL]     PolynomialFunction p2 = new PolynomialFunction(new double[] { 3, 2, 1 }); [EOL]     Assert.assertEquals(p2, TestUtils.serializeAndRecover(p2)); [EOL] } <line_num>: 221,225
@Test [EOL] public void testMath341() { [EOL]     double[] f_coeff = { 3, 6, -2, 1 }; [EOL]     double[] g_coeff = { 6, -4, 3 }; [EOL]     double[] h_coeff = { -4, 6 }; [EOL]     PolynomialFunction f = new PolynomialFunction(f_coeff); [EOL]     PolynomialFunction g = new PolynomialFunction(g_coeff); [EOL]     PolynomialFunction h = new PolynomialFunction(h_coeff); [EOL]     Assert.assertEquals(f.derivative().value(0), g.value(0), tolerance); [EOL]     Assert.assertEquals(f.derivative().value(1), g.value(1), tolerance); [EOL]     Assert.assertEquals(f.derivative().value(100), g.value(100), tolerance); [EOL]     Assert.assertEquals(f.derivative().value(4.1), g.value(4.1), tolerance); [EOL]     Assert.assertEquals(f.derivative().value(-3.25), g.value(-3.25), tolerance); [EOL]     Assert.assertEquals(g.derivative().value(FastMath.PI), h.value(FastMath.PI), tolerance); [EOL]     Assert.assertEquals(g.derivative().value(FastMath.E), h.value(FastMath.E), tolerance); [EOL] } <line_num>: 234,254
public void checkPolynomial(PolynomialFunction p, String reference) { [EOL]     Assert.assertEquals(reference, p.toString()); [EOL] } <line_num>: 256,258
private void checkNullPolynomial(PolynomialFunction p) { [EOL]     for (double coefficient : p.getCoefficients()) { [EOL]         Assert.assertEquals(0, coefficient, 1e-15); [EOL]     } [EOL] } <line_num>: 260,264
