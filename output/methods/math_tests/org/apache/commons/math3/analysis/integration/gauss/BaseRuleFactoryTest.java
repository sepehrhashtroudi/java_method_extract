@Test [EOL] public void testConcurrentCreation() throws InterruptedException, ExecutionException { [EOL]     final int numTasks = 20; [EOL]     final ThreadPoolExecutor exec = new ThreadPoolExecutor(3, numTasks, 1, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(2)); [EOL]     final List<Future<Pair<double[], double[]>>> results = new ArrayList<Future<Pair<double[], double[]>>>(); [EOL]     for (int i = 0; i < numTasks; i++) { [EOL]         results.add(exec.submit(new RuleBuilder())); [EOL]     } [EOL]     for (Future<Pair<double[], double[]>> f : results) { [EOL]         f.get(); [EOL]     } [EOL]     final int n = RuleBuilder.getNumberOfCalls(); [EOL]     Assert.assertEquals("Rule computation was called " + n + " times", 1, n); [EOL] } <line_num>: 42,66
public Pair<double[], double[]> call() { [EOL]     final int dummy = 2; [EOL]     return factory.getRule(dummy); [EOL] } <line_num>: 72,75
public static int getNumberOfCalls() { [EOL]     return factory.getNumberOfCalls(); [EOL] } <line_num>: 77,79
@Override [EOL] protected Pair<Double[], Double[]> computeRule(int order) { [EOL]     nCalls.getAndIncrement(); [EOL]     try { [EOL]         Thread.sleep(20); [EOL]     } catch (InterruptedException e) { [EOL]         Assert.fail("Unexpected interruption"); [EOL]     } [EOL]     final Double[] p = new Double[order]; [EOL]     final Double[] w = new Double[order]; [EOL]     for (int i = 0; i < order; i++) { [EOL]         p[i] = new Double(i); [EOL]         w[i] = new Double(i); [EOL]     } [EOL]     return new Pair<Double[], Double[]>(p, w); [EOL] } <line_num>: 86,106
public int getNumberOfCalls() { [EOL]     return nCalls.get(); [EOL] } <line_num>: 108,110
